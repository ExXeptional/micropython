
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	08 0a 00 20 2d b5 01 00 91 b5 01 00 99 b5 01 00     ... -...........
      10:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 00 00 00 00     ................
	...
      2c:	a1 b5 01 00 a1 b5 01 00 00 00 00 00 a1 b5 01 00     ................
      3c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      4c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      5c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      6c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      7c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      8c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      9c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      ac:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      bc:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      cc:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      dc:	a1 b5 01 00 a1 b5 01 00 00 00 00 00 00 00 00 00     ................
      ec:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
      fc:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     10c:	a1 b5 01 00 00 00 00 00 00 00 00 00 a1 b5 01 00     ................
     11c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     12c:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     13c:	a1 b5 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     14c:	00 00 00 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     15c:	a1 b5 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1b0:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     1c0:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     1d0:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     1e0:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 00 00 00 00     ................
     1f0:	00 00 00 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     200:	a1 b5 01 00 a1 b5 01 00 00 00 00 00 00 00 00 00     ................
     210:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     220:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     230:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     240:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     250:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00 a1 b5 01 00     ................
     260:	a1 b5 01 00 a1 b5 01 00 a1 b5 01 00                 ............

0000026c <nlr_push_tail>:
// LTO can't see inside inline asm functions so explicitly mark nlr_push_tail as used
__attribute__((used)) unsigned int nlr_push_tail(nlr_buf_t *nlr);
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
     26c:	b480      	push	{r7}
     26e:	b085      	sub	sp, #20
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <nlr_push_tail+0x28>)
     276:	60fb      	str	r3, [r7, #12]
    nlr->prev = *top;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	601a      	str	r2, [r3, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	687a      	ldr	r2, [r7, #4]
     284:	601a      	str	r2, [r3, #0]
    return 0; // normal return
     286:	2300      	movs	r3, #0
}
     288:	4618      	mov	r0, r3
     28a:	3714      	adds	r7, #20
     28c:	46bd      	mov	sp, r7
     28e:	f85d 7b04 	ldr.w	r7, [sp], #4
     292:	4770      	bx	lr
     294:	20000a38 	.word	0x20000a38

00000298 <nlr_pop>:

void nlr_pop(void) {
     298:	b480      	push	{r7}
     29a:	b083      	sub	sp, #12
     29c:	af00      	add	r7, sp, #0
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <nlr_pop+0x20>)
     2a0:	607b      	str	r3, [r7, #4]
    *top = (*top)->prev;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	601a      	str	r2, [r3, #0]
}
     2ac:	bf00      	nop
     2ae:	370c      	adds	r7, #12
     2b0:	46bd      	mov	sp, r7
     2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2b6:	4770      	bx	lr
     2b8:	20000a38 	.word	0x20000a38

000002bc <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     2bc:	60c4      	str	r4, [r0, #12]
     2be:	6105      	str	r5, [r0, #16]
     2c0:	6146      	str	r6, [r0, #20]
     2c2:	6187      	str	r7, [r0, #24]
     2c4:	f8c0 801c 	str.w	r8, [r0, #28]
     2c8:	f8c0 9020 	str.w	r9, [r0, #32]
     2cc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     2d0:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     2d4:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     2d8:	f8c0 e008 	str.w	lr, [r0, #8]
     2dc:	f7ff bfc6 	b.w	26c <nlr_push_tail>

000002e0 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     2e0:	4a0d      	ldr	r2, [pc, #52]	; (318 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     2e2:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     2e4:	68d3      	ldr	r3, [r2, #12]
     2e6:	b90b      	cbnz	r3, 2ec <nlr_jump+0xc>
     2e8:	f01b f84c 	bl	1b384 <nlr_jump_fail>
     2ec:	6819      	ldr	r1, [r3, #0]
     2ee:	6058      	str	r0, [r3, #4]
     2f0:	60d1      	str	r1, [r2, #12]

    __asm volatile (
     2f2:	4618      	mov	r0, r3
     2f4:	68c4      	ldr	r4, [r0, #12]
     2f6:	6905      	ldr	r5, [r0, #16]
     2f8:	6946      	ldr	r6, [r0, #20]
     2fa:	6987      	ldr	r7, [r0, #24]
     2fc:	f8d0 801c 	ldr.w	r8, [r0, #28]
     300:	f8d0 9020 	ldr.w	r9, [r0, #32]
     304:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     308:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     30c:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     310:	f8d0 e008 	ldr.w	lr, [r0, #8]
     314:	2001      	movs	r0, #1
     316:	4770      	bx	lr
     318:	20000a2c 	.word	0x20000a2c

0000031c <m_malloc>:
    }
}

#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     324:	2100      	movs	r1, #0
     326:	6878      	ldr	r0, [r7, #4]
     328:	f000 faca 	bl	8c0 <gc_alloc>
     32c:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	2b00      	cmp	r3, #0
     332:	d105      	bne.n	340 <m_malloc+0x24>
     334:	687b      	ldr	r3, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d002      	beq.n	340 <m_malloc+0x24>
        m_malloc_fail(num_bytes);
     33a:	6878      	ldr	r0, [r7, #4]
     33c:	f00c fdee 	bl	cf1c <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     340:	68fb      	ldr	r3, [r7, #12]
}
     342:	4618      	mov	r0, r3
     344:	3710      	adds	r7, #16
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}
     34a:	bf00      	nop

0000034c <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     34c:	b580      	push	{r7, lr}
     34e:	b084      	sub	sp, #16
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     354:	2100      	movs	r1, #0
     356:	6878      	ldr	r0, [r7, #4]
     358:	f000 fab2 	bl	8c0 <gc_alloc>
     35c:	60f8      	str	r0, [r7, #12]
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     35e:	68fb      	ldr	r3, [r7, #12]
}
     360:	4618      	mov	r0, r3
     362:	3710      	adds	r7, #16
     364:	46bd      	mov	sp, r7
     366:	bd80      	pop	{r7, pc}

00000368 <m_malloc0>:
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
#endif

void *m_malloc0(size_t num_bytes) {
     368:	b580      	push	{r7, lr}
     36a:	b084      	sub	sp, #16
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
    void *ptr = m_malloc(num_bytes);
     370:	6878      	ldr	r0, [r7, #4]
     372:	f7ff ffd3 	bl	31c <m_malloc>
     376:	60f8      	str	r0, [r7, #12]
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
     378:	68fb      	ldr	r3, [r7, #12]
}
     37a:	4618      	mov	r0, r3
     37c:	3710      	adds	r7, #16
     37e:	46bd      	mov	sp, r7
     380:	bd80      	pop	{r7, pc}
     382:	bf00      	nop

00000384 <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     384:	b580      	push	{r7, lr}
     386:	b084      	sub	sp, #16
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
     38c:	6039      	str	r1, [r7, #0]
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     38e:	2201      	movs	r2, #1
     390:	6839      	ldr	r1, [r7, #0]
     392:	6878      	ldr	r0, [r7, #4]
     394:	f000 fb70 	bl	a78 <gc_realloc>
     398:	60f8      	str	r0, [r7, #12]
    if (new_ptr == NULL && new_num_bytes != 0) {
     39a:	68fb      	ldr	r3, [r7, #12]
     39c:	2b00      	cmp	r3, #0
     39e:	d105      	bne.n	3ac <m_realloc+0x28>
     3a0:	683b      	ldr	r3, [r7, #0]
     3a2:	2b00      	cmp	r3, #0
     3a4:	d002      	beq.n	3ac <m_realloc+0x28>
        m_malloc_fail(new_num_bytes);
     3a6:	6838      	ldr	r0, [r7, #0]
     3a8:	f00c fdb8 	bl	cf1c <m_malloc_fail>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3ac:	68fb      	ldr	r3, [r7, #12]
}
     3ae:	4618      	mov	r0, r3
     3b0:	3710      	adds	r7, #16
     3b2:	46bd      	mov	sp, r7
     3b4:	bd80      	pop	{r7, pc}
     3b6:	bf00      	nop

000003b8 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     3b8:	b580      	push	{r7, lr}
     3ba:	b086      	sub	sp, #24
     3bc:	af00      	add	r7, sp, #0
     3be:	60f8      	str	r0, [r7, #12]
     3c0:	60b9      	str	r1, [r7, #8]
     3c2:	4613      	mov	r3, r2
     3c4:	71fb      	strb	r3, [r7, #7]
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     3c6:	79fb      	ldrb	r3, [r7, #7]
     3c8:	461a      	mov	r2, r3
     3ca:	68b9      	ldr	r1, [r7, #8]
     3cc:	68f8      	ldr	r0, [r7, #12]
     3ce:	f000 fb53 	bl	a78 <gc_realloc>
     3d2:	6178      	str	r0, [r7, #20]
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3d4:	697b      	ldr	r3, [r7, #20]
}
     3d6:	4618      	mov	r0, r3
     3d8:	3718      	adds	r7, #24
     3da:	46bd      	mov	sp, r7
     3dc:	bd80      	pop	{r7, pc}
     3de:	bf00      	nop

000003e0 <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     3e0:	b580      	push	{r7, lr}
     3e2:	b082      	sub	sp, #8
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
#endif
    free(ptr);
     3e8:	6878      	ldr	r0, [r7, #4]
     3ea:	f000 fb07 	bl	9fc <gc_free>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
    #endif
}
     3ee:	bf00      	nop
     3f0:	3708      	adds	r7, #8
     3f2:	46bd      	mov	sp, r7
     3f4:	bd80      	pop	{r7, pc}
     3f6:	bf00      	nop

000003f8 <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     3fc:	4c2b      	ldr	r4, [pc, #172]	; (4ac <gc_mark_subtree+0xb4>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     3fe:	2500      	movs	r5, #0

        // check this block's children
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
            void *ptr = *ptrs;
            if (VERIFY_PTR(ptr)) {
     400:	4626      	mov	r6, r4
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
                    // an unmarked head, mark it, and push it on gc stack
                    TRACE_MARK(childblock, ptr);
                    ATB_HEAD_TO_MARK(childblock);
     402:	f04f 0a03 	mov.w	sl, #3
     406:	f8d4 e0f4 	ldr.w	lr, [r4, #244]	; 0xf4
        size_t n_blocks = 0;
     40a:	2100      	movs	r1, #0
            n_blocks += 1;
     40c:	3101      	adds	r1, #1
     40e:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     410:	089a      	lsrs	r2, r3, #2
     412:	f003 0303 	and.w	r3, r3, #3
     416:	f81e 2002 	ldrb.w	r2, [lr, r2]
     41a:	005b      	lsls	r3, r3, #1
     41c:	fa42 f303 	asr.w	r3, r2, r3
     420:	f003 0303 	and.w	r3, r3, #3
     424:	2b02      	cmp	r3, #2
     426:	d0f1      	beq.n	40c <gc_mark_subtree+0x14>
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     428:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     42c:	0109      	lsls	r1, r1, #4
     42e:	088a      	lsrs	r2, r1, #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     430:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     434:	b301      	cbz	r1, 478 <gc_mark_subtree+0x80>
     436:	3804      	subs	r0, #4
            void *ptr = *ptrs;
     438:	f850 1f04 	ldr.w	r1, [r0, #4]!
            if (VERIFY_PTR(ptr)) {
     43c:	070b      	lsls	r3, r1, #28
     43e:	d119      	bne.n	474 <gc_mark_subtree+0x7c>
     440:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     444:	4299      	cmp	r1, r3
     446:	d315      	bcc.n	474 <gc_mark_subtree+0x7c>
                size_t childblock = BLOCK_FROM_PTR(ptr);
     448:	1acb      	subs	r3, r1, r3
            if (VERIFY_PTR(ptr)) {
     44a:	f8d6 7100 	ldr.w	r7, [r6, #256]	; 0x100
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     44e:	ea4f 1c93 	mov.w	ip, r3, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     452:	091b      	lsrs	r3, r3, #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     454:	f003 0e03 	and.w	lr, r3, #3
            if (VERIFY_PTR(ptr)) {
     458:	42b9      	cmp	r1, r7
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     45a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
            if (VERIFY_PTR(ptr)) {
     45e:	d209      	bcs.n	474 <gc_mark_subtree+0x7c>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     460:	f8d6 90f4 	ldr.w	r9, [r6, #244]	; 0xf4
     464:	f819 800c 	ldrb.w	r8, [r9, ip]
     468:	fa48 f10e 	asr.w	r1, r8, lr
     46c:	f001 0103 	and.w	r1, r1, #3
     470:	2901      	cmp	r1, #1
     472:	d008      	beq.n	486 <gc_mark_subtree+0x8e>
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     474:	3a01      	subs	r2, #1
     476:	d1df      	bne.n	438 <gc_mark_subtree+0x40>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     478:	b1ad      	cbz	r5, 4a6 <gc_mark_subtree+0xae>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     47a:	3d01      	subs	r5, #1
     47c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
     480:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    }
     484:	e7bf      	b.n	406 <gc_mark_subtree+0xe>
                    ATB_HEAD_TO_MARK(childblock);
     486:	fa0a fe0e 	lsl.w	lr, sl, lr
     48a:	ea4e 0e08 	orr.w	lr, lr, r8
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     48e:	eb06 0885 	add.w	r8, r6, r5, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     492:	2d3f      	cmp	r5, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     494:	f809 e00c 	strb.w	lr, [r9, ip]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     498:	bf9a      	itte	ls
     49a:	3501      	addls	r5, #1
     49c:	f8c8 3108 	strls.w	r3, [r8, #264]	; 0x108
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     4a0:	f8c6 1104 	strhi.w	r1, [r6, #260]	; 0x104
     4a4:	e7e6      	b.n	474 <gc_mark_subtree+0x7c>
     4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4aa:	bf00      	nop
     4ac:	20000a2c 	.word	0x20000a2c

000004b0 <gc_free.part.0>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (ptr == NULL) {
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     4b2:	0703      	lsls	r3, r0, #28
     4b4:	d134      	bne.n	520 <gc_free.part.0+0x70>
     4b6:	4e21      	ldr	r6, [pc, #132]	; (53c <gc_free.part.0+0x8c>)
     4b8:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
     4bc:	4298      	cmp	r0, r3
     4be:	d32f      	bcc.n	520 <gc_free.part.0+0x70>
     4c0:	f8d6 2100 	ldr.w	r2, [r6, #256]	; 0x100
     4c4:	4290      	cmp	r0, r2
     4c6:	d22b      	bcs.n	520 <gc_free.part.0+0x70>
        size_t block = BLOCK_FROM_PTR(ptr);
     4c8:	1ac0      	subs	r0, r0, r3
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4ca:	0981      	lsrs	r1, r0, #6
     4cc:	f8d6 70f4 	ldr.w	r7, [r6, #244]	; 0xf4
        size_t block = BLOCK_FROM_PTR(ptr);
     4d0:	0900      	lsrs	r0, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4d2:	f000 0303 	and.w	r3, r0, #3
     4d6:	5c7a      	ldrb	r2, [r7, r1]
     4d8:	005c      	lsls	r4, r3, #1
     4da:	4122      	asrs	r2, r4
     4dc:	f002 0203 	and.w	r2, r2, #3
     4e0:	2a01      	cmp	r2, #1
     4e2:	d124      	bne.n	52e <gc_free.part.0+0x7e>
        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     4e4:	f8d6 220c 	ldr.w	r2, [r6, #524]	; 0x20c
     4e8:	0884      	lsrs	r4, r0, #2
     4ea:	4291      	cmp	r1, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     4ec:	bf38      	it	cc
     4ee:	f8c6 120c 	strcc.w	r1, [r6, #524]	; 0x20c
     4f2:	5d39      	ldrb	r1, [r7, r4]
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     4f4:	2503      	movs	r5, #3
     4f6:	005b      	lsls	r3, r3, #1
     4f8:	fa05 f303 	lsl.w	r3, r5, r3
     4fc:	ea21 0103 	bic.w	r1, r1, r3
     500:	5539      	strb	r1, [r7, r4]
            block += 1;
     502:	3001      	adds	r0, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     504:	f8d6 70f4 	ldr.w	r7, [r6, #244]	; 0xf4
     508:	0884      	lsrs	r4, r0, #2
     50a:	f000 0303 	and.w	r3, r0, #3
     50e:	5d39      	ldrb	r1, [r7, r4]
     510:	005a      	lsls	r2, r3, #1
     512:	fa41 f202 	asr.w	r2, r1, r2
     516:	f002 0203 	and.w	r2, r2, #3
     51a:	2a02      	cmp	r2, #2
     51c:	d0eb      	beq.n	4f6 <gc_free.part.0+0x46>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif
    }
}
     51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     520:	4b07      	ldr	r3, [pc, #28]	; (540 <gc_free.part.0+0x90>)
     522:	4a08      	ldr	r2, [pc, #32]	; (544 <gc_free.part.0+0x94>)
     524:	4808      	ldr	r0, [pc, #32]	; (548 <gc_free.part.0+0x98>)
     526:	f240 2147 	movw	r1, #583	; 0x247
     52a:	f01a ff37 	bl	1b39c <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     52e:	4b07      	ldr	r3, [pc, #28]	; (54c <gc_free.part.0+0x9c>)
     530:	4a04      	ldr	r2, [pc, #16]	; (544 <gc_free.part.0+0x94>)
     532:	4805      	ldr	r0, [pc, #20]	; (548 <gc_free.part.0+0x98>)
     534:	f240 2149 	movw	r1, #585	; 0x249
     538:	f01a ff30 	bl	1b39c <__assert_func>
     53c:	20000a2c 	.word	0x20000a2c
     540:	0001c8e0 	.word	0x0001c8e0
     544:	0001c8cc 	.word	0x0001c8cc
     548:	0001c8f0 	.word	0x0001c8f0
     54c:	0001c900 	.word	0x0001c900

00000550 <gc_init>:
void gc_init(void *start, void *end) {
     550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     552:	4a0f      	ldr	r2, [pc, #60]	; (590 <gc_init+0x40>)
     554:	4c0f      	ldr	r4, [pc, #60]	; (594 <gc_init+0x44>)
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     556:	f021 050f 	bic.w	r5, r1, #15
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     55a:	1a2b      	subs	r3, r5, r0
     55c:	fba2 2303 	umull	r2, r3, r2, r3
     560:	099b      	lsrs	r3, r3, #6
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     562:	eba5 1783 	sub.w	r7, r5, r3, lsl #6
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     566:	461a      	mov	r2, r3
     568:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     56a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     56e:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
    MP_STATE_MEM(gc_pool_end) = end;
     572:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     576:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     57a:	f01b fc67 	bl	1be4c <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     57e:	2300      	movs	r3, #0
    MP_STATE_MEM(gc_auto_collect_enabled) = 1;
     580:	2201      	movs	r2, #1
     582:	f8a4 220a 	strh.w	r2, [r4, #522]	; 0x20a
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     586:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
    MP_STATE_MEM(gc_lock_depth) = 0;
     58a:	f8a4 3208 	strh.w	r3, [r4, #520]	; 0x208
     58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     590:	fc0fc0fd 	.word	0xfc0fc0fd
     594:	20000a2c 	.word	0x20000a2c

00000598 <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     598:	4a03      	ldr	r2, [pc, #12]	; (5a8 <gc_lock+0x10>)
     59a:	f8b2 3208 	ldrh.w	r3, [r2, #520]	; 0x208
     59e:	3301      	adds	r3, #1
     5a0:	f8a2 3208 	strh.w	r3, [r2, #520]	; 0x208
     5a4:	4770      	bx	lr
     5a6:	bf00      	nop
     5a8:	20000a2c 	.word	0x20000a2c

000005ac <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     5ac:	4a03      	ldr	r2, [pc, #12]	; (5bc <gc_unlock+0x10>)
     5ae:	f8b2 3208 	ldrh.w	r3, [r2, #520]	; 0x208
     5b2:	3b01      	subs	r3, #1
     5b4:	f8a2 3208 	strh.w	r3, [r2, #520]	; 0x208
     5b8:	4770      	bx	lr
     5ba:	bf00      	nop
     5bc:	20000a2c 	.word	0x20000a2c

000005c0 <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     5c0:	4b03      	ldr	r3, [pc, #12]	; (5d0 <gc_is_locked+0x10>)
     5c2:	f8b3 0208 	ldrh.w	r0, [r3, #520]	; 0x208
}
     5c6:	3000      	adds	r0, #0
     5c8:	bf18      	it	ne
     5ca:	2001      	movne	r0, #1
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop
     5d0:	20000a2c 	.word	0x20000a2c

000005d4 <gc_collect_start>:
    MP_STATE_MEM(gc_lock_depth)++;
     5d4:	4b1d      	ldr	r3, [pc, #116]	; (64c <gc_collect_start+0x78>)
     5d6:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5da:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     5dc:	3201      	adds	r2, #1
void gc_collect_start(void) {
     5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5e2:	461e      	mov	r6, r3
    MP_STATE_MEM(gc_lock_depth)++;
     5e4:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5e8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
     5ec:	461c      	mov	r4, r3
     5ee:	f103 05dc 	add.w	r5, r3, #220	; 0xdc
        if (VERIFY_PTR(ptr)) {
     5f2:	461f      	mov	r7, r3
                ATB_HEAD_TO_MARK(block);
     5f4:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     5f8:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     5fc:	071a      	lsls	r2, r3, #28
     5fe:	d119      	bne.n	634 <gc_collect_start+0x60>
     600:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
     604:	4283      	cmp	r3, r0
     606:	d315      	bcc.n	634 <gc_collect_start+0x60>
            size_t block = BLOCK_FROM_PTR(ptr);
     608:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     60a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
            if (ATB_GET_KIND(block) == AT_HEAD) {
     60e:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     612:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     614:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     618:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     61a:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     61e:	d209      	bcs.n	634 <gc_collect_start+0x60>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     620:	f8d7 c0f4 	ldr.w	ip, [r7, #244]	; 0xf4
     624:	f81c 100e 	ldrb.w	r1, [ip, lr]
     628:	fa41 f302 	asr.w	r3, r1, r2
     62c:	f003 0303 	and.w	r3, r3, #3
     630:	2b01      	cmp	r3, #1
     632:	d003      	beq.n	63c <gc_collect_start+0x68>
    for (size_t i = 0; i < len; i++) {
     634:	42a5      	cmp	r5, r4
     636:	d1df      	bne.n	5f8 <gc_collect_start+0x24>
}
     638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     63c:	fa08 f202 	lsl.w	r2, r8, r2
     640:	430a      	orrs	r2, r1
     642:	f80c 200e 	strb.w	r2, [ip, lr]
                gc_mark_subtree(block);
     646:	f7ff fed7 	bl	3f8 <gc_mark_subtree>
     64a:	e7f3      	b.n	634 <gc_collect_start+0x60>
     64c:	20000a2c 	.word	0x20000a2c

00000650 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     650:	b399      	cbz	r1, 6ba <gc_collect_root+0x6a>
void gc_collect_root(void **ptrs, size_t len) {
     652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (VERIFY_PTR(ptr)) {
     656:	4f19      	ldr	r7, [pc, #100]	; (6bc <gc_collect_root+0x6c>)
     658:	460e      	mov	r6, r1
     65a:	1f05      	subs	r5, r0, #4
    for (size_t i = 0; i < len; i++) {
     65c:	2400      	movs	r4, #0
                ATB_HEAD_TO_MARK(block);
     65e:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     662:	f855 3f04 	ldr.w	r3, [r5, #4]!
        if (VERIFY_PTR(ptr)) {
     666:	071a      	lsls	r2, r3, #28
    for (size_t i = 0; i < len; i++) {
     668:	f104 0401 	add.w	r4, r4, #1
        if (VERIFY_PTR(ptr)) {
     66c:	d119      	bne.n	6a2 <gc_collect_root+0x52>
     66e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
     672:	4283      	cmp	r3, r0
     674:	d315      	bcc.n	6a2 <gc_collect_root+0x52>
            size_t block = BLOCK_FROM_PTR(ptr);
     676:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     678:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
            if (ATB_GET_KIND(block) == AT_HEAD) {
     67c:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     680:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     682:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     686:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     688:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     68c:	d209      	bcs.n	6a2 <gc_collect_root+0x52>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     68e:	f8d7 c0f4 	ldr.w	ip, [r7, #244]	; 0xf4
     692:	f81c 100e 	ldrb.w	r1, [ip, lr]
     696:	fa41 f302 	asr.w	r3, r1, r2
     69a:	f003 0303 	and.w	r3, r3, #3
     69e:	2b01      	cmp	r3, #1
     6a0:	d003      	beq.n	6aa <gc_collect_root+0x5a>
    for (size_t i = 0; i < len; i++) {
     6a2:	42a6      	cmp	r6, r4
     6a4:	d1dd      	bne.n	662 <gc_collect_root+0x12>
     6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     6aa:	fa08 f202 	lsl.w	r2, r8, r2
     6ae:	430a      	orrs	r2, r1
     6b0:	f80c 200e 	strb.w	r2, [ip, lr]
                gc_mark_subtree(block);
     6b4:	f7ff fea0 	bl	3f8 <gc_mark_subtree>
     6b8:	e7f3      	b.n	6a2 <gc_collect_root+0x52>
     6ba:	4770      	bx	lr
     6bc:	20000a2c 	.word	0x20000a2c

000006c0 <gc_collect_end>:
void gc_collect_end(void) {
     6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     6c4:	4f37      	ldr	r7, [pc, #220]	; (7a4 <gc_collect_end+0xe4>)
     6c6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
     6ca:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
     6ce:	0080      	lsls	r0, r0, #2
            if (ATB_GET_KIND(block) == AT_MARK) {
     6d0:	463c      	mov	r4, r7
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6d2:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     6d4:	b311      	cbz	r1, 71c <gc_collect_end+0x5c>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6d6:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     6da:	2800      	cmp	r0, #0
     6dc:	d04d      	beq.n	77a <gc_collect_end+0xba>
     6de:	2600      	movs	r6, #0
     6e0:	e002      	b.n	6e8 <gc_collect_end+0x28>
     6e2:	3601      	adds	r6, #1
     6e4:	4286      	cmp	r6, r0
     6e6:	d215      	bcs.n	714 <gc_collect_end+0x54>
            if (ATB_GET_KIND(block) == AT_MARK) {
     6e8:	08b2      	lsrs	r2, r6, #2
     6ea:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
     6ee:	f006 0303 	and.w	r3, r6, #3
     6f2:	5c8a      	ldrb	r2, [r1, r2]
     6f4:	005b      	lsls	r3, r3, #1
     6f6:	fa42 f303 	asr.w	r3, r2, r3
     6fa:	f003 0303 	and.w	r3, r3, #3
     6fe:	2b03      	cmp	r3, #3
     700:	d1ef      	bne.n	6e2 <gc_collect_end+0x22>
                gc_mark_subtree(block);
     702:	4630      	mov	r0, r6
     704:	f7ff fe78 	bl	3f8 <gc_mark_subtree>
     708:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     70c:	3601      	adds	r6, #1
     70e:	0080      	lsls	r0, r0, #2
     710:	4286      	cmp	r6, r0
     712:	d3e9      	bcc.n	6e8 <gc_collect_end+0x28>
     714:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
    while (MP_STATE_MEM(gc_stack_overflow)) {
     718:	2900      	cmp	r1, #0
     71a:	d1dc      	bne.n	6d6 <gc_collect_end+0x16>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     71c:	b368      	cbz	r0, 77a <gc_collect_end+0xba>
        switch (ATB_GET_KIND(block)) {
     71e:	f8df c084 	ldr.w	ip, [pc, #132]	; 7a4 <gc_collect_end+0xe4>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     722:	460a      	mov	r2, r1
                    ATB_ANY_TO_FREE(block);
     724:	f04f 0e03 	mov.w	lr, #3
                ATB_MARK_TO_HEAD(block);
     728:	2602      	movs	r6, #2
     72a:	e008      	b.n	73e <gc_collect_end+0x7e>
        switch (ATB_GET_KIND(block)) {
     72c:	f1b9 0f03 	cmp.w	r9, #3
     730:	d02d      	beq.n	78e <gc_collect_end+0xce>
     732:	f1b9 0f01 	cmp.w	r9, #1
     736:	d013      	beq.n	760 <gc_collect_end+0xa0>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     738:	3201      	adds	r2, #1
     73a:	4282      	cmp	r2, r0
     73c:	d21d      	bcs.n	77a <gc_collect_end+0xba>
        switch (ATB_GET_KIND(block)) {
     73e:	0894      	lsrs	r4, r2, #2
     740:	f8d7 50f4 	ldr.w	r5, [r7, #244]	; 0xf4
     744:	f002 0303 	and.w	r3, r2, #3
     748:	f815 8004 	ldrb.w	r8, [r5, r4]
     74c:	005b      	lsls	r3, r3, #1
     74e:	fa48 f903 	asr.w	r9, r8, r3
     752:	f009 0903 	and.w	r9, r9, #3
     756:	f1b9 0f02 	cmp.w	r9, #2
     75a:	d1e7      	bne.n	72c <gc_collect_end+0x6c>
                if (free_tail) {
     75c:	2900      	cmp	r1, #0
     75e:	d0eb      	beq.n	738 <gc_collect_end+0x78>
                    ATB_ANY_TO_FREE(block);
     760:	fa0e f303 	lsl.w	r3, lr, r3
     764:	ea28 0303 	bic.w	r3, r8, r3
     768:	552b      	strb	r3, [r5, r4]
     76a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     76e:	3201      	adds	r2, #1
     770:	0080      	lsls	r0, r0, #2
     772:	4282      	cmp	r2, r0
                    ATB_ANY_TO_FREE(block);
     774:	f04f 0101 	mov.w	r1, #1
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     778:	d3e1      	bcc.n	73e <gc_collect_end+0x7e>
    MP_STATE_MEM(gc_lock_depth)--;
     77a:	f8b7 3208 	ldrh.w	r3, [r7, #520]	; 0x208
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     77e:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     780:	3b01      	subs	r3, #1
     782:	f8a7 3208 	strh.w	r3, [r7, #520]	; 0x208
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     786:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
}
     78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                ATB_MARK_TO_HEAD(block);
     78e:	fa06 f303 	lsl.w	r3, r6, r3
     792:	ea28 0303 	bic.w	r3, r8, r3
     796:	552b      	strb	r3, [r5, r4]
     798:	f8dc 00f8 	ldr.w	r0, [ip, #248]	; 0xf8
                free_tail = 0;
     79c:	2100      	movs	r1, #0
     79e:	0080      	lsls	r0, r0, #2
     7a0:	e7ca      	b.n	738 <gc_collect_end+0x78>
     7a2:	bf00      	nop
     7a4:	20000a2c 	.word	0x20000a2c

000007a8 <gc_sweep_all>:
    MP_STATE_MEM(gc_lock_depth)++;
     7a8:	4b05      	ldr	r3, [pc, #20]	; (7c0 <gc_sweep_all+0x18>)
     7aa:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
    MP_STATE_MEM(gc_stack_overflow) = 0;
     7ae:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     7b0:	3201      	adds	r2, #1
     7b2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
    MP_STATE_MEM(gc_stack_overflow) = 0;
     7b6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    gc_collect_end();
     7ba:	f7ff bf81 	b.w	6c0 <gc_collect_end>
     7be:	bf00      	nop
     7c0:	20000a2c 	.word	0x20000a2c

000007c4 <gc_info>:
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7c4:	4b3d      	ldr	r3, [pc, #244]	; (8bc <gc_info+0xf8>)
     7c6:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
     7ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
void gc_info(gc_info_t *info) {
     7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7d2:	f8d3 60f8 	ldr.w	r6, [r3, #248]	; 0xf8
     7d6:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7da:	1a52      	subs	r2, r2, r1
    info->used = 0;
     7dc:	2300      	movs	r3, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7de:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7e0:	461d      	mov	r5, r3
     7e2:	00b6      	lsls	r6, r6, #2
    info->used = 0;
     7e4:	6043      	str	r3, [r0, #4]
    info->free = 0;
     7e6:	6083      	str	r3, [r0, #8]
    info->max_free = 0;
     7e8:	60c3      	str	r3, [r0, #12]
    info->num_1block = 0;
     7ea:	6103      	str	r3, [r0, #16]
    info->num_2block = 0;
     7ec:	6143      	str	r3, [r0, #20]
    info->max_block = 0;
     7ee:	6183      	str	r3, [r0, #24]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7f0:	469c      	mov	ip, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     7f2:	469e      	mov	lr, r3
     7f4:	461c      	mov	r4, r3
     7f6:	461a      	mov	r2, r3
     7f8:	4699      	mov	r9, r3
     7fa:	4619      	mov	r1, r3
     7fc:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     7fe:	f817 9009 	ldrb.w	r9, [r7, r9]
     802:	004b      	lsls	r3, r1, #1
     804:	fa49 f303 	asr.w	r3, r9, r3
     808:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     80c:	2b01      	cmp	r3, #1
     80e:	d030      	beq.n	872 <gc_info+0xae>
     810:	d327      	bcc.n	862 <gc_info+0x9e>
     812:	2b02      	cmp	r3, #2
     814:	d102      	bne.n	81c <gc_info+0x58>
                info->used += 1;
     816:	3501      	adds	r5, #1
     818:	6045      	str	r5, [r0, #4]
                len += 1;
     81a:	3401      	adds	r4, #1
        block++;
     81c:	3201      	adds	r2, #1
        if (!finish) {
     81e:	42b2      	cmp	r2, r6
     820:	d00e      	beq.n	840 <gc_info+0x7c>
            kind = ATB_GET_KIND(block);
     822:	ea4f 0992 	mov.w	r9, r2, lsr #2
     826:	f002 0103 	and.w	r1, r2, #3
     82a:	f817 3009 	ldrb.w	r3, [r7, r9]
     82e:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     832:	fa43 f30a 	asr.w	r3, r3, sl
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     836:	f013 0303 	ands.w	r3, r3, #3
     83a:	d001      	beq.n	840 <gc_info+0x7c>
     83c:	2b01      	cmp	r3, #1
     83e:	d1de      	bne.n	7fe <gc_info+0x3a>
            if (len == 1) {
     840:	2c01      	cmp	r4, #1
     842:	d01a      	beq.n	87a <gc_info+0xb6>
            } else if (len == 2) {
     844:	2c02      	cmp	r4, #2
     846:	d02b      	beq.n	8a0 <gc_info+0xdc>
            if (len > info->max_block) {
     848:	6981      	ldr	r1, [r0, #24]
     84a:	428c      	cmp	r4, r1
                info->max_block = len;
     84c:	bf88      	it	hi
     84e:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     850:	42b2      	cmp	r2, r6
     852:	d01b      	beq.n	88c <gc_info+0xc8>
     854:	2b01      	cmp	r3, #1
     856:	d027      	beq.n	8a8 <gc_info+0xe4>
     858:	ea4f 0992 	mov.w	r9, r2, lsr #2
     85c:	f002 0103 	and.w	r1, r2, #3
     860:	e7cd      	b.n	7fe <gc_info+0x3a>
                info->free += 1;
     862:	f10c 0c01 	add.w	ip, ip, #1
     866:	f8c0 c008 	str.w	ip, [r0, #8]
                len_free += 1;
     86a:	f10e 0e01 	add.w	lr, lr, #1
                len = 0;
     86e:	2400      	movs	r4, #0
                break;
     870:	e7d4      	b.n	81c <gc_info+0x58>
                info->used += 1;
     872:	3501      	adds	r5, #1
     874:	6045      	str	r5, [r0, #4]
                len = 1;
     876:	461c      	mov	r4, r3
                break;
     878:	e7d0      	b.n	81c <gc_info+0x58>
                info->num_1block += 1;
     87a:	6901      	ldr	r1, [r0, #16]
     87c:	3101      	adds	r1, #1
     87e:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     880:	6981      	ldr	r1, [r0, #24]
     882:	428c      	cmp	r4, r1
                info->max_block = len;
     884:	bf88      	it	hi
     886:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     888:	42b2      	cmp	r2, r6
     88a:	d1e3      	bne.n	854 <gc_info+0x90>
                if (len_free > info->max_free) {
     88c:	45c6      	cmp	lr, r8
     88e:	d90e      	bls.n	8ae <gc_info+0xea>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     890:	42b2      	cmp	r2, r6
                    info->max_free = len_free;
     892:	f8c0 e00c 	str.w	lr, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     896:	d00a      	beq.n	8ae <gc_info+0xea>
     898:	46f0      	mov	r8, lr
                len_free = 0;
     89a:	f04f 0e00 	mov.w	lr, #0
     89e:	e7db      	b.n	858 <gc_info+0x94>
                info->num_2block += 1;
     8a0:	6941      	ldr	r1, [r0, #20]
     8a2:	3101      	adds	r1, #1
     8a4:	6141      	str	r1, [r0, #20]
     8a6:	e7cf      	b.n	848 <gc_info+0x84>
                if (len_free > info->max_free) {
     8a8:	45f0      	cmp	r8, lr
     8aa:	d2f6      	bcs.n	89a <gc_info+0xd6>
     8ac:	e7f0      	b.n	890 <gc_info+0xcc>
    info->used *= BYTES_PER_BLOCK;
     8ae:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     8b0:	ea4f 130c 	mov.w	r3, ip, lsl #4
    info->used *= BYTES_PER_BLOCK;
     8b4:	6045      	str	r5, [r0, #4]
    info->free *= BYTES_PER_BLOCK;
     8b6:	6083      	str	r3, [r0, #8]
}
     8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8bc:	20000a2c 	.word	0x20000a2c

000008c0 <gc_alloc>:
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     8c0:	300f      	adds	r0, #15
     8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (n_blocks == 0) {
     8c6:	0906      	lsrs	r6, r0, #4
     8c8:	f000 8090 	beq.w	9ec <gc_alloc+0x12c>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     8cc:	4d4a      	ldr	r5, [pc, #296]	; (9f8 <gc_alloc+0x138>)
     8ce:	f8b5 4208 	ldrh.w	r4, [r5, #520]	; 0x208
     8d2:	2c00      	cmp	r4, #0
     8d4:	f040 808a 	bne.w	9ec <gc_alloc+0x12c>
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8d8:	f8b5 e20a 	ldrh.w	lr, [r5, #522]	; 0x20a
     8dc:	fabe fe8e 	clz	lr, lr
     8e0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8e4:	46a8      	mov	r8, r5
     8e6:	f8d5 220c 	ldr.w	r2, [r5, #524]	; 0x20c
     8ea:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
     8ee:	4282      	cmp	r2, r0
     8f0:	d234      	bcs.n	95c <gc_alloc+0x9c>
     8f2:	f8d8 70f4 	ldr.w	r7, [r8, #244]	; 0xf4
     8f6:	18b9      	adds	r1, r7, r2
     8f8:	e017      	b.n	92a <gc_alloc+0x6a>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     8fa:	3401      	adds	r4, #1
     8fc:	42b4      	cmp	r4, r6
     8fe:	d235      	bcs.n	96c <gc_alloc+0xac>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     900:	f013 0f0c 	tst.w	r3, #12
     904:	d11b      	bne.n	93e <gc_alloc+0x7e>
     906:	3401      	adds	r4, #1
     908:	42b4      	cmp	r4, r6
     90a:	d269      	bcs.n	9e0 <gc_alloc+0x120>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     90c:	f013 0f30 	tst.w	r3, #48	; 0x30
     910:	d11a      	bne.n	948 <gc_alloc+0x88>
     912:	3401      	adds	r4, #1
     914:	42b4      	cmp	r4, r6
     916:	d266      	bcs.n	9e6 <gc_alloc+0x126>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     918:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     91c:	d119      	bne.n	952 <gc_alloc+0x92>
     91e:	3401      	adds	r4, #1
     920:	42b4      	cmp	r4, r6
     922:	d266      	bcs.n	9f2 <gc_alloc+0x132>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     924:	3201      	adds	r2, #1
     926:	4282      	cmp	r2, r0
     928:	d218      	bcs.n	95c <gc_alloc+0x9c>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     92a:	f811 3b01 	ldrb.w	r3, [r1], #1
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     92e:	f013 0f03 	tst.w	r3, #3
     932:	d0e2      	beq.n	8fa <gc_alloc+0x3a>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     934:	f013 0f0c 	tst.w	r3, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     938:	f04f 0400 	mov.w	r4, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     93c:	d0e3      	beq.n	906 <gc_alloc+0x46>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     93e:	f013 0f30 	tst.w	r3, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     942:	f04f 0400 	mov.w	r4, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     946:	d0e4      	beq.n	912 <gc_alloc+0x52>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     948:	f013 0fc0 	tst.w	r3, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     94c:	f04f 0400 	mov.w	r4, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     950:	d0e5      	beq.n	91e <gc_alloc+0x5e>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     952:	3201      	adds	r2, #1
     954:	4282      	cmp	r2, r0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     956:	f04f 0400 	mov.w	r4, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     95a:	d3e6      	bcc.n	92a <gc_alloc+0x6a>
        if (collected) {
     95c:	f1be 0f00 	cmp.w	lr, #0
     960:	d144      	bne.n	9ec <gc_alloc+0x12c>
        gc_collect();
     962:	f01a fcd1 	bl	1b308 <gc_collect>
        collected = 1;
     966:	f04f 0e01 	mov.w	lr, #1
    }
     96a:	e7bc      	b.n	8e6 <gc_alloc+0x26>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     96c:	0093      	lsls	r3, r2, #2
    if (n_free == 1) {
     96e:	2c01      	cmp	r4, #1
    start_block = i - n_free + 1;
     970:	eba3 0004 	sub.w	r0, r3, r4
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     974:	f103 0201 	add.w	r2, r3, #1
    start_block = i - n_free + 1;
     978:	f100 0c01 	add.w	ip, r0, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     97c:	bf04      	itt	eq
     97e:	0891      	lsreq	r1, r2, #2
     980:	f8c5 120c 	streq.w	r1, [r5, #524]	; 0x20c
    ATB_FREE_TO_HEAD(start_block);
     984:	ea4f 019c 	mov.w	r1, ip, lsr #2
     988:	f00c 0403 	and.w	r4, ip, #3
     98c:	ea4f 0e44 	mov.w	lr, r4, lsl #1
     990:	5c7e      	ldrb	r6, [r7, r1]
     992:	2401      	movs	r4, #1
     994:	fa04 f40e 	lsl.w	r4, r4, lr
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     998:	3002      	adds	r0, #2
    ATB_FREE_TO_HEAD(start_block);
     99a:	4334      	orrs	r4, r6
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     99c:	4283      	cmp	r3, r0
    ATB_FREE_TO_HEAD(start_block);
     99e:	547c      	strb	r4, [r7, r1]
        ATB_FREE_TO_TAIL(bl);
     9a0:	bf28      	it	cs
     9a2:	f04f 0e02 	movcs.w	lr, #2
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9a6:	d30d      	bcc.n	9c4 <gc_alloc+0x104>
        ATB_FREE_TO_TAIL(bl);
     9a8:	0886      	lsrs	r6, r0, #2
     9aa:	f8d5 70f4 	ldr.w	r7, [r5, #244]	; 0xf4
     9ae:	f000 0103 	and.w	r1, r0, #3
     9b2:	5dbc      	ldrb	r4, [r7, r6]
     9b4:	0049      	lsls	r1, r1, #1
     9b6:	fa0e f101 	lsl.w	r1, lr, r1
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9ba:	3001      	adds	r0, #1
        ATB_FREE_TO_TAIL(bl);
     9bc:	4321      	orrs	r1, r4
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9be:	4283      	cmp	r3, r0
        ATB_FREE_TO_TAIL(bl);
     9c0:	55b9      	strb	r1, [r7, r6]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9c2:	d2f1      	bcs.n	9a8 <gc_alloc+0xe8>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     9c4:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     9c8:	ebcc 0202 	rsb	r2, ip, r2
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     9cc:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     9d0:	0112      	lsls	r2, r2, #4
     9d2:	4620      	mov	r0, r4
     9d4:	2100      	movs	r1, #0
     9d6:	f01b fa39 	bl	1be4c <memset>
    return ret_ptr;
     9da:	4620      	mov	r0, r4
     9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     9e0:	0092      	lsls	r2, r2, #2
     9e2:	1c53      	adds	r3, r2, #1
     9e4:	e7c3      	b.n	96e <gc_alloc+0xae>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     9e6:	0092      	lsls	r2, r2, #2
     9e8:	1c93      	adds	r3, r2, #2
     9ea:	e7c0      	b.n	96e <gc_alloc+0xae>
        return NULL;
     9ec:	2000      	movs	r0, #0
     9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     9f2:	0092      	lsls	r2, r2, #2
     9f4:	1cd3      	adds	r3, r2, #3
     9f6:	e7ba      	b.n	96e <gc_alloc+0xae>
     9f8:	20000a2c 	.word	0x20000a2c

000009fc <gc_free>:
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     9fc:	4b03      	ldr	r3, [pc, #12]	; (a0c <gc_free+0x10>)
     9fe:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
     a02:	b90b      	cbnz	r3, a08 <gc_free+0xc>
    if (ptr == NULL) {
     a04:	b100      	cbz	r0, a08 <gc_free+0xc>
     a06:	e553      	b.n	4b0 <gc_free.part.0>
     a08:	4770      	bx	lr
     a0a:	bf00      	nop
     a0c:	20000a2c 	.word	0x20000a2c

00000a10 <gc_nbytes>:

size_t gc_nbytes(const void *ptr) {
     a10:	4603      	mov	r3, r0
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     a12:	f010 000f 	ands.w	r0, r0, #15
     a16:	d12a      	bne.n	a6e <gc_nbytes+0x5e>
     a18:	4a16      	ldr	r2, [pc, #88]	; (a74 <gc_nbytes+0x64>)
     a1a:	f8d2 10fc 	ldr.w	r1, [r2, #252]	; 0xfc
     a1e:	428b      	cmp	r3, r1
     a20:	d315      	bcc.n	a4e <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     a22:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     a24:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
     a28:	42a3      	cmp	r3, r4
     a2a:	d20e      	bcs.n	a4a <gc_nbytes+0x3a>
        size_t block = BLOCK_FROM_PTR(ptr);
     a2c:	1a5b      	subs	r3, r3, r1
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a2e:	f8d2 40f4 	ldr.w	r4, [r2, #244]	; 0xf4
     a32:	099a      	lsrs	r2, r3, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     a34:	0919      	lsrs	r1, r3, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a36:	5ca2      	ldrb	r2, [r4, r2]
     a38:	f001 0303 	and.w	r3, r1, #3
     a3c:	005b      	lsls	r3, r3, #1
     a3e:	fa42 f303 	asr.w	r3, r2, r3
     a42:	f003 0303 	and.w	r3, r3, #3
     a46:	2b01      	cmp	r3, #1
     a48:	d002      	beq.n	a50 <gc_nbytes+0x40>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
     a4e:	4770      	bx	lr
                n_blocks += 1;
     a50:	3001      	adds	r0, #1
     a52:	180b      	adds	r3, r1, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     a54:	089a      	lsrs	r2, r3, #2
     a56:	f003 0303 	and.w	r3, r3, #3
     a5a:	5ca2      	ldrb	r2, [r4, r2]
     a5c:	005b      	lsls	r3, r3, #1
     a5e:	fa42 f303 	asr.w	r3, r2, r3
     a62:	f003 0303 	and.w	r3, r3, #3
     a66:	2b02      	cmp	r3, #2
     a68:	d0f2      	beq.n	a50 <gc_nbytes+0x40>
            return n_blocks * BYTES_PER_BLOCK;
     a6a:	0100      	lsls	r0, r0, #4
     a6c:	e7ed      	b.n	a4a <gc_nbytes+0x3a>
    return 0;
     a6e:	2000      	movs	r0, #0
     a70:	4770      	bx	lr
     a72:	bf00      	nop
     a74:	20000a2c 	.word	0x20000a2c

00000a78 <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     a78:	460b      	mov	r3, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     a7a:	4601      	mov	r1, r0
     a7c:	2800      	cmp	r0, #0
     a7e:	f000 80d4 	beq.w	c2a <gc_realloc+0x1b2>
void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a86:	4619      	mov	r1, r3
     a88:	4605      	mov	r5, r0
     a8a:	4691      	mov	r9, r2
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     a8c:	2b00      	cmp	r3, #0
     a8e:	d07c      	beq.n	b8a <gc_realloc+0x112>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     a90:	4e72      	ldr	r6, [pc, #456]	; (c5c <gc_realloc+0x1e4>)
     a92:	f8b6 3208 	ldrh.w	r3, [r6, #520]	; 0x208
     a96:	2b00      	cmp	r3, #0
     a98:	f040 80aa 	bne.w	bf0 <gc_realloc+0x178>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     a9c:	f010 080f 	ands.w	r8, r0, #15
     aa0:	f040 80cd 	bne.w	c3e <gc_realloc+0x1c6>
     aa4:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
     aa8:	4285      	cmp	r5, r0
     aaa:	f0c0 80c8 	bcc.w	c3e <gc_realloc+0x1c6>
     aae:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
     ab2:	429d      	cmp	r5, r3
     ab4:	f080 80c3 	bcs.w	c3e <gc_realloc+0x1c6>
    size_t block = BLOCK_FROM_PTR(ptr);
     ab8:	1a28      	subs	r0, r5, r0
    assert(ATB_GET_KIND(block) == AT_HEAD);
     aba:	0983      	lsrs	r3, r0, #6
     abc:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
    size_t block = BLOCK_FROM_PTR(ptr);
     ac0:	0900      	lsrs	r0, r0, #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     ac2:	f000 0703 	and.w	r7, r0, #3
     ac6:	5cd3      	ldrb	r3, [r2, r3]
     ac8:	007f      	lsls	r7, r7, #1
     aca:	fa43 f707 	asr.w	r7, r3, r7
     ace:	f007 0703 	and.w	r7, r7, #3
     ad2:	2f01      	cmp	r7, #1
     ad4:	f040 80ba 	bne.w	c4c <gc_realloc+0x1d4>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     ad8:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     adc:	f100 0c01 	add.w	ip, r0, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     ae0:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     ae4:	f101 0e0f 	add.w	lr, r1, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     ae8:	45e2      	cmp	sl, ip
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     aea:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     aee:	d912      	bls.n	b16 <gc_realloc+0x9e>
        byte block_type = ATB_GET_KIND(bl);
     af0:	ea4f 049c 	mov.w	r4, ip, lsr #2
     af4:	f00c 0303 	and.w	r3, ip, #3
     af8:	5d14      	ldrb	r4, [r2, r4]
     afa:	005b      	lsls	r3, r3, #1
     afc:	fa44 f303 	asr.w	r3, r4, r3
     b00:	f003 0303 	and.w	r3, r3, #3
        if (block_type == AT_TAIL) {
     b04:	2b02      	cmp	r3, #2
     b06:	d049      	beq.n	b9c <gc_realloc+0x124>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
     b08:	b92b      	cbnz	r3, b16 <gc_realloc+0x9e>
            n_free++;
     b0a:	f108 0801 	add.w	r8, r8, #1
            if (n_blocks + n_free >= new_blocks) {
     b0e:	eb08 0307 	add.w	r3, r8, r7
     b12:	459e      	cmp	lr, r3
     b14:	d843      	bhi.n	b9e <gc_realloc+0x126>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
     b16:	45be      	cmp	lr, r7
     b18:	d034      	beq.n	b84 <gc_realloc+0x10c>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
     b1a:	d345      	bcc.n	ba8 <gc_realloc+0x130>

        return ptr_in;
    }

    // check if we can expand in place
    if (new_blocks <= n_blocks + n_free) {
     b1c:	44b8      	add	r8, r7
     b1e:	45c6      	cmp	lr, r8
     b20:	d869      	bhi.n	bf6 <gc_realloc+0x17e>
        // mark few more blocks as used tail
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b22:	19c1      	adds	r1, r0, r7
     b24:	4470      	add	r0, lr
     b26:	4288      	cmp	r0, r1
     b28:	d924      	bls.n	b74 <gc_realloc+0xfc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b2a:	088c      	lsrs	r4, r1, #2
     b2c:	f001 0303 	and.w	r3, r1, #3
     b30:	f812 c004 	ldrb.w	ip, [r2, r4]
     b34:	005b      	lsls	r3, r3, #1
     b36:	fa4c f803 	asr.w	r8, ip, r3
     b3a:	f018 0f03 	tst.w	r8, #3
     b3e:	4414      	add	r4, r2
            ATB_FREE_TO_TAIL(bl);
     b40:	bf08      	it	eq
     b42:	2202      	moveq	r2, #2
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b44:	d00e      	beq.n	b64 <gc_realloc+0xec>
     b46:	e073      	b.n	c30 <gc_realloc+0x1b8>
     b48:	088c      	lsrs	r4, r1, #2
     b4a:	f8d6 80f4 	ldr.w	r8, [r6, #244]	; 0xf4
     b4e:	f001 0303 	and.w	r3, r1, #3
     b52:	f818 c004 	ldrb.w	ip, [r8, r4]
     b56:	005b      	lsls	r3, r3, #1
     b58:	fa4c f903 	asr.w	r9, ip, r3
     b5c:	f019 0f03 	tst.w	r9, #3
     b60:	4444      	add	r4, r8
     b62:	d165      	bne.n	c30 <gc_realloc+0x1b8>
            ATB_FREE_TO_TAIL(bl);
     b64:	fa02 f303 	lsl.w	r3, r2, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b68:	3101      	adds	r1, #1
            ATB_FREE_TO_TAIL(bl);
     b6a:	ea43 030c 	orr.w	r3, r3, ip
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b6e:	4288      	cmp	r0, r1
            ATB_FREE_TO_TAIL(bl);
     b70:	7023      	strb	r3, [r4, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b72:	d8e9      	bhi.n	b48 <gc_realloc+0xd0>

        GC_EXIT();

        #if MICROPY_GC_CONSERVATIVE_CLEAR
        // be conservative and zero out all the newly allocated blocks
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     b74:	ebc7 020e 	rsb	r2, r7, lr
     b78:	0112      	lsls	r2, r2, #4
     b7a:	eb05 1007 	add.w	r0, r5, r7, lsl #4
     b7e:	2100      	movs	r1, #0
     b80:	f01b f964 	bl	1be4c <memset>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif

        return ptr_in;
     b84:	4628      	mov	r0, r5
     b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     b8a:	4b34      	ldr	r3, [pc, #208]	; (c5c <gc_realloc+0x1e4>)
     b8c:	f8b3 5208 	ldrh.w	r5, [r3, #520]	; 0x208
     b90:	bb75      	cbnz	r5, bf0 <gc_realloc+0x178>
     b92:	f7ff fc8d 	bl	4b0 <gc_free.part.0>
        return NULL;
     b96:	4628      	mov	r0, r5
     b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n_blocks++;
     b9c:	3701      	adds	r7, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     b9e:	f10c 0c01 	add.w	ip, ip, #1
     ba2:	45e2      	cmp	sl, ip
     ba4:	d1a4      	bne.n	af0 <gc_realloc+0x78>
     ba6:	e7b6      	b.n	b16 <gc_realloc+0x9e>
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     ba8:	4486      	add	lr, r0
     baa:	4671      	mov	r1, lr
     bac:	4438      	add	r0, r7
            ATB_ANY_TO_FREE(bl);
     bae:	f04f 0803 	mov.w	r8, #3
     bb2:	e001      	b.n	bb8 <gc_realloc+0x140>
     bb4:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
     bb8:	ea4f 0c91 	mov.w	ip, r1, lsr #2
     bbc:	f001 0303 	and.w	r3, r1, #3
     bc0:	f812 400c 	ldrb.w	r4, [r2, ip]
     bc4:	005b      	lsls	r3, r3, #1
     bc6:	fa08 f303 	lsl.w	r3, r8, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bca:	3101      	adds	r1, #1
            ATB_ANY_TO_FREE(bl);
     bcc:	ea24 0303 	bic.w	r3, r4, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bd0:	4281      	cmp	r1, r0
            ATB_ANY_TO_FREE(bl);
     bd2:	f802 300c 	strb.w	r3, [r2, ip]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bd6:	d1ed      	bne.n	bb4 <gc_realloc+0x13c>
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     bd8:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
     bdc:	491f      	ldr	r1, [pc, #124]	; (c5c <gc_realloc+0x1e4>)
     bde:	ea4f 029e 	mov.w	r2, lr, lsr #2
     be2:	429a      	cmp	r2, r3
     be4:	d2ce      	bcs.n	b84 <gc_realloc+0x10c>
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
     be6:	f8c1 220c 	str.w	r2, [r1, #524]	; 0x20c
     bea:	4628      	mov	r0, r5
     bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return NULL;
     bf0:	2000      	movs	r0, #0
     bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bool ftb_state = false;
    #endif

    GC_EXIT();

    if (!allow_move) {
     bf6:	f1b9 0f00 	cmp.w	r9, #0
     bfa:	d0f9      	beq.n	bf0 <gc_realloc+0x178>
        // not allowed to move memory block so return failure
        return NULL;
    }

    // can't resize inplace; try to find a new contiguous chain
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
     bfc:	4608      	mov	r0, r1
     bfe:	2100      	movs	r1, #0
     c00:	f7ff fe5e 	bl	8c0 <gc_alloc>

    // check that the alloc succeeded
    if (ptr_out == NULL) {
     c04:	4604      	mov	r4, r0
     c06:	2800      	cmp	r0, #0
     c08:	d0f2      	beq.n	bf0 <gc_realloc+0x178>
        return NULL;
    }

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
     c0a:	013a      	lsls	r2, r7, #4
     c0c:	4629      	mov	r1, r5
     c0e:	f01b f881 	bl	1bd14 <memcpy>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     c12:	f8b6 3208 	ldrh.w	r3, [r6, #520]	; 0x208
     c16:	b92b      	cbnz	r3, c24 <gc_realloc+0x1ac>
     c18:	4628      	mov	r0, r5
     c1a:	f7ff fc49 	bl	4b0 <gc_free.part.0>
     c1e:	4620      	mov	r0, r4
     c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c24:	4620      	mov	r0, r4
    gc_free(ptr_in);
    return ptr_out;
}
     c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return gc_alloc(n_bytes, false);
     c2a:	4618      	mov	r0, r3
     c2c:	f7ff be48 	b.w	8c0 <gc_alloc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     c30:	4b0b      	ldr	r3, [pc, #44]	; (c60 <gc_realloc+0x1e8>)
     c32:	4a0c      	ldr	r2, [pc, #48]	; (c64 <gc_realloc+0x1ec>)
     c34:	480c      	ldr	r0, [pc, #48]	; (c68 <gc_realloc+0x1f0>)
     c36:	f240 21e9 	movw	r1, #745	; 0x2e9
     c3a:	f01a fbaf 	bl	1b39c <__assert_func>
    assert(VERIFY_PTR(ptr));
     c3e:	4b0b      	ldr	r3, [pc, #44]	; (c6c <gc_realloc+0x1f4>)
     c40:	4a08      	ldr	r2, [pc, #32]	; (c64 <gc_realloc+0x1ec>)
     c42:	4809      	ldr	r0, [pc, #36]	; (c68 <gc_realloc+0x1f0>)
     c44:	f240 21a9 	movw	r1, #681	; 0x2a9
     c48:	f01a fba8 	bl	1b39c <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c4c:	4b08      	ldr	r3, [pc, #32]	; (c70 <gc_realloc+0x1f8>)
     c4e:	4a05      	ldr	r2, [pc, #20]	; (c64 <gc_realloc+0x1ec>)
     c50:	4805      	ldr	r0, [pc, #20]	; (c68 <gc_realloc+0x1f0>)
     c52:	f240 21ab 	movw	r1, #683	; 0x2ab
     c56:	f01a fba1 	bl	1b39c <__assert_func>
     c5a:	bf00      	nop
     c5c:	20000a2c 	.word	0x20000a2c
     c60:	0001c920 	.word	0x0001c920
     c64:	0001c8d4 	.word	0x0001c8d4
     c68:	0001c8f0 	.word	0x0001c8f0
     c6c:	0001c8e0 	.word	0x0001c8e0
     c70:	0001c900 	.word	0x0001c900

00000c74 <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
     c74:	b510      	push	{r4, lr}
     c76:	b08a      	sub	sp, #40	; 0x28
    gc_info_t info;
    gc_info(&info);
     c78:	a803      	add	r0, sp, #12
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     c7a:	4c0b      	ldr	r4, [pc, #44]	; (ca8 <gc_dump_info+0x34>)
    gc_info(&info);
     c7c:	f7ff fda2 	bl	7c4 <gc_info>
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     c80:	9905      	ldr	r1, [sp, #20]
     c82:	9b04      	ldr	r3, [sp, #16]
     c84:	9a03      	ldr	r2, [sp, #12]
     c86:	9100      	str	r1, [sp, #0]
     c88:	4620      	mov	r0, r4
     c8a:	4908      	ldr	r1, [pc, #32]	; (cac <gc_dump_info+0x38>)
     c8c:	f001 f918 	bl	1ec0 <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
     c90:	a806      	add	r0, sp, #24
     c92:	c80d      	ldmia	r0, {r0, r2, r3}
     c94:	9909      	ldr	r1, [sp, #36]	; 0x24
     c96:	9001      	str	r0, [sp, #4]
     c98:	9100      	str	r1, [sp, #0]
     c9a:	4620      	mov	r0, r4
     c9c:	4904      	ldr	r1, [pc, #16]	; (cb0 <gc_dump_info+0x3c>)
     c9e:	f001 f90f 	bl	1ec0 <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
     ca2:	b00a      	add	sp, #40	; 0x28
     ca4:	bd10      	pop	{r4, pc}
     ca6:	bf00      	nop
     ca8:	0001d838 	.word	0x0001d838
     cac:	0001c93c 	.word	0x0001c93c
     cb0:	0001c960 	.word	0x0001c960

00000cb4 <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
     cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
     cb8:	4f4e      	ldr	r7, [pc, #312]	; (df4 <gc_dump_alloc_table+0x140>)
     cba:	494f      	ldr	r1, [pc, #316]	; (df8 <gc_dump_alloc_table+0x144>)
     cbc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
     cc0:	484e      	ldr	r0, [pc, #312]	; (dfc <gc_dump_alloc_table+0x148>)
     cc2:	f001 f8fd 	bl	1ec0 <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     cc6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
     cca:	0089      	lsls	r1, r1, #2
     ccc:	bf18      	it	ne
     cce:	2500      	movne	r5, #0
     cd0:	d11f      	bne.n	d12 <gc_dump_alloc_table+0x5e>
     cd2:	e078      	b.n	dc6 <gc_dump_alloc_table+0x112>
     cd4:	f005 0603 	and.w	r6, r5, #3
     cd8:	0076      	lsls	r6, r6, #1
     cda:	ea4f 0895 	mov.w	r8, r5, lsr #2
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
     cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
     ce2:	4a44      	ldr	r2, [pc, #272]	; (df4 <gc_dump_alloc_table+0x140>)
     ce4:	f813 3008 	ldrb.w	r3, [r3, r8]
     ce8:	fa43 f606 	asr.w	r6, r3, r6
     cec:	f006 0603 	and.w	r6, r6, #3
     cf0:	2e02      	cmp	r6, #2
     cf2:	d066      	beq.n	dc2 <gc_dump_alloc_table+0x10e>
     cf4:	2e03      	cmp	r6, #3
     cf6:	d062      	beq.n	dbe <gc_dump_alloc_table+0x10a>
     cf8:	2e01      	cmp	r6, #1
     cfa:	d044      	beq.n	d86 <gc_dump_alloc_table+0xd2>
            case AT_FREE: c = '.'; break;
     cfc:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
     cfe:	4940      	ldr	r1, [pc, #256]	; (e00 <gc_dump_alloc_table+0x14c>)
     d00:	483e      	ldr	r0, [pc, #248]	; (dfc <gc_dump_alloc_table+0x148>)
     d02:	f001 f8dd 	bl	1ec0 <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     d06:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
     d0a:	3501      	adds	r5, #1
     d0c:	0089      	lsls	r1, r1, #2
     d0e:	42a9      	cmp	r1, r5
     d10:	d959      	bls.n	dc6 <gc_dump_alloc_table+0x112>
        if (bl % DUMP_BYTES_PER_LINE == 0) {
     d12:	06a8      	lsls	r0, r5, #26
     d14:	d1de      	bne.n	cd4 <gc_dump_alloc_table+0x20>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     d16:	428d      	cmp	r5, r1
     d18:	d261      	bcs.n	dde <gc_dump_alloc_table+0x12a>
     d1a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
     d1e:	ea4f 0895 	mov.w	r8, r5, lsr #2
     d22:	f005 0603 	and.w	r6, r5, #3
     d26:	f810 3008 	ldrb.w	r3, [r0, r8]
     d2a:	0076      	lsls	r6, r6, #1
     d2c:	4133      	asrs	r3, r6
     d2e:	079a      	lsls	r2, r3, #30
     d30:	d121      	bne.n	d76 <gc_dump_alloc_table+0xc2>
     d32:	462c      	mov	r4, r5
     d34:	e004      	b.n	d40 <gc_dump_alloc_table+0x8c>
     d36:	5c82      	ldrb	r2, [r0, r2]
     d38:	fa42 f303 	asr.w	r3, r2, r3
     d3c:	079b      	lsls	r3, r3, #30
     d3e:	d108      	bne.n	d52 <gc_dump_alloc_table+0x9e>
                    bl2++;
     d40:	3401      	adds	r4, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     d42:	f004 0303 	and.w	r3, r4, #3
     d46:	428c      	cmp	r4, r1
     d48:	ea4f 0294 	mov.w	r2, r4, lsr #2
     d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
     d50:	d3f1      	bcc.n	d36 <gc_dump_alloc_table+0x82>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
     d52:	1b62      	subs	r2, r4, r5
     d54:	2a7f      	cmp	r2, #127	; 0x7f
     d56:	d90e      	bls.n	d76 <gc_dump_alloc_table+0xc2>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
     d58:	0992      	lsrs	r2, r2, #6
     d5a:	492a      	ldr	r1, [pc, #168]	; (e04 <gc_dump_alloc_table+0x150>)
     d5c:	4827      	ldr	r0, [pc, #156]	; (dfc <gc_dump_alloc_table+0x148>)
     d5e:	f001 f8af 	bl	1ec0 <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
     d66:	f024 053f 	bic.w	r5, r4, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     d6a:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     d6e:	d22a      	bcs.n	dc6 <gc_dump_alloc_table+0x112>
     d70:	ea4f 0895 	mov.w	r8, r5, lsr #2
     d74:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     d76:	4a24      	ldr	r2, [pc, #144]	; (e08 <gc_dump_alloc_table+0x154>)
     d78:	4924      	ldr	r1, [pc, #144]	; (e0c <gc_dump_alloc_table+0x158>)
     d7a:	4820      	ldr	r0, [pc, #128]	; (dfc <gc_dump_alloc_table+0x148>)
     d7c:	012b      	lsls	r3, r5, #4
     d7e:	401a      	ands	r2, r3
     d80:	f001 f89e 	bl	1ec0 <mp_printf>
     d84:	e7ab      	b.n	cde <gc_dump_alloc_table+0x2a>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     d86:	f8d2 10fc 	ldr.w	r1, [r2, #252]	; 0xfc
     d8a:	4a21      	ldr	r2, [pc, #132]	; (e10 <gc_dump_alloc_table+0x15c>)
     d8c:	012b      	lsls	r3, r5, #4
     d8e:	58cb      	ldr	r3, [r1, r3]
     d90:	4293      	cmp	r3, r2
     d92:	d020      	beq.n	dd6 <gc_dump_alloc_table+0x122>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     d94:	4a1f      	ldr	r2, [pc, #124]	; (e14 <gc_dump_alloc_table+0x160>)
     d96:	4293      	cmp	r3, r2
     d98:	d01f      	beq.n	dda <gc_dump_alloc_table+0x126>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     d9a:	4a1f      	ldr	r2, [pc, #124]	; (e18 <gc_dump_alloc_table+0x164>)
     d9c:	4293      	cmp	r3, r2
     d9e:	d024      	beq.n	dea <gc_dump_alloc_table+0x136>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     da0:	4a1e      	ldr	r2, [pc, #120]	; (e1c <gc_dump_alloc_table+0x168>)
     da2:	4293      	cmp	r3, r2
     da4:	d015      	beq.n	dd2 <gc_dump_alloc_table+0x11e>
     da6:	4a1e      	ldr	r2, [pc, #120]	; (e20 <gc_dump_alloc_table+0x16c>)
     da8:	4293      	cmp	r3, r2
     daa:	d012      	beq.n	dd2 <gc_dump_alloc_table+0x11e>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     dac:	4a1d      	ldr	r2, [pc, #116]	; (e24 <gc_dump_alloc_table+0x170>)
     dae:	4293      	cmp	r3, r2
     db0:	d01d      	beq.n	dee <gc_dump_alloc_table+0x13a>
                else if (*ptr == &mp_type_module) { c = 'M'; }
     db2:	4a1d      	ldr	r2, [pc, #116]	; (e28 <gc_dump_alloc_table+0x174>)
     db4:	4293      	cmp	r3, r2
     db6:	bf14      	ite	ne
     db8:	2268      	movne	r2, #104	; 0x68
     dba:	224d      	moveq	r2, #77	; 0x4d
     dbc:	e79f      	b.n	cfe <gc_dump_alloc_table+0x4a>
            case AT_MARK: c = 'm'; break;
     dbe:	226d      	movs	r2, #109	; 0x6d
     dc0:	e79d      	b.n	cfe <gc_dump_alloc_table+0x4a>
            case AT_TAIL: c = '='; break;
     dc2:	223d      	movs	r2, #61	; 0x3d
     dc4:	e79b      	b.n	cfe <gc_dump_alloc_table+0x4a>
    }
    mp_print_str(&mp_plat_print, "\n");
     dc6:	4919      	ldr	r1, [pc, #100]	; (e2c <gc_dump_alloc_table+0x178>)
     dc8:	480c      	ldr	r0, [pc, #48]	; (dfc <gc_dump_alloc_table+0x148>)
    GC_EXIT();
}
     dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mp_print_str(&mp_plat_print, "\n");
     dce:	f000 bd63 	b.w	1898 <mp_print_str>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     dd2:	2253      	movs	r2, #83	; 0x53
     dd4:	e793      	b.n	cfe <gc_dump_alloc_table+0x4a>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     dd6:	2254      	movs	r2, #84	; 0x54
     dd8:	e791      	b.n	cfe <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     dda:	224c      	movs	r2, #76	; 0x4c
     ddc:	e78f      	b.n	cfe <gc_dump_alloc_table+0x4a>
     dde:	f005 0603 	and.w	r6, r5, #3
     de2:	0076      	lsls	r6, r6, #1
     de4:	ea4f 0895 	mov.w	r8, r5, lsr #2
     de8:	e7c5      	b.n	d76 <gc_dump_alloc_table+0xc2>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     dea:	2244      	movs	r2, #68	; 0x44
     dec:	e787      	b.n	cfe <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     dee:	2242      	movs	r2, #66	; 0x42
     df0:	e785      	b.n	cfe <gc_dump_alloc_table+0x4a>
     df2:	bf00      	nop
     df4:	20000a2c 	.word	0x20000a2c
     df8:	0001c9a8 	.word	0x0001c9a8
     dfc:	0001d838 	.word	0x0001d838
     e00:	0001c9ec 	.word	0x0001c9ec
     e04:	0001c9c8 	.word	0x0001c9c8
     e08:	000ffff0 	.word	0x000ffff0
     e0c:	0001c9e4 	.word	0x0001c9e4
     e10:	00021db4 	.word	0x00021db4
     e14:	000211a8 	.word	0x000211a8
     e18:	000200e0 	.word	0x000200e0
     e1c:	00021b30 	.word	0x00021b30
     e20:	00021b6c 	.word	0x00021b6c
     e24:	00020b3c 	.word	0x00020b3c
     e28:	00021364 	.word	0x00021364
     e2c:	0001c9c4 	.word	0x0001c9c4

00000e30 <qstr_compute_hash>:
#define QSTR_ENTER()
#define QSTR_EXIT()
#endif

// this must match the equivalent function in makeqstrdata.py
mp_uint_t qstr_compute_hash(const byte *data, size_t len) {
     e30:	b480      	push	{r7}
     e32:	b085      	sub	sp, #20
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	6039      	str	r1, [r7, #0]
    // djb2 algorithm; see http://www.cse.yorku.ca/~oz/hash.html
    mp_uint_t hash = 5381;
     e3a:	f241 5305 	movw	r3, #5381	; 0x1505
     e3e:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e40:	687a      	ldr	r2, [r7, #4]
     e42:	683b      	ldr	r3, [r7, #0]
     e44:	4413      	add	r3, r2
     e46:	60bb      	str	r3, [r7, #8]
     e48:	e00a      	b.n	e60 <qstr_compute_hash+0x30>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	015a      	lsls	r2, r3, #5
     e4e:	68fb      	ldr	r3, [r7, #12]
     e50:	4413      	add	r3, r2
     e52:	687a      	ldr	r2, [r7, #4]
     e54:	7812      	ldrb	r2, [r2, #0]
     e56:	4053      	eors	r3, r2
     e58:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	3301      	adds	r3, #1
     e5e:	607b      	str	r3, [r7, #4]
     e60:	687a      	ldr	r2, [r7, #4]
     e62:	68bb      	ldr	r3, [r7, #8]
     e64:	429a      	cmp	r2, r3
     e66:	d3f0      	bcc.n	e4a <qstr_compute_hash+0x1a>
    }
    hash &= Q_HASH_MASK;
     e68:	68fb      	ldr	r3, [r7, #12]
     e6a:	b2db      	uxtb	r3, r3
     e6c:	60fb      	str	r3, [r7, #12]
    // Make sure that valid hash is never zero, zero means "hash not computed"
    if (hash == 0) {
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	2b00      	cmp	r3, #0
     e72:	d102      	bne.n	e7a <qstr_compute_hash+0x4a>
        hash++;
     e74:	68fb      	ldr	r3, [r7, #12]
     e76:	3301      	adds	r3, #1
     e78:	60fb      	str	r3, [r7, #12]
    }
    return hash;
     e7a:	68fb      	ldr	r3, [r7, #12]
}
     e7c:	4618      	mov	r0, r3
     e7e:	3714      	adds	r7, #20
     e80:	46bd      	mov	sp, r7
     e82:	f85d 7b04 	ldr.w	r7, [sp], #4
     e86:	4770      	bx	lr

00000e88 <qstr_init>:
#define CONST_POOL MICROPY_QSTR_EXTRA_POOL
#else
#define CONST_POOL mp_qstr_const_pool
#endif

void qstr_init(void) {
     e88:	b480      	push	{r7}
     e8a:	af00      	add	r7, sp, #0
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
     e8c:	4b05      	ldr	r3, [pc, #20]	; (ea4 <qstr_init+0x1c>)
     e8e:	4a06      	ldr	r2, [pc, #24]	; (ea8 <qstr_init+0x20>)
     e90:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
     e92:	4b04      	ldr	r3, [pc, #16]	; (ea4 <qstr_init+0x1c>)
     e94:	2200      	movs	r2, #0
     e96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    #if MICROPY_PY_THREAD
    mp_thread_mutex_init(&MP_STATE_VM(qstr_mutex));
    #endif
}
     e9a:	bf00      	nop
     e9c:	46bd      	mov	sp, r7
     e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea2:	4770      	bx	lr
     ea4:	20000a2c 	.word	0x20000a2c
     ea8:	00022e70 	.word	0x00022e70

00000eac <find_qstr>:

STATIC const byte *find_qstr(qstr q) {
     eac:	b480      	push	{r7}
     eae:	b085      	sub	sp, #20
     eb0:	af00      	add	r7, sp, #0
     eb2:	6078      	str	r0, [r7, #4]
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
     eb4:	4b0c      	ldr	r3, [pc, #48]	; (ee8 <find_qstr+0x3c>)
     eb6:	691b      	ldr	r3, [r3, #16]
     eb8:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     eba:	e002      	b.n	ec2 <find_qstr+0x16>
        pool = pool->prev;
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	681b      	ldr	r3, [r3, #0]
     ec0:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	685a      	ldr	r2, [r3, #4]
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	429a      	cmp	r2, r3
     eca:	d8f7      	bhi.n	ebc <find_qstr+0x10>
    }
    return pool->qstrs[q - pool->total_prev_len];
     ecc:	68fb      	ldr	r3, [r7, #12]
     ece:	685b      	ldr	r3, [r3, #4]
     ed0:	687a      	ldr	r2, [r7, #4]
     ed2:	1ad2      	subs	r2, r2, r3
     ed4:	68fb      	ldr	r3, [r7, #12]
     ed6:	3204      	adds	r2, #4
     ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
     edc:	4618      	mov	r0, r3
     ede:	3714      	adds	r7, #20
     ee0:	46bd      	mov	sp, r7
     ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
     ee6:	4770      	bx	lr
     ee8:	20000a2c 	.word	0x20000a2c

00000eec <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
     eec:	b580      	push	{r7, lr}
     eee:	b084      	sub	sp, #16
     ef0:	af00      	add	r7, sp, #0
     ef2:	6078      	str	r0, [r7, #4]
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
     ef4:	4b25      	ldr	r3, [pc, #148]	; (f8c <qstr_add+0xa0>)
     ef6:	691b      	ldr	r3, [r3, #16]
     ef8:	68da      	ldr	r2, [r3, #12]
     efa:	4b24      	ldr	r3, [pc, #144]	; (f8c <qstr_add+0xa0>)
     efc:	691b      	ldr	r3, [r3, #16]
     efe:	689b      	ldr	r3, [r3, #8]
     f00:	429a      	cmp	r2, r3
     f02:	d32b      	bcc.n	f5c <qstr_add+0x70>
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
     f04:	4b21      	ldr	r3, [pc, #132]	; (f8c <qstr_add+0xa0>)
     f06:	691b      	ldr	r3, [r3, #16]
     f08:	689b      	ldr	r3, [r3, #8]
     f0a:	3302      	adds	r3, #2
     f0c:	00db      	lsls	r3, r3, #3
     f0e:	4618      	mov	r0, r3
     f10:	f7ff fa1c 	bl	34c <m_malloc_maybe>
     f14:	60f8      	str	r0, [r7, #12]
        if (pool == NULL) {
     f16:	68fb      	ldr	r3, [r7, #12]
     f18:	2b00      	cmp	r3, #0
     f1a:	d106      	bne.n	f2a <qstr_add+0x3e>
            QSTR_EXIT();
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
     f1c:	4b1b      	ldr	r3, [pc, #108]	; (f8c <qstr_add+0xa0>)
     f1e:	691b      	ldr	r3, [r3, #16]
     f20:	689b      	ldr	r3, [r3, #8]
     f22:	005b      	lsls	r3, r3, #1
     f24:	4618      	mov	r0, r3
     f26:	f00b fff9 	bl	cf1c <m_malloc_fail>
        }
        pool->prev = MP_STATE_VM(last_pool);
     f2a:	4b18      	ldr	r3, [pc, #96]	; (f8c <qstr_add+0xa0>)
     f2c:	691a      	ldr	r2, [r3, #16]
     f2e:	68fb      	ldr	r3, [r7, #12]
     f30:	601a      	str	r2, [r3, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
     f32:	4b16      	ldr	r3, [pc, #88]	; (f8c <qstr_add+0xa0>)
     f34:	691b      	ldr	r3, [r3, #16]
     f36:	685a      	ldr	r2, [r3, #4]
     f38:	4b14      	ldr	r3, [pc, #80]	; (f8c <qstr_add+0xa0>)
     f3a:	691b      	ldr	r3, [r3, #16]
     f3c:	68db      	ldr	r3, [r3, #12]
     f3e:	441a      	add	r2, r3
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	605a      	str	r2, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
     f44:	4b11      	ldr	r3, [pc, #68]	; (f8c <qstr_add+0xa0>)
     f46:	691b      	ldr	r3, [r3, #16]
     f48:	689b      	ldr	r3, [r3, #8]
     f4a:	005a      	lsls	r2, r3, #1
     f4c:	68fb      	ldr	r3, [r7, #12]
     f4e:	609a      	str	r2, [r3, #8]
        pool->len = 0;
     f50:	68fb      	ldr	r3, [r7, #12]
     f52:	2200      	movs	r2, #0
     f54:	60da      	str	r2, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
     f56:	4a0d      	ldr	r2, [pc, #52]	; (f8c <qstr_add+0xa0>)
     f58:	68fb      	ldr	r3, [r7, #12]
     f5a:	6113      	str	r3, [r2, #16]
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
     f5c:	4b0b      	ldr	r3, [pc, #44]	; (f8c <qstr_add+0xa0>)
     f5e:	6919      	ldr	r1, [r3, #16]
     f60:	4b0a      	ldr	r3, [pc, #40]	; (f8c <qstr_add+0xa0>)
     f62:	691a      	ldr	r2, [r3, #16]
     f64:	68d3      	ldr	r3, [r2, #12]
     f66:	1c58      	adds	r0, r3, #1
     f68:	60d0      	str	r0, [r2, #12]
     f6a:	3304      	adds	r3, #4
     f6c:	687a      	ldr	r2, [r7, #4]
     f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
     f72:	4b06      	ldr	r3, [pc, #24]	; (f8c <qstr_add+0xa0>)
     f74:	691b      	ldr	r3, [r3, #16]
     f76:	685a      	ldr	r2, [r3, #4]
     f78:	4b04      	ldr	r3, [pc, #16]	; (f8c <qstr_add+0xa0>)
     f7a:	691b      	ldr	r3, [r3, #16]
     f7c:	68db      	ldr	r3, [r3, #12]
     f7e:	4413      	add	r3, r2
     f80:	3b01      	subs	r3, #1
}
     f82:	4618      	mov	r0, r3
     f84:	3710      	adds	r7, #16
     f86:	46bd      	mov	sp, r7
     f88:	bd80      	pop	{r7, pc}
     f8a:	bf00      	nop
     f8c:	20000a2c 	.word	0x20000a2c

00000f90 <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
     f90:	b580      	push	{r7, lr}
     f92:	b086      	sub	sp, #24
     f94:	af00      	add	r7, sp, #0
     f96:	6078      	str	r0, [r7, #4]
     f98:	6039      	str	r1, [r7, #0]
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
     f9a:	6839      	ldr	r1, [r7, #0]
     f9c:	6878      	ldr	r0, [r7, #4]
     f9e:	f7ff ff47 	bl	e30 <qstr_compute_hash>
     fa2:	60f8      	str	r0, [r7, #12]

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
     fa4:	4b22      	ldr	r3, [pc, #136]	; (1030 <qstr_find_strn+0xa0>)
     fa6:	691b      	ldr	r3, [r3, #16]
     fa8:	617b      	str	r3, [r7, #20]
     faa:	e038      	b.n	101e <qstr_find_strn+0x8e>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
     fac:	697b      	ldr	r3, [r7, #20]
     fae:	3310      	adds	r3, #16
     fb0:	613b      	str	r3, [r7, #16]
     fb2:	697b      	ldr	r3, [r7, #20]
     fb4:	f103 0210 	add.w	r2, r3, #16
     fb8:	697b      	ldr	r3, [r7, #20]
     fba:	68db      	ldr	r3, [r3, #12]
     fbc:	009b      	lsls	r3, r3, #2
     fbe:	4413      	add	r3, r2
     fc0:	60bb      	str	r3, [r7, #8]
     fc2:	e025      	b.n	1010 <qstr_find_strn+0x80>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
     fc4:	693b      	ldr	r3, [r7, #16]
     fc6:	681b      	ldr	r3, [r3, #0]
     fc8:	781b      	ldrb	r3, [r3, #0]
     fca:	461a      	mov	r2, r3
     fcc:	68fb      	ldr	r3, [r7, #12]
     fce:	429a      	cmp	r2, r3
     fd0:	d11b      	bne.n	100a <qstr_find_strn+0x7a>
     fd2:	693b      	ldr	r3, [r7, #16]
     fd4:	681b      	ldr	r3, [r3, #0]
     fd6:	3301      	adds	r3, #1
     fd8:	781b      	ldrb	r3, [r3, #0]
     fda:	461a      	mov	r2, r3
     fdc:	683b      	ldr	r3, [r7, #0]
     fde:	429a      	cmp	r2, r3
     fe0:	d113      	bne.n	100a <qstr_find_strn+0x7a>
     fe2:	693b      	ldr	r3, [r7, #16]
     fe4:	681b      	ldr	r3, [r3, #0]
     fe6:	3302      	adds	r3, #2
     fe8:	683a      	ldr	r2, [r7, #0]
     fea:	6879      	ldr	r1, [r7, #4]
     fec:	4618      	mov	r0, r3
     fee:	f01a ff79 	bl	1bee4 <memcmp>
     ff2:	4603      	mov	r3, r0
     ff4:	2b00      	cmp	r3, #0
     ff6:	d108      	bne.n	100a <qstr_find_strn+0x7a>
                return pool->total_prev_len + (q - pool->qstrs);
     ff8:	697b      	ldr	r3, [r7, #20]
     ffa:	685b      	ldr	r3, [r3, #4]
     ffc:	693a      	ldr	r2, [r7, #16]
     ffe:	6979      	ldr	r1, [r7, #20]
    1000:	3110      	adds	r1, #16
    1002:	1a52      	subs	r2, r2, r1
    1004:	1092      	asrs	r2, r2, #2
    1006:	4413      	add	r3, r2
    1008:	e00d      	b.n	1026 <qstr_find_strn+0x96>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    100a:	693b      	ldr	r3, [r7, #16]
    100c:	3304      	adds	r3, #4
    100e:	613b      	str	r3, [r7, #16]
    1010:	693a      	ldr	r2, [r7, #16]
    1012:	68bb      	ldr	r3, [r7, #8]
    1014:	429a      	cmp	r2, r3
    1016:	d3d5      	bcc.n	fc4 <qstr_find_strn+0x34>
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    1018:	697b      	ldr	r3, [r7, #20]
    101a:	681b      	ldr	r3, [r3, #0]
    101c:	617b      	str	r3, [r7, #20]
    101e:	697b      	ldr	r3, [r7, #20]
    1020:	2b00      	cmp	r3, #0
    1022:	d1c3      	bne.n	fac <qstr_find_strn+0x1c>
            }
        }
    }

    // not found; return null qstr
    return 0;
    1024:	2300      	movs	r3, #0
}
    1026:	4618      	mov	r0, r3
    1028:	3718      	adds	r7, #24
    102a:	46bd      	mov	sp, r7
    102c:	bd80      	pop	{r7, pc}
    102e:	bf00      	nop
    1030:	20000a2c 	.word	0x20000a2c

00001034 <qstr_from_str>:

qstr qstr_from_str(const char *str) {
    1034:	b580      	push	{r7, lr}
    1036:	b082      	sub	sp, #8
    1038:	af00      	add	r7, sp, #0
    103a:	6078      	str	r0, [r7, #4]
    return qstr_from_strn(str, strlen(str));
    103c:	6878      	ldr	r0, [r7, #4]
    103e:	f01a ffa3 	bl	1bf88 <strlen>
    1042:	4603      	mov	r3, r0
    1044:	4619      	mov	r1, r3
    1046:	6878      	ldr	r0, [r7, #4]
    1048:	f000 f806 	bl	1058 <qstr_from_strn>
    104c:	4603      	mov	r3, r0
}
    104e:	4618      	mov	r0, r3
    1050:	3708      	adds	r7, #8
    1052:	46bd      	mov	sp, r7
    1054:	bd80      	pop	{r7, pc}
    1056:	bf00      	nop

00001058 <qstr_from_strn>:

qstr qstr_from_strn(const char *str, size_t len) {
    1058:	b580      	push	{r7, lr}
    105a:	b088      	sub	sp, #32
    105c:	af00      	add	r7, sp, #0
    105e:	6078      	str	r0, [r7, #4]
    1060:	6039      	str	r1, [r7, #0]
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    1062:	683b      	ldr	r3, [r7, #0]
    1064:	2bff      	cmp	r3, #255	; 0xff
    1066:	d905      	bls.n	1074 <qstr_from_strn+0x1c>
    1068:	4b56      	ldr	r3, [pc, #344]	; (11c4 <qstr_from_strn+0x16c>)
    106a:	4a57      	ldr	r2, [pc, #348]	; (11c8 <qstr_from_strn+0x170>)
    106c:	21ba      	movs	r1, #186	; 0xba
    106e:	4857      	ldr	r0, [pc, #348]	; (11cc <qstr_from_strn+0x174>)
    1070:	f01a f994 	bl	1b39c <__assert_func>
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    1074:	6839      	ldr	r1, [r7, #0]
    1076:	6878      	ldr	r0, [r7, #4]
    1078:	f7ff ff8a 	bl	f90 <qstr_find_strn>
    107c:	61f8      	str	r0, [r7, #28]
    if (q == 0) {
    107e:	69fb      	ldr	r3, [r7, #28]
    1080:	2b00      	cmp	r3, #0
    1082:	f040 8099 	bne.w	11b8 <qstr_from_strn+0x160>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    1086:	683b      	ldr	r3, [r7, #0]
    1088:	3303      	adds	r3, #3
    108a:	617b      	str	r3, [r7, #20]

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    108c:	4b50      	ldr	r3, [pc, #320]	; (11d0 <qstr_from_strn+0x178>)
    108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    1092:	2b00      	cmp	r3, #0
    1094:	d030      	beq.n	10f8 <qstr_from_strn+0xa0>
    1096:	4b4e      	ldr	r3, [pc, #312]	; (11d0 <qstr_from_strn+0x178>)
    1098:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    109c:	697b      	ldr	r3, [r7, #20]
    109e:	441a      	add	r2, r3
    10a0:	4b4b      	ldr	r3, [pc, #300]	; (11d0 <qstr_from_strn+0x178>)
    10a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    10a6:	429a      	cmp	r2, r3
    10a8:	d926      	bls.n	10f8 <qstr_from_strn+0xa0>
            // not enough room at end of previously interned string so try to grow
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    10aa:	4b49      	ldr	r3, [pc, #292]	; (11d0 <qstr_from_strn+0x178>)
    10ac:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
    10b0:	4b47      	ldr	r3, [pc, #284]	; (11d0 <qstr_from_strn+0x178>)
    10b2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    10b6:	697b      	ldr	r3, [r7, #20]
    10b8:	4413      	add	r3, r2
    10ba:	2200      	movs	r2, #0
    10bc:	4619      	mov	r1, r3
    10be:	f7ff f97b 	bl	3b8 <m_realloc_maybe>
    10c2:	6138      	str	r0, [r7, #16]
            if (new_p == NULL) {
    10c4:	693b      	ldr	r3, [r7, #16]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d10e      	bne.n	10e8 <qstr_from_strn+0x90>
                // could not grow existing memory; shrink it to fit previous
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    10ca:	4b41      	ldr	r3, [pc, #260]	; (11d0 <qstr_from_strn+0x178>)
    10cc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
    10d0:	4b3f      	ldr	r3, [pc, #252]	; (11d0 <qstr_from_strn+0x178>)
    10d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    10d6:	2200      	movs	r2, #0
    10d8:	4619      	mov	r1, r3
    10da:	f7ff f96d 	bl	3b8 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    10de:	4b3c      	ldr	r3, [pc, #240]	; (11d0 <qstr_from_strn+0x178>)
    10e0:	2200      	movs	r2, #0
    10e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    10e6:	e007      	b.n	10f8 <qstr_from_strn+0xa0>
            } else {
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    10e8:	4b39      	ldr	r3, [pc, #228]	; (11d0 <qstr_from_strn+0x178>)
    10ea:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    10ee:	697b      	ldr	r3, [r7, #20]
    10f0:	4413      	add	r3, r2
    10f2:	4a37      	ldr	r2, [pc, #220]	; (11d0 <qstr_from_strn+0x178>)
    10f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    10f8:	4b35      	ldr	r3, [pc, #212]	; (11d0 <qstr_from_strn+0x178>)
    10fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    10fe:	2b00      	cmp	r3, #0
    1100:	d12b      	bne.n	115a <qstr_from_strn+0x102>
            // no existing memory for the interned string so allocate a new chunk
            size_t al = n_bytes;
    1102:	697b      	ldr	r3, [r7, #20]
    1104:	61bb      	str	r3, [r7, #24]
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    1106:	69bb      	ldr	r3, [r7, #24]
    1108:	2b7f      	cmp	r3, #127	; 0x7f
    110a:	d801      	bhi.n	1110 <qstr_from_strn+0xb8>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    110c:	2380      	movs	r3, #128	; 0x80
    110e:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    1110:	69b8      	ldr	r0, [r7, #24]
    1112:	f7ff f91b 	bl	34c <m_malloc_maybe>
    1116:	4602      	mov	r2, r0
    1118:	4b2d      	ldr	r3, [pc, #180]	; (11d0 <qstr_from_strn+0x178>)
    111a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    111e:	4b2c      	ldr	r3, [pc, #176]	; (11d0 <qstr_from_strn+0x178>)
    1120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    1124:	2b00      	cmp	r3, #0
    1126:	d110      	bne.n	114a <qstr_from_strn+0xf2>
                // failed to allocate a large chunk so try with exact size
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    1128:	6978      	ldr	r0, [r7, #20]
    112a:	f7ff f90f 	bl	34c <m_malloc_maybe>
    112e:	4602      	mov	r2, r0
    1130:	4b27      	ldr	r3, [pc, #156]	; (11d0 <qstr_from_strn+0x178>)
    1132:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1136:	4b26      	ldr	r3, [pc, #152]	; (11d0 <qstr_from_strn+0x178>)
    1138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    113c:	2b00      	cmp	r3, #0
    113e:	d102      	bne.n	1146 <qstr_from_strn+0xee>
                    QSTR_EXIT();
                    m_malloc_fail(n_bytes);
    1140:	6978      	ldr	r0, [r7, #20]
    1142:	f00b feeb 	bl	cf1c <m_malloc_fail>
                }
                al = n_bytes;
    1146:	697b      	ldr	r3, [r7, #20]
    1148:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_alloc) = al;
    114a:	4a21      	ldr	r2, [pc, #132]	; (11d0 <qstr_from_strn+0x178>)
    114c:	69bb      	ldr	r3, [r7, #24]
    114e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            MP_STATE_VM(qstr_last_used) = 0;
    1152:	4b1f      	ldr	r3, [pc, #124]	; (11d0 <qstr_from_strn+0x178>)
    1154:	2200      	movs	r2, #0
    1156:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    115a:	4b1d      	ldr	r3, [pc, #116]	; (11d0 <qstr_from_strn+0x178>)
    115c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    1160:	4b1b      	ldr	r3, [pc, #108]	; (11d0 <qstr_from_strn+0x178>)
    1162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    1166:	4413      	add	r3, r2
    1168:	60fb      	str	r3, [r7, #12]
        MP_STATE_VM(qstr_last_used) += n_bytes;
    116a:	4b19      	ldr	r3, [pc, #100]	; (11d0 <qstr_from_strn+0x178>)
    116c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    1170:	697b      	ldr	r3, [r7, #20]
    1172:	4413      	add	r3, r2
    1174:	4a16      	ldr	r2, [pc, #88]	; (11d0 <qstr_from_strn+0x178>)
    1176:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    117a:	6839      	ldr	r1, [r7, #0]
    117c:	6878      	ldr	r0, [r7, #4]
    117e:	f7ff fe57 	bl	e30 <qstr_compute_hash>
    1182:	60b8      	str	r0, [r7, #8]
        Q_SET_HASH(q_ptr, hash);
    1184:	68bb      	ldr	r3, [r7, #8]
    1186:	b2da      	uxtb	r2, r3
    1188:	68fb      	ldr	r3, [r7, #12]
    118a:	701a      	strb	r2, [r3, #0]
        Q_SET_LENGTH(q_ptr, len);
    118c:	68fb      	ldr	r3, [r7, #12]
    118e:	3301      	adds	r3, #1
    1190:	683a      	ldr	r2, [r7, #0]
    1192:	b2d2      	uxtb	r2, r2
    1194:	701a      	strb	r2, [r3, #0]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	3302      	adds	r3, #2
    119a:	683a      	ldr	r2, [r7, #0]
    119c:	6879      	ldr	r1, [r7, #4]
    119e:	4618      	mov	r0, r3
    11a0:	f01a fdb8 	bl	1bd14 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    11a4:	683b      	ldr	r3, [r7, #0]
    11a6:	3302      	adds	r3, #2
    11a8:	68fa      	ldr	r2, [r7, #12]
    11aa:	4413      	add	r3, r2
    11ac:	2200      	movs	r2, #0
    11ae:	701a      	strb	r2, [r3, #0]
        q = qstr_add(q_ptr);
    11b0:	68f8      	ldr	r0, [r7, #12]
    11b2:	f7ff fe9b 	bl	eec <qstr_add>
    11b6:	61f8      	str	r0, [r7, #28]
    }
    QSTR_EXIT();
    return q;
    11b8:	69fb      	ldr	r3, [r7, #28]
}
    11ba:	4618      	mov	r0, r3
    11bc:	3720      	adds	r7, #32
    11be:	46bd      	mov	sp, r7
    11c0:	bd80      	pop	{r7, pc}
    11c2:	bf00      	nop
    11c4:	0001d7c0 	.word	0x0001d7c0
    11c8:	0001d800 	.word	0x0001d800
    11cc:	0001d7f0 	.word	0x0001d7f0
    11d0:	20000a2c 	.word	0x20000a2c

000011d4 <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    11d4:	b580      	push	{r7, lr}
    11d6:	b082      	sub	sp, #8
    11d8:	af00      	add	r7, sp, #0
    11da:	6078      	str	r0, [r7, #4]
    return Q_GET_HASH(find_qstr(q));
    11dc:	6878      	ldr	r0, [r7, #4]
    11de:	f7ff fe65 	bl	eac <find_qstr>
    11e2:	4603      	mov	r3, r0
    11e4:	781b      	ldrb	r3, [r3, #0]
}
    11e6:	4618      	mov	r0, r3
    11e8:	3708      	adds	r7, #8
    11ea:	46bd      	mov	sp, r7
    11ec:	bd80      	pop	{r7, pc}
    11ee:	bf00      	nop

000011f0 <qstr_len>:

size_t qstr_len(qstr q) {
    11f0:	b580      	push	{r7, lr}
    11f2:	b084      	sub	sp, #16
    11f4:	af00      	add	r7, sp, #0
    11f6:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    11f8:	6878      	ldr	r0, [r7, #4]
    11fa:	f7ff fe57 	bl	eac <find_qstr>
    11fe:	60f8      	str	r0, [r7, #12]
    return Q_GET_LENGTH(qd);
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	3301      	adds	r3, #1
    1204:	781b      	ldrb	r3, [r3, #0]
}
    1206:	4618      	mov	r0, r3
    1208:	3710      	adds	r7, #16
    120a:	46bd      	mov	sp, r7
    120c:	bd80      	pop	{r7, pc}
    120e:	bf00      	nop

00001210 <qstr_str>:

const char *qstr_str(qstr q) {
    1210:	b580      	push	{r7, lr}
    1212:	b084      	sub	sp, #16
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    1218:	6878      	ldr	r0, [r7, #4]
    121a:	f7ff fe47 	bl	eac <find_qstr>
    121e:	60f8      	str	r0, [r7, #12]
    return (const char*)Q_GET_DATA(qd);
    1220:	68fb      	ldr	r3, [r7, #12]
    1222:	3302      	adds	r3, #2
}
    1224:	4618      	mov	r0, r3
    1226:	3710      	adds	r7, #16
    1228:	46bd      	mov	sp, r7
    122a:	bd80      	pop	{r7, pc}

0000122c <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    122c:	b580      	push	{r7, lr}
    122e:	b084      	sub	sp, #16
    1230:	af00      	add	r7, sp, #0
    1232:	6078      	str	r0, [r7, #4]
    1234:	6039      	str	r1, [r7, #0]
    const byte *qd = find_qstr(q);
    1236:	6878      	ldr	r0, [r7, #4]
    1238:	f7ff fe38 	bl	eac <find_qstr>
    123c:	60f8      	str	r0, [r7, #12]
    *len = Q_GET_LENGTH(qd);
    123e:	68fb      	ldr	r3, [r7, #12]
    1240:	3301      	adds	r3, #1
    1242:	781b      	ldrb	r3, [r3, #0]
    1244:	461a      	mov	r2, r3
    1246:	683b      	ldr	r3, [r7, #0]
    1248:	601a      	str	r2, [r3, #0]
    return Q_GET_DATA(qd);
    124a:	68fb      	ldr	r3, [r7, #12]
    124c:	3302      	adds	r3, #2
}
    124e:	4618      	mov	r0, r3
    1250:	3710      	adds	r7, #16
    1252:	46bd      	mov	sp, r7
    1254:	bd80      	pop	{r7, pc}
    1256:	bf00      	nop

00001258 <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    1258:	b580      	push	{r7, lr}
    125a:	b088      	sub	sp, #32
    125c:	af00      	add	r7, sp, #0
    125e:	60f8      	str	r0, [r7, #12]
    1260:	60b9      	str	r1, [r7, #8]
    1262:	607a      	str	r2, [r7, #4]
    1264:	603b      	str	r3, [r7, #0]
    QSTR_ENTER();
    *n_pool = 0;
    1266:	68fb      	ldr	r3, [r7, #12]
    1268:	2200      	movs	r2, #0
    126a:	601a      	str	r2, [r3, #0]
    *n_qstr = 0;
    126c:	68bb      	ldr	r3, [r7, #8]
    126e:	2200      	movs	r2, #0
    1270:	601a      	str	r2, [r3, #0]
    *n_str_data_bytes = 0;
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	2200      	movs	r2, #0
    1276:	601a      	str	r2, [r3, #0]
    *n_total_bytes = 0;
    1278:	683b      	ldr	r3, [r7, #0]
    127a:	2200      	movs	r2, #0
    127c:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    127e:	4b25      	ldr	r3, [pc, #148]	; (1314 <qstr_pool_info+0xbc>)
    1280:	691b      	ldr	r3, [r3, #16]
    1282:	61fb      	str	r3, [r7, #28]
    1284:	e034      	b.n	12f0 <qstr_pool_info+0x98>
        *n_pool += 1;
    1286:	68fb      	ldr	r3, [r7, #12]
    1288:	681b      	ldr	r3, [r3, #0]
    128a:	1c5a      	adds	r2, r3, #1
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	601a      	str	r2, [r3, #0]
        *n_qstr += pool->len;
    1290:	68bb      	ldr	r3, [r7, #8]
    1292:	681a      	ldr	r2, [r3, #0]
    1294:	69fb      	ldr	r3, [r7, #28]
    1296:	68db      	ldr	r3, [r3, #12]
    1298:	441a      	add	r2, r3
    129a:	68bb      	ldr	r3, [r7, #8]
    129c:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    129e:	69fb      	ldr	r3, [r7, #28]
    12a0:	3310      	adds	r3, #16
    12a2:	61bb      	str	r3, [r7, #24]
    12a4:	69fb      	ldr	r3, [r7, #28]
    12a6:	f103 0210 	add.w	r2, r3, #16
    12aa:	69fb      	ldr	r3, [r7, #28]
    12ac:	68db      	ldr	r3, [r3, #12]
    12ae:	009b      	lsls	r3, r3, #2
    12b0:	4413      	add	r3, r2
    12b2:	617b      	str	r3, [r7, #20]
    12b4:	e00c      	b.n	12d0 <qstr_pool_info+0x78>
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    12b6:	687b      	ldr	r3, [r7, #4]
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	69ba      	ldr	r2, [r7, #24]
    12bc:	6812      	ldr	r2, [r2, #0]
    12be:	3201      	adds	r2, #1
    12c0:	7812      	ldrb	r2, [r2, #0]
    12c2:	4413      	add	r3, r2
    12c4:	1cda      	adds	r2, r3, #3
    12c6:	687b      	ldr	r3, [r7, #4]
    12c8:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    12ca:	69bb      	ldr	r3, [r7, #24]
    12cc:	3304      	adds	r3, #4
    12ce:	61bb      	str	r3, [r7, #24]
    12d0:	69ba      	ldr	r2, [r7, #24]
    12d2:	697b      	ldr	r3, [r7, #20]
    12d4:	429a      	cmp	r2, r3
    12d6:	d3ee      	bcc.n	12b6 <qstr_pool_info+0x5e>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    12d8:	69f8      	ldr	r0, [r7, #28]
    12da:	f7ff fb99 	bl	a10 <gc_nbytes>
    12de:	4602      	mov	r2, r0
    12e0:	683b      	ldr	r3, [r7, #0]
    12e2:	681b      	ldr	r3, [r3, #0]
    12e4:	441a      	add	r2, r3
    12e6:	683b      	ldr	r3, [r7, #0]
    12e8:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    12ea:	69fb      	ldr	r3, [r7, #28]
    12ec:	681b      	ldr	r3, [r3, #0]
    12ee:	61fb      	str	r3, [r7, #28]
    12f0:	69fb      	ldr	r3, [r7, #28]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d003      	beq.n	12fe <qstr_pool_info+0xa6>
    12f6:	69fb      	ldr	r3, [r7, #28]
    12f8:	4a07      	ldr	r2, [pc, #28]	; (1318 <qstr_pool_info+0xc0>)
    12fa:	4293      	cmp	r3, r2
    12fc:	d1c3      	bne.n	1286 <qstr_pool_info+0x2e>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    12fe:	683b      	ldr	r3, [r7, #0]
    1300:	681a      	ldr	r2, [r3, #0]
    1302:	687b      	ldr	r3, [r7, #4]
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	441a      	add	r2, r3
    1308:	683b      	ldr	r3, [r7, #0]
    130a:	601a      	str	r2, [r3, #0]
    QSTR_EXIT();
}
    130c:	bf00      	nop
    130e:	3720      	adds	r7, #32
    1310:	46bd      	mov	sp, r7
    1312:	bd80      	pop	{r7, pc}
    1314:	20000a2c 	.word	0x20000a2c
    1318:	00022e70 	.word	0x00022e70

0000131c <vstr_init>:

// returned value is always at least 1 greater than argument
#define ROUND_ALLOC(a) (((a) & ((~0U) - 7)) + 8)

// Init the vstr so it allocs exactly given number of bytes.  Set length to zero.
void vstr_init(vstr_t *vstr, size_t alloc) {
    131c:	b580      	push	{r7, lr}
    131e:	b082      	sub	sp, #8
    1320:	af00      	add	r7, sp, #0
    1322:	6078      	str	r0, [r7, #4]
    1324:	6039      	str	r1, [r7, #0]
    if (alloc < 1) {
    1326:	683b      	ldr	r3, [r7, #0]
    1328:	2b00      	cmp	r3, #0
    132a:	d101      	bne.n	1330 <vstr_init+0x14>
        alloc = 1;
    132c:	2301      	movs	r3, #1
    132e:	603b      	str	r3, [r7, #0]
    }
    vstr->alloc = alloc;
    1330:	687b      	ldr	r3, [r7, #4]
    1332:	683a      	ldr	r2, [r7, #0]
    1334:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    1336:	687b      	ldr	r3, [r7, #4]
    1338:	2200      	movs	r2, #0
    133a:	605a      	str	r2, [r3, #4]
    vstr->buf = m_new(char, vstr->alloc);
    133c:	687b      	ldr	r3, [r7, #4]
    133e:	681b      	ldr	r3, [r3, #0]
    1340:	4618      	mov	r0, r3
    1342:	f7fe ffeb 	bl	31c <m_malloc>
    1346:	4602      	mov	r2, r0
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = false;
    134c:	687a      	ldr	r2, [r7, #4]
    134e:	7b13      	ldrb	r3, [r2, #12]
    1350:	f36f 0300 	bfc	r3, #0, #1
    1354:	7313      	strb	r3, [r2, #12]
}
    1356:	bf00      	nop
    1358:	3708      	adds	r7, #8
    135a:	46bd      	mov	sp, r7
    135c:	bd80      	pop	{r7, pc}
    135e:	bf00      	nop

00001360 <vstr_init_len>:

// Init the vstr so it allocs exactly enough ram to hold a null-terminated
// string of the given length, and set the length.
void vstr_init_len(vstr_t *vstr, size_t len) {
    1360:	b580      	push	{r7, lr}
    1362:	b082      	sub	sp, #8
    1364:	af00      	add	r7, sp, #0
    1366:	6078      	str	r0, [r7, #4]
    1368:	6039      	str	r1, [r7, #0]
    vstr_init(vstr, len + 1);
    136a:	683b      	ldr	r3, [r7, #0]
    136c:	3301      	adds	r3, #1
    136e:	4619      	mov	r1, r3
    1370:	6878      	ldr	r0, [r7, #4]
    1372:	f7ff ffd3 	bl	131c <vstr_init>
    vstr->len = len;
    1376:	687b      	ldr	r3, [r7, #4]
    1378:	683a      	ldr	r2, [r7, #0]
    137a:	605a      	str	r2, [r3, #4]
}
    137c:	bf00      	nop
    137e:	3708      	adds	r7, #8
    1380:	46bd      	mov	sp, r7
    1382:	bd80      	pop	{r7, pc}

00001384 <vstr_init_fixed_buf>:

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    1384:	b480      	push	{r7}
    1386:	b085      	sub	sp, #20
    1388:	af00      	add	r7, sp, #0
    138a:	60f8      	str	r0, [r7, #12]
    138c:	60b9      	str	r1, [r7, #8]
    138e:	607a      	str	r2, [r7, #4]
    vstr->alloc = alloc;
    1390:	68fb      	ldr	r3, [r7, #12]
    1392:	68ba      	ldr	r2, [r7, #8]
    1394:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	2200      	movs	r2, #0
    139a:	605a      	str	r2, [r3, #4]
    vstr->buf = buf;
    139c:	68fb      	ldr	r3, [r7, #12]
    139e:	687a      	ldr	r2, [r7, #4]
    13a0:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = true;
    13a2:	68fa      	ldr	r2, [r7, #12]
    13a4:	7b13      	ldrb	r3, [r2, #12]
    13a6:	f043 0301 	orr.w	r3, r3, #1
    13aa:	7313      	strb	r3, [r2, #12]
}
    13ac:	bf00      	nop
    13ae:	3714      	adds	r7, #20
    13b0:	46bd      	mov	sp, r7
    13b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    13b6:	4770      	bx	lr

000013b8 <vstr_init_print>:

void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    13b8:	b580      	push	{r7, lr}
    13ba:	b084      	sub	sp, #16
    13bc:	af00      	add	r7, sp, #0
    13be:	60f8      	str	r0, [r7, #12]
    13c0:	60b9      	str	r1, [r7, #8]
    13c2:	607a      	str	r2, [r7, #4]
    vstr_init(vstr, alloc);
    13c4:	68b9      	ldr	r1, [r7, #8]
    13c6:	68f8      	ldr	r0, [r7, #12]
    13c8:	f7ff ffa8 	bl	131c <vstr_init>
    print->data = vstr;
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	68fa      	ldr	r2, [r7, #12]
    13d0:	601a      	str	r2, [r3, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	4a02      	ldr	r2, [pc, #8]	; (13e0 <vstr_init_print+0x28>)
    13d6:	605a      	str	r2, [r3, #4]
}
    13d8:	bf00      	nop
    13da:	3710      	adds	r7, #16
    13dc:	46bd      	mov	sp, r7
    13de:	bd80      	pop	{r7, pc}
    13e0:	00001631 	.word	0x00001631

000013e4 <vstr_clear>:

void vstr_clear(vstr_t *vstr) {
    13e4:	b580      	push	{r7, lr}
    13e6:	b082      	sub	sp, #8
    13e8:	af00      	add	r7, sp, #0
    13ea:	6078      	str	r0, [r7, #4]
    if (!vstr->fixed_buf) {
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	7b1b      	ldrb	r3, [r3, #12]
    13f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
    13f4:	b2db      	uxtb	r3, r3
    13f6:	f083 0301 	eor.w	r3, r3, #1
    13fa:	b2db      	uxtb	r3, r3
    13fc:	2b00      	cmp	r3, #0
    13fe:	d004      	beq.n	140a <vstr_clear+0x26>
        m_del(char, vstr->buf, vstr->alloc);
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	689b      	ldr	r3, [r3, #8]
    1404:	4618      	mov	r0, r3
    1406:	f7fe ffeb 	bl	3e0 <m_free>
    }
    vstr->buf = NULL;
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	2200      	movs	r2, #0
    140e:	609a      	str	r2, [r3, #8]
}
    1410:	bf00      	nop
    1412:	3708      	adds	r7, #8
    1414:	46bd      	mov	sp, r7
    1416:	bd80      	pop	{r7, pc}

00001418 <vstr_new>:

vstr_t *vstr_new(size_t alloc) {
    1418:	b580      	push	{r7, lr}
    141a:	b084      	sub	sp, #16
    141c:	af00      	add	r7, sp, #0
    141e:	6078      	str	r0, [r7, #4]
    vstr_t *vstr = m_new_obj(vstr_t);
    1420:	2010      	movs	r0, #16
    1422:	f7fe ff7b 	bl	31c <m_malloc>
    1426:	60f8      	str	r0, [r7, #12]
    vstr_init(vstr, alloc);
    1428:	6879      	ldr	r1, [r7, #4]
    142a:	68f8      	ldr	r0, [r7, #12]
    142c:	f7ff ff76 	bl	131c <vstr_init>
    return vstr;
    1430:	68fb      	ldr	r3, [r7, #12]
}
    1432:	4618      	mov	r0, r3
    1434:	3710      	adds	r7, #16
    1436:	46bd      	mov	sp, r7
    1438:	bd80      	pop	{r7, pc}
    143a:	bf00      	nop

0000143c <vstr_free>:

void vstr_free(vstr_t *vstr) {
    143c:	b580      	push	{r7, lr}
    143e:	b082      	sub	sp, #8
    1440:	af00      	add	r7, sp, #0
    1442:	6078      	str	r0, [r7, #4]
    if (vstr != NULL) {
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	2b00      	cmp	r3, #0
    1448:	d011      	beq.n	146e <vstr_free+0x32>
        if (!vstr->fixed_buf) {
    144a:	687b      	ldr	r3, [r7, #4]
    144c:	7b1b      	ldrb	r3, [r3, #12]
    144e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1452:	b2db      	uxtb	r3, r3
    1454:	f083 0301 	eor.w	r3, r3, #1
    1458:	b2db      	uxtb	r3, r3
    145a:	2b00      	cmp	r3, #0
    145c:	d004      	beq.n	1468 <vstr_free+0x2c>
            m_del(char, vstr->buf, vstr->alloc);
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	689b      	ldr	r3, [r3, #8]
    1462:	4618      	mov	r0, r3
    1464:	f7fe ffbc 	bl	3e0 <m_free>
        }
        m_del_obj(vstr_t, vstr);
    1468:	6878      	ldr	r0, [r7, #4]
    146a:	f7fe ffb9 	bl	3e0 <m_free>
    }
}
    146e:	bf00      	nop
    1470:	3708      	adds	r7, #8
    1472:	46bd      	mov	sp, r7
    1474:	bd80      	pop	{r7, pc}
    1476:	bf00      	nop

00001478 <vstr_extend>:

// Extend vstr strictly by requested size, return pointer to newly added chunk.
char *vstr_extend(vstr_t *vstr, size_t size) {
    1478:	b580      	push	{r7, lr}
    147a:	b084      	sub	sp, #16
    147c:	af00      	add	r7, sp, #0
    147e:	6078      	str	r0, [r7, #4]
    1480:	6039      	str	r1, [r7, #0]
    if (vstr->fixed_buf) {
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	7b1b      	ldrb	r3, [r3, #12]
    1486:	f3c3 0300 	ubfx	r3, r3, #0, #1
    148a:	b2db      	uxtb	r3, r3
    148c:	2b00      	cmp	r3, #0
    148e:	d003      	beq.n	1498 <vstr_extend+0x20>
        // We can't reallocate, and the caller is expecting the space to
        // be there, so the only safe option is to raise an exception.
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    1490:	2100      	movs	r1, #0
    1492:	4810      	ldr	r0, [pc, #64]	; (14d4 <vstr_extend+0x5c>)
    1494:	f00b fd5e 	bl	cf54 <mp_raise_msg>
    }
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	6898      	ldr	r0, [r3, #8]
    149c:	687b      	ldr	r3, [r7, #4]
    149e:	681a      	ldr	r2, [r3, #0]
    14a0:	683b      	ldr	r3, [r7, #0]
    14a2:	4413      	add	r3, r2
    14a4:	4619      	mov	r1, r3
    14a6:	f7fe ff6d 	bl	384 <m_realloc>
    14aa:	60f8      	str	r0, [r7, #12]
    char *p = new_buf + vstr->alloc;
    14ac:	687b      	ldr	r3, [r7, #4]
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	68fa      	ldr	r2, [r7, #12]
    14b2:	4413      	add	r3, r2
    14b4:	60bb      	str	r3, [r7, #8]
    vstr->alloc += size;
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	681a      	ldr	r2, [r3, #0]
    14ba:	683b      	ldr	r3, [r7, #0]
    14bc:	441a      	add	r2, r3
    14be:	687b      	ldr	r3, [r7, #4]
    14c0:	601a      	str	r2, [r3, #0]
    vstr->buf = new_buf;
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	68fa      	ldr	r2, [r7, #12]
    14c6:	609a      	str	r2, [r3, #8]
    return p;
    14c8:	68bb      	ldr	r3, [r7, #8]
}
    14ca:	4618      	mov	r0, r3
    14cc:	3710      	adds	r7, #16
    14ce:	46bd      	mov	sp, r7
    14d0:	bd80      	pop	{r7, pc}
    14d2:	bf00      	nop
    14d4:	00020658 	.word	0x00020658

000014d8 <vstr_ensure_extra>:

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    14d8:	b580      	push	{r7, lr}
    14da:	b084      	sub	sp, #16
    14dc:	af00      	add	r7, sp, #0
    14de:	6078      	str	r0, [r7, #4]
    14e0:	6039      	str	r1, [r7, #0]
    if (vstr->len + size > vstr->alloc) {
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	685a      	ldr	r2, [r3, #4]
    14e6:	683b      	ldr	r3, [r7, #0]
    14e8:	441a      	add	r2, r3
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	681b      	ldr	r3, [r3, #0]
    14ee:	429a      	cmp	r2, r3
    14f0:	d920      	bls.n	1534 <vstr_ensure_extra+0x5c>
        if (vstr->fixed_buf) {
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	7b1b      	ldrb	r3, [r3, #12]
    14f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
    14fa:	b2db      	uxtb	r3, r3
    14fc:	2b00      	cmp	r3, #0
    14fe:	d003      	beq.n	1508 <vstr_ensure_extra+0x30>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    1500:	2100      	movs	r1, #0
    1502:	480e      	ldr	r0, [pc, #56]	; (153c <vstr_ensure_extra+0x64>)
    1504:	f00b fd26 	bl	cf54 <mp_raise_msg>
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	685a      	ldr	r2, [r3, #4]
    150c:	683b      	ldr	r3, [r7, #0]
    150e:	4413      	add	r3, r2
    1510:	3310      	adds	r3, #16
    1512:	f023 0307 	bic.w	r3, r3, #7
    1516:	3308      	adds	r3, #8
    1518:	60fb      	str	r3, [r7, #12]
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    151a:	687b      	ldr	r3, [r7, #4]
    151c:	689b      	ldr	r3, [r3, #8]
    151e:	68f9      	ldr	r1, [r7, #12]
    1520:	4618      	mov	r0, r3
    1522:	f7fe ff2f 	bl	384 <m_realloc>
    1526:	60b8      	str	r0, [r7, #8]
        vstr->alloc = new_alloc;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	68fa      	ldr	r2, [r7, #12]
    152c:	601a      	str	r2, [r3, #0]
        vstr->buf = new_buf;
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	68ba      	ldr	r2, [r7, #8]
    1532:	609a      	str	r2, [r3, #8]
    }
}
    1534:	bf00      	nop
    1536:	3710      	adds	r7, #16
    1538:	46bd      	mov	sp, r7
    153a:	bd80      	pop	{r7, pc}
    153c:	00020658 	.word	0x00020658

00001540 <vstr_hint_size>:

void vstr_hint_size(vstr_t *vstr, size_t size) {
    1540:	b580      	push	{r7, lr}
    1542:	b082      	sub	sp, #8
    1544:	af00      	add	r7, sp, #0
    1546:	6078      	str	r0, [r7, #4]
    1548:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, size);
    154a:	6839      	ldr	r1, [r7, #0]
    154c:	6878      	ldr	r0, [r7, #4]
    154e:	f7ff ffc3 	bl	14d8 <vstr_ensure_extra>
}
    1552:	bf00      	nop
    1554:	3708      	adds	r7, #8
    1556:	46bd      	mov	sp, r7
    1558:	bd80      	pop	{r7, pc}
    155a:	bf00      	nop

0000155c <vstr_add_len>:

char *vstr_add_len(vstr_t *vstr, size_t len) {
    155c:	b580      	push	{r7, lr}
    155e:	b084      	sub	sp, #16
    1560:	af00      	add	r7, sp, #0
    1562:	6078      	str	r0, [r7, #4]
    1564:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, len);
    1566:	6839      	ldr	r1, [r7, #0]
    1568:	6878      	ldr	r0, [r7, #4]
    156a:	f7ff ffb5 	bl	14d8 <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	689a      	ldr	r2, [r3, #8]
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	685b      	ldr	r3, [r3, #4]
    1576:	4413      	add	r3, r2
    1578:	60fb      	str	r3, [r7, #12]
    vstr->len += len;
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	685a      	ldr	r2, [r3, #4]
    157e:	683b      	ldr	r3, [r7, #0]
    1580:	441a      	add	r2, r3
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	605a      	str	r2, [r3, #4]
    return buf;
    1586:	68fb      	ldr	r3, [r7, #12]
}
    1588:	4618      	mov	r0, r3
    158a:	3710      	adds	r7, #16
    158c:	46bd      	mov	sp, r7
    158e:	bd80      	pop	{r7, pc}

00001590 <vstr_null_terminated_str>:

// Doesn't increase len, just makes sure there is a null byte at the end
char *vstr_null_terminated_str(vstr_t *vstr) {
    1590:	b580      	push	{r7, lr}
    1592:	b082      	sub	sp, #8
    1594:	af00      	add	r7, sp, #0
    1596:	6078      	str	r0, [r7, #4]
    // If there's no more room, add single byte
    if (vstr->alloc == vstr->len) {
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	681a      	ldr	r2, [r3, #0]
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	685b      	ldr	r3, [r3, #4]
    15a0:	429a      	cmp	r2, r3
    15a2:	d103      	bne.n	15ac <vstr_null_terminated_str+0x1c>
        vstr_extend(vstr, 1);
    15a4:	2101      	movs	r1, #1
    15a6:	6878      	ldr	r0, [r7, #4]
    15a8:	f7ff ff66 	bl	1478 <vstr_extend>
    }
    vstr->buf[vstr->len] = '\0';
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	689a      	ldr	r2, [r3, #8]
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	685b      	ldr	r3, [r3, #4]
    15b4:	4413      	add	r3, r2
    15b6:	2200      	movs	r2, #0
    15b8:	701a      	strb	r2, [r3, #0]
    return vstr->buf;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	689b      	ldr	r3, [r3, #8]
}
    15be:	4618      	mov	r0, r3
    15c0:	3708      	adds	r7, #8
    15c2:	46bd      	mov	sp, r7
    15c4:	bd80      	pop	{r7, pc}
    15c6:	bf00      	nop

000015c8 <vstr_add_byte>:

void vstr_add_byte(vstr_t *vstr, byte b) {
    15c8:	b580      	push	{r7, lr}
    15ca:	b084      	sub	sp, #16
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
    15d0:	460b      	mov	r3, r1
    15d2:	70fb      	strb	r3, [r7, #3]
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    15d4:	2101      	movs	r1, #1
    15d6:	6878      	ldr	r0, [r7, #4]
    15d8:	f7ff ffc0 	bl	155c <vstr_add_len>
    15dc:	60f8      	str	r0, [r7, #12]
    buf[0] = b;
    15de:	68fb      	ldr	r3, [r7, #12]
    15e0:	78fa      	ldrb	r2, [r7, #3]
    15e2:	701a      	strb	r2, [r3, #0]
}
    15e4:	bf00      	nop
    15e6:	3710      	adds	r7, #16
    15e8:	46bd      	mov	sp, r7
    15ea:	bd80      	pop	{r7, pc}

000015ec <vstr_add_char>:

void vstr_add_char(vstr_t *vstr, unichar c) {
    15ec:	b580      	push	{r7, lr}
    15ee:	b082      	sub	sp, #8
    15f0:	af00      	add	r7, sp, #0
    15f2:	6078      	str	r0, [r7, #4]
    15f4:	6039      	str	r1, [r7, #0]
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
#else
    vstr_add_byte(vstr, c);
    15f6:	683b      	ldr	r3, [r7, #0]
    15f8:	b2db      	uxtb	r3, r3
    15fa:	4619      	mov	r1, r3
    15fc:	6878      	ldr	r0, [r7, #4]
    15fe:	f7ff ffe3 	bl	15c8 <vstr_add_byte>
#endif
}
    1602:	bf00      	nop
    1604:	3708      	adds	r7, #8
    1606:	46bd      	mov	sp, r7
    1608:	bd80      	pop	{r7, pc}
    160a:	bf00      	nop

0000160c <vstr_add_str>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    160c:	b580      	push	{r7, lr}
    160e:	b082      	sub	sp, #8
    1610:	af00      	add	r7, sp, #0
    1612:	6078      	str	r0, [r7, #4]
    1614:	6039      	str	r1, [r7, #0]
    vstr_add_strn(vstr, str, strlen(str));
    1616:	6838      	ldr	r0, [r7, #0]
    1618:	f01a fcb6 	bl	1bf88 <strlen>
    161c:	4603      	mov	r3, r0
    161e:	461a      	mov	r2, r3
    1620:	6839      	ldr	r1, [r7, #0]
    1622:	6878      	ldr	r0, [r7, #4]
    1624:	f000 f804 	bl	1630 <vstr_add_strn>
}
    1628:	bf00      	nop
    162a:	3708      	adds	r7, #8
    162c:	46bd      	mov	sp, r7
    162e:	bd80      	pop	{r7, pc}

00001630 <vstr_add_strn>:

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    1630:	b580      	push	{r7, lr}
    1632:	b084      	sub	sp, #16
    1634:	af00      	add	r7, sp, #0
    1636:	60f8      	str	r0, [r7, #12]
    1638:	60b9      	str	r1, [r7, #8]
    163a:	607a      	str	r2, [r7, #4]
    vstr_ensure_extra(vstr, len);
    163c:	6879      	ldr	r1, [r7, #4]
    163e:	68f8      	ldr	r0, [r7, #12]
    1640:	f7ff ff4a 	bl	14d8 <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    1644:	68fb      	ldr	r3, [r7, #12]
    1646:	689a      	ldr	r2, [r3, #8]
    1648:	68fb      	ldr	r3, [r7, #12]
    164a:	685b      	ldr	r3, [r3, #4]
    164c:	4413      	add	r3, r2
    164e:	687a      	ldr	r2, [r7, #4]
    1650:	68b9      	ldr	r1, [r7, #8]
    1652:	4618      	mov	r0, r3
    1654:	f01a fbc4 	bl	1bde0 <memmove>
    vstr->len += len;
    1658:	68fb      	ldr	r3, [r7, #12]
    165a:	685a      	ldr	r2, [r3, #4]
    165c:	687b      	ldr	r3, [r7, #4]
    165e:	441a      	add	r2, r3
    1660:	68fb      	ldr	r3, [r7, #12]
    1662:	605a      	str	r2, [r3, #4]
}
    1664:	bf00      	nop
    1666:	3710      	adds	r7, #16
    1668:	46bd      	mov	sp, r7
    166a:	bd80      	pop	{r7, pc}

0000166c <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    166c:	b580      	push	{r7, lr}
    166e:	b086      	sub	sp, #24
    1670:	af00      	add	r7, sp, #0
    1672:	60f8      	str	r0, [r7, #12]
    1674:	60b9      	str	r1, [r7, #8]
    1676:	607a      	str	r2, [r7, #4]
    size_t l = vstr->len;
    1678:	68fb      	ldr	r3, [r7, #12]
    167a:	685b      	ldr	r3, [r3, #4]
    167c:	617b      	str	r3, [r7, #20]
    if (byte_pos > l) {
    167e:	68ba      	ldr	r2, [r7, #8]
    1680:	697b      	ldr	r3, [r7, #20]
    1682:	429a      	cmp	r2, r3
    1684:	d901      	bls.n	168a <vstr_ins_blank_bytes+0x1e>
        byte_pos = l;
    1686:	697b      	ldr	r3, [r7, #20]
    1688:	60bb      	str	r3, [r7, #8]
    }
    if (byte_len > 0) {
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	2b00      	cmp	r3, #0
    168e:	d019      	beq.n	16c4 <vstr_ins_blank_bytes+0x58>
        // ensure room for the new bytes
        vstr_ensure_extra(vstr, byte_len);
    1690:	6879      	ldr	r1, [r7, #4]
    1692:	68f8      	ldr	r0, [r7, #12]
    1694:	f7ff ff20 	bl	14d8 <vstr_ensure_extra>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    1698:	68fb      	ldr	r3, [r7, #12]
    169a:	689a      	ldr	r2, [r3, #8]
    169c:	68b9      	ldr	r1, [r7, #8]
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	440b      	add	r3, r1
    16a2:	18d0      	adds	r0, r2, r3
    16a4:	68fb      	ldr	r3, [r7, #12]
    16a6:	689a      	ldr	r2, [r3, #8]
    16a8:	68bb      	ldr	r3, [r7, #8]
    16aa:	18d1      	adds	r1, r2, r3
    16ac:	697a      	ldr	r2, [r7, #20]
    16ae:	68bb      	ldr	r3, [r7, #8]
    16b0:	1ad3      	subs	r3, r2, r3
    16b2:	461a      	mov	r2, r3
    16b4:	f01a fb94 	bl	1bde0 <memmove>
        // increase the length
        vstr->len += byte_len;
    16b8:	68fb      	ldr	r3, [r7, #12]
    16ba:	685a      	ldr	r2, [r3, #4]
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	441a      	add	r2, r3
    16c0:	68fb      	ldr	r3, [r7, #12]
    16c2:	605a      	str	r2, [r3, #4]
    }
    return vstr->buf + byte_pos;
    16c4:	68fb      	ldr	r3, [r7, #12]
    16c6:	689a      	ldr	r2, [r3, #8]
    16c8:	68bb      	ldr	r3, [r7, #8]
    16ca:	4413      	add	r3, r2
}
    16cc:	4618      	mov	r0, r3
    16ce:	3718      	adds	r7, #24
    16d0:	46bd      	mov	sp, r7
    16d2:	bd80      	pop	{r7, pc}

000016d4 <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    16d4:	b580      	push	{r7, lr}
    16d6:	b086      	sub	sp, #24
    16d8:	af00      	add	r7, sp, #0
    16da:	60f8      	str	r0, [r7, #12]
    16dc:	60b9      	str	r1, [r7, #8]
    16de:	4613      	mov	r3, r2
    16e0:	71fb      	strb	r3, [r7, #7]
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    16e2:	2201      	movs	r2, #1
    16e4:	68b9      	ldr	r1, [r7, #8]
    16e6:	68f8      	ldr	r0, [r7, #12]
    16e8:	f7ff ffc0 	bl	166c <vstr_ins_blank_bytes>
    16ec:	6178      	str	r0, [r7, #20]
    *s = b;
    16ee:	697b      	ldr	r3, [r7, #20]
    16f0:	79fa      	ldrb	r2, [r7, #7]
    16f2:	701a      	strb	r2, [r3, #0]
}
    16f4:	bf00      	nop
    16f6:	3718      	adds	r7, #24
    16f8:	46bd      	mov	sp, r7
    16fa:	bd80      	pop	{r7, pc}

000016fc <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    16fc:	b580      	push	{r7, lr}
    16fe:	b086      	sub	sp, #24
    1700:	af00      	add	r7, sp, #0
    1702:	60f8      	str	r0, [r7, #12]
    1704:	60b9      	str	r1, [r7, #8]
    1706:	607a      	str	r2, [r7, #4]
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    1708:	2201      	movs	r2, #1
    170a:	68b9      	ldr	r1, [r7, #8]
    170c:	68f8      	ldr	r0, [r7, #12]
    170e:	f7ff ffad 	bl	166c <vstr_ins_blank_bytes>
    1712:	6178      	str	r0, [r7, #20]
    *s = chr;
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	b2da      	uxtb	r2, r3
    1718:	697b      	ldr	r3, [r7, #20]
    171a:	701a      	strb	r2, [r3, #0]
}
    171c:	bf00      	nop
    171e:	3718      	adds	r7, #24
    1720:	46bd      	mov	sp, r7
    1722:	bd80      	pop	{r7, pc}

00001724 <vstr_cut_head_bytes>:

void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    1724:	b580      	push	{r7, lr}
    1726:	b082      	sub	sp, #8
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
    172c:	6039      	str	r1, [r7, #0]
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
    172e:	683a      	ldr	r2, [r7, #0]
    1730:	2100      	movs	r1, #0
    1732:	6878      	ldr	r0, [r7, #4]
    1734:	f000 f81e 	bl	1774 <vstr_cut_out_bytes>
}
    1738:	bf00      	nop
    173a:	3708      	adds	r7, #8
    173c:	46bd      	mov	sp, r7
    173e:	bd80      	pop	{r7, pc}

00001740 <vstr_cut_tail_bytes>:

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    1740:	b480      	push	{r7}
    1742:	b083      	sub	sp, #12
    1744:	af00      	add	r7, sp, #0
    1746:	6078      	str	r0, [r7, #4]
    1748:	6039      	str	r1, [r7, #0]
    if (len > vstr->len) {
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	685a      	ldr	r2, [r3, #4]
    174e:	683b      	ldr	r3, [r7, #0]
    1750:	429a      	cmp	r2, r3
    1752:	d203      	bcs.n	175c <vstr_cut_tail_bytes+0x1c>
        vstr->len = 0;
    1754:	687b      	ldr	r3, [r7, #4]
    1756:	2200      	movs	r2, #0
    1758:	605a      	str	r2, [r3, #4]
    } else {
        vstr->len -= len;
    }
}
    175a:	e005      	b.n	1768 <vstr_cut_tail_bytes+0x28>
        vstr->len -= len;
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	685a      	ldr	r2, [r3, #4]
    1760:	683b      	ldr	r3, [r7, #0]
    1762:	1ad2      	subs	r2, r2, r3
    1764:	687b      	ldr	r3, [r7, #4]
    1766:	605a      	str	r2, [r3, #4]
}
    1768:	bf00      	nop
    176a:	370c      	adds	r7, #12
    176c:	46bd      	mov	sp, r7
    176e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1772:	4770      	bx	lr

00001774 <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    1774:	b580      	push	{r7, lr}
    1776:	b084      	sub	sp, #16
    1778:	af00      	add	r7, sp, #0
    177a:	60f8      	str	r0, [r7, #12]
    177c:	60b9      	str	r1, [r7, #8]
    177e:	607a      	str	r2, [r7, #4]
    if (byte_pos >= vstr->len) {
    1780:	68fb      	ldr	r3, [r7, #12]
    1782:	685a      	ldr	r2, [r3, #4]
    1784:	68bb      	ldr	r3, [r7, #8]
    1786:	429a      	cmp	r2, r3
    1788:	d924      	bls.n	17d4 <vstr_cut_out_bytes+0x60>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    178a:	68ba      	ldr	r2, [r7, #8]
    178c:	687b      	ldr	r3, [r7, #4]
    178e:	441a      	add	r2, r3
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	685b      	ldr	r3, [r3, #4]
    1794:	429a      	cmp	r2, r3
    1796:	d303      	bcc.n	17a0 <vstr_cut_out_bytes+0x2c>
        vstr->len = byte_pos;
    1798:	68fb      	ldr	r3, [r7, #12]
    179a:	68ba      	ldr	r2, [r7, #8]
    179c:	605a      	str	r2, [r3, #4]
    179e:	e01a      	b.n	17d6 <vstr_cut_out_bytes+0x62>
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    17a0:	68fb      	ldr	r3, [r7, #12]
    17a2:	689a      	ldr	r2, [r3, #8]
    17a4:	68bb      	ldr	r3, [r7, #8]
    17a6:	18d0      	adds	r0, r2, r3
    17a8:	68fb      	ldr	r3, [r7, #12]
    17aa:	689a      	ldr	r2, [r3, #8]
    17ac:	68b9      	ldr	r1, [r7, #8]
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	440b      	add	r3, r1
    17b2:	18d1      	adds	r1, r2, r3
    17b4:	68fb      	ldr	r3, [r7, #12]
    17b6:	685a      	ldr	r2, [r3, #4]
    17b8:	68bb      	ldr	r3, [r7, #8]
    17ba:	1ad2      	subs	r2, r2, r3
    17bc:	687b      	ldr	r3, [r7, #4]
    17be:	1ad3      	subs	r3, r2, r3
    17c0:	461a      	mov	r2, r3
    17c2:	f01a fb0d 	bl	1bde0 <memmove>
        vstr->len -= bytes_to_cut;
    17c6:	68fb      	ldr	r3, [r7, #12]
    17c8:	685a      	ldr	r2, [r3, #4]
    17ca:	687b      	ldr	r3, [r7, #4]
    17cc:	1ad2      	subs	r2, r2, r3
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	605a      	str	r2, [r3, #4]
    17d2:	e000      	b.n	17d6 <vstr_cut_out_bytes+0x62>
        return;
    17d4:	bf00      	nop
    }
}
    17d6:	3710      	adds	r7, #16
    17d8:	46bd      	mov	sp, r7
    17da:	bd80      	pop	{r7, pc}

000017dc <vstr_printf>:

void vstr_printf(vstr_t *vstr, const char *fmt, ...) {
    17dc:	b40e      	push	{r1, r2, r3}
    17de:	b580      	push	{r7, lr}
    17e0:	b085      	sub	sp, #20
    17e2:	af00      	add	r7, sp, #0
    17e4:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    17e6:	f107 0320 	add.w	r3, r7, #32
    17ea:	60fb      	str	r3, [r7, #12]
    vstr_vprintf(vstr, fmt, ap);
    17ec:	68fa      	ldr	r2, [r7, #12]
    17ee:	69f9      	ldr	r1, [r7, #28]
    17f0:	6878      	ldr	r0, [r7, #4]
    17f2:	f000 f807 	bl	1804 <vstr_vprintf>
    va_end(ap);
}
    17f6:	bf00      	nop
    17f8:	3714      	adds	r7, #20
    17fa:	46bd      	mov	sp, r7
    17fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1800:	b003      	add	sp, #12
    1802:	4770      	bx	lr

00001804 <vstr_vprintf>:

void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap) {
    1804:	b580      	push	{r7, lr}
    1806:	b086      	sub	sp, #24
    1808:	af00      	add	r7, sp, #0
    180a:	60f8      	str	r0, [r7, #12]
    180c:	60b9      	str	r1, [r7, #8]
    180e:	607a      	str	r2, [r7, #4]
    mp_print_t print = {vstr, (mp_print_strn_t)vstr_add_strn};
    1810:	68fb      	ldr	r3, [r7, #12]
    1812:	613b      	str	r3, [r7, #16]
    1814:	4b06      	ldr	r3, [pc, #24]	; (1830 <vstr_vprintf+0x2c>)
    1816:	617b      	str	r3, [r7, #20]
    mp_vprintf(&print, fmt, ap);
    1818:	f107 0310 	add.w	r3, r7, #16
    181c:	687a      	ldr	r2, [r7, #4]
    181e:	68b9      	ldr	r1, [r7, #8]
    1820:	4618      	mov	r0, r3
    1822:	f000 fb63 	bl	1eec <mp_vprintf>
}
    1826:	bf00      	nop
    1828:	3718      	adds	r7, #24
    182a:	46bd      	mov	sp, r7
    182c:	bd80      	pop	{r7, pc}
    182e:	bf00      	nop
    1830:	00001631 	.word	0x00001631

00001834 <MP_OBJ_IS_SMALL_INT>:
// unpack small ints, qstrs and full object pointers.

#if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A

static inline bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }
    1834:	b480      	push	{r7}
    1836:	b083      	sub	sp, #12
    1838:	af00      	add	r7, sp, #0
    183a:	6078      	str	r0, [r7, #4]
    183c:	687b      	ldr	r3, [r7, #4]
    183e:	f003 0301 	and.w	r3, r3, #1
    1842:	2b00      	cmp	r3, #0
    1844:	bf14      	ite	ne
    1846:	2301      	movne	r3, #1
    1848:	2300      	moveq	r3, #0
    184a:	b2db      	uxtb	r3, r3
    184c:	4618      	mov	r0, r3
    184e:	370c      	adds	r7, #12
    1850:	46bd      	mov	sp, r7
    1852:	f85d 7b04 	ldr.w	r7, [sp], #4
    1856:	4770      	bx	lr

00001858 <MP_OBJ_IS_OBJ>:
mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);
#endif

static inline bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
    1858:	b480      	push	{r7}
    185a:	b083      	sub	sp, #12
    185c:	af00      	add	r7, sp, #0
    185e:	6078      	str	r0, [r7, #4]
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	f003 0303 	and.w	r3, r3, #3
    1866:	2b00      	cmp	r3, #0
    1868:	bf0c      	ite	eq
    186a:	2301      	moveq	r3, #1
    186c:	2300      	movne	r3, #0
    186e:	b2db      	uxtb	r3, r3
    1870:	4618      	mov	r0, r3
    1872:	370c      	adds	r7, #12
    1874:	46bd      	mov	sp, r7
    1876:	f85d 7b04 	ldr.w	r7, [sp], #4
    187a:	4770      	bx	lr

0000187c <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    187c:	b580      	push	{r7, lr}
    187e:	b084      	sub	sp, #16
    1880:	af00      	add	r7, sp, #0
    1882:	60f8      	str	r0, [r7, #12]
    1884:	60b9      	str	r1, [r7, #8]
    1886:	607a      	str	r2, [r7, #4]
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    1888:	6879      	ldr	r1, [r7, #4]
    188a:	68b8      	ldr	r0, [r7, #8]
    188c:	f019 ff8c 	bl	1b7a8 <mp_hal_stdout_tx_strn_cooked>
}
    1890:	bf00      	nop
    1892:	3710      	adds	r7, #16
    1894:	46bd      	mov	sp, r7
    1896:	bd80      	pop	{r7, pc}

00001898 <mp_print_str>:

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    1898:	b580      	push	{r7, lr}
    189a:	b084      	sub	sp, #16
    189c:	af00      	add	r7, sp, #0
    189e:	6078      	str	r0, [r7, #4]
    18a0:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
    18a2:	6838      	ldr	r0, [r7, #0]
    18a4:	f01a fb70 	bl	1bf88 <strlen>
    18a8:	60f8      	str	r0, [r7, #12]
    if (len) {
    18aa:	68fb      	ldr	r3, [r7, #12]
    18ac:	2b00      	cmp	r3, #0
    18ae:	d006      	beq.n	18be <mp_print_str+0x26>
        print->print_strn(print->data, str, len);
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	685b      	ldr	r3, [r3, #4]
    18b4:	687a      	ldr	r2, [r7, #4]
    18b6:	6810      	ldr	r0, [r2, #0]
    18b8:	68fa      	ldr	r2, [r7, #12]
    18ba:	6839      	ldr	r1, [r7, #0]
    18bc:	4798      	blx	r3
    }
    return len;
    18be:	68fb      	ldr	r3, [r7, #12]
}
    18c0:	4618      	mov	r0, r3
    18c2:	3710      	adds	r7, #16
    18c4:	46bd      	mov	sp, r7
    18c6:	bd80      	pop	{r7, pc}

000018c8 <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    18c8:	b580      	push	{r7, lr}
    18ca:	b08c      	sub	sp, #48	; 0x30
    18cc:	af00      	add	r7, sp, #0
    18ce:	60f8      	str	r0, [r7, #12]
    18d0:	60b9      	str	r1, [r7, #8]
    18d2:	607a      	str	r2, [r7, #4]
    18d4:	603b      	str	r3, [r7, #0]
    int left_pad = 0;
    18d6:	2300      	movs	r3, #0
    18d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int right_pad = 0;
    18da:	2300      	movs	r3, #0
    18dc:	62bb      	str	r3, [r7, #40]	; 0x28
    int pad = width - len;
    18de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	1ad3      	subs	r3, r2, r3
    18e4:	613b      	str	r3, [r7, #16]
    int pad_size;
    int total_chars_printed = 0;
    18e6:	2300      	movs	r3, #0
    18e8:	623b      	str	r3, [r7, #32]
    const char *pad_chars;

    if (!fill || fill == ' ') {
    18ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18ee:	2b00      	cmp	r3, #0
    18f0:	d003      	beq.n	18fa <mp_print_strn+0x32>
    18f2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18f6:	2b20      	cmp	r3, #32
    18f8:	d104      	bne.n	1904 <mp_print_strn+0x3c>
        pad_chars = pad_spaces;
    18fa:	4b3d      	ldr	r3, [pc, #244]	; (19f0 <mp_print_strn+0x128>)
    18fc:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_spaces) - 1;
    18fe:	2310      	movs	r3, #16
    1900:	627b      	str	r3, [r7, #36]	; 0x24
    1902:	e00d      	b.n	1920 <mp_print_strn+0x58>
    } else if (fill == '0') {
    1904:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1908:	2b30      	cmp	r3, #48	; 0x30
    190a:	d104      	bne.n	1916 <mp_print_strn+0x4e>
        pad_chars = pad_zeroes;
    190c:	4b39      	ldr	r3, [pc, #228]	; (19f4 <mp_print_strn+0x12c>)
    190e:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_zeroes) - 1;
    1910:	2310      	movs	r3, #16
    1912:	627b      	str	r3, [r7, #36]	; 0x24
    1914:	e004      	b.n	1920 <mp_print_strn+0x58>
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    1916:	f107 0338 	add.w	r3, r7, #56	; 0x38
    191a:	61fb      	str	r3, [r7, #28]
        pad_size = 1;
    191c:	2301      	movs	r3, #1
    191e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1926:	2b00      	cmp	r3, #0
    1928:	d009      	beq.n	193e <mp_print_strn+0x76>
        left_pad = pad / 2;
    192a:	693b      	ldr	r3, [r7, #16]
    192c:	0fda      	lsrs	r2, r3, #31
    192e:	4413      	add	r3, r2
    1930:	105b      	asrs	r3, r3, #1
    1932:	62fb      	str	r3, [r7, #44]	; 0x2c
        right_pad = pad - left_pad;
    1934:	693a      	ldr	r2, [r7, #16]
    1936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1938:	1ad3      	subs	r3, r2, r3
    193a:	62bb      	str	r3, [r7, #40]	; 0x28
    193c:	e009      	b.n	1952 <mp_print_strn+0x8a>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    193e:	683b      	ldr	r3, [r7, #0]
    1940:	f003 0301 	and.w	r3, r3, #1
    1944:	2b00      	cmp	r3, #0
    1946:	d002      	beq.n	194e <mp_print_strn+0x86>
        right_pad = pad;
    1948:	693b      	ldr	r3, [r7, #16]
    194a:	62bb      	str	r3, [r7, #40]	; 0x28
    194c:	e001      	b.n	1952 <mp_print_strn+0x8a>
    } else {
        left_pad = pad;
    194e:	693b      	ldr	r3, [r7, #16]
    1950:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (left_pad > 0) {
    1952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1954:	2b00      	cmp	r3, #0
    1956:	dd1a      	ble.n	198e <mp_print_strn+0xc6>
        total_chars_printed += left_pad;
    1958:	6a3a      	ldr	r2, [r7, #32]
    195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    195c:	4413      	add	r3, r2
    195e:	623b      	str	r3, [r7, #32]
        while (left_pad > 0) {
    1960:	e012      	b.n	1988 <mp_print_strn+0xc0>
            int p = left_pad;
    1962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1964:	61bb      	str	r3, [r7, #24]
            if (p > pad_size) {
    1966:	69ba      	ldr	r2, [r7, #24]
    1968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    196a:	429a      	cmp	r2, r3
    196c:	dd01      	ble.n	1972 <mp_print_strn+0xaa>
                p = pad_size;
    196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1970:	61bb      	str	r3, [r7, #24]
            }
            print->print_strn(print->data, pad_chars, p);
    1972:	68fb      	ldr	r3, [r7, #12]
    1974:	685b      	ldr	r3, [r3, #4]
    1976:	68fa      	ldr	r2, [r7, #12]
    1978:	6810      	ldr	r0, [r2, #0]
    197a:	69ba      	ldr	r2, [r7, #24]
    197c:	69f9      	ldr	r1, [r7, #28]
    197e:	4798      	blx	r3
            left_pad -= p;
    1980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1982:	69bb      	ldr	r3, [r7, #24]
    1984:	1ad3      	subs	r3, r2, r3
    1986:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (left_pad > 0) {
    1988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    198a:	2b00      	cmp	r3, #0
    198c:	dce9      	bgt.n	1962 <mp_print_strn+0x9a>
        }
    }
    if (len) {
    198e:	687b      	ldr	r3, [r7, #4]
    1990:	2b00      	cmp	r3, #0
    1992:	d00a      	beq.n	19aa <mp_print_strn+0xe2>
        print->print_strn(print->data, str, len);
    1994:	68fb      	ldr	r3, [r7, #12]
    1996:	685b      	ldr	r3, [r3, #4]
    1998:	68fa      	ldr	r2, [r7, #12]
    199a:	6810      	ldr	r0, [r2, #0]
    199c:	687a      	ldr	r2, [r7, #4]
    199e:	68b9      	ldr	r1, [r7, #8]
    19a0:	4798      	blx	r3
        total_chars_printed += len;
    19a2:	6a3a      	ldr	r2, [r7, #32]
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	4413      	add	r3, r2
    19a8:	623b      	str	r3, [r7, #32]
    }
    if (right_pad > 0) {
    19aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19ac:	2b00      	cmp	r3, #0
    19ae:	dd1a      	ble.n	19e6 <mp_print_strn+0x11e>
        total_chars_printed += right_pad;
    19b0:	6a3a      	ldr	r2, [r7, #32]
    19b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19b4:	4413      	add	r3, r2
    19b6:	623b      	str	r3, [r7, #32]
        while (right_pad > 0) {
    19b8:	e012      	b.n	19e0 <mp_print_strn+0x118>
            int p = right_pad;
    19ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19bc:	617b      	str	r3, [r7, #20]
            if (p > pad_size) {
    19be:	697a      	ldr	r2, [r7, #20]
    19c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19c2:	429a      	cmp	r2, r3
    19c4:	dd01      	ble.n	19ca <mp_print_strn+0x102>
                p = pad_size;
    19c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19c8:	617b      	str	r3, [r7, #20]
            }
            print->print_strn(print->data, pad_chars, p);
    19ca:	68fb      	ldr	r3, [r7, #12]
    19cc:	685b      	ldr	r3, [r3, #4]
    19ce:	68fa      	ldr	r2, [r7, #12]
    19d0:	6810      	ldr	r0, [r2, #0]
    19d2:	697a      	ldr	r2, [r7, #20]
    19d4:	69f9      	ldr	r1, [r7, #28]
    19d6:	4798      	blx	r3
            right_pad -= p;
    19d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    19da:	697b      	ldr	r3, [r7, #20]
    19dc:	1ad3      	subs	r3, r2, r3
    19de:	62bb      	str	r3, [r7, #40]	; 0x28
        while (right_pad > 0) {
    19e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19e2:	2b00      	cmp	r3, #0
    19e4:	dce9      	bgt.n	19ba <mp_print_strn+0xf2>
        }
    }
    return total_chars_printed;
    19e6:	6a3b      	ldr	r3, [r7, #32]
}
    19e8:	4618      	mov	r0, r3
    19ea:	3730      	adds	r7, #48	; 0x30
    19ec:	46bd      	mov	sp, r7
    19ee:	bd80      	pop	{r7, pc}
    19f0:	0001d810 	.word	0x0001d810
    19f4:	0001d824 	.word	0x0001d824

000019f8 <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    19f8:	b580      	push	{r7, lr}
    19fa:	b08e      	sub	sp, #56	; 0x38
    19fc:	af02      	add	r7, sp, #8
    19fe:	60f8      	str	r0, [r7, #12]
    1a00:	60b9      	str	r1, [r7, #8]
    1a02:	607a      	str	r2, [r7, #4]
    1a04:	603b      	str	r3, [r7, #0]
    char sign = 0;
    1a06:	2300      	movs	r3, #0
    1a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (sgn) {
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d01a      	beq.n	1a48 <mp_print_int+0x50>
        if ((mp_int_t)x < 0) {
    1a12:	68bb      	ldr	r3, [r7, #8]
    1a14:	2b00      	cmp	r3, #0
    1a16:	da06      	bge.n	1a26 <mp_print_int+0x2e>
            sign = '-';
    1a18:	232d      	movs	r3, #45	; 0x2d
    1a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            x = -x;
    1a1e:	68bb      	ldr	r3, [r7, #8]
    1a20:	425b      	negs	r3, r3
    1a22:	60bb      	str	r3, [r7, #8]
    1a24:	e010      	b.n	1a48 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    1a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a28:	f003 0302 	and.w	r3, r3, #2
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d003      	beq.n	1a38 <mp_print_int+0x40>
            sign = '+';
    1a30:	232b      	movs	r3, #43	; 0x2b
    1a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1a36:	e007      	b.n	1a48 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a3a:	f003 0304 	and.w	r3, r3, #4
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d002      	beq.n	1a48 <mp_print_int+0x50>
            sign = ' ';
    1a42:	2320      	movs	r3, #32
    1a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
    }

    char buf[INT_BUF_SIZE];
    char *b = buf + INT_BUF_SIZE;
    1a48:	f107 0310 	add.w	r3, r7, #16
    1a4c:	3310      	adds	r3, #16
    1a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (x == 0) {
    1a50:	68bb      	ldr	r3, [r7, #8]
    1a52:	2b00      	cmp	r3, #0
    1a54:	d106      	bne.n	1a64 <mp_print_int+0x6c>
        *(--b) = '0';
    1a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a58:	3b01      	subs	r3, #1
    1a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a5e:	2230      	movs	r2, #48	; 0x30
    1a60:	701a      	strb	r2, [r3, #0]
    1a62:	e027      	b.n	1ab4 <mp_print_int+0xbc>
    } else {
        do {
            int c = x % base;
    1a64:	683a      	ldr	r2, [r7, #0]
    1a66:	68bb      	ldr	r3, [r7, #8]
    1a68:	fbb3 f1f2 	udiv	r1, r3, r2
    1a6c:	fb02 f201 	mul.w	r2, r2, r1
    1a70:	1a9b      	subs	r3, r3, r2
    1a72:	62bb      	str	r3, [r7, #40]	; 0x28
            x /= base;
    1a74:	683b      	ldr	r3, [r7, #0]
    1a76:	68ba      	ldr	r2, [r7, #8]
    1a78:	fbb2 f3f3 	udiv	r3, r2, r3
    1a7c:	60bb      	str	r3, [r7, #8]
            if (c >= 10) {
    1a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a80:	2b09      	cmp	r3, #9
    1a82:	dd05      	ble.n	1a90 <mp_print_int+0x98>
                c += base_char - 10;
    1a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a86:	3b0a      	subs	r3, #10
    1a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a8a:	4413      	add	r3, r2
    1a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    1a8e:	e002      	b.n	1a96 <mp_print_int+0x9e>
            } else {
                c += '0';
    1a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a92:	3330      	adds	r3, #48	; 0x30
    1a94:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            *(--b) = c;
    1a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a98:	3b01      	subs	r3, #1
    1a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a9e:	b2da      	uxtb	r2, r3
    1aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1aa2:	701a      	strb	r2, [r3, #0]
        } while (b > buf && x != 0);
    1aa4:	f107 0310 	add.w	r3, r7, #16
    1aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1aaa:	429a      	cmp	r2, r3
    1aac:	d902      	bls.n	1ab4 <mp_print_int+0xbc>
    1aae:	68bb      	ldr	r3, [r7, #8]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d1d7      	bne.n	1a64 <mp_print_int+0x6c>
            prefix_char = base_char + 'x' - 'a';
        }
    }
    #endif

    int len = 0;
    1ab4:	2300      	movs	r3, #0
    1ab6:	627b      	str	r3, [r7, #36]	; 0x24
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d017      	beq.n	1af2 <mp_print_int+0xfa>
        if (sign) {
    1ac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d023      	beq.n	1b12 <mp_print_int+0x11a>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1aca:	f107 0123 	add.w	r1, r7, #35	; 0x23
    1ace:	2301      	movs	r3, #1
    1ad0:	9301      	str	r3, [sp, #4]
    1ad2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1ad6:	9300      	str	r3, [sp, #0]
    1ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ada:	2201      	movs	r2, #1
    1adc:	68f8      	ldr	r0, [r7, #12]
    1ade:	f7ff fef3 	bl	18c8 <mp_print_strn>
    1ae2:	4602      	mov	r2, r0
    1ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ae6:	4413      	add	r3, r2
    1ae8:	627b      	str	r3, [r7, #36]	; 0x24
            width--;
    1aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1aec:	3b01      	subs	r3, #1
    1aee:	647b      	str	r3, [r7, #68]	; 0x44
    1af0:	e00f      	b.n	1b12 <mp_print_int+0x11a>
        if (prefix_char && b > &buf[1]) {
            *(--b) = prefix_char;
            *(--b) = '0';
        }
        #endif
        if (sign && b > buf) {
    1af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1af6:	2b00      	cmp	r3, #0
    1af8:	d00b      	beq.n	1b12 <mp_print_int+0x11a>
    1afa:	f107 0310 	add.w	r3, r7, #16
    1afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1b00:	429a      	cmp	r2, r3
    1b02:	d906      	bls.n	1b12 <mp_print_int+0x11a>
            *(--b) = sign;
    1b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b06:	3b01      	subs	r3, #1
    1b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    1b0a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b10:	701a      	strb	r2, [r3, #0]
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1b12:	f107 0310 	add.w	r3, r7, #16
    1b16:	3310      	adds	r3, #16
    1b18:	461a      	mov	r2, r3
    1b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b1c:	1ad3      	subs	r3, r2, r3
    1b1e:	461a      	mov	r2, r3
    1b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1b22:	9301      	str	r3, [sp, #4]
    1b24:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1b28:	9300      	str	r3, [sp, #0]
    1b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1b2e:	68f8      	ldr	r0, [r7, #12]
    1b30:	f7ff feca 	bl	18c8 <mp_print_strn>
    1b34:	4602      	mov	r2, r0
    1b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b38:	4413      	add	r3, r2
    1b3a:	627b      	str	r3, [r7, #36]	; 0x24
    return len;
    1b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1b3e:	4618      	mov	r0, r3
    1b40:	3730      	adds	r7, #48	; 0x30
    1b42:	46bd      	mov	sp, r7
    1b44:	bd80      	pop	{r7, pc}
    1b46:	bf00      	nop

00001b48 <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1b48:	b590      	push	{r4, r7, lr}
    1b4a:	b09b      	sub	sp, #108	; 0x6c
    1b4c:	af04      	add	r7, sp, #16
    1b4e:	60f8      	str	r0, [r7, #12]
    1b50:	60b9      	str	r1, [r7, #8]
    1b52:	607a      	str	r2, [r7, #4]
    1b54:	603b      	str	r3, [r7, #0]
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1b56:	687b      	ldr	r3, [r7, #4]
    1b58:	2b02      	cmp	r3, #2
    1b5a:	d00e      	beq.n	1b7a <mp_print_mp_int+0x32>
    1b5c:	687b      	ldr	r3, [r7, #4]
    1b5e:	2b08      	cmp	r3, #8
    1b60:	d00b      	beq.n	1b7a <mp_print_mp_int+0x32>
    1b62:	687b      	ldr	r3, [r7, #4]
    1b64:	2b0a      	cmp	r3, #10
    1b66:	d008      	beq.n	1b7a <mp_print_mp_int+0x32>
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	2b10      	cmp	r3, #16
    1b6c:	d005      	beq.n	1b7a <mp_print_mp_int+0x32>
    1b6e:	4b8f      	ldr	r3, [pc, #572]	; (1dac <mp_print_mp_int+0x264>)
    1b70:	4a8f      	ldr	r2, [pc, #572]	; (1db0 <mp_print_mp_int+0x268>)
    1b72:	21d0      	movs	r1, #208	; 0xd0
    1b74:	488f      	ldr	r0, [pc, #572]	; (1db4 <mp_print_mp_int+0x26c>)
    1b76:	f019 fc11 	bl	1b39c <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1b7a:	68b8      	ldr	r0, [r7, #8]
    1b7c:	f7ff fe5a 	bl	1834 <MP_OBJ_IS_SMALL_INT>
    1b80:	4603      	mov	r3, r0
    1b82:	f083 0301 	eor.w	r3, r3, #1
    1b86:	b2db      	uxtb	r3, r3
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d015      	beq.n	1bb8 <mp_print_mp_int+0x70>
    1b8c:	68b8      	ldr	r0, [r7, #8]
    1b8e:	f7ff fe63 	bl	1858 <MP_OBJ_IS_OBJ>
    1b92:	4603      	mov	r3, r0
    1b94:	f083 0301 	eor.w	r3, r3, #1
    1b98:	b2db      	uxtb	r3, r3
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d104      	bne.n	1ba8 <mp_print_mp_int+0x60>
    1b9e:	68bb      	ldr	r3, [r7, #8]
    1ba0:	681b      	ldr	r3, [r3, #0]
    1ba2:	4a85      	ldr	r2, [pc, #532]	; (1db8 <mp_print_mp_int+0x270>)
    1ba4:	4293      	cmp	r3, r2
    1ba6:	d007      	beq.n	1bb8 <mp_print_mp_int+0x70>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1ba8:	68b8      	ldr	r0, [r7, #8]
    1baa:	f00b ffed 	bl	db88 <mp_obj_get_int>
    1bae:	4603      	mov	r3, r0
    1bb0:	005b      	lsls	r3, r3, #1
    1bb2:	f043 0301 	orr.w	r3, r3, #1
    1bb6:	60bb      	str	r3, [r7, #8]
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bba:	f003 0381 	and.w	r3, r3, #129	; 0x81
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d10b      	bne.n	1bda <mp_print_mp_int+0x92>
    1bc2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1bc6:	2b30      	cmp	r3, #48	; 0x30
    1bc8:	d107      	bne.n	1bda <mp_print_mp_int+0x92>
        if (prec > width) {
    1bca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1bce:	429a      	cmp	r2, r3
    1bd0:	dd01      	ble.n	1bd6 <mp_print_mp_int+0x8e>
            width = prec;
    1bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1bd4:	673b      	str	r3, [r7, #112]	; 0x70
        }
        prec = 0;
    1bd6:	2300      	movs	r3, #0
    1bd8:	677b      	str	r3, [r7, #116]	; 0x74
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;
    1bda:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1bde:	657b      	str	r3, [r7, #84]	; 0x54

    if (mp_obj_int_sign(x) >= 0) {
    1be0:	68b8      	ldr	r0, [r7, #8]
    1be2:	f00e fe4d 	bl	10880 <mp_obj_int_sign>
    1be6:	4603      	mov	r3, r0
    1be8:	2b00      	cmp	r3, #0
    1bea:	db14      	blt.n	1c16 <mp_print_mp_int+0xce>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bee:	f003 0302 	and.w	r3, r3, #2
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d005      	beq.n	1c02 <mp_print_mp_int+0xba>
            *prefix++ = '+';
    1bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bf8:	1c5a      	adds	r2, r3, #1
    1bfa:	657a      	str	r2, [r7, #84]	; 0x54
    1bfc:	222b      	movs	r2, #43	; 0x2b
    1bfe:	701a      	strb	r2, [r3, #0]
    1c00:	e009      	b.n	1c16 <mp_print_mp_int+0xce>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1c02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c04:	f003 0304 	and.w	r3, r3, #4
    1c08:	2b00      	cmp	r3, #0
    1c0a:	d004      	beq.n	1c16 <mp_print_mp_int+0xce>
            *prefix++ = ' ';
    1c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c0e:	1c5a      	adds	r2, r3, #1
    1c10:	657a      	str	r2, [r7, #84]	; 0x54
    1c12:	2220      	movs	r2, #32
    1c14:	701a      	strb	r2, [r3, #0]
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c18:	f003 0310 	and.w	r3, r3, #16
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d036      	beq.n	1c8e <mp_print_mp_int+0x146>
        if (base == 2) {
    1c20:	687b      	ldr	r3, [r7, #4]
    1c22:	2b02      	cmp	r3, #2
    1c24:	d10d      	bne.n	1c42 <mp_print_mp_int+0xfa>
            *prefix++ = '0';
    1c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c28:	1c5a      	adds	r2, r3, #1
    1c2a:	657a      	str	r2, [r7, #84]	; 0x54
    1c2c:	2230      	movs	r2, #48	; 0x30
    1c2e:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'b' - 'a';
    1c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c32:	1c5a      	adds	r2, r3, #1
    1c34:	657a      	str	r2, [r7, #84]	; 0x54
    1c36:	683a      	ldr	r2, [r7, #0]
    1c38:	b2d2      	uxtb	r2, r2
    1c3a:	3201      	adds	r2, #1
    1c3c:	b2d2      	uxtb	r2, r2
    1c3e:	701a      	strb	r2, [r3, #0]
    1c40:	e025      	b.n	1c8e <mp_print_mp_int+0x146>
        } else if (base == 8) {
    1c42:	687b      	ldr	r3, [r7, #4]
    1c44:	2b08      	cmp	r3, #8
    1c46:	d112      	bne.n	1c6e <mp_print_mp_int+0x126>
            *prefix++ = '0';
    1c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c4a:	1c5a      	adds	r2, r3, #1
    1c4c:	657a      	str	r2, [r7, #84]	; 0x54
    1c4e:	2230      	movs	r2, #48	; 0x30
    1c50:	701a      	strb	r2, [r3, #0]
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d018      	beq.n	1c8e <mp_print_mp_int+0x146>
                *prefix++ = base_char + 'o' - 'a';
    1c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c5e:	1c5a      	adds	r2, r3, #1
    1c60:	657a      	str	r2, [r7, #84]	; 0x54
    1c62:	683a      	ldr	r2, [r7, #0]
    1c64:	b2d2      	uxtb	r2, r2
    1c66:	320e      	adds	r2, #14
    1c68:	b2d2      	uxtb	r2, r2
    1c6a:	701a      	strb	r2, [r3, #0]
    1c6c:	e00f      	b.n	1c8e <mp_print_mp_int+0x146>
            }
        } else if (base == 16) {
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	2b10      	cmp	r3, #16
    1c72:	d10c      	bne.n	1c8e <mp_print_mp_int+0x146>
            *prefix++ = '0';
    1c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c76:	1c5a      	adds	r2, r3, #1
    1c78:	657a      	str	r2, [r7, #84]	; 0x54
    1c7a:	2230      	movs	r2, #48	; 0x30
    1c7c:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'x' - 'a';
    1c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c80:	1c5a      	adds	r2, r3, #1
    1c82:	657a      	str	r2, [r7, #84]	; 0x54
    1c84:	683a      	ldr	r2, [r7, #0]
    1c86:	b2d2      	uxtb	r2, r2
    1c88:	3217      	adds	r2, #23
    1c8a:	b2d2      	uxtb	r2, r2
    1c8c:	701a      	strb	r2, [r3, #0]
        }
    }
    *prefix = '\0';
    1c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c90:	2200      	movs	r2, #0
    1c92:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1c94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1c96:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c9a:	1ad3      	subs	r3, r2, r3
    1c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    prefix = prefix_buf;
    1c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1ca2:	657b      	str	r3, [r7, #84]	; 0x54

    char comma = '\0';
    1ca4:	2300      	movs	r3, #0
    1ca6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (flags & PF_FLAG_SHOW_COMMA) {
    1caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1cac:	f003 0320 	and.w	r3, r3, #32
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d002      	beq.n	1cba <mp_print_mp_int+0x172>
        comma = ',';
    1cb4:	232c      	movs	r3, #44	; 0x2c
    1cb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }

    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(mp_int_t) * 4];
    char *buf = stack_buf;
    1cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1cbe:	623b      	str	r3, [r7, #32]
    size_t buf_size = sizeof(stack_buf);
    1cc0:	2310      	movs	r3, #16
    1cc2:	61fb      	str	r3, [r7, #28]
    size_t fmt_size = 0;
    1cc4:	2300      	movs	r3, #0
    1cc6:	61bb      	str	r3, [r7, #24]
    char *str;

    if (prec > 1) {
    1cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1cca:	2b01      	cmp	r3, #1
    1ccc:	dd03      	ble.n	1cd6 <mp_print_mp_int+0x18e>
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1cd4:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    char sign = '\0';
    1cd6:	2300      	movs	r3, #0
    1cd8:	75fb      	strb	r3, [r7, #23]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d021      	beq.n	1d28 <mp_print_mp_int+0x1e0>
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1ce4:	683b      	ldr	r3, [r7, #0]
    1ce6:	b2db      	uxtb	r3, r3
    1ce8:	f107 0418 	add.w	r4, r7, #24
    1cec:	f107 011c 	add.w	r1, r7, #28
    1cf0:	f107 0020 	add.w	r0, r7, #32
    1cf4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1cf8:	9203      	str	r2, [sp, #12]
    1cfa:	9302      	str	r3, [sp, #8]
    1cfc:	2300      	movs	r3, #0
    1cfe:	9301      	str	r3, [sp, #4]
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	9300      	str	r3, [sp, #0]
    1d04:	68bb      	ldr	r3, [r7, #8]
    1d06:	4622      	mov	r2, r4
    1d08:	f00e fcf6 	bl	106f8 <mp_obj_int_formatted>
    1d0c:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1d10:	781b      	ldrb	r3, [r3, #0]
    1d12:	2b2d      	cmp	r3, #45	; 0x2d
    1d14:	d11d      	bne.n	1d52 <mp_print_mp_int+0x20a>
            sign = *str++;
    1d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1d18:	1c5a      	adds	r2, r3, #1
    1d1a:	64fa      	str	r2, [r7, #76]	; 0x4c
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	75fb      	strb	r3, [r7, #23]
            fmt_size--;
    1d20:	69bb      	ldr	r3, [r7, #24]
    1d22:	3b01      	subs	r3, #1
    1d24:	61bb      	str	r3, [r7, #24]
    1d26:	e014      	b.n	1d52 <mp_print_mp_int+0x20a>
        }
    } else {
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1d28:	683b      	ldr	r3, [r7, #0]
    1d2a:	b2db      	uxtb	r3, r3
    1d2c:	f107 0418 	add.w	r4, r7, #24
    1d30:	f107 011c 	add.w	r1, r7, #28
    1d34:	f107 0020 	add.w	r0, r7, #32
    1d38:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1d3c:	9203      	str	r2, [sp, #12]
    1d3e:	9302      	str	r3, [sp, #8]
    1d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d42:	9301      	str	r3, [sp, #4]
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	9300      	str	r3, [sp, #0]
    1d48:	68bb      	ldr	r3, [r7, #8]
    1d4a:	4622      	mov	r2, r4
    1d4c:	f00e fcd4 	bl	106f8 <mp_obj_int_formatted>
    1d50:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, prefix, base_char, comma);
    }

    int spaces_before = 0;
    1d52:	2300      	movs	r3, #0
    1d54:	64bb      	str	r3, [r7, #72]	; 0x48
    int spaces_after = 0;
    1d56:	2300      	movs	r3, #0
    1d58:	647b      	str	r3, [r7, #68]	; 0x44

    if (prec > 1) {
    1d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d5c:	2b01      	cmp	r3, #1
    1d5e:	dd38      	ble.n	1dd2 <mp_print_mp_int+0x28a>
        // If prec was specified, then prec specifies the width to zero-pad the
        // the number to. This zero-padded number then gets left or right
        // aligned in width characters.

        int prec_width = fmt_size;  // The digits
    1d60:	69bb      	ldr	r3, [r7, #24]
    1d62:	643b      	str	r3, [r7, #64]	; 0x40
        if (prec_width < prec) {
    1d64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d68:	429a      	cmp	r2, r3
    1d6a:	da01      	bge.n	1d70 <mp_print_mp_int+0x228>
            prec_width = prec;
    1d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d6e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1d76:	2b00      	cmp	r3, #0
    1d78:	d009      	beq.n	1d8e <mp_print_mp_int+0x246>
            if (sign) {
    1d7a:	7dfb      	ldrb	r3, [r7, #23]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d002      	beq.n	1d86 <mp_print_mp_int+0x23e>
                prec_width++;
    1d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d82:	3301      	adds	r3, #1
    1d84:	643b      	str	r3, [r7, #64]	; 0x40
            }
            prec_width += prefix_len;
    1d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d8a:	4413      	add	r3, r2
    1d8c:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (prec_width < width) {
    1d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1d92:	429a      	cmp	r2, r3
    1d94:	da16      	bge.n	1dc4 <mp_print_mp_int+0x27c>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d98:	f003 0301 	and.w	r3, r3, #1
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d00d      	beq.n	1dbc <mp_print_mp_int+0x274>
                spaces_after = width - prec_width;
    1da0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1da4:	1ad3      	subs	r3, r2, r3
    1da6:	647b      	str	r3, [r7, #68]	; 0x44
    1da8:	e00c      	b.n	1dc4 <mp_print_mp_int+0x27c>
    1daa:	bf00      	nop
    1dac:	0001d840 	.word	0x0001d840
    1db0:	0001d8cc 	.word	0x0001d8cc
    1db4:	0001d874 	.word	0x0001d874
    1db8:	00020f3c 	.word	0x00020f3c
            } else {
                spaces_before = width - prec_width;
    1dbc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1dc0:	1ad3      	subs	r3, r2, r3
    1dc2:	64bb      	str	r3, [r7, #72]	; 0x48
            }
        }
        fill = '0';
    1dc4:	2330      	movs	r3, #48	; 0x30
    1dc6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dcc:	f023 0301 	bic.w	r3, r3, #1
    1dd0:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    int len = 0;
    1dd2:	2300      	movs	r3, #0
    1dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (spaces_before) {
    1dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d00d      	beq.n	1df8 <mp_print_mp_int+0x2b0>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1dde:	9301      	str	r3, [sp, #4]
    1de0:	2320      	movs	r3, #32
    1de2:	9300      	str	r3, [sp, #0]
    1de4:	2300      	movs	r3, #0
    1de6:	2200      	movs	r2, #0
    1de8:	4934      	ldr	r1, [pc, #208]	; (1ebc <mp_print_mp_int+0x374>)
    1dea:	68f8      	ldr	r0, [r7, #12]
    1dec:	f7ff fd6c 	bl	18c8 <mp_print_strn>
    1df0:	4602      	mov	r2, r0
    1df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1df4:	4413      	add	r3, r2
    1df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d029      	beq.n	1e56 <mp_print_mp_int+0x30e>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1e02:	7dfb      	ldrb	r3, [r7, #23]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d011      	beq.n	1e2c <mp_print_mp_int+0x2e4>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1e08:	f107 0117 	add.w	r1, r7, #23
    1e0c:	2301      	movs	r3, #1
    1e0e:	9301      	str	r3, [sp, #4]
    1e10:	2300      	movs	r3, #0
    1e12:	9300      	str	r3, [sp, #0]
    1e14:	2300      	movs	r3, #0
    1e16:	2201      	movs	r2, #1
    1e18:	68f8      	ldr	r0, [r7, #12]
    1e1a:	f7ff fd55 	bl	18c8 <mp_print_strn>
    1e1e:	4602      	mov	r2, r0
    1e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e22:	4413      	add	r3, r2
    1e24:	63fb      	str	r3, [r7, #60]	; 0x3c
            width--;
    1e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1e28:	3b01      	subs	r3, #1
    1e2a:	673b      	str	r3, [r7, #112]	; 0x70
        }
        if (prefix_len) {
    1e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d011      	beq.n	1e56 <mp_print_mp_int+0x30e>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1e34:	2301      	movs	r3, #1
    1e36:	9301      	str	r3, [sp, #4]
    1e38:	2300      	movs	r3, #0
    1e3a:	9300      	str	r3, [sp, #0]
    1e3c:	2300      	movs	r3, #0
    1e3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1e40:	68f8      	ldr	r0, [r7, #12]
    1e42:	f7ff fd41 	bl	18c8 <mp_print_strn>
    1e46:	4602      	mov	r2, r0
    1e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e4a:	4413      	add	r3, r2
    1e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
            width -= prefix_len;
    1e4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1e52:	1ad3      	subs	r3, r2, r3
    1e54:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }
    if (prec > 1) {
    1e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e58:	2b01      	cmp	r3, #1
    1e5a:	dd01      	ble.n	1e60 <mp_print_mp_int+0x318>
        width = prec;
    1e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e5e:	673b      	str	r3, [r7, #112]	; 0x70
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1e60:	69ba      	ldr	r2, [r7, #24]
    1e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1e64:	9301      	str	r3, [sp, #4]
    1e66:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1e6a:	9300      	str	r3, [sp, #0]
    1e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e6e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1e70:	68f8      	ldr	r0, [r7, #12]
    1e72:	f7ff fd29 	bl	18c8 <mp_print_strn>
    1e76:	4602      	mov	r2, r0
    1e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e7a:	4413      	add	r3, r2
    1e7c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (spaces_after) {
    1e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e80:	2b00      	cmp	r3, #0
    1e82:	d00d      	beq.n	1ea0 <mp_print_mp_int+0x358>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    1e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e86:	9301      	str	r3, [sp, #4]
    1e88:	2320      	movs	r3, #32
    1e8a:	9300      	str	r3, [sp, #0]
    1e8c:	2300      	movs	r3, #0
    1e8e:	2200      	movs	r2, #0
    1e90:	490a      	ldr	r1, [pc, #40]	; (1ebc <mp_print_mp_int+0x374>)
    1e92:	68f8      	ldr	r0, [r7, #12]
    1e94:	f7ff fd18 	bl	18c8 <mp_print_strn>
    1e98:	4602      	mov	r2, r0
    1e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e9c:	4413      	add	r3, r2
    1e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (buf != stack_buf) {
    1ea0:	6a3a      	ldr	r2, [r7, #32]
    1ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1ea6:	429a      	cmp	r2, r3
    1ea8:	d003      	beq.n	1eb2 <mp_print_mp_int+0x36a>
        m_del(char, buf, buf_size);
    1eaa:	6a3b      	ldr	r3, [r7, #32]
    1eac:	4618      	mov	r0, r3
    1eae:	f7fe fa97 	bl	3e0 <m_free>
    }
    return len;
    1eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1eb4:	4618      	mov	r0, r3
    1eb6:	375c      	adds	r7, #92	; 0x5c
    1eb8:	46bd      	mov	sp, r7
    1eba:	bd90      	pop	{r4, r7, pc}
    1ebc:	0001d888 	.word	0x0001d888

00001ec0 <mp_printf>:

    return chrs;
}
#endif

int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    1ec0:	b40e      	push	{r1, r2, r3}
    1ec2:	b580      	push	{r7, lr}
    1ec4:	b085      	sub	sp, #20
    1ec6:	af00      	add	r7, sp, #0
    1ec8:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    1eca:	f107 0320 	add.w	r3, r7, #32
    1ece:	60bb      	str	r3, [r7, #8]
    int ret = mp_vprintf(print, fmt, ap);
    1ed0:	68ba      	ldr	r2, [r7, #8]
    1ed2:	69f9      	ldr	r1, [r7, #28]
    1ed4:	6878      	ldr	r0, [r7, #4]
    1ed6:	f000 f809 	bl	1eec <mp_vprintf>
    1eda:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
    1edc:	68fb      	ldr	r3, [r7, #12]
}
    1ede:	4618      	mov	r0, r3
    1ee0:	3714      	adds	r7, #20
    1ee2:	46bd      	mov	sp, r7
    1ee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1ee8:	b003      	add	sp, #12
    1eea:	4770      	bx	lr

00001eec <mp_vprintf>:

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    1eec:	b580      	push	{r7, lr}
    1eee:	b096      	sub	sp, #88	; 0x58
    1ef0:	af04      	add	r7, sp, #16
    1ef2:	60f8      	str	r0, [r7, #12]
    1ef4:	60b9      	str	r1, [r7, #8]
    1ef6:	607a      	str	r2, [r7, #4]
    int chrs = 0;
    1ef8:	2300      	movs	r3, #0
    1efa:	647b      	str	r3, [r7, #68]	; 0x44
    for (;;) {
        {
            const char *f = fmt;
    1efc:	68bb      	ldr	r3, [r7, #8]
    1efe:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1f00:	e002      	b.n	1f08 <mp_vprintf+0x1c>
                ++f; // XXX UTF8 advance char
    1f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f04:	3301      	adds	r3, #1
    1f06:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f0a:	781b      	ldrb	r3, [r3, #0]
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d003      	beq.n	1f18 <mp_vprintf+0x2c>
    1f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f12:	781b      	ldrb	r3, [r3, #0]
    1f14:	2b25      	cmp	r3, #37	; 0x25
    1f16:	d1f4      	bne.n	1f02 <mp_vprintf+0x16>
            }
            if (f > fmt) {
    1f18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f1a:	68bb      	ldr	r3, [r7, #8]
    1f1c:	429a      	cmp	r2, r3
    1f1e:	d910      	bls.n	1f42 <mp_vprintf+0x56>
                print->print_strn(print->data, fmt, f - fmt);
    1f20:	68fb      	ldr	r3, [r7, #12]
    1f22:	685b      	ldr	r3, [r3, #4]
    1f24:	68fa      	ldr	r2, [r7, #12]
    1f26:	6810      	ldr	r0, [r2, #0]
    1f28:	6c39      	ldr	r1, [r7, #64]	; 0x40
    1f2a:	68ba      	ldr	r2, [r7, #8]
    1f2c:	1a8a      	subs	r2, r1, r2
    1f2e:	68b9      	ldr	r1, [r7, #8]
    1f30:	4798      	blx	r3
                chrs += f - fmt;
    1f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f34:	68bb      	ldr	r3, [r7, #8]
    1f36:	1ad3      	subs	r3, r2, r3
    1f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1f3a:	4413      	add	r3, r2
    1f3c:	647b      	str	r3, [r7, #68]	; 0x44
                fmt = f;
    1f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f40:	60bb      	str	r3, [r7, #8]
            }
        }

        if (*fmt == '\0') {
    1f42:	68bb      	ldr	r3, [r7, #8]
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	2b00      	cmp	r3, #0
    1f48:	f000 8214 	beq.w	2374 <mp_vprintf+0x488>
            break;
        }

        // move past % character
        ++fmt;
    1f4c:	68bb      	ldr	r3, [r7, #8]
    1f4e:	3301      	adds	r3, #1
    1f50:	60bb      	str	r3, [r7, #8]

        // parse flags, if they exist
        int flags = 0;
    1f52:	2300      	movs	r3, #0
    1f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        char fill = ' ';
    1f56:	2320      	movs	r3, #32
    1f58:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        while (*fmt != '\0') {
    1f5c:	e031      	b.n	1fc2 <mp_vprintf+0xd6>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    1f5e:	68bb      	ldr	r3, [r7, #8]
    1f60:	781b      	ldrb	r3, [r3, #0]
    1f62:	2b2d      	cmp	r3, #45	; 0x2d
    1f64:	d104      	bne.n	1f70 <mp_vprintf+0x84>
    1f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f68:	f043 0301 	orr.w	r3, r3, #1
    1f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f6e:	e025      	b.n	1fbc <mp_vprintf+0xd0>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    1f70:	68bb      	ldr	r3, [r7, #8]
    1f72:	781b      	ldrb	r3, [r3, #0]
    1f74:	2b2b      	cmp	r3, #43	; 0x2b
    1f76:	d104      	bne.n	1f82 <mp_vprintf+0x96>
    1f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f7a:	f043 0302 	orr.w	r3, r3, #2
    1f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f80:	e01c      	b.n	1fbc <mp_vprintf+0xd0>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    1f82:	68bb      	ldr	r3, [r7, #8]
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	2b20      	cmp	r3, #32
    1f88:	d104      	bne.n	1f94 <mp_vprintf+0xa8>
    1f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f8c:	f043 0304 	orr.w	r3, r3, #4
    1f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f92:	e013      	b.n	1fbc <mp_vprintf+0xd0>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    1f94:	68bb      	ldr	r3, [r7, #8]
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	2b21      	cmp	r3, #33	; 0x21
    1f9a:	d104      	bne.n	1fa6 <mp_vprintf+0xba>
    1f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f9e:	f043 0308 	orr.w	r3, r3, #8
    1fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    1fa4:	e00a      	b.n	1fbc <mp_vprintf+0xd0>
            else if (*fmt == '0') {
    1fa6:	68bb      	ldr	r3, [r7, #8]
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	2b30      	cmp	r3, #48	; 0x30
    1fac:	d10e      	bne.n	1fcc <mp_vprintf+0xe0>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    1fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
                fill = '0';
    1fb6:	2330      	movs	r3, #48	; 0x30
    1fb8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            } else break;
            ++fmt;
    1fbc:	68bb      	ldr	r3, [r7, #8]
    1fbe:	3301      	adds	r3, #1
    1fc0:	60bb      	str	r3, [r7, #8]
        while (*fmt != '\0') {
    1fc2:	68bb      	ldr	r3, [r7, #8]
    1fc4:	781b      	ldrb	r3, [r3, #0]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d1c9      	bne.n	1f5e <mp_vprintf+0x72>
    1fca:	e000      	b.n	1fce <mp_vprintf+0xe2>
            } else break;
    1fcc:	bf00      	nop
        }

        // parse width, if it exists
        int width = 0;
    1fce:	2300      	movs	r3, #0
    1fd0:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1fd2:	e00d      	b.n	1ff0 <mp_vprintf+0x104>
            width = width * 10 + *fmt - '0';
    1fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1fd6:	4613      	mov	r3, r2
    1fd8:	009b      	lsls	r3, r3, #2
    1fda:	4413      	add	r3, r2
    1fdc:	005b      	lsls	r3, r3, #1
    1fde:	461a      	mov	r2, r3
    1fe0:	68bb      	ldr	r3, [r7, #8]
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	4413      	add	r3, r2
    1fe6:	3b30      	subs	r3, #48	; 0x30
    1fe8:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1fea:	68bb      	ldr	r3, [r7, #8]
    1fec:	3301      	adds	r3, #1
    1fee:	60bb      	str	r3, [r7, #8]
    1ff0:	68bb      	ldr	r3, [r7, #8]
    1ff2:	781b      	ldrb	r3, [r3, #0]
    1ff4:	2b2f      	cmp	r3, #47	; 0x2f
    1ff6:	d903      	bls.n	2000 <mp_vprintf+0x114>
    1ff8:	68bb      	ldr	r3, [r7, #8]
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	2b39      	cmp	r3, #57	; 0x39
    1ffe:	d9e9      	bls.n	1fd4 <mp_vprintf+0xe8>
        }

        // parse precision, if it exists
        int prec = -1;
    2000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2004:	633b      	str	r3, [r7, #48]	; 0x30
        if (*fmt == '.') {
    2006:	68bb      	ldr	r3, [r7, #8]
    2008:	781b      	ldrb	r3, [r3, #0]
    200a:	2b2e      	cmp	r3, #46	; 0x2e
    200c:	d12d      	bne.n	206a <mp_vprintf+0x17e>
            ++fmt;
    200e:	68bb      	ldr	r3, [r7, #8]
    2010:	3301      	adds	r3, #1
    2012:	60bb      	str	r3, [r7, #8]
            if (*fmt == '*') {
    2014:	68bb      	ldr	r3, [r7, #8]
    2016:	781b      	ldrb	r3, [r3, #0]
    2018:	2b2a      	cmp	r3, #42	; 0x2a
    201a:	d108      	bne.n	202e <mp_vprintf+0x142>
                ++fmt;
    201c:	68bb      	ldr	r3, [r7, #8]
    201e:	3301      	adds	r3, #1
    2020:	60bb      	str	r3, [r7, #8]
                prec = va_arg(args, int);
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	1d1a      	adds	r2, r3, #4
    2026:	607a      	str	r2, [r7, #4]
    2028:	681b      	ldr	r3, [r3, #0]
    202a:	633b      	str	r3, [r7, #48]	; 0x30
    202c:	e018      	b.n	2060 <mp_vprintf+0x174>
            } else {
                prec = 0;
    202e:	2300      	movs	r3, #0
    2030:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    2032:	e00d      	b.n	2050 <mp_vprintf+0x164>
                    prec = prec * 10 + *fmt - '0';
    2034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2036:	4613      	mov	r3, r2
    2038:	009b      	lsls	r3, r3, #2
    203a:	4413      	add	r3, r2
    203c:	005b      	lsls	r3, r3, #1
    203e:	461a      	mov	r2, r3
    2040:	68bb      	ldr	r3, [r7, #8]
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	4413      	add	r3, r2
    2046:	3b30      	subs	r3, #48	; 0x30
    2048:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    204a:	68bb      	ldr	r3, [r7, #8]
    204c:	3301      	adds	r3, #1
    204e:	60bb      	str	r3, [r7, #8]
    2050:	68bb      	ldr	r3, [r7, #8]
    2052:	781b      	ldrb	r3, [r3, #0]
    2054:	2b2f      	cmp	r3, #47	; 0x2f
    2056:	d903      	bls.n	2060 <mp_vprintf+0x174>
    2058:	68bb      	ldr	r3, [r7, #8]
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	2b39      	cmp	r3, #57	; 0x39
    205e:	d9e9      	bls.n	2034 <mp_vprintf+0x148>
                }
            }
            if (prec < 0) {
    2060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2062:	2b00      	cmp	r3, #0
    2064:	da01      	bge.n	206a <mp_vprintf+0x17e>
                prec = 0;
    2066:	2300      	movs	r3, #0
    2068:	633b      	str	r3, [r7, #48]	; 0x30

        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
    206a:	2300      	movs	r3, #0
    206c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (*fmt == 'l') {
    2070:	68bb      	ldr	r3, [r7, #8]
    2072:	781b      	ldrb	r3, [r3, #0]
    2074:	2b6c      	cmp	r3, #108	; 0x6c
    2076:	d102      	bne.n	207e <mp_vprintf+0x192>
            ++fmt;
    2078:	68bb      	ldr	r3, [r7, #8]
    207a:	3301      	adds	r3, #1
    207c:	60bb      	str	r3, [r7, #8]
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    207e:	68bb      	ldr	r3, [r7, #8]
    2080:	781b      	ldrb	r3, [r3, #0]
    2082:	2b00      	cmp	r3, #0
    2084:	f000 8178 	beq.w	2378 <mp_vprintf+0x48c>
            break;
        }

        switch (*fmt) {
    2088:	68bb      	ldr	r3, [r7, #8]
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	3b50      	subs	r3, #80	; 0x50
    208e:	2b28      	cmp	r3, #40	; 0x28
    2090:	f200 8156 	bhi.w	2340 <mp_vprintf+0x454>
    2094:	a201      	add	r2, pc, #4	; (adr r2, 209c <mp_vprintf+0x1b0>)
    2096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    209a:	bf00      	nop
    209c:	00002313 	.word	0x00002313
    20a0:	00002341 	.word	0x00002341
    20a4:	00002341 	.word	0x00002341
    20a8:	00002341 	.word	0x00002341
    20ac:	00002341 	.word	0x00002341
    20b0:	00002341 	.word	0x00002341
    20b4:	00002341 	.word	0x00002341
    20b8:	00002341 	.word	0x00002341
    20bc:	000022c5 	.word	0x000022c5
    20c0:	00002341 	.word	0x00002341
    20c4:	00002341 	.word	0x00002341
    20c8:	00002341 	.word	0x00002341
    20cc:	00002341 	.word	0x00002341
    20d0:	00002341 	.word	0x00002341
    20d4:	00002341 	.word	0x00002341
    20d8:	00002341 	.word	0x00002341
    20dc:	00002341 	.word	0x00002341
    20e0:	00002341 	.word	0x00002341
    20e4:	00002141 	.word	0x00002141
    20e8:	0000218d 	.word	0x0000218d
    20ec:	00002295 	.word	0x00002295
    20f0:	00002341 	.word	0x00002341
    20f4:	00002341 	.word	0x00002341
    20f8:	00002341 	.word	0x00002341
    20fc:	00002341 	.word	0x00002341
    2100:	00002341 	.word	0x00002341
    2104:	00002341 	.word	0x00002341
    2108:	00002341 	.word	0x00002341
    210c:	00002341 	.word	0x00002341
    2110:	00002341 	.word	0x00002341
    2114:	00002341 	.word	0x00002341
    2118:	00002341 	.word	0x00002341
    211c:	00002313 	.word	0x00002313
    2120:	000021bd 	.word	0x000021bd
    2124:	00002341 	.word	0x00002341
    2128:	00002201 	.word	0x00002201
    212c:	00002341 	.word	0x00002341
    2130:	00002267 	.word	0x00002267
    2134:	00002341 	.word	0x00002341
    2138:	00002341 	.word	0x00002341
    213c:	000022c5 	.word	0x000022c5
            case 'b':
                if (va_arg(args, int)) {
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	1d1a      	adds	r2, r3, #4
    2144:	607a      	str	r2, [r7, #4]
    2146:	681b      	ldr	r3, [r3, #0]
    2148:	2b00      	cmp	r3, #0
    214a:	d00f      	beq.n	216c <mp_vprintf+0x280>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    214e:	9301      	str	r3, [sp, #4]
    2150:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2154:	9300      	str	r3, [sp, #0]
    2156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2158:	2204      	movs	r2, #4
    215a:	498a      	ldr	r1, [pc, #552]	; (2384 <mp_vprintf+0x498>)
    215c:	68f8      	ldr	r0, [r7, #12]
    215e:	f7ff fbb3 	bl	18c8 <mp_print_strn>
    2162:	4602      	mov	r2, r0
    2164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2166:	4413      	add	r3, r2
    2168:	647b      	str	r3, [r7, #68]	; 0x44
                } else {
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
                }
                break;
    216a:	e0ff      	b.n	236c <mp_vprintf+0x480>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    216e:	9301      	str	r3, [sp, #4]
    2170:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2174:	9300      	str	r3, [sp, #0]
    2176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2178:	2205      	movs	r2, #5
    217a:	4983      	ldr	r1, [pc, #524]	; (2388 <mp_vprintf+0x49c>)
    217c:	68f8      	ldr	r0, [r7, #12]
    217e:	f7ff fba3 	bl	18c8 <mp_print_strn>
    2182:	4602      	mov	r2, r0
    2184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2186:	4413      	add	r3, r2
    2188:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    218a:	e0ef      	b.n	236c <mp_vprintf+0x480>
            case 'c':
            {
                char str = va_arg(args, int);
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	1d1a      	adds	r2, r3, #4
    2190:	607a      	str	r2, [r7, #4]
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	b2db      	uxtb	r3, r3
    2196:	76bb      	strb	r3, [r7, #26]
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    2198:	f107 011a 	add.w	r1, r7, #26
    219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    219e:	9301      	str	r3, [sp, #4]
    21a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    21a4:	9300      	str	r3, [sp, #0]
    21a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21a8:	2201      	movs	r2, #1
    21aa:	68f8      	ldr	r0, [r7, #12]
    21ac:	f7ff fb8c 	bl	18c8 <mp_print_strn>
    21b0:	4602      	mov	r2, r0
    21b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21b4:	4413      	add	r3, r2
    21b6:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    21b8:	bf00      	nop
    21ba:	e0d7      	b.n	236c <mp_vprintf+0x480>
            }
            case 'q':
            {
                qstr qst = va_arg(args, qstr);
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	1d1a      	adds	r2, r3, #4
    21c0:	607a      	str	r2, [r7, #4]
    21c2:	681b      	ldr	r3, [r3, #0]
    21c4:	627b      	str	r3, [r7, #36]	; 0x24
                size_t len;
                const char *str = (const char*)qstr_data(qst, &len);
    21c6:	f107 0314 	add.w	r3, r7, #20
    21ca:	4619      	mov	r1, r3
    21cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    21ce:	f7ff f82d 	bl	122c <qstr_data>
    21d2:	6238      	str	r0, [r7, #32]
                if (prec < 0) {
    21d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21d6:	2b00      	cmp	r3, #0
    21d8:	da01      	bge.n	21de <mp_vprintf+0x2f2>
                    prec = len;
    21da:	697b      	ldr	r3, [r7, #20]
    21dc:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    21de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    21e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21e2:	9301      	str	r3, [sp, #4]
    21e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    21e8:	9300      	str	r3, [sp, #0]
    21ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21ec:	6a39      	ldr	r1, [r7, #32]
    21ee:	68f8      	ldr	r0, [r7, #12]
    21f0:	f7ff fb6a 	bl	18c8 <mp_print_strn>
    21f4:	4602      	mov	r2, r0
    21f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21f8:	4413      	add	r3, r2
    21fa:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    21fc:	bf00      	nop
    21fe:	e0b5      	b.n	236c <mp_vprintf+0x480>
            }
            case 's':
            {
                const char *str = va_arg(args, const char*);
    2200:	687b      	ldr	r3, [r7, #4]
    2202:	1d1a      	adds	r2, r3, #4
    2204:	607a      	str	r2, [r7, #4]
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	61fb      	str	r3, [r7, #28]
                #ifndef NDEBUG
                // With debugging enabled, catch printing of null string pointers
                if (prec != 0 && str == NULL) {
    220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    220c:	2b00      	cmp	r3, #0
    220e:	d012      	beq.n	2236 <mp_vprintf+0x34a>
    2210:	69fb      	ldr	r3, [r7, #28]
    2212:	2b00      	cmp	r3, #0
    2214:	d10f      	bne.n	2236 <mp_vprintf+0x34a>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    2216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2218:	9301      	str	r3, [sp, #4]
    221a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    221e:	9300      	str	r3, [sp, #0]
    2220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2222:	2206      	movs	r2, #6
    2224:	4959      	ldr	r1, [pc, #356]	; (238c <mp_vprintf+0x4a0>)
    2226:	68f8      	ldr	r0, [r7, #12]
    2228:	f7ff fb4e 	bl	18c8 <mp_print_strn>
    222c:	4602      	mov	r2, r0
    222e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2230:	4413      	add	r3, r2
    2232:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
    2234:	e09a      	b.n	236c <mp_vprintf+0x480>
                }
                #endif
                if (prec < 0) {
    2236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2238:	2b00      	cmp	r3, #0
    223a:	da04      	bge.n	2246 <mp_vprintf+0x35a>
                    prec = strlen(str);
    223c:	69f8      	ldr	r0, [r7, #28]
    223e:	f019 fea3 	bl	1bf88 <strlen>
    2242:	4603      	mov	r3, r0
    2244:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    2246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    224a:	9301      	str	r3, [sp, #4]
    224c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2250:	9300      	str	r3, [sp, #0]
    2252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2254:	69f9      	ldr	r1, [r7, #28]
    2256:	68f8      	ldr	r0, [r7, #12]
    2258:	f7ff fb36 	bl	18c8 <mp_print_strn>
    225c:	4602      	mov	r2, r0
    225e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2260:	4413      	add	r3, r2
    2262:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2264:	e082      	b.n	236c <mp_vprintf+0x480>
            }
            case 'u':
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	1d1a      	adds	r2, r3, #4
    226a:	607a      	str	r2, [r7, #4]
    226c:	6819      	ldr	r1, [r3, #0]
    226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2270:	9303      	str	r3, [sp, #12]
    2272:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2276:	9302      	str	r3, [sp, #8]
    2278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    227a:	9301      	str	r3, [sp, #4]
    227c:	2361      	movs	r3, #97	; 0x61
    227e:	9300      	str	r3, [sp, #0]
    2280:	230a      	movs	r3, #10
    2282:	2200      	movs	r2, #0
    2284:	68f8      	ldr	r0, [r7, #12]
    2286:	f7ff fbb7 	bl	19f8 <mp_print_int>
    228a:	4602      	mov	r2, r0
    228c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    228e:	4413      	add	r3, r2
    2290:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2292:	e06b      	b.n	236c <mp_vprintf+0x480>
            case 'd':
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	1d1a      	adds	r2, r3, #4
    2298:	607a      	str	r2, [r7, #4]
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	4619      	mov	r1, r3
    229e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22a0:	9303      	str	r3, [sp, #12]
    22a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    22a6:	9302      	str	r3, [sp, #8]
    22a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22aa:	9301      	str	r3, [sp, #4]
    22ac:	2361      	movs	r3, #97	; 0x61
    22ae:	9300      	str	r3, [sp, #0]
    22b0:	230a      	movs	r3, #10
    22b2:	2201      	movs	r2, #1
    22b4:	68f8      	ldr	r0, [r7, #12]
    22b6:	f7ff fb9f 	bl	19f8 <mp_print_int>
    22ba:	4602      	mov	r2, r0
    22bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22be:	4413      	add	r3, r2
    22c0:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22c2:	e053      	b.n	236c <mp_vprintf+0x480>
            case 'x':
            case 'X': {
                char fmt_c = *fmt - 'X' + 'A';
    22c4:	68bb      	ldr	r3, [r7, #8]
    22c6:	781b      	ldrb	r3, [r3, #0]
    22c8:	3b17      	subs	r3, #23
    22ca:	76fb      	strb	r3, [r7, #27]
                mp_uint_t val;
                if (long_arg) {
    22cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    22d0:	2b00      	cmp	r3, #0
    22d2:	d005      	beq.n	22e0 <mp_vprintf+0x3f4>
                    val = va_arg(args, unsigned long int);
    22d4:	687b      	ldr	r3, [r7, #4]
    22d6:	1d1a      	adds	r2, r3, #4
    22d8:	607a      	str	r2, [r7, #4]
    22da:	681b      	ldr	r3, [r3, #0]
    22dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    22de:	e004      	b.n	22ea <mp_vprintf+0x3fe>
                } else {
                    val = va_arg(args, unsigned int);
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	1d1a      	adds	r2, r3, #4
    22e4:	607a      	str	r2, [r7, #4]
    22e6:	681b      	ldr	r3, [r3, #0]
    22e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    22ea:	7efb      	ldrb	r3, [r7, #27]
    22ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    22ee:	9203      	str	r2, [sp, #12]
    22f0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    22f4:	9202      	str	r2, [sp, #8]
    22f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    22f8:	9201      	str	r2, [sp, #4]
    22fa:	9300      	str	r3, [sp, #0]
    22fc:	2310      	movs	r3, #16
    22fe:	2200      	movs	r2, #0
    2300:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2302:	68f8      	ldr	r0, [r7, #12]
    2304:	f7ff fb78 	bl	19f8 <mp_print_int>
    2308:	4602      	mov	r2, r0
    230a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    230c:	4413      	add	r3, r2
    230e:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2310:	e02c      	b.n	236c <mp_vprintf+0x480>
            }
            case 'p':
            case 'P': // don't bother to handle upcase for 'P'
                // Use unsigned long int to work on both ILP32 and LP64 systems
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    2312:	687b      	ldr	r3, [r7, #4]
    2314:	1d1a      	adds	r2, r3, #4
    2316:	607a      	str	r2, [r7, #4]
    2318:	6819      	ldr	r1, [r3, #0]
    231a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    231c:	9303      	str	r3, [sp, #12]
    231e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2322:	9302      	str	r3, [sp, #8]
    2324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2326:	9301      	str	r3, [sp, #4]
    2328:	2361      	movs	r3, #97	; 0x61
    232a:	9300      	str	r3, [sp, #0]
    232c:	2310      	movs	r3, #16
    232e:	2200      	movs	r2, #0
    2330:	68f8      	ldr	r0, [r7, #12]
    2332:	f7ff fb61 	bl	19f8 <mp_print_int>
    2336:	4602      	mov	r2, r0
    2338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    233a:	4413      	add	r3, r2
    233c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    233e:	e015      	b.n	236c <mp_vprintf+0x480>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    2340:	68bb      	ldr	r3, [r7, #8]
    2342:	781b      	ldrb	r3, [r3, #0]
    2344:	2b25      	cmp	r3, #37	; 0x25
    2346:	d006      	beq.n	2356 <mp_vprintf+0x46a>
    2348:	4b11      	ldr	r3, [pc, #68]	; (2390 <mp_vprintf+0x4a4>)
    234a:	4a12      	ldr	r2, [pc, #72]	; (2394 <mp_vprintf+0x4a8>)
    234c:	f240 2132 	movw	r1, #562	; 0x232
    2350:	4811      	ldr	r0, [pc, #68]	; (2398 <mp_vprintf+0x4ac>)
    2352:	f019 f823 	bl	1b39c <__assert_func>
                print->print_strn(print->data, fmt, 1);
    2356:	68fb      	ldr	r3, [r7, #12]
    2358:	685b      	ldr	r3, [r3, #4]
    235a:	68fa      	ldr	r2, [r7, #12]
    235c:	6810      	ldr	r0, [r2, #0]
    235e:	2201      	movs	r2, #1
    2360:	68b9      	ldr	r1, [r7, #8]
    2362:	4798      	blx	r3
                chrs += 1;
    2364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2366:	3301      	adds	r3, #1
    2368:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    236a:	bf00      	nop
        }
        ++fmt;
    236c:	68bb      	ldr	r3, [r7, #8]
    236e:	3301      	adds	r3, #1
    2370:	60bb      	str	r3, [r7, #8]
    }
    2372:	e5c3      	b.n	1efc <mp_vprintf+0x10>
            break;
    2374:	bf00      	nop
    2376:	e000      	b.n	237a <mp_vprintf+0x48e>
            break;
    2378:	bf00      	nop
    return chrs;
    237a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    237c:	4618      	mov	r0, r3
    237e:	3748      	adds	r7, #72	; 0x48
    2380:	46bd      	mov	sp, r7
    2382:	bd80      	pop	{r7, pc}
    2384:	0001d88c 	.word	0x0001d88c
    2388:	0001d894 	.word	0x0001d894
    238c:	0001d89c 	.word	0x0001d89c
    2390:	0001d8a4 	.word	0x0001d8a4
    2394:	0001d8dc 	.word	0x0001d8dc
    2398:	0001d874 	.word	0x0001d874

0000239c <unichar_isspace>:
}

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    239c:	b480      	push	{r7}
    239e:	b083      	sub	sp, #12
    23a0:	af00      	add	r7, sp, #0
    23a2:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	2b7f      	cmp	r3, #127	; 0x7f
    23a8:	d809      	bhi.n	23be <unichar_isspace+0x22>
    23aa:	4a0a      	ldr	r2, [pc, #40]	; (23d4 <unichar_isspace+0x38>)
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	4413      	add	r3, r2
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	f003 0302 	and.w	r3, r3, #2
    23b6:	2b00      	cmp	r3, #0
    23b8:	d001      	beq.n	23be <unichar_isspace+0x22>
    23ba:	2301      	movs	r3, #1
    23bc:	e000      	b.n	23c0 <unichar_isspace+0x24>
    23be:	2300      	movs	r3, #0
    23c0:	f003 0301 	and.w	r3, r3, #1
    23c4:	b2db      	uxtb	r3, r3
}
    23c6:	4618      	mov	r0, r3
    23c8:	370c      	adds	r7, #12
    23ca:	46bd      	mov	sp, r7
    23cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    23d0:	4770      	bx	lr
    23d2:	bf00      	nop
    23d4:	0001d8e8 	.word	0x0001d8e8

000023d8 <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    23d8:	b480      	push	{r7}
    23da:	b083      	sub	sp, #12
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	2b7f      	cmp	r3, #127	; 0x7f
    23e4:	d809      	bhi.n	23fa <unichar_isalpha+0x22>
    23e6:	4a0a      	ldr	r2, [pc, #40]	; (2410 <unichar_isalpha+0x38>)
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	4413      	add	r3, r2
    23ec:	781b      	ldrb	r3, [r3, #0]
    23ee:	f003 0308 	and.w	r3, r3, #8
    23f2:	2b00      	cmp	r3, #0
    23f4:	d001      	beq.n	23fa <unichar_isalpha+0x22>
    23f6:	2301      	movs	r3, #1
    23f8:	e000      	b.n	23fc <unichar_isalpha+0x24>
    23fa:	2300      	movs	r3, #0
    23fc:	f003 0301 	and.w	r3, r3, #1
    2400:	b2db      	uxtb	r3, r3
}
    2402:	4618      	mov	r0, r3
    2404:	370c      	adds	r7, #12
    2406:	46bd      	mov	sp, r7
    2408:	f85d 7b04 	ldr.w	r7, [sp], #4
    240c:	4770      	bx	lr
    240e:	bf00      	nop
    2410:	0001d8e8 	.word	0x0001d8e8

00002414 <unichar_isdigit>:
bool unichar_isprint(unichar c) {
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    2414:	b480      	push	{r7}
    2416:	b083      	sub	sp, #12
    2418:	af00      	add	r7, sp, #0
    241a:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	2b7f      	cmp	r3, #127	; 0x7f
    2420:	d809      	bhi.n	2436 <unichar_isdigit+0x22>
    2422:	4a0a      	ldr	r2, [pc, #40]	; (244c <unichar_isdigit+0x38>)
    2424:	687b      	ldr	r3, [r7, #4]
    2426:	4413      	add	r3, r2
    2428:	781b      	ldrb	r3, [r3, #0]
    242a:	f003 0304 	and.w	r3, r3, #4
    242e:	2b00      	cmp	r3, #0
    2430:	d001      	beq.n	2436 <unichar_isdigit+0x22>
    2432:	2301      	movs	r3, #1
    2434:	e000      	b.n	2438 <unichar_isdigit+0x24>
    2436:	2300      	movs	r3, #0
    2438:	f003 0301 	and.w	r3, r3, #1
    243c:	b2db      	uxtb	r3, r3
}
    243e:	4618      	mov	r0, r3
    2440:	370c      	adds	r7, #12
    2442:	46bd      	mov	sp, r7
    2444:	f85d 7b04 	ldr.w	r7, [sp], #4
    2448:	4770      	bx	lr
    244a:	bf00      	nop
    244c:	0001d8e8 	.word	0x0001d8e8

00002450 <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    2450:	b480      	push	{r7}
    2452:	b083      	sub	sp, #12
    2454:	af00      	add	r7, sp, #0
    2456:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	2b7f      	cmp	r3, #127	; 0x7f
    245c:	d809      	bhi.n	2472 <unichar_isxdigit+0x22>
    245e:	4a0a      	ldr	r2, [pc, #40]	; (2488 <unichar_isxdigit+0x38>)
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	4413      	add	r3, r2
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	f003 0340 	and.w	r3, r3, #64	; 0x40
    246a:	2b00      	cmp	r3, #0
    246c:	d001      	beq.n	2472 <unichar_isxdigit+0x22>
    246e:	2301      	movs	r3, #1
    2470:	e000      	b.n	2474 <unichar_isxdigit+0x24>
    2472:	2300      	movs	r3, #0
    2474:	f003 0301 	and.w	r3, r3, #1
    2478:	b2db      	uxtb	r3, r3
}
    247a:	4618      	mov	r0, r3
    247c:	370c      	adds	r7, #12
    247e:	46bd      	mov	sp, r7
    2480:	f85d 7b04 	ldr.w	r7, [sp], #4
    2484:	4770      	bx	lr
    2486:	bf00      	nop
    2488:	0001d8e8 	.word	0x0001d8e8

0000248c <unichar_isident>:

bool unichar_isident(unichar c) {
    248c:	b480      	push	{r7}
    248e:	b083      	sub	sp, #12
    2490:	af00      	add	r7, sp, #0
    2492:	6078      	str	r0, [r7, #4]
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	2b7f      	cmp	r3, #127	; 0x7f
    2498:	d80c      	bhi.n	24b4 <unichar_isident+0x28>
    249a:	4a0b      	ldr	r2, [pc, #44]	; (24c8 <unichar_isident+0x3c>)
    249c:	687b      	ldr	r3, [r7, #4]
    249e:	4413      	add	r3, r2
    24a0:	781b      	ldrb	r3, [r3, #0]
    24a2:	f003 030c 	and.w	r3, r3, #12
    24a6:	2b00      	cmp	r3, #0
    24a8:	d102      	bne.n	24b0 <unichar_isident+0x24>
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	2b5f      	cmp	r3, #95	; 0x5f
    24ae:	d101      	bne.n	24b4 <unichar_isident+0x28>
    24b0:	2301      	movs	r3, #1
    24b2:	e000      	b.n	24b6 <unichar_isident+0x2a>
    24b4:	2300      	movs	r3, #0
    24b6:	f003 0301 	and.w	r3, r3, #1
    24ba:	b2db      	uxtb	r3, r3
}
    24bc:	4618      	mov	r0, r3
    24be:	370c      	adds	r7, #12
    24c0:	46bd      	mov	sp, r7
    24c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c6:	4770      	bx	lr
    24c8:	0001d8e8 	.word	0x0001d8e8

000024cc <unichar_isupper>:

bool unichar_isupper(unichar c) {
    24cc:	b480      	push	{r7}
    24ce:	b083      	sub	sp, #12
    24d0:	af00      	add	r7, sp, #0
    24d2:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    24d4:	687b      	ldr	r3, [r7, #4]
    24d6:	2b7f      	cmp	r3, #127	; 0x7f
    24d8:	d809      	bhi.n	24ee <unichar_isupper+0x22>
    24da:	4a0a      	ldr	r2, [pc, #40]	; (2504 <unichar_isupper+0x38>)
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	f003 0310 	and.w	r3, r3, #16
    24e6:	2b00      	cmp	r3, #0
    24e8:	d001      	beq.n	24ee <unichar_isupper+0x22>
    24ea:	2301      	movs	r3, #1
    24ec:	e000      	b.n	24f0 <unichar_isupper+0x24>
    24ee:	2300      	movs	r3, #0
    24f0:	f003 0301 	and.w	r3, r3, #1
    24f4:	b2db      	uxtb	r3, r3
}
    24f6:	4618      	mov	r0, r3
    24f8:	370c      	adds	r7, #12
    24fa:	46bd      	mov	sp, r7
    24fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2500:	4770      	bx	lr
    2502:	bf00      	nop
    2504:	0001d8e8 	.word	0x0001d8e8

00002508 <unichar_islower>:

bool unichar_islower(unichar c) {
    2508:	b480      	push	{r7}
    250a:	b083      	sub	sp, #12
    250c:	af00      	add	r7, sp, #0
    250e:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	2b7f      	cmp	r3, #127	; 0x7f
    2514:	d809      	bhi.n	252a <unichar_islower+0x22>
    2516:	4a0a      	ldr	r2, [pc, #40]	; (2540 <unichar_islower+0x38>)
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	4413      	add	r3, r2
    251c:	781b      	ldrb	r3, [r3, #0]
    251e:	f003 0320 	and.w	r3, r3, #32
    2522:	2b00      	cmp	r3, #0
    2524:	d001      	beq.n	252a <unichar_islower+0x22>
    2526:	2301      	movs	r3, #1
    2528:	e000      	b.n	252c <unichar_islower+0x24>
    252a:	2300      	movs	r3, #0
    252c:	f003 0301 	and.w	r3, r3, #1
    2530:	b2db      	uxtb	r3, r3
}
    2532:	4618      	mov	r0, r3
    2534:	370c      	adds	r7, #12
    2536:	46bd      	mov	sp, r7
    2538:	f85d 7b04 	ldr.w	r7, [sp], #4
    253c:	4770      	bx	lr
    253e:	bf00      	nop
    2540:	0001d8e8 	.word	0x0001d8e8

00002544 <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    2544:	b580      	push	{r7, lr}
    2546:	b082      	sub	sp, #8
    2548:	af00      	add	r7, sp, #0
    254a:	6078      	str	r0, [r7, #4]
    if (unichar_isupper(c)) {
    254c:	6878      	ldr	r0, [r7, #4]
    254e:	f7ff ffbd 	bl	24cc <unichar_isupper>
    2552:	4603      	mov	r3, r0
    2554:	2b00      	cmp	r3, #0
    2556:	d002      	beq.n	255e <unichar_tolower+0x1a>
        return c + 0x20;
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	3320      	adds	r3, #32
    255c:	e000      	b.n	2560 <unichar_tolower+0x1c>
    }
    return c;
    255e:	687b      	ldr	r3, [r7, #4]
}
    2560:	4618      	mov	r0, r3
    2562:	3708      	adds	r7, #8
    2564:	46bd      	mov	sp, r7
    2566:	bd80      	pop	{r7, pc}

00002568 <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    2568:	b580      	push	{r7, lr}
    256a:	b082      	sub	sp, #8
    256c:	af00      	add	r7, sp, #0
    256e:	6078      	str	r0, [r7, #4]
    if (unichar_islower(c)) {
    2570:	6878      	ldr	r0, [r7, #4]
    2572:	f7ff ffc9 	bl	2508 <unichar_islower>
    2576:	4603      	mov	r3, r0
    2578:	2b00      	cmp	r3, #0
    257a:	d002      	beq.n	2582 <unichar_toupper+0x1a>
        return c - 0x20;
    257c:	687b      	ldr	r3, [r7, #4]
    257e:	3b20      	subs	r3, #32
    2580:	e000      	b.n	2584 <unichar_toupper+0x1c>
    }
    return c;
    2582:	687b      	ldr	r3, [r7, #4]
}
    2584:	4618      	mov	r0, r3
    2586:	3708      	adds	r7, #8
    2588:	46bd      	mov	sp, r7
    258a:	bd80      	pop	{r7, pc}

0000258c <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    258c:	b480      	push	{r7}
    258e:	b085      	sub	sp, #20
    2590:	af00      	add	r7, sp, #0
    2592:	6078      	str	r0, [r7, #4]
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	3b30      	subs	r3, #48	; 0x30
    2598:	60fb      	str	r3, [r7, #12]
    if (n > 9) {
    259a:	68fb      	ldr	r3, [r7, #12]
    259c:	2b09      	cmp	r3, #9
    259e:	d906      	bls.n	25ae <unichar_xdigit_value+0x22>
        n &= ~('a' - 'A');
    25a0:	68fb      	ldr	r3, [r7, #12]
    25a2:	f023 0320 	bic.w	r3, r3, #32
    25a6:	60fb      	str	r3, [r7, #12]
        n -= ('A' - ('9' + 1));
    25a8:	68fb      	ldr	r3, [r7, #12]
    25aa:	3b07      	subs	r3, #7
    25ac:	60fb      	str	r3, [r7, #12]
    }
    return n;
    25ae:	68fb      	ldr	r3, [r7, #12]
}
    25b0:	4618      	mov	r0, r3
    25b2:	3714      	adds	r7, #20
    25b4:	46bd      	mov	sp, r7
    25b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    25ba:	4770      	bx	lr

000025bc <mp_reader_mem_readbyte>:
    const byte *beg;
    const byte *cur;
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    25bc:	b480      	push	{r7}
    25be:	b085      	sub	sp, #20
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	60fb      	str	r3, [r7, #12]
    if (reader->cur < reader->end) {
    25c8:	68fb      	ldr	r3, [r7, #12]
    25ca:	689a      	ldr	r2, [r3, #8]
    25cc:	68fb      	ldr	r3, [r7, #12]
    25ce:	68db      	ldr	r3, [r3, #12]
    25d0:	429a      	cmp	r2, r3
    25d2:	d206      	bcs.n	25e2 <mp_reader_mem_readbyte+0x26>
        return *reader->cur++;
    25d4:	68fb      	ldr	r3, [r7, #12]
    25d6:	689b      	ldr	r3, [r3, #8]
    25d8:	1c59      	adds	r1, r3, #1
    25da:	68fa      	ldr	r2, [r7, #12]
    25dc:	6091      	str	r1, [r2, #8]
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	e001      	b.n	25e6 <mp_reader_mem_readbyte+0x2a>
    } else {
        return MP_READER_EOF;
    25e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
    25e6:	4618      	mov	r0, r3
    25e8:	3714      	adds	r7, #20
    25ea:	46bd      	mov	sp, r7
    25ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    25f0:	4770      	bx	lr
    25f2:	bf00      	nop

000025f4 <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    25f4:	b580      	push	{r7, lr}
    25f6:	b084      	sub	sp, #16
    25f8:	af00      	add	r7, sp, #0
    25fa:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	60fb      	str	r3, [r7, #12]
    if (reader->free_len > 0) {
    2600:	68fb      	ldr	r3, [r7, #12]
    2602:	681b      	ldr	r3, [r3, #0]
    2604:	2b00      	cmp	r3, #0
    2606:	d004      	beq.n	2612 <mp_reader_mem_close+0x1e>
        m_del(char, (char*)reader->beg, reader->free_len);
    2608:	68fb      	ldr	r3, [r7, #12]
    260a:	685b      	ldr	r3, [r3, #4]
    260c:	4618      	mov	r0, r3
    260e:	f7fd fee7 	bl	3e0 <m_free>
    }
    m_del_obj(mp_reader_mem_t, reader);
    2612:	68f8      	ldr	r0, [r7, #12]
    2614:	f7fd fee4 	bl	3e0 <m_free>
}
    2618:	bf00      	nop
    261a:	3710      	adds	r7, #16
    261c:	46bd      	mov	sp, r7
    261e:	bd80      	pop	{r7, pc}

00002620 <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    2620:	b580      	push	{r7, lr}
    2622:	b086      	sub	sp, #24
    2624:	af00      	add	r7, sp, #0
    2626:	60f8      	str	r0, [r7, #12]
    2628:	60b9      	str	r1, [r7, #8]
    262a:	607a      	str	r2, [r7, #4]
    262c:	603b      	str	r3, [r7, #0]
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    262e:	2010      	movs	r0, #16
    2630:	f7fd fe74 	bl	31c <m_malloc>
    2634:	6178      	str	r0, [r7, #20]
    rm->free_len = free_len;
    2636:	697b      	ldr	r3, [r7, #20]
    2638:	683a      	ldr	r2, [r7, #0]
    263a:	601a      	str	r2, [r3, #0]
    rm->beg = buf;
    263c:	697b      	ldr	r3, [r7, #20]
    263e:	68ba      	ldr	r2, [r7, #8]
    2640:	605a      	str	r2, [r3, #4]
    rm->cur = buf;
    2642:	697b      	ldr	r3, [r7, #20]
    2644:	68ba      	ldr	r2, [r7, #8]
    2646:	609a      	str	r2, [r3, #8]
    rm->end = buf + len;
    2648:	68ba      	ldr	r2, [r7, #8]
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	441a      	add	r2, r3
    264e:	697b      	ldr	r3, [r7, #20]
    2650:	60da      	str	r2, [r3, #12]
    reader->data = rm;
    2652:	68fb      	ldr	r3, [r7, #12]
    2654:	697a      	ldr	r2, [r7, #20]
    2656:	601a      	str	r2, [r3, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    2658:	68fb      	ldr	r3, [r7, #12]
    265a:	4a04      	ldr	r2, [pc, #16]	; (266c <mp_reader_new_mem+0x4c>)
    265c:	605a      	str	r2, [r3, #4]
    reader->close = mp_reader_mem_close;
    265e:	68fb      	ldr	r3, [r7, #12]
    2660:	4a03      	ldr	r2, [pc, #12]	; (2670 <mp_reader_new_mem+0x50>)
    2662:	609a      	str	r2, [r3, #8]
}
    2664:	bf00      	nop
    2666:	3718      	adds	r7, #24
    2668:	46bd      	mov	sp, r7
    266a:	bd80      	pop	{r7, pc}
    266c:	000025bd 	.word	0x000025bd
    2670:	000025f5 	.word	0x000025f5

00002674 <vstr_reset>:
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    2674:	b480      	push	{r7}
    2676:	b083      	sub	sp, #12
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
    267c:	687b      	ldr	r3, [r7, #4]
    267e:	2200      	movs	r2, #0
    2680:	605a      	str	r2, [r3, #4]
    2682:	bf00      	nop
    2684:	370c      	adds	r7, #12
    2686:	46bd      	mov	sp, r7
    2688:	f85d 7b04 	ldr.w	r7, [sp], #4
    268c:	4770      	bx	lr
    268e:	bf00      	nop

00002690 <is_end>:
// don't know if that's intentional or not, but we don't allow it

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    2690:	b480      	push	{r7}
    2692:	b083      	sub	sp, #12
    2694:	af00      	add	r7, sp, #0
    2696:	6078      	str	r0, [r7, #4]
    return lex->chr0 == MP_LEXER_EOF;
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	691b      	ldr	r3, [r3, #16]
    269c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    26a0:	bf0c      	ite	eq
    26a2:	2301      	moveq	r3, #1
    26a4:	2300      	movne	r3, #0
    26a6:	b2db      	uxtb	r3, r3
}
    26a8:	4618      	mov	r0, r3
    26aa:	370c      	adds	r7, #12
    26ac:	46bd      	mov	sp, r7
    26ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b2:	4770      	bx	lr

000026b4 <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    26b4:	b480      	push	{r7}
    26b6:	b083      	sub	sp, #12
    26b8:	af00      	add	r7, sp, #0
    26ba:	6078      	str	r0, [r7, #4]
    return lex->chr0 == '\n';
    26bc:	687b      	ldr	r3, [r7, #4]
    26be:	691b      	ldr	r3, [r3, #16]
    26c0:	2b0a      	cmp	r3, #10
    26c2:	bf0c      	ite	eq
    26c4:	2301      	moveq	r3, #1
    26c6:	2300      	movne	r3, #0
    26c8:	b2db      	uxtb	r3, r3
}
    26ca:	4618      	mov	r0, r3
    26cc:	370c      	adds	r7, #12
    26ce:	46bd      	mov	sp, r7
    26d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26d4:	4770      	bx	lr
    26d6:	bf00      	nop

000026d8 <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    26d8:	b480      	push	{r7}
    26da:	b083      	sub	sp, #12
    26dc:	af00      	add	r7, sp, #0
    26de:	6078      	str	r0, [r7, #4]
    26e0:	460b      	mov	r3, r1
    26e2:	70fb      	strb	r3, [r7, #3]
    return lex->chr0 == c;
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	691a      	ldr	r2, [r3, #16]
    26e8:	78fb      	ldrb	r3, [r7, #3]
    26ea:	429a      	cmp	r2, r3
    26ec:	bf0c      	ite	eq
    26ee:	2301      	moveq	r3, #1
    26f0:	2300      	movne	r3, #0
    26f2:	b2db      	uxtb	r3, r3
}
    26f4:	4618      	mov	r0, r3
    26f6:	370c      	adds	r7, #12
    26f8:	46bd      	mov	sp, r7
    26fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    26fe:	4770      	bx	lr

00002700 <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    2700:	b480      	push	{r7}
    2702:	b083      	sub	sp, #12
    2704:	af00      	add	r7, sp, #0
    2706:	6078      	str	r0, [r7, #4]
    2708:	460b      	mov	r3, r1
    270a:	70fb      	strb	r3, [r7, #3]
    270c:	4613      	mov	r3, r2
    270e:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 || lex->chr0 == c2;
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	691a      	ldr	r2, [r3, #16]
    2714:	78fb      	ldrb	r3, [r7, #3]
    2716:	429a      	cmp	r2, r3
    2718:	d004      	beq.n	2724 <is_char_or+0x24>
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	691a      	ldr	r2, [r3, #16]
    271e:	78bb      	ldrb	r3, [r7, #2]
    2720:	429a      	cmp	r2, r3
    2722:	d101      	bne.n	2728 <is_char_or+0x28>
    2724:	2301      	movs	r3, #1
    2726:	e000      	b.n	272a <is_char_or+0x2a>
    2728:	2300      	movs	r3, #0
    272a:	f003 0301 	and.w	r3, r3, #1
    272e:	b2db      	uxtb	r3, r3
}
    2730:	4618      	mov	r0, r3
    2732:	370c      	adds	r7, #12
    2734:	46bd      	mov	sp, r7
    2736:	f85d 7b04 	ldr.w	r7, [sp], #4
    273a:	4770      	bx	lr

0000273c <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    273c:	b480      	push	{r7}
    273e:	b083      	sub	sp, #12
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]
    2744:	4608      	mov	r0, r1
    2746:	4611      	mov	r1, r2
    2748:	461a      	mov	r2, r3
    274a:	4603      	mov	r3, r0
    274c:	70fb      	strb	r3, [r7, #3]
    274e:	460b      	mov	r3, r1
    2750:	70bb      	strb	r3, [r7, #2]
    2752:	4613      	mov	r3, r2
    2754:	707b      	strb	r3, [r7, #1]
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	691a      	ldr	r2, [r3, #16]
    275a:	78fb      	ldrb	r3, [r7, #3]
    275c:	429a      	cmp	r2, r3
    275e:	d009      	beq.n	2774 <is_char_or3+0x38>
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	691a      	ldr	r2, [r3, #16]
    2764:	78bb      	ldrb	r3, [r7, #2]
    2766:	429a      	cmp	r2, r3
    2768:	d004      	beq.n	2774 <is_char_or3+0x38>
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	691a      	ldr	r2, [r3, #16]
    276e:	787b      	ldrb	r3, [r7, #1]
    2770:	429a      	cmp	r2, r3
    2772:	d101      	bne.n	2778 <is_char_or3+0x3c>
    2774:	2301      	movs	r3, #1
    2776:	e000      	b.n	277a <is_char_or3+0x3e>
    2778:	2300      	movs	r3, #0
    277a:	f003 0301 	and.w	r3, r3, #1
    277e:	b2db      	uxtb	r3, r3
}
    2780:	4618      	mov	r0, r3
    2782:	370c      	adds	r7, #12
    2784:	46bd      	mov	sp, r7
    2786:	f85d 7b04 	ldr.w	r7, [sp], #4
    278a:	4770      	bx	lr

0000278c <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    278c:	b480      	push	{r7}
    278e:	b083      	sub	sp, #12
    2790:	af00      	add	r7, sp, #0
    2792:	6078      	str	r0, [r7, #4]
    2794:	460b      	mov	r3, r1
    2796:	70fb      	strb	r3, [r7, #3]
    return lex->chr1 == c;
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	695a      	ldr	r2, [r3, #20]
    279c:	78fb      	ldrb	r3, [r7, #3]
    279e:	429a      	cmp	r2, r3
    27a0:	bf0c      	ite	eq
    27a2:	2301      	moveq	r3, #1
    27a4:	2300      	movne	r3, #0
    27a6:	b2db      	uxtb	r3, r3
}
    27a8:	4618      	mov	r0, r3
    27aa:	370c      	adds	r7, #12
    27ac:	46bd      	mov	sp, r7
    27ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    27b2:	4770      	bx	lr

000027b4 <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    27b4:	b480      	push	{r7}
    27b6:	b083      	sub	sp, #12
    27b8:	af00      	add	r7, sp, #0
    27ba:	6078      	str	r0, [r7, #4]
    27bc:	460b      	mov	r3, r1
    27be:	70fb      	strb	r3, [r7, #3]
    27c0:	4613      	mov	r3, r2
    27c2:	70bb      	strb	r3, [r7, #2]
    return lex->chr1 == c1 || lex->chr1 == c2;
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	695a      	ldr	r2, [r3, #20]
    27c8:	78fb      	ldrb	r3, [r7, #3]
    27ca:	429a      	cmp	r2, r3
    27cc:	d004      	beq.n	27d8 <is_char_following_or+0x24>
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	695a      	ldr	r2, [r3, #20]
    27d2:	78bb      	ldrb	r3, [r7, #2]
    27d4:	429a      	cmp	r2, r3
    27d6:	d101      	bne.n	27dc <is_char_following_or+0x28>
    27d8:	2301      	movs	r3, #1
    27da:	e000      	b.n	27de <is_char_following_or+0x2a>
    27dc:	2300      	movs	r3, #0
    27de:	f003 0301 	and.w	r3, r3, #1
    27e2:	b2db      	uxtb	r3, r3
}
    27e4:	4618      	mov	r0, r3
    27e6:	370c      	adds	r7, #12
    27e8:	46bd      	mov	sp, r7
    27ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ee:	4770      	bx	lr

000027f0 <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    27f0:	b480      	push	{r7}
    27f2:	b083      	sub	sp, #12
    27f4:	af00      	add	r7, sp, #0
    27f6:	6078      	str	r0, [r7, #4]
    27f8:	460b      	mov	r3, r1
    27fa:	70fb      	strb	r3, [r7, #3]
    27fc:	4613      	mov	r3, r2
    27fe:	70bb      	strb	r3, [r7, #2]
    return lex->chr2 == c1 || lex->chr2 == c2;
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	699a      	ldr	r2, [r3, #24]
    2804:	78fb      	ldrb	r3, [r7, #3]
    2806:	429a      	cmp	r2, r3
    2808:	d004      	beq.n	2814 <is_char_following_following_or+0x24>
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	699a      	ldr	r2, [r3, #24]
    280e:	78bb      	ldrb	r3, [r7, #2]
    2810:	429a      	cmp	r2, r3
    2812:	d101      	bne.n	2818 <is_char_following_following_or+0x28>
    2814:	2301      	movs	r3, #1
    2816:	e000      	b.n	281a <is_char_following_following_or+0x2a>
    2818:	2300      	movs	r3, #0
    281a:	f003 0301 	and.w	r3, r3, #1
    281e:	b2db      	uxtb	r3, r3
}
    2820:	4618      	mov	r0, r3
    2822:	370c      	adds	r7, #12
    2824:	46bd      	mov	sp, r7
    2826:	f85d 7b04 	ldr.w	r7, [sp], #4
    282a:	4770      	bx	lr

0000282c <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    282c:	b480      	push	{r7}
    282e:	b083      	sub	sp, #12
    2830:	af00      	add	r7, sp, #0
    2832:	6078      	str	r0, [r7, #4]
    2834:	460b      	mov	r3, r1
    2836:	70fb      	strb	r3, [r7, #3]
    2838:	4613      	mov	r3, r2
    283a:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 && lex->chr1 == c2;
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	691a      	ldr	r2, [r3, #16]
    2840:	78fb      	ldrb	r3, [r7, #3]
    2842:	429a      	cmp	r2, r3
    2844:	d106      	bne.n	2854 <is_char_and+0x28>
    2846:	687b      	ldr	r3, [r7, #4]
    2848:	695a      	ldr	r2, [r3, #20]
    284a:	78bb      	ldrb	r3, [r7, #2]
    284c:	429a      	cmp	r2, r3
    284e:	d101      	bne.n	2854 <is_char_and+0x28>
    2850:	2301      	movs	r3, #1
    2852:	e000      	b.n	2856 <is_char_and+0x2a>
    2854:	2300      	movs	r3, #0
    2856:	f003 0301 	and.w	r3, r3, #1
    285a:	b2db      	uxtb	r3, r3
}
    285c:	4618      	mov	r0, r3
    285e:	370c      	adds	r7, #12
    2860:	46bd      	mov	sp, r7
    2862:	f85d 7b04 	ldr.w	r7, [sp], #4
    2866:	4770      	bx	lr

00002868 <is_whitespace>:

STATIC bool is_whitespace(mp_lexer_t *lex) {
    2868:	b580      	push	{r7, lr}
    286a:	b082      	sub	sp, #8
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
    return unichar_isspace(lex->chr0);
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	691b      	ldr	r3, [r3, #16]
    2874:	4618      	mov	r0, r3
    2876:	f7ff fd91 	bl	239c <unichar_isspace>
    287a:	4603      	mov	r3, r0
}
    287c:	4618      	mov	r0, r3
    287e:	3708      	adds	r7, #8
    2880:	46bd      	mov	sp, r7
    2882:	bd80      	pop	{r7, pc}

00002884 <is_letter>:

STATIC bool is_letter(mp_lexer_t *lex) {
    2884:	b580      	push	{r7, lr}
    2886:	b082      	sub	sp, #8
    2888:	af00      	add	r7, sp, #0
    288a:	6078      	str	r0, [r7, #4]
    return unichar_isalpha(lex->chr0);
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	691b      	ldr	r3, [r3, #16]
    2890:	4618      	mov	r0, r3
    2892:	f7ff fda1 	bl	23d8 <unichar_isalpha>
    2896:	4603      	mov	r3, r0
}
    2898:	4618      	mov	r0, r3
    289a:	3708      	adds	r7, #8
    289c:	46bd      	mov	sp, r7
    289e:	bd80      	pop	{r7, pc}

000028a0 <is_digit>:

STATIC bool is_digit(mp_lexer_t *lex) {
    28a0:	b580      	push	{r7, lr}
    28a2:	b082      	sub	sp, #8
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr0);
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	691b      	ldr	r3, [r3, #16]
    28ac:	4618      	mov	r0, r3
    28ae:	f7ff fdb1 	bl	2414 <unichar_isdigit>
    28b2:	4603      	mov	r3, r0
}
    28b4:	4618      	mov	r0, r3
    28b6:	3708      	adds	r7, #8
    28b8:	46bd      	mov	sp, r7
    28ba:	bd80      	pop	{r7, pc}

000028bc <is_following_digit>:

STATIC bool is_following_digit(mp_lexer_t *lex) {
    28bc:	b580      	push	{r7, lr}
    28be:	b082      	sub	sp, #8
    28c0:	af00      	add	r7, sp, #0
    28c2:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr1);
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	695b      	ldr	r3, [r3, #20]
    28c8:	4618      	mov	r0, r3
    28ca:	f7ff fda3 	bl	2414 <unichar_isdigit>
    28ce:	4603      	mov	r3, r0
}
    28d0:	4618      	mov	r0, r3
    28d2:	3708      	adds	r7, #8
    28d4:	46bd      	mov	sp, r7
    28d6:	bd80      	pop	{r7, pc}

000028d8 <is_following_base_char>:

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    28d8:	b480      	push	{r7}
    28da:	b085      	sub	sp, #20
    28dc:	af00      	add	r7, sp, #0
    28de:	6078      	str	r0, [r7, #4]
    const unichar chr1 = lex->chr1 | 0x20;
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	695b      	ldr	r3, [r3, #20]
    28e4:	f043 0320 	orr.w	r3, r3, #32
    28e8:	60fb      	str	r3, [r7, #12]
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    28ea:	68fb      	ldr	r3, [r7, #12]
    28ec:	2b62      	cmp	r3, #98	; 0x62
    28ee:	d005      	beq.n	28fc <is_following_base_char+0x24>
    28f0:	68fb      	ldr	r3, [r7, #12]
    28f2:	2b6f      	cmp	r3, #111	; 0x6f
    28f4:	d002      	beq.n	28fc <is_following_base_char+0x24>
    28f6:	68fb      	ldr	r3, [r7, #12]
    28f8:	2b78      	cmp	r3, #120	; 0x78
    28fa:	d101      	bne.n	2900 <is_following_base_char+0x28>
    28fc:	2301      	movs	r3, #1
    28fe:	e000      	b.n	2902 <is_following_base_char+0x2a>
    2900:	2300      	movs	r3, #0
    2902:	f003 0301 	and.w	r3, r3, #1
    2906:	b2db      	uxtb	r3, r3
}
    2908:	4618      	mov	r0, r3
    290a:	3714      	adds	r7, #20
    290c:	46bd      	mov	sp, r7
    290e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2912:	4770      	bx	lr

00002914 <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    2914:	b480      	push	{r7}
    2916:	b083      	sub	sp, #12
    2918:	af00      	add	r7, sp, #0
    291a:	6078      	str	r0, [r7, #4]
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	695b      	ldr	r3, [r3, #20]
    2920:	2b2f      	cmp	r3, #47	; 0x2f
    2922:	d905      	bls.n	2930 <is_following_odigit+0x1c>
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	695b      	ldr	r3, [r3, #20]
    2928:	2b37      	cmp	r3, #55	; 0x37
    292a:	d801      	bhi.n	2930 <is_following_odigit+0x1c>
    292c:	2301      	movs	r3, #1
    292e:	e000      	b.n	2932 <is_following_odigit+0x1e>
    2930:	2300      	movs	r3, #0
    2932:	f003 0301 	and.w	r3, r3, #1
    2936:	b2db      	uxtb	r3, r3
}
    2938:	4618      	mov	r0, r3
    293a:	370c      	adds	r7, #12
    293c:	46bd      	mov	sp, r7
    293e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2942:	4770      	bx	lr

00002944 <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    2944:	b580      	push	{r7, lr}
    2946:	b082      	sub	sp, #8
    2948:	af00      	add	r7, sp, #0
    294a:	6078      	str	r0, [r7, #4]
    return is_char_or(lex, '\'', '\"')
    294c:	2222      	movs	r2, #34	; 0x22
    294e:	2127      	movs	r1, #39	; 0x27
    2950:	6878      	ldr	r0, [r7, #4]
    2952:	f7ff fed5 	bl	2700 <is_char_or>
    2956:	4603      	mov	r3, r0
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2958:	2b00      	cmp	r3, #0
    295a:	d128      	bne.n	29ae <is_string_or_bytes+0x6a>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    295c:	2362      	movs	r3, #98	; 0x62
    295e:	2275      	movs	r2, #117	; 0x75
    2960:	2172      	movs	r1, #114	; 0x72
    2962:	6878      	ldr	r0, [r7, #4]
    2964:	f7ff feea 	bl	273c <is_char_or3>
    2968:	4603      	mov	r3, r0
    296a:	2b00      	cmp	r3, #0
    296c:	d007      	beq.n	297e <is_string_or_bytes+0x3a>
    296e:	2222      	movs	r2, #34	; 0x22
    2970:	2127      	movs	r1, #39	; 0x27
    2972:	6878      	ldr	r0, [r7, #4]
    2974:	f7ff ff1e 	bl	27b4 <is_char_following_or>
    2978:	4603      	mov	r3, r0
    297a:	2b00      	cmp	r3, #0
    297c:	d117      	bne.n	29ae <is_string_or_bytes+0x6a>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    297e:	2262      	movs	r2, #98	; 0x62
    2980:	2172      	movs	r1, #114	; 0x72
    2982:	6878      	ldr	r0, [r7, #4]
    2984:	f7ff ff52 	bl	282c <is_char_and>
    2988:	4603      	mov	r3, r0
    298a:	2b00      	cmp	r3, #0
    298c:	d107      	bne.n	299e <is_string_or_bytes+0x5a>
    298e:	2272      	movs	r2, #114	; 0x72
    2990:	2162      	movs	r1, #98	; 0x62
    2992:	6878      	ldr	r0, [r7, #4]
    2994:	f7ff ff4a 	bl	282c <is_char_and>
    2998:	4603      	mov	r3, r0
    299a:	2b00      	cmp	r3, #0
    299c:	d009      	beq.n	29b2 <is_string_or_bytes+0x6e>
            && is_char_following_following_or(lex, '\'', '\"'));
    299e:	2222      	movs	r2, #34	; 0x22
    29a0:	2127      	movs	r1, #39	; 0x27
    29a2:	6878      	ldr	r0, [r7, #4]
    29a4:	f7ff ff24 	bl	27f0 <is_char_following_following_or>
    29a8:	4603      	mov	r3, r0
    29aa:	2b00      	cmp	r3, #0
    29ac:	d001      	beq.n	29b2 <is_string_or_bytes+0x6e>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    29ae:	2301      	movs	r3, #1
    29b0:	e000      	b.n	29b4 <is_string_or_bytes+0x70>
    29b2:	2300      	movs	r3, #0
    return is_char_or(lex, '\'', '\"')
    29b4:	f003 0301 	and.w	r3, r3, #1
    29b8:	b2db      	uxtb	r3, r3
}
    29ba:	4618      	mov	r0, r3
    29bc:	3708      	adds	r7, #8
    29be:	46bd      	mov	sp, r7
    29c0:	bd80      	pop	{r7, pc}
    29c2:	bf00      	nop

000029c4 <is_head_of_identifier>:

// to easily parse utf-8 identifiers we allow any raw byte with high bit set
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    29c4:	b580      	push	{r7, lr}
    29c6:	b082      	sub	sp, #8
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    29cc:	6878      	ldr	r0, [r7, #4]
    29ce:	f7ff ff59 	bl	2884 <is_letter>
    29d2:	4603      	mov	r3, r0
    29d4:	2b00      	cmp	r3, #0
    29d6:	d107      	bne.n	29e8 <is_head_of_identifier+0x24>
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	691b      	ldr	r3, [r3, #16]
    29dc:	2b5f      	cmp	r3, #95	; 0x5f
    29de:	d003      	beq.n	29e8 <is_head_of_identifier+0x24>
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	691b      	ldr	r3, [r3, #16]
    29e4:	2b7f      	cmp	r3, #127	; 0x7f
    29e6:	d901      	bls.n	29ec <is_head_of_identifier+0x28>
    29e8:	2301      	movs	r3, #1
    29ea:	e000      	b.n	29ee <is_head_of_identifier+0x2a>
    29ec:	2300      	movs	r3, #0
    29ee:	f003 0301 	and.w	r3, r3, #1
    29f2:	b2db      	uxtb	r3, r3
}
    29f4:	4618      	mov	r0, r3
    29f6:	3708      	adds	r7, #8
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}

000029fc <is_tail_of_identifier>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    29fc:	b580      	push	{r7, lr}
    29fe:	b082      	sub	sp, #8
    2a00:	af00      	add	r7, sp, #0
    2a02:	6078      	str	r0, [r7, #4]
    return is_head_of_identifier(lex) || is_digit(lex);
    2a04:	6878      	ldr	r0, [r7, #4]
    2a06:	f7ff ffdd 	bl	29c4 <is_head_of_identifier>
    2a0a:	4603      	mov	r3, r0
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d105      	bne.n	2a1c <is_tail_of_identifier+0x20>
    2a10:	6878      	ldr	r0, [r7, #4]
    2a12:	f7ff ff45 	bl	28a0 <is_digit>
    2a16:	4603      	mov	r3, r0
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d001      	beq.n	2a20 <is_tail_of_identifier+0x24>
    2a1c:	2301      	movs	r3, #1
    2a1e:	e000      	b.n	2a22 <is_tail_of_identifier+0x26>
    2a20:	2300      	movs	r3, #0
    2a22:	f003 0301 	and.w	r3, r3, #1
    2a26:	b2db      	uxtb	r3, r3
}
    2a28:	4618      	mov	r0, r3
    2a2a:	3708      	adds	r7, #8
    2a2c:	46bd      	mov	sp, r7
    2a2e:	bd80      	pop	{r7, pc}

00002a30 <next_char>:

STATIC void next_char(mp_lexer_t *lex) {
    2a30:	b580      	push	{r7, lr}
    2a32:	b082      	sub	sp, #8
    2a34:	af00      	add	r7, sp, #0
    2a36:	6078      	str	r0, [r7, #4]
    if (lex->chr0 == '\n') {
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	691b      	ldr	r3, [r3, #16]
    2a3c:	2b0a      	cmp	r3, #10
    2a3e:	d108      	bne.n	2a52 <next_char+0x22>
        // a new line
        ++lex->line;
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	69db      	ldr	r3, [r3, #28]
    2a44:	1c5a      	adds	r2, r3, #1
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	61da      	str	r2, [r3, #28]
        lex->column = 1;
    2a4a:	687b      	ldr	r3, [r7, #4]
    2a4c:	2201      	movs	r2, #1
    2a4e:	621a      	str	r2, [r3, #32]
    2a50:	e011      	b.n	2a76 <next_char+0x46>
    } else if (lex->chr0 == '\t') {
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	691b      	ldr	r3, [r3, #16]
    2a56:	2b09      	cmp	r3, #9
    2a58:	d108      	bne.n	2a6c <next_char+0x3c>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	6a1b      	ldr	r3, [r3, #32]
    2a5e:	3307      	adds	r3, #7
    2a60:	08db      	lsrs	r3, r3, #3
    2a62:	00db      	lsls	r3, r3, #3
    2a64:	1c5a      	adds	r2, r3, #1
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	621a      	str	r2, [r3, #32]
    2a6a:	e004      	b.n	2a76 <next_char+0x46>
    } else {
        // a character worth one column
        ++lex->column;
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	6a1b      	ldr	r3, [r3, #32]
    2a70:	1c5a      	adds	r2, r3, #1
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	621a      	str	r2, [r3, #32]
    }

    lex->chr0 = lex->chr1;
    2a76:	687b      	ldr	r3, [r7, #4]
    2a78:	695a      	ldr	r2, [r3, #20]
    2a7a:	687b      	ldr	r3, [r7, #4]
    2a7c:	611a      	str	r2, [r3, #16]
    lex->chr1 = lex->chr2;
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	699a      	ldr	r2, [r3, #24]
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	615a      	str	r2, [r3, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	689b      	ldr	r3, [r3, #8]
    2a8a:	687a      	ldr	r2, [r7, #4]
    2a8c:	6852      	ldr	r2, [r2, #4]
    2a8e:	4610      	mov	r0, r2
    2a90:	4798      	blx	r3
    2a92:	4602      	mov	r2, r0
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	619a      	str	r2, [r3, #24]

    if (lex->chr1 == '\r') {
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	695b      	ldr	r3, [r3, #20]
    2a9c:	2b0d      	cmp	r3, #13
    2a9e:	d10f      	bne.n	2ac0 <next_char+0x90>
        // CR is a new line, converted to LF
        lex->chr1 = '\n';
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	220a      	movs	r2, #10
    2aa4:	615a      	str	r2, [r3, #20]
        if (lex->chr2 == '\n') {
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	699b      	ldr	r3, [r3, #24]
    2aaa:	2b0a      	cmp	r3, #10
    2aac:	d108      	bne.n	2ac0 <next_char+0x90>
            // CR LF is a single new line, throw out the extra LF
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	689b      	ldr	r3, [r3, #8]
    2ab2:	687a      	ldr	r2, [r7, #4]
    2ab4:	6852      	ldr	r2, [r2, #4]
    2ab6:	4610      	mov	r0, r2
    2ab8:	4798      	blx	r3
    2aba:	4602      	mov	r2, r0
    2abc:	687b      	ldr	r3, [r7, #4]
    2abe:	619a      	str	r2, [r3, #24]
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    2ac0:	687b      	ldr	r3, [r7, #4]
    2ac2:	699b      	ldr	r3, [r3, #24]
    2ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2ac8:	d10b      	bne.n	2ae2 <next_char+0xb2>
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	695b      	ldr	r3, [r3, #20]
    2ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2ad2:	d006      	beq.n	2ae2 <next_char+0xb2>
    2ad4:	687b      	ldr	r3, [r7, #4]
    2ad6:	695b      	ldr	r3, [r3, #20]
    2ad8:	2b0a      	cmp	r3, #10
    2ada:	d002      	beq.n	2ae2 <next_char+0xb2>
        lex->chr2 = '\n';
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	220a      	movs	r2, #10
    2ae0:	619a      	str	r2, [r3, #24]
    }
}
    2ae2:	bf00      	nop
    2ae4:	3708      	adds	r7, #8
    2ae6:	46bd      	mov	sp, r7
    2ae8:	bd80      	pop	{r7, pc}
    2aea:	bf00      	nop

00002aec <indent_push>:

STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    2aec:	b580      	push	{r7, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
    2af4:	6039      	str	r1, [r7, #0]
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2afa:	687b      	ldr	r3, [r7, #4]
    2afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2afe:	429a      	cmp	r2, r3
    2b00:	d312      	bcc.n	2b28 <indent_push+0x3c>
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b06:	687b      	ldr	r3, [r7, #4]
    2b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b0a:	3308      	adds	r3, #8
    2b0c:	005b      	lsls	r3, r3, #1
    2b0e:	4619      	mov	r1, r3
    2b10:	4610      	mov	r0, r2
    2b12:	f7fd fc37 	bl	384 <m_realloc>
    2b16:	4602      	mov	r2, r0
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	635a      	str	r2, [r3, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b20:	f103 0208 	add.w	r2, r3, #8
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    lex->indent_level[lex->num_indent_level++] = indent;
    2b28:	687b      	ldr	r3, [r7, #4]
    2b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b30:	1c58      	adds	r0, r3, #1
    2b32:	6879      	ldr	r1, [r7, #4]
    2b34:	6308      	str	r0, [r1, #48]	; 0x30
    2b36:	005b      	lsls	r3, r3, #1
    2b38:	4413      	add	r3, r2
    2b3a:	683a      	ldr	r2, [r7, #0]
    2b3c:	b292      	uxth	r2, r2
    2b3e:	801a      	strh	r2, [r3, #0]
}
    2b40:	bf00      	nop
    2b42:	3708      	adds	r7, #8
    2b44:	46bd      	mov	sp, r7
    2b46:	bd80      	pop	{r7, pc}

00002b48 <indent_top>:

STATIC size_t indent_top(mp_lexer_t *lex) {
    2b48:	b480      	push	{r7}
    2b4a:	b083      	sub	sp, #12
    2b4c:	af00      	add	r7, sp, #0
    2b4e:	6078      	str	r0, [r7, #4]
    return lex->indent_level[lex->num_indent_level - 1];
    2b50:	687b      	ldr	r3, [r7, #4]
    2b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b54:	687b      	ldr	r3, [r7, #4]
    2b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2b5c:	3b01      	subs	r3, #1
    2b5e:	005b      	lsls	r3, r3, #1
    2b60:	4413      	add	r3, r2
    2b62:	881b      	ldrh	r3, [r3, #0]
}
    2b64:	4618      	mov	r0, r3
    2b66:	370c      	adds	r7, #12
    2b68:	46bd      	mov	sp, r7
    2b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b6e:	4770      	bx	lr

00002b70 <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    2b70:	b480      	push	{r7}
    2b72:	b083      	sub	sp, #12
    2b74:	af00      	add	r7, sp, #0
    2b76:	6078      	str	r0, [r7, #4]
    lex->num_indent_level -= 1;
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b7c:	1e5a      	subs	r2, r3, #1
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	631a      	str	r2, [r3, #48]	; 0x30
}
    2b82:	bf00      	nop
    2b84:	370c      	adds	r7, #12
    2b86:	46bd      	mov	sp, r7
    2b88:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b8c:	4770      	bx	lr
    2b8e:	bf00      	nop

00002b90 <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    2b90:	b590      	push	{r4, r7, lr}
    2b92:	b087      	sub	sp, #28
    2b94:	af00      	add	r7, sp, #0
    2b96:	60f8      	str	r0, [r7, #12]
    2b98:	60b9      	str	r1, [r7, #8]
    2b9a:	607a      	str	r2, [r7, #4]
    mp_uint_t num = 0;
    2b9c:	2300      	movs	r3, #0
    2b9e:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2ba0:	e018      	b.n	2bd4 <get_hex+0x44>
        next_char(lex);
    2ba2:	68f8      	ldr	r0, [r7, #12]
    2ba4:	f7ff ff44 	bl	2a30 <next_char>
        unichar c = CUR_CHAR(lex);
    2ba8:	68fb      	ldr	r3, [r7, #12]
    2baa:	691b      	ldr	r3, [r3, #16]
    2bac:	613b      	str	r3, [r7, #16]
        if (!unichar_isxdigit(c)) {
    2bae:	6938      	ldr	r0, [r7, #16]
    2bb0:	f7ff fc4e 	bl	2450 <unichar_isxdigit>
    2bb4:	4603      	mov	r3, r0
    2bb6:	f083 0301 	eor.w	r3, r3, #1
    2bba:	b2db      	uxtb	r3, r3
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d001      	beq.n	2bc4 <get_hex+0x34>
            return false;
    2bc0:	2300      	movs	r3, #0
    2bc2:	e010      	b.n	2be6 <get_hex+0x56>
        }
        num = (num << 4) + unichar_xdigit_value(c);
    2bc4:	697b      	ldr	r3, [r7, #20]
    2bc6:	011c      	lsls	r4, r3, #4
    2bc8:	6938      	ldr	r0, [r7, #16]
    2bca:	f7ff fcdf 	bl	258c <unichar_xdigit_value>
    2bce:	4603      	mov	r3, r0
    2bd0:	4423      	add	r3, r4
    2bd2:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2bd4:	68bb      	ldr	r3, [r7, #8]
    2bd6:	1e5a      	subs	r2, r3, #1
    2bd8:	60ba      	str	r2, [r7, #8]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d1e1      	bne.n	2ba2 <get_hex+0x12>
    }
    *result = num;
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	697a      	ldr	r2, [r7, #20]
    2be2:	601a      	str	r2, [r3, #0]
    return true;
    2be4:	2301      	movs	r3, #1
}
    2be6:	4618      	mov	r0, r3
    2be8:	371c      	adds	r7, #28
    2bea:	46bd      	mov	sp, r7
    2bec:	bd90      	pop	{r4, r7, pc}
    2bee:	bf00      	nop

00002bf0 <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b08a      	sub	sp, #40	; 0x28
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
    2bf8:	460b      	mov	r3, r1
    2bfa:	70fb      	strb	r3, [r7, #3]
    // get first quoting character
    char quote_char = '\'';
    2bfc:	2327      	movs	r3, #39	; 0x27
    2bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_char(lex, '\"')) {
    2c02:	2122      	movs	r1, #34	; 0x22
    2c04:	6878      	ldr	r0, [r7, #4]
    2c06:	f7ff fd67 	bl	26d8 <is_char>
    2c0a:	4603      	mov	r3, r0
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d002      	beq.n	2c16 <parse_string_literal+0x26>
        quote_char = '\"';
    2c10:	2322      	movs	r3, #34	; 0x22
    2c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    next_char(lex);
    2c16:	6878      	ldr	r0, [r7, #4]
    2c18:	f7ff ff0a 	bl	2a30 <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    2c1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c24:	4619      	mov	r1, r3
    2c26:	6878      	ldr	r0, [r7, #4]
    2c28:	f7ff fe00 	bl	282c <is_char_and>
    2c2c:	4603      	mov	r3, r0
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d008      	beq.n	2c44 <parse_string_literal+0x54>
        // triple quotes
        next_char(lex);
    2c32:	6878      	ldr	r0, [r7, #4]
    2c34:	f7ff fefc 	bl	2a30 <next_char>
        next_char(lex);
    2c38:	6878      	ldr	r0, [r7, #4]
    2c3a:	f7ff fef9 	bl	2a30 <next_char>
        num_quotes = 3;
    2c3e:	2303      	movs	r3, #3
    2c40:	623b      	str	r3, [r7, #32]
    2c42:	e001      	b.n	2c48 <parse_string_literal+0x58>
    } else {
        // single quotes
        num_quotes = 1;
    2c44:	2301      	movs	r3, #1
    2c46:	623b      	str	r3, [r7, #32]
    }

    size_t n_closing = 0;
    2c48:	2300      	movs	r3, #0
    2c4a:	61fb      	str	r3, [r7, #28]
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2c4c:	e1ac      	b.n	2fa8 <parse_string_literal+0x3b8>
        if (is_char(lex, quote_char)) {
    2c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c52:	4619      	mov	r1, r3
    2c54:	6878      	ldr	r0, [r7, #4]
    2c56:	f7ff fd3f 	bl	26d8 <is_char>
    2c5a:	4603      	mov	r3, r0
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d00c      	beq.n	2c7a <parse_string_literal+0x8a>
            n_closing += 1;
    2c60:	69fb      	ldr	r3, [r7, #28]
    2c62:	3301      	adds	r3, #1
    2c64:	61fb      	str	r3, [r7, #28]
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2c6c:	687b      	ldr	r3, [r7, #4]
    2c6e:	691b      	ldr	r3, [r3, #16]
    2c70:	4619      	mov	r1, r3
    2c72:	4610      	mov	r0, r2
    2c74:	f7fe fcba 	bl	15ec <vstr_add_char>
    2c78:	e193      	b.n	2fa2 <parse_string_literal+0x3b2>
        } else {
            n_closing = 0;
    2c7a:	2300      	movs	r3, #0
    2c7c:	61fb      	str	r3, [r7, #28]
            if (is_char(lex, '\\')) {
    2c7e:	215c      	movs	r1, #92	; 0x5c
    2c80:	6878      	ldr	r0, [r7, #4]
    2c82:	f7ff fd29 	bl	26d8 <is_char>
    2c86:	4603      	mov	r3, r0
    2c88:	2b00      	cmp	r3, #0
    2c8a:	f000 8180 	beq.w	2f8e <parse_string_literal+0x39e>
                next_char(lex);
    2c8e:	6878      	ldr	r0, [r7, #4]
    2c90:	f7ff fece 	bl	2a30 <next_char>
                unichar c = CUR_CHAR(lex);
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	691b      	ldr	r3, [r3, #16]
    2c98:	61bb      	str	r3, [r7, #24]
                if (is_raw) {
    2c9a:	78fb      	ldrb	r3, [r7, #3]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d006      	beq.n	2cae <parse_string_literal+0xbe>
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	3344      	adds	r3, #68	; 0x44
    2ca4:	215c      	movs	r1, #92	; 0x5c
    2ca6:	4618      	mov	r0, r3
    2ca8:	f7fe fca0 	bl	15ec <vstr_add_char>
    2cac:	e15b      	b.n	2f66 <parse_string_literal+0x376>
                } else {
                    switch (c) {
    2cae:	69bb      	ldr	r3, [r7, #24]
    2cb0:	3b0a      	subs	r3, #10
    2cb2:	2b6e      	cmp	r3, #110	; 0x6e
    2cb4:	f200 8129 	bhi.w	2f0a <parse_string_literal+0x31a>
    2cb8:	a201      	add	r2, pc, #4	; (adr r2, 2cc0 <parse_string_literal+0xd0>)
    2cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2cbe:	bf00      	nop
    2cc0:	00002e7d 	.word	0x00002e7d
    2cc4:	00002f0b 	.word	0x00002f0b
    2cc8:	00002f0b 	.word	0x00002f0b
    2ccc:	00002f0b 	.word	0x00002f0b
    2cd0:	00002f0b 	.word	0x00002f0b
    2cd4:	00002f0b 	.word	0x00002f0b
    2cd8:	00002f0b 	.word	0x00002f0b
    2cdc:	00002f0b 	.word	0x00002f0b
    2ce0:	00002f0b 	.word	0x00002f0b
    2ce4:	00002f0b 	.word	0x00002f0b
    2ce8:	00002f0b 	.word	0x00002f0b
    2cec:	00002f0b 	.word	0x00002f0b
    2cf0:	00002f0b 	.word	0x00002f0b
    2cf4:	00002f0b 	.word	0x00002f0b
    2cf8:	00002f0b 	.word	0x00002f0b
    2cfc:	00002f0b 	.word	0x00002f0b
    2d00:	00002f0b 	.word	0x00002f0b
    2d04:	00002f0b 	.word	0x00002f0b
    2d08:	00002f0b 	.word	0x00002f0b
    2d0c:	00002f0b 	.word	0x00002f0b
    2d10:	00002f0b 	.word	0x00002f0b
    2d14:	00002f0b 	.word	0x00002f0b
    2d18:	00002f0b 	.word	0x00002f0b
    2d1c:	00002f0b 	.word	0x00002f0b
    2d20:	00002f65 	.word	0x00002f65
    2d24:	00002f0b 	.word	0x00002f0b
    2d28:	00002f0b 	.word	0x00002f0b
    2d2c:	00002f0b 	.word	0x00002f0b
    2d30:	00002f0b 	.word	0x00002f0b
    2d34:	00002f65 	.word	0x00002f65
    2d38:	00002f0b 	.word	0x00002f0b
    2d3c:	00002f0b 	.word	0x00002f0b
    2d40:	00002f0b 	.word	0x00002f0b
    2d44:	00002f0b 	.word	0x00002f0b
    2d48:	00002f0b 	.word	0x00002f0b
    2d4c:	00002f0b 	.word	0x00002f0b
    2d50:	00002f0b 	.word	0x00002f0b
    2d54:	00002f0b 	.word	0x00002f0b
    2d58:	00002f0b 	.word	0x00002f0b
    2d5c:	00002f0b 	.word	0x00002f0b
    2d60:	00002f0b 	.word	0x00002f0b
    2d64:	00002f0b 	.word	0x00002f0b
    2d68:	00002f0b 	.word	0x00002f0b
    2d6c:	00002f0b 	.word	0x00002f0b
    2d70:	00002f0b 	.word	0x00002f0b
    2d74:	00002f0b 	.word	0x00002f0b
    2d78:	00002f0b 	.word	0x00002f0b
    2d7c:	00002f0b 	.word	0x00002f0b
    2d80:	00002f0b 	.word	0x00002f0b
    2d84:	00002f0b 	.word	0x00002f0b
    2d88:	00002f0b 	.word	0x00002f0b
    2d8c:	00002f0b 	.word	0x00002f0b
    2d90:	00002f0b 	.word	0x00002f0b
    2d94:	00002f0b 	.word	0x00002f0b
    2d98:	00002f0b 	.word	0x00002f0b
    2d9c:	00002f0b 	.word	0x00002f0b
    2da0:	00002f0b 	.word	0x00002f0b
    2da4:	00002f0b 	.word	0x00002f0b
    2da8:	00002f0b 	.word	0x00002f0b
    2dac:	00002f0b 	.word	0x00002f0b
    2db0:	00002f0b 	.word	0x00002f0b
    2db4:	00002f0b 	.word	0x00002f0b
    2db8:	00002f0b 	.word	0x00002f0b
    2dbc:	00002f0b 	.word	0x00002f0b
    2dc0:	00002f0b 	.word	0x00002f0b
    2dc4:	00002f0b 	.word	0x00002f0b
    2dc8:	00002f0b 	.word	0x00002f0b
    2dcc:	00002f0b 	.word	0x00002f0b
    2dd0:	00002f05 	.word	0x00002f05
    2dd4:	00002f0b 	.word	0x00002f0b
    2dd8:	00002f0b 	.word	0x00002f0b
    2ddc:	00002f0b 	.word	0x00002f0b
    2de0:	00002f0b 	.word	0x00002f0b
    2de4:	00002f0b 	.word	0x00002f0b
    2de8:	00002f0b 	.word	0x00002f0b
    2dec:	00002eaf 	.word	0x00002eaf
    2df0:	00002f0b 	.word	0x00002f0b
    2df4:	00002f0b 	.word	0x00002f0b
    2df8:	00002f0b 	.word	0x00002f0b
    2dfc:	00002f0b 	.word	0x00002f0b
    2e00:	00002f0b 	.word	0x00002f0b
    2e04:	00002f0b 	.word	0x00002f0b
    2e08:	00002f65 	.word	0x00002f65
    2e0c:	00002f0b 	.word	0x00002f0b
    2e10:	00002f0b 	.word	0x00002f0b
    2e14:	00002f0b 	.word	0x00002f0b
    2e18:	00002f0b 	.word	0x00002f0b
    2e1c:	00002e85 	.word	0x00002e85
    2e20:	00002e8b 	.word	0x00002e8b
    2e24:	00002f0b 	.word	0x00002f0b
    2e28:	00002f0b 	.word	0x00002f0b
    2e2c:	00002f0b 	.word	0x00002f0b
    2e30:	00002ea3 	.word	0x00002ea3
    2e34:	00002f0b 	.word	0x00002f0b
    2e38:	00002f0b 	.word	0x00002f0b
    2e3c:	00002f0b 	.word	0x00002f0b
    2e40:	00002f0b 	.word	0x00002f0b
    2e44:	00002f0b 	.word	0x00002f0b
    2e48:	00002f0b 	.word	0x00002f0b
    2e4c:	00002f0b 	.word	0x00002f0b
    2e50:	00002e97 	.word	0x00002e97
    2e54:	00002f0b 	.word	0x00002f0b
    2e58:	00002f0b 	.word	0x00002f0b
    2e5c:	00002f0b 	.word	0x00002f0b
    2e60:	00002ea9 	.word	0x00002ea9
    2e64:	00002f0b 	.word	0x00002f0b
    2e68:	00002e91 	.word	0x00002e91
    2e6c:	00002eaf 	.word	0x00002eaf
    2e70:	00002e9d 	.word	0x00002e9d
    2e74:	00002f0b 	.word	0x00002f0b
    2e78:	00002ec5 	.word	0x00002ec5
                        // note: "c" can never be MP_LEXER_EOF because next_char
                        // always inserts a newline at the end of the input stream
                        case '\n': c = MP_LEXER_EOF; break; // backslash escape the newline, just ignore it
    2e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e80:	61bb      	str	r3, [r7, #24]
    2e82:	e070      	b.n	2f66 <parse_string_literal+0x376>
                        case '\\': break;
                        case '\'': break;
                        case '"': break;
                        case 'a': c = 0x07; break;
    2e84:	2307      	movs	r3, #7
    2e86:	61bb      	str	r3, [r7, #24]
    2e88:	e06d      	b.n	2f66 <parse_string_literal+0x376>
                        case 'b': c = 0x08; break;
    2e8a:	2308      	movs	r3, #8
    2e8c:	61bb      	str	r3, [r7, #24]
    2e8e:	e06a      	b.n	2f66 <parse_string_literal+0x376>
                        case 't': c = 0x09; break;
    2e90:	2309      	movs	r3, #9
    2e92:	61bb      	str	r3, [r7, #24]
    2e94:	e067      	b.n	2f66 <parse_string_literal+0x376>
                        case 'n': c = 0x0a; break;
    2e96:	230a      	movs	r3, #10
    2e98:	61bb      	str	r3, [r7, #24]
    2e9a:	e064      	b.n	2f66 <parse_string_literal+0x376>
                        case 'v': c = 0x0b; break;
    2e9c:	230b      	movs	r3, #11
    2e9e:	61bb      	str	r3, [r7, #24]
    2ea0:	e061      	b.n	2f66 <parse_string_literal+0x376>
                        case 'f': c = 0x0c; break;
    2ea2:	230c      	movs	r3, #12
    2ea4:	61bb      	str	r3, [r7, #24]
    2ea6:	e05e      	b.n	2f66 <parse_string_literal+0x376>
                        case 'r': c = 0x0d; break;
    2ea8:	230d      	movs	r3, #13
    2eaa:	61bb      	str	r3, [r7, #24]
    2eac:	e05b      	b.n	2f66 <parse_string_literal+0x376>
                        case 'u':
                        case 'U':
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    2eae:	687b      	ldr	r3, [r7, #4]
    2eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2eb2:	2b0b      	cmp	r3, #11
    2eb4:	d106      	bne.n	2ec4 <parse_string_literal+0x2d4>
                                // b'\u1234' == b'\\u1234'
                                vstr_add_char(&lex->vstr, '\\');
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	3344      	adds	r3, #68	; 0x44
    2eba:	215c      	movs	r1, #92	; 0x5c
    2ebc:	4618      	mov	r0, r3
    2ebe:	f7fe fb95 	bl	15ec <vstr_add_char>
                                break;
    2ec2:	e050      	b.n	2f66 <parse_string_literal+0x376>
                            }
                            // Otherwise fall through.
                        case 'x':
                        {
                            mp_uint_t num = 0;
    2ec4:	2300      	movs	r3, #0
    2ec6:	60fb      	str	r3, [r7, #12]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    2ec8:	69bb      	ldr	r3, [r7, #24]
    2eca:	2b78      	cmp	r3, #120	; 0x78
    2ecc:	d006      	beq.n	2edc <parse_string_literal+0x2ec>
    2ece:	69bb      	ldr	r3, [r7, #24]
    2ed0:	2b75      	cmp	r3, #117	; 0x75
    2ed2:	d101      	bne.n	2ed8 <parse_string_literal+0x2e8>
    2ed4:	2304      	movs	r3, #4
    2ed6:	e002      	b.n	2ede <parse_string_literal+0x2ee>
    2ed8:	2308      	movs	r3, #8
    2eda:	e000      	b.n	2ede <parse_string_literal+0x2ee>
    2edc:	2302      	movs	r3, #2
    2ede:	f107 020c 	add.w	r2, r7, #12
    2ee2:	4619      	mov	r1, r3
    2ee4:	6878      	ldr	r0, [r7, #4]
    2ee6:	f7ff fe53 	bl	2b90 <get_hex>
    2eea:	4603      	mov	r3, r0
    2eec:	f083 0301 	eor.w	r3, r3, #1
    2ef0:	b2db      	uxtb	r3, r3
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d002      	beq.n	2efc <parse_string_literal+0x30c>
                                // not enough hex chars for escape sequence
                                lex->tok_kind = MP_TOKEN_INVALID;
    2ef6:	687b      	ldr	r3, [r7, #4]
    2ef8:	2201      	movs	r2, #1
    2efa:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                            c = num;
    2efc:	68fb      	ldr	r3, [r7, #12]
    2efe:	61bb      	str	r3, [r7, #24]
                            break;
    2f00:	bf00      	nop
    2f02:	e030      	b.n	2f66 <parse_string_literal+0x376>
                            // Supporting '\N{LATIN SMALL LETTER A}' == 'a' would require keeping the
                            // entire Unicode name table in the core. As of Unicode 6.3.0, that's nearly
                            // 3MB of text; even gzip-compressed and with minimal structure, it'll take
                            // roughly half a meg of storage. This form of Unicode escape may be added
                            // later on, but it's definitely not a priority right now. -- CJA 20140607
                            mp_raise_NotImplementedError("unicode name escapes");
    2f04:	483e      	ldr	r0, [pc, #248]	; (3000 <parse_string_literal+0x410>)
    2f06:	f00a f863 	bl	cfd0 <mp_raise_NotImplementedError>
                            break;
                        default:
                            if (c >= '0' && c <= '7') {
    2f0a:	69bb      	ldr	r3, [r7, #24]
    2f0c:	2b2f      	cmp	r3, #47	; 0x2f
    2f0e:	d922      	bls.n	2f56 <parse_string_literal+0x366>
    2f10:	69bb      	ldr	r3, [r7, #24]
    2f12:	2b37      	cmp	r3, #55	; 0x37
    2f14:	d81f      	bhi.n	2f56 <parse_string_literal+0x366>
                                // Octal sequence, 1-3 chars
                                size_t digits = 3;
    2f16:	2303      	movs	r3, #3
    2f18:	617b      	str	r3, [r7, #20]
                                mp_uint_t num = c - '0';
    2f1a:	69bb      	ldr	r3, [r7, #24]
    2f1c:	3b30      	subs	r3, #48	; 0x30
    2f1e:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2f20:	e009      	b.n	2f36 <parse_string_literal+0x346>
                                    next_char(lex);
    2f22:	6878      	ldr	r0, [r7, #4]
    2f24:	f7ff fd84 	bl	2a30 <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    2f28:	693b      	ldr	r3, [r7, #16]
    2f2a:	00da      	lsls	r2, r3, #3
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	691b      	ldr	r3, [r3, #16]
    2f30:	4413      	add	r3, r2
    2f32:	3b30      	subs	r3, #48	; 0x30
    2f34:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2f36:	6878      	ldr	r0, [r7, #4]
    2f38:	f7ff fcec 	bl	2914 <is_following_odigit>
    2f3c:	4603      	mov	r3, r0
    2f3e:	2b00      	cmp	r3, #0
    2f40:	d005      	beq.n	2f4e <parse_string_literal+0x35e>
    2f42:	697b      	ldr	r3, [r7, #20]
    2f44:	3b01      	subs	r3, #1
    2f46:	617b      	str	r3, [r7, #20]
    2f48:	697b      	ldr	r3, [r7, #20]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d1e9      	bne.n	2f22 <parse_string_literal+0x332>
                                }
                                c = num;
    2f4e:	693b      	ldr	r3, [r7, #16]
    2f50:	61bb      	str	r3, [r7, #24]
                            if (c >= '0' && c <= '7') {
    2f52:	bf00      	nop
                            } else {
                                // unrecognised escape character; CPython lets this through verbatim as '\' and then the character
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
    2f54:	e007      	b.n	2f66 <parse_string_literal+0x376>
                                vstr_add_char(&lex->vstr, '\\');
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	3344      	adds	r3, #68	; 0x44
    2f5a:	215c      	movs	r1, #92	; 0x5c
    2f5c:	4618      	mov	r0, r3
    2f5e:	f7fe fb45 	bl	15ec <vstr_add_char>
                            break;
    2f62:	e000      	b.n	2f66 <parse_string_literal+0x376>
                        case '"': break;
    2f64:	bf00      	nop
                    }
                }
                if (c != MP_LEXER_EOF) {
    2f66:	69bb      	ldr	r3, [r7, #24]
    2f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2f6c:	d019      	beq.n	2fa2 <parse_string_literal+0x3b2>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    2f6e:	69bb      	ldr	r3, [r7, #24]
    2f70:	2bff      	cmp	r3, #255	; 0xff
    2f72:	d808      	bhi.n	2f86 <parse_string_literal+0x396>
                            vstr_add_byte(&lex->vstr, c);
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	3344      	adds	r3, #68	; 0x44
    2f78:	69ba      	ldr	r2, [r7, #24]
    2f7a:	b2d2      	uxtb	r2, r2
    2f7c:	4611      	mov	r1, r2
    2f7e:	4618      	mov	r0, r3
    2f80:	f7fe fb22 	bl	15c8 <vstr_add_byte>
    2f84:	e00d      	b.n	2fa2 <parse_string_literal+0x3b2>
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	2201      	movs	r2, #1
    2f8a:	641a      	str	r2, [r3, #64]	; 0x40
    2f8c:	e009      	b.n	2fa2 <parse_string_literal+0x3b2>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	691b      	ldr	r3, [r3, #16]
    2f98:	b2db      	uxtb	r3, r3
    2f9a:	4619      	mov	r1, r3
    2f9c:	4610      	mov	r0, r2
    2f9e:	f7fe fb13 	bl	15c8 <vstr_add_byte>
            }
        }
        next_char(lex);
    2fa2:	6878      	ldr	r0, [r7, #4]
    2fa4:	f7ff fd44 	bl	2a30 <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2fa8:	6878      	ldr	r0, [r7, #4]
    2faa:	f7ff fb71 	bl	2690 <is_end>
    2fae:	4603      	mov	r3, r0
    2fb0:	f083 0301 	eor.w	r3, r3, #1
    2fb4:	b2db      	uxtb	r3, r3
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d011      	beq.n	2fde <parse_string_literal+0x3ee>
    2fba:	6a3b      	ldr	r3, [r7, #32]
    2fbc:	2b01      	cmp	r3, #1
    2fbe:	d809      	bhi.n	2fd4 <parse_string_literal+0x3e4>
    2fc0:	210a      	movs	r1, #10
    2fc2:	6878      	ldr	r0, [r7, #4]
    2fc4:	f7ff fb88 	bl	26d8 <is_char>
    2fc8:	4603      	mov	r3, r0
    2fca:	f083 0301 	eor.w	r3, r3, #1
    2fce:	b2db      	uxtb	r3, r3
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	d004      	beq.n	2fde <parse_string_literal+0x3ee>
    2fd4:	69fa      	ldr	r2, [r7, #28]
    2fd6:	6a3b      	ldr	r3, [r7, #32]
    2fd8:	429a      	cmp	r2, r3
    2fda:	f4ff ae38 	bcc.w	2c4e <parse_string_literal+0x5e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    2fde:	69fa      	ldr	r2, [r7, #28]
    2fe0:	6a3b      	ldr	r3, [r7, #32]
    2fe2:	429a      	cmp	r2, r3
    2fe4:	d202      	bcs.n	2fec <parse_string_literal+0x3fc>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    2fe6:	687b      	ldr	r3, [r7, #4]
    2fe8:	2203      	movs	r2, #3
    2fea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	3344      	adds	r3, #68	; 0x44
    2ff0:	69f9      	ldr	r1, [r7, #28]
    2ff2:	4618      	mov	r0, r3
    2ff4:	f7fe fba4 	bl	1740 <vstr_cut_tail_bytes>
}
    2ff8:	bf00      	nop
    2ffa:	3728      	adds	r7, #40	; 0x28
    2ffc:	46bd      	mov	sp, r7
    2ffe:	bd80      	pop	{r7, pc}
    3000:	0001db54 	.word	0x0001db54

00003004 <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    3004:	b580      	push	{r7, lr}
    3006:	b084      	sub	sp, #16
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
    300c:	460b      	mov	r3, r1
    300e:	70fb      	strb	r3, [r7, #3]
    bool had_physical_newline = false;
    3010:	2300      	movs	r3, #0
    3012:	73fb      	strb	r3, [r7, #15]
    while (!is_end(lex)) {
    3014:	e04b      	b.n	30ae <skip_whitespace+0xaa>
        if (is_physical_newline(lex)) {
    3016:	6878      	ldr	r0, [r7, #4]
    3018:	f7ff fb4c 	bl	26b4 <is_physical_newline>
    301c:	4603      	mov	r3, r0
    301e:	2b00      	cmp	r3, #0
    3020:	d00c      	beq.n	303c <skip_whitespace+0x38>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    3022:	78fb      	ldrb	r3, [r7, #3]
    3024:	2b00      	cmp	r3, #0
    3026:	d003      	beq.n	3030 <skip_whitespace+0x2c>
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    302c:	2b00      	cmp	r3, #0
    302e:	d048      	beq.n	30c2 <skip_whitespace+0xbe>
                break;
            }
            had_physical_newline = true;
    3030:	2301      	movs	r3, #1
    3032:	73fb      	strb	r3, [r7, #15]
            next_char(lex);
    3034:	6878      	ldr	r0, [r7, #4]
    3036:	f7ff fcfb 	bl	2a30 <next_char>
    303a:	e038      	b.n	30ae <skip_whitespace+0xaa>
        } else if (is_whitespace(lex)) {
    303c:	6878      	ldr	r0, [r7, #4]
    303e:	f7ff fc13 	bl	2868 <is_whitespace>
    3042:	4603      	mov	r3, r0
    3044:	2b00      	cmp	r3, #0
    3046:	d003      	beq.n	3050 <skip_whitespace+0x4c>
            next_char(lex);
    3048:	6878      	ldr	r0, [r7, #4]
    304a:	f7ff fcf1 	bl	2a30 <next_char>
    304e:	e02e      	b.n	30ae <skip_whitespace+0xaa>
        } else if (is_char(lex, '#')) {
    3050:	2123      	movs	r1, #35	; 0x23
    3052:	6878      	ldr	r0, [r7, #4]
    3054:	f7ff fb40 	bl	26d8 <is_char>
    3058:	4603      	mov	r3, r0
    305a:	2b00      	cmp	r3, #0
    305c:	d019      	beq.n	3092 <skip_whitespace+0x8e>
            next_char(lex);
    305e:	6878      	ldr	r0, [r7, #4]
    3060:	f7ff fce6 	bl	2a30 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3064:	e002      	b.n	306c <skip_whitespace+0x68>
                next_char(lex);
    3066:	6878      	ldr	r0, [r7, #4]
    3068:	f7ff fce2 	bl	2a30 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    306c:	6878      	ldr	r0, [r7, #4]
    306e:	f7ff fb0f 	bl	2690 <is_end>
    3072:	4603      	mov	r3, r0
    3074:	f083 0301 	eor.w	r3, r3, #1
    3078:	b2db      	uxtb	r3, r3
    307a:	2b00      	cmp	r3, #0
    307c:	d017      	beq.n	30ae <skip_whitespace+0xaa>
    307e:	6878      	ldr	r0, [r7, #4]
    3080:	f7ff fb18 	bl	26b4 <is_physical_newline>
    3084:	4603      	mov	r3, r0
    3086:	f083 0301 	eor.w	r3, r3, #1
    308a:	b2db      	uxtb	r3, r3
    308c:	2b00      	cmp	r3, #0
    308e:	d1ea      	bne.n	3066 <skip_whitespace+0x62>
    3090:	e00d      	b.n	30ae <skip_whitespace+0xaa>
            }
            // had_physical_newline will be set on next loop
        } else if (is_char_and(lex, '\\', '\n')) {
    3092:	220a      	movs	r2, #10
    3094:	215c      	movs	r1, #92	; 0x5c
    3096:	6878      	ldr	r0, [r7, #4]
    3098:	f7ff fbc8 	bl	282c <is_char_and>
    309c:	4603      	mov	r3, r0
    309e:	2b00      	cmp	r3, #0
    30a0:	d011      	beq.n	30c6 <skip_whitespace+0xc2>
            // line-continuation, so don't set had_physical_newline
            next_char(lex);
    30a2:	6878      	ldr	r0, [r7, #4]
    30a4:	f7ff fcc4 	bl	2a30 <next_char>
            next_char(lex);
    30a8:	6878      	ldr	r0, [r7, #4]
    30aa:	f7ff fcc1 	bl	2a30 <next_char>
    while (!is_end(lex)) {
    30ae:	6878      	ldr	r0, [r7, #4]
    30b0:	f7ff faee 	bl	2690 <is_end>
    30b4:	4603      	mov	r3, r0
    30b6:	f083 0301 	eor.w	r3, r3, #1
    30ba:	b2db      	uxtb	r3, r3
    30bc:	2b00      	cmp	r3, #0
    30be:	d1aa      	bne.n	3016 <skip_whitespace+0x12>
    30c0:	e002      	b.n	30c8 <skip_whitespace+0xc4>
                break;
    30c2:	bf00      	nop
    30c4:	e000      	b.n	30c8 <skip_whitespace+0xc4>
        } else {
            break;
    30c6:	bf00      	nop
        }
    }
    return had_physical_newline;
    30c8:	7bfb      	ldrb	r3, [r7, #15]
}
    30ca:	4618      	mov	r0, r3
    30cc:	3710      	adds	r7, #16
    30ce:	46bd      	mov	sp, r7
    30d0:	bd80      	pop	{r7, pc}
    30d2:	bf00      	nop

000030d4 <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    30d4:	b580      	push	{r7, lr}
    30d6:	b08e      	sub	sp, #56	; 0x38
    30d8:	af00      	add	r7, sp, #0
    30da:	6078      	str	r0, [r7, #4]
    // start new token text
    vstr_reset(&lex->vstr);
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	3344      	adds	r3, #68	; 0x44
    30e0:	4618      	mov	r0, r3
    30e2:	f7ff fac7 	bl	2674 <vstr_reset>

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    30e6:	2100      	movs	r1, #0
    30e8:	6878      	ldr	r0, [r7, #4]
    30ea:	f7ff ff8b 	bl	3004 <skip_whitespace>
    30ee:	4603      	mov	r3, r0
    30f0:	75fb      	strb	r3, [r7, #23]

    // set token source information
    lex->tok_line = lex->line;
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	69da      	ldr	r2, [r3, #28]
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	639a      	str	r2, [r3, #56]	; 0x38
    lex->tok_column = lex->column;
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	6a1a      	ldr	r2, [r3, #32]
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	63da      	str	r2, [r3, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3106:	2b00      	cmp	r3, #0
    3108:	da08      	bge.n	311c <mp_lexer_to_next+0x48>
        lex->tok_kind = MP_TOKEN_DEDENT;
    310a:	687b      	ldr	r3, [r7, #4]
    310c:	2206      	movs	r2, #6
    310e:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent += 1;
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3114:	1c5a      	adds	r2, r3, #1
    3116:	687b      	ldr	r3, [r7, #4]
    3118:	625a      	str	r2, [r3, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    311a:	e2b7      	b.n	368c <mp_lexer_to_next+0x5b8>
    } else if (lex->emit_dent > 0) {
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3120:	2b00      	cmp	r3, #0
    3122:	dd08      	ble.n	3136 <mp_lexer_to_next+0x62>
        lex->tok_kind = MP_TOKEN_INDENT;
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	2205      	movs	r2, #5
    3128:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent -= 1;
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    312e:	1e5a      	subs	r2, r3, #1
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	625a      	str	r2, [r3, #36]	; 0x24
}
    3134:	e2aa      	b.n	368c <mp_lexer_to_next+0x5b8>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3136:	7dfb      	ldrb	r3, [r7, #23]
    3138:	2b00      	cmp	r3, #0
    313a:	d03e      	beq.n	31ba <mp_lexer_to_next+0xe6>
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3140:	2b00      	cmp	r3, #0
    3142:	d13a      	bne.n	31ba <mp_lexer_to_next+0xe6>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	2204      	movs	r2, #4
    3148:	641a      	str	r2, [r3, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	6a1b      	ldr	r3, [r3, #32]
    314e:	3b01      	subs	r3, #1
    3150:	613b      	str	r3, [r7, #16]
        if (num_spaces == indent_top(lex)) {
    3152:	6878      	ldr	r0, [r7, #4]
    3154:	f7ff fcf8 	bl	2b48 <indent_top>
    3158:	4602      	mov	r2, r0
    315a:	693b      	ldr	r3, [r7, #16]
    315c:	429a      	cmp	r2, r3
    315e:	f000 828e 	beq.w	367e <mp_lexer_to_next+0x5aa>
        } else if (num_spaces > indent_top(lex)) {
    3162:	6878      	ldr	r0, [r7, #4]
    3164:	f7ff fcf0 	bl	2b48 <indent_top>
    3168:	4602      	mov	r2, r0
    316a:	693b      	ldr	r3, [r7, #16]
    316c:	429a      	cmp	r2, r3
    316e:	d211      	bcs.n	3194 <mp_lexer_to_next+0xc0>
            indent_push(lex, num_spaces);
    3170:	6939      	ldr	r1, [r7, #16]
    3172:	6878      	ldr	r0, [r7, #4]
    3174:	f7ff fcba 	bl	2aec <indent_push>
            lex->emit_dent += 1;
    3178:	687b      	ldr	r3, [r7, #4]
    317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    317c:	1c5a      	adds	r2, r3, #1
    317e:	687b      	ldr	r3, [r7, #4]
    3180:	625a      	str	r2, [r3, #36]	; 0x24
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3182:	e27c      	b.n	367e <mp_lexer_to_next+0x5aa>
                indent_pop(lex);
    3184:	6878      	ldr	r0, [r7, #4]
    3186:	f7ff fcf3 	bl	2b70 <indent_pop>
                lex->emit_dent -= 1;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    318e:	1e5a      	subs	r2, r3, #1
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	625a      	str	r2, [r3, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    3194:	6878      	ldr	r0, [r7, #4]
    3196:	f7ff fcd7 	bl	2b48 <indent_top>
    319a:	4602      	mov	r2, r0
    319c:	693b      	ldr	r3, [r7, #16]
    319e:	429a      	cmp	r2, r3
    31a0:	d8f0      	bhi.n	3184 <mp_lexer_to_next+0xb0>
            if (num_spaces != indent_top(lex)) {
    31a2:	6878      	ldr	r0, [r7, #4]
    31a4:	f7ff fcd0 	bl	2b48 <indent_top>
    31a8:	4602      	mov	r2, r0
    31aa:	693b      	ldr	r3, [r7, #16]
    31ac:	429a      	cmp	r2, r3
    31ae:	f000 8266 	beq.w	367e <mp_lexer_to_next+0x5aa>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	2202      	movs	r2, #2
    31b6:	641a      	str	r2, [r3, #64]	; 0x40
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    31b8:	e261      	b.n	367e <mp_lexer_to_next+0x5aa>
    } else if (is_end(lex)) {
    31ba:	6878      	ldr	r0, [r7, #4]
    31bc:	f7ff fa68 	bl	2690 <is_end>
    31c0:	4603      	mov	r3, r0
    31c2:	2b00      	cmp	r3, #0
    31c4:	d003      	beq.n	31ce <mp_lexer_to_next+0xfa>
        lex->tok_kind = MP_TOKEN_END;
    31c6:	687b      	ldr	r3, [r7, #4]
    31c8:	2200      	movs	r2, #0
    31ca:	641a      	str	r2, [r3, #64]	; 0x40
}
    31cc:	e25e      	b.n	368c <mp_lexer_to_next+0x5b8>
    } else if (is_string_or_bytes(lex)) {
    31ce:	6878      	ldr	r0, [r7, #4]
    31d0:	f7ff fbb8 	bl	2944 <is_string_or_bytes>
    31d4:	4603      	mov	r3, r0
    31d6:	2b00      	cmp	r3, #0
    31d8:	d06d      	beq.n	32b6 <mp_lexer_to_next+0x1e2>
        lex->tok_kind = MP_TOKEN_END;
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	2200      	movs	r2, #0
    31de:	641a      	str	r2, [r3, #64]	; 0x40
            bool is_raw = false;
    31e0:	2300      	movs	r3, #0
    31e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            mp_token_kind_t kind = MP_TOKEN_STRING;
    31e6:	230a      	movs	r3, #10
    31e8:	633b      	str	r3, [r7, #48]	; 0x30
            int n_char = 0;
    31ea:	2300      	movs	r3, #0
    31ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (is_char(lex, 'u')) {
    31ee:	2175      	movs	r1, #117	; 0x75
    31f0:	6878      	ldr	r0, [r7, #4]
    31f2:	f7ff fa71 	bl	26d8 <is_char>
    31f6:	4603      	mov	r3, r0
    31f8:	2b00      	cmp	r3, #0
    31fa:	d002      	beq.n	3202 <mp_lexer_to_next+0x12e>
                n_char = 1;
    31fc:	2301      	movs	r3, #1
    31fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    3200:	e02e      	b.n	3260 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'b')) {
    3202:	2162      	movs	r1, #98	; 0x62
    3204:	6878      	ldr	r0, [r7, #4]
    3206:	f7ff fa67 	bl	26d8 <is_char>
    320a:	4603      	mov	r3, r0
    320c:	2b00      	cmp	r3, #0
    320e:	d010      	beq.n	3232 <mp_lexer_to_next+0x15e>
                kind = MP_TOKEN_BYTES;
    3210:	230b      	movs	r3, #11
    3212:	633b      	str	r3, [r7, #48]	; 0x30
                n_char = 1;
    3214:	2301      	movs	r3, #1
    3216:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'r')) {
    3218:	2172      	movs	r1, #114	; 0x72
    321a:	6878      	ldr	r0, [r7, #4]
    321c:	f7ff fab6 	bl	278c <is_char_following>
    3220:	4603      	mov	r3, r0
    3222:	2b00      	cmp	r3, #0
    3224:	d01c      	beq.n	3260 <mp_lexer_to_next+0x18c>
                    is_raw = true;
    3226:	2301      	movs	r3, #1
    3228:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    n_char = 2;
    322c:	2302      	movs	r3, #2
    322e:	62fb      	str	r3, [r7, #44]	; 0x2c
    3230:	e016      	b.n	3260 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'r')) {
    3232:	2172      	movs	r1, #114	; 0x72
    3234:	6878      	ldr	r0, [r7, #4]
    3236:	f7ff fa4f 	bl	26d8 <is_char>
    323a:	4603      	mov	r3, r0
    323c:	2b00      	cmp	r3, #0
    323e:	d00f      	beq.n	3260 <mp_lexer_to_next+0x18c>
                is_raw = true;
    3240:	2301      	movs	r3, #1
    3242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                n_char = 1;
    3246:	2301      	movs	r3, #1
    3248:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'b')) {
    324a:	2162      	movs	r1, #98	; 0x62
    324c:	6878      	ldr	r0, [r7, #4]
    324e:	f7ff fa9d 	bl	278c <is_char_following>
    3252:	4603      	mov	r3, r0
    3254:	2b00      	cmp	r3, #0
    3256:	d003      	beq.n	3260 <mp_lexer_to_next+0x18c>
                    kind = MP_TOKEN_BYTES;
    3258:	230b      	movs	r3, #11
    325a:	633b      	str	r3, [r7, #48]	; 0x30
                    n_char = 2;
    325c:	2302      	movs	r3, #2
    325e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (lex->tok_kind == MP_TOKEN_END) {
    3260:	687b      	ldr	r3, [r7, #4]
    3262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3264:	2b00      	cmp	r3, #0
    3266:	d103      	bne.n	3270 <mp_lexer_to_next+0x19c>
                lex->tok_kind = kind;
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    326c:	641a      	str	r2, [r3, #64]	; 0x40
    326e:	e005      	b.n	327c <mp_lexer_to_next+0x1a8>
            } else if (lex->tok_kind != kind) {
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3276:	429a      	cmp	r2, r3
    3278:	f040 8203 	bne.w	3682 <mp_lexer_to_next+0x5ae>
            if (n_char != 0) {
    327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    327e:	2b00      	cmp	r3, #0
    3280:	d008      	beq.n	3294 <mp_lexer_to_next+0x1c0>
                next_char(lex);
    3282:	6878      	ldr	r0, [r7, #4]
    3284:	f7ff fbd4 	bl	2a30 <next_char>
                if (n_char == 2) {
    3288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    328a:	2b02      	cmp	r3, #2
    328c:	d102      	bne.n	3294 <mp_lexer_to_next+0x1c0>
                    next_char(lex);
    328e:	6878      	ldr	r0, [r7, #4]
    3290:	f7ff fbce 	bl	2a30 <next_char>
            parse_string_literal(lex, is_raw);
    3294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    3298:	4619      	mov	r1, r3
    329a:	6878      	ldr	r0, [r7, #4]
    329c:	f7ff fca8 	bl	2bf0 <parse_string_literal>
            skip_whitespace(lex, true);
    32a0:	2101      	movs	r1, #1
    32a2:	6878      	ldr	r0, [r7, #4]
    32a4:	f7ff feae 	bl	3004 <skip_whitespace>
        } while (is_string_or_bytes(lex));
    32a8:	6878      	ldr	r0, [r7, #4]
    32aa:	f7ff fb4b 	bl	2944 <is_string_or_bytes>
    32ae:	4603      	mov	r3, r0
    32b0:	2b00      	cmp	r3, #0
    32b2:	d195      	bne.n	31e0 <mp_lexer_to_next+0x10c>
}
    32b4:	e1ea      	b.n	368c <mp_lexer_to_next+0x5b8>
    } else if (is_head_of_identifier(lex)) {
    32b6:	6878      	ldr	r0, [r7, #4]
    32b8:	f7ff fb84 	bl	29c4 <is_head_of_identifier>
    32bc:	4603      	mov	r3, r0
    32be:	2b00      	cmp	r3, #0
    32c0:	d061      	beq.n	3386 <mp_lexer_to_next+0x2b2>
        lex->tok_kind = MP_TOKEN_NAME;
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	2207      	movs	r2, #7
    32c6:	641a      	str	r2, [r3, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    32c8:	687b      	ldr	r3, [r7, #4]
    32ca:	f103 0244 	add.w	r2, r3, #68	; 0x44
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	691b      	ldr	r3, [r3, #16]
    32d2:	b2db      	uxtb	r3, r3
    32d4:	4619      	mov	r1, r3
    32d6:	4610      	mov	r0, r2
    32d8:	f7fe f976 	bl	15c8 <vstr_add_byte>
        next_char(lex);
    32dc:	6878      	ldr	r0, [r7, #4]
    32de:	f7ff fba7 	bl	2a30 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    32e2:	e00c      	b.n	32fe <mp_lexer_to_next+0x22a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	f103 0244 	add.w	r2, r3, #68	; 0x44
    32ea:	687b      	ldr	r3, [r7, #4]
    32ec:	691b      	ldr	r3, [r3, #16]
    32ee:	b2db      	uxtb	r3, r3
    32f0:	4619      	mov	r1, r3
    32f2:	4610      	mov	r0, r2
    32f4:	f7fe f968 	bl	15c8 <vstr_add_byte>
            next_char(lex);
    32f8:	6878      	ldr	r0, [r7, #4]
    32fa:	f7ff fb99 	bl	2a30 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    32fe:	6878      	ldr	r0, [r7, #4]
    3300:	f7ff f9c6 	bl	2690 <is_end>
    3304:	4603      	mov	r3, r0
    3306:	f083 0301 	eor.w	r3, r3, #1
    330a:	b2db      	uxtb	r3, r3
    330c:	2b00      	cmp	r3, #0
    330e:	d005      	beq.n	331c <mp_lexer_to_next+0x248>
    3310:	6878      	ldr	r0, [r7, #4]
    3312:	f7ff fb73 	bl	29fc <is_tail_of_identifier>
    3316:	4603      	mov	r3, r0
    3318:	2b00      	cmp	r3, #0
    331a:	d1e3      	bne.n	32e4 <mp_lexer_to_next+0x210>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	3344      	adds	r3, #68	; 0x44
    3320:	4618      	mov	r0, r3
    3322:	f7fe f935 	bl	1590 <vstr_null_terminated_str>
    3326:	60f8      	str	r0, [r7, #12]
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    3328:	2300      	movs	r3, #0
    332a:	62bb      	str	r3, [r7, #40]	; 0x28
    332c:	e027      	b.n	337e <mp_lexer_to_next+0x2aa>
            int cmp = strcmp(s, tok_kw[i]);
    332e:	4aa7      	ldr	r2, [pc, #668]	; (35cc <mp_lexer_to_next+0x4f8>)
    3330:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3336:	4619      	mov	r1, r3
    3338:	68f8      	ldr	r0, [r7, #12]
    333a:	f018 fe3f 	bl	1bfbc <strcmp>
    333e:	60b8      	str	r0, [r7, #8]
            if (cmp == 0) {
    3340:	68bb      	ldr	r3, [r7, #8]
    3342:	2b00      	cmp	r3, #0
    3344:	d114      	bne.n	3370 <mp_lexer_to_next+0x29c>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    3346:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3348:	f103 020d 	add.w	r2, r3, #13
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	641a      	str	r2, [r3, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    3350:	687b      	ldr	r3, [r7, #4]
    3352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3354:	2b10      	cmp	r3, #16
    3356:	f040 8196 	bne.w	3686 <mp_lexer_to_next+0x5b2>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    335a:	4b9d      	ldr	r3, [pc, #628]	; (35d0 <mp_lexer_to_next+0x4fc>)
    335c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
    3360:	2b00      	cmp	r3, #0
    3362:	d101      	bne.n	3368 <mp_lexer_to_next+0x294>
    3364:	220f      	movs	r2, #15
    3366:	e000      	b.n	336a <mp_lexer_to_next+0x296>
    3368:	220d      	movs	r2, #13
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	641a      	str	r2, [r3, #64]	; 0x40
                break;
    336e:	e18a      	b.n	3686 <mp_lexer_to_next+0x5b2>
            } else if (cmp < 0) {
    3370:	68bb      	ldr	r3, [r7, #8]
    3372:	2b00      	cmp	r3, #0
    3374:	f2c0 8189 	blt.w	368a <mp_lexer_to_next+0x5b6>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    3378:	6abb      	ldr	r3, [r7, #40]	; 0x28
    337a:	3301      	adds	r3, #1
    337c:	62bb      	str	r3, [r7, #40]	; 0x28
    337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3380:	2b21      	cmp	r3, #33	; 0x21
    3382:	d9d4      	bls.n	332e <mp_lexer_to_next+0x25a>
}
    3384:	e182      	b.n	368c <mp_lexer_to_next+0x5b8>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3386:	6878      	ldr	r0, [r7, #4]
    3388:	f7ff fa8a 	bl	28a0 <is_digit>
    338c:	4603      	mov	r3, r0
    338e:	2b00      	cmp	r3, #0
    3390:	d10e      	bne.n	33b0 <mp_lexer_to_next+0x2dc>
    3392:	212e      	movs	r1, #46	; 0x2e
    3394:	6878      	ldr	r0, [r7, #4]
    3396:	f7ff f99f 	bl	26d8 <is_char>
    339a:	4603      	mov	r3, r0
    339c:	2b00      	cmp	r3, #0
    339e:	f000 80ad 	beq.w	34fc <mp_lexer_to_next+0x428>
    33a2:	6878      	ldr	r0, [r7, #4]
    33a4:	f7ff fa8a 	bl	28bc <is_following_digit>
    33a8:	4603      	mov	r3, r0
    33aa:	2b00      	cmp	r3, #0
    33ac:	f000 80a6 	beq.w	34fc <mp_lexer_to_next+0x428>
        bool forced_integer = false;
    33b0:	2300      	movs	r3, #0
    33b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (is_char(lex, '.')) {
    33b6:	212e      	movs	r1, #46	; 0x2e
    33b8:	6878      	ldr	r0, [r7, #4]
    33ba:	f7ff f98d 	bl	26d8 <is_char>
    33be:	4603      	mov	r3, r0
    33c0:	2b00      	cmp	r3, #0
    33c2:	d003      	beq.n	33cc <mp_lexer_to_next+0x2f8>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	2209      	movs	r2, #9
    33c8:	641a      	str	r2, [r3, #64]	; 0x40
    33ca:	e012      	b.n	33f2 <mp_lexer_to_next+0x31e>
            lex->tok_kind = MP_TOKEN_INTEGER;
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	2208      	movs	r2, #8
    33d0:	641a      	str	r2, [r3, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    33d2:	2130      	movs	r1, #48	; 0x30
    33d4:	6878      	ldr	r0, [r7, #4]
    33d6:	f7ff f97f 	bl	26d8 <is_char>
    33da:	4603      	mov	r3, r0
    33dc:	2b00      	cmp	r3, #0
    33de:	d008      	beq.n	33f2 <mp_lexer_to_next+0x31e>
    33e0:	6878      	ldr	r0, [r7, #4]
    33e2:	f7ff fa79 	bl	28d8 <is_following_base_char>
    33e6:	4603      	mov	r3, r0
    33e8:	2b00      	cmp	r3, #0
    33ea:	d002      	beq.n	33f2 <mp_lexer_to_next+0x31e>
                forced_integer = true;
    33ec:	2301      	movs	r3, #1
    33ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	f103 0244 	add.w	r2, r3, #68	; 0x44
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	691b      	ldr	r3, [r3, #16]
    33fc:	4619      	mov	r1, r3
    33fe:	4610      	mov	r0, r2
    3400:	f7fe f8f4 	bl	15ec <vstr_add_char>
        next_char(lex);
    3404:	6878      	ldr	r0, [r7, #4]
    3406:	f7ff fb13 	bl	2a30 <next_char>
        while (!is_end(lex)) {
    340a:	e06b      	b.n	34e4 <mp_lexer_to_next+0x410>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    340c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3410:	f083 0301 	eor.w	r3, r3, #1
    3414:	b2db      	uxtb	r3, r3
    3416:	2b00      	cmp	r3, #0
    3418:	d02e      	beq.n	3478 <mp_lexer_to_next+0x3a4>
    341a:	2245      	movs	r2, #69	; 0x45
    341c:	2165      	movs	r1, #101	; 0x65
    341e:	6878      	ldr	r0, [r7, #4]
    3420:	f7ff f96e 	bl	2700 <is_char_or>
    3424:	4603      	mov	r3, r0
    3426:	2b00      	cmp	r3, #0
    3428:	d026      	beq.n	3478 <mp_lexer_to_next+0x3a4>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    342a:	687b      	ldr	r3, [r7, #4]
    342c:	2209      	movs	r2, #9
    342e:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    3430:	687b      	ldr	r3, [r7, #4]
    3432:	3344      	adds	r3, #68	; 0x44
    3434:	2165      	movs	r1, #101	; 0x65
    3436:	4618      	mov	r0, r3
    3438:	f7fe f8d8 	bl	15ec <vstr_add_char>
                next_char(lex);
    343c:	6878      	ldr	r0, [r7, #4]
    343e:	f7ff faf7 	bl	2a30 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    3442:	212b      	movs	r1, #43	; 0x2b
    3444:	6878      	ldr	r0, [r7, #4]
    3446:	f7ff f947 	bl	26d8 <is_char>
    344a:	4603      	mov	r3, r0
    344c:	2b00      	cmp	r3, #0
    344e:	d106      	bne.n	345e <mp_lexer_to_next+0x38a>
    3450:	212d      	movs	r1, #45	; 0x2d
    3452:	6878      	ldr	r0, [r7, #4]
    3454:	f7ff f940 	bl	26d8 <is_char>
    3458:	4603      	mov	r3, r0
    345a:	2b00      	cmp	r3, #0
    345c:	d042      	beq.n	34e4 <mp_lexer_to_next+0x410>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    345e:	687b      	ldr	r3, [r7, #4]
    3460:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	691b      	ldr	r3, [r3, #16]
    3468:	4619      	mov	r1, r3
    346a:	4610      	mov	r0, r2
    346c:	f7fe f8be 	bl	15ec <vstr_add_char>
                    next_char(lex);
    3470:	6878      	ldr	r0, [r7, #4]
    3472:	f7ff fadd 	bl	2a30 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    3476:	e035      	b.n	34e4 <mp_lexer_to_next+0x410>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    3478:	6878      	ldr	r0, [r7, #4]
    347a:	f7ff fa03 	bl	2884 <is_letter>
    347e:	4603      	mov	r3, r0
    3480:	2b00      	cmp	r3, #0
    3482:	d10c      	bne.n	349e <mp_lexer_to_next+0x3ca>
    3484:	6878      	ldr	r0, [r7, #4]
    3486:	f7ff fa0b 	bl	28a0 <is_digit>
    348a:	4603      	mov	r3, r0
    348c:	2b00      	cmp	r3, #0
    348e:	d106      	bne.n	349e <mp_lexer_to_next+0x3ca>
    3490:	212e      	movs	r1, #46	; 0x2e
    3492:	6878      	ldr	r0, [r7, #4]
    3494:	f7ff f920 	bl	26d8 <is_char>
    3498:	4603      	mov	r3, r0
    349a:	2b00      	cmp	r3, #0
    349c:	d018      	beq.n	34d0 <mp_lexer_to_next+0x3fc>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    349e:	234a      	movs	r3, #74	; 0x4a
    34a0:	226a      	movs	r2, #106	; 0x6a
    34a2:	212e      	movs	r1, #46	; 0x2e
    34a4:	6878      	ldr	r0, [r7, #4]
    34a6:	f7ff f949 	bl	273c <is_char_or3>
    34aa:	4603      	mov	r3, r0
    34ac:	2b00      	cmp	r3, #0
    34ae:	d002      	beq.n	34b6 <mp_lexer_to_next+0x3e2>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    34b0:	687b      	ldr	r3, [r7, #4]
    34b2:	2209      	movs	r2, #9
    34b4:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	f103 0244 	add.w	r2, r3, #68	; 0x44
    34bc:	687b      	ldr	r3, [r7, #4]
    34be:	691b      	ldr	r3, [r3, #16]
    34c0:	4619      	mov	r1, r3
    34c2:	4610      	mov	r0, r2
    34c4:	f7fe f892 	bl	15ec <vstr_add_char>
                next_char(lex);
    34c8:	6878      	ldr	r0, [r7, #4]
    34ca:	f7ff fab1 	bl	2a30 <next_char>
    34ce:	e009      	b.n	34e4 <mp_lexer_to_next+0x410>
            } else if (is_char(lex, '_')) {
    34d0:	215f      	movs	r1, #95	; 0x5f
    34d2:	6878      	ldr	r0, [r7, #4]
    34d4:	f7ff f900 	bl	26d8 <is_char>
    34d8:	4603      	mov	r3, r0
    34da:	2b00      	cmp	r3, #0
    34dc:	d00c      	beq.n	34f8 <mp_lexer_to_next+0x424>
                next_char(lex);
    34de:	6878      	ldr	r0, [r7, #4]
    34e0:	f7ff faa6 	bl	2a30 <next_char>
        while (!is_end(lex)) {
    34e4:	6878      	ldr	r0, [r7, #4]
    34e6:	f7ff f8d3 	bl	2690 <is_end>
    34ea:	4603      	mov	r3, r0
    34ec:	f083 0301 	eor.w	r3, r3, #1
    34f0:	b2db      	uxtb	r3, r3
    34f2:	2b00      	cmp	r3, #0
    34f4:	d18a      	bne.n	340c <mp_lexer_to_next+0x338>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    34f6:	e0c9      	b.n	368c <mp_lexer_to_next+0x5b8>
                break;
    34f8:	bf00      	nop
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    34fa:	e0c7      	b.n	368c <mp_lexer_to_next+0x5b8>
        const char *t = tok_enc;
    34fc:	4b35      	ldr	r3, [pc, #212]	; (35d4 <mp_lexer_to_next+0x500>)
    34fe:	623b      	str	r3, [r7, #32]
        size_t tok_enc_index = 0;
    3500:	2300      	movs	r3, #0
    3502:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    3504:	e010      	b.n	3528 <mp_lexer_to_next+0x454>
            if (*t == 'e' || *t == 'c') {
    3506:	6a3b      	ldr	r3, [r7, #32]
    3508:	781b      	ldrb	r3, [r3, #0]
    350a:	2b65      	cmp	r3, #101	; 0x65
    350c:	d003      	beq.n	3516 <mp_lexer_to_next+0x442>
    350e:	6a3b      	ldr	r3, [r7, #32]
    3510:	781b      	ldrb	r3, [r3, #0]
    3512:	2b63      	cmp	r3, #99	; 0x63
    3514:	d102      	bne.n	351c <mp_lexer_to_next+0x448>
                t += 1;
    3516:	6a3b      	ldr	r3, [r7, #32]
    3518:	3301      	adds	r3, #1
    351a:	623b      	str	r3, [r7, #32]
            tok_enc_index += 1;
    351c:	69fb      	ldr	r3, [r7, #28]
    351e:	3301      	adds	r3, #1
    3520:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    3522:	6a3b      	ldr	r3, [r7, #32]
    3524:	3301      	adds	r3, #1
    3526:	623b      	str	r3, [r7, #32]
    3528:	6a3b      	ldr	r3, [r7, #32]
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	2b00      	cmp	r3, #0
    352e:	d00b      	beq.n	3548 <mp_lexer_to_next+0x474>
    3530:	6a3b      	ldr	r3, [r7, #32]
    3532:	781b      	ldrb	r3, [r3, #0]
    3534:	4619      	mov	r1, r3
    3536:	6878      	ldr	r0, [r7, #4]
    3538:	f7ff f8ce 	bl	26d8 <is_char>
    353c:	4603      	mov	r3, r0
    353e:	f083 0301 	eor.w	r3, r3, #1
    3542:	b2db      	uxtb	r3, r3
    3544:	2b00      	cmp	r3, #0
    3546:	d1de      	bne.n	3506 <mp_lexer_to_next+0x432>
        next_char(lex);
    3548:	6878      	ldr	r0, [r7, #4]
    354a:	f7ff fa71 	bl	2a30 <next_char>
        if (*t == 0) {
    354e:	6a3b      	ldr	r3, [r7, #32]
    3550:	781b      	ldrb	r3, [r3, #0]
    3552:	2b00      	cmp	r3, #0
    3554:	d103      	bne.n	355e <mp_lexer_to_next+0x48a>
            lex->tok_kind = MP_TOKEN_INVALID;
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	2201      	movs	r2, #1
    355a:	641a      	str	r2, [r3, #64]	; 0x40
}
    355c:	e096      	b.n	368c <mp_lexer_to_next+0x5b8>
        } else if (*t == '!') {
    355e:	6a3b      	ldr	r3, [r7, #32]
    3560:	781b      	ldrb	r3, [r3, #0]
    3562:	2b21      	cmp	r3, #33	; 0x21
    3564:	d111      	bne.n	358a <mp_lexer_to_next+0x4b6>
            if (is_char(lex, '=')) {
    3566:	213d      	movs	r1, #61	; 0x3d
    3568:	6878      	ldr	r0, [r7, #4]
    356a:	f7ff f8b5 	bl	26d8 <is_char>
    356e:	4603      	mov	r3, r0
    3570:	2b00      	cmp	r3, #0
    3572:	d006      	beq.n	3582 <mp_lexer_to_next+0x4ae>
                next_char(lex);
    3574:	6878      	ldr	r0, [r7, #4]
    3576:	f7ff fa5b 	bl	2a30 <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	2241      	movs	r2, #65	; 0x41
    357e:	641a      	str	r2, [r3, #64]	; 0x40
}
    3580:	e084      	b.n	368c <mp_lexer_to_next+0x5b8>
                lex->tok_kind = MP_TOKEN_INVALID;
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	2201      	movs	r2, #1
    3586:	641a      	str	r2, [r3, #64]	; 0x40
}
    3588:	e080      	b.n	368c <mp_lexer_to_next+0x5b8>
        } else if (*t == '.') {
    358a:	6a3b      	ldr	r3, [r7, #32]
    358c:	781b      	ldrb	r3, [r3, #0]
    358e:	2b2e      	cmp	r3, #46	; 0x2e
    3590:	d115      	bne.n	35be <mp_lexer_to_next+0x4ea>
            if (is_char_and(lex, '.', '.')) {
    3592:	222e      	movs	r2, #46	; 0x2e
    3594:	212e      	movs	r1, #46	; 0x2e
    3596:	6878      	ldr	r0, [r7, #4]
    3598:	f7ff f948 	bl	282c <is_char_and>
    359c:	4603      	mov	r3, r0
    359e:	2b00      	cmp	r3, #0
    35a0:	d009      	beq.n	35b6 <mp_lexer_to_next+0x4e2>
                next_char(lex);
    35a2:	6878      	ldr	r0, [r7, #4]
    35a4:	f7ff fa44 	bl	2a30 <next_char>
                next_char(lex);
    35a8:	6878      	ldr	r0, [r7, #4]
    35aa:	f7ff fa41 	bl	2a30 <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	220c      	movs	r2, #12
    35b2:	641a      	str	r2, [r3, #64]	; 0x40
}
    35b4:	e06a      	b.n	368c <mp_lexer_to_next+0x5b8>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    35b6:	687b      	ldr	r3, [r7, #4]
    35b8:	224a      	movs	r2, #74	; 0x4a
    35ba:	641a      	str	r2, [r3, #64]	; 0x40
}
    35bc:	e066      	b.n	368c <mp_lexer_to_next+0x5b8>
            t += 1;
    35be:	6a3b      	ldr	r3, [r7, #32]
    35c0:	3301      	adds	r3, #1
    35c2:	623b      	str	r3, [r7, #32]
            size_t t_index = tok_enc_index;
    35c4:	69fb      	ldr	r3, [r7, #28]
    35c6:	61bb      	str	r3, [r7, #24]
            while (*t == 'c' || *t == 'e') {
    35c8:	e024      	b.n	3614 <mp_lexer_to_next+0x540>
    35ca:	bf00      	nop
    35cc:	0001dacc 	.word	0x0001dacc
    35d0:	20000a2c 	.word	0x20000a2c
    35d4:	0001d968 	.word	0x0001d968
                t_index += 1;
    35d8:	69bb      	ldr	r3, [r7, #24]
    35da:	3301      	adds	r3, #1
    35dc:	61bb      	str	r3, [r7, #24]
                if (is_char(lex, t[1])) {
    35de:	6a3b      	ldr	r3, [r7, #32]
    35e0:	3301      	adds	r3, #1
    35e2:	781b      	ldrb	r3, [r3, #0]
    35e4:	4619      	mov	r1, r3
    35e6:	6878      	ldr	r0, [r7, #4]
    35e8:	f7ff f876 	bl	26d8 <is_char>
    35ec:	4603      	mov	r3, r0
    35ee:	2b00      	cmp	r3, #0
    35f0:	d009      	beq.n	3606 <mp_lexer_to_next+0x532>
                    next_char(lex);
    35f2:	6878      	ldr	r0, [r7, #4]
    35f4:	f7ff fa1c 	bl	2a30 <next_char>
                    tok_enc_index = t_index;
    35f8:	69bb      	ldr	r3, [r7, #24]
    35fa:	61fb      	str	r3, [r7, #28]
                    if (*t == 'e') {
    35fc:	6a3b      	ldr	r3, [r7, #32]
    35fe:	781b      	ldrb	r3, [r3, #0]
    3600:	2b65      	cmp	r3, #101	; 0x65
    3602:	d104      	bne.n	360e <mp_lexer_to_next+0x53a>
                        break;
    3604:	e010      	b.n	3628 <mp_lexer_to_next+0x554>
                } else if (*t == 'c') {
    3606:	6a3b      	ldr	r3, [r7, #32]
    3608:	781b      	ldrb	r3, [r3, #0]
    360a:	2b63      	cmp	r3, #99	; 0x63
    360c:	d00b      	beq.n	3626 <mp_lexer_to_next+0x552>
                t += 2;
    360e:	6a3b      	ldr	r3, [r7, #32]
    3610:	3302      	adds	r3, #2
    3612:	623b      	str	r3, [r7, #32]
            while (*t == 'c' || *t == 'e') {
    3614:	6a3b      	ldr	r3, [r7, #32]
    3616:	781b      	ldrb	r3, [r3, #0]
    3618:	2b63      	cmp	r3, #99	; 0x63
    361a:	d0dd      	beq.n	35d8 <mp_lexer_to_next+0x504>
    361c:	6a3b      	ldr	r3, [r7, #32]
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	2b65      	cmp	r3, #101	; 0x65
    3622:	d0d9      	beq.n	35d8 <mp_lexer_to_next+0x504>
    3624:	e000      	b.n	3628 <mp_lexer_to_next+0x554>
                    break;
    3626:	bf00      	nop
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    3628:	4a1a      	ldr	r2, [pc, #104]	; (3694 <mp_lexer_to_next+0x5c0>)
    362a:	69fb      	ldr	r3, [r7, #28]
    362c:	4413      	add	r3, r2
    362e:	781b      	ldrb	r3, [r3, #0]
    3630:	461a      	mov	r2, r3
    3632:	687b      	ldr	r3, [r7, #4]
    3634:	641a      	str	r2, [r3, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    363a:	2b42      	cmp	r3, #66	; 0x42
    363c:	d007      	beq.n	364e <mp_lexer_to_next+0x57a>
    363e:	687b      	ldr	r3, [r7, #4]
    3640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3642:	2b44      	cmp	r3, #68	; 0x44
    3644:	d003      	beq.n	364e <mp_lexer_to_next+0x57a>
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    364a:	2b46      	cmp	r3, #70	; 0x46
    364c:	d105      	bne.n	365a <mp_lexer_to_next+0x586>
                lex->nested_bracket_level += 1;
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3652:	1c5a      	adds	r2, r3, #1
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	629a      	str	r2, [r3, #40]	; 0x28
    3658:	e018      	b.n	368c <mp_lexer_to_next+0x5b8>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    365e:	2b43      	cmp	r3, #67	; 0x43
    3660:	d007      	beq.n	3672 <mp_lexer_to_next+0x59e>
    3662:	687b      	ldr	r3, [r7, #4]
    3664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3666:	2b45      	cmp	r3, #69	; 0x45
    3668:	d003      	beq.n	3672 <mp_lexer_to_next+0x59e>
    366a:	687b      	ldr	r3, [r7, #4]
    366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    366e:	2b47      	cmp	r3, #71	; 0x47
    3670:	d10c      	bne.n	368c <mp_lexer_to_next+0x5b8>
                lex->nested_bracket_level -= 1;
    3672:	687b      	ldr	r3, [r7, #4]
    3674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3676:	1e5a      	subs	r2, r3, #1
    3678:	687b      	ldr	r3, [r7, #4]
    367a:	629a      	str	r2, [r3, #40]	; 0x28
}
    367c:	e006      	b.n	368c <mp_lexer_to_next+0x5b8>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    367e:	bf00      	nop
    3680:	e004      	b.n	368c <mp_lexer_to_next+0x5b8>
                break;
    3682:	bf00      	nop
    3684:	e002      	b.n	368c <mp_lexer_to_next+0x5b8>
                break;
    3686:	bf00      	nop
    3688:	e000      	b.n	368c <mp_lexer_to_next+0x5b8>
                break;
    368a:	bf00      	nop
}
    368c:	bf00      	nop
    368e:	3738      	adds	r7, #56	; 0x38
    3690:	46bd      	mov	sp, r7
    3692:	bd80      	pop	{r7, pc}
    3694:	0001d9b0 	.word	0x0001d9b0

00003698 <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    3698:	b580      	push	{r7, lr}
    369a:	b086      	sub	sp, #24
    369c:	af00      	add	r7, sp, #0
    369e:	60f8      	str	r0, [r7, #12]
    36a0:	4638      	mov	r0, r7
    36a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    36a6:	2054      	movs	r0, #84	; 0x54
    36a8:	f7fc fe38 	bl	31c <m_malloc>
    36ac:	6178      	str	r0, [r7, #20]

    lex->source_name = src_name;
    36ae:	697b      	ldr	r3, [r7, #20]
    36b0:	68fa      	ldr	r2, [r7, #12]
    36b2:	601a      	str	r2, [r3, #0]
    lex->reader = reader;
    36b4:	697b      	ldr	r3, [r7, #20]
    36b6:	3304      	adds	r3, #4
    36b8:	463a      	mov	r2, r7
    36ba:	ca07      	ldmia	r2, {r0, r1, r2}
    36bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    36c0:	697b      	ldr	r3, [r7, #20]
    36c2:	2201      	movs	r2, #1
    36c4:	61da      	str	r2, [r3, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    36c6:	697b      	ldr	r3, [r7, #20]
    36c8:	f06f 0201 	mvn.w	r2, #1
    36cc:	621a      	str	r2, [r3, #32]
    lex->emit_dent = 0;
    36ce:	697b      	ldr	r3, [r7, #20]
    36d0:	2200      	movs	r2, #0
    36d2:	625a      	str	r2, [r3, #36]	; 0x24
    lex->nested_bracket_level = 0;
    36d4:	697b      	ldr	r3, [r7, #20]
    36d6:	2200      	movs	r2, #0
    36d8:	629a      	str	r2, [r3, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    36da:	697b      	ldr	r3, [r7, #20]
    36dc:	220a      	movs	r2, #10
    36de:	62da      	str	r2, [r3, #44]	; 0x2c
    lex->num_indent_level = 1;
    36e0:	697b      	ldr	r3, [r7, #20]
    36e2:	2201      	movs	r2, #1
    36e4:	631a      	str	r2, [r3, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    36e6:	697b      	ldr	r3, [r7, #20]
    36e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36ea:	005b      	lsls	r3, r3, #1
    36ec:	4618      	mov	r0, r3
    36ee:	f7fc fe15 	bl	31c <m_malloc>
    36f2:	4602      	mov	r2, r0
    36f4:	697b      	ldr	r3, [r7, #20]
    36f6:	635a      	str	r2, [r3, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    36f8:	697b      	ldr	r3, [r7, #20]
    36fa:	3344      	adds	r3, #68	; 0x44
    36fc:	2120      	movs	r1, #32
    36fe:	4618      	mov	r0, r3
    3700:	f7fd fe0c 	bl	131c <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    3704:	697b      	ldr	r3, [r7, #20]
    3706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3708:	2200      	movs	r2, #0
    370a:	801a      	strh	r2, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    370c:	697b      	ldr	r3, [r7, #20]
    370e:	2200      	movs	r2, #0
    3710:	619a      	str	r2, [r3, #24]
    3712:	697b      	ldr	r3, [r7, #20]
    3714:	699a      	ldr	r2, [r3, #24]
    3716:	697b      	ldr	r3, [r7, #20]
    3718:	615a      	str	r2, [r3, #20]
    371a:	697b      	ldr	r3, [r7, #20]
    371c:	695a      	ldr	r2, [r3, #20]
    371e:	697b      	ldr	r3, [r7, #20]
    3720:	611a      	str	r2, [r3, #16]
    next_char(lex);
    3722:	6978      	ldr	r0, [r7, #20]
    3724:	f7ff f984 	bl	2a30 <next_char>
    next_char(lex);
    3728:	6978      	ldr	r0, [r7, #20]
    372a:	f7ff f981 	bl	2a30 <next_char>
    next_char(lex);
    372e:	6978      	ldr	r0, [r7, #20]
    3730:	f7ff f97e 	bl	2a30 <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    3734:	6978      	ldr	r0, [r7, #20]
    3736:	f7ff fccd 	bl	30d4 <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    373a:	697b      	ldr	r3, [r7, #20]
    373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    373e:	2b01      	cmp	r3, #1
    3740:	d002      	beq.n	3748 <mp_lexer_new+0xb0>
        lex->tok_kind = MP_TOKEN_INDENT;
    3742:	697b      	ldr	r3, [r7, #20]
    3744:	2205      	movs	r2, #5
    3746:	641a      	str	r2, [r3, #64]	; 0x40
    }

    return lex;
    3748:	697b      	ldr	r3, [r7, #20]
}
    374a:	4618      	mov	r0, r3
    374c:	3718      	adds	r7, #24
    374e:	46bd      	mov	sp, r7
    3750:	bd80      	pop	{r7, pc}
    3752:	bf00      	nop

00003754 <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    3754:	b580      	push	{r7, lr}
    3756:	b088      	sub	sp, #32
    3758:	af00      	add	r7, sp, #0
    375a:	60f8      	str	r0, [r7, #12]
    375c:	60b9      	str	r1, [r7, #8]
    375e:	607a      	str	r2, [r7, #4]
    3760:	603b      	str	r3, [r7, #0]
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    3762:	f107 0014 	add.w	r0, r7, #20
    3766:	683b      	ldr	r3, [r7, #0]
    3768:	687a      	ldr	r2, [r7, #4]
    376a:	68b9      	ldr	r1, [r7, #8]
    376c:	f7fe ff58 	bl	2620 <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    3770:	f107 0314 	add.w	r3, r7, #20
    3774:	cb0e      	ldmia	r3, {r1, r2, r3}
    3776:	68f8      	ldr	r0, [r7, #12]
    3778:	f7ff ff8e 	bl	3698 <mp_lexer_new>
    377c:	4603      	mov	r3, r0
}
    377e:	4618      	mov	r0, r3
    3780:	3720      	adds	r7, #32
    3782:	46bd      	mov	sp, r7
    3784:	bd80      	pop	{r7, pc}
    3786:	bf00      	nop

00003788 <mp_lexer_free>:

#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    3788:	b580      	push	{r7, lr}
    378a:	b082      	sub	sp, #8
    378c:	af00      	add	r7, sp, #0
    378e:	6078      	str	r0, [r7, #4]
    if (lex) {
    3790:	687b      	ldr	r3, [r7, #4]
    3792:	2b00      	cmp	r3, #0
    3794:	d012      	beq.n	37bc <mp_lexer_free+0x34>
        lex->reader.close(lex->reader.data);
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	68db      	ldr	r3, [r3, #12]
    379a:	687a      	ldr	r2, [r7, #4]
    379c:	6852      	ldr	r2, [r2, #4]
    379e:	4610      	mov	r0, r2
    37a0:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    37a2:	687b      	ldr	r3, [r7, #4]
    37a4:	3344      	adds	r3, #68	; 0x44
    37a6:	4618      	mov	r0, r3
    37a8:	f7fd fe1c 	bl	13e4 <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    37b0:	4618      	mov	r0, r3
    37b2:	f7fc fe15 	bl	3e0 <m_free>
        m_del_obj(mp_lexer_t, lex);
    37b6:	6878      	ldr	r0, [r7, #4]
    37b8:	f7fc fe12 	bl	3e0 <m_free>
    }
}
    37bc:	bf00      	nop
    37be:	3708      	adds	r7, #8
    37c0:	46bd      	mov	sp, r7
    37c2:	bd80      	pop	{r7, pc}

000037c4 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    37c4:	b480      	push	{r7}
    37c6:	b083      	sub	sp, #12
    37c8:	af00      	add	r7, sp, #0
    37ca:	6078      	str	r0, [r7, #4]
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	f003 0301 	and.w	r3, r3, #1
    37d2:	2b00      	cmp	r3, #0
    37d4:	bf14      	ite	ne
    37d6:	2301      	movne	r3, #1
    37d8:	2300      	moveq	r3, #0
    37da:	b2db      	uxtb	r3, r3
    37dc:	4618      	mov	r0, r3
    37de:	370c      	adds	r7, #12
    37e0:	46bd      	mov	sp, r7
    37e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37e6:	4770      	bx	lr

000037e8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    37e8:	b480      	push	{r7}
    37ea:	b083      	sub	sp, #12
    37ec:	af00      	add	r7, sp, #0
    37ee:	6078      	str	r0, [r7, #4]
    37f0:	687b      	ldr	r3, [r7, #4]
    37f2:	f003 0303 	and.w	r3, r3, #3
    37f6:	2b00      	cmp	r3, #0
    37f8:	bf0c      	ite	eq
    37fa:	2301      	moveq	r3, #1
    37fc:	2300      	movne	r3, #0
    37fe:	b2db      	uxtb	r3, r3
    3800:	4618      	mov	r0, r3
    3802:	370c      	adds	r7, #12
    3804:	46bd      	mov	sp, r7
    3806:	f85d 7b04 	ldr.w	r7, [sp], #4
    380a:	4770      	bx	lr

0000380c <mp_parse_node_new_small_int>:
#define MP_PARSE_NODE_LEAF_ARG(pn) (((uintptr_t)(pn)) >> 4)
#define MP_PARSE_NODE_LEAF_SMALL_INT(pn) (((mp_int_t)(intptr_t)(pn)) >> 1)
#define MP_PARSE_NODE_STRUCT_KIND(pns) ((pns)->kind_num_nodes & 0xff)
#define MP_PARSE_NODE_STRUCT_NUM_NODES(pns) ((pns)->kind_num_nodes >> 8)

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    380c:	b480      	push	{r7}
    380e:	b083      	sub	sp, #12
    3810:	af00      	add	r7, sp, #0
    3812:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    3814:	687b      	ldr	r3, [r7, #4]
    3816:	005b      	lsls	r3, r3, #1
    3818:	f043 0301 	orr.w	r3, r3, #1
}
    381c:	4618      	mov	r0, r3
    381e:	370c      	adds	r7, #12
    3820:	46bd      	mov	sp, r7
    3822:	f85d 7b04 	ldr.w	r7, [sp], #4
    3826:	4770      	bx	lr

00003828 <mp_parse_node_new_leaf>:
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    3828:	b480      	push	{r7}
    382a:	b083      	sub	sp, #12
    382c:	af00      	add	r7, sp, #0
    382e:	6078      	str	r0, [r7, #4]
    3830:	6039      	str	r1, [r7, #0]
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    3832:	683b      	ldr	r3, [r7, #0]
    3834:	011a      	lsls	r2, r3, #4
    3836:	687b      	ldr	r3, [r7, #4]
    3838:	4313      	orrs	r3, r2
}
    383a:	4618      	mov	r0, r3
    383c:	370c      	adds	r7, #12
    383e:	46bd      	mov	sp, r7
    3840:	f85d 7b04 	ldr.w	r7, [sp], #4
    3844:	4770      	bx	lr
    3846:	bf00      	nop

00003848 <get_rule_arg>:
    #if MICROPY_COMP_CONST
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    3848:	b480      	push	{r7}
    384a:	b085      	sub	sp, #20
    384c:	af00      	add	r7, sp, #0
    384e:	4603      	mov	r3, r0
    3850:	71fb      	strb	r3, [r7, #7]
    size_t off = rule_arg_offset_table[r_id];
    3852:	79fb      	ldrb	r3, [r7, #7]
    3854:	4a0a      	ldr	r2, [pc, #40]	; (3880 <get_rule_arg+0x38>)
    3856:	5cd3      	ldrb	r3, [r2, r3]
    3858:	60fb      	str	r3, [r7, #12]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    385a:	79fb      	ldrb	r3, [r7, #7]
    385c:	2266      	movs	r2, #102	; 0x66
    385e:	4293      	cmp	r3, r2
    3860:	d303      	bcc.n	386a <get_rule_arg+0x22>
        off |= 0x100;
    3862:	68fb      	ldr	r3, [r7, #12]
    3864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3868:	60fb      	str	r3, [r7, #12]
    }
    return &rule_arg_combined_table[off];
    386a:	68fb      	ldr	r3, [r7, #12]
    386c:	005b      	lsls	r3, r3, #1
    386e:	4a05      	ldr	r2, [pc, #20]	; (3884 <get_rule_arg+0x3c>)
    3870:	4413      	add	r3, r2
}
    3872:	4618      	mov	r0, r3
    3874:	3714      	adds	r7, #20
    3876:	46bd      	mov	sp, r7
    3878:	f85d 7b04 	ldr.w	r7, [sp], #4
    387c:	4770      	bx	lr
    387e:	bf00      	nop
    3880:	0001df54 	.word	0x0001df54
    3884:	0001dc10 	.word	0x0001dc10

00003888 <parser_alloc>:

STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    3888:	b580      	push	{r7, lr}
    388a:	b086      	sub	sp, #24
    388c:	af00      	add	r7, sp, #0
    388e:	6078      	str	r0, [r7, #4]
    3890:	6039      	str	r1, [r7, #0]
    // use a custom memory allocator to store parse nodes sequentially in large chunks

    mp_parse_chunk_t *chunk = parser->cur_chunk;
    3892:	687b      	ldr	r3, [r7, #4]
    3894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3896:	617b      	str	r3, [r7, #20]

    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    3898:	697b      	ldr	r3, [r7, #20]
    389a:	2b00      	cmp	r3, #0
    389c:	d031      	beq.n	3902 <parser_alloc+0x7a>
    389e:	697b      	ldr	r3, [r7, #20]
    38a0:	685a      	ldr	r2, [r3, #4]
    38a2:	683b      	ldr	r3, [r7, #0]
    38a4:	441a      	add	r2, r3
    38a6:	697b      	ldr	r3, [r7, #20]
    38a8:	681b      	ldr	r3, [r3, #0]
    38aa:	429a      	cmp	r2, r3
    38ac:	d929      	bls.n	3902 <parser_alloc+0x7a>
        // not enough room at end of previously allocated chunk so try to grow
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    38ae:	697b      	ldr	r3, [r7, #20]
    38b0:	681a      	ldr	r2, [r3, #0]
    38b2:	683b      	ldr	r3, [r7, #0]
    38b4:	4413      	add	r3, r2
    38b6:	3308      	adds	r3, #8
    38b8:	2200      	movs	r2, #0
    38ba:	4619      	mov	r1, r3
    38bc:	6978      	ldr	r0, [r7, #20]
    38be:	f7fc fd7b 	bl	3b8 <m_realloc_maybe>
    38c2:	60f8      	str	r0, [r7, #12]
            sizeof(mp_parse_chunk_t) + chunk->alloc,
            sizeof(mp_parse_chunk_t) + chunk->alloc + num_bytes, false);
        if (new_data == NULL) {
    38c4:	68fb      	ldr	r3, [r7, #12]
    38c6:	2b00      	cmp	r3, #0
    38c8:	d115      	bne.n	38f6 <parser_alloc+0x6e>
            // could not grow existing memory; shrink it to fit previous
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    38ca:	697b      	ldr	r3, [r7, #20]
    38cc:	685b      	ldr	r3, [r3, #4]
    38ce:	3308      	adds	r3, #8
    38d0:	2200      	movs	r2, #0
    38d2:	4619      	mov	r1, r3
    38d4:	6978      	ldr	r0, [r7, #20]
    38d6:	f7fc fd6f 	bl	3b8 <m_realloc_maybe>
                sizeof(mp_parse_chunk_t) + chunk->union_.used, false);
            chunk->alloc = chunk->union_.used;
    38da:	697b      	ldr	r3, [r7, #20]
    38dc:	685a      	ldr	r2, [r3, #4]
    38de:	697b      	ldr	r3, [r7, #20]
    38e0:	601a      	str	r2, [r3, #0]
            chunk->union_.next = parser->tree.chunk;
    38e2:	687b      	ldr	r3, [r7, #4]
    38e4:	6a1a      	ldr	r2, [r3, #32]
    38e6:	697b      	ldr	r3, [r7, #20]
    38e8:	605a      	str	r2, [r3, #4]
            parser->tree.chunk = chunk;
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	697a      	ldr	r2, [r7, #20]
    38ee:	621a      	str	r2, [r3, #32]
            chunk = NULL;
    38f0:	2300      	movs	r3, #0
    38f2:	617b      	str	r3, [r7, #20]
    38f4:	e005      	b.n	3902 <parser_alloc+0x7a>
        } else {
            // could grow existing memory
            chunk->alloc += num_bytes;
    38f6:	697b      	ldr	r3, [r7, #20]
    38f8:	681a      	ldr	r2, [r3, #0]
    38fa:	683b      	ldr	r3, [r7, #0]
    38fc:	441a      	add	r2, r3
    38fe:	697b      	ldr	r3, [r7, #20]
    3900:	601a      	str	r2, [r3, #0]
        }
    }

    if (chunk == NULL) {
    3902:	697b      	ldr	r3, [r7, #20]
    3904:	2b00      	cmp	r3, #0
    3906:	d116      	bne.n	3936 <parser_alloc+0xae>
        // no previous chunk, allocate a new chunk
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    3908:	2310      	movs	r3, #16
    390a:	613b      	str	r3, [r7, #16]
        if (alloc < num_bytes) {
    390c:	693a      	ldr	r2, [r7, #16]
    390e:	683b      	ldr	r3, [r7, #0]
    3910:	429a      	cmp	r2, r3
    3912:	d201      	bcs.n	3918 <parser_alloc+0x90>
            alloc = num_bytes;
    3914:	683b      	ldr	r3, [r7, #0]
    3916:	613b      	str	r3, [r7, #16]
        }
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    3918:	693b      	ldr	r3, [r7, #16]
    391a:	3308      	adds	r3, #8
    391c:	4618      	mov	r0, r3
    391e:	f7fc fcfd 	bl	31c <m_malloc>
    3922:	6178      	str	r0, [r7, #20]
        chunk->alloc = alloc;
    3924:	697b      	ldr	r3, [r7, #20]
    3926:	693a      	ldr	r2, [r7, #16]
    3928:	601a      	str	r2, [r3, #0]
        chunk->union_.used = 0;
    392a:	697b      	ldr	r3, [r7, #20]
    392c:	2200      	movs	r2, #0
    392e:	605a      	str	r2, [r3, #4]
        parser->cur_chunk = chunk;
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	697a      	ldr	r2, [r7, #20]
    3934:	625a      	str	r2, [r3, #36]	; 0x24
    }

    byte *ret = chunk->data + chunk->union_.used;
    3936:	697b      	ldr	r3, [r7, #20]
    3938:	f103 0208 	add.w	r2, r3, #8
    393c:	697b      	ldr	r3, [r7, #20]
    393e:	685b      	ldr	r3, [r3, #4]
    3940:	4413      	add	r3, r2
    3942:	60bb      	str	r3, [r7, #8]
    chunk->union_.used += num_bytes;
    3944:	697b      	ldr	r3, [r7, #20]
    3946:	685a      	ldr	r2, [r3, #4]
    3948:	683b      	ldr	r3, [r7, #0]
    394a:	441a      	add	r2, r3
    394c:	697b      	ldr	r3, [r7, #20]
    394e:	605a      	str	r2, [r3, #4]
    return ret;
    3950:	68bb      	ldr	r3, [r7, #8]
}
    3952:	4618      	mov	r0, r3
    3954:	3718      	adds	r7, #24
    3956:	46bd      	mov	sp, r7
    3958:	bd80      	pop	{r7, pc}
    395a:	bf00      	nop

0000395c <push_rule>:

STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    395c:	b580      	push	{r7, lr}
    395e:	b086      	sub	sp, #24
    3960:	af00      	add	r7, sp, #0
    3962:	60f8      	str	r0, [r7, #12]
    3964:	60b9      	str	r1, [r7, #8]
    3966:	603b      	str	r3, [r7, #0]
    3968:	4613      	mov	r3, r2
    396a:	71fb      	strb	r3, [r7, #7]
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    396c:	68fb      	ldr	r3, [r7, #12]
    396e:	685a      	ldr	r2, [r3, #4]
    3970:	68fb      	ldr	r3, [r7, #12]
    3972:	681b      	ldr	r3, [r3, #0]
    3974:	429a      	cmp	r2, r3
    3976:	d313      	bcc.n	39a0 <push_rule+0x44>
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    3978:	68fb      	ldr	r3, [r7, #12]
    397a:	689a      	ldr	r2, [r3, #8]
    397c:	68fb      	ldr	r3, [r7, #12]
    397e:	681b      	ldr	r3, [r3, #0]
    3980:	3310      	adds	r3, #16
    3982:	00db      	lsls	r3, r3, #3
    3984:	4619      	mov	r1, r3
    3986:	4610      	mov	r0, r2
    3988:	f7fc fcfc 	bl	384 <m_realloc>
    398c:	6178      	str	r0, [r7, #20]
        parser->rule_stack = rs;
    398e:	68fb      	ldr	r3, [r7, #12]
    3990:	697a      	ldr	r2, [r7, #20]
    3992:	609a      	str	r2, [r3, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    3994:	68fb      	ldr	r3, [r7, #12]
    3996:	681b      	ldr	r3, [r3, #0]
    3998:	f103 0210 	add.w	r2, r3, #16
    399c:	68fb      	ldr	r3, [r7, #12]
    399e:	601a      	str	r2, [r3, #0]
    }
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    39a0:	68fb      	ldr	r3, [r7, #12]
    39a2:	689a      	ldr	r2, [r3, #8]
    39a4:	68fb      	ldr	r3, [r7, #12]
    39a6:	685b      	ldr	r3, [r3, #4]
    39a8:	1c58      	adds	r0, r3, #1
    39aa:	68f9      	ldr	r1, [r7, #12]
    39ac:	6048      	str	r0, [r1, #4]
    39ae:	00db      	lsls	r3, r3, #3
    39b0:	4413      	add	r3, r2
    39b2:	613b      	str	r3, [r7, #16]
    rs->src_line = src_line;
    39b4:	68bb      	ldr	r3, [r7, #8]
    39b6:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    39ba:	693a      	ldr	r2, [r7, #16]
    39bc:	6813      	ldr	r3, [r2, #0]
    39be:	f361 0317 	bfi	r3, r1, #0, #24
    39c2:	6013      	str	r3, [r2, #0]
    rs->rule_id = rule_id;
    39c4:	693b      	ldr	r3, [r7, #16]
    39c6:	79fa      	ldrb	r2, [r7, #7]
    39c8:	70da      	strb	r2, [r3, #3]
    rs->arg_i = arg_i;
    39ca:	693b      	ldr	r3, [r7, #16]
    39cc:	683a      	ldr	r2, [r7, #0]
    39ce:	605a      	str	r2, [r3, #4]
}
    39d0:	bf00      	nop
    39d2:	3718      	adds	r7, #24
    39d4:	46bd      	mov	sp, r7
    39d6:	bd80      	pop	{r7, pc}

000039d8 <push_rule_from_arg>:

STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    39d8:	b580      	push	{r7, lr}
    39da:	b084      	sub	sp, #16
    39dc:	af00      	add	r7, sp, #0
    39de:	6078      	str	r0, [r7, #4]
    39e0:	6039      	str	r1, [r7, #0]
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    39e2:	683b      	ldr	r3, [r7, #0]
    39e4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    39e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    39ec:	d00c      	beq.n	3a08 <push_rule_from_arg+0x30>
    39ee:	683b      	ldr	r3, [r7, #0]
    39f0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    39f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    39f8:	d006      	beq.n	3a08 <push_rule_from_arg+0x30>
    39fa:	4b0c      	ldr	r3, [pc, #48]	; (3a2c <push_rule_from_arg+0x54>)
    39fc:	4a0c      	ldr	r2, [pc, #48]	; (3a30 <push_rule_from_arg+0x58>)
    39fe:	f44f 7199 	mov.w	r1, #306	; 0x132
    3a02:	480c      	ldr	r0, [pc, #48]	; (3a34 <push_rule_from_arg+0x5c>)
    3a04:	f017 fcca 	bl	1b39c <__assert_func>
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    3a08:	683b      	ldr	r3, [r7, #0]
    3a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3a0e:	60fb      	str	r3, [r7, #12]
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    3a10:	687b      	ldr	r3, [r7, #4]
    3a12:	699b      	ldr	r3, [r3, #24]
    3a14:	6b99      	ldr	r1, [r3, #56]	; 0x38
    3a16:	68fb      	ldr	r3, [r7, #12]
    3a18:	b2da      	uxtb	r2, r3
    3a1a:	2300      	movs	r3, #0
    3a1c:	6878      	ldr	r0, [r7, #4]
    3a1e:	f7ff ff9d 	bl	395c <push_rule>
}
    3a22:	bf00      	nop
    3a24:	3710      	adds	r7, #16
    3a26:	46bd      	mov	sp, r7
    3a28:	bd80      	pop	{r7, pc}
    3a2a:	bf00      	nop
    3a2c:	0001dffc 	.word	0x0001dffc
    3a30:	0001e1d4 	.word	0x0001e1d4
    3a34:	0001e05c 	.word	0x0001e05c

00003a38 <pop_rule>:

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    3a38:	b480      	push	{r7}
    3a3a:	b087      	sub	sp, #28
    3a3c:	af00      	add	r7, sp, #0
    3a3e:	60f8      	str	r0, [r7, #12]
    3a40:	60b9      	str	r1, [r7, #8]
    3a42:	607a      	str	r2, [r7, #4]
    parser->rule_stack_top -= 1;
    3a44:	68fb      	ldr	r3, [r7, #12]
    3a46:	685b      	ldr	r3, [r3, #4]
    3a48:	1e5a      	subs	r2, r3, #1
    3a4a:	68fb      	ldr	r3, [r7, #12]
    3a4c:	605a      	str	r2, [r3, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    3a4e:	68fb      	ldr	r3, [r7, #12]
    3a50:	689a      	ldr	r2, [r3, #8]
    3a52:	68fb      	ldr	r3, [r7, #12]
    3a54:	685b      	ldr	r3, [r3, #4]
    3a56:	00db      	lsls	r3, r3, #3
    3a58:	4413      	add	r3, r2
    3a5a:	78db      	ldrb	r3, [r3, #3]
    3a5c:	75fb      	strb	r3, [r7, #23]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	689a      	ldr	r2, [r3, #8]
    3a62:	68fb      	ldr	r3, [r7, #12]
    3a64:	685b      	ldr	r3, [r3, #4]
    3a66:	00db      	lsls	r3, r3, #3
    3a68:	4413      	add	r3, r2
    3a6a:	685a      	ldr	r2, [r3, #4]
    3a6c:	68bb      	ldr	r3, [r7, #8]
    3a6e:	601a      	str	r2, [r3, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    3a70:	68fb      	ldr	r3, [r7, #12]
    3a72:	689a      	ldr	r2, [r3, #8]
    3a74:	68fb      	ldr	r3, [r7, #12]
    3a76:	685b      	ldr	r3, [r3, #4]
    3a78:	00db      	lsls	r3, r3, #3
    3a7a:	4413      	add	r3, r2
    3a7c:	681b      	ldr	r3, [r3, #0]
    3a7e:	f3c3 0317 	ubfx	r3, r3, #0, #24
    3a82:	461a      	mov	r2, r3
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	601a      	str	r2, [r3, #0]
    return rule_id;
    3a88:	7dfb      	ldrb	r3, [r7, #23]
}
    3a8a:	4618      	mov	r0, r3
    3a8c:	371c      	adds	r7, #28
    3a8e:	46bd      	mov	sp, r7
    3a90:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a94:	4770      	bx	lr
    3a96:	bf00      	nop

00003a98 <mp_parse_node_is_const_false>:

bool mp_parse_node_is_const_false(mp_parse_node_t pn) {
    3a98:	b480      	push	{r7}
    3a9a:	b083      	sub	sp, #12
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    3aa0:	687b      	ldr	r3, [r7, #4]
    3aa2:	2bde      	cmp	r3, #222	; 0xde
    3aa4:	d008      	beq.n	3ab8 <mp_parse_node_is_const_false+0x20>
    3aa6:	687b      	ldr	r3, [r7, #4]
    3aa8:	f003 0301 	and.w	r3, r3, #1
    3aac:	2b00      	cmp	r3, #0
    3aae:	d005      	beq.n	3abc <mp_parse_node_is_const_false+0x24>
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	105b      	asrs	r3, r3, #1
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d101      	bne.n	3abc <mp_parse_node_is_const_false+0x24>
    3ab8:	2301      	movs	r3, #1
    3aba:	e000      	b.n	3abe <mp_parse_node_is_const_false+0x26>
    3abc:	2300      	movs	r3, #0
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
    3abe:	f003 0301 	and.w	r3, r3, #1
    3ac2:	b2db      	uxtb	r3, r3
}
    3ac4:	4618      	mov	r0, r3
    3ac6:	370c      	adds	r7, #12
    3ac8:	46bd      	mov	sp, r7
    3aca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ace:	4770      	bx	lr

00003ad0 <mp_parse_node_is_const_true>:

bool mp_parse_node_is_const_true(mp_parse_node_t pn) {
    3ad0:	b480      	push	{r7}
    3ad2:	b083      	sub	sp, #12
    3ad4:	af00      	add	r7, sp, #0
    3ad6:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	2bfe      	cmp	r3, #254	; 0xfe
    3adc:	d008      	beq.n	3af0 <mp_parse_node_is_const_true+0x20>
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	f003 0301 	and.w	r3, r3, #1
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d005      	beq.n	3af4 <mp_parse_node_is_const_true+0x24>
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	105b      	asrs	r3, r3, #1
    3aec:	2b00      	cmp	r3, #0
    3aee:	d001      	beq.n	3af4 <mp_parse_node_is_const_true+0x24>
    3af0:	2301      	movs	r3, #1
    3af2:	e000      	b.n	3af6 <mp_parse_node_is_const_true+0x26>
    3af4:	2300      	movs	r3, #0
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
    3af6:	f003 0301 	and.w	r3, r3, #1
    3afa:	b2db      	uxtb	r3, r3
}
    3afc:	4618      	mov	r0, r3
    3afe:	370c      	adds	r7, #12
    3b00:	46bd      	mov	sp, r7
    3b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b06:	4770      	bx	lr

00003b08 <mp_parse_node_get_int_maybe>:

bool mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o) {
    3b08:	b580      	push	{r7, lr}
    3b0a:	b084      	sub	sp, #16
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	6078      	str	r0, [r7, #4]
    3b10:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3b12:	687b      	ldr	r3, [r7, #4]
    3b14:	f003 0301 	and.w	r3, r3, #1
    3b18:	2b00      	cmp	r3, #0
    3b1a:	d007      	beq.n	3b2c <mp_parse_node_get_int_maybe+0x24>
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	f043 0301 	orr.w	r3, r3, #1
    3b22:	461a      	mov	r2, r3
    3b24:	683b      	ldr	r3, [r7, #0]
    3b26:	601a      	str	r2, [r3, #0]
        return true;
    3b28:	2301      	movs	r3, #1
    3b2a:	e031      	b.n	3b90 <mp_parse_node_get_int_maybe+0x88>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d02d      	beq.n	3b8e <mp_parse_node_get_int_maybe+0x86>
    3b32:	687b      	ldr	r3, [r7, #4]
    3b34:	f003 0303 	and.w	r3, r3, #3
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d128      	bne.n	3b8e <mp_parse_node_get_int_maybe+0x86>
    3b3c:	687b      	ldr	r3, [r7, #4]
    3b3e:	685b      	ldr	r3, [r3, #4]
    3b40:	b2db      	uxtb	r3, r3
    3b42:	2b35      	cmp	r3, #53	; 0x35
    3b44:	d123      	bne.n	3b8e <mp_parse_node_get_int_maybe+0x86>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3b46:	687b      	ldr	r3, [r7, #4]
    3b48:	60fb      	str	r3, [r7, #12]
        #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
        // nodes are 32-bit pointers, but need to extract 64-bit object
        *o = (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
        #else
        *o = (mp_obj_t)pns->nodes[0];
    3b4a:	68fb      	ldr	r3, [r7, #12]
    3b4c:	689b      	ldr	r3, [r3, #8]
    3b4e:	461a      	mov	r2, r3
    3b50:	683b      	ldr	r3, [r7, #0]
    3b52:	601a      	str	r2, [r3, #0]
        #endif
        return MP_OBJ_IS_INT(*o);
    3b54:	683b      	ldr	r3, [r7, #0]
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	4618      	mov	r0, r3
    3b5a:	f7ff fe33 	bl	37c4 <MP_OBJ_IS_SMALL_INT>
    3b5e:	4603      	mov	r3, r0
    3b60:	2b00      	cmp	r3, #0
    3b62:	d10d      	bne.n	3b80 <mp_parse_node_get_int_maybe+0x78>
    3b64:	683b      	ldr	r3, [r7, #0]
    3b66:	681b      	ldr	r3, [r3, #0]
    3b68:	4618      	mov	r0, r3
    3b6a:	f7ff fe3d 	bl	37e8 <MP_OBJ_IS_OBJ>
    3b6e:	4603      	mov	r3, r0
    3b70:	2b00      	cmp	r3, #0
    3b72:	d007      	beq.n	3b84 <mp_parse_node_get_int_maybe+0x7c>
    3b74:	683b      	ldr	r3, [r7, #0]
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	681b      	ldr	r3, [r3, #0]
    3b7a:	4a07      	ldr	r2, [pc, #28]	; (3b98 <mp_parse_node_get_int_maybe+0x90>)
    3b7c:	4293      	cmp	r3, r2
    3b7e:	d101      	bne.n	3b84 <mp_parse_node_get_int_maybe+0x7c>
    3b80:	2301      	movs	r3, #1
    3b82:	e000      	b.n	3b86 <mp_parse_node_get_int_maybe+0x7e>
    3b84:	2300      	movs	r3, #0
    3b86:	f003 0301 	and.w	r3, r3, #1
    3b8a:	b2db      	uxtb	r3, r3
    3b8c:	e000      	b.n	3b90 <mp_parse_node_get_int_maybe+0x88>
    } else {
        return false;
    3b8e:	2300      	movs	r3, #0
    }
}
    3b90:	4618      	mov	r0, r3
    3b92:	3710      	adds	r7, #16
    3b94:	46bd      	mov	sp, r7
    3b96:	bd80      	pop	{r7, pc}
    3b98:	00020f3c 	.word	0x00020f3c

00003b9c <mp_parse_node_extract_list>:

int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    3b9c:	b480      	push	{r7}
    3b9e:	b087      	sub	sp, #28
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	60f8      	str	r0, [r7, #12]
    3ba4:	60b9      	str	r1, [r7, #8]
    3ba6:	607a      	str	r2, [r7, #4]
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    3ba8:	68fb      	ldr	r3, [r7, #12]
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	2b00      	cmp	r3, #0
    3bae:	d104      	bne.n	3bba <mp_parse_node_extract_list+0x1e>
        *nodes = NULL;
    3bb0:	687b      	ldr	r3, [r7, #4]
    3bb2:	2200      	movs	r2, #0
    3bb4:	601a      	str	r2, [r3, #0]
        return 0;
    3bb6:	2300      	movs	r3, #0
    3bb8:	e020      	b.n	3bfc <mp_parse_node_extract_list+0x60>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    3bba:	68fb      	ldr	r3, [r7, #12]
    3bbc:	681b      	ldr	r3, [r3, #0]
    3bbe:	f003 0303 	and.w	r3, r3, #3
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	d004      	beq.n	3bd0 <mp_parse_node_extract_list+0x34>
        *nodes = pn;
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	68fa      	ldr	r2, [r7, #12]
    3bca:	601a      	str	r2, [r3, #0]
        return 1;
    3bcc:	2301      	movs	r3, #1
    3bce:	e015      	b.n	3bfc <mp_parse_node_extract_list+0x60>
    } else {
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)(*pn);
    3bd0:	68fb      	ldr	r3, [r7, #12]
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    3bd6:	697b      	ldr	r3, [r7, #20]
    3bd8:	685b      	ldr	r3, [r3, #4]
    3bda:	b2da      	uxtb	r2, r3
    3bdc:	68bb      	ldr	r3, [r7, #8]
    3bde:	429a      	cmp	r2, r3
    3be0:	d004      	beq.n	3bec <mp_parse_node_extract_list+0x50>
            *nodes = pn;
    3be2:	687b      	ldr	r3, [r7, #4]
    3be4:	68fa      	ldr	r2, [r7, #12]
    3be6:	601a      	str	r2, [r3, #0]
            return 1;
    3be8:	2301      	movs	r3, #1
    3bea:	e007      	b.n	3bfc <mp_parse_node_extract_list+0x60>
        } else {
            *nodes = pns->nodes;
    3bec:	697b      	ldr	r3, [r7, #20]
    3bee:	f103 0208 	add.w	r2, r3, #8
    3bf2:	687b      	ldr	r3, [r7, #4]
    3bf4:	601a      	str	r2, [r3, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3bf6:	697b      	ldr	r3, [r7, #20]
    3bf8:	685b      	ldr	r3, [r3, #4]
    3bfa:	0a1b      	lsrs	r3, r3, #8
        }
    }
}
    3bfc:	4618      	mov	r0, r3
    3bfe:	371c      	adds	r7, #28
    3c00:	46bd      	mov	sp, r7
    3c02:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c06:	4770      	bx	lr

00003c08 <pop_result>:
        mp_parse_node_print(parser->result_stack[i], 0);
    }
}
*/

STATIC mp_parse_node_t pop_result(parser_t *parser) {
    3c08:	b580      	push	{r7, lr}
    3c0a:	b082      	sub	sp, #8
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]
    assert(parser->result_stack_top > 0);
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	691b      	ldr	r3, [r3, #16]
    3c14:	2b00      	cmp	r3, #0
    3c16:	d106      	bne.n	3c26 <pop_result+0x1e>
    3c18:	4b0b      	ldr	r3, [pc, #44]	; (3c48 <pop_result+0x40>)
    3c1a:	4a0c      	ldr	r2, [pc, #48]	; (3c4c <pop_result+0x44>)
    3c1c:	f240 11a9 	movw	r1, #425	; 0x1a9
    3c20:	480b      	ldr	r0, [pc, #44]	; (3c50 <pop_result+0x48>)
    3c22:	f017 fbbb 	bl	1b39c <__assert_func>
    return parser->result_stack[--parser->result_stack_top];
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	695a      	ldr	r2, [r3, #20]
    3c2a:	687b      	ldr	r3, [r7, #4]
    3c2c:	691b      	ldr	r3, [r3, #16]
    3c2e:	1e59      	subs	r1, r3, #1
    3c30:	687b      	ldr	r3, [r7, #4]
    3c32:	6119      	str	r1, [r3, #16]
    3c34:	687b      	ldr	r3, [r7, #4]
    3c36:	691b      	ldr	r3, [r3, #16]
    3c38:	009b      	lsls	r3, r3, #2
    3c3a:	4413      	add	r3, r2
    3c3c:	681b      	ldr	r3, [r3, #0]
}
    3c3e:	4618      	mov	r0, r3
    3c40:	3708      	adds	r7, #8
    3c42:	46bd      	mov	sp, r7
    3c44:	bd80      	pop	{r7, pc}
    3c46:	bf00      	nop
    3c48:	0001e070 	.word	0x0001e070
    3c4c:	0001e1e8 	.word	0x0001e1e8
    3c50:	0001e05c 	.word	0x0001e05c

00003c54 <peek_result>:

STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    3c54:	b580      	push	{r7, lr}
    3c56:	b082      	sub	sp, #8
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
    3c5c:	6039      	str	r1, [r7, #0]
    assert(parser->result_stack_top > pos);
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	691a      	ldr	r2, [r3, #16]
    3c62:	683b      	ldr	r3, [r7, #0]
    3c64:	429a      	cmp	r2, r3
    3c66:	d806      	bhi.n	3c76 <peek_result+0x22>
    3c68:	4b0b      	ldr	r3, [pc, #44]	; (3c98 <peek_result+0x44>)
    3c6a:	4a0c      	ldr	r2, [pc, #48]	; (3c9c <peek_result+0x48>)
    3c6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    3c70:	480b      	ldr	r0, [pc, #44]	; (3ca0 <peek_result+0x4c>)
    3c72:	f017 fb93 	bl	1b39c <__assert_func>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	695a      	ldr	r2, [r3, #20]
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	6919      	ldr	r1, [r3, #16]
    3c7e:	683b      	ldr	r3, [r7, #0]
    3c80:	1acb      	subs	r3, r1, r3
    3c82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3c86:	3b01      	subs	r3, #1
    3c88:	009b      	lsls	r3, r3, #2
    3c8a:	4413      	add	r3, r2
    3c8c:	681b      	ldr	r3, [r3, #0]
}
    3c8e:	4618      	mov	r0, r3
    3c90:	3708      	adds	r7, #8
    3c92:	46bd      	mov	sp, r7
    3c94:	bd80      	pop	{r7, pc}
    3c96:	bf00      	nop
    3c98:	0001e090 	.word	0x0001e090
    3c9c:	0001e1f4 	.word	0x0001e1f4
    3ca0:	0001e05c 	.word	0x0001e05c

00003ca4 <push_result_node>:

STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b084      	sub	sp, #16
    3ca8:	af00      	add	r7, sp, #0
    3caa:	6078      	str	r0, [r7, #4]
    3cac:	6039      	str	r1, [r7, #0]
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	691a      	ldr	r2, [r3, #16]
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	68db      	ldr	r3, [r3, #12]
    3cb6:	429a      	cmp	r2, r3
    3cb8:	d313      	bcc.n	3ce2 <push_result_node+0x3e>
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    3cba:	687b      	ldr	r3, [r7, #4]
    3cbc:	695a      	ldr	r2, [r3, #20]
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	68db      	ldr	r3, [r3, #12]
    3cc2:	3310      	adds	r3, #16
    3cc4:	009b      	lsls	r3, r3, #2
    3cc6:	4619      	mov	r1, r3
    3cc8:	4610      	mov	r0, r2
    3cca:	f7fc fb5b 	bl	384 <m_realloc>
    3cce:	60f8      	str	r0, [r7, #12]
        parser->result_stack = stack;
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	68fa      	ldr	r2, [r7, #12]
    3cd4:	615a      	str	r2, [r3, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	68db      	ldr	r3, [r3, #12]
    3cda:	f103 0210 	add.w	r2, r3, #16
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	60da      	str	r2, [r3, #12]
    }
    parser->result_stack[parser->result_stack_top++] = pn;
    3ce2:	687b      	ldr	r3, [r7, #4]
    3ce4:	695a      	ldr	r2, [r3, #20]
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	691b      	ldr	r3, [r3, #16]
    3cea:	1c58      	adds	r0, r3, #1
    3cec:	6879      	ldr	r1, [r7, #4]
    3cee:	6108      	str	r0, [r1, #16]
    3cf0:	009b      	lsls	r3, r3, #2
    3cf2:	4413      	add	r3, r2
    3cf4:	683a      	ldr	r2, [r7, #0]
    3cf6:	601a      	str	r2, [r3, #0]
}
    3cf8:	bf00      	nop
    3cfa:	3710      	adds	r7, #16
    3cfc:	46bd      	mov	sp, r7
    3cfe:	bd80      	pop	{r7, pc}

00003d00 <make_node_const_object>:

STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    3d00:	b580      	push	{r7, lr}
    3d02:	b086      	sub	sp, #24
    3d04:	af00      	add	r7, sp, #0
    3d06:	60f8      	str	r0, [r7, #12]
    3d08:	60b9      	str	r1, [r7, #8]
    3d0a:	607a      	str	r2, [r7, #4]
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    3d0c:	210c      	movs	r1, #12
    3d0e:	68f8      	ldr	r0, [r7, #12]
    3d10:	f7ff fdba 	bl	3888 <parser_alloc>
    3d14:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    3d16:	697b      	ldr	r3, [r7, #20]
    3d18:	68ba      	ldr	r2, [r7, #8]
    3d1a:	601a      	str	r2, [r3, #0]
    // nodes are 32-bit pointers, but need to store 64-bit object
    pn->kind_num_nodes = RULE_const_object | (2 << 8);
    pn->nodes[0] = (uint64_t)obj;
    pn->nodes[1] = (uint64_t)obj >> 32;
    #else
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    3d1c:	697b      	ldr	r3, [r7, #20]
    3d1e:	f240 1235 	movw	r2, #309	; 0x135
    3d22:	605a      	str	r2, [r3, #4]
    pn->nodes[0] = (uintptr_t)obj;
    3d24:	687a      	ldr	r2, [r7, #4]
    3d26:	697b      	ldr	r3, [r7, #20]
    3d28:	609a      	str	r2, [r3, #8]
    #endif
    return (mp_parse_node_t)pn;
    3d2a:	697b      	ldr	r3, [r7, #20]
}
    3d2c:	4618      	mov	r0, r3
    3d2e:	3718      	adds	r7, #24
    3d30:	46bd      	mov	sp, r7
    3d32:	bd80      	pop	{r7, pc}

00003d34 <mp_parse_node_new_small_int_checked>:

STATIC mp_parse_node_t mp_parse_node_new_small_int_checked(parser_t *parser, mp_obj_t o_val) {
    3d34:	b580      	push	{r7, lr}
    3d36:	b084      	sub	sp, #16
    3d38:	af00      	add	r7, sp, #0
    3d3a:	6078      	str	r0, [r7, #4]
    3d3c:	6039      	str	r1, [r7, #0]
    (void)parser;
    mp_int_t val = MP_OBJ_SMALL_INT_VALUE(o_val);
    3d3e:	683b      	ldr	r3, [r7, #0]
    3d40:	105b      	asrs	r3, r3, #1
    3d42:	60fb      	str	r3, [r7, #12]
    // A parse node is only 32-bits and the small-int value must fit in 31-bits
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
    3d44:	68f8      	ldr	r0, [r7, #12]
    3d46:	f7ff fd61 	bl	380c <mp_parse_node_new_small_int>
    3d4a:	4603      	mov	r3, r0
}
    3d4c:	4618      	mov	r0, r3
    3d4e:	3710      	adds	r7, #16
    3d50:	46bd      	mov	sp, r7
    3d52:	bd80      	pop	{r7, pc}

00003d54 <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    3d54:	b580      	push	{r7, lr}
    3d56:	b08c      	sub	sp, #48	; 0x30
    3d58:	af02      	add	r7, sp, #8
    3d5a:	6078      	str	r0, [r7, #4]
    3d5c:	460b      	mov	r3, r1
    3d5e:	70fb      	strb	r3, [r7, #3]
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    3d60:	687b      	ldr	r3, [r7, #4]
    3d62:	699b      	ldr	r3, [r3, #24]
    3d64:	61fb      	str	r3, [r7, #28]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    3d66:	69fb      	ldr	r3, [r7, #28]
    3d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d6a:	2b07      	cmp	r3, #7
    3d6c:	d10f      	bne.n	3d8e <push_result_token+0x3a>
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3d6e:	69fb      	ldr	r3, [r7, #28]
    3d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3d72:	69fb      	ldr	r3, [r7, #28]
    3d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d76:	4619      	mov	r1, r3
    3d78:	4610      	mov	r0, r2
    3d7a:	f7fd f96d 	bl	1058 <qstr_from_strn>
    3d7e:	61b8      	str	r0, [r7, #24]
        } else {
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
    3d80:	69bb      	ldr	r3, [r7, #24]
    3d82:	4619      	mov	r1, r3
    3d84:	2002      	movs	r0, #2
    3d86:	f7ff fd4f 	bl	3828 <mp_parse_node_new_leaf>
    3d8a:	6278      	str	r0, [r7, #36]	; 0x24
    3d8c:	e08a      	b.n	3ea4 <push_result_token+0x150>
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    3d8e:	69fb      	ldr	r3, [r7, #28]
    3d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d92:	2b08      	cmp	r3, #8
    3d94:	d11d      	bne.n	3dd2 <push_result_token+0x7e>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    3d96:	69fb      	ldr	r3, [r7, #28]
    3d98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3d9a:	69fb      	ldr	r3, [r7, #28]
    3d9c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3d9e:	69fb      	ldr	r3, [r7, #28]
    3da0:	2200      	movs	r2, #0
    3da2:	f007 f8e1 	bl	af68 <mp_parse_num_integer>
    3da6:	6178      	str	r0, [r7, #20]
        if (MP_OBJ_IS_SMALL_INT(o)) {
    3da8:	6978      	ldr	r0, [r7, #20]
    3daa:	f7ff fd0b 	bl	37c4 <MP_OBJ_IS_SMALL_INT>
    3dae:	4603      	mov	r3, r0
    3db0:	2b00      	cmp	r3, #0
    3db2:	d005      	beq.n	3dc0 <push_result_token+0x6c>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    3db4:	6979      	ldr	r1, [r7, #20]
    3db6:	6878      	ldr	r0, [r7, #4]
    3db8:	f7ff ffbc 	bl	3d34 <mp_parse_node_new_small_int_checked>
    3dbc:	6278      	str	r0, [r7, #36]	; 0x24
    3dbe:	e071      	b.n	3ea4 <push_result_token+0x150>
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
    3dc0:	69fb      	ldr	r3, [r7, #28]
    3dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3dc4:	697a      	ldr	r2, [r7, #20]
    3dc6:	4619      	mov	r1, r3
    3dc8:	6878      	ldr	r0, [r7, #4]
    3dca:	f7ff ff99 	bl	3d00 <make_node_const_object>
    3dce:	6278      	str	r0, [r7, #36]	; 0x24
    3dd0:	e068      	b.n	3ea4 <push_result_token+0x150>
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    3dd2:	69fb      	ldr	r3, [r7, #28]
    3dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3dd6:	2b09      	cmp	r3, #9
    3dd8:	d113      	bne.n	3e02 <push_result_token+0xae>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    3dda:	69fb      	ldr	r3, [r7, #28]
    3ddc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3dde:	69fb      	ldr	r3, [r7, #28]
    3de0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3de2:	69fb      	ldr	r3, [r7, #28]
    3de4:	9300      	str	r3, [sp, #0]
    3de6:	2300      	movs	r3, #0
    3de8:	2201      	movs	r2, #1
    3dea:	f007 f9a5 	bl	b138 <mp_parse_num_decimal>
    3dee:	6138      	str	r0, [r7, #16]
        pn = make_node_const_object(parser, lex->tok_line, o);
    3df0:	69fb      	ldr	r3, [r7, #28]
    3df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3df4:	693a      	ldr	r2, [r7, #16]
    3df6:	4619      	mov	r1, r3
    3df8:	6878      	ldr	r0, [r7, #4]
    3dfa:	f7ff ff81 	bl	3d00 <make_node_const_object>
    3dfe:	6278      	str	r0, [r7, #36]	; 0x24
    3e00:	e050      	b.n	3ea4 <push_result_token+0x150>
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e02:	69fb      	ldr	r3, [r7, #28]
    3e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e06:	2b0a      	cmp	r3, #10
    3e08:	d003      	beq.n	3e12 <push_result_token+0xbe>
    3e0a:	69fb      	ldr	r3, [r7, #28]
    3e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e0e:	2b0b      	cmp	r3, #11
    3e10:	d141      	bne.n	3e96 <push_result_token+0x142>
        // Don't automatically intern all strings/bytes.  doc strings (which are usually large)
        // will be discarded by the compiler, and so we shouldn't intern them.
        qstr qst = MP_QSTR_NULL;
    3e12:	2300      	movs	r3, #0
    3e14:	623b      	str	r3, [r7, #32]
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    3e16:	69fb      	ldr	r3, [r7, #28]
    3e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e1a:	2b0a      	cmp	r3, #10
    3e1c:	d809      	bhi.n	3e32 <push_result_token+0xde>
            // intern short strings
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3e1e:	69fb      	ldr	r3, [r7, #28]
    3e20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3e22:	69fb      	ldr	r3, [r7, #28]
    3e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e26:	4619      	mov	r1, r3
    3e28:	4610      	mov	r0, r2
    3e2a:	f7fd f915 	bl	1058 <qstr_from_strn>
    3e2e:	6238      	str	r0, [r7, #32]
    3e30:	e008      	b.n	3e44 <push_result_token+0xf0>
        } else {
            // check if this string is already interned
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    3e32:	69fb      	ldr	r3, [r7, #28]
    3e34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3e36:	69fb      	ldr	r3, [r7, #28]
    3e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e3a:	4619      	mov	r1, r3
    3e3c:	4610      	mov	r0, r2
    3e3e:	f7fd f8a7 	bl	f90 <qstr_find_strn>
    3e42:	6238      	str	r0, [r7, #32]
        }
        if (qst != MP_QSTR_NULL) {
    3e44:	6a3b      	ldr	r3, [r7, #32]
    3e46:	2b00      	cmp	r3, #0
    3e48:	d00d      	beq.n	3e66 <push_result_token+0x112>
            // qstr exists, make a leaf node
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    3e4a:	69fb      	ldr	r3, [r7, #28]
    3e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e4e:	2b0a      	cmp	r3, #10
    3e50:	d101      	bne.n	3e56 <push_result_token+0x102>
    3e52:	2306      	movs	r3, #6
    3e54:	e000      	b.n	3e58 <push_result_token+0x104>
    3e56:	230a      	movs	r3, #10
    3e58:	6a3a      	ldr	r2, [r7, #32]
    3e5a:	4611      	mov	r1, r2
    3e5c:	4618      	mov	r0, r3
    3e5e:	f7ff fce3 	bl	3828 <mp_parse_node_new_leaf>
    3e62:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e64:	e01e      	b.n	3ea4 <push_result_token+0x150>
        } else {
            // not interned, make a node holding a pointer to the string/bytes object
            mp_obj_t o = mp_obj_new_str_copy(
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    3e66:	69fb      	ldr	r3, [r7, #28]
    3e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    3e6a:	2b0a      	cmp	r3, #10
    3e6c:	d101      	bne.n	3e72 <push_result_token+0x11e>
    3e6e:	4811      	ldr	r0, [pc, #68]	; (3eb4 <push_result_token+0x160>)
    3e70:	e000      	b.n	3e74 <push_result_token+0x120>
    3e72:	4811      	ldr	r0, [pc, #68]	; (3eb8 <push_result_token+0x164>)
                (const byte*)lex->vstr.buf, lex->vstr.len);
    3e74:	69fb      	ldr	r3, [r7, #28]
    3e76:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            mp_obj_t o = mp_obj_new_str_copy(
    3e78:	69fb      	ldr	r3, [r7, #28]
    3e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e7c:	461a      	mov	r2, r3
    3e7e:	f011 f9c9 	bl	15214 <mp_obj_new_str_copy>
    3e82:	60f8      	str	r0, [r7, #12]
            pn = make_node_const_object(parser, lex->tok_line, o);
    3e84:	69fb      	ldr	r3, [r7, #28]
    3e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e88:	68fa      	ldr	r2, [r7, #12]
    3e8a:	4619      	mov	r1, r3
    3e8c:	6878      	ldr	r0, [r7, #4]
    3e8e:	f7ff ff37 	bl	3d00 <make_node_const_object>
    3e92:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e94:	e006      	b.n	3ea4 <push_result_token+0x150>
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    3e96:	69fb      	ldr	r3, [r7, #28]
    3e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e9a:	4619      	mov	r1, r3
    3e9c:	200e      	movs	r0, #14
    3e9e:	f7ff fcc3 	bl	3828 <mp_parse_node_new_leaf>
    3ea2:	6278      	str	r0, [r7, #36]	; 0x24
    }
    push_result_node(parser, pn);
    3ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3ea6:	6878      	ldr	r0, [r7, #4]
    3ea8:	f7ff fefc 	bl	3ca4 <push_result_node>
}
    3eac:	bf00      	nop
    3eae:	3728      	adds	r7, #40	; 0x28
    3eb0:	46bd      	mov	sp, r7
    3eb2:	bd80      	pop	{r7, pc}
    3eb4:	00021b30 	.word	0x00021b30
    3eb8:	00021b6c 	.word	0x00021b6c

00003ebc <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b08a      	sub	sp, #40	; 0x28
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	60f8      	str	r0, [r7, #12]
    3ec4:	460b      	mov	r3, r1
    3ec6:	607a      	str	r2, [r7, #4]
    3ec8:	72fb      	strb	r3, [r7, #11]
    if (rule_id == RULE_or_test
    3eca:	7afb      	ldrb	r3, [r7, #11]
    3ecc:	2b1c      	cmp	r3, #28
    3ece:	d002      	beq.n	3ed6 <fold_logical_constants+0x1a>
        || rule_id == RULE_and_test) {
    3ed0:	7afb      	ldrb	r3, [r7, #11]
    3ed2:	2b1d      	cmp	r3, #29
    3ed4:	d169      	bne.n	3faa <fold_logical_constants+0xee>
        // folding for binary logical ops: or and
        size_t copy_to = *num_args;
    3ed6:	687b      	ldr	r3, [r7, #4]
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ede:	623b      	str	r3, [r7, #32]
    3ee0:	e03c      	b.n	3f5c <fold_logical_constants+0xa0>
            mp_parse_node_t pn = peek_result(parser, --i);
    3ee2:	6a3b      	ldr	r3, [r7, #32]
    3ee4:	3b01      	subs	r3, #1
    3ee6:	623b      	str	r3, [r7, #32]
    3ee8:	6a39      	ldr	r1, [r7, #32]
    3eea:	68f8      	ldr	r0, [r7, #12]
    3eec:	f7ff feb2 	bl	3c54 <peek_result>
    3ef0:	6178      	str	r0, [r7, #20]
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    3ef2:	68fb      	ldr	r3, [r7, #12]
    3ef4:	695a      	ldr	r2, [r3, #20]
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	6919      	ldr	r1, [r3, #16]
    3efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3efc:	1acb      	subs	r3, r1, r3
    3efe:	009b      	lsls	r3, r3, #2
    3f00:	4413      	add	r3, r2
    3f02:	697a      	ldr	r2, [r7, #20]
    3f04:	601a      	str	r2, [r3, #0]
            if (i == 0) {
    3f06:	6a3b      	ldr	r3, [r7, #32]
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d02b      	beq.n	3f64 <fold_logical_constants+0xa8>
                // always need to keep the last value
                break;
            }
            if (rule_id == RULE_or_test) {
    3f0c:	7afb      	ldrb	r3, [r7, #11]
    3f0e:	2b1c      	cmp	r3, #28
    3f10:	d112      	bne.n	3f38 <fold_logical_constants+0x7c>
                if (mp_parse_node_is_const_true(pn)) {
    3f12:	6978      	ldr	r0, [r7, #20]
    3f14:	f7ff fddc 	bl	3ad0 <mp_parse_node_is_const_true>
    3f18:	4603      	mov	r3, r0
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d124      	bne.n	3f68 <fold_logical_constants+0xac>
                    //
                    break;
                } else if (!mp_parse_node_is_const_false(pn)) {
    3f1e:	6978      	ldr	r0, [r7, #20]
    3f20:	f7ff fdba 	bl	3a98 <mp_parse_node_is_const_false>
    3f24:	4603      	mov	r3, r0
    3f26:	f083 0301 	eor.w	r3, r3, #1
    3f2a:	b2db      	uxtb	r3, r3
    3f2c:	2b00      	cmp	r3, #0
    3f2e:	d015      	beq.n	3f5c <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f32:	3b01      	subs	r3, #1
    3f34:	627b      	str	r3, [r7, #36]	; 0x24
    3f36:	e011      	b.n	3f5c <fold_logical_constants+0xa0>
                }
            } else {
                // RULE_and_test
                if (mp_parse_node_is_const_false(pn)) {
    3f38:	6978      	ldr	r0, [r7, #20]
    3f3a:	f7ff fdad 	bl	3a98 <mp_parse_node_is_const_false>
    3f3e:	4603      	mov	r3, r0
    3f40:	2b00      	cmp	r3, #0
    3f42:	d113      	bne.n	3f6c <fold_logical_constants+0xb0>
                    break;
                } else if (!mp_parse_node_is_const_true(pn)) {
    3f44:	6978      	ldr	r0, [r7, #20]
    3f46:	f7ff fdc3 	bl	3ad0 <mp_parse_node_is_const_true>
    3f4a:	4603      	mov	r3, r0
    3f4c:	f083 0301 	eor.w	r3, r3, #1
    3f50:	b2db      	uxtb	r3, r3
    3f52:	2b00      	cmp	r3, #0
    3f54:	d002      	beq.n	3f5c <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f58:	3b01      	subs	r3, #1
    3f5a:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3f5c:	6a3b      	ldr	r3, [r7, #32]
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d1bf      	bne.n	3ee2 <fold_logical_constants+0x26>
    3f62:	e004      	b.n	3f6e <fold_logical_constants+0xb2>
                break;
    3f64:	bf00      	nop
    3f66:	e002      	b.n	3f6e <fold_logical_constants+0xb2>
                    break;
    3f68:	bf00      	nop
    3f6a:	e000      	b.n	3f6e <fold_logical_constants+0xb2>
                    break;
    3f6c:	bf00      	nop
                }
            }
        }
        copy_to -= 1; // copy_to now contains number of args to pop
    3f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f70:	3b01      	subs	r3, #1
    3f72:	627b      	str	r3, [r7, #36]	; 0x24

        // pop and discard all the short-circuited expressions
        for (size_t i = 0; i < copy_to; ++i) {
    3f74:	2300      	movs	r3, #0
    3f76:	61fb      	str	r3, [r7, #28]
    3f78:	e005      	b.n	3f86 <fold_logical_constants+0xca>
            pop_result(parser);
    3f7a:	68f8      	ldr	r0, [r7, #12]
    3f7c:	f7ff fe44 	bl	3c08 <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    3f80:	69fb      	ldr	r3, [r7, #28]
    3f82:	3301      	adds	r3, #1
    3f84:	61fb      	str	r3, [r7, #28]
    3f86:	69fa      	ldr	r2, [r7, #28]
    3f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f8a:	429a      	cmp	r2, r3
    3f8c:	d3f5      	bcc.n	3f7a <fold_logical_constants+0xbe>
        }
        *num_args -= copy_to;
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	681a      	ldr	r2, [r3, #0]
    3f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f94:	1ad2      	subs	r2, r2, r3
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	601a      	str	r2, [r3, #0]

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	2b01      	cmp	r3, #1
    3fa0:	bf0c      	ite	eq
    3fa2:	2301      	moveq	r3, #1
    3fa4:	2300      	movne	r3, #0
    3fa6:	b2db      	uxtb	r3, r3
    3fa8:	e02b      	b.n	4002 <fold_logical_constants+0x146>

    } else if (rule_id == RULE_not_test_2) {
    3faa:	7afb      	ldrb	r3, [r7, #11]
    3fac:	2b1e      	cmp	r3, #30
    3fae:	d127      	bne.n	4000 <fold_logical_constants+0x144>
        // folding for unary logical op: not
        mp_parse_node_t pn = peek_result(parser, 0);
    3fb0:	2100      	movs	r1, #0
    3fb2:	68f8      	ldr	r0, [r7, #12]
    3fb4:	f7ff fe4e 	bl	3c54 <peek_result>
    3fb8:	61b8      	str	r0, [r7, #24]
        if (mp_parse_node_is_const_false(pn)) {
    3fba:	69b8      	ldr	r0, [r7, #24]
    3fbc:	f7ff fd6c 	bl	3a98 <mp_parse_node_is_const_false>
    3fc0:	4603      	mov	r3, r0
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d005      	beq.n	3fd2 <fold_logical_constants+0x116>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    3fc6:	210f      	movs	r1, #15
    3fc8:	200e      	movs	r0, #14
    3fca:	f7ff fc2d 	bl	3828 <mp_parse_node_new_leaf>
    3fce:	61b8      	str	r0, [r7, #24]
    3fd0:	e00d      	b.n	3fee <fold_logical_constants+0x132>
        } else if (mp_parse_node_is_const_true(pn)) {
    3fd2:	69b8      	ldr	r0, [r7, #24]
    3fd4:	f7ff fd7c 	bl	3ad0 <mp_parse_node_is_const_true>
    3fd8:	4603      	mov	r3, r0
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d005      	beq.n	3fea <fold_logical_constants+0x12e>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    3fde:	210d      	movs	r1, #13
    3fe0:	200e      	movs	r0, #14
    3fe2:	f7ff fc21 	bl	3828 <mp_parse_node_new_leaf>
    3fe6:	61b8      	str	r0, [r7, #24]
    3fe8:	e001      	b.n	3fee <fold_logical_constants+0x132>
        } else {
            return false;
    3fea:	2300      	movs	r3, #0
    3fec:	e009      	b.n	4002 <fold_logical_constants+0x146>
        }
        pop_result(parser);
    3fee:	68f8      	ldr	r0, [r7, #12]
    3ff0:	f7ff fe0a 	bl	3c08 <pop_result>
        push_result_node(parser, pn);
    3ff4:	69b9      	ldr	r1, [r7, #24]
    3ff6:	68f8      	ldr	r0, [r7, #12]
    3ff8:	f7ff fe54 	bl	3ca4 <push_result_node>
        return true;
    3ffc:	2301      	movs	r3, #1
    3ffe:	e000      	b.n	4002 <fold_logical_constants+0x146>
    }

    return false;
    4000:	2300      	movs	r3, #0
}
    4002:	4618      	mov	r0, r3
    4004:	3728      	adds	r7, #40	; 0x28
    4006:	46bd      	mov	sp, r7
    4008:	bd80      	pop	{r7, pc}
    400a:	bf00      	nop

0000400c <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    400c:	b580      	push	{r7, lr}
    400e:	b094      	sub	sp, #80	; 0x50
    4010:	af00      	add	r7, sp, #0
    4012:	60f8      	str	r0, [r7, #12]
    4014:	460b      	mov	r3, r1
    4016:	607a      	str	r2, [r7, #4]
    4018:	72fb      	strb	r3, [r7, #11]
    // this code does folding of arbitrary integer expressions, eg 1 + 2 * 3 + 4
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
    401a:	7afb      	ldrb	r3, [r7, #11]
    401c:	2b21      	cmp	r3, #33	; 0x21
    401e:	d005      	beq.n	402c <fold_constants+0x20>
        || rule_id == RULE_xor_expr
    4020:	7afb      	ldrb	r3, [r7, #11]
    4022:	2b22      	cmp	r3, #34	; 0x22
    4024:	d002      	beq.n	402c <fold_constants+0x20>
        || rule_id == RULE_and_expr) {
    4026:	7afb      	ldrb	r3, [r7, #11]
    4028:	2b23      	cmp	r3, #35	; 0x23
    402a:	d149      	bne.n	40c0 <fold_constants+0xb4>
        // folding for binary ops: | ^ &
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	3b01      	subs	r3, #1
    4030:	4619      	mov	r1, r3
    4032:	68f8      	ldr	r0, [r7, #12]
    4034:	f7ff fe0e 	bl	3c54 <peek_result>
    4038:	6238      	str	r0, [r7, #32]
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    403a:	f107 031c 	add.w	r3, r7, #28
    403e:	4619      	mov	r1, r3
    4040:	6a38      	ldr	r0, [r7, #32]
    4042:	f7ff fd61 	bl	3b08 <mp_parse_node_get_int_maybe>
    4046:	4603      	mov	r3, r0
    4048:	f083 0301 	eor.w	r3, r3, #1
    404c:	b2db      	uxtb	r3, r3
    404e:	2b00      	cmp	r3, #0
    4050:	d001      	beq.n	4056 <fold_constants+0x4a>
            return false;
    4052:	2300      	movs	r3, #0
    4054:	e10a      	b.n	426c <fold_constants+0x260>
        }
        mp_binary_op_t op;
        if (rule_id == RULE_expr) {
    4056:	7afb      	ldrb	r3, [r7, #11]
    4058:	2b21      	cmp	r3, #33	; 0x21
    405a:	d102      	bne.n	4062 <fold_constants+0x56>
            op = MP_BINARY_OP_OR;
    405c:	2315      	movs	r3, #21
    405e:	64fb      	str	r3, [r7, #76]	; 0x4c
    4060:	e007      	b.n	4072 <fold_constants+0x66>
        } else if (rule_id == RULE_xor_expr) {
    4062:	7afb      	ldrb	r3, [r7, #11]
    4064:	2b22      	cmp	r3, #34	; 0x22
    4066:	d102      	bne.n	406e <fold_constants+0x62>
            op = MP_BINARY_OP_XOR;
    4068:	2316      	movs	r3, #22
    406a:	64fb      	str	r3, [r7, #76]	; 0x4c
    406c:	e001      	b.n	4072 <fold_constants+0x66>
        } else {
            op = MP_BINARY_OP_AND;
    406e:	2317      	movs	r3, #23
    4070:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	3b02      	subs	r3, #2
    4076:	64bb      	str	r3, [r7, #72]	; 0x48
    4078:	e01e      	b.n	40b8 <fold_constants+0xac>
            pn = peek_result(parser, i);
    407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    407c:	4619      	mov	r1, r3
    407e:	68f8      	ldr	r0, [r7, #12]
    4080:	f7ff fde8 	bl	3c54 <peek_result>
    4084:	6238      	str	r0, [r7, #32]
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    4086:	f107 0318 	add.w	r3, r7, #24
    408a:	4619      	mov	r1, r3
    408c:	6a38      	ldr	r0, [r7, #32]
    408e:	f7ff fd3b 	bl	3b08 <mp_parse_node_get_int_maybe>
    4092:	4603      	mov	r3, r0
    4094:	f083 0301 	eor.w	r3, r3, #1
    4098:	b2db      	uxtb	r3, r3
    409a:	2b00      	cmp	r3, #0
    409c:	d001      	beq.n	40a2 <fold_constants+0x96>
                return false;
    409e:	2300      	movs	r3, #0
    40a0:	e0e4      	b.n	426c <fold_constants+0x260>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    40a2:	69fb      	ldr	r3, [r7, #28]
    40a4:	69ba      	ldr	r2, [r7, #24]
    40a6:	4619      	mov	r1, r3
    40a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    40aa:	f007 fc1b 	bl	b8e4 <mp_binary_op>
    40ae:	4603      	mov	r3, r0
    40b0:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    40b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    40b4:	3b01      	subs	r3, #1
    40b6:	64bb      	str	r3, [r7, #72]	; 0x48
    40b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    40ba:	2b00      	cmp	r3, #0
    40bc:	dadd      	bge.n	407a <fold_constants+0x6e>
        || rule_id == RULE_and_expr) {
    40be:	e0ab      	b.n	4218 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_shift_expr
    40c0:	7afb      	ldrb	r3, [r7, #11]
    40c2:	2b24      	cmp	r3, #36	; 0x24
    40c4:	d005      	beq.n	40d2 <fold_constants+0xc6>
        || rule_id == RULE_arith_expr
    40c6:	7afb      	ldrb	r3, [r7, #11]
    40c8:	2b25      	cmp	r3, #37	; 0x25
    40ca:	d002      	beq.n	40d2 <fold_constants+0xc6>
        || rule_id == RULE_term) {
    40cc:	7afb      	ldrb	r3, [r7, #11]
    40ce:	2b26      	cmp	r3, #38	; 0x26
    40d0:	d163      	bne.n	419a <fold_constants+0x18e>
        // folding for binary ops: << >> + - * / % //
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	3b01      	subs	r3, #1
    40d6:	4619      	mov	r1, r3
    40d8:	68f8      	ldr	r0, [r7, #12]
    40da:	f7ff fdbb 	bl	3c54 <peek_result>
    40de:	6338      	str	r0, [r7, #48]	; 0x30
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    40e0:	f107 031c 	add.w	r3, r7, #28
    40e4:	4619      	mov	r1, r3
    40e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    40e8:	f7ff fd0e 	bl	3b08 <mp_parse_node_get_int_maybe>
    40ec:	4603      	mov	r3, r0
    40ee:	f083 0301 	eor.w	r3, r3, #1
    40f2:	b2db      	uxtb	r3, r3
    40f4:	2b00      	cmp	r3, #0
    40f6:	d001      	beq.n	40fc <fold_constants+0xf0>
            return false;
    40f8:	2300      	movs	r3, #0
    40fa:	e0b7      	b.n	426c <fold_constants+0x260>
        }
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	3b02      	subs	r3, #2
    4100:	647b      	str	r3, [r7, #68]	; 0x44
    4102:	e046      	b.n	4192 <fold_constants+0x186>
            pn = peek_result(parser, i - 1);
    4104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4106:	3b01      	subs	r3, #1
    4108:	4619      	mov	r1, r3
    410a:	68f8      	ldr	r0, [r7, #12]
    410c:	f7ff fda2 	bl	3c54 <peek_result>
    4110:	6338      	str	r0, [r7, #48]	; 0x30
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    4112:	f107 0314 	add.w	r3, r7, #20
    4116:	4619      	mov	r1, r3
    4118:	6b38      	ldr	r0, [r7, #48]	; 0x30
    411a:	f7ff fcf5 	bl	3b08 <mp_parse_node_get_int_maybe>
    411e:	4603      	mov	r3, r0
    4120:	f083 0301 	eor.w	r3, r3, #1
    4124:	b2db      	uxtb	r3, r3
    4126:	2b00      	cmp	r3, #0
    4128:	d001      	beq.n	412e <fold_constants+0x122>
                return false;
    412a:	2300      	movs	r3, #0
    412c:	e09e      	b.n	426c <fold_constants+0x260>
            }
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    412e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4130:	4619      	mov	r1, r3
    4132:	68f8      	ldr	r0, [r7, #12]
    4134:	f7ff fd8e 	bl	3c54 <peek_result>
    4138:	4603      	mov	r3, r0
    413a:	091b      	lsrs	r3, r3, #4
    413c:	62fb      	str	r3, [r7, #44]	; 0x2c
                255,//MP_BINARY_OP_LESS
                MP_BINARY_OP_LSHIFT,
                255,//MP_BINARY_OP_MORE
                MP_BINARY_OP_RSHIFT,
            };
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4140:	3b2f      	subs	r3, #47	; 0x2f
    4142:	4a4c      	ldr	r2, [pc, #304]	; (4274 <fold_constants+0x268>)
    4144:	5cd3      	ldrb	r3, [r2, r3]
    4146:	62bb      	str	r3, [r7, #40]	; 0x28
            if (op == (mp_binary_op_t)255) {
    4148:	6abb      	ldr	r3, [r7, #40]	; 0x28
    414a:	2bff      	cmp	r3, #255	; 0xff
    414c:	d101      	bne.n	4152 <fold_constants+0x146>
                return false;
    414e:	2300      	movs	r3, #0
    4150:	e08c      	b.n	426c <fold_constants+0x260>
            }
            int rhs_sign = mp_obj_int_sign(arg1);
    4152:	697b      	ldr	r3, [r7, #20]
    4154:	4618      	mov	r0, r3
    4156:	f00c fb93 	bl	10880 <mp_obj_int_sign>
    415a:	6278      	str	r0, [r7, #36]	; 0x24
            if (op <= MP_BINARY_OP_RSHIFT) {
    415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    415e:	2b19      	cmp	r3, #25
    4160:	d804      	bhi.n	416c <fold_constants+0x160>
                // << and >> can't have negative rhs
                if (rhs_sign < 0) {
    4162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4164:	2b00      	cmp	r3, #0
    4166:	da09      	bge.n	417c <fold_constants+0x170>
                    return false;
    4168:	2300      	movs	r3, #0
    416a:	e07f      	b.n	426c <fold_constants+0x260>
                }
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    416e:	2b1c      	cmp	r3, #28
    4170:	d904      	bls.n	417c <fold_constants+0x170>
                // % and // can't have zero rhs
                if (rhs_sign == 0) {
    4172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4174:	2b00      	cmp	r3, #0
    4176:	d101      	bne.n	417c <fold_constants+0x170>
                    return false;
    4178:	2300      	movs	r3, #0
    417a:	e077      	b.n	426c <fold_constants+0x260>
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    417c:	69fb      	ldr	r3, [r7, #28]
    417e:	697a      	ldr	r2, [r7, #20]
    4180:	4619      	mov	r1, r3
    4182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4184:	f007 fbae 	bl	b8e4 <mp_binary_op>
    4188:	4603      	mov	r3, r0
    418a:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    418c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    418e:	3b02      	subs	r3, #2
    4190:	647b      	str	r3, [r7, #68]	; 0x44
    4192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4194:	2b00      	cmp	r3, #0
    4196:	dcb5      	bgt.n	4104 <fold_constants+0xf8>
        || rule_id == RULE_term) {
    4198:	e03e      	b.n	4218 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_factor_2) {
    419a:	7afb      	ldrb	r3, [r7, #11]
    419c:	2b27      	cmp	r3, #39	; 0x27
    419e:	d139      	bne.n	4214 <fold_constants+0x208>
        // folding for unary ops: + - ~
        mp_parse_node_t pn = peek_result(parser, 0);
    41a0:	2100      	movs	r1, #0
    41a2:	68f8      	ldr	r0, [r7, #12]
    41a4:	f7ff fd56 	bl	3c54 <peek_result>
    41a8:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    41aa:	f107 031c 	add.w	r3, r7, #28
    41ae:	4619      	mov	r1, r3
    41b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    41b2:	f7ff fca9 	bl	3b08 <mp_parse_node_get_int_maybe>
    41b6:	4603      	mov	r3, r0
    41b8:	f083 0301 	eor.w	r3, r3, #1
    41bc:	b2db      	uxtb	r3, r3
    41be:	2b00      	cmp	r3, #0
    41c0:	d001      	beq.n	41c6 <fold_constants+0x1ba>
            return false;
    41c2:	2300      	movs	r3, #0
    41c4:	e052      	b.n	426c <fold_constants+0x260>
        }
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    41c6:	2101      	movs	r1, #1
    41c8:	68f8      	ldr	r0, [r7, #12]
    41ca:	f7ff fd43 	bl	3c54 <peek_result>
    41ce:	4603      	mov	r3, r0
    41d0:	091b      	lsrs	r3, r3, #4
    41d2:	637b      	str	r3, [r7, #52]	; 0x34
        mp_unary_op_t op;
        if (tok == MP_TOKEN_OP_PLUS) {
    41d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41d6:	2b2f      	cmp	r3, #47	; 0x2f
    41d8:	d102      	bne.n	41e0 <fold_constants+0x1d4>
            op = MP_UNARY_OP_POSITIVE;
    41da:	2300      	movs	r3, #0
    41dc:	643b      	str	r3, [r7, #64]	; 0x40
    41de:	e011      	b.n	4204 <fold_constants+0x1f8>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    41e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41e2:	2b30      	cmp	r3, #48	; 0x30
    41e4:	d102      	bne.n	41ec <fold_constants+0x1e0>
            op = MP_UNARY_OP_NEGATIVE;
    41e6:	2301      	movs	r3, #1
    41e8:	643b      	str	r3, [r7, #64]	; 0x40
    41ea:	e00b      	b.n	4204 <fold_constants+0x1f8>
        } else {
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    41ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41ee:	2b3d      	cmp	r3, #61	; 0x3d
    41f0:	d006      	beq.n	4200 <fold_constants+0x1f4>
    41f2:	4b21      	ldr	r3, [pc, #132]	; (4278 <fold_constants+0x26c>)
    41f4:	4a21      	ldr	r2, [pc, #132]	; (427c <fold_constants+0x270>)
    41f6:	f240 21b3 	movw	r1, #691	; 0x2b3
    41fa:	4821      	ldr	r0, [pc, #132]	; (4280 <fold_constants+0x274>)
    41fc:	f017 f8ce 	bl	1b39c <__assert_func>
            op = MP_UNARY_OP_INVERT;
    4200:	2302      	movs	r3, #2
    4202:	643b      	str	r3, [r7, #64]	; 0x40
        }
        arg0 = mp_unary_op(op, arg0);
    4204:	69fb      	ldr	r3, [r7, #28]
    4206:	4619      	mov	r1, r3
    4208:	6c38      	ldr	r0, [r7, #64]	; 0x40
    420a:	f007 fa85 	bl	b718 <mp_unary_op>
    420e:	4603      	mov	r3, r0
    4210:	61fb      	str	r3, [r7, #28]
    4212:	e001      	b.n	4218 <fold_constants+0x20c>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    4214:	2300      	movs	r3, #0
    4216:	e029      	b.n	426c <fold_constants+0x260>
    }

    // success folding this rule

    for (size_t i = num_args; i > 0; i--) {
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	63fb      	str	r3, [r7, #60]	; 0x3c
    421c:	e005      	b.n	422a <fold_constants+0x21e>
        pop_result(parser);
    421e:	68f8      	ldr	r0, [r7, #12]
    4220:	f7ff fcf2 	bl	3c08 <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    4224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4226:	3b01      	subs	r3, #1
    4228:	63fb      	str	r3, [r7, #60]	; 0x3c
    422a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    422c:	2b00      	cmp	r3, #0
    422e:	d1f6      	bne.n	421e <fold_constants+0x212>
    }
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    4230:	69fb      	ldr	r3, [r7, #28]
    4232:	4618      	mov	r0, r3
    4234:	f7ff fac6 	bl	37c4 <MP_OBJ_IS_SMALL_INT>
    4238:	4603      	mov	r3, r0
    423a:	2b00      	cmp	r3, #0
    423c:	d00a      	beq.n	4254 <fold_constants+0x248>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    423e:	69fb      	ldr	r3, [r7, #28]
    4240:	4619      	mov	r1, r3
    4242:	68f8      	ldr	r0, [r7, #12]
    4244:	f7ff fd76 	bl	3d34 <mp_parse_node_new_small_int_checked>
    4248:	4603      	mov	r3, r0
    424a:	4619      	mov	r1, r3
    424c:	68f8      	ldr	r0, [r7, #12]
    424e:	f7ff fd29 	bl	3ca4 <push_result_node>
    4252:	e00a      	b.n	426a <fold_constants+0x25e>
    } else {
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    4254:	69fb      	ldr	r3, [r7, #28]
    4256:	461a      	mov	r2, r3
    4258:	2100      	movs	r1, #0
    425a:	68f8      	ldr	r0, [r7, #12]
    425c:	f7ff fd50 	bl	3d00 <make_node_const_object>
    4260:	4603      	mov	r3, r0
    4262:	4619      	mov	r1, r3
    4264:	68f8      	ldr	r0, [r7, #12]
    4266:	f7ff fd1d 	bl	3ca4 <push_result_node>
    }

    return true;
    426a:	2301      	movs	r3, #1
}
    426c:	4618      	mov	r0, r3
    426e:	3750      	adds	r7, #80	; 0x50
    4270:	46bd      	mov	sp, r7
    4272:	bd80      	pop	{r7, pc}
    4274:	0001e200 	.word	0x0001e200
    4278:	0001e0b0 	.word	0x0001e0b0
    427c:	0001e20c 	.word	0x0001e20c
    4280:	0001e05c 	.word	0x0001e05c

00004284 <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    4284:	b590      	push	{r4, r7, lr}
    4286:	b089      	sub	sp, #36	; 0x24
    4288:	af00      	add	r7, sp, #0
    428a:	60f8      	str	r0, [r7, #12]
    428c:	60b9      	str	r1, [r7, #8]
    428e:	603b      	str	r3, [r7, #0]
    4290:	4613      	mov	r3, r2
    4292:	71fb      	strb	r3, [r7, #7]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    4294:	79fb      	ldrb	r3, [r7, #7]
    4296:	2b2a      	cmp	r3, #42	; 0x2a
    4298:	d114      	bne.n	42c4 <push_result_rule+0x40>
        // there should be just 1 arg for this rule
        mp_parse_node_t pn = peek_result(parser, 0);
    429a:	2100      	movs	r1, #0
    429c:	68f8      	ldr	r0, [r7, #12]
    429e:	f7ff fcd9 	bl	3c54 <peek_result>
    42a2:	61b8      	str	r0, [r7, #24]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    42a4:	69bb      	ldr	r3, [r7, #24]
    42a6:	2b00      	cmp	r3, #0
    42a8:	d00c      	beq.n	42c4 <push_result_rule+0x40>
            // need to keep parenthesis for ()
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    42aa:	69bb      	ldr	r3, [r7, #24]
    42ac:	2b00      	cmp	r3, #0
    42ae:	d045      	beq.n	433c <push_result_rule+0xb8>
    42b0:	69bb      	ldr	r3, [r7, #24]
    42b2:	f003 0303 	and.w	r3, r3, #3
    42b6:	2b00      	cmp	r3, #0
    42b8:	d140      	bne.n	433c <push_result_rule+0xb8>
    42ba:	69bb      	ldr	r3, [r7, #24]
    42bc:	685b      	ldr	r3, [r3, #4]
    42be:	b2db      	uxtb	r3, r3
    42c0:	2b8a      	cmp	r3, #138	; 0x8a
    42c2:	d13b      	bne.n	433c <push_result_rule+0xb8>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    42c4:	463a      	mov	r2, r7
    42c6:	79fb      	ldrb	r3, [r7, #7]
    42c8:	4619      	mov	r1, r3
    42ca:	68f8      	ldr	r0, [r7, #12]
    42cc:	f7ff fdf6 	bl	3ebc <fold_logical_constants>
    42d0:	4603      	mov	r3, r0
    42d2:	2b00      	cmp	r3, #0
    42d4:	d134      	bne.n	4340 <push_result_rule+0xbc>
        // we folded this rule so return straight away
        return;
    }
    if (fold_constants(parser, rule_id, num_args)) {
    42d6:	683a      	ldr	r2, [r7, #0]
    42d8:	79fb      	ldrb	r3, [r7, #7]
    42da:	4619      	mov	r1, r3
    42dc:	68f8      	ldr	r0, [r7, #12]
    42de:	f7ff fe95 	bl	400c <fold_constants>
    42e2:	4603      	mov	r3, r0
    42e4:	2b00      	cmp	r3, #0
    42e6:	d12d      	bne.n	4344 <push_result_rule+0xc0>
        // we folded this rule so return straight away
        return;
    }
    #endif

    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    42e8:	683b      	ldr	r3, [r7, #0]
    42ea:	3302      	adds	r3, #2
    42ec:	009b      	lsls	r3, r3, #2
    42ee:	4619      	mov	r1, r3
    42f0:	68f8      	ldr	r0, [r7, #12]
    42f2:	f7ff fac9 	bl	3888 <parser_alloc>
    42f6:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    42f8:	697b      	ldr	r3, [r7, #20]
    42fa:	68ba      	ldr	r2, [r7, #8]
    42fc:	601a      	str	r2, [r3, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    42fe:	79fa      	ldrb	r2, [r7, #7]
    4300:	683b      	ldr	r3, [r7, #0]
    4302:	021b      	lsls	r3, r3, #8
    4304:	431a      	orrs	r2, r3
    4306:	697b      	ldr	r3, [r7, #20]
    4308:	605a      	str	r2, [r3, #4]
    for (size_t i = num_args; i > 0; i--) {
    430a:	683b      	ldr	r3, [r7, #0]
    430c:	61fb      	str	r3, [r7, #28]
    430e:	e00c      	b.n	432a <push_result_rule+0xa6>
        pn->nodes[i - 1] = pop_result(parser);
    4310:	69fb      	ldr	r3, [r7, #28]
    4312:	1e5c      	subs	r4, r3, #1
    4314:	68f8      	ldr	r0, [r7, #12]
    4316:	f7ff fc77 	bl	3c08 <pop_result>
    431a:	4601      	mov	r1, r0
    431c:	697b      	ldr	r3, [r7, #20]
    431e:	1ca2      	adds	r2, r4, #2
    4320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    4324:	69fb      	ldr	r3, [r7, #28]
    4326:	3b01      	subs	r3, #1
    4328:	61fb      	str	r3, [r7, #28]
    432a:	69fb      	ldr	r3, [r7, #28]
    432c:	2b00      	cmp	r3, #0
    432e:	d1ef      	bne.n	4310 <push_result_rule+0x8c>
    }
    push_result_node(parser, (mp_parse_node_t)pn);
    4330:	697b      	ldr	r3, [r7, #20]
    4332:	4619      	mov	r1, r3
    4334:	68f8      	ldr	r0, [r7, #12]
    4336:	f7ff fcb5 	bl	3ca4 <push_result_node>
    433a:	e004      	b.n	4346 <push_result_rule+0xc2>
            return;
    433c:	bf00      	nop
    433e:	e002      	b.n	4346 <push_result_rule+0xc2>
        return;
    4340:	bf00      	nop
    4342:	e000      	b.n	4346 <push_result_rule+0xc2>
        return;
    4344:	bf00      	nop
}
    4346:	3724      	adds	r7, #36	; 0x24
    4348:	46bd      	mov	sp, r7
    434a:	bd90      	pop	{r4, r7, pc}

0000434c <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    434c:	b580      	push	{r7, lr}
    434e:	b0a2      	sub	sp, #136	; 0x88
    4350:	af00      	add	r7, sp, #0
    4352:	60f8      	str	r0, [r7, #12]
    4354:	60b9      	str	r1, [r7, #8]
    4356:	607a      	str	r2, [r7, #4]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    4358:	2340      	movs	r3, #64	; 0x40
    435a:	61fb      	str	r3, [r7, #28]
    parser.rule_stack_top = 0;
    435c:	2300      	movs	r3, #0
    435e:	623b      	str	r3, [r7, #32]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    4360:	69fb      	ldr	r3, [r7, #28]
    4362:	00db      	lsls	r3, r3, #3
    4364:	4618      	mov	r0, r3
    4366:	f7fb ffd9 	bl	31c <m_malloc>
    436a:	4603      	mov	r3, r0
    436c:	627b      	str	r3, [r7, #36]	; 0x24

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    436e:	2320      	movs	r3, #32
    4370:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.result_stack_top = 0;
    4372:	2300      	movs	r3, #0
    4374:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    4376:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4378:	009b      	lsls	r3, r3, #2
    437a:	4618      	mov	r0, r3
    437c:	f7fb ffce 	bl	31c <m_malloc>
    4380:	4603      	mov	r3, r0
    4382:	633b      	str	r3, [r7, #48]	; 0x30

    parser.lexer = lex;
    4384:	68bb      	ldr	r3, [r7, #8]
    4386:	637b      	str	r3, [r7, #52]	; 0x34

    parser.tree.chunk = NULL;
    4388:	2300      	movs	r3, #0
    438a:	63fb      	str	r3, [r7, #60]	; 0x3c
    parser.cur_chunk = NULL;
    438c:	2300      	movs	r3, #0
    438e:	643b      	str	r3, [r7, #64]	; 0x40
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    4390:	687b      	ldr	r3, [r7, #4]
    4392:	2b00      	cmp	r3, #0
    4394:	d002      	beq.n	439c <mp_parse+0x50>
    4396:	2b02      	cmp	r3, #2
    4398:	d004      	beq.n	43a4 <mp_parse+0x58>
    439a:	e007      	b.n	43ac <mp_parse+0x60>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    439c:	2336      	movs	r3, #54	; 0x36
    439e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    43a2:	e006      	b.n	43b2 <mp_parse+0x66>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    43a4:	2338      	movs	r3, #56	; 0x38
    43a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    43aa:	e002      	b.n	43b2 <mp_parse+0x66>
        default: top_level_rule = RULE_file_input;
    43ac:	2300      	movs	r3, #0
    43ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    43b2:	68bb      	ldr	r3, [r7, #8]
    43b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
    43b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    43ba:	b2da      	uxtb	r2, r3
    43bc:	f107 001c 	add.w	r0, r7, #28
    43c0:	2300      	movs	r3, #0
    43c2:	f7ff facb 	bl	395c <push_rule>

    // parse!

    bool backtrack = false;
    43c6:	2300      	movs	r3, #0
    43c8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

    for (;;) {
        next_rule:
        if (parser.rule_stack_top == 0) {
    43cc:	6a3b      	ldr	r3, [r7, #32]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d104      	bne.n	43dc <mp_parse+0x90>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    43d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    43d4:	2b00      	cmp	r3, #0
    43d6:	f040 8292 	bne.w	48fe <mp_parse+0x5b2>
    43da:	e2a1      	b.n	4920 <mp_parse+0x5d4>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    43dc:	f107 0214 	add.w	r2, r7, #20
    43e0:	f107 0118 	add.w	r1, r7, #24
    43e4:	f107 031c 	add.w	r3, r7, #28
    43e8:	4618      	mov	r0, r3
    43ea:	f7ff fb25 	bl	3a38 <pop_rule>
    43ee:	4603      	mov	r3, r0
    43f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        uint8_t rule_act = rule_act_table[rule_id];
    43f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    43f8:	4ab2      	ldr	r2, [pc, #712]	; (46c4 <mp_parse+0x378>)
    43fa:	5cd3      	ldrb	r3, [r2, r3]
    43fc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    4400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4404:	4618      	mov	r0, r3
    4406:	f7ff fa1f 	bl	3848 <get_rule_arg>
    440a:	6638      	str	r0, [r7, #96]	; 0x60
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    440c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4410:	f003 030f 	and.w	r3, r3, #15
    4414:	65fb      	str	r3, [r7, #92]	; 0x5c
        switch (rule_act & RULE_ACT_KIND_MASK) {
    4416:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    441a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    441e:	2b10      	cmp	r3, #16
    4420:	d002      	beq.n	4428 <mp_parse+0xdc>
    4422:	2b20      	cmp	r3, #32
    4424:	d067      	beq.n	44f6 <mp_parse+0x1aa>
    4426:	e1aa      	b.n	477e <mp_parse+0x432>
                if (i > 0 && !backtrack) {
    4428:	69bb      	ldr	r3, [r7, #24]
    442a:	2b00      	cmp	r3, #0
    442c:	d006      	beq.n	443c <mp_parse+0xf0>
    442e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4432:	f083 0301 	eor.w	r3, r3, #1
    4436:	b2db      	uxtb	r3, r3
    4438:	2b00      	cmp	r3, #0
    443a:	d1c7      	bne.n	43cc <mp_parse+0x80>
                    backtrack = false;
    443c:	2300      	movs	r3, #0
    443e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                for (; i < n; ++i) {
    4442:	e050      	b.n	44e6 <mp_parse+0x19a>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    4444:	69bb      	ldr	r3, [r7, #24]
    4446:	005b      	lsls	r3, r3, #1
    4448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    444a:	4413      	add	r3, r2
    444c:	881b      	ldrh	r3, [r3, #0]
    444e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    4452:	f023 030f 	bic.w	r3, r3, #15
    4456:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    if (kind == RULE_ARG_TOK) {
    445a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    445e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4462:	d116      	bne.n	4492 <mp_parse+0x146>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    4464:	68bb      	ldr	r3, [r7, #8]
    4466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4468:	69bb      	ldr	r3, [r7, #24]
    446a:	005b      	lsls	r3, r3, #1
    446c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    446e:	440b      	add	r3, r1
    4470:	881b      	ldrh	r3, [r3, #0]
    4472:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4476:	429a      	cmp	r2, r3
    4478:	d132      	bne.n	44e0 <mp_parse+0x194>
                            push_result_token(&parser, rule_id);
    447a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    447e:	f107 031c 	add.w	r3, r7, #28
    4482:	4611      	mov	r1, r2
    4484:	4618      	mov	r0, r3
    4486:	f7ff fc65 	bl	3d54 <push_result_token>
                            mp_lexer_to_next(lex);
    448a:	68b8      	ldr	r0, [r7, #8]
    448c:	f7fe fe22 	bl	30d4 <mp_lexer_to_next>
                            goto next_rule;
    4490:	e79c      	b.n	43cc <mp_parse+0x80>
                        assert(kind == RULE_ARG_RULE);
    4492:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    4496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    449a:	d006      	beq.n	44aa <mp_parse+0x15e>
    449c:	4b8a      	ldr	r3, [pc, #552]	; (46c8 <mp_parse+0x37c>)
    449e:	4a8b      	ldr	r2, [pc, #556]	; (46cc <mp_parse+0x380>)
    44a0:	f240 318b 	movw	r1, #907	; 0x38b
    44a4:	488a      	ldr	r0, [pc, #552]	; (46d0 <mp_parse+0x384>)
    44a6:	f016 ff79 	bl	1b39c <__assert_func>
                        if (i + 1 < n) {
    44aa:	69bb      	ldr	r3, [r7, #24]
    44ac:	1c5a      	adds	r2, r3, #1
    44ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    44b0:	429a      	cmp	r2, r3
    44b2:	d208      	bcs.n	44c6 <mp_parse+0x17a>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    44b4:	6979      	ldr	r1, [r7, #20]
    44b6:	69bb      	ldr	r3, [r7, #24]
    44b8:	3301      	adds	r3, #1
    44ba:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    44be:	f107 001c 	add.w	r0, r7, #28
    44c2:	f7ff fa4b 	bl	395c <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    44c6:	69bb      	ldr	r3, [r7, #24]
    44c8:	005b      	lsls	r3, r3, #1
    44ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    44cc:	4413      	add	r3, r2
    44ce:	881b      	ldrh	r3, [r3, #0]
    44d0:	461a      	mov	r2, r3
    44d2:	f107 031c 	add.w	r3, r7, #28
    44d6:	4611      	mov	r1, r2
    44d8:	4618      	mov	r0, r3
    44da:	f7ff fa7d 	bl	39d8 <push_rule_from_arg>
                        goto next_rule;
    44de:	e775      	b.n	43cc <mp_parse+0x80>
                for (; i < n; ++i) {
    44e0:	69bb      	ldr	r3, [r7, #24]
    44e2:	3301      	adds	r3, #1
    44e4:	61bb      	str	r3, [r7, #24]
    44e6:	69ba      	ldr	r2, [r7, #24]
    44e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    44ea:	429a      	cmp	r2, r3
    44ec:	d3aa      	bcc.n	4444 <mp_parse+0xf8>
                backtrack = true;
    44ee:	2301      	movs	r3, #1
    44f0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                break;
    44f4:	e202      	b.n	48fc <mp_parse+0x5b0>
                if (backtrack) {
    44f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    44fa:	2b00      	cmp	r3, #0
    44fc:	d06c      	beq.n	45d8 <mp_parse+0x28c>
                    assert(i > 0);
    44fe:	69bb      	ldr	r3, [r7, #24]
    4500:	2b00      	cmp	r3, #0
    4502:	d106      	bne.n	4512 <mp_parse+0x1c6>
    4504:	4b73      	ldr	r3, [pc, #460]	; (46d4 <mp_parse+0x388>)
    4506:	4a71      	ldr	r2, [pc, #452]	; (46cc <mp_parse+0x380>)
    4508:	f240 319a 	movw	r1, #922	; 0x39a
    450c:	4870      	ldr	r0, [pc, #448]	; (46d0 <mp_parse+0x384>)
    450e:	f016 ff45 	bl	1b39c <__assert_func>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    4512:	69bb      	ldr	r3, [r7, #24]
    4514:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    4518:	3b01      	subs	r3, #1
    451a:	005b      	lsls	r3, r3, #1
    451c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    451e:	4413      	add	r3, r2
    4520:	881b      	ldrh	r3, [r3, #0]
    4522:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4526:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    452a:	d109      	bne.n	4540 <mp_parse+0x1f4>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    452c:	f107 031c 	add.w	r3, r7, #28
    4530:	2100      	movs	r1, #0
    4532:	4618      	mov	r0, r3
    4534:	f7ff fbb6 	bl	3ca4 <push_result_node>
                        backtrack = false;
    4538:	2300      	movs	r3, #0
    453a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    453e:	e04b      	b.n	45d8 <mp_parse+0x28c>
                        if (i > 1) {
    4540:	69bb      	ldr	r3, [r7, #24]
    4542:	2b01      	cmp	r3, #1
    4544:	f200 81f4 	bhi.w	4930 <mp_parse+0x5e4>
                            goto next_rule;
    4548:	e740      	b.n	43cc <mp_parse+0x80>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    454a:	69bb      	ldr	r3, [r7, #24]
    454c:	005b      	lsls	r3, r3, #1
    454e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4550:	4413      	add	r3, r2
    4552:	881b      	ldrh	r3, [r3, #0]
    4554:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    455c:	d123      	bne.n	45a6 <mp_parse+0x25a>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    455e:	69bb      	ldr	r3, [r7, #24]
    4560:	005b      	lsls	r3, r3, #1
    4562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4564:	4413      	add	r3, r2
    4566:	881b      	ldrh	r3, [r3, #0]
    4568:	f3c3 030b 	ubfx	r3, r3, #0, #12
    456c:	657b      	str	r3, [r7, #84]	; 0x54
                        if (lex->tok_kind == tok_kind) {
    456e:	68bb      	ldr	r3, [r7, #8]
    4570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4574:	429a      	cmp	r2, r3
    4576:	d10e      	bne.n	4596 <mp_parse+0x24a>
                            if (tok_kind == MP_TOKEN_NAME) {
    4578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    457a:	2b07      	cmp	r3, #7
    457c:	d107      	bne.n	458e <mp_parse+0x242>
                                push_result_token(&parser, rule_id);
    457e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4582:	f107 031c 	add.w	r3, r7, #28
    4586:	4611      	mov	r1, r2
    4588:	4618      	mov	r0, r3
    458a:	f7ff fbe3 	bl	3d54 <push_result_token>
                            mp_lexer_to_next(lex);
    458e:	68b8      	ldr	r0, [r7, #8]
    4590:	f7fe fda0 	bl	30d4 <mp_lexer_to_next>
    4594:	e01d      	b.n	45d2 <mp_parse+0x286>
                            if (i > 0) {
    4596:	69bb      	ldr	r3, [r7, #24]
    4598:	2b00      	cmp	r3, #0
    459a:	f040 81cb 	bne.w	4934 <mp_parse+0x5e8>
                                backtrack = true;
    459e:	2301      	movs	r3, #1
    45a0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto next_rule;
    45a4:	e712      	b.n	43cc <mp_parse+0x80>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    45a6:	6979      	ldr	r1, [r7, #20]
    45a8:	69bb      	ldr	r3, [r7, #24]
    45aa:	3301      	adds	r3, #1
    45ac:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    45b0:	f107 001c 	add.w	r0, r7, #28
    45b4:	f7ff f9d2 	bl	395c <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    45b8:	69bb      	ldr	r3, [r7, #24]
    45ba:	005b      	lsls	r3, r3, #1
    45bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    45be:	4413      	add	r3, r2
    45c0:	881b      	ldrh	r3, [r3, #0]
    45c2:	461a      	mov	r2, r3
    45c4:	f107 031c 	add.w	r3, r7, #28
    45c8:	4611      	mov	r1, r2
    45ca:	4618      	mov	r0, r3
    45cc:	f7ff fa04 	bl	39d8 <push_rule_from_arg>
                        goto next_rule;
    45d0:	e6fc      	b.n	43cc <mp_parse+0x80>
                for (; i < n; ++i) {
    45d2:	69bb      	ldr	r3, [r7, #24]
    45d4:	3301      	adds	r3, #1
    45d6:	61bb      	str	r3, [r7, #24]
    45d8:	69ba      	ldr	r2, [r7, #24]
    45da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    45dc:	429a      	cmp	r2, r3
    45de:	d3b4      	bcc.n	454a <mp_parse+0x1fe>
                assert(i == n);
    45e0:	69ba      	ldr	r2, [r7, #24]
    45e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    45e4:	429a      	cmp	r2, r3
    45e6:	d006      	beq.n	45f6 <mp_parse+0x2aa>
    45e8:	4b3b      	ldr	r3, [pc, #236]	; (46d8 <mp_parse+0x38c>)
    45ea:	4a38      	ldr	r2, [pc, #224]	; (46cc <mp_parse+0x380>)
    45ec:	f240 31c7 	movw	r1, #967	; 0x3c7
    45f0:	4837      	ldr	r0, [pc, #220]	; (46d0 <mp_parse+0x384>)
    45f2:	f016 fed3 	bl	1b39c <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	2b00      	cmp	r3, #0
    45fa:	d03c      	beq.n	4676 <mp_parse+0x32a>
    45fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4600:	2b05      	cmp	r3, #5
    4602:	d138      	bne.n	4676 <mp_parse+0x32a>
    4604:	f107 031c 	add.w	r3, r7, #28
    4608:	2100      	movs	r1, #0
    460a:	4618      	mov	r0, r3
    460c:	f7ff fb22 	bl	3c54 <peek_result>
    4610:	4603      	mov	r3, r0
    4612:	2b00      	cmp	r3, #0
    4614:	d12f      	bne.n	4676 <mp_parse+0x32a>
                    mp_parse_node_t p = peek_result(&parser, 1);
    4616:	f107 031c 	add.w	r3, r7, #28
    461a:	2101      	movs	r1, #1
    461c:	4618      	mov	r0, r3
    461e:	f7ff fb19 	bl	3c54 <peek_result>
    4622:	6538      	str	r0, [r7, #80]	; 0x50
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    4624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4626:	f003 0303 	and.w	r3, r3, #3
    462a:	2b00      	cmp	r3, #0
    462c:	d004      	beq.n	4638 <mp_parse+0x2ec>
    462e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4630:	f003 030f 	and.w	r3, r3, #15
    4634:	2b02      	cmp	r3, #2
    4636:	d10c      	bne.n	4652 <mp_parse+0x306>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    4638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    463a:	2b00      	cmp	r3, #0
    463c:	d01b      	beq.n	4676 <mp_parse+0x32a>
    463e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4640:	f003 0303 	and.w	r3, r3, #3
    4644:	2b00      	cmp	r3, #0
    4646:	d116      	bne.n	4676 <mp_parse+0x32a>
    4648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    464a:	685b      	ldr	r3, [r3, #4]
    464c:	b2db      	uxtb	r3, r3
    464e:	2b35      	cmp	r3, #53	; 0x35
    4650:	d111      	bne.n	4676 <mp_parse+0x32a>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    4652:	f107 031c 	add.w	r3, r7, #28
    4656:	4618      	mov	r0, r3
    4658:	f7ff fad6 	bl	3c08 <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    465c:	f107 031c 	add.w	r3, r7, #28
    4660:	4618      	mov	r0, r3
    4662:	f7ff fad1 	bl	3c08 <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    4666:	6979      	ldr	r1, [r7, #20]
    4668:	f107 001c 	add.w	r0, r7, #28
    466c:	2300      	movs	r3, #0
    466e:	2208      	movs	r2, #8
    4670:	f7ff fe08 	bl	4284 <push_result_rule>
                        break;
    4674:	e142      	b.n	48fc <mp_parse+0x5b0>
                i = 0;
    4676:	2300      	movs	r3, #0
    4678:	61bb      	str	r3, [r7, #24]
                size_t num_not_nil = 0;
    467a:	2300      	movs	r3, #0
    467c:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (size_t x = n; x > 0;) {
    467e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4680:	67bb      	str	r3, [r7, #120]	; 0x78
    4682:	e03b      	b.n	46fc <mp_parse+0x3b0>
                    --x;
    4684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4686:	3b01      	subs	r3, #1
    4688:	67bb      	str	r3, [r7, #120]	; 0x78
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    468a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    468c:	005b      	lsls	r3, r3, #1
    468e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4690:	4413      	add	r3, r2
    4692:	881b      	ldrh	r3, [r3, #0]
    4694:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    469c:	d11e      	bne.n	46dc <mp_parse+0x390>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    469e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    46a0:	005b      	lsls	r3, r3, #1
    46a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    46a4:	4413      	add	r3, r2
    46a6:	881b      	ldrh	r3, [r3, #0]
    46a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    46ac:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (tok_kind == MP_TOKEN_NAME) {
    46ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    46b0:	2b07      	cmp	r3, #7
    46b2:	d123      	bne.n	46fc <mp_parse+0x3b0>
                            i += 1;
    46b4:	69bb      	ldr	r3, [r7, #24]
    46b6:	3301      	adds	r3, #1
    46b8:	61bb      	str	r3, [r7, #24]
                            num_not_nil += 1;
    46ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    46bc:	3301      	adds	r3, #1
    46be:	67fb      	str	r3, [r7, #124]	; 0x7c
    46c0:	e01c      	b.n	46fc <mp_parse+0x3b0>
    46c2:	bf00      	nop
    46c4:	0001db6c 	.word	0x0001db6c
    46c8:	0001e0cc 	.word	0x0001e0cc
    46cc:	0001e21c 	.word	0x0001e21c
    46d0:	0001e05c 	.word	0x0001e05c
    46d4:	0001e0e4 	.word	0x0001e0e4
    46d8:	0001e0ec 	.word	0x0001e0ec
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    46dc:	69ba      	ldr	r2, [r7, #24]
    46de:	f107 031c 	add.w	r3, r7, #28
    46e2:	4611      	mov	r1, r2
    46e4:	4618      	mov	r0, r3
    46e6:	f7ff fab5 	bl	3c54 <peek_result>
    46ea:	4603      	mov	r3, r0
    46ec:	2b00      	cmp	r3, #0
    46ee:	d002      	beq.n	46f6 <mp_parse+0x3aa>
                            num_not_nil += 1;
    46f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    46f2:	3301      	adds	r3, #1
    46f4:	67fb      	str	r3, [r7, #124]	; 0x7c
                        i += 1;
    46f6:	69bb      	ldr	r3, [r7, #24]
    46f8:	3301      	adds	r3, #1
    46fa:	61bb      	str	r3, [r7, #24]
                for (size_t x = n; x > 0;) {
    46fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    46fe:	2b00      	cmp	r3, #0
    4700:	d1c0      	bne.n	4684 <mp_parse+0x338>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    4702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4704:	2b01      	cmp	r3, #1
    4706:	d124      	bne.n	4752 <mp_parse+0x406>
    4708:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4710:	2b00      	cmp	r3, #0
    4712:	d01e      	beq.n	4752 <mp_parse+0x406>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    4714:	2300      	movs	r3, #0
    4716:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4718:	2300      	movs	r3, #0
    471a:	673b      	str	r3, [r7, #112]	; 0x70
    471c:	e00d      	b.n	473a <mp_parse+0x3ee>
                        mp_parse_node_t pn2 = pop_result(&parser);
    471e:	f107 031c 	add.w	r3, r7, #28
    4722:	4618      	mov	r0, r3
    4724:	f7ff fa70 	bl	3c08 <pop_result>
    4728:	64b8      	str	r0, [r7, #72]	; 0x48
                        if (pn2 != MP_PARSE_NODE_NULL) {
    472a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    472c:	2b00      	cmp	r3, #0
    472e:	d001      	beq.n	4734 <mp_parse+0x3e8>
                            pn = pn2;
    4730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4732:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4736:	3301      	adds	r3, #1
    4738:	673b      	str	r3, [r7, #112]	; 0x70
    473a:	69bb      	ldr	r3, [r7, #24]
    473c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    473e:	429a      	cmp	r2, r3
    4740:	d3ed      	bcc.n	471e <mp_parse+0x3d2>
                    push_result_node(&parser, pn);
    4742:	f107 031c 	add.w	r3, r7, #28
    4746:	6f79      	ldr	r1, [r7, #116]	; 0x74
    4748:	4618      	mov	r0, r3
    474a:	f7ff faab 	bl	3ca4 <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    474e:	bf00      	nop
                break;
    4750:	e0d4      	b.n	48fc <mp_parse+0x5b0>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    4752:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
    4756:	2b00      	cmp	r3, #0
    4758:	da08      	bge.n	476c <mp_parse+0x420>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    475a:	f107 031c 	add.w	r3, r7, #28
    475e:	2100      	movs	r1, #0
    4760:	4618      	mov	r0, r3
    4762:	f7ff fa9f 	bl	3ca4 <push_result_node>
                        i += 1;
    4766:	69bb      	ldr	r3, [r7, #24]
    4768:	3301      	adds	r3, #1
    476a:	61bb      	str	r3, [r7, #24]
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    476c:	6979      	ldr	r1, [r7, #20]
    476e:	69bb      	ldr	r3, [r7, #24]
    4770:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4774:	f107 001c 	add.w	r0, r7, #28
    4778:	f7ff fd84 	bl	4284 <push_result_rule>
                break;
    477c:	e0be      	b.n	48fc <mp_parse+0x5b0>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    477e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4782:	f003 0330 	and.w	r3, r3, #48	; 0x30
    4786:	2b30      	cmp	r3, #48	; 0x30
    4788:	d006      	beq.n	4798 <mp_parse+0x44c>
    478a:	4b90      	ldr	r3, [pc, #576]	; (49cc <mp_parse+0x680>)
    478c:	4a90      	ldr	r2, [pc, #576]	; (49d0 <mp_parse+0x684>)
    478e:	f240 410a 	movw	r1, #1034	; 0x40a
    4792:	4890      	ldr	r0, [pc, #576]	; (49d4 <mp_parse+0x688>)
    4794:	f016 fe02 	bl	1b39c <__assert_func>
                if (backtrack) {
    4798:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    479c:	2b00      	cmp	r3, #0
    479e:	d025      	beq.n	47ec <mp_parse+0x4a0>
                    had_trailing_sep = false;
    47a0:	2300      	movs	r3, #0
    47a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    if (n == 2) {
    47a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47a8:	2b02      	cmp	r3, #2
    47aa:	d107      	bne.n	47bc <mp_parse+0x470>
                        if (i == 1) {
    47ac:	69bb      	ldr	r3, [r7, #24]
    47ae:	2b01      	cmp	r3, #1
    47b0:	d100      	bne.n	47b4 <mp_parse+0x468>
                            goto next_rule;
    47b2:	e60b      	b.n	43cc <mp_parse+0x80>
                            backtrack = false;
    47b4:	2300      	movs	r3, #0
    47b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47ba:	e068      	b.n	488e <mp_parse+0x542>
                        if (i == 1) {
    47bc:	69bb      	ldr	r3, [r7, #24]
    47be:	2b01      	cmp	r3, #1
    47c0:	d100      	bne.n	47c4 <mp_parse+0x478>
                            goto next_rule;
    47c2:	e603      	b.n	43cc <mp_parse+0x80>
                        } else if ((i & 1) == 1) {
    47c4:	69bb      	ldr	r3, [r7, #24]
    47c6:	f003 0301 	and.w	r3, r3, #1
    47ca:	2b00      	cmp	r3, #0
    47cc:	d00a      	beq.n	47e4 <mp_parse+0x498>
                            if (n == 3) {
    47ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47d0:	2b03      	cmp	r3, #3
    47d2:	f040 80b1 	bne.w	4938 <mp_parse+0x5ec>
                                had_trailing_sep = true;
    47d6:	2301      	movs	r3, #1
    47d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                backtrack = false;
    47dc:	2300      	movs	r3, #0
    47de:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47e2:	e054      	b.n	488e <mp_parse+0x542>
                            backtrack = false;
    47e4:	2300      	movs	r3, #0
    47e6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47ea:	e050      	b.n	488e <mp_parse+0x542>
                        size_t arg = rule_arg[i & 1 & n];
    47ec:	69ba      	ldr	r2, [r7, #24]
    47ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47f0:	4013      	ands	r3, r2
    47f2:	f003 0301 	and.w	r3, r3, #1
    47f6:	005b      	lsls	r3, r3, #1
    47f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    47fa:	4413      	add	r3, r2
    47fc:	881b      	ldrh	r3, [r3, #0]
    47fe:	647b      	str	r3, [r7, #68]	; 0x44
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4802:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    480a:	d123      	bne.n	4854 <mp_parse+0x508>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    480c:	68bb      	ldr	r3, [r7, #8]
    480e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4812:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4816:	429a      	cmp	r2, r3
    4818:	d115      	bne.n	4846 <mp_parse+0x4fa>
                                if (i & 1 & n) {
    481a:	69ba      	ldr	r2, [r7, #24]
    481c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    481e:	4013      	ands	r3, r2
    4820:	f003 0301 	and.w	r3, r3, #1
    4824:	2b00      	cmp	r3, #0
    4826:	d107      	bne.n	4838 <mp_parse+0x4ec>
                                    push_result_token(&parser, rule_id);
    4828:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    482c:	f107 031c 	add.w	r3, r7, #28
    4830:	4611      	mov	r1, r2
    4832:	4618      	mov	r0, r3
    4834:	f7ff fa8e 	bl	3d54 <push_result_token>
                                mp_lexer_to_next(lex);
    4838:	68b8      	ldr	r0, [r7, #8]
    483a:	f7fe fc4b 	bl	30d4 <mp_lexer_to_next>
                                i += 1;
    483e:	69bb      	ldr	r3, [r7, #24]
    4840:	3301      	adds	r3, #1
    4842:	61bb      	str	r3, [r7, #24]
    4844:	e7d2      	b.n	47ec <mp_parse+0x4a0>
                                i += 1;
    4846:	69bb      	ldr	r3, [r7, #24]
    4848:	3301      	adds	r3, #1
    484a:	61bb      	str	r3, [r7, #24]
                                backtrack = true;
    484c:	2301      	movs	r3, #1
    484e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto list_backtrack;
    4852:	e7a5      	b.n	47a0 <mp_parse+0x454>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    4854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4856:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    485a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    485e:	d006      	beq.n	486e <mp_parse+0x522>
    4860:	4b5d      	ldr	r3, [pc, #372]	; (49d8 <mp_parse+0x68c>)
    4862:	4a5b      	ldr	r2, [pc, #364]	; (49d0 <mp_parse+0x684>)
    4864:	f240 4142 	movw	r1, #1090	; 0x442
    4868:	485a      	ldr	r0, [pc, #360]	; (49d4 <mp_parse+0x688>)
    486a:	f016 fd97 	bl	1b39c <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    486e:	6979      	ldr	r1, [r7, #20]
    4870:	69bb      	ldr	r3, [r7, #24]
    4872:	3301      	adds	r3, #1
    4874:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4878:	f107 001c 	add.w	r0, r7, #28
    487c:	f7ff f86e 	bl	395c <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    4880:	f107 031c 	add.w	r3, r7, #28
    4884:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4886:	4618      	mov	r0, r3
    4888:	f7ff f8a6 	bl	39d8 <push_rule_from_arg>
                            goto next_rule;
    488c:	e59e      	b.n	43cc <mp_parse+0x80>
                assert(i >= 1);
    488e:	69bb      	ldr	r3, [r7, #24]
    4890:	2b00      	cmp	r3, #0
    4892:	d106      	bne.n	48a2 <mp_parse+0x556>
    4894:	4b51      	ldr	r3, [pc, #324]	; (49dc <mp_parse+0x690>)
    4896:	4a4e      	ldr	r2, [pc, #312]	; (49d0 <mp_parse+0x684>)
    4898:	f240 4149 	movw	r1, #1097	; 0x449
    489c:	484d      	ldr	r0, [pc, #308]	; (49d4 <mp_parse+0x688>)
    489e:	f016 fd7d 	bl	1b39c <__assert_func>
                i -= 1;
    48a2:	69bb      	ldr	r3, [r7, #24]
    48a4:	3b01      	subs	r3, #1
    48a6:	61bb      	str	r3, [r7, #24]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    48a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    48aa:	f003 0301 	and.w	r3, r3, #1
    48ae:	2b00      	cmp	r3, #0
    48b0:	d00b      	beq.n	48ca <mp_parse+0x57e>
    48b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    48b4:	3302      	adds	r3, #2
    48b6:	881b      	ldrh	r3, [r3, #0]
    48b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    48bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    48c0:	d103      	bne.n	48ca <mp_parse+0x57e>
                    i = (i + 1) / 2;
    48c2:	69bb      	ldr	r3, [r7, #24]
    48c4:	3301      	adds	r3, #1
    48c6:	085b      	lsrs	r3, r3, #1
    48c8:	61bb      	str	r3, [r7, #24]
                if (i == 1) {
    48ca:	69bb      	ldr	r3, [r7, #24]
    48cc:	2b01      	cmp	r3, #1
    48ce:	d10c      	bne.n	48ea <mp_parse+0x59e>
                    if (had_trailing_sep) {
    48d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    48d4:	2b00      	cmp	r3, #0
    48d6:	d010      	beq.n	48fa <mp_parse+0x5ae>
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    48d8:	6979      	ldr	r1, [r7, #20]
    48da:	69bb      	ldr	r3, [r7, #24]
    48dc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48e0:	f107 001c 	add.w	r0, r7, #28
    48e4:	f7ff fcce 	bl	4284 <push_result_rule>
                break;
    48e8:	e007      	b.n	48fa <mp_parse+0x5ae>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    48ea:	6979      	ldr	r1, [r7, #20]
    48ec:	69bb      	ldr	r3, [r7, #24]
    48ee:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48f2:	f107 001c 	add.w	r0, r7, #28
    48f6:	f7ff fcc5 	bl	4284 <push_result_rule>
                break;
    48fa:	bf00      	nop
    }
    48fc:	e566      	b.n	43cc <mp_parse+0x80>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    48fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4902:	685b      	ldr	r3, [r3, #4]
    4904:	3308      	adds	r3, #8
    4906:	2200      	movs	r2, #0
    4908:	4619      	mov	r1, r3
    490a:	f7fb fd55 	bl	3b8 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    490e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4912:	6852      	ldr	r2, [r2, #4]
    4914:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    4916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    491a:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    491e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    4920:	68bb      	ldr	r3, [r7, #8]
    4922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (
    4924:	2b00      	cmp	r3, #0
    4926:	d108      	bne.n	493a <mp_parse+0x5ee>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    4928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    492a:	2b00      	cmp	r3, #0
    492c:	d129      	bne.n	4982 <mp_parse+0x636>
    492e:	e004      	b.n	493a <mp_parse+0x5ee>
                            goto syntax_error;
    4930:	bf00      	nop
    4932:	e002      	b.n	493a <mp_parse+0x5ee>
                                goto syntax_error;
    4934:	bf00      	nop
    4936:	e000      	b.n	493a <mp_parse+0x5ee>
                                goto syntax_error;
    4938:	bf00      	nop
        ) {
    syntax_error:;
        mp_obj_t exc;
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    493a:	68bb      	ldr	r3, [r7, #8]
    493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    493e:	2b05      	cmp	r3, #5
    4940:	d105      	bne.n	494e <mp_parse+0x602>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4942:	4927      	ldr	r1, [pc, #156]	; (49e0 <mp_parse+0x694>)
    4944:	4827      	ldr	r0, [pc, #156]	; (49e4 <mp_parse+0x698>)
    4946:	f00a fdf5 	bl	f534 <mp_obj_new_exception_msg>
    494a:	66b8      	str	r0, [r7, #104]	; 0x68
    494c:	e00e      	b.n	496c <mp_parse+0x620>
                "unexpected indent");
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    494e:	68bb      	ldr	r3, [r7, #8]
    4950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4952:	2b02      	cmp	r3, #2
    4954:	d105      	bne.n	4962 <mp_parse+0x616>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4956:	4924      	ldr	r1, [pc, #144]	; (49e8 <mp_parse+0x69c>)
    4958:	4822      	ldr	r0, [pc, #136]	; (49e4 <mp_parse+0x698>)
    495a:	f00a fdeb 	bl	f534 <mp_obj_new_exception_msg>
    495e:	66b8      	str	r0, [r7, #104]	; 0x68
    4960:	e004      	b.n	496c <mp_parse+0x620>
                "unindent does not match any outer indentation level");
        } else {
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    4962:	4922      	ldr	r1, [pc, #136]	; (49ec <mp_parse+0x6a0>)
    4964:	4822      	ldr	r0, [pc, #136]	; (49f0 <mp_parse+0x6a4>)
    4966:	f00a fde5 	bl	f534 <mp_obj_new_exception_msg>
    496a:	66b8      	str	r0, [r7, #104]	; 0x68
                "invalid syntax");
        }
        // add traceback to give info about file name and location
        // we don't have a 'block' name, so just pass the NULL qstr to indicate this
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    496c:	68bb      	ldr	r3, [r7, #8]
    496e:	6819      	ldr	r1, [r3, #0]
    4970:	68bb      	ldr	r3, [r7, #8]
    4972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4974:	2300      	movs	r3, #0
    4976:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4978:	f00a ff78 	bl	f86c <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    497c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    497e:	f7fb fcaf 	bl	2e0 <nlr_jump>
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    4982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4984:	2b01      	cmp	r3, #1
    4986:	d006      	beq.n	4996 <mp_parse+0x64a>
    4988:	4b1a      	ldr	r3, [pc, #104]	; (49f4 <mp_parse+0x6a8>)
    498a:	4a11      	ldr	r2, [pc, #68]	; (49d0 <mp_parse+0x684>)
    498c:	f44f 6191 	mov.w	r1, #1160	; 0x488
    4990:	4810      	ldr	r0, [pc, #64]	; (49d4 <mp_parse+0x688>)
    4992:	f016 fd03 	bl	1b39c <__assert_func>
    parser.tree.root = parser.result_stack[0];
    4996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4998:	681b      	ldr	r3, [r3, #0]
    499a:	63bb      	str	r3, [r7, #56]	; 0x38

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    499e:	4618      	mov	r0, r3
    49a0:	f7fb fd1e 	bl	3e0 <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    49a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    49a6:	4618      	mov	r0, r3
    49a8:	f7fb fd1a 	bl	3e0 <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    49ac:	68b8      	ldr	r0, [r7, #8]
    49ae:	f7fe feeb 	bl	3788 <mp_lexer_free>

    return parser.tree;
    49b2:	68fb      	ldr	r3, [r7, #12]
    49b4:	461a      	mov	r2, r3
    49b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
    49ba:	e893 0003 	ldmia.w	r3, {r0, r1}
    49be:	e882 0003 	stmia.w	r2, {r0, r1}
}
    49c2:	68f8      	ldr	r0, [r7, #12]
    49c4:	3788      	adds	r7, #136	; 0x88
    49c6:	46bd      	mov	sp, r7
    49c8:	bd80      	pop	{r7, pc}
    49ca:	bf00      	nop
    49cc:	0001e0f4 	.word	0x0001e0f4
    49d0:	0001e21c 	.word	0x0001e21c
    49d4:	0001e05c 	.word	0x0001e05c
    49d8:	0001e128 	.word	0x0001e128
    49dc:	0001e154 	.word	0x0001e154
    49e0:	0001e15c 	.word	0x0001e15c
    49e4:	0002070c 	.word	0x0002070c
    49e8:	0001e170 	.word	0x0001e170
    49ec:	0001e1a4 	.word	0x0001e1a4
    49f0:	000206d0 	.word	0x000206d0
    49f4:	0001e1b4 	.word	0x0001e1b4

000049f8 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    49f8:	b580      	push	{r7, lr}
    49fa:	b084      	sub	sp, #16
    49fc:	af00      	add	r7, sp, #0
    49fe:	6078      	str	r0, [r7, #4]
    mp_parse_chunk_t *chunk = tree->chunk;
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	685b      	ldr	r3, [r3, #4]
    4a04:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4a06:	e007      	b.n	4a18 <mp_parse_tree_clear+0x20>
        mp_parse_chunk_t *next = chunk->union_.next;
    4a08:	68fb      	ldr	r3, [r7, #12]
    4a0a:	685b      	ldr	r3, [r3, #4]
    4a0c:	60bb      	str	r3, [r7, #8]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    4a0e:	68f8      	ldr	r0, [r7, #12]
    4a10:	f7fb fce6 	bl	3e0 <m_free>
        chunk = next;
    4a14:	68bb      	ldr	r3, [r7, #8]
    4a16:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4a18:	68fb      	ldr	r3, [r7, #12]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d1f4      	bne.n	4a08 <mp_parse_tree_clear+0x10>
    }
}
    4a1e:	bf00      	nop
    4a20:	3710      	adds	r7, #16
    4a22:	46bd      	mov	sp, r7
    4a24:	bd80      	pop	{r7, pc}
    4a26:	bf00      	nop

00004a28 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    4a28:	b580      	push	{r7, lr}
    4a2a:	b086      	sub	sp, #24
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	60f8      	str	r0, [r7, #12]
    4a30:	60b9      	str	r1, [r7, #8]
    4a32:	607a      	str	r2, [r7, #4]
    4a34:	603b      	str	r3, [r7, #0]
    scope_t *scope = m_new0(scope_t, 1);
    4a36:	2030      	movs	r0, #48	; 0x30
    4a38:	f7fb fc96 	bl	368 <m_malloc0>
    4a3c:	6178      	str	r0, [r7, #20]
    scope->kind = kind;
    4a3e:	697b      	ldr	r3, [r7, #20]
    4a40:	68fa      	ldr	r2, [r7, #12]
    4a42:	601a      	str	r2, [r3, #0]
    scope->pn = pn;
    4a44:	697b      	ldr	r3, [r7, #20]
    4a46:	68ba      	ldr	r2, [r7, #8]
    4a48:	60da      	str	r2, [r3, #12]
    scope->source_file = source_file;
    4a4a:	687b      	ldr	r3, [r7, #4]
    4a4c:	b29a      	uxth	r2, r3
    4a4e:	697b      	ldr	r3, [r7, #20]
    4a50:	821a      	strh	r2, [r3, #16]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    4a52:	68fb      	ldr	r3, [r7, #12]
    4a54:	2b07      	cmp	r3, #7
    4a56:	d002      	beq.n	4a5e <scope_new+0x36>
    4a58:	68fb      	ldr	r3, [r7, #12]
    4a5a:	2b01      	cmp	r3, #1
    4a5c:	d114      	bne.n	4a88 <scope_new+0x60>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4a5e:	68bb      	ldr	r3, [r7, #8]
    4a60:	2b00      	cmp	r3, #0
    4a62:	d004      	beq.n	4a6e <scope_new+0x46>
    4a64:	68bb      	ldr	r3, [r7, #8]
    4a66:	f003 0303 	and.w	r3, r3, #3
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d005      	beq.n	4a7a <scope_new+0x52>
    4a6e:	4b17      	ldr	r3, [pc, #92]	; (4acc <scope_new+0xa4>)
    4a70:	4a17      	ldr	r2, [pc, #92]	; (4ad0 <scope_new+0xa8>)
    4a72:	2131      	movs	r1, #49	; 0x31
    4a74:	4817      	ldr	r0, [pc, #92]	; (4ad4 <scope_new+0xac>)
    4a76:	f016 fc91 	bl	1b39c <__assert_func>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4a7a:	68bb      	ldr	r3, [r7, #8]
    4a7c:	689b      	ldr	r3, [r3, #8]
    4a7e:	091b      	lsrs	r3, r3, #4
    4a80:	b29a      	uxth	r2, r3
    4a82:	697b      	ldr	r3, [r7, #20]
    4a84:	825a      	strh	r2, [r3, #18]
    4a86:	e006      	b.n	4a96 <scope_new+0x6e>
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4a88:	4a13      	ldr	r2, [pc, #76]	; (4ad8 <scope_new+0xb0>)
    4a8a:	68fb      	ldr	r3, [r7, #12]
    4a8c:	4413      	add	r3, r2
    4a8e:	781b      	ldrb	r3, [r3, #0]
    4a90:	b29a      	uxth	r2, r3
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	825a      	strh	r2, [r3, #18]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4a96:	f006 fb79 	bl	b18c <mp_emit_glue_new_raw_code>
    4a9a:	4602      	mov	r2, r0
    4a9c:	697b      	ldr	r3, [r7, #20]
    4a9e:	615a      	str	r2, [r3, #20]
    scope->emit_options = emit_options;
    4aa0:	683b      	ldr	r3, [r7, #0]
    4aa2:	b2da      	uxtb	r2, r3
    4aa4:	697b      	ldr	r3, [r7, #20]
    4aa6:	765a      	strb	r2, [r3, #25]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4aa8:	697b      	ldr	r3, [r7, #20]
    4aaa:	2204      	movs	r2, #4
    4aac:	84da      	strh	r2, [r3, #38]	; 0x26
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4aae:	697b      	ldr	r3, [r7, #20]
    4ab0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4ab2:	00db      	lsls	r3, r3, #3
    4ab4:	4618      	mov	r0, r3
    4ab6:	f7fb fc31 	bl	31c <m_malloc>
    4aba:	4602      	mov	r2, r0
    4abc:	697b      	ldr	r3, [r7, #20]
    4abe:	62da      	str	r2, [r3, #44]	; 0x2c

    return scope;
    4ac0:	697b      	ldr	r3, [r7, #20]
}
    4ac2:	4618      	mov	r0, r3
    4ac4:	3718      	adds	r7, #24
    4ac6:	46bd      	mov	sp, r7
    4ac8:	bd80      	pop	{r7, pc}
    4aca:	bf00      	nop
    4acc:	0001e230 	.word	0x0001e230
    4ad0:	0001e2cc 	.word	0x0001e2cc
    4ad4:	0001e24c 	.word	0x0001e24c
    4ad8:	0001e228 	.word	0x0001e228

00004adc <scope_free>:

void scope_free(scope_t *scope) {
    4adc:	b580      	push	{r7, lr}
    4ade:	b082      	sub	sp, #8
    4ae0:	af00      	add	r7, sp, #0
    4ae2:	6078      	str	r0, [r7, #4]
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4ae4:	687b      	ldr	r3, [r7, #4]
    4ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ae8:	4618      	mov	r0, r3
    4aea:	f7fb fc79 	bl	3e0 <m_free>
    m_del(scope_t, scope, 1);
    4aee:	6878      	ldr	r0, [r7, #4]
    4af0:	f7fb fc76 	bl	3e0 <m_free>
}
    4af4:	bf00      	nop
    4af6:	3708      	adds	r7, #8
    4af8:	46bd      	mov	sp, r7
    4afa:	bd80      	pop	{r7, pc}

00004afc <scope_find_or_add_id>:

id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, bool *added) {
    4afc:	b580      	push	{r7, lr}
    4afe:	b086      	sub	sp, #24
    4b00:	af00      	add	r7, sp, #0
    4b02:	60f8      	str	r0, [r7, #12]
    4b04:	60b9      	str	r1, [r7, #8]
    4b06:	607a      	str	r2, [r7, #4]
    id_info_t *id_info = scope_find(scope, qst);
    4b08:	68b9      	ldr	r1, [r7, #8]
    4b0a:	68f8      	ldr	r0, [r7, #12]
    4b0c:	f000 f842 	bl	4b94 <scope_find>
    4b10:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    4b12:	697b      	ldr	r3, [r7, #20]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d004      	beq.n	4b22 <scope_find_or_add_id+0x26>
        *added = false;
    4b18:	687b      	ldr	r3, [r7, #4]
    4b1a:	2200      	movs	r2, #0
    4b1c:	701a      	strb	r2, [r3, #0]
        return id_info;
    4b1e:	697b      	ldr	r3, [r7, #20]
    4b20:	e033      	b.n	4b8a <scope_find_or_add_id+0x8e>
    }

    // make sure we have enough memory
    if (scope->id_info_len >= scope->id_info_alloc) {
    4b22:	68fb      	ldr	r3, [r7, #12]
    4b24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    4b26:	68fb      	ldr	r3, [r7, #12]
    4b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b2a:	429a      	cmp	r2, r3
    4b2c:	d312      	bcc.n	4b54 <scope_find_or_add_id+0x58>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4b2e:	68fb      	ldr	r3, [r7, #12]
    4b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b32:	68fb      	ldr	r3, [r7, #12]
    4b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b36:	3306      	adds	r3, #6
    4b38:	00db      	lsls	r3, r3, #3
    4b3a:	4619      	mov	r1, r3
    4b3c:	4610      	mov	r0, r2
    4b3e:	f7fb fc21 	bl	384 <m_realloc>
    4b42:	4602      	mov	r2, r0
    4b44:	68fb      	ldr	r3, [r7, #12]
    4b46:	62da      	str	r2, [r3, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4b48:	68fb      	ldr	r3, [r7, #12]
    4b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b4c:	3306      	adds	r3, #6
    4b4e:	b29a      	uxth	r2, r3
    4b50:	68fb      	ldr	r3, [r7, #12]
    4b52:	84da      	strh	r2, [r3, #38]	; 0x26
    }

    // add new id to end of array of all ids; this seems to match CPython
    // important thing is that function arguments are first, but that is
    // handled by the compiler because it adds arguments before compiling the body
    id_info = &scope->id_info[scope->id_info_len++];
    4b54:	68fb      	ldr	r3, [r7, #12]
    4b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b58:	68fb      	ldr	r3, [r7, #12]
    4b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b5c:	1c59      	adds	r1, r3, #1
    4b5e:	b288      	uxth	r0, r1
    4b60:	68f9      	ldr	r1, [r7, #12]
    4b62:	8508      	strh	r0, [r1, #40]	; 0x28
    4b64:	00db      	lsls	r3, r3, #3
    4b66:	4413      	add	r3, r2
    4b68:	617b      	str	r3, [r7, #20]

    id_info->kind = 0;
    4b6a:	697b      	ldr	r3, [r7, #20]
    4b6c:	2200      	movs	r2, #0
    4b6e:	701a      	strb	r2, [r3, #0]
    id_info->flags = 0;
    4b70:	697b      	ldr	r3, [r7, #20]
    4b72:	2200      	movs	r2, #0
    4b74:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4b76:	697b      	ldr	r3, [r7, #20]
    4b78:	2200      	movs	r2, #0
    4b7a:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4b7c:	697b      	ldr	r3, [r7, #20]
    4b7e:	68ba      	ldr	r2, [r7, #8]
    4b80:	605a      	str	r2, [r3, #4]
    *added = true;
    4b82:	687b      	ldr	r3, [r7, #4]
    4b84:	2201      	movs	r2, #1
    4b86:	701a      	strb	r2, [r3, #0]
    return id_info;
    4b88:	697b      	ldr	r3, [r7, #20]
}
    4b8a:	4618      	mov	r0, r3
    4b8c:	3718      	adds	r7, #24
    4b8e:	46bd      	mov	sp, r7
    4b90:	bd80      	pop	{r7, pc}
    4b92:	bf00      	nop

00004b94 <scope_find>:

id_info_t *scope_find(scope_t *scope, qstr qst) {
    4b94:	b480      	push	{r7}
    4b96:	b085      	sub	sp, #20
    4b98:	af00      	add	r7, sp, #0
    4b9a:	6078      	str	r0, [r7, #4]
    4b9c:	6039      	str	r1, [r7, #0]
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4b9e:	2300      	movs	r3, #0
    4ba0:	60fb      	str	r3, [r7, #12]
    4ba2:	e011      	b.n	4bc8 <scope_find+0x34>
        if (scope->id_info[i].qst == qst) {
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ba8:	68fb      	ldr	r3, [r7, #12]
    4baa:	00db      	lsls	r3, r3, #3
    4bac:	4413      	add	r3, r2
    4bae:	685a      	ldr	r2, [r3, #4]
    4bb0:	683b      	ldr	r3, [r7, #0]
    4bb2:	429a      	cmp	r2, r3
    4bb4:	d105      	bne.n	4bc2 <scope_find+0x2e>
            return &scope->id_info[i];
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bba:	68fb      	ldr	r3, [r7, #12]
    4bbc:	00db      	lsls	r3, r3, #3
    4bbe:	4413      	add	r3, r2
    4bc0:	e009      	b.n	4bd6 <scope_find+0x42>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4bc2:	68fb      	ldr	r3, [r7, #12]
    4bc4:	3301      	adds	r3, #1
    4bc6:	60fb      	str	r3, [r7, #12]
    4bc8:	687b      	ldr	r3, [r7, #4]
    4bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4bcc:	461a      	mov	r2, r3
    4bce:	68fb      	ldr	r3, [r7, #12]
    4bd0:	429a      	cmp	r2, r3
    4bd2:	d8e7      	bhi.n	4ba4 <scope_find+0x10>
        }
    }
    return NULL;
    4bd4:	2300      	movs	r3, #0
}
    4bd6:	4618      	mov	r0, r3
    4bd8:	3714      	adds	r7, #20
    4bda:	46bd      	mov	sp, r7
    4bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be0:	4770      	bx	lr
    4be2:	bf00      	nop

00004be4 <scope_find_global>:

id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4be4:	b580      	push	{r7, lr}
    4be6:	b082      	sub	sp, #8
    4be8:	af00      	add	r7, sp, #0
    4bea:	6078      	str	r0, [r7, #4]
    4bec:	6039      	str	r1, [r7, #0]
    while (scope->parent != NULL) {
    4bee:	e002      	b.n	4bf6 <scope_find_global+0x12>
        scope = scope->parent;
    4bf0:	687b      	ldr	r3, [r7, #4]
    4bf2:	685b      	ldr	r3, [r3, #4]
    4bf4:	607b      	str	r3, [r7, #4]
    while (scope->parent != NULL) {
    4bf6:	687b      	ldr	r3, [r7, #4]
    4bf8:	685b      	ldr	r3, [r3, #4]
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d1f8      	bne.n	4bf0 <scope_find_global+0xc>
    }
    return scope_find(scope, qst);
    4bfe:	6839      	ldr	r1, [r7, #0]
    4c00:	6878      	ldr	r0, [r7, #4]
    4c02:	f7ff ffc7 	bl	4b94 <scope_find>
    4c06:	4603      	mov	r3, r0
}
    4c08:	4618      	mov	r0, r3
    4c0a:	3708      	adds	r7, #8
    4c0c:	46bd      	mov	sp, r7
    4c0e:	bd80      	pop	{r7, pc}

00004c10 <scope_close_over_in_parents>:

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4c10:	b580      	push	{r7, lr}
    4c12:	b086      	sub	sp, #24
    4c14:	af00      	add	r7, sp, #0
    4c16:	6078      	str	r0, [r7, #4]
    4c18:	6039      	str	r1, [r7, #0]
    assert(scope->parent != NULL); // we should have at least 1 parent
    4c1a:	687b      	ldr	r3, [r7, #4]
    4c1c:	685b      	ldr	r3, [r3, #4]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d105      	bne.n	4c2e <scope_close_over_in_parents+0x1e>
    4c22:	4b1f      	ldr	r3, [pc, #124]	; (4ca0 <scope_close_over_in_parents+0x90>)
    4c24:	4a1f      	ldr	r2, [pc, #124]	; (4ca4 <scope_close_over_in_parents+0x94>)
    4c26:	216e      	movs	r1, #110	; 0x6e
    4c28:	481f      	ldr	r0, [pc, #124]	; (4ca8 <scope_close_over_in_parents+0x98>)
    4c2a:	f016 fbb7 	bl	1b39c <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4c2e:	687b      	ldr	r3, [r7, #4]
    4c30:	685b      	ldr	r3, [r3, #4]
    4c32:	617b      	str	r3, [r7, #20]
        assert(s->parent != NULL); // we should not get to the outer scope
    4c34:	697b      	ldr	r3, [r7, #20]
    4c36:	685b      	ldr	r3, [r3, #4]
    4c38:	2b00      	cmp	r3, #0
    4c3a:	d105      	bne.n	4c48 <scope_close_over_in_parents+0x38>
    4c3c:	4b1b      	ldr	r3, [pc, #108]	; (4cac <scope_close_over_in_parents+0x9c>)
    4c3e:	4a19      	ldr	r2, [pc, #100]	; (4ca4 <scope_close_over_in_parents+0x94>)
    4c40:	2170      	movs	r1, #112	; 0x70
    4c42:	4819      	ldr	r0, [pc, #100]	; (4ca8 <scope_close_over_in_parents+0x98>)
    4c44:	f016 fbaa 	bl	1b39c <__assert_func>
        bool added;
        id_info_t *id = scope_find_or_add_id(s, qst, &added);
    4c48:	f107 030f 	add.w	r3, r7, #15
    4c4c:	461a      	mov	r2, r3
    4c4e:	6839      	ldr	r1, [r7, #0]
    4c50:	6978      	ldr	r0, [r7, #20]
    4c52:	f7ff ff53 	bl	4afc <scope_find_or_add_id>
    4c56:	6138      	str	r0, [r7, #16]
        if (added) {
    4c58:	7bfb      	ldrb	r3, [r7, #15]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d006      	beq.n	4c6c <scope_close_over_in_parents+0x5c>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4c5e:	693b      	ldr	r3, [r7, #16]
    4c60:	2204      	movs	r2, #4
    4c62:	701a      	strb	r2, [r3, #0]
    for (scope_t *s = scope->parent;; s = s->parent) {
    4c64:	697b      	ldr	r3, [r7, #20]
    4c66:	685b      	ldr	r3, [r3, #4]
    4c68:	617b      	str	r3, [r7, #20]
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
            }
            return;
        }
    }
    4c6a:	e7e3      	b.n	4c34 <scope_close_over_in_parents+0x24>
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4c6c:	693b      	ldr	r3, [r7, #16]
    4c6e:	781b      	ldrb	r3, [r3, #0]
    4c70:	2b02      	cmp	r3, #2
    4c72:	d103      	bne.n	4c7c <scope_close_over_in_parents+0x6c>
                id->kind = ID_INFO_KIND_CELL;
    4c74:	693b      	ldr	r3, [r7, #16]
    4c76:	2203      	movs	r2, #3
    4c78:	701a      	strb	r2, [r3, #0]
            return;
    4c7a:	e00d      	b.n	4c98 <scope_close_over_in_parents+0x88>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4c7c:	693b      	ldr	r3, [r7, #16]
    4c7e:	781b      	ldrb	r3, [r3, #0]
    4c80:	2b04      	cmp	r3, #4
    4c82:	d009      	beq.n	4c98 <scope_close_over_in_parents+0x88>
    4c84:	693b      	ldr	r3, [r7, #16]
    4c86:	781b      	ldrb	r3, [r3, #0]
    4c88:	2b03      	cmp	r3, #3
    4c8a:	d005      	beq.n	4c98 <scope_close_over_in_parents+0x88>
    4c8c:	4b08      	ldr	r3, [pc, #32]	; (4cb0 <scope_close_over_in_parents+0xa0>)
    4c8e:	4a05      	ldr	r2, [pc, #20]	; (4ca4 <scope_close_over_in_parents+0x94>)
    4c90:	217e      	movs	r1, #126	; 0x7e
    4c92:	4805      	ldr	r0, [pc, #20]	; (4ca8 <scope_close_over_in_parents+0x98>)
    4c94:	f016 fb82 	bl	1b39c <__assert_func>
            return;
    4c98:	bf00      	nop
}
    4c9a:	3718      	adds	r7, #24
    4c9c:	46bd      	mov	sp, r7
    4c9e:	bd80      	pop	{r7, pc}
    4ca0:	0001e260 	.word	0x0001e260
    4ca4:	0001e2d8 	.word	0x0001e2d8
    4ca8:	0001e24c 	.word	0x0001e24c
    4cac:	0001e278 	.word	0x0001e278
    4cb0:	0001e28c 	.word	0x0001e28c

00004cb4 <scope_find_local_and_close_over>:

void scope_find_local_and_close_over(scope_t *scope, id_info_t *id, qstr qst) {
    4cb4:	b580      	push	{r7, lr}
    4cb6:	b086      	sub	sp, #24
    4cb8:	af00      	add	r7, sp, #0
    4cba:	60f8      	str	r0, [r7, #12]
    4cbc:	60b9      	str	r1, [r7, #8]
    4cbe:	607a      	str	r2, [r7, #4]
    if (scope->parent != NULL) {
    4cc0:	68fb      	ldr	r3, [r7, #12]
    4cc2:	685b      	ldr	r3, [r3, #4]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d028      	beq.n	4d1a <scope_find_local_and_close_over+0x66>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4cc8:	68fb      	ldr	r3, [r7, #12]
    4cca:	685b      	ldr	r3, [r3, #4]
    4ccc:	617b      	str	r3, [r7, #20]
    4cce:	e01e      	b.n	4d0e <scope_find_local_and_close_over+0x5a>
            id_info_t *id2 = scope_find(s, qst);
    4cd0:	6879      	ldr	r1, [r7, #4]
    4cd2:	6978      	ldr	r0, [r7, #20]
    4cd4:	f7ff ff5e 	bl	4b94 <scope_find>
    4cd8:	6138      	str	r0, [r7, #16]
            if (id2 != NULL) {
    4cda:	693b      	ldr	r3, [r7, #16]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d013      	beq.n	4d08 <scope_find_local_and_close_over+0x54>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4ce0:	693b      	ldr	r3, [r7, #16]
    4ce2:	781b      	ldrb	r3, [r3, #0]
    4ce4:	2b02      	cmp	r3, #2
    4ce6:	d007      	beq.n	4cf8 <scope_find_local_and_close_over+0x44>
    4ce8:	693b      	ldr	r3, [r7, #16]
    4cea:	781b      	ldrb	r3, [r3, #0]
    4cec:	2b03      	cmp	r3, #3
    4cee:	d003      	beq.n	4cf8 <scope_find_local_and_close_over+0x44>
    4cf0:	693b      	ldr	r3, [r7, #16]
    4cf2:	781b      	ldrb	r3, [r3, #0]
    4cf4:	2b04      	cmp	r3, #4
    4cf6:	d10f      	bne.n	4d18 <scope_find_local_and_close_over+0x64>
                    id->kind = ID_INFO_KIND_FREE;
    4cf8:	68bb      	ldr	r3, [r7, #8]
    4cfa:	2204      	movs	r2, #4
    4cfc:	701a      	strb	r2, [r3, #0]
                    scope_close_over_in_parents(scope, qst);
    4cfe:	6879      	ldr	r1, [r7, #4]
    4d00:	68f8      	ldr	r0, [r7, #12]
    4d02:	f7ff ff85 	bl	4c10 <scope_close_over_in_parents>
                    return;
    4d06:	e00b      	b.n	4d20 <scope_find_local_and_close_over+0x6c>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4d08:	697b      	ldr	r3, [r7, #20]
    4d0a:	685b      	ldr	r3, [r3, #4]
    4d0c:	617b      	str	r3, [r7, #20]
    4d0e:	697b      	ldr	r3, [r7, #20]
    4d10:	685b      	ldr	r3, [r3, #4]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d1dc      	bne.n	4cd0 <scope_find_local_and_close_over+0x1c>
    4d16:	e000      	b.n	4d1a <scope_find_local_and_close_over+0x66>
                }
                break;
    4d18:	bf00      	nop
            }
        }
    }
    id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    4d1a:	68bb      	ldr	r3, [r7, #8]
    4d1c:	2200      	movs	r2, #0
    4d1e:	701a      	strb	r2, [r3, #0]
}
    4d20:	3718      	adds	r7, #24
    4d22:	46bd      	mov	sp, r7
    4d24:	bd80      	pop	{r7, pc}
    4d26:	bf00      	nop

00004d28 <mp_parse_node_new_small_int>:
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    4d28:	b480      	push	{r7}
    4d2a:	b083      	sub	sp, #12
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    4d30:	687b      	ldr	r3, [r7, #4]
    4d32:	005b      	lsls	r3, r3, #1
    4d34:	f043 0301 	orr.w	r3, r3, #1
}
    4d38:	4618      	mov	r0, r3
    4d3a:	370c      	adds	r7, #12
    4d3c:	46bd      	mov	sp, r7
    4d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d42:	4770      	bx	lr

00004d44 <mp_local_free>:

#if !MICROPY_ENABLE_PYSTACK

#define mp_local_alloc(n_bytes) alloca(n_bytes)

static inline void mp_local_free(void *ptr) {
    4d44:	b480      	push	{r7}
    4d46:	b083      	sub	sp, #12
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
    (void)ptr;
}
    4d4c:	bf00      	nop
    4d4e:	370c      	adds	r7, #12
    4d50:	46bd      	mov	sp, r7
    4d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d56:	4770      	bx	lr

00004d58 <compile_error_set_line>:
    emit_inline_asm_t *emit_inline_asm;                                   // current emitter for inline asm
    const emit_inline_asm_method_table_t *emit_inline_asm_method_table;   // current emit method table for inline asm
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    4d58:	b480      	push	{r7}
    4d5a:	b083      	sub	sp, #12
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	6078      	str	r0, [r7, #4]
    4d60:	6039      	str	r1, [r7, #0]
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	68db      	ldr	r3, [r3, #12]
    4d66:	2b00      	cmp	r3, #0
    4d68:	d10b      	bne.n	4d82 <compile_error_set_line+0x2a>
    4d6a:	683b      	ldr	r3, [r7, #0]
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d008      	beq.n	4d82 <compile_error_set_line+0x2a>
    4d70:	683b      	ldr	r3, [r7, #0]
    4d72:	f003 0303 	and.w	r3, r3, #3
    4d76:	2b00      	cmp	r3, #0
    4d78:	d103      	bne.n	4d82 <compile_error_set_line+0x2a>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    4d7a:	683b      	ldr	r3, [r7, #0]
    4d7c:	681a      	ldr	r2, [r3, #0]
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	60da      	str	r2, [r3, #12]
    }
}
    4d82:	bf00      	nop
    4d84:	370c      	adds	r7, #12
    4d86:	46bd      	mov	sp, r7
    4d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d8c:	4770      	bx	lr
    4d8e:	bf00      	nop

00004d90 <compile_syntax_error>:

STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    4d90:	b580      	push	{r7, lr}
    4d92:	b084      	sub	sp, #16
    4d94:	af00      	add	r7, sp, #0
    4d96:	60f8      	str	r0, [r7, #12]
    4d98:	60b9      	str	r1, [r7, #8]
    4d9a:	607a      	str	r2, [r7, #4]
    // only register the error if there has been no other error
    if (comp->compile_error == MP_OBJ_NULL) {
    4d9c:	68fb      	ldr	r3, [r7, #12]
    4d9e:	689b      	ldr	r3, [r3, #8]
    4da0:	2b00      	cmp	r3, #0
    4da2:	d10a      	bne.n	4dba <compile_syntax_error+0x2a>
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    4da4:	6879      	ldr	r1, [r7, #4]
    4da6:	4807      	ldr	r0, [pc, #28]	; (4dc4 <compile_syntax_error+0x34>)
    4da8:	f00a fbc4 	bl	f534 <mp_obj_new_exception_msg>
    4dac:	4602      	mov	r2, r0
    4dae:	68fb      	ldr	r3, [r7, #12]
    4db0:	609a      	str	r2, [r3, #8]
        compile_error_set_line(comp, pn);
    4db2:	68b9      	ldr	r1, [r7, #8]
    4db4:	68f8      	ldr	r0, [r7, #12]
    4db6:	f7ff ffcf 	bl	4d58 <compile_error_set_line>
    }
}
    4dba:	bf00      	nop
    4dbc:	3710      	adds	r7, #16
    4dbe:	46bd      	mov	sp, r7
    4dc0:	bd80      	pop	{r7, pc}
    4dc2:	bf00      	nop
    4dc4:	000206d0 	.word	0x000206d0

00004dc8 <comp_next_label>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    4dc8:	b480      	push	{r7}
    4dca:	b083      	sub	sp, #12
    4dcc:	af00      	add	r7, sp, #0
    4dce:	6078      	str	r0, [r7, #4]
    return comp->next_label++;
    4dd0:	687b      	ldr	r3, [r7, #4]
    4dd2:	691b      	ldr	r3, [r3, #16]
    4dd4:	1c59      	adds	r1, r3, #1
    4dd6:	687a      	ldr	r2, [r7, #4]
    4dd8:	6111      	str	r1, [r2, #16]
}
    4dda:	4618      	mov	r0, r3
    4ddc:	370c      	adds	r7, #12
    4dde:	46bd      	mov	sp, r7
    4de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de4:	4770      	bx	lr
    4de6:	bf00      	nop

00004de8 <compile_increase_except_level>:

STATIC void compile_increase_except_level(compiler_t *comp) {
    4de8:	b480      	push	{r7}
    4dea:	b083      	sub	sp, #12
    4dec:	af00      	add	r7, sp, #0
    4dee:	6078      	str	r0, [r7, #4]
    comp->cur_except_level += 1;
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	8b9b      	ldrh	r3, [r3, #28]
    4df4:	3301      	adds	r3, #1
    4df6:	b29a      	uxth	r2, r3
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	839a      	strh	r2, [r3, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    4dfc:	687b      	ldr	r3, [r7, #4]
    4dfe:	8b9a      	ldrh	r2, [r3, #28]
    4e00:	687b      	ldr	r3, [r7, #4]
    4e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4e06:	429a      	cmp	r2, r3
    4e08:	d904      	bls.n	4e14 <compile_increase_except_level+0x2c>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e0e:	687a      	ldr	r2, [r7, #4]
    4e10:	8b92      	ldrh	r2, [r2, #28]
    4e12:	849a      	strh	r2, [r3, #36]	; 0x24
    }
}
    4e14:	bf00      	nop
    4e16:	370c      	adds	r7, #12
    4e18:	46bd      	mov	sp, r7
    4e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e1e:	4770      	bx	lr

00004e20 <compile_decrease_except_level>:

STATIC void compile_decrease_except_level(compiler_t *comp) {
    4e20:	b580      	push	{r7, lr}
    4e22:	b082      	sub	sp, #8
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
    assert(comp->cur_except_level > 0);
    4e28:	687b      	ldr	r3, [r7, #4]
    4e2a:	8b9b      	ldrh	r3, [r3, #28]
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d105      	bne.n	4e3c <compile_decrease_except_level+0x1c>
    4e30:	4b07      	ldr	r3, [pc, #28]	; (4e50 <compile_decrease_except_level+0x30>)
    4e32:	4a08      	ldr	r2, [pc, #32]	; (4e54 <compile_decrease_except_level+0x34>)
    4e34:	21b5      	movs	r1, #181	; 0xb5
    4e36:	4808      	ldr	r0, [pc, #32]	; (4e58 <compile_decrease_except_level+0x38>)
    4e38:	f016 fab0 	bl	1b39c <__assert_func>
    comp->cur_except_level -= 1;
    4e3c:	687b      	ldr	r3, [r7, #4]
    4e3e:	8b9b      	ldrh	r3, [r3, #28]
    4e40:	3b01      	subs	r3, #1
    4e42:	b29a      	uxth	r2, r3
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	839a      	strh	r2, [r3, #28]
}
    4e48:	bf00      	nop
    4e4a:	3708      	adds	r7, #8
    4e4c:	46bd      	mov	sp, r7
    4e4e:	bd80      	pop	{r7, pc}
    4e50:	0001e2f4 	.word	0x0001e2f4
    4e54:	0001ee88 	.word	0x0001ee88
    4e58:	0001e310 	.word	0x0001e310

00004e5c <scope_new_and_link>:

STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b086      	sub	sp, #24
    4e60:	af00      	add	r7, sp, #0
    4e62:	60f8      	str	r0, [r7, #12]
    4e64:	60b9      	str	r1, [r7, #8]
    4e66:	607a      	str	r2, [r7, #4]
    4e68:	603b      	str	r3, [r7, #0]
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    4e6a:	68fb      	ldr	r3, [r7, #12]
    4e6c:	681a      	ldr	r2, [r3, #0]
    4e6e:	683b      	ldr	r3, [r7, #0]
    4e70:	6879      	ldr	r1, [r7, #4]
    4e72:	68b8      	ldr	r0, [r7, #8]
    4e74:	f7ff fdd8 	bl	4a28 <scope_new>
    4e78:	6138      	str	r0, [r7, #16]
    scope->parent = comp->scope_cur;
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4e7e:	693b      	ldr	r3, [r7, #16]
    4e80:	605a      	str	r2, [r3, #4]
    scope->next = NULL;
    4e82:	693b      	ldr	r3, [r7, #16]
    4e84:	2200      	movs	r2, #0
    4e86:	609a      	str	r2, [r3, #8]
    if (comp->scope_head == NULL) {
    4e88:	68fb      	ldr	r3, [r7, #12]
    4e8a:	6a1b      	ldr	r3, [r3, #32]
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	d103      	bne.n	4e98 <scope_new_and_link+0x3c>
        comp->scope_head = scope;
    4e90:	68fb      	ldr	r3, [r7, #12]
    4e92:	693a      	ldr	r2, [r7, #16]
    4e94:	621a      	str	r2, [r3, #32]
    4e96:	e00d      	b.n	4eb4 <scope_new_and_link+0x58>
    } else {
        scope_t *s = comp->scope_head;
    4e98:	68fb      	ldr	r3, [r7, #12]
    4e9a:	6a1b      	ldr	r3, [r3, #32]
    4e9c:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4e9e:	e002      	b.n	4ea6 <scope_new_and_link+0x4a>
            s = s->next;
    4ea0:	697b      	ldr	r3, [r7, #20]
    4ea2:	689b      	ldr	r3, [r3, #8]
    4ea4:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4ea6:	697b      	ldr	r3, [r7, #20]
    4ea8:	689b      	ldr	r3, [r3, #8]
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d1f8      	bne.n	4ea0 <scope_new_and_link+0x44>
        }
        s->next = scope;
    4eae:	697b      	ldr	r3, [r7, #20]
    4eb0:	693a      	ldr	r2, [r7, #16]
    4eb2:	609a      	str	r2, [r3, #8]
    }
    return scope;
    4eb4:	693b      	ldr	r3, [r7, #16]
}
    4eb6:	4618      	mov	r0, r3
    4eb8:	3718      	adds	r7, #24
    4eba:	46bd      	mov	sp, r7
    4ebc:	bd80      	pop	{r7, pc}
    4ebe:	bf00      	nop

00004ec0 <apply_to_single_or_list>:

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    4ec0:	b580      	push	{r7, lr}
    4ec2:	b088      	sub	sp, #32
    4ec4:	af00      	add	r7, sp, #0
    4ec6:	60f8      	str	r0, [r7, #12]
    4ec8:	60b9      	str	r1, [r7, #8]
    4eca:	607a      	str	r2, [r7, #4]
    4ecc:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4ece:	68bb      	ldr	r3, [r7, #8]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d024      	beq.n	4f1e <apply_to_single_or_list+0x5e>
    4ed4:	68bb      	ldr	r3, [r7, #8]
    4ed6:	f003 0303 	and.w	r3, r3, #3
    4eda:	2b00      	cmp	r3, #0
    4edc:	d11f      	bne.n	4f1e <apply_to_single_or_list+0x5e>
    4ede:	68bb      	ldr	r3, [r7, #8]
    4ee0:	685b      	ldr	r3, [r3, #4]
    4ee2:	b2da      	uxtb	r2, r3
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	429a      	cmp	r2, r3
    4ee8:	d119      	bne.n	4f1e <apply_to_single_or_list+0x5e>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    4eea:	68bb      	ldr	r3, [r7, #8]
    4eec:	61bb      	str	r3, [r7, #24]
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4eee:	69bb      	ldr	r3, [r7, #24]
    4ef0:	685b      	ldr	r3, [r3, #4]
    4ef2:	0a1b      	lsrs	r3, r3, #8
    4ef4:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < num_nodes; i++) {
    4ef6:	2300      	movs	r3, #0
    4ef8:	61fb      	str	r3, [r7, #28]
    4efa:	e00b      	b.n	4f14 <apply_to_single_or_list+0x54>
            f(comp, pns->nodes[i]);
    4efc:	69bb      	ldr	r3, [r7, #24]
    4efe:	69fa      	ldr	r2, [r7, #28]
    4f00:	3202      	adds	r2, #2
    4f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4f06:	683b      	ldr	r3, [r7, #0]
    4f08:	4611      	mov	r1, r2
    4f0a:	68f8      	ldr	r0, [r7, #12]
    4f0c:	4798      	blx	r3
        for (int i = 0; i < num_nodes; i++) {
    4f0e:	69fb      	ldr	r3, [r7, #28]
    4f10:	3301      	adds	r3, #1
    4f12:	61fb      	str	r3, [r7, #28]
    4f14:	69fa      	ldr	r2, [r7, #28]
    4f16:	697b      	ldr	r3, [r7, #20]
    4f18:	429a      	cmp	r2, r3
    4f1a:	dbef      	blt.n	4efc <apply_to_single_or_list+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4f1c:	e007      	b.n	4f2e <apply_to_single_or_list+0x6e>
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    4f1e:	68bb      	ldr	r3, [r7, #8]
    4f20:	2b00      	cmp	r3, #0
    4f22:	d004      	beq.n	4f2e <apply_to_single_or_list+0x6e>
        f(comp, pn);
    4f24:	683b      	ldr	r3, [r7, #0]
    4f26:	68b9      	ldr	r1, [r7, #8]
    4f28:	68f8      	ldr	r0, [r7, #12]
    4f2a:	4798      	blx	r3
    }
}
    4f2c:	e7ff      	b.n	4f2e <apply_to_single_or_list+0x6e>
    4f2e:	bf00      	nop
    4f30:	3720      	adds	r7, #32
    4f32:	46bd      	mov	sp, r7
    4f34:	bd80      	pop	{r7, pc}
    4f36:	bf00      	nop

00004f38 <compile_generic_all_nodes>:

STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    4f38:	b580      	push	{r7, lr}
    4f3a:	b084      	sub	sp, #16
    4f3c:	af00      	add	r7, sp, #0
    4f3e:	6078      	str	r0, [r7, #4]
    4f40:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4f42:	683b      	ldr	r3, [r7, #0]
    4f44:	685b      	ldr	r3, [r3, #4]
    4f46:	0a1b      	lsrs	r3, r3, #8
    4f48:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < num_nodes; i++) {
    4f4a:	2300      	movs	r3, #0
    4f4c:	60fb      	str	r3, [r7, #12]
    4f4e:	e019      	b.n	4f84 <compile_generic_all_nodes+0x4c>
        compile_node(comp, pns->nodes[i]);
    4f50:	683b      	ldr	r3, [r7, #0]
    4f52:	68fa      	ldr	r2, [r7, #12]
    4f54:	3202      	adds	r2, #2
    4f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f5a:	4619      	mov	r1, r3
    4f5c:	6878      	ldr	r0, [r7, #4]
    4f5e:	f003 fd1d 	bl	899c <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	689b      	ldr	r3, [r3, #8]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d009      	beq.n	4f7e <compile_generic_all_nodes+0x46>
            // add line info for the error in case it didn't have a line number
            compile_error_set_line(comp, pns->nodes[i]);
    4f6a:	683b      	ldr	r3, [r7, #0]
    4f6c:	68fa      	ldr	r2, [r7, #12]
    4f6e:	3202      	adds	r2, #2
    4f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f74:	4619      	mov	r1, r3
    4f76:	6878      	ldr	r0, [r7, #4]
    4f78:	f7ff feee 	bl	4d58 <compile_error_set_line>
            return;
    4f7c:	e006      	b.n	4f8c <compile_generic_all_nodes+0x54>
    for (int i = 0; i < num_nodes; i++) {
    4f7e:	68fb      	ldr	r3, [r7, #12]
    4f80:	3301      	adds	r3, #1
    4f82:	60fb      	str	r3, [r7, #12]
    4f84:	68fa      	ldr	r2, [r7, #12]
    4f86:	68bb      	ldr	r3, [r7, #8]
    4f88:	429a      	cmp	r2, r3
    4f8a:	dbe1      	blt.n	4f50 <compile_generic_all_nodes+0x18>
        }
    }
}
    4f8c:	3710      	adds	r7, #16
    4f8e:	46bd      	mov	sp, r7
    4f90:	bd80      	pop	{r7, pc}
    4f92:	bf00      	nop

00004f94 <compile_load_id>:

STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    4f94:	b580      	push	{r7, lr}
    4f96:	b082      	sub	sp, #8
    4f98:	af00      	add	r7, sp, #0
    4f9a:	6078      	str	r0, [r7, #4]
    4f9c:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	795b      	ldrb	r3, [r3, #5]
    4fa2:	2b01      	cmp	r3, #1
    4fa4:	d106      	bne.n	4fb4 <compile_load_id+0x20>
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    4fa6:	687b      	ldr	r3, [r7, #4]
    4fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4faa:	6839      	ldr	r1, [r7, #0]
    4fac:	4618      	mov	r0, r3
    4fae:	f004 fbfb 	bl	97a8 <mp_emit_common_get_id_for_load>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->load_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4fb2:	e007      	b.n	4fc4 <compile_load_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    4fb4:	687b      	ldr	r3, [r7, #4]
    4fb6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4fb8:	687b      	ldr	r3, [r7, #4]
    4fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4fbc:	683b      	ldr	r3, [r7, #0]
    4fbe:	4903      	ldr	r1, [pc, #12]	; (4fcc <compile_load_id+0x38>)
    4fc0:	f004 fc38 	bl	9834 <mp_emit_common_id_op>
}
    4fc4:	bf00      	nop
    4fc6:	3708      	adds	r7, #8
    4fc8:	46bd      	mov	sp, r7
    4fca:	bd80      	pop	{r7, pc}
    4fcc:	0001f39c 	.word	0x0001f39c

00004fd0 <compile_store_id>:

STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    4fd0:	b580      	push	{r7, lr}
    4fd2:	b082      	sub	sp, #8
    4fd4:	af00      	add	r7, sp, #0
    4fd6:	6078      	str	r0, [r7, #4]
    4fd8:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	795b      	ldrb	r3, [r3, #5]
    4fde:	2b01      	cmp	r3, #1
    4fe0:	d106      	bne.n	4ff0 <compile_store_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    4fe2:	687b      	ldr	r3, [r7, #4]
    4fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4fe6:	6839      	ldr	r1, [r7, #0]
    4fe8:	4618      	mov	r0, r3
    4fea:	f004 fbf7 	bl	97dc <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->store_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4fee:	e007      	b.n	5000 <compile_store_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    4ff0:	687b      	ldr	r3, [r7, #4]
    4ff2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4ff8:	683b      	ldr	r3, [r7, #0]
    4ffa:	4903      	ldr	r1, [pc, #12]	; (5008 <compile_store_id+0x38>)
    4ffc:	f004 fc1a 	bl	9834 <mp_emit_common_id_op>
}
    5000:	bf00      	nop
    5002:	3708      	adds	r7, #8
    5004:	46bd      	mov	sp, r7
    5006:	bd80      	pop	{r7, pc}
    5008:	0001f3a4 	.word	0x0001f3a4

0000500c <compile_delete_id>:

STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    500c:	b580      	push	{r7, lr}
    500e:	b082      	sub	sp, #8
    5010:	af00      	add	r7, sp, #0
    5012:	6078      	str	r0, [r7, #4]
    5014:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    5016:	687b      	ldr	r3, [r7, #4]
    5018:	795b      	ldrb	r3, [r3, #5]
    501a:	2b01      	cmp	r3, #1
    501c:	d106      	bne.n	502c <compile_delete_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    501e:	687b      	ldr	r3, [r7, #4]
    5020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5022:	6839      	ldr	r1, [r7, #0]
    5024:	4618      	mov	r0, r3
    5026:	f004 fbd9 	bl	97dc <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->delete_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    502a:	e007      	b.n	503c <compile_delete_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5030:	687b      	ldr	r3, [r7, #4]
    5032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5034:	683b      	ldr	r3, [r7, #0]
    5036:	4903      	ldr	r1, [pc, #12]	; (5044 <compile_delete_id+0x38>)
    5038:	f004 fbfc 	bl	9834 <mp_emit_common_id_op>
}
    503c:	bf00      	nop
    503e:	3708      	adds	r7, #8
    5040:	46bd      	mov	sp, r7
    5042:	bd80      	pop	{r7, pc}
    5044:	0001f3ac 	.word	0x0001f3ac

00005048 <c_tuple>:

STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    5048:	b580      	push	{r7, lr}
    504a:	b088      	sub	sp, #32
    504c:	af00      	add	r7, sp, #0
    504e:	60f8      	str	r0, [r7, #12]
    5050:	60b9      	str	r1, [r7, #8]
    5052:	607a      	str	r2, [r7, #4]
    int total = 0;
    5054:	2300      	movs	r3, #0
    5056:	61fb      	str	r3, [r7, #28]
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    5058:	68bb      	ldr	r3, [r7, #8]
    505a:	2b00      	cmp	r3, #0
    505c:	d006      	beq.n	506c <c_tuple+0x24>
        compile_node(comp, pn);
    505e:	68b9      	ldr	r1, [r7, #8]
    5060:	68f8      	ldr	r0, [r7, #12]
    5062:	f003 fc9b 	bl	899c <compile_node>
        total += 1;
    5066:	69fb      	ldr	r3, [r7, #28]
    5068:	3301      	adds	r3, #1
    506a:	61fb      	str	r3, [r7, #28]
    }
    if (pns_list != NULL) {
    506c:	687b      	ldr	r3, [r7, #4]
    506e:	2b00      	cmp	r3, #0
    5070:	d01a      	beq.n	50a8 <c_tuple+0x60>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    5072:	687b      	ldr	r3, [r7, #4]
    5074:	685b      	ldr	r3, [r3, #4]
    5076:	0a1b      	lsrs	r3, r3, #8
    5078:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < n; i++) {
    507a:	2300      	movs	r3, #0
    507c:	61bb      	str	r3, [r7, #24]
    507e:	e00b      	b.n	5098 <c_tuple+0x50>
            compile_node(comp, pns_list->nodes[i]);
    5080:	687b      	ldr	r3, [r7, #4]
    5082:	69ba      	ldr	r2, [r7, #24]
    5084:	3202      	adds	r2, #2
    5086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    508a:	4619      	mov	r1, r3
    508c:	68f8      	ldr	r0, [r7, #12]
    508e:	f003 fc85 	bl	899c <compile_node>
        for (int i = 0; i < n; i++) {
    5092:	69bb      	ldr	r3, [r7, #24]
    5094:	3301      	adds	r3, #1
    5096:	61bb      	str	r3, [r7, #24]
    5098:	69ba      	ldr	r2, [r7, #24]
    509a:	697b      	ldr	r3, [r7, #20]
    509c:	429a      	cmp	r2, r3
    509e:	dbef      	blt.n	5080 <c_tuple+0x38>
        }
        total += n;
    50a0:	69fa      	ldr	r2, [r7, #28]
    50a2:	697b      	ldr	r3, [r7, #20]
    50a4:	4413      	add	r3, r2
    50a6:	61fb      	str	r3, [r7, #28]
    }
    EMIT_ARG(build, total, MP_EMIT_BUILD_TUPLE);
    50a8:	68fb      	ldr	r3, [r7, #12]
    50aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50ac:	69f9      	ldr	r1, [r7, #28]
    50ae:	2200      	movs	r2, #0
    50b0:	4618      	mov	r0, r3
    50b2:	f005 fcdb 	bl	aa6c <mp_emit_bc_build>
}
    50b6:	bf00      	nop
    50b8:	3720      	adds	r7, #32
    50ba:	46bd      	mov	sp, r7
    50bc:	bd80      	pop	{r7, pc}
    50be:	bf00      	nop

000050c0 <compile_generic_tuple>:

STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    50c0:	b580      	push	{r7, lr}
    50c2:	b082      	sub	sp, #8
    50c4:	af00      	add	r7, sp, #0
    50c6:	6078      	str	r0, [r7, #4]
    50c8:	6039      	str	r1, [r7, #0]
    // a simple tuple expression
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    50ca:	683a      	ldr	r2, [r7, #0]
    50cc:	2100      	movs	r1, #0
    50ce:	6878      	ldr	r0, [r7, #4]
    50d0:	f7ff ffba 	bl	5048 <c_tuple>
}
    50d4:	bf00      	nop
    50d6:	3708      	adds	r7, #8
    50d8:	46bd      	mov	sp, r7
    50da:	bd80      	pop	{r7, pc}

000050dc <c_if_cond>:

STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    50dc:	b580      	push	{r7, lr}
    50de:	b08a      	sub	sp, #40	; 0x28
    50e0:	af00      	add	r7, sp, #0
    50e2:	60f8      	str	r0, [r7, #12]
    50e4:	60b9      	str	r1, [r7, #8]
    50e6:	603b      	str	r3, [r7, #0]
    50e8:	4613      	mov	r3, r2
    50ea:	71fb      	strb	r3, [r7, #7]
    if (mp_parse_node_is_const_false(pn)) {
    50ec:	68b8      	ldr	r0, [r7, #8]
    50ee:	f7fe fcd3 	bl	3a98 <mp_parse_node_is_const_false>
    50f2:	4603      	mov	r3, r0
    50f4:	2b00      	cmp	r3, #0
    50f6:	d00e      	beq.n	5116 <c_if_cond+0x3a>
        if (jump_if == false) {
    50f8:	79fb      	ldrb	r3, [r7, #7]
    50fa:	f083 0301 	eor.w	r3, r3, #1
    50fe:	b2db      	uxtb	r3, r3
    5100:	2b00      	cmp	r3, #0
    5102:	f000 80eb 	beq.w	52dc <c_if_cond+0x200>
            EMIT_ARG(jump, label);
    5106:	68fb      	ldr	r3, [r7, #12]
    5108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    510a:	683a      	ldr	r2, [r7, #0]
    510c:	4611      	mov	r1, r2
    510e:	4618      	mov	r0, r3
    5110:	f005 fb1c 	bl	a74c <mp_emit_bc_jump>
        }
        return;
    5114:	e0e2      	b.n	52dc <c_if_cond+0x200>
    } else if (mp_parse_node_is_const_true(pn)) {
    5116:	68b8      	ldr	r0, [r7, #8]
    5118:	f7fe fcda 	bl	3ad0 <mp_parse_node_is_const_true>
    511c:	4603      	mov	r3, r0
    511e:	2b00      	cmp	r3, #0
    5120:	d00b      	beq.n	513a <c_if_cond+0x5e>
        if (jump_if == true) {
    5122:	79fb      	ldrb	r3, [r7, #7]
    5124:	2b00      	cmp	r3, #0
    5126:	f000 80db 	beq.w	52e0 <c_if_cond+0x204>
            EMIT_ARG(jump, label);
    512a:	68fb      	ldr	r3, [r7, #12]
    512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    512e:	683a      	ldr	r2, [r7, #0]
    5130:	4611      	mov	r1, r2
    5132:	4618      	mov	r0, r3
    5134:	f005 fb0a 	bl	a74c <mp_emit_bc_jump>
        }
        return;
    5138:	e0d2      	b.n	52e0 <c_if_cond+0x204>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    513a:	68bb      	ldr	r3, [r7, #8]
    513c:	2b00      	cmp	r3, #0
    513e:	f000 80c1 	beq.w	52c4 <c_if_cond+0x1e8>
    5142:	68bb      	ldr	r3, [r7, #8]
    5144:	f003 0303 	and.w	r3, r3, #3
    5148:	2b00      	cmp	r3, #0
    514a:	f040 80bb 	bne.w	52c4 <c_if_cond+0x1e8>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    514e:	68bb      	ldr	r3, [r7, #8]
    5150:	61fb      	str	r3, [r7, #28]
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5152:	69fb      	ldr	r3, [r7, #28]
    5154:	685b      	ldr	r3, [r3, #4]
    5156:	0a1b      	lsrs	r3, r3, #8
    5158:	61bb      	str	r3, [r7, #24]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    515a:	69fb      	ldr	r3, [r7, #28]
    515c:	685b      	ldr	r3, [r3, #4]
    515e:	b2db      	uxtb	r3, r3
    5160:	2b1c      	cmp	r3, #28
    5162:	d152      	bne.n	520a <c_if_cond+0x12e>
            if (jump_if == false) {
    5164:	79fb      	ldrb	r3, [r7, #7]
    5166:	f083 0301 	eor.w	r3, r3, #1
    516a:	b2db      	uxtb	r3, r3
    516c:	2b00      	cmp	r3, #0
    516e:	d037      	beq.n	51e0 <c_if_cond+0x104>
    5170:	e000      	b.n	5174 <c_if_cond+0x98>
            return;
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
            if (jump_if == false) {
                goto and_or_logic2;
            } else {
                goto and_or_logic1;
    5172:	bf00      	nop
                uint label2 = comp_next_label(comp);
    5174:	68f8      	ldr	r0, [r7, #12]
    5176:	f7ff fe27 	bl	4dc8 <comp_next_label>
    517a:	6178      	str	r0, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    517c:	2300      	movs	r3, #0
    517e:	627b      	str	r3, [r7, #36]	; 0x24
    5180:	e017      	b.n	51b2 <c_if_cond+0xd6>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    5182:	69fb      	ldr	r3, [r7, #28]
    5184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5186:	3202      	adds	r2, #2
    5188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    518c:	79fb      	ldrb	r3, [r7, #7]
    518e:	2b00      	cmp	r3, #0
    5190:	bf14      	ite	ne
    5192:	2301      	movne	r3, #1
    5194:	2300      	moveq	r3, #0
    5196:	b2db      	uxtb	r3, r3
    5198:	f083 0301 	eor.w	r3, r3, #1
    519c:	b2db      	uxtb	r3, r3
    519e:	f003 0301 	and.w	r3, r3, #1
    51a2:	b2da      	uxtb	r2, r3
    51a4:	697b      	ldr	r3, [r7, #20]
    51a6:	68f8      	ldr	r0, [r7, #12]
    51a8:	f7ff ff98 	bl	50dc <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    51ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51ae:	3301      	adds	r3, #1
    51b0:	627b      	str	r3, [r7, #36]	; 0x24
    51b2:	69bb      	ldr	r3, [r7, #24]
    51b4:	1e5a      	subs	r2, r3, #1
    51b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51b8:	429a      	cmp	r2, r3
    51ba:	dce2      	bgt.n	5182 <c_if_cond+0xa6>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    51bc:	69bb      	ldr	r3, [r7, #24]
    51be:	1e5a      	subs	r2, r3, #1
    51c0:	69fb      	ldr	r3, [r7, #28]
    51c2:	3202      	adds	r2, #2
    51c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    51c8:	79fa      	ldrb	r2, [r7, #7]
    51ca:	683b      	ldr	r3, [r7, #0]
    51cc:	68f8      	ldr	r0, [r7, #12]
    51ce:	f7ff ff85 	bl	50dc <c_if_cond>
                EMIT_ARG(label_assign, label2);
    51d2:	68fb      	ldr	r3, [r7, #12]
    51d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51d6:	6979      	ldr	r1, [r7, #20]
    51d8:	4618      	mov	r0, r3
    51da:	f005 f829 	bl	a230 <mp_emit_bc_label_assign>
            return;
    51de:	e082      	b.n	52e6 <c_if_cond+0x20a>
                for (int i = 0; i < n; i++) {
    51e0:	2300      	movs	r3, #0
    51e2:	623b      	str	r3, [r7, #32]
    51e4:	e00c      	b.n	5200 <c_if_cond+0x124>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    51e6:	69fb      	ldr	r3, [r7, #28]
    51e8:	6a3a      	ldr	r2, [r7, #32]
    51ea:	3202      	adds	r2, #2
    51ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    51f0:	79fa      	ldrb	r2, [r7, #7]
    51f2:	683b      	ldr	r3, [r7, #0]
    51f4:	68f8      	ldr	r0, [r7, #12]
    51f6:	f7ff ff71 	bl	50dc <c_if_cond>
                for (int i = 0; i < n; i++) {
    51fa:	6a3b      	ldr	r3, [r7, #32]
    51fc:	3301      	adds	r3, #1
    51fe:	623b      	str	r3, [r7, #32]
    5200:	6a3a      	ldr	r2, [r7, #32]
    5202:	69bb      	ldr	r3, [r7, #24]
    5204:	429a      	cmp	r2, r3
    5206:	dbee      	blt.n	51e6 <c_if_cond+0x10a>
            return;
    5208:	e06d      	b.n	52e6 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    520a:	69fb      	ldr	r3, [r7, #28]
    520c:	685b      	ldr	r3, [r3, #4]
    520e:	b2db      	uxtb	r3, r3
    5210:	2b1d      	cmp	r3, #29
    5212:	d106      	bne.n	5222 <c_if_cond+0x146>
            if (jump_if == false) {
    5214:	79fb      	ldrb	r3, [r7, #7]
    5216:	f083 0301 	eor.w	r3, r3, #1
    521a:	b2db      	uxtb	r3, r3
    521c:	2b00      	cmp	r3, #0
    521e:	d0a8      	beq.n	5172 <c_if_cond+0x96>
                goto and_or_logic2;
    5220:	e7de      	b.n	51e0 <c_if_cond+0x104>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    5222:	69fb      	ldr	r3, [r7, #28]
    5224:	685b      	ldr	r3, [r3, #4]
    5226:	b2db      	uxtb	r3, r3
    5228:	2b1e      	cmp	r3, #30
    522a:	d112      	bne.n	5252 <c_if_cond+0x176>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    522c:	69fb      	ldr	r3, [r7, #28]
    522e:	6899      	ldr	r1, [r3, #8]
    5230:	79fb      	ldrb	r3, [r7, #7]
    5232:	2b00      	cmp	r3, #0
    5234:	bf14      	ite	ne
    5236:	2301      	movne	r3, #1
    5238:	2300      	moveq	r3, #0
    523a:	b2db      	uxtb	r3, r3
    523c:	f083 0301 	eor.w	r3, r3, #1
    5240:	b2db      	uxtb	r3, r3
    5242:	f003 0301 	and.w	r3, r3, #1
    5246:	b2da      	uxtb	r2, r3
    5248:	683b      	ldr	r3, [r7, #0]
    524a:	68f8      	ldr	r0, [r7, #12]
    524c:	f7ff ff46 	bl	50dc <c_if_cond>
            return;
    5250:	e049      	b.n	52e6 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    5252:	69fb      	ldr	r3, [r7, #28]
    5254:	685b      	ldr	r3, [r3, #4]
    5256:	b2db      	uxtb	r3, r3
    5258:	2b2a      	cmp	r3, #42	; 0x2a
    525a:	d133      	bne.n	52c4 <c_if_cond+0x1e8>
            // cond is something in parenthesis
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    525c:	69fb      	ldr	r3, [r7, #28]
    525e:	689b      	ldr	r3, [r3, #8]
    5260:	2b00      	cmp	r3, #0
    5262:	d10d      	bne.n	5280 <c_if_cond+0x1a4>
                // empty tuple, acts as false for the condition
                if (jump_if == false) {
    5264:	79fb      	ldrb	r3, [r7, #7]
    5266:	f083 0301 	eor.w	r3, r3, #1
    526a:	b2db      	uxtb	r3, r3
    526c:	2b00      	cmp	r3, #0
    526e:	d039      	beq.n	52e4 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    5270:	68fb      	ldr	r3, [r7, #12]
    5272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5274:	683a      	ldr	r2, [r7, #0]
    5276:	4611      	mov	r1, r2
    5278:	4618      	mov	r0, r3
    527a:	f005 fa67 	bl	a74c <mp_emit_bc_jump>
                // non-empty tuple, acts as true for the condition
                if (jump_if == true) {
                    EMIT_ARG(jump, label);
                }
            }
            return;
    527e:	e031      	b.n	52e4 <c_if_cond+0x208>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    5280:	69fb      	ldr	r3, [r7, #28]
    5282:	689b      	ldr	r3, [r3, #8]
    5284:	2b00      	cmp	r3, #0
    5286:	d00b      	beq.n	52a0 <c_if_cond+0x1c4>
    5288:	69fb      	ldr	r3, [r7, #28]
    528a:	689b      	ldr	r3, [r3, #8]
    528c:	f003 0303 	and.w	r3, r3, #3
    5290:	2b00      	cmp	r3, #0
    5292:	d105      	bne.n	52a0 <c_if_cond+0x1c4>
    5294:	69fb      	ldr	r3, [r7, #28]
    5296:	689b      	ldr	r3, [r3, #8]
    5298:	685b      	ldr	r3, [r3, #4]
    529a:	b2db      	uxtb	r3, r3
    529c:	2b8a      	cmp	r3, #138	; 0x8a
    529e:	d006      	beq.n	52ae <c_if_cond+0x1d2>
    52a0:	4b12      	ldr	r3, [pc, #72]	; (52ec <c_if_cond+0x210>)
    52a2:	4a13      	ldr	r2, [pc, #76]	; (52f0 <c_if_cond+0x214>)
    52a4:	f240 114b 	movw	r1, #331	; 0x14b
    52a8:	4812      	ldr	r0, [pc, #72]	; (52f4 <c_if_cond+0x218>)
    52aa:	f016 f877 	bl	1b39c <__assert_func>
                if (jump_if == true) {
    52ae:	79fb      	ldrb	r3, [r7, #7]
    52b0:	2b00      	cmp	r3, #0
    52b2:	d017      	beq.n	52e4 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    52b4:	68fb      	ldr	r3, [r7, #12]
    52b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52b8:	683a      	ldr	r2, [r7, #0]
    52ba:	4611      	mov	r1, r2
    52bc:	4618      	mov	r0, r3
    52be:	f005 fa45 	bl	a74c <mp_emit_bc_jump>
            return;
    52c2:	e00f      	b.n	52e4 <c_if_cond+0x208>
        }
    }

    // nothing special, fall back to default compiling for node and jump
    compile_node(comp, pn);
    52c4:	68b9      	ldr	r1, [r7, #8]
    52c6:	68f8      	ldr	r0, [r7, #12]
    52c8:	f003 fb68 	bl	899c <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    52cc:	68fb      	ldr	r3, [r7, #12]
    52ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52d0:	683a      	ldr	r2, [r7, #0]
    52d2:	79f9      	ldrb	r1, [r7, #7]
    52d4:	4618      	mov	r0, r3
    52d6:	f005 fa4b 	bl	a770 <mp_emit_bc_pop_jump_if>
    52da:	e004      	b.n	52e6 <c_if_cond+0x20a>
        return;
    52dc:	bf00      	nop
    52de:	e002      	b.n	52e6 <c_if_cond+0x20a>
        return;
    52e0:	bf00      	nop
    52e2:	e000      	b.n	52e6 <c_if_cond+0x20a>
            return;
    52e4:	bf00      	nop
}
    52e6:	3728      	adds	r7, #40	; 0x28
    52e8:	46bd      	mov	sp, r7
    52ea:	bd80      	pop	{r7, pc}
    52ec:	0001e324 	.word	0x0001e324
    52f0:	0001eea8 	.word	0x0001eea8
    52f4:	0001e310 	.word	0x0001e310

000052f8 <c_assign_atom_expr>:

typedef enum { ASSIGN_STORE, ASSIGN_AUG_LOAD, ASSIGN_AUG_STORE } assign_kind_t;
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t kind);

STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    52f8:	b580      	push	{r7, lr}
    52fa:	b088      	sub	sp, #32
    52fc:	af00      	add	r7, sp, #0
    52fe:	60f8      	str	r0, [r7, #12]
    5300:	60b9      	str	r1, [r7, #8]
    5302:	607a      	str	r2, [r7, #4]
    if (assign_kind != ASSIGN_AUG_STORE) {
    5304:	687b      	ldr	r3, [r7, #4]
    5306:	2b02      	cmp	r3, #2
    5308:	d005      	beq.n	5316 <c_assign_atom_expr+0x1e>
        compile_node(comp, pns->nodes[0]);
    530a:	68bb      	ldr	r3, [r7, #8]
    530c:	689b      	ldr	r3, [r3, #8]
    530e:	4619      	mov	r1, r3
    5310:	68f8      	ldr	r0, [r7, #12]
    5312:	f003 fb43 	bl	899c <compile_node>
    }

    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5316:	68bb      	ldr	r3, [r7, #8]
    5318:	68db      	ldr	r3, [r3, #12]
    531a:	2b00      	cmp	r3, #0
    531c:	f000 80b0 	beq.w	5480 <c_assign_atom_expr+0x188>
    5320:	68bb      	ldr	r3, [r7, #8]
    5322:	68db      	ldr	r3, [r3, #12]
    5324:	f003 0303 	and.w	r3, r3, #3
    5328:	2b00      	cmp	r3, #0
    532a:	f040 80a9 	bne.w	5480 <c_assign_atom_expr+0x188>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    532e:	68bb      	ldr	r3, [r7, #8]
    5330:	68db      	ldr	r3, [r3, #12]
    5332:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5334:	69fb      	ldr	r3, [r7, #28]
    5336:	685b      	ldr	r3, [r3, #4]
    5338:	b2db      	uxtb	r3, r3
    533a:	2b86      	cmp	r3, #134	; 0x86
    533c:	d13a      	bne.n	53b4 <c_assign_atom_expr+0xbc>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    533e:	69fb      	ldr	r3, [r7, #28]
    5340:	685b      	ldr	r3, [r3, #4]
    5342:	0a1b      	lsrs	r3, r3, #8
    5344:	617b      	str	r3, [r7, #20]
            if (assign_kind != ASSIGN_AUG_STORE) {
    5346:	687b      	ldr	r3, [r7, #4]
    5348:	2b02      	cmp	r3, #2
    534a:	d013      	beq.n	5374 <c_assign_atom_expr+0x7c>
                for (int i = 0; i < n - 1; i++) {
    534c:	2300      	movs	r3, #0
    534e:	61bb      	str	r3, [r7, #24]
    5350:	e00b      	b.n	536a <c_assign_atom_expr+0x72>
                    compile_node(comp, pns1->nodes[i]);
    5352:	69fb      	ldr	r3, [r7, #28]
    5354:	69ba      	ldr	r2, [r7, #24]
    5356:	3202      	adds	r2, #2
    5358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    535c:	4619      	mov	r1, r3
    535e:	68f8      	ldr	r0, [r7, #12]
    5360:	f003 fb1c 	bl	899c <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5364:	69bb      	ldr	r3, [r7, #24]
    5366:	3301      	adds	r3, #1
    5368:	61bb      	str	r3, [r7, #24]
    536a:	697b      	ldr	r3, [r7, #20]
    536c:	1e5a      	subs	r2, r3, #1
    536e:	69bb      	ldr	r3, [r7, #24]
    5370:	429a      	cmp	r2, r3
    5372:	dcee      	bgt.n	5352 <c_assign_atom_expr+0x5a>
                }
            }
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5374:	697b      	ldr	r3, [r7, #20]
    5376:	1e5a      	subs	r2, r3, #1
    5378:	69fb      	ldr	r3, [r7, #28]
    537a:	3202      	adds	r2, #2
    537c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5380:	2b00      	cmp	r3, #0
    5382:	d009      	beq.n	5398 <c_assign_atom_expr+0xa0>
    5384:	697b      	ldr	r3, [r7, #20]
    5386:	1e5a      	subs	r2, r3, #1
    5388:	69fb      	ldr	r3, [r7, #28]
    538a:	3202      	adds	r2, #2
    538c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5390:	f003 0303 	and.w	r3, r3, #3
    5394:	2b00      	cmp	r3, #0
    5396:	d006      	beq.n	53a6 <c_assign_atom_expr+0xae>
    5398:	4b3e      	ldr	r3, [pc, #248]	; (5494 <c_assign_atom_expr+0x19c>)
    539a:	4a3f      	ldr	r2, [pc, #252]	; (5498 <c_assign_atom_expr+0x1a0>)
    539c:	f240 116b 	movw	r1, #363	; 0x16b
    53a0:	483e      	ldr	r0, [pc, #248]	; (549c <c_assign_atom_expr+0x1a4>)
    53a2:	f015 fffb 	bl	1b39c <__assert_func>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    53a6:	697b      	ldr	r3, [r7, #20]
    53a8:	1e5a      	subs	r2, r3, #1
    53aa:	69fb      	ldr	r3, [r7, #28]
    53ac:	3202      	adds	r2, #2
    53ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    53b2:	61fb      	str	r3, [r7, #28]
        }
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    53b4:	69fb      	ldr	r3, [r7, #28]
    53b6:	685b      	ldr	r3, [r3, #4]
    53b8:	b2db      	uxtb	r3, r3
    53ba:	2b2e      	cmp	r3, #46	; 0x2e
    53bc:	d12a      	bne.n	5414 <c_assign_atom_expr+0x11c>
            if (assign_kind == ASSIGN_AUG_STORE) {
    53be:	687b      	ldr	r3, [r7, #4]
    53c0:	2b02      	cmp	r3, #2
    53c2:	d10b      	bne.n	53dc <c_assign_atom_expr+0xe4>
                EMIT(rot_three);
    53c4:	68fb      	ldr	r3, [r7, #12]
    53c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53c8:	4618      	mov	r0, r3
    53ca:	f005 f9af 	bl	a72c <mp_emit_bc_rot_three>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    53ce:	68fb      	ldr	r3, [r7, #12]
    53d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53d2:	2101      	movs	r1, #1
    53d4:	4618      	mov	r0, r3
    53d6:	f005 f8a9 	bl	a52c <mp_emit_bc_subscr>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
                } else {
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
                }
            }
            return;
    53da:	e057      	b.n	548c <c_assign_atom_expr+0x194>
                compile_node(comp, pns1->nodes[0]);
    53dc:	69fb      	ldr	r3, [r7, #28]
    53de:	689b      	ldr	r3, [r3, #8]
    53e0:	4619      	mov	r1, r3
    53e2:	68f8      	ldr	r0, [r7, #12]
    53e4:	f003 fada 	bl	899c <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    53e8:	687b      	ldr	r3, [r7, #4]
    53ea:	2b01      	cmp	r3, #1
    53ec:	d10b      	bne.n	5406 <c_assign_atom_expr+0x10e>
                    EMIT(dup_top_two);
    53ee:	68fb      	ldr	r3, [r7, #12]
    53f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53f2:	4618      	mov	r0, r3
    53f4:	f005 f968 	bl	a6c8 <mp_emit_bc_dup_top_two>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    53f8:	68fb      	ldr	r3, [r7, #12]
    53fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53fc:	2100      	movs	r1, #0
    53fe:	4618      	mov	r0, r3
    5400:	f005 f894 	bl	a52c <mp_emit_bc_subscr>
            return;
    5404:	e042      	b.n	548c <c_assign_atom_expr+0x194>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    5406:	68fb      	ldr	r3, [r7, #12]
    5408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    540a:	2101      	movs	r1, #1
    540c:	4618      	mov	r0, r3
    540e:	f005 f88d 	bl	a52c <mp_emit_bc_subscr>
            return;
    5412:	e03b      	b.n	548c <c_assign_atom_expr+0x194>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5414:	69fb      	ldr	r3, [r7, #28]
    5416:	685b      	ldr	r3, [r3, #4]
    5418:	b2db      	uxtb	r3, r3
    541a:	2b2f      	cmp	r3, #47	; 0x2f
    541c:	d130      	bne.n	5480 <c_assign_atom_expr+0x188>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    541e:	69fb      	ldr	r3, [r7, #28]
    5420:	689b      	ldr	r3, [r3, #8]
    5422:	f003 030f 	and.w	r3, r3, #15
    5426:	2b02      	cmp	r3, #2
    5428:	d006      	beq.n	5438 <c_assign_atom_expr+0x140>
    542a:	4b1d      	ldr	r3, [pc, #116]	; (54a0 <c_assign_atom_expr+0x1a8>)
    542c:	4a1a      	ldr	r2, [pc, #104]	; (5498 <c_assign_atom_expr+0x1a0>)
    542e:	f240 117d 	movw	r1, #381	; 0x17d
    5432:	481a      	ldr	r0, [pc, #104]	; (549c <c_assign_atom_expr+0x1a4>)
    5434:	f015 ffb2 	bl	1b39c <__assert_func>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    5438:	687b      	ldr	r3, [r7, #4]
    543a:	2b01      	cmp	r3, #1
    543c:	d10e      	bne.n	545c <c_assign_atom_expr+0x164>
                EMIT(dup_top);
    543e:	68fb      	ldr	r3, [r7, #12]
    5440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5442:	4618      	mov	r0, r3
    5444:	f005 f930 	bl	a6a8 <mp_emit_bc_dup_top>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_LOAD);
    5448:	68fb      	ldr	r3, [r7, #12]
    544a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    544c:	69fb      	ldr	r3, [r7, #28]
    544e:	689b      	ldr	r3, [r3, #8]
    5450:	091b      	lsrs	r3, r3, #4
    5452:	2200      	movs	r2, #0
    5454:	4619      	mov	r1, r3
    5456:	f005 f891 	bl	a57c <mp_emit_bc_attr>
                if (assign_kind == ASSIGN_AUG_STORE) {
                    EMIT(rot_two);
                }
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
            }
            return;
    545a:	e017      	b.n	548c <c_assign_atom_expr+0x194>
                if (assign_kind == ASSIGN_AUG_STORE) {
    545c:	687b      	ldr	r3, [r7, #4]
    545e:	2b02      	cmp	r3, #2
    5460:	d104      	bne.n	546c <c_assign_atom_expr+0x174>
                    EMIT(rot_two);
    5462:	68fb      	ldr	r3, [r7, #12]
    5464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5466:	4618      	mov	r0, r3
    5468:	f005 f950 	bl	a70c <mp_emit_bc_rot_two>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
    546c:	68fb      	ldr	r3, [r7, #12]
    546e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5470:	69fb      	ldr	r3, [r7, #28]
    5472:	689b      	ldr	r3, [r3, #8]
    5474:	091b      	lsrs	r3, r3, #4
    5476:	2201      	movs	r2, #1
    5478:	4619      	mov	r1, r3
    547a:	f005 f87f 	bl	a57c <mp_emit_bc_attr>
            return;
    547e:	e005      	b.n	548c <c_assign_atom_expr+0x194>
        }
    }

    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    5480:	68bb      	ldr	r3, [r7, #8]
    5482:	4a08      	ldr	r2, [pc, #32]	; (54a4 <c_assign_atom_expr+0x1ac>)
    5484:	4619      	mov	r1, r3
    5486:	68f8      	ldr	r0, [r7, #12]
    5488:	f7ff fc82 	bl	4d90 <compile_syntax_error>
}
    548c:	3720      	adds	r7, #32
    548e:	46bd      	mov	sp, r7
    5490:	bd80      	pop	{r7, pc}
    5492:	bf00      	nop
    5494:	0001e364 	.word	0x0001e364
    5498:	0001eeb4 	.word	0x0001eeb4
    549c:	0001e310 	.word	0x0001e310
    54a0:	0001e390 	.word	0x0001e390
    54a4:	0001e3b4 	.word	0x0001e3b4

000054a8 <c_assign_tuple>:

// we need to allow for a caller passing in 1 initial node (node_head) followed by an array of nodes (nodes_tail)
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    54a8:	b580      	push	{r7, lr}
    54aa:	b088      	sub	sp, #32
    54ac:	af00      	add	r7, sp, #0
    54ae:	60f8      	str	r0, [r7, #12]
    54b0:	60b9      	str	r1, [r7, #8]
    54b2:	607a      	str	r2, [r7, #4]
    54b4:	603b      	str	r3, [r7, #0]
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    54b6:	68bb      	ldr	r3, [r7, #8]
    54b8:	2b00      	cmp	r3, #0
    54ba:	bf14      	ite	ne
    54bc:	2301      	movne	r3, #1
    54be:	2300      	moveq	r3, #0
    54c0:	b2db      	uxtb	r3, r3
    54c2:	613b      	str	r3, [r7, #16]

    // look for star expression
    uint have_star_index = -1;
    54c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    54c8:	61fb      	str	r3, [r7, #28]
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    54ca:	693b      	ldr	r3, [r7, #16]
    54cc:	2b00      	cmp	r3, #0
    54ce:	d015      	beq.n	54fc <c_assign_tuple+0x54>
    54d0:	68bb      	ldr	r3, [r7, #8]
    54d2:	2b00      	cmp	r3, #0
    54d4:	d012      	beq.n	54fc <c_assign_tuple+0x54>
    54d6:	68bb      	ldr	r3, [r7, #8]
    54d8:	f003 0303 	and.w	r3, r3, #3
    54dc:	2b00      	cmp	r3, #0
    54de:	d10d      	bne.n	54fc <c_assign_tuple+0x54>
    54e0:	68bb      	ldr	r3, [r7, #8]
    54e2:	685b      	ldr	r3, [r3, #4]
    54e4:	b2db      	uxtb	r3, r3
    54e6:	2b20      	cmp	r3, #32
    54e8:	d108      	bne.n	54fc <c_assign_tuple+0x54>
        EMIT_ARG(unpack_ex, 0, num_tail);
    54ea:	68fb      	ldr	r3, [r7, #12]
    54ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54ee:	687a      	ldr	r2, [r7, #4]
    54f0:	2100      	movs	r1, #0
    54f2:	4618      	mov	r0, r3
    54f4:	f005 fb2a 	bl	ab4c <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    54f8:	2300      	movs	r3, #0
    54fa:	61fb      	str	r3, [r7, #28]
    }
    for (uint i = 0; i < num_tail; i++) {
    54fc:	2300      	movs	r3, #0
    54fe:	61bb      	str	r3, [r7, #24]
    5500:	e03b      	b.n	557a <c_assign_tuple+0xd2>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    5502:	69bb      	ldr	r3, [r7, #24]
    5504:	009b      	lsls	r3, r3, #2
    5506:	683a      	ldr	r2, [r7, #0]
    5508:	4413      	add	r3, r2
    550a:	681b      	ldr	r3, [r3, #0]
    550c:	2b00      	cmp	r3, #0
    550e:	d031      	beq.n	5574 <c_assign_tuple+0xcc>
    5510:	69bb      	ldr	r3, [r7, #24]
    5512:	009b      	lsls	r3, r3, #2
    5514:	683a      	ldr	r2, [r7, #0]
    5516:	4413      	add	r3, r2
    5518:	681b      	ldr	r3, [r3, #0]
    551a:	f003 0303 	and.w	r3, r3, #3
    551e:	2b00      	cmp	r3, #0
    5520:	d128      	bne.n	5574 <c_assign_tuple+0xcc>
    5522:	69bb      	ldr	r3, [r7, #24]
    5524:	009b      	lsls	r3, r3, #2
    5526:	683a      	ldr	r2, [r7, #0]
    5528:	4413      	add	r3, r2
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	685b      	ldr	r3, [r3, #4]
    552e:	b2db      	uxtb	r3, r3
    5530:	2b20      	cmp	r3, #32
    5532:	d11f      	bne.n	5574 <c_assign_tuple+0xcc>
            if (have_star_index == (uint)-1) {
    5534:	69fb      	ldr	r3, [r7, #28]
    5536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    553a:	d110      	bne.n	555e <c_assign_tuple+0xb6>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    553c:	68fb      	ldr	r3, [r7, #12]
    553e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5540:	693a      	ldr	r2, [r7, #16]
    5542:	69bb      	ldr	r3, [r7, #24]
    5544:	18d1      	adds	r1, r2, r3
    5546:	687a      	ldr	r2, [r7, #4]
    5548:	69bb      	ldr	r3, [r7, #24]
    554a:	1ad3      	subs	r3, r2, r3
    554c:	3b01      	subs	r3, #1
    554e:	461a      	mov	r2, r3
    5550:	f005 fafc 	bl	ab4c <mp_emit_bc_unpack_ex>
                have_star_index = num_head + i;
    5554:	693a      	ldr	r2, [r7, #16]
    5556:	69bb      	ldr	r3, [r7, #24]
    5558:	4413      	add	r3, r2
    555a:	61fb      	str	r3, [r7, #28]
    555c:	e00a      	b.n	5574 <c_assign_tuple+0xcc>
            } else {
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    555e:	69bb      	ldr	r3, [r7, #24]
    5560:	009b      	lsls	r3, r3, #2
    5562:	683a      	ldr	r2, [r7, #0]
    5564:	4413      	add	r3, r2
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	4a2a      	ldr	r2, [pc, #168]	; (5614 <c_assign_tuple+0x16c>)
    556a:	4619      	mov	r1, r3
    556c:	68f8      	ldr	r0, [r7, #12]
    556e:	f7ff fc0f 	bl	4d90 <compile_syntax_error>
                return;
    5572:	e04b      	b.n	560c <c_assign_tuple+0x164>
    for (uint i = 0; i < num_tail; i++) {
    5574:	69bb      	ldr	r3, [r7, #24]
    5576:	3301      	adds	r3, #1
    5578:	61bb      	str	r3, [r7, #24]
    557a:	69ba      	ldr	r2, [r7, #24]
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	429a      	cmp	r2, r3
    5580:	d3bf      	bcc.n	5502 <c_assign_tuple+0x5a>
            }
        }
    }
    if (have_star_index == (uint)-1) {
    5582:	69fb      	ldr	r3, [r7, #28]
    5584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5588:	d107      	bne.n	559a <c_assign_tuple+0xf2>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    558a:	68fb      	ldr	r3, [r7, #12]
    558c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    558e:	693a      	ldr	r2, [r7, #16]
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	4413      	add	r3, r2
    5594:	4619      	mov	r1, r3
    5596:	f005 fac5 	bl	ab24 <mp_emit_bc_unpack_sequence>
    }
    if (num_head != 0) {
    559a:	693b      	ldr	r3, [r7, #16]
    559c:	2b00      	cmp	r3, #0
    559e:	d00f      	beq.n	55c0 <c_assign_tuple+0x118>
        if (0 == have_star_index) {
    55a0:	69fb      	ldr	r3, [r7, #28]
    55a2:	2b00      	cmp	r3, #0
    55a4:	d107      	bne.n	55b6 <c_assign_tuple+0x10e>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    55a6:	68bb      	ldr	r3, [r7, #8]
    55a8:	689b      	ldr	r3, [r3, #8]
    55aa:	2200      	movs	r2, #0
    55ac:	4619      	mov	r1, r3
    55ae:	68f8      	ldr	r0, [r7, #12]
    55b0:	f000 f832 	bl	5618 <c_assign>
    55b4:	e004      	b.n	55c0 <c_assign_tuple+0x118>
        } else {
            c_assign(comp, node_head, ASSIGN_STORE);
    55b6:	2200      	movs	r2, #0
    55b8:	68b9      	ldr	r1, [r7, #8]
    55ba:	68f8      	ldr	r0, [r7, #12]
    55bc:	f000 f82c 	bl	5618 <c_assign>
        }
    }
    for (uint i = 0; i < num_tail; i++) {
    55c0:	2300      	movs	r3, #0
    55c2:	617b      	str	r3, [r7, #20]
    55c4:	e01e      	b.n	5604 <c_assign_tuple+0x15c>
        if (num_head + i == have_star_index) {
    55c6:	693a      	ldr	r2, [r7, #16]
    55c8:	697b      	ldr	r3, [r7, #20]
    55ca:	441a      	add	r2, r3
    55cc:	69fb      	ldr	r3, [r7, #28]
    55ce:	429a      	cmp	r2, r3
    55d0:	d10b      	bne.n	55ea <c_assign_tuple+0x142>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    55d2:	697b      	ldr	r3, [r7, #20]
    55d4:	009b      	lsls	r3, r3, #2
    55d6:	683a      	ldr	r2, [r7, #0]
    55d8:	4413      	add	r3, r2
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	689b      	ldr	r3, [r3, #8]
    55de:	2200      	movs	r2, #0
    55e0:	4619      	mov	r1, r3
    55e2:	68f8      	ldr	r0, [r7, #12]
    55e4:	f000 f818 	bl	5618 <c_assign>
    55e8:	e009      	b.n	55fe <c_assign_tuple+0x156>
        } else {
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    55ea:	697b      	ldr	r3, [r7, #20]
    55ec:	009b      	lsls	r3, r3, #2
    55ee:	683a      	ldr	r2, [r7, #0]
    55f0:	4413      	add	r3, r2
    55f2:	681b      	ldr	r3, [r3, #0]
    55f4:	2200      	movs	r2, #0
    55f6:	4619      	mov	r1, r3
    55f8:	68f8      	ldr	r0, [r7, #12]
    55fa:	f000 f80d 	bl	5618 <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    55fe:	697b      	ldr	r3, [r7, #20]
    5600:	3301      	adds	r3, #1
    5602:	617b      	str	r3, [r7, #20]
    5604:	697a      	ldr	r2, [r7, #20]
    5606:	687b      	ldr	r3, [r7, #4]
    5608:	429a      	cmp	r2, r3
    560a:	d3dc      	bcc.n	55c6 <c_assign_tuple+0x11e>
        }
    }
}
    560c:	3720      	adds	r7, #32
    560e:	46bd      	mov	sp, r7
    5610:	bd80      	pop	{r7, pc}
    5612:	bf00      	nop
    5614:	0001e3d0 	.word	0x0001e3d0

00005618 <c_assign>:

// assigns top of stack to pn
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    5618:	b580      	push	{r7, lr}
    561a:	b088      	sub	sp, #32
    561c:	af00      	add	r7, sp, #0
    561e:	60f8      	str	r0, [r7, #12]
    5620:	60b9      	str	r1, [r7, #8]
    5622:	607a      	str	r2, [r7, #4]
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    5624:	68bb      	ldr	r3, [r7, #8]
    5626:	2b00      	cmp	r3, #0
    5628:	d106      	bne.n	5638 <c_assign+0x20>
    562a:	4b7a      	ldr	r3, [pc, #488]	; (5814 <c_assign+0x1fc>)
    562c:	4a7a      	ldr	r2, [pc, #488]	; (5818 <c_assign+0x200>)
    562e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    5632:	487a      	ldr	r0, [pc, #488]	; (581c <c_assign+0x204>)
    5634:	f015 feb2 	bl	1b39c <__assert_func>
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    5638:	68bb      	ldr	r3, [r7, #8]
    563a:	f003 0303 	and.w	r3, r3, #3
    563e:	2b00      	cmp	r3, #0
    5640:	d018      	beq.n	5674 <c_assign+0x5c>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    5642:	68bb      	ldr	r3, [r7, #8]
    5644:	f003 030f 	and.w	r3, r3, #15
    5648:	2b02      	cmp	r3, #2
    564a:	f040 80cf 	bne.w	57ec <c_assign+0x1d4>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    564e:	68bb      	ldr	r3, [r7, #8]
    5650:	091b      	lsrs	r3, r3, #4
    5652:	613b      	str	r3, [r7, #16]
            switch (assign_kind) {
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	2b00      	cmp	r3, #0
    5658:	d001      	beq.n	565e <c_assign+0x46>
    565a:	2b02      	cmp	r3, #2
    565c:	d104      	bne.n	5668 <c_assign+0x50>
                case ASSIGN_STORE:
                case ASSIGN_AUG_STORE:
                    compile_store_id(comp, arg);
    565e:	6939      	ldr	r1, [r7, #16]
    5660:	68f8      	ldr	r0, [r7, #12]
    5662:	f7ff fcb5 	bl	4fd0 <compile_store_id>
                    break;
    5666:	e0c0      	b.n	57ea <c_assign+0x1d2>
                case ASSIGN_AUG_LOAD:
                default:
                    compile_load_id(comp, arg);
    5668:	6939      	ldr	r1, [r7, #16]
    566a:	68f8      	ldr	r0, [r7, #12]
    566c:	f7ff fc92 	bl	4f94 <compile_load_id>
                    break;
    5670:	bf00      	nop
    5672:	e0ba      	b.n	57ea <c_assign+0x1d2>
        } else {
            goto cannot_assign;
        }
    } else {
        // pn must be a struct
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5674:	68bb      	ldr	r3, [r7, #8]
    5676:	61fb      	str	r3, [r7, #28]
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    5678:	69fb      	ldr	r3, [r7, #28]
    567a:	685b      	ldr	r3, [r3, #4]
    567c:	b2db      	uxtb	r3, r3
    567e:	2b2a      	cmp	r3, #42	; 0x2a
    5680:	d01f      	beq.n	56c2 <c_assign+0xaa>
    5682:	2b2a      	cmp	r3, #42	; 0x2a
    5684:	d804      	bhi.n	5690 <c_assign+0x78>
    5686:	2b06      	cmp	r3, #6
    5688:	d00d      	beq.n	56a6 <c_assign+0x8e>
    568a:	2b29      	cmp	r3, #41	; 0x29
    568c:	d005      	beq.n	569a <c_assign+0x82>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
                }
                break;

            default:
                goto cannot_assign;
    568e:	e0b8      	b.n	5802 <c_assign+0x1ea>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    5690:	2b2b      	cmp	r3, #43	; 0x2b
    5692:	d039      	beq.n	5708 <c_assign+0xf0>
    5694:	2b90      	cmp	r3, #144	; 0x90
    5696:	d006      	beq.n	56a6 <c_assign+0x8e>
                goto cannot_assign;
    5698:	e0b3      	b.n	5802 <c_assign+0x1ea>
                c_assign_atom_expr(comp, pns, assign_kind);
    569a:	687a      	ldr	r2, [r7, #4]
    569c:	69f9      	ldr	r1, [r7, #28]
    569e:	68f8      	ldr	r0, [r7, #12]
    56a0:	f7ff fe2a 	bl	52f8 <c_assign_atom_expr>
                break;
    56a4:	e05a      	b.n	575c <c_assign+0x144>
                if (assign_kind != ASSIGN_STORE) {
    56a6:	687b      	ldr	r3, [r7, #4]
    56a8:	2b00      	cmp	r3, #0
    56aa:	f040 80a1 	bne.w	57f0 <c_assign+0x1d8>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    56ae:	69fb      	ldr	r3, [r7, #28]
    56b0:	685b      	ldr	r3, [r3, #4]
    56b2:	0a1a      	lsrs	r2, r3, #8
    56b4:	69fb      	ldr	r3, [r7, #28]
    56b6:	3308      	adds	r3, #8
    56b8:	2100      	movs	r1, #0
    56ba:	68f8      	ldr	r0, [r7, #12]
    56bc:	f7ff fef4 	bl	54a8 <c_assign_tuple>
                break;
    56c0:	e04c      	b.n	575c <c_assign+0x144>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    56c2:	69fb      	ldr	r3, [r7, #28]
    56c4:	689b      	ldr	r3, [r3, #8]
    56c6:	2b00      	cmp	r3, #0
    56c8:	f000 8094 	beq.w	57f4 <c_assign+0x1dc>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    56cc:	69fb      	ldr	r3, [r7, #28]
    56ce:	689b      	ldr	r3, [r3, #8]
    56d0:	2b00      	cmp	r3, #0
    56d2:	d00b      	beq.n	56ec <c_assign+0xd4>
    56d4:	69fb      	ldr	r3, [r7, #28]
    56d6:	689b      	ldr	r3, [r3, #8]
    56d8:	f003 0303 	and.w	r3, r3, #3
    56dc:	2b00      	cmp	r3, #0
    56de:	d105      	bne.n	56ec <c_assign+0xd4>
    56e0:	69fb      	ldr	r3, [r7, #28]
    56e2:	689b      	ldr	r3, [r3, #8]
    56e4:	685b      	ldr	r3, [r3, #4]
    56e6:	b2db      	uxtb	r3, r3
    56e8:	2b8a      	cmp	r3, #138	; 0x8a
    56ea:	d006      	beq.n	56fa <c_assign+0xe2>
    56ec:	4b4c      	ldr	r3, [pc, #304]	; (5820 <c_assign+0x208>)
    56ee:	4a4a      	ldr	r2, [pc, #296]	; (5818 <c_assign+0x200>)
    56f0:	f240 11e1 	movw	r1, #481	; 0x1e1
    56f4:	4849      	ldr	r0, [pc, #292]	; (581c <c_assign+0x204>)
    56f6:	f015 fe51 	bl	1b39c <__assert_func>
                    if (assign_kind != ASSIGN_STORE) {
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	2b00      	cmp	r3, #0
    56fe:	d17b      	bne.n	57f8 <c_assign+0x1e0>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5700:	69fb      	ldr	r3, [r7, #28]
    5702:	689b      	ldr	r3, [r3, #8]
    5704:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    5706:	e02a      	b.n	575e <c_assign+0x146>
                if (assign_kind != ASSIGN_STORE) {
    5708:	687b      	ldr	r3, [r7, #4]
    570a:	2b00      	cmp	r3, #0
    570c:	d176      	bne.n	57fc <c_assign+0x1e4>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    570e:	69fb      	ldr	r3, [r7, #28]
    5710:	689b      	ldr	r3, [r3, #8]
    5712:	2b00      	cmp	r3, #0
    5714:	d106      	bne.n	5724 <c_assign+0x10c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    5716:	2300      	movs	r3, #0
    5718:	2200      	movs	r2, #0
    571a:	2100      	movs	r1, #0
    571c:	68f8      	ldr	r0, [r7, #12]
    571e:	f7ff fec3 	bl	54a8 <c_assign_tuple>
                break;
    5722:	e01a      	b.n	575a <c_assign+0x142>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    5724:	69fb      	ldr	r3, [r7, #28]
    5726:	689b      	ldr	r3, [r3, #8]
    5728:	2b00      	cmp	r3, #0
    572a:	d00f      	beq.n	574c <c_assign+0x134>
    572c:	69fb      	ldr	r3, [r7, #28]
    572e:	689b      	ldr	r3, [r3, #8]
    5730:	f003 0303 	and.w	r3, r3, #3
    5734:	2b00      	cmp	r3, #0
    5736:	d109      	bne.n	574c <c_assign+0x134>
    5738:	69fb      	ldr	r3, [r7, #28]
    573a:	689b      	ldr	r3, [r3, #8]
    573c:	685b      	ldr	r3, [r3, #4]
    573e:	b2db      	uxtb	r3, r3
    5740:	2b8a      	cmp	r3, #138	; 0x8a
    5742:	d103      	bne.n	574c <c_assign+0x134>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5744:	69fb      	ldr	r3, [r7, #28]
    5746:	689b      	ldr	r3, [r3, #8]
    5748:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    574a:	e008      	b.n	575e <c_assign+0x146>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    574c:	69fb      	ldr	r3, [r7, #28]
    574e:	6899      	ldr	r1, [r3, #8]
    5750:	2300      	movs	r3, #0
    5752:	2200      	movs	r2, #0
    5754:	68f8      	ldr	r0, [r7, #12]
    5756:	f7ff fea7 	bl	54a8 <c_assign_tuple>
                break;
    575a:	bf00      	nop
        }
        return;
    575c:	e056      	b.n	580c <c_assign+0x1f4>

        testlist_comp:
        // lhs is a sequence
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    575e:	69fb      	ldr	r3, [r7, #28]
    5760:	68db      	ldr	r3, [r3, #12]
    5762:	2b00      	cmp	r3, #0
    5764:	d038      	beq.n	57d8 <c_assign+0x1c0>
    5766:	69fb      	ldr	r3, [r7, #28]
    5768:	68db      	ldr	r3, [r3, #12]
    576a:	f003 0303 	and.w	r3, r3, #3
    576e:	2b00      	cmp	r3, #0
    5770:	d132      	bne.n	57d8 <c_assign+0x1c0>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    5772:	69fb      	ldr	r3, [r7, #28]
    5774:	68db      	ldr	r3, [r3, #12]
    5776:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    5778:	69bb      	ldr	r3, [r7, #24]
    577a:	685b      	ldr	r3, [r3, #4]
    577c:	b2db      	uxtb	r3, r3
    577e:	2b8d      	cmp	r3, #141	; 0x8d
    5780:	d112      	bne.n	57a8 <c_assign+0x190>
                // sequence of one item, with trailing comma
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    5782:	69bb      	ldr	r3, [r7, #24]
    5784:	689b      	ldr	r3, [r3, #8]
    5786:	2b00      	cmp	r3, #0
    5788:	d006      	beq.n	5798 <c_assign+0x180>
    578a:	4b26      	ldr	r3, [pc, #152]	; (5824 <c_assign+0x20c>)
    578c:	4a22      	ldr	r2, [pc, #136]	; (5818 <c_assign+0x200>)
    578e:	f240 2106 	movw	r1, #518	; 0x206
    5792:	4822      	ldr	r0, [pc, #136]	; (581c <c_assign+0x204>)
    5794:	f015 fe02 	bl	1b39c <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    5798:	69fb      	ldr	r3, [r7, #28]
    579a:	6899      	ldr	r1, [r3, #8]
    579c:	2300      	movs	r3, #0
    579e:	2200      	movs	r2, #0
    57a0:	68f8      	ldr	r0, [r7, #12]
    57a2:	f7ff fe81 	bl	54a8 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    57a6:	e01f      	b.n	57e8 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    57a8:	69bb      	ldr	r3, [r7, #24]
    57aa:	685b      	ldr	r3, [r3, #4]
    57ac:	b2db      	uxtb	r3, r3
    57ae:	2b8e      	cmp	r3, #142	; 0x8e
    57b0:	d10c      	bne.n	57cc <c_assign+0x1b4>
                // sequence of many items
                uint n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns2);
    57b2:	69bb      	ldr	r3, [r7, #24]
    57b4:	685b      	ldr	r3, [r3, #4]
    57b6:	0a1b      	lsrs	r3, r3, #8
    57b8:	617b      	str	r3, [r7, #20]
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    57ba:	69fb      	ldr	r3, [r7, #28]
    57bc:	6899      	ldr	r1, [r3, #8]
    57be:	69bb      	ldr	r3, [r7, #24]
    57c0:	3308      	adds	r3, #8
    57c2:	697a      	ldr	r2, [r7, #20]
    57c4:	68f8      	ldr	r0, [r7, #12]
    57c6:	f7ff fe6f 	bl	54a8 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    57ca:	e00d      	b.n	57e8 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    57cc:	69bb      	ldr	r3, [r7, #24]
    57ce:	685b      	ldr	r3, [r3, #4]
    57d0:	b2db      	uxtb	r3, r3
    57d2:	2b9f      	cmp	r3, #159	; 0x9f
    57d4:	d014      	beq.n	5800 <c_assign+0x1e8>
                goto cannot_assign;
            } else {
                // sequence with 2 items
                goto sequence_with_2_items;
    57d6:	bf00      	nop
            }
        } else {
            // sequence with 2 items
            sequence_with_2_items:
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    57d8:	69fb      	ldr	r3, [r7, #28]
    57da:	3308      	adds	r3, #8
    57dc:	2202      	movs	r2, #2
    57de:	2100      	movs	r1, #0
    57e0:	68f8      	ldr	r0, [r7, #12]
    57e2:	f7ff fe61 	bl	54a8 <c_assign_tuple>
        }
        return;
    57e6:	e011      	b.n	580c <c_assign+0x1f4>
    57e8:	e010      	b.n	580c <c_assign+0x1f4>
    }
    return;
    57ea:	e00f      	b.n	580c <c_assign+0x1f4>
            goto cannot_assign;
    57ec:	bf00      	nop
    57ee:	e008      	b.n	5802 <c_assign+0x1ea>
                    goto cannot_assign;
    57f0:	bf00      	nop
    57f2:	e006      	b.n	5802 <c_assign+0x1ea>
                    goto cannot_assign;
    57f4:	bf00      	nop
    57f6:	e004      	b.n	5802 <c_assign+0x1ea>
                        goto cannot_assign;
    57f8:	bf00      	nop
    57fa:	e002      	b.n	5802 <c_assign+0x1ea>
                    goto cannot_assign;
    57fc:	bf00      	nop
    57fe:	e000      	b.n	5802 <c_assign+0x1ea>
                goto cannot_assign;
    5800:	bf00      	nop

    cannot_assign:
    compile_syntax_error(comp, pn, "can't assign to expression");
    5802:	4a09      	ldr	r2, [pc, #36]	; (5828 <c_assign+0x210>)
    5804:	68b9      	ldr	r1, [r7, #8]
    5806:	68f8      	ldr	r0, [r7, #12]
    5808:	f7ff fac2 	bl	4d90 <compile_syntax_error>
}
    580c:	3720      	adds	r7, #32
    580e:	46bd      	mov	sp, r7
    5810:	bd80      	pop	{r7, pc}
    5812:	bf00      	nop
    5814:	0001e3ec 	.word	0x0001e3ec
    5818:	0001eec8 	.word	0x0001eec8
    581c:	0001e310 	.word	0x0001e310
    5820:	0001e324 	.word	0x0001e324
    5824:	0001e408 	.word	0x0001e408
    5828:	0001e3b4 	.word	0x0001e3b4

0000582c <close_over_variables_etc>:

// stuff for lambda and comprehensions and generators:
//  if n_pos_defaults > 0 then there is a tuple on the stack with the positional defaults
//  if n_kw_defaults > 0 then there is a dictionary on the stack with the keyword defaults
//  if both exist, the tuple is above the dictionary (ie the first pop gets the tuple)
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    582c:	b580      	push	{r7, lr}
    582e:	b08c      	sub	sp, #48	; 0x30
    5830:	af02      	add	r7, sp, #8
    5832:	60f8      	str	r0, [r7, #12]
    5834:	60b9      	str	r1, [r7, #8]
    5836:	607a      	str	r2, [r7, #4]
    5838:	603b      	str	r3, [r7, #0]
    assert(n_pos_defaults >= 0);
    583a:	687b      	ldr	r3, [r7, #4]
    583c:	2b00      	cmp	r3, #0
    583e:	da06      	bge.n	584e <close_over_variables_etc+0x22>
    5840:	4b41      	ldr	r3, [pc, #260]	; (5948 <close_over_variables_etc+0x11c>)
    5842:	4a42      	ldr	r2, [pc, #264]	; (594c <close_over_variables_etc+0x120>)
    5844:	f44f 7109 	mov.w	r1, #548	; 0x224
    5848:	4841      	ldr	r0, [pc, #260]	; (5950 <close_over_variables_etc+0x124>)
    584a:	f015 fda7 	bl	1b39c <__assert_func>
    assert(n_kw_defaults >= 0);
    584e:	683b      	ldr	r3, [r7, #0]
    5850:	2b00      	cmp	r3, #0
    5852:	da06      	bge.n	5862 <close_over_variables_etc+0x36>
    5854:	4b3f      	ldr	r3, [pc, #252]	; (5954 <close_over_variables_etc+0x128>)
    5856:	4a3d      	ldr	r2, [pc, #244]	; (594c <close_over_variables_etc+0x120>)
    5858:	f240 2125 	movw	r1, #549	; 0x225
    585c:	483c      	ldr	r0, [pc, #240]	; (5950 <close_over_variables_etc+0x124>)
    585e:	f015 fd9d 	bl	1b39c <__assert_func>

    // set flags
    if (n_kw_defaults > 0) {
    5862:	683b      	ldr	r3, [r7, #0]
    5864:	2b00      	cmp	r3, #0
    5866:	dd06      	ble.n	5876 <close_over_variables_etc+0x4a>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    5868:	68bb      	ldr	r3, [r7, #8]
    586a:	7e1b      	ldrb	r3, [r3, #24]
    586c:	f043 0308 	orr.w	r3, r3, #8
    5870:	b2da      	uxtb	r2, r3
    5872:	68bb      	ldr	r3, [r7, #8]
    5874:	761a      	strb	r2, [r3, #24]
    }
    this_scope->num_def_pos_args = n_pos_defaults;
    5876:	687b      	ldr	r3, [r7, #4]
    5878:	b29a      	uxth	r2, r3
    587a:	68bb      	ldr	r3, [r7, #8]
    587c:	83da      	strh	r2, [r3, #30]

    // make closed over variables, if any
    // ensure they are closed over in the order defined in the outer scope (mainly to agree with CPython)
    int nfree = 0;
    587e:	2300      	movs	r3, #0
    5880:	627b      	str	r3, [r7, #36]	; 0x24
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    5882:	68fb      	ldr	r3, [r7, #12]
    5884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5886:	681b      	ldr	r3, [r3, #0]
    5888:	2b00      	cmp	r3, #0
    588a:	d044      	beq.n	5916 <close_over_variables_etc+0xea>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    588c:	2300      	movs	r3, #0
    588e:	623b      	str	r3, [r7, #32]
    5890:	e03a      	b.n	5908 <close_over_variables_etc+0xdc>
            id_info_t *id = &comp->scope_cur->id_info[i];
    5892:	68fb      	ldr	r3, [r7, #12]
    5894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5898:	6a3b      	ldr	r3, [r7, #32]
    589a:	00db      	lsls	r3, r3, #3
    589c:	4413      	add	r3, r2
    589e:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    58a0:	69bb      	ldr	r3, [r7, #24]
    58a2:	781b      	ldrb	r3, [r3, #0]
    58a4:	2b03      	cmp	r3, #3
    58a6:	d003      	beq.n	58b0 <close_over_variables_etc+0x84>
    58a8:	69bb      	ldr	r3, [r7, #24]
    58aa:	781b      	ldrb	r3, [r3, #0]
    58ac:	2b04      	cmp	r3, #4
    58ae:	d128      	bne.n	5902 <close_over_variables_etc+0xd6>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    58b0:	2300      	movs	r3, #0
    58b2:	61fb      	str	r3, [r7, #28]
    58b4:	e01f      	b.n	58f6 <close_over_variables_etc+0xca>
                    id_info_t *id2 = &this_scope->id_info[j];
    58b6:	68bb      	ldr	r3, [r7, #8]
    58b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58ba:	69fb      	ldr	r3, [r7, #28]
    58bc:	00db      	lsls	r3, r3, #3
    58be:	4413      	add	r3, r2
    58c0:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    58c2:	697b      	ldr	r3, [r7, #20]
    58c4:	781b      	ldrb	r3, [r3, #0]
    58c6:	2b04      	cmp	r3, #4
    58c8:	d112      	bne.n	58f0 <close_over_variables_etc+0xc4>
    58ca:	69bb      	ldr	r3, [r7, #24]
    58cc:	685a      	ldr	r2, [r3, #4]
    58ce:	697b      	ldr	r3, [r7, #20]
    58d0:	685b      	ldr	r3, [r3, #4]
    58d2:	429a      	cmp	r2, r3
    58d4:	d10c      	bne.n	58f0 <close_over_variables_etc+0xc4>
                        // in MicroPython we load closures using LOAD_FAST
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    58d6:	68fb      	ldr	r3, [r7, #12]
    58d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    58da:	69bb      	ldr	r3, [r7, #24]
    58dc:	6859      	ldr	r1, [r3, #4]
    58de:	69bb      	ldr	r3, [r7, #24]
    58e0:	885b      	ldrh	r3, [r3, #2]
    58e2:	461a      	mov	r2, r3
    58e4:	2300      	movs	r3, #0
    58e6:	f004 fdb3 	bl	a450 <mp_emit_bc_load_local>
                        nfree += 1;
    58ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58ec:	3301      	adds	r3, #1
    58ee:	627b      	str	r3, [r7, #36]	; 0x24
                for (int j = 0; j < this_scope->id_info_len; j++) {
    58f0:	69fb      	ldr	r3, [r7, #28]
    58f2:	3301      	adds	r3, #1
    58f4:	61fb      	str	r3, [r7, #28]
    58f6:	68bb      	ldr	r3, [r7, #8]
    58f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    58fa:	461a      	mov	r2, r3
    58fc:	69fb      	ldr	r3, [r7, #28]
    58fe:	429a      	cmp	r2, r3
    5900:	dcd9      	bgt.n	58b6 <close_over_variables_etc+0x8a>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5902:	6a3b      	ldr	r3, [r7, #32]
    5904:	3301      	adds	r3, #1
    5906:	623b      	str	r3, [r7, #32]
    5908:	68fb      	ldr	r3, [r7, #12]
    590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    590c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    590e:	461a      	mov	r2, r3
    5910:	6a3b      	ldr	r3, [r7, #32]
    5912:	429a      	cmp	r2, r3
    5914:	dcbd      	bgt.n	5892 <close_over_variables_etc+0x66>
            }
        }
    }

    // make the function/closure
    if (nfree == 0) {
    5916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5918:	2b00      	cmp	r3, #0
    591a:	d107      	bne.n	592c <close_over_variables_etc+0x100>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    591c:	68fb      	ldr	r3, [r7, #12]
    591e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5920:	687a      	ldr	r2, [r7, #4]
    5922:	683b      	ldr	r3, [r7, #0]
    5924:	68b9      	ldr	r1, [r7, #8]
    5926:	f005 f92b 	bl	ab80 <mp_emit_bc_make_function>
    } else {
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    }
}
    592a:	e009      	b.n	5940 <close_over_variables_etc+0x114>
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    592c:	68fb      	ldr	r3, [r7, #12]
    592e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5932:	6879      	ldr	r1, [r7, #4]
    5934:	683b      	ldr	r3, [r7, #0]
    5936:	9300      	str	r3, [sp, #0]
    5938:	460b      	mov	r3, r1
    593a:	68b9      	ldr	r1, [r7, #8]
    593c:	f005 f94a 	bl	abd4 <mp_emit_bc_make_closure>
}
    5940:	bf00      	nop
    5942:	3728      	adds	r7, #40	; 0x28
    5944:	46bd      	mov	sp, r7
    5946:	bd80      	pop	{r7, pc}
    5948:	0001e430 	.word	0x0001e430
    594c:	0001eed4 	.word	0x0001eed4
    5950:	0001e310 	.word	0x0001e310
    5954:	0001e444 	.word	0x0001e444

00005958 <compile_funcdef_lambdef_param>:

STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    5958:	b580      	push	{r7, lr}
    595a:	b088      	sub	sp, #32
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
    5960:	6039      	str	r1, [r7, #0]
    // For efficiency of the code below we extract the parse-node kind here
    int pn_kind;
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5962:	683b      	ldr	r3, [r7, #0]
    5964:	f003 030f 	and.w	r3, r3, #15
    5968:	2b02      	cmp	r3, #2
    596a:	d103      	bne.n	5974 <compile_funcdef_lambdef_param+0x1c>
        pn_kind = -1;
    596c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5970:	61fb      	str	r3, [r7, #28]
    5972:	e012      	b.n	599a <compile_funcdef_lambdef_param+0x42>
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    5974:	683b      	ldr	r3, [r7, #0]
    5976:	2b00      	cmp	r3, #0
    5978:	d004      	beq.n	5984 <compile_funcdef_lambdef_param+0x2c>
    597a:	683b      	ldr	r3, [r7, #0]
    597c:	f003 0303 	and.w	r3, r3, #3
    5980:	2b00      	cmp	r3, #0
    5982:	d006      	beq.n	5992 <compile_funcdef_lambdef_param+0x3a>
    5984:	4b4c      	ldr	r3, [pc, #304]	; (5ab8 <compile_funcdef_lambdef_param+0x160>)
    5986:	4a4d      	ldr	r2, [pc, #308]	; (5abc <compile_funcdef_lambdef_param+0x164>)
    5988:	f240 214e 	movw	r1, #590	; 0x24e
    598c:	484c      	ldr	r0, [pc, #304]	; (5ac0 <compile_funcdef_lambdef_param+0x168>)
    598e:	f015 fd05 	bl	1b39c <__assert_func>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    5992:	683b      	ldr	r3, [r7, #0]
    5994:	685b      	ldr	r3, [r3, #4]
    5996:	b2db      	uxtb	r3, r3
    5998:	61fb      	str	r3, [r7, #28]
    }

    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    599a:	69fb      	ldr	r3, [r7, #28]
    599c:	2b41      	cmp	r3, #65	; 0x41
    599e:	d002      	beq.n	59a6 <compile_funcdef_lambdef_param+0x4e>
    59a0:	69fb      	ldr	r3, [r7, #28]
    59a2:	2b49      	cmp	r3, #73	; 0x49
    59a4:	d103      	bne.n	59ae <compile_funcdef_lambdef_param+0x56>
        comp->have_star = true;
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	2201      	movs	r2, #1
    59aa:	719a      	strb	r2, [r3, #6]
    59ac:	e080      	b.n	5ab0 <compile_funcdef_lambdef_param+0x158>
        } else {
            // named star
        }
        */

    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    59ae:	69fb      	ldr	r3, [r7, #28]
    59b0:	2b42      	cmp	r3, #66	; 0x42
    59b2:	d07d      	beq.n	5ab0 <compile_funcdef_lambdef_param+0x158>
    59b4:	69fb      	ldr	r3, [r7, #28]
    59b6:	2b4a      	cmp	r3, #74	; 0x4a
    59b8:	d07a      	beq.n	5ab0 <compile_funcdef_lambdef_param+0x158>
        // TODO do we need to do anything with this?

    } else {
        mp_parse_node_t pn_id;
        mp_parse_node_t pn_equal;
        if (pn_kind == -1) {
    59ba:	69fb      	ldr	r3, [r7, #28]
    59bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    59c0:	d104      	bne.n	59cc <compile_funcdef_lambdef_param+0x74>
            // this parameter is just an id

            pn_id = pn;
    59c2:	683b      	ldr	r3, [r7, #0]
    59c4:	61bb      	str	r3, [r7, #24]
            pn_equal = MP_PARSE_NODE_NULL;
    59c6:	2300      	movs	r3, #0
    59c8:	617b      	str	r3, [r7, #20]
    59ca:	e01d      	b.n	5a08 <compile_funcdef_lambdef_param+0xb0>

        } else if (pn_kind == PN_typedargslist_name) {
    59cc:	69fb      	ldr	r3, [r7, #28]
    59ce:	2b40      	cmp	r3, #64	; 0x40
    59d0:	d108      	bne.n	59e4 <compile_funcdef_lambdef_param+0x8c>
            // this parameter has a colon and/or equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    59d2:	683b      	ldr	r3, [r7, #0]
    59d4:	613b      	str	r3, [r7, #16]
            pn_id = pns->nodes[0];
    59d6:	693b      	ldr	r3, [r7, #16]
    59d8:	689b      	ldr	r3, [r3, #8]
    59da:	61bb      	str	r3, [r7, #24]
            //pn_colon = pns->nodes[1]; // unused
            pn_equal = pns->nodes[2];
    59dc:	693b      	ldr	r3, [r7, #16]
    59de:	691b      	ldr	r3, [r3, #16]
    59e0:	617b      	str	r3, [r7, #20]
    59e2:	e011      	b.n	5a08 <compile_funcdef_lambdef_param+0xb0>

        } else {
            assert(pn_kind == PN_varargslist_name); // should be
    59e4:	69fb      	ldr	r3, [r7, #28]
    59e6:	2b48      	cmp	r3, #72	; 0x48
    59e8:	d006      	beq.n	59f8 <compile_funcdef_lambdef_param+0xa0>
    59ea:	4b36      	ldr	r3, [pc, #216]	; (5ac4 <compile_funcdef_lambdef_param+0x16c>)
    59ec:	4a33      	ldr	r2, [pc, #204]	; (5abc <compile_funcdef_lambdef_param+0x164>)
    59ee:	f240 2173 	movw	r1, #627	; 0x273
    59f2:	4833      	ldr	r0, [pc, #204]	; (5ac0 <compile_funcdef_lambdef_param+0x168>)
    59f4:	f015 fcd2 	bl	1b39c <__assert_func>
            // this parameter has an equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    59f8:	683b      	ldr	r3, [r7, #0]
    59fa:	60fb      	str	r3, [r7, #12]
            pn_id = pns->nodes[0];
    59fc:	68fb      	ldr	r3, [r7, #12]
    59fe:	689b      	ldr	r3, [r3, #8]
    5a00:	61bb      	str	r3, [r7, #24]
            pn_equal = pns->nodes[1];
    5a02:	68fb      	ldr	r3, [r7, #12]
    5a04:	68db      	ldr	r3, [r3, #12]
    5a06:	617b      	str	r3, [r7, #20]
        }

        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    5a08:	697b      	ldr	r3, [r7, #20]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d10d      	bne.n	5a2a <compile_funcdef_lambdef_param+0xd2>
            // this parameter does not have a default value

            // check for non-default parameters given after default parameters (allowed by parser, but not syntactically valid)
            if (!comp->have_star && comp->num_default_params != 0) {
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	799b      	ldrb	r3, [r3, #6]
    5a12:	2b00      	cmp	r3, #0
    5a14:	d14c      	bne.n	5ab0 <compile_funcdef_lambdef_param+0x158>
    5a16:	687b      	ldr	r3, [r7, #4]
    5a18:	8adb      	ldrh	r3, [r3, #22]
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d048      	beq.n	5ab0 <compile_funcdef_lambdef_param+0x158>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    5a1e:	4a2a      	ldr	r2, [pc, #168]	; (5ac8 <compile_funcdef_lambdef_param+0x170>)
    5a20:	6839      	ldr	r1, [r7, #0]
    5a22:	6878      	ldr	r0, [r7, #4]
    5a24:	f7ff f9b4 	bl	4d90 <compile_syntax_error>
                return;
    5a28:	e042      	b.n	5ab0 <compile_funcdef_lambdef_param+0x158>

        } else {
            // this parameter has a default value
            // in CPython, None (and True, False?) as default parameters are loaded with LOAD_NAME; don't understandy why

            if (comp->have_star) {
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	799b      	ldrb	r3, [r3, #6]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d034      	beq.n	5a9c <compile_funcdef_lambdef_param+0x144>
                comp->num_dict_params += 1;
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	8a9b      	ldrh	r3, [r3, #20]
    5a36:	3301      	adds	r3, #1
    5a38:	b29a      	uxth	r2, r3
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	829a      	strh	r2, [r3, #20]
                // in MicroPython we put the default dict parameters into a dictionary using the bytecode
                if (comp->num_dict_params == 1) {
    5a3e:	687b      	ldr	r3, [r7, #4]
    5a40:	8a9b      	ldrh	r3, [r3, #20]
    5a42:	2b01      	cmp	r3, #1
    5a44:	d118      	bne.n	5a78 <compile_funcdef_lambdef_param+0x120>
                    // in MicroPython we put the default positional parameters into a tuple using the bytecode
                    // we need to do this here before we start building the map for the default keywords
                    if (comp->num_default_params > 0) {
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	8adb      	ldrh	r3, [r3, #22]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d008      	beq.n	5a60 <compile_funcdef_lambdef_param+0x108>
                        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	8adb      	ldrh	r3, [r3, #22]
    5a56:	2200      	movs	r2, #0
    5a58:	4619      	mov	r1, r3
    5a5a:	f005 f807 	bl	aa6c <mp_emit_bc_build>
    5a5e:	e004      	b.n	5a6a <compile_funcdef_lambdef_param+0x112>
                    } else {
                        EMIT(load_null); // sentinel indicating empty default positional args
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a64:	4618      	mov	r0, r3
    5a66:	f004 fce3 	bl	a430 <mp_emit_bc_load_null>
                    }
                    // first default dict param, so make the map
                    EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a6e:	2203      	movs	r2, #3
    5a70:	2100      	movs	r1, #0
    5a72:	4618      	mov	r0, r3
    5a74:	f004 fffa 	bl	aa6c <mp_emit_bc_build>
                }

                // compile value then key, then store it to the dict
                compile_node(comp, pn_equal);
    5a78:	6979      	ldr	r1, [r7, #20]
    5a7a:	6878      	ldr	r0, [r7, #4]
    5a7c:	f002 ff8e 	bl	899c <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a84:	69bb      	ldr	r3, [r7, #24]
    5a86:	091b      	lsrs	r3, r3, #4
    5a88:	4619      	mov	r1, r3
    5a8a:	4610      	mov	r0, r2
    5a8c:	f004 fcac 	bl	a3e8 <mp_emit_bc_load_const_str>
                EMIT(store_map);
    5a90:	687b      	ldr	r3, [r7, #4]
    5a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a94:	4618      	mov	r0, r3
    5a96:	f005 f80b 	bl	aab0 <mp_emit_bc_store_map>
    5a9a:	e009      	b.n	5ab0 <compile_funcdef_lambdef_param+0x158>
            } else {
                comp->num_default_params += 1;
    5a9c:	687b      	ldr	r3, [r7, #4]
    5a9e:	8adb      	ldrh	r3, [r3, #22]
    5aa0:	3301      	adds	r3, #1
    5aa2:	b29a      	uxth	r2, r3
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	82da      	strh	r2, [r3, #22]
                compile_node(comp, pn_equal);
    5aa8:	6979      	ldr	r1, [r7, #20]
    5aaa:	6878      	ldr	r0, [r7, #4]
    5aac:	f002 ff76 	bl	899c <compile_node>
            }
        }
    }
}
    5ab0:	3720      	adds	r7, #32
    5ab2:	46bd      	mov	sp, r7
    5ab4:	bd80      	pop	{r7, pc}
    5ab6:	bf00      	nop
    5ab8:	0001e458 	.word	0x0001e458
    5abc:	0001eef0 	.word	0x0001eef0
    5ac0:	0001e310 	.word	0x0001e310
    5ac4:	0001e474 	.word	0x0001e474
    5ac8:	0001e494 	.word	0x0001e494

00005acc <compile_funcdef_lambdef>:

STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    5acc:	b580      	push	{r7, lr}
    5ace:	b086      	sub	sp, #24
    5ad0:	af00      	add	r7, sp, #0
    5ad2:	60f8      	str	r0, [r7, #12]
    5ad4:	60b9      	str	r1, [r7, #8]
    5ad6:	607a      	str	r2, [r7, #4]
    5ad8:	603b      	str	r3, [r7, #0]
    // When we call compile_funcdef_lambdef_param below it can compile an arbitrary
    // expression for default arguments, which may contain a lambda.  The lambda will
    // call here in a nested way, so we must save and restore the relevant state.
    bool orig_have_star = comp->have_star;
    5ada:	68fb      	ldr	r3, [r7, #12]
    5adc:	799b      	ldrb	r3, [r3, #6]
    5ade:	2b00      	cmp	r3, #0
    5ae0:	bf14      	ite	ne
    5ae2:	2301      	movne	r3, #1
    5ae4:	2300      	moveq	r3, #0
    5ae6:	75fb      	strb	r3, [r7, #23]
    uint16_t orig_num_dict_params = comp->num_dict_params;
    5ae8:	68fb      	ldr	r3, [r7, #12]
    5aea:	8a9b      	ldrh	r3, [r3, #20]
    5aec:	82bb      	strh	r3, [r7, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    5aee:	68fb      	ldr	r3, [r7, #12]
    5af0:	8adb      	ldrh	r3, [r3, #22]
    5af2:	827b      	strh	r3, [r7, #18]

    // compile default parameters
    comp->have_star = false;
    5af4:	68fb      	ldr	r3, [r7, #12]
    5af6:	2200      	movs	r2, #0
    5af8:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = 0;
    5afa:	68fb      	ldr	r3, [r7, #12]
    5afc:	2200      	movs	r2, #0
    5afe:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = 0;
    5b00:	68fb      	ldr	r3, [r7, #12]
    5b02:	2200      	movs	r2, #0
    5b04:	82da      	strh	r2, [r3, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    5b06:	4b1b      	ldr	r3, [pc, #108]	; (5b74 <compile_funcdef_lambdef+0xa8>)
    5b08:	683a      	ldr	r2, [r7, #0]
    5b0a:	6879      	ldr	r1, [r7, #4]
    5b0c:	68f8      	ldr	r0, [r7, #12]
    5b0e:	f7ff f9d7 	bl	4ec0 <apply_to_single_or_list>

    if (comp->compile_error != MP_OBJ_NULL) {
    5b12:	68fb      	ldr	r3, [r7, #12]
    5b14:	689b      	ldr	r3, [r3, #8]
    5b16:	2b00      	cmp	r3, #0
    5b18:	d127      	bne.n	5b6a <compile_funcdef_lambdef+0x9e>
        return;
    }

    // in MicroPython we put the default positional parameters into a tuple using the bytecode
    // the default keywords args may have already made the tuple; if not, do it now
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    5b1a:	68fb      	ldr	r3, [r7, #12]
    5b1c:	8adb      	ldrh	r3, [r3, #22]
    5b1e:	2b00      	cmp	r3, #0
    5b20:	d010      	beq.n	5b44 <compile_funcdef_lambdef+0x78>
    5b22:	68fb      	ldr	r3, [r7, #12]
    5b24:	8a9b      	ldrh	r3, [r3, #20]
    5b26:	2b00      	cmp	r3, #0
    5b28:	d10c      	bne.n	5b44 <compile_funcdef_lambdef+0x78>
        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5b2a:	68fb      	ldr	r3, [r7, #12]
    5b2c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5b2e:	68fb      	ldr	r3, [r7, #12]
    5b30:	8adb      	ldrh	r3, [r3, #22]
    5b32:	2200      	movs	r2, #0
    5b34:	4619      	mov	r1, r3
    5b36:	f004 ff99 	bl	aa6c <mp_emit_bc_build>
        EMIT(load_null); // sentinel indicating empty default keyword args
    5b3a:	68fb      	ldr	r3, [r7, #12]
    5b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b3e:	4618      	mov	r0, r3
    5b40:	f004 fc76 	bl	a430 <mp_emit_bc_load_null>
    }

    // make the function
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    5b44:	68fb      	ldr	r3, [r7, #12]
    5b46:	8adb      	ldrh	r3, [r3, #22]
    5b48:	461a      	mov	r2, r3
    5b4a:	68fb      	ldr	r3, [r7, #12]
    5b4c:	8a9b      	ldrh	r3, [r3, #20]
    5b4e:	68b9      	ldr	r1, [r7, #8]
    5b50:	68f8      	ldr	r0, [r7, #12]
    5b52:	f7ff fe6b 	bl	582c <close_over_variables_etc>

    // restore state
    comp->have_star = orig_have_star;
    5b56:	7dfa      	ldrb	r2, [r7, #23]
    5b58:	68fb      	ldr	r3, [r7, #12]
    5b5a:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = orig_num_dict_params;
    5b5c:	68fb      	ldr	r3, [r7, #12]
    5b5e:	8aba      	ldrh	r2, [r7, #20]
    5b60:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = orig_num_default_params;
    5b62:	68fb      	ldr	r3, [r7, #12]
    5b64:	8a7a      	ldrh	r2, [r7, #18]
    5b66:	82da      	strh	r2, [r3, #22]
    5b68:	e000      	b.n	5b6c <compile_funcdef_lambdef+0xa0>
        return;
    5b6a:	bf00      	nop
}
    5b6c:	3718      	adds	r7, #24
    5b6e:	46bd      	mov	sp, r7
    5b70:	bd80      	pop	{r7, pc}
    5b72:	bf00      	nop
    5b74:	00005959 	.word	0x00005959

00005b78 <compile_funcdef_helper>:

// leaves function object on stack
// returns function name
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5b78:	b580      	push	{r7, lr}
    5b7a:	b086      	sub	sp, #24
    5b7c:	af00      	add	r7, sp, #0
    5b7e:	60f8      	str	r0, [r7, #12]
    5b80:	60b9      	str	r1, [r7, #8]
    5b82:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5b84:	68fb      	ldr	r3, [r7, #12]
    5b86:	795b      	ldrb	r3, [r3, #5]
    5b88:	2b01      	cmp	r3, #1
    5b8a:	d109      	bne.n	5ba0 <compile_funcdef_helper+0x28>
        // create a new scope for this function
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    5b8c:	68ba      	ldr	r2, [r7, #8]
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	2107      	movs	r1, #7
    5b92:	68f8      	ldr	r0, [r7, #12]
    5b94:	f7ff f962 	bl	4e5c <scope_new_and_link>
    5b98:	6178      	str	r0, [r7, #20]
        // store the function scope so the compiling function can use it at each pass
        pns->nodes[4] = (mp_parse_node_t)s;
    5b9a:	697a      	ldr	r2, [r7, #20]
    5b9c:	68bb      	ldr	r3, [r7, #8]
    5b9e:	619a      	str	r2, [r3, #24]
    }

    // get the scope for this function
    scope_t *fscope = (scope_t*)pns->nodes[4];
    5ba0:	68bb      	ldr	r3, [r7, #8]
    5ba2:	699b      	ldr	r3, [r3, #24]
    5ba4:	613b      	str	r3, [r7, #16]

    // compile the function definition
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    5ba6:	68bb      	ldr	r3, [r7, #8]
    5ba8:	68da      	ldr	r2, [r3, #12]
    5baa:	233e      	movs	r3, #62	; 0x3e
    5bac:	6939      	ldr	r1, [r7, #16]
    5bae:	68f8      	ldr	r0, [r7, #12]
    5bb0:	f7ff ff8c 	bl	5acc <compile_funcdef_lambdef>

    // return its name (the 'f' in "def f(...):")
    return fscope->simple_name;
    5bb4:	693b      	ldr	r3, [r7, #16]
    5bb6:	8a5b      	ldrh	r3, [r3, #18]
}
    5bb8:	4618      	mov	r0, r3
    5bba:	3718      	adds	r7, #24
    5bbc:	46bd      	mov	sp, r7
    5bbe:	bd80      	pop	{r7, pc}

00005bc0 <compile_classdef_helper>:

// leaves class object on stack
// returns class name
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b088      	sub	sp, #32
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	60f8      	str	r0, [r7, #12]
    5bc8:	60b9      	str	r1, [r7, #8]
    5bca:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5bcc:	68fb      	ldr	r3, [r7, #12]
    5bce:	795b      	ldrb	r3, [r3, #5]
    5bd0:	2b01      	cmp	r3, #1
    5bd2:	d109      	bne.n	5be8 <compile_classdef_helper+0x28>
        // create a new scope for this class
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    5bd4:	68ba      	ldr	r2, [r7, #8]
    5bd6:	687b      	ldr	r3, [r7, #4]
    5bd8:	2101      	movs	r1, #1
    5bda:	68f8      	ldr	r0, [r7, #12]
    5bdc:	f7ff f93e 	bl	4e5c <scope_new_and_link>
    5be0:	61b8      	str	r0, [r7, #24]
        // store the class scope so the compiling function can use it at each pass
        pns->nodes[3] = (mp_parse_node_t)s;
    5be2:	69ba      	ldr	r2, [r7, #24]
    5be4:	68bb      	ldr	r3, [r7, #8]
    5be6:	615a      	str	r2, [r3, #20]
    }

    EMIT(load_build_class);
    5be8:	68fb      	ldr	r3, [r7, #12]
    5bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bec:	4618      	mov	r0, r3
    5bee:	f004 fc8d 	bl	a50c <mp_emit_bc_load_build_class>

    // scope for this class
    scope_t *cscope = (scope_t*)pns->nodes[3];
    5bf2:	68bb      	ldr	r3, [r7, #8]
    5bf4:	695b      	ldr	r3, [r3, #20]
    5bf6:	617b      	str	r3, [r7, #20]

    // compile the class
    close_over_variables_etc(comp, cscope, 0, 0);
    5bf8:	2300      	movs	r3, #0
    5bfa:	2200      	movs	r2, #0
    5bfc:	6979      	ldr	r1, [r7, #20]
    5bfe:	68f8      	ldr	r0, [r7, #12]
    5c00:	f7ff fe14 	bl	582c <close_over_variables_etc>

    // get its name
    EMIT_ARG(load_const_str, cscope->simple_name);
    5c04:	68fb      	ldr	r3, [r7, #12]
    5c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c08:	697b      	ldr	r3, [r7, #20]
    5c0a:	8a5b      	ldrh	r3, [r3, #18]
    5c0c:	4619      	mov	r1, r3
    5c0e:	4610      	mov	r0, r2
    5c10:	f004 fbea 	bl	a3e8 <mp_emit_bc_load_const_str>

    // nodes[1] has parent classes, if any
    // empty parenthesis (eg class C():) gets here as an empty PN_classdef_2 and needs special handling
    mp_parse_node_t parents = pns->nodes[1];
    5c14:	68bb      	ldr	r3, [r7, #8]
    5c16:	68db      	ldr	r3, [r3, #12]
    5c18:	61fb      	str	r3, [r7, #28]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    5c1a:	69fb      	ldr	r3, [r7, #28]
    5c1c:	2b00      	cmp	r3, #0
    5c1e:	d00b      	beq.n	5c38 <compile_classdef_helper+0x78>
    5c20:	69fb      	ldr	r3, [r7, #28]
    5c22:	f003 0303 	and.w	r3, r3, #3
    5c26:	2b00      	cmp	r3, #0
    5c28:	d106      	bne.n	5c38 <compile_classdef_helper+0x78>
    5c2a:	69fb      	ldr	r3, [r7, #28]
    5c2c:	685b      	ldr	r3, [r3, #4]
    5c2e:	b2db      	uxtb	r3, r3
    5c30:	2b96      	cmp	r3, #150	; 0x96
    5c32:	d101      	bne.n	5c38 <compile_classdef_helper+0x78>
        parents = MP_PARSE_NODE_NULL;
    5c34:	2300      	movs	r3, #0
    5c36:	61fb      	str	r3, [r7, #28]
    }
    compile_trailer_paren_helper(comp, parents, false, 2);
    5c38:	2302      	movs	r3, #2
    5c3a:	2200      	movs	r2, #0
    5c3c:	69f9      	ldr	r1, [r7, #28]
    5c3e:	68f8      	ldr	r0, [r7, #12]
    5c40:	f002 fa48 	bl	80d4 <compile_trailer_paren_helper>

    // return its name (the 'C' in class C(...):")
    return cscope->simple_name;
    5c44:	697b      	ldr	r3, [r7, #20]
    5c46:	8a5b      	ldrh	r3, [r3, #18]
}
    5c48:	4618      	mov	r0, r3
    5c4a:	3720      	adds	r7, #32
    5c4c:	46bd      	mov	sp, r7
    5c4e:	bd80      	pop	{r7, pc}

00005c50 <compile_built_in_decorator>:

// returns true if it was a built-in decorator (even if the built-in had an error)
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5c50:	b580      	push	{r7, lr}
    5c52:	b086      	sub	sp, #24
    5c54:	af00      	add	r7, sp, #0
    5c56:	60f8      	str	r0, [r7, #12]
    5c58:	60b9      	str	r1, [r7, #8]
    5c5a:	607a      	str	r2, [r7, #4]
    5c5c:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5c5e:	687b      	ldr	r3, [r7, #4]
    5c60:	681b      	ldr	r3, [r3, #0]
    5c62:	091b      	lsrs	r3, r3, #4
    5c64:	2baf      	cmp	r3, #175	; 0xaf
    5c66:	d001      	beq.n	5c6c <compile_built_in_decorator+0x1c>
        return false;
    5c68:	2300      	movs	r3, #0
    5c6a:	e020      	b.n	5cae <compile_built_in_decorator+0x5e>
    }

    if (name_len != 2) {
    5c6c:	68bb      	ldr	r3, [r7, #8]
    5c6e:	2b02      	cmp	r3, #2
    5c70:	d008      	beq.n	5c84 <compile_built_in_decorator+0x34>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5c72:	687b      	ldr	r3, [r7, #4]
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	4a10      	ldr	r2, [pc, #64]	; (5cb8 <compile_built_in_decorator+0x68>)
    5c78:	4619      	mov	r1, r3
    5c7a:	68f8      	ldr	r0, [r7, #12]
    5c7c:	f7ff f888 	bl	4d90 <compile_syntax_error>
        return true;
    5c80:	2301      	movs	r3, #1
    5c82:	e014      	b.n	5cae <compile_built_in_decorator+0x5e>
    }

    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5c84:	687b      	ldr	r3, [r7, #4]
    5c86:	3304      	adds	r3, #4
    5c88:	681b      	ldr	r3, [r3, #0]
    5c8a:	091b      	lsrs	r3, r3, #4
    5c8c:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_bytecode) {
    5c8e:	697b      	ldr	r3, [r7, #20]
    5c90:	2b71      	cmp	r3, #113	; 0x71
    5c92:	d103      	bne.n	5c9c <compile_built_in_decorator+0x4c>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5c94:	683b      	ldr	r3, [r7, #0]
    5c96:	2201      	movs	r2, #1
    5c98:	601a      	str	r2, [r3, #0]
    5c9a:	e007      	b.n	5cac <compile_built_in_decorator+0x5c>
    #if MICROPY_EMIT_INLINE_ASM
    } else if (attr == ASM_DECORATOR_QSTR) {
        *emit_options = MP_EMIT_OPT_ASM;
    #endif
    } else {
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    5c9c:	687b      	ldr	r3, [r7, #4]
    5c9e:	3304      	adds	r3, #4
    5ca0:	681b      	ldr	r3, [r3, #0]
    5ca2:	4a05      	ldr	r2, [pc, #20]	; (5cb8 <compile_built_in_decorator+0x68>)
    5ca4:	4619      	mov	r1, r3
    5ca6:	68f8      	ldr	r0, [r7, #12]
    5ca8:	f7ff f872 	bl	4d90 <compile_syntax_error>
    }

    return true;
    5cac:	2301      	movs	r3, #1
}
    5cae:	4618      	mov	r0, r3
    5cb0:	3718      	adds	r7, #24
    5cb2:	46bd      	mov	sp, r7
    5cb4:	bd80      	pop	{r7, pc}
    5cb6:	bf00      	nop
    5cb8:	0001e4c4 	.word	0x0001e4c4

00005cbc <compile_decorated>:

STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5cbc:	b580      	push	{r7, lr}
    5cbe:	b08e      	sub	sp, #56	; 0x38
    5cc0:	af00      	add	r7, sp, #0
    5cc2:	6078      	str	r0, [r7, #4]
    5cc4:	6039      	str	r1, [r7, #0]
    // get the list of decorators
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    5cc6:	683b      	ldr	r3, [r7, #0]
    5cc8:	3308      	adds	r3, #8
    5cca:	f107 0210 	add.w	r2, r7, #16
    5cce:	213b      	movs	r1, #59	; 0x3b
    5cd0:	4618      	mov	r0, r3
    5cd2:	f7fd ff63 	bl	3b9c <mp_parse_node_extract_list>
    5cd6:	6238      	str	r0, [r7, #32]

    // inherit emit options for this function/class definition
    uint emit_options = comp->scope_cur->emit_options;
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5cdc:	7e5b      	ldrb	r3, [r3, #25]
    5cde:	60fb      	str	r3, [r7, #12]

    // compile each decorator
    int num_built_in_decorators = 0;
    5ce0:	2300      	movs	r3, #0
    5ce2:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n; i++) {
    5ce4:	2300      	movs	r3, #0
    5ce6:	633b      	str	r3, [r7, #48]	; 0x30
    5ce8:	e075      	b.n	5dd6 <compile_decorated+0x11a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    5cea:	693a      	ldr	r2, [r7, #16]
    5cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cee:	009b      	lsls	r3, r3, #2
    5cf0:	4413      	add	r3, r2
    5cf2:	681b      	ldr	r3, [r3, #0]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	d011      	beq.n	5d1c <compile_decorated+0x60>
    5cf8:	693a      	ldr	r2, [r7, #16]
    5cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cfc:	009b      	lsls	r3, r3, #2
    5cfe:	4413      	add	r3, r2
    5d00:	681b      	ldr	r3, [r3, #0]
    5d02:	f003 0303 	and.w	r3, r3, #3
    5d06:	2b00      	cmp	r3, #0
    5d08:	d108      	bne.n	5d1c <compile_decorated+0x60>
    5d0a:	693a      	ldr	r2, [r7, #16]
    5d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d0e:	009b      	lsls	r3, r3, #2
    5d10:	4413      	add	r3, r2
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	685b      	ldr	r3, [r3, #4]
    5d16:	b2db      	uxtb	r3, r3
    5d18:	2b3a      	cmp	r3, #58	; 0x3a
    5d1a:	d006      	beq.n	5d2a <compile_decorated+0x6e>
    5d1c:	4b50      	ldr	r3, [pc, #320]	; (5e60 <compile_decorated+0x1a4>)
    5d1e:	4a51      	ldr	r2, [pc, #324]	; (5e64 <compile_decorated+0x1a8>)
    5d20:	f44f 7149 	mov.w	r1, #804	; 0x324
    5d24:	4850      	ldr	r0, [pc, #320]	; (5e68 <compile_decorated+0x1ac>)
    5d26:	f015 fb39 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns_decorator = (mp_parse_node_struct_t*)nodes[i];
    5d2a:	693a      	ldr	r2, [r7, #16]
    5d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d2e:	009b      	lsls	r3, r3, #2
    5d30:	4413      	add	r3, r2
    5d32:	681b      	ldr	r3, [r3, #0]
    5d34:	61fb      	str	r3, [r7, #28]

        // nodes[0] contains the decorator function, which is a dotted name
        mp_parse_node_t *name_nodes;
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    5d36:	69fb      	ldr	r3, [r7, #28]
    5d38:	3308      	adds	r3, #8
    5d3a:	f107 0208 	add.w	r2, r7, #8
    5d3e:	2166      	movs	r1, #102	; 0x66
    5d40:	4618      	mov	r0, r3
    5d42:	f7fd ff2b 	bl	3b9c <mp_parse_node_extract_list>
    5d46:	61b8      	str	r0, [r7, #24]

        // check for built-in decorators
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    5d48:	68ba      	ldr	r2, [r7, #8]
    5d4a:	f107 030c 	add.w	r3, r7, #12
    5d4e:	69b9      	ldr	r1, [r7, #24]
    5d50:	6878      	ldr	r0, [r7, #4]
    5d52:	f7ff ff7d 	bl	5c50 <compile_built_in_decorator>
    5d56:	4603      	mov	r3, r0
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d003      	beq.n	5d64 <compile_decorated+0xa8>
            // this was a built-in
            num_built_in_decorators += 1;
    5d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d5e:	3301      	adds	r3, #1
    5d60:	637b      	str	r3, [r7, #52]	; 0x34
    5d62:	e035      	b.n	5dd0 <compile_decorated+0x114>

        } else {
            // not a built-in, compile normally

            // compile the decorator function
            compile_node(comp, name_nodes[0]);
    5d64:	68bb      	ldr	r3, [r7, #8]
    5d66:	681b      	ldr	r3, [r3, #0]
    5d68:	4619      	mov	r1, r3
    5d6a:	6878      	ldr	r0, [r7, #4]
    5d6c:	f002 fe16 	bl	899c <compile_node>
            for (int j = 1; j < name_len; j++) {
    5d70:	2301      	movs	r3, #1
    5d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d74:	e01e      	b.n	5db4 <compile_decorated+0xf8>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    5d76:	68ba      	ldr	r2, [r7, #8]
    5d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d7a:	009b      	lsls	r3, r3, #2
    5d7c:	4413      	add	r3, r2
    5d7e:	681b      	ldr	r3, [r3, #0]
    5d80:	f003 030f 	and.w	r3, r3, #15
    5d84:	2b02      	cmp	r3, #2
    5d86:	d006      	beq.n	5d96 <compile_decorated+0xda>
    5d88:	4b38      	ldr	r3, [pc, #224]	; (5e6c <compile_decorated+0x1b0>)
    5d8a:	4a36      	ldr	r2, [pc, #216]	; (5e64 <compile_decorated+0x1a8>)
    5d8c:	f240 3136 	movw	r1, #822	; 0x336
    5d90:	4835      	ldr	r0, [pc, #212]	; (5e68 <compile_decorated+0x1ac>)
    5d92:	f015 fb03 	bl	1b39c <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]), MP_EMIT_ATTR_LOAD);
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5d9a:	68ba      	ldr	r2, [r7, #8]
    5d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d9e:	009b      	lsls	r3, r3, #2
    5da0:	4413      	add	r3, r2
    5da2:	681b      	ldr	r3, [r3, #0]
    5da4:	091b      	lsrs	r3, r3, #4
    5da6:	2200      	movs	r2, #0
    5da8:	4619      	mov	r1, r3
    5daa:	f004 fbe7 	bl	a57c <mp_emit_bc_attr>
            for (int j = 1; j < name_len; j++) {
    5dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5db0:	3301      	adds	r3, #1
    5db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5db6:	69bb      	ldr	r3, [r7, #24]
    5db8:	429a      	cmp	r2, r3
    5dba:	dbdc      	blt.n	5d76 <compile_decorated+0xba>
            }

            // nodes[1] contains arguments to the decorator function, if any
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    5dbc:	69fb      	ldr	r3, [r7, #28]
    5dbe:	68db      	ldr	r3, [r3, #12]
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d005      	beq.n	5dd0 <compile_decorated+0x114>
                // call the decorator function with the arguments in nodes[1]
                compile_node(comp, pns_decorator->nodes[1]);
    5dc4:	69fb      	ldr	r3, [r7, #28]
    5dc6:	68db      	ldr	r3, [r3, #12]
    5dc8:	4619      	mov	r1, r3
    5dca:	6878      	ldr	r0, [r7, #4]
    5dcc:	f002 fde6 	bl	899c <compile_node>
    for (int i = 0; i < n; i++) {
    5dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5dd2:	3301      	adds	r3, #1
    5dd4:	633b      	str	r3, [r7, #48]	; 0x30
    5dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5dd8:	6a3b      	ldr	r3, [r7, #32]
    5dda:	429a      	cmp	r2, r3
    5ddc:	db85      	blt.n	5cea <compile_decorated+0x2e>
            }
        }
    }

    // compile the body (funcdef, async funcdef or classdef) and get its name
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    5dde:	683b      	ldr	r3, [r7, #0]
    5de0:	68db      	ldr	r3, [r3, #12]
    5de2:	617b      	str	r3, [r7, #20]
    qstr body_name = 0;
    5de4:	2300      	movs	r3, #0
    5de6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    5de8:	697b      	ldr	r3, [r7, #20]
    5dea:	685b      	ldr	r3, [r3, #4]
    5dec:	b2db      	uxtb	r3, r3
    5dee:	2b03      	cmp	r3, #3
    5df0:	d107      	bne.n	5e02 <compile_decorated+0x146>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    5df2:	68fb      	ldr	r3, [r7, #12]
    5df4:	461a      	mov	r2, r3
    5df6:	6979      	ldr	r1, [r7, #20]
    5df8:	6878      	ldr	r0, [r7, #4]
    5dfa:	f7ff febd 	bl	5b78 <compile_funcdef_helper>
    5dfe:	62b8      	str	r0, [r7, #40]	; 0x28
    5e00:	e012      	b.n	5e28 <compile_decorated+0x16c>
        body_name = compile_funcdef_helper(comp, pns0, emit_options);
        scope_t *fscope = (scope_t*)pns0->nodes[4];
        fscope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    #endif
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    5e02:	697b      	ldr	r3, [r7, #20]
    5e04:	685b      	ldr	r3, [r3, #4]
    5e06:	b2db      	uxtb	r3, r3
    5e08:	2b33      	cmp	r3, #51	; 0x33
    5e0a:	d006      	beq.n	5e1a <compile_decorated+0x15e>
    5e0c:	4b18      	ldr	r3, [pc, #96]	; (5e70 <compile_decorated+0x1b4>)
    5e0e:	4a15      	ldr	r2, [pc, #84]	; (5e64 <compile_decorated+0x1a8>)
    5e10:	f44f 7154 	mov.w	r1, #848	; 0x350
    5e14:	4814      	ldr	r0, [pc, #80]	; (5e68 <compile_decorated+0x1ac>)
    5e16:	f015 fac1 	bl	1b39c <__assert_func>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    5e1a:	68fb      	ldr	r3, [r7, #12]
    5e1c:	461a      	mov	r2, r3
    5e1e:	6979      	ldr	r1, [r7, #20]
    5e20:	6878      	ldr	r0, [r7, #4]
    5e22:	f7ff fecd 	bl	5bc0 <compile_classdef_helper>
    5e26:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    // call each decorator
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5e28:	2300      	movs	r3, #0
    5e2a:	627b      	str	r3, [r7, #36]	; 0x24
    5e2c:	e009      	b.n	5e42 <compile_decorated+0x186>
        EMIT_ARG(call_function, 1, 0, 0);
    5e2e:	687b      	ldr	r3, [r7, #4]
    5e30:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5e32:	2300      	movs	r3, #0
    5e34:	2200      	movs	r2, #0
    5e36:	2101      	movs	r1, #1
    5e38:	f004 ff50 	bl	acdc <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e3e:	3301      	adds	r3, #1
    5e40:	627b      	str	r3, [r7, #36]	; 0x24
    5e42:	6a3a      	ldr	r2, [r7, #32]
    5e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5e46:	1ad2      	subs	r2, r2, r3
    5e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e4a:	429a      	cmp	r2, r3
    5e4c:	dcef      	bgt.n	5e2e <compile_decorated+0x172>
    }

    // store func/class object into name
    compile_store_id(comp, body_name);
    5e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5e50:	6878      	ldr	r0, [r7, #4]
    5e52:	f7ff f8bd 	bl	4fd0 <compile_store_id>
}
    5e56:	bf00      	nop
    5e58:	3738      	adds	r7, #56	; 0x38
    5e5a:	46bd      	mov	sp, r7
    5e5c:	bd80      	pop	{r7, pc}
    5e5e:	bf00      	nop
    5e60:	0001e4e4 	.word	0x0001e4e4
    5e64:	0001ef10 	.word	0x0001ef10
    5e68:	0001e310 	.word	0x0001e310
    5e6c:	0001e51c 	.word	0x0001e51c
    5e70:	0001e540 	.word	0x0001e540

00005e74 <compile_funcdef>:

STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5e74:	b580      	push	{r7, lr}
    5e76:	b084      	sub	sp, #16
    5e78:	af00      	add	r7, sp, #0
    5e7a:	6078      	str	r0, [r7, #4]
    5e7c:	6039      	str	r1, [r7, #0]
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    5e7e:	687b      	ldr	r3, [r7, #4]
    5e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e82:	7e5b      	ldrb	r3, [r3, #25]
    5e84:	461a      	mov	r2, r3
    5e86:	6839      	ldr	r1, [r7, #0]
    5e88:	6878      	ldr	r0, [r7, #4]
    5e8a:	f7ff fe75 	bl	5b78 <compile_funcdef_helper>
    5e8e:	60f8      	str	r0, [r7, #12]
    // store function object into function name
    compile_store_id(comp, fname);
    5e90:	68f9      	ldr	r1, [r7, #12]
    5e92:	6878      	ldr	r0, [r7, #4]
    5e94:	f7ff f89c 	bl	4fd0 <compile_store_id>
}
    5e98:	bf00      	nop
    5e9a:	3710      	adds	r7, #16
    5e9c:	46bd      	mov	sp, r7
    5e9e:	bd80      	pop	{r7, pc}

00005ea0 <c_del_stmt>:

STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    5ea0:	b580      	push	{r7, lr}
    5ea2:	b08a      	sub	sp, #40	; 0x28
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	6078      	str	r0, [r7, #4]
    5ea8:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5eaa:	683b      	ldr	r3, [r7, #0]
    5eac:	f003 030f 	and.w	r3, r3, #15
    5eb0:	2b02      	cmp	r3, #2
    5eb2:	d106      	bne.n	5ec2 <c_del_stmt+0x22>
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    5eb4:	683b      	ldr	r3, [r7, #0]
    5eb6:	091b      	lsrs	r3, r3, #4
    5eb8:	4619      	mov	r1, r3
    5eba:	6878      	ldr	r0, [r7, #4]
    5ebc:	f7ff f8a6 	bl	500c <compile_delete_id>
    } else {
        // some arbitrary statement that we can't delete (eg del 1)
        goto cannot_delete;
    }

    return;
    5ec0:	e122      	b.n	6108 <c_del_stmt+0x268>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5ec2:	683b      	ldr	r3, [r7, #0]
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	f000 808f 	beq.w	5fe8 <c_del_stmt+0x148>
    5eca:	683b      	ldr	r3, [r7, #0]
    5ecc:	f003 0303 	and.w	r3, r3, #3
    5ed0:	2b00      	cmp	r3, #0
    5ed2:	f040 8089 	bne.w	5fe8 <c_del_stmt+0x148>
    5ed6:	683b      	ldr	r3, [r7, #0]
    5ed8:	685b      	ldr	r3, [r3, #4]
    5eda:	b2db      	uxtb	r3, r3
    5edc:	2b29      	cmp	r3, #41	; 0x29
    5ede:	f040 8083 	bne.w	5fe8 <c_del_stmt+0x148>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5ee2:	683b      	ldr	r3, [r7, #0]
    5ee4:	61bb      	str	r3, [r7, #24]
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    5ee6:	69bb      	ldr	r3, [r7, #24]
    5ee8:	689b      	ldr	r3, [r3, #8]
    5eea:	4619      	mov	r1, r3
    5eec:	6878      	ldr	r0, [r7, #4]
    5eee:	f002 fd55 	bl	899c <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5ef2:	69bb      	ldr	r3, [r7, #24]
    5ef4:	68db      	ldr	r3, [r3, #12]
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	f000 8101 	beq.w	60fe <c_del_stmt+0x25e>
    5efc:	69bb      	ldr	r3, [r7, #24]
    5efe:	68db      	ldr	r3, [r3, #12]
    5f00:	f003 0303 	and.w	r3, r3, #3
    5f04:	2b00      	cmp	r3, #0
    5f06:	f040 80fa 	bne.w	60fe <c_del_stmt+0x25e>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    5f0a:	69bb      	ldr	r3, [r7, #24]
    5f0c:	68db      	ldr	r3, [r3, #12]
    5f0e:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f12:	685b      	ldr	r3, [r3, #4]
    5f14:	b2db      	uxtb	r3, r3
    5f16:	2b86      	cmp	r3, #134	; 0x86
    5f18:	d137      	bne.n	5f8a <c_del_stmt+0xea>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    5f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f1c:	685b      	ldr	r3, [r3, #4]
    5f1e:	0a1b      	lsrs	r3, r3, #8
    5f20:	617b      	str	r3, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    5f22:	2300      	movs	r3, #0
    5f24:	623b      	str	r3, [r7, #32]
    5f26:	e00b      	b.n	5f40 <c_del_stmt+0xa0>
                    compile_node(comp, pns1->nodes[i]);
    5f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f2a:	6a3a      	ldr	r2, [r7, #32]
    5f2c:	3202      	adds	r2, #2
    5f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f32:	4619      	mov	r1, r3
    5f34:	6878      	ldr	r0, [r7, #4]
    5f36:	f002 fd31 	bl	899c <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5f3a:	6a3b      	ldr	r3, [r7, #32]
    5f3c:	3301      	adds	r3, #1
    5f3e:	623b      	str	r3, [r7, #32]
    5f40:	697b      	ldr	r3, [r7, #20]
    5f42:	1e5a      	subs	r2, r3, #1
    5f44:	6a3b      	ldr	r3, [r7, #32]
    5f46:	429a      	cmp	r2, r3
    5f48:	dcee      	bgt.n	5f28 <c_del_stmt+0x88>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5f4a:	697b      	ldr	r3, [r7, #20]
    5f4c:	1e5a      	subs	r2, r3, #1
    5f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f50:	3202      	adds	r2, #2
    5f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f56:	2b00      	cmp	r3, #0
    5f58:	d009      	beq.n	5f6e <c_del_stmt+0xce>
    5f5a:	697b      	ldr	r3, [r7, #20]
    5f5c:	1e5a      	subs	r2, r3, #1
    5f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f60:	3202      	adds	r2, #2
    5f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f66:	f003 0303 	and.w	r3, r3, #3
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	d006      	beq.n	5f7c <c_del_stmt+0xdc>
    5f6e:	4b68      	ldr	r3, [pc, #416]	; (6110 <c_del_stmt+0x270>)
    5f70:	4a68      	ldr	r2, [pc, #416]	; (6114 <c_del_stmt+0x274>)
    5f72:	f240 3172 	movw	r1, #882	; 0x372
    5f76:	4868      	ldr	r0, [pc, #416]	; (6118 <c_del_stmt+0x278>)
    5f78:	f015 fa10 	bl	1b39c <__assert_func>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    5f7c:	697b      	ldr	r3, [r7, #20]
    5f7e:	1e5a      	subs	r2, r3, #1
    5f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f82:	3202      	adds	r2, #2
    5f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f88:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f8c:	685b      	ldr	r3, [r3, #4]
    5f8e:	b2db      	uxtb	r3, r3
    5f90:	2b2e      	cmp	r3, #46	; 0x2e
    5f92:	d10c      	bne.n	5fae <c_del_stmt+0x10e>
                compile_node(comp, pns1->nodes[0]);
    5f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f96:	689b      	ldr	r3, [r3, #8]
    5f98:	4619      	mov	r1, r3
    5f9a:	6878      	ldr	r0, [r7, #4]
    5f9c:	f002 fcfe 	bl	899c <compile_node>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_DELETE);
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5fa4:	2102      	movs	r1, #2
    5fa6:	4618      	mov	r0, r3
    5fa8:	f004 fac0 	bl	a52c <mp_emit_bc_subscr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5fac:	e0a1      	b.n	60f2 <c_del_stmt+0x252>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fb0:	685b      	ldr	r3, [r3, #4]
    5fb2:	b2db      	uxtb	r3, r3
    5fb4:	2b2f      	cmp	r3, #47	; 0x2f
    5fb6:	f040 809d 	bne.w	60f4 <c_del_stmt+0x254>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    5fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fbc:	689b      	ldr	r3, [r3, #8]
    5fbe:	f003 030f 	and.w	r3, r3, #15
    5fc2:	2b02      	cmp	r3, #2
    5fc4:	d006      	beq.n	5fd4 <c_del_stmt+0x134>
    5fc6:	4b55      	ldr	r3, [pc, #340]	; (611c <c_del_stmt+0x27c>)
    5fc8:	4a52      	ldr	r2, [pc, #328]	; (6114 <c_del_stmt+0x274>)
    5fca:	f240 3179 	movw	r1, #889	; 0x379
    5fce:	4852      	ldr	r0, [pc, #328]	; (6118 <c_del_stmt+0x278>)
    5fd0:	f015 f9e4 	bl	1b39c <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_DELETE);
    5fd4:	687b      	ldr	r3, [r7, #4]
    5fd6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fda:	689b      	ldr	r3, [r3, #8]
    5fdc:	091b      	lsrs	r3, r3, #4
    5fde:	2202      	movs	r2, #2
    5fe0:	4619      	mov	r1, r3
    5fe2:	f004 facb 	bl	a57c <mp_emit_bc_attr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5fe6:	e084      	b.n	60f2 <c_del_stmt+0x252>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    5fe8:	683b      	ldr	r3, [r7, #0]
    5fea:	2b00      	cmp	r3, #0
    5fec:	f000 8087 	beq.w	60fe <c_del_stmt+0x25e>
    5ff0:	683b      	ldr	r3, [r7, #0]
    5ff2:	f003 0303 	and.w	r3, r3, #3
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	f040 8081 	bne.w	60fe <c_del_stmt+0x25e>
    5ffc:	683b      	ldr	r3, [r7, #0]
    5ffe:	685b      	ldr	r3, [r3, #4]
    6000:	b2db      	uxtb	r3, r3
    6002:	2b2a      	cmp	r3, #42	; 0x2a
    6004:	d17b      	bne.n	60fe <c_del_stmt+0x25e>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    6006:	683b      	ldr	r3, [r7, #0]
    6008:	689b      	ldr	r3, [r3, #8]
    600a:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    600c:	683b      	ldr	r3, [r7, #0]
    600e:	2b00      	cmp	r3, #0
    6010:	d072      	beq.n	60f8 <c_del_stmt+0x258>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    6012:	683b      	ldr	r3, [r7, #0]
    6014:	2b00      	cmp	r3, #0
    6016:	d009      	beq.n	602c <c_del_stmt+0x18c>
    6018:	683b      	ldr	r3, [r7, #0]
    601a:	f003 0303 	and.w	r3, r3, #3
    601e:	2b00      	cmp	r3, #0
    6020:	d104      	bne.n	602c <c_del_stmt+0x18c>
    6022:	683b      	ldr	r3, [r7, #0]
    6024:	685b      	ldr	r3, [r3, #4]
    6026:	b2db      	uxtb	r3, r3
    6028:	2b8a      	cmp	r3, #138	; 0x8a
    602a:	d006      	beq.n	603a <c_del_stmt+0x19a>
    602c:	4b3c      	ldr	r3, [pc, #240]	; (6120 <c_del_stmt+0x280>)
    602e:	4a39      	ldr	r2, [pc, #228]	; (6114 <c_del_stmt+0x274>)
    6030:	f240 3187 	movw	r1, #903	; 0x387
    6034:	4838      	ldr	r0, [pc, #224]	; (6118 <c_del_stmt+0x278>)
    6036:	f015 f9b1 	bl	1b39c <__assert_func>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    603a:	683b      	ldr	r3, [r7, #0]
    603c:	613b      	str	r3, [r7, #16]
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    603e:	693b      	ldr	r3, [r7, #16]
    6040:	68db      	ldr	r3, [r3, #12]
    6042:	2b00      	cmp	r3, #0
    6044:	d048      	beq.n	60d8 <c_del_stmt+0x238>
    6046:	693b      	ldr	r3, [r7, #16]
    6048:	68db      	ldr	r3, [r3, #12]
    604a:	f003 0303 	and.w	r3, r3, #3
    604e:	2b00      	cmp	r3, #0
    6050:	d142      	bne.n	60d8 <c_del_stmt+0x238>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    6052:	693b      	ldr	r3, [r7, #16]
    6054:	68db      	ldr	r3, [r3, #12]
    6056:	60fb      	str	r3, [r7, #12]
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    6058:	68fb      	ldr	r3, [r7, #12]
    605a:	685b      	ldr	r3, [r3, #4]
    605c:	b2db      	uxtb	r3, r3
    605e:	2b8d      	cmp	r3, #141	; 0x8d
    6060:	d111      	bne.n	6086 <c_del_stmt+0x1e6>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    6062:	68fb      	ldr	r3, [r7, #12]
    6064:	689b      	ldr	r3, [r3, #8]
    6066:	2b00      	cmp	r3, #0
    6068:	d006      	beq.n	6078 <c_del_stmt+0x1d8>
    606a:	4b2e      	ldr	r3, [pc, #184]	; (6124 <c_del_stmt+0x284>)
    606c:	4a29      	ldr	r2, [pc, #164]	; (6114 <c_del_stmt+0x274>)
    606e:	f240 318f 	movw	r1, #911	; 0x38f
    6072:	4829      	ldr	r0, [pc, #164]	; (6118 <c_del_stmt+0x278>)
    6074:	f015 f992 	bl	1b39c <__assert_func>
                    c_del_stmt(comp, pns->nodes[0]);
    6078:	693b      	ldr	r3, [r7, #16]
    607a:	689b      	ldr	r3, [r3, #8]
    607c:	4619      	mov	r1, r3
    607e:	6878      	ldr	r0, [r7, #4]
    6080:	f7ff ff0e 	bl	5ea0 <c_del_stmt>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6084:	e035      	b.n	60f2 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    6086:	68fb      	ldr	r3, [r7, #12]
    6088:	685b      	ldr	r3, [r3, #4]
    608a:	b2db      	uxtb	r3, r3
    608c:	2b8e      	cmp	r3, #142	; 0x8e
    608e:	d11d      	bne.n	60cc <c_del_stmt+0x22c>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    6090:	68fb      	ldr	r3, [r7, #12]
    6092:	685b      	ldr	r3, [r3, #4]
    6094:	0a1b      	lsrs	r3, r3, #8
    6096:	60bb      	str	r3, [r7, #8]
                    c_del_stmt(comp, pns->nodes[0]);
    6098:	693b      	ldr	r3, [r7, #16]
    609a:	689b      	ldr	r3, [r3, #8]
    609c:	4619      	mov	r1, r3
    609e:	6878      	ldr	r0, [r7, #4]
    60a0:	f7ff fefe 	bl	5ea0 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    60a4:	2300      	movs	r3, #0
    60a6:	61fb      	str	r3, [r7, #28]
    60a8:	e00b      	b.n	60c2 <c_del_stmt+0x222>
                        c_del_stmt(comp, pns1->nodes[i]);
    60aa:	68fb      	ldr	r3, [r7, #12]
    60ac:	69fa      	ldr	r2, [r7, #28]
    60ae:	3202      	adds	r2, #2
    60b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60b4:	4619      	mov	r1, r3
    60b6:	6878      	ldr	r0, [r7, #4]
    60b8:	f7ff fef2 	bl	5ea0 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    60bc:	69fb      	ldr	r3, [r7, #28]
    60be:	3301      	adds	r3, #1
    60c0:	61fb      	str	r3, [r7, #28]
    60c2:	69fa      	ldr	r2, [r7, #28]
    60c4:	68bb      	ldr	r3, [r7, #8]
    60c6:	429a      	cmp	r2, r3
    60c8:	dbef      	blt.n	60aa <c_del_stmt+0x20a>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    60ca:	e012      	b.n	60f2 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    60cc:	68fb      	ldr	r3, [r7, #12]
    60ce:	685b      	ldr	r3, [r3, #4]
    60d0:	b2db      	uxtb	r3, r3
    60d2:	2b9f      	cmp	r3, #159	; 0x9f
    60d4:	d012      	beq.n	60fc <c_del_stmt+0x25c>
                    goto sequence_with_2_items;
    60d6:	bf00      	nop
                c_del_stmt(comp, pns->nodes[0]);
    60d8:	693b      	ldr	r3, [r7, #16]
    60da:	689b      	ldr	r3, [r3, #8]
    60dc:	4619      	mov	r1, r3
    60de:	6878      	ldr	r0, [r7, #4]
    60e0:	f7ff fede 	bl	5ea0 <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    60e4:	693b      	ldr	r3, [r7, #16]
    60e6:	68db      	ldr	r3, [r3, #12]
    60e8:	4619      	mov	r1, r3
    60ea:	6878      	ldr	r0, [r7, #4]
    60ec:	f7ff fed8 	bl	5ea0 <c_del_stmt>
    return;
    60f0:	e00a      	b.n	6108 <c_del_stmt+0x268>
    60f2:	e009      	b.n	6108 <c_del_stmt+0x268>
                goto cannot_delete;
    60f4:	bf00      	nop
    60f6:	e002      	b.n	60fe <c_del_stmt+0x25e>
            goto cannot_delete;
    60f8:	bf00      	nop
    60fa:	e000      	b.n	60fe <c_del_stmt+0x25e>
                    goto cannot_delete;
    60fc:	bf00      	nop

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    60fe:	4a0a      	ldr	r2, [pc, #40]	; (6128 <c_del_stmt+0x288>)
    6100:	6839      	ldr	r1, [r7, #0]
    6102:	6878      	ldr	r0, [r7, #4]
    6104:	f7fe fe44 	bl	4d90 <compile_syntax_error>
}
    6108:	3728      	adds	r7, #40	; 0x28
    610a:	46bd      	mov	sp, r7
    610c:	bd80      	pop	{r7, pc}
    610e:	bf00      	nop
    6110:	0001e364 	.word	0x0001e364
    6114:	0001ef24 	.word	0x0001ef24
    6118:	0001e310 	.word	0x0001e310
    611c:	0001e390 	.word	0x0001e390
    6120:	0001e574 	.word	0x0001e574
    6124:	0001e5a8 	.word	0x0001e5a8
    6128:	0001e5d0 	.word	0x0001e5d0

0000612c <compile_del_stmt>:

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    612c:	b580      	push	{r7, lr}
    612e:	b082      	sub	sp, #8
    6130:	af00      	add	r7, sp, #0
    6132:	6078      	str	r0, [r7, #4]
    6134:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    6136:	683b      	ldr	r3, [r7, #0]
    6138:	6899      	ldr	r1, [r3, #8]
    613a:	4b04      	ldr	r3, [pc, #16]	; (614c <compile_del_stmt+0x20>)
    613c:	2290      	movs	r2, #144	; 0x90
    613e:	6878      	ldr	r0, [r7, #4]
    6140:	f7fe febe 	bl	4ec0 <apply_to_single_or_list>
}
    6144:	bf00      	nop
    6146:	3708      	adds	r7, #8
    6148:	46bd      	mov	sp, r7
    614a:	bd80      	pop	{r7, pc}
    614c:	00005ea1 	.word	0x00005ea1

00006150 <compile_break_cont_stmt>:

STATIC void compile_break_cont_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6150:	b580      	push	{r7, lr}
    6152:	b084      	sub	sp, #16
    6154:	af00      	add	r7, sp, #0
    6156:	6078      	str	r0, [r7, #4]
    6158:	6039      	str	r1, [r7, #0]
    uint16_t label;
    const char *error_msg;
    if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_break_stmt) {
    615a:	683b      	ldr	r3, [r7, #0]
    615c:	685b      	ldr	r3, [r3, #4]
    615e:	b2db      	uxtb	r3, r3
    6160:	2b09      	cmp	r3, #9
    6162:	d105      	bne.n	6170 <compile_break_cont_stmt+0x20>
        label = comp->break_label;
    6164:	687b      	ldr	r3, [r7, #4]
    6166:	8b1b      	ldrh	r3, [r3, #24]
    6168:	81fb      	strh	r3, [r7, #14]
        error_msg = "'break' outside loop";
    616a:	4b18      	ldr	r3, [pc, #96]	; (61cc <compile_break_cont_stmt+0x7c>)
    616c:	60bb      	str	r3, [r7, #8]
    616e:	e004      	b.n	617a <compile_break_cont_stmt+0x2a>
    } else {
        label = comp->continue_label;
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	8b5b      	ldrh	r3, [r3, #26]
    6174:	81fb      	strh	r3, [r7, #14]
        error_msg = "'continue' outside loop";
    6176:	4b16      	ldr	r3, [pc, #88]	; (61d0 <compile_break_cont_stmt+0x80>)
    6178:	60bb      	str	r3, [r7, #8]
    }
    if (label == INVALID_LABEL) {
    617a:	89fb      	ldrh	r3, [r7, #14]
    617c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6180:	4293      	cmp	r3, r2
    6182:	d105      	bne.n	6190 <compile_break_cont_stmt+0x40>
        compile_syntax_error(comp, (mp_parse_node_t)pns, error_msg);
    6184:	683b      	ldr	r3, [r7, #0]
    6186:	68ba      	ldr	r2, [r7, #8]
    6188:	4619      	mov	r1, r3
    618a:	6878      	ldr	r0, [r7, #4]
    618c:	f7fe fe00 	bl	4d90 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    6190:	687b      	ldr	r3, [r7, #4]
    6192:	8b9a      	ldrh	r2, [r3, #28]
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	8bdb      	ldrh	r3, [r3, #30]
    6198:	429a      	cmp	r2, r3
    619a:	d206      	bcs.n	61aa <compile_break_cont_stmt+0x5a>
    619c:	4b0d      	ldr	r3, [pc, #52]	; (61d4 <compile_break_cont_stmt+0x84>)
    619e:	4a0e      	ldr	r2, [pc, #56]	; (61d8 <compile_break_cont_stmt+0x88>)
    61a0:	f240 31c1 	movw	r1, #961	; 0x3c1
    61a4:	480d      	ldr	r0, [pc, #52]	; (61dc <compile_break_cont_stmt+0x8c>)
    61a6:	f015 f8f9 	bl	1b39c <__assert_func>
    EMIT_ARG(unwind_jump, label, comp->cur_except_level - comp->break_continue_except_level);
    61aa:	687b      	ldr	r3, [r7, #4]
    61ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
    61ae:	89f9      	ldrh	r1, [r7, #14]
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	8b9b      	ldrh	r3, [r3, #28]
    61b4:	461a      	mov	r2, r3
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	8bdb      	ldrh	r3, [r3, #30]
    61ba:	1ad3      	subs	r3, r2, r3
    61bc:	461a      	mov	r2, r3
    61be:	f004 fb13 	bl	a7e8 <mp_emit_bc_unwind_jump>
}
    61c2:	bf00      	nop
    61c4:	3710      	adds	r7, #16
    61c6:	46bd      	mov	sp, r7
    61c8:	bd80      	pop	{r7, pc}
    61ca:	bf00      	nop
    61cc:	0001e5e8 	.word	0x0001e5e8
    61d0:	0001e600 	.word	0x0001e600
    61d4:	0001e618 	.word	0x0001e618
    61d8:	0001ef30 	.word	0x0001ef30
    61dc:	0001e310 	.word	0x0001e310

000061e0 <compile_return_stmt>:

STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    61e0:	b580      	push	{r7, lr}
    61e2:	b082      	sub	sp, #8
    61e4:	af00      	add	r7, sp, #0
    61e6:	6078      	str	r0, [r7, #4]
    61e8:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    61ee:	681b      	ldr	r3, [r3, #0]
    61f0:	2b07      	cmp	r3, #7
    61f2:	d006      	beq.n	6202 <compile_return_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    61f4:	683b      	ldr	r3, [r7, #0]
    61f6:	4a0f      	ldr	r2, [pc, #60]	; (6234 <compile_return_stmt+0x54>)
    61f8:	4619      	mov	r1, r3
    61fa:	6878      	ldr	r0, [r7, #4]
    61fc:	f7fe fdc8 	bl	4d90 <compile_syntax_error>
        return;
    6200:	e015      	b.n	622e <compile_return_stmt+0x4e>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    6202:	683b      	ldr	r3, [r7, #0]
    6204:	689b      	ldr	r3, [r3, #8]
    6206:	2b00      	cmp	r3, #0
    6208:	d106      	bne.n	6218 <compile_return_stmt+0x38>
        // no argument to 'return', so return None
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    620a:	687b      	ldr	r3, [r7, #4]
    620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    620e:	210e      	movs	r1, #14
    6210:	4618      	mov	r0, r3
    6212:	f004 f88b 	bl	a32c <mp_emit_bc_load_const_tok>
    6216:	e005      	b.n	6224 <compile_return_stmt+0x44>
        compile_node(comp, pns_test_if_expr->nodes[0]); // success value
        EMIT(return_value);
        EMIT_ARG(label_assign, l_fail);
        compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    } else {
        compile_node(comp, pns->nodes[0]);
    6218:	683b      	ldr	r3, [r7, #0]
    621a:	689b      	ldr	r3, [r3, #8]
    621c:	4619      	mov	r1, r3
    621e:	6878      	ldr	r0, [r7, #4]
    6220:	f002 fbbc 	bl	899c <compile_node>
    }
    EMIT(return_value);
    6224:	687b      	ldr	r3, [r7, #4]
    6226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6228:	4618      	mov	r0, r3
    622a:	f004 fd83 	bl	ad34 <mp_emit_bc_return_value>
}
    622e:	3708      	adds	r7, #8
    6230:	46bd      	mov	sp, r7
    6232:	bd80      	pop	{r7, pc}
    6234:	0001e654 	.word	0x0001e654

00006238 <compile_yield_stmt>:

STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6238:	b580      	push	{r7, lr}
    623a:	b082      	sub	sp, #8
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    6242:	683b      	ldr	r3, [r7, #0]
    6244:	689b      	ldr	r3, [r3, #8]
    6246:	4619      	mov	r1, r3
    6248:	6878      	ldr	r0, [r7, #4]
    624a:	f002 fba7 	bl	899c <compile_node>
    EMIT(pop_top);
    624e:	687b      	ldr	r3, [r7, #4]
    6250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6252:	4618      	mov	r0, r3
    6254:	f004 fa48 	bl	a6e8 <mp_emit_bc_pop_top>
}
    6258:	bf00      	nop
    625a:	3708      	adds	r7, #8
    625c:	46bd      	mov	sp, r7
    625e:	bd80      	pop	{r7, pc}

00006260 <compile_raise_stmt>:

STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6260:	b580      	push	{r7, lr}
    6262:	b082      	sub	sp, #8
    6264:	af00      	add	r7, sp, #0
    6266:	6078      	str	r0, [r7, #4]
    6268:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    626a:	683b      	ldr	r3, [r7, #0]
    626c:	689b      	ldr	r3, [r3, #8]
    626e:	2b00      	cmp	r3, #0
    6270:	d106      	bne.n	6280 <compile_raise_stmt+0x20>
        // raise
        EMIT_ARG(raise_varargs, 0);
    6272:	687b      	ldr	r3, [r7, #4]
    6274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6276:	2100      	movs	r1, #0
    6278:	4618      	mov	r0, r3
    627a:	f004 fd6f 	bl	ad5c <mp_emit_bc_raise_varargs>
    } else {
        // raise x
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(raise_varargs, 1);
    }
}
    627e:	e031      	b.n	62e4 <compile_raise_stmt+0x84>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    6280:	683b      	ldr	r3, [r7, #0]
    6282:	689b      	ldr	r3, [r3, #8]
    6284:	2b00      	cmp	r3, #0
    6286:	d021      	beq.n	62cc <compile_raise_stmt+0x6c>
    6288:	683b      	ldr	r3, [r7, #0]
    628a:	689b      	ldr	r3, [r3, #8]
    628c:	f003 0303 	and.w	r3, r3, #3
    6290:	2b00      	cmp	r3, #0
    6292:	d11b      	bne.n	62cc <compile_raise_stmt+0x6c>
    6294:	683b      	ldr	r3, [r7, #0]
    6296:	689b      	ldr	r3, [r3, #8]
    6298:	685b      	ldr	r3, [r3, #4]
    629a:	b2db      	uxtb	r3, r3
    629c:	2b58      	cmp	r3, #88	; 0x58
    629e:	d115      	bne.n	62cc <compile_raise_stmt+0x6c>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    62a0:	683b      	ldr	r3, [r7, #0]
    62a2:	689b      	ldr	r3, [r3, #8]
    62a4:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    62a6:	683b      	ldr	r3, [r7, #0]
    62a8:	689b      	ldr	r3, [r3, #8]
    62aa:	4619      	mov	r1, r3
    62ac:	6878      	ldr	r0, [r7, #4]
    62ae:	f002 fb75 	bl	899c <compile_node>
        compile_node(comp, pns->nodes[1]);
    62b2:	683b      	ldr	r3, [r7, #0]
    62b4:	68db      	ldr	r3, [r3, #12]
    62b6:	4619      	mov	r1, r3
    62b8:	6878      	ldr	r0, [r7, #4]
    62ba:	f002 fb6f 	bl	899c <compile_node>
        EMIT_ARG(raise_varargs, 2);
    62be:	687b      	ldr	r3, [r7, #4]
    62c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62c2:	2102      	movs	r1, #2
    62c4:	4618      	mov	r0, r3
    62c6:	f004 fd49 	bl	ad5c <mp_emit_bc_raise_varargs>
}
    62ca:	e00b      	b.n	62e4 <compile_raise_stmt+0x84>
        compile_node(comp, pns->nodes[0]);
    62cc:	683b      	ldr	r3, [r7, #0]
    62ce:	689b      	ldr	r3, [r3, #8]
    62d0:	4619      	mov	r1, r3
    62d2:	6878      	ldr	r0, [r7, #4]
    62d4:	f002 fb62 	bl	899c <compile_node>
        EMIT_ARG(raise_varargs, 1);
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62dc:	2101      	movs	r1, #1
    62de:	4618      	mov	r0, r3
    62e0:	f004 fd3c 	bl	ad5c <mp_emit_bc_raise_varargs>
}
    62e4:	bf00      	nop
    62e6:	3708      	adds	r7, #8
    62e8:	46bd      	mov	sp, r7
    62ea:	bd80      	pop	{r7, pc}

000062ec <do_import_name>:

// q_base holds the base of the name
// eg   a -> q_base=a
//      a.b.c -> q_base=a
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    62ec:	b580      	push	{r7, lr}
    62ee:	b092      	sub	sp, #72	; 0x48
    62f0:	af00      	add	r7, sp, #0
    62f2:	60f8      	str	r0, [r7, #12]
    62f4:	60b9      	str	r1, [r7, #8]
    62f6:	607a      	str	r2, [r7, #4]
    bool is_as = false;
    62f8:	2300      	movs	r3, #0
    62fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    62fe:	68bb      	ldr	r3, [r7, #8]
    6300:	2b00      	cmp	r3, #0
    6302:	d016      	beq.n	6332 <do_import_name+0x46>
    6304:	68bb      	ldr	r3, [r7, #8]
    6306:	f003 0303 	and.w	r3, r3, #3
    630a:	2b00      	cmp	r3, #0
    630c:	d111      	bne.n	6332 <do_import_name+0x46>
    630e:	68bb      	ldr	r3, [r7, #8]
    6310:	685b      	ldr	r3, [r3, #4]
    6312:	b2db      	uxtb	r3, r3
    6314:	2b62      	cmp	r3, #98	; 0x62
    6316:	d10c      	bne.n	6332 <do_import_name+0x46>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    6318:	68bb      	ldr	r3, [r7, #8]
    631a:	62fb      	str	r3, [r7, #44]	; 0x2c
        // a name of the form x as y; unwrap it
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    631e:	68db      	ldr	r3, [r3, #12]
    6320:	091a      	lsrs	r2, r3, #4
    6322:	687b      	ldr	r3, [r7, #4]
    6324:	601a      	str	r2, [r3, #0]
        pn = pns->nodes[0];
    6326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6328:	689b      	ldr	r3, [r3, #8]
    632a:	60bb      	str	r3, [r7, #8]
        is_as = true;
    632c:	2301      	movs	r3, #1
    632e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    6332:	68bb      	ldr	r3, [r7, #8]
    6334:	2b00      	cmp	r3, #0
    6336:	d10a      	bne.n	634e <do_import_name+0x62>
        // empty name (eg, from . import x)
        *q_base = MP_QSTR_;
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	2201      	movs	r2, #1
    633c:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, MP_QSTR_, MP_EMIT_IMPORT_NAME); // import the empty string
    633e:	68fb      	ldr	r3, [r7, #12]
    6340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6342:	2200      	movs	r2, #0
    6344:	2101      	movs	r1, #1
    6346:	4618      	mov	r0, r3
    6348:	f003 ffc8 	bl	a2dc <mp_emit_bc_import>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
                }
            }
        }
    }
}
    634c:	e0ba      	b.n	64c4 <do_import_name+0x1d8>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    634e:	68bb      	ldr	r3, [r7, #8]
    6350:	f003 030f 	and.w	r3, r3, #15
    6354:	2b02      	cmp	r3, #2
    6356:	d114      	bne.n	6382 <do_import_name+0x96>
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    6358:	68bb      	ldr	r3, [r7, #8]
    635a:	091b      	lsrs	r3, r3, #4
    635c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (!is_as) {
    635e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6362:	f083 0301 	eor.w	r3, r3, #1
    6366:	b2db      	uxtb	r3, r3
    6368:	2b00      	cmp	r3, #0
    636a:	d002      	beq.n	6372 <do_import_name+0x86>
            *q_base = q_full;
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6370:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    6372:	68fb      	ldr	r3, [r7, #12]
    6374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6376:	2200      	movs	r2, #0
    6378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    637a:	4618      	mov	r0, r3
    637c:	f003 ffae 	bl	a2dc <mp_emit_bc_import>
}
    6380:	e0a0      	b.n	64c4 <do_import_name+0x1d8>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    6382:	68bb      	ldr	r3, [r7, #8]
    6384:	2b00      	cmp	r3, #0
    6386:	d009      	beq.n	639c <do_import_name+0xb0>
    6388:	68bb      	ldr	r3, [r7, #8]
    638a:	f003 0303 	and.w	r3, r3, #3
    638e:	2b00      	cmp	r3, #0
    6390:	d104      	bne.n	639c <do_import_name+0xb0>
    6392:	68bb      	ldr	r3, [r7, #8]
    6394:	685b      	ldr	r3, [r3, #4]
    6396:	b2db      	uxtb	r3, r3
    6398:	2b66      	cmp	r3, #102	; 0x66
    639a:	d006      	beq.n	63aa <do_import_name+0xbe>
    639c:	4b4b      	ldr	r3, [pc, #300]	; (64cc <do_import_name+0x1e0>)
    639e:	4a4c      	ldr	r2, [pc, #304]	; (64d0 <do_import_name+0x1e4>)
    63a0:	f240 410d 	movw	r1, #1037	; 0x40d
    63a4:	484b      	ldr	r0, [pc, #300]	; (64d4 <do_import_name+0x1e8>)
    63a6:	f014 fff9 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    63aa:	68bb      	ldr	r3, [r7, #8]
    63ac:	627b      	str	r3, [r7, #36]	; 0x24
            if (!is_as) {
    63ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    63b2:	f083 0301 	eor.w	r3, r3, #1
    63b6:	b2db      	uxtb	r3, r3
    63b8:	2b00      	cmp	r3, #0
    63ba:	d004      	beq.n	63c6 <do_import_name+0xda>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    63bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63be:	689b      	ldr	r3, [r3, #8]
    63c0:	091a      	lsrs	r2, r3, #4
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	601a      	str	r2, [r3, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    63c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63c8:	685b      	ldr	r3, [r3, #4]
    63ca:	0a1b      	lsrs	r3, r3, #8
    63cc:	623b      	str	r3, [r7, #32]
            int len = n - 1;
    63ce:	6a3b      	ldr	r3, [r7, #32]
    63d0:	3b01      	subs	r3, #1
    63d2:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    63d4:	2300      	movs	r3, #0
    63d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    63d8:	e00f      	b.n	63fa <do_import_name+0x10e>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    63da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    63de:	3202      	adds	r2, #2
    63e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    63e4:	091b      	lsrs	r3, r3, #4
    63e6:	4618      	mov	r0, r3
    63e8:	f7fa ff02 	bl	11f0 <qstr_len>
    63ec:	4602      	mov	r2, r0
    63ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63f0:	4413      	add	r3, r2
    63f2:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    63f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    63f6:	3301      	adds	r3, #1
    63f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    63fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    63fc:	6a3b      	ldr	r3, [r7, #32]
    63fe:	429a      	cmp	r2, r3
    6400:	dbeb      	blt.n	63da <do_import_name+0xee>
            char *q_ptr = mp_local_alloc(len);
    6402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6404:	3307      	adds	r3, #7
    6406:	3307      	adds	r3, #7
    6408:	08db      	lsrs	r3, r3, #3
    640a:	00db      	lsls	r3, r3, #3
    640c:	ebad 0d03 	sub.w	sp, sp, r3
    6410:	466b      	mov	r3, sp
    6412:	3307      	adds	r3, #7
    6414:	08db      	lsrs	r3, r3, #3
    6416:	00db      	lsls	r3, r3, #3
    6418:	61fb      	str	r3, [r7, #28]
            char *str_dest = q_ptr;
    641a:	69fb      	ldr	r3, [r7, #28]
    641c:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    641e:	2300      	movs	r3, #0
    6420:	637b      	str	r3, [r7, #52]	; 0x34
    6422:	e021      	b.n	6468 <do_import_name+0x17c>
                if (i > 0) {
    6424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6426:	2b00      	cmp	r3, #0
    6428:	dd04      	ble.n	6434 <do_import_name+0x148>
                    *str_dest++ = '.';
    642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    642c:	1c5a      	adds	r2, r3, #1
    642e:	63ba      	str	r2, [r7, #56]	; 0x38
    6430:	222e      	movs	r2, #46	; 0x2e
    6432:	701a      	strb	r2, [r3, #0]
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    6434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6438:	3202      	adds	r2, #2
    643a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    643e:	091b      	lsrs	r3, r3, #4
    6440:	f107 0210 	add.w	r2, r7, #16
    6444:	4611      	mov	r1, r2
    6446:	4618      	mov	r0, r3
    6448:	f7fa fef0 	bl	122c <qstr_data>
    644c:	61b8      	str	r0, [r7, #24]
                memcpy(str_dest, str_src, str_src_len);
    644e:	693b      	ldr	r3, [r7, #16]
    6450:	461a      	mov	r2, r3
    6452:	69b9      	ldr	r1, [r7, #24]
    6454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6456:	f015 fc5d 	bl	1bd14 <memcpy>
                str_dest += str_src_len;
    645a:	693b      	ldr	r3, [r7, #16]
    645c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    645e:	4413      	add	r3, r2
    6460:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    6462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6464:	3301      	adds	r3, #1
    6466:	637b      	str	r3, [r7, #52]	; 0x34
    6468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    646a:	6a3b      	ldr	r3, [r7, #32]
    646c:	429a      	cmp	r2, r3
    646e:	dbd9      	blt.n	6424 <do_import_name+0x138>
            qstr q_full = qstr_from_strn(q_ptr, len);
    6470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6472:	4619      	mov	r1, r3
    6474:	69f8      	ldr	r0, [r7, #28]
    6476:	f7fa fdef 	bl	1058 <qstr_from_strn>
    647a:	6178      	str	r0, [r7, #20]
            mp_local_free(q_ptr);
    647c:	69f8      	ldr	r0, [r7, #28]
    647e:	f7fe fc61 	bl	4d44 <mp_local_free>
            EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    6482:	68fb      	ldr	r3, [r7, #12]
    6484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6486:	2200      	movs	r2, #0
    6488:	6979      	ldr	r1, [r7, #20]
    648a:	4618      	mov	r0, r3
    648c:	f003 ff26 	bl	a2dc <mp_emit_bc_import>
            if (is_as) {
    6490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6494:	2b00      	cmp	r3, #0
    6496:	d015      	beq.n	64c4 <do_import_name+0x1d8>
                for (int i = 1; i < n; i++) {
    6498:	2301      	movs	r3, #1
    649a:	633b      	str	r3, [r7, #48]	; 0x30
    649c:	e00e      	b.n	64bc <do_import_name+0x1d0>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
    649e:	68fb      	ldr	r3, [r7, #12]
    64a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    64a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    64a6:	3202      	adds	r2, #2
    64a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64ac:	091b      	lsrs	r3, r3, #4
    64ae:	2200      	movs	r2, #0
    64b0:	4619      	mov	r1, r3
    64b2:	f004 f863 	bl	a57c <mp_emit_bc_attr>
                for (int i = 1; i < n; i++) {
    64b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    64b8:	3301      	adds	r3, #1
    64ba:	633b      	str	r3, [r7, #48]	; 0x30
    64bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    64be:	6a3b      	ldr	r3, [r7, #32]
    64c0:	429a      	cmp	r2, r3
    64c2:	dbec      	blt.n	649e <do_import_name+0x1b2>
}
    64c4:	bf00      	nop
    64c6:	3748      	adds	r7, #72	; 0x48
    64c8:	46bd      	mov	sp, r7
    64ca:	bd80      	pop	{r7, pc}
    64cc:	0001e670 	.word	0x0001e670
    64d0:	0001ef48 	.word	0x0001ef48
    64d4:	0001e310 	.word	0x0001e310

000064d8 <compile_dotted_as_name>:

STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    64d8:	b580      	push	{r7, lr}
    64da:	b084      	sub	sp, #16
    64dc:	af00      	add	r7, sp, #0
    64de:	6078      	str	r0, [r7, #4]
    64e0:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64e6:	2100      	movs	r1, #0
    64e8:	4618      	mov	r0, r3
    64ea:	f003 ff5b 	bl	a3a4 <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    64ee:	687b      	ldr	r3, [r7, #4]
    64f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64f2:	210e      	movs	r1, #14
    64f4:	4618      	mov	r0, r3
    64f6:	f003 ff19 	bl	a32c <mp_emit_bc_load_const_tok>
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    64fa:	f107 030c 	add.w	r3, r7, #12
    64fe:	461a      	mov	r2, r3
    6500:	6839      	ldr	r1, [r7, #0]
    6502:	6878      	ldr	r0, [r7, #4]
    6504:	f7ff fef2 	bl	62ec <do_import_name>
    compile_store_id(comp, q_base);
    6508:	68fb      	ldr	r3, [r7, #12]
    650a:	4619      	mov	r1, r3
    650c:	6878      	ldr	r0, [r7, #4]
    650e:	f7fe fd5f 	bl	4fd0 <compile_store_id>
}
    6512:	bf00      	nop
    6514:	3710      	adds	r7, #16
    6516:	46bd      	mov	sp, r7
    6518:	bd80      	pop	{r7, pc}
    651a:	bf00      	nop

0000651c <compile_import_name>:

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    651c:	b580      	push	{r7, lr}
    651e:	b082      	sub	sp, #8
    6520:	af00      	add	r7, sp, #0
    6522:	6078      	str	r0, [r7, #4]
    6524:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    6526:	683b      	ldr	r3, [r7, #0]
    6528:	6899      	ldr	r1, [r3, #8]
    652a:	4b04      	ldr	r3, [pc, #16]	; (653c <compile_import_name+0x20>)
    652c:	2265      	movs	r2, #101	; 0x65
    652e:	6878      	ldr	r0, [r7, #4]
    6530:	f7fe fcc6 	bl	4ec0 <apply_to_single_or_list>
}
    6534:	bf00      	nop
    6536:	3708      	adds	r7, #8
    6538:	46bd      	mov	sp, r7
    653a:	bd80      	pop	{r7, pc}
    653c:	000064d9 	.word	0x000064d9

00006540 <compile_import_from>:

STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6540:	b580      	push	{r7, lr}
    6542:	b094      	sub	sp, #80	; 0x50
    6544:	af00      	add	r7, sp, #0
    6546:	6078      	str	r0, [r7, #4]
    6548:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn_import_source = pns->nodes[0];
    654a:	683b      	ldr	r3, [r7, #0]
    654c:	689b      	ldr	r3, [r3, #8]
    654e:	64fb      	str	r3, [r7, #76]	; 0x4c

    // extract the preceding .'s (if any) for a relative import, to compute the import level
    uint import_level = 0;
    6550:	2300      	movs	r3, #0
    6552:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
        mp_parse_node_t pn_rel;
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    6554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6556:	f003 030f 	and.w	r3, r3, #15
    655a:	2b0e      	cmp	r3, #14
    655c:	d00c      	beq.n	6578 <compile_import_from+0x38>
    655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6560:	2b00      	cmp	r3, #0
    6562:	d00e      	beq.n	6582 <compile_import_from+0x42>
    6564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6566:	f003 0303 	and.w	r3, r3, #3
    656a:	2b00      	cmp	r3, #0
    656c:	d109      	bne.n	6582 <compile_import_from+0x42>
    656e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6570:	685b      	ldr	r3, [r3, #4]
    6572:	b2db      	uxtb	r3, r3
    6574:	2b5f      	cmp	r3, #95	; 0x5f
    6576:	d104      	bne.n	6582 <compile_import_from+0x42>
            // This covers relative imports with dots only like "from .. import"
            pn_rel = pn_import_source;
    6578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    657a:	61fb      	str	r3, [r7, #28]
            pn_import_source = MP_PARSE_NODE_NULL;
    657c:	2300      	movs	r3, #0
    657e:	64fb      	str	r3, [r7, #76]	; 0x4c
    6580:	e01e      	b.n	65c0 <compile_import_from+0x80>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    6582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6584:	2b00      	cmp	r3, #0
    6586:	d03e      	beq.n	6606 <compile_import_from+0xc6>
    6588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    658a:	f003 0303 	and.w	r3, r3, #3
    658e:	2b00      	cmp	r3, #0
    6590:	d139      	bne.n	6606 <compile_import_from+0xc6>
    6592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6594:	685b      	ldr	r3, [r3, #4]
    6596:	b2db      	uxtb	r3, r3
    6598:	2b5c      	cmp	r3, #92	; 0x5c
    659a:	d134      	bne.n	6606 <compile_import_from+0xc6>
            // This covers relative imports starting with dot(s) like "from .foo import"
            mp_parse_node_struct_t *pns_2b = (mp_parse_node_struct_t*)pn_import_source;
    659c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    659e:	63bb      	str	r3, [r7, #56]	; 0x38
            pn_rel = pns_2b->nodes[0];
    65a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    65a2:	689b      	ldr	r3, [r3, #8]
    65a4:	61fb      	str	r3, [r7, #28]
            pn_import_source = pns_2b->nodes[1];
    65a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    65a8:	68db      	ldr	r3, [r3, #12]
    65aa:	64fb      	str	r3, [r7, #76]	; 0x4c
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    65ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65ae:	2b00      	cmp	r3, #0
    65b0:	d106      	bne.n	65c0 <compile_import_from+0x80>
    65b2:	4b7f      	ldr	r3, [pc, #508]	; (67b0 <compile_import_from+0x270>)
    65b4:	4a7f      	ldr	r2, [pc, #508]	; (67b4 <compile_import_from+0x274>)
    65b6:	f240 414c 	movw	r1, #1100	; 0x44c
    65ba:	487f      	ldr	r0, [pc, #508]	; (67b8 <compile_import_from+0x278>)
    65bc:	f014 feee 	bl	1b39c <__assert_func>
            break;
        }

        // get the list of . and/or ...'s
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    65c0:	f107 0218 	add.w	r2, r7, #24
    65c4:	f107 031c 	add.w	r3, r7, #28
    65c8:	215f      	movs	r1, #95	; 0x5f
    65ca:	4618      	mov	r0, r3
    65cc:	f7fd fae6 	bl	3b9c <mp_parse_node_extract_list>
    65d0:	6378      	str	r0, [r7, #52]	; 0x34

        // count the total number of .'s
        for (int i = 0; i < n; i++) {
    65d2:	2300      	movs	r3, #0
    65d4:	647b      	str	r3, [r7, #68]	; 0x44
    65d6:	e012      	b.n	65fe <compile_import_from+0xbe>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    65d8:	69ba      	ldr	r2, [r7, #24]
    65da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    65dc:	009b      	lsls	r3, r3, #2
    65de:	4413      	add	r3, r2
    65e0:	681b      	ldr	r3, [r3, #0]
    65e2:	f240 42ae 	movw	r2, #1198	; 0x4ae
    65e6:	4293      	cmp	r3, r2
    65e8:	d103      	bne.n	65f2 <compile_import_from+0xb2>
                import_level++;
    65ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    65ec:	3301      	adds	r3, #1
    65ee:	64bb      	str	r3, [r7, #72]	; 0x48
    65f0:	e002      	b.n	65f8 <compile_import_from+0xb8>
            } else {
                // should be an MP_TOKEN_ELLIPSIS
                import_level += 3;
    65f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    65f4:	3303      	adds	r3, #3
    65f6:	64bb      	str	r3, [r7, #72]	; 0x48
        for (int i = 0; i < n; i++) {
    65f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    65fa:	3301      	adds	r3, #1
    65fc:	647b      	str	r3, [r7, #68]	; 0x44
    65fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6602:	429a      	cmp	r2, r3
    6604:	dbe8      	blt.n	65d8 <compile_import_from+0x98>
            }
        }
    } while (0);

    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    6606:	683b      	ldr	r3, [r7, #0]
    6608:	68db      	ldr	r3, [r3, #12]
    660a:	f240 321e 	movw	r2, #798	; 0x31e
    660e:	4293      	cmp	r3, r2
    6610:	d122      	bne.n	6658 <compile_import_from+0x118>
        EMIT_ARG(load_const_small_int, import_level);
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6616:	6cba      	ldr	r2, [r7, #72]	; 0x48
    6618:	4611      	mov	r1, r2
    661a:	4618      	mov	r0, r3
    661c:	f003 fec2 	bl	a3a4 <mp_emit_bc_load_const_small_int>

        // build the "fromlist" tuple
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    6620:	687b      	ldr	r3, [r7, #4]
    6622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6624:	2126      	movs	r1, #38	; 0x26
    6626:	4618      	mov	r0, r3
    6628:	f003 fede 	bl	a3e8 <mp_emit_bc_load_const_str>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_TUPLE);
    662c:	687b      	ldr	r3, [r7, #4]
    662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6630:	2200      	movs	r2, #0
    6632:	2101      	movs	r1, #1
    6634:	4618      	mov	r0, r3
    6636:	f004 fa19 	bl	aa6c <mp_emit_bc_build>

        // do the import
        qstr dummy_q;
        do_import_name(comp, pn_import_source, &dummy_q);
    663a:	f107 0314 	add.w	r3, r7, #20
    663e:	461a      	mov	r2, r3
    6640:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6642:	6878      	ldr	r0, [r7, #4]
    6644:	f7ff fe52 	bl	62ec <do_import_name>
        EMIT_ARG(import, MP_QSTR_NULL, MP_EMIT_IMPORT_STAR);
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    664c:	2202      	movs	r2, #2
    664e:	2100      	movs	r1, #0
    6650:	4618      	mov	r0, r3
    6652:	f003 fe43 	bl	a2dc <mp_emit_bc_import>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
            }
        }
        EMIT(pop_top);
    }
}
    6656:	e0a7      	b.n	67a8 <compile_import_from+0x268>
        EMIT_ARG(load_const_small_int, import_level);
    6658:	687b      	ldr	r3, [r7, #4]
    665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    665c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    665e:	4611      	mov	r1, r2
    6660:	4618      	mov	r0, r3
    6662:	f003 fe9f 	bl	a3a4 <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    6666:	683b      	ldr	r3, [r7, #0]
    6668:	330c      	adds	r3, #12
    666a:	f107 0210 	add.w	r2, r7, #16
    666e:	2164      	movs	r1, #100	; 0x64
    6670:	4618      	mov	r0, r3
    6672:	f7fd fa93 	bl	3b9c <mp_parse_node_extract_list>
    6676:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < n; i++) {
    6678:	2300      	movs	r3, #0
    667a:	643b      	str	r3, [r7, #64]	; 0x40
    667c:	e032      	b.n	66e4 <compile_import_from+0x1a4>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    667e:	693a      	ldr	r2, [r7, #16]
    6680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6682:	009b      	lsls	r3, r3, #2
    6684:	4413      	add	r3, r2
    6686:	681b      	ldr	r3, [r3, #0]
    6688:	2b00      	cmp	r3, #0
    668a:	d011      	beq.n	66b0 <compile_import_from+0x170>
    668c:	693a      	ldr	r2, [r7, #16]
    668e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6690:	009b      	lsls	r3, r3, #2
    6692:	4413      	add	r3, r2
    6694:	681b      	ldr	r3, [r3, #0]
    6696:	f003 0303 	and.w	r3, r3, #3
    669a:	2b00      	cmp	r3, #0
    669c:	d108      	bne.n	66b0 <compile_import_from+0x170>
    669e:	693a      	ldr	r2, [r7, #16]
    66a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66a2:	009b      	lsls	r3, r3, #2
    66a4:	4413      	add	r3, r2
    66a6:	681b      	ldr	r3, [r3, #0]
    66a8:	685b      	ldr	r3, [r3, #4]
    66aa:	b2db      	uxtb	r3, r3
    66ac:	2b61      	cmp	r3, #97	; 0x61
    66ae:	d006      	beq.n	66be <compile_import_from+0x17e>
    66b0:	4b42      	ldr	r3, [pc, #264]	; (67bc <compile_import_from+0x27c>)
    66b2:	4a40      	ldr	r2, [pc, #256]	; (67b4 <compile_import_from+0x274>)
    66b4:	f240 4174 	movw	r1, #1140	; 0x474
    66b8:	483f      	ldr	r0, [pc, #252]	; (67b8 <compile_import_from+0x278>)
    66ba:	f014 fe6f 	bl	1b39c <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    66be:	693a      	ldr	r2, [r7, #16]
    66c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66c2:	009b      	lsls	r3, r3, #2
    66c4:	4413      	add	r3, r2
    66c6:	681b      	ldr	r3, [r3, #0]
    66c8:	62fb      	str	r3, [r7, #44]	; 0x2c
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    66ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    66cc:	689b      	ldr	r3, [r3, #8]
    66ce:	091b      	lsrs	r3, r3, #4
    66d0:	62bb      	str	r3, [r7, #40]	; 0x28
            EMIT_ARG(load_const_str, id2);
    66d2:	687b      	ldr	r3, [r7, #4]
    66d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    66d8:	4618      	mov	r0, r3
    66da:	f003 fe85 	bl	a3e8 <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    66de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66e0:	3301      	adds	r3, #1
    66e2:	643b      	str	r3, [r7, #64]	; 0x40
    66e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    66e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    66e8:	429a      	cmp	r2, r3
    66ea:	dbc8      	blt.n	667e <compile_import_from+0x13e>
        EMIT_ARG(build, n, MP_EMIT_BUILD_TUPLE);
    66ec:	687b      	ldr	r3, [r7, #4]
    66ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    66f2:	2200      	movs	r2, #0
    66f4:	4618      	mov	r0, r3
    66f6:	f004 f9b9 	bl	aa6c <mp_emit_bc_build>
        do_import_name(comp, pn_import_source, &dummy_q);
    66fa:	f107 030c 	add.w	r3, r7, #12
    66fe:	461a      	mov	r2, r3
    6700:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6702:	6878      	ldr	r0, [r7, #4]
    6704:	f7ff fdf2 	bl	62ec <do_import_name>
        for (int i = 0; i < n; i++) {
    6708:	2300      	movs	r3, #0
    670a:	63fb      	str	r3, [r7, #60]	; 0x3c
    670c:	e043      	b.n	6796 <compile_import_from+0x256>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    670e:	693a      	ldr	r2, [r7, #16]
    6710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6712:	009b      	lsls	r3, r3, #2
    6714:	4413      	add	r3, r2
    6716:	681b      	ldr	r3, [r3, #0]
    6718:	2b00      	cmp	r3, #0
    671a:	d011      	beq.n	6740 <compile_import_from+0x200>
    671c:	693a      	ldr	r2, [r7, #16]
    671e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6720:	009b      	lsls	r3, r3, #2
    6722:	4413      	add	r3, r2
    6724:	681b      	ldr	r3, [r3, #0]
    6726:	f003 0303 	and.w	r3, r3, #3
    672a:	2b00      	cmp	r3, #0
    672c:	d108      	bne.n	6740 <compile_import_from+0x200>
    672e:	693a      	ldr	r2, [r7, #16]
    6730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6732:	009b      	lsls	r3, r3, #2
    6734:	4413      	add	r3, r2
    6736:	681b      	ldr	r3, [r3, #0]
    6738:	685b      	ldr	r3, [r3, #4]
    673a:	b2db      	uxtb	r3, r3
    673c:	2b61      	cmp	r3, #97	; 0x61
    673e:	d006      	beq.n	674e <compile_import_from+0x20e>
    6740:	4b1e      	ldr	r3, [pc, #120]	; (67bc <compile_import_from+0x27c>)
    6742:	4a1c      	ldr	r2, [pc, #112]	; (67b4 <compile_import_from+0x274>)
    6744:	f240 417f 	movw	r1, #1151	; 0x47f
    6748:	481b      	ldr	r0, [pc, #108]	; (67b8 <compile_import_from+0x278>)
    674a:	f014 fe27 	bl	1b39c <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    674e:	693a      	ldr	r2, [r7, #16]
    6750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6752:	009b      	lsls	r3, r3, #2
    6754:	4413      	add	r3, r2
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	627b      	str	r3, [r7, #36]	; 0x24
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    675c:	689b      	ldr	r3, [r3, #8]
    675e:	091b      	lsrs	r3, r3, #4
    6760:	623b      	str	r3, [r7, #32]
            EMIT_ARG(import, id2, MP_EMIT_IMPORT_FROM);
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6766:	2201      	movs	r2, #1
    6768:	6a39      	ldr	r1, [r7, #32]
    676a:	4618      	mov	r0, r3
    676c:	f003 fdb6 	bl	a2dc <mp_emit_bc_import>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    6770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6772:	68db      	ldr	r3, [r3, #12]
    6774:	2b00      	cmp	r3, #0
    6776:	d104      	bne.n	6782 <compile_import_from+0x242>
                compile_store_id(comp, id2);
    6778:	6a39      	ldr	r1, [r7, #32]
    677a:	6878      	ldr	r0, [r7, #4]
    677c:	f7fe fc28 	bl	4fd0 <compile_store_id>
    6780:	e006      	b.n	6790 <compile_import_from+0x250>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    6782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6784:	68db      	ldr	r3, [r3, #12]
    6786:	091b      	lsrs	r3, r3, #4
    6788:	4619      	mov	r1, r3
    678a:	6878      	ldr	r0, [r7, #4]
    678c:	f7fe fc20 	bl	4fd0 <compile_store_id>
        for (int i = 0; i < n; i++) {
    6790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6792:	3301      	adds	r3, #1
    6794:	63fb      	str	r3, [r7, #60]	; 0x3c
    6796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    679a:	429a      	cmp	r2, r3
    679c:	dbb7      	blt.n	670e <compile_import_from+0x1ce>
        EMIT(pop_top);
    679e:	687b      	ldr	r3, [r7, #4]
    67a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67a2:	4618      	mov	r0, r3
    67a4:	f003 ffa0 	bl	a6e8 <mp_emit_bc_pop_top>
}
    67a8:	bf00      	nop
    67aa:	3750      	adds	r7, #80	; 0x50
    67ac:	46bd      	mov	sp, r7
    67ae:	bd80      	pop	{r7, pc}
    67b0:	0001e6a4 	.word	0x0001e6a4
    67b4:	0001ef58 	.word	0x0001ef58
    67b8:	0001e310 	.word	0x0001e310
    67bc:	0001e6d0 	.word	0x0001e6d0

000067c0 <compile_declare_global>:

STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, qstr qst, bool added, id_info_t *id_info) {
    67c0:	b580      	push	{r7, lr}
    67c2:	b084      	sub	sp, #16
    67c4:	af00      	add	r7, sp, #0
    67c6:	60f8      	str	r0, [r7, #12]
    67c8:	60b9      	str	r1, [r7, #8]
    67ca:	607a      	str	r2, [r7, #4]
    67cc:	70fb      	strb	r3, [r7, #3]
    if (!added && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    67ce:	78fb      	ldrb	r3, [r7, #3]
    67d0:	f083 0301 	eor.w	r3, r3, #1
    67d4:	b2db      	uxtb	r3, r3
    67d6:	2b00      	cmp	r3, #0
    67d8:	d009      	beq.n	67ee <compile_declare_global+0x2e>
    67da:	69bb      	ldr	r3, [r7, #24]
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	2b01      	cmp	r3, #1
    67e0:	d005      	beq.n	67ee <compile_declare_global+0x2e>
        compile_syntax_error(comp, pn, "identifier redefined as global");
    67e2:	4a0c      	ldr	r2, [pc, #48]	; (6814 <compile_declare_global+0x54>)
    67e4:	68b9      	ldr	r1, [r7, #8]
    67e6:	68f8      	ldr	r0, [r7, #12]
    67e8:	f7fe fad2 	bl	4d90 <compile_syntax_error>
        return;
    67ec:	e00f      	b.n	680e <compile_declare_global+0x4e>
    }
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    67ee:	69bb      	ldr	r3, [r7, #24]
    67f0:	2201      	movs	r2, #1
    67f2:	701a      	strb	r2, [r3, #0]

    // if the id exists in the global scope, set its kind to EXPLICIT_GLOBAL
    id_info = scope_find_global(comp->scope_cur, qst);
    67f4:	68fb      	ldr	r3, [r7, #12]
    67f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67f8:	6879      	ldr	r1, [r7, #4]
    67fa:	4618      	mov	r0, r3
    67fc:	f7fe f9f2 	bl	4be4 <scope_find_global>
    6800:	61b8      	str	r0, [r7, #24]
    if (id_info != NULL) {
    6802:	69bb      	ldr	r3, [r7, #24]
    6804:	2b00      	cmp	r3, #0
    6806:	d002      	beq.n	680e <compile_declare_global+0x4e>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    6808:	69bb      	ldr	r3, [r7, #24]
    680a:	2201      	movs	r2, #1
    680c:	701a      	strb	r2, [r3, #0]
    }
}
    680e:	3710      	adds	r7, #16
    6810:	46bd      	mov	sp, r7
    6812:	bd80      	pop	{r7, pc}
    6814:	0001e710 	.word	0x0001e710

00006818 <compile_declare_nonlocal>:

STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, qstr qst, bool added, id_info_t *id_info) {
    6818:	b580      	push	{r7, lr}
    681a:	b084      	sub	sp, #16
    681c:	af00      	add	r7, sp, #0
    681e:	60f8      	str	r0, [r7, #12]
    6820:	60b9      	str	r1, [r7, #8]
    6822:	607a      	str	r2, [r7, #4]
    6824:	70fb      	strb	r3, [r7, #3]
    if (added) {
    6826:	78fb      	ldrb	r3, [r7, #3]
    6828:	2b00      	cmp	r3, #0
    682a:	d010      	beq.n	684e <compile_declare_nonlocal+0x36>
        scope_find_local_and_close_over(comp->scope_cur, id_info, qst);
    682c:	68fb      	ldr	r3, [r7, #12]
    682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6830:	687a      	ldr	r2, [r7, #4]
    6832:	69b9      	ldr	r1, [r7, #24]
    6834:	4618      	mov	r0, r3
    6836:	f7fe fa3d 	bl	4cb4 <scope_find_local_and_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    683a:	69bb      	ldr	r3, [r7, #24]
    683c:	781b      	ldrb	r3, [r3, #0]
    683e:	2b00      	cmp	r3, #0
    6840:	d10e      	bne.n	6860 <compile_declare_nonlocal+0x48>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    6842:	4a09      	ldr	r2, [pc, #36]	; (6868 <compile_declare_nonlocal+0x50>)
    6844:	68b9      	ldr	r1, [r7, #8]
    6846:	68f8      	ldr	r0, [r7, #12]
    6848:	f7fe faa2 	bl	4d90 <compile_syntax_error>
        }
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    }
}
    684c:	e008      	b.n	6860 <compile_declare_nonlocal+0x48>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    684e:	69bb      	ldr	r3, [r7, #24]
    6850:	781b      	ldrb	r3, [r3, #0]
    6852:	2b04      	cmp	r3, #4
    6854:	d004      	beq.n	6860 <compile_declare_nonlocal+0x48>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    6856:	4a05      	ldr	r2, [pc, #20]	; (686c <compile_declare_nonlocal+0x54>)
    6858:	68b9      	ldr	r1, [r7, #8]
    685a:	68f8      	ldr	r0, [r7, #12]
    685c:	f7fe fa98 	bl	4d90 <compile_syntax_error>
}
    6860:	bf00      	nop
    6862:	3710      	adds	r7, #16
    6864:	46bd      	mov	sp, r7
    6866:	bd80      	pop	{r7, pc}
    6868:	0001e730 	.word	0x0001e730
    686c:	0001e750 	.word	0x0001e750

00006870 <compile_global_nonlocal_stmt>:

STATIC void compile_global_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6870:	b580      	push	{r7, lr}
    6872:	b08c      	sub	sp, #48	; 0x30
    6874:	af02      	add	r7, sp, #8
    6876:	6078      	str	r0, [r7, #4]
    6878:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    687a:	687b      	ldr	r3, [r7, #4]
    687c:	795b      	ldrb	r3, [r3, #5]
    687e:	2b01      	cmp	r3, #1
    6880:	d155      	bne.n	692e <compile_global_nonlocal_stmt+0xbe>
        bool is_global = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_global_stmt;
    6882:	683b      	ldr	r3, [r7, #0]
    6884:	685b      	ldr	r3, [r3, #4]
    6886:	b2db      	uxtb	r3, r3
    6888:	2b10      	cmp	r3, #16
    688a:	bf0c      	ite	eq
    688c:	2301      	moveq	r3, #1
    688e:	2300      	movne	r3, #0
    6890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        if (!is_global && comp->scope_cur->kind == SCOPE_MODULE) {
    6894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    6898:	f083 0301 	eor.w	r3, r3, #1
    689c:	b2db      	uxtb	r3, r3
    689e:	2b00      	cmp	r3, #0
    68a0:	d00b      	beq.n	68ba <compile_global_nonlocal_stmt+0x4a>
    68a2:	687b      	ldr	r3, [r7, #4]
    68a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68a6:	681b      	ldr	r3, [r3, #0]
    68a8:	2b00      	cmp	r3, #0
    68aa:	d106      	bne.n	68ba <compile_global_nonlocal_stmt+0x4a>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    68ac:	683b      	ldr	r3, [r7, #0]
    68ae:	4a21      	ldr	r2, [pc, #132]	; (6934 <compile_global_nonlocal_stmt+0xc4>)
    68b0:	4619      	mov	r1, r3
    68b2:	6878      	ldr	r0, [r7, #4]
    68b4:	f7fe fa6c 	bl	4d90 <compile_syntax_error>
    68b8:	e039      	b.n	692e <compile_global_nonlocal_stmt+0xbe>
            return;
        }

        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    68ba:	683b      	ldr	r3, [r7, #0]
    68bc:	3308      	adds	r3, #8
    68be:	f107 0210 	add.w	r2, r7, #16
    68c2:	2167      	movs	r1, #103	; 0x67
    68c4:	4618      	mov	r0, r3
    68c6:	f7fd f969 	bl	3b9c <mp_parse_node_extract_list>
    68ca:	61f8      	str	r0, [r7, #28]
        for (int i = 0; i < n; i++) {
    68cc:	2300      	movs	r3, #0
    68ce:	627b      	str	r3, [r7, #36]	; 0x24
    68d0:	e029      	b.n	6926 <compile_global_nonlocal_stmt+0xb6>
            qstr qst = MP_PARSE_NODE_LEAF_ARG(nodes[i]);
    68d2:	693a      	ldr	r2, [r7, #16]
    68d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68d6:	009b      	lsls	r3, r3, #2
    68d8:	4413      	add	r3, r2
    68da:	681b      	ldr	r3, [r3, #0]
    68dc:	091b      	lsrs	r3, r3, #4
    68de:	61bb      	str	r3, [r7, #24]
            bool added;
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    68e0:	687b      	ldr	r3, [r7, #4]
    68e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68e4:	f107 020f 	add.w	r2, r7, #15
    68e8:	69b9      	ldr	r1, [r7, #24]
    68ea:	4618      	mov	r0, r3
    68ec:	f7fe f906 	bl	4afc <scope_find_or_add_id>
    68f0:	6178      	str	r0, [r7, #20]
            if (is_global) {
    68f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    68f6:	2b00      	cmp	r3, #0
    68f8:	d009      	beq.n	690e <compile_global_nonlocal_stmt+0x9e>
                compile_declare_global(comp, (mp_parse_node_t)pns, qst, added, id_info);
    68fa:	6839      	ldr	r1, [r7, #0]
    68fc:	7bfa      	ldrb	r2, [r7, #15]
    68fe:	697b      	ldr	r3, [r7, #20]
    6900:	9300      	str	r3, [sp, #0]
    6902:	4613      	mov	r3, r2
    6904:	69ba      	ldr	r2, [r7, #24]
    6906:	6878      	ldr	r0, [r7, #4]
    6908:	f7ff ff5a 	bl	67c0 <compile_declare_global>
    690c:	e008      	b.n	6920 <compile_global_nonlocal_stmt+0xb0>
            } else {
                compile_declare_nonlocal(comp, (mp_parse_node_t)pns, qst, added, id_info);
    690e:	6839      	ldr	r1, [r7, #0]
    6910:	7bfa      	ldrb	r2, [r7, #15]
    6912:	697b      	ldr	r3, [r7, #20]
    6914:	9300      	str	r3, [sp, #0]
    6916:	4613      	mov	r3, r2
    6918:	69ba      	ldr	r2, [r7, #24]
    691a:	6878      	ldr	r0, [r7, #4]
    691c:	f7ff ff7c 	bl	6818 <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    6920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6922:	3301      	adds	r3, #1
    6924:	627b      	str	r3, [r7, #36]	; 0x24
    6926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6928:	69fb      	ldr	r3, [r7, #28]
    692a:	429a      	cmp	r2, r3
    692c:	dbd1      	blt.n	68d2 <compile_global_nonlocal_stmt+0x62>
            }
        }
    }
}
    692e:	3728      	adds	r7, #40	; 0x28
    6930:	46bd      	mov	sp, r7
    6932:	bd80      	pop	{r7, pc}
    6934:	0001e774 	.word	0x0001e774

00006938 <compile_assert_stmt>:

STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6938:	b580      	push	{r7, lr}
    693a:	b084      	sub	sp, #16
    693c:	af00      	add	r7, sp, #0
    693e:	6078      	str	r0, [r7, #4]
    6940:	6039      	str	r1, [r7, #0]
    // with optimisations enabled we don't compile assertions
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    6942:	4b1c      	ldr	r3, [pc, #112]	; (69b4 <compile_assert_stmt+0x7c>)
    6944:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
    6948:	2b00      	cmp	r3, #0
    694a:	d12f      	bne.n	69ac <compile_assert_stmt+0x74>
        return;
    }

    uint l_end = comp_next_label(comp);
    694c:	6878      	ldr	r0, [r7, #4]
    694e:	f7fe fa3b 	bl	4dc8 <comp_next_label>
    6952:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns->nodes[0], true, l_end);
    6954:	683b      	ldr	r3, [r7, #0]
    6956:	6899      	ldr	r1, [r3, #8]
    6958:	68fb      	ldr	r3, [r7, #12]
    695a:	2201      	movs	r2, #1
    695c:	6878      	ldr	r0, [r7, #4]
    695e:	f7fe fbbd 	bl	50dc <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    6962:	687b      	ldr	r3, [r7, #4]
    6964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6966:	2201      	movs	r2, #1
    6968:	213c      	movs	r1, #60	; 0x3c
    696a:	4618      	mov	r0, r3
    696c:	f003 fd98 	bl	a4a0 <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    6970:	683b      	ldr	r3, [r7, #0]
    6972:	68db      	ldr	r3, [r3, #12]
    6974:	2b00      	cmp	r3, #0
    6976:	d00c      	beq.n	6992 <compile_assert_stmt+0x5a>
        // assertion message
        compile_node(comp, pns->nodes[1]);
    6978:	683b      	ldr	r3, [r7, #0]
    697a:	68db      	ldr	r3, [r3, #12]
    697c:	4619      	mov	r1, r3
    697e:	6878      	ldr	r0, [r7, #4]
    6980:	f002 f80c 	bl	899c <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    6984:	687b      	ldr	r3, [r7, #4]
    6986:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6988:	2300      	movs	r3, #0
    698a:	2200      	movs	r2, #0
    698c:	2101      	movs	r1, #1
    698e:	f004 f9a5 	bl	acdc <mp_emit_bc_call_function>
    }
    EMIT_ARG(raise_varargs, 1);
    6992:	687b      	ldr	r3, [r7, #4]
    6994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6996:	2101      	movs	r1, #1
    6998:	4618      	mov	r0, r3
    699a:	f004 f9df 	bl	ad5c <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    699e:	687b      	ldr	r3, [r7, #4]
    69a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69a2:	68f9      	ldr	r1, [r7, #12]
    69a4:	4618      	mov	r0, r3
    69a6:	f003 fc43 	bl	a230 <mp_emit_bc_label_assign>
    69aa:	e000      	b.n	69ae <compile_assert_stmt+0x76>
        return;
    69ac:	bf00      	nop
}
    69ae:	3710      	adds	r7, #16
    69b0:	46bd      	mov	sp, r7
    69b2:	bd80      	pop	{r7, pc}
    69b4:	20000a2c 	.word	0x20000a2c

000069b8 <compile_if_stmt>:

STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    69b8:	b580      	push	{r7, lr}
    69ba:	b08a      	sub	sp, #40	; 0x28
    69bc:	af00      	add	r7, sp, #0
    69be:	6078      	str	r0, [r7, #4]
    69c0:	6039      	str	r1, [r7, #0]
    uint l_end = comp_next_label(comp);
    69c2:	6878      	ldr	r0, [r7, #4]
    69c4:	f7fe fa00 	bl	4dc8 <comp_next_label>
    69c8:	6238      	str	r0, [r7, #32]

    // optimisation: don't emit anything when "if False"
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    69ca:	683b      	ldr	r3, [r7, #0]
    69cc:	689b      	ldr	r3, [r3, #8]
    69ce:	4618      	mov	r0, r3
    69d0:	f7fd f862 	bl	3a98 <mp_parse_node_is_const_false>
    69d4:	4603      	mov	r3, r0
    69d6:	f083 0301 	eor.w	r3, r3, #1
    69da:	b2db      	uxtb	r3, r3
    69dc:	2b00      	cmp	r3, #0
    69de:	d038      	beq.n	6a52 <compile_if_stmt+0x9a>
        uint l_fail = comp_next_label(comp);
    69e0:	6878      	ldr	r0, [r7, #4]
    69e2:	f7fe f9f1 	bl	4dc8 <comp_next_label>
    69e6:	61f8      	str	r0, [r7, #28]
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    69e8:	683b      	ldr	r3, [r7, #0]
    69ea:	6899      	ldr	r1, [r3, #8]
    69ec:	69fb      	ldr	r3, [r7, #28]
    69ee:	2200      	movs	r2, #0
    69f0:	6878      	ldr	r0, [r7, #4]
    69f2:	f7fe fb73 	bl	50dc <c_if_cond>

        compile_node(comp, pns->nodes[1]); // if block
    69f6:	683b      	ldr	r3, [r7, #0]
    69f8:	68db      	ldr	r3, [r3, #12]
    69fa:	4619      	mov	r1, r3
    69fc:	6878      	ldr	r0, [r7, #4]
    69fe:	f001 ffcd 	bl	899c <compile_node>

        // optimisation: skip everything else when "if True"
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    6a02:	683b      	ldr	r3, [r7, #0]
    6a04:	689b      	ldr	r3, [r3, #8]
    6a06:	4618      	mov	r0, r3
    6a08:	f7fd f862 	bl	3ad0 <mp_parse_node_is_const_true>
    6a0c:	4603      	mov	r3, r0
    6a0e:	2b00      	cmp	r3, #0
    6a10:	f040 809a 	bne.w	6b48 <compile_if_stmt+0x190>
            goto done;
        }

        if (
            // optimisation: don't jump over non-existent elif/else blocks
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6a14:	683b      	ldr	r3, [r7, #0]
    6a16:	691b      	ldr	r3, [r3, #16]
        if (
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d103      	bne.n	6a24 <compile_if_stmt+0x6c>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6a1c:	683b      	ldr	r3, [r7, #0]
    6a1e:	695b      	ldr	r3, [r3, #20]
    6a20:	2b00      	cmp	r3, #0
    6a22:	d010      	beq.n	6a46 <compile_if_stmt+0x8e>
            // optimisation: don't jump if last instruction was return
            && !EMIT(last_emit_was_return_value)
    6a24:	687b      	ldr	r3, [r7, #4]
    6a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a28:	4618      	mov	r0, r3
    6a2a:	f003 fb9d 	bl	a168 <mp_emit_bc_last_emit_was_return_value>
    6a2e:	4603      	mov	r3, r0
    6a30:	f083 0301 	eor.w	r3, r3, #1
    6a34:	b2db      	uxtb	r3, r3
    6a36:	2b00      	cmp	r3, #0
    6a38:	d005      	beq.n	6a46 <compile_if_stmt+0x8e>
            ) {
            // jump over elif/else blocks
            EMIT_ARG(jump, l_end);
    6a3a:	687b      	ldr	r3, [r7, #4]
    6a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a3e:	6a39      	ldr	r1, [r7, #32]
    6a40:	4618      	mov	r0, r3
    6a42:	f003 fe83 	bl	a74c <mp_emit_bc_jump>
        }

        EMIT_ARG(label_assign, l_fail);
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a4a:	69f9      	ldr	r1, [r7, #28]
    6a4c:	4618      	mov	r0, r3
    6a4e:	f003 fbef 	bl	a230 <mp_emit_bc_label_assign>
    }

    // compile elif blocks (if any)
    mp_parse_node_t *pn_elif;
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    6a52:	683b      	ldr	r3, [r7, #0]
    6a54:	3310      	adds	r3, #16
    6a56:	f107 020c 	add.w	r2, r7, #12
    6a5a:	216a      	movs	r1, #106	; 0x6a
    6a5c:	4618      	mov	r0, r3
    6a5e:	f7fd f89d 	bl	3b9c <mp_parse_node_extract_list>
    6a62:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < n_elif; i++) {
    6a64:	2300      	movs	r3, #0
    6a66:	627b      	str	r3, [r7, #36]	; 0x24
    6a68:	e063      	b.n	6b32 <compile_if_stmt+0x17a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    6a6a:	68fa      	ldr	r2, [r7, #12]
    6a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a6e:	009b      	lsls	r3, r3, #2
    6a70:	4413      	add	r3, r2
    6a72:	681b      	ldr	r3, [r3, #0]
    6a74:	2b00      	cmp	r3, #0
    6a76:	d011      	beq.n	6a9c <compile_if_stmt+0xe4>
    6a78:	68fa      	ldr	r2, [r7, #12]
    6a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a7c:	009b      	lsls	r3, r3, #2
    6a7e:	4413      	add	r3, r2
    6a80:	681b      	ldr	r3, [r3, #0]
    6a82:	f003 0303 	and.w	r3, r3, #3
    6a86:	2b00      	cmp	r3, #0
    6a88:	d108      	bne.n	6a9c <compile_if_stmt+0xe4>
    6a8a:	68fa      	ldr	r2, [r7, #12]
    6a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a8e:	009b      	lsls	r3, r3, #2
    6a90:	4413      	add	r3, r2
    6a92:	681b      	ldr	r3, [r3, #0]
    6a94:	685b      	ldr	r3, [r3, #4]
    6a96:	b2db      	uxtb	r3, r3
    6a98:	2b6b      	cmp	r3, #107	; 0x6b
    6a9a:	d006      	beq.n	6aaa <compile_if_stmt+0xf2>
    6a9c:	4b31      	ldr	r3, [pc, #196]	; (6b64 <compile_if_stmt+0x1ac>)
    6a9e:	4a32      	ldr	r2, [pc, #200]	; (6b68 <compile_if_stmt+0x1b0>)
    6aa0:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
    6aa4:	4831      	ldr	r0, [pc, #196]	; (6b6c <compile_if_stmt+0x1b4>)
    6aa6:	f014 fc79 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns_elif = (mp_parse_node_struct_t*)pn_elif[i];
    6aaa:	68fa      	ldr	r2, [r7, #12]
    6aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6aae:	009b      	lsls	r3, r3, #2
    6ab0:	4413      	add	r3, r2
    6ab2:	681b      	ldr	r3, [r3, #0]
    6ab4:	617b      	str	r3, [r7, #20]

        // optimisation: don't emit anything when "if False"
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    6ab6:	697b      	ldr	r3, [r7, #20]
    6ab8:	689b      	ldr	r3, [r3, #8]
    6aba:	4618      	mov	r0, r3
    6abc:	f7fc ffec 	bl	3a98 <mp_parse_node_is_const_false>
    6ac0:	4603      	mov	r3, r0
    6ac2:	f083 0301 	eor.w	r3, r3, #1
    6ac6:	b2db      	uxtb	r3, r3
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d02f      	beq.n	6b2c <compile_if_stmt+0x174>
            uint l_fail = comp_next_label(comp);
    6acc:	6878      	ldr	r0, [r7, #4]
    6ace:	f7fe f97b 	bl	4dc8 <comp_next_label>
    6ad2:	6138      	str	r0, [r7, #16]
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    6ad4:	697b      	ldr	r3, [r7, #20]
    6ad6:	6899      	ldr	r1, [r3, #8]
    6ad8:	693b      	ldr	r3, [r7, #16]
    6ada:	2200      	movs	r2, #0
    6adc:	6878      	ldr	r0, [r7, #4]
    6ade:	f7fe fafd 	bl	50dc <c_if_cond>

            compile_node(comp, pns_elif->nodes[1]); // elif block
    6ae2:	697b      	ldr	r3, [r7, #20]
    6ae4:	68db      	ldr	r3, [r3, #12]
    6ae6:	4619      	mov	r1, r3
    6ae8:	6878      	ldr	r0, [r7, #4]
    6aea:	f001 ff57 	bl	899c <compile_node>

            // optimisation: skip everything else when "elif True"
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    6aee:	697b      	ldr	r3, [r7, #20]
    6af0:	689b      	ldr	r3, [r3, #8]
    6af2:	4618      	mov	r0, r3
    6af4:	f7fc ffec 	bl	3ad0 <mp_parse_node_is_const_true>
    6af8:	4603      	mov	r3, r0
    6afa:	2b00      	cmp	r3, #0
    6afc:	d126      	bne.n	6b4c <compile_if_stmt+0x194>
                goto done;
            }

            // optimisation: don't jump if last instruction was return
            if (!EMIT(last_emit_was_return_value)) {
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b02:	4618      	mov	r0, r3
    6b04:	f003 fb30 	bl	a168 <mp_emit_bc_last_emit_was_return_value>
    6b08:	4603      	mov	r3, r0
    6b0a:	f083 0301 	eor.w	r3, r3, #1
    6b0e:	b2db      	uxtb	r3, r3
    6b10:	2b00      	cmp	r3, #0
    6b12:	d005      	beq.n	6b20 <compile_if_stmt+0x168>
                EMIT_ARG(jump, l_end);
    6b14:	687b      	ldr	r3, [r7, #4]
    6b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b18:	6a39      	ldr	r1, [r7, #32]
    6b1a:	4618      	mov	r0, r3
    6b1c:	f003 fe16 	bl	a74c <mp_emit_bc_jump>
            }
            EMIT_ARG(label_assign, l_fail);
    6b20:	687b      	ldr	r3, [r7, #4]
    6b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b24:	6939      	ldr	r1, [r7, #16]
    6b26:	4618      	mov	r0, r3
    6b28:	f003 fb82 	bl	a230 <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    6b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b2e:	3301      	adds	r3, #1
    6b30:	627b      	str	r3, [r7, #36]	; 0x24
    6b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6b34:	69bb      	ldr	r3, [r7, #24]
    6b36:	429a      	cmp	r2, r3
    6b38:	db97      	blt.n	6a6a <compile_if_stmt+0xb2>
        }
    }

    // compile else block
    compile_node(comp, pns->nodes[3]); // can be null
    6b3a:	683b      	ldr	r3, [r7, #0]
    6b3c:	695b      	ldr	r3, [r3, #20]
    6b3e:	4619      	mov	r1, r3
    6b40:	6878      	ldr	r0, [r7, #4]
    6b42:	f001 ff2b 	bl	899c <compile_node>
    6b46:	e002      	b.n	6b4e <compile_if_stmt+0x196>
            goto done;
    6b48:	bf00      	nop
    6b4a:	e000      	b.n	6b4e <compile_if_stmt+0x196>
                goto done;
    6b4c:	bf00      	nop

done:
    EMIT_ARG(label_assign, l_end);
    6b4e:	687b      	ldr	r3, [r7, #4]
    6b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b52:	6a39      	ldr	r1, [r7, #32]
    6b54:	4618      	mov	r0, r3
    6b56:	f003 fb6b 	bl	a230 <mp_emit_bc_label_assign>
}
    6b5a:	bf00      	nop
    6b5c:	3728      	adds	r7, #40	; 0x28
    6b5e:	46bd      	mov	sp, r7
    6b60:	bd80      	pop	{r7, pc}
    6b62:	bf00      	nop
    6b64:	0001e79c 	.word	0x0001e79c
    6b68:	0001ef6c 	.word	0x0001ef6c
    6b6c:	0001e310 	.word	0x0001e310

00006b70 <compile_while_stmt>:
#define END_BREAK_CONTINUE_BLOCK \
    comp->break_label = old_break_label; \
    comp->continue_label = old_continue_label; \
    comp->break_continue_except_level = old_break_continue_except_level;

STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6b70:	b580      	push	{r7, lr}
    6b72:	b088      	sub	sp, #32
    6b74:	af00      	add	r7, sp, #0
    6b76:	6078      	str	r0, [r7, #4]
    6b78:	6039      	str	r1, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6b7a:	687b      	ldr	r3, [r7, #4]
    6b7c:	8b1b      	ldrh	r3, [r3, #24]
    6b7e:	83fb      	strh	r3, [r7, #30]
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	8b5b      	ldrh	r3, [r3, #26]
    6b84:	83bb      	strh	r3, [r7, #28]
    6b86:	687b      	ldr	r3, [r7, #4]
    6b88:	8bdb      	ldrh	r3, [r3, #30]
    6b8a:	837b      	strh	r3, [r7, #26]
    6b8c:	6878      	ldr	r0, [r7, #4]
    6b8e:	f7fe f91b 	bl	4dc8 <comp_next_label>
    6b92:	6178      	str	r0, [r7, #20]
    6b94:	6878      	ldr	r0, [r7, #4]
    6b96:	f7fe f917 	bl	4dc8 <comp_next_label>
    6b9a:	6138      	str	r0, [r7, #16]
    6b9c:	697b      	ldr	r3, [r7, #20]
    6b9e:	b29a      	uxth	r2, r3
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	831a      	strh	r2, [r3, #24]
    6ba4:	693b      	ldr	r3, [r7, #16]
    6ba6:	b29a      	uxth	r2, r3
    6ba8:	687b      	ldr	r3, [r7, #4]
    6baa:	835a      	strh	r2, [r3, #26]
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	8b9a      	ldrh	r2, [r3, #28]
    6bb0:	687b      	ldr	r3, [r7, #4]
    6bb2:	83da      	strh	r2, [r3, #30]

    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    6bb4:	683b      	ldr	r3, [r7, #0]
    6bb6:	689b      	ldr	r3, [r3, #8]
    6bb8:	4618      	mov	r0, r3
    6bba:	f7fc ff6d 	bl	3a98 <mp_parse_node_is_const_false>
    6bbe:	4603      	mov	r3, r0
    6bc0:	f083 0301 	eor.w	r3, r3, #1
    6bc4:	b2db      	uxtb	r3, r3
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	d02d      	beq.n	6c26 <compile_while_stmt+0xb6>
        uint top_label = comp_next_label(comp);
    6bca:	6878      	ldr	r0, [r7, #4]
    6bcc:	f7fe f8fc 	bl	4dc8 <comp_next_label>
    6bd0:	60f8      	str	r0, [r7, #12]
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    6bd2:	683b      	ldr	r3, [r7, #0]
    6bd4:	689b      	ldr	r3, [r3, #8]
    6bd6:	4618      	mov	r0, r3
    6bd8:	f7fc ff7a 	bl	3ad0 <mp_parse_node_is_const_true>
    6bdc:	4603      	mov	r3, r0
    6bde:	f083 0301 	eor.w	r3, r3, #1
    6be2:	b2db      	uxtb	r3, r3
    6be4:	2b00      	cmp	r3, #0
    6be6:	d005      	beq.n	6bf4 <compile_while_stmt+0x84>
            EMIT_ARG(jump, continue_label);
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bec:	6939      	ldr	r1, [r7, #16]
    6bee:	4618      	mov	r0, r3
    6bf0:	f003 fdac 	bl	a74c <mp_emit_bc_jump>
        }
        EMIT_ARG(label_assign, top_label);
    6bf4:	687b      	ldr	r3, [r7, #4]
    6bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bf8:	68f9      	ldr	r1, [r7, #12]
    6bfa:	4618      	mov	r0, r3
    6bfc:	f003 fb18 	bl	a230 <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    6c00:	683b      	ldr	r3, [r7, #0]
    6c02:	68db      	ldr	r3, [r3, #12]
    6c04:	4619      	mov	r1, r3
    6c06:	6878      	ldr	r0, [r7, #4]
    6c08:	f001 fec8 	bl	899c <compile_node>
        EMIT_ARG(label_assign, continue_label);
    6c0c:	687b      	ldr	r3, [r7, #4]
    6c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c10:	6939      	ldr	r1, [r7, #16]
    6c12:	4618      	mov	r0, r3
    6c14:	f003 fb0c 	bl	a230 <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    6c18:	683b      	ldr	r3, [r7, #0]
    6c1a:	6899      	ldr	r1, [r3, #8]
    6c1c:	68fb      	ldr	r3, [r7, #12]
    6c1e:	2201      	movs	r2, #1
    6c20:	6878      	ldr	r0, [r7, #4]
    6c22:	f7fe fa5b 	bl	50dc <c_if_cond>
    }

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	8bfa      	ldrh	r2, [r7, #30]
    6c2a:	831a      	strh	r2, [r3, #24]
    6c2c:	687b      	ldr	r3, [r7, #4]
    6c2e:	8bba      	ldrh	r2, [r7, #28]
    6c30:	835a      	strh	r2, [r3, #26]
    6c32:	687b      	ldr	r3, [r7, #4]
    6c34:	8b7a      	ldrh	r2, [r7, #26]
    6c36:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[2]); // else
    6c38:	683b      	ldr	r3, [r7, #0]
    6c3a:	691b      	ldr	r3, [r3, #16]
    6c3c:	4619      	mov	r1, r3
    6c3e:	6878      	ldr	r0, [r7, #4]
    6c40:	f001 feac 	bl	899c <compile_node>

    EMIT_ARG(label_assign, break_label);
    6c44:	687b      	ldr	r3, [r7, #4]
    6c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c48:	6979      	ldr	r1, [r7, #20]
    6c4a:	4618      	mov	r0, r3
    6c4c:	f003 faf0 	bl	a230 <mp_emit_bc_label_assign>
}
    6c50:	bf00      	nop
    6c52:	3720      	adds	r7, #32
    6c54:	46bd      	mov	sp, r7
    6c56:	bd80      	pop	{r7, pc}

00006c58 <compile_for_stmt_optimised_range>:
//    (<step> is a constant for us, so no need to worry about it changing)
//
// If <end> is a small-int, then the stack during the for-loop contains just
// the current value of <var>.  Otherwise, the stack contains <end> then the
// current value of <var>.
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6c58:	b580      	push	{r7, lr}
    6c5a:	b08c      	sub	sp, #48	; 0x30
    6c5c:	af00      	add	r7, sp, #0
    6c5e:	60f8      	str	r0, [r7, #12]
    6c60:	60b9      	str	r1, [r7, #8]
    6c62:	607a      	str	r2, [r7, #4]
    6c64:	603b      	str	r3, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6c66:	68fb      	ldr	r3, [r7, #12]
    6c68:	8b1b      	ldrh	r3, [r3, #24]
    6c6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    6c6c:	68fb      	ldr	r3, [r7, #12]
    6c6e:	8b5b      	ldrh	r3, [r3, #26]
    6c70:	853b      	strh	r3, [r7, #40]	; 0x28
    6c72:	68fb      	ldr	r3, [r7, #12]
    6c74:	8bdb      	ldrh	r3, [r3, #30]
    6c76:	84fb      	strh	r3, [r7, #38]	; 0x26
    6c78:	68f8      	ldr	r0, [r7, #12]
    6c7a:	f7fe f8a5 	bl	4dc8 <comp_next_label>
    6c7e:	6238      	str	r0, [r7, #32]
    6c80:	68f8      	ldr	r0, [r7, #12]
    6c82:	f7fe f8a1 	bl	4dc8 <comp_next_label>
    6c86:	61f8      	str	r0, [r7, #28]
    6c88:	6a3b      	ldr	r3, [r7, #32]
    6c8a:	b29a      	uxth	r2, r3
    6c8c:	68fb      	ldr	r3, [r7, #12]
    6c8e:	831a      	strh	r2, [r3, #24]
    6c90:	69fb      	ldr	r3, [r7, #28]
    6c92:	b29a      	uxth	r2, r3
    6c94:	68fb      	ldr	r3, [r7, #12]
    6c96:	835a      	strh	r2, [r3, #26]
    6c98:	68fb      	ldr	r3, [r7, #12]
    6c9a:	8b9a      	ldrh	r2, [r3, #28]
    6c9c:	68fb      	ldr	r3, [r7, #12]
    6c9e:	83da      	strh	r2, [r3, #30]

    uint top_label = comp_next_label(comp);
    6ca0:	68f8      	ldr	r0, [r7, #12]
    6ca2:	f7fe f891 	bl	4dc8 <comp_next_label>
    6ca6:	61b8      	str	r0, [r7, #24]
    uint entry_label = comp_next_label(comp);
    6ca8:	68f8      	ldr	r0, [r7, #12]
    6caa:	f7fe f88d 	bl	4dc8 <comp_next_label>
    6cae:	6178      	str	r0, [r7, #20]

    // put the end value on the stack if it's not a small-int constant
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6cb0:	683b      	ldr	r3, [r7, #0]
    6cb2:	f003 0301 	and.w	r3, r3, #1
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	bf0c      	ite	eq
    6cba:	2301      	moveq	r3, #1
    6cbc:	2300      	movne	r3, #0
    6cbe:	74fb      	strb	r3, [r7, #19]
    if (end_on_stack) {
    6cc0:	7cfb      	ldrb	r3, [r7, #19]
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d003      	beq.n	6cce <compile_for_stmt_optimised_range+0x76>
        compile_node(comp, pn_end);
    6cc6:	6839      	ldr	r1, [r7, #0]
    6cc8:	68f8      	ldr	r0, [r7, #12]
    6cca:	f001 fe67 	bl	899c <compile_node>
    }

    // compile: start
    compile_node(comp, pn_start);
    6cce:	6879      	ldr	r1, [r7, #4]
    6cd0:	68f8      	ldr	r0, [r7, #12]
    6cd2:	f001 fe63 	bl	899c <compile_node>

    EMIT_ARG(jump, entry_label);
    6cd6:	68fb      	ldr	r3, [r7, #12]
    6cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cda:	6979      	ldr	r1, [r7, #20]
    6cdc:	4618      	mov	r0, r3
    6cde:	f003 fd35 	bl	a74c <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    6ce2:	68fb      	ldr	r3, [r7, #12]
    6ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ce6:	69b9      	ldr	r1, [r7, #24]
    6ce8:	4618      	mov	r0, r3
    6cea:	f003 faa1 	bl	a230 <mp_emit_bc_label_assign>

    // duplicate next value and store it to var
    EMIT(dup_top);
    6cee:	68fb      	ldr	r3, [r7, #12]
    6cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cf2:	4618      	mov	r0, r3
    6cf4:	f003 fcd8 	bl	a6a8 <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    6cf8:	2200      	movs	r2, #0
    6cfa:	68b9      	ldr	r1, [r7, #8]
    6cfc:	68f8      	ldr	r0, [r7, #12]
    6cfe:	f7fe fc8b 	bl	5618 <c_assign>

    // compile body
    compile_node(comp, pn_body);
    6d02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6d04:	68f8      	ldr	r0, [r7, #12]
    6d06:	f001 fe49 	bl	899c <compile_node>

    EMIT_ARG(label_assign, continue_label);
    6d0a:	68fb      	ldr	r3, [r7, #12]
    6d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d0e:	69f9      	ldr	r1, [r7, #28]
    6d10:	4618      	mov	r0, r3
    6d12:	f003 fa8d 	bl	a230 <mp_emit_bc_label_assign>

    // compile: var + step
    compile_node(comp, pn_step);
    6d16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    6d18:	68f8      	ldr	r0, [r7, #12]
    6d1a:	f001 fe3f 	bl	899c <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    6d1e:	68fb      	ldr	r3, [r7, #12]
    6d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d22:	210e      	movs	r1, #14
    6d24:	4618      	mov	r0, r3
    6d26:	f003 fe6f 	bl	aa08 <mp_emit_bc_binary_op>

    EMIT_ARG(label_assign, entry_label);
    6d2a:	68fb      	ldr	r3, [r7, #12]
    6d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d2e:	6979      	ldr	r1, [r7, #20]
    6d30:	4618      	mov	r0, r3
    6d32:	f003 fa7d 	bl	a230 <mp_emit_bc_label_assign>

    // compile: if var <cond> end: goto top
    if (end_on_stack) {
    6d36:	7cfb      	ldrb	r3, [r7, #19]
    6d38:	2b00      	cmp	r3, #0
    6d3a:	d00a      	beq.n	6d52 <compile_for_stmt_optimised_range+0xfa>
        EMIT(dup_top_two);
    6d3c:	68fb      	ldr	r3, [r7, #12]
    6d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d40:	4618      	mov	r0, r3
    6d42:	f003 fcc1 	bl	a6c8 <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    6d46:	68fb      	ldr	r3, [r7, #12]
    6d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d4a:	4618      	mov	r0, r3
    6d4c:	f003 fcde 	bl	a70c <mp_emit_bc_rot_two>
    6d50:	e008      	b.n	6d64 <compile_for_stmt_optimised_range+0x10c>
    } else {
        EMIT(dup_top);
    6d52:	68fb      	ldr	r3, [r7, #12]
    6d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d56:	4618      	mov	r0, r3
    6d58:	f003 fca6 	bl	a6a8 <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    6d5c:	6839      	ldr	r1, [r7, #0]
    6d5e:	68f8      	ldr	r0, [r7, #12]
    6d60:	f001 fe1c 	bl	899c <compile_node>
    }
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    6d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d66:	f003 0301 	and.w	r3, r3, #1
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	d106      	bne.n	6d7c <compile_for_stmt_optimised_range+0x124>
    6d6e:	4b38      	ldr	r3, [pc, #224]	; (6e50 <compile_for_stmt_optimised_range+0x1f8>)
    6d70:	4a38      	ldr	r2, [pc, #224]	; (6e54 <compile_for_stmt_optimised_range+0x1fc>)
    6d72:	f240 516c 	movw	r1, #1388	; 0x56c
    6d76:	4838      	ldr	r0, [pc, #224]	; (6e58 <compile_for_stmt_optimised_range+0x200>)
    6d78:	f014 fb10 	bl	1b39c <__assert_func>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    6d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d7e:	105b      	asrs	r3, r3, #1
    6d80:	2b00      	cmp	r3, #0
    6d82:	db06      	blt.n	6d92 <compile_for_stmt_optimised_range+0x13a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    6d84:	68fb      	ldr	r3, [r7, #12]
    6d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d88:	2100      	movs	r1, #0
    6d8a:	4618      	mov	r0, r3
    6d8c:	f003 fe3c 	bl	aa08 <mp_emit_bc_binary_op>
    6d90:	e005      	b.n	6d9e <compile_for_stmt_optimised_range+0x146>
    } else {
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    6d92:	68fb      	ldr	r3, [r7, #12]
    6d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d96:	2101      	movs	r1, #1
    6d98:	4618      	mov	r0, r3
    6d9a:	f003 fe35 	bl	aa08 <mp_emit_bc_binary_op>
    }
    EMIT_ARG(pop_jump_if, true, top_label);
    6d9e:	68fb      	ldr	r3, [r7, #12]
    6da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6da2:	69ba      	ldr	r2, [r7, #24]
    6da4:	2101      	movs	r1, #1
    6da6:	4618      	mov	r0, r3
    6da8:	f003 fce2 	bl	a770 <mp_emit_bc_pop_jump_if>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6dac:	68fb      	ldr	r3, [r7, #12]
    6dae:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    6db0:	831a      	strh	r2, [r3, #24]
    6db2:	68fb      	ldr	r3, [r7, #12]
    6db4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6db6:	835a      	strh	r2, [r3, #26]
    6db8:	68fb      	ldr	r3, [r7, #12]
    6dba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6dbc:	83da      	strh	r2, [r3, #30]

    // Compile the else block.  We must pop the iterator variables before
    // executing the else code because it may contain break/continue statements.
    uint end_label = 0;
    6dbe:	2300      	movs	r3, #0
    6dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d022      	beq.n	6e0e <compile_for_stmt_optimised_range+0x1b6>
        // discard final value of "var", and possible "end" value
        EMIT(pop_top);
    6dc8:	68fb      	ldr	r3, [r7, #12]
    6dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dcc:	4618      	mov	r0, r3
    6dce:	f003 fc8b 	bl	a6e8 <mp_emit_bc_pop_top>
        if (end_on_stack) {
    6dd2:	7cfb      	ldrb	r3, [r7, #19]
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	d004      	beq.n	6de2 <compile_for_stmt_optimised_range+0x18a>
            EMIT(pop_top);
    6dd8:	68fb      	ldr	r3, [r7, #12]
    6dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ddc:	4618      	mov	r0, r3
    6dde:	f003 fc83 	bl	a6e8 <mp_emit_bc_pop_top>
        }
        compile_node(comp, pn_else);
    6de2:	6c39      	ldr	r1, [r7, #64]	; 0x40
    6de4:	68f8      	ldr	r0, [r7, #12]
    6de6:	f001 fdd9 	bl	899c <compile_node>
        end_label = comp_next_label(comp);
    6dea:	68f8      	ldr	r0, [r7, #12]
    6dec:	f7fd ffec 	bl	4dc8 <comp_next_label>
    6df0:	62f8      	str	r0, [r7, #44]	; 0x2c
        EMIT_ARG(jump, end_label);
    6df2:	68fb      	ldr	r3, [r7, #12]
    6df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6df8:	4618      	mov	r0, r3
    6dfa:	f003 fca7 	bl	a74c <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    6dfe:	68fb      	ldr	r3, [r7, #12]
    6e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6e02:	7cfb      	ldrb	r3, [r7, #19]
    6e04:	3301      	adds	r3, #1
    6e06:	4619      	mov	r1, r3
    6e08:	4610      	mov	r0, r2
    6e0a:	f003 f9bf 	bl	a18c <mp_emit_bc_adjust_stack_size>
    }

    EMIT_ARG(label_assign, break_label);
    6e0e:	68fb      	ldr	r3, [r7, #12]
    6e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e12:	6a39      	ldr	r1, [r7, #32]
    6e14:	4618      	mov	r0, r3
    6e16:	f003 fa0b 	bl	a230 <mp_emit_bc_label_assign>

    // discard final value of var that failed the loop condition
    EMIT(pop_top);
    6e1a:	68fb      	ldr	r3, [r7, #12]
    6e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e1e:	4618      	mov	r0, r3
    6e20:	f003 fc62 	bl	a6e8 <mp_emit_bc_pop_top>

    // discard <end> value if it's on the stack
    if (end_on_stack) {
    6e24:	7cfb      	ldrb	r3, [r7, #19]
    6e26:	2b00      	cmp	r3, #0
    6e28:	d004      	beq.n	6e34 <compile_for_stmt_optimised_range+0x1dc>
        EMIT(pop_top);
    6e2a:	68fb      	ldr	r3, [r7, #12]
    6e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e2e:	4618      	mov	r0, r3
    6e30:	f003 fc5a 	bl	a6e8 <mp_emit_bc_pop_top>
    }

    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6e36:	2b00      	cmp	r3, #0
    6e38:	d005      	beq.n	6e46 <compile_for_stmt_optimised_range+0x1ee>
        EMIT_ARG(label_assign, end_label);
    6e3a:	68fb      	ldr	r3, [r7, #12]
    6e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6e40:	4618      	mov	r0, r3
    6e42:	f003 f9f5 	bl	a230 <mp_emit_bc_label_assign>
    }
}
    6e46:	bf00      	nop
    6e48:	3730      	adds	r7, #48	; 0x30
    6e4a:	46bd      	mov	sp, r7
    6e4c:	bd80      	pop	{r7, pc}
    6e4e:	bf00      	nop
    6e50:	0001e7d8 	.word	0x0001e7d8
    6e54:	0001ef7c 	.word	0x0001ef7c
    6e58:	0001e310 	.word	0x0001e310

00006e5c <compile_for_stmt>:

STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6e5c:	b580      	push	{r7, lr}
    6e5e:	b096      	sub	sp, #88	; 0x58
    6e60:	af04      	add	r7, sp, #16
    6e62:	6078      	str	r0, [r7, #4]
    6e64:	6039      	str	r1, [r7, #0]
    // this bit optimises: for <x> in range(...), turning it into an explicitly incremented variable
    // this is actually slower, but uses no heap memory
    // for viper it will be much, much faster
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    6e66:	683b      	ldr	r3, [r7, #0]
    6e68:	689b      	ldr	r3, [r3, #8]
    6e6a:	f003 030f 	and.w	r3, r3, #15
    6e6e:	2b02      	cmp	r3, #2
    6e70:	f040 80c1 	bne.w	6ff6 <compile_for_stmt+0x19a>
    6e74:	683b      	ldr	r3, [r7, #0]
    6e76:	68db      	ldr	r3, [r3, #12]
    6e78:	2b00      	cmp	r3, #0
    6e7a:	f000 80bc 	beq.w	6ff6 <compile_for_stmt+0x19a>
    6e7e:	683b      	ldr	r3, [r7, #0]
    6e80:	68db      	ldr	r3, [r3, #12]
    6e82:	f003 0303 	and.w	r3, r3, #3
    6e86:	2b00      	cmp	r3, #0
    6e88:	f040 80b5 	bne.w	6ff6 <compile_for_stmt+0x19a>
    6e8c:	683b      	ldr	r3, [r7, #0]
    6e8e:	68db      	ldr	r3, [r3, #12]
    6e90:	685b      	ldr	r3, [r3, #4]
    6e92:	b2db      	uxtb	r3, r3
    6e94:	2b29      	cmp	r3, #41	; 0x29
    6e96:	f040 80ae 	bne.w	6ff6 <compile_for_stmt+0x19a>
        mp_parse_node_struct_t *pns_it = (mp_parse_node_struct_t*)pns->nodes[1];
    6e9a:	683b      	ldr	r3, [r7, #0]
    6e9c:	68db      	ldr	r3, [r3, #12]
    6e9e:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    6ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ea2:	689b      	ldr	r3, [r3, #8]
    6ea4:	f003 030f 	and.w	r3, r3, #15
    6ea8:	2b02      	cmp	r3, #2
    6eaa:	f040 80a4 	bne.w	6ff6 <compile_for_stmt+0x19a>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    6eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6eb0:	689b      	ldr	r3, [r3, #8]
    6eb2:	091b      	lsrs	r3, r3, #4
    6eb4:	2bbe      	cmp	r3, #190	; 0xbe
    6eb6:	f040 809e 	bne.w	6ff6 <compile_for_stmt+0x19a>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    6eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ebc:	68db      	ldr	r3, [r3, #12]
    6ebe:	685b      	ldr	r3, [r3, #4]
    6ec0:	b2db      	uxtb	r3, r3
    6ec2:	2b2d      	cmp	r3, #45	; 0x2d
    6ec4:	f040 8097 	bne.w	6ff6 <compile_for_stmt+0x19a>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    6ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6eca:	68db      	ldr	r3, [r3, #12]
    6ecc:	689b      	ldr	r3, [r3, #8]
    6ece:	613b      	str	r3, [r7, #16]
            mp_parse_node_t *args;
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    6ed0:	f107 020c 	add.w	r2, r7, #12
    6ed4:	f107 0310 	add.w	r3, r7, #16
    6ed8:	2197      	movs	r1, #151	; 0x97
    6eda:	4618      	mov	r0, r3
    6edc:	f7fc fe5e 	bl	3b9c <mp_parse_node_extract_list>
    6ee0:	6338      	str	r0, [r7, #48]	; 0x30
            mp_parse_node_t pn_range_start;
            mp_parse_node_t pn_range_end;
            mp_parse_node_t pn_range_step;
            bool optimize = false;
    6ee2:	2300      	movs	r3, #0
    6ee4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            if (1 <= n_args && n_args <= 3) {
    6ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6eea:	2b00      	cmp	r3, #0
    6eec:	dd6f      	ble.n	6fce <compile_for_stmt+0x172>
    6eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6ef0:	2b03      	cmp	r3, #3
    6ef2:	dc6c      	bgt.n	6fce <compile_for_stmt+0x172>
                optimize = true;
    6ef4:	2301      	movs	r3, #1
    6ef6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (n_args == 1) {
    6efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6efc:	2b01      	cmp	r3, #1
    6efe:	d10b      	bne.n	6f18 <compile_for_stmt+0xbc>
                    pn_range_start = mp_parse_node_new_small_int(0);
    6f00:	2000      	movs	r0, #0
    6f02:	f7fd ff11 	bl	4d28 <mp_parse_node_new_small_int>
    6f06:	6478      	str	r0, [r7, #68]	; 0x44
                    pn_range_end = args[0];
    6f08:	68fb      	ldr	r3, [r7, #12]
    6f0a:	681b      	ldr	r3, [r3, #0]
    6f0c:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6f0e:	2001      	movs	r0, #1
    6f10:	f7fd ff0a 	bl	4d28 <mp_parse_node_new_small_int>
    6f14:	63f8      	str	r0, [r7, #60]	; 0x3c
    6f16:	e022      	b.n	6f5e <compile_for_stmt+0x102>
                } else if (n_args == 2) {
    6f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f1a:	2b02      	cmp	r3, #2
    6f1c:	d10a      	bne.n	6f34 <compile_for_stmt+0xd8>
                    pn_range_start = args[0];
    6f1e:	68fb      	ldr	r3, [r7, #12]
    6f20:	681b      	ldr	r3, [r3, #0]
    6f22:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6f24:	68fb      	ldr	r3, [r7, #12]
    6f26:	685b      	ldr	r3, [r3, #4]
    6f28:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6f2a:	2001      	movs	r0, #1
    6f2c:	f7fd fefc 	bl	4d28 <mp_parse_node_new_small_int>
    6f30:	63f8      	str	r0, [r7, #60]	; 0x3c
    6f32:	e014      	b.n	6f5e <compile_for_stmt+0x102>
                } else {
                    pn_range_start = args[0];
    6f34:	68fb      	ldr	r3, [r7, #12]
    6f36:	681b      	ldr	r3, [r3, #0]
    6f38:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6f3a:	68fb      	ldr	r3, [r7, #12]
    6f3c:	685b      	ldr	r3, [r3, #4]
    6f3e:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = args[2];
    6f40:	68fb      	ldr	r3, [r7, #12]
    6f42:	689b      	ldr	r3, [r3, #8]
    6f44:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // the step must be a non-zero constant integer to do the optimisation
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    6f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f48:	f003 0301 	and.w	r3, r3, #1
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d003      	beq.n	6f58 <compile_for_stmt+0xfc>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    6f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f52:	105b      	asrs	r3, r3, #1
    6f54:	2b00      	cmp	r3, #0
    6f56:	d102      	bne.n	6f5e <compile_for_stmt+0x102>
                        optimize = false;
    6f58:	2300      	movs	r3, #0
    6f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                // arguments must be able to be compiled as standard expressions
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    6f5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6f62:	2b00      	cmp	r3, #0
    6f64:	d017      	beq.n	6f96 <compile_for_stmt+0x13a>
    6f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d014      	beq.n	6f96 <compile_for_stmt+0x13a>
    6f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f6e:	f003 0303 	and.w	r3, r3, #3
    6f72:	2b00      	cmp	r3, #0
    6f74:	d10f      	bne.n	6f96 <compile_for_stmt+0x13a>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    6f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f78:	685b      	ldr	r3, [r3, #4]
    6f7a:	b2db      	uxtb	r3, r3
    6f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f80:	2b99      	cmp	r3, #153	; 0x99
    6f82:	d005      	beq.n	6f90 <compile_for_stmt+0x134>
    6f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f86:	2b9a      	cmp	r3, #154	; 0x9a
    6f88:	d002      	beq.n	6f90 <compile_for_stmt+0x134>
    6f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f8c:	2b9b      	cmp	r3, #155	; 0x9b
    6f8e:	d102      	bne.n	6f96 <compile_for_stmt+0x13a>
                        optimize = false;
    6f90:	2300      	movs	r3, #0
    6f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    6f96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d017      	beq.n	6fce <compile_for_stmt+0x172>
    6f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fa0:	2b00      	cmp	r3, #0
    6fa2:	d014      	beq.n	6fce <compile_for_stmt+0x172>
    6fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fa6:	f003 0303 	and.w	r3, r3, #3
    6faa:	2b00      	cmp	r3, #0
    6fac:	d10f      	bne.n	6fce <compile_for_stmt+0x172>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    6fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fb0:	685b      	ldr	r3, [r3, #4]
    6fb2:	b2db      	uxtb	r3, r3
    6fb4:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fb8:	2b99      	cmp	r3, #153	; 0x99
    6fba:	d005      	beq.n	6fc8 <compile_for_stmt+0x16c>
    6fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fbe:	2b9a      	cmp	r3, #154	; 0x9a
    6fc0:	d002      	beq.n	6fc8 <compile_for_stmt+0x16c>
    6fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fc4:	2b9b      	cmp	r3, #155	; 0x9b
    6fc6:	d102      	bne.n	6fce <compile_for_stmt+0x172>
                        optimize = false;
    6fc8:	2300      	movs	r3, #0
    6fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
            }
            if (optimize) {
    6fce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	d00f      	beq.n	6ff6 <compile_for_stmt+0x19a>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    6fd6:	683b      	ldr	r3, [r7, #0]
    6fd8:	6899      	ldr	r1, [r3, #8]
    6fda:	683b      	ldr	r3, [r7, #0]
    6fdc:	691b      	ldr	r3, [r3, #16]
    6fde:	683a      	ldr	r2, [r7, #0]
    6fe0:	6952      	ldr	r2, [r2, #20]
    6fe2:	9202      	str	r2, [sp, #8]
    6fe4:	9301      	str	r3, [sp, #4]
    6fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6fe8:	9300      	str	r3, [sp, #0]
    6fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6fee:	6878      	ldr	r0, [r7, #4]
    6ff0:	f7ff fe32 	bl	6c58 <compile_for_stmt_optimised_range>
    6ff4:	e07f      	b.n	70f6 <compile_for_stmt+0x29a>
                return;
            }
        }
    }

    START_BREAK_CONTINUE_BLOCK
    6ff6:	687b      	ldr	r3, [r7, #4]
    6ff8:	8b1b      	ldrh	r3, [r3, #24]
    6ffa:	84fb      	strh	r3, [r7, #38]	; 0x26
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	8b5b      	ldrh	r3, [r3, #26]
    7000:	84bb      	strh	r3, [r7, #36]	; 0x24
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	8bdb      	ldrh	r3, [r3, #30]
    7006:	847b      	strh	r3, [r7, #34]	; 0x22
    7008:	6878      	ldr	r0, [r7, #4]
    700a:	f7fd fedd 	bl	4dc8 <comp_next_label>
    700e:	61f8      	str	r0, [r7, #28]
    7010:	6878      	ldr	r0, [r7, #4]
    7012:	f7fd fed9 	bl	4dc8 <comp_next_label>
    7016:	61b8      	str	r0, [r7, #24]
    7018:	69fb      	ldr	r3, [r7, #28]
    701a:	b29a      	uxth	r2, r3
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	831a      	strh	r2, [r3, #24]
    7020:	69bb      	ldr	r3, [r7, #24]
    7022:	b29a      	uxth	r2, r3
    7024:	687b      	ldr	r3, [r7, #4]
    7026:	835a      	strh	r2, [r3, #26]
    7028:	687b      	ldr	r3, [r7, #4]
    702a:	8b9a      	ldrh	r2, [r3, #28]
    702c:	687b      	ldr	r3, [r7, #4]
    702e:	83da      	strh	r2, [r3, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	8b1b      	ldrh	r3, [r3, #24]
    7034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    7038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    703c:	b29a      	uxth	r2, r3
    703e:	687b      	ldr	r3, [r7, #4]
    7040:	831a      	strh	r2, [r3, #24]

    uint pop_label = comp_next_label(comp);
    7042:	6878      	ldr	r0, [r7, #4]
    7044:	f7fd fec0 	bl	4dc8 <comp_next_label>
    7048:	6178      	str	r0, [r7, #20]

    compile_node(comp, pns->nodes[1]); // iterator
    704a:	683b      	ldr	r3, [r7, #0]
    704c:	68db      	ldr	r3, [r3, #12]
    704e:	4619      	mov	r1, r3
    7050:	6878      	ldr	r0, [r7, #4]
    7052:	f001 fca3 	bl	899c <compile_node>
    EMIT_ARG(get_iter, true);
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    705a:	2101      	movs	r1, #1
    705c:	4618      	mov	r0, r3
    705e:	f003 fc5f 	bl	a920 <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    7062:	687b      	ldr	r3, [r7, #4]
    7064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7066:	69b9      	ldr	r1, [r7, #24]
    7068:	4618      	mov	r0, r3
    706a:	f003 f8e1 	bl	a230 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    706e:	687b      	ldr	r3, [r7, #4]
    7070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7072:	6979      	ldr	r1, [r7, #20]
    7074:	4618      	mov	r0, r3
    7076:	f003 fc71 	bl	a95c <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    707a:	683b      	ldr	r3, [r7, #0]
    707c:	689b      	ldr	r3, [r3, #8]
    707e:	2200      	movs	r2, #0
    7080:	4619      	mov	r1, r3
    7082:	6878      	ldr	r0, [r7, #4]
    7084:	f7fe fac8 	bl	5618 <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    7088:	683b      	ldr	r3, [r7, #0]
    708a:	691b      	ldr	r3, [r3, #16]
    708c:	4619      	mov	r1, r3
    708e:	6878      	ldr	r0, [r7, #4]
    7090:	f001 fc84 	bl	899c <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7098:	4618      	mov	r0, r3
    709a:	f003 f865 	bl	a168 <mp_emit_bc_last_emit_was_return_value>
    709e:	4603      	mov	r3, r0
    70a0:	f083 0301 	eor.w	r3, r3, #1
    70a4:	b2db      	uxtb	r3, r3
    70a6:	2b00      	cmp	r3, #0
    70a8:	d005      	beq.n	70b6 <compile_for_stmt+0x25a>
        EMIT_ARG(jump, continue_label);
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ae:	69b9      	ldr	r1, [r7, #24]
    70b0:	4618      	mov	r0, r3
    70b2:	f003 fb4b 	bl	a74c <mp_emit_bc_jump>
    }
    EMIT_ARG(label_assign, pop_label);
    70b6:	687b      	ldr	r3, [r7, #4]
    70b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ba:	6979      	ldr	r1, [r7, #20]
    70bc:	4618      	mov	r0, r3
    70be:	f003 f8b7 	bl	a230 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70c6:	4618      	mov	r0, r3
    70c8:	f003 fc5a 	bl	a980 <mp_emit_bc_for_iter_end>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    70cc:	687b      	ldr	r3, [r7, #4]
    70ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    70d0:	831a      	strh	r2, [r3, #24]
    70d2:	687b      	ldr	r3, [r7, #4]
    70d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    70d6:	835a      	strh	r2, [r3, #26]
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    70dc:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[3]); // else (may be empty)
    70de:	683b      	ldr	r3, [r7, #0]
    70e0:	695b      	ldr	r3, [r3, #20]
    70e2:	4619      	mov	r1, r3
    70e4:	6878      	ldr	r0, [r7, #4]
    70e6:	f001 fc59 	bl	899c <compile_node>

    EMIT_ARG(label_assign, break_label);
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ee:	69f9      	ldr	r1, [r7, #28]
    70f0:	4618      	mov	r0, r3
    70f2:	f003 f89d 	bl	a230 <mp_emit_bc_label_assign>
}
    70f6:	3748      	adds	r7, #72	; 0x48
    70f8:	46bd      	mov	sp, r7
    70fa:	bd80      	pop	{r7, pc}

000070fc <compile_try_except>:

STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    70fc:	b580      	push	{r7, lr}
    70fe:	b08e      	sub	sp, #56	; 0x38
    7100:	af00      	add	r7, sp, #0
    7102:	60f8      	str	r0, [r7, #12]
    7104:	60b9      	str	r1, [r7, #8]
    7106:	607a      	str	r2, [r7, #4]
    7108:	603b      	str	r3, [r7, #0]
    // setup code
    uint l1 = comp_next_label(comp);
    710a:	68f8      	ldr	r0, [r7, #12]
    710c:	f7fd fe5c 	bl	4dc8 <comp_next_label>
    7110:	6278      	str	r0, [r7, #36]	; 0x24
    uint success_label = comp_next_label(comp);
    7112:	68f8      	ldr	r0, [r7, #12]
    7114:	f7fd fe58 	bl	4dc8 <comp_next_label>
    7118:	6238      	str	r0, [r7, #32]

    EMIT_ARG(setup_block, l1, MP_EMIT_SETUP_BLOCK_EXCEPT);
    711a:	68fb      	ldr	r3, [r7, #12]
    711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    711e:	2202      	movs	r2, #2
    7120:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7122:	4618      	mov	r0, r3
    7124:	f003 fba8 	bl	a878 <mp_emit_bc_setup_block>
    compile_increase_except_level(comp);
    7128:	68f8      	ldr	r0, [r7, #12]
    712a:	f7fd fe5d 	bl	4de8 <compile_increase_except_level>

    compile_node(comp, pn_body); // body
    712e:	68b9      	ldr	r1, [r7, #8]
    7130:	68f8      	ldr	r0, [r7, #12]
    7132:	f001 fc33 	bl	899c <compile_node>
    EMIT(pop_block);
    7136:	68fb      	ldr	r3, [r7, #12]
    7138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    713a:	4618      	mov	r0, r3
    713c:	f003 fc2e 	bl	a99c <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    7140:	68fb      	ldr	r3, [r7, #12]
    7142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7144:	6a39      	ldr	r1, [r7, #32]
    7146:	4618      	mov	r0, r3
    7148:	f003 fb00 	bl	a74c <mp_emit_bc_jump>

    EMIT_ARG(label_assign, l1); // start of exception handler
    714c:	68fb      	ldr	r3, [r7, #12]
    714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7150:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7152:	4618      	mov	r0, r3
    7154:	f003 f86c 	bl	a230 <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    7158:	68fb      	ldr	r3, [r7, #12]
    715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    715c:	4618      	mov	r0, r3
    715e:	f003 fe43 	bl	ade8 <mp_emit_bc_start_except_handler>

    // at this point the top of the stack contains the exception instance that was raised

    uint l2 = comp_next_label(comp);
    7162:	68f8      	ldr	r0, [r7, #12]
    7164:	f7fd fe30 	bl	4dc8 <comp_next_label>
    7168:	61f8      	str	r0, [r7, #28]

    for (int i = 0; i < n_except; i++) {
    716a:	2300      	movs	r3, #0
    716c:	637b      	str	r3, [r7, #52]	; 0x34
    716e:	e0de      	b.n	732e <compile_try_except+0x232>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    7170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7172:	009b      	lsls	r3, r3, #2
    7174:	683a      	ldr	r2, [r7, #0]
    7176:	4413      	add	r3, r2
    7178:	681b      	ldr	r3, [r3, #0]
    717a:	2b00      	cmp	r3, #0
    717c:	d011      	beq.n	71a2 <compile_try_except+0xa6>
    717e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7180:	009b      	lsls	r3, r3, #2
    7182:	683a      	ldr	r2, [r7, #0]
    7184:	4413      	add	r3, r2
    7186:	681b      	ldr	r3, [r3, #0]
    7188:	f003 0303 	and.w	r3, r3, #3
    718c:	2b00      	cmp	r3, #0
    718e:	d108      	bne.n	71a2 <compile_try_except+0xa6>
    7190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7192:	009b      	lsls	r3, r3, #2
    7194:	683a      	ldr	r2, [r7, #0]
    7196:	4413      	add	r3, r2
    7198:	681b      	ldr	r3, [r3, #0]
    719a:	685b      	ldr	r3, [r3, #4]
    719c:	b2db      	uxtb	r3, r3
    719e:	2b6e      	cmp	r3, #110	; 0x6e
    71a0:	d006      	beq.n	71b0 <compile_try_except+0xb4>
    71a2:	4b75      	ldr	r3, [pc, #468]	; (7378 <compile_try_except+0x27c>)
    71a4:	4a75      	ldr	r2, [pc, #468]	; (737c <compile_try_except+0x280>)
    71a6:	f240 51fb 	movw	r1, #1531	; 0x5fb
    71aa:	4875      	ldr	r0, [pc, #468]	; (7380 <compile_try_except+0x284>)
    71ac:	f014 f8f6 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns_except = (mp_parse_node_struct_t*)pn_excepts[i];
    71b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71b2:	009b      	lsls	r3, r3, #2
    71b4:	683a      	ldr	r2, [r7, #0]
    71b6:	4413      	add	r3, r2
    71b8:	681b      	ldr	r3, [r3, #0]
    71ba:	61bb      	str	r3, [r7, #24]

        qstr qstr_exception_local = 0;
    71bc:	2300      	movs	r3, #0
    71be:	633b      	str	r3, [r7, #48]	; 0x30
        uint end_finally_label = comp_next_label(comp);
    71c0:	68f8      	ldr	r0, [r7, #12]
    71c2:	f7fd fe01 	bl	4dc8 <comp_next_label>
    71c6:	6178      	str	r0, [r7, #20]

        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    71c8:	69bb      	ldr	r3, [r7, #24]
    71ca:	689b      	ldr	r3, [r3, #8]
    71cc:	2b00      	cmp	r3, #0
    71ce:	d112      	bne.n	71f6 <compile_try_except+0xfa>
            // this is a catch all exception handler
            if (i + 1 != n_except) {
    71d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71d2:	1c5a      	adds	r2, r3, #1
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	429a      	cmp	r2, r3
    71d8:	d03c      	beq.n	7254 <compile_try_except+0x158>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    71da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71dc:	009b      	lsls	r3, r3, #2
    71de:	683a      	ldr	r2, [r7, #0]
    71e0:	4413      	add	r3, r2
    71e2:	681b      	ldr	r3, [r3, #0]
    71e4:	4a67      	ldr	r2, [pc, #412]	; (7384 <compile_try_except+0x288>)
    71e6:	4619      	mov	r1, r3
    71e8:	68f8      	ldr	r0, [r7, #12]
    71ea:	f7fd fdd1 	bl	4d90 <compile_syntax_error>
                compile_decrease_except_level(comp);
    71ee:	68f8      	ldr	r0, [r7, #12]
    71f0:	f7fd fe16 	bl	4e20 <compile_decrease_except_level>
                return;
    71f4:	e0bd      	b.n	7372 <compile_try_except+0x276>
            }
        } else {
            // this exception handler requires a match to a certain type of exception
            mp_parse_node_t pns_exception_expr = pns_except->nodes[0];
    71f6:	69bb      	ldr	r3, [r7, #24]
    71f8:	689b      	ldr	r3, [r3, #8]
    71fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    71fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71fe:	2b00      	cmp	r3, #0
    7200:	d012      	beq.n	7228 <compile_try_except+0x12c>
    7202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7204:	f003 0303 	and.w	r3, r3, #3
    7208:	2b00      	cmp	r3, #0
    720a:	d10d      	bne.n	7228 <compile_try_except+0x12c>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    720e:	613b      	str	r3, [r7, #16]
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    7210:	693b      	ldr	r3, [r7, #16]
    7212:	685b      	ldr	r3, [r3, #4]
    7214:	b2db      	uxtb	r3, r3
    7216:	2b6f      	cmp	r3, #111	; 0x6f
    7218:	d106      	bne.n	7228 <compile_try_except+0x12c>
                    // handler binds the exception to a local
                    pns_exception_expr = pns3->nodes[0];
    721a:	693b      	ldr	r3, [r7, #16]
    721c:	689b      	ldr	r3, [r3, #8]
    721e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    7220:	693b      	ldr	r3, [r7, #16]
    7222:	68db      	ldr	r3, [r3, #12]
    7224:	091b      	lsrs	r3, r3, #4
    7226:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
            EMIT(dup_top);
    7228:	68fb      	ldr	r3, [r7, #12]
    722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    722c:	4618      	mov	r0, r3
    722e:	f003 fa3b 	bl	a6a8 <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    7232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    7234:	68f8      	ldr	r0, [r7, #12]
    7236:	f001 fbb1 	bl	899c <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    723a:	68fb      	ldr	r3, [r7, #12]
    723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    723e:	2108      	movs	r1, #8
    7240:	4618      	mov	r0, r3
    7242:	f003 fbe1 	bl	aa08 <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    7246:	68fb      	ldr	r3, [r7, #12]
    7248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    724a:	697a      	ldr	r2, [r7, #20]
    724c:	2100      	movs	r1, #0
    724e:	4618      	mov	r0, r3
    7250:	f003 fa8e 	bl	a770 <mp_emit_bc_pop_jump_if>
        }

        // either discard or store the exception instance
        if (qstr_exception_local == 0) {
    7254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7256:	2b00      	cmp	r3, #0
    7258:	d105      	bne.n	7266 <compile_try_except+0x16a>
            EMIT(pop_top);
    725a:	68fb      	ldr	r3, [r7, #12]
    725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    725e:	4618      	mov	r0, r3
    7260:	f003 fa42 	bl	a6e8 <mp_emit_bc_pop_top>
    7264:	e003      	b.n	726e <compile_try_except+0x172>
        } else {
            compile_store_id(comp, qstr_exception_local);
    7266:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7268:	68f8      	ldr	r0, [r7, #12]
    726a:	f7fd feb1 	bl	4fd0 <compile_store_id>
        }

        uint l3 = 0;
    726e:	2300      	movs	r3, #0
    7270:	62bb      	str	r3, [r7, #40]	; 0x28
        if (qstr_exception_local != 0) {
    7272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7274:	2b00      	cmp	r3, #0
    7276:	d00d      	beq.n	7294 <compile_try_except+0x198>
            l3 = comp_next_label(comp);
    7278:	68f8      	ldr	r0, [r7, #12]
    727a:	f7fd fda5 	bl	4dc8 <comp_next_label>
    727e:	62b8      	str	r0, [r7, #40]	; 0x28
            EMIT_ARG(setup_block, l3, MP_EMIT_SETUP_BLOCK_FINALLY);
    7280:	68fb      	ldr	r3, [r7, #12]
    7282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7284:	2203      	movs	r2, #3
    7286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7288:	4618      	mov	r0, r3
    728a:	f003 faf5 	bl	a878 <mp_emit_bc_setup_block>
            compile_increase_except_level(comp);
    728e:	68f8      	ldr	r0, [r7, #12]
    7290:	f7fd fdaa 	bl	4de8 <compile_increase_except_level>
        }
        compile_node(comp, pns_except->nodes[1]);
    7294:	69bb      	ldr	r3, [r7, #24]
    7296:	68db      	ldr	r3, [r3, #12]
    7298:	4619      	mov	r1, r3
    729a:	68f8      	ldr	r0, [r7, #12]
    729c:	f001 fb7e 	bl	899c <compile_node>
        if (qstr_exception_local != 0) {
    72a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72a2:	2b00      	cmp	r3, #0
    72a4:	d004      	beq.n	72b0 <compile_try_except+0x1b4>
            EMIT(pop_block);
    72a6:	68fb      	ldr	r3, [r7, #12]
    72a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72aa:	4618      	mov	r0, r3
    72ac:	f003 fb76 	bl	a99c <mp_emit_bc_pop_block>
        }
        EMIT(pop_except);
    72b0:	68fb      	ldr	r3, [r7, #12]
    72b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72b4:	4618      	mov	r0, r3
    72b6:	f003 fb81 	bl	a9bc <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    72ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72bc:	2b00      	cmp	r3, #0
    72be:	d021      	beq.n	7304 <compile_try_except+0x208>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    72c0:	68fb      	ldr	r3, [r7, #12]
    72c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72c4:	210e      	movs	r1, #14
    72c6:	4618      	mov	r0, r3
    72c8:	f003 f830 	bl	a32c <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    72cc:	68fb      	ldr	r3, [r7, #12]
    72ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    72d2:	4618      	mov	r0, r3
    72d4:	f002 ffac 	bl	a230 <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    72d8:	68fb      	ldr	r3, [r7, #12]
    72da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72dc:	210e      	movs	r1, #14
    72de:	4618      	mov	r0, r3
    72e0:	f003 f824 	bl	a32c <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    72e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    72e6:	68f8      	ldr	r0, [r7, #12]
    72e8:	f7fd fe72 	bl	4fd0 <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    72ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
    72ee:	68f8      	ldr	r0, [r7, #12]
    72f0:	f7fd fe8c 	bl	500c <compile_delete_id>

            compile_decrease_except_level(comp);
    72f4:	68f8      	ldr	r0, [r7, #12]
    72f6:	f7fd fd93 	bl	4e20 <compile_decrease_except_level>
            EMIT(end_finally);
    72fa:	68fb      	ldr	r3, [r7, #12]
    72fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72fe:	4618      	mov	r0, r3
    7300:	f003 fafc 	bl	a8fc <mp_emit_bc_end_finally>
        }
        EMIT_ARG(jump, l2);
    7304:	68fb      	ldr	r3, [r7, #12]
    7306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7308:	69f9      	ldr	r1, [r7, #28]
    730a:	4618      	mov	r0, r3
    730c:	f003 fa1e 	bl	a74c <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    7310:	68fb      	ldr	r3, [r7, #12]
    7312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7314:	6979      	ldr	r1, [r7, #20]
    7316:	4618      	mov	r0, r3
    7318:	f002 ff8a 	bl	a230 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    731c:	68fb      	ldr	r3, [r7, #12]
    731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7320:	2101      	movs	r1, #1
    7322:	4618      	mov	r0, r3
    7324:	f002 ff32 	bl	a18c <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    7328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    732a:	3301      	adds	r3, #1
    732c:	637b      	str	r3, [r7, #52]	; 0x34
    732e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7330:	687b      	ldr	r3, [r7, #4]
    7332:	429a      	cmp	r2, r3
    7334:	f6ff af1c 	blt.w	7170 <compile_try_except+0x74>
    }

    compile_decrease_except_level(comp);
    7338:	68f8      	ldr	r0, [r7, #12]
    733a:	f7fd fd71 	bl	4e20 <compile_decrease_except_level>
    EMIT(end_finally);
    733e:	68fb      	ldr	r3, [r7, #12]
    7340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7342:	4618      	mov	r0, r3
    7344:	f003 fada 	bl	a8fc <mp_emit_bc_end_finally>
    EMIT(end_except_handler);
    7348:	68fb      	ldr	r3, [r7, #12]
    734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    734c:	4618      	mov	r0, r3
    734e:	f003 fd57 	bl	ae00 <mp_emit_bc_end_except_handler>

    EMIT_ARG(label_assign, success_label);
    7352:	68fb      	ldr	r3, [r7, #12]
    7354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7356:	6a39      	ldr	r1, [r7, #32]
    7358:	4618      	mov	r0, r3
    735a:	f002 ff69 	bl	a230 <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    735e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    7360:	68f8      	ldr	r0, [r7, #12]
    7362:	f001 fb1b 	bl	899c <compile_node>
    EMIT_ARG(label_assign, l2);
    7366:	68fb      	ldr	r3, [r7, #12]
    7368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    736a:	69f9      	ldr	r1, [r7, #28]
    736c:	4618      	mov	r0, r3
    736e:	f002 ff5f 	bl	a230 <mp_emit_bc_label_assign>
}
    7372:	3738      	adds	r7, #56	; 0x38
    7374:	46bd      	mov	sp, r7
    7376:	bd80      	pop	{r7, pc}
    7378:	0001e7fc 	.word	0x0001e7fc
    737c:	0001efa0 	.word	0x0001efa0
    7380:	0001e310 	.word	0x0001e310
    7384:	0001e83c 	.word	0x0001e83c

00007388 <compile_try_finally>:

STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    7388:	b580      	push	{r7, lr}
    738a:	b088      	sub	sp, #32
    738c:	af02      	add	r7, sp, #8
    738e:	60f8      	str	r0, [r7, #12]
    7390:	60b9      	str	r1, [r7, #8]
    7392:	607a      	str	r2, [r7, #4]
    7394:	603b      	str	r3, [r7, #0]
    uint l_finally_block = comp_next_label(comp);
    7396:	68f8      	ldr	r0, [r7, #12]
    7398:	f7fd fd16 	bl	4dc8 <comp_next_label>
    739c:	6178      	str	r0, [r7, #20]

    EMIT_ARG(setup_block, l_finally_block, MP_EMIT_SETUP_BLOCK_FINALLY);
    739e:	68fb      	ldr	r3, [r7, #12]
    73a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73a2:	2203      	movs	r2, #3
    73a4:	6979      	ldr	r1, [r7, #20]
    73a6:	4618      	mov	r0, r3
    73a8:	f003 fa66 	bl	a878 <mp_emit_bc_setup_block>
    compile_increase_except_level(comp);
    73ac:	68f8      	ldr	r0, [r7, #12]
    73ae:	f7fd fd1b 	bl	4de8 <compile_increase_except_level>

    if (n_except == 0) {
    73b2:	687b      	ldr	r3, [r7, #4]
    73b4:	2b00      	cmp	r3, #0
    73b6:	d11b      	bne.n	73f0 <compile_try_finally+0x68>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    73b8:	6a3b      	ldr	r3, [r7, #32]
    73ba:	2b00      	cmp	r3, #0
    73bc:	d006      	beq.n	73cc <compile_try_finally+0x44>
    73be:	4b21      	ldr	r3, [pc, #132]	; (7444 <compile_try_finally+0xbc>)
    73c0:	4a21      	ldr	r2, [pc, #132]	; (7448 <compile_try_finally+0xc0>)
    73c2:	f240 614a 	movw	r1, #1610	; 0x64a
    73c6:	4821      	ldr	r0, [pc, #132]	; (744c <compile_try_finally+0xc4>)
    73c8:	f013 ffe8 	bl	1b39c <__assert_func>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    73cc:	68fb      	ldr	r3, [r7, #12]
    73ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73d0:	2103      	movs	r1, #3
    73d2:	4618      	mov	r0, r3
    73d4:	f002 feda 	bl	a18c <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    73d8:	68b9      	ldr	r1, [r7, #8]
    73da:	68f8      	ldr	r0, [r7, #12]
    73dc:	f001 fade 	bl	899c <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    73e0:	68fb      	ldr	r3, [r7, #12]
    73e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73e4:	f06f 0102 	mvn.w	r1, #2
    73e8:	4618      	mov	r0, r3
    73ea:	f002 fecf 	bl	a18c <mp_emit_bc_adjust_stack_size>
    73ee:	e007      	b.n	7400 <compile_try_finally+0x78>
    } else {
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    73f0:	6a3b      	ldr	r3, [r7, #32]
    73f2:	9300      	str	r3, [sp, #0]
    73f4:	683b      	ldr	r3, [r7, #0]
    73f6:	687a      	ldr	r2, [r7, #4]
    73f8:	68b9      	ldr	r1, [r7, #8]
    73fa:	68f8      	ldr	r0, [r7, #12]
    73fc:	f7ff fe7e 	bl	70fc <compile_try_except>
    }
    EMIT(pop_block);
    7400:	68fb      	ldr	r3, [r7, #12]
    7402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7404:	4618      	mov	r0, r3
    7406:	f003 fac9 	bl	a99c <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    740a:	68fb      	ldr	r3, [r7, #12]
    740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    740e:	210e      	movs	r1, #14
    7410:	4618      	mov	r0, r3
    7412:	f002 ff8b 	bl	a32c <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    7416:	68fb      	ldr	r3, [r7, #12]
    7418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    741a:	6979      	ldr	r1, [r7, #20]
    741c:	4618      	mov	r0, r3
    741e:	f002 ff07 	bl	a230 <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    7422:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7424:	68f8      	ldr	r0, [r7, #12]
    7426:	f001 fab9 	bl	899c <compile_node>

    compile_decrease_except_level(comp);
    742a:	68f8      	ldr	r0, [r7, #12]
    742c:	f7fd fcf8 	bl	4e20 <compile_decrease_except_level>
    EMIT(end_finally);
    7430:	68fb      	ldr	r3, [r7, #12]
    7432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7434:	4618      	mov	r0, r3
    7436:	f003 fa61 	bl	a8fc <mp_emit_bc_end_finally>
}
    743a:	bf00      	nop
    743c:	3718      	adds	r7, #24
    743e:	46bd      	mov	sp, r7
    7440:	bd80      	pop	{r7, pc}
    7442:	bf00      	nop
    7444:	0001e85c 	.word	0x0001e85c
    7448:	0001efb4 	.word	0x0001efb4
    744c:	0001e310 	.word	0x0001e310

00007450 <compile_try_stmt>:

STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7450:	b580      	push	{r7, lr}
    7452:	b08a      	sub	sp, #40	; 0x28
    7454:	af02      	add	r7, sp, #8
    7456:	6078      	str	r0, [r7, #4]
    7458:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    745a:	683b      	ldr	r3, [r7, #0]
    745c:	68db      	ldr	r3, [r3, #12]
    745e:	2b00      	cmp	r3, #0
    7460:	d005      	beq.n	746e <compile_try_stmt+0x1e>
    7462:	683b      	ldr	r3, [r7, #0]
    7464:	68db      	ldr	r3, [r3, #12]
    7466:	f003 0303 	and.w	r3, r3, #3
    746a:	2b00      	cmp	r3, #0
    746c:	d006      	beq.n	747c <compile_try_stmt+0x2c>
    746e:	4b30      	ldr	r3, [pc, #192]	; (7530 <compile_try_stmt+0xe0>)
    7470:	4a30      	ldr	r2, [pc, #192]	; (7534 <compile_try_stmt+0xe4>)
    7472:	f240 615b 	movw	r1, #1627	; 0x65b
    7476:	4830      	ldr	r0, [pc, #192]	; (7538 <compile_try_stmt+0xe8>)
    7478:	f013 ff90 	bl	1b39c <__assert_func>
    {
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    747c:	683b      	ldr	r3, [r7, #0]
    747e:	68db      	ldr	r3, [r3, #12]
    7480:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    7482:	69fb      	ldr	r3, [r7, #28]
    7484:	685b      	ldr	r3, [r3, #4]
    7486:	b2db      	uxtb	r3, r3
    7488:	2b71      	cmp	r3, #113	; 0x71
    748a:	d10c      	bne.n	74a6 <compile_try_stmt+0x56>
            // just try-finally
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    748c:	683b      	ldr	r3, [r7, #0]
    748e:	6899      	ldr	r1, [r3, #8]
    7490:	69fb      	ldr	r3, [r7, #28]
    7492:	689b      	ldr	r3, [r3, #8]
    7494:	9301      	str	r3, [sp, #4]
    7496:	2300      	movs	r3, #0
    7498:	9300      	str	r3, [sp, #0]
    749a:	2300      	movs	r3, #0
    749c:	2200      	movs	r2, #0
    749e:	6878      	ldr	r0, [r7, #4]
    74a0:	f7ff ff72 	bl	7388 <compile_try_finally>
            mp_parse_node_t *pn_excepts;
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
        }
    }
}
    74a4:	e040      	b.n	7528 <compile_try_stmt+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    74a6:	69fb      	ldr	r3, [r7, #28]
    74a8:	685b      	ldr	r3, [r3, #4]
    74aa:	b2db      	uxtb	r3, r3
    74ac:	2b6d      	cmp	r3, #109	; 0x6d
    74ae:	d128      	bne.n	7502 <compile_try_stmt+0xb2>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    74b0:	69fb      	ldr	r3, [r7, #28]
    74b2:	3308      	adds	r3, #8
    74b4:	f107 0210 	add.w	r2, r7, #16
    74b8:	2170      	movs	r1, #112	; 0x70
    74ba:	4618      	mov	r0, r3
    74bc:	f7fc fb6e 	bl	3b9c <mp_parse_node_extract_list>
    74c0:	61b8      	str	r0, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    74c2:	69fb      	ldr	r3, [r7, #28]
    74c4:	691b      	ldr	r3, [r3, #16]
    74c6:	2b00      	cmp	r3, #0
    74c8:	d10b      	bne.n	74e2 <compile_try_stmt+0x92>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    74ca:	683b      	ldr	r3, [r7, #0]
    74cc:	6899      	ldr	r1, [r3, #8]
    74ce:	693a      	ldr	r2, [r7, #16]
    74d0:	69fb      	ldr	r3, [r7, #28]
    74d2:	68db      	ldr	r3, [r3, #12]
    74d4:	9300      	str	r3, [sp, #0]
    74d6:	4613      	mov	r3, r2
    74d8:	69ba      	ldr	r2, [r7, #24]
    74da:	6878      	ldr	r0, [r7, #4]
    74dc:	f7ff fe0e 	bl	70fc <compile_try_except>
}
    74e0:	e022      	b.n	7528 <compile_try_stmt+0xd8>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    74e2:	683b      	ldr	r3, [r7, #0]
    74e4:	6899      	ldr	r1, [r3, #8]
    74e6:	6938      	ldr	r0, [r7, #16]
    74e8:	69fb      	ldr	r3, [r7, #28]
    74ea:	68db      	ldr	r3, [r3, #12]
    74ec:	69fa      	ldr	r2, [r7, #28]
    74ee:	6912      	ldr	r2, [r2, #16]
    74f0:	6892      	ldr	r2, [r2, #8]
    74f2:	9201      	str	r2, [sp, #4]
    74f4:	9300      	str	r3, [sp, #0]
    74f6:	4603      	mov	r3, r0
    74f8:	69ba      	ldr	r2, [r7, #24]
    74fa:	6878      	ldr	r0, [r7, #4]
    74fc:	f7ff ff44 	bl	7388 <compile_try_finally>
}
    7500:	e012      	b.n	7528 <compile_try_stmt+0xd8>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    7502:	683b      	ldr	r3, [r7, #0]
    7504:	330c      	adds	r3, #12
    7506:	f107 020c 	add.w	r2, r7, #12
    750a:	2170      	movs	r1, #112	; 0x70
    750c:	4618      	mov	r0, r3
    750e:	f7fc fb45 	bl	3b9c <mp_parse_node_extract_list>
    7512:	6178      	str	r0, [r7, #20]
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    7514:	683b      	ldr	r3, [r7, #0]
    7516:	6899      	ldr	r1, [r3, #8]
    7518:	68fa      	ldr	r2, [r7, #12]
    751a:	2300      	movs	r3, #0
    751c:	9300      	str	r3, [sp, #0]
    751e:	4613      	mov	r3, r2
    7520:	697a      	ldr	r2, [r7, #20]
    7522:	6878      	ldr	r0, [r7, #4]
    7524:	f7ff fdea 	bl	70fc <compile_try_except>
}
    7528:	bf00      	nop
    752a:	3720      	adds	r7, #32
    752c:	46bd      	mov	sp, r7
    752e:	bd80      	pop	{r7, pc}
    7530:	0001e87c 	.word	0x0001e87c
    7534:	0001efc8 	.word	0x0001efc8
    7538:	0001e310 	.word	0x0001e310

0000753c <compile_with_stmt_helper>:

STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    753c:	b580      	push	{r7, lr}
    753e:	b086      	sub	sp, #24
    7540:	af00      	add	r7, sp, #0
    7542:	60f8      	str	r0, [r7, #12]
    7544:	60b9      	str	r1, [r7, #8]
    7546:	607a      	str	r2, [r7, #4]
    7548:	603b      	str	r3, [r7, #0]
    if (n == 0) {
    754a:	68bb      	ldr	r3, [r7, #8]
    754c:	2b00      	cmp	r3, #0
    754e:	d104      	bne.n	755a <compile_with_stmt_helper+0x1e>
        // no more pre-bits, compile the body of the with
        compile_node(comp, body);
    7550:	6839      	ldr	r1, [r7, #0]
    7552:	68f8      	ldr	r0, [r7, #12]
    7554:	f001 fa22 	bl	899c <compile_node>
        // finish this with block
        EMIT_ARG(with_cleanup, l_end);
        compile_decrease_except_level(comp);
        EMIT(end_finally);
    }
}
    7558:	e056      	b.n	7608 <compile_with_stmt_helper+0xcc>
        uint l_end = comp_next_label(comp);
    755a:	68f8      	ldr	r0, [r7, #12]
    755c:	f7fd fc34 	bl	4dc8 <comp_next_label>
    7560:	6178      	str	r0, [r7, #20]
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    7562:	687b      	ldr	r3, [r7, #4]
    7564:	681b      	ldr	r3, [r3, #0]
    7566:	2b00      	cmp	r3, #0
    7568:	d023      	beq.n	75b2 <compile_with_stmt_helper+0x76>
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	681b      	ldr	r3, [r3, #0]
    756e:	f003 0303 	and.w	r3, r3, #3
    7572:	2b00      	cmp	r3, #0
    7574:	d11d      	bne.n	75b2 <compile_with_stmt_helper+0x76>
    7576:	687b      	ldr	r3, [r7, #4]
    7578:	681b      	ldr	r3, [r3, #0]
    757a:	685b      	ldr	r3, [r3, #4]
    757c:	b2db      	uxtb	r3, r3
    757e:	2b74      	cmp	r3, #116	; 0x74
    7580:	d117      	bne.n	75b2 <compile_with_stmt_helper+0x76>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)nodes[0];
    7582:	687b      	ldr	r3, [r7, #4]
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	613b      	str	r3, [r7, #16]
            compile_node(comp, pns->nodes[0]);
    7588:	693b      	ldr	r3, [r7, #16]
    758a:	689b      	ldr	r3, [r3, #8]
    758c:	4619      	mov	r1, r3
    758e:	68f8      	ldr	r0, [r7, #12]
    7590:	f001 fa04 	bl	899c <compile_node>
            EMIT_ARG(setup_block, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    7594:	68fb      	ldr	r3, [r7, #12]
    7596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7598:	2200      	movs	r2, #0
    759a:	6979      	ldr	r1, [r7, #20]
    759c:	4618      	mov	r0, r3
    759e:	f003 f96b 	bl	a878 <mp_emit_bc_setup_block>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    75a2:	693b      	ldr	r3, [r7, #16]
    75a4:	68db      	ldr	r3, [r3, #12]
    75a6:	2200      	movs	r2, #0
    75a8:	4619      	mov	r1, r3
    75aa:	68f8      	ldr	r0, [r7, #12]
    75ac:	f7fe f834 	bl	5618 <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    75b0:	e011      	b.n	75d6 <compile_with_stmt_helper+0x9a>
            compile_node(comp, nodes[0]);
    75b2:	687b      	ldr	r3, [r7, #4]
    75b4:	681b      	ldr	r3, [r3, #0]
    75b6:	4619      	mov	r1, r3
    75b8:	68f8      	ldr	r0, [r7, #12]
    75ba:	f001 f9ef 	bl	899c <compile_node>
            EMIT_ARG(setup_block, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    75be:	68fb      	ldr	r3, [r7, #12]
    75c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75c2:	2200      	movs	r2, #0
    75c4:	6979      	ldr	r1, [r7, #20]
    75c6:	4618      	mov	r0, r3
    75c8:	f003 f956 	bl	a878 <mp_emit_bc_setup_block>
            EMIT(pop_top);
    75cc:	68fb      	ldr	r3, [r7, #12]
    75ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75d0:	4618      	mov	r0, r3
    75d2:	f003 f889 	bl	a6e8 <mp_emit_bc_pop_top>
        compile_increase_except_level(comp);
    75d6:	68f8      	ldr	r0, [r7, #12]
    75d8:	f7fd fc06 	bl	4de8 <compile_increase_except_level>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    75dc:	68bb      	ldr	r3, [r7, #8]
    75de:	1e59      	subs	r1, r3, #1
    75e0:	687b      	ldr	r3, [r7, #4]
    75e2:	1d1a      	adds	r2, r3, #4
    75e4:	683b      	ldr	r3, [r7, #0]
    75e6:	68f8      	ldr	r0, [r7, #12]
    75e8:	f7ff ffa8 	bl	753c <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    75ec:	68fb      	ldr	r3, [r7, #12]
    75ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75f0:	6979      	ldr	r1, [r7, #20]
    75f2:	4618      	mov	r0, r3
    75f4:	f003 f960 	bl	a8b8 <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    75f8:	68f8      	ldr	r0, [r7, #12]
    75fa:	f7fd fc11 	bl	4e20 <compile_decrease_except_level>
        EMIT(end_finally);
    75fe:	68fb      	ldr	r3, [r7, #12]
    7600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7602:	4618      	mov	r0, r3
    7604:	f003 f97a 	bl	a8fc <mp_emit_bc_end_finally>
}
    7608:	bf00      	nop
    760a:	3718      	adds	r7, #24
    760c:	46bd      	mov	sp, r7
    760e:	bd80      	pop	{r7, pc}

00007610 <compile_with_stmt>:

STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7610:	b580      	push	{r7, lr}
    7612:	b084      	sub	sp, #16
    7614:	af00      	add	r7, sp, #0
    7616:	6078      	str	r0, [r7, #4]
    7618:	6039      	str	r1, [r7, #0]
    // get the nodes for the pre-bit of the with (the a as b, c as d, ... bit)
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    761a:	683b      	ldr	r3, [r7, #0]
    761c:	3308      	adds	r3, #8
    761e:	f107 0208 	add.w	r2, r7, #8
    7622:	2173      	movs	r1, #115	; 0x73
    7624:	4618      	mov	r0, r3
    7626:	f7fc fab9 	bl	3b9c <mp_parse_node_extract_list>
    762a:	60f8      	str	r0, [r7, #12]
    assert(n > 0);
    762c:	68fb      	ldr	r3, [r7, #12]
    762e:	2b00      	cmp	r3, #0
    7630:	dc06      	bgt.n	7640 <compile_with_stmt+0x30>
    7632:	4b09      	ldr	r3, [pc, #36]	; (7658 <compile_with_stmt+0x48>)
    7634:	4a09      	ldr	r2, [pc, #36]	; (765c <compile_with_stmt+0x4c>)
    7636:	f240 619a 	movw	r1, #1690	; 0x69a
    763a:	4809      	ldr	r0, [pc, #36]	; (7660 <compile_with_stmt+0x50>)
    763c:	f013 feae 	bl	1b39c <__assert_func>

    // compile in a nested fashion
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    7640:	68ba      	ldr	r2, [r7, #8]
    7642:	683b      	ldr	r3, [r7, #0]
    7644:	68db      	ldr	r3, [r3, #12]
    7646:	68f9      	ldr	r1, [r7, #12]
    7648:	6878      	ldr	r0, [r7, #4]
    764a:	f7ff ff77 	bl	753c <compile_with_stmt_helper>
}
    764e:	bf00      	nop
    7650:	3710      	adds	r7, #16
    7652:	46bd      	mov	sp, r7
    7654:	bd80      	pop	{r7, pc}
    7656:	bf00      	nop
    7658:	0001e8a4 	.word	0x0001e8a4
    765c:	0001efdc 	.word	0x0001efdc
    7660:	0001e310 	.word	0x0001e310

00007664 <compile_yield_from>:

STATIC void compile_yield_from(compiler_t *comp) {
    7664:	b580      	push	{r7, lr}
    7666:	b082      	sub	sp, #8
    7668:	af00      	add	r7, sp, #0
    766a:	6078      	str	r0, [r7, #4]
    EMIT_ARG(get_iter, false);
    766c:	687b      	ldr	r3, [r7, #4]
    766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7670:	2100      	movs	r1, #0
    7672:	4618      	mov	r0, r3
    7674:	f003 f954 	bl	a920 <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    767c:	210e      	movs	r1, #14
    767e:	4618      	mov	r0, r3
    7680:	f002 fe54 	bl	a32c <mp_emit_bc_load_const_tok>
    EMIT_ARG(yield, MP_EMIT_YIELD_FROM);
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7688:	2101      	movs	r1, #1
    768a:	4618      	mov	r0, r3
    768c:	f003 fb8c 	bl	ada8 <mp_emit_bc_yield>
}
    7690:	bf00      	nop
    7692:	3708      	adds	r7, #8
    7694:	46bd      	mov	sp, r7
    7696:	bd80      	pop	{r7, pc}

00007698 <compile_expr_stmt>:
        compile_async_with_stmt(comp, pns0);
    }
}
#endif

STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7698:	b580      	push	{r7, lr}
    769a:	b088      	sub	sp, #32
    769c:	af00      	add	r7, sp, #0
    769e:	6078      	str	r0, [r7, #4]
    76a0:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    76a2:	683b      	ldr	r3, [r7, #0]
    76a4:	68db      	ldr	r3, [r3, #12]
    76a6:	2b00      	cmp	r3, #0
    76a8:	d149      	bne.n	773e <compile_expr_stmt+0xa6>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	791b      	ldrb	r3, [r3, #4]
    76ae:	2b00      	cmp	r3, #0
    76b0:	d01b      	beq.n	76ea <compile_expr_stmt+0x52>
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76b6:	681b      	ldr	r3, [r3, #0]
    76b8:	2b00      	cmp	r3, #0
    76ba:	d116      	bne.n	76ea <compile_expr_stmt+0x52>
            // for REPL, evaluate then print the expression
            compile_load_id(comp, MP_QSTR___repl_print__);
    76bc:	2120      	movs	r1, #32
    76be:	6878      	ldr	r0, [r7, #4]
    76c0:	f7fd fc68 	bl	4f94 <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    76c4:	683b      	ldr	r3, [r7, #0]
    76c6:	689b      	ldr	r3, [r3, #8]
    76c8:	4619      	mov	r1, r3
    76ca:	6878      	ldr	r0, [r7, #4]
    76cc:	f001 f966 	bl	899c <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    76d4:	2300      	movs	r3, #0
    76d6:	2200      	movs	r2, #0
    76d8:	2101      	movs	r1, #1
    76da:	f003 faff 	bl	acdc <mp_emit_bc_call_function>
            EMIT(pop_top);
    76de:	687b      	ldr	r3, [r7, #4]
    76e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76e2:	4618      	mov	r0, r3
    76e4:	f003 f800 	bl	a6e8 <mp_emit_bc_pop_top>
    76e8:	e0f7      	b.n	78da <compile_expr_stmt+0x242>

        } else {
            // for non-REPL, evaluate then discard the expression
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    76ea:	683b      	ldr	r3, [r7, #0]
    76ec:	689b      	ldr	r3, [r3, #8]
    76ee:	f003 0303 	and.w	r3, r3, #3
    76f2:	2b00      	cmp	r3, #0
    76f4:	d006      	beq.n	7704 <compile_expr_stmt+0x6c>
    76f6:	683b      	ldr	r3, [r7, #0]
    76f8:	689b      	ldr	r3, [r3, #8]
    76fa:	f003 030f 	and.w	r3, r3, #15
    76fe:	2b02      	cmp	r3, #2
    7700:	f040 80eb 	bne.w	78da <compile_expr_stmt+0x242>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    7704:	683b      	ldr	r3, [r7, #0]
    7706:	689b      	ldr	r3, [r3, #8]
    7708:	2b00      	cmp	r3, #0
    770a:	d00c      	beq.n	7726 <compile_expr_stmt+0x8e>
    770c:	683b      	ldr	r3, [r7, #0]
    770e:	689b      	ldr	r3, [r3, #8]
    7710:	f003 0303 	and.w	r3, r3, #3
    7714:	2b00      	cmp	r3, #0
    7716:	d106      	bne.n	7726 <compile_expr_stmt+0x8e>
    7718:	683b      	ldr	r3, [r7, #0]
    771a:	689b      	ldr	r3, [r3, #8]
    771c:	685b      	ldr	r3, [r3, #4]
    771e:	b2db      	uxtb	r3, r3
    7720:	2b35      	cmp	r3, #53	; 0x35
    7722:	f000 80da 	beq.w	78da <compile_expr_stmt+0x242>
                // do nothing with a lonely constant
            } else {
                compile_node(comp, pns->nodes[0]); // just an expression
    7726:	683b      	ldr	r3, [r7, #0]
    7728:	689b      	ldr	r3, [r3, #8]
    772a:	4619      	mov	r1, r3
    772c:	6878      	ldr	r0, [r7, #4]
    772e:	f001 f935 	bl	899c <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    7732:	687b      	ldr	r3, [r7, #4]
    7734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7736:	4618      	mov	r0, r3
    7738:	f002 ffd6 	bl	a6e8 <mp_emit_bc_pop_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
        }
    } else {
        goto plain_assign;
    }
}
    773c:	e0cd      	b.n	78da <compile_expr_stmt+0x242>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    773e:	683b      	ldr	r3, [r7, #0]
    7740:	68db      	ldr	r3, [r3, #12]
    7742:	2b00      	cmp	r3, #0
    7744:	f000 80bb 	beq.w	78be <compile_expr_stmt+0x226>
    7748:	683b      	ldr	r3, [r7, #0]
    774a:	68db      	ldr	r3, [r3, #12]
    774c:	f003 0303 	and.w	r3, r3, #3
    7750:	2b00      	cmp	r3, #0
    7752:	f040 80b4 	bne.w	78be <compile_expr_stmt+0x226>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    7756:	683b      	ldr	r3, [r7, #0]
    7758:	68db      	ldr	r3, [r3, #12]
    775a:	617b      	str	r3, [r7, #20]
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    775c:	697b      	ldr	r3, [r7, #20]
    775e:	685b      	ldr	r3, [r3, #4]
    7760:	b2db      	uxtb	r3, r3
    7762:	613b      	str	r3, [r7, #16]
        if (kind == PN_expr_stmt_augassign) {
    7764:	693b      	ldr	r3, [r7, #16]
    7766:	2b51      	cmp	r3, #81	; 0x51
    7768:	d16a      	bne.n	7840 <compile_expr_stmt+0x1a8>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    776a:	683b      	ldr	r3, [r7, #0]
    776c:	689b      	ldr	r3, [r3, #8]
    776e:	2201      	movs	r2, #1
    7770:	4619      	mov	r1, r3
    7772:	6878      	ldr	r0, [r7, #4]
    7774:	f7fd ff50 	bl	5618 <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    7778:	697b      	ldr	r3, [r7, #20]
    777a:	68db      	ldr	r3, [r3, #12]
    777c:	4619      	mov	r1, r3
    777e:	6878      	ldr	r0, [r7, #4]
    7780:	f001 f90c 	bl	899c <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    7784:	697b      	ldr	r3, [r7, #20]
    7786:	689b      	ldr	r3, [r3, #8]
    7788:	f003 030f 	and.w	r3, r3, #15
    778c:	2b0e      	cmp	r3, #14
    778e:	d006      	beq.n	779e <compile_expr_stmt+0x106>
    7790:	4b54      	ldr	r3, [pc, #336]	; (78e4 <compile_expr_stmt+0x24c>)
    7792:	4a55      	ldr	r2, [pc, #340]	; (78e8 <compile_expr_stmt+0x250>)
    7794:	f240 718d 	movw	r1, #1933	; 0x78d
    7798:	4854      	ldr	r0, [pc, #336]	; (78ec <compile_expr_stmt+0x254>)
    779a:	f013 fdff 	bl	1b39c <__assert_func>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    779e:	697b      	ldr	r3, [r7, #20]
    77a0:	689b      	ldr	r3, [r3, #8]
    77a2:	091b      	lsrs	r3, r3, #4
    77a4:	3b4e      	subs	r3, #78	; 0x4e
    77a6:	2b0a      	cmp	r3, #10
    77a8:	d839      	bhi.n	781e <compile_expr_stmt+0x186>
    77aa:	a201      	add	r2, pc, #4	; (adr r2, 77b0 <compile_expr_stmt+0x118>)
    77ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    77b0:	000077fb 	.word	0x000077fb
    77b4:	00007801 	.word	0x00007801
    77b8:	00007807 	.word	0x00007807
    77bc:	00007813 	.word	0x00007813
    77c0:	0000780d 	.word	0x0000780d
    77c4:	00007819 	.word	0x00007819
    77c8:	000077e9 	.word	0x000077e9
    77cc:	000077dd 	.word	0x000077dd
    77d0:	000077e3 	.word	0x000077e3
    77d4:	000077f5 	.word	0x000077f5
    77d8:	000077ef 	.word	0x000077ef
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    77dc:	2309      	movs	r3, #9
    77de:	61fb      	str	r3, [r7, #28]
    77e0:	e020      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    77e2:	230a      	movs	r3, #10
    77e4:	61fb      	str	r3, [r7, #28]
    77e6:	e01d      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    77e8:	230b      	movs	r3, #11
    77ea:	61fb      	str	r3, [r7, #28]
    77ec:	e01a      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    77ee:	230c      	movs	r3, #12
    77f0:	61fb      	str	r3, [r7, #28]
    77f2:	e017      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    77f4:	230d      	movs	r3, #13
    77f6:	61fb      	str	r3, [r7, #28]
    77f8:	e014      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    77fa:	230e      	movs	r3, #14
    77fc:	61fb      	str	r3, [r7, #28]
    77fe:	e011      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    7800:	230f      	movs	r3, #15
    7802:	61fb      	str	r3, [r7, #28]
    7804:	e00e      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    7806:	2310      	movs	r3, #16
    7808:	61fb      	str	r3, [r7, #28]
    780a:	e00b      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    780c:	2311      	movs	r3, #17
    780e:	61fb      	str	r3, [r7, #28]
    7810:	e008      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    7812:	2312      	movs	r3, #18
    7814:	61fb      	str	r3, [r7, #28]
    7816:	e005      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    7818:	2313      	movs	r3, #19
    781a:	61fb      	str	r3, [r7, #28]
    781c:	e002      	b.n	7824 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    781e:	2314      	movs	r3, #20
    7820:	61fb      	str	r3, [r7, #28]
    7822:	bf00      	nop
            EMIT_ARG(binary_op, op);
    7824:	687b      	ldr	r3, [r7, #4]
    7826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7828:	69f9      	ldr	r1, [r7, #28]
    782a:	4618      	mov	r0, r3
    782c:	f003 f8ec 	bl	aa08 <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    7830:	683b      	ldr	r3, [r7, #0]
    7832:	689b      	ldr	r3, [r3, #8]
    7834:	2202      	movs	r2, #2
    7836:	4619      	mov	r1, r3
    7838:	6878      	ldr	r0, [r7, #4]
    783a:	f7fd feed 	bl	5618 <c_assign>
}
    783e:	e04c      	b.n	78da <compile_expr_stmt+0x242>
        } else if (kind == PN_expr_stmt_assign_list) {
    7840:	693b      	ldr	r3, [r7, #16]
    7842:	2b52      	cmp	r3, #82	; 0x52
    7844:	d13b      	bne.n	78be <compile_expr_stmt+0x226>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    7846:	697b      	ldr	r3, [r7, #20]
    7848:	685b      	ldr	r3, [r3, #4]
    784a:	0a1b      	lsrs	r3, r3, #8
    784c:	3b01      	subs	r3, #1
    784e:	60fb      	str	r3, [r7, #12]
            compile_node(comp, pns1->nodes[rhs]); // rhs
    7850:	697b      	ldr	r3, [r7, #20]
    7852:	68fa      	ldr	r2, [r7, #12]
    7854:	3202      	adds	r2, #2
    7856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    785a:	4619      	mov	r1, r3
    785c:	6878      	ldr	r0, [r7, #4]
    785e:	f001 f89d 	bl	899c <compile_node>
            if (rhs > 0) {
    7862:	68fb      	ldr	r3, [r7, #12]
    7864:	2b00      	cmp	r3, #0
    7866:	dd04      	ble.n	7872 <compile_expr_stmt+0x1da>
                EMIT(dup_top);
    7868:	687b      	ldr	r3, [r7, #4]
    786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    786c:	4618      	mov	r0, r3
    786e:	f002 ff1b 	bl	a6a8 <mp_emit_bc_dup_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7872:	683b      	ldr	r3, [r7, #0]
    7874:	689b      	ldr	r3, [r3, #8]
    7876:	2200      	movs	r2, #0
    7878:	4619      	mov	r1, r3
    787a:	6878      	ldr	r0, [r7, #4]
    787c:	f7fd fecc 	bl	5618 <c_assign>
            for (int i = 0; i < rhs; i++) {
    7880:	2300      	movs	r3, #0
    7882:	61bb      	str	r3, [r7, #24]
    7884:	e016      	b.n	78b4 <compile_expr_stmt+0x21c>
                if (i + 1 < rhs) {
    7886:	69bb      	ldr	r3, [r7, #24]
    7888:	1c5a      	adds	r2, r3, #1
    788a:	68fb      	ldr	r3, [r7, #12]
    788c:	429a      	cmp	r2, r3
    788e:	da04      	bge.n	789a <compile_expr_stmt+0x202>
                    EMIT(dup_top);
    7890:	687b      	ldr	r3, [r7, #4]
    7892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7894:	4618      	mov	r0, r3
    7896:	f002 ff07 	bl	a6a8 <mp_emit_bc_dup_top>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    789a:	697b      	ldr	r3, [r7, #20]
    789c:	69ba      	ldr	r2, [r7, #24]
    789e:	3202      	adds	r2, #2
    78a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    78a4:	2200      	movs	r2, #0
    78a6:	4619      	mov	r1, r3
    78a8:	6878      	ldr	r0, [r7, #4]
    78aa:	f7fd feb5 	bl	5618 <c_assign>
            for (int i = 0; i < rhs; i++) {
    78ae:	69bb      	ldr	r3, [r7, #24]
    78b0:	3301      	adds	r3, #1
    78b2:	61bb      	str	r3, [r7, #24]
    78b4:	69ba      	ldr	r2, [r7, #24]
    78b6:	68fb      	ldr	r3, [r7, #12]
    78b8:	429a      	cmp	r2, r3
    78ba:	dbe4      	blt.n	7886 <compile_expr_stmt+0x1ee>
}
    78bc:	e00d      	b.n	78da <compile_expr_stmt+0x242>
            compile_node(comp, pns->nodes[1]); // rhs
    78be:	683b      	ldr	r3, [r7, #0]
    78c0:	68db      	ldr	r3, [r3, #12]
    78c2:	4619      	mov	r1, r3
    78c4:	6878      	ldr	r0, [r7, #4]
    78c6:	f001 f869 	bl	899c <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    78ca:	683b      	ldr	r3, [r7, #0]
    78cc:	689b      	ldr	r3, [r3, #8]
    78ce:	2200      	movs	r2, #0
    78d0:	4619      	mov	r1, r3
    78d2:	6878      	ldr	r0, [r7, #4]
    78d4:	f7fd fea0 	bl	5618 <c_assign>
}
    78d8:	e7ff      	b.n	78da <compile_expr_stmt+0x242>
    78da:	bf00      	nop
    78dc:	3720      	adds	r7, #32
    78de:	46bd      	mov	sp, r7
    78e0:	bd80      	pop	{r7, pc}
    78e2:	bf00      	nop
    78e4:	0001e8ac 	.word	0x0001e8ac
    78e8:	0001eff0 	.word	0x0001eff0
    78ec:	0001e310 	.word	0x0001e310

000078f0 <compile_test_if_expr>:

STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    78f0:	b580      	push	{r7, lr}
    78f2:	b086      	sub	sp, #24
    78f4:	af00      	add	r7, sp, #0
    78f6:	6078      	str	r0, [r7, #4]
    78f8:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    78fa:	683b      	ldr	r3, [r7, #0]
    78fc:	68db      	ldr	r3, [r3, #12]
    78fe:	2b00      	cmp	r3, #0
    7900:	d00b      	beq.n	791a <compile_test_if_expr+0x2a>
    7902:	683b      	ldr	r3, [r7, #0]
    7904:	68db      	ldr	r3, [r3, #12]
    7906:	f003 0303 	and.w	r3, r3, #3
    790a:	2b00      	cmp	r3, #0
    790c:	d105      	bne.n	791a <compile_test_if_expr+0x2a>
    790e:	683b      	ldr	r3, [r7, #0]
    7910:	68db      	ldr	r3, [r3, #12]
    7912:	685b      	ldr	r3, [r3, #4]
    7914:	b2db      	uxtb	r3, r3
    7916:	2b79      	cmp	r3, #121	; 0x79
    7918:	d006      	beq.n	7928 <compile_test_if_expr+0x38>
    791a:	4b21      	ldr	r3, [pc, #132]	; (79a0 <compile_test_if_expr+0xb0>)
    791c:	4a21      	ldr	r2, [pc, #132]	; (79a4 <compile_test_if_expr+0xb4>)
    791e:	f240 71e4 	movw	r1, #2020	; 0x7e4
    7922:	4821      	ldr	r0, [pc, #132]	; (79a8 <compile_test_if_expr+0xb8>)
    7924:	f013 fd3a 	bl	1b39c <__assert_func>
    mp_parse_node_struct_t *pns_test_if_else = (mp_parse_node_struct_t*)pns->nodes[1];
    7928:	683b      	ldr	r3, [r7, #0]
    792a:	68db      	ldr	r3, [r3, #12]
    792c:	617b      	str	r3, [r7, #20]

    uint l_fail = comp_next_label(comp);
    792e:	6878      	ldr	r0, [r7, #4]
    7930:	f7fd fa4a 	bl	4dc8 <comp_next_label>
    7934:	6138      	str	r0, [r7, #16]
    uint l_end = comp_next_label(comp);
    7936:	6878      	ldr	r0, [r7, #4]
    7938:	f7fd fa46 	bl	4dc8 <comp_next_label>
    793c:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    793e:	697b      	ldr	r3, [r7, #20]
    7940:	6899      	ldr	r1, [r3, #8]
    7942:	693b      	ldr	r3, [r7, #16]
    7944:	2200      	movs	r2, #0
    7946:	6878      	ldr	r0, [r7, #4]
    7948:	f7fd fbc8 	bl	50dc <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    794c:	683b      	ldr	r3, [r7, #0]
    794e:	689b      	ldr	r3, [r3, #8]
    7950:	4619      	mov	r1, r3
    7952:	6878      	ldr	r0, [r7, #4]
    7954:	f001 f822 	bl	899c <compile_node>
    EMIT_ARG(jump, l_end);
    7958:	687b      	ldr	r3, [r7, #4]
    795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    795c:	68f9      	ldr	r1, [r7, #12]
    795e:	4618      	mov	r0, r3
    7960:	f002 fef4 	bl	a74c <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    7964:	687b      	ldr	r3, [r7, #4]
    7966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7968:	6939      	ldr	r1, [r7, #16]
    796a:	4618      	mov	r0, r3
    796c:	f002 fc60 	bl	a230 <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    7970:	687b      	ldr	r3, [r7, #4]
    7972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7978:	4618      	mov	r0, r3
    797a:	f002 fc07 	bl	a18c <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    797e:	697b      	ldr	r3, [r7, #20]
    7980:	68db      	ldr	r3, [r3, #12]
    7982:	4619      	mov	r1, r3
    7984:	6878      	ldr	r0, [r7, #4]
    7986:	f001 f809 	bl	899c <compile_node>
    EMIT_ARG(label_assign, l_end);
    798a:	687b      	ldr	r3, [r7, #4]
    798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    798e:	68f9      	ldr	r1, [r7, #12]
    7990:	4618      	mov	r0, r3
    7992:	f002 fc4d 	bl	a230 <mp_emit_bc_label_assign>
}
    7996:	bf00      	nop
    7998:	3718      	adds	r7, #24
    799a:	46bd      	mov	sp, r7
    799c:	bd80      	pop	{r7, pc}
    799e:	bf00      	nop
    79a0:	0001e8d4 	.word	0x0001e8d4
    79a4:	0001f004 	.word	0x0001f004
    79a8:	0001e310 	.word	0x0001e310

000079ac <compile_lambdef>:

STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    79ac:	b580      	push	{r7, lr}
    79ae:	b084      	sub	sp, #16
    79b0:	af00      	add	r7, sp, #0
    79b2:	6078      	str	r0, [r7, #4]
    79b4:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	795b      	ldrb	r3, [r3, #5]
    79ba:	2b01      	cmp	r3, #1
    79bc:	d10b      	bne.n	79d6 <compile_lambdef+0x2a>
        // create a new scope for this lambda
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    79be:	683a      	ldr	r2, [r7, #0]
    79c0:	687b      	ldr	r3, [r7, #4]
    79c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    79c4:	7e5b      	ldrb	r3, [r3, #25]
    79c6:	2102      	movs	r1, #2
    79c8:	6878      	ldr	r0, [r7, #4]
    79ca:	f7fd fa47 	bl	4e5c <scope_new_and_link>
    79ce:	60f8      	str	r0, [r7, #12]
        // store the lambda scope so the compiling function (this one) can use it at each pass
        pns->nodes[2] = (mp_parse_node_t)s;
    79d0:	68fa      	ldr	r2, [r7, #12]
    79d2:	683b      	ldr	r3, [r7, #0]
    79d4:	611a      	str	r2, [r3, #16]
    }

    // get the scope for this lambda
    scope_t *this_scope = (scope_t*)pns->nodes[2];
    79d6:	683b      	ldr	r3, [r7, #0]
    79d8:	691b      	ldr	r3, [r3, #16]
    79da:	60bb      	str	r3, [r7, #8]

    // compile the lambda definition
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    79dc:	683b      	ldr	r3, [r7, #0]
    79de:	689a      	ldr	r2, [r3, #8]
    79e0:	2346      	movs	r3, #70	; 0x46
    79e2:	68b9      	ldr	r1, [r7, #8]
    79e4:	6878      	ldr	r0, [r7, #4]
    79e6:	f7fe f871 	bl	5acc <compile_funcdef_lambdef>
}
    79ea:	bf00      	nop
    79ec:	3710      	adds	r7, #16
    79ee:	46bd      	mov	sp, r7
    79f0:	bd80      	pop	{r7, pc}
    79f2:	bf00      	nop

000079f4 <compile_or_and_test>:

STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    79f4:	b580      	push	{r7, lr}
    79f6:	b086      	sub	sp, #24
    79f8:	af00      	add	r7, sp, #0
    79fa:	6078      	str	r0, [r7, #4]
    79fc:	6039      	str	r1, [r7, #0]
    bool cond = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test;
    79fe:	683b      	ldr	r3, [r7, #0]
    7a00:	685b      	ldr	r3, [r3, #4]
    7a02:	b2db      	uxtb	r3, r3
    7a04:	2b1c      	cmp	r3, #28
    7a06:	bf0c      	ite	eq
    7a08:	2301      	moveq	r3, #1
    7a0a:	2300      	movne	r3, #0
    7a0c:	74fb      	strb	r3, [r7, #19]
    uint l_end = comp_next_label(comp);
    7a0e:	6878      	ldr	r0, [r7, #4]
    7a10:	f7fd f9da 	bl	4dc8 <comp_next_label>
    7a14:	60f8      	str	r0, [r7, #12]
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7a16:	683b      	ldr	r3, [r7, #0]
    7a18:	685b      	ldr	r3, [r3, #4]
    7a1a:	0a1b      	lsrs	r3, r3, #8
    7a1c:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < n; i += 1) {
    7a1e:	2300      	movs	r3, #0
    7a20:	617b      	str	r3, [r7, #20]
    7a22:	e017      	b.n	7a54 <compile_or_and_test+0x60>
        compile_node(comp, pns->nodes[i]);
    7a24:	683b      	ldr	r3, [r7, #0]
    7a26:	697a      	ldr	r2, [r7, #20]
    7a28:	3202      	adds	r2, #2
    7a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a2e:	4619      	mov	r1, r3
    7a30:	6878      	ldr	r0, [r7, #4]
    7a32:	f000 ffb3 	bl	899c <compile_node>
        if (i + 1 < n) {
    7a36:	697b      	ldr	r3, [r7, #20]
    7a38:	1c5a      	adds	r2, r3, #1
    7a3a:	68bb      	ldr	r3, [r7, #8]
    7a3c:	429a      	cmp	r2, r3
    7a3e:	da06      	bge.n	7a4e <compile_or_and_test+0x5a>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a44:	7cf9      	ldrb	r1, [r7, #19]
    7a46:	68fa      	ldr	r2, [r7, #12]
    7a48:	4618      	mov	r0, r3
    7a4a:	f002 feaf 	bl	a7ac <mp_emit_bc_jump_if_or_pop>
    for (int i = 0; i < n; i += 1) {
    7a4e:	697b      	ldr	r3, [r7, #20]
    7a50:	3301      	adds	r3, #1
    7a52:	617b      	str	r3, [r7, #20]
    7a54:	697a      	ldr	r2, [r7, #20]
    7a56:	68bb      	ldr	r3, [r7, #8]
    7a58:	429a      	cmp	r2, r3
    7a5a:	dbe3      	blt.n	7a24 <compile_or_and_test+0x30>
        }
    }
    EMIT_ARG(label_assign, l_end);
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a60:	68f9      	ldr	r1, [r7, #12]
    7a62:	4618      	mov	r0, r3
    7a64:	f002 fbe4 	bl	a230 <mp_emit_bc_label_assign>
}
    7a68:	bf00      	nop
    7a6a:	3718      	adds	r7, #24
    7a6c:	46bd      	mov	sp, r7
    7a6e:	bd80      	pop	{r7, pc}

00007a70 <compile_not_test_2>:

STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a70:	b580      	push	{r7, lr}
    7a72:	b082      	sub	sp, #8
    7a74:	af00      	add	r7, sp, #0
    7a76:	6078      	str	r0, [r7, #4]
    7a78:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    7a7a:	683b      	ldr	r3, [r7, #0]
    7a7c:	689b      	ldr	r3, [r3, #8]
    7a7e:	4619      	mov	r1, r3
    7a80:	6878      	ldr	r0, [r7, #4]
    7a82:	f000 ff8b 	bl	899c <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    7a86:	687b      	ldr	r3, [r7, #4]
    7a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a8a:	2103      	movs	r1, #3
    7a8c:	4618      	mov	r0, r3
    7a8e:	f002 ffa5 	bl	a9dc <mp_emit_bc_unary_op>
}
    7a92:	bf00      	nop
    7a94:	3708      	adds	r7, #8
    7a96:	46bd      	mov	sp, r7
    7a98:	bd80      	pop	{r7, pc}
    7a9a:	bf00      	nop

00007a9c <compile_comparison>:

STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a9c:	b580      	push	{r7, lr}
    7a9e:	b08a      	sub	sp, #40	; 0x28
    7aa0:	af00      	add	r7, sp, #0
    7aa2:	6078      	str	r0, [r7, #4]
    7aa4:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7aa6:	683b      	ldr	r3, [r7, #0]
    7aa8:	685b      	ldr	r3, [r3, #4]
    7aaa:	0a1b      	lsrs	r3, r3, #8
    7aac:	61bb      	str	r3, [r7, #24]
    compile_node(comp, pns->nodes[0]);
    7aae:	683b      	ldr	r3, [r7, #0]
    7ab0:	689b      	ldr	r3, [r3, #8]
    7ab2:	4619      	mov	r1, r3
    7ab4:	6878      	ldr	r0, [r7, #4]
    7ab6:	f000 ff71 	bl	899c <compile_node>
    bool multi = (num_nodes > 3);
    7aba:	69bb      	ldr	r3, [r7, #24]
    7abc:	2b03      	cmp	r3, #3
    7abe:	bfcc      	ite	gt
    7ac0:	2301      	movgt	r3, #1
    7ac2:	2300      	movle	r3, #0
    7ac4:	75fb      	strb	r3, [r7, #23]
    uint l_fail = 0;
    7ac6:	2300      	movs	r3, #0
    7ac8:	627b      	str	r3, [r7, #36]	; 0x24
    if (multi) {
    7aca:	7dfb      	ldrb	r3, [r7, #23]
    7acc:	2b00      	cmp	r3, #0
    7ace:	d003      	beq.n	7ad8 <compile_comparison+0x3c>
        l_fail = comp_next_label(comp);
    7ad0:	6878      	ldr	r0, [r7, #4]
    7ad2:	f7fd f979 	bl	4dc8 <comp_next_label>
    7ad6:	6278      	str	r0, [r7, #36]	; 0x24
    }
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7ad8:	2301      	movs	r3, #1
    7ada:	623b      	str	r3, [r7, #32]
    7adc:	e0b7      	b.n	7c4e <compile_comparison+0x1b2>
        compile_node(comp, pns->nodes[i + 1]);
    7ade:	6a3b      	ldr	r3, [r7, #32]
    7ae0:	1c5a      	adds	r2, r3, #1
    7ae2:	683b      	ldr	r3, [r7, #0]
    7ae4:	3202      	adds	r2, #2
    7ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7aea:	4619      	mov	r1, r3
    7aec:	6878      	ldr	r0, [r7, #4]
    7aee:	f000 ff55 	bl	899c <compile_node>
        if (i + 2 < num_nodes) {
    7af2:	6a3b      	ldr	r3, [r7, #32]
    7af4:	1c9a      	adds	r2, r3, #2
    7af6:	69bb      	ldr	r3, [r7, #24]
    7af8:	429a      	cmp	r2, r3
    7afa:	da09      	bge.n	7b10 <compile_comparison+0x74>
            EMIT(dup_top);
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b00:	4618      	mov	r0, r3
    7b02:	f002 fdd1 	bl	a6a8 <mp_emit_bc_dup_top>
            EMIT(rot_three);
    7b06:	687b      	ldr	r3, [r7, #4]
    7b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b0a:	4618      	mov	r0, r3
    7b0c:	f002 fe0e 	bl	a72c <mp_emit_bc_rot_three>
        }
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    7b10:	683b      	ldr	r3, [r7, #0]
    7b12:	6a3a      	ldr	r2, [r7, #32]
    7b14:	3202      	adds	r2, #2
    7b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b1a:	f003 030f 	and.w	r3, r3, #15
    7b1e:	2b0e      	cmp	r3, #14
    7b20:	d140      	bne.n	7ba4 <compile_comparison+0x108>
            mp_binary_op_t op;
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    7b22:	683b      	ldr	r3, [r7, #0]
    7b24:	6a3a      	ldr	r2, [r7, #32]
    7b26:	3202      	adds	r2, #2
    7b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b2c:	091b      	lsrs	r3, r3, #4
    7b2e:	3b36      	subs	r3, #54	; 0x36
    7b30:	2b0b      	cmp	r3, #11
    7b32:	d82d      	bhi.n	7b90 <compile_comparison+0xf4>
    7b34:	a201      	add	r2, pc, #4	; (adr r2, 7b3c <compile_comparison+0xa0>)
    7b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7b3a:	bf00      	nop
    7b3c:	00007b6d 	.word	0x00007b6d
    7b40:	00007b91 	.word	0x00007b91
    7b44:	00007b73 	.word	0x00007b73
    7b48:	00007b91 	.word	0x00007b91
    7b4c:	00007b91 	.word	0x00007b91
    7b50:	00007b91 	.word	0x00007b91
    7b54:	00007b91 	.word	0x00007b91
    7b58:	00007b91 	.word	0x00007b91
    7b5c:	00007b7f 	.word	0x00007b7f
    7b60:	00007b85 	.word	0x00007b85
    7b64:	00007b79 	.word	0x00007b79
    7b68:	00007b8b 	.word	0x00007b8b
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    7b6c:	2300      	movs	r3, #0
    7b6e:	61fb      	str	r3, [r7, #28]
    7b70:	e011      	b.n	7b96 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    7b72:	2301      	movs	r3, #1
    7b74:	61fb      	str	r3, [r7, #28]
    7b76:	e00e      	b.n	7b96 <compile_comparison+0xfa>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    7b78:	2302      	movs	r3, #2
    7b7a:	61fb      	str	r3, [r7, #28]
    7b7c:	e00b      	b.n	7b96 <compile_comparison+0xfa>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    7b7e:	2303      	movs	r3, #3
    7b80:	61fb      	str	r3, [r7, #28]
    7b82:	e008      	b.n	7b96 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    7b84:	2304      	movs	r3, #4
    7b86:	61fb      	str	r3, [r7, #28]
    7b88:	e005      	b.n	7b96 <compile_comparison+0xfa>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    7b8a:	2305      	movs	r3, #5
    7b8c:	61fb      	str	r3, [r7, #28]
    7b8e:	e002      	b.n	7b96 <compile_comparison+0xfa>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    7b90:	2306      	movs	r3, #6
    7b92:	61fb      	str	r3, [r7, #28]
    7b94:	bf00      	nop
            }
            EMIT_ARG(binary_op, op);
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b9a:	69f9      	ldr	r1, [r7, #28]
    7b9c:	4618      	mov	r0, r3
    7b9e:	f002 ff33 	bl	aa08 <mp_emit_bc_binary_op>
    7ba2:	e045      	b.n	7c30 <compile_comparison+0x194>
        } else {
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    7ba4:	683b      	ldr	r3, [r7, #0]
    7ba6:	6a3a      	ldr	r2, [r7, #32]
    7ba8:	3202      	adds	r2, #2
    7baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d008      	beq.n	7bc4 <compile_comparison+0x128>
    7bb2:	683b      	ldr	r3, [r7, #0]
    7bb4:	6a3a      	ldr	r2, [r7, #32]
    7bb6:	3202      	adds	r2, #2
    7bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bbc:	f003 0303 	and.w	r3, r3, #3
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	d006      	beq.n	7bd2 <compile_comparison+0x136>
    7bc4:	4b3b      	ldr	r3, [pc, #236]	; (7cb4 <compile_comparison+0x218>)
    7bc6:	4a3c      	ldr	r2, [pc, #240]	; (7cb8 <compile_comparison+0x21c>)
    7bc8:	f640 012e 	movw	r1, #2094	; 0x82e
    7bcc:	483b      	ldr	r0, [pc, #236]	; (7cbc <compile_comparison+0x220>)
    7bce:	f013 fbe5 	bl	1b39c <__assert_func>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[i];
    7bd2:	683b      	ldr	r3, [r7, #0]
    7bd4:	6a3a      	ldr	r2, [r7, #32]
    7bd6:	3202      	adds	r2, #2
    7bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bdc:	613b      	str	r3, [r7, #16]
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    7bde:	693b      	ldr	r3, [r7, #16]
    7be0:	685b      	ldr	r3, [r3, #4]
    7be2:	b2db      	uxtb	r3, r3
    7be4:	60fb      	str	r3, [r7, #12]
            if (kind == PN_comp_op_not_in) {
    7be6:	68fb      	ldr	r3, [r7, #12]
    7be8:	2b7d      	cmp	r3, #125	; 0x7d
    7bea:	d106      	bne.n	7bfa <compile_comparison+0x15e>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bf0:	2124      	movs	r1, #36	; 0x24
    7bf2:	4618      	mov	r0, r3
    7bf4:	f002 ff08 	bl	aa08 <mp_emit_bc_binary_op>
    7bf8:	e01a      	b.n	7c30 <compile_comparison+0x194>
            } else {
                assert(kind == PN_comp_op_is); // should be
    7bfa:	68fb      	ldr	r3, [r7, #12]
    7bfc:	2b7e      	cmp	r3, #126	; 0x7e
    7bfe:	d006      	beq.n	7c0e <compile_comparison+0x172>
    7c00:	4b2f      	ldr	r3, [pc, #188]	; (7cc0 <compile_comparison+0x224>)
    7c02:	4a2d      	ldr	r2, [pc, #180]	; (7cb8 <compile_comparison+0x21c>)
    7c04:	f640 0134 	movw	r1, #2100	; 0x834
    7c08:	482c      	ldr	r0, [pc, #176]	; (7cbc <compile_comparison+0x220>)
    7c0a:	f013 fbc7 	bl	1b39c <__assert_func>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    7c0e:	693b      	ldr	r3, [r7, #16]
    7c10:	689b      	ldr	r3, [r3, #8]
    7c12:	2b00      	cmp	r3, #0
    7c14:	d106      	bne.n	7c24 <compile_comparison+0x188>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    7c16:	687b      	ldr	r3, [r7, #4]
    7c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c1a:	2107      	movs	r1, #7
    7c1c:	4618      	mov	r0, r3
    7c1e:	f002 fef3 	bl	aa08 <mp_emit_bc_binary_op>
    7c22:	e005      	b.n	7c30 <compile_comparison+0x194>
                } else {
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c28:	2125      	movs	r1, #37	; 0x25
    7c2a:	4618      	mov	r0, r3
    7c2c:	f002 feec 	bl	aa08 <mp_emit_bc_binary_op>
                }
            }
        }
        if (i + 2 < num_nodes) {
    7c30:	6a3b      	ldr	r3, [r7, #32]
    7c32:	1c9a      	adds	r2, r3, #2
    7c34:	69bb      	ldr	r3, [r7, #24]
    7c36:	429a      	cmp	r2, r3
    7c38:	da06      	bge.n	7c48 <compile_comparison+0x1ac>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    7c3a:	687b      	ldr	r3, [r7, #4]
    7c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7c40:	2100      	movs	r1, #0
    7c42:	4618      	mov	r0, r3
    7c44:	f002 fdb2 	bl	a7ac <mp_emit_bc_jump_if_or_pop>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7c48:	6a3b      	ldr	r3, [r7, #32]
    7c4a:	3302      	adds	r3, #2
    7c4c:	623b      	str	r3, [r7, #32]
    7c4e:	6a3b      	ldr	r3, [r7, #32]
    7c50:	1c5a      	adds	r2, r3, #1
    7c52:	69bb      	ldr	r3, [r7, #24]
    7c54:	429a      	cmp	r2, r3
    7c56:	f6ff af42 	blt.w	7ade <compile_comparison+0x42>
        }
    }
    if (multi) {
    7c5a:	7dfb      	ldrb	r3, [r7, #23]
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d025      	beq.n	7cac <compile_comparison+0x210>
        uint l_end = comp_next_label(comp);
    7c60:	6878      	ldr	r0, [r7, #4]
    7c62:	f7fd f8b1 	bl	4dc8 <comp_next_label>
    7c66:	60b8      	str	r0, [r7, #8]
        EMIT_ARG(jump, l_end);
    7c68:	687b      	ldr	r3, [r7, #4]
    7c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c6c:	68b9      	ldr	r1, [r7, #8]
    7c6e:	4618      	mov	r0, r3
    7c70:	f002 fd6c 	bl	a74c <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    7c74:	687b      	ldr	r3, [r7, #4]
    7c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7c7a:	4618      	mov	r0, r3
    7c7c:	f002 fad8 	bl	a230 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    7c80:	687b      	ldr	r3, [r7, #4]
    7c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c84:	2101      	movs	r1, #1
    7c86:	4618      	mov	r0, r3
    7c88:	f002 fa80 	bl	a18c <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c90:	4618      	mov	r0, r3
    7c92:	f002 fd3b 	bl	a70c <mp_emit_bc_rot_two>
        EMIT(pop_top);
    7c96:	687b      	ldr	r3, [r7, #4]
    7c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c9a:	4618      	mov	r0, r3
    7c9c:	f002 fd24 	bl	a6e8 <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    7ca0:	687b      	ldr	r3, [r7, #4]
    7ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ca4:	68b9      	ldr	r1, [r7, #8]
    7ca6:	4618      	mov	r0, r3
    7ca8:	f002 fac2 	bl	a230 <mp_emit_bc_label_assign>
    }
}
    7cac:	bf00      	nop
    7cae:	3728      	adds	r7, #40	; 0x28
    7cb0:	46bd      	mov	sp, r7
    7cb2:	bd80      	pop	{r7, pc}
    7cb4:	0001e914 	.word	0x0001e914
    7cb8:	0001f01c 	.word	0x0001f01c
    7cbc:	0001e310 	.word	0x0001e310
    7cc0:	0001e93c 	.word	0x0001e93c

00007cc4 <compile_star_expr>:

STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7cc4:	b580      	push	{r7, lr}
    7cc6:	b082      	sub	sp, #8
    7cc8:	af00      	add	r7, sp, #0
    7cca:	6078      	str	r0, [r7, #4]
    7ccc:	6039      	str	r1, [r7, #0]
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    7cce:	683b      	ldr	r3, [r7, #0]
    7cd0:	4a04      	ldr	r2, [pc, #16]	; (7ce4 <compile_star_expr+0x20>)
    7cd2:	4619      	mov	r1, r3
    7cd4:	6878      	ldr	r0, [r7, #4]
    7cd6:	f7fd f85b 	bl	4d90 <compile_syntax_error>
}
    7cda:	bf00      	nop
    7cdc:	3708      	adds	r7, #8
    7cde:	46bd      	mov	sp, r7
    7ce0:	bd80      	pop	{r7, pc}
    7ce2:	bf00      	nop
    7ce4:	0001e954 	.word	0x0001e954

00007ce8 <compile_binary_op>:

STATIC void compile_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7ce8:	b580      	push	{r7, lr}
    7cea:	b086      	sub	sp, #24
    7cec:	af00      	add	r7, sp, #0
    7cee:	6078      	str	r0, [r7, #4]
    7cf0:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_xor_expr - PN_expr == MP_BINARY_OP_XOR);
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_and_expr - PN_expr == MP_BINARY_OP_AND);
    mp_binary_op_t binary_op = MP_BINARY_OP_OR + MP_PARSE_NODE_STRUCT_KIND(pns) - PN_expr;
    7cf2:	683b      	ldr	r3, [r7, #0]
    7cf4:	685b      	ldr	r3, [r3, #4]
    7cf6:	b2db      	uxtb	r3, r3
    7cf8:	3b0c      	subs	r3, #12
    7cfa:	613b      	str	r3, [r7, #16]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7cfc:	683b      	ldr	r3, [r7, #0]
    7cfe:	685b      	ldr	r3, [r3, #4]
    7d00:	0a1b      	lsrs	r3, r3, #8
    7d02:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7d04:	683b      	ldr	r3, [r7, #0]
    7d06:	689b      	ldr	r3, [r3, #8]
    7d08:	4619      	mov	r1, r3
    7d0a:	6878      	ldr	r0, [r7, #4]
    7d0c:	f000 fe46 	bl	899c <compile_node>
    for (int i = 1; i < num_nodes; ++i) {
    7d10:	2301      	movs	r3, #1
    7d12:	617b      	str	r3, [r7, #20]
    7d14:	e011      	b.n	7d3a <compile_binary_op+0x52>
        compile_node(comp, pns->nodes[i]);
    7d16:	683b      	ldr	r3, [r7, #0]
    7d18:	697a      	ldr	r2, [r7, #20]
    7d1a:	3202      	adds	r2, #2
    7d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d20:	4619      	mov	r1, r3
    7d22:	6878      	ldr	r0, [r7, #4]
    7d24:	f000 fe3a 	bl	899c <compile_node>
        EMIT_ARG(binary_op, binary_op);
    7d28:	687b      	ldr	r3, [r7, #4]
    7d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d2c:	6939      	ldr	r1, [r7, #16]
    7d2e:	4618      	mov	r0, r3
    7d30:	f002 fe6a 	bl	aa08 <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; ++i) {
    7d34:	697b      	ldr	r3, [r7, #20]
    7d36:	3301      	adds	r3, #1
    7d38:	617b      	str	r3, [r7, #20]
    7d3a:	697a      	ldr	r2, [r7, #20]
    7d3c:	68fb      	ldr	r3, [r7, #12]
    7d3e:	429a      	cmp	r2, r3
    7d40:	dbe9      	blt.n	7d16 <compile_binary_op+0x2e>
    }
}
    7d42:	bf00      	nop
    7d44:	3718      	adds	r7, #24
    7d46:	46bd      	mov	sp, r7
    7d48:	bd80      	pop	{r7, pc}
    7d4a:	bf00      	nop

00007d4c <compile_term>:

STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d4c:	b580      	push	{r7, lr}
    7d4e:	b086      	sub	sp, #24
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
    7d54:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7d56:	683b      	ldr	r3, [r7, #0]
    7d58:	685b      	ldr	r3, [r3, #4]
    7d5a:	0a1b      	lsrs	r3, r3, #8
    7d5c:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7d5e:	683b      	ldr	r3, [r7, #0]
    7d60:	689b      	ldr	r3, [r3, #8]
    7d62:	4619      	mov	r1, r3
    7d64:	6878      	ldr	r0, [r7, #4]
    7d66:	f000 fe19 	bl	899c <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7d6a:	2301      	movs	r3, #1
    7d6c:	617b      	str	r3, [r7, #20]
    7d6e:	e054      	b.n	7e1a <compile_term+0xce>
        compile_node(comp, pns->nodes[i + 1]);
    7d70:	697b      	ldr	r3, [r7, #20]
    7d72:	1c5a      	adds	r2, r3, #1
    7d74:	683b      	ldr	r3, [r7, #0]
    7d76:	3202      	adds	r2, #2
    7d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d7c:	4619      	mov	r1, r3
    7d7e:	6878      	ldr	r0, [r7, #4]
    7d80:	f000 fe0c 	bl	899c <compile_node>
        mp_binary_op_t op;
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    7d84:	683b      	ldr	r3, [r7, #0]
    7d86:	697a      	ldr	r2, [r7, #20]
    7d88:	3202      	adds	r2, #2
    7d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d8e:	091b      	lsrs	r3, r3, #4
    7d90:	60bb      	str	r3, [r7, #8]
        switch (tok) {
    7d92:	68bb      	ldr	r3, [r7, #8]
    7d94:	3b2f      	subs	r3, #47	; 0x2f
    7d96:	2b08      	cmp	r3, #8
    7d98:	d829      	bhi.n	7dee <compile_term+0xa2>
    7d9a:	a201      	add	r2, pc, #4	; (adr r2, 7da0 <compile_term+0x54>)
    7d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7da0:	00007dc5 	.word	0x00007dc5
    7da4:	00007dcb 	.word	0x00007dcb
    7da8:	00007dd1 	.word	0x00007dd1
    7dac:	00007def 	.word	0x00007def
    7db0:	00007ddd 	.word	0x00007ddd
    7db4:	00007dd7 	.word	0x00007dd7
    7db8:	00007de3 	.word	0x00007de3
    7dbc:	00007def 	.word	0x00007def
    7dc0:	00007de9 	.word	0x00007de9
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    7dc4:	231a      	movs	r3, #26
    7dc6:	613b      	str	r3, [r7, #16]
    7dc8:	e01e      	b.n	7e08 <compile_term+0xbc>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    7dca:	231b      	movs	r3, #27
    7dcc:	613b      	str	r3, [r7, #16]
    7dce:	e01b      	b.n	7e08 <compile_term+0xbc>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    7dd0:	231c      	movs	r3, #28
    7dd2:	613b      	str	r3, [r7, #16]
    7dd4:	e018      	b.n	7e08 <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    7dd6:	231d      	movs	r3, #29
    7dd8:	613b      	str	r3, [r7, #16]
    7dda:	e015      	b.n	7e08 <compile_term+0xbc>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    7ddc:	231e      	movs	r3, #30
    7dde:	613b      	str	r3, [r7, #16]
    7de0:	e012      	b.n	7e08 <compile_term+0xbc>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    7de2:	231f      	movs	r3, #31
    7de4:	613b      	str	r3, [r7, #16]
    7de6:	e00f      	b.n	7e08 <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    7de8:	2318      	movs	r3, #24
    7dea:	613b      	str	r3, [r7, #16]
    7dec:	e00c      	b.n	7e08 <compile_term+0xbc>
            default:
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    7dee:	68bb      	ldr	r3, [r7, #8]
    7df0:	2b39      	cmp	r3, #57	; 0x39
    7df2:	d006      	beq.n	7e02 <compile_term+0xb6>
    7df4:	4b0d      	ldr	r3, [pc, #52]	; (7e2c <compile_term+0xe0>)
    7df6:	4a0e      	ldr	r2, [pc, #56]	; (7e30 <compile_term+0xe4>)
    7df8:	f640 016b 	movw	r1, #2155	; 0x86b
    7dfc:	480d      	ldr	r0, [pc, #52]	; (7e34 <compile_term+0xe8>)
    7dfe:	f013 facd 	bl	1b39c <__assert_func>
                op = MP_BINARY_OP_RSHIFT;
    7e02:	2319      	movs	r3, #25
    7e04:	613b      	str	r3, [r7, #16]
                break;
    7e06:	bf00      	nop
        }
        EMIT_ARG(binary_op, op);
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e0c:	6939      	ldr	r1, [r7, #16]
    7e0e:	4618      	mov	r0, r3
    7e10:	f002 fdfa 	bl	aa08 <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7e14:	697b      	ldr	r3, [r7, #20]
    7e16:	3302      	adds	r3, #2
    7e18:	617b      	str	r3, [r7, #20]
    7e1a:	697b      	ldr	r3, [r7, #20]
    7e1c:	1c5a      	adds	r2, r3, #1
    7e1e:	68fb      	ldr	r3, [r7, #12]
    7e20:	429a      	cmp	r2, r3
    7e22:	dba5      	blt.n	7d70 <compile_term+0x24>
    }
}
    7e24:	bf00      	nop
    7e26:	3718      	adds	r7, #24
    7e28:	46bd      	mov	sp, r7
    7e2a:	bd80      	pop	{r7, pc}
    7e2c:	0001e974 	.word	0x0001e974
    7e30:	0001f030 	.word	0x0001f030
    7e34:	0001e310 	.word	0x0001e310

00007e38 <compile_factor_2>:

STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e38:	b580      	push	{r7, lr}
    7e3a:	b084      	sub	sp, #16
    7e3c:	af00      	add	r7, sp, #0
    7e3e:	6078      	str	r0, [r7, #4]
    7e40:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[1]);
    7e42:	683b      	ldr	r3, [r7, #0]
    7e44:	68db      	ldr	r3, [r3, #12]
    7e46:	4619      	mov	r1, r3
    7e48:	6878      	ldr	r0, [r7, #4]
    7e4a:	f000 fda7 	bl	899c <compile_node>
    mp_unary_op_t op;
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    7e4e:	683b      	ldr	r3, [r7, #0]
    7e50:	689b      	ldr	r3, [r3, #8]
    7e52:	091b      	lsrs	r3, r3, #4
    7e54:	60bb      	str	r3, [r7, #8]
    switch (tok) {
    7e56:	68bb      	ldr	r3, [r7, #8]
    7e58:	2b2f      	cmp	r3, #47	; 0x2f
    7e5a:	d002      	beq.n	7e62 <compile_factor_2+0x2a>
    7e5c:	2b30      	cmp	r3, #48	; 0x30
    7e5e:	d003      	beq.n	7e68 <compile_factor_2+0x30>
    7e60:	e005      	b.n	7e6e <compile_factor_2+0x36>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    7e62:	2300      	movs	r3, #0
    7e64:	60fb      	str	r3, [r7, #12]
    7e66:	e00f      	b.n	7e88 <compile_factor_2+0x50>
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    7e68:	2301      	movs	r3, #1
    7e6a:	60fb      	str	r3, [r7, #12]
    7e6c:	e00c      	b.n	7e88 <compile_factor_2+0x50>
        default:
            assert(tok == MP_TOKEN_OP_TILDE);
    7e6e:	68bb      	ldr	r3, [r7, #8]
    7e70:	2b3d      	cmp	r3, #61	; 0x3d
    7e72:	d006      	beq.n	7e82 <compile_factor_2+0x4a>
    7e74:	4b09      	ldr	r3, [pc, #36]	; (7e9c <compile_factor_2+0x64>)
    7e76:	4a0a      	ldr	r2, [pc, #40]	; (7ea0 <compile_factor_2+0x68>)
    7e78:	f640 017b 	movw	r1, #2171	; 0x87b
    7e7c:	4809      	ldr	r0, [pc, #36]	; (7ea4 <compile_factor_2+0x6c>)
    7e7e:	f013 fa8d 	bl	1b39c <__assert_func>
            op = MP_UNARY_OP_INVERT;
    7e82:	2302      	movs	r3, #2
    7e84:	60fb      	str	r3, [r7, #12]
            break;
    7e86:	bf00      	nop
    }
    EMIT_ARG(unary_op, op);
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e8c:	68f9      	ldr	r1, [r7, #12]
    7e8e:	4618      	mov	r0, r3
    7e90:	f002 fda4 	bl	a9dc <mp_emit_bc_unary_op>
}
    7e94:	bf00      	nop
    7e96:	3710      	adds	r7, #16
    7e98:	46bd      	mov	sp, r7
    7e9a:	bd80      	pop	{r7, pc}
    7e9c:	0001e990 	.word	0x0001e990
    7ea0:	0001f040 	.word	0x0001f040
    7ea4:	0001e310 	.word	0x0001e310

00007ea8 <compile_atom_expr_normal>:

STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7ea8:	b580      	push	{r7, lr}
    7eaa:	b08c      	sub	sp, #48	; 0x30
    7eac:	af00      	add	r7, sp, #0
    7eae:	6078      	str	r0, [r7, #4]
    7eb0:	6039      	str	r1, [r7, #0]
    // compile the subject of the expression
    compile_node(comp, pns->nodes[0]);
    7eb2:	683b      	ldr	r3, [r7, #0]
    7eb4:	689b      	ldr	r3, [r3, #8]
    7eb6:	4619      	mov	r1, r3
    7eb8:	6878      	ldr	r0, [r7, #4]
    7eba:	f000 fd6f 	bl	899c <compile_node>

    // compile_atom_expr_await may call us with a NULL node
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7ebe:	683b      	ldr	r3, [r7, #0]
    7ec0:	68db      	ldr	r3, [r3, #12]
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	f000 80ec 	beq.w	80a0 <compile_atom_expr_normal+0x1f8>
        return;
    }

    // get the array of trailers (known to be an array of PARSE_NODE_STRUCT)
    size_t num_trail = 1;
    7ec8:	2301      	movs	r3, #1
    7eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    7ecc:	683b      	ldr	r3, [r7, #0]
    7ece:	330c      	adds	r3, #12
    7ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    7ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ed4:	681b      	ldr	r3, [r3, #0]
    7ed6:	685b      	ldr	r3, [r3, #4]
    7ed8:	b2db      	uxtb	r3, r3
    7eda:	2b86      	cmp	r3, #134	; 0x86
    7edc:	d108      	bne.n	7ef0 <compile_atom_expr_normal+0x48>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    7ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ee0:	681b      	ldr	r3, [r3, #0]
    7ee2:	685b      	ldr	r3, [r3, #4]
    7ee4:	0a1b      	lsrs	r3, r3, #8
    7ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    7ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eea:	681b      	ldr	r3, [r3, #0]
    7eec:	3308      	adds	r3, #8
    7eee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    // the current index into the array of trailers
    size_t i = 0;
    7ef0:	2300      	movs	r3, #0
    7ef2:	627b      	str	r3, [r7, #36]	; 0x24

    // handle special super() call
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    7ef4:	687b      	ldr	r3, [r7, #4]
    7ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ef8:	681b      	ldr	r3, [r3, #0]
    7efa:	2b07      	cmp	r3, #7
    7efc:	f040 80cb 	bne.w	8096 <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    7f00:	683b      	ldr	r3, [r7, #0]
    7f02:	689b      	ldr	r3, [r3, #8]
    7f04:	f003 030f 	and.w	r3, r3, #15
    7f08:	2b02      	cmp	r3, #2
    7f0a:	f040 80c4 	bne.w	8096 <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    7f0e:	683b      	ldr	r3, [r7, #0]
    7f10:	689b      	ldr	r3, [r3, #8]
    7f12:	091b      	lsrs	r3, r3, #4
    7f14:	2bd7      	cmp	r3, #215	; 0xd7
    7f16:	f040 80be 	bne.w	8096 <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    7f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f1c:	681b      	ldr	r3, [r3, #0]
    7f1e:	685b      	ldr	r3, [r3, #4]
    7f20:	b2db      	uxtb	r3, r3
    7f22:	2b2d      	cmp	r3, #45	; 0x2d
    7f24:	f040 80b7 	bne.w	8096 <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    7f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f2a:	681b      	ldr	r3, [r3, #0]
    7f2c:	689b      	ldr	r3, [r3, #8]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	f040 80b1 	bne.w	8096 <compile_atom_expr_normal+0x1ee>
        // at this point we have matched "super()" within a function

        // load the class for super to search for a parent
        compile_load_id(comp, MP_QSTR___class__);
    7f34:	2106      	movs	r1, #6
    7f36:	6878      	ldr	r0, [r7, #4]
    7f38:	f7fd f82c 	bl	4f94 <compile_load_id>

        // look for first argument to function (assumes it's "self")
        bool found = false;
    7f3c:	2300      	movs	r3, #0
    7f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        id_info_t *id = &comp->scope_cur->id_info[0];
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f48:	61fb      	str	r3, [r7, #28]
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7f50:	61bb      	str	r3, [r7, #24]
    7f52:	e015      	b.n	7f80 <compile_atom_expr_normal+0xd8>
            if (id->flags & ID_FLAG_IS_PARAM) {
    7f54:	69fb      	ldr	r3, [r7, #28]
    7f56:	785b      	ldrb	r3, [r3, #1]
    7f58:	f003 0301 	and.w	r3, r3, #1
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d009      	beq.n	7f74 <compile_atom_expr_normal+0xcc>
                // first argument found; load it
                compile_load_id(comp, id->qst);
    7f60:	69fb      	ldr	r3, [r7, #28]
    7f62:	685b      	ldr	r3, [r3, #4]
    7f64:	4619      	mov	r1, r3
    7f66:	6878      	ldr	r0, [r7, #4]
    7f68:	f7fd f814 	bl	4f94 <compile_load_id>
                found = true;
    7f6c:	2301      	movs	r3, #1
    7f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                break;
    7f72:	e008      	b.n	7f86 <compile_atom_expr_normal+0xde>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    7f74:	69bb      	ldr	r3, [r7, #24]
    7f76:	3b01      	subs	r3, #1
    7f78:	61bb      	str	r3, [r7, #24]
    7f7a:	69fb      	ldr	r3, [r7, #28]
    7f7c:	3308      	adds	r3, #8
    7f7e:	61fb      	str	r3, [r7, #28]
    7f80:	69bb      	ldr	r3, [r7, #24]
    7f82:	2b00      	cmp	r3, #0
    7f84:	d1e6      	bne.n	7f54 <compile_atom_expr_normal+0xac>
            }
        }
        if (!found) {
    7f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7f8a:	f083 0301 	eor.w	r3, r3, #1
    7f8e:	b2db      	uxtb	r3, r3
    7f90:	2b00      	cmp	r3, #0
    7f92:	d007      	beq.n	7fa4 <compile_atom_expr_normal+0xfc>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    7f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f96:	681b      	ldr	r3, [r3, #0]
    7f98:	4a43      	ldr	r2, [pc, #268]	; (80a8 <compile_atom_expr_normal+0x200>)
    7f9a:	4619      	mov	r1, r3
    7f9c:	6878      	ldr	r0, [r7, #4]
    7f9e:	f7fc fef7 	bl	4d90 <compile_syntax_error>
                "super() can't find self"); // really a TypeError
            return;
    7fa2:	e07e      	b.n	80a2 <compile_atom_expr_normal+0x1fa>
        }

        if (num_trail >= 3
    7fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7fa6:	2b02      	cmp	r3, #2
    7fa8:	d926      	bls.n	7ff8 <compile_atom_expr_normal+0x150>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    7faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fac:	3304      	adds	r3, #4
    7fae:	681b      	ldr	r3, [r3, #0]
    7fb0:	685b      	ldr	r3, [r3, #4]
    7fb2:	b2db      	uxtb	r3, r3
    7fb4:	2b2f      	cmp	r3, #47	; 0x2f
    7fb6:	d11f      	bne.n	7ff8 <compile_atom_expr_normal+0x150>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    7fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fba:	3308      	adds	r3, #8
    7fbc:	681b      	ldr	r3, [r3, #0]
    7fbe:	685b      	ldr	r3, [r3, #4]
    7fc0:	b2db      	uxtb	r3, r3
    7fc2:	2b2d      	cmp	r3, #45	; 0x2d
    7fc4:	d118      	bne.n	7ff8 <compile_atom_expr_normal+0x150>
            // optimisation for method calls super().f(...), to eliminate heap allocation
            mp_parse_node_struct_t *pns_period = pns_trail[1];
    7fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fc8:	685b      	ldr	r3, [r3, #4]
    7fca:	617b      	str	r3, [r7, #20]
            mp_parse_node_struct_t *pns_paren = pns_trail[2];
    7fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fce:	689b      	ldr	r3, [r3, #8]
    7fd0:	613b      	str	r3, [r7, #16]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7fd6:	697b      	ldr	r3, [r7, #20]
    7fd8:	689b      	ldr	r3, [r3, #8]
    7fda:	091b      	lsrs	r3, r3, #4
    7fdc:	2201      	movs	r2, #1
    7fde:	4619      	mov	r1, r3
    7fe0:	f002 fa76 	bl	a4d0 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    7fe4:	693b      	ldr	r3, [r7, #16]
    7fe6:	6899      	ldr	r1, [r3, #8]
    7fe8:	2300      	movs	r3, #0
    7fea:	2201      	movs	r2, #1
    7fec:	6878      	ldr	r0, [r7, #4]
    7fee:	f000 f871 	bl	80d4 <compile_trailer_paren_helper>
            i = 3;
    7ff2:	2303      	movs	r3, #3
    7ff4:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    7ff6:	e008      	b.n	800a <compile_atom_expr_normal+0x162>
        } else {
            // a super() call
            EMIT_ARG(call_function, 2, 0, 0);
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7ffc:	2300      	movs	r3, #0
    7ffe:	2200      	movs	r2, #0
    8000:	2102      	movs	r1, #2
    8002:	f002 fe6b 	bl	acdc <mp_emit_bc_call_function>
            i = 1;
    8006:	2301      	movs	r3, #1
    8008:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    // compile the remaining trailers
    for (; i < num_trail; i++) {
    800a:	e044      	b.n	8096 <compile_atom_expr_normal+0x1ee>
        if (i + 1 < num_trail
    800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    800e:	1c5a      	adds	r2, r3, #1
    8010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8012:	429a      	cmp	r2, r3
    8014:	d233      	bcs.n	807e <compile_atom_expr_normal+0x1d6>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    8016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8018:	009b      	lsls	r3, r3, #2
    801a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    801c:	4413      	add	r3, r2
    801e:	681b      	ldr	r3, [r3, #0]
    8020:	685b      	ldr	r3, [r3, #4]
    8022:	b2db      	uxtb	r3, r3
    8024:	2b2f      	cmp	r3, #47	; 0x2f
    8026:	d12a      	bne.n	807e <compile_atom_expr_normal+0x1d6>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    8028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    802a:	3301      	adds	r3, #1
    802c:	009b      	lsls	r3, r3, #2
    802e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8030:	4413      	add	r3, r2
    8032:	681b      	ldr	r3, [r3, #0]
    8034:	685b      	ldr	r3, [r3, #4]
    8036:	b2db      	uxtb	r3, r3
    8038:	2b2d      	cmp	r3, #45	; 0x2d
    803a:	d120      	bne.n	807e <compile_atom_expr_normal+0x1d6>
            // optimisation for method calls a.f(...), following PyPy
            mp_parse_node_struct_t *pns_period = pns_trail[i];
    803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    803e:	009b      	lsls	r3, r3, #2
    8040:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8042:	4413      	add	r3, r2
    8044:	681b      	ldr	r3, [r3, #0]
    8046:	60fb      	str	r3, [r7, #12]
            mp_parse_node_struct_t *pns_paren = pns_trail[i + 1];
    8048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    804a:	3301      	adds	r3, #1
    804c:	009b      	lsls	r3, r3, #2
    804e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8050:	4413      	add	r3, r2
    8052:	681b      	ldr	r3, [r3, #0]
    8054:	60bb      	str	r3, [r7, #8]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    8056:	687b      	ldr	r3, [r7, #4]
    8058:	6a98      	ldr	r0, [r3, #40]	; 0x28
    805a:	68fb      	ldr	r3, [r7, #12]
    805c:	689b      	ldr	r3, [r3, #8]
    805e:	091b      	lsrs	r3, r3, #4
    8060:	2200      	movs	r2, #0
    8062:	4619      	mov	r1, r3
    8064:	f002 fa34 	bl	a4d0 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    8068:	68bb      	ldr	r3, [r7, #8]
    806a:	6899      	ldr	r1, [r3, #8]
    806c:	2300      	movs	r3, #0
    806e:	2201      	movs	r2, #1
    8070:	6878      	ldr	r0, [r7, #4]
    8072:	f000 f82f 	bl	80d4 <compile_trailer_paren_helper>
            i += 1;
    8076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8078:	3301      	adds	r3, #1
    807a:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    807c:	e008      	b.n	8090 <compile_atom_expr_normal+0x1e8>
        } else {
            // node is one of: trailer_paren, trailer_bracket, trailer_period
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8080:	009b      	lsls	r3, r3, #2
    8082:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8084:	4413      	add	r3, r2
    8086:	681b      	ldr	r3, [r3, #0]
    8088:	4619      	mov	r1, r3
    808a:	6878      	ldr	r0, [r7, #4]
    808c:	f000 fc86 	bl	899c <compile_node>
    for (; i < num_trail; i++) {
    8090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8092:	3301      	adds	r3, #1
    8094:	627b      	str	r3, [r7, #36]	; 0x24
    8096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    809a:	429a      	cmp	r2, r3
    809c:	d3b6      	bcc.n	800c <compile_atom_expr_normal+0x164>
    809e:	e000      	b.n	80a2 <compile_atom_expr_normal+0x1fa>
        return;
    80a0:	bf00      	nop
        }
    }
}
    80a2:	3730      	adds	r7, #48	; 0x30
    80a4:	46bd      	mov	sp, r7
    80a6:	bd80      	pop	{r7, pc}
    80a8:	0001e9ac 	.word	0x0001e9ac

000080ac <compile_power>:

STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    80ac:	b580      	push	{r7, lr}
    80ae:	b082      	sub	sp, #8
    80b0:	af00      	add	r7, sp, #0
    80b2:	6078      	str	r0, [r7, #4]
    80b4:	6039      	str	r1, [r7, #0]
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    80b6:	6839      	ldr	r1, [r7, #0]
    80b8:	6878      	ldr	r0, [r7, #4]
    80ba:	f7fc ff3d 	bl	4f38 <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    80be:	687b      	ldr	r3, [r7, #4]
    80c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    80c2:	2120      	movs	r1, #32
    80c4:	4618      	mov	r0, r3
    80c6:	f002 fc9f 	bl	aa08 <mp_emit_bc_binary_op>
}
    80ca:	bf00      	nop
    80cc:	3708      	adds	r7, #8
    80ce:	46bd      	mov	sp, r7
    80d0:	bd80      	pop	{r7, pc}
    80d2:	bf00      	nop

000080d4 <compile_trailer_paren_helper>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    80d4:	b580      	push	{r7, lr}
    80d6:	b08e      	sub	sp, #56	; 0x38
    80d8:	af00      	add	r7, sp, #0
    80da:	60f8      	str	r0, [r7, #12]
    80dc:	60b9      	str	r1, [r7, #8]
    80de:	603b      	str	r3, [r7, #0]
    80e0:	4613      	mov	r3, r2
    80e2:	71fb      	strb	r3, [r7, #7]
    // function to call is on top of stack

    // get the list of arguments
    mp_parse_node_t *args;
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    80e4:	f107 0214 	add.w	r2, r7, #20
    80e8:	f107 0308 	add.w	r3, r7, #8
    80ec:	2197      	movs	r1, #151	; 0x97
    80ee:	4618      	mov	r0, r3
    80f0:	f7fb fd54 	bl	3b9c <mp_parse_node_extract_list>
    80f4:	61f8      	str	r0, [r7, #28]

    // compile the arguments
    // Rather than calling compile_node on the list, we go through the list of args
    // explicitly here so that we can count the number of arguments and give sensible
    // error messages.
    int n_positional = n_positional_extra;
    80f6:	683b      	ldr	r3, [r7, #0]
    80f8:	637b      	str	r3, [r7, #52]	; 0x34
    uint n_keyword = 0;
    80fa:	2300      	movs	r3, #0
    80fc:	633b      	str	r3, [r7, #48]	; 0x30
    uint star_flags = 0;
    80fe:	2300      	movs	r3, #0
    8100:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    8102:	2300      	movs	r3, #0
    8104:	62bb      	str	r3, [r7, #40]	; 0x28
    8106:	2300      	movs	r3, #0
    8108:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < n_args; i++) {
    810a:	2300      	movs	r3, #0
    810c:	623b      	str	r3, [r7, #32]
    810e:	e0af      	b.n	8270 <compile_trailer_paren_helper+0x19c>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8110:	697a      	ldr	r2, [r7, #20]
    8112:	6a3b      	ldr	r3, [r7, #32]
    8114:	009b      	lsls	r3, r3, #2
    8116:	4413      	add	r3, r2
    8118:	681b      	ldr	r3, [r3, #0]
    811a:	2b00      	cmp	r3, #0
    811c:	d07d      	beq.n	821a <compile_trailer_paren_helper+0x146>
    811e:	697a      	ldr	r2, [r7, #20]
    8120:	6a3b      	ldr	r3, [r7, #32]
    8122:	009b      	lsls	r3, r3, #2
    8124:	4413      	add	r3, r2
    8126:	681b      	ldr	r3, [r3, #0]
    8128:	f003 0303 	and.w	r3, r3, #3
    812c:	2b00      	cmp	r3, #0
    812e:	d174      	bne.n	821a <compile_trailer_paren_helper+0x146>
            mp_parse_node_struct_t *pns_arg = (mp_parse_node_struct_t*)args[i];
    8130:	697a      	ldr	r2, [r7, #20]
    8132:	6a3b      	ldr	r3, [r7, #32]
    8134:	009b      	lsls	r3, r3, #2
    8136:	4413      	add	r3, r2
    8138:	681b      	ldr	r3, [r3, #0]
    813a:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    813c:	69bb      	ldr	r3, [r7, #24]
    813e:	685b      	ldr	r3, [r3, #4]
    8140:	b2db      	uxtb	r3, r3
    8142:	2b99      	cmp	r3, #153	; 0x99
    8144:	d112      	bne.n	816c <compile_trailer_paren_helper+0x98>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    8146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8148:	f003 0301 	and.w	r3, r3, #1
    814c:	2b00      	cmp	r3, #0
    814e:	d006      	beq.n	815e <compile_trailer_paren_helper+0x8a>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    8150:	69bb      	ldr	r3, [r7, #24]
    8152:	4a65      	ldr	r2, [pc, #404]	; (82e8 <compile_trailer_paren_helper+0x214>)
    8154:	4619      	mov	r1, r3
    8156:	68f8      	ldr	r0, [r7, #12]
    8158:	f7fc fe1a 	bl	4d90 <compile_syntax_error>
                    return;
    815c:	e0c0      	b.n	82e0 <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8160:	f043 0301 	orr.w	r3, r3, #1
    8164:	62fb      	str	r3, [r7, #44]	; 0x2c
                star_args_node = pns_arg;
    8166:	69bb      	ldr	r3, [r7, #24]
    8168:	62bb      	str	r3, [r7, #40]	; 0x28
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    816a:	e07e      	b.n	826a <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    816c:	69bb      	ldr	r3, [r7, #24]
    816e:	685b      	ldr	r3, [r3, #4]
    8170:	b2db      	uxtb	r3, r3
    8172:	2b9a      	cmp	r3, #154	; 0x9a
    8174:	d112      	bne.n	819c <compile_trailer_paren_helper+0xc8>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    8176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8178:	f003 0302 	and.w	r3, r3, #2
    817c:	2b00      	cmp	r3, #0
    817e:	d006      	beq.n	818e <compile_trailer_paren_helper+0xba>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    8180:	69bb      	ldr	r3, [r7, #24]
    8182:	4a5a      	ldr	r2, [pc, #360]	; (82ec <compile_trailer_paren_helper+0x218>)
    8184:	4619      	mov	r1, r3
    8186:	68f8      	ldr	r0, [r7, #12]
    8188:	f7fc fe02 	bl	4d90 <compile_syntax_error>
                    return;
    818c:	e0a8      	b.n	82e0 <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8190:	f043 0302 	orr.w	r3, r3, #2
    8194:	62fb      	str	r3, [r7, #44]	; 0x2c
                dblstar_args_node = pns_arg;
    8196:	69bb      	ldr	r3, [r7, #24]
    8198:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    819a:	e066      	b.n	826a <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    819c:	69bb      	ldr	r3, [r7, #24]
    819e:	685b      	ldr	r3, [r3, #4]
    81a0:	b2db      	uxtb	r3, r3
    81a2:	2b9b      	cmp	r3, #155	; 0x9b
    81a4:	d138      	bne.n	8218 <compile_trailer_paren_helper+0x144>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    81a6:	69bb      	ldr	r3, [r7, #24]
    81a8:	68db      	ldr	r3, [r3, #12]
    81aa:	2b00      	cmp	r3, #0
    81ac:	d00b      	beq.n	81c6 <compile_trailer_paren_helper+0xf2>
    81ae:	69bb      	ldr	r3, [r7, #24]
    81b0:	68db      	ldr	r3, [r3, #12]
    81b2:	f003 0303 	and.w	r3, r3, #3
    81b6:	2b00      	cmp	r3, #0
    81b8:	d105      	bne.n	81c6 <compile_trailer_paren_helper+0xf2>
    81ba:	69bb      	ldr	r3, [r7, #24]
    81bc:	68db      	ldr	r3, [r3, #12]
    81be:	685b      	ldr	r3, [r3, #4]
    81c0:	b2db      	uxtb	r3, r3
    81c2:	2b9f      	cmp	r3, #159	; 0x9f
    81c4:	d01f      	beq.n	8206 <compile_trailer_paren_helper+0x132>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    81c6:	69bb      	ldr	r3, [r7, #24]
    81c8:	689b      	ldr	r3, [r3, #8]
    81ca:	f003 030f 	and.w	r3, r3, #15
    81ce:	2b02      	cmp	r3, #2
    81d0:	d006      	beq.n	81e0 <compile_trailer_paren_helper+0x10c>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    81d2:	69bb      	ldr	r3, [r7, #24]
    81d4:	4a46      	ldr	r2, [pc, #280]	; (82f0 <compile_trailer_paren_helper+0x21c>)
    81d6:	4619      	mov	r1, r3
    81d8:	68f8      	ldr	r0, [r7, #12]
    81da:	f7fc fdd9 	bl	4d90 <compile_syntax_error>
                        return;
    81de:	e07f      	b.n	82e0 <compile_trailer_paren_helper+0x20c>
                    }
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    81e0:	68fb      	ldr	r3, [r7, #12]
    81e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    81e4:	69bb      	ldr	r3, [r7, #24]
    81e6:	689b      	ldr	r3, [r3, #8]
    81e8:	091b      	lsrs	r3, r3, #4
    81ea:	4619      	mov	r1, r3
    81ec:	4610      	mov	r0, r2
    81ee:	f002 f8fb 	bl	a3e8 <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    81f2:	69bb      	ldr	r3, [r7, #24]
    81f4:	68db      	ldr	r3, [r3, #12]
    81f6:	4619      	mov	r1, r3
    81f8:	68f8      	ldr	r0, [r7, #12]
    81fa:	f000 fbcf 	bl	899c <compile_node>
                    n_keyword += 1;
    81fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8200:	3301      	adds	r3, #1
    8202:	633b      	str	r3, [r7, #48]	; 0x30
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8204:	e031      	b.n	826a <compile_trailer_paren_helper+0x196>
                } else {
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    8206:	2206      	movs	r2, #6
    8208:	69b9      	ldr	r1, [r7, #24]
    820a:	68f8      	ldr	r0, [r7, #12]
    820c:	f000 f876 	bl	82fc <compile_comprehension>
                    n_positional++;
    8210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8212:	3301      	adds	r3, #1
    8214:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8216:	e028      	b.n	826a <compile_trailer_paren_helper+0x196>
                }
            } else {
                goto normal_argument;
    8218:	bf00      	nop
            }
        } else {
            normal_argument:
            if (star_flags) {
    821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    821c:	2b00      	cmp	r3, #0
    821e:	d00a      	beq.n	8236 <compile_trailer_paren_helper+0x162>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    8220:	697a      	ldr	r2, [r7, #20]
    8222:	6a3b      	ldr	r3, [r7, #32]
    8224:	009b      	lsls	r3, r3, #2
    8226:	4413      	add	r3, r2
    8228:	681b      	ldr	r3, [r3, #0]
    822a:	4a32      	ldr	r2, [pc, #200]	; (82f4 <compile_trailer_paren_helper+0x220>)
    822c:	4619      	mov	r1, r3
    822e:	68f8      	ldr	r0, [r7, #12]
    8230:	f7fc fdae 	bl	4d90 <compile_syntax_error>
                return;
    8234:	e054      	b.n	82e0 <compile_trailer_paren_helper+0x20c>
            }
            if (n_keyword > 0) {
    8236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8238:	2b00      	cmp	r3, #0
    823a:	d00a      	beq.n	8252 <compile_trailer_paren_helper+0x17e>
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    823c:	697a      	ldr	r2, [r7, #20]
    823e:	6a3b      	ldr	r3, [r7, #32]
    8240:	009b      	lsls	r3, r3, #2
    8242:	4413      	add	r3, r2
    8244:	681b      	ldr	r3, [r3, #0]
    8246:	4a2c      	ldr	r2, [pc, #176]	; (82f8 <compile_trailer_paren_helper+0x224>)
    8248:	4619      	mov	r1, r3
    824a:	68f8      	ldr	r0, [r7, #12]
    824c:	f7fc fda0 	bl	4d90 <compile_syntax_error>
                return;
    8250:	e046      	b.n	82e0 <compile_trailer_paren_helper+0x20c>
            }
            compile_node(comp, args[i]);
    8252:	697a      	ldr	r2, [r7, #20]
    8254:	6a3b      	ldr	r3, [r7, #32]
    8256:	009b      	lsls	r3, r3, #2
    8258:	4413      	add	r3, r2
    825a:	681b      	ldr	r3, [r3, #0]
    825c:	4619      	mov	r1, r3
    825e:	68f8      	ldr	r0, [r7, #12]
    8260:	f000 fb9c 	bl	899c <compile_node>
            n_positional++;
    8264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8266:	3301      	adds	r3, #1
    8268:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n_args; i++) {
    826a:	6a3b      	ldr	r3, [r7, #32]
    826c:	3301      	adds	r3, #1
    826e:	623b      	str	r3, [r7, #32]
    8270:	6a3a      	ldr	r2, [r7, #32]
    8272:	69fb      	ldr	r3, [r7, #28]
    8274:	429a      	cmp	r2, r3
    8276:	f6ff af4b 	blt.w	8110 <compile_trailer_paren_helper+0x3c>
        }
    }

    // compile the star/double-star arguments if we had them
    // if we had one but not the other then we load "null" as a place holder
    if (star_flags != 0) {
    827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    827c:	2b00      	cmp	r3, #0
    827e:	d01d      	beq.n	82bc <compile_trailer_paren_helper+0x1e8>
        if (star_args_node == NULL) {
    8280:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8282:	2b00      	cmp	r3, #0
    8284:	d105      	bne.n	8292 <compile_trailer_paren_helper+0x1be>
            EMIT(load_null);
    8286:	68fb      	ldr	r3, [r7, #12]
    8288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    828a:	4618      	mov	r0, r3
    828c:	f002 f8d0 	bl	a430 <mp_emit_bc_load_null>
    8290:	e005      	b.n	829e <compile_trailer_paren_helper+0x1ca>
        } else {
            compile_node(comp, star_args_node->nodes[0]);
    8292:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8294:	689b      	ldr	r3, [r3, #8]
    8296:	4619      	mov	r1, r3
    8298:	68f8      	ldr	r0, [r7, #12]
    829a:	f000 fb7f 	bl	899c <compile_node>
        }
        if (dblstar_args_node == NULL) {
    829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    82a0:	2b00      	cmp	r3, #0
    82a2:	d105      	bne.n	82b0 <compile_trailer_paren_helper+0x1dc>
            EMIT(load_null);
    82a4:	68fb      	ldr	r3, [r7, #12]
    82a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    82a8:	4618      	mov	r0, r3
    82aa:	f002 f8c1 	bl	a430 <mp_emit_bc_load_null>
    82ae:	e005      	b.n	82bc <compile_trailer_paren_helper+0x1e8>
        } else {
            compile_node(comp, dblstar_args_node->nodes[0]);
    82b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    82b2:	689b      	ldr	r3, [r3, #8]
    82b4:	4619      	mov	r1, r3
    82b6:	68f8      	ldr	r0, [r7, #12]
    82b8:	f000 fb70 	bl	899c <compile_node>
        }
    }

    // emit the function/method call
    if (is_method_call) {
    82bc:	79fb      	ldrb	r3, [r7, #7]
    82be:	2b00      	cmp	r3, #0
    82c0:	d007      	beq.n	82d2 <compile_trailer_paren_helper+0x1fe>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    82c2:	68fb      	ldr	r3, [r7, #12]
    82c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    82c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
    82c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    82cc:	f002 fd1c 	bl	ad08 <mp_emit_bc_call_method>
    82d0:	e006      	b.n	82e0 <compile_trailer_paren_helper+0x20c>
    } else {
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    82d2:	68fb      	ldr	r3, [r7, #12]
    82d4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    82d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
    82d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    82dc:	f002 fcfe 	bl	acdc <mp_emit_bc_call_function>
    }
}
    82e0:	3738      	adds	r7, #56	; 0x38
    82e2:	46bd      	mov	sp, r7
    82e4:	bd80      	pop	{r7, pc}
    82e6:	bf00      	nop
    82e8:	0001e9c4 	.word	0x0001e9c4
    82ec:	0001e9dc 	.word	0x0001e9dc
    82f0:	0001e9f4 	.word	0x0001e9f4
    82f4:	0001ea18 	.word	0x0001ea18
    82f8:	0001ea34 	.word	0x0001ea34

000082fc <compile_comprehension>:

// pns needs to have 2 nodes, first is lhs of comprehension, second is PN_comp_for node
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    82fc:	b580      	push	{r7, lr}
    82fe:	b088      	sub	sp, #32
    8300:	af00      	add	r7, sp, #0
    8302:	60f8      	str	r0, [r7, #12]
    8304:	60b9      	str	r1, [r7, #8]
    8306:	607a      	str	r2, [r7, #4]
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    8308:	68bb      	ldr	r3, [r7, #8]
    830a:	685b      	ldr	r3, [r3, #4]
    830c:	0a1b      	lsrs	r3, r3, #8
    830e:	2b02      	cmp	r3, #2
    8310:	d006      	beq.n	8320 <compile_comprehension+0x24>
    8312:	4b2a      	ldr	r3, [pc, #168]	; (83bc <compile_comprehension+0xc0>)
    8314:	4a2a      	ldr	r2, [pc, #168]	; (83c0 <compile_comprehension+0xc4>)
    8316:	f640 1131 	movw	r1, #2353	; 0x931
    831a:	482a      	ldr	r0, [pc, #168]	; (83c4 <compile_comprehension+0xc8>)
    831c:	f013 f83e 	bl	1b39c <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    8320:	68bb      	ldr	r3, [r7, #8]
    8322:	68db      	ldr	r3, [r3, #12]
    8324:	2b00      	cmp	r3, #0
    8326:	d00b      	beq.n	8340 <compile_comprehension+0x44>
    8328:	68bb      	ldr	r3, [r7, #8]
    832a:	68db      	ldr	r3, [r3, #12]
    832c:	f003 0303 	and.w	r3, r3, #3
    8330:	2b00      	cmp	r3, #0
    8332:	d105      	bne.n	8340 <compile_comprehension+0x44>
    8334:	68bb      	ldr	r3, [r7, #8]
    8336:	68db      	ldr	r3, [r3, #12]
    8338:	685b      	ldr	r3, [r3, #4]
    833a:	b2db      	uxtb	r3, r3
    833c:	2b9f      	cmp	r3, #159	; 0x9f
    833e:	d006      	beq.n	834e <compile_comprehension+0x52>
    8340:	4b21      	ldr	r3, [pc, #132]	; (83c8 <compile_comprehension+0xcc>)
    8342:	4a1f      	ldr	r2, [pc, #124]	; (83c0 <compile_comprehension+0xc4>)
    8344:	f640 1132 	movw	r1, #2354	; 0x932
    8348:	481e      	ldr	r0, [pc, #120]	; (83c4 <compile_comprehension+0xc8>)
    834a:	f013 f827 	bl	1b39c <__assert_func>
    mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    834e:	68bb      	ldr	r3, [r7, #8]
    8350:	68db      	ldr	r3, [r3, #12]
    8352:	61fb      	str	r3, [r7, #28]

    if (comp->pass == MP_PASS_SCOPE) {
    8354:	68fb      	ldr	r3, [r7, #12]
    8356:	795b      	ldrb	r3, [r3, #5]
    8358:	2b01      	cmp	r3, #1
    835a:	d10b      	bne.n	8374 <compile_comprehension+0x78>
        // create a new scope for this comprehension
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    835c:	68ba      	ldr	r2, [r7, #8]
    835e:	68fb      	ldr	r3, [r7, #12]
    8360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8362:	7e5b      	ldrb	r3, [r3, #25]
    8364:	6879      	ldr	r1, [r7, #4]
    8366:	68f8      	ldr	r0, [r7, #12]
    8368:	f7fc fd78 	bl	4e5c <scope_new_and_link>
    836c:	61b8      	str	r0, [r7, #24]
        // store the comprehension scope so the compiling function (this one) can use it at each pass
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    836e:	69ba      	ldr	r2, [r7, #24]
    8370:	69fb      	ldr	r3, [r7, #28]
    8372:	615a      	str	r2, [r3, #20]
    }

    // get the scope for this comprehension
    scope_t *this_scope = (scope_t*)pns_comp_for->nodes[3];
    8374:	69fb      	ldr	r3, [r7, #28]
    8376:	695b      	ldr	r3, [r3, #20]
    8378:	617b      	str	r3, [r7, #20]

    // compile the comprehension
    close_over_variables_etc(comp, this_scope, 0, 0);
    837a:	2300      	movs	r3, #0
    837c:	2200      	movs	r2, #0
    837e:	6979      	ldr	r1, [r7, #20]
    8380:	68f8      	ldr	r0, [r7, #12]
    8382:	f7fd fa53 	bl	582c <close_over_variables_etc>

    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    8386:	69fb      	ldr	r3, [r7, #28]
    8388:	68db      	ldr	r3, [r3, #12]
    838a:	4619      	mov	r1, r3
    838c:	68f8      	ldr	r0, [r7, #12]
    838e:	f000 fb05 	bl	899c <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    8392:	687b      	ldr	r3, [r7, #4]
    8394:	2b06      	cmp	r3, #6
    8396:	d105      	bne.n	83a4 <compile_comprehension+0xa8>
        EMIT_ARG(get_iter, false);
    8398:	68fb      	ldr	r3, [r7, #12]
    839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    839c:	2100      	movs	r1, #0
    839e:	4618      	mov	r0, r3
    83a0:	f002 fabe 	bl	a920 <mp_emit_bc_get_iter>
    }
    EMIT_ARG(call_function, 1, 0, 0);
    83a4:	68fb      	ldr	r3, [r7, #12]
    83a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    83a8:	2300      	movs	r3, #0
    83aa:	2200      	movs	r2, #0
    83ac:	2101      	movs	r1, #1
    83ae:	f002 fc95 	bl	acdc <mp_emit_bc_call_function>
}
    83b2:	bf00      	nop
    83b4:	3720      	adds	r7, #32
    83b6:	46bd      	mov	sp, r7
    83b8:	bd80      	pop	{r7, pc}
    83ba:	bf00      	nop
    83bc:	0001ea58 	.word	0x0001ea58
    83c0:	0001f054 	.word	0x0001f054
    83c4:	0001e310 	.word	0x0001e310
    83c8:	0001ea84 	.word	0x0001ea84

000083cc <compile_atom_paren>:

STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    83cc:	b580      	push	{r7, lr}
    83ce:	b084      	sub	sp, #16
    83d0:	af00      	add	r7, sp, #0
    83d2:	6078      	str	r0, [r7, #4]
    83d4:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    83d6:	683b      	ldr	r3, [r7, #0]
    83d8:	689b      	ldr	r3, [r3, #8]
    83da:	2b00      	cmp	r3, #0
    83dc:	d105      	bne.n	83ea <compile_atom_paren+0x1e>
        // an empty tuple
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    83de:	2200      	movs	r2, #0
    83e0:	2100      	movs	r1, #0
    83e2:	6878      	ldr	r0, [r7, #4]
    83e4:	f7fc fe30 	bl	5048 <c_tuple>
            // tuple with 2 items
            tuple_with_2_items:
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
        }
    }
}
    83e8:	e068      	b.n	84bc <compile_atom_paren+0xf0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    83ea:	683b      	ldr	r3, [r7, #0]
    83ec:	689b      	ldr	r3, [r3, #8]
    83ee:	2b00      	cmp	r3, #0
    83f0:	d00b      	beq.n	840a <compile_atom_paren+0x3e>
    83f2:	683b      	ldr	r3, [r7, #0]
    83f4:	689b      	ldr	r3, [r3, #8]
    83f6:	f003 0303 	and.w	r3, r3, #3
    83fa:	2b00      	cmp	r3, #0
    83fc:	d105      	bne.n	840a <compile_atom_paren+0x3e>
    83fe:	683b      	ldr	r3, [r7, #0]
    8400:	689b      	ldr	r3, [r3, #8]
    8402:	685b      	ldr	r3, [r3, #4]
    8404:	b2db      	uxtb	r3, r3
    8406:	2b8a      	cmp	r3, #138	; 0x8a
    8408:	d006      	beq.n	8418 <compile_atom_paren+0x4c>
    840a:	4b2e      	ldr	r3, [pc, #184]	; (84c4 <compile_atom_paren+0xf8>)
    840c:	4a2e      	ldr	r2, [pc, #184]	; (84c8 <compile_atom_paren+0xfc>)
    840e:	f640 114e 	movw	r1, #2382	; 0x94e
    8412:	482e      	ldr	r0, [pc, #184]	; (84cc <compile_atom_paren+0x100>)
    8414:	f012 ffc2 	bl	1b39c <__assert_func>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8418:	683b      	ldr	r3, [r7, #0]
    841a:	689b      	ldr	r3, [r3, #8]
    841c:	603b      	str	r3, [r7, #0]
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    841e:	683b      	ldr	r3, [r7, #0]
    8420:	68db      	ldr	r3, [r3, #12]
    8422:	2b00      	cmp	r3, #0
    8424:	d106      	bne.n	8434 <compile_atom_paren+0x68>
    8426:	4b2a      	ldr	r3, [pc, #168]	; (84d0 <compile_atom_paren+0x104>)
    8428:	4a27      	ldr	r2, [pc, #156]	; (84c8 <compile_atom_paren+0xfc>)
    842a:	f44f 6115 	mov.w	r1, #2384	; 0x950
    842e:	4827      	ldr	r0, [pc, #156]	; (84cc <compile_atom_paren+0x100>)
    8430:	f012 ffb4 	bl	1b39c <__assert_func>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8434:	683b      	ldr	r3, [r7, #0]
    8436:	68db      	ldr	r3, [r3, #12]
    8438:	2b00      	cmp	r3, #0
    843a:	d039      	beq.n	84b0 <compile_atom_paren+0xe4>
    843c:	683b      	ldr	r3, [r7, #0]
    843e:	68db      	ldr	r3, [r3, #12]
    8440:	f003 0303 	and.w	r3, r3, #3
    8444:	2b00      	cmp	r3, #0
    8446:	d133      	bne.n	84b0 <compile_atom_paren+0xe4>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    8448:	683b      	ldr	r3, [r7, #0]
    844a:	68db      	ldr	r3, [r3, #12]
    844c:	60fb      	str	r3, [r7, #12]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    844e:	68fb      	ldr	r3, [r7, #12]
    8450:	685b      	ldr	r3, [r3, #4]
    8452:	b2db      	uxtb	r3, r3
    8454:	2b8d      	cmp	r3, #141	; 0x8d
    8456:	d112      	bne.n	847e <compile_atom_paren+0xb2>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    8458:	68fb      	ldr	r3, [r7, #12]
    845a:	689b      	ldr	r3, [r3, #8]
    845c:	2b00      	cmp	r3, #0
    845e:	d006      	beq.n	846e <compile_atom_paren+0xa2>
    8460:	4b1c      	ldr	r3, [pc, #112]	; (84d4 <compile_atom_paren+0x108>)
    8462:	4a19      	ldr	r2, [pc, #100]	; (84c8 <compile_atom_paren+0xfc>)
    8464:	f640 1155 	movw	r1, #2389	; 0x955
    8468:	4818      	ldr	r0, [pc, #96]	; (84cc <compile_atom_paren+0x100>)
    846a:	f012 ff97 	bl	1b39c <__assert_func>
                c_tuple(comp, pns->nodes[0], NULL);
    846e:	683b      	ldr	r3, [r7, #0]
    8470:	689b      	ldr	r3, [r3, #8]
    8472:	2200      	movs	r2, #0
    8474:	4619      	mov	r1, r3
    8476:	6878      	ldr	r0, [r7, #4]
    8478:	f7fc fde6 	bl	5048 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    847c:	e01e      	b.n	84bc <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    847e:	68fb      	ldr	r3, [r7, #12]
    8480:	685b      	ldr	r3, [r3, #4]
    8482:	b2db      	uxtb	r3, r3
    8484:	2b8e      	cmp	r3, #142	; 0x8e
    8486:	d107      	bne.n	8498 <compile_atom_paren+0xcc>
                c_tuple(comp, pns->nodes[0], pns2);
    8488:	683b      	ldr	r3, [r7, #0]
    848a:	689b      	ldr	r3, [r3, #8]
    848c:	68fa      	ldr	r2, [r7, #12]
    848e:	4619      	mov	r1, r3
    8490:	6878      	ldr	r0, [r7, #4]
    8492:	f7fc fdd9 	bl	5048 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8496:	e011      	b.n	84bc <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    8498:	68fb      	ldr	r3, [r7, #12]
    849a:	685b      	ldr	r3, [r3, #4]
    849c:	b2db      	uxtb	r3, r3
    849e:	2b9f      	cmp	r3, #159	; 0x9f
    84a0:	d105      	bne.n	84ae <compile_atom_paren+0xe2>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    84a2:	2206      	movs	r2, #6
    84a4:	6839      	ldr	r1, [r7, #0]
    84a6:	6878      	ldr	r0, [r7, #4]
    84a8:	f7ff ff28 	bl	82fc <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    84ac:	e006      	b.n	84bc <compile_atom_paren+0xf0>
                goto tuple_with_2_items;
    84ae:	bf00      	nop
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    84b0:	683a      	ldr	r2, [r7, #0]
    84b2:	2100      	movs	r1, #0
    84b4:	6878      	ldr	r0, [r7, #4]
    84b6:	f7fc fdc7 	bl	5048 <c_tuple>
}
    84ba:	e7ff      	b.n	84bc <compile_atom_paren+0xf0>
    84bc:	bf00      	nop
    84be:	3710      	adds	r7, #16
    84c0:	46bd      	mov	sp, r7
    84c2:	bd80      	pop	{r7, pc}
    84c4:	0001e324 	.word	0x0001e324
    84c8:	0001f06c 	.word	0x0001f06c
    84cc:	0001e310 	.word	0x0001e310
    84d0:	0001eac0 	.word	0x0001eac0
    84d4:	0001e408 	.word	0x0001e408

000084d8 <compile_atom_bracket>:

STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    84d8:	b580      	push	{r7, lr}
    84da:	b084      	sub	sp, #16
    84dc:	af00      	add	r7, sp, #0
    84de:	6078      	str	r0, [r7, #4]
    84e0:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    84e2:	683b      	ldr	r3, [r7, #0]
    84e4:	689b      	ldr	r3, [r3, #8]
    84e6:	2b00      	cmp	r3, #0
    84e8:	d107      	bne.n	84fa <compile_atom_bracket+0x22>
        // empty list
        EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    84ea:	687b      	ldr	r3, [r7, #4]
    84ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84ee:	2201      	movs	r2, #1
    84f0:	2100      	movs	r1, #0
    84f2:	4618      	mov	r0, r3
    84f4:	f002 faba 	bl	aa6c <mp_emit_bc_build>
    } else {
        // list with 1 item
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    }
}
    84f8:	e086      	b.n	8608 <compile_atom_bracket+0x130>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    84fa:	683b      	ldr	r3, [r7, #0]
    84fc:	689b      	ldr	r3, [r3, #8]
    84fe:	2b00      	cmp	r3, #0
    8500:	d074      	beq.n	85ec <compile_atom_bracket+0x114>
    8502:	683b      	ldr	r3, [r7, #0]
    8504:	689b      	ldr	r3, [r3, #8]
    8506:	f003 0303 	and.w	r3, r3, #3
    850a:	2b00      	cmp	r3, #0
    850c:	d16e      	bne.n	85ec <compile_atom_bracket+0x114>
    850e:	683b      	ldr	r3, [r7, #0]
    8510:	689b      	ldr	r3, [r3, #8]
    8512:	685b      	ldr	r3, [r3, #4]
    8514:	b2db      	uxtb	r3, r3
    8516:	2b8a      	cmp	r3, #138	; 0x8a
    8518:	d168      	bne.n	85ec <compile_atom_bracket+0x114>
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[0];
    851a:	683b      	ldr	r3, [r7, #0]
    851c:	689b      	ldr	r3, [r3, #8]
    851e:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8520:	68fb      	ldr	r3, [r7, #12]
    8522:	68db      	ldr	r3, [r3, #12]
    8524:	2b00      	cmp	r3, #0
    8526:	d04c      	beq.n	85c2 <compile_atom_bracket+0xea>
    8528:	68fb      	ldr	r3, [r7, #12]
    852a:	68db      	ldr	r3, [r3, #12]
    852c:	f003 0303 	and.w	r3, r3, #3
    8530:	2b00      	cmp	r3, #0
    8532:	d146      	bne.n	85c2 <compile_atom_bracket+0xea>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns2->nodes[1];
    8534:	68fb      	ldr	r3, [r7, #12]
    8536:	68db      	ldr	r3, [r3, #12]
    8538:	60bb      	str	r3, [r7, #8]
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    853a:	68bb      	ldr	r3, [r7, #8]
    853c:	685b      	ldr	r3, [r3, #4]
    853e:	b2db      	uxtb	r3, r3
    8540:	2b8d      	cmp	r3, #141	; 0x8d
    8542:	d118      	bne.n	8576 <compile_atom_bracket+0x9e>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    8544:	68bb      	ldr	r3, [r7, #8]
    8546:	689b      	ldr	r3, [r3, #8]
    8548:	2b00      	cmp	r3, #0
    854a:	d006      	beq.n	855a <compile_atom_bracket+0x82>
    854c:	4b30      	ldr	r3, [pc, #192]	; (8610 <compile_atom_bracket+0x138>)
    854e:	4a31      	ldr	r2, [pc, #196]	; (8614 <compile_atom_bracket+0x13c>)
    8550:	f640 1173 	movw	r1, #2419	; 0x973
    8554:	4830      	ldr	r0, [pc, #192]	; (8618 <compile_atom_bracket+0x140>)
    8556:	f012 ff21 	bl	1b39c <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    855a:	68fb      	ldr	r3, [r7, #12]
    855c:	689b      	ldr	r3, [r3, #8]
    855e:	4619      	mov	r1, r3
    8560:	6878      	ldr	r0, [r7, #4]
    8562:	f000 fa1b 	bl	899c <compile_node>
                EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    8566:	687b      	ldr	r3, [r7, #4]
    8568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    856a:	2201      	movs	r2, #1
    856c:	2101      	movs	r1, #1
    856e:	4618      	mov	r0, r3
    8570:	f002 fa7c 	bl	aa6c <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8574:	e039      	b.n	85ea <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    8576:	68bb      	ldr	r3, [r7, #8]
    8578:	685b      	ldr	r3, [r3, #4]
    857a:	b2db      	uxtb	r3, r3
    857c:	2b8e      	cmp	r3, #142	; 0x8e
    857e:	d114      	bne.n	85aa <compile_atom_bracket+0xd2>
                compile_node(comp, pns2->nodes[0]);
    8580:	68fb      	ldr	r3, [r7, #12]
    8582:	689b      	ldr	r3, [r3, #8]
    8584:	4619      	mov	r1, r3
    8586:	6878      	ldr	r0, [r7, #4]
    8588:	f000 fa08 	bl	899c <compile_node>
                compile_generic_all_nodes(comp, pns3);
    858c:	68b9      	ldr	r1, [r7, #8]
    858e:	6878      	ldr	r0, [r7, #4]
    8590:	f7fc fcd2 	bl	4f38 <compile_generic_all_nodes>
                EMIT_ARG(build, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3), MP_EMIT_BUILD_LIST);
    8594:	687b      	ldr	r3, [r7, #4]
    8596:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8598:	68bb      	ldr	r3, [r7, #8]
    859a:	685b      	ldr	r3, [r3, #4]
    859c:	0a1b      	lsrs	r3, r3, #8
    859e:	3301      	adds	r3, #1
    85a0:	2201      	movs	r2, #1
    85a2:	4619      	mov	r1, r3
    85a4:	f002 fa62 	bl	aa6c <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    85a8:	e01f      	b.n	85ea <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    85aa:	68bb      	ldr	r3, [r7, #8]
    85ac:	685b      	ldr	r3, [r3, #4]
    85ae:	b2db      	uxtb	r3, r3
    85b0:	2b9f      	cmp	r3, #159	; 0x9f
    85b2:	d105      	bne.n	85c0 <compile_atom_bracket+0xe8>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    85b4:	2203      	movs	r2, #3
    85b6:	68f9      	ldr	r1, [r7, #12]
    85b8:	6878      	ldr	r0, [r7, #4]
    85ba:	f7ff fe9f 	bl	82fc <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    85be:	e014      	b.n	85ea <compile_atom_bracket+0x112>
                goto list_with_2_items;
    85c0:	bf00      	nop
            compile_node(comp, pns2->nodes[0]);
    85c2:	68fb      	ldr	r3, [r7, #12]
    85c4:	689b      	ldr	r3, [r3, #8]
    85c6:	4619      	mov	r1, r3
    85c8:	6878      	ldr	r0, [r7, #4]
    85ca:	f000 f9e7 	bl	899c <compile_node>
            compile_node(comp, pns2->nodes[1]);
    85ce:	68fb      	ldr	r3, [r7, #12]
    85d0:	68db      	ldr	r3, [r3, #12]
    85d2:	4619      	mov	r1, r3
    85d4:	6878      	ldr	r0, [r7, #4]
    85d6:	f000 f9e1 	bl	899c <compile_node>
            EMIT_ARG(build, 2, MP_EMIT_BUILD_LIST);
    85da:	687b      	ldr	r3, [r7, #4]
    85dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85de:	2201      	movs	r2, #1
    85e0:	2102      	movs	r1, #2
    85e2:	4618      	mov	r0, r3
    85e4:	f002 fa42 	bl	aa6c <mp_emit_bc_build>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    85e8:	e00e      	b.n	8608 <compile_atom_bracket+0x130>
    85ea:	e00d      	b.n	8608 <compile_atom_bracket+0x130>
        compile_node(comp, pns->nodes[0]);
    85ec:	683b      	ldr	r3, [r7, #0]
    85ee:	689b      	ldr	r3, [r3, #8]
    85f0:	4619      	mov	r1, r3
    85f2:	6878      	ldr	r0, [r7, #4]
    85f4:	f000 f9d2 	bl	899c <compile_node>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85fc:	2201      	movs	r2, #1
    85fe:	2101      	movs	r1, #1
    8600:	4618      	mov	r0, r3
    8602:	f002 fa33 	bl	aa6c <mp_emit_bc_build>
}
    8606:	e7ff      	b.n	8608 <compile_atom_bracket+0x130>
    8608:	bf00      	nop
    860a:	3710      	adds	r7, #16
    860c:	46bd      	mov	sp, r7
    860e:	bd80      	pop	{r7, pc}
    8610:	0001eae8 	.word	0x0001eae8
    8614:	0001f080 	.word	0x0001f080
    8618:	0001e310 	.word	0x0001e310

0000861c <compile_atom_brace>:

STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    861c:	b580      	push	{r7, lr}
    861e:	b08a      	sub	sp, #40	; 0x28
    8620:	af00      	add	r7, sp, #0
    8622:	6078      	str	r0, [r7, #4]
    8624:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn = pns->nodes[0];
    8626:	683b      	ldr	r3, [r7, #0]
    8628:	689b      	ldr	r3, [r3, #8]
    862a:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    862c:	6a3b      	ldr	r3, [r7, #32]
    862e:	2b00      	cmp	r3, #0
    8630:	d107      	bne.n	8642 <compile_atom_brace+0x26>
        // empty dict
        EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    8632:	687b      	ldr	r3, [r7, #4]
    8634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8636:	2203      	movs	r2, #3
    8638:	2100      	movs	r1, #0
    863a:	4618      	mov	r0, r3
    863c:	f002 fa16 	bl	aa6c <mp_emit_bc_build>
    8640:	e0c3      	b.n	87ca <compile_atom_brace+0x1ae>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    8642:	6a3b      	ldr	r3, [r7, #32]
    8644:	2b00      	cmp	r3, #0
    8646:	f000 80b9 	beq.w	87bc <compile_atom_brace+0x1a0>
    864a:	6a3b      	ldr	r3, [r7, #32]
    864c:	f003 0303 	and.w	r3, r3, #3
    8650:	2b00      	cmp	r3, #0
    8652:	f040 80b3 	bne.w	87bc <compile_atom_brace+0x1a0>
        pns = (mp_parse_node_struct_t*)pn;
    8656:	6a3b      	ldr	r3, [r7, #32]
    8658:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    865a:	683b      	ldr	r3, [r7, #0]
    865c:	685b      	ldr	r3, [r3, #4]
    865e:	b2db      	uxtb	r3, r3
    8660:	2b32      	cmp	r3, #50	; 0x32
    8662:	d110      	bne.n	8686 <compile_atom_brace+0x6a>
            // dict with one element
            EMIT_ARG(build, 1, MP_EMIT_BUILD_MAP);
    8664:	687b      	ldr	r3, [r7, #4]
    8666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8668:	2203      	movs	r2, #3
    866a:	2101      	movs	r1, #1
    866c:	4618      	mov	r0, r3
    866e:	f002 f9fd 	bl	aa6c <mp_emit_bc_build>
            compile_node(comp, pn);
    8672:	6a39      	ldr	r1, [r7, #32]
    8674:	6878      	ldr	r0, [r7, #4]
    8676:	f000 f991 	bl	899c <compile_node>
            EMIT(store_map);
    867a:	687b      	ldr	r3, [r7, #4]
    867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    867e:	4618      	mov	r0, r3
    8680:	f002 fa16 	bl	aab0 <mp_emit_bc_store_map>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8684:	e0a1      	b.n	87ca <compile_atom_brace+0x1ae>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    8686:	683b      	ldr	r3, [r7, #0]
    8688:	685b      	ldr	r3, [r3, #4]
    868a:	b2db      	uxtb	r3, r3
    868c:	2b92      	cmp	r3, #146	; 0x92
    868e:	f040 8094 	bne.w	87ba <compile_atom_brace+0x19e>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    8692:	683b      	ldr	r3, [r7, #0]
    8694:	68db      	ldr	r3, [r3, #12]
    8696:	2b00      	cmp	r3, #0
    8698:	d005      	beq.n	86a6 <compile_atom_brace+0x8a>
    869a:	683b      	ldr	r3, [r7, #0]
    869c:	68db      	ldr	r3, [r3, #12]
    869e:	f003 0303 	and.w	r3, r3, #3
    86a2:	2b00      	cmp	r3, #0
    86a4:	d006      	beq.n	86b4 <compile_atom_brace+0x98>
    86a6:	4b4a      	ldr	r3, [pc, #296]	; (87d0 <compile_atom_brace+0x1b4>)
    86a8:	4a4a      	ldr	r2, [pc, #296]	; (87d4 <compile_atom_brace+0x1b8>)
    86aa:	f640 119d 	movw	r1, #2461	; 0x99d
    86ae:	484a      	ldr	r0, [pc, #296]	; (87d8 <compile_atom_brace+0x1bc>)
    86b0:	f012 fe74 	bl	1b39c <__assert_func>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    86b4:	683b      	ldr	r3, [r7, #0]
    86b6:	68db      	ldr	r3, [r3, #12]
    86b8:	61fb      	str	r3, [r7, #28]
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    86ba:	69fb      	ldr	r3, [r7, #28]
    86bc:	685b      	ldr	r3, [r3, #4]
    86be:	b2db      	uxtb	r3, r3
    86c0:	2b94      	cmp	r3, #148	; 0x94
    86c2:	d168      	bne.n	8796 <compile_atom_brace+0x17a>
                // dict/set with multiple elements

                // get tail elements (2nd, 3rd, ...)
                mp_parse_node_t *nodes;
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    86c4:	69fb      	ldr	r3, [r7, #28]
    86c6:	3308      	adds	r3, #8
    86c8:	f107 0208 	add.w	r2, r7, #8
    86cc:	2195      	movs	r1, #149	; 0x95
    86ce:	4618      	mov	r0, r3
    86d0:	f7fb fa64 	bl	3b9c <mp_parse_node_extract_list>
    86d4:	61b8      	str	r0, [r7, #24]

                // first element sets whether it's a dict or set
                bool is_dict;
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_MAP);
    86d6:	687b      	ldr	r3, [r7, #4]
    86d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    86da:	69bb      	ldr	r3, [r7, #24]
    86dc:	3301      	adds	r3, #1
    86de:	2203      	movs	r2, #3
    86e0:	4619      	mov	r1, r3
    86e2:	f002 f9c3 	bl	aa6c <mp_emit_bc_build>
                    compile_node(comp, pns->nodes[0]);
    86e6:	683b      	ldr	r3, [r7, #0]
    86e8:	689b      	ldr	r3, [r3, #8]
    86ea:	4619      	mov	r1, r3
    86ec:	6878      	ldr	r0, [r7, #4]
    86ee:	f000 f955 	bl	899c <compile_node>
                    EMIT(store_map);
    86f2:	687b      	ldr	r3, [r7, #4]
    86f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86f6:	4618      	mov	r0, r3
    86f8:	f002 f9da 	bl	aab0 <mp_emit_bc_store_map>
                    is_dict = true;
    86fc:	2301      	movs	r3, #1
    86fe:	75fb      	strb	r3, [r7, #23]
                    compile_node(comp, pns->nodes[0]); // 1st value of set
                    is_dict = false;
                }

                // process rest of elements
                for (int i = 0; i < n; i++) {
    8700:	2300      	movs	r3, #0
    8702:	627b      	str	r3, [r7, #36]	; 0x24
    8704:	e042      	b.n	878c <compile_atom_brace+0x170>
                    mp_parse_node_t pn_i = nodes[i];
    8706:	68ba      	ldr	r2, [r7, #8]
    8708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    870a:	009b      	lsls	r3, r3, #2
    870c:	4413      	add	r3, r2
    870e:	681b      	ldr	r3, [r3, #0]
    8710:	613b      	str	r3, [r7, #16]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    8712:	693b      	ldr	r3, [r7, #16]
    8714:	2b00      	cmp	r3, #0
    8716:	d00b      	beq.n	8730 <compile_atom_brace+0x114>
    8718:	693b      	ldr	r3, [r7, #16]
    871a:	f003 0303 	and.w	r3, r3, #3
    871e:	2b00      	cmp	r3, #0
    8720:	d106      	bne.n	8730 <compile_atom_brace+0x114>
    8722:	693b      	ldr	r3, [r7, #16]
    8724:	685b      	ldr	r3, [r3, #4]
    8726:	b2db      	uxtb	r3, r3
    8728:	2b32      	cmp	r3, #50	; 0x32
    872a:	d101      	bne.n	8730 <compile_atom_brace+0x114>
    872c:	2301      	movs	r3, #1
    872e:	e000      	b.n	8732 <compile_atom_brace+0x116>
    8730:	2300      	movs	r3, #0
    8732:	73fb      	strb	r3, [r7, #15]
    8734:	7bfb      	ldrb	r3, [r7, #15]
    8736:	f003 0301 	and.w	r3, r3, #1
    873a:	73fb      	strb	r3, [r7, #15]
                    compile_node(comp, pn_i);
    873c:	6939      	ldr	r1, [r7, #16]
    873e:	6878      	ldr	r0, [r7, #4]
    8740:	f000 f92c 	bl	899c <compile_node>
                    if (is_dict) {
    8744:	7dfb      	ldrb	r3, [r7, #23]
    8746:	2b00      	cmp	r3, #0
    8748:	d012      	beq.n	8770 <compile_atom_brace+0x154>
                        if (!is_key_value) {
    874a:	7bfb      	ldrb	r3, [r7, #15]
    874c:	f083 0301 	eor.w	r3, r3, #1
    8750:	b2db      	uxtb	r3, r3
    8752:	2b00      	cmp	r3, #0
    8754:	d006      	beq.n	8764 <compile_atom_brace+0x148>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8756:	683b      	ldr	r3, [r7, #0]
    8758:	4a20      	ldr	r2, [pc, #128]	; (87dc <compile_atom_brace+0x1c0>)
    875a:	4619      	mov	r1, r3
    875c:	6878      	ldr	r0, [r7, #4]
    875e:	f7fc fb17 	bl	4d90 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
                            }
                            return;
    8762:	e032      	b.n	87ca <compile_atom_brace+0x1ae>
                        }
                        EMIT(store_map);
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8768:	4618      	mov	r0, r3
    876a:	f002 f9a1 	bl	aab0 <mp_emit_bc_store_map>
    876e:	e00a      	b.n	8786 <compile_atom_brace+0x16a>
                    } else {
                        if (is_key_value) {
    8770:	7bfb      	ldrb	r3, [r7, #15]
    8772:	2b00      	cmp	r3, #0
    8774:	d007      	beq.n	8786 <compile_atom_brace+0x16a>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8776:	683b      	ldr	r3, [r7, #0]
    8778:	4a18      	ldr	r2, [pc, #96]	; (87dc <compile_atom_brace+0x1c0>)
    877a:	4619      	mov	r1, r3
    877c:	6878      	ldr	r0, [r7, #4]
    877e:	f7fc fb07 	bl	4d90 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting just a value for set");
                            }
                            return;
    8782:	bf00      	nop
    8784:	e021      	b.n	87ca <compile_atom_brace+0x1ae>
                for (int i = 0; i < n; i++) {
    8786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8788:	3301      	adds	r3, #1
    878a:	627b      	str	r3, [r7, #36]	; 0x24
    878c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    878e:	69bb      	ldr	r3, [r7, #24]
    8790:	429a      	cmp	r2, r3
    8792:	dbb8      	blt.n	8706 <compile_atom_brace+0xea>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8794:	e019      	b.n	87ca <compile_atom_brace+0x1ae>
                if (!is_dict) {
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_SET);
                }
                #endif
            } else {
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    8796:	69fb      	ldr	r3, [r7, #28]
    8798:	685b      	ldr	r3, [r3, #4]
    879a:	b2db      	uxtb	r3, r3
    879c:	2b9f      	cmp	r3, #159	; 0x9f
    879e:	d006      	beq.n	87ae <compile_atom_brace+0x192>
    87a0:	4b0f      	ldr	r3, [pc, #60]	; (87e0 <compile_atom_brace+0x1c4>)
    87a2:	4a0c      	ldr	r2, [pc, #48]	; (87d4 <compile_atom_brace+0x1b8>)
    87a4:	f640 11d6 	movw	r1, #2518	; 0x9d6
    87a8:	480b      	ldr	r0, [pc, #44]	; (87d8 <compile_atom_brace+0x1bc>)
    87aa:	f012 fdf7 	bl	1b39c <__assert_func>
                // dict/set comprehension
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary comprehension
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    87ae:	2204      	movs	r2, #4
    87b0:	6839      	ldr	r1, [r7, #0]
    87b2:	6878      	ldr	r0, [r7, #4]
    87b4:	f7ff fda2 	bl	82fc <compile_comprehension>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    87b8:	e007      	b.n	87ca <compile_atom_brace+0x1ae>
                    compile_comprehension(comp, pns, SCOPE_SET_COMP);
                }
            }
        } else {
            // set with one element
            goto set_with_one_element;
    87ba:	bf00      	nop
        set_with_one_element:
        #if MICROPY_PY_BUILTINS_SET
        compile_node(comp, pn);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_SET);
        #else
        assert(0);
    87bc:	4b09      	ldr	r3, [pc, #36]	; (87e4 <compile_atom_brace+0x1c8>)
    87be:	4a05      	ldr	r2, [pc, #20]	; (87d4 <compile_atom_brace+0x1b8>)
    87c0:	f640 11eb 	movw	r1, #2539	; 0x9eb
    87c4:	4804      	ldr	r0, [pc, #16]	; (87d8 <compile_atom_brace+0x1bc>)
    87c6:	f012 fde9 	bl	1b39c <__assert_func>
        #endif
    }
}
    87ca:	3728      	adds	r7, #40	; 0x28
    87cc:	46bd      	mov	sp, r7
    87ce:	bd80      	pop	{r7, pc}
    87d0:	0001e87c 	.word	0x0001e87c
    87d4:	0001f098 	.word	0x0001f098
    87d8:	0001e310 	.word	0x0001e310
    87dc:	0001eb10 	.word	0x0001eb10
    87e0:	0001eb20 	.word	0x0001eb20
    87e4:	0001eb50 	.word	0x0001eb50

000087e8 <compile_trailer_paren>:

STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    87e8:	b580      	push	{r7, lr}
    87ea:	b082      	sub	sp, #8
    87ec:	af00      	add	r7, sp, #0
    87ee:	6078      	str	r0, [r7, #4]
    87f0:	6039      	str	r1, [r7, #0]
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    87f2:	683b      	ldr	r3, [r7, #0]
    87f4:	6899      	ldr	r1, [r3, #8]
    87f6:	2300      	movs	r3, #0
    87f8:	2200      	movs	r2, #0
    87fa:	6878      	ldr	r0, [r7, #4]
    87fc:	f7ff fc6a 	bl	80d4 <compile_trailer_paren_helper>
}
    8800:	bf00      	nop
    8802:	3708      	adds	r7, #8
    8804:	46bd      	mov	sp, r7
    8806:	bd80      	pop	{r7, pc}

00008808 <compile_trailer_bracket>:

STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8808:	b580      	push	{r7, lr}
    880a:	b082      	sub	sp, #8
    880c:	af00      	add	r7, sp, #0
    880e:	6078      	str	r0, [r7, #4]
    8810:	6039      	str	r1, [r7, #0]
    // object who's index we want is on top of stack
    compile_node(comp, pns->nodes[0]); // the index
    8812:	683b      	ldr	r3, [r7, #0]
    8814:	689b      	ldr	r3, [r3, #8]
    8816:	4619      	mov	r1, r3
    8818:	6878      	ldr	r0, [r7, #4]
    881a:	f000 f8bf 	bl	899c <compile_node>
    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    881e:	687b      	ldr	r3, [r7, #4]
    8820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8822:	2100      	movs	r1, #0
    8824:	4618      	mov	r0, r3
    8826:	f001 fe81 	bl	a52c <mp_emit_bc_subscr>
}
    882a:	bf00      	nop
    882c:	3708      	adds	r7, #8
    882e:	46bd      	mov	sp, r7
    8830:	bd80      	pop	{r7, pc}
    8832:	bf00      	nop

00008834 <compile_trailer_period>:

STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8834:	b580      	push	{r7, lr}
    8836:	b082      	sub	sp, #8
    8838:	af00      	add	r7, sp, #0
    883a:	6078      	str	r0, [r7, #4]
    883c:	6039      	str	r1, [r7, #0]
    // object who's attribute we want is on top of stack
    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]), MP_EMIT_ATTR_LOAD); // attribute to get
    883e:	687b      	ldr	r3, [r7, #4]
    8840:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8842:	683b      	ldr	r3, [r7, #0]
    8844:	689b      	ldr	r3, [r3, #8]
    8846:	091b      	lsrs	r3, r3, #4
    8848:	2200      	movs	r2, #0
    884a:	4619      	mov	r1, r3
    884c:	f001 fe96 	bl	a57c <mp_emit_bc_attr>
}
    8850:	bf00      	nop
    8852:	3708      	adds	r7, #8
    8854:	46bd      	mov	sp, r7
    8856:	bd80      	pop	{r7, pc}

00008858 <compile_dictorsetmaker_item>:
        EMIT_ARG(build, 2, MP_EMIT_BUILD_SLICE);
    }
}
#endif // MICROPY_PY_BUILTINS_SLICE

STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8858:	b580      	push	{r7, lr}
    885a:	b082      	sub	sp, #8
    885c:	af00      	add	r7, sp, #0
    885e:	6078      	str	r0, [r7, #4]
    8860:	6039      	str	r1, [r7, #0]
    // if this is called then we are compiling a dict key:value pair
    compile_node(comp, pns->nodes[1]); // value
    8862:	683b      	ldr	r3, [r7, #0]
    8864:	68db      	ldr	r3, [r3, #12]
    8866:	4619      	mov	r1, r3
    8868:	6878      	ldr	r0, [r7, #4]
    886a:	f000 f897 	bl	899c <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    886e:	683b      	ldr	r3, [r7, #0]
    8870:	689b      	ldr	r3, [r3, #8]
    8872:	4619      	mov	r1, r3
    8874:	6878      	ldr	r0, [r7, #4]
    8876:	f000 f891 	bl	899c <compile_node>
}
    887a:	bf00      	nop
    887c:	3708      	adds	r7, #8
    887e:	46bd      	mov	sp, r7
    8880:	bd80      	pop	{r7, pc}
    8882:	bf00      	nop

00008884 <compile_classdef>:

STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8884:	b580      	push	{r7, lr}
    8886:	b084      	sub	sp, #16
    8888:	af00      	add	r7, sp, #0
    888a:	6078      	str	r0, [r7, #4]
    888c:	6039      	str	r1, [r7, #0]
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    888e:	687b      	ldr	r3, [r7, #4]
    8890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8892:	7e5b      	ldrb	r3, [r3, #25]
    8894:	461a      	mov	r2, r3
    8896:	6839      	ldr	r1, [r7, #0]
    8898:	6878      	ldr	r0, [r7, #4]
    889a:	f7fd f991 	bl	5bc0 <compile_classdef_helper>
    889e:	60f8      	str	r0, [r7, #12]
    // store class object into class name
    compile_store_id(comp, cname);
    88a0:	68f9      	ldr	r1, [r7, #12]
    88a2:	6878      	ldr	r0, [r7, #4]
    88a4:	f7fc fb94 	bl	4fd0 <compile_store_id>
}
    88a8:	bf00      	nop
    88aa:	3710      	adds	r7, #16
    88ac:	46bd      	mov	sp, r7
    88ae:	bd80      	pop	{r7, pc}

000088b0 <compile_yield_expr>:

STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    88b0:	b580      	push	{r7, lr}
    88b2:	b082      	sub	sp, #8
    88b4:	af00      	add	r7, sp, #0
    88b6:	6078      	str	r0, [r7, #4]
    88b8:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    88be:	681b      	ldr	r3, [r3, #0]
    88c0:	2b07      	cmp	r3, #7
    88c2:	d00b      	beq.n	88dc <compile_yield_expr+0x2c>
    88c4:	687b      	ldr	r3, [r7, #4]
    88c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	2b02      	cmp	r3, #2
    88cc:	d006      	beq.n	88dc <compile_yield_expr+0x2c>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    88ce:	683b      	ldr	r3, [r7, #0]
    88d0:	4a21      	ldr	r2, [pc, #132]	; (8958 <compile_yield_expr+0xa8>)
    88d2:	4619      	mov	r1, r3
    88d4:	6878      	ldr	r0, [r7, #4]
    88d6:	f7fc fa5b 	bl	4d90 <compile_syntax_error>
        return;
    88da:	e039      	b.n	8950 <compile_yield_expr+0xa0>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    88dc:	683b      	ldr	r3, [r7, #0]
    88de:	689b      	ldr	r3, [r3, #8]
    88e0:	2b00      	cmp	r3, #0
    88e2:	d10c      	bne.n	88fe <compile_yield_expr+0x4e>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    88e4:	687b      	ldr	r3, [r7, #4]
    88e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88e8:	210e      	movs	r1, #14
    88ea:	4618      	mov	r0, r3
    88ec:	f001 fd1e 	bl	a32c <mp_emit_bc_load_const_tok>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88f4:	2100      	movs	r1, #0
    88f6:	4618      	mov	r0, r3
    88f8:	f002 fa56 	bl	ada8 <mp_emit_bc_yield>
    88fc:	e028      	b.n	8950 <compile_yield_expr+0xa0>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    88fe:	683b      	ldr	r3, [r7, #0]
    8900:	689b      	ldr	r3, [r3, #8]
    8902:	2b00      	cmp	r3, #0
    8904:	d018      	beq.n	8938 <compile_yield_expr+0x88>
    8906:	683b      	ldr	r3, [r7, #0]
    8908:	689b      	ldr	r3, [r3, #8]
    890a:	f003 0303 	and.w	r3, r3, #3
    890e:	2b00      	cmp	r3, #0
    8910:	d112      	bne.n	8938 <compile_yield_expr+0x88>
    8912:	683b      	ldr	r3, [r7, #0]
    8914:	689b      	ldr	r3, [r3, #8]
    8916:	685b      	ldr	r3, [r3, #4]
    8918:	b2db      	uxtb	r3, r3
    891a:	2ba2      	cmp	r3, #162	; 0xa2
    891c:	d10c      	bne.n	8938 <compile_yield_expr+0x88>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    891e:	683b      	ldr	r3, [r7, #0]
    8920:	689b      	ldr	r3, [r3, #8]
    8922:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    8924:	683b      	ldr	r3, [r7, #0]
    8926:	689b      	ldr	r3, [r3, #8]
    8928:	4619      	mov	r1, r3
    892a:	6878      	ldr	r0, [r7, #4]
    892c:	f000 f836 	bl	899c <compile_node>
        compile_yield_from(comp);
    8930:	6878      	ldr	r0, [r7, #4]
    8932:	f7fe fe97 	bl	7664 <compile_yield_from>
    8936:	e00b      	b.n	8950 <compile_yield_expr+0xa0>
    } else {
        compile_node(comp, pns->nodes[0]);
    8938:	683b      	ldr	r3, [r7, #0]
    893a:	689b      	ldr	r3, [r3, #8]
    893c:	4619      	mov	r1, r3
    893e:	6878      	ldr	r0, [r7, #4]
    8940:	f000 f82c 	bl	899c <compile_node>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8944:	687b      	ldr	r3, [r7, #4]
    8946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8948:	2100      	movs	r1, #0
    894a:	4618      	mov	r0, r3
    894c:	f002 fa2c 	bl	ada8 <mp_emit_bc_yield>
    }
}
    8950:	3708      	adds	r7, #8
    8952:	46bd      	mov	sp, r7
    8954:	bd80      	pop	{r7, pc}
    8956:	bf00      	nop
    8958:	0001eb54 	.word	0x0001eb54

0000895c <get_const_object>:
    compile_atom_expr_normal(comp, pns);
    compile_yield_from(comp);
}
#endif

STATIC mp_obj_t get_const_object(mp_parse_node_struct_t *pns) {
    895c:	b480      	push	{r7}
    895e:	b083      	sub	sp, #12
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
    #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	689b      	ldr	r3, [r3, #8]
    #endif
}
    8968:	4618      	mov	r0, r3
    896a:	370c      	adds	r7, #12
    896c:	46bd      	mov	sp, r7
    896e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8972:	4770      	bx	lr

00008974 <compile_const_object>:

STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8974:	b590      	push	{r4, r7, lr}
    8976:	b083      	sub	sp, #12
    8978:	af00      	add	r7, sp, #0
    897a:	6078      	str	r0, [r7, #4]
    897c:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_obj, get_const_object(pns));
    897e:	687b      	ldr	r3, [r7, #4]
    8980:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8982:	6838      	ldr	r0, [r7, #0]
    8984:	f7ff ffea 	bl	895c <get_const_object>
    8988:	4603      	mov	r3, r0
    898a:	4619      	mov	r1, r3
    898c:	4620      	mov	r0, r4
    898e:	f001 fd3d 	bl	a40c <mp_emit_bc_load_const_obj>
}
    8992:	bf00      	nop
    8994:	370c      	adds	r7, #12
    8996:	46bd      	mov	sp, r7
    8998:	bd90      	pop	{r4, r7, pc}
    899a:	bf00      	nop

0000899c <compile_node>:
#undef DEF_RULE
#undef DEF_RULE_NC
    compile_const_object,
};

STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    899c:	b590      	push	{r4, r7, lr}
    899e:	b089      	sub	sp, #36	; 0x24
    89a0:	af00      	add	r7, sp, #0
    89a2:	6078      	str	r0, [r7, #4]
    89a4:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    89a6:	683b      	ldr	r3, [r7, #0]
    89a8:	2b00      	cmp	r3, #0
    89aa:	d078      	beq.n	8a9e <compile_node+0x102>
        // pass
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    89ac:	683b      	ldr	r3, [r7, #0]
    89ae:	f003 0301 	and.w	r3, r3, #1
    89b2:	2b00      	cmp	r3, #0
    89b4:	d009      	beq.n	89ca <compile_node+0x2e>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    89b6:	683b      	ldr	r3, [r7, #0]
    89b8:	105b      	asrs	r3, r3, #1
    89ba:	61fb      	str	r3, [r7, #28]
            } else {
                EMIT_ARG(load_const_obj, mp_obj_new_int_from_ll(arg));
            }
        }
        #else
        EMIT_ARG(load_const_small_int, arg);
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89c0:	69f9      	ldr	r1, [r7, #28]
    89c2:	4618      	mov	r0, r3
    89c4:	f001 fcee 	bl	a3a4 <mp_emit_bc_load_const_small_int>
        EMIT_ARG(set_source_line, pns->source_line);
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
        f(comp, pns);
    }
}
    89c8:	e069      	b.n	8a9e <compile_node+0x102>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    89ca:	683b      	ldr	r3, [r7, #0]
    89cc:	f003 0303 	and.w	r3, r3, #3
    89d0:	2b00      	cmp	r3, #0
    89d2:	d041      	beq.n	8a58 <compile_node+0xbc>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    89d4:	683b      	ldr	r3, [r7, #0]
    89d6:	091b      	lsrs	r3, r3, #4
    89d8:	61bb      	str	r3, [r7, #24]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    89da:	683b      	ldr	r3, [r7, #0]
    89dc:	f003 030f 	and.w	r3, r3, #15
    89e0:	2b06      	cmp	r3, #6
    89e2:	d008      	beq.n	89f6 <compile_node+0x5a>
    89e4:	2b0a      	cmp	r3, #10
    89e6:	d00d      	beq.n	8a04 <compile_node+0x68>
    89e8:	2b02      	cmp	r3, #2
    89ea:	d12a      	bne.n	8a42 <compile_node+0xa6>
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    89ec:	69b9      	ldr	r1, [r7, #24]
    89ee:	6878      	ldr	r0, [r7, #4]
    89f0:	f7fc fad0 	bl	4f94 <compile_load_id>
    89f4:	e053      	b.n	8a9e <compile_node+0x102>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    89f6:	687b      	ldr	r3, [r7, #4]
    89f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89fa:	69b9      	ldr	r1, [r7, #24]
    89fc:	4618      	mov	r0, r3
    89fe:	f001 fcf3 	bl	a3e8 <mp_emit_bc_load_const_str>
    8a02:	e04c      	b.n	8a9e <compile_node+0x102>
                if (comp->pass != MP_PASS_EMIT) {
    8a04:	687b      	ldr	r3, [r7, #4]
    8a06:	795b      	ldrb	r3, [r3, #5]
    8a08:	2b04      	cmp	r3, #4
    8a0a:	d006      	beq.n	8a1a <compile_node+0x7e>
                    EMIT_ARG(load_const_obj, mp_const_none);
    8a0c:	687b      	ldr	r3, [r7, #4]
    8a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a10:	4925      	ldr	r1, [pc, #148]	; (8aa8 <compile_node+0x10c>)
    8a12:	4618      	mov	r0, r3
    8a14:	f001 fcfa 	bl	a40c <mp_emit_bc_load_const_obj>
                break;
    8a18:	e041      	b.n	8a9e <compile_node+0x102>
                    const byte *data = qstr_data(arg, &len);
    8a1a:	f107 0308 	add.w	r3, r7, #8
    8a1e:	4619      	mov	r1, r3
    8a20:	69b8      	ldr	r0, [r7, #24]
    8a22:	f7f8 fc03 	bl	122c <qstr_data>
    8a26:	6178      	str	r0, [r7, #20]
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    8a28:	687b      	ldr	r3, [r7, #4]
    8a2a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8a2c:	68bb      	ldr	r3, [r7, #8]
    8a2e:	4619      	mov	r1, r3
    8a30:	6978      	ldr	r0, [r7, #20]
    8a32:	f00c fd09 	bl	15448 <mp_obj_new_bytes>
    8a36:	4603      	mov	r3, r0
    8a38:	4619      	mov	r1, r3
    8a3a:	4620      	mov	r0, r4
    8a3c:	f001 fce6 	bl	a40c <mp_emit_bc_load_const_obj>
                break;
    8a40:	e02d      	b.n	8a9e <compile_node+0x102>
                if (arg == MP_TOKEN_NEWLINE) {
    8a42:	69bb      	ldr	r3, [r7, #24]
    8a44:	2b04      	cmp	r3, #4
    8a46:	d029      	beq.n	8a9c <compile_node+0x100>
                  EMIT_ARG(load_const_tok, arg);
    8a48:	687b      	ldr	r3, [r7, #4]
    8a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a4c:	69b9      	ldr	r1, [r7, #24]
    8a4e:	4618      	mov	r0, r3
    8a50:	f001 fc6c 	bl	a32c <mp_emit_bc_load_const_tok>
                break;
    8a54:	bf00      	nop
    8a56:	e021      	b.n	8a9c <compile_node+0x100>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8a58:	683b      	ldr	r3, [r7, #0]
    8a5a:	613b      	str	r3, [r7, #16]
        EMIT_ARG(set_source_line, pns->source_line);
    8a5c:	687b      	ldr	r3, [r7, #4]
    8a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8a60:	693b      	ldr	r3, [r7, #16]
    8a62:	681b      	ldr	r3, [r3, #0]
    8a64:	4619      	mov	r1, r3
    8a66:	4610      	mov	r0, r2
    8a68:	f001 fbd6 	bl	a218 <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    8a6c:	693b      	ldr	r3, [r7, #16]
    8a6e:	685b      	ldr	r3, [r3, #4]
    8a70:	b2db      	uxtb	r3, r3
    8a72:	2b35      	cmp	r3, #53	; 0x35
    8a74:	d906      	bls.n	8a84 <compile_node+0xe8>
    8a76:	4b0d      	ldr	r3, [pc, #52]	; (8aac <compile_node+0x110>)
    8a78:	4a0d      	ldr	r2, [pc, #52]	; (8ab0 <compile_node+0x114>)
    8a7a:	f640 21ac 	movw	r1, #2732	; 0xaac
    8a7e:	480d      	ldr	r0, [pc, #52]	; (8ab4 <compile_node+0x118>)
    8a80:	f012 fc8c 	bl	1b39c <__assert_func>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    8a84:	693b      	ldr	r3, [r7, #16]
    8a86:	685b      	ldr	r3, [r3, #4]
    8a88:	b2db      	uxtb	r3, r3
    8a8a:	4a0b      	ldr	r2, [pc, #44]	; (8ab8 <compile_node+0x11c>)
    8a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a90:	60fb      	str	r3, [r7, #12]
        f(comp, pns);
    8a92:	68fb      	ldr	r3, [r7, #12]
    8a94:	6939      	ldr	r1, [r7, #16]
    8a96:	6878      	ldr	r0, [r7, #4]
    8a98:	4798      	blx	r3
}
    8a9a:	e000      	b.n	8a9e <compile_node+0x102>
                break;
    8a9c:	bf00      	nop
}
    8a9e:	bf00      	nop
    8aa0:	3724      	adds	r7, #36	; 0x24
    8aa2:	46bd      	mov	sp, r7
    8aa4:	bd90      	pop	{r4, r7, pc}
    8aa6:	bf00      	nop
    8aa8:	00021480 	.word	0x00021480
    8aac:	0001ec48 	.word	0x0001ec48
    8ab0:	0001f0ac 	.word	0x0001f0ac
    8ab4:	0001e310 	.word	0x0001e310
    8ab8:	0001eb70 	.word	0x0001eb70

00008abc <compile_scope_func_lambda_param>:

STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    8abc:	b580      	push	{r7, lr}
    8abe:	b08a      	sub	sp, #40	; 0x28
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	60f8      	str	r0, [r7, #12]
    8ac4:	60b9      	str	r1, [r7, #8]
    8ac6:	607a      	str	r2, [r7, #4]
    8ac8:	603b      	str	r3, [r7, #0]
    // check that **kw is last
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    8aca:	68fb      	ldr	r3, [r7, #12]
    8acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ace:	7e1b      	ldrb	r3, [r3, #24]
    8ad0:	f003 0302 	and.w	r3, r3, #2
    8ad4:	2b00      	cmp	r3, #0
    8ad6:	d005      	beq.n	8ae4 <compile_scope_func_lambda_param+0x28>
        compile_syntax_error(comp, pn, "invalid syntax");
    8ad8:	4a75      	ldr	r2, [pc, #468]	; (8cb0 <compile_scope_func_lambda_param+0x1f4>)
    8ada:	68b9      	ldr	r1, [r7, #8]
    8adc:	68f8      	ldr	r0, [r7, #12]
    8ade:	f7fc f957 	bl	4d90 <compile_syntax_error>
        return;
    8ae2:	e0e2      	b.n	8caa <compile_scope_func_lambda_param+0x1ee>
    }

    qstr param_name = MP_QSTR_NULL;
    8ae4:	2300      	movs	r3, #0
    8ae6:	627b      	str	r3, [r7, #36]	; 0x24
    uint param_flag = ID_FLAG_IS_PARAM;
    8ae8:	2301      	movs	r3, #1
    8aea:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    8aec:	68bb      	ldr	r3, [r7, #8]
    8aee:	f003 030f 	and.w	r3, r3, #15
    8af2:	2b02      	cmp	r3, #2
    8af4:	d118      	bne.n	8b28 <compile_scope_func_lambda_param+0x6c>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    8af6:	68bb      	ldr	r3, [r7, #8]
    8af8:	091b      	lsrs	r3, r3, #4
    8afa:	627b      	str	r3, [r7, #36]	; 0x24
        if (comp->have_star) {
    8afc:	68fb      	ldr	r3, [r7, #12]
    8afe:	799b      	ldrb	r3, [r3, #6]
    8b00:	2b00      	cmp	r3, #0
    8b02:	d008      	beq.n	8b16 <compile_scope_func_lambda_param+0x5a>
            // comes after a star, so counts as a keyword-only parameter
            comp->scope_cur->num_kwonly_args += 1;
    8b04:	68fb      	ldr	r3, [r7, #12]
    8b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b08:	68fa      	ldr	r2, [r7, #12]
    8b0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b0c:	8b92      	ldrh	r2, [r2, #28]
    8b0e:	3201      	adds	r2, #1
    8b10:	b292      	uxth	r2, r2
    8b12:	839a      	strh	r2, [r3, #28]
    8b14:	e0aa      	b.n	8c6c <compile_scope_func_lambda_param+0x1b0>
        } else {
            // comes before a star, so counts as a positional parameter
            comp->scope_cur->num_pos_args += 1;
    8b16:	68fb      	ldr	r3, [r7, #12]
    8b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b1a:	68fa      	ldr	r2, [r7, #12]
    8b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b1e:	8b52      	ldrh	r2, [r2, #26]
    8b20:	3201      	adds	r2, #1
    8b22:	b292      	uxth	r2, r2
    8b24:	835a      	strh	r2, [r3, #26]
    8b26:	e0a1      	b.n	8c6c <compile_scope_func_lambda_param+0x1b0>
        }
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    8b28:	68bb      	ldr	r3, [r7, #8]
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d004      	beq.n	8b38 <compile_scope_func_lambda_param+0x7c>
    8b2e:	68bb      	ldr	r3, [r7, #8]
    8b30:	f003 0303 	and.w	r3, r3, #3
    8b34:	2b00      	cmp	r3, #0
    8b36:	d006      	beq.n	8b46 <compile_scope_func_lambda_param+0x8a>
    8b38:	4b5e      	ldr	r3, [pc, #376]	; (8cb4 <compile_scope_func_lambda_param+0x1f8>)
    8b3a:	4a5f      	ldr	r2, [pc, #380]	; (8cb8 <compile_scope_func_lambda_param+0x1fc>)
    8b3c:	f640 21c5 	movw	r1, #2757	; 0xac5
    8b40:	485e      	ldr	r0, [pc, #376]	; (8cbc <compile_scope_func_lambda_param+0x200>)
    8b42:	f012 fc2b 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8b46:	68bb      	ldr	r3, [r7, #8]
    8b48:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    8b4a:	69fb      	ldr	r3, [r7, #28]
    8b4c:	685b      	ldr	r3, [r3, #4]
    8b4e:	b2da      	uxtb	r2, r3
    8b50:	687b      	ldr	r3, [r7, #4]
    8b52:	429a      	cmp	r2, r3
    8b54:	d119      	bne.n	8b8a <compile_scope_func_lambda_param+0xce>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8b56:	69fb      	ldr	r3, [r7, #28]
    8b58:	689b      	ldr	r3, [r3, #8]
    8b5a:	091b      	lsrs	r3, r3, #4
    8b5c:	627b      	str	r3, [r7, #36]	; 0x24
            if (comp->have_star) {
    8b5e:	68fb      	ldr	r3, [r7, #12]
    8b60:	799b      	ldrb	r3, [r3, #6]
    8b62:	2b00      	cmp	r3, #0
    8b64:	d008      	beq.n	8b78 <compile_scope_func_lambda_param+0xbc>
                // comes after a star, so counts as a keyword-only parameter
                comp->scope_cur->num_kwonly_args += 1;
    8b66:	68fb      	ldr	r3, [r7, #12]
    8b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b6a:	68fa      	ldr	r2, [r7, #12]
    8b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b6e:	8b92      	ldrh	r2, [r2, #28]
    8b70:	3201      	adds	r2, #1
    8b72:	b292      	uxth	r2, r2
    8b74:	839a      	strh	r2, [r3, #28]
    8b76:	e079      	b.n	8c6c <compile_scope_func_lambda_param+0x1b0>
            } else {
                // comes before a star, so counts as a positional parameter
                comp->scope_cur->num_pos_args += 1;
    8b78:	68fb      	ldr	r3, [r7, #12]
    8b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b7c:	68fa      	ldr	r2, [r7, #12]
    8b7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b80:	8b52      	ldrh	r2, [r2, #26]
    8b82:	3201      	adds	r2, #1
    8b84:	b292      	uxth	r2, r2
    8b86:	835a      	strh	r2, [r3, #26]
    8b88:	e070      	b.n	8c6c <compile_scope_func_lambda_param+0x1b0>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    8b8a:	69fb      	ldr	r3, [r7, #28]
    8b8c:	685b      	ldr	r3, [r3, #4]
    8b8e:	b2da      	uxtb	r2, r3
    8b90:	683b      	ldr	r3, [r7, #0]
    8b92:	429a      	cmp	r2, r3
    8b94:	d14e      	bne.n	8c34 <compile_scope_func_lambda_param+0x178>
            if (comp->have_star) {
    8b96:	68fb      	ldr	r3, [r7, #12]
    8b98:	799b      	ldrb	r3, [r3, #6]
    8b9a:	2b00      	cmp	r3, #0
    8b9c:	d005      	beq.n	8baa <compile_scope_func_lambda_param+0xee>
                // more than one star
                compile_syntax_error(comp, pn, "invalid syntax");
    8b9e:	4a44      	ldr	r2, [pc, #272]	; (8cb0 <compile_scope_func_lambda_param+0x1f4>)
    8ba0:	68b9      	ldr	r1, [r7, #8]
    8ba2:	68f8      	ldr	r0, [r7, #12]
    8ba4:	f7fc f8f4 	bl	4d90 <compile_syntax_error>
                return;
    8ba8:	e07f      	b.n	8caa <compile_scope_func_lambda_param+0x1ee>
            }
            comp->have_star = true;
    8baa:	68fb      	ldr	r3, [r7, #12]
    8bac:	2201      	movs	r2, #1
    8bae:	719a      	strb	r2, [r3, #6]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    8bb0:	2303      	movs	r3, #3
    8bb2:	623b      	str	r3, [r7, #32]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8bb4:	69fb      	ldr	r3, [r7, #28]
    8bb6:	689b      	ldr	r3, [r3, #8]
    8bb8:	2b00      	cmp	r3, #0
    8bba:	d057      	beq.n	8c6c <compile_scope_func_lambda_param+0x1b0>
                // bare star
                // TODO see http://www.python.org/dev/peps/pep-3102/
                //assert(comp->scope_cur->num_dict_params == 0);
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    8bbc:	69fb      	ldr	r3, [r7, #28]
    8bbe:	689b      	ldr	r3, [r3, #8]
    8bc0:	f003 030f 	and.w	r3, r3, #15
    8bc4:	2b02      	cmp	r3, #2
    8bc6:	d10d      	bne.n	8be4 <compile_scope_func_lambda_param+0x128>
                // named star
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8bc8:	68fb      	ldr	r3, [r7, #12]
    8bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bcc:	68fa      	ldr	r2, [r7, #12]
    8bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8bd0:	7e12      	ldrb	r2, [r2, #24]
    8bd2:	f042 0201 	orr.w	r2, r2, #1
    8bd6:	b2d2      	uxtb	r2, r2
    8bd8:	761a      	strb	r2, [r3, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8bda:	69fb      	ldr	r3, [r7, #28]
    8bdc:	689b      	ldr	r3, [r3, #8]
    8bde:	091b      	lsrs	r3, r3, #4
    8be0:	627b      	str	r3, [r7, #36]	; 0x24
    8be2:	e043      	b.n	8c6c <compile_scope_func_lambda_param+0x1b0>
            } else {
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    8be4:	69fb      	ldr	r3, [r7, #28]
    8be6:	689b      	ldr	r3, [r3, #8]
    8be8:	2b00      	cmp	r3, #0
    8bea:	d00b      	beq.n	8c04 <compile_scope_func_lambda_param+0x148>
    8bec:	69fb      	ldr	r3, [r7, #28]
    8bee:	689b      	ldr	r3, [r3, #8]
    8bf0:	f003 0303 	and.w	r3, r3, #3
    8bf4:	2b00      	cmp	r3, #0
    8bf6:	d105      	bne.n	8c04 <compile_scope_func_lambda_param+0x148>
    8bf8:	69fb      	ldr	r3, [r7, #28]
    8bfa:	689b      	ldr	r3, [r3, #8]
    8bfc:	685b      	ldr	r3, [r3, #4]
    8bfe:	b2db      	uxtb	r3, r3
    8c00:	2b45      	cmp	r3, #69	; 0x45
    8c02:	d006      	beq.n	8c12 <compile_scope_func_lambda_param+0x156>
    8c04:	4b2e      	ldr	r3, [pc, #184]	; (8cc0 <compile_scope_func_lambda_param+0x204>)
    8c06:	4a2c      	ldr	r2, [pc, #176]	; (8cb8 <compile_scope_func_lambda_param+0x1fc>)
    8c08:	f640 21e1 	movw	r1, #2785	; 0xae1
    8c0c:	482b      	ldr	r0, [pc, #172]	; (8cbc <compile_scope_func_lambda_param+0x200>)
    8c0e:	f012 fbc5 	bl	1b39c <__assert_func>
                // named star with possible annotation
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8c12:	68fb      	ldr	r3, [r7, #12]
    8c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c16:	68fa      	ldr	r2, [r7, #12]
    8c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c1a:	7e12      	ldrb	r2, [r2, #24]
    8c1c:	f042 0201 	orr.w	r2, r2, #1
    8c20:	b2d2      	uxtb	r2, r2
    8c22:	761a      	strb	r2, [r3, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8c24:	69fb      	ldr	r3, [r7, #28]
    8c26:	689b      	ldr	r3, [r3, #8]
    8c28:	61fb      	str	r3, [r7, #28]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8c2a:	69fb      	ldr	r3, [r7, #28]
    8c2c:	689b      	ldr	r3, [r3, #8]
    8c2e:	091b      	lsrs	r3, r3, #4
    8c30:	627b      	str	r3, [r7, #36]	; 0x24
    8c32:	e01b      	b.n	8c6c <compile_scope_func_lambda_param+0x1b0>
            }
        } else {
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    8c34:	69fb      	ldr	r3, [r7, #28]
    8c36:	685b      	ldr	r3, [r3, #4]
    8c38:	b2da      	uxtb	r2, r3
    8c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8c3c:	429a      	cmp	r2, r3
    8c3e:	d006      	beq.n	8c4e <compile_scope_func_lambda_param+0x192>
    8c40:	4b20      	ldr	r3, [pc, #128]	; (8cc4 <compile_scope_func_lambda_param+0x208>)
    8c42:	4a1d      	ldr	r2, [pc, #116]	; (8cb8 <compile_scope_func_lambda_param+0x1fc>)
    8c44:	f640 21e8 	movw	r1, #2792	; 0xae8
    8c48:	481c      	ldr	r0, [pc, #112]	; (8cbc <compile_scope_func_lambda_param+0x200>)
    8c4a:	f012 fba7 	bl	1b39c <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8c4e:	69fb      	ldr	r3, [r7, #28]
    8c50:	689b      	ldr	r3, [r3, #8]
    8c52:	091b      	lsrs	r3, r3, #4
    8c54:	627b      	str	r3, [r7, #36]	; 0x24
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    8c56:	2305      	movs	r3, #5
    8c58:	623b      	str	r3, [r7, #32]
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    8c5a:	68fb      	ldr	r3, [r7, #12]
    8c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c5e:	68fa      	ldr	r2, [r7, #12]
    8c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c62:	7e12      	ldrb	r2, [r2, #24]
    8c64:	f042 0202 	orr.w	r2, r2, #2
    8c68:	b2d2      	uxtb	r2, r2
    8c6a:	761a      	strb	r2, [r3, #24]
        }
    }

    if (param_name != MP_QSTR_NULL) {
    8c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c6e:	2b00      	cmp	r3, #0
    8c70:	d01b      	beq.n	8caa <compile_scope_func_lambda_param+0x1ee>
        bool added;
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, &added);
    8c72:	68fb      	ldr	r3, [r7, #12]
    8c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c76:	f107 0217 	add.w	r2, r7, #23
    8c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8c7c:	4618      	mov	r0, r3
    8c7e:	f7fb ff3d 	bl	4afc <scope_find_or_add_id>
    8c82:	61b8      	str	r0, [r7, #24]
        if (!added) {
    8c84:	7dfb      	ldrb	r3, [r7, #23]
    8c86:	f083 0301 	eor.w	r3, r3, #1
    8c8a:	b2db      	uxtb	r3, r3
    8c8c:	2b00      	cmp	r3, #0
    8c8e:	d005      	beq.n	8c9c <compile_scope_func_lambda_param+0x1e0>
            compile_syntax_error(comp, pn, "name reused for argument");
    8c90:	4a0d      	ldr	r2, [pc, #52]	; (8cc8 <compile_scope_func_lambda_param+0x20c>)
    8c92:	68b9      	ldr	r1, [r7, #8]
    8c94:	68f8      	ldr	r0, [r7, #12]
    8c96:	f7fc f87b 	bl	4d90 <compile_syntax_error>
    8c9a:	e006      	b.n	8caa <compile_scope_func_lambda_param+0x1ee>
            return;
        }
        id_info->kind = ID_INFO_KIND_LOCAL;
    8c9c:	69bb      	ldr	r3, [r7, #24]
    8c9e:	2202      	movs	r2, #2
    8ca0:	701a      	strb	r2, [r3, #0]
        id_info->flags = param_flag;
    8ca2:	6a3b      	ldr	r3, [r7, #32]
    8ca4:	b2da      	uxtb	r2, r3
    8ca6:	69bb      	ldr	r3, [r7, #24]
    8ca8:	705a      	strb	r2, [r3, #1]
    }
}
    8caa:	3728      	adds	r7, #40	; 0x28
    8cac:	46bd      	mov	sp, r7
    8cae:	bd80      	pop	{r7, pc}
    8cb0:	0001eb10 	.word	0x0001eb10
    8cb4:	0001e458 	.word	0x0001e458
    8cb8:	0001f0bc 	.word	0x0001f0bc
    8cbc:	0001e310 	.word	0x0001e310
    8cc0:	0001ec7c 	.word	0x0001ec7c
    8cc4:	0001ecb4 	.word	0x0001ecb4
    8cc8:	0001ece4 	.word	0x0001ece4

00008ccc <compile_scope_func_param>:

STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    8ccc:	b580      	push	{r7, lr}
    8cce:	b084      	sub	sp, #16
    8cd0:	af02      	add	r7, sp, #8
    8cd2:	6078      	str	r0, [r7, #4]
    8cd4:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    8cd6:	2342      	movs	r3, #66	; 0x42
    8cd8:	9300      	str	r3, [sp, #0]
    8cda:	2341      	movs	r3, #65	; 0x41
    8cdc:	2240      	movs	r2, #64	; 0x40
    8cde:	6839      	ldr	r1, [r7, #0]
    8ce0:	6878      	ldr	r0, [r7, #4]
    8ce2:	f7ff feeb 	bl	8abc <compile_scope_func_lambda_param>
}
    8ce6:	bf00      	nop
    8ce8:	3708      	adds	r7, #8
    8cea:	46bd      	mov	sp, r7
    8cec:	bd80      	pop	{r7, pc}
    8cee:	bf00      	nop

00008cf0 <compile_scope_lambda_param>:

STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    8cf0:	b580      	push	{r7, lr}
    8cf2:	b084      	sub	sp, #16
    8cf4:	af02      	add	r7, sp, #8
    8cf6:	6078      	str	r0, [r7, #4]
    8cf8:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    8cfa:	234a      	movs	r3, #74	; 0x4a
    8cfc:	9300      	str	r3, [sp, #0]
    8cfe:	2349      	movs	r3, #73	; 0x49
    8d00:	2248      	movs	r2, #72	; 0x48
    8d02:	6839      	ldr	r1, [r7, #0]
    8d04:	6878      	ldr	r0, [r7, #4]
    8d06:	f7ff fed9 	bl	8abc <compile_scope_func_lambda_param>
}
    8d0a:	bf00      	nop
    8d0c:	3708      	adds	r7, #8
    8d0e:	46bd      	mov	sp, r7
    8d10:	bd80      	pop	{r7, pc}
    8d12:	bf00      	nop

00008d14 <compile_scope_comp_iter>:
        }
    }
}
#endif // MICROPY_EMIT_NATIVE

STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    8d14:	b580      	push	{r7, lr}
    8d16:	b08a      	sub	sp, #40	; 0x28
    8d18:	af00      	add	r7, sp, #0
    8d1a:	60f8      	str	r0, [r7, #12]
    8d1c:	60b9      	str	r1, [r7, #8]
    8d1e:	607a      	str	r2, [r7, #4]
    8d20:	603b      	str	r3, [r7, #0]
    uint l_top = comp_next_label(comp);
    8d22:	68f8      	ldr	r0, [r7, #12]
    8d24:	f7fc f850 	bl	4dc8 <comp_next_label>
    8d28:	6238      	str	r0, [r7, #32]
    uint l_end = comp_next_label(comp);
    8d2a:	68f8      	ldr	r0, [r7, #12]
    8d2c:	f7fc f84c 	bl	4dc8 <comp_next_label>
    8d30:	61f8      	str	r0, [r7, #28]
    EMIT_ARG(label_assign, l_top);
    8d32:	68fb      	ldr	r3, [r7, #12]
    8d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d36:	6a39      	ldr	r1, [r7, #32]
    8d38:	4618      	mov	r0, r3
    8d3a:	f001 fa79 	bl	a230 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    8d3e:	68fb      	ldr	r3, [r7, #12]
    8d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d42:	69f9      	ldr	r1, [r7, #28]
    8d44:	4618      	mov	r0, r3
    8d46:	f001 fe09 	bl	a95c <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    8d4a:	68bb      	ldr	r3, [r7, #8]
    8d4c:	689b      	ldr	r3, [r3, #8]
    8d4e:	2200      	movs	r2, #0
    8d50:	4619      	mov	r1, r3
    8d52:	68f8      	ldr	r0, [r7, #12]
    8d54:	f7fc fc60 	bl	5618 <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    8d58:	68bb      	ldr	r3, [r7, #8]
    8d5a:	691b      	ldr	r3, [r3, #16]
    8d5c:	627b      	str	r3, [r7, #36]	; 0x24

    tail_recursion:
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    8d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d60:	2b00      	cmp	r3, #0
    8d62:	d120      	bne.n	8da6 <compile_scope_comp_iter+0x92>
        // no more nested if/for; compile inner expression
        compile_node(comp, pn_inner_expr);
    8d64:	6879      	ldr	r1, [r7, #4]
    8d66:	68f8      	ldr	r0, [r7, #12]
    8d68:	f7ff fe18 	bl	899c <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    8d6c:	68fb      	ldr	r3, [r7, #12]
    8d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d70:	681b      	ldr	r3, [r3, #0]
    8d72:	2b06      	cmp	r3, #6
    8d74:	d10b      	bne.n	8d8e <compile_scope_comp_iter+0x7a>
            EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8d76:	68fb      	ldr	r3, [r7, #12]
    8d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d7a:	2100      	movs	r1, #0
    8d7c:	4618      	mov	r0, r3
    8d7e:	f002 f813 	bl	ada8 <mp_emit_bc_yield>
            EMIT(pop_top);
    8d82:	68fb      	ldr	r3, [r7, #12]
    8d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d86:	4618      	mov	r0, r3
    8d88:	f001 fcae 	bl	a6e8 <mp_emit_bc_pop_top>
    8d8c:	e03e      	b.n	8e0c <compile_scope_comp_iter+0xf8>
        } else {
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    8d8e:	68fb      	ldr	r3, [r7, #12]
    8d90:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8d92:	68fb      	ldr	r3, [r7, #12]
    8d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d96:	6819      	ldr	r1, [r3, #0]
    8d98:	683b      	ldr	r3, [r7, #0]
    8d9a:	009b      	lsls	r3, r3, #2
    8d9c:	3305      	adds	r3, #5
    8d9e:	461a      	mov	r2, r3
    8da0:	f001 fe98 	bl	aad4 <mp_emit_bc_store_comp>
    8da4:	e032      	b.n	8e0c <compile_scope_comp_iter+0xf8>
        }
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    8da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8da8:	685b      	ldr	r3, [r3, #4]
    8daa:	b2db      	uxtb	r3, r3
    8dac:	2ba0      	cmp	r3, #160	; 0xa0
    8dae:	d10c      	bne.n	8dca <compile_scope_comp_iter+0xb6>
        // if condition
        mp_parse_node_struct_t *pns_comp_if = (mp_parse_node_struct_t*)pn_iter;
    8db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8db2:	61bb      	str	r3, [r7, #24]
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    8db4:	69bb      	ldr	r3, [r7, #24]
    8db6:	6899      	ldr	r1, [r3, #8]
    8db8:	6a3b      	ldr	r3, [r7, #32]
    8dba:	2200      	movs	r2, #0
    8dbc:	68f8      	ldr	r0, [r7, #12]
    8dbe:	f7fc f98d 	bl	50dc <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    8dc2:	69bb      	ldr	r3, [r7, #24]
    8dc4:	68db      	ldr	r3, [r3, #12]
    8dc6:	627b      	str	r3, [r7, #36]	; 0x24
        goto tail_recursion;
    8dc8:	e7c9      	b.n	8d5e <compile_scope_comp_iter+0x4a>
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    8dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8dcc:	685b      	ldr	r3, [r3, #4]
    8dce:	b2db      	uxtb	r3, r3
    8dd0:	2b9f      	cmp	r3, #159	; 0x9f
    8dd2:	d006      	beq.n	8de2 <compile_scope_comp_iter+0xce>
    8dd4:	4b18      	ldr	r3, [pc, #96]	; (8e38 <compile_scope_comp_iter+0x124>)
    8dd6:	4a19      	ldr	r2, [pc, #100]	; (8e3c <compile_scope_comp_iter+0x128>)
    8dd8:	f640 3147 	movw	r1, #2887	; 0xb47
    8ddc:	4818      	ldr	r0, [pc, #96]	; (8e40 <compile_scope_comp_iter+0x12c>)
    8dde:	f012 fadd 	bl	1b39c <__assert_func>
        // for loop
        mp_parse_node_struct_t *pns_comp_for2 = (mp_parse_node_struct_t*)pn_iter;
    8de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8de4:	617b      	str	r3, [r7, #20]
        compile_node(comp, pns_comp_for2->nodes[1]);
    8de6:	697b      	ldr	r3, [r7, #20]
    8de8:	68db      	ldr	r3, [r3, #12]
    8dea:	4619      	mov	r1, r3
    8dec:	68f8      	ldr	r0, [r7, #12]
    8dee:	f7ff fdd5 	bl	899c <compile_node>
        EMIT_ARG(get_iter, true);
    8df2:	68fb      	ldr	r3, [r7, #12]
    8df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8df6:	2101      	movs	r1, #1
    8df8:	4618      	mov	r0, r3
    8dfa:	f001 fd91 	bl	a920 <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    8dfe:	683b      	ldr	r3, [r7, #0]
    8e00:	3301      	adds	r3, #1
    8e02:	687a      	ldr	r2, [r7, #4]
    8e04:	6979      	ldr	r1, [r7, #20]
    8e06:	68f8      	ldr	r0, [r7, #12]
    8e08:	f7ff ff84 	bl	8d14 <compile_scope_comp_iter>
    }

    EMIT_ARG(jump, l_top);
    8e0c:	68fb      	ldr	r3, [r7, #12]
    8e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e10:	6a39      	ldr	r1, [r7, #32]
    8e12:	4618      	mov	r0, r3
    8e14:	f001 fc9a 	bl	a74c <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    8e18:	68fb      	ldr	r3, [r7, #12]
    8e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e1c:	69f9      	ldr	r1, [r7, #28]
    8e1e:	4618      	mov	r0, r3
    8e20:	f001 fa06 	bl	a230 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    8e24:	68fb      	ldr	r3, [r7, #12]
    8e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e28:	4618      	mov	r0, r3
    8e2a:	f001 fda9 	bl	a980 <mp_emit_bc_for_iter_end>
}
    8e2e:	bf00      	nop
    8e30:	3728      	adds	r7, #40	; 0x28
    8e32:	46bd      	mov	sp, r7
    8e34:	bd80      	pop	{r7, pc}
    8e36:	bf00      	nop
    8e38:	0001ed00 	.word	0x0001ed00
    8e3c:	0001f0dc 	.word	0x0001f0dc
    8e40:	0001e310 	.word	0x0001e310

00008e44 <check_for_doc_string>:

STATIC void check_for_doc_string(compiler_t *comp, mp_parse_node_t pn) {
    8e44:	b480      	push	{r7}
    8e46:	b083      	sub	sp, #12
    8e48:	af00      	add	r7, sp, #0
    8e4a:	6078      	str	r0, [r7, #4]
    8e4c:	6039      	str	r1, [r7, #0]
    }
#else
    (void)comp;
    (void)pn;
#endif
}
    8e4e:	bf00      	nop
    8e50:	370c      	adds	r7, #12
    8e52:	46bd      	mov	sp, r7
    8e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e58:	4770      	bx	lr
    8e5a:	bf00      	nop

00008e5c <compile_scope>:

STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    8e5c:	b580      	push	{r7, lr}
    8e5e:	b090      	sub	sp, #64	; 0x40
    8e60:	af00      	add	r7, sp, #0
    8e62:	60f8      	str	r0, [r7, #12]
    8e64:	60b9      	str	r1, [r7, #8]
    8e66:	607a      	str	r2, [r7, #4]
    comp->pass = pass;
    8e68:	687b      	ldr	r3, [r7, #4]
    8e6a:	b2da      	uxtb	r2, r3
    8e6c:	68fb      	ldr	r3, [r7, #12]
    8e6e:	715a      	strb	r2, [r3, #5]
    comp->scope_cur = scope;
    8e70:	68fb      	ldr	r3, [r7, #12]
    8e72:	68ba      	ldr	r2, [r7, #8]
    8e74:	625a      	str	r2, [r3, #36]	; 0x24
    comp->next_label = 0;
    8e76:	68fb      	ldr	r3, [r7, #12]
    8e78:	2200      	movs	r2, #0
    8e7a:	611a      	str	r2, [r3, #16]
    EMIT_ARG(start_pass, pass, scope);
    8e7c:	68fb      	ldr	r3, [r7, #12]
    8e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e80:	68ba      	ldr	r2, [r7, #8]
    8e82:	6879      	ldr	r1, [r7, #4]
    8e84:	4618      	mov	r0, r3
    8e86:	f000 fffb 	bl	9e80 <mp_emit_bc_start_pass>

    if (comp->pass == MP_PASS_SCOPE) {
    8e8a:	68fb      	ldr	r3, [r7, #12]
    8e8c:	795b      	ldrb	r3, [r3, #5]
    8e8e:	2b01      	cmp	r3, #1
    8e90:	d105      	bne.n	8e9e <compile_scope+0x42>
        // reset maximum stack sizes in scope
        // they will be computed in this first pass
        scope->stack_size = 0;
    8e92:	68bb      	ldr	r3, [r7, #8]
    8e94:	2200      	movs	r2, #0
    8e96:	845a      	strh	r2, [r3, #34]	; 0x22
        scope->exc_stack_size = 0;
    8e98:	68bb      	ldr	r3, [r7, #8]
    8e9a:	2200      	movs	r2, #0
    8e9c:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    // compile
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8e9e:	68bb      	ldr	r3, [r7, #8]
    8ea0:	68db      	ldr	r3, [r3, #12]
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d025      	beq.n	8ef2 <compile_scope+0x96>
    8ea6:	68bb      	ldr	r3, [r7, #8]
    8ea8:	68db      	ldr	r3, [r3, #12]
    8eaa:	f003 0303 	and.w	r3, r3, #3
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d11f      	bne.n	8ef2 <compile_scope+0x96>
    8eb2:	68bb      	ldr	r3, [r7, #8]
    8eb4:	68db      	ldr	r3, [r3, #12]
    8eb6:	685b      	ldr	r3, [r3, #4]
    8eb8:	b2db      	uxtb	r3, r3
    8eba:	2b38      	cmp	r3, #56	; 0x38
    8ebc:	d119      	bne.n	8ef2 <compile_scope+0x96>
        assert(scope->kind == SCOPE_MODULE);
    8ebe:	68bb      	ldr	r3, [r7, #8]
    8ec0:	681b      	ldr	r3, [r3, #0]
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d006      	beq.n	8ed4 <compile_scope+0x78>
    8ec6:	4b9c      	ldr	r3, [pc, #624]	; (9138 <compile_scope+0x2dc>)
    8ec8:	4a9c      	ldr	r2, [pc, #624]	; (913c <compile_scope+0x2e0>)
    8eca:	f44f 6139 	mov.w	r1, #2960	; 0xb90
    8ece:	489c      	ldr	r0, [pc, #624]	; (9140 <compile_scope+0x2e4>)
    8ed0:	f012 fa64 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8ed4:	68bb      	ldr	r3, [r7, #8]
    8ed6:	68db      	ldr	r3, [r3, #12]
    8ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        compile_node(comp, pns->nodes[0]); // compile the expression
    8eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8edc:	689b      	ldr	r3, [r3, #8]
    8ede:	4619      	mov	r1, r3
    8ee0:	68f8      	ldr	r0, [r7, #12]
    8ee2:	f7ff fd5b 	bl	899c <compile_node>
        EMIT(return_value);
    8ee6:	68fb      	ldr	r3, [r7, #12]
    8ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8eea:	4618      	mov	r0, r3
    8eec:	f001 ff22 	bl	ad34 <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8ef0:	e21b      	b.n	932a <compile_scope+0x4ce>
    } else if (scope->kind == SCOPE_MODULE) {
    8ef2:	68bb      	ldr	r3, [r7, #8]
    8ef4:	681b      	ldr	r3, [r3, #0]
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	d11b      	bne.n	8f32 <compile_scope+0xd6>
        if (!comp->is_repl) {
    8efa:	68fb      	ldr	r3, [r7, #12]
    8efc:	791b      	ldrb	r3, [r3, #4]
    8efe:	2b00      	cmp	r3, #0
    8f00:	d105      	bne.n	8f0e <compile_scope+0xb2>
            check_for_doc_string(comp, scope->pn);
    8f02:	68bb      	ldr	r3, [r7, #8]
    8f04:	68db      	ldr	r3, [r3, #12]
    8f06:	4619      	mov	r1, r3
    8f08:	68f8      	ldr	r0, [r7, #12]
    8f0a:	f7ff ff9b 	bl	8e44 <check_for_doc_string>
        }
        compile_node(comp, scope->pn);
    8f0e:	68bb      	ldr	r3, [r7, #8]
    8f10:	68db      	ldr	r3, [r3, #12]
    8f12:	4619      	mov	r1, r3
    8f14:	68f8      	ldr	r0, [r7, #12]
    8f16:	f7ff fd41 	bl	899c <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8f1a:	68fb      	ldr	r3, [r7, #12]
    8f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f1e:	210e      	movs	r1, #14
    8f20:	4618      	mov	r0, r3
    8f22:	f001 fa03 	bl	a32c <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    8f26:	68fb      	ldr	r3, [r7, #12]
    8f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f2a:	4618      	mov	r0, r3
    8f2c:	f001 ff02 	bl	ad34 <mp_emit_bc_return_value>
    8f30:	e1fb      	b.n	932a <compile_scope+0x4ce>
    } else if (scope->kind == SCOPE_FUNCTION) {
    8f32:	68bb      	ldr	r3, [r7, #8]
    8f34:	681b      	ldr	r3, [r3, #0]
    8f36:	2b07      	cmp	r3, #7
    8f38:	d14b      	bne.n	8fd2 <compile_scope+0x176>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    8f3a:	68bb      	ldr	r3, [r7, #8]
    8f3c:	68db      	ldr	r3, [r3, #12]
    8f3e:	2b00      	cmp	r3, #0
    8f40:	d005      	beq.n	8f4e <compile_scope+0xf2>
    8f42:	68bb      	ldr	r3, [r7, #8]
    8f44:	68db      	ldr	r3, [r3, #12]
    8f46:	f003 0303 	and.w	r3, r3, #3
    8f4a:	2b00      	cmp	r3, #0
    8f4c:	d006      	beq.n	8f5c <compile_scope+0x100>
    8f4e:	4b7d      	ldr	r3, [pc, #500]	; (9144 <compile_scope+0x2e8>)
    8f50:	4a7a      	ldr	r2, [pc, #488]	; (913c <compile_scope+0x2e0>)
    8f52:	f640 319c 	movw	r1, #2972	; 0xb9c
    8f56:	487a      	ldr	r0, [pc, #488]	; (9140 <compile_scope+0x2e4>)
    8f58:	f012 fa20 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8f5c:	68bb      	ldr	r3, [r7, #8]
    8f5e:	68db      	ldr	r3, [r3, #12]
    8f60:	63bb      	str	r3, [r7, #56]	; 0x38
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    8f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8f64:	685b      	ldr	r3, [r3, #4]
    8f66:	b2db      	uxtb	r3, r3
    8f68:	2b03      	cmp	r3, #3
    8f6a:	d006      	beq.n	8f7a <compile_scope+0x11e>
    8f6c:	4b76      	ldr	r3, [pc, #472]	; (9148 <compile_scope+0x2ec>)
    8f6e:	4a73      	ldr	r2, [pc, #460]	; (913c <compile_scope+0x2e0>)
    8f70:	f640 319e 	movw	r1, #2974	; 0xb9e
    8f74:	4872      	ldr	r0, [pc, #456]	; (9140 <compile_scope+0x2e4>)
    8f76:	f012 fa11 	bl	1b39c <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    8f7a:	68fb      	ldr	r3, [r7, #12]
    8f7c:	795b      	ldrb	r3, [r3, #5]
    8f7e:	2b01      	cmp	r3, #1
    8f80:	d109      	bne.n	8f96 <compile_scope+0x13a>
            comp->have_star = false;
    8f82:	68fb      	ldr	r3, [r7, #12]
    8f84:	2200      	movs	r2, #0
    8f86:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    8f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8f8a:	68d9      	ldr	r1, [r3, #12]
    8f8c:	4b6f      	ldr	r3, [pc, #444]	; (914c <compile_scope+0x2f0>)
    8f8e:	223e      	movs	r2, #62	; 0x3e
    8f90:	68f8      	ldr	r0, [r7, #12]
    8f92:	f7fb ff95 	bl	4ec0 <apply_to_single_or_list>
                }
            }
        }
        #endif // MICROPY_EMIT_NATIVE

        compile_node(comp, pns->nodes[3]); // 3 is function body
    8f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8f98:	695b      	ldr	r3, [r3, #20]
    8f9a:	4619      	mov	r1, r3
    8f9c:	68f8      	ldr	r0, [r7, #12]
    8f9e:	f7ff fcfd 	bl	899c <compile_node>
        // emit return if it wasn't the last opcode
        if (!EMIT(last_emit_was_return_value)) {
    8fa2:	68fb      	ldr	r3, [r7, #12]
    8fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8fa6:	4618      	mov	r0, r3
    8fa8:	f001 f8de 	bl	a168 <mp_emit_bc_last_emit_was_return_value>
    8fac:	4603      	mov	r3, r0
    8fae:	f083 0301 	eor.w	r3, r3, #1
    8fb2:	b2db      	uxtb	r3, r3
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	f000 81b8 	beq.w	932a <compile_scope+0x4ce>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8fba:	68fb      	ldr	r3, [r7, #12]
    8fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8fbe:	210e      	movs	r1, #14
    8fc0:	4618      	mov	r0, r3
    8fc2:	f001 f9b3 	bl	a32c <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    8fc6:	68fb      	ldr	r3, [r7, #12]
    8fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8fca:	4618      	mov	r0, r3
    8fcc:	f001 feb2 	bl	ad34 <mp_emit_bc_return_value>
    8fd0:	e1ab      	b.n	932a <compile_scope+0x4ce>
        }
    } else if (scope->kind == SCOPE_LAMBDA) {
    8fd2:	68bb      	ldr	r3, [r7, #8]
    8fd4:	681b      	ldr	r3, [r3, #0]
    8fd6:	2b02      	cmp	r3, #2
    8fd8:	d14a      	bne.n	9070 <compile_scope+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    8fda:	68bb      	ldr	r3, [r7, #8]
    8fdc:	68db      	ldr	r3, [r3, #12]
    8fde:	2b00      	cmp	r3, #0
    8fe0:	d005      	beq.n	8fee <compile_scope+0x192>
    8fe2:	68bb      	ldr	r3, [r7, #8]
    8fe4:	68db      	ldr	r3, [r3, #12]
    8fe6:	f003 0303 	and.w	r3, r3, #3
    8fea:	2b00      	cmp	r3, #0
    8fec:	d006      	beq.n	8ffc <compile_scope+0x1a0>
    8fee:	4b55      	ldr	r3, [pc, #340]	; (9144 <compile_scope+0x2e8>)
    8ff0:	4a52      	ldr	r2, [pc, #328]	; (913c <compile_scope+0x2e0>)
    8ff2:	f640 31c3 	movw	r1, #3011	; 0xbc3
    8ff6:	4852      	ldr	r0, [pc, #328]	; (9140 <compile_scope+0x2e4>)
    8ff8:	f012 f9d0 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8ffc:	68bb      	ldr	r3, [r7, #8]
    8ffe:	68db      	ldr	r3, [r3, #12]
    9000:	637b      	str	r3, [r7, #52]	; 0x34
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    9002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9004:	685b      	ldr	r3, [r3, #4]
    9006:	0a1b      	lsrs	r3, r3, #8
    9008:	2b03      	cmp	r3, #3
    900a:	d006      	beq.n	901a <compile_scope+0x1be>
    900c:	4b50      	ldr	r3, [pc, #320]	; (9150 <compile_scope+0x2f4>)
    900e:	4a4b      	ldr	r2, [pc, #300]	; (913c <compile_scope+0x2e0>)
    9010:	f640 31c5 	movw	r1, #3013	; 0xbc5
    9014:	484a      	ldr	r0, [pc, #296]	; (9140 <compile_scope+0x2e4>)
    9016:	f012 f9c1 	bl	1b39c <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    901a:	68fb      	ldr	r3, [r7, #12]
    901c:	795b      	ldrb	r3, [r3, #5]
    901e:	2b01      	cmp	r3, #1
    9020:	d109      	bne.n	9036 <compile_scope+0x1da>
            comp->have_star = false;
    9022:	68fb      	ldr	r3, [r7, #12]
    9024:	2200      	movs	r2, #0
    9026:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    9028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    902a:	6899      	ldr	r1, [r3, #8]
    902c:	4b49      	ldr	r3, [pc, #292]	; (9154 <compile_scope+0x2f8>)
    902e:	2246      	movs	r2, #70	; 0x46
    9030:	68f8      	ldr	r0, [r7, #12]
    9032:	f7fb ff45 	bl	4ec0 <apply_to_single_or_list>
        }

        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    9036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9038:	68db      	ldr	r3, [r3, #12]
    903a:	4619      	mov	r1, r3
    903c:	68f8      	ldr	r0, [r7, #12]
    903e:	f7ff fcad 	bl	899c <compile_node>

        // if the lambda is a generator, then we return None, not the result of the expression of the lambda
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    9042:	68bb      	ldr	r3, [r7, #8]
    9044:	7e1b      	ldrb	r3, [r3, #24]
    9046:	f003 0304 	and.w	r3, r3, #4
    904a:	2b00      	cmp	r3, #0
    904c:	d00a      	beq.n	9064 <compile_scope+0x208>
            EMIT(pop_top);
    904e:	68fb      	ldr	r3, [r7, #12]
    9050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9052:	4618      	mov	r0, r3
    9054:	f001 fb48 	bl	a6e8 <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9058:	68fb      	ldr	r3, [r7, #12]
    905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    905c:	210e      	movs	r1, #14
    905e:	4618      	mov	r0, r3
    9060:	f001 f964 	bl	a32c <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    9064:	68fb      	ldr	r3, [r7, #12]
    9066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9068:	4618      	mov	r0, r3
    906a:	f001 fe63 	bl	ad34 <mp_emit_bc_return_value>
    906e:	e15c      	b.n	932a <compile_scope+0x4ce>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    9070:	68bb      	ldr	r3, [r7, #8]
    9072:	681b      	ldr	r3, [r3, #0]
    9074:	2b03      	cmp	r3, #3
    9076:	d00c      	beq.n	9092 <compile_scope+0x236>
    9078:	68bb      	ldr	r3, [r7, #8]
    907a:	681b      	ldr	r3, [r3, #0]
    907c:	2b04      	cmp	r3, #4
    907e:	d008      	beq.n	9092 <compile_scope+0x236>
    9080:	68bb      	ldr	r3, [r7, #8]
    9082:	681b      	ldr	r3, [r3, #0]
    9084:	2b05      	cmp	r3, #5
    9086:	d004      	beq.n	9092 <compile_scope+0x236>
    9088:	68bb      	ldr	r3, [r7, #8]
    908a:	681b      	ldr	r3, [r3, #0]
    908c:	2b06      	cmp	r3, #6
    908e:	f040 80bf 	bne.w	9210 <compile_scope+0x3b4>
        // a bit of a hack at the moment

        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9092:	68bb      	ldr	r3, [r7, #8]
    9094:	68db      	ldr	r3, [r3, #12]
    9096:	2b00      	cmp	r3, #0
    9098:	d005      	beq.n	90a6 <compile_scope+0x24a>
    909a:	68bb      	ldr	r3, [r7, #8]
    909c:	68db      	ldr	r3, [r3, #12]
    909e:	f003 0303 	and.w	r3, r3, #3
    90a2:	2b00      	cmp	r3, #0
    90a4:	d006      	beq.n	90b4 <compile_scope+0x258>
    90a6:	4b27      	ldr	r3, [pc, #156]	; (9144 <compile_scope+0x2e8>)
    90a8:	4a24      	ldr	r2, [pc, #144]	; (913c <compile_scope+0x2e0>)
    90aa:	f640 31d9 	movw	r1, #3033	; 0xbd9
    90ae:	4824      	ldr	r0, [pc, #144]	; (9140 <compile_scope+0x2e4>)
    90b0:	f012 f974 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    90b4:	68bb      	ldr	r3, [r7, #8]
    90b6:	68db      	ldr	r3, [r3, #12]
    90b8:	627b      	str	r3, [r7, #36]	; 0x24
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    90ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90bc:	685b      	ldr	r3, [r3, #4]
    90be:	0a1b      	lsrs	r3, r3, #8
    90c0:	2b02      	cmp	r3, #2
    90c2:	d006      	beq.n	90d2 <compile_scope+0x276>
    90c4:	4b24      	ldr	r3, [pc, #144]	; (9158 <compile_scope+0x2fc>)
    90c6:	4a1d      	ldr	r2, [pc, #116]	; (913c <compile_scope+0x2e0>)
    90c8:	f640 31db 	movw	r1, #3035	; 0xbdb
    90cc:	481c      	ldr	r0, [pc, #112]	; (9140 <compile_scope+0x2e4>)
    90ce:	f012 f965 	bl	1b39c <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    90d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90d4:	68db      	ldr	r3, [r3, #12]
    90d6:	2b00      	cmp	r3, #0
    90d8:	d00b      	beq.n	90f2 <compile_scope+0x296>
    90da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90dc:	68db      	ldr	r3, [r3, #12]
    90de:	f003 0303 	and.w	r3, r3, #3
    90e2:	2b00      	cmp	r3, #0
    90e4:	d105      	bne.n	90f2 <compile_scope+0x296>
    90e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90e8:	68db      	ldr	r3, [r3, #12]
    90ea:	685b      	ldr	r3, [r3, #4]
    90ec:	b2db      	uxtb	r3, r3
    90ee:	2b9f      	cmp	r3, #159	; 0x9f
    90f0:	d006      	beq.n	9100 <compile_scope+0x2a4>
    90f2:	4b1a      	ldr	r3, [pc, #104]	; (915c <compile_scope+0x300>)
    90f4:	4a11      	ldr	r2, [pc, #68]	; (913c <compile_scope+0x2e0>)
    90f6:	f640 31dc 	movw	r1, #3036	; 0xbdc
    90fa:	4811      	ldr	r0, [pc, #68]	; (9140 <compile_scope+0x2e4>)
    90fc:	f012 f94e 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    9100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9102:	68db      	ldr	r3, [r3, #12]
    9104:	623b      	str	r3, [r7, #32]

        // We need a unique name for the comprehension argument (the iterator).
        // CPython uses .0, but we should be able to use anything that won't
        // clash with a user defined variable.  Best to use an existing qstr,
        // so we use the blank qstr.
        qstr qstr_arg = MP_QSTR_;
    9106:	2301      	movs	r3, #1
    9108:	61fb      	str	r3, [r7, #28]
        if (comp->pass == MP_PASS_SCOPE) {
    910a:	68fb      	ldr	r3, [r7, #12]
    910c:	795b      	ldrb	r3, [r3, #5]
    910e:	2b01      	cmp	r3, #1
    9110:	d12e      	bne.n	9170 <compile_scope+0x314>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qstr_arg, &added);
    9112:	68fb      	ldr	r3, [r7, #12]
    9114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9116:	f107 0217 	add.w	r2, r7, #23
    911a:	69f9      	ldr	r1, [r7, #28]
    911c:	4618      	mov	r0, r3
    911e:	f7fb fced 	bl	4afc <scope_find_or_add_id>
    9122:	61b8      	str	r0, [r7, #24]
            assert(added);
    9124:	7dfb      	ldrb	r3, [r7, #23]
    9126:	2b00      	cmp	r3, #0
    9128:	d11c      	bne.n	9164 <compile_scope+0x308>
    912a:	4b0d      	ldr	r3, [pc, #52]	; (9160 <compile_scope+0x304>)
    912c:	4a03      	ldr	r2, [pc, #12]	; (913c <compile_scope+0x2e0>)
    912e:	f640 31e7 	movw	r1, #3047	; 0xbe7
    9132:	4803      	ldr	r0, [pc, #12]	; (9140 <compile_scope+0x2e4>)
    9134:	f012 f932 	bl	1b39c <__assert_func>
    9138:	0001ed4c 	.word	0x0001ed4c
    913c:	0001f0f4 	.word	0x0001f0f4
    9140:	0001e310 	.word	0x0001e310
    9144:	0001ed68 	.word	0x0001ed68
    9148:	0001ed8c 	.word	0x0001ed8c
    914c:	00008ccd 	.word	0x00008ccd
    9150:	0001edbc 	.word	0x0001edbc
    9154:	00008cf1 	.word	0x00008cf1
    9158:	0001ea58 	.word	0x0001ea58
    915c:	0001ea84 	.word	0x0001ea84
    9160:	0001ede8 	.word	0x0001ede8
            id_info->kind = ID_INFO_KIND_LOCAL;
    9164:	69bb      	ldr	r3, [r7, #24]
    9166:	2202      	movs	r2, #2
    9168:	701a      	strb	r2, [r3, #0]
            scope->num_pos_args = 1;
    916a:	68bb      	ldr	r3, [r7, #8]
    916c:	2201      	movs	r2, #1
    916e:	835a      	strh	r2, [r3, #26]
        }

        if (scope->kind == SCOPE_LIST_COMP) {
    9170:	68bb      	ldr	r3, [r7, #8]
    9172:	681b      	ldr	r3, [r3, #0]
    9174:	2b03      	cmp	r3, #3
    9176:	d107      	bne.n	9188 <compile_scope+0x32c>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    9178:	68fb      	ldr	r3, [r7, #12]
    917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    917c:	2201      	movs	r2, #1
    917e:	2100      	movs	r1, #0
    9180:	4618      	mov	r0, r3
    9182:	f001 fc73 	bl	aa6c <mp_emit_bc_build>
    9186:	e00a      	b.n	919e <compile_scope+0x342>
        } else if (scope->kind == SCOPE_DICT_COMP) {
    9188:	68bb      	ldr	r3, [r7, #8]
    918a:	681b      	ldr	r3, [r3, #0]
    918c:	2b04      	cmp	r3, #4
    918e:	d106      	bne.n	919e <compile_scope+0x342>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    9190:	68fb      	ldr	r3, [r7, #12]
    9192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9194:	2203      	movs	r2, #3
    9196:	2100      	movs	r1, #0
    9198:	4618      	mov	r0, r3
    919a:	f001 fc67 	bl	aa6c <mp_emit_bc_build>
        #endif
        }

        // There are 4 slots on the stack for the iterator, and the first one is
        // NULL to indicate that the second one points to the iterator object.
        if (scope->kind == SCOPE_GEN_EXPR) {
    919e:	68bb      	ldr	r3, [r7, #8]
    91a0:	681b      	ldr	r3, [r3, #0]
    91a2:	2b06      	cmp	r3, #6
    91a4:	d113      	bne.n	91ce <compile_scope+0x372>
            MP_STATIC_ASSERT(MP_OBJ_ITER_BUF_NSLOTS == 4);
            EMIT(load_null);
    91a6:	68fb      	ldr	r3, [r7, #12]
    91a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91aa:	4618      	mov	r0, r3
    91ac:	f001 f940 	bl	a430 <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    91b0:	69f9      	ldr	r1, [r7, #28]
    91b2:	68f8      	ldr	r0, [r7, #12]
    91b4:	f7fb feee 	bl	4f94 <compile_load_id>
            EMIT(load_null);
    91b8:	68fb      	ldr	r3, [r7, #12]
    91ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91bc:	4618      	mov	r0, r3
    91be:	f001 f937 	bl	a430 <mp_emit_bc_load_null>
            EMIT(load_null);
    91c2:	68fb      	ldr	r3, [r7, #12]
    91c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91c6:	4618      	mov	r0, r3
    91c8:	f001 f932 	bl	a430 <mp_emit_bc_load_null>
    91cc:	e009      	b.n	91e2 <compile_scope+0x386>
        } else {
            compile_load_id(comp, qstr_arg);
    91ce:	69f9      	ldr	r1, [r7, #28]
    91d0:	68f8      	ldr	r0, [r7, #12]
    91d2:	f7fb fedf 	bl	4f94 <compile_load_id>
            EMIT_ARG(get_iter, true);
    91d6:	68fb      	ldr	r3, [r7, #12]
    91d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91da:	2101      	movs	r1, #1
    91dc:	4618      	mov	r0, r3
    91de:	f001 fb9f 	bl	a920 <mp_emit_bc_get_iter>
        }

        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    91e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91e4:	689a      	ldr	r2, [r3, #8]
    91e6:	2300      	movs	r3, #0
    91e8:	6a39      	ldr	r1, [r7, #32]
    91ea:	68f8      	ldr	r0, [r7, #12]
    91ec:	f7ff fd92 	bl	8d14 <compile_scope_comp_iter>

        if (scope->kind == SCOPE_GEN_EXPR) {
    91f0:	68bb      	ldr	r3, [r7, #8]
    91f2:	681b      	ldr	r3, [r3, #0]
    91f4:	2b06      	cmp	r3, #6
    91f6:	d105      	bne.n	9204 <compile_scope+0x3a8>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    91f8:	68fb      	ldr	r3, [r7, #12]
    91fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91fc:	210e      	movs	r1, #14
    91fe:	4618      	mov	r0, r3
    9200:	f001 f894 	bl	a32c <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    9204:	68fb      	ldr	r3, [r7, #12]
    9206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9208:	4618      	mov	r0, r3
    920a:	f001 fd93 	bl	ad34 <mp_emit_bc_return_value>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    920e:	e08c      	b.n	932a <compile_scope+0x4ce>
    } else {
        assert(scope->kind == SCOPE_CLASS);
    9210:	68bb      	ldr	r3, [r7, #8]
    9212:	681b      	ldr	r3, [r3, #0]
    9214:	2b01      	cmp	r3, #1
    9216:	d006      	beq.n	9226 <compile_scope+0x3ca>
    9218:	4b4e      	ldr	r3, [pc, #312]	; (9354 <compile_scope+0x4f8>)
    921a:	4a4f      	ldr	r2, [pc, #316]	; (9358 <compile_scope+0x4fc>)
    921c:	f640 410a 	movw	r1, #3082	; 0xc0a
    9220:	484e      	ldr	r0, [pc, #312]	; (935c <compile_scope+0x500>)
    9222:	f012 f8bb 	bl	1b39c <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9226:	68bb      	ldr	r3, [r7, #8]
    9228:	68db      	ldr	r3, [r3, #12]
    922a:	2b00      	cmp	r3, #0
    922c:	d005      	beq.n	923a <compile_scope+0x3de>
    922e:	68bb      	ldr	r3, [r7, #8]
    9230:	68db      	ldr	r3, [r3, #12]
    9232:	f003 0303 	and.w	r3, r3, #3
    9236:	2b00      	cmp	r3, #0
    9238:	d006      	beq.n	9248 <compile_scope+0x3ec>
    923a:	4b49      	ldr	r3, [pc, #292]	; (9360 <compile_scope+0x504>)
    923c:	4a46      	ldr	r2, [pc, #280]	; (9358 <compile_scope+0x4fc>)
    923e:	f640 410b 	movw	r1, #3083	; 0xc0b
    9242:	4846      	ldr	r0, [pc, #280]	; (935c <compile_scope+0x500>)
    9244:	f012 f8aa 	bl	1b39c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9248:	68bb      	ldr	r3, [r7, #8]
    924a:	68db      	ldr	r3, [r3, #12]
    924c:	633b      	str	r3, [r7, #48]	; 0x30
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9250:	685b      	ldr	r3, [r3, #4]
    9252:	b2db      	uxtb	r3, r3
    9254:	2b33      	cmp	r3, #51	; 0x33
    9256:	d006      	beq.n	9266 <compile_scope+0x40a>
    9258:	4b42      	ldr	r3, [pc, #264]	; (9364 <compile_scope+0x508>)
    925a:	4a3f      	ldr	r2, [pc, #252]	; (9358 <compile_scope+0x4fc>)
    925c:	f640 410d 	movw	r1, #3085	; 0xc0d
    9260:	483e      	ldr	r0, [pc, #248]	; (935c <compile_scope+0x500>)
    9262:	f012 f89b 	bl	1b39c <__assert_func>

        if (comp->pass == MP_PASS_SCOPE) {
    9266:	68fb      	ldr	r3, [r7, #12]
    9268:	795b      	ldrb	r3, [r3, #5]
    926a:	2b01      	cmp	r3, #1
    926c:	d114      	bne.n	9298 <compile_scope+0x43c>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(scope, MP_QSTR___class__, &added);
    926e:	f107 0316 	add.w	r3, r7, #22
    9272:	461a      	mov	r2, r3
    9274:	2106      	movs	r1, #6
    9276:	68b8      	ldr	r0, [r7, #8]
    9278:	f7fb fc40 	bl	4afc <scope_find_or_add_id>
    927c:	62f8      	str	r0, [r7, #44]	; 0x2c
            assert(added);
    927e:	7dbb      	ldrb	r3, [r7, #22]
    9280:	2b00      	cmp	r3, #0
    9282:	d106      	bne.n	9292 <compile_scope+0x436>
    9284:	4b38      	ldr	r3, [pc, #224]	; (9368 <compile_scope+0x50c>)
    9286:	4a34      	ldr	r2, [pc, #208]	; (9358 <compile_scope+0x4fc>)
    9288:	f640 4112 	movw	r1, #3090	; 0xc12
    928c:	4833      	ldr	r0, [pc, #204]	; (935c <compile_scope+0x500>)
    928e:	f012 f885 	bl	1b39c <__assert_func>
            id_info->kind = ID_INFO_KIND_LOCAL;
    9292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9294:	2202      	movs	r2, #2
    9296:	701a      	strb	r2, [r3, #0]
        }

        compile_load_id(comp, MP_QSTR___name__);
    9298:	211b      	movs	r1, #27
    929a:	68f8      	ldr	r0, [r7, #12]
    929c:	f7fb fe7a 	bl	4f94 <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    92a0:	211a      	movs	r1, #26
    92a2:	68f8      	ldr	r0, [r7, #12]
    92a4:	f7fb fe94 	bl	4fd0 <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    92a8:	68fb      	ldr	r3, [r7, #12]
    92aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    92ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    92ae:	689b      	ldr	r3, [r3, #8]
    92b0:	091b      	lsrs	r3, r3, #4
    92b2:	4619      	mov	r1, r3
    92b4:	4610      	mov	r0, r2
    92b6:	f001 f897 	bl	a3e8 <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    92ba:	211f      	movs	r1, #31
    92bc:	68f8      	ldr	r0, [r7, #12]
    92be:	f7fb fe87 	bl	4fd0 <compile_store_id>

        check_for_doc_string(comp, pns->nodes[2]);
    92c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    92c4:	691b      	ldr	r3, [r3, #16]
    92c6:	4619      	mov	r1, r3
    92c8:	68f8      	ldr	r0, [r7, #12]
    92ca:	f7ff fdbb 	bl	8e44 <check_for_doc_string>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    92ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    92d0:	691b      	ldr	r3, [r3, #16]
    92d2:	4619      	mov	r1, r3
    92d4:	68f8      	ldr	r0, [r7, #12]
    92d6:	f7ff fb61 	bl	899c <compile_node>

        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    92da:	2106      	movs	r1, #6
    92dc:	68b8      	ldr	r0, [r7, #8]
    92de:	f7fb fc59 	bl	4b94 <scope_find>
    92e2:	62b8      	str	r0, [r7, #40]	; 0x28
        assert(id != NULL);
    92e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92e6:	2b00      	cmp	r3, #0
    92e8:	d106      	bne.n	92f8 <compile_scope+0x49c>
    92ea:	4b20      	ldr	r3, [pc, #128]	; (936c <compile_scope+0x510>)
    92ec:	4a1a      	ldr	r2, [pc, #104]	; (9358 <compile_scope+0x4fc>)
    92ee:	f640 411f 	movw	r1, #3103	; 0xc1f
    92f2:	481a      	ldr	r0, [pc, #104]	; (935c <compile_scope+0x500>)
    92f4:	f012 f852 	bl	1b39c <__assert_func>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    92f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92fa:	781b      	ldrb	r3, [r3, #0]
    92fc:	2b02      	cmp	r3, #2
    92fe:	d106      	bne.n	930e <compile_scope+0x4b2>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9300:	68fb      	ldr	r3, [r7, #12]
    9302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9304:	210e      	movs	r1, #14
    9306:	4618      	mov	r0, r3
    9308:	f001 f810 	bl	a32c <mp_emit_bc_load_const_tok>
    930c:	e008      	b.n	9320 <compile_scope+0x4c4>
        } else {
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    930e:	68fb      	ldr	r3, [r7, #12]
    9310:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9312:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9314:	885b      	ldrh	r3, [r3, #2]
    9316:	461a      	mov	r2, r3
    9318:	2300      	movs	r3, #0
    931a:	2106      	movs	r1, #6
    931c:	f001 f898 	bl	a450 <mp_emit_bc_load_local>
        }
        EMIT(return_value);
    9320:	68fb      	ldr	r3, [r7, #12]
    9322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9324:	4618      	mov	r0, r3
    9326:	f001 fd05 	bl	ad34 <mp_emit_bc_return_value>
    }

    EMIT(end_pass);
    932a:	68fb      	ldr	r3, [r7, #12]
    932c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    932e:	4618      	mov	r0, r3
    9330:	f000 fea4 	bl	a07c <mp_emit_bc_end_pass>

    // make sure we match all the exception levels
    assert(comp->cur_except_level == 0);
    9334:	68fb      	ldr	r3, [r7, #12]
    9336:	8b9b      	ldrh	r3, [r3, #28]
    9338:	2b00      	cmp	r3, #0
    933a:	d006      	beq.n	934a <compile_scope+0x4ee>
    933c:	4b0c      	ldr	r3, [pc, #48]	; (9370 <compile_scope+0x514>)
    933e:	4a06      	ldr	r2, [pc, #24]	; (9358 <compile_scope+0x4fc>)
    9340:	f640 412b 	movw	r1, #3115	; 0xc2b
    9344:	4805      	ldr	r0, [pc, #20]	; (935c <compile_scope+0x500>)
    9346:	f012 f829 	bl	1b39c <__assert_func>
}
    934a:	bf00      	nop
    934c:	3740      	adds	r7, #64	; 0x40
    934e:	46bd      	mov	sp, r7
    9350:	bd80      	pop	{r7, pc}
    9352:	bf00      	nop
    9354:	0001edf0 	.word	0x0001edf0
    9358:	0001f0f4 	.word	0x0001f0f4
    935c:	0001e310 	.word	0x0001e310
    9360:	0001ed68 	.word	0x0001ed68
    9364:	0001ee0c 	.word	0x0001ee0c
    9368:	0001ede8 	.word	0x0001ede8
    936c:	0001ee3c 	.word	0x0001ee3c
    9370:	0001ee48 	.word	0x0001ee48

00009374 <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    9374:	b580      	push	{r7, lr}
    9376:	b092      	sub	sp, #72	; 0x48
    9378:	af00      	add	r7, sp, #0
    937a:	6078      	str	r0, [r7, #4]
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    937c:	687b      	ldr	r3, [r7, #4]
    937e:	7e1b      	ldrb	r3, [r3, #24]
    9380:	f003 0301 	and.w	r3, r3, #1
    9384:	2b00      	cmp	r3, #0
    9386:	d03c      	beq.n	9402 <scope_compute_things+0x8e>
        id_info_t *id_param = NULL;
    9388:	2300      	movs	r3, #0
    938a:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    938c:	687b      	ldr	r3, [r7, #4]
    938e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9390:	3b01      	subs	r3, #1
    9392:	643b      	str	r3, [r7, #64]	; 0x40
    9394:	e030      	b.n	93f8 <scope_compute_things+0x84>
            id_info_t *id = &scope->id_info[i];
    9396:	687b      	ldr	r3, [r7, #4]
    9398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    939a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    939c:	00db      	lsls	r3, r3, #3
    939e:	4413      	add	r3, r2
    93a0:	627b      	str	r3, [r7, #36]	; 0x24
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    93a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93a4:	785b      	ldrb	r3, [r3, #1]
    93a6:	f003 0302 	and.w	r3, r3, #2
    93aa:	2b00      	cmp	r3, #0
    93ac:	d018      	beq.n	93e0 <scope_compute_things+0x6c>
                if (id_param != NULL) {
    93ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    93b0:	2b00      	cmp	r3, #0
    93b2:	d025      	beq.n	9400 <scope_compute_things+0x8c>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    93b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    93b6:	f107 0308 	add.w	r3, r7, #8
    93ba:	e892 0003 	ldmia.w	r2, {r0, r1}
    93be:	e883 0003 	stmia.w	r3, {r0, r1}
    93c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    93c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    93c6:	e892 0003 	ldmia.w	r2, {r0, r1}
    93ca:	e883 0003 	stmia.w	r3, {r0, r1}
    93ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93d0:	461a      	mov	r2, r3
    93d2:	f107 0308 	add.w	r3, r7, #8
    93d6:	e893 0003 	ldmia.w	r3, {r0, r1}
    93da:	e882 0003 	stmia.w	r2, {r0, r1}
                }
                break;
    93de:	e00f      	b.n	9400 <scope_compute_things+0x8c>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    93e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    93e2:	2b00      	cmp	r3, #0
    93e4:	d105      	bne.n	93f2 <scope_compute_things+0x7e>
    93e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93e8:	785b      	ldrb	r3, [r3, #1]
    93ea:	2b01      	cmp	r3, #1
    93ec:	d101      	bne.n	93f2 <scope_compute_things+0x7e>
                id_param = id;
    93ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93f0:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    93f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    93f4:	3b01      	subs	r3, #1
    93f6:	643b      	str	r3, [r7, #64]	; 0x40
    93f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    93fa:	2b00      	cmp	r3, #0
    93fc:	dacb      	bge.n	9396 <scope_compute_things+0x22>
    93fe:	e000      	b.n	9402 <scope_compute_things+0x8e>
                break;
    9400:	bf00      	nop
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    9402:	687b      	ldr	r3, [r7, #4]
    9404:	2200      	movs	r2, #0
    9406:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    9408:	2300      	movs	r3, #0
    940a:	63fb      	str	r3, [r7, #60]	; 0x3c
    940c:	e02f      	b.n	946e <scope_compute_things+0xfa>
        id_info_t *id = &scope->id_info[i];
    940e:	687b      	ldr	r3, [r7, #4]
    9410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9414:	00db      	lsls	r3, r3, #3
    9416:	4413      	add	r3, r2
    9418:	623b      	str	r3, [r7, #32]
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    941a:	687b      	ldr	r3, [r7, #4]
    941c:	681b      	ldr	r3, [r3, #0]
    941e:	2b01      	cmp	r3, #1
    9420:	d103      	bne.n	942a <scope_compute_things+0xb6>
    9422:	6a3b      	ldr	r3, [r7, #32]
    9424:	685b      	ldr	r3, [r3, #4]
    9426:	2b06      	cmp	r3, #6
    9428:	d01d      	beq.n	9466 <scope_compute_things+0xf2>
            // __class__ is not counted as a local; if it's used then it becomes a ID_INFO_KIND_CELL
            continue;
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    942a:	687b      	ldr	r3, [r7, #4]
    942c:	681b      	ldr	r3, [r3, #0]
    942e:	2b01      	cmp	r3, #1
    9430:	d906      	bls.n	9440 <scope_compute_things+0xcc>
    9432:	6a3b      	ldr	r3, [r7, #32]
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	2b00      	cmp	r3, #0
    9438:	d102      	bne.n	9440 <scope_compute_things+0xcc>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    943a:	6a3b      	ldr	r3, [r7, #32]
    943c:	2201      	movs	r2, #1
    943e:	701a      	strb	r2, [r3, #0]
        }
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    9440:	6a3b      	ldr	r3, [r7, #32]
    9442:	781b      	ldrb	r3, [r3, #0]
    9444:	2b02      	cmp	r3, #2
    9446:	d005      	beq.n	9454 <scope_compute_things+0xe0>
    9448:	6a3b      	ldr	r3, [r7, #32]
    944a:	785b      	ldrb	r3, [r3, #1]
    944c:	f003 0301 	and.w	r3, r3, #1
    9450:	2b00      	cmp	r3, #0
    9452:	d009      	beq.n	9468 <scope_compute_things+0xf4>
            id->local_num = scope->num_locals++;
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	8c1b      	ldrh	r3, [r3, #32]
    9458:	1c5a      	adds	r2, r3, #1
    945a:	b291      	uxth	r1, r2
    945c:	687a      	ldr	r2, [r7, #4]
    945e:	8411      	strh	r1, [r2, #32]
    9460:	6a3a      	ldr	r2, [r7, #32]
    9462:	8053      	strh	r3, [r2, #2]
    9464:	e000      	b.n	9468 <scope_compute_things+0xf4>
            continue;
    9466:	bf00      	nop
    for (int i = 0; i < scope->id_info_len; i++) {
    9468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    946a:	3301      	adds	r3, #1
    946c:	63fb      	str	r3, [r7, #60]	; 0x3c
    946e:	687b      	ldr	r3, [r7, #4]
    9470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9472:	461a      	mov	r2, r3
    9474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9476:	429a      	cmp	r2, r3
    9478:	dcc9      	bgt.n	940e <scope_compute_things+0x9a>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    947a:	2300      	movs	r3, #0
    947c:	63bb      	str	r3, [r7, #56]	; 0x38
    947e:	e01c      	b.n	94ba <scope_compute_things+0x146>
        id_info_t *id = &scope->id_info[i];
    9480:	687b      	ldr	r3, [r7, #4]
    9482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9486:	00db      	lsls	r3, r3, #3
    9488:	4413      	add	r3, r2
    948a:	61fb      	str	r3, [r7, #28]
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    948c:	69fb      	ldr	r3, [r7, #28]
    948e:	781b      	ldrb	r3, [r3, #0]
    9490:	2b03      	cmp	r3, #3
    9492:	d10f      	bne.n	94b4 <scope_compute_things+0x140>
    9494:	69fb      	ldr	r3, [r7, #28]
    9496:	785b      	ldrb	r3, [r3, #1]
    9498:	f003 0301 	and.w	r3, r3, #1
    949c:	2b00      	cmp	r3, #0
    949e:	d109      	bne.n	94b4 <scope_compute_things+0x140>
            id->local_num = scope->num_locals;
    94a0:	687b      	ldr	r3, [r7, #4]
    94a2:	8c1a      	ldrh	r2, [r3, #32]
    94a4:	69fb      	ldr	r3, [r7, #28]
    94a6:	805a      	strh	r2, [r3, #2]
            scope->num_locals += 1;
    94a8:	687b      	ldr	r3, [r7, #4]
    94aa:	8c1b      	ldrh	r3, [r3, #32]
    94ac:	3301      	adds	r3, #1
    94ae:	b29a      	uxth	r2, r3
    94b0:	687b      	ldr	r3, [r7, #4]
    94b2:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    94b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    94b6:	3301      	adds	r3, #1
    94b8:	63bb      	str	r3, [r7, #56]	; 0x38
    94ba:	687b      	ldr	r3, [r7, #4]
    94bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    94be:	461a      	mov	r2, r3
    94c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    94c2:	429a      	cmp	r2, r3
    94c4:	dcdc      	bgt.n	9480 <scope_compute_things+0x10c>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    94c6:	687b      	ldr	r3, [r7, #4]
    94c8:	685b      	ldr	r3, [r3, #4]
    94ca:	2b00      	cmp	r3, #0
    94cc:	f000 8085 	beq.w	95da <scope_compute_things+0x266>
        int num_free = 0;
    94d0:	2300      	movs	r3, #0
    94d2:	637b      	str	r3, [r7, #52]	; 0x34
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    94d4:	2300      	movs	r3, #0
    94d6:	633b      	str	r3, [r7, #48]	; 0x30
    94d8:	e041      	b.n	955e <scope_compute_things+0x1ea>
            id_info_t *id = &scope->parent->id_info[i];
    94da:	687b      	ldr	r3, [r7, #4]
    94dc:	685b      	ldr	r3, [r3, #4]
    94de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    94e2:	00db      	lsls	r3, r3, #3
    94e4:	4413      	add	r3, r2
    94e6:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    94e8:	69bb      	ldr	r3, [r7, #24]
    94ea:	781b      	ldrb	r3, [r3, #0]
    94ec:	2b03      	cmp	r3, #3
    94ee:	d003      	beq.n	94f8 <scope_compute_things+0x184>
    94f0:	69bb      	ldr	r3, [r7, #24]
    94f2:	781b      	ldrb	r3, [r3, #0]
    94f4:	2b04      	cmp	r3, #4
    94f6:	d12f      	bne.n	9558 <scope_compute_things+0x1e4>
                for (int j = 0; j < scope->id_info_len; j++) {
    94f8:	2300      	movs	r3, #0
    94fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    94fc:	e026      	b.n	954c <scope_compute_things+0x1d8>
                    id_info_t *id2 = &scope->id_info[j];
    94fe:	687b      	ldr	r3, [r7, #4]
    9500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9504:	00db      	lsls	r3, r3, #3
    9506:	4413      	add	r3, r2
    9508:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    950a:	697b      	ldr	r3, [r7, #20]
    950c:	781b      	ldrb	r3, [r3, #0]
    950e:	2b04      	cmp	r3, #4
    9510:	d119      	bne.n	9546 <scope_compute_things+0x1d2>
    9512:	69bb      	ldr	r3, [r7, #24]
    9514:	685a      	ldr	r2, [r3, #4]
    9516:	697b      	ldr	r3, [r7, #20]
    9518:	685b      	ldr	r3, [r3, #4]
    951a:	429a      	cmp	r2, r3
    951c:	d113      	bne.n	9546 <scope_compute_things+0x1d2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    951e:	697b      	ldr	r3, [r7, #20]
    9520:	785b      	ldrb	r3, [r3, #1]
    9522:	f003 0301 	and.w	r3, r3, #1
    9526:	2b00      	cmp	r3, #0
    9528:	d006      	beq.n	9538 <scope_compute_things+0x1c4>
    952a:	4b2e      	ldr	r3, [pc, #184]	; (95e4 <scope_compute_things+0x270>)
    952c:	4a2e      	ldr	r2, [pc, #184]	; (95e8 <scope_compute_things+0x274>)
    952e:	f640 5109 	movw	r1, #3337	; 0xd09
    9532:	482e      	ldr	r0, [pc, #184]	; (95ec <scope_compute_things+0x278>)
    9534:	f011 ff32 	bl	1b39c <__assert_func>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    9538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    953a:	b29a      	uxth	r2, r3
    953c:	697b      	ldr	r3, [r7, #20]
    953e:	805a      	strh	r2, [r3, #2]
                        num_free += 1;
    9540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9542:	3301      	adds	r3, #1
    9544:	637b      	str	r3, [r7, #52]	; 0x34
                for (int j = 0; j < scope->id_info_len; j++) {
    9546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9548:	3301      	adds	r3, #1
    954a:	62fb      	str	r3, [r7, #44]	; 0x2c
    954c:	687b      	ldr	r3, [r7, #4]
    954e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9550:	461a      	mov	r2, r3
    9552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9554:	429a      	cmp	r2, r3
    9556:	dcd2      	bgt.n	94fe <scope_compute_things+0x18a>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    9558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    955a:	3301      	adds	r3, #1
    955c:	633b      	str	r3, [r7, #48]	; 0x30
    955e:	687b      	ldr	r3, [r7, #4]
    9560:	685b      	ldr	r3, [r3, #4]
    9562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9564:	461a      	mov	r2, r3
    9566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9568:	429a      	cmp	r2, r3
    956a:	dcb6      	bgt.n	94da <scope_compute_things+0x166>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    956c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    956e:	2b00      	cmp	r3, #0
    9570:	dd33      	ble.n	95da <scope_compute_things+0x266>
            for (int i = 0; i < scope->id_info_len; i++) {
    9572:	2300      	movs	r3, #0
    9574:	62bb      	str	r3, [r7, #40]	; 0x28
    9576:	e01a      	b.n	95ae <scope_compute_things+0x23a>
                id_info_t *id = &scope->id_info[i];
    9578:	687b      	ldr	r3, [r7, #4]
    957a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    957e:	00db      	lsls	r3, r3, #3
    9580:	4413      	add	r3, r2
    9582:	613b      	str	r3, [r7, #16]
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    9584:	693b      	ldr	r3, [r7, #16]
    9586:	781b      	ldrb	r3, [r3, #0]
    9588:	2b04      	cmp	r3, #4
    958a:	d105      	bne.n	9598 <scope_compute_things+0x224>
    958c:	693b      	ldr	r3, [r7, #16]
    958e:	785b      	ldrb	r3, [r3, #1]
    9590:	f003 0301 	and.w	r3, r3, #1
    9594:	2b00      	cmp	r3, #0
    9596:	d007      	beq.n	95a8 <scope_compute_things+0x234>
                    id->local_num += num_free;
    9598:	693b      	ldr	r3, [r7, #16]
    959a:	885a      	ldrh	r2, [r3, #2]
    959c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    959e:	b29b      	uxth	r3, r3
    95a0:	4413      	add	r3, r2
    95a2:	b29a      	uxth	r2, r3
    95a4:	693b      	ldr	r3, [r7, #16]
    95a6:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    95a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95aa:	3301      	adds	r3, #1
    95ac:	62bb      	str	r3, [r7, #40]	; 0x28
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    95b2:	461a      	mov	r2, r3
    95b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95b6:	429a      	cmp	r2, r3
    95b8:	dcde      	bgt.n	9578 <scope_compute_things+0x204>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    95ba:	687b      	ldr	r3, [r7, #4]
    95bc:	8b5a      	ldrh	r2, [r3, #26]
    95be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95c0:	b29b      	uxth	r3, r3
    95c2:	4413      	add	r3, r2
    95c4:	b29a      	uxth	r2, r3
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	835a      	strh	r2, [r3, #26]
            scope->num_locals += num_free;
    95ca:	687b      	ldr	r3, [r7, #4]
    95cc:	8c1a      	ldrh	r2, [r3, #32]
    95ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95d0:	b29b      	uxth	r3, r3
    95d2:	4413      	add	r3, r2
    95d4:	b29a      	uxth	r2, r3
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	841a      	strh	r2, [r3, #32]
        }
    }
}
    95da:	bf00      	nop
    95dc:	3748      	adds	r7, #72	; 0x48
    95de:	46bd      	mov	sp, r7
    95e0:	bd80      	pop	{r7, pc}
    95e2:	bf00      	nop
    95e4:	0001ee64 	.word	0x0001ee64
    95e8:	0001f104 	.word	0x0001f104
    95ec:	0001e310 	.word	0x0001e310

000095f0 <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    95f0:	b580      	push	{r7, lr}
    95f2:	b09a      	sub	sp, #104	; 0x68
    95f4:	af00      	add	r7, sp, #0
    95f6:	60f8      	str	r0, [r7, #12]
    95f8:	60b9      	str	r1, [r7, #8]
    95fa:	607a      	str	r2, [r7, #4]
    95fc:	70fb      	strb	r3, [r7, #3]
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    95fe:	f107 0314 	add.w	r3, r7, #20
    9602:	222c      	movs	r2, #44	; 0x2c
    9604:	2100      	movs	r1, #0
    9606:	4618      	mov	r0, r3
    9608:	f012 fc20 	bl	1be4c <memset>
    compiler_t *comp = &comp_state;
    960c:	f107 0314 	add.w	r3, r7, #20
    9610:	653b      	str	r3, [r7, #80]	; 0x50

    comp->source_file = source_file;
    9612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9614:	68ba      	ldr	r2, [r7, #8]
    9616:	601a      	str	r2, [r3, #0]
    comp->is_repl = is_repl;
    9618:	78fa      	ldrb	r2, [r7, #3]
    961a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    961c:	711a      	strb	r2, [r3, #4]
    comp->break_label = INVALID_LABEL;
    961e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9620:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9624:	831a      	strh	r2, [r3, #24]
    comp->continue_label = INVALID_LABEL;
    9626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9628:	f64f 72ff 	movw	r2, #65535	; 0xffff
    962c:	835a      	strh	r2, [r3, #26]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    962e:	68fb      	ldr	r3, [r7, #12]
    9630:	681a      	ldr	r2, [r3, #0]
    9632:	687b      	ldr	r3, [r7, #4]
    9634:	2100      	movs	r1, #0
    9636:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9638:	f7fb fc10 	bl	4e5c <scope_new_and_link>
    963c:	64f8      	str	r0, [r7, #76]	; 0x4c

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    963e:	f000 f955 	bl	98ec <emit_bc_new>
    9642:	64b8      	str	r0, [r7, #72]	; 0x48

    // compile pass 1
    comp->emit = emit_bc;
    9644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9646:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9648:	629a      	str	r2, [r3, #40]	; 0x28
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    964a:	2300      	movs	r3, #0
    964c:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    964e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9650:	6a1b      	ldr	r3, [r3, #32]
    9652:	663b      	str	r3, [r7, #96]	; 0x60
    9654:	e00f      	b.n	9676 <mp_compile_to_raw_code+0x86>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    9656:	2201      	movs	r2, #1
    9658:	6e39      	ldr	r1, [r7, #96]	; 0x60
    965a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    965c:	f7ff fbfe 	bl	8e5c <compile_scope>
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    9660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9662:	691a      	ldr	r2, [r3, #16]
    9664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9666:	429a      	cmp	r2, r3
    9668:	d902      	bls.n	9670 <mp_compile_to_raw_code+0x80>
            max_num_labels = comp->next_label;
    966a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    966c:	691b      	ldr	r3, [r3, #16]
    966e:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9672:	689b      	ldr	r3, [r3, #8]
    9674:	663b      	str	r3, [r7, #96]	; 0x60
    9676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9678:	2b00      	cmp	r3, #0
    967a:	d003      	beq.n	9684 <mp_compile_to_raw_code+0x94>
    967c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    967e:	689b      	ldr	r3, [r3, #8]
    9680:	2b00      	cmp	r3, #0
    9682:	d0e8      	beq.n	9656 <mp_compile_to_raw_code+0x66>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9686:	6a1b      	ldr	r3, [r3, #32]
    9688:	65fb      	str	r3, [r7, #92]	; 0x5c
    968a:	e005      	b.n	9698 <mp_compile_to_raw_code+0xa8>
        scope_compute_things(s);
    968c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    968e:	f7ff fe71 	bl	9374 <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9694:	689b      	ldr	r3, [r3, #8]
    9696:	65fb      	str	r3, [r7, #92]	; 0x5c
    9698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    969a:	2b00      	cmp	r3, #0
    969c:	d003      	beq.n	96a6 <mp_compile_to_raw_code+0xb6>
    969e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96a0:	689b      	ldr	r3, [r3, #8]
    96a2:	2b00      	cmp	r3, #0
    96a4:	d0f2      	beq.n	968c <mp_compile_to_raw_code+0x9c>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    96a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
    96a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    96aa:	f000 f92b 	bl	9904 <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    96ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96b0:	6a1b      	ldr	r3, [r3, #32]
    96b2:	65bb      	str	r3, [r7, #88]	; 0x58
    96b4:	e01d      	b.n	96f2 <mp_compile_to_raw_code+0x102>
                    EMIT_ARG(set_native_type, MP_EMIT_NATIVE_TYPE_ENABLE, s->emit_options == MP_EMIT_OPT_VIPER, 0);
                    break;
#endif // MICROPY_EMIT_NATIVE

                default:
                    comp->emit = emit_bc;
    96b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    96ba:	629a      	str	r2, [r3, #40]	; 0x28
                    #if MICROPY_EMIT_NATIVE
                    comp->emit_method_table = &emit_bc_method_table;
                    #endif
                    break;
    96bc:	bf00      	nop
            }

            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    96be:	2202      	movs	r2, #2
    96c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
    96c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    96c4:	f7ff fbca 	bl	8e5c <compile_scope>

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
    96c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96ca:	689b      	ldr	r3, [r3, #8]
    96cc:	2b00      	cmp	r3, #0
    96ce:	d104      	bne.n	96da <mp_compile_to_raw_code+0xea>
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    96d0:	2203      	movs	r2, #3
    96d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
    96d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
    96d6:	f7ff fbc1 	bl	8e5c <compile_scope>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    96da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96dc:	689b      	ldr	r3, [r3, #8]
    96de:	2b00      	cmp	r3, #0
    96e0:	d104      	bne.n	96ec <mp_compile_to_raw_code+0xfc>
                compile_scope(comp, s, MP_PASS_EMIT);
    96e2:	2204      	movs	r2, #4
    96e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
    96e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    96e8:	f7ff fbb8 	bl	8e5c <compile_scope>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    96ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    96ee:	689b      	ldr	r3, [r3, #8]
    96f0:	65bb      	str	r3, [r7, #88]	; 0x58
    96f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    96f4:	2b00      	cmp	r3, #0
    96f6:	d003      	beq.n	9700 <mp_compile_to_raw_code+0x110>
    96f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96fa:	689b      	ldr	r3, [r3, #8]
    96fc:	2b00      	cmp	r3, #0
    96fe:	d0da      	beq.n	96b6 <mp_compile_to_raw_code+0xc6>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    9700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9702:	689b      	ldr	r3, [r3, #8]
    9704:	2b00      	cmp	r3, #0
    9706:	d011      	beq.n	972c <mp_compile_to_raw_code+0x13c>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    9708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    970c:	68db      	ldr	r3, [r3, #12]
    970e:	4619      	mov	r1, r3
    9710:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9712:	f7fb fb21 	bl	4d58 <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    9716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9718:	6898      	ldr	r0, [r3, #8]
    971a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    971c:	6819      	ldr	r1, [r3, #0]
    971e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9720:	68da      	ldr	r2, [r3, #12]
            comp->compile_error_line, comp->scope_cur->simple_name);
    9722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9726:	8a5b      	ldrh	r3, [r3, #18]
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    9728:	f006 f8a0 	bl	f86c <mp_obj_exception_add_traceback>
    }

    // free the emitters

    emit_bc_free(emit_bc);
    972c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    972e:	f000 f8ff 	bl	9930 <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    9732:	68f8      	ldr	r0, [r7, #12]
    9734:	f7fb f960 	bl	49f8 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    9738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    973a:	695b      	ldr	r3, [r3, #20]
    973c:	647b      	str	r3, [r7, #68]	; 0x44
    for (scope_t *s = module_scope; s;) {
    973e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9740:	657b      	str	r3, [r7, #84]	; 0x54
    9742:	e007      	b.n	9754 <mp_compile_to_raw_code+0x164>
        scope_t *next = s->next;
    9744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9746:	689b      	ldr	r3, [r3, #8]
    9748:	643b      	str	r3, [r7, #64]	; 0x40
        scope_free(s);
    974a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    974c:	f7fb f9c6 	bl	4adc <scope_free>
        s = next;
    9750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9752:	657b      	str	r3, [r7, #84]	; 0x54
    for (scope_t *s = module_scope; s;) {
    9754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9756:	2b00      	cmp	r3, #0
    9758:	d1f4      	bne.n	9744 <mp_compile_to_raw_code+0x154>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    975a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    975c:	689b      	ldr	r3, [r3, #8]
    975e:	2b00      	cmp	r3, #0
    9760:	d004      	beq.n	976c <mp_compile_to_raw_code+0x17c>
        nlr_raise(comp->compile_error);
    9762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9764:	689b      	ldr	r3, [r3, #8]
    9766:	4618      	mov	r0, r3
    9768:	f7f6 fdba 	bl	2e0 <nlr_jump>
    } else {
        return outer_raw_code;
    976c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
    976e:	4618      	mov	r0, r3
    9770:	3768      	adds	r7, #104	; 0x68
    9772:	46bd      	mov	sp, r7
    9774:	bd80      	pop	{r7, pc}
    9776:	bf00      	nop

00009778 <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9778:	b580      	push	{r7, lr}
    977a:	b086      	sub	sp, #24
    977c:	af00      	add	r7, sp, #0
    977e:	60f8      	str	r0, [r7, #12]
    9780:	60b9      	str	r1, [r7, #8]
    9782:	607a      	str	r2, [r7, #4]
    9784:	70fb      	strb	r3, [r7, #3]
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    9786:	78fb      	ldrb	r3, [r7, #3]
    9788:	687a      	ldr	r2, [r7, #4]
    978a:	68b9      	ldr	r1, [r7, #8]
    978c:	68f8      	ldr	r0, [r7, #12]
    978e:	f7ff ff2f 	bl	95f0 <mp_compile_to_raw_code>
    9792:	6178      	str	r0, [r7, #20]
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    9794:	2200      	movs	r2, #0
    9796:	2100      	movs	r1, #0
    9798:	6978      	ldr	r0, [r7, #20]
    979a:	f001 fd2d 	bl	b1f8 <mp_make_function_from_raw_code>
    979e:	4603      	mov	r3, r0
}
    97a0:	4618      	mov	r0, r3
    97a2:	3718      	adds	r7, #24
    97a4:	46bd      	mov	sp, r7
    97a6:	bd80      	pop	{r7, pc}

000097a8 <mp_emit_common_get_id_for_load>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    97a8:	b580      	push	{r7, lr}
    97aa:	b084      	sub	sp, #16
    97ac:	af00      	add	r7, sp, #0
    97ae:	6078      	str	r0, [r7, #4]
    97b0:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    97b2:	f107 030b 	add.w	r3, r7, #11
    97b6:	461a      	mov	r2, r3
    97b8:	6839      	ldr	r1, [r7, #0]
    97ba:	6878      	ldr	r0, [r7, #4]
    97bc:	f7fb f99e 	bl	4afc <scope_find_or_add_id>
    97c0:	60f8      	str	r0, [r7, #12]
    if (added) {
    97c2:	7afb      	ldrb	r3, [r7, #11]
    97c4:	2b00      	cmp	r3, #0
    97c6:	d004      	beq.n	97d2 <mp_emit_common_get_id_for_load+0x2a>
        scope_find_local_and_close_over(scope, id, qst);
    97c8:	683a      	ldr	r2, [r7, #0]
    97ca:	68f9      	ldr	r1, [r7, #12]
    97cc:	6878      	ldr	r0, [r7, #4]
    97ce:	f7fb fa71 	bl	4cb4 <scope_find_local_and_close_over>
    }
}
    97d2:	bf00      	nop
    97d4:	3710      	adds	r7, #16
    97d6:	46bd      	mov	sp, r7
    97d8:	bd80      	pop	{r7, pc}
    97da:	bf00      	nop

000097dc <mp_emit_common_get_id_for_modification>:

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    97dc:	b580      	push	{r7, lr}
    97de:	b084      	sub	sp, #16
    97e0:	af00      	add	r7, sp, #0
    97e2:	6078      	str	r0, [r7, #4]
    97e4:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    97e6:	f107 030b 	add.w	r3, r7, #11
    97ea:	461a      	mov	r2, r3
    97ec:	6839      	ldr	r1, [r7, #0]
    97ee:	6878      	ldr	r0, [r7, #4]
    97f0:	f7fb f984 	bl	4afc <scope_find_or_add_id>
    97f4:	60f8      	str	r0, [r7, #12]
    if (added) {
    97f6:	7afb      	ldrb	r3, [r7, #11]
    97f8:	2b00      	cmp	r3, #0
    97fa:	d00b      	beq.n	9814 <mp_emit_common_get_id_for_modification+0x38>
        if (SCOPE_IS_FUNC_LIKE(scope->kind)) {
    97fc:	687b      	ldr	r3, [r7, #4]
    97fe:	681b      	ldr	r3, [r3, #0]
    9800:	2b01      	cmp	r3, #1
    9802:	d903      	bls.n	980c <mp_emit_common_get_id_for_modification+0x30>
            id->kind = ID_INFO_KIND_LOCAL;
    9804:	68fb      	ldr	r3, [r7, #12]
    9806:	2202      	movs	r2, #2
    9808:	701a      	strb	r2, [r3, #0]
        }
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    }
}
    980a:	e00e      	b.n	982a <mp_emit_common_get_id_for_modification+0x4e>
            id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    980c:	68fb      	ldr	r3, [r7, #12]
    980e:	2200      	movs	r2, #0
    9810:	701a      	strb	r2, [r3, #0]
}
    9812:	e00a      	b.n	982a <mp_emit_common_get_id_for_modification+0x4e>
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9814:	687b      	ldr	r3, [r7, #4]
    9816:	681b      	ldr	r3, [r3, #0]
    9818:	2b01      	cmp	r3, #1
    981a:	d906      	bls.n	982a <mp_emit_common_get_id_for_modification+0x4e>
    981c:	68fb      	ldr	r3, [r7, #12]
    981e:	781b      	ldrb	r3, [r3, #0]
    9820:	2b00      	cmp	r3, #0
    9822:	d102      	bne.n	982a <mp_emit_common_get_id_for_modification+0x4e>
        id->kind = ID_INFO_KIND_LOCAL;
    9824:	68fb      	ldr	r3, [r7, #12]
    9826:	2202      	movs	r2, #2
    9828:	701a      	strb	r2, [r3, #0]
}
    982a:	bf00      	nop
    982c:	3710      	adds	r7, #16
    982e:	46bd      	mov	sp, r7
    9830:	bd80      	pop	{r7, pc}
    9832:	bf00      	nop

00009834 <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    9834:	b590      	push	{r4, r7, lr}
    9836:	b087      	sub	sp, #28
    9838:	af00      	add	r7, sp, #0
    983a:	60f8      	str	r0, [r7, #12]
    983c:	60b9      	str	r1, [r7, #8]
    983e:	607a      	str	r2, [r7, #4]
    9840:	603b      	str	r3, [r7, #0]
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    9842:	6839      	ldr	r1, [r7, #0]
    9844:	6878      	ldr	r0, [r7, #4]
    9846:	f7fb f9a5 	bl	4b94 <scope_find>
    984a:	6178      	str	r0, [r7, #20]
    assert(id != NULL);
    984c:	697b      	ldr	r3, [r7, #20]
    984e:	2b00      	cmp	r3, #0
    9850:	d105      	bne.n	985e <mp_emit_common_id_op+0x2a>
    9852:	4b22      	ldr	r3, [pc, #136]	; (98dc <mp_emit_common_id_op+0xa8>)
    9854:	4a22      	ldr	r2, [pc, #136]	; (98e0 <mp_emit_common_id_op+0xac>)
    9856:	213e      	movs	r1, #62	; 0x3e
    9858:	4822      	ldr	r0, [pc, #136]	; (98e4 <mp_emit_common_id_op+0xb0>)
    985a:	f011 fd9f 	bl	1b39c <__assert_func>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    985e:	697b      	ldr	r3, [r7, #20]
    9860:	781b      	ldrb	r3, [r3, #0]
    9862:	2b00      	cmp	r3, #0
    9864:	d106      	bne.n	9874 <mp_emit_common_id_op+0x40>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_NAME);
    9866:	68bb      	ldr	r3, [r7, #8]
    9868:	685b      	ldr	r3, [r3, #4]
    986a:	2200      	movs	r2, #0
    986c:	6839      	ldr	r1, [r7, #0]
    986e:	68f8      	ldr	r0, [r7, #12]
    9870:	4798      	blx	r3
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    }
}
    9872:	e02f      	b.n	98d4 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    9874:	697b      	ldr	r3, [r7, #20]
    9876:	781b      	ldrb	r3, [r3, #0]
    9878:	2b01      	cmp	r3, #1
    987a:	d106      	bne.n	988a <mp_emit_common_id_op+0x56>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_GLOBAL);
    987c:	68bb      	ldr	r3, [r7, #8]
    987e:	685b      	ldr	r3, [r3, #4]
    9880:	2201      	movs	r2, #1
    9882:	6839      	ldr	r1, [r7, #0]
    9884:	68f8      	ldr	r0, [r7, #12]
    9886:	4798      	blx	r3
}
    9888:	e024      	b.n	98d4 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    988a:	697b      	ldr	r3, [r7, #20]
    988c:	781b      	ldrb	r3, [r3, #0]
    988e:	2b02      	cmp	r3, #2
    9890:	d109      	bne.n	98a6 <mp_emit_common_id_op+0x72>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    9892:	68bb      	ldr	r3, [r7, #8]
    9894:	681c      	ldr	r4, [r3, #0]
    9896:	697b      	ldr	r3, [r7, #20]
    9898:	885b      	ldrh	r3, [r3, #2]
    989a:	461a      	mov	r2, r3
    989c:	2300      	movs	r3, #0
    989e:	6839      	ldr	r1, [r7, #0]
    98a0:	68f8      	ldr	r0, [r7, #12]
    98a2:	47a0      	blx	r4
}
    98a4:	e016      	b.n	98d4 <mp_emit_common_id_op+0xa0>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    98a6:	697b      	ldr	r3, [r7, #20]
    98a8:	781b      	ldrb	r3, [r3, #0]
    98aa:	2b03      	cmp	r3, #3
    98ac:	d009      	beq.n	98c2 <mp_emit_common_id_op+0x8e>
    98ae:	697b      	ldr	r3, [r7, #20]
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	2b04      	cmp	r3, #4
    98b4:	d005      	beq.n	98c2 <mp_emit_common_id_op+0x8e>
    98b6:	4b0c      	ldr	r3, [pc, #48]	; (98e8 <mp_emit_common_id_op+0xb4>)
    98b8:	4a09      	ldr	r2, [pc, #36]	; (98e0 <mp_emit_common_id_op+0xac>)
    98ba:	2148      	movs	r1, #72	; 0x48
    98bc:	4809      	ldr	r0, [pc, #36]	; (98e4 <mp_emit_common_id_op+0xb0>)
    98be:	f011 fd6d 	bl	1b39c <__assert_func>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    98c2:	68bb      	ldr	r3, [r7, #8]
    98c4:	681c      	ldr	r4, [r3, #0]
    98c6:	697b      	ldr	r3, [r7, #20]
    98c8:	885b      	ldrh	r3, [r3, #2]
    98ca:	461a      	mov	r2, r3
    98cc:	2301      	movs	r3, #1
    98ce:	6839      	ldr	r1, [r7, #0]
    98d0:	68f8      	ldr	r0, [r7, #12]
    98d2:	47a0      	blx	r4
}
    98d4:	bf00      	nop
    98d6:	371c      	adds	r7, #28
    98d8:	46bd      	mov	sp, r7
    98da:	bd90      	pop	{r4, r7, pc}
    98dc:	0001f11c 	.word	0x0001f11c
    98e0:	0001f180 	.word	0x0001f180
    98e4:	0001f128 	.word	0x0001f128
    98e8:	0001f140 	.word	0x0001f140

000098ec <emit_bc_new>:
    uint16_t ct_cur_raw_code;
    #endif
    mp_uint_t *const_table;
};

emit_t *emit_bc_new(void) {
    98ec:	b580      	push	{r7, lr}
    98ee:	b082      	sub	sp, #8
    98f0:	af00      	add	r7, sp, #0
    emit_t *emit = m_new0(emit_t, 1);
    98f2:	2040      	movs	r0, #64	; 0x40
    98f4:	f7f6 fd38 	bl	368 <m_malloc0>
    98f8:	6078      	str	r0, [r7, #4]
    return emit;
    98fa:	687b      	ldr	r3, [r7, #4]
}
    98fc:	4618      	mov	r0, r3
    98fe:	3708      	adds	r7, #8
    9900:	46bd      	mov	sp, r7
    9902:	bd80      	pop	{r7, pc}

00009904 <emit_bc_set_max_num_labels>:

void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    9904:	b580      	push	{r7, lr}
    9906:	b082      	sub	sp, #8
    9908:	af00      	add	r7, sp, #0
    990a:	6078      	str	r0, [r7, #4]
    990c:	6039      	str	r1, [r7, #0]
    emit->max_num_labels = max_num_labels;
    990e:	687b      	ldr	r3, [r7, #4]
    9910:	683a      	ldr	r2, [r7, #0]
    9912:	619a      	str	r2, [r3, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    9914:	687b      	ldr	r3, [r7, #4]
    9916:	699b      	ldr	r3, [r3, #24]
    9918:	009b      	lsls	r3, r3, #2
    991a:	4618      	mov	r0, r3
    991c:	f7f6 fcfe 	bl	31c <m_malloc>
    9920:	4602      	mov	r2, r0
    9922:	687b      	ldr	r3, [r7, #4]
    9924:	61da      	str	r2, [r3, #28]
}
    9926:	bf00      	nop
    9928:	3708      	adds	r7, #8
    992a:	46bd      	mov	sp, r7
    992c:	bd80      	pop	{r7, pc}
    992e:	bf00      	nop

00009930 <emit_bc_free>:

void emit_bc_free(emit_t *emit) {
    9930:	b580      	push	{r7, lr}
    9932:	b082      	sub	sp, #8
    9934:	af00      	add	r7, sp, #0
    9936:	6078      	str	r0, [r7, #4]
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    9938:	687b      	ldr	r3, [r7, #4]
    993a:	69db      	ldr	r3, [r3, #28]
    993c:	4618      	mov	r0, r3
    993e:	f7f6 fd4f 	bl	3e0 <m_free>
    m_del_obj(emit_t, emit);
    9942:	6878      	ldr	r0, [r7, #4]
    9944:	f7f6 fd4c 	bl	3e0 <m_free>
}
    9948:	bf00      	nop
    994a:	3708      	adds	r7, #8
    994c:	46bd      	mov	sp, r7
    994e:	bd80      	pop	{r7, pc}

00009950 <emit_write_uint>:

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    9950:	b580      	push	{r7, lr}
    9952:	b088      	sub	sp, #32
    9954:	af00      	add	r7, sp, #0
    9956:	60f8      	str	r0, [r7, #12]
    9958:	60b9      	str	r1, [r7, #8]
    995a:	607a      	str	r2, [r7, #4]
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    995c:	f107 0310 	add.w	r3, r7, #16
    9960:	3305      	adds	r3, #5
    9962:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    9964:	69fb      	ldr	r3, [r7, #28]
    9966:	3b01      	subs	r3, #1
    9968:	61fb      	str	r3, [r7, #28]
    996a:	687b      	ldr	r3, [r7, #4]
    996c:	b2db      	uxtb	r3, r3
    996e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9972:	b2da      	uxtb	r2, r3
    9974:	69fb      	ldr	r3, [r7, #28]
    9976:	701a      	strb	r2, [r3, #0]
        val >>= 7;
    9978:	687b      	ldr	r3, [r7, #4]
    997a:	09db      	lsrs	r3, r3, #7
    997c:	607b      	str	r3, [r7, #4]
    } while (val != 0);
    997e:	687b      	ldr	r3, [r7, #4]
    9980:	2b00      	cmp	r3, #0
    9982:	d1ef      	bne.n	9964 <emit_write_uint+0x14>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    9984:	f107 0310 	add.w	r3, r7, #16
    9988:	3305      	adds	r3, #5
    998a:	461a      	mov	r2, r3
    998c:	69fb      	ldr	r3, [r7, #28]
    998e:	1ad2      	subs	r2, r2, r3
    9990:	68bb      	ldr	r3, [r7, #8]
    9992:	4611      	mov	r1, r2
    9994:	68f8      	ldr	r0, [r7, #12]
    9996:	4798      	blx	r3
    9998:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    999a:	e00a      	b.n	99b2 <emit_write_uint+0x62>
        *c++ = *p++ | 0x80;
    999c:	69bb      	ldr	r3, [r7, #24]
    999e:	1c5a      	adds	r2, r3, #1
    99a0:	61ba      	str	r2, [r7, #24]
    99a2:	69fa      	ldr	r2, [r7, #28]
    99a4:	1c51      	adds	r1, r2, #1
    99a6:	61f9      	str	r1, [r7, #28]
    99a8:	7812      	ldrb	r2, [r2, #0]
    99aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
    99ae:	b2d2      	uxtb	r2, r2
    99b0:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    99b2:	f107 0310 	add.w	r3, r7, #16
    99b6:	3304      	adds	r3, #4
    99b8:	69fa      	ldr	r2, [r7, #28]
    99ba:	4293      	cmp	r3, r2
    99bc:	d1ee      	bne.n	999c <emit_write_uint+0x4c>
    }
    *c = *p;
    99be:	69fb      	ldr	r3, [r7, #28]
    99c0:	781a      	ldrb	r2, [r3, #0]
    99c2:	69bb      	ldr	r3, [r7, #24]
    99c4:	701a      	strb	r2, [r3, #0]
}
    99c6:	bf00      	nop
    99c8:	3720      	adds	r7, #32
    99ca:	46bd      	mov	sp, r7
    99cc:	bd80      	pop	{r7, pc}
    99ce:	bf00      	nop

000099d0 <emit_get_cur_to_write_code_info>:

// all functions must go through this one to emit code info
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    99d0:	b580      	push	{r7, lr}
    99d2:	b084      	sub	sp, #16
    99d4:	af00      	add	r7, sp, #0
    99d6:	6078      	str	r0, [r7, #4]
    99d8:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    99da:	687b      	ldr	r3, [r7, #4]
    99dc:	795b      	ldrb	r3, [r3, #5]
    99de:	2b03      	cmp	r3, #3
    99e0:	d807      	bhi.n	99f2 <emit_get_cur_to_write_code_info+0x22>
        emit->code_info_offset += num_bytes_to_write;
    99e2:	687b      	ldr	r3, [r7, #4]
    99e4:	6a1a      	ldr	r2, [r3, #32]
    99e6:	683b      	ldr	r3, [r7, #0]
    99e8:	441a      	add	r2, r3
    99ea:	687b      	ldr	r3, [r7, #4]
    99ec:	621a      	str	r2, [r3, #32]
        return emit->dummy_data;
    99ee:	687b      	ldr	r3, [r7, #4]
    99f0:	e01a      	b.n	9a28 <emit_get_cur_to_write_code_info+0x58>
    } else {
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    99f2:	687b      	ldr	r3, [r7, #4]
    99f4:	6a1a      	ldr	r2, [r3, #32]
    99f6:	683b      	ldr	r3, [r7, #0]
    99f8:	441a      	add	r2, r3
    99fa:	687b      	ldr	r3, [r7, #4]
    99fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    99fe:	429a      	cmp	r2, r3
    9a00:	d905      	bls.n	9a0e <emit_get_cur_to_write_code_info+0x3e>
    9a02:	4b0b      	ldr	r3, [pc, #44]	; (9a30 <emit_get_cur_to_write_code_info+0x60>)
    9a04:	4a0b      	ldr	r2, [pc, #44]	; (9a34 <emit_get_cur_to_write_code_info+0x64>)
    9a06:	2173      	movs	r1, #115	; 0x73
    9a08:	480b      	ldr	r0, [pc, #44]	; (9a38 <emit_get_cur_to_write_code_info+0x68>)
    9a0a:	f011 fcc7 	bl	1b39c <__assert_func>
        byte *c = emit->code_base + emit->code_info_offset;
    9a0e:	687b      	ldr	r3, [r7, #4]
    9a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9a12:	687b      	ldr	r3, [r7, #4]
    9a14:	6a1b      	ldr	r3, [r3, #32]
    9a16:	4413      	add	r3, r2
    9a18:	60fb      	str	r3, [r7, #12]
        emit->code_info_offset += num_bytes_to_write;
    9a1a:	687b      	ldr	r3, [r7, #4]
    9a1c:	6a1a      	ldr	r2, [r3, #32]
    9a1e:	683b      	ldr	r3, [r7, #0]
    9a20:	441a      	add	r2, r3
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	621a      	str	r2, [r3, #32]
        return c;
    9a26:	68fb      	ldr	r3, [r7, #12]
    }
}
    9a28:	4618      	mov	r0, r3
    9a2a:	3710      	adds	r7, #16
    9a2c:	46bd      	mov	sp, r7
    9a2e:	bd80      	pop	{r7, pc}
    9a30:	0001f198 	.word	0x0001f198
    9a34:	0001f3b4 	.word	0x0001f3b4
    9a38:	0001f1dc 	.word	0x0001f1dc

00009a3c <emit_write_code_info_byte>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    9a3c:	b580      	push	{r7, lr}
    9a3e:	b082      	sub	sp, #8
    9a40:	af00      	add	r7, sp, #0
    9a42:	6078      	str	r0, [r7, #4]
    9a44:	460b      	mov	r3, r1
    9a46:	70fb      	strb	r3, [r7, #3]
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    9a48:	2101      	movs	r1, #1
    9a4a:	6878      	ldr	r0, [r7, #4]
    9a4c:	f7ff ffc0 	bl	99d0 <emit_get_cur_to_write_code_info>
    9a50:	4602      	mov	r2, r0
    9a52:	78fb      	ldrb	r3, [r7, #3]
    9a54:	7013      	strb	r3, [r2, #0]
}
    9a56:	bf00      	nop
    9a58:	3708      	adds	r7, #8
    9a5a:	46bd      	mov	sp, r7
    9a5c:	bd80      	pop	{r7, pc}
    9a5e:	bf00      	nop

00009a60 <emit_write_code_info_uint>:

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    9a60:	b580      	push	{r7, lr}
    9a62:	b082      	sub	sp, #8
    9a64:	af00      	add	r7, sp, #0
    9a66:	6078      	str	r0, [r7, #4]
    9a68:	6039      	str	r1, [r7, #0]
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    9a6a:	683a      	ldr	r2, [r7, #0]
    9a6c:	4903      	ldr	r1, [pc, #12]	; (9a7c <emit_write_code_info_uint+0x1c>)
    9a6e:	6878      	ldr	r0, [r7, #4]
    9a70:	f7ff ff6e 	bl	9950 <emit_write_uint>
}
    9a74:	bf00      	nop
    9a76:	3708      	adds	r7, #8
    9a78:	46bd      	mov	sp, r7
    9a7a:	bd80      	pop	{r7, pc}
    9a7c:	000099d1 	.word	0x000099d1

00009a80 <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    9a80:	b580      	push	{r7, lr}
    9a82:	b084      	sub	sp, #16
    9a84:	af00      	add	r7, sp, #0
    9a86:	6078      	str	r0, [r7, #4]
    9a88:	6039      	str	r1, [r7, #0]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9a8a:	683b      	ldr	r3, [r7, #0]
    9a8c:	0c1b      	lsrs	r3, r3, #16
    9a8e:	2b00      	cmp	r3, #0
    9a90:	d005      	beq.n	9a9e <emit_write_code_info_qstr+0x1e>
    9a92:	4b0c      	ldr	r3, [pc, #48]	; (9ac4 <emit_write_code_info_qstr+0x44>)
    9a94:	4a0c      	ldr	r2, [pc, #48]	; (9ac8 <emit_write_code_info_qstr+0x48>)
    9a96:	2184      	movs	r1, #132	; 0x84
    9a98:	480c      	ldr	r0, [pc, #48]	; (9acc <emit_write_code_info_qstr+0x4c>)
    9a9a:	f011 fc7f 	bl	1b39c <__assert_func>
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    9a9e:	2102      	movs	r1, #2
    9aa0:	6878      	ldr	r0, [r7, #4]
    9aa2:	f7ff ff95 	bl	99d0 <emit_get_cur_to_write_code_info>
    9aa6:	60f8      	str	r0, [r7, #12]
    c[0] = qst;
    9aa8:	683b      	ldr	r3, [r7, #0]
    9aaa:	b2da      	uxtb	r2, r3
    9aac:	68fb      	ldr	r3, [r7, #12]
    9aae:	701a      	strb	r2, [r3, #0]
    c[1] = qst >> 8;
    9ab0:	68fb      	ldr	r3, [r7, #12]
    9ab2:	3301      	adds	r3, #1
    9ab4:	683a      	ldr	r2, [r7, #0]
    9ab6:	0a12      	lsrs	r2, r2, #8
    9ab8:	b2d2      	uxtb	r2, r2
    9aba:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    #endif
}
    9abc:	bf00      	nop
    9abe:	3710      	adds	r7, #16
    9ac0:	46bd      	mov	sp, r7
    9ac2:	bd80      	pop	{r7, pc}
    9ac4:	0001f1f0 	.word	0x0001f1f0
    9ac8:	0001f3d4 	.word	0x0001f3d4
    9acc:	0001f1dc 	.word	0x0001f1dc

00009ad0 <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    9ad0:	b580      	push	{r7, lr}
    9ad2:	b084      	sub	sp, #16
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	6078      	str	r0, [r7, #4]
    9ad8:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9ada:	687b      	ldr	r3, [r7, #4]
    9adc:	795b      	ldrb	r3, [r3, #5]
    9ade:	2b03      	cmp	r3, #3
    9ae0:	d807      	bhi.n	9af2 <emit_get_cur_to_write_bytecode+0x22>
        emit->bytecode_offset += num_bytes_to_write;
    9ae2:	687b      	ldr	r3, [r7, #4]
    9ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9ae6:	683b      	ldr	r3, [r7, #0]
    9ae8:	441a      	add	r2, r3
    9aea:	687b      	ldr	r3, [r7, #4]
    9aec:	629a      	str	r2, [r3, #40]	; 0x28
        return emit->dummy_data;
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	e01d      	b.n	9b2e <emit_get_cur_to_write_bytecode+0x5e>
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    9af2:	687b      	ldr	r3, [r7, #4]
    9af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9af6:	683b      	ldr	r3, [r7, #0]
    9af8:	441a      	add	r2, r3
    9afa:	687b      	ldr	r3, [r7, #4]
    9afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9afe:	429a      	cmp	r2, r3
    9b00:	d905      	bls.n	9b0e <emit_get_cur_to_write_bytecode+0x3e>
    9b02:	4b0d      	ldr	r3, [pc, #52]	; (9b38 <emit_get_cur_to_write_bytecode+0x68>)
    9b04:	4a0d      	ldr	r2, [pc, #52]	; (9b3c <emit_get_cur_to_write_bytecode+0x6c>)
    9b06:	21b2      	movs	r1, #178	; 0xb2
    9b08:	480d      	ldr	r0, [pc, #52]	; (9b40 <emit_get_cur_to_write_bytecode+0x70>)
    9b0a:	f011 fc47 	bl	1b39c <__assert_func>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    9b0e:	687b      	ldr	r3, [r7, #4]
    9b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9b12:	687b      	ldr	r3, [r7, #4]
    9b14:	6a59      	ldr	r1, [r3, #36]	; 0x24
    9b16:	687b      	ldr	r3, [r7, #4]
    9b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9b1a:	440b      	add	r3, r1
    9b1c:	4413      	add	r3, r2
    9b1e:	60fb      	str	r3, [r7, #12]
        emit->bytecode_offset += num_bytes_to_write;
    9b20:	687b      	ldr	r3, [r7, #4]
    9b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9b24:	683b      	ldr	r3, [r7, #0]
    9b26:	441a      	add	r2, r3
    9b28:	687b      	ldr	r3, [r7, #4]
    9b2a:	629a      	str	r2, [r3, #40]	; 0x28
        return c;
    9b2c:	68fb      	ldr	r3, [r7, #12]
    }
}
    9b2e:	4618      	mov	r0, r3
    9b30:	3710      	adds	r7, #16
    9b32:	46bd      	mov	sp, r7
    9b34:	bd80      	pop	{r7, pc}
    9b36:	bf00      	nop
    9b38:	0001f204 	.word	0x0001f204
    9b3c:	0001f3f0 	.word	0x0001f3f0
    9b40:	0001f1dc 	.word	0x0001f1dc

00009b44 <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    9b44:	b580      	push	{r7, lr}
    9b46:	b084      	sub	sp, #16
    9b48:	af00      	add	r7, sp, #0
    9b4a:	6078      	str	r0, [r7, #4]
    9b4c:	460b      	mov	r3, r1
    9b4e:	70fb      	strb	r3, [r7, #3]
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    9b50:	2101      	movs	r1, #1
    9b52:	6878      	ldr	r0, [r7, #4]
    9b54:	f7ff ffbc 	bl	9ad0 <emit_get_cur_to_write_bytecode>
    9b58:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9b5a:	68fb      	ldr	r3, [r7, #12]
    9b5c:	78fa      	ldrb	r2, [r7, #3]
    9b5e:	701a      	strb	r2, [r3, #0]
}
    9b60:	bf00      	nop
    9b62:	3710      	adds	r7, #16
    9b64:	46bd      	mov	sp, r7
    9b66:	bd80      	pop	{r7, pc}

00009b68 <emit_write_bytecode_byte_byte>:

STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    9b68:	b580      	push	{r7, lr}
    9b6a:	b084      	sub	sp, #16
    9b6c:	af00      	add	r7, sp, #0
    9b6e:	6078      	str	r0, [r7, #4]
    9b70:	460b      	mov	r3, r1
    9b72:	70fb      	strb	r3, [r7, #3]
    9b74:	4613      	mov	r3, r2
    9b76:	70bb      	strb	r3, [r7, #2]
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    9b78:	2102      	movs	r1, #2
    9b7a:	6878      	ldr	r0, [r7, #4]
    9b7c:	f7ff ffa8 	bl	9ad0 <emit_get_cur_to_write_bytecode>
    9b80:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9b82:	68fb      	ldr	r3, [r7, #12]
    9b84:	78fa      	ldrb	r2, [r7, #3]
    9b86:	701a      	strb	r2, [r3, #0]
    c[1] = b2;
    9b88:	68fb      	ldr	r3, [r7, #12]
    9b8a:	3301      	adds	r3, #1
    9b8c:	78ba      	ldrb	r2, [r7, #2]
    9b8e:	701a      	strb	r2, [r3, #0]
}
    9b90:	bf00      	nop
    9b92:	3710      	adds	r7, #16
    9b94:	46bd      	mov	sp, r7
    9b96:	bd80      	pop	{r7, pc}

00009b98 <emit_write_bytecode_byte_int>:

// Similar to emit_write_bytecode_uint(), just some extra handling to encode sign
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    9b98:	b580      	push	{r7, lr}
    9b9a:	b088      	sub	sp, #32
    9b9c:	af00      	add	r7, sp, #0
    9b9e:	60f8      	str	r0, [r7, #12]
    9ba0:	460b      	mov	r3, r1
    9ba2:	607a      	str	r2, [r7, #4]
    9ba4:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b1);
    9ba6:	7afb      	ldrb	r3, [r7, #11]
    9ba8:	4619      	mov	r1, r3
    9baa:	68f8      	ldr	r0, [r7, #12]
    9bac:	f7ff ffca 	bl	9b44 <emit_write_bytecode_byte>

    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9bb0:	f107 0310 	add.w	r3, r7, #16
    9bb4:	3305      	adds	r3, #5
    9bb6:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = num & 0x7f;
    9bb8:	69fb      	ldr	r3, [r7, #28]
    9bba:	3b01      	subs	r3, #1
    9bbc:	61fb      	str	r3, [r7, #28]
    9bbe:	687b      	ldr	r3, [r7, #4]
    9bc0:	b2db      	uxtb	r3, r3
    9bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9bc6:	b2da      	uxtb	r2, r3
    9bc8:	69fb      	ldr	r3, [r7, #28]
    9bca:	701a      	strb	r2, [r3, #0]
        num >>= 7;
    9bcc:	687b      	ldr	r3, [r7, #4]
    9bce:	11db      	asrs	r3, r3, #7
    9bd0:	607b      	str	r3, [r7, #4]
    } while (num != 0 && num != -1);
    9bd2:	687b      	ldr	r3, [r7, #4]
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	d003      	beq.n	9be0 <emit_write_bytecode_byte_int+0x48>
    9bd8:	687b      	ldr	r3, [r7, #4]
    9bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9bde:	d1eb      	bne.n	9bb8 <emit_write_bytecode_byte_int+0x20>
    // Make sure that highest bit we stored (mask 0x40) matches sign
    // of the number. If not, store extra byte just to encode sign
    if (num == -1 && (*p & 0x40) == 0) {
    9be0:	687b      	ldr	r3, [r7, #4]
    9be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9be6:	d10c      	bne.n	9c02 <emit_write_bytecode_byte_int+0x6a>
    9be8:	69fb      	ldr	r3, [r7, #28]
    9bea:	781b      	ldrb	r3, [r3, #0]
    9bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	d106      	bne.n	9c02 <emit_write_bytecode_byte_int+0x6a>
        *--p = 0x7f;
    9bf4:	69fb      	ldr	r3, [r7, #28]
    9bf6:	3b01      	subs	r3, #1
    9bf8:	61fb      	str	r3, [r7, #28]
    9bfa:	69fb      	ldr	r3, [r7, #28]
    9bfc:	227f      	movs	r2, #127	; 0x7f
    9bfe:	701a      	strb	r2, [r3, #0]
    9c00:	e00e      	b.n	9c20 <emit_write_bytecode_byte_int+0x88>
    } else if (num == 0 && (*p & 0x40) != 0) {
    9c02:	687b      	ldr	r3, [r7, #4]
    9c04:	2b00      	cmp	r3, #0
    9c06:	d10b      	bne.n	9c20 <emit_write_bytecode_byte_int+0x88>
    9c08:	69fb      	ldr	r3, [r7, #28]
    9c0a:	781b      	ldrb	r3, [r3, #0]
    9c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c10:	2b00      	cmp	r3, #0
    9c12:	d005      	beq.n	9c20 <emit_write_bytecode_byte_int+0x88>
        *--p = 0;
    9c14:	69fb      	ldr	r3, [r7, #28]
    9c16:	3b01      	subs	r3, #1
    9c18:	61fb      	str	r3, [r7, #28]
    9c1a:	69fb      	ldr	r3, [r7, #28]
    9c1c:	2200      	movs	r2, #0
    9c1e:	701a      	strb	r2, [r3, #0]
    }

    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    9c20:	f107 0310 	add.w	r3, r7, #16
    9c24:	3305      	adds	r3, #5
    9c26:	461a      	mov	r2, r3
    9c28:	69fb      	ldr	r3, [r7, #28]
    9c2a:	1ad3      	subs	r3, r2, r3
    9c2c:	4619      	mov	r1, r3
    9c2e:	68f8      	ldr	r0, [r7, #12]
    9c30:	f7ff ff4e 	bl	9ad0 <emit_get_cur_to_write_bytecode>
    9c34:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9c36:	e00a      	b.n	9c4e <emit_write_bytecode_byte_int+0xb6>
        *c++ = *p++ | 0x80;
    9c38:	69bb      	ldr	r3, [r7, #24]
    9c3a:	1c5a      	adds	r2, r3, #1
    9c3c:	61ba      	str	r2, [r7, #24]
    9c3e:	69fa      	ldr	r2, [r7, #28]
    9c40:	1c51      	adds	r1, r2, #1
    9c42:	61f9      	str	r1, [r7, #28]
    9c44:	7812      	ldrb	r2, [r2, #0]
    9c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9c4a:	b2d2      	uxtb	r2, r2
    9c4c:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9c4e:	f107 0310 	add.w	r3, r7, #16
    9c52:	3304      	adds	r3, #4
    9c54:	69fa      	ldr	r2, [r7, #28]
    9c56:	4293      	cmp	r3, r2
    9c58:	d1ee      	bne.n	9c38 <emit_write_bytecode_byte_int+0xa0>
    }
    *c = *p;
    9c5a:	69fb      	ldr	r3, [r7, #28]
    9c5c:	781a      	ldrb	r2, [r3, #0]
    9c5e:	69bb      	ldr	r3, [r7, #24]
    9c60:	701a      	strb	r2, [r3, #0]
}
    9c62:	bf00      	nop
    9c64:	3720      	adds	r7, #32
    9c66:	46bd      	mov	sp, r7
    9c68:	bd80      	pop	{r7, pc}
    9c6a:	bf00      	nop

00009c6c <emit_write_bytecode_byte_uint>:

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    9c6c:	b580      	push	{r7, lr}
    9c6e:	b084      	sub	sp, #16
    9c70:	af00      	add	r7, sp, #0
    9c72:	60f8      	str	r0, [r7, #12]
    9c74:	460b      	mov	r3, r1
    9c76:	607a      	str	r2, [r7, #4]
    9c78:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b);
    9c7a:	7afb      	ldrb	r3, [r7, #11]
    9c7c:	4619      	mov	r1, r3
    9c7e:	68f8      	ldr	r0, [r7, #12]
    9c80:	f7ff ff60 	bl	9b44 <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    9c84:	687a      	ldr	r2, [r7, #4]
    9c86:	4904      	ldr	r1, [pc, #16]	; (9c98 <emit_write_bytecode_byte_uint+0x2c>)
    9c88:	68f8      	ldr	r0, [r7, #12]
    9c8a:	f7ff fe61 	bl	9950 <emit_write_uint>
}
    9c8e:	bf00      	nop
    9c90:	3710      	adds	r7, #16
    9c92:	46bd      	mov	sp, r7
    9c94:	bd80      	pop	{r7, pc}
    9c96:	bf00      	nop
    9c98:	00009ad1 	.word	0x00009ad1

00009c9c <emit_write_bytecode_byte_const>:

#if MICROPY_PERSISTENT_CODE
STATIC void emit_write_bytecode_byte_const(emit_t *emit, byte b, mp_uint_t n, mp_uint_t c) {
    9c9c:	b580      	push	{r7, lr}
    9c9e:	b084      	sub	sp, #16
    9ca0:	af00      	add	r7, sp, #0
    9ca2:	60f8      	str	r0, [r7, #12]
    9ca4:	607a      	str	r2, [r7, #4]
    9ca6:	603b      	str	r3, [r7, #0]
    9ca8:	460b      	mov	r3, r1
    9caa:	72fb      	strb	r3, [r7, #11]
    if (emit->pass == MP_PASS_EMIT) {
    9cac:	68fb      	ldr	r3, [r7, #12]
    9cae:	795b      	ldrb	r3, [r3, #5]
    9cb0:	2b04      	cmp	r3, #4
    9cb2:	d106      	bne.n	9cc2 <emit_write_bytecode_byte_const+0x26>
        emit->const_table[n] = c;
    9cb4:	68fb      	ldr	r3, [r7, #12]
    9cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9cb8:	687b      	ldr	r3, [r7, #4]
    9cba:	009b      	lsls	r3, r3, #2
    9cbc:	4413      	add	r3, r2
    9cbe:	683a      	ldr	r2, [r7, #0]
    9cc0:	601a      	str	r2, [r3, #0]
    }
    emit_write_bytecode_byte_uint(emit, b, n);
    9cc2:	7afb      	ldrb	r3, [r7, #11]
    9cc4:	687a      	ldr	r2, [r7, #4]
    9cc6:	4619      	mov	r1, r3
    9cc8:	68f8      	ldr	r0, [r7, #12]
    9cca:	f7ff ffcf 	bl	9c6c <emit_write_bytecode_byte_uint>
}
    9cce:	bf00      	nop
    9cd0:	3710      	adds	r7, #16
    9cd2:	46bd      	mov	sp, r7
    9cd4:	bd80      	pop	{r7, pc}
    9cd6:	bf00      	nop

00009cd8 <emit_write_bytecode_byte_qstr>:
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    9cd8:	b580      	push	{r7, lr}
    9cda:	b086      	sub	sp, #24
    9cdc:	af00      	add	r7, sp, #0
    9cde:	60f8      	str	r0, [r7, #12]
    9ce0:	460b      	mov	r3, r1
    9ce2:	607a      	str	r2, [r7, #4]
    9ce4:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9ce6:	687b      	ldr	r3, [r7, #4]
    9ce8:	0c1b      	lsrs	r3, r3, #16
    9cea:	2b00      	cmp	r3, #0
    9cec:	d005      	beq.n	9cfa <emit_write_bytecode_byte_qstr+0x22>
    9cee:	4b0e      	ldr	r3, [pc, #56]	; (9d28 <emit_write_bytecode_byte_qstr+0x50>)
    9cf0:	4a0e      	ldr	r2, [pc, #56]	; (9d2c <emit_write_bytecode_byte_qstr+0x54>)
    9cf2:	21ef      	movs	r1, #239	; 0xef
    9cf4:	480e      	ldr	r0, [pc, #56]	; (9d30 <emit_write_bytecode_byte_qstr+0x58>)
    9cf6:	f011 fb51 	bl	1b39c <__assert_func>
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9cfa:	2103      	movs	r1, #3
    9cfc:	68f8      	ldr	r0, [r7, #12]
    9cfe:	f7ff fee7 	bl	9ad0 <emit_get_cur_to_write_bytecode>
    9d02:	6178      	str	r0, [r7, #20]
    c[0] = b;
    9d04:	697b      	ldr	r3, [r7, #20]
    9d06:	7afa      	ldrb	r2, [r7, #11]
    9d08:	701a      	strb	r2, [r3, #0]
    c[1] = qst;
    9d0a:	697b      	ldr	r3, [r7, #20]
    9d0c:	3301      	adds	r3, #1
    9d0e:	687a      	ldr	r2, [r7, #4]
    9d10:	b2d2      	uxtb	r2, r2
    9d12:	701a      	strb	r2, [r3, #0]
    c[2] = qst >> 8;
    9d14:	697b      	ldr	r3, [r7, #20]
    9d16:	3302      	adds	r3, #2
    9d18:	687a      	ldr	r2, [r7, #4]
    9d1a:	0a12      	lsrs	r2, r2, #8
    9d1c:	b2d2      	uxtb	r2, r2
    9d1e:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    #endif
}
    9d20:	bf00      	nop
    9d22:	3718      	adds	r7, #24
    9d24:	46bd      	mov	sp, r7
    9d26:	bd80      	pop	{r7, pc}
    9d28:	0001f1f0 	.word	0x0001f1f0
    9d2c:	0001f410 	.word	0x0001f410
    9d30:	0001f1dc 	.word	0x0001f1dc

00009d34 <emit_write_bytecode_byte_obj>:

STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    9d34:	b580      	push	{r7, lr}
    9d36:	b084      	sub	sp, #16
    9d38:	af00      	add	r7, sp, #0
    9d3a:	60f8      	str	r0, [r7, #12]
    9d3c:	460b      	mov	r3, r1
    9d3e:	607a      	str	r2, [r7, #4]
    9d40:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9d42:	68fb      	ldr	r3, [r7, #12]
    9d44:	68db      	ldr	r3, [r3, #12]
    9d46:	8b5b      	ldrh	r3, [r3, #26]
    9d48:	461a      	mov	r2, r3
    9d4a:	68fb      	ldr	r3, [r7, #12]
    9d4c:	68db      	ldr	r3, [r3, #12]
    9d4e:	8b9b      	ldrh	r3, [r3, #28]
    9d50:	441a      	add	r2, r3
        + emit->ct_cur_obj++, (mp_uint_t)obj);
    9d52:	68fb      	ldr	r3, [r7, #12]
    9d54:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9d56:	1c59      	adds	r1, r3, #1
    9d58:	b288      	uxth	r0, r1
    9d5a:	68f9      	ldr	r1, [r7, #12]
    9d5c:	8688      	strh	r0, [r1, #52]	; 0x34
    9d5e:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9d60:	461a      	mov	r2, r3
    9d62:	687b      	ldr	r3, [r7, #4]
    9d64:	7af9      	ldrb	r1, [r7, #11]
    9d66:	68f8      	ldr	r0, [r7, #12]
    9d68:	f7ff ff98 	bl	9c9c <emit_write_bytecode_byte_const>
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    *c = obj;
    #endif
}
    9d6c:	bf00      	nop
    9d6e:	3710      	adds	r7, #16
    9d70:	46bd      	mov	sp, r7
    9d72:	bd80      	pop	{r7, pc}

00009d74 <emit_write_bytecode_byte_raw_code>:

STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    9d74:	b580      	push	{r7, lr}
    9d76:	b084      	sub	sp, #16
    9d78:	af00      	add	r7, sp, #0
    9d7a:	60f8      	str	r0, [r7, #12]
    9d7c:	460b      	mov	r3, r1
    9d7e:	607a      	str	r2, [r7, #4]
    9d80:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9d82:	68fb      	ldr	r3, [r7, #12]
    9d84:	68db      	ldr	r3, [r3, #12]
    9d86:	8b5b      	ldrh	r3, [r3, #26]
    9d88:	461a      	mov	r2, r3
    9d8a:	68fb      	ldr	r3, [r7, #12]
    9d8c:	68db      	ldr	r3, [r3, #12]
    9d8e:	8b9b      	ldrh	r3, [r3, #28]
    9d90:	4413      	add	r3, r2
        + emit->ct_num_obj + emit->ct_cur_raw_code++, (mp_uint_t)(uintptr_t)rc);
    9d92:	68fa      	ldr	r2, [r7, #12]
    9d94:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    9d96:	441a      	add	r2, r3
    9d98:	68fb      	ldr	r3, [r7, #12]
    9d9a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    9d9c:	1c59      	adds	r1, r3, #1
    9d9e:	b288      	uxth	r0, r1
    9da0:	68f9      	ldr	r1, [r7, #12]
    9da2:	8708      	strh	r0, [r1, #56]	; 0x38
    9da4:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9da6:	461a      	mov	r2, r3
    9da8:	687b      	ldr	r3, [r7, #4]
    9daa:	7af9      	ldrb	r1, [r7, #11]
    9dac:	68f8      	ldr	r0, [r7, #12]
    9dae:	f7ff ff75 	bl	9c9c <emit_write_bytecode_byte_const>
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(void*)));
    *c = rc;
    #endif
}
    9db2:	bf00      	nop
    9db4:	3710      	adds	r7, #16
    9db6:	46bd      	mov	sp, r7
    9db8:	bd80      	pop	{r7, pc}
    9dba:	bf00      	nop

00009dbc <emit_write_bytecode_byte_unsigned_label>:

// unsigned labels are relative to ip following this instruction, stored as 16 bits
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    9dbc:	b580      	push	{r7, lr}
    9dbe:	b086      	sub	sp, #24
    9dc0:	af00      	add	r7, sp, #0
    9dc2:	60f8      	str	r0, [r7, #12]
    9dc4:	460b      	mov	r3, r1
    9dc6:	607a      	str	r2, [r7, #4]
    9dc8:	72fb      	strb	r3, [r7, #11]
    mp_uint_t bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9dca:	68fb      	ldr	r3, [r7, #12]
    9dcc:	795b      	ldrb	r3, [r3, #5]
    9dce:	2b03      	cmp	r3, #3
    9dd0:	d802      	bhi.n	9dd8 <emit_write_bytecode_byte_unsigned_label+0x1c>
        bytecode_offset = 0;
    9dd2:	2300      	movs	r3, #0
    9dd4:	617b      	str	r3, [r7, #20]
    9dd6:	e00a      	b.n	9dee <emit_write_bytecode_byte_unsigned_label+0x32>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    9dd8:	68fb      	ldr	r3, [r7, #12]
    9dda:	69da      	ldr	r2, [r3, #28]
    9ddc:	687b      	ldr	r3, [r7, #4]
    9dde:	009b      	lsls	r3, r3, #2
    9de0:	4413      	add	r3, r2
    9de2:	681a      	ldr	r2, [r3, #0]
    9de4:	68fb      	ldr	r3, [r7, #12]
    9de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9de8:	1ad3      	subs	r3, r2, r3
    9dea:	3b03      	subs	r3, #3
    9dec:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9dee:	2103      	movs	r1, #3
    9df0:	68f8      	ldr	r0, [r7, #12]
    9df2:	f7ff fe6d 	bl	9ad0 <emit_get_cur_to_write_bytecode>
    9df6:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9df8:	693b      	ldr	r3, [r7, #16]
    9dfa:	7afa      	ldrb	r2, [r7, #11]
    9dfc:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9dfe:	693b      	ldr	r3, [r7, #16]
    9e00:	3301      	adds	r3, #1
    9e02:	697a      	ldr	r2, [r7, #20]
    9e04:	b2d2      	uxtb	r2, r2
    9e06:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9e08:	693b      	ldr	r3, [r7, #16]
    9e0a:	3302      	adds	r3, #2
    9e0c:	697a      	ldr	r2, [r7, #20]
    9e0e:	0a12      	lsrs	r2, r2, #8
    9e10:	b2d2      	uxtb	r2, r2
    9e12:	701a      	strb	r2, [r3, #0]
}
    9e14:	bf00      	nop
    9e16:	3718      	adds	r7, #24
    9e18:	46bd      	mov	sp, r7
    9e1a:	bd80      	pop	{r7, pc}

00009e1c <emit_write_bytecode_byte_signed_label>:

// signed labels are relative to ip following this instruction, stored as 16 bits, in excess
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    9e1c:	b580      	push	{r7, lr}
    9e1e:	b086      	sub	sp, #24
    9e20:	af00      	add	r7, sp, #0
    9e22:	60f8      	str	r0, [r7, #12]
    9e24:	460b      	mov	r3, r1
    9e26:	607a      	str	r2, [r7, #4]
    9e28:	72fb      	strb	r3, [r7, #11]
    int bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9e2a:	68fb      	ldr	r3, [r7, #12]
    9e2c:	795b      	ldrb	r3, [r3, #5]
    9e2e:	2b03      	cmp	r3, #3
    9e30:	d802      	bhi.n	9e38 <emit_write_bytecode_byte_signed_label+0x1c>
        bytecode_offset = 0;
    9e32:	2300      	movs	r3, #0
    9e34:	617b      	str	r3, [r7, #20]
    9e36:	e00c      	b.n	9e52 <emit_write_bytecode_byte_signed_label+0x36>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    9e38:	68fb      	ldr	r3, [r7, #12]
    9e3a:	69da      	ldr	r2, [r3, #28]
    9e3c:	687b      	ldr	r3, [r7, #4]
    9e3e:	009b      	lsls	r3, r3, #2
    9e40:	4413      	add	r3, r2
    9e42:	681a      	ldr	r2, [r3, #0]
    9e44:	68fb      	ldr	r3, [r7, #12]
    9e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e48:	1ad3      	subs	r3, r2, r3
    9e4a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    9e4e:	337d      	adds	r3, #125	; 0x7d
    9e50:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9e52:	2103      	movs	r1, #3
    9e54:	68f8      	ldr	r0, [r7, #12]
    9e56:	f7ff fe3b 	bl	9ad0 <emit_get_cur_to_write_bytecode>
    9e5a:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9e5c:	693b      	ldr	r3, [r7, #16]
    9e5e:	7afa      	ldrb	r2, [r7, #11]
    9e60:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9e62:	693b      	ldr	r3, [r7, #16]
    9e64:	3301      	adds	r3, #1
    9e66:	697a      	ldr	r2, [r7, #20]
    9e68:	b2d2      	uxtb	r2, r2
    9e6a:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9e6c:	693b      	ldr	r3, [r7, #16]
    9e6e:	3302      	adds	r3, #2
    9e70:	697a      	ldr	r2, [r7, #20]
    9e72:	1212      	asrs	r2, r2, #8
    9e74:	b2d2      	uxtb	r2, r2
    9e76:	701a      	strb	r2, [r3, #0]
}
    9e78:	bf00      	nop
    9e7a:	3718      	adds	r7, #24
    9e7c:	46bd      	mov	sp, r7
    9e7e:	bd80      	pop	{r7, pc}

00009e80 <mp_emit_bc_start_pass>:

void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    9e80:	b580      	push	{r7, lr}
    9e82:	b08c      	sub	sp, #48	; 0x30
    9e84:	af00      	add	r7, sp, #0
    9e86:	60f8      	str	r0, [r7, #12]
    9e88:	60b9      	str	r1, [r7, #8]
    9e8a:	607a      	str	r2, [r7, #4]
    emit->pass = pass;
    9e8c:	68bb      	ldr	r3, [r7, #8]
    9e8e:	b2da      	uxtb	r2, r3
    9e90:	68fb      	ldr	r3, [r7, #12]
    9e92:	715a      	strb	r2, [r3, #5]
    emit->stack_size = 0;
    9e94:	68fb      	ldr	r3, [r7, #12]
    9e96:	2200      	movs	r2, #0
    9e98:	609a      	str	r2, [r3, #8]
    emit->last_emit_was_return_value = false;
    9e9a:	68fb      	ldr	r3, [r7, #12]
    9e9c:	2200      	movs	r2, #0
    9e9e:	719a      	strb	r2, [r3, #6]
    emit->scope = scope;
    9ea0:	68fb      	ldr	r3, [r7, #12]
    9ea2:	687a      	ldr	r2, [r7, #4]
    9ea4:	60da      	str	r2, [r3, #12]
    emit->last_source_line_offset = 0;
    9ea6:	68fb      	ldr	r3, [r7, #12]
    9ea8:	2200      	movs	r2, #0
    9eaa:	611a      	str	r2, [r3, #16]
    emit->last_source_line = 1;
    9eac:	68fb      	ldr	r3, [r7, #12]
    9eae:	2201      	movs	r2, #1
    9eb0:	615a      	str	r2, [r3, #20]
    #ifndef NDEBUG
    // With debugging enabled labels are checked for unique assignment
    if (pass < MP_PASS_EMIT && emit->label_offsets != NULL) {
    9eb2:	68bb      	ldr	r3, [r7, #8]
    9eb4:	2b03      	cmp	r3, #3
    9eb6:	d80d      	bhi.n	9ed4 <mp_emit_bc_start_pass+0x54>
    9eb8:	68fb      	ldr	r3, [r7, #12]
    9eba:	69db      	ldr	r3, [r3, #28]
    9ebc:	2b00      	cmp	r3, #0
    9ebe:	d009      	beq.n	9ed4 <mp_emit_bc_start_pass+0x54>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    9ec0:	68fb      	ldr	r3, [r7, #12]
    9ec2:	69d8      	ldr	r0, [r3, #28]
    9ec4:	68fb      	ldr	r3, [r7, #12]
    9ec6:	699b      	ldr	r3, [r3, #24]
    9ec8:	009b      	lsls	r3, r3, #2
    9eca:	461a      	mov	r2, r3
    9ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9ed0:	f011 ffbc 	bl	1be4c <memset>
    }
    #endif
    emit->bytecode_offset = 0;
    9ed4:	68fb      	ldr	r3, [r7, #12]
    9ed6:	2200      	movs	r2, #0
    9ed8:	629a      	str	r2, [r3, #40]	; 0x28
    emit->code_info_offset = 0;
    9eda:	68fb      	ldr	r3, [r7, #12]
    9edc:	2200      	movs	r2, #0
    9ede:	621a      	str	r2, [r3, #32]

    // Write local state size and exception stack size.
    {
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    9ee0:	687b      	ldr	r3, [r7, #4]
    9ee2:	8c1b      	ldrh	r3, [r3, #32]
    9ee4:	461a      	mov	r2, r3
    9ee6:	687b      	ldr	r3, [r7, #4]
    9ee8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9eea:	4413      	add	r3, r2
    9eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (n_state == 0) {
    9eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	d101      	bne.n	9ef8 <mp_emit_bc_start_pass+0x78>
            // Need at least 1 entry in the state, in the case an exception is
            // propagated through this function, the exception is returned in
            // the highest slot in the state (fastn[0], see vm.c).
            n_state = 1;
    9ef4:	2301      	movs	r3, #1
    9ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        emit_write_code_info_uint(emit, n_state);
    9ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9efa:	68f8      	ldr	r0, [r7, #12]
    9efc:	f7ff fdb0 	bl	9a60 <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9f04:	4619      	mov	r1, r3
    9f06:	68f8      	ldr	r0, [r7, #12]
    9f08:	f7ff fdaa 	bl	9a60 <emit_write_code_info_uint>
    }

    // Write scope flags and number of arguments.
    // TODO check that num args all fit in a byte
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    9f0c:	68fb      	ldr	r3, [r7, #12]
    9f0e:	68db      	ldr	r3, [r3, #12]
    9f10:	7e1b      	ldrb	r3, [r3, #24]
    9f12:	4619      	mov	r1, r3
    9f14:	68f8      	ldr	r0, [r7, #12]
    9f16:	f7ff fd91 	bl	9a3c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    9f1a:	68fb      	ldr	r3, [r7, #12]
    9f1c:	68db      	ldr	r3, [r3, #12]
    9f1e:	8b5b      	ldrh	r3, [r3, #26]
    9f20:	b2db      	uxtb	r3, r3
    9f22:	4619      	mov	r1, r3
    9f24:	68f8      	ldr	r0, [r7, #12]
    9f26:	f7ff fd89 	bl	9a3c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    9f2a:	68fb      	ldr	r3, [r7, #12]
    9f2c:	68db      	ldr	r3, [r3, #12]
    9f2e:	8b9b      	ldrh	r3, [r3, #28]
    9f30:	b2db      	uxtb	r3, r3
    9f32:	4619      	mov	r1, r3
    9f34:	68f8      	ldr	r0, [r7, #12]
    9f36:	f7ff fd81 	bl	9a3c <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    9f3a:	68fb      	ldr	r3, [r7, #12]
    9f3c:	68db      	ldr	r3, [r3, #12]
    9f3e:	8bdb      	ldrh	r3, [r3, #30]
    9f40:	b2db      	uxtb	r3, r3
    9f42:	4619      	mov	r1, r3
    9f44:	68f8      	ldr	r0, [r7, #12]
    9f46:	f7ff fd79 	bl	9a3c <emit_write_code_info_byte>

    // Write size of the rest of the code info.  We don't know how big this
    // variable uint will be on the MP_PASS_CODE_SIZE pass so we reserve 2 bytes
    // for it and hope that is enough!  TODO assert this or something.
    if (pass == MP_PASS_EMIT) {
    9f4a:	68bb      	ldr	r3, [r7, #8]
    9f4c:	2b04      	cmp	r3, #4
    9f4e:	d109      	bne.n	9f64 <mp_emit_bc_start_pass+0xe4>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    9f50:	68fb      	ldr	r3, [r7, #12]
    9f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9f54:	68fb      	ldr	r3, [r7, #12]
    9f56:	6a1b      	ldr	r3, [r3, #32]
    9f58:	1ad3      	subs	r3, r2, r3
    9f5a:	4619      	mov	r1, r3
    9f5c:	68f8      	ldr	r0, [r7, #12]
    9f5e:	f7ff fd7f 	bl	9a60 <emit_write_code_info_uint>
    9f62:	e003      	b.n	9f6c <mp_emit_bc_start_pass+0xec>
    } else  {
        emit_get_cur_to_write_code_info(emit, 2);
    9f64:	2102      	movs	r1, #2
    9f66:	68f8      	ldr	r0, [r7, #12]
    9f68:	f7ff fd32 	bl	99d0 <emit_get_cur_to_write_code_info>
    }

    // Write the name and source file of this function.
    emit_write_code_info_qstr(emit, scope->simple_name);
    9f6c:	687b      	ldr	r3, [r7, #4]
    9f6e:	8a5b      	ldrh	r3, [r3, #18]
    9f70:	4619      	mov	r1, r3
    9f72:	68f8      	ldr	r0, [r7, #12]
    9f74:	f7ff fd84 	bl	9a80 <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    9f78:	687b      	ldr	r3, [r7, #4]
    9f7a:	8a1b      	ldrh	r3, [r3, #16]
    9f7c:	4619      	mov	r1, r3
    9f7e:	68f8      	ldr	r0, [r7, #12]
    9f80:	f7ff fd7e 	bl	9a80 <emit_write_code_info_qstr>

    // bytecode prelude: initialise closed over variables
    for (int i = 0; i < scope->id_info_len; i++) {
    9f84:	2300      	movs	r3, #0
    9f86:	62bb      	str	r3, [r7, #40]	; 0x28
    9f88:	e01e      	b.n	9fc8 <mp_emit_bc_start_pass+0x148>
        id_info_t *id = &scope->id_info[i];
    9f8a:	687b      	ldr	r3, [r7, #4]
    9f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f90:	00db      	lsls	r3, r3, #3
    9f92:	4413      	add	r3, r2
    9f94:	61bb      	str	r3, [r7, #24]
        if (id->kind == ID_INFO_KIND_CELL) {
    9f96:	69bb      	ldr	r3, [r7, #24]
    9f98:	781b      	ldrb	r3, [r3, #0]
    9f9a:	2b03      	cmp	r3, #3
    9f9c:	d111      	bne.n	9fc2 <mp_emit_bc_start_pass+0x142>
            assert(id->local_num < 255);
    9f9e:	69bb      	ldr	r3, [r7, #24]
    9fa0:	885b      	ldrh	r3, [r3, #2]
    9fa2:	2bfe      	cmp	r3, #254	; 0xfe
    9fa4:	d906      	bls.n	9fb4 <mp_emit_bc_start_pass+0x134>
    9fa6:	4b32      	ldr	r3, [pc, #200]	; (a070 <mp_emit_bc_start_pass+0x1f0>)
    9fa8:	4a32      	ldr	r2, [pc, #200]	; (a074 <mp_emit_bc_start_pass+0x1f4>)
    9faa:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    9fae:	4832      	ldr	r0, [pc, #200]	; (a078 <mp_emit_bc_start_pass+0x1f8>)
    9fb0:	f011 f9f4 	bl	1b39c <__assert_func>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    9fb4:	69bb      	ldr	r3, [r7, #24]
    9fb6:	885b      	ldrh	r3, [r3, #2]
    9fb8:	b2db      	uxtb	r3, r3
    9fba:	4619      	mov	r1, r3
    9fbc:	68f8      	ldr	r0, [r7, #12]
    9fbe:	f7ff fdc1 	bl	9b44 <emit_write_bytecode_byte>
    for (int i = 0; i < scope->id_info_len; i++) {
    9fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9fc4:	3301      	adds	r3, #1
    9fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    9fc8:	687b      	ldr	r3, [r7, #4]
    9fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9fcc:	461a      	mov	r2, r3
    9fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9fd0:	429a      	cmp	r2, r3
    9fd2:	dcda      	bgt.n	9f8a <mp_emit_bc_start_pass+0x10a>
        }
    }
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    9fd4:	21ff      	movs	r1, #255	; 0xff
    9fd6:	68f8      	ldr	r0, [r7, #12]
    9fd8:	f7ff fdb4 	bl	9b44 <emit_write_bytecode_byte>

    #if MICROPY_PERSISTENT_CODE
    emit->ct_cur_obj = 0;
    9fdc:	68fb      	ldr	r3, [r7, #12]
    9fde:	2200      	movs	r2, #0
    9fe0:	869a      	strh	r2, [r3, #52]	; 0x34
    emit->ct_cur_raw_code = 0;
    9fe2:	68fb      	ldr	r3, [r7, #12]
    9fe4:	2200      	movs	r2, #0
    9fe6:	871a      	strh	r2, [r3, #56]	; 0x38
    #endif

    if (pass == MP_PASS_EMIT) {
    9fe8:	68bb      	ldr	r3, [r7, #8]
    9fea:	2b04      	cmp	r3, #4
    9fec:	d13c      	bne.n	a068 <mp_emit_bc_start_pass+0x1e8>
        // parameter we use "*" as its name (since no argument can ever be named
        // "*").  We could use a blank qstr but "*" is better for debugging.
        // Note: there is some wasted RAM here for the case of storing a qstr
        // for each closed-over variable, and maybe there is a better way to do
        // it, but that would require changes to mp_setup_code_state.
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    9fee:	2300      	movs	r3, #0
    9ff0:	627b      	str	r3, [r7, #36]	; 0x24
    9ff2:	e030      	b.n	a056 <mp_emit_bc_start_pass+0x1d6>
            qstr qst = MP_QSTR__star_;
    9ff4:	2326      	movs	r3, #38	; 0x26
    9ff6:	623b      	str	r3, [r7, #32]
            for (int j = 0; j < scope->id_info_len; ++j) {
    9ff8:	2300      	movs	r3, #0
    9ffa:	61fb      	str	r3, [r7, #28]
    9ffc:	e018      	b.n	a030 <mp_emit_bc_start_pass+0x1b0>
                id_info_t *id = &scope->id_info[j];
    9ffe:	687b      	ldr	r3, [r7, #4]
    a000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a002:	69fb      	ldr	r3, [r7, #28]
    a004:	00db      	lsls	r3, r3, #3
    a006:	4413      	add	r3, r2
    a008:	617b      	str	r3, [r7, #20]
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    a00a:	697b      	ldr	r3, [r7, #20]
    a00c:	785b      	ldrb	r3, [r3, #1]
    a00e:	f003 0301 	and.w	r3, r3, #1
    a012:	2b00      	cmp	r3, #0
    a014:	d009      	beq.n	a02a <mp_emit_bc_start_pass+0x1aa>
    a016:	697b      	ldr	r3, [r7, #20]
    a018:	885b      	ldrh	r3, [r3, #2]
    a01a:	461a      	mov	r2, r3
    a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a01e:	429a      	cmp	r2, r3
    a020:	d103      	bne.n	a02a <mp_emit_bc_start_pass+0x1aa>
                    qst = id->qst;
    a022:	697b      	ldr	r3, [r7, #20]
    a024:	685b      	ldr	r3, [r3, #4]
    a026:	623b      	str	r3, [r7, #32]
                    break;
    a028:	e008      	b.n	a03c <mp_emit_bc_start_pass+0x1bc>
            for (int j = 0; j < scope->id_info_len; ++j) {
    a02a:	69fb      	ldr	r3, [r7, #28]
    a02c:	3301      	adds	r3, #1
    a02e:	61fb      	str	r3, [r7, #28]
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a034:	461a      	mov	r2, r3
    a036:	69fb      	ldr	r3, [r7, #28]
    a038:	429a      	cmp	r2, r3
    a03a:	dce0      	bgt.n	9ffe <mp_emit_bc_start_pass+0x17e>
                }
            }
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    a03c:	68fb      	ldr	r3, [r7, #12]
    a03e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a042:	009b      	lsls	r3, r3, #2
    a044:	4413      	add	r3, r2
    a046:	6a3a      	ldr	r2, [r7, #32]
    a048:	0092      	lsls	r2, r2, #2
    a04a:	f042 0202 	orr.w	r2, r2, #2
    a04e:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a052:	3301      	adds	r3, #1
    a054:	627b      	str	r3, [r7, #36]	; 0x24
    a056:	687b      	ldr	r3, [r7, #4]
    a058:	8b5b      	ldrh	r3, [r3, #26]
    a05a:	461a      	mov	r2, r3
    a05c:	687b      	ldr	r3, [r7, #4]
    a05e:	8b9b      	ldrh	r3, [r3, #28]
    a060:	441a      	add	r2, r3
    a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a064:	429a      	cmp	r2, r3
    a066:	dcc5      	bgt.n	9ff4 <mp_emit_bc_start_pass+0x174>
        }
    }
}
    a068:	bf00      	nop
    a06a:	3730      	adds	r7, #48	; 0x30
    a06c:	46bd      	mov	sp, r7
    a06e:	bd80      	pop	{r7, pc}
    a070:	0001f248 	.word	0x0001f248
    a074:	0001f430 	.word	0x0001f430
    a078:	0001f1dc 	.word	0x0001f1dc

0000a07c <mp_emit_bc_end_pass>:

void mp_emit_bc_end_pass(emit_t *emit) {
    a07c:	b580      	push	{r7, lr}
    a07e:	b082      	sub	sp, #8
    a080:	af00      	add	r7, sp, #0
    a082:	6078      	str	r0, [r7, #4]
    if (emit->pass == MP_PASS_SCOPE) {
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	795b      	ldrb	r3, [r3, #5]
    a088:	2b01      	cmp	r3, #1
    a08a:	d061      	beq.n	a150 <mp_emit_bc_end_pass+0xd4>
        return;
    }

    // check stack is back to zero size
    assert(emit->stack_size == 0);
    a08c:	687b      	ldr	r3, [r7, #4]
    a08e:	689b      	ldr	r3, [r3, #8]
    a090:	2b00      	cmp	r3, #0
    a092:	d006      	beq.n	a0a2 <mp_emit_bc_end_pass+0x26>
    a094:	4b30      	ldr	r3, [pc, #192]	; (a158 <mp_emit_bc_end_pass+0xdc>)
    a096:	4a31      	ldr	r2, [pc, #196]	; (a15c <mp_emit_bc_end_pass+0xe0>)
    a098:	f240 1199 	movw	r1, #409	; 0x199
    a09c:	4830      	ldr	r0, [pc, #192]	; (a160 <mp_emit_bc_end_pass+0xe4>)
    a09e:	f011 f97d 	bl	1b39c <__assert_func>

    emit_write_code_info_byte(emit, 0); // end of line number info
    a0a2:	2100      	movs	r1, #0
    a0a4:	6878      	ldr	r0, [r7, #4]
    a0a6:	f7ff fcc9 	bl	9a3c <emit_write_code_info_byte>

    #if MICROPY_PERSISTENT_CODE
    assert(emit->pass <= MP_PASS_STACK_SIZE || (emit->ct_num_obj == emit->ct_cur_obj));
    a0aa:	687b      	ldr	r3, [r7, #4]
    a0ac:	795b      	ldrb	r3, [r3, #5]
    a0ae:	2b02      	cmp	r3, #2
    a0b0:	d90c      	bls.n	a0cc <mp_emit_bc_end_pass+0x50>
    a0b2:	687b      	ldr	r3, [r7, #4]
    a0b4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    a0b6:	687b      	ldr	r3, [r7, #4]
    a0b8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a0ba:	429a      	cmp	r2, r3
    a0bc:	d006      	beq.n	a0cc <mp_emit_bc_end_pass+0x50>
    a0be:	4b29      	ldr	r3, [pc, #164]	; (a164 <mp_emit_bc_end_pass+0xe8>)
    a0c0:	4a26      	ldr	r2, [pc, #152]	; (a15c <mp_emit_bc_end_pass+0xe0>)
    a0c2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    a0c6:	4826      	ldr	r0, [pc, #152]	; (a160 <mp_emit_bc_end_pass+0xe4>)
    a0c8:	f011 f968 	bl	1b39c <__assert_func>
    emit->ct_num_obj = emit->ct_cur_obj;
    a0cc:	687b      	ldr	r3, [r7, #4]
    a0ce:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    a0d0:	687b      	ldr	r3, [r7, #4]
    a0d2:	86da      	strh	r2, [r3, #54]	; 0x36
    #endif

    if (emit->pass == MP_PASS_CODE_SIZE) {
    a0d4:	687b      	ldr	r3, [r7, #4]
    a0d6:	795b      	ldrb	r3, [r3, #5]
    a0d8:	2b03      	cmp	r3, #3
    a0da:	d128      	bne.n	a12e <mp_emit_bc_end_pass+0xb2>
        // so bytecode is aligned
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
        #endif

        // calculate size of total code-info + bytecode, in bytes
        emit->code_info_size = emit->code_info_offset;
    a0dc:	687b      	ldr	r3, [r7, #4]
    a0de:	6a1a      	ldr	r2, [r3, #32]
    a0e0:	687b      	ldr	r3, [r7, #4]
    a0e2:	625a      	str	r2, [r3, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    a0e4:	687b      	ldr	r3, [r7, #4]
    a0e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	62da      	str	r2, [r3, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    a0ec:	687b      	ldr	r3, [r7, #4]
    a0ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a0f4:	4413      	add	r3, r2
    a0f6:	4618      	mov	r0, r3
    a0f8:	f7f6 f936 	bl	368 <m_malloc0>
    a0fc:	4602      	mov	r2, r0
    a0fe:	687b      	ldr	r3, [r7, #4]
    a100:	631a      	str	r2, [r3, #48]	; 0x30

        #if MICROPY_PERSISTENT_CODE
        emit->const_table = m_new0(mp_uint_t,
    a102:	687b      	ldr	r3, [r7, #4]
    a104:	68db      	ldr	r3, [r3, #12]
    a106:	8b5b      	ldrh	r3, [r3, #26]
    a108:	461a      	mov	r2, r3
    a10a:	687b      	ldr	r3, [r7, #4]
    a10c:	68db      	ldr	r3, [r3, #12]
    a10e:	8b9b      	ldrh	r3, [r3, #28]
    a110:	4413      	add	r3, r2
    a112:	687a      	ldr	r2, [r7, #4]
    a114:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    a116:	4413      	add	r3, r2
    a118:	687a      	ldr	r2, [r7, #4]
    a11a:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    a11c:	4413      	add	r3, r2
    a11e:	009b      	lsls	r3, r3, #2
    a120:	4618      	mov	r0, r3
    a122:	f7f6 f921 	bl	368 <m_malloc0>
    a126:	4602      	mov	r2, r0
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	63da      	str	r2, [r3, #60]	; 0x3c
    a12c:	e011      	b.n	a152 <mp_emit_bc_end_pass+0xd6>
        #else
        emit->const_table = m_new0(mp_uint_t,
            emit->scope->num_pos_args + emit->scope->num_kwonly_args);
        #endif

    } else if (emit->pass == MP_PASS_EMIT) {
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	795b      	ldrb	r3, [r3, #5]
    a132:	2b04      	cmp	r3, #4
    a134:	d10d      	bne.n	a152 <mp_emit_bc_end_pass+0xd6>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	68db      	ldr	r3, [r3, #12]
    a13a:	6958      	ldr	r0, [r3, #20]
    a13c:	687b      	ldr	r3, [r7, #4]
    a13e:	6b19      	ldr	r1, [r3, #48]	; 0x30
            #if MICROPY_PERSISTENT_CODE_SAVE || MICROPY_DEBUG_PRINTERS
            emit->code_info_size + emit->bytecode_size,
            #endif
            emit->const_table,
    a140:	687b      	ldr	r3, [r7, #4]
    a142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            #if MICROPY_PERSISTENT_CODE_SAVE
            emit->ct_cur_obj, emit->ct_cur_raw_code,
            #endif
            emit->scope->scope_flags);
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	68db      	ldr	r3, [r3, #12]
    a148:	7e1b      	ldrb	r3, [r3, #24]
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a14a:	f001 f831 	bl	b1b0 <mp_emit_glue_assign_bytecode>
    a14e:	e000      	b.n	a152 <mp_emit_bc_end_pass+0xd6>
        return;
    a150:	bf00      	nop
    }
}
    a152:	3708      	adds	r7, #8
    a154:	46bd      	mov	sp, r7
    a156:	bd80      	pop	{r7, pc}
    a158:	0001f25c 	.word	0x0001f25c
    a15c:	0001f448 	.word	0x0001f448
    a160:	0001f1dc 	.word	0x0001f1dc
    a164:	0001f274 	.word	0x0001f274

0000a168 <mp_emit_bc_last_emit_was_return_value>:

bool mp_emit_bc_last_emit_was_return_value(emit_t *emit) {
    a168:	b480      	push	{r7}
    a16a:	b083      	sub	sp, #12
    a16c:	af00      	add	r7, sp, #0
    a16e:	6078      	str	r0, [r7, #4]
    return emit->last_emit_was_return_value;
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	799b      	ldrb	r3, [r3, #6]
    a174:	2b00      	cmp	r3, #0
    a176:	bf14      	ite	ne
    a178:	2301      	movne	r3, #1
    a17a:	2300      	moveq	r3, #0
    a17c:	b2db      	uxtb	r3, r3
}
    a17e:	4618      	mov	r0, r3
    a180:	370c      	adds	r7, #12
    a182:	46bd      	mov	sp, r7
    a184:	f85d 7b04 	ldr.w	r7, [sp], #4
    a188:	4770      	bx	lr
    a18a:	bf00      	nop

0000a18c <mp_emit_bc_adjust_stack_size>:

void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    a18c:	b580      	push	{r7, lr}
    a18e:	b082      	sub	sp, #8
    a190:	af00      	add	r7, sp, #0
    a192:	6078      	str	r0, [r7, #4]
    a194:	6039      	str	r1, [r7, #0]
    if (emit->pass == MP_PASS_SCOPE) {
    a196:	687b      	ldr	r3, [r7, #4]
    a198:	795b      	ldrb	r3, [r3, #5]
    a19a:	2b01      	cmp	r3, #1
    a19c:	d023      	beq.n	a1e6 <mp_emit_bc_adjust_stack_size+0x5a>
        return;
    }
    assert((mp_int_t)emit->stack_size + delta >= 0);
    a19e:	687b      	ldr	r3, [r7, #4]
    a1a0:	689a      	ldr	r2, [r3, #8]
    a1a2:	683b      	ldr	r3, [r7, #0]
    a1a4:	4413      	add	r3, r2
    a1a6:	2b00      	cmp	r3, #0
    a1a8:	da06      	bge.n	a1b8 <mp_emit_bc_adjust_stack_size+0x2c>
    a1aa:	4b11      	ldr	r3, [pc, #68]	; (a1f0 <mp_emit_bc_adjust_stack_size+0x64>)
    a1ac:	4a11      	ldr	r2, [pc, #68]	; (a1f4 <mp_emit_bc_adjust_stack_size+0x68>)
    a1ae:	f240 11cb 	movw	r1, #459	; 0x1cb
    a1b2:	4811      	ldr	r0, [pc, #68]	; (a1f8 <mp_emit_bc_adjust_stack_size+0x6c>)
    a1b4:	f011 f8f2 	bl	1b39c <__assert_func>
    emit->stack_size += delta;
    a1b8:	687b      	ldr	r3, [r7, #4]
    a1ba:	689a      	ldr	r2, [r3, #8]
    a1bc:	683b      	ldr	r3, [r7, #0]
    a1be:	441a      	add	r2, r3
    a1c0:	687b      	ldr	r3, [r7, #4]
    a1c2:	609a      	str	r2, [r3, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    a1c4:	687b      	ldr	r3, [r7, #4]
    a1c6:	689b      	ldr	r3, [r3, #8]
    a1c8:	687a      	ldr	r2, [r7, #4]
    a1ca:	68d2      	ldr	r2, [r2, #12]
    a1cc:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    a1ce:	4293      	cmp	r3, r2
    a1d0:	dd05      	ble.n	a1de <mp_emit_bc_adjust_stack_size+0x52>
        emit->scope->stack_size = emit->stack_size;
    a1d2:	687b      	ldr	r3, [r7, #4]
    a1d4:	68db      	ldr	r3, [r3, #12]
    a1d6:	687a      	ldr	r2, [r7, #4]
    a1d8:	6892      	ldr	r2, [r2, #8]
    a1da:	b292      	uxth	r2, r2
    a1dc:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    emit->last_emit_was_return_value = false;
    a1de:	687b      	ldr	r3, [r7, #4]
    a1e0:	2200      	movs	r2, #0
    a1e2:	719a      	strb	r2, [r3, #6]
    a1e4:	e000      	b.n	a1e8 <mp_emit_bc_adjust_stack_size+0x5c>
        return;
    a1e6:	bf00      	nop
}
    a1e8:	3708      	adds	r7, #8
    a1ea:	46bd      	mov	sp, r7
    a1ec:	bd80      	pop	{r7, pc}
    a1ee:	bf00      	nop
    a1f0:	0001f2c0 	.word	0x0001f2c0
    a1f4:	0001f45c 	.word	0x0001f45c
    a1f8:	0001f1dc 	.word	0x0001f1dc

0000a1fc <emit_bc_pre>:

static inline void emit_bc_pre(emit_t *emit, mp_int_t stack_size_delta) {
    a1fc:	b580      	push	{r7, lr}
    a1fe:	b082      	sub	sp, #8
    a200:	af00      	add	r7, sp, #0
    a202:	6078      	str	r0, [r7, #4]
    a204:	6039      	str	r1, [r7, #0]
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    a206:	6839      	ldr	r1, [r7, #0]
    a208:	6878      	ldr	r0, [r7, #4]
    a20a:	f7ff ffbf 	bl	a18c <mp_emit_bc_adjust_stack_size>
}
    a20e:	bf00      	nop
    a210:	3708      	adds	r7, #8
    a212:	46bd      	mov	sp, r7
    a214:	bd80      	pop	{r7, pc}
    a216:	bf00      	nop

0000a218 <mp_emit_bc_set_source_line>:

void mp_emit_bc_set_source_line(emit_t *emit, mp_uint_t source_line) {
    a218:	b480      	push	{r7}
    a21a:	b083      	sub	sp, #12
    a21c:	af00      	add	r7, sp, #0
    a21e:	6078      	str	r0, [r7, #4]
    a220:	6039      	str	r1, [r7, #0]
    }
#else
    (void)emit;
    (void)source_line;
#endif
}
    a222:	bf00      	nop
    a224:	370c      	adds	r7, #12
    a226:	46bd      	mov	sp, r7
    a228:	f85d 7b04 	ldr.w	r7, [sp], #4
    a22c:	4770      	bx	lr
    a22e:	bf00      	nop

0000a230 <mp_emit_bc_label_assign>:

void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    a230:	b580      	push	{r7, lr}
    a232:	b082      	sub	sp, #8
    a234:	af00      	add	r7, sp, #0
    a236:	6078      	str	r0, [r7, #4]
    a238:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a23a:	2100      	movs	r1, #0
    a23c:	6878      	ldr	r0, [r7, #4]
    a23e:	f7ff ffdd 	bl	a1fc <emit_bc_pre>
    if (emit->pass == MP_PASS_SCOPE) {
    a242:	687b      	ldr	r3, [r7, #4]
    a244:	795b      	ldrb	r3, [r3, #5]
    a246:	2b01      	cmp	r3, #1
    a248:	d039      	beq.n	a2be <mp_emit_bc_label_assign+0x8e>
        return;
    }
    assert(l < emit->max_num_labels);
    a24a:	687b      	ldr	r3, [r7, #4]
    a24c:	699a      	ldr	r2, [r3, #24]
    a24e:	683b      	ldr	r3, [r7, #0]
    a250:	429a      	cmp	r2, r3
    a252:	d806      	bhi.n	a262 <mp_emit_bc_label_assign+0x32>
    a254:	4b1c      	ldr	r3, [pc, #112]	; (a2c8 <mp_emit_bc_label_assign+0x98>)
    a256:	4a1d      	ldr	r2, [pc, #116]	; (a2cc <mp_emit_bc_label_assign+0x9c>)
    a258:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    a25c:	481c      	ldr	r0, [pc, #112]	; (a2d0 <mp_emit_bc_label_assign+0xa0>)
    a25e:	f011 f89d 	bl	1b39c <__assert_func>
    if (emit->pass < MP_PASS_EMIT) {
    a262:	687b      	ldr	r3, [r7, #4]
    a264:	795b      	ldrb	r3, [r3, #5]
    a266:	2b03      	cmp	r3, #3
    a268:	d818      	bhi.n	a29c <mp_emit_bc_label_assign+0x6c>
        // assign label offset
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    a26a:	687b      	ldr	r3, [r7, #4]
    a26c:	69da      	ldr	r2, [r3, #28]
    a26e:	683b      	ldr	r3, [r7, #0]
    a270:	009b      	lsls	r3, r3, #2
    a272:	4413      	add	r3, r2
    a274:	681b      	ldr	r3, [r3, #0]
    a276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a27a:	d006      	beq.n	a28a <mp_emit_bc_label_assign+0x5a>
    a27c:	4b15      	ldr	r3, [pc, #84]	; (a2d4 <mp_emit_bc_label_assign+0xa4>)
    a27e:	4a13      	ldr	r2, [pc, #76]	; (a2cc <mp_emit_bc_label_assign+0x9c>)
    a280:	f240 11f3 	movw	r1, #499	; 0x1f3
    a284:	4812      	ldr	r0, [pc, #72]	; (a2d0 <mp_emit_bc_label_assign+0xa0>)
    a286:	f011 f889 	bl	1b39c <__assert_func>
        emit->label_offsets[l] = emit->bytecode_offset;
    a28a:	687b      	ldr	r3, [r7, #4]
    a28c:	69da      	ldr	r2, [r3, #28]
    a28e:	683b      	ldr	r3, [r7, #0]
    a290:	009b      	lsls	r3, r3, #2
    a292:	4413      	add	r3, r2
    a294:	687a      	ldr	r2, [r7, #4]
    a296:	6a92      	ldr	r2, [r2, #40]	; 0x28
    a298:	601a      	str	r2, [r3, #0]
    a29a:	e011      	b.n	a2c0 <mp_emit_bc_label_assign+0x90>
    } else {
        // ensure label offset has not changed from MP_PASS_CODE_SIZE to MP_PASS_EMIT
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    a29c:	687b      	ldr	r3, [r7, #4]
    a29e:	69da      	ldr	r2, [r3, #28]
    a2a0:	683b      	ldr	r3, [r7, #0]
    a2a2:	009b      	lsls	r3, r3, #2
    a2a4:	4413      	add	r3, r2
    a2a6:	681a      	ldr	r2, [r3, #0]
    a2a8:	687b      	ldr	r3, [r7, #4]
    a2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a2ac:	429a      	cmp	r2, r3
    a2ae:	d007      	beq.n	a2c0 <mp_emit_bc_label_assign+0x90>
    a2b0:	4b09      	ldr	r3, [pc, #36]	; (a2d8 <mp_emit_bc_label_assign+0xa8>)
    a2b2:	4a06      	ldr	r2, [pc, #24]	; (a2cc <mp_emit_bc_label_assign+0x9c>)
    a2b4:	f240 11f7 	movw	r1, #503	; 0x1f7
    a2b8:	4805      	ldr	r0, [pc, #20]	; (a2d0 <mp_emit_bc_label_assign+0xa0>)
    a2ba:	f011 f86f 	bl	1b39c <__assert_func>
        return;
    a2be:	bf00      	nop
    }
}
    a2c0:	3708      	adds	r7, #8
    a2c2:	46bd      	mov	sp, r7
    a2c4:	bd80      	pop	{r7, pc}
    a2c6:	bf00      	nop
    a2c8:	0001f2e8 	.word	0x0001f2e8
    a2cc:	0001f47c 	.word	0x0001f47c
    a2d0:	0001f1dc 	.word	0x0001f1dc
    a2d4:	0001f304 	.word	0x0001f304
    a2d8:	0001f32c 	.word	0x0001f32c

0000a2dc <mp_emit_bc_import>:

void mp_emit_bc_import(emit_t *emit, qstr qst, int kind) {
    a2dc:	b580      	push	{r7, lr}
    a2de:	b084      	sub	sp, #16
    a2e0:	af00      	add	r7, sp, #0
    a2e2:	60f8      	str	r0, [r7, #12]
    a2e4:	60b9      	str	r1, [r7, #8]
    a2e6:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_NAME == MP_BC_IMPORT_NAME);
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_FROM == MP_BC_IMPORT_FROM);
    if (kind == MP_EMIT_IMPORT_FROM) {
    a2e8:	687b      	ldr	r3, [r7, #4]
    a2ea:	2b01      	cmp	r3, #1
    a2ec:	d104      	bne.n	a2f8 <mp_emit_bc_import+0x1c>
        emit_bc_pre(emit, 1);
    a2ee:	2101      	movs	r1, #1
    a2f0:	68f8      	ldr	r0, [r7, #12]
    a2f2:	f7ff ff83 	bl	a1fc <emit_bc_pre>
    a2f6:	e004      	b.n	a302 <mp_emit_bc_import+0x26>
    } else {
        emit_bc_pre(emit, -1);
    a2f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a2fc:	68f8      	ldr	r0, [r7, #12]
    a2fe:	f7ff ff7d 	bl	a1fc <emit_bc_pre>
    }
    if (kind == MP_EMIT_IMPORT_STAR) {
    a302:	687b      	ldr	r3, [r7, #4]
    a304:	2b02      	cmp	r3, #2
    a306:	d104      	bne.n	a312 <mp_emit_bc_import+0x36>
        emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    a308:	216a      	movs	r1, #106	; 0x6a
    a30a:	68f8      	ldr	r0, [r7, #12]
    a30c:	f7ff fc1a 	bl	9b44 <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    }
}
    a310:	e008      	b.n	a324 <mp_emit_bc_import+0x48>
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    a312:	687b      	ldr	r3, [r7, #4]
    a314:	b2db      	uxtb	r3, r3
    a316:	3368      	adds	r3, #104	; 0x68
    a318:	b2db      	uxtb	r3, r3
    a31a:	68ba      	ldr	r2, [r7, #8]
    a31c:	4619      	mov	r1, r3
    a31e:	68f8      	ldr	r0, [r7, #12]
    a320:	f7ff fcda 	bl	9cd8 <emit_write_bytecode_byte_qstr>
}
    a324:	bf00      	nop
    a326:	3710      	adds	r7, #16
    a328:	46bd      	mov	sp, r7
    a32a:	bd80      	pop	{r7, pc}

0000a32c <mp_emit_bc_load_const_tok>:

void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    a32c:	b580      	push	{r7, lr}
    a32e:	b082      	sub	sp, #8
    a330:	af00      	add	r7, sp, #0
    a332:	6078      	str	r0, [r7, #4]
    a334:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a336:	2101      	movs	r1, #1
    a338:	6878      	ldr	r0, [r7, #4]
    a33a:	f7ff ff5f 	bl	a1fc <emit_bc_pre>
    switch (tok) {
    a33e:	683b      	ldr	r3, [r7, #0]
    a340:	2b0e      	cmp	r3, #14
    a342:	d008      	beq.n	a356 <mp_emit_bc_load_const_tok+0x2a>
    a344:	2b0f      	cmp	r3, #15
    a346:	d00b      	beq.n	a360 <mp_emit_bc_load_const_tok+0x34>
    a348:	2b0d      	cmp	r3, #13
    a34a:	d10e      	bne.n	a36a <mp_emit_bc_load_const_tok+0x3e>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    a34c:	2110      	movs	r1, #16
    a34e:	6878      	ldr	r0, [r7, #4]
    a350:	f7ff fbf8 	bl	9b44 <emit_write_bytecode_byte>
    a354:	e019      	b.n	a38a <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    a356:	2111      	movs	r1, #17
    a358:	6878      	ldr	r0, [r7, #4]
    a35a:	f7ff fbf3 	bl	9b44 <emit_write_bytecode_byte>
    a35e:	e014      	b.n	a38a <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    a360:	2112      	movs	r1, #18
    a362:	6878      	ldr	r0, [r7, #4]
    a364:	f7ff fbee 	bl	9b44 <emit_write_bytecode_byte>
    a368:	e00f      	b.n	a38a <mp_emit_bc_load_const_tok+0x5e>
        default:
            assert(tok == MP_TOKEN_ELLIPSIS);
    a36a:	683b      	ldr	r3, [r7, #0]
    a36c:	2b0c      	cmp	r3, #12
    a36e:	d006      	beq.n	a37e <mp_emit_bc_load_const_tok+0x52>
    a370:	4b08      	ldr	r3, [pc, #32]	; (a394 <mp_emit_bc_load_const_tok+0x68>)
    a372:	4a09      	ldr	r2, [pc, #36]	; (a398 <mp_emit_bc_load_const_tok+0x6c>)
    a374:	f240 2111 	movw	r1, #529	; 0x211
    a378:	4808      	ldr	r0, [pc, #32]	; (a39c <mp_emit_bc_load_const_tok+0x70>)
    a37a:	f011 f80f 	bl	1b39c <__assert_func>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    a37e:	4a08      	ldr	r2, [pc, #32]	; (a3a0 <mp_emit_bc_load_const_tok+0x74>)
    a380:	2117      	movs	r1, #23
    a382:	6878      	ldr	r0, [r7, #4]
    a384:	f7ff fcd6 	bl	9d34 <emit_write_bytecode_byte_obj>
            break;
    a388:	bf00      	nop
    }
}
    a38a:	bf00      	nop
    a38c:	3708      	adds	r7, #8
    a38e:	46bd      	mov	sp, r7
    a390:	bd80      	pop	{r7, pc}
    a392:	bf00      	nop
    a394:	0001f35c 	.word	0x0001f35c
    a398:	0001f494 	.word	0x0001f494
    a39c:	0001f1dc 	.word	0x0001f1dc
    a3a0:	00021564 	.word	0x00021564

0000a3a4 <mp_emit_bc_load_const_small_int>:

void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    a3a4:	b580      	push	{r7, lr}
    a3a6:	b082      	sub	sp, #8
    a3a8:	af00      	add	r7, sp, #0
    a3aa:	6078      	str	r0, [r7, #4]
    a3ac:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a3ae:	2101      	movs	r1, #1
    a3b0:	6878      	ldr	r0, [r7, #4]
    a3b2:	f7ff ff23 	bl	a1fc <emit_bc_pre>
    if (-16 <= arg && arg <= 47) {
    a3b6:	683b      	ldr	r3, [r7, #0]
    a3b8:	f113 0f10 	cmn.w	r3, #16
    a3bc:	db0b      	blt.n	a3d6 <mp_emit_bc_load_const_small_int+0x32>
    a3be:	683b      	ldr	r3, [r7, #0]
    a3c0:	2b2f      	cmp	r3, #47	; 0x2f
    a3c2:	dc08      	bgt.n	a3d6 <mp_emit_bc_load_const_small_int+0x32>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    a3c4:	683b      	ldr	r3, [r7, #0]
    a3c6:	b2db      	uxtb	r3, r3
    a3c8:	3b80      	subs	r3, #128	; 0x80
    a3ca:	b2db      	uxtb	r3, r3
    a3cc:	4619      	mov	r1, r3
    a3ce:	6878      	ldr	r0, [r7, #4]
    a3d0:	f7ff fbb8 	bl	9b44 <emit_write_bytecode_byte>
    a3d4:	e004      	b.n	a3e0 <mp_emit_bc_load_const_small_int+0x3c>
    } else {
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    a3d6:	683a      	ldr	r2, [r7, #0]
    a3d8:	2114      	movs	r1, #20
    a3da:	6878      	ldr	r0, [r7, #4]
    a3dc:	f7ff fbdc 	bl	9b98 <emit_write_bytecode_byte_int>
    }
}
    a3e0:	bf00      	nop
    a3e2:	3708      	adds	r7, #8
    a3e4:	46bd      	mov	sp, r7
    a3e6:	bd80      	pop	{r7, pc}

0000a3e8 <mp_emit_bc_load_const_str>:

void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    a3e8:	b580      	push	{r7, lr}
    a3ea:	b082      	sub	sp, #8
    a3ec:	af00      	add	r7, sp, #0
    a3ee:	6078      	str	r0, [r7, #4]
    a3f0:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a3f2:	2101      	movs	r1, #1
    a3f4:	6878      	ldr	r0, [r7, #4]
    a3f6:	f7ff ff01 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    a3fa:	683a      	ldr	r2, [r7, #0]
    a3fc:	2116      	movs	r1, #22
    a3fe:	6878      	ldr	r0, [r7, #4]
    a400:	f7ff fc6a 	bl	9cd8 <emit_write_bytecode_byte_qstr>
}
    a404:	bf00      	nop
    a406:	3708      	adds	r7, #8
    a408:	46bd      	mov	sp, r7
    a40a:	bd80      	pop	{r7, pc}

0000a40c <mp_emit_bc_load_const_obj>:

void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    a40c:	b580      	push	{r7, lr}
    a40e:	b082      	sub	sp, #8
    a410:	af00      	add	r7, sp, #0
    a412:	6078      	str	r0, [r7, #4]
    a414:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a416:	2101      	movs	r1, #1
    a418:	6878      	ldr	r0, [r7, #4]
    a41a:	f7ff feef 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    a41e:	683a      	ldr	r2, [r7, #0]
    a420:	2117      	movs	r1, #23
    a422:	6878      	ldr	r0, [r7, #4]
    a424:	f7ff fc86 	bl	9d34 <emit_write_bytecode_byte_obj>
}
    a428:	bf00      	nop
    a42a:	3708      	adds	r7, #8
    a42c:	46bd      	mov	sp, r7
    a42e:	bd80      	pop	{r7, pc}

0000a430 <mp_emit_bc_load_null>:

void mp_emit_bc_load_null(emit_t *emit) {
    a430:	b580      	push	{r7, lr}
    a432:	b082      	sub	sp, #8
    a434:	af00      	add	r7, sp, #0
    a436:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a438:	2101      	movs	r1, #1
    a43a:	6878      	ldr	r0, [r7, #4]
    a43c:	f7ff fede 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    a440:	2118      	movs	r1, #24
    a442:	6878      	ldr	r0, [r7, #4]
    a444:	f7ff fb7e 	bl	9b44 <emit_write_bytecode_byte>
}
    a448:	bf00      	nop
    a44a:	3708      	adds	r7, #8
    a44c:	46bd      	mov	sp, r7
    a44e:	bd80      	pop	{r7, pc}

0000a450 <mp_emit_bc_load_local>:

void mp_emit_bc_load_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a450:	b580      	push	{r7, lr}
    a452:	b084      	sub	sp, #16
    a454:	af00      	add	r7, sp, #0
    a456:	60f8      	str	r0, [r7, #12]
    a458:	60b9      	str	r1, [r7, #8]
    a45a:	607a      	str	r2, [r7, #4]
    a45c:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_LOAD_FAST_N);
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_LOAD_DEREF);
    (void)qst;
    emit_bc_pre(emit, 1);
    a45e:	2101      	movs	r1, #1
    a460:	68f8      	ldr	r0, [r7, #12]
    a462:	f7ff fecb 	bl	a1fc <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a466:	683b      	ldr	r3, [r7, #0]
    a468:	2b00      	cmp	r3, #0
    a46a:	d10b      	bne.n	a484 <mp_emit_bc_load_local+0x34>
    a46c:	687b      	ldr	r3, [r7, #4]
    a46e:	2b0f      	cmp	r3, #15
    a470:	d808      	bhi.n	a484 <mp_emit_bc_load_local+0x34>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    a472:	687b      	ldr	r3, [r7, #4]
    a474:	b2db      	uxtb	r3, r3
    a476:	3b50      	subs	r3, #80	; 0x50
    a478:	b2db      	uxtb	r3, r3
    a47a:	4619      	mov	r1, r3
    a47c:	68f8      	ldr	r0, [r7, #12]
    a47e:	f7ff fb61 	bl	9b44 <emit_write_bytecode_byte>
    a482:	e008      	b.n	a496 <mp_emit_bc_load_local+0x46>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N + kind, local_num);
    a484:	683b      	ldr	r3, [r7, #0]
    a486:	b2db      	uxtb	r3, r3
    a488:	3319      	adds	r3, #25
    a48a:	b2db      	uxtb	r3, r3
    a48c:	687a      	ldr	r2, [r7, #4]
    a48e:	4619      	mov	r1, r3
    a490:	68f8      	ldr	r0, [r7, #12]
    a492:	f7ff fbeb 	bl	9c6c <emit_write_bytecode_byte_uint>
    }
}
    a496:	bf00      	nop
    a498:	3710      	adds	r7, #16
    a49a:	46bd      	mov	sp, r7
    a49c:	bd80      	pop	{r7, pc}
    a49e:	bf00      	nop

0000a4a0 <mp_emit_bc_load_global>:

void mp_emit_bc_load_global(emit_t *emit, qstr qst, int kind) {
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b084      	sub	sp, #16
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	60f8      	str	r0, [r7, #12]
    a4a8:	60b9      	str	r1, [r7, #8]
    a4aa:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_LOAD_NAME);
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_LOAD_GLOBAL);
    (void)qst;
    emit_bc_pre(emit, 1);
    a4ac:	2101      	movs	r1, #1
    a4ae:	68f8      	ldr	r0, [r7, #12]
    a4b0:	f7ff fea4 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME + kind, qst);
    a4b4:	687b      	ldr	r3, [r7, #4]
    a4b6:	b2db      	uxtb	r3, r3
    a4b8:	331b      	adds	r3, #27
    a4ba:	b2db      	uxtb	r3, r3
    a4bc:	68ba      	ldr	r2, [r7, #8]
    a4be:	4619      	mov	r1, r3
    a4c0:	68f8      	ldr	r0, [r7, #12]
    a4c2:	f7ff fc09 	bl	9cd8 <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a4c6:	bf00      	nop
    a4c8:	3710      	adds	r7, #16
    a4ca:	46bd      	mov	sp, r7
    a4cc:	bd80      	pop	{r7, pc}
    a4ce:	bf00      	nop

0000a4d0 <mp_emit_bc_load_method>:

void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    a4d0:	b580      	push	{r7, lr}
    a4d2:	b084      	sub	sp, #16
    a4d4:	af00      	add	r7, sp, #0
    a4d6:	60f8      	str	r0, [r7, #12]
    a4d8:	60b9      	str	r1, [r7, #8]
    a4da:	4613      	mov	r3, r2
    a4dc:	71fb      	strb	r3, [r7, #7]
    emit_bc_pre(emit, 1 - 2 * is_super);
    a4de:	79fb      	ldrb	r3, [r7, #7]
    a4e0:	005b      	lsls	r3, r3, #1
    a4e2:	f1c3 0301 	rsb	r3, r3, #1
    a4e6:	4619      	mov	r1, r3
    a4e8:	68f8      	ldr	r0, [r7, #12]
    a4ea:	f7ff fe87 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    a4ee:	79fb      	ldrb	r3, [r7, #7]
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	d001      	beq.n	a4f8 <mp_emit_bc_load_method+0x28>
    a4f4:	231f      	movs	r3, #31
    a4f6:	e000      	b.n	a4fa <mp_emit_bc_load_method+0x2a>
    a4f8:	231e      	movs	r3, #30
    a4fa:	68ba      	ldr	r2, [r7, #8]
    a4fc:	4619      	mov	r1, r3
    a4fe:	68f8      	ldr	r0, [r7, #12]
    a500:	f7ff fbea 	bl	9cd8 <emit_write_bytecode_byte_qstr>
}
    a504:	bf00      	nop
    a506:	3710      	adds	r7, #16
    a508:	46bd      	mov	sp, r7
    a50a:	bd80      	pop	{r7, pc}

0000a50c <mp_emit_bc_load_build_class>:

void mp_emit_bc_load_build_class(emit_t *emit) {
    a50c:	b580      	push	{r7, lr}
    a50e:	b082      	sub	sp, #8
    a510:	af00      	add	r7, sp, #0
    a512:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a514:	2101      	movs	r1, #1
    a516:	6878      	ldr	r0, [r7, #4]
    a518:	f7ff fe70 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    a51c:	2120      	movs	r1, #32
    a51e:	6878      	ldr	r0, [r7, #4]
    a520:	f7ff fb10 	bl	9b44 <emit_write_bytecode_byte>
}
    a524:	bf00      	nop
    a526:	3708      	adds	r7, #8
    a528:	46bd      	mov	sp, r7
    a52a:	bd80      	pop	{r7, pc}

0000a52c <mp_emit_bc_subscr>:

void mp_emit_bc_subscr(emit_t *emit, int kind) {
    a52c:	b580      	push	{r7, lr}
    a52e:	b082      	sub	sp, #8
    a530:	af00      	add	r7, sp, #0
    a532:	6078      	str	r0, [r7, #4]
    a534:	6039      	str	r1, [r7, #0]
    if (kind == MP_EMIT_SUBSCR_LOAD) {
    a536:	683b      	ldr	r3, [r7, #0]
    a538:	2b00      	cmp	r3, #0
    a53a:	d109      	bne.n	a550 <mp_emit_bc_subscr+0x24>
        emit_bc_pre(emit, -1);
    a53c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a540:	6878      	ldr	r0, [r7, #4]
    a542:	f7ff fe5b 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    a546:	2121      	movs	r1, #33	; 0x21
    a548:	6878      	ldr	r0, [r7, #4]
    a54a:	f7ff fafb 	bl	9b44 <emit_write_bytecode_byte>
            mp_emit_bc_rot_three(emit);
        }
        emit_bc_pre(emit, -3);
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    }
}
    a54e:	e011      	b.n	a574 <mp_emit_bc_subscr+0x48>
        if (kind == MP_EMIT_SUBSCR_DELETE) {
    a550:	683b      	ldr	r3, [r7, #0]
    a552:	2b02      	cmp	r3, #2
    a554:	d105      	bne.n	a562 <mp_emit_bc_subscr+0x36>
            mp_emit_bc_load_null(emit);
    a556:	6878      	ldr	r0, [r7, #4]
    a558:	f7ff ff6a 	bl	a430 <mp_emit_bc_load_null>
            mp_emit_bc_rot_three(emit);
    a55c:	6878      	ldr	r0, [r7, #4]
    a55e:	f000 f8e5 	bl	a72c <mp_emit_bc_rot_three>
        emit_bc_pre(emit, -3);
    a562:	f06f 0102 	mvn.w	r1, #2
    a566:	6878      	ldr	r0, [r7, #4]
    a568:	f7ff fe48 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    a56c:	2127      	movs	r1, #39	; 0x27
    a56e:	6878      	ldr	r0, [r7, #4]
    a570:	f7ff fae8 	bl	9b44 <emit_write_bytecode_byte>
}
    a574:	bf00      	nop
    a576:	3708      	adds	r7, #8
    a578:	46bd      	mov	sp, r7
    a57a:	bd80      	pop	{r7, pc}

0000a57c <mp_emit_bc_attr>:

void mp_emit_bc_attr(emit_t *emit, qstr qst, int kind) {
    a57c:	b580      	push	{r7, lr}
    a57e:	b084      	sub	sp, #16
    a580:	af00      	add	r7, sp, #0
    a582:	60f8      	str	r0, [r7, #12]
    a584:	60b9      	str	r1, [r7, #8]
    a586:	607a      	str	r2, [r7, #4]
    if (kind == MP_EMIT_ATTR_LOAD) {
    a588:	687b      	ldr	r3, [r7, #4]
    a58a:	2b00      	cmp	r3, #0
    a58c:	d109      	bne.n	a5a2 <mp_emit_bc_attr+0x26>
        emit_bc_pre(emit, 0);
    a58e:	2100      	movs	r1, #0
    a590:	68f8      	ldr	r0, [r7, #12]
    a592:	f7ff fe33 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    a596:	68ba      	ldr	r2, [r7, #8]
    a598:	211d      	movs	r1, #29
    a59a:	68f8      	ldr	r0, [r7, #12]
    a59c:	f7ff fb9c 	bl	9cd8 <emit_write_bytecode_byte_qstr>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    }
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a5a0:	e012      	b.n	a5c8 <mp_emit_bc_attr+0x4c>
        if (kind == MP_EMIT_ATTR_DELETE) {
    a5a2:	687b      	ldr	r3, [r7, #4]
    a5a4:	2b02      	cmp	r3, #2
    a5a6:	d105      	bne.n	a5b4 <mp_emit_bc_attr+0x38>
            mp_emit_bc_load_null(emit);
    a5a8:	68f8      	ldr	r0, [r7, #12]
    a5aa:	f7ff ff41 	bl	a430 <mp_emit_bc_load_null>
            mp_emit_bc_rot_two(emit);
    a5ae:	68f8      	ldr	r0, [r7, #12]
    a5b0:	f000 f8ac 	bl	a70c <mp_emit_bc_rot_two>
        emit_bc_pre(emit, -2);
    a5b4:	f06f 0101 	mvn.w	r1, #1
    a5b8:	68f8      	ldr	r0, [r7, #12]
    a5ba:	f7ff fe1f 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    a5be:	68ba      	ldr	r2, [r7, #8]
    a5c0:	2126      	movs	r1, #38	; 0x26
    a5c2:	68f8      	ldr	r0, [r7, #12]
    a5c4:	f7ff fb88 	bl	9cd8 <emit_write_bytecode_byte_qstr>
}
    a5c8:	bf00      	nop
    a5ca:	3710      	adds	r7, #16
    a5cc:	46bd      	mov	sp, r7
    a5ce:	bd80      	pop	{r7, pc}

0000a5d0 <mp_emit_bc_store_local>:

void mp_emit_bc_store_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a5d0:	b580      	push	{r7, lr}
    a5d2:	b084      	sub	sp, #16
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	60f8      	str	r0, [r7, #12]
    a5d8:	60b9      	str	r1, [r7, #8]
    a5da:	607a      	str	r2, [r7, #4]
    a5dc:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_STORE_FAST_N);
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_STORE_DEREF);
    (void)qst;
    emit_bc_pre(emit, -1);
    a5de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a5e2:	68f8      	ldr	r0, [r7, #12]
    a5e4:	f7ff fe0a 	bl	a1fc <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a5e8:	683b      	ldr	r3, [r7, #0]
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	d10b      	bne.n	a606 <mp_emit_bc_store_local+0x36>
    a5ee:	687b      	ldr	r3, [r7, #4]
    a5f0:	2b0f      	cmp	r3, #15
    a5f2:	d808      	bhi.n	a606 <mp_emit_bc_store_local+0x36>
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    a5f4:	687b      	ldr	r3, [r7, #4]
    a5f6:	b2db      	uxtb	r3, r3
    a5f8:	3b40      	subs	r3, #64	; 0x40
    a5fa:	b2db      	uxtb	r3, r3
    a5fc:	4619      	mov	r1, r3
    a5fe:	68f8      	ldr	r0, [r7, #12]
    a600:	f7ff faa0 	bl	9b44 <emit_write_bytecode_byte>
    a604:	e008      	b.n	a618 <mp_emit_bc_store_local+0x48>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N + kind, local_num);
    a606:	683b      	ldr	r3, [r7, #0]
    a608:	b2db      	uxtb	r3, r3
    a60a:	3322      	adds	r3, #34	; 0x22
    a60c:	b2db      	uxtb	r3, r3
    a60e:	687a      	ldr	r2, [r7, #4]
    a610:	4619      	mov	r1, r3
    a612:	68f8      	ldr	r0, [r7, #12]
    a614:	f7ff fb2a 	bl	9c6c <emit_write_bytecode_byte_uint>
    }
}
    a618:	bf00      	nop
    a61a:	3710      	adds	r7, #16
    a61c:	46bd      	mov	sp, r7
    a61e:	bd80      	pop	{r7, pc}

0000a620 <mp_emit_bc_store_global>:

void mp_emit_bc_store_global(emit_t *emit, qstr qst, int kind) {
    a620:	b580      	push	{r7, lr}
    a622:	b084      	sub	sp, #16
    a624:	af00      	add	r7, sp, #0
    a626:	60f8      	str	r0, [r7, #12]
    a628:	60b9      	str	r1, [r7, #8]
    a62a:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_STORE_NAME);
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_STORE_GLOBAL);
    emit_bc_pre(emit, -1);
    a62c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a630:	68f8      	ldr	r0, [r7, #12]
    a632:	f7ff fde3 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME + kind, qst);
    a636:	687b      	ldr	r3, [r7, #4]
    a638:	b2db      	uxtb	r3, r3
    a63a:	3324      	adds	r3, #36	; 0x24
    a63c:	b2db      	uxtb	r3, r3
    a63e:	68ba      	ldr	r2, [r7, #8]
    a640:	4619      	mov	r1, r3
    a642:	68f8      	ldr	r0, [r7, #12]
    a644:	f7ff fb48 	bl	9cd8 <emit_write_bytecode_byte_qstr>
}
    a648:	bf00      	nop
    a64a:	3710      	adds	r7, #16
    a64c:	46bd      	mov	sp, r7
    a64e:	bd80      	pop	{r7, pc}

0000a650 <mp_emit_bc_delete_local>:

void mp_emit_bc_delete_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a650:	b580      	push	{r7, lr}
    a652:	b084      	sub	sp, #16
    a654:	af00      	add	r7, sp, #0
    a656:	60f8      	str	r0, [r7, #12]
    a658:	60b9      	str	r1, [r7, #8]
    a65a:	607a      	str	r2, [r7, #4]
    a65c:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_DELETE_FAST);
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_DELETE_DEREF);
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST + kind, local_num);
    a65e:	683b      	ldr	r3, [r7, #0]
    a660:	b2db      	uxtb	r3, r3
    a662:	3328      	adds	r3, #40	; 0x28
    a664:	b2db      	uxtb	r3, r3
    a666:	687a      	ldr	r2, [r7, #4]
    a668:	4619      	mov	r1, r3
    a66a:	68f8      	ldr	r0, [r7, #12]
    a66c:	f7ff fafe 	bl	9c6c <emit_write_bytecode_byte_uint>
}
    a670:	bf00      	nop
    a672:	3710      	adds	r7, #16
    a674:	46bd      	mov	sp, r7
    a676:	bd80      	pop	{r7, pc}

0000a678 <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst, int kind) {
    a678:	b580      	push	{r7, lr}
    a67a:	b084      	sub	sp, #16
    a67c:	af00      	add	r7, sp, #0
    a67e:	60f8      	str	r0, [r7, #12]
    a680:	60b9      	str	r1, [r7, #8]
    a682:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_DELETE_NAME);
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_DELETE_GLOBAL);
    emit_bc_pre(emit, 0);
    a684:	2100      	movs	r1, #0
    a686:	68f8      	ldr	r0, [r7, #12]
    a688:	f7ff fdb8 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME + kind, qst);
    a68c:	687b      	ldr	r3, [r7, #4]
    a68e:	b2db      	uxtb	r3, r3
    a690:	332a      	adds	r3, #42	; 0x2a
    a692:	b2db      	uxtb	r3, r3
    a694:	68ba      	ldr	r2, [r7, #8]
    a696:	4619      	mov	r1, r3
    a698:	68f8      	ldr	r0, [r7, #12]
    a69a:	f7ff fb1d 	bl	9cd8 <emit_write_bytecode_byte_qstr>
}
    a69e:	bf00      	nop
    a6a0:	3710      	adds	r7, #16
    a6a2:	46bd      	mov	sp, r7
    a6a4:	bd80      	pop	{r7, pc}
    a6a6:	bf00      	nop

0000a6a8 <mp_emit_bc_dup_top>:

void mp_emit_bc_dup_top(emit_t *emit) {
    a6a8:	b580      	push	{r7, lr}
    a6aa:	b082      	sub	sp, #8
    a6ac:	af00      	add	r7, sp, #0
    a6ae:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a6b0:	2101      	movs	r1, #1
    a6b2:	6878      	ldr	r0, [r7, #4]
    a6b4:	f7ff fda2 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    a6b8:	2130      	movs	r1, #48	; 0x30
    a6ba:	6878      	ldr	r0, [r7, #4]
    a6bc:	f7ff fa42 	bl	9b44 <emit_write_bytecode_byte>
}
    a6c0:	bf00      	nop
    a6c2:	3708      	adds	r7, #8
    a6c4:	46bd      	mov	sp, r7
    a6c6:	bd80      	pop	{r7, pc}

0000a6c8 <mp_emit_bc_dup_top_two>:

void mp_emit_bc_dup_top_two(emit_t *emit) {
    a6c8:	b580      	push	{r7, lr}
    a6ca:	b082      	sub	sp, #8
    a6cc:	af00      	add	r7, sp, #0
    a6ce:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 2);
    a6d0:	2102      	movs	r1, #2
    a6d2:	6878      	ldr	r0, [r7, #4]
    a6d4:	f7ff fd92 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    a6d8:	2131      	movs	r1, #49	; 0x31
    a6da:	6878      	ldr	r0, [r7, #4]
    a6dc:	f7ff fa32 	bl	9b44 <emit_write_bytecode_byte>
}
    a6e0:	bf00      	nop
    a6e2:	3708      	adds	r7, #8
    a6e4:	46bd      	mov	sp, r7
    a6e6:	bd80      	pop	{r7, pc}

0000a6e8 <mp_emit_bc_pop_top>:

void mp_emit_bc_pop_top(emit_t *emit) {
    a6e8:	b580      	push	{r7, lr}
    a6ea:	b082      	sub	sp, #8
    a6ec:	af00      	add	r7, sp, #0
    a6ee:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a6f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a6f4:	6878      	ldr	r0, [r7, #4]
    a6f6:	f7ff fd81 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a6fa:	2132      	movs	r1, #50	; 0x32
    a6fc:	6878      	ldr	r0, [r7, #4]
    a6fe:	f7ff fa21 	bl	9b44 <emit_write_bytecode_byte>
}
    a702:	bf00      	nop
    a704:	3708      	adds	r7, #8
    a706:	46bd      	mov	sp, r7
    a708:	bd80      	pop	{r7, pc}
    a70a:	bf00      	nop

0000a70c <mp_emit_bc_rot_two>:

void mp_emit_bc_rot_two(emit_t *emit) {
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	af00      	add	r7, sp, #0
    a712:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a714:	2100      	movs	r1, #0
    a716:	6878      	ldr	r0, [r7, #4]
    a718:	f7ff fd70 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    a71c:	2133      	movs	r1, #51	; 0x33
    a71e:	6878      	ldr	r0, [r7, #4]
    a720:	f7ff fa10 	bl	9b44 <emit_write_bytecode_byte>
}
    a724:	bf00      	nop
    a726:	3708      	adds	r7, #8
    a728:	46bd      	mov	sp, r7
    a72a:	bd80      	pop	{r7, pc}

0000a72c <mp_emit_bc_rot_three>:

void mp_emit_bc_rot_three(emit_t *emit) {
    a72c:	b580      	push	{r7, lr}
    a72e:	b082      	sub	sp, #8
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a734:	2100      	movs	r1, #0
    a736:	6878      	ldr	r0, [r7, #4]
    a738:	f7ff fd60 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    a73c:	2134      	movs	r1, #52	; 0x34
    a73e:	6878      	ldr	r0, [r7, #4]
    a740:	f7ff fa00 	bl	9b44 <emit_write_bytecode_byte>
}
    a744:	bf00      	nop
    a746:	3708      	adds	r7, #8
    a748:	46bd      	mov	sp, r7
    a74a:	bd80      	pop	{r7, pc}

0000a74c <mp_emit_bc_jump>:

void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    a74c:	b580      	push	{r7, lr}
    a74e:	b082      	sub	sp, #8
    a750:	af00      	add	r7, sp, #0
    a752:	6078      	str	r0, [r7, #4]
    a754:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a756:	2100      	movs	r1, #0
    a758:	6878      	ldr	r0, [r7, #4]
    a75a:	f7ff fd4f 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    a75e:	683a      	ldr	r2, [r7, #0]
    a760:	2135      	movs	r1, #53	; 0x35
    a762:	6878      	ldr	r0, [r7, #4]
    a764:	f7ff fb5a 	bl	9e1c <emit_write_bytecode_byte_signed_label>
}
    a768:	bf00      	nop
    a76a:	3708      	adds	r7, #8
    a76c:	46bd      	mov	sp, r7
    a76e:	bd80      	pop	{r7, pc}

0000a770 <mp_emit_bc_pop_jump_if>:

void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    a770:	b580      	push	{r7, lr}
    a772:	b084      	sub	sp, #16
    a774:	af00      	add	r7, sp, #0
    a776:	60f8      	str	r0, [r7, #12]
    a778:	460b      	mov	r3, r1
    a77a:	607a      	str	r2, [r7, #4]
    a77c:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a77e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a782:	68f8      	ldr	r0, [r7, #12]
    a784:	f7ff fd3a 	bl	a1fc <emit_bc_pre>
    if (cond) {
    a788:	7afb      	ldrb	r3, [r7, #11]
    a78a:	2b00      	cmp	r3, #0
    a78c:	d005      	beq.n	a79a <mp_emit_bc_pop_jump_if+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    a78e:	687a      	ldr	r2, [r7, #4]
    a790:	2136      	movs	r1, #54	; 0x36
    a792:	68f8      	ldr	r0, [r7, #12]
    a794:	f7ff fb42 	bl	9e1c <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    }
}
    a798:	e004      	b.n	a7a4 <mp_emit_bc_pop_jump_if+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    a79a:	687a      	ldr	r2, [r7, #4]
    a79c:	2137      	movs	r1, #55	; 0x37
    a79e:	68f8      	ldr	r0, [r7, #12]
    a7a0:	f7ff fb3c 	bl	9e1c <emit_write_bytecode_byte_signed_label>
}
    a7a4:	bf00      	nop
    a7a6:	3710      	adds	r7, #16
    a7a8:	46bd      	mov	sp, r7
    a7aa:	bd80      	pop	{r7, pc}

0000a7ac <mp_emit_bc_jump_if_or_pop>:

void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    a7ac:	b580      	push	{r7, lr}
    a7ae:	b084      	sub	sp, #16
    a7b0:	af00      	add	r7, sp, #0
    a7b2:	60f8      	str	r0, [r7, #12]
    a7b4:	460b      	mov	r3, r1
    a7b6:	607a      	str	r2, [r7, #4]
    a7b8:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a7ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7be:	68f8      	ldr	r0, [r7, #12]
    a7c0:	f7ff fd1c 	bl	a1fc <emit_bc_pre>
    if (cond) {
    a7c4:	7afb      	ldrb	r3, [r7, #11]
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	d005      	beq.n	a7d6 <mp_emit_bc_jump_if_or_pop+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    a7ca:	687a      	ldr	r2, [r7, #4]
    a7cc:	2138      	movs	r1, #56	; 0x38
    a7ce:	68f8      	ldr	r0, [r7, #12]
    a7d0:	f7ff fb24 	bl	9e1c <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    }
}
    a7d4:	e004      	b.n	a7e0 <mp_emit_bc_jump_if_or_pop+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    a7d6:	687a      	ldr	r2, [r7, #4]
    a7d8:	2139      	movs	r1, #57	; 0x39
    a7da:	68f8      	ldr	r0, [r7, #12]
    a7dc:	f7ff fb1e 	bl	9e1c <emit_write_bytecode_byte_signed_label>
}
    a7e0:	bf00      	nop
    a7e2:	3710      	adds	r7, #16
    a7e4:	46bd      	mov	sp, r7
    a7e6:	bd80      	pop	{r7, pc}

0000a7e8 <mp_emit_bc_unwind_jump>:

void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    a7e8:	b580      	push	{r7, lr}
    a7ea:	b086      	sub	sp, #24
    a7ec:	af00      	add	r7, sp, #0
    a7ee:	60f8      	str	r0, [r7, #12]
    a7f0:	60b9      	str	r1, [r7, #8]
    a7f2:	607a      	str	r2, [r7, #4]
    if (except_depth == 0) {
    a7f4:	687b      	ldr	r3, [r7, #4]
    a7f6:	2b00      	cmp	r3, #0
    a7f8:	d122      	bne.n	a840 <mp_emit_bc_unwind_jump+0x58>
        emit_bc_pre(emit, 0);
    a7fa:	2100      	movs	r1, #0
    a7fc:	68f8      	ldr	r0, [r7, #12]
    a7fe:	f7ff fcfd 	bl	a1fc <emit_bc_pre>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    a802:	68bb      	ldr	r3, [r7, #8]
    a804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a808:	2b00      	cmp	r3, #0
    a80a:	d010      	beq.n	a82e <mp_emit_bc_unwind_jump+0x46>
            // need to pop the iterator if we are breaking out of a for loop
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a80c:	2132      	movs	r1, #50	; 0x32
    a80e:	68f8      	ldr	r0, [r7, #12]
    a810:	f7ff f998 	bl	9b44 <emit_write_bytecode_byte>
            // also pop the iter_buf
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a814:	2300      	movs	r3, #0
    a816:	617b      	str	r3, [r7, #20]
    a818:	e006      	b.n	a828 <mp_emit_bc_unwind_jump+0x40>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a81a:	2132      	movs	r1, #50	; 0x32
    a81c:	68f8      	ldr	r0, [r7, #12]
    a81e:	f7ff f991 	bl	9b44 <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a822:	697b      	ldr	r3, [r7, #20]
    a824:	3301      	adds	r3, #1
    a826:	617b      	str	r3, [r7, #20]
    a828:	697b      	ldr	r3, [r7, #20]
    a82a:	2b02      	cmp	r3, #2
    a82c:	d9f5      	bls.n	a81a <mp_emit_bc_unwind_jump+0x32>
            }
        }
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a82e:	68bb      	ldr	r3, [r7, #8]
    a830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a834:	461a      	mov	r2, r3
    a836:	2135      	movs	r1, #53	; 0x35
    a838:	68f8      	ldr	r0, [r7, #12]
    a83a:	f7ff faef 	bl	9e1c <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    }
}
    a83e:	e017      	b.n	a870 <mp_emit_bc_unwind_jump+0x88>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a840:	68bb      	ldr	r3, [r7, #8]
    a842:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a846:	461a      	mov	r2, r3
    a848:	2146      	movs	r1, #70	; 0x46
    a84a:	68f8      	ldr	r0, [r7, #12]
    a84c:	f7ff fae6 	bl	9e1c <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    a850:	68bb      	ldr	r3, [r7, #8]
    a852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a856:	2b00      	cmp	r3, #0
    a858:	d001      	beq.n	a85e <mp_emit_bc_unwind_jump+0x76>
    a85a:	2280      	movs	r2, #128	; 0x80
    a85c:	e000      	b.n	a860 <mp_emit_bc_unwind_jump+0x78>
    a85e:	2200      	movs	r2, #0
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	b2db      	uxtb	r3, r3
    a864:	4313      	orrs	r3, r2
    a866:	b2db      	uxtb	r3, r3
    a868:	4619      	mov	r1, r3
    a86a:	68f8      	ldr	r0, [r7, #12]
    a86c:	f7ff f96a 	bl	9b44 <emit_write_bytecode_byte>
}
    a870:	bf00      	nop
    a872:	3718      	adds	r7, #24
    a874:	46bd      	mov	sp, r7
    a876:	bd80      	pop	{r7, pc}

0000a878 <mp_emit_bc_setup_block>:

void mp_emit_bc_setup_block(emit_t *emit, mp_uint_t label, int kind) {
    a878:	b580      	push	{r7, lr}
    a87a:	b084      	sub	sp, #16
    a87c:	af00      	add	r7, sp, #0
    a87e:	60f8      	str	r0, [r7, #12]
    a880:	60b9      	str	r1, [r7, #8]
    a882:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_WITH == MP_BC_SETUP_WITH);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_EXCEPT == MP_BC_SETUP_EXCEPT);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_FINALLY == MP_BC_SETUP_FINALLY);
    if (kind == MP_EMIT_SETUP_BLOCK_WITH) {
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	2b00      	cmp	r3, #0
    a888:	d104      	bne.n	a894 <mp_emit_bc_setup_block+0x1c>
    // The SETUP_WITH opcode pops ctx_mgr from the top of the stack
    // and then pushes 3 entries: __exit__, ctx_mgr, as_value.
        emit_bc_pre(emit, 2);
    a88a:	2102      	movs	r1, #2
    a88c:	68f8      	ldr	r0, [r7, #12]
    a88e:	f7ff fcb5 	bl	a1fc <emit_bc_pre>
    a892:	e003      	b.n	a89c <mp_emit_bc_setup_block+0x24>
    } else {
        emit_bc_pre(emit, 0);
    a894:	2100      	movs	r1, #0
    a896:	68f8      	ldr	r0, [r7, #12]
    a898:	f7ff fcb0 	bl	a1fc <emit_bc_pre>
    }
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH + kind, label);
    a89c:	687b      	ldr	r3, [r7, #4]
    a89e:	b2db      	uxtb	r3, r3
    a8a0:	333d      	adds	r3, #61	; 0x3d
    a8a2:	b2db      	uxtb	r3, r3
    a8a4:	68ba      	ldr	r2, [r7, #8]
    a8a6:	4619      	mov	r1, r3
    a8a8:	68f8      	ldr	r0, [r7, #12]
    a8aa:	f7ff fa87 	bl	9dbc <emit_write_bytecode_byte_unsigned_label>
}
    a8ae:	bf00      	nop
    a8b0:	3710      	adds	r7, #16
    a8b2:	46bd      	mov	sp, r7
    a8b4:	bd80      	pop	{r7, pc}
    a8b6:	bf00      	nop

0000a8b8 <mp_emit_bc_with_cleanup>:

void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    a8b8:	b580      	push	{r7, lr}
    a8ba:	b082      	sub	sp, #8
    a8bc:	af00      	add	r7, sp, #0
    a8be:	6078      	str	r0, [r7, #4]
    a8c0:	6039      	str	r1, [r7, #0]
    mp_emit_bc_pop_block(emit);
    a8c2:	6878      	ldr	r0, [r7, #4]
    a8c4:	f000 f86a 	bl	a99c <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    a8c8:	210e      	movs	r1, #14
    a8ca:	6878      	ldr	r0, [r7, #4]
    a8cc:	f7ff fd2e 	bl	a32c <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    a8d0:	6839      	ldr	r1, [r7, #0]
    a8d2:	6878      	ldr	r0, [r7, #4]
    a8d4:	f7ff fcac 	bl	a230 <mp_emit_bc_label_assign>
    emit_bc_pre(emit, 2); // ensure we have enough stack space to call the __exit__ method
    a8d8:	2102      	movs	r1, #2
    a8da:	6878      	ldr	r0, [r7, #4]
    a8dc:	f7ff fc8e 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    a8e0:	213e      	movs	r1, #62	; 0x3e
    a8e2:	6878      	ldr	r0, [r7, #4]
    a8e4:	f7ff f92e 	bl	9b44 <emit_write_bytecode_byte>
    emit_bc_pre(emit, -4); // cancel the 2 above, plus the 2 from mp_emit_bc_setup_block(MP_EMIT_SETUP_BLOCK_WITH)
    a8e8:	f06f 0103 	mvn.w	r1, #3
    a8ec:	6878      	ldr	r0, [r7, #4]
    a8ee:	f7ff fc85 	bl	a1fc <emit_bc_pre>
}
    a8f2:	bf00      	nop
    a8f4:	3708      	adds	r7, #8
    a8f6:	46bd      	mov	sp, r7
    a8f8:	bd80      	pop	{r7, pc}
    a8fa:	bf00      	nop

0000a8fc <mp_emit_bc_end_finally>:

void mp_emit_bc_end_finally(emit_t *emit) {
    a8fc:	b580      	push	{r7, lr}
    a8fe:	b082      	sub	sp, #8
    a900:	af00      	add	r7, sp, #0
    a902:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a908:	6878      	ldr	r0, [r7, #4]
    a90a:	f7ff fc77 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    a90e:	2141      	movs	r1, #65	; 0x41
    a910:	6878      	ldr	r0, [r7, #4]
    a912:	f7ff f917 	bl	9b44 <emit_write_bytecode_byte>
}
    a916:	bf00      	nop
    a918:	3708      	adds	r7, #8
    a91a:	46bd      	mov	sp, r7
    a91c:	bd80      	pop	{r7, pc}
    a91e:	bf00      	nop

0000a920 <mp_emit_bc_get_iter>:

void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    a920:	b580      	push	{r7, lr}
    a922:	b082      	sub	sp, #8
    a924:	af00      	add	r7, sp, #0
    a926:	6078      	str	r0, [r7, #4]
    a928:	460b      	mov	r3, r1
    a92a:	70fb      	strb	r3, [r7, #3]
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    a92c:	78fb      	ldrb	r3, [r7, #3]
    a92e:	2b00      	cmp	r3, #0
    a930:	d001      	beq.n	a936 <mp_emit_bc_get_iter+0x16>
    a932:	2303      	movs	r3, #3
    a934:	e000      	b.n	a938 <mp_emit_bc_get_iter+0x18>
    a936:	2300      	movs	r3, #0
    a938:	4619      	mov	r1, r3
    a93a:	6878      	ldr	r0, [r7, #4]
    a93c:	f7ff fc5e 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    a940:	78fb      	ldrb	r3, [r7, #3]
    a942:	2b00      	cmp	r3, #0
    a944:	d001      	beq.n	a94a <mp_emit_bc_get_iter+0x2a>
    a946:	2347      	movs	r3, #71	; 0x47
    a948:	e000      	b.n	a94c <mp_emit_bc_get_iter+0x2c>
    a94a:	2342      	movs	r3, #66	; 0x42
    a94c:	4619      	mov	r1, r3
    a94e:	6878      	ldr	r0, [r7, #4]
    a950:	f7ff f8f8 	bl	9b44 <emit_write_bytecode_byte>
}
    a954:	bf00      	nop
    a956:	3708      	adds	r7, #8
    a958:	46bd      	mov	sp, r7
    a95a:	bd80      	pop	{r7, pc}

0000a95c <mp_emit_bc_for_iter>:

void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    a95c:	b580      	push	{r7, lr}
    a95e:	b082      	sub	sp, #8
    a960:	af00      	add	r7, sp, #0
    a962:	6078      	str	r0, [r7, #4]
    a964:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a966:	2101      	movs	r1, #1
    a968:	6878      	ldr	r0, [r7, #4]
    a96a:	f7ff fc47 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    a96e:	683a      	ldr	r2, [r7, #0]
    a970:	2143      	movs	r1, #67	; 0x43
    a972:	6878      	ldr	r0, [r7, #4]
    a974:	f7ff fa22 	bl	9dbc <emit_write_bytecode_byte_unsigned_label>
}
    a978:	bf00      	nop
    a97a:	3708      	adds	r7, #8
    a97c:	46bd      	mov	sp, r7
    a97e:	bd80      	pop	{r7, pc}

0000a980 <mp_emit_bc_for_iter_end>:

void mp_emit_bc_for_iter_end(emit_t *emit) {
    a980:	b580      	push	{r7, lr}
    a982:	b082      	sub	sp, #8
    a984:	af00      	add	r7, sp, #0
    a986:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -MP_OBJ_ITER_BUF_NSLOTS);
    a988:	f06f 0103 	mvn.w	r1, #3
    a98c:	6878      	ldr	r0, [r7, #4]
    a98e:	f7ff fc35 	bl	a1fc <emit_bc_pre>
}
    a992:	bf00      	nop
    a994:	3708      	adds	r7, #8
    a996:	46bd      	mov	sp, r7
    a998:	bd80      	pop	{r7, pc}
    a99a:	bf00      	nop

0000a99c <mp_emit_bc_pop_block>:

void mp_emit_bc_pop_block(emit_t *emit) {
    a99c:	b580      	push	{r7, lr}
    a99e:	b082      	sub	sp, #8
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a9a4:	2100      	movs	r1, #0
    a9a6:	6878      	ldr	r0, [r7, #4]
    a9a8:	f7ff fc28 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    a9ac:	2144      	movs	r1, #68	; 0x44
    a9ae:	6878      	ldr	r0, [r7, #4]
    a9b0:	f7ff f8c8 	bl	9b44 <emit_write_bytecode_byte>
}
    a9b4:	bf00      	nop
    a9b6:	3708      	adds	r7, #8
    a9b8:	46bd      	mov	sp, r7
    a9ba:	bd80      	pop	{r7, pc}

0000a9bc <mp_emit_bc_pop_except>:

void mp_emit_bc_pop_except(emit_t *emit) {
    a9bc:	b580      	push	{r7, lr}
    a9be:	b082      	sub	sp, #8
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a9c4:	2100      	movs	r1, #0
    a9c6:	6878      	ldr	r0, [r7, #4]
    a9c8:	f7ff fc18 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    a9cc:	2145      	movs	r1, #69	; 0x45
    a9ce:	6878      	ldr	r0, [r7, #4]
    a9d0:	f7ff f8b8 	bl	9b44 <emit_write_bytecode_byte>
}
    a9d4:	bf00      	nop
    a9d6:	3708      	adds	r7, #8
    a9d8:	46bd      	mov	sp, r7
    a9da:	bd80      	pop	{r7, pc}

0000a9dc <mp_emit_bc_unary_op>:

void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    a9dc:	b580      	push	{r7, lr}
    a9de:	b082      	sub	sp, #8
    a9e0:	af00      	add	r7, sp, #0
    a9e2:	6078      	str	r0, [r7, #4]
    a9e4:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a9e6:	2100      	movs	r1, #0
    a9e8:	6878      	ldr	r0, [r7, #4]
    a9ea:	f7ff fc07 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    a9ee:	683b      	ldr	r3, [r7, #0]
    a9f0:	b2db      	uxtb	r3, r3
    a9f2:	3b30      	subs	r3, #48	; 0x30
    a9f4:	b2db      	uxtb	r3, r3
    a9f6:	4619      	mov	r1, r3
    a9f8:	6878      	ldr	r0, [r7, #4]
    a9fa:	f7ff f8a3 	bl	9b44 <emit_write_bytecode_byte>
}
    a9fe:	bf00      	nop
    aa00:	3708      	adds	r7, #8
    aa02:	46bd      	mov	sp, r7
    aa04:	bd80      	pop	{r7, pc}
    aa06:	bf00      	nop

0000aa08 <mp_emit_bc_binary_op>:

void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    aa08:	b580      	push	{r7, lr}
    aa0a:	b084      	sub	sp, #16
    aa0c:	af00      	add	r7, sp, #0
    aa0e:	6078      	str	r0, [r7, #4]
    aa10:	6039      	str	r1, [r7, #0]
    bool invert = false;
    aa12:	2300      	movs	r3, #0
    aa14:	73fb      	strb	r3, [r7, #15]
    if (op == MP_BINARY_OP_NOT_IN) {
    aa16:	683b      	ldr	r3, [r7, #0]
    aa18:	2b24      	cmp	r3, #36	; 0x24
    aa1a:	d104      	bne.n	aa26 <mp_emit_bc_binary_op+0x1e>
        invert = true;
    aa1c:	2301      	movs	r3, #1
    aa1e:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IN;
    aa20:	2306      	movs	r3, #6
    aa22:	603b      	str	r3, [r7, #0]
    aa24:	e006      	b.n	aa34 <mp_emit_bc_binary_op+0x2c>
    } else if (op == MP_BINARY_OP_IS_NOT) {
    aa26:	683b      	ldr	r3, [r7, #0]
    aa28:	2b25      	cmp	r3, #37	; 0x25
    aa2a:	d103      	bne.n	aa34 <mp_emit_bc_binary_op+0x2c>
        invert = true;
    aa2c:	2301      	movs	r3, #1
    aa2e:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IS;
    aa30:	2307      	movs	r3, #7
    aa32:	603b      	str	r3, [r7, #0]
    }
    emit_bc_pre(emit, -1);
    aa34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa38:	6878      	ldr	r0, [r7, #4]
    aa3a:	f7ff fbdf 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    aa3e:	683b      	ldr	r3, [r7, #0]
    aa40:	b2db      	uxtb	r3, r3
    aa42:	3b29      	subs	r3, #41	; 0x29
    aa44:	b2db      	uxtb	r3, r3
    aa46:	4619      	mov	r1, r3
    aa48:	6878      	ldr	r0, [r7, #4]
    aa4a:	f7ff f87b 	bl	9b44 <emit_write_bytecode_byte>
    if (invert) {
    aa4e:	7bfb      	ldrb	r3, [r7, #15]
    aa50:	2b00      	cmp	r3, #0
    aa52:	d007      	beq.n	aa64 <mp_emit_bc_binary_op+0x5c>
        emit_bc_pre(emit, 0);
    aa54:	2100      	movs	r1, #0
    aa56:	6878      	ldr	r0, [r7, #4]
    aa58:	f7ff fbd0 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    aa5c:	21d3      	movs	r1, #211	; 0xd3
    aa5e:	6878      	ldr	r0, [r7, #4]
    aa60:	f7ff f870 	bl	9b44 <emit_write_bytecode_byte>
    }
}
    aa64:	bf00      	nop
    aa66:	3710      	adds	r7, #16
    aa68:	46bd      	mov	sp, r7
    aa6a:	bd80      	pop	{r7, pc}

0000aa6c <mp_emit_bc_build>:

void mp_emit_bc_build(emit_t *emit, mp_uint_t n_args, int kind) {
    aa6c:	b580      	push	{r7, lr}
    aa6e:	b084      	sub	sp, #16
    aa70:	af00      	add	r7, sp, #0
    aa72:	60f8      	str	r0, [r7, #12]
    aa74:	60b9      	str	r1, [r7, #8]
    aa76:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_TUPLE == MP_BC_BUILD_TUPLE);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_LIST == MP_BC_BUILD_LIST);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_MAP == MP_BC_BUILD_MAP);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SET == MP_BC_BUILD_SET);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SLICE == MP_BC_BUILD_SLICE);
    if (kind == MP_EMIT_BUILD_MAP) {
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	2b03      	cmp	r3, #3
    aa7c:	d104      	bne.n	aa88 <mp_emit_bc_build+0x1c>
        emit_bc_pre(emit, 1);
    aa7e:	2101      	movs	r1, #1
    aa80:	68f8      	ldr	r0, [r7, #12]
    aa82:	f7ff fbbb 	bl	a1fc <emit_bc_pre>
    aa86:	e006      	b.n	aa96 <mp_emit_bc_build+0x2a>
    } else {
        emit_bc_pre(emit, 1 - n_args);
    aa88:	68bb      	ldr	r3, [r7, #8]
    aa8a:	f1c3 0301 	rsb	r3, r3, #1
    aa8e:	4619      	mov	r1, r3
    aa90:	68f8      	ldr	r0, [r7, #12]
    aa92:	f7ff fbb3 	bl	a1fc <emit_bc_pre>
    }
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE + kind, n_args);
    aa96:	687b      	ldr	r3, [r7, #4]
    aa98:	b2db      	uxtb	r3, r3
    aa9a:	3350      	adds	r3, #80	; 0x50
    aa9c:	b2db      	uxtb	r3, r3
    aa9e:	68ba      	ldr	r2, [r7, #8]
    aaa0:	4619      	mov	r1, r3
    aaa2:	68f8      	ldr	r0, [r7, #12]
    aaa4:	f7ff f8e2 	bl	9c6c <emit_write_bytecode_byte_uint>
}
    aaa8:	bf00      	nop
    aaaa:	3710      	adds	r7, #16
    aaac:	46bd      	mov	sp, r7
    aaae:	bd80      	pop	{r7, pc}

0000aab0 <mp_emit_bc_store_map>:

void mp_emit_bc_store_map(emit_t *emit) {
    aab0:	b580      	push	{r7, lr}
    aab2:	b082      	sub	sp, #8
    aab4:	af00      	add	r7, sp, #0
    aab6:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -2);
    aab8:	f06f 0101 	mvn.w	r1, #1
    aabc:	6878      	ldr	r0, [r7, #4]
    aabe:	f7ff fb9d 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    aac2:	2154      	movs	r1, #84	; 0x54
    aac4:	6878      	ldr	r0, [r7, #4]
    aac6:	f7ff f83d 	bl	9b44 <emit_write_bytecode_byte>
}
    aaca:	bf00      	nop
    aacc:	3708      	adds	r7, #8
    aace:	46bd      	mov	sp, r7
    aad0:	bd80      	pop	{r7, pc}
    aad2:	bf00      	nop

0000aad4 <mp_emit_bc_store_comp>:

void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    aad4:	b580      	push	{r7, lr}
    aad6:	b086      	sub	sp, #24
    aad8:	af00      	add	r7, sp, #0
    aada:	60f8      	str	r0, [r7, #12]
    aadc:	60b9      	str	r1, [r7, #8]
    aade:	607a      	str	r2, [r7, #4]
    int t;
    int n;
    if (kind == SCOPE_LIST_COMP) {
    aae0:	68bb      	ldr	r3, [r7, #8]
    aae2:	2b03      	cmp	r3, #3
    aae4:	d104      	bne.n	aaf0 <mp_emit_bc_store_comp+0x1c>
        n = 0;
    aae6:	2300      	movs	r3, #0
    aae8:	613b      	str	r3, [r7, #16]
        t = 0;
    aaea:	2300      	movs	r3, #0
    aaec:	617b      	str	r3, [r7, #20]
    aaee:	e003      	b.n	aaf8 <mp_emit_bc_store_comp+0x24>
    } else if (!MICROPY_PY_BUILTINS_SET || kind == SCOPE_DICT_COMP) {
        n = 1;
    aaf0:	2301      	movs	r3, #1
    aaf2:	613b      	str	r3, [r7, #16]
        t = 1;
    aaf4:	2301      	movs	r3, #1
    aaf6:	617b      	str	r3, [r7, #20]
    } else if (MICROPY_PY_BUILTINS_SET) {
        n = 0;
        t = 2;
    }
    emit_bc_pre(emit, -1 - n);
    aaf8:	693b      	ldr	r3, [r7, #16]
    aafa:	43db      	mvns	r3, r3
    aafc:	4619      	mov	r1, r3
    aafe:	68f8      	ldr	r0, [r7, #12]
    ab00:	f7ff fb7c 	bl	a1fc <emit_bc_pre>
    // the lower 2 bits of the opcode argument indicate the collection type
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    ab04:	693a      	ldr	r2, [r7, #16]
    ab06:	687b      	ldr	r3, [r7, #4]
    ab08:	4413      	add	r3, r2
    ab0a:	009a      	lsls	r2, r3, #2
    ab0c:	697b      	ldr	r3, [r7, #20]
    ab0e:	4313      	orrs	r3, r2
    ab10:	461a      	mov	r2, r3
    ab12:	2157      	movs	r1, #87	; 0x57
    ab14:	68f8      	ldr	r0, [r7, #12]
    ab16:	f7ff f8a9 	bl	9c6c <emit_write_bytecode_byte_uint>
}
    ab1a:	bf00      	nop
    ab1c:	3718      	adds	r7, #24
    ab1e:	46bd      	mov	sp, r7
    ab20:	bd80      	pop	{r7, pc}
    ab22:	bf00      	nop

0000ab24 <mp_emit_bc_unpack_sequence>:

void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    ab24:	b580      	push	{r7, lr}
    ab26:	b082      	sub	sp, #8
    ab28:	af00      	add	r7, sp, #0
    ab2a:	6078      	str	r0, [r7, #4]
    ab2c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1 + n_args);
    ab2e:	683b      	ldr	r3, [r7, #0]
    ab30:	3b01      	subs	r3, #1
    ab32:	4619      	mov	r1, r3
    ab34:	6878      	ldr	r0, [r7, #4]
    ab36:	f7ff fb61 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    ab3a:	683a      	ldr	r2, [r7, #0]
    ab3c:	2159      	movs	r1, #89	; 0x59
    ab3e:	6878      	ldr	r0, [r7, #4]
    ab40:	f7ff f894 	bl	9c6c <emit_write_bytecode_byte_uint>
}
    ab44:	bf00      	nop
    ab46:	3708      	adds	r7, #8
    ab48:	46bd      	mov	sp, r7
    ab4a:	bd80      	pop	{r7, pc}

0000ab4c <mp_emit_bc_unpack_ex>:

void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    ab4c:	b580      	push	{r7, lr}
    ab4e:	b084      	sub	sp, #16
    ab50:	af00      	add	r7, sp, #0
    ab52:	60f8      	str	r0, [r7, #12]
    ab54:	60b9      	str	r1, [r7, #8]
    ab56:	607a      	str	r2, [r7, #4]
    emit_bc_pre(emit, -1 + n_left + n_right + 1);
    ab58:	68ba      	ldr	r2, [r7, #8]
    ab5a:	687b      	ldr	r3, [r7, #4]
    ab5c:	4413      	add	r3, r2
    ab5e:	4619      	mov	r1, r3
    ab60:	68f8      	ldr	r0, [r7, #12]
    ab62:	f7ff fb4b 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    ab66:	687b      	ldr	r3, [r7, #4]
    ab68:	021a      	lsls	r2, r3, #8
    ab6a:	68bb      	ldr	r3, [r7, #8]
    ab6c:	4313      	orrs	r3, r2
    ab6e:	461a      	mov	r2, r3
    ab70:	215a      	movs	r1, #90	; 0x5a
    ab72:	68f8      	ldr	r0, [r7, #12]
    ab74:	f7ff f87a 	bl	9c6c <emit_write_bytecode_byte_uint>
}
    ab78:	bf00      	nop
    ab7a:	3710      	adds	r7, #16
    ab7c:	46bd      	mov	sp, r7
    ab7e:	bd80      	pop	{r7, pc}

0000ab80 <mp_emit_bc_make_function>:

void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ab80:	b580      	push	{r7, lr}
    ab82:	b084      	sub	sp, #16
    ab84:	af00      	add	r7, sp, #0
    ab86:	60f8      	str	r0, [r7, #12]
    ab88:	60b9      	str	r1, [r7, #8]
    ab8a:	607a      	str	r2, [r7, #4]
    ab8c:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ab8e:	687b      	ldr	r3, [r7, #4]
    ab90:	2b00      	cmp	r3, #0
    ab92:	d10e      	bne.n	abb2 <mp_emit_bc_make_function+0x32>
    ab94:	683b      	ldr	r3, [r7, #0]
    ab96:	2b00      	cmp	r3, #0
    ab98:	d10b      	bne.n	abb2 <mp_emit_bc_make_function+0x32>
        emit_bc_pre(emit, 1);
    ab9a:	2101      	movs	r1, #1
    ab9c:	68f8      	ldr	r0, [r7, #12]
    ab9e:	f7ff fb2d 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    aba2:	68bb      	ldr	r3, [r7, #8]
    aba4:	695b      	ldr	r3, [r3, #20]
    aba6:	461a      	mov	r2, r3
    aba8:	2160      	movs	r1, #96	; 0x60
    abaa:	68f8      	ldr	r0, [r7, #12]
    abac:	f7ff f8e2 	bl	9d74 <emit_write_bytecode_byte_raw_code>
    abb0:	e00b      	b.n	abca <mp_emit_bc_make_function+0x4a>
    } else {
        emit_bc_pre(emit, -1);
    abb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    abb6:	68f8      	ldr	r0, [r7, #12]
    abb8:	f7ff fb20 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    abbc:	68bb      	ldr	r3, [r7, #8]
    abbe:	695b      	ldr	r3, [r3, #20]
    abc0:	461a      	mov	r2, r3
    abc2:	2161      	movs	r1, #97	; 0x61
    abc4:	68f8      	ldr	r0, [r7, #12]
    abc6:	f7ff f8d5 	bl	9d74 <emit_write_bytecode_byte_raw_code>
    }
}
    abca:	bf00      	nop
    abcc:	3710      	adds	r7, #16
    abce:	46bd      	mov	sp, r7
    abd0:	bd80      	pop	{r7, pc}
    abd2:	bf00      	nop

0000abd4 <mp_emit_bc_make_closure>:

void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    abd4:	b580      	push	{r7, lr}
    abd6:	b084      	sub	sp, #16
    abd8:	af00      	add	r7, sp, #0
    abda:	60f8      	str	r0, [r7, #12]
    abdc:	60b9      	str	r1, [r7, #8]
    abde:	607a      	str	r2, [r7, #4]
    abe0:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    abe2:	683b      	ldr	r3, [r7, #0]
    abe4:	2b00      	cmp	r3, #0
    abe6:	d117      	bne.n	ac18 <mp_emit_bc_make_closure+0x44>
    abe8:	69bb      	ldr	r3, [r7, #24]
    abea:	2b00      	cmp	r3, #0
    abec:	d114      	bne.n	ac18 <mp_emit_bc_make_closure+0x44>
        emit_bc_pre(emit, -n_closed_over + 1);
    abee:	687b      	ldr	r3, [r7, #4]
    abf0:	f1c3 0301 	rsb	r3, r3, #1
    abf4:	4619      	mov	r1, r3
    abf6:	68f8      	ldr	r0, [r7, #12]
    abf8:	f7ff fb00 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    abfc:	68bb      	ldr	r3, [r7, #8]
    abfe:	695b      	ldr	r3, [r3, #20]
    ac00:	461a      	mov	r2, r3
    ac02:	2162      	movs	r1, #98	; 0x62
    ac04:	68f8      	ldr	r0, [r7, #12]
    ac06:	f7ff f8b5 	bl	9d74 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ac0a:	687b      	ldr	r3, [r7, #4]
    ac0c:	b2db      	uxtb	r3, r3
    ac0e:	4619      	mov	r1, r3
    ac10:	68f8      	ldr	r0, [r7, #12]
    ac12:	f7fe ff97 	bl	9b44 <emit_write_bytecode_byte>
    ac16:	e01c      	b.n	ac52 <mp_emit_bc_make_closure+0x7e>
    } else {
        assert(n_closed_over <= 255);
    ac18:	687b      	ldr	r3, [r7, #4]
    ac1a:	2bff      	cmp	r3, #255	; 0xff
    ac1c:	d906      	bls.n	ac2c <mp_emit_bc_make_closure+0x58>
    ac1e:	4b0f      	ldr	r3, [pc, #60]	; (ac5c <mp_emit_bc_make_closure+0x88>)
    ac20:	4a0f      	ldr	r2, [pc, #60]	; (ac60 <mp_emit_bc_make_closure+0x8c>)
    ac22:	f240 315b 	movw	r1, #859	; 0x35b
    ac26:	480f      	ldr	r0, [pc, #60]	; (ac64 <mp_emit_bc_make_closure+0x90>)
    ac28:	f010 fbb8 	bl	1b39c <__assert_func>
        emit_bc_pre(emit, -2 - (mp_int_t)n_closed_over + 1);
    ac2c:	687b      	ldr	r3, [r7, #4]
    ac2e:	43db      	mvns	r3, r3
    ac30:	4619      	mov	r1, r3
    ac32:	68f8      	ldr	r0, [r7, #12]
    ac34:	f7ff fae2 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    ac38:	68bb      	ldr	r3, [r7, #8]
    ac3a:	695b      	ldr	r3, [r3, #20]
    ac3c:	461a      	mov	r2, r3
    ac3e:	2163      	movs	r1, #99	; 0x63
    ac40:	68f8      	ldr	r0, [r7, #12]
    ac42:	f7ff f897 	bl	9d74 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	b2db      	uxtb	r3, r3
    ac4a:	4619      	mov	r1, r3
    ac4c:	68f8      	ldr	r0, [r7, #12]
    ac4e:	f7fe ff79 	bl	9b44 <emit_write_bytecode_byte>
    }
}
    ac52:	bf00      	nop
    ac54:	3710      	adds	r7, #16
    ac56:	46bd      	mov	sp, r7
    ac58:	bd80      	pop	{r7, pc}
    ac5a:	bf00      	nop
    ac5c:	0001f378 	.word	0x0001f378
    ac60:	0001f4b0 	.word	0x0001f4b0
    ac64:	0001f1dc 	.word	0x0001f1dc

0000ac68 <emit_bc_call_function_method_helper>:

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ac68:	b580      	push	{r7, lr}
    ac6a:	b084      	sub	sp, #16
    ac6c:	af00      	add	r7, sp, #0
    ac6e:	60f8      	str	r0, [r7, #12]
    ac70:	60b9      	str	r1, [r7, #8]
    ac72:	607a      	str	r2, [r7, #4]
    ac74:	603b      	str	r3, [r7, #0]
    if (star_flags) {
    ac76:	69fb      	ldr	r3, [r7, #28]
    ac78:	2b00      	cmp	r3, #0
    ac7a:	d017      	beq.n	acac <emit_bc_call_function_method_helper+0x44>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    ac7c:	683b      	ldr	r3, [r7, #0]
    ac7e:	68ba      	ldr	r2, [r7, #8]
    ac80:	1ad2      	subs	r2, r2, r3
    ac82:	69bb      	ldr	r3, [r7, #24]
    ac84:	005b      	lsls	r3, r3, #1
    ac86:	1ad3      	subs	r3, r2, r3
    ac88:	3b02      	subs	r3, #2
    ac8a:	4619      	mov	r1, r3
    ac8c:	68f8      	ldr	r0, [r7, #12]
    ac8e:	f7ff fab5 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    ac92:	687b      	ldr	r3, [r7, #4]
    ac94:	b2db      	uxtb	r3, r3
    ac96:	3301      	adds	r3, #1
    ac98:	b2d9      	uxtb	r1, r3
    ac9a:	69bb      	ldr	r3, [r7, #24]
    ac9c:	021a      	lsls	r2, r3, #8
    ac9e:	683b      	ldr	r3, [r7, #0]
    aca0:	4313      	orrs	r3, r2
    aca2:	461a      	mov	r2, r3
    aca4:	68f8      	ldr	r0, [r7, #12]
    aca6:	f7fe ffe1 	bl	9c6c <emit_write_bytecode_byte_uint>
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    }
}
    acaa:	e013      	b.n	acd4 <emit_bc_call_function_method_helper+0x6c>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    acac:	683b      	ldr	r3, [r7, #0]
    acae:	68ba      	ldr	r2, [r7, #8]
    acb0:	1ad2      	subs	r2, r2, r3
    acb2:	69bb      	ldr	r3, [r7, #24]
    acb4:	005b      	lsls	r3, r3, #1
    acb6:	1ad3      	subs	r3, r2, r3
    acb8:	4619      	mov	r1, r3
    acba:	68f8      	ldr	r0, [r7, #12]
    acbc:	f7ff fa9e 	bl	a1fc <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    acc0:	687b      	ldr	r3, [r7, #4]
    acc2:	b2d9      	uxtb	r1, r3
    acc4:	69bb      	ldr	r3, [r7, #24]
    acc6:	021a      	lsls	r2, r3, #8
    acc8:	683b      	ldr	r3, [r7, #0]
    acca:	4313      	orrs	r3, r2
    accc:	461a      	mov	r2, r3
    acce:	68f8      	ldr	r0, [r7, #12]
    acd0:	f7fe ffcc 	bl	9c6c <emit_write_bytecode_byte_uint>
}
    acd4:	bf00      	nop
    acd6:	3710      	adds	r7, #16
    acd8:	46bd      	mov	sp, r7
    acda:	bd80      	pop	{r7, pc}

0000acdc <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    acdc:	b580      	push	{r7, lr}
    acde:	b086      	sub	sp, #24
    ace0:	af02      	add	r7, sp, #8
    ace2:	60f8      	str	r0, [r7, #12]
    ace4:	60b9      	str	r1, [r7, #8]
    ace6:	607a      	str	r2, [r7, #4]
    ace8:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    acea:	683b      	ldr	r3, [r7, #0]
    acec:	9301      	str	r3, [sp, #4]
    acee:	687b      	ldr	r3, [r7, #4]
    acf0:	9300      	str	r3, [sp, #0]
    acf2:	68bb      	ldr	r3, [r7, #8]
    acf4:	2264      	movs	r2, #100	; 0x64
    acf6:	2100      	movs	r1, #0
    acf8:	68f8      	ldr	r0, [r7, #12]
    acfa:	f7ff ffb5 	bl	ac68 <emit_bc_call_function_method_helper>
}
    acfe:	bf00      	nop
    ad00:	3710      	adds	r7, #16
    ad02:	46bd      	mov	sp, r7
    ad04:	bd80      	pop	{r7, pc}
    ad06:	bf00      	nop

0000ad08 <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ad08:	b580      	push	{r7, lr}
    ad0a:	b086      	sub	sp, #24
    ad0c:	af02      	add	r7, sp, #8
    ad0e:	60f8      	str	r0, [r7, #12]
    ad10:	60b9      	str	r1, [r7, #8]
    ad12:	607a      	str	r2, [r7, #4]
    ad14:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    ad16:	683b      	ldr	r3, [r7, #0]
    ad18:	9301      	str	r3, [sp, #4]
    ad1a:	687b      	ldr	r3, [r7, #4]
    ad1c:	9300      	str	r3, [sp, #0]
    ad1e:	68bb      	ldr	r3, [r7, #8]
    ad20:	2266      	movs	r2, #102	; 0x66
    ad22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad26:	68f8      	ldr	r0, [r7, #12]
    ad28:	f7ff ff9e 	bl	ac68 <emit_bc_call_function_method_helper>
}
    ad2c:	bf00      	nop
    ad2e:	3710      	adds	r7, #16
    ad30:	46bd      	mov	sp, r7
    ad32:	bd80      	pop	{r7, pc}

0000ad34 <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    ad34:	b580      	push	{r7, lr}
    ad36:	b082      	sub	sp, #8
    ad38:	af00      	add	r7, sp, #0
    ad3a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    ad3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad40:	6878      	ldr	r0, [r7, #4]
    ad42:	f7ff fa5b 	bl	a1fc <emit_bc_pre>
    emit->last_emit_was_return_value = true;
    ad46:	687b      	ldr	r3, [r7, #4]
    ad48:	2201      	movs	r2, #1
    ad4a:	719a      	strb	r2, [r3, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    ad4c:	215b      	movs	r1, #91	; 0x5b
    ad4e:	6878      	ldr	r0, [r7, #4]
    ad50:	f7fe fef8 	bl	9b44 <emit_write_bytecode_byte>
}
    ad54:	bf00      	nop
    ad56:	3708      	adds	r7, #8
    ad58:	46bd      	mov	sp, r7
    ad5a:	bd80      	pop	{r7, pc}

0000ad5c <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    ad5c:	b580      	push	{r7, lr}
    ad5e:	b082      	sub	sp, #8
    ad60:	af00      	add	r7, sp, #0
    ad62:	6078      	str	r0, [r7, #4]
    ad64:	6039      	str	r1, [r7, #0]
    assert(n_args <= 2);
    ad66:	683b      	ldr	r3, [r7, #0]
    ad68:	2b02      	cmp	r3, #2
    ad6a:	d906      	bls.n	ad7a <mp_emit_bc_raise_varargs+0x1e>
    ad6c:	4b0b      	ldr	r3, [pc, #44]	; (ad9c <mp_emit_bc_raise_varargs+0x40>)
    ad6e:	4a0c      	ldr	r2, [pc, #48]	; (ada0 <mp_emit_bc_raise_varargs+0x44>)
    ad70:	f240 317b 	movw	r1, #891	; 0x37b
    ad74:	480b      	ldr	r0, [pc, #44]	; (ada4 <mp_emit_bc_raise_varargs+0x48>)
    ad76:	f010 fb11 	bl	1b39c <__assert_func>
    emit_bc_pre(emit, -n_args);
    ad7a:	683b      	ldr	r3, [r7, #0]
    ad7c:	425b      	negs	r3, r3
    ad7e:	4619      	mov	r1, r3
    ad80:	6878      	ldr	r0, [r7, #4]
    ad82:	f7ff fa3b 	bl	a1fc <emit_bc_pre>
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    ad86:	683b      	ldr	r3, [r7, #0]
    ad88:	b2db      	uxtb	r3, r3
    ad8a:	461a      	mov	r2, r3
    ad8c:	215c      	movs	r1, #92	; 0x5c
    ad8e:	6878      	ldr	r0, [r7, #4]
    ad90:	f7fe feea 	bl	9b68 <emit_write_bytecode_byte_byte>
}
    ad94:	bf00      	nop
    ad96:	3708      	adds	r7, #8
    ad98:	46bd      	mov	sp, r7
    ad9a:	bd80      	pop	{r7, pc}
    ad9c:	0001f390 	.word	0x0001f390
    ada0:	0001f4c8 	.word	0x0001f4c8
    ada4:	0001f1dc 	.word	0x0001f1dc

0000ada8 <mp_emit_bc_yield>:

void mp_emit_bc_yield(emit_t *emit, int kind) {
    ada8:	b580      	push	{r7, lr}
    adaa:	b082      	sub	sp, #8
    adac:	af00      	add	r7, sp, #0
    adae:	6078      	str	r0, [r7, #4]
    adb0:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_YIELD_VALUE + 1 == MP_BC_YIELD_FROM);
    emit_bc_pre(emit, -kind);
    adb2:	683b      	ldr	r3, [r7, #0]
    adb4:	425b      	negs	r3, r3
    adb6:	4619      	mov	r1, r3
    adb8:	6878      	ldr	r0, [r7, #4]
    adba:	f7ff fa1f 	bl	a1fc <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    adbe:	687b      	ldr	r3, [r7, #4]
    adc0:	68db      	ldr	r3, [r3, #12]
    adc2:	687a      	ldr	r2, [r7, #4]
    adc4:	68d2      	ldr	r2, [r2, #12]
    adc6:	7e12      	ldrb	r2, [r2, #24]
    adc8:	f042 0204 	orr.w	r2, r2, #4
    adcc:	b2d2      	uxtb	r2, r2
    adce:	761a      	strb	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE + kind);
    add0:	683b      	ldr	r3, [r7, #0]
    add2:	b2db      	uxtb	r3, r3
    add4:	335d      	adds	r3, #93	; 0x5d
    add6:	b2db      	uxtb	r3, r3
    add8:	4619      	mov	r1, r3
    adda:	6878      	ldr	r0, [r7, #4]
    addc:	f7fe feb2 	bl	9b44 <emit_write_bytecode_byte>
}
    ade0:	bf00      	nop
    ade2:	3708      	adds	r7, #8
    ade4:	46bd      	mov	sp, r7
    ade6:	bd80      	pop	{r7, pc}

0000ade8 <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    ade8:	b580      	push	{r7, lr}
    adea:	b082      	sub	sp, #8
    adec:	af00      	add	r7, sp, #0
    adee:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    adf0:	2104      	movs	r1, #4
    adf2:	6878      	ldr	r0, [r7, #4]
    adf4:	f7ff f9ca 	bl	a18c <mp_emit_bc_adjust_stack_size>
}
    adf8:	bf00      	nop
    adfa:	3708      	adds	r7, #8
    adfc:	46bd      	mov	sp, r7
    adfe:	bd80      	pop	{r7, pc}

0000ae00 <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    ae00:	b580      	push	{r7, lr}
    ae02:	b082      	sub	sp, #8
    ae04:	af00      	add	r7, sp, #0
    ae06:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    ae08:	f06f 0102 	mvn.w	r1, #2
    ae0c:	6878      	ldr	r0, [r7, #4]
    ae0e:	f7ff f9bd 	bl	a18c <mp_emit_bc_adjust_stack_size>
}
    ae12:	bf00      	nop
    ae14:	3708      	adds	r7, #8
    ae16:	46bd      	mov	sp, r7
    ae18:	bd80      	pop	{r7, pc}
    ae1a:	bf00      	nop

0000ae1c <mp_parse_num_base>:
#include "py/misc.h"
#include "py/parsenumbase.h"

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    ae1c:	b480      	push	{r7}
    ae1e:	b087      	sub	sp, #28
    ae20:	af00      	add	r7, sp, #0
    ae22:	60f8      	str	r0, [r7, #12]
    ae24:	60b9      	str	r1, [r7, #8]
    ae26:	607a      	str	r2, [r7, #4]
    const byte *p = (const byte*)str;
    ae28:	68fb      	ldr	r3, [r7, #12]
    ae2a:	617b      	str	r3, [r7, #20]
    if (len <= 1) {
    ae2c:	68bb      	ldr	r3, [r7, #8]
    ae2e:	2b01      	cmp	r3, #1
    ae30:	d971      	bls.n	af16 <mp_parse_num_base+0xfa>
        goto no_prefix;
    }
    unichar c = *(p++);
    ae32:	697b      	ldr	r3, [r7, #20]
    ae34:	1c5a      	adds	r2, r3, #1
    ae36:	617a      	str	r2, [r7, #20]
    ae38:	781b      	ldrb	r3, [r3, #0]
    ae3a:	613b      	str	r3, [r7, #16]
    if ((*base == 0 || *base == 16) && c == '0') {
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	681b      	ldr	r3, [r3, #0]
    ae40:	2b00      	cmp	r3, #0
    ae42:	d003      	beq.n	ae4c <mp_parse_num_base+0x30>
    ae44:	687b      	ldr	r3, [r7, #4]
    ae46:	681b      	ldr	r3, [r3, #0]
    ae48:	2b10      	cmp	r3, #16
    ae4a:	d136      	bne.n	aeba <mp_parse_num_base+0x9e>
    ae4c:	693b      	ldr	r3, [r7, #16]
    ae4e:	2b30      	cmp	r3, #48	; 0x30
    ae50:	d133      	bne.n	aeba <mp_parse_num_base+0x9e>
        c = *(p++);
    ae52:	697b      	ldr	r3, [r7, #20]
    ae54:	1c5a      	adds	r2, r3, #1
    ae56:	617a      	str	r2, [r7, #20]
    ae58:	781b      	ldrb	r3, [r3, #0]
    ae5a:	613b      	str	r3, [r7, #16]
        if ((c | 32) == 'x') {
    ae5c:	693b      	ldr	r3, [r7, #16]
    ae5e:	f043 0320 	orr.w	r3, r3, #32
    ae62:	2b78      	cmp	r3, #120	; 0x78
    ae64:	d103      	bne.n	ae6e <mp_parse_num_base+0x52>
            *base = 16;
    ae66:	687b      	ldr	r3, [r7, #4]
    ae68:	2210      	movs	r2, #16
    ae6a:	601a      	str	r2, [r3, #0]
        if ((c | 32) == 'x') {
    ae6c:	e05b      	b.n	af26 <mp_parse_num_base+0x10a>
        } else if (*base == 0 && (c | 32) == 'o') {
    ae6e:	687b      	ldr	r3, [r7, #4]
    ae70:	681b      	ldr	r3, [r3, #0]
    ae72:	2b00      	cmp	r3, #0
    ae74:	d108      	bne.n	ae88 <mp_parse_num_base+0x6c>
    ae76:	693b      	ldr	r3, [r7, #16]
    ae78:	f043 0320 	orr.w	r3, r3, #32
    ae7c:	2b6f      	cmp	r3, #111	; 0x6f
    ae7e:	d103      	bne.n	ae88 <mp_parse_num_base+0x6c>
            *base = 8;
    ae80:	687b      	ldr	r3, [r7, #4]
    ae82:	2208      	movs	r2, #8
    ae84:	601a      	str	r2, [r3, #0]
    ae86:	e017      	b.n	aeb8 <mp_parse_num_base+0x9c>
        } else if (*base == 0 && (c | 32) == 'b') {
    ae88:	687b      	ldr	r3, [r7, #4]
    ae8a:	681b      	ldr	r3, [r3, #0]
    ae8c:	2b00      	cmp	r3, #0
    ae8e:	d108      	bne.n	aea2 <mp_parse_num_base+0x86>
    ae90:	693b      	ldr	r3, [r7, #16]
    ae92:	f043 0320 	orr.w	r3, r3, #32
    ae96:	2b62      	cmp	r3, #98	; 0x62
    ae98:	d103      	bne.n	aea2 <mp_parse_num_base+0x86>
            *base = 2;
    ae9a:	687b      	ldr	r3, [r7, #4]
    ae9c:	2202      	movs	r2, #2
    ae9e:	601a      	str	r2, [r3, #0]
    aea0:	e00a      	b.n	aeb8 <mp_parse_num_base+0x9c>
        } else {
            if (*base == 0) {
    aea2:	687b      	ldr	r3, [r7, #4]
    aea4:	681b      	ldr	r3, [r3, #0]
    aea6:	2b00      	cmp	r3, #0
    aea8:	d102      	bne.n	aeb0 <mp_parse_num_base+0x94>
                *base = 10;
    aeaa:	687b      	ldr	r3, [r7, #4]
    aeac:	220a      	movs	r2, #10
    aeae:	601a      	str	r2, [r3, #0]
            }
            p -= 2;
    aeb0:	697b      	ldr	r3, [r7, #20]
    aeb2:	3b02      	subs	r3, #2
    aeb4:	617b      	str	r3, [r7, #20]
        if ((c | 32) == 'x') {
    aeb6:	e036      	b.n	af26 <mp_parse_num_base+0x10a>
    aeb8:	e035      	b.n	af26 <mp_parse_num_base+0x10a>
        }
    } else if (*base == 8 && c == '0') {
    aeba:	687b      	ldr	r3, [r7, #4]
    aebc:	681b      	ldr	r3, [r3, #0]
    aebe:	2b08      	cmp	r3, #8
    aec0:	d110      	bne.n	aee4 <mp_parse_num_base+0xc8>
    aec2:	693b      	ldr	r3, [r7, #16]
    aec4:	2b30      	cmp	r3, #48	; 0x30
    aec6:	d10d      	bne.n	aee4 <mp_parse_num_base+0xc8>
        c = *(p++);
    aec8:	697b      	ldr	r3, [r7, #20]
    aeca:	1c5a      	adds	r2, r3, #1
    aecc:	617a      	str	r2, [r7, #20]
    aece:	781b      	ldrb	r3, [r3, #0]
    aed0:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'o') {
    aed2:	693b      	ldr	r3, [r7, #16]
    aed4:	f043 0320 	orr.w	r3, r3, #32
    aed8:	2b6f      	cmp	r3, #111	; 0x6f
    aeda:	d024      	beq.n	af26 <mp_parse_num_base+0x10a>
            p -= 2;
    aedc:	697b      	ldr	r3, [r7, #20]
    aede:	3b02      	subs	r3, #2
    aee0:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'o') {
    aee2:	e020      	b.n	af26 <mp_parse_num_base+0x10a>
        }
    } else if (*base == 2 && c == '0') {
    aee4:	687b      	ldr	r3, [r7, #4]
    aee6:	681b      	ldr	r3, [r3, #0]
    aee8:	2b02      	cmp	r3, #2
    aeea:	d110      	bne.n	af0e <mp_parse_num_base+0xf2>
    aeec:	693b      	ldr	r3, [r7, #16]
    aeee:	2b30      	cmp	r3, #48	; 0x30
    aef0:	d10d      	bne.n	af0e <mp_parse_num_base+0xf2>
        c = *(p++);
    aef2:	697b      	ldr	r3, [r7, #20]
    aef4:	1c5a      	adds	r2, r3, #1
    aef6:	617a      	str	r2, [r7, #20]
    aef8:	781b      	ldrb	r3, [r3, #0]
    aefa:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'b') {
    aefc:	693b      	ldr	r3, [r7, #16]
    aefe:	f043 0320 	orr.w	r3, r3, #32
    af02:	2b62      	cmp	r3, #98	; 0x62
    af04:	d00f      	beq.n	af26 <mp_parse_num_base+0x10a>
            p -= 2;
    af06:	697b      	ldr	r3, [r7, #20]
    af08:	3b02      	subs	r3, #2
    af0a:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'b') {
    af0c:	e00b      	b.n	af26 <mp_parse_num_base+0x10a>
        }
    } else {
        p--;
    af0e:	697b      	ldr	r3, [r7, #20]
    af10:	3b01      	subs	r3, #1
    af12:	617b      	str	r3, [r7, #20]
    af14:	e000      	b.n	af18 <mp_parse_num_base+0xfc>
        goto no_prefix;
    af16:	bf00      	nop
    no_prefix:
        if (*base == 0) {
    af18:	687b      	ldr	r3, [r7, #4]
    af1a:	681b      	ldr	r3, [r3, #0]
    af1c:	2b00      	cmp	r3, #0
    af1e:	d102      	bne.n	af26 <mp_parse_num_base+0x10a>
            *base = 10;
    af20:	687b      	ldr	r3, [r7, #4]
    af22:	220a      	movs	r2, #10
    af24:	601a      	str	r2, [r3, #0]
        }
    }
    return p - (const byte*)str;
    af26:	697a      	ldr	r2, [r7, #20]
    af28:	68fb      	ldr	r3, [r7, #12]
    af2a:	1ad3      	subs	r3, r2, r3
}
    af2c:	4618      	mov	r0, r3
    af2e:	371c      	adds	r7, #28
    af30:	46bd      	mov	sp, r7
    af32:	f85d 7b04 	ldr.w	r7, [sp], #4
    af36:	4770      	bx	lr

0000af38 <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    af38:	b580      	push	{r7, lr}
    af3a:	b082      	sub	sp, #8
    af3c:	af00      	add	r7, sp, #0
    af3e:	6078      	str	r0, [r7, #4]
    af40:	6039      	str	r1, [r7, #0]
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    af42:	683b      	ldr	r3, [r7, #0]
    af44:	2b00      	cmp	r3, #0
    af46:	d00a      	beq.n	af5e <raise_exc+0x26>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    af48:	687b      	ldr	r3, [r7, #4]
    af4a:	4a06      	ldr	r2, [pc, #24]	; (af64 <raise_exc+0x2c>)
    af4c:	601a      	str	r2, [r3, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    af4e:	683b      	ldr	r3, [r7, #0]
    af50:	6819      	ldr	r1, [r3, #0]
    af52:	683b      	ldr	r3, [r7, #0]
    af54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    af56:	2300      	movs	r3, #0
    af58:	6878      	ldr	r0, [r7, #4]
    af5a:	f004 fc87 	bl	f86c <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    af5e:	6878      	ldr	r0, [r7, #4]
    af60:	f7f5 f9be 	bl	2e0 <nlr_jump>
    af64:	000206d0 	.word	0x000206d0

0000af68 <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    af68:	b580      	push	{r7, lr}
    af6a:	b094      	sub	sp, #80	; 0x50
    af6c:	af00      	add	r7, sp, #0
    af6e:	60f8      	str	r0, [r7, #12]
    af70:	60b9      	str	r1, [r7, #8]
    af72:	607a      	str	r2, [r7, #4]
    af74:	603b      	str	r3, [r7, #0]
    const byte *restrict str = (const byte *)str_;
    af76:	68fb      	ldr	r3, [r7, #12]
    af78:	64fb      	str	r3, [r7, #76]	; 0x4c
    const byte *restrict top = str + len;
    af7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    af7c:	68bb      	ldr	r3, [r7, #8]
    af7e:	4413      	add	r3, r2
    af80:	63bb      	str	r3, [r7, #56]	; 0x38
    bool neg = false;
    af82:	2300      	movs	r3, #0
    af84:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    af88:	687b      	ldr	r3, [r7, #4]
    af8a:	2b00      	cmp	r3, #0
    af8c:	d002      	beq.n	af94 <mp_parse_num_integer+0x2c>
    af8e:	687b      	ldr	r3, [r7, #4]
    af90:	2b01      	cmp	r3, #1
    af92:	dd02      	ble.n	af9a <mp_parse_num_integer+0x32>
    af94:	687b      	ldr	r3, [r7, #4]
    af96:	2b24      	cmp	r3, #36	; 0x24
    af98:	dd05      	ble.n	afa6 <mp_parse_num_integer+0x3e>
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    af9a:	4864      	ldr	r0, [pc, #400]	; (b12c <mp_parse_num_integer+0x1c4>)
    af9c:	f001 fff2 	bl	cf84 <mp_raise_ValueError>
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    afa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afa2:	3301      	adds	r3, #1
    afa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    afa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    afaa:	429a      	cmp	r2, r3
    afac:	d207      	bcs.n	afbe <mp_parse_num_integer+0x56>
    afae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afb0:	781b      	ldrb	r3, [r3, #0]
    afb2:	4618      	mov	r0, r3
    afb4:	f7f7 f9f2 	bl	239c <unichar_isspace>
    afb8:	4603      	mov	r3, r0
    afba:	2b00      	cmp	r3, #0
    afbc:	d1f0      	bne.n	afa0 <mp_parse_num_integer+0x38>
    }

    // parse optional sign
    if (str < top) {
    afbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    afc2:	429a      	cmp	r2, r3
    afc4:	d211      	bcs.n	afea <mp_parse_num_integer+0x82>
        if (*str == '+') {
    afc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afc8:	781b      	ldrb	r3, [r3, #0]
    afca:	2b2b      	cmp	r3, #43	; 0x2b
    afcc:	d103      	bne.n	afd6 <mp_parse_num_integer+0x6e>
            str++;
    afce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afd0:	3301      	adds	r3, #1
    afd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    afd4:	e009      	b.n	afea <mp_parse_num_integer+0x82>
        } else if (*str == '-') {
    afd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afd8:	781b      	ldrb	r3, [r3, #0]
    afda:	2b2d      	cmp	r3, #45	; 0x2d
    afdc:	d105      	bne.n	afea <mp_parse_num_integer+0x82>
            str++;
    afde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afe0:	3301      	adds	r3, #1
    afe2:	64fb      	str	r3, [r7, #76]	; 0x4c
            neg = true;
    afe4:	2301      	movs	r3, #1
    afe6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    afea:	6bba      	ldr	r2, [r7, #56]	; 0x38
    afec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afee:	1ad3      	subs	r3, r2, r3
    aff0:	4619      	mov	r1, r3
    aff2:	1d3b      	adds	r3, r7, #4
    aff4:	461a      	mov	r2, r3
    aff6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    aff8:	f7ff ff10 	bl	ae1c <mp_parse_num_base>
    affc:	4602      	mov	r2, r0
    affe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b000:	4413      	add	r3, r2
    b002:	64fb      	str	r3, [r7, #76]	; 0x4c

    // string should be an integer number
    mp_int_t int_val = 0;
    b004:	2300      	movs	r3, #0
    b006:	643b      	str	r3, [r7, #64]	; 0x40
    const byte *restrict str_val_start = str;
    b008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b00a:	637b      	str	r3, [r7, #52]	; 0x34
    for (; str < top; str++) {
    b00c:	e03c      	b.n	b088 <mp_parse_num_integer+0x120>
        // get next digit as a value
        mp_uint_t dig = *str;
    b00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b010:	781b      	ldrb	r3, [r3, #0]
    b012:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ('0' <= dig && dig <= '9') {
    b014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b016:	2b2f      	cmp	r3, #47	; 0x2f
    b018:	d906      	bls.n	b028 <mp_parse_num_integer+0xc0>
    b01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b01c:	2b39      	cmp	r3, #57	; 0x39
    b01e:	d803      	bhi.n	b028 <mp_parse_num_integer+0xc0>
            dig -= '0';
    b020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b022:	3b30      	subs	r3, #48	; 0x30
    b024:	63fb      	str	r3, [r7, #60]	; 0x3c
    b026:	e00f      	b.n	b048 <mp_parse_num_integer+0xe0>
        } else if (dig == '_') {
    b028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b02a:	2b5f      	cmp	r3, #95	; 0x5f
    b02c:	d028      	beq.n	b080 <mp_parse_num_integer+0x118>
            continue;
        } else {
            dig |= 0x20; // make digit lower-case
    b02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b030:	f043 0320 	orr.w	r3, r3, #32
    b034:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ('a' <= dig && dig <= 'z') {
    b036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b038:	2b60      	cmp	r3, #96	; 0x60
    b03a:	d92b      	bls.n	b094 <mp_parse_num_integer+0x12c>
    b03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b03e:	2b7a      	cmp	r3, #122	; 0x7a
    b040:	d828      	bhi.n	b094 <mp_parse_num_integer+0x12c>
                dig -= 'a' - 10;
    b042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b044:	3b57      	subs	r3, #87	; 0x57
    b046:	63fb      	str	r3, [r7, #60]	; 0x3c
            } else {
                // unknown character
                break;
            }
        }
        if (dig >= (mp_uint_t)base) {
    b048:	687b      	ldr	r3, [r7, #4]
    b04a:	461a      	mov	r2, r3
    b04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b04e:	4293      	cmp	r3, r2
    b050:	d21f      	bcs.n	b092 <mp_parse_num_integer+0x12a>
            break;
        }

        // add next digi and check for overflow
        if (mp_small_int_mul_overflow(int_val, base)) {
    b052:	687b      	ldr	r3, [r7, #4]
    b054:	4619      	mov	r1, r3
    b056:	6c38      	ldr	r0, [r7, #64]	; 0x40
    b058:	f00f ffd2 	bl	1b000 <mp_small_int_mul_overflow>
    b05c:	4603      	mov	r3, r0
    b05e:	2b00      	cmp	r3, #0
    b060:	d13e      	bne.n	b0e0 <mp_parse_num_integer+0x178>
            goto overflow;
        }
        int_val = int_val * base + dig;
    b062:	687b      	ldr	r3, [r7, #4]
    b064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b066:	fb02 f303 	mul.w	r3, r2, r3
    b06a:	461a      	mov	r2, r3
    b06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b06e:	4413      	add	r3, r2
    b070:	643b      	str	r3, [r7, #64]	; 0x40
        if (!MP_SMALL_INT_FITS(int_val)) {
    b072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b074:	005a      	lsls	r2, r3, #1
    b076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b078:	4053      	eors	r3, r2
    b07a:	2b00      	cmp	r3, #0
    b07c:	db32      	blt.n	b0e4 <mp_parse_num_integer+0x17c>
    b07e:	e000      	b.n	b082 <mp_parse_num_integer+0x11a>
            continue;
    b080:	bf00      	nop
    for (; str < top; str++) {
    b082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b084:	3301      	adds	r3, #1
    b086:	64fb      	str	r3, [r7, #76]	; 0x4c
    b088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b08c:	429a      	cmp	r2, r3
    b08e:	d3be      	bcc.n	b00e <mp_parse_num_integer+0xa6>
    b090:	e000      	b.n	b094 <mp_parse_num_integer+0x12c>
            break;
    b092:	bf00      	nop
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    b094:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    b098:	2b00      	cmp	r3, #0
    b09a:	d002      	beq.n	b0a2 <mp_parse_num_integer+0x13a>
        int_val = -int_val;
    b09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b09e:	425b      	negs	r3, r3
    b0a0:	643b      	str	r3, [r7, #64]	; 0x40
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    b0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0a4:	005b      	lsls	r3, r3, #1
    b0a6:	f043 0301 	orr.w	r3, r3, #1
    b0aa:	647b      	str	r3, [r7, #68]	; 0x44

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    b0ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b0b0:	429a      	cmp	r2, r3
    b0b2:	d02a      	beq.n	b10a <mp_parse_num_integer+0x1a2>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    b0b4:	e002      	b.n	b0bc <mp_parse_num_integer+0x154>
    b0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0b8:	3301      	adds	r3, #1
    b0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    b0bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0c0:	429a      	cmp	r2, r3
    b0c2:	d207      	bcs.n	b0d4 <mp_parse_num_integer+0x16c>
    b0c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0c6:	781b      	ldrb	r3, [r3, #0]
    b0c8:	4618      	mov	r0, r3
    b0ca:	f7f7 f967 	bl	239c <unichar_isspace>
    b0ce:	4603      	mov	r3, r0
    b0d0:	2b00      	cmp	r3, #0
    b0d2:	d1f0      	bne.n	b0b6 <mp_parse_num_integer+0x14e>
    }

    // check we reached the end of the string
    if (str != top) {
    b0d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0d8:	429a      	cmp	r2, r3
    b0da:	d118      	bne.n	b10e <mp_parse_num_integer+0x1a6>
        goto value_error;
    }

    // return the object
    return ret_val;
    b0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b0de:	e020      	b.n	b122 <mp_parse_num_integer+0x1ba>
            goto overflow;
    b0e0:	bf00      	nop
    b0e2:	e000      	b.n	b0e6 <mp_parse_num_integer+0x17e>
            goto overflow;
    b0e4:	bf00      	nop

overflow:
    // reparse using long int
    {
        const char *s2 = (const char*)str_val_start;
    b0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    b0ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b0ee:	1ad3      	subs	r3, r2, r3
    b0f0:	4619      	mov	r1, r3
    b0f2:	687b      	ldr	r3, [r7, #4]
    b0f4:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
    b0f8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    b0fc:	f005 fbf4 	bl	108e8 <mp_obj_new_int_from_str_len>
    b100:	6478      	str	r0, [r7, #68]	; 0x44
        str = (const byte*)s2;
    b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b104:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto have_ret_val;
    b106:	bf00      	nop
    b108:	e7d0      	b.n	b0ac <mp_parse_num_integer+0x144>
        goto value_error;
    b10a:	bf00      	nop
    b10c:	e000      	b.n	b110 <mp_parse_num_integer+0x1a8>
        goto value_error;
    b10e:	bf00      	nop
    }

value_error:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
    b110:	4907      	ldr	r1, [pc, #28]	; (b130 <mp_parse_num_integer+0x1c8>)
    b112:	4808      	ldr	r0, [pc, #32]	; (b134 <mp_parse_num_integer+0x1cc>)
    b114:	f004 fa0e 	bl	f534 <mp_obj_new_exception_msg>
    b118:	6338      	str	r0, [r7, #48]	; 0x30
            "invalid syntax for integer");
        raise_exc(exc, lex);
    b11a:	6839      	ldr	r1, [r7, #0]
    b11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b11e:	f7ff ff0b 	bl	af38 <raise_exc>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    b122:	4618      	mov	r0, r3
    b124:	3750      	adds	r7, #80	; 0x50
    b126:	46bd      	mov	sp, r7
    b128:	bd80      	pop	{r7, pc}
    b12a:	bf00      	nop
    b12c:	0001f4e4 	.word	0x0001f4e4
    b130:	0001f508 	.word	0x0001f508
    b134:	00020784 	.word	0x00020784

0000b138 <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    b138:	b580      	push	{r7, lr}
    b13a:	b084      	sub	sp, #16
    b13c:	af00      	add	r7, sp, #0
    b13e:	60f8      	str	r0, [r7, #12]
    b140:	60b9      	str	r1, [r7, #8]
    b142:	4611      	mov	r1, r2
    b144:	461a      	mov	r2, r3
    b146:	460b      	mov	r3, r1
    b148:	71fb      	strb	r3, [r7, #7]
    b14a:	4613      	mov	r3, r2
    b14c:	71bb      	strb	r3, [r7, #6]

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
    b14e:	4904      	ldr	r1, [pc, #16]	; (b160 <mp_parse_num_decimal+0x28>)
    b150:	4804      	ldr	r0, [pc, #16]	; (b164 <mp_parse_num_decimal+0x2c>)
    b152:	f004 f9ef 	bl	f534 <mp_obj_new_exception_msg>
    b156:	4603      	mov	r3, r0
    b158:	69b9      	ldr	r1, [r7, #24]
    b15a:	4618      	mov	r0, r3
    b15c:	f7ff feec 	bl	af38 <raise_exc>
    b160:	0001f524 	.word	0x0001f524
    b164:	00020784 	.word	0x00020784

0000b168 <MP_OBJ_IS_OBJ>:
    b168:	b480      	push	{r7}
    b16a:	b083      	sub	sp, #12
    b16c:	af00      	add	r7, sp, #0
    b16e:	6078      	str	r0, [r7, #4]
    b170:	687b      	ldr	r3, [r7, #4]
    b172:	f003 0303 	and.w	r3, r3, #3
    b176:	2b00      	cmp	r3, #0
    b178:	bf0c      	ite	eq
    b17a:	2301      	moveq	r3, #1
    b17c:	2300      	movne	r3, #0
    b17e:	b2db      	uxtb	r3, r3
    b180:	4618      	mov	r0, r3
    b182:	370c      	adds	r7, #12
    b184:	46bd      	mov	sp, r7
    b186:	f85d 7b04 	ldr.w	r7, [sp], #4
    b18a:	4770      	bx	lr

0000b18c <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    b18c:	b580      	push	{r7, lr}
    b18e:	b082      	sub	sp, #8
    b190:	af00      	add	r7, sp, #0
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    b192:	2010      	movs	r0, #16
    b194:	f7f5 f8e8 	bl	368 <m_malloc0>
    b198:	6078      	str	r0, [r7, #4]
    rc->kind = MP_CODE_RESERVED;
    b19a:	687a      	ldr	r2, [r7, #4]
    b19c:	7813      	ldrb	r3, [r2, #0]
    b19e:	2101      	movs	r1, #1
    b1a0:	f361 0302 	bfi	r3, r1, #0, #3
    b1a4:	7013      	strb	r3, [r2, #0]
    return rc;
    b1a6:	687b      	ldr	r3, [r7, #4]
}
    b1a8:	4618      	mov	r0, r3
    b1aa:	3708      	adds	r7, #8
    b1ac:	46bd      	mov	sp, r7
    b1ae:	bd80      	pop	{r7, pc}

0000b1b0 <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    b1b0:	b480      	push	{r7}
    b1b2:	b085      	sub	sp, #20
    b1b4:	af00      	add	r7, sp, #0
    b1b6:	60f8      	str	r0, [r7, #12]
    b1b8:	60b9      	str	r1, [r7, #8]
    b1ba:	607a      	str	r2, [r7, #4]
    b1bc:	603b      	str	r3, [r7, #0]

    rc->kind = MP_CODE_BYTECODE;
    b1be:	68fa      	ldr	r2, [r7, #12]
    b1c0:	7813      	ldrb	r3, [r2, #0]
    b1c2:	2102      	movs	r1, #2
    b1c4:	f361 0302 	bfi	r3, r1, #0, #3
    b1c8:	7013      	strb	r3, [r2, #0]
    rc->scope_flags = scope_flags;
    b1ca:	683b      	ldr	r3, [r7, #0]
    b1cc:	b2db      	uxtb	r3, r3
    b1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b1d2:	b2d9      	uxtb	r1, r3
    b1d4:	68fa      	ldr	r2, [r7, #12]
    b1d6:	8813      	ldrh	r3, [r2, #0]
    b1d8:	f361 03c9 	bfi	r3, r1, #3, #7
    b1dc:	8013      	strh	r3, [r2, #0]
    rc->data.u_byte.bytecode = code;
    b1de:	68fb      	ldr	r3, [r7, #12]
    b1e0:	68ba      	ldr	r2, [r7, #8]
    b1e2:	605a      	str	r2, [r3, #4]
    rc->data.u_byte.const_table = const_table;
    b1e4:	68fb      	ldr	r3, [r7, #12]
    b1e6:	687a      	ldr	r2, [r7, #4]
    b1e8:	609a      	str	r2, [r3, #8]
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
        mp_bytecode_print(rc, code, len, const_table);
    }
#endif
}
    b1ea:	bf00      	nop
    b1ec:	3714      	adds	r7, #20
    b1ee:	46bd      	mov	sp, r7
    b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1f4:	4770      	bx	lr
    b1f6:	bf00      	nop

0000b1f8 <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    b1f8:	b580      	push	{r7, lr}
    b1fa:	b086      	sub	sp, #24
    b1fc:	af00      	add	r7, sp, #0
    b1fe:	60f8      	str	r0, [r7, #12]
    b200:	60b9      	str	r1, [r7, #8]
    b202:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    assert(rc != NULL);
    b204:	68fb      	ldr	r3, [r7, #12]
    b206:	2b00      	cmp	r3, #0
    b208:	d105      	bne.n	b216 <mp_make_function_from_raw_code+0x1e>
    b20a:	4b30      	ldr	r3, [pc, #192]	; (b2cc <mp_make_function_from_raw_code+0xd4>)
    b20c:	4a30      	ldr	r2, [pc, #192]	; (b2d0 <mp_make_function_from_raw_code+0xd8>)
    b20e:	2179      	movs	r1, #121	; 0x79
    b210:	4830      	ldr	r0, [pc, #192]	; (b2d4 <mp_make_function_from_raw_code+0xdc>)
    b212:	f010 f8c3 	bl	1b39c <__assert_func>

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    b216:	68bb      	ldr	r3, [r7, #8]
    b218:	2b00      	cmp	r3, #0
    b21a:	d013      	beq.n	b244 <mp_make_function_from_raw_code+0x4c>
    b21c:	68b8      	ldr	r0, [r7, #8]
    b21e:	f7ff ffa3 	bl	b168 <MP_OBJ_IS_OBJ>
    b222:	4603      	mov	r3, r0
    b224:	f083 0301 	eor.w	r3, r3, #1
    b228:	b2db      	uxtb	r3, r3
    b22a:	2b00      	cmp	r3, #0
    b22c:	d104      	bne.n	b238 <mp_make_function_from_raw_code+0x40>
    b22e:	68bb      	ldr	r3, [r7, #8]
    b230:	681b      	ldr	r3, [r3, #0]
    b232:	4a29      	ldr	r2, [pc, #164]	; (b2d8 <mp_make_function_from_raw_code+0xe0>)
    b234:	4293      	cmp	r3, r2
    b236:	d005      	beq.n	b244 <mp_make_function_from_raw_code+0x4c>
    b238:	4b28      	ldr	r3, [pc, #160]	; (b2dc <mp_make_function_from_raw_code+0xe4>)
    b23a:	4a25      	ldr	r2, [pc, #148]	; (b2d0 <mp_make_function_from_raw_code+0xd8>)
    b23c:	217c      	movs	r1, #124	; 0x7c
    b23e:	4825      	ldr	r0, [pc, #148]	; (b2d4 <mp_make_function_from_raw_code+0xdc>)
    b240:	f010 f8ac 	bl	1b39c <__assert_func>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    b244:	687b      	ldr	r3, [r7, #4]
    b246:	2b00      	cmp	r3, #0
    b248:	d013      	beq.n	b272 <mp_make_function_from_raw_code+0x7a>
    b24a:	6878      	ldr	r0, [r7, #4]
    b24c:	f7ff ff8c 	bl	b168 <MP_OBJ_IS_OBJ>
    b250:	4603      	mov	r3, r0
    b252:	f083 0301 	eor.w	r3, r3, #1
    b256:	b2db      	uxtb	r3, r3
    b258:	2b00      	cmp	r3, #0
    b25a:	d104      	bne.n	b266 <mp_make_function_from_raw_code+0x6e>
    b25c:	687b      	ldr	r3, [r7, #4]
    b25e:	681b      	ldr	r3, [r3, #0]
    b260:	4a1f      	ldr	r2, [pc, #124]	; (b2e0 <mp_make_function_from_raw_code+0xe8>)
    b262:	4293      	cmp	r3, r2
    b264:	d005      	beq.n	b272 <mp_make_function_from_raw_code+0x7a>
    b266:	4b1f      	ldr	r3, [pc, #124]	; (b2e4 <mp_make_function_from_raw_code+0xec>)
    b268:	4a19      	ldr	r2, [pc, #100]	; (b2d0 <mp_make_function_from_raw_code+0xd8>)
    b26a:	217f      	movs	r1, #127	; 0x7f
    b26c:	4819      	ldr	r0, [pc, #100]	; (b2d4 <mp_make_function_from_raw_code+0xdc>)
    b26e:	f010 f895 	bl	1b39c <__assert_func>

    // make the function, depending on the raw code kind
    mp_obj_t fun;
    switch (rc->kind) {
    b272:	68fb      	ldr	r3, [r7, #12]
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	f3c3 0302 	ubfx	r3, r3, #0, #3
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    b27a:	68fb      	ldr	r3, [r7, #12]
    b27c:	781b      	ldrb	r3, [r3, #0]
    b27e:	f003 0307 	and.w	r3, r3, #7
    b282:	b2db      	uxtb	r3, r3
    b284:	2b02      	cmp	r3, #2
    b286:	d005      	beq.n	b294 <mp_make_function_from_raw_code+0x9c>
    b288:	4b17      	ldr	r3, [pc, #92]	; (b2e8 <mp_make_function_from_raw_code+0xf0>)
    b28a:	4a11      	ldr	r2, [pc, #68]	; (b2d0 <mp_make_function_from_raw_code+0xd8>)
    b28c:	2193      	movs	r1, #147	; 0x93
    b28e:	4811      	ldr	r0, [pc, #68]	; (b2d4 <mp_make_function_from_raw_code+0xdc>)
    b290:	f010 f884 	bl	1b39c <__assert_func>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    b294:	68fb      	ldr	r3, [r7, #12]
    b296:	685a      	ldr	r2, [r3, #4]
    b298:	68fb      	ldr	r3, [r7, #12]
    b29a:	689b      	ldr	r3, [r3, #8]
    b29c:	6879      	ldr	r1, [r7, #4]
    b29e:	68b8      	ldr	r0, [r7, #8]
    b2a0:	f004 fdfa 	bl	fe98 <mp_obj_new_fun_bc>
    b2a4:	6178      	str	r0, [r7, #20]
            // check for generator functions and if so change the type of the object
            if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    b2a6:	68fb      	ldr	r3, [r7, #12]
    b2a8:	881b      	ldrh	r3, [r3, #0]
    b2aa:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    b2ae:	b2db      	uxtb	r3, r3
    b2b0:	f003 0304 	and.w	r3, r3, #4
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	d002      	beq.n	b2be <mp_make_function_from_raw_code+0xc6>
                ((mp_obj_base_t*)MP_OBJ_TO_PTR(fun))->type = &mp_type_gen_wrap;
    b2b8:	697b      	ldr	r3, [r7, #20]
    b2ba:	4a0c      	ldr	r2, [pc, #48]	; (b2ec <mp_make_function_from_raw_code+0xf4>)
    b2bc:	601a      	str	r2, [r3, #0]
            }
            break;
    b2be:	bf00      	nop
    }

    return fun;
    b2c0:	697b      	ldr	r3, [r7, #20]
}
    b2c2:	4618      	mov	r0, r3
    b2c4:	3718      	adds	r7, #24
    b2c6:	46bd      	mov	sp, r7
    b2c8:	bd80      	pop	{r7, pc}
    b2ca:	bf00      	nop
    b2cc:	0001f544 	.word	0x0001f544
    b2d0:	0001f614 	.word	0x0001f614
    b2d4:	0001f550 	.word	0x0001f550
    b2d8:	00021db4 	.word	0x00021db4
    b2dc:	0001f564 	.word	0x0001f564
    b2e0:	000200e0 	.word	0x000200e0
    b2e4:	0001f5a8 	.word	0x0001f5a8
    b2e8:	0001f5f4 	.word	0x0001f5f4
    b2ec:	00020c2c 	.word	0x00020c2c

0000b2f0 <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    b2f0:	b580      	push	{r7, lr}
    b2f2:	b086      	sub	sp, #24
    b2f4:	af00      	add	r7, sp, #0
    b2f6:	60f8      	str	r0, [r7, #12]
    b2f8:	60b9      	str	r1, [r7, #8]
    b2fa:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    b2fc:	68bb      	ldr	r3, [r7, #8]
    b2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b302:	2b00      	cmp	r3, #0
    b304:	d00a      	beq.n	b31c <mp_make_closure_from_raw_code+0x2c>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    b306:	687b      	ldr	r3, [r7, #4]
    b308:	6819      	ldr	r1, [r3, #0]
    b30a:	687b      	ldr	r3, [r7, #4]
    b30c:	3304      	adds	r3, #4
    b30e:	681b      	ldr	r3, [r3, #0]
    b310:	461a      	mov	r2, r3
    b312:	68f8      	ldr	r0, [r7, #12]
    b314:	f7ff ff70 	bl	b1f8 <mp_make_function_from_raw_code>
    b318:	6178      	str	r0, [r7, #20]
    b31a:	e005      	b.n	b328 <mp_make_closure_from_raw_code+0x38>
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    b31c:	2200      	movs	r2, #0
    b31e:	2100      	movs	r1, #0
    b320:	68f8      	ldr	r0, [r7, #12]
    b322:	f7ff ff69 	bl	b1f8 <mp_make_function_from_raw_code>
    b326:	6178      	str	r0, [r7, #20]
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    b328:	68bb      	ldr	r3, [r7, #8]
    b32a:	b2d9      	uxtb	r1, r3
    b32c:	68bb      	ldr	r3, [r7, #8]
    b32e:	09db      	lsrs	r3, r3, #7
    b330:	f003 0302 	and.w	r3, r3, #2
    b334:	009b      	lsls	r3, r3, #2
    b336:	687a      	ldr	r2, [r7, #4]
    b338:	4413      	add	r3, r2
    b33a:	461a      	mov	r2, r3
    b33c:	6978      	ldr	r0, [r7, #20]
    b33e:	f003 f82b 	bl	e398 <mp_obj_new_closure>
    b342:	4603      	mov	r3, r0
}
    b344:	4618      	mov	r0, r3
    b346:	3718      	adds	r7, #24
    b348:	46bd      	mov	sp, r7
    b34a:	bd80      	pop	{r7, pc}

0000b34c <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    b34c:	b480      	push	{r7}
    b34e:	b083      	sub	sp, #12
    b350:	af00      	add	r7, sp, #0
    b352:	6078      	str	r0, [r7, #4]
    b354:	687b      	ldr	r3, [r7, #4]
    b356:	f003 0301 	and.w	r3, r3, #1
    b35a:	2b00      	cmp	r3, #0
    b35c:	bf14      	ite	ne
    b35e:	2301      	movne	r3, #1
    b360:	2300      	moveq	r3, #0
    b362:	b2db      	uxtb	r3, r3
    b364:	4618      	mov	r0, r3
    b366:	370c      	adds	r7, #12
    b368:	46bd      	mov	sp, r7
    b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b36e:	4770      	bx	lr

0000b370 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    b370:	b480      	push	{r7}
    b372:	b083      	sub	sp, #12
    b374:	af00      	add	r7, sp, #0
    b376:	6078      	str	r0, [r7, #4]
    b378:	687b      	ldr	r3, [r7, #4]
    b37a:	f003 0303 	and.w	r3, r3, #3
    b37e:	2b02      	cmp	r3, #2
    b380:	bf0c      	ite	eq
    b382:	2301      	moveq	r3, #1
    b384:	2300      	movne	r3, #0
    b386:	b2db      	uxtb	r3, r3
    b388:	4618      	mov	r0, r3
    b38a:	370c      	adds	r7, #12
    b38c:	46bd      	mov	sp, r7
    b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b392:	4770      	bx	lr

0000b394 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    b394:	b480      	push	{r7}
    b396:	b083      	sub	sp, #12
    b398:	af00      	add	r7, sp, #0
    b39a:	6078      	str	r0, [r7, #4]
    b39c:	687b      	ldr	r3, [r7, #4]
    b39e:	f003 0303 	and.w	r3, r3, #3
    b3a2:	2b00      	cmp	r3, #0
    b3a4:	bf0c      	ite	eq
    b3a6:	2301      	moveq	r3, #1
    b3a8:	2300      	movne	r3, #0
    b3aa:	b2db      	uxtb	r3, r3
    b3ac:	4618      	mov	r0, r3
    b3ae:	370c      	adds	r7, #12
    b3b0:	46bd      	mov	sp, r7
    b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3b6:	4770      	bx	lr

0000b3b8 <MP_MAP_SLOT_IS_FILLED>:
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3, // only valid for mp_set_lookup
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    b3b8:	b480      	push	{r7}
    b3ba:	b083      	sub	sp, #12
    b3bc:	af00      	add	r7, sp, #0
    b3be:	6078      	str	r0, [r7, #4]
    b3c0:	6039      	str	r1, [r7, #0]
    b3c2:	687b      	ldr	r3, [r7, #4]
    b3c4:	689a      	ldr	r2, [r3, #8]
    b3c6:	683b      	ldr	r3, [r7, #0]
    b3c8:	00db      	lsls	r3, r3, #3
    b3ca:	4413      	add	r3, r2
    b3cc:	681b      	ldr	r3, [r3, #0]
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d009      	beq.n	b3e6 <MP_MAP_SLOT_IS_FILLED+0x2e>
    b3d2:	687b      	ldr	r3, [r7, #4]
    b3d4:	689a      	ldr	r2, [r3, #8]
    b3d6:	683b      	ldr	r3, [r7, #0]
    b3d8:	00db      	lsls	r3, r3, #3
    b3da:	4413      	add	r3, r2
    b3dc:	681b      	ldr	r3, [r3, #0]
    b3de:	2b08      	cmp	r3, #8
    b3e0:	d001      	beq.n	b3e6 <MP_MAP_SLOT_IS_FILLED+0x2e>
    b3e2:	2301      	movs	r3, #1
    b3e4:	e000      	b.n	b3e8 <MP_MAP_SLOT_IS_FILLED+0x30>
    b3e6:	2300      	movs	r3, #0
    b3e8:	f003 0301 	and.w	r3, r3, #1
    b3ec:	b2db      	uxtb	r3, r3
    b3ee:	4618      	mov	r0, r3
    b3f0:	370c      	adds	r7, #12
    b3f2:	46bd      	mov	sp, r7
    b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3f8:	4770      	bx	lr
    b3fa:	bf00      	nop

0000b3fc <mp_obj_new_bool>:
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b3fc:	b480      	push	{r7}
    b3fe:	b083      	sub	sp, #12
    b400:	af00      	add	r7, sp, #0
    b402:	6078      	str	r0, [r7, #4]
    b404:	687b      	ldr	r3, [r7, #4]
    b406:	2b00      	cmp	r3, #0
    b408:	d001      	beq.n	b40e <mp_obj_new_bool+0x12>
    b40a:	4b04      	ldr	r3, [pc, #16]	; (b41c <mp_obj_new_bool+0x20>)
    b40c:	e000      	b.n	b410 <mp_obj_new_bool+0x14>
    b40e:	4b04      	ldr	r3, [pc, #16]	; (b420 <mp_obj_new_bool+0x24>)
    b410:	4618      	mov	r0, r3
    b412:	370c      	adds	r7, #12
    b414:	46bd      	mov	sp, r7
    b416:	f85d 7b04 	ldr.w	r7, [sp], #4
    b41a:	4770      	bx	lr
    b41c:	0001fc3c 	.word	0x0001fc3c
    b420:	0001fc34 	.word	0x0001fc34

0000b424 <mp_obj_dict_get_map>:
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
    b424:	b480      	push	{r7}
    b426:	b083      	sub	sp, #12
    b428:	af00      	add	r7, sp, #0
    b42a:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
    b42c:	687b      	ldr	r3, [r7, #4]
    b42e:	3304      	adds	r3, #4
}
    b430:	4618      	mov	r0, r3
    b432:	370c      	adds	r7, #12
    b434:	46bd      	mov	sp, r7
    b436:	f85d 7b04 	ldr.w	r7, [sp], #4
    b43a:	4770      	bx	lr

0000b43c <mp_obj_module_get_globals>:
// module
typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
    b43c:	b480      	push	{r7}
    b43e:	b083      	sub	sp, #12
    b440:	af00      	add	r7, sp, #0
    b442:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
    b444:	687b      	ldr	r3, [r7, #4]
    b446:	685b      	ldr	r3, [r3, #4]
}
    b448:	4618      	mov	r0, r3
    b44a:	370c      	adds	r7, #12
    b44c:	46bd      	mov	sp, r7
    b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b452:	4770      	bx	lr

0000b454 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
    b454:	b480      	push	{r7}
    b456:	b083      	sub	sp, #12
    b458:	af00      	add	r7, sp, #0
    b45a:	6078      	str	r0, [r7, #4]
}
    b45c:	bf00      	nop
    b45e:	370c      	adds	r7, #12
    b460:	46bd      	mov	sp, r7
    b462:	f85d 7b04 	ldr.w	r7, [sp], #4
    b466:	4770      	bx	lr

0000b468 <mp_nonlocal_alloc>:

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    b468:	b580      	push	{r7, lr}
    b46a:	b082      	sub	sp, #8
    b46c:	af00      	add	r7, sp, #0
    b46e:	6078      	str	r0, [r7, #4]
    return m_new(uint8_t, n_bytes);
    b470:	6878      	ldr	r0, [r7, #4]
    b472:	f7f4 ff53 	bl	31c <m_malloc>
    b476:	4603      	mov	r3, r0
}
    b478:	4618      	mov	r0, r3
    b47a:	3708      	adds	r7, #8
    b47c:	46bd      	mov	sp, r7
    b47e:	bd80      	pop	{r7, pc}

0000b480 <mp_nonlocal_realloc>:

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    b480:	b580      	push	{r7, lr}
    b482:	b084      	sub	sp, #16
    b484:	af00      	add	r7, sp, #0
    b486:	60f8      	str	r0, [r7, #12]
    b488:	60b9      	str	r1, [r7, #8]
    b48a:	607a      	str	r2, [r7, #4]
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    b48c:	6879      	ldr	r1, [r7, #4]
    b48e:	68f8      	ldr	r0, [r7, #12]
    b490:	f7f4 ff78 	bl	384 <m_realloc>
    b494:	4603      	mov	r3, r0
}
    b496:	4618      	mov	r0, r3
    b498:	3710      	adds	r7, #16
    b49a:	46bd      	mov	sp, r7
    b49c:	bd80      	pop	{r7, pc}
    b49e:	bf00      	nop

0000b4a0 <mp_nonlocal_free>:

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    b4a0:	b580      	push	{r7, lr}
    b4a2:	b082      	sub	sp, #8
    b4a4:	af00      	add	r7, sp, #0
    b4a6:	6078      	str	r0, [r7, #4]
    b4a8:	6039      	str	r1, [r7, #0]
    m_del(uint8_t, ptr, n_bytes);
    b4aa:	6878      	ldr	r0, [r7, #4]
    b4ac:	f7f4 ff98 	bl	3e0 <m_free>
}
    b4b0:	bf00      	nop
    b4b2:	3708      	adds	r7, #8
    b4b4:	46bd      	mov	sp, r7
    b4b6:	bd80      	pop	{r7, pc}

0000b4b8 <mp_locals_get>:
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    b4b8:	b480      	push	{r7}
    b4ba:	af00      	add	r7, sp, #0
    b4bc:	4b03      	ldr	r3, [pc, #12]	; (b4cc <mp_locals_get+0x14>)
    b4be:	685b      	ldr	r3, [r3, #4]
    b4c0:	4618      	mov	r0, r3
    b4c2:	46bd      	mov	sp, r7
    b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4c8:	4770      	bx	lr
    b4ca:	bf00      	nop
    b4cc:	20000a2c 	.word	0x20000a2c

0000b4d0 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    b4d0:	b480      	push	{r7}
    b4d2:	b083      	sub	sp, #12
    b4d4:	af00      	add	r7, sp, #0
    b4d6:	6078      	str	r0, [r7, #4]
    b4d8:	4a04      	ldr	r2, [pc, #16]	; (b4ec <mp_locals_set+0x1c>)
    b4da:	687b      	ldr	r3, [r7, #4]
    b4dc:	6053      	str	r3, [r2, #4]
    b4de:	bf00      	nop
    b4e0:	370c      	adds	r7, #12
    b4e2:	46bd      	mov	sp, r7
    b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4e8:	4770      	bx	lr
    b4ea:	bf00      	nop
    b4ec:	20000a2c 	.word	0x20000a2c

0000b4f0 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    b4f0:	b480      	push	{r7}
    b4f2:	af00      	add	r7, sp, #0
    b4f4:	4b03      	ldr	r3, [pc, #12]	; (b504 <mp_globals_get+0x14>)
    b4f6:	689b      	ldr	r3, [r3, #8]
    b4f8:	4618      	mov	r0, r3
    b4fa:	46bd      	mov	sp, r7
    b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b500:	4770      	bx	lr
    b502:	bf00      	nop
    b504:	20000a2c 	.word	0x20000a2c

0000b508 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    b508:	b480      	push	{r7}
    b50a:	b083      	sub	sp, #12
    b50c:	af00      	add	r7, sp, #0
    b50e:	6078      	str	r0, [r7, #4]
    b510:	4a04      	ldr	r2, [pc, #16]	; (b524 <mp_globals_set+0x1c>)
    b512:	687b      	ldr	r3, [r7, #4]
    b514:	6093      	str	r3, [r2, #8]
    b516:	bf00      	nop
    b518:	370c      	adds	r7, #12
    b51a:	46bd      	mov	sp, r7
    b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b520:	4770      	bx	lr
    b522:	bf00      	nop
    b524:	20000a2c 	.word	0x20000a2c

0000b528 <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    b528:	b580      	push	{r7, lr}
    b52a:	af00      	add	r7, sp, #0
    qstr_init();
    b52c:	f7f5 fcac 	bl	e88 <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    b530:	4b16      	ldr	r3, [pc, #88]	; (b58c <mp_init+0x64>)
    b532:	2200      	movs	r2, #0
    b534:	649a      	str	r2, [r3, #72]	; 0x48
    MP_STATE_VM(sched_state) = MP_SCHED_IDLE;
    MP_STATE_VM(sched_sp) = 0;
    #endif

#if MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
    mp_init_emergency_exception_buf();
    b536:	f003 fe5f 	bl	f1f8 <mp_init_emergency_exception_buf>
#endif

    #if MICROPY_KBD_EXCEPTION
    // initialise the exception object for raising KeyboardInterrupt
    MP_STATE_VM(mp_kbd_exception).base.type = &mp_type_KeyboardInterrupt;
    b53a:	4b14      	ldr	r3, [pc, #80]	; (b58c <mp_init+0x64>)
    b53c:	4a14      	ldr	r2, [pc, #80]	; (b590 <mp_init+0x68>)
    b53e:	629a      	str	r2, [r3, #40]	; 0x28
    MP_STATE_VM(mp_kbd_exception).traceback_alloc = 0;
    b540:	4b12      	ldr	r3, [pc, #72]	; (b58c <mp_init+0x64>)
    b542:	2200      	movs	r2, #0
    b544:	859a      	strh	r2, [r3, #44]	; 0x2c
    MP_STATE_VM(mp_kbd_exception).traceback_len = 0;
    b546:	4b11      	ldr	r3, [pc, #68]	; (b58c <mp_init+0x64>)
    b548:	2200      	movs	r2, #0
    b54a:	85da      	strh	r2, [r3, #46]	; 0x2e
    MP_STATE_VM(mp_kbd_exception).traceback_data = NULL;
    b54c:	4b0f      	ldr	r3, [pc, #60]	; (b58c <mp_init+0x64>)
    b54e:	2200      	movs	r2, #0
    b550:	631a      	str	r2, [r3, #48]	; 0x30
    MP_STATE_VM(mp_kbd_exception).args = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    b552:	4b0e      	ldr	r3, [pc, #56]	; (b58c <mp_init+0x64>)
    b554:	4a0f      	ldr	r2, [pc, #60]	; (b594 <mp_init+0x6c>)
    b556:	635a      	str	r2, [r3, #52]	; 0x34
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    b558:	4b0c      	ldr	r3, [pc, #48]	; (b58c <mp_init+0x64>)
    b55a:	2200      	movs	r2, #0
    b55c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    b560:	2103      	movs	r1, #3
    b562:	480d      	ldr	r0, [pc, #52]	; (b598 <mp_init+0x70>)
    b564:	f003 fdb2 	bl	f0cc <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    b568:	2101      	movs	r1, #1
    b56a:	480c      	ldr	r0, [pc, #48]	; (b59c <mp_init+0x74>)
    b56c:	f003 fdae 	bl	f0cc <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    b570:	2266      	movs	r2, #102	; 0x66
    b572:	216e      	movs	r1, #110	; 0x6e
    b574:	4809      	ldr	r0, [pc, #36]	; (b59c <mp_init+0x74>)
    b576:	f003 fddf 	bl	f138 <mp_obj_dict_store>

    // locals = globals for outer module (see Objects/frameobject.c/PyFrame_New())
    mp_locals_set(&MP_STATE_VM(dict_main));
    b57a:	4808      	ldr	r0, [pc, #32]	; (b59c <mp_init+0x74>)
    b57c:	f7ff ffa8 	bl	b4d0 <mp_locals_set>
    mp_globals_set(&MP_STATE_VM(dict_main));
    b580:	4806      	ldr	r0, [pc, #24]	; (b59c <mp_init+0x74>)
    b582:	f7ff ffc1 	bl	b508 <mp_globals_set>
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    b586:	bf00      	nop
    b588:	bd80      	pop	{r7, pc}
    b58a:	bf00      	nop
    b58c:	20000a2c 	.word	0x20000a2c
    b590:	0002025c 	.word	0x0002025c
    b594:	00021df0 	.word	0x00021df0
    b598:	20000a64 	.word	0x20000a64
    b59c:	20000a78 	.word	0x20000a78

0000b5a0 <mp_deinit>:

void mp_deinit(void) {
    b5a0:	b480      	push	{r7}
    b5a2:	af00      	add	r7, sp, #0

    // call port specific deinitialization if any
#ifdef MICROPY_PORT_INIT_FUNC
    MICROPY_PORT_DEINIT_FUNC;
#endif
}
    b5a4:	bf00      	nop
    b5a6:	46bd      	mov	sp, r7
    b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5ac:	4770      	bx	lr
    b5ae:	bf00      	nop

0000b5b0 <mp_load_name>:

mp_obj_t mp_load_name(qstr qst) {
    b5b0:	b590      	push	{r4, r7, lr}
    b5b2:	b085      	sub	sp, #20
    b5b4:	af00      	add	r7, sp, #0
    b5b6:	6078      	str	r0, [r7, #4]
    // logic: search locals, globals, builtins
    DEBUG_OP_printf("load name %s\n", qstr_str(qst));
    // If we're at the outer scope (locals == globals), dispatch to load_global right away
    if (mp_locals_get() != mp_globals_get()) {
    b5b8:	f7ff ff7e 	bl	b4b8 <mp_locals_get>
    b5bc:	4604      	mov	r4, r0
    b5be:	f7ff ff97 	bl	b4f0 <mp_globals_get>
    b5c2:	4603      	mov	r3, r0
    b5c4:	429c      	cmp	r4, r3
    b5c6:	d012      	beq.n	b5ee <mp_load_name+0x3e>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b5c8:	f7ff ff76 	bl	b4b8 <mp_locals_get>
    b5cc:	4603      	mov	r3, r0
    b5ce:	1d18      	adds	r0, r3, #4
    b5d0:	687b      	ldr	r3, [r7, #4]
    b5d2:	009b      	lsls	r3, r3, #2
    b5d4:	f043 0302 	orr.w	r3, r3, #2
    b5d8:	2200      	movs	r2, #0
    b5da:	4619      	mov	r1, r3
    b5dc:	f001 ff4c 	bl	d478 <mp_map_lookup>
    b5e0:	60f8      	str	r0, [r7, #12]
        if (elem != NULL) {
    b5e2:	68fb      	ldr	r3, [r7, #12]
    b5e4:	2b00      	cmp	r3, #0
    b5e6:	d002      	beq.n	b5ee <mp_load_name+0x3e>
            return elem->value;
    b5e8:	68fb      	ldr	r3, [r7, #12]
    b5ea:	685b      	ldr	r3, [r3, #4]
    b5ec:	e003      	b.n	b5f6 <mp_load_name+0x46>
        }
    }
    return mp_load_global(qst);
    b5ee:	6878      	ldr	r0, [r7, #4]
    b5f0:	f000 f806 	bl	b600 <mp_load_global>
    b5f4:	4603      	mov	r3, r0
}
    b5f6:	4618      	mov	r0, r3
    b5f8:	3714      	adds	r7, #20
    b5fa:	46bd      	mov	sp, r7
    b5fc:	bd90      	pop	{r4, r7, pc}
    b5fe:	bf00      	nop

0000b600 <mp_load_global>:

mp_obj_t mp_load_global(qstr qst) {
    b600:	b580      	push	{r7, lr}
    b602:	b084      	sub	sp, #16
    b604:	af00      	add	r7, sp, #0
    b606:	6078      	str	r0, [r7, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b608:	f7ff ff72 	bl	b4f0 <mp_globals_get>
    b60c:	4603      	mov	r3, r0
    b60e:	1d18      	adds	r0, r3, #4
    b610:	687b      	ldr	r3, [r7, #4]
    b612:	009b      	lsls	r3, r3, #2
    b614:	f043 0302 	orr.w	r3, r3, #2
    b618:	2200      	movs	r2, #0
    b61a:	4619      	mov	r1, r3
    b61c:	f001 ff2c 	bl	d478 <mp_map_lookup>
    b620:	60f8      	str	r0, [r7, #12]
    if (elem == NULL) {
    b622:	68fb      	ldr	r3, [r7, #12]
    b624:	2b00      	cmp	r3, #0
    b626:	d110      	bne.n	b64a <mp_load_global+0x4a>
            if (elem != NULL) {
                return elem->value;
            }
        }
        #endif
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b628:	687b      	ldr	r3, [r7, #4]
    b62a:	009b      	lsls	r3, r3, #2
    b62c:	f043 0302 	orr.w	r3, r3, #2
    b630:	2200      	movs	r2, #0
    b632:	4619      	mov	r1, r3
    b634:	4808      	ldr	r0, [pc, #32]	; (b658 <mp_load_global+0x58>)
    b636:	f001 ff1f 	bl	d478 <mp_map_lookup>
    b63a:	60f8      	str	r0, [r7, #12]
        if (elem == NULL) {
    b63c:	68fb      	ldr	r3, [r7, #12]
    b63e:	2b00      	cmp	r3, #0
    b640:	d103      	bne.n	b64a <mp_load_global+0x4a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_NameError, "name not defined");
    b642:	4906      	ldr	r1, [pc, #24]	; (b65c <mp_load_global+0x5c>)
    b644:	4806      	ldr	r0, [pc, #24]	; (b660 <mp_load_global+0x60>)
    b646:	f001 fc85 	bl	cf54 <mp_raise_msg>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
                    "name '%q' is not defined", qst));
            }
        }
    }
    return elem->value;
    b64a:	68fb      	ldr	r3, [r7, #12]
    b64c:	685b      	ldr	r3, [r3, #4]
}
    b64e:	4618      	mov	r0, r3
    b650:	3710      	adds	r7, #16
    b652:	46bd      	mov	sp, r7
    b654:	bd80      	pop	{r7, pc}
    b656:	bf00      	nop
    b658:	000229b8 	.word	0x000229b8
    b65c:	0001f63c 	.word	0x0001f63c
    b660:	000205e0 	.word	0x000205e0

0000b664 <mp_load_build_class>:

mp_obj_t mp_load_build_class(void) {
    b664:	b480      	push	{r7}
    b666:	af00      	add	r7, sp, #0
        if (elem != NULL) {
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
    b668:	4b02      	ldr	r3, [pc, #8]	; (b674 <mp_load_build_class+0x10>)
}
    b66a:	4618      	mov	r0, r3
    b66c:	46bd      	mov	sp, r7
    b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b672:	4770      	bx	lr
    b674:	000225c4 	.word	0x000225c4

0000b678 <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    b678:	b580      	push	{r7, lr}
    b67a:	b082      	sub	sp, #8
    b67c:	af00      	add	r7, sp, #0
    b67e:	6078      	str	r0, [r7, #4]
    b680:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b682:	f7ff ff19 	bl	b4b8 <mp_locals_get>
    b686:	687b      	ldr	r3, [r7, #4]
    b688:	009b      	lsls	r3, r3, #2
    b68a:	f043 0302 	orr.w	r3, r3, #2
    b68e:	683a      	ldr	r2, [r7, #0]
    b690:	4619      	mov	r1, r3
    b692:	f003 fd51 	bl	f138 <mp_obj_dict_store>
}
    b696:	bf00      	nop
    b698:	3708      	adds	r7, #8
    b69a:	46bd      	mov	sp, r7
    b69c:	bd80      	pop	{r7, pc}
    b69e:	bf00      	nop

0000b6a0 <mp_delete_name>:

void mp_delete_name(qstr qst) {
    b6a0:	b580      	push	{r7, lr}
    b6a2:	b082      	sub	sp, #8
    b6a4:	af00      	add	r7, sp, #0
    b6a6:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    b6a8:	f7ff ff06 	bl	b4b8 <mp_locals_get>
    b6ac:	4602      	mov	r2, r0
    b6ae:	687b      	ldr	r3, [r7, #4]
    b6b0:	009b      	lsls	r3, r3, #2
    b6b2:	f043 0302 	orr.w	r3, r3, #2
    b6b6:	4619      	mov	r1, r3
    b6b8:	4610      	mov	r0, r2
    b6ba:	f003 fd75 	bl	f1a8 <mp_obj_dict_delete>
}
    b6be:	bf00      	nop
    b6c0:	3708      	adds	r7, #8
    b6c2:	46bd      	mov	sp, r7
    b6c4:	bd80      	pop	{r7, pc}
    b6c6:	bf00      	nop

0000b6c8 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    b6c8:	b580      	push	{r7, lr}
    b6ca:	b082      	sub	sp, #8
    b6cc:	af00      	add	r7, sp, #0
    b6ce:	6078      	str	r0, [r7, #4]
    b6d0:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b6d2:	f7ff ff0d 	bl	b4f0 <mp_globals_get>
    b6d6:	687b      	ldr	r3, [r7, #4]
    b6d8:	009b      	lsls	r3, r3, #2
    b6da:	f043 0302 	orr.w	r3, r3, #2
    b6de:	683a      	ldr	r2, [r7, #0]
    b6e0:	4619      	mov	r1, r3
    b6e2:	f003 fd29 	bl	f138 <mp_obj_dict_store>
}
    b6e6:	bf00      	nop
    b6e8:	3708      	adds	r7, #8
    b6ea:	46bd      	mov	sp, r7
    b6ec:	bd80      	pop	{r7, pc}
    b6ee:	bf00      	nop

0000b6f0 <mp_delete_global>:

void mp_delete_global(qstr qst) {
    b6f0:	b580      	push	{r7, lr}
    b6f2:	b082      	sub	sp, #8
    b6f4:	af00      	add	r7, sp, #0
    b6f6:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    b6f8:	f7ff fefa 	bl	b4f0 <mp_globals_get>
    b6fc:	4602      	mov	r2, r0
    b6fe:	687b      	ldr	r3, [r7, #4]
    b700:	009b      	lsls	r3, r3, #2
    b702:	f043 0302 	orr.w	r3, r3, #2
    b706:	4619      	mov	r1, r3
    b708:	4610      	mov	r0, r2
    b70a:	f003 fd4d 	bl	f1a8 <mp_obj_dict_delete>
}
    b70e:	bf00      	nop
    b710:	3708      	adds	r7, #8
    b712:	46bd      	mov	sp, r7
    b714:	bd80      	pop	{r7, pc}
    b716:	bf00      	nop

0000b718 <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    b718:	b580      	push	{r7, lr}
    b71a:	b088      	sub	sp, #32
    b71c:	af00      	add	r7, sp, #0
    b71e:	6078      	str	r0, [r7, #4]
    b720:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);

    if (op == MP_UNARY_OP_NOT) {
    b722:	687b      	ldr	r3, [r7, #4]
    b724:	2b03      	cmp	r3, #3
    b726:	d10b      	bne.n	b740 <mp_unary_op+0x28>
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    b728:	6838      	ldr	r0, [r7, #0]
    b72a:	f002 f92d 	bl	d988 <mp_obj_is_true>
    b72e:	4603      	mov	r3, r0
    b730:	f083 0301 	eor.w	r3, r3, #1
    b734:	b2db      	uxtb	r3, r3
    b736:	4618      	mov	r0, r3
    b738:	f7ff fe60 	bl	b3fc <mp_obj_new_bool>
    b73c:	4603      	mov	r3, r0
    b73e:	e0c3      	b.n	b8c8 <mp_unary_op+0x1b0>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    b740:	6838      	ldr	r0, [r7, #0]
    b742:	f7ff fe03 	bl	b34c <MP_OBJ_IS_SMALL_INT>
    b746:	4603      	mov	r3, r0
    b748:	2b00      	cmp	r3, #0
    b74a:	d05e      	beq.n	b80a <mp_unary_op+0xf2>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    b74c:	683b      	ldr	r3, [r7, #0]
    b74e:	105b      	asrs	r3, r3, #1
    b750:	617b      	str	r3, [r7, #20]
        switch (op) {
    b752:	687b      	ldr	r3, [r7, #4]
    b754:	2b07      	cmp	r3, #7
    b756:	d849      	bhi.n	b7ec <mp_unary_op+0xd4>
    b758:	a201      	add	r2, pc, #4	; (adr r2, b760 <mp_unary_op+0x48>)
    b75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b75e:	bf00      	nop
    b760:	0000b79b 	.word	0x0000b79b
    b764:	0000b79f 	.word	0x0000b79f
    b768:	0000b7ed 	.word	0x0000b7ed
    b76c:	0000b7ed 	.word	0x0000b7ed
    b770:	0000b781 	.word	0x0000b781
    b774:	0000b7ed 	.word	0x0000b7ed
    b778:	0000b797 	.word	0x0000b797
    b77c:	0000b7c1 	.word	0x0000b7c1
            case MP_UNARY_OP_BOOL:
                return mp_obj_new_bool(val != 0);
    b780:	697b      	ldr	r3, [r7, #20]
    b782:	2b00      	cmp	r3, #0
    b784:	bf14      	ite	ne
    b786:	2301      	movne	r3, #1
    b788:	2300      	moveq	r3, #0
    b78a:	b2db      	uxtb	r3, r3
    b78c:	4618      	mov	r0, r3
    b78e:	f7ff fe35 	bl	b3fc <mp_obj_new_bool>
    b792:	4603      	mov	r3, r0
    b794:	e098      	b.n	b8c8 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_HASH:
                return arg;
    b796:	683b      	ldr	r3, [r7, #0]
    b798:	e096      	b.n	b8c8 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_POSITIVE:
                return arg;
    b79a:	683b      	ldr	r3, [r7, #0]
    b79c:	e094      	b.n	b8c8 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    b79e:	697b      	ldr	r3, [r7, #20]
    b7a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b7a4:	d106      	bne.n	b7b4 <mp_unary_op+0x9c>
                    return mp_obj_new_int(-val);
    b7a6:	697b      	ldr	r3, [r7, #20]
    b7a8:	425b      	negs	r3, r3
    b7aa:	4618      	mov	r0, r3
    b7ac:	f005 f8e2 	bl	10974 <mp_obj_new_int>
    b7b0:	4603      	mov	r3, r0
    b7b2:	e089      	b.n	b8c8 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b7b4:	697b      	ldr	r3, [r7, #20]
    b7b6:	425b      	negs	r3, r3
    b7b8:	005b      	lsls	r3, r3, #1
    b7ba:	f043 0301 	orr.w	r3, r3, #1
    b7be:	e083      	b.n	b8c8 <mp_unary_op+0x1b0>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    b7c0:	697b      	ldr	r3, [r7, #20]
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	db01      	blt.n	b7ca <mp_unary_op+0xb2>
                    return arg;
    b7c6:	683b      	ldr	r3, [r7, #0]
    b7c8:	e07e      	b.n	b8c8 <mp_unary_op+0x1b0>
                } else if (val == MP_SMALL_INT_MIN) {
    b7ca:	697b      	ldr	r3, [r7, #20]
    b7cc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b7d0:	d106      	bne.n	b7e0 <mp_unary_op+0xc8>
                    // check for overflow
                    return mp_obj_new_int(-val);
    b7d2:	697b      	ldr	r3, [r7, #20]
    b7d4:	425b      	negs	r3, r3
    b7d6:	4618      	mov	r0, r3
    b7d8:	f005 f8cc 	bl	10974 <mp_obj_new_int>
    b7dc:	4603      	mov	r3, r0
    b7de:	e073      	b.n	b8c8 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b7e0:	697b      	ldr	r3, [r7, #20]
    b7e2:	425b      	negs	r3, r3
    b7e4:	005b      	lsls	r3, r3, #1
    b7e6:	f043 0301 	orr.w	r3, r3, #1
    b7ea:	e06d      	b.n	b8c8 <mp_unary_op+0x1b0>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    b7ec:	687b      	ldr	r3, [r7, #4]
    b7ee:	2b02      	cmp	r3, #2
    b7f0:	d005      	beq.n	b7fe <mp_unary_op+0xe6>
    b7f2:	4b37      	ldr	r3, [pc, #220]	; (b8d0 <mp_unary_op+0x1b8>)
    b7f4:	4a37      	ldr	r2, [pc, #220]	; (b8d4 <mp_unary_op+0x1bc>)
    b7f6:	21f9      	movs	r1, #249	; 0xf9
    b7f8:	4837      	ldr	r0, [pc, #220]	; (b8d8 <mp_unary_op+0x1c0>)
    b7fa:	f00f fdcf 	bl	1b39c <__assert_func>
                return MP_OBJ_NEW_SMALL_INT(~val);
    b7fe:	697b      	ldr	r3, [r7, #20]
    b800:	43db      	mvns	r3, r3
    b802:	005b      	lsls	r3, r3, #1
    b804:	f043 0301 	orr.w	r3, r3, #1
    b808:	e05e      	b.n	b8c8 <mp_unary_op+0x1b0>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	2b06      	cmp	r3, #6
    b80e:	d145      	bne.n	b89c <mp_unary_op+0x184>
    b810:	6838      	ldr	r0, [r7, #0]
    b812:	f7ff fdad 	bl	b370 <MP_OBJ_IS_QSTR>
    b816:	4603      	mov	r3, r0
    b818:	2b00      	cmp	r3, #0
    b81a:	d10b      	bne.n	b834 <mp_unary_op+0x11c>
    b81c:	6838      	ldr	r0, [r7, #0]
    b81e:	f7ff fdb9 	bl	b394 <MP_OBJ_IS_OBJ>
    b822:	4603      	mov	r3, r0
    b824:	2b00      	cmp	r3, #0
    b826:	d039      	beq.n	b89c <mp_unary_op+0x184>
    b828:	683b      	ldr	r3, [r7, #0]
    b82a:	681b      	ldr	r3, [r3, #0]
    b82c:	699b      	ldr	r3, [r3, #24]
    b82e:	4a2b      	ldr	r2, [pc, #172]	; (b8dc <mp_unary_op+0x1c4>)
    b830:	4293      	cmp	r3, r2
    b832:	d133      	bne.n	b89c <mp_unary_op+0x184>
        // fast path for hashing str/bytes
        GET_STR_HASH(arg, h);
    b834:	6838      	ldr	r0, [r7, #0]
    b836:	f7ff fd9b 	bl	b370 <MP_OBJ_IS_QSTR>
    b83a:	4603      	mov	r3, r0
    b83c:	2b00      	cmp	r3, #0
    b83e:	d006      	beq.n	b84e <mp_unary_op+0x136>
    b840:	683b      	ldr	r3, [r7, #0]
    b842:	089b      	lsrs	r3, r3, #2
    b844:	4618      	mov	r0, r3
    b846:	f7f5 fcc5 	bl	11d4 <qstr_hash>
    b84a:	61f8      	str	r0, [r7, #28]
    b84c:	e002      	b.n	b854 <mp_unary_op+0x13c>
    b84e:	683b      	ldr	r3, [r7, #0]
    b850:	685b      	ldr	r3, [r3, #4]
    b852:	61fb      	str	r3, [r7, #28]
        if (h == 0) {
    b854:	69fb      	ldr	r3, [r7, #28]
    b856:	2b00      	cmp	r3, #0
    b858:	d11b      	bne.n	b892 <mp_unary_op+0x17a>
            GET_STR_DATA_LEN(arg, data, len);
    b85a:	6838      	ldr	r0, [r7, #0]
    b85c:	f7ff fd88 	bl	b370 <MP_OBJ_IS_QSTR>
    b860:	4603      	mov	r3, r0
    b862:	2b00      	cmp	r3, #0
    b864:	d009      	beq.n	b87a <mp_unary_op+0x162>
    b866:	683b      	ldr	r3, [r7, #0]
    b868:	089b      	lsrs	r3, r3, #2
    b86a:	f107 0208 	add.w	r2, r7, #8
    b86e:	4611      	mov	r1, r2
    b870:	4618      	mov	r0, r3
    b872:	f7f5 fcdb 	bl	122c <qstr_data>
    b876:	61b8      	str	r0, [r7, #24]
    b878:	e005      	b.n	b886 <mp_unary_op+0x16e>
    b87a:	683b      	ldr	r3, [r7, #0]
    b87c:	689b      	ldr	r3, [r3, #8]
    b87e:	60bb      	str	r3, [r7, #8]
    b880:	683b      	ldr	r3, [r7, #0]
    b882:	68db      	ldr	r3, [r3, #12]
    b884:	61bb      	str	r3, [r7, #24]
            h = qstr_compute_hash(data, len);
    b886:	68bb      	ldr	r3, [r7, #8]
    b888:	4619      	mov	r1, r3
    b88a:	69b8      	ldr	r0, [r7, #24]
    b88c:	f7f5 fad0 	bl	e30 <qstr_compute_hash>
    b890:	61f8      	str	r0, [r7, #28]
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    b892:	69fb      	ldr	r3, [r7, #28]
    b894:	005b      	lsls	r3, r3, #1
    b896:	f043 0301 	orr.w	r3, r3, #1
    b89a:	e015      	b.n	b8c8 <mp_unary_op+0x1b0>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    b89c:	6838      	ldr	r0, [r7, #0]
    b89e:	f001 ff95 	bl	d7cc <mp_obj_get_type>
    b8a2:	6138      	str	r0, [r7, #16]
        if (type->unary_op != NULL) {
    b8a4:	693b      	ldr	r3, [r7, #16]
    b8a6:	695b      	ldr	r3, [r3, #20]
    b8a8:	2b00      	cmp	r3, #0
    b8aa:	d00a      	beq.n	b8c2 <mp_unary_op+0x1aa>
            mp_obj_t result = type->unary_op(op, arg);
    b8ac:	693b      	ldr	r3, [r7, #16]
    b8ae:	695b      	ldr	r3, [r3, #20]
    b8b0:	6839      	ldr	r1, [r7, #0]
    b8b2:	6878      	ldr	r0, [r7, #4]
    b8b4:	4798      	blx	r3
    b8b6:	60f8      	str	r0, [r7, #12]
            if (result != MP_OBJ_NULL) {
    b8b8:	68fb      	ldr	r3, [r7, #12]
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	d001      	beq.n	b8c2 <mp_unary_op+0x1aa>
                return result;
    b8be:	68fb      	ldr	r3, [r7, #12]
    b8c0:	e002      	b.n	b8c8 <mp_unary_op+0x1b0>
            }
        }
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("unsupported type for operator");
    b8c2:	4807      	ldr	r0, [pc, #28]	; (b8e0 <mp_unary_op+0x1c8>)
    b8c4:	f001 fb68 	bl	cf98 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "unsupported type for %q: '%s'",
                mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
        }
    }
}
    b8c8:	4618      	mov	r0, r3
    b8ca:	3720      	adds	r7, #32
    b8cc:	46bd      	mov	sp, r7
    b8ce:	bd80      	pop	{r7, pc}
    b8d0:	0001f650 	.word	0x0001f650
    b8d4:	0001f8c8 	.word	0x0001f8c8
    b8d8:	0001f66c 	.word	0x0001f66c
    b8dc:	00012849 	.word	0x00012849
    b8e0:	0001f680 	.word	0x0001f680

0000b8e4 <mp_binary_op>:

mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    b8e4:	b590      	push	{r4, r7, lr}
    b8e6:	b095      	sub	sp, #84	; 0x54
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	60f8      	str	r0, [r7, #12]
    b8ec:	60b9      	str	r1, [r7, #8]
    b8ee:	607a      	str	r2, [r7, #4]
    //   then check for implemented seq.concat
    //   then fail
    // note that list does not implement + or +=, so that inplace_concat is reached first for +=

    // deal with is
    if (op == MP_BINARY_OP_IS) {
    b8f0:	68fb      	ldr	r3, [r7, #12]
    b8f2:	2b07      	cmp	r3, #7
    b8f4:	d10b      	bne.n	b90e <mp_binary_op+0x2a>
        return mp_obj_new_bool(lhs == rhs);
    b8f6:	68ba      	ldr	r2, [r7, #8]
    b8f8:	687b      	ldr	r3, [r7, #4]
    b8fa:	429a      	cmp	r2, r3
    b8fc:	bf0c      	ite	eq
    b8fe:	2301      	moveq	r3, #1
    b900:	2300      	movne	r3, #0
    b902:	b2db      	uxtb	r3, r3
    b904:	4618      	mov	r0, r3
    b906:	f7ff fd79 	bl	b3fc <mp_obj_new_bool>
    b90a:	4603      	mov	r3, r0
    b90c:	e23d      	b.n	bd8a <mp_binary_op+0x4a6>
    }

    // deal with == and != for all types
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    b90e:	68fb      	ldr	r3, [r7, #12]
    b910:	2b02      	cmp	r3, #2
    b912:	d002      	beq.n	b91a <mp_binary_op+0x36>
    b914:	68fb      	ldr	r3, [r7, #12]
    b916:	2b05      	cmp	r3, #5
    b918:	d114      	bne.n	b944 <mp_binary_op+0x60>
        if (mp_obj_equal(lhs, rhs)) {
    b91a:	6879      	ldr	r1, [r7, #4]
    b91c:	68b8      	ldr	r0, [r7, #8]
    b91e:	f002 f8a9 	bl	da74 <mp_obj_equal>
    b922:	4603      	mov	r3, r0
    b924:	2b00      	cmp	r3, #0
    b926:	d006      	beq.n	b936 <mp_binary_op+0x52>
            if (op == MP_BINARY_OP_EQUAL) {
    b928:	68fb      	ldr	r3, [r7, #12]
    b92a:	2b02      	cmp	r3, #2
    b92c:	d101      	bne.n	b932 <mp_binary_op+0x4e>
                return mp_const_true;
    b92e:	4bb0      	ldr	r3, [pc, #704]	; (bbf0 <mp_binary_op+0x30c>)
    b930:	e22b      	b.n	bd8a <mp_binary_op+0x4a6>
            } else {
                return mp_const_false;
    b932:	4bb0      	ldr	r3, [pc, #704]	; (bbf4 <mp_binary_op+0x310>)
    b934:	e229      	b.n	bd8a <mp_binary_op+0x4a6>
            }
        } else {
            if (op == MP_BINARY_OP_EQUAL) {
    b936:	68fb      	ldr	r3, [r7, #12]
    b938:	2b02      	cmp	r3, #2
    b93a:	d101      	bne.n	b940 <mp_binary_op+0x5c>
                return mp_const_false;
    b93c:	4bad      	ldr	r3, [pc, #692]	; (bbf4 <mp_binary_op+0x310>)
    b93e:	e224      	b.n	bd8a <mp_binary_op+0x4a6>
            } else {
                return mp_const_true;
    b940:	4bab      	ldr	r3, [pc, #684]	; (bbf0 <mp_binary_op+0x30c>)
    b942:	e222      	b.n	bd8a <mp_binary_op+0x4a6>
            }
        }
    }

    // deal with exception_match for all types
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    b944:	68fb      	ldr	r3, [r7, #12]
    b946:	2b08      	cmp	r3, #8
    b948:	d145      	bne.n	b9d6 <mp_binary_op+0xf2>
        // rhs must be issubclass(rhs, BaseException)
        if (mp_obj_is_exception_type(rhs)) {
    b94a:	6878      	ldr	r0, [r7, #4]
    b94c:	f003 ff10 	bl	f770 <mp_obj_is_exception_type>
    b950:	4603      	mov	r3, r0
    b952:	2b00      	cmp	r3, #0
    b954:	d00a      	beq.n	b96c <mp_binary_op+0x88>
            if (mp_obj_exception_match(lhs, rhs)) {
    b956:	6879      	ldr	r1, [r7, #4]
    b958:	68b8      	ldr	r0, [r7, #8]
    b95a:	f003 ff41 	bl	f7e0 <mp_obj_exception_match>
    b95e:	4603      	mov	r3, r0
    b960:	2b00      	cmp	r3, #0
    b962:	d001      	beq.n	b968 <mp_binary_op+0x84>
                return mp_const_true;
    b964:	4ba2      	ldr	r3, [pc, #648]	; (bbf0 <mp_binary_op+0x30c>)
    b966:	e210      	b.n	bd8a <mp_binary_op+0x4a6>
            } else {
                return mp_const_false;
    b968:	4ba2      	ldr	r3, [pc, #648]	; (bbf4 <mp_binary_op+0x310>)
    b96a:	e20e      	b.n	bd8a <mp_binary_op+0x4a6>
            }
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    b96c:	6878      	ldr	r0, [r7, #4]
    b96e:	f7ff fd11 	bl	b394 <MP_OBJ_IS_OBJ>
    b972:	4603      	mov	r3, r0
    b974:	2b00      	cmp	r3, #0
    b976:	f000 81f7 	beq.w	bd68 <mp_binary_op+0x484>
    b97a:	687b      	ldr	r3, [r7, #4]
    b97c:	681b      	ldr	r3, [r3, #0]
    b97e:	4a9e      	ldr	r2, [pc, #632]	; (bbf8 <mp_binary_op+0x314>)
    b980:	4293      	cmp	r3, r2
    b982:	f040 81f1 	bne.w	bd68 <mp_binary_op+0x484>
            mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(rhs);
    b986:	687b      	ldr	r3, [r7, #4]
    b988:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (size_t i = 0; i < tuple->len; i++) {
    b98a:	2300      	movs	r3, #0
    b98c:	64fb      	str	r3, [r7, #76]	; 0x4c
    b98e:	e01b      	b.n	b9c8 <mp_binary_op+0xe4>
                rhs = tuple->items[i];
    b990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b994:	3202      	adds	r2, #2
    b996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b99a:	607b      	str	r3, [r7, #4]
                if (!mp_obj_is_exception_type(rhs)) {
    b99c:	6878      	ldr	r0, [r7, #4]
    b99e:	f003 fee7 	bl	f770 <mp_obj_is_exception_type>
    b9a2:	4603      	mov	r3, r0
    b9a4:	f083 0301 	eor.w	r3, r3, #1
    b9a8:	b2db      	uxtb	r3, r3
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	f040 81de 	bne.w	bd6c <mp_binary_op+0x488>
                    goto unsupported_op;
                }
                if (mp_obj_exception_match(lhs, rhs)) {
    b9b0:	6879      	ldr	r1, [r7, #4]
    b9b2:	68b8      	ldr	r0, [r7, #8]
    b9b4:	f003 ff14 	bl	f7e0 <mp_obj_exception_match>
    b9b8:	4603      	mov	r3, r0
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d001      	beq.n	b9c2 <mp_binary_op+0xde>
                    return mp_const_true;
    b9be:	4b8c      	ldr	r3, [pc, #560]	; (bbf0 <mp_binary_op+0x30c>)
    b9c0:	e1e3      	b.n	bd8a <mp_binary_op+0x4a6>
            for (size_t i = 0; i < tuple->len; i++) {
    b9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b9c4:	3301      	adds	r3, #1
    b9c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    b9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b9ca:	685a      	ldr	r2, [r3, #4]
    b9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b9ce:	429a      	cmp	r2, r3
    b9d0:	d8de      	bhi.n	b990 <mp_binary_op+0xac>
                }
            }
            return mp_const_false;
    b9d2:	4b88      	ldr	r3, [pc, #544]	; (bbf4 <mp_binary_op+0x310>)
    b9d4:	e1d9      	b.n	bd8a <mp_binary_op+0x4a6>
        }
        goto unsupported_op;
    }

    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    b9d6:	68b8      	ldr	r0, [r7, #8]
    b9d8:	f7ff fcb8 	bl	b34c <MP_OBJ_IS_SMALL_INT>
    b9dc:	4603      	mov	r3, r0
    b9de:	2b00      	cmp	r3, #0
    b9e0:	f000 8186 	beq.w	bcf0 <mp_binary_op+0x40c>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    b9e4:	68bb      	ldr	r3, [r7, #8]
    b9e6:	105b      	asrs	r3, r3, #1
    b9e8:	64bb      	str	r3, [r7, #72]	; 0x48
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    b9ea:	6878      	ldr	r0, [r7, #4]
    b9ec:	f7ff fcae 	bl	b34c <MP_OBJ_IS_SMALL_INT>
    b9f0:	4603      	mov	r3, r0
    b9f2:	2b00      	cmp	r3, #0
    b9f4:	f000 817c 	beq.w	bcf0 <mp_binary_op+0x40c>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    b9f8:	687b      	ldr	r3, [r7, #4]
    b9fa:	105b      	asrs	r3, r3, #1
    b9fc:	647b      	str	r3, [r7, #68]	; 0x44
            //      -       result always fits in mp_int_t, then handled by SMALL_INT check
            //      *       checked explicitly
            //      /       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      %       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      <<      checked explicitly
            switch (op) {
    b9fe:	68fb      	ldr	r3, [r7, #12]
    ba00:	2b21      	cmp	r3, #33	; 0x21
    ba02:	f200 81b5 	bhi.w	bd70 <mp_binary_op+0x48c>
    ba06:	a201      	add	r2, pc, #4	; (adr r2, ba0c <mp_binary_op+0x128>)
    ba08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ba0c:	0000bc69 	.word	0x0000bc69
    ba10:	0000bc81 	.word	0x0000bc81
    ba14:	0000bd71 	.word	0x0000bd71
    ba18:	0000bc99 	.word	0x0000bc99
    ba1c:	0000bcb1 	.word	0x0000bcb1
    ba20:	0000bd71 	.word	0x0000bd71
    ba24:	0000bd71 	.word	0x0000bd71
    ba28:	0000bd71 	.word	0x0000bd71
    ba2c:	0000bd71 	.word	0x0000bd71
    ba30:	0000ba95 	.word	0x0000ba95
    ba34:	0000ba9f 	.word	0x0000ba9f
    ba38:	0000baa9 	.word	0x0000baa9
    ba3c:	0000bab3 	.word	0x0000bab3
    ba40:	0000baff 	.word	0x0000baff
    ba44:	0000bb21 	.word	0x0000bb21
    ba48:	0000bb2b 	.word	0x0000bb2b
    ba4c:	0000bb35 	.word	0x0000bb35
    ba50:	0000bb65 	.word	0x0000bb65
    ba54:	0000bd71 	.word	0x0000bd71
    ba58:	0000bb79 	.word	0x0000bb79
    ba5c:	0000bb8d 	.word	0x0000bb8d
    ba60:	0000ba95 	.word	0x0000ba95
    ba64:	0000ba9f 	.word	0x0000ba9f
    ba68:	0000baa9 	.word	0x0000baa9
    ba6c:	0000bab3 	.word	0x0000bab3
    ba70:	0000baff 	.word	0x0000baff
    ba74:	0000bb21 	.word	0x0000bb21
    ba78:	0000bb2b 	.word	0x0000bb2b
    ba7c:	0000bb35 	.word	0x0000bb35
    ba80:	0000bb65 	.word	0x0000bb65
    ba84:	0000bd71 	.word	0x0000bd71
    ba88:	0000bb79 	.word	0x0000bb79
    ba8c:	0000bb8d 	.word	0x0000bb8d
    ba90:	0000bc27 	.word	0x0000bc27
                case MP_BINARY_OP_OR:
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    ba94:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba98:	4313      	orrs	r3, r2
    ba9a:	64bb      	str	r3, [r7, #72]	; 0x48
    ba9c:	e114      	b.n	bcc8 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_XOR:
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    ba9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    baa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baa2:	4053      	eors	r3, r2
    baa4:	64bb      	str	r3, [r7, #72]	; 0x48
    baa6:	e10f      	b.n	bcc8 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_AND:
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    baa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    baaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baac:	4013      	ands	r3, r2
    baae:	64bb      	str	r3, [r7, #72]	; 0x48
    bab0:	e10a      	b.n	bcc8 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_LSHIFT:
                case MP_BINARY_OP_INPLACE_LSHIFT: {
                    if (rhs_val < 0) {
    bab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bab4:	2b00      	cmp	r3, #0
    bab6:	da02      	bge.n	babe <mp_binary_op+0x1da>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    bab8:	4850      	ldr	r0, [pc, #320]	; (bbfc <mp_binary_op+0x318>)
    baba:	f001 fa63 	bl	cf84 <mp_raise_ValueError>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    babe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bac0:	2b1f      	cmp	r3, #31
    bac2:	dc0d      	bgt.n	bae0 <mp_binary_op+0x1fc>
    bac4:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    bac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baca:	411a      	asrs	r2, r3
    bacc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bace:	429a      	cmp	r2, r3
    bad0:	db06      	blt.n	bae0 <mp_binary_op+0x1fc>
    bad2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    bad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bad8:	411a      	asrs	r2, r3
    bada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    badc:	429a      	cmp	r2, r3
    bade:	dd08      	ble.n	baf2 <mp_binary_op+0x20e>
                        // left-shift will overflow, so use higher precision integer
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bae2:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bae6:	4618      	mov	r0, r3
    bae8:	4621      	mov	r1, r4
    baea:	f004 ff0d 	bl	10908 <mp_obj_new_int_from_ll>
    baee:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    baf0:	e109      	b.n	bd06 <mp_binary_op+0x422>
                    } else {
                        // use standard precision
                        lhs_val <<= rhs_val;
    baf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    baf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baf6:	fa02 f303 	lsl.w	r3, r2, r3
    bafa:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bafc:	e0e4      	b.n	bcc8 <mp_binary_op+0x3e4>
                }
                case MP_BINARY_OP_RSHIFT:
                case MP_BINARY_OP_INPLACE_RSHIFT:
                    if (rhs_val < 0) {
    bafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb00:	2b00      	cmp	r3, #0
    bb02:	da02      	bge.n	bb0a <mp_binary_op+0x226>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    bb04:	483d      	ldr	r0, [pc, #244]	; (bbfc <mp_binary_op+0x318>)
    bb06:	f001 fa3d 	bl	cf84 <mp_raise_ValueError>
                    } else {
                        // standard precision is enough for right-shift
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    bb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb0c:	2b1f      	cmp	r3, #31
    bb0e:	dd01      	ble.n	bb14 <mp_binary_op+0x230>
                            // Shifting to big amounts is underfined behavior
                            // in C and is CPU-dependent; propagate sign bit.
                            rhs_val = BITS_PER_WORD - 1;
    bb10:	231f      	movs	r3, #31
    bb12:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        lhs_val >>= rhs_val;
    bb14:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb18:	fa42 f303 	asr.w	r3, r2, r3
    bb1c:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bb1e:	e0d3      	b.n	bcc8 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_ADD:
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    bb20:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb24:	4413      	add	r3, r2
    bb26:	64bb      	str	r3, [r7, #72]	; 0x48
    bb28:	e0ce      	b.n	bcc8 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_SUBTRACT:
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    bb2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb2e:	1ad3      	subs	r3, r2, r3
    bb30:	64bb      	str	r3, [r7, #72]	; 0x48
    bb32:	e0c9      	b.n	bcc8 <mp_binary_op+0x3e4>
                        // use standard precision
                        lhs_val = (mp_int_t)res;
                    }
                    #endif

                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    bb34:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb38:	f00f fa62 	bl	1b000 <mp_small_int_mul_overflow>
    bb3c:	4603      	mov	r3, r0
    bb3e:	2b00      	cmp	r3, #0
    bb40:	d008      	beq.n	bb54 <mp_binary_op+0x270>
                        // use higher precision
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bb42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb44:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bb48:	4618      	mov	r0, r3
    bb4a:	4621      	mov	r1, r4
    bb4c:	f004 fedc 	bl	10908 <mp_obj_new_int_from_ll>
    bb50:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    bb52:	e0d8      	b.n	bd06 <mp_binary_op+0x422>
                    } else {
                        // use standard precision
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    bb54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    bb58:	fb02 f303 	mul.w	r3, r2, r3
    bb5c:	005b      	lsls	r3, r3, #1
    bb5e:	f043 0301 	orr.w	r3, r3, #1
    bb62:	e112      	b.n	bd8a <mp_binary_op+0x4a6>
                    }
                }
                case MP_BINARY_OP_FLOOR_DIVIDE:
                case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
                    if (rhs_val == 0) {
    bb64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb66:	2b00      	cmp	r3, #0
    bb68:	f000 8106 	beq.w	bd78 <mp_binary_op+0x494>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    bb6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb6e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb70:	f00f faac 	bl	1b0cc <mp_small_int_floor_divide>
    bb74:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bb76:	e0a7      	b.n	bcc8 <mp_binary_op+0x3e4>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
                #endif

                case MP_BINARY_OP_MODULO:
                case MP_BINARY_OP_INPLACE_MODULO: {
                    if (rhs_val == 0) {
    bb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	f000 80fe 	beq.w	bd7c <mp_binary_op+0x498>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    bb80:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb84:	f00f fa7c 	bl	1b080 <mp_small_int_modulo>
    bb88:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bb8a:	e09d      	b.n	bcc8 <mp_binary_op+0x3e4>
                }

                case MP_BINARY_OP_POWER:
                case MP_BINARY_OP_INPLACE_POWER:
                    if (rhs_val < 0) {
    bb8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb8e:	2b00      	cmp	r3, #0
    bb90:	da02      	bge.n	bb98 <mp_binary_op+0x2b4>
                        #if MICROPY_PY_BUILTINS_FLOAT
                        lhs = mp_obj_new_float(lhs_val);
                        goto generic_binary_op;
                        #else
                        mp_raise_ValueError("negative power with no float support");
    bb92:	481b      	ldr	r0, [pc, #108]	; (bc00 <mp_binary_op+0x31c>)
    bb94:	f001 f9f6 	bl	cf84 <mp_raise_ValueError>
                        #endif
                    } else {
                        mp_int_t ans = 1;
    bb98:	2301      	movs	r3, #1
    bb9a:	643b      	str	r3, [r7, #64]	; 0x40
                        while (rhs_val > 0) {
    bb9c:	e024      	b.n	bbe8 <mp_binary_op+0x304>
                            if (rhs_val & 1) {
    bb9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bba0:	f003 0301 	and.w	r3, r3, #1
    bba4:	2b00      	cmp	r3, #0
    bba6:	d00b      	beq.n	bbc0 <mp_binary_op+0x2dc>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    bba8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bbaa:	6c38      	ldr	r0, [r7, #64]	; 0x40
    bbac:	f00f fa28 	bl	1b000 <mp_small_int_mul_overflow>
    bbb0:	4603      	mov	r3, r0
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	d12a      	bne.n	bc0c <mp_binary_op+0x328>
                                    goto power_overflow;
                                }
                                ans *= lhs_val;
    bbb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bbb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bbba:	fb02 f303 	mul.w	r3, r2, r3
    bbbe:	643b      	str	r3, [r7, #64]	; 0x40
                            }
                            if (rhs_val == 1) {
    bbc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbc2:	2b01      	cmp	r3, #1
    bbc4:	d01e      	beq.n	bc04 <mp_binary_op+0x320>
                                break;
                            }
                            rhs_val /= 2;
    bbc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbc8:	0fda      	lsrs	r2, r3, #31
    bbca:	4413      	add	r3, r2
    bbcc:	105b      	asrs	r3, r3, #1
    bbce:	647b      	str	r3, [r7, #68]	; 0x44
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    bbd0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bbd2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bbd4:	f00f fa14 	bl	1b000 <mp_small_int_mul_overflow>
    bbd8:	4603      	mov	r3, r0
    bbda:	2b00      	cmp	r3, #0
    bbdc:	d118      	bne.n	bc10 <mp_binary_op+0x32c>
                                goto power_overflow;
                            }
                            lhs_val *= lhs_val;
    bbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bbe2:	fb02 f303 	mul.w	r3, r2, r3
    bbe6:	64bb      	str	r3, [r7, #72]	; 0x48
                        while (rhs_val > 0) {
    bbe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbea:	2b00      	cmp	r3, #0
    bbec:	dcd7      	bgt.n	bb9e <mp_binary_op+0x2ba>
    bbee:	e00a      	b.n	bc06 <mp_binary_op+0x322>
    bbf0:	0001fc3c 	.word	0x0001fc3c
    bbf4:	0001fc34 	.word	0x0001fc34
    bbf8:	00021db4 	.word	0x00021db4
    bbfc:	0001f6a0 	.word	0x0001f6a0
    bc00:	0001f6b8 	.word	0x0001f6b8
                                break;
    bc04:	bf00      	nop
                        }
                        lhs_val = ans;
    bc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bc08:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bc0a:	e05d      	b.n	bcc8 <mp_binary_op+0x3e4>
                                    goto power_overflow;
    bc0c:	bf00      	nop
    bc0e:	e000      	b.n	bc12 <mp_binary_op+0x32e>
                                goto power_overflow;
    bc10:	bf00      	nop

                power_overflow:
                    // use higher precision
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    bc12:	68bb      	ldr	r3, [r7, #8]
    bc14:	105b      	asrs	r3, r3, #1
    bc16:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bc1a:	4618      	mov	r0, r3
    bc1c:	4621      	mov	r1, r4
    bc1e:	f004 fe73 	bl	10908 <mp_obj_new_int_from_ll>
    bc22:	60b8      	str	r0, [r7, #8]
                    goto generic_binary_op;
    bc24:	e06f      	b.n	bd06 <mp_binary_op+0x422>

                case MP_BINARY_OP_DIVMOD: {
                    if (rhs_val == 0) {
    bc26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc28:	2b00      	cmp	r3, #0
    bc2a:	f000 80a9 	beq.w	bd80 <mp_binary_op+0x49c>
                        goto zero_division;
                    }
                    // to reduce stack usage we don't pass a temp array of the 2 items
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    bc2e:	2100      	movs	r1, #0
    bc30:	2002      	movs	r0, #2
    bc32:	f00a f8b7 	bl	15da4 <mp_obj_new_tuple>
    bc36:	63b8      	str	r0, [r7, #56]	; 0x38
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    bc38:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bc3a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc3c:	f00f fa46 	bl	1b0cc <mp_small_int_floor_divide>
    bc40:	4603      	mov	r3, r0
    bc42:	005b      	lsls	r3, r3, #1
    bc44:	f043 0301 	orr.w	r3, r3, #1
    bc48:	461a      	mov	r2, r3
    bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc4c:	609a      	str	r2, [r3, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    bc4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bc50:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc52:	f00f fa15 	bl	1b080 <mp_small_int_modulo>
    bc56:	4603      	mov	r3, r0
    bc58:	005b      	lsls	r3, r3, #1
    bc5a:	f043 0301 	orr.w	r3, r3, #1
    bc5e:	461a      	mov	r2, r3
    bc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc62:	60da      	str	r2, [r3, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    bc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc66:	e090      	b.n	bd8a <mp_binary_op+0x4a6>
                }

                case MP_BINARY_OP_LESS: return mp_obj_new_bool(lhs_val < rhs_val);
    bc68:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc6c:	429a      	cmp	r2, r3
    bc6e:	bfb4      	ite	lt
    bc70:	2301      	movlt	r3, #1
    bc72:	2300      	movge	r3, #0
    bc74:	b2db      	uxtb	r3, r3
    bc76:	4618      	mov	r0, r3
    bc78:	f7ff fbc0 	bl	b3fc <mp_obj_new_bool>
    bc7c:	4603      	mov	r3, r0
    bc7e:	e084      	b.n	bd8a <mp_binary_op+0x4a6>
                case MP_BINARY_OP_MORE: return mp_obj_new_bool(lhs_val > rhs_val);
    bc80:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc84:	429a      	cmp	r2, r3
    bc86:	bfcc      	ite	gt
    bc88:	2301      	movgt	r3, #1
    bc8a:	2300      	movle	r3, #0
    bc8c:	b2db      	uxtb	r3, r3
    bc8e:	4618      	mov	r0, r3
    bc90:	f7ff fbb4 	bl	b3fc <mp_obj_new_bool>
    bc94:	4603      	mov	r3, r0
    bc96:	e078      	b.n	bd8a <mp_binary_op+0x4a6>
                case MP_BINARY_OP_LESS_EQUAL: return mp_obj_new_bool(lhs_val <= rhs_val);
    bc98:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc9c:	429a      	cmp	r2, r3
    bc9e:	bfd4      	ite	le
    bca0:	2301      	movle	r3, #1
    bca2:	2300      	movgt	r3, #0
    bca4:	b2db      	uxtb	r3, r3
    bca6:	4618      	mov	r0, r3
    bca8:	f7ff fba8 	bl	b3fc <mp_obj_new_bool>
    bcac:	4603      	mov	r3, r0
    bcae:	e06c      	b.n	bd8a <mp_binary_op+0x4a6>
                case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);
    bcb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcb4:	429a      	cmp	r2, r3
    bcb6:	bfac      	ite	ge
    bcb8:	2301      	movge	r3, #1
    bcba:	2300      	movlt	r3, #0
    bcbc:	b2db      	uxtb	r3, r3
    bcbe:	4618      	mov	r0, r3
    bcc0:	f7ff fb9c 	bl	b3fc <mp_obj_new_bool>
    bcc4:	4603      	mov	r3, r0
    bcc6:	e060      	b.n	bd8a <mp_binary_op+0x4a6>

                default:
                    goto unsupported_op;
            }
            // This is an inlined version of mp_obj_new_int, for speed
            if (MP_SMALL_INT_FITS(lhs_val)) {
    bcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bcca:	005a      	lsls	r2, r3, #1
    bccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bcce:	4053      	eors	r3, r2
    bcd0:	2b00      	cmp	r3, #0
    bcd2:	db04      	blt.n	bcde <mp_binary_op+0x3fa>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    bcd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bcd6:	005b      	lsls	r3, r3, #1
    bcd8:	f043 0301 	orr.w	r3, r3, #1
    bcdc:	e055      	b.n	bd8a <mp_binary_op+0x4a6>
            } else {
                return mp_obj_new_int_from_ll(lhs_val);
    bcde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bce0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bce4:	4618      	mov	r0, r3
    bce6:	4621      	mov	r1, r4
    bce8:	f004 fe0e 	bl	10908 <mp_obj_new_int_from_ll>
    bcec:	4603      	mov	r3, r0
    bcee:	e04c      	b.n	bd8a <mp_binary_op+0x4a6>
#endif
        }
    }

    // Convert MP_BINARY_OP_IN to MP_BINARY_OP_CONTAINS with swapped args.
    if (op == MP_BINARY_OP_IN) {
    bcf0:	68fb      	ldr	r3, [r7, #12]
    bcf2:	2b06      	cmp	r3, #6
    bcf4:	d107      	bne.n	bd06 <mp_binary_op+0x422>
        op = MP_BINARY_OP_CONTAINS;
    bcf6:	2322      	movs	r3, #34	; 0x22
    bcf8:	60fb      	str	r3, [r7, #12]
        mp_obj_t temp = lhs;
    bcfa:	68bb      	ldr	r3, [r7, #8]
    bcfc:	637b      	str	r3, [r7, #52]	; 0x34
        lhs = rhs;
    bcfe:	687b      	ldr	r3, [r7, #4]
    bd00:	60bb      	str	r3, [r7, #8]
        rhs = temp;
    bd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bd04:	607b      	str	r3, [r7, #4]
    }

    // generic binary_op supplied by type
    mp_obj_type_t *type;
generic_binary_op:
    type = mp_obj_get_type(lhs);
    bd06:	68b8      	ldr	r0, [r7, #8]
    bd08:	f001 fd60 	bl	d7cc <mp_obj_get_type>
    bd0c:	6338      	str	r0, [r7, #48]	; 0x30
    if (type->binary_op != NULL) {
    bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bd10:	699b      	ldr	r3, [r3, #24]
    bd12:	2b00      	cmp	r3, #0
    bd14:	d00b      	beq.n	bd2e <mp_binary_op+0x44a>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bd18:	699b      	ldr	r3, [r3, #24]
    bd1a:	687a      	ldr	r2, [r7, #4]
    bd1c:	68b9      	ldr	r1, [r7, #8]
    bd1e:	68f8      	ldr	r0, [r7, #12]
    bd20:	4798      	blx	r3
    bd22:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result != MP_OBJ_NULL) {
    bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd26:	2b00      	cmp	r3, #0
    bd28:	d001      	beq.n	bd2e <mp_binary_op+0x44a>
            return result;
    bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd2c:	e02d      	b.n	bd8a <mp_binary_op+0x4a6>
        // Convert __rop__ back to __op__ for error message
        op -= MP_BINARY_OP_REVERSE_OR - MP_BINARY_OP_OR;
    }
#endif

    if (op == MP_BINARY_OP_CONTAINS) {
    bd2e:	68fb      	ldr	r3, [r7, #12]
    bd30:	2b22      	cmp	r3, #34	; 0x22
    bd32:	d11e      	bne.n	bd72 <mp_binary_op+0x48e>
        // If type didn't support containment then explicitly walk the iterator.
        // mp_getiter will raise the appropriate exception if lhs is not iterable.
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    bd34:	f107 0314 	add.w	r3, r7, #20
    bd38:	4619      	mov	r1, r3
    bd3a:	68b8      	ldr	r0, [r7, #8]
    bd3c:	f000 fdde 	bl	c8fc <mp_getiter>
    bd40:	62b8      	str	r0, [r7, #40]	; 0x28
        mp_obj_t next;
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bd42:	e008      	b.n	bd56 <mp_binary_op+0x472>
            if (mp_obj_equal(next, rhs)) {
    bd44:	6879      	ldr	r1, [r7, #4]
    bd46:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bd48:	f001 fe94 	bl	da74 <mp_obj_equal>
    bd4c:	4603      	mov	r3, r0
    bd4e:	2b00      	cmp	r3, #0
    bd50:	d001      	beq.n	bd56 <mp_binary_op+0x472>
                return mp_const_true;
    bd52:	4b10      	ldr	r3, [pc, #64]	; (bd94 <mp_binary_op+0x4b0>)
    bd54:	e019      	b.n	bd8a <mp_binary_op+0x4a6>
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bd56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd58:	f000 fe52 	bl	ca00 <mp_iternext>
    bd5c:	6278      	str	r0, [r7, #36]	; 0x24
    bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bd60:	2b04      	cmp	r3, #4
    bd62:	d1ef      	bne.n	bd44 <mp_binary_op+0x460>
            }
        }
        return mp_const_false;
    bd64:	4b0c      	ldr	r3, [pc, #48]	; (bd98 <mp_binary_op+0x4b4>)
    bd66:	e010      	b.n	bd8a <mp_binary_op+0x4a6>
        goto unsupported_op;
    bd68:	bf00      	nop
    bd6a:	e002      	b.n	bd72 <mp_binary_op+0x48e>
                    goto unsupported_op;
    bd6c:	bf00      	nop
    bd6e:	e000      	b.n	bd72 <mp_binary_op+0x48e>
                    goto unsupported_op;
    bd70:	bf00      	nop
    }

unsupported_op:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("unsupported type for operator");
    bd72:	480a      	ldr	r0, [pc, #40]	; (bd9c <mp_binary_op+0x4b8>)
    bd74:	f001 f910 	bl	cf98 <mp_raise_TypeError>
                        goto zero_division;
    bd78:	bf00      	nop
    bd7a:	e002      	b.n	bd82 <mp_binary_op+0x49e>
                        goto zero_division;
    bd7c:	bf00      	nop
    bd7e:	e000      	b.n	bd82 <mp_binary_op+0x49e>
                        goto zero_division;
    bd80:	bf00      	nop
            "unsupported types for %q: '%s', '%s'",
            mp_binary_op_method_name[op], mp_obj_get_type_str(lhs), mp_obj_get_type_str(rhs)));
    }

zero_division:
    mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
    bd82:	4907      	ldr	r1, [pc, #28]	; (bda0 <mp_binary_op+0x4bc>)
    bd84:	4807      	ldr	r0, [pc, #28]	; (bda4 <mp_binary_op+0x4c0>)
    bd86:	f001 f8e5 	bl	cf54 <mp_raise_msg>
}
    bd8a:	4618      	mov	r0, r3
    bd8c:	3754      	adds	r7, #84	; 0x54
    bd8e:	46bd      	mov	sp, r7
    bd90:	bd90      	pop	{r4, r7, pc}
    bd92:	bf00      	nop
    bd94:	0001fc3c 	.word	0x0001fc3c
    bd98:	0001fc34 	.word	0x0001fc34
    bd9c:	0001f680 	.word	0x0001f680
    bda0:	0001f6e0 	.word	0x0001f6e0
    bda4:	000203c4 	.word	0x000203c4

0000bda8 <mp_call_function_0>:

mp_obj_t mp_call_function_0(mp_obj_t fun) {
    bda8:	b580      	push	{r7, lr}
    bdaa:	b082      	sub	sp, #8
    bdac:	af00      	add	r7, sp, #0
    bdae:	6078      	str	r0, [r7, #4]
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    bdb0:	2300      	movs	r3, #0
    bdb2:	2200      	movs	r2, #0
    bdb4:	2100      	movs	r1, #0
    bdb6:	6878      	ldr	r0, [r7, #4]
    bdb8:	f000 f82c 	bl	be14 <mp_call_function_n_kw>
    bdbc:	4603      	mov	r3, r0
}
    bdbe:	4618      	mov	r0, r3
    bdc0:	3708      	adds	r7, #8
    bdc2:	46bd      	mov	sp, r7
    bdc4:	bd80      	pop	{r7, pc}
    bdc6:	bf00      	nop

0000bdc8 <mp_call_function_1>:

mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    bdc8:	b580      	push	{r7, lr}
    bdca:	b082      	sub	sp, #8
    bdcc:	af00      	add	r7, sp, #0
    bdce:	6078      	str	r0, [r7, #4]
    bdd0:	6039      	str	r1, [r7, #0]
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    bdd2:	463b      	mov	r3, r7
    bdd4:	2200      	movs	r2, #0
    bdd6:	2101      	movs	r1, #1
    bdd8:	6878      	ldr	r0, [r7, #4]
    bdda:	f000 f81b 	bl	be14 <mp_call_function_n_kw>
    bdde:	4603      	mov	r3, r0
}
    bde0:	4618      	mov	r0, r3
    bde2:	3708      	adds	r7, #8
    bde4:	46bd      	mov	sp, r7
    bde6:	bd80      	pop	{r7, pc}

0000bde8 <mp_call_function_2>:

mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    bde8:	b580      	push	{r7, lr}
    bdea:	b086      	sub	sp, #24
    bdec:	af00      	add	r7, sp, #0
    bdee:	60f8      	str	r0, [r7, #12]
    bdf0:	60b9      	str	r1, [r7, #8]
    bdf2:	607a      	str	r2, [r7, #4]
    mp_obj_t args[2];
    args[0] = arg1;
    bdf4:	68bb      	ldr	r3, [r7, #8]
    bdf6:	613b      	str	r3, [r7, #16]
    args[1] = arg2;
    bdf8:	687b      	ldr	r3, [r7, #4]
    bdfa:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(fun, 2, 0, args);
    bdfc:	f107 0310 	add.w	r3, r7, #16
    be00:	2200      	movs	r2, #0
    be02:	2102      	movs	r1, #2
    be04:	68f8      	ldr	r0, [r7, #12]
    be06:	f000 f805 	bl	be14 <mp_call_function_n_kw>
    be0a:	4603      	mov	r3, r0
}
    be0c:	4618      	mov	r0, r3
    be0e:	3718      	adds	r7, #24
    be10:	46bd      	mov	sp, r7
    be12:	bd80      	pop	{r7, pc}

0000be14 <mp_call_function_n_kw>:

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    be14:	b590      	push	{r4, r7, lr}
    be16:	b087      	sub	sp, #28
    be18:	af00      	add	r7, sp, #0
    be1a:	60f8      	str	r0, [r7, #12]
    be1c:	60b9      	str	r1, [r7, #8]
    be1e:	607a      	str	r2, [r7, #4]
    be20:	603b      	str	r3, [r7, #0]
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    be22:	68f8      	ldr	r0, [r7, #12]
    be24:	f001 fcd2 	bl	d7cc <mp_obj_get_type>
    be28:	6178      	str	r0, [r7, #20]

    // do the call
    if (type->call != NULL) {
    be2a:	697b      	ldr	r3, [r7, #20]
    be2c:	691b      	ldr	r3, [r3, #16]
    be2e:	2b00      	cmp	r3, #0
    be30:	d008      	beq.n	be44 <mp_call_function_n_kw+0x30>
        return type->call(fun_in, n_args, n_kw, args);
    be32:	697b      	ldr	r3, [r7, #20]
    be34:	691c      	ldr	r4, [r3, #16]
    be36:	683b      	ldr	r3, [r7, #0]
    be38:	687a      	ldr	r2, [r7, #4]
    be3a:	68b9      	ldr	r1, [r7, #8]
    be3c:	68f8      	ldr	r0, [r7, #12]
    be3e:	47a0      	blx	r4
    be40:	4603      	mov	r3, r0
    be42:	e002      	b.n	be4a <mp_call_function_n_kw+0x36>
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not callable");
    be44:	4803      	ldr	r0, [pc, #12]	; (be54 <mp_call_function_n_kw+0x40>)
    be46:	f001 f8a7 	bl	cf98 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not callable", mp_obj_get_type_str(fun_in)));
    }
}
    be4a:	4618      	mov	r0, r3
    be4c:	371c      	adds	r7, #28
    be4e:	46bd      	mov	sp, r7
    be50:	bd90      	pop	{r4, r7, pc}
    be52:	bf00      	nop
    be54:	0001f6f4 	.word	0x0001f6f4

0000be58 <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    be58:	b580      	push	{r7, lr}
    be5a:	b086      	sub	sp, #24
    be5c:	af00      	add	r7, sp, #0
    be5e:	60f8      	str	r0, [r7, #12]
    be60:	60b9      	str	r1, [r7, #8]
    be62:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    be64:	687b      	ldr	r3, [r7, #4]
    be66:	3304      	adds	r3, #4
    be68:	681b      	ldr	r3, [r3, #0]
    be6a:	2b00      	cmp	r3, #0
    be6c:	bf14      	ite	ne
    be6e:	2301      	movne	r3, #1
    be70:	2300      	moveq	r3, #0
    be72:	b2db      	uxtb	r3, r3
    be74:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    be76:	687b      	ldr	r3, [r7, #4]
    be78:	6818      	ldr	r0, [r3, #0]
    be7a:	697a      	ldr	r2, [r7, #20]
    be7c:	68fb      	ldr	r3, [r7, #12]
    be7e:	18d1      	adds	r1, r2, r3
    be80:	697a      	ldr	r2, [r7, #20]
    be82:	4613      	mov	r3, r2
    be84:	079b      	lsls	r3, r3, #30
    be86:	1a9b      	subs	r3, r3, r2
    be88:	009b      	lsls	r3, r3, #2
    be8a:	3308      	adds	r3, #8
    be8c:	687a      	ldr	r2, [r7, #4]
    be8e:	4413      	add	r3, r2
    be90:	68ba      	ldr	r2, [r7, #8]
    be92:	f7ff ffbf 	bl	be14 <mp_call_function_n_kw>
    be96:	4603      	mov	r3, r0
}
    be98:	4618      	mov	r0, r3
    be9a:	3718      	adds	r7, #24
    be9c:	46bd      	mov	sp, r7
    be9e:	bd80      	pop	{r7, pc}

0000bea0 <mp_call_prepare_args_n_kw_var>:

// This function only needs to be exposed externally when in stackless mode.
#if !MICROPY_STACKLESS
STATIC
#endif
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    bea0:	b580      	push	{r7, lr}
    bea2:	b0a2      	sub	sp, #136	; 0x88
    bea4:	af00      	add	r7, sp, #0
    bea6:	60b9      	str	r1, [r7, #8]
    bea8:	607a      	str	r2, [r7, #4]
    beaa:	603b      	str	r3, [r7, #0]
    beac:	4603      	mov	r3, r0
    beae:	73fb      	strb	r3, [r7, #15]
    mp_obj_t fun = *args++;
    beb0:	687b      	ldr	r3, [r7, #4]
    beb2:	1d1a      	adds	r2, r3, #4
    beb4:	607a      	str	r2, [r7, #4]
    beb6:	681b      	ldr	r3, [r3, #0]
    beb8:	663b      	str	r3, [r7, #96]	; 0x60
    mp_obj_t self = MP_OBJ_NULL;
    beba:	2300      	movs	r3, #0
    bebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (have_self) {
    bec0:	7bfb      	ldrb	r3, [r7, #15]
    bec2:	2b00      	cmp	r3, #0
    bec4:	d005      	beq.n	bed2 <mp_call_prepare_args_n_kw_var+0x32>
        self = *args++; // may be MP_OBJ_NULL
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	1d1a      	adds	r2, r3, #4
    beca:	607a      	str	r2, [r7, #4]
    becc:	681b      	ldr	r3, [r3, #0]
    bece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    uint n_args = n_args_n_kw & 0xff;
    bed2:	68bb      	ldr	r3, [r7, #8]
    bed4:	b2db      	uxtb	r3, r3
    bed6:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    bed8:	68bb      	ldr	r3, [r7, #8]
    beda:	0a1b      	lsrs	r3, r3, #8
    bedc:	b2db      	uxtb	r3, r3
    bede:	65bb      	str	r3, [r7, #88]	; 0x58
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    bee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bee2:	005a      	lsls	r2, r3, #1
    bee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bee6:	4413      	add	r3, r2
    bee8:	009b      	lsls	r3, r3, #2
    beea:	687a      	ldr	r2, [r7, #4]
    beec:	4413      	add	r3, r2
    beee:	681b      	ldr	r3, [r3, #0]
    bef0:	657b      	str	r3, [r7, #84]	; 0x54
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    bef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bef4:	005a      	lsls	r2, r3, #1
    bef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bef8:	4413      	add	r3, r2
    befa:	3301      	adds	r3, #1
    befc:	009b      	lsls	r3, r3, #2
    befe:	687a      	ldr	r2, [r7, #4]
    bf00:	4413      	add	r3, r2
    bf02:	681b      	ldr	r3, [r3, #0]
    bf04:	653b      	str	r3, [r7, #80]	; 0x50
    // TODO: optimize one day to avoid constructing new arg array? Will be hard.

    // The new args array
    mp_obj_t *args2;
    uint args2_alloc;
    uint args2_len = 0;
    bf06:	2300      	movs	r3, #0
    bf08:	67bb      	str	r3, [r7, #120]	; 0x78

    // Try to get a hint for the size of the kw_dict
    uint kw_dict_len = 0;
    bf0a:	2300      	movs	r3, #0
    bf0c:	677b      	str	r3, [r7, #116]	; 0x74
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    bf0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf10:	2b00      	cmp	r3, #0
    bf12:	d00e      	beq.n	bf32 <mp_call_prepare_args_n_kw_var+0x92>
    bf14:	6d38      	ldr	r0, [r7, #80]	; 0x50
    bf16:	f7ff fa3d 	bl	b394 <MP_OBJ_IS_OBJ>
    bf1a:	4603      	mov	r3, r0
    bf1c:	2b00      	cmp	r3, #0
    bf1e:	d008      	beq.n	bf32 <mp_call_prepare_args_n_kw_var+0x92>
    bf20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf22:	681b      	ldr	r3, [r3, #0]
    bf24:	4ab0      	ldr	r2, [pc, #704]	; (c1e8 <mp_call_prepare_args_n_kw_var+0x348>)
    bf26:	4293      	cmp	r3, r2
    bf28:	d103      	bne.n	bf32 <mp_call_prepare_args_n_kw_var+0x92>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    bf2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    bf2c:	f003 f8f4 	bl	f118 <mp_obj_dict_len>
    bf30:	6778      	str	r0, [r7, #116]	; 0x74
    }

    // Extract the pos_seq sequence to the new args array.
    // Note that it can be arbitrary iterator.
    if (pos_seq == MP_OBJ_NULL) {
    bf32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bf34:	2b00      	cmp	r3, #0
    bf36:	d12c      	bne.n	bf92 <mp_call_prepare_args_n_kw_var+0xf2>
        // no sequence

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    bf38:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bf3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bf3c:	4413      	add	r3, r2
    bf3e:	005a      	lsls	r2, r3, #1
    bf40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf42:	4413      	add	r3, r2
    bf44:	3301      	adds	r3, #1
    bf46:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bf48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bf4a:	009b      	lsls	r3, r3, #2
    bf4c:	4618      	mov	r0, r3
    bf4e:	f7ff fa8b 	bl	b468 <mp_nonlocal_alloc>
    bf52:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bf56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bf5a:	2b00      	cmp	r3, #0
    bf5c:	d009      	beq.n	bf72 <mp_call_prepare_args_n_kw_var+0xd2>
            args2[args2_len++] = self;
    bf5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf60:	1c5a      	adds	r2, r3, #1
    bf62:	67ba      	str	r2, [r7, #120]	; 0x78
    bf64:	009b      	lsls	r3, r3, #2
    bf66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf6a:	4413      	add	r3, r2
    bf6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bf70:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed pos args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    bf72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf74:	009b      	lsls	r3, r3, #2
    bf76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf7a:	18d0      	adds	r0, r2, r3
    bf7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf7e:	009b      	lsls	r3, r3, #2
    bf80:	461a      	mov	r2, r3
    bf82:	6879      	ldr	r1, [r7, #4]
    bf84:	f00f fec6 	bl	1bd14 <memcpy>
        args2_len += n_args;
    bf88:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bf8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf8c:	4413      	add	r3, r2
    bf8e:	67bb      	str	r3, [r7, #120]	; 0x78
    bf90:	e0b1      	b.n	c0f6 <mp_call_prepare_args_n_kw_var+0x256>

    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    bf92:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bf94:	f7ff f9fe 	bl	b394 <MP_OBJ_IS_OBJ>
    bf98:	4603      	mov	r3, r0
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d004      	beq.n	bfa8 <mp_call_prepare_args_n_kw_var+0x108>
    bf9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bfa0:	681b      	ldr	r3, [r3, #0]
    bfa2:	4a92      	ldr	r2, [pc, #584]	; (c1ec <mp_call_prepare_args_n_kw_var+0x34c>)
    bfa4:	4293      	cmp	r3, r2
    bfa6:	d00a      	beq.n	bfbe <mp_call_prepare_args_n_kw_var+0x11e>
    bfa8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bfaa:	f7ff f9f3 	bl	b394 <MP_OBJ_IS_OBJ>
    bfae:	4603      	mov	r3, r0
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d04a      	beq.n	c04a <mp_call_prepare_args_n_kw_var+0x1aa>
    bfb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bfb6:	681b      	ldr	r3, [r3, #0]
    bfb8:	4a8d      	ldr	r2, [pc, #564]	; (c1f0 <mp_call_prepare_args_n_kw_var+0x350>)
    bfba:	4293      	cmp	r3, r2
    bfbc:	d145      	bne.n	c04a <mp_call_prepare_args_n_kw_var+0x1aa>
        // optimise the case of a tuple and list

        // get the items
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(pos_seq, &len, &items);
    bfbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
    bfc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
    bfc6:	4619      	mov	r1, r3
    bfc8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bfca:	f001 fe79 	bl	dcc0 <mp_obj_get_array>

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    bfce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bfd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfd2:	441a      	add	r2, r3
    bfd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
    bfd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bfd8:	440b      	add	r3, r1
    bfda:	005b      	lsls	r3, r3, #1
    bfdc:	4413      	add	r3, r2
    bfde:	3301      	adds	r3, #1
    bfe0:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bfe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfe4:	009b      	lsls	r3, r3, #2
    bfe6:	4618      	mov	r0, r3
    bfe8:	f7ff fa3e 	bl	b468 <mp_nonlocal_alloc>
    bfec:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bff4:	2b00      	cmp	r3, #0
    bff6:	d009      	beq.n	c00c <mp_call_prepare_args_n_kw_var+0x16c>
            args2[args2_len++] = self;
    bff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bffa:	1c5a      	adds	r2, r3, #1
    bffc:	67ba      	str	r2, [r7, #120]	; 0x78
    bffe:	009b      	lsls	r3, r3, #2
    c000:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c004:	4413      	add	r3, r2
    c006:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c00a:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed and variable position args
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    c00c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c00e:	009b      	lsls	r3, r3, #2
    c010:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c014:	18d0      	adds	r0, r2, r3
    c016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c018:	009b      	lsls	r3, r3, #2
    c01a:	461a      	mov	r2, r3
    c01c:	6879      	ldr	r1, [r7, #4]
    c01e:	f00f fe79 	bl	1bd14 <memcpy>
    c022:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c026:	4413      	add	r3, r2
    c028:	009b      	lsls	r3, r3, #2
    c02a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c02e:	18d0      	adds	r0, r2, r3
    c030:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c034:	009b      	lsls	r3, r3, #2
    c036:	461a      	mov	r2, r3
    c038:	f00f fe6c 	bl	1bd14 <memcpy>
        args2_len += n_args + len;
    c03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c03e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c040:	4413      	add	r3, r2
    c042:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c044:	4413      	add	r3, r2
    c046:	67bb      	str	r3, [r7, #120]	; 0x78
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    c048:	e055      	b.n	c0f6 <mp_call_prepare_args_n_kw_var+0x256>

    } else {
        // generic iterator

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    c04a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c04c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c04e:	4413      	add	r3, r2
    c050:	005a      	lsls	r2, r3, #1
    c052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c054:	4413      	add	r3, r2
    c056:	3304      	adds	r3, #4
    c058:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c05a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c05c:	009b      	lsls	r3, r3, #2
    c05e:	4618      	mov	r0, r3
    c060:	f7ff fa02 	bl	b468 <mp_nonlocal_alloc>
    c064:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c06c:	2b00      	cmp	r3, #0
    c06e:	d009      	beq.n	c084 <mp_call_prepare_args_n_kw_var+0x1e4>
            args2[args2_len++] = self;
    c070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c072:	1c5a      	adds	r2, r3, #1
    c074:	67ba      	str	r2, [r7, #120]	; 0x78
    c076:	009b      	lsls	r3, r3, #2
    c078:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c07c:	4413      	add	r3, r2
    c07e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c082:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed position args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    c084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c086:	009b      	lsls	r3, r3, #2
    c088:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c08c:	18d0      	adds	r0, r2, r3
    c08e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c090:	009b      	lsls	r3, r3, #2
    c092:	461a      	mov	r2, r3
    c094:	6879      	ldr	r1, [r7, #4]
    c096:	f00f fe3d 	bl	1bd14 <memcpy>
        args2_len += n_args;
    c09a:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c09c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c09e:	4413      	add	r3, r2
    c0a0:	67bb      	str	r3, [r7, #120]	; 0x78

        // extract the variable position args from the iterator
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    c0a2:	f107 0320 	add.w	r3, r7, #32
    c0a6:	4619      	mov	r1, r3
    c0a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c0aa:	f000 fc27 	bl	c8fc <mp_getiter>
    c0ae:	64f8      	str	r0, [r7, #76]	; 0x4c
        mp_obj_t item;
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c0b0:	e01a      	b.n	c0e8 <mp_call_prepare_args_n_kw_var+0x248>
            if (args2_len >= args2_alloc) {
    c0b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c0b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0b6:	429a      	cmp	r2, r3
    c0b8:	d30d      	bcc.n	c0d6 <mp_call_prepare_args_n_kw_var+0x236>
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), args2_alloc * 2 * sizeof(mp_obj_t));
    c0ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0bc:	0099      	lsls	r1, r3, #2
    c0be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0c0:	00db      	lsls	r3, r3, #3
    c0c2:	461a      	mov	r2, r3
    c0c4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c0c8:	f7ff f9da 	bl	b480 <mp_nonlocal_realloc>
    c0cc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc *= 2;
    c0d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0d2:	005b      	lsls	r3, r3, #1
    c0d4:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            args2[args2_len++] = item;
    c0d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0d8:	1c5a      	adds	r2, r3, #1
    c0da:	67ba      	str	r2, [r7, #120]	; 0x78
    c0dc:	009b      	lsls	r3, r3, #2
    c0de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0e2:	4413      	add	r3, r2
    c0e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c0e6:	601a      	str	r2, [r3, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c0e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c0ea:	f000 fc89 	bl	ca00 <mp_iternext>
    c0ee:	64b8      	str	r0, [r7, #72]	; 0x48
    c0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c0f2:	2b04      	cmp	r3, #4
    c0f4:	d1dd      	bne.n	c0b2 <mp_call_prepare_args_n_kw_var+0x212>
        }
    }

    // The size of the args2 array now is the number of positional args.
    uint pos_args_len = args2_len;
    c0f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0f8:	647b      	str	r3, [r7, #68]	; 0x44

    // Copy the fixed kw args.
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    c0fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0fc:	009b      	lsls	r3, r3, #2
    c0fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c102:	18d0      	adds	r0, r2, r3
    c104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c106:	009b      	lsls	r3, r3, #2
    c108:	687a      	ldr	r2, [r7, #4]
    c10a:	18d1      	adds	r1, r2, r3
    c10c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c10e:	00db      	lsls	r3, r3, #3
    c110:	461a      	mov	r2, r3
    c112:	f00f fdff 	bl	1bd14 <memcpy>
    args2_len += 2 * n_kw;
    c116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c118:	005b      	lsls	r3, r3, #1
    c11a:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c11c:	4413      	add	r3, r2
    c11e:	67bb      	str	r3, [r7, #120]	; 0x78

    // Extract (key,value) pairs from kw_dict dictionary and append to args2.
    // Note that it can be arbitrary iterator.
    if (kw_dict == MP_OBJ_NULL) {
    c120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c122:	2b00      	cmp	r3, #0
    c124:	f000 80d2 	beq.w	c2cc <mp_call_prepare_args_n_kw_var+0x42c>
        // pass
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c128:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c12a:	f7ff f933 	bl	b394 <MP_OBJ_IS_OBJ>
    c12e:	4603      	mov	r3, r0
    c130:	2b00      	cmp	r3, #0
    c132:	d065      	beq.n	c200 <mp_call_prepare_args_n_kw_var+0x360>
    c134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	4a2b      	ldr	r2, [pc, #172]	; (c1e8 <mp_call_prepare_args_n_kw_var+0x348>)
    c13a:	4293      	cmp	r3, r2
    c13c:	d160      	bne.n	c200 <mp_call_prepare_args_n_kw_var+0x360>
        // dictionary
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    c13e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c140:	f7ff f970 	bl	b424 <mp_obj_dict_get_map>
    c144:	6438      	str	r0, [r7, #64]	; 0x40
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    c146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c148:	681b      	ldr	r3, [r3, #0]
    c14a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c14e:	005b      	lsls	r3, r3, #1
    c150:	461a      	mov	r2, r3
    c152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c154:	441a      	add	r2, r3
    c156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c158:	429a      	cmp	r2, r3
    c15a:	d906      	bls.n	c16a <mp_call_prepare_args_n_kw_var+0x2ca>
    c15c:	4b25      	ldr	r3, [pc, #148]	; (c1f4 <mp_call_prepare_args_n_kw_var+0x354>)
    c15e:	4a26      	ldr	r2, [pc, #152]	; (c1f8 <mp_call_prepare_args_n_kw_var+0x358>)
    c160:	f240 21eb 	movw	r1, #747	; 0x2eb
    c164:	4825      	ldr	r0, [pc, #148]	; (c1fc <mp_call_prepare_args_n_kw_var+0x35c>)
    c166:	f00f f919 	bl	1b39c <__assert_func>
        for (size_t i = 0; i < map->alloc; i++) {
    c16a:	2300      	movs	r3, #0
    c16c:	673b      	str	r3, [r7, #112]	; 0x70
    c16e:	e034      	b.n	c1da <mp_call_prepare_args_n_kw_var+0x33a>
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c170:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c172:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c174:	f7ff f920 	bl	b3b8 <MP_MAP_SLOT_IS_FILLED>
    c178:	4603      	mov	r3, r0
    c17a:	2b00      	cmp	r3, #0
    c17c:	d02a      	beq.n	c1d4 <mp_call_prepare_args_n_kw_var+0x334>
                // the key must be a qstr, so intern it if it's a string
                mp_obj_t key = map->table[i].key;
    c17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c180:	689a      	ldr	r2, [r3, #8]
    c182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c184:	00db      	lsls	r3, r3, #3
    c186:	4413      	add	r3, r2
    c188:	681b      	ldr	r3, [r3, #0]
    c18a:	66fb      	str	r3, [r7, #108]	; 0x6c
                if (!MP_OBJ_IS_QSTR(key)) {
    c18c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c18e:	f7ff f8ef 	bl	b370 <MP_OBJ_IS_QSTR>
    c192:	4603      	mov	r3, r0
    c194:	f083 0301 	eor.w	r3, r3, #1
    c198:	b2db      	uxtb	r3, r3
    c19a:	2b00      	cmp	r3, #0
    c19c:	d003      	beq.n	c1a6 <mp_call_prepare_args_n_kw_var+0x306>
                    key = mp_obj_str_intern_checked(key);
    c19e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c1a0:	f009 f93c 	bl	1541c <mp_obj_str_intern_checked>
    c1a4:	66f8      	str	r0, [r7, #108]	; 0x6c
                }
                args2[args2_len++] = key;
    c1a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1a8:	1c5a      	adds	r2, r3, #1
    c1aa:	67ba      	str	r2, [r7, #120]	; 0x78
    c1ac:	009b      	lsls	r3, r3, #2
    c1ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1b2:	4413      	add	r3, r2
    c1b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    c1b6:	601a      	str	r2, [r3, #0]
                args2[args2_len++] = map->table[i].value;
    c1b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1ba:	1c5a      	adds	r2, r3, #1
    c1bc:	67ba      	str	r2, [r7, #120]	; 0x78
    c1be:	009b      	lsls	r3, r3, #2
    c1c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1c4:	4413      	add	r3, r2
    c1c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c1c8:	6891      	ldr	r1, [r2, #8]
    c1ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c1cc:	00d2      	lsls	r2, r2, #3
    c1ce:	440a      	add	r2, r1
    c1d0:	6852      	ldr	r2, [r2, #4]
    c1d2:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < map->alloc; i++) {
    c1d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c1d6:	3301      	adds	r3, #1
    c1d8:	673b      	str	r3, [r7, #112]	; 0x70
    c1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c1dc:	685a      	ldr	r2, [r3, #4]
    c1de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c1e0:	429a      	cmp	r2, r3
    c1e2:	d8c5      	bhi.n	c170 <mp_call_prepare_args_n_kw_var+0x2d0>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c1e4:	e072      	b.n	c2cc <mp_call_prepare_args_n_kw_var+0x42c>
    c1e6:	bf00      	nop
    c1e8:	000200e0 	.word	0x000200e0
    c1ec:	00021db4 	.word	0x00021db4
    c1f0:	000211a8 	.word	0x000211a8
    c1f4:	0001f708 	.word	0x0001f708
    c1f8:	0001f8d4 	.word	0x0001f8d4
    c1fc:	0001f66c 	.word	0x0001f66c
        // - call keys() to get an iterable of all keys in the mapping
        // - call __getitem__ for each key to get the corresponding value

        // get the keys iterable
        mp_obj_t dest[3];
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    c200:	f107 0314 	add.w	r3, r7, #20
    c204:	461a      	mov	r2, r3
    c206:	21a7      	movs	r1, #167	; 0xa7
    c208:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c20a:	f000 faff 	bl	c80c <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    c20e:	f107 0314 	add.w	r3, r7, #20
    c212:	461a      	mov	r2, r3
    c214:	2100      	movs	r1, #0
    c216:	2000      	movs	r0, #0
    c218:	f7ff fe1e 	bl	be58 <mp_call_method_n_kw>
    c21c:	4603      	mov	r3, r0
    c21e:	2100      	movs	r1, #0
    c220:	4618      	mov	r0, r3
    c222:	f000 fb6b 	bl	c8fc <mp_getiter>
    c226:	63f8      	str	r0, [r7, #60]	; 0x3c

        mp_obj_t key;
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c228:	e049      	b.n	c2be <mp_call_prepare_args_n_kw_var+0x41e>
            // expand size of args array if needed
            if (args2_len + 1 >= args2_alloc) {
    c22a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c22c:	1c5a      	adds	r2, r3, #1
    c22e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c230:	429a      	cmp	r2, r3
    c232:	d314      	bcc.n	c25e <mp_call_prepare_args_n_kw_var+0x3be>
                uint new_alloc = args2_alloc * 2;
    c234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c236:	005b      	lsls	r3, r3, #1
    c238:	667b      	str	r3, [r7, #100]	; 0x64
                if (new_alloc < 4) {
    c23a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c23c:	2b03      	cmp	r3, #3
    c23e:	d801      	bhi.n	c244 <mp_call_prepare_args_n_kw_var+0x3a4>
                    new_alloc = 4;
    c240:	2304      	movs	r3, #4
    c242:	667b      	str	r3, [r7, #100]	; 0x64
                }
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), new_alloc * sizeof(mp_obj_t));
    c244:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c246:	0099      	lsls	r1, r3, #2
    c248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c24a:	009b      	lsls	r3, r3, #2
    c24c:	461a      	mov	r2, r3
    c24e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c252:	f7ff f915 	bl	b480 <mp_nonlocal_realloc>
    c256:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc = new_alloc;
    c25a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c25c:	67fb      	str	r3, [r7, #124]	; 0x7c
            }

            // the key must be a qstr, so intern it if it's a string
            if (!MP_OBJ_IS_QSTR(key)) {
    c25e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c260:	f7ff f886 	bl	b370 <MP_OBJ_IS_QSTR>
    c264:	4603      	mov	r3, r0
    c266:	f083 0301 	eor.w	r3, r3, #1
    c26a:	b2db      	uxtb	r3, r3
    c26c:	2b00      	cmp	r3, #0
    c26e:	d003      	beq.n	c278 <mp_call_prepare_args_n_kw_var+0x3d8>
                key = mp_obj_str_intern_checked(key);
    c270:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c272:	f009 f8d3 	bl	1541c <mp_obj_str_intern_checked>
    c276:	66b8      	str	r0, [r7, #104]	; 0x68
            }

            // get the value corresponding to the key
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    c278:	f107 0314 	add.w	r3, r7, #20
    c27c:	461a      	mov	r2, r3
    c27e:	210e      	movs	r1, #14
    c280:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c282:	f000 fac3 	bl	c80c <mp_load_method>
            dest[2] = key;
    c286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c288:	61fb      	str	r3, [r7, #28]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    c28a:	f107 0314 	add.w	r3, r7, #20
    c28e:	461a      	mov	r2, r3
    c290:	2100      	movs	r1, #0
    c292:	2001      	movs	r0, #1
    c294:	f7ff fde0 	bl	be58 <mp_call_method_n_kw>
    c298:	63b8      	str	r0, [r7, #56]	; 0x38

            // store the key/value pair in the argument array
            args2[args2_len++] = key;
    c29a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c29c:	1c5a      	adds	r2, r3, #1
    c29e:	67ba      	str	r2, [r7, #120]	; 0x78
    c2a0:	009b      	lsls	r3, r3, #2
    c2a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2a6:	4413      	add	r3, r2
    c2a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c2aa:	601a      	str	r2, [r3, #0]
            args2[args2_len++] = value;
    c2ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2ae:	1c5a      	adds	r2, r3, #1
    c2b0:	67ba      	str	r2, [r7, #120]	; 0x78
    c2b2:	009b      	lsls	r3, r3, #2
    c2b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2b8:	4413      	add	r3, r2
    c2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c2bc:	601a      	str	r2, [r3, #0]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c2be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c2c0:	f000 fb9e 	bl	ca00 <mp_iternext>
    c2c4:	66b8      	str	r0, [r7, #104]	; 0x68
    c2c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c2c8:	2b04      	cmp	r3, #4
    c2ca:	d1ae      	bne.n	c22a <mp_call_prepare_args_n_kw_var+0x38a>
        }
    }

    out_args->fun = fun;
    c2cc:	683b      	ldr	r3, [r7, #0]
    c2ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c2d0:	601a      	str	r2, [r3, #0]
    out_args->args = args2;
    c2d2:	683b      	ldr	r3, [r7, #0]
    c2d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2d8:	611a      	str	r2, [r3, #16]
    out_args->n_args = pos_args_len;
    c2da:	683b      	ldr	r3, [r7, #0]
    c2dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c2de:	605a      	str	r2, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    c2e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c2e4:	1ad3      	subs	r3, r2, r3
    c2e6:	085a      	lsrs	r2, r3, #1
    c2e8:	683b      	ldr	r3, [r7, #0]
    c2ea:	609a      	str	r2, [r3, #8]
    out_args->n_alloc = args2_alloc;
    c2ec:	683b      	ldr	r3, [r7, #0]
    c2ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    c2f0:	60da      	str	r2, [r3, #12]
}
    c2f2:	bf00      	nop
    c2f4:	3788      	adds	r7, #136	; 0x88
    c2f6:	46bd      	mov	sp, r7
    c2f8:	bd80      	pop	{r7, pc}
    c2fa:	bf00      	nop

0000c2fc <mp_call_method_n_kw_var>:

mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    c2fc:	b580      	push	{r7, lr}
    c2fe:	b08a      	sub	sp, #40	; 0x28
    c300:	af00      	add	r7, sp, #0
    c302:	4603      	mov	r3, r0
    c304:	60b9      	str	r1, [r7, #8]
    c306:	607a      	str	r2, [r7, #4]
    c308:	73fb      	strb	r3, [r7, #15]
    mp_call_args_t out_args;
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    c30a:	f107 0310 	add.w	r3, r7, #16
    c30e:	7bf8      	ldrb	r0, [r7, #15]
    c310:	687a      	ldr	r2, [r7, #4]
    c312:	68b9      	ldr	r1, [r7, #8]
    c314:	f7ff fdc4 	bl	bea0 <mp_call_prepare_args_n_kw_var>

    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    c318:	6938      	ldr	r0, [r7, #16]
    c31a:	6979      	ldr	r1, [r7, #20]
    c31c:	69ba      	ldr	r2, [r7, #24]
    c31e:	6a3b      	ldr	r3, [r7, #32]
    c320:	f7ff fd78 	bl	be14 <mp_call_function_n_kw>
    c324:	6278      	str	r0, [r7, #36]	; 0x24
    mp_nonlocal_free(out_args.args, out_args.n_alloc * sizeof(mp_obj_t));
    c326:	6a3a      	ldr	r2, [r7, #32]
    c328:	69fb      	ldr	r3, [r7, #28]
    c32a:	009b      	lsls	r3, r3, #2
    c32c:	4619      	mov	r1, r3
    c32e:	4610      	mov	r0, r2
    c330:	f7ff f8b6 	bl	b4a0 <mp_nonlocal_free>

    return res;
    c334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c336:	4618      	mov	r0, r3
    c338:	3728      	adds	r7, #40	; 0x28
    c33a:	46bd      	mov	sp, r7
    c33c:	bd80      	pop	{r7, pc}
    c33e:	bf00      	nop

0000c340 <mp_unpack_sequence>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    c340:	b580      	push	{r7, lr}
    c342:	b08e      	sub	sp, #56	; 0x38
    c344:	af00      	add	r7, sp, #0
    c346:	60f8      	str	r0, [r7, #12]
    c348:	60b9      	str	r1, [r7, #8]
    c34a:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c34c:	68f8      	ldr	r0, [r7, #12]
    c34e:	f7ff f821 	bl	b394 <MP_OBJ_IS_OBJ>
    c352:	4603      	mov	r3, r0
    c354:	2b00      	cmp	r3, #0
    c356:	d004      	beq.n	c362 <mp_unpack_sequence+0x22>
    c358:	68fb      	ldr	r3, [r7, #12]
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	4a38      	ldr	r2, [pc, #224]	; (c440 <mp_unpack_sequence+0x100>)
    c35e:	4293      	cmp	r3, r2
    c360:	d00a      	beq.n	c378 <mp_unpack_sequence+0x38>
    c362:	68f8      	ldr	r0, [r7, #12]
    c364:	f7ff f816 	bl	b394 <MP_OBJ_IS_OBJ>
    c368:	4603      	mov	r3, r0
    c36a:	2b00      	cmp	r3, #0
    c36c:	d02e      	beq.n	c3cc <mp_unpack_sequence+0x8c>
    c36e:	68fb      	ldr	r3, [r7, #12]
    c370:	681b      	ldr	r3, [r3, #0]
    c372:	4a34      	ldr	r2, [pc, #208]	; (c444 <mp_unpack_sequence+0x104>)
    c374:	4293      	cmp	r3, r2
    c376:	d129      	bne.n	c3cc <mp_unpack_sequence+0x8c>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c378:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c37c:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c380:	4619      	mov	r1, r3
    c382:	68f8      	ldr	r0, [r7, #12]
    c384:	f001 fc9c 	bl	dcc0 <mp_obj_get_array>
        if (seq_len < num) {
    c388:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c38a:	68bb      	ldr	r3, [r7, #8]
    c38c:	429a      	cmp	r2, r3
    c38e:	d348      	bcc.n	c422 <mp_unpack_sequence+0xe2>
            goto too_short;
        } else if (seq_len > num) {
    c390:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c392:	68bb      	ldr	r3, [r7, #8]
    c394:	429a      	cmp	r2, r3
    c396:	d84a      	bhi.n	c42e <mp_unpack_sequence+0xee>
            goto too_long;
        }
        for (size_t i = 0; i < num; i++) {
    c398:	2300      	movs	r3, #0
    c39a:	637b      	str	r3, [r7, #52]	; 0x34
    c39c:	e011      	b.n	c3c2 <mp_unpack_sequence+0x82>
            items[i] = seq_items[num - 1 - i];
    c39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3a0:	009b      	lsls	r3, r3, #2
    c3a2:	687a      	ldr	r2, [r7, #4]
    c3a4:	441a      	add	r2, r3
    c3a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c3a8:	68b8      	ldr	r0, [r7, #8]
    c3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3ac:	1ac3      	subs	r3, r0, r3
    c3ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c3b2:	3b01      	subs	r3, #1
    c3b4:	009b      	lsls	r3, r3, #2
    c3b6:	440b      	add	r3, r1
    c3b8:	681b      	ldr	r3, [r3, #0]
    c3ba:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num; i++) {
    c3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3be:	3301      	adds	r3, #1
    c3c0:	637b      	str	r3, [r7, #52]	; 0x34
    c3c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c3c4:	68bb      	ldr	r3, [r7, #8]
    c3c6:	429a      	cmp	r2, r3
    c3c8:	d3e9      	bcc.n	c39e <mp_unpack_sequence+0x5e>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c3ca:	e029      	b.n	c420 <mp_unpack_sequence+0xe0>
        }
    } else {
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    c3cc:	f107 0314 	add.w	r3, r7, #20
    c3d0:	4619      	mov	r1, r3
    c3d2:	68f8      	ldr	r0, [r7, #12]
    c3d4:	f000 fa92 	bl	c8fc <mp_getiter>
    c3d8:	6338      	str	r0, [r7, #48]	; 0x30

        for (seq_len = 0; seq_len < num; seq_len++) {
    c3da:	2300      	movs	r3, #0
    c3dc:	62bb      	str	r3, [r7, #40]	; 0x28
    c3de:	e014      	b.n	c40a <mp_unpack_sequence+0xca>
            mp_obj_t el = mp_iternext(iterable);
    c3e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c3e2:	f000 fb0d 	bl	ca00 <mp_iternext>
    c3e6:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (el == MP_OBJ_STOP_ITERATION) {
    c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c3ea:	2b04      	cmp	r3, #4
    c3ec:	d01b      	beq.n	c426 <mp_unpack_sequence+0xe6>
                goto too_short;
            }
            items[num - 1 - seq_len] = el;
    c3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3f0:	68ba      	ldr	r2, [r7, #8]
    c3f2:	1ad3      	subs	r3, r2, r3
    c3f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c3f8:	3b01      	subs	r3, #1
    c3fa:	009b      	lsls	r3, r3, #2
    c3fc:	687a      	ldr	r2, [r7, #4]
    c3fe:	4413      	add	r3, r2
    c400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c402:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num; seq_len++) {
    c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c406:	3301      	adds	r3, #1
    c408:	62bb      	str	r3, [r7, #40]	; 0x28
    c40a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c40c:	68bb      	ldr	r3, [r7, #8]
    c40e:	429a      	cmp	r2, r3
    c410:	d3e6      	bcc.n	c3e0 <mp_unpack_sequence+0xa0>
        }
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    c412:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c414:	f000 faf4 	bl	ca00 <mp_iternext>
    c418:	4603      	mov	r3, r0
    c41a:	2b04      	cmp	r3, #4
    c41c:	d00b      	beq.n	c436 <mp_unpack_sequence+0xf6>
            goto too_long;
    c41e:	e007      	b.n	c430 <mp_unpack_sequence+0xf0>
        }
    }
    return;
    c420:	e009      	b.n	c436 <mp_unpack_sequence+0xf6>
            goto too_short;
    c422:	bf00      	nop
    c424:	e000      	b.n	c428 <mp_unpack_sequence+0xe8>
                goto too_short;
    c426:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c428:	4807      	ldr	r0, [pc, #28]	; (c448 <mp_unpack_sequence+0x108>)
    c42a:	f000 fdab 	bl	cf84 <mp_raise_ValueError>
            goto too_long;
    c42e:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
too_long:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c430:	4805      	ldr	r0, [pc, #20]	; (c448 <mp_unpack_sequence+0x108>)
    c432:	f000 fda7 	bl	cf84 <mp_raise_ValueError>
    return;
    c436:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "too many values to unpack (expected %d)", (int)num));
    }
}
    c438:	3738      	adds	r7, #56	; 0x38
    c43a:	46bd      	mov	sp, r7
    c43c:	bd80      	pop	{r7, pc}
    c43e:	bf00      	nop
    c440:	00021db4 	.word	0x00021db4
    c444:	000211a8 	.word	0x000211a8
    c448:	0001f734 	.word	0x0001f734

0000c44c <mp_unpack_ex>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    c44c:	b590      	push	{r4, r7, lr}
    c44e:	b08f      	sub	sp, #60	; 0x3c
    c450:	af00      	add	r7, sp, #0
    c452:	60f8      	str	r0, [r7, #12]
    c454:	60b9      	str	r1, [r7, #8]
    c456:	607a      	str	r2, [r7, #4]
    size_t num_left = num_in & 0xff;
    c458:	68bb      	ldr	r3, [r7, #8]
    c45a:	b2db      	uxtb	r3, r3
    c45c:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t num_right = (num_in >> 8) & 0xff;
    c45e:	68bb      	ldr	r3, [r7, #8]
    c460:	0a1b      	lsrs	r3, r3, #8
    c462:	b2db      	uxtb	r3, r3
    c464:	627b      	str	r3, [r7, #36]	; 0x24
    DEBUG_OP_printf("unpack ex " UINT_FMT " " UINT_FMT "\n", num_left, num_right);
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c466:	68f8      	ldr	r0, [r7, #12]
    c468:	f7fe ff94 	bl	b394 <MP_OBJ_IS_OBJ>
    c46c:	4603      	mov	r3, r0
    c46e:	2b00      	cmp	r3, #0
    c470:	d004      	beq.n	c47c <mp_unpack_ex+0x30>
    c472:	68fb      	ldr	r3, [r7, #12]
    c474:	681b      	ldr	r3, [r3, #0]
    c476:	4a6a      	ldr	r2, [pc, #424]	; (c620 <mp_unpack_ex+0x1d4>)
    c478:	4293      	cmp	r3, r2
    c47a:	d00a      	beq.n	c492 <mp_unpack_ex+0x46>
    c47c:	68f8      	ldr	r0, [r7, #12]
    c47e:	f7fe ff89 	bl	b394 <MP_OBJ_IS_OBJ>
    c482:	4603      	mov	r3, r0
    c484:	2b00      	cmp	r3, #0
    c486:	d05b      	beq.n	c540 <mp_unpack_ex+0xf4>
    c488:	68fb      	ldr	r3, [r7, #12]
    c48a:	681b      	ldr	r3, [r3, #0]
    c48c:	4a65      	ldr	r2, [pc, #404]	; (c624 <mp_unpack_ex+0x1d8>)
    c48e:	4293      	cmp	r3, r2
    c490:	d156      	bne.n	c540 <mp_unpack_ex+0xf4>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c492:	f107 0210 	add.w	r2, r7, #16
    c496:	f107 0314 	add.w	r3, r7, #20
    c49a:	4619      	mov	r1, r3
    c49c:	68f8      	ldr	r0, [r7, #12]
    c49e:	f001 fc0f 	bl	dcc0 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    c4a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4a6:	441a      	add	r2, r3
    c4a8:	697b      	ldr	r3, [r7, #20]
    c4aa:	429a      	cmp	r2, r3
    c4ac:	f200 80ad 	bhi.w	c60a <mp_unpack_ex+0x1be>
            goto too_short;
        }
        for (size_t i = 0; i < num_right; i++) {
    c4b0:	2300      	movs	r3, #0
    c4b2:	637b      	str	r3, [r7, #52]	; 0x34
    c4b4:	e011      	b.n	c4da <mp_unpack_ex+0x8e>
            items[i] = seq_items[seq_len - 1 - i];
    c4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c4b8:	009b      	lsls	r3, r3, #2
    c4ba:	687a      	ldr	r2, [r7, #4]
    c4bc:	441a      	add	r2, r3
    c4be:	6939      	ldr	r1, [r7, #16]
    c4c0:	6978      	ldr	r0, [r7, #20]
    c4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c4c4:	1ac3      	subs	r3, r0, r3
    c4c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c4ca:	3b01      	subs	r3, #1
    c4cc:	009b      	lsls	r3, r3, #2
    c4ce:	440b      	add	r3, r1
    c4d0:	681b      	ldr	r3, [r3, #0]
    c4d2:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_right; i++) {
    c4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c4d6:	3301      	adds	r3, #1
    c4d8:	637b      	str	r3, [r7, #52]	; 0x34
    c4da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4de:	429a      	cmp	r2, r3
    c4e0:	d3e9      	bcc.n	c4b6 <mp_unpack_ex+0x6a>
        }
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4e4:	009b      	lsls	r3, r3, #2
    c4e6:	687a      	ldr	r2, [r7, #4]
    c4e8:	18d4      	adds	r4, r2, r3
    c4ea:	697a      	ldr	r2, [r7, #20]
    c4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c4ee:	1ad2      	subs	r2, r2, r3
    c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4f2:	1ad0      	subs	r0, r2, r3
    c4f4:	693a      	ldr	r2, [r7, #16]
    c4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c4f8:	009b      	lsls	r3, r3, #2
    c4fa:	4413      	add	r3, r2
    c4fc:	4619      	mov	r1, r3
    c4fe:	f005 f9e3 	bl	118c8 <mp_obj_new_list>
    c502:	4603      	mov	r3, r0
    c504:	6023      	str	r3, [r4, #0]
        for (size_t i = 0; i < num_left; i++) {
    c506:	2300      	movs	r3, #0
    c508:	633b      	str	r3, [r7, #48]	; 0x30
    c50a:	e014      	b.n	c536 <mp_unpack_ex+0xea>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    c50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c510:	4413      	add	r3, r2
    c512:	3301      	adds	r3, #1
    c514:	009b      	lsls	r3, r3, #2
    c516:	687a      	ldr	r2, [r7, #4]
    c518:	441a      	add	r2, r3
    c51a:	6939      	ldr	r1, [r7, #16]
    c51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c520:	1ac3      	subs	r3, r0, r3
    c522:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c526:	3b01      	subs	r3, #1
    c528:	009b      	lsls	r3, r3, #2
    c52a:	440b      	add	r3, r1
    c52c:	681b      	ldr	r3, [r3, #0]
    c52e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_left; i++) {
    c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c532:	3301      	adds	r3, #1
    c534:	633b      	str	r3, [r7, #48]	; 0x30
    c536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c53a:	429a      	cmp	r2, r3
    c53c:	d3e6      	bcc.n	c50c <mp_unpack_ex+0xc0>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c53e:	e063      	b.n	c608 <mp_unpack_ex+0x1bc>
    } else {
        // Generic iterable; this gets a bit messy: we unpack known left length to the
        // items destination array, then the rest to a dynamically created list.  Once the
        // iterable is exhausted, we take from this list for the right part of the items.
        // TODO Improve to waste less memory in the dynamically created list.
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    c540:	2100      	movs	r1, #0
    c542:	68f8      	ldr	r0, [r7, #12]
    c544:	f000 f9da 	bl	c8fc <mp_getiter>
    c548:	6238      	str	r0, [r7, #32]
        mp_obj_t item;
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c54a:	2300      	movs	r3, #0
    c54c:	617b      	str	r3, [r7, #20]
    c54e:	e013      	b.n	c578 <mp_unpack_ex+0x12c>
            item = mp_iternext(iterable);
    c550:	6a38      	ldr	r0, [r7, #32]
    c552:	f000 fa55 	bl	ca00 <mp_iternext>
    c556:	61f8      	str	r0, [r7, #28]
            if (item == MP_OBJ_STOP_ITERATION) {
    c558:	69fb      	ldr	r3, [r7, #28]
    c55a:	2b04      	cmp	r3, #4
    c55c:	d057      	beq.n	c60e <mp_unpack_ex+0x1c2>
                goto too_short;
            }
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    c55e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c562:	441a      	add	r2, r3
    c564:	697b      	ldr	r3, [r7, #20]
    c566:	1ad3      	subs	r3, r2, r3
    c568:	009b      	lsls	r3, r3, #2
    c56a:	687a      	ldr	r2, [r7, #4]
    c56c:	4413      	add	r3, r2
    c56e:	69fa      	ldr	r2, [r7, #28]
    c570:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c572:	697b      	ldr	r3, [r7, #20]
    c574:	3301      	adds	r3, #1
    c576:	617b      	str	r3, [r7, #20]
    c578:	697a      	ldr	r2, [r7, #20]
    c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c57c:	429a      	cmp	r2, r3
    c57e:	d3e7      	bcc.n	c550 <mp_unpack_ex+0x104>
        }
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    c580:	2100      	movs	r1, #0
    c582:	2000      	movs	r0, #0
    c584:	f005 f9a0 	bl	118c8 <mp_obj_new_list>
    c588:	61b8      	str	r0, [r7, #24]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c58a:	e003      	b.n	c594 <mp_unpack_ex+0x148>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    c58c:	69f9      	ldr	r1, [r7, #28]
    c58e:	69b8      	ldr	r0, [r7, #24]
    c590:	f004 fd08 	bl	10fa4 <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c594:	6a38      	ldr	r0, [r7, #32]
    c596:	f000 fa33 	bl	ca00 <mp_iternext>
    c59a:	61f8      	str	r0, [r7, #28]
    c59c:	69fb      	ldr	r3, [r7, #28]
    c59e:	2b04      	cmp	r3, #4
    c5a0:	d1f4      	bne.n	c58c <mp_unpack_ex+0x140>
        }
        if (rest->len < num_right) {
    c5a2:	69bb      	ldr	r3, [r7, #24]
    c5a4:	689a      	ldr	r2, [r3, #8]
    c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5a8:	429a      	cmp	r2, r3
    c5aa:	d332      	bcc.n	c612 <mp_unpack_ex+0x1c6>
            goto too_short;
        }
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    c5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5ae:	009b      	lsls	r3, r3, #2
    c5b0:	687a      	ldr	r2, [r7, #4]
    c5b2:	4413      	add	r3, r2
    c5b4:	69ba      	ldr	r2, [r7, #24]
    c5b6:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c5b8:	2300      	movs	r3, #0
    c5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    c5bc:	e017      	b.n	c5ee <mp_unpack_ex+0x1a2>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    c5be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5c2:	1ad3      	subs	r3, r2, r3
    c5c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c5c8:	3b01      	subs	r3, #1
    c5ca:	009b      	lsls	r3, r3, #2
    c5cc:	687a      	ldr	r2, [r7, #4]
    c5ce:	4413      	add	r3, r2
    c5d0:	69ba      	ldr	r2, [r7, #24]
    c5d2:	68d1      	ldr	r1, [r2, #12]
    c5d4:	69ba      	ldr	r2, [r7, #24]
    c5d6:	6890      	ldr	r0, [r2, #8]
    c5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c5da:	1a80      	subs	r0, r0, r2
    c5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c5de:	4402      	add	r2, r0
    c5e0:	0092      	lsls	r2, r2, #2
    c5e2:	440a      	add	r2, r1
    c5e4:	6812      	ldr	r2, [r2, #0]
    c5e6:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5ea:	3301      	adds	r3, #1
    c5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    c5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5f2:	429a      	cmp	r2, r3
    c5f4:	d3e3      	bcc.n	c5be <mp_unpack_ex+0x172>
        }
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    c5f6:	69bb      	ldr	r3, [r7, #24]
    c5f8:	689a      	ldr	r2, [r3, #8]
    c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5fc:	1ad3      	subs	r3, r2, r3
    c5fe:	4619      	mov	r1, r3
    c600:	69b8      	ldr	r0, [r7, #24]
    c602:	f005 f99d 	bl	11940 <mp_obj_list_set_len>
    }
    return;
    c606:	e008      	b.n	c61a <mp_unpack_ex+0x1ce>
    c608:	e007      	b.n	c61a <mp_unpack_ex+0x1ce>
            goto too_short;
    c60a:	bf00      	nop
    c60c:	e002      	b.n	c614 <mp_unpack_ex+0x1c8>
                goto too_short;
    c60e:	bf00      	nop
    c610:	e000      	b.n	c614 <mp_unpack_ex+0x1c8>
            goto too_short;
    c612:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c614:	4804      	ldr	r0, [pc, #16]	; (c628 <mp_unpack_ex+0x1dc>)
    c616:	f000 fcb5 	bl	cf84 <mp_raise_ValueError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
}
    c61a:	373c      	adds	r7, #60	; 0x3c
    c61c:	46bd      	mov	sp, r7
    c61e:	bd90      	pop	{r4, r7, pc}
    c620:	00021db4 	.word	0x00021db4
    c624:	000211a8 	.word	0x000211a8
    c628:	0001f734 	.word	0x0001f734

0000c62c <mp_load_attr>:

mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    c62c:	b580      	push	{r7, lr}
    c62e:	b084      	sub	sp, #16
    c630:	af00      	add	r7, sp, #0
    c632:	6078      	str	r0, [r7, #4]
    c634:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("load attr %p.%s\n", base, qstr_str(attr));
    // use load_method
    mp_obj_t dest[2];
    mp_load_method(base, attr, dest);
    c636:	f107 0308 	add.w	r3, r7, #8
    c63a:	461a      	mov	r2, r3
    c63c:	6839      	ldr	r1, [r7, #0]
    c63e:	6878      	ldr	r0, [r7, #4]
    c640:	f000 f8e4 	bl	c80c <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    c644:	68fb      	ldr	r3, [r7, #12]
    c646:	2b00      	cmp	r3, #0
    c648:	d101      	bne.n	c64e <mp_load_attr+0x22>
        // load_method returned just a normal attribute
        return dest[0];
    c64a:	68bb      	ldr	r3, [r7, #8]
    c64c:	e006      	b.n	c65c <mp_load_attr+0x30>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    c64e:	68bb      	ldr	r3, [r7, #8]
    c650:	68fa      	ldr	r2, [r7, #12]
    c652:	4611      	mov	r1, r2
    c654:	4618      	mov	r0, r3
    c656:	f001 fde5 	bl	e224 <mp_obj_new_bound_meth>
    c65a:	4603      	mov	r3, r0
    }
}
    c65c:	4618      	mov	r0, r3
    c65e:	3710      	adds	r7, #16
    c660:	46bd      	mov	sp, r7
    c662:	bd80      	pop	{r7, pc}

0000c664 <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    c664:	b580      	push	{r7, lr}
    c666:	b084      	sub	sp, #16
    c668:	af00      	add	r7, sp, #0
    c66a:	60f8      	str	r0, [r7, #12]
    c66c:	60b9      	str	r1, [r7, #8]
    c66e:	607a      	str	r2, [r7, #4]
    c670:	603b      	str	r3, [r7, #0]
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    c672:	6878      	ldr	r0, [r7, #4]
    c674:	f7fe fe8e 	bl	b394 <MP_OBJ_IS_OBJ>
    c678:	4603      	mov	r3, r0
    c67a:	2b00      	cmp	r3, #0
    c67c:	d009      	beq.n	c692 <mp_convert_member_lookup+0x2e>
    c67e:	687b      	ldr	r3, [r7, #4]
    c680:	681b      	ldr	r3, [r3, #0]
    c682:	4a2e      	ldr	r2, [pc, #184]	; (c73c <mp_convert_member_lookup+0xd8>)
    c684:	4293      	cmp	r3, r2
    c686:	d104      	bne.n	c692 <mp_convert_member_lookup+0x2e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c688:	687b      	ldr	r3, [r7, #4]
    c68a:	685a      	ldr	r2, [r3, #4]
    c68c:	683b      	ldr	r3, [r7, #0]
    c68e:	601a      	str	r2, [r3, #0]
    c690:	e04f      	b.n	c732 <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    c692:	6878      	ldr	r0, [r7, #4]
    c694:	f7fe fe7e 	bl	b394 <MP_OBJ_IS_OBJ>
    c698:	4603      	mov	r3, r0
    c69a:	2b00      	cmp	r3, #0
    c69c:	d014      	beq.n	c6c8 <mp_convert_member_lookup+0x64>
    c69e:	687b      	ldr	r3, [r7, #4]
    c6a0:	681b      	ldr	r3, [r3, #0]
    c6a2:	4a27      	ldr	r2, [pc, #156]	; (c740 <mp_convert_member_lookup+0xdc>)
    c6a4:	4293      	cmp	r3, r2
    c6a6:	d10f      	bne.n	c6c8 <mp_convert_member_lookup+0x64>
        // return a bound method, with self being the type of this object
        // this type should be the type of the original instance, not the base
        // type (which is what is passed in the 'type' argument to this function)
        if (self != MP_OBJ_NULL) {
    c6a8:	68fb      	ldr	r3, [r7, #12]
    c6aa:	2b00      	cmp	r3, #0
    c6ac:	d003      	beq.n	c6b6 <mp_convert_member_lookup+0x52>
            type = mp_obj_get_type(self);
    c6ae:	68f8      	ldr	r0, [r7, #12]
    c6b0:	f001 f88c 	bl	d7cc <mp_obj_get_type>
    c6b4:	60b8      	str	r0, [r7, #8]
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c6b6:	687b      	ldr	r3, [r7, #4]
    c6b8:	685a      	ldr	r2, [r3, #4]
    c6ba:	683b      	ldr	r3, [r7, #0]
    c6bc:	601a      	str	r2, [r3, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    c6be:	683b      	ldr	r3, [r7, #0]
    c6c0:	3304      	adds	r3, #4
    c6c2:	68ba      	ldr	r2, [r7, #8]
    c6c4:	601a      	str	r2, [r3, #0]
    c6c6:	e034      	b.n	c732 <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    c6c8:	6878      	ldr	r0, [r7, #4]
    c6ca:	f7fe fe63 	bl	b394 <MP_OBJ_IS_OBJ>
    c6ce:	4603      	mov	r3, r0
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	d008      	beq.n	c6e6 <mp_convert_member_lookup+0x82>
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	4a1a      	ldr	r2, [pc, #104]	; (c744 <mp_convert_member_lookup+0xe0>)
    c6da:	4293      	cmp	r3, r2
    c6dc:	d103      	bne.n	c6e6 <mp_convert_member_lookup+0x82>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    c6de:	683b      	ldr	r3, [r7, #0]
    c6e0:	687a      	ldr	r2, [r7, #4]
    c6e2:	601a      	str	r2, [r3, #0]
    c6e4:	e025      	b.n	c732 <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_FUN(member)
    c6e6:	6878      	ldr	r0, [r7, #4]
    c6e8:	f7fe fe54 	bl	b394 <MP_OBJ_IS_OBJ>
    c6ec:	4603      	mov	r3, r0
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d004      	beq.n	c6fc <mp_convert_member_lookup+0x98>
    c6f2:	687b      	ldr	r3, [r7, #4]
    c6f4:	681b      	ldr	r3, [r3, #0]
    c6f6:	88db      	ldrh	r3, [r3, #6]
    c6f8:	2b8a      	cmp	r3, #138	; 0x8a
    c6fa:	d00f      	beq.n	c71c <mp_convert_member_lookup+0xb8>
        || (MP_OBJ_IS_OBJ(member)
    c6fc:	6878      	ldr	r0, [r7, #4]
    c6fe:	f7fe fe49 	bl	b394 <MP_OBJ_IS_OBJ>
    c702:	4603      	mov	r3, r0
    c704:	2b00      	cmp	r3, #0
    c706:	d011      	beq.n	c72c <mp_convert_member_lookup+0xc8>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    c708:	687b      	ldr	r3, [r7, #4]
    c70a:	681b      	ldr	r3, [r3, #0]
    c70c:	88db      	ldrh	r3, [r3, #6]
    c70e:	2b78      	cmp	r3, #120	; 0x78
    c710:	d004      	beq.n	c71c <mp_convert_member_lookup+0xb8>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    c712:	687b      	ldr	r3, [r7, #4]
    c714:	681b      	ldr	r3, [r3, #0]
    c716:	88db      	ldrh	r3, [r3, #6]
    c718:	2b8b      	cmp	r3, #139	; 0x8b
    c71a:	d107      	bne.n	c72c <mp_convert_member_lookup+0xc8>
            dest[0] = mp_obj_new_checked_fun(type, member);
        } else
        #endif
        {
            // return a bound method, with self being this object
            dest[0] = member;
    c71c:	683b      	ldr	r3, [r7, #0]
    c71e:	687a      	ldr	r2, [r7, #4]
    c720:	601a      	str	r2, [r3, #0]
            dest[1] = self;
    c722:	683b      	ldr	r3, [r7, #0]
    c724:	3304      	adds	r3, #4
    c726:	68fa      	ldr	r2, [r7, #12]
    c728:	601a      	str	r2, [r3, #0]
    c72a:	e002      	b.n	c732 <mp_convert_member_lookup+0xce>
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    c72c:	683b      	ldr	r3, [r7, #0]
    c72e:	687a      	ldr	r2, [r7, #4]
    c730:	601a      	str	r2, [r3, #0]
    }
}
    c732:	bf00      	nop
    c734:	3710      	adds	r7, #16
    c736:	46bd      	mov	sp, r7
    c738:	bd80      	pop	{r7, pc}
    c73a:	bf00      	nop
    c73c:	000222b8 	.word	0x000222b8
    c740:	000222f4 	.word	0x000222f4
    c744:	000220ac 	.word	0x000220ac

0000c748 <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    c748:	b580      	push	{r7, lr}
    c74a:	b088      	sub	sp, #32
    c74c:	af00      	add	r7, sp, #0
    c74e:	60f8      	str	r0, [r7, #12]
    c750:	60b9      	str	r1, [r7, #8]
    c752:	607a      	str	r2, [r7, #4]
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	2200      	movs	r2, #0
    c758:	601a      	str	r2, [r3, #0]
    dest[1] = MP_OBJ_NULL;
    c75a:	687b      	ldr	r3, [r7, #4]
    c75c:	3304      	adds	r3, #4
    c75e:	2200      	movs	r2, #0
    c760:	601a      	str	r2, [r3, #0]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    c762:	68f8      	ldr	r0, [r7, #12]
    c764:	f001 f832 	bl	d7cc <mp_obj_get_type>
    c768:	61f8      	str	r0, [r7, #28]
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    c76a:	68bb      	ldr	r3, [r7, #8]
    c76c:	2b1d      	cmp	r3, #29
    c76e:	d10b      	bne.n	c788 <mp_load_method_maybe+0x40>
    c770:	69fb      	ldr	r3, [r7, #28]
    c772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c774:	2b00      	cmp	r3, #0
    c776:	d007      	beq.n	c788 <mp_load_method_maybe+0x40>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    c778:	687b      	ldr	r3, [r7, #4]
    c77a:	4a1f      	ldr	r2, [pc, #124]	; (c7f8 <mp_load_method_maybe+0xb0>)
    c77c:	601a      	str	r2, [r3, #0]
        dest[1] = obj;
    c77e:	687b      	ldr	r3, [r7, #4]
    c780:	3304      	adds	r3, #4
    c782:	68fa      	ldr	r2, [r7, #12]
    c784:	601a      	str	r2, [r3, #0]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    c786:	e033      	b.n	c7f0 <mp_load_method_maybe+0xa8>
    } else if (type->attr != NULL) {
    c788:	69fb      	ldr	r3, [r7, #28]
    c78a:	69db      	ldr	r3, [r3, #28]
    c78c:	2b00      	cmp	r3, #0
    c78e:	d006      	beq.n	c79e <mp_load_method_maybe+0x56>
        type->attr(obj, attr, dest);
    c790:	69fb      	ldr	r3, [r7, #28]
    c792:	69db      	ldr	r3, [r3, #28]
    c794:	687a      	ldr	r2, [r7, #4]
    c796:	68b9      	ldr	r1, [r7, #8]
    c798:	68f8      	ldr	r0, [r7, #12]
    c79a:	4798      	blx	r3
}
    c79c:	e028      	b.n	c7f0 <mp_load_method_maybe+0xa8>
    } else if (type->locals_dict != NULL) {
    c79e:	69fb      	ldr	r3, [r7, #28]
    c7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	d024      	beq.n	c7f0 <mp_load_method_maybe+0xa8>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    c7a6:	69fb      	ldr	r3, [r7, #28]
    c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c7aa:	681b      	ldr	r3, [r3, #0]
    c7ac:	4a13      	ldr	r2, [pc, #76]	; (c7fc <mp_load_method_maybe+0xb4>)
    c7ae:	4293      	cmp	r3, r2
    c7b0:	d006      	beq.n	c7c0 <mp_load_method_maybe+0x78>
    c7b2:	4b13      	ldr	r3, [pc, #76]	; (c800 <mp_load_method_maybe+0xb8>)
    c7b4:	4a13      	ldr	r2, [pc, #76]	; (c804 <mp_load_method_maybe+0xbc>)
    c7b6:	f240 411f 	movw	r1, #1055	; 0x41f
    c7ba:	4813      	ldr	r0, [pc, #76]	; (c808 <mp_load_method_maybe+0xc0>)
    c7bc:	f00e fdee 	bl	1b39c <__assert_func>
        mp_map_t *locals_map = &type->locals_dict->map;
    c7c0:	69fb      	ldr	r3, [r7, #28]
    c7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c7c4:	3304      	adds	r3, #4
    c7c6:	61bb      	str	r3, [r7, #24]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    c7c8:	68bb      	ldr	r3, [r7, #8]
    c7ca:	009b      	lsls	r3, r3, #2
    c7cc:	f043 0302 	orr.w	r3, r3, #2
    c7d0:	2200      	movs	r2, #0
    c7d2:	4619      	mov	r1, r3
    c7d4:	69b8      	ldr	r0, [r7, #24]
    c7d6:	f000 fe4f 	bl	d478 <mp_map_lookup>
    c7da:	6178      	str	r0, [r7, #20]
        if (elem != NULL) {
    c7dc:	697b      	ldr	r3, [r7, #20]
    c7de:	2b00      	cmp	r3, #0
    c7e0:	d006      	beq.n	c7f0 <mp_load_method_maybe+0xa8>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    c7e2:	697b      	ldr	r3, [r7, #20]
    c7e4:	685a      	ldr	r2, [r3, #4]
    c7e6:	687b      	ldr	r3, [r7, #4]
    c7e8:	69f9      	ldr	r1, [r7, #28]
    c7ea:	68f8      	ldr	r0, [r7, #12]
    c7ec:	f7ff ff3a 	bl	c664 <mp_convert_member_lookup>
}
    c7f0:	bf00      	nop
    c7f2:	3720      	adds	r7, #32
    c7f4:	46bd      	mov	sp, r7
    c7f6:	bd80      	pop	{r7, pc}
    c7f8:	00022648 	.word	0x00022648
    c7fc:	000200e0 	.word	0x000200e0
    c800:	0001f758 	.word	0x0001f758
    c804:	0001f8f4 	.word	0x0001f8f4
    c808:	0001f66c 	.word	0x0001f66c

0000c80c <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    c80c:	b580      	push	{r7, lr}
    c80e:	b084      	sub	sp, #16
    c810:	af00      	add	r7, sp, #0
    c812:	60f8      	str	r0, [r7, #12]
    c814:	60b9      	str	r1, [r7, #8]
    c816:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));

    mp_load_method_maybe(base, attr, dest);
    c818:	687a      	ldr	r2, [r7, #4]
    c81a:	68b9      	ldr	r1, [r7, #8]
    c81c:	68f8      	ldr	r0, [r7, #12]
    c81e:	f7ff ff93 	bl	c748 <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    c822:	687b      	ldr	r3, [r7, #4]
    c824:	681b      	ldr	r3, [r3, #0]
    c826:	2b00      	cmp	r3, #0
    c828:	d103      	bne.n	c832 <mp_load_method+0x26>
        // no attribute/method called attr
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c82a:	4904      	ldr	r1, [pc, #16]	; (c83c <mp_load_method+0x30>)
    c82c:	4804      	ldr	r0, [pc, #16]	; (c840 <mp_load_method+0x34>)
    c82e:	f000 fb91 	bl	cf54 <mp_raise_msg>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    c832:	bf00      	nop
    c834:	3710      	adds	r7, #16
    c836:	46bd      	mov	sp, r7
    c838:	bd80      	pop	{r7, pc}
    c83a:	bf00      	nop
    c83c:	0001f788 	.word	0x0001f788
    c840:	0002043c 	.word	0x0002043c

0000c844 <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    c844:	b580      	push	{r7, lr}
    c846:	b090      	sub	sp, #64	; 0x40
    c848:	af00      	add	r7, sp, #0
    c84a:	60f8      	str	r0, [r7, #12]
    c84c:	60b9      	str	r1, [r7, #8]
    c84e:	607a      	str	r2, [r7, #4]
    c850:	70fb      	strb	r3, [r7, #3]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    c852:	f107 0310 	add.w	r3, r7, #16
    c856:	4618      	mov	r0, r3
    c858:	f7f3 fd30 	bl	2bc <nlr_push>
    c85c:	4603      	mov	r3, r0
    c85e:	2b00      	cmp	r3, #0
    c860:	d107      	bne.n	c872 <mp_load_method_protected+0x2e>
        mp_load_method_maybe(obj, attr, dest);
    c862:	687a      	ldr	r2, [r7, #4]
    c864:	68b9      	ldr	r1, [r7, #8]
    c866:	68f8      	ldr	r0, [r7, #12]
    c868:	f7ff ff6e 	bl	c748 <mp_load_method_maybe>
        nlr_pop();
    c86c:	f7f3 fd14 	bl	298 <nlr_pop>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    c870:	e015      	b.n	c89e <mp_load_method_protected+0x5a>
        if (!catch_all_exc
    c872:	78fb      	ldrb	r3, [r7, #3]
    c874:	f083 0301 	eor.w	r3, r3, #1
    c878:	b2db      	uxtb	r3, r3
    c87a:	2b00      	cmp	r3, #0
    c87c:	d00f      	beq.n	c89e <mp_load_method_protected+0x5a>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    c87e:	697b      	ldr	r3, [r7, #20]
    c880:	681b      	ldr	r3, [r3, #0]
    c882:	4909      	ldr	r1, [pc, #36]	; (c8a8 <mp_load_method_protected+0x64>)
    c884:	4618      	mov	r0, r3
    c886:	f00a fd19 	bl	172bc <mp_obj_is_subclass_fast>
    c88a:	4603      	mov	r3, r0
    c88c:	f083 0301 	eor.w	r3, r3, #1
    c890:	b2db      	uxtb	r3, r3
    c892:	2b00      	cmp	r3, #0
    c894:	d003      	beq.n	c89e <mp_load_method_protected+0x5a>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    c896:	697b      	ldr	r3, [r7, #20]
    c898:	4618      	mov	r0, r3
    c89a:	f7f3 fd21 	bl	2e0 <nlr_jump>
}
    c89e:	bf00      	nop
    c8a0:	3740      	adds	r7, #64	; 0x40
    c8a2:	46bd      	mov	sp, r7
    c8a4:	bd80      	pop	{r7, pc}
    c8a6:	bf00      	nop
    c8a8:	0002043c 	.word	0x0002043c

0000c8ac <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    c8ac:	b580      	push	{r7, lr}
    c8ae:	b088      	sub	sp, #32
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	60f8      	str	r0, [r7, #12]
    c8b4:	60b9      	str	r1, [r7, #8]
    c8b6:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    mp_obj_type_t *type = mp_obj_get_type(base);
    c8b8:	68f8      	ldr	r0, [r7, #12]
    c8ba:	f000 ff87 	bl	d7cc <mp_obj_get_type>
    c8be:	61f8      	str	r0, [r7, #28]
    if (type->attr != NULL) {
    c8c0:	69fb      	ldr	r3, [r7, #28]
    c8c2:	69db      	ldr	r3, [r3, #28]
    c8c4:	2b00      	cmp	r3, #0
    c8c6:	d00d      	beq.n	c8e4 <mp_store_attr+0x38>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    c8c8:	2308      	movs	r3, #8
    c8ca:	617b      	str	r3, [r7, #20]
    c8cc:	687b      	ldr	r3, [r7, #4]
    c8ce:	61bb      	str	r3, [r7, #24]
        type->attr(base, attr, dest);
    c8d0:	69fb      	ldr	r3, [r7, #28]
    c8d2:	69db      	ldr	r3, [r3, #28]
    c8d4:	f107 0214 	add.w	r2, r7, #20
    c8d8:	68b9      	ldr	r1, [r7, #8]
    c8da:	68f8      	ldr	r0, [r7, #12]
    c8dc:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    c8de:	697b      	ldr	r3, [r7, #20]
    c8e0:	2b00      	cmp	r3, #0
    c8e2:	d003      	beq.n	c8ec <mp_store_attr+0x40>
            // success
            return;
        }
    }
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c8e4:	4903      	ldr	r1, [pc, #12]	; (c8f4 <mp_store_attr+0x48>)
    c8e6:	4804      	ldr	r0, [pc, #16]	; (c8f8 <mp_store_attr+0x4c>)
    c8e8:	f000 fb34 	bl	cf54 <mp_raise_msg>
            return;
    c8ec:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    c8ee:	3720      	adds	r7, #32
    c8f0:	46bd      	mov	sp, r7
    c8f2:	bd80      	pop	{r7, pc}
    c8f4:	0001f788 	.word	0x0001f788
    c8f8:	0002043c 	.word	0x0002043c

0000c8fc <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    c8fc:	b580      	push	{r7, lr}
    c8fe:	b086      	sub	sp, #24
    c900:	af00      	add	r7, sp, #0
    c902:	6078      	str	r0, [r7, #4]
    c904:	6039      	str	r1, [r7, #0]
    assert(o_in);
    c906:	687b      	ldr	r3, [r7, #4]
    c908:	2b00      	cmp	r3, #0
    c90a:	d106      	bne.n	c91a <mp_getiter+0x1e>
    c90c:	4b20      	ldr	r3, [pc, #128]	; (c990 <mp_getiter+0x94>)
    c90e:	4a21      	ldr	r2, [pc, #132]	; (c994 <mp_getiter+0x98>)
    c910:	f240 4165 	movw	r1, #1125	; 0x465
    c914:	4820      	ldr	r0, [pc, #128]	; (c998 <mp_getiter+0x9c>)
    c916:	f00e fd41 	bl	1b39c <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c91a:	6878      	ldr	r0, [r7, #4]
    c91c:	f000 ff56 	bl	d7cc <mp_obj_get_type>
    c920:	6178      	str	r0, [r7, #20]

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    c922:	697b      	ldr	r3, [r7, #20]
    c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c926:	4a1d      	ldr	r2, [pc, #116]	; (c99c <mp_getiter+0xa0>)
    c928:	4293      	cmp	r3, r2
    c92a:	d101      	bne.n	c930 <mp_getiter+0x34>
        return o_in;
    c92c:	687b      	ldr	r3, [r7, #4]
    c92e:	e02a      	b.n	c986 <mp_getiter+0x8a>
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    c930:	683b      	ldr	r3, [r7, #0]
    c932:	2b00      	cmp	r3, #0
    c934:	d103      	bne.n	c93e <mp_getiter+0x42>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    c936:	2010      	movs	r0, #16
    c938:	f7f3 fcf0 	bl	31c <m_malloc>
    c93c:	6038      	str	r0, [r7, #0]
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    c93e:	697b      	ldr	r3, [r7, #20]
    c940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c942:	2b00      	cmp	r3, #0
    c944:	d00a      	beq.n	c95c <mp_getiter+0x60>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    c946:	697b      	ldr	r3, [r7, #20]
    c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c94a:	6839      	ldr	r1, [r7, #0]
    c94c:	6878      	ldr	r0, [r7, #4]
    c94e:	4798      	blx	r3
    c950:	6138      	str	r0, [r7, #16]
        if (iter != MP_OBJ_NULL) {
    c952:	693b      	ldr	r3, [r7, #16]
    c954:	2b00      	cmp	r3, #0
    c956:	d001      	beq.n	c95c <mp_getiter+0x60>
            return iter;
    c958:	693b      	ldr	r3, [r7, #16]
    c95a:	e014      	b.n	c986 <mp_getiter+0x8a>
        }
    }

    // check for __getitem__
    mp_obj_t dest[2];
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    c95c:	f107 0308 	add.w	r3, r7, #8
    c960:	461a      	mov	r2, r3
    c962:	210e      	movs	r1, #14
    c964:	6878      	ldr	r0, [r7, #4]
    c966:	f7ff feef 	bl	c748 <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    c96a:	68bb      	ldr	r3, [r7, #8]
    c96c:	2b00      	cmp	r3, #0
    c96e:	d007      	beq.n	c980 <mp_getiter+0x84>
        // __getitem__ exists, create and return an iterator
        return mp_obj_new_getitem_iter(dest, iter_buf);
    c970:	f107 0308 	add.w	r3, r7, #8
    c974:	6839      	ldr	r1, [r7, #0]
    c976:	4618      	mov	r0, r3
    c978:	f003 fd74 	bl	10464 <mp_obj_new_getitem_iter>
    c97c:	4603      	mov	r3, r0
    c97e:	e002      	b.n	c986 <mp_getiter+0x8a>
    }

    // object not iterable
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not iterable");
    c980:	4807      	ldr	r0, [pc, #28]	; (c9a0 <mp_getiter+0xa4>)
    c982:	f000 fb09 	bl	cf98 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not iterable", mp_obj_get_type_str(o_in)));
    }
}
    c986:	4618      	mov	r0, r3
    c988:	3718      	adds	r7, #24
    c98a:	46bd      	mov	sp, r7
    c98c:	bd80      	pop	{r7, pc}
    c98e:	bf00      	nop
    c990:	0001f79c 	.word	0x0001f79c
    c994:	0001f90c 	.word	0x0001f90c
    c998:	0001f66c 	.word	0x0001f66c
    c99c:	0000df95 	.word	0x0000df95
    c9a0:	0001f7a4 	.word	0x0001f7a4

0000c9a4 <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    c9a4:	b580      	push	{r7, lr}
    c9a6:	b086      	sub	sp, #24
    c9a8:	af00      	add	r7, sp, #0
    c9aa:	6078      	str	r0, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c9ac:	6878      	ldr	r0, [r7, #4]
    c9ae:	f000 ff0d 	bl	d7cc <mp_obj_get_type>
    c9b2:	6178      	str	r0, [r7, #20]
    if (type->iternext != NULL) {
    c9b4:	697b      	ldr	r3, [r7, #20]
    c9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9b8:	2b00      	cmp	r3, #0
    c9ba:	d005      	beq.n	c9c8 <mp_iternext_allow_raise+0x24>
        return type->iternext(o_in);
    c9bc:	697b      	ldr	r3, [r7, #20]
    c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9c0:	6878      	ldr	r0, [r7, #4]
    c9c2:	4798      	blx	r3
    c9c4:	4603      	mov	r3, r0
    c9c6:	e015      	b.n	c9f4 <mp_iternext_allow_raise+0x50>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    c9c8:	f107 030c 	add.w	r3, r7, #12
    c9cc:	461a      	mov	r2, r3
    c9ce:	211d      	movs	r1, #29
    c9d0:	6878      	ldr	r0, [r7, #4]
    c9d2:	f7ff feb9 	bl	c748 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    c9d6:	68fb      	ldr	r3, [r7, #12]
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d008      	beq.n	c9ee <mp_iternext_allow_raise+0x4a>
            // __next__ exists, call it and return its result
            return mp_call_method_n_kw(0, 0, dest);
    c9dc:	f107 030c 	add.w	r3, r7, #12
    c9e0:	461a      	mov	r2, r3
    c9e2:	2100      	movs	r1, #0
    c9e4:	2000      	movs	r0, #0
    c9e6:	f7ff fa37 	bl	be58 <mp_call_method_n_kw>
    c9ea:	4603      	mov	r3, r0
    c9ec:	e002      	b.n	c9f4 <mp_iternext_allow_raise+0x50>
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    c9ee:	4803      	ldr	r0, [pc, #12]	; (c9fc <mp_iternext_allow_raise+0x58>)
    c9f0:	f000 fad2 	bl	cf98 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    c9f4:	4618      	mov	r0, r3
    c9f6:	3718      	adds	r7, #24
    c9f8:	46bd      	mov	sp, r7
    c9fa:	bd80      	pop	{r7, pc}
    c9fc:	0001f7b8 	.word	0x0001f7b8

0000ca00 <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    ca00:	b580      	push	{r7, lr}
    ca02:	b092      	sub	sp, #72	; 0x48
    ca04:	af00      	add	r7, sp, #0
    ca06:	6078      	str	r0, [r7, #4]
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    ca08:	6878      	ldr	r0, [r7, #4]
    ca0a:	f000 fedf 	bl	d7cc <mp_obj_get_type>
    ca0e:	6478      	str	r0, [r7, #68]	; 0x44
    if (type->iternext != NULL) {
    ca10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca14:	2b00      	cmp	r3, #0
    ca16:	d005      	beq.n	ca24 <mp_iternext+0x24>
        return type->iternext(o_in);
    ca18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca1c:	6878      	ldr	r0, [r7, #4]
    ca1e:	4798      	blx	r3
    ca20:	4603      	mov	r3, r0
    ca22:	e02f      	b.n	ca84 <mp_iternext+0x84>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    ca24:	f107 0338 	add.w	r3, r7, #56	; 0x38
    ca28:	461a      	mov	r2, r3
    ca2a:	211d      	movs	r1, #29
    ca2c:	6878      	ldr	r0, [r7, #4]
    ca2e:	f7ff fe8b 	bl	c748 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ca34:	2b00      	cmp	r3, #0
    ca36:	d022      	beq.n	ca7e <mp_iternext+0x7e>
            // __next__ exists, call it and return its result
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    ca38:	f107 0308 	add.w	r3, r7, #8
    ca3c:	4618      	mov	r0, r3
    ca3e:	f7f3 fc3d 	bl	2bc <nlr_push>
    ca42:	4603      	mov	r3, r0
    ca44:	2b00      	cmp	r3, #0
    ca46:	d10b      	bne.n	ca60 <mp_iternext+0x60>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    ca48:	f107 0338 	add.w	r3, r7, #56	; 0x38
    ca4c:	461a      	mov	r2, r3
    ca4e:	2100      	movs	r1, #0
    ca50:	2000      	movs	r0, #0
    ca52:	f7ff fa01 	bl	be58 <mp_call_method_n_kw>
    ca56:	6438      	str	r0, [r7, #64]	; 0x40
                nlr_pop();
    ca58:	f7f3 fc1e 	bl	298 <nlr_pop>
                return ret;
    ca5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ca5e:	e011      	b.n	ca84 <mp_iternext+0x84>
            } else {
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    ca60:	68fb      	ldr	r3, [r7, #12]
    ca62:	681b      	ldr	r3, [r3, #0]
    ca64:	4909      	ldr	r1, [pc, #36]	; (ca8c <mp_iternext+0x8c>)
    ca66:	4618      	mov	r0, r3
    ca68:	f00a fc28 	bl	172bc <mp_obj_is_subclass_fast>
    ca6c:	4603      	mov	r3, r0
    ca6e:	2b00      	cmp	r3, #0
    ca70:	d001      	beq.n	ca76 <mp_iternext+0x76>
                    return MP_OBJ_STOP_ITERATION;
    ca72:	2304      	movs	r3, #4
    ca74:	e006      	b.n	ca84 <mp_iternext+0x84>
                } else {
                    nlr_jump(nlr.ret_val);
    ca76:	68fb      	ldr	r3, [r7, #12]
    ca78:	4618      	mov	r0, r3
    ca7a:	f7f3 fc31 	bl	2e0 <nlr_jump>
                }
            }
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    ca7e:	4804      	ldr	r0, [pc, #16]	; (ca90 <mp_iternext+0x90>)
    ca80:	f000 fa8a 	bl	cf98 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    ca84:	4618      	mov	r0, r3
    ca86:	3748      	adds	r7, #72	; 0x48
    ca88:	46bd      	mov	sp, r7
    ca8a:	bd80      	pop	{r7, pc}
    ca8c:	00020310 	.word	0x00020310
    ca90:	0001f7b8 	.word	0x0001f7b8

0000ca94 <mp_resume>:

// TODO: Unclear what to do with StopIterarion exception here.
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    ca94:	b580      	push	{r7, lr}
    ca96:	b096      	sub	sp, #88	; 0x58
    ca98:	af00      	add	r7, sp, #0
    ca9a:	60f8      	str	r0, [r7, #12]
    ca9c:	60b9      	str	r1, [r7, #8]
    ca9e:	607a      	str	r2, [r7, #4]
    caa0:	603b      	str	r3, [r7, #0]
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    caa2:	68bb      	ldr	r3, [r7, #8]
    caa4:	2b00      	cmp	r3, #0
    caa6:	bf14      	ite	ne
    caa8:	2301      	movne	r3, #1
    caaa:	2300      	moveq	r3, #0
    caac:	b2da      	uxtb	r2, r3
    caae:	687b      	ldr	r3, [r7, #4]
    cab0:	2b00      	cmp	r3, #0
    cab2:	bf14      	ite	ne
    cab4:	2301      	movne	r3, #1
    cab6:	2300      	moveq	r3, #0
    cab8:	b2db      	uxtb	r3, r3
    caba:	4053      	eors	r3, r2
    cabc:	b2db      	uxtb	r3, r3
    cabe:	2b00      	cmp	r3, #0
    cac0:	d106      	bne.n	cad0 <mp_resume+0x3c>
    cac2:	4b5e      	ldr	r3, [pc, #376]	; (cc3c <mp_resume+0x1a8>)
    cac4:	4a5e      	ldr	r2, [pc, #376]	; (cc40 <mp_resume+0x1ac>)
    cac6:	f240 41ca 	movw	r1, #1226	; 0x4ca
    caca:	485e      	ldr	r0, [pc, #376]	; (cc44 <mp_resume+0x1b0>)
    cacc:	f00e fc66 	bl	1b39c <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    cad0:	68f8      	ldr	r0, [r7, #12]
    cad2:	f000 fe7b 	bl	d7cc <mp_obj_get_type>
    cad6:	6578      	str	r0, [r7, #84]	; 0x54

    if (type == &mp_type_gen_instance) {
    cad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cada:	4a5b      	ldr	r2, [pc, #364]	; (cc48 <mp_resume+0x1b4>)
    cadc:	4293      	cmp	r3, r2
    cade:	d107      	bne.n	caf0 <mp_resume+0x5c>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    cae0:	683b      	ldr	r3, [r7, #0]
    cae2:	687a      	ldr	r2, [r7, #4]
    cae4:	68b9      	ldr	r1, [r7, #8]
    cae6:	68f8      	ldr	r0, [r7, #12]
    cae8:	f003 facc 	bl	10084 <mp_obj_gen_resume>
    caec:	4603      	mov	r3, r0
    caee:	e0a1      	b.n	cc34 <mp_resume+0x1a0>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
    caf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    caf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    caf4:	2b00      	cmp	r3, #0
    caf6:	d012      	beq.n	cb1e <mp_resume+0x8a>
    caf8:	68bb      	ldr	r3, [r7, #8]
    cafa:	4a54      	ldr	r2, [pc, #336]	; (cc4c <mp_resume+0x1b8>)
    cafc:	4293      	cmp	r3, r2
    cafe:	d10e      	bne.n	cb1e <mp_resume+0x8a>
        mp_obj_t ret = type->iternext(self_in);
    cb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cb04:	68f8      	ldr	r0, [r7, #12]
    cb06:	4798      	blx	r3
    cb08:	6538      	str	r0, [r7, #80]	; 0x50
        *ret_val = ret;
    cb0a:	683b      	ldr	r3, [r7, #0]
    cb0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    cb0e:	601a      	str	r2, [r3, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    cb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cb12:	2b04      	cmp	r3, #4
    cb14:	d001      	beq.n	cb1a <mp_resume+0x86>
            return MP_VM_RETURN_YIELD;
    cb16:	2301      	movs	r3, #1
    cb18:	e08c      	b.n	cc34 <mp_resume+0x1a0>
        } else {
            // Emulate raise StopIteration()
            // Special case, handled in vm.c
            return MP_VM_RETURN_NORMAL;
    cb1a:	2300      	movs	r3, #0
    cb1c:	e08a      	b.n	cc34 <mp_resume+0x1a0>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
    cb1e:	68bb      	ldr	r3, [r7, #8]
    cb20:	4a4a      	ldr	r2, [pc, #296]	; (cc4c <mp_resume+0x1b8>)
    cb22:	4293      	cmp	r3, r2
    cb24:	d124      	bne.n	cb70 <mp_resume+0xdc>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    cb26:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb2a:	461a      	mov	r2, r3
    cb2c:	211d      	movs	r1, #29
    cb2e:	68f8      	ldr	r0, [r7, #12]
    cb30:	f7ff fe0a 	bl	c748 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cb34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb36:	2b00      	cmp	r3, #0
    cb38:	d01a      	beq.n	cb70 <mp_resume+0xdc>
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    cb3a:	f107 0314 	add.w	r3, r7, #20
    cb3e:	4618      	mov	r0, r3
    cb40:	f7f3 fbbc 	bl	2bc <nlr_push>
    cb44:	4603      	mov	r3, r0
    cb46:	2b00      	cmp	r3, #0
    cb48:	d10d      	bne.n	cb66 <mp_resume+0xd2>
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cb4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb4e:	461a      	mov	r2, r3
    cb50:	2100      	movs	r1, #0
    cb52:	2000      	movs	r0, #0
    cb54:	f7ff f980 	bl	be58 <mp_call_method_n_kw>
    cb58:	4602      	mov	r2, r0
    cb5a:	683b      	ldr	r3, [r7, #0]
    cb5c:	601a      	str	r2, [r3, #0]
                nlr_pop();
    cb5e:	f7f3 fb9b 	bl	298 <nlr_pop>
                return MP_VM_RETURN_YIELD;
    cb62:	2301      	movs	r3, #1
    cb64:	e066      	b.n	cc34 <mp_resume+0x1a0>
            } else {
                *ret_val = MP_OBJ_FROM_PTR(nlr.ret_val);
    cb66:	69ba      	ldr	r2, [r7, #24]
    cb68:	683b      	ldr	r3, [r7, #0]
    cb6a:	601a      	str	r2, [r3, #0]
                return MP_VM_RETURN_EXCEPTION;
    cb6c:	2302      	movs	r3, #2
    cb6e:	e061      	b.n	cc34 <mp_resume+0x1a0>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
    cb70:	68bb      	ldr	r3, [r7, #8]
    cb72:	2b00      	cmp	r3, #0
    cb74:	d014      	beq.n	cba0 <mp_resume+0x10c>
        mp_load_method(self_in, MP_QSTR_send, dest);
    cb76:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb7a:	461a      	mov	r2, r3
    cb7c:	21c8      	movs	r1, #200	; 0xc8
    cb7e:	68f8      	ldr	r0, [r7, #12]
    cb80:	f7ff fe44 	bl	c80c <mp_load_method>
        dest[2] = send_value;
    cb84:	68bb      	ldr	r3, [r7, #8]
    cb86:	64fb      	str	r3, [r7, #76]	; 0x4c
        // TODO: This should have exception wrapping like __next__ case
        // above. Not done right away to think how to optimize native
        // generators better, see:
        // https://github.com/micropython/micropython/issues/2628
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    cb88:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb8c:	461a      	mov	r2, r3
    cb8e:	2100      	movs	r1, #0
    cb90:	2001      	movs	r0, #1
    cb92:	f7ff f961 	bl	be58 <mp_call_method_n_kw>
    cb96:	4602      	mov	r2, r0
    cb98:	683b      	ldr	r3, [r7, #0]
    cb9a:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_YIELD;
    cb9c:	2301      	movs	r3, #1
    cb9e:	e049      	b.n	cc34 <mp_resume+0x1a0>
    }

    assert(throw_value != MP_OBJ_NULL);
    cba0:	687b      	ldr	r3, [r7, #4]
    cba2:	2b00      	cmp	r3, #0
    cba4:	d106      	bne.n	cbb4 <mp_resume+0x120>
    cba6:	4b2a      	ldr	r3, [pc, #168]	; (cc50 <mp_resume+0x1bc>)
    cba8:	4a25      	ldr	r2, [pc, #148]	; (cc40 <mp_resume+0x1ac>)
    cbaa:	f240 41fc 	movw	r1, #1276	; 0x4fc
    cbae:	4825      	ldr	r0, [pc, #148]	; (cc44 <mp_resume+0x1b0>)
    cbb0:	f00e fbf4 	bl	1b39c <__assert_func>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    cbb4:	6878      	ldr	r0, [r7, #4]
    cbb6:	f000 fe09 	bl	d7cc <mp_obj_get_type>
    cbba:	4603      	mov	r3, r0
    cbbc:	4925      	ldr	r1, [pc, #148]	; (cc54 <mp_resume+0x1c0>)
    cbbe:	4618      	mov	r0, r3
    cbc0:	f00a fb7c 	bl	172bc <mp_obj_is_subclass_fast>
    cbc4:	4603      	mov	r3, r0
    cbc6:	2b00      	cmp	r3, #0
    cbc8:	d015      	beq.n	cbf6 <mp_resume+0x162>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    cbca:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cbce:	461a      	mov	r2, r3
    cbd0:	2177      	movs	r1, #119	; 0x77
    cbd2:	68f8      	ldr	r0, [r7, #12]
    cbd4:	f7ff fdb8 	bl	c748 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cbda:	2b00      	cmp	r3, #0
    cbdc:	d023      	beq.n	cc26 <mp_resume+0x192>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cbde:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cbe2:	461a      	mov	r2, r3
    cbe4:	2100      	movs	r1, #0
    cbe6:	2000      	movs	r0, #0
    cbe8:	f7ff f936 	bl	be58 <mp_call_method_n_kw>
    cbec:	4602      	mov	r2, r0
    cbee:	683b      	ldr	r3, [r7, #0]
    cbf0:	601a      	str	r2, [r3, #0]
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
    cbf2:	2300      	movs	r3, #0
    cbf4:	e01e      	b.n	cc34 <mp_resume+0x1a0>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    cbf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cbfa:	461a      	mov	r2, r3
    cbfc:	21d8      	movs	r1, #216	; 0xd8
    cbfe:	68f8      	ldr	r0, [r7, #12]
    cc00:	f7ff fda2 	bl	c748 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cc04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc06:	2b00      	cmp	r3, #0
    cc08:	d00d      	beq.n	cc26 <mp_resume+0x192>
                dest[2] = throw_value;
    cc0a:	687b      	ldr	r3, [r7, #4]
    cc0c:	64fb      	str	r3, [r7, #76]	; 0x4c
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    cc0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cc12:	461a      	mov	r2, r3
    cc14:	2100      	movs	r1, #0
    cc16:	2001      	movs	r0, #1
    cc18:	f7ff f91e 	bl	be58 <mp_call_method_n_kw>
    cc1c:	4602      	mov	r2, r0
    cc1e:	683b      	ldr	r3, [r7, #0]
    cc20:	601a      	str	r2, [r3, #0]
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
    cc22:	2301      	movs	r3, #1
    cc24:	e006      	b.n	cc34 <mp_resume+0x1a0>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        *ret_val = mp_make_raise_obj(throw_value);
    cc26:	6878      	ldr	r0, [r7, #4]
    cc28:	f000 f816 	bl	cc58 <mp_make_raise_obj>
    cc2c:	4602      	mov	r2, r0
    cc2e:	683b      	ldr	r3, [r7, #0]
    cc30:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_EXCEPTION;
    cc32:	2302      	movs	r3, #2
    }
}
    cc34:	4618      	mov	r0, r3
    cc36:	3758      	adds	r7, #88	; 0x58
    cc38:	46bd      	mov	sp, r7
    cc3a:	bd80      	pop	{r7, pc}
    cc3c:	0001f7d0 	.word	0x0001f7d0
    cc40:	0001f918 	.word	0x0001f918
    cc44:	0001f66c 	.word	0x0001f66c
    cc48:	00020df8 	.word	0x00020df8
    cc4c:	00021480 	.word	0x00021480
    cc50:	0001f80c 	.word	0x0001f80c
    cc54:	00020298 	.word	0x00020298

0000cc58 <mp_make_raise_obj>:

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    cc58:	b580      	push	{r7, lr}
    cc5a:	b082      	sub	sp, #8
    cc5c:	af00      	add	r7, sp, #0
    cc5e:	6078      	str	r0, [r7, #4]
    DEBUG_printf("raise %p\n", o);
    if (mp_obj_is_exception_type(o)) {
    cc60:	6878      	ldr	r0, [r7, #4]
    cc62:	f002 fd85 	bl	f770 <mp_obj_is_exception_type>
    cc66:	4603      	mov	r3, r0
    cc68:	2b00      	cmp	r3, #0
    cc6a:	d007      	beq.n	cc7c <mp_make_raise_obj+0x24>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    cc6c:	2300      	movs	r3, #0
    cc6e:	2200      	movs	r2, #0
    cc70:	2100      	movs	r1, #0
    cc72:	6878      	ldr	r0, [r7, #4]
    cc74:	f7ff f8ce 	bl	be14 <mp_call_function_n_kw>
    cc78:	4603      	mov	r3, r0
    cc7a:	e00c      	b.n	cc96 <mp_make_raise_obj+0x3e>
    } else if (mp_obj_is_exception_instance(o)) {
    cc7c:	6878      	ldr	r0, [r7, #4]
    cc7e:	f002 fd9f 	bl	f7c0 <mp_obj_is_exception_instance>
    cc82:	4603      	mov	r3, r0
    cc84:	2b00      	cmp	r3, #0
    cc86:	d001      	beq.n	cc8c <mp_make_raise_obj+0x34>
        // o is an instance of an exception, so use it as the exception
        return o;
    cc88:	687b      	ldr	r3, [r7, #4]
    cc8a:	e004      	b.n	cc96 <mp_make_raise_obj+0x3e>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    cc8c:	4904      	ldr	r1, [pc, #16]	; (cca0 <mp_make_raise_obj+0x48>)
    cc8e:	4805      	ldr	r0, [pc, #20]	; (cca4 <mp_make_raise_obj+0x4c>)
    cc90:	f002 fc50 	bl	f534 <mp_obj_new_exception_msg>
    cc94:	4603      	mov	r3, r0
    }
}
    cc96:	4618      	mov	r0, r3
    cc98:	3708      	adds	r7, #8
    cc9a:	46bd      	mov	sp, r7
    cc9c:	bd80      	pop	{r7, pc}
    cc9e:	bf00      	nop
    cca0:	0001f828 	.word	0x0001f828
    cca4:	00020748 	.word	0x00020748

0000cca8 <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    cca8:	b580      	push	{r7, lr}
    ccaa:	b08a      	sub	sp, #40	; 0x28
    ccac:	af00      	add	r7, sp, #0
    ccae:	60f8      	str	r0, [r7, #12]
    ccb0:	60b9      	str	r1, [r7, #8]
    ccb2:	607a      	str	r2, [r7, #4]
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    ccb4:	68fb      	ldr	r3, [r7, #12]
    ccb6:	009b      	lsls	r3, r3, #2
    ccb8:	f043 0302 	orr.w	r3, r3, #2
    ccbc:	617b      	str	r3, [r7, #20]
    args[1] = mp_const_none; // TODO should be globals
    ccbe:	4b09      	ldr	r3, [pc, #36]	; (cce4 <mp_import_name+0x3c>)
    ccc0:	61bb      	str	r3, [r7, #24]
    args[2] = mp_const_none; // TODO should be locals
    ccc2:	4b08      	ldr	r3, [pc, #32]	; (cce4 <mp_import_name+0x3c>)
    ccc4:	61fb      	str	r3, [r7, #28]
    args[3] = fromlist;
    ccc6:	68bb      	ldr	r3, [r7, #8]
    ccc8:	623b      	str	r3, [r7, #32]
    args[4] = level; // must be 0; we don't yet support other values
    ccca:	687b      	ldr	r3, [r7, #4]
    cccc:	627b      	str	r3, [r7, #36]	; 0x24

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    ccce:	f107 0314 	add.w	r3, r7, #20
    ccd2:	4619      	mov	r1, r3
    ccd4:	2005      	movs	r0, #5
    ccd6:	f00b fd5d 	bl	18794 <mp_builtin___import__>
    ccda:	4603      	mov	r3, r0
}
    ccdc:	4618      	mov	r0, r3
    ccde:	3728      	adds	r7, #40	; 0x28
    cce0:	46bd      	mov	sp, r7
    cce2:	bd80      	pop	{r7, pc}
    cce4:	00021480 	.word	0x00021480

0000cce8 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    cce8:	b5b0      	push	{r4, r5, r7, lr}
    ccea:	b08e      	sub	sp, #56	; 0x38
    ccec:	af00      	add	r7, sp, #0
    ccee:	6078      	str	r0, [r7, #4]
    ccf0:	6039      	str	r1, [r7, #0]
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    ccf2:	f107 0320 	add.w	r3, r7, #32
    ccf6:	461a      	mov	r2, r3
    ccf8:	6839      	ldr	r1, [r7, #0]
    ccfa:	6878      	ldr	r0, [r7, #4]
    ccfc:	f7ff fd24 	bl	c748 <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    cd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd02:	2b00      	cmp	r3, #0
    cd04:	d00a      	beq.n	cd1c <mp_import_from+0x34>
    cd06:	e000      	b.n	cd0a <mp_import_from+0x22>

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
        goto import_error;
    cd08:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    cd0a:	683a      	ldr	r2, [r7, #0]
    cd0c:	493a      	ldr	r1, [pc, #232]	; (cdf8 <mp_import_from+0x110>)
    cd0e:	483b      	ldr	r0, [pc, #236]	; (cdfc <mp_import_from+0x114>)
    cd10:	f002 fc70 	bl	f5f4 <mp_obj_new_exception_msg_varg>
    cd14:	4603      	mov	r3, r0
    cd16:	4618      	mov	r0, r3
    cd18:	f7f3 fae2 	bl	2e0 <nlr_jump>
    if (dest[0] != MP_OBJ_NULL) {
    cd1c:	6a3b      	ldr	r3, [r7, #32]
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d001      	beq.n	cd26 <mp_import_from+0x3e>
        return dest[0];
    cd22:	6a3b      	ldr	r3, [r7, #32]
    cd24:	e063      	b.n	cdee <mp_import_from+0x106>
    if (!mp_obj_is_package(module)) {
    cd26:	6878      	ldr	r0, [r7, #4]
    cd28:	f00b fc20 	bl	1856c <mp_obj_is_package>
    cd2c:	4603      	mov	r3, r0
    cd2e:	f083 0301 	eor.w	r3, r3, #1
    cd32:	b2db      	uxtb	r3, r3
    cd34:	2b00      	cmp	r3, #0
    cd36:	d1e7      	bne.n	cd08 <mp_import_from+0x20>
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    cd38:	f107 0320 	add.w	r3, r7, #32
    cd3c:	461a      	mov	r2, r3
    cd3e:	211b      	movs	r1, #27
    cd40:	6878      	ldr	r0, [r7, #4]
    cd42:	f7ff fd01 	bl	c748 <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    cd46:	6a3b      	ldr	r3, [r7, #32]
    cd48:	f107 021c 	add.w	r2, r7, #28
    cd4c:	4611      	mov	r1, r2
    cd4e:	4618      	mov	r0, r3
    cd50:	f008 fc84 	bl	1565c <mp_obj_str_get_data>
    cd54:	6378      	str	r0, [r7, #52]	; 0x34

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    cd56:	6838      	ldr	r0, [r7, #0]
    cd58:	f7f4 fa4a 	bl	11f0 <qstr_len>
    cd5c:	4602      	mov	r2, r0
    cd5e:	69fb      	ldr	r3, [r7, #28]
    cd60:	4413      	add	r3, r2
    cd62:	3301      	adds	r3, #1
    cd64:	633b      	str	r3, [r7, #48]	; 0x30
    char *dot_name = mp_local_alloc(dot_name_len);
    cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cd68:	3307      	adds	r3, #7
    cd6a:	3307      	adds	r3, #7
    cd6c:	08db      	lsrs	r3, r3, #3
    cd6e:	00db      	lsls	r3, r3, #3
    cd70:	ebad 0d03 	sub.w	sp, sp, r3
    cd74:	466b      	mov	r3, sp
    cd76:	3307      	adds	r3, #7
    cd78:	08db      	lsrs	r3, r3, #3
    cd7a:	00db      	lsls	r3, r3, #3
    cd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(dot_name, pkg_name, pkg_name_len);
    cd7e:	69fb      	ldr	r3, [r7, #28]
    cd80:	461a      	mov	r2, r3
    cd82:	6b79      	ldr	r1, [r7, #52]	; 0x34
    cd84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cd86:	f00e ffc5 	bl	1bd14 <memcpy>
    dot_name[pkg_name_len] = '.';
    cd8a:	69fb      	ldr	r3, [r7, #28]
    cd8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd8e:	4413      	add	r3, r2
    cd90:	222e      	movs	r2, #46	; 0x2e
    cd92:	701a      	strb	r2, [r3, #0]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    cd94:	69fb      	ldr	r3, [r7, #28]
    cd96:	3301      	adds	r3, #1
    cd98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cd9a:	18d4      	adds	r4, r2, r3
    cd9c:	6838      	ldr	r0, [r7, #0]
    cd9e:	f7f4 fa37 	bl	1210 <qstr_str>
    cda2:	4605      	mov	r5, r0
    cda4:	6838      	ldr	r0, [r7, #0]
    cda6:	f7f4 fa23 	bl	11f0 <qstr_len>
    cdaa:	4603      	mov	r3, r0
    cdac:	461a      	mov	r2, r3
    cdae:	4629      	mov	r1, r5
    cdb0:	4620      	mov	r0, r4
    cdb2:	f00e ffaf 	bl	1bd14 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    cdb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    cdb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cdba:	f7f4 f94d 	bl	1058 <qstr_from_strn>
    cdbe:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_local_free(dot_name);
    cdc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cdc2:	f7fe fb47 	bl	b454 <mp_local_free>

    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(dot_name_q);
    cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cdc8:	009b      	lsls	r3, r3, #2
    cdca:	f043 0302 	orr.w	r3, r3, #2
    cdce:	60bb      	str	r3, [r7, #8]
    args[1] = mp_const_none; // TODO should be globals
    cdd0:	4b0b      	ldr	r3, [pc, #44]	; (ce00 <mp_import_from+0x118>)
    cdd2:	60fb      	str	r3, [r7, #12]
    args[2] = mp_const_none; // TODO should be locals
    cdd4:	4b0a      	ldr	r3, [pc, #40]	; (ce00 <mp_import_from+0x118>)
    cdd6:	613b      	str	r3, [r7, #16]
    args[3] = mp_const_true; // Pass sentinel "non empty" value to force returning of leaf module
    cdd8:	4b0a      	ldr	r3, [pc, #40]	; (ce04 <mp_import_from+0x11c>)
    cdda:	617b      	str	r3, [r7, #20]
    args[4] = MP_OBJ_NEW_SMALL_INT(0);
    cddc:	2301      	movs	r3, #1
    cdde:	61bb      	str	r3, [r7, #24]

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    cde0:	f107 0308 	add.w	r3, r7, #8
    cde4:	4619      	mov	r1, r3
    cde6:	2005      	movs	r0, #5
    cde8:	f00b fcd4 	bl	18794 <mp_builtin___import__>
    cdec:	4603      	mov	r3, r0

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    cdee:	4618      	mov	r0, r3
    cdf0:	3738      	adds	r7, #56	; 0x38
    cdf2:	46bd      	mov	sp, r7
    cdf4:	bdb0      	pop	{r4, r5, r7, pc}
    cdf6:	bf00      	nop
    cdf8:	0001f854 	.word	0x0001f854
    cdfc:	000204b4 	.word	0x000204b4
    ce00:	00021480 	.word	0x00021480
    ce04:	0001fc3c 	.word	0x0001fc3c

0000ce08 <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    ce08:	b580      	push	{r7, lr}
    ce0a:	b086      	sub	sp, #24
    ce0c:	af00      	add	r7, sp, #0
    ce0e:	6078      	str	r0, [r7, #4]
    DEBUG_printf("import all %p\n", module);

    // TODO: Support __all__
    mp_map_t *map = &mp_obj_module_get_globals(module)->map;
    ce10:	6878      	ldr	r0, [r7, #4]
    ce12:	f7fe fb13 	bl	b43c <mp_obj_module_get_globals>
    ce16:	4603      	mov	r3, r0
    ce18:	3304      	adds	r3, #4
    ce1a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < map->alloc; i++) {
    ce1c:	2300      	movs	r3, #0
    ce1e:	617b      	str	r3, [r7, #20]
    ce20:	e022      	b.n	ce68 <mp_import_all+0x60>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    ce22:	6979      	ldr	r1, [r7, #20]
    ce24:	6938      	ldr	r0, [r7, #16]
    ce26:	f7fe fac7 	bl	b3b8 <MP_MAP_SLOT_IS_FILLED>
    ce2a:	4603      	mov	r3, r0
    ce2c:	2b00      	cmp	r3, #0
    ce2e:	d018      	beq.n	ce62 <mp_import_all+0x5a>
            qstr name = MP_OBJ_QSTR_VALUE(map->table[i].key);
    ce30:	693b      	ldr	r3, [r7, #16]
    ce32:	689a      	ldr	r2, [r3, #8]
    ce34:	697b      	ldr	r3, [r7, #20]
    ce36:	00db      	lsls	r3, r3, #3
    ce38:	4413      	add	r3, r2
    ce3a:	681b      	ldr	r3, [r3, #0]
    ce3c:	089b      	lsrs	r3, r3, #2
    ce3e:	60fb      	str	r3, [r7, #12]
            if (*qstr_str(name) != '_') {
    ce40:	68f8      	ldr	r0, [r7, #12]
    ce42:	f7f4 f9e5 	bl	1210 <qstr_str>
    ce46:	4603      	mov	r3, r0
    ce48:	781b      	ldrb	r3, [r3, #0]
    ce4a:	2b5f      	cmp	r3, #95	; 0x5f
    ce4c:	d009      	beq.n	ce62 <mp_import_all+0x5a>
                mp_store_name(name, map->table[i].value);
    ce4e:	693b      	ldr	r3, [r7, #16]
    ce50:	689a      	ldr	r2, [r3, #8]
    ce52:	697b      	ldr	r3, [r7, #20]
    ce54:	00db      	lsls	r3, r3, #3
    ce56:	4413      	add	r3, r2
    ce58:	685b      	ldr	r3, [r3, #4]
    ce5a:	4619      	mov	r1, r3
    ce5c:	68f8      	ldr	r0, [r7, #12]
    ce5e:	f7fe fc0b 	bl	b678 <mp_store_name>
    for (size_t i = 0; i < map->alloc; i++) {
    ce62:	697b      	ldr	r3, [r7, #20]
    ce64:	3301      	adds	r3, #1
    ce66:	617b      	str	r3, [r7, #20]
    ce68:	693b      	ldr	r3, [r7, #16]
    ce6a:	685a      	ldr	r2, [r3, #4]
    ce6c:	697b      	ldr	r3, [r7, #20]
    ce6e:	429a      	cmp	r2, r3
    ce70:	d8d7      	bhi.n	ce22 <mp_import_all+0x1a>
            }
        }
    }
}
    ce72:	bf00      	nop
    ce74:	3718      	adds	r7, #24
    ce76:	46bd      	mov	sp, r7
    ce78:	bd80      	pop	{r7, pc}
    ce7a:	bf00      	nop

0000ce7c <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    ce7c:	b580      	push	{r7, lr}
    ce7e:	b098      	sub	sp, #96	; 0x60
    ce80:	af00      	add	r7, sp, #0
    ce82:	60f8      	str	r0, [r7, #12]
    ce84:	60b9      	str	r1, [r7, #8]
    ce86:	607a      	str	r2, [r7, #4]
    ce88:	603b      	str	r3, [r7, #0]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    ce8a:	f7fe fb31 	bl	b4f0 <mp_globals_get>
    ce8e:	4603      	mov	r3, r0
    ce90:	653b      	str	r3, [r7, #80]	; 0x50
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    ce92:	f7fe fb11 	bl	b4b8 <mp_locals_get>
    ce96:	4603      	mov	r3, r0
    ce98:	64fb      	str	r3, [r7, #76]	; 0x4c

    // set new context
    mp_globals_set(globals);
    ce9a:	6878      	ldr	r0, [r7, #4]
    ce9c:	f7fe fb34 	bl	b508 <mp_globals_set>
    mp_locals_set(locals);
    cea0:	6838      	ldr	r0, [r7, #0]
    cea2:	f7fe fb15 	bl	b4d0 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    cea6:	f107 031c 	add.w	r3, r7, #28
    ceaa:	4618      	mov	r0, r3
    ceac:	f7f3 fa06 	bl	2bc <nlr_push>
    ceb0:	4603      	mov	r3, r0
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d121      	bne.n	cefa <mp_parse_compile_execute+0x7e>
        qstr source_name = lex->source_name;
    ceb6:	68fb      	ldr	r3, [r7, #12]
    ceb8:	681b      	ldr	r3, [r3, #0]
    ceba:	65fb      	str	r3, [r7, #92]	; 0x5c
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    cebc:	f107 0314 	add.w	r3, r7, #20
    cec0:	68ba      	ldr	r2, [r7, #8]
    cec2:	68f9      	ldr	r1, [r7, #12]
    cec4:	4618      	mov	r0, r3
    cec6:	f7f7 fa41 	bl	434c <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    ceca:	f107 0014 	add.w	r0, r7, #20
    cece:	2300      	movs	r3, #0
    ced0:	2200      	movs	r2, #0
    ced2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    ced4:	f7fc fc50 	bl	9778 <mp_compile>
    ced8:	65b8      	str	r0, [r7, #88]	; 0x58
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    ceda:	6db8      	ldr	r0, [r7, #88]	; 0x58
    cedc:	f7fe ff64 	bl	bda8 <mp_call_function_0>
    cee0:	6578      	str	r0, [r7, #84]	; 0x54
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    cee2:	f7f3 f9d9 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
    cee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cee8:	4618      	mov	r0, r3
    ceea:	f7fe fb0d 	bl	b508 <mp_globals_set>
        mp_locals_set(old_locals);
    ceee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cef0:	4618      	mov	r0, r3
    cef2:	f7fe faed 	bl	b4d0 <mp_locals_set>
        return ret;
    cef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cef8:	e00b      	b.n	cf12 <mp_parse_compile_execute+0x96>
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
    cefa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cefc:	4618      	mov	r0, r3
    cefe:	f7fe fb03 	bl	b508 <mp_globals_set>
        mp_locals_set(old_locals);
    cf02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf04:	4618      	mov	r0, r3
    cf06:	f7fe fae3 	bl	b4d0 <mp_locals_set>
        nlr_jump(nlr.ret_val);
    cf0a:	6a3b      	ldr	r3, [r7, #32]
    cf0c:	4618      	mov	r0, r3
    cf0e:	f7f3 f9e7 	bl	2e0 <nlr_jump>
    }
}
    cf12:	4618      	mov	r0, r3
    cf14:	3760      	adds	r7, #96	; 0x60
    cf16:	46bd      	mov	sp, r7
    cf18:	bd80      	pop	{r7, pc}
    cf1a:	bf00      	nop

0000cf1c <m_malloc_fail>:

#endif // MICROPY_ENABLE_COMPILER

NORETURN void m_malloc_fail(size_t num_bytes) {
    cf1c:	b580      	push	{r7, lr}
    cf1e:	b082      	sub	sp, #8
    cf20:	af00      	add	r7, sp, #0
    cf22:	6078      	str	r0, [r7, #4]
    DEBUG_printf("memory allocation failed, allocating %u bytes\n", (uint)num_bytes);
    #if MICROPY_ENABLE_GC
    if (gc_is_locked()) {
    cf24:	f7f3 fb4c 	bl	5c0 <gc_is_locked>
    cf28:	4603      	mov	r3, r0
    cf2a:	2b00      	cmp	r3, #0
    cf2c:	d003      	beq.n	cf36 <m_malloc_fail+0x1a>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    cf2e:	4906      	ldr	r1, [pc, #24]	; (cf48 <m_malloc_fail+0x2c>)
    cf30:	4806      	ldr	r0, [pc, #24]	; (cf4c <m_malloc_fail+0x30>)
    cf32:	f000 f80f 	bl	cf54 <mp_raise_msg>
    }
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    cf36:	687a      	ldr	r2, [r7, #4]
    cf38:	4905      	ldr	r1, [pc, #20]	; (cf50 <m_malloc_fail+0x34>)
    cf3a:	4804      	ldr	r0, [pc, #16]	; (cf4c <m_malloc_fail+0x30>)
    cf3c:	f002 fb5a 	bl	f5f4 <mp_obj_new_exception_msg_varg>
    cf40:	4603      	mov	r3, r0
    cf42:	4618      	mov	r0, r3
    cf44:	f7f3 f9cc 	bl	2e0 <nlr_jump>
    cf48:	0001f86c 	.word	0x0001f86c
    cf4c:	000205a4 	.word	0x000205a4
    cf50:	0001f898 	.word	0x0001f898

0000cf54 <mp_raise_msg>:
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    cf54:	b580      	push	{r7, lr}
    cf56:	b082      	sub	sp, #8
    cf58:	af00      	add	r7, sp, #0
    cf5a:	6078      	str	r0, [r7, #4]
    cf5c:	6039      	str	r1, [r7, #0]
    if (msg == NULL) {
    cf5e:	683b      	ldr	r3, [r7, #0]
    cf60:	2b00      	cmp	r3, #0
    cf62:	d106      	bne.n	cf72 <mp_raise_msg+0x1e>
        nlr_raise(mp_obj_new_exception(exc_type));
    cf64:	6878      	ldr	r0, [r7, #4]
    cf66:	f002 faa1 	bl	f4ac <mp_obj_new_exception>
    cf6a:	4603      	mov	r3, r0
    cf6c:	4618      	mov	r0, r3
    cf6e:	f7f3 f9b7 	bl	2e0 <nlr_jump>
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    cf72:	6839      	ldr	r1, [r7, #0]
    cf74:	6878      	ldr	r0, [r7, #4]
    cf76:	f002 fadd 	bl	f534 <mp_obj_new_exception_msg>
    cf7a:	4603      	mov	r3, r0
    cf7c:	4618      	mov	r0, r3
    cf7e:	f7f3 f9af 	bl	2e0 <nlr_jump>
    cf82:	bf00      	nop

0000cf84 <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    cf84:	b580      	push	{r7, lr}
    cf86:	b082      	sub	sp, #8
    cf88:	af00      	add	r7, sp, #0
    cf8a:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_ValueError, msg);
    cf8c:	6879      	ldr	r1, [r7, #4]
    cf8e:	4801      	ldr	r0, [pc, #4]	; (cf94 <mp_raise_ValueError+0x10>)
    cf90:	f7ff ffe0 	bl	cf54 <mp_raise_msg>
    cf94:	00020784 	.word	0x00020784

0000cf98 <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    cf98:	b580      	push	{r7, lr}
    cf9a:	b082      	sub	sp, #8
    cf9c:	af00      	add	r7, sp, #0
    cf9e:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_TypeError, msg);
    cfa0:	6879      	ldr	r1, [r7, #4]
    cfa2:	4801      	ldr	r0, [pc, #4]	; (cfa8 <mp_raise_TypeError+0x10>)
    cfa4:	f7ff ffd6 	bl	cf54 <mp_raise_msg>
    cfa8:	00020748 	.word	0x00020748

0000cfac <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    cfac:	b580      	push	{r7, lr}
    cfae:	b082      	sub	sp, #8
    cfb0:	af00      	add	r7, sp, #0
    cfb2:	6078      	str	r0, [r7, #4]
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    cfb4:	687b      	ldr	r3, [r7, #4]
    cfb6:	005b      	lsls	r3, r3, #1
    cfb8:	f043 0301 	orr.w	r3, r3, #1
    cfbc:	4619      	mov	r1, r3
    cfbe:	4803      	ldr	r0, [pc, #12]	; (cfcc <mp_raise_OSError+0x20>)
    cfc0:	f002 fa82 	bl	f4c8 <mp_obj_new_exception_arg1>
    cfc4:	4603      	mov	r3, r0
    cfc6:	4618      	mov	r0, r3
    cfc8:	f7f3 f98a 	bl	2e0 <nlr_jump>
    cfcc:	0002061c 	.word	0x0002061c

0000cfd0 <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    cfd0:	b580      	push	{r7, lr}
    cfd2:	b082      	sub	sp, #8
    cfd4:	af00      	add	r7, sp, #0
    cfd6:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    cfd8:	6879      	ldr	r1, [r7, #4]
    cfda:	4801      	ldr	r0, [pc, #4]	; (cfe0 <mp_raise_NotImplementedError+0x10>)
    cfdc:	f7ff ffba 	bl	cf54 <mp_raise_msg>
    cfe0:	00020694 	.word	0x00020694

0000cfe4 <mp_arg_check_num>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    cfe4:	b580      	push	{r7, lr}
    cfe6:	b084      	sub	sp, #16
    cfe8:	af00      	add	r7, sp, #0
    cfea:	60f8      	str	r0, [r7, #12]
    cfec:	60b9      	str	r1, [r7, #8]
    cfee:	607a      	str	r2, [r7, #4]
    cff0:	603b      	str	r3, [r7, #0]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    if (n_kw && !takes_kw) {
    cff2:	68bb      	ldr	r3, [r7, #8]
    cff4:	2b00      	cmp	r3, #0
    cff6:	d007      	beq.n	d008 <mp_arg_check_num+0x24>
    cff8:	7e3b      	ldrb	r3, [r7, #24]
    cffa:	f083 0301 	eor.w	r3, r3, #1
    cffe:	b2db      	uxtb	r3, r3
    d000:	2b00      	cmp	r3, #0
    d002:	d001      	beq.n	d008 <mp_arg_check_num+0x24>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d004:	f000 f8e8 	bl	d1d8 <mp_arg_error_terse_mismatch>
        } else {
            mp_raise_TypeError("function does not take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    d008:	687a      	ldr	r2, [r7, #4]
    d00a:	683b      	ldr	r3, [r7, #0]
    d00c:	429a      	cmp	r2, r3
    d00e:	d105      	bne.n	d01c <mp_arg_check_num+0x38>
        if (n_args != n_args_min) {
    d010:	68fa      	ldr	r2, [r7, #12]
    d012:	687b      	ldr	r3, [r7, #4]
    d014:	429a      	cmp	r2, r3
    d016:	d00d      	beq.n	d034 <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d018:	f000 f8de 	bl	d1d8 <mp_arg_error_terse_mismatch>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    d01c:	68fa      	ldr	r2, [r7, #12]
    d01e:	687b      	ldr	r3, [r7, #4]
    d020:	429a      	cmp	r2, r3
    d022:	d201      	bcs.n	d028 <mp_arg_check_num+0x44>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d024:	f000 f8d8 	bl	d1d8 <mp_arg_error_terse_mismatch>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    d028:	68fa      	ldr	r2, [r7, #12]
    d02a:	683b      	ldr	r3, [r7, #0]
    d02c:	429a      	cmp	r2, r3
    d02e:	d901      	bls.n	d034 <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d030:	f000 f8d2 	bl	d1d8 <mp_arg_error_terse_mismatch>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    d034:	bf00      	nop
    d036:	3710      	adds	r7, #16
    d038:	46bd      	mov	sp, r7
    d03a:	bd80      	pop	{r7, pc}

0000d03c <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d03c:	b590      	push	{r4, r7, lr}
    d03e:	b08b      	sub	sp, #44	; 0x2c
    d040:	af00      	add	r7, sp, #0
    d042:	60f8      	str	r0, [r7, #12]
    d044:	60b9      	str	r1, [r7, #8]
    d046:	607a      	str	r2, [r7, #4]
    d048:	603b      	str	r3, [r7, #0]
    size_t pos_found = 0, kws_found = 0;
    d04a:	2300      	movs	r3, #0
    d04c:	627b      	str	r3, [r7, #36]	; 0x24
    d04e:	2300      	movs	r3, #0
    d050:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < n_allowed; i++) {
    d052:	2300      	movs	r3, #0
    d054:	61fb      	str	r3, [r7, #28]
    d056:	e07e      	b.n	d156 <mp_arg_parse_all+0x11a>
        mp_obj_t given_arg;
        if (i < n_pos) {
    d058:	69fa      	ldr	r2, [r7, #28]
    d05a:	68fb      	ldr	r3, [r7, #12]
    d05c:	429a      	cmp	r2, r3
    d05e:	d212      	bcs.n	d086 <mp_arg_parse_all+0x4a>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    d060:	69fb      	ldr	r3, [r7, #28]
    d062:	00db      	lsls	r3, r3, #3
    d064:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d066:	4413      	add	r3, r2
    d068:	885b      	ldrh	r3, [r3, #2]
    d06a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d06e:	2b00      	cmp	r3, #0
    d070:	d17b      	bne.n	d16a <mp_arg_parse_all+0x12e>
                goto extra_positional;
            }
            pos_found++;
    d072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d074:	3301      	adds	r3, #1
    d076:	627b      	str	r3, [r7, #36]	; 0x24
            given_arg = pos[i];
    d078:	69fb      	ldr	r3, [r7, #28]
    d07a:	009b      	lsls	r3, r3, #2
    d07c:	68ba      	ldr	r2, [r7, #8]
    d07e:	4413      	add	r3, r2
    d080:	681b      	ldr	r3, [r3, #0]
    d082:	61bb      	str	r3, [r7, #24]
    d084:	e02c      	b.n	d0e0 <mp_arg_parse_all+0xa4>
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    d086:	69fb      	ldr	r3, [r7, #28]
    d088:	00db      	lsls	r3, r3, #3
    d08a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d08c:	4413      	add	r3, r2
    d08e:	881b      	ldrh	r3, [r3, #0]
    d090:	009b      	lsls	r3, r3, #2
    d092:	f043 0302 	orr.w	r3, r3, #2
    d096:	2200      	movs	r2, #0
    d098:	4619      	mov	r1, r3
    d09a:	6878      	ldr	r0, [r7, #4]
    d09c:	f000 f9ec 	bl	d478 <mp_map_lookup>
    d0a0:	6178      	str	r0, [r7, #20]
            if (kw == NULL) {
    d0a2:	697b      	ldr	r3, [r7, #20]
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d115      	bne.n	d0d4 <mp_arg_parse_all+0x98>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    d0a8:	69fb      	ldr	r3, [r7, #28]
    d0aa:	00db      	lsls	r3, r3, #3
    d0ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0ae:	4413      	add	r3, r2
    d0b0:	885b      	ldrh	r3, [r3, #2]
    d0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d001      	beq.n	d0be <mp_arg_parse_all+0x82>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_arg_error_terse_mismatch();
    d0ba:	f000 f88d 	bl	d1d8 <mp_arg_error_terse_mismatch>
                    } else {
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "'%q' argument required", allowed[i].qst));
                    }
                }
                out_vals[i] = allowed[i].defval;
    d0be:	69fb      	ldr	r3, [r7, #28]
    d0c0:	009b      	lsls	r3, r3, #2
    d0c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0c4:	4413      	add	r3, r2
    d0c6:	69fa      	ldr	r2, [r7, #28]
    d0c8:	00d2      	lsls	r2, r2, #3
    d0ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d0cc:	440a      	add	r2, r1
    d0ce:	6852      	ldr	r2, [r2, #4]
    d0d0:	601a      	str	r2, [r3, #0]
                continue;
    d0d2:	e03d      	b.n	d150 <mp_arg_parse_all+0x114>
            } else {
                kws_found++;
    d0d4:	6a3b      	ldr	r3, [r7, #32]
    d0d6:	3301      	adds	r3, #1
    d0d8:	623b      	str	r3, [r7, #32]
                given_arg = kw->value;
    d0da:	697b      	ldr	r3, [r7, #20]
    d0dc:	685b      	ldr	r3, [r3, #4]
    d0de:	61bb      	str	r3, [r7, #24]
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    d0e0:	69fb      	ldr	r3, [r7, #28]
    d0e2:	00db      	lsls	r3, r3, #3
    d0e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0e6:	4413      	add	r3, r2
    d0e8:	885b      	ldrh	r3, [r3, #2]
    d0ea:	b2db      	uxtb	r3, r3
    d0ec:	2b01      	cmp	r3, #1
    d0ee:	d109      	bne.n	d104 <mp_arg_parse_all+0xc8>
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    d0f0:	69fb      	ldr	r3, [r7, #28]
    d0f2:	009b      	lsls	r3, r3, #2
    d0f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0f6:	18d4      	adds	r4, r2, r3
    d0f8:	69b8      	ldr	r0, [r7, #24]
    d0fa:	f000 fc45 	bl	d988 <mp_obj_is_true>
    d0fe:	4603      	mov	r3, r0
    d100:	7023      	strb	r3, [r4, #0]
    d102:	e025      	b.n	d150 <mp_arg_parse_all+0x114>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    d104:	69fb      	ldr	r3, [r7, #28]
    d106:	00db      	lsls	r3, r3, #3
    d108:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d10a:	4413      	add	r3, r2
    d10c:	885b      	ldrh	r3, [r3, #2]
    d10e:	b2db      	uxtb	r3, r3
    d110:	2b02      	cmp	r3, #2
    d112:	d109      	bne.n	d128 <mp_arg_parse_all+0xec>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    d114:	69fb      	ldr	r3, [r7, #28]
    d116:	009b      	lsls	r3, r3, #2
    d118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d11a:	18d4      	adds	r4, r2, r3
    d11c:	69b8      	ldr	r0, [r7, #24]
    d11e:	f000 fd33 	bl	db88 <mp_obj_get_int>
    d122:	4603      	mov	r3, r0
    d124:	6023      	str	r3, [r4, #0]
    d126:	e013      	b.n	d150 <mp_arg_parse_all+0x114>
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    d128:	69fb      	ldr	r3, [r7, #28]
    d12a:	00db      	lsls	r3, r3, #3
    d12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d12e:	4413      	add	r3, r2
    d130:	885b      	ldrh	r3, [r3, #2]
    d132:	b2db      	uxtb	r3, r3
    d134:	2b03      	cmp	r3, #3
    d136:	d005      	beq.n	d144 <mp_arg_parse_all+0x108>
    d138:	4b14      	ldr	r3, [pc, #80]	; (d18c <mp_arg_parse_all+0x150>)
    d13a:	4a15      	ldr	r2, [pc, #84]	; (d190 <mp_arg_parse_all+0x154>)
    d13c:	216b      	movs	r1, #107	; 0x6b
    d13e:	4815      	ldr	r0, [pc, #84]	; (d194 <mp_arg_parse_all+0x158>)
    d140:	f00e f92c 	bl	1b39c <__assert_func>
            out_vals[i].u_obj = given_arg;
    d144:	69fb      	ldr	r3, [r7, #28]
    d146:	009b      	lsls	r3, r3, #2
    d148:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d14a:	4413      	add	r3, r2
    d14c:	69ba      	ldr	r2, [r7, #24]
    d14e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n_allowed; i++) {
    d150:	69fb      	ldr	r3, [r7, #28]
    d152:	3301      	adds	r3, #1
    d154:	61fb      	str	r3, [r7, #28]
    d156:	69fa      	ldr	r2, [r7, #28]
    d158:	683b      	ldr	r3, [r7, #0]
    d15a:	429a      	cmp	r2, r3
    d15c:	f4ff af7c 	bcc.w	d058 <mp_arg_parse_all+0x1c>
        }
    }
    if (pos_found < n_pos) {
    d160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d162:	68fb      	ldr	r3, [r7, #12]
    d164:	429a      	cmp	r2, r3
    d166:	d203      	bcs.n	d170 <mp_arg_parse_all+0x134>
    d168:	e000      	b.n	d16c <mp_arg_parse_all+0x130>
                goto extra_positional;
    d16a:	bf00      	nop
        extra_positional:
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d16c:	f000 f834 	bl	d1d8 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    d170:	687b      	ldr	r3, [r7, #4]
    d172:	681b      	ldr	r3, [r3, #0]
    d174:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d178:	461a      	mov	r2, r3
    d17a:	6a3b      	ldr	r3, [r7, #32]
    d17c:	429a      	cmp	r2, r3
    d17e:	d901      	bls.n	d184 <mp_arg_parse_all+0x148>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d180:	f000 f82a 	bl	d1d8 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    d184:	bf00      	nop
    d186:	372c      	adds	r7, #44	; 0x2c
    d188:	46bd      	mov	sp, r7
    d18a:	bd90      	pop	{r4, r7, pc}
    d18c:	0001f924 	.word	0x0001f924
    d190:	0001f988 	.word	0x0001f988
    d194:	0001f958 	.word	0x0001f958

0000d198 <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d198:	b580      	push	{r7, lr}
    d19a:	b08a      	sub	sp, #40	; 0x28
    d19c:	af02      	add	r7, sp, #8
    d19e:	60f8      	str	r0, [r7, #12]
    d1a0:	60b9      	str	r1, [r7, #8]
    d1a2:	607a      	str	r2, [r7, #4]
    d1a4:	603b      	str	r3, [r7, #0]
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    d1a6:	68fb      	ldr	r3, [r7, #12]
    d1a8:	009b      	lsls	r3, r3, #2
    d1aa:	687a      	ldr	r2, [r7, #4]
    d1ac:	441a      	add	r2, r3
    d1ae:	f107 0314 	add.w	r3, r7, #20
    d1b2:	68b9      	ldr	r1, [r7, #8]
    d1b4:	4618      	mov	r0, r3
    d1b6:	f000 f897 	bl	d2e8 <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    d1ba:	f107 0214 	add.w	r2, r7, #20
    d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1c0:	9301      	str	r3, [sp, #4]
    d1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1c4:	9300      	str	r3, [sp, #0]
    d1c6:	683b      	ldr	r3, [r7, #0]
    d1c8:	6879      	ldr	r1, [r7, #4]
    d1ca:	68f8      	ldr	r0, [r7, #12]
    d1cc:	f7ff ff36 	bl	d03c <mp_arg_parse_all>
}
    d1d0:	bf00      	nop
    d1d2:	3720      	adds	r7, #32
    d1d4:	46bd      	mov	sp, r7
    d1d6:	bd80      	pop	{r7, pc}

0000d1d8 <mp_arg_error_terse_mismatch>:

NORETURN void mp_arg_error_terse_mismatch(void) {
    d1d8:	b580      	push	{r7, lr}
    d1da:	af00      	add	r7, sp, #0
    mp_raise_TypeError("argument num/types mismatch");
    d1dc:	4801      	ldr	r0, [pc, #4]	; (d1e4 <mp_arg_error_terse_mismatch+0xc>)
    d1de:	f7ff fedb 	bl	cf98 <mp_raise_TypeError>
    d1e2:	bf00      	nop
    d1e4:	0001f96c 	.word	0x0001f96c

0000d1e8 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d1e8:	b480      	push	{r7}
    d1ea:	b083      	sub	sp, #12
    d1ec:	af00      	add	r7, sp, #0
    d1ee:	6078      	str	r0, [r7, #4]
    d1f0:	687b      	ldr	r3, [r7, #4]
    d1f2:	f003 0303 	and.w	r3, r3, #3
    d1f6:	2b02      	cmp	r3, #2
    d1f8:	bf0c      	ite	eq
    d1fa:	2301      	moveq	r3, #1
    d1fc:	2300      	movne	r3, #0
    d1fe:	b2db      	uxtb	r3, r3
    d200:	4618      	mov	r0, r3
    d202:	370c      	adds	r7, #12
    d204:	46bd      	mov	sp, r7
    d206:	f85d 7b04 	ldr.w	r7, [sp], #4
    d20a:	4770      	bx	lr

0000d20c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d20c:	b480      	push	{r7}
    d20e:	b083      	sub	sp, #12
    d210:	af00      	add	r7, sp, #0
    d212:	6078      	str	r0, [r7, #4]
    d214:	687b      	ldr	r3, [r7, #4]
    d216:	f003 0303 	and.w	r3, r3, #3
    d21a:	2b00      	cmp	r3, #0
    d21c:	bf0c      	ite	eq
    d21e:	2301      	moveq	r3, #1
    d220:	2300      	movne	r3, #0
    d222:	b2db      	uxtb	r3, r3
    d224:	4618      	mov	r0, r3
    d226:	370c      	adds	r7, #12
    d228:	46bd      	mov	sp, r7
    d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d22e:	4770      	bx	lr

0000d230 <get_hash_alloc_greater_or_equal_to>:
    17, 23, 29, 37, 47, 59, 73, // *1.25
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    d230:	b480      	push	{r7}
    d232:	b085      	sub	sp, #20
    d234:	af00      	add	r7, sp, #0
    d236:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d238:	2300      	movs	r3, #0
    d23a:	60fb      	str	r3, [r7, #12]
    d23c:	e00f      	b.n	d25e <get_hash_alloc_greater_or_equal_to+0x2e>
        if (hash_allocation_sizes[i] >= x) {
    d23e:	4a0f      	ldr	r2, [pc, #60]	; (d27c <get_hash_alloc_greater_or_equal_to+0x4c>)
    d240:	68fb      	ldr	r3, [r7, #12]
    d242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d246:	461a      	mov	r2, r3
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	429a      	cmp	r2, r3
    d24c:	d304      	bcc.n	d258 <get_hash_alloc_greater_or_equal_to+0x28>
            return hash_allocation_sizes[i];
    d24e:	4a0b      	ldr	r2, [pc, #44]	; (d27c <get_hash_alloc_greater_or_equal_to+0x4c>)
    d250:	68fb      	ldr	r3, [r7, #12]
    d252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d256:	e00b      	b.n	d270 <get_hash_alloc_greater_or_equal_to+0x40>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d258:	68fb      	ldr	r3, [r7, #12]
    d25a:	3301      	adds	r3, #1
    d25c:	60fb      	str	r3, [r7, #12]
    d25e:	68fb      	ldr	r3, [r7, #12]
    d260:	2b21      	cmp	r3, #33	; 0x21
    d262:	d9ec      	bls.n	d23e <get_hash_alloc_greater_or_equal_to+0xe>
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    d264:	687b      	ldr	r3, [r7, #4]
    d266:	085a      	lsrs	r2, r3, #1
    d268:	687b      	ldr	r3, [r7, #4]
    d26a:	4413      	add	r3, r2
    d26c:	f043 0301 	orr.w	r3, r3, #1
}
    d270:	4618      	mov	r0, r3
    d272:	3714      	adds	r7, #20
    d274:	46bd      	mov	sp, r7
    d276:	f85d 7b04 	ldr.w	r7, [sp], #4
    d27a:	4770      	bx	lr
    d27c:	0001f9a8 	.word	0x0001f9a8

0000d280 <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    d280:	b580      	push	{r7, lr}
    d282:	b082      	sub	sp, #8
    d284:	af00      	add	r7, sp, #0
    d286:	6078      	str	r0, [r7, #4]
    d288:	6039      	str	r1, [r7, #0]
    if (n == 0) {
    d28a:	683b      	ldr	r3, [r7, #0]
    d28c:	2b00      	cmp	r3, #0
    d28e:	d106      	bne.n	d29e <mp_map_init+0x1e>
        map->alloc = 0;
    d290:	687b      	ldr	r3, [r7, #4]
    d292:	2200      	movs	r2, #0
    d294:	605a      	str	r2, [r3, #4]
        map->table = NULL;
    d296:	687b      	ldr	r3, [r7, #4]
    d298:	2200      	movs	r2, #0
    d29a:	609a      	str	r2, [r3, #8]
    d29c:	e00b      	b.n	d2b6 <mp_map_init+0x36>
    } else {
        map->alloc = n;
    d29e:	687b      	ldr	r3, [r7, #4]
    d2a0:	683a      	ldr	r2, [r7, #0]
    d2a2:	605a      	str	r2, [r3, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    d2a4:	687b      	ldr	r3, [r7, #4]
    d2a6:	685b      	ldr	r3, [r3, #4]
    d2a8:	00db      	lsls	r3, r3, #3
    d2aa:	4618      	mov	r0, r3
    d2ac:	f7f3 f85c 	bl	368 <m_malloc0>
    d2b0:	4602      	mov	r2, r0
    d2b2:	687b      	ldr	r3, [r7, #4]
    d2b4:	609a      	str	r2, [r3, #8]
    }
    map->used = 0;
    d2b6:	687a      	ldr	r2, [r7, #4]
    d2b8:	6813      	ldr	r3, [r2, #0]
    d2ba:	f36f 03df 	bfc	r3, #3, #29
    d2be:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d2c0:	687a      	ldr	r2, [r7, #4]
    d2c2:	7813      	ldrb	r3, [r2, #0]
    d2c4:	f043 0301 	orr.w	r3, r3, #1
    d2c8:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d2ca:	687a      	ldr	r2, [r7, #4]
    d2cc:	7813      	ldrb	r3, [r2, #0]
    d2ce:	f36f 0341 	bfc	r3, #1, #1
    d2d2:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 0;
    d2d4:	687a      	ldr	r2, [r7, #4]
    d2d6:	7813      	ldrb	r3, [r2, #0]
    d2d8:	f36f 0382 	bfc	r3, #2, #1
    d2dc:	7013      	strb	r3, [r2, #0]
}
    d2de:	bf00      	nop
    d2e0:	3708      	adds	r7, #8
    d2e2:	46bd      	mov	sp, r7
    d2e4:	bd80      	pop	{r7, pc}
    d2e6:	bf00      	nop

0000d2e8 <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    d2e8:	b480      	push	{r7}
    d2ea:	b085      	sub	sp, #20
    d2ec:	af00      	add	r7, sp, #0
    d2ee:	60f8      	str	r0, [r7, #12]
    d2f0:	60b9      	str	r1, [r7, #8]
    d2f2:	607a      	str	r2, [r7, #4]
    map->alloc = n;
    d2f4:	68fb      	ldr	r3, [r7, #12]
    d2f6:	68ba      	ldr	r2, [r7, #8]
    d2f8:	605a      	str	r2, [r3, #4]
    map->used = n;
    d2fa:	68bb      	ldr	r3, [r7, #8]
    d2fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d300:	68fa      	ldr	r2, [r7, #12]
    d302:	6813      	ldr	r3, [r2, #0]
    d304:	f361 03df 	bfi	r3, r1, #3, #29
    d308:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d30a:	68fa      	ldr	r2, [r7, #12]
    d30c:	7813      	ldrb	r3, [r2, #0]
    d30e:	f043 0301 	orr.w	r3, r3, #1
    d312:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 1;
    d314:	68fa      	ldr	r2, [r7, #12]
    d316:	7813      	ldrb	r3, [r2, #0]
    d318:	f043 0302 	orr.w	r3, r3, #2
    d31c:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 1;
    d31e:	68fa      	ldr	r2, [r7, #12]
    d320:	7813      	ldrb	r3, [r2, #0]
    d322:	f043 0304 	orr.w	r3, r3, #4
    d326:	7013      	strb	r3, [r2, #0]
    map->table = (mp_map_elem_t*)table;
    d328:	68fb      	ldr	r3, [r7, #12]
    d32a:	687a      	ldr	r2, [r7, #4]
    d32c:	609a      	str	r2, [r3, #8]
}
    d32e:	bf00      	nop
    d330:	3714      	adds	r7, #20
    d332:	46bd      	mov	sp, r7
    d334:	f85d 7b04 	ldr.w	r7, [sp], #4
    d338:	4770      	bx	lr
    d33a:	bf00      	nop

0000d33c <mp_map_deinit>:

// Differentiate from mp_map_clear() - semantics is different
void mp_map_deinit(mp_map_t *map) {
    d33c:	b580      	push	{r7, lr}
    d33e:	b082      	sub	sp, #8
    d340:	af00      	add	r7, sp, #0
    d342:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d344:	687b      	ldr	r3, [r7, #4]
    d346:	781b      	ldrb	r3, [r3, #0]
    d348:	f003 0302 	and.w	r3, r3, #2
    d34c:	b2db      	uxtb	r3, r3
    d34e:	2b00      	cmp	r3, #0
    d350:	d104      	bne.n	d35c <mp_map_deinit+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d352:	687b      	ldr	r3, [r7, #4]
    d354:	689b      	ldr	r3, [r3, #8]
    d356:	4618      	mov	r0, r3
    d358:	f7f3 f842 	bl	3e0 <m_free>
    }
    map->used = map->alloc = 0;
    d35c:	687b      	ldr	r3, [r7, #4]
    d35e:	2200      	movs	r2, #0
    d360:	605a      	str	r2, [r3, #4]
    d362:	687a      	ldr	r2, [r7, #4]
    d364:	6813      	ldr	r3, [r2, #0]
    d366:	f36f 03df 	bfc	r3, #3, #29
    d36a:	6013      	str	r3, [r2, #0]
}
    d36c:	bf00      	nop
    d36e:	3708      	adds	r7, #8
    d370:	46bd      	mov	sp, r7
    d372:	bd80      	pop	{r7, pc}

0000d374 <mp_map_clear>:

void mp_map_clear(mp_map_t *map) {
    d374:	b580      	push	{r7, lr}
    d376:	b082      	sub	sp, #8
    d378:	af00      	add	r7, sp, #0
    d37a:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d37c:	687b      	ldr	r3, [r7, #4]
    d37e:	781b      	ldrb	r3, [r3, #0]
    d380:	f003 0302 	and.w	r3, r3, #2
    d384:	b2db      	uxtb	r3, r3
    d386:	2b00      	cmp	r3, #0
    d388:	d104      	bne.n	d394 <mp_map_clear+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d38a:	687b      	ldr	r3, [r7, #4]
    d38c:	689b      	ldr	r3, [r3, #8]
    d38e:	4618      	mov	r0, r3
    d390:	f7f3 f826 	bl	3e0 <m_free>
    }
    map->alloc = 0;
    d394:	687b      	ldr	r3, [r7, #4]
    d396:	2200      	movs	r2, #0
    d398:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d39a:	687a      	ldr	r2, [r7, #4]
    d39c:	6813      	ldr	r3, [r2, #0]
    d39e:	f36f 03df 	bfc	r3, #3, #29
    d3a2:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d3a4:	687a      	ldr	r2, [r7, #4]
    d3a6:	7813      	ldrb	r3, [r2, #0]
    d3a8:	f043 0301 	orr.w	r3, r3, #1
    d3ac:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d3ae:	687a      	ldr	r2, [r7, #4]
    d3b0:	7813      	ldrb	r3, [r2, #0]
    d3b2:	f36f 0341 	bfc	r3, #1, #1
    d3b6:	7013      	strb	r3, [r2, #0]
    map->table = NULL;
    d3b8:	687b      	ldr	r3, [r7, #4]
    d3ba:	2200      	movs	r2, #0
    d3bc:	609a      	str	r2, [r3, #8]
}
    d3be:	bf00      	nop
    d3c0:	3708      	adds	r7, #8
    d3c2:	46bd      	mov	sp, r7
    d3c4:	bd80      	pop	{r7, pc}
    d3c6:	bf00      	nop

0000d3c8 <mp_map_rehash>:

STATIC void mp_map_rehash(mp_map_t *map) {
    d3c8:	b580      	push	{r7, lr}
    d3ca:	b088      	sub	sp, #32
    d3cc:	af00      	add	r7, sp, #0
    d3ce:	6078      	str	r0, [r7, #4]
    size_t old_alloc = map->alloc;
    d3d0:	687b      	ldr	r3, [r7, #4]
    d3d2:	685b      	ldr	r3, [r3, #4]
    d3d4:	61bb      	str	r3, [r7, #24]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    d3d6:	687b      	ldr	r3, [r7, #4]
    d3d8:	685b      	ldr	r3, [r3, #4]
    d3da:	3301      	adds	r3, #1
    d3dc:	4618      	mov	r0, r3
    d3de:	f7ff ff27 	bl	d230 <get_hash_alloc_greater_or_equal_to>
    d3e2:	6178      	str	r0, [r7, #20]
    DEBUG_printf("mp_map_rehash(%p): " UINT_FMT " -> " UINT_FMT "\n", map, old_alloc, new_alloc);
    mp_map_elem_t *old_table = map->table;
    d3e4:	687b      	ldr	r3, [r7, #4]
    d3e6:	689b      	ldr	r3, [r3, #8]
    d3e8:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    d3ea:	697b      	ldr	r3, [r7, #20]
    d3ec:	00db      	lsls	r3, r3, #3
    d3ee:	4618      	mov	r0, r3
    d3f0:	f7f2 ffba 	bl	368 <m_malloc0>
    d3f4:	60f8      	str	r0, [r7, #12]
    // If we reach this point, table resizing succeeded, now we can edit the old map.
    map->alloc = new_alloc;
    d3f6:	687b      	ldr	r3, [r7, #4]
    d3f8:	697a      	ldr	r2, [r7, #20]
    d3fa:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d3fc:	687a      	ldr	r2, [r7, #4]
    d3fe:	6813      	ldr	r3, [r2, #0]
    d400:	f36f 03df 	bfc	r3, #3, #29
    d404:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d406:	687a      	ldr	r2, [r7, #4]
    d408:	7813      	ldrb	r3, [r2, #0]
    d40a:	f043 0301 	orr.w	r3, r3, #1
    d40e:	7013      	strb	r3, [r2, #0]
    map->table = new_table;
    d410:	687b      	ldr	r3, [r7, #4]
    d412:	68fa      	ldr	r2, [r7, #12]
    d414:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    d416:	2300      	movs	r3, #0
    d418:	61fb      	str	r3, [r7, #28]
    d41a:	e021      	b.n	d460 <mp_map_rehash+0x98>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    d41c:	69fb      	ldr	r3, [r7, #28]
    d41e:	00db      	lsls	r3, r3, #3
    d420:	693a      	ldr	r2, [r7, #16]
    d422:	4413      	add	r3, r2
    d424:	681b      	ldr	r3, [r3, #0]
    d426:	2b00      	cmp	r3, #0
    d428:	d017      	beq.n	d45a <mp_map_rehash+0x92>
    d42a:	69fb      	ldr	r3, [r7, #28]
    d42c:	00db      	lsls	r3, r3, #3
    d42e:	693a      	ldr	r2, [r7, #16]
    d430:	4413      	add	r3, r2
    d432:	681b      	ldr	r3, [r3, #0]
    d434:	2b08      	cmp	r3, #8
    d436:	d010      	beq.n	d45a <mp_map_rehash+0x92>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    d438:	69fb      	ldr	r3, [r7, #28]
    d43a:	00db      	lsls	r3, r3, #3
    d43c:	693a      	ldr	r2, [r7, #16]
    d43e:	4413      	add	r3, r2
    d440:	681b      	ldr	r3, [r3, #0]
    d442:	2201      	movs	r2, #1
    d444:	4619      	mov	r1, r3
    d446:	6878      	ldr	r0, [r7, #4]
    d448:	f000 f816 	bl	d478 <mp_map_lookup>
    d44c:	4601      	mov	r1, r0
    d44e:	69fb      	ldr	r3, [r7, #28]
    d450:	00db      	lsls	r3, r3, #3
    d452:	693a      	ldr	r2, [r7, #16]
    d454:	4413      	add	r3, r2
    d456:	685b      	ldr	r3, [r3, #4]
    d458:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < old_alloc; i++) {
    d45a:	69fb      	ldr	r3, [r7, #28]
    d45c:	3301      	adds	r3, #1
    d45e:	61fb      	str	r3, [r7, #28]
    d460:	69fa      	ldr	r2, [r7, #28]
    d462:	69bb      	ldr	r3, [r7, #24]
    d464:	429a      	cmp	r2, r3
    d466:	d3d9      	bcc.n	d41c <mp_map_rehash+0x54>
        }
    }
    m_del(mp_map_elem_t, old_table, old_alloc);
    d468:	6938      	ldr	r0, [r7, #16]
    d46a:	f7f2 ffb9 	bl	3e0 <m_free>
}
    d46e:	bf00      	nop
    d470:	3720      	adds	r7, #32
    d472:	46bd      	mov	sp, r7
    d474:	bd80      	pop	{r7, pc}
    d476:	bf00      	nop

0000d478 <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    d478:	b580      	push	{r7, lr}
    d47a:	b08c      	sub	sp, #48	; 0x30
    d47c:	af00      	add	r7, sp, #0
    d47e:	60f8      	str	r0, [r7, #12]
    d480:	60b9      	str	r1, [r7, #8]
    d482:	607a      	str	r2, [r7, #4]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    d484:	68fb      	ldr	r3, [r7, #12]
    d486:	781b      	ldrb	r3, [r3, #0]
    d488:	f003 0302 	and.w	r3, r3, #2
    d48c:	b2db      	uxtb	r3, r3
    d48e:	2b00      	cmp	r3, #0
    d490:	d008      	beq.n	d4a4 <mp_map_lookup+0x2c>
    d492:	687b      	ldr	r3, [r7, #4]
    d494:	2b00      	cmp	r3, #0
    d496:	d005      	beq.n	d4a4 <mp_map_lookup+0x2c>
    d498:	4ba3      	ldr	r3, [pc, #652]	; (d728 <mp_map_lookup+0x2b0>)
    d49a:	4aa4      	ldr	r2, [pc, #656]	; (d72c <mp_map_lookup+0x2b4>)
    d49c:	2194      	movs	r1, #148	; 0x94
    d49e:	48a4      	ldr	r0, [pc, #656]	; (d730 <mp_map_lookup+0x2b8>)
    d4a0:	f00d ff7c 	bl	1b39c <__assert_func>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    d4a4:	68fb      	ldr	r3, [r7, #12]
    d4a6:	781b      	ldrb	r3, [r3, #0]
    d4a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
    d4ac:	b2db      	uxtb	r3, r3
    d4ae:	2b00      	cmp	r3, #0
    d4b0:	bf14      	ite	ne
    d4b2:	2301      	movne	r3, #1
    d4b4:	2300      	moveq	r3, #0
    d4b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (compare_only_ptrs) {
    d4ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d4be:	2b00      	cmp	r3, #0
    d4c0:	d019      	beq.n	d4f6 <mp_map_lookup+0x7e>
        if (MP_OBJ_IS_QSTR(index)) {
    d4c2:	68b8      	ldr	r0, [r7, #8]
    d4c4:	f7ff fe90 	bl	d1e8 <MP_OBJ_IS_QSTR>
    d4c8:	4603      	mov	r3, r0
    d4ca:	2b00      	cmp	r3, #0
    d4cc:	d113      	bne.n	d4f6 <mp_map_lookup+0x7e>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    d4ce:	68b8      	ldr	r0, [r7, #8]
    d4d0:	f7ff fe9c 	bl	d20c <MP_OBJ_IS_OBJ>
    d4d4:	4603      	mov	r3, r0
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	d008      	beq.n	d4ec <mp_map_lookup+0x74>
    d4da:	68bb      	ldr	r3, [r7, #8]
    d4dc:	681b      	ldr	r3, [r3, #0]
    d4de:	4a95      	ldr	r2, [pc, #596]	; (d734 <mp_map_lookup+0x2bc>)
    d4e0:	4293      	cmp	r3, r2
    d4e2:	d103      	bne.n	d4ec <mp_map_lookup+0x74>
            // Index is a non-interned string.
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
    d4e4:	2300      	movs	r3, #0
    d4e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d4ea:	e004      	b.n	d4f6 <mp_map_lookup+0x7e>
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d4ec:	687b      	ldr	r3, [r7, #4]
    d4ee:	2b01      	cmp	r3, #1
    d4f0:	d001      	beq.n	d4f6 <mp_map_lookup+0x7e>
            // If we are not adding, then we can return straight away a failed
            // lookup because we know that the index will never be found.
            return NULL;
    d4f2:	2300      	movs	r3, #0
    d4f4:	e130      	b.n	d758 <mp_map_lookup+0x2e0>
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    d4f6:	68fb      	ldr	r3, [r7, #12]
    d4f8:	781b      	ldrb	r3, [r3, #0]
    d4fa:	f003 0304 	and.w	r3, r3, #4
    d4fe:	b2db      	uxtb	r3, r3
    d500:	2b00      	cmp	r3, #0
    d502:	d02c      	beq.n	d55e <mp_map_lookup+0xe6>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d504:	68fb      	ldr	r3, [r7, #12]
    d506:	689b      	ldr	r3, [r3, #8]
    d508:	62bb      	str	r3, [r7, #40]	; 0x28
    d50a:	68fb      	ldr	r3, [r7, #12]
    d50c:	689a      	ldr	r2, [r3, #8]
    d50e:	68fb      	ldr	r3, [r7, #12]
    d510:	681b      	ldr	r3, [r3, #0]
    d512:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d516:	00db      	lsls	r3, r3, #3
    d518:	4413      	add	r3, r2
    d51a:	617b      	str	r3, [r7, #20]
    d51c:	e019      	b.n	d552 <mp_map_lookup+0xda>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d520:	681a      	ldr	r2, [r3, #0]
    d522:	68bb      	ldr	r3, [r7, #8]
    d524:	429a      	cmp	r2, r3
    d526:	d00f      	beq.n	d548 <mp_map_lookup+0xd0>
    d528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d52c:	f083 0301 	eor.w	r3, r3, #1
    d530:	b2db      	uxtb	r3, r3
    d532:	2b00      	cmp	r3, #0
    d534:	d00a      	beq.n	d54c <mp_map_lookup+0xd4>
    d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d538:	681b      	ldr	r3, [r3, #0]
    d53a:	68b9      	ldr	r1, [r7, #8]
    d53c:	4618      	mov	r0, r3
    d53e:	f000 fa99 	bl	da74 <mp_obj_equal>
    d542:	4603      	mov	r3, r0
    d544:	2b00      	cmp	r3, #0
    d546:	d001      	beq.n	d54c <mp_map_lookup+0xd4>
                    elem = &map->table[map->used];
                    elem->key = MP_OBJ_NULL;
                    elem->value = value;
                }
                #endif
                return elem;
    d548:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d54a:	e105      	b.n	d758 <mp_map_lookup+0x2e0>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d54e:	3308      	adds	r3, #8
    d550:	62bb      	str	r3, [r7, #40]	; 0x28
    d552:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d554:	697b      	ldr	r3, [r7, #20]
    d556:	429a      	cmp	r2, r3
    d558:	d3e1      	bcc.n	d51e <mp_map_lookup+0xa6>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    d55a:	2300      	movs	r3, #0
    d55c:	e0fc      	b.n	d758 <mp_map_lookup+0x2e0>
        #endif
    }

    // map is a hash table (not an ordered array), so do a hash lookup

    if (map->alloc == 0) {
    d55e:	68fb      	ldr	r3, [r7, #12]
    d560:	685b      	ldr	r3, [r3, #4]
    d562:	2b00      	cmp	r3, #0
    d564:	d108      	bne.n	d578 <mp_map_lookup+0x100>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d566:	687b      	ldr	r3, [r7, #4]
    d568:	2b01      	cmp	r3, #1
    d56a:	d103      	bne.n	d574 <mp_map_lookup+0xfc>
            mp_map_rehash(map);
    d56c:	68f8      	ldr	r0, [r7, #12]
    d56e:	f7ff ff2b 	bl	d3c8 <mp_map_rehash>
    d572:	e001      	b.n	d578 <mp_map_lookup+0x100>
        } else {
            return NULL;
    d574:	2300      	movs	r3, #0
    d576:	e0ef      	b.n	d758 <mp_map_lookup+0x2e0>
        }
    }

    // get hash of index, with fast path for common case of qstr
    mp_uint_t hash;
    if (MP_OBJ_IS_QSTR(index)) {
    d578:	68b8      	ldr	r0, [r7, #8]
    d57a:	f7ff fe35 	bl	d1e8 <MP_OBJ_IS_QSTR>
    d57e:	4603      	mov	r3, r0
    d580:	2b00      	cmp	r3, #0
    d582:	d006      	beq.n	d592 <mp_map_lookup+0x11a>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    d584:	68bb      	ldr	r3, [r7, #8]
    d586:	089b      	lsrs	r3, r3, #2
    d588:	4618      	mov	r0, r3
    d58a:	f7f3 fe23 	bl	11d4 <qstr_hash>
    d58e:	6278      	str	r0, [r7, #36]	; 0x24
    d590:	e006      	b.n	d5a0 <mp_map_lookup+0x128>
    } else {
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    d592:	68b9      	ldr	r1, [r7, #8]
    d594:	2006      	movs	r0, #6
    d596:	f7fe f8bf 	bl	b718 <mp_unary_op>
    d59a:	4603      	mov	r3, r0
    d59c:	105b      	asrs	r3, r3, #1
    d59e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_t pos = hash % map->alloc;
    d5a0:	68fb      	ldr	r3, [r7, #12]
    d5a2:	685a      	ldr	r2, [r3, #4]
    d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5a6:	fbb3 f1f2 	udiv	r1, r3, r2
    d5aa:	fb02 f201 	mul.w	r2, r2, r1
    d5ae:	1a9b      	subs	r3, r3, r2
    d5b0:	623b      	str	r3, [r7, #32]
    size_t start_pos = pos;
    d5b2:	6a3b      	ldr	r3, [r7, #32]
    d5b4:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *avail_slot = NULL;
    d5b6:	2300      	movs	r3, #0
    d5b8:	61bb      	str	r3, [r7, #24]
    for (;;) {
        mp_map_elem_t *slot = &map->table[pos];
    d5ba:	68fb      	ldr	r3, [r7, #12]
    d5bc:	689a      	ldr	r2, [r3, #8]
    d5be:	6a3b      	ldr	r3, [r7, #32]
    d5c0:	00db      	lsls	r3, r3, #3
    d5c2:	4413      	add	r3, r2
    d5c4:	613b      	str	r3, [r7, #16]
        if (slot->key == MP_OBJ_NULL) {
    d5c6:	693b      	ldr	r3, [r7, #16]
    d5c8:	681b      	ldr	r3, [r3, #0]
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	d12b      	bne.n	d626 <mp_map_lookup+0x1ae>
            // found NULL slot, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d5ce:	687b      	ldr	r3, [r7, #4]
    d5d0:	2b01      	cmp	r3, #1
    d5d2:	d126      	bne.n	d622 <mp_map_lookup+0x1aa>
                map->used += 1;
    d5d4:	68fb      	ldr	r3, [r7, #12]
    d5d6:	681b      	ldr	r3, [r3, #0]
    d5d8:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d5dc:	3301      	adds	r3, #1
    d5de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d5e2:	68fa      	ldr	r2, [r7, #12]
    d5e4:	6813      	ldr	r3, [r2, #0]
    d5e6:	f361 03df 	bfi	r3, r1, #3, #29
    d5ea:	6013      	str	r3, [r2, #0]
                if (avail_slot == NULL) {
    d5ec:	69bb      	ldr	r3, [r7, #24]
    d5ee:	2b00      	cmp	r3, #0
    d5f0:	d101      	bne.n	d5f6 <mp_map_lookup+0x17e>
                    avail_slot = slot;
    d5f2:	693b      	ldr	r3, [r7, #16]
    d5f4:	61bb      	str	r3, [r7, #24]
                }
                avail_slot->key = index;
    d5f6:	69bb      	ldr	r3, [r7, #24]
    d5f8:	68ba      	ldr	r2, [r7, #8]
    d5fa:	601a      	str	r2, [r3, #0]
                avail_slot->value = MP_OBJ_NULL;
    d5fc:	69bb      	ldr	r3, [r7, #24]
    d5fe:	2200      	movs	r2, #0
    d600:	605a      	str	r2, [r3, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    d602:	68b8      	ldr	r0, [r7, #8]
    d604:	f7ff fdf0 	bl	d1e8 <MP_OBJ_IS_QSTR>
    d608:	4603      	mov	r3, r0
    d60a:	f083 0301 	eor.w	r3, r3, #1
    d60e:	b2db      	uxtb	r3, r3
    d610:	2b00      	cmp	r3, #0
    d612:	d004      	beq.n	d61e <mp_map_lookup+0x1a6>
                    map->all_keys_are_qstrs = 0;
    d614:	68fa      	ldr	r2, [r7, #12]
    d616:	7813      	ldrb	r3, [r2, #0]
    d618:	f36f 0300 	bfc	r3, #0, #1
    d61c:	7013      	strb	r3, [r2, #0]
                }
                return avail_slot;
    d61e:	69bb      	ldr	r3, [r7, #24]
    d620:	e09a      	b.n	d758 <mp_map_lookup+0x2e0>
            } else {
                return NULL;
    d622:	2300      	movs	r3, #0
    d624:	e098      	b.n	d758 <mp_map_lookup+0x2e0>
            }
        } else if (slot->key == MP_OBJ_SENTINEL) {
    d626:	693b      	ldr	r3, [r7, #16]
    d628:	681b      	ldr	r3, [r3, #0]
    d62a:	2b08      	cmp	r3, #8
    d62c:	d105      	bne.n	d63a <mp_map_lookup+0x1c2>
            // found deleted slot, remember for later
            if (avail_slot == NULL) {
    d62e:	69bb      	ldr	r3, [r7, #24]
    d630:	2b00      	cmp	r3, #0
    d632:	d141      	bne.n	d6b8 <mp_map_lookup+0x240>
                avail_slot = slot;
    d634:	693b      	ldr	r3, [r7, #16]
    d636:	61bb      	str	r3, [r7, #24]
    d638:	e03e      	b.n	d6b8 <mp_map_lookup+0x240>
            }
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    d63a:	693b      	ldr	r3, [r7, #16]
    d63c:	681a      	ldr	r2, [r3, #0]
    d63e:	68bb      	ldr	r3, [r7, #8]
    d640:	429a      	cmp	r2, r3
    d642:	d00f      	beq.n	d664 <mp_map_lookup+0x1ec>
    d644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d648:	f083 0301 	eor.w	r3, r3, #1
    d64c:	b2db      	uxtb	r3, r3
    d64e:	2b00      	cmp	r3, #0
    d650:	d032      	beq.n	d6b8 <mp_map_lookup+0x240>
    d652:	693b      	ldr	r3, [r7, #16]
    d654:	681b      	ldr	r3, [r3, #0]
    d656:	68b9      	ldr	r1, [r7, #8]
    d658:	4618      	mov	r0, r3
    d65a:	f000 fa0b 	bl	da74 <mp_obj_equal>
    d65e:	4603      	mov	r3, r0
    d660:	2b00      	cmp	r3, #0
    d662:	d029      	beq.n	d6b8 <mp_map_lookup+0x240>
            // found index
            // Note: CPython does not replace the index; try x={True:'true'};x[1]='one';x
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    d664:	687b      	ldr	r3, [r7, #4]
    d666:	2b02      	cmp	r3, #2
    d668:	d124      	bne.n	d6b4 <mp_map_lookup+0x23c>
                // delete element in this slot
                map->used--;
    d66a:	68fb      	ldr	r3, [r7, #12]
    d66c:	681b      	ldr	r3, [r3, #0]
    d66e:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d672:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d676:	3b01      	subs	r3, #1
    d678:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    d67c:	68f9      	ldr	r1, [r7, #12]
    d67e:	680a      	ldr	r2, [r1, #0]
    d680:	f363 02df 	bfi	r2, r3, #3, #29
    d684:	600a      	str	r2, [r1, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    d686:	68fb      	ldr	r3, [r7, #12]
    d688:	6899      	ldr	r1, [r3, #8]
    d68a:	6a3b      	ldr	r3, [r7, #32]
    d68c:	3301      	adds	r3, #1
    d68e:	68fa      	ldr	r2, [r7, #12]
    d690:	6852      	ldr	r2, [r2, #4]
    d692:	fbb3 f0f2 	udiv	r0, r3, r2
    d696:	fb02 f200 	mul.w	r2, r2, r0
    d69a:	1a9b      	subs	r3, r3, r2
    d69c:	00db      	lsls	r3, r3, #3
    d69e:	440b      	add	r3, r1
    d6a0:	681b      	ldr	r3, [r3, #0]
    d6a2:	2b00      	cmp	r3, #0
    d6a4:	d103      	bne.n	d6ae <mp_map_lookup+0x236>
                    // optimisation if next slot is empty
                    slot->key = MP_OBJ_NULL;
    d6a6:	693b      	ldr	r3, [r7, #16]
    d6a8:	2200      	movs	r2, #0
    d6aa:	601a      	str	r2, [r3, #0]
    d6ac:	e002      	b.n	d6b4 <mp_map_lookup+0x23c>
                } else {
                    slot->key = MP_OBJ_SENTINEL;
    d6ae:	693b      	ldr	r3, [r7, #16]
    d6b0:	2208      	movs	r2, #8
    d6b2:	601a      	str	r2, [r3, #0]
                }
                // keep slot->value so that caller can access it if needed
            }
            return slot;
    d6b4:	693b      	ldr	r3, [r7, #16]
    d6b6:	e04f      	b.n	d758 <mp_map_lookup+0x2e0>
        }

        // not yet found, keep searching in this table
        pos = (pos + 1) % map->alloc;
    d6b8:	6a3b      	ldr	r3, [r7, #32]
    d6ba:	3301      	adds	r3, #1
    d6bc:	68fa      	ldr	r2, [r7, #12]
    d6be:	6852      	ldr	r2, [r2, #4]
    d6c0:	fbb3 f1f2 	udiv	r1, r3, r2
    d6c4:	fb02 f201 	mul.w	r2, r2, r1
    d6c8:	1a9b      	subs	r3, r3, r2
    d6ca:	623b      	str	r3, [r7, #32]

        if (pos == start_pos) {
    d6cc:	6a3a      	ldr	r2, [r7, #32]
    d6ce:	69fb      	ldr	r3, [r7, #28]
    d6d0:	429a      	cmp	r2, r3
    d6d2:	f47f af72 	bne.w	d5ba <mp_map_lookup+0x142>
            // search got back to starting position, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d6d6:	687b      	ldr	r3, [r7, #4]
    d6d8:	2b01      	cmp	r3, #1
    d6da:	d13c      	bne.n	d756 <mp_map_lookup+0x2de>
                if (avail_slot != NULL) {
    d6dc:	69bb      	ldr	r3, [r7, #24]
    d6de:	2b00      	cmp	r3, #0
    d6e0:	d02a      	beq.n	d738 <mp_map_lookup+0x2c0>
                    // there was an available slot, so use that
                    map->used++;
    d6e2:	68fb      	ldr	r3, [r7, #12]
    d6e4:	681b      	ldr	r3, [r3, #0]
    d6e6:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d6ea:	1c5a      	adds	r2, r3, #1
    d6ec:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    d6f0:	68f9      	ldr	r1, [r7, #12]
    d6f2:	680b      	ldr	r3, [r1, #0]
    d6f4:	f362 03df 	bfi	r3, r2, #3, #29
    d6f8:	600b      	str	r3, [r1, #0]
                    avail_slot->key = index;
    d6fa:	69bb      	ldr	r3, [r7, #24]
    d6fc:	68ba      	ldr	r2, [r7, #8]
    d6fe:	601a      	str	r2, [r3, #0]
                    avail_slot->value = MP_OBJ_NULL;
    d700:	69bb      	ldr	r3, [r7, #24]
    d702:	2200      	movs	r2, #0
    d704:	605a      	str	r2, [r3, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    d706:	68b8      	ldr	r0, [r7, #8]
    d708:	f7ff fd6e 	bl	d1e8 <MP_OBJ_IS_QSTR>
    d70c:	4603      	mov	r3, r0
    d70e:	f083 0301 	eor.w	r3, r3, #1
    d712:	b2db      	uxtb	r3, r3
    d714:	2b00      	cmp	r3, #0
    d716:	d004      	beq.n	d722 <mp_map_lookup+0x2aa>
                        map->all_keys_are_qstrs = 0;
    d718:	68fa      	ldr	r2, [r7, #12]
    d71a:	7813      	ldrb	r3, [r2, #0]
    d71c:	f36f 0300 	bfc	r3, #0, #1
    d720:	7013      	strb	r3, [r2, #0]
                    }
                    return avail_slot;
    d722:	69bb      	ldr	r3, [r7, #24]
    d724:	e018      	b.n	d758 <mp_map_lookup+0x2e0>
    d726:	bf00      	nop
    d728:	0001f9ec 	.word	0x0001f9ec
    d72c:	0001fa2c 	.word	0x0001fa2c
    d730:	0001fa1c 	.word	0x0001fa1c
    d734:	00021b30 	.word	0x00021b30
                } else {
                    // not enough room in table, rehash it
                    mp_map_rehash(map);
    d738:	68f8      	ldr	r0, [r7, #12]
    d73a:	f7ff fe45 	bl	d3c8 <mp_map_rehash>
                    // restart the search for the new element
                    start_pos = pos = hash % map->alloc;
    d73e:	68fb      	ldr	r3, [r7, #12]
    d740:	685a      	ldr	r2, [r3, #4]
    d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d744:	fbb3 f1f2 	udiv	r1, r3, r2
    d748:	fb02 f201 	mul.w	r2, r2, r1
    d74c:	1a9b      	subs	r3, r3, r2
    d74e:	623b      	str	r3, [r7, #32]
    d750:	6a3b      	ldr	r3, [r7, #32]
    d752:	61fb      	str	r3, [r7, #28]
    d754:	e731      	b.n	d5ba <mp_map_lookup+0x142>
                }
            } else {
                return NULL;
    d756:	2300      	movs	r3, #0
            }
        }
    }
}
    d758:	4618      	mov	r0, r3
    d75a:	3730      	adds	r7, #48	; 0x30
    d75c:	46bd      	mov	sp, r7
    d75e:	bd80      	pop	{r7, pc}

0000d760 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    d760:	b480      	push	{r7}
    d762:	b083      	sub	sp, #12
    d764:	af00      	add	r7, sp, #0
    d766:	6078      	str	r0, [r7, #4]
    d768:	687b      	ldr	r3, [r7, #4]
    d76a:	f003 0301 	and.w	r3, r3, #1
    d76e:	2b00      	cmp	r3, #0
    d770:	bf14      	ite	ne
    d772:	2301      	movne	r3, #1
    d774:	2300      	moveq	r3, #0
    d776:	b2db      	uxtb	r3, r3
    d778:	4618      	mov	r0, r3
    d77a:	370c      	adds	r7, #12
    d77c:	46bd      	mov	sp, r7
    d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d782:	4770      	bx	lr

0000d784 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d784:	b480      	push	{r7}
    d786:	b083      	sub	sp, #12
    d788:	af00      	add	r7, sp, #0
    d78a:	6078      	str	r0, [r7, #4]
    d78c:	687b      	ldr	r3, [r7, #4]
    d78e:	f003 0303 	and.w	r3, r3, #3
    d792:	2b02      	cmp	r3, #2
    d794:	bf0c      	ite	eq
    d796:	2301      	moveq	r3, #1
    d798:	2300      	movne	r3, #0
    d79a:	b2db      	uxtb	r3, r3
    d79c:	4618      	mov	r0, r3
    d79e:	370c      	adds	r7, #12
    d7a0:	46bd      	mov	sp, r7
    d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7a6:	4770      	bx	lr

0000d7a8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d7a8:	b480      	push	{r7}
    d7aa:	b083      	sub	sp, #12
    d7ac:	af00      	add	r7, sp, #0
    d7ae:	6078      	str	r0, [r7, #4]
    d7b0:	687b      	ldr	r3, [r7, #4]
    d7b2:	f003 0303 	and.w	r3, r3, #3
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	bf0c      	ite	eq
    d7ba:	2301      	moveq	r3, #1
    d7bc:	2300      	movne	r3, #0
    d7be:	b2db      	uxtb	r3, r3
    d7c0:	4618      	mov	r0, r3
    d7c2:	370c      	adds	r7, #12
    d7c4:	46bd      	mov	sp, r7
    d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7ca:	4770      	bx	lr

0000d7cc <mp_obj_get_type>:
#include "py/objstr.h"
#include "py/runtime.h"
#include "py/stackctrl.h"
#include "py/stream.h" // for mp_obj_print

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in) {
    d7cc:	b580      	push	{r7, lr}
    d7ce:	b084      	sub	sp, #16
    d7d0:	af00      	add	r7, sp, #0
    d7d2:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    d7d4:	6878      	ldr	r0, [r7, #4]
    d7d6:	f7ff ffc3 	bl	d760 <MP_OBJ_IS_SMALL_INT>
    d7da:	4603      	mov	r3, r0
    d7dc:	2b00      	cmp	r3, #0
    d7de:	d001      	beq.n	d7e4 <mp_obj_get_type+0x18>
        return (mp_obj_type_t*)&mp_type_int;
    d7e0:	4b08      	ldr	r3, [pc, #32]	; (d804 <mp_obj_get_type+0x38>)
    d7e2:	e00b      	b.n	d7fc <mp_obj_get_type+0x30>
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    d7e4:	6878      	ldr	r0, [r7, #4]
    d7e6:	f7ff ffcd 	bl	d784 <MP_OBJ_IS_QSTR>
    d7ea:	4603      	mov	r3, r0
    d7ec:	2b00      	cmp	r3, #0
    d7ee:	d001      	beq.n	d7f4 <mp_obj_get_type+0x28>
        return (mp_obj_type_t*)&mp_type_str;
    d7f0:	4b05      	ldr	r3, [pc, #20]	; (d808 <mp_obj_get_type+0x3c>)
    d7f2:	e003      	b.n	d7fc <mp_obj_get_type+0x30>
    #if MICROPY_PY_BUILTINS_FLOAT
    } else if (mp_obj_is_float(o_in)) {
        return (mp_obj_type_t*)&mp_type_float;
    #endif
    } else {
        const mp_obj_base_t *o = MP_OBJ_TO_PTR(o_in);
    d7f4:	687b      	ldr	r3, [r7, #4]
    d7f6:	60fb      	str	r3, [r7, #12]
        return (mp_obj_type_t*)o->type;
    d7f8:	68fb      	ldr	r3, [r7, #12]
    d7fa:	681b      	ldr	r3, [r3, #0]
    }
}
    d7fc:	4618      	mov	r0, r3
    d7fe:	3710      	adds	r7, #16
    d800:	46bd      	mov	sp, r7
    d802:	bd80      	pop	{r7, pc}
    d804:	00020f3c 	.word	0x00020f3c
    d808:	00021b30 	.word	0x00021b30

0000d80c <mp_obj_get_type_str>:

const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    d80c:	b580      	push	{r7, lr}
    d80e:	b082      	sub	sp, #8
    d810:	af00      	add	r7, sp, #0
    d812:	6078      	str	r0, [r7, #4]
    return qstr_str(mp_obj_get_type(o_in)->name);
    d814:	6878      	ldr	r0, [r7, #4]
    d816:	f7ff ffd9 	bl	d7cc <mp_obj_get_type>
    d81a:	4603      	mov	r3, r0
    d81c:	88db      	ldrh	r3, [r3, #6]
    d81e:	4618      	mov	r0, r3
    d820:	f7f3 fcf6 	bl	1210 <qstr_str>
    d824:	4603      	mov	r3, r0
}
    d826:	4618      	mov	r0, r3
    d828:	3708      	adds	r7, #8
    d82a:	46bd      	mov	sp, r7
    d82c:	bd80      	pop	{r7, pc}
    d82e:	bf00      	nop

0000d830 <mp_obj_print_helper>:

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    d830:	b580      	push	{r7, lr}
    d832:	b086      	sub	sp, #24
    d834:	af00      	add	r7, sp, #0
    d836:	60f8      	str	r0, [r7, #12]
    d838:	60b9      	str	r1, [r7, #8]
    d83a:	607a      	str	r2, [r7, #4]
    // There can be data structures nested too deep, or just recursive
    MP_STACK_CHECK();
#ifndef NDEBUG
    if (o_in == MP_OBJ_NULL) {
    d83c:	68bb      	ldr	r3, [r7, #8]
    d83e:	2b00      	cmp	r3, #0
    d840:	d104      	bne.n	d84c <mp_obj_print_helper+0x1c>
        mp_print_str(print, "(nil)");
    d842:	490f      	ldr	r1, [pc, #60]	; (d880 <mp_obj_print_helper+0x50>)
    d844:	68f8      	ldr	r0, [r7, #12]
    d846:	f7f4 f827 	bl	1898 <mp_print_str>
        return;
    d84a:	e015      	b.n	d878 <mp_obj_print_helper+0x48>
    }
#endif
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    d84c:	68b8      	ldr	r0, [r7, #8]
    d84e:	f7ff ffbd 	bl	d7cc <mp_obj_get_type>
    d852:	6178      	str	r0, [r7, #20]
    if (type->print != NULL) {
    d854:	697b      	ldr	r3, [r7, #20]
    d856:	689b      	ldr	r3, [r3, #8]
    d858:	2b00      	cmp	r3, #0
    d85a:	d006      	beq.n	d86a <mp_obj_print_helper+0x3a>
        type->print((mp_print_t*)print, o_in, kind);
    d85c:	697b      	ldr	r3, [r7, #20]
    d85e:	689b      	ldr	r3, [r3, #8]
    d860:	687a      	ldr	r2, [r7, #4]
    d862:	68b9      	ldr	r1, [r7, #8]
    d864:	68f8      	ldr	r0, [r7, #12]
    d866:	4798      	blx	r3
    d868:	e006      	b.n	d878 <mp_obj_print_helper+0x48>
    } else {
        mp_printf(print, "<%q>", type->name);
    d86a:	697b      	ldr	r3, [r7, #20]
    d86c:	88db      	ldrh	r3, [r3, #6]
    d86e:	461a      	mov	r2, r3
    d870:	4904      	ldr	r1, [pc, #16]	; (d884 <mp_obj_print_helper+0x54>)
    d872:	68f8      	ldr	r0, [r7, #12]
    d874:	f7f4 fb24 	bl	1ec0 <mp_printf>
    }
}
    d878:	3718      	adds	r7, #24
    d87a:	46bd      	mov	sp, r7
    d87c:	bd80      	pop	{r7, pc}
    d87e:	bf00      	nop
    d880:	0001fa3c 	.word	0x0001fa3c
    d884:	0001fa44 	.word	0x0001fa44

0000d888 <mp_obj_print>:

void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    d888:	b580      	push	{r7, lr}
    d88a:	b082      	sub	sp, #8
    d88c:	af00      	add	r7, sp, #0
    d88e:	6078      	str	r0, [r7, #4]
    d890:	6039      	str	r1, [r7, #0]
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    d892:	683a      	ldr	r2, [r7, #0]
    d894:	6879      	ldr	r1, [r7, #4]
    d896:	4803      	ldr	r0, [pc, #12]	; (d8a4 <mp_obj_print+0x1c>)
    d898:	f7ff ffca 	bl	d830 <mp_obj_print_helper>
}
    d89c:	bf00      	nop
    d89e:	3708      	adds	r7, #8
    d8a0:	46bd      	mov	sp, r7
    d8a2:	bd80      	pop	{r7, pc}
    d8a4:	0001d838 	.word	0x0001d838

0000d8a8 <mp_obj_print_exception>:

// helper function to print an exception with traceback
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    d8a8:	b580      	push	{r7, lr}
    d8aa:	b086      	sub	sp, #24
    d8ac:	af00      	add	r7, sp, #0
    d8ae:	6078      	str	r0, [r7, #4]
    d8b0:	6039      	str	r1, [r7, #0]
    if (mp_obj_is_exception_instance(exc)) {
    d8b2:	6838      	ldr	r0, [r7, #0]
    d8b4:	f001 ff84 	bl	f7c0 <mp_obj_is_exception_instance>
    d8b8:	4603      	mov	r3, r0
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	d047      	beq.n	d94e <mp_obj_print_exception+0xa6>
        size_t n, *values;
        mp_obj_exception_get_traceback(exc, &n, &values);
    d8be:	f107 0208 	add.w	r2, r7, #8
    d8c2:	f107 030c 	add.w	r3, r7, #12
    d8c6:	4619      	mov	r1, r3
    d8c8:	6838      	ldr	r0, [r7, #0]
    d8ca:	f002 f865 	bl	f998 <mp_obj_exception_get_traceback>
        if (n > 0) {
    d8ce:	68fb      	ldr	r3, [r7, #12]
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d03c      	beq.n	d94e <mp_obj_print_exception+0xa6>
            assert(n % 3 == 0);
    d8d4:	68f9      	ldr	r1, [r7, #12]
    d8d6:	4b24      	ldr	r3, [pc, #144]	; (d968 <mp_obj_print_exception+0xc0>)
    d8d8:	fba3 2301 	umull	r2, r3, r3, r1
    d8dc:	085a      	lsrs	r2, r3, #1
    d8de:	4613      	mov	r3, r2
    d8e0:	005b      	lsls	r3, r3, #1
    d8e2:	4413      	add	r3, r2
    d8e4:	1aca      	subs	r2, r1, r3
    d8e6:	2a00      	cmp	r2, #0
    d8e8:	d005      	beq.n	d8f6 <mp_obj_print_exception+0x4e>
    d8ea:	4b20      	ldr	r3, [pc, #128]	; (d96c <mp_obj_print_exception+0xc4>)
    d8ec:	4a20      	ldr	r2, [pc, #128]	; (d970 <mp_obj_print_exception+0xc8>)
    d8ee:	2156      	movs	r1, #86	; 0x56
    d8f0:	4820      	ldr	r0, [pc, #128]	; (d974 <mp_obj_print_exception+0xcc>)
    d8f2:	f00d fd53 	bl	1b39c <__assert_func>
            mp_print_str(print, "Traceback (most recent call last):\n");
    d8f6:	4920      	ldr	r1, [pc, #128]	; (d978 <mp_obj_print_exception+0xd0>)
    d8f8:	6878      	ldr	r0, [r7, #4]
    d8fa:	f7f3 ffcd 	bl	1898 <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    d8fe:	68fb      	ldr	r3, [r7, #12]
    d900:	3b03      	subs	r3, #3
    d902:	617b      	str	r3, [r7, #20]
    d904:	e020      	b.n	d948 <mp_obj_print_exception+0xa0>
#if MICROPY_ENABLE_SOURCE_LINE
                mp_printf(print, "  File \"%q\", line %d", values[i], (int)values[i + 1]);
#else
                mp_printf(print, "  File \"%q\"", values[i]);
    d906:	68ba      	ldr	r2, [r7, #8]
    d908:	697b      	ldr	r3, [r7, #20]
    d90a:	009b      	lsls	r3, r3, #2
    d90c:	4413      	add	r3, r2
    d90e:	681b      	ldr	r3, [r3, #0]
    d910:	461a      	mov	r2, r3
    d912:	491a      	ldr	r1, [pc, #104]	; (d97c <mp_obj_print_exception+0xd4>)
    d914:	6878      	ldr	r0, [r7, #4]
    d916:	f7f4 fad3 	bl	1ec0 <mp_printf>
#endif
                // the block name can be NULL if it's unknown
                qstr block = values[i + 2];
    d91a:	68ba      	ldr	r2, [r7, #8]
    d91c:	697b      	ldr	r3, [r7, #20]
    d91e:	3302      	adds	r3, #2
    d920:	009b      	lsls	r3, r3, #2
    d922:	4413      	add	r3, r2
    d924:	681b      	ldr	r3, [r3, #0]
    d926:	613b      	str	r3, [r7, #16]
                if (block == MP_QSTR_NULL) {
    d928:	693b      	ldr	r3, [r7, #16]
    d92a:	2b00      	cmp	r3, #0
    d92c:	d104      	bne.n	d938 <mp_obj_print_exception+0x90>
                    mp_print_str(print, "\n");
    d92e:	4914      	ldr	r1, [pc, #80]	; (d980 <mp_obj_print_exception+0xd8>)
    d930:	6878      	ldr	r0, [r7, #4]
    d932:	f7f3 ffb1 	bl	1898 <mp_print_str>
    d936:	e004      	b.n	d942 <mp_obj_print_exception+0x9a>
                } else {
                    mp_printf(print, ", in %q\n", block);
    d938:	693a      	ldr	r2, [r7, #16]
    d93a:	4912      	ldr	r1, [pc, #72]	; (d984 <mp_obj_print_exception+0xdc>)
    d93c:	6878      	ldr	r0, [r7, #4]
    d93e:	f7f4 fabf 	bl	1ec0 <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    d942:	697b      	ldr	r3, [r7, #20]
    d944:	3b03      	subs	r3, #3
    d946:	617b      	str	r3, [r7, #20]
    d948:	697b      	ldr	r3, [r7, #20]
    d94a:	2b00      	cmp	r3, #0
    d94c:	dadb      	bge.n	d906 <mp_obj_print_exception+0x5e>
                }
            }
        }
    }
    mp_obj_print_helper(print, exc, PRINT_EXC);
    d94e:	2202      	movs	r2, #2
    d950:	6839      	ldr	r1, [r7, #0]
    d952:	6878      	ldr	r0, [r7, #4]
    d954:	f7ff ff6c 	bl	d830 <mp_obj_print_helper>
    mp_print_str(print, "\n");
    d958:	4909      	ldr	r1, [pc, #36]	; (d980 <mp_obj_print_exception+0xd8>)
    d95a:	6878      	ldr	r0, [r7, #4]
    d95c:	f7f3 ff9c 	bl	1898 <mp_print_str>
}
    d960:	bf00      	nop
    d962:	3718      	adds	r7, #24
    d964:	46bd      	mov	sp, r7
    d966:	bd80      	pop	{r7, pc}
    d968:	aaaaaaab 	.word	0xaaaaaaab
    d96c:	0001fa4c 	.word	0x0001fa4c
    d970:	0001fbd0 	.word	0x0001fbd0
    d974:	0001fa58 	.word	0x0001fa58
    d978:	0001fa68 	.word	0x0001fa68
    d97c:	0001fa8c 	.word	0x0001fa8c
    d980:	0001fa98 	.word	0x0001fa98
    d984:	0001fa9c 	.word	0x0001fa9c

0000d988 <mp_obj_is_true>:

bool mp_obj_is_true(mp_obj_t arg) {
    d988:	b580      	push	{r7, lr}
    d98a:	b086      	sub	sp, #24
    d98c:	af00      	add	r7, sp, #0
    d98e:	6078      	str	r0, [r7, #4]
    if (arg == mp_const_false) {
    d990:	687b      	ldr	r3, [r7, #4]
    d992:	4a25      	ldr	r2, [pc, #148]	; (da28 <mp_obj_is_true+0xa0>)
    d994:	4293      	cmp	r3, r2
    d996:	d101      	bne.n	d99c <mp_obj_is_true+0x14>
        return 0;
    d998:	2300      	movs	r3, #0
    d99a:	e041      	b.n	da20 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_true) {
    d99c:	687b      	ldr	r3, [r7, #4]
    d99e:	4a23      	ldr	r2, [pc, #140]	; (da2c <mp_obj_is_true+0xa4>)
    d9a0:	4293      	cmp	r3, r2
    d9a2:	d101      	bne.n	d9a8 <mp_obj_is_true+0x20>
        return 1;
    d9a4:	2301      	movs	r3, #1
    d9a6:	e03b      	b.n	da20 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_none) {
    d9a8:	687b      	ldr	r3, [r7, #4]
    d9aa:	4a21      	ldr	r2, [pc, #132]	; (da30 <mp_obj_is_true+0xa8>)
    d9ac:	4293      	cmp	r3, r2
    d9ae:	d101      	bne.n	d9b4 <mp_obj_is_true+0x2c>
        return 0;
    d9b0:	2300      	movs	r3, #0
    d9b2:	e035      	b.n	da20 <mp_obj_is_true+0x98>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    d9b4:	6878      	ldr	r0, [r7, #4]
    d9b6:	f7ff fed3 	bl	d760 <MP_OBJ_IS_SMALL_INT>
    d9ba:	4603      	mov	r3, r0
    d9bc:	2b00      	cmp	r3, #0
    d9be:	d007      	beq.n	d9d0 <mp_obj_is_true+0x48>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    d9c0:	687b      	ldr	r3, [r7, #4]
    d9c2:	105b      	asrs	r3, r3, #1
    d9c4:	2b00      	cmp	r3, #0
    d9c6:	d101      	bne.n	d9cc <mp_obj_is_true+0x44>
            return 0;
    d9c8:	2300      	movs	r3, #0
    d9ca:	e029      	b.n	da20 <mp_obj_is_true+0x98>
        } else {
            return 1;
    d9cc:	2301      	movs	r3, #1
    d9ce:	e027      	b.n	da20 <mp_obj_is_true+0x98>
        }
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    d9d0:	6878      	ldr	r0, [r7, #4]
    d9d2:	f7ff fefb 	bl	d7cc <mp_obj_get_type>
    d9d6:	6178      	str	r0, [r7, #20]
        if (type->unary_op != NULL) {
    d9d8:	697b      	ldr	r3, [r7, #20]
    d9da:	695b      	ldr	r3, [r3, #20]
    d9dc:	2b00      	cmp	r3, #0
    d9de:	d010      	beq.n	da02 <mp_obj_is_true+0x7a>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    d9e0:	697b      	ldr	r3, [r7, #20]
    d9e2:	695b      	ldr	r3, [r3, #20]
    d9e4:	6879      	ldr	r1, [r7, #4]
    d9e6:	2004      	movs	r0, #4
    d9e8:	4798      	blx	r3
    d9ea:	6138      	str	r0, [r7, #16]
            if (result != MP_OBJ_NULL) {
    d9ec:	693b      	ldr	r3, [r7, #16]
    d9ee:	2b00      	cmp	r3, #0
    d9f0:	d007      	beq.n	da02 <mp_obj_is_true+0x7a>
                return result == mp_const_true;
    d9f2:	693b      	ldr	r3, [r7, #16]
    d9f4:	4a0d      	ldr	r2, [pc, #52]	; (da2c <mp_obj_is_true+0xa4>)
    d9f6:	4293      	cmp	r3, r2
    d9f8:	bf0c      	ite	eq
    d9fa:	2301      	moveq	r3, #1
    d9fc:	2300      	movne	r3, #0
    d9fe:	b2db      	uxtb	r3, r3
    da00:	e00e      	b.n	da20 <mp_obj_is_true+0x98>
            }
        }

        mp_obj_t len = mp_obj_len_maybe(arg);
    da02:	6878      	ldr	r0, [r7, #4]
    da04:	f000 fa38 	bl	de78 <mp_obj_len_maybe>
    da08:	60f8      	str	r0, [r7, #12]
        if (len != MP_OBJ_NULL) {
    da0a:	68fb      	ldr	r3, [r7, #12]
    da0c:	2b00      	cmp	r3, #0
    da0e:	d006      	beq.n	da1e <mp_obj_is_true+0x96>
            // obj has a length, truth determined if len != 0
            return len != MP_OBJ_NEW_SMALL_INT(0);
    da10:	68fb      	ldr	r3, [r7, #12]
    da12:	2b01      	cmp	r3, #1
    da14:	bf14      	ite	ne
    da16:	2301      	movne	r3, #1
    da18:	2300      	moveq	r3, #0
    da1a:	b2db      	uxtb	r3, r3
    da1c:	e000      	b.n	da20 <mp_obj_is_true+0x98>
        } else {
            // any other obj is true per Python semantics
            return 1;
    da1e:	2301      	movs	r3, #1
        }
    }
}
    da20:	4618      	mov	r0, r3
    da22:	3718      	adds	r7, #24
    da24:	46bd      	mov	sp, r7
    da26:	bd80      	pop	{r7, pc}
    da28:	0001fc34 	.word	0x0001fc34
    da2c:	0001fc3c 	.word	0x0001fc3c
    da30:	00021480 	.word	0x00021480

0000da34 <mp_obj_is_callable>:

bool mp_obj_is_callable(mp_obj_t o_in) {
    da34:	b580      	push	{r7, lr}
    da36:	b084      	sub	sp, #16
    da38:	af00      	add	r7, sp, #0
    da3a:	6078      	str	r0, [r7, #4]
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    da3c:	6878      	ldr	r0, [r7, #4]
    da3e:	f7ff fec5 	bl	d7cc <mp_obj_get_type>
    da42:	4603      	mov	r3, r0
    da44:	691b      	ldr	r3, [r3, #16]
    da46:	60fb      	str	r3, [r7, #12]
    if (call != mp_obj_instance_call) {
    da48:	68fb      	ldr	r3, [r7, #12]
    da4a:	4a09      	ldr	r2, [pc, #36]	; (da70 <mp_obj_is_callable+0x3c>)
    da4c:	4293      	cmp	r3, r2
    da4e:	d006      	beq.n	da5e <mp_obj_is_callable+0x2a>
        return call != NULL;
    da50:	68fb      	ldr	r3, [r7, #12]
    da52:	2b00      	cmp	r3, #0
    da54:	bf14      	ite	ne
    da56:	2301      	movne	r3, #1
    da58:	2300      	moveq	r3, #0
    da5a:	b2db      	uxtb	r3, r3
    da5c:	e003      	b.n	da66 <mp_obj_is_callable+0x32>
    }
    return mp_obj_instance_is_callable(o_in);
    da5e:	6878      	ldr	r0, [r7, #4]
    da60:	f009 f812 	bl	16a88 <mp_obj_instance_is_callable>
    da64:	4603      	mov	r3, r0
}
    da66:	4618      	mov	r0, r3
    da68:	3710      	adds	r7, #16
    da6a:	46bd      	mov	sp, r7
    da6c:	bd80      	pop	{r7, pc}
    da6e:	bf00      	nop
    da70:	00016ab9 	.word	0x00016ab9

0000da74 <mp_obj_equal>:
// This means that False==0 and True==1 are true expressions.
//
// Furthermore, from the v3.4.2 code for object.c: "Practical amendments: If rich
// comparison returns NotImplemented, == and != are decided by comparing the object
// pointer."
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    da74:	b580      	push	{r7, lr}
    da76:	b086      	sub	sp, #24
    da78:	af00      	add	r7, sp, #0
    da7a:	6078      	str	r0, [r7, #4]
    da7c:	6039      	str	r1, [r7, #0]
    // Float (and complex) NaN is never equal to anything, not even itself,
    // so we must have a special check here to cover those cases.
    if (o1 == o2
    da7e:	687a      	ldr	r2, [r7, #4]
    da80:	683b      	ldr	r3, [r7, #0]
    da82:	429a      	cmp	r2, r3
    da84:	d101      	bne.n	da8a <mp_obj_equal+0x16>
        #endif
        #if MICROPY_PY_BUILTINS_COMPLEX
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
        #endif
        ) {
        return true;
    da86:	2301      	movs	r3, #1
    da88:	e073      	b.n	db72 <mp_obj_equal+0xfe>
    }
    if (o1 == mp_const_none || o2 == mp_const_none) {
    da8a:	687b      	ldr	r3, [r7, #4]
    da8c:	4a3b      	ldr	r2, [pc, #236]	; (db7c <mp_obj_equal+0x108>)
    da8e:	4293      	cmp	r3, r2
    da90:	d003      	beq.n	da9a <mp_obj_equal+0x26>
    da92:	683b      	ldr	r3, [r7, #0]
    da94:	4a39      	ldr	r2, [pc, #228]	; (db7c <mp_obj_equal+0x108>)
    da96:	4293      	cmp	r3, r2
    da98:	d101      	bne.n	da9e <mp_obj_equal+0x2a>
        return false;
    da9a:	2300      	movs	r3, #0
    da9c:	e069      	b.n	db72 <mp_obj_equal+0xfe>
    }

    // fast path for small ints
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    da9e:	6878      	ldr	r0, [r7, #4]
    daa0:	f7ff fe5e 	bl	d760 <MP_OBJ_IS_SMALL_INT>
    daa4:	4603      	mov	r3, r0
    daa6:	2b00      	cmp	r3, #0
    daa8:	d00d      	beq.n	dac6 <mp_obj_equal+0x52>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    daaa:	6838      	ldr	r0, [r7, #0]
    daac:	f7ff fe58 	bl	d760 <MP_OBJ_IS_SMALL_INT>
    dab0:	4603      	mov	r3, r0
    dab2:	2b00      	cmp	r3, #0
    dab4:	d001      	beq.n	daba <mp_obj_equal+0x46>
            // both SMALL_INT, and not equal if we get here
            return false;
    dab6:	2300      	movs	r3, #0
    dab8:	e05b      	b.n	db72 <mp_obj_equal+0xfe>
        } else {
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    daba:	683b      	ldr	r3, [r7, #0]
    dabc:	617b      	str	r3, [r7, #20]
    dabe:	687b      	ldr	r3, [r7, #4]
    dac0:	603b      	str	r3, [r7, #0]
    dac2:	697b      	ldr	r3, [r7, #20]
    dac4:	607b      	str	r3, [r7, #4]
            // fall through to generic op
        }
    }

    // fast path for strings
    if (MP_OBJ_IS_STR(o1)) {
    dac6:	6878      	ldr	r0, [r7, #4]
    dac8:	f7ff fe5c 	bl	d784 <MP_OBJ_IS_QSTR>
    dacc:	4603      	mov	r3, r0
    dace:	2b00      	cmp	r3, #0
    dad0:	d10a      	bne.n	dae8 <mp_obj_equal+0x74>
    dad2:	6878      	ldr	r0, [r7, #4]
    dad4:	f7ff fe68 	bl	d7a8 <MP_OBJ_IS_OBJ>
    dad8:	4603      	mov	r3, r0
    dada:	2b00      	cmp	r3, #0
    dadc:	d01b      	beq.n	db16 <mp_obj_equal+0xa2>
    dade:	687b      	ldr	r3, [r7, #4]
    dae0:	681b      	ldr	r3, [r3, #0]
    dae2:	4a27      	ldr	r2, [pc, #156]	; (db80 <mp_obj_equal+0x10c>)
    dae4:	4293      	cmp	r3, r2
    dae6:	d116      	bne.n	db16 <mp_obj_equal+0xa2>
        if (MP_OBJ_IS_STR(o2)) {
    dae8:	6838      	ldr	r0, [r7, #0]
    daea:	f7ff fe4b 	bl	d784 <MP_OBJ_IS_QSTR>
    daee:	4603      	mov	r3, r0
    daf0:	2b00      	cmp	r3, #0
    daf2:	d10a      	bne.n	db0a <mp_obj_equal+0x96>
    daf4:	6838      	ldr	r0, [r7, #0]
    daf6:	f7ff fe57 	bl	d7a8 <MP_OBJ_IS_OBJ>
    dafa:	4603      	mov	r3, r0
    dafc:	2b00      	cmp	r3, #0
    dafe:	d01b      	beq.n	db38 <mp_obj_equal+0xc4>
    db00:	683b      	ldr	r3, [r7, #0]
    db02:	681b      	ldr	r3, [r3, #0]
    db04:	4a1e      	ldr	r2, [pc, #120]	; (db80 <mp_obj_equal+0x10c>)
    db06:	4293      	cmp	r3, r2
    db08:	d116      	bne.n	db38 <mp_obj_equal+0xc4>
            // both strings, use special function
            return mp_obj_str_equal(o1, o2);
    db0a:	6839      	ldr	r1, [r7, #0]
    db0c:	6878      	ldr	r0, [r7, #4]
    db0e:	f007 fcad 	bl	1546c <mp_obj_str_equal>
    db12:	4603      	mov	r3, r0
    db14:	e02d      	b.n	db72 <mp_obj_equal+0xfe>
        } else {
            // a string is never equal to anything else
            goto str_cmp_err;
        }
    } else if (MP_OBJ_IS_STR(o2)) {
    db16:	6838      	ldr	r0, [r7, #0]
    db18:	f7ff fe34 	bl	d784 <MP_OBJ_IS_QSTR>
    db1c:	4603      	mov	r3, r0
    db1e:	2b00      	cmp	r3, #0
    db20:	d10a      	bne.n	db38 <mp_obj_equal+0xc4>
    db22:	6838      	ldr	r0, [r7, #0]
    db24:	f7ff fe40 	bl	d7a8 <MP_OBJ_IS_OBJ>
    db28:	4603      	mov	r3, r0
    db2a:	2b00      	cmp	r3, #0
    db2c:	d006      	beq.n	db3c <mp_obj_equal+0xc8>
    db2e:	683b      	ldr	r3, [r7, #0]
    db30:	681b      	ldr	r3, [r3, #0]
    db32:	4a13      	ldr	r2, [pc, #76]	; (db80 <mp_obj_equal+0x10c>)
    db34:	4293      	cmp	r3, r2
    db36:	d101      	bne.n	db3c <mp_obj_equal+0xc8>
        #if MICROPY_PY_STR_BYTES_CMP_WARN
        if (MP_OBJ_IS_TYPE(o1, &mp_type_bytes) || MP_OBJ_IS_TYPE(o2, &mp_type_bytes)) {
            mp_warning("Comparison between bytes and str");
        }
        #endif
        return false;
    db38:	2300      	movs	r3, #0
    db3a:	e01a      	b.n	db72 <mp_obj_equal+0xfe>
    }

    // generic type, call binary_op(MP_BINARY_OP_EQUAL)
    mp_obj_type_t *type = mp_obj_get_type(o1);
    db3c:	6878      	ldr	r0, [r7, #4]
    db3e:	f7ff fe45 	bl	d7cc <mp_obj_get_type>
    db42:	6138      	str	r0, [r7, #16]
    if (type->binary_op != NULL) {
    db44:	693b      	ldr	r3, [r7, #16]
    db46:	699b      	ldr	r3, [r3, #24]
    db48:	2b00      	cmp	r3, #0
    db4a:	d011      	beq.n	db70 <mp_obj_equal+0xfc>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    db4c:	693b      	ldr	r3, [r7, #16]
    db4e:	699b      	ldr	r3, [r3, #24]
    db50:	683a      	ldr	r2, [r7, #0]
    db52:	6879      	ldr	r1, [r7, #4]
    db54:	2002      	movs	r0, #2
    db56:	4798      	blx	r3
    db58:	60f8      	str	r0, [r7, #12]
        if (r != MP_OBJ_NULL) {
    db5a:	68fb      	ldr	r3, [r7, #12]
    db5c:	2b00      	cmp	r3, #0
    db5e:	d007      	beq.n	db70 <mp_obj_equal+0xfc>
            return r == mp_const_true ? true : false;
    db60:	68fb      	ldr	r3, [r7, #12]
    db62:	4a08      	ldr	r2, [pc, #32]	; (db84 <mp_obj_equal+0x110>)
    db64:	4293      	cmp	r3, r2
    db66:	bf0c      	ite	eq
    db68:	2301      	moveq	r3, #1
    db6a:	2300      	movne	r3, #0
    db6c:	b2db      	uxtb	r3, r3
    db6e:	e000      	b.n	db72 <mp_obj_equal+0xfe>
        }
    }

    // equality not implemented, and objects are not the same object, so
    // they are defined as not equal
    return false;
    db70:	2300      	movs	r3, #0
}
    db72:	4618      	mov	r0, r3
    db74:	3718      	adds	r7, #24
    db76:	46bd      	mov	sp, r7
    db78:	bd80      	pop	{r7, pc}
    db7a:	bf00      	nop
    db7c:	00021480 	.word	0x00021480
    db80:	00021b30 	.word	0x00021b30
    db84:	0001fc3c 	.word	0x0001fc3c

0000db88 <mp_obj_get_int>:

mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    db88:	b580      	push	{r7, lr}
    db8a:	b082      	sub	sp, #8
    db8c:	af00      	add	r7, sp, #0
    db8e:	6078      	str	r0, [r7, #4]
    // This function essentially performs implicit type conversion to int
    // Note that Python does NOT provide implicit type conversion from
    // float to int in the core expression language, try some_list[1.0].
    if (arg == mp_const_false) {
    db90:	687b      	ldr	r3, [r7, #4]
    db92:	4a15      	ldr	r2, [pc, #84]	; (dbe8 <mp_obj_get_int+0x60>)
    db94:	4293      	cmp	r3, r2
    db96:	d101      	bne.n	db9c <mp_obj_get_int+0x14>
        return 0;
    db98:	2300      	movs	r3, #0
    db9a:	e021      	b.n	dbe0 <mp_obj_get_int+0x58>
    } else if (arg == mp_const_true) {
    db9c:	687b      	ldr	r3, [r7, #4]
    db9e:	4a13      	ldr	r2, [pc, #76]	; (dbec <mp_obj_get_int+0x64>)
    dba0:	4293      	cmp	r3, r2
    dba2:	d101      	bne.n	dba8 <mp_obj_get_int+0x20>
        return 1;
    dba4:	2301      	movs	r3, #1
    dba6:	e01b      	b.n	dbe0 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dba8:	6878      	ldr	r0, [r7, #4]
    dbaa:	f7ff fdd9 	bl	d760 <MP_OBJ_IS_SMALL_INT>
    dbae:	4603      	mov	r3, r0
    dbb0:	2b00      	cmp	r3, #0
    dbb2:	d002      	beq.n	dbba <mp_obj_get_int+0x32>
        return MP_OBJ_SMALL_INT_VALUE(arg);
    dbb4:	687b      	ldr	r3, [r7, #4]
    dbb6:	105b      	asrs	r3, r3, #1
    dbb8:	e012      	b.n	dbe0 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dbba:	6878      	ldr	r0, [r7, #4]
    dbbc:	f7ff fdf4 	bl	d7a8 <MP_OBJ_IS_OBJ>
    dbc0:	4603      	mov	r3, r0
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d009      	beq.n	dbda <mp_obj_get_int+0x52>
    dbc6:	687b      	ldr	r3, [r7, #4]
    dbc8:	681b      	ldr	r3, [r3, #0]
    dbca:	4a09      	ldr	r2, [pc, #36]	; (dbf0 <mp_obj_get_int+0x68>)
    dbcc:	4293      	cmp	r3, r2
    dbce:	d104      	bne.n	dbda <mp_obj_get_int+0x52>
        return mp_obj_int_get_checked(arg);
    dbd0:	6878      	ldr	r0, [r7, #4]
    dbd2:	f002 fef7 	bl	109c4 <mp_obj_int_get_checked>
    dbd6:	4603      	mov	r3, r0
    dbd8:	e002      	b.n	dbe0 <mp_obj_get_int+0x58>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("can't convert to int");
    dbda:	4806      	ldr	r0, [pc, #24]	; (dbf4 <mp_obj_get_int+0x6c>)
    dbdc:	f7ff f9dc 	bl	cf98 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "can't convert %s to int", mp_obj_get_type_str(arg)));
        }
    }
}
    dbe0:	4618      	mov	r0, r3
    dbe2:	3708      	adds	r7, #8
    dbe4:	46bd      	mov	sp, r7
    dbe6:	bd80      	pop	{r7, pc}
    dbe8:	0001fc34 	.word	0x0001fc34
    dbec:	0001fc3c 	.word	0x0001fc3c
    dbf0:	00020f3c 	.word	0x00020f3c
    dbf4:	0001faa8 	.word	0x0001faa8

0000dbf8 <mp_obj_get_int_truncated>:

mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    dbf8:	b580      	push	{r7, lr}
    dbfa:	b082      	sub	sp, #8
    dbfc:	af00      	add	r7, sp, #0
    dbfe:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_INT(arg)) {
    dc00:	6878      	ldr	r0, [r7, #4]
    dc02:	f7ff fdad 	bl	d760 <MP_OBJ_IS_SMALL_INT>
    dc06:	4603      	mov	r3, r0
    dc08:	2b00      	cmp	r3, #0
    dc0a:	d10a      	bne.n	dc22 <mp_obj_get_int_truncated+0x2a>
    dc0c:	6878      	ldr	r0, [r7, #4]
    dc0e:	f7ff fdcb 	bl	d7a8 <MP_OBJ_IS_OBJ>
    dc12:	4603      	mov	r3, r0
    dc14:	2b00      	cmp	r3, #0
    dc16:	d009      	beq.n	dc2c <mp_obj_get_int_truncated+0x34>
    dc18:	687b      	ldr	r3, [r7, #4]
    dc1a:	681b      	ldr	r3, [r3, #0]
    dc1c:	4a07      	ldr	r2, [pc, #28]	; (dc3c <mp_obj_get_int_truncated+0x44>)
    dc1e:	4293      	cmp	r3, r2
    dc20:	d104      	bne.n	dc2c <mp_obj_get_int_truncated+0x34>
        return mp_obj_int_get_truncated(arg);
    dc22:	6878      	ldr	r0, [r7, #4]
    dc24:	f002 fec2 	bl	109ac <mp_obj_int_get_truncated>
    dc28:	4603      	mov	r3, r0
    dc2a:	e003      	b.n	dc34 <mp_obj_get_int_truncated+0x3c>
    } else {
        return mp_obj_get_int(arg);
    dc2c:	6878      	ldr	r0, [r7, #4]
    dc2e:	f7ff ffab 	bl	db88 <mp_obj_get_int>
    dc32:	4603      	mov	r3, r0
    }
}
    dc34:	4618      	mov	r0, r3
    dc36:	3708      	adds	r7, #8
    dc38:	46bd      	mov	sp, r7
    dc3a:	bd80      	pop	{r7, pc}
    dc3c:	00020f3c 	.word	0x00020f3c

0000dc40 <mp_obj_get_int_maybe>:

// returns false if arg is not of integral type
// returns true and sets *value if it is of integral type
// can throw OverflowError if arg is of integral type, but doesn't fit in a mp_int_t
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    dc40:	b580      	push	{r7, lr}
    dc42:	b082      	sub	sp, #8
    dc44:	af00      	add	r7, sp, #0
    dc46:	6078      	str	r0, [r7, #4]
    dc48:	6039      	str	r1, [r7, #0]
    if (arg == mp_const_false) {
    dc4a:	687b      	ldr	r3, [r7, #4]
    dc4c:	4a19      	ldr	r2, [pc, #100]	; (dcb4 <mp_obj_get_int_maybe+0x74>)
    dc4e:	4293      	cmp	r3, r2
    dc50:	d103      	bne.n	dc5a <mp_obj_get_int_maybe+0x1a>
        *value = 0;
    dc52:	683b      	ldr	r3, [r7, #0]
    dc54:	2200      	movs	r2, #0
    dc56:	601a      	str	r2, [r3, #0]
    dc58:	e026      	b.n	dca8 <mp_obj_get_int_maybe+0x68>
    } else if (arg == mp_const_true) {
    dc5a:	687b      	ldr	r3, [r7, #4]
    dc5c:	4a16      	ldr	r2, [pc, #88]	; (dcb8 <mp_obj_get_int_maybe+0x78>)
    dc5e:	4293      	cmp	r3, r2
    dc60:	d103      	bne.n	dc6a <mp_obj_get_int_maybe+0x2a>
        *value = 1;
    dc62:	683b      	ldr	r3, [r7, #0]
    dc64:	2201      	movs	r2, #1
    dc66:	601a      	str	r2, [r3, #0]
    dc68:	e01e      	b.n	dca8 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dc6a:	6878      	ldr	r0, [r7, #4]
    dc6c:	f7ff fd78 	bl	d760 <MP_OBJ_IS_SMALL_INT>
    dc70:	4603      	mov	r3, r0
    dc72:	2b00      	cmp	r3, #0
    dc74:	d004      	beq.n	dc80 <mp_obj_get_int_maybe+0x40>
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    dc76:	687b      	ldr	r3, [r7, #4]
    dc78:	105a      	asrs	r2, r3, #1
    dc7a:	683b      	ldr	r3, [r7, #0]
    dc7c:	601a      	str	r2, [r3, #0]
    dc7e:	e013      	b.n	dca8 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dc80:	6878      	ldr	r0, [r7, #4]
    dc82:	f7ff fd91 	bl	d7a8 <MP_OBJ_IS_OBJ>
    dc86:	4603      	mov	r3, r0
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d00b      	beq.n	dca4 <mp_obj_get_int_maybe+0x64>
    dc8c:	687b      	ldr	r3, [r7, #4]
    dc8e:	681b      	ldr	r3, [r3, #0]
    dc90:	4a0a      	ldr	r2, [pc, #40]	; (dcbc <mp_obj_get_int_maybe+0x7c>)
    dc92:	4293      	cmp	r3, r2
    dc94:	d106      	bne.n	dca4 <mp_obj_get_int_maybe+0x64>
        *value = mp_obj_int_get_checked(arg);
    dc96:	6878      	ldr	r0, [r7, #4]
    dc98:	f002 fe94 	bl	109c4 <mp_obj_int_get_checked>
    dc9c:	4602      	mov	r2, r0
    dc9e:	683b      	ldr	r3, [r7, #0]
    dca0:	601a      	str	r2, [r3, #0]
    dca2:	e001      	b.n	dca8 <mp_obj_get_int_maybe+0x68>
    } else {
        return false;
    dca4:	2300      	movs	r3, #0
    dca6:	e000      	b.n	dcaa <mp_obj_get_int_maybe+0x6a>
    }
    return true;
    dca8:	2301      	movs	r3, #1
}
    dcaa:	4618      	mov	r0, r3
    dcac:	3708      	adds	r7, #8
    dcae:	46bd      	mov	sp, r7
    dcb0:	bd80      	pop	{r7, pc}
    dcb2:	bf00      	nop
    dcb4:	0001fc34 	.word	0x0001fc34
    dcb8:	0001fc3c 	.word	0x0001fc3c
    dcbc:	00020f3c 	.word	0x00020f3c

0000dcc0 <mp_obj_get_array>:
}
#endif
#endif

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    dcc0:	b580      	push	{r7, lr}
    dcc2:	b084      	sub	sp, #16
    dcc4:	af00      	add	r7, sp, #0
    dcc6:	60f8      	str	r0, [r7, #12]
    dcc8:	60b9      	str	r1, [r7, #8]
    dcca:	607a      	str	r2, [r7, #4]
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    dccc:	68f8      	ldr	r0, [r7, #12]
    dcce:	f7ff fd6b 	bl	d7a8 <MP_OBJ_IS_OBJ>
    dcd2:	4603      	mov	r3, r0
    dcd4:	2b00      	cmp	r3, #0
    dcd6:	d00a      	beq.n	dcee <mp_obj_get_array+0x2e>
    dcd8:	68fb      	ldr	r3, [r7, #12]
    dcda:	681b      	ldr	r3, [r3, #0]
    dcdc:	4a10      	ldr	r2, [pc, #64]	; (dd20 <mp_obj_get_array+0x60>)
    dcde:	4293      	cmp	r3, r2
    dce0:	d105      	bne.n	dcee <mp_obj_get_array+0x2e>
        mp_obj_tuple_get(o, len, items);
    dce2:	687a      	ldr	r2, [r7, #4]
    dce4:	68b9      	ldr	r1, [r7, #8]
    dce6:	68f8      	ldr	r0, [r7, #12]
    dce8:	f008 f894 	bl	15e14 <mp_obj_tuple_get>
    dcec:	e013      	b.n	dd16 <mp_obj_get_array+0x56>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    dcee:	68f8      	ldr	r0, [r7, #12]
    dcf0:	f7ff fd5a 	bl	d7a8 <MP_OBJ_IS_OBJ>
    dcf4:	4603      	mov	r3, r0
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	d00a      	beq.n	dd10 <mp_obj_get_array+0x50>
    dcfa:	68fb      	ldr	r3, [r7, #12]
    dcfc:	681b      	ldr	r3, [r3, #0]
    dcfe:	4a09      	ldr	r2, [pc, #36]	; (dd24 <mp_obj_get_array+0x64>)
    dd00:	4293      	cmp	r3, r2
    dd02:	d105      	bne.n	dd10 <mp_obj_get_array+0x50>
        mp_obj_list_get(o, len, items);
    dd04:	687a      	ldr	r2, [r7, #4]
    dd06:	68b9      	ldr	r1, [r7, #8]
    dd08:	68f8      	ldr	r0, [r7, #12]
    dd0a:	f003 fe03 	bl	11914 <mp_obj_list_get>
    dd0e:	e002      	b.n	dd16 <mp_obj_get_array+0x56>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("expected tuple/list");
    dd10:	4805      	ldr	r0, [pc, #20]	; (dd28 <mp_obj_get_array+0x68>)
    dd12:	f7ff f941 	bl	cf98 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object '%s' is not a tuple or list", mp_obj_get_type_str(o)));
        }
    }
}
    dd16:	bf00      	nop
    dd18:	3710      	adds	r7, #16
    dd1a:	46bd      	mov	sp, r7
    dd1c:	bd80      	pop	{r7, pc}
    dd1e:	bf00      	nop
    dd20:	00021db4 	.word	0x00021db4
    dd24:	000211a8 	.word	0x000211a8
    dd28:	0001fac0 	.word	0x0001fac0

0000dd2c <mp_obj_get_array_fixed_n>:

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    dd2c:	b580      	push	{r7, lr}
    dd2e:	b086      	sub	sp, #24
    dd30:	af00      	add	r7, sp, #0
    dd32:	60f8      	str	r0, [r7, #12]
    dd34:	60b9      	str	r1, [r7, #8]
    dd36:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    mp_obj_get_array(o, &seq_len, items);
    dd38:	f107 0314 	add.w	r3, r7, #20
    dd3c:	687a      	ldr	r2, [r7, #4]
    dd3e:	4619      	mov	r1, r3
    dd40:	68f8      	ldr	r0, [r7, #12]
    dd42:	f7ff ffbd 	bl	dcc0 <mp_obj_get_array>
    if (seq_len != len) {
    dd46:	697a      	ldr	r2, [r7, #20]
    dd48:	68bb      	ldr	r3, [r7, #8]
    dd4a:	429a      	cmp	r2, r3
    dd4c:	d002      	beq.n	dd54 <mp_obj_get_array_fixed_n+0x28>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_ValueError("tuple/list has wrong length");
    dd4e:	4803      	ldr	r0, [pc, #12]	; (dd5c <mp_obj_get_array_fixed_n+0x30>)
    dd50:	f7ff f918 	bl	cf84 <mp_raise_ValueError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
                "requested length %d but object has length %d", (int)len, (int)seq_len));
        }
    }
}
    dd54:	bf00      	nop
    dd56:	3718      	adds	r7, #24
    dd58:	46bd      	mov	sp, r7
    dd5a:	bd80      	pop	{r7, pc}
    dd5c:	0001fad4 	.word	0x0001fad4

0000dd60 <mp_get_index>:

// is_slice determines whether the index is a slice index
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    dd60:	b580      	push	{r7, lr}
    dd62:	b086      	sub	sp, #24
    dd64:	af00      	add	r7, sp, #0
    dd66:	60f8      	str	r0, [r7, #12]
    dd68:	60b9      	str	r1, [r7, #8]
    dd6a:	607a      	str	r2, [r7, #4]
    dd6c:	70fb      	strb	r3, [r7, #3]
    mp_int_t i;
    if (MP_OBJ_IS_SMALL_INT(index)) {
    dd6e:	6878      	ldr	r0, [r7, #4]
    dd70:	f7ff fcf6 	bl	d760 <MP_OBJ_IS_SMALL_INT>
    dd74:	4603      	mov	r3, r0
    dd76:	2b00      	cmp	r3, #0
    dd78:	d003      	beq.n	dd82 <mp_get_index+0x22>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    dd7a:	687b      	ldr	r3, [r7, #4]
    dd7c:	105b      	asrs	r3, r3, #1
    dd7e:	617b      	str	r3, [r7, #20]
    dd80:	e00e      	b.n	dda0 <mp_get_index+0x40>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    dd82:	f107 0314 	add.w	r3, r7, #20
    dd86:	4619      	mov	r1, r3
    dd88:	6878      	ldr	r0, [r7, #4]
    dd8a:	f7ff ff59 	bl	dc40 <mp_obj_get_int_maybe>
    dd8e:	4603      	mov	r3, r0
    dd90:	f083 0301 	eor.w	r3, r3, #1
    dd94:	b2db      	uxtb	r3, r3
    dd96:	2b00      	cmp	r3, #0
    dd98:	d002      	beq.n	dda0 <mp_get_index+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("indices must be integers");
    dd9a:	4816      	ldr	r0, [pc, #88]	; (ddf4 <mp_get_index+0x94>)
    dd9c:	f7ff f8fc 	bl	cf98 <mp_raise_TypeError>
                "%q indices must be integers, not %s",
                type->name, mp_obj_get_type_str(index)));
        }
    }

    if (i < 0) {
    dda0:	697b      	ldr	r3, [r7, #20]
    dda2:	2b00      	cmp	r3, #0
    dda4:	da04      	bge.n	ddb0 <mp_get_index+0x50>
        i += len;
    dda6:	697b      	ldr	r3, [r7, #20]
    dda8:	461a      	mov	r2, r3
    ddaa:	68bb      	ldr	r3, [r7, #8]
    ddac:	4413      	add	r3, r2
    ddae:	617b      	str	r3, [r7, #20]
    }
    if (is_slice) {
    ddb0:	78fb      	ldrb	r3, [r7, #3]
    ddb2:	2b00      	cmp	r3, #0
    ddb4:	d00d      	beq.n	ddd2 <mp_get_index+0x72>
        if (i < 0) {
    ddb6:	697b      	ldr	r3, [r7, #20]
    ddb8:	2b00      	cmp	r3, #0
    ddba:	da02      	bge.n	ddc2 <mp_get_index+0x62>
            i = 0;
    ddbc:	2300      	movs	r3, #0
    ddbe:	617b      	str	r3, [r7, #20]
    ddc0:	e013      	b.n	ddea <mp_get_index+0x8a>
        } else if ((mp_uint_t)i > len) {
    ddc2:	697b      	ldr	r3, [r7, #20]
    ddc4:	461a      	mov	r2, r3
    ddc6:	68bb      	ldr	r3, [r7, #8]
    ddc8:	429a      	cmp	r2, r3
    ddca:	d90e      	bls.n	ddea <mp_get_index+0x8a>
            i = len;
    ddcc:	68bb      	ldr	r3, [r7, #8]
    ddce:	617b      	str	r3, [r7, #20]
    ddd0:	e00b      	b.n	ddea <mp_get_index+0x8a>
        }
    } else {
        if (i < 0 || (mp_uint_t)i >= len) {
    ddd2:	697b      	ldr	r3, [r7, #20]
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	db04      	blt.n	dde2 <mp_get_index+0x82>
    ddd8:	697b      	ldr	r3, [r7, #20]
    ddda:	461a      	mov	r2, r3
    dddc:	68bb      	ldr	r3, [r7, #8]
    ddde:	429a      	cmp	r2, r3
    dde0:	d303      	bcc.n	ddea <mp_get_index+0x8a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_IndexError, "index out of range");
    dde2:	4905      	ldr	r1, [pc, #20]	; (ddf8 <mp_get_index+0x98>)
    dde4:	4805      	ldr	r0, [pc, #20]	; (ddfc <mp_get_index+0x9c>)
    dde6:	f7ff f8b5 	bl	cf54 <mp_raise_msg>
            }
        }
    }

    // By this point 0 <= i <= len and so fits in a size_t
    return (size_t)i;
    ddea:	697b      	ldr	r3, [r7, #20]
}
    ddec:	4618      	mov	r0, r3
    ddee:	3718      	adds	r7, #24
    ddf0:	46bd      	mov	sp, r7
    ddf2:	bd80      	pop	{r7, pc}
    ddf4:	0001faf0 	.word	0x0001faf0
    ddf8:	0001fb0c 	.word	0x0001fb0c
    ddfc:	0002052c 	.word	0x0002052c

0000de00 <mp_obj_id>:

mp_obj_t mp_obj_id(mp_obj_t o_in) {
    de00:	b580      	push	{r7, lr}
    de02:	b084      	sub	sp, #16
    de04:	af00      	add	r7, sp, #0
    de06:	6078      	str	r0, [r7, #4]
    mp_int_t id = (mp_int_t)o_in;
    de08:	687b      	ldr	r3, [r7, #4]
    de0a:	60fb      	str	r3, [r7, #12]
    if (!MP_OBJ_IS_OBJ(o_in)) {
    de0c:	6878      	ldr	r0, [r7, #4]
    de0e:	f7ff fccb 	bl	d7a8 <MP_OBJ_IS_OBJ>
    de12:	4603      	mov	r3, r0
    de14:	f083 0301 	eor.w	r3, r3, #1
    de18:	b2db      	uxtb	r3, r3
    de1a:	2b00      	cmp	r3, #0
    de1c:	d004      	beq.n	de28 <mp_obj_id+0x28>
        return mp_obj_new_int(id);
    de1e:	68f8      	ldr	r0, [r7, #12]
    de20:	f002 fda8 	bl	10974 <mp_obj_new_int>
    de24:	4603      	mov	r3, r0
    de26:	e00c      	b.n	de42 <mp_obj_id+0x42>
    } else if (id >= 0) {
    de28:	68fb      	ldr	r3, [r7, #12]
    de2a:	2b00      	cmp	r3, #0
    de2c:	db04      	blt.n	de38 <mp_obj_id+0x38>
        // Many OSes and CPUs have affinity for putting "user" memories
        // into low half of address space, and "system" into upper half.
        // We're going to take advantage of that and return small int
        // (signed) for such "user" addresses.
        return MP_OBJ_NEW_SMALL_INT(id);
    de2e:	68fb      	ldr	r3, [r7, #12]
    de30:	005b      	lsls	r3, r3, #1
    de32:	f043 0301 	orr.w	r3, r3, #1
    de36:	e004      	b.n	de42 <mp_obj_id+0x42>
    } else {
        // If that didn't work, well, let's return long int, just as
        // a (big) positive value, so it will never clash with the range
        // of small int returned in previous case.
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    de38:	68fb      	ldr	r3, [r7, #12]
    de3a:	4618      	mov	r0, r3
    de3c:	f002 fd80 	bl	10940 <mp_obj_new_int_from_uint>
    de40:	4603      	mov	r3, r0
    }
}
    de42:	4618      	mov	r0, r3
    de44:	3710      	adds	r7, #16
    de46:	46bd      	mov	sp, r7
    de48:	bd80      	pop	{r7, pc}
    de4a:	bf00      	nop

0000de4c <mp_obj_len>:

// will raise a TypeError if object has no length
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    de4c:	b580      	push	{r7, lr}
    de4e:	b084      	sub	sp, #16
    de50:	af00      	add	r7, sp, #0
    de52:	6078      	str	r0, [r7, #4]
    mp_obj_t len = mp_obj_len_maybe(o_in);
    de54:	6878      	ldr	r0, [r7, #4]
    de56:	f000 f80f 	bl	de78 <mp_obj_len_maybe>
    de5a:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    de5c:	68fb      	ldr	r3, [r7, #12]
    de5e:	2b00      	cmp	r3, #0
    de60:	d102      	bne.n	de68 <mp_obj_len+0x1c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object has no len");
    de62:	4804      	ldr	r0, [pc, #16]	; (de74 <mp_obj_len+0x28>)
    de64:	f7ff f898 	bl	cf98 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object of type '%s' has no len()", mp_obj_get_type_str(o_in)));
        }
    } else {
        return len;
    de68:	68fb      	ldr	r3, [r7, #12]
    }
}
    de6a:	4618      	mov	r0, r3
    de6c:	3710      	adds	r7, #16
    de6e:	46bd      	mov	sp, r7
    de70:	bd80      	pop	{r7, pc}
    de72:	bf00      	nop
    de74:	0001fb20 	.word	0x0001fb20

0000de78 <mp_obj_len_maybe>:

// may return MP_OBJ_NULL
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    de78:	b580      	push	{r7, lr}
    de7a:	b084      	sub	sp, #16
    de7c:	af00      	add	r7, sp, #0
    de7e:	6078      	str	r0, [r7, #4]
    if (
#if !MICROPY_PY_BUILTINS_STR_UNICODE
        // It's simple - unicode is slow, non-unicode is fast
        MP_OBJ_IS_STR(o_in) ||
    de80:	6878      	ldr	r0, [r7, #4]
    de82:	f7ff fc7f 	bl	d784 <MP_OBJ_IS_QSTR>
    de86:	4603      	mov	r3, r0
    if (
    de88:	2b00      	cmp	r3, #0
    de8a:	d115      	bne.n	deb8 <mp_obj_len_maybe+0x40>
        MP_OBJ_IS_STR(o_in) ||
    de8c:	6878      	ldr	r0, [r7, #4]
    de8e:	f7ff fc8b 	bl	d7a8 <MP_OBJ_IS_OBJ>
    de92:	4603      	mov	r3, r0
    de94:	2b00      	cmp	r3, #0
    de96:	d004      	beq.n	dea2 <mp_obj_len_maybe+0x2a>
    de98:	687b      	ldr	r3, [r7, #4]
    de9a:	681b      	ldr	r3, [r3, #0]
    de9c:	4a1b      	ldr	r2, [pc, #108]	; (df0c <mp_obj_len_maybe+0x94>)
    de9e:	4293      	cmp	r3, r2
    dea0:	d00a      	beq.n	deb8 <mp_obj_len_maybe+0x40>
#endif
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    dea2:	6878      	ldr	r0, [r7, #4]
    dea4:	f7ff fc80 	bl	d7a8 <MP_OBJ_IS_OBJ>
    dea8:	4603      	mov	r3, r0
        MP_OBJ_IS_STR(o_in) ||
    deaa:	2b00      	cmp	r3, #0
    deac:	d019      	beq.n	dee2 <mp_obj_len_maybe+0x6a>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    deae:	687b      	ldr	r3, [r7, #4]
    deb0:	681b      	ldr	r3, [r3, #0]
    deb2:	4a17      	ldr	r2, [pc, #92]	; (df10 <mp_obj_len_maybe+0x98>)
    deb4:	4293      	cmp	r3, r2
    deb6:	d114      	bne.n	dee2 <mp_obj_len_maybe+0x6a>
        GET_STR_LEN(o_in, l);
    deb8:	6878      	ldr	r0, [r7, #4]
    deba:	f7ff fc63 	bl	d784 <MP_OBJ_IS_QSTR>
    debe:	4603      	mov	r3, r0
    dec0:	2b00      	cmp	r3, #0
    dec2:	d006      	beq.n	ded2 <mp_obj_len_maybe+0x5a>
    dec4:	687b      	ldr	r3, [r7, #4]
    dec6:	089b      	lsrs	r3, r3, #2
    dec8:	4618      	mov	r0, r3
    deca:	f7f3 f991 	bl	11f0 <qstr_len>
    dece:	60f8      	str	r0, [r7, #12]
    ded0:	e002      	b.n	ded8 <mp_obj_len_maybe+0x60>
    ded2:	687b      	ldr	r3, [r7, #4]
    ded4:	689b      	ldr	r3, [r3, #8]
    ded6:	60fb      	str	r3, [r7, #12]
        return MP_OBJ_NEW_SMALL_INT(l);
    ded8:	68fb      	ldr	r3, [r7, #12]
    deda:	005b      	lsls	r3, r3, #1
    dedc:	f043 0301 	orr.w	r3, r3, #1
    dee0:	e00f      	b.n	df02 <mp_obj_len_maybe+0x8a>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    dee2:	6878      	ldr	r0, [r7, #4]
    dee4:	f7ff fc72 	bl	d7cc <mp_obj_get_type>
    dee8:	60b8      	str	r0, [r7, #8]
        if (type->unary_op != NULL) {
    deea:	68bb      	ldr	r3, [r7, #8]
    deec:	695b      	ldr	r3, [r3, #20]
    deee:	2b00      	cmp	r3, #0
    def0:	d006      	beq.n	df00 <mp_obj_len_maybe+0x88>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    def2:	68bb      	ldr	r3, [r7, #8]
    def4:	695b      	ldr	r3, [r3, #20]
    def6:	6879      	ldr	r1, [r7, #4]
    def8:	2005      	movs	r0, #5
    defa:	4798      	blx	r3
    defc:	4603      	mov	r3, r0
    defe:	e000      	b.n	df02 <mp_obj_len_maybe+0x8a>
        } else {
            return MP_OBJ_NULL;
    df00:	2300      	movs	r3, #0
        }
    }
}
    df02:	4618      	mov	r0, r3
    df04:	3710      	adds	r7, #16
    df06:	46bd      	mov	sp, r7
    df08:	bd80      	pop	{r7, pc}
    df0a:	bf00      	nop
    df0c:	00021b30 	.word	0x00021b30
    df10:	00021b6c 	.word	0x00021b6c

0000df14 <mp_obj_subscr>:

mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    df14:	b580      	push	{r7, lr}
    df16:	b086      	sub	sp, #24
    df18:	af00      	add	r7, sp, #0
    df1a:	60f8      	str	r0, [r7, #12]
    df1c:	60b9      	str	r1, [r7, #8]
    df1e:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(base);
    df20:	68f8      	ldr	r0, [r7, #12]
    df22:	f7ff fc53 	bl	d7cc <mp_obj_get_type>
    df26:	6178      	str	r0, [r7, #20]
    if (type->subscr != NULL) {
    df28:	697b      	ldr	r3, [r7, #20]
    df2a:	6a1b      	ldr	r3, [r3, #32]
    df2c:	2b00      	cmp	r3, #0
    df2e:	d00b      	beq.n	df48 <mp_obj_subscr+0x34>
        mp_obj_t ret = type->subscr(base, index, value);
    df30:	697b      	ldr	r3, [r7, #20]
    df32:	6a1b      	ldr	r3, [r3, #32]
    df34:	687a      	ldr	r2, [r7, #4]
    df36:	68b9      	ldr	r1, [r7, #8]
    df38:	68f8      	ldr	r0, [r7, #12]
    df3a:	4798      	blx	r3
    df3c:	6138      	str	r0, [r7, #16]
        if (ret != MP_OBJ_NULL) {
    df3e:	693b      	ldr	r3, [r7, #16]
    df40:	2b00      	cmp	r3, #0
    df42:	d001      	beq.n	df48 <mp_obj_subscr+0x34>
            return ret;
    df44:	693b      	ldr	r3, [r7, #16]
    df46:	e00e      	b.n	df66 <mp_obj_subscr+0x52>
        }
        // TODO: call base classes here?
    }
    if (value == MP_OBJ_NULL) {
    df48:	687b      	ldr	r3, [r7, #4]
    df4a:	2b00      	cmp	r3, #0
    df4c:	d102      	bne.n	df54 <mp_obj_subscr+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item deletion");
    df4e:	4808      	ldr	r0, [pc, #32]	; (df70 <mp_obj_subscr+0x5c>)
    df50:	f7ff f822 	bl	cf98 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item deletion", mp_obj_get_type_str(base)));
        }
    } else if (value == MP_OBJ_SENTINEL) {
    df54:	687b      	ldr	r3, [r7, #4]
    df56:	2b08      	cmp	r3, #8
    df58:	d102      	bne.n	df60 <mp_obj_subscr+0x4c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object is not subscriptable");
    df5a:	4806      	ldr	r0, [pc, #24]	; (df74 <mp_obj_subscr+0x60>)
    df5c:	f7ff f81c 	bl	cf98 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not subscriptable", mp_obj_get_type_str(base)));
        }
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item assignment");
    df60:	4805      	ldr	r0, [pc, #20]	; (df78 <mp_obj_subscr+0x64>)
    df62:	f7ff f819 	bl	cf98 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item assignment", mp_obj_get_type_str(base)));
        }
    }
}
    df66:	4618      	mov	r0, r3
    df68:	3718      	adds	r7, #24
    df6a:	46bd      	mov	sp, r7
    df6c:	bd80      	pop	{r7, pc}
    df6e:	bf00      	nop
    df70:	0001fb34 	.word	0x0001fb34
    df74:	0001fb5c 	.word	0x0001fb5c
    df78:	0001fb78 	.word	0x0001fb78

0000df7c <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    df7c:	b480      	push	{r7}
    df7e:	b083      	sub	sp, #12
    df80:	af00      	add	r7, sp, #0
    df82:	6078      	str	r0, [r7, #4]
    return self;
    df84:	687b      	ldr	r3, [r7, #4]
}
    df86:	4618      	mov	r0, r3
    df88:	370c      	adds	r7, #12
    df8a:	46bd      	mov	sp, r7
    df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    df90:	4770      	bx	lr
    df92:	bf00      	nop

0000df94 <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    df94:	b480      	push	{r7}
    df96:	b083      	sub	sp, #12
    df98:	af00      	add	r7, sp, #0
    df9a:	6078      	str	r0, [r7, #4]
    df9c:	6039      	str	r1, [r7, #0]
    (void)iter_buf;
    return self;
    df9e:	687b      	ldr	r3, [r7, #4]
}
    dfa0:	4618      	mov	r0, r3
    dfa2:	370c      	adds	r7, #12
    dfa4:	46bd      	mov	sp, r7
    dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfaa:	4770      	bx	lr

0000dfac <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    dfac:	b580      	push	{r7, lr}
    dfae:	b086      	sub	sp, #24
    dfb0:	af00      	add	r7, sp, #0
    dfb2:	60f8      	str	r0, [r7, #12]
    dfb4:	60b9      	str	r1, [r7, #8]
    dfb6:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(obj);
    dfb8:	68f8      	ldr	r0, [r7, #12]
    dfba:	f7ff fc07 	bl	d7cc <mp_obj_get_type>
    dfbe:	6178      	str	r0, [r7, #20]
    if (type->buffer_p.get_buffer == NULL) {
    dfc0:	697b      	ldr	r3, [r7, #20]
    dfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	d101      	bne.n	dfcc <mp_get_buffer+0x20>
        return false;
    dfc8:	2300      	movs	r3, #0
    dfca:	e00c      	b.n	dfe6 <mp_get_buffer+0x3a>
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    dfcc:	697b      	ldr	r3, [r7, #20]
    dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dfd0:	687a      	ldr	r2, [r7, #4]
    dfd2:	68b9      	ldr	r1, [r7, #8]
    dfd4:	68f8      	ldr	r0, [r7, #12]
    dfd6:	4798      	blx	r3
    dfd8:	6138      	str	r0, [r7, #16]
    if (ret != 0) {
    dfda:	693b      	ldr	r3, [r7, #16]
    dfdc:	2b00      	cmp	r3, #0
    dfde:	d001      	beq.n	dfe4 <mp_get_buffer+0x38>
        return false;
    dfe0:	2300      	movs	r3, #0
    dfe2:	e000      	b.n	dfe6 <mp_get_buffer+0x3a>
    }
    return true;
    dfe4:	2301      	movs	r3, #1
}
    dfe6:	4618      	mov	r0, r3
    dfe8:	3718      	adds	r7, #24
    dfea:	46bd      	mov	sp, r7
    dfec:	bd80      	pop	{r7, pc}
    dfee:	bf00      	nop

0000dff0 <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    dff0:	b580      	push	{r7, lr}
    dff2:	b084      	sub	sp, #16
    dff4:	af00      	add	r7, sp, #0
    dff6:	60f8      	str	r0, [r7, #12]
    dff8:	60b9      	str	r1, [r7, #8]
    dffa:	607a      	str	r2, [r7, #4]
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    dffc:	687a      	ldr	r2, [r7, #4]
    dffe:	68b9      	ldr	r1, [r7, #8]
    e000:	68f8      	ldr	r0, [r7, #12]
    e002:	f7ff ffd3 	bl	dfac <mp_get_buffer>
    e006:	4603      	mov	r3, r0
    e008:	f083 0301 	eor.w	r3, r3, #1
    e00c:	b2db      	uxtb	r3, r3
    e00e:	2b00      	cmp	r3, #0
    e010:	d002      	beq.n	e018 <mp_get_buffer_raise+0x28>
        mp_raise_TypeError("object with buffer protocol required");
    e012:	4803      	ldr	r0, [pc, #12]	; (e020 <mp_get_buffer_raise+0x30>)
    e014:	f7fe ffc0 	bl	cf98 <mp_raise_TypeError>
    }
}
    e018:	bf00      	nop
    e01a:	3710      	adds	r7, #16
    e01c:	46bd      	mov	sp, r7
    e01e:	bd80      	pop	{r7, pc}
    e020:	0001fba8 	.word	0x0001fba8

0000e024 <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e024:	b480      	push	{r7}
    e026:	b083      	sub	sp, #12
    e028:	af00      	add	r7, sp, #0
    e02a:	6078      	str	r0, [r7, #4]
    e02c:	6039      	str	r1, [r7, #0]
    switch (op) {
    e02e:	687b      	ldr	r3, [r7, #4]
    e030:	2b06      	cmp	r3, #6
    e032:	d104      	bne.n	e03e <mp_generic_unary_op+0x1a>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    e034:	683b      	ldr	r3, [r7, #0]
    e036:	005b      	lsls	r3, r3, #1
    e038:	f043 0301 	orr.w	r3, r3, #1
    e03c:	e000      	b.n	e040 <mp_generic_unary_op+0x1c>
        default: return MP_OBJ_NULL; // op not supported
    e03e:	2300      	movs	r3, #0
    }
}
    e040:	4618      	mov	r0, r3
    e042:	370c      	adds	r7, #12
    e044:	46bd      	mov	sp, r7
    e046:	f85d 7b04 	ldr.w	r7, [sp], #4
    e04a:	4770      	bx	lr

0000e04c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e04c:	b480      	push	{r7}
    e04e:	b083      	sub	sp, #12
    e050:	af00      	add	r7, sp, #0
    e052:	6078      	str	r0, [r7, #4]
    e054:	687b      	ldr	r3, [r7, #4]
    e056:	2b00      	cmp	r3, #0
    e058:	d001      	beq.n	e05e <mp_obj_new_bool+0x12>
    e05a:	4b04      	ldr	r3, [pc, #16]	; (e06c <mp_obj_new_bool+0x20>)
    e05c:	e000      	b.n	e060 <mp_obj_new_bool+0x14>
    e05e:	4b04      	ldr	r3, [pc, #16]	; (e070 <mp_obj_new_bool+0x24>)
    e060:	4618      	mov	r0, r3
    e062:	370c      	adds	r7, #12
    e064:	46bd      	mov	sp, r7
    e066:	f85d 7b04 	ldr.w	r7, [sp], #4
    e06a:	4770      	bx	lr
    e06c:	0001fc3c 	.word	0x0001fc3c
    e070:	0001fc34 	.word	0x0001fc34

0000e074 <bool_print>:
typedef struct _mp_obj_bool_t {
    mp_obj_base_t base;
    bool value;
} mp_obj_bool_t;

STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e074:	b580      	push	{r7, lr}
    e076:	b086      	sub	sp, #24
    e078:	af00      	add	r7, sp, #0
    e07a:	60f8      	str	r0, [r7, #12]
    e07c:	60b9      	str	r1, [r7, #8]
    e07e:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(self_in);
    e080:	68bb      	ldr	r3, [r7, #8]
    e082:	617b      	str	r3, [r7, #20]
            mp_print_str(print, "true");
        } else {
            mp_print_str(print, "false");
        }
    } else {
        if (self->value) {
    e084:	697b      	ldr	r3, [r7, #20]
    e086:	791b      	ldrb	r3, [r3, #4]
    e088:	2b00      	cmp	r3, #0
    e08a:	d004      	beq.n	e096 <bool_print+0x22>
            mp_print_str(print, "True");
    e08c:	4906      	ldr	r1, [pc, #24]	; (e0a8 <bool_print+0x34>)
    e08e:	68f8      	ldr	r0, [r7, #12]
    e090:	f7f3 fc02 	bl	1898 <mp_print_str>
        } else {
            mp_print_str(print, "False");
        }
    }
}
    e094:	e003      	b.n	e09e <bool_print+0x2a>
            mp_print_str(print, "False");
    e096:	4905      	ldr	r1, [pc, #20]	; (e0ac <bool_print+0x38>)
    e098:	68f8      	ldr	r0, [r7, #12]
    e09a:	f7f3 fbfd 	bl	1898 <mp_print_str>
}
    e09e:	bf00      	nop
    e0a0:	3718      	adds	r7, #24
    e0a2:	46bd      	mov	sp, r7
    e0a4:	bd80      	pop	{r7, pc}
    e0a6:	bf00      	nop
    e0a8:	0001fbe8 	.word	0x0001fbe8
    e0ac:	0001fbf0 	.word	0x0001fbf0

0000e0b0 <bool_make_new>:

STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e0b0:	b580      	push	{r7, lr}
    e0b2:	b086      	sub	sp, #24
    e0b4:	af02      	add	r7, sp, #8
    e0b6:	60f8      	str	r0, [r7, #12]
    e0b8:	60b9      	str	r1, [r7, #8]
    e0ba:	607a      	str	r2, [r7, #4]
    e0bc:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    e0be:	2300      	movs	r3, #0
    e0c0:	9300      	str	r3, [sp, #0]
    e0c2:	2301      	movs	r3, #1
    e0c4:	2200      	movs	r2, #0
    e0c6:	6879      	ldr	r1, [r7, #4]
    e0c8:	68b8      	ldr	r0, [r7, #8]
    e0ca:	f7fe ff8b 	bl	cfe4 <mp_arg_check_num>

    if (n_args == 0) {
    e0ce:	68bb      	ldr	r3, [r7, #8]
    e0d0:	2b00      	cmp	r3, #0
    e0d2:	d101      	bne.n	e0d8 <bool_make_new+0x28>
        return mp_const_false;
    e0d4:	4b07      	ldr	r3, [pc, #28]	; (e0f4 <bool_make_new+0x44>)
    e0d6:	e009      	b.n	e0ec <bool_make_new+0x3c>
    } else {
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    e0d8:	683b      	ldr	r3, [r7, #0]
    e0da:	681b      	ldr	r3, [r3, #0]
    e0dc:	4618      	mov	r0, r3
    e0de:	f7ff fc53 	bl	d988 <mp_obj_is_true>
    e0e2:	4603      	mov	r3, r0
    e0e4:	4618      	mov	r0, r3
    e0e6:	f7ff ffb1 	bl	e04c <mp_obj_new_bool>
    e0ea:	4603      	mov	r3, r0
    }
}
    e0ec:	4618      	mov	r0, r3
    e0ee:	3710      	adds	r7, #16
    e0f0:	46bd      	mov	sp, r7
    e0f2:	bd80      	pop	{r7, pc}
    e0f4:	0001fc34 	.word	0x0001fc34

0000e0f8 <bool_unary_op>:

STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e0f8:	b580      	push	{r7, lr}
    e0fa:	b084      	sub	sp, #16
    e0fc:	af00      	add	r7, sp, #0
    e0fe:	6078      	str	r0, [r7, #4]
    e100:	6039      	str	r1, [r7, #0]
    if (op == MP_UNARY_OP_LEN) {
    e102:	687b      	ldr	r3, [r7, #4]
    e104:	2b05      	cmp	r3, #5
    e106:	d101      	bne.n	e10c <bool_unary_op+0x14>
        return MP_OBJ_NULL;
    e108:	2300      	movs	r3, #0
    e10a:	e00b      	b.n	e124 <bool_unary_op+0x2c>
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    e10c:	683b      	ldr	r3, [r7, #0]
    e10e:	60fb      	str	r3, [r7, #12]
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    e110:	68fb      	ldr	r3, [r7, #12]
    e112:	791b      	ldrb	r3, [r3, #4]
    e114:	005b      	lsls	r3, r3, #1
    e116:	f043 0301 	orr.w	r3, r3, #1
    e11a:	4619      	mov	r1, r3
    e11c:	6878      	ldr	r0, [r7, #4]
    e11e:	f7fd fafb 	bl	b718 <mp_unary_op>
    e122:	4603      	mov	r3, r0
}
    e124:	4618      	mov	r0, r3
    e126:	3710      	adds	r7, #16
    e128:	46bd      	mov	sp, r7
    e12a:	bd80      	pop	{r7, pc}

0000e12c <bool_binary_op>:

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e12c:	b580      	push	{r7, lr}
    e12e:	b086      	sub	sp, #24
    e130:	af00      	add	r7, sp, #0
    e132:	60f8      	str	r0, [r7, #12]
    e134:	60b9      	str	r1, [r7, #8]
    e136:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    e138:	68bb      	ldr	r3, [r7, #8]
    e13a:	617b      	str	r3, [r7, #20]
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    e13c:	697b      	ldr	r3, [r7, #20]
    e13e:	791b      	ldrb	r3, [r3, #4]
    e140:	005b      	lsls	r3, r3, #1
    e142:	f043 0301 	orr.w	r3, r3, #1
    e146:	687a      	ldr	r2, [r7, #4]
    e148:	4619      	mov	r1, r3
    e14a:	68f8      	ldr	r0, [r7, #12]
    e14c:	f7fd fbca 	bl	b8e4 <mp_binary_op>
    e150:	4603      	mov	r3, r0
}
    e152:	4618      	mov	r0, r3
    e154:	3718      	adds	r7, #24
    e156:	46bd      	mov	sp, r7
    e158:	bd80      	pop	{r7, pc}
    e15a:	bf00      	nop

0000e15c <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e15c:	b580      	push	{r7, lr}
    e15e:	b088      	sub	sp, #32
    e160:	af00      	add	r7, sp, #0
    e162:	60f8      	str	r0, [r7, #12]
    e164:	60b9      	str	r1, [r7, #8]
    e166:	607a      	str	r2, [r7, #4]
    e168:	603b      	str	r3, [r7, #0]
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    e16a:	683b      	ldr	r3, [r7, #0]
    e16c:	005a      	lsls	r2, r3, #1
    e16e:	687b      	ldr	r3, [r7, #4]
    e170:	4413      	add	r3, r2
    e172:	617b      	str	r3, [r7, #20]
    mp_obj_t *args2 = NULL;
    e174:	2300      	movs	r3, #0
    e176:	61fb      	str	r3, [r7, #28]
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    e178:	2300      	movs	r3, #0
    e17a:	61bb      	str	r3, [r7, #24]
    if (n_total > 4) {
    e17c:	697b      	ldr	r3, [r7, #20]
    e17e:	2b04      	cmp	r3, #4
    e180:	d908      	bls.n	e194 <mp_call_method_self_n_kw+0x38>
        // try to use heap to allocate temporary args array
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    e182:	697b      	ldr	r3, [r7, #20]
    e184:	3301      	adds	r3, #1
    e186:	009b      	lsls	r3, r3, #2
    e188:	4618      	mov	r0, r3
    e18a:	f7f2 f8df 	bl	34c <m_malloc_maybe>
    e18e:	61f8      	str	r0, [r7, #28]
        free_args2 = args2;
    e190:	69fb      	ldr	r3, [r7, #28]
    e192:	61bb      	str	r3, [r7, #24]
    }
    if (args2 == NULL) {
    e194:	69fb      	ldr	r3, [r7, #28]
    e196:	2b00      	cmp	r3, #0
    e198:	d10d      	bne.n	e1b6 <mp_call_method_self_n_kw+0x5a>
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    e19a:	697b      	ldr	r3, [r7, #20]
    e19c:	3301      	adds	r3, #1
    e19e:	009b      	lsls	r3, r3, #2
    e1a0:	3307      	adds	r3, #7
    e1a2:	3307      	adds	r3, #7
    e1a4:	08db      	lsrs	r3, r3, #3
    e1a6:	00db      	lsls	r3, r3, #3
    e1a8:	ebad 0d03 	sub.w	sp, sp, r3
    e1ac:	466b      	mov	r3, sp
    e1ae:	3307      	adds	r3, #7
    e1b0:	08db      	lsrs	r3, r3, #3
    e1b2:	00db      	lsls	r3, r3, #3
    e1b4:	61fb      	str	r3, [r7, #28]
    }
    #endif
    args2[0] = self;
    e1b6:	69fb      	ldr	r3, [r7, #28]
    e1b8:	68ba      	ldr	r2, [r7, #8]
    e1ba:	601a      	str	r2, [r3, #0]
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    e1bc:	69fb      	ldr	r3, [r7, #28]
    e1be:	1d18      	adds	r0, r3, #4
    e1c0:	697b      	ldr	r3, [r7, #20]
    e1c2:	009b      	lsls	r3, r3, #2
    e1c4:	461a      	mov	r2, r3
    e1c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e1c8:	f00d fda4 	bl	1bd14 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    e1cc:	687b      	ldr	r3, [r7, #4]
    e1ce:	1c59      	adds	r1, r3, #1
    e1d0:	69fb      	ldr	r3, [r7, #28]
    e1d2:	683a      	ldr	r2, [r7, #0]
    e1d4:	68f8      	ldr	r0, [r7, #12]
    e1d6:	f7fd fe1d 	bl	be14 <mp_call_function_n_kw>
    e1da:	6138      	str	r0, [r7, #16]
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    e1dc:	69bb      	ldr	r3, [r7, #24]
    e1de:	2b00      	cmp	r3, #0
    e1e0:	d002      	beq.n	e1e8 <mp_call_method_self_n_kw+0x8c>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    e1e2:	69b8      	ldr	r0, [r7, #24]
    e1e4:	f7f2 f8fc 	bl	3e0 <m_free>
    }
    #endif
    return res;
    e1e8:	693b      	ldr	r3, [r7, #16]
}
    e1ea:	4618      	mov	r0, r3
    e1ec:	3720      	adds	r7, #32
    e1ee:	46bd      	mov	sp, r7
    e1f0:	bd80      	pop	{r7, pc}
    e1f2:	bf00      	nop

0000e1f4 <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e1f4:	b580      	push	{r7, lr}
    e1f6:	b088      	sub	sp, #32
    e1f8:	af02      	add	r7, sp, #8
    e1fa:	60f8      	str	r0, [r7, #12]
    e1fc:	60b9      	str	r1, [r7, #8]
    e1fe:	607a      	str	r2, [r7, #4]
    e200:	603b      	str	r3, [r7, #0]
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    e202:	68fb      	ldr	r3, [r7, #12]
    e204:	617b      	str	r3, [r7, #20]
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    e206:	697b      	ldr	r3, [r7, #20]
    e208:	6858      	ldr	r0, [r3, #4]
    e20a:	697b      	ldr	r3, [r7, #20]
    e20c:	6899      	ldr	r1, [r3, #8]
    e20e:	683b      	ldr	r3, [r7, #0]
    e210:	9300      	str	r3, [sp, #0]
    e212:	687b      	ldr	r3, [r7, #4]
    e214:	68ba      	ldr	r2, [r7, #8]
    e216:	f7ff ffa1 	bl	e15c <mp_call_method_self_n_kw>
    e21a:	4603      	mov	r3, r0
}
    e21c:	4618      	mov	r0, r3
    e21e:	3718      	adds	r7, #24
    e220:	46bd      	mov	sp, r7
    e222:	bd80      	pop	{r7, pc}

0000e224 <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    e224:	b580      	push	{r7, lr}
    e226:	b084      	sub	sp, #16
    e228:	af00      	add	r7, sp, #0
    e22a:	6078      	str	r0, [r7, #4]
    e22c:	6039      	str	r1, [r7, #0]
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    e22e:	200c      	movs	r0, #12
    e230:	f7f2 f874 	bl	31c <m_malloc>
    e234:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_bound_meth;
    e236:	68fb      	ldr	r3, [r7, #12]
    e238:	4a06      	ldr	r2, [pc, #24]	; (e254 <mp_obj_new_bound_meth+0x30>)
    e23a:	601a      	str	r2, [r3, #0]
    o->meth = meth;
    e23c:	68fb      	ldr	r3, [r7, #12]
    e23e:	687a      	ldr	r2, [r7, #4]
    e240:	605a      	str	r2, [r3, #4]
    o->self = self;
    e242:	68fb      	ldr	r3, [r7, #12]
    e244:	683a      	ldr	r2, [r7, #0]
    e246:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    e248:	68fb      	ldr	r3, [r7, #12]
}
    e24a:	4618      	mov	r0, r3
    e24c:	3710      	adds	r7, #16
    e24e:	46bd      	mov	sp, r7
    e250:	bd80      	pop	{r7, pc}
    e252:	bf00      	nop
    e254:	0001fc44 	.word	0x0001fc44

0000e258 <mp_obj_cell_get>:
typedef struct _mp_obj_cell_t {
    mp_obj_base_t base;
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    e258:	b480      	push	{r7}
    e25a:	b085      	sub	sp, #20
    e25c:	af00      	add	r7, sp, #0
    e25e:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e260:	687b      	ldr	r3, [r7, #4]
    e262:	60fb      	str	r3, [r7, #12]
    return self->obj;
    e264:	68fb      	ldr	r3, [r7, #12]
    e266:	685b      	ldr	r3, [r3, #4]
}
    e268:	4618      	mov	r0, r3
    e26a:	3714      	adds	r7, #20
    e26c:	46bd      	mov	sp, r7
    e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e272:	4770      	bx	lr

0000e274 <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    e274:	b480      	push	{r7}
    e276:	b085      	sub	sp, #20
    e278:	af00      	add	r7, sp, #0
    e27a:	6078      	str	r0, [r7, #4]
    e27c:	6039      	str	r1, [r7, #0]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e27e:	687b      	ldr	r3, [r7, #4]
    e280:	60fb      	str	r3, [r7, #12]
    self->obj = obj;
    e282:	68fb      	ldr	r3, [r7, #12]
    e284:	683a      	ldr	r2, [r7, #0]
    e286:	605a      	str	r2, [r3, #4]
}
    e288:	bf00      	nop
    e28a:	3714      	adds	r7, #20
    e28c:	46bd      	mov	sp, r7
    e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e292:	4770      	bx	lr

0000e294 <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    e294:	b580      	push	{r7, lr}
    e296:	b084      	sub	sp, #16
    e298:	af00      	add	r7, sp, #0
    e29a:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    e29c:	2008      	movs	r0, #8
    e29e:	f7f2 f83d 	bl	31c <m_malloc>
    e2a2:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_cell;
    e2a4:	68fb      	ldr	r3, [r7, #12]
    e2a6:	4a05      	ldr	r2, [pc, #20]	; (e2bc <mp_obj_new_cell+0x28>)
    e2a8:	601a      	str	r2, [r3, #0]
    o->obj = obj;
    e2aa:	68fb      	ldr	r3, [r7, #12]
    e2ac:	687a      	ldr	r2, [r7, #4]
    e2ae:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    e2b0:	68fb      	ldr	r3, [r7, #12]
}
    e2b2:	4618      	mov	r0, r3
    e2b4:	3710      	adds	r7, #16
    e2b6:	46bd      	mov	sp, r7
    e2b8:	bd80      	pop	{r7, pc}
    e2ba:	bf00      	nop
    e2bc:	0001fc80 	.word	0x0001fc80

0000e2c0 <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e2c0:	b580      	push	{r7, lr}
    e2c2:	b08e      	sub	sp, #56	; 0x38
    e2c4:	af00      	add	r7, sp, #0
    e2c6:	60f8      	str	r0, [r7, #12]
    e2c8:	60b9      	str	r1, [r7, #8]
    e2ca:	607a      	str	r2, [r7, #4]
    e2cc:	603b      	str	r3, [r7, #0]
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);
    e2ce:	68fb      	ldr	r3, [r7, #12]
    e2d0:	637b      	str	r3, [r7, #52]	; 0x34

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    e2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2d4:	689a      	ldr	r2, [r3, #8]
    e2d6:	68bb      	ldr	r3, [r7, #8]
    e2d8:	441a      	add	r2, r3
    e2da:	687b      	ldr	r3, [r7, #4]
    e2dc:	005b      	lsls	r3, r3, #1
    e2de:	4413      	add	r3, r2
    e2e0:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_total <= 5) {
    e2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e2e4:	2b05      	cmp	r3, #5
    e2e6:	d826      	bhi.n	e336 <closure_call+0x76>
        // use stack to allocate temporary args array
        mp_obj_t args2[5];
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2ea:	f103 010c 	add.w	r1, r3, #12
    e2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2f0:	689b      	ldr	r3, [r3, #8]
    e2f2:	009a      	lsls	r2, r3, #2
    e2f4:	f107 0314 	add.w	r3, r7, #20
    e2f8:	4618      	mov	r0, r3
    e2fa:	f00d fd0b 	bl	1bd14 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e300:	689b      	ldr	r3, [r3, #8]
    e302:	009b      	lsls	r3, r3, #2
    e304:	f107 0214 	add.w	r2, r7, #20
    e308:	18d0      	adds	r0, r2, r3
    e30a:	687b      	ldr	r3, [r7, #4]
    e30c:	005a      	lsls	r2, r3, #1
    e30e:	68bb      	ldr	r3, [r7, #8]
    e310:	4413      	add	r3, r2
    e312:	009b      	lsls	r3, r3, #2
    e314:	461a      	mov	r2, r3
    e316:	6839      	ldr	r1, [r7, #0]
    e318:	f00d fcfc 	bl	1bd14 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e31e:	6858      	ldr	r0, [r3, #4]
    e320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e322:	689a      	ldr	r2, [r3, #8]
    e324:	68bb      	ldr	r3, [r7, #8]
    e326:	18d1      	adds	r1, r2, r3
    e328:	f107 0314 	add.w	r3, r7, #20
    e32c:	687a      	ldr	r2, [r7, #4]
    e32e:	f7fd fd71 	bl	be14 <mp_call_function_n_kw>
    e332:	4603      	mov	r3, r0
    e334:	e02c      	b.n	e390 <closure_call+0xd0>
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    e336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e338:	009b      	lsls	r3, r3, #2
    e33a:	4618      	mov	r0, r3
    e33c:	f7f1 ffee 	bl	31c <m_malloc>
    e340:	62f8      	str	r0, [r7, #44]	; 0x2c
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e344:	f103 010c 	add.w	r1, r3, #12
    e348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e34a:	689b      	ldr	r3, [r3, #8]
    e34c:	009b      	lsls	r3, r3, #2
    e34e:	461a      	mov	r2, r3
    e350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e352:	f00d fcdf 	bl	1bd14 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e358:	689b      	ldr	r3, [r3, #8]
    e35a:	009b      	lsls	r3, r3, #2
    e35c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e35e:	18d0      	adds	r0, r2, r3
    e360:	687b      	ldr	r3, [r7, #4]
    e362:	005a      	lsls	r2, r3, #1
    e364:	68bb      	ldr	r3, [r7, #8]
    e366:	4413      	add	r3, r2
    e368:	009b      	lsls	r3, r3, #2
    e36a:	461a      	mov	r2, r3
    e36c:	6839      	ldr	r1, [r7, #0]
    e36e:	f00d fcd1 	bl	1bd14 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e374:	6858      	ldr	r0, [r3, #4]
    e376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e378:	689a      	ldr	r2, [r3, #8]
    e37a:	68bb      	ldr	r3, [r7, #8]
    e37c:	18d1      	adds	r1, r2, r3
    e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e380:	687a      	ldr	r2, [r7, #4]
    e382:	f7fd fd47 	bl	be14 <mp_call_function_n_kw>
    e386:	62b8      	str	r0, [r7, #40]	; 0x28
        m_del(mp_obj_t, args2, n_total);
    e388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e38a:	f7f2 f829 	bl	3e0 <m_free>
        return res;
    e38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
}
    e390:	4618      	mov	r0, r3
    e392:	3738      	adds	r7, #56	; 0x38
    e394:	46bd      	mov	sp, r7
    e396:	bd80      	pop	{r7, pc}

0000e398 <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    e398:	b580      	push	{r7, lr}
    e39a:	b086      	sub	sp, #24
    e39c:	af00      	add	r7, sp, #0
    e39e:	60f8      	str	r0, [r7, #12]
    e3a0:	60b9      	str	r1, [r7, #8]
    e3a2:	607a      	str	r2, [r7, #4]
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    e3a4:	68bb      	ldr	r3, [r7, #8]
    e3a6:	3303      	adds	r3, #3
    e3a8:	009b      	lsls	r3, r3, #2
    e3aa:	4618      	mov	r0, r3
    e3ac:	f7f1 ffb6 	bl	31c <m_malloc>
    e3b0:	6178      	str	r0, [r7, #20]
    o->base.type = &closure_type;
    e3b2:	697b      	ldr	r3, [r7, #20]
    e3b4:	4a0a      	ldr	r2, [pc, #40]	; (e3e0 <mp_obj_new_closure+0x48>)
    e3b6:	601a      	str	r2, [r3, #0]
    o->fun = fun;
    e3b8:	697b      	ldr	r3, [r7, #20]
    e3ba:	68fa      	ldr	r2, [r7, #12]
    e3bc:	605a      	str	r2, [r3, #4]
    o->n_closed = n_closed_over;
    e3be:	697b      	ldr	r3, [r7, #20]
    e3c0:	68ba      	ldr	r2, [r7, #8]
    e3c2:	609a      	str	r2, [r3, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    e3c4:	697b      	ldr	r3, [r7, #20]
    e3c6:	f103 000c 	add.w	r0, r3, #12
    e3ca:	68bb      	ldr	r3, [r7, #8]
    e3cc:	009b      	lsls	r3, r3, #2
    e3ce:	461a      	mov	r2, r3
    e3d0:	6879      	ldr	r1, [r7, #4]
    e3d2:	f00d fc9f 	bl	1bd14 <memcpy>
    return MP_OBJ_FROM_PTR(o);
    e3d6:	697b      	ldr	r3, [r7, #20]
}
    e3d8:	4618      	mov	r0, r3
    e3da:	3718      	adds	r7, #24
    e3dc:	46bd      	mov	sp, r7
    e3de:	bd80      	pop	{r7, pc}
    e3e0:	0001fcbc 	.word	0x0001fcbc

0000e3e4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    e3e4:	b480      	push	{r7}
    e3e6:	b083      	sub	sp, #12
    e3e8:	af00      	add	r7, sp, #0
    e3ea:	6078      	str	r0, [r7, #4]
    e3ec:	687b      	ldr	r3, [r7, #4]
    e3ee:	f003 0303 	and.w	r3, r3, #3
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	bf0c      	ite	eq
    e3f6:	2301      	moveq	r3, #1
    e3f8:	2300      	movne	r3, #0
    e3fa:	b2db      	uxtb	r3, r3
    e3fc:	4618      	mov	r0, r3
    e3fe:	370c      	adds	r7, #12
    e400:	46bd      	mov	sp, r7
    e402:	f85d 7b04 	ldr.w	r7, [sp], #4
    e406:	4770      	bx	lr

0000e408 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    e408:	b480      	push	{r7}
    e40a:	b083      	sub	sp, #12
    e40c:	af00      	add	r7, sp, #0
    e40e:	6078      	str	r0, [r7, #4]
    e410:	6039      	str	r1, [r7, #0]
    e412:	687b      	ldr	r3, [r7, #4]
    e414:	689a      	ldr	r2, [r3, #8]
    e416:	683b      	ldr	r3, [r7, #0]
    e418:	00db      	lsls	r3, r3, #3
    e41a:	4413      	add	r3, r2
    e41c:	681b      	ldr	r3, [r3, #0]
    e41e:	2b00      	cmp	r3, #0
    e420:	d009      	beq.n	e436 <MP_MAP_SLOT_IS_FILLED+0x2e>
    e422:	687b      	ldr	r3, [r7, #4]
    e424:	689a      	ldr	r2, [r3, #8]
    e426:	683b      	ldr	r3, [r7, #0]
    e428:	00db      	lsls	r3, r3, #3
    e42a:	4413      	add	r3, r2
    e42c:	681b      	ldr	r3, [r3, #0]
    e42e:	2b08      	cmp	r3, #8
    e430:	d001      	beq.n	e436 <MP_MAP_SLOT_IS_FILLED+0x2e>
    e432:	2301      	movs	r3, #1
    e434:	e000      	b.n	e438 <MP_MAP_SLOT_IS_FILLED+0x30>
    e436:	2300      	movs	r3, #0
    e438:	f003 0301 	and.w	r3, r3, #1
    e43c:	b2db      	uxtb	r3, r3
    e43e:	4618      	mov	r0, r3
    e440:	370c      	adds	r7, #12
    e442:	46bd      	mov	sp, r7
    e444:	f85d 7b04 	ldr.w	r7, [sp], #4
    e448:	4770      	bx	lr
    e44a:	bf00      	nop

0000e44c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e44c:	b480      	push	{r7}
    e44e:	b083      	sub	sp, #12
    e450:	af00      	add	r7, sp, #0
    e452:	6078      	str	r0, [r7, #4]
    e454:	687b      	ldr	r3, [r7, #4]
    e456:	2b00      	cmp	r3, #0
    e458:	d001      	beq.n	e45e <mp_obj_new_bool+0x12>
    e45a:	4b04      	ldr	r3, [pc, #16]	; (e46c <mp_obj_new_bool+0x20>)
    e45c:	e000      	b.n	e460 <mp_obj_new_bool+0x14>
    e45e:	4b04      	ldr	r3, [pc, #16]	; (e470 <mp_obj_new_bool+0x24>)
    e460:	4618      	mov	r0, r3
    e462:	370c      	adds	r7, #12
    e464:	46bd      	mov	sp, r7
    e466:	f85d 7b04 	ldr.w	r7, [sp], #4
    e46a:	4770      	bx	lr
    e46c:	0001fc3c 	.word	0x0001fc3c
    e470:	0001fc34 	.word	0x0001fc34

0000e474 <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    e474:	b580      	push	{r7, lr}
    e476:	b086      	sub	sp, #24
    e478:	af00      	add	r7, sp, #0
    e47a:	6078      	str	r0, [r7, #4]
    e47c:	6039      	str	r1, [r7, #0]
    size_t max = dict->map.alloc;
    e47e:	687b      	ldr	r3, [r7, #4]
    e480:	689b      	ldr	r3, [r3, #8]
    e482:	613b      	str	r3, [r7, #16]
    mp_map_t *map = &dict->map;
    e484:	687b      	ldr	r3, [r7, #4]
    e486:	3304      	adds	r3, #4
    e488:	60fb      	str	r3, [r7, #12]

    for (size_t i = *cur; i < max; i++) {
    e48a:	683b      	ldr	r3, [r7, #0]
    e48c:	681b      	ldr	r3, [r3, #0]
    e48e:	617b      	str	r3, [r7, #20]
    e490:	e013      	b.n	e4ba <dict_iter_next+0x46>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    e492:	6979      	ldr	r1, [r7, #20]
    e494:	68f8      	ldr	r0, [r7, #12]
    e496:	f7ff ffb7 	bl	e408 <MP_MAP_SLOT_IS_FILLED>
    e49a:	4603      	mov	r3, r0
    e49c:	2b00      	cmp	r3, #0
    e49e:	d009      	beq.n	e4b4 <dict_iter_next+0x40>
            *cur = i + 1;
    e4a0:	697b      	ldr	r3, [r7, #20]
    e4a2:	1c5a      	adds	r2, r3, #1
    e4a4:	683b      	ldr	r3, [r7, #0]
    e4a6:	601a      	str	r2, [r3, #0]
            return &(map->table[i]);
    e4a8:	68fb      	ldr	r3, [r7, #12]
    e4aa:	689a      	ldr	r2, [r3, #8]
    e4ac:	697b      	ldr	r3, [r7, #20]
    e4ae:	00db      	lsls	r3, r3, #3
    e4b0:	4413      	add	r3, r2
    e4b2:	e007      	b.n	e4c4 <dict_iter_next+0x50>
    for (size_t i = *cur; i < max; i++) {
    e4b4:	697b      	ldr	r3, [r7, #20]
    e4b6:	3301      	adds	r3, #1
    e4b8:	617b      	str	r3, [r7, #20]
    e4ba:	697a      	ldr	r2, [r7, #20]
    e4bc:	693b      	ldr	r3, [r7, #16]
    e4be:	429a      	cmp	r2, r3
    e4c0:	d3e7      	bcc.n	e492 <dict_iter_next+0x1e>
        }
    }

    return NULL;
    e4c2:	2300      	movs	r3, #0
}
    e4c4:	4618      	mov	r0, r3
    e4c6:	3718      	adds	r7, #24
    e4c8:	46bd      	mov	sp, r7
    e4ca:	bd80      	pop	{r7, pc}

0000e4cc <dict_print>:

STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e4cc:	b580      	push	{r7, lr}
    e4ce:	b088      	sub	sp, #32
    e4d0:	af00      	add	r7, sp, #0
    e4d2:	60f8      	str	r0, [r7, #12]
    e4d4:	60b9      	str	r1, [r7, #8]
    e4d6:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e4d8:	68bb      	ldr	r3, [r7, #8]
    e4da:	61bb      	str	r3, [r7, #24]
    bool first = true;
    e4dc:	2301      	movs	r3, #1
    e4de:	77fb      	strb	r3, [r7, #31]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
    e4e0:	2301      	movs	r3, #1
    e4e2:	607b      	str	r3, [r7, #4]
    }
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_printf(print, "%q(", self->base.type->name);
    }
    mp_print_str(print, "{");
    e4e4:	491c      	ldr	r1, [pc, #112]	; (e558 <dict_print+0x8c>)
    e4e6:	68f8      	ldr	r0, [r7, #12]
    e4e8:	f7f3 f9d6 	bl	1898 <mp_print_str>
    size_t cur = 0;
    e4ec:	2300      	movs	r3, #0
    e4ee:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = NULL;
    e4f0:	2300      	movs	r3, #0
    e4f2:	617b      	str	r3, [r7, #20]
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e4f4:	e01d      	b.n	e532 <dict_print+0x66>
        if (!first) {
    e4f6:	7ffb      	ldrb	r3, [r7, #31]
    e4f8:	f083 0301 	eor.w	r3, r3, #1
    e4fc:	b2db      	uxtb	r3, r3
    e4fe:	2b00      	cmp	r3, #0
    e500:	d003      	beq.n	e50a <dict_print+0x3e>
            mp_print_str(print, ", ");
    e502:	4916      	ldr	r1, [pc, #88]	; (e55c <dict_print+0x90>)
    e504:	68f8      	ldr	r0, [r7, #12]
    e506:	f7f3 f9c7 	bl	1898 <mp_print_str>
        }
        first = false;
    e50a:	2300      	movs	r3, #0
    e50c:	77fb      	strb	r3, [r7, #31]
        mp_obj_print_helper(print, next->key, kind);
    e50e:	697b      	ldr	r3, [r7, #20]
    e510:	681b      	ldr	r3, [r3, #0]
    e512:	687a      	ldr	r2, [r7, #4]
    e514:	4619      	mov	r1, r3
    e516:	68f8      	ldr	r0, [r7, #12]
    e518:	f7ff f98a 	bl	d830 <mp_obj_print_helper>
        mp_print_str(print, ": ");
    e51c:	4910      	ldr	r1, [pc, #64]	; (e560 <dict_print+0x94>)
    e51e:	68f8      	ldr	r0, [r7, #12]
    e520:	f7f3 f9ba 	bl	1898 <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    e524:	697b      	ldr	r3, [r7, #20]
    e526:	685b      	ldr	r3, [r3, #4]
    e528:	687a      	ldr	r2, [r7, #4]
    e52a:	4619      	mov	r1, r3
    e52c:	68f8      	ldr	r0, [r7, #12]
    e52e:	f7ff f97f 	bl	d830 <mp_obj_print_helper>
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e532:	f107 0310 	add.w	r3, r7, #16
    e536:	4619      	mov	r1, r3
    e538:	69b8      	ldr	r0, [r7, #24]
    e53a:	f7ff ff9b 	bl	e474 <dict_iter_next>
    e53e:	6178      	str	r0, [r7, #20]
    e540:	697b      	ldr	r3, [r7, #20]
    e542:	2b00      	cmp	r3, #0
    e544:	d1d7      	bne.n	e4f6 <dict_print+0x2a>
    }
    mp_print_str(print, "}");
    e546:	4907      	ldr	r1, [pc, #28]	; (e564 <dict_print+0x98>)
    e548:	68f8      	ldr	r0, [r7, #12]
    e54a:	f7f3 f9a5 	bl	1898 <mp_print_str>
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_print_str(print, ")");
    }
}
    e54e:	bf00      	nop
    e550:	3720      	adds	r7, #32
    e552:	46bd      	mov	sp, r7
    e554:	bd80      	pop	{r7, pc}
    e556:	bf00      	nop
    e558:	0001fcf8 	.word	0x0001fcf8
    e55c:	0001fcfc 	.word	0x0001fcfc
    e560:	0001fd00 	.word	0x0001fd00
    e564:	0001fd04 	.word	0x0001fd04

0000e568 <dict_make_new>:

STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e568:	b580      	push	{r7, lr}
    e56a:	b08c      	sub	sp, #48	; 0x30
    e56c:	af00      	add	r7, sp, #0
    e56e:	60f8      	str	r0, [r7, #12]
    e570:	60b9      	str	r1, [r7, #8]
    e572:	607a      	str	r2, [r7, #4]
    e574:	603b      	str	r3, [r7, #0]
    mp_obj_t dict_out = mp_obj_new_dict(0);
    e576:	2000      	movs	r0, #0
    e578:	f000 fdbc 	bl	f0f4 <mp_obj_new_dict>
    e57c:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_dict_t *dict = MP_OBJ_TO_PTR(dict_out);
    e57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e580:	62bb      	str	r3, [r7, #40]	; 0x28
    dict->base.type = type;
    e582:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e584:	68fa      	ldr	r2, [r7, #12]
    e586:	601a      	str	r2, [r3, #0]
    #if MICROPY_PY_COLLECTIONS_ORDEREDDICT
    if (type == &mp_type_ordereddict) {
        dict->map.is_ordered = 1;
    }
    #endif
    if (n_args > 0 || n_kw > 0) {
    e588:	68bb      	ldr	r3, [r7, #8]
    e58a:	2b00      	cmp	r3, #0
    e58c:	d102      	bne.n	e594 <dict_make_new+0x2c>
    e58e:	687b      	ldr	r3, [r7, #4]
    e590:	2b00      	cmp	r3, #0
    e592:	d017      	beq.n	e5c4 <dict_make_new+0x5c>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    e594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e596:	623b      	str	r3, [r7, #32]
    e598:	683b      	ldr	r3, [r7, #0]
    e59a:	681b      	ldr	r3, [r3, #0]
    e59c:	627b      	str	r3, [r7, #36]	; 0x24
        mp_map_t kwargs;
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    e59e:	68bb      	ldr	r3, [r7, #8]
    e5a0:	009b      	lsls	r3, r3, #2
    e5a2:	683a      	ldr	r2, [r7, #0]
    e5a4:	441a      	add	r2, r3
    e5a6:	f107 0314 	add.w	r3, r7, #20
    e5aa:	6879      	ldr	r1, [r7, #4]
    e5ac:	4618      	mov	r0, r3
    e5ae:	f7fe fe9b 	bl	d2e8 <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    e5b2:	68bb      	ldr	r3, [r7, #8]
    e5b4:	3301      	adds	r3, #1
    e5b6:	f107 0214 	add.w	r2, r7, #20
    e5ba:	f107 0120 	add.w	r1, r7, #32
    e5be:	4618      	mov	r0, r3
    e5c0:	f000 faec 	bl	eb9c <dict_update>
    }
    return dict_out;
    e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e5c6:	4618      	mov	r0, r3
    e5c8:	3730      	adds	r7, #48	; 0x30
    e5ca:	46bd      	mov	sp, r7
    e5cc:	bd80      	pop	{r7, pc}
    e5ce:	bf00      	nop

0000e5d0 <dict_unary_op>:

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    e5d0:	b580      	push	{r7, lr}
    e5d2:	b084      	sub	sp, #16
    e5d4:	af00      	add	r7, sp, #0
    e5d6:	6078      	str	r0, [r7, #4]
    e5d8:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e5da:	683b      	ldr	r3, [r7, #0]
    e5dc:	60fb      	str	r3, [r7, #12]
    switch (op) {
    e5de:	687b      	ldr	r3, [r7, #4]
    e5e0:	2b04      	cmp	r3, #4
    e5e2:	d002      	beq.n	e5ea <dict_unary_op+0x1a>
    e5e4:	2b05      	cmp	r3, #5
    e5e6:	d00e      	beq.n	e606 <dict_unary_op+0x36>
    e5e8:	e015      	b.n	e616 <dict_unary_op+0x46>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    e5ea:	68fb      	ldr	r3, [r7, #12]
    e5ec:	685b      	ldr	r3, [r3, #4]
    e5ee:	f023 0307 	bic.w	r3, r3, #7
    e5f2:	2b00      	cmp	r3, #0
    e5f4:	bf14      	ite	ne
    e5f6:	2301      	movne	r3, #1
    e5f8:	2300      	moveq	r3, #0
    e5fa:	b2db      	uxtb	r3, r3
    e5fc:	4618      	mov	r0, r3
    e5fe:	f7ff ff25 	bl	e44c <mp_obj_new_bool>
    e602:	4603      	mov	r3, r0
    e604:	e008      	b.n	e618 <dict_unary_op+0x48>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    e606:	68fb      	ldr	r3, [r7, #12]
    e608:	685b      	ldr	r3, [r3, #4]
    e60a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e60e:	005b      	lsls	r3, r3, #1
    e610:	f043 0301 	orr.w	r3, r3, #1
    e614:	e000      	b.n	e618 <dict_unary_op+0x48>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    e616:	2300      	movs	r3, #0
    }
}
    e618:	4618      	mov	r0, r3
    e61a:	3710      	adds	r7, #16
    e61c:	46bd      	mov	sp, r7
    e61e:	bd80      	pop	{r7, pc}

0000e620 <dict_binary_op>:

STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e620:	b580      	push	{r7, lr}
    e622:	b08a      	sub	sp, #40	; 0x28
    e624:	af00      	add	r7, sp, #0
    e626:	60f8      	str	r0, [r7, #12]
    e628:	60b9      	str	r1, [r7, #8]
    e62a:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *o = MP_OBJ_TO_PTR(lhs_in);
    e62c:	68bb      	ldr	r3, [r7, #8]
    e62e:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
    e630:	68fb      	ldr	r3, [r7, #12]
    e632:	2b02      	cmp	r3, #2
    e634:	d014      	beq.n	e660 <dict_binary_op+0x40>
    e636:	2b22      	cmp	r3, #34	; 0x22
    e638:	d15a      	bne.n	e6f0 <dict_binary_op+0xd0>
        case MP_BINARY_OP_CONTAINS: {
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e63c:	3304      	adds	r3, #4
    e63e:	2200      	movs	r2, #0
    e640:	6879      	ldr	r1, [r7, #4]
    e642:	4618      	mov	r0, r3
    e644:	f7fe ff18 	bl	d478 <mp_map_lookup>
    e648:	6238      	str	r0, [r7, #32]
            return mp_obj_new_bool(elem != NULL);
    e64a:	6a3b      	ldr	r3, [r7, #32]
    e64c:	2b00      	cmp	r3, #0
    e64e:	bf14      	ite	ne
    e650:	2301      	movne	r3, #1
    e652:	2300      	moveq	r3, #0
    e654:	b2db      	uxtb	r3, r3
    e656:	4618      	mov	r0, r3
    e658:	f7ff fef8 	bl	e44c <mp_obj_new_bool>
    e65c:	4603      	mov	r3, r0
    e65e:	e048      	b.n	e6f2 <dict_binary_op+0xd2>
                    }
                }
                return e1 == NULL && e2 == NULL ? mp_const_true : mp_const_false;
            } else
            #endif
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    e660:	6878      	ldr	r0, [r7, #4]
    e662:	f7ff febf 	bl	e3e4 <MP_OBJ_IS_OBJ>
    e666:	4603      	mov	r3, r0
    e668:	2b00      	cmp	r3, #0
    e66a:	d03f      	beq.n	e6ec <dict_binary_op+0xcc>
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	681b      	ldr	r3, [r3, #0]
    e670:	4a22      	ldr	r2, [pc, #136]	; (e6fc <dict_binary_op+0xdc>)
    e672:	4293      	cmp	r3, r2
    e674:	d13a      	bne.n	e6ec <dict_binary_op+0xcc>
                mp_obj_dict_t *rhs = MP_OBJ_TO_PTR(rhs_in);
    e676:	687b      	ldr	r3, [r7, #4]
    e678:	61fb      	str	r3, [r7, #28]
                if (o->map.used != rhs->map.used) {
    e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e67c:	685b      	ldr	r3, [r3, #4]
    e67e:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    e682:	69fb      	ldr	r3, [r7, #28]
    e684:	685b      	ldr	r3, [r3, #4]
    e686:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e68a:	429a      	cmp	r2, r3
    e68c:	d001      	beq.n	e692 <dict_binary_op+0x72>
                    return mp_const_false;
    e68e:	4b1c      	ldr	r3, [pc, #112]	; (e700 <dict_binary_op+0xe0>)
    e690:	e02f      	b.n	e6f2 <dict_binary_op+0xd2>
                }

                size_t cur = 0;
    e692:	2300      	movs	r3, #0
    e694:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *next = NULL;
    e696:	2300      	movs	r3, #0
    e698:	61bb      	str	r3, [r7, #24]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e69a:	e01b      	b.n	e6d4 <dict_binary_op+0xb4>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    e69c:	69fb      	ldr	r3, [r7, #28]
    e69e:	1d18      	adds	r0, r3, #4
    e6a0:	69bb      	ldr	r3, [r7, #24]
    e6a2:	681b      	ldr	r3, [r3, #0]
    e6a4:	2200      	movs	r2, #0
    e6a6:	4619      	mov	r1, r3
    e6a8:	f7fe fee6 	bl	d478 <mp_map_lookup>
    e6ac:	6178      	str	r0, [r7, #20]
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    e6ae:	697b      	ldr	r3, [r7, #20]
    e6b0:	2b00      	cmp	r3, #0
    e6b2:	d00d      	beq.n	e6d0 <dict_binary_op+0xb0>
    e6b4:	69bb      	ldr	r3, [r7, #24]
    e6b6:	685a      	ldr	r2, [r3, #4]
    e6b8:	697b      	ldr	r3, [r7, #20]
    e6ba:	685b      	ldr	r3, [r3, #4]
    e6bc:	4619      	mov	r1, r3
    e6be:	4610      	mov	r0, r2
    e6c0:	f7ff f9d8 	bl	da74 <mp_obj_equal>
    e6c4:	4603      	mov	r3, r0
    e6c6:	f083 0301 	eor.w	r3, r3, #1
    e6ca:	b2db      	uxtb	r3, r3
    e6cc:	2b00      	cmp	r3, #0
    e6ce:	d001      	beq.n	e6d4 <dict_binary_op+0xb4>
                        return mp_const_false;
    e6d0:	4b0b      	ldr	r3, [pc, #44]	; (e700 <dict_binary_op+0xe0>)
    e6d2:	e00e      	b.n	e6f2 <dict_binary_op+0xd2>
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e6d4:	f107 0310 	add.w	r3, r7, #16
    e6d8:	4619      	mov	r1, r3
    e6da:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e6dc:	f7ff feca 	bl	e474 <dict_iter_next>
    e6e0:	61b8      	str	r0, [r7, #24]
    e6e2:	69bb      	ldr	r3, [r7, #24]
    e6e4:	2b00      	cmp	r3, #0
    e6e6:	d1d9      	bne.n	e69c <dict_binary_op+0x7c>
                    }
                }
                return mp_const_true;
    e6e8:	4b06      	ldr	r3, [pc, #24]	; (e704 <dict_binary_op+0xe4>)
    e6ea:	e002      	b.n	e6f2 <dict_binary_op+0xd2>
            } else {
                // dict is not equal to instance of any other type
                return mp_const_false;
    e6ec:	4b04      	ldr	r3, [pc, #16]	; (e700 <dict_binary_op+0xe0>)
    e6ee:	e000      	b.n	e6f2 <dict_binary_op+0xd2>
            }
        }
        default:
            // op not supported
            return MP_OBJ_NULL;
    e6f0:	2300      	movs	r3, #0
    }
}
    e6f2:	4618      	mov	r0, r3
    e6f4:	3728      	adds	r7, #40	; 0x28
    e6f6:	46bd      	mov	sp, r7
    e6f8:	bd80      	pop	{r7, pc}
    e6fa:	bf00      	nop
    e6fc:	000200e0 	.word	0x000200e0
    e700:	0001fc34 	.word	0x0001fc34
    e704:	0001fc3c 	.word	0x0001fc3c

0000e708 <mp_obj_dict_get>:

// TODO: Make sure this is inlined in dict_subscr() below.
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    e708:	b580      	push	{r7, lr}
    e70a:	b084      	sub	sp, #16
    e70c:	af00      	add	r7, sp, #0
    e70e:	6078      	str	r0, [r7, #4]
    e710:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e712:	687b      	ldr	r3, [r7, #4]
    e714:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e716:	68fb      	ldr	r3, [r7, #12]
    e718:	3304      	adds	r3, #4
    e71a:	2200      	movs	r2, #0
    e71c:	6839      	ldr	r1, [r7, #0]
    e71e:	4618      	mov	r0, r3
    e720:	f7fe feaa 	bl	d478 <mp_map_lookup>
    e724:	60b8      	str	r0, [r7, #8]
    if (elem == NULL) {
    e726:	68bb      	ldr	r3, [r7, #8]
    e728:	2b00      	cmp	r3, #0
    e72a:	d107      	bne.n	e73c <mp_obj_dict_get+0x34>
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e72c:	6839      	ldr	r1, [r7, #0]
    e72e:	4806      	ldr	r0, [pc, #24]	; (e748 <mp_obj_dict_get+0x40>)
    e730:	f000 feca 	bl	f4c8 <mp_obj_new_exception_arg1>
    e734:	4603      	mov	r3, r0
    e736:	4618      	mov	r0, r3
    e738:	f7f1 fdd2 	bl	2e0 <nlr_jump>
    } else {
        return elem->value;
    e73c:	68bb      	ldr	r3, [r7, #8]
    e73e:	685b      	ldr	r3, [r3, #4]
    }
}
    e740:	4618      	mov	r0, r3
    e742:	3710      	adds	r7, #16
    e744:	46bd      	mov	sp, r7
    e746:	bd80      	pop	{r7, pc}
    e748:	00020568 	.word	0x00020568

0000e74c <dict_subscr>:

STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    e74c:	b580      	push	{r7, lr}
    e74e:	b086      	sub	sp, #24
    e750:	af00      	add	r7, sp, #0
    e752:	60f8      	str	r0, [r7, #12]
    e754:	60b9      	str	r1, [r7, #8]
    e756:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
    e758:	687b      	ldr	r3, [r7, #4]
    e75a:	2b00      	cmp	r3, #0
    e75c:	d105      	bne.n	e76a <dict_subscr+0x1e>
        // delete
        mp_obj_dict_delete(self_in, index);
    e75e:	68b9      	ldr	r1, [r7, #8]
    e760:	68f8      	ldr	r0, [r7, #12]
    e762:	f000 fd21 	bl	f1a8 <mp_obj_dict_delete>
        return mp_const_none;
    e766:	4b13      	ldr	r3, [pc, #76]	; (e7b4 <dict_subscr+0x68>)
    e768:	e020      	b.n	e7ac <dict_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
    e76a:	687b      	ldr	r3, [r7, #4]
    e76c:	2b08      	cmp	r3, #8
    e76e:	d117      	bne.n	e7a0 <dict_subscr+0x54>
        // load
        mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e770:	68fb      	ldr	r3, [r7, #12]
    e772:	617b      	str	r3, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e774:	697b      	ldr	r3, [r7, #20]
    e776:	3304      	adds	r3, #4
    e778:	2200      	movs	r2, #0
    e77a:	68b9      	ldr	r1, [r7, #8]
    e77c:	4618      	mov	r0, r3
    e77e:	f7fe fe7b 	bl	d478 <mp_map_lookup>
    e782:	6138      	str	r0, [r7, #16]
        if (elem == NULL) {
    e784:	693b      	ldr	r3, [r7, #16]
    e786:	2b00      	cmp	r3, #0
    e788:	d107      	bne.n	e79a <dict_subscr+0x4e>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e78a:	68b9      	ldr	r1, [r7, #8]
    e78c:	480a      	ldr	r0, [pc, #40]	; (e7b8 <dict_subscr+0x6c>)
    e78e:	f000 fe9b 	bl	f4c8 <mp_obj_new_exception_arg1>
    e792:	4603      	mov	r3, r0
    e794:	4618      	mov	r0, r3
    e796:	f7f1 fda3 	bl	2e0 <nlr_jump>
        } else {
            return elem->value;
    e79a:	693b      	ldr	r3, [r7, #16]
    e79c:	685b      	ldr	r3, [r3, #4]
    e79e:	e005      	b.n	e7ac <dict_subscr+0x60>
        }
    } else {
        // store
        mp_obj_dict_store(self_in, index, value);
    e7a0:	687a      	ldr	r2, [r7, #4]
    e7a2:	68b9      	ldr	r1, [r7, #8]
    e7a4:	68f8      	ldr	r0, [r7, #12]
    e7a6:	f000 fcc7 	bl	f138 <mp_obj_dict_store>
        return mp_const_none;
    e7aa:	4b02      	ldr	r3, [pc, #8]	; (e7b4 <dict_subscr+0x68>)
    }
}
    e7ac:	4618      	mov	r0, r3
    e7ae:	3718      	adds	r7, #24
    e7b0:	46bd      	mov	sp, r7
    e7b2:	bd80      	pop	{r7, pc}
    e7b4:	00021480 	.word	0x00021480
    e7b8:	00020568 	.word	0x00020568

0000e7bc <mp_ensure_not_fixed>:

/******************************************************************************/
/* dict methods                                                               */

STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    e7bc:	b580      	push	{r7, lr}
    e7be:	b082      	sub	sp, #8
    e7c0:	af00      	add	r7, sp, #0
    e7c2:	6078      	str	r0, [r7, #4]
    if (dict->map.is_fixed) {
    e7c4:	687b      	ldr	r3, [r7, #4]
    e7c6:	791b      	ldrb	r3, [r3, #4]
    e7c8:	f003 0302 	and.w	r3, r3, #2
    e7cc:	b2db      	uxtb	r3, r3
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d002      	beq.n	e7d8 <mp_ensure_not_fixed+0x1c>
        mp_raise_TypeError(NULL);
    e7d2:	2000      	movs	r0, #0
    e7d4:	f7fe fbe0 	bl	cf98 <mp_raise_TypeError>
    }
}
    e7d8:	bf00      	nop
    e7da:	3708      	adds	r7, #8
    e7dc:	46bd      	mov	sp, r7
    e7de:	bd80      	pop	{r7, pc}

0000e7e0 <dict_clear>:

STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    e7e0:	b580      	push	{r7, lr}
    e7e2:	b084      	sub	sp, #16
    e7e4:	af00      	add	r7, sp, #0
    e7e6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e7e8:	6878      	ldr	r0, [r7, #4]
    e7ea:	f7ff fdfb 	bl	e3e4 <MP_OBJ_IS_OBJ>
    e7ee:	4603      	mov	r3, r0
    e7f0:	f083 0301 	eor.w	r3, r3, #1
    e7f4:	b2db      	uxtb	r3, r3
    e7f6:	2b00      	cmp	r3, #0
    e7f8:	d105      	bne.n	e806 <dict_clear+0x26>
    e7fa:	687b      	ldr	r3, [r7, #4]
    e7fc:	681b      	ldr	r3, [r3, #0]
    e7fe:	68db      	ldr	r3, [r3, #12]
    e800:	4a0b      	ldr	r2, [pc, #44]	; (e830 <dict_clear+0x50>)
    e802:	4293      	cmp	r3, r2
    e804:	d005      	beq.n	e812 <dict_clear+0x32>
    e806:	4b0b      	ldr	r3, [pc, #44]	; (e834 <dict_clear+0x54>)
    e808:	4a0b      	ldr	r2, [pc, #44]	; (e838 <dict_clear+0x58>)
    e80a:	21cd      	movs	r1, #205	; 0xcd
    e80c:	480b      	ldr	r0, [pc, #44]	; (e83c <dict_clear+0x5c>)
    e80e:	f00c fdc5 	bl	1b39c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e812:	687b      	ldr	r3, [r7, #4]
    e814:	60fb      	str	r3, [r7, #12]
    mp_ensure_not_fixed(self);
    e816:	68f8      	ldr	r0, [r7, #12]
    e818:	f7ff ffd0 	bl	e7bc <mp_ensure_not_fixed>

    mp_map_clear(&self->map);
    e81c:	68fb      	ldr	r3, [r7, #12]
    e81e:	3304      	adds	r3, #4
    e820:	4618      	mov	r0, r3
    e822:	f7fe fda7 	bl	d374 <mp_map_clear>

    return mp_const_none;
    e826:	4b06      	ldr	r3, [pc, #24]	; (e840 <dict_clear+0x60>)
}
    e828:	4618      	mov	r0, r3
    e82a:	3710      	adds	r7, #16
    e82c:	46bd      	mov	sp, r7
    e82e:	bd80      	pop	{r7, pc}
    e830:	0000e569 	.word	0x0000e569
    e834:	0001fd08 	.word	0x0001fd08
    e838:	0002011c 	.word	0x0002011c
    e83c:	0001fd68 	.word	0x0001fd68
    e840:	00021480 	.word	0x00021480

0000e844 <dict_copy>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_clear_obj, dict_clear);

STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    e844:	b580      	push	{r7, lr}
    e846:	b086      	sub	sp, #24
    e848:	af00      	add	r7, sp, #0
    e84a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e84c:	6878      	ldr	r0, [r7, #4]
    e84e:	f7ff fdc9 	bl	e3e4 <MP_OBJ_IS_OBJ>
    e852:	4603      	mov	r3, r0
    e854:	f083 0301 	eor.w	r3, r3, #1
    e858:	b2db      	uxtb	r3, r3
    e85a:	2b00      	cmp	r3, #0
    e85c:	d105      	bne.n	e86a <dict_copy+0x26>
    e85e:	687b      	ldr	r3, [r7, #4]
    e860:	681b      	ldr	r3, [r3, #0]
    e862:	68db      	ldr	r3, [r3, #12]
    e864:	4a23      	ldr	r2, [pc, #140]	; (e8f4 <dict_copy+0xb0>)
    e866:	4293      	cmp	r3, r2
    e868:	d005      	beq.n	e876 <dict_copy+0x32>
    e86a:	4b23      	ldr	r3, [pc, #140]	; (e8f8 <dict_copy+0xb4>)
    e86c:	4a23      	ldr	r2, [pc, #140]	; (e8fc <dict_copy+0xb8>)
    e86e:	21d8      	movs	r1, #216	; 0xd8
    e870:	4823      	ldr	r0, [pc, #140]	; (e900 <dict_copy+0xbc>)
    e872:	f00c fd93 	bl	1b39c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e876:	687b      	ldr	r3, [r7, #4]
    e878:	617b      	str	r3, [r7, #20]
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    e87a:	697b      	ldr	r3, [r7, #20]
    e87c:	689b      	ldr	r3, [r3, #8]
    e87e:	4618      	mov	r0, r3
    e880:	f000 fc38 	bl	f0f4 <mp_obj_new_dict>
    e884:	6138      	str	r0, [r7, #16]
    mp_obj_dict_t *other = MP_OBJ_TO_PTR(other_out);
    e886:	693b      	ldr	r3, [r7, #16]
    e888:	60fb      	str	r3, [r7, #12]
    other->base.type = self->base.type;
    e88a:	697b      	ldr	r3, [r7, #20]
    e88c:	681a      	ldr	r2, [r3, #0]
    e88e:	68fb      	ldr	r3, [r7, #12]
    e890:	601a      	str	r2, [r3, #0]
    other->map.used = self->map.used;
    e892:	697b      	ldr	r3, [r7, #20]
    e894:	685b      	ldr	r3, [r3, #4]
    e896:	f3c3 01dc 	ubfx	r1, r3, #3, #29
    e89a:	68fa      	ldr	r2, [r7, #12]
    e89c:	6853      	ldr	r3, [r2, #4]
    e89e:	f361 03df 	bfi	r3, r1, #3, #29
    e8a2:	6053      	str	r3, [r2, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    e8a4:	697b      	ldr	r3, [r7, #20]
    e8a6:	791b      	ldrb	r3, [r3, #4]
    e8a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
    e8ac:	b2d9      	uxtb	r1, r3
    e8ae:	68fa      	ldr	r2, [r7, #12]
    e8b0:	7913      	ldrb	r3, [r2, #4]
    e8b2:	f361 0300 	bfi	r3, r1, #0, #1
    e8b6:	7113      	strb	r3, [r2, #4]
    other->map.is_fixed = 0;
    e8b8:	68fa      	ldr	r2, [r7, #12]
    e8ba:	7913      	ldrb	r3, [r2, #4]
    e8bc:	f36f 0341 	bfc	r3, #1, #1
    e8c0:	7113      	strb	r3, [r2, #4]
    other->map.is_ordered = self->map.is_ordered;
    e8c2:	697b      	ldr	r3, [r7, #20]
    e8c4:	791b      	ldrb	r3, [r3, #4]
    e8c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e8ca:	b2d9      	uxtb	r1, r3
    e8cc:	68fa      	ldr	r2, [r7, #12]
    e8ce:	7913      	ldrb	r3, [r2, #4]
    e8d0:	f361 0382 	bfi	r3, r1, #2, #1
    e8d4:	7113      	strb	r3, [r2, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    e8d6:	68fb      	ldr	r3, [r7, #12]
    e8d8:	68d8      	ldr	r0, [r3, #12]
    e8da:	697b      	ldr	r3, [r7, #20]
    e8dc:	68d9      	ldr	r1, [r3, #12]
    e8de:	697b      	ldr	r3, [r7, #20]
    e8e0:	689b      	ldr	r3, [r3, #8]
    e8e2:	00db      	lsls	r3, r3, #3
    e8e4:	461a      	mov	r2, r3
    e8e6:	f00d fa15 	bl	1bd14 <memcpy>
    return other_out;
    e8ea:	693b      	ldr	r3, [r7, #16]
}
    e8ec:	4618      	mov	r0, r3
    e8ee:	3718      	adds	r7, #24
    e8f0:	46bd      	mov	sp, r7
    e8f2:	bd80      	pop	{r7, pc}
    e8f4:	0000e569 	.word	0x0000e569
    e8f8:	0001fd08 	.word	0x0001fd08
    e8fc:	00020128 	.word	0x00020128
    e900:	0001fd68 	.word	0x0001fd68

0000e904 <dict_fromkeys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_copy_obj, dict_copy);

// this is a classmethod
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    e904:	b580      	push	{r7, lr}
    e906:	b088      	sub	sp, #32
    e908:	af00      	add	r7, sp, #0
    e90a:	6078      	str	r0, [r7, #4]
    e90c:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(args[1], NULL);
    e90e:	683b      	ldr	r3, [r7, #0]
    e910:	3304      	adds	r3, #4
    e912:	681b      	ldr	r3, [r3, #0]
    e914:	2100      	movs	r1, #0
    e916:	4618      	mov	r0, r3
    e918:	f7fd fff0 	bl	c8fc <mp_getiter>
    e91c:	6178      	str	r0, [r7, #20]
    mp_obj_t value = mp_const_none;
    e91e:	4b1c      	ldr	r3, [pc, #112]	; (e990 <dict_fromkeys+0x8c>)
    e920:	61fb      	str	r3, [r7, #28]
    mp_obj_t next = MP_OBJ_NULL;
    e922:	2300      	movs	r3, #0
    e924:	613b      	str	r3, [r7, #16]

    if (n_args > 2) {
    e926:	687b      	ldr	r3, [r7, #4]
    e928:	2b02      	cmp	r3, #2
    e92a:	d902      	bls.n	e932 <dict_fromkeys+0x2e>
        value = args[2];
    e92c:	683b      	ldr	r3, [r7, #0]
    e92e:	689b      	ldr	r3, [r3, #8]
    e930:	61fb      	str	r3, [r7, #28]
    }

    // optimisation to allocate result based on len of argument
    mp_obj_t self_out;
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    e932:	683b      	ldr	r3, [r7, #0]
    e934:	3304      	adds	r3, #4
    e936:	681b      	ldr	r3, [r3, #0]
    e938:	4618      	mov	r0, r3
    e93a:	f7ff fa9d 	bl	de78 <mp_obj_len_maybe>
    e93e:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    e940:	68fb      	ldr	r3, [r7, #12]
    e942:	2b00      	cmp	r3, #0
    e944:	d104      	bne.n	e950 <dict_fromkeys+0x4c>
        /* object's type doesn't have a __len__ slot */
        self_out = mp_obj_new_dict(0);
    e946:	2000      	movs	r0, #0
    e948:	f000 fbd4 	bl	f0f4 <mp_obj_new_dict>
    e94c:	61b8      	str	r0, [r7, #24]
    e94e:	e005      	b.n	e95c <dict_fromkeys+0x58>
    } else {
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    e950:	68fb      	ldr	r3, [r7, #12]
    e952:	105b      	asrs	r3, r3, #1
    e954:	4618      	mov	r0, r3
    e956:	f000 fbcd 	bl	f0f4 <mp_obj_new_dict>
    e95a:	61b8      	str	r0, [r7, #24]
    }

    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_out);
    e95c:	69bb      	ldr	r3, [r7, #24]
    e95e:	60bb      	str	r3, [r7, #8]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e960:	e009      	b.n	e976 <dict_fromkeys+0x72>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    e962:	68bb      	ldr	r3, [r7, #8]
    e964:	3304      	adds	r3, #4
    e966:	2201      	movs	r2, #1
    e968:	6939      	ldr	r1, [r7, #16]
    e96a:	4618      	mov	r0, r3
    e96c:	f7fe fd84 	bl	d478 <mp_map_lookup>
    e970:	4602      	mov	r2, r0
    e972:	69fb      	ldr	r3, [r7, #28]
    e974:	6053      	str	r3, [r2, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e976:	6978      	ldr	r0, [r7, #20]
    e978:	f7fe f842 	bl	ca00 <mp_iternext>
    e97c:	6138      	str	r0, [r7, #16]
    e97e:	693b      	ldr	r3, [r7, #16]
    e980:	2b04      	cmp	r3, #4
    e982:	d1ee      	bne.n	e962 <dict_fromkeys+0x5e>
    }

    return self_out;
    e984:	69bb      	ldr	r3, [r7, #24]
}
    e986:	4618      	mov	r0, r3
    e988:	3720      	adds	r7, #32
    e98a:	46bd      	mov	sp, r7
    e98c:	bd80      	pop	{r7, pc}
    e98e:	bf00      	nop
    e990:	00021480 	.word	0x00021480

0000e994 <dict_get_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_fromkeys_fun_obj, 2, 3, dict_fromkeys);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(dict_fromkeys_obj, MP_ROM_PTR(&dict_fromkeys_fun_obj));

STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    e994:	b580      	push	{r7, lr}
    e996:	b088      	sub	sp, #32
    e998:	af00      	add	r7, sp, #0
    e99a:	60f8      	str	r0, [r7, #12]
    e99c:	60b9      	str	r1, [r7, #8]
    e99e:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    e9a0:	68bb      	ldr	r3, [r7, #8]
    e9a2:	681b      	ldr	r3, [r3, #0]
    e9a4:	4618      	mov	r0, r3
    e9a6:	f7ff fd1d 	bl	e3e4 <MP_OBJ_IS_OBJ>
    e9aa:	4603      	mov	r3, r0
    e9ac:	f083 0301 	eor.w	r3, r3, #1
    e9b0:	b2db      	uxtb	r3, r3
    e9b2:	2b00      	cmp	r3, #0
    e9b4:	d106      	bne.n	e9c4 <dict_get_helper+0x30>
    e9b6:	68bb      	ldr	r3, [r7, #8]
    e9b8:	681b      	ldr	r3, [r3, #0]
    e9ba:	681b      	ldr	r3, [r3, #0]
    e9bc:	68db      	ldr	r3, [r3, #12]
    e9be:	4a28      	ldr	r2, [pc, #160]	; (ea60 <dict_get_helper+0xcc>)
    e9c0:	4293      	cmp	r3, r2
    e9c2:	d006      	beq.n	e9d2 <dict_get_helper+0x3e>
    e9c4:	4b27      	ldr	r3, [pc, #156]	; (ea64 <dict_get_helper+0xd0>)
    e9c6:	4a28      	ldr	r2, [pc, #160]	; (ea68 <dict_get_helper+0xd4>)
    e9c8:	f240 1105 	movw	r1, #261	; 0x105
    e9cc:	4827      	ldr	r0, [pc, #156]	; (ea6c <dict_get_helper+0xd8>)
    e9ce:	f00c fce5 	bl	1b39c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    e9d2:	68bb      	ldr	r3, [r7, #8]
    e9d4:	681b      	ldr	r3, [r3, #0]
    e9d6:	61bb      	str	r3, [r7, #24]
    if (lookup_kind != MP_MAP_LOOKUP) {
    e9d8:	687b      	ldr	r3, [r7, #4]
    e9da:	2b00      	cmp	r3, #0
    e9dc:	d002      	beq.n	e9e4 <dict_get_helper+0x50>
        mp_ensure_not_fixed(self);
    e9de:	69b8      	ldr	r0, [r7, #24]
    e9e0:	f7ff feec 	bl	e7bc <mp_ensure_not_fixed>
    }
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    e9e4:	69bb      	ldr	r3, [r7, #24]
    e9e6:	1d18      	adds	r0, r3, #4
    e9e8:	68bb      	ldr	r3, [r7, #8]
    e9ea:	3304      	adds	r3, #4
    e9ec:	681b      	ldr	r3, [r3, #0]
    e9ee:	687a      	ldr	r2, [r7, #4]
    e9f0:	4619      	mov	r1, r3
    e9f2:	f7fe fd41 	bl	d478 <mp_map_lookup>
    e9f6:	6178      	str	r0, [r7, #20]
    mp_obj_t value;
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    e9f8:	697b      	ldr	r3, [r7, #20]
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	d003      	beq.n	ea06 <dict_get_helper+0x72>
    e9fe:	697b      	ldr	r3, [r7, #20]
    ea00:	685b      	ldr	r3, [r3, #4]
    ea02:	2b00      	cmp	r3, #0
    ea04:	d11d      	bne.n	ea42 <dict_get_helper+0xae>
        if (n_args == 2) {
    ea06:	68fb      	ldr	r3, [r7, #12]
    ea08:	2b02      	cmp	r3, #2
    ea0a:	d110      	bne.n	ea2e <dict_get_helper+0x9a>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    ea0c:	687b      	ldr	r3, [r7, #4]
    ea0e:	2b02      	cmp	r3, #2
    ea10:	d10a      	bne.n	ea28 <dict_get_helper+0x94>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    ea12:	68bb      	ldr	r3, [r7, #8]
    ea14:	3304      	adds	r3, #4
    ea16:	681b      	ldr	r3, [r3, #0]
    ea18:	4619      	mov	r1, r3
    ea1a:	4815      	ldr	r0, [pc, #84]	; (ea70 <dict_get_helper+0xdc>)
    ea1c:	f000 fd54 	bl	f4c8 <mp_obj_new_exception_arg1>
    ea20:	4603      	mov	r3, r0
    ea22:	4618      	mov	r0, r3
    ea24:	f7f1 fc5c 	bl	2e0 <nlr_jump>
            } else {
                value = mp_const_none;
    ea28:	4b12      	ldr	r3, [pc, #72]	; (ea74 <dict_get_helper+0xe0>)
    ea2a:	61fb      	str	r3, [r7, #28]
    ea2c:	e002      	b.n	ea34 <dict_get_helper+0xa0>
            }
        } else {
            value = args[2];
    ea2e:	68bb      	ldr	r3, [r7, #8]
    ea30:	689b      	ldr	r3, [r3, #8]
    ea32:	61fb      	str	r3, [r7, #28]
        }
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    ea34:	687b      	ldr	r3, [r7, #4]
    ea36:	2b01      	cmp	r3, #1
    ea38:	d10c      	bne.n	ea54 <dict_get_helper+0xc0>
            elem->value = value;
    ea3a:	697b      	ldr	r3, [r7, #20]
    ea3c:	69fa      	ldr	r2, [r7, #28]
    ea3e:	605a      	str	r2, [r3, #4]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    ea40:	e008      	b.n	ea54 <dict_get_helper+0xc0>
        }
    } else {
        value = elem->value;
    ea42:	697b      	ldr	r3, [r7, #20]
    ea44:	685b      	ldr	r3, [r3, #4]
    ea46:	61fb      	str	r3, [r7, #28]
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    ea48:	687b      	ldr	r3, [r7, #4]
    ea4a:	2b02      	cmp	r3, #2
    ea4c:	d102      	bne.n	ea54 <dict_get_helper+0xc0>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    ea4e:	697b      	ldr	r3, [r7, #20]
    ea50:	2200      	movs	r2, #0
    ea52:	605a      	str	r2, [r3, #4]
        }
    }
    return value;
    ea54:	69fb      	ldr	r3, [r7, #28]
}
    ea56:	4618      	mov	r0, r3
    ea58:	3720      	adds	r7, #32
    ea5a:	46bd      	mov	sp, r7
    ea5c:	bd80      	pop	{r7, pc}
    ea5e:	bf00      	nop
    ea60:	0000e569 	.word	0x0000e569
    ea64:	0001fda0 	.word	0x0001fda0
    ea68:	00020134 	.word	0x00020134
    ea6c:	0001fd68 	.word	0x0001fd68
    ea70:	00020568 	.word	0x00020568
    ea74:	00021480 	.word	0x00021480

0000ea78 <dict_get>:

STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    ea78:	b580      	push	{r7, lr}
    ea7a:	b082      	sub	sp, #8
    ea7c:	af00      	add	r7, sp, #0
    ea7e:	6078      	str	r0, [r7, #4]
    ea80:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    ea82:	2200      	movs	r2, #0
    ea84:	6839      	ldr	r1, [r7, #0]
    ea86:	6878      	ldr	r0, [r7, #4]
    ea88:	f7ff ff84 	bl	e994 <dict_get_helper>
    ea8c:	4603      	mov	r3, r0
}
    ea8e:	4618      	mov	r0, r3
    ea90:	3708      	adds	r7, #8
    ea92:	46bd      	mov	sp, r7
    ea94:	bd80      	pop	{r7, pc}
    ea96:	bf00      	nop

0000ea98 <dict_pop>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_get_obj, 2, 3, dict_get);

STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    ea98:	b580      	push	{r7, lr}
    ea9a:	b082      	sub	sp, #8
    ea9c:	af00      	add	r7, sp, #0
    ea9e:	6078      	str	r0, [r7, #4]
    eaa0:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    eaa2:	2202      	movs	r2, #2
    eaa4:	6839      	ldr	r1, [r7, #0]
    eaa6:	6878      	ldr	r0, [r7, #4]
    eaa8:	f7ff ff74 	bl	e994 <dict_get_helper>
    eaac:	4603      	mov	r3, r0
}
    eaae:	4618      	mov	r0, r3
    eab0:	3708      	adds	r7, #8
    eab2:	46bd      	mov	sp, r7
    eab4:	bd80      	pop	{r7, pc}
    eab6:	bf00      	nop

0000eab8 <dict_setdefault>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_pop_obj, 2, 3, dict_pop);

STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    eab8:	b580      	push	{r7, lr}
    eaba:	b082      	sub	sp, #8
    eabc:	af00      	add	r7, sp, #0
    eabe:	6078      	str	r0, [r7, #4]
    eac0:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    eac2:	2201      	movs	r2, #1
    eac4:	6839      	ldr	r1, [r7, #0]
    eac6:	6878      	ldr	r0, [r7, #4]
    eac8:	f7ff ff64 	bl	e994 <dict_get_helper>
    eacc:	4603      	mov	r3, r0
}
    eace:	4618      	mov	r0, r3
    ead0:	3708      	adds	r7, #8
    ead2:	46bd      	mov	sp, r7
    ead4:	bd80      	pop	{r7, pc}
    ead6:	bf00      	nop

0000ead8 <dict_popitem>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_setdefault_obj, 2, 3, dict_setdefault);

STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    ead8:	b580      	push	{r7, lr}
    eada:	b088      	sub	sp, #32
    eadc:	af00      	add	r7, sp, #0
    eade:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    eae0:	6878      	ldr	r0, [r7, #4]
    eae2:	f7ff fc7f 	bl	e3e4 <MP_OBJ_IS_OBJ>
    eae6:	4603      	mov	r3, r0
    eae8:	f083 0301 	eor.w	r3, r3, #1
    eaec:	b2db      	uxtb	r3, r3
    eaee:	2b00      	cmp	r3, #0
    eaf0:	d105      	bne.n	eafe <dict_popitem+0x26>
    eaf2:	687b      	ldr	r3, [r7, #4]
    eaf4:	681b      	ldr	r3, [r3, #0]
    eaf6:	68db      	ldr	r3, [r3, #12]
    eaf8:	4a22      	ldr	r2, [pc, #136]	; (eb84 <dict_popitem+0xac>)
    eafa:	4293      	cmp	r3, r2
    eafc:	d006      	beq.n	eb0c <dict_popitem+0x34>
    eafe:	4b22      	ldr	r3, [pc, #136]	; (eb88 <dict_popitem+0xb0>)
    eb00:	4a22      	ldr	r2, [pc, #136]	; (eb8c <dict_popitem+0xb4>)
    eb02:	f44f 7199 	mov.w	r1, #306	; 0x132
    eb06:	4822      	ldr	r0, [pc, #136]	; (eb90 <dict_popitem+0xb8>)
    eb08:	f00c fc48 	bl	1b39c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    eb0c:	687b      	ldr	r3, [r7, #4]
    eb0e:	61fb      	str	r3, [r7, #28]
    mp_ensure_not_fixed(self);
    eb10:	69f8      	ldr	r0, [r7, #28]
    eb12:	f7ff fe53 	bl	e7bc <mp_ensure_not_fixed>
    size_t cur = 0;
    eb16:	2300      	movs	r3, #0
    eb18:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    eb1a:	f107 0310 	add.w	r3, r7, #16
    eb1e:	4619      	mov	r1, r3
    eb20:	69f8      	ldr	r0, [r7, #28]
    eb22:	f7ff fca7 	bl	e474 <dict_iter_next>
    eb26:	61b8      	str	r0, [r7, #24]
    if (next == NULL) {
    eb28:	69bb      	ldr	r3, [r7, #24]
    eb2a:	2b00      	cmp	r3, #0
    eb2c:	d103      	bne.n	eb36 <dict_popitem+0x5e>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    eb2e:	4919      	ldr	r1, [pc, #100]	; (eb94 <dict_popitem+0xbc>)
    eb30:	4819      	ldr	r0, [pc, #100]	; (eb98 <dict_popitem+0xc0>)
    eb32:	f7fe fa0f 	bl	cf54 <mp_raise_msg>
    }
    self->map.used--;
    eb36:	69fb      	ldr	r3, [r7, #28]
    eb38:	685b      	ldr	r3, [r3, #4]
    eb3a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    eb3e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    eb42:	3b01      	subs	r3, #1
    eb44:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    eb48:	69f9      	ldr	r1, [r7, #28]
    eb4a:	684a      	ldr	r2, [r1, #4]
    eb4c:	f363 02df 	bfi	r2, r3, #3, #29
    eb50:	604a      	str	r2, [r1, #4]
    mp_obj_t items[] = {next->key, next->value};
    eb52:	69bb      	ldr	r3, [r7, #24]
    eb54:	681b      	ldr	r3, [r3, #0]
    eb56:	60bb      	str	r3, [r7, #8]
    eb58:	69bb      	ldr	r3, [r7, #24]
    eb5a:	685b      	ldr	r3, [r3, #4]
    eb5c:	60fb      	str	r3, [r7, #12]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    eb5e:	69bb      	ldr	r3, [r7, #24]
    eb60:	2208      	movs	r2, #8
    eb62:	601a      	str	r2, [r3, #0]
    next->value = MP_OBJ_NULL;
    eb64:	69bb      	ldr	r3, [r7, #24]
    eb66:	2200      	movs	r2, #0
    eb68:	605a      	str	r2, [r3, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    eb6a:	f107 0308 	add.w	r3, r7, #8
    eb6e:	4619      	mov	r1, r3
    eb70:	2002      	movs	r0, #2
    eb72:	f007 f917 	bl	15da4 <mp_obj_new_tuple>
    eb76:	6178      	str	r0, [r7, #20]

    return tuple;
    eb78:	697b      	ldr	r3, [r7, #20]
}
    eb7a:	4618      	mov	r0, r3
    eb7c:	3720      	adds	r7, #32
    eb7e:	46bd      	mov	sp, r7
    eb80:	bd80      	pop	{r7, pc}
    eb82:	bf00      	nop
    eb84:	0000e569 	.word	0x0000e569
    eb88:	0001fd08 	.word	0x0001fd08
    eb8c:	00020144 	.word	0x00020144
    eb90:	0001fd68 	.word	0x0001fd68
    eb94:	0001fe24 	.word	0x0001fe24
    eb98:	00020568 	.word	0x00020568

0000eb9c <dict_update>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_popitem_obj, dict_popitem);

STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    eb9c:	b580      	push	{r7, lr}
    eb9e:	b090      	sub	sp, #64	; 0x40
    eba0:	af02      	add	r7, sp, #8
    eba2:	60f8      	str	r0, [r7, #12]
    eba4:	60b9      	str	r1, [r7, #8]
    eba6:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    eba8:	68bb      	ldr	r3, [r7, #8]
    ebaa:	681b      	ldr	r3, [r3, #0]
    ebac:	4618      	mov	r0, r3
    ebae:	f7ff fc19 	bl	e3e4 <MP_OBJ_IS_OBJ>
    ebb2:	4603      	mov	r3, r0
    ebb4:	f083 0301 	eor.w	r3, r3, #1
    ebb8:	b2db      	uxtb	r3, r3
    ebba:	2b00      	cmp	r3, #0
    ebbc:	d106      	bne.n	ebcc <dict_update+0x30>
    ebbe:	68bb      	ldr	r3, [r7, #8]
    ebc0:	681b      	ldr	r3, [r3, #0]
    ebc2:	681b      	ldr	r3, [r3, #0]
    ebc4:	68db      	ldr	r3, [r3, #12]
    ebc6:	4a5d      	ldr	r2, [pc, #372]	; (ed3c <dict_update+0x1a0>)
    ebc8:	4293      	cmp	r3, r2
    ebca:	d006      	beq.n	ebda <dict_update+0x3e>
    ebcc:	4b5c      	ldr	r3, [pc, #368]	; (ed40 <dict_update+0x1a4>)
    ebce:	4a5d      	ldr	r2, [pc, #372]	; (ed44 <dict_update+0x1a8>)
    ebd0:	f240 1145 	movw	r1, #325	; 0x145
    ebd4:	485c      	ldr	r0, [pc, #368]	; (ed48 <dict_update+0x1ac>)
    ebd6:	f00c fbe1 	bl	1b39c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    ebda:	68bb      	ldr	r3, [r7, #8]
    ebdc:	681b      	ldr	r3, [r3, #0]
    ebde:	633b      	str	r3, [r7, #48]	; 0x30
    mp_ensure_not_fixed(self);
    ebe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ebe2:	f7ff fdeb 	bl	e7bc <mp_ensure_not_fixed>

    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    ebe6:	687b      	ldr	r3, [r7, #4]
    ebe8:	681b      	ldr	r3, [r3, #0]
    ebea:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ebee:	4619      	mov	r1, r3
    ebf0:	2301      	movs	r3, #1
    ebf2:	9300      	str	r3, [sp, #0]
    ebf4:	2302      	movs	r3, #2
    ebf6:	2201      	movs	r2, #1
    ebf8:	68f8      	ldr	r0, [r7, #12]
    ebfa:	f7fe f9f3 	bl	cfe4 <mp_arg_check_num>

    if (n_args == 2) {
    ebfe:	68fb      	ldr	r3, [r7, #12]
    ec00:	2b02      	cmp	r3, #2
    ec02:	d16f      	bne.n	ece4 <dict_update+0x148>
        // given a positional argument

        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    ec04:	68bb      	ldr	r3, [r7, #8]
    ec06:	3304      	adds	r3, #4
    ec08:	681b      	ldr	r3, [r3, #0]
    ec0a:	4618      	mov	r0, r3
    ec0c:	f7ff fbea 	bl	e3e4 <MP_OBJ_IS_OBJ>
    ec10:	4603      	mov	r3, r0
    ec12:	2b00      	cmp	r3, #0
    ec14:	d02d      	beq.n	ec72 <dict_update+0xd6>
    ec16:	68bb      	ldr	r3, [r7, #8]
    ec18:	3304      	adds	r3, #4
    ec1a:	681b      	ldr	r3, [r3, #0]
    ec1c:	681b      	ldr	r3, [r3, #0]
    ec1e:	68db      	ldr	r3, [r3, #12]
    ec20:	4a46      	ldr	r2, [pc, #280]	; (ed3c <dict_update+0x1a0>)
    ec22:	4293      	cmp	r3, r2
    ec24:	d125      	bne.n	ec72 <dict_update+0xd6>
            // update from other dictionary (make sure other is not self)
            if (args[1] != args[0]) {
    ec26:	68bb      	ldr	r3, [r7, #8]
    ec28:	3304      	adds	r3, #4
    ec2a:	681a      	ldr	r2, [r3, #0]
    ec2c:	68bb      	ldr	r3, [r7, #8]
    ec2e:	681b      	ldr	r3, [r3, #0]
    ec30:	429a      	cmp	r2, r3
    ec32:	d057      	beq.n	ece4 <dict_update+0x148>
                size_t cur = 0;
    ec34:	2300      	movs	r3, #0
    ec36:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *elem = NULL;
    ec38:	2300      	movs	r3, #0
    ec3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    ec3c:	e00b      	b.n	ec56 <dict_update+0xba>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    ec3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec40:	1d18      	adds	r0, r3, #4
    ec42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec44:	681b      	ldr	r3, [r3, #0]
    ec46:	2201      	movs	r2, #1
    ec48:	4619      	mov	r1, r3
    ec4a:	f7fe fc15 	bl	d478 <mp_map_lookup>
    ec4e:	4602      	mov	r2, r0
    ec50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec52:	685b      	ldr	r3, [r3, #4]
    ec54:	6053      	str	r3, [r2, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    ec56:	68bb      	ldr	r3, [r7, #8]
    ec58:	3304      	adds	r3, #4
    ec5a:	681b      	ldr	r3, [r3, #0]
    ec5c:	f107 0210 	add.w	r2, r7, #16
    ec60:	4611      	mov	r1, r2
    ec62:	4618      	mov	r0, r3
    ec64:	f7ff fc06 	bl	e474 <dict_iter_next>
    ec68:	62f8      	str	r0, [r7, #44]	; 0x2c
    ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec6c:	2b00      	cmp	r3, #0
    ec6e:	d1e6      	bne.n	ec3e <dict_update+0xa2>
            if (args[1] != args[0]) {
    ec70:	e038      	b.n	ece4 <dict_update+0x148>
                }
            }
        } else {
            // update from a generic iterable of pairs
            mp_obj_t iter = mp_getiter(args[1], NULL);
    ec72:	68bb      	ldr	r3, [r7, #8]
    ec74:	3304      	adds	r3, #4
    ec76:	681b      	ldr	r3, [r3, #0]
    ec78:	2100      	movs	r1, #0
    ec7a:	4618      	mov	r0, r3
    ec7c:	f7fd fe3e 	bl	c8fc <mp_getiter>
    ec80:	62b8      	str	r0, [r7, #40]	; 0x28
            mp_obj_t next = MP_OBJ_NULL;
    ec82:	2300      	movs	r3, #0
    ec84:	627b      	str	r3, [r7, #36]	; 0x24
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ec86:	e026      	b.n	ecd6 <dict_update+0x13a>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    ec88:	2100      	movs	r1, #0
    ec8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ec8c:	f7fd fe36 	bl	c8fc <mp_getiter>
    ec90:	6238      	str	r0, [r7, #32]
                mp_obj_t key = mp_iternext(inneriter);
    ec92:	6a38      	ldr	r0, [r7, #32]
    ec94:	f7fd feb4 	bl	ca00 <mp_iternext>
    ec98:	61f8      	str	r0, [r7, #28]
                mp_obj_t value = mp_iternext(inneriter);
    ec9a:	6a38      	ldr	r0, [r7, #32]
    ec9c:	f7fd feb0 	bl	ca00 <mp_iternext>
    eca0:	61b8      	str	r0, [r7, #24]
                mp_obj_t stop = mp_iternext(inneriter);
    eca2:	6a38      	ldr	r0, [r7, #32]
    eca4:	f7fd feac 	bl	ca00 <mp_iternext>
    eca8:	6178      	str	r0, [r7, #20]
                if (key == MP_OBJ_STOP_ITERATION
    ecaa:	69fb      	ldr	r3, [r7, #28]
    ecac:	2b04      	cmp	r3, #4
    ecae:	d005      	beq.n	ecbc <dict_update+0x120>
                    || value == MP_OBJ_STOP_ITERATION
    ecb0:	69bb      	ldr	r3, [r7, #24]
    ecb2:	2b04      	cmp	r3, #4
    ecb4:	d002      	beq.n	ecbc <dict_update+0x120>
                    || stop != MP_OBJ_STOP_ITERATION) {
    ecb6:	697b      	ldr	r3, [r7, #20]
    ecb8:	2b04      	cmp	r3, #4
    ecba:	d002      	beq.n	ecc2 <dict_update+0x126>
                    mp_raise_ValueError("dict update sequence has wrong length");
    ecbc:	4823      	ldr	r0, [pc, #140]	; (ed4c <dict_update+0x1b0>)
    ecbe:	f7fe f961 	bl	cf84 <mp_raise_ValueError>
                } else {
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ecc4:	3304      	adds	r3, #4
    ecc6:	2201      	movs	r2, #1
    ecc8:	69f9      	ldr	r1, [r7, #28]
    ecca:	4618      	mov	r0, r3
    eccc:	f7fe fbd4 	bl	d478 <mp_map_lookup>
    ecd0:	4602      	mov	r2, r0
    ecd2:	69bb      	ldr	r3, [r7, #24]
    ecd4:	6053      	str	r3, [r2, #4]
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ecd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ecd8:	f7fd fe92 	bl	ca00 <mp_iternext>
    ecdc:	6278      	str	r0, [r7, #36]	; 0x24
    ecde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ece0:	2b04      	cmp	r3, #4
    ece2:	d1d1      	bne.n	ec88 <dict_update+0xec>
            }
        }
    }

    // update the dict with any keyword args
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ece4:	2300      	movs	r3, #0
    ece6:	637b      	str	r3, [r7, #52]	; 0x34
    ece8:	e01d      	b.n	ed26 <dict_update+0x18a>
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    ecea:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ecec:	6878      	ldr	r0, [r7, #4]
    ecee:	f7ff fb8b 	bl	e408 <MP_MAP_SLOT_IS_FILLED>
    ecf2:	4603      	mov	r3, r0
    ecf4:	2b00      	cmp	r3, #0
    ecf6:	d013      	beq.n	ed20 <dict_update+0x184>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ecfa:	1d18      	adds	r0, r3, #4
    ecfc:	687b      	ldr	r3, [r7, #4]
    ecfe:	689a      	ldr	r2, [r3, #8]
    ed00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed02:	00db      	lsls	r3, r3, #3
    ed04:	4413      	add	r3, r2
    ed06:	681b      	ldr	r3, [r3, #0]
    ed08:	2201      	movs	r2, #1
    ed0a:	4619      	mov	r1, r3
    ed0c:	f7fe fbb4 	bl	d478 <mp_map_lookup>
    ed10:	4601      	mov	r1, r0
    ed12:	687b      	ldr	r3, [r7, #4]
    ed14:	689a      	ldr	r2, [r3, #8]
    ed16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed18:	00db      	lsls	r3, r3, #3
    ed1a:	4413      	add	r3, r2
    ed1c:	685b      	ldr	r3, [r3, #4]
    ed1e:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ed20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed22:	3301      	adds	r3, #1
    ed24:	637b      	str	r3, [r7, #52]	; 0x34
    ed26:	687b      	ldr	r3, [r7, #4]
    ed28:	685a      	ldr	r2, [r3, #4]
    ed2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed2c:	429a      	cmp	r2, r3
    ed2e:	d8dc      	bhi.n	ecea <dict_update+0x14e>
        }
    }

    return mp_const_none;
    ed30:	4b07      	ldr	r3, [pc, #28]	; (ed50 <dict_update+0x1b4>)
}
    ed32:	4618      	mov	r0, r3
    ed34:	3738      	adds	r7, #56	; 0x38
    ed36:	46bd      	mov	sp, r7
    ed38:	bd80      	pop	{r7, pc}
    ed3a:	bf00      	nop
    ed3c:	0000e569 	.word	0x0000e569
    ed40:	0001fda0 	.word	0x0001fda0
    ed44:	00020154 	.word	0x00020154
    ed48:	0001fd68 	.word	0x0001fd68
    ed4c:	0001fe4c 	.word	0x0001fe4c
    ed50:	00021480 	.word	0x00021480

0000ed54 <dict_view_it_iternext>:
    mp_obj_base_t base;
    mp_obj_t dict;
    mp_dict_view_kind_t kind;
} mp_obj_dict_view_t;

STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    ed54:	b580      	push	{r7, lr}
    ed56:	b086      	sub	sp, #24
    ed58:	af00      	add	r7, sp, #0
    ed5a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    ed5c:	6878      	ldr	r0, [r7, #4]
    ed5e:	f7ff fb41 	bl	e3e4 <MP_OBJ_IS_OBJ>
    ed62:	4603      	mov	r3, r0
    ed64:	f083 0301 	eor.w	r3, r3, #1
    ed68:	b2db      	uxtb	r3, r3
    ed6a:	2b00      	cmp	r3, #0
    ed6c:	d104      	bne.n	ed78 <dict_view_it_iternext+0x24>
    ed6e:	687b      	ldr	r3, [r7, #4]
    ed70:	681b      	ldr	r3, [r3, #0]
    ed72:	4a1b      	ldr	r2, [pc, #108]	; (ede0 <dict_view_it_iternext+0x8c>)
    ed74:	4293      	cmp	r3, r2
    ed76:	d006      	beq.n	ed86 <dict_view_it_iternext+0x32>
    ed78:	4b1a      	ldr	r3, [pc, #104]	; (ede4 <dict_view_it_iternext+0x90>)
    ed7a:	4a1b      	ldr	r2, [pc, #108]	; (ede8 <dict_view_it_iternext+0x94>)
    ed7c:	f240 1193 	movw	r1, #403	; 0x193
    ed80:	481a      	ldr	r0, [pc, #104]	; (edec <dict_view_it_iternext+0x98>)
    ed82:	f00c fb0b 	bl	1b39c <__assert_func>
    mp_obj_dict_view_it_t *self = MP_OBJ_TO_PTR(self_in);
    ed86:	687b      	ldr	r3, [r7, #4]
    ed88:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    ed8a:	697b      	ldr	r3, [r7, #20]
    ed8c:	689a      	ldr	r2, [r3, #8]
    ed8e:	697b      	ldr	r3, [r7, #20]
    ed90:	330c      	adds	r3, #12
    ed92:	4619      	mov	r1, r3
    ed94:	4610      	mov	r0, r2
    ed96:	f7ff fb6d 	bl	e474 <dict_iter_next>
    ed9a:	6138      	str	r0, [r7, #16]

    if (next == NULL) {
    ed9c:	693b      	ldr	r3, [r7, #16]
    ed9e:	2b00      	cmp	r3, #0
    eda0:	d101      	bne.n	eda6 <dict_view_it_iternext+0x52>
        return MP_OBJ_STOP_ITERATION;
    eda2:	2304      	movs	r3, #4
    eda4:	e018      	b.n	edd8 <dict_view_it_iternext+0x84>
    } else {
        switch (self->kind) {
    eda6:	697b      	ldr	r3, [r7, #20]
    eda8:	685b      	ldr	r3, [r3, #4]
    edaa:	2b01      	cmp	r3, #1
    edac:	d00f      	beq.n	edce <dict_view_it_iternext+0x7a>
    edae:	2b02      	cmp	r3, #2
    edb0:	d010      	beq.n	edd4 <dict_view_it_iternext+0x80>
            case MP_DICT_VIEW_ITEMS:
            default: {
                mp_obj_t items[] = {next->key, next->value};
    edb2:	693b      	ldr	r3, [r7, #16]
    edb4:	681b      	ldr	r3, [r3, #0]
    edb6:	60bb      	str	r3, [r7, #8]
    edb8:	693b      	ldr	r3, [r7, #16]
    edba:	685b      	ldr	r3, [r3, #4]
    edbc:	60fb      	str	r3, [r7, #12]
                return mp_obj_new_tuple(2, items);
    edbe:	f107 0308 	add.w	r3, r7, #8
    edc2:	4619      	mov	r1, r3
    edc4:	2002      	movs	r0, #2
    edc6:	f006 ffed 	bl	15da4 <mp_obj_new_tuple>
    edca:	4603      	mov	r3, r0
    edcc:	e004      	b.n	edd8 <dict_view_it_iternext+0x84>
            }
            case MP_DICT_VIEW_KEYS:
                return next->key;
    edce:	693b      	ldr	r3, [r7, #16]
    edd0:	681b      	ldr	r3, [r3, #0]
    edd2:	e001      	b.n	edd8 <dict_view_it_iternext+0x84>
            case MP_DICT_VIEW_VALUES:
                return next->value;
    edd4:	693b      	ldr	r3, [r7, #16]
    edd6:	685b      	ldr	r3, [r3, #4]
        }
    }
}
    edd8:	4618      	mov	r0, r3
    edda:	3718      	adds	r7, #24
    eddc:	46bd      	mov	sp, r7
    edde:	bd80      	pop	{r7, pc}
    ede0:	0001febc 	.word	0x0001febc
    ede4:	0001ff28 	.word	0x0001ff28
    ede8:	00020160 	.word	0x00020160
    edec:	0001fd68 	.word	0x0001fd68

0000edf0 <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    edf0:	b580      	push	{r7, lr}
    edf2:	b084      	sub	sp, #16
    edf4:	af00      	add	r7, sp, #0
    edf6:	6078      	str	r0, [r7, #4]
    edf8:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    edfa:	6878      	ldr	r0, [r7, #4]
    edfc:	f7ff faf2 	bl	e3e4 <MP_OBJ_IS_OBJ>
    ee00:	4603      	mov	r3, r0
    ee02:	f083 0301 	eor.w	r3, r3, #1
    ee06:	b2db      	uxtb	r3, r3
    ee08:	2b00      	cmp	r3, #0
    ee0a:	d104      	bne.n	ee16 <dict_view_getiter+0x26>
    ee0c:	687b      	ldr	r3, [r7, #4]
    ee0e:	681b      	ldr	r3, [r3, #0]
    ee10:	4a10      	ldr	r2, [pc, #64]	; (ee54 <dict_view_getiter+0x64>)
    ee12:	4293      	cmp	r3, r2
    ee14:	d006      	beq.n	ee24 <dict_view_getiter+0x34>
    ee16:	4b10      	ldr	r3, [pc, #64]	; (ee58 <dict_view_getiter+0x68>)
    ee18:	4a10      	ldr	r2, [pc, #64]	; (ee5c <dict_view_getiter+0x6c>)
    ee1a:	f240 11b1 	movw	r1, #433	; 0x1b1
    ee1e:	4810      	ldr	r0, [pc, #64]	; (ee60 <dict_view_getiter+0x70>)
    ee20:	f00c fabc 	bl	1b39c <__assert_func>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    ee24:	687b      	ldr	r3, [r7, #4]
    ee26:	60fb      	str	r3, [r7, #12]
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    ee28:	683b      	ldr	r3, [r7, #0]
    ee2a:	60bb      	str	r3, [r7, #8]
    o->base.type = &dict_view_it_type;
    ee2c:	68bb      	ldr	r3, [r7, #8]
    ee2e:	4a0d      	ldr	r2, [pc, #52]	; (ee64 <dict_view_getiter+0x74>)
    ee30:	601a      	str	r2, [r3, #0]
    o->kind = view->kind;
    ee32:	68fb      	ldr	r3, [r7, #12]
    ee34:	689a      	ldr	r2, [r3, #8]
    ee36:	68bb      	ldr	r3, [r7, #8]
    ee38:	605a      	str	r2, [r3, #4]
    o->dict = view->dict;
    ee3a:	68fb      	ldr	r3, [r7, #12]
    ee3c:	685a      	ldr	r2, [r3, #4]
    ee3e:	68bb      	ldr	r3, [r7, #8]
    ee40:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    ee42:	68bb      	ldr	r3, [r7, #8]
    ee44:	2200      	movs	r2, #0
    ee46:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    ee48:	68bb      	ldr	r3, [r7, #8]
}
    ee4a:	4618      	mov	r0, r3
    ee4c:	3710      	adds	r7, #16
    ee4e:	46bd      	mov	sp, r7
    ee50:	bd80      	pop	{r7, pc}
    ee52:	bf00      	nop
    ee54:	0001fe80 	.word	0x0001fe80
    ee58:	0001ff88 	.word	0x0001ff88
    ee5c:	00020178 	.word	0x00020178
    ee60:	0001fd68 	.word	0x0001fd68
    ee64:	0001febc 	.word	0x0001febc

0000ee68 <dict_view_print>:

STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    ee68:	b580      	push	{r7, lr}
    ee6a:	b08c      	sub	sp, #48	; 0x30
    ee6c:	af00      	add	r7, sp, #0
    ee6e:	60f8      	str	r0, [r7, #12]
    ee70:	60b9      	str	r1, [r7, #8]
    ee72:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    ee74:	68b8      	ldr	r0, [r7, #8]
    ee76:	f7ff fab5 	bl	e3e4 <MP_OBJ_IS_OBJ>
    ee7a:	4603      	mov	r3, r0
    ee7c:	f083 0301 	eor.w	r3, r3, #1
    ee80:	b2db      	uxtb	r3, r3
    ee82:	2b00      	cmp	r3, #0
    ee84:	d104      	bne.n	ee90 <dict_view_print+0x28>
    ee86:	68bb      	ldr	r3, [r7, #8]
    ee88:	681b      	ldr	r3, [r3, #0]
    ee8a:	4a24      	ldr	r2, [pc, #144]	; (ef1c <dict_view_print+0xb4>)
    ee8c:	4293      	cmp	r3, r2
    ee8e:	d006      	beq.n	ee9e <dict_view_print+0x36>
    ee90:	4b23      	ldr	r3, [pc, #140]	; (ef20 <dict_view_print+0xb8>)
    ee92:	4a24      	ldr	r2, [pc, #144]	; (ef24 <dict_view_print+0xbc>)
    ee94:	f240 11bd 	movw	r1, #445	; 0x1bd
    ee98:	4823      	ldr	r0, [pc, #140]	; (ef28 <dict_view_print+0xc0>)
    ee9a:	f00c fa7f 	bl	1b39c <__assert_func>
    mp_obj_dict_view_t *self = MP_OBJ_TO_PTR(self_in);
    ee9e:	68bb      	ldr	r3, [r7, #8]
    eea0:	62bb      	str	r3, [r7, #40]	; 0x28
    bool first = true;
    eea2:	2301      	movs	r3, #1
    eea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    mp_print_str(print, mp_dict_view_names[self->kind]);
    eea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eeaa:	689b      	ldr	r3, [r3, #8]
    eeac:	4a1f      	ldr	r2, [pc, #124]	; (ef2c <dict_view_print+0xc4>)
    eeae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeb2:	4619      	mov	r1, r3
    eeb4:	68f8      	ldr	r0, [r7, #12]
    eeb6:	f7f2 fcef 	bl	1898 <mp_print_str>
    mp_print_str(print, "([");
    eeba:	491d      	ldr	r1, [pc, #116]	; (ef30 <dict_view_print+0xc8>)
    eebc:	68f8      	ldr	r0, [r7, #12]
    eebe:	f7f2 fceb 	bl	1898 <mp_print_str>
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    eec2:	f107 0310 	add.w	r3, r7, #16
    eec6:	4619      	mov	r1, r3
    eec8:	68b8      	ldr	r0, [r7, #8]
    eeca:	f7ff ff91 	bl	edf0 <dict_view_getiter>
    eece:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_t next = MP_OBJ_NULL;
    eed0:	2300      	movs	r3, #0
    eed2:	623b      	str	r3, [r7, #32]
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    eed4:	e012      	b.n	eefc <dict_view_print+0x94>
        if (!first) {
    eed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    eeda:	f083 0301 	eor.w	r3, r3, #1
    eede:	b2db      	uxtb	r3, r3
    eee0:	2b00      	cmp	r3, #0
    eee2:	d003      	beq.n	eeec <dict_view_print+0x84>
            mp_print_str(print, ", ");
    eee4:	4913      	ldr	r1, [pc, #76]	; (ef34 <dict_view_print+0xcc>)
    eee6:	68f8      	ldr	r0, [r7, #12]
    eee8:	f7f2 fcd6 	bl	1898 <mp_print_str>
        }
        first = false;
    eeec:	2300      	movs	r3, #0
    eeee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        mp_obj_print_helper(print, next, PRINT_REPR);
    eef2:	2201      	movs	r2, #1
    eef4:	6a39      	ldr	r1, [r7, #32]
    eef6:	68f8      	ldr	r0, [r7, #12]
    eef8:	f7fe fc9a 	bl	d830 <mp_obj_print_helper>
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    eefc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    eefe:	f7ff ff29 	bl	ed54 <dict_view_it_iternext>
    ef02:	6238      	str	r0, [r7, #32]
    ef04:	6a3b      	ldr	r3, [r7, #32]
    ef06:	2b04      	cmp	r3, #4
    ef08:	d1e5      	bne.n	eed6 <dict_view_print+0x6e>
    }
    mp_print_str(print, "])");
    ef0a:	490b      	ldr	r1, [pc, #44]	; (ef38 <dict_view_print+0xd0>)
    ef0c:	68f8      	ldr	r0, [r7, #12]
    ef0e:	f7f2 fcc3 	bl	1898 <mp_print_str>
}
    ef12:	bf00      	nop
    ef14:	3730      	adds	r7, #48	; 0x30
    ef16:	46bd      	mov	sp, r7
    ef18:	bd80      	pop	{r7, pc}
    ef1a:	bf00      	nop
    ef1c:	0001fe80 	.word	0x0001fe80
    ef20:	0001ffe4 	.word	0x0001ffe4
    ef24:	0002018c 	.word	0x0002018c
    ef28:	0001fd68 	.word	0x0001fd68
    ef2c:	0001ff1c 	.word	0x0001ff1c
    ef30:	00020040 	.word	0x00020040
    ef34:	0001fcfc 	.word	0x0001fcfc
    ef38:	00020044 	.word	0x00020044

0000ef3c <dict_view_binary_op>:

STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    ef3c:	b580      	push	{r7, lr}
    ef3e:	b086      	sub	sp, #24
    ef40:	af00      	add	r7, sp, #0
    ef42:	60f8      	str	r0, [r7, #12]
    ef44:	60b9      	str	r1, [r7, #8]
    ef46:	607a      	str	r2, [r7, #4]
    // only supported for the 'keys' kind until sets and dicts are refactored
    mp_obj_dict_view_t *o = MP_OBJ_TO_PTR(lhs_in);
    ef48:	68bb      	ldr	r3, [r7, #8]
    ef4a:	617b      	str	r3, [r7, #20]
    if (o->kind != MP_DICT_VIEW_KEYS) {
    ef4c:	697b      	ldr	r3, [r7, #20]
    ef4e:	689b      	ldr	r3, [r3, #8]
    ef50:	2b01      	cmp	r3, #1
    ef52:	d001      	beq.n	ef58 <dict_view_binary_op+0x1c>
        return MP_OBJ_NULL; // op not supported
    ef54:	2300      	movs	r3, #0
    ef56:	e00c      	b.n	ef72 <dict_view_binary_op+0x36>
    }
    if (op != MP_BINARY_OP_CONTAINS) {
    ef58:	68fb      	ldr	r3, [r7, #12]
    ef5a:	2b22      	cmp	r3, #34	; 0x22
    ef5c:	d001      	beq.n	ef62 <dict_view_binary_op+0x26>
        return MP_OBJ_NULL; // op not supported
    ef5e:	2300      	movs	r3, #0
    ef60:	e007      	b.n	ef72 <dict_view_binary_op+0x36>
    }
    return dict_binary_op(op, o->dict, rhs_in);
    ef62:	697b      	ldr	r3, [r7, #20]
    ef64:	685b      	ldr	r3, [r3, #4]
    ef66:	687a      	ldr	r2, [r7, #4]
    ef68:	4619      	mov	r1, r3
    ef6a:	68f8      	ldr	r0, [r7, #12]
    ef6c:	f7ff fb58 	bl	e620 <dict_binary_op>
    ef70:	4603      	mov	r3, r0
}
    ef72:	4618      	mov	r0, r3
    ef74:	3718      	adds	r7, #24
    ef76:	46bd      	mov	sp, r7
    ef78:	bd80      	pop	{r7, pc}
    ef7a:	bf00      	nop

0000ef7c <mp_obj_new_dict_view>:
    .print = dict_view_print,
    .binary_op = dict_view_binary_op,
    .getiter = dict_view_getiter,
};

STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    ef7c:	b580      	push	{r7, lr}
    ef7e:	b084      	sub	sp, #16
    ef80:	af00      	add	r7, sp, #0
    ef82:	6078      	str	r0, [r7, #4]
    ef84:	6039      	str	r1, [r7, #0]
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    ef86:	200c      	movs	r0, #12
    ef88:	f7f1 f9c8 	bl	31c <m_malloc>
    ef8c:	60f8      	str	r0, [r7, #12]
    o->base.type = &dict_view_type;
    ef8e:	68fb      	ldr	r3, [r7, #12]
    ef90:	4a06      	ldr	r2, [pc, #24]	; (efac <mp_obj_new_dict_view+0x30>)
    ef92:	601a      	str	r2, [r3, #0]
    o->dict = dict;
    ef94:	68fb      	ldr	r3, [r7, #12]
    ef96:	687a      	ldr	r2, [r7, #4]
    ef98:	605a      	str	r2, [r3, #4]
    o->kind = kind;
    ef9a:	68fb      	ldr	r3, [r7, #12]
    ef9c:	683a      	ldr	r2, [r7, #0]
    ef9e:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    efa0:	68fb      	ldr	r3, [r7, #12]
}
    efa2:	4618      	mov	r0, r3
    efa4:	3710      	adds	r7, #16
    efa6:	46bd      	mov	sp, r7
    efa8:	bd80      	pop	{r7, pc}
    efaa:	bf00      	nop
    efac:	0001fe80 	.word	0x0001fe80

0000efb0 <dict_view>:

STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    efb0:	b580      	push	{r7, lr}
    efb2:	b082      	sub	sp, #8
    efb4:	af00      	add	r7, sp, #0
    efb6:	6078      	str	r0, [r7, #4]
    efb8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    efba:	6878      	ldr	r0, [r7, #4]
    efbc:	f7ff fa12 	bl	e3e4 <MP_OBJ_IS_OBJ>
    efc0:	4603      	mov	r3, r0
    efc2:	f083 0301 	eor.w	r3, r3, #1
    efc6:	b2db      	uxtb	r3, r3
    efc8:	2b00      	cmp	r3, #0
    efca:	d105      	bne.n	efd8 <dict_view+0x28>
    efcc:	687b      	ldr	r3, [r7, #4]
    efce:	681b      	ldr	r3, [r3, #0]
    efd0:	68db      	ldr	r3, [r3, #12]
    efd2:	4a09      	ldr	r2, [pc, #36]	; (eff8 <dict_view+0x48>)
    efd4:	4293      	cmp	r3, r2
    efd6:	d006      	beq.n	efe6 <dict_view+0x36>
    efd8:	4b08      	ldr	r3, [pc, #32]	; (effc <dict_view+0x4c>)
    efda:	4a09      	ldr	r2, [pc, #36]	; (f000 <dict_view+0x50>)
    efdc:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    efe0:	4808      	ldr	r0, [pc, #32]	; (f004 <dict_view+0x54>)
    efe2:	f00c f9db 	bl	1b39c <__assert_func>
    return mp_obj_new_dict_view(self_in, kind);
    efe6:	6839      	ldr	r1, [r7, #0]
    efe8:	6878      	ldr	r0, [r7, #4]
    efea:	f7ff ffc7 	bl	ef7c <mp_obj_new_dict_view>
    efee:	4603      	mov	r3, r0
}
    eff0:	4618      	mov	r0, r3
    eff2:	3708      	adds	r7, #8
    eff4:	46bd      	mov	sp, r7
    eff6:	bd80      	pop	{r7, pc}
    eff8:	0000e569 	.word	0x0000e569
    effc:	0001fd08 	.word	0x0001fd08
    f000:	0002019c 	.word	0x0002019c
    f004:	0001fd68 	.word	0x0001fd68

0000f008 <dict_items>:

STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    f008:	b580      	push	{r7, lr}
    f00a:	b082      	sub	sp, #8
    f00c:	af00      	add	r7, sp, #0
    f00e:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    f010:	2100      	movs	r1, #0
    f012:	6878      	ldr	r0, [r7, #4]
    f014:	f7ff ffcc 	bl	efb0 <dict_view>
    f018:	4603      	mov	r3, r0
}
    f01a:	4618      	mov	r0, r3
    f01c:	3708      	adds	r7, #8
    f01e:	46bd      	mov	sp, r7
    f020:	bd80      	pop	{r7, pc}
    f022:	bf00      	nop

0000f024 <dict_keys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_items_obj, dict_items);

STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    f024:	b580      	push	{r7, lr}
    f026:	b082      	sub	sp, #8
    f028:	af00      	add	r7, sp, #0
    f02a:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    f02c:	2101      	movs	r1, #1
    f02e:	6878      	ldr	r0, [r7, #4]
    f030:	f7ff ffbe 	bl	efb0 <dict_view>
    f034:	4603      	mov	r3, r0
}
    f036:	4618      	mov	r0, r3
    f038:	3708      	adds	r7, #8
    f03a:	46bd      	mov	sp, r7
    f03c:	bd80      	pop	{r7, pc}
    f03e:	bf00      	nop

0000f040 <dict_values>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_keys_obj, dict_keys);

STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    f040:	b580      	push	{r7, lr}
    f042:	b082      	sub	sp, #8
    f044:	af00      	add	r7, sp, #0
    f046:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    f048:	2102      	movs	r1, #2
    f04a:	6878      	ldr	r0, [r7, #4]
    f04c:	f7ff ffb0 	bl	efb0 <dict_view>
    f050:	4603      	mov	r3, r0
}
    f052:	4618      	mov	r0, r3
    f054:	3708      	adds	r7, #8
    f056:	46bd      	mov	sp, r7
    f058:	bd80      	pop	{r7, pc}
    f05a:	bf00      	nop

0000f05c <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    f05c:	b580      	push	{r7, lr}
    f05e:	b084      	sub	sp, #16
    f060:	af00      	add	r7, sp, #0
    f062:	6078      	str	r0, [r7, #4]
    f064:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f066:	6878      	ldr	r0, [r7, #4]
    f068:	f7ff f9bc 	bl	e3e4 <MP_OBJ_IS_OBJ>
    f06c:	4603      	mov	r3, r0
    f06e:	f083 0301 	eor.w	r3, r3, #1
    f072:	b2db      	uxtb	r3, r3
    f074:	2b00      	cmp	r3, #0
    f076:	d105      	bne.n	f084 <dict_getiter+0x28>
    f078:	687b      	ldr	r3, [r7, #4]
    f07a:	681b      	ldr	r3, [r3, #0]
    f07c:	68db      	ldr	r3, [r3, #12]
    f07e:	4a0e      	ldr	r2, [pc, #56]	; (f0b8 <dict_getiter+0x5c>)
    f080:	4293      	cmp	r3, r2
    f082:	d006      	beq.n	f092 <dict_getiter+0x36>
    f084:	4b0d      	ldr	r3, [pc, #52]	; (f0bc <dict_getiter+0x60>)
    f086:	4a0e      	ldr	r2, [pc, #56]	; (f0c0 <dict_getiter+0x64>)
    f088:	f44f 7101 	mov.w	r1, #516	; 0x204
    f08c:	480d      	ldr	r0, [pc, #52]	; (f0c4 <dict_getiter+0x68>)
    f08e:	f00c f985 	bl	1b39c <__assert_func>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    f092:	683b      	ldr	r3, [r7, #0]
    f094:	60fb      	str	r3, [r7, #12]
    o->base.type = &dict_view_it_type;
    f096:	68fb      	ldr	r3, [r7, #12]
    f098:	4a0b      	ldr	r2, [pc, #44]	; (f0c8 <dict_getiter+0x6c>)
    f09a:	601a      	str	r2, [r3, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    f09c:	68fb      	ldr	r3, [r7, #12]
    f09e:	2201      	movs	r2, #1
    f0a0:	605a      	str	r2, [r3, #4]
    o->dict = self_in;
    f0a2:	68fb      	ldr	r3, [r7, #12]
    f0a4:	687a      	ldr	r2, [r7, #4]
    f0a6:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    f0a8:	68fb      	ldr	r3, [r7, #12]
    f0aa:	2200      	movs	r2, #0
    f0ac:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    f0ae:	68fb      	ldr	r3, [r7, #12]
}
    f0b0:	4618      	mov	r0, r3
    f0b2:	3710      	adds	r7, #16
    f0b4:	46bd      	mov	sp, r7
    f0b6:	bd80      	pop	{r7, pc}
    f0b8:	0000e569 	.word	0x0000e569
    f0bc:	0001fd08 	.word	0x0001fd08
    f0c0:	000201a8 	.word	0x000201a8
    f0c4:	0001fd68 	.word	0x0001fd68
    f0c8:	0001febc 	.word	0x0001febc

0000f0cc <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    f0cc:	b580      	push	{r7, lr}
    f0ce:	b082      	sub	sp, #8
    f0d0:	af00      	add	r7, sp, #0
    f0d2:	6078      	str	r0, [r7, #4]
    f0d4:	6039      	str	r1, [r7, #0]
    dict->base.type = &mp_type_dict;
    f0d6:	687b      	ldr	r3, [r7, #4]
    f0d8:	4a05      	ldr	r2, [pc, #20]	; (f0f0 <mp_obj_dict_init+0x24>)
    f0da:	601a      	str	r2, [r3, #0]
    mp_map_init(&dict->map, n_args);
    f0dc:	687b      	ldr	r3, [r7, #4]
    f0de:	3304      	adds	r3, #4
    f0e0:	6839      	ldr	r1, [r7, #0]
    f0e2:	4618      	mov	r0, r3
    f0e4:	f7fe f8cc 	bl	d280 <mp_map_init>
}
    f0e8:	bf00      	nop
    f0ea:	3708      	adds	r7, #8
    f0ec:	46bd      	mov	sp, r7
    f0ee:	bd80      	pop	{r7, pc}
    f0f0:	000200e0 	.word	0x000200e0

0000f0f4 <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    f0f4:	b580      	push	{r7, lr}
    f0f6:	b084      	sub	sp, #16
    f0f8:	af00      	add	r7, sp, #0
    f0fa:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    f0fc:	2010      	movs	r0, #16
    f0fe:	f7f1 f90d 	bl	31c <m_malloc>
    f102:	60f8      	str	r0, [r7, #12]
    mp_obj_dict_init(o, n_args);
    f104:	6879      	ldr	r1, [r7, #4]
    f106:	68f8      	ldr	r0, [r7, #12]
    f108:	f7ff ffe0 	bl	f0cc <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
    f10c:	68fb      	ldr	r3, [r7, #12]
}
    f10e:	4618      	mov	r0, r3
    f110:	3710      	adds	r7, #16
    f112:	46bd      	mov	sp, r7
    f114:	bd80      	pop	{r7, pc}
    f116:	bf00      	nop

0000f118 <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    f118:	b480      	push	{r7}
    f11a:	b085      	sub	sp, #20
    f11c:	af00      	add	r7, sp, #0
    f11e:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f120:	687b      	ldr	r3, [r7, #4]
    f122:	60fb      	str	r3, [r7, #12]
    return self->map.used;
    f124:	68fb      	ldr	r3, [r7, #12]
    f126:	685b      	ldr	r3, [r3, #4]
    f128:	f3c3 03dc 	ubfx	r3, r3, #3, #29
}
    f12c:	4618      	mov	r0, r3
    f12e:	3714      	adds	r7, #20
    f130:	46bd      	mov	sp, r7
    f132:	f85d 7b04 	ldr.w	r7, [sp], #4
    f136:	4770      	bx	lr

0000f138 <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    f138:	b580      	push	{r7, lr}
    f13a:	b086      	sub	sp, #24
    f13c:	af00      	add	r7, sp, #0
    f13e:	60f8      	str	r0, [r7, #12]
    f140:	60b9      	str	r1, [r7, #8]
    f142:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f144:	68f8      	ldr	r0, [r7, #12]
    f146:	f7ff f94d 	bl	e3e4 <MP_OBJ_IS_OBJ>
    f14a:	4603      	mov	r3, r0
    f14c:	f083 0301 	eor.w	r3, r3, #1
    f150:	b2db      	uxtb	r3, r3
    f152:	2b00      	cmp	r3, #0
    f154:	d105      	bne.n	f162 <mp_obj_dict_store+0x2a>
    f156:	68fb      	ldr	r3, [r7, #12]
    f158:	681b      	ldr	r3, [r3, #0]
    f15a:	68db      	ldr	r3, [r3, #12]
    f15c:	4a0e      	ldr	r2, [pc, #56]	; (f198 <mp_obj_dict_store+0x60>)
    f15e:	4293      	cmp	r3, r2
    f160:	d006      	beq.n	f170 <mp_obj_dict_store+0x38>
    f162:	4b0e      	ldr	r3, [pc, #56]	; (f19c <mp_obj_dict_store+0x64>)
    f164:	4a0e      	ldr	r2, [pc, #56]	; (f1a0 <mp_obj_dict_store+0x68>)
    f166:	f240 214f 	movw	r1, #591	; 0x24f
    f16a:	480e      	ldr	r0, [pc, #56]	; (f1a4 <mp_obj_dict_store+0x6c>)
    f16c:	f00c f916 	bl	1b39c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f170:	68fb      	ldr	r3, [r7, #12]
    f172:	617b      	str	r3, [r7, #20]
    mp_ensure_not_fixed(self);
    f174:	6978      	ldr	r0, [r7, #20]
    f176:	f7ff fb21 	bl	e7bc <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f17a:	697b      	ldr	r3, [r7, #20]
    f17c:	3304      	adds	r3, #4
    f17e:	2201      	movs	r2, #1
    f180:	68b9      	ldr	r1, [r7, #8]
    f182:	4618      	mov	r0, r3
    f184:	f7fe f978 	bl	d478 <mp_map_lookup>
    f188:	4602      	mov	r2, r0
    f18a:	687b      	ldr	r3, [r7, #4]
    f18c:	6053      	str	r3, [r2, #4]
    return self_in;
    f18e:	68fb      	ldr	r3, [r7, #12]
}
    f190:	4618      	mov	r0, r3
    f192:	3718      	adds	r7, #24
    f194:	46bd      	mov	sp, r7
    f196:	bd80      	pop	{r7, pc}
    f198:	0000e569 	.word	0x0000e569
    f19c:	0001fd08 	.word	0x0001fd08
    f1a0:	000201b8 	.word	0x000201b8
    f1a4:	0001fd68 	.word	0x0001fd68

0000f1a8 <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    f1a8:	b580      	push	{r7, lr}
    f1aa:	b084      	sub	sp, #16
    f1ac:	af00      	add	r7, sp, #0
    f1ae:	6078      	str	r0, [r7, #4]
    f1b0:	6039      	str	r1, [r7, #0]
    mp_obj_t args[2] = {self_in, key};
    f1b2:	687b      	ldr	r3, [r7, #4]
    f1b4:	60bb      	str	r3, [r7, #8]
    f1b6:	683b      	ldr	r3, [r7, #0]
    f1b8:	60fb      	str	r3, [r7, #12]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    f1ba:	f107 0308 	add.w	r3, r7, #8
    f1be:	2202      	movs	r2, #2
    f1c0:	4619      	mov	r1, r3
    f1c2:	2002      	movs	r0, #2
    f1c4:	f7ff fbe6 	bl	e994 <dict_get_helper>
    return self_in;
    f1c8:	687b      	ldr	r3, [r7, #4]
}
    f1ca:	4618      	mov	r0, r3
    f1cc:	3710      	adds	r7, #16
    f1ce:	46bd      	mov	sp, r7
    f1d0:	bd80      	pop	{r7, pc}
    f1d2:	bf00      	nop

0000f1d4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    f1d4:	b480      	push	{r7}
    f1d6:	b083      	sub	sp, #12
    f1d8:	af00      	add	r7, sp, #0
    f1da:	6078      	str	r0, [r7, #4]
    f1dc:	687b      	ldr	r3, [r7, #4]
    f1de:	f003 0303 	and.w	r3, r3, #3
    f1e2:	2b00      	cmp	r3, #0
    f1e4:	bf0c      	ite	eq
    f1e6:	2301      	moveq	r3, #1
    f1e8:	2300      	movne	r3, #0
    f1ea:	b2db      	uxtb	r3, r3
    f1ec:	4618      	mov	r0, r3
    f1ee:	370c      	adds	r7, #12
    f1f0:	46bd      	mov	sp, r7
    f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    f1f6:	4770      	bx	lr

0000f1f8 <mp_init_emergency_exception_buf>:
}

#else
#define mp_emergency_exception_buf_size MP_STATE_VM(mp_emergency_exception_buf_size)

void mp_init_emergency_exception_buf(void) {
    f1f8:	b480      	push	{r7}
    f1fa:	af00      	add	r7, sp, #0
    mp_emergency_exception_buf_size = 0;
    f1fc:	4b05      	ldr	r3, [pc, #20]	; (f214 <mp_init_emergency_exception_buf+0x1c>)
    f1fe:	2200      	movs	r2, #0
    f200:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    MP_STATE_VM(mp_emergency_exception_buf) = NULL;
    f204:	4b03      	ldr	r3, [pc, #12]	; (f214 <mp_init_emergency_exception_buf+0x1c>)
    f206:	2200      	movs	r2, #0
    f208:	625a      	str	r2, [r3, #36]	; 0x24
}
    f20a:	bf00      	nop
    f20c:	46bd      	mov	sp, r7
    f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f212:	4770      	bx	lr
    f214:	20000a2c 	.word	0x20000a2c

0000f218 <mp_alloc_emergency_exception_buf>:

mp_obj_t mp_alloc_emergency_exception_buf(mp_obj_t size_in) {
    f218:	b580      	push	{r7, lr}
    f21a:	b088      	sub	sp, #32
    f21c:	af00      	add	r7, sp, #0
    f21e:	6078      	str	r0, [r7, #4]
    mp_int_t size = mp_obj_get_int(size_in);
    f220:	6878      	ldr	r0, [r7, #4]
    f222:	f7fe fcb1 	bl	db88 <mp_obj_get_int>
    f226:	61b8      	str	r0, [r7, #24]
    void *buf = NULL;
    f228:	2300      	movs	r3, #0
    f22a:	61fb      	str	r3, [r7, #28]
    if (size > 0) {
    f22c:	69bb      	ldr	r3, [r7, #24]
    f22e:	2b00      	cmp	r3, #0
    f230:	dd04      	ble.n	f23c <mp_alloc_emergency_exception_buf+0x24>
        buf = m_new(byte, size);
    f232:	69bb      	ldr	r3, [r7, #24]
    f234:	4618      	mov	r0, r3
    f236:	f7f1 f871 	bl	31c <m_malloc>
    f23a:	61f8      	str	r0, [r7, #28]
    }

    int old_size = mp_emergency_exception_buf_size;
    f23c:	4b0d      	ldr	r3, [pc, #52]	; (f274 <mp_alloc_emergency_exception_buf+0x5c>)
    f23e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    f242:	617b      	str	r3, [r7, #20]
    void *old_buf = MP_STATE_VM(mp_emergency_exception_buf);
    f244:	4b0b      	ldr	r3, [pc, #44]	; (f274 <mp_alloc_emergency_exception_buf+0x5c>)
    f246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f248:	613b      	str	r3, [r7, #16]

    // Update the 2 variables atomically so that an interrupt can't occur
    // between the assignments.
    mp_uint_t atomic_state = MICROPY_BEGIN_ATOMIC_SECTION();
    f24a:	2300      	movs	r3, #0
    f24c:	60fb      	str	r3, [r7, #12]
    mp_emergency_exception_buf_size = size;
    f24e:	4a09      	ldr	r2, [pc, #36]	; (f274 <mp_alloc_emergency_exception_buf+0x5c>)
    f250:	69bb      	ldr	r3, [r7, #24]
    f252:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    MP_STATE_VM(mp_emergency_exception_buf) = buf;
    f256:	4a07      	ldr	r2, [pc, #28]	; (f274 <mp_alloc_emergency_exception_buf+0x5c>)
    f258:	69fb      	ldr	r3, [r7, #28]
    f25a:	6253      	str	r3, [r2, #36]	; 0x24
    MICROPY_END_ATOMIC_SECTION(atomic_state);

    if (old_buf != NULL) {
    f25c:	693b      	ldr	r3, [r7, #16]
    f25e:	2b00      	cmp	r3, #0
    f260:	d002      	beq.n	f268 <mp_alloc_emergency_exception_buf+0x50>
        m_del(byte, old_buf, old_size);
    f262:	6938      	ldr	r0, [r7, #16]
    f264:	f7f1 f8bc 	bl	3e0 <m_free>
    }
    return mp_const_none;
    f268:	4b03      	ldr	r3, [pc, #12]	; (f278 <mp_alloc_emergency_exception_buf+0x60>)
}
    f26a:	4618      	mov	r0, r3
    f26c:	3720      	adds	r7, #32
    f26e:	46bd      	mov	sp, r7
    f270:	bd80      	pop	{r7, pc}
    f272:	bf00      	nop
    f274:	20000a2c 	.word	0x20000a2c
    f278:	00021480 	.word	0x00021480

0000f27c <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    f27c:	b580      	push	{r7, lr}
    f27e:	b088      	sub	sp, #32
    f280:	af00      	add	r7, sp, #0
    f282:	60f8      	str	r0, [r7, #12]
    f284:	60b9      	str	r1, [r7, #8]
    f286:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    f288:	68bb      	ldr	r3, [r7, #8]
    f28a:	61fb      	str	r3, [r7, #28]
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    f28c:	687b      	ldr	r3, [r7, #4]
    f28e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f292:	61bb      	str	r3, [r7, #24]
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    f294:	687b      	ldr	r3, [r7, #4]
    f296:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f29a:	2b00      	cmp	r3, #0
    f29c:	bf14      	ite	ne
    f29e:	2301      	movne	r3, #1
    f2a0:	2300      	moveq	r3, #0
    f2a2:	75fb      	strb	r3, [r7, #23]
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    f2a4:	7dfb      	ldrb	r3, [r7, #23]
    f2a6:	f083 0301 	eor.w	r3, r3, #1
    f2aa:	b2db      	uxtb	r3, r3
    f2ac:	2b00      	cmp	r3, #0
    f2ae:	d010      	beq.n	f2d2 <mp_obj_exception_print+0x56>
    f2b0:	69bb      	ldr	r3, [r7, #24]
    f2b2:	2b01      	cmp	r3, #1
    f2b4:	d002      	beq.n	f2bc <mp_obj_exception_print+0x40>
    f2b6:	69bb      	ldr	r3, [r7, #24]
    f2b8:	2b02      	cmp	r3, #2
    f2ba:	d10a      	bne.n	f2d2 <mp_obj_exception_print+0x56>
        mp_print_str(print, qstr_str(o->base.type->name));
    f2bc:	69fb      	ldr	r3, [r7, #28]
    f2be:	681b      	ldr	r3, [r3, #0]
    f2c0:	88db      	ldrh	r3, [r3, #6]
    f2c2:	4618      	mov	r0, r3
    f2c4:	f7f1 ffa4 	bl	1210 <qstr_str>
    f2c8:	4603      	mov	r3, r0
    f2ca:	4619      	mov	r1, r3
    f2cc:	68f8      	ldr	r0, [r7, #12]
    f2ce:	f7f2 fae3 	bl	1898 <mp_print_str>
    }

    if (k == PRINT_EXC) {
    f2d2:	69bb      	ldr	r3, [r7, #24]
    f2d4:	2b02      	cmp	r3, #2
    f2d6:	d103      	bne.n	f2e0 <mp_obj_exception_print+0x64>
        mp_print_str(print, ": ");
    f2d8:	4917      	ldr	r1, [pc, #92]	; (f338 <mp_obj_exception_print+0xbc>)
    f2da:	68f8      	ldr	r0, [r7, #12]
    f2dc:	f7f2 fadc 	bl	1898 <mp_print_str>
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    f2e0:	69bb      	ldr	r3, [r7, #24]
    f2e2:	2b00      	cmp	r3, #0
    f2e4:	d002      	beq.n	f2ec <mp_obj_exception_print+0x70>
    f2e6:	69bb      	ldr	r3, [r7, #24]
    f2e8:	2b02      	cmp	r3, #2
    f2ea:	d11b      	bne.n	f324 <mp_obj_exception_print+0xa8>
        if (o->args == NULL || o->args->len == 0) {
    f2ec:	69fb      	ldr	r3, [r7, #28]
    f2ee:	68db      	ldr	r3, [r3, #12]
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	d004      	beq.n	f2fe <mp_obj_exception_print+0x82>
    f2f4:	69fb      	ldr	r3, [r7, #28]
    f2f6:	68db      	ldr	r3, [r3, #12]
    f2f8:	685b      	ldr	r3, [r3, #4]
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	d104      	bne.n	f308 <mp_obj_exception_print+0x8c>
            mp_print_str(print, "");
    f2fe:	490f      	ldr	r1, [pc, #60]	; (f33c <mp_obj_exception_print+0xc0>)
    f300:	68f8      	ldr	r0, [r7, #12]
    f302:	f7f2 fac9 	bl	1898 <mp_print_str>
            return;
    f306:	e014      	b.n	f332 <mp_obj_exception_print+0xb6>
        } else if (o->args->len == 1) {
    f308:	69fb      	ldr	r3, [r7, #28]
    f30a:	68db      	ldr	r3, [r3, #12]
    f30c:	685b      	ldr	r3, [r3, #4]
    f30e:	2b01      	cmp	r3, #1
    f310:	d108      	bne.n	f324 <mp_obj_exception_print+0xa8>
                    mp_printf(print, "[Errno " INT_FMT "] %q", MP_OBJ_SMALL_INT_VALUE(o->args->items[0]), qst);
                    return;
                }
            }
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    f312:	69fb      	ldr	r3, [r7, #28]
    f314:	68db      	ldr	r3, [r3, #12]
    f316:	689b      	ldr	r3, [r3, #8]
    f318:	2200      	movs	r2, #0
    f31a:	4619      	mov	r1, r3
    f31c:	68f8      	ldr	r0, [r7, #12]
    f31e:	f7fe fa87 	bl	d830 <mp_obj_print_helper>
            return;
    f322:	e006      	b.n	f332 <mp_obj_exception_print+0xb6>
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    f324:	69fb      	ldr	r3, [r7, #28]
    f326:	68db      	ldr	r3, [r3, #12]
    f328:	687a      	ldr	r2, [r7, #4]
    f32a:	4619      	mov	r1, r3
    f32c:	68f8      	ldr	r0, [r7, #12]
    f32e:	f006 faab 	bl	15888 <mp_obj_tuple_print>
}
    f332:	3720      	adds	r7, #32
    f334:	46bd      	mov	sp, r7
    f336:	bd80      	pop	{r7, pc}
    f338:	000201dc 	.word	0x000201dc
    f33c:	000201e0 	.word	0x000201e0

0000f340 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f340:	b580      	push	{r7, lr}
    f342:	b088      	sub	sp, #32
    f344:	af02      	add	r7, sp, #8
    f346:	60f8      	str	r0, [r7, #12]
    f348:	60b9      	str	r1, [r7, #8]
    f34a:	607a      	str	r2, [r7, #4]
    f34c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    f34e:	2300      	movs	r3, #0
    f350:	9300      	str	r3, [sp, #0]
    f352:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f356:	2200      	movs	r2, #0
    f358:	6879      	ldr	r1, [r7, #4]
    f35a:	68b8      	ldr	r0, [r7, #8]
    f35c:	f7fd fe42 	bl	cfe4 <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    f360:	2010      	movs	r0, #16
    f362:	f7f0 fff3 	bl	34c <m_malloc_maybe>
    f366:	6178      	str	r0, [r7, #20]
    if (o_exc == NULL) {
    f368:	697b      	ldr	r3, [r7, #20]
    f36a:	2b00      	cmp	r3, #0
    f36c:	d101      	bne.n	f372 <mp_obj_exception_make_new+0x32>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    f36e:	4b21      	ldr	r3, [pc, #132]	; (f3f4 <mp_obj_exception_make_new+0xb4>)
    f370:	617b      	str	r3, [r7, #20]
    }

    // Populate the exception object
    o_exc->base.type = type;
    f372:	697b      	ldr	r3, [r7, #20]
    f374:	68fa      	ldr	r2, [r7, #12]
    f376:	601a      	str	r2, [r3, #0]
    o_exc->traceback_data = NULL;
    f378:	697b      	ldr	r3, [r7, #20]
    f37a:	2200      	movs	r2, #0
    f37c:	609a      	str	r2, [r3, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    f37e:	68bb      	ldr	r3, [r7, #8]
    f380:	2b00      	cmp	r3, #0
    f382:	d102      	bne.n	f38a <mp_obj_exception_make_new+0x4a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f384:	4b1c      	ldr	r3, [pc, #112]	; (f3f8 <mp_obj_exception_make_new+0xb8>)
    f386:	613b      	str	r3, [r7, #16]
    f388:	e02b      	b.n	f3e2 <mp_obj_exception_make_new+0xa2>
    } else {
        // Try to allocate memory for the tuple containing the args
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    f38a:	68bb      	ldr	r3, [r7, #8]
    f38c:	3302      	adds	r3, #2
    f38e:	009b      	lsls	r3, r3, #2
    f390:	4618      	mov	r0, r3
    f392:	f7f0 ffdb 	bl	34c <m_malloc_maybe>
    f396:	6138      	str	r0, [r7, #16]

        #if MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
        // If we are called by mp_obj_new_exception_msg_varg then it will have
        // reserved room (after the traceback data) for a tuple with 1 element.
        // Otherwise we are free to use the whole buffer after the traceback data.
        if (o_tuple == NULL && mp_emergency_exception_buf_size >=
    f398:	693b      	ldr	r3, [r7, #16]
    f39a:	2b00      	cmp	r3, #0
    f39c:	d10c      	bne.n	f3b8 <mp_obj_exception_make_new+0x78>
    f39e:	4b17      	ldr	r3, [pc, #92]	; (f3fc <mp_obj_exception_make_new+0xbc>)
    f3a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    f3a4:	461a      	mov	r2, r3
            EMG_TRACEBACK_ALLOC * sizeof(size_t) + sizeof(mp_obj_tuple_t) + n_args * sizeof(mp_obj_t)) {
    f3a6:	68bb      	ldr	r3, [r7, #8]
    f3a8:	3308      	adds	r3, #8
    f3aa:	009b      	lsls	r3, r3, #2
        if (o_tuple == NULL && mp_emergency_exception_buf_size >=
    f3ac:	429a      	cmp	r2, r3
    f3ae:	d303      	bcc.n	f3b8 <mp_obj_exception_make_new+0x78>
            o_tuple = (mp_obj_tuple_t*)
                ((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf) + EMG_TRACEBACK_ALLOC * sizeof(size_t));
    f3b0:	4b12      	ldr	r3, [pc, #72]	; (f3fc <mp_obj_exception_make_new+0xbc>)
    f3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            o_tuple = (mp_obj_tuple_t*)
    f3b4:	3318      	adds	r3, #24
    f3b6:	613b      	str	r3, [r7, #16]
        }
        #endif

        if (o_tuple == NULL) {
    f3b8:	693b      	ldr	r3, [r7, #16]
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	d102      	bne.n	f3c4 <mp_obj_exception_make_new+0x84>
            // No memory for a tuple, fallback to an empty tuple
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f3be:	4b0e      	ldr	r3, [pc, #56]	; (f3f8 <mp_obj_exception_make_new+0xb8>)
    f3c0:	613b      	str	r3, [r7, #16]
    f3c2:	e00e      	b.n	f3e2 <mp_obj_exception_make_new+0xa2>
        } else {
            // Have memory for a tuple so populate it
            o_tuple->base.type = &mp_type_tuple;
    f3c4:	693b      	ldr	r3, [r7, #16]
    f3c6:	4a0e      	ldr	r2, [pc, #56]	; (f400 <mp_obj_exception_make_new+0xc0>)
    f3c8:	601a      	str	r2, [r3, #0]
            o_tuple->len = n_args;
    f3ca:	693b      	ldr	r3, [r7, #16]
    f3cc:	68ba      	ldr	r2, [r7, #8]
    f3ce:	605a      	str	r2, [r3, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    f3d0:	693b      	ldr	r3, [r7, #16]
    f3d2:	f103 0008 	add.w	r0, r3, #8
    f3d6:	68bb      	ldr	r3, [r7, #8]
    f3d8:	009b      	lsls	r3, r3, #2
    f3da:	461a      	mov	r2, r3
    f3dc:	6839      	ldr	r1, [r7, #0]
    f3de:	f00c fc99 	bl	1bd14 <memcpy>
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    f3e2:	697b      	ldr	r3, [r7, #20]
    f3e4:	693a      	ldr	r2, [r7, #16]
    f3e6:	60da      	str	r2, [r3, #12]

    return MP_OBJ_FROM_PTR(o_exc);
    f3e8:	697b      	ldr	r3, [r7, #20]
}
    f3ea:	4618      	mov	r0, r3
    f3ec:	3718      	adds	r7, #24
    f3ee:	46bd      	mov	sp, r7
    f3f0:	bd80      	pop	{r7, pc}
    f3f2:	bf00      	nop
    f3f4:	20000a40 	.word	0x20000a40
    f3f8:	00021df0 	.word	0x00021df0
    f3fc:	20000a2c 	.word	0x20000a2c
    f400:	00021db4 	.word	0x00021db4

0000f404 <mp_obj_exception_get_value>:

// Get exception "value" - that is, first argument, or None
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in) {
    f404:	b480      	push	{r7}
    f406:	b085      	sub	sp, #20
    f408:	af00      	add	r7, sp, #0
    f40a:	6078      	str	r0, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f40c:	687b      	ldr	r3, [r7, #4]
    f40e:	60fb      	str	r3, [r7, #12]
    if (self->args->len == 0) {
    f410:	68fb      	ldr	r3, [r7, #12]
    f412:	68db      	ldr	r3, [r3, #12]
    f414:	685b      	ldr	r3, [r3, #4]
    f416:	2b00      	cmp	r3, #0
    f418:	d101      	bne.n	f41e <mp_obj_exception_get_value+0x1a>
        return mp_const_none;
    f41a:	4b05      	ldr	r3, [pc, #20]	; (f430 <mp_obj_exception_get_value+0x2c>)
    f41c:	e002      	b.n	f424 <mp_obj_exception_get_value+0x20>
    } else {
        return self->args->items[0];
    f41e:	68fb      	ldr	r3, [r7, #12]
    f420:	68db      	ldr	r3, [r3, #12]
    f422:	689b      	ldr	r3, [r3, #8]
    }
}
    f424:	4618      	mov	r0, r3
    f426:	3714      	adds	r7, #20
    f428:	46bd      	mov	sp, r7
    f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f42e:	4770      	bx	lr
    f430:	00021480 	.word	0x00021480

0000f434 <mp_obj_exception_attr>:

void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    f434:	b580      	push	{r7, lr}
    f436:	b086      	sub	sp, #24
    f438:	af00      	add	r7, sp, #0
    f43a:	60f8      	str	r0, [r7, #12]
    f43c:	60b9      	str	r1, [r7, #8]
    f43e:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f440:	68fb      	ldr	r3, [r7, #12]
    f442:	617b      	str	r3, [r7, #20]
    if (dest[0] != MP_OBJ_NULL) {
    f444:	687b      	ldr	r3, [r7, #4]
    f446:	681b      	ldr	r3, [r3, #0]
    f448:	2b00      	cmp	r3, #0
    f44a:	d00f      	beq.n	f46c <mp_obj_exception_attr+0x38>
        // store/delete attribute
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    f44c:	68bb      	ldr	r3, [r7, #8]
    f44e:	2b25      	cmp	r3, #37	; 0x25
    f450:	d123      	bne.n	f49a <mp_obj_exception_attr+0x66>
    f452:	687b      	ldr	r3, [r7, #4]
    f454:	3304      	adds	r3, #4
    f456:	681b      	ldr	r3, [r3, #0]
    f458:	4a12      	ldr	r2, [pc, #72]	; (f4a4 <mp_obj_exception_attr+0x70>)
    f45a:	4293      	cmp	r3, r2
    f45c:	d11d      	bne.n	f49a <mp_obj_exception_attr+0x66>
            // optimization of pre-allocating exception instance and raising
            // it repeatedly - this avoids memory allocation during raise.
            // However, uPy will keep adding traceback entries to such
            // exception instance, so before throwing it, traceback should
            // be cleared like above.
            self->traceback_len = 0;
    f45e:	697b      	ldr	r3, [r7, #20]
    f460:	2200      	movs	r2, #0
    f462:	80da      	strh	r2, [r3, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    f464:	687b      	ldr	r3, [r7, #4]
    f466:	2200      	movs	r2, #0
    f468:	601a      	str	r2, [r3, #0]
        }
        return;
    f46a:	e016      	b.n	f49a <mp_obj_exception_attr+0x66>
    }
    if (attr == MP_QSTR_args) {
    f46c:	68bb      	ldr	r3, [r7, #8]
    f46e:	2b6b      	cmp	r3, #107	; 0x6b
    f470:	d104      	bne.n	f47c <mp_obj_exception_attr+0x48>
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    f472:	697b      	ldr	r3, [r7, #20]
    f474:	68da      	ldr	r2, [r3, #12]
    f476:	687b      	ldr	r3, [r7, #4]
    f478:	601a      	str	r2, [r3, #0]
    f47a:	e00f      	b.n	f49c <mp_obj_exception_attr+0x68>
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    f47c:	697b      	ldr	r3, [r7, #20]
    f47e:	681b      	ldr	r3, [r3, #0]
    f480:	4a09      	ldr	r2, [pc, #36]	; (f4a8 <mp_obj_exception_attr+0x74>)
    f482:	4293      	cmp	r3, r2
    f484:	d10a      	bne.n	f49c <mp_obj_exception_attr+0x68>
    f486:	68bb      	ldr	r3, [r7, #8]
    f488:	2bde      	cmp	r3, #222	; 0xde
    f48a:	d107      	bne.n	f49c <mp_obj_exception_attr+0x68>
        dest[0] = mp_obj_exception_get_value(self_in);
    f48c:	68f8      	ldr	r0, [r7, #12]
    f48e:	f7ff ffb9 	bl	f404 <mp_obj_exception_get_value>
    f492:	4602      	mov	r2, r0
    f494:	687b      	ldr	r3, [r7, #4]
    f496:	601a      	str	r2, [r3, #0]
    f498:	e000      	b.n	f49c <mp_obj_exception_attr+0x68>
        return;
    f49a:	bf00      	nop
    }
}
    f49c:	3718      	adds	r7, #24
    f49e:	46bd      	mov	sp, r7
    f4a0:	bd80      	pop	{r7, pc}
    f4a2:	bf00      	nop
    f4a4:	00021480 	.word	0x00021480
    f4a8:	00020310 	.word	0x00020310

0000f4ac <mp_obj_new_exception>:
    MP_DEFINE_EXCEPTION(UnicodeWarning, Warning)
    MP_DEFINE_EXCEPTION(BytesWarning, Warning)
    MP_DEFINE_EXCEPTION(ResourceWarning, Warning)
    */

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    f4ac:	b580      	push	{r7, lr}
    f4ae:	b082      	sub	sp, #8
    f4b0:	af00      	add	r7, sp, #0
    f4b2:	6078      	str	r0, [r7, #4]
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    f4b4:	2200      	movs	r2, #0
    f4b6:	2100      	movs	r1, #0
    f4b8:	6878      	ldr	r0, [r7, #4]
    f4ba:	f000 f815 	bl	f4e8 <mp_obj_new_exception_args>
    f4be:	4603      	mov	r3, r0
}
    f4c0:	4618      	mov	r0, r3
    f4c2:	3708      	adds	r7, #8
    f4c4:	46bd      	mov	sp, r7
    f4c6:	bd80      	pop	{r7, pc}

0000f4c8 <mp_obj_new_exception_arg1>:

// "Optimized" version for common(?) case of having 1 exception arg
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    f4c8:	b580      	push	{r7, lr}
    f4ca:	b082      	sub	sp, #8
    f4cc:	af00      	add	r7, sp, #0
    f4ce:	6078      	str	r0, [r7, #4]
    f4d0:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    f4d2:	463b      	mov	r3, r7
    f4d4:	461a      	mov	r2, r3
    f4d6:	2101      	movs	r1, #1
    f4d8:	6878      	ldr	r0, [r7, #4]
    f4da:	f000 f805 	bl	f4e8 <mp_obj_new_exception_args>
    f4de:	4603      	mov	r3, r0
}
    f4e0:	4618      	mov	r0, r3
    f4e2:	3708      	adds	r7, #8
    f4e4:	46bd      	mov	sp, r7
    f4e6:	bd80      	pop	{r7, pc}

0000f4e8 <mp_obj_new_exception_args>:

mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    f4e8:	b590      	push	{r4, r7, lr}
    f4ea:	b085      	sub	sp, #20
    f4ec:	af00      	add	r7, sp, #0
    f4ee:	60f8      	str	r0, [r7, #12]
    f4f0:	60b9      	str	r1, [r7, #8]
    f4f2:	607a      	str	r2, [r7, #4]
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f4f4:	68fb      	ldr	r3, [r7, #12]
    f4f6:	68db      	ldr	r3, [r3, #12]
    f4f8:	4a0a      	ldr	r2, [pc, #40]	; (f524 <mp_obj_new_exception_args+0x3c>)
    f4fa:	4293      	cmp	r3, r2
    f4fc:	d006      	beq.n	f50c <mp_obj_new_exception_args+0x24>
    f4fe:	4b0a      	ldr	r3, [pc, #40]	; (f528 <mp_obj_new_exception_args+0x40>)
    f500:	4a0a      	ldr	r2, [pc, #40]	; (f52c <mp_obj_new_exception_args+0x44>)
    f502:	f240 1137 	movw	r1, #311	; 0x137
    f506:	480a      	ldr	r0, [pc, #40]	; (f530 <mp_obj_new_exception_args+0x48>)
    f508:	f00b ff48 	bl	1b39c <__assert_func>
    return exc_type->make_new(exc_type, n_args, 0, args);
    f50c:	68fb      	ldr	r3, [r7, #12]
    f50e:	68dc      	ldr	r4, [r3, #12]
    f510:	687b      	ldr	r3, [r7, #4]
    f512:	2200      	movs	r2, #0
    f514:	68b9      	ldr	r1, [r7, #8]
    f516:	68f8      	ldr	r0, [r7, #12]
    f518:	47a0      	blx	r4
    f51a:	4603      	mov	r3, r0
}
    f51c:	4618      	mov	r0, r3
    f51e:	3714      	adds	r7, #20
    f520:	46bd      	mov	sp, r7
    f522:	bd90      	pop	{r4, r7, pc}
    f524:	0000f341 	.word	0x0000f341
    f528:	000207c0 	.word	0x000207c0
    f52c:	0002083c 	.word	0x0002083c
    f530:	000207f0 	.word	0x000207f0

0000f534 <mp_obj_new_exception_msg>:

mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    f534:	b580      	push	{r7, lr}
    f536:	b082      	sub	sp, #8
    f538:	af00      	add	r7, sp, #0
    f53a:	6078      	str	r0, [r7, #4]
    f53c:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    f53e:	6839      	ldr	r1, [r7, #0]
    f540:	6878      	ldr	r0, [r7, #4]
    f542:	f000 f857 	bl	f5f4 <mp_obj_new_exception_msg_varg>
    f546:	4603      	mov	r3, r0
}
    f548:	4618      	mov	r0, r3
    f54a:	3708      	adds	r7, #8
    f54c:	46bd      	mov	sp, r7
    f54e:	bd80      	pop	{r7, pc}

0000f550 <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    f550:	b580      	push	{r7, lr}
    f552:	b088      	sub	sp, #32
    f554:	af00      	add	r7, sp, #0
    f556:	60f8      	str	r0, [r7, #12]
    f558:	60b9      	str	r1, [r7, #8]
    f55a:	607a      	str	r2, [r7, #4]
    struct _exc_printer_t *pr = data;
    f55c:	68fb      	ldr	r3, [r7, #12]
    f55e:	61fb      	str	r3, [r7, #28]
    if (pr->len + len >= pr->alloc) {
    f560:	69fb      	ldr	r3, [r7, #28]
    f562:	689a      	ldr	r2, [r3, #8]
    f564:	687b      	ldr	r3, [r7, #4]
    f566:	441a      	add	r2, r3
    f568:	69fb      	ldr	r3, [r7, #28]
    f56a:	685b      	ldr	r3, [r3, #4]
    f56c:	429a      	cmp	r2, r3
    f56e:	d32d      	bcc.n	f5cc <exc_add_strn+0x7c>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    f570:	69fb      	ldr	r3, [r7, #28]
    f572:	781b      	ldrb	r3, [r3, #0]
    f574:	2b00      	cmp	r3, #0
    f576:	d022      	beq.n	f5be <exc_add_strn+0x6e>
            size_t new_alloc = pr->alloc + len + 16;
    f578:	69fb      	ldr	r3, [r7, #28]
    f57a:	685a      	ldr	r2, [r3, #4]
    f57c:	687b      	ldr	r3, [r7, #4]
    f57e:	4413      	add	r3, r2
    f580:	3310      	adds	r3, #16
    f582:	61bb      	str	r3, [r7, #24]
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    f584:	69fb      	ldr	r3, [r7, #28]
    f586:	68db      	ldr	r3, [r3, #12]
    f588:	2201      	movs	r2, #1
    f58a:	69b9      	ldr	r1, [r7, #24]
    f58c:	4618      	mov	r0, r3
    f58e:	f7f0 ff13 	bl	3b8 <m_realloc_maybe>
    f592:	6178      	str	r0, [r7, #20]
            if (new_buf == NULL) {
    f594:	697b      	ldr	r3, [r7, #20]
    f596:	2b00      	cmp	r3, #0
    f598:	d10a      	bne.n	f5b0 <exc_add_strn+0x60>
                pr->allow_realloc = false;
    f59a:	69fb      	ldr	r3, [r7, #28]
    f59c:	2200      	movs	r2, #0
    f59e:	701a      	strb	r2, [r3, #0]
                len = pr->alloc - pr->len - 1;
    f5a0:	69fb      	ldr	r3, [r7, #28]
    f5a2:	685a      	ldr	r2, [r3, #4]
    f5a4:	69fb      	ldr	r3, [r7, #28]
    f5a6:	689b      	ldr	r3, [r3, #8]
    f5a8:	1ad3      	subs	r3, r2, r3
    f5aa:	3b01      	subs	r3, #1
    f5ac:	607b      	str	r3, [r7, #4]
    f5ae:	e00d      	b.n	f5cc <exc_add_strn+0x7c>
            } else {
                pr->alloc = new_alloc;
    f5b0:	69fb      	ldr	r3, [r7, #28]
    f5b2:	69ba      	ldr	r2, [r7, #24]
    f5b4:	605a      	str	r2, [r3, #4]
                pr->buf = new_buf;
    f5b6:	69fb      	ldr	r3, [r7, #28]
    f5b8:	697a      	ldr	r2, [r7, #20]
    f5ba:	60da      	str	r2, [r3, #12]
    f5bc:	e006      	b.n	f5cc <exc_add_strn+0x7c>
            }
        } else {
            len = pr->alloc - pr->len - 1;
    f5be:	69fb      	ldr	r3, [r7, #28]
    f5c0:	685a      	ldr	r2, [r3, #4]
    f5c2:	69fb      	ldr	r3, [r7, #28]
    f5c4:	689b      	ldr	r3, [r3, #8]
    f5c6:	1ad3      	subs	r3, r2, r3
    f5c8:	3b01      	subs	r3, #1
    f5ca:	607b      	str	r3, [r7, #4]
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    f5cc:	69fb      	ldr	r3, [r7, #28]
    f5ce:	68da      	ldr	r2, [r3, #12]
    f5d0:	69fb      	ldr	r3, [r7, #28]
    f5d2:	689b      	ldr	r3, [r3, #8]
    f5d4:	4413      	add	r3, r2
    f5d6:	687a      	ldr	r2, [r7, #4]
    f5d8:	68b9      	ldr	r1, [r7, #8]
    f5da:	4618      	mov	r0, r3
    f5dc:	f00c fb9a 	bl	1bd14 <memcpy>
    pr->len += len;
    f5e0:	69fb      	ldr	r3, [r7, #28]
    f5e2:	689a      	ldr	r2, [r3, #8]
    f5e4:	687b      	ldr	r3, [r7, #4]
    f5e6:	441a      	add	r2, r3
    f5e8:	69fb      	ldr	r3, [r7, #28]
    f5ea:	609a      	str	r2, [r3, #8]
}
    f5ec:	bf00      	nop
    f5ee:	3720      	adds	r7, #32
    f5f0:	46bd      	mov	sp, r7
    f5f2:	bd80      	pop	{r7, pc}

0000f5f4 <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    f5f4:	b40e      	push	{r1, r2, r3}
    f5f6:	b580      	push	{r7, lr}
    f5f8:	b08f      	sub	sp, #60	; 0x3c
    f5fa:	af00      	add	r7, sp, #0
    f5fc:	6078      	str	r0, [r7, #4]
    assert(fmt != NULL);
    f5fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f600:	2b00      	cmp	r3, #0
    f602:	d106      	bne.n	f612 <mp_obj_new_exception_msg_varg+0x1e>
    f604:	4b52      	ldr	r3, [pc, #328]	; (f750 <mp_obj_new_exception_msg_varg+0x15c>)
    f606:	4a53      	ldr	r2, [pc, #332]	; (f754 <mp_obj_new_exception_msg_varg+0x160>)
    f608:	f240 1161 	movw	r1, #353	; 0x161
    f60c:	4852      	ldr	r0, [pc, #328]	; (f758 <mp_obj_new_exception_msg_varg+0x164>)
    f60e:	f00b fec5 	bl	1b39c <__assert_func>

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f612:	687b      	ldr	r3, [r7, #4]
    f614:	68db      	ldr	r3, [r3, #12]
    f616:	4a51      	ldr	r2, [pc, #324]	; (f75c <mp_obj_new_exception_msg_varg+0x168>)
    f618:	4293      	cmp	r3, r2
    f61a:	d006      	beq.n	f62a <mp_obj_new_exception_msg_varg+0x36>
    f61c:	4b50      	ldr	r3, [pc, #320]	; (f760 <mp_obj_new_exception_msg_varg+0x16c>)
    f61e:	4a4d      	ldr	r2, [pc, #308]	; (f754 <mp_obj_new_exception_msg_varg+0x160>)
    f620:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f624:	484c      	ldr	r0, [pc, #304]	; (f758 <mp_obj_new_exception_msg_varg+0x164>)
    f626:	f00b feb9 	bl	1b39c <__assert_func>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    f62a:	2010      	movs	r0, #16
    f62c:	f7f0 fe8e 	bl	34c <m_malloc_maybe>
    f630:	6378      	str	r0, [r7, #52]	; 0x34
    size_t o_str_alloc = strlen(fmt) + 1;
    f632:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f634:	f00c fca8 	bl	1bf88 <strlen>
    f638:	4603      	mov	r3, r0
    f63a:	3301      	adds	r3, #1
    f63c:	633b      	str	r3, [r7, #48]	; 0x30
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    f63e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f640:	f7f0 fe84 	bl	34c <m_malloc_maybe>
    f644:	62f8      	str	r0, [r7, #44]	; 0x2c

    bool used_emg_buf = false;
    f646:	2300      	movs	r3, #0
    f648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    #if MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
    // If memory allocation failed and there is an emergency buffer then try to use
    // that buffer to store the string object and its data (at least 16 bytes for
    // the string data), reserving room at the start for the traceback and 1-tuple.
    if ((o_str == NULL || o_str_buf == NULL)
    f64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f64e:	2b00      	cmp	r3, #0
    f650:	d002      	beq.n	f658 <mp_obj_new_exception_msg_varg+0x64>
    f652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f654:	2b00      	cmp	r3, #0
    f656:	d118      	bne.n	f68a <mp_obj_new_exception_msg_varg+0x96>
        && mp_emergency_exception_buf_size >= EMG_TRACEBACK_ALLOC * sizeof(size_t)
    f658:	4b42      	ldr	r3, [pc, #264]	; (f764 <mp_obj_new_exception_msg_varg+0x170>)
    f65a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    f65e:	2b43      	cmp	r3, #67	; 0x43
    f660:	d913      	bls.n	f68a <mp_obj_new_exception_msg_varg+0x96>
            + sizeof(mp_obj_tuple_t) + sizeof(mp_obj_t) + sizeof(mp_obj_str_t) + 16) {
        used_emg_buf = true;
    f662:	2301      	movs	r3, #1
    f664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        o_str = (mp_obj_str_t*)((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
    f668:	4b3e      	ldr	r3, [pc, #248]	; (f764 <mp_obj_new_exception_msg_varg+0x170>)
    f66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f66c:	3324      	adds	r3, #36	; 0x24
    f66e:	637b      	str	r3, [r7, #52]	; 0x34
            + EMG_TRACEBACK_ALLOC * sizeof(size_t) + sizeof(mp_obj_tuple_t) + sizeof(mp_obj_t));
        o_str_buf = (byte*)&o_str[1];
    f670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f672:	3310      	adds	r3, #16
    f674:	62fb      	str	r3, [r7, #44]	; 0x2c
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
    f676:	4b3b      	ldr	r3, [pc, #236]	; (f764 <mp_obj_new_exception_msg_varg+0x170>)
    f678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            + mp_emergency_exception_buf_size - o_str_buf;
    f67a:	4a3a      	ldr	r2, [pc, #232]	; (f764 <mp_obj_new_exception_msg_varg+0x170>)
    f67c:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    f680:	4413      	add	r3, r2
    f682:	461a      	mov	r2, r3
    f684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f686:	1ad3      	subs	r3, r2, r3
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
    f688:	633b      	str	r3, [r7, #48]	; 0x30
    }
    #endif

    if (o_str == NULL) {
    f68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f68c:	2b00      	cmp	r3, #0
    f68e:	d107      	bne.n	f6a0 <mp_obj_new_exception_msg_varg+0xac>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    f690:	2300      	movs	r3, #0
    f692:	2200      	movs	r2, #0
    f694:	2100      	movs	r1, #0
    f696:	6878      	ldr	r0, [r7, #4]
    f698:	f7ff fe52 	bl	f340 <mp_obj_exception_make_new>
    f69c:	4603      	mov	r3, r0
    f69e:	e050      	b.n	f742 <mp_obj_new_exception_msg_varg+0x14e>
    }

    if (o_str_buf == NULL) {
    f6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f6a2:	2b00      	cmp	r3, #0
    f6a4:	d107      	bne.n	f6b6 <mp_obj_new_exception_msg_varg+0xc2>
        // No memory for the string buffer: assume that the fmt string is in ROM
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    f6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f6a8:	1e5a      	subs	r2, r3, #1
    f6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6ac:	609a      	str	r2, [r3, #8]
        o_str->data = (const byte*)fmt;
    f6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f6b2:	60da      	str	r2, [r3, #12]
    f6b4:	e02d      	b.n	f712 <mp_obj_new_exception_msg_varg+0x11e>
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    f6b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    f6ba:	2b00      	cmp	r3, #0
    f6bc:	bf14      	ite	ne
    f6be:	2301      	movne	r3, #1
    f6c0:	2300      	moveq	r3, #0
    f6c2:	b2db      	uxtb	r3, r3
    f6c4:	f083 0301 	eor.w	r3, r3, #1
    f6c8:	b2db      	uxtb	r3, r3
    f6ca:	f003 0301 	and.w	r3, r3, #1
    f6ce:	b2db      	uxtb	r3, r3
    f6d0:	753b      	strb	r3, [r7, #20]
    f6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f6d4:	61bb      	str	r3, [r7, #24]
    f6d6:	2300      	movs	r3, #0
    f6d8:	61fb      	str	r3, [r7, #28]
    f6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f6dc:	623b      	str	r3, [r7, #32]
        mp_print_t print = {&exc_pr, exc_add_strn};
    f6de:	f107 0314 	add.w	r3, r7, #20
    f6e2:	60fb      	str	r3, [r7, #12]
    f6e4:	4b20      	ldr	r3, [pc, #128]	; (f768 <mp_obj_new_exception_msg_varg+0x174>)
    f6e6:	613b      	str	r3, [r7, #16]
        va_list ap;
        va_start(ap, fmt);
    f6e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
    f6ec:	60bb      	str	r3, [r7, #8]
        mp_vprintf(&print, fmt, ap);
    f6ee:	f107 030c 	add.w	r3, r7, #12
    f6f2:	68ba      	ldr	r2, [r7, #8]
    f6f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
    f6f6:	4618      	mov	r0, r3
    f6f8:	f7f2 fbf8 	bl	1eec <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    f6fc:	6a3a      	ldr	r2, [r7, #32]
    f6fe:	69fb      	ldr	r3, [r7, #28]
    f700:	4413      	add	r3, r2
    f702:	2200      	movs	r2, #0
    f704:	701a      	strb	r2, [r3, #0]
        o_str->len = exc_pr.len;
    f706:	69fa      	ldr	r2, [r7, #28]
    f708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f70a:	609a      	str	r2, [r3, #8]
        o_str->data = exc_pr.buf;
    f70c:	6a3a      	ldr	r2, [r7, #32]
    f70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f710:	60da      	str	r2, [r3, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    f712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f714:	4a15      	ldr	r2, [pc, #84]	; (f76c <mp_obj_new_exception_msg_varg+0x178>)
    f716:	601a      	str	r2, [r3, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    f718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f71a:	68da      	ldr	r2, [r3, #12]
    f71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f71e:	689b      	ldr	r3, [r3, #8]
    f720:	4619      	mov	r1, r3
    f722:	4610      	mov	r0, r2
    f724:	f7f1 fb84 	bl	e30 <qstr_compute_hash>
    f728:	4602      	mov	r2, r0
    f72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f72c:	605a      	str	r2, [r3, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    f72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f730:	627b      	str	r3, [r7, #36]	; 0x24
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    f732:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f736:	2200      	movs	r2, #0
    f738:	2101      	movs	r1, #1
    f73a:	6878      	ldr	r0, [r7, #4]
    f73c:	f7ff fe00 	bl	f340 <mp_obj_exception_make_new>
    f740:	4603      	mov	r3, r0
}
    f742:	4618      	mov	r0, r3
    f744:	373c      	adds	r7, #60	; 0x3c
    f746:	46bd      	mov	sp, r7
    f748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f74c:	b003      	add	sp, #12
    f74e:	4770      	bx	lr
    f750:	00020808 	.word	0x00020808
    f754:	00020858 	.word	0x00020858
    f758:	000207f0 	.word	0x000207f0
    f75c:	0000f341 	.word	0x0000f341
    f760:	000207c0 	.word	0x000207c0
    f764:	20000a2c 	.word	0x20000a2c
    f768:	0000f551 	.word	0x0000f551
    f76c:	00021b30 	.word	0x00021b30

0000f770 <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    f770:	b580      	push	{r7, lr}
    f772:	b084      	sub	sp, #16
    f774:	af00      	add	r7, sp, #0
    f776:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    f778:	6878      	ldr	r0, [r7, #4]
    f77a:	f7ff fd2b 	bl	f1d4 <MP_OBJ_IS_OBJ>
    f77e:	4603      	mov	r3, r0
    f780:	2b00      	cmp	r3, #0
    f782:	d00d      	beq.n	f7a0 <mp_obj_is_exception_type+0x30>
    f784:	687b      	ldr	r3, [r7, #4]
    f786:	681b      	ldr	r3, [r3, #0]
    f788:	4a0a      	ldr	r2, [pc, #40]	; (f7b4 <mp_obj_is_exception_type+0x44>)
    f78a:	4293      	cmp	r3, r2
    f78c:	d108      	bne.n	f7a0 <mp_obj_is_exception_type+0x30>
        // optimisation when self_in is a builtin exception
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
    f78e:	687b      	ldr	r3, [r7, #4]
    f790:	60fb      	str	r3, [r7, #12]
        if (self->make_new == mp_obj_exception_make_new) {
    f792:	68fb      	ldr	r3, [r7, #12]
    f794:	68db      	ldr	r3, [r3, #12]
    f796:	4a08      	ldr	r2, [pc, #32]	; (f7b8 <mp_obj_is_exception_type+0x48>)
    f798:	4293      	cmp	r3, r2
    f79a:	d101      	bne.n	f7a0 <mp_obj_is_exception_type+0x30>
            return true;
    f79c:	2301      	movs	r3, #1
    f79e:	e004      	b.n	f7aa <mp_obj_is_exception_type+0x3a>
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    f7a0:	4906      	ldr	r1, [pc, #24]	; (f7bc <mp_obj_is_exception_type+0x4c>)
    f7a2:	6878      	ldr	r0, [r7, #4]
    f7a4:	f007 fd8a 	bl	172bc <mp_obj_is_subclass_fast>
    f7a8:	4603      	mov	r3, r0
}
    f7aa:	4618      	mov	r0, r3
    f7ac:	3710      	adds	r7, #16
    f7ae:	46bd      	mov	sp, r7
    f7b0:	bd80      	pop	{r7, pc}
    f7b2:	bf00      	nop
    f7b4:	000220ac 	.word	0x000220ac
    f7b8:	0000f341 	.word	0x0000f341
    f7bc:	000201e4 	.word	0x000201e4

0000f7c0 <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    f7c0:	b580      	push	{r7, lr}
    f7c2:	b082      	sub	sp, #8
    f7c4:	af00      	add	r7, sp, #0
    f7c6:	6078      	str	r0, [r7, #4]
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    f7c8:	6878      	ldr	r0, [r7, #4]
    f7ca:	f7fd ffff 	bl	d7cc <mp_obj_get_type>
    f7ce:	4603      	mov	r3, r0
    f7d0:	4618      	mov	r0, r3
    f7d2:	f7ff ffcd 	bl	f770 <mp_obj_is_exception_type>
    f7d6:	4603      	mov	r3, r0
}
    f7d8:	4618      	mov	r0, r3
    f7da:	3708      	adds	r7, #8
    f7dc:	46bd      	mov	sp, r7
    f7de:	bd80      	pop	{r7, pc}

0000f7e0 <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    f7e0:	b580      	push	{r7, lr}
    f7e2:	b082      	sub	sp, #8
    f7e4:	af00      	add	r7, sp, #0
    f7e6:	6078      	str	r0, [r7, #4]
    f7e8:	6039      	str	r1, [r7, #0]
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    f7ea:	6878      	ldr	r0, [r7, #4]
    f7ec:	f7ff ffe8 	bl	f7c0 <mp_obj_is_exception_instance>
    f7f0:	4603      	mov	r3, r0
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	d003      	beq.n	f7fe <mp_obj_exception_match+0x1e>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    f7f6:	6878      	ldr	r0, [r7, #4]
    f7f8:	f7fd ffe8 	bl	d7cc <mp_obj_get_type>
    f7fc:	6078      	str	r0, [r7, #4]
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    f7fe:	6839      	ldr	r1, [r7, #0]
    f800:	6878      	ldr	r0, [r7, #4]
    f802:	f007 fd5b 	bl	172bc <mp_obj_is_subclass_fast>
    f806:	4603      	mov	r3, r0
}
    f808:	4618      	mov	r0, r3
    f80a:	3708      	adds	r7, #8
    f80c:	46bd      	mov	sp, r7
    f80e:	bd80      	pop	{r7, pc}

0000f810 <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    f810:	b580      	push	{r7, lr}
    f812:	b084      	sub	sp, #16
    f814:	af00      	add	r7, sp, #0
    f816:	6078      	str	r0, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f818:	6878      	ldr	r0, [r7, #4]
    f81a:	f7ff ffd1 	bl	f7c0 <mp_obj_is_exception_instance>
    f81e:	4603      	mov	r3, r0
    f820:	2b00      	cmp	r3, #0
    f822:	d106      	bne.n	f832 <mp_obj_exception_clear_traceback+0x22>
    f824:	4b0d      	ldr	r3, [pc, #52]	; (f85c <mp_obj_exception_clear_traceback+0x4c>)
    f826:	4a0e      	ldr	r2, [pc, #56]	; (f860 <mp_obj_exception_clear_traceback+0x50>)
    f828:	f240 11c3 	movw	r1, #451	; 0x1c3
    f82c:	480d      	ldr	r0, [pc, #52]	; (f864 <mp_obj_exception_clear_traceback+0x54>)
    f82e:	f00b fdb5 	bl	1b39c <__assert_func>
    f832:	6878      	ldr	r0, [r7, #4]
    f834:	f7fd ffca 	bl	d7cc <mp_obj_get_type>
    f838:	4603      	mov	r3, r0
    f83a:	68db      	ldr	r3, [r3, #12]
    f83c:	4a0a      	ldr	r2, [pc, #40]	; (f868 <mp_obj_exception_clear_traceback+0x58>)
    f83e:	4293      	cmp	r3, r2
    f840:	d102      	bne.n	f848 <mp_obj_exception_clear_traceback+0x38>
    f842:	687b      	ldr	r3, [r7, #4]
    f844:	60fb      	str	r3, [r7, #12]
    f846:	e002      	b.n	f84e <mp_obj_exception_clear_traceback+0x3e>
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	691b      	ldr	r3, [r3, #16]
    f84c:	60fb      	str	r3, [r7, #12]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    f84e:	68fb      	ldr	r3, [r7, #12]
    f850:	2200      	movs	r2, #0
    f852:	609a      	str	r2, [r3, #8]
}
    f854:	bf00      	nop
    f856:	3710      	adds	r7, #16
    f858:	46bd      	mov	sp, r7
    f85a:	bd80      	pop	{r7, pc}
    f85c:	00020814 	.word	0x00020814
    f860:	00020878 	.word	0x00020878
    f864:	000207f0 	.word	0x000207f0
    f868:	0000f341 	.word	0x0000f341

0000f86c <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    f86c:	b580      	push	{r7, lr}
    f86e:	b088      	sub	sp, #32
    f870:	af00      	add	r7, sp, #0
    f872:	60f8      	str	r0, [r7, #12]
    f874:	60b9      	str	r1, [r7, #8]
    f876:	607a      	str	r2, [r7, #4]
    f878:	603b      	str	r3, [r7, #0]
    GET_NATIVE_EXCEPTION(self, self_in);
    f87a:	68f8      	ldr	r0, [r7, #12]
    f87c:	f7ff ffa0 	bl	f7c0 <mp_obj_is_exception_instance>
    f880:	4603      	mov	r3, r0
    f882:	2b00      	cmp	r3, #0
    f884:	d106      	bne.n	f894 <mp_obj_exception_add_traceback+0x28>
    f886:	4b3f      	ldr	r3, [pc, #252]	; (f984 <mp_obj_exception_add_traceback+0x118>)
    f888:	4a3f      	ldr	r2, [pc, #252]	; (f988 <mp_obj_exception_add_traceback+0x11c>)
    f88a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    f88e:	483f      	ldr	r0, [pc, #252]	; (f98c <mp_obj_exception_add_traceback+0x120>)
    f890:	f00b fd84 	bl	1b39c <__assert_func>
    f894:	68f8      	ldr	r0, [r7, #12]
    f896:	f7fd ff99 	bl	d7cc <mp_obj_get_type>
    f89a:	4603      	mov	r3, r0
    f89c:	68db      	ldr	r3, [r3, #12]
    f89e:	4a3c      	ldr	r2, [pc, #240]	; (f990 <mp_obj_exception_add_traceback+0x124>)
    f8a0:	4293      	cmp	r3, r2
    f8a2:	d102      	bne.n	f8aa <mp_obj_exception_add_traceback+0x3e>
    f8a4:	68fb      	ldr	r3, [r7, #12]
    f8a6:	61fb      	str	r3, [r7, #28]
    f8a8:	e002      	b.n	f8b0 <mp_obj_exception_add_traceback+0x44>
    f8aa:	68fb      	ldr	r3, [r7, #12]
    f8ac:	691b      	ldr	r3, [r3, #16]
    f8ae:	61fb      	str	r3, [r7, #28]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    f8b0:	69fb      	ldr	r3, [r7, #28]
    f8b2:	689b      	ldr	r3, [r3, #8]
    f8b4:	2b00      	cmp	r3, #0
    f8b6:	d11f      	bne.n	f8f8 <mp_obj_exception_add_traceback+0x8c>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    f8b8:	200c      	movs	r0, #12
    f8ba:	f7f0 fd47 	bl	34c <m_malloc_maybe>
    f8be:	4602      	mov	r2, r0
    f8c0:	69fb      	ldr	r3, [r7, #28]
    f8c2:	609a      	str	r2, [r3, #8]
        if (self->traceback_data == NULL) {
    f8c4:	69fb      	ldr	r3, [r7, #28]
    f8c6:	689b      	ldr	r3, [r3, #8]
    f8c8:	2b00      	cmp	r3, #0
    f8ca:	d10e      	bne.n	f8ea <mp_obj_exception_add_traceback+0x7e>
            #if MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
            if (mp_emergency_exception_buf_size >= EMG_TRACEBACK_ALLOC * sizeof(size_t)) {
    f8cc:	4b31      	ldr	r3, [pc, #196]	; (f994 <mp_obj_exception_add_traceback+0x128>)
    f8ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    f8d2:	2b17      	cmp	r3, #23
    f8d4:	d94d      	bls.n	f972 <mp_obj_exception_add_traceback+0x106>
                // There is room in the emergency buffer for traceback data
                size_t *tb = (size_t*)MP_STATE_VM(mp_emergency_exception_buf);
    f8d6:	4b2f      	ldr	r3, [pc, #188]	; (f994 <mp_obj_exception_add_traceback+0x128>)
    f8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f8da:	61bb      	str	r3, [r7, #24]
                self->traceback_data = tb;
    f8dc:	69fb      	ldr	r3, [r7, #28]
    f8de:	69ba      	ldr	r2, [r7, #24]
    f8e0:	609a      	str	r2, [r3, #8]
                self->traceback_alloc = EMG_TRACEBACK_ALLOC;
    f8e2:	69fb      	ldr	r3, [r7, #28]
    f8e4:	2206      	movs	r2, #6
    f8e6:	809a      	strh	r2, [r3, #4]
    f8e8:	e002      	b.n	f8f0 <mp_obj_exception_add_traceback+0x84>
            // Can't allocate
            return;
            #endif
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    f8ea:	69fb      	ldr	r3, [r7, #28]
    f8ec:	2203      	movs	r2, #3
    f8ee:	809a      	strh	r2, [r3, #4]
        }
        self->traceback_len = 0;
    f8f0:	69fb      	ldr	r3, [r7, #28]
    f8f2:	2200      	movs	r2, #0
    f8f4:	80da      	strh	r2, [r3, #6]
    f8f6:	e023      	b.n	f940 <mp_obj_exception_add_traceback+0xd4>
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    f8f8:	69fb      	ldr	r3, [r7, #28]
    f8fa:	88db      	ldrh	r3, [r3, #6]
    f8fc:	3303      	adds	r3, #3
    f8fe:	69fa      	ldr	r2, [r7, #28]
    f900:	8892      	ldrh	r2, [r2, #4]
    f902:	4293      	cmp	r3, r2
    f904:	dd1c      	ble.n	f940 <mp_obj_exception_add_traceback+0xd4>
        #if MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
        if (self->traceback_data == (size_t*)MP_STATE_VM(mp_emergency_exception_buf)) {
    f906:	69fb      	ldr	r3, [r7, #28]
    f908:	689a      	ldr	r2, [r3, #8]
    f90a:	4b22      	ldr	r3, [pc, #136]	; (f994 <mp_obj_exception_add_traceback+0x128>)
    f90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f90e:	429a      	cmp	r2, r3
    f910:	d031      	beq.n	f976 <mp_obj_exception_add_traceback+0x10a>
            // Can't resize the emergency buffer
            return;
        }
        #endif
        // be conservative with growing traceback data
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    f912:	69fb      	ldr	r3, [r7, #28]
    f914:	6898      	ldr	r0, [r3, #8]
    f916:	69fb      	ldr	r3, [r7, #28]
    f918:	889b      	ldrh	r3, [r3, #4]
    f91a:	3303      	adds	r3, #3
    f91c:	009b      	lsls	r3, r3, #2
    f91e:	2201      	movs	r2, #1
    f920:	4619      	mov	r1, r3
    f922:	f7f0 fd49 	bl	3b8 <m_realloc_maybe>
    f926:	6178      	str	r0, [r7, #20]
            self->traceback_alloc + TRACEBACK_ENTRY_LEN, true);
        if (tb_data == NULL) {
    f928:	697b      	ldr	r3, [r7, #20]
    f92a:	2b00      	cmp	r3, #0
    f92c:	d025      	beq.n	f97a <mp_obj_exception_add_traceback+0x10e>
            return;
        }
        self->traceback_data = tb_data;
    f92e:	69fb      	ldr	r3, [r7, #28]
    f930:	697a      	ldr	r2, [r7, #20]
    f932:	609a      	str	r2, [r3, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    f934:	69fb      	ldr	r3, [r7, #28]
    f936:	889b      	ldrh	r3, [r3, #4]
    f938:	3303      	adds	r3, #3
    f93a:	b29a      	uxth	r2, r3
    f93c:	69fb      	ldr	r3, [r7, #28]
    f93e:	809a      	strh	r2, [r3, #4]
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    f940:	69fb      	ldr	r3, [r7, #28]
    f942:	689a      	ldr	r2, [r3, #8]
    f944:	69fb      	ldr	r3, [r7, #28]
    f946:	88db      	ldrh	r3, [r3, #6]
    f948:	009b      	lsls	r3, r3, #2
    f94a:	4413      	add	r3, r2
    f94c:	613b      	str	r3, [r7, #16]
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    f94e:	69fb      	ldr	r3, [r7, #28]
    f950:	88db      	ldrh	r3, [r3, #6]
    f952:	3303      	adds	r3, #3
    f954:	b29a      	uxth	r2, r3
    f956:	69fb      	ldr	r3, [r7, #28]
    f958:	80da      	strh	r2, [r3, #6]
    tb_data[0] = file;
    f95a:	693b      	ldr	r3, [r7, #16]
    f95c:	68ba      	ldr	r2, [r7, #8]
    f95e:	601a      	str	r2, [r3, #0]
    tb_data[1] = line;
    f960:	693b      	ldr	r3, [r7, #16]
    f962:	3304      	adds	r3, #4
    f964:	687a      	ldr	r2, [r7, #4]
    f966:	601a      	str	r2, [r3, #0]
    tb_data[2] = block;
    f968:	693b      	ldr	r3, [r7, #16]
    f96a:	3308      	adds	r3, #8
    f96c:	683a      	ldr	r2, [r7, #0]
    f96e:	601a      	str	r2, [r3, #0]
    f970:	e004      	b.n	f97c <mp_obj_exception_add_traceback+0x110>
                return;
    f972:	bf00      	nop
    f974:	e002      	b.n	f97c <mp_obj_exception_add_traceback+0x110>
            return;
    f976:	bf00      	nop
    f978:	e000      	b.n	f97c <mp_obj_exception_add_traceback+0x110>
            return;
    f97a:	bf00      	nop
}
    f97c:	3720      	adds	r7, #32
    f97e:	46bd      	mov	sp, r7
    f980:	bd80      	pop	{r7, pc}
    f982:	bf00      	nop
    f984:	00020814 	.word	0x00020814
    f988:	0002089c 	.word	0x0002089c
    f98c:	000207f0 	.word	0x000207f0
    f990:	0000f341 	.word	0x0000f341
    f994:	20000a2c 	.word	0x20000a2c

0000f998 <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    f998:	b580      	push	{r7, lr}
    f99a:	b086      	sub	sp, #24
    f99c:	af00      	add	r7, sp, #0
    f99e:	60f8      	str	r0, [r7, #12]
    f9a0:	60b9      	str	r1, [r7, #8]
    f9a2:	607a      	str	r2, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f9a4:	68f8      	ldr	r0, [r7, #12]
    f9a6:	f7ff ff0b 	bl	f7c0 <mp_obj_is_exception_instance>
    f9aa:	4603      	mov	r3, r0
    f9ac:	2b00      	cmp	r3, #0
    f9ae:	d106      	bne.n	f9be <mp_obj_exception_get_traceback+0x26>
    f9b0:	4b16      	ldr	r3, [pc, #88]	; (fa0c <mp_obj_exception_get_traceback+0x74>)
    f9b2:	4a17      	ldr	r2, [pc, #92]	; (fa10 <mp_obj_exception_get_traceback+0x78>)
    f9b4:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    f9b8:	4816      	ldr	r0, [pc, #88]	; (fa14 <mp_obj_exception_get_traceback+0x7c>)
    f9ba:	f00b fcef 	bl	1b39c <__assert_func>
    f9be:	68f8      	ldr	r0, [r7, #12]
    f9c0:	f7fd ff04 	bl	d7cc <mp_obj_get_type>
    f9c4:	4603      	mov	r3, r0
    f9c6:	68db      	ldr	r3, [r3, #12]
    f9c8:	4a13      	ldr	r2, [pc, #76]	; (fa18 <mp_obj_exception_get_traceback+0x80>)
    f9ca:	4293      	cmp	r3, r2
    f9cc:	d102      	bne.n	f9d4 <mp_obj_exception_get_traceback+0x3c>
    f9ce:	68fb      	ldr	r3, [r7, #12]
    f9d0:	617b      	str	r3, [r7, #20]
    f9d2:	e002      	b.n	f9da <mp_obj_exception_get_traceback+0x42>
    f9d4:	68fb      	ldr	r3, [r7, #12]
    f9d6:	691b      	ldr	r3, [r3, #16]
    f9d8:	617b      	str	r3, [r7, #20]

    if (self->traceback_data == NULL) {
    f9da:	697b      	ldr	r3, [r7, #20]
    f9dc:	689b      	ldr	r3, [r3, #8]
    f9de:	2b00      	cmp	r3, #0
    f9e0:	d106      	bne.n	f9f0 <mp_obj_exception_get_traceback+0x58>
        *n = 0;
    f9e2:	68bb      	ldr	r3, [r7, #8]
    f9e4:	2200      	movs	r2, #0
    f9e6:	601a      	str	r2, [r3, #0]
        *values = NULL;
    f9e8:	687b      	ldr	r3, [r7, #4]
    f9ea:	2200      	movs	r2, #0
    f9ec:	601a      	str	r2, [r3, #0]
    } else {
        *n = self->traceback_len;
        *values = self->traceback_data;
    }
}
    f9ee:	e008      	b.n	fa02 <mp_obj_exception_get_traceback+0x6a>
        *n = self->traceback_len;
    f9f0:	697b      	ldr	r3, [r7, #20]
    f9f2:	88db      	ldrh	r3, [r3, #6]
    f9f4:	461a      	mov	r2, r3
    f9f6:	68bb      	ldr	r3, [r7, #8]
    f9f8:	601a      	str	r2, [r3, #0]
        *values = self->traceback_data;
    f9fa:	697b      	ldr	r3, [r7, #20]
    f9fc:	689a      	ldr	r2, [r3, #8]
    f9fe:	687b      	ldr	r3, [r7, #4]
    fa00:	601a      	str	r2, [r3, #0]
}
    fa02:	bf00      	nop
    fa04:	3718      	adds	r7, #24
    fa06:	46bd      	mov	sp, r7
    fa08:	bd80      	pop	{r7, pc}
    fa0a:	bf00      	nop
    fa0c:	00020814 	.word	0x00020814
    fa10:	000208bc 	.word	0x000208bc
    fa14:	000207f0 	.word	0x000207f0
    fa18:	0000f341 	.word	0x0000f341

0000fa1c <MP_OBJ_IS_OBJ>:
    fa1c:	b480      	push	{r7}
    fa1e:	b083      	sub	sp, #12
    fa20:	af00      	add	r7, sp, #0
    fa22:	6078      	str	r0, [r7, #4]
    fa24:	687b      	ldr	r3, [r7, #4]
    fa26:	f003 0303 	and.w	r3, r3, #3
    fa2a:	2b00      	cmp	r3, #0
    fa2c:	bf0c      	ite	eq
    fa2e:	2301      	moveq	r3, #1
    fa30:	2300      	movne	r3, #0
    fa32:	b2db      	uxtb	r3, r3
    fa34:	4618      	mov	r0, r3
    fa36:	370c      	adds	r7, #12
    fa38:	46bd      	mov	sp, r7
    fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa3e:	4770      	bx	lr

0000fa40 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    fa40:	b480      	push	{r7}
    fa42:	af00      	add	r7, sp, #0
    fa44:	4b03      	ldr	r3, [pc, #12]	; (fa54 <mp_globals_get+0x14>)
    fa46:	689b      	ldr	r3, [r3, #8]
    fa48:	4618      	mov	r0, r3
    fa4a:	46bd      	mov	sp, r7
    fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa50:	4770      	bx	lr
    fa52:	bf00      	nop
    fa54:	20000a2c 	.word	0x20000a2c

0000fa58 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    fa58:	b480      	push	{r7}
    fa5a:	b083      	sub	sp, #12
    fa5c:	af00      	add	r7, sp, #0
    fa5e:	6078      	str	r0, [r7, #4]
    fa60:	4a04      	ldr	r2, [pc, #16]	; (fa74 <mp_globals_set+0x1c>)
    fa62:	687b      	ldr	r3, [r7, #4]
    fa64:	6093      	str	r3, [r2, #8]
    fa66:	bf00      	nop
    fa68:	370c      	adds	r7, #12
    fa6a:	46bd      	mov	sp, r7
    fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa70:	4770      	bx	lr
    fa72:	bf00      	nop
    fa74:	20000a2c 	.word	0x20000a2c

0000fa78 <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fa78:	b580      	push	{r7, lr}
    fa7a:	b088      	sub	sp, #32
    fa7c:	af02      	add	r7, sp, #8
    fa7e:	60f8      	str	r0, [r7, #12]
    fa80:	60b9      	str	r1, [r7, #8]
    fa82:	607a      	str	r2, [r7, #4]
    fa84:	603b      	str	r3, [r7, #0]
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    fa86:	68f8      	ldr	r0, [r7, #12]
    fa88:	f7ff ffc8 	bl	fa1c <MP_OBJ_IS_OBJ>
    fa8c:	4603      	mov	r3, r0
    fa8e:	f083 0301 	eor.w	r3, r3, #1
    fa92:	b2db      	uxtb	r3, r3
    fa94:	2b00      	cmp	r3, #0
    fa96:	d104      	bne.n	faa2 <fun_builtin_0_call+0x2a>
    fa98:	68fb      	ldr	r3, [r7, #12]
    fa9a:	681b      	ldr	r3, [r3, #0]
    fa9c:	4a0d      	ldr	r2, [pc, #52]	; (fad4 <fun_builtin_0_call+0x5c>)
    fa9e:	4293      	cmp	r3, r2
    faa0:	d005      	beq.n	faae <fun_builtin_0_call+0x36>
    faa2:	4b0d      	ldr	r3, [pc, #52]	; (fad8 <fun_builtin_0_call+0x60>)
    faa4:	4a0d      	ldr	r2, [pc, #52]	; (fadc <fun_builtin_0_call+0x64>)
    faa6:	2135      	movs	r1, #53	; 0x35
    faa8:	480d      	ldr	r0, [pc, #52]	; (fae0 <fun_builtin_0_call+0x68>)
    faaa:	f00b fc77 	bl	1b39c <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    faae:	68fb      	ldr	r3, [r7, #12]
    fab0:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    fab2:	2300      	movs	r3, #0
    fab4:	9300      	str	r3, [sp, #0]
    fab6:	2300      	movs	r3, #0
    fab8:	2200      	movs	r2, #0
    faba:	6879      	ldr	r1, [r7, #4]
    fabc:	68b8      	ldr	r0, [r7, #8]
    fabe:	f7fd fa91 	bl	cfe4 <mp_arg_check_num>
    return self->fun._0();
    fac2:	697b      	ldr	r3, [r7, #20]
    fac4:	685b      	ldr	r3, [r3, #4]
    fac6:	4798      	blx	r3
    fac8:	4603      	mov	r3, r0
}
    faca:	4618      	mov	r0, r3
    facc:	3718      	adds	r7, #24
    face:	46bd      	mov	sp, r7
    fad0:	bd80      	pop	{r7, pc}
    fad2:	bf00      	nop
    fad4:	00020920 	.word	0x00020920
    fad8:	000208dc 	.word	0x000208dc
    fadc:	00020ba4 	.word	0x00020ba4
    fae0:	0002090c 	.word	0x0002090c

0000fae4 <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fae4:	b580      	push	{r7, lr}
    fae6:	b088      	sub	sp, #32
    fae8:	af02      	add	r7, sp, #8
    faea:	60f8      	str	r0, [r7, #12]
    faec:	60b9      	str	r1, [r7, #8]
    faee:	607a      	str	r2, [r7, #4]
    faf0:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    faf2:	68f8      	ldr	r0, [r7, #12]
    faf4:	f7ff ff92 	bl	fa1c <MP_OBJ_IS_OBJ>
    faf8:	4603      	mov	r3, r0
    fafa:	f083 0301 	eor.w	r3, r3, #1
    fafe:	b2db      	uxtb	r3, r3
    fb00:	2b00      	cmp	r3, #0
    fb02:	d104      	bne.n	fb0e <fun_builtin_1_call+0x2a>
    fb04:	68fb      	ldr	r3, [r7, #12]
    fb06:	681b      	ldr	r3, [r3, #0]
    fb08:	4a0e      	ldr	r2, [pc, #56]	; (fb44 <fun_builtin_1_call+0x60>)
    fb0a:	4293      	cmp	r3, r2
    fb0c:	d005      	beq.n	fb1a <fun_builtin_1_call+0x36>
    fb0e:	4b0e      	ldr	r3, [pc, #56]	; (fb48 <fun_builtin_1_call+0x64>)
    fb10:	4a0e      	ldr	r2, [pc, #56]	; (fb4c <fun_builtin_1_call+0x68>)
    fb12:	2143      	movs	r1, #67	; 0x43
    fb14:	480e      	ldr	r0, [pc, #56]	; (fb50 <fun_builtin_1_call+0x6c>)
    fb16:	f00b fc41 	bl	1b39c <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fb1a:	68fb      	ldr	r3, [r7, #12]
    fb1c:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    fb1e:	2300      	movs	r3, #0
    fb20:	9300      	str	r3, [sp, #0]
    fb22:	2301      	movs	r3, #1
    fb24:	2201      	movs	r2, #1
    fb26:	6879      	ldr	r1, [r7, #4]
    fb28:	68b8      	ldr	r0, [r7, #8]
    fb2a:	f7fd fa5b 	bl	cfe4 <mp_arg_check_num>
    return self->fun._1(args[0]);
    fb2e:	697b      	ldr	r3, [r7, #20]
    fb30:	685b      	ldr	r3, [r3, #4]
    fb32:	683a      	ldr	r2, [r7, #0]
    fb34:	6812      	ldr	r2, [r2, #0]
    fb36:	4610      	mov	r0, r2
    fb38:	4798      	blx	r3
    fb3a:	4603      	mov	r3, r0
}
    fb3c:	4618      	mov	r0, r3
    fb3e:	3718      	adds	r7, #24
    fb40:	46bd      	mov	sp, r7
    fb42:	bd80      	pop	{r7, pc}
    fb44:	0002098c 	.word	0x0002098c
    fb48:	0002095c 	.word	0x0002095c
    fb4c:	00020bb8 	.word	0x00020bb8
    fb50:	0002090c 	.word	0x0002090c

0000fb54 <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fb54:	b580      	push	{r7, lr}
    fb56:	b088      	sub	sp, #32
    fb58:	af02      	add	r7, sp, #8
    fb5a:	60f8      	str	r0, [r7, #12]
    fb5c:	60b9      	str	r1, [r7, #8]
    fb5e:	607a      	str	r2, [r7, #4]
    fb60:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    fb62:	68f8      	ldr	r0, [r7, #12]
    fb64:	f7ff ff5a 	bl	fa1c <MP_OBJ_IS_OBJ>
    fb68:	4603      	mov	r3, r0
    fb6a:	f083 0301 	eor.w	r3, r3, #1
    fb6e:	b2db      	uxtb	r3, r3
    fb70:	2b00      	cmp	r3, #0
    fb72:	d104      	bne.n	fb7e <fun_builtin_2_call+0x2a>
    fb74:	68fb      	ldr	r3, [r7, #12]
    fb76:	681b      	ldr	r3, [r3, #0]
    fb78:	4a10      	ldr	r2, [pc, #64]	; (fbbc <fun_builtin_2_call+0x68>)
    fb7a:	4293      	cmp	r3, r2
    fb7c:	d005      	beq.n	fb8a <fun_builtin_2_call+0x36>
    fb7e:	4b10      	ldr	r3, [pc, #64]	; (fbc0 <fun_builtin_2_call+0x6c>)
    fb80:	4a10      	ldr	r2, [pc, #64]	; (fbc4 <fun_builtin_2_call+0x70>)
    fb82:	2151      	movs	r1, #81	; 0x51
    fb84:	4810      	ldr	r0, [pc, #64]	; (fbc8 <fun_builtin_2_call+0x74>)
    fb86:	f00b fc09 	bl	1b39c <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fb8a:	68fb      	ldr	r3, [r7, #12]
    fb8c:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    fb8e:	2300      	movs	r3, #0
    fb90:	9300      	str	r3, [sp, #0]
    fb92:	2302      	movs	r3, #2
    fb94:	2202      	movs	r2, #2
    fb96:	6879      	ldr	r1, [r7, #4]
    fb98:	68b8      	ldr	r0, [r7, #8]
    fb9a:	f7fd fa23 	bl	cfe4 <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    fb9e:	697b      	ldr	r3, [r7, #20]
    fba0:	685b      	ldr	r3, [r3, #4]
    fba2:	683a      	ldr	r2, [r7, #0]
    fba4:	6810      	ldr	r0, [r2, #0]
    fba6:	683a      	ldr	r2, [r7, #0]
    fba8:	3204      	adds	r2, #4
    fbaa:	6812      	ldr	r2, [r2, #0]
    fbac:	4611      	mov	r1, r2
    fbae:	4798      	blx	r3
    fbb0:	4603      	mov	r3, r0
}
    fbb2:	4618      	mov	r0, r3
    fbb4:	3718      	adds	r7, #24
    fbb6:	46bd      	mov	sp, r7
    fbb8:	bd80      	pop	{r7, pc}
    fbba:	bf00      	nop
    fbbc:	000209f8 	.word	0x000209f8
    fbc0:	000209c8 	.word	0x000209c8
    fbc4:	00020bcc 	.word	0x00020bcc
    fbc8:	0002090c 	.word	0x0002090c

0000fbcc <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fbcc:	b580      	push	{r7, lr}
    fbce:	b088      	sub	sp, #32
    fbd0:	af02      	add	r7, sp, #8
    fbd2:	60f8      	str	r0, [r7, #12]
    fbd4:	60b9      	str	r1, [r7, #8]
    fbd6:	607a      	str	r2, [r7, #4]
    fbd8:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    fbda:	68f8      	ldr	r0, [r7, #12]
    fbdc:	f7ff ff1e 	bl	fa1c <MP_OBJ_IS_OBJ>
    fbe0:	4603      	mov	r3, r0
    fbe2:	f083 0301 	eor.w	r3, r3, #1
    fbe6:	b2db      	uxtb	r3, r3
    fbe8:	2b00      	cmp	r3, #0
    fbea:	d104      	bne.n	fbf6 <fun_builtin_3_call+0x2a>
    fbec:	68fb      	ldr	r3, [r7, #12]
    fbee:	681b      	ldr	r3, [r3, #0]
    fbf0:	4a11      	ldr	r2, [pc, #68]	; (fc38 <fun_builtin_3_call+0x6c>)
    fbf2:	4293      	cmp	r3, r2
    fbf4:	d005      	beq.n	fc02 <fun_builtin_3_call+0x36>
    fbf6:	4b11      	ldr	r3, [pc, #68]	; (fc3c <fun_builtin_3_call+0x70>)
    fbf8:	4a11      	ldr	r2, [pc, #68]	; (fc40 <fun_builtin_3_call+0x74>)
    fbfa:	215f      	movs	r1, #95	; 0x5f
    fbfc:	4811      	ldr	r0, [pc, #68]	; (fc44 <fun_builtin_3_call+0x78>)
    fbfe:	f00b fbcd 	bl	1b39c <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fc02:	68fb      	ldr	r3, [r7, #12]
    fc04:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    fc06:	2300      	movs	r3, #0
    fc08:	9300      	str	r3, [sp, #0]
    fc0a:	2303      	movs	r3, #3
    fc0c:	2203      	movs	r2, #3
    fc0e:	6879      	ldr	r1, [r7, #4]
    fc10:	68b8      	ldr	r0, [r7, #8]
    fc12:	f7fd f9e7 	bl	cfe4 <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    fc16:	697b      	ldr	r3, [r7, #20]
    fc18:	685b      	ldr	r3, [r3, #4]
    fc1a:	683a      	ldr	r2, [r7, #0]
    fc1c:	6810      	ldr	r0, [r2, #0]
    fc1e:	683a      	ldr	r2, [r7, #0]
    fc20:	3204      	adds	r2, #4
    fc22:	6811      	ldr	r1, [r2, #0]
    fc24:	683a      	ldr	r2, [r7, #0]
    fc26:	3208      	adds	r2, #8
    fc28:	6812      	ldr	r2, [r2, #0]
    fc2a:	4798      	blx	r3
    fc2c:	4603      	mov	r3, r0
}
    fc2e:	4618      	mov	r0, r3
    fc30:	3718      	adds	r7, #24
    fc32:	46bd      	mov	sp, r7
    fc34:	bd80      	pop	{r7, pc}
    fc36:	bf00      	nop
    fc38:	00020a64 	.word	0x00020a64
    fc3c:	00020a34 	.word	0x00020a34
    fc40:	00020be0 	.word	0x00020be0
    fc44:	0002090c 	.word	0x0002090c

0000fc48 <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fc48:	b580      	push	{r7, lr}
    fc4a:	b08a      	sub	sp, #40	; 0x28
    fc4c:	af02      	add	r7, sp, #8
    fc4e:	60f8      	str	r0, [r7, #12]
    fc50:	60b9      	str	r1, [r7, #8]
    fc52:	607a      	str	r2, [r7, #4]
    fc54:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    fc56:	68f8      	ldr	r0, [r7, #12]
    fc58:	f7ff fee0 	bl	fa1c <MP_OBJ_IS_OBJ>
    fc5c:	4603      	mov	r3, r0
    fc5e:	f083 0301 	eor.w	r3, r3, #1
    fc62:	b2db      	uxtb	r3, r3
    fc64:	2b00      	cmp	r3, #0
    fc66:	d104      	bne.n	fc72 <fun_builtin_var_call+0x2a>
    fc68:	68fb      	ldr	r3, [r7, #12]
    fc6a:	681b      	ldr	r3, [r3, #0]
    fc6c:	4a21      	ldr	r2, [pc, #132]	; (fcf4 <fun_builtin_var_call+0xac>)
    fc6e:	4293      	cmp	r3, r2
    fc70:	d005      	beq.n	fc7e <fun_builtin_var_call+0x36>
    fc72:	4b21      	ldr	r3, [pc, #132]	; (fcf8 <fun_builtin_var_call+0xb0>)
    fc74:	4a21      	ldr	r2, [pc, #132]	; (fcfc <fun_builtin_var_call+0xb4>)
    fc76:	216d      	movs	r1, #109	; 0x6d
    fc78:	4821      	ldr	r0, [pc, #132]	; (fd00 <fun_builtin_var_call+0xb8>)
    fc7a:	f00b fb8f 	bl	1b39c <__assert_func>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);
    fc7e:	68fb      	ldr	r3, [r7, #12]
    fc80:	61fb      	str	r3, [r7, #28]

    // check number of arguments
    mp_arg_check_num(n_args, n_kw, self->n_args_min, self->n_args_max, self->is_kw);
    fc82:	69fb      	ldr	r3, [r7, #28]
    fc84:	889b      	ldrh	r3, [r3, #4]
    fc86:	f3c3 034e 	ubfx	r3, r3, #1, #15
    fc8a:	b29b      	uxth	r3, r3
    fc8c:	461a      	mov	r2, r3
    fc8e:	69fb      	ldr	r3, [r7, #28]
    fc90:	88db      	ldrh	r3, [r3, #6]
    fc92:	4619      	mov	r1, r3
    fc94:	69fb      	ldr	r3, [r7, #28]
    fc96:	791b      	ldrb	r3, [r3, #4]
    fc98:	f3c3 0300 	ubfx	r3, r3, #0, #1
    fc9c:	b2db      	uxtb	r3, r3
    fc9e:	9300      	str	r3, [sp, #0]
    fca0:	460b      	mov	r3, r1
    fca2:	6879      	ldr	r1, [r7, #4]
    fca4:	68b8      	ldr	r0, [r7, #8]
    fca6:	f7fd f99d 	bl	cfe4 <mp_arg_check_num>

    if (self->is_kw) {
    fcaa:	69fb      	ldr	r3, [r7, #28]
    fcac:	791b      	ldrb	r3, [r3, #4]
    fcae:	f3c3 0300 	ubfx	r3, r3, #0, #1
    fcb2:	b2db      	uxtb	r3, r3
    fcb4:	2b00      	cmp	r3, #0
    fcb6:	d012      	beq.n	fcde <fun_builtin_var_call+0x96>
        // function allows keywords

        // we create a map directly from the given args array
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
    fcb8:	68bb      	ldr	r3, [r7, #8]
    fcba:	009b      	lsls	r3, r3, #2
    fcbc:	683a      	ldr	r2, [r7, #0]
    fcbe:	441a      	add	r2, r3
    fcc0:	f107 0310 	add.w	r3, r7, #16
    fcc4:	6879      	ldr	r1, [r7, #4]
    fcc6:	4618      	mov	r0, r3
    fcc8:	f7fd fb0e 	bl	d2e8 <mp_map_init_fixed_table>

        return self->fun.kw(n_args, args, &kw_args);
    fccc:	69fb      	ldr	r3, [r7, #28]
    fcce:	689b      	ldr	r3, [r3, #8]
    fcd0:	f107 0210 	add.w	r2, r7, #16
    fcd4:	6839      	ldr	r1, [r7, #0]
    fcd6:	68b8      	ldr	r0, [r7, #8]
    fcd8:	4798      	blx	r3
    fcda:	4603      	mov	r3, r0
    fcdc:	e005      	b.n	fcea <fun_builtin_var_call+0xa2>

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
    fcde:	69fb      	ldr	r3, [r7, #28]
    fce0:	689b      	ldr	r3, [r3, #8]
    fce2:	6839      	ldr	r1, [r7, #0]
    fce4:	68b8      	ldr	r0, [r7, #8]
    fce6:	4798      	blx	r3
    fce8:	4603      	mov	r3, r0
    }
}
    fcea:	4618      	mov	r0, r3
    fcec:	3720      	adds	r7, #32
    fcee:	46bd      	mov	sp, r7
    fcf0:	bd80      	pop	{r7, pc}
    fcf2:	bf00      	nop
    fcf4:	00020ad4 	.word	0x00020ad4
    fcf8:	00020aa0 	.word	0x00020aa0
    fcfc:	00020bf4 	.word	0x00020bf4
    fd00:	0002090c 	.word	0x0002090c

0000fd04 <mp_obj_code_get_name>:
};

/******************************************************************************/
/* byte code functions                                                        */

qstr mp_obj_code_get_name(const byte *code_info) {
    fd04:	b580      	push	{r7, lr}
    fd06:	b082      	sub	sp, #8
    fd08:	af00      	add	r7, sp, #0
    fd0a:	6078      	str	r0, [r7, #4]
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
    fd0c:	6878      	ldr	r0, [r7, #4]
    fd0e:	f00a fc35 	bl	1a57c <mp_decode_uint_skip>
    fd12:	6078      	str	r0, [r7, #4]
    #if MICROPY_PERSISTENT_CODE
    return code_info[0] | (code_info[1] << 8);
    fd14:	687b      	ldr	r3, [r7, #4]
    fd16:	781b      	ldrb	r3, [r3, #0]
    fd18:	461a      	mov	r2, r3
    fd1a:	687b      	ldr	r3, [r7, #4]
    fd1c:	3301      	adds	r3, #1
    fd1e:	781b      	ldrb	r3, [r3, #0]
    fd20:	021b      	lsls	r3, r3, #8
    fd22:	4313      	orrs	r3, r2
    #else
    return mp_decode_uint_value(code_info);
    #endif
}
    fd24:	4618      	mov	r0, r3
    fd26:	3708      	adds	r7, #8
    fd28:	46bd      	mov	sp, r7
    fd2a:	bd80      	pop	{r7, pc}

0000fd2c <mp_obj_fun_get_name>:

#if MICROPY_EMIT_NATIVE
STATIC const mp_obj_type_t mp_type_fun_native;
#endif

qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
    fd2c:	b580      	push	{r7, lr}
    fd2e:	b084      	sub	sp, #16
    fd30:	af00      	add	r7, sp, #0
    fd32:	6078      	str	r0, [r7, #4]
    const mp_obj_fun_bc_t *fun = MP_OBJ_TO_PTR(fun_in);
    fd34:	687b      	ldr	r3, [r7, #4]
    fd36:	60fb      	str	r3, [r7, #12]
        // TODO native functions don't have name stored
        return MP_QSTR_;
    }
    #endif

    const byte *bc = fun->bytecode;
    fd38:	68fb      	ldr	r3, [r7, #12]
    fd3a:	689b      	ldr	r3, [r3, #8]
    fd3c:	60bb      	str	r3, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_state
    fd3e:	68b8      	ldr	r0, [r7, #8]
    fd40:	f00a fc1c 	bl	1a57c <mp_decode_uint_skip>
    fd44:	60b8      	str	r0, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
    fd46:	68b8      	ldr	r0, [r7, #8]
    fd48:	f00a fc18 	bl	1a57c <mp_decode_uint_skip>
    fd4c:	60b8      	str	r0, [r7, #8]
    bc++; // skip scope_params
    fd4e:	68bb      	ldr	r3, [r7, #8]
    fd50:	3301      	adds	r3, #1
    fd52:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_pos_args
    fd54:	68bb      	ldr	r3, [r7, #8]
    fd56:	3301      	adds	r3, #1
    fd58:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_kwonly_args
    fd5a:	68bb      	ldr	r3, [r7, #8]
    fd5c:	3301      	adds	r3, #1
    fd5e:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_def_pos_args
    fd60:	68bb      	ldr	r3, [r7, #8]
    fd62:	3301      	adds	r3, #1
    fd64:	60bb      	str	r3, [r7, #8]
    return mp_obj_code_get_name(bc);
    fd66:	68b8      	ldr	r0, [r7, #8]
    fd68:	f7ff ffcc 	bl	fd04 <mp_obj_code_get_name>
    fd6c:	4603      	mov	r3, r0
}
    fd6e:	4618      	mov	r0, r3
    fd70:	3710      	adds	r7, #16
    fd72:	46bd      	mov	sp, r7
    fd74:	bd80      	pop	{r7, pc}
    fd76:	bf00      	nop

0000fd78 <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fd78:	b580      	push	{r7, lr}
    fd7a:	b08c      	sub	sp, #48	; 0x30
    fd7c:	af00      	add	r7, sp, #0
    fd7e:	60f8      	str	r0, [r7, #12]
    fd80:	60b9      	str	r1, [r7, #8]
    fd82:	607a      	str	r2, [r7, #4]
    fd84:	603b      	str	r3, [r7, #0]
    DEBUG_printf("Input n_args: " UINT_FMT ", n_kw: " UINT_FMT "\n", n_args, n_kw);
    DEBUG_printf("Input pos args: ");
    dump_args(args, n_args);
    DEBUG_printf("Input kw args: ");
    dump_args(args + n_args, n_kw * 2);
    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
    fd86:	68fb      	ldr	r3, [r7, #12]
    fd88:	623b      	str	r3, [r7, #32]
    DEBUG_printf("Func n_def_args: %d\n", self->n_def_args);

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
    fd8a:	6a3b      	ldr	r3, [r7, #32]
    fd8c:	689b      	ldr	r3, [r3, #8]
    fd8e:	4618      	mov	r0, r3
    fd90:	f00a fbe6 	bl	1a560 <mp_decode_uint_value>
    fd94:	61f8      	str	r0, [r7, #28]
    fd96:	6a3b      	ldr	r3, [r7, #32]
    fd98:	689b      	ldr	r3, [r3, #8]
    fd9a:	4618      	mov	r0, r3
    fd9c:	f00a fbee 	bl	1a57c <mp_decode_uint_skip>
    fda0:	4603      	mov	r3, r0
    fda2:	4618      	mov	r0, r3
    fda4:	f00a fbdc 	bl	1a560 <mp_decode_uint_value>
    fda8:	61b8      	str	r0, [r7, #24]
    fdaa:	69ba      	ldr	r2, [r7, #24]
    fdac:	4613      	mov	r3, r2
    fdae:	005b      	lsls	r3, r3, #1
    fdb0:	441a      	add	r2, r3
    fdb2:	69fb      	ldr	r3, [r7, #28]
    fdb4:	4413      	add	r3, r2
    fdb6:	009b      	lsls	r3, r3, #2
    fdb8:	62fb      	str	r3, [r7, #44]	; 0x2c

    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    fdba:	2300      	movs	r3, #0
    fdbc:	62bb      	str	r3, [r7, #40]	; 0x28
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
    fdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fdc0:	2b2c      	cmp	r3, #44	; 0x2c
    fdc2:	d905      	bls.n	fdd0 <fun_bc_call+0x58>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fdc6:	3314      	adds	r3, #20
    fdc8:	4618      	mov	r0, r3
    fdca:	f7f0 fabf 	bl	34c <m_malloc_maybe>
    fdce:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (code_state == NULL) {
    fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdd2:	2b00      	cmp	r3, #0
    fdd4:	d10e      	bne.n	fdf4 <fun_bc_call+0x7c>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
    fdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fdd8:	3314      	adds	r3, #20
    fdda:	3307      	adds	r3, #7
    fddc:	3307      	adds	r3, #7
    fdde:	08db      	lsrs	r3, r3, #3
    fde0:	00db      	lsls	r3, r3, #3
    fde2:	ebad 0d03 	sub.w	sp, sp, r3
    fde6:	466b      	mov	r3, sp
    fde8:	3307      	adds	r3, #7
    fdea:	08db      	lsrs	r3, r3, #3
    fdec:	00db      	lsls	r3, r3, #3
    fdee:	62bb      	str	r3, [r7, #40]	; 0x28
        state_size = 0; // indicate that we allocated using alloca
    fdf0:	2300      	movs	r3, #0
    fdf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
    fdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdf6:	6a3a      	ldr	r2, [r7, #32]
    fdf8:	601a      	str	r2, [r3, #0]
    fdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdfc:	2200      	movs	r2, #0
    fdfe:	605a      	str	r2, [r3, #4]
    fe00:	683b      	ldr	r3, [r7, #0]
    fe02:	687a      	ldr	r2, [r7, #4]
    fe04:	68b9      	ldr	r1, [r7, #8]
    fe06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fe08:	f00a fbd4 	bl	1a5b4 <mp_setup_code_state>
    fe0c:	f7ff fe18 	bl	fa40 <mp_globals_get>
    fe10:	4602      	mov	r2, r0
    fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe14:	611a      	str	r2, [r3, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
    fe16:	6a3b      	ldr	r3, [r7, #32]
    fe18:	685b      	ldr	r3, [r3, #4]
    fe1a:	4618      	mov	r0, r3
    fe1c:	f7ff fe1c 	bl	fa58 <mp_globals_set>
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
    fe20:	2100      	movs	r1, #0
    fe22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fe24:	f009 fc68 	bl	196f8 <mp_execute_bytecode>
    fe28:	6178      	str	r0, [r7, #20]
    mp_globals_set(code_state->old_globals);
    fe2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe2c:	691b      	ldr	r3, [r3, #16]
    fe2e:	4618      	mov	r0, r3
    fe30:	f7ff fe12 	bl	fa58 <mp_globals_set>
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fe34:	697b      	ldr	r3, [r7, #20]
    fe36:	2b00      	cmp	r3, #0
    fe38:	d104      	bne.n	fe44 <fun_bc_call+0xcc>
        // return value is in *sp
        result = *code_state->sp;
    fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe3c:	689b      	ldr	r3, [r3, #8]
    fe3e:	681b      	ldr	r3, [r3, #0]
    fe40:	627b      	str	r3, [r7, #36]	; 0x24
    fe42:	e011      	b.n	fe68 <fun_bc_call+0xf0>
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
    fe44:	697b      	ldr	r3, [r7, #20]
    fe46:	2b02      	cmp	r3, #2
    fe48:	d006      	beq.n	fe58 <fun_bc_call+0xe0>
    fe4a:	4b10      	ldr	r3, [pc, #64]	; (fe8c <fun_bc_call+0x114>)
    fe4c:	4a10      	ldr	r2, [pc, #64]	; (fe90 <fun_bc_call+0x118>)
    fe4e:	f240 113f 	movw	r1, #319	; 0x13f
    fe52:	4810      	ldr	r0, [pc, #64]	; (fe94 <fun_bc_call+0x11c>)
    fe54:	f00b faa2 	bl	1b39c <__assert_func>
        // return value is in fastn[0]==state[n_state - 1]
        result = code_state->state[n_state - 1];
    fe58:	69fb      	ldr	r3, [r7, #28]
    fe5a:	3b01      	subs	r3, #1
    fe5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fe5e:	3304      	adds	r3, #4
    fe60:	009b      	lsls	r3, r3, #2
    fe62:	4413      	add	r3, r2
    fe64:	685b      	ldr	r3, [r3, #4]
    fe66:	627b      	str	r3, [r7, #36]	; 0x24

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
    fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d002      	beq.n	fe74 <fun_bc_call+0xfc>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    fe6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fe70:	f7f0 fab6 	bl	3e0 <m_free>
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fe74:	697b      	ldr	r3, [r7, #20]
    fe76:	2b00      	cmp	r3, #0
    fe78:	d101      	bne.n	fe7e <fun_bc_call+0x106>
        return result;
    fe7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fe7c:	e002      	b.n	fe84 <fun_bc_call+0x10c>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    fe7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    fe80:	f7f0 fa2e 	bl	2e0 <nlr_jump>
    }
}
    fe84:	4618      	mov	r0, r3
    fe86:	3730      	adds	r7, #48	; 0x30
    fe88:	46bd      	mov	sp, r7
    fe8a:	bd80      	pop	{r7, pc}
    fe8c:	00020b10 	.word	0x00020b10
    fe90:	00020c0c 	.word	0x00020c0c
    fe94:	0002090c 	.word	0x0002090c

0000fe98 <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = mp_obj_fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
    fe98:	b580      	push	{r7, lr}
    fe9a:	b088      	sub	sp, #32
    fe9c:	af00      	add	r7, sp, #0
    fe9e:	60f8      	str	r0, [r7, #12]
    fea0:	60b9      	str	r1, [r7, #8]
    fea2:	607a      	str	r2, [r7, #4]
    fea4:	603b      	str	r3, [r7, #0]
    size_t n_def_args = 0;
    fea6:	2300      	movs	r3, #0
    fea8:	61fb      	str	r3, [r7, #28]
    size_t n_extra_args = 0;
    feaa:	2300      	movs	r3, #0
    feac:	61bb      	str	r3, [r7, #24]
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
    feae:	68fb      	ldr	r3, [r7, #12]
    feb0:	617b      	str	r3, [r7, #20]
    if (def_args_in != MP_OBJ_NULL) {
    feb2:	68fb      	ldr	r3, [r7, #12]
    feb4:	2b00      	cmp	r3, #0
    feb6:	d01a      	beq.n	feee <mp_obj_new_fun_bc+0x56>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
    feb8:	68f8      	ldr	r0, [r7, #12]
    feba:	f7ff fdaf 	bl	fa1c <MP_OBJ_IS_OBJ>
    febe:	4603      	mov	r3, r0
    fec0:	f083 0301 	eor.w	r3, r3, #1
    fec4:	b2db      	uxtb	r3, r3
    fec6:	2b00      	cmp	r3, #0
    fec8:	d104      	bne.n	fed4 <mp_obj_new_fun_bc+0x3c>
    feca:	68fb      	ldr	r3, [r7, #12]
    fecc:	681b      	ldr	r3, [r3, #0]
    fece:	4a23      	ldr	r2, [pc, #140]	; (ff5c <mp_obj_new_fun_bc+0xc4>)
    fed0:	4293      	cmp	r3, r2
    fed2:	d006      	beq.n	fee2 <mp_obj_new_fun_bc+0x4a>
    fed4:	4b22      	ldr	r3, [pc, #136]	; (ff60 <mp_obj_new_fun_bc+0xc8>)
    fed6:	4a23      	ldr	r2, [pc, #140]	; (ff64 <mp_obj_new_fun_bc+0xcc>)
    fed8:	f44f 71b9 	mov.w	r1, #370	; 0x172
    fedc:	4822      	ldr	r0, [pc, #136]	; (ff68 <mp_obj_new_fun_bc+0xd0>)
    fede:	f00b fa5d 	bl	1b39c <__assert_func>
        n_def_args = def_args->len;
    fee2:	697b      	ldr	r3, [r7, #20]
    fee4:	685b      	ldr	r3, [r3, #4]
    fee6:	61fb      	str	r3, [r7, #28]
        n_extra_args = def_args->len;
    fee8:	697b      	ldr	r3, [r7, #20]
    feea:	685b      	ldr	r3, [r3, #4]
    feec:	61bb      	str	r3, [r7, #24]
    }
    if (def_kw_args != MP_OBJ_NULL) {
    feee:	68bb      	ldr	r3, [r7, #8]
    fef0:	2b00      	cmp	r3, #0
    fef2:	d002      	beq.n	fefa <mp_obj_new_fun_bc+0x62>
        n_extra_args += 1;
    fef4:	69bb      	ldr	r3, [r7, #24]
    fef6:	3301      	adds	r3, #1
    fef8:	61bb      	str	r3, [r7, #24]
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
    fefa:	69bb      	ldr	r3, [r7, #24]
    fefc:	3304      	adds	r3, #4
    fefe:	009b      	lsls	r3, r3, #2
    ff00:	4618      	mov	r0, r3
    ff02:	f7f0 fa0b 	bl	31c <m_malloc>
    ff06:	6138      	str	r0, [r7, #16]
    o->base.type = &mp_type_fun_bc;
    ff08:	693b      	ldr	r3, [r7, #16]
    ff0a:	4a18      	ldr	r2, [pc, #96]	; (ff6c <mp_obj_new_fun_bc+0xd4>)
    ff0c:	601a      	str	r2, [r3, #0]
    o->globals = mp_globals_get();
    ff0e:	f7ff fd97 	bl	fa40 <mp_globals_get>
    ff12:	4602      	mov	r2, r0
    ff14:	693b      	ldr	r3, [r7, #16]
    ff16:	605a      	str	r2, [r3, #4]
    o->bytecode = code;
    ff18:	693b      	ldr	r3, [r7, #16]
    ff1a:	687a      	ldr	r2, [r7, #4]
    ff1c:	609a      	str	r2, [r3, #8]
    o->const_table = const_table;
    ff1e:	693b      	ldr	r3, [r7, #16]
    ff20:	683a      	ldr	r2, [r7, #0]
    ff22:	60da      	str	r2, [r3, #12]
    if (def_args != NULL) {
    ff24:	697b      	ldr	r3, [r7, #20]
    ff26:	2b00      	cmp	r3, #0
    ff28:	d00a      	beq.n	ff40 <mp_obj_new_fun_bc+0xa8>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
    ff2a:	693b      	ldr	r3, [r7, #16]
    ff2c:	f103 0010 	add.w	r0, r3, #16
    ff30:	697b      	ldr	r3, [r7, #20]
    ff32:	f103 0108 	add.w	r1, r3, #8
    ff36:	69fb      	ldr	r3, [r7, #28]
    ff38:	009b      	lsls	r3, r3, #2
    ff3a:	461a      	mov	r2, r3
    ff3c:	f00b feea 	bl	1bd14 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
    ff40:	68bb      	ldr	r3, [r7, #8]
    ff42:	2b00      	cmp	r3, #0
    ff44:	d005      	beq.n	ff52 <mp_obj_new_fun_bc+0xba>
        o->extra_args[n_def_args] = def_kw_args;
    ff46:	693b      	ldr	r3, [r7, #16]
    ff48:	69fa      	ldr	r2, [r7, #28]
    ff4a:	3204      	adds	r2, #4
    ff4c:	68b9      	ldr	r1, [r7, #8]
    ff4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
    ff52:	693b      	ldr	r3, [r7, #16]
}
    ff54:	4618      	mov	r0, r3
    ff56:	3720      	adds	r7, #32
    ff58:	46bd      	mov	sp, r7
    ff5a:	bd80      	pop	{r7, pc}
    ff5c:	00021db4 	.word	0x00021db4
    ff60:	00020b78 	.word	0x00020b78
    ff64:	00020c18 	.word	0x00020c18
    ff68:	0002090c 	.word	0x0002090c
    ff6c:	00020b3c 	.word	0x00020b3c

0000ff70 <MP_OBJ_IS_OBJ>:
    ff70:	b480      	push	{r7}
    ff72:	b083      	sub	sp, #12
    ff74:	af00      	add	r7, sp, #0
    ff76:	6078      	str	r0, [r7, #4]
    ff78:	687b      	ldr	r3, [r7, #4]
    ff7a:	f003 0303 	and.w	r3, r3, #3
    ff7e:	2b00      	cmp	r3, #0
    ff80:	bf0c      	ite	eq
    ff82:	2301      	moveq	r3, #1
    ff84:	2300      	movne	r3, #0
    ff86:	b2db      	uxtb	r3, r3
    ff88:	4618      	mov	r0, r3
    ff8a:	370c      	adds	r7, #12
    ff8c:	46bd      	mov	sp, r7
    ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff92:	4770      	bx	lr

0000ff94 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    ff94:	b480      	push	{r7}
    ff96:	af00      	add	r7, sp, #0
    ff98:	4b03      	ldr	r3, [pc, #12]	; (ffa8 <mp_globals_get+0x14>)
    ff9a:	689b      	ldr	r3, [r3, #8]
    ff9c:	4618      	mov	r0, r3
    ff9e:	46bd      	mov	sp, r7
    ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffa4:	4770      	bx	lr
    ffa6:	bf00      	nop
    ffa8:	20000a2c 	.word	0x20000a2c

0000ffac <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    ffac:	b480      	push	{r7}
    ffae:	b083      	sub	sp, #12
    ffb0:	af00      	add	r7, sp, #0
    ffb2:	6078      	str	r0, [r7, #4]
    ffb4:	4a04      	ldr	r2, [pc, #16]	; (ffc8 <mp_globals_set+0x1c>)
    ffb6:	687b      	ldr	r3, [r7, #4]
    ffb8:	6093      	str	r3, [r2, #8]
    ffba:	bf00      	nop
    ffbc:	370c      	adds	r7, #12
    ffbe:	46bd      	mov	sp, r7
    ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    ffc4:	4770      	bx	lr
    ffc6:	bf00      	nop
    ffc8:	20000a2c 	.word	0x20000a2c

0000ffcc <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ffcc:	b580      	push	{r7, lr}
    ffce:	b088      	sub	sp, #32
    ffd0:	af00      	add	r7, sp, #0
    ffd2:	60f8      	str	r0, [r7, #12]
    ffd4:	60b9      	str	r1, [r7, #8]
    ffd6:	607a      	str	r2, [r7, #4]
    ffd8:	603b      	str	r3, [r7, #0]
    // A generating function is just a bytecode function with type mp_type_gen_wrap
    mp_obj_fun_bc_t *self_fun = MP_OBJ_TO_PTR(self_in);
    ffda:	68fb      	ldr	r3, [r7, #12]
    ffdc:	61fb      	str	r3, [r7, #28]

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
    ffde:	69fb      	ldr	r3, [r7, #28]
    ffe0:	689b      	ldr	r3, [r3, #8]
    ffe2:	4618      	mov	r0, r3
    ffe4:	f00a fabc 	bl	1a560 <mp_decode_uint_value>
    ffe8:	61b8      	str	r0, [r7, #24]
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
    ffea:	69fb      	ldr	r3, [r7, #28]
    ffec:	689b      	ldr	r3, [r3, #8]
    ffee:	4618      	mov	r0, r3
    fff0:	f00a fac4 	bl	1a57c <mp_decode_uint_skip>
    fff4:	4603      	mov	r3, r0
    fff6:	4618      	mov	r0, r3
    fff8:	f00a fab2 	bl	1a560 <mp_decode_uint_value>
    fffc:	6178      	str	r0, [r7, #20]

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
    fffe:	697a      	ldr	r2, [r7, #20]
   10000:	4613      	mov	r3, r2
   10002:	005b      	lsls	r3, r3, #1
   10004:	441a      	add	r2, r3
   10006:	69bb      	ldr	r3, [r7, #24]
   10008:	4413      	add	r3, r2
   1000a:	3307      	adds	r3, #7
   1000c:	009b      	lsls	r3, r3, #2
   1000e:	4618      	mov	r0, r3
   10010:	f7f0 f984 	bl	31c <m_malloc>
   10014:	6138      	str	r0, [r7, #16]
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
   10016:	693b      	ldr	r3, [r7, #16]
   10018:	4a0c      	ldr	r2, [pc, #48]	; (1004c <gen_wrap_call+0x80>)
   1001a:	601a      	str	r2, [r3, #0]

    o->globals = self_fun->globals;
   1001c:	69fb      	ldr	r3, [r7, #28]
   1001e:	685a      	ldr	r2, [r3, #4]
   10020:	693b      	ldr	r3, [r7, #16]
   10022:	605a      	str	r2, [r3, #4]
    o->code_state.fun_bc = self_fun;
   10024:	693b      	ldr	r3, [r7, #16]
   10026:	69fa      	ldr	r2, [r7, #28]
   10028:	609a      	str	r2, [r3, #8]
    o->code_state.ip = 0;
   1002a:	693b      	ldr	r3, [r7, #16]
   1002c:	2200      	movs	r2, #0
   1002e:	60da      	str	r2, [r3, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
   10030:	693b      	ldr	r3, [r7, #16]
   10032:	f103 0008 	add.w	r0, r3, #8
   10036:	683b      	ldr	r3, [r7, #0]
   10038:	687a      	ldr	r2, [r7, #4]
   1003a:	68b9      	ldr	r1, [r7, #8]
   1003c:	f00a faba 	bl	1a5b4 <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
   10040:	693b      	ldr	r3, [r7, #16]
}
   10042:	4618      	mov	r0, r3
   10044:	3720      	adds	r7, #32
   10046:	46bd      	mov	sp, r7
   10048:	bd80      	pop	{r7, pc}
   1004a:	bf00      	nop
   1004c:	00020df8 	.word	0x00020df8

00010050 <gen_instance_print>:
};

/******************************************************************************/
/* generator instance                                                         */

STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10050:	b580      	push	{r7, lr}
   10052:	b086      	sub	sp, #24
   10054:	af00      	add	r7, sp, #0
   10056:	60f8      	str	r0, [r7, #12]
   10058:	60b9      	str	r1, [r7, #8]
   1005a:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1005c:	68bb      	ldr	r3, [r7, #8]
   1005e:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
   10060:	697b      	ldr	r3, [r7, #20]
   10062:	689b      	ldr	r3, [r3, #8]
   10064:	4618      	mov	r0, r3
   10066:	f7ff fe61 	bl	fd2c <mp_obj_fun_get_name>
   1006a:	4602      	mov	r2, r0
   1006c:	697b      	ldr	r3, [r7, #20]
   1006e:	4904      	ldr	r1, [pc, #16]	; (10080 <gen_instance_print+0x30>)
   10070:	68f8      	ldr	r0, [r7, #12]
   10072:	f7f1 ff25 	bl	1ec0 <mp_printf>
}
   10076:	bf00      	nop
   10078:	3718      	adds	r7, #24
   1007a:	46bd      	mov	sp, r7
   1007c:	bd80      	pop	{r7, pc}
   1007e:	bf00      	nop
   10080:	00020c68 	.word	0x00020c68

00010084 <mp_obj_gen_resume>:

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
   10084:	b580      	push	{r7, lr}
   10086:	b088      	sub	sp, #32
   10088:	af00      	add	r7, sp, #0
   1008a:	60f8      	str	r0, [r7, #12]
   1008c:	60b9      	str	r1, [r7, #8]
   1008e:	607a      	str	r2, [r7, #4]
   10090:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
   10092:	68f8      	ldr	r0, [r7, #12]
   10094:	f7ff ff6c 	bl	ff70 <MP_OBJ_IS_OBJ>
   10098:	4603      	mov	r3, r0
   1009a:	f083 0301 	eor.w	r3, r3, #1
   1009e:	b2db      	uxtb	r3, r3
   100a0:	2b00      	cmp	r3, #0
   100a2:	d104      	bne.n	100ae <mp_obj_gen_resume+0x2a>
   100a4:	68fb      	ldr	r3, [r7, #12]
   100a6:	681b      	ldr	r3, [r3, #0]
   100a8:	4a45      	ldr	r2, [pc, #276]	; (101c0 <mp_obj_gen_resume+0x13c>)
   100aa:	4293      	cmp	r3, r2
   100ac:	d005      	beq.n	100ba <mp_obj_gen_resume+0x36>
   100ae:	4b45      	ldr	r3, [pc, #276]	; (101c4 <mp_obj_gen_resume+0x140>)
   100b0:	4a45      	ldr	r2, [pc, #276]	; (101c8 <mp_obj_gen_resume+0x144>)
   100b2:	2157      	movs	r1, #87	; 0x57
   100b4:	4845      	ldr	r0, [pc, #276]	; (101cc <mp_obj_gen_resume+0x148>)
   100b6:	f00b f971 	bl	1b39c <__assert_func>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   100ba:	68fb      	ldr	r3, [r7, #12]
   100bc:	61fb      	str	r3, [r7, #28]
    if (self->code_state.ip == 0) {
   100be:	69fb      	ldr	r3, [r7, #28]
   100c0:	68db      	ldr	r3, [r3, #12]
   100c2:	2b00      	cmp	r3, #0
   100c4:	d104      	bne.n	100d0 <mp_obj_gen_resume+0x4c>
        // Trying to resume already stopped generator
        *ret_val = MP_OBJ_STOP_ITERATION;
   100c6:	683b      	ldr	r3, [r7, #0]
   100c8:	2204      	movs	r2, #4
   100ca:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_NORMAL;
   100cc:	2300      	movs	r3, #0
   100ce:	e072      	b.n	101b6 <mp_obj_gen_resume+0x132>
    }
    if (self->code_state.sp == self->code_state.state - 1) {
   100d0:	69fb      	ldr	r3, [r7, #28]
   100d2:	691a      	ldr	r2, [r3, #16]
   100d4:	69fb      	ldr	r3, [r7, #28]
   100d6:	331c      	adds	r3, #28
   100d8:	3b04      	subs	r3, #4
   100da:	429a      	cmp	r2, r3
   100dc:	d106      	bne.n	100ec <mp_obj_gen_resume+0x68>
        if (send_value != mp_const_none) {
   100de:	68bb      	ldr	r3, [r7, #8]
   100e0:	4a3b      	ldr	r2, [pc, #236]	; (101d0 <mp_obj_gen_resume+0x14c>)
   100e2:	4293      	cmp	r3, r2
   100e4:	d015      	beq.n	10112 <mp_obj_gen_resume+0x8e>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
   100e6:	483b      	ldr	r0, [pc, #236]	; (101d4 <mp_obj_gen_resume+0x150>)
   100e8:	f7fc ff56 	bl	cf98 <mp_raise_TypeError>
        }
    } else {
        #if MICROPY_PY_GENERATOR_PEND_THROW
        // If exception is pending (set using .pend_throw()), process it now.
        if (*self->code_state.sp != mp_const_none) {
   100ec:	69fb      	ldr	r3, [r7, #28]
   100ee:	691b      	ldr	r3, [r3, #16]
   100f0:	681b      	ldr	r3, [r3, #0]
   100f2:	4a37      	ldr	r2, [pc, #220]	; (101d0 <mp_obj_gen_resume+0x14c>)
   100f4:	4293      	cmp	r3, r2
   100f6:	d008      	beq.n	1010a <mp_obj_gen_resume+0x86>
            throw_value = *self->code_state.sp;
   100f8:	69fb      	ldr	r3, [r7, #28]
   100fa:	691b      	ldr	r3, [r3, #16]
   100fc:	681b      	ldr	r3, [r3, #0]
   100fe:	607b      	str	r3, [r7, #4]
            *self->code_state.sp = MP_OBJ_NULL;
   10100:	69fb      	ldr	r3, [r7, #28]
   10102:	691b      	ldr	r3, [r3, #16]
   10104:	2200      	movs	r2, #0
   10106:	601a      	str	r2, [r3, #0]
   10108:	e003      	b.n	10112 <mp_obj_gen_resume+0x8e>
        } else
        #endif
        {
            *self->code_state.sp = send_value;
   1010a:	69fb      	ldr	r3, [r7, #28]
   1010c:	691b      	ldr	r3, [r3, #16]
   1010e:	68ba      	ldr	r2, [r7, #8]
   10110:	601a      	str	r2, [r3, #0]
        }
    }

    // We set self->globals=NULL while executing, for a sentinel to ensure the generator
    // cannot be reentered during execution
    if (self->globals == NULL) {
   10112:	69fb      	ldr	r3, [r7, #28]
   10114:	685b      	ldr	r3, [r3, #4]
   10116:	2b00      	cmp	r3, #0
   10118:	d102      	bne.n	10120 <mp_obj_gen_resume+0x9c>
        mp_raise_ValueError("generator already executing");
   1011a:	482f      	ldr	r0, [pc, #188]	; (101d8 <mp_obj_gen_resume+0x154>)
   1011c:	f7fc ff32 	bl	cf84 <mp_raise_ValueError>
    }

    // Set up the correct globals context for the generator and execute it
    self->code_state.old_globals = mp_globals_get();
   10120:	f7ff ff38 	bl	ff94 <mp_globals_get>
   10124:	4602      	mov	r2, r0
   10126:	69fb      	ldr	r3, [r7, #28]
   10128:	619a      	str	r2, [r3, #24]
    mp_globals_set(self->globals);
   1012a:	69fb      	ldr	r3, [r7, #28]
   1012c:	685b      	ldr	r3, [r3, #4]
   1012e:	4618      	mov	r0, r3
   10130:	f7ff ff3c 	bl	ffac <mp_globals_set>
    self->globals = NULL;
   10134:	69fb      	ldr	r3, [r7, #28]
   10136:	2200      	movs	r2, #0
   10138:	605a      	str	r2, [r3, #4]
    mp_vm_return_kind_t ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
   1013a:	69fb      	ldr	r3, [r7, #28]
   1013c:	3308      	adds	r3, #8
   1013e:	6879      	ldr	r1, [r7, #4]
   10140:	4618      	mov	r0, r3
   10142:	f009 fad9 	bl	196f8 <mp_execute_bytecode>
   10146:	61b8      	str	r0, [r7, #24]
    self->globals = mp_globals_get();
   10148:	f7ff ff24 	bl	ff94 <mp_globals_get>
   1014c:	4602      	mov	r2, r0
   1014e:	69fb      	ldr	r3, [r7, #28]
   10150:	605a      	str	r2, [r3, #4]
    mp_globals_set(self->code_state.old_globals);
   10152:	69fb      	ldr	r3, [r7, #28]
   10154:	699b      	ldr	r3, [r3, #24]
   10156:	4618      	mov	r0, r3
   10158:	f7ff ff28 	bl	ffac <mp_globals_set>

    switch (ret_kind) {
   1015c:	69bb      	ldr	r3, [r7, #24]
   1015e:	2b01      	cmp	r3, #1
   10160:	d00a      	beq.n	10178 <mp_obj_gen_resume+0xf4>
   10162:	2b02      	cmp	r3, #2
   10164:	d012      	beq.n	1018c <mp_obj_gen_resume+0x108>
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            // TODO: check how return with value behaves under such conditions
            // in CPython.
            self->code_state.ip = 0;
   10166:	69fb      	ldr	r3, [r7, #28]
   10168:	2200      	movs	r2, #0
   1016a:	60da      	str	r2, [r3, #12]
            *ret_val = *self->code_state.sp;
   1016c:	69fb      	ldr	r3, [r7, #28]
   1016e:	691b      	ldr	r3, [r3, #16]
   10170:	681a      	ldr	r2, [r3, #0]
   10172:	683b      	ldr	r3, [r7, #0]
   10174:	601a      	str	r2, [r3, #0]
            break;
   10176:	e01d      	b.n	101b4 <mp_obj_gen_resume+0x130>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
   10178:	69fb      	ldr	r3, [r7, #28]
   1017a:	691b      	ldr	r3, [r3, #16]
   1017c:	681a      	ldr	r2, [r3, #0]
   1017e:	683b      	ldr	r3, [r7, #0]
   10180:	601a      	str	r2, [r3, #0]
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
   10182:	69fb      	ldr	r3, [r7, #28]
   10184:	691b      	ldr	r3, [r3, #16]
   10186:	4a12      	ldr	r2, [pc, #72]	; (101d0 <mp_obj_gen_resume+0x14c>)
   10188:	601a      	str	r2, [r3, #0]
            #endif
            break;
   1018a:	e013      	b.n	101b4 <mp_obj_gen_resume+0x130>

        case MP_VM_RETURN_EXCEPTION: {
            size_t n_state = mp_decode_uint_value(self->code_state.fun_bc->bytecode);
   1018c:	69fb      	ldr	r3, [r7, #28]
   1018e:	689b      	ldr	r3, [r3, #8]
   10190:	689b      	ldr	r3, [r3, #8]
   10192:	4618      	mov	r0, r3
   10194:	f00a f9e4 	bl	1a560 <mp_decode_uint_value>
   10198:	6178      	str	r0, [r7, #20]
            self->code_state.ip = 0;
   1019a:	69fb      	ldr	r3, [r7, #28]
   1019c:	2200      	movs	r2, #0
   1019e:	60da      	str	r2, [r3, #12]
            *ret_val = self->code_state.state[n_state - 1];
   101a0:	697b      	ldr	r3, [r7, #20]
   101a2:	3b01      	subs	r3, #1
   101a4:	69fa      	ldr	r2, [r7, #28]
   101a6:	3306      	adds	r3, #6
   101a8:	009b      	lsls	r3, r3, #2
   101aa:	4413      	add	r3, r2
   101ac:	685a      	ldr	r2, [r3, #4]
   101ae:	683b      	ldr	r3, [r7, #0]
   101b0:	601a      	str	r2, [r3, #0]
            break;
   101b2:	bf00      	nop
        }
    }

    return ret_kind;
   101b4:	69bb      	ldr	r3, [r7, #24]
}
   101b6:	4618      	mov	r0, r3
   101b8:	3720      	adds	r7, #32
   101ba:	46bd      	mov	sp, r7
   101bc:	bd80      	pop	{r7, pc}
   101be:	bf00      	nop
   101c0:	00020df8 	.word	0x00020df8
   101c4:	00020c88 	.word	0x00020c88
   101c8:	00020e34 	.word	0x00020e34
   101cc:	00020cec 	.word	0x00020cec
   101d0:	00021480 	.word	0x00021480
   101d4:	00020d04 	.word	0x00020d04
   101d8:	00020d3c 	.word	0x00020d3c

000101dc <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
   101dc:	b580      	push	{r7, lr}
   101de:	b086      	sub	sp, #24
   101e0:	af00      	add	r7, sp, #0
   101e2:	60f8      	str	r0, [r7, #12]
   101e4:	60b9      	str	r1, [r7, #8]
   101e6:	607a      	str	r2, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
   101e8:	f107 0310 	add.w	r3, r7, #16
   101ec:	687a      	ldr	r2, [r7, #4]
   101ee:	68b9      	ldr	r1, [r7, #8]
   101f0:	68f8      	ldr	r0, [r7, #12]
   101f2:	f7ff ff47 	bl	10084 <mp_obj_gen_resume>
   101f6:	4603      	mov	r3, r0
   101f8:	2b01      	cmp	r3, #1
   101fa:	d015      	beq.n	10228 <gen_resume_and_raise+0x4c>
   101fc:	2b02      	cmp	r3, #2
   101fe:	d015      	beq.n	1022c <gen_resume_and_raise+0x50>
        case MP_VM_RETURN_NORMAL:
        default:
            // Optimize return w/o value in case generator is used in for loop
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
   10200:	693b      	ldr	r3, [r7, #16]
   10202:	4a1a      	ldr	r2, [pc, #104]	; (1026c <gen_resume_and_raise+0x90>)
   10204:	4293      	cmp	r3, r2
   10206:	d002      	beq.n	1020e <gen_resume_and_raise+0x32>
   10208:	693b      	ldr	r3, [r7, #16]
   1020a:	2b04      	cmp	r3, #4
   1020c:	d101      	bne.n	10212 <gen_resume_and_raise+0x36>
                return MP_OBJ_STOP_ITERATION;
   1020e:	2304      	movs	r3, #4
   10210:	e027      	b.n	10262 <gen_resume_and_raise+0x86>
            } else {
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
   10212:	f107 0310 	add.w	r3, r7, #16
   10216:	461a      	mov	r2, r3
   10218:	2101      	movs	r1, #1
   1021a:	4815      	ldr	r0, [pc, #84]	; (10270 <gen_resume_and_raise+0x94>)
   1021c:	f7ff f964 	bl	f4e8 <mp_obj_new_exception_args>
   10220:	4603      	mov	r3, r0
   10222:	4618      	mov	r0, r3
   10224:	f7f0 f85c 	bl	2e0 <nlr_jump>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
   10228:	693b      	ldr	r3, [r7, #16]
   1022a:	e01a      	b.n	10262 <gen_resume_and_raise+0x86>

        case MP_VM_RETURN_EXCEPTION:
            // TODO: Optimization of returning MP_OBJ_STOP_ITERATION is really part
            // of mp_iternext() protocol, but this function is called by other methods
            // too, which may not handled MP_OBJ_STOP_ITERATION.
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1022c:	693b      	ldr	r3, [r7, #16]
   1022e:	4618      	mov	r0, r3
   10230:	f7fd facc 	bl	d7cc <mp_obj_get_type>
   10234:	4603      	mov	r3, r0
   10236:	490e      	ldr	r1, [pc, #56]	; (10270 <gen_resume_and_raise+0x94>)
   10238:	4618      	mov	r0, r3
   1023a:	f007 f83f 	bl	172bc <mp_obj_is_subclass_fast>
   1023e:	4603      	mov	r3, r0
   10240:	2b00      	cmp	r3, #0
   10242:	d00a      	beq.n	1025a <gen_resume_and_raise+0x7e>
                mp_obj_t val = mp_obj_exception_get_value(ret);
   10244:	693b      	ldr	r3, [r7, #16]
   10246:	4618      	mov	r0, r3
   10248:	f7ff f8dc 	bl	f404 <mp_obj_exception_get_value>
   1024c:	6178      	str	r0, [r7, #20]
                if (val == mp_const_none) {
   1024e:	697b      	ldr	r3, [r7, #20]
   10250:	4a06      	ldr	r2, [pc, #24]	; (1026c <gen_resume_and_raise+0x90>)
   10252:	4293      	cmp	r3, r2
   10254:	d101      	bne.n	1025a <gen_resume_and_raise+0x7e>
                    return MP_OBJ_STOP_ITERATION;
   10256:	2304      	movs	r3, #4
   10258:	e003      	b.n	10262 <gen_resume_and_raise+0x86>
                }
            }
            nlr_raise(ret);
   1025a:	693b      	ldr	r3, [r7, #16]
   1025c:	4618      	mov	r0, r3
   1025e:	f7f0 f83f 	bl	2e0 <nlr_jump>
    }
}
   10262:	4618      	mov	r0, r3
   10264:	3718      	adds	r7, #24
   10266:	46bd      	mov	sp, r7
   10268:	bd80      	pop	{r7, pc}
   1026a:	bf00      	nop
   1026c:	00021480 	.word	0x00021480
   10270:	00020310 	.word	0x00020310

00010274 <gen_instance_iternext>:

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
   10274:	b580      	push	{r7, lr}
   10276:	b082      	sub	sp, #8
   10278:	af00      	add	r7, sp, #0
   1027a:	6078      	str	r0, [r7, #4]
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
   1027c:	2200      	movs	r2, #0
   1027e:	4904      	ldr	r1, [pc, #16]	; (10290 <gen_instance_iternext+0x1c>)
   10280:	6878      	ldr	r0, [r7, #4]
   10282:	f7ff ffab 	bl	101dc <gen_resume_and_raise>
   10286:	4603      	mov	r3, r0
}
   10288:	4618      	mov	r0, r3
   1028a:	3708      	adds	r7, #8
   1028c:	46bd      	mov	sp, r7
   1028e:	bd80      	pop	{r7, pc}
   10290:	00021480 	.word	0x00021480

00010294 <gen_instance_send>:

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
   10294:	b580      	push	{r7, lr}
   10296:	b084      	sub	sp, #16
   10298:	af00      	add	r7, sp, #0
   1029a:	6078      	str	r0, [r7, #4]
   1029c:	6039      	str	r1, [r7, #0]
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
   1029e:	2200      	movs	r2, #0
   102a0:	6839      	ldr	r1, [r7, #0]
   102a2:	6878      	ldr	r0, [r7, #4]
   102a4:	f7ff ff9a 	bl	101dc <gen_resume_and_raise>
   102a8:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   102aa:	68fb      	ldr	r3, [r7, #12]
   102ac:	2b04      	cmp	r3, #4
   102ae:	d106      	bne.n	102be <gen_instance_send+0x2a>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   102b0:	4805      	ldr	r0, [pc, #20]	; (102c8 <gen_instance_send+0x34>)
   102b2:	f7ff f8fb 	bl	f4ac <mp_obj_new_exception>
   102b6:	4603      	mov	r3, r0
   102b8:	4618      	mov	r0, r3
   102ba:	f7f0 f811 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   102be:	68fb      	ldr	r3, [r7, #12]
    }
}
   102c0:	4618      	mov	r0, r3
   102c2:	3710      	adds	r7, #16
   102c4:	46bd      	mov	sp, r7
   102c6:	bd80      	pop	{r7, pc}
   102c8:	00020310 	.word	0x00020310

000102cc <gen_instance_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in);
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   102cc:	b580      	push	{r7, lr}
   102ce:	b084      	sub	sp, #16
   102d0:	af00      	add	r7, sp, #0
   102d2:	6078      	str	r0, [r7, #4]
   102d4:	6039      	str	r1, [r7, #0]
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
   102d6:	687b      	ldr	r3, [r7, #4]
   102d8:	2b02      	cmp	r3, #2
   102da:	d102      	bne.n	102e2 <gen_instance_throw+0x16>
   102dc:	683b      	ldr	r3, [r7, #0]
   102de:	685b      	ldr	r3, [r3, #4]
   102e0:	e001      	b.n	102e6 <gen_instance_throw+0x1a>
   102e2:	683b      	ldr	r3, [r7, #0]
   102e4:	689b      	ldr	r3, [r3, #8]
   102e6:	60fb      	str	r3, [r7, #12]

    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
   102e8:	683b      	ldr	r3, [r7, #0]
   102ea:	681b      	ldr	r3, [r3, #0]
   102ec:	68fa      	ldr	r2, [r7, #12]
   102ee:	490a      	ldr	r1, [pc, #40]	; (10318 <gen_instance_throw+0x4c>)
   102f0:	4618      	mov	r0, r3
   102f2:	f7ff ff73 	bl	101dc <gen_resume_and_raise>
   102f6:	60b8      	str	r0, [r7, #8]
    if (ret == MP_OBJ_STOP_ITERATION) {
   102f8:	68bb      	ldr	r3, [r7, #8]
   102fa:	2b04      	cmp	r3, #4
   102fc:	d106      	bne.n	1030c <gen_instance_throw+0x40>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   102fe:	4807      	ldr	r0, [pc, #28]	; (1031c <gen_instance_throw+0x50>)
   10300:	f7ff f8d4 	bl	f4ac <mp_obj_new_exception>
   10304:	4603      	mov	r3, r0
   10306:	4618      	mov	r0, r3
   10308:	f7ef ffea 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   1030c:	68bb      	ldr	r3, [r7, #8]
    }
}
   1030e:	4618      	mov	r0, r3
   10310:	3710      	adds	r7, #16
   10312:	46bd      	mov	sp, r7
   10314:	bd80      	pop	{r7, pc}
   10316:	bf00      	nop
   10318:	00021480 	.word	0x00021480
   1031c:	00020310 	.word	0x00020310

00010320 <gen_instance_close>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   10320:	b580      	push	{r7, lr}
   10322:	b084      	sub	sp, #16
   10324:	af00      	add	r7, sp, #0
   10326:	6078      	str	r0, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   10328:	f107 030c 	add.w	r3, r7, #12
   1032c:	4a18      	ldr	r2, [pc, #96]	; (10390 <gen_instance_close+0x70>)
   1032e:	4919      	ldr	r1, [pc, #100]	; (10394 <gen_instance_close+0x74>)
   10330:	6878      	ldr	r0, [r7, #4]
   10332:	f7ff fea7 	bl	10084 <mp_obj_gen_resume>
   10336:	4603      	mov	r3, r0
   10338:	2b01      	cmp	r3, #1
   1033a:	d002      	beq.n	10342 <gen_instance_close+0x22>
   1033c:	2b02      	cmp	r3, #2
   1033e:	d004      	beq.n	1034a <gen_instance_close+0x2a>
   10340:	e021      	b.n	10386 <gen_instance_close+0x66>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
   10342:	4915      	ldr	r1, [pc, #84]	; (10398 <gen_instance_close+0x78>)
   10344:	4815      	ldr	r0, [pc, #84]	; (1039c <gen_instance_close+0x7c>)
   10346:	f7fc fe05 	bl	cf54 <mp_raise_msg>

        // Swallow StopIteration & GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   1034a:	68fb      	ldr	r3, [r7, #12]
   1034c:	4618      	mov	r0, r3
   1034e:	f7fd fa3d 	bl	d7cc <mp_obj_get_type>
   10352:	4603      	mov	r3, r0
   10354:	4912      	ldr	r1, [pc, #72]	; (103a0 <gen_instance_close+0x80>)
   10356:	4618      	mov	r0, r3
   10358:	f006 ffb0 	bl	172bc <mp_obj_is_subclass_fast>
   1035c:	4603      	mov	r3, r0
   1035e:	2b00      	cmp	r3, #0
   10360:	d10b      	bne.n	1037a <gen_instance_close+0x5a>
                mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   10362:	68fb      	ldr	r3, [r7, #12]
   10364:	4618      	mov	r0, r3
   10366:	f7fd fa31 	bl	d7cc <mp_obj_get_type>
   1036a:	4603      	mov	r3, r0
   1036c:	490d      	ldr	r1, [pc, #52]	; (103a4 <gen_instance_close+0x84>)
   1036e:	4618      	mov	r0, r3
   10370:	f006 ffa4 	bl	172bc <mp_obj_is_subclass_fast>
   10374:	4603      	mov	r3, r0
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   10376:	2b00      	cmp	r3, #0
   10378:	d001      	beq.n	1037e <gen_instance_close+0x5e>
                return mp_const_none;
   1037a:	4b06      	ldr	r3, [pc, #24]	; (10394 <gen_instance_close+0x74>)
   1037c:	e004      	b.n	10388 <gen_instance_close+0x68>
            }
            nlr_raise(ret);
   1037e:	68fb      	ldr	r3, [r7, #12]
   10380:	4618      	mov	r0, r3
   10382:	f7ef ffad 	bl	2e0 <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
   10386:	4b03      	ldr	r3, [pc, #12]	; (10394 <gen_instance_close+0x74>)
    }
}
   10388:	4618      	mov	r0, r3
   1038a:	3710      	adds	r7, #16
   1038c:	46bd      	mov	sp, r7
   1038e:	bd80      	pop	{r7, pc}
   10390:	000201cc 	.word	0x000201cc
   10394:	00021480 	.word	0x00021480
   10398:	00020d6c 	.word	0x00020d6c
   1039c:	00020658 	.word	0x00020658
   103a0:	00020298 	.word	0x00020298
   103a4:	00020310 	.word	0x00020310

000103a8 <gen_instance_pend_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
   103a8:	b580      	push	{r7, lr}
   103aa:	b084      	sub	sp, #16
   103ac:	af00      	add	r7, sp, #0
   103ae:	6078      	str	r0, [r7, #4]
   103b0:	6039      	str	r1, [r7, #0]
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   103b2:	687b      	ldr	r3, [r7, #4]
   103b4:	60fb      	str	r3, [r7, #12]
    if (self->code_state.sp == self->code_state.state - 1) {
   103b6:	68fb      	ldr	r3, [r7, #12]
   103b8:	691a      	ldr	r2, [r3, #16]
   103ba:	68fb      	ldr	r3, [r7, #12]
   103bc:	331c      	adds	r3, #28
   103be:	3b04      	subs	r3, #4
   103c0:	429a      	cmp	r2, r3
   103c2:	d102      	bne.n	103ca <gen_instance_pend_throw+0x22>
        mp_raise_TypeError("can't pend throw to just-started generator");
   103c4:	4807      	ldr	r0, [pc, #28]	; (103e4 <gen_instance_pend_throw+0x3c>)
   103c6:	f7fc fde7 	bl	cf98 <mp_raise_TypeError>
    }
    mp_obj_t prev = *self->code_state.sp;
   103ca:	68fb      	ldr	r3, [r7, #12]
   103cc:	691b      	ldr	r3, [r3, #16]
   103ce:	681b      	ldr	r3, [r3, #0]
   103d0:	60bb      	str	r3, [r7, #8]
    *self->code_state.sp = exc_in;
   103d2:	68fb      	ldr	r3, [r7, #12]
   103d4:	691b      	ldr	r3, [r3, #16]
   103d6:	683a      	ldr	r2, [r7, #0]
   103d8:	601a      	str	r2, [r3, #0]
    return prev;
   103da:	68bb      	ldr	r3, [r7, #8]
}
   103dc:	4618      	mov	r0, r3
   103de:	3710      	adds	r7, #16
   103e0:	46bd      	mov	sp, r7
   103e2:	bd80      	pop	{r7, pc}
   103e4:	00020d94 	.word	0x00020d94

000103e8 <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   103e8:	b580      	push	{r7, lr}
   103ea:	b092      	sub	sp, #72	; 0x48
   103ec:	af00      	add	r7, sp, #0
   103ee:	6078      	str	r0, [r7, #4]
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
   103f0:	687b      	ldr	r3, [r7, #4]
   103f2:	647b      	str	r3, [r7, #68]	; 0x44
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   103f4:	f107 030c 	add.w	r3, r7, #12
   103f8:	4618      	mov	r0, r3
   103fa:	f7ef ff5f 	bl	2bc <nlr_push>
   103fe:	4603      	mov	r3, r0
   10400:	2b00      	cmp	r3, #0
   10402:	d115      	bne.n	10430 <it_iternext+0x48>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   10404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10406:	3304      	adds	r3, #4
   10408:	461a      	mov	r2, r3
   1040a:	2100      	movs	r1, #0
   1040c:	2001      	movs	r0, #1
   1040e:	f7fb fd23 	bl	be58 <mp_call_method_n_kw>
   10412:	6438      	str	r0, [r7, #64]	; 0x40
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   10414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10416:	68db      	ldr	r3, [r3, #12]
   10418:	105b      	asrs	r3, r3, #1
   1041a:	3301      	adds	r3, #1
   1041c:	005b      	lsls	r3, r3, #1
   1041e:	f043 0301 	orr.w	r3, r3, #1
   10422:	461a      	mov	r2, r3
   10424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10426:	60da      	str	r2, [r3, #12]
        nlr_pop();
   10428:	f7ef ff36 	bl	298 <nlr_pop>
        return value;
   1042c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1042e:	e010      	b.n	10452 <it_iternext+0x6a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
   10430:	693b      	ldr	r3, [r7, #16]
   10432:	681b      	ldr	r3, [r3, #0]
   10434:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   10436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10438:	4a08      	ldr	r2, [pc, #32]	; (1045c <it_iternext+0x74>)
   1043a:	4293      	cmp	r3, r2
   1043c:	d003      	beq.n	10446 <it_iternext+0x5e>
   1043e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10440:	4a07      	ldr	r2, [pc, #28]	; (10460 <it_iternext+0x78>)
   10442:	4293      	cmp	r3, r2
   10444:	d101      	bne.n	1044a <it_iternext+0x62>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
   10446:	2304      	movs	r3, #4
   10448:	e003      	b.n	10452 <it_iternext+0x6a>
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   1044a:	693b      	ldr	r3, [r7, #16]
   1044c:	4618      	mov	r0, r3
   1044e:	f7ef ff47 	bl	2e0 <nlr_jump>
        }
    }
}
   10452:	4618      	mov	r0, r3
   10454:	3748      	adds	r7, #72	; 0x48
   10456:	46bd      	mov	sp, r7
   10458:	bd80      	pop	{r7, pc}
   1045a:	bf00      	nop
   1045c:	00020310 	.word	0x00020310
   10460:	0002052c 	.word	0x0002052c

00010464 <mp_obj_new_getitem_iter>:
    .getiter = mp_identity_getiter,
    .iternext = it_iternext,
};

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
   10464:	b480      	push	{r7}
   10466:	b085      	sub	sp, #20
   10468:	af00      	add	r7, sp, #0
   1046a:	6078      	str	r0, [r7, #4]
   1046c:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
   1046e:	683b      	ldr	r3, [r7, #0]
   10470:	60fb      	str	r3, [r7, #12]
    o->base.type = &it_type;
   10472:	68fb      	ldr	r3, [r7, #12]
   10474:	4a09      	ldr	r2, [pc, #36]	; (1049c <mp_obj_new_getitem_iter+0x38>)
   10476:	601a      	str	r2, [r3, #0]
    o->args[0] = args[0];
   10478:	687b      	ldr	r3, [r7, #4]
   1047a:	681a      	ldr	r2, [r3, #0]
   1047c:	68fb      	ldr	r3, [r7, #12]
   1047e:	605a      	str	r2, [r3, #4]
    o->args[1] = args[1];
   10480:	687b      	ldr	r3, [r7, #4]
   10482:	685a      	ldr	r2, [r3, #4]
   10484:	68fb      	ldr	r3, [r7, #12]
   10486:	609a      	str	r2, [r3, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
   10488:	68fb      	ldr	r3, [r7, #12]
   1048a:	2201      	movs	r2, #1
   1048c:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   1048e:	68fb      	ldr	r3, [r7, #12]
}
   10490:	4618      	mov	r0, r3
   10492:	3714      	adds	r7, #20
   10494:	46bd      	mov	sp, r7
   10496:	f85d 7b04 	ldr.w	r7, [sp], #4
   1049a:	4770      	bx	lr
   1049c:	00020e48 	.word	0x00020e48

000104a0 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   104a0:	b480      	push	{r7}
   104a2:	b083      	sub	sp, #12
   104a4:	af00      	add	r7, sp, #0
   104a6:	6078      	str	r0, [r7, #4]
   104a8:	687b      	ldr	r3, [r7, #4]
   104aa:	f003 0301 	and.w	r3, r3, #1
   104ae:	2b00      	cmp	r3, #0
   104b0:	bf14      	ite	ne
   104b2:	2301      	movne	r3, #1
   104b4:	2300      	moveq	r3, #0
   104b6:	b2db      	uxtb	r3, r3
   104b8:	4618      	mov	r0, r3
   104ba:	370c      	adds	r7, #12
   104bc:	46bd      	mov	sp, r7
   104be:	f85d 7b04 	ldr.w	r7, [sp], #4
   104c2:	4770      	bx	lr

000104c4 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   104c4:	b480      	push	{r7}
   104c6:	b083      	sub	sp, #12
   104c8:	af00      	add	r7, sp, #0
   104ca:	6078      	str	r0, [r7, #4]
   104cc:	687b      	ldr	r3, [r7, #4]
   104ce:	f003 0303 	and.w	r3, r3, #3
   104d2:	2b02      	cmp	r3, #2
   104d4:	bf0c      	ite	eq
   104d6:	2301      	moveq	r3, #1
   104d8:	2300      	movne	r3, #0
   104da:	b2db      	uxtb	r3, r3
   104dc:	4618      	mov	r0, r3
   104de:	370c      	adds	r7, #12
   104e0:	46bd      	mov	sp, r7
   104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   104e6:	4770      	bx	lr

000104e8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   104e8:	b480      	push	{r7}
   104ea:	b083      	sub	sp, #12
   104ec:	af00      	add	r7, sp, #0
   104ee:	6078      	str	r0, [r7, #4]
   104f0:	687b      	ldr	r3, [r7, #4]
   104f2:	f003 0303 	and.w	r3, r3, #3
   104f6:	2b00      	cmp	r3, #0
   104f8:	bf0c      	ite	eq
   104fa:	2301      	moveq	r3, #1
   104fc:	2300      	movne	r3, #0
   104fe:	b2db      	uxtb	r3, r3
   10500:	4618      	mov	r0, r3
   10502:	370c      	adds	r7, #12
   10504:	46bd      	mov	sp, r7
   10506:	f85d 7b04 	ldr.w	r7, [sp], #4
   1050a:	4770      	bx	lr

0001050c <mp_obj_int_make_new>:
#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

// This dispatcher function is expected to be independent of the implementation of long int
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1050c:	b590      	push	{r4, r7, lr}
   1050e:	b08b      	sub	sp, #44	; 0x2c
   10510:	af02      	add	r7, sp, #8
   10512:	60f8      	str	r0, [r7, #12]
   10514:	60b9      	str	r1, [r7, #8]
   10516:	607a      	str	r2, [r7, #4]
   10518:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
   1051a:	2300      	movs	r3, #0
   1051c:	9300      	str	r3, [sp, #0]
   1051e:	2302      	movs	r3, #2
   10520:	2200      	movs	r2, #0
   10522:	6879      	ldr	r1, [r7, #4]
   10524:	68b8      	ldr	r0, [r7, #8]
   10526:	f7fc fd5d 	bl	cfe4 <mp_arg_check_num>

    switch (n_args) {
   1052a:	68bb      	ldr	r3, [r7, #8]
   1052c:	2b00      	cmp	r3, #0
   1052e:	d002      	beq.n	10536 <mp_obj_int_make_new+0x2a>
   10530:	2b01      	cmp	r3, #1
   10532:	d002      	beq.n	1053a <mp_obj_int_make_new+0x2e>
   10534:	e04c      	b.n	105d0 <mp_obj_int_make_new+0xc4>
        case 0:
            return MP_OBJ_NEW_SMALL_INT(0);
   10536:	2301      	movs	r3, #1
   10538:	e061      	b.n	105fe <mp_obj_int_make_new+0xf2>

        case 1:
            if (MP_OBJ_IS_INT(args[0])) {
   1053a:	683b      	ldr	r3, [r7, #0]
   1053c:	681b      	ldr	r3, [r3, #0]
   1053e:	4618      	mov	r0, r3
   10540:	f7ff ffae 	bl	104a0 <MP_OBJ_IS_SMALL_INT>
   10544:	4603      	mov	r3, r0
   10546:	2b00      	cmp	r3, #0
   10548:	d10d      	bne.n	10566 <mp_obj_int_make_new+0x5a>
   1054a:	683b      	ldr	r3, [r7, #0]
   1054c:	681b      	ldr	r3, [r3, #0]
   1054e:	4618      	mov	r0, r3
   10550:	f7ff ffca 	bl	104e8 <MP_OBJ_IS_OBJ>
   10554:	4603      	mov	r3, r0
   10556:	2b00      	cmp	r3, #0
   10558:	d008      	beq.n	1056c <mp_obj_int_make_new+0x60>
   1055a:	683b      	ldr	r3, [r7, #0]
   1055c:	681b      	ldr	r3, [r3, #0]
   1055e:	681b      	ldr	r3, [r3, #0]
   10560:	4a29      	ldr	r2, [pc, #164]	; (10608 <mp_obj_int_make_new+0xfc>)
   10562:	4293      	cmp	r3, r2
   10564:	d102      	bne.n	1056c <mp_obj_int_make_new+0x60>
                // already an int (small or long), just return it
                return args[0];
   10566:	683b      	ldr	r3, [r7, #0]
   10568:	681b      	ldr	r3, [r3, #0]
   1056a:	e048      	b.n	105fe <mp_obj_int_make_new+0xf2>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   1056c:	683b      	ldr	r3, [r7, #0]
   1056e:	681b      	ldr	r3, [r3, #0]
   10570:	4618      	mov	r0, r3
   10572:	f7ff ffa7 	bl	104c4 <MP_OBJ_IS_QSTR>
   10576:	4603      	mov	r3, r0
   10578:	2b00      	cmp	r3, #0
   1057a:	d10e      	bne.n	1059a <mp_obj_int_make_new+0x8e>
   1057c:	683b      	ldr	r3, [r7, #0]
   1057e:	681b      	ldr	r3, [r3, #0]
   10580:	4618      	mov	r0, r3
   10582:	f7ff ffb1 	bl	104e8 <MP_OBJ_IS_OBJ>
   10586:	4603      	mov	r3, r0
   10588:	2b00      	cmp	r3, #0
   1058a:	d017      	beq.n	105bc <mp_obj_int_make_new+0xb0>
   1058c:	683b      	ldr	r3, [r7, #0]
   1058e:	681b      	ldr	r3, [r3, #0]
   10590:	681b      	ldr	r3, [r3, #0]
   10592:	699b      	ldr	r3, [r3, #24]
   10594:	4a1d      	ldr	r2, [pc, #116]	; (1060c <mp_obj_int_make_new+0x100>)
   10596:	4293      	cmp	r3, r2
   10598:	d110      	bne.n	105bc <mp_obj_int_make_new+0xb0>
                // a string, parse it
                size_t l;
                const char *s = mp_obj_str_get_data(args[0], &l);
   1059a:	683b      	ldr	r3, [r7, #0]
   1059c:	681b      	ldr	r3, [r3, #0]
   1059e:	f107 0214 	add.w	r2, r7, #20
   105a2:	4611      	mov	r1, r2
   105a4:	4618      	mov	r0, r3
   105a6:	f005 f859 	bl	1565c <mp_obj_str_get_data>
   105aa:	61f8      	str	r0, [r7, #28]
                return mp_parse_num_integer(s, l, 0, NULL);
   105ac:	6979      	ldr	r1, [r7, #20]
   105ae:	2300      	movs	r3, #0
   105b0:	2200      	movs	r2, #0
   105b2:	69f8      	ldr	r0, [r7, #28]
   105b4:	f7fa fcd8 	bl	af68 <mp_parse_num_integer>
   105b8:	4603      	mov	r3, r0
   105ba:	e020      	b.n	105fe <mp_obj_int_make_new+0xf2>
            } else if (mp_obj_is_float(args[0])) {
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
#endif
            } else {
                // try to convert to small int (eg from bool)
                return MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(args[0]));
   105bc:	683b      	ldr	r3, [r7, #0]
   105be:	681b      	ldr	r3, [r3, #0]
   105c0:	4618      	mov	r0, r3
   105c2:	f7fd fae1 	bl	db88 <mp_obj_get_int>
   105c6:	4603      	mov	r3, r0
   105c8:	005b      	lsls	r3, r3, #1
   105ca:	f043 0301 	orr.w	r3, r3, #1
   105ce:	e016      	b.n	105fe <mp_obj_int_make_new+0xf2>
        case 2:
        default: {
            // should be a string, parse it
            // TODO proper error checking of argument types
            size_t l;
            const char *s = mp_obj_str_get_data(args[0], &l);
   105d0:	683b      	ldr	r3, [r7, #0]
   105d2:	681b      	ldr	r3, [r3, #0]
   105d4:	f107 0210 	add.w	r2, r7, #16
   105d8:	4611      	mov	r1, r2
   105da:	4618      	mov	r0, r3
   105dc:	f005 f83e 	bl	1565c <mp_obj_str_get_data>
   105e0:	61b8      	str	r0, [r7, #24]
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
   105e2:	693c      	ldr	r4, [r7, #16]
   105e4:	683b      	ldr	r3, [r7, #0]
   105e6:	3304      	adds	r3, #4
   105e8:	681b      	ldr	r3, [r3, #0]
   105ea:	4618      	mov	r0, r3
   105ec:	f7fd facc 	bl	db88 <mp_obj_get_int>
   105f0:	4602      	mov	r2, r0
   105f2:	2300      	movs	r3, #0
   105f4:	4621      	mov	r1, r4
   105f6:	69b8      	ldr	r0, [r7, #24]
   105f8:	f7fa fcb6 	bl	af68 <mp_parse_num_integer>
   105fc:	4603      	mov	r3, r0
        }
    }
}
   105fe:	4618      	mov	r0, r3
   10600:	3724      	adds	r7, #36	; 0x24
   10602:	46bd      	mov	sp, r7
   10604:	bd90      	pop	{r4, r7, pc}
   10606:	bf00      	nop
   10608:	00020f3c 	.word	0x00020f3c
   1060c:	00012849 	.word	0x00012849

00010610 <mp_obj_int_print>:
#else
typedef mp_int_t fmt_int_t;
typedef mp_uint_t fmt_uint_t;
#endif

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10610:	b580      	push	{r7, lr}
   10612:	b090      	sub	sp, #64	; 0x40
   10614:	af04      	add	r7, sp, #16
   10616:	60f8      	str	r0, [r7, #12]
   10618:	60b9      	str	r1, [r7, #8]
   1061a:	607a      	str	r2, [r7, #4]
    (void)kind;
    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(fmt_int_t) * 4];
    char *buf = stack_buf;
   1061c:	f107 031c 	add.w	r3, r7, #28
   10620:	61bb      	str	r3, [r7, #24]
    size_t buf_size = sizeof(stack_buf);
   10622:	2310      	movs	r3, #16
   10624:	617b      	str	r3, [r7, #20]
    size_t fmt_size;

    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
   10626:	f107 0210 	add.w	r2, r7, #16
   1062a:	f107 0114 	add.w	r1, r7, #20
   1062e:	f107 0018 	add.w	r0, r7, #24
   10632:	2300      	movs	r3, #0
   10634:	9303      	str	r3, [sp, #12]
   10636:	2300      	movs	r3, #0
   10638:	9302      	str	r3, [sp, #8]
   1063a:	2300      	movs	r3, #0
   1063c:	9301      	str	r3, [sp, #4]
   1063e:	230a      	movs	r3, #10
   10640:	9300      	str	r3, [sp, #0]
   10642:	68bb      	ldr	r3, [r7, #8]
   10644:	f000 f858 	bl	106f8 <mp_obj_int_formatted>
   10648:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_print_str(print, str);
   1064a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1064c:	68f8      	ldr	r0, [r7, #12]
   1064e:	f7f1 f923 	bl	1898 <mp_print_str>

    if (buf != stack_buf) {
   10652:	69ba      	ldr	r2, [r7, #24]
   10654:	f107 031c 	add.w	r3, r7, #28
   10658:	429a      	cmp	r2, r3
   1065a:	d003      	beq.n	10664 <mp_obj_int_print+0x54>
        m_del(char, buf, buf_size);
   1065c:	69bb      	ldr	r3, [r7, #24]
   1065e:	4618      	mov	r0, r3
   10660:	f7ef febe 	bl	3e0 <m_free>
    }
}
   10664:	bf00      	nop
   10666:	3730      	adds	r7, #48	; 0x30
   10668:	46bd      	mov	sp, r7
   1066a:	bd80      	pop	{r7, pc}

0001066c <mp_int_format_size>:
    4, 4, 4, 4,
    4, 4, 4, 5
    */
};

size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
   1066c:	b580      	push	{r7, lr}
   1066e:	b088      	sub	sp, #32
   10670:	af00      	add	r7, sp, #0
   10672:	60f8      	str	r0, [r7, #12]
   10674:	60b9      	str	r1, [r7, #8]
   10676:	607a      	str	r2, [r7, #4]
   10678:	70fb      	strb	r3, [r7, #3]
    assert(2 <= base && base <= 16);
   1067a:	68bb      	ldr	r3, [r7, #8]
   1067c:	2b01      	cmp	r3, #1
   1067e:	dd02      	ble.n	10686 <mp_int_format_size+0x1a>
   10680:	68bb      	ldr	r3, [r7, #8]
   10682:	2b10      	cmp	r3, #16
   10684:	dd05      	ble.n	10692 <mp_int_format_size+0x26>
   10686:	4b17      	ldr	r3, [pc, #92]	; (106e4 <mp_int_format_size+0x78>)
   10688:	4a17      	ldr	r2, [pc, #92]	; (106e8 <mp_int_format_size+0x7c>)
   1068a:	21d0      	movs	r1, #208	; 0xd0
   1068c:	4817      	ldr	r0, [pc, #92]	; (106ec <mp_int_format_size+0x80>)
   1068e:	f00a fe85 	bl	1b39c <__assert_func>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
   10692:	68bb      	ldr	r3, [r7, #8]
   10694:	3b01      	subs	r3, #1
   10696:	4a16      	ldr	r2, [pc, #88]	; (106f0 <mp_int_format_size+0x84>)
   10698:	5cd3      	ldrb	r3, [r2, r3]
   1069a:	461a      	mov	r2, r3
   1069c:	68fb      	ldr	r3, [r7, #12]
   1069e:	fbb3 f3f2 	udiv	r3, r3, r2
   106a2:	3301      	adds	r3, #1
   106a4:	61fb      	str	r3, [r7, #28]
    size_t num_commas = comma ? num_digits / 3 : 0;
   106a6:	78fb      	ldrb	r3, [r7, #3]
   106a8:	2b00      	cmp	r3, #0
   106aa:	d005      	beq.n	106b8 <mp_int_format_size+0x4c>
   106ac:	69fb      	ldr	r3, [r7, #28]
   106ae:	4a11      	ldr	r2, [pc, #68]	; (106f4 <mp_int_format_size+0x88>)
   106b0:	fba2 2303 	umull	r2, r3, r2, r3
   106b4:	085b      	lsrs	r3, r3, #1
   106b6:	e000      	b.n	106ba <mp_int_format_size+0x4e>
   106b8:	2300      	movs	r3, #0
   106ba:	61bb      	str	r3, [r7, #24]
    size_t prefix_len = prefix ? strlen(prefix) : 0;
   106bc:	687b      	ldr	r3, [r7, #4]
   106be:	2b00      	cmp	r3, #0
   106c0:	d004      	beq.n	106cc <mp_int_format_size+0x60>
   106c2:	6878      	ldr	r0, [r7, #4]
   106c4:	f00b fc60 	bl	1bf88 <strlen>
   106c8:	4603      	mov	r3, r0
   106ca:	e000      	b.n	106ce <mp_int_format_size+0x62>
   106cc:	2300      	movs	r3, #0
   106ce:	617b      	str	r3, [r7, #20]
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
   106d0:	69fa      	ldr	r2, [r7, #28]
   106d2:	69bb      	ldr	r3, [r7, #24]
   106d4:	441a      	add	r2, r3
   106d6:	697b      	ldr	r3, [r7, #20]
   106d8:	4413      	add	r3, r2
   106da:	3302      	adds	r3, #2
}
   106dc:	4618      	mov	r0, r3
   106de:	3720      	adds	r7, #32
   106e0:	46bd      	mov	sp, r7
   106e2:	bd80      	pop	{r7, pc}
   106e4:	00020e94 	.word	0x00020e94
   106e8:	00020f78 	.word	0x00020f78
   106ec:	00020eac 	.word	0x00020eac
   106f0:	00020e84 	.word	0x00020e84
   106f4:	aaaaaaab 	.word	0xaaaaaaab

000106f8 <mp_obj_int_formatted>:
// is the callers responsibility to free this allocated buffer.
//
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma) {
   106f8:	b580      	push	{r7, lr}
   106fa:	b08e      	sub	sp, #56	; 0x38
   106fc:	af00      	add	r7, sp, #0
   106fe:	60f8      	str	r0, [r7, #12]
   10700:	60b9      	str	r1, [r7, #8]
   10702:	607a      	str	r2, [r7, #4]
   10704:	603b      	str	r3, [r7, #0]
    fmt_int_t num;
    #if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE
    // Only have small ints; get the integer value to format.
    num = MP_OBJ_SMALL_INT_VALUE(self_in);
   10706:	683b      	ldr	r3, [r7, #0]
   10708:	105b      	asrs	r3, r3, #1
   1070a:	637b      	str	r3, [r7, #52]	; 0x34
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
        #endif
    }
    #endif

    char sign = '\0';
   1070c:	2300      	movs	r3, #0
   1070e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (num < 0) {
   10712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10714:	2b00      	cmp	r3, #0
   10716:	da05      	bge.n	10724 <mp_obj_int_formatted+0x2c>
        num = -num;
   10718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1071a:	425b      	negs	r3, r3
   1071c:	637b      	str	r3, [r7, #52]	; 0x34
        sign = '-';
   1071e:	232d      	movs	r3, #45	; 0x2d
   10720:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
   10724:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10728:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1072a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1072c:	2020      	movs	r0, #32
   1072e:	f7ff ff9d 	bl	1066c <mp_int_format_size>
   10732:	61f8      	str	r0, [r7, #28]
    if (needed_size > *buf_size) {
   10734:	68bb      	ldr	r3, [r7, #8]
   10736:	681a      	ldr	r2, [r3, #0]
   10738:	69fb      	ldr	r3, [r7, #28]
   1073a:	429a      	cmp	r2, r3
   1073c:	d208      	bcs.n	10750 <mp_obj_int_formatted+0x58>
        *buf = m_new(char, needed_size);
   1073e:	69f8      	ldr	r0, [r7, #28]
   10740:	f7ef fdec 	bl	31c <m_malloc>
   10744:	4602      	mov	r2, r0
   10746:	68fb      	ldr	r3, [r7, #12]
   10748:	601a      	str	r2, [r3, #0]
        *buf_size = needed_size;
   1074a:	68bb      	ldr	r3, [r7, #8]
   1074c:	69fa      	ldr	r2, [r7, #28]
   1074e:	601a      	str	r2, [r3, #0]
    }
    char *str = *buf;
   10750:	68fb      	ldr	r3, [r7, #12]
   10752:	681b      	ldr	r3, [r3, #0]
   10754:	61bb      	str	r3, [r7, #24]

    char *b = str + needed_size;
   10756:	69ba      	ldr	r2, [r7, #24]
   10758:	69fb      	ldr	r3, [r7, #28]
   1075a:	4413      	add	r3, r2
   1075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *(--b) = '\0';
   1075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10760:	3b01      	subs	r3, #1
   10762:	62fb      	str	r3, [r7, #44]	; 0x2c
   10764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10766:	2200      	movs	r2, #0
   10768:	701a      	strb	r2, [r3, #0]
    char *last_comma = b;
   1076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1076c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (num == 0) {
   1076e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10770:	2b00      	cmp	r3, #0
   10772:	d106      	bne.n	10782 <mp_obj_int_formatted+0x8a>
        *(--b) = '0';
   10774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10776:	3b01      	subs	r3, #1
   10778:	62fb      	str	r3, [r7, #44]	; 0x2c
   1077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1077c:	2230      	movs	r2, #48	; 0x30
   1077e:	701a      	strb	r2, [r3, #0]
   10780:	e040      	b.n	10804 <mp_obj_int_formatted+0x10c>
    } else {
        do {
            // The cast to fmt_uint_t is because num is positive and we want unsigned arithmetic
            int c = (fmt_uint_t)num % base;
   10782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10786:	fbb3 f1f2 	udiv	r1, r3, r2
   1078a:	fb02 f201 	mul.w	r2, r2, r1
   1078e:	1a9b      	subs	r3, r3, r2
   10790:	627b      	str	r3, [r7, #36]	; 0x24
            num = (fmt_uint_t)num / base;
   10792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10796:	fbb2 f3f3 	udiv	r3, r2, r3
   1079a:	637b      	str	r3, [r7, #52]	; 0x34
            if (c >= 10) {
   1079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1079e:	2b09      	cmp	r3, #9
   107a0:	dd06      	ble.n	107b0 <mp_obj_int_formatted+0xb8>
                c += base_char - 10;
   107a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   107a6:	3b0a      	subs	r3, #10
   107a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   107aa:	4413      	add	r3, r2
   107ac:	627b      	str	r3, [r7, #36]	; 0x24
   107ae:	e002      	b.n	107b6 <mp_obj_int_formatted+0xbe>
            } else {
                c += '0';
   107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107b2:	3330      	adds	r3, #48	; 0x30
   107b4:	627b      	str	r3, [r7, #36]	; 0x24
            }
            *(--b) = c;
   107b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107b8:	3b01      	subs	r3, #1
   107ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   107be:	b2da      	uxtb	r2, r3
   107c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107c2:	701a      	strb	r2, [r3, #0]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
   107c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   107c8:	2b00      	cmp	r3, #0
   107ca:	d014      	beq.n	107f6 <mp_obj_int_formatted+0xfe>
   107cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   107ce:	2b00      	cmp	r3, #0
   107d0:	d011      	beq.n	107f6 <mp_obj_int_formatted+0xfe>
   107d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   107d4:	69bb      	ldr	r3, [r7, #24]
   107d6:	429a      	cmp	r2, r3
   107d8:	d90d      	bls.n	107f6 <mp_obj_int_formatted+0xfe>
   107da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   107dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107de:	1ad3      	subs	r3, r2, r3
   107e0:	2b03      	cmp	r3, #3
   107e2:	d108      	bne.n	107f6 <mp_obj_int_formatted+0xfe>
                *(--b) = comma;
   107e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107e6:	3b01      	subs	r3, #1
   107e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   107ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107ec:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   107f0:	701a      	strb	r2, [r3, #0]
                last_comma = b;
   107f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107f4:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        while (b > str && num != 0);
   107f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   107f8:	69bb      	ldr	r3, [r7, #24]
   107fa:	429a      	cmp	r2, r3
   107fc:	d902      	bls.n	10804 <mp_obj_int_formatted+0x10c>
   107fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10800:	2b00      	cmp	r3, #0
   10802:	d1be      	bne.n	10782 <mp_obj_int_formatted+0x8a>
    }
    if (prefix) {
   10804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10806:	2b00      	cmp	r3, #0
   10808:	d01b      	beq.n	10842 <mp_obj_int_formatted+0x14a>
        size_t prefix_len = strlen(prefix);
   1080a:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1080c:	f00b fbbc 	bl	1bf88 <strlen>
   10810:	6178      	str	r0, [r7, #20]
        char *p = b - prefix_len;
   10812:	697b      	ldr	r3, [r7, #20]
   10814:	425b      	negs	r3, r3
   10816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10818:	4413      	add	r3, r2
   1081a:	623b      	str	r3, [r7, #32]
        if (p > str) {
   1081c:	6a3a      	ldr	r2, [r7, #32]
   1081e:	69bb      	ldr	r3, [r7, #24]
   10820:	429a      	cmp	r2, r3
   10822:	d90e      	bls.n	10842 <mp_obj_int_formatted+0x14a>
            b = p;
   10824:	6a3b      	ldr	r3, [r7, #32]
   10826:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (*prefix) {
   10828:	e007      	b.n	1083a <mp_obj_int_formatted+0x142>
                *p++ = *prefix++;
   1082a:	6a3b      	ldr	r3, [r7, #32]
   1082c:	1c5a      	adds	r2, r3, #1
   1082e:	623a      	str	r2, [r7, #32]
   10830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10832:	1c51      	adds	r1, r2, #1
   10834:	6479      	str	r1, [r7, #68]	; 0x44
   10836:	7812      	ldrb	r2, [r2, #0]
   10838:	701a      	strb	r2, [r3, #0]
            while (*prefix) {
   1083a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1083c:	781b      	ldrb	r3, [r3, #0]
   1083e:	2b00      	cmp	r3, #0
   10840:	d1f3      	bne.n	1082a <mp_obj_int_formatted+0x132>
            }
        }
    }
    if (sign && b > str) {
   10842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   10846:	2b00      	cmp	r3, #0
   10848:	d00a      	beq.n	10860 <mp_obj_int_formatted+0x168>
   1084a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1084c:	69bb      	ldr	r3, [r7, #24]
   1084e:	429a      	cmp	r2, r3
   10850:	d906      	bls.n	10860 <mp_obj_int_formatted+0x168>
        *(--b) = sign;
   10852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10854:	3b01      	subs	r3, #1
   10856:	62fb      	str	r3, [r7, #44]	; 0x2c
   10858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1085a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   1085e:	701a      	strb	r2, [r3, #0]
    }
    *fmt_size = *buf + needed_size - b - 1;
   10860:	68fb      	ldr	r3, [r7, #12]
   10862:	681a      	ldr	r2, [r3, #0]
   10864:	69fb      	ldr	r3, [r7, #28]
   10866:	4413      	add	r3, r2
   10868:	461a      	mov	r2, r3
   1086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1086c:	1ad3      	subs	r3, r2, r3
   1086e:	3b01      	subs	r3, #1
   10870:	461a      	mov	r2, r3
   10872:	687b      	ldr	r3, [r7, #4]
   10874:	601a      	str	r2, [r3, #0]

    return b;
   10876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   10878:	4618      	mov	r0, r3
   1087a:	3738      	adds	r7, #56	; 0x38
   1087c:	46bd      	mov	sp, r7
   1087e:	bd80      	pop	{r7, pc}

00010880 <mp_obj_int_sign>:

#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

int mp_obj_int_sign(mp_obj_t self_in) {
   10880:	b580      	push	{r7, lr}
   10882:	b084      	sub	sp, #16
   10884:	af00      	add	r7, sp, #0
   10886:	6078      	str	r0, [r7, #4]
    mp_int_t val = mp_obj_get_int(self_in);
   10888:	6878      	ldr	r0, [r7, #4]
   1088a:	f7fd f97d 	bl	db88 <mp_obj_get_int>
   1088e:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   10890:	68fb      	ldr	r3, [r7, #12]
   10892:	2b00      	cmp	r3, #0
   10894:	da02      	bge.n	1089c <mp_obj_int_sign+0x1c>
        return -1;
   10896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1089a:	e005      	b.n	108a8 <mp_obj_int_sign+0x28>
    } else if (val > 0) {
   1089c:	68fb      	ldr	r3, [r7, #12]
   1089e:	2b00      	cmp	r3, #0
   108a0:	dd01      	ble.n	108a6 <mp_obj_int_sign+0x26>
        return 1;
   108a2:	2301      	movs	r3, #1
   108a4:	e000      	b.n	108a8 <mp_obj_int_sign+0x28>
    } else {
        return 0;
   108a6:	2300      	movs	r3, #0
    }
}
   108a8:	4618      	mov	r0, r3
   108aa:	3710      	adds	r7, #16
   108ac:	46bd      	mov	sp, r7
   108ae:	bd80      	pop	{r7, pc}

000108b0 <mp_obj_int_unary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_unary_op
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
   108b0:	b480      	push	{r7}
   108b2:	b083      	sub	sp, #12
   108b4:	af00      	add	r7, sp, #0
   108b6:	6078      	str	r0, [r7, #4]
   108b8:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NULL; // op not supported
   108ba:	2300      	movs	r3, #0
}
   108bc:	4618      	mov	r0, r3
   108be:	370c      	adds	r7, #12
   108c0:	46bd      	mov	sp, r7
   108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   108c6:	4770      	bx	lr

000108c8 <mp_obj_int_binary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_binary_op
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   108c8:	b580      	push	{r7, lr}
   108ca:	b084      	sub	sp, #16
   108cc:	af00      	add	r7, sp, #0
   108ce:	60f8      	str	r0, [r7, #12]
   108d0:	60b9      	str	r1, [r7, #8]
   108d2:	607a      	str	r2, [r7, #4]
    return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
   108d4:	687a      	ldr	r2, [r7, #4]
   108d6:	68b9      	ldr	r1, [r7, #8]
   108d8:	68f8      	ldr	r0, [r7, #12]
   108da:	f000 f87f 	bl	109dc <mp_obj_int_binary_op_extra_cases>
   108de:	4603      	mov	r3, r0
}
   108e0:	4618      	mov	r0, r3
   108e2:	3710      	adds	r7, #16
   108e4:	46bd      	mov	sp, r7
   108e6:	bd80      	pop	{r7, pc}

000108e8 <mp_obj_new_int_from_str_len>:

// This is called only with strings whose value doesn't fit in SMALL_INT
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
   108e8:	b580      	push	{r7, lr}
   108ea:	b084      	sub	sp, #16
   108ec:	af00      	add	r7, sp, #0
   108ee:	60f8      	str	r0, [r7, #12]
   108f0:	60b9      	str	r1, [r7, #8]
   108f2:	603b      	str	r3, [r7, #0]
   108f4:	4613      	mov	r3, r2
   108f6:	71fb      	strb	r3, [r7, #7]
    mp_raise_msg(&mp_type_OverflowError, "long int not supported in this build");
   108f8:	4901      	ldr	r1, [pc, #4]	; (10900 <mp_obj_new_int_from_str_len+0x18>)
   108fa:	4802      	ldr	r0, [pc, #8]	; (10904 <mp_obj_new_int_from_str_len+0x1c>)
   108fc:	f7fc fb2a 	bl	cf54 <mp_raise_msg>
   10900:	00020ec0 	.word	0x00020ec0
   10904:	00020388 	.word	0x00020388

00010908 <mp_obj_new_int_from_ll>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ll(long long val) {
   10908:	b580      	push	{r7, lr}
   1090a:	b082      	sub	sp, #8
   1090c:	af00      	add	r7, sp, #0
   1090e:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10912:	4902      	ldr	r1, [pc, #8]	; (1091c <mp_obj_new_int_from_ll+0x14>)
   10914:	4802      	ldr	r0, [pc, #8]	; (10920 <mp_obj_new_int_from_ll+0x18>)
   10916:	f7fc fb1d 	bl	cf54 <mp_raise_msg>
   1091a:	bf00      	nop
   1091c:	00020ee8 	.word	0x00020ee8
   10920:	00020388 	.word	0x00020388

00010924 <mp_obj_new_int_from_ull>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
   10924:	b580      	push	{r7, lr}
   10926:	b082      	sub	sp, #8
   10928:	af00      	add	r7, sp, #0
   1092a:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   1092e:	4902      	ldr	r1, [pc, #8]	; (10938 <mp_obj_new_int_from_ull+0x14>)
   10930:	4802      	ldr	r0, [pc, #8]	; (1093c <mp_obj_new_int_from_ull+0x18>)
   10932:	f7fc fb0f 	bl	cf54 <mp_raise_msg>
   10936:	bf00      	nop
   10938:	00020ee8 	.word	0x00020ee8
   1093c:	00020388 	.word	0x00020388

00010940 <mp_obj_new_int_from_uint>:
    return mp_const_none;
}

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
   10940:	b580      	push	{r7, lr}
   10942:	b082      	sub	sp, #8
   10944:	af00      	add	r7, sp, #0
   10946:	6078      	str	r0, [r7, #4]
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
   10948:	687b      	ldr	r3, [r7, #4]
   1094a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
   1094e:	2b00      	cmp	r3, #0
   10950:	d104      	bne.n	1095c <mp_obj_new_int_from_uint+0x1c>
        return MP_OBJ_NEW_SMALL_INT(value);
   10952:	687b      	ldr	r3, [r7, #4]
   10954:	005b      	lsls	r3, r3, #1
   10956:	f043 0301 	orr.w	r3, r3, #1
   1095a:	e003      	b.n	10964 <mp_obj_new_int_from_uint+0x24>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   1095c:	4903      	ldr	r1, [pc, #12]	; (1096c <mp_obj_new_int_from_uint+0x2c>)
   1095e:	4804      	ldr	r0, [pc, #16]	; (10970 <mp_obj_new_int_from_uint+0x30>)
   10960:	f7fc faf8 	bl	cf54 <mp_raise_msg>
    return mp_const_none;
}
   10964:	4618      	mov	r0, r3
   10966:	3708      	adds	r7, #8
   10968:	46bd      	mov	sp, r7
   1096a:	bd80      	pop	{r7, pc}
   1096c:	00020ee8 	.word	0x00020ee8
   10970:	00020388 	.word	0x00020388

00010974 <mp_obj_new_int>:

mp_obj_t mp_obj_new_int(mp_int_t value) {
   10974:	b580      	push	{r7, lr}
   10976:	b082      	sub	sp, #8
   10978:	af00      	add	r7, sp, #0
   1097a:	6078      	str	r0, [r7, #4]
    if (MP_SMALL_INT_FITS(value)) {
   1097c:	687b      	ldr	r3, [r7, #4]
   1097e:	005a      	lsls	r2, r3, #1
   10980:	687b      	ldr	r3, [r7, #4]
   10982:	4053      	eors	r3, r2
   10984:	2b00      	cmp	r3, #0
   10986:	db04      	blt.n	10992 <mp_obj_new_int+0x1e>
        return MP_OBJ_NEW_SMALL_INT(value);
   10988:	687b      	ldr	r3, [r7, #4]
   1098a:	005b      	lsls	r3, r3, #1
   1098c:	f043 0301 	orr.w	r3, r3, #1
   10990:	e003      	b.n	1099a <mp_obj_new_int+0x26>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10992:	4904      	ldr	r1, [pc, #16]	; (109a4 <mp_obj_new_int+0x30>)
   10994:	4804      	ldr	r0, [pc, #16]	; (109a8 <mp_obj_new_int+0x34>)
   10996:	f7fc fadd 	bl	cf54 <mp_raise_msg>
    return mp_const_none;
}
   1099a:	4618      	mov	r0, r3
   1099c:	3708      	adds	r7, #8
   1099e:	46bd      	mov	sp, r7
   109a0:	bd80      	pop	{r7, pc}
   109a2:	bf00      	nop
   109a4:	00020ee8 	.word	0x00020ee8
   109a8:	00020388 	.word	0x00020388

000109ac <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
   109ac:	b480      	push	{r7}
   109ae:	b083      	sub	sp, #12
   109b0:	af00      	add	r7, sp, #0
   109b2:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   109b4:	687b      	ldr	r3, [r7, #4]
   109b6:	105b      	asrs	r3, r3, #1
}
   109b8:	4618      	mov	r0, r3
   109ba:	370c      	adds	r7, #12
   109bc:	46bd      	mov	sp, r7
   109be:	f85d 7b04 	ldr.w	r7, [sp], #4
   109c2:	4770      	bx	lr

000109c4 <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
   109c4:	b480      	push	{r7}
   109c6:	b083      	sub	sp, #12
   109c8:	af00      	add	r7, sp, #0
   109ca:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   109cc:	687b      	ldr	r3, [r7, #4]
   109ce:	105b      	asrs	r3, r3, #1
}
   109d0:	4618      	mov	r0, r3
   109d2:	370c      	adds	r7, #12
   109d4:	46bd      	mov	sp, r7
   109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   109da:	4770      	bx	lr

000109dc <mp_obj_int_binary_op_extra_cases>:

#endif // MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

// This dispatcher function is expected to be independent of the implementation of long int
// It handles the extra cases for integer-like arithmetic
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   109dc:	b580      	push	{r7, lr}
   109de:	b084      	sub	sp, #16
   109e0:	af00      	add	r7, sp, #0
   109e2:	60f8      	str	r0, [r7, #12]
   109e4:	60b9      	str	r1, [r7, #8]
   109e6:	607a      	str	r2, [r7, #4]
    if (rhs_in == mp_const_false) {
   109e8:	687b      	ldr	r3, [r7, #4]
   109ea:	4a26      	ldr	r2, [pc, #152]	; (10a84 <mp_obj_int_binary_op_extra_cases+0xa8>)
   109ec:	4293      	cmp	r3, r2
   109ee:	d106      	bne.n	109fe <mp_obj_int_binary_op_extra_cases+0x22>
        // false acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
   109f0:	2201      	movs	r2, #1
   109f2:	68b9      	ldr	r1, [r7, #8]
   109f4:	68f8      	ldr	r0, [r7, #12]
   109f6:	f7fa ff75 	bl	b8e4 <mp_binary_op>
   109fa:	4603      	mov	r3, r0
   109fc:	e03d      	b.n	10a7a <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (rhs_in == mp_const_true) {
   109fe:	687b      	ldr	r3, [r7, #4]
   10a00:	4a21      	ldr	r2, [pc, #132]	; (10a88 <mp_obj_int_binary_op_extra_cases+0xac>)
   10a02:	4293      	cmp	r3, r2
   10a04:	d106      	bne.n	10a14 <mp_obj_int_binary_op_extra_cases+0x38>
        // true acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
   10a06:	2203      	movs	r2, #3
   10a08:	68b9      	ldr	r1, [r7, #8]
   10a0a:	68f8      	ldr	r0, [r7, #12]
   10a0c:	f7fa ff6a 	bl	b8e4 <mp_binary_op>
   10a10:	4603      	mov	r3, r0
   10a12:	e032      	b.n	10a7a <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
   10a14:	68fb      	ldr	r3, [r7, #12]
   10a16:	2b1c      	cmp	r3, #28
   10a18:	d12e      	bne.n	10a78 <mp_obj_int_binary_op_extra_cases+0x9c>
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
   10a1a:	6878      	ldr	r0, [r7, #4]
   10a1c:	f7ff fd52 	bl	104c4 <MP_OBJ_IS_QSTR>
   10a20:	4603      	mov	r3, r0
   10a22:	2b00      	cmp	r3, #0
   10a24:	d121      	bne.n	10a6a <mp_obj_int_binary_op_extra_cases+0x8e>
   10a26:	6878      	ldr	r0, [r7, #4]
   10a28:	f7ff fd5e 	bl	104e8 <MP_OBJ_IS_OBJ>
   10a2c:	4603      	mov	r3, r0
   10a2e:	2b00      	cmp	r3, #0
   10a30:	d005      	beq.n	10a3e <mp_obj_int_binary_op_extra_cases+0x62>
   10a32:	687b      	ldr	r3, [r7, #4]
   10a34:	681b      	ldr	r3, [r3, #0]
   10a36:	699b      	ldr	r3, [r3, #24]
   10a38:	4a14      	ldr	r2, [pc, #80]	; (10a8c <mp_obj_int_binary_op_extra_cases+0xb0>)
   10a3a:	4293      	cmp	r3, r2
   10a3c:	d015      	beq.n	10a6a <mp_obj_int_binary_op_extra_cases+0x8e>
   10a3e:	6878      	ldr	r0, [r7, #4]
   10a40:	f7ff fd52 	bl	104e8 <MP_OBJ_IS_OBJ>
   10a44:	4603      	mov	r3, r0
   10a46:	2b00      	cmp	r3, #0
   10a48:	d004      	beq.n	10a54 <mp_obj_int_binary_op_extra_cases+0x78>
   10a4a:	687b      	ldr	r3, [r7, #4]
   10a4c:	681b      	ldr	r3, [r3, #0]
   10a4e:	4a10      	ldr	r2, [pc, #64]	; (10a90 <mp_obj_int_binary_op_extra_cases+0xb4>)
   10a50:	4293      	cmp	r3, r2
   10a52:	d00a      	beq.n	10a6a <mp_obj_int_binary_op_extra_cases+0x8e>
   10a54:	6878      	ldr	r0, [r7, #4]
   10a56:	f7ff fd47 	bl	104e8 <MP_OBJ_IS_OBJ>
   10a5a:	4603      	mov	r3, r0
   10a5c:	2b00      	cmp	r3, #0
   10a5e:	d00b      	beq.n	10a78 <mp_obj_int_binary_op_extra_cases+0x9c>
   10a60:	687b      	ldr	r3, [r7, #4]
   10a62:	681b      	ldr	r3, [r3, #0]
   10a64:	4a0b      	ldr	r2, [pc, #44]	; (10a94 <mp_obj_int_binary_op_extra_cases+0xb8>)
   10a66:	4293      	cmp	r3, r2
   10a68:	d106      	bne.n	10a78 <mp_obj_int_binary_op_extra_cases+0x9c>
            // multiply is commutative for these types, so delegate to them
            return mp_binary_op(op, rhs_in, lhs_in);
   10a6a:	68ba      	ldr	r2, [r7, #8]
   10a6c:	6879      	ldr	r1, [r7, #4]
   10a6e:	68f8      	ldr	r0, [r7, #12]
   10a70:	f7fa ff38 	bl	b8e4 <mp_binary_op>
   10a74:	4603      	mov	r3, r0
   10a76:	e000      	b.n	10a7a <mp_obj_int_binary_op_extra_cases+0x9e>
        }
    }
    return MP_OBJ_NULL; // op not supported
   10a78:	2300      	movs	r3, #0
}
   10a7a:	4618      	mov	r0, r3
   10a7c:	3710      	adds	r7, #16
   10a7e:	46bd      	mov	sp, r7
   10a80:	bd80      	pop	{r7, pc}
   10a82:	bf00      	nop
   10a84:	0001fc34 	.word	0x0001fc34
   10a88:	0001fc3c 	.word	0x0001fc3c
   10a8c:	00012849 	.word	0x00012849
   10a90:	00021db4 	.word	0x00021db4
   10a94:	000211a8 	.word	0x000211a8

00010a98 <int_from_bytes>:

// this is a classmethod
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
   10a98:	b580      	push	{r7, lr}
   10a9a:	b08a      	sub	sp, #40	; 0x28
   10a9c:	af00      	add	r7, sp, #0
   10a9e:	6078      	str	r0, [r7, #4]
   10aa0:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False at the moment)
    (void)n_args;

    // get the buffer info
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   10aa2:	683b      	ldr	r3, [r7, #0]
   10aa4:	3304      	adds	r3, #4
   10aa6:	681b      	ldr	r3, [r3, #0]
   10aa8:	f107 010c 	add.w	r1, r7, #12
   10aac:	2201      	movs	r2, #1
   10aae:	4618      	mov	r0, r3
   10ab0:	f7fd fa9e 	bl	dff0 <mp_get_buffer_raise>

    const byte* buf = (const byte*)bufinfo.buf;
   10ab4:	68fb      	ldr	r3, [r7, #12]
   10ab6:	627b      	str	r3, [r7, #36]	; 0x24
    int delta = 1;
   10ab8:	2301      	movs	r3, #1
   10aba:	623b      	str	r3, [r7, #32]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
   10abc:	683b      	ldr	r3, [r7, #0]
   10abe:	3308      	adds	r3, #8
   10ac0:	681b      	ldr	r3, [r3, #0]
   10ac2:	f240 22aa 	movw	r2, #682	; 0x2aa
   10ac6:	4293      	cmp	r3, r2
   10ac8:	d107      	bne.n	10ada <int_from_bytes+0x42>
        buf += bufinfo.len - 1;
   10aca:	693b      	ldr	r3, [r7, #16]
   10acc:	3b01      	subs	r3, #1
   10ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10ad0:	4413      	add	r3, r2
   10ad2:	627b      	str	r3, [r7, #36]	; 0x24
        delta = -1;
   10ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ad8:	623b      	str	r3, [r7, #32]
    }

    mp_uint_t value = 0;
   10ada:	2300      	movs	r3, #0
   10adc:	61fb      	str	r3, [r7, #28]
    size_t len = bufinfo.len;
   10ade:	693b      	ldr	r3, [r7, #16]
   10ae0:	61bb      	str	r3, [r7, #24]
    for (; len--; buf += delta) {
   10ae2:	e009      	b.n	10af8 <int_from_bytes+0x60>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
            // Result will overflow a small-int so construct a big-int
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
        }
        #endif
        value = (value << 8) | *buf;
   10ae4:	69fb      	ldr	r3, [r7, #28]
   10ae6:	021b      	lsls	r3, r3, #8
   10ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10aea:	7812      	ldrb	r2, [r2, #0]
   10aec:	4313      	orrs	r3, r2
   10aee:	61fb      	str	r3, [r7, #28]
    for (; len--; buf += delta) {
   10af0:	6a3b      	ldr	r3, [r7, #32]
   10af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10af4:	4413      	add	r3, r2
   10af6:	627b      	str	r3, [r7, #36]	; 0x24
   10af8:	69bb      	ldr	r3, [r7, #24]
   10afa:	1e5a      	subs	r2, r3, #1
   10afc:	61ba      	str	r2, [r7, #24]
   10afe:	2b00      	cmp	r3, #0
   10b00:	d1f0      	bne.n	10ae4 <int_from_bytes+0x4c>
    }
    return mp_obj_new_int_from_uint(value);
   10b02:	69f8      	ldr	r0, [r7, #28]
   10b04:	f7ff ff1c 	bl	10940 <mp_obj_new_int_from_uint>
   10b08:	4603      	mov	r3, r0
}
   10b0a:	4618      	mov	r0, r3
   10b0c:	3728      	adds	r7, #40	; 0x28
   10b0e:	46bd      	mov	sp, r7
   10b10:	bd80      	pop	{r7, pc}
   10b12:	bf00      	nop

00010b14 <int_to_bytes>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
   10b14:	b580      	push	{r7, lr}
   10b16:	b08c      	sub	sp, #48	; 0x30
   10b18:	af00      	add	r7, sp, #0
   10b1a:	6078      	str	r0, [r7, #4]
   10b1c:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
   10b1e:	683b      	ldr	r3, [r7, #0]
   10b20:	3304      	adds	r3, #4
   10b22:	681b      	ldr	r3, [r3, #0]
   10b24:	4618      	mov	r0, r3
   10b26:	f7fd f82f 	bl	db88 <mp_obj_get_int>
   10b2a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len < 0) {
   10b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b2e:	2b00      	cmp	r3, #0
   10b30:	da02      	bge.n	10b38 <int_to_bytes+0x24>
        mp_raise_ValueError(NULL);
   10b32:	2000      	movs	r0, #0
   10b34:	f7fc fa26 	bl	cf84 <mp_raise_ValueError>
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
   10b38:	683b      	ldr	r3, [r7, #0]
   10b3a:	3308      	adds	r3, #8
   10b3c:	681b      	ldr	r3, [r3, #0]
   10b3e:	f240 22aa 	movw	r2, #682	; 0x2aa
   10b42:	4293      	cmp	r3, r2
   10b44:	bf14      	ite	ne
   10b46:	2301      	movne	r3, #1
   10b48:	2300      	moveq	r3, #0
   10b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    vstr_t vstr;
    vstr_init_len(&vstr, len);
   10b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10b50:	f107 030c 	add.w	r3, r7, #12
   10b54:	4611      	mov	r1, r2
   10b56:	4618      	mov	r0, r3
   10b58:	f7f0 fc02 	bl	1360 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   10b5c:	697b      	ldr	r3, [r7, #20]
   10b5e:	627b      	str	r3, [r7, #36]	; 0x24
    memset(data, 0, len);
   10b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b62:	461a      	mov	r2, r3
   10b64:	2100      	movs	r1, #0
   10b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
   10b68:	f00b f970 	bl	1be4c <memset>
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
   10b6c:	683b      	ldr	r3, [r7, #0]
   10b6e:	681b      	ldr	r3, [r3, #0]
   10b70:	105b      	asrs	r3, r3, #1
   10b72:	623b      	str	r3, [r7, #32]
        size_t l = MIN((size_t)len, sizeof(val));
   10b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b76:	2b04      	cmp	r3, #4
   10b78:	bf28      	it	cs
   10b7a:	2304      	movcs	r3, #4
   10b7c:	61fb      	str	r3, [r7, #28]
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
   10b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10b82:	2b00      	cmp	r3, #0
   10b84:	d003      	beq.n	10b8e <int_to_bytes+0x7a>
   10b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10b88:	69fb      	ldr	r3, [r7, #28]
   10b8a:	1ad3      	subs	r3, r2, r3
   10b8c:	e000      	b.n	10b90 <int_to_bytes+0x7c>
   10b8e:	2300      	movs	r3, #0
   10b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b92:	441a      	add	r2, r3
   10b94:	6a3b      	ldr	r3, [r7, #32]
   10b96:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
   10b9a:	69f8      	ldr	r0, [r7, #28]
   10b9c:	f007 fb68 	bl	18270 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   10ba0:	f107 030c 	add.w	r3, r7, #12
   10ba4:	4619      	mov	r1, r3
   10ba6:	4804      	ldr	r0, [pc, #16]	; (10bb8 <int_to_bytes+0xa4>)
   10ba8:	f004 fb94 	bl	152d4 <mp_obj_new_str_from_vstr>
   10bac:	4603      	mov	r3, r0
}
   10bae:	4618      	mov	r0, r3
   10bb0:	3730      	adds	r7, #48	; 0x30
   10bb2:	46bd      	mov	sp, r7
   10bb4:	bd80      	pop	{r7, pc}
   10bb6:	bf00      	nop
   10bb8:	00021b6c 	.word	0x00021b6c

00010bbc <MP_OBJ_IS_OBJ>:
   10bbc:	b480      	push	{r7}
   10bbe:	b083      	sub	sp, #12
   10bc0:	af00      	add	r7, sp, #0
   10bc2:	6078      	str	r0, [r7, #4]
   10bc4:	687b      	ldr	r3, [r7, #4]
   10bc6:	f003 0303 	and.w	r3, r3, #3
   10bca:	2b00      	cmp	r3, #0
   10bcc:	bf0c      	ite	eq
   10bce:	2301      	moveq	r3, #1
   10bd0:	2300      	movne	r3, #0
   10bd2:	b2db      	uxtb	r3, r3
   10bd4:	4618      	mov	r0, r3
   10bd6:	370c      	adds	r7, #12
   10bd8:	46bd      	mov	sp, r7
   10bda:	f85d 7b04 	ldr.w	r7, [sp], #4
   10bde:	4770      	bx	lr

00010be0 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10be0:	b480      	push	{r7}
   10be2:	b083      	sub	sp, #12
   10be4:	af00      	add	r7, sp, #0
   10be6:	6078      	str	r0, [r7, #4]
   10be8:	687b      	ldr	r3, [r7, #4]
   10bea:	2b00      	cmp	r3, #0
   10bec:	d001      	beq.n	10bf2 <mp_obj_new_bool+0x12>
   10bee:	4b04      	ldr	r3, [pc, #16]	; (10c00 <mp_obj_new_bool+0x20>)
   10bf0:	e000      	b.n	10bf4 <mp_obj_new_bool+0x14>
   10bf2:	4b04      	ldr	r3, [pc, #16]	; (10c04 <mp_obj_new_bool+0x24>)
   10bf4:	4618      	mov	r0, r3
   10bf6:	370c      	adds	r7, #12
   10bf8:	46bd      	mov	sp, r7
   10bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
   10bfe:	4770      	bx	lr
   10c00:	0001fc3c 	.word	0x0001fc3c
   10c04:	0001fc34 	.word	0x0001fc34

00010c08 <list_print>:
#define LIST_MIN_ALLOC 4

/******************************************************************************/
/* list                                                                       */

STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   10c08:	b580      	push	{r7, lr}
   10c0a:	b086      	sub	sp, #24
   10c0c:	af00      	add	r7, sp, #0
   10c0e:	60f8      	str	r0, [r7, #12]
   10c10:	60b9      	str	r1, [r7, #8]
   10c12:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(o_in);
   10c14:	68bb      	ldr	r3, [r7, #8]
   10c16:	613b      	str	r3, [r7, #16]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
   10c18:	2301      	movs	r3, #1
   10c1a:	607b      	str	r3, [r7, #4]
    }
    mp_print_str(print, "[");
   10c1c:	4914      	ldr	r1, [pc, #80]	; (10c70 <list_print+0x68>)
   10c1e:	68f8      	ldr	r0, [r7, #12]
   10c20:	f7f0 fe3a 	bl	1898 <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   10c24:	2300      	movs	r3, #0
   10c26:	617b      	str	r3, [r7, #20]
   10c28:	e014      	b.n	10c54 <list_print+0x4c>
        if (i > 0) {
   10c2a:	697b      	ldr	r3, [r7, #20]
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	d003      	beq.n	10c38 <list_print+0x30>
            mp_print_str(print, ", ");
   10c30:	4910      	ldr	r1, [pc, #64]	; (10c74 <list_print+0x6c>)
   10c32:	68f8      	ldr	r0, [r7, #12]
   10c34:	f7f0 fe30 	bl	1898 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   10c38:	693b      	ldr	r3, [r7, #16]
   10c3a:	68da      	ldr	r2, [r3, #12]
   10c3c:	697b      	ldr	r3, [r7, #20]
   10c3e:	009b      	lsls	r3, r3, #2
   10c40:	4413      	add	r3, r2
   10c42:	681b      	ldr	r3, [r3, #0]
   10c44:	687a      	ldr	r2, [r7, #4]
   10c46:	4619      	mov	r1, r3
   10c48:	68f8      	ldr	r0, [r7, #12]
   10c4a:	f7fc fdf1 	bl	d830 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   10c4e:	697b      	ldr	r3, [r7, #20]
   10c50:	3301      	adds	r3, #1
   10c52:	617b      	str	r3, [r7, #20]
   10c54:	693b      	ldr	r3, [r7, #16]
   10c56:	689a      	ldr	r2, [r3, #8]
   10c58:	697b      	ldr	r3, [r7, #20]
   10c5a:	429a      	cmp	r2, r3
   10c5c:	d8e5      	bhi.n	10c2a <list_print+0x22>
    }
    mp_print_str(print, "]");
   10c5e:	4906      	ldr	r1, [pc, #24]	; (10c78 <list_print+0x70>)
   10c60:	68f8      	ldr	r0, [r7, #12]
   10c62:	f7f0 fe19 	bl	1898 <mp_print_str>
}
   10c66:	bf00      	nop
   10c68:	3718      	adds	r7, #24
   10c6a:	46bd      	mov	sp, r7
   10c6c:	bd80      	pop	{r7, pc}
   10c6e:	bf00      	nop
   10c70:	00020f8c 	.word	0x00020f8c
   10c74:	00020f90 	.word	0x00020f90
   10c78:	00020f94 	.word	0x00020f94

00010c7c <list_extend_from_iter>:

STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
   10c7c:	b580      	push	{r7, lr}
   10c7e:	b084      	sub	sp, #16
   10c80:	af00      	add	r7, sp, #0
   10c82:	6078      	str	r0, [r7, #4]
   10c84:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(iterable, NULL);
   10c86:	2100      	movs	r1, #0
   10c88:	6838      	ldr	r0, [r7, #0]
   10c8a:	f7fb fe37 	bl	c8fc <mp_getiter>
   10c8e:	60f8      	str	r0, [r7, #12]
    mp_obj_t item;
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10c90:	e003      	b.n	10c9a <list_extend_from_iter+0x1e>
        mp_obj_list_append(list, item);
   10c92:	68b9      	ldr	r1, [r7, #8]
   10c94:	6878      	ldr	r0, [r7, #4]
   10c96:	f000 f985 	bl	10fa4 <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10c9a:	68f8      	ldr	r0, [r7, #12]
   10c9c:	f7fb feb0 	bl	ca00 <mp_iternext>
   10ca0:	60b8      	str	r0, [r7, #8]
   10ca2:	68bb      	ldr	r3, [r7, #8]
   10ca4:	2b04      	cmp	r3, #4
   10ca6:	d1f4      	bne.n	10c92 <list_extend_from_iter+0x16>
    }
    return list;
   10ca8:	687b      	ldr	r3, [r7, #4]
}
   10caa:	4618      	mov	r0, r3
   10cac:	3710      	adds	r7, #16
   10cae:	46bd      	mov	sp, r7
   10cb0:	bd80      	pop	{r7, pc}
   10cb2:	bf00      	nop

00010cb4 <list_make_new>:

STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10cb4:	b580      	push	{r7, lr}
   10cb6:	b088      	sub	sp, #32
   10cb8:	af02      	add	r7, sp, #8
   10cba:	60f8      	str	r0, [r7, #12]
   10cbc:	60b9      	str	r1, [r7, #8]
   10cbe:	607a      	str	r2, [r7, #4]
   10cc0:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   10cc2:	2300      	movs	r3, #0
   10cc4:	9300      	str	r3, [sp, #0]
   10cc6:	2301      	movs	r3, #1
   10cc8:	2200      	movs	r2, #0
   10cca:	6879      	ldr	r1, [r7, #4]
   10ccc:	68b8      	ldr	r0, [r7, #8]
   10cce:	f7fc f989 	bl	cfe4 <mp_arg_check_num>

    switch (n_args) {
   10cd2:	68bb      	ldr	r3, [r7, #8]
   10cd4:	2b00      	cmp	r3, #0
   10cd6:	d105      	bne.n	10ce4 <list_make_new+0x30>
        case 0:
            // return a new, empty list
            return mp_obj_new_list(0, NULL);
   10cd8:	2100      	movs	r1, #0
   10cda:	2000      	movs	r0, #0
   10cdc:	f000 fdf4 	bl	118c8 <mp_obj_new_list>
   10ce0:	4603      	mov	r3, r0
   10ce2:	e00b      	b.n	10cfc <list_make_new+0x48>

        case 1:
        default: {
            // make list from iterable
            // TODO: optimize list/tuple
            mp_obj_t list = mp_obj_new_list(0, NULL);
   10ce4:	2100      	movs	r1, #0
   10ce6:	2000      	movs	r0, #0
   10ce8:	f000 fdee 	bl	118c8 <mp_obj_new_list>
   10cec:	6178      	str	r0, [r7, #20]
            return list_extend_from_iter(list, args[0]);
   10cee:	683b      	ldr	r3, [r7, #0]
   10cf0:	681b      	ldr	r3, [r3, #0]
   10cf2:	4619      	mov	r1, r3
   10cf4:	6978      	ldr	r0, [r7, #20]
   10cf6:	f7ff ffc1 	bl	10c7c <list_extend_from_iter>
   10cfa:	4603      	mov	r3, r0
        }
    }
}
   10cfc:	4618      	mov	r0, r3
   10cfe:	3718      	adds	r7, #24
   10d00:	46bd      	mov	sp, r7
   10d02:	bd80      	pop	{r7, pc}

00010d04 <list_unary_op>:

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   10d04:	b580      	push	{r7, lr}
   10d06:	b084      	sub	sp, #16
   10d08:	af00      	add	r7, sp, #0
   10d0a:	6078      	str	r0, [r7, #4]
   10d0c:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10d0e:	683b      	ldr	r3, [r7, #0]
   10d10:	60fb      	str	r3, [r7, #12]
    switch (op) {
   10d12:	687b      	ldr	r3, [r7, #4]
   10d14:	2b04      	cmp	r3, #4
   10d16:	d002      	beq.n	10d1e <list_unary_op+0x1a>
   10d18:	2b05      	cmp	r3, #5
   10d1a:	d00c      	beq.n	10d36 <list_unary_op+0x32>
   10d1c:	e011      	b.n	10d42 <list_unary_op+0x3e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   10d1e:	68fb      	ldr	r3, [r7, #12]
   10d20:	689b      	ldr	r3, [r3, #8]
   10d22:	2b00      	cmp	r3, #0
   10d24:	bf14      	ite	ne
   10d26:	2301      	movne	r3, #1
   10d28:	2300      	moveq	r3, #0
   10d2a:	b2db      	uxtb	r3, r3
   10d2c:	4618      	mov	r0, r3
   10d2e:	f7ff ff57 	bl	10be0 <mp_obj_new_bool>
   10d32:	4603      	mov	r3, r0
   10d34:	e006      	b.n	10d44 <list_unary_op+0x40>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   10d36:	68fb      	ldr	r3, [r7, #12]
   10d38:	689b      	ldr	r3, [r3, #8]
   10d3a:	005b      	lsls	r3, r3, #1
   10d3c:	f043 0301 	orr.w	r3, r3, #1
   10d40:	e000      	b.n	10d44 <list_unary_op+0x40>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
   10d42:	2300      	movs	r3, #0
    }
}
   10d44:	4618      	mov	r0, r3
   10d46:	3710      	adds	r7, #16
   10d48:	46bd      	mov	sp, r7
   10d4a:	bd80      	pop	{r7, pc}

00010d4c <list_binary_op>:

STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   10d4c:	b580      	push	{r7, lr}
   10d4e:	b08e      	sub	sp, #56	; 0x38
   10d50:	af02      	add	r7, sp, #8
   10d52:	60f8      	str	r0, [r7, #12]
   10d54:	60b9      	str	r1, [r7, #8]
   10d56:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(lhs);
   10d58:	68bb      	ldr	r3, [r7, #8]
   10d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (op) {
   10d5c:	68fb      	ldr	r3, [r7, #12]
   10d5e:	2b1c      	cmp	r3, #28
   10d60:	f200 80d0 	bhi.w	10f04 <list_binary_op+0x1b8>
   10d64:	a201      	add	r2, pc, #4	; (adr r2, 10d6c <list_binary_op+0x20>)
   10d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10d6a:	bf00      	nop
   10d6c:	00010ead 	.word	0x00010ead
   10d70:	00010ead 	.word	0x00010ead
   10d74:	00010ead 	.word	0x00010ead
   10d78:	00010ead 	.word	0x00010ead
   10d7c:	00010ead 	.word	0x00010ead
   10d80:	00010f05 	.word	0x00010f05
   10d84:	00010f05 	.word	0x00010f05
   10d88:	00010f05 	.word	0x00010f05
   10d8c:	00010f05 	.word	0x00010f05
   10d90:	00010f05 	.word	0x00010f05
   10d94:	00010f05 	.word	0x00010f05
   10d98:	00010f05 	.word	0x00010f05
   10d9c:	00010f05 	.word	0x00010f05
   10da0:	00010f05 	.word	0x00010f05
   10da4:	00010e4b 	.word	0x00010e4b
   10da8:	00010f05 	.word	0x00010f05
   10dac:	00010f05 	.word	0x00010f05
   10db0:	00010f05 	.word	0x00010f05
   10db4:	00010f05 	.word	0x00010f05
   10db8:	00010f05 	.word	0x00010f05
   10dbc:	00010f05 	.word	0x00010f05
   10dc0:	00010f05 	.word	0x00010f05
   10dc4:	00010f05 	.word	0x00010f05
   10dc8:	00010f05 	.word	0x00010f05
   10dcc:	00010f05 	.word	0x00010f05
   10dd0:	00010f05 	.word	0x00010f05
   10dd4:	00010de1 	.word	0x00010de1
   10dd8:	00010f05 	.word	0x00010f05
   10ddc:	00010e57 	.word	0x00010e57
        case MP_BINARY_OP_ADD: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10de0:	6878      	ldr	r0, [r7, #4]
   10de2:	f7ff feeb 	bl	10bbc <MP_OBJ_IS_OBJ>
   10de6:	4603      	mov	r3, r0
   10de8:	f083 0301 	eor.w	r3, r3, #1
   10dec:	b2db      	uxtb	r3, r3
   10dee:	2b00      	cmp	r3, #0
   10df0:	d104      	bne.n	10dfc <list_binary_op+0xb0>
   10df2:	687b      	ldr	r3, [r7, #4]
   10df4:	681b      	ldr	r3, [r3, #0]
   10df6:	4a46      	ldr	r2, [pc, #280]	; (10f10 <list_binary_op+0x1c4>)
   10df8:	4293      	cmp	r3, r2
   10dfa:	d001      	beq.n	10e00 <list_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   10dfc:	2300      	movs	r3, #0
   10dfe:	e082      	b.n	10f06 <list_binary_op+0x1ba>
            }
            mp_obj_list_t *p = MP_OBJ_TO_PTR(rhs);
   10e00:	687b      	ldr	r3, [r7, #4]
   10e02:	62bb      	str	r3, [r7, #40]	; 0x28
            mp_obj_list_t *s = list_new(o->len + p->len);
   10e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e06:	689a      	ldr	r2, [r3, #8]
   10e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e0a:	689b      	ldr	r3, [r3, #8]
   10e0c:	4413      	add	r3, r2
   10e0e:	4618      	mov	r0, r3
   10e10:	f000 fd48 	bl	118a4 <list_new>
   10e14:	6278      	str	r0, [r7, #36]	; 0x24
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   10e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e18:	68d8      	ldr	r0, [r3, #12]
   10e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e1c:	68d9      	ldr	r1, [r3, #12]
   10e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e20:	689b      	ldr	r3, [r3, #8]
   10e22:	009b      	lsls	r3, r3, #2
   10e24:	461a      	mov	r2, r3
   10e26:	f00a ff75 	bl	1bd14 <memcpy>
   10e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e2c:	68da      	ldr	r2, [r3, #12]
   10e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e30:	689b      	ldr	r3, [r3, #8]
   10e32:	009b      	lsls	r3, r3, #2
   10e34:	18d0      	adds	r0, r2, r3
   10e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e38:	68d9      	ldr	r1, [r3, #12]
   10e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e3c:	689b      	ldr	r3, [r3, #8]
   10e3e:	009b      	lsls	r3, r3, #2
   10e40:	461a      	mov	r2, r3
   10e42:	f00a ff67 	bl	1bd14 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   10e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e48:	e05d      	b.n	10f06 <list_binary_op+0x1ba>
        }
        case MP_BINARY_OP_INPLACE_ADD: {
            list_extend(lhs, rhs);
   10e4a:	6879      	ldr	r1, [r7, #4]
   10e4c:	68b8      	ldr	r0, [r7, #8]
   10e4e:	f000 f909 	bl	11064 <list_extend>
            return lhs;
   10e52:	68bb      	ldr	r3, [r7, #8]
   10e54:	e057      	b.n	10f06 <list_binary_op+0x1ba>
        }
        case MP_BINARY_OP_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   10e56:	f107 0314 	add.w	r3, r7, #20
   10e5a:	4619      	mov	r1, r3
   10e5c:	6878      	ldr	r0, [r7, #4]
   10e5e:	f7fc feef 	bl	dc40 <mp_obj_get_int_maybe>
   10e62:	4603      	mov	r3, r0
   10e64:	f083 0301 	eor.w	r3, r3, #1
   10e68:	b2db      	uxtb	r3, r3
   10e6a:	2b00      	cmp	r3, #0
   10e6c:	d001      	beq.n	10e72 <list_binary_op+0x126>
                return MP_OBJ_NULL; // op not supported
   10e6e:	2300      	movs	r3, #0
   10e70:	e049      	b.n	10f06 <list_binary_op+0x1ba>
            }
            if (n < 0) {
   10e72:	697b      	ldr	r3, [r7, #20]
   10e74:	2b00      	cmp	r3, #0
   10e76:	da01      	bge.n	10e7c <list_binary_op+0x130>
                n = 0;
   10e78:	2300      	movs	r3, #0
   10e7a:	617b      	str	r3, [r7, #20]
            }
            mp_obj_list_t *s = list_new(o->len * n);
   10e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e7e:	689b      	ldr	r3, [r3, #8]
   10e80:	697a      	ldr	r2, [r7, #20]
   10e82:	fb02 f303 	mul.w	r3, r2, r3
   10e86:	4618      	mov	r0, r3
   10e88:	f000 fd0c 	bl	118a4 <list_new>
   10e8c:	6238      	str	r0, [r7, #32]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   10e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e90:	68d8      	ldr	r0, [r3, #12]
   10e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e94:	689a      	ldr	r2, [r3, #8]
   10e96:	697b      	ldr	r3, [r7, #20]
   10e98:	4619      	mov	r1, r3
   10e9a:	6a3b      	ldr	r3, [r7, #32]
   10e9c:	68db      	ldr	r3, [r3, #12]
   10e9e:	9300      	str	r3, [sp, #0]
   10ea0:	460b      	mov	r3, r1
   10ea2:	2104      	movs	r1, #4
   10ea4:	f006 fc48 	bl	17738 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   10ea8:	6a3b      	ldr	r3, [r7, #32]
   10eaa:	e02c      	b.n	10f06 <list_binary_op+0x1ba>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10eac:	6878      	ldr	r0, [r7, #4]
   10eae:	f7ff fe85 	bl	10bbc <MP_OBJ_IS_OBJ>
   10eb2:	4603      	mov	r3, r0
   10eb4:	f083 0301 	eor.w	r3, r3, #1
   10eb8:	b2db      	uxtb	r3, r3
   10eba:	2b00      	cmp	r3, #0
   10ebc:	d104      	bne.n	10ec8 <list_binary_op+0x17c>
   10ebe:	687b      	ldr	r3, [r7, #4]
   10ec0:	681b      	ldr	r3, [r3, #0]
   10ec2:	4a13      	ldr	r2, [pc, #76]	; (10f10 <list_binary_op+0x1c4>)
   10ec4:	4293      	cmp	r3, r2
   10ec6:	d006      	beq.n	10ed6 <list_binary_op+0x18a>
                if (op == MP_BINARY_OP_EQUAL) {
   10ec8:	68fb      	ldr	r3, [r7, #12]
   10eca:	2b02      	cmp	r3, #2
   10ecc:	d101      	bne.n	10ed2 <list_binary_op+0x186>
                    return mp_const_false;
   10ece:	4b11      	ldr	r3, [pc, #68]	; (10f14 <list_binary_op+0x1c8>)
   10ed0:	e019      	b.n	10f06 <list_binary_op+0x1ba>
                }
                return MP_OBJ_NULL; // op not supported
   10ed2:	2300      	movs	r3, #0
   10ed4:	e017      	b.n	10f06 <list_binary_op+0x1ba>
            }

            mp_obj_list_t *another = MP_OBJ_TO_PTR(rhs);
   10ed6:	687b      	ldr	r3, [r7, #4]
   10ed8:	61fb      	str	r3, [r7, #28]
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
   10eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10edc:	68d9      	ldr	r1, [r3, #12]
   10ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ee0:	689a      	ldr	r2, [r3, #8]
   10ee2:	69fb      	ldr	r3, [r7, #28]
   10ee4:	68d8      	ldr	r0, [r3, #12]
   10ee6:	69fb      	ldr	r3, [r7, #28]
   10ee8:	689b      	ldr	r3, [r3, #8]
   10eea:	9300      	str	r3, [sp, #0]
   10eec:	4603      	mov	r3, r0
   10eee:	68f8      	ldr	r0, [r7, #12]
   10ef0:	f006 fce4 	bl	178bc <mp_seq_cmp_objs>
   10ef4:	4603      	mov	r3, r0
   10ef6:	76fb      	strb	r3, [r7, #27]
            return mp_obj_new_bool(res);
   10ef8:	7efb      	ldrb	r3, [r7, #27]
   10efa:	4618      	mov	r0, r3
   10efc:	f7ff fe70 	bl	10be0 <mp_obj_new_bool>
   10f00:	4603      	mov	r3, r0
   10f02:	e000      	b.n	10f06 <list_binary_op+0x1ba>
        }

        default:
            return MP_OBJ_NULL; // op not supported
   10f04:	2300      	movs	r3, #0
    }
}
   10f06:	4618      	mov	r0, r3
   10f08:	3730      	adds	r7, #48	; 0x30
   10f0a:	46bd      	mov	sp, r7
   10f0c:	bd80      	pop	{r7, pc}
   10f0e:	bf00      	nop
   10f10:	000211a8 	.word	0x000211a8
   10f14:	0001fc34 	.word	0x0001fc34

00010f18 <list_subscr>:

STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   10f18:	b580      	push	{r7, lr}
   10f1a:	b088      	sub	sp, #32
   10f1c:	af00      	add	r7, sp, #0
   10f1e:	60f8      	str	r0, [r7, #12]
   10f20:	60b9      	str	r1, [r7, #8]
   10f22:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
   10f24:	687b      	ldr	r3, [r7, #4]
   10f26:	2b00      	cmp	r3, #0
   10f28:	d10b      	bne.n	10f42 <list_subscr+0x2a>
            mp_seq_clear(self->items, self->len + len_adj, self->len, sizeof(*self->items));
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_t args[2] = {self_in, index};
   10f2a:	68fb      	ldr	r3, [r7, #12]
   10f2c:	613b      	str	r3, [r7, #16]
   10f2e:	68bb      	ldr	r3, [r7, #8]
   10f30:	617b      	str	r3, [r7, #20]
        list_pop(2, args);
   10f32:	f107 0310 	add.w	r3, r7, #16
   10f36:	4619      	mov	r1, r3
   10f38:	2002      	movs	r0, #2
   10f3a:	f000 f91b 	bl	11174 <list_pop>
        return mp_const_none;
   10f3e:	4b10      	ldr	r3, [pc, #64]	; (10f80 <list_subscr+0x68>)
   10f40:	e01a      	b.n	10f78 <list_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
   10f42:	687b      	ldr	r3, [r7, #4]
   10f44:	2b08      	cmp	r3, #8
   10f46:	d111      	bne.n	10f6c <list_subscr+0x54>
        // load
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10f48:	68fb      	ldr	r3, [r7, #12]
   10f4a:	61fb      	str	r3, [r7, #28]
            mp_obj_list_t *res = list_new(slice.stop - slice.start);
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
   10f4c:	69fb      	ldr	r3, [r7, #28]
   10f4e:	6818      	ldr	r0, [r3, #0]
   10f50:	69fb      	ldr	r3, [r7, #28]
   10f52:	6899      	ldr	r1, [r3, #8]
   10f54:	2300      	movs	r3, #0
   10f56:	68ba      	ldr	r2, [r7, #8]
   10f58:	f7fc ff02 	bl	dd60 <mp_get_index>
   10f5c:	61b8      	str	r0, [r7, #24]
        return self->items[index_val];
   10f5e:	69fb      	ldr	r3, [r7, #28]
   10f60:	68da      	ldr	r2, [r3, #12]
   10f62:	69bb      	ldr	r3, [r7, #24]
   10f64:	009b      	lsls	r3, r3, #2
   10f66:	4413      	add	r3, r2
   10f68:	681b      	ldr	r3, [r3, #0]
   10f6a:	e005      	b.n	10f78 <list_subscr+0x60>
            }
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_list_store(self_in, index, value);
   10f6c:	687a      	ldr	r2, [r7, #4]
   10f6e:	68b9      	ldr	r1, [r7, #8]
   10f70:	68f8      	ldr	r0, [r7, #12]
   10f72:	f000 fcf5 	bl	11960 <mp_obj_list_store>
        return mp_const_none;
   10f76:	4b02      	ldr	r3, [pc, #8]	; (10f80 <list_subscr+0x68>)
    }
}
   10f78:	4618      	mov	r0, r3
   10f7a:	3720      	adds	r7, #32
   10f7c:	46bd      	mov	sp, r7
   10f7e:	bd80      	pop	{r7, pc}
   10f80:	00021480 	.word	0x00021480

00010f84 <list_getiter>:

STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   10f84:	b580      	push	{r7, lr}
   10f86:	b082      	sub	sp, #8
   10f88:	af00      	add	r7, sp, #0
   10f8a:	6078      	str	r0, [r7, #4]
   10f8c:	6039      	str	r1, [r7, #0]
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
   10f8e:	683a      	ldr	r2, [r7, #0]
   10f90:	2100      	movs	r1, #0
   10f92:	6878      	ldr	r0, [r7, #4]
   10f94:	f000 fd26 	bl	119e4 <mp_obj_new_list_iterator>
   10f98:	4603      	mov	r3, r0
}
   10f9a:	4618      	mov	r0, r3
   10f9c:	3708      	adds	r7, #8
   10f9e:	46bd      	mov	sp, r7
   10fa0:	bd80      	pop	{r7, pc}
   10fa2:	bf00      	nop

00010fa4 <mp_obj_list_append>:

mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
   10fa4:	b580      	push	{r7, lr}
   10fa6:	b084      	sub	sp, #16
   10fa8:	af00      	add	r7, sp, #0
   10faa:	6078      	str	r0, [r7, #4]
   10fac:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   10fae:	6878      	ldr	r0, [r7, #4]
   10fb0:	f7ff fe04 	bl	10bbc <MP_OBJ_IS_OBJ>
   10fb4:	4603      	mov	r3, r0
   10fb6:	f083 0301 	eor.w	r3, r3, #1
   10fba:	b2db      	uxtb	r3, r3
   10fbc:	2b00      	cmp	r3, #0
   10fbe:	d104      	bne.n	10fca <mp_obj_list_append+0x26>
   10fc0:	687b      	ldr	r3, [r7, #4]
   10fc2:	681b      	ldr	r3, [r3, #0]
   10fc4:	4a22      	ldr	r2, [pc, #136]	; (11050 <mp_obj_list_append+0xac>)
   10fc6:	4293      	cmp	r3, r2
   10fc8:	d005      	beq.n	10fd6 <mp_obj_list_append+0x32>
   10fca:	4b22      	ldr	r3, [pc, #136]	; (11054 <mp_obj_list_append+0xb0>)
   10fcc:	4a22      	ldr	r2, [pc, #136]	; (11058 <mp_obj_list_append+0xb4>)
   10fce:	21eb      	movs	r1, #235	; 0xeb
   10fd0:	4822      	ldr	r0, [pc, #136]	; (1105c <mp_obj_list_append+0xb8>)
   10fd2:	f00a f9e3 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10fd6:	687b      	ldr	r3, [r7, #4]
   10fd8:	60fb      	str	r3, [r7, #12]
    if (self->len >= self->alloc) {
   10fda:	68fb      	ldr	r3, [r7, #12]
   10fdc:	689a      	ldr	r2, [r3, #8]
   10fde:	68fb      	ldr	r3, [r7, #12]
   10fe0:	685b      	ldr	r3, [r3, #4]
   10fe2:	429a      	cmp	r2, r3
   10fe4:	d324      	bcc.n	11030 <mp_obj_list_append+0x8c>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
   10fe6:	68fb      	ldr	r3, [r7, #12]
   10fe8:	68da      	ldr	r2, [r3, #12]
   10fea:	68fb      	ldr	r3, [r7, #12]
   10fec:	685b      	ldr	r3, [r3, #4]
   10fee:	00db      	lsls	r3, r3, #3
   10ff0:	4619      	mov	r1, r3
   10ff2:	4610      	mov	r0, r2
   10ff4:	f7ef f9c6 	bl	384 <m_realloc>
   10ff8:	4602      	mov	r2, r0
   10ffa:	68fb      	ldr	r3, [r7, #12]
   10ffc:	60da      	str	r2, [r3, #12]
        self->alloc *= 2;
   10ffe:	68fb      	ldr	r3, [r7, #12]
   11000:	685b      	ldr	r3, [r3, #4]
   11002:	005a      	lsls	r2, r3, #1
   11004:	68fb      	ldr	r3, [r7, #12]
   11006:	605a      	str	r2, [r3, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
   11008:	68fb      	ldr	r3, [r7, #12]
   1100a:	68da      	ldr	r2, [r3, #12]
   1100c:	68fb      	ldr	r3, [r7, #12]
   1100e:	689b      	ldr	r3, [r3, #8]
   11010:	3301      	adds	r3, #1
   11012:	009b      	lsls	r3, r3, #2
   11014:	18d0      	adds	r0, r2, r3
   11016:	68fb      	ldr	r3, [r7, #12]
   11018:	685a      	ldr	r2, [r3, #4]
   1101a:	68fb      	ldr	r3, [r7, #12]
   1101c:	689b      	ldr	r3, [r3, #8]
   1101e:	1ad3      	subs	r3, r2, r3
   11020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11024:	3b01      	subs	r3, #1
   11026:	009b      	lsls	r3, r3, #2
   11028:	461a      	mov	r2, r3
   1102a:	2100      	movs	r1, #0
   1102c:	f00a ff0e 	bl	1be4c <memset>
    }
    self->items[self->len++] = arg;
   11030:	68fb      	ldr	r3, [r7, #12]
   11032:	68da      	ldr	r2, [r3, #12]
   11034:	68fb      	ldr	r3, [r7, #12]
   11036:	689b      	ldr	r3, [r3, #8]
   11038:	1c58      	adds	r0, r3, #1
   1103a:	68f9      	ldr	r1, [r7, #12]
   1103c:	6088      	str	r0, [r1, #8]
   1103e:	009b      	lsls	r3, r3, #2
   11040:	4413      	add	r3, r2
   11042:	683a      	ldr	r2, [r7, #0]
   11044:	601a      	str	r2, [r3, #0]
    return mp_const_none; // return None, as per CPython
   11046:	4b06      	ldr	r3, [pc, #24]	; (11060 <mp_obj_list_append+0xbc>)
}
   11048:	4618      	mov	r0, r3
   1104a:	3710      	adds	r7, #16
   1104c:	46bd      	mov	sp, r7
   1104e:	bd80      	pop	{r7, pc}
   11050:	000211a8 	.word	0x000211a8
   11054:	00020f98 	.word	0x00020f98
   11058:	000211e4 	.word	0x000211e4
   1105c:	00020ff4 	.word	0x00020ff4
   11060:	00021480 	.word	0x00021480

00011064 <list_extend>:

STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
   11064:	b580      	push	{r7, lr}
   11066:	b084      	sub	sp, #16
   11068:	af00      	add	r7, sp, #0
   1106a:	6078      	str	r0, [r7, #4]
   1106c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1106e:	6878      	ldr	r0, [r7, #4]
   11070:	f7ff fda4 	bl	10bbc <MP_OBJ_IS_OBJ>
   11074:	4603      	mov	r3, r0
   11076:	f083 0301 	eor.w	r3, r3, #1
   1107a:	b2db      	uxtb	r3, r3
   1107c:	2b00      	cmp	r3, #0
   1107e:	d104      	bne.n	1108a <list_extend+0x26>
   11080:	687b      	ldr	r3, [r7, #4]
   11082:	681b      	ldr	r3, [r3, #0]
   11084:	4a36      	ldr	r2, [pc, #216]	; (11160 <list_extend+0xfc>)
   11086:	4293      	cmp	r3, r2
   11088:	d005      	beq.n	11096 <list_extend+0x32>
   1108a:	4b36      	ldr	r3, [pc, #216]	; (11164 <list_extend+0x100>)
   1108c:	4a36      	ldr	r2, [pc, #216]	; (11168 <list_extend+0x104>)
   1108e:	21f7      	movs	r1, #247	; 0xf7
   11090:	4836      	ldr	r0, [pc, #216]	; (1116c <list_extend+0x108>)
   11092:	f00a f983 	bl	1b39c <__assert_func>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   11096:	6838      	ldr	r0, [r7, #0]
   11098:	f7ff fd90 	bl	10bbc <MP_OBJ_IS_OBJ>
   1109c:	4603      	mov	r3, r0
   1109e:	2b00      	cmp	r3, #0
   110a0:	d054      	beq.n	1114c <list_extend+0xe8>
   110a2:	683b      	ldr	r3, [r7, #0]
   110a4:	681b      	ldr	r3, [r3, #0]
   110a6:	4a2e      	ldr	r2, [pc, #184]	; (11160 <list_extend+0xfc>)
   110a8:	4293      	cmp	r3, r2
   110aa:	d14f      	bne.n	1114c <list_extend+0xe8>
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   110ac:	687b      	ldr	r3, [r7, #4]
   110ae:	60fb      	str	r3, [r7, #12]
        mp_obj_list_t *arg = MP_OBJ_TO_PTR(arg_in);
   110b0:	683b      	ldr	r3, [r7, #0]
   110b2:	60bb      	str	r3, [r7, #8]

        if (self->len + arg->len > self->alloc) {
   110b4:	68fb      	ldr	r3, [r7, #12]
   110b6:	689a      	ldr	r2, [r3, #8]
   110b8:	68bb      	ldr	r3, [r7, #8]
   110ba:	689b      	ldr	r3, [r3, #8]
   110bc:	441a      	add	r2, r3
   110be:	68fb      	ldr	r3, [r7, #12]
   110c0:	685b      	ldr	r3, [r3, #4]
   110c2:	429a      	cmp	r2, r3
   110c4:	d92c      	bls.n	11120 <list_extend+0xbc>
            // TODO: use alloc policy for "4"
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
   110c6:	68fb      	ldr	r3, [r7, #12]
   110c8:	68d8      	ldr	r0, [r3, #12]
   110ca:	68fb      	ldr	r3, [r7, #12]
   110cc:	689a      	ldr	r2, [r3, #8]
   110ce:	68bb      	ldr	r3, [r7, #8]
   110d0:	689b      	ldr	r3, [r3, #8]
   110d2:	4413      	add	r3, r2
   110d4:	3304      	adds	r3, #4
   110d6:	009b      	lsls	r3, r3, #2
   110d8:	4619      	mov	r1, r3
   110da:	f7ef f953 	bl	384 <m_realloc>
   110de:	4602      	mov	r2, r0
   110e0:	68fb      	ldr	r3, [r7, #12]
   110e2:	60da      	str	r2, [r3, #12]
            self->alloc = self->len + arg->len + 4;
   110e4:	68fb      	ldr	r3, [r7, #12]
   110e6:	689a      	ldr	r2, [r3, #8]
   110e8:	68bb      	ldr	r3, [r7, #8]
   110ea:	689b      	ldr	r3, [r3, #8]
   110ec:	4413      	add	r3, r2
   110ee:	1d1a      	adds	r2, r3, #4
   110f0:	68fb      	ldr	r3, [r7, #12]
   110f2:	605a      	str	r2, [r3, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
   110f4:	68fb      	ldr	r3, [r7, #12]
   110f6:	68da      	ldr	r2, [r3, #12]
   110f8:	68fb      	ldr	r3, [r7, #12]
   110fa:	6899      	ldr	r1, [r3, #8]
   110fc:	68bb      	ldr	r3, [r7, #8]
   110fe:	689b      	ldr	r3, [r3, #8]
   11100:	440b      	add	r3, r1
   11102:	009b      	lsls	r3, r3, #2
   11104:	18d0      	adds	r0, r2, r3
   11106:	68fb      	ldr	r3, [r7, #12]
   11108:	685a      	ldr	r2, [r3, #4]
   1110a:	68fb      	ldr	r3, [r7, #12]
   1110c:	6899      	ldr	r1, [r3, #8]
   1110e:	68bb      	ldr	r3, [r7, #8]
   11110:	689b      	ldr	r3, [r3, #8]
   11112:	440b      	add	r3, r1
   11114:	1ad3      	subs	r3, r2, r3
   11116:	009b      	lsls	r3, r3, #2
   11118:	461a      	mov	r2, r3
   1111a:	2100      	movs	r1, #0
   1111c:	f00a fe96 	bl	1be4c <memset>
        }

        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
   11120:	68fb      	ldr	r3, [r7, #12]
   11122:	68da      	ldr	r2, [r3, #12]
   11124:	68fb      	ldr	r3, [r7, #12]
   11126:	689b      	ldr	r3, [r3, #8]
   11128:	009b      	lsls	r3, r3, #2
   1112a:	18d0      	adds	r0, r2, r3
   1112c:	68bb      	ldr	r3, [r7, #8]
   1112e:	68d9      	ldr	r1, [r3, #12]
   11130:	68bb      	ldr	r3, [r7, #8]
   11132:	689b      	ldr	r3, [r3, #8]
   11134:	009b      	lsls	r3, r3, #2
   11136:	461a      	mov	r2, r3
   11138:	f00a fdec 	bl	1bd14 <memcpy>
        self->len += arg->len;
   1113c:	68fb      	ldr	r3, [r7, #12]
   1113e:	689a      	ldr	r2, [r3, #8]
   11140:	68bb      	ldr	r3, [r7, #8]
   11142:	689b      	ldr	r3, [r3, #8]
   11144:	441a      	add	r2, r3
   11146:	68fb      	ldr	r3, [r7, #12]
   11148:	609a      	str	r2, [r3, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   1114a:	e003      	b.n	11154 <list_extend+0xf0>
    } else {
        list_extend_from_iter(self_in, arg_in);
   1114c:	6839      	ldr	r1, [r7, #0]
   1114e:	6878      	ldr	r0, [r7, #4]
   11150:	f7ff fd94 	bl	10c7c <list_extend_from_iter>
    }
    return mp_const_none; // return None, as per CPython
   11154:	4b06      	ldr	r3, [pc, #24]	; (11170 <list_extend+0x10c>)
}
   11156:	4618      	mov	r0, r3
   11158:	3710      	adds	r7, #16
   1115a:	46bd      	mov	sp, r7
   1115c:	bd80      	pop	{r7, pc}
   1115e:	bf00      	nop
   11160:	000211a8 	.word	0x000211a8
   11164:	00020f98 	.word	0x00020f98
   11168:	000211f8 	.word	0x000211f8
   1116c:	00020ff4 	.word	0x00020ff4
   11170:	00021480 	.word	0x00021480

00011174 <list_pop>:

STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
   11174:	b580      	push	{r7, lr}
   11176:	b086      	sub	sp, #24
   11178:	af00      	add	r7, sp, #0
   1117a:	6078      	str	r0, [r7, #4]
   1117c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   1117e:	683b      	ldr	r3, [r7, #0]
   11180:	681b      	ldr	r3, [r3, #0]
   11182:	4618      	mov	r0, r3
   11184:	f7ff fd1a 	bl	10bbc <MP_OBJ_IS_OBJ>
   11188:	4603      	mov	r3, r0
   1118a:	f083 0301 	eor.w	r3, r3, #1
   1118e:	b2db      	uxtb	r3, r3
   11190:	2b00      	cmp	r3, #0
   11192:	d105      	bne.n	111a0 <list_pop+0x2c>
   11194:	683b      	ldr	r3, [r7, #0]
   11196:	681b      	ldr	r3, [r3, #0]
   11198:	681b      	ldr	r3, [r3, #0]
   1119a:	4a37      	ldr	r2, [pc, #220]	; (11278 <list_pop+0x104>)
   1119c:	4293      	cmp	r3, r2
   1119e:	d006      	beq.n	111ae <list_pop+0x3a>
   111a0:	4b36      	ldr	r3, [pc, #216]	; (1127c <list_pop+0x108>)
   111a2:	4a37      	ldr	r2, [pc, #220]	; (11280 <list_pop+0x10c>)
   111a4:	f44f 7186 	mov.w	r1, #268	; 0x10c
   111a8:	4836      	ldr	r0, [pc, #216]	; (11284 <list_pop+0x110>)
   111aa:	f00a f8f7 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   111ae:	683b      	ldr	r3, [r7, #0]
   111b0:	681b      	ldr	r3, [r3, #0]
   111b2:	617b      	str	r3, [r7, #20]
    if (self->len == 0) {
   111b4:	697b      	ldr	r3, [r7, #20]
   111b6:	689b      	ldr	r3, [r3, #8]
   111b8:	2b00      	cmp	r3, #0
   111ba:	d103      	bne.n	111c4 <list_pop+0x50>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
   111bc:	4932      	ldr	r1, [pc, #200]	; (11288 <list_pop+0x114>)
   111be:	4833      	ldr	r0, [pc, #204]	; (1128c <list_pop+0x118>)
   111c0:	f7fb fec8 	bl	cf54 <mp_raise_msg>
    }
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
   111c4:	697b      	ldr	r3, [r7, #20]
   111c6:	6818      	ldr	r0, [r3, #0]
   111c8:	697b      	ldr	r3, [r7, #20]
   111ca:	6899      	ldr	r1, [r3, #8]
   111cc:	687b      	ldr	r3, [r7, #4]
   111ce:	2b01      	cmp	r3, #1
   111d0:	d002      	beq.n	111d8 <list_pop+0x64>
   111d2:	683b      	ldr	r3, [r7, #0]
   111d4:	685a      	ldr	r2, [r3, #4]
   111d6:	e001      	b.n	111dc <list_pop+0x68>
   111d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   111dc:	2300      	movs	r3, #0
   111de:	f7fc fdbf 	bl	dd60 <mp_get_index>
   111e2:	6138      	str	r0, [r7, #16]
    mp_obj_t ret = self->items[index];
   111e4:	697b      	ldr	r3, [r7, #20]
   111e6:	68da      	ldr	r2, [r3, #12]
   111e8:	693b      	ldr	r3, [r7, #16]
   111ea:	009b      	lsls	r3, r3, #2
   111ec:	4413      	add	r3, r2
   111ee:	681b      	ldr	r3, [r3, #0]
   111f0:	60fb      	str	r3, [r7, #12]
    self->len -= 1;
   111f2:	697b      	ldr	r3, [r7, #20]
   111f4:	689b      	ldr	r3, [r3, #8]
   111f6:	1e5a      	subs	r2, r3, #1
   111f8:	697b      	ldr	r3, [r7, #20]
   111fa:	609a      	str	r2, [r3, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
   111fc:	697b      	ldr	r3, [r7, #20]
   111fe:	68da      	ldr	r2, [r3, #12]
   11200:	693b      	ldr	r3, [r7, #16]
   11202:	009b      	lsls	r3, r3, #2
   11204:	18d0      	adds	r0, r2, r3
   11206:	697b      	ldr	r3, [r7, #20]
   11208:	68da      	ldr	r2, [r3, #12]
   1120a:	693b      	ldr	r3, [r7, #16]
   1120c:	3301      	adds	r3, #1
   1120e:	009b      	lsls	r3, r3, #2
   11210:	18d1      	adds	r1, r2, r3
   11212:	697b      	ldr	r3, [r7, #20]
   11214:	689a      	ldr	r2, [r3, #8]
   11216:	693b      	ldr	r3, [r7, #16]
   11218:	1ad3      	subs	r3, r2, r3
   1121a:	009b      	lsls	r3, r3, #2
   1121c:	461a      	mov	r2, r3
   1121e:	f00a fddf 	bl	1bde0 <memmove>
    // Clear stale pointer from slot which just got freed to prevent GC issues
    self->items[self->len] = MP_OBJ_NULL;
   11222:	697b      	ldr	r3, [r7, #20]
   11224:	68da      	ldr	r2, [r3, #12]
   11226:	697b      	ldr	r3, [r7, #20]
   11228:	689b      	ldr	r3, [r3, #8]
   1122a:	009b      	lsls	r3, r3, #2
   1122c:	4413      	add	r3, r2
   1122e:	2200      	movs	r2, #0
   11230:	601a      	str	r2, [r3, #0]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
   11232:	697b      	ldr	r3, [r7, #20]
   11234:	685b      	ldr	r3, [r3, #4]
   11236:	2b04      	cmp	r3, #4
   11238:	d918      	bls.n	1126c <list_pop+0xf8>
   1123a:	697b      	ldr	r3, [r7, #20]
   1123c:	685a      	ldr	r2, [r3, #4]
   1123e:	697b      	ldr	r3, [r7, #20]
   11240:	689b      	ldr	r3, [r3, #8]
   11242:	005b      	lsls	r3, r3, #1
   11244:	429a      	cmp	r2, r3
   11246:	d911      	bls.n	1126c <list_pop+0xf8>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
   11248:	697b      	ldr	r3, [r7, #20]
   1124a:	68da      	ldr	r2, [r3, #12]
   1124c:	697b      	ldr	r3, [r7, #20]
   1124e:	685b      	ldr	r3, [r3, #4]
   11250:	085b      	lsrs	r3, r3, #1
   11252:	009b      	lsls	r3, r3, #2
   11254:	4619      	mov	r1, r3
   11256:	4610      	mov	r0, r2
   11258:	f7ef f894 	bl	384 <m_realloc>
   1125c:	4602      	mov	r2, r0
   1125e:	697b      	ldr	r3, [r7, #20]
   11260:	60da      	str	r2, [r3, #12]
        self->alloc /= 2;
   11262:	697b      	ldr	r3, [r7, #20]
   11264:	685b      	ldr	r3, [r3, #4]
   11266:	085a      	lsrs	r2, r3, #1
   11268:	697b      	ldr	r3, [r7, #20]
   1126a:	605a      	str	r2, [r3, #4]
    }
    return ret;
   1126c:	68fb      	ldr	r3, [r7, #12]
}
   1126e:	4618      	mov	r0, r3
   11270:	3718      	adds	r7, #24
   11272:	46bd      	mov	sp, r7
   11274:	bd80      	pop	{r7, pc}
   11276:	bf00      	nop
   11278:	000211a8 	.word	0x000211a8
   1127c:	00021008 	.word	0x00021008
   11280:	00021204 	.word	0x00021204
   11284:	00020ff4 	.word	0x00020ff4
   11288:	00021064 	.word	0x00021064
   1128c:	0002052c 	.word	0x0002052c

00011290 <mp_quicksort>:

STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
   11290:	b580      	push	{r7, lr}
   11292:	b08a      	sub	sp, #40	; 0x28
   11294:	af00      	add	r7, sp, #0
   11296:	60f8      	str	r0, [r7, #12]
   11298:	60b9      	str	r1, [r7, #8]
   1129a:	607a      	str	r2, [r7, #4]
   1129c:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    while (head < tail) {
   1129e:	e085      	b.n	113ac <mp_quicksort+0x11c>
        mp_obj_t *h = head - 1;
   112a0:	68fb      	ldr	r3, [r7, #12]
   112a2:	3b04      	subs	r3, #4
   112a4:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_t *t = tail;
   112a6:	68bb      	ldr	r3, [r7, #8]
   112a8:	623b      	str	r3, [r7, #32]
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
   112aa:	687b      	ldr	r3, [r7, #4]
   112ac:	2b00      	cmp	r3, #0
   112ae:	d102      	bne.n	112b6 <mp_quicksort+0x26>
   112b0:	68bb      	ldr	r3, [r7, #8]
   112b2:	681b      	ldr	r3, [r3, #0]
   112b4:	e006      	b.n	112c4 <mp_quicksort+0x34>
   112b6:	68bb      	ldr	r3, [r7, #8]
   112b8:	681b      	ldr	r3, [r3, #0]
   112ba:	4619      	mov	r1, r3
   112bc:	6878      	ldr	r0, [r7, #4]
   112be:	f7fa fd83 	bl	bdc8 <mp_call_function_1>
   112c2:	4603      	mov	r3, r0
   112c4:	61fb      	str	r3, [r7, #28]
        for (;;) {
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
   112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112c8:	3304      	adds	r3, #4
   112ca:	627b      	str	r3, [r7, #36]	; 0x24
   112cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   112ce:	6a3b      	ldr	r3, [r7, #32]
   112d0:	429a      	cmp	r2, r3
   112d2:	d215      	bcs.n	11300 <mp_quicksort+0x70>
   112d4:	687b      	ldr	r3, [r7, #4]
   112d6:	2b00      	cmp	r3, #0
   112d8:	d102      	bne.n	112e0 <mp_quicksort+0x50>
   112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112dc:	681b      	ldr	r3, [r3, #0]
   112de:	e006      	b.n	112ee <mp_quicksort+0x5e>
   112e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112e2:	681b      	ldr	r3, [r3, #0]
   112e4:	4619      	mov	r1, r3
   112e6:	6878      	ldr	r0, [r7, #4]
   112e8:	f7fa fd6e 	bl	bdc8 <mp_call_function_1>
   112ec:	4603      	mov	r3, r0
   112ee:	69fa      	ldr	r2, [r7, #28]
   112f0:	4619      	mov	r1, r3
   112f2:	2000      	movs	r0, #0
   112f4:	f7fa faf6 	bl	b8e4 <mp_binary_op>
   112f8:	4602      	mov	r2, r0
   112fa:	683b      	ldr	r3, [r7, #0]
   112fc:	429a      	cmp	r2, r3
   112fe:	d0e2      	beq.n	112c6 <mp_quicksort+0x36>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
   11300:	6a3b      	ldr	r3, [r7, #32]
   11302:	3b04      	subs	r3, #4
   11304:	623b      	str	r3, [r7, #32]
   11306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11308:	6a3b      	ldr	r3, [r7, #32]
   1130a:	429a      	cmp	r2, r3
   1130c:	d215      	bcs.n	1133a <mp_quicksort+0xaa>
   1130e:	687b      	ldr	r3, [r7, #4]
   11310:	2b00      	cmp	r3, #0
   11312:	d102      	bne.n	1131a <mp_quicksort+0x8a>
   11314:	6a3b      	ldr	r3, [r7, #32]
   11316:	681b      	ldr	r3, [r3, #0]
   11318:	e006      	b.n	11328 <mp_quicksort+0x98>
   1131a:	6a3b      	ldr	r3, [r7, #32]
   1131c:	681b      	ldr	r3, [r3, #0]
   1131e:	4619      	mov	r1, r3
   11320:	6878      	ldr	r0, [r7, #4]
   11322:	f7fa fd51 	bl	bdc8 <mp_call_function_1>
   11326:	4603      	mov	r3, r0
   11328:	461a      	mov	r2, r3
   1132a:	69f9      	ldr	r1, [r7, #28]
   1132c:	2000      	movs	r0, #0
   1132e:	f7fa fad9 	bl	b8e4 <mp_binary_op>
   11332:	4602      	mov	r2, r0
   11334:	683b      	ldr	r3, [r7, #0]
   11336:	429a      	cmp	r2, r3
   11338:	d0e2      	beq.n	11300 <mp_quicksort+0x70>
            if (h >= t) break;
   1133a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1133c:	6a3b      	ldr	r3, [r7, #32]
   1133e:	429a      	cmp	r2, r3
   11340:	d20a      	bcs.n	11358 <mp_quicksort+0xc8>
            mp_obj_t x = h[0];
   11342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11344:	681b      	ldr	r3, [r3, #0]
   11346:	61bb      	str	r3, [r7, #24]
            h[0] = t[0];
   11348:	6a3b      	ldr	r3, [r7, #32]
   1134a:	681a      	ldr	r2, [r3, #0]
   1134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1134e:	601a      	str	r2, [r3, #0]
            t[0] = x;
   11350:	6a3b      	ldr	r3, [r7, #32]
   11352:	69ba      	ldr	r2, [r7, #24]
   11354:	601a      	str	r2, [r3, #0]
        }
   11356:	e7b6      	b.n	112c6 <mp_quicksort+0x36>
            if (h >= t) break;
   11358:	bf00      	nop
        mp_obj_t x = h[0];
   1135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1135c:	681b      	ldr	r3, [r3, #0]
   1135e:	617b      	str	r3, [r7, #20]
        h[0] = tail[0];
   11360:	68bb      	ldr	r3, [r7, #8]
   11362:	681a      	ldr	r2, [r3, #0]
   11364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11366:	601a      	str	r2, [r3, #0]
        tail[0] = x;
   11368:	68bb      	ldr	r3, [r7, #8]
   1136a:	697a      	ldr	r2, [r7, #20]
   1136c:	601a      	str	r2, [r3, #0]
        // do the smaller recursive call first, to keep stack within O(log(N))
        if (t - head < tail - h - 1) {
   1136e:	6a3a      	ldr	r2, [r7, #32]
   11370:	68fb      	ldr	r3, [r7, #12]
   11372:	1ad3      	subs	r3, r2, r3
   11374:	109b      	asrs	r3, r3, #2
   11376:	4619      	mov	r1, r3
   11378:	68ba      	ldr	r2, [r7, #8]
   1137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1137c:	1ad3      	subs	r3, r2, r3
   1137e:	109b      	asrs	r3, r3, #2
   11380:	3b01      	subs	r3, #1
   11382:	4299      	cmp	r1, r3
   11384:	da09      	bge.n	1139a <mp_quicksort+0x10a>
            mp_quicksort(head, t, key_fn, binop_less_result);
   11386:	683b      	ldr	r3, [r7, #0]
   11388:	687a      	ldr	r2, [r7, #4]
   1138a:	6a39      	ldr	r1, [r7, #32]
   1138c:	68f8      	ldr	r0, [r7, #12]
   1138e:	f7ff ff7f 	bl	11290 <mp_quicksort>
            head = h + 1;
   11392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11394:	3304      	adds	r3, #4
   11396:	60fb      	str	r3, [r7, #12]
   11398:	e008      	b.n	113ac <mp_quicksort+0x11c>
        } else {
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
   1139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1139c:	1d18      	adds	r0, r3, #4
   1139e:	683b      	ldr	r3, [r7, #0]
   113a0:	687a      	ldr	r2, [r7, #4]
   113a2:	68b9      	ldr	r1, [r7, #8]
   113a4:	f7ff ff74 	bl	11290 <mp_quicksort>
            tail = t;
   113a8:	6a3b      	ldr	r3, [r7, #32]
   113aa:	60bb      	str	r3, [r7, #8]
    while (head < tail) {
   113ac:	68fa      	ldr	r2, [r7, #12]
   113ae:	68bb      	ldr	r3, [r7, #8]
   113b0:	429a      	cmp	r2, r3
   113b2:	f4ff af75 	bcc.w	112a0 <mp_quicksort+0x10>
        }
    }
}
   113b6:	bf00      	nop
   113b8:	3728      	adds	r7, #40	; 0x28
   113ba:	46bd      	mov	sp, r7
   113bc:	bd80      	pop	{r7, pc}
   113be:	bf00      	nop

000113c0 <mp_obj_list_sort>:

// TODO Python defines sort to be stable but ours is not
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   113c0:	b580      	push	{r7, lr}
   113c2:	b08a      	sub	sp, #40	; 0x28
   113c4:	af02      	add	r7, sp, #8
   113c6:	60f8      	str	r0, [r7, #12]
   113c8:	60b9      	str	r1, [r7, #8]
   113ca:	607a      	str	r2, [r7, #4]

    // parse args
    struct {
        mp_arg_val_t key, reverse;
    } args;
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
   113cc:	68fb      	ldr	r3, [r7, #12]
   113ce:	1e58      	subs	r0, r3, #1
   113d0:	68bb      	ldr	r3, [r7, #8]
   113d2:	1d19      	adds	r1, r3, #4
   113d4:	f107 0314 	add.w	r3, r7, #20
   113d8:	9301      	str	r3, [sp, #4]
   113da:	4b22      	ldr	r3, [pc, #136]	; (11464 <mp_obj_list_sort+0xa4>)
   113dc:	9300      	str	r3, [sp, #0]
   113de:	2302      	movs	r3, #2
   113e0:	687a      	ldr	r2, [r7, #4]
   113e2:	f7fb fe2b 	bl	d03c <mp_arg_parse_all>
        MP_ARRAY_SIZE(allowed_args), allowed_args, (mp_arg_val_t*)&args);

    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
   113e6:	68bb      	ldr	r3, [r7, #8]
   113e8:	681b      	ldr	r3, [r3, #0]
   113ea:	4618      	mov	r0, r3
   113ec:	f7ff fbe6 	bl	10bbc <MP_OBJ_IS_OBJ>
   113f0:	4603      	mov	r3, r0
   113f2:	f083 0301 	eor.w	r3, r3, #1
   113f6:	b2db      	uxtb	r3, r3
   113f8:	2b00      	cmp	r3, #0
   113fa:	d105      	bne.n	11408 <mp_obj_list_sort+0x48>
   113fc:	68bb      	ldr	r3, [r7, #8]
   113fe:	681b      	ldr	r3, [r3, #0]
   11400:	681b      	ldr	r3, [r3, #0]
   11402:	4a19      	ldr	r2, [pc, #100]	; (11468 <mp_obj_list_sort+0xa8>)
   11404:	4293      	cmp	r3, r2
   11406:	d006      	beq.n	11416 <mp_obj_list_sort+0x56>
   11408:	4b18      	ldr	r3, [pc, #96]	; (1146c <mp_obj_list_sort+0xac>)
   1140a:	4a19      	ldr	r2, [pc, #100]	; (11470 <mp_obj_list_sort+0xb0>)
   1140c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11410:	4818      	ldr	r0, [pc, #96]	; (11474 <mp_obj_list_sort+0xb4>)
   11412:	f009 ffc3 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(pos_args[0]);
   11416:	68bb      	ldr	r3, [r7, #8]
   11418:	681b      	ldr	r3, [r3, #0]
   1141a:	61fb      	str	r3, [r7, #28]

    if (self->len > 1) {
   1141c:	69fb      	ldr	r3, [r7, #28]
   1141e:	689b      	ldr	r3, [r3, #8]
   11420:	2b01      	cmp	r3, #1
   11422:	d919      	bls.n	11458 <mp_obj_list_sort+0x98>
        mp_quicksort(self->items, self->items + self->len - 1,
   11424:	69fb      	ldr	r3, [r7, #28]
   11426:	68d8      	ldr	r0, [r3, #12]
   11428:	69fb      	ldr	r3, [r7, #28]
   1142a:	68da      	ldr	r2, [r3, #12]
   1142c:	69fb      	ldr	r3, [r7, #28]
   1142e:	689b      	ldr	r3, [r3, #8]
   11430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11434:	3b01      	subs	r3, #1
   11436:	009b      	lsls	r3, r3, #2
   11438:	18d1      	adds	r1, r2, r3
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
   1143a:	697b      	ldr	r3, [r7, #20]
        mp_quicksort(self->items, self->items + self->len - 1,
   1143c:	4a0e      	ldr	r2, [pc, #56]	; (11478 <mp_obj_list_sort+0xb8>)
   1143e:	4293      	cmp	r3, r2
   11440:	d001      	beq.n	11446 <mp_obj_list_sort+0x86>
   11442:	697a      	ldr	r2, [r7, #20]
   11444:	e000      	b.n	11448 <mp_obj_list_sort+0x88>
   11446:	2200      	movs	r2, #0
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
   11448:	7e3b      	ldrb	r3, [r7, #24]
        mp_quicksort(self->items, self->items + self->len - 1,
   1144a:	2b00      	cmp	r3, #0
   1144c:	d001      	beq.n	11452 <mp_obj_list_sort+0x92>
   1144e:	4b0b      	ldr	r3, [pc, #44]	; (1147c <mp_obj_list_sort+0xbc>)
   11450:	e000      	b.n	11454 <mp_obj_list_sort+0x94>
   11452:	4b0b      	ldr	r3, [pc, #44]	; (11480 <mp_obj_list_sort+0xc0>)
   11454:	f7ff ff1c 	bl	11290 <mp_quicksort>
    }

    return mp_const_none;
   11458:	4b07      	ldr	r3, [pc, #28]	; (11478 <mp_obj_list_sort+0xb8>)
}
   1145a:	4618      	mov	r0, r3
   1145c:	3720      	adds	r7, #32
   1145e:	46bd      	mov	sp, r7
   11460:	bd80      	pop	{r7, pc}
   11462:	bf00      	nop
   11464:	00021210 	.word	0x00021210
   11468:	000211a8 	.word	0x000211a8
   1146c:	00021078 	.word	0x00021078
   11470:	00021220 	.word	0x00021220
   11474:	00020ff4 	.word	0x00020ff4
   11478:	00021480 	.word	0x00021480
   1147c:	0001fc34 	.word	0x0001fc34
   11480:	0001fc3c 	.word	0x0001fc3c

00011484 <list_clear>:

STATIC mp_obj_t list_clear(mp_obj_t self_in) {
   11484:	b580      	push	{r7, lr}
   11486:	b084      	sub	sp, #16
   11488:	af00      	add	r7, sp, #0
   1148a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1148c:	6878      	ldr	r0, [r7, #4]
   1148e:	f7ff fb95 	bl	10bbc <MP_OBJ_IS_OBJ>
   11492:	4603      	mov	r3, r0
   11494:	f083 0301 	eor.w	r3, r3, #1
   11498:	b2db      	uxtb	r3, r3
   1149a:	2b00      	cmp	r3, #0
   1149c:	d104      	bne.n	114a8 <list_clear+0x24>
   1149e:	687b      	ldr	r3, [r7, #4]
   114a0:	681b      	ldr	r3, [r3, #0]
   114a2:	4a14      	ldr	r2, [pc, #80]	; (114f4 <list_clear+0x70>)
   114a4:	4293      	cmp	r3, r2
   114a6:	d006      	beq.n	114b6 <list_clear+0x32>
   114a8:	4b13      	ldr	r3, [pc, #76]	; (114f8 <list_clear+0x74>)
   114aa:	4a14      	ldr	r2, [pc, #80]	; (114fc <list_clear+0x78>)
   114ac:	f240 1155 	movw	r1, #341	; 0x155
   114b0:	4813      	ldr	r0, [pc, #76]	; (11500 <list_clear+0x7c>)
   114b2:	f009 ff73 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   114b6:	687b      	ldr	r3, [r7, #4]
   114b8:	60fb      	str	r3, [r7, #12]
    self->len = 0;
   114ba:	68fb      	ldr	r3, [r7, #12]
   114bc:	2200      	movs	r2, #0
   114be:	609a      	str	r2, [r3, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
   114c0:	68fb      	ldr	r3, [r7, #12]
   114c2:	68db      	ldr	r3, [r3, #12]
   114c4:	2110      	movs	r1, #16
   114c6:	4618      	mov	r0, r3
   114c8:	f7ee ff5c 	bl	384 <m_realloc>
   114cc:	4602      	mov	r2, r0
   114ce:	68fb      	ldr	r3, [r7, #12]
   114d0:	60da      	str	r2, [r3, #12]
    self->alloc = LIST_MIN_ALLOC;
   114d2:	68fb      	ldr	r3, [r7, #12]
   114d4:	2204      	movs	r2, #4
   114d6:	605a      	str	r2, [r3, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
   114d8:	68fb      	ldr	r3, [r7, #12]
   114da:	68d8      	ldr	r0, [r3, #12]
   114dc:	68fb      	ldr	r3, [r7, #12]
   114de:	685b      	ldr	r3, [r3, #4]
   114e0:	009b      	lsls	r3, r3, #2
   114e2:	461a      	mov	r2, r3
   114e4:	2100      	movs	r1, #0
   114e6:	f00a fcb1 	bl	1be4c <memset>
    return mp_const_none;
   114ea:	4b06      	ldr	r3, [pc, #24]	; (11504 <list_clear+0x80>)
}
   114ec:	4618      	mov	r0, r3
   114ee:	3710      	adds	r7, #16
   114f0:	46bd      	mov	sp, r7
   114f2:	bd80      	pop	{r7, pc}
   114f4:	000211a8 	.word	0x000211a8
   114f8:	00020f98 	.word	0x00020f98
   114fc:	00021234 	.word	0x00021234
   11500:	00020ff4 	.word	0x00020ff4
   11504:	00021480 	.word	0x00021480

00011508 <list_copy>:

STATIC mp_obj_t list_copy(mp_obj_t self_in) {
   11508:	b580      	push	{r7, lr}
   1150a:	b084      	sub	sp, #16
   1150c:	af00      	add	r7, sp, #0
   1150e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11510:	6878      	ldr	r0, [r7, #4]
   11512:	f7ff fb53 	bl	10bbc <MP_OBJ_IS_OBJ>
   11516:	4603      	mov	r3, r0
   11518:	f083 0301 	eor.w	r3, r3, #1
   1151c:	b2db      	uxtb	r3, r3
   1151e:	2b00      	cmp	r3, #0
   11520:	d104      	bne.n	1152c <list_copy+0x24>
   11522:	687b      	ldr	r3, [r7, #4]
   11524:	681b      	ldr	r3, [r3, #0]
   11526:	4a0c      	ldr	r2, [pc, #48]	; (11558 <list_copy+0x50>)
   11528:	4293      	cmp	r3, r2
   1152a:	d006      	beq.n	1153a <list_copy+0x32>
   1152c:	4b0b      	ldr	r3, [pc, #44]	; (1155c <list_copy+0x54>)
   1152e:	4a0c      	ldr	r2, [pc, #48]	; (11560 <list_copy+0x58>)
   11530:	f240 115f 	movw	r1, #351	; 0x15f
   11534:	480b      	ldr	r0, [pc, #44]	; (11564 <list_copy+0x5c>)
   11536:	f009 ff31 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1153a:	687b      	ldr	r3, [r7, #4]
   1153c:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_list(self->len, self->items);
   1153e:	68fb      	ldr	r3, [r7, #12]
   11540:	689a      	ldr	r2, [r3, #8]
   11542:	68fb      	ldr	r3, [r7, #12]
   11544:	68db      	ldr	r3, [r3, #12]
   11546:	4619      	mov	r1, r3
   11548:	4610      	mov	r0, r2
   1154a:	f000 f9bd 	bl	118c8 <mp_obj_new_list>
   1154e:	4603      	mov	r3, r0
}
   11550:	4618      	mov	r0, r3
   11552:	3710      	adds	r7, #16
   11554:	46bd      	mov	sp, r7
   11556:	bd80      	pop	{r7, pc}
   11558:	000211a8 	.word	0x000211a8
   1155c:	00020f98 	.word	0x00020f98
   11560:	00021240 	.word	0x00021240
   11564:	00020ff4 	.word	0x00020ff4

00011568 <list_count>:

STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
   11568:	b580      	push	{r7, lr}
   1156a:	b084      	sub	sp, #16
   1156c:	af00      	add	r7, sp, #0
   1156e:	6078      	str	r0, [r7, #4]
   11570:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11572:	6878      	ldr	r0, [r7, #4]
   11574:	f7ff fb22 	bl	10bbc <MP_OBJ_IS_OBJ>
   11578:	4603      	mov	r3, r0
   1157a:	f083 0301 	eor.w	r3, r3, #1
   1157e:	b2db      	uxtb	r3, r3
   11580:	2b00      	cmp	r3, #0
   11582:	d104      	bne.n	1158e <list_count+0x26>
   11584:	687b      	ldr	r3, [r7, #4]
   11586:	681b      	ldr	r3, [r3, #0]
   11588:	4a0c      	ldr	r2, [pc, #48]	; (115bc <list_count+0x54>)
   1158a:	4293      	cmp	r3, r2
   1158c:	d006      	beq.n	1159c <list_count+0x34>
   1158e:	4b0c      	ldr	r3, [pc, #48]	; (115c0 <list_count+0x58>)
   11590:	4a0c      	ldr	r2, [pc, #48]	; (115c4 <list_count+0x5c>)
   11592:	f240 1165 	movw	r1, #357	; 0x165
   11596:	480c      	ldr	r0, [pc, #48]	; (115c8 <list_count+0x60>)
   11598:	f009 ff00 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1159c:	687b      	ldr	r3, [r7, #4]
   1159e:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   115a0:	68fb      	ldr	r3, [r7, #12]
   115a2:	68d8      	ldr	r0, [r3, #12]
   115a4:	68fb      	ldr	r3, [r7, #12]
   115a6:	689b      	ldr	r3, [r3, #8]
   115a8:	683a      	ldr	r2, [r7, #0]
   115aa:	4619      	mov	r1, r3
   115ac:	f006 fa52 	bl	17a54 <mp_seq_count_obj>
   115b0:	4603      	mov	r3, r0
}
   115b2:	4618      	mov	r0, r3
   115b4:	3710      	adds	r7, #16
   115b6:	46bd      	mov	sp, r7
   115b8:	bd80      	pop	{r7, pc}
   115ba:	bf00      	nop
   115bc:	000211a8 	.word	0x000211a8
   115c0:	00020f98 	.word	0x00020f98
   115c4:	0002124c 	.word	0x0002124c
   115c8:	00020ff4 	.word	0x00020ff4

000115cc <list_index>:

STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
   115cc:	b580      	push	{r7, lr}
   115ce:	b084      	sub	sp, #16
   115d0:	af00      	add	r7, sp, #0
   115d2:	6078      	str	r0, [r7, #4]
   115d4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   115d6:	683b      	ldr	r3, [r7, #0]
   115d8:	681b      	ldr	r3, [r3, #0]
   115da:	4618      	mov	r0, r3
   115dc:	f7ff faee 	bl	10bbc <MP_OBJ_IS_OBJ>
   115e0:	4603      	mov	r3, r0
   115e2:	f083 0301 	eor.w	r3, r3, #1
   115e6:	b2db      	uxtb	r3, r3
   115e8:	2b00      	cmp	r3, #0
   115ea:	d105      	bne.n	115f8 <list_index+0x2c>
   115ec:	683b      	ldr	r3, [r7, #0]
   115ee:	681b      	ldr	r3, [r3, #0]
   115f0:	681b      	ldr	r3, [r3, #0]
   115f2:	4a0d      	ldr	r2, [pc, #52]	; (11628 <list_index+0x5c>)
   115f4:	4293      	cmp	r3, r2
   115f6:	d006      	beq.n	11606 <list_index+0x3a>
   115f8:	4b0c      	ldr	r3, [pc, #48]	; (1162c <list_index+0x60>)
   115fa:	4a0d      	ldr	r2, [pc, #52]	; (11630 <list_index+0x64>)
   115fc:	f240 116b 	movw	r1, #363	; 0x16b
   11600:	480c      	ldr	r0, [pc, #48]	; (11634 <list_index+0x68>)
   11602:	f009 fecb 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   11606:	683b      	ldr	r3, [r7, #0]
   11608:	681b      	ldr	r3, [r3, #0]
   1160a:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   1160c:	68fb      	ldr	r3, [r7, #12]
   1160e:	68d8      	ldr	r0, [r3, #12]
   11610:	68fb      	ldr	r3, [r7, #12]
   11612:	6899      	ldr	r1, [r3, #8]
   11614:	683b      	ldr	r3, [r7, #0]
   11616:	687a      	ldr	r2, [r7, #4]
   11618:	f006 f9cc 	bl	179b4 <mp_seq_index_obj>
   1161c:	4603      	mov	r3, r0
}
   1161e:	4618      	mov	r0, r3
   11620:	3710      	adds	r7, #16
   11622:	46bd      	mov	sp, r7
   11624:	bd80      	pop	{r7, pc}
   11626:	bf00      	nop
   11628:	000211a8 	.word	0x000211a8
   1162c:	00021008 	.word	0x00021008
   11630:	00021258 	.word	0x00021258
   11634:	00020ff4 	.word	0x00020ff4

00011638 <list_insert>:

STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
   11638:	b580      	push	{r7, lr}
   1163a:	b088      	sub	sp, #32
   1163c:	af00      	add	r7, sp, #0
   1163e:	60f8      	str	r0, [r7, #12]
   11640:	60b9      	str	r1, [r7, #8]
   11642:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11644:	68f8      	ldr	r0, [r7, #12]
   11646:	f7ff fab9 	bl	10bbc <MP_OBJ_IS_OBJ>
   1164a:	4603      	mov	r3, r0
   1164c:	f083 0301 	eor.w	r3, r3, #1
   11650:	b2db      	uxtb	r3, r3
   11652:	2b00      	cmp	r3, #0
   11654:	d104      	bne.n	11660 <list_insert+0x28>
   11656:	68fb      	ldr	r3, [r7, #12]
   11658:	681b      	ldr	r3, [r3, #0]
   1165a:	4a27      	ldr	r2, [pc, #156]	; (116f8 <list_insert+0xc0>)
   1165c:	4293      	cmp	r3, r2
   1165e:	d006      	beq.n	1166e <list_insert+0x36>
   11660:	4b26      	ldr	r3, [pc, #152]	; (116fc <list_insert+0xc4>)
   11662:	4a27      	ldr	r2, [pc, #156]	; (11700 <list_insert+0xc8>)
   11664:	f240 1171 	movw	r1, #369	; 0x171
   11668:	4826      	ldr	r0, [pc, #152]	; (11704 <list_insert+0xcc>)
   1166a:	f009 fe97 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1166e:	68fb      	ldr	r3, [r7, #12]
   11670:	617b      	str	r3, [r7, #20]
    // insert has its own strange index logic
    mp_int_t index = MP_OBJ_SMALL_INT_VALUE(idx);
   11672:	68bb      	ldr	r3, [r7, #8]
   11674:	105b      	asrs	r3, r3, #1
   11676:	61fb      	str	r3, [r7, #28]
    if (index < 0) {
   11678:	69fb      	ldr	r3, [r7, #28]
   1167a:	2b00      	cmp	r3, #0
   1167c:	da04      	bge.n	11688 <list_insert+0x50>
         index += self->len;
   1167e:	697b      	ldr	r3, [r7, #20]
   11680:	689a      	ldr	r2, [r3, #8]
   11682:	69fb      	ldr	r3, [r7, #28]
   11684:	4413      	add	r3, r2
   11686:	61fb      	str	r3, [r7, #28]
    }
    if (index < 0) {
   11688:	69fb      	ldr	r3, [r7, #28]
   1168a:	2b00      	cmp	r3, #0
   1168c:	da01      	bge.n	11692 <list_insert+0x5a>
         index = 0;
   1168e:	2300      	movs	r3, #0
   11690:	61fb      	str	r3, [r7, #28]
    }
    if ((size_t)index > self->len) {
   11692:	697b      	ldr	r3, [r7, #20]
   11694:	689a      	ldr	r2, [r3, #8]
   11696:	69fb      	ldr	r3, [r7, #28]
   11698:	429a      	cmp	r2, r3
   1169a:	d202      	bcs.n	116a2 <list_insert+0x6a>
         index = self->len;
   1169c:	697b      	ldr	r3, [r7, #20]
   1169e:	689b      	ldr	r3, [r3, #8]
   116a0:	61fb      	str	r3, [r7, #28]
    }

    mp_obj_list_append(self_in, mp_const_none);
   116a2:	4919      	ldr	r1, [pc, #100]	; (11708 <list_insert+0xd0>)
   116a4:	68f8      	ldr	r0, [r7, #12]
   116a6:	f7ff fc7d 	bl	10fa4 <mp_obj_list_append>

    for (mp_int_t i = self->len-1; i > index; i--) {
   116aa:	697b      	ldr	r3, [r7, #20]
   116ac:	689b      	ldr	r3, [r3, #8]
   116ae:	3b01      	subs	r3, #1
   116b0:	61bb      	str	r3, [r7, #24]
   116b2:	e011      	b.n	116d8 <list_insert+0xa0>
         self->items[i] = self->items[i-1];
   116b4:	697b      	ldr	r3, [r7, #20]
   116b6:	68da      	ldr	r2, [r3, #12]
   116b8:	69bb      	ldr	r3, [r7, #24]
   116ba:	009b      	lsls	r3, r3, #2
   116bc:	441a      	add	r2, r3
   116be:	697b      	ldr	r3, [r7, #20]
   116c0:	68d9      	ldr	r1, [r3, #12]
   116c2:	69bb      	ldr	r3, [r7, #24]
   116c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   116c8:	3b01      	subs	r3, #1
   116ca:	009b      	lsls	r3, r3, #2
   116cc:	440b      	add	r3, r1
   116ce:	681b      	ldr	r3, [r3, #0]
   116d0:	6013      	str	r3, [r2, #0]
    for (mp_int_t i = self->len-1; i > index; i--) {
   116d2:	69bb      	ldr	r3, [r7, #24]
   116d4:	3b01      	subs	r3, #1
   116d6:	61bb      	str	r3, [r7, #24]
   116d8:	69ba      	ldr	r2, [r7, #24]
   116da:	69fb      	ldr	r3, [r7, #28]
   116dc:	429a      	cmp	r2, r3
   116de:	dce9      	bgt.n	116b4 <list_insert+0x7c>
    }
    self->items[index] = obj;
   116e0:	697b      	ldr	r3, [r7, #20]
   116e2:	68da      	ldr	r2, [r3, #12]
   116e4:	69fb      	ldr	r3, [r7, #28]
   116e6:	009b      	lsls	r3, r3, #2
   116e8:	4413      	add	r3, r2
   116ea:	687a      	ldr	r2, [r7, #4]
   116ec:	601a      	str	r2, [r3, #0]

    return mp_const_none;
   116ee:	4b06      	ldr	r3, [pc, #24]	; (11708 <list_insert+0xd0>)
}
   116f0:	4618      	mov	r0, r3
   116f2:	3720      	adds	r7, #32
   116f4:	46bd      	mov	sp, r7
   116f6:	bd80      	pop	{r7, pc}
   116f8:	000211a8 	.word	0x000211a8
   116fc:	00020f98 	.word	0x00020f98
   11700:	00021264 	.word	0x00021264
   11704:	00020ff4 	.word	0x00020ff4
   11708:	00021480 	.word	0x00021480

0001170c <mp_obj_list_remove>:

mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
   1170c:	b580      	push	{r7, lr}
   1170e:	b084      	sub	sp, #16
   11710:	af00      	add	r7, sp, #0
   11712:	6078      	str	r0, [r7, #4]
   11714:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11716:	6878      	ldr	r0, [r7, #4]
   11718:	f7ff fa50 	bl	10bbc <MP_OBJ_IS_OBJ>
   1171c:	4603      	mov	r3, r0
   1171e:	f083 0301 	eor.w	r3, r3, #1
   11722:	b2db      	uxtb	r3, r3
   11724:	2b00      	cmp	r3, #0
   11726:	d104      	bne.n	11732 <mp_obj_list_remove+0x26>
   11728:	687b      	ldr	r3, [r7, #4]
   1172a:	681b      	ldr	r3, [r3, #0]
   1172c:	4a10      	ldr	r2, [pc, #64]	; (11770 <mp_obj_list_remove+0x64>)
   1172e:	4293      	cmp	r3, r2
   11730:	d006      	beq.n	11740 <mp_obj_list_remove+0x34>
   11732:	4b10      	ldr	r3, [pc, #64]	; (11774 <mp_obj_list_remove+0x68>)
   11734:	4a10      	ldr	r2, [pc, #64]	; (11778 <mp_obj_list_remove+0x6c>)
   11736:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   1173a:	4810      	ldr	r0, [pc, #64]	; (1177c <mp_obj_list_remove+0x70>)
   1173c:	f009 fe2e 	bl	1b39c <__assert_func>
    mp_obj_t args[] = {self_in, value};
   11740:	687b      	ldr	r3, [r7, #4]
   11742:	60bb      	str	r3, [r7, #8]
   11744:	683b      	ldr	r3, [r7, #0]
   11746:	60fb      	str	r3, [r7, #12]
    args[1] = list_index(2, args);
   11748:	f107 0308 	add.w	r3, r7, #8
   1174c:	4619      	mov	r1, r3
   1174e:	2002      	movs	r0, #2
   11750:	f7ff ff3c 	bl	115cc <list_index>
   11754:	4603      	mov	r3, r0
   11756:	60fb      	str	r3, [r7, #12]
    list_pop(2, args);
   11758:	f107 0308 	add.w	r3, r7, #8
   1175c:	4619      	mov	r1, r3
   1175e:	2002      	movs	r0, #2
   11760:	f7ff fd08 	bl	11174 <list_pop>

    return mp_const_none;
   11764:	4b06      	ldr	r3, [pc, #24]	; (11780 <mp_obj_list_remove+0x74>)
}
   11766:	4618      	mov	r0, r3
   11768:	3710      	adds	r7, #16
   1176a:	46bd      	mov	sp, r7
   1176c:	bd80      	pop	{r7, pc}
   1176e:	bf00      	nop
   11770:	000211a8 	.word	0x000211a8
   11774:	00020f98 	.word	0x00020f98
   11778:	00021270 	.word	0x00021270
   1177c:	00020ff4 	.word	0x00020ff4
   11780:	00021480 	.word	0x00021480

00011784 <list_reverse>:

STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
   11784:	b580      	push	{r7, lr}
   11786:	b086      	sub	sp, #24
   11788:	af00      	add	r7, sp, #0
   1178a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1178c:	6878      	ldr	r0, [r7, #4]
   1178e:	f7ff fa15 	bl	10bbc <MP_OBJ_IS_OBJ>
   11792:	4603      	mov	r3, r0
   11794:	f083 0301 	eor.w	r3, r3, #1
   11798:	b2db      	uxtb	r3, r3
   1179a:	2b00      	cmp	r3, #0
   1179c:	d104      	bne.n	117a8 <list_reverse+0x24>
   1179e:	687b      	ldr	r3, [r7, #4]
   117a0:	681b      	ldr	r3, [r3, #0]
   117a2:	4a23      	ldr	r2, [pc, #140]	; (11830 <list_reverse+0xac>)
   117a4:	4293      	cmp	r3, r2
   117a6:	d006      	beq.n	117b6 <list_reverse+0x32>
   117a8:	4b22      	ldr	r3, [pc, #136]	; (11834 <list_reverse+0xb0>)
   117aa:	4a23      	ldr	r2, [pc, #140]	; (11838 <list_reverse+0xb4>)
   117ac:	f240 1193 	movw	r1, #403	; 0x193
   117b0:	4822      	ldr	r0, [pc, #136]	; (1183c <list_reverse+0xb8>)
   117b2:	f009 fdf3 	bl	1b39c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   117b6:	687b      	ldr	r3, [r7, #4]
   117b8:	613b      	str	r3, [r7, #16]

    mp_int_t len = self->len;
   117ba:	693b      	ldr	r3, [r7, #16]
   117bc:	689b      	ldr	r3, [r3, #8]
   117be:	60fb      	str	r3, [r7, #12]
    for (mp_int_t i = 0; i < len/2; i++) {
   117c0:	2300      	movs	r3, #0
   117c2:	617b      	str	r3, [r7, #20]
   117c4:	e026      	b.n	11814 <list_reverse+0x90>
         mp_obj_t a = self->items[i];
   117c6:	693b      	ldr	r3, [r7, #16]
   117c8:	68da      	ldr	r2, [r3, #12]
   117ca:	697b      	ldr	r3, [r7, #20]
   117cc:	009b      	lsls	r3, r3, #2
   117ce:	4413      	add	r3, r2
   117d0:	681b      	ldr	r3, [r3, #0]
   117d2:	60bb      	str	r3, [r7, #8]
         self->items[i] = self->items[len-i-1];
   117d4:	693b      	ldr	r3, [r7, #16]
   117d6:	68da      	ldr	r2, [r3, #12]
   117d8:	697b      	ldr	r3, [r7, #20]
   117da:	009b      	lsls	r3, r3, #2
   117dc:	441a      	add	r2, r3
   117de:	693b      	ldr	r3, [r7, #16]
   117e0:	68d9      	ldr	r1, [r3, #12]
   117e2:	68f8      	ldr	r0, [r7, #12]
   117e4:	697b      	ldr	r3, [r7, #20]
   117e6:	1ac3      	subs	r3, r0, r3
   117e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   117ec:	3b01      	subs	r3, #1
   117ee:	009b      	lsls	r3, r3, #2
   117f0:	440b      	add	r3, r1
   117f2:	681b      	ldr	r3, [r3, #0]
   117f4:	6013      	str	r3, [r2, #0]
         self->items[len-i-1] = a;
   117f6:	693b      	ldr	r3, [r7, #16]
   117f8:	68da      	ldr	r2, [r3, #12]
   117fa:	68f9      	ldr	r1, [r7, #12]
   117fc:	697b      	ldr	r3, [r7, #20]
   117fe:	1acb      	subs	r3, r1, r3
   11800:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11804:	3b01      	subs	r3, #1
   11806:	009b      	lsls	r3, r3, #2
   11808:	4413      	add	r3, r2
   1180a:	68ba      	ldr	r2, [r7, #8]
   1180c:	601a      	str	r2, [r3, #0]
    for (mp_int_t i = 0; i < len/2; i++) {
   1180e:	697b      	ldr	r3, [r7, #20]
   11810:	3301      	adds	r3, #1
   11812:	617b      	str	r3, [r7, #20]
   11814:	68fb      	ldr	r3, [r7, #12]
   11816:	0fda      	lsrs	r2, r3, #31
   11818:	4413      	add	r3, r2
   1181a:	105b      	asrs	r3, r3, #1
   1181c:	461a      	mov	r2, r3
   1181e:	697b      	ldr	r3, [r7, #20]
   11820:	429a      	cmp	r2, r3
   11822:	dcd0      	bgt.n	117c6 <list_reverse+0x42>
    }

    return mp_const_none;
   11824:	4b06      	ldr	r3, [pc, #24]	; (11840 <list_reverse+0xbc>)
}
   11826:	4618      	mov	r0, r3
   11828:	3718      	adds	r7, #24
   1182a:	46bd      	mov	sp, r7
   1182c:	bd80      	pop	{r7, pc}
   1182e:	bf00      	nop
   11830:	000211a8 	.word	0x000211a8
   11834:	00020f98 	.word	0x00020f98
   11838:	00021284 	.word	0x00021284
   1183c:	00020ff4 	.word	0x00020ff4
   11840:	00021480 	.word	0x00021480

00011844 <mp_obj_list_init>:
    .subscr = list_subscr,
    .getiter = list_getiter,
    .locals_dict = (mp_obj_dict_t*)&list_locals_dict,
};

void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
   11844:	b580      	push	{r7, lr}
   11846:	b082      	sub	sp, #8
   11848:	af00      	add	r7, sp, #0
   1184a:	6078      	str	r0, [r7, #4]
   1184c:	6039      	str	r1, [r7, #0]
    o->base.type = &mp_type_list;
   1184e:	687b      	ldr	r3, [r7, #4]
   11850:	4a13      	ldr	r2, [pc, #76]	; (118a0 <mp_obj_list_init+0x5c>)
   11852:	601a      	str	r2, [r3, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
   11854:	683b      	ldr	r3, [r7, #0]
   11856:	2b04      	cmp	r3, #4
   11858:	bf38      	it	cc
   1185a:	2304      	movcc	r3, #4
   1185c:	461a      	mov	r2, r3
   1185e:	687b      	ldr	r3, [r7, #4]
   11860:	605a      	str	r2, [r3, #4]
    o->len = n;
   11862:	687b      	ldr	r3, [r7, #4]
   11864:	683a      	ldr	r2, [r7, #0]
   11866:	609a      	str	r2, [r3, #8]
    o->items = m_new(mp_obj_t, o->alloc);
   11868:	687b      	ldr	r3, [r7, #4]
   1186a:	685b      	ldr	r3, [r3, #4]
   1186c:	009b      	lsls	r3, r3, #2
   1186e:	4618      	mov	r0, r3
   11870:	f7ee fd54 	bl	31c <m_malloc>
   11874:	4602      	mov	r2, r0
   11876:	687b      	ldr	r3, [r7, #4]
   11878:	60da      	str	r2, [r3, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
   1187a:	687b      	ldr	r3, [r7, #4]
   1187c:	68da      	ldr	r2, [r3, #12]
   1187e:	683b      	ldr	r3, [r7, #0]
   11880:	009b      	lsls	r3, r3, #2
   11882:	18d0      	adds	r0, r2, r3
   11884:	687b      	ldr	r3, [r7, #4]
   11886:	685a      	ldr	r2, [r3, #4]
   11888:	683b      	ldr	r3, [r7, #0]
   1188a:	1ad3      	subs	r3, r2, r3
   1188c:	009b      	lsls	r3, r3, #2
   1188e:	461a      	mov	r2, r3
   11890:	2100      	movs	r1, #0
   11892:	f00a fadb 	bl	1be4c <memset>
}
   11896:	bf00      	nop
   11898:	3708      	adds	r7, #8
   1189a:	46bd      	mov	sp, r7
   1189c:	bd80      	pop	{r7, pc}
   1189e:	bf00      	nop
   118a0:	000211a8 	.word	0x000211a8

000118a4 <list_new>:

STATIC mp_obj_list_t *list_new(size_t n) {
   118a4:	b580      	push	{r7, lr}
   118a6:	b084      	sub	sp, #16
   118a8:	af00      	add	r7, sp, #0
   118aa:	6078      	str	r0, [r7, #4]
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
   118ac:	2010      	movs	r0, #16
   118ae:	f7ee fd35 	bl	31c <m_malloc>
   118b2:	60f8      	str	r0, [r7, #12]
    mp_obj_list_init(o, n);
   118b4:	6879      	ldr	r1, [r7, #4]
   118b6:	68f8      	ldr	r0, [r7, #12]
   118b8:	f7ff ffc4 	bl	11844 <mp_obj_list_init>
    return o;
   118bc:	68fb      	ldr	r3, [r7, #12]
}
   118be:	4618      	mov	r0, r3
   118c0:	3710      	adds	r7, #16
   118c2:	46bd      	mov	sp, r7
   118c4:	bd80      	pop	{r7, pc}
   118c6:	bf00      	nop

000118c8 <mp_obj_new_list>:

mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
   118c8:	b580      	push	{r7, lr}
   118ca:	b084      	sub	sp, #16
   118cc:	af00      	add	r7, sp, #0
   118ce:	6078      	str	r0, [r7, #4]
   118d0:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *o = list_new(n);
   118d2:	6878      	ldr	r0, [r7, #4]
   118d4:	f7ff ffe6 	bl	118a4 <list_new>
   118d8:	60b8      	str	r0, [r7, #8]
    if (items != NULL) {
   118da:	683b      	ldr	r3, [r7, #0]
   118dc:	2b00      	cmp	r3, #0
   118de:	d014      	beq.n	1190a <mp_obj_new_list+0x42>
        for (size_t i = 0; i < n; i++) {
   118e0:	2300      	movs	r3, #0
   118e2:	60fb      	str	r3, [r7, #12]
   118e4:	e00d      	b.n	11902 <mp_obj_new_list+0x3a>
            o->items[i] = items[i];
   118e6:	68bb      	ldr	r3, [r7, #8]
   118e8:	68da      	ldr	r2, [r3, #12]
   118ea:	68fb      	ldr	r3, [r7, #12]
   118ec:	009b      	lsls	r3, r3, #2
   118ee:	4413      	add	r3, r2
   118f0:	68fa      	ldr	r2, [r7, #12]
   118f2:	0092      	lsls	r2, r2, #2
   118f4:	6839      	ldr	r1, [r7, #0]
   118f6:	440a      	add	r2, r1
   118f8:	6812      	ldr	r2, [r2, #0]
   118fa:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < n; i++) {
   118fc:	68fb      	ldr	r3, [r7, #12]
   118fe:	3301      	adds	r3, #1
   11900:	60fb      	str	r3, [r7, #12]
   11902:	68fa      	ldr	r2, [r7, #12]
   11904:	687b      	ldr	r3, [r7, #4]
   11906:	429a      	cmp	r2, r3
   11908:	d3ed      	bcc.n	118e6 <mp_obj_new_list+0x1e>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   1190a:	68bb      	ldr	r3, [r7, #8]
}
   1190c:	4618      	mov	r0, r3
   1190e:	3710      	adds	r7, #16
   11910:	46bd      	mov	sp, r7
   11912:	bd80      	pop	{r7, pc}

00011914 <mp_obj_list_get>:

void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   11914:	b480      	push	{r7}
   11916:	b087      	sub	sp, #28
   11918:	af00      	add	r7, sp, #0
   1191a:	60f8      	str	r0, [r7, #12]
   1191c:	60b9      	str	r1, [r7, #8]
   1191e:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11920:	68fb      	ldr	r3, [r7, #12]
   11922:	617b      	str	r3, [r7, #20]
    *len = self->len;
   11924:	697b      	ldr	r3, [r7, #20]
   11926:	689a      	ldr	r2, [r3, #8]
   11928:	68bb      	ldr	r3, [r7, #8]
   1192a:	601a      	str	r2, [r3, #0]
    *items = self->items;
   1192c:	697b      	ldr	r3, [r7, #20]
   1192e:	68da      	ldr	r2, [r3, #12]
   11930:	687b      	ldr	r3, [r7, #4]
   11932:	601a      	str	r2, [r3, #0]
}
   11934:	bf00      	nop
   11936:	371c      	adds	r7, #28
   11938:	46bd      	mov	sp, r7
   1193a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1193e:	4770      	bx	lr

00011940 <mp_obj_list_set_len>:

void mp_obj_list_set_len(mp_obj_t self_in, size_t len) {
   11940:	b480      	push	{r7}
   11942:	b085      	sub	sp, #20
   11944:	af00      	add	r7, sp, #0
   11946:	6078      	str	r0, [r7, #4]
   11948:	6039      	str	r1, [r7, #0]
    // trust that the caller knows what it's doing
    // TODO realloc if len got much smaller than alloc
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1194a:	687b      	ldr	r3, [r7, #4]
   1194c:	60fb      	str	r3, [r7, #12]
    self->len = len;
   1194e:	68fb      	ldr	r3, [r7, #12]
   11950:	683a      	ldr	r2, [r7, #0]
   11952:	609a      	str	r2, [r3, #8]
}
   11954:	bf00      	nop
   11956:	3714      	adds	r7, #20
   11958:	46bd      	mov	sp, r7
   1195a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1195e:	4770      	bx	lr

00011960 <mp_obj_list_store>:

void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11960:	b580      	push	{r7, lr}
   11962:	b086      	sub	sp, #24
   11964:	af00      	add	r7, sp, #0
   11966:	60f8      	str	r0, [r7, #12]
   11968:	60b9      	str	r1, [r7, #8]
   1196a:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1196c:	68fb      	ldr	r3, [r7, #12]
   1196e:	617b      	str	r3, [r7, #20]
    size_t i = mp_get_index(self->base.type, self->len, index, false);
   11970:	697b      	ldr	r3, [r7, #20]
   11972:	6818      	ldr	r0, [r3, #0]
   11974:	697b      	ldr	r3, [r7, #20]
   11976:	6899      	ldr	r1, [r3, #8]
   11978:	2300      	movs	r3, #0
   1197a:	68ba      	ldr	r2, [r7, #8]
   1197c:	f7fc f9f0 	bl	dd60 <mp_get_index>
   11980:	6138      	str	r0, [r7, #16]
    self->items[i] = value;
   11982:	697b      	ldr	r3, [r7, #20]
   11984:	68da      	ldr	r2, [r3, #12]
   11986:	693b      	ldr	r3, [r7, #16]
   11988:	009b      	lsls	r3, r3, #2
   1198a:	4413      	add	r3, r2
   1198c:	687a      	ldr	r2, [r7, #4]
   1198e:	601a      	str	r2, [r3, #0]
}
   11990:	bf00      	nop
   11992:	3718      	adds	r7, #24
   11994:	46bd      	mov	sp, r7
   11996:	bd80      	pop	{r7, pc}

00011998 <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
   11998:	b480      	push	{r7}
   1199a:	b087      	sub	sp, #28
   1199c:	af00      	add	r7, sp, #0
   1199e:	6078      	str	r0, [r7, #4]
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
   119a0:	687b      	ldr	r3, [r7, #4]
   119a2:	617b      	str	r3, [r7, #20]
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
   119a4:	697b      	ldr	r3, [r7, #20]
   119a6:	689b      	ldr	r3, [r3, #8]
   119a8:	613b      	str	r3, [r7, #16]
    if (self->cur < list->len) {
   119aa:	697b      	ldr	r3, [r7, #20]
   119ac:	68da      	ldr	r2, [r3, #12]
   119ae:	693b      	ldr	r3, [r7, #16]
   119b0:	689b      	ldr	r3, [r3, #8]
   119b2:	429a      	cmp	r2, r3
   119b4:	d20e      	bcs.n	119d4 <list_it_iternext+0x3c>
        mp_obj_t o_out = list->items[self->cur];
   119b6:	693b      	ldr	r3, [r7, #16]
   119b8:	68da      	ldr	r2, [r3, #12]
   119ba:	697b      	ldr	r3, [r7, #20]
   119bc:	68db      	ldr	r3, [r3, #12]
   119be:	009b      	lsls	r3, r3, #2
   119c0:	4413      	add	r3, r2
   119c2:	681b      	ldr	r3, [r3, #0]
   119c4:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   119c6:	697b      	ldr	r3, [r7, #20]
   119c8:	68db      	ldr	r3, [r3, #12]
   119ca:	1c5a      	adds	r2, r3, #1
   119cc:	697b      	ldr	r3, [r7, #20]
   119ce:	60da      	str	r2, [r3, #12]
        return o_out;
   119d0:	68fb      	ldr	r3, [r7, #12]
   119d2:	e000      	b.n	119d6 <list_it_iternext+0x3e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   119d4:	2304      	movs	r3, #4
    }
}
   119d6:	4618      	mov	r0, r3
   119d8:	371c      	adds	r7, #28
   119da:	46bd      	mov	sp, r7
   119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   119e0:	4770      	bx	lr
   119e2:	bf00      	nop

000119e4 <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
   119e4:	b480      	push	{r7}
   119e6:	b087      	sub	sp, #28
   119e8:	af00      	add	r7, sp, #0
   119ea:	60f8      	str	r0, [r7, #12]
   119ec:	60b9      	str	r1, [r7, #8]
   119ee:	607a      	str	r2, [r7, #4]
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
   119f0:	687b      	ldr	r3, [r7, #4]
   119f2:	617b      	str	r3, [r7, #20]
    o->base.type = &mp_type_polymorph_iter;
   119f4:	697b      	ldr	r3, [r7, #20]
   119f6:	4a09      	ldr	r2, [pc, #36]	; (11a1c <mp_obj_new_list_iterator+0x38>)
   119f8:	601a      	str	r2, [r3, #0]
    o->iternext = list_it_iternext;
   119fa:	697b      	ldr	r3, [r7, #20]
   119fc:	4a08      	ldr	r2, [pc, #32]	; (11a20 <mp_obj_new_list_iterator+0x3c>)
   119fe:	605a      	str	r2, [r3, #4]
    o->list = list;
   11a00:	697b      	ldr	r3, [r7, #20]
   11a02:	68fa      	ldr	r2, [r7, #12]
   11a04:	609a      	str	r2, [r3, #8]
    o->cur = cur;
   11a06:	697b      	ldr	r3, [r7, #20]
   11a08:	68ba      	ldr	r2, [r7, #8]
   11a0a:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11a0c:	697b      	ldr	r3, [r7, #20]
}
   11a0e:	4618      	mov	r0, r3
   11a10:	371c      	adds	r7, #28
   11a12:	46bd      	mov	sp, r7
   11a14:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a18:	4770      	bx	lr
   11a1a:	bf00      	nop
   11a1c:	00021400 	.word	0x00021400
   11a20:	00011999 	.word	0x00011999

00011a24 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   11a24:	b480      	push	{r7}
   11a26:	b083      	sub	sp, #12
   11a28:	af00      	add	r7, sp, #0
   11a2a:	6078      	str	r0, [r7, #4]
   11a2c:	687b      	ldr	r3, [r7, #4]
   11a2e:	f003 0303 	and.w	r3, r3, #3
   11a32:	2b00      	cmp	r3, #0
   11a34:	bf0c      	ite	eq
   11a36:	2301      	moveq	r3, #1
   11a38:	2300      	movne	r3, #0
   11a3a:	b2db      	uxtb	r3, r3
   11a3c:	4618      	mov	r0, r3
   11a3e:	370c      	adds	r7, #12
   11a40:	46bd      	mov	sp, r7
   11a42:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a46:	4770      	bx	lr

00011a48 <map_make_new>:
    size_t n_iters;
    mp_obj_t fun;
    mp_obj_t iters[];
} mp_obj_map_t;

STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11a48:	b580      	push	{r7, lr}
   11a4a:	b088      	sub	sp, #32
   11a4c:	af02      	add	r7, sp, #8
   11a4e:	60f8      	str	r0, [r7, #12]
   11a50:	60b9      	str	r1, [r7, #8]
   11a52:	607a      	str	r2, [r7, #4]
   11a54:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
   11a56:	2300      	movs	r3, #0
   11a58:	9300      	str	r3, [sp, #0]
   11a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a5e:	2202      	movs	r2, #2
   11a60:	6879      	ldr	r1, [r7, #4]
   11a62:	68b8      	ldr	r0, [r7, #8]
   11a64:	f7fb fabe 	bl	cfe4 <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
   11a68:	68bb      	ldr	r3, [r7, #8]
   11a6a:	3302      	adds	r3, #2
   11a6c:	009b      	lsls	r3, r3, #2
   11a6e:	4618      	mov	r0, r3
   11a70:	f7ee fc54 	bl	31c <m_malloc>
   11a74:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   11a76:	693b      	ldr	r3, [r7, #16]
   11a78:	68fa      	ldr	r2, [r7, #12]
   11a7a:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args - 1;
   11a7c:	68bb      	ldr	r3, [r7, #8]
   11a7e:	1e5a      	subs	r2, r3, #1
   11a80:	693b      	ldr	r3, [r7, #16]
   11a82:	605a      	str	r2, [r3, #4]
    o->fun = args[0];
   11a84:	683b      	ldr	r3, [r7, #0]
   11a86:	681a      	ldr	r2, [r3, #0]
   11a88:	693b      	ldr	r3, [r7, #16]
   11a8a:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
   11a8c:	2300      	movs	r3, #0
   11a8e:	617b      	str	r3, [r7, #20]
   11a90:	e013      	b.n	11aba <map_make_new+0x72>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
   11a92:	697b      	ldr	r3, [r7, #20]
   11a94:	3301      	adds	r3, #1
   11a96:	009b      	lsls	r3, r3, #2
   11a98:	683a      	ldr	r2, [r7, #0]
   11a9a:	4413      	add	r3, r2
   11a9c:	681b      	ldr	r3, [r3, #0]
   11a9e:	2100      	movs	r1, #0
   11aa0:	4618      	mov	r0, r3
   11aa2:	f7fa ff2b 	bl	c8fc <mp_getiter>
   11aa6:	4601      	mov	r1, r0
   11aa8:	693a      	ldr	r2, [r7, #16]
   11aaa:	697b      	ldr	r3, [r7, #20]
   11aac:	3302      	adds	r3, #2
   11aae:	009b      	lsls	r3, r3, #2
   11ab0:	4413      	add	r3, r2
   11ab2:	6059      	str	r1, [r3, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
   11ab4:	697b      	ldr	r3, [r7, #20]
   11ab6:	3301      	adds	r3, #1
   11ab8:	617b      	str	r3, [r7, #20]
   11aba:	68bb      	ldr	r3, [r7, #8]
   11abc:	1e5a      	subs	r2, r3, #1
   11abe:	697b      	ldr	r3, [r7, #20]
   11ac0:	429a      	cmp	r2, r3
   11ac2:	d8e6      	bhi.n	11a92 <map_make_new+0x4a>
    }
    return MP_OBJ_FROM_PTR(o);
   11ac4:	693b      	ldr	r3, [r7, #16]
}
   11ac6:	4618      	mov	r0, r3
   11ac8:	3718      	adds	r7, #24
   11aca:	46bd      	mov	sp, r7
   11acc:	bd80      	pop	{r7, pc}
   11ace:	bf00      	nop

00011ad0 <map_iternext>:

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
   11ad0:	b580      	push	{r7, lr}
   11ad2:	b086      	sub	sp, #24
   11ad4:	af00      	add	r7, sp, #0
   11ad6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
   11ad8:	6878      	ldr	r0, [r7, #4]
   11ada:	f7ff ffa3 	bl	11a24 <MP_OBJ_IS_OBJ>
   11ade:	4603      	mov	r3, r0
   11ae0:	f083 0301 	eor.w	r3, r3, #1
   11ae4:	b2db      	uxtb	r3, r3
   11ae6:	2b00      	cmp	r3, #0
   11ae8:	d104      	bne.n	11af4 <map_iternext+0x24>
   11aea:	687b      	ldr	r3, [r7, #4]
   11aec:	681b      	ldr	r3, [r3, #0]
   11aee:	4a21      	ldr	r2, [pc, #132]	; (11b74 <map_iternext+0xa4>)
   11af0:	4293      	cmp	r3, r2
   11af2:	d005      	beq.n	11b00 <map_iternext+0x30>
   11af4:	4b20      	ldr	r3, [pc, #128]	; (11b78 <map_iternext+0xa8>)
   11af6:	4a21      	ldr	r2, [pc, #132]	; (11b7c <map_iternext+0xac>)
   11af8:	2134      	movs	r1, #52	; 0x34
   11afa:	4821      	ldr	r0, [pc, #132]	; (11b80 <map_iternext+0xb0>)
   11afc:	f009 fc4e 	bl	1b39c <__assert_func>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
   11b00:	687b      	ldr	r3, [r7, #4]
   11b02:	613b      	str	r3, [r7, #16]
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
   11b04:	693b      	ldr	r3, [r7, #16]
   11b06:	685b      	ldr	r3, [r3, #4]
   11b08:	009b      	lsls	r3, r3, #2
   11b0a:	4618      	mov	r0, r3
   11b0c:	f7ee fc06 	bl	31c <m_malloc>
   11b10:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   11b12:	2300      	movs	r3, #0
   11b14:	617b      	str	r3, [r7, #20]
   11b16:	e01a      	b.n	11b4e <map_iternext+0x7e>
        mp_obj_t next = mp_iternext(self->iters[i]);
   11b18:	693a      	ldr	r2, [r7, #16]
   11b1a:	697b      	ldr	r3, [r7, #20]
   11b1c:	3302      	adds	r3, #2
   11b1e:	009b      	lsls	r3, r3, #2
   11b20:	4413      	add	r3, r2
   11b22:	685b      	ldr	r3, [r3, #4]
   11b24:	4618      	mov	r0, r3
   11b26:	f7fa ff6b 	bl	ca00 <mp_iternext>
   11b2a:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   11b2c:	68bb      	ldr	r3, [r7, #8]
   11b2e:	2b04      	cmp	r3, #4
   11b30:	d104      	bne.n	11b3c <map_iternext+0x6c>
            m_del(mp_obj_t, nextses, self->n_iters);
   11b32:	68f8      	ldr	r0, [r7, #12]
   11b34:	f7ee fc54 	bl	3e0 <m_free>
            return MP_OBJ_STOP_ITERATION;
   11b38:	2304      	movs	r3, #4
   11b3a:	e016      	b.n	11b6a <map_iternext+0x9a>
        }
        nextses[i] = next;
   11b3c:	697b      	ldr	r3, [r7, #20]
   11b3e:	009b      	lsls	r3, r3, #2
   11b40:	68fa      	ldr	r2, [r7, #12]
   11b42:	4413      	add	r3, r2
   11b44:	68ba      	ldr	r2, [r7, #8]
   11b46:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < self->n_iters; i++) {
   11b48:	697b      	ldr	r3, [r7, #20]
   11b4a:	3301      	adds	r3, #1
   11b4c:	617b      	str	r3, [r7, #20]
   11b4e:	693b      	ldr	r3, [r7, #16]
   11b50:	685a      	ldr	r2, [r3, #4]
   11b52:	697b      	ldr	r3, [r7, #20]
   11b54:	429a      	cmp	r2, r3
   11b56:	d8df      	bhi.n	11b18 <map_iternext+0x48>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
   11b58:	693b      	ldr	r3, [r7, #16]
   11b5a:	6898      	ldr	r0, [r3, #8]
   11b5c:	693b      	ldr	r3, [r7, #16]
   11b5e:	6859      	ldr	r1, [r3, #4]
   11b60:	68fb      	ldr	r3, [r7, #12]
   11b62:	2200      	movs	r2, #0
   11b64:	f7fa f956 	bl	be14 <mp_call_function_n_kw>
   11b68:	4603      	mov	r3, r0
}
   11b6a:	4618      	mov	r0, r3
   11b6c:	3718      	adds	r7, #24
   11b6e:	46bd      	mov	sp, r7
   11b70:	bd80      	pop	{r7, pc}
   11b72:	bf00      	nop
   11b74:	00021304 	.word	0x00021304
   11b78:	00021294 	.word	0x00021294
   11b7c:	00021340 	.word	0x00021340
   11b80:	000212f0 	.word	0x000212f0

00011b84 <mp_module_call_init>:
void mp_module_register(qstr qstr, mp_obj_t module);

#if MICROPY_MODULE_BUILTIN_INIT
void mp_module_call_init(qstr module_name, mp_obj_t module_obj);
#else
static inline void mp_module_call_init(qstr module_name, mp_obj_t module_obj) {
   11b84:	b480      	push	{r7}
   11b86:	b083      	sub	sp, #12
   11b88:	af00      	add	r7, sp, #0
   11b8a:	6078      	str	r0, [r7, #4]
   11b8c:	6039      	str	r1, [r7, #0]
    (void)module_name;
    (void)module_obj;
}
   11b8e:	bf00      	nop
   11b90:	370c      	adds	r7, #12
   11b92:	46bd      	mov	sp, r7
   11b94:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b98:	4770      	bx	lr
   11b9a:	bf00      	nop

00011b9c <module_print>:

#include "py/objmodule.h"
#include "py/runtime.h"
#include "py/builtin.h"

STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11b9c:	b580      	push	{r7, lr}
   11b9e:	b088      	sub	sp, #32
   11ba0:	af00      	add	r7, sp, #0
   11ba2:	60f8      	str	r0, [r7, #12]
   11ba4:	60b9      	str	r1, [r7, #8]
   11ba6:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11ba8:	68bb      	ldr	r3, [r7, #8]
   11baa:	61bb      	str	r3, [r7, #24]

    const char *module_name = "";
   11bac:	4b0e      	ldr	r3, [pc, #56]	; (11be8 <module_print+0x4c>)
   11bae:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
   11bb0:	69bb      	ldr	r3, [r7, #24]
   11bb2:	685b      	ldr	r3, [r3, #4]
   11bb4:	3304      	adds	r3, #4
   11bb6:	2200      	movs	r2, #0
   11bb8:	216e      	movs	r1, #110	; 0x6e
   11bba:	4618      	mov	r0, r3
   11bbc:	f7fb fc5c 	bl	d478 <mp_map_lookup>
   11bc0:	6178      	str	r0, [r7, #20]
    if (elem != NULL) {
   11bc2:	697b      	ldr	r3, [r7, #20]
   11bc4:	2b00      	cmp	r3, #0
   11bc6:	d005      	beq.n	11bd4 <module_print+0x38>
        module_name = mp_obj_str_get_str(elem->value);
   11bc8:	697b      	ldr	r3, [r7, #20]
   11bca:	685b      	ldr	r3, [r3, #4]
   11bcc:	4618      	mov	r0, r3
   11bce:	f003 fd0d 	bl	155ec <mp_obj_str_get_str>
   11bd2:	61f8      	str	r0, [r7, #28]
        mp_printf(print, "<module '%s' from '%s'>", module_name, mp_obj_str_get_str(elem->value));
        return;
    }
#endif

    mp_printf(print, "<module '%s'>", module_name);
   11bd4:	69fa      	ldr	r2, [r7, #28]
   11bd6:	4905      	ldr	r1, [pc, #20]	; (11bec <module_print+0x50>)
   11bd8:	68f8      	ldr	r0, [r7, #12]
   11bda:	f7f0 f971 	bl	1ec0 <mp_printf>
}
   11bde:	bf00      	nop
   11be0:	3720      	adds	r7, #32
   11be2:	46bd      	mov	sp, r7
   11be4:	bd80      	pop	{r7, pc}
   11be6:	bf00      	nop
   11be8:	00021350 	.word	0x00021350
   11bec:	00021354 	.word	0x00021354

00011bf0 <module_attr>:

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   11bf0:	b580      	push	{r7, lr}
   11bf2:	b088      	sub	sp, #32
   11bf4:	af00      	add	r7, sp, #0
   11bf6:	60f8      	str	r0, [r7, #12]
   11bf8:	60b9      	str	r1, [r7, #8]
   11bfa:	607a      	str	r2, [r7, #4]
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11bfc:	68fb      	ldr	r3, [r7, #12]
   11bfe:	61fb      	str	r3, [r7, #28]
    if (dest[0] == MP_OBJ_NULL) {
   11c00:	687b      	ldr	r3, [r7, #4]
   11c02:	681b      	ldr	r3, [r3, #0]
   11c04:	2b00      	cmp	r3, #0
   11c06:	d113      	bne.n	11c30 <module_attr+0x40>
        // load attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   11c08:	69fb      	ldr	r3, [r7, #28]
   11c0a:	685b      	ldr	r3, [r3, #4]
   11c0c:	1d18      	adds	r0, r3, #4
   11c0e:	68bb      	ldr	r3, [r7, #8]
   11c10:	009b      	lsls	r3, r3, #2
   11c12:	f043 0302 	orr.w	r3, r3, #2
   11c16:	2200      	movs	r2, #0
   11c18:	4619      	mov	r1, r3
   11c1a:	f7fb fc2d 	bl	d478 <mp_map_lookup>
   11c1e:	61b8      	str	r0, [r7, #24]
        if (elem != NULL) {
   11c20:	69bb      	ldr	r3, [r7, #24]
   11c22:	2b00      	cmp	r3, #0
   11c24:	d02d      	beq.n	11c82 <module_attr+0x92>
            dest[0] = elem->value;
   11c26:	69bb      	ldr	r3, [r7, #24]
   11c28:	685a      	ldr	r2, [r3, #4]
   11c2a:	687b      	ldr	r3, [r7, #4]
   11c2c:	601a      	str	r2, [r3, #0]
   11c2e:	e028      	b.n	11c82 <module_attr+0x92>
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
   11c30:	69fb      	ldr	r3, [r7, #28]
   11c32:	685b      	ldr	r3, [r3, #4]
   11c34:	617b      	str	r3, [r7, #20]
        if (dict->map.is_fixed) {
   11c36:	697b      	ldr	r3, [r7, #20]
   11c38:	791b      	ldrb	r3, [r3, #4]
   11c3a:	f003 0302 	and.w	r3, r3, #2
   11c3e:	b2db      	uxtb	r3, r3
   11c40:	2b00      	cmp	r3, #0
   11c42:	d11d      	bne.n	11c80 <module_attr+0x90>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
   11c44:	687b      	ldr	r3, [r7, #4]
   11c46:	3304      	adds	r3, #4
   11c48:	681b      	ldr	r3, [r3, #0]
   11c4a:	2b00      	cmp	r3, #0
   11c4c:	d108      	bne.n	11c60 <module_attr+0x70>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
   11c4e:	68bb      	ldr	r3, [r7, #8]
   11c50:	009b      	lsls	r3, r3, #2
   11c52:	f043 0302 	orr.w	r3, r3, #2
   11c56:	4619      	mov	r1, r3
   11c58:	6978      	ldr	r0, [r7, #20]
   11c5a:	f7fd faa5 	bl	f1a8 <mp_obj_dict_delete>
   11c5e:	e00b      	b.n	11c78 <module_attr+0x88>
        } else {
            // store attribute
            // TODO CPython allows STORE_ATTR to a module, but is this the correct implementation?
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
   11c60:	68bb      	ldr	r3, [r7, #8]
   11c62:	009b      	lsls	r3, r3, #2
   11c64:	f043 0302 	orr.w	r3, r3, #2
   11c68:	4619      	mov	r1, r3
   11c6a:	687b      	ldr	r3, [r7, #4]
   11c6c:	3304      	adds	r3, #4
   11c6e:	681b      	ldr	r3, [r3, #0]
   11c70:	461a      	mov	r2, r3
   11c72:	6978      	ldr	r0, [r7, #20]
   11c74:	f7fd fa60 	bl	f138 <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
   11c78:	687b      	ldr	r3, [r7, #4]
   11c7a:	2200      	movs	r2, #0
   11c7c:	601a      	str	r2, [r3, #0]
   11c7e:	e000      	b.n	11c82 <module_attr+0x92>
                return;
   11c80:	bf00      	nop
    }
}
   11c82:	3720      	adds	r7, #32
   11c84:	46bd      	mov	sp, r7
   11c86:	bd80      	pop	{r7, pc}

00011c88 <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
   11c88:	b580      	push	{r7, lr}
   11c8a:	b086      	sub	sp, #24
   11c8c:	af00      	add	r7, sp, #0
   11c8e:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11c90:	4b18      	ldr	r3, [pc, #96]	; (11cf4 <mp_obj_new_module+0x6c>)
   11c92:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   11c94:	687b      	ldr	r3, [r7, #4]
   11c96:	009b      	lsls	r3, r3, #2
   11c98:	f043 0302 	orr.w	r3, r3, #2
   11c9c:	2201      	movs	r2, #1
   11c9e:	4619      	mov	r1, r3
   11ca0:	6978      	ldr	r0, [r7, #20]
   11ca2:	f7fb fbe9 	bl	d478 <mp_map_lookup>
   11ca6:	6138      	str	r0, [r7, #16]
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
   11ca8:	693b      	ldr	r3, [r7, #16]
   11caa:	685b      	ldr	r3, [r3, #4]
   11cac:	2b00      	cmp	r3, #0
   11cae:	d002      	beq.n	11cb6 <mp_obj_new_module+0x2e>
        return el->value;
   11cb0:	693b      	ldr	r3, [r7, #16]
   11cb2:	685b      	ldr	r3, [r3, #4]
   11cb4:	e01a      	b.n	11cec <mp_obj_new_module+0x64>
    }

    // create new module object
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
   11cb6:	2008      	movs	r0, #8
   11cb8:	f7ee fb30 	bl	31c <m_malloc>
   11cbc:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_module;
   11cbe:	68fb      	ldr	r3, [r7, #12]
   11cc0:	4a0d      	ldr	r2, [pc, #52]	; (11cf8 <mp_obj_new_module+0x70>)
   11cc2:	601a      	str	r2, [r3, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
   11cc4:	2001      	movs	r0, #1
   11cc6:	f7fd fa15 	bl	f0f4 <mp_obj_new_dict>
   11cca:	4602      	mov	r2, r0
   11ccc:	68fb      	ldr	r3, [r7, #12]
   11cce:	605a      	str	r2, [r3, #4]

    // store __name__ entry in the module
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
   11cd0:	68fb      	ldr	r3, [r7, #12]
   11cd2:	6858      	ldr	r0, [r3, #4]
   11cd4:	687b      	ldr	r3, [r7, #4]
   11cd6:	009b      	lsls	r3, r3, #2
   11cd8:	f043 0302 	orr.w	r3, r3, #2
   11cdc:	461a      	mov	r2, r3
   11cde:	216e      	movs	r1, #110	; 0x6e
   11ce0:	f7fd fa2a 	bl	f138 <mp_obj_dict_store>

    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);
   11ce4:	693b      	ldr	r3, [r7, #16]
   11ce6:	68fa      	ldr	r2, [r7, #12]
   11ce8:	605a      	str	r2, [r3, #4]

    // return the new module
    return MP_OBJ_FROM_PTR(o);
   11cea:	68fb      	ldr	r3, [r7, #12]
}
   11cec:	4618      	mov	r0, r3
   11cee:	3718      	adds	r7, #24
   11cf0:	46bd      	mov	sp, r7
   11cf2:	bd80      	pop	{r7, pc}
   11cf4:	20000a68 	.word	0x20000a68
   11cf8:	00021364 	.word	0x00021364

00011cfc <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
   11cfc:	b580      	push	{r7, lr}
   11cfe:	b084      	sub	sp, #16
   11d00:	af00      	add	r7, sp, #0
   11d02:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11d04:	4b14      	ldr	r3, [pc, #80]	; (11d58 <mp_module_get+0x5c>)
   11d06:	60bb      	str	r3, [r7, #8]
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11d08:	687b      	ldr	r3, [r7, #4]
   11d0a:	009b      	lsls	r3, r3, #2
   11d0c:	f043 0302 	orr.w	r3, r3, #2
   11d10:	2200      	movs	r2, #0
   11d12:	4619      	mov	r1, r3
   11d14:	68b8      	ldr	r0, [r7, #8]
   11d16:	f7fb fbaf 	bl	d478 <mp_map_lookup>
   11d1a:	60f8      	str	r0, [r7, #12]

    if (el == NULL) {
   11d1c:	68fb      	ldr	r3, [r7, #12]
   11d1e:	2b00      	cmp	r3, #0
   11d20:	d114      	bne.n	11d4c <mp_module_get+0x50>
        // module not found, look for builtin module names
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11d22:	687b      	ldr	r3, [r7, #4]
   11d24:	009b      	lsls	r3, r3, #2
   11d26:	f043 0302 	orr.w	r3, r3, #2
   11d2a:	2200      	movs	r2, #0
   11d2c:	4619      	mov	r1, r3
   11d2e:	480b      	ldr	r0, [pc, #44]	; (11d5c <mp_module_get+0x60>)
   11d30:	f7fb fba2 	bl	d478 <mp_map_lookup>
   11d34:	60f8      	str	r0, [r7, #12]
        if (el == NULL) {
   11d36:	68fb      	ldr	r3, [r7, #12]
   11d38:	2b00      	cmp	r3, #0
   11d3a:	d101      	bne.n	11d40 <mp_module_get+0x44>
            return MP_OBJ_NULL;
   11d3c:	2300      	movs	r3, #0
   11d3e:	e007      	b.n	11d50 <mp_module_get+0x54>
        }
        mp_module_call_init(module_name, el->value);
   11d40:	68fb      	ldr	r3, [r7, #12]
   11d42:	685b      	ldr	r3, [r3, #4]
   11d44:	4619      	mov	r1, r3
   11d46:	6878      	ldr	r0, [r7, #4]
   11d48:	f7ff ff1c 	bl	11b84 <mp_module_call_init>
    }

    // module found, return it
    return el->value;
   11d4c:	68fb      	ldr	r3, [r7, #12]
   11d4e:	685b      	ldr	r3, [r3, #4]
}
   11d50:	4618      	mov	r0, r3
   11d52:	3710      	adds	r7, #16
   11d54:	46bd      	mov	sp, r7
   11d56:	bd80      	pop	{r7, pc}
   11d58:	20000a68 	.word	0x20000a68
   11d5c:	000213b8 	.word	0x000213b8

00011d60 <mp_module_register>:

void mp_module_register(qstr qst, mp_obj_t module) {
   11d60:	b580      	push	{r7, lr}
   11d62:	b084      	sub	sp, #16
   11d64:	af00      	add	r7, sp, #0
   11d66:	6078      	str	r0, [r7, #4]
   11d68:	6039      	str	r1, [r7, #0]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11d6a:	4b09      	ldr	r3, [pc, #36]	; (11d90 <mp_module_register+0x30>)
   11d6c:	60fb      	str	r3, [r7, #12]
    mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = module;
   11d6e:	687b      	ldr	r3, [r7, #4]
   11d70:	009b      	lsls	r3, r3, #2
   11d72:	f043 0302 	orr.w	r3, r3, #2
   11d76:	2201      	movs	r2, #1
   11d78:	4619      	mov	r1, r3
   11d7a:	68f8      	ldr	r0, [r7, #12]
   11d7c:	f7fb fb7c 	bl	d478 <mp_map_lookup>
   11d80:	4602      	mov	r2, r0
   11d82:	683b      	ldr	r3, [r7, #0]
   11d84:	6053      	str	r3, [r2, #4]
}
   11d86:	bf00      	nop
   11d88:	3710      	adds	r7, #16
   11d8a:	46bd      	mov	sp, r7
   11d8c:	bd80      	pop	{r7, pc}
   11d8e:	bf00      	nop
   11d90:	20000a68 	.word	0x20000a68

00011d94 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11d94:	b580      	push	{r7, lr}
   11d96:	b088      	sub	sp, #32
   11d98:	af02      	add	r7, sp, #8
   11d9a:	60f8      	str	r0, [r7, #12]
   11d9c:	60b9      	str	r1, [r7, #8]
   11d9e:	607a      	str	r2, [r7, #4]
   11da0:	603b      	str	r3, [r7, #0]
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   11da2:	2300      	movs	r3, #0
   11da4:	9300      	str	r3, [sp, #0]
   11da6:	2300      	movs	r3, #0
   11da8:	2200      	movs	r2, #0
   11daa:	6879      	ldr	r1, [r7, #4]
   11dac:	68b8      	ldr	r0, [r7, #8]
   11dae:	f7fb f919 	bl	cfe4 <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
   11db2:	2004      	movs	r0, #4
   11db4:	f7ee fab2 	bl	31c <m_malloc>
   11db8:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11dba:	697b      	ldr	r3, [r7, #20]
   11dbc:	68fa      	ldr	r2, [r7, #12]
   11dbe:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   11dc0:	697b      	ldr	r3, [r7, #20]
}
   11dc2:	4618      	mov	r0, r3
   11dc4:	3718      	adds	r7, #24
   11dc6:	46bd      	mov	sp, r7
   11dc8:	bd80      	pop	{r7, pc}
   11dca:	bf00      	nop

00011dcc <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
   11dcc:	b580      	push	{r7, lr}
   11dce:	b084      	sub	sp, #16
   11dd0:	af00      	add	r7, sp, #0
   11dd2:	6078      	str	r0, [r7, #4]
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
   11dd4:	687b      	ldr	r3, [r7, #4]
   11dd6:	60fb      	str	r3, [r7, #12]
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
   11dd8:	68fb      	ldr	r3, [r7, #12]
   11dda:	685b      	ldr	r3, [r3, #4]
   11ddc:	6878      	ldr	r0, [r7, #4]
   11dde:	4798      	blx	r3
   11de0:	4603      	mov	r3, r0
}
   11de2:	4618      	mov	r0, r3
   11de4:	3710      	adds	r7, #16
   11de6:	46bd      	mov	sp, r7
   11de8:	bd80      	pop	{r7, pc}
   11dea:	bf00      	nop

00011dec <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11dec:	b580      	push	{r7, lr}
   11dee:	b084      	sub	sp, #16
   11df0:	af00      	add	r7, sp, #0
   11df2:	60f8      	str	r0, [r7, #12]
   11df4:	60b9      	str	r1, [r7, #8]
   11df6:	607a      	str	r2, [r7, #4]
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
   11df8:	4903      	ldr	r1, [pc, #12]	; (11e08 <none_print+0x1c>)
   11dfa:	68f8      	ldr	r0, [r7, #12]
   11dfc:	f7ef fd4c 	bl	1898 <mp_print_str>
    }
}
   11e00:	bf00      	nop
   11e02:	3710      	adds	r7, #16
   11e04:	46bd      	mov	sp, r7
   11e06:	bd80      	pop	{r7, pc}
   11e08:	0002143c 	.word	0x0002143c

00011e0c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   11e0c:	b480      	push	{r7}
   11e0e:	b083      	sub	sp, #12
   11e10:	af00      	add	r7, sp, #0
   11e12:	6078      	str	r0, [r7, #4]
   11e14:	687b      	ldr	r3, [r7, #4]
   11e16:	2b00      	cmp	r3, #0
   11e18:	d001      	beq.n	11e1e <mp_obj_new_bool+0x12>
   11e1a:	4b04      	ldr	r3, [pc, #16]	; (11e2c <mp_obj_new_bool+0x20>)
   11e1c:	e000      	b.n	11e20 <mp_obj_new_bool+0x14>
   11e1e:	4b04      	ldr	r3, [pc, #16]	; (11e30 <mp_obj_new_bool+0x24>)
   11e20:	4618      	mov	r0, r3
   11e22:	370c      	adds	r7, #12
   11e24:	46bd      	mov	sp, r7
   11e26:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e2a:	4770      	bx	lr
   11e2c:	0001fc3c 	.word	0x0001fc3c
   11e30:	0001fc34 	.word	0x0001fc34

00011e34 <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
   11e34:	b480      	push	{r7}
   11e36:	b085      	sub	sp, #20
   11e38:	af00      	add	r7, sp, #0
   11e3a:	6078      	str	r0, [r7, #4]
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
   11e3c:	687b      	ldr	r3, [r7, #4]
   11e3e:	60fb      	str	r3, [r7, #12]
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
   11e40:	68fb      	ldr	r3, [r7, #12]
   11e42:	68db      	ldr	r3, [r3, #12]
   11e44:	2b00      	cmp	r3, #0
   11e46:	dd05      	ble.n	11e54 <range_it_iternext+0x20>
   11e48:	68fb      	ldr	r3, [r7, #12]
   11e4a:	685a      	ldr	r2, [r3, #4]
   11e4c:	68fb      	ldr	r3, [r7, #12]
   11e4e:	689b      	ldr	r3, [r3, #8]
   11e50:	429a      	cmp	r2, r3
   11e52:	db09      	blt.n	11e68 <range_it_iternext+0x34>
   11e54:	68fb      	ldr	r3, [r7, #12]
   11e56:	68db      	ldr	r3, [r3, #12]
   11e58:	2b00      	cmp	r3, #0
   11e5a:	da14      	bge.n	11e86 <range_it_iternext+0x52>
   11e5c:	68fb      	ldr	r3, [r7, #12]
   11e5e:	685a      	ldr	r2, [r3, #4]
   11e60:	68fb      	ldr	r3, [r7, #12]
   11e62:	689b      	ldr	r3, [r3, #8]
   11e64:	429a      	cmp	r2, r3
   11e66:	dd0e      	ble.n	11e86 <range_it_iternext+0x52>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
   11e68:	68fb      	ldr	r3, [r7, #12]
   11e6a:	685b      	ldr	r3, [r3, #4]
   11e6c:	005b      	lsls	r3, r3, #1
   11e6e:	f043 0301 	orr.w	r3, r3, #1
   11e72:	60bb      	str	r3, [r7, #8]
        o->cur += o->step;
   11e74:	68fb      	ldr	r3, [r7, #12]
   11e76:	685a      	ldr	r2, [r3, #4]
   11e78:	68fb      	ldr	r3, [r7, #12]
   11e7a:	68db      	ldr	r3, [r3, #12]
   11e7c:	441a      	add	r2, r3
   11e7e:	68fb      	ldr	r3, [r7, #12]
   11e80:	605a      	str	r2, [r3, #4]
        return o_out;
   11e82:	68bb      	ldr	r3, [r7, #8]
   11e84:	e000      	b.n	11e88 <range_it_iternext+0x54>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11e86:	2304      	movs	r3, #4
    }
}
   11e88:	4618      	mov	r0, r3
   11e8a:	3714      	adds	r7, #20
   11e8c:	46bd      	mov	sp, r7
   11e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e92:	4770      	bx	lr

00011e94 <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
   11e94:	b480      	push	{r7}
   11e96:	b087      	sub	sp, #28
   11e98:	af00      	add	r7, sp, #0
   11e9a:	60f8      	str	r0, [r7, #12]
   11e9c:	60b9      	str	r1, [r7, #8]
   11e9e:	607a      	str	r2, [r7, #4]
   11ea0:	603b      	str	r3, [r7, #0]
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
   11ea2:	683b      	ldr	r3, [r7, #0]
   11ea4:	617b      	str	r3, [r7, #20]
    o->base.type = &range_it_type;
   11ea6:	697b      	ldr	r3, [r7, #20]
   11ea8:	4a08      	ldr	r2, [pc, #32]	; (11ecc <mp_obj_new_range_iterator+0x38>)
   11eaa:	601a      	str	r2, [r3, #0]
    o->cur = cur;
   11eac:	697b      	ldr	r3, [r7, #20]
   11eae:	68fa      	ldr	r2, [r7, #12]
   11eb0:	605a      	str	r2, [r3, #4]
    o->stop = stop;
   11eb2:	697b      	ldr	r3, [r7, #20]
   11eb4:	68ba      	ldr	r2, [r7, #8]
   11eb6:	609a      	str	r2, [r3, #8]
    o->step = step;
   11eb8:	697b      	ldr	r3, [r7, #20]
   11eba:	687a      	ldr	r2, [r7, #4]
   11ebc:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11ebe:	697b      	ldr	r3, [r7, #20]
}
   11ec0:	4618      	mov	r0, r3
   11ec2:	371c      	adds	r7, #28
   11ec4:	46bd      	mov	sp, r7
   11ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
   11eca:	4770      	bx	lr
   11ecc:	00021484 	.word	0x00021484

00011ed0 <range_print>:
    mp_int_t start;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_t;

STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11ed0:	b580      	push	{r7, lr}
   11ed2:	b086      	sub	sp, #24
   11ed4:	af00      	add	r7, sp, #0
   11ed6:	60f8      	str	r0, [r7, #12]
   11ed8:	60b9      	str	r1, [r7, #8]
   11eda:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11edc:	68bb      	ldr	r3, [r7, #8]
   11ede:	617b      	str	r3, [r7, #20]
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
   11ee0:	697b      	ldr	r3, [r7, #20]
   11ee2:	685a      	ldr	r2, [r3, #4]
   11ee4:	697b      	ldr	r3, [r7, #20]
   11ee6:	689b      	ldr	r3, [r3, #8]
   11ee8:	490b      	ldr	r1, [pc, #44]	; (11f18 <range_print+0x48>)
   11eea:	68f8      	ldr	r0, [r7, #12]
   11eec:	f7ef ffe8 	bl	1ec0 <mp_printf>
    if (self->step == 1) {
   11ef0:	697b      	ldr	r3, [r7, #20]
   11ef2:	68db      	ldr	r3, [r3, #12]
   11ef4:	2b01      	cmp	r3, #1
   11ef6:	d104      	bne.n	11f02 <range_print+0x32>
        mp_print_str(print, ")");
   11ef8:	4908      	ldr	r1, [pc, #32]	; (11f1c <range_print+0x4c>)
   11efa:	68f8      	ldr	r0, [r7, #12]
   11efc:	f7ef fccc 	bl	1898 <mp_print_str>
    } else {
        mp_printf(print, ", " INT_FMT ")", self->step);
    }
}
   11f00:	e006      	b.n	11f10 <range_print+0x40>
        mp_printf(print, ", " INT_FMT ")", self->step);
   11f02:	697b      	ldr	r3, [r7, #20]
   11f04:	68db      	ldr	r3, [r3, #12]
   11f06:	461a      	mov	r2, r3
   11f08:	4905      	ldr	r1, [pc, #20]	; (11f20 <range_print+0x50>)
   11f0a:	68f8      	ldr	r0, [r7, #12]
   11f0c:	f7ef ffd8 	bl	1ec0 <mp_printf>
}
   11f10:	bf00      	nop
   11f12:	3718      	adds	r7, #24
   11f14:	46bd      	mov	sp, r7
   11f16:	bd80      	pop	{r7, pc}
   11f18:	000214c0 	.word	0x000214c0
   11f1c:	000214d0 	.word	0x000214d0
   11f20:	000214d4 	.word	0x000214d4

00011f24 <range_make_new>:

STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11f24:	b580      	push	{r7, lr}
   11f26:	b088      	sub	sp, #32
   11f28:	af02      	add	r7, sp, #8
   11f2a:	60f8      	str	r0, [r7, #12]
   11f2c:	60b9      	str	r1, [r7, #8]
   11f2e:	607a      	str	r2, [r7, #4]
   11f30:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   11f32:	2300      	movs	r3, #0
   11f34:	9300      	str	r3, [sp, #0]
   11f36:	2303      	movs	r3, #3
   11f38:	2201      	movs	r2, #1
   11f3a:	6879      	ldr	r1, [r7, #4]
   11f3c:	68b8      	ldr	r0, [r7, #8]
   11f3e:	f7fb f851 	bl	cfe4 <mp_arg_check_num>

    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
   11f42:	2010      	movs	r0, #16
   11f44:	f7ee f9ea 	bl	31c <m_malloc>
   11f48:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11f4a:	697b      	ldr	r3, [r7, #20]
   11f4c:	68fa      	ldr	r2, [r7, #12]
   11f4e:	601a      	str	r2, [r3, #0]
    o->start = 0;
   11f50:	697b      	ldr	r3, [r7, #20]
   11f52:	2200      	movs	r2, #0
   11f54:	605a      	str	r2, [r3, #4]
    o->step = 1;
   11f56:	697b      	ldr	r3, [r7, #20]
   11f58:	2201      	movs	r2, #1
   11f5a:	60da      	str	r2, [r3, #12]

    if (n_args == 1) {
   11f5c:	68bb      	ldr	r3, [r7, #8]
   11f5e:	2b01      	cmp	r3, #1
   11f60:	d108      	bne.n	11f74 <range_make_new+0x50>
        o->stop = mp_obj_get_int(args[0]);
   11f62:	683b      	ldr	r3, [r7, #0]
   11f64:	681b      	ldr	r3, [r3, #0]
   11f66:	4618      	mov	r0, r3
   11f68:	f7fb fe0e 	bl	db88 <mp_obj_get_int>
   11f6c:	4602      	mov	r2, r0
   11f6e:	697b      	ldr	r3, [r7, #20]
   11f70:	609a      	str	r2, [r3, #8]
   11f72:	e023      	b.n	11fbc <range_make_new+0x98>
    } else {
        o->start = mp_obj_get_int(args[0]);
   11f74:	683b      	ldr	r3, [r7, #0]
   11f76:	681b      	ldr	r3, [r3, #0]
   11f78:	4618      	mov	r0, r3
   11f7a:	f7fb fe05 	bl	db88 <mp_obj_get_int>
   11f7e:	4602      	mov	r2, r0
   11f80:	697b      	ldr	r3, [r7, #20]
   11f82:	605a      	str	r2, [r3, #4]
        o->stop = mp_obj_get_int(args[1]);
   11f84:	683b      	ldr	r3, [r7, #0]
   11f86:	3304      	adds	r3, #4
   11f88:	681b      	ldr	r3, [r3, #0]
   11f8a:	4618      	mov	r0, r3
   11f8c:	f7fb fdfc 	bl	db88 <mp_obj_get_int>
   11f90:	4602      	mov	r2, r0
   11f92:	697b      	ldr	r3, [r7, #20]
   11f94:	609a      	str	r2, [r3, #8]
        if (n_args == 3) {
   11f96:	68bb      	ldr	r3, [r7, #8]
   11f98:	2b03      	cmp	r3, #3
   11f9a:	d10f      	bne.n	11fbc <range_make_new+0x98>
            o->step = mp_obj_get_int(args[2]);
   11f9c:	683b      	ldr	r3, [r7, #0]
   11f9e:	3308      	adds	r3, #8
   11fa0:	681b      	ldr	r3, [r3, #0]
   11fa2:	4618      	mov	r0, r3
   11fa4:	f7fb fdf0 	bl	db88 <mp_obj_get_int>
   11fa8:	4602      	mov	r2, r0
   11faa:	697b      	ldr	r3, [r7, #20]
   11fac:	60da      	str	r2, [r3, #12]
            if (o->step == 0) {
   11fae:	697b      	ldr	r3, [r7, #20]
   11fb0:	68db      	ldr	r3, [r3, #12]
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d102      	bne.n	11fbc <range_make_new+0x98>
                mp_raise_ValueError("zero step");
   11fb6:	4804      	ldr	r0, [pc, #16]	; (11fc8 <range_make_new+0xa4>)
   11fb8:	f7fa ffe4 	bl	cf84 <mp_raise_ValueError>
            }
        }
    }

    return MP_OBJ_FROM_PTR(o);
   11fbc:	697b      	ldr	r3, [r7, #20]
}
   11fbe:	4618      	mov	r0, r3
   11fc0:	3718      	adds	r7, #24
   11fc2:	46bd      	mov	sp, r7
   11fc4:	bd80      	pop	{r7, pc}
   11fc6:	bf00      	nop
   11fc8:	000214dc 	.word	0x000214dc

00011fcc <range_len>:

STATIC mp_int_t range_len(mp_obj_range_t *self) {
   11fcc:	b480      	push	{r7}
   11fce:	b085      	sub	sp, #20
   11fd0:	af00      	add	r7, sp, #0
   11fd2:	6078      	str	r0, [r7, #4]
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
   11fd4:	687b      	ldr	r3, [r7, #4]
   11fd6:	689a      	ldr	r2, [r3, #8]
   11fd8:	687b      	ldr	r3, [r7, #4]
   11fda:	685b      	ldr	r3, [r3, #4]
   11fdc:	1ad2      	subs	r2, r2, r3
   11fde:	687b      	ldr	r3, [r7, #4]
   11fe0:	68db      	ldr	r3, [r3, #12]
   11fe2:	4413      	add	r3, r2
   11fe4:	60fb      	str	r3, [r7, #12]
    if (self->step > 0) {
   11fe6:	687b      	ldr	r3, [r7, #4]
   11fe8:	68db      	ldr	r3, [r3, #12]
   11fea:	2b00      	cmp	r3, #0
   11fec:	dd03      	ble.n	11ff6 <range_len+0x2a>
        len -= 1;
   11fee:	68fb      	ldr	r3, [r7, #12]
   11ff0:	3b01      	subs	r3, #1
   11ff2:	60fb      	str	r3, [r7, #12]
   11ff4:	e002      	b.n	11ffc <range_len+0x30>
    } else {
        len += 1;
   11ff6:	68fb      	ldr	r3, [r7, #12]
   11ff8:	3301      	adds	r3, #1
   11ffa:	60fb      	str	r3, [r7, #12]
    }
    len = len / self->step;
   11ffc:	687b      	ldr	r3, [r7, #4]
   11ffe:	68db      	ldr	r3, [r3, #12]
   12000:	68fa      	ldr	r2, [r7, #12]
   12002:	fb92 f3f3 	sdiv	r3, r2, r3
   12006:	60fb      	str	r3, [r7, #12]
    if (len < 0) {
   12008:	68fb      	ldr	r3, [r7, #12]
   1200a:	2b00      	cmp	r3, #0
   1200c:	da01      	bge.n	12012 <range_len+0x46>
        len = 0;
   1200e:	2300      	movs	r3, #0
   12010:	60fb      	str	r3, [r7, #12]
    }
    return len;
   12012:	68fb      	ldr	r3, [r7, #12]
}
   12014:	4618      	mov	r0, r3
   12016:	3714      	adds	r7, #20
   12018:	46bd      	mov	sp, r7
   1201a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1201e:	4770      	bx	lr

00012020 <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   12020:	b580      	push	{r7, lr}
   12022:	b084      	sub	sp, #16
   12024:	af00      	add	r7, sp, #0
   12026:	6078      	str	r0, [r7, #4]
   12028:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   1202a:	683b      	ldr	r3, [r7, #0]
   1202c:	60fb      	str	r3, [r7, #12]
    mp_int_t len = range_len(self);
   1202e:	68f8      	ldr	r0, [r7, #12]
   12030:	f7ff ffcc 	bl	11fcc <range_len>
   12034:	60b8      	str	r0, [r7, #8]
    switch (op) {
   12036:	687b      	ldr	r3, [r7, #4]
   12038:	2b04      	cmp	r3, #4
   1203a:	d002      	beq.n	12042 <range_unary_op+0x22>
   1203c:	2b05      	cmp	r3, #5
   1203e:	d00b      	beq.n	12058 <range_unary_op+0x38>
   12040:	e00f      	b.n	12062 <range_unary_op+0x42>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
   12042:	68bb      	ldr	r3, [r7, #8]
   12044:	2b00      	cmp	r3, #0
   12046:	bfcc      	ite	gt
   12048:	2301      	movgt	r3, #1
   1204a:	2300      	movle	r3, #0
   1204c:	b2db      	uxtb	r3, r3
   1204e:	4618      	mov	r0, r3
   12050:	f7ff fedc 	bl	11e0c <mp_obj_new_bool>
   12054:	4603      	mov	r3, r0
   12056:	e005      	b.n	12064 <range_unary_op+0x44>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
   12058:	68bb      	ldr	r3, [r7, #8]
   1205a:	005b      	lsls	r3, r3, #1
   1205c:	f043 0301 	orr.w	r3, r3, #1
   12060:	e000      	b.n	12064 <range_unary_op+0x44>
        default: return MP_OBJ_NULL; // op not supported
   12062:	2300      	movs	r3, #0
    }
}
   12064:	4618      	mov	r0, r3
   12066:	3710      	adds	r7, #16
   12068:	46bd      	mov	sp, r7
   1206a:	bd80      	pop	{r7, pc}

0001206c <range_subscr>:
                && (lhs_len == 1 || lhs->step == rhs->step)))
    );
}
#endif

STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   1206c:	b580      	push	{r7, lr}
   1206e:	b088      	sub	sp, #32
   12070:	af00      	add	r7, sp, #0
   12072:	60f8      	str	r0, [r7, #12]
   12074:	60b9      	str	r1, [r7, #8]
   12076:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   12078:	687b      	ldr	r3, [r7, #4]
   1207a:	2b08      	cmp	r3, #8
   1207c:	d11b      	bne.n	120b6 <range_subscr+0x4a>
        // load
        mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   1207e:	68fb      	ldr	r3, [r7, #12]
   12080:	61fb      	str	r3, [r7, #28]
        mp_int_t len = range_len(self);
   12082:	69f8      	ldr	r0, [r7, #28]
   12084:	f7ff ffa2 	bl	11fcc <range_len>
   12088:	61b8      	str	r0, [r7, #24]
                o->stop -= self->step;
            }
            return MP_OBJ_FROM_PTR(o);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, len, index, false);
   1208a:	69fb      	ldr	r3, [r7, #28]
   1208c:	6818      	ldr	r0, [r3, #0]
   1208e:	69b9      	ldr	r1, [r7, #24]
   12090:	2300      	movs	r3, #0
   12092:	68ba      	ldr	r2, [r7, #8]
   12094:	f7fb fe64 	bl	dd60 <mp_get_index>
   12098:	6178      	str	r0, [r7, #20]
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
   1209a:	69fb      	ldr	r3, [r7, #28]
   1209c:	685b      	ldr	r3, [r3, #4]
   1209e:	461a      	mov	r2, r3
   120a0:	69fb      	ldr	r3, [r7, #28]
   120a2:	68db      	ldr	r3, [r3, #12]
   120a4:	4619      	mov	r1, r3
   120a6:	697b      	ldr	r3, [r7, #20]
   120a8:	fb03 f301 	mul.w	r3, r3, r1
   120ac:	4413      	add	r3, r2
   120ae:	005b      	lsls	r3, r3, #1
   120b0:	f043 0301 	orr.w	r3, r3, #1
   120b4:	e000      	b.n	120b8 <range_subscr+0x4c>
    } else {
        return MP_OBJ_NULL; // op not supported
   120b6:	2300      	movs	r3, #0
    }
}
   120b8:	4618      	mov	r0, r3
   120ba:	3720      	adds	r7, #32
   120bc:	46bd      	mov	sp, r7
   120be:	bd80      	pop	{r7, pc}

000120c0 <range_getiter>:

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   120c0:	b580      	push	{r7, lr}
   120c2:	b084      	sub	sp, #16
   120c4:	af00      	add	r7, sp, #0
   120c6:	6078      	str	r0, [r7, #4]
   120c8:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   120ca:	687b      	ldr	r3, [r7, #4]
   120cc:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
   120ce:	68fb      	ldr	r3, [r7, #12]
   120d0:	6858      	ldr	r0, [r3, #4]
   120d2:	68fb      	ldr	r3, [r7, #12]
   120d4:	6899      	ldr	r1, [r3, #8]
   120d6:	68fb      	ldr	r3, [r7, #12]
   120d8:	68da      	ldr	r2, [r3, #12]
   120da:	683b      	ldr	r3, [r7, #0]
   120dc:	f7ff feda 	bl	11e94 <mp_obj_new_range_iterator>
   120e0:	4603      	mov	r3, r0
}
   120e2:	4618      	mov	r0, r3
   120e4:	3710      	adds	r7, #16
   120e6:	46bd      	mov	sp, r7
   120e8:	bd80      	pop	{r7, pc}
   120ea:	bf00      	nop

000120ec <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
   120ec:	b580      	push	{r7, lr}
   120ee:	b086      	sub	sp, #24
   120f0:	af00      	add	r7, sp, #0
   120f2:	60f8      	str	r0, [r7, #12]
   120f4:	60b9      	str	r1, [r7, #8]
   120f6:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   120f8:	687b      	ldr	r3, [r7, #4]
   120fa:	681b      	ldr	r3, [r3, #0]
   120fc:	2b00      	cmp	r3, #0
   120fe:	d125      	bne.n	1214c <range_attr+0x60>
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   12100:	68fb      	ldr	r3, [r7, #12]
   12102:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_start) {
   12104:	68bb      	ldr	r3, [r7, #8]
   12106:	2bcf      	cmp	r3, #207	; 0xcf
   12108:	d108      	bne.n	1211c <range_attr+0x30>
        dest[0] = mp_obj_new_int(o->start);
   1210a:	697b      	ldr	r3, [r7, #20]
   1210c:	685b      	ldr	r3, [r3, #4]
   1210e:	4618      	mov	r0, r3
   12110:	f7fe fc30 	bl	10974 <mp_obj_new_int>
   12114:	4602      	mov	r2, r0
   12116:	687b      	ldr	r3, [r7, #4]
   12118:	601a      	str	r2, [r3, #0]
   1211a:	e018      	b.n	1214e <range_attr+0x62>
    } else if (attr == MP_QSTR_stop) {
   1211c:	68bb      	ldr	r3, [r7, #8]
   1211e:	2bd3      	cmp	r3, #211	; 0xd3
   12120:	d108      	bne.n	12134 <range_attr+0x48>
        dest[0] = mp_obj_new_int(o->stop);
   12122:	697b      	ldr	r3, [r7, #20]
   12124:	689b      	ldr	r3, [r3, #8]
   12126:	4618      	mov	r0, r3
   12128:	f7fe fc24 	bl	10974 <mp_obj_new_int>
   1212c:	4602      	mov	r2, r0
   1212e:	687b      	ldr	r3, [r7, #4]
   12130:	601a      	str	r2, [r3, #0]
   12132:	e00c      	b.n	1214e <range_attr+0x62>
    } else if (attr == MP_QSTR_step) {
   12134:	68bb      	ldr	r3, [r7, #8]
   12136:	2bd2      	cmp	r3, #210	; 0xd2
   12138:	d109      	bne.n	1214e <range_attr+0x62>
        dest[0] = mp_obj_new_int(o->step);
   1213a:	697b      	ldr	r3, [r7, #20]
   1213c:	68db      	ldr	r3, [r3, #12]
   1213e:	4618      	mov	r0, r3
   12140:	f7fe fc18 	bl	10974 <mp_obj_new_int>
   12144:	4602      	mov	r2, r0
   12146:	687b      	ldr	r3, [r7, #4]
   12148:	601a      	str	r2, [r3, #0]
   1214a:	e000      	b.n	1214e <range_attr+0x62>
        return;
   1214c:	bf00      	nop
    }
}
   1214e:	3718      	adds	r7, #24
   12150:	46bd      	mov	sp, r7
   12152:	bd80      	pop	{r7, pc}

00012154 <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   12154:	b580      	push	{r7, lr}
   12156:	b086      	sub	sp, #24
   12158:	af00      	add	r7, sp, #0
   1215a:	60f8      	str	r0, [r7, #12]
   1215c:	60b9      	str	r1, [r7, #8]
   1215e:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
   12160:	68bb      	ldr	r3, [r7, #8]
   12162:	617b      	str	r3, [r7, #20]
    mp_printf(print, "%q", self->name);
   12164:	697b      	ldr	r3, [r7, #20]
   12166:	685b      	ldr	r3, [r3, #4]
   12168:	461a      	mov	r2, r3
   1216a:	4904      	ldr	r1, [pc, #16]	; (1217c <singleton_print+0x28>)
   1216c:	68f8      	ldr	r0, [r7, #12]
   1216e:	f7ef fea7 	bl	1ec0 <mp_printf>
}
   12172:	bf00      	nop
   12174:	3718      	adds	r7, #24
   12176:	46bd      	mov	sp, r7
   12178:	bd80      	pop	{r7, pc}
   1217a:	bf00      	nop
   1217c:	00021524 	.word	0x00021524

00012180 <utf8_next_char>:
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
   12180:	b480      	push	{r7}
   12182:	b083      	sub	sp, #12
   12184:	af00      	add	r7, sp, #0
   12186:	6078      	str	r0, [r7, #4]
   12188:	687b      	ldr	r3, [r7, #4]
   1218a:	3301      	adds	r3, #1
   1218c:	4618      	mov	r0, r3
   1218e:	370c      	adds	r7, #12
   12190:	46bd      	mov	sp, r7
   12192:	f85d 7b04 	ldr.w	r7, [sp], #4
   12196:	4770      	bx	lr

00012198 <utf8_charlen>:
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }
   12198:	b480      	push	{r7}
   1219a:	b083      	sub	sp, #12
   1219c:	af00      	add	r7, sp, #0
   1219e:	6078      	str	r0, [r7, #4]
   121a0:	6039      	str	r1, [r7, #0]
   121a2:	683b      	ldr	r3, [r7, #0]
   121a4:	4618      	mov	r0, r3
   121a6:	370c      	adds	r7, #12
   121a8:	46bd      	mov	sp, r7
   121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   121ae:	4770      	bx	lr

000121b0 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   121b0:	b480      	push	{r7}
   121b2:	b083      	sub	sp, #12
   121b4:	af00      	add	r7, sp, #0
   121b6:	6078      	str	r0, [r7, #4]
   121b8:	687b      	ldr	r3, [r7, #4]
   121ba:	f003 0301 	and.w	r3, r3, #1
   121be:	2b00      	cmp	r3, #0
   121c0:	bf14      	ite	ne
   121c2:	2301      	movne	r3, #1
   121c4:	2300      	moveq	r3, #0
   121c6:	b2db      	uxtb	r3, r3
   121c8:	4618      	mov	r0, r3
   121ca:	370c      	adds	r7, #12
   121cc:	46bd      	mov	sp, r7
   121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   121d2:	4770      	bx	lr

000121d4 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   121d4:	b480      	push	{r7}
   121d6:	b083      	sub	sp, #12
   121d8:	af00      	add	r7, sp, #0
   121da:	6078      	str	r0, [r7, #4]
   121dc:	687b      	ldr	r3, [r7, #4]
   121de:	f003 0303 	and.w	r3, r3, #3
   121e2:	2b02      	cmp	r3, #2
   121e4:	bf0c      	ite	eq
   121e6:	2301      	moveq	r3, #1
   121e8:	2300      	movne	r3, #0
   121ea:	b2db      	uxtb	r3, r3
   121ec:	4618      	mov	r0, r3
   121ee:	370c      	adds	r7, #12
   121f0:	46bd      	mov	sp, r7
   121f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   121f6:	4770      	bx	lr

000121f8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   121f8:	b480      	push	{r7}
   121fa:	b083      	sub	sp, #12
   121fc:	af00      	add	r7, sp, #0
   121fe:	6078      	str	r0, [r7, #4]
   12200:	687b      	ldr	r3, [r7, #4]
   12202:	f003 0303 	and.w	r3, r3, #3
   12206:	2b00      	cmp	r3, #0
   12208:	bf0c      	ite	eq
   1220a:	2301      	moveq	r3, #1
   1220c:	2300      	movne	r3, #0
   1220e:	b2db      	uxtb	r3, r3
   12210:	4618      	mov	r0, r3
   12212:	370c      	adds	r7, #12
   12214:	46bd      	mov	sp, r7
   12216:	f85d 7b04 	ldr.w	r7, [sp], #4
   1221a:	4770      	bx	lr

0001221c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1221c:	b480      	push	{r7}
   1221e:	b083      	sub	sp, #12
   12220:	af00      	add	r7, sp, #0
   12222:	6078      	str	r0, [r7, #4]
   12224:	687b      	ldr	r3, [r7, #4]
   12226:	2b00      	cmp	r3, #0
   12228:	d001      	beq.n	1222e <mp_obj_new_bool+0x12>
   1222a:	4b04      	ldr	r3, [pc, #16]	; (1223c <mp_obj_new_bool+0x20>)
   1222c:	e000      	b.n	12230 <mp_obj_new_bool+0x14>
   1222e:	4b04      	ldr	r3, [pc, #16]	; (12240 <mp_obj_new_bool+0x24>)
   12230:	4618      	mov	r0, r3
   12232:	370c      	adds	r7, #12
   12234:	46bd      	mov	sp, r7
   12236:	f85d 7b04 	ldr.w	r7, [sp], #4
   1223a:	4770      	bx	lr
   1223c:	0001fc3c 	.word	0x0001fc3c
   12240:	0001fc34 	.word	0x0001fc34

00012244 <mp_str_print_quoted>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in);

/******************************************************************************/
/* str                                                                        */

void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
   12244:	b580      	push	{r7, lr}
   12246:	b08a      	sub	sp, #40	; 0x28
   12248:	af00      	add	r7, sp, #0
   1224a:	60f8      	str	r0, [r7, #12]
   1224c:	60b9      	str	r1, [r7, #8]
   1224e:	607a      	str	r2, [r7, #4]
   12250:	70fb      	strb	r3, [r7, #3]
    // this escapes characters, but it will be very slow to print (calling print many times)
    bool has_single_quote = false;
   12252:	2300      	movs	r3, #0
   12254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool has_double_quote = false;
   12258:	2300      	movs	r3, #0
   1225a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   1225e:	68bb      	ldr	r3, [r7, #8]
   12260:	623b      	str	r3, [r7, #32]
   12262:	68ba      	ldr	r2, [r7, #8]
   12264:	687b      	ldr	r3, [r7, #4]
   12266:	4413      	add	r3, r2
   12268:	617b      	str	r3, [r7, #20]
   1226a:	e011      	b.n	12290 <mp_str_print_quoted+0x4c>
        if (*s == '\'') {
   1226c:	6a3b      	ldr	r3, [r7, #32]
   1226e:	781b      	ldrb	r3, [r3, #0]
   12270:	2b27      	cmp	r3, #39	; 0x27
   12272:	d103      	bne.n	1227c <mp_str_print_quoted+0x38>
            has_single_quote = true;
   12274:	2301      	movs	r3, #1
   12276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1227a:	e006      	b.n	1228a <mp_str_print_quoted+0x46>
        } else if (*s == '"') {
   1227c:	6a3b      	ldr	r3, [r7, #32]
   1227e:	781b      	ldrb	r3, [r3, #0]
   12280:	2b22      	cmp	r3, #34	; 0x22
   12282:	d102      	bne.n	1228a <mp_str_print_quoted+0x46>
            has_double_quote = true;
   12284:	2301      	movs	r3, #1
   12286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   1228a:	6a3b      	ldr	r3, [r7, #32]
   1228c:	3301      	adds	r3, #1
   1228e:	623b      	str	r3, [r7, #32]
   12290:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12294:	f083 0301 	eor.w	r3, r3, #1
   12298:	b2db      	uxtb	r3, r3
   1229a:	2b00      	cmp	r3, #0
   1229c:	d003      	beq.n	122a6 <mp_str_print_quoted+0x62>
   1229e:	6a3a      	ldr	r2, [r7, #32]
   122a0:	697b      	ldr	r3, [r7, #20]
   122a2:	429a      	cmp	r2, r3
   122a4:	d3e2      	bcc.n	1226c <mp_str_print_quoted+0x28>
        }
    }
    int quote_char = '\'';
   122a6:	2327      	movs	r3, #39	; 0x27
   122a8:	61fb      	str	r3, [r7, #28]
    if (has_single_quote && !has_double_quote) {
   122aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   122ae:	2b00      	cmp	r3, #0
   122b0:	d008      	beq.n	122c4 <mp_str_print_quoted+0x80>
   122b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   122b6:	f083 0301 	eor.w	r3, r3, #1
   122ba:	b2db      	uxtb	r3, r3
   122bc:	2b00      	cmp	r3, #0
   122be:	d001      	beq.n	122c4 <mp_str_print_quoted+0x80>
        quote_char = '"';
   122c0:	2322      	movs	r3, #34	; 0x22
   122c2:	61fb      	str	r3, [r7, #28]
    }
    mp_printf(print, "%c", quote_char);
   122c4:	69fa      	ldr	r2, [r7, #28]
   122c6:	4936      	ldr	r1, [pc, #216]	; (123a0 <mp_str_print_quoted+0x15c>)
   122c8:	68f8      	ldr	r0, [r7, #12]
   122ca:	f7ef fdf9 	bl	1ec0 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   122ce:	68bb      	ldr	r3, [r7, #8]
   122d0:	61bb      	str	r3, [r7, #24]
   122d2:	68ba      	ldr	r2, [r7, #8]
   122d4:	687b      	ldr	r3, [r7, #4]
   122d6:	4413      	add	r3, r2
   122d8:	613b      	str	r3, [r7, #16]
   122da:	e054      	b.n	12386 <mp_str_print_quoted+0x142>
        if (*s == quote_char) {
   122dc:	69bb      	ldr	r3, [r7, #24]
   122de:	781b      	ldrb	r3, [r3, #0]
   122e0:	461a      	mov	r2, r3
   122e2:	69fb      	ldr	r3, [r7, #28]
   122e4:	429a      	cmp	r2, r3
   122e6:	d105      	bne.n	122f4 <mp_str_print_quoted+0xb0>
            mp_printf(print, "\\%c", quote_char);
   122e8:	69fa      	ldr	r2, [r7, #28]
   122ea:	492e      	ldr	r1, [pc, #184]	; (123a4 <mp_str_print_quoted+0x160>)
   122ec:	68f8      	ldr	r0, [r7, #12]
   122ee:	f7ef fde7 	bl	1ec0 <mp_printf>
   122f2:	e045      	b.n	12380 <mp_str_print_quoted+0x13c>
        } else if (*s == '\\') {
   122f4:	69bb      	ldr	r3, [r7, #24]
   122f6:	781b      	ldrb	r3, [r3, #0]
   122f8:	2b5c      	cmp	r3, #92	; 0x5c
   122fa:	d104      	bne.n	12306 <mp_str_print_quoted+0xc2>
            mp_print_str(print, "\\\\");
   122fc:	492a      	ldr	r1, [pc, #168]	; (123a8 <mp_str_print_quoted+0x164>)
   122fe:	68f8      	ldr	r0, [r7, #12]
   12300:	f7ef faca 	bl	1898 <mp_print_str>
   12304:	e03c      	b.n	12380 <mp_str_print_quoted+0x13c>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
   12306:	69bb      	ldr	r3, [r7, #24]
   12308:	781b      	ldrb	r3, [r3, #0]
   1230a:	2b1f      	cmp	r3, #31
   1230c:	d916      	bls.n	1233c <mp_str_print_quoted+0xf8>
   1230e:	69bb      	ldr	r3, [r7, #24]
   12310:	781b      	ldrb	r3, [r3, #0]
   12312:	2b7f      	cmp	r3, #127	; 0x7f
   12314:	d012      	beq.n	1233c <mp_str_print_quoted+0xf8>
   12316:	78fb      	ldrb	r3, [r7, #3]
   12318:	f083 0301 	eor.w	r3, r3, #1
   1231c:	b2db      	uxtb	r3, r3
   1231e:	2b00      	cmp	r3, #0
   12320:	d104      	bne.n	1232c <mp_str_print_quoted+0xe8>
   12322:	69bb      	ldr	r3, [r7, #24]
   12324:	781b      	ldrb	r3, [r3, #0]
   12326:	b25b      	sxtb	r3, r3
   12328:	2b00      	cmp	r3, #0
   1232a:	db07      	blt.n	1233c <mp_str_print_quoted+0xf8>
            // In strings, anything which is not ascii control character
            // is printed as is, this includes characters in range 0x80-0xff
            // (which can be non-Latin letters, etc.)
            mp_printf(print, "%c", *s);
   1232c:	69bb      	ldr	r3, [r7, #24]
   1232e:	781b      	ldrb	r3, [r3, #0]
   12330:	461a      	mov	r2, r3
   12332:	491b      	ldr	r1, [pc, #108]	; (123a0 <mp_str_print_quoted+0x15c>)
   12334:	68f8      	ldr	r0, [r7, #12]
   12336:	f7ef fdc3 	bl	1ec0 <mp_printf>
   1233a:	e021      	b.n	12380 <mp_str_print_quoted+0x13c>
        } else if (*s == '\n') {
   1233c:	69bb      	ldr	r3, [r7, #24]
   1233e:	781b      	ldrb	r3, [r3, #0]
   12340:	2b0a      	cmp	r3, #10
   12342:	d104      	bne.n	1234e <mp_str_print_quoted+0x10a>
            mp_print_str(print, "\\n");
   12344:	4919      	ldr	r1, [pc, #100]	; (123ac <mp_str_print_quoted+0x168>)
   12346:	68f8      	ldr	r0, [r7, #12]
   12348:	f7ef faa6 	bl	1898 <mp_print_str>
   1234c:	e018      	b.n	12380 <mp_str_print_quoted+0x13c>
        } else if (*s == '\r') {
   1234e:	69bb      	ldr	r3, [r7, #24]
   12350:	781b      	ldrb	r3, [r3, #0]
   12352:	2b0d      	cmp	r3, #13
   12354:	d104      	bne.n	12360 <mp_str_print_quoted+0x11c>
            mp_print_str(print, "\\r");
   12356:	4916      	ldr	r1, [pc, #88]	; (123b0 <mp_str_print_quoted+0x16c>)
   12358:	68f8      	ldr	r0, [r7, #12]
   1235a:	f7ef fa9d 	bl	1898 <mp_print_str>
   1235e:	e00f      	b.n	12380 <mp_str_print_quoted+0x13c>
        } else if (*s == '\t') {
   12360:	69bb      	ldr	r3, [r7, #24]
   12362:	781b      	ldrb	r3, [r3, #0]
   12364:	2b09      	cmp	r3, #9
   12366:	d104      	bne.n	12372 <mp_str_print_quoted+0x12e>
            mp_print_str(print, "\\t");
   12368:	4912      	ldr	r1, [pc, #72]	; (123b4 <mp_str_print_quoted+0x170>)
   1236a:	68f8      	ldr	r0, [r7, #12]
   1236c:	f7ef fa94 	bl	1898 <mp_print_str>
   12370:	e006      	b.n	12380 <mp_str_print_quoted+0x13c>
        } else {
            mp_printf(print, "\\x%02x", *s);
   12372:	69bb      	ldr	r3, [r7, #24]
   12374:	781b      	ldrb	r3, [r3, #0]
   12376:	461a      	mov	r2, r3
   12378:	490f      	ldr	r1, [pc, #60]	; (123b8 <mp_str_print_quoted+0x174>)
   1237a:	68f8      	ldr	r0, [r7, #12]
   1237c:	f7ef fda0 	bl	1ec0 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   12380:	69bb      	ldr	r3, [r7, #24]
   12382:	3301      	adds	r3, #1
   12384:	61bb      	str	r3, [r7, #24]
   12386:	69ba      	ldr	r2, [r7, #24]
   12388:	693b      	ldr	r3, [r7, #16]
   1238a:	429a      	cmp	r2, r3
   1238c:	d3a6      	bcc.n	122dc <mp_str_print_quoted+0x98>
        }
    }
    mp_printf(print, "%c", quote_char);
   1238e:	69fa      	ldr	r2, [r7, #28]
   12390:	4903      	ldr	r1, [pc, #12]	; (123a0 <mp_str_print_quoted+0x15c>)
   12392:	68f8      	ldr	r0, [r7, #12]
   12394:	f7ef fd94 	bl	1ec0 <mp_printf>
}
   12398:	bf00      	nop
   1239a:	3728      	adds	r7, #40	; 0x28
   1239c:	46bd      	mov	sp, r7
   1239e:	bd80      	pop	{r7, pc}
   123a0:	0002156c 	.word	0x0002156c
   123a4:	00021570 	.word	0x00021570
   123a8:	00021574 	.word	0x00021574
   123ac:	00021578 	.word	0x00021578
   123b0:	0002157c 	.word	0x0002157c
   123b4:	00021580 	.word	0x00021580
   123b8:	00021584 	.word	0x00021584

000123bc <str_print>:
    }
    mp_print_str(print, "\"");
}
#endif

STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   123bc:	b580      	push	{r7, lr}
   123be:	b088      	sub	sp, #32
   123c0:	af00      	add	r7, sp, #0
   123c2:	60f8      	str	r0, [r7, #12]
   123c4:	60b9      	str	r1, [r7, #8]
   123c6:	607a      	str	r2, [r7, #4]
    GET_STR_DATA_LEN(self_in, str_data, str_len);
   123c8:	68b8      	ldr	r0, [r7, #8]
   123ca:	f7ff ff03 	bl	121d4 <MP_OBJ_IS_QSTR>
   123ce:	4603      	mov	r3, r0
   123d0:	2b00      	cmp	r3, #0
   123d2:	d009      	beq.n	123e8 <str_print+0x2c>
   123d4:	68bb      	ldr	r3, [r7, #8]
   123d6:	089b      	lsrs	r3, r3, #2
   123d8:	f107 0214 	add.w	r2, r7, #20
   123dc:	4611      	mov	r1, r2
   123de:	4618      	mov	r0, r3
   123e0:	f7ee ff24 	bl	122c <qstr_data>
   123e4:	61f8      	str	r0, [r7, #28]
   123e6:	e005      	b.n	123f4 <str_print+0x38>
   123e8:	68bb      	ldr	r3, [r7, #8]
   123ea:	689b      	ldr	r3, [r3, #8]
   123ec:	617b      	str	r3, [r7, #20]
   123ee:	68bb      	ldr	r3, [r7, #8]
   123f0:	68db      	ldr	r3, [r3, #12]
   123f2:	61fb      	str	r3, [r7, #28]
        mp_str_print_json(print, str_data, str_len);
        return;
    }
    #endif
    #if !MICROPY_PY_BUILTINS_STR_UNICODE
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
   123f4:	68b8      	ldr	r0, [r7, #8]
   123f6:	f7ff feff 	bl	121f8 <MP_OBJ_IS_OBJ>
   123fa:	4603      	mov	r3, r0
   123fc:	2b00      	cmp	r3, #0
   123fe:	d006      	beq.n	1240e <str_print+0x52>
   12400:	68bb      	ldr	r3, [r7, #8]
   12402:	681b      	ldr	r3, [r3, #0]
   12404:	4a17      	ldr	r2, [pc, #92]	; (12464 <str_print+0xa8>)
   12406:	4293      	cmp	r3, r2
   12408:	d101      	bne.n	1240e <str_print+0x52>
   1240a:	2301      	movs	r3, #1
   1240c:	e000      	b.n	12410 <str_print+0x54>
   1240e:	2300      	movs	r3, #0
   12410:	76fb      	strb	r3, [r7, #27]
   12412:	7efb      	ldrb	r3, [r7, #27]
   12414:	f003 0301 	and.w	r3, r3, #1
   12418:	76fb      	strb	r3, [r7, #27]
    #else
    bool is_bytes = true;
    #endif
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
   1241a:	687b      	ldr	r3, [r7, #4]
   1241c:	2b04      	cmp	r3, #4
   1241e:	d008      	beq.n	12432 <str_print+0x76>
   12420:	687b      	ldr	r3, [r7, #4]
   12422:	2b00      	cmp	r3, #0
   12424:	d10c      	bne.n	12440 <str_print+0x84>
   12426:	7efb      	ldrb	r3, [r7, #27]
   12428:	f083 0301 	eor.w	r3, r3, #1
   1242c:	b2db      	uxtb	r3, r3
   1242e:	2b00      	cmp	r3, #0
   12430:	d006      	beq.n	12440 <str_print+0x84>
        mp_printf(print, "%.*s", str_len, str_data);
   12432:	697a      	ldr	r2, [r7, #20]
   12434:	69fb      	ldr	r3, [r7, #28]
   12436:	490c      	ldr	r1, [pc, #48]	; (12468 <str_print+0xac>)
   12438:	68f8      	ldr	r0, [r7, #12]
   1243a:	f7ef fd41 	bl	1ec0 <mp_printf>
   1243e:	e00c      	b.n	1245a <str_print+0x9e>
    } else {
        if (is_bytes) {
   12440:	7efb      	ldrb	r3, [r7, #27]
   12442:	2b00      	cmp	r3, #0
   12444:	d003      	beq.n	1244e <str_print+0x92>
            mp_print_str(print, "b");
   12446:	4909      	ldr	r1, [pc, #36]	; (1246c <str_print+0xb0>)
   12448:	68f8      	ldr	r0, [r7, #12]
   1244a:	f7ef fa25 	bl	1898 <mp_print_str>
        }
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
   1244e:	697a      	ldr	r2, [r7, #20]
   12450:	7efb      	ldrb	r3, [r7, #27]
   12452:	69f9      	ldr	r1, [r7, #28]
   12454:	68f8      	ldr	r0, [r7, #12]
   12456:	f7ff fef5 	bl	12244 <mp_str_print_quoted>
    }
}
   1245a:	bf00      	nop
   1245c:	3720      	adds	r7, #32
   1245e:	46bd      	mov	sp, r7
   12460:	bd80      	pop	{r7, pc}
   12462:	bf00      	nop
   12464:	00021b6c 	.word	0x00021b6c
   12468:	0002158c 	.word	0x0002158c
   1246c:	00021594 	.word	0x00021594

00012470 <mp_obj_str_make_new>:

mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12470:	b580      	push	{r7, lr}
   12472:	b094      	sub	sp, #80	; 0x50
   12474:	af02      	add	r7, sp, #8
   12476:	60f8      	str	r0, [r7, #12]
   12478:	60b9      	str	r1, [r7, #8]
   1247a:	607a      	str	r2, [r7, #4]
   1247c:	603b      	str	r3, [r7, #0]
    if (n_kw != 0) {
        mp_arg_error_unimpl_kw();
    }
#endif

    mp_arg_check_num(n_args, n_kw, 0, 3, false);
   1247e:	2300      	movs	r3, #0
   12480:	9300      	str	r3, [sp, #0]
   12482:	2303      	movs	r3, #3
   12484:	2200      	movs	r2, #0
   12486:	6879      	ldr	r1, [r7, #4]
   12488:	68b8      	ldr	r0, [r7, #8]
   1248a:	f7fa fdab 	bl	cfe4 <mp_arg_check_num>

    switch (n_args) {
   1248e:	68bb      	ldr	r3, [r7, #8]
   12490:	2b00      	cmp	r3, #0
   12492:	d002      	beq.n	1249a <mp_obj_str_make_new+0x2a>
   12494:	2b01      	cmp	r3, #1
   12496:	d002      	beq.n	1249e <mp_obj_str_make_new+0x2e>
   12498:	e019      	b.n	124ce <mp_obj_str_make_new+0x5e>
        case 0:
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   1249a:	2306      	movs	r3, #6
   1249c:	e089      	b.n	125b2 <mp_obj_str_make_new+0x142>

        case 1: {
            vstr_t vstr;
            mp_print_t print;
            vstr_init_print(&vstr, 16, &print);
   1249e:	f107 0220 	add.w	r2, r7, #32
   124a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
   124a6:	2110      	movs	r1, #16
   124a8:	4618      	mov	r0, r3
   124aa:	f7ee ff85 	bl	13b8 <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
   124ae:	683b      	ldr	r3, [r7, #0]
   124b0:	6819      	ldr	r1, [r3, #0]
   124b2:	f107 0320 	add.w	r3, r7, #32
   124b6:	2200      	movs	r2, #0
   124b8:	4618      	mov	r0, r3
   124ba:	f7fb f9b9 	bl	d830 <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
   124be:	f107 0328 	add.w	r3, r7, #40	; 0x28
   124c2:	4619      	mov	r1, r3
   124c4:	68f8      	ldr	r0, [r7, #12]
   124c6:	f002 ff05 	bl	152d4 <mp_obj_new_str_from_vstr>
   124ca:	4603      	mov	r3, r0
   124cc:	e071      	b.n	125b2 <mp_obj_str_make_new+0x142>
        }

        default: // 2 or 3 args
            // TODO: validate 2nd/3rd args
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
   124ce:	683b      	ldr	r3, [r7, #0]
   124d0:	681b      	ldr	r3, [r3, #0]
   124d2:	4618      	mov	r0, r3
   124d4:	f7ff fe90 	bl	121f8 <MP_OBJ_IS_OBJ>
   124d8:	4603      	mov	r3, r0
   124da:	2b00      	cmp	r3, #0
   124dc:	d05a      	beq.n	12594 <mp_obj_str_make_new+0x124>
   124de:	683b      	ldr	r3, [r7, #0]
   124e0:	681b      	ldr	r3, [r3, #0]
   124e2:	681b      	ldr	r3, [r3, #0]
   124e4:	4a35      	ldr	r2, [pc, #212]	; (125bc <mp_obj_str_make_new+0x14c>)
   124e6:	4293      	cmp	r3, r2
   124e8:	d154      	bne.n	12594 <mp_obj_str_make_new+0x124>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
   124ea:	683b      	ldr	r3, [r7, #0]
   124ec:	681b      	ldr	r3, [r3, #0]
   124ee:	4618      	mov	r0, r3
   124f0:	f7ff fe70 	bl	121d4 <MP_OBJ_IS_QSTR>
   124f4:	4603      	mov	r3, r0
   124f6:	2b00      	cmp	r3, #0
   124f8:	d00a      	beq.n	12510 <mp_obj_str_make_new+0xa0>
   124fa:	683b      	ldr	r3, [r7, #0]
   124fc:	681b      	ldr	r3, [r3, #0]
   124fe:	089b      	lsrs	r3, r3, #2
   12500:	f107 021c 	add.w	r2, r7, #28
   12504:	4611      	mov	r1, r2
   12506:	4618      	mov	r0, r3
   12508:	f7ee fe90 	bl	122c <qstr_data>
   1250c:	6478      	str	r0, [r7, #68]	; 0x44
   1250e:	e007      	b.n	12520 <mp_obj_str_make_new+0xb0>
   12510:	683b      	ldr	r3, [r7, #0]
   12512:	681b      	ldr	r3, [r3, #0]
   12514:	689b      	ldr	r3, [r3, #8]
   12516:	61fb      	str	r3, [r7, #28]
   12518:	683b      	ldr	r3, [r7, #0]
   1251a:	681b      	ldr	r3, [r3, #0]
   1251c:	68db      	ldr	r3, [r3, #12]
   1251e:	647b      	str	r3, [r7, #68]	; 0x44
                GET_STR_HASH(args[0], str_hash);
   12520:	683b      	ldr	r3, [r7, #0]
   12522:	681b      	ldr	r3, [r3, #0]
   12524:	4618      	mov	r0, r3
   12526:	f7ff fe55 	bl	121d4 <MP_OBJ_IS_QSTR>
   1252a:	4603      	mov	r3, r0
   1252c:	2b00      	cmp	r3, #0
   1252e:	d007      	beq.n	12540 <mp_obj_str_make_new+0xd0>
   12530:	683b      	ldr	r3, [r7, #0]
   12532:	681b      	ldr	r3, [r3, #0]
   12534:	089b      	lsrs	r3, r3, #2
   12536:	4618      	mov	r0, r3
   12538:	f7ee fe4c 	bl	11d4 <qstr_hash>
   1253c:	6438      	str	r0, [r7, #64]	; 0x40
   1253e:	e003      	b.n	12548 <mp_obj_str_make_new+0xd8>
   12540:	683b      	ldr	r3, [r7, #0]
   12542:	681b      	ldr	r3, [r3, #0]
   12544:	685b      	ldr	r3, [r3, #4]
   12546:	643b      	str	r3, [r7, #64]	; 0x40
                if (str_hash == 0) {
   12548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1254a:	2b00      	cmp	r3, #0
   1254c:	d105      	bne.n	1255a <mp_obj_str_make_new+0xea>
                    str_hash = qstr_compute_hash(str_data, str_len);
   1254e:	69fb      	ldr	r3, [r7, #28]
   12550:	4619      	mov	r1, r3
   12552:	6c78      	ldr	r0, [r7, #68]	; 0x44
   12554:	f7ee fc6c 	bl	e30 <qstr_compute_hash>
   12558:	6438      	str	r0, [r7, #64]	; 0x40
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif

                // Check if a qstr with this data already exists
                qstr q = qstr_find_strn((const char*)str_data, str_len);
   1255a:	69fb      	ldr	r3, [r7, #28]
   1255c:	4619      	mov	r1, r3
   1255e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   12560:	f7ee fd16 	bl	f90 <qstr_find_strn>
   12564:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (q != MP_QSTR_NULL) {
   12566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12568:	2b00      	cmp	r3, #0
   1256a:	d004      	beq.n	12576 <mp_obj_str_make_new+0x106>
                    return MP_OBJ_NEW_QSTR(q);
   1256c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1256e:	009b      	lsls	r3, r3, #2
   12570:	f043 0302 	orr.w	r3, r3, #2
   12574:	e01d      	b.n	125b2 <mp_obj_str_make_new+0x142>
                }

                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
   12576:	69fb      	ldr	r3, [r7, #28]
   12578:	461a      	mov	r2, r3
   1257a:	2100      	movs	r1, #0
   1257c:	68f8      	ldr	r0, [r7, #12]
   1257e:	f002 fe49 	bl	15214 <mp_obj_new_str_copy>
   12582:	63b8      	str	r0, [r7, #56]	; 0x38
                o->data = str_data;
   12584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12588:	60da      	str	r2, [r3, #12]
                o->hash = str_hash;
   1258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1258c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1258e:	605a      	str	r2, [r3, #4]
                return MP_OBJ_FROM_PTR(o);
   12590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12592:	e00e      	b.n	125b2 <mp_obj_str_make_new+0x142>
            } else {
                mp_buffer_info_t bufinfo;
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   12594:	683b      	ldr	r3, [r7, #0]
   12596:	681b      	ldr	r3, [r3, #0]
   12598:	f107 0110 	add.w	r1, r7, #16
   1259c:	2201      	movs	r2, #1
   1259e:	4618      	mov	r0, r3
   125a0:	f7fb fd26 	bl	dff0 <mp_get_buffer_raise>
                #if MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
                if (!utf8_check(bufinfo.buf, bufinfo.len)) {
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
   125a4:	693b      	ldr	r3, [r7, #16]
   125a6:	697a      	ldr	r2, [r7, #20]
   125a8:	4611      	mov	r1, r2
   125aa:	4618      	mov	r0, r3
   125ac:	f002 fef4 	bl	15398 <mp_obj_new_str>
   125b0:	4603      	mov	r3, r0
            }
    }
}
   125b2:	4618      	mov	r0, r3
   125b4:	3748      	adds	r7, #72	; 0x48
   125b6:	46bd      	mov	sp, r7
   125b8:	bd80      	pop	{r7, pc}
   125ba:	bf00      	nop
   125bc:	00021b6c 	.word	0x00021b6c

000125c0 <bytes_make_new>:

STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   125c0:	b580      	push	{r7, lr}
   125c2:	b09e      	sub	sp, #120	; 0x78
   125c4:	af00      	add	r7, sp, #0
   125c6:	60f8      	str	r0, [r7, #12]
   125c8:	60b9      	str	r1, [r7, #8]
   125ca:	607a      	str	r2, [r7, #4]
   125cc:	603b      	str	r3, [r7, #0]
    }
    #else
    (void)n_kw;
    #endif

    if (n_args == 0) {
   125ce:	68bb      	ldr	r3, [r7, #8]
   125d0:	2b00      	cmp	r3, #0
   125d2:	d101      	bne.n	125d8 <bytes_make_new+0x18>
        return mp_const_empty_bytes;
   125d4:	4b7a      	ldr	r3, [pc, #488]	; (127c0 <bytes_make_new+0x200>)
   125d6:	e0ee      	b.n	127b6 <bytes_make_new+0x1f6>
    }

    if (MP_OBJ_IS_STR(args[0])) {
   125d8:	683b      	ldr	r3, [r7, #0]
   125da:	681b      	ldr	r3, [r3, #0]
   125dc:	4618      	mov	r0, r3
   125de:	f7ff fdf9 	bl	121d4 <MP_OBJ_IS_QSTR>
   125e2:	4603      	mov	r3, r0
   125e4:	2b00      	cmp	r3, #0
   125e6:	d10d      	bne.n	12604 <bytes_make_new+0x44>
   125e8:	683b      	ldr	r3, [r7, #0]
   125ea:	681b      	ldr	r3, [r3, #0]
   125ec:	4618      	mov	r0, r3
   125ee:	f7ff fe03 	bl	121f8 <MP_OBJ_IS_OBJ>
   125f2:	4603      	mov	r3, r0
   125f4:	2b00      	cmp	r3, #0
   125f6:	d054      	beq.n	126a2 <bytes_make_new+0xe2>
   125f8:	683b      	ldr	r3, [r7, #0]
   125fa:	681b      	ldr	r3, [r3, #0]
   125fc:	681b      	ldr	r3, [r3, #0]
   125fe:	4a71      	ldr	r2, [pc, #452]	; (127c4 <bytes_make_new+0x204>)
   12600:	4293      	cmp	r3, r2
   12602:	d14e      	bne.n	126a2 <bytes_make_new+0xe2>
        if (n_args < 2 || n_args > 3) {
   12604:	68bb      	ldr	r3, [r7, #8]
   12606:	2b01      	cmp	r3, #1
   12608:	f240 80d2 	bls.w	127b0 <bytes_make_new+0x1f0>
   1260c:	68bb      	ldr	r3, [r7, #8]
   1260e:	2b03      	cmp	r3, #3
   12610:	f200 80ce 	bhi.w	127b0 <bytes_make_new+0x1f0>
            goto wrong_args;
        }
        GET_STR_DATA_LEN(args[0], str_data, str_len);
   12614:	683b      	ldr	r3, [r7, #0]
   12616:	681b      	ldr	r3, [r3, #0]
   12618:	4618      	mov	r0, r3
   1261a:	f7ff fddb 	bl	121d4 <MP_OBJ_IS_QSTR>
   1261e:	4603      	mov	r3, r0
   12620:	2b00      	cmp	r3, #0
   12622:	d00a      	beq.n	1263a <bytes_make_new+0x7a>
   12624:	683b      	ldr	r3, [r7, #0]
   12626:	681b      	ldr	r3, [r3, #0]
   12628:	089b      	lsrs	r3, r3, #2
   1262a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1262e:	4611      	mov	r1, r2
   12630:	4618      	mov	r0, r3
   12632:	f7ee fdfb 	bl	122c <qstr_data>
   12636:	6778      	str	r0, [r7, #116]	; 0x74
   12638:	e007      	b.n	1264a <bytes_make_new+0x8a>
   1263a:	683b      	ldr	r3, [r7, #0]
   1263c:	681b      	ldr	r3, [r3, #0]
   1263e:	689b      	ldr	r3, [r3, #8]
   12640:	627b      	str	r3, [r7, #36]	; 0x24
   12642:	683b      	ldr	r3, [r7, #0]
   12644:	681b      	ldr	r3, [r3, #0]
   12646:	68db      	ldr	r3, [r3, #12]
   12648:	677b      	str	r3, [r7, #116]	; 0x74
        GET_STR_HASH(args[0], str_hash);
   1264a:	683b      	ldr	r3, [r7, #0]
   1264c:	681b      	ldr	r3, [r3, #0]
   1264e:	4618      	mov	r0, r3
   12650:	f7ff fdc0 	bl	121d4 <MP_OBJ_IS_QSTR>
   12654:	4603      	mov	r3, r0
   12656:	2b00      	cmp	r3, #0
   12658:	d007      	beq.n	1266a <bytes_make_new+0xaa>
   1265a:	683b      	ldr	r3, [r7, #0]
   1265c:	681b      	ldr	r3, [r3, #0]
   1265e:	089b      	lsrs	r3, r3, #2
   12660:	4618      	mov	r0, r3
   12662:	f7ee fdb7 	bl	11d4 <qstr_hash>
   12666:	6738      	str	r0, [r7, #112]	; 0x70
   12668:	e003      	b.n	12672 <bytes_make_new+0xb2>
   1266a:	683b      	ldr	r3, [r7, #0]
   1266c:	681b      	ldr	r3, [r3, #0]
   1266e:	685b      	ldr	r3, [r3, #4]
   12670:	673b      	str	r3, [r7, #112]	; 0x70
        if (str_hash == 0) {
   12672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12674:	2b00      	cmp	r3, #0
   12676:	d105      	bne.n	12684 <bytes_make_new+0xc4>
            str_hash = qstr_compute_hash(str_data, str_len);
   12678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1267a:	4619      	mov	r1, r3
   1267c:	6f78      	ldr	r0, [r7, #116]	; 0x74
   1267e:	f7ee fbd7 	bl	e30 <qstr_compute_hash>
   12682:	6738      	str	r0, [r7, #112]	; 0x70
        }
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
   12684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12686:	461a      	mov	r2, r3
   12688:	2100      	movs	r1, #0
   1268a:	484f      	ldr	r0, [pc, #316]	; (127c8 <bytes_make_new+0x208>)
   1268c:	f002 fdc2 	bl	15214 <mp_obj_new_str_copy>
   12690:	6578      	str	r0, [r7, #84]	; 0x54
        o->data = str_data;
   12692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12694:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   12696:	60da      	str	r2, [r3, #12]
        o->hash = str_hash;
   12698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1269a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1269c:	605a      	str	r2, [r3, #4]
        return MP_OBJ_FROM_PTR(o);
   1269e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   126a0:	e089      	b.n	127b6 <bytes_make_new+0x1f6>
    }

    if (n_args > 1) {
   126a2:	68bb      	ldr	r3, [r7, #8]
   126a4:	2b01      	cmp	r3, #1
   126a6:	f200 8082 	bhi.w	127ae <bytes_make_new+0x1ee>
        goto wrong_args;
    }

    if (MP_OBJ_IS_SMALL_INT(args[0])) {
   126aa:	683b      	ldr	r3, [r7, #0]
   126ac:	681b      	ldr	r3, [r3, #0]
   126ae:	4618      	mov	r0, r3
   126b0:	f7ff fd7e 	bl	121b0 <MP_OBJ_IS_SMALL_INT>
   126b4:	4603      	mov	r3, r0
   126b6:	2b00      	cmp	r3, #0
   126b8:	d01e      	beq.n	126f8 <bytes_make_new+0x138>
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(args[0]);
   126ba:	683b      	ldr	r3, [r7, #0]
   126bc:	681b      	ldr	r3, [r3, #0]
   126be:	105b      	asrs	r3, r3, #1
   126c0:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (len < 0) {
   126c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   126c4:	2b00      	cmp	r3, #0
   126c6:	da02      	bge.n	126ce <bytes_make_new+0x10e>
            mp_raise_ValueError(NULL);
   126c8:	2000      	movs	r0, #0
   126ca:	f7fa fc5b 	bl	cf84 <mp_raise_ValueError>
        }
        vstr_t vstr;
        vstr_init_len(&vstr, len);
   126ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   126d0:	f107 0314 	add.w	r3, r7, #20
   126d4:	4611      	mov	r1, r2
   126d6:	4618      	mov	r0, r3
   126d8:	f7ee fe42 	bl	1360 <vstr_init_len>
        memset(vstr.buf, 0, len);
   126dc:	69fb      	ldr	r3, [r7, #28]
   126de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   126e0:	2100      	movs	r1, #0
   126e2:	4618      	mov	r0, r3
   126e4:	f009 fbb2 	bl	1be4c <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   126e8:	f107 0314 	add.w	r3, r7, #20
   126ec:	4619      	mov	r1, r3
   126ee:	4836      	ldr	r0, [pc, #216]	; (127c8 <bytes_make_new+0x208>)
   126f0:	f002 fdf0 	bl	152d4 <mp_obj_new_str_from_vstr>
   126f4:	4603      	mov	r3, r0
   126f6:	e05e      	b.n	127b6 <bytes_make_new+0x1f6>
    }

    // check if argument has the buffer protocol
    mp_buffer_info_t bufinfo;
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
   126f8:	683b      	ldr	r3, [r7, #0]
   126fa:	681b      	ldr	r3, [r3, #0]
   126fc:	f107 0148 	add.w	r1, r7, #72	; 0x48
   12700:	2201      	movs	r2, #1
   12702:	4618      	mov	r0, r3
   12704:	f7fb fc52 	bl	dfac <mp_get_buffer>
   12708:	4603      	mov	r3, r0
   1270a:	2b00      	cmp	r3, #0
   1270c:	d007      	beq.n	1271e <bytes_make_new+0x15e>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
   1270e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12712:	4611      	mov	r1, r2
   12714:	4618      	mov	r0, r3
   12716:	f002 fe97 	bl	15448 <mp_obj_new_bytes>
   1271a:	4603      	mov	r3, r0
   1271c:	e04b      	b.n	127b6 <bytes_make_new+0x1f6>
    }

    vstr_t vstr;
    // Try to create array of exact len if initializer len is known
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
   1271e:	683b      	ldr	r3, [r7, #0]
   12720:	681b      	ldr	r3, [r3, #0]
   12722:	4618      	mov	r0, r3
   12724:	f7fb fba8 	bl	de78 <mp_obj_len_maybe>
   12728:	66b8      	str	r0, [r7, #104]	; 0x68
    if (len_in == MP_OBJ_NULL) {
   1272a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1272c:	2b00      	cmp	r3, #0
   1272e:	d106      	bne.n	1273e <bytes_make_new+0x17e>
        vstr_init(&vstr, 16);
   12730:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12734:	2110      	movs	r1, #16
   12736:	4618      	mov	r0, r3
   12738:	f7ee fdf0 	bl	131c <vstr_init>
   1273c:	e009      	b.n	12752 <bytes_make_new+0x192>
    } else {
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(len_in);
   1273e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12740:	105b      	asrs	r3, r3, #1
   12742:	667b      	str	r3, [r7, #100]	; 0x64
        vstr_init(&vstr, len);
   12744:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   12746:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1274a:	4611      	mov	r1, r2
   1274c:	4618      	mov	r0, r3
   1274e:	f7ee fde5 	bl	131c <vstr_init>
    }

    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   12752:	683b      	ldr	r3, [r7, #0]
   12754:	681b      	ldr	r3, [r3, #0]
   12756:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1275a:	4611      	mov	r1, r2
   1275c:	4618      	mov	r0, r3
   1275e:	f7fa f8cd 	bl	c8fc <mp_getiter>
   12762:	6638      	str	r0, [r7, #96]	; 0x60
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12764:	e014      	b.n	12790 <bytes_make_new+0x1d0>
        mp_int_t val = mp_obj_get_int(item);
   12766:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   12768:	f7fb fa0e 	bl	db88 <mp_obj_get_int>
   1276c:	65b8      	str	r0, [r7, #88]	; 0x58
        #if MICROPY_FULL_CHECKS
        if (val < 0 || val > 255) {
   1276e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12770:	2b00      	cmp	r3, #0
   12772:	db02      	blt.n	1277a <bytes_make_new+0x1ba>
   12774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12776:	2bff      	cmp	r3, #255	; 0xff
   12778:	dd02      	ble.n	12780 <bytes_make_new+0x1c0>
            mp_raise_ValueError("bytes value out of range");
   1277a:	4814      	ldr	r0, [pc, #80]	; (127cc <bytes_make_new+0x20c>)
   1277c:	f7fa fc02 	bl	cf84 <mp_raise_ValueError>
        }
        #endif
        vstr_add_byte(&vstr, val);
   12780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12782:	b2da      	uxtb	r2, r3
   12784:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12788:	4611      	mov	r1, r2
   1278a:	4618      	mov	r0, r3
   1278c:	f7ee ff1c 	bl	15c8 <vstr_add_byte>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12790:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12792:	f7fa f935 	bl	ca00 <mp_iternext>
   12796:	65f8      	str	r0, [r7, #92]	; 0x5c
   12798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1279a:	2b04      	cmp	r3, #4
   1279c:	d1e3      	bne.n	12766 <bytes_make_new+0x1a6>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   1279e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   127a2:	4619      	mov	r1, r3
   127a4:	4808      	ldr	r0, [pc, #32]	; (127c8 <bytes_make_new+0x208>)
   127a6:	f002 fd95 	bl	152d4 <mp_obj_new_str_from_vstr>
   127aa:	4603      	mov	r3, r0
   127ac:	e003      	b.n	127b6 <bytes_make_new+0x1f6>
        goto wrong_args;
   127ae:	bf00      	nop

wrong_args:
    mp_raise_TypeError("wrong number of arguments");
   127b0:	4807      	ldr	r0, [pc, #28]	; (127d0 <bytes_make_new+0x210>)
   127b2:	f7fa fbf1 	bl	cf98 <mp_raise_TypeError>
}
   127b6:	4618      	mov	r0, r3
   127b8:	3778      	adds	r7, #120	; 0x78
   127ba:	46bd      	mov	sp, r7
   127bc:	bd80      	pop	{r7, pc}
   127be:	bf00      	nop
   127c0:	00021bac 	.word	0x00021bac
   127c4:	00021b30 	.word	0x00021b30
   127c8:	00021b6c 	.word	0x00021b6c
   127cc:	00021598 	.word	0x00021598
   127d0:	000215b4 	.word	0x000215b4

000127d4 <find_subbytes>:

// like strstr but with specified length and allows \0 bytes
// TODO replace with something more efficient/standard
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
   127d4:	b580      	push	{r7, lr}
   127d6:	b086      	sub	sp, #24
   127d8:	af00      	add	r7, sp, #0
   127da:	60f8      	str	r0, [r7, #12]
   127dc:	60b9      	str	r1, [r7, #8]
   127de:	607a      	str	r2, [r7, #4]
   127e0:	603b      	str	r3, [r7, #0]
    if (hlen >= nlen) {
   127e2:	68ba      	ldr	r2, [r7, #8]
   127e4:	683b      	ldr	r3, [r7, #0]
   127e6:	429a      	cmp	r2, r3
   127e8:	d328      	bcc.n	1283c <find_subbytes+0x68>
        size_t str_index, str_index_end;
        if (direction > 0) {
   127ea:	6a3b      	ldr	r3, [r7, #32]
   127ec:	2b00      	cmp	r3, #0
   127ee:	dd06      	ble.n	127fe <find_subbytes+0x2a>
            str_index = 0;
   127f0:	2300      	movs	r3, #0
   127f2:	617b      	str	r3, [r7, #20]
            str_index_end = hlen - nlen;
   127f4:	68ba      	ldr	r2, [r7, #8]
   127f6:	683b      	ldr	r3, [r7, #0]
   127f8:	1ad3      	subs	r3, r2, r3
   127fa:	613b      	str	r3, [r7, #16]
   127fc:	e005      	b.n	1280a <find_subbytes+0x36>
        } else {
            str_index = hlen - nlen;
   127fe:	68ba      	ldr	r2, [r7, #8]
   12800:	683b      	ldr	r3, [r7, #0]
   12802:	1ad3      	subs	r3, r2, r3
   12804:	617b      	str	r3, [r7, #20]
            str_index_end = 0;
   12806:	2300      	movs	r3, #0
   12808:	613b      	str	r3, [r7, #16]
        }
        for (;;) {
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   1280a:	68fa      	ldr	r2, [r7, #12]
   1280c:	697b      	ldr	r3, [r7, #20]
   1280e:	4413      	add	r3, r2
   12810:	683a      	ldr	r2, [r7, #0]
   12812:	6879      	ldr	r1, [r7, #4]
   12814:	4618      	mov	r0, r3
   12816:	f009 fb65 	bl	1bee4 <memcmp>
   1281a:	4603      	mov	r3, r0
   1281c:	2b00      	cmp	r3, #0
   1281e:	d103      	bne.n	12828 <find_subbytes+0x54>
                //found
                return haystack + str_index;
   12820:	68fa      	ldr	r2, [r7, #12]
   12822:	697b      	ldr	r3, [r7, #20]
   12824:	4413      	add	r3, r2
   12826:	e00a      	b.n	1283e <find_subbytes+0x6a>
            }
            if (str_index == str_index_end) {
   12828:	697a      	ldr	r2, [r7, #20]
   1282a:	693b      	ldr	r3, [r7, #16]
   1282c:	429a      	cmp	r2, r3
   1282e:	d004      	beq.n	1283a <find_subbytes+0x66>
                //not found
                break;
            }
            str_index += direction;
   12830:	6a3b      	ldr	r3, [r7, #32]
   12832:	697a      	ldr	r2, [r7, #20]
   12834:	4413      	add	r3, r2
   12836:	617b      	str	r3, [r7, #20]
        }
   12838:	e7e7      	b.n	1280a <find_subbytes+0x36>
                break;
   1283a:	bf00      	nop
    }
    return NULL;
   1283c:	2300      	movs	r3, #0
}
   1283e:	4618      	mov	r0, r3
   12840:	3718      	adds	r7, #24
   12842:	46bd      	mov	sp, r7
   12844:	bd80      	pop	{r7, pc}
   12846:	bf00      	nop

00012848 <mp_obj_str_binary_op>:

// Note: this function is used to check if an object is a str or bytes, which
// works because both those types use it as their binary_op method.  Revisit
// MP_OBJ_IS_STR_OR_BYTES if this fact changes.
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   12848:	b580      	push	{r7, lr}
   1284a:	b09c      	sub	sp, #112	; 0x70
   1284c:	af02      	add	r7, sp, #8
   1284e:	60f8      	str	r0, [r7, #12]
   12850:	60b9      	str	r1, [r7, #8]
   12852:	607a      	str	r2, [r7, #4]
    // check for modulo
    if (op == MP_BINARY_OP_MODULO) {
   12854:	68fb      	ldr	r3, [r7, #12]
   12856:	2b1f      	cmp	r3, #31
   12858:	d130      	bne.n	128bc <mp_obj_str_binary_op+0x74>
        mp_obj_t *args = &rhs_in;
   1285a:	1d3b      	adds	r3, r7, #4
   1285c:	64bb      	str	r3, [r7, #72]	; 0x48
        size_t n_args = 1;
   1285e:	2301      	movs	r3, #1
   12860:	647b      	str	r3, [r7, #68]	; 0x44
        mp_obj_t dict = MP_OBJ_NULL;
   12862:	2300      	movs	r3, #0
   12864:	667b      	str	r3, [r7, #100]	; 0x64
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   12866:	687b      	ldr	r3, [r7, #4]
   12868:	4618      	mov	r0, r3
   1286a:	f7ff fcc5 	bl	121f8 <MP_OBJ_IS_OBJ>
   1286e:	4603      	mov	r3, r0
   12870:	2b00      	cmp	r3, #0
   12872:	d00d      	beq.n	12890 <mp_obj_str_binary_op+0x48>
   12874:	687b      	ldr	r3, [r7, #4]
   12876:	681b      	ldr	r3, [r3, #0]
   12878:	4aac      	ldr	r2, [pc, #688]	; (12b2c <mp_obj_str_binary_op+0x2e4>)
   1287a:	4293      	cmp	r3, r2
   1287c:	d108      	bne.n	12890 <mp_obj_str_binary_op+0x48>
            // TODO: Support tuple subclasses?
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   1287e:	687b      	ldr	r3, [r7, #4]
   12880:	f107 0248 	add.w	r2, r7, #72	; 0x48
   12884:	f107 0144 	add.w	r1, r7, #68	; 0x44
   12888:	4618      	mov	r0, r3
   1288a:	f003 fac3 	bl	15e14 <mp_obj_tuple_get>
   1288e:	e00d      	b.n	128ac <mp_obj_str_binary_op+0x64>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   12890:	687b      	ldr	r3, [r7, #4]
   12892:	4618      	mov	r0, r3
   12894:	f7ff fcb0 	bl	121f8 <MP_OBJ_IS_OBJ>
   12898:	4603      	mov	r3, r0
   1289a:	2b00      	cmp	r3, #0
   1289c:	d006      	beq.n	128ac <mp_obj_str_binary_op+0x64>
   1289e:	687b      	ldr	r3, [r7, #4]
   128a0:	681b      	ldr	r3, [r3, #0]
   128a2:	4aa3      	ldr	r2, [pc, #652]	; (12b30 <mp_obj_str_binary_op+0x2e8>)
   128a4:	4293      	cmp	r3, r2
   128a6:	d101      	bne.n	128ac <mp_obj_str_binary_op+0x64>
            dict = rhs_in;
   128a8:	687b      	ldr	r3, [r7, #4]
   128aa:	667b      	str	r3, [r7, #100]	; 0x64
        }
        return str_modulo_format(lhs_in, n_args, args, dict);
   128ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
   128ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
   128b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   128b2:	68b8      	ldr	r0, [r7, #8]
   128b4:	f001 fdb0 	bl	14418 <str_modulo_format>
   128b8:	4603      	mov	r3, r0
   128ba:	e132      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
    }

    // from now on we need lhs type and data, so extract them
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   128bc:	68b8      	ldr	r0, [r7, #8]
   128be:	f7fa ff85 	bl	d7cc <mp_obj_get_type>
   128c2:	6538      	str	r0, [r7, #80]	; 0x50
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   128c4:	68b8      	ldr	r0, [r7, #8]
   128c6:	f7ff fc85 	bl	121d4 <MP_OBJ_IS_QSTR>
   128ca:	4603      	mov	r3, r0
   128cc:	2b00      	cmp	r3, #0
   128ce:	d009      	beq.n	128e4 <mp_obj_str_binary_op+0x9c>
   128d0:	68bb      	ldr	r3, [r7, #8]
   128d2:	089b      	lsrs	r3, r3, #2
   128d4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   128d8:	4611      	mov	r1, r2
   128da:	4618      	mov	r0, r3
   128dc:	f7ee fca6 	bl	122c <qstr_data>
   128e0:	6638      	str	r0, [r7, #96]	; 0x60
   128e2:	e005      	b.n	128f0 <mp_obj_str_binary_op+0xa8>
   128e4:	68bb      	ldr	r3, [r7, #8]
   128e6:	689b      	ldr	r3, [r3, #8]
   128e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   128ea:	68bb      	ldr	r3, [r7, #8]
   128ec:	68db      	ldr	r3, [r3, #12]
   128ee:	663b      	str	r3, [r7, #96]	; 0x60

    // check for multiply
    if (op == MP_BINARY_OP_MULTIPLY) {
   128f0:	68fb      	ldr	r3, [r7, #12]
   128f2:	2b1c      	cmp	r3, #28
   128f4:	d135      	bne.n	12962 <mp_obj_str_binary_op+0x11a>
        mp_int_t n;
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   128f6:	687b      	ldr	r3, [r7, #4]
   128f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
   128fc:	4611      	mov	r1, r2
   128fe:	4618      	mov	r0, r3
   12900:	f7fb f99e 	bl	dc40 <mp_obj_get_int_maybe>
   12904:	4603      	mov	r3, r0
   12906:	f083 0301 	eor.w	r3, r3, #1
   1290a:	b2db      	uxtb	r3, r3
   1290c:	2b00      	cmp	r3, #0
   1290e:	d001      	beq.n	12914 <mp_obj_str_binary_op+0xcc>
            return MP_OBJ_NULL; // op not supported
   12910:	2300      	movs	r3, #0
   12912:	e106      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
        }
        if (n <= 0) {
   12914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12916:	2b00      	cmp	r3, #0
   12918:	dc07      	bgt.n	1292a <mp_obj_str_binary_op+0xe2>
            if (lhs_type == &mp_type_str) {
   1291a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1291c:	4a85      	ldr	r2, [pc, #532]	; (12b34 <mp_obj_str_binary_op+0x2ec>)
   1291e:	4293      	cmp	r3, r2
   12920:	d101      	bne.n	12926 <mp_obj_str_binary_op+0xde>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   12922:	2306      	movs	r3, #6
   12924:	e0fd      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
            } else {
                return mp_const_empty_bytes;
   12926:	4b84      	ldr	r3, [pc, #528]	; (12b38 <mp_obj_str_binary_op+0x2f0>)
   12928:	e0fb      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
            }
        }
        vstr_t vstr;
        vstr_init_len(&vstr, lhs_len * n);
   1292a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1292c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1292e:	fb02 f203 	mul.w	r2, r2, r3
   12932:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12936:	4611      	mov	r1, r2
   12938:	4618      	mov	r0, r3
   1293a:	f7ee fd11 	bl	1360 <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   1293e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12942:	4619      	mov	r1, r3
   12944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12946:	9300      	str	r3, [sp, #0]
   12948:	460b      	mov	r3, r1
   1294a:	2101      	movs	r1, #1
   1294c:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1294e:	f004 fef3 	bl	17738 <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12952:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12956:	4619      	mov	r1, r3
   12958:	6d38      	ldr	r0, [r7, #80]	; 0x50
   1295a:	f002 fcbb 	bl	152d4 <mp_obj_new_str_from_vstr>
   1295e:	4603      	mov	r3, r0
   12960:	e0df      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
    // easy to "fix" this with a bit of extra logic below, but it costs code
    // size and execution time so we don't.

    const byte *rhs_data;
    size_t rhs_len;
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   12962:	687b      	ldr	r3, [r7, #4]
   12964:	4618      	mov	r0, r3
   12966:	f7fa ff31 	bl	d7cc <mp_obj_get_type>
   1296a:	4602      	mov	r2, r0
   1296c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1296e:	429a      	cmp	r2, r3
   12970:	d11b      	bne.n	129aa <mp_obj_str_binary_op+0x162>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   12972:	687b      	ldr	r3, [r7, #4]
   12974:	4618      	mov	r0, r3
   12976:	f7ff fc2d 	bl	121d4 <MP_OBJ_IS_QSTR>
   1297a:	4603      	mov	r3, r0
   1297c:	2b00      	cmp	r3, #0
   1297e:	d009      	beq.n	12994 <mp_obj_str_binary_op+0x14c>
   12980:	687b      	ldr	r3, [r7, #4]
   12982:	089b      	lsrs	r3, r3, #2
   12984:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   12988:	4611      	mov	r1, r2
   1298a:	4618      	mov	r0, r3
   1298c:	f7ee fc4e 	bl	122c <qstr_data>
   12990:	6578      	str	r0, [r7, #84]	; 0x54
   12992:	e005      	b.n	129a0 <mp_obj_str_binary_op+0x158>
   12994:	687b      	ldr	r3, [r7, #4]
   12996:	689b      	ldr	r3, [r3, #8]
   12998:	62fb      	str	r3, [r7, #44]	; 0x2c
   1299a:	687b      	ldr	r3, [r7, #4]
   1299c:	68db      	ldr	r3, [r3, #12]
   1299e:	657b      	str	r3, [r7, #84]	; 0x54
        rhs_data = rhs_data_;
   129a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   129a2:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = rhs_len_;
   129a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   129a6:	65bb      	str	r3, [r7, #88]	; 0x58
   129a8:	e01b      	b.n	129e2 <mp_obj_str_binary_op+0x19a>
    } else if (lhs_type == &mp_type_bytes) {
   129aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   129ac:	4a63      	ldr	r2, [pc, #396]	; (12b3c <mp_obj_str_binary_op+0x2f4>)
   129ae:	4293      	cmp	r3, r2
   129b0:	d113      	bne.n	129da <mp_obj_str_binary_op+0x192>
        mp_buffer_info_t bufinfo;
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   129b2:	687b      	ldr	r3, [r7, #4]
   129b4:	f107 0120 	add.w	r1, r7, #32
   129b8:	2201      	movs	r2, #1
   129ba:	4618      	mov	r0, r3
   129bc:	f7fb faf6 	bl	dfac <mp_get_buffer>
   129c0:	4603      	mov	r3, r0
   129c2:	f083 0301 	eor.w	r3, r3, #1
   129c6:	b2db      	uxtb	r3, r3
   129c8:	2b00      	cmp	r3, #0
   129ca:	d001      	beq.n	129d0 <mp_obj_str_binary_op+0x188>
            return MP_OBJ_NULL; // op not supported
   129cc:	2300      	movs	r3, #0
   129ce:	e0a8      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
        }
        rhs_data = bufinfo.buf;
   129d0:	6a3b      	ldr	r3, [r7, #32]
   129d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = bufinfo.len;
   129d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129d6:	65bb      	str	r3, [r7, #88]	; 0x58
   129d8:	e003      	b.n	129e2 <mp_obj_str_binary_op+0x19a>
    } else {
        // LHS is str and RHS has an incompatible type
        // (except if operation is EQUAL, but that's handled by mp_obj_equal)
        bad_implicit_conversion(rhs_in);
   129da:	687b      	ldr	r3, [r7, #4]
   129dc:	4618      	mov	r0, r3
   129de:	f002 fdcd 	bl	1557c <bad_implicit_conversion>
    }

    switch (op) {
   129e2:	68fb      	ldr	r3, [r7, #12]
   129e4:	2b22      	cmp	r3, #34	; 0x22
   129e6:	f200 809b 	bhi.w	12b20 <mp_obj_str_binary_op+0x2d8>
   129ea:	a201      	add	r2, pc, #4	; (adr r2, 129f0 <mp_obj_str_binary_op+0x1a8>)
   129ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   129f0:	00012b05 	.word	0x00012b05
   129f4:	00012b05 	.word	0x00012b05
   129f8:	00012b05 	.word	0x00012b05
   129fc:	00012b05 	.word	0x00012b05
   12a00:	00012b05 	.word	0x00012b05
   12a04:	00012b21 	.word	0x00012b21
   12a08:	00012b21 	.word	0x00012b21
   12a0c:	00012b21 	.word	0x00012b21
   12a10:	00012b21 	.word	0x00012b21
   12a14:	00012b21 	.word	0x00012b21
   12a18:	00012b21 	.word	0x00012b21
   12a1c:	00012b21 	.word	0x00012b21
   12a20:	00012b21 	.word	0x00012b21
   12a24:	00012b21 	.word	0x00012b21
   12a28:	00012a7d 	.word	0x00012a7d
   12a2c:	00012b21 	.word	0x00012b21
   12a30:	00012b21 	.word	0x00012b21
   12a34:	00012b21 	.word	0x00012b21
   12a38:	00012b21 	.word	0x00012b21
   12a3c:	00012b21 	.word	0x00012b21
   12a40:	00012b21 	.word	0x00012b21
   12a44:	00012b21 	.word	0x00012b21
   12a48:	00012b21 	.word	0x00012b21
   12a4c:	00012b21 	.word	0x00012b21
   12a50:	00012b21 	.word	0x00012b21
   12a54:	00012b21 	.word	0x00012b21
   12a58:	00012a7d 	.word	0x00012a7d
   12a5c:	00012b21 	.word	0x00012b21
   12a60:	00012b21 	.word	0x00012b21
   12a64:	00012b21 	.word	0x00012b21
   12a68:	00012b21 	.word	0x00012b21
   12a6c:	00012b21 	.word	0x00012b21
   12a70:	00012b21 	.word	0x00012b21
   12a74:	00012b21 	.word	0x00012b21
   12a78:	00012adf 	.word	0x00012adf
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   12a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12a7e:	2b00      	cmp	r3, #0
   12a80:	d109      	bne.n	12a96 <mp_obj_str_binary_op+0x24e>
   12a82:	687b      	ldr	r3, [r7, #4]
   12a84:	4618      	mov	r0, r3
   12a86:	f7fa fea1 	bl	d7cc <mp_obj_get_type>
   12a8a:	4602      	mov	r2, r0
   12a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12a8e:	429a      	cmp	r2, r3
   12a90:	d101      	bne.n	12a96 <mp_obj_str_binary_op+0x24e>
                return rhs_in;
   12a92:	687b      	ldr	r3, [r7, #4]
   12a94:	e045      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
            }
            if (rhs_len == 0) {
   12a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12a98:	2b00      	cmp	r3, #0
   12a9a:	d101      	bne.n	12aa0 <mp_obj_str_binary_op+0x258>
                return lhs_in;
   12a9c:	68bb      	ldr	r3, [r7, #8]
   12a9e:	e040      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
            }

            vstr_t vstr;
            vstr_init_len(&vstr, lhs_len + rhs_len);
   12aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12aa4:	441a      	add	r2, r3
   12aa6:	f107 0310 	add.w	r3, r7, #16
   12aaa:	4611      	mov	r1, r2
   12aac:	4618      	mov	r0, r3
   12aae:	f7ee fc57 	bl	1360 <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   12ab2:	69bb      	ldr	r3, [r7, #24]
   12ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12ab6:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12ab8:	4618      	mov	r0, r3
   12aba:	f009 f92b 	bl	1bd14 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   12abe:	69ba      	ldr	r2, [r7, #24]
   12ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12ac2:	4413      	add	r3, r2
   12ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
   12ac6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12ac8:	4618      	mov	r0, r3
   12aca:	f009 f923 	bl	1bd14 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12ace:	f107 0310 	add.w	r3, r7, #16
   12ad2:	4619      	mov	r1, r3
   12ad4:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12ad6:	f002 fbfd 	bl	152d4 <mp_obj_new_str_from_vstr>
   12ada:	4603      	mov	r3, r0
   12adc:	e021      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
        }

        case MP_BINARY_OP_CONTAINS:
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   12ade:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   12ae0:	2301      	movs	r3, #1
   12ae2:	9300      	str	r3, [sp, #0]
   12ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12ae6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   12ae8:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12aea:	f7ff fe73 	bl	127d4 <find_subbytes>
   12aee:	4603      	mov	r3, r0
   12af0:	2b00      	cmp	r3, #0
   12af2:	bf14      	ite	ne
   12af4:	2301      	movne	r3, #1
   12af6:	2300      	moveq	r3, #0
   12af8:	b2db      	uxtb	r3, r3
   12afa:	4618      	mov	r0, r3
   12afc:	f7ff fb8e 	bl	1221c <mp_obj_new_bool>
   12b00:	4603      	mov	r3, r0
   12b02:	e00e      	b.n	12b22 <mp_obj_str_binary_op+0x2da>
        case MP_BINARY_OP_EQUAL: // This will be passed only for bytes, str is dealt with in mp_obj_equal()
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   12b04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12b08:	9300      	str	r3, [sp, #0]
   12b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12b0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12b0e:	68f8      	ldr	r0, [r7, #12]
   12b10:	f004 fe76 	bl	17800 <mp_seq_cmp_bytes>
   12b14:	4603      	mov	r3, r0
   12b16:	4618      	mov	r0, r3
   12b18:	f7ff fb80 	bl	1221c <mp_obj_new_bool>
   12b1c:	4603      	mov	r3, r0
   12b1e:	e000      	b.n	12b22 <mp_obj_str_binary_op+0x2da>

        default:
            return MP_OBJ_NULL; // op not supported
   12b20:	2300      	movs	r3, #0
    }
}
   12b22:	4618      	mov	r0, r3
   12b24:	3768      	adds	r7, #104	; 0x68
   12b26:	46bd      	mov	sp, r7
   12b28:	bd80      	pop	{r7, pc}
   12b2a:	bf00      	nop
   12b2c:	00021db4 	.word	0x00021db4
   12b30:	000200e0 	.word	0x000200e0
   12b34:	00021b30 	.word	0x00021b30
   12b38:	00021bac 	.word	0x00021bac
   12b3c:	00021b6c 	.word	0x00021b6c

00012b40 <str_index_to_ptr>:

#if !MICROPY_PY_BUILTINS_STR_UNICODE
// objstrunicode defines own version
const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, bool is_slice) {
   12b40:	b580      	push	{r7, lr}
   12b42:	b086      	sub	sp, #24
   12b44:	af00      	add	r7, sp, #0
   12b46:	60f8      	str	r0, [r7, #12]
   12b48:	60b9      	str	r1, [r7, #8]
   12b4a:	607a      	str	r2, [r7, #4]
   12b4c:	603b      	str	r3, [r7, #0]
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
   12b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
   12b52:	683a      	ldr	r2, [r7, #0]
   12b54:	6879      	ldr	r1, [r7, #4]
   12b56:	68f8      	ldr	r0, [r7, #12]
   12b58:	f7fb f902 	bl	dd60 <mp_get_index>
   12b5c:	6178      	str	r0, [r7, #20]
    return self_data + index_val;
   12b5e:	68ba      	ldr	r2, [r7, #8]
   12b60:	697b      	ldr	r3, [r7, #20]
   12b62:	4413      	add	r3, r2
}
   12b64:	4618      	mov	r0, r3
   12b66:	3718      	adds	r7, #24
   12b68:	46bd      	mov	sp, r7
   12b6a:	bd80      	pop	{r7, pc}

00012b6c <bytes_subscr>:
#endif

// This is used for both bytes and 8-bit strings. This is not used for unicode strings.
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   12b6c:	b580      	push	{r7, lr}
   12b6e:	b088      	sub	sp, #32
   12b70:	af00      	add	r7, sp, #0
   12b72:	60f8      	str	r0, [r7, #12]
   12b74:	60b9      	str	r1, [r7, #8]
   12b76:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   12b78:	68f8      	ldr	r0, [r7, #12]
   12b7a:	f7fa fe27 	bl	d7cc <mp_obj_get_type>
   12b7e:	61b8      	str	r0, [r7, #24]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   12b80:	68f8      	ldr	r0, [r7, #12]
   12b82:	f7ff fb27 	bl	121d4 <MP_OBJ_IS_QSTR>
   12b86:	4603      	mov	r3, r0
   12b88:	2b00      	cmp	r3, #0
   12b8a:	d009      	beq.n	12ba0 <bytes_subscr+0x34>
   12b8c:	68fb      	ldr	r3, [r7, #12]
   12b8e:	089b      	lsrs	r3, r3, #2
   12b90:	f107 0210 	add.w	r2, r7, #16
   12b94:	4611      	mov	r1, r2
   12b96:	4618      	mov	r0, r3
   12b98:	f7ee fb48 	bl	122c <qstr_data>
   12b9c:	61f8      	str	r0, [r7, #28]
   12b9e:	e005      	b.n	12bac <bytes_subscr+0x40>
   12ba0:	68fb      	ldr	r3, [r7, #12]
   12ba2:	689b      	ldr	r3, [r3, #8]
   12ba4:	613b      	str	r3, [r7, #16]
   12ba6:	68fb      	ldr	r3, [r7, #12]
   12ba8:	68db      	ldr	r3, [r3, #12]
   12baa:	61fb      	str	r3, [r7, #28]
    if (value == MP_OBJ_SENTINEL) {
   12bac:	687b      	ldr	r3, [r7, #4]
   12bae:	2b08      	cmp	r3, #8
   12bb0:	d11b      	bne.n	12bea <bytes_subscr+0x7e>
                mp_raise_NotImplementedError("only slices with step=1 (aka None) are supported");
            }
            return mp_obj_new_str_of_type(type, self_data + slice.start, slice.stop - slice.start);
        }
#endif
        size_t index_val = mp_get_index(type, self_len, index, false);
   12bb2:	6939      	ldr	r1, [r7, #16]
   12bb4:	2300      	movs	r3, #0
   12bb6:	68ba      	ldr	r2, [r7, #8]
   12bb8:	69b8      	ldr	r0, [r7, #24]
   12bba:	f7fb f8d1 	bl	dd60 <mp_get_index>
   12bbe:	6178      	str	r0, [r7, #20]
        // If we have unicode enabled the type will always be bytes, so take the short cut.
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
   12bc0:	69bb      	ldr	r3, [r7, #24]
   12bc2:	4a0c      	ldr	r2, [pc, #48]	; (12bf4 <bytes_subscr+0x88>)
   12bc4:	4293      	cmp	r3, r2
   12bc6:	d107      	bne.n	12bd8 <bytes_subscr+0x6c>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
   12bc8:	69fa      	ldr	r2, [r7, #28]
   12bca:	697b      	ldr	r3, [r7, #20]
   12bcc:	4413      	add	r3, r2
   12bce:	781b      	ldrb	r3, [r3, #0]
   12bd0:	005b      	lsls	r3, r3, #1
   12bd2:	f043 0301 	orr.w	r3, r3, #1
   12bd6:	e009      	b.n	12bec <bytes_subscr+0x80>
        } else {
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
   12bd8:	69fa      	ldr	r2, [r7, #28]
   12bda:	697b      	ldr	r3, [r7, #20]
   12bdc:	4413      	add	r3, r2
   12bde:	2101      	movs	r1, #1
   12be0:	4618      	mov	r0, r3
   12be2:	f002 fb65 	bl	152b0 <mp_obj_new_str_via_qstr>
   12be6:	4603      	mov	r3, r0
   12be8:	e000      	b.n	12bec <bytes_subscr+0x80>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   12bea:	2300      	movs	r3, #0
    }
}
   12bec:	4618      	mov	r0, r3
   12bee:	3720      	adds	r7, #32
   12bf0:	46bd      	mov	sp, r7
   12bf2:	bd80      	pop	{r7, pc}
   12bf4:	00021b6c 	.word	0x00021b6c

00012bf8 <str_join>:

STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
   12bf8:	b590      	push	{r4, r7, lr}
   12bfa:	b093      	sub	sp, #76	; 0x4c
   12bfc:	af00      	add	r7, sp, #0
   12bfe:	6078      	str	r0, [r7, #4]
   12c00:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
   12c02:	6878      	ldr	r0, [r7, #4]
   12c04:	f7ff fae6 	bl	121d4 <MP_OBJ_IS_QSTR>
   12c08:	4603      	mov	r3, r0
   12c0a:	f083 0301 	eor.w	r3, r3, #1
   12c0e:	b2db      	uxtb	r3, r3
   12c10:	2b00      	cmp	r3, #0
   12c12:	d015      	beq.n	12c40 <str_join+0x48>
   12c14:	6878      	ldr	r0, [r7, #4]
   12c16:	f7ff faef 	bl	121f8 <MP_OBJ_IS_OBJ>
   12c1a:	4603      	mov	r3, r0
   12c1c:	f083 0301 	eor.w	r3, r3, #1
   12c20:	b2db      	uxtb	r3, r3
   12c22:	2b00      	cmp	r3, #0
   12c24:	d105      	bne.n	12c32 <str_join+0x3a>
   12c26:	687b      	ldr	r3, [r7, #4]
   12c28:	681b      	ldr	r3, [r3, #0]
   12c2a:	699b      	ldr	r3, [r3, #24]
   12c2c:	4a78      	ldr	r2, [pc, #480]	; (12e10 <str_join+0x218>)
   12c2e:	4293      	cmp	r3, r2
   12c30:	d006      	beq.n	12c40 <str_join+0x48>
   12c32:	4b78      	ldr	r3, [pc, #480]	; (12e14 <str_join+0x21c>)
   12c34:	4a78      	ldr	r2, [pc, #480]	; (12e18 <str_join+0x220>)
   12c36:	f240 11bb 	movw	r1, #443	; 0x1bb
   12c3a:	4878      	ldr	r0, [pc, #480]	; (12e1c <str_join+0x224>)
   12c3c:	f008 fbae 	bl	1b39c <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   12c40:	6878      	ldr	r0, [r7, #4]
   12c42:	f7fa fdc3 	bl	d7cc <mp_obj_get_type>
   12c46:	62b8      	str	r0, [r7, #40]	; 0x28

    // get separation string
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
   12c48:	6878      	ldr	r0, [r7, #4]
   12c4a:	f7ff fac3 	bl	121d4 <MP_OBJ_IS_QSTR>
   12c4e:	4603      	mov	r3, r0
   12c50:	2b00      	cmp	r3, #0
   12c52:	d009      	beq.n	12c68 <str_join+0x70>
   12c54:	687b      	ldr	r3, [r7, #4]
   12c56:	089b      	lsrs	r3, r3, #2
   12c58:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12c5c:	4611      	mov	r1, r2
   12c5e:	4618      	mov	r0, r3
   12c60:	f7ee fae4 	bl	122c <qstr_data>
   12c64:	6478      	str	r0, [r7, #68]	; 0x44
   12c66:	e005      	b.n	12c74 <str_join+0x7c>
   12c68:	687b      	ldr	r3, [r7, #4]
   12c6a:	689b      	ldr	r3, [r3, #8]
   12c6c:	627b      	str	r3, [r7, #36]	; 0x24
   12c6e:	687b      	ldr	r3, [r7, #4]
   12c70:	68db      	ldr	r3, [r3, #12]
   12c72:	647b      	str	r3, [r7, #68]	; 0x44

    // process args
    size_t seq_len;
    mp_obj_t *seq_items;

    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
   12c74:	683b      	ldr	r3, [r7, #0]
   12c76:	4618      	mov	r0, r3
   12c78:	f7ff fabe 	bl	121f8 <MP_OBJ_IS_OBJ>
   12c7c:	4603      	mov	r3, r0
   12c7e:	f083 0301 	eor.w	r3, r3, #1
   12c82:	b2db      	uxtb	r3, r3
   12c84:	2b00      	cmp	r3, #0
   12c86:	d104      	bne.n	12c92 <str_join+0x9a>
   12c88:	683b      	ldr	r3, [r7, #0]
   12c8a:	681b      	ldr	r3, [r3, #0]
   12c8c:	4a64      	ldr	r2, [pc, #400]	; (12e20 <str_join+0x228>)
   12c8e:	4293      	cmp	r3, r2
   12c90:	d017      	beq.n	12cc2 <str_join+0xca>
   12c92:	683b      	ldr	r3, [r7, #0]
   12c94:	4618      	mov	r0, r3
   12c96:	f7ff faaf 	bl	121f8 <MP_OBJ_IS_OBJ>
   12c9a:	4603      	mov	r3, r0
   12c9c:	f083 0301 	eor.w	r3, r3, #1
   12ca0:	b2db      	uxtb	r3, r3
   12ca2:	2b00      	cmp	r3, #0
   12ca4:	d104      	bne.n	12cb0 <str_join+0xb8>
   12ca6:	683b      	ldr	r3, [r7, #0]
   12ca8:	681b      	ldr	r3, [r3, #0]
   12caa:	4a5e      	ldr	r2, [pc, #376]	; (12e24 <str_join+0x22c>)
   12cac:	4293      	cmp	r3, r2
   12cae:	d008      	beq.n	12cc2 <str_join+0xca>
        // arg is not a list nor a tuple, try to convert it to a list
        // TODO: Try to optimize?
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
   12cb0:	4b5b      	ldr	r3, [pc, #364]	; (12e20 <str_join+0x228>)
   12cb2:	68dc      	ldr	r4, [r3, #12]
   12cb4:	463b      	mov	r3, r7
   12cb6:	2200      	movs	r2, #0
   12cb8:	2101      	movs	r1, #1
   12cba:	4859      	ldr	r0, [pc, #356]	; (12e20 <str_join+0x228>)
   12cbc:	47a0      	blx	r4
   12cbe:	4603      	mov	r3, r0
   12cc0:	603b      	str	r3, [r7, #0]
    }
    mp_obj_get_array(arg, &seq_len, &seq_items);
   12cc2:	683b      	ldr	r3, [r7, #0]
   12cc4:	f107 021c 	add.w	r2, r7, #28
   12cc8:	f107 0120 	add.w	r1, r7, #32
   12ccc:	4618      	mov	r0, r3
   12cce:	f7fa fff7 	bl	dcc0 <mp_obj_get_array>

    // count required length
    size_t required_len = 0;
   12cd2:	2300      	movs	r3, #0
   12cd4:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12cd6:	2300      	movs	r3, #0
   12cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   12cda:	e039      	b.n	12d50 <str_join+0x158>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
   12cdc:	69fa      	ldr	r2, [r7, #28]
   12cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ce0:	009b      	lsls	r3, r3, #2
   12ce2:	4413      	add	r3, r2
   12ce4:	681b      	ldr	r3, [r3, #0]
   12ce6:	4618      	mov	r0, r3
   12ce8:	f7fa fd70 	bl	d7cc <mp_obj_get_type>
   12cec:	4602      	mov	r2, r0
   12cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cf0:	429a      	cmp	r2, r3
   12cf2:	d002      	beq.n	12cfa <str_join+0x102>
            mp_raise_TypeError(
   12cf4:	484c      	ldr	r0, [pc, #304]	; (12e28 <str_join+0x230>)
   12cf6:	f7fa f94f 	bl	cf98 <mp_raise_TypeError>
                "join expects a list of str/bytes objects consistent with self object");
        }
        if (i > 0) {
   12cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12cfc:	2b00      	cmp	r3, #0
   12cfe:	d003      	beq.n	12d08 <str_join+0x110>
            required_len += sep_len;
   12d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12d04:	4413      	add	r3, r2
   12d06:	643b      	str	r3, [r7, #64]	; 0x40
        }
        GET_STR_LEN(seq_items[i], l);
   12d08:	69fa      	ldr	r2, [r7, #28]
   12d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d0c:	009b      	lsls	r3, r3, #2
   12d0e:	4413      	add	r3, r2
   12d10:	681b      	ldr	r3, [r3, #0]
   12d12:	4618      	mov	r0, r3
   12d14:	f7ff fa5e 	bl	121d4 <MP_OBJ_IS_QSTR>
   12d18:	4603      	mov	r3, r0
   12d1a:	2b00      	cmp	r3, #0
   12d1c:	d00a      	beq.n	12d34 <str_join+0x13c>
   12d1e:	69fa      	ldr	r2, [r7, #28]
   12d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d22:	009b      	lsls	r3, r3, #2
   12d24:	4413      	add	r3, r2
   12d26:	681b      	ldr	r3, [r3, #0]
   12d28:	089b      	lsrs	r3, r3, #2
   12d2a:	4618      	mov	r0, r3
   12d2c:	f7ee fa60 	bl	11f0 <qstr_len>
   12d30:	63b8      	str	r0, [r7, #56]	; 0x38
   12d32:	e006      	b.n	12d42 <str_join+0x14a>
   12d34:	69fa      	ldr	r2, [r7, #28]
   12d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d38:	009b      	lsls	r3, r3, #2
   12d3a:	4413      	add	r3, r2
   12d3c:	681b      	ldr	r3, [r3, #0]
   12d3e:	689b      	ldr	r3, [r3, #8]
   12d40:	63bb      	str	r3, [r7, #56]	; 0x38
        required_len += l;
   12d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d46:	4413      	add	r3, r2
   12d48:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d4c:	3301      	adds	r3, #1
   12d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   12d50:	6a3b      	ldr	r3, [r7, #32]
   12d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12d54:	429a      	cmp	r2, r3
   12d56:	d3c1      	bcc.n	12cdc <str_join+0xe4>
    }

    // make joined string
    vstr_t vstr;
    vstr_init_len(&vstr, required_len);
   12d58:	f107 030c 	add.w	r3, r7, #12
   12d5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
   12d5e:	4618      	mov	r0, r3
   12d60:	f7ee fafe 	bl	1360 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12d68:	2300      	movs	r3, #0
   12d6a:	633b      	str	r3, [r7, #48]	; 0x30
   12d6c:	e040      	b.n	12df0 <str_join+0x1f8>
        if (i > 0) {
   12d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12d70:	2b00      	cmp	r3, #0
   12d72:	d009      	beq.n	12d88 <str_join+0x190>
            memcpy(data, sep_str, sep_len);
   12d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d76:	461a      	mov	r2, r3
   12d78:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12d7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12d7c:	f008 ffca 	bl	1bd14 <memcpy>
            data += sep_len;
   12d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12d84:	4413      	add	r3, r2
   12d86:	637b      	str	r3, [r7, #52]	; 0x34
        }
        GET_STR_DATA_LEN(seq_items[i], s, l);
   12d88:	69fa      	ldr	r2, [r7, #28]
   12d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12d8c:	009b      	lsls	r3, r3, #2
   12d8e:	4413      	add	r3, r2
   12d90:	681b      	ldr	r3, [r3, #0]
   12d92:	4618      	mov	r0, r3
   12d94:	f7ff fa1e 	bl	121d4 <MP_OBJ_IS_QSTR>
   12d98:	4603      	mov	r3, r0
   12d9a:	2b00      	cmp	r3, #0
   12d9c:	d00d      	beq.n	12dba <str_join+0x1c2>
   12d9e:	69fa      	ldr	r2, [r7, #28]
   12da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12da2:	009b      	lsls	r3, r3, #2
   12da4:	4413      	add	r3, r2
   12da6:	681b      	ldr	r3, [r3, #0]
   12da8:	089b      	lsrs	r3, r3, #2
   12daa:	f107 0208 	add.w	r2, r7, #8
   12dae:	4611      	mov	r1, r2
   12db0:	4618      	mov	r0, r3
   12db2:	f7ee fa3b 	bl	122c <qstr_data>
   12db6:	62f8      	str	r0, [r7, #44]	; 0x2c
   12db8:	e00d      	b.n	12dd6 <str_join+0x1de>
   12dba:	69fa      	ldr	r2, [r7, #28]
   12dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12dbe:	009b      	lsls	r3, r3, #2
   12dc0:	4413      	add	r3, r2
   12dc2:	681b      	ldr	r3, [r3, #0]
   12dc4:	689b      	ldr	r3, [r3, #8]
   12dc6:	60bb      	str	r3, [r7, #8]
   12dc8:	69fa      	ldr	r2, [r7, #28]
   12dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12dcc:	009b      	lsls	r3, r3, #2
   12dce:	4413      	add	r3, r2
   12dd0:	681b      	ldr	r3, [r3, #0]
   12dd2:	68db      	ldr	r3, [r3, #12]
   12dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        memcpy(data, s, l);
   12dd6:	68bb      	ldr	r3, [r7, #8]
   12dd8:	461a      	mov	r2, r3
   12dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12ddc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12dde:	f008 ff99 	bl	1bd14 <memcpy>
        data += l;
   12de2:	68bb      	ldr	r3, [r7, #8]
   12de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12de6:	4413      	add	r3, r2
   12de8:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12dec:	3301      	adds	r3, #1
   12dee:	633b      	str	r3, [r7, #48]	; 0x30
   12df0:	6a3b      	ldr	r3, [r7, #32]
   12df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12df4:	429a      	cmp	r2, r3
   12df6:	d3ba      	bcc.n	12d6e <str_join+0x176>
    }

    // return joined string
    return mp_obj_new_str_from_vstr(self_type, &vstr);
   12df8:	f107 030c 	add.w	r3, r7, #12
   12dfc:	4619      	mov	r1, r3
   12dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12e00:	f002 fa68 	bl	152d4 <mp_obj_new_str_from_vstr>
   12e04:	4603      	mov	r3, r0
}
   12e06:	4618      	mov	r0, r3
   12e08:	374c      	adds	r7, #76	; 0x4c
   12e0a:	46bd      	mov	sp, r7
   12e0c:	bd90      	pop	{r4, r7, pc}
   12e0e:	bf00      	nop
   12e10:	00012849 	.word	0x00012849
   12e14:	000215d0 	.word	0x000215d0
   12e18:	00021bdc 	.word	0x00021bdc
   12e1c:	00021658 	.word	0x00021658
   12e20:	000211a8 	.word	0x000211a8
   12e24:	00021db4 	.word	0x00021db4
   12e28:	0002166c 	.word	0x0002166c

00012e2c <mp_obj_str_split>:
MP_DEFINE_CONST_FUN_OBJ_2(str_join_obj, str_join);

mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   12e2c:	b580      	push	{r7, lr}
   12e2e:	b08e      	sub	sp, #56	; 0x38
   12e30:	af00      	add	r7, sp, #0
   12e32:	6078      	str	r0, [r7, #4]
   12e34:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12e36:	683b      	ldr	r3, [r7, #0]
   12e38:	681b      	ldr	r3, [r3, #0]
   12e3a:	4618      	mov	r0, r3
   12e3c:	f7fa fcc6 	bl	d7cc <mp_obj_get_type>
   12e40:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_int_t splits = -1;
   12e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e46:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t sep = mp_const_none;
   12e48:	4b7b      	ldr	r3, [pc, #492]	; (13038 <mp_obj_str_split+0x20c>)
   12e4a:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_args > 1) {
   12e4c:	687b      	ldr	r3, [r7, #4]
   12e4e:	2b01      	cmp	r3, #1
   12e50:	d90c      	bls.n	12e6c <mp_obj_str_split+0x40>
        sep = args[1];
   12e52:	683b      	ldr	r3, [r7, #0]
   12e54:	685b      	ldr	r3, [r3, #4]
   12e56:	633b      	str	r3, [r7, #48]	; 0x30
        if (n_args > 2) {
   12e58:	687b      	ldr	r3, [r7, #4]
   12e5a:	2b02      	cmp	r3, #2
   12e5c:	d906      	bls.n	12e6c <mp_obj_str_split+0x40>
            splits = mp_obj_get_int(args[2]);
   12e5e:	683b      	ldr	r3, [r7, #0]
   12e60:	3308      	adds	r3, #8
   12e62:	681b      	ldr	r3, [r3, #0]
   12e64:	4618      	mov	r0, r3
   12e66:	f7fa fe8f 	bl	db88 <mp_obj_get_int>
   12e6a:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    mp_obj_t res = mp_obj_new_list(0, NULL);
   12e6c:	2100      	movs	r1, #0
   12e6e:	2000      	movs	r0, #0
   12e70:	f7fe fd2a 	bl	118c8 <mp_obj_new_list>
   12e74:	6278      	str	r0, [r7, #36]	; 0x24
    GET_STR_DATA_LEN(args[0], s, len);
   12e76:	683b      	ldr	r3, [r7, #0]
   12e78:	681b      	ldr	r3, [r3, #0]
   12e7a:	4618      	mov	r0, r3
   12e7c:	f7ff f9aa 	bl	121d4 <MP_OBJ_IS_QSTR>
   12e80:	4603      	mov	r3, r0
   12e82:	2b00      	cmp	r3, #0
   12e84:	d00a      	beq.n	12e9c <mp_obj_str_split+0x70>
   12e86:	683b      	ldr	r3, [r7, #0]
   12e88:	681b      	ldr	r3, [r3, #0]
   12e8a:	089b      	lsrs	r3, r3, #2
   12e8c:	f107 0210 	add.w	r2, r7, #16
   12e90:	4611      	mov	r1, r2
   12e92:	4618      	mov	r0, r3
   12e94:	f7ee f9ca 	bl	122c <qstr_data>
   12e98:	62f8      	str	r0, [r7, #44]	; 0x2c
   12e9a:	e007      	b.n	12eac <mp_obj_str_split+0x80>
   12e9c:	683b      	ldr	r3, [r7, #0]
   12e9e:	681b      	ldr	r3, [r3, #0]
   12ea0:	689b      	ldr	r3, [r3, #8]
   12ea2:	613b      	str	r3, [r7, #16]
   12ea4:	683b      	ldr	r3, [r7, #0]
   12ea6:	681b      	ldr	r3, [r3, #0]
   12ea8:	68db      	ldr	r3, [r3, #12]
   12eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte *top = s + len;
   12eac:	693b      	ldr	r3, [r7, #16]
   12eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12eb0:	4413      	add	r3, r2
   12eb2:	623b      	str	r3, [r7, #32]

    if (sep == mp_const_none) {
   12eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12eb6:	4a60      	ldr	r2, [pc, #384]	; (13038 <mp_obj_str_split+0x20c>)
   12eb8:	4293      	cmp	r3, r2
   12eba:	d167      	bne.n	12f8c <mp_obj_str_split+0x160>
        // sep not given, so separate on whitespace

        // Initial whitespace is not counted as split, so we pre-do it
        while (s < top && unichar_isspace(*s)) s++;
   12ebc:	e002      	b.n	12ec4 <mp_obj_str_split+0x98>
   12ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ec0:	3301      	adds	r3, #1
   12ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
   12ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12ec6:	6a3b      	ldr	r3, [r7, #32]
   12ec8:	429a      	cmp	r2, r3
   12eca:	d244      	bcs.n	12f56 <mp_obj_str_split+0x12a>
   12ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ece:	781b      	ldrb	r3, [r3, #0]
   12ed0:	4618      	mov	r0, r3
   12ed2:	f7ef fa63 	bl	239c <unichar_isspace>
   12ed6:	4603      	mov	r3, r0
   12ed8:	2b00      	cmp	r3, #0
   12eda:	d1f0      	bne.n	12ebe <mp_obj_str_split+0x92>
        while (s < top && splits != 0) {
   12edc:	e03b      	b.n	12f56 <mp_obj_str_split+0x12a>
            const byte *start = s;
   12ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ee0:	61fb      	str	r3, [r7, #28]
            while (s < top && !unichar_isspace(*s)) s++;
   12ee2:	e002      	b.n	12eea <mp_obj_str_split+0xbe>
   12ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ee6:	3301      	adds	r3, #1
   12ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   12eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12eec:	6a3b      	ldr	r3, [r7, #32]
   12eee:	429a      	cmp	r2, r3
   12ef0:	d20a      	bcs.n	12f08 <mp_obj_str_split+0xdc>
   12ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	4618      	mov	r0, r3
   12ef8:	f7ef fa50 	bl	239c <unichar_isspace>
   12efc:	4603      	mov	r3, r0
   12efe:	f083 0301 	eor.w	r3, r3, #1
   12f02:	b2db      	uxtb	r3, r3
   12f04:	2b00      	cmp	r3, #0
   12f06:	d1ed      	bne.n	12ee4 <mp_obj_str_split+0xb8>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f0a:	69fb      	ldr	r3, [r7, #28]
   12f0c:	1ad3      	subs	r3, r2, r3
   12f0e:	461a      	mov	r2, r3
   12f10:	69f9      	ldr	r1, [r7, #28]
   12f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12f14:	f002 f9b0 	bl	15278 <mp_obj_new_str_of_type>
   12f18:	4603      	mov	r3, r0
   12f1a:	4619      	mov	r1, r3
   12f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12f1e:	f7fe f841 	bl	10fa4 <mp_obj_list_append>
            if (s >= top) {
   12f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f24:	6a3b      	ldr	r3, [r7, #32]
   12f26:	429a      	cmp	r2, r3
   12f28:	d21d      	bcs.n	12f66 <mp_obj_str_split+0x13a>
                break;
            }
            while (s < top && unichar_isspace(*s)) s++;
   12f2a:	e002      	b.n	12f32 <mp_obj_str_split+0x106>
   12f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f2e:	3301      	adds	r3, #1
   12f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   12f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f34:	6a3b      	ldr	r3, [r7, #32]
   12f36:	429a      	cmp	r2, r3
   12f38:	d207      	bcs.n	12f4a <mp_obj_str_split+0x11e>
   12f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f3c:	781b      	ldrb	r3, [r3, #0]
   12f3e:	4618      	mov	r0, r3
   12f40:	f7ef fa2c 	bl	239c <unichar_isspace>
   12f44:	4603      	mov	r3, r0
   12f46:	2b00      	cmp	r3, #0
   12f48:	d1f0      	bne.n	12f2c <mp_obj_str_split+0x100>
            if (splits > 0) {
   12f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f4c:	2b00      	cmp	r3, #0
   12f4e:	dd02      	ble.n	12f56 <mp_obj_str_split+0x12a>
                splits--;
   12f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f52:	3b01      	subs	r3, #1
   12f54:	637b      	str	r3, [r7, #52]	; 0x34
        while (s < top && splits != 0) {
   12f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f58:	6a3b      	ldr	r3, [r7, #32]
   12f5a:	429a      	cmp	r2, r3
   12f5c:	d204      	bcs.n	12f68 <mp_obj_str_split+0x13c>
   12f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f60:	2b00      	cmp	r3, #0
   12f62:	d1bc      	bne.n	12ede <mp_obj_str_split+0xb2>
   12f64:	e000      	b.n	12f68 <mp_obj_str_split+0x13c>
                break;
   12f66:	bf00      	nop
            }
        }

        if (s < top) {
   12f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f6a:	6a3b      	ldr	r3, [r7, #32]
   12f6c:	429a      	cmp	r2, r3
   12f6e:	d25d      	bcs.n	1302c <mp_obj_str_split+0x200>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   12f70:	6a3a      	ldr	r2, [r7, #32]
   12f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f74:	1ad3      	subs	r3, r2, r3
   12f76:	461a      	mov	r2, r3
   12f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12f7c:	f002 f97c 	bl	15278 <mp_obj_new_str_of_type>
   12f80:	4603      	mov	r3, r0
   12f82:	4619      	mov	r1, r3
   12f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12f86:	f7fe f80d 	bl	10fa4 <mp_obj_list_append>
   12f8a:	e04f      	b.n	1302c <mp_obj_str_split+0x200>
        }

    } else {
        // sep given
        if (mp_obj_get_type(sep) != self_type) {
   12f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12f8e:	f7fa fc1d 	bl	d7cc <mp_obj_get_type>
   12f92:	4602      	mov	r2, r0
   12f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12f96:	429a      	cmp	r2, r3
   12f98:	d002      	beq.n	12fa0 <mp_obj_str_split+0x174>
            bad_implicit_conversion(sep);
   12f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12f9c:	f002 faee 	bl	1557c <bad_implicit_conversion>
        }

        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   12fa0:	f107 030c 	add.w	r3, r7, #12
   12fa4:	4619      	mov	r1, r3
   12fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12fa8:	f002 fb58 	bl	1565c <mp_obj_str_get_data>
   12fac:	61b8      	str	r0, [r7, #24]

        if (sep_len == 0) {
   12fae:	68fb      	ldr	r3, [r7, #12]
   12fb0:	2b00      	cmp	r3, #0
   12fb2:	d102      	bne.n	12fba <mp_obj_str_split+0x18e>
            mp_raise_ValueError("empty separator");
   12fb4:	4821      	ldr	r0, [pc, #132]	; (1303c <mp_obj_str_split+0x210>)
   12fb6:	f7f9 ffe5 	bl	cf84 <mp_raise_ValueError>
        }

        for (;;) {
            const byte *start = s;
   12fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12fbc:	617b      	str	r3, [r7, #20]
            for (;;) {
                if (splits == 0 || s + sep_len > top) {
   12fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12fc0:	2b00      	cmp	r3, #0
   12fc2:	d005      	beq.n	12fd0 <mp_obj_str_split+0x1a4>
   12fc4:	68fb      	ldr	r3, [r7, #12]
   12fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12fc8:	441a      	add	r2, r3
   12fca:	6a3b      	ldr	r3, [r7, #32]
   12fcc:	429a      	cmp	r2, r3
   12fce:	d902      	bls.n	12fd6 <mp_obj_str_split+0x1aa>
                    s = top;
   12fd0:	6a3b      	ldr	r3, [r7, #32]
   12fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   12fd4:	e00d      	b.n	12ff2 <mp_obj_str_split+0x1c6>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   12fd6:	68fb      	ldr	r3, [r7, #12]
   12fd8:	461a      	mov	r2, r3
   12fda:	69b9      	ldr	r1, [r7, #24]
   12fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12fde:	f008 ff81 	bl	1bee4 <memcmp>
   12fe2:	4603      	mov	r3, r0
   12fe4:	2b00      	cmp	r3, #0
   12fe6:	d003      	beq.n	12ff0 <mp_obj_str_split+0x1c4>
                    break;
                }
                s++;
   12fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12fea:	3301      	adds	r3, #1
   12fec:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
   12fee:	e7e6      	b.n	12fbe <mp_obj_str_split+0x192>
                    break;
   12ff0:	bf00      	nop
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12ff4:	697b      	ldr	r3, [r7, #20]
   12ff6:	1ad3      	subs	r3, r2, r3
   12ff8:	461a      	mov	r2, r3
   12ffa:	6979      	ldr	r1, [r7, #20]
   12ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12ffe:	f002 f93b 	bl	15278 <mp_obj_new_str_of_type>
   13002:	4603      	mov	r3, r0
   13004:	4619      	mov	r1, r3
   13006:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13008:	f7fd ffcc 	bl	10fa4 <mp_obj_list_append>
            if (s >= top) {
   1300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1300e:	6a3b      	ldr	r3, [r7, #32]
   13010:	429a      	cmp	r2, r3
   13012:	d20a      	bcs.n	1302a <mp_obj_str_split+0x1fe>
                break;
            }
            s += sep_len;
   13014:	68fb      	ldr	r3, [r7, #12]
   13016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13018:	4413      	add	r3, r2
   1301a:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (splits > 0) {
   1301c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1301e:	2b00      	cmp	r3, #0
   13020:	ddcb      	ble.n	12fba <mp_obj_str_split+0x18e>
                splits--;
   13022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13024:	3b01      	subs	r3, #1
   13026:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
   13028:	e7c7      	b.n	12fba <mp_obj_str_split+0x18e>
                break;
   1302a:	bf00      	nop
    }

    return res;
   1302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1302e:	4618      	mov	r0, r3
   13030:	3738      	adds	r7, #56	; 0x38
   13032:	46bd      	mov	sp, r7
   13034:	bd80      	pop	{r7, pc}
   13036:	bf00      	nop
   13038:	00021480 	.word	0x00021480
   1303c:	000216bc 	.word	0x000216bc

00013040 <str_rsplit>:
    return res;
}
MP_DEFINE_CONST_FUN_OBJ_KW(str_splitlines_obj, 1, str_splitlines);
#endif

STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   13040:	b590      	push	{r4, r7, lr}
   13042:	b091      	sub	sp, #68	; 0x44
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
   13048:	6039      	str	r1, [r7, #0]
    if (n_args < 3) {
   1304a:	687b      	ldr	r3, [r7, #4]
   1304c:	2b02      	cmp	r3, #2
   1304e:	d805      	bhi.n	1305c <str_rsplit+0x1c>
        // If we don't have split limit, it doesn't matter from which side
        // we split.
        return mp_obj_str_split(n_args, args);
   13050:	6839      	ldr	r1, [r7, #0]
   13052:	6878      	ldr	r0, [r7, #4]
   13054:	f7ff feea 	bl	12e2c <mp_obj_str_split>
   13058:	4603      	mov	r3, r0
   1305a:	e0cc      	b.n	131f6 <str_rsplit+0x1b6>
    }
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   1305c:	683b      	ldr	r3, [r7, #0]
   1305e:	681b      	ldr	r3, [r3, #0]
   13060:	4618      	mov	r0, r3
   13062:	f7fa fbb3 	bl	d7cc <mp_obj_get_type>
   13066:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_t sep = args[1];
   13068:	683b      	ldr	r3, [r7, #0]
   1306a:	685b      	ldr	r3, [r3, #4]
   1306c:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_STR_DATA_LEN(args[0], s, len);
   1306e:	683b      	ldr	r3, [r7, #0]
   13070:	681b      	ldr	r3, [r3, #0]
   13072:	4618      	mov	r0, r3
   13074:	f7ff f8ae 	bl	121d4 <MP_OBJ_IS_QSTR>
   13078:	4603      	mov	r3, r0
   1307a:	2b00      	cmp	r3, #0
   1307c:	d00a      	beq.n	13094 <str_rsplit+0x54>
   1307e:	683b      	ldr	r3, [r7, #0]
   13080:	681b      	ldr	r3, [r3, #0]
   13082:	089b      	lsrs	r3, r3, #2
   13084:	f107 0210 	add.w	r2, r7, #16
   13088:	4611      	mov	r1, r2
   1308a:	4618      	mov	r0, r3
   1308c:	f7ee f8ce 	bl	122c <qstr_data>
   13090:	63f8      	str	r0, [r7, #60]	; 0x3c
   13092:	e007      	b.n	130a4 <str_rsplit+0x64>
   13094:	683b      	ldr	r3, [r7, #0]
   13096:	681b      	ldr	r3, [r3, #0]
   13098:	689b      	ldr	r3, [r3, #8]
   1309a:	613b      	str	r3, [r7, #16]
   1309c:	683b      	ldr	r3, [r7, #0]
   1309e:	681b      	ldr	r3, [r3, #0]
   130a0:	68db      	ldr	r3, [r3, #12]
   130a2:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_int_t splits = mp_obj_get_int(args[2]);
   130a4:	683b      	ldr	r3, [r7, #0]
   130a6:	3308      	adds	r3, #8
   130a8:	681b      	ldr	r3, [r3, #0]
   130aa:	4618      	mov	r0, r3
   130ac:	f7fa fd6c 	bl	db88 <mp_obj_get_int>
   130b0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (splits < 0) {
   130b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   130b4:	2b00      	cmp	r3, #0
   130b6:	da05      	bge.n	130c4 <str_rsplit+0x84>
        // Negative limit means no limit, so delegate to split().
        return mp_obj_str_split(n_args, args);
   130b8:	6839      	ldr	r1, [r7, #0]
   130ba:	6878      	ldr	r0, [r7, #4]
   130bc:	f7ff feb6 	bl	12e2c <mp_obj_str_split>
   130c0:	4603      	mov	r3, r0
   130c2:	e098      	b.n	131f6 <str_rsplit+0x1b6>
    }

    mp_int_t org_splits = splits;
   130c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   130c6:	627b      	str	r3, [r7, #36]	; 0x24
    // Preallocate list to the max expected # of elements, as we
    // will fill it from the end.
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   130c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   130ca:	3301      	adds	r3, #1
   130cc:	2100      	movs	r1, #0
   130ce:	4618      	mov	r0, r3
   130d0:	f7fe fbfa 	bl	118c8 <mp_obj_new_list>
   130d4:	6238      	str	r0, [r7, #32]
    mp_int_t idx = splits;
   130d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   130d8:	637b      	str	r3, [r7, #52]	; 0x34

    if (sep == mp_const_none) {
   130da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   130dc:	4a48      	ldr	r2, [pc, #288]	; (13200 <str_rsplit+0x1c0>)
   130de:	4293      	cmp	r3, r2
   130e0:	d102      	bne.n	130e8 <str_rsplit+0xa8>
        mp_raise_NotImplementedError("rsplit(None,n)");
   130e2:	4848      	ldr	r0, [pc, #288]	; (13204 <str_rsplit+0x1c4>)
   130e4:	f7f9 ff74 	bl	cfd0 <mp_raise_NotImplementedError>
    } else {
        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   130e8:	f107 030c 	add.w	r3, r7, #12
   130ec:	4619      	mov	r1, r3
   130ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   130f0:	f002 fab4 	bl	1565c <mp_obj_str_get_data>
   130f4:	61f8      	str	r0, [r7, #28]

        if (sep_len == 0) {
   130f6:	68fb      	ldr	r3, [r7, #12]
   130f8:	2b00      	cmp	r3, #0
   130fa:	d102      	bne.n	13102 <str_rsplit+0xc2>
            mp_raise_ValueError("empty separator");
   130fc:	4842      	ldr	r0, [pc, #264]	; (13208 <str_rsplit+0x1c8>)
   130fe:	f7f9 ff41 	bl	cf84 <mp_raise_ValueError>
        }

        const byte *beg = s;
   13102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13104:	61bb      	str	r3, [r7, #24]
        const byte *last = s + len;
   13106:	693b      	ldr	r3, [r7, #16]
   13108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1310a:	4413      	add	r3, r2
   1310c:	633b      	str	r3, [r7, #48]	; 0x30
        for (;;) {
            s = last - sep_len;
   1310e:	68fb      	ldr	r3, [r7, #12]
   13110:	425b      	negs	r3, r3
   13112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13114:	4413      	add	r3, r2
   13116:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (;;) {
                if (splits == 0 || s < beg) {
   13118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1311a:	2b00      	cmp	r3, #0
   1311c:	d011      	beq.n	13142 <str_rsplit+0x102>
   1311e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13120:	69bb      	ldr	r3, [r7, #24]
   13122:	429a      	cmp	r2, r3
   13124:	d30d      	bcc.n	13142 <str_rsplit+0x102>
                    break;
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   13126:	68fb      	ldr	r3, [r7, #12]
   13128:	461a      	mov	r2, r3
   1312a:	69f9      	ldr	r1, [r7, #28]
   1312c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1312e:	f008 fed9 	bl	1bee4 <memcmp>
   13132:	4603      	mov	r3, r0
   13134:	2b00      	cmp	r3, #0
   13136:	d003      	beq.n	13140 <str_rsplit+0x100>
                    break;
                }
                s--;
   13138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1313a:	3b01      	subs	r3, #1
   1313c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
   1313e:	e7eb      	b.n	13118 <str_rsplit+0xd8>
                    break;
   13140:	bf00      	nop
            if (s < beg || splits == 0) {
   13142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13144:	69bb      	ldr	r3, [r7, #24]
   13146:	429a      	cmp	r2, r3
   13148:	d302      	bcc.n	13150 <str_rsplit+0x110>
   1314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1314c:	2b00      	cmp	r3, #0
   1314e:	d113      	bne.n	13178 <str_rsplit+0x138>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   13150:	6a3b      	ldr	r3, [r7, #32]
   13152:	68da      	ldr	r2, [r3, #12]
   13154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13156:	009b      	lsls	r3, r3, #2
   13158:	18d4      	adds	r4, r2, r3
   1315a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1315c:	69bb      	ldr	r3, [r7, #24]
   1315e:	1ad3      	subs	r3, r2, r3
   13160:	461a      	mov	r2, r3
   13162:	69b9      	ldr	r1, [r7, #24]
   13164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13166:	f002 f887 	bl	15278 <mp_obj_new_str_of_type>
   1316a:	4603      	mov	r3, r0
   1316c:	6023      	str	r3, [r4, #0]
                break;
   1316e:	bf00      	nop
            }
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
            last = s;
            splits--;
        }
        if (idx != 0) {
   13170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13172:	2b00      	cmp	r3, #0
   13174:	d03e      	beq.n	131f4 <str_rsplit+0x1b4>
   13176:	e01b      	b.n	131b0 <str_rsplit+0x170>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   13178:	6a3b      	ldr	r3, [r7, #32]
   1317a:	68da      	ldr	r2, [r3, #12]
   1317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1317e:	1e59      	subs	r1, r3, #1
   13180:	6379      	str	r1, [r7, #52]	; 0x34
   13182:	009b      	lsls	r3, r3, #2
   13184:	18d4      	adds	r4, r2, r3
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1318a:	18d1      	adds	r1, r2, r3
   1318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1318e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13190:	1ad3      	subs	r3, r2, r3
   13192:	461a      	mov	r2, r3
   13194:	68fb      	ldr	r3, [r7, #12]
   13196:	1ad3      	subs	r3, r2, r3
   13198:	461a      	mov	r2, r3
   1319a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1319c:	f002 f86c 	bl	15278 <mp_obj_new_str_of_type>
   131a0:	4603      	mov	r3, r0
   131a2:	6023      	str	r3, [r4, #0]
            last = s;
   131a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   131a6:	633b      	str	r3, [r7, #48]	; 0x30
            splits--;
   131a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   131aa:	3b01      	subs	r3, #1
   131ac:	63bb      	str	r3, [r7, #56]	; 0x38
        }
   131ae:	e7ae      	b.n	1310e <str_rsplit+0xce>
            // We split less parts than split limit, now go cleanup surplus
            size_t used = org_splits + 1 - idx;
   131b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131b2:	1c5a      	adds	r2, r3, #1
   131b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131b6:	1ad3      	subs	r3, r2, r3
   131b8:	617b      	str	r3, [r7, #20]
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   131ba:	6a3b      	ldr	r3, [r7, #32]
   131bc:	68d8      	ldr	r0, [r3, #12]
   131be:	6a3b      	ldr	r3, [r7, #32]
   131c0:	68da      	ldr	r2, [r3, #12]
   131c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131c4:	009b      	lsls	r3, r3, #2
   131c6:	18d1      	adds	r1, r2, r3
   131c8:	697b      	ldr	r3, [r7, #20]
   131ca:	009b      	lsls	r3, r3, #2
   131cc:	461a      	mov	r2, r3
   131ce:	f008 fe07 	bl	1bde0 <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   131d2:	6a3b      	ldr	r3, [r7, #32]
   131d4:	68da      	ldr	r2, [r3, #12]
   131d6:	697b      	ldr	r3, [r7, #20]
   131d8:	009b      	lsls	r3, r3, #2
   131da:	18d0      	adds	r0, r2, r3
   131dc:	6a3b      	ldr	r3, [r7, #32]
   131de:	685a      	ldr	r2, [r3, #4]
   131e0:	697b      	ldr	r3, [r7, #20]
   131e2:	1ad3      	subs	r3, r2, r3
   131e4:	009b      	lsls	r3, r3, #2
   131e6:	461a      	mov	r2, r3
   131e8:	2100      	movs	r1, #0
   131ea:	f008 fe2f 	bl	1be4c <memset>
            res->len = used;
   131ee:	6a3b      	ldr	r3, [r7, #32]
   131f0:	697a      	ldr	r2, [r7, #20]
   131f2:	609a      	str	r2, [r3, #8]
        }
    }

    return MP_OBJ_FROM_PTR(res);
   131f4:	6a3b      	ldr	r3, [r7, #32]
}
   131f6:	4618      	mov	r0, r3
   131f8:	3744      	adds	r7, #68	; 0x44
   131fa:	46bd      	mov	sp, r7
   131fc:	bd90      	pop	{r4, r7, pc}
   131fe:	bf00      	nop
   13200:	00021480 	.word	0x00021480
   13204:	000216d8 	.word	0x000216d8
   13208:	000216bc 	.word	0x000216bc

0001320c <str_finder>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rsplit_obj, 1, 3, str_rsplit);

STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
   1320c:	b580      	push	{r7, lr}
   1320e:	b08e      	sub	sp, #56	; 0x38
   13210:	af02      	add	r7, sp, #8
   13212:	60f8      	str	r0, [r7, #12]
   13214:	60b9      	str	r1, [r7, #8]
   13216:	607a      	str	r2, [r7, #4]
   13218:	70fb      	strb	r3, [r7, #3]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   1321a:	68bb      	ldr	r3, [r7, #8]
   1321c:	681b      	ldr	r3, [r3, #0]
   1321e:	4618      	mov	r0, r3
   13220:	f7fa fad4 	bl	d7cc <mp_obj_get_type>
   13224:	61f8      	str	r0, [r7, #28]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13226:	68bb      	ldr	r3, [r7, #8]
   13228:	681b      	ldr	r3, [r3, #0]
   1322a:	4618      	mov	r0, r3
   1322c:	f7fe ffd2 	bl	121d4 <MP_OBJ_IS_QSTR>
   13230:	4603      	mov	r3, r0
   13232:	f083 0301 	eor.w	r3, r3, #1
   13236:	b2db      	uxtb	r3, r3
   13238:	2b00      	cmp	r3, #0
   1323a:	d018      	beq.n	1326e <str_finder+0x62>
   1323c:	68bb      	ldr	r3, [r7, #8]
   1323e:	681b      	ldr	r3, [r3, #0]
   13240:	4618      	mov	r0, r3
   13242:	f7fe ffd9 	bl	121f8 <MP_OBJ_IS_OBJ>
   13246:	4603      	mov	r3, r0
   13248:	f083 0301 	eor.w	r3, r3, #1
   1324c:	b2db      	uxtb	r3, r3
   1324e:	2b00      	cmp	r3, #0
   13250:	d106      	bne.n	13260 <str_finder+0x54>
   13252:	68bb      	ldr	r3, [r7, #8]
   13254:	681b      	ldr	r3, [r3, #0]
   13256:	681b      	ldr	r3, [r3, #0]
   13258:	699b      	ldr	r3, [r3, #24]
   1325a:	4a56      	ldr	r2, [pc, #344]	; (133b4 <str_finder+0x1a8>)
   1325c:	4293      	cmp	r3, r2
   1325e:	d006      	beq.n	1326e <str_finder+0x62>
   13260:	4b55      	ldr	r3, [pc, #340]	; (133b8 <str_finder+0x1ac>)
   13262:	4a56      	ldr	r2, [pc, #344]	; (133bc <str_finder+0x1b0>)
   13264:	f240 21ab 	movw	r1, #683	; 0x2ab
   13268:	4855      	ldr	r0, [pc, #340]	; (133c0 <str_finder+0x1b4>)
   1326a:	f008 f897 	bl	1b39c <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   1326e:	68bb      	ldr	r3, [r7, #8]
   13270:	3304      	adds	r3, #4
   13272:	681b      	ldr	r3, [r3, #0]
   13274:	4618      	mov	r0, r3
   13276:	f7fa faa9 	bl	d7cc <mp_obj_get_type>
   1327a:	4602      	mov	r2, r0
   1327c:	69fb      	ldr	r3, [r7, #28]
   1327e:	429a      	cmp	r2, r3
   13280:	d005      	beq.n	1328e <str_finder+0x82>
        bad_implicit_conversion(args[1]);
   13282:	68bb      	ldr	r3, [r7, #8]
   13284:	3304      	adds	r3, #4
   13286:	681b      	ldr	r3, [r3, #0]
   13288:	4618      	mov	r0, r3
   1328a:	f002 f977 	bl	1557c <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   1328e:	68bb      	ldr	r3, [r7, #8]
   13290:	681b      	ldr	r3, [r3, #0]
   13292:	4618      	mov	r0, r3
   13294:	f7fe ff9e 	bl	121d4 <MP_OBJ_IS_QSTR>
   13298:	4603      	mov	r3, r0
   1329a:	2b00      	cmp	r3, #0
   1329c:	d00a      	beq.n	132b4 <str_finder+0xa8>
   1329e:	68bb      	ldr	r3, [r7, #8]
   132a0:	681b      	ldr	r3, [r3, #0]
   132a2:	089b      	lsrs	r3, r3, #2
   132a4:	f107 0214 	add.w	r2, r7, #20
   132a8:	4611      	mov	r1, r2
   132aa:	4618      	mov	r0, r3
   132ac:	f7ed ffbe 	bl	122c <qstr_data>
   132b0:	62f8      	str	r0, [r7, #44]	; 0x2c
   132b2:	e007      	b.n	132c4 <str_finder+0xb8>
   132b4:	68bb      	ldr	r3, [r7, #8]
   132b6:	681b      	ldr	r3, [r3, #0]
   132b8:	689b      	ldr	r3, [r3, #8]
   132ba:	617b      	str	r3, [r7, #20]
   132bc:	68bb      	ldr	r3, [r7, #8]
   132be:	681b      	ldr	r3, [r3, #0]
   132c0:	68db      	ldr	r3, [r3, #12]
   132c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   132c4:	68bb      	ldr	r3, [r7, #8]
   132c6:	3304      	adds	r3, #4
   132c8:	681b      	ldr	r3, [r3, #0]
   132ca:	4618      	mov	r0, r3
   132cc:	f7fe ff82 	bl	121d4 <MP_OBJ_IS_QSTR>
   132d0:	4603      	mov	r3, r0
   132d2:	2b00      	cmp	r3, #0
   132d4:	d00b      	beq.n	132ee <str_finder+0xe2>
   132d6:	68bb      	ldr	r3, [r7, #8]
   132d8:	3304      	adds	r3, #4
   132da:	681b      	ldr	r3, [r3, #0]
   132dc:	089b      	lsrs	r3, r3, #2
   132de:	f107 0210 	add.w	r2, r7, #16
   132e2:	4611      	mov	r1, r2
   132e4:	4618      	mov	r0, r3
   132e6:	f7ed ffa1 	bl	122c <qstr_data>
   132ea:	62b8      	str	r0, [r7, #40]	; 0x28
   132ec:	e009      	b.n	13302 <str_finder+0xf6>
   132ee:	68bb      	ldr	r3, [r7, #8]
   132f0:	3304      	adds	r3, #4
   132f2:	681b      	ldr	r3, [r3, #0]
   132f4:	689b      	ldr	r3, [r3, #8]
   132f6:	613b      	str	r3, [r7, #16]
   132f8:	68bb      	ldr	r3, [r7, #8]
   132fa:	3304      	adds	r3, #4
   132fc:	681b      	ldr	r3, [r3, #0]
   132fe:	68db      	ldr	r3, [r3, #12]
   13300:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   13302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13304:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   13306:	697b      	ldr	r3, [r7, #20]
   13308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1330a:	4413      	add	r3, r2
   1330c:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   1330e:	68fb      	ldr	r3, [r7, #12]
   13310:	2b02      	cmp	r3, #2
   13312:	d911      	bls.n	13338 <str_finder+0x12c>
   13314:	68bb      	ldr	r3, [r7, #8]
   13316:	3308      	adds	r3, #8
   13318:	681b      	ldr	r3, [r3, #0]
   1331a:	4a2a      	ldr	r2, [pc, #168]	; (133c4 <str_finder+0x1b8>)
   1331c:	4293      	cmp	r3, r2
   1331e:	d00b      	beq.n	13338 <str_finder+0x12c>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   13320:	697a      	ldr	r2, [r7, #20]
   13322:	68bb      	ldr	r3, [r7, #8]
   13324:	3308      	adds	r3, #8
   13326:	6819      	ldr	r1, [r3, #0]
   13328:	2301      	movs	r3, #1
   1332a:	9300      	str	r3, [sp, #0]
   1332c:	460b      	mov	r3, r1
   1332e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13330:	69f8      	ldr	r0, [r7, #28]
   13332:	f7ff fc05 	bl	12b40 <str_index_to_ptr>
   13336:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   13338:	68fb      	ldr	r3, [r7, #12]
   1333a:	2b03      	cmp	r3, #3
   1333c:	d911      	bls.n	13362 <str_finder+0x156>
   1333e:	68bb      	ldr	r3, [r7, #8]
   13340:	330c      	adds	r3, #12
   13342:	681b      	ldr	r3, [r3, #0]
   13344:	4a1f      	ldr	r2, [pc, #124]	; (133c4 <str_finder+0x1b8>)
   13346:	4293      	cmp	r3, r2
   13348:	d00b      	beq.n	13362 <str_finder+0x156>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   1334a:	697a      	ldr	r2, [r7, #20]
   1334c:	68bb      	ldr	r3, [r7, #8]
   1334e:	330c      	adds	r3, #12
   13350:	6819      	ldr	r1, [r3, #0]
   13352:	2301      	movs	r3, #1
   13354:	9300      	str	r3, [sp, #0]
   13356:	460b      	mov	r3, r1
   13358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1335a:	69f8      	ldr	r0, [r7, #28]
   1335c:	f7ff fbf0 	bl	12b40 <str_index_to_ptr>
   13360:	6238      	str	r0, [r7, #32]
    }

    if (end < start) {
   13362:	6a3a      	ldr	r2, [r7, #32]
   13364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13366:	429a      	cmp	r2, r3
   13368:	d310      	bcc.n	1338c <str_finder+0x180>
        goto out_error;
    }

    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
   1336a:	6a3a      	ldr	r2, [r7, #32]
   1336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1336e:	1ad3      	subs	r3, r2, r3
   13370:	4619      	mov	r1, r3
   13372:	693a      	ldr	r2, [r7, #16]
   13374:	687b      	ldr	r3, [r7, #4]
   13376:	9300      	str	r3, [sp, #0]
   13378:	4613      	mov	r3, r2
   1337a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1337c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1337e:	f7ff fa29 	bl	127d4 <find_subbytes>
   13382:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
   13384:	69bb      	ldr	r3, [r7, #24]
   13386:	2b00      	cmp	r3, #0
   13388:	d10a      	bne.n	133a0 <str_finder+0x194>
   1338a:	e000      	b.n	1338e <str_finder+0x182>
        goto out_error;
   1338c:	bf00      	nop
    out_error:
        // not found
        if (is_index) {
   1338e:	78fb      	ldrb	r3, [r7, #3]
   13390:	2b00      	cmp	r3, #0
   13392:	d002      	beq.n	1339a <str_finder+0x18e>
            mp_raise_ValueError("substring not found");
   13394:	480c      	ldr	r0, [pc, #48]	; (133c8 <str_finder+0x1bc>)
   13396:	f7f9 fdf5 	bl	cf84 <mp_raise_ValueError>
        } else {
            return MP_OBJ_NEW_SMALL_INT(-1);
   1339a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1339e:	e005      	b.n	133ac <str_finder+0x1a0>
        #if MICROPY_PY_BUILTINS_STR_UNICODE
        if (self_type == &mp_type_str) {
            return MP_OBJ_NEW_SMALL_INT(utf8_ptr_to_index(haystack, p));
        }
        #endif
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
   133a0:	69ba      	ldr	r2, [r7, #24]
   133a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   133a4:	1ad3      	subs	r3, r2, r3
   133a6:	005b      	lsls	r3, r3, #1
   133a8:	f043 0301 	orr.w	r3, r3, #1
    }
}
   133ac:	4618      	mov	r0, r3
   133ae:	3730      	adds	r7, #48	; 0x30
   133b0:	46bd      	mov	sp, r7
   133b2:	bd80      	pop	{r7, pc}
   133b4:	00012849 	.word	0x00012849
   133b8:	000216f4 	.word	0x000216f4
   133bc:	00021be8 	.word	0x00021be8
   133c0:	00021658 	.word	0x00021658
   133c4:	00021480 	.word	0x00021480
   133c8:	0002177c 	.word	0x0002177c

000133cc <str_find>:

STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
   133cc:	b580      	push	{r7, lr}
   133ce:	b082      	sub	sp, #8
   133d0:	af00      	add	r7, sp, #0
   133d2:	6078      	str	r0, [r7, #4]
   133d4:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, false);
   133d6:	2300      	movs	r3, #0
   133d8:	2201      	movs	r2, #1
   133da:	6839      	ldr	r1, [r7, #0]
   133dc:	6878      	ldr	r0, [r7, #4]
   133de:	f7ff ff15 	bl	1320c <str_finder>
   133e2:	4603      	mov	r3, r0
}
   133e4:	4618      	mov	r0, r3
   133e6:	3708      	adds	r7, #8
   133e8:	46bd      	mov	sp, r7
   133ea:	bd80      	pop	{r7, pc}

000133ec <str_rfind>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_find_obj, 2, 4, str_find);

STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
   133ec:	b580      	push	{r7, lr}
   133ee:	b082      	sub	sp, #8
   133f0:	af00      	add	r7, sp, #0
   133f2:	6078      	str	r0, [r7, #4]
   133f4:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, false);
   133f6:	2300      	movs	r3, #0
   133f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   133fc:	6839      	ldr	r1, [r7, #0]
   133fe:	6878      	ldr	r0, [r7, #4]
   13400:	f7ff ff04 	bl	1320c <str_finder>
   13404:	4603      	mov	r3, r0
}
   13406:	4618      	mov	r0, r3
   13408:	3708      	adds	r7, #8
   1340a:	46bd      	mov	sp, r7
   1340c:	bd80      	pop	{r7, pc}
   1340e:	bf00      	nop

00013410 <str_index>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rfind_obj, 2, 4, str_rfind);

STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
   13410:	b580      	push	{r7, lr}
   13412:	b082      	sub	sp, #8
   13414:	af00      	add	r7, sp, #0
   13416:	6078      	str	r0, [r7, #4]
   13418:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, true);
   1341a:	2301      	movs	r3, #1
   1341c:	2201      	movs	r2, #1
   1341e:	6839      	ldr	r1, [r7, #0]
   13420:	6878      	ldr	r0, [r7, #4]
   13422:	f7ff fef3 	bl	1320c <str_finder>
   13426:	4603      	mov	r3, r0
}
   13428:	4618      	mov	r0, r3
   1342a:	3708      	adds	r7, #8
   1342c:	46bd      	mov	sp, r7
   1342e:	bd80      	pop	{r7, pc}

00013430 <str_rindex>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_index_obj, 2, 4, str_index);

STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
   13430:	b580      	push	{r7, lr}
   13432:	b082      	sub	sp, #8
   13434:	af00      	add	r7, sp, #0
   13436:	6078      	str	r0, [r7, #4]
   13438:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, true);
   1343a:	2301      	movs	r3, #1
   1343c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13440:	6839      	ldr	r1, [r7, #0]
   13442:	6878      	ldr	r0, [r7, #4]
   13444:	f7ff fee2 	bl	1320c <str_finder>
   13448:	4603      	mov	r3, r0
}
   1344a:	4618      	mov	r0, r3
   1344c:	3708      	adds	r7, #8
   1344e:	46bd      	mov	sp, r7
   13450:	bd80      	pop	{r7, pc}
   13452:	bf00      	nop

00013454 <str_startswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rindex_obj, 2, 4, str_rindex);

// TODO: (Much) more variety in args
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   13454:	b580      	push	{r7, lr}
   13456:	b08a      	sub	sp, #40	; 0x28
   13458:	af02      	add	r7, sp, #8
   1345a:	6078      	str	r0, [r7, #4]
   1345c:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   1345e:	683b      	ldr	r3, [r7, #0]
   13460:	681b      	ldr	r3, [r3, #0]
   13462:	4618      	mov	r0, r3
   13464:	f7fa f9b2 	bl	d7cc <mp_obj_get_type>
   13468:	6178      	str	r0, [r7, #20]
    GET_STR_DATA_LEN(args[0], str, str_len);
   1346a:	683b      	ldr	r3, [r7, #0]
   1346c:	681b      	ldr	r3, [r3, #0]
   1346e:	4618      	mov	r0, r3
   13470:	f7fe feb0 	bl	121d4 <MP_OBJ_IS_QSTR>
   13474:	4603      	mov	r3, r0
   13476:	2b00      	cmp	r3, #0
   13478:	d00a      	beq.n	13490 <str_startswith+0x3c>
   1347a:	683b      	ldr	r3, [r7, #0]
   1347c:	681b      	ldr	r3, [r3, #0]
   1347e:	089b      	lsrs	r3, r3, #2
   13480:	f107 020c 	add.w	r2, r7, #12
   13484:	4611      	mov	r1, r2
   13486:	4618      	mov	r0, r3
   13488:	f7ed fed0 	bl	122c <qstr_data>
   1348c:	61f8      	str	r0, [r7, #28]
   1348e:	e007      	b.n	134a0 <str_startswith+0x4c>
   13490:	683b      	ldr	r3, [r7, #0]
   13492:	681b      	ldr	r3, [r3, #0]
   13494:	689b      	ldr	r3, [r3, #8]
   13496:	60fb      	str	r3, [r7, #12]
   13498:	683b      	ldr	r3, [r7, #0]
   1349a:	681b      	ldr	r3, [r3, #0]
   1349c:	68db      	ldr	r3, [r3, #12]
   1349e:	61fb      	str	r3, [r7, #28]
    size_t prefix_len;
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	3304      	adds	r3, #4
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	f107 0208 	add.w	r2, r7, #8
   134aa:	4611      	mov	r1, r2
   134ac:	4618      	mov	r0, r3
   134ae:	f002 f8d5 	bl	1565c <mp_obj_str_get_data>
   134b2:	6138      	str	r0, [r7, #16]
    const byte *start = str;
   134b4:	69fb      	ldr	r3, [r7, #28]
   134b6:	61bb      	str	r3, [r7, #24]
    if (n_args > 2) {
   134b8:	687b      	ldr	r3, [r7, #4]
   134ba:	2b02      	cmp	r3, #2
   134bc:	d90b      	bls.n	134d6 <str_startswith+0x82>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   134be:	68fa      	ldr	r2, [r7, #12]
   134c0:	683b      	ldr	r3, [r7, #0]
   134c2:	3308      	adds	r3, #8
   134c4:	6819      	ldr	r1, [r3, #0]
   134c6:	2301      	movs	r3, #1
   134c8:	9300      	str	r3, [sp, #0]
   134ca:	460b      	mov	r3, r1
   134cc:	69f9      	ldr	r1, [r7, #28]
   134ce:	6978      	ldr	r0, [r7, #20]
   134d0:	f7ff fb36 	bl	12b40 <str_index_to_ptr>
   134d4:	61b8      	str	r0, [r7, #24]
    }
    if (prefix_len + (start - str) > str_len) {
   134d6:	69ba      	ldr	r2, [r7, #24]
   134d8:	69fb      	ldr	r3, [r7, #28]
   134da:	1ad3      	subs	r3, r2, r3
   134dc:	461a      	mov	r2, r3
   134de:	68bb      	ldr	r3, [r7, #8]
   134e0:	441a      	add	r2, r3
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	429a      	cmp	r2, r3
   134e6:	d901      	bls.n	134ec <str_startswith+0x98>
        return mp_const_false;
   134e8:	4b0a      	ldr	r3, [pc, #40]	; (13514 <str_startswith+0xc0>)
   134ea:	e00f      	b.n	1350c <str_startswith+0xb8>
    }
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   134ec:	68bb      	ldr	r3, [r7, #8]
   134ee:	461a      	mov	r2, r3
   134f0:	6939      	ldr	r1, [r7, #16]
   134f2:	69b8      	ldr	r0, [r7, #24]
   134f4:	f008 fcf6 	bl	1bee4 <memcmp>
   134f8:	4603      	mov	r3, r0
   134fa:	2b00      	cmp	r3, #0
   134fc:	bf0c      	ite	eq
   134fe:	2301      	moveq	r3, #1
   13500:	2300      	movne	r3, #0
   13502:	b2db      	uxtb	r3, r3
   13504:	4618      	mov	r0, r3
   13506:	f7fe fe89 	bl	1221c <mp_obj_new_bool>
   1350a:	4603      	mov	r3, r0
}
   1350c:	4618      	mov	r0, r3
   1350e:	3720      	adds	r7, #32
   13510:	46bd      	mov	sp, r7
   13512:	bd80      	pop	{r7, pc}
   13514:	0001fc34 	.word	0x0001fc34

00013518 <str_endswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_startswith_obj, 2, 3, str_startswith);

STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   13518:	b580      	push	{r7, lr}
   1351a:	b086      	sub	sp, #24
   1351c:	af00      	add	r7, sp, #0
   1351e:	6078      	str	r0, [r7, #4]
   13520:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(args[0], str, str_len);
   13522:	683b      	ldr	r3, [r7, #0]
   13524:	681b      	ldr	r3, [r3, #0]
   13526:	4618      	mov	r0, r3
   13528:	f7fe fe54 	bl	121d4 <MP_OBJ_IS_QSTR>
   1352c:	4603      	mov	r3, r0
   1352e:	2b00      	cmp	r3, #0
   13530:	d00a      	beq.n	13548 <str_endswith+0x30>
   13532:	683b      	ldr	r3, [r7, #0]
   13534:	681b      	ldr	r3, [r3, #0]
   13536:	089b      	lsrs	r3, r3, #2
   13538:	f107 020c 	add.w	r2, r7, #12
   1353c:	4611      	mov	r1, r2
   1353e:	4618      	mov	r0, r3
   13540:	f7ed fe74 	bl	122c <qstr_data>
   13544:	6178      	str	r0, [r7, #20]
   13546:	e007      	b.n	13558 <str_endswith+0x40>
   13548:	683b      	ldr	r3, [r7, #0]
   1354a:	681b      	ldr	r3, [r3, #0]
   1354c:	689b      	ldr	r3, [r3, #8]
   1354e:	60fb      	str	r3, [r7, #12]
   13550:	683b      	ldr	r3, [r7, #0]
   13552:	681b      	ldr	r3, [r3, #0]
   13554:	68db      	ldr	r3, [r3, #12]
   13556:	617b      	str	r3, [r7, #20]
    size_t suffix_len;
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   13558:	683b      	ldr	r3, [r7, #0]
   1355a:	3304      	adds	r3, #4
   1355c:	681b      	ldr	r3, [r3, #0]
   1355e:	f107 0208 	add.w	r2, r7, #8
   13562:	4611      	mov	r1, r2
   13564:	4618      	mov	r0, r3
   13566:	f002 f879 	bl	1565c <mp_obj_str_get_data>
   1356a:	6138      	str	r0, [r7, #16]
    if (n_args > 2) {
   1356c:	687b      	ldr	r3, [r7, #4]
   1356e:	2b02      	cmp	r3, #2
   13570:	d902      	bls.n	13578 <str_endswith+0x60>
        mp_raise_NotImplementedError("start/end indices");
   13572:	4810      	ldr	r0, [pc, #64]	; (135b4 <str_endswith+0x9c>)
   13574:	f7f9 fd2c 	bl	cfd0 <mp_raise_NotImplementedError>
    }

    if (suffix_len > str_len) {
   13578:	68ba      	ldr	r2, [r7, #8]
   1357a:	68fb      	ldr	r3, [r7, #12]
   1357c:	429a      	cmp	r2, r3
   1357e:	d901      	bls.n	13584 <str_endswith+0x6c>
        return mp_const_false;
   13580:	4b0d      	ldr	r3, [pc, #52]	; (135b8 <str_endswith+0xa0>)
   13582:	e013      	b.n	135ac <str_endswith+0x94>
    }
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   13584:	68fa      	ldr	r2, [r7, #12]
   13586:	68bb      	ldr	r3, [r7, #8]
   13588:	1ad3      	subs	r3, r2, r3
   1358a:	697a      	ldr	r2, [r7, #20]
   1358c:	4413      	add	r3, r2
   1358e:	68ba      	ldr	r2, [r7, #8]
   13590:	6939      	ldr	r1, [r7, #16]
   13592:	4618      	mov	r0, r3
   13594:	f008 fca6 	bl	1bee4 <memcmp>
   13598:	4603      	mov	r3, r0
   1359a:	2b00      	cmp	r3, #0
   1359c:	bf0c      	ite	eq
   1359e:	2301      	moveq	r3, #1
   135a0:	2300      	movne	r3, #0
   135a2:	b2db      	uxtb	r3, r3
   135a4:	4618      	mov	r0, r3
   135a6:	f7fe fe39 	bl	1221c <mp_obj_new_bool>
   135aa:	4603      	mov	r3, r0
}
   135ac:	4618      	mov	r0, r3
   135ae:	3718      	adds	r7, #24
   135b0:	46bd      	mov	sp, r7
   135b2:	bd80      	pop	{r7, pc}
   135b4:	000217cc 	.word	0x000217cc
   135b8:	0001fc34 	.word	0x0001fc34

000135bc <str_uni_strip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_endswith_obj, 2, 3, str_endswith);

enum { LSTRIP, RSTRIP, STRIP };

STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
   135bc:	b580      	push	{r7, lr}
   135be:	b094      	sub	sp, #80	; 0x50
   135c0:	af02      	add	r7, sp, #8
   135c2:	60f8      	str	r0, [r7, #12]
   135c4:	60b9      	str	r1, [r7, #8]
   135c6:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	681b      	ldr	r3, [r3, #0]
   135cc:	4618      	mov	r0, r3
   135ce:	f7fe fe01 	bl	121d4 <MP_OBJ_IS_QSTR>
   135d2:	4603      	mov	r3, r0
   135d4:	f083 0301 	eor.w	r3, r3, #1
   135d8:	b2db      	uxtb	r3, r3
   135da:	2b00      	cmp	r3, #0
   135dc:	d018      	beq.n	13610 <str_uni_strip+0x54>
   135de:	687b      	ldr	r3, [r7, #4]
   135e0:	681b      	ldr	r3, [r3, #0]
   135e2:	4618      	mov	r0, r3
   135e4:	f7fe fe08 	bl	121f8 <MP_OBJ_IS_OBJ>
   135e8:	4603      	mov	r3, r0
   135ea:	f083 0301 	eor.w	r3, r3, #1
   135ee:	b2db      	uxtb	r3, r3
   135f0:	2b00      	cmp	r3, #0
   135f2:	d106      	bne.n	13602 <str_uni_strip+0x46>
   135f4:	687b      	ldr	r3, [r7, #4]
   135f6:	681b      	ldr	r3, [r3, #0]
   135f8:	681b      	ldr	r3, [r3, #0]
   135fa:	699b      	ldr	r3, [r3, #24]
   135fc:	4a76      	ldr	r2, [pc, #472]	; (137d8 <str_uni_strip+0x21c>)
   135fe:	4293      	cmp	r3, r2
   13600:	d006      	beq.n	13610 <str_uni_strip+0x54>
   13602:	4b76      	ldr	r3, [pc, #472]	; (137dc <str_uni_strip+0x220>)
   13604:	4a76      	ldr	r2, [pc, #472]	; (137e0 <str_uni_strip+0x224>)
   13606:	f240 310d 	movw	r1, #781	; 0x30d
   1360a:	4876      	ldr	r0, [pc, #472]	; (137e4 <str_uni_strip+0x228>)
   1360c:	f007 fec6 	bl	1b39c <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13610:	687b      	ldr	r3, [r7, #4]
   13612:	681b      	ldr	r3, [r3, #0]
   13614:	4618      	mov	r0, r3
   13616:	f7fa f8d9 	bl	d7cc <mp_obj_get_type>
   1361a:	61f8      	str	r0, [r7, #28]

    const byte *chars_to_del;
    uint chars_to_del_len;
    static const byte whitespace[] = " \t\n\r\v\f";

    if (n_args == 1) {
   1361c:	68bb      	ldr	r3, [r7, #8]
   1361e:	2b01      	cmp	r3, #1
   13620:	d104      	bne.n	1362c <str_uni_strip+0x70>
        chars_to_del = whitespace;
   13622:	4b71      	ldr	r3, [pc, #452]	; (137e8 <str_uni_strip+0x22c>)
   13624:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = sizeof(whitespace) - 1;
   13626:	2306      	movs	r3, #6
   13628:	643b      	str	r3, [r7, #64]	; 0x40
   1362a:	e032      	b.n	13692 <str_uni_strip+0xd6>
    } else {
        if (mp_obj_get_type(args[1]) != self_type) {
   1362c:	687b      	ldr	r3, [r7, #4]
   1362e:	3304      	adds	r3, #4
   13630:	681b      	ldr	r3, [r3, #0]
   13632:	4618      	mov	r0, r3
   13634:	f7fa f8ca 	bl	d7cc <mp_obj_get_type>
   13638:	4602      	mov	r2, r0
   1363a:	69fb      	ldr	r3, [r7, #28]
   1363c:	429a      	cmp	r2, r3
   1363e:	d005      	beq.n	1364c <str_uni_strip+0x90>
            bad_implicit_conversion(args[1]);
   13640:	687b      	ldr	r3, [r7, #4]
   13642:	3304      	adds	r3, #4
   13644:	681b      	ldr	r3, [r3, #0]
   13646:	4618      	mov	r0, r3
   13648:	f001 ff98 	bl	1557c <bad_implicit_conversion>
        }
        GET_STR_DATA_LEN(args[1], s, l);
   1364c:	687b      	ldr	r3, [r7, #4]
   1364e:	3304      	adds	r3, #4
   13650:	681b      	ldr	r3, [r3, #0]
   13652:	4618      	mov	r0, r3
   13654:	f7fe fdbe 	bl	121d4 <MP_OBJ_IS_QSTR>
   13658:	4603      	mov	r3, r0
   1365a:	2b00      	cmp	r3, #0
   1365c:	d00b      	beq.n	13676 <str_uni_strip+0xba>
   1365e:	687b      	ldr	r3, [r7, #4]
   13660:	3304      	adds	r3, #4
   13662:	681b      	ldr	r3, [r3, #0]
   13664:	089b      	lsrs	r3, r3, #2
   13666:	f107 0210 	add.w	r2, r7, #16
   1366a:	4611      	mov	r1, r2
   1366c:	4618      	mov	r0, r3
   1366e:	f7ed fddd 	bl	122c <qstr_data>
   13672:	63f8      	str	r0, [r7, #60]	; 0x3c
   13674:	e009      	b.n	1368a <str_uni_strip+0xce>
   13676:	687b      	ldr	r3, [r7, #4]
   13678:	3304      	adds	r3, #4
   1367a:	681b      	ldr	r3, [r3, #0]
   1367c:	689b      	ldr	r3, [r3, #8]
   1367e:	613b      	str	r3, [r7, #16]
   13680:	687b      	ldr	r3, [r7, #4]
   13682:	3304      	adds	r3, #4
   13684:	681b      	ldr	r3, [r3, #0]
   13686:	68db      	ldr	r3, [r3, #12]
   13688:	63fb      	str	r3, [r7, #60]	; 0x3c
        chars_to_del = s;
   1368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1368c:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = l;
   1368e:	693b      	ldr	r3, [r7, #16]
   13690:	643b      	str	r3, [r7, #64]	; 0x40
    }

    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   13692:	687b      	ldr	r3, [r7, #4]
   13694:	681b      	ldr	r3, [r3, #0]
   13696:	4618      	mov	r0, r3
   13698:	f7fe fd9c 	bl	121d4 <MP_OBJ_IS_QSTR>
   1369c:	4603      	mov	r3, r0
   1369e:	2b00      	cmp	r3, #0
   136a0:	d00a      	beq.n	136b8 <str_uni_strip+0xfc>
   136a2:	687b      	ldr	r3, [r7, #4]
   136a4:	681b      	ldr	r3, [r3, #0]
   136a6:	089b      	lsrs	r3, r3, #2
   136a8:	f107 0214 	add.w	r2, r7, #20
   136ac:	4611      	mov	r1, r2
   136ae:	4618      	mov	r0, r3
   136b0:	f7ed fdbc 	bl	122c <qstr_data>
   136b4:	63b8      	str	r0, [r7, #56]	; 0x38
   136b6:	e007      	b.n	136c8 <str_uni_strip+0x10c>
   136b8:	687b      	ldr	r3, [r7, #4]
   136ba:	681b      	ldr	r3, [r3, #0]
   136bc:	689b      	ldr	r3, [r3, #8]
   136be:	617b      	str	r3, [r7, #20]
   136c0:	687b      	ldr	r3, [r7, #4]
   136c2:	681b      	ldr	r3, [r3, #0]
   136c4:	68db      	ldr	r3, [r3, #12]
   136c6:	63bb      	str	r3, [r7, #56]	; 0x38

    size_t first_good_char_pos = 0;
   136c8:	2300      	movs	r3, #0
   136ca:	637b      	str	r3, [r7, #52]	; 0x34
    bool first_good_char_pos_set = false;
   136cc:	2300      	movs	r3, #0
   136ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    size_t last_good_char_pos = 0;
   136d2:	2300      	movs	r3, #0
   136d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = 0;
   136d6:	2300      	movs	r3, #0
   136d8:	62bb      	str	r3, [r7, #40]	; 0x28
    int delta = 1;
   136da:	2301      	movs	r3, #1
   136dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (type == RSTRIP) {
   136de:	68fb      	ldr	r3, [r7, #12]
   136e0:	2b01      	cmp	r3, #1
   136e2:	d105      	bne.n	136f0 <str_uni_strip+0x134>
        i = orig_str_len - 1;
   136e4:	697b      	ldr	r3, [r7, #20]
   136e6:	3b01      	subs	r3, #1
   136e8:	62bb      	str	r3, [r7, #40]	; 0x28
        delta = -1;
   136ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (size_t len = orig_str_len; len > 0; len--) {
   136f0:	697b      	ldr	r3, [r7, #20]
   136f2:	623b      	str	r3, [r7, #32]
   136f4:	e030      	b.n	13758 <str_uni_strip+0x19c>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   136f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   136f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   136fa:	441a      	add	r2, r3
   136fc:	2301      	movs	r3, #1
   136fe:	9300      	str	r3, [sp, #0]
   13700:	2301      	movs	r3, #1
   13702:	6c39      	ldr	r1, [r7, #64]	; 0x40
   13704:	6c78      	ldr	r0, [r7, #68]	; 0x44
   13706:	f7ff f865 	bl	127d4 <find_subbytes>
   1370a:	4603      	mov	r3, r0
   1370c:	2b00      	cmp	r3, #0
   1370e:	d11c      	bne.n	1374a <str_uni_strip+0x18e>
            if (!first_good_char_pos_set) {
   13710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13714:	f083 0301 	eor.w	r3, r3, #1
   13718:	b2db      	uxtb	r3, r3
   1371a:	2b00      	cmp	r3, #0
   1371c:	d013      	beq.n	13746 <str_uni_strip+0x18a>
                first_good_char_pos_set = true;
   1371e:	2301      	movs	r3, #1
   13720:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                first_good_char_pos = i;
   13724:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13726:	637b      	str	r3, [r7, #52]	; 0x34
                if (type == LSTRIP) {
   13728:	68fb      	ldr	r3, [r7, #12]
   1372a:	2b00      	cmp	r3, #0
   1372c:	d103      	bne.n	13736 <str_uni_strip+0x17a>
                    last_good_char_pos = orig_str_len - 1;
   1372e:	697b      	ldr	r3, [r7, #20]
   13730:	3b01      	subs	r3, #1
   13732:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13734:	e013      	b.n	1375e <str_uni_strip+0x1a2>
                } else if (type == RSTRIP) {
   13736:	68fb      	ldr	r3, [r7, #12]
   13738:	2b01      	cmp	r3, #1
   1373a:	d104      	bne.n	13746 <str_uni_strip+0x18a>
                    first_good_char_pos = 0;
   1373c:	2300      	movs	r3, #0
   1373e:	637b      	str	r3, [r7, #52]	; 0x34
                    last_good_char_pos = i;
   13740:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13742:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13744:	e00b      	b.n	1375e <str_uni_strip+0x1a2>
                }
            }
            last_good_char_pos = i;
   13746:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13748:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        i += delta;
   1374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1374c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1374e:	4413      	add	r3, r2
   13750:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t len = orig_str_len; len > 0; len--) {
   13752:	6a3b      	ldr	r3, [r7, #32]
   13754:	3b01      	subs	r3, #1
   13756:	623b      	str	r3, [r7, #32]
   13758:	6a3b      	ldr	r3, [r7, #32]
   1375a:	2b00      	cmp	r3, #0
   1375c:	d1cb      	bne.n	136f6 <str_uni_strip+0x13a>
    }

    if (!first_good_char_pos_set) {
   1375e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13762:	f083 0301 	eor.w	r3, r3, #1
   13766:	b2db      	uxtb	r3, r3
   13768:	2b00      	cmp	r3, #0
   1376a:	d007      	beq.n	1377c <str_uni_strip+0x1c0>
        // string is all whitespace, return ''
        if (self_type == &mp_type_str) {
   1376c:	69fb      	ldr	r3, [r7, #28]
   1376e:	4a1f      	ldr	r2, [pc, #124]	; (137ec <str_uni_strip+0x230>)
   13770:	4293      	cmp	r3, r2
   13772:	d101      	bne.n	13778 <str_uni_strip+0x1bc>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   13774:	2306      	movs	r3, #6
   13776:	e02b      	b.n	137d0 <str_uni_strip+0x214>
        } else {
            return mp_const_empty_bytes;
   13778:	4b1d      	ldr	r3, [pc, #116]	; (137f0 <str_uni_strip+0x234>)
   1377a:	e029      	b.n	137d0 <str_uni_strip+0x214>
        }
    }

    assert(last_good_char_pos >= first_good_char_pos);
   1377c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13780:	429a      	cmp	r2, r3
   13782:	d206      	bcs.n	13792 <str_uni_strip+0x1d6>
   13784:	4b1b      	ldr	r3, [pc, #108]	; (137f4 <str_uni_strip+0x238>)
   13786:	4a16      	ldr	r2, [pc, #88]	; (137e0 <str_uni_strip+0x224>)
   13788:	f240 3147 	movw	r1, #839	; 0x347
   1378c:	4815      	ldr	r0, [pc, #84]	; (137e4 <str_uni_strip+0x228>)
   1378e:	f007 fe05 	bl	1b39c <__assert_func>
    //+1 to accommodate the last character
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   13792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13796:	1ad3      	subs	r3, r2, r3
   13798:	3301      	adds	r3, #1
   1379a:	61bb      	str	r3, [r7, #24]
    if (stripped_len == orig_str_len) {
   1379c:	697b      	ldr	r3, [r7, #20]
   1379e:	69ba      	ldr	r2, [r7, #24]
   137a0:	429a      	cmp	r2, r3
   137a2:	d10c      	bne.n	137be <str_uni_strip+0x202>
        // If nothing was stripped, don't bother to dup original string
        // TODO: watch out for this case when we'll get to bytearray.strip()
        assert(first_good_char_pos == 0);
   137a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137a6:	2b00      	cmp	r3, #0
   137a8:	d006      	beq.n	137b8 <str_uni_strip+0x1fc>
   137aa:	4b13      	ldr	r3, [pc, #76]	; (137f8 <str_uni_strip+0x23c>)
   137ac:	4a0c      	ldr	r2, [pc, #48]	; (137e0 <str_uni_strip+0x224>)
   137ae:	f240 314d 	movw	r1, #845	; 0x34d
   137b2:	480c      	ldr	r0, [pc, #48]	; (137e4 <str_uni_strip+0x228>)
   137b4:	f007 fdf2 	bl	1b39c <__assert_func>
        return args[0];
   137b8:	687b      	ldr	r3, [r7, #4]
   137ba:	681b      	ldr	r3, [r3, #0]
   137bc:	e008      	b.n	137d0 <str_uni_strip+0x214>
    }
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   137be:	6bba      	ldr	r2, [r7, #56]	; 0x38
   137c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137c2:	4413      	add	r3, r2
   137c4:	69ba      	ldr	r2, [r7, #24]
   137c6:	4619      	mov	r1, r3
   137c8:	69f8      	ldr	r0, [r7, #28]
   137ca:	f001 fd55 	bl	15278 <mp_obj_new_str_of_type>
   137ce:	4603      	mov	r3, r0
}
   137d0:	4618      	mov	r0, r3
   137d2:	3748      	adds	r7, #72	; 0x48
   137d4:	46bd      	mov	sp, r7
   137d6:	bd80      	pop	{r7, pc}
   137d8:	00012849 	.word	0x00012849
   137dc:	000216f4 	.word	0x000216f4
   137e0:	00021bf4 	.word	0x00021bf4
   137e4:	00021658 	.word	0x00021658
   137e8:	00021c04 	.word	0x00021c04
   137ec:	00021b30 	.word	0x00021b30
   137f0:	00021bac 	.word	0x00021bac
   137f4:	000217ec 	.word	0x000217ec
   137f8:	00021818 	.word	0x00021818

000137fc <str_strip>:

STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   137fc:	b580      	push	{r7, lr}
   137fe:	b082      	sub	sp, #8
   13800:	af00      	add	r7, sp, #0
   13802:	6078      	str	r0, [r7, #4]
   13804:	6039      	str	r1, [r7, #0]
    return str_uni_strip(STRIP, n_args, args);
   13806:	683a      	ldr	r2, [r7, #0]
   13808:	6879      	ldr	r1, [r7, #4]
   1380a:	2002      	movs	r0, #2
   1380c:	f7ff fed6 	bl	135bc <str_uni_strip>
   13810:	4603      	mov	r3, r0
}
   13812:	4618      	mov	r0, r3
   13814:	3708      	adds	r7, #8
   13816:	46bd      	mov	sp, r7
   13818:	bd80      	pop	{r7, pc}
   1381a:	bf00      	nop

0001381c <str_lstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_strip_obj, 1, 2, str_strip);

STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   1381c:	b580      	push	{r7, lr}
   1381e:	b082      	sub	sp, #8
   13820:	af00      	add	r7, sp, #0
   13822:	6078      	str	r0, [r7, #4]
   13824:	6039      	str	r1, [r7, #0]
    return str_uni_strip(LSTRIP, n_args, args);
   13826:	683a      	ldr	r2, [r7, #0]
   13828:	6879      	ldr	r1, [r7, #4]
   1382a:	2000      	movs	r0, #0
   1382c:	f7ff fec6 	bl	135bc <str_uni_strip>
   13830:	4603      	mov	r3, r0
}
   13832:	4618      	mov	r0, r3
   13834:	3708      	adds	r7, #8
   13836:	46bd      	mov	sp, r7
   13838:	bd80      	pop	{r7, pc}
   1383a:	bf00      	nop

0001383c <str_rstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_lstrip_obj, 1, 2, str_lstrip);

STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   1383c:	b580      	push	{r7, lr}
   1383e:	b082      	sub	sp, #8
   13840:	af00      	add	r7, sp, #0
   13842:	6078      	str	r0, [r7, #4]
   13844:	6039      	str	r1, [r7, #0]
    return str_uni_strip(RSTRIP, n_args, args);
   13846:	683a      	ldr	r2, [r7, #0]
   13848:	6879      	ldr	r1, [r7, #4]
   1384a:	2001      	movs	r0, #1
   1384c:	f7ff feb6 	bl	135bc <str_uni_strip>
   13850:	4603      	mov	r3, r0
}
   13852:	4618      	mov	r0, r3
   13854:	3708      	adds	r7, #8
   13856:	46bd      	mov	sp, r7
   13858:	bd80      	pop	{r7, pc}
   1385a:	bf00      	nop

0001385c <str_to_int>:
MP_DEFINE_CONST_FUN_OBJ_2(str_center_obj, str_center);
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
   1385c:	b480      	push	{r7}
   1385e:	b085      	sub	sp, #20
   13860:	af00      	add	r7, sp, #0
   13862:	60f8      	str	r0, [r7, #12]
   13864:	60b9      	str	r1, [r7, #8]
   13866:	607a      	str	r2, [r7, #4]
    if (str < top && '0' <= *str && *str <= '9') {
   13868:	68fa      	ldr	r2, [r7, #12]
   1386a:	68bb      	ldr	r3, [r7, #8]
   1386c:	429a      	cmp	r2, r3
   1386e:	d226      	bcs.n	138be <str_to_int+0x62>
   13870:	68fb      	ldr	r3, [r7, #12]
   13872:	781b      	ldrb	r3, [r3, #0]
   13874:	2b2f      	cmp	r3, #47	; 0x2f
   13876:	d922      	bls.n	138be <str_to_int+0x62>
   13878:	68fb      	ldr	r3, [r7, #12]
   1387a:	781b      	ldrb	r3, [r3, #0]
   1387c:	2b39      	cmp	r3, #57	; 0x39
   1387e:	d81e      	bhi.n	138be <str_to_int+0x62>
        *num = 0;
   13880:	687b      	ldr	r3, [r7, #4]
   13882:	2200      	movs	r2, #0
   13884:	601a      	str	r2, [r3, #0]
        do {
            *num = *num * 10 + (*str - '0');
   13886:	687b      	ldr	r3, [r7, #4]
   13888:	681a      	ldr	r2, [r3, #0]
   1388a:	4613      	mov	r3, r2
   1388c:	009b      	lsls	r3, r3, #2
   1388e:	4413      	add	r3, r2
   13890:	005b      	lsls	r3, r3, #1
   13892:	461a      	mov	r2, r3
   13894:	68fb      	ldr	r3, [r7, #12]
   13896:	781b      	ldrb	r3, [r3, #0]
   13898:	3b30      	subs	r3, #48	; 0x30
   1389a:	441a      	add	r2, r3
   1389c:	687b      	ldr	r3, [r7, #4]
   1389e:	601a      	str	r2, [r3, #0]
            str++;
   138a0:	68fb      	ldr	r3, [r7, #12]
   138a2:	3301      	adds	r3, #1
   138a4:	60fb      	str	r3, [r7, #12]
        }
        while (str < top && '0' <= *str && *str <= '9');
   138a6:	68fa      	ldr	r2, [r7, #12]
   138a8:	68bb      	ldr	r3, [r7, #8]
   138aa:	429a      	cmp	r2, r3
   138ac:	d207      	bcs.n	138be <str_to_int+0x62>
   138ae:	68fb      	ldr	r3, [r7, #12]
   138b0:	781b      	ldrb	r3, [r3, #0]
   138b2:	2b2f      	cmp	r3, #47	; 0x2f
   138b4:	d903      	bls.n	138be <str_to_int+0x62>
   138b6:	68fb      	ldr	r3, [r7, #12]
   138b8:	781b      	ldrb	r3, [r3, #0]
   138ba:	2b39      	cmp	r3, #57	; 0x39
   138bc:	d9e3      	bls.n	13886 <str_to_int+0x2a>
    }
    return str;
   138be:	68fb      	ldr	r3, [r7, #12]
}
   138c0:	4618      	mov	r0, r3
   138c2:	3714      	adds	r7, #20
   138c4:	46bd      	mov	sp, r7
   138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   138ca:	4770      	bx	lr

000138cc <isalignment>:

STATIC bool isalignment(char ch) {
   138cc:	b580      	push	{r7, lr}
   138ce:	b082      	sub	sp, #8
   138d0:	af00      	add	r7, sp, #0
   138d2:	4603      	mov	r3, r0
   138d4:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("<>=^", ch) != NULL;
   138d6:	79fb      	ldrb	r3, [r7, #7]
   138d8:	2b00      	cmp	r3, #0
   138da:	d009      	beq.n	138f0 <isalignment+0x24>
   138dc:	79fb      	ldrb	r3, [r7, #7]
   138de:	4619      	mov	r1, r3
   138e0:	4807      	ldr	r0, [pc, #28]	; (13900 <isalignment+0x34>)
   138e2:	f008 fc4b 	bl	1c17c <strchr>
   138e6:	4603      	mov	r3, r0
   138e8:	2b00      	cmp	r3, #0
   138ea:	d001      	beq.n	138f0 <isalignment+0x24>
   138ec:	2301      	movs	r3, #1
   138ee:	e000      	b.n	138f2 <isalignment+0x26>
   138f0:	2300      	movs	r3, #0
   138f2:	f003 0301 	and.w	r3, r3, #1
   138f6:	b2db      	uxtb	r3, r3
}
   138f8:	4618      	mov	r0, r3
   138fa:	3708      	adds	r7, #8
   138fc:	46bd      	mov	sp, r7
   138fe:	bd80      	pop	{r7, pc}
   13900:	00021858 	.word	0x00021858

00013904 <istype>:

STATIC bool istype(char ch) {
   13904:	b580      	push	{r7, lr}
   13906:	b082      	sub	sp, #8
   13908:	af00      	add	r7, sp, #0
   1390a:	4603      	mov	r3, r0
   1390c:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
   1390e:	79fb      	ldrb	r3, [r7, #7]
   13910:	2b00      	cmp	r3, #0
   13912:	d009      	beq.n	13928 <istype+0x24>
   13914:	79fb      	ldrb	r3, [r7, #7]
   13916:	4619      	mov	r1, r3
   13918:	4807      	ldr	r0, [pc, #28]	; (13938 <istype+0x34>)
   1391a:	f008 fc2f 	bl	1c17c <strchr>
   1391e:	4603      	mov	r3, r0
   13920:	2b00      	cmp	r3, #0
   13922:	d001      	beq.n	13928 <istype+0x24>
   13924:	2301      	movs	r3, #1
   13926:	e000      	b.n	1392a <istype+0x26>
   13928:	2300      	movs	r3, #0
   1392a:	f003 0301 	and.w	r3, r3, #1
   1392e:	b2db      	uxtb	r3, r3
}
   13930:	4618      	mov	r0, r3
   13932:	3708      	adds	r7, #8
   13934:	46bd      	mov	sp, r7
   13936:	bd80      	pop	{r7, pc}
   13938:	00021860 	.word	0x00021860

0001393c <arg_looks_integer>:

STATIC bool arg_looks_integer(mp_obj_t arg) {
   1393c:	b580      	push	{r7, lr}
   1393e:	b082      	sub	sp, #8
   13940:	af00      	add	r7, sp, #0
   13942:	6078      	str	r0, [r7, #4]
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
   13944:	6878      	ldr	r0, [r7, #4]
   13946:	f7fe fc57 	bl	121f8 <MP_OBJ_IS_OBJ>
   1394a:	4603      	mov	r3, r0
   1394c:	2b00      	cmp	r3, #0
   1394e:	d004      	beq.n	1395a <arg_looks_integer+0x1e>
   13950:	687b      	ldr	r3, [r7, #4]
   13952:	681b      	ldr	r3, [r3, #0]
   13954:	4a0e      	ldr	r2, [pc, #56]	; (13990 <arg_looks_integer+0x54>)
   13956:	4293      	cmp	r3, r2
   13958:	d010      	beq.n	1397c <arg_looks_integer+0x40>
   1395a:	6878      	ldr	r0, [r7, #4]
   1395c:	f7fe fc28 	bl	121b0 <MP_OBJ_IS_SMALL_INT>
   13960:	4603      	mov	r3, r0
   13962:	2b00      	cmp	r3, #0
   13964:	d10a      	bne.n	1397c <arg_looks_integer+0x40>
   13966:	6878      	ldr	r0, [r7, #4]
   13968:	f7fe fc46 	bl	121f8 <MP_OBJ_IS_OBJ>
   1396c:	4603      	mov	r3, r0
   1396e:	2b00      	cmp	r3, #0
   13970:	d006      	beq.n	13980 <arg_looks_integer+0x44>
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	681b      	ldr	r3, [r3, #0]
   13976:	4a07      	ldr	r2, [pc, #28]	; (13994 <arg_looks_integer+0x58>)
   13978:	4293      	cmp	r3, r2
   1397a:	d101      	bne.n	13980 <arg_looks_integer+0x44>
   1397c:	2301      	movs	r3, #1
   1397e:	e000      	b.n	13982 <arg_looks_integer+0x46>
   13980:	2300      	movs	r3, #0
   13982:	f003 0301 	and.w	r3, r3, #1
   13986:	b2db      	uxtb	r3, r3
}
   13988:	4618      	mov	r0, r3
   1398a:	3708      	adds	r7, #8
   1398c:	46bd      	mov	sp, r7
   1398e:	bd80      	pop	{r7, pc}
   13990:	0001fbf8 	.word	0x0001fbf8
   13994:	00020f3c 	.word	0x00020f3c

00013998 <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
   13998:	b580      	push	{r7, lr}
   1399a:	b082      	sub	sp, #8
   1399c:	af00      	add	r7, sp, #0
   1399e:	6078      	str	r0, [r7, #4]
    return arg_looks_integer(arg)
   139a0:	6878      	ldr	r0, [r7, #4]
   139a2:	f7ff ffcb 	bl	1393c <arg_looks_integer>
   139a6:	4603      	mov	r3, r0
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
#endif
    ;
}
   139a8:	4618      	mov	r0, r3
   139aa:	3708      	adds	r7, #8
   139ac:	46bd      	mov	sp, r7
   139ae:	bd80      	pop	{r7, pc}

000139b0 <arg_as_int>:

STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
   139b0:	b480      	push	{r7}
   139b2:	b083      	sub	sp, #12
   139b4:	af00      	add	r7, sp, #0
   139b6:	6078      	str	r0, [r7, #4]
#if MICROPY_PY_BUILTINS_FLOAT
    if (mp_obj_is_float(arg)) {
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    }
#endif
    return arg;
   139b8:	687b      	ldr	r3, [r7, #4]
}
   139ba:	4618      	mov	r0, r3
   139bc:	370c      	adds	r7, #12
   139be:	46bd      	mov	sp, r7
   139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   139c4:	4770      	bx	lr
   139c6:	bf00      	nop

000139c8 <terse_str_format_value_error>:

#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
STATIC NORETURN void terse_str_format_value_error(void) {
   139c8:	b580      	push	{r7, lr}
   139ca:	af00      	add	r7, sp, #0
    mp_raise_ValueError("bad format string");
   139cc:	4801      	ldr	r0, [pc, #4]	; (139d4 <terse_str_format_value_error+0xc>)
   139ce:	f7f9 fad9 	bl	cf84 <mp_raise_ValueError>
   139d2:	bf00      	nop
   139d4:	00021870 	.word	0x00021870

000139d8 <mp_obj_str_format_helper>:
#else
// define to nothing to improve coverage
#define terse_str_format_value_error()
#endif

STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   139d8:	b590      	push	{r4, r7, lr}
   139da:	b0ad      	sub	sp, #180	; 0xb4
   139dc:	af04      	add	r7, sp, #16
   139de:	60f8      	str	r0, [r7, #12]
   139e0:	60b9      	str	r1, [r7, #8]
   139e2:	607a      	str	r2, [r7, #4]
   139e4:	603b      	str	r3, [r7, #0]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   139e6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   139ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
   139ee:	2110      	movs	r1, #16
   139f0:	4618      	mov	r0, r3
   139f2:	f7ed fce1 	bl	13b8 <vstr_init_print>

    for (; str < top; str++) {
   139f6:	f000 bc91 	b.w	1431c <mp_obj_str_format_helper+0x944>
        if (*str == '}') {
   139fa:	68bb      	ldr	r3, [r7, #8]
   139fc:	781b      	ldrb	r3, [r3, #0]
   139fe:	2b7d      	cmp	r3, #125	; 0x7d
   13a00:	d114      	bne.n	13a2c <mp_obj_str_format_helper+0x54>
            str++;
   13a02:	68bb      	ldr	r3, [r7, #8]
   13a04:	3301      	adds	r3, #1
   13a06:	60bb      	str	r3, [r7, #8]
            if (str < top && *str == '}') {
   13a08:	68ba      	ldr	r2, [r7, #8]
   13a0a:	687b      	ldr	r3, [r7, #4]
   13a0c:	429a      	cmp	r2, r3
   13a0e:	d20b      	bcs.n	13a28 <mp_obj_str_format_helper+0x50>
   13a10:	68bb      	ldr	r3, [r7, #8]
   13a12:	781b      	ldrb	r3, [r3, #0]
   13a14:	2b7d      	cmp	r3, #125	; 0x7d
   13a16:	d107      	bne.n	13a28 <mp_obj_str_format_helper+0x50>
                vstr_add_byte(&vstr, '}');
   13a18:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13a1c:	217d      	movs	r1, #125	; 0x7d
   13a1e:	4618      	mov	r0, r3
   13a20:	f7ed fdd2 	bl	15c8 <vstr_add_byte>
                continue;
   13a24:	f000 bc77 	b.w	14316 <mp_obj_str_format_helper+0x93e>
            }
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13a28:	f7ff ffce 	bl	139c8 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("single '}' encountered in format string");
            }
        }
        if (*str != '{') {
   13a2c:	68bb      	ldr	r3, [r7, #8]
   13a2e:	781b      	ldrb	r3, [r3, #0]
   13a30:	2b7b      	cmp	r3, #123	; 0x7b
   13a32:	d009      	beq.n	13a48 <mp_obj_str_format_helper+0x70>
            vstr_add_byte(&vstr, *str);
   13a34:	68bb      	ldr	r3, [r7, #8]
   13a36:	781a      	ldrb	r2, [r3, #0]
   13a38:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13a3c:	4611      	mov	r1, r2
   13a3e:	4618      	mov	r0, r3
   13a40:	f7ed fdc2 	bl	15c8 <vstr_add_byte>
            continue;
   13a44:	f000 bc67 	b.w	14316 <mp_obj_str_format_helper+0x93e>
        }

        str++;
   13a48:	68bb      	ldr	r3, [r7, #8]
   13a4a:	3301      	adds	r3, #1
   13a4c:	60bb      	str	r3, [r7, #8]
        if (str < top && *str == '{') {
   13a4e:	68ba      	ldr	r2, [r7, #8]
   13a50:	687b      	ldr	r3, [r7, #4]
   13a52:	429a      	cmp	r2, r3
   13a54:	d20b      	bcs.n	13a6e <mp_obj_str_format_helper+0x96>
   13a56:	68bb      	ldr	r3, [r7, #8]
   13a58:	781b      	ldrb	r3, [r3, #0]
   13a5a:	2b7b      	cmp	r3, #123	; 0x7b
   13a5c:	d107      	bne.n	13a6e <mp_obj_str_format_helper+0x96>
            vstr_add_byte(&vstr, '{');
   13a5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13a62:	217b      	movs	r1, #123	; 0x7b
   13a64:	4618      	mov	r0, r3
   13a66:	f7ed fdaf 	bl	15c8 <vstr_add_byte>
            continue;
   13a6a:	f000 bc54 	b.w	14316 <mp_obj_str_format_helper+0x93e>
        }

        // replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"

        const char *field_name = NULL;
   13a6e:	2300      	movs	r3, #0
   13a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const char *field_name_top = NULL;
   13a74:	2300      	movs	r3, #0
   13a76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char conversion = '\0';
   13a7a:	2300      	movs	r3, #0
   13a7c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        const char *format_spec = NULL;
   13a80:	2300      	movs	r3, #0
   13a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   13a86:	68ba      	ldr	r2, [r7, #8]
   13a88:	687b      	ldr	r3, [r7, #4]
   13a8a:	429a      	cmp	r2, r3
   13a8c:	d225      	bcs.n	13ada <mp_obj_str_format_helper+0x102>
   13a8e:	68bb      	ldr	r3, [r7, #8]
   13a90:	781b      	ldrb	r3, [r3, #0]
   13a92:	2b7d      	cmp	r3, #125	; 0x7d
   13a94:	d021      	beq.n	13ada <mp_obj_str_format_helper+0x102>
   13a96:	68bb      	ldr	r3, [r7, #8]
   13a98:	781b      	ldrb	r3, [r3, #0]
   13a9a:	2b21      	cmp	r3, #33	; 0x21
   13a9c:	d01d      	beq.n	13ada <mp_obj_str_format_helper+0x102>
   13a9e:	68bb      	ldr	r3, [r7, #8]
   13aa0:	781b      	ldrb	r3, [r3, #0]
   13aa2:	2b3a      	cmp	r3, #58	; 0x3a
   13aa4:	d019      	beq.n	13ada <mp_obj_str_format_helper+0x102>
            field_name = (const char *)str;
   13aa6:	68bb      	ldr	r3, [r7, #8]
   13aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13aac:	e002      	b.n	13ab4 <mp_obj_str_format_helper+0xdc>
                ++str;
   13aae:	68bb      	ldr	r3, [r7, #8]
   13ab0:	3301      	adds	r3, #1
   13ab2:	60bb      	str	r3, [r7, #8]
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13ab4:	68ba      	ldr	r2, [r7, #8]
   13ab6:	687b      	ldr	r3, [r7, #4]
   13ab8:	429a      	cmp	r2, r3
   13aba:	d20b      	bcs.n	13ad4 <mp_obj_str_format_helper+0xfc>
   13abc:	68bb      	ldr	r3, [r7, #8]
   13abe:	781b      	ldrb	r3, [r3, #0]
   13ac0:	2b7d      	cmp	r3, #125	; 0x7d
   13ac2:	d007      	beq.n	13ad4 <mp_obj_str_format_helper+0xfc>
   13ac4:	68bb      	ldr	r3, [r7, #8]
   13ac6:	781b      	ldrb	r3, [r3, #0]
   13ac8:	2b21      	cmp	r3, #33	; 0x21
   13aca:	d003      	beq.n	13ad4 <mp_obj_str_format_helper+0xfc>
   13acc:	68bb      	ldr	r3, [r7, #8]
   13ace:	781b      	ldrb	r3, [r3, #0]
   13ad0:	2b3a      	cmp	r3, #58	; 0x3a
   13ad2:	d1ec      	bne.n	13aae <mp_obj_str_format_helper+0xd6>
            }
            field_name_top = (const char *)str;
   13ad4:	68bb      	ldr	r3, [r7, #8]
   13ad6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // conversion ::=  "r" | "s"

        if (str < top && *str == '!') {
   13ada:	68ba      	ldr	r2, [r7, #8]
   13adc:	687b      	ldr	r3, [r7, #4]
   13ade:	429a      	cmp	r2, r3
   13ae0:	d21b      	bcs.n	13b1a <mp_obj_str_format_helper+0x142>
   13ae2:	68bb      	ldr	r3, [r7, #8]
   13ae4:	781b      	ldrb	r3, [r3, #0]
   13ae6:	2b21      	cmp	r3, #33	; 0x21
   13ae8:	d117      	bne.n	13b1a <mp_obj_str_format_helper+0x142>
            str++;
   13aea:	68bb      	ldr	r3, [r7, #8]
   13aec:	3301      	adds	r3, #1
   13aee:	60bb      	str	r3, [r7, #8]
            if (str < top && (*str == 'r' || *str == 's')) {
   13af0:	68ba      	ldr	r2, [r7, #8]
   13af2:	687b      	ldr	r3, [r7, #4]
   13af4:	429a      	cmp	r2, r3
   13af6:	d20e      	bcs.n	13b16 <mp_obj_str_format_helper+0x13e>
   13af8:	68bb      	ldr	r3, [r7, #8]
   13afa:	781b      	ldrb	r3, [r3, #0]
   13afc:	2b72      	cmp	r3, #114	; 0x72
   13afe:	d003      	beq.n	13b08 <mp_obj_str_format_helper+0x130>
   13b00:	68bb      	ldr	r3, [r7, #8]
   13b02:	781b      	ldrb	r3, [r3, #0]
   13b04:	2b73      	cmp	r3, #115	; 0x73
   13b06:	d106      	bne.n	13b16 <mp_obj_str_format_helper+0x13e>
                conversion = *str++;
   13b08:	68bb      	ldr	r3, [r7, #8]
   13b0a:	1c5a      	adds	r2, r3, #1
   13b0c:	60ba      	str	r2, [r7, #8]
   13b0e:	781b      	ldrb	r3, [r3, #0]
   13b10:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   13b14:	e001      	b.n	13b1a <mp_obj_str_format_helper+0x142>
            } else {
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13b16:	f7ff ff57 	bl	139c8 <terse_str_format_value_error>
                    }
                }
            }
        }

        if (str < top && *str == ':') {
   13b1a:	68ba      	ldr	r2, [r7, #8]
   13b1c:	687b      	ldr	r3, [r7, #4]
   13b1e:	429a      	cmp	r2, r3
   13b20:	d231      	bcs.n	13b86 <mp_obj_str_format_helper+0x1ae>
   13b22:	68bb      	ldr	r3, [r7, #8]
   13b24:	781b      	ldrb	r3, [r3, #0]
   13b26:	2b3a      	cmp	r3, #58	; 0x3a
   13b28:	d12d      	bne.n	13b86 <mp_obj_str_format_helper+0x1ae>
            str++;
   13b2a:	68bb      	ldr	r3, [r7, #8]
   13b2c:	3301      	adds	r3, #1
   13b2e:	60bb      	str	r3, [r7, #8]
            // {:} is the same as {}, which is the same as {!s}
            // This makes a difference when passing in a True or False
            // '{}'.format(True) returns 'True'
            // '{:d}'.format(True) returns '1'
            // So we treat {:} as {} and this later gets treated to be {!s}
            if (*str != '}') {
   13b30:	68bb      	ldr	r3, [r7, #8]
   13b32:	781b      	ldrb	r3, [r3, #0]
   13b34:	2b7d      	cmp	r3, #125	; 0x7d
   13b36:	d026      	beq.n	13b86 <mp_obj_str_format_helper+0x1ae>
                format_spec = str;
   13b38:	68bb      	ldr	r3, [r7, #8]
   13b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                for (int nest = 1; str < top;) {
   13b3e:	2301      	movs	r3, #1
   13b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13b44:	e019      	b.n	13b7a <mp_obj_str_format_helper+0x1a2>
                    if (*str == '{') {
   13b46:	68bb      	ldr	r3, [r7, #8]
   13b48:	781b      	ldrb	r3, [r3, #0]
   13b4a:	2b7b      	cmp	r3, #123	; 0x7b
   13b4c:	d105      	bne.n	13b5a <mp_obj_str_format_helper+0x182>
                        ++nest;
   13b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13b52:	3301      	adds	r3, #1
   13b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13b58:	e00c      	b.n	13b74 <mp_obj_str_format_helper+0x19c>
                    } else if (*str == '}') {
   13b5a:	68bb      	ldr	r3, [r7, #8]
   13b5c:	781b      	ldrb	r3, [r3, #0]
   13b5e:	2b7d      	cmp	r3, #125	; 0x7d
   13b60:	d108      	bne.n	13b74 <mp_obj_str_format_helper+0x19c>
                        if (--nest == 0) {
   13b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13b66:	3b01      	subs	r3, #1
   13b68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13b70:	2b00      	cmp	r3, #0
   13b72:	d007      	beq.n	13b84 <mp_obj_str_format_helper+0x1ac>
                            break;
                        }
                    }
                    ++str;
   13b74:	68bb      	ldr	r3, [r7, #8]
   13b76:	3301      	adds	r3, #1
   13b78:	60bb      	str	r3, [r7, #8]
                for (int nest = 1; str < top;) {
   13b7a:	68ba      	ldr	r2, [r7, #8]
   13b7c:	687b      	ldr	r3, [r7, #4]
   13b7e:	429a      	cmp	r2, r3
   13b80:	d3e1      	bcc.n	13b46 <mp_obj_str_format_helper+0x16e>
   13b82:	e000      	b.n	13b86 <mp_obj_str_format_helper+0x1ae>
                            break;
   13b84:	bf00      	nop
                }
            }
        }
        if (str >= top) {
   13b86:	68ba      	ldr	r2, [r7, #8]
   13b88:	687b      	ldr	r3, [r7, #4]
   13b8a:	429a      	cmp	r2, r3
   13b8c:	d301      	bcc.n	13b92 <mp_obj_str_format_helper+0x1ba>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13b8e:	f7ff ff1b 	bl	139c8 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("unmatched '{' in format");
            }
        }
        if (*str != '}') {
   13b92:	68bb      	ldr	r3, [r7, #8]
   13b94:	781b      	ldrb	r3, [r3, #0]
   13b96:	2b7d      	cmp	r3, #125	; 0x7d
   13b98:	d001      	beq.n	13b9e <mp_obj_str_format_helper+0x1c6>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13b9a:	f7ff ff15 	bl	139c8 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("expected ':' after format specifier");
            }
        }

        mp_obj_t arg = mp_const_none;
   13b9e:	4ba8      	ldr	r3, [pc, #672]	; (13e40 <mp_obj_str_format_helper+0x468>)
   13ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        if (field_name) {
   13ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13ba8:	2b00      	cmp	r3, #0
   13baa:	d07b      	beq.n	13ca4 <mp_obj_str_format_helper+0x2cc>
            int index = 0;
   13bac:	2300      	movs	r3, #0
   13bae:	643b      	str	r3, [r7, #64]	; 0x40
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   13bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13bb4:	781b      	ldrb	r3, [r3, #0]
   13bb6:	4618      	mov	r0, r3
   13bb8:	f7ee fc2c 	bl	2414 <unichar_isdigit>
   13bbc:	4603      	mov	r3, r0
   13bbe:	2b00      	cmp	r3, #0
   13bc0:	d028      	beq.n	13c14 <mp_obj_str_format_helper+0x23c>
                if (*arg_i > 0) {
   13bc2:	683b      	ldr	r3, [r7, #0]
   13bc4:	681b      	ldr	r3, [r3, #0]
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	dd01      	ble.n	13bce <mp_obj_str_format_helper+0x1f6>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13bca:	f7ff fefd 	bl	139c8 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError(
                            "can't switch from automatic field numbering to manual field specification");
                    }
                }
                field_name = str_to_int(field_name, field_name_top, &index);
   13bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
   13bd2:	461a      	mov	r2, r3
   13bd4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   13bd8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13bdc:	f7ff fe3e 	bl	1385c <str_to_int>
   13be0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                if ((uint)index >= n_args - 1) {
   13be4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13be8:	3b01      	subs	r3, #1
   13bea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13bec:	4293      	cmp	r3, r2
   13bee:	d803      	bhi.n	13bf8 <mp_obj_str_format_helper+0x220>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13bf0:	4994      	ldr	r1, [pc, #592]	; (13e44 <mp_obj_str_format_helper+0x46c>)
   13bf2:	4895      	ldr	r0, [pc, #596]	; (13e48 <mp_obj_str_format_helper+0x470>)
   13bf4:	f7f9 f9ae 	bl	cf54 <mp_raise_msg>
                }
                arg = args[index + 1];
   13bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13bfa:	3301      	adds	r3, #1
   13bfc:	009b      	lsls	r3, r3, #2
   13bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13c02:	4413      	add	r3, r2
   13c04:	681b      	ldr	r3, [r3, #0]
   13c06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                *arg_i = -1;
   13c0a:	683b      	ldr	r3, [r7, #0]
   13c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c10:	601a      	str	r2, [r3, #0]
   13c12:	e03e      	b.n	13c92 <mp_obj_str_format_helper+0x2ba>
            } else {
                const char *lookup;
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   13c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13c1c:	e004      	b.n	13c28 <mp_obj_str_format_helper+0x250>
   13c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13c22:	3301      	adds	r3, #1
   13c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13c28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13c30:	429a      	cmp	r2, r3
   13c32:	d209      	bcs.n	13c48 <mp_obj_str_format_helper+0x270>
   13c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13c38:	781b      	ldrb	r3, [r3, #0]
   13c3a:	2b2e      	cmp	r3, #46	; 0x2e
   13c3c:	d004      	beq.n	13c48 <mp_obj_str_format_helper+0x270>
   13c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13c42:	781b      	ldrb	r3, [r3, #0]
   13c44:	2b5b      	cmp	r3, #91	; 0x5b
   13c46:	d1ea      	bne.n	13c1e <mp_obj_str_format_helper+0x246>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   13c48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13c50:	1ad3      	subs	r3, r2, r3
   13c52:	4619      	mov	r1, r3
   13c54:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13c58:	f001 fb2a 	bl	152b0 <mp_obj_new_str_via_qstr>
   13c5c:	6738      	str	r0, [r7, #112]	; 0x70
                field_name = lookup;
   13c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   13c66:	2200      	movs	r2, #0
   13c68:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13c6a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   13c6e:	f7f9 fc03 	bl	d478 <mp_map_lookup>
   13c72:	66f8      	str	r0, [r7, #108]	; 0x6c
                if (key_elem == NULL) {
   13c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13c76:	2b00      	cmp	r3, #0
   13c78:	d107      	bne.n	13c8a <mp_obj_str_format_helper+0x2b2>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   13c7a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13c7c:	4873      	ldr	r0, [pc, #460]	; (13e4c <mp_obj_str_format_helper+0x474>)
   13c7e:	f7fb fc23 	bl	f4c8 <mp_obj_new_exception_arg1>
   13c82:	4603      	mov	r3, r0
   13c84:	4618      	mov	r0, r3
   13c86:	f7ec fb2b 	bl	2e0 <nlr_jump>
                }
                arg = key_elem->value;
   13c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13c8c:	685b      	ldr	r3, [r3, #4]
   13c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
            if (field_name < field_name_top) {
   13c92:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   13c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13c9a:	429a      	cmp	r2, r3
   13c9c:	d223      	bcs.n	13ce6 <mp_obj_str_format_helper+0x30e>
                mp_raise_NotImplementedError("attributes not supported yet");
   13c9e:	486c      	ldr	r0, [pc, #432]	; (13e50 <mp_obj_str_format_helper+0x478>)
   13ca0:	f7f9 f996 	bl	cfd0 <mp_raise_NotImplementedError>
            }
        } else {
            if (*arg_i < 0) {
   13ca4:	683b      	ldr	r3, [r7, #0]
   13ca6:	681b      	ldr	r3, [r3, #0]
   13ca8:	2b00      	cmp	r3, #0
   13caa:	da01      	bge.n	13cb0 <mp_obj_str_format_helper+0x2d8>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13cac:	f7ff fe8c 	bl	139c8 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError(
                        "can't switch from manual field specification to automatic field numbering");
                }
            }
            if ((uint)*arg_i >= n_args - 1) {
   13cb0:	683b      	ldr	r3, [r7, #0]
   13cb2:	681b      	ldr	r3, [r3, #0]
   13cb4:	461a      	mov	r2, r3
   13cb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13cba:	3b01      	subs	r3, #1
   13cbc:	429a      	cmp	r2, r3
   13cbe:	d303      	bcc.n	13cc8 <mp_obj_str_format_helper+0x2f0>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13cc0:	4960      	ldr	r1, [pc, #384]	; (13e44 <mp_obj_str_format_helper+0x46c>)
   13cc2:	4861      	ldr	r0, [pc, #388]	; (13e48 <mp_obj_str_format_helper+0x470>)
   13cc4:	f7f9 f946 	bl	cf54 <mp_raise_msg>
            }
            arg = args[(*arg_i) + 1];
   13cc8:	683b      	ldr	r3, [r7, #0]
   13cca:	681b      	ldr	r3, [r3, #0]
   13ccc:	3301      	adds	r3, #1
   13cce:	009b      	lsls	r3, r3, #2
   13cd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13cd4:	4413      	add	r3, r2
   13cd6:	681b      	ldr	r3, [r3, #0]
   13cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*arg_i)++;
   13cdc:	683b      	ldr	r3, [r7, #0]
   13cde:	681b      	ldr	r3, [r3, #0]
   13ce0:	1c5a      	adds	r2, r3, #1
   13ce2:	683b      	ldr	r3, [r7, #0]
   13ce4:	601a      	str	r2, [r3, #0]
        }
        if (!format_spec && !conversion) {
   13ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13cea:	2b00      	cmp	r3, #0
   13cec:	d106      	bne.n	13cfc <mp_obj_str_format_helper+0x324>
   13cee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13cf2:	2b00      	cmp	r3, #0
   13cf4:	d102      	bne.n	13cfc <mp_obj_str_format_helper+0x324>
            conversion = 's';
   13cf6:	2373      	movs	r3, #115	; 0x73
   13cf8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        }
        if (conversion) {
   13cfc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13d00:	2b00      	cmp	r3, #0
   13d02:	d02e      	beq.n	13d62 <mp_obj_str_format_helper+0x38a>
            mp_print_kind_t print_kind;
            if (conversion == 's') {
   13d04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13d08:	2b73      	cmp	r3, #115	; 0x73
   13d0a:	d103      	bne.n	13d14 <mp_obj_str_format_helper+0x33c>
                print_kind = PRINT_STR;
   13d0c:	2300      	movs	r3, #0
   13d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   13d12:	e00d      	b.n	13d30 <mp_obj_str_format_helper+0x358>
            } else {
                assert(conversion == 'r');
   13d14:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13d18:	2b72      	cmp	r3, #114	; 0x72
   13d1a:	d006      	beq.n	13d2a <mp_obj_str_format_helper+0x352>
   13d1c:	4b4d      	ldr	r3, [pc, #308]	; (13e54 <mp_obj_str_format_helper+0x47c>)
   13d1e:	4a4e      	ldr	r2, [pc, #312]	; (13e58 <mp_obj_str_format_helper+0x480>)
   13d20:	f240 4147 	movw	r1, #1095	; 0x447
   13d24:	484d      	ldr	r0, [pc, #308]	; (13e5c <mp_obj_str_format_helper+0x484>)
   13d26:	f007 fb39 	bl	1b39c <__assert_func>
                print_kind = PRINT_REPR;
   13d2a:	2301      	movs	r3, #1
   13d2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            vstr_t arg_vstr;
            mp_print_t arg_print;
            vstr_init_print(&arg_vstr, 16, &arg_print);
   13d30:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13d34:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13d38:	2110      	movs	r1, #16
   13d3a:	4618      	mov	r0, r3
   13d3c:	f7ed fb3c 	bl	13b8 <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   13d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
   13d44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13d48:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13d4c:	4618      	mov	r0, r3
   13d4e:	f7f9 fd6f 	bl	d830 <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   13d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13d56:	4619      	mov	r1, r3
   13d58:	4841      	ldr	r0, [pc, #260]	; (13e60 <mp_obj_str_format_helper+0x488>)
   13d5a:	f001 fabb 	bl	152d4 <mp_obj_new_str_from_vstr>
   13d5e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        }

        char fill = '\0';
   13d62:	2300      	movs	r3, #0
   13d64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        char align = '\0';
   13d68:	2300      	movs	r3, #0
   13d6a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        int width = -1;
   13d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d72:	64bb      	str	r3, [r7, #72]	; 0x48
        int precision = -1;
   13d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d78:	647b      	str	r3, [r7, #68]	; 0x44
        char type = '\0';
   13d7a:	2300      	movs	r3, #0
   13d7c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        int flags = 0;
   13d80:	2300      	movs	r3, #0
   13d82:	67bb      	str	r3, [r7, #120]	; 0x78

        if (format_spec) {
   13d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13d88:	2b00      	cmp	r3, #0
   13d8a:	f000 80ce 	beq.w	13f2a <mp_obj_str_format_helper+0x552>
            // precision   ::=  integer
            // type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

            // recursively call the formatter to format any nested specifiers
            MP_STACK_CHECK();
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   13d8e:	f107 0018 	add.w	r0, r7, #24
   13d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   13d96:	9302      	str	r3, [sp, #8]
   13d98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   13d9c:	9301      	str	r3, [sp, #4]
   13d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13da2:	9300      	str	r3, [sp, #0]
   13da4:	683b      	ldr	r3, [r7, #0]
   13da6:	68ba      	ldr	r2, [r7, #8]
   13da8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   13dac:	f7ff fe14 	bl	139d8 <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   13db0:	f107 0318 	add.w	r3, r7, #24
   13db4:	4618      	mov	r0, r3
   13db6:	f7ed fbeb 	bl	1590 <vstr_null_terminated_str>
   13dba:	6778      	str	r0, [r7, #116]	; 0x74
            const char *stop = s + format_spec_vstr.len;
   13dbc:	69fb      	ldr	r3, [r7, #28]
   13dbe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13dc0:	4413      	add	r3, r2
   13dc2:	66bb      	str	r3, [r7, #104]	; 0x68
            if (isalignment(*s)) {
   13dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13dc6:	781b      	ldrb	r3, [r3, #0]
   13dc8:	4618      	mov	r0, r3
   13dca:	f7ff fd7f 	bl	138cc <isalignment>
   13dce:	4603      	mov	r3, r0
   13dd0:	2b00      	cmp	r3, #0
   13dd2:	d006      	beq.n	13de2 <mp_obj_str_format_helper+0x40a>
                align = *s++;
   13dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13dd6:	1c5a      	adds	r2, r3, #1
   13dd8:	677a      	str	r2, [r7, #116]	; 0x74
   13dda:	781b      	ldrb	r3, [r3, #0]
   13ddc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13de0:	e018      	b.n	13e14 <mp_obj_str_format_helper+0x43c>
            } else if (*s && isalignment(s[1])) {
   13de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13de4:	781b      	ldrb	r3, [r3, #0]
   13de6:	2b00      	cmp	r3, #0
   13de8:	d014      	beq.n	13e14 <mp_obj_str_format_helper+0x43c>
   13dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13dec:	3301      	adds	r3, #1
   13dee:	781b      	ldrb	r3, [r3, #0]
   13df0:	4618      	mov	r0, r3
   13df2:	f7ff fd6b 	bl	138cc <isalignment>
   13df6:	4603      	mov	r3, r0
   13df8:	2b00      	cmp	r3, #0
   13dfa:	d00b      	beq.n	13e14 <mp_obj_str_format_helper+0x43c>
                fill = *s++;
   13dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13dfe:	1c5a      	adds	r2, r3, #1
   13e00:	677a      	str	r2, [r7, #116]	; 0x74
   13e02:	781b      	ldrb	r3, [r3, #0]
   13e04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                align = *s++;
   13e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e0a:	1c5a      	adds	r2, r3, #1
   13e0c:	677a      	str	r2, [r7, #116]	; 0x74
   13e0e:	781b      	ldrb	r3, [r3, #0]
   13e10:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
            if (*s == '+' || *s == '-' || *s == ' ') {
   13e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e16:	781b      	ldrb	r3, [r3, #0]
   13e18:	2b2b      	cmp	r3, #43	; 0x2b
   13e1a:	d007      	beq.n	13e2c <mp_obj_str_format_helper+0x454>
   13e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e1e:	781b      	ldrb	r3, [r3, #0]
   13e20:	2b2d      	cmp	r3, #45	; 0x2d
   13e22:	d003      	beq.n	13e2c <mp_obj_str_format_helper+0x454>
   13e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e26:	781b      	ldrb	r3, [r3, #0]
   13e28:	2b20      	cmp	r3, #32
   13e2a:	d126      	bne.n	13e7a <mp_obj_str_format_helper+0x4a2>
                if (*s == '+') {
   13e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e2e:	781b      	ldrb	r3, [r3, #0]
   13e30:	2b2b      	cmp	r3, #43	; 0x2b
   13e32:	d117      	bne.n	13e64 <mp_obj_str_format_helper+0x48c>
                    flags |= PF_FLAG_SHOW_SIGN;
   13e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13e36:	f043 0302 	orr.w	r3, r3, #2
   13e3a:	67bb      	str	r3, [r7, #120]	; 0x78
   13e3c:	e01a      	b.n	13e74 <mp_obj_str_format_helper+0x49c>
   13e3e:	bf00      	nop
   13e40:	00021480 	.word	0x00021480
   13e44:	00021884 	.word	0x00021884
   13e48:	0002052c 	.word	0x0002052c
   13e4c:	00020568 	.word	0x00020568
   13e50:	000218a0 	.word	0x000218a0
   13e54:	000218c0 	.word	0x000218c0
   13e58:	00021c0c 	.word	0x00021c0c
   13e5c:	00021658 	.word	0x00021658
   13e60:	00021b30 	.word	0x00021b30
                } else if (*s == ' ') {
   13e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e66:	781b      	ldrb	r3, [r3, #0]
   13e68:	2b20      	cmp	r3, #32
   13e6a:	d103      	bne.n	13e74 <mp_obj_str_format_helper+0x49c>
                    flags |= PF_FLAG_SPACE_SIGN;
   13e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13e6e:	f043 0304 	orr.w	r3, r3, #4
   13e72:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                s++;
   13e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e76:	3301      	adds	r3, #1
   13e78:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '#') {
   13e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e7c:	781b      	ldrb	r3, [r3, #0]
   13e7e:	2b23      	cmp	r3, #35	; 0x23
   13e80:	d106      	bne.n	13e90 <mp_obj_str_format_helper+0x4b8>
                flags |= PF_FLAG_SHOW_PREFIX;
   13e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13e84:	f043 0310 	orr.w	r3, r3, #16
   13e88:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e8c:	3301      	adds	r3, #1
   13e8e:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '0') {
   13e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	2b30      	cmp	r3, #48	; 0x30
   13e96:	d10d      	bne.n	13eb4 <mp_obj_str_format_helper+0x4dc>
                if (!align) {
   13e98:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13e9c:	2b00      	cmp	r3, #0
   13e9e:	d102      	bne.n	13ea6 <mp_obj_str_format_helper+0x4ce>
                    align = '=';
   13ea0:	233d      	movs	r3, #61	; 0x3d
   13ea2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
                }
                if (!fill) {
   13ea6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13eaa:	2b00      	cmp	r3, #0
   13eac:	d102      	bne.n	13eb4 <mp_obj_str_format_helper+0x4dc>
                    fill = '0';
   13eae:	2330      	movs	r3, #48	; 0x30
   13eb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                }
            }
            s = str_to_int(s, stop, &width);
   13eb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
   13eb8:	461a      	mov	r2, r3
   13eba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13ebc:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13ebe:	f7ff fccd 	bl	1385c <str_to_int>
   13ec2:	6778      	str	r0, [r7, #116]	; 0x74
            if (*s == ',') {
   13ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ec6:	781b      	ldrb	r3, [r3, #0]
   13ec8:	2b2c      	cmp	r3, #44	; 0x2c
   13eca:	d106      	bne.n	13eda <mp_obj_str_format_helper+0x502>
                flags |= PF_FLAG_SHOW_COMMA;
   13ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13ece:	f043 0320 	orr.w	r3, r3, #32
   13ed2:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ed6:	3301      	adds	r3, #1
   13ed8:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '.') {
   13eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13edc:	781b      	ldrb	r3, [r3, #0]
   13ede:	2b2e      	cmp	r3, #46	; 0x2e
   13ee0:	d10a      	bne.n	13ef8 <mp_obj_str_format_helper+0x520>
                s++;
   13ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ee4:	3301      	adds	r3, #1
   13ee6:	677b      	str	r3, [r7, #116]	; 0x74
                s = str_to_int(s, stop, &precision);
   13ee8:	f107 0344 	add.w	r3, r7, #68	; 0x44
   13eec:	461a      	mov	r2, r3
   13eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13ef0:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13ef2:	f7ff fcb3 	bl	1385c <str_to_int>
   13ef6:	6778      	str	r0, [r7, #116]	; 0x74
            }
            if (istype(*s)) {
   13ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13efa:	781b      	ldrb	r3, [r3, #0]
   13efc:	4618      	mov	r0, r3
   13efe:	f7ff fd01 	bl	13904 <istype>
   13f02:	4603      	mov	r3, r0
   13f04:	2b00      	cmp	r3, #0
   13f06:	d005      	beq.n	13f14 <mp_obj_str_format_helper+0x53c>
                type = *s++;
   13f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f0a:	1c5a      	adds	r2, r3, #1
   13f0c:	677a      	str	r2, [r7, #116]	; 0x74
   13f0e:	781b      	ldrb	r3, [r3, #0]
   13f10:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (*s) {
   13f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f16:	781b      	ldrb	r3, [r3, #0]
   13f18:	2b00      	cmp	r3, #0
   13f1a:	d001      	beq.n	13f20 <mp_obj_str_format_helper+0x548>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13f1c:	f7ff fd54 	bl	139c8 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("invalid format specifier");
                }
            }
            vstr_clear(&format_spec_vstr);
   13f20:	f107 0318 	add.w	r3, r7, #24
   13f24:	4618      	mov	r0, r3
   13f26:	f7ed fa5d 	bl	13e4 <vstr_clear>
        }
        if (!align) {
   13f2a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13f2e:	2b00      	cmp	r3, #0
   13f30:	d10d      	bne.n	13f4e <mp_obj_str_format_helper+0x576>
            if (arg_looks_numeric(arg)) {
   13f32:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13f36:	f7ff fd2f 	bl	13998 <arg_looks_numeric>
   13f3a:	4603      	mov	r3, r0
   13f3c:	2b00      	cmp	r3, #0
   13f3e:	d003      	beq.n	13f48 <mp_obj_str_format_helper+0x570>
                align = '>';
   13f40:	233e      	movs	r3, #62	; 0x3e
   13f42:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13f46:	e002      	b.n	13f4e <mp_obj_str_format_helper+0x576>
            } else {
                align = '<';
   13f48:	233c      	movs	r3, #60	; 0x3c
   13f4a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
        }
        if (!fill) {
   13f4e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13f52:	2b00      	cmp	r3, #0
   13f54:	d102      	bne.n	13f5c <mp_obj_str_format_helper+0x584>
            fill = ' ';
   13f56:	2320      	movs	r3, #32
   13f58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        }

        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   13f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13f5e:	f003 0306 	and.w	r3, r3, #6
   13f62:	2b00      	cmp	r3, #0
   13f64:	d00b      	beq.n	13f7e <mp_obj_str_format_helper+0x5a6>
            if (type == 's') {
   13f66:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13f6a:	2b73      	cmp	r3, #115	; 0x73
   13f6c:	d101      	bne.n	13f72 <mp_obj_str_format_helper+0x59a>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13f6e:	f7ff fd2b 	bl	139c8 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("sign not allowed in string format specifier");
                }
            }
            if (type == 'c') {
   13f72:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13f76:	2b63      	cmp	r3, #99	; 0x63
   13f78:	d101      	bne.n	13f7e <mp_obj_str_format_helper+0x5a6>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13f7a:	f7ff fd25 	bl	139c8 <terse_str_format_value_error>
                        "sign not allowed with integer format specifier 'c'");
                }
            }
        }

        switch (align) {
   13f7e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13f82:	2b3d      	cmp	r3, #61	; 0x3d
   13f84:	d008      	beq.n	13f98 <mp_obj_str_format_helper+0x5c0>
   13f86:	2b5e      	cmp	r3, #94	; 0x5e
   13f88:	d00b      	beq.n	13fa2 <mp_obj_str_format_helper+0x5ca>
   13f8a:	2b3c      	cmp	r3, #60	; 0x3c
   13f8c:	d10e      	bne.n	13fac <mp_obj_str_format_helper+0x5d4>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   13f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13f90:	f043 0301 	orr.w	r3, r3, #1
   13f94:	67bb      	str	r3, [r7, #120]	; 0x78
   13f96:	e009      	b.n	13fac <mp_obj_str_format_helper+0x5d4>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   13f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13f9e:	67bb      	str	r3, [r7, #120]	; 0x78
   13fa0:	e004      	b.n	13fac <mp_obj_str_format_helper+0x5d4>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   13fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13fa8:	67bb      	str	r3, [r7, #120]	; 0x78
   13faa:	bf00      	nop
        }

        if (arg_looks_integer(arg)) {
   13fac:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13fb0:	f7ff fcc4 	bl	1393c <arg_looks_integer>
   13fb4:	4603      	mov	r3, r0
   13fb6:	2b00      	cmp	r3, #0
   13fb8:	f000 8167 	beq.w	1428a <mp_obj_str_format_helper+0x8b2>
            switch (type) {
   13fbc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13fc0:	2b78      	cmp	r3, #120	; 0x78
   13fc2:	f200 815f 	bhi.w	14284 <mp_obj_str_format_helper+0x8ac>
   13fc6:	a201      	add	r2, pc, #4	; (adr r2, 13fcc <mp_obj_str_format_helper+0x5f4>)
   13fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13fcc:	000141ff 	.word	0x000141ff
   13fd0:	00014285 	.word	0x00014285
   13fd4:	00014285 	.word	0x00014285
   13fd8:	00014285 	.word	0x00014285
   13fdc:	00014285 	.word	0x00014285
   13fe0:	00014285 	.word	0x00014285
   13fe4:	00014285 	.word	0x00014285
   13fe8:	00014285 	.word	0x00014285
   13fec:	00014285 	.word	0x00014285
   13ff0:	00014285 	.word	0x00014285
   13ff4:	00014285 	.word	0x00014285
   13ff8:	00014285 	.word	0x00014285
   13ffc:	00014285 	.word	0x00014285
   14000:	00014285 	.word	0x00014285
   14004:	00014285 	.word	0x00014285
   14008:	00014285 	.word	0x00014285
   1400c:	00014285 	.word	0x00014285
   14010:	00014285 	.word	0x00014285
   14014:	00014285 	.word	0x00014285
   14018:	00014285 	.word	0x00014285
   1401c:	00014285 	.word	0x00014285
   14020:	00014285 	.word	0x00014285
   14024:	00014285 	.word	0x00014285
   14028:	00014285 	.word	0x00014285
   1402c:	00014285 	.word	0x00014285
   14030:	00014285 	.word	0x00014285
   14034:	00014285 	.word	0x00014285
   14038:	00014285 	.word	0x00014285
   1403c:	00014285 	.word	0x00014285
   14040:	00014285 	.word	0x00014285
   14044:	00014285 	.word	0x00014285
   14048:	00014285 	.word	0x00014285
   1404c:	00014285 	.word	0x00014285
   14050:	00014285 	.word	0x00014285
   14054:	00014285 	.word	0x00014285
   14058:	00014285 	.word	0x00014285
   1405c:	00014285 	.word	0x00014285
   14060:	00014289 	.word	0x00014289
   14064:	00014285 	.word	0x00014285
   14068:	00014285 	.word	0x00014285
   1406c:	00014285 	.word	0x00014285
   14070:	00014285 	.word	0x00014285
   14074:	00014285 	.word	0x00014285
   14078:	00014285 	.word	0x00014285
   1407c:	00014285 	.word	0x00014285
   14080:	00014285 	.word	0x00014285
   14084:	00014285 	.word	0x00014285
   14088:	00014285 	.word	0x00014285
   1408c:	00014285 	.word	0x00014285
   14090:	00014285 	.word	0x00014285
   14094:	00014285 	.word	0x00014285
   14098:	00014285 	.word	0x00014285
   1409c:	00014285 	.word	0x00014285
   140a0:	00014285 	.word	0x00014285
   140a4:	00014285 	.word	0x00014285
   140a8:	00014285 	.word	0x00014285
   140ac:	00014285 	.word	0x00014285
   140b0:	00014285 	.word	0x00014285
   140b4:	00014285 	.word	0x00014285
   140b8:	00014285 	.word	0x00014285
   140bc:	00014285 	.word	0x00014285
   140c0:	00014285 	.word	0x00014285
   140c4:	00014285 	.word	0x00014285
   140c8:	00014285 	.word	0x00014285
   140cc:	00014285 	.word	0x00014285
   140d0:	00014285 	.word	0x00014285
   140d4:	00014285 	.word	0x00014285
   140d8:	00014285 	.word	0x00014285
   140dc:	00014285 	.word	0x00014285
   140e0:	00014289 	.word	0x00014289
   140e4:	00014289 	.word	0x00014289
   140e8:	00014289 	.word	0x00014289
   140ec:	00014285 	.word	0x00014285
   140f0:	00014285 	.word	0x00014285
   140f4:	00014285 	.word	0x00014285
   140f8:	00014285 	.word	0x00014285
   140fc:	00014285 	.word	0x00014285
   14100:	00014285 	.word	0x00014285
   14104:	00014285 	.word	0x00014285
   14108:	00014285 	.word	0x00014285
   1410c:	00014285 	.word	0x00014285
   14110:	00014285 	.word	0x00014285
   14114:	00014285 	.word	0x00014285
   14118:	00014285 	.word	0x00014285
   1411c:	00014285 	.word	0x00014285
   14120:	00014285 	.word	0x00014285
   14124:	00014285 	.word	0x00014285
   14128:	00014285 	.word	0x00014285
   1412c:	00014259 	.word	0x00014259
   14130:	00014285 	.word	0x00014285
   14134:	00014285 	.word	0x00014285
   14138:	00014285 	.word	0x00014285
   1413c:	00014285 	.word	0x00014285
   14140:	00014285 	.word	0x00014285
   14144:	00014285 	.word	0x00014285
   14148:	00014285 	.word	0x00014285
   1414c:	00014285 	.word	0x00014285
   14150:	00014285 	.word	0x00014285
   14154:	000141b1 	.word	0x000141b1
   14158:	000141d5 	.word	0x000141d5
   1415c:	000141ff 	.word	0x000141ff
   14160:	00014289 	.word	0x00014289
   14164:	00014289 	.word	0x00014289
   14168:	00014289 	.word	0x00014289
   1416c:	00014285 	.word	0x00014285
   14170:	00014285 	.word	0x00014285
   14174:	00014285 	.word	0x00014285
   14178:	00014285 	.word	0x00014285
   1417c:	00014285 	.word	0x00014285
   14180:	00014285 	.word	0x00014285
   14184:	000141ff 	.word	0x000141ff
   14188:	00014223 	.word	0x00014223
   1418c:	00014285 	.word	0x00014285
   14190:	00014285 	.word	0x00014285
   14194:	00014285 	.word	0x00014285
   14198:	00014285 	.word	0x00014285
   1419c:	00014285 	.word	0x00014285
   141a0:	00014285 	.word	0x00014285
   141a4:	00014285 	.word	0x00014285
   141a8:	00014285 	.word	0x00014285
   141ac:	00014259 	.word	0x00014259
                case 'b':
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   141b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   141b2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   141b6:	2200      	movs	r2, #0
   141b8:	9203      	str	r2, [sp, #12]
   141ba:	9302      	str	r3, [sp, #8]
   141bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   141c0:	9301      	str	r3, [sp, #4]
   141c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   141c4:	9300      	str	r3, [sp, #0]
   141c6:	2361      	movs	r3, #97	; 0x61
   141c8:	2202      	movs	r2, #2
   141ca:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   141ce:	f7ed fcbb 	bl	1b48 <mp_print_mp_int>
                    continue;
   141d2:	e0a0      	b.n	14316 <mp_obj_str_format_helper+0x93e>

                case 'c':
                {
                    char ch = mp_obj_get_int(arg);
   141d4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   141d8:	f7f9 fcd6 	bl	db88 <mp_obj_get_int>
   141dc:	4603      	mov	r3, r0
   141de:	b2db      	uxtb	r3, r3
   141e0:	75fb      	strb	r3, [r7, #23]
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   141e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   141e4:	f107 0117 	add.w	r1, r7, #23
   141e8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   141ec:	9301      	str	r3, [sp, #4]
   141ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   141f2:	9300      	str	r3, [sp, #0]
   141f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   141f6:	2201      	movs	r2, #1
   141f8:	f7ed fb66 	bl	18c8 <mp_print_strn>
   141fc:	e08b      	b.n	14316 <mp_obj_str_format_helper+0x93e>
                }

                case '\0':  // No explicit format type implies 'd'
                case 'n':   // I don't think we support locales in uPy so use 'd'
                case 'd':
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   141fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14200:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14204:	2200      	movs	r2, #0
   14206:	9203      	str	r2, [sp, #12]
   14208:	9302      	str	r3, [sp, #8]
   1420a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1420e:	9301      	str	r3, [sp, #4]
   14210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14212:	9300      	str	r3, [sp, #0]
   14214:	2361      	movs	r3, #97	; 0x61
   14216:	220a      	movs	r2, #10
   14218:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1421c:	f7ed fc94 	bl	1b48 <mp_print_mp_int>
                    continue;
   14220:	e079      	b.n	14316 <mp_obj_str_format_helper+0x93e>

                case 'o':
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   14222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14224:	f003 0310 	and.w	r3, r3, #16
   14228:	2b00      	cmp	r3, #0
   1422a:	d003      	beq.n	14234 <mp_obj_str_format_helper+0x85c>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   1422c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1422e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   14232:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   14234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14236:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1423a:	2200      	movs	r2, #0
   1423c:	9203      	str	r2, [sp, #12]
   1423e:	9302      	str	r3, [sp, #8]
   14240:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14244:	9301      	str	r3, [sp, #4]
   14246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14248:	9300      	str	r3, [sp, #0]
   1424a:	2361      	movs	r3, #97	; 0x61
   1424c:	2208      	movs	r2, #8
   1424e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14252:	f7ed fc79 	bl	1b48 <mp_print_mp_int>
                    continue;
   14256:	e05e      	b.n	14316 <mp_obj_str_format_helper+0x93e>

                case 'X':
                case 'x':
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   14258:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   1425c:	f1a3 0117 	sub.w	r1, r3, #23
   14260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14262:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14266:	2200      	movs	r2, #0
   14268:	9203      	str	r2, [sp, #12]
   1426a:	9302      	str	r3, [sp, #8]
   1426c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14270:	9301      	str	r3, [sp, #4]
   14272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14274:	9300      	str	r3, [sp, #0]
   14276:	460b      	mov	r3, r1
   14278:	2210      	movs	r2, #16
   1427a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1427e:	f7ed fc63 	bl	1b48 <mp_print_mp_int>
                    continue;
   14282:	e048      	b.n	14316 <mp_obj_str_format_helper+0x93e>
                    // looks like an integer
                    break;

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14284:	f7ff fba0 	bl	139c8 <terse_str_format_value_error>
                    break;
   14288:	bf00      	nop
            }
        }

        // NOTE: no else here. We need the e, f, g etc formats for integer
        //       arguments (from above if) to take this if.
        if (arg_looks_numeric(arg)) {
   1428a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   1428e:	f7ff fb83 	bl	13998 <arg_looks_numeric>
   14292:	4603      	mov	r3, r0
   14294:	2b00      	cmp	r3, #0
   14296:	d00f      	beq.n	142b8 <mp_obj_str_format_helper+0x8e0>
            if (!type) {
   14298:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   1429c:	2b00      	cmp	r3, #0
   1429e:	d102      	bne.n	142a6 <mp_obj_str_format_helper+0x8ce>
                // CPython sources say:
                //   Omitted type specifier.  Behaves in the same way as repr(x)
                //   and str(x) if no precision is given, else like 'g', but with
                //   at least one digit after the decimal point. */

                type = 'g';
   142a0:	2367      	movs	r3, #103	; 0x67
   142a2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (type == 'n') {
   142a6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   142aa:	2b6e      	cmp	r3, #110	; 0x6e
   142ac:	d102      	bne.n	142b4 <mp_obj_str_format_helper+0x8dc>
                type = 'g';
   142ae:	2367      	movs	r3, #103	; 0x67
   142b0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                    break;
#endif

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   142b4:	f7ff fb88 	bl	139c8 <terse_str_format_value_error>
                    }
            }
        } else {
            // arg doesn't look like a number

            if (align == '=') {
   142b8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   142bc:	2b3d      	cmp	r3, #61	; 0x3d
   142be:	d101      	bne.n	142c4 <mp_obj_str_format_helper+0x8ec>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   142c0:	f7ff fb82 	bl	139c8 <terse_str_format_value_error>
                    mp_raise_ValueError(
                        "'=' alignment not allowed in string format specifier");
                }
            }

            switch (type) {
   142c4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   142c8:	2b00      	cmp	r3, #0
   142ca:	d001      	beq.n	142d0 <mp_obj_str_format_helper+0x8f8>
   142cc:	2b73      	cmp	r3, #115	; 0x73
   142ce:	d120      	bne.n	14312 <mp_obj_str_format_helper+0x93a>
                case '\0': // no explicit format type implies 's'
                case 's': {
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   142d0:	f107 0310 	add.w	r3, r7, #16
   142d4:	4619      	mov	r1, r3
   142d6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   142da:	f001 f9bf 	bl	1565c <mp_obj_str_get_data>
   142de:	6678      	str	r0, [r7, #100]	; 0x64
                    if (precision < 0) {
   142e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   142e2:	2b00      	cmp	r3, #0
   142e4:	da01      	bge.n	142ea <mp_obj_str_format_helper+0x912>
                        precision = slen;
   142e6:	693b      	ldr	r3, [r7, #16]
   142e8:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    if (slen > (size_t)precision) {
   142ea:	693b      	ldr	r3, [r7, #16]
   142ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   142ee:	4293      	cmp	r3, r2
   142f0:	d901      	bls.n	142f6 <mp_obj_str_format_helper+0x91e>
                        slen = precision;
   142f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   142f4:	613b      	str	r3, [r7, #16]
                    }
                    mp_print_strn(&print, s, slen, flags, fill, width);
   142f6:	693a      	ldr	r2, [r7, #16]
   142f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   142fa:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   142fe:	9301      	str	r3, [sp, #4]
   14300:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14304:	9300      	str	r3, [sp, #0]
   14306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14308:	6e79      	ldr	r1, [r7, #100]	; 0x64
   1430a:	f7ed fadd 	bl	18c8 <mp_print_strn>
                    break;
   1430e:	bf00      	nop
   14310:	e001      	b.n	14316 <mp_obj_str_format_helper+0x93e>
                }

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14312:	f7ff fb59 	bl	139c8 <terse_str_format_value_error>
    for (; str < top; str++) {
   14316:	68bb      	ldr	r3, [r7, #8]
   14318:	3301      	adds	r3, #1
   1431a:	60bb      	str	r3, [r7, #8]
   1431c:	68ba      	ldr	r2, [r7, #8]
   1431e:	687b      	ldr	r3, [r7, #4]
   14320:	429a      	cmp	r2, r3
   14322:	f4ff ab6a 	bcc.w	139fa <mp_obj_str_format_helper+0x22>
                    }
            }
        }
    }

    return vstr;
   14326:	68fb      	ldr	r3, [r7, #12]
   14328:	461c      	mov	r4, r3
   1432a:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1432e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   14334:	68f8      	ldr	r0, [r7, #12]
   14336:	37a4      	adds	r7, #164	; 0xa4
   14338:	46bd      	mov	sp, r7
   1433a:	bd90      	pop	{r4, r7, pc}

0001433c <mp_obj_str_format>:

mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1433c:	b580      	push	{r7, lr}
   1433e:	b090      	sub	sp, #64	; 0x40
   14340:	af04      	add	r7, sp, #16
   14342:	60f8      	str	r0, [r7, #12]
   14344:	60b9      	str	r1, [r7, #8]
   14346:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14348:	68bb      	ldr	r3, [r7, #8]
   1434a:	681b      	ldr	r3, [r3, #0]
   1434c:	4618      	mov	r0, r3
   1434e:	f7fd ff41 	bl	121d4 <MP_OBJ_IS_QSTR>
   14352:	4603      	mov	r3, r0
   14354:	f083 0301 	eor.w	r3, r3, #1
   14358:	b2db      	uxtb	r3, r3
   1435a:	2b00      	cmp	r3, #0
   1435c:	d018      	beq.n	14390 <mp_obj_str_format+0x54>
   1435e:	68bb      	ldr	r3, [r7, #8]
   14360:	681b      	ldr	r3, [r3, #0]
   14362:	4618      	mov	r0, r3
   14364:	f7fd ff48 	bl	121f8 <MP_OBJ_IS_OBJ>
   14368:	4603      	mov	r3, r0
   1436a:	f083 0301 	eor.w	r3, r3, #1
   1436e:	b2db      	uxtb	r3, r3
   14370:	2b00      	cmp	r3, #0
   14372:	d106      	bne.n	14382 <mp_obj_str_format+0x46>
   14374:	68bb      	ldr	r3, [r7, #8]
   14376:	681b      	ldr	r3, [r3, #0]
   14378:	681b      	ldr	r3, [r3, #0]
   1437a:	699b      	ldr	r3, [r3, #24]
   1437c:	4a21      	ldr	r2, [pc, #132]	; (14404 <mp_obj_str_format+0xc8>)
   1437e:	4293      	cmp	r3, r2
   14380:	d006      	beq.n	14390 <mp_obj_str_format+0x54>
   14382:	4b21      	ldr	r3, [pc, #132]	; (14408 <mp_obj_str_format+0xcc>)
   14384:	4a21      	ldr	r2, [pc, #132]	; (1440c <mp_obj_str_format+0xd0>)
   14386:	f240 5161 	movw	r1, #1377	; 0x561
   1438a:	4821      	ldr	r0, [pc, #132]	; (14410 <mp_obj_str_format+0xd4>)
   1438c:	f007 f806 	bl	1b39c <__assert_func>

    GET_STR_DATA_LEN(args[0], str, len);
   14390:	68bb      	ldr	r3, [r7, #8]
   14392:	681b      	ldr	r3, [r3, #0]
   14394:	4618      	mov	r0, r3
   14396:	f7fd ff1d 	bl	121d4 <MP_OBJ_IS_QSTR>
   1439a:	4603      	mov	r3, r0
   1439c:	2b00      	cmp	r3, #0
   1439e:	d00a      	beq.n	143b6 <mp_obj_str_format+0x7a>
   143a0:	68bb      	ldr	r3, [r7, #8]
   143a2:	681b      	ldr	r3, [r3, #0]
   143a4:	089b      	lsrs	r3, r3, #2
   143a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   143aa:	4611      	mov	r1, r2
   143ac:	4618      	mov	r0, r3
   143ae:	f7ec ff3d 	bl	122c <qstr_data>
   143b2:	62f8      	str	r0, [r7, #44]	; 0x2c
   143b4:	e007      	b.n	143c6 <mp_obj_str_format+0x8a>
   143b6:	68bb      	ldr	r3, [r7, #8]
   143b8:	681b      	ldr	r3, [r3, #0]
   143ba:	689b      	ldr	r3, [r3, #8]
   143bc:	62bb      	str	r3, [r7, #40]	; 0x28
   143be:	68bb      	ldr	r3, [r7, #8]
   143c0:	681b      	ldr	r3, [r3, #0]
   143c2:	68db      	ldr	r3, [r3, #12]
   143c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int arg_i = 0;
   143c6:	2300      	movs	r3, #0
   143c8:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   143ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   143cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   143ce:	441a      	add	r2, r3
   143d0:	f107 0014 	add.w	r0, r7, #20
   143d4:	f107 0124 	add.w	r1, r7, #36	; 0x24
   143d8:	687b      	ldr	r3, [r7, #4]
   143da:	9302      	str	r3, [sp, #8]
   143dc:	68bb      	ldr	r3, [r7, #8]
   143de:	9301      	str	r3, [sp, #4]
   143e0:	68fb      	ldr	r3, [r7, #12]
   143e2:	9300      	str	r3, [sp, #0]
   143e4:	460b      	mov	r3, r1
   143e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   143e8:	f7ff faf6 	bl	139d8 <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   143ec:	f107 0314 	add.w	r3, r7, #20
   143f0:	4619      	mov	r1, r3
   143f2:	4808      	ldr	r0, [pc, #32]	; (14414 <mp_obj_str_format+0xd8>)
   143f4:	f000 ff6e 	bl	152d4 <mp_obj_new_str_from_vstr>
   143f8:	4603      	mov	r3, r0
}
   143fa:	4618      	mov	r0, r3
   143fc:	3730      	adds	r7, #48	; 0x30
   143fe:	46bd      	mov	sp, r7
   14400:	bd80      	pop	{r7, pc}
   14402:	bf00      	nop
   14404:	00012849 	.word	0x00012849
   14408:	000216f4 	.word	0x000216f4
   1440c:	00021c28 	.word	0x00021c28
   14410:	00021658 	.word	0x00021658
   14414:	00021b30 	.word	0x00021b30

00014418 <str_modulo_format>:
MP_DEFINE_CONST_FUN_OBJ_KW(str_format_obj, 1, mp_obj_str_format);

STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   14418:	b590      	push	{r4, r7, lr}
   1441a:	b0a9      	sub	sp, #164	; 0xa4
   1441c:	af04      	add	r7, sp, #16
   1441e:	60f8      	str	r0, [r7, #12]
   14420:	60b9      	str	r1, [r7, #8]
   14422:	607a      	str	r2, [r7, #4]
   14424:	603b      	str	r3, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   14426:	68f8      	ldr	r0, [r7, #12]
   14428:	f7fd fed4 	bl	121d4 <MP_OBJ_IS_QSTR>
   1442c:	4603      	mov	r3, r0
   1442e:	f083 0301 	eor.w	r3, r3, #1
   14432:	b2db      	uxtb	r3, r3
   14434:	2b00      	cmp	r3, #0
   14436:	d015      	beq.n	14464 <str_modulo_format+0x4c>
   14438:	68f8      	ldr	r0, [r7, #12]
   1443a:	f7fd fedd 	bl	121f8 <MP_OBJ_IS_OBJ>
   1443e:	4603      	mov	r3, r0
   14440:	f083 0301 	eor.w	r3, r3, #1
   14444:	b2db      	uxtb	r3, r3
   14446:	2b00      	cmp	r3, #0
   14448:	d105      	bne.n	14456 <str_modulo_format+0x3e>
   1444a:	68fb      	ldr	r3, [r7, #12]
   1444c:	681b      	ldr	r3, [r3, #0]
   1444e:	699b      	ldr	r3, [r3, #24]
   14450:	4ac4      	ldr	r2, [pc, #784]	; (14764 <str_modulo_format+0x34c>)
   14452:	4293      	cmp	r3, r2
   14454:	d006      	beq.n	14464 <str_modulo_format+0x4c>
   14456:	4bc4      	ldr	r3, [pc, #784]	; (14768 <str_modulo_format+0x350>)
   14458:	4ac4      	ldr	r2, [pc, #784]	; (1476c <str_modulo_format+0x354>)
   1445a:	f240 516b 	movw	r1, #1387	; 0x56b
   1445e:	48c4      	ldr	r0, [pc, #784]	; (14770 <str_modulo_format+0x358>)
   14460:	f006 ff9c 	bl	1b39c <__assert_func>

    GET_STR_DATA_LEN(pattern, str, len);
   14464:	68f8      	ldr	r0, [r7, #12]
   14466:	f7fd feb5 	bl	121d4 <MP_OBJ_IS_QSTR>
   1446a:	4603      	mov	r3, r0
   1446c:	2b00      	cmp	r3, #0
   1446e:	d00a      	beq.n	14486 <str_modulo_format+0x6e>
   14470:	68fb      	ldr	r3, [r7, #12]
   14472:	089b      	lsrs	r3, r3, #2
   14474:	f107 0254 	add.w	r2, r7, #84	; 0x54
   14478:	4611      	mov	r1, r2
   1447a:	4618      	mov	r0, r3
   1447c:	f7ec fed6 	bl	122c <qstr_data>
   14480:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   14484:	e006      	b.n	14494 <str_modulo_format+0x7c>
   14486:	68fb      	ldr	r3, [r7, #12]
   14488:	689b      	ldr	r3, [r3, #8]
   1448a:	657b      	str	r3, [r7, #84]	; 0x54
   1448c:	68fb      	ldr	r3, [r7, #12]
   1448e:	68db      	ldr	r3, [r3, #12]
   14490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const byte *start_str = str;
   14494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14498:	66fb      	str	r3, [r7, #108]	; 0x6c
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   1449a:	68f8      	ldr	r0, [r7, #12]
   1449c:	f7fd feac 	bl	121f8 <MP_OBJ_IS_OBJ>
   144a0:	4603      	mov	r3, r0
   144a2:	2b00      	cmp	r3, #0
   144a4:	d006      	beq.n	144b4 <str_modulo_format+0x9c>
   144a6:	68fb      	ldr	r3, [r7, #12]
   144a8:	681b      	ldr	r3, [r3, #0]
   144aa:	4ab2      	ldr	r2, [pc, #712]	; (14774 <str_modulo_format+0x35c>)
   144ac:	4293      	cmp	r3, r2
   144ae:	d101      	bne.n	144b4 <str_modulo_format+0x9c>
   144b0:	2301      	movs	r3, #1
   144b2:	e000      	b.n	144b6 <str_modulo_format+0x9e>
   144b4:	2300      	movs	r3, #0
   144b6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   144ba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   144be:	f003 0301 	and.w	r3, r3, #1
   144c2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    size_t arg_i = 0;
   144c6:	2300      	movs	r3, #0
   144c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   144cc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   144d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
   144d4:	2110      	movs	r1, #16
   144d6:	4618      	mov	r0, r3
   144d8:	f7ec ff6e 	bl	13b8 <vstr_init_print>

    for (const byte *top = str + len; str < top; str++) {
   144dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   144de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   144e2:	4413      	add	r3, r2
   144e4:	667b      	str	r3, [r7, #100]	; 0x64
   144e6:	e296      	b.n	14a16 <str_modulo_format+0x5fe>
        mp_obj_t arg = MP_OBJ_NULL;
   144e8:	2300      	movs	r3, #0
   144ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (*str != '%') {
   144ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   144f2:	781b      	ldrb	r3, [r3, #0]
   144f4:	2b25      	cmp	r3, #37	; 0x25
   144f6:	d009      	beq.n	1450c <str_modulo_format+0xf4>
            vstr_add_byte(&vstr, *str);
   144f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   144fc:	781a      	ldrb	r2, [r3, #0]
   144fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14502:	4611      	mov	r1, r2
   14504:	4618      	mov	r0, r3
   14506:	f7ed f85f 	bl	15c8 <vstr_add_byte>
            continue;
   1450a:	e27f      	b.n	14a0c <str_modulo_format+0x5f4>
        }
        if (++str >= top) {
   1450c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14510:	3301      	adds	r3, #1
   14512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14516:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1451a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1451c:	429a      	cmp	r2, r3
   1451e:	f080 810d 	bcs.w	1473c <str_modulo_format+0x324>
            goto incomplete_format;
        }
        if (*str == '%') {
   14522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14526:	781b      	ldrb	r3, [r3, #0]
   14528:	2b25      	cmp	r3, #37	; 0x25
   1452a:	d106      	bne.n	1453a <str_modulo_format+0x122>
            vstr_add_byte(&vstr, '%');
   1452c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14530:	2125      	movs	r1, #37	; 0x25
   14532:	4618      	mov	r0, r3
   14534:	f7ed f848 	bl	15c8 <vstr_add_byte>
            continue;
   14538:	e268      	b.n	14a0c <str_modulo_format+0x5f4>
        }

        // Dictionary value lookup
        if (*str == '(') {
   1453a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1453e:	781b      	ldrb	r3, [r3, #0]
   14540:	2b28      	cmp	r3, #40	; 0x28
   14542:	d136      	bne.n	145b2 <str_modulo_format+0x19a>
            if (dict == MP_OBJ_NULL) {
   14544:	683b      	ldr	r3, [r7, #0]
   14546:	2b00      	cmp	r3, #0
   14548:	d102      	bne.n	14550 <str_modulo_format+0x138>
                mp_raise_TypeError("format requires a dict");
   1454a:	488b      	ldr	r0, [pc, #556]	; (14778 <str_modulo_format+0x360>)
   1454c:	f7f8 fd24 	bl	cf98 <mp_raise_TypeError>
            }
            arg_i = 1; // we used up the single dict argument
   14550:	2301      	movs	r3, #1
   14552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            const byte *key = ++str;
   14556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1455a:	3301      	adds	r3, #1
   1455c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14560:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14564:	663b      	str	r3, [r7, #96]	; 0x60
            while (*str != ')') {
   14566:	e00b      	b.n	14580 <str_modulo_format+0x168>
                if (str >= top) {
   14568:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1456c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1456e:	429a      	cmp	r2, r3
   14570:	d301      	bcc.n	14576 <str_modulo_format+0x15e>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14572:	f7ff fa29 	bl	139c8 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError("incomplete format key");
                    }
                }
                ++str;
   14576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1457a:	3301      	adds	r3, #1
   1457c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            while (*str != ')') {
   14580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14584:	781b      	ldrb	r3, [r3, #0]
   14586:	2b29      	cmp	r3, #41	; 0x29
   14588:	d1ee      	bne.n	14568 <str_modulo_format+0x150>
            }
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   1458a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1458e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   14590:	1ad3      	subs	r3, r2, r3
   14592:	4619      	mov	r1, r3
   14594:	6e38      	ldr	r0, [r7, #96]	; 0x60
   14596:	f000 fe8b 	bl	152b0 <mp_obj_new_str_via_qstr>
   1459a:	65f8      	str	r0, [r7, #92]	; 0x5c
            arg = mp_obj_dict_get(dict, k_obj);
   1459c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1459e:	6838      	ldr	r0, [r7, #0]
   145a0:	f7fa f8b2 	bl	e708 <mp_obj_dict_get>
   145a4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            str++;
   145a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145ac:	3301      	adds	r3, #1
   145ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        int flags = 0;
   145b2:	2300      	movs	r3, #0
   145b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        char fill = ' ';
   145b8:	2320      	movs	r3, #32
   145ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        int alt = 0;
   145be:	2300      	movs	r3, #0
   145c0:	67bb      	str	r3, [r7, #120]	; 0x78
        while (str < top) {
   145c2:	e03e      	b.n	14642 <str_modulo_format+0x22a>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   145c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145c8:	781b      	ldrb	r3, [r3, #0]
   145ca:	2b2d      	cmp	r3, #45	; 0x2d
   145cc:	d106      	bne.n	145dc <str_modulo_format+0x1c4>
   145ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   145d2:	f043 0301 	orr.w	r3, r3, #1
   145d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   145da:	e02d      	b.n	14638 <str_modulo_format+0x220>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   145dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145e0:	781b      	ldrb	r3, [r3, #0]
   145e2:	2b2b      	cmp	r3, #43	; 0x2b
   145e4:	d106      	bne.n	145f4 <str_modulo_format+0x1dc>
   145e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   145ea:	f043 0302 	orr.w	r3, r3, #2
   145ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   145f2:	e021      	b.n	14638 <str_modulo_format+0x220>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   145f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145f8:	781b      	ldrb	r3, [r3, #0]
   145fa:	2b20      	cmp	r3, #32
   145fc:	d106      	bne.n	1460c <str_modulo_format+0x1f4>
   145fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14602:	f043 0304 	orr.w	r3, r3, #4
   14606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1460a:	e015      	b.n	14638 <str_modulo_format+0x220>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   1460c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14610:	781b      	ldrb	r3, [r3, #0]
   14612:	2b23      	cmp	r3, #35	; 0x23
   14614:	d102      	bne.n	1461c <str_modulo_format+0x204>
   14616:	2310      	movs	r3, #16
   14618:	67bb      	str	r3, [r7, #120]	; 0x78
   1461a:	e00d      	b.n	14638 <str_modulo_format+0x220>
            else if (*str == '0') {
   1461c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14620:	781b      	ldrb	r3, [r3, #0]
   14622:	2b30      	cmp	r3, #48	; 0x30
   14624:	d113      	bne.n	1464e <str_modulo_format+0x236>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   14626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1462a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1462e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                fill = '0';
   14632:	2330      	movs	r3, #48	; 0x30
   14634:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            } else break;
            str++;
   14638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1463c:	3301      	adds	r3, #1
   1463e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (str < top) {
   14642:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14648:	429a      	cmp	r2, r3
   1464a:	d3bb      	bcc.n	145c4 <str_modulo_format+0x1ac>
   1464c:	e000      	b.n	14650 <str_modulo_format+0x238>
            } else break;
   1464e:	bf00      	nop
        }
        // parse width, if it exists
        int width = 0;
   14650:	2300      	movs	r3, #0
   14652:	63bb      	str	r3, [r7, #56]	; 0x38
        if (str < top) {
   14654:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1465a:	429a      	cmp	r2, r3
   1465c:	d227      	bcs.n	146ae <str_modulo_format+0x296>
            if (*str == '*') {
   1465e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14662:	781b      	ldrb	r3, [r3, #0]
   14664:	2b2a      	cmp	r3, #42	; 0x2a
   14666:	d118      	bne.n	1469a <str_modulo_format+0x282>
                if (arg_i >= n_args) {
   14668:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1466c:	68bb      	ldr	r3, [r7, #8]
   1466e:	429a      	cmp	r2, r3
   14670:	d271      	bcs.n	14756 <str_modulo_format+0x33e>
                    goto not_enough_args;
                }
                width = mp_obj_get_int(args[arg_i++]);
   14672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14676:	1c5a      	adds	r2, r3, #1
   14678:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1467c:	009b      	lsls	r3, r3, #2
   1467e:	687a      	ldr	r2, [r7, #4]
   14680:	4413      	add	r3, r2
   14682:	681b      	ldr	r3, [r3, #0]
   14684:	4618      	mov	r0, r3
   14686:	f7f9 fa7f 	bl	db88 <mp_obj_get_int>
   1468a:	4603      	mov	r3, r0
   1468c:	63bb      	str	r3, [r7, #56]	; 0x38
                str++;
   1468e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14692:	3301      	adds	r3, #1
   14694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14698:	e009      	b.n	146ae <str_modulo_format+0x296>
            } else {
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   1469a:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1469e:	461a      	mov	r2, r3
   146a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
   146a2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   146a6:	f7ff f8d9 	bl	1385c <str_to_int>
   146aa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            }
        }
        int prec = -1;
   146ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146b2:	637b      	str	r3, [r7, #52]	; 0x34
        if (str < top && *str == '.') {
   146b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   146b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   146ba:	429a      	cmp	r2, r3
   146bc:	d238      	bcs.n	14730 <str_modulo_format+0x318>
   146be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146c2:	781b      	ldrb	r3, [r3, #0]
   146c4:	2b2e      	cmp	r3, #46	; 0x2e
   146c6:	d133      	bne.n	14730 <str_modulo_format+0x318>
            if (++str < top) {
   146c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146cc:	3301      	adds	r3, #1
   146ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   146d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   146d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   146d8:	429a      	cmp	r2, r3
   146da:	d229      	bcs.n	14730 <str_modulo_format+0x318>
                if (*str == '*') {
   146dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146e0:	781b      	ldrb	r3, [r3, #0]
   146e2:	2b2a      	cmp	r3, #42	; 0x2a
   146e4:	d118      	bne.n	14718 <str_modulo_format+0x300>
                    if (arg_i >= n_args) {
   146e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   146ea:	68bb      	ldr	r3, [r7, #8]
   146ec:	429a      	cmp	r2, r3
   146ee:	d234      	bcs.n	1475a <str_modulo_format+0x342>
                        goto not_enough_args;
                    }
                    prec = mp_obj_get_int(args[arg_i++]);
   146f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   146f4:	1c5a      	adds	r2, r3, #1
   146f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   146fa:	009b      	lsls	r3, r3, #2
   146fc:	687a      	ldr	r2, [r7, #4]
   146fe:	4413      	add	r3, r2
   14700:	681b      	ldr	r3, [r3, #0]
   14702:	4618      	mov	r0, r3
   14704:	f7f9 fa40 	bl	db88 <mp_obj_get_int>
   14708:	4603      	mov	r3, r0
   1470a:	637b      	str	r3, [r7, #52]	; 0x34
                    str++;
   1470c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14710:	3301      	adds	r3, #1
   14712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14716:	e00b      	b.n	14730 <str_modulo_format+0x318>
                } else {
                    prec = 0;
   14718:	2300      	movs	r3, #0
   1471a:	637b      	str	r3, [r7, #52]	; 0x34
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   1471c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   14720:	461a      	mov	r2, r3
   14722:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14724:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   14728:	f7ff f898 	bl	1385c <str_to_int>
   1472c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                }
            }
        }

        if (str >= top) {
   14730:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14736:	429a      	cmp	r2, r3
   14738:	d303      	bcc.n	14742 <str_modulo_format+0x32a>
   1473a:	e000      	b.n	1473e <str_modulo_format+0x326>
            goto incomplete_format;
   1473c:	bf00      	nop
incomplete_format:
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   1473e:	f7ff f943 	bl	139c8 <terse_str_format_value_error>
                mp_raise_ValueError("incomplete format");
            }
        }

        // Tuple value lookup
        if (arg == MP_OBJ_NULL) {
   14742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14746:	2b00      	cmp	r3, #0
   14748:	d125      	bne.n	14796 <str_modulo_format+0x37e>
            if (arg_i >= n_args) {
   1474a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1474e:	68bb      	ldr	r3, [r7, #8]
   14750:	429a      	cmp	r2, r3
   14752:	d315      	bcc.n	14780 <str_modulo_format+0x368>
   14754:	e002      	b.n	1475c <str_modulo_format+0x344>
                    goto not_enough_args;
   14756:	bf00      	nop
   14758:	e000      	b.n	1475c <str_modulo_format+0x344>
                        goto not_enough_args;
   1475a:	bf00      	nop
not_enough_args:
                mp_raise_TypeError("not enough arguments for format string");
   1475c:	4807      	ldr	r0, [pc, #28]	; (1477c <str_modulo_format+0x364>)
   1475e:	f7f8 fc1b 	bl	cf98 <mp_raise_TypeError>
   14762:	bf00      	nop
   14764:	00012849 	.word	0x00012849
   14768:	000218e0 	.word	0x000218e0
   1476c:	00021c3c 	.word	0x00021c3c
   14770:	00021658 	.word	0x00021658
   14774:	00021b6c 	.word	0x00021b6c
   14778:	00021968 	.word	0x00021968
   1477c:	00021980 	.word	0x00021980
            }
            arg = args[arg_i++];
   14780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14784:	1c5a      	adds	r2, r3, #1
   14786:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1478a:	009b      	lsls	r3, r3, #2
   1478c:	687a      	ldr	r2, [r7, #4]
   1478e:	4413      	add	r3, r2
   14790:	681b      	ldr	r3, [r3, #0]
   14792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }
        switch (*str) {
   14796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1479a:	781b      	ldrb	r3, [r3, #0]
   1479c:	3b58      	subs	r3, #88	; 0x58
   1479e:	2b20      	cmp	r3, #32
   147a0:	f200 8132 	bhi.w	14a08 <str_modulo_format+0x5f0>
   147a4:	a201      	add	r2, pc, #4	; (adr r2, 147ac <str_modulo_format+0x394>)
   147a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   147aa:	bf00      	nop
   147ac:	000149d5 	.word	0x000149d5
   147b0:	00014a09 	.word	0x00014a09
   147b4:	00014a09 	.word	0x00014a09
   147b8:	00014a09 	.word	0x00014a09
   147bc:	00014a09 	.word	0x00014a09
   147c0:	00014a09 	.word	0x00014a09
   147c4:	00014a09 	.word	0x00014a09
   147c8:	00014a09 	.word	0x00014a09
   147cc:	00014a09 	.word	0x00014a09
   147d0:	00014a09 	.word	0x00014a09
   147d4:	00014a09 	.word	0x00014a09
   147d8:	00014831 	.word	0x00014831
   147dc:	000148d1 	.word	0x000148d1
   147e0:	00014a09 	.word	0x00014a09
   147e4:	00014a09 	.word	0x00014a09
   147e8:	00014a09 	.word	0x00014a09
   147ec:	00014a09 	.word	0x00014a09
   147f0:	000148d1 	.word	0x000148d1
   147f4:	00014a09 	.word	0x00014a09
   147f8:	00014a09 	.word	0x00014a09
   147fc:	00014a09 	.word	0x00014a09
   14800:	00014a09 	.word	0x00014a09
   14804:	00014a09 	.word	0x00014a09
   14808:	000148fd 	.word	0x000148fd
   1480c:	00014a09 	.word	0x00014a09
   14810:	00014a09 	.word	0x00014a09
   14814:	00014935 	.word	0x00014935
   14818:	00014935 	.word	0x00014935
   1481c:	00014a09 	.word	0x00014a09
   14820:	000148d1 	.word	0x000148d1
   14824:	00014a09 	.word	0x00014a09
   14828:	00014a09 	.word	0x00014a09
   1482c:	000149d5 	.word	0x000149d5
            case 'c':
                if (MP_OBJ_IS_STR(arg)) {
   14830:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14834:	f7fd fcce 	bl	121d4 <MP_OBJ_IS_QSTR>
   14838:	4603      	mov	r3, r0
   1483a:	2b00      	cmp	r3, #0
   1483c:	d10c      	bne.n	14858 <str_modulo_format+0x440>
   1483e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14842:	f7fd fcd9 	bl	121f8 <MP_OBJ_IS_OBJ>
   14846:	4603      	mov	r3, r0
   14848:	2b00      	cmp	r3, #0
   1484a:	d021      	beq.n	14890 <str_modulo_format+0x478>
   1484c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14850:	681b      	ldr	r3, [r3, #0]
   14852:	4a81      	ldr	r2, [pc, #516]	; (14a58 <str_modulo_format+0x640>)
   14854:	4293      	cmp	r3, r2
   14856:	d11b      	bne.n	14890 <str_modulo_format+0x478>
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   14858:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1485c:	4619      	mov	r1, r3
   1485e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14862:	f000 fefb 	bl	1565c <mp_obj_str_get_data>
   14866:	65b8      	str	r0, [r7, #88]	; 0x58
                    if (slen != 1) {
   14868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1486a:	2b01      	cmp	r3, #1
   1486c:	d002      	beq.n	14874 <str_modulo_format+0x45c>
                        mp_raise_TypeError("%%c requires int or char");
   1486e:	487b      	ldr	r0, [pc, #492]	; (14a5c <str_modulo_format+0x644>)
   14870:	f7f8 fb92 	bl	cf98 <mp_raise_TypeError>
                    }
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   14874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14876:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   1487a:	9301      	str	r3, [sp, #4]
   1487c:	2320      	movs	r3, #32
   1487e:	9300      	str	r3, [sp, #0]
   14880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14884:	2201      	movs	r2, #1
   14886:	6db9      	ldr	r1, [r7, #88]	; 0x58
   14888:	f7ed f81e 	bl	18c8 <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   1488c:	bf00      	nop
                    char ch = mp_obj_get_int(arg);
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
                } else {
                    mp_raise_TypeError("integer required");
                }
                break;
   1488e:	e0bd      	b.n	14a0c <str_modulo_format+0x5f4>
                } else if (arg_looks_integer(arg)) {
   14890:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14894:	f7ff f852 	bl	1393c <arg_looks_integer>
   14898:	4603      	mov	r3, r0
   1489a:	2b00      	cmp	r3, #0
   1489c:	d015      	beq.n	148ca <str_modulo_format+0x4b2>
                    char ch = mp_obj_get_int(arg);
   1489e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   148a2:	f7f9 f971 	bl	db88 <mp_obj_get_int>
   148a6:	4603      	mov	r3, r0
   148a8:	b2db      	uxtb	r3, r3
   148aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   148ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   148b0:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   148b4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   148b8:	9301      	str	r3, [sp, #4]
   148ba:	2320      	movs	r3, #32
   148bc:	9300      	str	r3, [sp, #0]
   148be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   148c2:	2201      	movs	r2, #1
   148c4:	f7ed f800 	bl	18c8 <mp_print_strn>
                break;
   148c8:	e0a0      	b.n	14a0c <str_modulo_format+0x5f4>
                    mp_raise_TypeError("integer required");
   148ca:	4865      	ldr	r0, [pc, #404]	; (14a60 <str_modulo_format+0x648>)
   148cc:	f7f8 fb64 	bl	cf98 <mp_raise_TypeError>

            case 'd':
            case 'i':
            case 'u':
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   148d0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   148d4:	f7ff f86c 	bl	139b0 <arg_as_int>
   148d8:	4601      	mov	r1, r0
   148da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   148dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   148de:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   148e2:	9203      	str	r2, [sp, #12]
   148e4:	9302      	str	r3, [sp, #8]
   148e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   148ea:	9301      	str	r3, [sp, #4]
   148ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   148f0:	9300      	str	r3, [sp, #0]
   148f2:	2361      	movs	r3, #97	; 0x61
   148f4:	220a      	movs	r2, #10
   148f6:	f7ed f927 	bl	1b48 <mp_print_mp_int>
                break;
   148fa:	e087      	b.n	14a0c <str_modulo_format+0x5f4>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
                break;
#endif

            case 'o':
                if (alt) {
   148fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   148fe:	2b00      	cmp	r3, #0
   14900:	d005      	beq.n	1490e <str_modulo_format+0x4f6>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   14902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14906:	f443 7304 	orr.w	r3, r3, #528	; 0x210
   1490a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   1490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14912:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14916:	9203      	str	r2, [sp, #12]
   14918:	9302      	str	r3, [sp, #8]
   1491a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1491e:	9301      	str	r3, [sp, #4]
   14920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14924:	9300      	str	r3, [sp, #0]
   14926:	2361      	movs	r3, #97	; 0x61
   14928:	2208      	movs	r2, #8
   1492a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   1492e:	f7ed f90b 	bl	1b48 <mp_print_mp_int>
                break;
   14932:	e06b      	b.n	14a0c <str_modulo_format+0x5f4>
            case 'r':
            case 's':
            {
                vstr_t arg_vstr;
                mp_print_t arg_print;
                vstr_init_print(&arg_vstr, 16, &arg_print);
   14934:	f107 0214 	add.w	r2, r7, #20
   14938:	f107 031c 	add.w	r3, r7, #28
   1493c:	2110      	movs	r1, #16
   1493e:	4618      	mov	r0, r3
   14940:	f7ec fd3a 	bl	13b8 <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   14944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	2b72      	cmp	r3, #114	; 0x72
   1494c:	bf0c      	ite	eq
   1494e:	2301      	moveq	r3, #1
   14950:	2300      	movne	r3, #0
   14952:	b2db      	uxtb	r3, r3
   14954:	677b      	str	r3, [r7, #116]	; 0x74
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   14956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14958:	2b00      	cmp	r3, #0
   1495a:	d112      	bne.n	14982 <str_modulo_format+0x56a>
   1495c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14960:	2b00      	cmp	r3, #0
   14962:	d00e      	beq.n	14982 <str_modulo_format+0x56a>
   14964:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14968:	f7fd fc46 	bl	121f8 <MP_OBJ_IS_OBJ>
   1496c:	4603      	mov	r3, r0
   1496e:	2b00      	cmp	r3, #0
   14970:	d007      	beq.n	14982 <str_modulo_format+0x56a>
   14972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14976:	681b      	ldr	r3, [r3, #0]
   14978:	4a3a      	ldr	r2, [pc, #232]	; (14a64 <str_modulo_format+0x64c>)
   1497a:	4293      	cmp	r3, r2
   1497c:	d101      	bne.n	14982 <str_modulo_format+0x56a>
                    // If we have something like b"%s" % b"1", bytes arg should be
                    // printed undecorated.
                    print_kind = PRINT_RAW;
   1497e:	2304      	movs	r3, #4
   14980:	677b      	str	r3, [r7, #116]	; 0x74
                }
                mp_obj_print_helper(&arg_print, arg, print_kind);
   14982:	f107 0314 	add.w	r3, r7, #20
   14986:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   14988:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   1498c:	4618      	mov	r0, r3
   1498e:	f7f8 ff4f 	bl	d830 <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   14992:	6a3b      	ldr	r3, [r7, #32]
   14994:	673b      	str	r3, [r7, #112]	; 0x70
                if (prec < 0) {
   14996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14998:	2b00      	cmp	r3, #0
   1499a:	da01      	bge.n	149a0 <str_modulo_format+0x588>
                    prec = vlen;
   1499c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1499e:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (vlen > (uint)prec) {
   149a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   149a2:	461a      	mov	r2, r3
   149a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   149a6:	4293      	cmp	r3, r2
   149a8:	d901      	bls.n	149ae <str_modulo_format+0x596>
                    vlen = prec;
   149aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   149ac:	673b      	str	r3, [r7, #112]	; 0x70
                }
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   149ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
   149b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   149b2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   149b6:	9301      	str	r3, [sp, #4]
   149b8:	2320      	movs	r3, #32
   149ba:	9300      	str	r3, [sp, #0]
   149bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   149c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   149c2:	f7ec ff81 	bl	18c8 <mp_print_strn>
                vstr_clear(&arg_vstr);
   149c6:	f107 031c 	add.w	r3, r7, #28
   149ca:	4618      	mov	r0, r3
   149cc:	f7ec fd0a 	bl	13e4 <vstr_clear>
                break;
   149d0:	bf00      	nop
   149d2:	e01b      	b.n	14a0c <str_modulo_format+0x5f4>
            }

            case 'X':
            case 'x':
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   149d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   149d8:	781b      	ldrb	r3, [r3, #0]
   149da:	f1a3 0417 	sub.w	r4, r3, #23
   149de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   149e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   149e4:	4313      	orrs	r3, r2
   149e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   149e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
   149ea:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   149ee:	9103      	str	r1, [sp, #12]
   149f0:	9202      	str	r2, [sp, #8]
   149f2:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
   149f6:	9201      	str	r2, [sp, #4]
   149f8:	9300      	str	r3, [sp, #0]
   149fa:	4623      	mov	r3, r4
   149fc:	2210      	movs	r2, #16
   149fe:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14a02:	f7ed f8a1 	bl	1b48 <mp_print_mp_int>
                break;
   14a06:	e001      	b.n	14a0c <str_modulo_format+0x5f4>

            default:
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14a08:	f7fe ffde 	bl	139c8 <terse_str_format_value_error>
    for (const byte *top = str + len; str < top; str++) {
   14a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a10:	3301      	adds	r3, #1
   14a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14a16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14a1c:	429a      	cmp	r2, r3
   14a1e:	f4ff ad63 	bcc.w	144e8 <str_modulo_format+0xd0>
                        *str, *str, str - start_str));
                }
        }
    }

    if (arg_i != n_args) {
   14a22:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14a26:	68bb      	ldr	r3, [r7, #8]
   14a28:	429a      	cmp	r2, r3
   14a2a:	d002      	beq.n	14a32 <str_modulo_format+0x61a>
        mp_raise_TypeError("not all arguments converted during string formatting");
   14a2c:	480e      	ldr	r0, [pc, #56]	; (14a68 <str_modulo_format+0x650>)
   14a2e:	f7f8 fab3 	bl	cf98 <mp_raise_TypeError>
    }

    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   14a32:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14a36:	2b00      	cmp	r3, #0
   14a38:	d001      	beq.n	14a3e <str_modulo_format+0x626>
   14a3a:	4b0a      	ldr	r3, [pc, #40]	; (14a64 <str_modulo_format+0x64c>)
   14a3c:	e000      	b.n	14a40 <str_modulo_format+0x628>
   14a3e:	4b06      	ldr	r3, [pc, #24]	; (14a58 <str_modulo_format+0x640>)
   14a40:	f107 0244 	add.w	r2, r7, #68	; 0x44
   14a44:	4611      	mov	r1, r2
   14a46:	4618      	mov	r0, r3
   14a48:	f000 fc44 	bl	152d4 <mp_obj_new_str_from_vstr>
   14a4c:	4603      	mov	r3, r0
}
   14a4e:	4618      	mov	r0, r3
   14a50:	3794      	adds	r7, #148	; 0x94
   14a52:	46bd      	mov	sp, r7
   14a54:	bd90      	pop	{r4, r7, pc}
   14a56:	bf00      	nop
   14a58:	00021b30 	.word	0x00021b30
   14a5c:	000219a8 	.word	0x000219a8
   14a60:	000219c4 	.word	0x000219c4
   14a64:	00021b6c 	.word	0x00021b6c
   14a68:	000219d8 	.word	0x000219d8

00014a6c <str_replace>:

// The implementation is optimized, returning the original string if there's
// nothing to replace.
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
   14a6c:	b580      	push	{r7, lr}
   14a6e:	b096      	sub	sp, #88	; 0x58
   14a70:	af02      	add	r7, sp, #8
   14a72:	6078      	str	r0, [r7, #4]
   14a74:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14a76:	683b      	ldr	r3, [r7, #0]
   14a78:	681b      	ldr	r3, [r3, #0]
   14a7a:	4618      	mov	r0, r3
   14a7c:	f7fd fbaa 	bl	121d4 <MP_OBJ_IS_QSTR>
   14a80:	4603      	mov	r3, r0
   14a82:	f083 0301 	eor.w	r3, r3, #1
   14a86:	b2db      	uxtb	r3, r3
   14a88:	2b00      	cmp	r3, #0
   14a8a:	d018      	beq.n	14abe <str_replace+0x52>
   14a8c:	683b      	ldr	r3, [r7, #0]
   14a8e:	681b      	ldr	r3, [r3, #0]
   14a90:	4618      	mov	r0, r3
   14a92:	f7fd fbb1 	bl	121f8 <MP_OBJ_IS_OBJ>
   14a96:	4603      	mov	r3, r0
   14a98:	f083 0301 	eor.w	r3, r3, #1
   14a9c:	b2db      	uxtb	r3, r3
   14a9e:	2b00      	cmp	r3, #0
   14aa0:	d106      	bne.n	14ab0 <str_replace+0x44>
   14aa2:	683b      	ldr	r3, [r7, #0]
   14aa4:	681b      	ldr	r3, [r3, #0]
   14aa6:	681b      	ldr	r3, [r3, #0]
   14aa8:	699b      	ldr	r3, [r3, #24]
   14aaa:	4aa4      	ldr	r2, [pc, #656]	; (14d3c <str_replace+0x2d0>)
   14aac:	4293      	cmp	r3, r2
   14aae:	d006      	beq.n	14abe <str_replace+0x52>
   14ab0:	4ba3      	ldr	r3, [pc, #652]	; (14d40 <str_replace+0x2d4>)
   14ab2:	4aa4      	ldr	r2, [pc, #656]	; (14d44 <str_replace+0x2d8>)
   14ab4:	f240 6131 	movw	r1, #1585	; 0x631
   14ab8:	48a3      	ldr	r0, [pc, #652]	; (14d48 <str_replace+0x2dc>)
   14aba:	f006 fc6f 	bl	1b39c <__assert_func>

    mp_int_t max_rep = -1;
   14abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (n_args == 4) {
   14ac4:	687b      	ldr	r3, [r7, #4]
   14ac6:	2b04      	cmp	r3, #4
   14ac8:	d112      	bne.n	14af0 <str_replace+0x84>
        max_rep = mp_obj_get_int(args[3]);
   14aca:	683b      	ldr	r3, [r7, #0]
   14acc:	330c      	adds	r3, #12
   14ace:	681b      	ldr	r3, [r3, #0]
   14ad0:	4618      	mov	r0, r3
   14ad2:	f7f9 f859 	bl	db88 <mp_obj_get_int>
   14ad6:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (max_rep == 0) {
   14ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14ada:	2b00      	cmp	r3, #0
   14adc:	d102      	bne.n	14ae4 <str_replace+0x78>
            return args[0];
   14ade:	683b      	ldr	r3, [r7, #0]
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	e127      	b.n	14d34 <str_replace+0x2c8>
        } else if (max_rep < 0) {
   14ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14ae6:	2b00      	cmp	r3, #0
   14ae8:	da02      	bge.n	14af0 <str_replace+0x84>
            max_rep = -1;
   14aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14aee:	64fb      	str	r3, [r7, #76]	; 0x4c

    // if max_rep is still -1 by this point we will need to do all possible replacements

    // check argument types

    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14af0:	683b      	ldr	r3, [r7, #0]
   14af2:	681b      	ldr	r3, [r3, #0]
   14af4:	4618      	mov	r0, r3
   14af6:	f7f8 fe69 	bl	d7cc <mp_obj_get_type>
   14afa:	6278      	str	r0, [r7, #36]	; 0x24

    if (mp_obj_get_type(args[1]) != self_type) {
   14afc:	683b      	ldr	r3, [r7, #0]
   14afe:	3304      	adds	r3, #4
   14b00:	681b      	ldr	r3, [r3, #0]
   14b02:	4618      	mov	r0, r3
   14b04:	f7f8 fe62 	bl	d7cc <mp_obj_get_type>
   14b08:	4602      	mov	r2, r0
   14b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b0c:	429a      	cmp	r2, r3
   14b0e:	d005      	beq.n	14b1c <str_replace+0xb0>
        bad_implicit_conversion(args[1]);
   14b10:	683b      	ldr	r3, [r7, #0]
   14b12:	3304      	adds	r3, #4
   14b14:	681b      	ldr	r3, [r3, #0]
   14b16:	4618      	mov	r0, r3
   14b18:	f000 fd30 	bl	1557c <bad_implicit_conversion>
    }

    if (mp_obj_get_type(args[2]) != self_type) {
   14b1c:	683b      	ldr	r3, [r7, #0]
   14b1e:	3308      	adds	r3, #8
   14b20:	681b      	ldr	r3, [r3, #0]
   14b22:	4618      	mov	r0, r3
   14b24:	f7f8 fe52 	bl	d7cc <mp_obj_get_type>
   14b28:	4602      	mov	r2, r0
   14b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b2c:	429a      	cmp	r2, r3
   14b2e:	d005      	beq.n	14b3c <str_replace+0xd0>
        bad_implicit_conversion(args[2]);
   14b30:	683b      	ldr	r3, [r7, #0]
   14b32:	3308      	adds	r3, #8
   14b34:	681b      	ldr	r3, [r3, #0]
   14b36:	4618      	mov	r0, r3
   14b38:	f000 fd20 	bl	1557c <bad_implicit_conversion>
    }

    // extract string data

    GET_STR_DATA_LEN(args[0], str, str_len);
   14b3c:	683b      	ldr	r3, [r7, #0]
   14b3e:	681b      	ldr	r3, [r3, #0]
   14b40:	4618      	mov	r0, r3
   14b42:	f7fd fb47 	bl	121d4 <MP_OBJ_IS_QSTR>
   14b46:	4603      	mov	r3, r0
   14b48:	2b00      	cmp	r3, #0
   14b4a:	d00a      	beq.n	14b62 <str_replace+0xf6>
   14b4c:	683b      	ldr	r3, [r7, #0]
   14b4e:	681b      	ldr	r3, [r3, #0]
   14b50:	089b      	lsrs	r3, r3, #2
   14b52:	f107 0220 	add.w	r2, r7, #32
   14b56:	4611      	mov	r1, r2
   14b58:	4618      	mov	r0, r3
   14b5a:	f7ec fb67 	bl	122c <qstr_data>
   14b5e:	64b8      	str	r0, [r7, #72]	; 0x48
   14b60:	e007      	b.n	14b72 <str_replace+0x106>
   14b62:	683b      	ldr	r3, [r7, #0]
   14b64:	681b      	ldr	r3, [r3, #0]
   14b66:	689b      	ldr	r3, [r3, #8]
   14b68:	623b      	str	r3, [r7, #32]
   14b6a:	683b      	ldr	r3, [r7, #0]
   14b6c:	681b      	ldr	r3, [r3, #0]
   14b6e:	68db      	ldr	r3, [r3, #12]
   14b70:	64bb      	str	r3, [r7, #72]	; 0x48
    GET_STR_DATA_LEN(args[1], old, old_len);
   14b72:	683b      	ldr	r3, [r7, #0]
   14b74:	3304      	adds	r3, #4
   14b76:	681b      	ldr	r3, [r3, #0]
   14b78:	4618      	mov	r0, r3
   14b7a:	f7fd fb2b 	bl	121d4 <MP_OBJ_IS_QSTR>
   14b7e:	4603      	mov	r3, r0
   14b80:	2b00      	cmp	r3, #0
   14b82:	d00b      	beq.n	14b9c <str_replace+0x130>
   14b84:	683b      	ldr	r3, [r7, #0]
   14b86:	3304      	adds	r3, #4
   14b88:	681b      	ldr	r3, [r3, #0]
   14b8a:	089b      	lsrs	r3, r3, #2
   14b8c:	f107 021c 	add.w	r2, r7, #28
   14b90:	4611      	mov	r1, r2
   14b92:	4618      	mov	r0, r3
   14b94:	f7ec fb4a 	bl	122c <qstr_data>
   14b98:	6478      	str	r0, [r7, #68]	; 0x44
   14b9a:	e009      	b.n	14bb0 <str_replace+0x144>
   14b9c:	683b      	ldr	r3, [r7, #0]
   14b9e:	3304      	adds	r3, #4
   14ba0:	681b      	ldr	r3, [r3, #0]
   14ba2:	689b      	ldr	r3, [r3, #8]
   14ba4:	61fb      	str	r3, [r7, #28]
   14ba6:	683b      	ldr	r3, [r7, #0]
   14ba8:	3304      	adds	r3, #4
   14baa:	681b      	ldr	r3, [r3, #0]
   14bac:	68db      	ldr	r3, [r3, #12]
   14bae:	647b      	str	r3, [r7, #68]	; 0x44
    GET_STR_DATA_LEN(args[2], new, new_len);
   14bb0:	683b      	ldr	r3, [r7, #0]
   14bb2:	3308      	adds	r3, #8
   14bb4:	681b      	ldr	r3, [r3, #0]
   14bb6:	4618      	mov	r0, r3
   14bb8:	f7fd fb0c 	bl	121d4 <MP_OBJ_IS_QSTR>
   14bbc:	4603      	mov	r3, r0
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	d00b      	beq.n	14bda <str_replace+0x16e>
   14bc2:	683b      	ldr	r3, [r7, #0]
   14bc4:	3308      	adds	r3, #8
   14bc6:	681b      	ldr	r3, [r3, #0]
   14bc8:	089b      	lsrs	r3, r3, #2
   14bca:	f107 0218 	add.w	r2, r7, #24
   14bce:	4611      	mov	r1, r2
   14bd0:	4618      	mov	r0, r3
   14bd2:	f7ec fb2b 	bl	122c <qstr_data>
   14bd6:	6438      	str	r0, [r7, #64]	; 0x40
   14bd8:	e009      	b.n	14bee <str_replace+0x182>
   14bda:	683b      	ldr	r3, [r7, #0]
   14bdc:	3308      	adds	r3, #8
   14bde:	681b      	ldr	r3, [r3, #0]
   14be0:	689b      	ldr	r3, [r3, #8]
   14be2:	61bb      	str	r3, [r7, #24]
   14be4:	683b      	ldr	r3, [r7, #0]
   14be6:	3308      	adds	r3, #8
   14be8:	681b      	ldr	r3, [r3, #0]
   14bea:	68db      	ldr	r3, [r3, #12]
   14bec:	643b      	str	r3, [r7, #64]	; 0x40

    // old won't exist in str if it's longer, so nothing to replace
    if (old_len > str_len) {
   14bee:	69fa      	ldr	r2, [r7, #28]
   14bf0:	6a3b      	ldr	r3, [r7, #32]
   14bf2:	429a      	cmp	r2, r3
   14bf4:	d902      	bls.n	14bfc <str_replace+0x190>
        return args[0];
   14bf6:	683b      	ldr	r3, [r7, #0]
   14bf8:	681b      	ldr	r3, [r3, #0]
   14bfa:	e09b      	b.n	14d34 <str_replace+0x2c8>
    }

    // data for the replaced string
    byte *data = NULL;
   14bfc:	2300      	movs	r3, #0
   14bfe:	63fb      	str	r3, [r7, #60]	; 0x3c

    // do 2 passes over the string:
    //   first pass computes the required length of the replaced string
    //   second pass does the replacements
    for (;;) {
        size_t replaced_str_index = 0;
   14c00:	2300      	movs	r3, #0
   14c02:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t num_replacements_done = 0;
   14c04:	2300      	movs	r3, #0
   14c06:	637b      	str	r3, [r7, #52]	; 0x34
        const byte *old_occurrence;
        const byte *offset_ptr = str;
   14c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        size_t str_len_remain = str_len;
   14c0c:	6a3b      	ldr	r3, [r7, #32]
   14c0e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (old_len == 0) {
   14c10:	69fb      	ldr	r3, [r7, #28]
   14c12:	2b00      	cmp	r3, #0
   14c14:	d147      	bne.n	14ca6 <str_replace+0x23a>
            // if old_str is empty, copy new_str to start of replaced string
            // copy the replacement string
            if (data != NULL) {
   14c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14c18:	2b00      	cmp	r3, #0
   14c1a:	d005      	beq.n	14c28 <str_replace+0x1bc>
                memcpy(data, new, new_len);
   14c1c:	69bb      	ldr	r3, [r7, #24]
   14c1e:	461a      	mov	r2, r3
   14c20:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14c22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14c24:	f007 f876 	bl	1bd14 <memcpy>
            }
            replaced_str_index += new_len;
   14c28:	69bb      	ldr	r3, [r7, #24]
   14c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14c2c:	4413      	add	r3, r2
   14c2e:	63bb      	str	r3, [r7, #56]	; 0x38
            num_replacements_done++;
   14c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c32:	3301      	adds	r3, #1
   14c34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14c36:	e036      	b.n	14ca6 <str_replace+0x23a>
            if (old_len == 0) {
   14c38:	69fb      	ldr	r3, [r7, #28]
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	d102      	bne.n	14c44 <str_replace+0x1d8>
                old_occurrence += 1;
   14c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14c40:	3301      	adds	r3, #1
   14c42:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // copy from just after end of last occurrence of to-be-replaced string to right before start of next occurrence
            if (data != NULL) {
   14c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14c46:	2b00      	cmp	r3, #0
   14c48:	d009      	beq.n	14c5e <str_replace+0x1f2>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
   14c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14c4e:	18d0      	adds	r0, r2, r3
   14c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c54:	1ad3      	subs	r3, r2, r3
   14c56:	461a      	mov	r2, r3
   14c58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14c5a:	f007 f85b 	bl	1bd14 <memcpy>
            }
            replaced_str_index += old_occurrence - offset_ptr;
   14c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c62:	1ad3      	subs	r3, r2, r3
   14c64:	461a      	mov	r2, r3
   14c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14c68:	4413      	add	r3, r2
   14c6a:	63bb      	str	r3, [r7, #56]	; 0x38
            // copy the replacement string
            if (data != NULL) {
   14c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14c6e:	2b00      	cmp	r3, #0
   14c70:	d007      	beq.n	14c82 <str_replace+0x216>
                memcpy(data + replaced_str_index, new, new_len);
   14c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14c76:	4413      	add	r3, r2
   14c78:	69ba      	ldr	r2, [r7, #24]
   14c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14c7c:	4618      	mov	r0, r3
   14c7e:	f007 f849 	bl	1bd14 <memcpy>
            }
            replaced_str_index += new_len;
   14c82:	69bb      	ldr	r3, [r7, #24]
   14c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14c86:	4413      	add	r3, r2
   14c88:	63bb      	str	r3, [r7, #56]	; 0x38
            offset_ptr = old_occurrence + old_len;
   14c8a:	69fb      	ldr	r3, [r7, #28]
   14c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14c8e:	4413      	add	r3, r2
   14c90:	62fb      	str	r3, [r7, #44]	; 0x2c
            str_len_remain = str + str_len - offset_ptr;
   14c92:	6a3b      	ldr	r3, [r7, #32]
   14c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14c96:	4413      	add	r3, r2
   14c98:	461a      	mov	r2, r3
   14c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c9c:	1ad3      	subs	r3, r2, r3
   14c9e:	62bb      	str	r3, [r7, #40]	; 0x28
            num_replacements_done++;
   14ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ca2:	3301      	adds	r3, #1
   14ca4:	637b      	str	r3, [r7, #52]	; 0x34
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14caa:	429a      	cmp	r2, r3
   14cac:	d00f      	beq.n	14cce <str_replace+0x262>
   14cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14cb0:	2b00      	cmp	r3, #0
   14cb2:	d00c      	beq.n	14cce <str_replace+0x262>
   14cb4:	69fa      	ldr	r2, [r7, #28]
   14cb6:	2301      	movs	r3, #1
   14cb8:	9300      	str	r3, [sp, #0]
   14cba:	4613      	mov	r3, r2
   14cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14cc2:	f7fd fd87 	bl	127d4 <find_subbytes>
   14cc6:	6338      	str	r0, [r7, #48]	; 0x30
   14cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14cca:	2b00      	cmp	r3, #0
   14ccc:	d1b4      	bne.n	14c38 <str_replace+0x1cc>
        }

        // copy from just after end of last occurrence of to-be-replaced string to end of old string
        if (data != NULL) {
   14cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d007      	beq.n	14ce4 <str_replace+0x278>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
   14cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14cd8:	4413      	add	r3, r2
   14cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14cde:	4618      	mov	r0, r3
   14ce0:	f007 f818 	bl	1bd14 <memcpy>
        }
        replaced_str_index += str_len_remain;
   14ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14ce8:	4413      	add	r3, r2
   14cea:	63bb      	str	r3, [r7, #56]	; 0x38

        if (data == NULL) {
   14cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14cee:	2b00      	cmp	r3, #0
   14cf0:	d118      	bne.n	14d24 <str_replace+0x2b8>
            // first pass
            if (num_replacements_done == 0) {
   14cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14cf4:	2b00      	cmp	r3, #0
   14cf6:	d102      	bne.n	14cfe <str_replace+0x292>
                // no substr found, return original string
                return args[0];
   14cf8:	683b      	ldr	r3, [r7, #0]
   14cfa:	681b      	ldr	r3, [r3, #0]
   14cfc:	e01a      	b.n	14d34 <str_replace+0x2c8>
            } else {
                // substr found, allocate new string
                vstr_init_len(&vstr, replaced_str_index);
   14cfe:	f107 0308 	add.w	r3, r7, #8
   14d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   14d04:	4618      	mov	r0, r3
   14d06:	f7ec fb2b 	bl	1360 <vstr_init_len>
                data = (byte*)vstr.buf;
   14d0a:	693b      	ldr	r3, [r7, #16]
   14d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
                assert(data != NULL);
   14d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d10:	2b00      	cmp	r3, #0
   14d12:	f47f af75 	bne.w	14c00 <str_replace+0x194>
   14d16:	4b0d      	ldr	r3, [pc, #52]	; (14d4c <str_replace+0x2e0>)
   14d18:	4a0a      	ldr	r2, [pc, #40]	; (14d44 <str_replace+0x2d8>)
   14d1a:	f240 618e 	movw	r1, #1678	; 0x68e
   14d1e:	480a      	ldr	r0, [pc, #40]	; (14d48 <str_replace+0x2dc>)
   14d20:	f006 fb3c 	bl	1b39c <__assert_func>
            }
        } else {
            // second pass, we are done
            break;
   14d24:	bf00      	nop
        }
    }

    return mp_obj_new_str_from_vstr(self_type, &vstr);
   14d26:	f107 0308 	add.w	r3, r7, #8
   14d2a:	4619      	mov	r1, r3
   14d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14d2e:	f000 fad1 	bl	152d4 <mp_obj_new_str_from_vstr>
   14d32:	4603      	mov	r3, r0
}
   14d34:	4618      	mov	r0, r3
   14d36:	3750      	adds	r7, #80	; 0x50
   14d38:	46bd      	mov	sp, r7
   14d3a:	bd80      	pop	{r7, pc}
   14d3c:	00012849 	.word	0x00012849
   14d40:	000216f4 	.word	0x000216f4
   14d44:	00021c50 	.word	0x00021c50
   14d48:	00021658 	.word	0x00021658
   14d4c:	00021a10 	.word	0x00021a10

00014d50 <str_count>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_replace_obj, 3, 4, str_replace);

STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
   14d50:	b580      	push	{r7, lr}
   14d52:	b08e      	sub	sp, #56	; 0x38
   14d54:	af02      	add	r7, sp, #8
   14d56:	6078      	str	r0, [r7, #4]
   14d58:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14d5a:	683b      	ldr	r3, [r7, #0]
   14d5c:	681b      	ldr	r3, [r3, #0]
   14d5e:	4618      	mov	r0, r3
   14d60:	f7f8 fd34 	bl	d7cc <mp_obj_get_type>
   14d64:	6178      	str	r0, [r7, #20]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14d66:	683b      	ldr	r3, [r7, #0]
   14d68:	681b      	ldr	r3, [r3, #0]
   14d6a:	4618      	mov	r0, r3
   14d6c:	f7fd fa32 	bl	121d4 <MP_OBJ_IS_QSTR>
   14d70:	4603      	mov	r3, r0
   14d72:	f083 0301 	eor.w	r3, r3, #1
   14d76:	b2db      	uxtb	r3, r3
   14d78:	2b00      	cmp	r3, #0
   14d7a:	d018      	beq.n	14dae <str_count+0x5e>
   14d7c:	683b      	ldr	r3, [r7, #0]
   14d7e:	681b      	ldr	r3, [r3, #0]
   14d80:	4618      	mov	r0, r3
   14d82:	f7fd fa39 	bl	121f8 <MP_OBJ_IS_OBJ>
   14d86:	4603      	mov	r3, r0
   14d88:	f083 0301 	eor.w	r3, r3, #1
   14d8c:	b2db      	uxtb	r3, r3
   14d8e:	2b00      	cmp	r3, #0
   14d90:	d106      	bne.n	14da0 <str_count+0x50>
   14d92:	683b      	ldr	r3, [r7, #0]
   14d94:	681b      	ldr	r3, [r3, #0]
   14d96:	681b      	ldr	r3, [r3, #0]
   14d98:	699b      	ldr	r3, [r3, #24]
   14d9a:	4a5e      	ldr	r2, [pc, #376]	; (14f14 <str_count+0x1c4>)
   14d9c:	4293      	cmp	r3, r2
   14d9e:	d006      	beq.n	14dae <str_count+0x5e>
   14da0:	4b5d      	ldr	r3, [pc, #372]	; (14f18 <str_count+0x1c8>)
   14da2:	4a5e      	ldr	r2, [pc, #376]	; (14f1c <str_count+0x1cc>)
   14da4:	f240 619c 	movw	r1, #1692	; 0x69c
   14da8:	485d      	ldr	r0, [pc, #372]	; (14f20 <str_count+0x1d0>)
   14daa:	f006 faf7 	bl	1b39c <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   14dae:	683b      	ldr	r3, [r7, #0]
   14db0:	3304      	adds	r3, #4
   14db2:	681b      	ldr	r3, [r3, #0]
   14db4:	4618      	mov	r0, r3
   14db6:	f7f8 fd09 	bl	d7cc <mp_obj_get_type>
   14dba:	4602      	mov	r2, r0
   14dbc:	697b      	ldr	r3, [r7, #20]
   14dbe:	429a      	cmp	r2, r3
   14dc0:	d005      	beq.n	14dce <str_count+0x7e>
        bad_implicit_conversion(args[1]);
   14dc2:	683b      	ldr	r3, [r7, #0]
   14dc4:	3304      	adds	r3, #4
   14dc6:	681b      	ldr	r3, [r3, #0]
   14dc8:	4618      	mov	r0, r3
   14dca:	f000 fbd7 	bl	1557c <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   14dce:	683b      	ldr	r3, [r7, #0]
   14dd0:	681b      	ldr	r3, [r3, #0]
   14dd2:	4618      	mov	r0, r3
   14dd4:	f7fd f9fe 	bl	121d4 <MP_OBJ_IS_QSTR>
   14dd8:	4603      	mov	r3, r0
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d00a      	beq.n	14df4 <str_count+0xa4>
   14dde:	683b      	ldr	r3, [r7, #0]
   14de0:	681b      	ldr	r3, [r3, #0]
   14de2:	089b      	lsrs	r3, r3, #2
   14de4:	f107 0210 	add.w	r2, r7, #16
   14de8:	4611      	mov	r1, r2
   14dea:	4618      	mov	r0, r3
   14dec:	f7ec fa1e 	bl	122c <qstr_data>
   14df0:	62f8      	str	r0, [r7, #44]	; 0x2c
   14df2:	e007      	b.n	14e04 <str_count+0xb4>
   14df4:	683b      	ldr	r3, [r7, #0]
   14df6:	681b      	ldr	r3, [r3, #0]
   14df8:	689b      	ldr	r3, [r3, #8]
   14dfa:	613b      	str	r3, [r7, #16]
   14dfc:	683b      	ldr	r3, [r7, #0]
   14dfe:	681b      	ldr	r3, [r3, #0]
   14e00:	68db      	ldr	r3, [r3, #12]
   14e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   14e04:	683b      	ldr	r3, [r7, #0]
   14e06:	3304      	adds	r3, #4
   14e08:	681b      	ldr	r3, [r3, #0]
   14e0a:	4618      	mov	r0, r3
   14e0c:	f7fd f9e2 	bl	121d4 <MP_OBJ_IS_QSTR>
   14e10:	4603      	mov	r3, r0
   14e12:	2b00      	cmp	r3, #0
   14e14:	d00b      	beq.n	14e2e <str_count+0xde>
   14e16:	683b      	ldr	r3, [r7, #0]
   14e18:	3304      	adds	r3, #4
   14e1a:	681b      	ldr	r3, [r3, #0]
   14e1c:	089b      	lsrs	r3, r3, #2
   14e1e:	f107 020c 	add.w	r2, r7, #12
   14e22:	4611      	mov	r1, r2
   14e24:	4618      	mov	r0, r3
   14e26:	f7ec fa01 	bl	122c <qstr_data>
   14e2a:	62b8      	str	r0, [r7, #40]	; 0x28
   14e2c:	e009      	b.n	14e42 <str_count+0xf2>
   14e2e:	683b      	ldr	r3, [r7, #0]
   14e30:	3304      	adds	r3, #4
   14e32:	681b      	ldr	r3, [r3, #0]
   14e34:	689b      	ldr	r3, [r3, #8]
   14e36:	60fb      	str	r3, [r7, #12]
   14e38:	683b      	ldr	r3, [r7, #0]
   14e3a:	3304      	adds	r3, #4
   14e3c:	681b      	ldr	r3, [r3, #0]
   14e3e:	68db      	ldr	r3, [r3, #12]
   14e40:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   14e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14e44:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   14e46:	693b      	ldr	r3, [r7, #16]
   14e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14e4a:	4413      	add	r3, r2
   14e4c:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   14e4e:	687b      	ldr	r3, [r7, #4]
   14e50:	2b02      	cmp	r3, #2
   14e52:	d911      	bls.n	14e78 <str_count+0x128>
   14e54:	683b      	ldr	r3, [r7, #0]
   14e56:	3308      	adds	r3, #8
   14e58:	681b      	ldr	r3, [r3, #0]
   14e5a:	4a32      	ldr	r2, [pc, #200]	; (14f24 <str_count+0x1d4>)
   14e5c:	4293      	cmp	r3, r2
   14e5e:	d00b      	beq.n	14e78 <str_count+0x128>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   14e60:	693a      	ldr	r2, [r7, #16]
   14e62:	683b      	ldr	r3, [r7, #0]
   14e64:	3308      	adds	r3, #8
   14e66:	6819      	ldr	r1, [r3, #0]
   14e68:	2301      	movs	r3, #1
   14e6a:	9300      	str	r3, [sp, #0]
   14e6c:	460b      	mov	r3, r1
   14e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14e70:	6978      	ldr	r0, [r7, #20]
   14e72:	f7fd fe65 	bl	12b40 <str_index_to_ptr>
   14e76:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   14e78:	687b      	ldr	r3, [r7, #4]
   14e7a:	2b03      	cmp	r3, #3
   14e7c:	d911      	bls.n	14ea2 <str_count+0x152>
   14e7e:	683b      	ldr	r3, [r7, #0]
   14e80:	330c      	adds	r3, #12
   14e82:	681b      	ldr	r3, [r3, #0]
   14e84:	4a27      	ldr	r2, [pc, #156]	; (14f24 <str_count+0x1d4>)
   14e86:	4293      	cmp	r3, r2
   14e88:	d00b      	beq.n	14ea2 <str_count+0x152>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   14e8a:	693a      	ldr	r2, [r7, #16]
   14e8c:	683b      	ldr	r3, [r7, #0]
   14e8e:	330c      	adds	r3, #12
   14e90:	6819      	ldr	r1, [r3, #0]
   14e92:	2301      	movs	r3, #1
   14e94:	9300      	str	r3, [sp, #0]
   14e96:	460b      	mov	r3, r1
   14e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14e9a:	6978      	ldr	r0, [r7, #20]
   14e9c:	f7fd fe50 	bl	12b40 <str_index_to_ptr>
   14ea0:	6238      	str	r0, [r7, #32]
    }

    // if needle_len is zero then we count each gap between characters as an occurrence
    if (needle_len == 0) {
   14ea2:	68fb      	ldr	r3, [r7, #12]
   14ea4:	2b00      	cmp	r3, #0
   14ea6:	d10c      	bne.n	14ec2 <str_count+0x172>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
   14ea8:	6a3a      	ldr	r2, [r7, #32]
   14eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14eac:	1ad3      	subs	r3, r2, r3
   14eae:	4619      	mov	r1, r3
   14eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14eb2:	f7fd f971 	bl	12198 <utf8_charlen>
   14eb6:	4603      	mov	r3, r0
   14eb8:	3301      	adds	r3, #1
   14eba:	005b      	lsls	r3, r3, #1
   14ebc:	f043 0301 	orr.w	r3, r3, #1
   14ec0:	e023      	b.n	14f0a <str_count+0x1ba>
    }

    // count the occurrences
    mp_int_t num_occurrences = 0;
   14ec2:	2300      	movs	r3, #0
   14ec4:	61fb      	str	r3, [r7, #28]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14ec8:	61bb      	str	r3, [r7, #24]
   14eca:	e014      	b.n	14ef6 <str_count+0x1a6>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
   14ecc:	68fb      	ldr	r3, [r7, #12]
   14ece:	461a      	mov	r2, r3
   14ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14ed2:	69b8      	ldr	r0, [r7, #24]
   14ed4:	f007 f806 	bl	1bee4 <memcmp>
   14ed8:	4603      	mov	r3, r0
   14eda:	2b00      	cmp	r3, #0
   14edc:	d107      	bne.n	14eee <str_count+0x19e>
            num_occurrences++;
   14ede:	69fb      	ldr	r3, [r7, #28]
   14ee0:	3301      	adds	r3, #1
   14ee2:	61fb      	str	r3, [r7, #28]
            haystack_ptr += needle_len;
   14ee4:	68fb      	ldr	r3, [r7, #12]
   14ee6:	69ba      	ldr	r2, [r7, #24]
   14ee8:	4413      	add	r3, r2
   14eea:	61bb      	str	r3, [r7, #24]
   14eec:	e003      	b.n	14ef6 <str_count+0x1a6>
        } else {
            haystack_ptr = utf8_next_char(haystack_ptr);
   14eee:	69b8      	ldr	r0, [r7, #24]
   14ef0:	f7fd f946 	bl	12180 <utf8_next_char>
   14ef4:	61b8      	str	r0, [r7, #24]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14ef6:	68fb      	ldr	r3, [r7, #12]
   14ef8:	69ba      	ldr	r2, [r7, #24]
   14efa:	441a      	add	r2, r3
   14efc:	6a3b      	ldr	r3, [r7, #32]
   14efe:	429a      	cmp	r2, r3
   14f00:	d9e4      	bls.n	14ecc <str_count+0x17c>
        }
    }

    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
   14f02:	69fb      	ldr	r3, [r7, #28]
   14f04:	005b      	lsls	r3, r3, #1
   14f06:	f043 0301 	orr.w	r3, r3, #1
}
   14f0a:	4618      	mov	r0, r3
   14f0c:	3730      	adds	r7, #48	; 0x30
   14f0e:	46bd      	mov	sp, r7
   14f10:	bd80      	pop	{r7, pc}
   14f12:	bf00      	nop
   14f14:	00012849 	.word	0x00012849
   14f18:	000216f4 	.word	0x000216f4
   14f1c:	00021c5c 	.word	0x00021c5c
   14f20:	00021658 	.word	0x00021658
   14f24:	00021480 	.word	0x00021480

00014f28 <str_caseconv>:
}
MP_DEFINE_CONST_FUN_OBJ_2(str_rpartition_obj, str_rpartition);
#endif

// Supposedly not too critical operations, so optimize for code size
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
   14f28:	b590      	push	{r4, r7, lr}
   14f2a:	b08b      	sub	sp, #44	; 0x2c
   14f2c:	af00      	add	r7, sp, #0
   14f2e:	6078      	str	r0, [r7, #4]
   14f30:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   14f32:	6838      	ldr	r0, [r7, #0]
   14f34:	f7fd f94e 	bl	121d4 <MP_OBJ_IS_QSTR>
   14f38:	4603      	mov	r3, r0
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	d009      	beq.n	14f52 <str_caseconv+0x2a>
   14f3e:	683b      	ldr	r3, [r7, #0]
   14f40:	089b      	lsrs	r3, r3, #2
   14f42:	f107 0218 	add.w	r2, r7, #24
   14f46:	4611      	mov	r1, r2
   14f48:	4618      	mov	r0, r3
   14f4a:	f7ec f96f 	bl	122c <qstr_data>
   14f4e:	6278      	str	r0, [r7, #36]	; 0x24
   14f50:	e005      	b.n	14f5e <str_caseconv+0x36>
   14f52:	683b      	ldr	r3, [r7, #0]
   14f54:	689b      	ldr	r3, [r3, #8]
   14f56:	61bb      	str	r3, [r7, #24]
   14f58:	683b      	ldr	r3, [r7, #0]
   14f5a:	68db      	ldr	r3, [r3, #12]
   14f5c:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr;
    vstr_init_len(&vstr, self_len);
   14f5e:	69ba      	ldr	r2, [r7, #24]
   14f60:	f107 0308 	add.w	r3, r7, #8
   14f64:	4611      	mov	r1, r2
   14f66:	4618      	mov	r0, r3
   14f68:	f7ec f9fa 	bl	1360 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   14f6c:	693b      	ldr	r3, [r7, #16]
   14f6e:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < self_len; i++) {
   14f70:	2300      	movs	r3, #0
   14f72:	61fb      	str	r3, [r7, #28]
   14f74:	e010      	b.n	14f98 <str_caseconv+0x70>
        *data++ = op(*self_data++);
   14f76:	6a3c      	ldr	r4, [r7, #32]
   14f78:	1c63      	adds	r3, r4, #1
   14f7a:	623b      	str	r3, [r7, #32]
   14f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f7e:	1c5a      	adds	r2, r3, #1
   14f80:	627a      	str	r2, [r7, #36]	; 0x24
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	461a      	mov	r2, r3
   14f86:	687b      	ldr	r3, [r7, #4]
   14f88:	4610      	mov	r0, r2
   14f8a:	4798      	blx	r3
   14f8c:	4603      	mov	r3, r0
   14f8e:	b2db      	uxtb	r3, r3
   14f90:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < self_len; i++) {
   14f92:	69fb      	ldr	r3, [r7, #28]
   14f94:	3301      	adds	r3, #1
   14f96:	61fb      	str	r3, [r7, #28]
   14f98:	69bb      	ldr	r3, [r7, #24]
   14f9a:	69fa      	ldr	r2, [r7, #28]
   14f9c:	429a      	cmp	r2, r3
   14f9e:	d3ea      	bcc.n	14f76 <str_caseconv+0x4e>
    }
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
   14fa0:	6838      	ldr	r0, [r7, #0]
   14fa2:	f7f8 fc13 	bl	d7cc <mp_obj_get_type>
   14fa6:	4602      	mov	r2, r0
   14fa8:	f107 0308 	add.w	r3, r7, #8
   14fac:	4619      	mov	r1, r3
   14fae:	4610      	mov	r0, r2
   14fb0:	f000 f990 	bl	152d4 <mp_obj_new_str_from_vstr>
   14fb4:	4603      	mov	r3, r0
}
   14fb6:	4618      	mov	r0, r3
   14fb8:	372c      	adds	r7, #44	; 0x2c
   14fba:	46bd      	mov	sp, r7
   14fbc:	bd90      	pop	{r4, r7, pc}
   14fbe:	bf00      	nop

00014fc0 <str_lower>:

STATIC mp_obj_t str_lower(mp_obj_t self_in) {
   14fc0:	b580      	push	{r7, lr}
   14fc2:	b082      	sub	sp, #8
   14fc4:	af00      	add	r7, sp, #0
   14fc6:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_tolower, self_in);
   14fc8:	6879      	ldr	r1, [r7, #4]
   14fca:	4804      	ldr	r0, [pc, #16]	; (14fdc <str_lower+0x1c>)
   14fcc:	f7ff ffac 	bl	14f28 <str_caseconv>
   14fd0:	4603      	mov	r3, r0
}
   14fd2:	4618      	mov	r0, r3
   14fd4:	3708      	adds	r7, #8
   14fd6:	46bd      	mov	sp, r7
   14fd8:	bd80      	pop	{r7, pc}
   14fda:	bf00      	nop
   14fdc:	00002545 	.word	0x00002545

00014fe0 <str_upper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_lower_obj, str_lower);

STATIC mp_obj_t str_upper(mp_obj_t self_in) {
   14fe0:	b580      	push	{r7, lr}
   14fe2:	b082      	sub	sp, #8
   14fe4:	af00      	add	r7, sp, #0
   14fe6:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_toupper, self_in);
   14fe8:	6879      	ldr	r1, [r7, #4]
   14fea:	4804      	ldr	r0, [pc, #16]	; (14ffc <str_upper+0x1c>)
   14fec:	f7ff ff9c 	bl	14f28 <str_caseconv>
   14ff0:	4603      	mov	r3, r0
}
   14ff2:	4618      	mov	r0, r3
   14ff4:	3708      	adds	r7, #8
   14ff6:	46bd      	mov	sp, r7
   14ff8:	bd80      	pop	{r7, pc}
   14ffa:	bf00      	nop
   14ffc:	00002569 	.word	0x00002569

00015000 <str_uni_istype>:
MP_DEFINE_CONST_FUN_OBJ_1(str_upper_obj, str_upper);

STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
   15000:	b580      	push	{r7, lr}
   15002:	b088      	sub	sp, #32
   15004:	af00      	add	r7, sp, #0
   15006:	6078      	str	r0, [r7, #4]
   15008:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   1500a:	6838      	ldr	r0, [r7, #0]
   1500c:	f7fd f8e2 	bl	121d4 <MP_OBJ_IS_QSTR>
   15010:	4603      	mov	r3, r0
   15012:	2b00      	cmp	r3, #0
   15014:	d009      	beq.n	1502a <str_uni_istype+0x2a>
   15016:	683b      	ldr	r3, [r7, #0]
   15018:	089b      	lsrs	r3, r3, #2
   1501a:	f107 020c 	add.w	r2, r7, #12
   1501e:	4611      	mov	r1, r2
   15020:	4618      	mov	r0, r3
   15022:	f7ec f903 	bl	122c <qstr_data>
   15026:	61f8      	str	r0, [r7, #28]
   15028:	e005      	b.n	15036 <str_uni_istype+0x36>
   1502a:	683b      	ldr	r3, [r7, #0]
   1502c:	689b      	ldr	r3, [r3, #8]
   1502e:	60fb      	str	r3, [r7, #12]
   15030:	683b      	ldr	r3, [r7, #0]
   15032:	68db      	ldr	r3, [r3, #12]
   15034:	61fb      	str	r3, [r7, #28]

    if (self_len == 0) {
   15036:	68fb      	ldr	r3, [r7, #12]
   15038:	2b00      	cmp	r3, #0
   1503a:	d101      	bne.n	15040 <str_uni_istype+0x40>
        return mp_const_false; // default to False for empty str
   1503c:	4b2c      	ldr	r3, [pc, #176]	; (150f0 <str_uni_istype+0xf0>)
   1503e:	e052      	b.n	150e6 <str_uni_istype+0xe6>
    }

    if (f != unichar_isupper && f != unichar_islower) {
   15040:	687b      	ldr	r3, [r7, #4]
   15042:	4a2c      	ldr	r2, [pc, #176]	; (150f4 <str_uni_istype+0xf4>)
   15044:	4293      	cmp	r3, r2
   15046:	d01e      	beq.n	15086 <str_uni_istype+0x86>
   15048:	687b      	ldr	r3, [r7, #4]
   1504a:	4a2b      	ldr	r2, [pc, #172]	; (150f8 <str_uni_istype+0xf8>)
   1504c:	4293      	cmp	r3, r2
   1504e:	d01a      	beq.n	15086 <str_uni_istype+0x86>
        for (size_t i = 0; i < self_len; i++) {
   15050:	2300      	movs	r3, #0
   15052:	61bb      	str	r3, [r7, #24]
   15054:	e012      	b.n	1507c <str_uni_istype+0x7c>
            if (!f(*self_data++)) {
   15056:	69fb      	ldr	r3, [r7, #28]
   15058:	1c5a      	adds	r2, r3, #1
   1505a:	61fa      	str	r2, [r7, #28]
   1505c:	781b      	ldrb	r3, [r3, #0]
   1505e:	461a      	mov	r2, r3
   15060:	687b      	ldr	r3, [r7, #4]
   15062:	4610      	mov	r0, r2
   15064:	4798      	blx	r3
   15066:	4603      	mov	r3, r0
   15068:	f083 0301 	eor.w	r3, r3, #1
   1506c:	b2db      	uxtb	r3, r3
   1506e:	2b00      	cmp	r3, #0
   15070:	d001      	beq.n	15076 <str_uni_istype+0x76>
                return mp_const_false;
   15072:	4b1f      	ldr	r3, [pc, #124]	; (150f0 <str_uni_istype+0xf0>)
   15074:	e037      	b.n	150e6 <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) {
   15076:	69bb      	ldr	r3, [r7, #24]
   15078:	3301      	adds	r3, #1
   1507a:	61bb      	str	r3, [r7, #24]
   1507c:	68fb      	ldr	r3, [r7, #12]
   1507e:	69ba      	ldr	r2, [r7, #24]
   15080:	429a      	cmp	r2, r3
   15082:	d3e8      	bcc.n	15056 <str_uni_istype+0x56>
   15084:	e02e      	b.n	150e4 <str_uni_istype+0xe4>
            }
        }
    } else {
        bool contains_alpha = false;
   15086:	2300      	movs	r3, #0
   15088:	75fb      	strb	r3, [r7, #23]

        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   1508a:	2300      	movs	r3, #0
   1508c:	613b      	str	r3, [r7, #16]
   1508e:	e01d      	b.n	150cc <str_uni_istype+0xcc>
            if (unichar_isalpha(*self_data++)) {
   15090:	69fb      	ldr	r3, [r7, #28]
   15092:	1c5a      	adds	r2, r3, #1
   15094:	61fa      	str	r2, [r7, #28]
   15096:	781b      	ldrb	r3, [r3, #0]
   15098:	4618      	mov	r0, r3
   1509a:	f7ed f99d 	bl	23d8 <unichar_isalpha>
   1509e:	4603      	mov	r3, r0
   150a0:	2b00      	cmp	r3, #0
   150a2:	d010      	beq.n	150c6 <str_uni_istype+0xc6>
                contains_alpha = true;
   150a4:	2301      	movs	r3, #1
   150a6:	75fb      	strb	r3, [r7, #23]
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
   150a8:	69fb      	ldr	r3, [r7, #28]
   150aa:	3b01      	subs	r3, #1
   150ac:	781b      	ldrb	r3, [r3, #0]
   150ae:	461a      	mov	r2, r3
   150b0:	687b      	ldr	r3, [r7, #4]
   150b2:	4610      	mov	r0, r2
   150b4:	4798      	blx	r3
   150b6:	4603      	mov	r3, r0
   150b8:	f083 0301 	eor.w	r3, r3, #1
   150bc:	b2db      	uxtb	r3, r3
   150be:	2b00      	cmp	r3, #0
   150c0:	d001      	beq.n	150c6 <str_uni_istype+0xc6>
                    return mp_const_false;
   150c2:	4b0b      	ldr	r3, [pc, #44]	; (150f0 <str_uni_istype+0xf0>)
   150c4:	e00f      	b.n	150e6 <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   150c6:	693b      	ldr	r3, [r7, #16]
   150c8:	3301      	adds	r3, #1
   150ca:	613b      	str	r3, [r7, #16]
   150cc:	68fb      	ldr	r3, [r7, #12]
   150ce:	693a      	ldr	r2, [r7, #16]
   150d0:	429a      	cmp	r2, r3
   150d2:	d3dd      	bcc.n	15090 <str_uni_istype+0x90>
                }
            }
        }

        if (!contains_alpha) {
   150d4:	7dfb      	ldrb	r3, [r7, #23]
   150d6:	f083 0301 	eor.w	r3, r3, #1
   150da:	b2db      	uxtb	r3, r3
   150dc:	2b00      	cmp	r3, #0
   150de:	d001      	beq.n	150e4 <str_uni_istype+0xe4>
            return mp_const_false;
   150e0:	4b03      	ldr	r3, [pc, #12]	; (150f0 <str_uni_istype+0xf0>)
   150e2:	e000      	b.n	150e6 <str_uni_istype+0xe6>
        }
    }

    return mp_const_true;
   150e4:	4b05      	ldr	r3, [pc, #20]	; (150fc <str_uni_istype+0xfc>)
}
   150e6:	4618      	mov	r0, r3
   150e8:	3720      	adds	r7, #32
   150ea:	46bd      	mov	sp, r7
   150ec:	bd80      	pop	{r7, pc}
   150ee:	bf00      	nop
   150f0:	0001fc34 	.word	0x0001fc34
   150f4:	000024cd 	.word	0x000024cd
   150f8:	00002509 	.word	0x00002509
   150fc:	0001fc3c 	.word	0x0001fc3c

00015100 <str_isspace>:

STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
   15100:	b580      	push	{r7, lr}
   15102:	b082      	sub	sp, #8
   15104:	af00      	add	r7, sp, #0
   15106:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isspace, self_in);
   15108:	6879      	ldr	r1, [r7, #4]
   1510a:	4804      	ldr	r0, [pc, #16]	; (1511c <str_isspace+0x1c>)
   1510c:	f7ff ff78 	bl	15000 <str_uni_istype>
   15110:	4603      	mov	r3, r0
}
   15112:	4618      	mov	r0, r3
   15114:	3708      	adds	r7, #8
   15116:	46bd      	mov	sp, r7
   15118:	bd80      	pop	{r7, pc}
   1511a:	bf00      	nop
   1511c:	0000239d 	.word	0x0000239d

00015120 <str_isalpha>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isspace_obj, str_isspace);

STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
   15120:	b580      	push	{r7, lr}
   15122:	b082      	sub	sp, #8
   15124:	af00      	add	r7, sp, #0
   15126:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isalpha, self_in);
   15128:	6879      	ldr	r1, [r7, #4]
   1512a:	4804      	ldr	r0, [pc, #16]	; (1513c <str_isalpha+0x1c>)
   1512c:	f7ff ff68 	bl	15000 <str_uni_istype>
   15130:	4603      	mov	r3, r0
}
   15132:	4618      	mov	r0, r3
   15134:	3708      	adds	r7, #8
   15136:	46bd      	mov	sp, r7
   15138:	bd80      	pop	{r7, pc}
   1513a:	bf00      	nop
   1513c:	000023d9 	.word	0x000023d9

00015140 <str_isdigit>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isalpha_obj, str_isalpha);

STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
   15140:	b580      	push	{r7, lr}
   15142:	b082      	sub	sp, #8
   15144:	af00      	add	r7, sp, #0
   15146:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isdigit, self_in);
   15148:	6879      	ldr	r1, [r7, #4]
   1514a:	4804      	ldr	r0, [pc, #16]	; (1515c <str_isdigit+0x1c>)
   1514c:	f7ff ff58 	bl	15000 <str_uni_istype>
   15150:	4603      	mov	r3, r0
}
   15152:	4618      	mov	r0, r3
   15154:	3708      	adds	r7, #8
   15156:	46bd      	mov	sp, r7
   15158:	bd80      	pop	{r7, pc}
   1515a:	bf00      	nop
   1515c:	00002415 	.word	0x00002415

00015160 <str_isupper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isdigit_obj, str_isdigit);

STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
   15160:	b580      	push	{r7, lr}
   15162:	b082      	sub	sp, #8
   15164:	af00      	add	r7, sp, #0
   15166:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isupper, self_in);
   15168:	6879      	ldr	r1, [r7, #4]
   1516a:	4804      	ldr	r0, [pc, #16]	; (1517c <str_isupper+0x1c>)
   1516c:	f7ff ff48 	bl	15000 <str_uni_istype>
   15170:	4603      	mov	r3, r0
}
   15172:	4618      	mov	r0, r3
   15174:	3708      	adds	r7, #8
   15176:	46bd      	mov	sp, r7
   15178:	bd80      	pop	{r7, pc}
   1517a:	bf00      	nop
   1517c:	000024cd 	.word	0x000024cd

00015180 <str_islower>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isupper_obj, str_isupper);

STATIC mp_obj_t str_islower(mp_obj_t self_in) {
   15180:	b580      	push	{r7, lr}
   15182:	b082      	sub	sp, #8
   15184:	af00      	add	r7, sp, #0
   15186:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_islower, self_in);
   15188:	6879      	ldr	r1, [r7, #4]
   1518a:	4804      	ldr	r0, [pc, #16]	; (1519c <str_islower+0x1c>)
   1518c:	f7ff ff38 	bl	15000 <str_uni_istype>
   15190:	4603      	mov	r3, r0
}
   15192:	4618      	mov	r0, r3
   15194:	3708      	adds	r7, #8
   15196:	46bd      	mov	sp, r7
   15198:	bd80      	pop	{r7, pc}
   1519a:	bf00      	nop
   1519c:	00002509 	.word	0x00002509

000151a0 <mp_obj_str_get_buffer>:
    return bytes_make_new(NULL, n_args, 0, args);
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_encode_obj, 1, 3, str_encode);
#endif

mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   151a0:	b580      	push	{r7, lr}
   151a2:	b086      	sub	sp, #24
   151a4:	af00      	add	r7, sp, #0
   151a6:	60f8      	str	r0, [r7, #12]
   151a8:	60b9      	str	r1, [r7, #8]
   151aa:	607a      	str	r2, [r7, #4]
    if (flags == MP_BUFFER_READ) {
   151ac:	687b      	ldr	r3, [r7, #4]
   151ae:	2b01      	cmp	r3, #1
   151b0:	d120      	bne.n	151f4 <mp_obj_str_get_buffer+0x54>
        GET_STR_DATA_LEN(self_in, str_data, str_len);
   151b2:	68f8      	ldr	r0, [r7, #12]
   151b4:	f7fd f80e 	bl	121d4 <MP_OBJ_IS_QSTR>
   151b8:	4603      	mov	r3, r0
   151ba:	2b00      	cmp	r3, #0
   151bc:	d009      	beq.n	151d2 <mp_obj_str_get_buffer+0x32>
   151be:	68fb      	ldr	r3, [r7, #12]
   151c0:	089b      	lsrs	r3, r3, #2
   151c2:	f107 0210 	add.w	r2, r7, #16
   151c6:	4611      	mov	r1, r2
   151c8:	4618      	mov	r0, r3
   151ca:	f7ec f82f 	bl	122c <qstr_data>
   151ce:	6178      	str	r0, [r7, #20]
   151d0:	e005      	b.n	151de <mp_obj_str_get_buffer+0x3e>
   151d2:	68fb      	ldr	r3, [r7, #12]
   151d4:	689b      	ldr	r3, [r3, #8]
   151d6:	613b      	str	r3, [r7, #16]
   151d8:	68fb      	ldr	r3, [r7, #12]
   151da:	68db      	ldr	r3, [r3, #12]
   151dc:	617b      	str	r3, [r7, #20]
        bufinfo->buf = (void*)str_data;
   151de:	68bb      	ldr	r3, [r7, #8]
   151e0:	697a      	ldr	r2, [r7, #20]
   151e2:	601a      	str	r2, [r3, #0]
        bufinfo->len = str_len;
   151e4:	693a      	ldr	r2, [r7, #16]
   151e6:	68bb      	ldr	r3, [r7, #8]
   151e8:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
   151ea:	68bb      	ldr	r3, [r7, #8]
   151ec:	2242      	movs	r2, #66	; 0x42
   151ee:	609a      	str	r2, [r3, #8]
        return 0;
   151f0:	2300      	movs	r3, #0
   151f2:	e00a      	b.n	1520a <mp_obj_str_get_buffer+0x6a>
    } else {
        // can't write to a string
        bufinfo->buf = NULL;
   151f4:	68bb      	ldr	r3, [r7, #8]
   151f6:	2200      	movs	r2, #0
   151f8:	601a      	str	r2, [r3, #0]
        bufinfo->len = 0;
   151fa:	68bb      	ldr	r3, [r7, #8]
   151fc:	2200      	movs	r2, #0
   151fe:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = -1;
   15200:	68bb      	ldr	r3, [r7, #8]
   15202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15206:	609a      	str	r2, [r3, #8]
        return 1;
   15208:	2301      	movs	r3, #1
    }
}
   1520a:	4618      	mov	r0, r3
   1520c:	3718      	adds	r7, #24
   1520e:	46bd      	mov	sp, r7
   15210:	bd80      	pop	{r7, pc}
   15212:	bf00      	nop

00015214 <mp_obj_new_str_copy>:
const mp_obj_str_t mp_const_empty_bytes_obj = {{&mp_type_bytes}, 0, 0, (const byte*)""};

// Create a str/bytes object using the given data.  New memory is allocated and
// the data is copied across.  This function should only be used if the type is bytes,
// or if the type is str and the string data is known to be not interned.
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
   15214:	b580      	push	{r7, lr}
   15216:	b086      	sub	sp, #24
   15218:	af00      	add	r7, sp, #0
   1521a:	60f8      	str	r0, [r7, #12]
   1521c:	60b9      	str	r1, [r7, #8]
   1521e:	607a      	str	r2, [r7, #4]
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   15220:	2010      	movs	r0, #16
   15222:	f7eb f87b 	bl	31c <m_malloc>
   15226:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   15228:	697b      	ldr	r3, [r7, #20]
   1522a:	68fa      	ldr	r2, [r7, #12]
   1522c:	601a      	str	r2, [r3, #0]
    o->len = len;
   1522e:	697b      	ldr	r3, [r7, #20]
   15230:	687a      	ldr	r2, [r7, #4]
   15232:	609a      	str	r2, [r3, #8]
    if (data) {
   15234:	68bb      	ldr	r3, [r7, #8]
   15236:	2b00      	cmp	r3, #0
   15238:	d019      	beq.n	1526e <mp_obj_new_str_copy+0x5a>
        o->hash = qstr_compute_hash(data, len);
   1523a:	6879      	ldr	r1, [r7, #4]
   1523c:	68b8      	ldr	r0, [r7, #8]
   1523e:	f7eb fdf7 	bl	e30 <qstr_compute_hash>
   15242:	4602      	mov	r2, r0
   15244:	697b      	ldr	r3, [r7, #20]
   15246:	605a      	str	r2, [r3, #4]
        byte *p = m_new(byte, len + 1);
   15248:	687b      	ldr	r3, [r7, #4]
   1524a:	3301      	adds	r3, #1
   1524c:	4618      	mov	r0, r3
   1524e:	f7eb f865 	bl	31c <m_malloc>
   15252:	6138      	str	r0, [r7, #16]
        o->data = p;
   15254:	697b      	ldr	r3, [r7, #20]
   15256:	693a      	ldr	r2, [r7, #16]
   15258:	60da      	str	r2, [r3, #12]
        memcpy(p, data, len * sizeof(byte));
   1525a:	687a      	ldr	r2, [r7, #4]
   1525c:	68b9      	ldr	r1, [r7, #8]
   1525e:	6938      	ldr	r0, [r7, #16]
   15260:	f006 fd58 	bl	1bd14 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
   15264:	693a      	ldr	r2, [r7, #16]
   15266:	687b      	ldr	r3, [r7, #4]
   15268:	4413      	add	r3, r2
   1526a:	2200      	movs	r2, #0
   1526c:	701a      	strb	r2, [r3, #0]
    }
    return MP_OBJ_FROM_PTR(o);
   1526e:	697b      	ldr	r3, [r7, #20]
}
   15270:	4618      	mov	r0, r3
   15272:	3718      	adds	r7, #24
   15274:	46bd      	mov	sp, r7
   15276:	bd80      	pop	{r7, pc}

00015278 <mp_obj_new_str_of_type>:

// Create a str/bytes object using the given data.  If the type is str and the string
// data is already interned, then a qstr object is returned.  Otherwise new memory is
// allocated for the object and the data is copied across.
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
   15278:	b580      	push	{r7, lr}
   1527a:	b084      	sub	sp, #16
   1527c:	af00      	add	r7, sp, #0
   1527e:	60f8      	str	r0, [r7, #12]
   15280:	60b9      	str	r1, [r7, #8]
   15282:	607a      	str	r2, [r7, #4]
    if (type == &mp_type_str) {
   15284:	68fb      	ldr	r3, [r7, #12]
   15286:	4a09      	ldr	r2, [pc, #36]	; (152ac <mp_obj_new_str_of_type+0x34>)
   15288:	4293      	cmp	r3, r2
   1528a:	d105      	bne.n	15298 <mp_obj_new_str_of_type+0x20>
        return mp_obj_new_str((const char*)data, len);
   1528c:	6879      	ldr	r1, [r7, #4]
   1528e:	68b8      	ldr	r0, [r7, #8]
   15290:	f000 f882 	bl	15398 <mp_obj_new_str>
   15294:	4603      	mov	r3, r0
   15296:	e004      	b.n	152a2 <mp_obj_new_str_of_type+0x2a>
    } else {
        return mp_obj_new_bytes(data, len);
   15298:	6879      	ldr	r1, [r7, #4]
   1529a:	68b8      	ldr	r0, [r7, #8]
   1529c:	f000 f8d4 	bl	15448 <mp_obj_new_bytes>
   152a0:	4603      	mov	r3, r0
    }
}
   152a2:	4618      	mov	r0, r3
   152a4:	3710      	adds	r7, #16
   152a6:	46bd      	mov	sp, r7
   152a8:	bd80      	pop	{r7, pc}
   152aa:	bf00      	nop
   152ac:	00021b30 	.word	0x00021b30

000152b0 <mp_obj_new_str_via_qstr>:

// Create a str using a qstr to store the data; may use existing or new qstr.
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
   152b0:	b580      	push	{r7, lr}
   152b2:	b082      	sub	sp, #8
   152b4:	af00      	add	r7, sp, #0
   152b6:	6078      	str	r0, [r7, #4]
   152b8:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
   152ba:	6839      	ldr	r1, [r7, #0]
   152bc:	6878      	ldr	r0, [r7, #4]
   152be:	f7eb fecb 	bl	1058 <qstr_from_strn>
   152c2:	4603      	mov	r3, r0
   152c4:	009b      	lsls	r3, r3, #2
   152c6:	f043 0302 	orr.w	r3, r3, #2
}
   152ca:	4618      	mov	r0, r3
   152cc:	3708      	adds	r7, #8
   152ce:	46bd      	mov	sp, r7
   152d0:	bd80      	pop	{r7, pc}
   152d2:	bf00      	nop

000152d4 <mp_obj_new_str_from_vstr>:

// Create a str/bytes object from the given vstr.  The vstr buffer is resized to
// the exact length required and then reused for the str/bytes object.  The vstr
// is cleared and can safely be passed to vstr_free if it was heap allocated.
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
   152d4:	b580      	push	{r7, lr}
   152d6:	b084      	sub	sp, #16
   152d8:	af00      	add	r7, sp, #0
   152da:	6078      	str	r0, [r7, #4]
   152dc:	6039      	str	r1, [r7, #0]
    // if not a bytes object, look if a qstr with this data already exists
    if (type == &mp_type_str) {
   152de:	687b      	ldr	r3, [r7, #4]
   152e0:	4a2c      	ldr	r2, [pc, #176]	; (15394 <mp_obj_new_str_from_vstr+0xc0>)
   152e2:	4293      	cmp	r3, r2
   152e4:	d116      	bne.n	15314 <mp_obj_new_str_from_vstr+0x40>
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
   152e6:	683b      	ldr	r3, [r7, #0]
   152e8:	689a      	ldr	r2, [r3, #8]
   152ea:	683b      	ldr	r3, [r7, #0]
   152ec:	685b      	ldr	r3, [r3, #4]
   152ee:	4619      	mov	r1, r3
   152f0:	4610      	mov	r0, r2
   152f2:	f7eb fe4d 	bl	f90 <qstr_find_strn>
   152f6:	60f8      	str	r0, [r7, #12]
        if (q != MP_QSTR_NULL) {
   152f8:	68fb      	ldr	r3, [r7, #12]
   152fa:	2b00      	cmp	r3, #0
   152fc:	d00a      	beq.n	15314 <mp_obj_new_str_from_vstr+0x40>
            vstr_clear(vstr);
   152fe:	6838      	ldr	r0, [r7, #0]
   15300:	f7ec f870 	bl	13e4 <vstr_clear>
            vstr->alloc = 0;
   15304:	683b      	ldr	r3, [r7, #0]
   15306:	2200      	movs	r2, #0
   15308:	601a      	str	r2, [r3, #0]
            return MP_OBJ_NEW_QSTR(q);
   1530a:	68fb      	ldr	r3, [r7, #12]
   1530c:	009b      	lsls	r3, r3, #2
   1530e:	f043 0302 	orr.w	r3, r3, #2
   15312:	e03b      	b.n	1538c <mp_obj_new_str_from_vstr+0xb8>
        }
    }

    // make a new str/bytes object
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   15314:	2010      	movs	r0, #16
   15316:	f7eb f801 	bl	31c <m_malloc>
   1531a:	60b8      	str	r0, [r7, #8]
    o->base.type = type;
   1531c:	68bb      	ldr	r3, [r7, #8]
   1531e:	687a      	ldr	r2, [r7, #4]
   15320:	601a      	str	r2, [r3, #0]
    o->len = vstr->len;
   15322:	683b      	ldr	r3, [r7, #0]
   15324:	685a      	ldr	r2, [r3, #4]
   15326:	68bb      	ldr	r3, [r7, #8]
   15328:	609a      	str	r2, [r3, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
   1532a:	683b      	ldr	r3, [r7, #0]
   1532c:	689a      	ldr	r2, [r3, #8]
   1532e:	683b      	ldr	r3, [r7, #0]
   15330:	685b      	ldr	r3, [r3, #4]
   15332:	4619      	mov	r1, r3
   15334:	4610      	mov	r0, r2
   15336:	f7eb fd7b 	bl	e30 <qstr_compute_hash>
   1533a:	4602      	mov	r2, r0
   1533c:	68bb      	ldr	r3, [r7, #8]
   1533e:	605a      	str	r2, [r3, #4]
    if (vstr->len + 1 == vstr->alloc) {
   15340:	683b      	ldr	r3, [r7, #0]
   15342:	685b      	ldr	r3, [r3, #4]
   15344:	1c5a      	adds	r2, r3, #1
   15346:	683b      	ldr	r3, [r7, #0]
   15348:	681b      	ldr	r3, [r3, #0]
   1534a:	429a      	cmp	r2, r3
   1534c:	d104      	bne.n	15358 <mp_obj_new_str_from_vstr+0x84>
        o->data = (byte*)vstr->buf;
   1534e:	683b      	ldr	r3, [r7, #0]
   15350:	689a      	ldr	r2, [r3, #8]
   15352:	68bb      	ldr	r3, [r7, #8]
   15354:	60da      	str	r2, [r3, #12]
   15356:	e00b      	b.n	15370 <mp_obj_new_str_from_vstr+0x9c>
    } else {
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
   15358:	683b      	ldr	r3, [r7, #0]
   1535a:	689a      	ldr	r2, [r3, #8]
   1535c:	683b      	ldr	r3, [r7, #0]
   1535e:	685b      	ldr	r3, [r3, #4]
   15360:	3301      	adds	r3, #1
   15362:	4619      	mov	r1, r3
   15364:	4610      	mov	r0, r2
   15366:	f7eb f80d 	bl	384 <m_realloc>
   1536a:	4602      	mov	r2, r0
   1536c:	68bb      	ldr	r3, [r7, #8]
   1536e:	60da      	str	r2, [r3, #12]
    }
    ((byte*)o->data)[o->len] = '\0'; // add null byte
   15370:	68bb      	ldr	r3, [r7, #8]
   15372:	68da      	ldr	r2, [r3, #12]
   15374:	68bb      	ldr	r3, [r7, #8]
   15376:	689b      	ldr	r3, [r3, #8]
   15378:	4413      	add	r3, r2
   1537a:	2200      	movs	r2, #0
   1537c:	701a      	strb	r2, [r3, #0]
    vstr->buf = NULL;
   1537e:	683b      	ldr	r3, [r7, #0]
   15380:	2200      	movs	r2, #0
   15382:	609a      	str	r2, [r3, #8]
    vstr->alloc = 0;
   15384:	683b      	ldr	r3, [r7, #0]
   15386:	2200      	movs	r2, #0
   15388:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   1538a:	68bb      	ldr	r3, [r7, #8]
}
   1538c:	4618      	mov	r0, r3
   1538e:	3710      	adds	r7, #16
   15390:	46bd      	mov	sp, r7
   15392:	bd80      	pop	{r7, pc}
   15394:	00021b30 	.word	0x00021b30

00015398 <mp_obj_new_str>:

mp_obj_t mp_obj_new_str(const char* data, size_t len) {
   15398:	b580      	push	{r7, lr}
   1539a:	b084      	sub	sp, #16
   1539c:	af00      	add	r7, sp, #0
   1539e:	6078      	str	r0, [r7, #4]
   153a0:	6039      	str	r1, [r7, #0]
    qstr q = qstr_find_strn(data, len);
   153a2:	6839      	ldr	r1, [r7, #0]
   153a4:	6878      	ldr	r0, [r7, #4]
   153a6:	f7eb fdf3 	bl	f90 <qstr_find_strn>
   153aa:	60f8      	str	r0, [r7, #12]
    if (q != MP_QSTR_NULL) {
   153ac:	68fb      	ldr	r3, [r7, #12]
   153ae:	2b00      	cmp	r3, #0
   153b0:	d004      	beq.n	153bc <mp_obj_new_str+0x24>
        // qstr with this data already exists
        return MP_OBJ_NEW_QSTR(q);
   153b2:	68fb      	ldr	r3, [r7, #12]
   153b4:	009b      	lsls	r3, r3, #2
   153b6:	f043 0302 	orr.w	r3, r3, #2
   153ba:	e005      	b.n	153c8 <mp_obj_new_str+0x30>
    } else {
        // no existing qstr, don't make one
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
   153bc:	683a      	ldr	r2, [r7, #0]
   153be:	6879      	ldr	r1, [r7, #4]
   153c0:	4803      	ldr	r0, [pc, #12]	; (153d0 <mp_obj_new_str+0x38>)
   153c2:	f7ff ff27 	bl	15214 <mp_obj_new_str_copy>
   153c6:	4603      	mov	r3, r0
    }
}
   153c8:	4618      	mov	r0, r3
   153ca:	3710      	adds	r7, #16
   153cc:	46bd      	mov	sp, r7
   153ce:	bd80      	pop	{r7, pc}
   153d0:	00021b30 	.word	0x00021b30

000153d4 <mp_obj_str_intern>:

mp_obj_t mp_obj_str_intern(mp_obj_t str) {
   153d4:	b580      	push	{r7, lr}
   153d6:	b084      	sub	sp, #16
   153d8:	af00      	add	r7, sp, #0
   153da:	6078      	str	r0, [r7, #4]
    GET_STR_DATA_LEN(str, data, len);
   153dc:	6878      	ldr	r0, [r7, #4]
   153de:	f7fc fef9 	bl	121d4 <MP_OBJ_IS_QSTR>
   153e2:	4603      	mov	r3, r0
   153e4:	2b00      	cmp	r3, #0
   153e6:	d009      	beq.n	153fc <mp_obj_str_intern+0x28>
   153e8:	687b      	ldr	r3, [r7, #4]
   153ea:	089b      	lsrs	r3, r3, #2
   153ec:	f107 0208 	add.w	r2, r7, #8
   153f0:	4611      	mov	r1, r2
   153f2:	4618      	mov	r0, r3
   153f4:	f7eb ff1a 	bl	122c <qstr_data>
   153f8:	60f8      	str	r0, [r7, #12]
   153fa:	e005      	b.n	15408 <mp_obj_str_intern+0x34>
   153fc:	687b      	ldr	r3, [r7, #4]
   153fe:	689b      	ldr	r3, [r3, #8]
   15400:	60bb      	str	r3, [r7, #8]
   15402:	687b      	ldr	r3, [r7, #4]
   15404:	68db      	ldr	r3, [r3, #12]
   15406:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   15408:	68bb      	ldr	r3, [r7, #8]
   1540a:	4619      	mov	r1, r3
   1540c:	68f8      	ldr	r0, [r7, #12]
   1540e:	f7ff ff4f 	bl	152b0 <mp_obj_new_str_via_qstr>
   15412:	4603      	mov	r3, r0
}
   15414:	4618      	mov	r0, r3
   15416:	3710      	adds	r7, #16
   15418:	46bd      	mov	sp, r7
   1541a:	bd80      	pop	{r7, pc}

0001541c <mp_obj_str_intern_checked>:

mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   1541c:	b580      	push	{r7, lr}
   1541e:	b084      	sub	sp, #16
   15420:	af00      	add	r7, sp, #0
   15422:	6078      	str	r0, [r7, #4]
    size_t len;
    const char *data = mp_obj_str_get_data(obj, &len);
   15424:	f107 0308 	add.w	r3, r7, #8
   15428:	4619      	mov	r1, r3
   1542a:	6878      	ldr	r0, [r7, #4]
   1542c:	f000 f916 	bl	1565c <mp_obj_str_get_data>
   15430:	60f8      	str	r0, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   15432:	68bb      	ldr	r3, [r7, #8]
   15434:	4619      	mov	r1, r3
   15436:	68f8      	ldr	r0, [r7, #12]
   15438:	f7ff ff3a 	bl	152b0 <mp_obj_new_str_via_qstr>
   1543c:	4603      	mov	r3, r0
}
   1543e:	4618      	mov	r0, r3
   15440:	3710      	adds	r7, #16
   15442:	46bd      	mov	sp, r7
   15444:	bd80      	pop	{r7, pc}
   15446:	bf00      	nop

00015448 <mp_obj_new_bytes>:

mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
   15448:	b580      	push	{r7, lr}
   1544a:	b082      	sub	sp, #8
   1544c:	af00      	add	r7, sp, #0
   1544e:	6078      	str	r0, [r7, #4]
   15450:	6039      	str	r1, [r7, #0]
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
   15452:	683a      	ldr	r2, [r7, #0]
   15454:	6879      	ldr	r1, [r7, #4]
   15456:	4804      	ldr	r0, [pc, #16]	; (15468 <mp_obj_new_bytes+0x20>)
   15458:	f7ff fedc 	bl	15214 <mp_obj_new_str_copy>
   1545c:	4603      	mov	r3, r0
}
   1545e:	4618      	mov	r0, r3
   15460:	3708      	adds	r7, #8
   15462:	46bd      	mov	sp, r7
   15464:	bd80      	pop	{r7, pc}
   15466:	bf00      	nop
   15468:	00021b6c 	.word	0x00021b6c

0001546c <mp_obj_str_equal>:

bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   1546c:	b580      	push	{r7, lr}
   1546e:	b088      	sub	sp, #32
   15470:	af00      	add	r7, sp, #0
   15472:	6078      	str	r0, [r7, #4]
   15474:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   15476:	6878      	ldr	r0, [r7, #4]
   15478:	f7fc feac 	bl	121d4 <MP_OBJ_IS_QSTR>
   1547c:	4603      	mov	r3, r0
   1547e:	2b00      	cmp	r3, #0
   15480:	d00d      	beq.n	1549e <mp_obj_str_equal+0x32>
   15482:	6838      	ldr	r0, [r7, #0]
   15484:	f7fc fea6 	bl	121d4 <MP_OBJ_IS_QSTR>
   15488:	4603      	mov	r3, r0
   1548a:	2b00      	cmp	r3, #0
   1548c:	d007      	beq.n	1549e <mp_obj_str_equal+0x32>
        return s1 == s2;
   1548e:	687a      	ldr	r2, [r7, #4]
   15490:	683b      	ldr	r3, [r7, #0]
   15492:	429a      	cmp	r2, r3
   15494:	bf0c      	ite	eq
   15496:	2301      	moveq	r3, #1
   15498:	2300      	movne	r3, #0
   1549a:	b2db      	uxtb	r3, r3
   1549c:	e069      	b.n	15572 <mp_obj_str_equal+0x106>
    } else {
        GET_STR_HASH(s1, h1);
   1549e:	6878      	ldr	r0, [r7, #4]
   154a0:	f7fc fe98 	bl	121d4 <MP_OBJ_IS_QSTR>
   154a4:	4603      	mov	r3, r0
   154a6:	2b00      	cmp	r3, #0
   154a8:	d006      	beq.n	154b8 <mp_obj_str_equal+0x4c>
   154aa:	687b      	ldr	r3, [r7, #4]
   154ac:	089b      	lsrs	r3, r3, #2
   154ae:	4618      	mov	r0, r3
   154b0:	f7eb fe90 	bl	11d4 <qstr_hash>
   154b4:	61f8      	str	r0, [r7, #28]
   154b6:	e002      	b.n	154be <mp_obj_str_equal+0x52>
   154b8:	687b      	ldr	r3, [r7, #4]
   154ba:	685b      	ldr	r3, [r3, #4]
   154bc:	61fb      	str	r3, [r7, #28]
        GET_STR_HASH(s2, h2);
   154be:	6838      	ldr	r0, [r7, #0]
   154c0:	f7fc fe88 	bl	121d4 <MP_OBJ_IS_QSTR>
   154c4:	4603      	mov	r3, r0
   154c6:	2b00      	cmp	r3, #0
   154c8:	d006      	beq.n	154d8 <mp_obj_str_equal+0x6c>
   154ca:	683b      	ldr	r3, [r7, #0]
   154cc:	089b      	lsrs	r3, r3, #2
   154ce:	4618      	mov	r0, r3
   154d0:	f7eb fe80 	bl	11d4 <qstr_hash>
   154d4:	61b8      	str	r0, [r7, #24]
   154d6:	e002      	b.n	154de <mp_obj_str_equal+0x72>
   154d8:	683b      	ldr	r3, [r7, #0]
   154da:	685b      	ldr	r3, [r3, #4]
   154dc:	61bb      	str	r3, [r7, #24]
        // If any of hashes is 0, it means it's not valid
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   154de:	69fb      	ldr	r3, [r7, #28]
   154e0:	2b00      	cmp	r3, #0
   154e2:	d008      	beq.n	154f6 <mp_obj_str_equal+0x8a>
   154e4:	69bb      	ldr	r3, [r7, #24]
   154e6:	2b00      	cmp	r3, #0
   154e8:	d005      	beq.n	154f6 <mp_obj_str_equal+0x8a>
   154ea:	69fa      	ldr	r2, [r7, #28]
   154ec:	69bb      	ldr	r3, [r7, #24]
   154ee:	429a      	cmp	r2, r3
   154f0:	d001      	beq.n	154f6 <mp_obj_str_equal+0x8a>
            return false;
   154f2:	2300      	movs	r3, #0
   154f4:	e03d      	b.n	15572 <mp_obj_str_equal+0x106>
        }
        GET_STR_DATA_LEN(s1, d1, l1);
   154f6:	6878      	ldr	r0, [r7, #4]
   154f8:	f7fc fe6c 	bl	121d4 <MP_OBJ_IS_QSTR>
   154fc:	4603      	mov	r3, r0
   154fe:	2b00      	cmp	r3, #0
   15500:	d009      	beq.n	15516 <mp_obj_str_equal+0xaa>
   15502:	687b      	ldr	r3, [r7, #4]
   15504:	089b      	lsrs	r3, r3, #2
   15506:	f107 020c 	add.w	r2, r7, #12
   1550a:	4611      	mov	r1, r2
   1550c:	4618      	mov	r0, r3
   1550e:	f7eb fe8d 	bl	122c <qstr_data>
   15512:	6178      	str	r0, [r7, #20]
   15514:	e005      	b.n	15522 <mp_obj_str_equal+0xb6>
   15516:	687b      	ldr	r3, [r7, #4]
   15518:	689b      	ldr	r3, [r3, #8]
   1551a:	60fb      	str	r3, [r7, #12]
   1551c:	687b      	ldr	r3, [r7, #4]
   1551e:	68db      	ldr	r3, [r3, #12]
   15520:	617b      	str	r3, [r7, #20]
        GET_STR_DATA_LEN(s2, d2, l2);
   15522:	6838      	ldr	r0, [r7, #0]
   15524:	f7fc fe56 	bl	121d4 <MP_OBJ_IS_QSTR>
   15528:	4603      	mov	r3, r0
   1552a:	2b00      	cmp	r3, #0
   1552c:	d009      	beq.n	15542 <mp_obj_str_equal+0xd6>
   1552e:	683b      	ldr	r3, [r7, #0]
   15530:	089b      	lsrs	r3, r3, #2
   15532:	f107 0208 	add.w	r2, r7, #8
   15536:	4611      	mov	r1, r2
   15538:	4618      	mov	r0, r3
   1553a:	f7eb fe77 	bl	122c <qstr_data>
   1553e:	6138      	str	r0, [r7, #16]
   15540:	e005      	b.n	1554e <mp_obj_str_equal+0xe2>
   15542:	683b      	ldr	r3, [r7, #0]
   15544:	689b      	ldr	r3, [r3, #8]
   15546:	60bb      	str	r3, [r7, #8]
   15548:	683b      	ldr	r3, [r7, #0]
   1554a:	68db      	ldr	r3, [r3, #12]
   1554c:	613b      	str	r3, [r7, #16]
        if (l1 != l2) {
   1554e:	68fa      	ldr	r2, [r7, #12]
   15550:	68bb      	ldr	r3, [r7, #8]
   15552:	429a      	cmp	r2, r3
   15554:	d001      	beq.n	1555a <mp_obj_str_equal+0xee>
            return false;
   15556:	2300      	movs	r3, #0
   15558:	e00b      	b.n	15572 <mp_obj_str_equal+0x106>
        }
        return memcmp(d1, d2, l1) == 0;
   1555a:	68fb      	ldr	r3, [r7, #12]
   1555c:	461a      	mov	r2, r3
   1555e:	6939      	ldr	r1, [r7, #16]
   15560:	6978      	ldr	r0, [r7, #20]
   15562:	f006 fcbf 	bl	1bee4 <memcmp>
   15566:	4603      	mov	r3, r0
   15568:	2b00      	cmp	r3, #0
   1556a:	bf0c      	ite	eq
   1556c:	2301      	moveq	r3, #1
   1556e:	2300      	movne	r3, #0
   15570:	b2db      	uxtb	r3, r3
    }
}
   15572:	4618      	mov	r0, r3
   15574:	3720      	adds	r7, #32
   15576:	46bd      	mov	sp, r7
   15578:	bd80      	pop	{r7, pc}
   1557a:	bf00      	nop

0001557c <bad_implicit_conversion>:

STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
   1557c:	b580      	push	{r7, lr}
   1557e:	b082      	sub	sp, #8
   15580:	af00      	add	r7, sp, #0
   15582:	6078      	str	r0, [r7, #4]
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("can't convert to str implicitly");
   15584:	4801      	ldr	r0, [pc, #4]	; (1558c <bad_implicit_conversion+0x10>)
   15586:	f7f7 fd07 	bl	cf98 <mp_raise_TypeError>
   1558a:	bf00      	nop
   1558c:	00021bbc 	.word	0x00021bbc

00015590 <mp_obj_str_get_qstr>:
    }
}

// use this if you will anyway convert the string to a qstr
// will be more efficient for the case where it's already a qstr
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   15590:	b580      	push	{r7, lr}
   15592:	b084      	sub	sp, #16
   15594:	af00      	add	r7, sp, #0
   15596:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_QSTR(self_in)) {
   15598:	6878      	ldr	r0, [r7, #4]
   1559a:	f7fc fe1b 	bl	121d4 <MP_OBJ_IS_QSTR>
   1559e:	4603      	mov	r3, r0
   155a0:	2b00      	cmp	r3, #0
   155a2:	d002      	beq.n	155aa <mp_obj_str_get_qstr+0x1a>
        return MP_OBJ_QSTR_VALUE(self_in);
   155a4:	687b      	ldr	r3, [r7, #4]
   155a6:	089b      	lsrs	r3, r3, #2
   155a8:	e019      	b.n	155de <mp_obj_str_get_qstr+0x4e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   155aa:	6878      	ldr	r0, [r7, #4]
   155ac:	f7fc fe24 	bl	121f8 <MP_OBJ_IS_OBJ>
   155b0:	4603      	mov	r3, r0
   155b2:	2b00      	cmp	r3, #0
   155b4:	d010      	beq.n	155d8 <mp_obj_str_get_qstr+0x48>
   155b6:	687b      	ldr	r3, [r7, #4]
   155b8:	681b      	ldr	r3, [r3, #0]
   155ba:	4a0b      	ldr	r2, [pc, #44]	; (155e8 <mp_obj_str_get_qstr+0x58>)
   155bc:	4293      	cmp	r3, r2
   155be:	d10b      	bne.n	155d8 <mp_obj_str_get_qstr+0x48>
        mp_obj_str_t *self = MP_OBJ_TO_PTR(self_in);
   155c0:	687b      	ldr	r3, [r7, #4]
   155c2:	60fb      	str	r3, [r7, #12]
        return qstr_from_strn((char*)self->data, self->len);
   155c4:	68fb      	ldr	r3, [r7, #12]
   155c6:	68da      	ldr	r2, [r3, #12]
   155c8:	68fb      	ldr	r3, [r7, #12]
   155ca:	689b      	ldr	r3, [r3, #8]
   155cc:	4619      	mov	r1, r3
   155ce:	4610      	mov	r0, r2
   155d0:	f7eb fd42 	bl	1058 <qstr_from_strn>
   155d4:	4603      	mov	r3, r0
   155d6:	e002      	b.n	155de <mp_obj_str_get_qstr+0x4e>
    } else {
        bad_implicit_conversion(self_in);
   155d8:	6878      	ldr	r0, [r7, #4]
   155da:	f7ff ffcf 	bl	1557c <bad_implicit_conversion>
    }
}
   155de:	4618      	mov	r0, r3
   155e0:	3710      	adds	r7, #16
   155e2:	46bd      	mov	sp, r7
   155e4:	bd80      	pop	{r7, pc}
   155e6:	bf00      	nop
   155e8:	00021b30 	.word	0x00021b30

000155ec <mp_obj_str_get_str>:

// only use this function if you need the str data to be zero terminated
// at the moment all strings are zero terminated to help with C ASCIIZ compatibility
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   155ec:	b580      	push	{r7, lr}
   155ee:	b084      	sub	sp, #16
   155f0:	af00      	add	r7, sp, #0
   155f2:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   155f4:	6878      	ldr	r0, [r7, #4]
   155f6:	f7fc fded 	bl	121d4 <MP_OBJ_IS_QSTR>
   155fa:	4603      	mov	r3, r0
   155fc:	2b00      	cmp	r3, #0
   155fe:	d10b      	bne.n	15618 <mp_obj_str_get_str+0x2c>
   15600:	6878      	ldr	r0, [r7, #4]
   15602:	f7fc fdf9 	bl	121f8 <MP_OBJ_IS_OBJ>
   15606:	4603      	mov	r3, r0
   15608:	2b00      	cmp	r3, #0
   1560a:	d01d      	beq.n	15648 <mp_obj_str_get_str+0x5c>
   1560c:	687b      	ldr	r3, [r7, #4]
   1560e:	681b      	ldr	r3, [r3, #0]
   15610:	699b      	ldr	r3, [r3, #24]
   15612:	4a11      	ldr	r2, [pc, #68]	; (15658 <mp_obj_str_get_str+0x6c>)
   15614:	4293      	cmp	r3, r2
   15616:	d117      	bne.n	15648 <mp_obj_str_get_str+0x5c>
        GET_STR_DATA_LEN(self_in, s, l);
   15618:	6878      	ldr	r0, [r7, #4]
   1561a:	f7fc fddb 	bl	121d4 <MP_OBJ_IS_QSTR>
   1561e:	4603      	mov	r3, r0
   15620:	2b00      	cmp	r3, #0
   15622:	d009      	beq.n	15638 <mp_obj_str_get_str+0x4c>
   15624:	687b      	ldr	r3, [r7, #4]
   15626:	089b      	lsrs	r3, r3, #2
   15628:	f107 0208 	add.w	r2, r7, #8
   1562c:	4611      	mov	r1, r2
   1562e:	4618      	mov	r0, r3
   15630:	f7eb fdfc 	bl	122c <qstr_data>
   15634:	60f8      	str	r0, [r7, #12]
   15636:	e005      	b.n	15644 <mp_obj_str_get_str+0x58>
   15638:	687b      	ldr	r3, [r7, #4]
   1563a:	689b      	ldr	r3, [r3, #8]
   1563c:	60bb      	str	r3, [r7, #8]
   1563e:	687b      	ldr	r3, [r7, #4]
   15640:	68db      	ldr	r3, [r3, #12]
   15642:	60fb      	str	r3, [r7, #12]
        (void)l; // len unused
        return (const char*)s;
   15644:	68fb      	ldr	r3, [r7, #12]
   15646:	e002      	b.n	1564e <mp_obj_str_get_str+0x62>
    } else {
        bad_implicit_conversion(self_in);
   15648:	6878      	ldr	r0, [r7, #4]
   1564a:	f7ff ff97 	bl	1557c <bad_implicit_conversion>
    }
}
   1564e:	4618      	mov	r0, r3
   15650:	3710      	adds	r7, #16
   15652:	46bd      	mov	sp, r7
   15654:	bd80      	pop	{r7, pc}
   15656:	bf00      	nop
   15658:	00012849 	.word	0x00012849

0001565c <mp_obj_str_get_data>:

const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   1565c:	b580      	push	{r7, lr}
   1565e:	b084      	sub	sp, #16
   15660:	af00      	add	r7, sp, #0
   15662:	6078      	str	r0, [r7, #4]
   15664:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   15666:	6878      	ldr	r0, [r7, #4]
   15668:	f7fc fdb4 	bl	121d4 <MP_OBJ_IS_QSTR>
   1566c:	4603      	mov	r3, r0
   1566e:	2b00      	cmp	r3, #0
   15670:	d10b      	bne.n	1568a <mp_obj_str_get_data+0x2e>
   15672:	6878      	ldr	r0, [r7, #4]
   15674:	f7fc fdc0 	bl	121f8 <MP_OBJ_IS_OBJ>
   15678:	4603      	mov	r3, r0
   1567a:	2b00      	cmp	r3, #0
   1567c:	d020      	beq.n	156c0 <mp_obj_str_get_data+0x64>
   1567e:	687b      	ldr	r3, [r7, #4]
   15680:	681b      	ldr	r3, [r3, #0]
   15682:	699b      	ldr	r3, [r3, #24]
   15684:	4a12      	ldr	r2, [pc, #72]	; (156d0 <mp_obj_str_get_data+0x74>)
   15686:	4293      	cmp	r3, r2
   15688:	d11a      	bne.n	156c0 <mp_obj_str_get_data+0x64>
        GET_STR_DATA_LEN(self_in, s, l);
   1568a:	6878      	ldr	r0, [r7, #4]
   1568c:	f7fc fda2 	bl	121d4 <MP_OBJ_IS_QSTR>
   15690:	4603      	mov	r3, r0
   15692:	2b00      	cmp	r3, #0
   15694:	d009      	beq.n	156aa <mp_obj_str_get_data+0x4e>
   15696:	687b      	ldr	r3, [r7, #4]
   15698:	089b      	lsrs	r3, r3, #2
   1569a:	f107 0208 	add.w	r2, r7, #8
   1569e:	4611      	mov	r1, r2
   156a0:	4618      	mov	r0, r3
   156a2:	f7eb fdc3 	bl	122c <qstr_data>
   156a6:	60f8      	str	r0, [r7, #12]
   156a8:	e005      	b.n	156b6 <mp_obj_str_get_data+0x5a>
   156aa:	687b      	ldr	r3, [r7, #4]
   156ac:	689b      	ldr	r3, [r3, #8]
   156ae:	60bb      	str	r3, [r7, #8]
   156b0:	687b      	ldr	r3, [r7, #4]
   156b2:	68db      	ldr	r3, [r3, #12]
   156b4:	60fb      	str	r3, [r7, #12]
        *len = l;
   156b6:	68ba      	ldr	r2, [r7, #8]
   156b8:	683b      	ldr	r3, [r7, #0]
   156ba:	601a      	str	r2, [r3, #0]
        return (const char*)s;
   156bc:	68fb      	ldr	r3, [r7, #12]
   156be:	e002      	b.n	156c6 <mp_obj_str_get_data+0x6a>
    } else {
        bad_implicit_conversion(self_in);
   156c0:	6878      	ldr	r0, [r7, #4]
   156c2:	f7ff ff5b 	bl	1557c <bad_implicit_conversion>
    }
}
   156c6:	4618      	mov	r0, r3
   156c8:	3710      	adds	r7, #16
   156ca:	46bd      	mov	sp, r7
   156cc:	bd80      	pop	{r7, pc}
   156ce:	bf00      	nop
   156d0:	00012849 	.word	0x00012849

000156d4 <str_it_iternext>:
    mp_obj_t str;
    size_t cur;
} mp_obj_str8_it_t;

#if !MICROPY_PY_BUILTINS_STR_UNICODE
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
   156d4:	b580      	push	{r7, lr}
   156d6:	b086      	sub	sp, #24
   156d8:	af00      	add	r7, sp, #0
   156da:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   156dc:	687b      	ldr	r3, [r7, #4]
   156de:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   156e0:	693b      	ldr	r3, [r7, #16]
   156e2:	689b      	ldr	r3, [r3, #8]
   156e4:	4618      	mov	r0, r3
   156e6:	f7fc fd75 	bl	121d4 <MP_OBJ_IS_QSTR>
   156ea:	4603      	mov	r3, r0
   156ec:	2b00      	cmp	r3, #0
   156ee:	d00a      	beq.n	15706 <str_it_iternext+0x32>
   156f0:	693b      	ldr	r3, [r7, #16]
   156f2:	689b      	ldr	r3, [r3, #8]
   156f4:	089b      	lsrs	r3, r3, #2
   156f6:	f107 0208 	add.w	r2, r7, #8
   156fa:	4611      	mov	r1, r2
   156fc:	4618      	mov	r0, r3
   156fe:	f7eb fd95 	bl	122c <qstr_data>
   15702:	6178      	str	r0, [r7, #20]
   15704:	e007      	b.n	15716 <str_it_iternext+0x42>
   15706:	693b      	ldr	r3, [r7, #16]
   15708:	689b      	ldr	r3, [r3, #8]
   1570a:	689b      	ldr	r3, [r3, #8]
   1570c:	60bb      	str	r3, [r7, #8]
   1570e:	693b      	ldr	r3, [r7, #16]
   15710:	689b      	ldr	r3, [r3, #8]
   15712:	68db      	ldr	r3, [r3, #12]
   15714:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15716:	693b      	ldr	r3, [r7, #16]
   15718:	68da      	ldr	r2, [r3, #12]
   1571a:	68bb      	ldr	r3, [r7, #8]
   1571c:	429a      	cmp	r2, r3
   1571e:	d20f      	bcs.n	15740 <str_it_iternext+0x6c>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
   15720:	693b      	ldr	r3, [r7, #16]
   15722:	68db      	ldr	r3, [r3, #12]
   15724:	697a      	ldr	r2, [r7, #20]
   15726:	4413      	add	r3, r2
   15728:	2101      	movs	r1, #1
   1572a:	4618      	mov	r0, r3
   1572c:	f7ff fdc0 	bl	152b0 <mp_obj_new_str_via_qstr>
   15730:	60f8      	str	r0, [r7, #12]
        self->cur += 1;
   15732:	693b      	ldr	r3, [r7, #16]
   15734:	68db      	ldr	r3, [r3, #12]
   15736:	1c5a      	adds	r2, r3, #1
   15738:	693b      	ldr	r3, [r7, #16]
   1573a:	60da      	str	r2, [r3, #12]
        return o_out;
   1573c:	68fb      	ldr	r3, [r7, #12]
   1573e:	e000      	b.n	15742 <str_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15740:	2304      	movs	r3, #4
    }
}
   15742:	4618      	mov	r0, r3
   15744:	3718      	adds	r7, #24
   15746:	46bd      	mov	sp, r7
   15748:	bd80      	pop	{r7, pc}
   1574a:	bf00      	nop

0001574c <mp_obj_new_str_iterator>:

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   1574c:	b480      	push	{r7}
   1574e:	b085      	sub	sp, #20
   15750:	af00      	add	r7, sp, #0
   15752:	6078      	str	r0, [r7, #4]
   15754:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15756:	683b      	ldr	r3, [r7, #0]
   15758:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   1575a:	68fb      	ldr	r3, [r7, #12]
   1575c:	4a08      	ldr	r2, [pc, #32]	; (15780 <mp_obj_new_str_iterator+0x34>)
   1575e:	601a      	str	r2, [r3, #0]
    o->iternext = str_it_iternext;
   15760:	68fb      	ldr	r3, [r7, #12]
   15762:	4a08      	ldr	r2, [pc, #32]	; (15784 <mp_obj_new_str_iterator+0x38>)
   15764:	605a      	str	r2, [r3, #4]
    o->str = str;
   15766:	68fb      	ldr	r3, [r7, #12]
   15768:	687a      	ldr	r2, [r7, #4]
   1576a:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   1576c:	68fb      	ldr	r3, [r7, #12]
   1576e:	2200      	movs	r2, #0
   15770:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15772:	68fb      	ldr	r3, [r7, #12]
}
   15774:	4618      	mov	r0, r3
   15776:	3714      	adds	r7, #20
   15778:	46bd      	mov	sp, r7
   1577a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1577e:	4770      	bx	lr
   15780:	00021400 	.word	0x00021400
   15784:	000156d5 	.word	0x000156d5

00015788 <bytes_it_iternext>:
#endif

STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
   15788:	b580      	push	{r7, lr}
   1578a:	b086      	sub	sp, #24
   1578c:	af00      	add	r7, sp, #0
   1578e:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15790:	687b      	ldr	r3, [r7, #4]
   15792:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   15794:	693b      	ldr	r3, [r7, #16]
   15796:	689b      	ldr	r3, [r3, #8]
   15798:	4618      	mov	r0, r3
   1579a:	f7fc fd1b 	bl	121d4 <MP_OBJ_IS_QSTR>
   1579e:	4603      	mov	r3, r0
   157a0:	2b00      	cmp	r3, #0
   157a2:	d00a      	beq.n	157ba <bytes_it_iternext+0x32>
   157a4:	693b      	ldr	r3, [r7, #16]
   157a6:	689b      	ldr	r3, [r3, #8]
   157a8:	089b      	lsrs	r3, r3, #2
   157aa:	f107 0208 	add.w	r2, r7, #8
   157ae:	4611      	mov	r1, r2
   157b0:	4618      	mov	r0, r3
   157b2:	f7eb fd3b 	bl	122c <qstr_data>
   157b6:	6178      	str	r0, [r7, #20]
   157b8:	e007      	b.n	157ca <bytes_it_iternext+0x42>
   157ba:	693b      	ldr	r3, [r7, #16]
   157bc:	689b      	ldr	r3, [r3, #8]
   157be:	689b      	ldr	r3, [r3, #8]
   157c0:	60bb      	str	r3, [r7, #8]
   157c2:	693b      	ldr	r3, [r7, #16]
   157c4:	689b      	ldr	r3, [r3, #8]
   157c6:	68db      	ldr	r3, [r3, #12]
   157c8:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   157ca:	693b      	ldr	r3, [r7, #16]
   157cc:	68da      	ldr	r2, [r3, #12]
   157ce:	68bb      	ldr	r3, [r7, #8]
   157d0:	429a      	cmp	r2, r3
   157d2:	d20f      	bcs.n	157f4 <bytes_it_iternext+0x6c>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
   157d4:	693b      	ldr	r3, [r7, #16]
   157d6:	68db      	ldr	r3, [r3, #12]
   157d8:	697a      	ldr	r2, [r7, #20]
   157da:	4413      	add	r3, r2
   157dc:	781b      	ldrb	r3, [r3, #0]
   157de:	005b      	lsls	r3, r3, #1
   157e0:	f043 0301 	orr.w	r3, r3, #1
   157e4:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   157e6:	693b      	ldr	r3, [r7, #16]
   157e8:	68db      	ldr	r3, [r3, #12]
   157ea:	1c5a      	adds	r2, r3, #1
   157ec:	693b      	ldr	r3, [r7, #16]
   157ee:	60da      	str	r2, [r3, #12]
        return o_out;
   157f0:	68fb      	ldr	r3, [r7, #12]
   157f2:	e000      	b.n	157f6 <bytes_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   157f4:	2304      	movs	r3, #4
    }
}
   157f6:	4618      	mov	r0, r3
   157f8:	3718      	adds	r7, #24
   157fa:	46bd      	mov	sp, r7
   157fc:	bd80      	pop	{r7, pc}
   157fe:	bf00      	nop

00015800 <mp_obj_new_bytes_iterator>:

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15800:	b480      	push	{r7}
   15802:	b085      	sub	sp, #20
   15804:	af00      	add	r7, sp, #0
   15806:	6078      	str	r0, [r7, #4]
   15808:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   1580a:	683b      	ldr	r3, [r7, #0]
   1580c:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   1580e:	68fb      	ldr	r3, [r7, #12]
   15810:	4a08      	ldr	r2, [pc, #32]	; (15834 <mp_obj_new_bytes_iterator+0x34>)
   15812:	601a      	str	r2, [r3, #0]
    o->iternext = bytes_it_iternext;
   15814:	68fb      	ldr	r3, [r7, #12]
   15816:	4a08      	ldr	r2, [pc, #32]	; (15838 <mp_obj_new_bytes_iterator+0x38>)
   15818:	605a      	str	r2, [r3, #4]
    o->str = str;
   1581a:	68fb      	ldr	r3, [r7, #12]
   1581c:	687a      	ldr	r2, [r7, #4]
   1581e:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15820:	68fb      	ldr	r3, [r7, #12]
   15822:	2200      	movs	r2, #0
   15824:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15826:	68fb      	ldr	r3, [r7, #12]
}
   15828:	4618      	mov	r0, r3
   1582a:	3714      	adds	r7, #20
   1582c:	46bd      	mov	sp, r7
   1582e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15832:	4770      	bx	lr
   15834:	00021400 	.word	0x00021400
   15838:	00015789 	.word	0x00015789

0001583c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1583c:	b480      	push	{r7}
   1583e:	b083      	sub	sp, #12
   15840:	af00      	add	r7, sp, #0
   15842:	6078      	str	r0, [r7, #4]
   15844:	687b      	ldr	r3, [r7, #4]
   15846:	f003 0303 	and.w	r3, r3, #3
   1584a:	2b00      	cmp	r3, #0
   1584c:	bf0c      	ite	eq
   1584e:	2301      	moveq	r3, #1
   15850:	2300      	movne	r3, #0
   15852:	b2db      	uxtb	r3, r3
   15854:	4618      	mov	r0, r3
   15856:	370c      	adds	r7, #12
   15858:	46bd      	mov	sp, r7
   1585a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1585e:	4770      	bx	lr

00015860 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   15860:	b480      	push	{r7}
   15862:	b083      	sub	sp, #12
   15864:	af00      	add	r7, sp, #0
   15866:	6078      	str	r0, [r7, #4]
   15868:	687b      	ldr	r3, [r7, #4]
   1586a:	2b00      	cmp	r3, #0
   1586c:	d001      	beq.n	15872 <mp_obj_new_bool+0x12>
   1586e:	4b04      	ldr	r3, [pc, #16]	; (15880 <mp_obj_new_bool+0x20>)
   15870:	e000      	b.n	15874 <mp_obj_new_bool+0x14>
   15872:	4b04      	ldr	r3, [pc, #16]	; (15884 <mp_obj_new_bool+0x24>)
   15874:	4618      	mov	r0, r3
   15876:	370c      	adds	r7, #12
   15878:	46bd      	mov	sp, r7
   1587a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1587e:	4770      	bx	lr
   15880:	0001fc3c 	.word	0x0001fc3c
   15884:	0001fc34 	.word	0x0001fc34

00015888 <mp_obj_tuple_print>:
#include "py/runtime.h"

/******************************************************************************/
/* tuple                                                                      */

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   15888:	b580      	push	{r7, lr}
   1588a:	b086      	sub	sp, #24
   1588c:	af00      	add	r7, sp, #0
   1588e:	60f8      	str	r0, [r7, #12]
   15890:	60b9      	str	r1, [r7, #8]
   15892:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(o_in);
   15894:	68bb      	ldr	r3, [r7, #8]
   15896:	613b      	str	r3, [r7, #16]
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "[");
    } else {
        mp_print_str(print, "(");
   15898:	4918      	ldr	r1, [pc, #96]	; (158fc <mp_obj_tuple_print+0x74>)
   1589a:	68f8      	ldr	r0, [r7, #12]
   1589c:	f7eb fffc 	bl	1898 <mp_print_str>
        kind = PRINT_REPR;
   158a0:	2301      	movs	r3, #1
   158a2:	607b      	str	r3, [r7, #4]
    }
    for (size_t i = 0; i < o->len; i++) {
   158a4:	2300      	movs	r3, #0
   158a6:	617b      	str	r3, [r7, #20]
   158a8:	e013      	b.n	158d2 <mp_obj_tuple_print+0x4a>
        if (i > 0) {
   158aa:	697b      	ldr	r3, [r7, #20]
   158ac:	2b00      	cmp	r3, #0
   158ae:	d003      	beq.n	158b8 <mp_obj_tuple_print+0x30>
            mp_print_str(print, ", ");
   158b0:	4913      	ldr	r1, [pc, #76]	; (15900 <mp_obj_tuple_print+0x78>)
   158b2:	68f8      	ldr	r0, [r7, #12]
   158b4:	f7eb fff0 	bl	1898 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   158b8:	693b      	ldr	r3, [r7, #16]
   158ba:	697a      	ldr	r2, [r7, #20]
   158bc:	3202      	adds	r2, #2
   158be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   158c2:	687a      	ldr	r2, [r7, #4]
   158c4:	4619      	mov	r1, r3
   158c6:	68f8      	ldr	r0, [r7, #12]
   158c8:	f7f7 ffb2 	bl	d830 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   158cc:	697b      	ldr	r3, [r7, #20]
   158ce:	3301      	adds	r3, #1
   158d0:	617b      	str	r3, [r7, #20]
   158d2:	693b      	ldr	r3, [r7, #16]
   158d4:	685a      	ldr	r2, [r3, #4]
   158d6:	697b      	ldr	r3, [r7, #20]
   158d8:	429a      	cmp	r2, r3
   158da:	d8e6      	bhi.n	158aa <mp_obj_tuple_print+0x22>
    }
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "]");
    } else {
        if (o->len == 1) {
   158dc:	693b      	ldr	r3, [r7, #16]
   158de:	685b      	ldr	r3, [r3, #4]
   158e0:	2b01      	cmp	r3, #1
   158e2:	d103      	bne.n	158ec <mp_obj_tuple_print+0x64>
            mp_print_str(print, ",");
   158e4:	4907      	ldr	r1, [pc, #28]	; (15904 <mp_obj_tuple_print+0x7c>)
   158e6:	68f8      	ldr	r0, [r7, #12]
   158e8:	f7eb ffd6 	bl	1898 <mp_print_str>
        }
        mp_print_str(print, ")");
   158ec:	4906      	ldr	r1, [pc, #24]	; (15908 <mp_obj_tuple_print+0x80>)
   158ee:	68f8      	ldr	r0, [r7, #12]
   158f0:	f7eb ffd2 	bl	1898 <mp_print_str>
    }
}
   158f4:	bf00      	nop
   158f6:	3718      	adds	r7, #24
   158f8:	46bd      	mov	sp, r7
   158fa:	bd80      	pop	{r7, pc}
   158fc:	00021c68 	.word	0x00021c68
   15900:	00021c6c 	.word	0x00021c6c
   15904:	00021c70 	.word	0x00021c70
   15908:	00021c74 	.word	0x00021c74

0001590c <mp_obj_tuple_make_new>:

STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1590c:	b580      	push	{r7, lr}
   1590e:	b08c      	sub	sp, #48	; 0x30
   15910:	af02      	add	r7, sp, #8
   15912:	60f8      	str	r0, [r7, #12]
   15914:	60b9      	str	r1, [r7, #8]
   15916:	607a      	str	r2, [r7, #4]
   15918:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   1591a:	2300      	movs	r3, #0
   1591c:	9300      	str	r3, [sp, #0]
   1591e:	2301      	movs	r3, #1
   15920:	2200      	movs	r2, #0
   15922:	6879      	ldr	r1, [r7, #4]
   15924:	68b8      	ldr	r0, [r7, #8]
   15926:	f7f7 fb5d 	bl	cfe4 <mp_arg_check_num>

    switch (n_args) {
   1592a:	68bb      	ldr	r3, [r7, #8]
   1592c:	2b00      	cmp	r3, #0
   1592e:	d101      	bne.n	15934 <mp_obj_tuple_make_new+0x28>
        case 0:
            // return a empty tuple
            return mp_const_empty_tuple;
   15930:	4b27      	ldr	r3, [pc, #156]	; (159d0 <mp_obj_tuple_make_new+0xc4>)
   15932:	e048      	b.n	159c6 <mp_obj_tuple_make_new+0xba>

        case 1:
        default: {
            // 1 argument, an iterable from which we make a new tuple
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   15934:	683b      	ldr	r3, [r7, #0]
   15936:	681b      	ldr	r3, [r3, #0]
   15938:	4618      	mov	r0, r3
   1593a:	f7ff ff7f 	bl	1583c <MP_OBJ_IS_OBJ>
   1593e:	4603      	mov	r3, r0
   15940:	2b00      	cmp	r3, #0
   15942:	d008      	beq.n	15956 <mp_obj_tuple_make_new+0x4a>
   15944:	683b      	ldr	r3, [r7, #0]
   15946:	681b      	ldr	r3, [r3, #0]
   15948:	681b      	ldr	r3, [r3, #0]
   1594a:	4a22      	ldr	r2, [pc, #136]	; (159d4 <mp_obj_tuple_make_new+0xc8>)
   1594c:	4293      	cmp	r3, r2
   1594e:	d102      	bne.n	15956 <mp_obj_tuple_make_new+0x4a>
                return args[0];
   15950:	683b      	ldr	r3, [r7, #0]
   15952:	681b      	ldr	r3, [r3, #0]
   15954:	e037      	b.n	159c6 <mp_obj_tuple_make_new+0xba>
            }

            // TODO optimise for cases where we know the length of the iterator

            size_t alloc = 4;
   15956:	2304      	movs	r3, #4
   15958:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len = 0;
   1595a:	2300      	movs	r3, #0
   1595c:	623b      	str	r3, [r7, #32]
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   1595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15960:	009b      	lsls	r3, r3, #2
   15962:	4618      	mov	r0, r3
   15964:	f7ea fcda 	bl	31c <m_malloc>
   15968:	61f8      	str	r0, [r7, #28]

            mp_obj_t iterable = mp_getiter(args[0], NULL);
   1596a:	683b      	ldr	r3, [r7, #0]
   1596c:	681b      	ldr	r3, [r3, #0]
   1596e:	2100      	movs	r1, #0
   15970:	4618      	mov	r0, r3
   15972:	f7f6 ffc3 	bl	c8fc <mp_getiter>
   15976:	61b8      	str	r0, [r7, #24]
            mp_obj_t item;
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15978:	e015      	b.n	159a6 <mp_obj_tuple_make_new+0x9a>
                if (len >= alloc) {
   1597a:	6a3a      	ldr	r2, [r7, #32]
   1597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1597e:	429a      	cmp	r2, r3
   15980:	d309      	bcc.n	15996 <mp_obj_tuple_make_new+0x8a>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   15982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15984:	00db      	lsls	r3, r3, #3
   15986:	4619      	mov	r1, r3
   15988:	69f8      	ldr	r0, [r7, #28]
   1598a:	f7ea fcfb 	bl	384 <m_realloc>
   1598e:	61f8      	str	r0, [r7, #28]
                    alloc *= 2;
   15990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15992:	005b      	lsls	r3, r3, #1
   15994:	627b      	str	r3, [r7, #36]	; 0x24
                }
                items[len++] = item;
   15996:	6a3b      	ldr	r3, [r7, #32]
   15998:	1c5a      	adds	r2, r3, #1
   1599a:	623a      	str	r2, [r7, #32]
   1599c:	009b      	lsls	r3, r3, #2
   1599e:	69fa      	ldr	r2, [r7, #28]
   159a0:	4413      	add	r3, r2
   159a2:	697a      	ldr	r2, [r7, #20]
   159a4:	601a      	str	r2, [r3, #0]
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   159a6:	69b8      	ldr	r0, [r7, #24]
   159a8:	f7f7 f82a 	bl	ca00 <mp_iternext>
   159ac:	6178      	str	r0, [r7, #20]
   159ae:	697b      	ldr	r3, [r7, #20]
   159b0:	2b04      	cmp	r3, #4
   159b2:	d1e2      	bne.n	1597a <mp_obj_tuple_make_new+0x6e>
            }

            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   159b4:	69f9      	ldr	r1, [r7, #28]
   159b6:	6a38      	ldr	r0, [r7, #32]
   159b8:	f000 f9f4 	bl	15da4 <mp_obj_new_tuple>
   159bc:	6138      	str	r0, [r7, #16]
            m_del(mp_obj_t, items, alloc);
   159be:	69f8      	ldr	r0, [r7, #28]
   159c0:	f7ea fd0e 	bl	3e0 <m_free>

            return tuple;
   159c4:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   159c6:	4618      	mov	r0, r3
   159c8:	3728      	adds	r7, #40	; 0x28
   159ca:	46bd      	mov	sp, r7
   159cc:	bd80      	pop	{r7, pc}
   159ce:	bf00      	nop
   159d0:	00021df0 	.word	0x00021df0
   159d4:	00021db4 	.word	0x00021db4

000159d8 <tuple_cmp_helper>:

// Don't pass MP_BINARY_OP_NOT_EQUAL here
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   159d8:	b580      	push	{r7, lr}
   159da:	b08a      	sub	sp, #40	; 0x28
   159dc:	af02      	add	r7, sp, #8
   159de:	60f8      	str	r0, [r7, #12]
   159e0:	60b9      	str	r1, [r7, #8]
   159e2:	607a      	str	r2, [r7, #4]
    // type check is done on getiter method to allow tuple, namedtuple, attrtuple
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   159e4:	68b8      	ldr	r0, [r7, #8]
   159e6:	f7f7 fef1 	bl	d7cc <mp_obj_get_type>
   159ea:	4603      	mov	r3, r0
   159ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   159ee:	4a1e      	ldr	r2, [pc, #120]	; (15a68 <tuple_cmp_helper+0x90>)
   159f0:	4293      	cmp	r3, r2
   159f2:	d005      	beq.n	15a00 <tuple_cmp_helper+0x28>
   159f4:	4b1d      	ldr	r3, [pc, #116]	; (15a6c <tuple_cmp_helper+0x94>)
   159f6:	4a1e      	ldr	r2, [pc, #120]	; (15a70 <tuple_cmp_helper+0x98>)
   159f8:	2168      	movs	r1, #104	; 0x68
   159fa:	481e      	ldr	r0, [pc, #120]	; (15a74 <tuple_cmp_helper+0x9c>)
   159fc:	f005 fcce 	bl	1b39c <__assert_func>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   15a00:	6878      	ldr	r0, [r7, #4]
   15a02:	f7f7 fee3 	bl	d7cc <mp_obj_get_type>
   15a06:	61f8      	str	r0, [r7, #28]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15a08:	68bb      	ldr	r3, [r7, #8]
   15a0a:	61bb      	str	r3, [r7, #24]
    if (another_type->getiter != mp_obj_tuple_getiter) {
   15a0c:	69fb      	ldr	r3, [r7, #28]
   15a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a10:	4a15      	ldr	r2, [pc, #84]	; (15a68 <tuple_cmp_helper+0x90>)
   15a12:	4293      	cmp	r3, r2
   15a14:	d00e      	beq.n	15a34 <tuple_cmp_helper+0x5c>
        // Slow path for user subclasses
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   15a16:	4918      	ldr	r1, [pc, #96]	; (15a78 <tuple_cmp_helper+0xa0>)
   15a18:	6878      	ldr	r0, [r7, #4]
   15a1a:	f001 fd41 	bl	174a0 <mp_instance_cast_to_native_base>
   15a1e:	6078      	str	r0, [r7, #4]
        if (another_in == MP_OBJ_NULL) {
   15a20:	687b      	ldr	r3, [r7, #4]
   15a22:	2b00      	cmp	r3, #0
   15a24:	d106      	bne.n	15a34 <tuple_cmp_helper+0x5c>
            if (op == MP_BINARY_OP_EQUAL) {
   15a26:	68fb      	ldr	r3, [r7, #12]
   15a28:	2b02      	cmp	r3, #2
   15a2a:	d101      	bne.n	15a30 <tuple_cmp_helper+0x58>
                return mp_const_false;
   15a2c:	4b13      	ldr	r3, [pc, #76]	; (15a7c <tuple_cmp_helper+0xa4>)
   15a2e:	e017      	b.n	15a60 <tuple_cmp_helper+0x88>
            }
            return MP_OBJ_NULL;
   15a30:	2300      	movs	r3, #0
   15a32:	e015      	b.n	15a60 <tuple_cmp_helper+0x88>
        }
    }
    mp_obj_tuple_t *another = MP_OBJ_TO_PTR(another_in);
   15a34:	687b      	ldr	r3, [r7, #4]
   15a36:	617b      	str	r3, [r7, #20]

    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   15a38:	69bb      	ldr	r3, [r7, #24]
   15a3a:	f103 0108 	add.w	r1, r3, #8
   15a3e:	69bb      	ldr	r3, [r7, #24]
   15a40:	685a      	ldr	r2, [r3, #4]
   15a42:	697b      	ldr	r3, [r7, #20]
   15a44:	f103 0008 	add.w	r0, r3, #8
   15a48:	697b      	ldr	r3, [r7, #20]
   15a4a:	685b      	ldr	r3, [r3, #4]
   15a4c:	9300      	str	r3, [sp, #0]
   15a4e:	4603      	mov	r3, r0
   15a50:	68f8      	ldr	r0, [r7, #12]
   15a52:	f001 ff33 	bl	178bc <mp_seq_cmp_objs>
   15a56:	4603      	mov	r3, r0
   15a58:	4618      	mov	r0, r3
   15a5a:	f7ff ff01 	bl	15860 <mp_obj_new_bool>
   15a5e:	4603      	mov	r3, r0
}
   15a60:	4618      	mov	r0, r3
   15a62:	3720      	adds	r7, #32
   15a64:	46bd      	mov	sp, r7
   15a66:	bd80      	pop	{r7, pc}
   15a68:	00015f15 	.word	0x00015f15
   15a6c:	00021c78 	.word	0x00021c78
   15a70:	00021e20 	.word	0x00021e20
   15a74:	00021cb4 	.word	0x00021cb4
   15a78:	00021db4 	.word	0x00021db4
   15a7c:	0001fc34 	.word	0x0001fc34

00015a80 <mp_obj_tuple_unary_op>:

mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   15a80:	b580      	push	{r7, lr}
   15a82:	b086      	sub	sp, #24
   15a84:	af00      	add	r7, sp, #0
   15a86:	6078      	str	r0, [r7, #4]
   15a88:	6039      	str	r1, [r7, #0]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15a8a:	683b      	ldr	r3, [r7, #0]
   15a8c:	60fb      	str	r3, [r7, #12]
    switch (op) {
   15a8e:	687b      	ldr	r3, [r7, #4]
   15a90:	2b05      	cmp	r3, #5
   15a92:	d02f      	beq.n	15af4 <mp_obj_tuple_unary_op+0x74>
   15a94:	2b06      	cmp	r3, #6
   15a96:	d00d      	beq.n	15ab4 <mp_obj_tuple_unary_op+0x34>
   15a98:	2b04      	cmp	r3, #4
   15a9a:	d131      	bne.n	15b00 <mp_obj_tuple_unary_op+0x80>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   15a9c:	68fb      	ldr	r3, [r7, #12]
   15a9e:	685b      	ldr	r3, [r3, #4]
   15aa0:	2b00      	cmp	r3, #0
   15aa2:	bf14      	ite	ne
   15aa4:	2301      	movne	r3, #1
   15aa6:	2300      	moveq	r3, #0
   15aa8:	b2db      	uxtb	r3, r3
   15aaa:	4618      	mov	r0, r3
   15aac:	f7ff fed8 	bl	15860 <mp_obj_new_bool>
   15ab0:	4603      	mov	r3, r0
   15ab2:	e026      	b.n	15b02 <mp_obj_tuple_unary_op+0x82>
        case MP_UNARY_OP_HASH: {
            // start hash with pointer to empty tuple, to make it fairly unique
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   15ab4:	4b15      	ldr	r3, [pc, #84]	; (15b0c <mp_obj_tuple_unary_op+0x8c>)
   15ab6:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15ab8:	2300      	movs	r3, #0
   15aba:	613b      	str	r3, [r7, #16]
   15abc:	e010      	b.n	15ae0 <mp_obj_tuple_unary_op+0x60>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   15abe:	68fb      	ldr	r3, [r7, #12]
   15ac0:	693a      	ldr	r2, [r7, #16]
   15ac2:	3202      	adds	r2, #2
   15ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ac8:	4619      	mov	r1, r3
   15aca:	2006      	movs	r0, #6
   15acc:	f7f5 fe24 	bl	b718 <mp_unary_op>
   15ad0:	4603      	mov	r3, r0
   15ad2:	105b      	asrs	r3, r3, #1
   15ad4:	697a      	ldr	r2, [r7, #20]
   15ad6:	4413      	add	r3, r2
   15ad8:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15ada:	693b      	ldr	r3, [r7, #16]
   15adc:	3301      	adds	r3, #1
   15ade:	613b      	str	r3, [r7, #16]
   15ae0:	68fb      	ldr	r3, [r7, #12]
   15ae2:	685a      	ldr	r2, [r3, #4]
   15ae4:	693b      	ldr	r3, [r7, #16]
   15ae6:	429a      	cmp	r2, r3
   15ae8:	d8e9      	bhi.n	15abe <mp_obj_tuple_unary_op+0x3e>
            }
            return MP_OBJ_NEW_SMALL_INT(hash);
   15aea:	697b      	ldr	r3, [r7, #20]
   15aec:	005b      	lsls	r3, r3, #1
   15aee:	f043 0301 	orr.w	r3, r3, #1
   15af2:	e006      	b.n	15b02 <mp_obj_tuple_unary_op+0x82>
        }
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   15af4:	68fb      	ldr	r3, [r7, #12]
   15af6:	685b      	ldr	r3, [r3, #4]
   15af8:	005b      	lsls	r3, r3, #1
   15afa:	f043 0301 	orr.w	r3, r3, #1
   15afe:	e000      	b.n	15b02 <mp_obj_tuple_unary_op+0x82>
        default: return MP_OBJ_NULL; // op not supported
   15b00:	2300      	movs	r3, #0
    }
}
   15b02:	4618      	mov	r0, r3
   15b04:	3718      	adds	r7, #24
   15b06:	46bd      	mov	sp, r7
   15b08:	bd80      	pop	{r7, pc}
   15b0a:	bf00      	nop
   15b0c:	00021df0 	.word	0x00021df0

00015b10 <mp_obj_tuple_binary_op>:

mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   15b10:	b580      	push	{r7, lr}
   15b12:	b08c      	sub	sp, #48	; 0x30
   15b14:	af02      	add	r7, sp, #8
   15b16:	60f8      	str	r0, [r7, #12]
   15b18:	60b9      	str	r1, [r7, #8]
   15b1a:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(lhs);
   15b1c:	68bb      	ldr	r3, [r7, #8]
   15b1e:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
   15b20:	68fb      	ldr	r3, [r7, #12]
   15b22:	2b1c      	cmp	r3, #28
   15b24:	f200 80ac 	bhi.w	15c80 <mp_obj_tuple_binary_op+0x170>
   15b28:	a201      	add	r2, pc, #4	; (adr r2, 15b30 <mp_obj_tuple_binary_op+0x20>)
   15b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15b2e:	bf00      	nop
   15b30:	00015c73 	.word	0x00015c73
   15b34:	00015c73 	.word	0x00015c73
   15b38:	00015c73 	.word	0x00015c73
   15b3c:	00015c73 	.word	0x00015c73
   15b40:	00015c73 	.word	0x00015c73
   15b44:	00015c81 	.word	0x00015c81
   15b48:	00015c81 	.word	0x00015c81
   15b4c:	00015c81 	.word	0x00015c81
   15b50:	00015c81 	.word	0x00015c81
   15b54:	00015c81 	.word	0x00015c81
   15b58:	00015c81 	.word	0x00015c81
   15b5c:	00015c81 	.word	0x00015c81
   15b60:	00015c81 	.word	0x00015c81
   15b64:	00015c81 	.word	0x00015c81
   15b68:	00015ba5 	.word	0x00015ba5
   15b6c:	00015c81 	.word	0x00015c81
   15b70:	00015c19 	.word	0x00015c19
   15b74:	00015c81 	.word	0x00015c81
   15b78:	00015c81 	.word	0x00015c81
   15b7c:	00015c81 	.word	0x00015c81
   15b80:	00015c81 	.word	0x00015c81
   15b84:	00015c81 	.word	0x00015c81
   15b88:	00015c81 	.word	0x00015c81
   15b8c:	00015c81 	.word	0x00015c81
   15b90:	00015c81 	.word	0x00015c81
   15b94:	00015c81 	.word	0x00015c81
   15b98:	00015ba5 	.word	0x00015ba5
   15b9c:	00015c81 	.word	0x00015c81
   15ba0:	00015c19 	.word	0x00015c19
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   15ba4:	6878      	ldr	r0, [r7, #4]
   15ba6:	f7f7 fe11 	bl	d7cc <mp_obj_get_type>
   15baa:	4603      	mov	r3, r0
   15bac:	4937      	ldr	r1, [pc, #220]	; (15c8c <mp_obj_tuple_binary_op+0x17c>)
   15bae:	4618      	mov	r0, r3
   15bb0:	f001 fb84 	bl	172bc <mp_obj_is_subclass_fast>
   15bb4:	4603      	mov	r3, r0
   15bb6:	f083 0301 	eor.w	r3, r3, #1
   15bba:	b2db      	uxtb	r3, r3
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d001      	beq.n	15bc4 <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   15bc0:	2300      	movs	r3, #0
   15bc2:	e05e      	b.n	15c82 <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *p = MP_OBJ_TO_PTR(rhs);
   15bc4:	687b      	ldr	r3, [r7, #4]
   15bc6:	623b      	str	r3, [r7, #32]
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   15bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15bca:	685a      	ldr	r2, [r3, #4]
   15bcc:	6a3b      	ldr	r3, [r7, #32]
   15bce:	685b      	ldr	r3, [r3, #4]
   15bd0:	4413      	add	r3, r2
   15bd2:	2100      	movs	r1, #0
   15bd4:	4618      	mov	r0, r3
   15bd6:	f000 f8e5 	bl	15da4 <mp_obj_new_tuple>
   15bda:	61f8      	str	r0, [r7, #28]
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   15bdc:	69fb      	ldr	r3, [r7, #28]
   15bde:	f103 0008 	add.w	r0, r3, #8
   15be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15be4:	f103 0108 	add.w	r1, r3, #8
   15be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15bea:	685b      	ldr	r3, [r3, #4]
   15bec:	009b      	lsls	r3, r3, #2
   15bee:	461a      	mov	r2, r3
   15bf0:	f006 f890 	bl	1bd14 <memcpy>
   15bf4:	69fb      	ldr	r3, [r7, #28]
   15bf6:	f103 0208 	add.w	r2, r3, #8
   15bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15bfc:	685b      	ldr	r3, [r3, #4]
   15bfe:	009b      	lsls	r3, r3, #2
   15c00:	18d0      	adds	r0, r2, r3
   15c02:	6a3b      	ldr	r3, [r7, #32]
   15c04:	f103 0108 	add.w	r1, r3, #8
   15c08:	6a3b      	ldr	r3, [r7, #32]
   15c0a:	685b      	ldr	r3, [r3, #4]
   15c0c:	009b      	lsls	r3, r3, #2
   15c0e:	461a      	mov	r2, r3
   15c10:	f006 f880 	bl	1bd14 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   15c14:	69fb      	ldr	r3, [r7, #28]
   15c16:	e034      	b.n	15c82 <mp_obj_tuple_binary_op+0x172>
        }
        case MP_BINARY_OP_MULTIPLY:
        case MP_BINARY_OP_INPLACE_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   15c18:	f107 0314 	add.w	r3, r7, #20
   15c1c:	4619      	mov	r1, r3
   15c1e:	6878      	ldr	r0, [r7, #4]
   15c20:	f7f8 f80e 	bl	dc40 <mp_obj_get_int_maybe>
   15c24:	4603      	mov	r3, r0
   15c26:	f083 0301 	eor.w	r3, r3, #1
   15c2a:	b2db      	uxtb	r3, r3
   15c2c:	2b00      	cmp	r3, #0
   15c2e:	d001      	beq.n	15c34 <mp_obj_tuple_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   15c30:	2300      	movs	r3, #0
   15c32:	e026      	b.n	15c82 <mp_obj_tuple_binary_op+0x172>
            }
            if (n <= 0) {
   15c34:	697b      	ldr	r3, [r7, #20]
   15c36:	2b00      	cmp	r3, #0
   15c38:	dc01      	bgt.n	15c3e <mp_obj_tuple_binary_op+0x12e>
                return mp_const_empty_tuple;
   15c3a:	4b15      	ldr	r3, [pc, #84]	; (15c90 <mp_obj_tuple_binary_op+0x180>)
   15c3c:	e021      	b.n	15c82 <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   15c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c40:	685b      	ldr	r3, [r3, #4]
   15c42:	697a      	ldr	r2, [r7, #20]
   15c44:	fb02 f303 	mul.w	r3, r2, r3
   15c48:	2100      	movs	r1, #0
   15c4a:	4618      	mov	r0, r3
   15c4c:	f000 f8aa 	bl	15da4 <mp_obj_new_tuple>
   15c50:	61b8      	str	r0, [r7, #24]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   15c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c54:	f103 0008 	add.w	r0, r3, #8
   15c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c5a:	685a      	ldr	r2, [r3, #4]
   15c5c:	697b      	ldr	r3, [r7, #20]
   15c5e:	4619      	mov	r1, r3
   15c60:	69bb      	ldr	r3, [r7, #24]
   15c62:	3308      	adds	r3, #8
   15c64:	9300      	str	r3, [sp, #0]
   15c66:	460b      	mov	r3, r1
   15c68:	2104      	movs	r1, #4
   15c6a:	f001 fd65 	bl	17738 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   15c6e:	69bb      	ldr	r3, [r7, #24]
   15c70:	e007      	b.n	15c82 <mp_obj_tuple_binary_op+0x172>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return tuple_cmp_helper(op, lhs, rhs);
   15c72:	687a      	ldr	r2, [r7, #4]
   15c74:	68b9      	ldr	r1, [r7, #8]
   15c76:	68f8      	ldr	r0, [r7, #12]
   15c78:	f7ff feae 	bl	159d8 <tuple_cmp_helper>
   15c7c:	4603      	mov	r3, r0
   15c7e:	e000      	b.n	15c82 <mp_obj_tuple_binary_op+0x172>

        default:
            return MP_OBJ_NULL; // op not supported
   15c80:	2300      	movs	r3, #0
    }
}
   15c82:	4618      	mov	r0, r3
   15c84:	3728      	adds	r7, #40	; 0x28
   15c86:	46bd      	mov	sp, r7
   15c88:	bd80      	pop	{r7, pc}
   15c8a:	bf00      	nop
   15c8c:	00021db4 	.word	0x00021db4
   15c90:	00021df0 	.word	0x00021df0

00015c94 <mp_obj_tuple_subscr>:

mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   15c94:	b580      	push	{r7, lr}
   15c96:	b086      	sub	sp, #24
   15c98:	af00      	add	r7, sp, #0
   15c9a:	60f8      	str	r0, [r7, #12]
   15c9c:	60b9      	str	r1, [r7, #8]
   15c9e:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   15ca0:	687b      	ldr	r3, [r7, #4]
   15ca2:	2b08      	cmp	r3, #8
   15ca4:	d110      	bne.n	15cc8 <mp_obj_tuple_subscr+0x34>
        // load
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15ca6:	68fb      	ldr	r3, [r7, #12]
   15ca8:	617b      	str	r3, [r7, #20]
            mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(slice.stop - slice.start, NULL));
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   15caa:	697b      	ldr	r3, [r7, #20]
   15cac:	6818      	ldr	r0, [r3, #0]
   15cae:	697b      	ldr	r3, [r7, #20]
   15cb0:	6859      	ldr	r1, [r3, #4]
   15cb2:	2300      	movs	r3, #0
   15cb4:	68ba      	ldr	r2, [r7, #8]
   15cb6:	f7f8 f853 	bl	dd60 <mp_get_index>
   15cba:	6138      	str	r0, [r7, #16]
        return self->items[index_value];
   15cbc:	697b      	ldr	r3, [r7, #20]
   15cbe:	693a      	ldr	r2, [r7, #16]
   15cc0:	3202      	adds	r2, #2
   15cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15cc6:	e000      	b.n	15cca <mp_obj_tuple_subscr+0x36>
    } else {
        return MP_OBJ_NULL; // op not supported
   15cc8:	2300      	movs	r3, #0
    }
}
   15cca:	4618      	mov	r0, r3
   15ccc:	3718      	adds	r7, #24
   15cce:	46bd      	mov	sp, r7
   15cd0:	bd80      	pop	{r7, pc}
   15cd2:	bf00      	nop

00015cd4 <tuple_count>:

STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   15cd4:	b580      	push	{r7, lr}
   15cd6:	b084      	sub	sp, #16
   15cd8:	af00      	add	r7, sp, #0
   15cda:	6078      	str	r0, [r7, #4]
   15cdc:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15cde:	6878      	ldr	r0, [r7, #4]
   15ce0:	f7ff fdac 	bl	1583c <MP_OBJ_IS_OBJ>
   15ce4:	4603      	mov	r3, r0
   15ce6:	f083 0301 	eor.w	r3, r3, #1
   15cea:	b2db      	uxtb	r3, r3
   15cec:	2b00      	cmp	r3, #0
   15cee:	d104      	bne.n	15cfa <tuple_count+0x26>
   15cf0:	687b      	ldr	r3, [r7, #4]
   15cf2:	681b      	ldr	r3, [r3, #0]
   15cf4:	4a0c      	ldr	r2, [pc, #48]	; (15d28 <tuple_count+0x54>)
   15cf6:	4293      	cmp	r3, r2
   15cf8:	d005      	beq.n	15d06 <tuple_count+0x32>
   15cfa:	4b0c      	ldr	r3, [pc, #48]	; (15d2c <tuple_count+0x58>)
   15cfc:	4a0c      	ldr	r2, [pc, #48]	; (15d30 <tuple_count+0x5c>)
   15cfe:	21c8      	movs	r1, #200	; 0xc8
   15d00:	480c      	ldr	r0, [pc, #48]	; (15d34 <tuple_count+0x60>)
   15d02:	f005 fb4b 	bl	1b39c <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15d06:	687b      	ldr	r3, [r7, #4]
   15d08:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	f103 0008 	add.w	r0, r3, #8
   15d10:	68fb      	ldr	r3, [r7, #12]
   15d12:	685b      	ldr	r3, [r3, #4]
   15d14:	683a      	ldr	r2, [r7, #0]
   15d16:	4619      	mov	r1, r3
   15d18:	f001 fe9c 	bl	17a54 <mp_seq_count_obj>
   15d1c:	4603      	mov	r3, r0
}
   15d1e:	4618      	mov	r0, r3
   15d20:	3710      	adds	r7, #16
   15d22:	46bd      	mov	sp, r7
   15d24:	bd80      	pop	{r7, pc}
   15d26:	bf00      	nop
   15d28:	00021db4 	.word	0x00021db4
   15d2c:	00021cc8 	.word	0x00021cc8
   15d30:	00021e34 	.word	0x00021e34
   15d34:	00021cb4 	.word	0x00021cb4

00015d38 <tuple_index>:
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tuple_count_obj, tuple_count);

STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   15d38:	b580      	push	{r7, lr}
   15d3a:	b084      	sub	sp, #16
   15d3c:	af00      	add	r7, sp, #0
   15d3e:	6078      	str	r0, [r7, #4]
   15d40:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   15d42:	683b      	ldr	r3, [r7, #0]
   15d44:	681b      	ldr	r3, [r3, #0]
   15d46:	4618      	mov	r0, r3
   15d48:	f7ff fd78 	bl	1583c <MP_OBJ_IS_OBJ>
   15d4c:	4603      	mov	r3, r0
   15d4e:	f083 0301 	eor.w	r3, r3, #1
   15d52:	b2db      	uxtb	r3, r3
   15d54:	2b00      	cmp	r3, #0
   15d56:	d105      	bne.n	15d64 <tuple_index+0x2c>
   15d58:	683b      	ldr	r3, [r7, #0]
   15d5a:	681b      	ldr	r3, [r3, #0]
   15d5c:	681b      	ldr	r3, [r3, #0]
   15d5e:	4a0d      	ldr	r2, [pc, #52]	; (15d94 <tuple_index+0x5c>)
   15d60:	4293      	cmp	r3, r2
   15d62:	d005      	beq.n	15d70 <tuple_index+0x38>
   15d64:	4b0c      	ldr	r3, [pc, #48]	; (15d98 <tuple_index+0x60>)
   15d66:	4a0d      	ldr	r2, [pc, #52]	; (15d9c <tuple_index+0x64>)
   15d68:	21cf      	movs	r1, #207	; 0xcf
   15d6a:	480d      	ldr	r0, [pc, #52]	; (15da0 <tuple_index+0x68>)
   15d6c:	f005 fb16 	bl	1b39c <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(args[0]);
   15d70:	683b      	ldr	r3, [r7, #0]
   15d72:	681b      	ldr	r3, [r3, #0]
   15d74:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   15d76:	68fb      	ldr	r3, [r7, #12]
   15d78:	f103 0008 	add.w	r0, r3, #8
   15d7c:	68fb      	ldr	r3, [r7, #12]
   15d7e:	6859      	ldr	r1, [r3, #4]
   15d80:	683b      	ldr	r3, [r7, #0]
   15d82:	687a      	ldr	r2, [r7, #4]
   15d84:	f001 fe16 	bl	179b4 <mp_seq_index_obj>
   15d88:	4603      	mov	r3, r0
}
   15d8a:	4618      	mov	r0, r3
   15d8c:	3710      	adds	r7, #16
   15d8e:	46bd      	mov	sp, r7
   15d90:	bd80      	pop	{r7, pc}
   15d92:	bf00      	nop
   15d94:	00021db4 	.word	0x00021db4
   15d98:	00021d2c 	.word	0x00021d2c
   15d9c:	00021e40 	.word	0x00021e40
   15da0:	00021cb4 	.word	0x00021cb4

00015da4 <mp_obj_new_tuple>:
};

// the zero-length tuple
const mp_obj_tuple_t mp_const_empty_tuple_obj = {{&mp_type_tuple}, 0};

mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   15da4:	b580      	push	{r7, lr}
   15da6:	b084      	sub	sp, #16
   15da8:	af00      	add	r7, sp, #0
   15daa:	6078      	str	r0, [r7, #4]
   15dac:	6039      	str	r1, [r7, #0]
    if (n == 0) {
   15dae:	687b      	ldr	r3, [r7, #4]
   15db0:	2b00      	cmp	r3, #0
   15db2:	d101      	bne.n	15db8 <mp_obj_new_tuple+0x14>
        return mp_const_empty_tuple;
   15db4:	4b15      	ldr	r3, [pc, #84]	; (15e0c <mp_obj_new_tuple+0x68>)
   15db6:	e024      	b.n	15e02 <mp_obj_new_tuple+0x5e>
    }
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   15db8:	687b      	ldr	r3, [r7, #4]
   15dba:	3302      	adds	r3, #2
   15dbc:	009b      	lsls	r3, r3, #2
   15dbe:	4618      	mov	r0, r3
   15dc0:	f7ea faac 	bl	31c <m_malloc>
   15dc4:	60b8      	str	r0, [r7, #8]
    o->base.type = &mp_type_tuple;
   15dc6:	68bb      	ldr	r3, [r7, #8]
   15dc8:	4a11      	ldr	r2, [pc, #68]	; (15e10 <mp_obj_new_tuple+0x6c>)
   15dca:	601a      	str	r2, [r3, #0]
    o->len = n;
   15dcc:	68bb      	ldr	r3, [r7, #8]
   15dce:	687a      	ldr	r2, [r7, #4]
   15dd0:	605a      	str	r2, [r3, #4]
    if (items) {
   15dd2:	683b      	ldr	r3, [r7, #0]
   15dd4:	2b00      	cmp	r3, #0
   15dd6:	d013      	beq.n	15e00 <mp_obj_new_tuple+0x5c>
        for (size_t i = 0; i < n; i++) {
   15dd8:	2300      	movs	r3, #0
   15dda:	60fb      	str	r3, [r7, #12]
   15ddc:	e00c      	b.n	15df8 <mp_obj_new_tuple+0x54>
            o->items[i] = items[i];
   15dde:	68fb      	ldr	r3, [r7, #12]
   15de0:	009b      	lsls	r3, r3, #2
   15de2:	683a      	ldr	r2, [r7, #0]
   15de4:	4413      	add	r3, r2
   15de6:	6819      	ldr	r1, [r3, #0]
   15de8:	68bb      	ldr	r3, [r7, #8]
   15dea:	68fa      	ldr	r2, [r7, #12]
   15dec:	3202      	adds	r2, #2
   15dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   15df2:	68fb      	ldr	r3, [r7, #12]
   15df4:	3301      	adds	r3, #1
   15df6:	60fb      	str	r3, [r7, #12]
   15df8:	68fa      	ldr	r2, [r7, #12]
   15dfa:	687b      	ldr	r3, [r7, #4]
   15dfc:	429a      	cmp	r2, r3
   15dfe:	d3ee      	bcc.n	15dde <mp_obj_new_tuple+0x3a>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   15e00:	68bb      	ldr	r3, [r7, #8]
}
   15e02:	4618      	mov	r0, r3
   15e04:	3710      	adds	r7, #16
   15e06:	46bd      	mov	sp, r7
   15e08:	bd80      	pop	{r7, pc}
   15e0a:	bf00      	nop
   15e0c:	00021df0 	.word	0x00021df0
   15e10:	00021db4 	.word	0x00021db4

00015e14 <mp_obj_tuple_get>:

void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   15e14:	b580      	push	{r7, lr}
   15e16:	b086      	sub	sp, #24
   15e18:	af00      	add	r7, sp, #0
   15e1a:	60f8      	str	r0, [r7, #12]
   15e1c:	60b9      	str	r1, [r7, #8]
   15e1e:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15e20:	68f8      	ldr	r0, [r7, #12]
   15e22:	f7ff fd0b 	bl	1583c <MP_OBJ_IS_OBJ>
   15e26:	4603      	mov	r3, r0
   15e28:	f083 0301 	eor.w	r3, r3, #1
   15e2c:	b2db      	uxtb	r3, r3
   15e2e:	2b00      	cmp	r3, #0
   15e30:	d104      	bne.n	15e3c <mp_obj_tuple_get+0x28>
   15e32:	68fb      	ldr	r3, [r7, #12]
   15e34:	681b      	ldr	r3, [r3, #0]
   15e36:	4a0c      	ldr	r2, [pc, #48]	; (15e68 <mp_obj_tuple_get+0x54>)
   15e38:	4293      	cmp	r3, r2
   15e3a:	d005      	beq.n	15e48 <mp_obj_tuple_get+0x34>
   15e3c:	4b0b      	ldr	r3, [pc, #44]	; (15e6c <mp_obj_tuple_get+0x58>)
   15e3e:	4a0c      	ldr	r2, [pc, #48]	; (15e70 <mp_obj_tuple_get+0x5c>)
   15e40:	21fb      	movs	r1, #251	; 0xfb
   15e42:	480c      	ldr	r0, [pc, #48]	; (15e74 <mp_obj_tuple_get+0x60>)
   15e44:	f005 faaa 	bl	1b39c <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15e48:	68fb      	ldr	r3, [r7, #12]
   15e4a:	617b      	str	r3, [r7, #20]
    *len = self->len;
   15e4c:	697b      	ldr	r3, [r7, #20]
   15e4e:	685a      	ldr	r2, [r3, #4]
   15e50:	68bb      	ldr	r3, [r7, #8]
   15e52:	601a      	str	r2, [r3, #0]
    *items = &self->items[0];
   15e54:	697b      	ldr	r3, [r7, #20]
   15e56:	f103 0208 	add.w	r2, r3, #8
   15e5a:	687b      	ldr	r3, [r7, #4]
   15e5c:	601a      	str	r2, [r3, #0]
}
   15e5e:	bf00      	nop
   15e60:	3718      	adds	r7, #24
   15e62:	46bd      	mov	sp, r7
   15e64:	bd80      	pop	{r7, pc}
   15e66:	bf00      	nop
   15e68:	00021db4 	.word	0x00021db4
   15e6c:	00021df8 	.word	0x00021df8
   15e70:	00021e4c 	.word	0x00021e4c
   15e74:	00021cb4 	.word	0x00021cb4

00015e78 <mp_obj_tuple_del>:

void mp_obj_tuple_del(mp_obj_t self_in) {
   15e78:	b580      	push	{r7, lr}
   15e7a:	b084      	sub	sp, #16
   15e7c:	af00      	add	r7, sp, #0
   15e7e:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15e80:	6878      	ldr	r0, [r7, #4]
   15e82:	f7ff fcdb 	bl	1583c <MP_OBJ_IS_OBJ>
   15e86:	4603      	mov	r3, r0
   15e88:	f083 0301 	eor.w	r3, r3, #1
   15e8c:	b2db      	uxtb	r3, r3
   15e8e:	2b00      	cmp	r3, #0
   15e90:	d104      	bne.n	15e9c <mp_obj_tuple_del+0x24>
   15e92:	687b      	ldr	r3, [r7, #4]
   15e94:	681b      	ldr	r3, [r3, #0]
   15e96:	4a09      	ldr	r2, [pc, #36]	; (15ebc <mp_obj_tuple_del+0x44>)
   15e98:	4293      	cmp	r3, r2
   15e9a:	d006      	beq.n	15eaa <mp_obj_tuple_del+0x32>
   15e9c:	4b08      	ldr	r3, [pc, #32]	; (15ec0 <mp_obj_tuple_del+0x48>)
   15e9e:	4a09      	ldr	r2, [pc, #36]	; (15ec4 <mp_obj_tuple_del+0x4c>)
   15ea0:	f44f 7181 	mov.w	r1, #258	; 0x102
   15ea4:	4808      	ldr	r0, [pc, #32]	; (15ec8 <mp_obj_tuple_del+0x50>)
   15ea6:	f005 fa79 	bl	1b39c <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15eaa:	687b      	ldr	r3, [r7, #4]
   15eac:	60fb      	str	r3, [r7, #12]
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   15eae:	68f8      	ldr	r0, [r7, #12]
   15eb0:	f7ea fa96 	bl	3e0 <m_free>
}
   15eb4:	bf00      	nop
   15eb6:	3710      	adds	r7, #16
   15eb8:	46bd      	mov	sp, r7
   15eba:	bd80      	pop	{r7, pc}
   15ebc:	00021db4 	.word	0x00021db4
   15ec0:	00021df8 	.word	0x00021df8
   15ec4:	00021e60 	.word	0x00021e60
   15ec8:	00021cb4 	.word	0x00021cb4

00015ecc <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   15ecc:	b480      	push	{r7}
   15ece:	b085      	sub	sp, #20
   15ed0:	af00      	add	r7, sp, #0
   15ed2:	6078      	str	r0, [r7, #4]
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
   15ed4:	687b      	ldr	r3, [r7, #4]
   15ed6:	60fb      	str	r3, [r7, #12]
    if (self->cur < self->tuple->len) {
   15ed8:	68fb      	ldr	r3, [r7, #12]
   15eda:	68da      	ldr	r2, [r3, #12]
   15edc:	68fb      	ldr	r3, [r7, #12]
   15ede:	689b      	ldr	r3, [r3, #8]
   15ee0:	685b      	ldr	r3, [r3, #4]
   15ee2:	429a      	cmp	r2, r3
   15ee4:	d20e      	bcs.n	15f04 <tuple_it_iternext+0x38>
        mp_obj_t o_out = self->tuple->items[self->cur];
   15ee6:	68fb      	ldr	r3, [r7, #12]
   15ee8:	689b      	ldr	r3, [r3, #8]
   15eea:	68fa      	ldr	r2, [r7, #12]
   15eec:	68d2      	ldr	r2, [r2, #12]
   15eee:	3202      	adds	r2, #2
   15ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15ef4:	60bb      	str	r3, [r7, #8]
        self->cur += 1;
   15ef6:	68fb      	ldr	r3, [r7, #12]
   15ef8:	68db      	ldr	r3, [r3, #12]
   15efa:	1c5a      	adds	r2, r3, #1
   15efc:	68fb      	ldr	r3, [r7, #12]
   15efe:	60da      	str	r2, [r3, #12]
        return o_out;
   15f00:	68bb      	ldr	r3, [r7, #8]
   15f02:	e000      	b.n	15f06 <tuple_it_iternext+0x3a>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15f04:	2304      	movs	r3, #4
    }
}
   15f06:	4618      	mov	r0, r3
   15f08:	3714      	adds	r7, #20
   15f0a:	46bd      	mov	sp, r7
   15f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f10:	4770      	bx	lr
   15f12:	bf00      	nop

00015f14 <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   15f14:	b480      	push	{r7}
   15f16:	b085      	sub	sp, #20
   15f18:	af00      	add	r7, sp, #0
   15f1a:	6078      	str	r0, [r7, #4]
   15f1c:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
   15f1e:	683b      	ldr	r3, [r7, #0]
   15f20:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15f22:	68fb      	ldr	r3, [r7, #12]
   15f24:	4a08      	ldr	r2, [pc, #32]	; (15f48 <mp_obj_tuple_getiter+0x34>)
   15f26:	601a      	str	r2, [r3, #0]
    o->iternext = tuple_it_iternext;
   15f28:	68fb      	ldr	r3, [r7, #12]
   15f2a:	4a08      	ldr	r2, [pc, #32]	; (15f4c <mp_obj_tuple_getiter+0x38>)
   15f2c:	605a      	str	r2, [r3, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   15f2e:	68fb      	ldr	r3, [r7, #12]
   15f30:	687a      	ldr	r2, [r7, #4]
   15f32:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15f34:	68fb      	ldr	r3, [r7, #12]
   15f36:	2200      	movs	r2, #0
   15f38:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15f3a:	68fb      	ldr	r3, [r7, #12]
}
   15f3c:	4618      	mov	r0, r3
   15f3e:	3714      	adds	r7, #20
   15f40:	46bd      	mov	sp, r7
   15f42:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f46:	4770      	bx	lr
   15f48:	00021400 	.word	0x00021400
   15f4c:	00015ecd 	.word	0x00015ecd

00015f50 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15f50:	b480      	push	{r7}
   15f52:	b083      	sub	sp, #12
   15f54:	af00      	add	r7, sp, #0
   15f56:	6078      	str	r0, [r7, #4]
   15f58:	687b      	ldr	r3, [r7, #4]
   15f5a:	f003 0303 	and.w	r3, r3, #3
   15f5e:	2b00      	cmp	r3, #0
   15f60:	bf0c      	ite	eq
   15f62:	2301      	moveq	r3, #1
   15f64:	2300      	movne	r3, #0
   15f66:	b2db      	uxtb	r3, r3
   15f68:	4618      	mov	r0, r3
   15f6a:	370c      	adds	r7, #12
   15f6c:	46bd      	mov	sp, r7
   15f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f72:	4770      	bx	lr

00015f74 <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   15f74:	b580      	push	{r7, lr}
   15f76:	b088      	sub	sp, #32
   15f78:	af00      	add	r7, sp, #0
   15f7a:	6078      	str	r0, [r7, #4]
   15f7c:	6039      	str	r1, [r7, #0]
    int count = 0;
   15f7e:	2300      	movs	r3, #0
   15f80:	61fb      	str	r3, [r7, #28]
    for (;;) {
        if (type == &mp_type_object) {
   15f82:	687b      	ldr	r3, [r7, #4]
   15f84:	4a2d      	ldr	r2, [pc, #180]	; (1603c <instance_count_native_bases+0xc8>)
   15f86:	4293      	cmp	r3, r2
   15f88:	d101      	bne.n	15f8e <instance_count_native_bases+0x1a>
            // Not a "real" type, end search here.
            return count;
   15f8a:	69fb      	ldr	r3, [r7, #28]
   15f8c:	e052      	b.n	16034 <instance_count_native_bases+0xc0>
        } else if (mp_obj_is_native_type(type)) {
   15f8e:	687b      	ldr	r3, [r7, #4]
   15f90:	68db      	ldr	r3, [r3, #12]
   15f92:	4a2b      	ldr	r2, [pc, #172]	; (16040 <instance_count_native_bases+0xcc>)
   15f94:	4293      	cmp	r3, r2
   15f96:	d005      	beq.n	15fa4 <instance_count_native_bases+0x30>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
   15f98:	683b      	ldr	r3, [r7, #0]
   15f9a:	687a      	ldr	r2, [r7, #4]
   15f9c:	601a      	str	r2, [r3, #0]
            return count + 1;
   15f9e:	69fb      	ldr	r3, [r7, #28]
   15fa0:	3301      	adds	r3, #1
   15fa2:	e047      	b.n	16034 <instance_count_native_bases+0xc0>
        } else if (type->parent == NULL) {
   15fa4:	687b      	ldr	r3, [r7, #4]
   15fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15fa8:	2b00      	cmp	r3, #0
   15faa:	d101      	bne.n	15fb0 <instance_count_native_bases+0x3c>
            // No parents so end search here.
            return count;
   15fac:	69fb      	ldr	r3, [r7, #28]
   15fae:	e041      	b.n	16034 <instance_count_native_bases+0xc0>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   15fb0:	687b      	ldr	r3, [r7, #4]
   15fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15fb4:	681b      	ldr	r3, [r3, #0]
   15fb6:	4a23      	ldr	r2, [pc, #140]	; (16044 <instance_count_native_bases+0xd0>)
   15fb8:	4293      	cmp	r3, r2
   15fba:	d137      	bne.n	1602c <instance_count_native_bases+0xb8>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
   15fbc:	687b      	ldr	r3, [r7, #4]
   15fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15fc0:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   15fc2:	697b      	ldr	r3, [r7, #20]
   15fc4:	3308      	adds	r3, #8
   15fc6:	61bb      	str	r3, [r7, #24]
            const mp_obj_t *top = item + parent_tuple->len;
   15fc8:	697b      	ldr	r3, [r7, #20]
   15fca:	685b      	ldr	r3, [r3, #4]
   15fcc:	009b      	lsls	r3, r3, #2
   15fce:	69ba      	ldr	r2, [r7, #24]
   15fd0:	4413      	add	r3, r2
   15fd2:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   15fd4:	e024      	b.n	16020 <instance_count_native_bases+0xac>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   15fd6:	69bb      	ldr	r3, [r7, #24]
   15fd8:	681b      	ldr	r3, [r3, #0]
   15fda:	4618      	mov	r0, r3
   15fdc:	f7ff ffb8 	bl	15f50 <MP_OBJ_IS_OBJ>
   15fe0:	4603      	mov	r3, r0
   15fe2:	f083 0301 	eor.w	r3, r3, #1
   15fe6:	b2db      	uxtb	r3, r3
   15fe8:	2b00      	cmp	r3, #0
   15fea:	d105      	bne.n	15ff8 <instance_count_native_bases+0x84>
   15fec:	69bb      	ldr	r3, [r7, #24]
   15fee:	681b      	ldr	r3, [r3, #0]
   15ff0:	681b      	ldr	r3, [r3, #0]
   15ff2:	4a15      	ldr	r2, [pc, #84]	; (16048 <instance_count_native_bases+0xd4>)
   15ff4:	4293      	cmp	r3, r2
   15ff6:	d005      	beq.n	16004 <instance_count_native_bases+0x90>
   15ff8:	4b14      	ldr	r3, [pc, #80]	; (1604c <instance_count_native_bases+0xd8>)
   15ffa:	4a15      	ldr	r2, [pc, #84]	; (16050 <instance_count_native_bases+0xdc>)
   15ffc:	214b      	movs	r1, #75	; 0x4b
   15ffe:	4815      	ldr	r0, [pc, #84]	; (16054 <instance_count_native_bases+0xe0>)
   16000:	f005 f9cc 	bl	1b39c <__assert_func>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
   16004:	69bb      	ldr	r3, [r7, #24]
   16006:	681b      	ldr	r3, [r3, #0]
   16008:	60fb      	str	r3, [r7, #12]
                count += instance_count_native_bases(bt, last_native_base);
   1600a:	6839      	ldr	r1, [r7, #0]
   1600c:	68f8      	ldr	r0, [r7, #12]
   1600e:	f7ff ffb1 	bl	15f74 <instance_count_native_bases>
   16012:	4602      	mov	r2, r0
   16014:	69fb      	ldr	r3, [r7, #28]
   16016:	4413      	add	r3, r2
   16018:	61fb      	str	r3, [r7, #28]
            for (; item < top; ++item) {
   1601a:	69bb      	ldr	r3, [r7, #24]
   1601c:	3304      	adds	r3, #4
   1601e:	61bb      	str	r3, [r7, #24]
   16020:	69ba      	ldr	r2, [r7, #24]
   16022:	693b      	ldr	r3, [r7, #16]
   16024:	429a      	cmp	r2, r3
   16026:	d3d6      	bcc.n	15fd6 <instance_count_native_bases+0x62>
            }
            return count;
   16028:	69fb      	ldr	r3, [r7, #28]
   1602a:	e003      	b.n	16034 <instance_count_native_bases+0xc0>
        #endif
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
   1602c:	687b      	ldr	r3, [r7, #4]
   1602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16030:	607b      	str	r3, [r7, #4]
        }
    }
   16032:	e7a6      	b.n	15f82 <instance_count_native_bases+0xe>
}
   16034:	4618      	mov	r0, r3
   16036:	3720      	adds	r7, #32
   16038:	46bd      	mov	sp, r7
   1603a:	bd80      	pop	{r7, pc}
   1603c:	000213c4 	.word	0x000213c4
   16040:	00016485 	.word	0x00016485
   16044:	00021db4 	.word	0x00021db4
   16048:	000220ac 	.word	0x000220ac
   1604c:	00021e74 	.word	0x00021e74
   16050:	00022330 	.word	0x00022330
   16054:	00021e9c 	.word	0x00021e9c

00016058 <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   16058:	b590      	push	{r4, r7, lr}
   1605a:	b085      	sub	sp, #20
   1605c:	af00      	add	r7, sp, #0
   1605e:	6078      	str	r0, [r7, #4]
   16060:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   16062:	683b      	ldr	r3, [r7, #0]
   16064:	681b      	ldr	r3, [r3, #0]
   16066:	60fb      	str	r3, [r7, #12]
    const mp_obj_type_t *native_base = NULL;
   16068:	2300      	movs	r3, #0
   1606a:	60bb      	str	r3, [r7, #8]
    instance_count_native_bases(self->base.type, &native_base);
   1606c:	68fb      	ldr	r3, [r7, #12]
   1606e:	681b      	ldr	r3, [r3, #0]
   16070:	f107 0208 	add.w	r2, r7, #8
   16074:	4611      	mov	r1, r2
   16076:	4618      	mov	r0, r3
   16078:	f7ff ff7c 	bl	15f74 <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   1607c:	68bb      	ldr	r3, [r7, #8]
   1607e:	68dc      	ldr	r4, [r3, #12]
   16080:	68b8      	ldr	r0, [r7, #8]
   16082:	687b      	ldr	r3, [r7, #4]
   16084:	1e59      	subs	r1, r3, #1
   16086:	683b      	ldr	r3, [r7, #0]
   16088:	3304      	adds	r3, #4
   1608a:	2200      	movs	r2, #0
   1608c:	47a0      	blx	r4
   1608e:	4602      	mov	r2, r0
   16090:	68fb      	ldr	r3, [r7, #12]
   16092:	611a      	str	r2, [r3, #16]
    return mp_const_none;
   16094:	4b02      	ldr	r3, [pc, #8]	; (160a0 <native_base_init_wrapper+0x48>)
}
   16096:	4618      	mov	r0, r3
   16098:	3714      	adds	r7, #20
   1609a:	46bd      	mov	sp, r7
   1609c:	bd90      	pop	{r4, r7, pc}
   1609e:	bf00      	nop
   160a0:	00021480 	.word	0x00021480

000160a4 <mp_obj_new_instance>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(native_base_init_wrapper_obj, 1, MP_OBJ_FUN_ARGS_MAX, native_base_init_wrapper);

#if !MICROPY_CPYTHON_COMPAT
STATIC
#endif
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   160a4:	b580      	push	{r7, lr}
   160a6:	b084      	sub	sp, #16
   160a8:	af00      	add	r7, sp, #0
   160aa:	6078      	str	r0, [r7, #4]
   160ac:	6039      	str	r1, [r7, #0]
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   160ae:	6839      	ldr	r1, [r7, #0]
   160b0:	6878      	ldr	r0, [r7, #4]
   160b2:	f7ff ff5f 	bl	15f74 <instance_count_native_bases>
   160b6:	4603      	mov	r3, r0
   160b8:	60fb      	str	r3, [r7, #12]
    assert(num_native_bases < 2);
   160ba:	68fb      	ldr	r3, [r7, #12]
   160bc:	2b01      	cmp	r3, #1
   160be:	d905      	bls.n	160cc <mp_obj_new_instance+0x28>
   160c0:	4b10      	ldr	r3, [pc, #64]	; (16104 <mp_obj_new_instance+0x60>)
   160c2:	4a11      	ldr	r2, [pc, #68]	; (16108 <mp_obj_new_instance+0x64>)
   160c4:	2168      	movs	r1, #104	; 0x68
   160c6:	4811      	ldr	r0, [pc, #68]	; (1610c <mp_obj_new_instance+0x68>)
   160c8:	f005 f968 	bl	1b39c <__assert_func>
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   160cc:	68fb      	ldr	r3, [r7, #12]
   160ce:	3304      	adds	r3, #4
   160d0:	009b      	lsls	r3, r3, #2
   160d2:	4618      	mov	r0, r3
   160d4:	f7ea f922 	bl	31c <m_malloc>
   160d8:	60b8      	str	r0, [r7, #8]
    o->base.type = class;
   160da:	68bb      	ldr	r3, [r7, #8]
   160dc:	687a      	ldr	r2, [r7, #4]
   160de:	601a      	str	r2, [r3, #0]
    mp_map_init(&o->members, 0);
   160e0:	68bb      	ldr	r3, [r7, #8]
   160e2:	3304      	adds	r3, #4
   160e4:	2100      	movs	r1, #0
   160e6:	4618      	mov	r0, r3
   160e8:	f7f7 f8ca 	bl	d280 <mp_map_init>
    // Initialise the native base-class slot (should be 1 at most) with a valid
    // object.  It doesn't matter which object, so long as it can be uniquely
    // distinguished from a native class that is initialised.
    if (num_native_bases != 0) {
   160ec:	68fb      	ldr	r3, [r7, #12]
   160ee:	2b00      	cmp	r3, #0
   160f0:	d002      	beq.n	160f8 <mp_obj_new_instance+0x54>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   160f2:	68bb      	ldr	r3, [r7, #8]
   160f4:	4a06      	ldr	r2, [pc, #24]	; (16110 <mp_obj_new_instance+0x6c>)
   160f6:	611a      	str	r2, [r3, #16]
    }
    return o;
   160f8:	68bb      	ldr	r3, [r7, #8]
}
   160fa:	4618      	mov	r0, r3
   160fc:	3710      	adds	r7, #16
   160fe:	46bd      	mov	sp, r7
   16100:	bd80      	pop	{r7, pc}
   16102:	bf00      	nop
   16104:	00021ebc 	.word	0x00021ebc
   16108:	0002234c 	.word	0x0002234c
   1610c:	00021e9c 	.word	0x00021e9c
   16110:	00021eb0 	.word	0x00021eb0

00016114 <mp_obj_class_lookup>:
    size_t meth_offset;
    mp_obj_t *dest;
    bool is_type;
};

STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   16114:	b580      	push	{r7, lr}
   16116:	b08c      	sub	sp, #48	; 0x30
   16118:	af00      	add	r7, sp, #0
   1611a:	6078      	str	r0, [r7, #4]
   1611c:	6039      	str	r1, [r7, #0]
    assert(lookup->dest[0] == MP_OBJ_NULL);
   1611e:	687b      	ldr	r3, [r7, #4]
   16120:	68db      	ldr	r3, [r3, #12]
   16122:	681b      	ldr	r3, [r3, #0]
   16124:	2b00      	cmp	r3, #0
   16126:	d005      	beq.n	16134 <mp_obj_class_lookup+0x20>
   16128:	4b88      	ldr	r3, [pc, #544]	; (1634c <mp_obj_class_lookup+0x238>)
   1612a:	4a89      	ldr	r2, [pc, #548]	; (16350 <mp_obj_class_lookup+0x23c>)
   1612c:	218c      	movs	r1, #140	; 0x8c
   1612e:	4889      	ldr	r0, [pc, #548]	; (16354 <mp_obj_class_lookup+0x240>)
   16130:	f005 f934 	bl	1b39c <__assert_func>
    assert(lookup->dest[1] == MP_OBJ_NULL);
   16134:	687b      	ldr	r3, [r7, #4]
   16136:	68db      	ldr	r3, [r3, #12]
   16138:	3304      	adds	r3, #4
   1613a:	681b      	ldr	r3, [r3, #0]
   1613c:	2b00      	cmp	r3, #0
   1613e:	d005      	beq.n	1614c <mp_obj_class_lookup+0x38>
   16140:	4b85      	ldr	r3, [pc, #532]	; (16358 <mp_obj_class_lookup+0x244>)
   16142:	4a83      	ldr	r2, [pc, #524]	; (16350 <mp_obj_class_lookup+0x23c>)
   16144:	218d      	movs	r1, #141	; 0x8d
   16146:	4883      	ldr	r0, [pc, #524]	; (16354 <mp_obj_class_lookup+0x240>)
   16148:	f005 f928 	bl	1b39c <__assert_func>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
        // Optimize special method lookup for native types
        // This avoids extra method_name => slot lookup. On the other hand,
        // this should not be applied to class types, as will result in extra
        // lookup either.
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   1614c:	687b      	ldr	r3, [r7, #4]
   1614e:	689b      	ldr	r3, [r3, #8]
   16150:	2b00      	cmp	r3, #0
   16152:	d010      	beq.n	16176 <mp_obj_class_lookup+0x62>
   16154:	683b      	ldr	r3, [r7, #0]
   16156:	68db      	ldr	r3, [r3, #12]
   16158:	4a80      	ldr	r2, [pc, #512]	; (1635c <mp_obj_class_lookup+0x248>)
   1615a:	4293      	cmp	r3, r2
   1615c:	d00b      	beq.n	16176 <mp_obj_class_lookup+0x62>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   1615e:	687b      	ldr	r3, [r7, #4]
   16160:	689b      	ldr	r3, [r3, #8]
   16162:	683a      	ldr	r2, [r7, #0]
   16164:	4413      	add	r3, r2
   16166:	681b      	ldr	r3, [r3, #0]
   16168:	2b00      	cmp	r3, #0
   1616a:	d004      	beq.n	16176 <mp_obj_class_lookup+0x62>
                DEBUG_printf("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",
                    lookup->meth_offset, qstr_str(lookup->attr));
                lookup->dest[0] = MP_OBJ_SENTINEL;
   1616c:	687b      	ldr	r3, [r7, #4]
   1616e:	68db      	ldr	r3, [r3, #12]
   16170:	2208      	movs	r2, #8
   16172:	601a      	str	r2, [r3, #0]
                return;
   16174:	e0e6      	b.n	16344 <mp_obj_class_lookup+0x230>
            }
        }

        if (type->locals_dict != NULL) {
   16176:	683b      	ldr	r3, [r7, #0]
   16178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1617a:	2b00      	cmp	r3, #0
   1617c:	d04b      	beq.n	16216 <mp_obj_class_lookup+0x102>
            // search locals_dict (the set of methods/attributes)
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   1617e:	683b      	ldr	r3, [r7, #0]
   16180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16182:	681b      	ldr	r3, [r3, #0]
   16184:	4a76      	ldr	r2, [pc, #472]	; (16360 <mp_obj_class_lookup+0x24c>)
   16186:	4293      	cmp	r3, r2
   16188:	d005      	beq.n	16196 <mp_obj_class_lookup+0x82>
   1618a:	4b76      	ldr	r3, [pc, #472]	; (16364 <mp_obj_class_lookup+0x250>)
   1618c:	4a70      	ldr	r2, [pc, #448]	; (16350 <mp_obj_class_lookup+0x23c>)
   1618e:	219f      	movs	r1, #159	; 0x9f
   16190:	4870      	ldr	r0, [pc, #448]	; (16354 <mp_obj_class_lookup+0x240>)
   16192:	f005 f903 	bl	1b39c <__assert_func>
            mp_map_t *locals_map = &type->locals_dict->map;
   16196:	683b      	ldr	r3, [r7, #0]
   16198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1619a:	3304      	adds	r3, #4
   1619c:	627b      	str	r3, [r7, #36]	; 0x24
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   1619e:	687b      	ldr	r3, [r7, #4]
   161a0:	685b      	ldr	r3, [r3, #4]
   161a2:	009b      	lsls	r3, r3, #2
   161a4:	f043 0302 	orr.w	r3, r3, #2
   161a8:	2200      	movs	r2, #0
   161aa:	4619      	mov	r1, r3
   161ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
   161ae:	f7f7 f963 	bl	d478 <mp_map_lookup>
   161b2:	6238      	str	r0, [r7, #32]
            if (elem != NULL) {
   161b4:	6a3b      	ldr	r3, [r7, #32]
   161b6:	2b00      	cmp	r3, #0
   161b8:	d02d      	beq.n	16216 <mp_obj_class_lookup+0x102>
                if (lookup->is_type) {
   161ba:	687b      	ldr	r3, [r7, #4]
   161bc:	7c1b      	ldrb	r3, [r3, #16]
   161be:	2b00      	cmp	r3, #0
   161c0:	d00b      	beq.n	161da <mp_obj_class_lookup+0xc6>
                    // If we look up a class method, we need to return original type for which we
                    // do a lookup, not a (base) type in which we found the class method.
                    const mp_obj_type_t *org_type = (const mp_obj_type_t*)lookup->obj;
   161c2:	687b      	ldr	r3, [r7, #4]
   161c4:	681b      	ldr	r3, [r3, #0]
   161c6:	61fb      	str	r3, [r7, #28]
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   161c8:	6a3b      	ldr	r3, [r7, #32]
   161ca:	685a      	ldr	r2, [r3, #4]
   161cc:	687b      	ldr	r3, [r7, #4]
   161ce:	68db      	ldr	r3, [r3, #12]
   161d0:	69f9      	ldr	r1, [r7, #28]
   161d2:	2000      	movs	r0, #0
   161d4:	f7f6 fa46 	bl	c664 <mp_convert_member_lookup>
                printf("mp_obj_class_lookup: Returning: ");
                mp_obj_print(lookup->dest[0], PRINT_REPR); printf(" ");
                // Don't try to repr() lookup->dest[1], as we can be called recursively
                printf("<%s @%p>\n", mp_obj_get_type_str(lookup->dest[1]), lookup->dest[1]);
#endif
                return;
   161d8:	e0b4      	b.n	16344 <mp_obj_class_lookup+0x230>
                    mp_obj_instance_t *obj = lookup->obj;
   161da:	687b      	ldr	r3, [r7, #4]
   161dc:	681b      	ldr	r3, [r3, #0]
   161de:	61bb      	str	r3, [r7, #24]
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   161e0:	69bb      	ldr	r3, [r7, #24]
   161e2:	2b00      	cmp	r3, #0
   161e4:	d00c      	beq.n	16200 <mp_obj_class_lookup+0xec>
   161e6:	683b      	ldr	r3, [r7, #0]
   161e8:	68db      	ldr	r3, [r3, #12]
   161ea:	4a5c      	ldr	r2, [pc, #368]	; (1635c <mp_obj_class_lookup+0x248>)
   161ec:	4293      	cmp	r3, r2
   161ee:	d007      	beq.n	16200 <mp_obj_class_lookup+0xec>
   161f0:	683b      	ldr	r3, [r7, #0]
   161f2:	4a5d      	ldr	r2, [pc, #372]	; (16368 <mp_obj_class_lookup+0x254>)
   161f4:	4293      	cmp	r3, r2
   161f6:	d003      	beq.n	16200 <mp_obj_class_lookup+0xec>
                        obj_obj = obj->subobj[0];
   161f8:	69bb      	ldr	r3, [r7, #24]
   161fa:	691b      	ldr	r3, [r3, #16]
   161fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   161fe:	e001      	b.n	16204 <mp_obj_class_lookup+0xf0>
                        obj_obj = MP_OBJ_FROM_PTR(obj);
   16200:	69bb      	ldr	r3, [r7, #24]
   16202:	62fb      	str	r3, [r7, #44]	; 0x2c
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   16204:	6a3b      	ldr	r3, [r7, #32]
   16206:	685a      	ldr	r2, [r3, #4]
   16208:	687b      	ldr	r3, [r7, #4]
   1620a:	68db      	ldr	r3, [r3, #12]
   1620c:	6839      	ldr	r1, [r7, #0]
   1620e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16210:	f7f6 fa28 	bl	c664 <mp_convert_member_lookup>
                return;
   16214:	e096      	b.n	16344 <mp_obj_class_lookup+0x230>
        }

        // Previous code block takes care about attributes defined in .locals_dict,
        // but some attributes of native types may be handled using .load_attr method,
        // so make sure we try to lookup those too.
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   16216:	687b      	ldr	r3, [r7, #4]
   16218:	681b      	ldr	r3, [r3, #0]
   1621a:	2b00      	cmp	r3, #0
   1621c:	d01e      	beq.n	1625c <mp_obj_class_lookup+0x148>
   1621e:	687b      	ldr	r3, [r7, #4]
   16220:	7c1b      	ldrb	r3, [r3, #16]
   16222:	f083 0301 	eor.w	r3, r3, #1
   16226:	b2db      	uxtb	r3, r3
   16228:	2b00      	cmp	r3, #0
   1622a:	d017      	beq.n	1625c <mp_obj_class_lookup+0x148>
   1622c:	683b      	ldr	r3, [r7, #0]
   1622e:	68db      	ldr	r3, [r3, #12]
   16230:	4a4a      	ldr	r2, [pc, #296]	; (1635c <mp_obj_class_lookup+0x248>)
   16232:	4293      	cmp	r3, r2
   16234:	d012      	beq.n	1625c <mp_obj_class_lookup+0x148>
   16236:	683b      	ldr	r3, [r7, #0]
   16238:	4a4b      	ldr	r2, [pc, #300]	; (16368 <mp_obj_class_lookup+0x254>)
   1623a:	4293      	cmp	r3, r2
   1623c:	d00e      	beq.n	1625c <mp_obj_class_lookup+0x148>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   1623e:	687b      	ldr	r3, [r7, #4]
   16240:	681b      	ldr	r3, [r3, #0]
   16242:	6918      	ldr	r0, [r3, #16]
   16244:	687b      	ldr	r3, [r7, #4]
   16246:	6859      	ldr	r1, [r3, #4]
   16248:	687b      	ldr	r3, [r7, #4]
   1624a:	68db      	ldr	r3, [r3, #12]
   1624c:	461a      	mov	r2, r3
   1624e:	f7f6 fa7b 	bl	c748 <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   16252:	687b      	ldr	r3, [r7, #4]
   16254:	68db      	ldr	r3, [r3, #12]
   16256:	681b      	ldr	r3, [r3, #0]
   16258:	2b00      	cmp	r3, #0
   1625a:	d16c      	bne.n	16336 <mp_obj_class_lookup+0x222>
            }
        }

        // attribute not found, keep searching base classes

        if (type->parent == NULL) {
   1625c:	683b      	ldr	r3, [r7, #0]
   1625e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16260:	2b00      	cmp	r3, #0
   16262:	d06a      	beq.n	1633a <mp_obj_class_lookup+0x226>
            DEBUG_printf("mp_obj_class_lookup: No more parents\n");
            return;
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   16264:	683b      	ldr	r3, [r7, #0]
   16266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16268:	681b      	ldr	r3, [r3, #0]
   1626a:	4a40      	ldr	r2, [pc, #256]	; (1636c <mp_obj_class_lookup+0x258>)
   1626c:	4293      	cmp	r3, r2
   1626e:	d15a      	bne.n	16326 <mp_obj_class_lookup+0x212>
            const mp_obj_tuple_t *parent_tuple = type->parent;
   16270:	683b      	ldr	r3, [r7, #0]
   16272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16274:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   16276:	697b      	ldr	r3, [r7, #20]
   16278:	3308      	adds	r3, #8
   1627a:	62bb      	str	r3, [r7, #40]	; 0x28
            const mp_obj_t *top = item + parent_tuple->len - 1;
   1627c:	697b      	ldr	r3, [r7, #20]
   1627e:	685b      	ldr	r3, [r3, #4]
   16280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16284:	3b01      	subs	r3, #1
   16286:	009b      	lsls	r3, r3, #2
   16288:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1628a:	4413      	add	r3, r2
   1628c:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   1628e:	e02b      	b.n	162e8 <mp_obj_class_lookup+0x1d4>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   16290:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16292:	681b      	ldr	r3, [r3, #0]
   16294:	4618      	mov	r0, r3
   16296:	f7ff fe5b 	bl	15f50 <MP_OBJ_IS_OBJ>
   1629a:	4603      	mov	r3, r0
   1629c:	f083 0301 	eor.w	r3, r3, #1
   162a0:	b2db      	uxtb	r3, r3
   162a2:	2b00      	cmp	r3, #0
   162a4:	d105      	bne.n	162b2 <mp_obj_class_lookup+0x19e>
   162a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   162a8:	681b      	ldr	r3, [r3, #0]
   162aa:	681b      	ldr	r3, [r3, #0]
   162ac:	4a30      	ldr	r2, [pc, #192]	; (16370 <mp_obj_class_lookup+0x25c>)
   162ae:	4293      	cmp	r3, r2
   162b0:	d005      	beq.n	162be <mp_obj_class_lookup+0x1aa>
   162b2:	4b30      	ldr	r3, [pc, #192]	; (16374 <mp_obj_class_lookup+0x260>)
   162b4:	4a26      	ldr	r2, [pc, #152]	; (16350 <mp_obj_class_lookup+0x23c>)
   162b6:	21d2      	movs	r1, #210	; 0xd2
   162b8:	4826      	ldr	r0, [pc, #152]	; (16354 <mp_obj_class_lookup+0x240>)
   162ba:	f005 f86f 	bl	1b39c <__assert_func>
                mp_obj_type_t *bt = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   162be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   162c0:	681b      	ldr	r3, [r3, #0]
   162c2:	60fb      	str	r3, [r7, #12]
                if (bt == &mp_type_object) {
   162c4:	68fb      	ldr	r3, [r7, #12]
   162c6:	4a28      	ldr	r2, [pc, #160]	; (16368 <mp_obj_class_lookup+0x254>)
   162c8:	4293      	cmp	r3, r2
   162ca:	d009      	beq.n	162e0 <mp_obj_class_lookup+0x1cc>
                    // Not a "real" type
                    continue;
                }
                mp_obj_class_lookup(lookup, bt);
   162cc:	68f9      	ldr	r1, [r7, #12]
   162ce:	6878      	ldr	r0, [r7, #4]
   162d0:	f7ff ff20 	bl	16114 <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   162d4:	687b      	ldr	r3, [r7, #4]
   162d6:	68db      	ldr	r3, [r3, #12]
   162d8:	681b      	ldr	r3, [r3, #0]
   162da:	2b00      	cmp	r3, #0
   162dc:	d12f      	bne.n	1633e <mp_obj_class_lookup+0x22a>
   162de:	e000      	b.n	162e2 <mp_obj_class_lookup+0x1ce>
                    continue;
   162e0:	bf00      	nop
            for (; item < top; ++item) {
   162e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   162e4:	3304      	adds	r3, #4
   162e6:	62bb      	str	r3, [r7, #40]	; 0x28
   162e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   162ea:	693b      	ldr	r3, [r7, #16]
   162ec:	429a      	cmp	r2, r3
   162ee:	d3cf      	bcc.n	16290 <mp_obj_class_lookup+0x17c>
                    return;
                }
            }

            // search last base (simple tail recursion elimination)
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   162f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   162f2:	681b      	ldr	r3, [r3, #0]
   162f4:	4618      	mov	r0, r3
   162f6:	f7ff fe2b 	bl	15f50 <MP_OBJ_IS_OBJ>
   162fa:	4603      	mov	r3, r0
   162fc:	f083 0301 	eor.w	r3, r3, #1
   16300:	b2db      	uxtb	r3, r3
   16302:	2b00      	cmp	r3, #0
   16304:	d105      	bne.n	16312 <mp_obj_class_lookup+0x1fe>
   16306:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16308:	681b      	ldr	r3, [r3, #0]
   1630a:	681b      	ldr	r3, [r3, #0]
   1630c:	4a18      	ldr	r2, [pc, #96]	; (16370 <mp_obj_class_lookup+0x25c>)
   1630e:	4293      	cmp	r3, r2
   16310:	d005      	beq.n	1631e <mp_obj_class_lookup+0x20a>
   16312:	4b18      	ldr	r3, [pc, #96]	; (16374 <mp_obj_class_lookup+0x260>)
   16314:	4a0e      	ldr	r2, [pc, #56]	; (16350 <mp_obj_class_lookup+0x23c>)
   16316:	21df      	movs	r1, #223	; 0xdf
   16318:	480e      	ldr	r0, [pc, #56]	; (16354 <mp_obj_class_lookup+0x240>)
   1631a:	f005 f83f 	bl	1b39c <__assert_func>
            type = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   1631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16320:	681b      	ldr	r3, [r3, #0]
   16322:	603b      	str	r3, [r7, #0]
   16324:	e002      	b.n	1632c <mp_obj_class_lookup+0x218>
        #endif
        } else {
            type = type->parent;
   16326:	683b      	ldr	r3, [r7, #0]
   16328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1632a:	603b      	str	r3, [r7, #0]
        }
        if (type == &mp_type_object) {
   1632c:	683b      	ldr	r3, [r7, #0]
   1632e:	4a0e      	ldr	r2, [pc, #56]	; (16368 <mp_obj_class_lookup+0x254>)
   16330:	4293      	cmp	r3, r2
   16332:	d006      	beq.n	16342 <mp_obj_class_lookup+0x22e>
            // Not a "real" type
            return;
        }
    }
   16334:	e70a      	b.n	1614c <mp_obj_class_lookup+0x38>
                return;
   16336:	bf00      	nop
   16338:	e004      	b.n	16344 <mp_obj_class_lookup+0x230>
            return;
   1633a:	bf00      	nop
   1633c:	e002      	b.n	16344 <mp_obj_class_lookup+0x230>
                    return;
   1633e:	bf00      	nop
   16340:	e000      	b.n	16344 <mp_obj_class_lookup+0x230>
            return;
   16342:	bf00      	nop
}
   16344:	3730      	adds	r7, #48	; 0x30
   16346:	46bd      	mov	sp, r7
   16348:	bd80      	pop	{r7, pc}
   1634a:	bf00      	nop
   1634c:	00021ed4 	.word	0x00021ed4
   16350:	00022360 	.word	0x00022360
   16354:	00021e9c 	.word	0x00021e9c
   16358:	00021ef4 	.word	0x00021ef4
   1635c:	00016485 	.word	0x00016485
   16360:	000200e0 	.word	0x000200e0
   16364:	00021f14 	.word	0x00021f14
   16368:	000213c4 	.word	0x000213c4
   1636c:	00021db4 	.word	0x00021db4
   16370:	000220ac 	.word	0x000220ac
   16374:	00021e74 	.word	0x00021e74

00016378 <instance_print>:

STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16378:	b580      	push	{r7, lr}
   1637a:	b08e      	sub	sp, #56	; 0x38
   1637c:	af00      	add	r7, sp, #0
   1637e:	60f8      	str	r0, [r7, #12]
   16380:	60b9      	str	r1, [r7, #8]
   16382:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16384:	68bb      	ldr	r3, [r7, #8]
   16386:	637b      	str	r3, [r7, #52]	; 0x34
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   16388:	687b      	ldr	r3, [r7, #4]
   1638a:	2b00      	cmp	r3, #0
   1638c:	d101      	bne.n	16392 <instance_print+0x1a>
   1638e:	2323      	movs	r3, #35	; 0x23
   16390:	e000      	b.n	16394 <instance_print+0x1c>
   16392:	2321      	movs	r3, #33	; 0x21
   16394:	633b      	str	r3, [r7, #48]	; 0x30
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16396:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1639a:	2200      	movs	r2, #0
   1639c:	601a      	str	r2, [r3, #0]
   1639e:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   163a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163a2:	613b      	str	r3, [r7, #16]
   163a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   163a6:	617b      	str	r3, [r7, #20]
   163a8:	2308      	movs	r3, #8
   163aa:	61bb      	str	r3, [r7, #24]
   163ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
   163b0:	61fb      	str	r3, [r7, #28]
   163b2:	2300      	movs	r3, #0
   163b4:	f887 3020 	strb.w	r3, [r7, #32]
        .attr = meth,
        .meth_offset = offsetof(mp_obj_type_t, print),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   163b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163ba:	681a      	ldr	r2, [r3, #0]
   163bc:	f107 0310 	add.w	r3, r7, #16
   163c0:	4611      	mov	r1, r2
   163c2:	4618      	mov	r0, r3
   163c4:	f7ff fea6 	bl	16114 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   163c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   163ca:	2b00      	cmp	r3, #0
   163cc:	d10e      	bne.n	163ec <instance_print+0x74>
   163ce:	687b      	ldr	r3, [r7, #4]
   163d0:	2b00      	cmp	r3, #0
   163d2:	d10b      	bne.n	163ec <instance_print+0x74>
        // If there's no __str__, fall back to __repr__
        lookup.attr = MP_QSTR___repr__;
   163d4:	2321      	movs	r3, #33	; 0x21
   163d6:	617b      	str	r3, [r7, #20]
        lookup.meth_offset = 0;
   163d8:	2300      	movs	r3, #0
   163da:	61bb      	str	r3, [r7, #24]
        mp_obj_class_lookup(&lookup, self->base.type);
   163dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163de:	681a      	ldr	r2, [r3, #0]
   163e0:	f107 0310 	add.w	r3, r7, #16
   163e4:	4611      	mov	r1, r2
   163e6:	4618      	mov	r0, r3
   163e8:	f7ff fe94 	bl	16114 <mp_obj_class_lookup>
    }

    if (member[0] == MP_OBJ_SENTINEL) {
   163ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   163ee:	2b08      	cmp	r3, #8
   163f0:	d129      	bne.n	16446 <instance_print+0xce>
        // Handle Exception subclasses specially
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   163f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163f4:	691b      	ldr	r3, [r3, #16]
   163f6:	4618      	mov	r0, r3
   163f8:	f7f7 f9e8 	bl	d7cc <mp_obj_get_type>
   163fc:	4603      	mov	r3, r0
   163fe:	68db      	ldr	r3, [r3, #12]
   16400:	4a1e      	ldr	r2, [pc, #120]	; (1647c <instance_print+0x104>)
   16402:	4293      	cmp	r3, r2
   16404:	d117      	bne.n	16436 <instance_print+0xbe>
            if (kind != PRINT_STR) {
   16406:	687b      	ldr	r3, [r7, #4]
   16408:	2b00      	cmp	r3, #0
   1640a:	d00a      	beq.n	16422 <instance_print+0xaa>
                mp_print_str(print, qstr_str(self->base.type->name));
   1640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1640e:	681b      	ldr	r3, [r3, #0]
   16410:	88db      	ldrh	r3, [r3, #6]
   16412:	4618      	mov	r0, r3
   16414:	f7ea fefc 	bl	1210 <qstr_str>
   16418:	4603      	mov	r3, r0
   1641a:	4619      	mov	r1, r3
   1641c:	68f8      	ldr	r0, [r7, #12]
   1641e:	f7eb fa3b 	bl	1898 <mp_print_str>
            }
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   16422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16424:	6919      	ldr	r1, [r3, #16]
   16426:	687b      	ldr	r3, [r7, #4]
   16428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1642c:	461a      	mov	r2, r3
   1642e:	68f8      	ldr	r0, [r7, #12]
   16430:	f7f7 f9fe 	bl	d830 <mp_obj_print_helper>
        } else {
            mp_obj_print_helper(print, self->subobj[0], kind);
        }
        return;
   16434:	e01f      	b.n	16476 <instance_print+0xfe>
            mp_obj_print_helper(print, self->subobj[0], kind);
   16436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16438:	691b      	ldr	r3, [r3, #16]
   1643a:	687a      	ldr	r2, [r7, #4]
   1643c:	4619      	mov	r1, r3
   1643e:	68f8      	ldr	r0, [r7, #12]
   16440:	f7f7 f9f6 	bl	d830 <mp_obj_print_helper>
        return;
   16444:	e017      	b.n	16476 <instance_print+0xfe>
    }

    if (member[0] != MP_OBJ_NULL) {
   16446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16448:	2b00      	cmp	r3, #0
   1644a:	d00b      	beq.n	16464 <instance_print+0xec>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   1644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1644e:	68b9      	ldr	r1, [r7, #8]
   16450:	4618      	mov	r0, r3
   16452:	f7f5 fcb9 	bl	bdc8 <mp_call_function_1>
   16456:	62f8      	str	r0, [r7, #44]	; 0x2c
        mp_obj_print_helper(print, r, PRINT_STR);
   16458:	2200      	movs	r2, #0
   1645a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1645c:	68f8      	ldr	r0, [r7, #12]
   1645e:	f7f7 f9e7 	bl	d830 <mp_obj_print_helper>
        return;
   16462:	e008      	b.n	16476 <instance_print+0xfe>
    }

    // TODO: CPython prints fully-qualified type name
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   16464:	68b8      	ldr	r0, [r7, #8]
   16466:	f7f7 f9d1 	bl	d80c <mp_obj_get_type_str>
   1646a:	4602      	mov	r2, r0
   1646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1646e:	4904      	ldr	r1, [pc, #16]	; (16480 <instance_print+0x108>)
   16470:	68f8      	ldr	r0, [r7, #12]
   16472:	f7eb fd25 	bl	1ec0 <mp_printf>
}
   16476:	3738      	adds	r7, #56	; 0x38
   16478:	46bd      	mov	sp, r7
   1647a:	bd80      	pop	{r7, pc}
   1647c:	0000f341 	.word	0x0000f341
   16480:	00021f44 	.word	0x00021f44

00016484 <mp_obj_instance_make_new>:

mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16484:	b590      	push	{r4, r7, lr}
   16486:	b093      	sub	sp, #76	; 0x4c
   16488:	af00      	add	r7, sp, #0
   1648a:	60f8      	str	r0, [r7, #12]
   1648c:	60b9      	str	r1, [r7, #8]
   1648e:	607a      	str	r2, [r7, #4]
   16490:	603b      	str	r3, [r7, #0]
    assert(mp_obj_is_instance_type(self));
   16492:	68fb      	ldr	r3, [r7, #12]
   16494:	68db      	ldr	r3, [r3, #12]
   16496:	4a6b      	ldr	r2, [pc, #428]	; (16644 <mp_obj_instance_make_new+0x1c0>)
   16498:	4293      	cmp	r3, r2
   1649a:	d006      	beq.n	164aa <mp_obj_instance_make_new+0x26>
   1649c:	4b6a      	ldr	r3, [pc, #424]	; (16648 <mp_obj_instance_make_new+0x1c4>)
   1649e:	4a6b      	ldr	r2, [pc, #428]	; (1664c <mp_obj_instance_make_new+0x1c8>)
   164a0:	f240 1117 	movw	r1, #279	; 0x117
   164a4:	486a      	ldr	r0, [pc, #424]	; (16650 <mp_obj_instance_make_new+0x1cc>)
   164a6:	f004 ff79 	bl	1b39c <__assert_func>

    // look for __new__ function
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   164aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   164ae:	2200      	movs	r2, #0
   164b0:	601a      	str	r2, [r3, #0]
   164b2:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   164b4:	2300      	movs	r3, #0
   164b6:	61bb      	str	r3, [r7, #24]
   164b8:	231c      	movs	r3, #28
   164ba:	61fb      	str	r3, [r7, #28]
   164bc:	230c      	movs	r3, #12
   164be:	623b      	str	r3, [r7, #32]
   164c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   164c4:	627b      	str	r3, [r7, #36]	; 0x24
   164c6:	2300      	movs	r3, #0
   164c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        .attr = MP_QSTR___new__,
        .meth_offset = offsetof(mp_obj_type_t, make_new),
        .dest = init_fn,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self);
   164cc:	f107 0318 	add.w	r3, r7, #24
   164d0:	68f9      	ldr	r1, [r7, #12]
   164d2:	4618      	mov	r0, r3
   164d4:	f7ff fe1e 	bl	16114 <mp_obj_class_lookup>

    const mp_obj_type_t *native_base = NULL;
   164d8:	2300      	movs	r3, #0
   164da:	617b      	str	r3, [r7, #20]
    mp_obj_instance_t *o;
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   164dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   164de:	2b00      	cmp	r3, #0
   164e0:	d002      	beq.n	164e8 <mp_obj_instance_make_new+0x64>
   164e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   164e4:	2b08      	cmp	r3, #8
   164e6:	d107      	bne.n	164f8 <mp_obj_instance_make_new+0x74>
        // Either there is no __new__() method defined or there is a native
        // constructor.  In both cases create a blank instance.
        o = mp_obj_new_instance(self, &native_base);
   164e8:	f107 0314 	add.w	r3, r7, #20
   164ec:	4619      	mov	r1, r3
   164ee:	68f8      	ldr	r0, [r7, #12]
   164f0:	f7ff fdd8 	bl	160a4 <mp_obj_new_instance>
   164f4:	6478      	str	r0, [r7, #68]	; 0x44
   164f6:	e03e      	b.n	16576 <mp_obj_instance_make_new+0xf2>
        // said native constructor.

    } else {
        // Call Python class __new__ function with all args to create an instance
        mp_obj_t new_ret;
        if (n_args == 0 && n_kw == 0) {
   164f8:	68bb      	ldr	r3, [r7, #8]
   164fa:	2b00      	cmp	r3, #0
   164fc:	d10d      	bne.n	1651a <mp_obj_instance_make_new+0x96>
   164fe:	687b      	ldr	r3, [r7, #4]
   16500:	2b00      	cmp	r3, #0
   16502:	d10a      	bne.n	1651a <mp_obj_instance_make_new+0x96>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   16504:	68fb      	ldr	r3, [r7, #12]
   16506:	613b      	str	r3, [r7, #16]
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   16508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1650a:	f107 0310 	add.w	r3, r7, #16
   1650e:	2200      	movs	r2, #0
   16510:	2101      	movs	r1, #1
   16512:	f7f5 fc7f 	bl	be14 <mp_call_function_n_kw>
   16516:	6438      	str	r0, [r7, #64]	; 0x40
        if (n_args == 0 && n_kw == 0) {
   16518:	e022      	b.n	16560 <mp_obj_instance_make_new+0xdc>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   1651a:	687b      	ldr	r3, [r7, #4]
   1651c:	005a      	lsls	r2, r3, #1
   1651e:	68bb      	ldr	r3, [r7, #8]
   16520:	4413      	add	r3, r2
   16522:	3301      	adds	r3, #1
   16524:	009b      	lsls	r3, r3, #2
   16526:	4618      	mov	r0, r3
   16528:	f7e9 fef8 	bl	31c <m_malloc>
   1652c:	63b8      	str	r0, [r7, #56]	; 0x38
            args2[0] = MP_OBJ_FROM_PTR(self);
   1652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16530:	68fa      	ldr	r2, [r7, #12]
   16532:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   16534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16536:	1d18      	adds	r0, r3, #4
   16538:	687b      	ldr	r3, [r7, #4]
   1653a:	005a      	lsls	r2, r3, #1
   1653c:	68bb      	ldr	r3, [r7, #8]
   1653e:	4413      	add	r3, r2
   16540:	009b      	lsls	r3, r3, #2
   16542:	461a      	mov	r2, r3
   16544:	6839      	ldr	r1, [r7, #0]
   16546:	f005 fbe5 	bl	1bd14 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   1654a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1654c:	68bb      	ldr	r3, [r7, #8]
   1654e:	1c59      	adds	r1, r3, #1
   16550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16552:	687a      	ldr	r2, [r7, #4]
   16554:	f7f5 fc5e 	bl	be14 <mp_call_function_n_kw>
   16558:	6438      	str	r0, [r7, #64]	; 0x40
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   1655a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1655c:	f7e9 ff40 	bl	3e0 <m_free>
        }

        // https://docs.python.org/3.4/reference/datamodel.html#object.__new__
        // "If __new__() does not return an instance of cls, then the new
        // instance's __init__() method will not be invoked."
        if (mp_obj_get_type(new_ret) != self) {
   16560:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16562:	f7f7 f933 	bl	d7cc <mp_obj_get_type>
   16566:	4602      	mov	r2, r0
   16568:	68fb      	ldr	r3, [r7, #12]
   1656a:	429a      	cmp	r2, r3
   1656c:	d001      	beq.n	16572 <mp_obj_instance_make_new+0xee>
            return new_ret;
   1656e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16570:	e063      	b.n	1663a <mp_obj_instance_make_new+0x1b6>
        }

        // The instance returned by __new__() becomes the new object
        o = MP_OBJ_TO_PTR(new_ret);
   16572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16574:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // now call Python class __init__ function with all args
    // This method has a chance to call super().__init__() to construct a
    // possible native base class.
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   16576:	2300      	movs	r3, #0
   16578:	633b      	str	r3, [r7, #48]	; 0x30
   1657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1657c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lookup.obj = o;
   1657e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16580:	61bb      	str	r3, [r7, #24]
    lookup.attr = MP_QSTR___init__;
   16582:	2313      	movs	r3, #19
   16584:	61fb      	str	r3, [r7, #28]
    lookup.meth_offset = 0;
   16586:	2300      	movs	r3, #0
   16588:	623b      	str	r3, [r7, #32]
    mp_obj_class_lookup(&lookup, self);
   1658a:	f107 0318 	add.w	r3, r7, #24
   1658e:	68f9      	ldr	r1, [r7, #12]
   16590:	4618      	mov	r0, r3
   16592:	f7ff fdbf 	bl	16114 <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   16596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16598:	2b00      	cmp	r3, #0
   1659a:	d03b      	beq.n	16614 <mp_obj_instance_make_new+0x190>
        mp_obj_t init_ret;
        if (n_args == 0 && n_kw == 0) {
   1659c:	68bb      	ldr	r3, [r7, #8]
   1659e:	2b00      	cmp	r3, #0
   165a0:	d10b      	bne.n	165ba <mp_obj_instance_make_new+0x136>
   165a2:	687b      	ldr	r3, [r7, #4]
   165a4:	2b00      	cmp	r3, #0
   165a6:	d108      	bne.n	165ba <mp_obj_instance_make_new+0x136>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   165a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   165ac:	461a      	mov	r2, r3
   165ae:	2100      	movs	r1, #0
   165b0:	2000      	movs	r0, #0
   165b2:	f7f5 fc51 	bl	be58 <mp_call_method_n_kw>
   165b6:	63f8      	str	r0, [r7, #60]	; 0x3c
   165b8:	e025      	b.n	16606 <mp_obj_instance_make_new+0x182>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   165ba:	687b      	ldr	r3, [r7, #4]
   165bc:	005a      	lsls	r2, r3, #1
   165be:	68bb      	ldr	r3, [r7, #8]
   165c0:	4413      	add	r3, r2
   165c2:	3302      	adds	r3, #2
   165c4:	009b      	lsls	r3, r3, #2
   165c6:	4618      	mov	r0, r3
   165c8:	f7e9 fea8 	bl	31c <m_malloc>
   165cc:	6378      	str	r0, [r7, #52]	; 0x34
            args2[0] = init_fn[0];
   165ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   165d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165d2:	601a      	str	r2, [r3, #0]
            args2[1] = init_fn[1];
   165d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165d6:	3304      	adds	r3, #4
   165d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   165da:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   165dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165de:	f103 0008 	add.w	r0, r3, #8
   165e2:	687b      	ldr	r3, [r7, #4]
   165e4:	005a      	lsls	r2, r3, #1
   165e6:	68bb      	ldr	r3, [r7, #8]
   165e8:	4413      	add	r3, r2
   165ea:	009b      	lsls	r3, r3, #2
   165ec:	461a      	mov	r2, r3
   165ee:	6839      	ldr	r1, [r7, #0]
   165f0:	f005 fb90 	bl	1bd14 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   165f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   165f6:	6879      	ldr	r1, [r7, #4]
   165f8:	68b8      	ldr	r0, [r7, #8]
   165fa:	f7f5 fc2d 	bl	be58 <mp_call_method_n_kw>
   165fe:	63f8      	str	r0, [r7, #60]	; 0x3c
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   16600:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16602:	f7e9 feed 	bl	3e0 <m_free>
        }
        if (init_ret != mp_const_none) {
   16606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16608:	4a12      	ldr	r2, [pc, #72]	; (16654 <mp_obj_instance_make_new+0x1d0>)
   1660a:	4293      	cmp	r3, r2
   1660c:	d002      	beq.n	16614 <mp_obj_instance_make_new+0x190>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("__init__() should return None");
   1660e:	4812      	ldr	r0, [pc, #72]	; (16658 <mp_obj_instance_make_new+0x1d4>)
   16610:	f7f6 fcc2 	bl	cf98 <mp_raise_TypeError>

    }

    // If the type had a native base that was not explicitly initialised
    // (constructed) by the Python __init__() method then construct it now.
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   16614:	697b      	ldr	r3, [r7, #20]
   16616:	2b00      	cmp	r3, #0
   16618:	d00e      	beq.n	16638 <mp_obj_instance_make_new+0x1b4>
   1661a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1661c:	691b      	ldr	r3, [r3, #16]
   1661e:	4a0f      	ldr	r2, [pc, #60]	; (1665c <mp_obj_instance_make_new+0x1d8>)
   16620:	4293      	cmp	r3, r2
   16622:	d109      	bne.n	16638 <mp_obj_instance_make_new+0x1b4>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   16624:	697b      	ldr	r3, [r7, #20]
   16626:	68dc      	ldr	r4, [r3, #12]
   16628:	6978      	ldr	r0, [r7, #20]
   1662a:	683b      	ldr	r3, [r7, #0]
   1662c:	687a      	ldr	r2, [r7, #4]
   1662e:	68b9      	ldr	r1, [r7, #8]
   16630:	47a0      	blx	r4
   16632:	4602      	mov	r2, r0
   16634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16636:	611a      	str	r2, [r3, #16]
    }

    return MP_OBJ_FROM_PTR(o);
   16638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1663a:	4618      	mov	r0, r3
   1663c:	374c      	adds	r7, #76	; 0x4c
   1663e:	46bd      	mov	sp, r7
   16640:	bd90      	pop	{r4, r7, pc}
   16642:	bf00      	nop
   16644:	00016485 	.word	0x00016485
   16648:	00021f58 	.word	0x00021f58
   1664c:	00022374 	.word	0x00022374
   16650:	00021e9c 	.word	0x00021e9c
   16654:	00021480 	.word	0x00021480
   16658:	00021f78 	.word	0x00021f78
   1665c:	00021eb0 	.word	0x00021eb0

00016660 <instance_unary_op>:
    #if MICROPY_PY_SYS_GETSIZEOF
    [MP_UNARY_OP_SIZEOF] = MP_QSTR___sizeof__,
    #endif
};

STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   16660:	b580      	push	{r7, lr}
   16662:	b08c      	sub	sp, #48	; 0x30
   16664:	af00      	add	r7, sp, #0
   16666:	6078      	str	r0, [r7, #4]
   16668:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1666a:	683b      	ldr	r3, [r7, #0]
   1666c:	62bb      	str	r3, [r7, #40]	; 0x28
            + sizeof(*self->members.table) * self->members.alloc;
        return MP_OBJ_NEW_SMALL_INT(sz);
    }
    #endif

    qstr op_name = mp_unary_op_method_name[op];
   1666e:	4a2c      	ldr	r2, [pc, #176]	; (16720 <instance_unary_op+0xc0>)
   16670:	687b      	ldr	r3, [r7, #4]
   16672:	4413      	add	r3, r2
   16674:	781b      	ldrb	r3, [r3, #0]
   16676:	627b      	str	r3, [r7, #36]	; 0x24
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16678:	f107 031c 	add.w	r3, r7, #28
   1667c:	2200      	movs	r2, #0
   1667e:	601a      	str	r2, [r3, #0]
   16680:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16682:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16684:	60bb      	str	r3, [r7, #8]
   16686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16688:	60fb      	str	r3, [r7, #12]
   1668a:	2314      	movs	r3, #20
   1668c:	613b      	str	r3, [r7, #16]
   1668e:	f107 031c 	add.w	r3, r7, #28
   16692:	617b      	str	r3, [r7, #20]
   16694:	2300      	movs	r3, #0
   16696:	763b      	strb	r3, [r7, #24]
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, unary_op),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16698:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1669a:	681a      	ldr	r2, [r3, #0]
   1669c:	f107 0308 	add.w	r3, r7, #8
   166a0:	4611      	mov	r1, r2
   166a2:	4618      	mov	r0, r3
   166a4:	f7ff fd36 	bl	16114 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   166a8:	69fb      	ldr	r3, [r7, #28]
   166aa:	2b08      	cmp	r3, #8
   166ac:	d107      	bne.n	166be <instance_unary_op+0x5e>
        return mp_unary_op(op, self->subobj[0]);
   166ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166b0:	691b      	ldr	r3, [r3, #16]
   166b2:	4619      	mov	r1, r3
   166b4:	6878      	ldr	r0, [r7, #4]
   166b6:	f7f5 f82f 	bl	b718 <mp_unary_op>
   166ba:	4603      	mov	r3, r0
   166bc:	e02b      	b.n	16716 <instance_unary_op+0xb6>
    } else if (member[0] != MP_OBJ_NULL) {
   166be:	69fb      	ldr	r3, [r7, #28]
   166c0:	2b00      	cmp	r3, #0
   166c2:	d012      	beq.n	166ea <instance_unary_op+0x8a>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   166c4:	69fb      	ldr	r3, [r7, #28]
   166c6:	6839      	ldr	r1, [r7, #0]
   166c8:	4618      	mov	r0, r3
   166ca:	f7f5 fb7d 	bl	bdc8 <mp_call_function_1>
   166ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        // __hash__ must return a small int
        if (op == MP_UNARY_OP_HASH) {
   166d0:	687b      	ldr	r3, [r7, #4]
   166d2:	2b06      	cmp	r3, #6
   166d4:	d107      	bne.n	166e6 <instance_unary_op+0x86>
            val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   166d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   166d8:	f7f7 fa8e 	bl	dbf8 <mp_obj_get_int_truncated>
   166dc:	4603      	mov	r3, r0
   166de:	005b      	lsls	r3, r3, #1
   166e0:	f043 0301 	orr.w	r3, r3, #1
   166e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        return val;
   166e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   166e8:	e015      	b.n	16716 <instance_unary_op+0xb6>
    } else {
        if (op == MP_UNARY_OP_HASH) {
   166ea:	687b      	ldr	r3, [r7, #4]
   166ec:	2b06      	cmp	r3, #6
   166ee:	d111      	bne.n	16714 <instance_unary_op+0xb4>
            lookup.attr = MP_QSTR___eq__;
   166f0:	230a      	movs	r3, #10
   166f2:	60fb      	str	r3, [r7, #12]
            mp_obj_class_lookup(&lookup, self->base.type);
   166f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166f6:	681a      	ldr	r2, [r3, #0]
   166f8:	f107 0308 	add.w	r3, r7, #8
   166fc:	4611      	mov	r1, r2
   166fe:	4618      	mov	r0, r3
   16700:	f7ff fd08 	bl	16114 <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   16704:	69fb      	ldr	r3, [r7, #28]
   16706:	2b00      	cmp	r3, #0
   16708:	d104      	bne.n	16714 <instance_unary_op+0xb4>
                // https://docs.python.org/3/reference/datamodel.html#object.__hash__
                // "User-defined classes have __eq__() and __hash__() methods by default;
                // with them, all objects compare unequal (except with themselves) and
                // x.__hash__() returns an appropriate value such that x == y implies
                // both that x is y and hash(x) == hash(y)."
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   1670a:	683b      	ldr	r3, [r7, #0]
   1670c:	005b      	lsls	r3, r3, #1
   1670e:	f043 0301 	orr.w	r3, r3, #1
   16712:	e000      	b.n	16716 <instance_unary_op+0xb6>
            }
            // "A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None.
            // When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError"
        }

        return MP_OBJ_NULL; // op not supported
   16714:	2300      	movs	r3, #0
    }
}
   16716:	4618      	mov	r0, r3
   16718:	3730      	adds	r7, #48	; 0x30
   1671a:	46bd      	mov	sp, r7
   1671c:	bd80      	pop	{r7, pc}
   1671e:	bf00      	nop
   16720:	00021f98 	.word	0x00021f98

00016724 <instance_binary_op>:
    [MP_BINARY_OP_REVERSE_RSHIFT] = MP_QSTR___rrshift__,
    #endif
    #endif
};

STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   16724:	b580      	push	{r7, lr}
   16726:	b090      	sub	sp, #64	; 0x40
   16728:	af00      	add	r7, sp, #0
   1672a:	60f8      	str	r0, [r7, #12]
   1672c:	60b9      	str	r1, [r7, #8]
   1672e:	607a      	str	r2, [r7, #4]
    // Note: For ducktyping, CPython does not look in the instance members or use
    // __getattr__ or __getattribute__.  It only looks in the class dictionary.
    mp_obj_instance_t *lhs = MP_OBJ_TO_PTR(lhs_in);
   16730:	68bb      	ldr	r3, [r7, #8]
   16732:	63bb      	str	r3, [r7, #56]	; 0x38
retry:;
    qstr op_name = mp_binary_op_method_name[op];
   16734:	4a24      	ldr	r2, [pc, #144]	; (167c8 <instance_binary_op+0xa4>)
   16736:	68fb      	ldr	r3, [r7, #12]
   16738:	4413      	add	r3, r2
   1673a:	781b      	ldrb	r3, [r3, #0]
   1673c:	637b      	str	r3, [r7, #52]	; 0x34
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   1673e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16742:	2200      	movs	r2, #0
   16744:	601a      	str	r2, [r3, #0]
   16746:	605a      	str	r2, [r3, #4]
   16748:	609a      	str	r2, [r3, #8]
    struct class_lookup_data lookup = {
   1674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1674c:	617b      	str	r3, [r7, #20]
   1674e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16750:	61bb      	str	r3, [r7, #24]
   16752:	2318      	movs	r3, #24
   16754:	61fb      	str	r3, [r7, #28]
   16756:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1675a:	623b      	str	r3, [r7, #32]
   1675c:	2300      	movs	r3, #0
   1675e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, binary_op),
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, lhs->base.type);
   16762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16764:	681a      	ldr	r2, [r3, #0]
   16766:	f107 0314 	add.w	r3, r7, #20
   1676a:	4611      	mov	r1, r2
   1676c:	4618      	mov	r0, r3
   1676e:	f7ff fcd1 	bl	16114 <mp_obj_class_lookup>

    mp_obj_t res;
    if (dest[0] == MP_OBJ_SENTINEL) {
   16772:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16774:	2b08      	cmp	r3, #8
   16776:	d108      	bne.n	1678a <instance_binary_op+0x66>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   16778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1677a:	691b      	ldr	r3, [r3, #16]
   1677c:	687a      	ldr	r2, [r7, #4]
   1677e:	4619      	mov	r1, r3
   16780:	68f8      	ldr	r0, [r7, #12]
   16782:	f7f5 f8af 	bl	b8e4 <mp_binary_op>
   16786:	63f8      	str	r0, [r7, #60]	; 0x3c
   16788:	e019      	b.n	167be <instance_binary_op+0x9a>
    } else if (dest[0] != MP_OBJ_NULL) {
   1678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1678c:	2b00      	cmp	r3, #0
   1678e:	d00a      	beq.n	167a6 <instance_binary_op+0x82>
        dest[2] = rhs_in;
   16790:	687b      	ldr	r3, [r7, #4]
   16792:	633b      	str	r3, [r7, #48]	; 0x30
        res = mp_call_method_n_kw(1, 0, dest);
   16794:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16798:	461a      	mov	r2, r3
   1679a:	2100      	movs	r1, #0
   1679c:	2001      	movs	r0, #1
   1679e:	f7f5 fb5b 	bl	be58 <mp_call_method_n_kw>
   167a2:	63f8      	str	r0, [r7, #60]	; 0x3c
   167a4:	e00b      	b.n	167be <instance_binary_op+0x9a>
    } else {
        // If this was an inplace method, fallback to normal method
        // https://docs.python.org/3/reference/datamodel.html#object.__iadd__ :
        // "If a specific method is not defined, the augmented assignment
        // falls back to the normal methods."
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   167a6:	68fb      	ldr	r3, [r7, #12]
   167a8:	2b08      	cmp	r3, #8
   167aa:	d906      	bls.n	167ba <instance_binary_op+0x96>
   167ac:	68fb      	ldr	r3, [r7, #12]
   167ae:	2b14      	cmp	r3, #20
   167b0:	d803      	bhi.n	167ba <instance_binary_op+0x96>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   167b2:	68fb      	ldr	r3, [r7, #12]
   167b4:	330c      	adds	r3, #12
   167b6:	60fb      	str	r3, [r7, #12]
            goto retry;
   167b8:	e7bc      	b.n	16734 <instance_binary_op+0x10>
        }
        return MP_OBJ_NULL; // op not supported
   167ba:	2300      	movs	r3, #0
   167bc:	e000      	b.n	167c0 <instance_binary_op+0x9c>
    if (res == mp_const_notimplemented) {
        return MP_OBJ_NULL; // op not supported
    }
    #endif

    return res;
   167be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   167c0:	4618      	mov	r0, r3
   167c2:	3740      	adds	r7, #64	; 0x40
   167c4:	46bd      	mov	sp, r7
   167c6:	bd80      	pop	{r7, pc}
   167c8:	00021fa4 	.word	0x00021fa4

000167cc <mp_obj_instance_load_attr>:

STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   167cc:	b580      	push	{r7, lr}
   167ce:	b090      	sub	sp, #64	; 0x40
   167d0:	af00      	add	r7, sp, #0
   167d2:	60f8      	str	r0, [r7, #12]
   167d4:	60b9      	str	r1, [r7, #8]
   167d6:	607a      	str	r2, [r7, #4]
    // logic: look in instance members then class locals
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   167d8:	68f8      	ldr	r0, [r7, #12]
   167da:	f7f6 fff7 	bl	d7cc <mp_obj_get_type>
   167de:	4603      	mov	r3, r0
   167e0:	68db      	ldr	r3, [r3, #12]
   167e2:	4a2f      	ldr	r2, [pc, #188]	; (168a0 <mp_obj_instance_load_attr+0xd4>)
   167e4:	4293      	cmp	r3, r2
   167e6:	d006      	beq.n	167f6 <mp_obj_instance_load_attr+0x2a>
   167e8:	4b2e      	ldr	r3, [pc, #184]	; (168a4 <mp_obj_instance_load_attr+0xd8>)
   167ea:	4a2f      	ldr	r2, [pc, #188]	; (168a8 <mp_obj_instance_load_attr+0xdc>)
   167ec:	f240 2135 	movw	r1, #565	; 0x235
   167f0:	482e      	ldr	r0, [pc, #184]	; (168ac <mp_obj_instance_load_attr+0xe0>)
   167f2:	f004 fdd3 	bl	1b39c <__assert_func>
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   167f6:	68fb      	ldr	r3, [r7, #12]
   167f8:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   167fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   167fc:	1d18      	adds	r0, r3, #4
   167fe:	68bb      	ldr	r3, [r7, #8]
   16800:	009b      	lsls	r3, r3, #2
   16802:	f043 0302 	orr.w	r3, r3, #2
   16806:	2200      	movs	r2, #0
   16808:	4619      	mov	r1, r3
   1680a:	f7f6 fe35 	bl	d478 <mp_map_lookup>
   1680e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (elem != NULL) {
   16810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16812:	2b00      	cmp	r3, #0
   16814:	d004      	beq.n	16820 <mp_obj_instance_load_attr+0x54>
        // object member, always treated as a value
        dest[0] = elem->value;
   16816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16818:	685a      	ldr	r2, [r3, #4]
   1681a:	687b      	ldr	r3, [r7, #4]
   1681c:	601a      	str	r2, [r3, #0]
        return;
   1681e:	e03b      	b.n	16898 <mp_obj_instance_load_attr+0xcc>
        }
        dest[0] = attr_dict;
        return;
    }
#endif
    struct class_lookup_data lookup = {
   16820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16822:	623b      	str	r3, [r7, #32]
   16824:	68bb      	ldr	r3, [r7, #8]
   16826:	627b      	str	r3, [r7, #36]	; 0x24
   16828:	2300      	movs	r3, #0
   1682a:	62bb      	str	r3, [r7, #40]	; 0x28
   1682c:	687b      	ldr	r3, [r7, #4]
   1682e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16830:	2300      	movs	r3, #0
   16832:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        .attr = attr,
        .meth_offset = 0,
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16838:	681a      	ldr	r2, [r3, #0]
   1683a:	f107 0320 	add.w	r3, r7, #32
   1683e:	4611      	mov	r1, r2
   16840:	4618      	mov	r0, r3
   16842:	f7ff fc67 	bl	16114 <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   16846:	687b      	ldr	r3, [r7, #4]
   16848:	681b      	ldr	r3, [r3, #0]
   1684a:	637b      	str	r3, [r7, #52]	; 0x34
    if (member != MP_OBJ_NULL) {
   1684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1684e:	2b00      	cmp	r3, #0
   16850:	d006      	beq.n	16860 <mp_obj_instance_load_attr+0x94>
        if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   16852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16854:	681b      	ldr	r3, [r3, #0]
   16856:	889b      	ldrh	r3, [r3, #4]
   16858:	f003 0302 	and.w	r3, r3, #2
   1685c:	2b00      	cmp	r3, #0
            attr_get_method[2] = self_in;
            attr_get_method[3] = MP_OBJ_FROM_PTR(mp_obj_get_type(self_in));
            dest[0] = mp_call_method_n_kw(2, 0, attr_get_method);
        }
        #endif
        return;
   1685e:	e01b      	b.n	16898 <mp_obj_instance_load_attr+0xcc>
    }

    // try __getattr__
    if (attr != MP_QSTR___getattr__) {
   16860:	68bb      	ldr	r3, [r7, #8]
   16862:	2b0d      	cmp	r3, #13
   16864:	d018      	beq.n	16898 <mp_obj_instance_load_attr+0xcc>
            return;
        }
        #endif

        mp_obj_t dest2[3];
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   16866:	f107 0314 	add.w	r3, r7, #20
   1686a:	461a      	mov	r2, r3
   1686c:	210d      	movs	r1, #13
   1686e:	68f8      	ldr	r0, [r7, #12]
   16870:	f7f5 ff6a 	bl	c748 <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   16874:	697b      	ldr	r3, [r7, #20]
   16876:	2b00      	cmp	r3, #0
   16878:	d00e      	beq.n	16898 <mp_obj_instance_load_attr+0xcc>
            // __getattr__ exists, call it and return its result
            // XXX if this fails to load the requested attr, should we catch the attribute error and return silently?
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   1687a:	68bb      	ldr	r3, [r7, #8]
   1687c:	009b      	lsls	r3, r3, #2
   1687e:	f043 0302 	orr.w	r3, r3, #2
   16882:	61fb      	str	r3, [r7, #28]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   16884:	f107 0314 	add.w	r3, r7, #20
   16888:	461a      	mov	r2, r3
   1688a:	2100      	movs	r1, #0
   1688c:	2001      	movs	r0, #1
   1688e:	f7f5 fae3 	bl	be58 <mp_call_method_n_kw>
   16892:	4602      	mov	r2, r0
   16894:	687b      	ldr	r3, [r7, #4]
   16896:	601a      	str	r2, [r3, #0]
            return;
        }
    }
}
   16898:	3740      	adds	r7, #64	; 0x40
   1689a:	46bd      	mov	sp, r7
   1689c:	bd80      	pop	{r7, pc}
   1689e:	bf00      	nop
   168a0:	00016485 	.word	0x00016485
   168a4:	00021fc8 	.word	0x00021fc8
   168a8:	00022390 	.word	0x00022390
   168ac:	00021e9c 	.word	0x00021e9c

000168b0 <mp_obj_instance_store_attr>:

STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   168b0:	b580      	push	{r7, lr}
   168b2:	b086      	sub	sp, #24
   168b4:	af00      	add	r7, sp, #0
   168b6:	60f8      	str	r0, [r7, #12]
   168b8:	60b9      	str	r1, [r7, #8]
   168ba:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   168bc:	68fb      	ldr	r3, [r7, #12]
   168be:	617b      	str	r3, [r7, #20]

    if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   168c0:	697b      	ldr	r3, [r7, #20]
   168c2:	681b      	ldr	r3, [r3, #0]
   168c4:	889b      	ldrh	r3, [r3, #4]
   168c6:	f003 0302 	and.w	r3, r3, #2
   168ca:	2b00      	cmp	r3, #0
    }
    #endif

skip_special_accessors:

    if (value == MP_OBJ_NULL) {
   168cc:	687b      	ldr	r3, [r7, #4]
   168ce:	2b00      	cmp	r3, #0
   168d0:	d111      	bne.n	168f6 <mp_obj_instance_store_attr+0x46>
        // delete attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   168d2:	697b      	ldr	r3, [r7, #20]
   168d4:	1d18      	adds	r0, r3, #4
   168d6:	68bb      	ldr	r3, [r7, #8]
   168d8:	009b      	lsls	r3, r3, #2
   168da:	f043 0302 	orr.w	r3, r3, #2
   168de:	2202      	movs	r2, #2
   168e0:	4619      	mov	r1, r3
   168e2:	f7f6 fdc9 	bl	d478 <mp_map_lookup>
   168e6:	6138      	str	r0, [r7, #16]
        return elem != NULL;
   168e8:	693b      	ldr	r3, [r7, #16]
   168ea:	2b00      	cmp	r3, #0
   168ec:	bf14      	ite	ne
   168ee:	2301      	movne	r3, #1
   168f0:	2300      	moveq	r3, #0
   168f2:	b2db      	uxtb	r3, r3
   168f4:	e00d      	b.n	16912 <mp_obj_instance_store_attr+0x62>
    } else {
        // store attribute
        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   168f6:	697b      	ldr	r3, [r7, #20]
   168f8:	1d18      	adds	r0, r3, #4
   168fa:	68bb      	ldr	r3, [r7, #8]
   168fc:	009b      	lsls	r3, r3, #2
   168fe:	f043 0302 	orr.w	r3, r3, #2
   16902:	2201      	movs	r2, #1
   16904:	4619      	mov	r1, r3
   16906:	f7f6 fdb7 	bl	d478 <mp_map_lookup>
   1690a:	4602      	mov	r2, r0
   1690c:	687b      	ldr	r3, [r7, #4]
   1690e:	6053      	str	r3, [r2, #4]
        return true;
   16910:	2301      	movs	r3, #1
    }
}
   16912:	4618      	mov	r0, r3
   16914:	3718      	adds	r7, #24
   16916:	46bd      	mov	sp, r7
   16918:	bd80      	pop	{r7, pc}
   1691a:	bf00      	nop

0001691c <mp_obj_instance_attr>:

STATIC void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   1691c:	b580      	push	{r7, lr}
   1691e:	b084      	sub	sp, #16
   16920:	af00      	add	r7, sp, #0
   16922:	60f8      	str	r0, [r7, #12]
   16924:	60b9      	str	r1, [r7, #8]
   16926:	607a      	str	r2, [r7, #4]
    if (dest[0] == MP_OBJ_NULL) {
   16928:	687b      	ldr	r3, [r7, #4]
   1692a:	681b      	ldr	r3, [r3, #0]
   1692c:	2b00      	cmp	r3, #0
   1692e:	d105      	bne.n	1693c <mp_obj_instance_attr+0x20>
        mp_obj_instance_load_attr(self_in, attr, dest);
   16930:	687a      	ldr	r2, [r7, #4]
   16932:	68b9      	ldr	r1, [r7, #8]
   16934:	68f8      	ldr	r0, [r7, #12]
   16936:	f7ff ff49 	bl	167cc <mp_obj_instance_load_attr>
    } else {
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
            dest[0] = MP_OBJ_NULL; // indicate success
        }
    }
}
   1693a:	e00d      	b.n	16958 <mp_obj_instance_attr+0x3c>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   1693c:	687b      	ldr	r3, [r7, #4]
   1693e:	3304      	adds	r3, #4
   16940:	681b      	ldr	r3, [r3, #0]
   16942:	461a      	mov	r2, r3
   16944:	68b9      	ldr	r1, [r7, #8]
   16946:	68f8      	ldr	r0, [r7, #12]
   16948:	f7ff ffb2 	bl	168b0 <mp_obj_instance_store_attr>
   1694c:	4603      	mov	r3, r0
   1694e:	2b00      	cmp	r3, #0
   16950:	d002      	beq.n	16958 <mp_obj_instance_attr+0x3c>
            dest[0] = MP_OBJ_NULL; // indicate success
   16952:	687b      	ldr	r3, [r7, #4]
   16954:	2200      	movs	r2, #0
   16956:	601a      	str	r2, [r3, #0]
}
   16958:	bf00      	nop
   1695a:	3710      	adds	r7, #16
   1695c:	46bd      	mov	sp, r7
   1695e:	bd80      	pop	{r7, pc}

00016960 <instance_subscr>:

STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   16960:	b580      	push	{r7, lr}
   16962:	b092      	sub	sp, #72	; 0x48
   16964:	af00      	add	r7, sp, #0
   16966:	60f8      	str	r0, [r7, #12]
   16968:	60b9      	str	r1, [r7, #8]
   1696a:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1696c:	68fb      	ldr	r3, [r7, #12]
   1696e:	643b      	str	r3, [r7, #64]	; 0x40
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16970:	f107 0334 	add.w	r3, r7, #52	; 0x34
   16974:	2200      	movs	r2, #0
   16976:	601a      	str	r2, [r3, #0]
   16978:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   1697a:	f107 0320 	add.w	r3, r7, #32
   1697e:	2200      	movs	r2, #0
   16980:	601a      	str	r2, [r3, #0]
   16982:	605a      	str	r2, [r3, #4]
   16984:	609a      	str	r2, [r3, #8]
   16986:	60da      	str	r2, [r3, #12]
   16988:	611a      	str	r2, [r3, #16]
   1698a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1698c:	623b      	str	r3, [r7, #32]
   1698e:	2320      	movs	r3, #32
   16990:	62bb      	str	r3, [r7, #40]	; 0x28
   16992:	f107 0334 	add.w	r3, r7, #52	; 0x34
   16996:	62fb      	str	r3, [r7, #44]	; 0x2c
        .meth_offset = offsetof(mp_obj_type_t, subscr),
        .dest = member,
        .is_type = false,
    };
    size_t meth_args;
    if (value == MP_OBJ_NULL) {
   16998:	687b      	ldr	r3, [r7, #4]
   1699a:	2b00      	cmp	r3, #0
   1699c:	d10c      	bne.n	169b8 <instance_subscr+0x58>
        // delete item
        lookup.attr = MP_QSTR___delitem__;
   1699e:	2308      	movs	r3, #8
   169a0:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   169a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169a4:	681a      	ldr	r2, [r3, #0]
   169a6:	f107 0320 	add.w	r3, r7, #32
   169aa:	4611      	mov	r1, r2
   169ac:	4618      	mov	r0, r3
   169ae:	f7ff fbb1 	bl	16114 <mp_obj_class_lookup>
        meth_args = 2;
   169b2:	2302      	movs	r3, #2
   169b4:	647b      	str	r3, [r7, #68]	; 0x44
   169b6:	e01b      	b.n	169f0 <instance_subscr+0x90>
    } else if (value == MP_OBJ_SENTINEL) {
   169b8:	687b      	ldr	r3, [r7, #4]
   169ba:	2b08      	cmp	r3, #8
   169bc:	d10c      	bne.n	169d8 <instance_subscr+0x78>
        // load item
        lookup.attr = MP_QSTR___getitem__;
   169be:	230e      	movs	r3, #14
   169c0:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   169c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169c4:	681a      	ldr	r2, [r3, #0]
   169c6:	f107 0320 	add.w	r3, r7, #32
   169ca:	4611      	mov	r1, r2
   169cc:	4618      	mov	r0, r3
   169ce:	f7ff fba1 	bl	16114 <mp_obj_class_lookup>
        meth_args = 2;
   169d2:	2302      	movs	r3, #2
   169d4:	647b      	str	r3, [r7, #68]	; 0x44
   169d6:	e00b      	b.n	169f0 <instance_subscr+0x90>
    } else {
        // store item
        lookup.attr = MP_QSTR___setitem__;
   169d8:	2322      	movs	r3, #34	; 0x22
   169da:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   169dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169de:	681a      	ldr	r2, [r3, #0]
   169e0:	f107 0320 	add.w	r3, r7, #32
   169e4:	4611      	mov	r1, r2
   169e6:	4618      	mov	r0, r3
   169e8:	f7ff fb94 	bl	16114 <mp_obj_class_lookup>
        meth_args = 3;
   169ec:	2303      	movs	r3, #3
   169ee:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (member[0] == MP_OBJ_SENTINEL) {
   169f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169f2:	2b08      	cmp	r3, #8
   169f4:	d108      	bne.n	16a08 <instance_subscr+0xa8>
        return mp_obj_subscr(self->subobj[0], index, value);
   169f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169f8:	691b      	ldr	r3, [r3, #16]
   169fa:	687a      	ldr	r2, [r7, #4]
   169fc:	68b9      	ldr	r1, [r7, #8]
   169fe:	4618      	mov	r0, r3
   16a00:	f7f7 fa88 	bl	df14 <mp_obj_subscr>
   16a04:	4603      	mov	r3, r0
   16a06:	e018      	b.n	16a3a <instance_subscr+0xda>
    } else if (member[0] != MP_OBJ_NULL) {
   16a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a0a:	2b00      	cmp	r3, #0
   16a0c:	d014      	beq.n	16a38 <instance_subscr+0xd8>
        mp_obj_t args[3] = {self_in, index, value};
   16a0e:	68fb      	ldr	r3, [r7, #12]
   16a10:	617b      	str	r3, [r7, #20]
   16a12:	68bb      	ldr	r3, [r7, #8]
   16a14:	61bb      	str	r3, [r7, #24]
   16a16:	687b      	ldr	r3, [r7, #4]
   16a18:	61fb      	str	r3, [r7, #28]
        // TODO probably need to call mp_convert_member_lookup, and use mp_call_method_n_kw
        mp_obj_t ret = mp_call_function_n_kw(member[0], meth_args, 0, args);
   16a1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16a1c:	f107 0314 	add.w	r3, r7, #20
   16a20:	2200      	movs	r2, #0
   16a22:	6c79      	ldr	r1, [r7, #68]	; 0x44
   16a24:	f7f5 f9f6 	bl	be14 <mp_call_function_n_kw>
   16a28:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (value == MP_OBJ_SENTINEL) {
   16a2a:	687b      	ldr	r3, [r7, #4]
   16a2c:	2b08      	cmp	r3, #8
   16a2e:	d101      	bne.n	16a34 <instance_subscr+0xd4>
            return ret;
   16a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a32:	e002      	b.n	16a3a <instance_subscr+0xda>
        } else {
            return mp_const_none;
   16a34:	4b03      	ldr	r3, [pc, #12]	; (16a44 <instance_subscr+0xe4>)
   16a36:	e000      	b.n	16a3a <instance_subscr+0xda>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   16a38:	2300      	movs	r3, #0
    }
}
   16a3a:	4618      	mov	r0, r3
   16a3c:	3748      	adds	r7, #72	; 0x48
   16a3e:	46bd      	mov	sp, r7
   16a40:	bd80      	pop	{r7, pc}
   16a42:	bf00      	nop
   16a44:	00021480 	.word	0x00021480

00016a48 <mp_obj_instance_get_call>:

STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   16a48:	b580      	push	{r7, lr}
   16a4a:	b088      	sub	sp, #32
   16a4c:	af00      	add	r7, sp, #0
   16a4e:	6078      	str	r0, [r7, #4]
   16a50:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16a52:	687b      	ldr	r3, [r7, #4]
   16a54:	61fb      	str	r3, [r7, #28]
    struct class_lookup_data lookup = {
   16a56:	69fb      	ldr	r3, [r7, #28]
   16a58:	60bb      	str	r3, [r7, #8]
   16a5a:	2305      	movs	r3, #5
   16a5c:	60fb      	str	r3, [r7, #12]
   16a5e:	2310      	movs	r3, #16
   16a60:	613b      	str	r3, [r7, #16]
   16a62:	683b      	ldr	r3, [r7, #0]
   16a64:	617b      	str	r3, [r7, #20]
   16a66:	2300      	movs	r3, #0
   16a68:	763b      	strb	r3, [r7, #24]
        .attr = MP_QSTR___call__,
        .meth_offset = offsetof(mp_obj_type_t, call),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16a6a:	69fb      	ldr	r3, [r7, #28]
   16a6c:	681a      	ldr	r2, [r3, #0]
   16a6e:	f107 0308 	add.w	r3, r7, #8
   16a72:	4611      	mov	r1, r2
   16a74:	4618      	mov	r0, r3
   16a76:	f7ff fb4d 	bl	16114 <mp_obj_class_lookup>
    return member[0];
   16a7a:	683b      	ldr	r3, [r7, #0]
   16a7c:	681b      	ldr	r3, [r3, #0]
}
   16a7e:	4618      	mov	r0, r3
   16a80:	3720      	adds	r7, #32
   16a82:	46bd      	mov	sp, r7
   16a84:	bd80      	pop	{r7, pc}
   16a86:	bf00      	nop

00016a88 <mp_obj_instance_is_callable>:

bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   16a88:	b580      	push	{r7, lr}
   16a8a:	b084      	sub	sp, #16
   16a8c:	af00      	add	r7, sp, #0
   16a8e:	6078      	str	r0, [r7, #4]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16a90:	2300      	movs	r3, #0
   16a92:	60bb      	str	r3, [r7, #8]
   16a94:	2300      	movs	r3, #0
   16a96:	60fb      	str	r3, [r7, #12]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   16a98:	f107 0308 	add.w	r3, r7, #8
   16a9c:	4619      	mov	r1, r3
   16a9e:	6878      	ldr	r0, [r7, #4]
   16aa0:	f7ff ffd2 	bl	16a48 <mp_obj_instance_get_call>
   16aa4:	4603      	mov	r3, r0
   16aa6:	2b00      	cmp	r3, #0
   16aa8:	bf14      	ite	ne
   16aaa:	2301      	movne	r3, #1
   16aac:	2300      	moveq	r3, #0
   16aae:	b2db      	uxtb	r3, r3
}
   16ab0:	4618      	mov	r0, r3
   16ab2:	3710      	adds	r7, #16
   16ab4:	46bd      	mov	sp, r7
   16ab6:	bd80      	pop	{r7, pc}

00016ab8 <mp_obj_instance_call>:

mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16ab8:	b580      	push	{r7, lr}
   16aba:	b08a      	sub	sp, #40	; 0x28
   16abc:	af02      	add	r7, sp, #8
   16abe:	60f8      	str	r0, [r7, #12]
   16ac0:	60b9      	str	r1, [r7, #8]
   16ac2:	607a      	str	r2, [r7, #4]
   16ac4:	603b      	str	r3, [r7, #0]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16ac6:	2300      	movs	r3, #0
   16ac8:	613b      	str	r3, [r7, #16]
   16aca:	2300      	movs	r3, #0
   16acc:	617b      	str	r3, [r7, #20]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   16ace:	f107 0310 	add.w	r3, r7, #16
   16ad2:	4619      	mov	r1, r3
   16ad4:	68f8      	ldr	r0, [r7, #12]
   16ad6:	f7ff ffb7 	bl	16a48 <mp_obj_instance_get_call>
   16ada:	61f8      	str	r0, [r7, #28]
    if (call == MP_OBJ_NULL) {
   16adc:	69fb      	ldr	r3, [r7, #28]
   16ade:	2b00      	cmp	r3, #0
   16ae0:	d102      	bne.n	16ae8 <mp_obj_instance_call+0x30>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object not callable");
   16ae2:	480f      	ldr	r0, [pc, #60]	; (16b20 <mp_obj_instance_call+0x68>)
   16ae4:	f7f6 fa58 	bl	cf98 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not callable", mp_obj_get_type_str(self_in)));
        }
    }
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16ae8:	68fb      	ldr	r3, [r7, #12]
   16aea:	61bb      	str	r3, [r7, #24]
    if (call == MP_OBJ_SENTINEL) {
   16aec:	69fb      	ldr	r3, [r7, #28]
   16aee:	2b08      	cmp	r3, #8
   16af0:	d108      	bne.n	16b04 <mp_obj_instance_call+0x4c>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   16af2:	69bb      	ldr	r3, [r7, #24]
   16af4:	6918      	ldr	r0, [r3, #16]
   16af6:	683b      	ldr	r3, [r7, #0]
   16af8:	687a      	ldr	r2, [r7, #4]
   16afa:	68b9      	ldr	r1, [r7, #8]
   16afc:	f7f5 f98a 	bl	be14 <mp_call_function_n_kw>
   16b00:	4603      	mov	r3, r0
   16b02:	e008      	b.n	16b16 <mp_obj_instance_call+0x5e>
    }

    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   16b04:	6938      	ldr	r0, [r7, #16]
   16b06:	6979      	ldr	r1, [r7, #20]
   16b08:	683b      	ldr	r3, [r7, #0]
   16b0a:	9300      	str	r3, [sp, #0]
   16b0c:	687b      	ldr	r3, [r7, #4]
   16b0e:	68ba      	ldr	r2, [r7, #8]
   16b10:	f7f7 fb24 	bl	e15c <mp_call_method_self_n_kw>
   16b14:	4603      	mov	r3, r0
}
   16b16:	4618      	mov	r0, r3
   16b18:	3720      	adds	r7, #32
   16b1a:	46bd      	mov	sp, r7
   16b1c:	bd80      	pop	{r7, pc}
   16b1e:	bf00      	nop
   16b20:	00021ffc 	.word	0x00021ffc

00016b24 <instance_getiter>:

STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   16b24:	b580      	push	{r7, lr}
   16b26:	b08c      	sub	sp, #48	; 0x30
   16b28:	af00      	add	r7, sp, #0
   16b2a:	6078      	str	r0, [r7, #4]
   16b2c:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16b2e:	687b      	ldr	r3, [r7, #4]
   16b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16b32:	f107 0320 	add.w	r3, r7, #32
   16b36:	2200      	movs	r2, #0
   16b38:	601a      	str	r2, [r3, #0]
   16b3a:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b3e:	60fb      	str	r3, [r7, #12]
   16b40:	2315      	movs	r3, #21
   16b42:	613b      	str	r3, [r7, #16]
   16b44:	2324      	movs	r3, #36	; 0x24
   16b46:	617b      	str	r3, [r7, #20]
   16b48:	f107 0320 	add.w	r3, r7, #32
   16b4c:	61bb      	str	r3, [r7, #24]
   16b4e:	2300      	movs	r3, #0
   16b50:	773b      	strb	r3, [r7, #28]
        .attr = MP_QSTR___iter__,
        .meth_offset = offsetof(mp_obj_type_t, getiter),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b54:	681a      	ldr	r2, [r3, #0]
   16b56:	f107 030c 	add.w	r3, r7, #12
   16b5a:	4611      	mov	r1, r2
   16b5c:	4618      	mov	r0, r3
   16b5e:	f7ff fad9 	bl	16114 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   16b62:	6a3b      	ldr	r3, [r7, #32]
   16b64:	2b00      	cmp	r3, #0
   16b66:	d101      	bne.n	16b6c <instance_getiter+0x48>
        return MP_OBJ_NULL;
   16b68:	2300      	movs	r3, #0
   16b6a:	e019      	b.n	16ba0 <instance_getiter+0x7c>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   16b6c:	6a3b      	ldr	r3, [r7, #32]
   16b6e:	2b08      	cmp	r3, #8
   16b70:	d10e      	bne.n	16b90 <instance_getiter+0x6c>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b74:	691b      	ldr	r3, [r3, #16]
   16b76:	4618      	mov	r0, r3
   16b78:	f7f6 fe28 	bl	d7cc <mp_obj_get_type>
   16b7c:	62b8      	str	r0, [r7, #40]	; 0x28
        return type->getiter(self->subobj[0], iter_buf);
   16b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16b84:	6912      	ldr	r2, [r2, #16]
   16b86:	6839      	ldr	r1, [r7, #0]
   16b88:	4610      	mov	r0, r2
   16b8a:	4798      	blx	r3
   16b8c:	4603      	mov	r3, r0
   16b8e:	e007      	b.n	16ba0 <instance_getiter+0x7c>
    } else {
        return mp_call_method_n_kw(0, 0, member);
   16b90:	f107 0320 	add.w	r3, r7, #32
   16b94:	461a      	mov	r2, r3
   16b96:	2100      	movs	r1, #0
   16b98:	2000      	movs	r0, #0
   16b9a:	f7f5 f95d 	bl	be58 <mp_call_method_n_kw>
   16b9e:	4603      	mov	r3, r0
    }
}
   16ba0:	4618      	mov	r0, r3
   16ba2:	3730      	adds	r7, #48	; 0x30
   16ba4:	46bd      	mov	sp, r7
   16ba6:	bd80      	pop	{r7, pc}

00016ba8 <instance_get_buffer>:

STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   16ba8:	b580      	push	{r7, lr}
   16baa:	b08e      	sub	sp, #56	; 0x38
   16bac:	af00      	add	r7, sp, #0
   16bae:	60f8      	str	r0, [r7, #12]
   16bb0:	60b9      	str	r1, [r7, #8]
   16bb2:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16bb4:	68fb      	ldr	r3, [r7, #12]
   16bb6:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16bbc:	2200      	movs	r2, #0
   16bbe:	601a      	str	r2, [r3, #0]
   16bc0:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16bc4:	617b      	str	r3, [r7, #20]
   16bc6:	2301      	movs	r3, #1
   16bc8:	61bb      	str	r3, [r7, #24]
   16bca:	232c      	movs	r3, #44	; 0x2c
   16bcc:	61fb      	str	r3, [r7, #28]
   16bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16bd2:	623b      	str	r3, [r7, #32]
   16bd4:	2300      	movs	r3, #0
   16bd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = MP_QSTR_, // don't actually look for a method
        .meth_offset = offsetof(mp_obj_type_t, buffer_p.get_buffer),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16bdc:	681a      	ldr	r2, [r3, #0]
   16bde:	f107 0314 	add.w	r3, r7, #20
   16be2:	4611      	mov	r1, r2
   16be4:	4618      	mov	r0, r3
   16be6:	f7ff fa95 	bl	16114 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16bec:	2b08      	cmp	r3, #8
   16bee:	d10e      	bne.n	16c0e <instance_get_buffer+0x66>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16bf2:	691b      	ldr	r3, [r3, #16]
   16bf4:	4618      	mov	r0, r3
   16bf6:	f7f6 fde9 	bl	d7cc <mp_obj_get_type>
   16bfa:	6338      	str	r0, [r7, #48]	; 0x30
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   16bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16c02:	6910      	ldr	r0, [r2, #16]
   16c04:	687a      	ldr	r2, [r7, #4]
   16c06:	68b9      	ldr	r1, [r7, #8]
   16c08:	4798      	blx	r3
   16c0a:	4603      	mov	r3, r0
   16c0c:	e000      	b.n	16c10 <instance_get_buffer+0x68>
    } else {
        return 1; // object does not support buffer protocol
   16c0e:	2301      	movs	r3, #1
    }
}
   16c10:	4618      	mov	r0, r3
   16c12:	3738      	adds	r7, #56	; 0x38
   16c14:	46bd      	mov	sp, r7
   16c16:	bd80      	pop	{r7, pc}

00016c18 <type_print>:
    #endif
    return false;
}
#endif

STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16c18:	b580      	push	{r7, lr}
   16c1a:	b086      	sub	sp, #24
   16c1c:	af00      	add	r7, sp, #0
   16c1e:	60f8      	str	r0, [r7, #12]
   16c20:	60b9      	str	r1, [r7, #8]
   16c22:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16c24:	68bb      	ldr	r3, [r7, #8]
   16c26:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<class '%q'>", self->name);
   16c28:	697b      	ldr	r3, [r7, #20]
   16c2a:	88db      	ldrh	r3, [r3, #6]
   16c2c:	461a      	mov	r2, r3
   16c2e:	4904      	ldr	r1, [pc, #16]	; (16c40 <type_print+0x28>)
   16c30:	68f8      	ldr	r0, [r7, #12]
   16c32:	f7eb f945 	bl	1ec0 <mp_printf>
}
   16c36:	bf00      	nop
   16c38:	3718      	adds	r7, #24
   16c3a:	46bd      	mov	sp, r7
   16c3c:	bd80      	pop	{r7, pc}
   16c3e:	bf00      	nop
   16c40:	00022010 	.word	0x00022010

00016c44 <type_make_new>:

STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16c44:	b580      	push	{r7, lr}
   16c46:	b086      	sub	sp, #24
   16c48:	af02      	add	r7, sp, #8
   16c4a:	60f8      	str	r0, [r7, #12]
   16c4c:	60b9      	str	r1, [r7, #8]
   16c4e:	607a      	str	r2, [r7, #4]
   16c50:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   16c52:	2300      	movs	r3, #0
   16c54:	9300      	str	r3, [sp, #0]
   16c56:	2303      	movs	r3, #3
   16c58:	2201      	movs	r2, #1
   16c5a:	6879      	ldr	r1, [r7, #4]
   16c5c:	68b8      	ldr	r0, [r7, #8]
   16c5e:	f7f6 f9c1 	bl	cfe4 <mp_arg_check_num>

    switch (n_args) {
   16c62:	68bb      	ldr	r3, [r7, #8]
   16c64:	2b01      	cmp	r3, #1
   16c66:	d002      	beq.n	16c6e <type_make_new+0x2a>
   16c68:	2b03      	cmp	r3, #3
   16c6a:	d007      	beq.n	16c7c <type_make_new+0x38>
   16c6c:	e016      	b.n	16c9c <type_make_new+0x58>
        case 1:
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   16c6e:	683b      	ldr	r3, [r7, #0]
   16c70:	681b      	ldr	r3, [r3, #0]
   16c72:	4618      	mov	r0, r3
   16c74:	f7f6 fdaa 	bl	d7cc <mp_obj_get_type>
   16c78:	4603      	mov	r3, r0
   16c7a:	e012      	b.n	16ca2 <type_make_new+0x5e>

        case 3:
            // args[0] = name
            // args[1] = bases tuple
            // args[2] = locals dict
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   16c7c:	683b      	ldr	r3, [r7, #0]
   16c7e:	681b      	ldr	r3, [r3, #0]
   16c80:	4618      	mov	r0, r3
   16c82:	f7fe fc85 	bl	15590 <mp_obj_str_get_qstr>
   16c86:	683b      	ldr	r3, [r7, #0]
   16c88:	3304      	adds	r3, #4
   16c8a:	6819      	ldr	r1, [r3, #0]
   16c8c:	683b      	ldr	r3, [r7, #0]
   16c8e:	3308      	adds	r3, #8
   16c90:	681b      	ldr	r3, [r3, #0]
   16c92:	461a      	mov	r2, r3
   16c94:	f000 f8b4 	bl	16e00 <mp_obj_new_type>
   16c98:	4603      	mov	r3, r0
   16c9a:	e002      	b.n	16ca2 <type_make_new+0x5e>

        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
   16c9c:	4803      	ldr	r0, [pc, #12]	; (16cac <type_make_new+0x68>)
   16c9e:	f7f6 f97b 	bl	cf98 <mp_raise_TypeError>
    }
}
   16ca2:	4618      	mov	r0, r3
   16ca4:	3710      	adds	r7, #16
   16ca6:	46bd      	mov	sp, r7
   16ca8:	bd80      	pop	{r7, pc}
   16caa:	bf00      	nop
   16cac:	00022020 	.word	0x00022020

00016cb0 <type_call>:

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16cb0:	b590      	push	{r4, r7, lr}
   16cb2:	b087      	sub	sp, #28
   16cb4:	af00      	add	r7, sp, #0
   16cb6:	60f8      	str	r0, [r7, #12]
   16cb8:	60b9      	str	r1, [r7, #8]
   16cba:	607a      	str	r2, [r7, #4]
   16cbc:	603b      	str	r3, [r7, #0]
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16cbe:	68fb      	ldr	r3, [r7, #12]
   16cc0:	617b      	str	r3, [r7, #20]

    if (self->make_new == NULL) {
   16cc2:	697b      	ldr	r3, [r7, #20]
   16cc4:	68db      	ldr	r3, [r3, #12]
   16cc6:	2b00      	cmp	r3, #0
   16cc8:	d102      	bne.n	16cd0 <type_call+0x20>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("cannot create instance");
   16cca:	4808      	ldr	r0, [pc, #32]	; (16cec <type_call+0x3c>)
   16ccc:	f7f6 f964 	bl	cf98 <mp_raise_TypeError>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   16cd0:	697b      	ldr	r3, [r7, #20]
   16cd2:	68dc      	ldr	r4, [r3, #12]
   16cd4:	683b      	ldr	r3, [r7, #0]
   16cd6:	687a      	ldr	r2, [r7, #4]
   16cd8:	68b9      	ldr	r1, [r7, #8]
   16cda:	6978      	ldr	r0, [r7, #20]
   16cdc:	47a0      	blx	r4
   16cde:	6138      	str	r0, [r7, #16]

    // return new instance
    return o;
   16ce0:	693b      	ldr	r3, [r7, #16]
}
   16ce2:	4618      	mov	r0, r3
   16ce4:	371c      	adds	r7, #28
   16ce6:	46bd      	mov	sp, r7
   16ce8:	bd90      	pop	{r4, r7, pc}
   16cea:	bf00      	nop
   16cec:	0002203c 	.word	0x0002203c

00016cf0 <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16cf0:	b580      	push	{r7, lr}
   16cf2:	b08e      	sub	sp, #56	; 0x38
   16cf4:	af00      	add	r7, sp, #0
   16cf6:	60f8      	str	r0, [r7, #12]
   16cf8:	60b9      	str	r1, [r7, #8]
   16cfa:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   16cfc:	68f8      	ldr	r0, [r7, #12]
   16cfe:	f7ff f927 	bl	15f50 <MP_OBJ_IS_OBJ>
   16d02:	4603      	mov	r3, r0
   16d04:	f083 0301 	eor.w	r3, r3, #1
   16d08:	b2db      	uxtb	r3, r3
   16d0a:	2b00      	cmp	r3, #0
   16d0c:	d104      	bne.n	16d18 <type_attr+0x28>
   16d0e:	68fb      	ldr	r3, [r7, #12]
   16d10:	681b      	ldr	r3, [r3, #0]
   16d12:	4a35      	ldr	r2, [pc, #212]	; (16de8 <type_attr+0xf8>)
   16d14:	4293      	cmp	r3, r2
   16d16:	d006      	beq.n	16d26 <type_attr+0x36>
   16d18:	4b34      	ldr	r3, [pc, #208]	; (16dec <type_attr+0xfc>)
   16d1a:	4a35      	ldr	r2, [pc, #212]	; (16df0 <type_attr+0x100>)
   16d1c:	f240 31e5 	movw	r1, #997	; 0x3e5
   16d20:	4834      	ldr	r0, [pc, #208]	; (16df4 <type_attr+0x104>)
   16d22:	f004 fb3b 	bl	1b39c <__assert_func>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16d26:	68fb      	ldr	r3, [r7, #12]
   16d28:	637b      	str	r3, [r7, #52]	; 0x34

    if (dest[0] == MP_OBJ_NULL) {
   16d2a:	687b      	ldr	r3, [r7, #4]
   16d2c:	681b      	ldr	r3, [r3, #0]
   16d2e:	2b00      	cmp	r3, #0
   16d30:	d111      	bne.n	16d56 <type_attr+0x66>
        if (attr == MP_QSTR___name__) {
            dest[0] = MP_OBJ_NEW_QSTR(self->name);
            return;
        }
        #endif
        struct class_lookup_data lookup = {
   16d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d34:	617b      	str	r3, [r7, #20]
   16d36:	68bb      	ldr	r3, [r7, #8]
   16d38:	61bb      	str	r3, [r7, #24]
   16d3a:	2300      	movs	r3, #0
   16d3c:	61fb      	str	r3, [r7, #28]
   16d3e:	687b      	ldr	r3, [r7, #4]
   16d40:	623b      	str	r3, [r7, #32]
   16d42:	2301      	movs	r3, #1
   16d44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            .attr = attr,
            .meth_offset = 0,
            .dest = dest,
            .is_type = true,
        };
        mp_obj_class_lookup(&lookup, self);
   16d48:	f107 0314 	add.w	r3, r7, #20
   16d4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16d4e:	4618      	mov	r0, r3
   16d50:	f7ff f9e0 	bl	16114 <mp_obj_class_lookup>
   16d54:	e044      	b.n	16de0 <type_attr+0xf0>
    } else {
        // delete/store attribute

        // TODO CPython allows STORE_ATTR to a class, but is this the correct implementation?

        if (self->locals_dict != NULL) {
   16d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16d5a:	2b00      	cmp	r3, #0
   16d5c:	d040      	beq.n	16de0 <type_attr+0xf0>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   16d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16d62:	681b      	ldr	r3, [r3, #0]
   16d64:	4a24      	ldr	r2, [pc, #144]	; (16df8 <type_attr+0x108>)
   16d66:	4293      	cmp	r3, r2
   16d68:	d006      	beq.n	16d78 <type_attr+0x88>
   16d6a:	4b24      	ldr	r3, [pc, #144]	; (16dfc <type_attr+0x10c>)
   16d6c:	4a20      	ldr	r2, [pc, #128]	; (16df0 <type_attr+0x100>)
   16d6e:	f240 31fe 	movw	r1, #1022	; 0x3fe
   16d72:	4820      	ldr	r0, [pc, #128]	; (16df4 <type_attr+0x104>)
   16d74:	f004 fb12 	bl	1b39c <__assert_func>
            mp_map_t *locals_map = &self->locals_dict->map;
   16d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16d7c:	3304      	adds	r3, #4
   16d7e:	633b      	str	r3, [r7, #48]	; 0x30
            if (locals_map->is_fixed) {
   16d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16d82:	781b      	ldrb	r3, [r3, #0]
   16d84:	f003 0302 	and.w	r3, r3, #2
   16d88:	b2db      	uxtb	r3, r3
   16d8a:	2b00      	cmp	r3, #0
   16d8c:	d127      	bne.n	16dde <type_attr+0xee>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   16d8e:	687b      	ldr	r3, [r7, #4]
   16d90:	3304      	adds	r3, #4
   16d92:	681b      	ldr	r3, [r3, #0]
   16d94:	2b00      	cmp	r3, #0
   16d96:	d110      	bne.n	16dba <type_attr+0xca>
                // delete attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16d98:	68bb      	ldr	r3, [r7, #8]
   16d9a:	009b      	lsls	r3, r3, #2
   16d9c:	f043 0302 	orr.w	r3, r3, #2
   16da0:	2202      	movs	r2, #2
   16da2:	4619      	mov	r1, r3
   16da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16da6:	f7f6 fb67 	bl	d478 <mp_map_lookup>
   16daa:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (elem != NULL) {
   16dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16dae:	2b00      	cmp	r3, #0
   16db0:	d016      	beq.n	16de0 <type_attr+0xf0>
                    dest[0] = MP_OBJ_NULL; // indicate success
   16db2:	687b      	ldr	r3, [r7, #4]
   16db4:	2200      	movs	r2, #0
   16db6:	601a      	str	r2, [r3, #0]
   16db8:	e012      	b.n	16de0 <type_attr+0xf0>
                    }
                }
                #endif

                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   16dba:	68bb      	ldr	r3, [r7, #8]
   16dbc:	009b      	lsls	r3, r3, #2
   16dbe:	f043 0302 	orr.w	r3, r3, #2
   16dc2:	2201      	movs	r2, #1
   16dc4:	4619      	mov	r1, r3
   16dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16dc8:	f7f6 fb56 	bl	d478 <mp_map_lookup>
   16dcc:	62b8      	str	r0, [r7, #40]	; 0x28
                elem->value = dest[1];
   16dce:	687b      	ldr	r3, [r7, #4]
   16dd0:	685a      	ldr	r2, [r3, #4]
   16dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dd4:	605a      	str	r2, [r3, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   16dd6:	687b      	ldr	r3, [r7, #4]
   16dd8:	2200      	movs	r2, #0
   16dda:	601a      	str	r2, [r3, #0]
   16ddc:	e000      	b.n	16de0 <type_attr+0xf0>
                return;
   16dde:	bf00      	nop
            }
        }
    }
}
   16de0:	3738      	adds	r7, #56	; 0x38
   16de2:	46bd      	mov	sp, r7
   16de4:	bd80      	pop	{r7, pc}
   16de6:	bf00      	nop
   16de8:	000220ac 	.word	0x000220ac
   16dec:	00022054 	.word	0x00022054
   16df0:	000223ac 	.word	0x000223ac
   16df4:	00021e9c 	.word	0x00021e9c
   16df8:	000200e0 	.word	0x000200e0
   16dfc:	0002207c 	.word	0x0002207c

00016e00 <mp_obj_new_type>:
    .call = type_call,
    .unary_op = mp_generic_unary_op,
    .attr = type_attr,
};

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   16e00:	b580      	push	{r7, lr}
   16e02:	b08e      	sub	sp, #56	; 0x38
   16e04:	af00      	add	r7, sp, #0
   16e06:	60f8      	str	r0, [r7, #12]
   16e08:	60b9      	str	r1, [r7, #8]
   16e0a:	607a      	str	r2, [r7, #4]
    // Verify input objects have expected type
    if (!MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)) {
   16e0c:	68b8      	ldr	r0, [r7, #8]
   16e0e:	f7ff f89f 	bl	15f50 <MP_OBJ_IS_OBJ>
   16e12:	4603      	mov	r3, r0
   16e14:	f083 0301 	eor.w	r3, r3, #1
   16e18:	b2db      	uxtb	r3, r3
   16e1a:	2b00      	cmp	r3, #0
   16e1c:	d104      	bne.n	16e28 <mp_obj_new_type+0x28>
   16e1e:	68bb      	ldr	r3, [r7, #8]
   16e20:	681b      	ldr	r3, [r3, #0]
   16e22:	4a64      	ldr	r2, [pc, #400]	; (16fb4 <mp_obj_new_type+0x1b4>)
   16e24:	4293      	cmp	r3, r2
   16e26:	d002      	beq.n	16e2e <mp_obj_new_type+0x2e>
        mp_raise_TypeError(NULL);
   16e28:	2000      	movs	r0, #0
   16e2a:	f7f6 f8b5 	bl	cf98 <mp_raise_TypeError>
    }
    if (!MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)) {
   16e2e:	6878      	ldr	r0, [r7, #4]
   16e30:	f7ff f88e 	bl	15f50 <MP_OBJ_IS_OBJ>
   16e34:	4603      	mov	r3, r0
   16e36:	f083 0301 	eor.w	r3, r3, #1
   16e3a:	b2db      	uxtb	r3, r3
   16e3c:	2b00      	cmp	r3, #0
   16e3e:	d104      	bne.n	16e4a <mp_obj_new_type+0x4a>
   16e40:	687b      	ldr	r3, [r7, #4]
   16e42:	681b      	ldr	r3, [r3, #0]
   16e44:	4a5c      	ldr	r2, [pc, #368]	; (16fb8 <mp_obj_new_type+0x1b8>)
   16e46:	4293      	cmp	r3, r2
   16e48:	d002      	beq.n	16e50 <mp_obj_new_type+0x50>
        mp_raise_TypeError(NULL);
   16e4a:	2000      	movs	r0, #0
   16e4c:	f7f6 f8a4 	bl	cf98 <mp_raise_TypeError>
    }

    // TODO might need to make a copy of locals_dict; at least that's how CPython does it

    // Basic validation of base classes
    uint16_t base_flags = 0;
   16e50:	2300      	movs	r3, #0
   16e52:	867b      	strh	r3, [r7, #50]	; 0x32
    size_t bases_len;
    mp_obj_t *bases_items;
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   16e54:	f107 0214 	add.w	r2, r7, #20
   16e58:	f107 0318 	add.w	r3, r7, #24
   16e5c:	4619      	mov	r1, r3
   16e5e:	68b8      	ldr	r0, [r7, #8]
   16e60:	f7fe ffd8 	bl	15e14 <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   16e64:	2300      	movs	r3, #0
   16e66:	637b      	str	r3, [r7, #52]	; 0x34
   16e68:	e029      	b.n	16ebe <mp_obj_new_type+0xbe>
        if (!MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type)) {
   16e6a:	697a      	ldr	r2, [r7, #20]
   16e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e6e:	009b      	lsls	r3, r3, #2
   16e70:	4413      	add	r3, r2
   16e72:	681b      	ldr	r3, [r3, #0]
   16e74:	4618      	mov	r0, r3
   16e76:	f7ff f86b 	bl	15f50 <MP_OBJ_IS_OBJ>
   16e7a:	4603      	mov	r3, r0
   16e7c:	f083 0301 	eor.w	r3, r3, #1
   16e80:	b2db      	uxtb	r3, r3
   16e82:	2b00      	cmp	r3, #0
   16e84:	d108      	bne.n	16e98 <mp_obj_new_type+0x98>
   16e86:	697a      	ldr	r2, [r7, #20]
   16e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e8a:	009b      	lsls	r3, r3, #2
   16e8c:	4413      	add	r3, r2
   16e8e:	681b      	ldr	r3, [r3, #0]
   16e90:	681b      	ldr	r3, [r3, #0]
   16e92:	4a4a      	ldr	r2, [pc, #296]	; (16fbc <mp_obj_new_type+0x1bc>)
   16e94:	4293      	cmp	r3, r2
   16e96:	d002      	beq.n	16e9e <mp_obj_new_type+0x9e>
            mp_raise_TypeError(NULL);
   16e98:	2000      	movs	r0, #0
   16e9a:	f7f6 f87d 	bl	cf98 <mp_raise_TypeError>
        }
        mp_obj_type_t *t = MP_OBJ_TO_PTR(bases_items[i]);
   16e9e:	697a      	ldr	r2, [r7, #20]
   16ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ea2:	009b      	lsls	r3, r3, #2
   16ea4:	4413      	add	r3, r2
   16ea6:	681b      	ldr	r3, [r3, #0]
   16ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        // TODO: Verify with CPy, tested on function type
        if (t->make_new == NULL) {
   16eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16eac:	68db      	ldr	r3, [r3, #12]
   16eae:	2b00      	cmp	r3, #0
   16eb0:	d102      	bne.n	16eb8 <mp_obj_new_type+0xb8>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("type is not an acceptable base type");
   16eb2:	4843      	ldr	r0, [pc, #268]	; (16fc0 <mp_obj_new_type+0x1c0>)
   16eb4:	f7f6 f870 	bl	cf98 <mp_raise_TypeError>
    for (size_t i = 0; i < bases_len; i++) {
   16eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16eba:	3301      	adds	r3, #1
   16ebc:	637b      	str	r3, [r7, #52]	; 0x34
   16ebe:	69bb      	ldr	r3, [r7, #24]
   16ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16ec2:	429a      	cmp	r2, r3
   16ec4:	d3d1      	bcc.n	16e6a <mp_obj_new_type+0x6a>
            base_flags |= t->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS;
        }
        #endif
    }

    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   16ec6:	203c      	movs	r0, #60	; 0x3c
   16ec8:	f7e9 fa4e 	bl	368 <m_malloc0>
   16ecc:	62b8      	str	r0, [r7, #40]	; 0x28
    o->base.type = &mp_type_type;
   16ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ed0:	4a3a      	ldr	r2, [pc, #232]	; (16fbc <mp_obj_new_type+0x1bc>)
   16ed2:	601a      	str	r2, [r3, #0]
    o->flags = base_flags;
   16ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ed6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   16ed8:	809a      	strh	r2, [r3, #4]
    o->name = name;
   16eda:	68fb      	ldr	r3, [r7, #12]
   16edc:	b29a      	uxth	r2, r3
   16ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ee0:	80da      	strh	r2, [r3, #6]
    o->print = instance_print;
   16ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ee4:	4a37      	ldr	r2, [pc, #220]	; (16fc4 <mp_obj_new_type+0x1c4>)
   16ee6:	609a      	str	r2, [r3, #8]
    o->make_new = mp_obj_instance_make_new;
   16ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16eea:	4a37      	ldr	r2, [pc, #220]	; (16fc8 <mp_obj_new_type+0x1c8>)
   16eec:	60da      	str	r2, [r3, #12]
    o->call = mp_obj_instance_call;
   16eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ef0:	4a36      	ldr	r2, [pc, #216]	; (16fcc <mp_obj_new_type+0x1cc>)
   16ef2:	611a      	str	r2, [r3, #16]
    o->unary_op = instance_unary_op;
   16ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ef6:	4a36      	ldr	r2, [pc, #216]	; (16fd0 <mp_obj_new_type+0x1d0>)
   16ef8:	615a      	str	r2, [r3, #20]
    o->binary_op = instance_binary_op;
   16efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16efc:	4a35      	ldr	r2, [pc, #212]	; (16fd4 <mp_obj_new_type+0x1d4>)
   16efe:	619a      	str	r2, [r3, #24]
    o->attr = mp_obj_instance_attr;
   16f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f02:	4a35      	ldr	r2, [pc, #212]	; (16fd8 <mp_obj_new_type+0x1d8>)
   16f04:	61da      	str	r2, [r3, #28]
    o->subscr = instance_subscr;
   16f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f08:	4a34      	ldr	r2, [pc, #208]	; (16fdc <mp_obj_new_type+0x1dc>)
   16f0a:	621a      	str	r2, [r3, #32]
    o->getiter = instance_getiter;
   16f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f0e:	4a34      	ldr	r2, [pc, #208]	; (16fe0 <mp_obj_new_type+0x1e0>)
   16f10:	625a      	str	r2, [r3, #36]	; 0x24
    //o->iternext = ; not implemented
    o->buffer_p.get_buffer = instance_get_buffer;
   16f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f14:	4a33      	ldr	r2, [pc, #204]	; (16fe4 <mp_obj_new_type+0x1e4>)
   16f16:	62da      	str	r2, [r3, #44]	; 0x2c

    if (bases_len > 0) {
   16f18:	69bb      	ldr	r3, [r7, #24]
   16f1a:	2b00      	cmp	r3, #0
   16f1c:	d00f      	beq.n	16f3e <mp_obj_new_type+0x13e>
        // Inherit protocol from a base class. This allows to define an
        // abstract base class which would translate C-level protocol to
        // Python method calls, and any subclass inheriting from it will
        // support this feature.
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   16f1e:	697b      	ldr	r3, [r7, #20]
   16f20:	681b      	ldr	r3, [r3, #0]
   16f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f26:	631a      	str	r2, [r3, #48]	; 0x30

        if (bases_len >= 2) {
   16f28:	69bb      	ldr	r3, [r7, #24]
   16f2a:	2b01      	cmp	r3, #1
   16f2c:	d903      	bls.n	16f36 <mp_obj_new_type+0x136>
            #if MICROPY_MULTIPLE_INHERITANCE
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   16f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f30:	68ba      	ldr	r2, [r7, #8]
   16f32:	635a      	str	r2, [r3, #52]	; 0x34
   16f34:	e003      	b.n	16f3e <mp_obj_new_type+0x13e>
            #else
            mp_raise_NotImplementedError("multiple inheritance not supported");
            #endif
        } else {
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   16f36:	697b      	ldr	r3, [r7, #20]
   16f38:	681a      	ldr	r2, [r3, #0]
   16f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f3c:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   16f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f40:	687a      	ldr	r2, [r7, #4]
   16f42:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }
    #endif

    const mp_obj_type_t *native_base;
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   16f44:	f107 0310 	add.w	r3, r7, #16
   16f48:	4619      	mov	r1, r3
   16f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16f4c:	f7ff f812 	bl	15f74 <instance_count_native_bases>
   16f50:	4603      	mov	r3, r0
   16f52:	627b      	str	r3, [r7, #36]	; 0x24
    if (num_native_bases > 1) {
   16f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f56:	2b01      	cmp	r3, #1
   16f58:	d902      	bls.n	16f60 <mp_obj_new_type+0x160>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   16f5a:	4823      	ldr	r0, [pc, #140]	; (16fe8 <mp_obj_new_type+0x1e8>)
   16f5c:	f7f6 f81c 	bl	cf98 <mp_raise_TypeError>
    }

    mp_map_t *locals_map = &o->locals_dict->map;
   16f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16f64:	3304      	adds	r3, #4
   16f66:	623b      	str	r3, [r7, #32]
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   16f68:	2200      	movs	r2, #0
   16f6a:	2172      	movs	r1, #114	; 0x72
   16f6c:	6a38      	ldr	r0, [r7, #32]
   16f6e:	f7f6 fa83 	bl	d478 <mp_map_lookup>
   16f72:	61f8      	str	r0, [r7, #28]
    if (elem != NULL) {
   16f74:	69fb      	ldr	r3, [r7, #28]
   16f76:	2b00      	cmp	r3, #0
   16f78:	d017      	beq.n	16faa <mp_obj_new_type+0x1aa>
        // __new__ slot exists; check if it is a function
        if (MP_OBJ_IS_FUN(elem->value)) {
   16f7a:	69fb      	ldr	r3, [r7, #28]
   16f7c:	685b      	ldr	r3, [r3, #4]
   16f7e:	4618      	mov	r0, r3
   16f80:	f7fe ffe6 	bl	15f50 <MP_OBJ_IS_OBJ>
   16f84:	4603      	mov	r3, r0
   16f86:	2b00      	cmp	r3, #0
   16f88:	d00f      	beq.n	16faa <mp_obj_new_type+0x1aa>
   16f8a:	69fb      	ldr	r3, [r7, #28]
   16f8c:	685b      	ldr	r3, [r3, #4]
   16f8e:	681b      	ldr	r3, [r3, #0]
   16f90:	88db      	ldrh	r3, [r3, #6]
   16f92:	2b8a      	cmp	r3, #138	; 0x8a
   16f94:	d109      	bne.n	16faa <mp_obj_new_type+0x1aa>
            // __new__ is a function, wrap it in a staticmethod decorator
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   16f96:	69fb      	ldr	r3, [r7, #28]
   16f98:	3304      	adds	r3, #4
   16f9a:	2200      	movs	r2, #0
   16f9c:	2101      	movs	r1, #1
   16f9e:	4813      	ldr	r0, [pc, #76]	; (16fec <mp_obj_new_type+0x1ec>)
   16fa0:	f000 fa9c 	bl	174dc <static_class_method_make_new>
   16fa4:	4602      	mov	r2, r0
   16fa6:	69fb      	ldr	r3, [r7, #28]
   16fa8:	605a      	str	r2, [r3, #4]
        }
    }

    return MP_OBJ_FROM_PTR(o);
   16faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   16fac:	4618      	mov	r0, r3
   16fae:	3738      	adds	r7, #56	; 0x38
   16fb0:	46bd      	mov	sp, r7
   16fb2:	bd80      	pop	{r7, pc}
   16fb4:	00021db4 	.word	0x00021db4
   16fb8:	000200e0 	.word	0x000200e0
   16fbc:	000220ac 	.word	0x000220ac
   16fc0:	000220e8 	.word	0x000220e8
   16fc4:	00016379 	.word	0x00016379
   16fc8:	00016485 	.word	0x00016485
   16fcc:	00016ab9 	.word	0x00016ab9
   16fd0:	00016661 	.word	0x00016661
   16fd4:	00016725 	.word	0x00016725
   16fd8:	0001691d 	.word	0x0001691d
   16fdc:	00016961 	.word	0x00016961
   16fe0:	00016b25 	.word	0x00016b25
   16fe4:	00016ba9 	.word	0x00016ba9
   16fe8:	0002210c 	.word	0x0002210c
   16fec:	000222b8 	.word	0x000222b8

00016ff0 <super_print>:
    mp_obj_base_t base;
    mp_obj_t type;
    mp_obj_t obj;
} mp_obj_super_t;

STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16ff0:	b580      	push	{r7, lr}
   16ff2:	b086      	sub	sp, #24
   16ff4:	af00      	add	r7, sp, #0
   16ff6:	60f8      	str	r0, [r7, #12]
   16ff8:	60b9      	str	r1, [r7, #8]
   16ffa:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   16ffc:	68bb      	ldr	r3, [r7, #8]
   16ffe:	617b      	str	r3, [r7, #20]
    mp_print_str(print, "<super: ");
   17000:	490e      	ldr	r1, [pc, #56]	; (1703c <super_print+0x4c>)
   17002:	68f8      	ldr	r0, [r7, #12]
   17004:	f7ea fc48 	bl	1898 <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   17008:	697b      	ldr	r3, [r7, #20]
   1700a:	685b      	ldr	r3, [r3, #4]
   1700c:	2200      	movs	r2, #0
   1700e:	4619      	mov	r1, r3
   17010:	68f8      	ldr	r0, [r7, #12]
   17012:	f7f6 fc0d 	bl	d830 <mp_obj_print_helper>
    mp_print_str(print, ", ");
   17016:	490a      	ldr	r1, [pc, #40]	; (17040 <super_print+0x50>)
   17018:	68f8      	ldr	r0, [r7, #12]
   1701a:	f7ea fc3d 	bl	1898 <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   1701e:	697b      	ldr	r3, [r7, #20]
   17020:	689b      	ldr	r3, [r3, #8]
   17022:	2200      	movs	r2, #0
   17024:	4619      	mov	r1, r3
   17026:	68f8      	ldr	r0, [r7, #12]
   17028:	f7f6 fc02 	bl	d830 <mp_obj_print_helper>
    mp_print_str(print, ">");
   1702c:	4905      	ldr	r1, [pc, #20]	; (17044 <super_print+0x54>)
   1702e:	68f8      	ldr	r0, [r7, #12]
   17030:	f7ea fc32 	bl	1898 <mp_print_str>
}
   17034:	bf00      	nop
   17036:	3718      	adds	r7, #24
   17038:	46bd      	mov	sp, r7
   1703a:	bd80      	pop	{r7, pc}
   1703c:	0002213c 	.word	0x0002213c
   17040:	00022148 	.word	0x00022148
   17044:	0002214c 	.word	0x0002214c

00017048 <super_make_new>:

STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17048:	b580      	push	{r7, lr}
   1704a:	b088      	sub	sp, #32
   1704c:	af02      	add	r7, sp, #8
   1704e:	60f8      	str	r0, [r7, #12]
   17050:	60b9      	str	r1, [r7, #8]
   17052:	607a      	str	r2, [r7, #4]
   17054:	603b      	str	r3, [r7, #0]
    (void)type_in;
    // 0 arguments are turned into 2 in the compiler
    // 1 argument is not yet implemented
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   17056:	2300      	movs	r3, #0
   17058:	9300      	str	r3, [sp, #0]
   1705a:	2302      	movs	r3, #2
   1705c:	2202      	movs	r2, #2
   1705e:	6879      	ldr	r1, [r7, #4]
   17060:	68b8      	ldr	r0, [r7, #8]
   17062:	f7f5 ffbf 	bl	cfe4 <mp_arg_check_num>
    if (!MP_OBJ_IS_TYPE(args[0], &mp_type_type)) {
   17066:	683b      	ldr	r3, [r7, #0]
   17068:	681b      	ldr	r3, [r3, #0]
   1706a:	4618      	mov	r0, r3
   1706c:	f7fe ff70 	bl	15f50 <MP_OBJ_IS_OBJ>
   17070:	4603      	mov	r3, r0
   17072:	f083 0301 	eor.w	r3, r3, #1
   17076:	b2db      	uxtb	r3, r3
   17078:	2b00      	cmp	r3, #0
   1707a:	d105      	bne.n	17088 <super_make_new+0x40>
   1707c:	683b      	ldr	r3, [r7, #0]
   1707e:	681b      	ldr	r3, [r3, #0]
   17080:	681b      	ldr	r3, [r3, #0]
   17082:	4a0d      	ldr	r2, [pc, #52]	; (170b8 <super_make_new+0x70>)
   17084:	4293      	cmp	r3, r2
   17086:	d002      	beq.n	1708e <super_make_new+0x46>
        mp_raise_TypeError(NULL);
   17088:	2000      	movs	r0, #0
   1708a:	f7f5 ff85 	bl	cf98 <mp_raise_TypeError>
    }
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   1708e:	200c      	movs	r0, #12
   17090:	f7e9 f944 	bl	31c <m_malloc>
   17094:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   17096:	683b      	ldr	r3, [r7, #0]
   17098:	6819      	ldr	r1, [r3, #0]
   1709a:	683b      	ldr	r3, [r7, #0]
   1709c:	3304      	adds	r3, #4
   1709e:	681a      	ldr	r2, [r3, #0]
   170a0:	697b      	ldr	r3, [r7, #20]
   170a2:	68f8      	ldr	r0, [r7, #12]
   170a4:	6018      	str	r0, [r3, #0]
   170a6:	697b      	ldr	r3, [r7, #20]
   170a8:	6059      	str	r1, [r3, #4]
   170aa:	697b      	ldr	r3, [r7, #20]
   170ac:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
   170ae:	697b      	ldr	r3, [r7, #20]
}
   170b0:	4618      	mov	r0, r3
   170b2:	3718      	adds	r7, #24
   170b4:	46bd      	mov	sp, r7
   170b6:	bd80      	pop	{r7, pc}
   170b8:	000220ac 	.word	0x000220ac

000170bc <super_attr>:

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   170bc:	b580      	push	{r7, lr}
   170be:	b090      	sub	sp, #64	; 0x40
   170c0:	af00      	add	r7, sp, #0
   170c2:	60f8      	str	r0, [r7, #12]
   170c4:	60b9      	str	r1, [r7, #8]
   170c6:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   170c8:	687b      	ldr	r3, [r7, #4]
   170ca:	681b      	ldr	r3, [r3, #0]
   170cc:	2b00      	cmp	r3, #0
   170ce:	f040 80c1 	bne.w	17254 <super_attr+0x198>
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   170d2:	68f8      	ldr	r0, [r7, #12]
   170d4:	f7fe ff3c 	bl	15f50 <MP_OBJ_IS_OBJ>
   170d8:	4603      	mov	r3, r0
   170da:	f083 0301 	eor.w	r3, r3, #1
   170de:	b2db      	uxtb	r3, r3
   170e0:	2b00      	cmp	r3, #0
   170e2:	d104      	bne.n	170ee <super_attr+0x32>
   170e4:	68fb      	ldr	r3, [r7, #12]
   170e6:	681b      	ldr	r3, [r3, #0]
   170e8:	4a5d      	ldr	r2, [pc, #372]	; (17260 <super_attr+0x1a4>)
   170ea:	4293      	cmp	r3, r2
   170ec:	d006      	beq.n	170fc <super_attr+0x40>
   170ee:	4b5d      	ldr	r3, [pc, #372]	; (17264 <super_attr+0x1a8>)
   170f0:	4a5d      	ldr	r2, [pc, #372]	; (17268 <super_attr+0x1ac>)
   170f2:	f240 41bc 	movw	r1, #1212	; 0x4bc
   170f6:	485d      	ldr	r0, [pc, #372]	; (1726c <super_attr+0x1b0>)
   170f8:	f004 f950 	bl	1b39c <__assert_func>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   170fc:	68fb      	ldr	r3, [r7, #12]
   170fe:	63bb      	str	r3, [r7, #56]	; 0x38

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   17100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17102:	685b      	ldr	r3, [r3, #4]
   17104:	4618      	mov	r0, r3
   17106:	f7fe ff23 	bl	15f50 <MP_OBJ_IS_OBJ>
   1710a:	4603      	mov	r3, r0
   1710c:	f083 0301 	eor.w	r3, r3, #1
   17110:	b2db      	uxtb	r3, r3
   17112:	2b00      	cmp	r3, #0
   17114:	d105      	bne.n	17122 <super_attr+0x66>
   17116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17118:	685b      	ldr	r3, [r3, #4]
   1711a:	681b      	ldr	r3, [r3, #0]
   1711c:	4a54      	ldr	r2, [pc, #336]	; (17270 <super_attr+0x1b4>)
   1711e:	4293      	cmp	r3, r2
   17120:	d006      	beq.n	17130 <super_attr+0x74>
   17122:	4b54      	ldr	r3, [pc, #336]	; (17274 <super_attr+0x1b8>)
   17124:	4a50      	ldr	r2, [pc, #320]	; (17268 <super_attr+0x1ac>)
   17126:	f240 41bf 	movw	r1, #1215	; 0x4bf
   1712a:	4850      	ldr	r0, [pc, #320]	; (1726c <super_attr+0x1b0>)
   1712c:	f004 f936 	bl	1b39c <__assert_func>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);
   17130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17132:	685b      	ldr	r3, [r3, #4]
   17134:	637b      	str	r3, [r7, #52]	; 0x34

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   17136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17138:	689b      	ldr	r3, [r3, #8]
    struct class_lookup_data lookup = {
   1713a:	617b      	str	r3, [r7, #20]
   1713c:	68bb      	ldr	r3, [r7, #8]
   1713e:	61bb      	str	r3, [r7, #24]
   17140:	2300      	movs	r3, #0
   17142:	61fb      	str	r3, [r7, #28]
   17144:	687b      	ldr	r3, [r7, #4]
   17146:	623b      	str	r3, [r7, #32]
   17148:	2300      	movs	r3, #0
   1714a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   1714e:	68bb      	ldr	r3, [r7, #8]
   17150:	2b13      	cmp	r3, #19
   17152:	d101      	bne.n	17158 <super_attr+0x9c>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   17154:	230c      	movs	r3, #12
   17156:	61fb      	str	r3, [r7, #28]
    }

    if (type->parent == NULL) {
   17158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1715c:	2b00      	cmp	r3, #0
   1715e:	d05f      	beq.n	17220 <super_attr+0x164>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   17160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17164:	681b      	ldr	r3, [r3, #0]
   17166:	4a44      	ldr	r2, [pc, #272]	; (17278 <super_attr+0x1bc>)
   17168:	4293      	cmp	r3, r2
   1716a:	d14a      	bne.n	17202 <super_attr+0x146>
        const mp_obj_tuple_t *parent_tuple = type->parent;
   1716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17170:	633b      	str	r3, [r7, #48]	; 0x30
        size_t len = parent_tuple->len;
   17172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17174:	685b      	ldr	r3, [r3, #4]
   17176:	62fb      	str	r3, [r7, #44]	; 0x2c
        const mp_obj_t *items = parent_tuple->items;
   17178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1717a:	3308      	adds	r3, #8
   1717c:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < len; i++) {
   1717e:	2300      	movs	r3, #0
   17180:	63fb      	str	r3, [r7, #60]	; 0x3c
   17182:	e039      	b.n	171f8 <super_attr+0x13c>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   17184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17186:	009b      	lsls	r3, r3, #2
   17188:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1718a:	4413      	add	r3, r2
   1718c:	681b      	ldr	r3, [r3, #0]
   1718e:	4618      	mov	r0, r3
   17190:	f7fe fede 	bl	15f50 <MP_OBJ_IS_OBJ>
   17194:	4603      	mov	r3, r0
   17196:	f083 0301 	eor.w	r3, r3, #1
   1719a:	b2db      	uxtb	r3, r3
   1719c:	2b00      	cmp	r3, #0
   1719e:	d108      	bne.n	171b2 <super_attr+0xf6>
   171a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171a2:	009b      	lsls	r3, r3, #2
   171a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   171a6:	4413      	add	r3, r2
   171a8:	681b      	ldr	r3, [r3, #0]
   171aa:	681b      	ldr	r3, [r3, #0]
   171ac:	4a30      	ldr	r2, [pc, #192]	; (17270 <super_attr+0x1b4>)
   171ae:	4293      	cmp	r3, r2
   171b0:	d006      	beq.n	171c0 <super_attr+0x104>
   171b2:	4b32      	ldr	r3, [pc, #200]	; (1727c <super_attr+0x1c0>)
   171b4:	4a2c      	ldr	r2, [pc, #176]	; (17268 <super_attr+0x1ac>)
   171b6:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
   171ba:	482c      	ldr	r0, [pc, #176]	; (1726c <super_attr+0x1b0>)
   171bc:	f004 f8ee 	bl	1b39c <__assert_func>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   171c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171c2:	009b      	lsls	r3, r3, #2
   171c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   171c6:	4413      	add	r3, r2
   171c8:	681b      	ldr	r3, [r3, #0]
   171ca:	4a2d      	ldr	r2, [pc, #180]	; (17280 <super_attr+0x1c4>)
   171cc:	4293      	cmp	r3, r2
   171ce:	d00f      	beq.n	171f0 <super_attr+0x134>
                // The "object" type will be searched at the end of this function,
                // and we don't want to lookup native methods in object.
                continue;
            }
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   171d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171d2:	009b      	lsls	r3, r3, #2
   171d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   171d6:	4413      	add	r3, r2
   171d8:	681a      	ldr	r2, [r3, #0]
   171da:	f107 0314 	add.w	r3, r7, #20
   171de:	4611      	mov	r1, r2
   171e0:	4618      	mov	r0, r3
   171e2:	f7fe ff97 	bl	16114 <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   171e6:	687b      	ldr	r3, [r7, #4]
   171e8:	681b      	ldr	r3, [r3, #0]
   171ea:	2b00      	cmp	r3, #0
   171ec:	d117      	bne.n	1721e <super_attr+0x162>
   171ee:	e000      	b.n	171f2 <super_attr+0x136>
                continue;
   171f0:	bf00      	nop
        for (size_t i = 0; i < len; i++) {
   171f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171f4:	3301      	adds	r3, #1
   171f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   171f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   171fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171fc:	429a      	cmp	r2, r3
   171fe:	d3c1      	bcc.n	17184 <super_attr+0xc8>
   17200:	e00e      	b.n	17220 <super_attr+0x164>
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   17202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17206:	4a1e      	ldr	r2, [pc, #120]	; (17280 <super_attr+0x1c4>)
   17208:	4293      	cmp	r3, r2
   1720a:	d009      	beq.n	17220 <super_attr+0x164>
        mp_obj_class_lookup(&lookup, type->parent);
   1720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1720e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   17210:	f107 0314 	add.w	r3, r7, #20
   17214:	4611      	mov	r1, r2
   17216:	4618      	mov	r0, r3
   17218:	f7fe ff7c 	bl	16114 <mp_obj_class_lookup>
   1721c:	e000      	b.n	17220 <super_attr+0x164>
                break;
   1721e:	bf00      	nop
    }

    if (dest[0] != MP_OBJ_NULL) {
   17220:	687b      	ldr	r3, [r7, #4]
   17222:	681b      	ldr	r3, [r3, #0]
   17224:	2b00      	cmp	r3, #0
   17226:	d00c      	beq.n	17242 <super_attr+0x186>
        if (dest[0] == MP_OBJ_SENTINEL) {
   17228:	687b      	ldr	r3, [r7, #4]
   1722a:	681b      	ldr	r3, [r3, #0]
   1722c:	2b08      	cmp	r3, #8
   1722e:	d113      	bne.n	17258 <super_attr+0x19c>
            // Looked up native __init__ so defer to it
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   17230:	687b      	ldr	r3, [r7, #4]
   17232:	4a14      	ldr	r2, [pc, #80]	; (17284 <super_attr+0x1c8>)
   17234:	601a      	str	r2, [r3, #0]
            dest[1] = self->obj;
   17236:	687b      	ldr	r3, [r7, #4]
   17238:	3304      	adds	r3, #4
   1723a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1723c:	6892      	ldr	r2, [r2, #8]
   1723e:	601a      	str	r2, [r3, #0]
        }
        return;
   17240:	e00a      	b.n	17258 <super_attr+0x19c>
    }

    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;
   17242:	2300      	movs	r3, #0
   17244:	61fb      	str	r3, [r7, #28]

    mp_obj_class_lookup(&lookup, &mp_type_object);
   17246:	f107 0314 	add.w	r3, r7, #20
   1724a:	490d      	ldr	r1, [pc, #52]	; (17280 <super_attr+0x1c4>)
   1724c:	4618      	mov	r0, r3
   1724e:	f7fe ff61 	bl	16114 <mp_obj_class_lookup>
   17252:	e002      	b.n	1725a <super_attr+0x19e>
        return;
   17254:	bf00      	nop
   17256:	e000      	b.n	1725a <super_attr+0x19e>
        return;
   17258:	bf00      	nop
}
   1725a:	3740      	adds	r7, #64	; 0x40
   1725c:	46bd      	mov	sp, r7
   1725e:	bd80      	pop	{r7, pc}
   17260:	000221cc 	.word	0x000221cc
   17264:	00022150 	.word	0x00022150
   17268:	000223b8 	.word	0x000223b8
   1726c:	00021e9c 	.word	0x00021e9c
   17270:	000220ac 	.word	0x000220ac
   17274:	00022178 	.word	0x00022178
   17278:	00021db4 	.word	0x00021db4
   1727c:	000221a4 	.word	0x000221a4
   17280:	000213c4 	.word	0x000213c4
   17284:	00021eb0 	.word	0x00021eb0

00017288 <mp_load_super_method>:
    .print = super_print,
    .make_new = super_make_new,
    .attr = super_attr,
};

void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   17288:	b580      	push	{r7, lr}
   1728a:	b086      	sub	sp, #24
   1728c:	af00      	add	r7, sp, #0
   1728e:	6078      	str	r0, [r7, #4]
   17290:	6039      	str	r1, [r7, #0]
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   17292:	4b09      	ldr	r3, [pc, #36]	; (172b8 <mp_load_super_method+0x30>)
   17294:	60fb      	str	r3, [r7, #12]
   17296:	683b      	ldr	r3, [r7, #0]
   17298:	685b      	ldr	r3, [r3, #4]
   1729a:	613b      	str	r3, [r7, #16]
   1729c:	683b      	ldr	r3, [r7, #0]
   1729e:	689b      	ldr	r3, [r3, #8]
   172a0:	617b      	str	r3, [r7, #20]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   172a2:	f107 030c 	add.w	r3, r7, #12
   172a6:	683a      	ldr	r2, [r7, #0]
   172a8:	6879      	ldr	r1, [r7, #4]
   172aa:	4618      	mov	r0, r3
   172ac:	f7f5 faae 	bl	c80c <mp_load_method>
}
   172b0:	bf00      	nop
   172b2:	3718      	adds	r7, #24
   172b4:	46bd      	mov	sp, r7
   172b6:	bd80      	pop	{r7, pc}
   172b8:	000221cc 	.word	0x000221cc

000172bc <mp_obj_is_subclass_fast>:
/******************************************************************************/
// subclassing and built-ins specific to types

// object and classinfo should be type objects
// (but the function will fail gracefully if they are not)
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   172bc:	b580      	push	{r7, lr}
   172be:	b086      	sub	sp, #24
   172c0:	af00      	add	r7, sp, #0
   172c2:	6078      	str	r0, [r7, #4]
   172c4:	6039      	str	r1, [r7, #0]
    for (;;) {
        if (object == classinfo) {
   172c6:	687a      	ldr	r2, [r7, #4]
   172c8:	683b      	ldr	r3, [r7, #0]
   172ca:	429a      	cmp	r2, r3
   172cc:	d101      	bne.n	172d2 <mp_obj_is_subclass_fast+0x16>
            return true;
   172ce:	2301      	movs	r3, #1
   172d0:	e047      	b.n	17362 <mp_obj_is_subclass_fast+0xa6>
        }

        // not equivalent classes, keep searching base classes

        // object should always be a type object, but just return false if it's not
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   172d2:	6878      	ldr	r0, [r7, #4]
   172d4:	f7fe fe3c 	bl	15f50 <MP_OBJ_IS_OBJ>
   172d8:	4603      	mov	r3, r0
   172da:	f083 0301 	eor.w	r3, r3, #1
   172de:	b2db      	uxtb	r3, r3
   172e0:	2b00      	cmp	r3, #0
   172e2:	d104      	bne.n	172ee <mp_obj_is_subclass_fast+0x32>
   172e4:	687b      	ldr	r3, [r7, #4]
   172e6:	681b      	ldr	r3, [r3, #0]
   172e8:	4a20      	ldr	r2, [pc, #128]	; (1736c <mp_obj_is_subclass_fast+0xb0>)
   172ea:	4293      	cmp	r3, r2
   172ec:	d001      	beq.n	172f2 <mp_obj_is_subclass_fast+0x36>
            return false;
   172ee:	2300      	movs	r3, #0
   172f0:	e037      	b.n	17362 <mp_obj_is_subclass_fast+0xa6>
        }

        const mp_obj_type_t *self = MP_OBJ_TO_PTR(object);
   172f2:	687b      	ldr	r3, [r7, #4]
   172f4:	613b      	str	r3, [r7, #16]

        if (self->parent == NULL) {
   172f6:	693b      	ldr	r3, [r7, #16]
   172f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   172fa:	2b00      	cmp	r3, #0
   172fc:	d101      	bne.n	17302 <mp_obj_is_subclass_fast+0x46>
            // type has no parents
            return false;
   172fe:	2300      	movs	r3, #0
   17300:	e02f      	b.n	17362 <mp_obj_is_subclass_fast+0xa6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   17302:	693b      	ldr	r3, [r7, #16]
   17304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17306:	681b      	ldr	r3, [r3, #0]
   17308:	4a19      	ldr	r2, [pc, #100]	; (17370 <mp_obj_is_subclass_fast+0xb4>)
   1730a:	4293      	cmp	r3, r2
   1730c:	d125      	bne.n	1735a <mp_obj_is_subclass_fast+0x9e>
            // get the base objects (they should be type objects)
            const mp_obj_tuple_t *parent_tuple = self->parent;
   1730e:	693b      	ldr	r3, [r7, #16]
   17310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17312:	60fb      	str	r3, [r7, #12]
            const mp_obj_t *item = parent_tuple->items;
   17314:	68fb      	ldr	r3, [r7, #12]
   17316:	3308      	adds	r3, #8
   17318:	617b      	str	r3, [r7, #20]
            const mp_obj_t *top = item + parent_tuple->len - 1;
   1731a:	68fb      	ldr	r3, [r7, #12]
   1731c:	685b      	ldr	r3, [r3, #4]
   1731e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17322:	3b01      	subs	r3, #1
   17324:	009b      	lsls	r3, r3, #2
   17326:	697a      	ldr	r2, [r7, #20]
   17328:	4413      	add	r3, r2
   1732a:	60bb      	str	r3, [r7, #8]

            // iterate through the base objects
            for (; item < top; ++item) {
   1732c:	e00d      	b.n	1734a <mp_obj_is_subclass_fast+0x8e>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   1732e:	697b      	ldr	r3, [r7, #20]
   17330:	681b      	ldr	r3, [r3, #0]
   17332:	6839      	ldr	r1, [r7, #0]
   17334:	4618      	mov	r0, r3
   17336:	f7ff ffc1 	bl	172bc <mp_obj_is_subclass_fast>
   1733a:	4603      	mov	r3, r0
   1733c:	2b00      	cmp	r3, #0
   1733e:	d001      	beq.n	17344 <mp_obj_is_subclass_fast+0x88>
                    return true;
   17340:	2301      	movs	r3, #1
   17342:	e00e      	b.n	17362 <mp_obj_is_subclass_fast+0xa6>
            for (; item < top; ++item) {
   17344:	697b      	ldr	r3, [r7, #20]
   17346:	3304      	adds	r3, #4
   17348:	617b      	str	r3, [r7, #20]
   1734a:	697a      	ldr	r2, [r7, #20]
   1734c:	68bb      	ldr	r3, [r7, #8]
   1734e:	429a      	cmp	r2, r3
   17350:	d3ed      	bcc.n	1732e <mp_obj_is_subclass_fast+0x72>
                }
            }

            // search last base (simple tail recursion elimination)
            object = *item;
   17352:	697b      	ldr	r3, [r7, #20]
   17354:	681b      	ldr	r3, [r3, #0]
   17356:	607b      	str	r3, [r7, #4]
   17358:	e7b5      	b.n	172c6 <mp_obj_is_subclass_fast+0xa>
        #endif
        } else {
            // type has 1 parent
            object = MP_OBJ_FROM_PTR(self->parent);
   1735a:	693b      	ldr	r3, [r7, #16]
   1735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1735e:	607b      	str	r3, [r7, #4]
        }
    }
   17360:	e7b1      	b.n	172c6 <mp_obj_is_subclass_fast+0xa>
}
   17362:	4618      	mov	r0, r3
   17364:	3718      	adds	r7, #24
   17366:	46bd      	mov	sp, r7
   17368:	bd80      	pop	{r7, pc}
   1736a:	bf00      	nop
   1736c:	000220ac 	.word	0x000220ac
   17370:	00021db4 	.word	0x00021db4

00017374 <mp_obj_is_subclass>:

STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   17374:	b580      	push	{r7, lr}
   17376:	b086      	sub	sp, #24
   17378:	af00      	add	r7, sp, #0
   1737a:	6078      	str	r0, [r7, #4]
   1737c:	6039      	str	r1, [r7, #0]
    size_t len;
    mp_obj_t *items;
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   1737e:	683b      	ldr	r3, [r7, #0]
   17380:	4618      	mov	r0, r3
   17382:	f7fe fde5 	bl	15f50 <MP_OBJ_IS_OBJ>
   17386:	4603      	mov	r3, r0
   17388:	2b00      	cmp	r3, #0
   1738a:	d009      	beq.n	173a0 <mp_obj_is_subclass+0x2c>
   1738c:	683b      	ldr	r3, [r7, #0]
   1738e:	681b      	ldr	r3, [r3, #0]
   17390:	4a22      	ldr	r2, [pc, #136]	; (1741c <mp_obj_is_subclass+0xa8>)
   17392:	4293      	cmp	r3, r2
   17394:	d104      	bne.n	173a0 <mp_obj_is_subclass+0x2c>
        len = 1;
   17396:	2301      	movs	r3, #1
   17398:	613b      	str	r3, [r7, #16]
        items = &classinfo;
   1739a:	463b      	mov	r3, r7
   1739c:	60fb      	str	r3, [r7, #12]
   1739e:	e017      	b.n	173d0 <mp_obj_is_subclass+0x5c>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   173a0:	683b      	ldr	r3, [r7, #0]
   173a2:	4618      	mov	r0, r3
   173a4:	f7fe fdd4 	bl	15f50 <MP_OBJ_IS_OBJ>
   173a8:	4603      	mov	r3, r0
   173aa:	2b00      	cmp	r3, #0
   173ac:	d00d      	beq.n	173ca <mp_obj_is_subclass+0x56>
   173ae:	683b      	ldr	r3, [r7, #0]
   173b0:	681b      	ldr	r3, [r3, #0]
   173b2:	4a1b      	ldr	r2, [pc, #108]	; (17420 <mp_obj_is_subclass+0xac>)
   173b4:	4293      	cmp	r3, r2
   173b6:	d108      	bne.n	173ca <mp_obj_is_subclass+0x56>
        mp_obj_tuple_get(classinfo, &len, &items);
   173b8:	683b      	ldr	r3, [r7, #0]
   173ba:	f107 020c 	add.w	r2, r7, #12
   173be:	f107 0110 	add.w	r1, r7, #16
   173c2:	4618      	mov	r0, r3
   173c4:	f7fe fd26 	bl	15e14 <mp_obj_tuple_get>
   173c8:	e002      	b.n	173d0 <mp_obj_is_subclass+0x5c>
    } else {
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   173ca:	4816      	ldr	r0, [pc, #88]	; (17424 <mp_obj_is_subclass+0xb0>)
   173cc:	f7f5 fde4 	bl	cf98 <mp_raise_TypeError>
    }

    for (size_t i = 0; i < len; i++) {
   173d0:	2300      	movs	r3, #0
   173d2:	617b      	str	r3, [r7, #20]
   173d4:	e018      	b.n	17408 <mp_obj_is_subclass+0x94>
        // We explicitly check for 'object' here since no-one explicitly derives from it
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   173d6:	68fa      	ldr	r2, [r7, #12]
   173d8:	697b      	ldr	r3, [r7, #20]
   173da:	009b      	lsls	r3, r3, #2
   173dc:	4413      	add	r3, r2
   173de:	681b      	ldr	r3, [r3, #0]
   173e0:	4a11      	ldr	r2, [pc, #68]	; (17428 <mp_obj_is_subclass+0xb4>)
   173e2:	4293      	cmp	r3, r2
   173e4:	d00b      	beq.n	173fe <mp_obj_is_subclass+0x8a>
   173e6:	68fa      	ldr	r2, [r7, #12]
   173e8:	697b      	ldr	r3, [r7, #20]
   173ea:	009b      	lsls	r3, r3, #2
   173ec:	4413      	add	r3, r2
   173ee:	681b      	ldr	r3, [r3, #0]
   173f0:	4619      	mov	r1, r3
   173f2:	6878      	ldr	r0, [r7, #4]
   173f4:	f7ff ff62 	bl	172bc <mp_obj_is_subclass_fast>
   173f8:	4603      	mov	r3, r0
   173fa:	2b00      	cmp	r3, #0
   173fc:	d001      	beq.n	17402 <mp_obj_is_subclass+0x8e>
            return mp_const_true;
   173fe:	4b0b      	ldr	r3, [pc, #44]	; (1742c <mp_obj_is_subclass+0xb8>)
   17400:	e007      	b.n	17412 <mp_obj_is_subclass+0x9e>
    for (size_t i = 0; i < len; i++) {
   17402:	697b      	ldr	r3, [r7, #20]
   17404:	3301      	adds	r3, #1
   17406:	617b      	str	r3, [r7, #20]
   17408:	693b      	ldr	r3, [r7, #16]
   1740a:	697a      	ldr	r2, [r7, #20]
   1740c:	429a      	cmp	r2, r3
   1740e:	d3e2      	bcc.n	173d6 <mp_obj_is_subclass+0x62>
        }
    }
    return mp_const_false;
   17410:	4b07      	ldr	r3, [pc, #28]	; (17430 <mp_obj_is_subclass+0xbc>)
}
   17412:	4618      	mov	r0, r3
   17414:	3718      	adds	r7, #24
   17416:	46bd      	mov	sp, r7
   17418:	bd80      	pop	{r7, pc}
   1741a:	bf00      	nop
   1741c:	000220ac 	.word	0x000220ac
   17420:	00021db4 	.word	0x00021db4
   17424:	00022208 	.word	0x00022208
   17428:	000213c4 	.word	0x000213c4
   1742c:	0001fc3c 	.word	0x0001fc3c
   17430:	0001fc34 	.word	0x0001fc34

00017434 <mp_builtin_issubclass>:

STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   17434:	b580      	push	{r7, lr}
   17436:	b082      	sub	sp, #8
   17438:	af00      	add	r7, sp, #0
   1743a:	6078      	str	r0, [r7, #4]
   1743c:	6039      	str	r1, [r7, #0]
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   1743e:	6878      	ldr	r0, [r7, #4]
   17440:	f7fe fd86 	bl	15f50 <MP_OBJ_IS_OBJ>
   17444:	4603      	mov	r3, r0
   17446:	f083 0301 	eor.w	r3, r3, #1
   1744a:	b2db      	uxtb	r3, r3
   1744c:	2b00      	cmp	r3, #0
   1744e:	d104      	bne.n	1745a <mp_builtin_issubclass+0x26>
   17450:	687b      	ldr	r3, [r7, #4]
   17452:	681b      	ldr	r3, [r3, #0]
   17454:	4a07      	ldr	r2, [pc, #28]	; (17474 <mp_builtin_issubclass+0x40>)
   17456:	4293      	cmp	r3, r2
   17458:	d002      	beq.n	17460 <mp_builtin_issubclass+0x2c>
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   1745a:	4807      	ldr	r0, [pc, #28]	; (17478 <mp_builtin_issubclass+0x44>)
   1745c:	f7f5 fd9c 	bl	cf98 <mp_raise_TypeError>
    }
    return mp_obj_is_subclass(object, classinfo);
   17460:	6839      	ldr	r1, [r7, #0]
   17462:	6878      	ldr	r0, [r7, #4]
   17464:	f7ff ff86 	bl	17374 <mp_obj_is_subclass>
   17468:	4603      	mov	r3, r0
}
   1746a:	4618      	mov	r0, r3
   1746c:	3708      	adds	r7, #8
   1746e:	46bd      	mov	sp, r7
   17470:	bd80      	pop	{r7, pc}
   17472:	bf00      	nop
   17474:	000220ac 	.word	0x000220ac
   17478:	00022244 	.word	0x00022244

0001747c <mp_builtin_isinstance>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_issubclass_obj, mp_builtin_issubclass);

STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   1747c:	b580      	push	{r7, lr}
   1747e:	b082      	sub	sp, #8
   17480:	af00      	add	r7, sp, #0
   17482:	6078      	str	r0, [r7, #4]
   17484:	6039      	str	r1, [r7, #0]
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   17486:	6878      	ldr	r0, [r7, #4]
   17488:	f7f6 f9a0 	bl	d7cc <mp_obj_get_type>
   1748c:	4603      	mov	r3, r0
   1748e:	6839      	ldr	r1, [r7, #0]
   17490:	4618      	mov	r0, r3
   17492:	f7ff ff6f 	bl	17374 <mp_obj_is_subclass>
   17496:	4603      	mov	r3, r0
}
   17498:	4618      	mov	r0, r3
   1749a:	3708      	adds	r7, #8
   1749c:	46bd      	mov	sp, r7
   1749e:	bd80      	pop	{r7, pc}

000174a0 <mp_instance_cast_to_native_base>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_isinstance_obj, mp_builtin_isinstance);

mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   174a0:	b580      	push	{r7, lr}
   174a2:	b084      	sub	sp, #16
   174a4:	af00      	add	r7, sp, #0
   174a6:	6078      	str	r0, [r7, #4]
   174a8:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   174aa:	6878      	ldr	r0, [r7, #4]
   174ac:	f7f6 f98e 	bl	d7cc <mp_obj_get_type>
   174b0:	60f8      	str	r0, [r7, #12]
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   174b2:	6839      	ldr	r1, [r7, #0]
   174b4:	68f8      	ldr	r0, [r7, #12]
   174b6:	f7ff ff01 	bl	172bc <mp_obj_is_subclass_fast>
   174ba:	4603      	mov	r3, r0
   174bc:	f083 0301 	eor.w	r3, r3, #1
   174c0:	b2db      	uxtb	r3, r3
   174c2:	2b00      	cmp	r3, #0
   174c4:	d001      	beq.n	174ca <mp_instance_cast_to_native_base+0x2a>
        return MP_OBJ_NULL;
   174c6:	2300      	movs	r3, #0
   174c8:	e003      	b.n	174d2 <mp_instance_cast_to_native_base+0x32>
    }
    mp_obj_instance_t *self = (mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in);
   174ca:	687b      	ldr	r3, [r7, #4]
   174cc:	60bb      	str	r3, [r7, #8]
    return self->subobj[0];
   174ce:	68bb      	ldr	r3, [r7, #8]
   174d0:	691b      	ldr	r3, [r3, #16]
}
   174d2:	4618      	mov	r0, r3
   174d4:	3710      	adds	r7, #16
   174d6:	46bd      	mov	sp, r7
   174d8:	bd80      	pop	{r7, pc}
   174da:	bf00      	nop

000174dc <static_class_method_make_new>:

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   174dc:	b580      	push	{r7, lr}
   174de:	b088      	sub	sp, #32
   174e0:	af02      	add	r7, sp, #8
   174e2:	60f8      	str	r0, [r7, #12]
   174e4:	60b9      	str	r1, [r7, #8]
   174e6:	607a      	str	r2, [r7, #4]
   174e8:	603b      	str	r3, [r7, #0]
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   174ea:	68fb      	ldr	r3, [r7, #12]
   174ec:	4a12      	ldr	r2, [pc, #72]	; (17538 <static_class_method_make_new+0x5c>)
   174ee:	4293      	cmp	r3, r2
   174f0:	d00a      	beq.n	17508 <static_class_method_make_new+0x2c>
   174f2:	68fb      	ldr	r3, [r7, #12]
   174f4:	4a11      	ldr	r2, [pc, #68]	; (1753c <static_class_method_make_new+0x60>)
   174f6:	4293      	cmp	r3, r2
   174f8:	d006      	beq.n	17508 <static_class_method_make_new+0x2c>
   174fa:	4b11      	ldr	r3, [pc, #68]	; (17540 <static_class_method_make_new+0x64>)
   174fc:	4a11      	ldr	r2, [pc, #68]	; (17544 <static_class_method_make_new+0x68>)
   174fe:	f240 5165 	movw	r1, #1381	; 0x565
   17502:	4811      	ldr	r0, [pc, #68]	; (17548 <static_class_method_make_new+0x6c>)
   17504:	f003 ff4a 	bl	1b39c <__assert_func>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   17508:	2300      	movs	r3, #0
   1750a:	9300      	str	r3, [sp, #0]
   1750c:	2301      	movs	r3, #1
   1750e:	2201      	movs	r2, #1
   17510:	6879      	ldr	r1, [r7, #4]
   17512:	68b8      	ldr	r0, [r7, #8]
   17514:	f7f5 fd66 	bl	cfe4 <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   17518:	2008      	movs	r0, #8
   1751a:	f7e8 feff 	bl	31c <m_malloc>
   1751e:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   17520:	683b      	ldr	r3, [r7, #0]
   17522:	681a      	ldr	r2, [r3, #0]
   17524:	697b      	ldr	r3, [r7, #20]
   17526:	68f9      	ldr	r1, [r7, #12]
   17528:	6019      	str	r1, [r3, #0]
   1752a:	697b      	ldr	r3, [r7, #20]
   1752c:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   1752e:	697b      	ldr	r3, [r7, #20]
}
   17530:	4618      	mov	r0, r3
   17532:	3718      	adds	r7, #24
   17534:	46bd      	mov	sp, r7
   17536:	bd80      	pop	{r7, pc}
   17538:	000222b8 	.word	0x000222b8
   1753c:	000222f4 	.word	0x000222f4
   17540:	00022278 	.word	0x00022278
   17544:	000223c4 	.word	0x000223c4
   17548:	00021e9c 	.word	0x00021e9c

0001754c <MP_OBJ_IS_OBJ>:
   1754c:	b480      	push	{r7}
   1754e:	b083      	sub	sp, #12
   17550:	af00      	add	r7, sp, #0
   17552:	6078      	str	r0, [r7, #4]
   17554:	687b      	ldr	r3, [r7, #4]
   17556:	f003 0303 	and.w	r3, r3, #3
   1755a:	2b00      	cmp	r3, #0
   1755c:	bf0c      	ite	eq
   1755e:	2301      	moveq	r3, #1
   17560:	2300      	movne	r3, #0
   17562:	b2db      	uxtb	r3, r3
   17564:	4618      	mov	r0, r3
   17566:	370c      	adds	r7, #12
   17568:	46bd      	mov	sp, r7
   1756a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1756e:	4770      	bx	lr

00017570 <zip_make_new>:
    mp_obj_base_t base;
    size_t n_iters;
    mp_obj_t iters[];
} mp_obj_zip_t;

STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17570:	b580      	push	{r7, lr}
   17572:	b088      	sub	sp, #32
   17574:	af02      	add	r7, sp, #8
   17576:	60f8      	str	r0, [r7, #12]
   17578:	60b9      	str	r1, [r7, #8]
   1757a:	607a      	str	r2, [r7, #4]
   1757c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   1757e:	2300      	movs	r3, #0
   17580:	9300      	str	r3, [sp, #0]
   17582:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17586:	2200      	movs	r2, #0
   17588:	6879      	ldr	r1, [r7, #4]
   1758a:	68b8      	ldr	r0, [r7, #8]
   1758c:	f7f5 fd2a 	bl	cfe4 <mp_arg_check_num>

    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   17590:	68bb      	ldr	r3, [r7, #8]
   17592:	3302      	adds	r3, #2
   17594:	009b      	lsls	r3, r3, #2
   17596:	4618      	mov	r0, r3
   17598:	f7e8 fec0 	bl	31c <m_malloc>
   1759c:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   1759e:	693b      	ldr	r3, [r7, #16]
   175a0:	68fa      	ldr	r2, [r7, #12]
   175a2:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args;
   175a4:	693b      	ldr	r3, [r7, #16]
   175a6:	68ba      	ldr	r2, [r7, #8]
   175a8:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   175aa:	2300      	movs	r3, #0
   175ac:	617b      	str	r3, [r7, #20]
   175ae:	e011      	b.n	175d4 <zip_make_new+0x64>
        o->iters[i] = mp_getiter(args[i], NULL);
   175b0:	697b      	ldr	r3, [r7, #20]
   175b2:	009b      	lsls	r3, r3, #2
   175b4:	683a      	ldr	r2, [r7, #0]
   175b6:	4413      	add	r3, r2
   175b8:	681b      	ldr	r3, [r3, #0]
   175ba:	2100      	movs	r1, #0
   175bc:	4618      	mov	r0, r3
   175be:	f7f5 f99d 	bl	c8fc <mp_getiter>
   175c2:	4601      	mov	r1, r0
   175c4:	693b      	ldr	r3, [r7, #16]
   175c6:	697a      	ldr	r2, [r7, #20]
   175c8:	3202      	adds	r2, #2
   175ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   175ce:	697b      	ldr	r3, [r7, #20]
   175d0:	3301      	adds	r3, #1
   175d2:	617b      	str	r3, [r7, #20]
   175d4:	697a      	ldr	r2, [r7, #20]
   175d6:	68bb      	ldr	r3, [r7, #8]
   175d8:	429a      	cmp	r2, r3
   175da:	d3e9      	bcc.n	175b0 <zip_make_new+0x40>
    }
    return MP_OBJ_FROM_PTR(o);
   175dc:	693b      	ldr	r3, [r7, #16]
}
   175de:	4618      	mov	r0, r3
   175e0:	3718      	adds	r7, #24
   175e2:	46bd      	mov	sp, r7
   175e4:	bd80      	pop	{r7, pc}
   175e6:	bf00      	nop

000175e8 <zip_iternext>:

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   175e8:	b580      	push	{r7, lr}
   175ea:	b086      	sub	sp, #24
   175ec:	af00      	add	r7, sp, #0
   175ee:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   175f0:	6878      	ldr	r0, [r7, #4]
   175f2:	f7ff ffab 	bl	1754c <MP_OBJ_IS_OBJ>
   175f6:	4603      	mov	r3, r0
   175f8:	f083 0301 	eor.w	r3, r3, #1
   175fc:	b2db      	uxtb	r3, r3
   175fe:	2b00      	cmp	r3, #0
   17600:	d104      	bne.n	1760c <zip_iternext+0x24>
   17602:	687b      	ldr	r3, [r7, #4]
   17604:	681b      	ldr	r3, [r3, #0]
   17606:	4a1f      	ldr	r2, [pc, #124]	; (17684 <zip_iternext+0x9c>)
   17608:	4293      	cmp	r3, r2
   1760a:	d005      	beq.n	17618 <zip_iternext+0x30>
   1760c:	4b1e      	ldr	r3, [pc, #120]	; (17688 <zip_iternext+0xa0>)
   1760e:	4a1f      	ldr	r2, [pc, #124]	; (1768c <zip_iternext+0xa4>)
   17610:	2134      	movs	r1, #52	; 0x34
   17612:	481f      	ldr	r0, [pc, #124]	; (17690 <zip_iternext+0xa8>)
   17614:	f003 fec2 	bl	1b39c <__assert_func>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
   17618:	687b      	ldr	r3, [r7, #4]
   1761a:	613b      	str	r3, [r7, #16]
    if (self->n_iters == 0) {
   1761c:	693b      	ldr	r3, [r7, #16]
   1761e:	685b      	ldr	r3, [r3, #4]
   17620:	2b00      	cmp	r3, #0
   17622:	d101      	bne.n	17628 <zip_iternext+0x40>
        return MP_OBJ_STOP_ITERATION;
   17624:	2304      	movs	r3, #4
   17626:	e029      	b.n	1767c <zip_iternext+0x94>
    }
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   17628:	693b      	ldr	r3, [r7, #16]
   1762a:	685b      	ldr	r3, [r3, #4]
   1762c:	2100      	movs	r1, #0
   1762e:	4618      	mov	r0, r3
   17630:	f7fe fbb8 	bl	15da4 <mp_obj_new_tuple>
   17634:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   17636:	2300      	movs	r3, #0
   17638:	617b      	str	r3, [r7, #20]
   1763a:	e019      	b.n	17670 <zip_iternext+0x88>
        mp_obj_t next = mp_iternext(self->iters[i]);
   1763c:	693b      	ldr	r3, [r7, #16]
   1763e:	697a      	ldr	r2, [r7, #20]
   17640:	3202      	adds	r2, #2
   17642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17646:	4618      	mov	r0, r3
   17648:	f7f5 f9da 	bl	ca00 <mp_iternext>
   1764c:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   1764e:	68bb      	ldr	r3, [r7, #8]
   17650:	2b04      	cmp	r3, #4
   17652:	d104      	bne.n	1765e <zip_iternext+0x76>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   17654:	68f8      	ldr	r0, [r7, #12]
   17656:	f7fe fc0f 	bl	15e78 <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   1765a:	2304      	movs	r3, #4
   1765c:	e00e      	b.n	1767c <zip_iternext+0x94>
        }
        tuple->items[i] = next;
   1765e:	68fb      	ldr	r3, [r7, #12]
   17660:	697a      	ldr	r2, [r7, #20]
   17662:	3202      	adds	r2, #2
   17664:	68b9      	ldr	r1, [r7, #8]
   17666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   1766a:	697b      	ldr	r3, [r7, #20]
   1766c:	3301      	adds	r3, #1
   1766e:	617b      	str	r3, [r7, #20]
   17670:	693b      	ldr	r3, [r7, #16]
   17672:	685a      	ldr	r2, [r3, #4]
   17674:	697b      	ldr	r3, [r7, #20]
   17676:	429a      	cmp	r2, r3
   17678:	d8e0      	bhi.n	1763c <zip_iternext+0x54>
    }
    return MP_OBJ_FROM_PTR(tuple);
   1767a:	68fb      	ldr	r3, [r7, #12]
}
   1767c:	4618      	mov	r0, r3
   1767e:	3718      	adds	r7, #24
   17680:	46bd      	mov	sp, r7
   17682:	bd80      	pop	{r7, pc}
   17684:	00022454 	.word	0x00022454
   17688:	000223e4 	.word	0x000223e4
   1768c:	00022490 	.word	0x00022490
   17690:	00022440 	.word	0x00022440

00017694 <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   17694:	b580      	push	{r7, lr}
   17696:	b084      	sub	sp, #16
   17698:	af00      	add	r7, sp, #0
   1769a:	6078      	str	r0, [r7, #4]
   1769c:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   1769e:	6878      	ldr	r0, [r7, #4]
   176a0:	f7f6 f894 	bl	d7cc <mp_obj_get_type>
   176a4:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   176a6:	68fb      	ldr	r3, [r7, #12]
   176a8:	6a1b      	ldr	r3, [r3, #32]
   176aa:	2208      	movs	r2, #8
   176ac:	6839      	ldr	r1, [r7, #0]
   176ae:	6878      	ldr	r0, [r7, #4]
   176b0:	4798      	blx	r3
   176b2:	4603      	mov	r3, r0
}
   176b4:	4618      	mov	r0, r3
   176b6:	3710      	adds	r7, #16
   176b8:	46bd      	mov	sp, r7
   176ba:	bd80      	pop	{r7, pc}

000176bc <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   176bc:	b580      	push	{r7, lr}
   176be:	b086      	sub	sp, #24
   176c0:	af00      	add	r7, sp, #0
   176c2:	60f8      	str	r0, [r7, #12]
   176c4:	60b9      	str	r1, [r7, #8]
   176c6:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   176c8:	68f8      	ldr	r0, [r7, #12]
   176ca:	f7f6 f87f 	bl	d7cc <mp_obj_get_type>
   176ce:	6178      	str	r0, [r7, #20]
    return type->subscr(self_in, key_in, value_in);
   176d0:	697b      	ldr	r3, [r7, #20]
   176d2:	6a1b      	ldr	r3, [r3, #32]
   176d4:	687a      	ldr	r2, [r7, #4]
   176d6:	68b9      	ldr	r1, [r7, #8]
   176d8:	68f8      	ldr	r0, [r7, #12]
   176da:	4798      	blx	r3
   176dc:	4603      	mov	r3, r0
}
   176de:	4618      	mov	r0, r3
   176e0:	3718      	adds	r7, #24
   176e2:	46bd      	mov	sp, r7
   176e4:	bd80      	pop	{r7, pc}
   176e6:	bf00      	nop

000176e8 <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   176e8:	b580      	push	{r7, lr}
   176ea:	b084      	sub	sp, #16
   176ec:	af00      	add	r7, sp, #0
   176ee:	6078      	str	r0, [r7, #4]
   176f0:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   176f2:	6878      	ldr	r0, [r7, #4]
   176f4:	f7f6 f86a 	bl	d7cc <mp_obj_get_type>
   176f8:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   176fa:	68fb      	ldr	r3, [r7, #12]
   176fc:	6a1b      	ldr	r3, [r3, #32]
   176fe:	2200      	movs	r2, #0
   17700:	6839      	ldr	r1, [r7, #0]
   17702:	6878      	ldr	r0, [r7, #4]
   17704:	4798      	blx	r3
   17706:	4603      	mov	r3, r0
}
   17708:	4618      	mov	r0, r3
   1770a:	3710      	adds	r7, #16
   1770c:	46bd      	mov	sp, r7
   1770e:	bd80      	pop	{r7, pc}

00017710 <op_contains>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_delitem_obj, op_delitem);

STATIC mp_obj_t op_contains(mp_obj_t lhs_in, mp_obj_t rhs_in) {
   17710:	b580      	push	{r7, lr}
   17712:	b084      	sub	sp, #16
   17714:	af00      	add	r7, sp, #0
   17716:	6078      	str	r0, [r7, #4]
   17718:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(lhs_in);
   1771a:	6878      	ldr	r0, [r7, #4]
   1771c:	f7f6 f856 	bl	d7cc <mp_obj_get_type>
   17720:	60f8      	str	r0, [r7, #12]
    return type->binary_op(MP_BINARY_OP_CONTAINS, lhs_in, rhs_in);
   17722:	68fb      	ldr	r3, [r7, #12]
   17724:	699b      	ldr	r3, [r3, #24]
   17726:	683a      	ldr	r2, [r7, #0]
   17728:	6879      	ldr	r1, [r7, #4]
   1772a:	2022      	movs	r0, #34	; 0x22
   1772c:	4798      	blx	r3
   1772e:	4603      	mov	r3, r0
}
   17730:	4618      	mov	r0, r3
   17732:	3710      	adds	r7, #16
   17734:	46bd      	mov	sp, r7
   17736:	bd80      	pop	{r7, pc}

00017738 <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   17738:	b580      	push	{r7, lr}
   1773a:	b086      	sub	sp, #24
   1773c:	af00      	add	r7, sp, #0
   1773e:	60f8      	str	r0, [r7, #12]
   17740:	60b9      	str	r1, [r7, #8]
   17742:	607a      	str	r2, [r7, #4]
   17744:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < times; i++) {
   17746:	2300      	movs	r3, #0
   17748:	617b      	str	r3, [r7, #20]
   1774a:	e010      	b.n	1776e <mp_seq_multiply+0x36>
        size_t copy_sz = item_sz * len;
   1774c:	68bb      	ldr	r3, [r7, #8]
   1774e:	687a      	ldr	r2, [r7, #4]
   17750:	fb02 f303 	mul.w	r3, r2, r3
   17754:	613b      	str	r3, [r7, #16]
        memcpy(dest, items, copy_sz);
   17756:	693a      	ldr	r2, [r7, #16]
   17758:	68f9      	ldr	r1, [r7, #12]
   1775a:	6a38      	ldr	r0, [r7, #32]
   1775c:	f004 fada 	bl	1bd14 <memcpy>
        dest = (char*)dest + copy_sz;
   17760:	6a3a      	ldr	r2, [r7, #32]
   17762:	693b      	ldr	r3, [r7, #16]
   17764:	4413      	add	r3, r2
   17766:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < times; i++) {
   17768:	697b      	ldr	r3, [r7, #20]
   1776a:	3301      	adds	r3, #1
   1776c:	617b      	str	r3, [r7, #20]
   1776e:	697a      	ldr	r2, [r7, #20]
   17770:	683b      	ldr	r3, [r7, #0]
   17772:	429a      	cmp	r2, r3
   17774:	d3ea      	bcc.n	1774c <mp_seq_multiply+0x14>
    }
}
   17776:	bf00      	nop
   17778:	3718      	adds	r7, #24
   1777a:	46bd      	mov	sp, r7
   1777c:	bd80      	pop	{r7, pc}
   1777e:	bf00      	nop

00017780 <mp_seq_extract_slice>:
    return indexes->step == 1;
}

#endif

mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes) {
   17780:	b580      	push	{r7, lr}
   17782:	b088      	sub	sp, #32
   17784:	af00      	add	r7, sp, #0
   17786:	60f8      	str	r0, [r7, #12]
   17788:	60b9      	str	r1, [r7, #8]
   1778a:	607a      	str	r2, [r7, #4]
    (void)len; // TODO can we remove len from the arg list?

    mp_int_t start = indexes->start, stop = indexes->stop;
   1778c:	687b      	ldr	r3, [r7, #4]
   1778e:	681b      	ldr	r3, [r3, #0]
   17790:	61fb      	str	r3, [r7, #28]
   17792:	687b      	ldr	r3, [r7, #4]
   17794:	685b      	ldr	r3, [r3, #4]
   17796:	61bb      	str	r3, [r7, #24]
    mp_int_t step = indexes->step;
   17798:	687b      	ldr	r3, [r7, #4]
   1779a:	689b      	ldr	r3, [r3, #8]
   1779c:	617b      	str	r3, [r7, #20]

    mp_obj_t res = mp_obj_new_list(0, NULL);
   1779e:	2100      	movs	r1, #0
   177a0:	2000      	movs	r0, #0
   177a2:	f7fa f891 	bl	118c8 <mp_obj_new_list>
   177a6:	6138      	str	r0, [r7, #16]

    if (step < 0) {
   177a8:	697b      	ldr	r3, [r7, #20]
   177aa:	2b00      	cmp	r3, #0
   177ac:	da1f      	bge.n	177ee <mp_seq_extract_slice+0x6e>
        while (start >= stop) {
   177ae:	e00c      	b.n	177ca <mp_seq_extract_slice+0x4a>
            mp_obj_list_append(res, seq[start]);
   177b0:	69fb      	ldr	r3, [r7, #28]
   177b2:	009b      	lsls	r3, r3, #2
   177b4:	68ba      	ldr	r2, [r7, #8]
   177b6:	4413      	add	r3, r2
   177b8:	681b      	ldr	r3, [r3, #0]
   177ba:	4619      	mov	r1, r3
   177bc:	6938      	ldr	r0, [r7, #16]
   177be:	f7f9 fbf1 	bl	10fa4 <mp_obj_list_append>
            start += step;
   177c2:	69fa      	ldr	r2, [r7, #28]
   177c4:	697b      	ldr	r3, [r7, #20]
   177c6:	4413      	add	r3, r2
   177c8:	61fb      	str	r3, [r7, #28]
        while (start >= stop) {
   177ca:	69fa      	ldr	r2, [r7, #28]
   177cc:	69bb      	ldr	r3, [r7, #24]
   177ce:	429a      	cmp	r2, r3
   177d0:	daee      	bge.n	177b0 <mp_seq_extract_slice+0x30>
   177d2:	e010      	b.n	177f6 <mp_seq_extract_slice+0x76>
        }
    } else {
        while (start < stop) {
            mp_obj_list_append(res, seq[start]);
   177d4:	69fb      	ldr	r3, [r7, #28]
   177d6:	009b      	lsls	r3, r3, #2
   177d8:	68ba      	ldr	r2, [r7, #8]
   177da:	4413      	add	r3, r2
   177dc:	681b      	ldr	r3, [r3, #0]
   177de:	4619      	mov	r1, r3
   177e0:	6938      	ldr	r0, [r7, #16]
   177e2:	f7f9 fbdf 	bl	10fa4 <mp_obj_list_append>
            start += step;
   177e6:	69fa      	ldr	r2, [r7, #28]
   177e8:	697b      	ldr	r3, [r7, #20]
   177ea:	4413      	add	r3, r2
   177ec:	61fb      	str	r3, [r7, #28]
        while (start < stop) {
   177ee:	69fa      	ldr	r2, [r7, #28]
   177f0:	69bb      	ldr	r3, [r7, #24]
   177f2:	429a      	cmp	r2, r3
   177f4:	dbee      	blt.n	177d4 <mp_seq_extract_slice+0x54>
        }
    }
    return res;
   177f6:	693b      	ldr	r3, [r7, #16]
}
   177f8:	4618      	mov	r0, r3
   177fa:	3720      	adds	r7, #32
   177fc:	46bd      	mov	sp, r7
   177fe:	bd80      	pop	{r7, pc}

00017800 <mp_seq_cmp_bytes>:

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   17800:	b580      	push	{r7, lr}
   17802:	b088      	sub	sp, #32
   17804:	af00      	add	r7, sp, #0
   17806:	60f8      	str	r0, [r7, #12]
   17808:	60b9      	str	r1, [r7, #8]
   1780a:	607a      	str	r2, [r7, #4]
   1780c:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   1780e:	68fb      	ldr	r3, [r7, #12]
   17810:	2b02      	cmp	r3, #2
   17812:	d105      	bne.n	17820 <mp_seq_cmp_bytes+0x20>
   17814:	687a      	ldr	r2, [r7, #4]
   17816:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17818:	429a      	cmp	r2, r3
   1781a:	d001      	beq.n	17820 <mp_seq_cmp_bytes+0x20>
        return false;
   1781c:	2300      	movs	r3, #0
   1781e:	e049      	b.n	178b4 <mp_seq_cmp_bytes+0xb4>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17820:	68fb      	ldr	r3, [r7, #12]
   17822:	2b00      	cmp	r3, #0
   17824:	d002      	beq.n	1782c <mp_seq_cmp_bytes+0x2c>
   17826:	68fb      	ldr	r3, [r7, #12]
   17828:	2b03      	cmp	r3, #3
   1782a:	d113      	bne.n	17854 <mp_seq_cmp_bytes+0x54>
        SWAP(const byte*, data1, data2);
   1782c:	683b      	ldr	r3, [r7, #0]
   1782e:	61fb      	str	r3, [r7, #28]
   17830:	68bb      	ldr	r3, [r7, #8]
   17832:	603b      	str	r3, [r7, #0]
   17834:	69fb      	ldr	r3, [r7, #28]
   17836:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17838:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1783a:	61bb      	str	r3, [r7, #24]
   1783c:	687b      	ldr	r3, [r7, #4]
   1783e:	62bb      	str	r3, [r7, #40]	; 0x28
   17840:	69bb      	ldr	r3, [r7, #24]
   17842:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17844:	68fb      	ldr	r3, [r7, #12]
   17846:	2b00      	cmp	r3, #0
   17848:	d102      	bne.n	17850 <mp_seq_cmp_bytes+0x50>
            op = MP_BINARY_OP_MORE;
   1784a:	2301      	movs	r3, #1
   1784c:	60fb      	str	r3, [r7, #12]
   1784e:	e001      	b.n	17854 <mp_seq_cmp_bytes+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17850:	2304      	movs	r3, #4
   17852:	60fb      	str	r3, [r7, #12]
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
   17854:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17856:	687b      	ldr	r3, [r7, #4]
   17858:	4293      	cmp	r3, r2
   1785a:	bf28      	it	cs
   1785c:	4613      	movcs	r3, r2
   1785e:	617b      	str	r3, [r7, #20]
    int res = memcmp(data1, data2, min_len);
   17860:	697a      	ldr	r2, [r7, #20]
   17862:	6839      	ldr	r1, [r7, #0]
   17864:	68b8      	ldr	r0, [r7, #8]
   17866:	f004 fb3d 	bl	1bee4 <memcmp>
   1786a:	6138      	str	r0, [r7, #16]
    if (op == MP_BINARY_OP_EQUAL) {
   1786c:	68fb      	ldr	r3, [r7, #12]
   1786e:	2b02      	cmp	r3, #2
   17870:	d106      	bne.n	17880 <mp_seq_cmp_bytes+0x80>
        // If we are checking for equality, here're the answer
        return res == 0;
   17872:	693b      	ldr	r3, [r7, #16]
   17874:	2b00      	cmp	r3, #0
   17876:	bf0c      	ite	eq
   17878:	2301      	moveq	r3, #1
   1787a:	2300      	movne	r3, #0
   1787c:	b2db      	uxtb	r3, r3
   1787e:	e019      	b.n	178b4 <mp_seq_cmp_bytes+0xb4>
    }
    if (res < 0) {
   17880:	693b      	ldr	r3, [r7, #16]
   17882:	2b00      	cmp	r3, #0
   17884:	da01      	bge.n	1788a <mp_seq_cmp_bytes+0x8a>
        return false;
   17886:	2300      	movs	r3, #0
   17888:	e014      	b.n	178b4 <mp_seq_cmp_bytes+0xb4>
    }
    if (res > 0) {
   1788a:	693b      	ldr	r3, [r7, #16]
   1788c:	2b00      	cmp	r3, #0
   1788e:	dd01      	ble.n	17894 <mp_seq_cmp_bytes+0x94>
        return true;
   17890:	2301      	movs	r3, #1
   17892:	e00f      	b.n	178b4 <mp_seq_cmp_bytes+0xb4>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17894:	687a      	ldr	r2, [r7, #4]
   17896:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17898:	429a      	cmp	r2, r3
   1789a:	d005      	beq.n	178a8 <mp_seq_cmp_bytes+0xa8>
        if (len1 < len2) {
   1789c:	687a      	ldr	r2, [r7, #4]
   1789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   178a0:	429a      	cmp	r2, r3
   178a2:	d206      	bcs.n	178b2 <mp_seq_cmp_bytes+0xb2>
            // ... then longer list length wins (we deal only with >)
            return false;
   178a4:	2300      	movs	r3, #0
   178a6:	e005      	b.n	178b4 <mp_seq_cmp_bytes+0xb4>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   178a8:	68fb      	ldr	r3, [r7, #12]
   178aa:	2b01      	cmp	r3, #1
   178ac:	d101      	bne.n	178b2 <mp_seq_cmp_bytes+0xb2>
        // Otherwise, if we have strict relation, equality means failure
        return false;
   178ae:	2300      	movs	r3, #0
   178b0:	e000      	b.n	178b4 <mp_seq_cmp_bytes+0xb4>
    }
    return true;
   178b2:	2301      	movs	r3, #1
}
   178b4:	4618      	mov	r0, r3
   178b6:	3720      	adds	r7, #32
   178b8:	46bd      	mov	sp, r7
   178ba:	bd80      	pop	{r7, pc}

000178bc <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   178bc:	b580      	push	{r7, lr}
   178be:	b088      	sub	sp, #32
   178c0:	af00      	add	r7, sp, #0
   178c2:	60f8      	str	r0, [r7, #12]
   178c4:	60b9      	str	r1, [r7, #8]
   178c6:	607a      	str	r2, [r7, #4]
   178c8:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   178ca:	68fb      	ldr	r3, [r7, #12]
   178cc:	2b02      	cmp	r3, #2
   178ce:	d105      	bne.n	178dc <mp_seq_cmp_objs+0x20>
   178d0:	687a      	ldr	r2, [r7, #4]
   178d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   178d4:	429a      	cmp	r2, r3
   178d6:	d001      	beq.n	178dc <mp_seq_cmp_objs+0x20>
        return false;
   178d8:	2300      	movs	r3, #0
   178da:	e065      	b.n	179a8 <mp_seq_cmp_objs+0xec>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   178dc:	68fb      	ldr	r3, [r7, #12]
   178de:	2b00      	cmp	r3, #0
   178e0:	d002      	beq.n	178e8 <mp_seq_cmp_objs+0x2c>
   178e2:	68fb      	ldr	r3, [r7, #12]
   178e4:	2b03      	cmp	r3, #3
   178e6:	d113      	bne.n	17910 <mp_seq_cmp_objs+0x54>
        SWAP(const mp_obj_t *, items1, items2);
   178e8:	683b      	ldr	r3, [r7, #0]
   178ea:	61bb      	str	r3, [r7, #24]
   178ec:	68bb      	ldr	r3, [r7, #8]
   178ee:	603b      	str	r3, [r7, #0]
   178f0:	69bb      	ldr	r3, [r7, #24]
   178f2:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   178f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   178f6:	617b      	str	r3, [r7, #20]
   178f8:	687b      	ldr	r3, [r7, #4]
   178fa:	62bb      	str	r3, [r7, #40]	; 0x28
   178fc:	697b      	ldr	r3, [r7, #20]
   178fe:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17900:	68fb      	ldr	r3, [r7, #12]
   17902:	2b00      	cmp	r3, #0
   17904:	d102      	bne.n	1790c <mp_seq_cmp_objs+0x50>
            op = MP_BINARY_OP_MORE;
   17906:	2301      	movs	r3, #1
   17908:	60fb      	str	r3, [r7, #12]
   1790a:	e001      	b.n	17910 <mp_seq_cmp_objs+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   1790c:	2304      	movs	r3, #4
   1790e:	60fb      	str	r3, [r7, #12]
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   17910:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17912:	687b      	ldr	r3, [r7, #4]
   17914:	4293      	cmp	r3, r2
   17916:	bf28      	it	cs
   17918:	4613      	movcs	r3, r2
   1791a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < len; i++) {
   1791c:	2300      	movs	r3, #0
   1791e:	61fb      	str	r3, [r7, #28]
   17920:	e02e      	b.n	17980 <mp_seq_cmp_objs+0xc4>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   17922:	69fb      	ldr	r3, [r7, #28]
   17924:	009b      	lsls	r3, r3, #2
   17926:	68ba      	ldr	r2, [r7, #8]
   17928:	4413      	add	r3, r2
   1792a:	6818      	ldr	r0, [r3, #0]
   1792c:	69fb      	ldr	r3, [r7, #28]
   1792e:	009b      	lsls	r3, r3, #2
   17930:	683a      	ldr	r2, [r7, #0]
   17932:	4413      	add	r3, r2
   17934:	681b      	ldr	r3, [r3, #0]
   17936:	4619      	mov	r1, r3
   17938:	f7f6 f89c 	bl	da74 <mp_obj_equal>
   1793c:	4603      	mov	r3, r0
   1793e:	2b00      	cmp	r3, #0
   17940:	d003      	beq.n	1794a <mp_seq_cmp_objs+0x8e>
    for (size_t i = 0; i < len; i++) {
   17942:	69fb      	ldr	r3, [r7, #28]
   17944:	3301      	adds	r3, #1
   17946:	61fb      	str	r3, [r7, #28]
   17948:	e01a      	b.n	17980 <mp_seq_cmp_objs+0xc4>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   1794a:	68fb      	ldr	r3, [r7, #12]
   1794c:	2b02      	cmp	r3, #2
   1794e:	d101      	bne.n	17954 <mp_seq_cmp_objs+0x98>
            // In particular, if we are checking for equality, here're the answer
            return false;
   17950:	2300      	movs	r3, #0
   17952:	e029      	b.n	179a8 <mp_seq_cmp_objs+0xec>
        }

        // Otherwise, application of relation op gives the answer
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   17954:	69fb      	ldr	r3, [r7, #28]
   17956:	009b      	lsls	r3, r3, #2
   17958:	68ba      	ldr	r2, [r7, #8]
   1795a:	4413      	add	r3, r2
   1795c:	6819      	ldr	r1, [r3, #0]
   1795e:	69fb      	ldr	r3, [r7, #28]
   17960:	009b      	lsls	r3, r3, #2
   17962:	683a      	ldr	r2, [r7, #0]
   17964:	4413      	add	r3, r2
   17966:	681b      	ldr	r3, [r3, #0]
   17968:	461a      	mov	r2, r3
   1796a:	68f8      	ldr	r0, [r7, #12]
   1796c:	f7f3 ffba 	bl	b8e4 <mp_binary_op>
   17970:	4602      	mov	r2, r0
   17972:	4b0f      	ldr	r3, [pc, #60]	; (179b0 <mp_seq_cmp_objs+0xf4>)
   17974:	429a      	cmp	r2, r3
   17976:	bf0c      	ite	eq
   17978:	2301      	moveq	r3, #1
   1797a:	2300      	movne	r3, #0
   1797c:	b2db      	uxtb	r3, r3
   1797e:	e013      	b.n	179a8 <mp_seq_cmp_objs+0xec>
    for (size_t i = 0; i < len; i++) {
   17980:	69fa      	ldr	r2, [r7, #28]
   17982:	693b      	ldr	r3, [r7, #16]
   17984:	429a      	cmp	r2, r3
   17986:	d3cc      	bcc.n	17922 <mp_seq_cmp_objs+0x66>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17988:	687a      	ldr	r2, [r7, #4]
   1798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1798c:	429a      	cmp	r2, r3
   1798e:	d005      	beq.n	1799c <mp_seq_cmp_objs+0xe0>
        if (len1 < len2) {
   17990:	687a      	ldr	r2, [r7, #4]
   17992:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17994:	429a      	cmp	r2, r3
   17996:	d206      	bcs.n	179a6 <mp_seq_cmp_objs+0xea>
            // ... then longer list length wins (we deal only with >)
            return false;
   17998:	2300      	movs	r3, #0
   1799a:	e005      	b.n	179a8 <mp_seq_cmp_objs+0xec>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   1799c:	68fb      	ldr	r3, [r7, #12]
   1799e:	2b01      	cmp	r3, #1
   179a0:	d101      	bne.n	179a6 <mp_seq_cmp_objs+0xea>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
   179a2:	2300      	movs	r3, #0
   179a4:	e000      	b.n	179a8 <mp_seq_cmp_objs+0xec>
    }

    return true;
   179a6:	2301      	movs	r3, #1
}
   179a8:	4618      	mov	r0, r3
   179aa:	3720      	adds	r7, #32
   179ac:	46bd      	mov	sp, r7
   179ae:	bd80      	pop	{r7, pc}
   179b0:	0001fc3c 	.word	0x0001fc3c

000179b4 <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   179b4:	b580      	push	{r7, lr}
   179b6:	b08a      	sub	sp, #40	; 0x28
   179b8:	af00      	add	r7, sp, #0
   179ba:	60f8      	str	r0, [r7, #12]
   179bc:	60b9      	str	r1, [r7, #8]
   179be:	607a      	str	r2, [r7, #4]
   179c0:	603b      	str	r3, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   179c2:	683b      	ldr	r3, [r7, #0]
   179c4:	681b      	ldr	r3, [r3, #0]
   179c6:	4618      	mov	r0, r3
   179c8:	f7f5 ff00 	bl	d7cc <mp_obj_get_type>
   179cc:	61b8      	str	r0, [r7, #24]
    mp_obj_t value = args[1];
   179ce:	683b      	ldr	r3, [r7, #0]
   179d0:	685b      	ldr	r3, [r3, #4]
   179d2:	617b      	str	r3, [r7, #20]
    size_t start = 0;
   179d4:	2300      	movs	r3, #0
   179d6:	627b      	str	r3, [r7, #36]	; 0x24
    size_t stop = len;
   179d8:	68bb      	ldr	r3, [r7, #8]
   179da:	623b      	str	r3, [r7, #32]

    if (n_args >= 3) {
   179dc:	687b      	ldr	r3, [r7, #4]
   179de:	2b02      	cmp	r3, #2
   179e0:	d914      	bls.n	17a0c <mp_seq_index_obj+0x58>
        start = mp_get_index(type, len, args[2], true);
   179e2:	683b      	ldr	r3, [r7, #0]
   179e4:	3308      	adds	r3, #8
   179e6:	681a      	ldr	r2, [r3, #0]
   179e8:	2301      	movs	r3, #1
   179ea:	68b9      	ldr	r1, [r7, #8]
   179ec:	69b8      	ldr	r0, [r7, #24]
   179ee:	f7f6 f9b7 	bl	dd60 <mp_get_index>
   179f2:	6278      	str	r0, [r7, #36]	; 0x24
        if (n_args >= 4) {
   179f4:	687b      	ldr	r3, [r7, #4]
   179f6:	2b03      	cmp	r3, #3
   179f8:	d908      	bls.n	17a0c <mp_seq_index_obj+0x58>
            stop = mp_get_index(type, len, args[3], true);
   179fa:	683b      	ldr	r3, [r7, #0]
   179fc:	330c      	adds	r3, #12
   179fe:	681a      	ldr	r2, [r3, #0]
   17a00:	2301      	movs	r3, #1
   17a02:	68b9      	ldr	r1, [r7, #8]
   17a04:	69b8      	ldr	r0, [r7, #24]
   17a06:	f7f6 f9ab 	bl	dd60 <mp_get_index>
   17a0a:	6238      	str	r0, [r7, #32]
        }
    }

    for (size_t i = start; i < stop; i++) {
   17a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a0e:	61fb      	str	r3, [r7, #28]
   17a10:	e013      	b.n	17a3a <mp_seq_index_obj+0x86>
        if (mp_obj_equal(items[i], value)) {
   17a12:	69fb      	ldr	r3, [r7, #28]
   17a14:	009b      	lsls	r3, r3, #2
   17a16:	68fa      	ldr	r2, [r7, #12]
   17a18:	4413      	add	r3, r2
   17a1a:	681b      	ldr	r3, [r3, #0]
   17a1c:	6979      	ldr	r1, [r7, #20]
   17a1e:	4618      	mov	r0, r3
   17a20:	f7f6 f828 	bl	da74 <mp_obj_equal>
   17a24:	4603      	mov	r3, r0
   17a26:	2b00      	cmp	r3, #0
   17a28:	d004      	beq.n	17a34 <mp_seq_index_obj+0x80>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
   17a2a:	69fb      	ldr	r3, [r7, #28]
   17a2c:	005b      	lsls	r3, r3, #1
   17a2e:	f043 0301 	orr.w	r3, r3, #1
   17a32:	e009      	b.n	17a48 <mp_seq_index_obj+0x94>
    for (size_t i = start; i < stop; i++) {
   17a34:	69fb      	ldr	r3, [r7, #28]
   17a36:	3301      	adds	r3, #1
   17a38:	61fb      	str	r3, [r7, #28]
   17a3a:	69fa      	ldr	r2, [r7, #28]
   17a3c:	6a3b      	ldr	r3, [r7, #32]
   17a3e:	429a      	cmp	r2, r3
   17a40:	d3e7      	bcc.n	17a12 <mp_seq_index_obj+0x5e>
        }
    }

    mp_raise_ValueError("object not in sequence");
   17a42:	4803      	ldr	r0, [pc, #12]	; (17a50 <mp_seq_index_obj+0x9c>)
   17a44:	f7f5 fa9e 	bl	cf84 <mp_raise_ValueError>
}
   17a48:	4618      	mov	r0, r3
   17a4a:	3728      	adds	r7, #40	; 0x28
   17a4c:	46bd      	mov	sp, r7
   17a4e:	bd80      	pop	{r7, pc}
   17a50:	000224c0 	.word	0x000224c0

00017a54 <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   17a54:	b580      	push	{r7, lr}
   17a56:	b086      	sub	sp, #24
   17a58:	af00      	add	r7, sp, #0
   17a5a:	60f8      	str	r0, [r7, #12]
   17a5c:	60b9      	str	r1, [r7, #8]
   17a5e:	607a      	str	r2, [r7, #4]
    size_t count = 0;
   17a60:	2300      	movs	r3, #0
   17a62:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17a64:	2300      	movs	r3, #0
   17a66:	613b      	str	r3, [r7, #16]
   17a68:	e011      	b.n	17a8e <mp_seq_count_obj+0x3a>
         if (mp_obj_equal(items[i], value)) {
   17a6a:	693b      	ldr	r3, [r7, #16]
   17a6c:	009b      	lsls	r3, r3, #2
   17a6e:	68fa      	ldr	r2, [r7, #12]
   17a70:	4413      	add	r3, r2
   17a72:	681b      	ldr	r3, [r3, #0]
   17a74:	6879      	ldr	r1, [r7, #4]
   17a76:	4618      	mov	r0, r3
   17a78:	f7f5 fffc 	bl	da74 <mp_obj_equal>
   17a7c:	4603      	mov	r3, r0
   17a7e:	2b00      	cmp	r3, #0
   17a80:	d002      	beq.n	17a88 <mp_seq_count_obj+0x34>
              count++;
   17a82:	697b      	ldr	r3, [r7, #20]
   17a84:	3301      	adds	r3, #1
   17a86:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17a88:	693b      	ldr	r3, [r7, #16]
   17a8a:	3301      	adds	r3, #1
   17a8c:	613b      	str	r3, [r7, #16]
   17a8e:	693a      	ldr	r2, [r7, #16]
   17a90:	68bb      	ldr	r3, [r7, #8]
   17a92:	429a      	cmp	r2, r3
   17a94:	d3e9      	bcc.n	17a6a <mp_seq_count_obj+0x16>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   17a96:	697b      	ldr	r3, [r7, #20]
   17a98:	005b      	lsls	r3, r3, #1
   17a9a:	f043 0301 	orr.w	r3, r3, #1
}
   17a9e:	4618      	mov	r0, r3
   17aa0:	3718      	adds	r7, #24
   17aa2:	46bd      	mov	sp, r7
   17aa4:	bd80      	pop	{r7, pc}
   17aa6:	bf00      	nop

00017aa8 <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   17aa8:	b580      	push	{r7, lr}
   17aaa:	b084      	sub	sp, #16
   17aac:	af00      	add	r7, sp, #0
   17aae:	4603      	mov	r3, r0
   17ab0:	603a      	str	r2, [r7, #0]
   17ab2:	71fb      	strb	r3, [r7, #7]
   17ab4:	460b      	mov	r3, r1
   17ab6:	71bb      	strb	r3, [r7, #6]
    size_t size = 0;
   17ab8:	2300      	movs	r3, #0
   17aba:	60fb      	str	r3, [r7, #12]
    int align = 1;
   17abc:	2301      	movs	r3, #1
   17abe:	60bb      	str	r3, [r7, #8]
    switch (struct_type) {
   17ac0:	79fb      	ldrb	r3, [r7, #7]
   17ac2:	2b3e      	cmp	r3, #62	; 0x3e
   17ac4:	d005      	beq.n	17ad2 <mp_binary_get_size+0x2a>
   17ac6:	2b40      	cmp	r3, #64	; 0x40
   17ac8:	f000 8085 	beq.w	17bd6 <mp_binary_get_size+0x12e>
   17acc:	2b3c      	cmp	r3, #60	; 0x3c
   17ace:	f040 8196 	bne.w	17dfe <mp_binary_get_size+0x356>
        case '<': case '>':
            switch (val_type) {
   17ad2:	79bb      	ldrb	r3, [r7, #6]
   17ad4:	3b42      	subs	r3, #66	; 0x42
   17ad6:	2b2f      	cmp	r3, #47	; 0x2f
   17ad8:	f200 8190 	bhi.w	17dfc <mp_binary_get_size+0x354>
   17adc:	a201      	add	r2, pc, #4	; (adr r2, 17ae4 <mp_binary_get_size+0x3c>)
   17ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17ae2:	bf00      	nop
   17ae4:	00017ba5 	.word	0x00017ba5
   17ae8:	00017dfd 	.word	0x00017dfd
   17aec:	00017dfd 	.word	0x00017dfd
   17af0:	00017dfd 	.word	0x00017dfd
   17af4:	00017dfd 	.word	0x00017dfd
   17af8:	00017dfd 	.word	0x00017dfd
   17afc:	00017bab 	.word	0x00017bab
   17b00:	00017bb1 	.word	0x00017bb1
   17b04:	00017dfd 	.word	0x00017dfd
   17b08:	00017dfd 	.word	0x00017dfd
   17b0c:	00017bb7 	.word	0x00017bb7
   17b10:	00017dfd 	.word	0x00017dfd
   17b14:	00017dfd 	.word	0x00017dfd
   17b18:	00017bc3 	.word	0x00017bc3
   17b1c:	00017bc3 	.word	0x00017bc3
   17b20:	00017bbd 	.word	0x00017bbd
   17b24:	00017dfd 	.word	0x00017dfd
   17b28:	00017bc3 	.word	0x00017bc3
   17b2c:	00017dfd 	.word	0x00017dfd
   17b30:	00017dfd 	.word	0x00017dfd
   17b34:	00017dfd 	.word	0x00017dfd
   17b38:	00017dfd 	.word	0x00017dfd
   17b3c:	00017dfd 	.word	0x00017dfd
   17b40:	00017dfd 	.word	0x00017dfd
   17b44:	00017dfd 	.word	0x00017dfd
   17b48:	00017dfd 	.word	0x00017dfd
   17b4c:	00017dfd 	.word	0x00017dfd
   17b50:	00017dfd 	.word	0x00017dfd
   17b54:	00017dfd 	.word	0x00017dfd
   17b58:	00017dfd 	.word	0x00017dfd
   17b5c:	00017dfd 	.word	0x00017dfd
   17b60:	00017dfd 	.word	0x00017dfd
   17b64:	00017ba5 	.word	0x00017ba5
   17b68:	00017dfd 	.word	0x00017dfd
   17b6c:	00017bcf 	.word	0x00017bcf
   17b70:	00017dfd 	.word	0x00017dfd
   17b74:	00017bc9 	.word	0x00017bc9
   17b78:	00017dfd 	.word	0x00017dfd
   17b7c:	00017bab 	.word	0x00017bab
   17b80:	00017bb1 	.word	0x00017bb1
   17b84:	00017dfd 	.word	0x00017dfd
   17b88:	00017dfd 	.word	0x00017dfd
   17b8c:	00017bb7 	.word	0x00017bb7
   17b90:	00017dfd 	.word	0x00017dfd
   17b94:	00017dfd 	.word	0x00017dfd
   17b98:	00017dfd 	.word	0x00017dfd
   17b9c:	00017dfd 	.word	0x00017dfd
   17ba0:	00017bbd 	.word	0x00017bbd
                case 'b': case 'B':
                    size = 1; break;
   17ba4:	2301      	movs	r3, #1
   17ba6:	60fb      	str	r3, [r7, #12]
   17ba8:	e014      	b.n	17bd4 <mp_binary_get_size+0x12c>
                case 'h': case 'H':
                    size = 2; break;
   17baa:	2302      	movs	r3, #2
   17bac:	60fb      	str	r3, [r7, #12]
   17bae:	e011      	b.n	17bd4 <mp_binary_get_size+0x12c>
                case 'i': case 'I':
                    size = 4; break;
   17bb0:	2304      	movs	r3, #4
   17bb2:	60fb      	str	r3, [r7, #12]
   17bb4:	e00e      	b.n	17bd4 <mp_binary_get_size+0x12c>
                case 'l': case 'L':
                    size = 4; break;
   17bb6:	2304      	movs	r3, #4
   17bb8:	60fb      	str	r3, [r7, #12]
   17bba:	e00b      	b.n	17bd4 <mp_binary_get_size+0x12c>
                case 'q': case 'Q':
                    size = 8; break;
   17bbc:	2308      	movs	r3, #8
   17bbe:	60fb      	str	r3, [r7, #12]
   17bc0:	e008      	b.n	17bd4 <mp_binary_get_size+0x12c>
                case 'P': case 'O': case 'S':
                    size = sizeof(void*); break;
   17bc2:	2304      	movs	r3, #4
   17bc4:	60fb      	str	r3, [r7, #12]
   17bc6:	e005      	b.n	17bd4 <mp_binary_get_size+0x12c>
                case 'f':
                    size = sizeof(float); break;
   17bc8:	2304      	movs	r3, #4
   17bca:	60fb      	str	r3, [r7, #12]
   17bcc:	e002      	b.n	17bd4 <mp_binary_get_size+0x12c>
                case 'd':
                    size = sizeof(double); break;
   17bce:	2308      	movs	r3, #8
   17bd0:	60fb      	str	r3, [r7, #12]
   17bd2:	bf00      	nop
            }
            break;
   17bd4:	e112      	b.n	17dfc <mp_binary_get_size+0x354>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   17bd6:	79bb      	ldrb	r3, [r7, #6]
   17bd8:	3b01      	subs	r3, #1
   17bda:	2b70      	cmp	r3, #112	; 0x70
   17bdc:	f200 810f 	bhi.w	17dfe <mp_binary_get_size+0x356>
   17be0:	a201      	add	r2, pc, #4	; (adr r2, 17be8 <mp_binary_get_size+0x140>)
   17be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17be6:	bf00      	nop
   17be8:	00017dad 	.word	0x00017dad
   17bec:	00017dff 	.word	0x00017dff
   17bf0:	00017dff 	.word	0x00017dff
   17bf4:	00017dff 	.word	0x00017dff
   17bf8:	00017dff 	.word	0x00017dff
   17bfc:	00017dff 	.word	0x00017dff
   17c00:	00017dff 	.word	0x00017dff
   17c04:	00017dff 	.word	0x00017dff
   17c08:	00017dff 	.word	0x00017dff
   17c0c:	00017dff 	.word	0x00017dff
   17c10:	00017dff 	.word	0x00017dff
   17c14:	00017dff 	.word	0x00017dff
   17c18:	00017dff 	.word	0x00017dff
   17c1c:	00017dff 	.word	0x00017dff
   17c20:	00017dff 	.word	0x00017dff
   17c24:	00017dff 	.word	0x00017dff
   17c28:	00017dff 	.word	0x00017dff
   17c2c:	00017dff 	.word	0x00017dff
   17c30:	00017dff 	.word	0x00017dff
   17c34:	00017dff 	.word	0x00017dff
   17c38:	00017dff 	.word	0x00017dff
   17c3c:	00017dff 	.word	0x00017dff
   17c40:	00017dff 	.word	0x00017dff
   17c44:	00017dff 	.word	0x00017dff
   17c48:	00017dff 	.word	0x00017dff
   17c4c:	00017dff 	.word	0x00017dff
   17c50:	00017dff 	.word	0x00017dff
   17c54:	00017dff 	.word	0x00017dff
   17c58:	00017dff 	.word	0x00017dff
   17c5c:	00017dff 	.word	0x00017dff
   17c60:	00017dff 	.word	0x00017dff
   17c64:	00017dff 	.word	0x00017dff
   17c68:	00017dff 	.word	0x00017dff
   17c6c:	00017dff 	.word	0x00017dff
   17c70:	00017dff 	.word	0x00017dff
   17c74:	00017dff 	.word	0x00017dff
   17c78:	00017dff 	.word	0x00017dff
   17c7c:	00017dff 	.word	0x00017dff
   17c80:	00017dff 	.word	0x00017dff
   17c84:	00017dff 	.word	0x00017dff
   17c88:	00017dff 	.word	0x00017dff
   17c8c:	00017dff 	.word	0x00017dff
   17c90:	00017dff 	.word	0x00017dff
   17c94:	00017dff 	.word	0x00017dff
   17c98:	00017dff 	.word	0x00017dff
   17c9c:	00017dff 	.word	0x00017dff
   17ca0:	00017dff 	.word	0x00017dff
   17ca4:	00017dff 	.word	0x00017dff
   17ca8:	00017dff 	.word	0x00017dff
   17cac:	00017dff 	.word	0x00017dff
   17cb0:	00017dff 	.word	0x00017dff
   17cb4:	00017dff 	.word	0x00017dff
   17cb8:	00017dff 	.word	0x00017dff
   17cbc:	00017dff 	.word	0x00017dff
   17cc0:	00017dff 	.word	0x00017dff
   17cc4:	00017dff 	.word	0x00017dff
   17cc8:	00017dff 	.word	0x00017dff
   17ccc:	00017dff 	.word	0x00017dff
   17cd0:	00017dff 	.word	0x00017dff
   17cd4:	00017dff 	.word	0x00017dff
   17cd8:	00017dff 	.word	0x00017dff
   17cdc:	00017dff 	.word	0x00017dff
   17ce0:	00017dff 	.word	0x00017dff
   17ce4:	00017dff 	.word	0x00017dff
   17ce8:	00017dff 	.word	0x00017dff
   17cec:	00017dad 	.word	0x00017dad
   17cf0:	00017dff 	.word	0x00017dff
   17cf4:	00017dff 	.word	0x00017dff
   17cf8:	00017dff 	.word	0x00017dff
   17cfc:	00017dff 	.word	0x00017dff
   17d00:	00017dff 	.word	0x00017dff
   17d04:	00017db7 	.word	0x00017db7
   17d08:	00017dc1 	.word	0x00017dc1
   17d0c:	00017dff 	.word	0x00017dff
   17d10:	00017dff 	.word	0x00017dff
   17d14:	00017dcb 	.word	0x00017dcb
   17d18:	00017dff 	.word	0x00017dff
   17d1c:	00017dff 	.word	0x00017dff
   17d20:	00017ddf 	.word	0x00017ddf
   17d24:	00017ddf 	.word	0x00017ddf
   17d28:	00017dd5 	.word	0x00017dd5
   17d2c:	00017dff 	.word	0x00017dff
   17d30:	00017ddf 	.word	0x00017ddf
   17d34:	00017dff 	.word	0x00017dff
   17d38:	00017dff 	.word	0x00017dff
   17d3c:	00017dff 	.word	0x00017dff
   17d40:	00017dff 	.word	0x00017dff
   17d44:	00017dff 	.word	0x00017dff
   17d48:	00017dff 	.word	0x00017dff
   17d4c:	00017dff 	.word	0x00017dff
   17d50:	00017dff 	.word	0x00017dff
   17d54:	00017dff 	.word	0x00017dff
   17d58:	00017dff 	.word	0x00017dff
   17d5c:	00017dff 	.word	0x00017dff
   17d60:	00017dff 	.word	0x00017dff
   17d64:	00017dff 	.word	0x00017dff
   17d68:	00017dff 	.word	0x00017dff
   17d6c:	00017dad 	.word	0x00017dad
   17d70:	00017dff 	.word	0x00017dff
   17d74:	00017df3 	.word	0x00017df3
   17d78:	00017dff 	.word	0x00017dff
   17d7c:	00017de9 	.word	0x00017de9
   17d80:	00017dff 	.word	0x00017dff
   17d84:	00017db7 	.word	0x00017db7
   17d88:	00017dc1 	.word	0x00017dc1
   17d8c:	00017dff 	.word	0x00017dff
   17d90:	00017dff 	.word	0x00017dff
   17d94:	00017dcb 	.word	0x00017dcb
   17d98:	00017dff 	.word	0x00017dff
   17d9c:	00017dff 	.word	0x00017dff
   17da0:	00017dff 	.word	0x00017dff
   17da4:	00017dff 	.word	0x00017dff
   17da8:	00017dd5 	.word	0x00017dd5
                case BYTEARRAY_TYPECODE:
                case 'b': case 'B':
                    align = size = 1; break;
   17dac:	2301      	movs	r3, #1
   17dae:	60fb      	str	r3, [r7, #12]
   17db0:	2301      	movs	r3, #1
   17db2:	60bb      	str	r3, [r7, #8]
   17db4:	e023      	b.n	17dfe <mp_binary_get_size+0x356>
                case 'h': case 'H':
                    align = alignof(short);
   17db6:	2302      	movs	r3, #2
   17db8:	60bb      	str	r3, [r7, #8]
                    size = sizeof(short); break;
   17dba:	2302      	movs	r3, #2
   17dbc:	60fb      	str	r3, [r7, #12]
   17dbe:	e01e      	b.n	17dfe <mp_binary_get_size+0x356>
                case 'i': case 'I':
                    align = alignof(int);
   17dc0:	2304      	movs	r3, #4
   17dc2:	60bb      	str	r3, [r7, #8]
                    size = sizeof(int); break;
   17dc4:	2304      	movs	r3, #4
   17dc6:	60fb      	str	r3, [r7, #12]
   17dc8:	e019      	b.n	17dfe <mp_binary_get_size+0x356>
                case 'l': case 'L':
                    align = alignof(long);
   17dca:	2304      	movs	r3, #4
   17dcc:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long); break;
   17dce:	2304      	movs	r3, #4
   17dd0:	60fb      	str	r3, [r7, #12]
   17dd2:	e014      	b.n	17dfe <mp_binary_get_size+0x356>
                case 'q': case 'Q':
                    align = alignof(long long);
   17dd4:	2308      	movs	r3, #8
   17dd6:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long long); break;
   17dd8:	2308      	movs	r3, #8
   17dda:	60fb      	str	r3, [r7, #12]
   17ddc:	e00f      	b.n	17dfe <mp_binary_get_size+0x356>
                case 'P': case 'O': case 'S':
                    align = alignof(void*);
   17dde:	2304      	movs	r3, #4
   17de0:	60bb      	str	r3, [r7, #8]
                    size = sizeof(void*); break;
   17de2:	2304      	movs	r3, #4
   17de4:	60fb      	str	r3, [r7, #12]
   17de6:	e00a      	b.n	17dfe <mp_binary_get_size+0x356>
                case 'f':
                    align = alignof(float);
   17de8:	2304      	movs	r3, #4
   17dea:	60bb      	str	r3, [r7, #8]
                    size = sizeof(float); break;
   17dec:	2304      	movs	r3, #4
   17dee:	60fb      	str	r3, [r7, #12]
   17df0:	e005      	b.n	17dfe <mp_binary_get_size+0x356>
                case 'd':
                    align = alignof(double);
   17df2:	2308      	movs	r3, #8
   17df4:	60bb      	str	r3, [r7, #8]
                    size = sizeof(double); break;
   17df6:	2308      	movs	r3, #8
   17df8:	60fb      	str	r3, [r7, #12]
   17dfa:	e000      	b.n	17dfe <mp_binary_get_size+0x356>
            break;
   17dfc:	bf00      	nop
            }
        }
    }

    if (size == 0) {
   17dfe:	68fb      	ldr	r3, [r7, #12]
   17e00:	2b00      	cmp	r3, #0
   17e02:	d102      	bne.n	17e0a <mp_binary_get_size+0x362>
        mp_raise_ValueError("bad typecode");
   17e04:	4806      	ldr	r0, [pc, #24]	; (17e20 <mp_binary_get_size+0x378>)
   17e06:	f7f5 f8bd 	bl	cf84 <mp_raise_ValueError>
    }

    if (palign != NULL) {
   17e0a:	683b      	ldr	r3, [r7, #0]
   17e0c:	2b00      	cmp	r3, #0
   17e0e:	d002      	beq.n	17e16 <mp_binary_get_size+0x36e>
        *palign = align;
   17e10:	68ba      	ldr	r2, [r7, #8]
   17e12:	683b      	ldr	r3, [r7, #0]
   17e14:	601a      	str	r2, [r3, #0]
    }
    return size;
   17e16:	68fb      	ldr	r3, [r7, #12]
}
   17e18:	4618      	mov	r0, r3
   17e1a:	3710      	adds	r7, #16
   17e1c:	46bd      	mov	sp, r7
   17e1e:	bd80      	pop	{r7, pc}
   17e20:	000224d8 	.word	0x000224d8

00017e24 <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   17e24:	b580      	push	{r7, lr}
   17e26:	b086      	sub	sp, #24
   17e28:	af00      	add	r7, sp, #0
   17e2a:	4603      	mov	r3, r0
   17e2c:	60b9      	str	r1, [r7, #8]
   17e2e:	607a      	str	r2, [r7, #4]
   17e30:	73fb      	strb	r3, [r7, #15]
    mp_int_t val = 0;
   17e32:	2300      	movs	r3, #0
   17e34:	617b      	str	r3, [r7, #20]
    switch (typecode) {
   17e36:	7bfb      	ldrb	r3, [r7, #15]
   17e38:	3b01      	subs	r3, #1
   17e3a:	2b6b      	cmp	r3, #107	; 0x6b
   17e3c:	f200 8130 	bhi.w	180a0 <mp_binary_get_val_array+0x27c>
   17e40:	a201      	add	r2, pc, #4	; (adr r2, 17e48 <mp_binary_get_val_array+0x24>)
   17e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17e46:	bf00      	nop
   17e48:	00018007 	.word	0x00018007
   17e4c:	000180a1 	.word	0x000180a1
   17e50:	000180a1 	.word	0x000180a1
   17e54:	000180a1 	.word	0x000180a1
   17e58:	000180a1 	.word	0x000180a1
   17e5c:	000180a1 	.word	0x000180a1
   17e60:	000180a1 	.word	0x000180a1
   17e64:	000180a1 	.word	0x000180a1
   17e68:	000180a1 	.word	0x000180a1
   17e6c:	000180a1 	.word	0x000180a1
   17e70:	000180a1 	.word	0x000180a1
   17e74:	000180a1 	.word	0x000180a1
   17e78:	000180a1 	.word	0x000180a1
   17e7c:	000180a1 	.word	0x000180a1
   17e80:	000180a1 	.word	0x000180a1
   17e84:	000180a1 	.word	0x000180a1
   17e88:	000180a1 	.word	0x000180a1
   17e8c:	000180a1 	.word	0x000180a1
   17e90:	000180a1 	.word	0x000180a1
   17e94:	000180a1 	.word	0x000180a1
   17e98:	000180a1 	.word	0x000180a1
   17e9c:	000180a1 	.word	0x000180a1
   17ea0:	000180a1 	.word	0x000180a1
   17ea4:	000180a1 	.word	0x000180a1
   17ea8:	000180a1 	.word	0x000180a1
   17eac:	000180a1 	.word	0x000180a1
   17eb0:	000180a1 	.word	0x000180a1
   17eb4:	000180a1 	.word	0x000180a1
   17eb8:	000180a1 	.word	0x000180a1
   17ebc:	000180a1 	.word	0x000180a1
   17ec0:	000180a1 	.word	0x000180a1
   17ec4:	000180a1 	.word	0x000180a1
   17ec8:	000180a1 	.word	0x000180a1
   17ecc:	000180a1 	.word	0x000180a1
   17ed0:	000180a1 	.word	0x000180a1
   17ed4:	000180a1 	.word	0x000180a1
   17ed8:	000180a1 	.word	0x000180a1
   17edc:	000180a1 	.word	0x000180a1
   17ee0:	000180a1 	.word	0x000180a1
   17ee4:	000180a1 	.word	0x000180a1
   17ee8:	000180a1 	.word	0x000180a1
   17eec:	000180a1 	.word	0x000180a1
   17ef0:	000180a1 	.word	0x000180a1
   17ef4:	000180a1 	.word	0x000180a1
   17ef8:	000180a1 	.word	0x000180a1
   17efc:	000180a1 	.word	0x000180a1
   17f00:	000180a1 	.word	0x000180a1
   17f04:	000180a1 	.word	0x000180a1
   17f08:	000180a1 	.word	0x000180a1
   17f0c:	000180a1 	.word	0x000180a1
   17f10:	000180a1 	.word	0x000180a1
   17f14:	000180a1 	.word	0x000180a1
   17f18:	000180a1 	.word	0x000180a1
   17f1c:	000180a1 	.word	0x000180a1
   17f20:	000180a1 	.word	0x000180a1
   17f24:	000180a1 	.word	0x000180a1
   17f28:	000180a1 	.word	0x000180a1
   17f2c:	000180a1 	.word	0x000180a1
   17f30:	000180a1 	.word	0x000180a1
   17f34:	000180a1 	.word	0x000180a1
   17f38:	000180a1 	.word	0x000180a1
   17f3c:	000180a1 	.word	0x000180a1
   17f40:	000180a1 	.word	0x000180a1
   17f44:	000180a1 	.word	0x000180a1
   17f48:	000180a1 	.word	0x000180a1
   17f4c:	00018007 	.word	0x00018007
   17f50:	000180a1 	.word	0x000180a1
   17f54:	000180a1 	.word	0x000180a1
   17f58:	000180a1 	.word	0x000180a1
   17f5c:	000180a1 	.word	0x000180a1
   17f60:	000180a1 	.word	0x000180a1
   17f64:	00018023 	.word	0x00018023
   17f68:	00018045 	.word	0x00018045
   17f6c:	000180a1 	.word	0x000180a1
   17f70:	000180a1 	.word	0x000180a1
   17f74:	0001806d 	.word	0x0001806d
   17f78:	000180a1 	.word	0x000180a1
   17f7c:	000180a1 	.word	0x000180a1
   17f80:	00018081 	.word	0x00018081
   17f84:	0001808d 	.word	0x0001808d
   17f88:	000180a1 	.word	0x000180a1
   17f8c:	000180a1 	.word	0x000180a1
   17f90:	000180a1 	.word	0x000180a1
   17f94:	000180a1 	.word	0x000180a1
   17f98:	000180a1 	.word	0x000180a1
   17f9c:	000180a1 	.word	0x000180a1
   17fa0:	000180a1 	.word	0x000180a1
   17fa4:	000180a1 	.word	0x000180a1
   17fa8:	000180a1 	.word	0x000180a1
   17fac:	000180a1 	.word	0x000180a1
   17fb0:	000180a1 	.word	0x000180a1
   17fb4:	000180a1 	.word	0x000180a1
   17fb8:	000180a1 	.word	0x000180a1
   17fbc:	000180a1 	.word	0x000180a1
   17fc0:	000180a1 	.word	0x000180a1
   17fc4:	000180a1 	.word	0x000180a1
   17fc8:	000180a1 	.word	0x000180a1
   17fcc:	00017ff9 	.word	0x00017ff9
   17fd0:	000180a1 	.word	0x000180a1
   17fd4:	000180a1 	.word	0x000180a1
   17fd8:	000180a1 	.word	0x000180a1
   17fdc:	000180a1 	.word	0x000180a1
   17fe0:	000180a1 	.word	0x000180a1
   17fe4:	00018013 	.word	0x00018013
   17fe8:	00018031 	.word	0x00018031
   17fec:	000180a1 	.word	0x000180a1
   17ff0:	000180a1 	.word	0x000180a1
   17ff4:	00018059 	.word	0x00018059
        case 'b':
            val = ((signed char*)p)[index];
   17ff8:	68ba      	ldr	r2, [r7, #8]
   17ffa:	687b      	ldr	r3, [r7, #4]
   17ffc:	4413      	add	r3, r2
   17ffe:	f993 3000 	ldrsb.w	r3, [r3]
   18002:	617b      	str	r3, [r7, #20]
            break;
   18004:	e04c      	b.n	180a0 <mp_binary_get_val_array+0x27c>
        case BYTEARRAY_TYPECODE:
        case 'B':
            val = ((unsigned char*)p)[index];
   18006:	68ba      	ldr	r2, [r7, #8]
   18008:	687b      	ldr	r3, [r7, #4]
   1800a:	4413      	add	r3, r2
   1800c:	781b      	ldrb	r3, [r3, #0]
   1800e:	617b      	str	r3, [r7, #20]
            break;
   18010:	e046      	b.n	180a0 <mp_binary_get_val_array+0x27c>
        case 'h':
            val = ((short*)p)[index];
   18012:	687b      	ldr	r3, [r7, #4]
   18014:	005b      	lsls	r3, r3, #1
   18016:	68ba      	ldr	r2, [r7, #8]
   18018:	4413      	add	r3, r2
   1801a:	f9b3 3000 	ldrsh.w	r3, [r3]
   1801e:	617b      	str	r3, [r7, #20]
            break;
   18020:	e03e      	b.n	180a0 <mp_binary_get_val_array+0x27c>
        case 'H':
            val = ((unsigned short*)p)[index];
   18022:	687b      	ldr	r3, [r7, #4]
   18024:	005b      	lsls	r3, r3, #1
   18026:	68ba      	ldr	r2, [r7, #8]
   18028:	4413      	add	r3, r2
   1802a:	881b      	ldrh	r3, [r3, #0]
   1802c:	617b      	str	r3, [r7, #20]
            break;
   1802e:	e037      	b.n	180a0 <mp_binary_get_val_array+0x27c>
        case 'i':
            return mp_obj_new_int(((int*)p)[index]);
   18030:	687b      	ldr	r3, [r7, #4]
   18032:	009b      	lsls	r3, r3, #2
   18034:	68ba      	ldr	r2, [r7, #8]
   18036:	4413      	add	r3, r2
   18038:	681b      	ldr	r3, [r3, #0]
   1803a:	4618      	mov	r0, r3
   1803c:	f7f8 fc9a 	bl	10974 <mp_obj_new_int>
   18040:	4603      	mov	r3, r0
   18042:	e031      	b.n	180a8 <mp_binary_get_val_array+0x284>
        case 'I':
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   18044:	687b      	ldr	r3, [r7, #4]
   18046:	009b      	lsls	r3, r3, #2
   18048:	68ba      	ldr	r2, [r7, #8]
   1804a:	4413      	add	r3, r2
   1804c:	681b      	ldr	r3, [r3, #0]
   1804e:	4618      	mov	r0, r3
   18050:	f7f8 fc76 	bl	10940 <mp_obj_new_int_from_uint>
   18054:	4603      	mov	r3, r0
   18056:	e027      	b.n	180a8 <mp_binary_get_val_array+0x284>
        case 'l':
            return mp_obj_new_int(((long*)p)[index]);
   18058:	687b      	ldr	r3, [r7, #4]
   1805a:	009b      	lsls	r3, r3, #2
   1805c:	68ba      	ldr	r2, [r7, #8]
   1805e:	4413      	add	r3, r2
   18060:	681b      	ldr	r3, [r3, #0]
   18062:	4618      	mov	r0, r3
   18064:	f7f8 fc86 	bl	10974 <mp_obj_new_int>
   18068:	4603      	mov	r3, r0
   1806a:	e01d      	b.n	180a8 <mp_binary_get_val_array+0x284>
        case 'L':
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   1806c:	687b      	ldr	r3, [r7, #4]
   1806e:	009b      	lsls	r3, r3, #2
   18070:	68ba      	ldr	r2, [r7, #8]
   18072:	4413      	add	r3, r2
   18074:	681b      	ldr	r3, [r3, #0]
   18076:	4618      	mov	r0, r3
   18078:	f7f8 fc62 	bl	10940 <mp_obj_new_int_from_uint>
   1807c:	4603      	mov	r3, r0
   1807e:	e013      	b.n	180a8 <mp_binary_get_val_array+0x284>
        case 'd':
            return mp_obj_new_float(((double*)p)[index]);
#endif
        // Extension to CPython: array of objects
        case 'O':
            return ((mp_obj_t*)p)[index];
   18080:	687b      	ldr	r3, [r7, #4]
   18082:	009b      	lsls	r3, r3, #2
   18084:	68ba      	ldr	r2, [r7, #8]
   18086:	4413      	add	r3, r2
   18088:	681b      	ldr	r3, [r3, #0]
   1808a:	e00d      	b.n	180a8 <mp_binary_get_val_array+0x284>
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   1808c:	687b      	ldr	r3, [r7, #4]
   1808e:	009b      	lsls	r3, r3, #2
   18090:	68ba      	ldr	r2, [r7, #8]
   18092:	4413      	add	r3, r2
   18094:	681b      	ldr	r3, [r3, #0]
   18096:	4618      	mov	r0, r3
   18098:	f7f8 fc6c 	bl	10974 <mp_obj_new_int>
   1809c:	4603      	mov	r3, r0
   1809e:	e003      	b.n	180a8 <mp_binary_get_val_array+0x284>
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   180a0:	697b      	ldr	r3, [r7, #20]
   180a2:	005b      	lsls	r3, r3, #1
   180a4:	f043 0301 	orr.w	r3, r3, #1
}
   180a8:	4618      	mov	r0, r3
   180aa:	3718      	adds	r7, #24
   180ac:	46bd      	mov	sp, r7
   180ae:	bd80      	pop	{r7, pc}

000180b0 <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   180b0:	b4b0      	push	{r4, r5, r7}
   180b2:	b08b      	sub	sp, #44	; 0x2c
   180b4:	af00      	add	r7, sp, #0
   180b6:	60f8      	str	r0, [r7, #12]
   180b8:	607b      	str	r3, [r7, #4]
   180ba:	460b      	mov	r3, r1
   180bc:	72fb      	strb	r3, [r7, #11]
   180be:	4613      	mov	r3, r2
   180c0:	72bb      	strb	r3, [r7, #10]
    int delta;
    if (!big_endian) {
   180c2:	7abb      	ldrb	r3, [r7, #10]
   180c4:	f083 0301 	eor.w	r3, r3, #1
   180c8:	b2db      	uxtb	r3, r3
   180ca:	2b00      	cmp	r3, #0
   180cc:	d008      	beq.n	180e0 <mp_binary_get_int+0x30>
        delta = -1;
   180ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180d2:	627b      	str	r3, [r7, #36]	; 0x24
        src += size - 1;
   180d4:	68fb      	ldr	r3, [r7, #12]
   180d6:	3b01      	subs	r3, #1
   180d8:	687a      	ldr	r2, [r7, #4]
   180da:	4413      	add	r3, r2
   180dc:	607b      	str	r3, [r7, #4]
   180de:	e001      	b.n	180e4 <mp_binary_get_int+0x34>
    } else {
        delta = 1;
   180e0:	2301      	movs	r3, #1
   180e2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    long long val = 0;
   180e4:	f04f 0200 	mov.w	r2, #0
   180e8:	f04f 0300 	mov.w	r3, #0
   180ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (is_signed && *src & 0x80) {
   180f0:	7afb      	ldrb	r3, [r7, #11]
   180f2:	2b00      	cmp	r3, #0
   180f4:	d00a      	beq.n	1810c <mp_binary_get_int+0x5c>
   180f6:	687b      	ldr	r3, [r7, #4]
   180f8:	781b      	ldrb	r3, [r3, #0]
   180fa:	b25b      	sxtb	r3, r3
   180fc:	2b00      	cmp	r3, #0
   180fe:	da05      	bge.n	1810c <mp_binary_get_int+0x5c>
        val = -1;
   18100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18108:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    for (uint i = 0; i < size; i++) {
   1810c:	2300      	movs	r3, #0
   1810e:	617b      	str	r3, [r7, #20]
   18110:	e01b      	b.n	1814a <mp_binary_get_int+0x9a>
        val <<= 8;
   18112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   18116:	021d      	lsls	r5, r3, #8
   18118:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
   1811c:	0214      	lsls	r4, r2, #8
   1811e:	e9c7 4506 	strd	r4, r5, [r7, #24]
        val |= *src;
   18122:	687b      	ldr	r3, [r7, #4]
   18124:	781b      	ldrb	r3, [r3, #0]
   18126:	b2da      	uxtb	r2, r3
   18128:	f04f 0300 	mov.w	r3, #0
   1812c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   18130:	ea42 0200 	orr.w	r2, r2, r0
   18134:	ea43 0301 	orr.w	r3, r3, r1
   18138:	e9c7 2306 	strd	r2, r3, [r7, #24]
        src += delta;
   1813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1813e:	687a      	ldr	r2, [r7, #4]
   18140:	4413      	add	r3, r2
   18142:	607b      	str	r3, [r7, #4]
    for (uint i = 0; i < size; i++) {
   18144:	697b      	ldr	r3, [r7, #20]
   18146:	3301      	adds	r3, #1
   18148:	617b      	str	r3, [r7, #20]
   1814a:	697a      	ldr	r2, [r7, #20]
   1814c:	68fb      	ldr	r3, [r7, #12]
   1814e:	429a      	cmp	r2, r3
   18150:	d3df      	bcc.n	18112 <mp_binary_get_int+0x62>
    }

    return val;
   18152:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
   18156:	4618      	mov	r0, r3
   18158:	4621      	mov	r1, r4
   1815a:	372c      	adds	r7, #44	; 0x2c
   1815c:	46bd      	mov	sp, r7
   1815e:	bcb0      	pop	{r4, r5, r7}
   18160:	4770      	bx	lr
   18162:	bf00      	nop

00018164 <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   18164:	b590      	push	{r4, r7, lr}
   18166:	b089      	sub	sp, #36	; 0x24
   18168:	af00      	add	r7, sp, #0
   1816a:	4603      	mov	r3, r0
   1816c:	603a      	str	r2, [r7, #0]
   1816e:	71fb      	strb	r3, [r7, #7]
   18170:	460b      	mov	r3, r1
   18172:	71bb      	strb	r3, [r7, #6]
    byte *p = *ptr;
   18174:	683b      	ldr	r3, [r7, #0]
   18176:	681b      	ldr	r3, [r3, #0]
   18178:	61fb      	str	r3, [r7, #28]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   1817a:	f107 0208 	add.w	r2, r7, #8
   1817e:	79b9      	ldrb	r1, [r7, #6]
   18180:	79fb      	ldrb	r3, [r7, #7]
   18182:	4618      	mov	r0, r3
   18184:	f7ff fc90 	bl	17aa8 <mp_binary_get_size>
   18188:	61b8      	str	r0, [r7, #24]
    if (struct_type == '@') {
   1818a:	79fb      	ldrb	r3, [r7, #7]
   1818c:	2b40      	cmp	r3, #64	; 0x40
   1818e:	d109      	bne.n	181a4 <mp_binary_get_val+0x40>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   18190:	68ba      	ldr	r2, [r7, #8]
   18192:	69fb      	ldr	r3, [r7, #28]
   18194:	4413      	add	r3, r2
   18196:	1e5a      	subs	r2, r3, #1
   18198:	68bb      	ldr	r3, [r7, #8]
   1819a:	425b      	negs	r3, r3
   1819c:	4013      	ands	r3, r2
   1819e:	61fb      	str	r3, [r7, #28]
        #if MP_ENDIANNESS_LITTLE
        struct_type = '<';
   181a0:	233c      	movs	r3, #60	; 0x3c
   181a2:	71fb      	strb	r3, [r7, #7]
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   181a4:	69fa      	ldr	r2, [r7, #28]
   181a6:	69bb      	ldr	r3, [r7, #24]
   181a8:	441a      	add	r2, r3
   181aa:	683b      	ldr	r3, [r7, #0]
   181ac:	601a      	str	r2, [r3, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   181ae:	79bb      	ldrb	r3, [r7, #6]
   181b0:	2b5a      	cmp	r3, #90	; 0x5a
   181b2:	bf8c      	ite	hi
   181b4:	2301      	movhi	r3, #1
   181b6:	2300      	movls	r3, #0
   181b8:	b2d9      	uxtb	r1, r3
   181ba:	79fb      	ldrb	r3, [r7, #7]
   181bc:	2b3e      	cmp	r3, #62	; 0x3e
   181be:	bf0c      	ite	eq
   181c0:	2301      	moveq	r3, #1
   181c2:	2300      	movne	r3, #0
   181c4:	b2da      	uxtb	r2, r3
   181c6:	69fb      	ldr	r3, [r7, #28]
   181c8:	69b8      	ldr	r0, [r7, #24]
   181ca:	f7ff ff71 	bl	180b0 <mp_binary_get_int>
   181ce:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (val_type == 'O') {
   181d2:	79bb      	ldrb	r3, [r7, #6]
   181d4:	2b4f      	cmp	r3, #79	; 0x4f
   181d6:	d101      	bne.n	181dc <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
   181d8:	693b      	ldr	r3, [r7, #16]
   181da:	e045      	b.n	18268 <mp_binary_get_val+0x104>
    } else if (val_type == 'S') {
   181dc:	79bb      	ldrb	r3, [r7, #6]
   181de:	2b53      	cmp	r3, #83	; 0x53
   181e0:	d10b      	bne.n	181fa <mp_binary_get_val+0x96>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
   181e2:	693b      	ldr	r3, [r7, #16]
   181e4:	60fb      	str	r3, [r7, #12]
        return mp_obj_new_str(s_val, strlen(s_val));
   181e6:	68f8      	ldr	r0, [r7, #12]
   181e8:	f003 fece 	bl	1bf88 <strlen>
   181ec:	4603      	mov	r3, r0
   181ee:	4619      	mov	r1, r3
   181f0:	68f8      	ldr	r0, [r7, #12]
   181f2:	f7fd f8d1 	bl	15398 <mp_obj_new_str>
   181f6:	4603      	mov	r3, r0
   181f8:	e036      	b.n	18268 <mp_binary_get_val+0x104>
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   181fa:	79bb      	ldrb	r3, [r7, #6]
   181fc:	2b5a      	cmp	r3, #90	; 0x5a
   181fe:	d91c      	bls.n	1823a <mp_binary_get_val+0xd6>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   18200:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18204:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   18208:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   1820c:	db0f      	blt.n	1822e <mp_binary_get_val+0xca>
   1820e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18212:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   18216:	f04f 0200 	mov.w	r2, #0
   1821a:	4299      	cmp	r1, r3
   1821c:	eb72 0304 	sbcs.w	r3, r2, r4
   18220:	db05      	blt.n	1822e <mp_binary_get_val+0xca>
            return mp_obj_new_int((mp_int_t)val);
   18222:	693b      	ldr	r3, [r7, #16]
   18224:	4618      	mov	r0, r3
   18226:	f7f8 fba5 	bl	10974 <mp_obj_new_int>
   1822a:	4603      	mov	r3, r0
   1822c:	e01c      	b.n	18268 <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ll(val);
   1822e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   18232:	f7f8 fb69 	bl	10908 <mp_obj_new_int_from_ll>
   18236:	4603      	mov	r3, r0
   18238:	e016      	b.n	18268 <mp_binary_get_val+0x104>
        }
    } else {
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   1823a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   1823e:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   18242:	f04f 0200 	mov.w	r2, #0
   18246:	42a2      	cmp	r2, r4
   18248:	bf08      	it	eq
   1824a:	4299      	cmpeq	r1, r3
   1824c:	d305      	bcc.n	1825a <mp_binary_get_val+0xf6>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   1824e:	693b      	ldr	r3, [r7, #16]
   18250:	4618      	mov	r0, r3
   18252:	f7f8 fb75 	bl	10940 <mp_obj_new_int_from_uint>
   18256:	4603      	mov	r3, r0
   18258:	e006      	b.n	18268 <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ull(val);
   1825a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   1825e:	4618      	mov	r0, r3
   18260:	4621      	mov	r1, r4
   18262:	f7f8 fb5f 	bl	10924 <mp_obj_new_int_from_ull>
   18266:	4603      	mov	r3, r0
        }
    }
}
   18268:	4618      	mov	r0, r3
   1826a:	3724      	adds	r7, #36	; 0x24
   1826c:	46bd      	mov	sp, r7
   1826e:	bd90      	pop	{r4, r7, pc}

00018270 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   18270:	b580      	push	{r7, lr}
   18272:	b086      	sub	sp, #24
   18274:	af00      	add	r7, sp, #0
   18276:	60f8      	str	r0, [r7, #12]
   18278:	607a      	str	r2, [r7, #4]
   1827a:	603b      	str	r3, [r7, #0]
   1827c:	460b      	mov	r3, r1
   1827e:	72fb      	strb	r3, [r7, #11]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   18280:	7afb      	ldrb	r3, [r7, #11]
   18282:	f083 0301 	eor.w	r3, r3, #1
   18286:	b2db      	uxtb	r3, r3
   18288:	2b00      	cmp	r3, #0
   1828a:	d006      	beq.n	1829a <mp_binary_set_int+0x2a>
        memcpy(dest, &val, val_sz);
   1828c:	463b      	mov	r3, r7
   1828e:	68fa      	ldr	r2, [r7, #12]
   18290:	4619      	mov	r1, r3
   18292:	6878      	ldr	r0, [r7, #4]
   18294:	f003 fd3e 	bl	1bd14 <memcpy>
        }
        while (val_sz--) {
            *dest++ = *--src;
        }
    }
}
   18298:	e012      	b.n	182c0 <mp_binary_set_int+0x50>
            src = (const byte*)&val + val_sz;
   1829a:	463a      	mov	r2, r7
   1829c:	68fb      	ldr	r3, [r7, #12]
   1829e:	4413      	add	r3, r2
   182a0:	617b      	str	r3, [r7, #20]
        while (val_sz--) {
   182a2:	e008      	b.n	182b6 <mp_binary_set_int+0x46>
            *dest++ = *--src;
   182a4:	687b      	ldr	r3, [r7, #4]
   182a6:	1c5a      	adds	r2, r3, #1
   182a8:	607a      	str	r2, [r7, #4]
   182aa:	697a      	ldr	r2, [r7, #20]
   182ac:	3a01      	subs	r2, #1
   182ae:	617a      	str	r2, [r7, #20]
   182b0:	697a      	ldr	r2, [r7, #20]
   182b2:	7812      	ldrb	r2, [r2, #0]
   182b4:	701a      	strb	r2, [r3, #0]
        while (val_sz--) {
   182b6:	68fb      	ldr	r3, [r7, #12]
   182b8:	1e5a      	subs	r2, r3, #1
   182ba:	60fa      	str	r2, [r7, #12]
   182bc:	2b00      	cmp	r3, #0
   182be:	d1f1      	bne.n	182a4 <mp_binary_set_int+0x34>
}
   182c0:	bf00      	nop
   182c2:	3718      	adds	r7, #24
   182c4:	46bd      	mov	sp, r7
   182c6:	bd80      	pop	{r7, pc}

000182c8 <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   182c8:	b580      	push	{r7, lr}
   182ca:	b08a      	sub	sp, #40	; 0x28
   182cc:	af00      	add	r7, sp, #0
   182ce:	60ba      	str	r2, [r7, #8]
   182d0:	607b      	str	r3, [r7, #4]
   182d2:	4603      	mov	r3, r0
   182d4:	73fb      	strb	r3, [r7, #15]
   182d6:	460b      	mov	r3, r1
   182d8:	73bb      	strb	r3, [r7, #14]
    byte *p = *ptr;
   182da:	687b      	ldr	r3, [r7, #4]
   182dc:	681b      	ldr	r3, [r3, #0]
   182de:	627b      	str	r3, [r7, #36]	; 0x24
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   182e0:	f107 0214 	add.w	r2, r7, #20
   182e4:	7bb9      	ldrb	r1, [r7, #14]
   182e6:	7bfb      	ldrb	r3, [r7, #15]
   182e8:	4618      	mov	r0, r3
   182ea:	f7ff fbdd 	bl	17aa8 <mp_binary_get_size>
   182ee:	61f8      	str	r0, [r7, #28]
    if (struct_type == '@') {
   182f0:	7bfb      	ldrb	r3, [r7, #15]
   182f2:	2b40      	cmp	r3, #64	; 0x40
   182f4:	d109      	bne.n	1830a <mp_binary_set_val+0x42>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   182f6:	697a      	ldr	r2, [r7, #20]
   182f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   182fa:	4413      	add	r3, r2
   182fc:	1e5a      	subs	r2, r3, #1
   182fe:	697b      	ldr	r3, [r7, #20]
   18300:	425b      	negs	r3, r3
   18302:	4013      	ands	r3, r2
   18304:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_ENDIANNESS_LITTLE) {
            struct_type = '<';
   18306:	233c      	movs	r3, #60	; 0x3c
   18308:	73fb      	strb	r3, [r7, #15]
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   1830a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1830c:	69fb      	ldr	r3, [r7, #28]
   1830e:	441a      	add	r2, r3
   18310:	687b      	ldr	r3, [r7, #4]
   18312:	601a      	str	r2, [r3, #0]

    mp_uint_t val;
    switch (val_type) {
   18314:	7bbb      	ldrb	r3, [r7, #14]
   18316:	2b4f      	cmp	r3, #79	; 0x4f
   18318:	d102      	bne.n	18320 <mp_binary_set_val+0x58>
        case 'O':
            val = (mp_uint_t)val_in;
   1831a:	68bb      	ldr	r3, [r7, #8]
   1831c:	623b      	str	r3, [r7, #32]
            break;
   1831e:	e01e      	b.n	1835e <mp_binary_set_val+0x96>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   18320:	68b8      	ldr	r0, [r7, #8]
   18322:	f7f5 fc31 	bl	db88 <mp_obj_get_int>
   18326:	4603      	mov	r3, r0
   18328:	623b      	str	r3, [r7, #32]
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   1832a:	69fb      	ldr	r3, [r7, #28]
   1832c:	2b04      	cmp	r3, #4
   1832e:	d916      	bls.n	1835e <mp_binary_set_val+0x96>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   18330:	7bbb      	ldrb	r3, [r7, #14]
   18332:	2b5a      	cmp	r3, #90	; 0x5a
   18334:	d904      	bls.n	18340 <mp_binary_set_val+0x78>
   18336:	6a3b      	ldr	r3, [r7, #32]
   18338:	2b00      	cmp	r3, #0
   1833a:	da01      	bge.n	18340 <mp_binary_set_val+0x78>
   1833c:	23ff      	movs	r3, #255	; 0xff
   1833e:	e000      	b.n	18342 <mp_binary_set_val+0x7a>
   18340:	2300      	movs	r3, #0
   18342:	61bb      	str	r3, [r7, #24]
                    memset(p, c, size);
   18344:	69fa      	ldr	r2, [r7, #28]
   18346:	69b9      	ldr	r1, [r7, #24]
   18348:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1834a:	f003 fd7f 	bl	1be4c <memset>
                    if (struct_type == '>') {
   1834e:	7bfb      	ldrb	r3, [r7, #15]
   18350:	2b3e      	cmp	r3, #62	; 0x3e
   18352:	d104      	bne.n	1835e <mp_binary_set_val+0x96>
                        p += size - sizeof(val);
   18354:	69fb      	ldr	r3, [r7, #28]
   18356:	3b04      	subs	r3, #4
   18358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1835a:	4413      	add	r3, r2
   1835c:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   1835e:	69fb      	ldr	r3, [r7, #28]
   18360:	2b04      	cmp	r3, #4
   18362:	bf28      	it	cs
   18364:	2304      	movcs	r3, #4
   18366:	4618      	mov	r0, r3
   18368:	7bfb      	ldrb	r3, [r7, #15]
   1836a:	2b3e      	cmp	r3, #62	; 0x3e
   1836c:	bf0c      	ite	eq
   1836e:	2301      	moveq	r3, #1
   18370:	2300      	movne	r3, #0
   18372:	b2d9      	uxtb	r1, r3
   18374:	6a3b      	ldr	r3, [r7, #32]
   18376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18378:	f7ff ff7a 	bl	18270 <mp_binary_set_int>
}
   1837c:	bf00      	nop
   1837e:	3728      	adds	r7, #40	; 0x28
   18380:	46bd      	mov	sp, r7
   18382:	bd80      	pop	{r7, pc}

00018384 <mp_binary_set_val_array>:

void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   18384:	b580      	push	{r7, lr}
   18386:	b084      	sub	sp, #16
   18388:	af00      	add	r7, sp, #0
   1838a:	60b9      	str	r1, [r7, #8]
   1838c:	607a      	str	r2, [r7, #4]
   1838e:	603b      	str	r3, [r7, #0]
   18390:	4603      	mov	r3, r0
   18392:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   18394:	7bfb      	ldrb	r3, [r7, #15]
   18396:	2b4f      	cmp	r3, #79	; 0x4f
   18398:	d106      	bne.n	183a8 <mp_binary_set_val_array+0x24>
            ((double*)p)[index] = mp_obj_get_float(val_in);
            break;
#endif
        // Extension to CPython: array of objects
        case 'O':
            ((mp_obj_t*)p)[index] = val_in;
   1839a:	687b      	ldr	r3, [r7, #4]
   1839c:	009b      	lsls	r3, r3, #2
   1839e:	68ba      	ldr	r2, [r7, #8]
   183a0:	4413      	add	r3, r2
   183a2:	683a      	ldr	r2, [r7, #0]
   183a4:	601a      	str	r2, [r3, #0]
            break;
   183a6:	e008      	b.n	183ba <mp_binary_set_val_array+0x36>
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
                    size, (uint8_t*)p + index * size);
                return;
            }
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   183a8:	6838      	ldr	r0, [r7, #0]
   183aa:	f7f5 fbed 	bl	db88 <mp_obj_get_int>
   183ae:	4603      	mov	r3, r0
   183b0:	7bf8      	ldrb	r0, [r7, #15]
   183b2:	687a      	ldr	r2, [r7, #4]
   183b4:	68b9      	ldr	r1, [r7, #8]
   183b6:	f000 f805 	bl	183c4 <mp_binary_set_val_array_from_int>
    }
}
   183ba:	bf00      	nop
   183bc:	3710      	adds	r7, #16
   183be:	46bd      	mov	sp, r7
   183c0:	bd80      	pop	{r7, pc}
   183c2:	bf00      	nop

000183c4 <mp_binary_set_val_array_from_int>:

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   183c4:	b480      	push	{r7}
   183c6:	b085      	sub	sp, #20
   183c8:	af00      	add	r7, sp, #0
   183ca:	60b9      	str	r1, [r7, #8]
   183cc:	607a      	str	r2, [r7, #4]
   183ce:	603b      	str	r3, [r7, #0]
   183d0:	4603      	mov	r3, r0
   183d2:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   183d4:	7bfb      	ldrb	r3, [r7, #15]
   183d6:	2b4c      	cmp	r3, #76	; 0x4c
   183d8:	d04e      	beq.n	18478 <mp_binary_set_val_array_from_int+0xb4>
   183da:	2b4c      	cmp	r3, #76	; 0x4c
   183dc:	dc0b      	bgt.n	183f6 <mp_binary_set_val_array_from_int+0x32>
   183de:	2b42      	cmp	r3, #66	; 0x42
   183e0:	d01e      	beq.n	18420 <mp_binary_set_val_array_from_int+0x5c>
   183e2:	2b42      	cmp	r3, #66	; 0x42
   183e4:	dc02      	bgt.n	183ec <mp_binary_set_val_array_from_int+0x28>
   183e6:	2b01      	cmp	r3, #1
   183e8:	d01a      	beq.n	18420 <mp_binary_set_val_array_from_int+0x5c>
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   183ea:	e053      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   183ec:	2b48      	cmp	r3, #72	; 0x48
   183ee:	d026      	beq.n	1843e <mp_binary_set_val_array_from_int+0x7a>
   183f0:	2b49      	cmp	r3, #73	; 0x49
   183f2:	d033      	beq.n	1845c <mp_binary_set_val_array_from_int+0x98>
}
   183f4:	e04e      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   183f6:	2b68      	cmp	r3, #104	; 0x68
   183f8:	d019      	beq.n	1842e <mp_binary_set_val_array_from_int+0x6a>
   183fa:	2b68      	cmp	r3, #104	; 0x68
   183fc:	dc04      	bgt.n	18408 <mp_binary_set_val_array_from_int+0x44>
   183fe:	2b50      	cmp	r3, #80	; 0x50
   18400:	d041      	beq.n	18486 <mp_binary_set_val_array_from_int+0xc2>
   18402:	2b62      	cmp	r3, #98	; 0x62
   18404:	d005      	beq.n	18412 <mp_binary_set_val_array_from_int+0x4e>
}
   18406:	e045      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   18408:	2b69      	cmp	r3, #105	; 0x69
   1840a:	d020      	beq.n	1844e <mp_binary_set_val_array_from_int+0x8a>
   1840c:	2b6c      	cmp	r3, #108	; 0x6c
   1840e:	d02c      	beq.n	1846a <mp_binary_set_val_array_from_int+0xa6>
}
   18410:	e040      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((signed char*)p)[index] = val;
   18412:	68ba      	ldr	r2, [r7, #8]
   18414:	687b      	ldr	r3, [r7, #4]
   18416:	4413      	add	r3, r2
   18418:	683a      	ldr	r2, [r7, #0]
   1841a:	b252      	sxtb	r2, r2
   1841c:	701a      	strb	r2, [r3, #0]
            break;
   1841e:	e039      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned char*)p)[index] = val;
   18420:	68ba      	ldr	r2, [r7, #8]
   18422:	687b      	ldr	r3, [r7, #4]
   18424:	4413      	add	r3, r2
   18426:	683a      	ldr	r2, [r7, #0]
   18428:	b2d2      	uxtb	r2, r2
   1842a:	701a      	strb	r2, [r3, #0]
            break;
   1842c:	e032      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((short*)p)[index] = val;
   1842e:	687b      	ldr	r3, [r7, #4]
   18430:	005b      	lsls	r3, r3, #1
   18432:	68ba      	ldr	r2, [r7, #8]
   18434:	4413      	add	r3, r2
   18436:	683a      	ldr	r2, [r7, #0]
   18438:	b212      	sxth	r2, r2
   1843a:	801a      	strh	r2, [r3, #0]
            break;
   1843c:	e02a      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned short*)p)[index] = val;
   1843e:	687b      	ldr	r3, [r7, #4]
   18440:	005b      	lsls	r3, r3, #1
   18442:	68ba      	ldr	r2, [r7, #8]
   18444:	4413      	add	r3, r2
   18446:	683a      	ldr	r2, [r7, #0]
   18448:	b292      	uxth	r2, r2
   1844a:	801a      	strh	r2, [r3, #0]
            break;
   1844c:	e022      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((int*)p)[index] = val;
   1844e:	687b      	ldr	r3, [r7, #4]
   18450:	009b      	lsls	r3, r3, #2
   18452:	68ba      	ldr	r2, [r7, #8]
   18454:	4413      	add	r3, r2
   18456:	683a      	ldr	r2, [r7, #0]
   18458:	601a      	str	r2, [r3, #0]
            break;
   1845a:	e01b      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned int*)p)[index] = val;
   1845c:	687b      	ldr	r3, [r7, #4]
   1845e:	009b      	lsls	r3, r3, #2
   18460:	68ba      	ldr	r2, [r7, #8]
   18462:	4413      	add	r3, r2
   18464:	683a      	ldr	r2, [r7, #0]
   18466:	601a      	str	r2, [r3, #0]
            break;
   18468:	e014      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((long*)p)[index] = val;
   1846a:	687b      	ldr	r3, [r7, #4]
   1846c:	009b      	lsls	r3, r3, #2
   1846e:	68ba      	ldr	r2, [r7, #8]
   18470:	4413      	add	r3, r2
   18472:	683a      	ldr	r2, [r7, #0]
   18474:	601a      	str	r2, [r3, #0]
            break;
   18476:	e00d      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned long*)p)[index] = val;
   18478:	687b      	ldr	r3, [r7, #4]
   1847a:	009b      	lsls	r3, r3, #2
   1847c:	68ba      	ldr	r2, [r7, #8]
   1847e:	4413      	add	r3, r2
   18480:	683a      	ldr	r2, [r7, #0]
   18482:	601a      	str	r2, [r3, #0]
            break;
   18484:	e006      	b.n	18494 <mp_binary_set_val_array_from_int+0xd0>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   18486:	687b      	ldr	r3, [r7, #4]
   18488:	009b      	lsls	r3, r3, #2
   1848a:	68ba      	ldr	r2, [r7, #8]
   1848c:	4413      	add	r3, r2
   1848e:	683a      	ldr	r2, [r7, #0]
   18490:	601a      	str	r2, [r3, #0]
            break;
   18492:	bf00      	nop
}
   18494:	bf00      	nop
   18496:	3714      	adds	r7, #20
   18498:	46bd      	mov	sp, r7
   1849a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1849e:	4770      	bx	lr

000184a0 <vstr_str>:
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
   184a0:	b480      	push	{r7}
   184a2:	b083      	sub	sp, #12
   184a4:	af00      	add	r7, sp, #0
   184a6:	6078      	str	r0, [r7, #4]
   184a8:	687b      	ldr	r3, [r7, #4]
   184aa:	689b      	ldr	r3, [r3, #8]
   184ac:	4618      	mov	r0, r3
   184ae:	370c      	adds	r7, #12
   184b0:	46bd      	mov	sp, r7
   184b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   184b6:	4770      	bx	lr

000184b8 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   184b8:	b480      	push	{r7}
   184ba:	b083      	sub	sp, #12
   184bc:	af00      	add	r7, sp, #0
   184be:	6078      	str	r0, [r7, #4]
   184c0:	687b      	ldr	r3, [r7, #4]
   184c2:	685b      	ldr	r3, [r3, #4]
   184c4:	4618      	mov	r0, r3
   184c6:	370c      	adds	r7, #12
   184c8:	46bd      	mov	sp, r7
   184ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   184ce:	4770      	bx	lr

000184d0 <mp_obj_module_get_globals>:
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
   184d0:	b480      	push	{r7}
   184d2:	b083      	sub	sp, #12
   184d4:	af00      	add	r7, sp, #0
   184d6:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
   184d8:	687b      	ldr	r3, [r7, #4]
   184da:	685b      	ldr	r3, [r3, #4]
}
   184dc:	4618      	mov	r0, r3
   184de:	370c      	adds	r7, #12
   184e0:	46bd      	mov	sp, r7
   184e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   184e6:	4770      	bx	lr

000184e8 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
   184e8:	b480      	push	{r7}
   184ea:	b083      	sub	sp, #12
   184ec:	af00      	add	r7, sp, #0
   184ee:	6078      	str	r0, [r7, #4]
}
   184f0:	bf00      	nop
   184f2:	370c      	adds	r7, #12
   184f4:	46bd      	mov	sp, r7
   184f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   184fa:	4770      	bx	lr

000184fc <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   184fc:	b480      	push	{r7}
   184fe:	af00      	add	r7, sp, #0
   18500:	4b03      	ldr	r3, [pc, #12]	; (18510 <mp_locals_get+0x14>)
   18502:	685b      	ldr	r3, [r3, #4]
   18504:	4618      	mov	r0, r3
   18506:	46bd      	mov	sp, r7
   18508:	f85d 7b04 	ldr.w	r7, [sp], #4
   1850c:	4770      	bx	lr
   1850e:	bf00      	nop
   18510:	20000a2c 	.word	0x20000a2c

00018514 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18514:	b480      	push	{r7}
   18516:	b083      	sub	sp, #12
   18518:	af00      	add	r7, sp, #0
   1851a:	6078      	str	r0, [r7, #4]
   1851c:	4a04      	ldr	r2, [pc, #16]	; (18530 <mp_locals_set+0x1c>)
   1851e:	687b      	ldr	r3, [r7, #4]
   18520:	6053      	str	r3, [r2, #4]
   18522:	bf00      	nop
   18524:	370c      	adds	r7, #12
   18526:	46bd      	mov	sp, r7
   18528:	f85d 7b04 	ldr.w	r7, [sp], #4
   1852c:	4770      	bx	lr
   1852e:	bf00      	nop
   18530:	20000a2c 	.word	0x20000a2c

00018534 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18534:	b480      	push	{r7}
   18536:	af00      	add	r7, sp, #0
   18538:	4b03      	ldr	r3, [pc, #12]	; (18548 <mp_globals_get+0x14>)
   1853a:	689b      	ldr	r3, [r3, #8]
   1853c:	4618      	mov	r0, r3
   1853e:	46bd      	mov	sp, r7
   18540:	f85d 7b04 	ldr.w	r7, [sp], #4
   18544:	4770      	bx	lr
   18546:	bf00      	nop
   18548:	20000a2c 	.word	0x20000a2c

0001854c <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   1854c:	b480      	push	{r7}
   1854e:	b083      	sub	sp, #12
   18550:	af00      	add	r7, sp, #0
   18552:	6078      	str	r0, [r7, #4]
   18554:	4a04      	ldr	r2, [pc, #16]	; (18568 <mp_globals_set+0x1c>)
   18556:	687b      	ldr	r3, [r7, #4]
   18558:	6093      	str	r3, [r2, #8]
   1855a:	bf00      	nop
   1855c:	370c      	adds	r7, #12
   1855e:	46bd      	mov	sp, r7
   18560:	f85d 7b04 	ldr.w	r7, [sp], #4
   18564:	4770      	bx	lr
   18566:	bf00      	nop
   18568:	20000a2c 	.word	0x20000a2c

0001856c <mp_obj_is_package>:

#if MICROPY_ENABLE_EXTERNAL_IMPORT

#define PATH_SEP_CHAR '/'

bool mp_obj_is_package(mp_obj_t module) {
   1856c:	b580      	push	{r7, lr}
   1856e:	b084      	sub	sp, #16
   18570:	af00      	add	r7, sp, #0
   18572:	6078      	str	r0, [r7, #4]
    mp_obj_t dest[2];
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   18574:	f107 0308 	add.w	r3, r7, #8
   18578:	461a      	mov	r2, r3
   1857a:	211e      	movs	r1, #30
   1857c:	6878      	ldr	r0, [r7, #4]
   1857e:	f7f4 f8e3 	bl	c748 <mp_load_method_maybe>
    return dest[0] != MP_OBJ_NULL;
   18582:	68bb      	ldr	r3, [r7, #8]
   18584:	2b00      	cmp	r3, #0
   18586:	bf14      	ite	ne
   18588:	2301      	movne	r3, #1
   1858a:	2300      	moveq	r3, #0
   1858c:	b2db      	uxtb	r3, r3
}
   1858e:	4618      	mov	r0, r3
   18590:	3710      	adds	r7, #16
   18592:	46bd      	mov	sp, r7
   18594:	bd80      	pop	{r7, pc}
   18596:	bf00      	nop

00018598 <mp_import_stat_any>:

// Stat either frozen or normal module by a given path
// (whatever is available, if at all).
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   18598:	b580      	push	{r7, lr}
   1859a:	b084      	sub	sp, #16
   1859c:	af00      	add	r7, sp, #0
   1859e:	6078      	str	r0, [r7, #4]
    #if MICROPY_MODULE_FROZEN
    mp_import_stat_t st = mp_frozen_stat(path);
   185a0:	6878      	ldr	r0, [r7, #4]
   185a2:	f002 fe29 	bl	1b1f8 <mp_frozen_stat>
   185a6:	60f8      	str	r0, [r7, #12]
    if (st != MP_IMPORT_STAT_NO_EXIST) {
   185a8:	68fb      	ldr	r3, [r7, #12]
   185aa:	2b00      	cmp	r3, #0
   185ac:	d001      	beq.n	185b2 <mp_import_stat_any+0x1a>
        return st;
   185ae:	68fb      	ldr	r3, [r7, #12]
   185b0:	e003      	b.n	185ba <mp_import_stat_any+0x22>
    }
    #endif
    return mp_import_stat(path);
   185b2:	6878      	ldr	r0, [r7, #4]
   185b4:	f002 feca 	bl	1b34c <mp_import_stat>
   185b8:	4603      	mov	r3, r0
}
   185ba:	4618      	mov	r0, r3
   185bc:	3710      	adds	r7, #16
   185be:	46bd      	mov	sp, r7
   185c0:	bd80      	pop	{r7, pc}
   185c2:	bf00      	nop

000185c4 <stat_file_py_or_mpy>:

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   185c4:	b580      	push	{r7, lr}
   185c6:	b084      	sub	sp, #16
   185c8:	af00      	add	r7, sp, #0
   185ca:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   185cc:	6878      	ldr	r0, [r7, #4]
   185ce:	f7e8 ffdf 	bl	1590 <vstr_null_terminated_str>
   185d2:	4603      	mov	r3, r0
   185d4:	4618      	mov	r0, r3
   185d6:	f7ff ffdf 	bl	18598 <mp_import_stat_any>
   185da:	60f8      	str	r0, [r7, #12]
    if (stat == MP_IMPORT_STAT_FILE) {
   185dc:	68fb      	ldr	r3, [r7, #12]
   185de:	2b02      	cmp	r3, #2
   185e0:	d101      	bne.n	185e6 <stat_file_py_or_mpy+0x22>
        return stat;
   185e2:	68fb      	ldr	r3, [r7, #12]
   185e4:	e000      	b.n	185e8 <stat_file_py_or_mpy+0x24>
    if (stat == MP_IMPORT_STAT_FILE) {
        return stat;
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   185e6:	2300      	movs	r3, #0
}
   185e8:	4618      	mov	r0, r3
   185ea:	3710      	adds	r7, #16
   185ec:	46bd      	mov	sp, r7
   185ee:	bd80      	pop	{r7, pc}

000185f0 <stat_dir_or_file>:

STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   185f0:	b580      	push	{r7, lr}
   185f2:	b084      	sub	sp, #16
   185f4:	af00      	add	r7, sp, #0
   185f6:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   185f8:	6878      	ldr	r0, [r7, #4]
   185fa:	f7e8 ffc9 	bl	1590 <vstr_null_terminated_str>
   185fe:	4603      	mov	r3, r0
   18600:	4618      	mov	r0, r3
   18602:	f7ff ffc9 	bl	18598 <mp_import_stat_any>
   18606:	60f8      	str	r0, [r7, #12]
    DEBUG_printf("stat %s: %d\n", vstr_str(path), stat);
    if (stat == MP_IMPORT_STAT_DIR) {
   18608:	68fb      	ldr	r3, [r7, #12]
   1860a:	2b01      	cmp	r3, #1
   1860c:	d101      	bne.n	18612 <stat_dir_or_file+0x22>
        return stat;
   1860e:	68fb      	ldr	r3, [r7, #12]
   18610:	e007      	b.n	18622 <stat_dir_or_file+0x32>
    }

    // not a directory, add .py and try as a file
    vstr_add_str(path, ".py");
   18612:	4906      	ldr	r1, [pc, #24]	; (1862c <stat_dir_or_file+0x3c>)
   18614:	6878      	ldr	r0, [r7, #4]
   18616:	f7e8 fff9 	bl	160c <vstr_add_str>
    return stat_file_py_or_mpy(path);
   1861a:	6878      	ldr	r0, [r7, #4]
   1861c:	f7ff ffd2 	bl	185c4 <stat_file_py_or_mpy>
   18620:	4603      	mov	r3, r0
}
   18622:	4618      	mov	r0, r3
   18624:	3710      	adds	r7, #16
   18626:	46bd      	mov	sp, r7
   18628:	bd80      	pop	{r7, pc}
   1862a:	bf00      	nop
   1862c:	000224e8 	.word	0x000224e8

00018630 <find_file>:

STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   18630:	b580      	push	{r7, lr}
   18632:	b084      	sub	sp, #16
   18634:	af00      	add	r7, sp, #0
   18636:	60f8      	str	r0, [r7, #12]
   18638:	60b9      	str	r1, [r7, #8]
   1863a:	607a      	str	r2, [r7, #4]
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);

    if (path_num == 0) {
#endif
        // mp_sys_path is empty, so just use the given file name
        vstr_add_strn(dest, file_str, file_len);
   1863c:	68ba      	ldr	r2, [r7, #8]
   1863e:	68f9      	ldr	r1, [r7, #12]
   18640:	6878      	ldr	r0, [r7, #4]
   18642:	f7e8 fff5 	bl	1630 <vstr_add_strn>
        return stat_dir_or_file(dest);
   18646:	6878      	ldr	r0, [r7, #4]
   18648:	f7ff ffd2 	bl	185f0 <stat_dir_or_file>
   1864c:	4603      	mov	r3, r0

        // could not find a directory or file
        return MP_IMPORT_STAT_NO_EXIST;
    }
#endif
}
   1864e:	4618      	mov	r0, r3
   18650:	3710      	adds	r7, #16
   18652:	46bd      	mov	sp, r7
   18654:	bd80      	pop	{r7, pc}
   18656:	bf00      	nop

00018658 <do_load_from_lexer>:

#if MICROPY_ENABLE_COMPILER
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   18658:	b580      	push	{r7, lr}
   1865a:	b084      	sub	sp, #16
   1865c:	af00      	add	r7, sp, #0
   1865e:	6078      	str	r0, [r7, #4]
   18660:	6039      	str	r1, [r7, #0]
    qstr source_name = lex->source_name;
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   18662:	6878      	ldr	r0, [r7, #4]
   18664:	f7ff ff34 	bl	184d0 <mp_obj_module_get_globals>
   18668:	60f8      	str	r0, [r7, #12]
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   1866a:	68fb      	ldr	r3, [r7, #12]
   1866c:	68fa      	ldr	r2, [r7, #12]
   1866e:	2101      	movs	r1, #1
   18670:	6838      	ldr	r0, [r7, #0]
   18672:	f7f4 fc03 	bl	ce7c <mp_parse_compile_execute>
}
   18676:	bf00      	nop
   18678:	3710      	adds	r7, #16
   1867a:	46bd      	mov	sp, r7
   1867c:	bd80      	pop	{r7, pc}
   1867e:	bf00      	nop

00018680 <do_execute_raw_code>:
#endif

#if MICROPY_PERSISTENT_CODE_LOAD || MICROPY_MODULE_FROZEN_MPY
STATIC void do_execute_raw_code(mp_obj_t module_obj, mp_raw_code_t *raw_code) {
   18680:	b580      	push	{r7, lr}
   18682:	b092      	sub	sp, #72	; 0x48
   18684:	af00      	add	r7, sp, #0
   18686:	6078      	str	r0, [r7, #4]
   18688:	6039      	str	r1, [r7, #0]
    //qstr source_name = lex->source_name;
    //mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   1868a:	6878      	ldr	r0, [r7, #4]
   1868c:	f7ff ff20 	bl	184d0 <mp_obj_module_get_globals>
   18690:	6478      	str	r0, [r7, #68]	; 0x44

    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
   18692:	f7ff ff4f 	bl	18534 <mp_globals_get>
   18696:	4603      	mov	r3, r0
   18698:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
   1869a:	f7ff ff2f 	bl	184fc <mp_locals_get>
   1869e:	4603      	mov	r3, r0
   186a0:	63bb      	str	r3, [r7, #56]	; 0x38

    // set new context
    mp_globals_set(mod_globals);
   186a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   186a4:	f7ff ff52 	bl	1854c <mp_globals_set>
    mp_locals_set(mod_globals);
   186a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
   186aa:	f7ff ff33 	bl	18514 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   186ae:	f107 0308 	add.w	r3, r7, #8
   186b2:	4618      	mov	r0, r3
   186b4:	f7e7 fe02 	bl	2bc <nlr_push>
   186b8:	4603      	mov	r3, r0
   186ba:	2b00      	cmp	r3, #0
   186bc:	d113      	bne.n	186e6 <do_execute_raw_code+0x66>
        mp_obj_t module_fun = mp_make_function_from_raw_code(raw_code, MP_OBJ_NULL, MP_OBJ_NULL);
   186be:	2200      	movs	r2, #0
   186c0:	2100      	movs	r1, #0
   186c2:	6838      	ldr	r0, [r7, #0]
   186c4:	f7f2 fd98 	bl	b1f8 <mp_make_function_from_raw_code>
   186c8:	6438      	str	r0, [r7, #64]	; 0x40
        mp_call_function_0(module_fun);
   186ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
   186cc:	f7f3 fb6c 	bl	bda8 <mp_call_function_0>

        // finish nlr block, restore context
        nlr_pop();
   186d0:	f7e7 fde2 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
   186d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   186d6:	4618      	mov	r0, r3
   186d8:	f7ff ff38 	bl	1854c <mp_globals_set>
        mp_locals_set(old_locals);
   186dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186de:	4618      	mov	r0, r3
   186e0:	f7ff ff18 	bl	18514 <mp_locals_set>
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
        nlr_jump(nlr.ret_val);
    }
}
   186e4:	e00b      	b.n	186fe <do_execute_raw_code+0x7e>
        mp_globals_set(old_globals);
   186e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   186e8:	4618      	mov	r0, r3
   186ea:	f7ff ff2f 	bl	1854c <mp_globals_set>
        mp_locals_set(old_locals);
   186ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186f0:	4618      	mov	r0, r3
   186f2:	f7ff ff0f 	bl	18514 <mp_locals_set>
        nlr_jump(nlr.ret_val);
   186f6:	68fb      	ldr	r3, [r7, #12]
   186f8:	4618      	mov	r0, r3
   186fa:	f7e7 fdf1 	bl	2e0 <nlr_jump>
}
   186fe:	3748      	adds	r7, #72	; 0x48
   18700:	46bd      	mov	sp, r7
   18702:	bd80      	pop	{r7, pc}

00018704 <do_load>:
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   18704:	b580      	push	{r7, lr}
   18706:	b086      	sub	sp, #24
   18708:	af00      	add	r7, sp, #0
   1870a:	6078      	str	r0, [r7, #4]
   1870c:	6039      	str	r1, [r7, #0]
    #if MICROPY_MODULE_FROZEN || MICROPY_PERSISTENT_CODE_LOAD || MICROPY_ENABLE_COMPILER
    char *file_str = vstr_null_terminated_str(file);
   1870e:	6838      	ldr	r0, [r7, #0]
   18710:	f7e8 ff3e 	bl	1590 <vstr_null_terminated_str>
   18714:	6178      	str	r0, [r7, #20]

    // If we support frozen modules (either as str or mpy) then try to find the
    // requested filename in the list of frozen module filenames.
    #if MICROPY_MODULE_FROZEN
    void *modref;
    int frozen_type = mp_find_frozen_module(file_str, file->len, &modref);
   18716:	683b      	ldr	r3, [r7, #0]
   18718:	685b      	ldr	r3, [r3, #4]
   1871a:	f107 0208 	add.w	r2, r7, #8
   1871e:	4619      	mov	r1, r3
   18720:	6978      	ldr	r0, [r7, #20]
   18722:	f002 fd7f 	bl	1b224 <mp_find_frozen_module>
   18726:	6138      	str	r0, [r7, #16]
    #endif

    // If we support frozen mpy modules and we found a corresponding file (and
    // its data) in the list of frozen files, execute it.
    #if MICROPY_MODULE_FROZEN_MPY
    if (frozen_type == MP_FROZEN_MPY) {
   18728:	693b      	ldr	r3, [r7, #16]
   1872a:	2b02      	cmp	r3, #2
   1872c:	d105      	bne.n	1873a <do_load+0x36>
        do_execute_raw_code(module_obj, modref);
   1872e:	68bb      	ldr	r3, [r7, #8]
   18730:	4619      	mov	r1, r3
   18732:	6878      	ldr	r0, [r7, #4]
   18734:	f7ff ffa4 	bl	18680 <do_execute_raw_code>
        return;
   18738:	e008      	b.n	1874c <do_load+0x48>
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   1873a:	6978      	ldr	r0, [r7, #20]
   1873c:	f002 fdfe 	bl	1b33c <mp_lexer_new_from_file>
   18740:	60f8      	str	r0, [r7, #12]
        do_load_from_lexer(module_obj, lex);
   18742:	68f9      	ldr	r1, [r7, #12]
   18744:	6878      	ldr	r0, [r7, #4]
   18746:	f7ff ff87 	bl	18658 <do_load_from_lexer>
        return;
   1874a:	bf00      	nop
    #else

    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}
   1874c:	3718      	adds	r7, #24
   1874e:	46bd      	mov	sp, r7
   18750:	bd80      	pop	{r7, pc}
   18752:	bf00      	nop

00018754 <chop_component>:

STATIC void chop_component(const char *start, const char **end) {
   18754:	b480      	push	{r7}
   18756:	b085      	sub	sp, #20
   18758:	af00      	add	r7, sp, #0
   1875a:	6078      	str	r0, [r7, #4]
   1875c:	6039      	str	r1, [r7, #0]
    const char *p = *end;
   1875e:	683b      	ldr	r3, [r7, #0]
   18760:	681b      	ldr	r3, [r3, #0]
   18762:	60fb      	str	r3, [r7, #12]
    while (p > start) {
   18764:	e00a      	b.n	1877c <chop_component+0x28>
        if (*--p == '.') {
   18766:	68fb      	ldr	r3, [r7, #12]
   18768:	3b01      	subs	r3, #1
   1876a:	60fb      	str	r3, [r7, #12]
   1876c:	68fb      	ldr	r3, [r7, #12]
   1876e:	781b      	ldrb	r3, [r3, #0]
   18770:	2b2e      	cmp	r3, #46	; 0x2e
   18772:	d103      	bne.n	1877c <chop_component+0x28>
            *end = p;
   18774:	683b      	ldr	r3, [r7, #0]
   18776:	68fa      	ldr	r2, [r7, #12]
   18778:	601a      	str	r2, [r3, #0]
            return;
   1877a:	e006      	b.n	1878a <chop_component+0x36>
    while (p > start) {
   1877c:	68fa      	ldr	r2, [r7, #12]
   1877e:	687b      	ldr	r3, [r7, #4]
   18780:	429a      	cmp	r2, r3
   18782:	d8f0      	bhi.n	18766 <chop_component+0x12>
        }
    }
    *end = p;
   18784:	683b      	ldr	r3, [r7, #0]
   18786:	68fa      	ldr	r2, [r7, #12]
   18788:	601a      	str	r2, [r3, #0]
}
   1878a:	3714      	adds	r7, #20
   1878c:	46bd      	mov	sp, r7
   1878e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18792:	4770      	bx	lr

00018794 <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   18794:	b590      	push	{r4, r7, lr}
   18796:	b0e3      	sub	sp, #396	; 0x18c
   18798:	af00      	add	r7, sp, #0
   1879a:	1d3b      	adds	r3, r7, #4
   1879c:	6018      	str	r0, [r3, #0]
   1879e:	463b      	mov	r3, r7
   187a0:	6019      	str	r1, [r3, #0]
        mp_obj_print(args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
#endif

    mp_obj_t module_name = args[0];
   187a2:	463b      	mov	r3, r7
   187a4:	681b      	ldr	r3, [r3, #0]
   187a6:	681b      	ldr	r3, [r3, #0]
   187a8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    mp_obj_t fromtuple = mp_const_none;
   187ac:	4bd6      	ldr	r3, [pc, #856]	; (18b08 <mp_builtin___import__+0x374>)
   187ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    mp_int_t level = 0;
   187b2:	2300      	movs	r3, #0
   187b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    if (n_args >= 4) {
   187b8:	1d3b      	adds	r3, r7, #4
   187ba:	681b      	ldr	r3, [r3, #0]
   187bc:	2b03      	cmp	r3, #3
   187be:	d916      	bls.n	187ee <mp_builtin___import__+0x5a>
        fromtuple = args[3];
   187c0:	463b      	mov	r3, r7
   187c2:	681b      	ldr	r3, [r3, #0]
   187c4:	68db      	ldr	r3, [r3, #12]
   187c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        if (n_args >= 5) {
   187ca:	1d3b      	adds	r3, r7, #4
   187cc:	681b      	ldr	r3, [r3, #0]
   187ce:	2b04      	cmp	r3, #4
   187d0:	d90d      	bls.n	187ee <mp_builtin___import__+0x5a>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   187d2:	463b      	mov	r3, r7
   187d4:	681b      	ldr	r3, [r3, #0]
   187d6:	3310      	adds	r3, #16
   187d8:	681b      	ldr	r3, [r3, #0]
   187da:	105b      	asrs	r3, r3, #1
   187dc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            if (level < 0) {
   187e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   187e4:	2b00      	cmp	r3, #0
   187e6:	da02      	bge.n	187ee <mp_builtin___import__+0x5a>
                mp_raise_ValueError(NULL);
   187e8:	2000      	movs	r0, #0
   187ea:	f7f4 fbcb 	bl	cf84 <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   187ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
   187f2:	4619      	mov	r1, r3
   187f4:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   187f8:	f7fc ff30 	bl	1565c <mp_obj_str_get_data>
   187fc:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    if (level != 0) {
   18800:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18804:	2b00      	cmp	r3, #0
   18806:	f000 80de 	beq.w	189c6 <mp_builtin___import__+0x232>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   1880a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1880e:	3b01      	subs	r3, #1
   18810:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   18814:	f7ff fe8e 	bl	18534 <mp_globals_get>
   18818:	4603      	mov	r3, r0
   1881a:	216e      	movs	r1, #110	; 0x6e
   1881c:	4618      	mov	r0, r3
   1881e:	f7f5 ff73 	bl	e708 <mp_obj_dict_get>
   18822:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        assert(this_name_q != MP_OBJ_NULL);
   18826:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   1882a:	2b00      	cmp	r3, #0
   1882c:	d106      	bne.n	1883c <mp_builtin___import__+0xa8>
   1882e:	4bb7      	ldr	r3, [pc, #732]	; (18b0c <mp_builtin___import__+0x378>)
   18830:	4ab7      	ldr	r2, [pc, #732]	; (18b10 <mp_builtin___import__+0x37c>)
   18832:	f240 111d 	movw	r1, #285	; 0x11d
   18836:	48b7      	ldr	r0, [pc, #732]	; (18b14 <mp_builtin___import__+0x380>)
   18838:	f002 fdb0 	bl	1b39c <__assert_func>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   1883c:	f7ff fe7a 	bl	18534 <mp_globals_get>
   18840:	4603      	mov	r3, r0
   18842:	3304      	adds	r3, #4
   18844:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   18848:	2200      	movs	r2, #0
   1884a:	217a      	movs	r1, #122	; 0x7a
   1884c:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
   18850:	f7f4 fe12 	bl	d478 <mp_map_lookup>
   18854:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        bool is_pkg = (elem != NULL);
   18858:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   1885c:	2b00      	cmp	r3, #0
   1885e:	bf14      	ite	ne
   18860:	2301      	movne	r3, #1
   18862:	2300      	moveq	r3, #0
   18864:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   18868:	f107 030c 	add.w	r3, r7, #12
   1886c:	4619      	mov	r1, r3
   1886e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
   18872:	f7fc fef3 	bl	1565c <mp_obj_str_get_data>
   18876:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        const char *p = this_name + this_name_l;
   1887a:	f107 030c 	add.w	r3, r7, #12
   1887e:	681b      	ldr	r3, [r3, #0]
   18880:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   18884:	441a      	add	r2, r3
   18886:	f107 0308 	add.w	r3, r7, #8
   1888a:	601a      	str	r2, [r3, #0]
        if (!is_pkg) {
   1888c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   18890:	f083 0301 	eor.w	r3, r3, #1
   18894:	b2db      	uxtb	r3, r3
   18896:	2b00      	cmp	r3, #0
   18898:	d00e      	beq.n	188b8 <mp_builtin___import__+0x124>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   1889a:	f107 0308 	add.w	r3, r7, #8
   1889e:	4619      	mov	r1, r3
   188a0:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   188a4:	f7ff ff56 	bl	18754 <chop_component>
        }

        while (level--) {
   188a8:	e006      	b.n	188b8 <mp_builtin___import__+0x124>
            chop_component(this_name, &p);
   188aa:	f107 0308 	add.w	r3, r7, #8
   188ae:	4619      	mov	r1, r3
   188b0:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   188b4:	f7ff ff4e 	bl	18754 <chop_component>
        while (level--) {
   188b8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   188bc:	1e5a      	subs	r2, r3, #1
   188be:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
   188c2:	2b00      	cmp	r3, #0
   188c4:	d1f1      	bne.n	188aa <mp_builtin___import__+0x116>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   188c6:	f107 0308 	add.w	r3, r7, #8
   188ca:	681a      	ldr	r2, [r3, #0]
   188cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   188d0:	429a      	cmp	r2, r3
   188d2:	d102      	bne.n	188da <mp_builtin___import__+0x146>
            mp_raise_ValueError("cannot perform relative import");
   188d4:	4890      	ldr	r0, [pc, #576]	; (18b18 <mp_builtin___import__+0x384>)
   188d6:	f7f4 fb55 	bl	cf84 <mp_raise_ValueError>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   188da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   188de:	2b00      	cmp	r3, #0
   188e0:	d107      	bne.n	188f2 <mp_builtin___import__+0x15e>
   188e2:	f107 0308 	add.w	r3, r7, #8
   188e6:	681b      	ldr	r3, [r3, #0]
   188e8:	461a      	mov	r2, r3
   188ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   188ee:	1ad3      	subs	r3, r2, r3
   188f0:	e00b      	b.n	1890a <mp_builtin___import__+0x176>
   188f2:	f107 0308 	add.w	r3, r7, #8
   188f6:	681b      	ldr	r3, [r3, #0]
   188f8:	461a      	mov	r2, r3
   188fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   188fe:	1ad3      	subs	r3, r2, r3
   18900:	461a      	mov	r2, r3
   18902:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18906:	4413      	add	r3, r2
   18908:	3301      	adds	r3, #1
   1890a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        char *new_mod = mp_local_alloc(new_mod_l);
   1890e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18912:	3307      	adds	r3, #7
   18914:	3307      	adds	r3, #7
   18916:	08db      	lsrs	r3, r3, #3
   18918:	00db      	lsls	r3, r3, #3
   1891a:	ebad 0d03 	sub.w	sp, sp, r3
   1891e:	466b      	mov	r3, sp
   18920:	3307      	adds	r3, #7
   18922:	08db      	lsrs	r3, r3, #3
   18924:	00db      	lsls	r3, r3, #3
   18926:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        memcpy(new_mod, this_name, p - this_name);
   1892a:	f107 0308 	add.w	r3, r7, #8
   1892e:	681b      	ldr	r3, [r3, #0]
   18930:	461a      	mov	r2, r3
   18932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18936:	1ad3      	subs	r3, r2, r3
   18938:	461a      	mov	r2, r3
   1893a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
   1893e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18942:	f003 f9e7 	bl	1bd14 <memcpy>
        if (mod_len != 0) {
   18946:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   1894a:	2b00      	cmp	r3, #0
   1894c:	d01e      	beq.n	1898c <mp_builtin___import__+0x1f8>
            new_mod[p - this_name] = '.';
   1894e:	f107 0308 	add.w	r3, r7, #8
   18952:	681b      	ldr	r3, [r3, #0]
   18954:	461a      	mov	r2, r3
   18956:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1895a:	1ad3      	subs	r3, r2, r3
   1895c:	461a      	mov	r2, r3
   1895e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   18962:	4413      	add	r3, r2
   18964:	222e      	movs	r2, #46	; 0x2e
   18966:	701a      	strb	r2, [r3, #0]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   18968:	f107 0308 	add.w	r3, r7, #8
   1896c:	681b      	ldr	r3, [r3, #0]
   1896e:	461a      	mov	r2, r3
   18970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18974:	1ad3      	subs	r3, r2, r3
   18976:	3301      	adds	r3, #1
   18978:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
   1897c:	4413      	add	r3, r2
   1897e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
   18982:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
   18986:	4618      	mov	r0, r3
   18988:	f003 f9c4 	bl	1bd14 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   1898c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
   18990:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18994:	f7e8 fb60 	bl	1058 <qstr_from_strn>
   18998:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
        mp_local_free(new_mod);
   1899c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   189a0:	f7ff fda2 	bl	184e8 <mp_local_free>
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   189a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   189a8:	009b      	lsls	r3, r3, #2
   189aa:	f043 0302 	orr.w	r3, r3, #2
   189ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        mod_str = qstr_str(new_mod_q);
   189b2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   189b6:	f7e8 fc2b 	bl	1210 <qstr_str>
   189ba:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
        mod_len = new_mod_l;
   189be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   189c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   189c6:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   189ca:	f7fc fde1 	bl	15590 <mp_obj_str_get_qstr>
   189ce:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   189d2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   189d6:	f7f9 f991 	bl	11cfc <mp_module_get>
   189da:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (module_obj != MP_OBJ_NULL) {
   189de:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   189e2:	2b00      	cmp	r3, #0
   189e4:	d027      	beq.n	18a36 <mp_builtin___import__+0x2a2>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   189e6:	212e      	movs	r1, #46	; 0x2e
   189e8:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   189ec:	f003 fbc6 	bl	1c17c <strchr>
   189f0:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        if (p == NULL) {
   189f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   189f8:	2b00      	cmp	r3, #0
   189fa:	d102      	bne.n	18a02 <mp_builtin___import__+0x26e>
            return module_obj;
   189fc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18a00:	e143      	b.n	18c8a <mp_builtin___import__+0x4f6>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   18a02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18a06:	4a40      	ldr	r2, [pc, #256]	; (18b08 <mp_builtin___import__+0x374>)
   18a08:	4293      	cmp	r3, r2
   18a0a:	d002      	beq.n	18a12 <mp_builtin___import__+0x27e>
            return module_obj;
   18a0c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18a10:	e13b      	b.n	18c8a <mp_builtin___import__+0x4f6>
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   18a12:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
   18a16:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   18a1a:	1ad3      	subs	r3, r2, r3
   18a1c:	4619      	mov	r1, r3
   18a1e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18a22:	f7e8 fb19 	bl	1058 <qstr_from_strn>
   18a26:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
        return mp_module_get(pkg_name);
   18a2a:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   18a2e:	f7f9 f965 	bl	11cfc <mp_module_get>
   18a32:	4603      	mov	r3, r0
   18a34:	e129      	b.n	18c8a <mp_builtin___import__+0x4f6>
    }
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
   18a36:	2300      	movs	r3, #0
   18a38:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   18a3c:	f107 0210 	add.w	r2, r7, #16
   18a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18a44:	f44f 7180 	mov.w	r1, #256	; 0x100
   18a48:	4618      	mov	r0, r3
   18a4a:	f7e8 fc9b 	bl	1384 <vstr_init_fixed_buf>
    module_obj = MP_OBJ_NULL;
   18a4e:	2300      	movs	r3, #0
   18a50:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   18a54:	2300      	movs	r3, #0
   18a56:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
   18a5a:	2300      	movs	r3, #0
   18a5c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint i;
    for (i = 1; i <= mod_len; i++) {
   18a60:	2301      	movs	r3, #1
   18a62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18a66:	e0ff      	b.n	18c68 <mp_builtin___import__+0x4d4>
        if (i == mod_len || mod_str[i] == '.') {
   18a68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18a6c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18a70:	429a      	cmp	r2, r3
   18a72:	d008      	beq.n	18a86 <mp_builtin___import__+0x2f2>
   18a74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18a78:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18a7c:	4413      	add	r3, r2
   18a7e:	781b      	ldrb	r3, [r3, #0]
   18a80:	2b2e      	cmp	r3, #46	; 0x2e
   18a82:	f040 80ec 	bne.w	18c5e <mp_builtin___import__+0x4ca>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   18a86:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18a8a:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18a8e:	f7e8 fae3 	bl	1058 <qstr_from_strn>
   18a92:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   18a96:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18a9a:	4618      	mov	r0, r3
   18a9c:	f7ff fd0c 	bl	184b8 <vstr_len>
   18aa0:	4603      	mov	r3, r0
   18aa2:	2b00      	cmp	r3, #0
   18aa4:	d10b      	bne.n	18abe <mp_builtin___import__+0x32a>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
   18aa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18aaa:	461a      	mov	r2, r3
   18aac:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18ab0:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18ab4:	f7ff fdbc 	bl	18630 <find_file>
   18ab8:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
   18abc:	e01b      	b.n	18af6 <mp_builtin___import__+0x362>
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
   18abe:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18ac2:	212f      	movs	r1, #47	; 0x2f
   18ac4:	4618      	mov	r0, r3
   18ac6:	f7e8 fd91 	bl	15ec <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   18aca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18ace:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18ad2:	18d1      	adds	r1, r2, r3
   18ad4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18ad8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18adc:	1ad2      	subs	r2, r2, r3
   18ade:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18ae2:	4618      	mov	r0, r3
   18ae4:	f7e8 fda4 	bl	1630 <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   18ae8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18aec:	4618      	mov	r0, r3
   18aee:	f7ff fd7f 	bl	185f0 <stat_dir_or_file>
   18af2:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   18af6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18afa:	2b00      	cmp	r3, #0
   18afc:	d112      	bne.n	18b24 <mp_builtin___import__+0x390>
                #else
                {
                #endif
                    // couldn't find the file, so fail
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_raise_msg(&mp_type_ImportError, "module not found");
   18afe:	4907      	ldr	r1, [pc, #28]	; (18b1c <mp_builtin___import__+0x388>)
   18b00:	4807      	ldr	r0, [pc, #28]	; (18b20 <mp_builtin___import__+0x38c>)
   18b02:	f7f4 fa27 	bl	cf54 <mp_raise_msg>
   18b06:	bf00      	nop
   18b08:	00021480 	.word	0x00021480
   18b0c:	000224ec 	.word	0x000224ec
   18b10:	00022570 	.word	0x00022570
   18b14:	00022508 	.word	0x00022508
   18b18:	00022524 	.word	0x00022524
   18b1c:	00022544 	.word	0x00022544
   18b20:	000204b4 	.word	0x000204b4
                            "no module named '%q'", mod_name));
                    }
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   18b24:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18b28:	f7f9 f8e8 	bl	11cfc <mp_module_get>
   18b2c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
            }

            if (module_obj == MP_OBJ_NULL) {
   18b30:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b34:	2b00      	cmp	r3, #0
   18b36:	d166      	bne.n	18c06 <mp_builtin___import__+0x472>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   18b38:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18b3c:	f7f9 f8a4 	bl	11c88 <mp_obj_new_module>
   18b40:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   18b44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18b48:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18b4c:	429a      	cmp	r2, r3
   18b4e:	d114      	bne.n	18b7a <mp_builtin___import__+0x3e6>
   18b50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18b54:	4a4f      	ldr	r2, [pc, #316]	; (18c94 <mp_builtin___import__+0x500>)
   18b56:	4293      	cmp	r3, r2
   18b58:	d10f      	bne.n	18b7a <mp_builtin___import__+0x3e6>
   18b5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18b5e:	2b01      	cmp	r3, #1
   18b60:	d00b      	beq.n	18b7a <mp_builtin___import__+0x3e6>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
   18b62:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   18b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   18b6e:	685b      	ldr	r3, [r3, #4]
   18b70:	2266      	movs	r2, #102	; 0x66
   18b72:	216e      	movs	r1, #110	; 0x6e
   18b74:	4618      	mov	r0, r3
   18b76:	f7f6 fadf 	bl	f138 <mp_obj_dict_store>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   18b7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18b7e:	2b01      	cmp	r3, #1
   18b80:	d13a      	bne.n	18bf8 <mp_builtin___import__+0x464>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   18b82:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18b86:	4618      	mov	r0, r3
   18b88:	f7ff fc8a 	bl	184a0 <vstr_str>
   18b8c:	4604      	mov	r4, r0
   18b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18b92:	4618      	mov	r0, r3
   18b94:	f7ff fc90 	bl	184b8 <vstr_len>
   18b98:	4603      	mov	r3, r0
   18b9a:	4619      	mov	r1, r3
   18b9c:	4620      	mov	r0, r4
   18b9e:	f7fc fbfb 	bl	15398 <mp_obj_new_str>
   18ba2:	4603      	mov	r3, r0
   18ba4:	461a      	mov	r2, r3
   18ba6:	211e      	movs	r1, #30
   18ba8:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18bac:	f7f3 fe7e 	bl	c8ac <mp_store_attr>
                    size_t orig_path_len = path.len;
   18bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   18bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    vstr_add_char(&path, PATH_SEP_CHAR);
   18bb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bbc:	212f      	movs	r1, #47	; 0x2f
   18bbe:	4618      	mov	r0, r3
   18bc0:	f7e8 fd14 	bl	15ec <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   18bc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bc8:	4933      	ldr	r1, [pc, #204]	; (18c98 <mp_builtin___import__+0x504>)
   18bca:	4618      	mov	r0, r3
   18bcc:	f7e8 fd1e 	bl	160c <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   18bd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bd4:	4618      	mov	r0, r3
   18bd6:	f7ff fcf5 	bl	185c4 <stat_file_py_or_mpy>
   18bda:	4603      	mov	r3, r0
   18bdc:	2b02      	cmp	r3, #2
   18bde:	d106      	bne.n	18bee <mp_builtin___import__+0x45a>
                        //mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   18be0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18be4:	4619      	mov	r1, r3
   18be6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18bea:	f7ff fd8b 	bl	18704 <do_load>
                    }
                    path.len = orig_path_len;
   18bee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
   18bf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   18bf6:	e006      	b.n	18c06 <mp_builtin___import__+0x472>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   18bf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bfc:	4619      	mov	r1, r3
   18bfe:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18c02:	f7ff fd7f 	bl	18704 <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   18c06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   18c0a:	2b00      	cmp	r3, #0
   18c0c:	d016      	beq.n	18c3c <mp_builtin___import__+0x4a8>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   18c0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18c12:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18c16:	18d0      	adds	r0, r2, r3
   18c18:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18c1c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18c20:	1ad3      	subs	r3, r2, r3
   18c22:	4619      	mov	r1, r3
   18c24:	f7e8 fa18 	bl	1058 <qstr_from_strn>
   18c28:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
                mp_store_attr(outer_module_obj, s, module_obj);
   18c2c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   18c30:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
   18c34:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   18c38:	f7f3 fe38 	bl	c8ac <mp_store_attr>
            }
            outer_module_obj = module_obj;
   18c3c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18c40:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            if (top_module_obj == MP_OBJ_NULL) {
   18c44:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   18c48:	2b00      	cmp	r3, #0
   18c4a:	d103      	bne.n	18c54 <mp_builtin___import__+0x4c0>
                top_module_obj = module_obj;
   18c4c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18c50:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            }
            last = i + 1;
   18c54:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18c58:	3301      	adds	r3, #1
   18c5a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    for (i = 1; i <= mod_len; i++) {
   18c5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18c62:	3301      	adds	r3, #1
   18c64:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18c68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18c6c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18c70:	429a      	cmp	r2, r3
   18c72:	f67f aef9 	bls.w	18a68 <mp_builtin___import__+0x2d4>
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   18c76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18c7a:	4a08      	ldr	r2, [pc, #32]	; (18c9c <mp_builtin___import__+0x508>)
   18c7c:	4293      	cmp	r3, r2
   18c7e:	d002      	beq.n	18c86 <mp_builtin___import__+0x4f2>
        return module_obj;
   18c80:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18c84:	e001      	b.n	18c8a <mp_builtin___import__+0x4f6>
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
   18c86:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
}
   18c8a:	4618      	mov	r0, r3
   18c8c:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
   18c90:	46bd      	mov	sp, r7
   18c92:	bd90      	pop	{r4, r7, pc}
   18c94:	0001fc34 	.word	0x0001fc34
   18c98:	00022558 	.word	0x00022558
   18c9c:	00021480 	.word	0x00021480

00018ca0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18ca0:	b480      	push	{r7}
   18ca2:	b083      	sub	sp, #12
   18ca4:	af00      	add	r7, sp, #0
   18ca6:	6078      	str	r0, [r7, #4]
   18ca8:	687b      	ldr	r3, [r7, #4]
   18caa:	f003 0303 	and.w	r3, r3, #3
   18cae:	2b00      	cmp	r3, #0
   18cb0:	bf0c      	ite	eq
   18cb2:	2301      	moveq	r3, #1
   18cb4:	2300      	movne	r3, #0
   18cb6:	b2db      	uxtb	r3, r3
   18cb8:	4618      	mov	r0, r3
   18cba:	370c      	adds	r7, #12
   18cbc:	46bd      	mov	sp, r7
   18cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cc2:	4770      	bx	lr

00018cc4 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18cc4:	b480      	push	{r7}
   18cc6:	af00      	add	r7, sp, #0
   18cc8:	4b03      	ldr	r3, [pc, #12]	; (18cd8 <mp_locals_get+0x14>)
   18cca:	685b      	ldr	r3, [r3, #4]
   18ccc:	4618      	mov	r0, r3
   18cce:	46bd      	mov	sp, r7
   18cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cd4:	4770      	bx	lr
   18cd6:	bf00      	nop
   18cd8:	20000a2c 	.word	0x20000a2c

00018cdc <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18cdc:	b480      	push	{r7}
   18cde:	af00      	add	r7, sp, #0
   18ce0:	4b03      	ldr	r3, [pc, #12]	; (18cf0 <mp_globals_get+0x14>)
   18ce2:	689b      	ldr	r3, [r3, #8]
   18ce4:	4618      	mov	r0, r3
   18ce6:	46bd      	mov	sp, r7
   18ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cec:	4770      	bx	lr
   18cee:	bf00      	nop
   18cf0:	20000a2c 	.word	0x20000a2c

00018cf4 <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   18cf4:	b580      	push	{r7, lr}
   18cf6:	b08a      	sub	sp, #40	; 0x28
   18cf8:	af00      	add	r7, sp, #0
   18cfa:	60f8      	str	r0, [r7, #12]
   18cfc:	60b9      	str	r1, [r7, #8]
   18cfe:	607a      	str	r2, [r7, #4]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
   18d00:	f7ff ffec 	bl	18cdc <mp_globals_get>
   18d04:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_dict_t *locals = mp_locals_get();
   18d06:	f7ff ffdd 	bl	18cc4 <mp_locals_get>
   18d0a:	6238      	str	r0, [r7, #32]
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18d0c:	2301      	movs	r3, #1
   18d0e:	61fb      	str	r3, [r7, #28]
   18d10:	e02f      	b.n	18d72 <eval_exec_helper+0x7e>
        if (args[i] != mp_const_none) {
   18d12:	69fb      	ldr	r3, [r7, #28]
   18d14:	009b      	lsls	r3, r3, #2
   18d16:	68ba      	ldr	r2, [r7, #8]
   18d18:	4413      	add	r3, r2
   18d1a:	681b      	ldr	r3, [r3, #0]
   18d1c:	4a26      	ldr	r2, [pc, #152]	; (18db8 <eval_exec_helper+0xc4>)
   18d1e:	4293      	cmp	r3, r2
   18d20:	d024      	beq.n	18d6c <eval_exec_helper+0x78>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   18d22:	69fb      	ldr	r3, [r7, #28]
   18d24:	009b      	lsls	r3, r3, #2
   18d26:	68ba      	ldr	r2, [r7, #8]
   18d28:	4413      	add	r3, r2
   18d2a:	681b      	ldr	r3, [r3, #0]
   18d2c:	4618      	mov	r0, r3
   18d2e:	f7ff ffb7 	bl	18ca0 <MP_OBJ_IS_OBJ>
   18d32:	4603      	mov	r3, r0
   18d34:	f083 0301 	eor.w	r3, r3, #1
   18d38:	b2db      	uxtb	r3, r3
   18d3a:	2b00      	cmp	r3, #0
   18d3c:	d108      	bne.n	18d50 <eval_exec_helper+0x5c>
   18d3e:	69fb      	ldr	r3, [r7, #28]
   18d40:	009b      	lsls	r3, r3, #2
   18d42:	68ba      	ldr	r2, [r7, #8]
   18d44:	4413      	add	r3, r2
   18d46:	681b      	ldr	r3, [r3, #0]
   18d48:	681b      	ldr	r3, [r3, #0]
   18d4a:	4a1c      	ldr	r2, [pc, #112]	; (18dbc <eval_exec_helper+0xc8>)
   18d4c:	4293      	cmp	r3, r2
   18d4e:	d002      	beq.n	18d56 <eval_exec_helper+0x62>
                mp_raise_TypeError(NULL);
   18d50:	2000      	movs	r0, #0
   18d52:	f7f4 f921 	bl	cf98 <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   18d56:	69fb      	ldr	r3, [r7, #28]
   18d58:	009b      	lsls	r3, r3, #2
   18d5a:	68ba      	ldr	r2, [r7, #8]
   18d5c:	4413      	add	r3, r2
   18d5e:	681b      	ldr	r3, [r3, #0]
   18d60:	623b      	str	r3, [r7, #32]
            if (i == 1) {
   18d62:	69fb      	ldr	r3, [r7, #28]
   18d64:	2b01      	cmp	r3, #1
   18d66:	d101      	bne.n	18d6c <eval_exec_helper+0x78>
                globals = locals;
   18d68:	6a3b      	ldr	r3, [r7, #32]
   18d6a:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18d6c:	69fb      	ldr	r3, [r7, #28]
   18d6e:	3301      	adds	r3, #1
   18d70:	61fb      	str	r3, [r7, #28]
   18d72:	69fb      	ldr	r3, [r7, #28]
   18d74:	2b02      	cmp	r3, #2
   18d76:	d803      	bhi.n	18d80 <eval_exec_helper+0x8c>
   18d78:	69fa      	ldr	r2, [r7, #28]
   18d7a:	68fb      	ldr	r3, [r7, #12]
   18d7c:	429a      	cmp	r2, r3
   18d7e:	d3c8      	bcc.n	18d12 <eval_exec_helper+0x1e>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   18d80:	68bb      	ldr	r3, [r7, #8]
   18d82:	681b      	ldr	r3, [r3, #0]
   18d84:	f107 0210 	add.w	r2, r7, #16
   18d88:	4611      	mov	r1, r2
   18d8a:	4618      	mov	r0, r3
   18d8c:	f7fc fc66 	bl	1565c <mp_obj_str_get_data>
   18d90:	61b8      	str	r0, [r7, #24]
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   18d92:	693a      	ldr	r2, [r7, #16]
   18d94:	2300      	movs	r3, #0
   18d96:	69b9      	ldr	r1, [r7, #24]
   18d98:	2035      	movs	r0, #53	; 0x35
   18d9a:	f7ea fcdb 	bl	3754 <mp_lexer_new_from_str_len>
   18d9e:	6178      	str	r0, [r7, #20]
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   18da0:	6a3b      	ldr	r3, [r7, #32]
   18da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18da4:	6879      	ldr	r1, [r7, #4]
   18da6:	6978      	ldr	r0, [r7, #20]
   18da8:	f7f4 f868 	bl	ce7c <mp_parse_compile_execute>
   18dac:	4603      	mov	r3, r0
}
   18dae:	4618      	mov	r0, r3
   18db0:	3728      	adds	r7, #40	; 0x28
   18db2:	46bd      	mov	sp, r7
   18db4:	bd80      	pop	{r7, pc}
   18db6:	bf00      	nop
   18db8:	00021480 	.word	0x00021480
   18dbc:	000200e0 	.word	0x000200e0

00018dc0 <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   18dc0:	b580      	push	{r7, lr}
   18dc2:	b082      	sub	sp, #8
   18dc4:	af00      	add	r7, sp, #0
   18dc6:	6078      	str	r0, [r7, #4]
   18dc8:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   18dca:	2202      	movs	r2, #2
   18dcc:	6839      	ldr	r1, [r7, #0]
   18dce:	6878      	ldr	r0, [r7, #4]
   18dd0:	f7ff ff90 	bl	18cf4 <eval_exec_helper>
   18dd4:	4603      	mov	r3, r0
}
   18dd6:	4618      	mov	r0, r3
   18dd8:	3708      	adds	r7, #8
   18dda:	46bd      	mov	sp, r7
   18ddc:	bd80      	pop	{r7, pc}
   18dde:	bf00      	nop

00018de0 <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   18de0:	b580      	push	{r7, lr}
   18de2:	b082      	sub	sp, #8
   18de4:	af00      	add	r7, sp, #0
   18de6:	6078      	str	r0, [r7, #4]
   18de8:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   18dea:	2201      	movs	r2, #1
   18dec:	6839      	ldr	r1, [r7, #0]
   18dee:	6878      	ldr	r0, [r7, #4]
   18df0:	f7ff ff80 	bl	18cf4 <eval_exec_helper>
   18df4:	4603      	mov	r3, r0
}
   18df6:	4618      	mov	r0, r3
   18df8:	3708      	adds	r7, #8
   18dfa:	46bd      	mov	sp, r7
   18dfc:	bd80      	pop	{r7, pc}
   18dfe:	bf00      	nop

00018e00 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   18e00:	b480      	push	{r7}
   18e02:	b083      	sub	sp, #12
   18e04:	af00      	add	r7, sp, #0
   18e06:	6078      	str	r0, [r7, #4]
   18e08:	687b      	ldr	r3, [r7, #4]
   18e0a:	f003 0301 	and.w	r3, r3, #1
   18e0e:	2b00      	cmp	r3, #0
   18e10:	bf14      	ite	ne
   18e12:	2301      	movne	r3, #1
   18e14:	2300      	moveq	r3, #0
   18e16:	b2db      	uxtb	r3, r3
   18e18:	4618      	mov	r0, r3
   18e1a:	370c      	adds	r7, #12
   18e1c:	46bd      	mov	sp, r7
   18e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e22:	4770      	bx	lr

00018e24 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18e24:	b480      	push	{r7}
   18e26:	b083      	sub	sp, #12
   18e28:	af00      	add	r7, sp, #0
   18e2a:	6078      	str	r0, [r7, #4]
   18e2c:	687b      	ldr	r3, [r7, #4]
   18e2e:	f003 0303 	and.w	r3, r3, #3
   18e32:	2b00      	cmp	r3, #0
   18e34:	bf0c      	ite	eq
   18e36:	2301      	moveq	r3, #1
   18e38:	2300      	movne	r3, #0
   18e3a:	b2db      	uxtb	r3, r3
   18e3c:	4618      	mov	r0, r3
   18e3e:	370c      	adds	r7, #12
   18e40:	46bd      	mov	sp, r7
   18e42:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e46:	4770      	bx	lr

00018e48 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   18e48:	b480      	push	{r7}
   18e4a:	b083      	sub	sp, #12
   18e4c:	af00      	add	r7, sp, #0
   18e4e:	6078      	str	r0, [r7, #4]
   18e50:	6039      	str	r1, [r7, #0]
   18e52:	687b      	ldr	r3, [r7, #4]
   18e54:	689a      	ldr	r2, [r3, #8]
   18e56:	683b      	ldr	r3, [r7, #0]
   18e58:	00db      	lsls	r3, r3, #3
   18e5a:	4413      	add	r3, r2
   18e5c:	681b      	ldr	r3, [r3, #0]
   18e5e:	2b00      	cmp	r3, #0
   18e60:	d009      	beq.n	18e76 <MP_MAP_SLOT_IS_FILLED+0x2e>
   18e62:	687b      	ldr	r3, [r7, #4]
   18e64:	689a      	ldr	r2, [r3, #8]
   18e66:	683b      	ldr	r3, [r7, #0]
   18e68:	00db      	lsls	r3, r3, #3
   18e6a:	4413      	add	r3, r2
   18e6c:	681b      	ldr	r3, [r3, #0]
   18e6e:	2b08      	cmp	r3, #8
   18e70:	d001      	beq.n	18e76 <MP_MAP_SLOT_IS_FILLED+0x2e>
   18e72:	2301      	movs	r3, #1
   18e74:	e000      	b.n	18e78 <MP_MAP_SLOT_IS_FILLED+0x30>
   18e76:	2300      	movs	r3, #0
   18e78:	f003 0301 	and.w	r3, r3, #1
   18e7c:	b2db      	uxtb	r3, r3
   18e7e:	4618      	mov	r0, r3
   18e80:	370c      	adds	r7, #12
   18e82:	46bd      	mov	sp, r7
   18e84:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e88:	4770      	bx	lr
   18e8a:	bf00      	nop

00018e8c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   18e8c:	b480      	push	{r7}
   18e8e:	b083      	sub	sp, #12
   18e90:	af00      	add	r7, sp, #0
   18e92:	6078      	str	r0, [r7, #4]
   18e94:	687b      	ldr	r3, [r7, #4]
   18e96:	2b00      	cmp	r3, #0
   18e98:	d001      	beq.n	18e9e <mp_obj_new_bool+0x12>
   18e9a:	4b04      	ldr	r3, [pc, #16]	; (18eac <mp_obj_new_bool+0x20>)
   18e9c:	e000      	b.n	18ea0 <mp_obj_new_bool+0x14>
   18e9e:	4b04      	ldr	r3, [pc, #16]	; (18eb0 <mp_obj_new_bool+0x24>)
   18ea0:	4618      	mov	r0, r3
   18ea2:	370c      	adds	r7, #12
   18ea4:	46bd      	mov	sp, r7
   18ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
   18eaa:	4770      	bx	lr
   18eac:	0001fc3c 	.word	0x0001fc3c
   18eb0:	0001fc34 	.word	0x0001fc34

00018eb4 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18eb4:	b480      	push	{r7}
   18eb6:	af00      	add	r7, sp, #0
   18eb8:	4b03      	ldr	r3, [pc, #12]	; (18ec8 <mp_locals_get+0x14>)
   18eba:	685b      	ldr	r3, [r3, #4]
   18ebc:	4618      	mov	r0, r3
   18ebe:	46bd      	mov	sp, r7
   18ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ec4:	4770      	bx	lr
   18ec6:	bf00      	nop
   18ec8:	20000a2c 	.word	0x20000a2c

00018ecc <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18ecc:	b480      	push	{r7}
   18ece:	b083      	sub	sp, #12
   18ed0:	af00      	add	r7, sp, #0
   18ed2:	6078      	str	r0, [r7, #4]
   18ed4:	4a04      	ldr	r2, [pc, #16]	; (18ee8 <mp_locals_set+0x1c>)
   18ed6:	687b      	ldr	r3, [r7, #4]
   18ed8:	6053      	str	r3, [r2, #4]
   18eda:	bf00      	nop
   18edc:	370c      	adds	r7, #12
   18ede:	46bd      	mov	sp, r7
   18ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ee4:	4770      	bx	lr
   18ee6:	bf00      	nop
   18ee8:	20000a2c 	.word	0x20000a2c

00018eec <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18eec:	b480      	push	{r7}
   18eee:	af00      	add	r7, sp, #0
   18ef0:	4b03      	ldr	r3, [pc, #12]	; (18f00 <mp_globals_get+0x14>)
   18ef2:	689b      	ldr	r3, [r3, #8]
   18ef4:	4618      	mov	r0, r3
   18ef6:	46bd      	mov	sp, r7
   18ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
   18efc:	4770      	bx	lr
   18efe:	bf00      	nop
   18f00:	20000a2c 	.word	0x20000a2c

00018f04 <mp_builtin___build_class__>:
#endif

// args[0] is function from class body
// args[1] is class name
// args[2:] are base objects
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   18f04:	b580      	push	{r7, lr}
   18f06:	b08a      	sub	sp, #40	; 0x28
   18f08:	af00      	add	r7, sp, #0
   18f0a:	6078      	str	r0, [r7, #4]
   18f0c:	6039      	str	r1, [r7, #0]
    assert(2 <= n_args);
   18f0e:	687b      	ldr	r3, [r7, #4]
   18f10:	2b01      	cmp	r3, #1
   18f12:	d805      	bhi.n	18f20 <mp_builtin___build_class__+0x1c>
   18f14:	4b24      	ldr	r3, [pc, #144]	; (18fa8 <mp_builtin___build_class__+0xa4>)
   18f16:	4a25      	ldr	r2, [pc, #148]	; (18fac <mp_builtin___build_class__+0xa8>)
   18f18:	2132      	movs	r1, #50	; 0x32
   18f1a:	4825      	ldr	r0, [pc, #148]	; (18fb0 <mp_builtin___build_class__+0xac>)
   18f1c:	f002 fa3e 	bl	1b39c <__assert_func>

    // set the new classes __locals__ object
    mp_obj_dict_t *old_locals = mp_locals_get();
   18f20:	f7ff ffc8 	bl	18eb4 <mp_locals_get>
   18f24:	6238      	str	r0, [r7, #32]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   18f26:	2000      	movs	r0, #0
   18f28:	f7f6 f8e4 	bl	f0f4 <mp_obj_new_dict>
   18f2c:	61f8      	str	r0, [r7, #28]
    mp_locals_set(MP_OBJ_TO_PTR(class_locals));
   18f2e:	69f8      	ldr	r0, [r7, #28]
   18f30:	f7ff ffcc 	bl	18ecc <mp_locals_set>

    // call the class code
    mp_obj_t cell = mp_call_function_0(args[0]);
   18f34:	683b      	ldr	r3, [r7, #0]
   18f36:	681b      	ldr	r3, [r3, #0]
   18f38:	4618      	mov	r0, r3
   18f3a:	f7f2 ff35 	bl	bda8 <mp_call_function_0>
   18f3e:	61b8      	str	r0, [r7, #24]

    // restore old __locals__ object
    mp_locals_set(old_locals);
   18f40:	6a38      	ldr	r0, [r7, #32]
   18f42:	f7ff ffc3 	bl	18ecc <mp_locals_set>

    // get the class type (meta object) from the base objects
    mp_obj_t meta;
    if (n_args == 2) {
   18f46:	687b      	ldr	r3, [r7, #4]
   18f48:	2b02      	cmp	r3, #2
   18f4a:	d102      	bne.n	18f52 <mp_builtin___build_class__+0x4e>
        // no explicit bases, so use 'type'
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   18f4c:	4b19      	ldr	r3, [pc, #100]	; (18fb4 <mp_builtin___build_class__+0xb0>)
   18f4e:	627b      	str	r3, [r7, #36]	; 0x24
   18f50:	e006      	b.n	18f60 <mp_builtin___build_class__+0x5c>
    } else {
        // use type of first base object
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   18f52:	683b      	ldr	r3, [r7, #0]
   18f54:	3308      	adds	r3, #8
   18f56:	681b      	ldr	r3, [r3, #0]
   18f58:	4618      	mov	r0, r3
   18f5a:	f7f4 fc37 	bl	d7cc <mp_obj_get_type>
   18f5e:	6278      	str	r0, [r7, #36]	; 0x24

    // TODO do proper metaclass resolution for multiple base objects

    // create the new class using a call to the meta object
    mp_obj_t meta_args[3];
    meta_args[0] = args[1]; // class name
   18f60:	683b      	ldr	r3, [r7, #0]
   18f62:	685b      	ldr	r3, [r3, #4]
   18f64:	60bb      	str	r3, [r7, #8]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   18f66:	687b      	ldr	r3, [r7, #4]
   18f68:	1e9a      	subs	r2, r3, #2
   18f6a:	683b      	ldr	r3, [r7, #0]
   18f6c:	3308      	adds	r3, #8
   18f6e:	4619      	mov	r1, r3
   18f70:	4610      	mov	r0, r2
   18f72:	f7fc ff17 	bl	15da4 <mp_obj_new_tuple>
   18f76:	4603      	mov	r3, r0
   18f78:	60fb      	str	r3, [r7, #12]
    meta_args[2] = class_locals; // dict of members
   18f7a:	69fb      	ldr	r3, [r7, #28]
   18f7c:	613b      	str	r3, [r7, #16]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   18f7e:	f107 0308 	add.w	r3, r7, #8
   18f82:	2200      	movs	r2, #0
   18f84:	2103      	movs	r1, #3
   18f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18f88:	f7f2 ff44 	bl	be14 <mp_call_function_n_kw>
   18f8c:	6178      	str	r0, [r7, #20]

    // store into cell if neede
    if (cell != mp_const_none) {
   18f8e:	69bb      	ldr	r3, [r7, #24]
   18f90:	4a09      	ldr	r2, [pc, #36]	; (18fb8 <mp_builtin___build_class__+0xb4>)
   18f92:	4293      	cmp	r3, r2
   18f94:	d003      	beq.n	18f9e <mp_builtin___build_class__+0x9a>
        mp_obj_cell_set(cell, new_class);
   18f96:	6979      	ldr	r1, [r7, #20]
   18f98:	69b8      	ldr	r0, [r7, #24]
   18f9a:	f7f5 f96b 	bl	e274 <mp_obj_cell_set>
    }

    return new_class;
   18f9e:	697b      	ldr	r3, [r7, #20]
}
   18fa0:	4618      	mov	r0, r3
   18fa2:	3728      	adds	r7, #40	; 0x28
   18fa4:	46bd      	mov	sp, r7
   18fa6:	bd80      	pop	{r7, pc}
   18fa8:	000225a0 	.word	0x000225a0
   18fac:	000229cc 	.word	0x000229cc
   18fb0:	000225ac 	.word	0x000225ac
   18fb4:	000220ac 	.word	0x000220ac
   18fb8:	00021480 	.word	0x00021480

00018fbc <mp_builtin_abs>:
MP_DEFINE_CONST_FUN_OBJ_VAR(mp_builtin___build_class___obj, 2, mp_builtin___build_class__);

STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   18fbc:	b580      	push	{r7, lr}
   18fbe:	b082      	sub	sp, #8
   18fc0:	af00      	add	r7, sp, #0
   18fc2:	6078      	str	r0, [r7, #4]
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   18fc4:	6879      	ldr	r1, [r7, #4]
   18fc6:	2007      	movs	r0, #7
   18fc8:	f7f2 fba6 	bl	b718 <mp_unary_op>
   18fcc:	4603      	mov	r3, r0
}
   18fce:	4618      	mov	r0, r3
   18fd0:	3708      	adds	r7, #8
   18fd2:	46bd      	mov	sp, r7
   18fd4:	bd80      	pop	{r7, pc}
   18fd6:	bf00      	nop

00018fd8 <mp_builtin_all>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_abs_obj, mp_builtin_abs);

STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   18fd8:	b580      	push	{r7, lr}
   18fda:	b088      	sub	sp, #32
   18fdc:	af00      	add	r7, sp, #0
   18fde:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   18fe0:	f107 0308 	add.w	r3, r7, #8
   18fe4:	4619      	mov	r1, r3
   18fe6:	6878      	ldr	r0, [r7, #4]
   18fe8:	f7f3 fc88 	bl	c8fc <mp_getiter>
   18fec:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18fee:	e00a      	b.n	19006 <mp_builtin_all+0x2e>
        if (!mp_obj_is_true(item)) {
   18ff0:	69b8      	ldr	r0, [r7, #24]
   18ff2:	f7f4 fcc9 	bl	d988 <mp_obj_is_true>
   18ff6:	4603      	mov	r3, r0
   18ff8:	f083 0301 	eor.w	r3, r3, #1
   18ffc:	b2db      	uxtb	r3, r3
   18ffe:	2b00      	cmp	r3, #0
   19000:	d001      	beq.n	19006 <mp_builtin_all+0x2e>
            return mp_const_false;
   19002:	4b07      	ldr	r3, [pc, #28]	; (19020 <mp_builtin_all+0x48>)
   19004:	e007      	b.n	19016 <mp_builtin_all+0x3e>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19006:	69f8      	ldr	r0, [r7, #28]
   19008:	f7f3 fcfa 	bl	ca00 <mp_iternext>
   1900c:	61b8      	str	r0, [r7, #24]
   1900e:	69bb      	ldr	r3, [r7, #24]
   19010:	2b04      	cmp	r3, #4
   19012:	d1ed      	bne.n	18ff0 <mp_builtin_all+0x18>
        }
    }
    return mp_const_true;
   19014:	4b03      	ldr	r3, [pc, #12]	; (19024 <mp_builtin_all+0x4c>)
}
   19016:	4618      	mov	r0, r3
   19018:	3720      	adds	r7, #32
   1901a:	46bd      	mov	sp, r7
   1901c:	bd80      	pop	{r7, pc}
   1901e:	bf00      	nop
   19020:	0001fc34 	.word	0x0001fc34
   19024:	0001fc3c 	.word	0x0001fc3c

00019028 <mp_builtin_any>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_all_obj, mp_builtin_all);

STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   19028:	b580      	push	{r7, lr}
   1902a:	b088      	sub	sp, #32
   1902c:	af00      	add	r7, sp, #0
   1902e:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   19030:	f107 0308 	add.w	r3, r7, #8
   19034:	4619      	mov	r1, r3
   19036:	6878      	ldr	r0, [r7, #4]
   19038:	f7f3 fc60 	bl	c8fc <mp_getiter>
   1903c:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1903e:	e007      	b.n	19050 <mp_builtin_any+0x28>
        if (mp_obj_is_true(item)) {
   19040:	69b8      	ldr	r0, [r7, #24]
   19042:	f7f4 fca1 	bl	d988 <mp_obj_is_true>
   19046:	4603      	mov	r3, r0
   19048:	2b00      	cmp	r3, #0
   1904a:	d001      	beq.n	19050 <mp_builtin_any+0x28>
            return mp_const_true;
   1904c:	4b06      	ldr	r3, [pc, #24]	; (19068 <mp_builtin_any+0x40>)
   1904e:	e007      	b.n	19060 <mp_builtin_any+0x38>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19050:	69f8      	ldr	r0, [r7, #28]
   19052:	f7f3 fcd5 	bl	ca00 <mp_iternext>
   19056:	61b8      	str	r0, [r7, #24]
   19058:	69bb      	ldr	r3, [r7, #24]
   1905a:	2b04      	cmp	r3, #4
   1905c:	d1f0      	bne.n	19040 <mp_builtin_any+0x18>
        }
    }
    return mp_const_false;
   1905e:	4b03      	ldr	r3, [pc, #12]	; (1906c <mp_builtin_any+0x44>)
}
   19060:	4618      	mov	r0, r3
   19062:	3720      	adds	r7, #32
   19064:	46bd      	mov	sp, r7
   19066:	bd80      	pop	{r7, pc}
   19068:	0001fc3c 	.word	0x0001fc3c
   1906c:	0001fc34 	.word	0x0001fc34

00019070 <mp_builtin_bin>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_any_obj, mp_builtin_any);

STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   19070:	b580      	push	{r7, lr}
   19072:	b084      	sub	sp, #16
   19074:	af00      	add	r7, sp, #0
   19076:	6078      	str	r0, [r7, #4]
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   19078:	23ae      	movs	r3, #174	; 0xae
   1907a:	60bb      	str	r3, [r7, #8]
   1907c:	687b      	ldr	r3, [r7, #4]
   1907e:	60fb      	str	r3, [r7, #12]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   19080:	f107 0308 	add.w	r3, r7, #8
   19084:	2200      	movs	r2, #0
   19086:	4619      	mov	r1, r3
   19088:	2002      	movs	r0, #2
   1908a:	f7fb f957 	bl	1433c <mp_obj_str_format>
   1908e:	4603      	mov	r3, r0
}
   19090:	4618      	mov	r0, r3
   19092:	3710      	adds	r7, #16
   19094:	46bd      	mov	sp, r7
   19096:	bd80      	pop	{r7, pc}

00019098 <mp_builtin_callable>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_bin_obj, mp_builtin_bin);

STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   19098:	b580      	push	{r7, lr}
   1909a:	b082      	sub	sp, #8
   1909c:	af00      	add	r7, sp, #0
   1909e:	6078      	str	r0, [r7, #4]
    if (mp_obj_is_callable(o_in)) {
   190a0:	6878      	ldr	r0, [r7, #4]
   190a2:	f7f4 fcc7 	bl	da34 <mp_obj_is_callable>
   190a6:	4603      	mov	r3, r0
   190a8:	2b00      	cmp	r3, #0
   190aa:	d001      	beq.n	190b0 <mp_builtin_callable+0x18>
        return mp_const_true;
   190ac:	4b03      	ldr	r3, [pc, #12]	; (190bc <mp_builtin_callable+0x24>)
   190ae:	e000      	b.n	190b2 <mp_builtin_callable+0x1a>
    } else {
        return mp_const_false;
   190b0:	4b03      	ldr	r3, [pc, #12]	; (190c0 <mp_builtin_callable+0x28>)
    }
}
   190b2:	4618      	mov	r0, r3
   190b4:	3708      	adds	r7, #8
   190b6:	46bd      	mov	sp, r7
   190b8:	bd80      	pop	{r7, pc}
   190ba:	bf00      	nop
   190bc:	0001fc3c 	.word	0x0001fc3c
   190c0:	0001fc34 	.word	0x0001fc34

000190c4 <mp_builtin_chr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_callable_obj, mp_builtin_callable);

STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   190c4:	b580      	push	{r7, lr}
   190c6:	b084      	sub	sp, #16
   190c8:	af00      	add	r7, sp, #0
   190ca:	6078      	str	r0, [r7, #4]
    } else {
        mp_raise_ValueError("chr() arg not in range(0x110000)");
    }
    return mp_obj_new_str_via_qstr((char*)str, len);
    #else
    mp_int_t ord = mp_obj_get_int(o_in);
   190cc:	6878      	ldr	r0, [r7, #4]
   190ce:	f7f4 fd5b 	bl	db88 <mp_obj_get_int>
   190d2:	60f8      	str	r0, [r7, #12]
    if (0 <= ord && ord <= 0xff) {
   190d4:	68fb      	ldr	r3, [r7, #12]
   190d6:	2b00      	cmp	r3, #0
   190d8:	db0d      	blt.n	190f6 <mp_builtin_chr+0x32>
   190da:	68fb      	ldr	r3, [r7, #12]
   190dc:	2bff      	cmp	r3, #255	; 0xff
   190de:	dc0a      	bgt.n	190f6 <mp_builtin_chr+0x32>
        uint8_t str[1] = {ord};
   190e0:	68fb      	ldr	r3, [r7, #12]
   190e2:	b2db      	uxtb	r3, r3
   190e4:	723b      	strb	r3, [r7, #8]
        return mp_obj_new_str_via_qstr((char*)str, 1);
   190e6:	f107 0308 	add.w	r3, r7, #8
   190ea:	2101      	movs	r1, #1
   190ec:	4618      	mov	r0, r3
   190ee:	f7fc f8df 	bl	152b0 <mp_obj_new_str_via_qstr>
   190f2:	4603      	mov	r3, r0
   190f4:	e002      	b.n	190fc <mp_builtin_chr+0x38>
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
   190f6:	4803      	ldr	r0, [pc, #12]	; (19104 <mp_builtin_chr+0x40>)
   190f8:	f7f3 ff44 	bl	cf84 <mp_raise_ValueError>
    }
    #endif
}
   190fc:	4618      	mov	r0, r3
   190fe:	3710      	adds	r7, #16
   19100:	46bd      	mov	sp, r7
   19102:	bd80      	pop	{r7, pc}
   19104:	000225f8 	.word	0x000225f8

00019108 <mp_builtin_dir>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_chr_obj, mp_builtin_chr);

STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   19108:	b580      	push	{r7, lr}
   1910a:	b08a      	sub	sp, #40	; 0x28
   1910c:	af00      	add	r7, sp, #0
   1910e:	6078      	str	r0, [r7, #4]
   19110:	6039      	str	r1, [r7, #0]
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   19112:	2100      	movs	r1, #0
   19114:	2000      	movs	r0, #0
   19116:	f7f8 fbd7 	bl	118c8 <mp_obj_new_list>
   1911a:	61f8      	str	r0, [r7, #28]
    if (n_args == 0) {
   1911c:	687b      	ldr	r3, [r7, #4]
   1911e:	2b00      	cmp	r3, #0
   19120:	d121      	bne.n	19166 <mp_builtin_dir+0x5e>
        // Make a list of names in the local namespace
        mp_obj_dict_t *dict = mp_locals_get();
   19122:	f7ff fec7 	bl	18eb4 <mp_locals_get>
   19126:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   19128:	2300      	movs	r3, #0
   1912a:	627b      	str	r3, [r7, #36]	; 0x24
   1912c:	e015      	b.n	1915a <mp_builtin_dir+0x52>
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   1912e:	69bb      	ldr	r3, [r7, #24]
   19130:	3304      	adds	r3, #4
   19132:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19134:	4618      	mov	r0, r3
   19136:	f7ff fe87 	bl	18e48 <MP_MAP_SLOT_IS_FILLED>
   1913a:	4603      	mov	r3, r0
   1913c:	2b00      	cmp	r3, #0
   1913e:	d009      	beq.n	19154 <mp_builtin_dir+0x4c>
                mp_obj_list_append(dir, dict->map.table[i].key);
   19140:	69bb      	ldr	r3, [r7, #24]
   19142:	68da      	ldr	r2, [r3, #12]
   19144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19146:	00db      	lsls	r3, r3, #3
   19148:	4413      	add	r3, r2
   1914a:	681b      	ldr	r3, [r3, #0]
   1914c:	4619      	mov	r1, r3
   1914e:	69f8      	ldr	r0, [r7, #28]
   19150:	f7f7 ff28 	bl	10fa4 <mp_obj_list_append>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   19154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19156:	3301      	adds	r3, #1
   19158:	627b      	str	r3, [r7, #36]	; 0x24
   1915a:	69bb      	ldr	r3, [r7, #24]
   1915c:	689a      	ldr	r2, [r3, #8]
   1915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19160:	429a      	cmp	r2, r3
   19162:	d8e4      	bhi.n	1912e <mp_builtin_dir+0x26>
   19164:	e024      	b.n	191b0 <mp_builtin_dir+0xa8>
            }
        }
    } else { // n_args == 1
        // Make a list of names in the given object
        // Implemented by probing all possible qstrs with mp_load_method_maybe
        size_t nqstr = QSTR_TOTAL();
   19166:	4b15      	ldr	r3, [pc, #84]	; (191bc <mp_builtin_dir+0xb4>)
   19168:	691b      	ldr	r3, [r3, #16]
   1916a:	685a      	ldr	r2, [r3, #4]
   1916c:	4b13      	ldr	r3, [pc, #76]	; (191bc <mp_builtin_dir+0xb4>)
   1916e:	691b      	ldr	r3, [r3, #16]
   19170:	68db      	ldr	r3, [r3, #12]
   19172:	4413      	add	r3, r2
   19174:	617b      	str	r3, [r7, #20]
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   19176:	2302      	movs	r3, #2
   19178:	623b      	str	r3, [r7, #32]
   1917a:	e015      	b.n	191a8 <mp_builtin_dir+0xa0>
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, false);
   1917c:	683b      	ldr	r3, [r7, #0]
   1917e:	6818      	ldr	r0, [r3, #0]
   19180:	f107 020c 	add.w	r2, r7, #12
   19184:	2300      	movs	r3, #0
   19186:	6a39      	ldr	r1, [r7, #32]
   19188:	f7f3 fb5c 	bl	c844 <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   1918c:	68fb      	ldr	r3, [r7, #12]
   1918e:	2b00      	cmp	r3, #0
   19190:	d007      	beq.n	191a2 <mp_builtin_dir+0x9a>
                // This relies on MP_QSTR__dir__ being first after MP_QSTR_
                if (i == MP_QSTR___dir__ && dest[1] != MP_OBJ_NULL) {
                    return mp_call_method_n_kw(0, 0, dest);
                }
                #endif
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   19192:	6a3b      	ldr	r3, [r7, #32]
   19194:	009b      	lsls	r3, r3, #2
   19196:	f043 0302 	orr.w	r3, r3, #2
   1919a:	4619      	mov	r1, r3
   1919c:	69f8      	ldr	r0, [r7, #28]
   1919e:	f7f7 ff01 	bl	10fa4 <mp_obj_list_append>
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   191a2:	6a3b      	ldr	r3, [r7, #32]
   191a4:	3301      	adds	r3, #1
   191a6:	623b      	str	r3, [r7, #32]
   191a8:	6a3a      	ldr	r2, [r7, #32]
   191aa:	697b      	ldr	r3, [r7, #20]
   191ac:	429a      	cmp	r2, r3
   191ae:	d3e5      	bcc.n	1917c <mp_builtin_dir+0x74>
            }
        }
    }
    return dir;
   191b0:	69fb      	ldr	r3, [r7, #28]
}
   191b2:	4618      	mov	r0, r3
   191b4:	3728      	adds	r7, #40	; 0x28
   191b6:	46bd      	mov	sp, r7
   191b8:	bd80      	pop	{r7, pc}
   191ba:	bf00      	nop
   191bc:	20000a2c 	.word	0x20000a2c

000191c0 <mp_builtin_divmod>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_dir_obj, 0, 1, mp_builtin_dir);

STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   191c0:	b580      	push	{r7, lr}
   191c2:	b082      	sub	sp, #8
   191c4:	af00      	add	r7, sp, #0
   191c6:	6078      	str	r0, [r7, #4]
   191c8:	6039      	str	r1, [r7, #0]
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   191ca:	683a      	ldr	r2, [r7, #0]
   191cc:	6879      	ldr	r1, [r7, #4]
   191ce:	2021      	movs	r0, #33	; 0x21
   191d0:	f7f2 fb88 	bl	b8e4 <mp_binary_op>
   191d4:	4603      	mov	r3, r0
}
   191d6:	4618      	mov	r0, r3
   191d8:	3708      	adds	r7, #8
   191da:	46bd      	mov	sp, r7
   191dc:	bd80      	pop	{r7, pc}
   191de:	bf00      	nop

000191e0 <mp_builtin_hash>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_divmod_obj, mp_builtin_divmod);

STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   191e0:	b580      	push	{r7, lr}
   191e2:	b082      	sub	sp, #8
   191e4:	af00      	add	r7, sp, #0
   191e6:	6078      	str	r0, [r7, #4]
    // result is guaranteed to be a (small) int
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   191e8:	6879      	ldr	r1, [r7, #4]
   191ea:	2006      	movs	r0, #6
   191ec:	f7f2 fa94 	bl	b718 <mp_unary_op>
   191f0:	4603      	mov	r3, r0
}
   191f2:	4618      	mov	r0, r3
   191f4:	3708      	adds	r7, #8
   191f6:	46bd      	mov	sp, r7
   191f8:	bd80      	pop	{r7, pc}
   191fa:	bf00      	nop

000191fc <mp_builtin_hex>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_hash_obj, mp_builtin_hash);

STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   191fc:	b580      	push	{r7, lr}
   191fe:	b082      	sub	sp, #8
   19200:	af00      	add	r7, sp, #0
   19202:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   19204:	687a      	ldr	r2, [r7, #4]
   19206:	21aa      	movs	r1, #170	; 0xaa
   19208:	201f      	movs	r0, #31
   1920a:	f7f2 fb6b 	bl	b8e4 <mp_binary_op>
   1920e:	4603      	mov	r3, r0
}
   19210:	4618      	mov	r0, r3
   19212:	3708      	adds	r7, #8
   19214:	46bd      	mov	sp, r7
   19216:	bd80      	pop	{r7, pc}

00019218 <mp_builtin_iter>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_input_obj, 0, 1, mp_builtin_input);

#endif

STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   19218:	b580      	push	{r7, lr}
   1921a:	b082      	sub	sp, #8
   1921c:	af00      	add	r7, sp, #0
   1921e:	6078      	str	r0, [r7, #4]
    return mp_getiter(o_in, NULL);
   19220:	2100      	movs	r1, #0
   19222:	6878      	ldr	r0, [r7, #4]
   19224:	f7f3 fb6a 	bl	c8fc <mp_getiter>
   19228:	4603      	mov	r3, r0
}
   1922a:	4618      	mov	r0, r3
   1922c:	3708      	adds	r7, #8
   1922e:	46bd      	mov	sp, r7
   19230:	bd80      	pop	{r7, pc}
   19232:	bf00      	nop

00019234 <mp_builtin_next>:
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_min_obj, 1, mp_builtin_min);

#endif

STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   19234:	b580      	push	{r7, lr}
   19236:	b084      	sub	sp, #16
   19238:	af00      	add	r7, sp, #0
   1923a:	6078      	str	r0, [r7, #4]
    mp_obj_t ret = mp_iternext_allow_raise(o);
   1923c:	6878      	ldr	r0, [r7, #4]
   1923e:	f7f3 fbb1 	bl	c9a4 <mp_iternext_allow_raise>
   19242:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   19244:	68fb      	ldr	r3, [r7, #12]
   19246:	2b04      	cmp	r3, #4
   19248:	d106      	bne.n	19258 <mp_builtin_next+0x24>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   1924a:	4806      	ldr	r0, [pc, #24]	; (19264 <mp_builtin_next+0x30>)
   1924c:	f7f6 f92e 	bl	f4ac <mp_obj_new_exception>
   19250:	4603      	mov	r3, r0
   19252:	4618      	mov	r0, r3
   19254:	f7e7 f844 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   19258:	68fb      	ldr	r3, [r7, #12]
    }
}
   1925a:	4618      	mov	r0, r3
   1925c:	3710      	adds	r7, #16
   1925e:	46bd      	mov	sp, r7
   19260:	bd80      	pop	{r7, pc}
   19262:	bf00      	nop
   19264:	00020310 	.word	0x00020310

00019268 <mp_builtin_oct>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_next_obj, mp_builtin_next);

STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   19268:	b580      	push	{r7, lr}
   1926a:	b082      	sub	sp, #8
   1926c:	af00      	add	r7, sp, #0
   1926e:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   19270:	687a      	ldr	r2, [r7, #4]
   19272:	21a6      	movs	r1, #166	; 0xa6
   19274:	201f      	movs	r0, #31
   19276:	f7f2 fb35 	bl	b8e4 <mp_binary_op>
   1927a:	4603      	mov	r3, r0
}
   1927c:	4618      	mov	r0, r3
   1927e:	3708      	adds	r7, #8
   19280:	46bd      	mov	sp, r7
   19282:	bd80      	pop	{r7, pc}

00019284 <mp_builtin_ord>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_oct_obj, mp_builtin_oct);

STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   19284:	b580      	push	{r7, lr}
   19286:	b084      	sub	sp, #16
   19288:	af00      	add	r7, sp, #0
   1928a:	6078      	str	r0, [r7, #4]
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   1928c:	f107 0308 	add.w	r3, r7, #8
   19290:	4619      	mov	r1, r3
   19292:	6878      	ldr	r0, [r7, #4]
   19294:	f7fc f9e2 	bl	1565c <mp_obj_str_get_data>
   19298:	60f8      	str	r0, [r7, #12]
        }
    } else
    #endif
    {
        // a bytes object, or a str without unicode support (don't sign extend the char)
        if (len == 1) {
   1929a:	68bb      	ldr	r3, [r7, #8]
   1929c:	2b01      	cmp	r3, #1
   1929e:	d105      	bne.n	192ac <mp_builtin_ord+0x28>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   192a0:	68fb      	ldr	r3, [r7, #12]
   192a2:	781b      	ldrb	r3, [r3, #0]
   192a4:	005b      	lsls	r3, r3, #1
   192a6:	f043 0301 	orr.w	r3, r3, #1
   192aa:	e002      	b.n	192b2 <mp_builtin_ord+0x2e>
        }
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("ord expects a character");
   192ac:	4803      	ldr	r0, [pc, #12]	; (192bc <mp_builtin_ord+0x38>)
   192ae:	f7f3 fe73 	bl	cf98 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "ord() expected a character, but string of length %d found", (int)len));
    }
}
   192b2:	4618      	mov	r0, r3
   192b4:	3710      	adds	r7, #16
   192b6:	46bd      	mov	sp, r7
   192b8:	bd80      	pop	{r7, pc}
   192ba:	bf00      	nop
   192bc:	00022658 	.word	0x00022658

000192c0 <mp_builtin_pow>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_ord_obj, mp_builtin_ord);

STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   192c0:	b580      	push	{r7, lr}
   192c2:	b082      	sub	sp, #8
   192c4:	af00      	add	r7, sp, #0
   192c6:	6078      	str	r0, [r7, #4]
   192c8:	6039      	str	r1, [r7, #0]
    switch (n_args) {
   192ca:	687b      	ldr	r3, [r7, #4]
   192cc:	2b02      	cmp	r3, #2
   192ce:	d10a      	bne.n	192e6 <mp_builtin_pow+0x26>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   192d0:	683b      	ldr	r3, [r7, #0]
   192d2:	6819      	ldr	r1, [r3, #0]
   192d4:	683b      	ldr	r3, [r7, #0]
   192d6:	3304      	adds	r3, #4
   192d8:	681b      	ldr	r3, [r3, #0]
   192da:	461a      	mov	r2, r3
   192dc:	2020      	movs	r0, #32
   192de:	f7f2 fb01 	bl	b8e4 <mp_binary_op>
   192e2:	4603      	mov	r3, r0
   192e4:	e003      	b.n	192ee <mp_builtin_pow+0x2e>
        default:
#if !MICROPY_PY_BUILTINS_POW3
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   192e6:	4904      	ldr	r1, [pc, #16]	; (192f8 <mp_builtin_pow+0x38>)
   192e8:	4804      	ldr	r0, [pc, #16]	; (192fc <mp_builtin_pow+0x3c>)
   192ea:	f7f3 fe33 	bl	cf54 <mp_raise_msg>
            return mp_binary_op(MP_BINARY_OP_MODULO, mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]), args[2]);
#else
            return mp_obj_int_pow3(args[0], args[1], args[2]);
#endif
    }
}
   192ee:	4618      	mov	r0, r3
   192f0:	3708      	adds	r7, #8
   192f2:	46bd      	mov	sp, r7
   192f4:	bd80      	pop	{r7, pc}
   192f6:	bf00      	nop
   192f8:	00022678 	.word	0x00022678
   192fc:	00020694 	.word	0x00020694

00019300 <mp_builtin_print>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_pow_obj, 2, 3, mp_builtin_pow);

STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   19300:	b580      	push	{r7, lr}
   19302:	b08e      	sub	sp, #56	; 0x38
   19304:	af02      	add	r7, sp, #8
   19306:	60f8      	str	r0, [r7, #12]
   19308:	60b9      	str	r1, [r7, #8]
   1930a:	607a      	str	r2, [r7, #4]
    // parse args (a union is used to reduce the amount of C stack that is needed)
    union {
        mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   1930c:	f107 0314 	add.w	r3, r7, #20
   19310:	9301      	str	r3, [sp, #4]
   19312:	4b25      	ldr	r3, [pc, #148]	; (193a8 <mp_builtin_print+0xa8>)
   19314:	9300      	str	r3, [sp, #0]
   19316:	2302      	movs	r3, #2
   19318:	687a      	ldr	r2, [r7, #4]
   1931a:	2100      	movs	r1, #0
   1931c:	2000      	movs	r0, #0
   1931e:	f7f3 fe8d 	bl	d03c <mp_arg_parse_all>
    mp_get_stream_raise(u.args[ARG_file].u_obj, MP_STREAM_OP_WRITE);
    mp_print_t print = {MP_OBJ_TO_PTR(u.args[ARG_file].u_obj), mp_stream_write_adaptor};
    #endif

    // extract the objects first because we are going to use the other part of the union
    mp_obj_t sep = u.args[ARG_sep].u_obj;
   19322:	697b      	ldr	r3, [r7, #20]
   19324:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_obj_t end = u.args[ARG_end].u_obj;
   19326:	69bb      	ldr	r3, [r7, #24]
   19328:	627b      	str	r3, [r7, #36]	; 0x24
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   1932a:	f107 0314 	add.w	r3, r7, #20
   1932e:	4619      	mov	r1, r3
   19330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19332:	f7fc f993 	bl	1565c <mp_obj_str_get_data>
   19336:	6238      	str	r0, [r7, #32]
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   19338:	f107 0314 	add.w	r3, r7, #20
   1933c:	3304      	adds	r3, #4
   1933e:	4619      	mov	r1, r3
   19340:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19342:	f7fc f98b 	bl	1565c <mp_obj_str_get_data>
   19346:	61f8      	str	r0, [r7, #28]

    for (size_t i = 0; i < n_args; i++) {
   19348:	2300      	movs	r3, #0
   1934a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1934c:	e019      	b.n	19382 <mp_builtin_print+0x82>
        if (i > 0) {
   1934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19350:	2b00      	cmp	r3, #0
   19352:	d009      	beq.n	19368 <mp_builtin_print+0x68>
            #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
            mp_stream_write_adaptor(print.data, sep_data, u.len[0]);
            #else
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   19354:	697a      	ldr	r2, [r7, #20]
   19356:	2300      	movs	r3, #0
   19358:	9301      	str	r3, [sp, #4]
   1935a:	2300      	movs	r3, #0
   1935c:	9300      	str	r3, [sp, #0]
   1935e:	2300      	movs	r3, #0
   19360:	6a39      	ldr	r1, [r7, #32]
   19362:	4812      	ldr	r0, [pc, #72]	; (193ac <mp_builtin_print+0xac>)
   19364:	f7e8 fab0 	bl	18c8 <mp_print_strn>
            #endif
        }
        #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
        mp_obj_print_helper(&print, pos_args[i], PRINT_STR);
        #else
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   19368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1936a:	009b      	lsls	r3, r3, #2
   1936c:	68ba      	ldr	r2, [r7, #8]
   1936e:	4413      	add	r3, r2
   19370:	681b      	ldr	r3, [r3, #0]
   19372:	2200      	movs	r2, #0
   19374:	4619      	mov	r1, r3
   19376:	480d      	ldr	r0, [pc, #52]	; (193ac <mp_builtin_print+0xac>)
   19378:	f7f4 fa5a 	bl	d830 <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   1937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1937e:	3301      	adds	r3, #1
   19380:	62fb      	str	r3, [r7, #44]	; 0x2c
   19382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   19384:	68fb      	ldr	r3, [r7, #12]
   19386:	429a      	cmp	r2, r3
   19388:	d3e1      	bcc.n	1934e <mp_builtin_print+0x4e>
        #endif
    }
    #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
    mp_stream_write_adaptor(print.data, end_data, u.len[1]);
    #else
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   1938a:	69ba      	ldr	r2, [r7, #24]
   1938c:	2300      	movs	r3, #0
   1938e:	9301      	str	r3, [sp, #4]
   19390:	2300      	movs	r3, #0
   19392:	9300      	str	r3, [sp, #0]
   19394:	2300      	movs	r3, #0
   19396:	69f9      	ldr	r1, [r7, #28]
   19398:	4804      	ldr	r0, [pc, #16]	; (193ac <mp_builtin_print+0xac>)
   1939a:	f7e8 fa95 	bl	18c8 <mp_print_strn>
    #endif
    return mp_const_none;
   1939e:	4b04      	ldr	r3, [pc, #16]	; (193b0 <mp_builtin_print+0xb0>)
}
   193a0:	4618      	mov	r0, r3
   193a2:	3730      	adds	r7, #48	; 0x30
   193a4:	46bd      	mov	sp, r7
   193a6:	bd80      	pop	{r7, pc}
   193a8:	000229e8 	.word	0x000229e8
   193ac:	0001d838 	.word	0x0001d838
   193b0:	00021480 	.word	0x00021480

000193b4 <mp_builtin___repl_print__>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_print_obj, 0, mp_builtin_print);

STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   193b4:	b580      	push	{r7, lr}
   193b6:	b082      	sub	sp, #8
   193b8:	af00      	add	r7, sp, #0
   193ba:	6078      	str	r0, [r7, #4]
    if (o != mp_const_none) {
   193bc:	687b      	ldr	r3, [r7, #4]
   193be:	4a08      	ldr	r2, [pc, #32]	; (193e0 <mp_builtin___repl_print__+0x2c>)
   193c0:	4293      	cmp	r3, r2
   193c2:	d008      	beq.n	193d6 <mp_builtin___repl_print__+0x22>
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   193c4:	2201      	movs	r2, #1
   193c6:	6879      	ldr	r1, [r7, #4]
   193c8:	4806      	ldr	r0, [pc, #24]	; (193e4 <mp_builtin___repl_print__+0x30>)
   193ca:	f7f4 fa31 	bl	d830 <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   193ce:	4906      	ldr	r1, [pc, #24]	; (193e8 <mp_builtin___repl_print__+0x34>)
   193d0:	4804      	ldr	r0, [pc, #16]	; (193e4 <mp_builtin___repl_print__+0x30>)
   193d2:	f7e8 fa61 	bl	1898 <mp_print_str>
        // Set "_" special variable
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, o};
        mp_type_module.attr(MP_OBJ_FROM_PTR(&mp_module_builtins), MP_QSTR__, dest);
        #endif
    }
    return mp_const_none;
   193d6:	4b02      	ldr	r3, [pc, #8]	; (193e0 <mp_builtin___repl_print__+0x2c>)
}
   193d8:	4618      	mov	r0, r3
   193da:	3708      	adds	r7, #8
   193dc:	46bd      	mov	sp, r7
   193de:	bd80      	pop	{r7, pc}
   193e0:	00021480 	.word	0x00021480
   193e4:	0001d838 	.word	0x0001d838
   193e8:	000226ac 	.word	0x000226ac

000193ec <mp_builtin_repr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin___repl_print___obj, mp_builtin___repl_print__);

STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   193ec:	b580      	push	{r7, lr}
   193ee:	b088      	sub	sp, #32
   193f0:	af00      	add	r7, sp, #0
   193f2:	6078      	str	r0, [r7, #4]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   193f4:	f107 0208 	add.w	r2, r7, #8
   193f8:	f107 0310 	add.w	r3, r7, #16
   193fc:	2110      	movs	r1, #16
   193fe:	4618      	mov	r0, r3
   19400:	f7e7 ffda 	bl	13b8 <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   19404:	f107 0308 	add.w	r3, r7, #8
   19408:	2201      	movs	r2, #1
   1940a:	6879      	ldr	r1, [r7, #4]
   1940c:	4618      	mov	r0, r3
   1940e:	f7f4 fa0f 	bl	d830 <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   19412:	f107 0310 	add.w	r3, r7, #16
   19416:	4619      	mov	r1, r3
   19418:	4803      	ldr	r0, [pc, #12]	; (19428 <mp_builtin_repr+0x3c>)
   1941a:	f7fb ff5b 	bl	152d4 <mp_obj_new_str_from_vstr>
   1941e:	4603      	mov	r3, r0
}
   19420:	4618      	mov	r0, r3
   19422:	3720      	adds	r7, #32
   19424:	46bd      	mov	sp, r7
   19426:	bd80      	pop	{r7, pc}
   19428:	00021b30 	.word	0x00021b30

0001942c <mp_builtin_round>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_repr_obj, mp_builtin_repr);

STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   1942c:	b580      	push	{r7, lr}
   1942e:	b084      	sub	sp, #16
   19430:	af00      	add	r7, sp, #0
   19432:	6078      	str	r0, [r7, #4]
   19434:	6039      	str	r1, [r7, #0]
    mp_obj_t o_in = args[0];
   19436:	683b      	ldr	r3, [r7, #0]
   19438:	681b      	ldr	r3, [r3, #0]
   1943a:	60fb      	str	r3, [r7, #12]
    if (MP_OBJ_IS_INT(o_in)) {
   1943c:	68f8      	ldr	r0, [r7, #12]
   1943e:	f7ff fcdf 	bl	18e00 <MP_OBJ_IS_SMALL_INT>
   19442:	4603      	mov	r3, r0
   19444:	2b00      	cmp	r3, #0
   19446:	d10a      	bne.n	1945e <mp_builtin_round+0x32>
   19448:	68f8      	ldr	r0, [r7, #12]
   1944a:	f7ff fceb 	bl	18e24 <MP_OBJ_IS_OBJ>
   1944e:	4603      	mov	r3, r0
   19450:	2b00      	cmp	r3, #0
   19452:	d00c      	beq.n	1946e <mp_builtin_round+0x42>
   19454:	68fb      	ldr	r3, [r7, #12]
   19456:	681b      	ldr	r3, [r3, #0]
   19458:	4a0b      	ldr	r2, [pc, #44]	; (19488 <mp_builtin_round+0x5c>)
   1945a:	4293      	cmp	r3, r2
   1945c:	d107      	bne.n	1946e <mp_builtin_round+0x42>
        if (n_args <= 1) {
   1945e:	687b      	ldr	r3, [r7, #4]
   19460:	2b01      	cmp	r3, #1
   19462:	d801      	bhi.n	19468 <mp_builtin_round+0x3c>
            return o_in;
   19464:	68fb      	ldr	r3, [r7, #12]
   19466:	e00a      	b.n	1947e <mp_builtin_round+0x52>
        }

        #if !MICROPY_PY_BUILTINS_ROUND_INT
        mp_raise_NotImplementedError(NULL);
   19468:	2000      	movs	r0, #0
   1946a:	f7f3 fdb1 	bl	cfd0 <mp_raise_NotImplementedError>
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
    return mp_obj_new_int_from_float(rounded);
#else
    mp_int_t r = mp_obj_get_int(o_in);
   1946e:	68f8      	ldr	r0, [r7, #12]
   19470:	f7f4 fb8a 	bl	db88 <mp_obj_get_int>
   19474:	60b8      	str	r0, [r7, #8]
    return mp_obj_new_int(r);
   19476:	68b8      	ldr	r0, [r7, #8]
   19478:	f7f7 fa7c 	bl	10974 <mp_obj_new_int>
   1947c:	4603      	mov	r3, r0
#endif
}
   1947e:	4618      	mov	r0, r3
   19480:	3710      	adds	r7, #16
   19482:	46bd      	mov	sp, r7
   19484:	bd80      	pop	{r7, pc}
   19486:	bf00      	nop
   19488:	00020f3c 	.word	0x00020f3c

0001948c <mp_builtin_sum>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_round_obj, 1, 2, mp_builtin_round);

STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   1948c:	b580      	push	{r7, lr}
   1948e:	b08a      	sub	sp, #40	; 0x28
   19490:	af00      	add	r7, sp, #0
   19492:	6078      	str	r0, [r7, #4]
   19494:	6039      	str	r1, [r7, #0]
    mp_obj_t value;
    switch (n_args) {
   19496:	687b      	ldr	r3, [r7, #4]
   19498:	2b01      	cmp	r3, #1
   1949a:	d102      	bne.n	194a2 <mp_builtin_sum+0x16>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   1949c:	2301      	movs	r3, #1
   1949e:	627b      	str	r3, [r7, #36]	; 0x24
   194a0:	e003      	b.n	194aa <mp_builtin_sum+0x1e>
        default: value = args[1]; break;
   194a2:	683b      	ldr	r3, [r7, #0]
   194a4:	685b      	ldr	r3, [r3, #4]
   194a6:	627b      	str	r3, [r7, #36]	; 0x24
   194a8:	bf00      	nop
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   194aa:	683b      	ldr	r3, [r7, #0]
   194ac:	681b      	ldr	r3, [r3, #0]
   194ae:	f107 020c 	add.w	r2, r7, #12
   194b2:	4611      	mov	r1, r2
   194b4:	4618      	mov	r0, r3
   194b6:	f7f3 fa21 	bl	c8fc <mp_getiter>
   194ba:	6238      	str	r0, [r7, #32]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   194bc:	e005      	b.n	194ca <mp_builtin_sum+0x3e>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   194be:	69fa      	ldr	r2, [r7, #28]
   194c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   194c2:	201a      	movs	r0, #26
   194c4:	f7f2 fa0e 	bl	b8e4 <mp_binary_op>
   194c8:	6278      	str	r0, [r7, #36]	; 0x24
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   194ca:	6a38      	ldr	r0, [r7, #32]
   194cc:	f7f3 fa98 	bl	ca00 <mp_iternext>
   194d0:	61f8      	str	r0, [r7, #28]
   194d2:	69fb      	ldr	r3, [r7, #28]
   194d4:	2b04      	cmp	r3, #4
   194d6:	d1f2      	bne.n	194be <mp_builtin_sum+0x32>
    }
    return value;
   194d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   194da:	4618      	mov	r0, r3
   194dc:	3728      	adds	r7, #40	; 0x28
   194de:	46bd      	mov	sp, r7
   194e0:	bd80      	pop	{r7, pc}
   194e2:	bf00      	nop

000194e4 <mp_builtin_sorted>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_sum_obj, 1, 2, mp_builtin_sum);

STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   194e4:	b590      	push	{r4, r7, lr}
   194e6:	b087      	sub	sp, #28
   194e8:	af00      	add	r7, sp, #0
   194ea:	60f8      	str	r0, [r7, #12]
   194ec:	60b9      	str	r1, [r7, #8]
   194ee:	607a      	str	r2, [r7, #4]
    if (n_args > 1) {
   194f0:	68fb      	ldr	r3, [r7, #12]
   194f2:	2b01      	cmp	r3, #1
   194f4:	d902      	bls.n	194fc <mp_builtin_sorted+0x18>
        mp_raise_TypeError("must use keyword argument for key function");
   194f6:	480c      	ldr	r0, [pc, #48]	; (19528 <mp_builtin_sorted+0x44>)
   194f8:	f7f3 fd4e 	bl	cf98 <mp_raise_TypeError>
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   194fc:	4b0b      	ldr	r3, [pc, #44]	; (1952c <mp_builtin_sorted+0x48>)
   194fe:	68dc      	ldr	r4, [r3, #12]
   19500:	68bb      	ldr	r3, [r7, #8]
   19502:	2200      	movs	r2, #0
   19504:	2101      	movs	r1, #1
   19506:	4809      	ldr	r0, [pc, #36]	; (1952c <mp_builtin_sorted+0x48>)
   19508:	47a0      	blx	r4
   1950a:	4603      	mov	r3, r0
   1950c:	617b      	str	r3, [r7, #20]
    mp_obj_list_sort(1, &self, kwargs);
   1950e:	f107 0314 	add.w	r3, r7, #20
   19512:	687a      	ldr	r2, [r7, #4]
   19514:	4619      	mov	r1, r3
   19516:	2001      	movs	r0, #1
   19518:	f7f7 ff52 	bl	113c0 <mp_obj_list_sort>

    return self;
   1951c:	697b      	ldr	r3, [r7, #20]
}
   1951e:	4618      	mov	r0, r3
   19520:	371c      	adds	r7, #28
   19522:	46bd      	mov	sp, r7
   19524:	bd90      	pop	{r4, r7, pc}
   19526:	bf00      	nop
   19528:	000226d8 	.word	0x000226d8
   1952c:	000211a8 	.word	0x000211a8

00019530 <mp_load_attr_default>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_sorted_obj, 1, mp_builtin_sorted);

// See mp_load_attr() if making any changes
static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
   19530:	b580      	push	{r7, lr}
   19532:	b086      	sub	sp, #24
   19534:	af00      	add	r7, sp, #0
   19536:	60f8      	str	r0, [r7, #12]
   19538:	60b9      	str	r1, [r7, #8]
   1953a:	607a      	str	r2, [r7, #4]
    mp_obj_t dest[2];
    // use load_method, raising or not raising exception
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   1953c:	687b      	ldr	r3, [r7, #4]
   1953e:	2b00      	cmp	r3, #0
   19540:	d101      	bne.n	19546 <mp_load_attr_default+0x16>
   19542:	4b0e      	ldr	r3, [pc, #56]	; (1957c <mp_load_attr_default+0x4c>)
   19544:	e000      	b.n	19548 <mp_load_attr_default+0x18>
   19546:	4b0e      	ldr	r3, [pc, #56]	; (19580 <mp_load_attr_default+0x50>)
   19548:	f107 0210 	add.w	r2, r7, #16
   1954c:	68b9      	ldr	r1, [r7, #8]
   1954e:	68f8      	ldr	r0, [r7, #12]
   19550:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   19552:	693b      	ldr	r3, [r7, #16]
   19554:	2b00      	cmp	r3, #0
   19556:	d101      	bne.n	1955c <mp_load_attr_default+0x2c>
        return defval;
   19558:	687b      	ldr	r3, [r7, #4]
   1955a:	e00b      	b.n	19574 <mp_load_attr_default+0x44>
    } else if (dest[1] == MP_OBJ_NULL) {
   1955c:	697b      	ldr	r3, [r7, #20]
   1955e:	2b00      	cmp	r3, #0
   19560:	d101      	bne.n	19566 <mp_load_attr_default+0x36>
        // load_method returned just a normal attribute
        return dest[0];
   19562:	693b      	ldr	r3, [r7, #16]
   19564:	e006      	b.n	19574 <mp_load_attr_default+0x44>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   19566:	693b      	ldr	r3, [r7, #16]
   19568:	697a      	ldr	r2, [r7, #20]
   1956a:	4611      	mov	r1, r2
   1956c:	4618      	mov	r0, r3
   1956e:	f7f4 fe59 	bl	e224 <mp_obj_new_bound_meth>
   19572:	4603      	mov	r3, r0
    }
}
   19574:	4618      	mov	r0, r3
   19576:	3718      	adds	r7, #24
   19578:	46bd      	mov	sp, r7
   1957a:	bd80      	pop	{r7, pc}
   1957c:	0000c80d 	.word	0x0000c80d
   19580:	0000c749 	.word	0x0000c749

00019584 <mp_builtin_getattr>:

STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   19584:	b590      	push	{r4, r7, lr}
   19586:	b085      	sub	sp, #20
   19588:	af00      	add	r7, sp, #0
   1958a:	6078      	str	r0, [r7, #4]
   1958c:	6039      	str	r1, [r7, #0]
    mp_obj_t defval = MP_OBJ_NULL;
   1958e:	2300      	movs	r3, #0
   19590:	60fb      	str	r3, [r7, #12]
    if (n_args > 2) {
   19592:	687b      	ldr	r3, [r7, #4]
   19594:	2b02      	cmp	r3, #2
   19596:	d902      	bls.n	1959e <mp_builtin_getattr+0x1a>
        defval = args[2];
   19598:	683b      	ldr	r3, [r7, #0]
   1959a:	689b      	ldr	r3, [r3, #8]
   1959c:	60fb      	str	r3, [r7, #12]
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   1959e:	683b      	ldr	r3, [r7, #0]
   195a0:	681c      	ldr	r4, [r3, #0]
   195a2:	683b      	ldr	r3, [r7, #0]
   195a4:	3304      	adds	r3, #4
   195a6:	681b      	ldr	r3, [r3, #0]
   195a8:	4618      	mov	r0, r3
   195aa:	f7fb fff1 	bl	15590 <mp_obj_str_get_qstr>
   195ae:	4603      	mov	r3, r0
   195b0:	68fa      	ldr	r2, [r7, #12]
   195b2:	4619      	mov	r1, r3
   195b4:	4620      	mov	r0, r4
   195b6:	f7ff ffbb 	bl	19530 <mp_load_attr_default>
   195ba:	4603      	mov	r3, r0
}
   195bc:	4618      	mov	r0, r3
   195be:	3714      	adds	r7, #20
   195c0:	46bd      	mov	sp, r7
   195c2:	bd90      	pop	{r4, r7, pc}

000195c4 <mp_builtin_setattr>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_getattr_obj, 2, 3, mp_builtin_getattr);

STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   195c4:	b580      	push	{r7, lr}
   195c6:	b084      	sub	sp, #16
   195c8:	af00      	add	r7, sp, #0
   195ca:	60f8      	str	r0, [r7, #12]
   195cc:	60b9      	str	r1, [r7, #8]
   195ce:	607a      	str	r2, [r7, #4]
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   195d0:	68b8      	ldr	r0, [r7, #8]
   195d2:	f7fb ffdd 	bl	15590 <mp_obj_str_get_qstr>
   195d6:	4603      	mov	r3, r0
   195d8:	687a      	ldr	r2, [r7, #4]
   195da:	4619      	mov	r1, r3
   195dc:	68f8      	ldr	r0, [r7, #12]
   195de:	f7f3 f965 	bl	c8ac <mp_store_attr>
    return mp_const_none;
   195e2:	4b02      	ldr	r3, [pc, #8]	; (195ec <mp_builtin_setattr+0x28>)
}
   195e4:	4618      	mov	r0, r3
   195e6:	3710      	adds	r7, #16
   195e8:	46bd      	mov	sp, r7
   195ea:	bd80      	pop	{r7, pc}
   195ec:	00021480 	.word	0x00021480

000195f0 <mp_builtin_hasattr>:
    return mp_builtin_setattr(base, attr, MP_OBJ_NULL);
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_delattr_obj, mp_builtin_delattr);
#endif

STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   195f0:	b580      	push	{r7, lr}
   195f2:	b086      	sub	sp, #24
   195f4:	af00      	add	r7, sp, #0
   195f6:	6078      	str	r0, [r7, #4]
   195f8:	6039      	str	r1, [r7, #0]
    qstr attr = mp_obj_str_get_qstr(attr_in);
   195fa:	6838      	ldr	r0, [r7, #0]
   195fc:	f7fb ffc8 	bl	15590 <mp_obj_str_get_qstr>
   19600:	6178      	str	r0, [r7, #20]
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, false);
   19602:	f107 020c 	add.w	r2, r7, #12
   19606:	2300      	movs	r3, #0
   19608:	6979      	ldr	r1, [r7, #20]
   1960a:	6878      	ldr	r0, [r7, #4]
   1960c:	f7f3 f91a 	bl	c844 <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   19610:	68fb      	ldr	r3, [r7, #12]
   19612:	2b00      	cmp	r3, #0
   19614:	bf14      	ite	ne
   19616:	2301      	movne	r3, #1
   19618:	2300      	moveq	r3, #0
   1961a:	b2db      	uxtb	r3, r3
   1961c:	4618      	mov	r0, r3
   1961e:	f7ff fc35 	bl	18e8c <mp_obj_new_bool>
   19622:	4603      	mov	r3, r0
}
   19624:	4618      	mov	r0, r3
   19626:	3718      	adds	r7, #24
   19628:	46bd      	mov	sp, r7
   1962a:	bd80      	pop	{r7, pc}

0001962c <mp_builtin_globals>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
   1962c:	b580      	push	{r7, lr}
   1962e:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_globals_get());
   19630:	f7ff fc5c 	bl	18eec <mp_globals_get>
   19634:	4603      	mov	r3, r0
}
   19636:	4618      	mov	r0, r3
   19638:	bd80      	pop	{r7, pc}
   1963a:	bf00      	nop

0001963c <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
   1963c:	b580      	push	{r7, lr}
   1963e:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_locals_get());
   19640:	f7ff fc38 	bl	18eb4 <mp_locals_get>
   19644:	4603      	mov	r3, r0
}
   19646:	4618      	mov	r0, r3
   19648:	bd80      	pop	{r7, pc}
   1964a:	bf00      	nop

0001964c <mp_hal_set_interrupt_char>:
static inline mp_uint_t mp_hal_ticks_ms(void) { return 0; }
static inline void mp_hal_set_interrupt_char(char c) {}
   1964c:	b480      	push	{r7}
   1964e:	b083      	sub	sp, #12
   19650:	af00      	add	r7, sp, #0
   19652:	4603      	mov	r3, r0
   19654:	71fb      	strb	r3, [r7, #7]
   19656:	bf00      	nop
   19658:	370c      	adds	r7, #12
   1965a:	46bd      	mov	sp, r7
   1965c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19660:	4770      	bx	lr
   19662:	bf00      	nop

00019664 <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   19664:	b580      	push	{r7, lr}
   19666:	b082      	sub	sp, #8
   19668:	af00      	add	r7, sp, #0
   1966a:	6078      	str	r0, [r7, #4]
   1966c:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1966e:	687b      	ldr	r3, [r7, #4]
   19670:	2b00      	cmp	r3, #0
   19672:	d106      	bne.n	19682 <mp_micropython_opt_level+0x1e>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   19674:	4b0a      	ldr	r3, [pc, #40]	; (196a0 <mp_micropython_opt_level+0x3c>)
   19676:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   1967a:	005b      	lsls	r3, r3, #1
   1967c:	f043 0301 	orr.w	r3, r3, #1
   19680:	e00a      	b.n	19698 <mp_micropython_opt_level+0x34>
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   19682:	683b      	ldr	r3, [r7, #0]
   19684:	681b      	ldr	r3, [r3, #0]
   19686:	4618      	mov	r0, r3
   19688:	f7f4 fa7e 	bl	db88 <mp_obj_get_int>
   1968c:	4603      	mov	r3, r0
   1968e:	461a      	mov	r2, r3
   19690:	4b03      	ldr	r3, [pc, #12]	; (196a0 <mp_micropython_opt_level+0x3c>)
   19692:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        return mp_const_none;
   19696:	4b03      	ldr	r3, [pc, #12]	; (196a4 <mp_micropython_opt_level+0x40>)
    }
}
   19698:	4618      	mov	r0, r3
   1969a:	3708      	adds	r7, #8
   1969c:	46bd      	mov	sp, r7
   1969e:	bd80      	pop	{r7, pc}
   196a0:	20000a2c 	.word	0x20000a2c
   196a4:	00021480 	.word	0x00021480

000196a8 <mp_micropython_heap_lock>:
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_pystack_use_obj, mp_micropython_pystack_use);
#endif

#if MICROPY_ENABLE_GC
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   196a8:	b580      	push	{r7, lr}
   196aa:	af00      	add	r7, sp, #0
    gc_lock();
   196ac:	f7e6 ff74 	bl	598 <gc_lock>
    return mp_const_none;
   196b0:	4b01      	ldr	r3, [pc, #4]	; (196b8 <mp_micropython_heap_lock+0x10>)
}
   196b2:	4618      	mov	r0, r3
   196b4:	bd80      	pop	{r7, pc}
   196b6:	bf00      	nop
   196b8:	00021480 	.word	0x00021480

000196bc <mp_micropython_heap_unlock>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_heap_lock_obj, mp_micropython_heap_lock);

STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   196bc:	b580      	push	{r7, lr}
   196be:	af00      	add	r7, sp, #0
    gc_unlock();
   196c0:	f7e6 ff74 	bl	5ac <gc_unlock>
    return mp_const_none;
   196c4:	4b01      	ldr	r3, [pc, #4]	; (196cc <mp_micropython_heap_unlock+0x10>)
}
   196c6:	4618      	mov	r0, r3
   196c8:	bd80      	pop	{r7, pc}
   196ca:	bf00      	nop
   196cc:	00021480 	.word	0x00021480

000196d0 <mp_micropython_kbd_intr>:
#if MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF && (MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE == 0)
STATIC MP_DEFINE_CONST_FUN_OBJ_1(mp_alloc_emergency_exception_buf_obj, mp_alloc_emergency_exception_buf);
#endif

#if MICROPY_KBD_EXCEPTION
STATIC mp_obj_t mp_micropython_kbd_intr(mp_obj_t int_chr_in) {
   196d0:	b580      	push	{r7, lr}
   196d2:	b082      	sub	sp, #8
   196d4:	af00      	add	r7, sp, #0
   196d6:	6078      	str	r0, [r7, #4]
    mp_hal_set_interrupt_char(mp_obj_get_int(int_chr_in));
   196d8:	6878      	ldr	r0, [r7, #4]
   196da:	f7f4 fa55 	bl	db88 <mp_obj_get_int>
   196de:	4603      	mov	r3, r0
   196e0:	b2db      	uxtb	r3, r3
   196e2:	4618      	mov	r0, r3
   196e4:	f7ff ffb2 	bl	1964c <mp_hal_set_interrupt_char>
    return mp_const_none;
   196e8:	4b02      	ldr	r3, [pc, #8]	; (196f4 <mp_micropython_kbd_intr+0x24>)
}
   196ea:	4618      	mov	r0, r3
   196ec:	3708      	adds	r7, #8
   196ee:	46bd      	mov	sp, r7
   196f0:	bd80      	pop	{r7, pc}
   196f2:	bf00      	nop
   196f4:	00021480 	.word	0x00021480

000196f8 <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   196f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   196fc:	6803      	ldr	r3, [r0, #0]
                    }
                    mp_handle_pending_tail(atomic_state);
                }
                #else
                // This is an inlined variant of mp_handle_pending
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   196fe:	f8df b310 	ldr.w	fp, [pc, #784]	; 19a10 <mp_execute_bytecode+0x318>
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19702:	b095      	sub	sp, #84	; 0x54
   19704:	4680      	mov	r8, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19706:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19708:	9103      	str	r1, [sp, #12]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1970a:	f000 ff29 	bl	1a560 <mp_decode_uint_value>
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   1970e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   19712:	f003 0201 	and.w	r2, r3, #1
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   19716:	f023 0303 	bic.w	r3, r3, #3
        fastn = &code_state->state[n_state - 1];
   1971a:	eb08 0a80 	add.w	sl, r8, r0, lsl #2
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   1971e:	f108 0714 	add.w	r7, r8, #20
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19722:	f88d 2017 	strb.w	r2, [sp, #23]
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   19726:	9306      	str	r3, [sp, #24]
        fastn = &code_state->state[n_state - 1];
   19728:	1e43      	subs	r3, r0, #1
   1972a:	f10a 0a10 	add.w	sl, sl, #16
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   1972e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
        fastn = &code_state->state[n_state - 1];
   19732:	9302      	str	r3, [sp, #8]
        if (nlr_push(&nlr) == 0) {
   19734:	a808      	add	r0, sp, #32
   19736:	f7e6 fdc1 	bl	2bc <nlr_push>
   1973a:	2800      	cmp	r0, #0
   1973c:	f040 8092 	bne.w	19864 <mp_execute_bytecode+0x16c>
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   19740:	9b03      	ldr	r3, [sp, #12]
            const byte *ip = code_state->ip;
   19742:	f8d8 5004 	ldr.w	r5, [r8, #4]
            mp_obj_t *sp = code_state->sp;
   19746:	f8d8 6008 	ldr.w	r6, [r8, #8]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   1974a:	2b00      	cmp	r3, #0
   1974c:	f000 809d 	beq.w	1988a <mp_execute_bytecode+0x192>
   19750:	782b      	ldrb	r3, [r5, #0]
   19752:	2b5e      	cmp	r3, #94	; 0x5e
   19754:	f000 8099 	beq.w	1988a <mp_execute_bytecode+0x192>
                mp_obj_t exc = inject_exc;
   19758:	9b03      	ldr	r3, [sp, #12]
                inject_exc = MP_OBJ_NULL;
   1975a:	9003      	str	r0, [sp, #12]
                exc = mp_make_raise_obj(exc);
   1975c:	4618      	mov	r0, r3
                    obj = mp_make_raise_obj(obj);
   1975e:	f7f3 fa7b 	bl	cc58 <mp_make_raise_obj>
   19762:	4604      	mov	r4, r0
                    RAISE(obj);
   19764:	f7e6 fd98 	bl	298 <nlr_pop>
   19768:	9409      	str	r4, [sp, #36]	; 0x24
   1976a:	4620      	mov	r0, r4
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1976c:	6800      	ldr	r0, [r0, #0]
   1976e:	49a4      	ldr	r1, [pc, #656]	; (19a00 <mp_execute_bytecode+0x308>)
   19770:	f7fd fda4 	bl	172bc <mp_obj_is_subclass_fast>
   19774:	b148      	cbz	r0, 1978a <mp_execute_bytecode+0x92>
                if (code_state->ip) {
   19776:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1977a:	b133      	cbz	r3, 1978a <mp_execute_bytecode+0x92>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   1977c:	781a      	ldrb	r2, [r3, #0]
   1977e:	2a43      	cmp	r2, #67	; 0x43
   19780:	f000 85c2 	beq.w	1a308 <mp_execute_bytecode+0xc10>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   19784:	2a5e      	cmp	r2, #94	; 0x5e
   19786:	f000 8617 	beq.w	1a3b8 <mp_execute_bytecode+0xcc0>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   1978a:	4b9e      	ldr	r3, [pc, #632]	; (19a04 <mp_execute_bytecode+0x30c>)
   1978c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1978e:	429a      	cmp	r2, r3
   19790:	d048      	beq.n	19824 <mp_execute_bytecode+0x12c>
                const byte *ip = code_state->fun_bc->bytecode;
   19792:	f8d8 3000 	ldr.w	r3, [r8]
                ip = mp_decode_uint_skip(ip); // skip n_state
   19796:	6898      	ldr	r0, [r3, #8]
   19798:	f000 fef0 	bl	1a57c <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   1979c:	f000 feee 	bl	1a57c <mp_decode_uint_skip>
                ip++; // skip scope_params
                ip++; // skip n_pos_args
                ip++; // skip n_kwonly_args
                ip++; // skip n_def_pos_args
                size_t bc = code_state->ip - ip;
   197a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
                ip++; // skip n_def_pos_args
   197a4:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   197a6:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   197a8:	1b5c      	subs	r4, r3, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   197aa:	f000 fed9 	bl	1a560 <mp_decode_uint_value>
   197ae:	4606      	mov	r6, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   197b0:	4628      	mov	r0, r5
   197b2:	f000 fee3 	bl	1a57c <mp_decode_uint_skip>
                bc -= code_info_size;
   197b6:	ebc6 0e04 	rsb	lr, r6, r4
                qstr source_file = mp_decode_uint_value(ip);
                ip = mp_decode_uint_skip(ip);
                #endif
                size_t source_line = 1;
                size_t c;
                while ((c = *ip)) {
   197ba:	7904      	ldrb	r4, [r0, #4]
   197bc:	8803      	ldrh	r3, [r0, #0]
   197be:	8841      	ldrh	r1, [r0, #2]
   197c0:	2201      	movs	r2, #1
                ip += 4;
   197c2:	3004      	adds	r0, #4
                while ((c = *ip)) {
   197c4:	b96c      	cbnz	r4, 197e2 <mp_execute_bytecode+0xea>
   197c6:	e01a      	b.n	197fe <mp_execute_bytecode+0x106>
                    size_t b, l;
                    if ((c & 0x80) == 0) {
                        // 0b0LLBBBBB encoding
                        b = c & 0x1f;
   197c8:	f004 0c1f 	and.w	ip, r4, #31
                        // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                        b = c & 0xf;
                        l = ((c << 4) & 0x700) | ip[1];
                        ip += 2;
                    }
                    if (bc >= b) {
   197cc:	45f4      	cmp	ip, lr
                        ip += 1;
   197ce:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   197d2:	ea4f 1554 	mov.w	r5, r4, lsr #5
                    if (bc >= b) {
   197d6:	d812      	bhi.n	197fe <mp_execute_bytecode+0x106>
                while ((c = *ip)) {
   197d8:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   197da:	ebcc 0e0e 	rsb	lr, ip, lr
                        source_line += l;
   197de:	442a      	add	r2, r5
                while ((c = *ip)) {
   197e0:	b16c      	cbz	r4, 197fe <mp_execute_bytecode+0x106>
                    if ((c & 0x80) == 0) {
   197e2:	0625      	lsls	r5, r4, #24
   197e4:	d5f0      	bpl.n	197c8 <mp_execute_bytecode+0xd0>
                        l = ((c << 4) & 0x700) | ip[1];
   197e6:	7846      	ldrb	r6, [r0, #1]
   197e8:	0125      	lsls	r5, r4, #4
                        b = c & 0xf;
   197ea:	f004 0c0f 	and.w	ip, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   197ee:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
                    if (bc >= b) {
   197f2:	45f4      	cmp	ip, lr
                        l = ((c << 4) & 0x700) | ip[1];
   197f4:	ea45 0506 	orr.w	r5, r5, r6
                        ip += 2;
   197f8:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   197fc:	d9ec      	bls.n	197d8 <mp_execute_bytecode+0xe0>
                    } else {
                        // found source line corresponding to bytecode offset
                        break;
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   197fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   19800:	f7f6 f834 	bl	f86c <mp_obj_exception_add_traceback>
            }

            while (currently_in_except_block) {
   19804:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19808:	b183      	cbz	r3, 1982c <mp_execute_bytecode+0x134>
                // nested exception

                assert(exc_sp >= exc_stack);
   1980a:	9b06      	ldr	r3, [sp, #24]
   1980c:	429f      	cmp	r7, r3
   1980e:	f200 8608 	bhi.w	1a422 <mp_execute_bytecode+0xd2a>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   19812:	9b06      	ldr	r3, [sp, #24]
   19814:	685b      	ldr	r3, [r3, #4]
   19816:	f003 0301 	and.w	r3, r3, #1
   1981a:	f88d 3017 	strb.w	r3, [sp, #23]
   1981e:	9b06      	ldr	r3, [sp, #24]
   19820:	3b0c      	subs	r3, #12
   19822:	9306      	str	r3, [sp, #24]
            while (currently_in_except_block) {
   19824:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19828:	2b00      	cmp	r3, #0
   1982a:	d1ee      	bne.n	1980a <mp_execute_bytecode+0x112>
            }

            if (exc_sp >= exc_stack) {
   1982c:	9b06      	ldr	r3, [sp, #24]
   1982e:	429f      	cmp	r7, r3
   19830:	f200 85d1 	bhi.w	1a3d6 <mp_execute_bytecode+0xcde>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   19834:	2301      	movs	r3, #1
   19836:	f88d 3017 	strb.w	r3, [sp, #23]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   1983a:	9a06      	ldr	r2, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1983c:	9b06      	ldr	r3, [sp, #24]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   1983e:	9906      	ldr	r1, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19840:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   19842:	6810      	ldr	r0, [r2, #0]
                exc_sp->prev_exc = nlr.ret_val;
   19844:	9a09      	ldr	r2, [sp, #36]	; 0x24
                code_state->ip = exc_sp->handler;
   19846:	f8c8 0004 	str.w	r0, [r8, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   1984a:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   1984e:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19850:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   19854:	a808      	add	r0, sp, #32
                code_state->sp = sp;
   19856:	f8c8 3008 	str.w	r3, [r8, #8]
        if (nlr_push(&nlr) == 0) {
   1985a:	f7e6 fd2f 	bl	2bc <nlr_push>
   1985e:	2800      	cmp	r0, #0
   19860:	f43f af6e 	beq.w	19740 <mp_execute_bytecode+0x48>
   19864:	9809      	ldr	r0, [sp, #36]	; 0x24
   19866:	e781      	b.n	1976c <mp_execute_bytecode+0x74>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NUM_BYTECODE) {
   19868:	28d3      	cmp	r0, #211	; 0xd3
   1986a:	f240 85e1 	bls.w	1a430 <mp_execute_bytecode+0xd38>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BINARY_OP_NUM_BYTECODE) {
   1986e:	28f7      	cmp	r0, #247	; 0xf7
   19870:	f200 8626 	bhi.w	1a4c0 <mp_execute_bytecode+0xdc8>
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   19874:	6832      	ldr	r2, [r6, #0]
   19876:	f856 1c04 	ldr.w	r1, [r6, #-4]
   1987a:	38d7      	subs	r0, #215	; 0xd7
   1987c:	f7f2 f832 	bl	b8e4 <mp_binary_op>
                        mp_obj_t rhs = POP();
   19880:	1f33      	subs	r3, r6, #4
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   19882:	f846 0c04 	str.w	r0, [r6, #-4]
                switch (*ip++) {
   19886:	4625      	mov	r5, r4
                        mp_obj_t rhs = POP();
   19888:	461e      	mov	r6, r3
                MARK_EXC_IP_GLOBAL();
   1988a:	f8c8 5004 	str.w	r5, [r8, #4]
                switch (*ip++) {
   1988e:	7828      	ldrb	r0, [r5, #0]
   19890:	f1a0 0310 	sub.w	r3, r0, #16
   19894:	1c6c      	adds	r4, r5, #1
   19896:	2b5a      	cmp	r3, #90	; 0x5a
   19898:	f200 84eb 	bhi.w	1a272 <mp_execute_bytecode+0xb7a>
   1989c:	e8df f013 	tbh	[pc, r3, lsl #1]
   198a0:	0241023c 	.word	0x0241023c
   198a4:	04e901e6 	.word	0x04e901e6
   198a8:	04e901d4 	.word	0x04e901d4
   198ac:	01b901cb 	.word	0x01b901cb
   198b0:	021301b4 	.word	0x021301b4
   198b4:	01f401fd 	.word	0x01f401fd
   198b8:	023401eb 	.word	0x023401eb
   198bc:	022b0222 	.word	0x022b0222
   198c0:	018e01ad 	.word	0x018e01ad
   198c4:	019a017d 	.word	0x019a017d
   198c8:	016b0159 	.word	0x016b0159
   198cc:	01730161 	.word	0x01730161
   198d0:	012b0144 	.word	0x012b0144
   198d4:	011f0125 	.word	0x011f0125
   198d8:	04e904e9 	.word	0x04e904e9
   198dc:	04e904e9 	.word	0x04e904e9
   198e0:	0100011a 	.word	0x0100011a
   198e4:	01120060 	.word	0x01120060
   198e8:	03300108 	.word	0x03300108
   198ec:	03180324 	.word	0x03180324
   198f0:	0303030c 	.word	0x0303030c
   198f4:	04e904e9 	.word	0x04e904e9
   198f8:	02d304e9 	.word	0x02d304e9
   198fc:	0283029e 	.word	0x0283029e
   19900:	005b0283 	.word	0x005b0283
   19904:	03540374 	.word	0x03540374
   19908:	03a30345 	.word	0x03a30345
   1990c:	0259037b 	.word	0x0259037b
   19910:	04e904e9 	.word	0x04e904e9
   19914:	04e904e9 	.word	0x04e904e9
   19918:	04e904e9 	.word	0x04e904e9
   1991c:	04e904e9 	.word	0x04e904e9
   19920:	04bf0246 	.word	0x04bf0246
   19924:	046704e9 	.word	0x046704e9
   19928:	04e904b2 	.word	0x04e904b2
   1992c:	040104e9 	.word	0x040104e9
   19930:	04d304e9 	.word	0x04d304e9
   19934:	04900433 	.word	0x04900433
   19938:	00660268 	.word	0x00660268
   1993c:	04e90076 	.word	0x04e90076
   19940:	04190478 	.word	0x04190478
   19944:	03e3044a 	.word	0x03e3044a
   19948:	03b203ca 	.word	0x03b203ca
   1994c:	00c700df 	.word	0x00c700df
   19950:	00a400ba 	.word	0x00a400ba
   19954:	00f8      	.short	0x00f8
                    if (TOP() == mp_const_none) {
   19956:	6830      	ldr	r0, [r6, #0]
   19958:	4b2b      	ldr	r3, [pc, #172]	; (19a08 <mp_execute_bytecode+0x310>)
   1995a:	4298      	cmp	r0, r3
   1995c:	f040 8495 	bne.w	1a28a <mp_execute_bytecode+0xb92>
                        sp--;
   19960:	3e04      	subs	r6, #4
                switch (*ip++) {
   19962:	4625      	mov	r5, r4
                    DISPATCH();
   19964:	e791      	b.n	1988a <mp_execute_bytecode+0x192>
                        PUSH(ret_value);
   19966:	9b07      	ldr	r3, [sp, #28]
   19968:	6033      	str	r3, [r6, #0]
                        goto yield;
   1996a:	462c      	mov	r4, r5
                    nlr_pop();
   1996c:	f7e6 fc94 	bl	298 <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19970:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19974:	9a06      	ldr	r2, [sp, #24]
                    code_state->ip = ip;
   19976:	f8c8 4004 	str.w	r4, [r8, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   1997a:	4313      	orrs	r3, r2
                    code_state->sp = sp;
   1997c:	f8c8 6008 	str.w	r6, [r8, #8]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19980:	f8c8 300c 	str.w	r3, [r8, #12]
                    return MP_VM_RETURN_YIELD;
   19984:	2001      	movs	r0, #1
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   19986:	b015      	add	sp, #84	; 0x54
   19988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    mp_obj_t send_value = POP();
   1998c:	46b1      	mov	r9, r6
                    if (inject_exc != MP_OBJ_NULL) {
   1998e:	9a03      	ldr	r2, [sp, #12]
                    mp_obj_t send_value = POP();
   19990:	f859 1904 	ldr.w	r1, [r9], #-4
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   19994:	f8c8 9008 	str.w	r9, [r8, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   19998:	2a00      	cmp	r2, #0
   1999a:	f000 8505 	beq.w	1a3a8 <mp_execute_bytecode+0xcb0>
                        t_exc = inject_exc;
   1999e:	9b03      	ldr	r3, [sp, #12]
   199a0:	9301      	str	r3, [sp, #4]
                        inject_exc = MP_OBJ_NULL;
   199a2:	f04f 0e00 	mov.w	lr, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   199a6:	461a      	mov	r2, r3
   199a8:	f856 0c04 	ldr.w	r0, [r6, #-4]
                        inject_exc = MP_OBJ_NULL;
   199ac:	f8cd e00c 	str.w	lr, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   199b0:	4671      	mov	r1, lr
   199b2:	ab07      	add	r3, sp, #28
   199b4:	f7f3 f86e 	bl	ca94 <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   199b8:	2801      	cmp	r0, #1
   199ba:	d0d4      	beq.n	19966 <mp_execute_bytecode+0x26e>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   199bc:	2800      	cmp	r0, #0
   199be:	f040 84cd 	bne.w	1a35c <mp_execute_bytecode+0xc64>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   199c2:	9b07      	ldr	r3, [sp, #28]
                            PUSH(mp_const_none);
   199c4:	4a10      	ldr	r2, [pc, #64]	; (19a08 <mp_execute_bytecode+0x310>)
   199c6:	2b04      	cmp	r3, #4
   199c8:	bf08      	it	eq
   199ca:	4613      	moveq	r3, r2
   199cc:	f846 3c04 	str.w	r3, [r6, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   199d0:	9b01      	ldr	r3, [sp, #4]
   199d2:	b133      	cbz	r3, 199e2 <mp_execute_bytecode+0x2ea>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   199d4:	490d      	ldr	r1, [pc, #52]	; (19a0c <mp_execute_bytecode+0x314>)
   199d6:	4618      	mov	r0, r3
   199d8:	f7f5 ff02 	bl	f7e0 <mp_obj_exception_match>
   199dc:	2800      	cmp	r0, #0
   199de:	f040 8506 	bne.w	1a3ee <mp_execute_bytecode+0xcf6>
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   199e2:	464e      	mov	r6, r9
                switch (*ip++) {
   199e4:	4625      	mov	r5, r4
   199e6:	e750      	b.n	1988a <mp_execute_bytecode+0x192>
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   199e8:	4634      	mov	r4, r6
   199ea:	f8b5 1001 	ldrh.w	r1, [r5, #1]
   199ee:	f854 0b04 	ldr.w	r0, [r4], #4
   199f2:	f7f3 f979 	bl	cce8 <mp_import_from>
                    DECODE_QSTR;
   199f6:	3503      	adds	r5, #3
                    PUSH(obj);
   199f8:	6070      	str	r0, [r6, #4]
   199fa:	4626      	mov	r6, r4
                    DISPATCH();
   199fc:	e745      	b.n	1988a <mp_execute_bytecode+0x192>
   199fe:	bf00      	nop
   19a00:	00020310 	.word	0x00020310
   19a04:	000201cc 	.word	0x000201cc
   19a08:	00021480 	.word	0x00021480
   19a0c:	00020298 	.word	0x00020298
   19a10:	20000a2c 	.word	0x20000a2c
   19a14:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   19a18:	f856 2c04 	ldr.w	r2, [r6, #-4]
   19a1c:	6831      	ldr	r1, [r6, #0]
   19a1e:	f7f3 f943 	bl	cca8 <mp_import_name>
                    mp_obj_t obj = POP();
   19a22:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   19a24:	f846 0c04 	str.w	r0, [r6, #-4]
                    DECODE_QSTR;
   19a28:	3503      	adds	r5, #3
                    mp_obj_t obj = POP();
   19a2a:	461e      	mov	r6, r3
                    DISPATCH();
   19a2c:	e72d      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19a2e:	2100      	movs	r1, #0
                    DECODE_UINT;
   19a30:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19a38:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19a3c:	061a      	lsls	r2, r3, #24
   19a3e:	d4f7      	bmi.n	19a30 <mp_execute_bytecode+0x338>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   19a40:	09cb      	lsrs	r3, r1, #7
   19a42:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19a46:	fa53 f381 	uxtab	r3, r3, r1
   19a4a:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
   19a4e:	3e0c      	subs	r6, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   19a50:	4632      	mov	r2, r6
   19a52:	2001      	movs	r0, #1
   19a54:	f7f2 fc52 	bl	c2fc <mp_call_method_n_kw_var>
                    DECODE_UINT;
   19a58:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   19a5a:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19a5c:	e715      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19a5e:	2100      	movs	r1, #0
                    DECODE_UINT;
   19a60:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19a68:	0618      	lsls	r0, r3, #24
   19a6a:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19a6e:	d4f7      	bmi.n	19a60 <mp_execute_bytecode+0x368>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   19a70:	b2c8      	uxtb	r0, r1
   19a72:	09ca      	lsrs	r2, r1, #7
   19a74:	1c43      	adds	r3, r0, #1
   19a76:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
   19a7a:	4413      	add	r3, r2
   19a7c:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   19a80:	f3c1 2107 	ubfx	r1, r1, #8, #8
   19a84:	4632      	mov	r2, r6
   19a86:	f7f2 f9e7 	bl	be58 <mp_call_method_n_kw>
                    DECODE_UINT;
   19a8a:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   19a8c:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19a8e:	e6fc      	b.n	1988a <mp_execute_bytecode+0x192>
                    mp_import_all(POP());
   19a90:	6830      	ldr	r0, [r6, #0]
   19a92:	f1a6 0904 	sub.w	r9, r6, #4
                switch (*ip++) {
   19a96:	4625      	mov	r5, r4
                    mp_import_all(POP());
   19a98:	f7f3 f9b6 	bl	ce08 <mp_import_all>
   19a9c:	464e      	mov	r6, r9
                    DISPATCH();
   19a9e:	e6f4      	b.n	1988a <mp_execute_bytecode+0x192>
                    sp[0] = sp[-2];
   19aa0:	6832      	ldr	r2, [r6, #0]
                    sp[-1] = sp[-3];
   19aa2:	f856 3c04 	ldr.w	r3, [r6, #-4]
                    sp[0] = sp[-2];
   19aa6:	60b2      	str	r2, [r6, #8]
                    sp[-1] = sp[-3];
   19aa8:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19aaa:	4625      	mov	r5, r4
                    sp += 2;
   19aac:	3608      	adds	r6, #8
                    DISPATCH();
   19aae:	e6ec      	b.n	1988a <mp_execute_bytecode+0x192>
                    sp[0] = sp[-1];
   19ab0:	e916 000c 	ldmdb	r6, {r2, r3}
                    mp_obj_t top = sp[0];
   19ab4:	6831      	ldr	r1, [r6, #0]
                    sp[-2] = top;
   19ab6:	f846 1c08 	str.w	r1, [r6, #-8]
                switch (*ip++) {
   19aba:	4625      	mov	r5, r4
                    sp[-1] = sp[-2];
   19abc:	f846 2c04 	str.w	r2, [r6, #-4]
                    sp[0] = sp[-1];
   19ac0:	6033      	str	r3, [r6, #0]
                    DISPATCH();
   19ac2:	e6e2      	b.n	1988a <mp_execute_bytecode+0x192>
                    mp_obj_t top = sp[0];
   19ac4:	6833      	ldr	r3, [r6, #0]
                    sp[0] = sp[-1];
   19ac6:	f856 2c04 	ldr.w	r2, [r6, #-4]
   19aca:	6032      	str	r2, [r6, #0]
                switch (*ip++) {
   19acc:	4625      	mov	r5, r4
                    sp[-1] = top;
   19ace:	f846 3c04 	str.w	r3, [r6, #-4]
                    DISPATCH();
   19ad2:	e6da      	b.n	1988a <mp_execute_bytecode+0x192>
                    PUSH(top);
   19ad4:	6833      	ldr	r3, [r6, #0]
   19ad6:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19ad8:	4625      	mov	r5, r4
                    PUSH(top);
   19ada:	3604      	adds	r6, #4
                    DISPATCH();
   19adc:	e6d5      	b.n	1988a <mp_execute_bytecode+0x192>
   19ade:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    DECODE_QSTR;
   19ae2:	3503      	adds	r5, #3
                    mp_delete_global(qst);
   19ae4:	f7f1 fe04 	bl	b6f0 <mp_delete_global>
                    DISPATCH();
   19ae8:	e6cf      	b.n	1988a <mp_execute_bytecode+0x192>
   19aea:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    DECODE_QSTR;
   19aee:	3503      	adds	r5, #3
                    mp_delete_name(qst);
   19af0:	f7f1 fdd6 	bl	b6a0 <mp_delete_name>
                    DISPATCH();
   19af4:	e6c9      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19af6:	2200      	movs	r2, #0
                    DECODE_UINT;
   19af8:	f814 3b01 	ldrb.w	r3, [r4], #1
   19afc:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19b00:	061d      	lsls	r5, r3, #24
   19b02:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19b06:	d4f7      	bmi.n	19af8 <mp_execute_bytecode+0x400>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   19b08:	ebc2 7582 	rsb	r5, r2, r2, lsl #30
   19b0c:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
   19b10:	f7f4 fba2 	bl	e258 <mp_obj_cell_get>
   19b14:	2800      	cmp	r0, #0
   19b16:	f000 8467 	beq.w	1a3e8 <mp_execute_bytecode+0xcf0>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   19b1a:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
   19b1e:	2100      	movs	r1, #0
                    DECODE_UINT;
   19b20:	4625      	mov	r5, r4
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   19b22:	f7f4 fba7 	bl	e274 <mp_obj_cell_set>
                    DISPATCH();
   19b26:	e6b0      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19b28:	2200      	movs	r2, #0
                    DECODE_UINT;
   19b2a:	f814 3b01 	ldrb.w	r3, [r4], #1
   19b2e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19b32:	061b      	lsls	r3, r3, #24
   19b34:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19b38:	d4f7      	bmi.n	19b2a <mp_execute_bytecode+0x432>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   19b3a:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19b3e:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   19b42:	2b00      	cmp	r3, #0
   19b44:	f000 8450 	beq.w	1a3e8 <mp_execute_bytecode+0xcf0>
                    fastn[-unum] = MP_OBJ_NULL;
   19b48:	2300      	movs	r3, #0
                    DECODE_UINT;
   19b4a:	4625      	mov	r5, r4
                    fastn[-unum] = MP_OBJ_NULL;
   19b4c:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
                    DISPATCH();
   19b50:	e69b      	b.n	1988a <mp_execute_bytecode+0x192>
   19b52:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    mp_store_name(qst, POP());
   19b56:	6831      	ldr	r1, [r6, #0]
                    DECODE_QSTR;
   19b58:	3503      	adds	r5, #3
                    mp_store_name(qst, POP());
   19b5a:	3e04      	subs	r6, #4
   19b5c:	f7f1 fd8c 	bl	b678 <mp_store_name>
                    DISPATCH();
   19b60:	e693      	b.n	1988a <mp_execute_bytecode+0x192>
   19b62:	f8b5 1001 	ldrh.w	r1, [r5, #1]
                    mp_store_attr(sp[0], qst, sp[-1]);
   19b66:	f856 2c04 	ldr.w	r2, [r6, #-4]
   19b6a:	f856 0908 	ldr.w	r0, [r6], #-8
                    DECODE_QSTR;
   19b6e:	3503      	adds	r5, #3
                    mp_store_attr(sp[0], qst, sp[-1]);
   19b70:	f7f2 fe9c 	bl	c8ac <mp_store_attr>
                    DISPATCH();
   19b74:	e689      	b.n	1988a <mp_execute_bytecode+0x192>
   19b76:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    mp_store_global(qst, POP());
   19b7a:	6831      	ldr	r1, [r6, #0]
                    DECODE_QSTR;
   19b7c:	3503      	adds	r5, #3
                    mp_store_global(qst, POP());
   19b7e:	3e04      	subs	r6, #4
   19b80:	f7f1 fda2 	bl	b6c8 <mp_store_global>
                    DISPATCH();
   19b84:	e681      	b.n	1988a <mp_execute_bytecode+0x192>
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   19b86:	f856 2c08 	ldr.w	r2, [r6, #-8]
   19b8a:	6831      	ldr	r1, [r6, #0]
   19b8c:	f856 0c04 	ldr.w	r0, [r6, #-4]
                switch (*ip++) {
   19b90:	4625      	mov	r5, r4
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   19b92:	f7f4 f9bf 	bl	df14 <mp_obj_subscr>
                    sp -= 3;
   19b96:	3e0c      	subs	r6, #12
                    DISPATCH();
   19b98:	e677      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19b9a:	2200      	movs	r2, #0
                    DECODE_UINT;
   19b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
   19ba0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19ba4:	0618      	lsls	r0, r3, #24
   19ba6:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19baa:	d4f7      	bmi.n	19b9c <mp_execute_bytecode+0x4a4>
                    fastn[-unum] = POP();
   19bac:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19bb0:	6833      	ldr	r3, [r6, #0]
   19bb2:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
                    DECODE_UINT;
   19bb6:	4625      	mov	r5, r4
                    fastn[-unum] = POP();
   19bb8:	3e04      	subs	r6, #4
                    DISPATCH();
   19bba:	e666      	b.n	1988a <mp_execute_bytecode+0x192>
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19bbc:	6831      	ldr	r1, [r6, #0]
   19bbe:	f856 0c04 	ldr.w	r0, [r6, #-4]
   19bc2:	2208      	movs	r2, #8
   19bc4:	f7f4 f9a6 	bl	df14 <mp_obj_subscr>
                    mp_obj_t index = POP();
   19bc8:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19bca:	f846 0c04 	str.w	r0, [r6, #-4]
                switch (*ip++) {
   19bce:	4625      	mov	r5, r4
                    mp_obj_t index = POP();
   19bd0:	461e      	mov	r6, r3
                    DISPATCH();
   19bd2:	e65a      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19bd4:	2200      	movs	r2, #0
                    DECODE_UINT;
   19bd6:	f814 3b01 	ldrb.w	r3, [r4], #1
   19bda:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19bde:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19be2:	0619      	lsls	r1, r3, #24
   19be4:	d4f7      	bmi.n	19bd6 <mp_execute_bytecode+0x4de>
                    mp_obj_cell_set(fastn[-unum], POP());
   19be6:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19bea:	6831      	ldr	r1, [r6, #0]
   19bec:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19bf0:	3e04      	subs	r6, #4
                    DECODE_UINT;
   19bf2:	4625      	mov	r5, r4
                    mp_obj_cell_set(fastn[-unum], POP());
   19bf4:	f7f4 fb3e 	bl	e274 <mp_obj_cell_set>
                    DISPATCH();
   19bf8:	e647      	b.n	1988a <mp_execute_bytecode+0x192>
                    PUSH(mp_load_build_class());
   19bfa:	f7f1 fd33 	bl	b664 <mp_load_build_class>
   19bfe:	1d33      	adds	r3, r6, #4
   19c00:	6070      	str	r0, [r6, #4]
                switch (*ip++) {
   19c02:	4625      	mov	r5, r4
                    PUSH(mp_load_build_class());
   19c04:	461e      	mov	r6, r3
                    DISPATCH();
   19c06:	e640      	b.n	1988a <mp_execute_bytecode+0x192>
                    PUSH(MP_OBJ_NULL);
   19c08:	2300      	movs	r3, #0
   19c0a:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19c0c:	4625      	mov	r5, r4
                    PUSH(MP_OBJ_NULL);
   19c0e:	3604      	adds	r6, #4
                    DISPATCH();
   19c10:	e63b      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19c12:	2200      	movs	r2, #0
                    DECODE_OBJ;
   19c14:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c18:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19c1c:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19c20:	0619      	lsls	r1, r3, #24
   19c22:	d4f7      	bmi.n	19c14 <mp_execute_bytecode+0x51c>
   19c24:	f8d8 3000 	ldr.w	r3, [r8]
   19c28:	68db      	ldr	r3, [r3, #12]
                    PUSH(obj);
   19c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19c2e:	6073      	str	r3, [r6, #4]
                    DECODE_OBJ;
   19c30:	4625      	mov	r5, r4
                    PUSH(obj);
   19c32:	3604      	adds	r6, #4
                    DISPATCH();
   19c34:	e629      	b.n	1988a <mp_execute_bytecode+0x192>
   19c36:	f8b5 3001 	ldrh.w	r3, [r5, #1]
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   19c3a:	009b      	lsls	r3, r3, #2
   19c3c:	f043 0302 	orr.w	r3, r3, #2
   19c40:	6073      	str	r3, [r6, #4]
                    DECODE_QSTR;
   19c42:	3503      	adds	r5, #3
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   19c44:	3604      	adds	r6, #4
                    DISPATCH();
   19c46:	e620      	b.n	1988a <mp_execute_bytecode+0x192>
                    if ((ip[0] & 0x40) != 0) {
   19c48:	786a      	ldrb	r2, [r5, #1]
   19c4a:	f342 1280 	sbfx	r2, r2, #6, #1
                        num = (num << 7) | (*ip & 0x7f);
   19c4e:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c52:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   19c56:	0618      	lsls	r0, r3, #24
                        num = (num << 7) | (*ip & 0x7f);
   19c58:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   19c5c:	d4f7      	bmi.n	19c4e <mp_execute_bytecode+0x556>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   19c5e:	0053      	lsls	r3, r2, #1
   19c60:	f043 0301 	orr.w	r3, r3, #1
   19c64:	6073      	str	r3, [r6, #4]
                    } while ((*ip++ & 0x80) != 0);
   19c66:	4625      	mov	r5, r4
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   19c68:	3604      	adds	r6, #4
                    DISPATCH();
   19c6a:	e60e      	b.n	1988a <mp_execute_bytecode+0x192>
                    PUSH(mp_const_true);
   19c6c:	4bc0      	ldr	r3, [pc, #768]	; (19f70 <mp_execute_bytecode+0x878>)
   19c6e:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19c70:	4625      	mov	r5, r4
                    PUSH(mp_const_true);
   19c72:	3604      	adds	r6, #4
                    DISPATCH();
   19c74:	e609      	b.n	1988a <mp_execute_bytecode+0x192>
   19c76:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    PUSH(mp_load_global(qst));
   19c7a:	f7f1 fcc1 	bl	b600 <mp_load_global>
   19c7e:	1d33      	adds	r3, r6, #4
   19c80:	6070      	str	r0, [r6, #4]
                    DECODE_QSTR;
   19c82:	3503      	adds	r5, #3
                    PUSH(mp_load_global(qst));
   19c84:	461e      	mov	r6, r3
                    DISPATCH();
   19c86:	e600      	b.n	1988a <mp_execute_bytecode+0x192>
   19c88:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    PUSH(mp_load_name(qst));
   19c8c:	f7f1 fc90 	bl	b5b0 <mp_load_name>
   19c90:	1d33      	adds	r3, r6, #4
   19c92:	6070      	str	r0, [r6, #4]
                    DECODE_QSTR;
   19c94:	3503      	adds	r5, #3
                    PUSH(mp_load_name(qst));
   19c96:	461e      	mov	r6, r3
                    DISPATCH();
   19c98:	e5f7      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19c9a:	4625      	mov	r5, r4
   19c9c:	2200      	movs	r2, #0
                    DECODE_UINT;
   19c9e:	f815 3b01 	ldrb.w	r3, [r5], #1
   19ca2:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19ca6:	061c      	lsls	r4, r3, #24
   19ca8:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19cac:	d4f7      	bmi.n	19c9e <mp_execute_bytecode+0x5a6>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   19cae:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19cb2:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19cb6:	f7f4 facf 	bl	e258 <mp_obj_cell_get>
                    if (obj_shared == MP_OBJ_NULL) {
   19cba:	2800      	cmp	r0, #0
   19cbc:	f000 8394 	beq.w	1a3e8 <mp_execute_bytecode+0xcf0>
                        PUSH(value); // push the next iteration value
   19cc0:	6070      	str	r0, [r6, #4]
   19cc2:	3604      	adds	r6, #4
   19cc4:	e5e1      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19cc6:	4625      	mov	r5, r4
   19cc8:	2200      	movs	r2, #0
                    DECODE_UINT;
   19cca:	f815 3b01 	ldrb.w	r3, [r5], #1
   19cce:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19cd2:	061b      	lsls	r3, r3, #24
   19cd4:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19cd8:	d4f7      	bmi.n	19cca <mp_execute_bytecode+0x5d2>
                    obj_shared = fastn[-unum];
   19cda:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19cde:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19ce2:	e7ea      	b.n	19cba <mp_execute_bytecode+0x5c2>
   19ce4:	f8b5 1001 	ldrh.w	r1, [r5, #1]
                    mp_load_method(*sp, qst, sp);
   19ce8:	6830      	ldr	r0, [r6, #0]
   19cea:	4632      	mov	r2, r6
                    DECODE_QSTR;
   19cec:	3503      	adds	r5, #3
                    mp_load_method(*sp, qst, sp);
   19cee:	f7f2 fd8d 	bl	c80c <mp_load_method>
                    sp += 1;
   19cf2:	3604      	adds	r6, #4
                    DISPATCH();
   19cf4:	e5c9      	b.n	1988a <mp_execute_bytecode+0x192>
   19cf6:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    mp_load_super_method(qst, sp - 1);
   19cfa:	f1a6 0108 	sub.w	r1, r6, #8
                    DECODE_QSTR;
   19cfe:	3503      	adds	r5, #3
                    sp -= 1;
   19d00:	3e04      	subs	r6, #4
                    mp_load_super_method(qst, sp - 1);
   19d02:	f7fd fac1 	bl	17288 <mp_load_super_method>
                    DISPATCH();
   19d06:	e5c0      	b.n	1988a <mp_execute_bytecode+0x192>
   19d08:	f8b5 1001 	ldrh.w	r1, [r5, #1]
                    SET_TOP(mp_load_attr(TOP(), qst));
   19d0c:	6830      	ldr	r0, [r6, #0]
   19d0e:	f7f2 fc8d 	bl	c62c <mp_load_attr>
                    DECODE_QSTR;
   19d12:	3503      	adds	r5, #3
                    SET_TOP(mp_load_attr(TOP(), qst));
   19d14:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19d16:	e5b8      	b.n	1988a <mp_execute_bytecode+0x192>
                    PUSH(mp_const_false);
   19d18:	4b96      	ldr	r3, [pc, #600]	; (19f74 <mp_execute_bytecode+0x87c>)
   19d1a:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19d1c:	4625      	mov	r5, r4
                    PUSH(mp_const_false);
   19d1e:	3604      	adds	r6, #4
                    DISPATCH();
   19d20:	e5b3      	b.n	1988a <mp_execute_bytecode+0x192>
                    PUSH(mp_const_none);
   19d22:	4b95      	ldr	r3, [pc, #596]	; (19f78 <mp_execute_bytecode+0x880>)
   19d24:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19d26:	4625      	mov	r5, r4
                    PUSH(mp_const_none);
   19d28:	3604      	adds	r6, #4
                    DISPATCH();
   19d2a:	e5ae      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19d2c:	2000      	movs	r0, #0
                    DECODE_UINT;
   19d2e:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19d36:	061d      	lsls	r5, r3, #24
   19d38:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19d3c:	d4f7      	bmi.n	19d2e <mp_execute_bytecode+0x636>
                    sp -= unum - 1;
   19d3e:	0083      	lsls	r3, r0, #2
   19d40:	f1c3 0304 	rsb	r3, r3, #4
   19d44:	441e      	add	r6, r3
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19d46:	4631      	mov	r1, r6
   19d48:	f7fc f82c 	bl	15da4 <mp_obj_new_tuple>
                    DECODE_UINT;
   19d4c:	4625      	mov	r5, r4
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19d4e:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19d50:	e59b      	b.n	1988a <mp_execute_bytecode+0x192>
                    mp_obj_t obj = TOP();
   19d52:	46b1      	mov	r9, r6
                    obj = mp_getiter(obj, iter_buf);
   19d54:	4631      	mov	r1, r6
   19d56:	f859 0b0c 	ldr.w	r0, [r9], #12
   19d5a:	f7f2 fdcf 	bl	c8fc <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   19d5e:	4286      	cmp	r6, r0
   19d60:	f43f ae3f 	beq.w	199e2 <mp_execute_bytecode+0x2ea>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19d64:	2300      	movs	r3, #0
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   19d66:	6070      	str	r0, [r6, #4]
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19d68:	6033      	str	r3, [r6, #0]
                switch (*ip++) {
   19d6a:	4625      	mov	r5, r4
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   19d6c:	464e      	mov	r6, r9
   19d6e:	e58c      	b.n	1988a <mp_execute_bytecode+0x192>
                    mp_uint_t unum = *ip;
   19d70:	786b      	ldrb	r3, [r5, #1]
                    if (unum == 2) {
   19d72:	2b02      	cmp	r3, #2
   19d74:	f000 82ee 	beq.w	1a354 <mp_execute_bytecode+0xc5c>
                    if (unum == 0) {
   19d78:	2b00      	cmp	r3, #0
   19d7a:	f040 82ec 	bne.w	1a356 <mp_execute_bytecode+0xc5e>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19d7e:	9b06      	ldr	r3, [sp, #24]
   19d80:	429f      	cmp	r7, r3
   19d82:	d806      	bhi.n	19d92 <mp_execute_bytecode+0x69a>
                            if (e->prev_exc != NULL) {
   19d84:	6898      	ldr	r0, [r3, #8]
   19d86:	2800      	cmp	r0, #0
   19d88:	f47f ace9 	bne.w	1975e <mp_execute_bytecode+0x66>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19d8c:	3b0c      	subs	r3, #12
   19d8e:	429f      	cmp	r7, r3
   19d90:	d9f8      	bls.n	19d84 <mp_execute_bytecode+0x68c>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   19d92:	497a      	ldr	r1, [pc, #488]	; (19f7c <mp_execute_bytecode+0x884>)
   19d94:	487a      	ldr	r0, [pc, #488]	; (19f80 <mp_execute_bytecode+0x888>)
   19d96:	f7f5 fbcd 	bl	f534 <mp_obj_new_exception_msg>
   19d9a:	4604      	mov	r4, r0
                            RAISE(obj);
   19d9c:	f7e6 fa7c 	bl	298 <nlr_pop>
   19da0:	9409      	str	r4, [sp, #36]	; 0x24
   19da2:	4620      	mov	r0, r4
   19da4:	e4e2      	b.n	1976c <mp_execute_bytecode+0x74>
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   19da6:	9a06      	ldr	r2, [sp, #24]
   19da8:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   19dac:	320c      	adds	r2, #12
   19dae:	9206      	str	r2, [sp, #24]
   19db0:	9a06      	ldr	r2, [sp, #24]
   19db2:	9806      	ldr	r0, [sp, #24]
   19db4:	1ce9      	adds	r1, r5, #3
   19db6:	440b      	add	r3, r1
   19db8:	6013      	str	r3, [r2, #0]
   19dba:	782b      	ldrb	r3, [r5, #0]
   19dbc:	f89d 2017 	ldrb.w	r2, [sp, #23]
   19dc0:	9c06      	ldr	r4, [sp, #24]
   19dc2:	2b40      	cmp	r3, #64	; 0x40
   19dc4:	bf14      	ite	ne
   19dc6:	2300      	movne	r3, #0
   19dc8:	2302      	moveq	r3, #2
   19dca:	4313      	orrs	r3, r2
   19dcc:	4333      	orrs	r3, r6
   19dce:	2200      	movs	r2, #0
   19dd0:	6043      	str	r3, [r0, #4]
   19dd2:	460d      	mov	r5, r1
   19dd4:	f88d 2017 	strb.w	r2, [sp, #23]
   19dd8:	60a2      	str	r2, [r4, #8]
                    DISPATCH();
   19dda:	e556      	b.n	1988a <mp_execute_bytecode+0x192>
                    if (TOP() == mp_const_none) {
   19ddc:	f8d6 9000 	ldr.w	r9, [r6]
   19de0:	4d65      	ldr	r5, [pc, #404]	; (19f78 <mp_execute_bytecode+0x880>)
   19de2:	45a9      	cmp	r9, r5
   19de4:	f000 830a 	beq.w	1a3fc <mp_execute_bytecode+0xd04>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   19de8:	f019 0301 	ands.w	r3, r9, #1
   19dec:	9301      	str	r3, [sp, #4]
   19dee:	f040 826b 	bne.w	1a2c8 <mp_execute_bytecode+0xbd0>
                        assert(mp_obj_is_exception_instance(TOP()));
   19df2:	4648      	mov	r0, r9
   19df4:	f7f5 fce4 	bl	f7c0 <mp_obj_is_exception_instance>
   19df8:	2800      	cmp	r0, #0
   19dfa:	f000 833e 	beq.w	1a47a <mp_execute_bytecode+0xd82>
                        sp[1] = sp[0];
   19dfe:	6830      	ldr	r0, [r6, #0]
   19e00:	6070      	str	r0, [r6, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   19e02:	f7f3 fce3 	bl	d7cc <mp_obj_get_type>
                        sp -= 2;
   19e06:	f1a6 0908 	sub.w	r9, r6, #8
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   19e0a:	6030      	str	r0, [r6, #0]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   19e0c:	9901      	ldr	r1, [sp, #4]
                        sp[2] = mp_const_none;
   19e0e:	60b5      	str	r5, [r6, #8]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   19e10:	464a      	mov	r2, r9
   19e12:	2003      	movs	r0, #3
   19e14:	f7f2 f820 	bl	be58 <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   19e18:	f7f3 fdb6 	bl	d988 <mp_obj_is_true>
   19e1c:	2800      	cmp	r0, #0
   19e1e:	f000 82b9 	beq.w	1a394 <mp_execute_bytecode+0xc9c>
                            assert(exc_sp >= exc_stack);
   19e22:	9a06      	ldr	r2, [sp, #24]
                            SET_TOP(mp_const_none);
   19e24:	f846 5c08 	str.w	r5, [r6, #-8]
                            assert(exc_sp >= exc_stack);
   19e28:	4297      	cmp	r7, r2
   19e2a:	f200 8342 	bhi.w	1a4b2 <mp_execute_bytecode+0xdba>
                            POP_EXC_BLOCK();
   19e2e:	9b06      	ldr	r3, [sp, #24]
   19e30:	685b      	ldr	r3, [r3, #4]
   19e32:	f003 0301 	and.w	r3, r3, #1
   19e36:	f88d 3017 	strb.w	r3, [sp, #23]
   19e3a:	9b06      	ldr	r3, [sp, #24]
   19e3c:	3b0c      	subs	r3, #12
                        sp -= 2;
   19e3e:	464e      	mov	r6, r9
                switch (*ip++) {
   19e40:	4625      	mov	r5, r4
                            POP_EXC_BLOCK();
   19e42:	9306      	str	r3, [sp, #24]
   19e44:	e521      	b.n	1988a <mp_execute_bytecode+0x192>
                    mp_obj_t obj = TOP();
   19e46:	f8d6 9000 	ldr.w	r9, [r6]
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   19e4a:	4632      	mov	r2, r6
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   19e4c:	f106 0408 	add.w	r4, r6, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   19e50:	4648      	mov	r0, r9
   19e52:	210b      	movs	r1, #11
   19e54:	f7f2 fcda 	bl	c80c <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   19e58:	4648      	mov	r0, r9
   19e5a:	4622      	mov	r2, r4
   19e5c:	2109      	movs	r1, #9
   19e5e:	f7f2 fcd5 	bl	c80c <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   19e62:	2100      	movs	r1, #0
   19e64:	4622      	mov	r2, r4
   19e66:	4608      	mov	r0, r1
   19e68:	f7f1 fff6 	bl	be58 <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   19e6c:	9b06      	ldr	r3, [sp, #24]
   19e6e:	f8b5 2001 	ldrh.w	r2, [r5, #1]
   19e72:	330c      	adds	r3, #12
   19e74:	9306      	str	r3, [sp, #24]
   19e76:	f8dd c018 	ldr.w	ip, [sp, #24]
   19e7a:	f8dd e018 	ldr.w	lr, [sp, #24]
   19e7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19e82:	9906      	ldr	r1, [sp, #24]
   19e84:	3503      	adds	r5, #3
   19e86:	442a      	add	r2, r5
   19e88:	f8cc 2000 	str.w	r2, [ip]
   19e8c:	f043 0302 	orr.w	r3, r3, #2
   19e90:	1d32      	adds	r2, r6, #4
   19e92:	4313      	orrs	r3, r2
   19e94:	2200      	movs	r2, #0
   19e96:	f8ce 3004 	str.w	r3, [lr, #4]
   19e9a:	f88d 2017 	strb.w	r2, [sp, #23]
   19e9e:	608a      	str	r2, [r1, #8]
                    PUSH(ret);
   19ea0:	60b0      	str	r0, [r6, #8]
   19ea2:	4626      	mov	r6, r4
                    DISPATCH();
   19ea4:	e4f1      	b.n	1988a <mp_execute_bytecode+0x192>
                    if (mp_obj_is_true(TOP())) {
   19ea6:	6830      	ldr	r0, [r6, #0]
   19ea8:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    DECODE_SLABEL;
   19eac:	3503      	adds	r5, #3
                    if (mp_obj_is_true(TOP())) {
   19eae:	f7f3 fd6b 	bl	d988 <mp_obj_is_true>
   19eb2:	b148      	cbz	r0, 19ec8 <mp_execute_bytecode+0x7d0>
                        sp--;
   19eb4:	3e04      	subs	r6, #4
   19eb6:	e029      	b.n	19f0c <mp_execute_bytecode+0x814>
                    if (mp_obj_is_true(TOP())) {
   19eb8:	6830      	ldr	r0, [r6, #0]
   19eba:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    DECODE_SLABEL;
   19ebe:	3503      	adds	r5, #3
                    if (mp_obj_is_true(TOP())) {
   19ec0:	f7f3 fd62 	bl	d988 <mp_obj_is_true>
   19ec4:	2800      	cmp	r0, #0
   19ec6:	d0f5      	beq.n	19eb4 <mp_execute_bytecode+0x7bc>
                        ip += slab;
   19ec8:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   19ecc:	4425      	add	r5, r4
   19ece:	e01d      	b.n	19f0c <mp_execute_bytecode+0x814>
                    if (!mp_obj_is_true(POP())) {
   19ed0:	6830      	ldr	r0, [r6, #0]
   19ed2:	f8b5 4001 	ldrh.w	r4, [r5, #1]
   19ed6:	3e04      	subs	r6, #4
                    DECODE_SLABEL;
   19ed8:	3503      	adds	r5, #3
                    if (!mp_obj_is_true(POP())) {
   19eda:	f7f3 fd55 	bl	d988 <mp_obj_is_true>
   19ede:	b9a8      	cbnz	r0, 19f0c <mp_execute_bytecode+0x814>
                        ip += slab;
   19ee0:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   19ee4:	4425      	add	r5, r4
   19ee6:	e011      	b.n	19f0c <mp_execute_bytecode+0x814>
                    if (mp_obj_is_true(POP())) {
   19ee8:	6830      	ldr	r0, [r6, #0]
   19eea:	f8b5 4001 	ldrh.w	r4, [r5, #1]
   19eee:	3e04      	subs	r6, #4
                    DECODE_SLABEL;
   19ef0:	3503      	adds	r5, #3
                    if (mp_obj_is_true(POP())) {
   19ef2:	f7f3 fd49 	bl	d988 <mp_obj_is_true>
   19ef6:	b148      	cbz	r0, 19f0c <mp_execute_bytecode+0x814>
                        ip += slab;
   19ef8:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   19efc:	4425      	add	r5, r4
   19efe:	e005      	b.n	19f0c <mp_execute_bytecode+0x814>
   19f00:	f8b5 5001 	ldrh.w	r5, [r5, #1]
   19f04:	f5a5 45ff 	sub.w	r5, r5, #32640	; 0x7f80
   19f08:	3d7e      	subs	r5, #126	; 0x7e
                    ip += slab;
   19f0a:	4425      	add	r5, r4
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   19f0c:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
   19f10:	2b00      	cmp	r3, #0
   19f12:	f43f acba 	beq.w	1988a <mp_execute_bytecode+0x192>
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19f16:	4b1b      	ldr	r3, [pc, #108]	; (19f84 <mp_execute_bytecode+0x88c>)
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19f18:	4a1a      	ldr	r2, [pc, #104]	; (19f84 <mp_execute_bytecode+0x88c>)
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19f1a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19f1c:	2300      	movs	r3, #0
   19f1e:	6493      	str	r3, [r2, #72]	; 0x48
                    RAISE(obj);
   19f20:	f7e6 f9ba 	bl	298 <nlr_pop>
   19f24:	9409      	str	r4, [sp, #36]	; 0x24
   19f26:	4620      	mov	r0, r4
   19f28:	e420      	b.n	1976c <mp_execute_bytecode+0x74>
                    assert(exc_sp >= exc_stack);
   19f2a:	9b06      	ldr	r3, [sp, #24]
   19f2c:	429f      	cmp	r7, r3
   19f2e:	f200 82ab 	bhi.w	1a488 <mp_execute_bytecode+0xd90>
                    POP_EXC_BLOCK();
   19f32:	9b06      	ldr	r3, [sp, #24]
   19f34:	685b      	ldr	r3, [r3, #4]
   19f36:	f003 0301 	and.w	r3, r3, #1
   19f3a:	f88d 3017 	strb.w	r3, [sp, #23]
   19f3e:	9b06      	ldr	r3, [sp, #24]
   19f40:	3b0c      	subs	r3, #12
                switch (*ip++) {
   19f42:	4625      	mov	r5, r4
                    POP_EXC_BLOCK();
   19f44:	9306      	str	r3, [sp, #24]
                    DISPATCH();
   19f46:	e4a0      	b.n	1988a <mp_execute_bytecode+0x192>
   19f48:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    code_state->sp = sp;
   19f4c:	f8c8 6008 	str.w	r6, [r8, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19f50:	f856 3c0c 	ldr.w	r3, [r6, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   19f54:	3503      	adds	r5, #3
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19f56:	2b00      	cmp	r3, #0
   19f58:	f000 8223 	beq.w	1a3a2 <mp_execute_bytecode+0xcaa>
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   19f5c:	f1a6 000c 	sub.w	r0, r6, #12
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   19f60:	f7f2 fd20 	bl	c9a4 <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   19f64:	2804      	cmp	r0, #4
   19f66:	f47f aeab 	bne.w	19cc0 <mp_execute_bytecode+0x5c8>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   19f6a:	3e10      	subs	r6, #16
                        ip += ulab; // jump to after for-block
   19f6c:	4425      	add	r5, r4
   19f6e:	e48c      	b.n	1988a <mp_execute_bytecode+0x192>
   19f70:	0001fc3c 	.word	0x0001fc3c
   19f74:	0001fc34 	.word	0x0001fc34
   19f78:	00021480 	.word	0x00021480
   19f7c:	00022b70 	.word	0x00022b70
   19f80:	00020658 	.word	0x00020658
   19f84:	20000a2c 	.word	0x20000a2c
                    SET_TOP(mp_getiter(TOP(), NULL));
   19f88:	2100      	movs	r1, #0
   19f8a:	6830      	ldr	r0, [r6, #0]
   19f8c:	f7f2 fcb6 	bl	c8fc <mp_getiter>
                switch (*ip++) {
   19f90:	4625      	mov	r5, r4
                    SET_TOP(mp_getiter(TOP(), NULL));
   19f92:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19f94:	e479      	b.n	1988a <mp_execute_bytecode+0x192>
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   19f96:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   19f9a:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   19f9e:	3b7e      	subs	r3, #126	; 0x7e
   19fa0:	4423      	add	r3, r4
   19fa2:	6073      	str	r3, [r6, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   19fa4:	78ea      	ldrb	r2, [r5, #3]
   19fa6:	60b2      	str	r2, [r6, #8]
   19fa8:	3608      	adds	r6, #8
   19faa:	e013      	b.n	19fd4 <mp_execute_bytecode+0x8dc>
                        assert(exc_sp >= exc_stack);
   19fac:	9b06      	ldr	r3, [sp, #24]
   19fae:	429f      	cmp	r7, r3
                        unum -= 1;
   19fb0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   19fb4:	f200 8253 	bhi.w	1a45e <mp_execute_bytecode+0xd66>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19fb8:	9b06      	ldr	r3, [sp, #24]
   19fba:	685b      	ldr	r3, [r3, #4]
   19fbc:	0798      	lsls	r0, r3, #30
   19fbe:	f100 8198 	bmi.w	1a2f2 <mp_execute_bytecode+0xbfa>
                        POP_EXC_BLOCK();
   19fc2:	9b06      	ldr	r3, [sp, #24]
   19fc4:	685b      	ldr	r3, [r3, #4]
   19fc6:	f003 0301 	and.w	r3, r3, #1
   19fca:	f88d 3017 	strb.w	r3, [sp, #23]
   19fce:	9b06      	ldr	r3, [sp, #24]
   19fd0:	3b0c      	subs	r3, #12
   19fd2:	9306      	str	r3, [sp, #24]
                    while ((unum & 0x7f) > 0) {
   19fd4:	0651      	lsls	r1, r2, #25
   19fd6:	d1e9      	bne.n	19fac <mp_execute_bytecode+0x8b4>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19fd8:	f856 5c04 	ldr.w	r5, [r6, #-4]
                    if (unum != 0) {
   19fdc:	2a00      	cmp	r2, #0
   19fde:	f040 81d1 	bne.w	1a384 <mp_execute_bytecode+0xc8c>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19fe2:	3e08      	subs	r6, #8
   19fe4:	e792      	b.n	19f0c <mp_execute_bytecode+0x814>
                    assert(exc_sp >= exc_stack);
   19fe6:	9b06      	ldr	r3, [sp, #24]
   19fe8:	429f      	cmp	r7, r3
   19fea:	f200 8278 	bhi.w	1a4de <mp_execute_bytecode+0xde6>
                    assert(currently_in_except_block);
   19fee:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19ff2:	2b00      	cmp	r3, #0
   19ff4:	d19d      	bne.n	19f32 <mp_execute_bytecode+0x83a>
   19ff6:	4bcb      	ldr	r3, [pc, #812]	; (1a324 <mp_execute_bytecode+0xc2c>)
   19ff8:	4acb      	ldr	r2, [pc, #812]	; (1a328 <mp_execute_bytecode+0xc30>)
   19ffa:	48cc      	ldr	r0, [pc, #816]	; (1a32c <mp_execute_bytecode+0xc34>)
   19ffc:	f240 3106 	movw	r1, #774	; 0x306
   1a000:	f001 f9cc 	bl	1b39c <__assert_func>
                switch (*ip++) {
   1a004:	2100      	movs	r1, #0
                    DECODE_UINT;
   1a006:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a00a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a00e:	061d      	lsls	r5, r3, #24
   1a010:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a014:	d4f7      	bmi.n	1a006 <mp_execute_bytecode+0x90e>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   1a016:	09cb      	lsrs	r3, r1, #7
   1a018:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   1a01c:	fa53 f381 	uxtab	r3, r3, r1
   1a020:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
   1a024:	3e08      	subs	r6, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   1a026:	4632      	mov	r2, r6
   1a028:	2000      	movs	r0, #0
   1a02a:	f7f2 f967 	bl	c2fc <mp_call_method_n_kw_var>
                    DECODE_UINT;
   1a02e:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   1a030:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a032:	e42a      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a034:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a036:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a03a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a03e:	061b      	lsls	r3, r3, #24
   1a040:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a044:	d4f7      	bmi.n	1a036 <mp_execute_bytecode+0x93e>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   1a046:	09d3      	lsrs	r3, r2, #7
   1a048:	b2d1      	uxtb	r1, r2
   1a04a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   1a04e:	440b      	add	r3, r1
   1a050:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   1a054:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1a058:	1d33      	adds	r3, r6, #4
   1a05a:	6830      	ldr	r0, [r6, #0]
   1a05c:	f7f1 feda 	bl	be14 <mp_call_function_n_kw>
                    DECODE_UINT;
   1a060:	4625      	mov	r5, r4
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   1a062:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a064:	e411      	b.n	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a066:	2000      	movs	r0, #0
   1a068:	e000      	b.n	1a06c <mp_execute_bytecode+0x974>
                    DECODE_PTR;
   1a06a:	461c      	mov	r4, r3
   1a06c:	4623      	mov	r3, r4
   1a06e:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a072:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   1a076:	0612      	lsls	r2, r2, #24
   1a078:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   1a07c:	d4f5      	bmi.n	1a06a <mp_execute_bytecode+0x972>
                    size_t n_closed_over = *ip++;
   1a07e:	7861      	ldrb	r1, [r4, #1]
                    DECODE_PTR;
   1a080:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= 2 + n_closed_over - 1;
   1a084:	43ca      	mvns	r2, r1
                    DECODE_PTR;
   1a086:	68db      	ldr	r3, [r3, #12]
                    sp -= 2 + n_closed_over - 1;
   1a088:	eb06 0682 	add.w	r6, r6, r2, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   1a08c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   1a090:	4632      	mov	r2, r6
   1a092:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a096:	f7f1 f92b 	bl	b2f0 <mp_make_closure_from_raw_code>
                    size_t n_closed_over = *ip++;
   1a09a:	1ca5      	adds	r5, r4, #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   1a09c:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a09e:	f7ff bbf4 	b.w	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a0a2:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a0a4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a0a8:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a0ac:	061b      	lsls	r3, r3, #24
   1a0ae:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a0b2:	d4f7      	bmi.n	1a0a4 <mp_execute_bytecode+0x9ac>
                    mp_obj_t obj = sp[-(unum >> 2)];
   1a0b4:	0893      	lsrs	r3, r2, #2
   1a0b6:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   1a0ba:	0795      	lsls	r5, r2, #30
                    mp_obj_t obj = sp[-(unum >> 2)];
   1a0bc:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
                    if ((unum & 3) == 0) {
   1a0c0:	f040 80f9 	bne.w	1a2b6 <mp_execute_bytecode+0xbbe>
                        mp_obj_list_append(obj, sp[0]);
   1a0c4:	f856 1904 	ldr.w	r1, [r6], #-4
                    DECODE_UINT;
   1a0c8:	4625      	mov	r5, r4
                        mp_obj_list_append(obj, sp[0]);
   1a0ca:	f7f6 ff6b 	bl	10fa4 <mp_obj_list_append>
   1a0ce:	f7ff bbdc 	b.w	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a0d2:	2000      	movs	r0, #0
                    DECODE_PTR;
   1a0d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a0d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a0dc:	061d      	lsls	r5, r3, #24
   1a0de:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a0e2:	d4f7      	bmi.n	1a0d4 <mp_execute_bytecode+0x9dc>
   1a0e4:	f8d8 3000 	ldr.w	r3, [r8]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a0e8:	6832      	ldr	r2, [r6, #0]
                    DECODE_PTR;
   1a0ea:	68db      	ldr	r3, [r3, #12]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a0ec:	f856 1c04 	ldr.w	r1, [r6, #-4]
   1a0f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a0f4:	f7f1 f880 	bl	b1f8 <mp_make_function_from_raw_code>
                    mp_obj_t def_dict = POP();
   1a0f8:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a0fa:	f846 0c04 	str.w	r0, [r6, #-4]
                    DECODE_PTR;
   1a0fe:	4625      	mov	r5, r4
                    mp_obj_t def_dict = POP();
   1a100:	461e      	mov	r6, r3
                    DISPATCH();
   1a102:	f7ff bbc2 	b.w	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a106:	2500      	movs	r5, #0
                    DECODE_UINT;
   1a108:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a10c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a110:	eb02 15c5 	add.w	r5, r2, r5, lsl #7
   1a114:	061a      	lsls	r2, r3, #24
   1a116:	d4f7      	bmi.n	1a108 <mp_execute_bytecode+0xa10>
                    mp_unpack_ex(sp[0], unum, sp);
   1a118:	4632      	mov	r2, r6
   1a11a:	4629      	mov	r1, r5
   1a11c:	6830      	ldr	r0, [r6, #0]
   1a11e:	f7f2 f995 	bl	c44c <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   1a122:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1a126:	fa53 f385 	uxtab	r3, r3, r5
   1a12a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    DECODE_UINT;
   1a12e:	4625      	mov	r5, r4
                    DISPATCH();
   1a130:	f7ff bbab 	b.w	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a134:	2000      	movs	r0, #0
   1a136:	e000      	b.n	1a13a <mp_execute_bytecode+0xa42>
                    DECODE_PTR;
   1a138:	461c      	mov	r4, r3
   1a13a:	4623      	mov	r3, r4
   1a13c:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a140:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   1a144:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   1a148:	0611      	lsls	r1, r2, #24
   1a14a:	d4f5      	bmi.n	1a138 <mp_execute_bytecode+0xa40>
                    size_t n_closed_over = *ip++;
   1a14c:	7861      	ldrb	r1, [r4, #1]
                    DECODE_PTR;
   1a14e:	f8d8 2000 	ldr.w	r2, [r8]
                    sp -= n_closed_over - 1;
   1a152:	008b      	lsls	r3, r1, #2
                    DECODE_PTR;
   1a154:	68d5      	ldr	r5, [r2, #12]
                    sp -= n_closed_over - 1;
   1a156:	f1c3 0304 	rsb	r3, r3, #4
   1a15a:	441e      	add	r6, r3
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   1a15c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   1a160:	4632      	mov	r2, r6
   1a162:	f7f1 f8c5 	bl	b2f0 <mp_make_closure_from_raw_code>
                    size_t n_closed_over = *ip++;
   1a166:	1ca5      	adds	r5, r4, #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   1a168:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a16a:	f7ff bb8e 	b.w	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a16e:	2000      	movs	r0, #0
                    DECODE_UINT;
   1a170:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a178:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a17c:	061a      	lsls	r2, r3, #24
   1a17e:	d4f7      	bmi.n	1a170 <mp_execute_bytecode+0xa78>
                    PUSH(mp_obj_new_dict(unum));
   1a180:	f7f4 ffb8 	bl	f0f4 <mp_obj_new_dict>
   1a184:	1d33      	adds	r3, r6, #4
   1a186:	6070      	str	r0, [r6, #4]
                    DECODE_UINT;
   1a188:	4625      	mov	r5, r4
                    PUSH(mp_obj_new_dict(unum));
   1a18a:	461e      	mov	r6, r3
                    DISPATCH();
   1a18c:	f7ff bb7d 	b.w	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a190:	2100      	movs	r1, #0
                    DECODE_PTR;
   1a192:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a19a:	061b      	lsls	r3, r3, #24
   1a19c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a1a0:	d4f7      	bmi.n	1a192 <mp_execute_bytecode+0xa9a>
   1a1a2:	f8d8 3000 	ldr.w	r3, [r8]
   1a1a6:	68db      	ldr	r3, [r3, #12]
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   1a1a8:	2200      	movs	r2, #0
   1a1aa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   1a1ae:	4611      	mov	r1, r2
   1a1b0:	f7f1 f822 	bl	b1f8 <mp_make_function_from_raw_code>
   1a1b4:	1d33      	adds	r3, r6, #4
   1a1b6:	6070      	str	r0, [r6, #4]
                    DECODE_PTR;
   1a1b8:	4625      	mov	r5, r4
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   1a1ba:	461e      	mov	r6, r3
                    DISPATCH();
   1a1bc:	f7ff bb65 	b.w	1988a <mp_execute_bytecode+0x192>
                    if (currently_in_except_block) {
   1a1c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a1c4:	b173      	cbz	r3, 1a1e4 <mp_execute_bytecode+0xaec>
                        POP_EXC_BLOCK();
   1a1c6:	9b06      	ldr	r3, [sp, #24]
   1a1c8:	685b      	ldr	r3, [r3, #4]
   1a1ca:	f003 0301 	and.w	r3, r3, #1
   1a1ce:	f88d 3017 	strb.w	r3, [sp, #23]
   1a1d2:	e004      	b.n	1a1de <mp_execute_bytecode+0xae6>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   1a1d4:	9b06      	ldr	r3, [sp, #24]
   1a1d6:	685b      	ldr	r3, [r3, #4]
   1a1d8:	079b      	lsls	r3, r3, #30
   1a1da:	f100 80a9 	bmi.w	1a330 <mp_execute_bytecode+0xc38>
                        POP_EXC_BLOCK();
   1a1de:	9b06      	ldr	r3, [sp, #24]
   1a1e0:	3b0c      	subs	r3, #12
   1a1e2:	9306      	str	r3, [sp, #24]
                    while (exc_sp >= exc_stack) {
   1a1e4:	9b06      	ldr	r3, [sp, #24]
   1a1e6:	429f      	cmp	r7, r3
   1a1e8:	d9f4      	bls.n	1a1d4 <mp_execute_bytecode+0xadc>
                    nlr_pop();
   1a1ea:	f7e6 f855 	bl	298 <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   1a1ee:	9b06      	ldr	r3, [sp, #24]
                    code_state->sp = sp;
   1a1f0:	f8c8 6008 	str.w	r6, [r8, #8]
                    assert(exc_sp == exc_stack - 1);
   1a1f4:	3f0c      	subs	r7, #12
   1a1f6:	42bb      	cmp	r3, r7
   1a1f8:	f040 8154 	bne.w	1a4a4 <mp_execute_bytecode+0xdac>
                    return MP_VM_RETURN_NORMAL;
   1a1fc:	2000      	movs	r0, #0
}
   1a1fe:	b015      	add	sp, #84	; 0x54
   1a200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    sp -= 2;
   1a204:	f1a6 0308 	sub.w	r3, r6, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   1a208:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1a20c:	6831      	ldr	r1, [r6, #0]
   1a20e:	f856 0c08 	ldr.w	r0, [r6, #-8]
                switch (*ip++) {
   1a212:	4625      	mov	r5, r4
                    sp -= 2;
   1a214:	461e      	mov	r6, r3
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   1a216:	f7f4 ff8f 	bl	f138 <mp_obj_dict_store>
                    DISPATCH();
   1a21a:	f7ff bb36 	b.w	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a21e:	2000      	movs	r0, #0
                    DECODE_UINT;
   1a220:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a228:	0619      	lsls	r1, r3, #24
   1a22a:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a22e:	d4f7      	bmi.n	1a220 <mp_execute_bytecode+0xb28>
                    sp -= unum - 1;
   1a230:	0083      	lsls	r3, r0, #2
   1a232:	f1c3 0304 	rsb	r3, r3, #4
   1a236:	441e      	add	r6, r3
                    SET_TOP(mp_obj_new_list(unum, sp));
   1a238:	4631      	mov	r1, r6
   1a23a:	f7f7 fb45 	bl	118c8 <mp_obj_new_list>
                    DECODE_UINT;
   1a23e:	4625      	mov	r5, r4
                    SET_TOP(mp_obj_new_list(unum, sp));
   1a240:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a242:	f7ff bb22 	b.w	1988a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a246:	2500      	movs	r5, #0
                    DECODE_UINT;
   1a248:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a24c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a250:	0619      	lsls	r1, r3, #24
   1a252:	eb02 15c5 	add.w	r5, r2, r5, lsl #7
   1a256:	d4f7      	bmi.n	1a248 <mp_execute_bytecode+0xb50>
                    mp_unpack_sequence(sp[0], unum, sp);
   1a258:	4632      	mov	r2, r6
   1a25a:	4629      	mov	r1, r5
   1a25c:	6830      	ldr	r0, [r6, #0]
   1a25e:	f7f2 f86f 	bl	c340 <mp_unpack_sequence>
                    sp += unum - 1;
   1a262:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   1a266:	3b01      	subs	r3, #1
                    DECODE_UINT;
   1a268:	4625      	mov	r5, r4
                    sp += unum - 1;
   1a26a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    DISPATCH();
   1a26e:	f7ff bb0c 	b.w	1988a <mp_execute_bytecode+0x192>
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   1a272:	28af      	cmp	r0, #175	; 0xaf
   1a274:	d811      	bhi.n	1a29a <mp_execute_bytecode+0xba2>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a276:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1a27a:	005b      	lsls	r3, r3, #1
   1a27c:	f043 0301 	orr.w	r3, r3, #1
   1a280:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a282:	4625      	mov	r5, r4
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a284:	3604      	adds	r6, #4
                        DISPATCH();
   1a286:	f7ff bb00 	b.w	1988a <mp_execute_bytecode+0x192>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a28a:	07c3      	lsls	r3, r0, #31
   1a28c:	f140 80d8 	bpl.w	1a440 <mp_execute_bytecode+0xd48>
                        if (cause < 0) {
   1a290:	1042      	asrs	r2, r0, #1
   1a292:	f100 809e 	bmi.w	1a3d2 <mp_execute_bytecode+0xcda>
                            PUSH((mp_obj_t)cause);
   1a296:	6032      	str	r2, [r6, #0]
                            goto unwind_jump;
   1a298:	e69c      	b.n	19fd4 <mp_execute_bytecode+0x8dc>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   1a29a:	28bf      	cmp	r0, #191	; 0xbf
   1a29c:	d974      	bls.n	1a388 <mp_execute_bytecode+0xc90>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   1a29e:	28cf      	cmp	r0, #207	; 0xcf
   1a2a0:	f63f aae2 	bhi.w	19868 <mp_execute_bytecode+0x170>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a2a4:	f1c0 00c0 	rsb	r0, r0, #192	; 0xc0
   1a2a8:	6833      	ldr	r3, [r6, #0]
   1a2aa:	f84a 3020 	str.w	r3, [sl, r0, lsl #2]
                switch (*ip++) {
   1a2ae:	4625      	mov	r5, r4
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a2b0:	3e04      	subs	r6, #4
                        DISPATCH();
   1a2b2:	f7ff baea 	b.w	1988a <mp_execute_bytecode+0x192>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a2b6:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1a2ba:	f856 1908 	ldr.w	r1, [r6], #-8
                    DECODE_UINT;
   1a2be:	4625      	mov	r5, r4
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a2c0:	f7f4 ff3a 	bl	f138 <mp_obj_dict_store>
   1a2c4:	f7ff bae1 	b.w	1988a <mp_execute_bytecode+0x192>
                        mp_obj_t data = sp[-1];
   1a2c8:	f856 3c04 	ldr.w	r3, [r6, #-4]
                        sp[0] = mp_const_none;
   1a2cc:	6035      	str	r5, [r6, #0]
                        sp[1] = mp_const_none;
   1a2ce:	6075      	str	r5, [r6, #4]
                        sp[-1] = mp_const_none;
   1a2d0:	f846 5c04 	str.w	r5, [r6, #-4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a2d4:	f1a6 020c 	sub.w	r2, r6, #12
   1a2d8:	2100      	movs	r1, #0
   1a2da:	2003      	movs	r0, #3
                        mp_obj_t data = sp[-1];
   1a2dc:	9301      	str	r3, [sp, #4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a2de:	f7f1 fdbb 	bl	be58 <mp_call_method_n_kw>
                        sp[-3] = data;
   1a2e2:	9b01      	ldr	r3, [sp, #4]
   1a2e4:	f846 3c0c 	str.w	r3, [r6, #-12]
                switch (*ip++) {
   1a2e8:	4625      	mov	r5, r4
                        sp[-2] = cause;
   1a2ea:	f846 9d08 	str.w	r9, [r6, #-8]!
   1a2ee:	f7ff bacc 	b.w	1988a <mp_execute_bytecode+0x192>
                            ip = exc_sp->handler; // get exception handler byte code address
   1a2f2:	9906      	ldr	r1, [sp, #24]
                            exc_sp--; // pop exception handler
   1a2f4:	9b06      	ldr	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   1a2f6:	0052      	lsls	r2, r2, #1
   1a2f8:	f042 0201 	orr.w	r2, r2, #1
   1a2fc:	6032      	str	r2, [r6, #0]
                            exc_sp--; // pop exception handler
   1a2fe:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   1a300:	680d      	ldr	r5, [r1, #0]
                            exc_sp--; // pop exception handler
   1a302:	9306      	str	r3, [sp, #24]
                            goto dispatch_loop; // run the exception handler
   1a304:	f7ff bac1 	b.w	1988a <mp_execute_bytecode+0x192>
   1a308:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a30c:	f8d8 2008 	ldr.w	r2, [r8, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a310:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   1a312:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a314:	3a10      	subs	r2, #16
                        code_state->ip = ip + ulab; // jump to after for-block
   1a316:	f8c8 3004 	str.w	r3, [r8, #4]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a31a:	f8c8 2008 	str.w	r2, [r8, #8]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a31e:	f7ff ba09 	b.w	19734 <mp_execute_bytecode+0x3c>
   1a322:	bf00      	nop
   1a324:	00022afc 	.word	0x00022afc
   1a328:	00022a74 	.word	0x00022a74
   1a32c:	00022ad8 	.word	0x00022ad8
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a330:	9b06      	ldr	r3, [sp, #24]
                            ip = exc_sp->handler;
   1a332:	9906      	ldr	r1, [sp, #24]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a334:	685b      	ldr	r3, [r3, #4]
                            exc_sp--;
   1a336:	9a06      	ldr	r2, [sp, #24]
                            finally_sp[1] = sp[0];
   1a338:	6830      	ldr	r0, [r6, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a33a:	f023 0603 	bic.w	r6, r3, #3
                            exc_sp--;
   1a33e:	f1a2 030c 	sub.w	r3, r2, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   1a346:	6070      	str	r0, [r6, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a348:	60b2      	str	r2, [r6, #8]
                            ip = exc_sp->handler;
   1a34a:	680d      	ldr	r5, [r1, #0]
                            exc_sp--;
   1a34c:	9306      	str	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a34e:	3608      	adds	r6, #8
                            goto dispatch_loop;
   1a350:	f7ff ba9b 	b.w	1988a <mp_execute_bytecode+0x192>
                        sp--;
   1a354:	3e04      	subs	r6, #4
                        obj = TOP();
   1a356:	6830      	ldr	r0, [r6, #0]
   1a358:	f7ff ba01 	b.w	1975e <mp_execute_bytecode+0x66>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a35c:	2802      	cmp	r0, #2
   1a35e:	f040 809a 	bne.w	1a496 <mp_execute_bytecode+0xd9e>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1a362:	4962      	ldr	r1, [pc, #392]	; (1a4ec <mp_execute_bytecode+0xdf4>)
   1a364:	9807      	ldr	r0, [sp, #28]
   1a366:	f7f5 fa3b 	bl	f7e0 <mp_obj_exception_match>
   1a36a:	2800      	cmp	r0, #0
   1a36c:	d071      	beq.n	1a452 <mp_execute_bytecode+0xd5a>
                            PUSH(mp_obj_exception_get_value(ret_value));
   1a36e:	9807      	ldr	r0, [sp, #28]
   1a370:	f7f5 f848 	bl	f404 <mp_obj_exception_get_value>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a374:	9b01      	ldr	r3, [sp, #4]
                            PUSH(mp_obj_exception_get_value(ret_value));
   1a376:	f846 0c04 	str.w	r0, [r6, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a37a:	2b00      	cmp	r3, #0
   1a37c:	f47f ab2a 	bne.w	199d4 <mp_execute_bytecode+0x2dc>
   1a380:	f7ff bb2f 	b.w	199e2 <mp_execute_bytecode+0x2ea>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   1a384:	3e18      	subs	r6, #24
   1a386:	e5c1      	b.n	19f0c <mp_execute_bytecode+0x814>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a388:	f1c0 00b0 	rsb	r0, r0, #176	; 0xb0
                switch (*ip++) {
   1a38c:	4625      	mov	r5, r4
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a38e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
                        goto load_check;
   1a392:	e492      	b.n	19cba <mp_execute_bytecode+0x5c2>
                            sp[0] = sp[3];
   1a394:	6873      	ldr	r3, [r6, #4]
   1a396:	f846 3c08 	str.w	r3, [r6, #-8]
                switch (*ip++) {
   1a39a:	4625      	mov	r5, r4
                        sp -= 2;
   1a39c:	464e      	mov	r6, r9
   1a39e:	f7ff ba74 	b.w	1988a <mp_execute_bytecode+0x192>
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   1a3a2:	f856 0c08 	ldr.w	r0, [r6, #-8]
   1a3a6:	e5db      	b.n	19f60 <mp_execute_bytecode+0x868>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a3a8:	ab07      	add	r3, sp, #28
   1a3aa:	f856 0c04 	ldr.w	r0, [r6, #-4]
                    mp_obj_t t_exc = MP_OBJ_NULL;
   1a3ae:	9201      	str	r2, [sp, #4]
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a3b0:	f7f2 fb70 	bl	ca94 <mp_resume>
   1a3b4:	f7ff bb00 	b.w	199b8 <mp_execute_bytecode+0x2c0>
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   1a3b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a3ba:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a3be:	f7f5 f821 	bl	f404 <mp_obj_exception_get_value>
   1a3c2:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1a3c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a3c8:	3301      	adds	r3, #1
   1a3ca:	f8c8 3004 	str.w	r3, [r8, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a3ce:	f7ff b9b1 	b.w	19734 <mp_execute_bytecode+0x3c>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1a3d2:	3e04      	subs	r6, #4
   1a3d4:	e706      	b.n	1a1e4 <mp_execute_bytecode+0xaec>
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
   1a3d6:	9b02      	ldr	r3, [sp, #8]
   1a3d8:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   1a3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a3de:	f8c8 3014 	str.w	r3, [r8, #20]
                return MP_VM_RETURN_EXCEPTION;
   1a3e2:	2002      	movs	r0, #2
   1a3e4:	f7ff bacf 	b.w	19986 <mp_execute_bytecode+0x28e>
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   1a3e8:	4941      	ldr	r1, [pc, #260]	; (1a4f0 <mp_execute_bytecode+0xdf8>)
   1a3ea:	4842      	ldr	r0, [pc, #264]	; (1a4f4 <mp_execute_bytecode+0xdfc>)
   1a3ec:	e4d3      	b.n	19d96 <mp_execute_bytecode+0x69e>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a3ee:	f7e5 ff53 	bl	298 <nlr_pop>
   1a3f2:	9b01      	ldr	r3, [sp, #4]
   1a3f4:	9309      	str	r3, [sp, #36]	; 0x24
   1a3f6:	4618      	mov	r0, r3
   1a3f8:	f7ff b9b8 	b.w	1976c <mp_execute_bytecode+0x74>
                        sp -= 2;
   1a3fc:	f1a6 0308 	sub.w	r3, r6, #8
                        sp[1] = mp_const_none;
   1a400:	f8c6 9004 	str.w	r9, [r6, #4]
                        sp[2] = mp_const_none;
   1a404:	f8c6 9008 	str.w	r9, [r6, #8]
                        mp_call_method_n_kw(3, 0, sp);
   1a408:	461a      	mov	r2, r3
   1a40a:	2100      	movs	r1, #0
   1a40c:	2003      	movs	r0, #3
   1a40e:	9301      	str	r3, [sp, #4]
   1a410:	f7f1 fd22 	bl	be58 <mp_call_method_n_kw>
                        sp -= 2;
   1a414:	9b01      	ldr	r3, [sp, #4]
                        SET_TOP(mp_const_none);
   1a416:	f846 9c08 	str.w	r9, [r6, #-8]
                switch (*ip++) {
   1a41a:	4625      	mov	r5, r4
                        sp -= 2;
   1a41c:	461e      	mov	r6, r3
   1a41e:	f7ff ba34 	b.w	1988a <mp_execute_bytecode+0x192>
                assert(exc_sp >= exc_stack);
   1a422:	4b35      	ldr	r3, [pc, #212]	; (1a4f8 <mp_execute_bytecode+0xe00>)
   1a424:	4a35      	ldr	r2, [pc, #212]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a426:	4836      	ldr	r0, [pc, #216]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a428:	f240 519a 	movw	r1, #1434	; 0x59a
   1a42c:	f000 ffb6 	bl	1b39c <__assert_func>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a430:	38d0      	subs	r0, #208	; 0xd0
   1a432:	6831      	ldr	r1, [r6, #0]
   1a434:	f7f1 f970 	bl	b718 <mp_unary_op>
                switch (*ip++) {
   1a438:	4625      	mov	r5, r4
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a43a:	6030      	str	r0, [r6, #0]
                        DISPATCH();
   1a43c:	f7ff ba25 	b.w	1988a <mp_execute_bytecode+0x192>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a440:	f7f5 f9be 	bl	f7c0 <mp_obj_is_exception_instance>
   1a444:	b190      	cbz	r0, 1a46c <mp_execute_bytecode+0xd74>
                        RAISE(TOP());
   1a446:	f7e5 ff27 	bl	298 <nlr_pop>
   1a44a:	6830      	ldr	r0, [r6, #0]
   1a44c:	9009      	str	r0, [sp, #36]	; 0x24
   1a44e:	f7ff b98d 	b.w	1976c <mp_execute_bytecode+0x74>
                            RAISE(ret_value);
   1a452:	f7e5 ff21 	bl	298 <nlr_pop>
   1a456:	9807      	ldr	r0, [sp, #28]
   1a458:	9009      	str	r0, [sp, #36]	; 0x24
   1a45a:	f7ff b987 	b.w	1976c <mp_execute_bytecode+0x74>
                        assert(exc_sp >= exc_stack);
   1a45e:	4b26      	ldr	r3, [pc, #152]	; (1a4f8 <mp_execute_bytecode+0xe00>)
   1a460:	4a26      	ldr	r2, [pc, #152]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a462:	4827      	ldr	r0, [pc, #156]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a464:	f44f 7124 	mov.w	r1, #656	; 0x290
   1a468:	f000 ff98 	bl	1b39c <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a46c:	4b25      	ldr	r3, [pc, #148]	; (1a504 <mp_execute_bytecode+0xe0c>)
   1a46e:	4a23      	ldr	r2, [pc, #140]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a470:	4823      	ldr	r0, [pc, #140]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a472:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1a476:	f000 ff91 	bl	1b39c <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a47a:	4b22      	ldr	r3, [pc, #136]	; (1a504 <mp_execute_bytecode+0xe0c>)
   1a47c:	4a1f      	ldr	r2, [pc, #124]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a47e:	4820      	ldr	r0, [pc, #128]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a480:	f240 216e 	movw	r1, #622	; 0x26e
   1a484:	f000 ff8a 	bl	1b39c <__assert_func>
                    assert(exc_sp >= exc_stack);
   1a488:	4b1b      	ldr	r3, [pc, #108]	; (1a4f8 <mp_execute_bytecode+0xe00>)
   1a48a:	4a1c      	ldr	r2, [pc, #112]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a48c:	481c      	ldr	r0, [pc, #112]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a48e:	f240 21ff 	movw	r1, #767	; 0x2ff
   1a492:	f000 ff83 	bl	1b39c <__assert_func>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a496:	4b1c      	ldr	r3, [pc, #112]	; (1a508 <mp_execute_bytecode+0xe10>)
   1a498:	4a18      	ldr	r2, [pc, #96]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a49a:	4819      	ldr	r0, [pc, #100]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a49c:	f240 41ae 	movw	r1, #1198	; 0x4ae
   1a4a0:	f000 ff7c 	bl	1b39c <__assert_func>
                    assert(exc_sp == exc_stack - 1);
   1a4a4:	4b19      	ldr	r3, [pc, #100]	; (1a50c <mp_execute_bytecode+0xe14>)
   1a4a6:	4a15      	ldr	r2, [pc, #84]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a4a8:	4815      	ldr	r0, [pc, #84]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a4aa:	f240 414e 	movw	r1, #1102	; 0x44e
   1a4ae:	f000 ff75 	bl	1b39c <__assert_func>
                            assert(exc_sp >= exc_stack);
   1a4b2:	4b11      	ldr	r3, [pc, #68]	; (1a4f8 <mp_execute_bytecode+0xe00>)
   1a4b4:	4a11      	ldr	r2, [pc, #68]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a4b6:	4812      	ldr	r0, [pc, #72]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a4b8:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1a4bc:	f000 ff6e 	bl	1b39c <__assert_func>
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   1a4c0:	4913      	ldr	r1, [pc, #76]	; (1a510 <mp_execute_bytecode+0xe18>)
   1a4c2:	4814      	ldr	r0, [pc, #80]	; (1a514 <mp_execute_bytecode+0xe1c>)
   1a4c4:	f7f5 f836 	bl	f534 <mp_obj_new_exception_msg>
   1a4c8:	4604      	mov	r4, r0
                    nlr_pop();
   1a4ca:	f7e5 fee5 	bl	298 <nlr_pop>
                    fastn[0] = obj;
   1a4ce:	9b02      	ldr	r3, [sp, #8]
   1a4d0:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   1a4d4:	2002      	movs	r0, #2
                    fastn[0] = obj;
   1a4d6:	f8c8 4014 	str.w	r4, [r8, #20]
                    return MP_VM_RETURN_EXCEPTION;
   1a4da:	f7ff ba54 	b.w	19986 <mp_execute_bytecode+0x28e>
                    assert(exc_sp >= exc_stack);
   1a4de:	4b06      	ldr	r3, [pc, #24]	; (1a4f8 <mp_execute_bytecode+0xe00>)
   1a4e0:	4a06      	ldr	r2, [pc, #24]	; (1a4fc <mp_execute_bytecode+0xe04>)
   1a4e2:	4807      	ldr	r0, [pc, #28]	; (1a500 <mp_execute_bytecode+0xe08>)
   1a4e4:	f240 3105 	movw	r1, #773	; 0x305
   1a4e8:	f000 ff58 	bl	1b39c <__assert_func>
   1a4ec:	00020310 	.word	0x00020310
   1a4f0:	00022a88 	.word	0x00022a88
   1a4f4:	000205e0 	.word	0x000205e0
   1a4f8:	00022ae8 	.word	0x00022ae8
   1a4fc:	00022a74 	.word	0x00022a74
   1a500:	00022ad8 	.word	0x00022ad8
   1a504:	00022ab4 	.word	0x00022ab4
   1a508:	00022b30 	.word	0x00022b30
   1a50c:	00022b18 	.word	0x00022b18
   1a510:	00022b54 	.word	0x00022b54
   1a514:	00020694 	.word	0x00020694

0001a518 <mp_decode_uint>:
#else // don't print debugging info
#define DEBUG_PRINT (0)
#define DEBUG_printf(...) (void)0
#endif

mp_uint_t mp_decode_uint(const byte **ptr) {
   1a518:	b480      	push	{r7}
   1a51a:	b087      	sub	sp, #28
   1a51c:	af00      	add	r7, sp, #0
   1a51e:	6078      	str	r0, [r7, #4]
    mp_uint_t unum = 0;
   1a520:	2300      	movs	r3, #0
   1a522:	617b      	str	r3, [r7, #20]
    byte val;
    const byte *p = *ptr;
   1a524:	687b      	ldr	r3, [r7, #4]
   1a526:	681b      	ldr	r3, [r3, #0]
   1a528:	613b      	str	r3, [r7, #16]
    do {
        val = *p++;
   1a52a:	693b      	ldr	r3, [r7, #16]
   1a52c:	1c5a      	adds	r2, r3, #1
   1a52e:	613a      	str	r2, [r7, #16]
   1a530:	781b      	ldrb	r3, [r3, #0]
   1a532:	73fb      	strb	r3, [r7, #15]
        unum = (unum << 7) | (val & 0x7f);
   1a534:	697b      	ldr	r3, [r7, #20]
   1a536:	01da      	lsls	r2, r3, #7
   1a538:	7bfb      	ldrb	r3, [r7, #15]
   1a53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a53e:	4313      	orrs	r3, r2
   1a540:	617b      	str	r3, [r7, #20]
    } while ((val & 0x80) != 0);
   1a542:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1a546:	2b00      	cmp	r3, #0
   1a548:	dbef      	blt.n	1a52a <mp_decode_uint+0x12>
    *ptr = p;
   1a54a:	687b      	ldr	r3, [r7, #4]
   1a54c:	693a      	ldr	r2, [r7, #16]
   1a54e:	601a      	str	r2, [r3, #0]
    return unum;
   1a550:	697b      	ldr	r3, [r7, #20]
}
   1a552:	4618      	mov	r0, r3
   1a554:	371c      	adds	r7, #28
   1a556:	46bd      	mov	sp, r7
   1a558:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a55c:	4770      	bx	lr
   1a55e:	bf00      	nop

0001a560 <mp_decode_uint_value>:
// the caller doesn't need to increase the ptr argument.  If ptr is a local variable
// and the caller uses mp_decode_uint(&ptr) instead of this function, then the compiler
// must allocate a slot on the stack for ptr, and this slot cannot be reused for
// anything else in the function because the pointer may have been stored in a global
// and reused later in the function.
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1a560:	b580      	push	{r7, lr}
   1a562:	b082      	sub	sp, #8
   1a564:	af00      	add	r7, sp, #0
   1a566:	6078      	str	r0, [r7, #4]
    return mp_decode_uint(&ptr);
   1a568:	1d3b      	adds	r3, r7, #4
   1a56a:	4618      	mov	r0, r3
   1a56c:	f7ff ffd4 	bl	1a518 <mp_decode_uint>
   1a570:	4603      	mov	r3, r0
}
   1a572:	4618      	mov	r0, r3
   1a574:	3708      	adds	r7, #8
   1a576:	46bd      	mov	sp, r7
   1a578:	bd80      	pop	{r7, pc}
   1a57a:	bf00      	nop

0001a57c <mp_decode_uint_skip>:

// This function is used to help reduce stack usage at the caller, for the case when
// the caller doesn't need the actual value and just wants to skip over it.
const byte *mp_decode_uint_skip(const byte *ptr) {
   1a57c:	b480      	push	{r7}
   1a57e:	b083      	sub	sp, #12
   1a580:	af00      	add	r7, sp, #0
   1a582:	6078      	str	r0, [r7, #4]
    while ((*ptr++) & 0x80) {
   1a584:	bf00      	nop
   1a586:	687b      	ldr	r3, [r7, #4]
   1a588:	1c5a      	adds	r2, r3, #1
   1a58a:	607a      	str	r2, [r7, #4]
   1a58c:	781b      	ldrb	r3, [r3, #0]
   1a58e:	b25b      	sxtb	r3, r3
   1a590:	2b00      	cmp	r3, #0
   1a592:	dbf8      	blt.n	1a586 <mp_decode_uint_skip+0xa>
    }
    return ptr;
   1a594:	687b      	ldr	r3, [r7, #4]
}
   1a596:	4618      	mov	r0, r3
   1a598:	370c      	adds	r7, #12
   1a59a:	46bd      	mov	sp, r7
   1a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a5a0:	4770      	bx	lr
   1a5a2:	bf00      	nop

0001a5a4 <fun_pos_args_mismatch>:

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1a5a4:	b580      	push	{r7, lr}
   1a5a6:	b084      	sub	sp, #16
   1a5a8:	af00      	add	r7, sp, #0
   1a5aa:	60f8      	str	r0, [r7, #12]
   1a5ac:	60b9      	str	r1, [r7, #8]
   1a5ae:	607a      	str	r2, [r7, #4]
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
    // generic message, used also for other argument issues
    (void)f;
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
   1a5b0:	f7f2 fe12 	bl	d1d8 <mp_arg_error_terse_mismatch>

0001a5b4 <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1a5b4:	b590      	push	{r4, r7, lr}
   1a5b6:	b09b      	sub	sp, #108	; 0x6c
   1a5b8:	af00      	add	r7, sp, #0
   1a5ba:	60f8      	str	r0, [r7, #12]
   1a5bc:	60b9      	str	r1, [r7, #8]
   1a5be:	607a      	str	r2, [r7, #4]
   1a5c0:	603b      	str	r3, [r7, #0]
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   1a5c2:	68fb      	ldr	r3, [r7, #12]
   1a5c4:	681b      	ldr	r3, [r3, #0]
   1a5c6:	637b      	str	r3, [r7, #52]	; 0x34

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   1a5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a5ca:	689b      	ldr	r3, [r3, #8]
   1a5cc:	68fa      	ldr	r2, [r7, #12]
   1a5ce:	6852      	ldr	r2, [r2, #4]
   1a5d0:	441a      	add	r2, r3
   1a5d2:	68fb      	ldr	r3, [r7, #12]
   1a5d4:	605a      	str	r2, [r3, #4]
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   1a5d6:	68fb      	ldr	r3, [r7, #12]
   1a5d8:	3304      	adds	r3, #4
   1a5da:	4618      	mov	r0, r3
   1a5dc:	f7ff ff9c 	bl	1a518 <mp_decode_uint>
   1a5e0:	6338      	str	r0, [r7, #48]	; 0x30
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   1a5e2:	68fb      	ldr	r3, [r7, #12]
   1a5e4:	685b      	ldr	r3, [r3, #4]
   1a5e6:	4618      	mov	r0, r3
   1a5e8:	f7ff ffc8 	bl	1a57c <mp_decode_uint_skip>
   1a5ec:	4602      	mov	r2, r0
   1a5ee:	68fb      	ldr	r3, [r7, #12]
   1a5f0:	605a      	str	r2, [r3, #4]
    size_t scope_flags = *code_state->ip++;
   1a5f2:	68fb      	ldr	r3, [r7, #12]
   1a5f4:	685b      	ldr	r3, [r3, #4]
   1a5f6:	1c59      	adds	r1, r3, #1
   1a5f8:	68fa      	ldr	r2, [r7, #12]
   1a5fa:	6051      	str	r1, [r2, #4]
   1a5fc:	781b      	ldrb	r3, [r3, #0]
   1a5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t n_pos_args = *code_state->ip++;
   1a600:	68fb      	ldr	r3, [r7, #12]
   1a602:	685b      	ldr	r3, [r3, #4]
   1a604:	1c59      	adds	r1, r3, #1
   1a606:	68fa      	ldr	r2, [r7, #12]
   1a608:	6051      	str	r1, [r2, #4]
   1a60a:	781b      	ldrb	r3, [r3, #0]
   1a60c:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t n_kwonly_args = *code_state->ip++;
   1a60e:	68fb      	ldr	r3, [r7, #12]
   1a610:	685b      	ldr	r3, [r3, #4]
   1a612:	1c59      	adds	r1, r3, #1
   1a614:	68fa      	ldr	r2, [r7, #12]
   1a616:	6051      	str	r1, [r2, #4]
   1a618:	781b      	ldrb	r3, [r3, #0]
   1a61a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_def_pos_args = *code_state->ip++;
   1a61c:	68fb      	ldr	r3, [r7, #12]
   1a61e:	685b      	ldr	r3, [r3, #4]
   1a620:	1c59      	adds	r1, r3, #1
   1a622:	68fa      	ldr	r2, [r7, #12]
   1a624:	6051      	str	r1, [r2, #4]
   1a626:	781b      	ldrb	r3, [r3, #0]
   1a628:	623b      	str	r3, [r7, #32]

    code_state->sp = &code_state->state[0] - 1;
   1a62a:	68fb      	ldr	r3, [r7, #12]
   1a62c:	3314      	adds	r3, #20
   1a62e:	1f1a      	subs	r2, r3, #4
   1a630:	68fb      	ldr	r3, [r7, #12]
   1a632:	609a      	str	r2, [r3, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   1a634:	68fb      	ldr	r3, [r7, #12]
   1a636:	f103 0214 	add.w	r2, r3, #20
   1a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a63c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a640:	3b03      	subs	r3, #3
   1a642:	009b      	lsls	r3, r3, #2
   1a644:	441a      	add	r2, r3
   1a646:	68fb      	ldr	r3, [r7, #12]
   1a648:	60da      	str	r2, [r3, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   1a64a:	68fb      	ldr	r3, [r7, #12]
   1a64c:	f103 0014 	add.w	r0, r3, #20
   1a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a652:	009b      	lsls	r3, r3, #2
   1a654:	461a      	mov	r2, r3
   1a656:	2100      	movs	r1, #0
   1a658:	f001 fbf8 	bl	1be4c <memset>

    const mp_obj_t *kwargs = args + n_args;
   1a65c:	68bb      	ldr	r3, [r7, #8]
   1a65e:	009b      	lsls	r3, r3, #2
   1a660:	683a      	ldr	r2, [r7, #0]
   1a662:	4413      	add	r3, r2
   1a664:	61fb      	str	r3, [r7, #28]

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   1a666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a66a:	1ad2      	subs	r2, r2, r3
   1a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a66e:	1ad3      	subs	r3, r2, r3
   1a670:	3b01      	subs	r3, #1
   1a672:	3304      	adds	r3, #4
   1a674:	009b      	lsls	r3, r3, #2
   1a676:	68fa      	ldr	r2, [r7, #12]
   1a678:	4413      	add	r3, r2
   1a67a:	3304      	adds	r3, #4
   1a67c:	667b      	str	r3, [r7, #100]	; 0x64

    // check positional arguments

    if (n_args > n_pos_args) {
   1a67e:	68ba      	ldr	r2, [r7, #8]
   1a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a682:	429a      	cmp	r2, r3
   1a684:	d91b      	bls.n	1a6be <mp_setup_code_state+0x10a>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   1a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a688:	f003 0301 	and.w	r3, r3, #1
   1a68c:	2b00      	cmp	r3, #0
   1a68e:	d104      	bne.n	1a69a <mp_setup_code_state+0xe6>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   1a690:	68ba      	ldr	r2, [r7, #8]
   1a692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a694:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a696:	f7ff ff85 	bl	1a5a4 <fun_pos_args_mismatch>
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   1a69a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1a69c:	1f23      	subs	r3, r4, #4
   1a69e:	667b      	str	r3, [r7, #100]	; 0x64
   1a6a0:	68ba      	ldr	r2, [r7, #8]
   1a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6a4:	1ad0      	subs	r0, r2, r3
   1a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6a8:	009b      	lsls	r3, r3, #2
   1a6aa:	683a      	ldr	r2, [r7, #0]
   1a6ac:	4413      	add	r3, r2
   1a6ae:	4619      	mov	r1, r3
   1a6b0:	f7fb fb78 	bl	15da4 <mp_obj_new_tuple>
   1a6b4:	4603      	mov	r3, r0
   1a6b6:	6023      	str	r3, [r4, #0]
        n_args = n_pos_args;
   1a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6ba:	60bb      	str	r3, [r7, #8]
   1a6bc:	e03c      	b.n	1a738 <mp_setup_code_state+0x184>
    } else {
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   1a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a6c0:	f003 0301 	and.w	r3, r3, #1
   1a6c4:	2b00      	cmp	r3, #0
   1a6c6:	d004      	beq.n	1a6d2 <mp_setup_code_state+0x11e>
            DEBUG_printf("passing empty tuple as *args\n");
            *var_pos_kw_args-- = mp_const_empty_tuple;
   1a6c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a6ca:	1f1a      	subs	r2, r3, #4
   1a6cc:	667a      	str	r2, [r7, #100]	; 0x64
   1a6ce:	4aa6      	ldr	r2, [pc, #664]	; (1a968 <mp_setup_code_state+0x3b4>)
   1a6d0:	601a      	str	r2, [r3, #0]
        }
        // Apply processing and check below only if we don't have kwargs,
        // otherwise, kw handling code below has own extensive checks.
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   1a6d2:	687b      	ldr	r3, [r7, #4]
   1a6d4:	2b00      	cmp	r3, #0
   1a6d6:	d12f      	bne.n	1a738 <mp_setup_code_state+0x184>
   1a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a6da:	f003 0308 	and.w	r3, r3, #8
   1a6de:	2b00      	cmp	r3, #0
   1a6e0:	d12a      	bne.n	1a738 <mp_setup_code_state+0x184>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   1a6e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a6e4:	6a3b      	ldr	r3, [r7, #32]
   1a6e6:	1ad2      	subs	r2, r2, r3
   1a6e8:	68bb      	ldr	r3, [r7, #8]
   1a6ea:	429a      	cmp	r2, r3
   1a6ec:	d81c      	bhi.n	1a728 <mp_setup_code_state+0x174>
                // given enough arguments, but may need to use some default arguments
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a6ee:	68bb      	ldr	r3, [r7, #8]
   1a6f0:	663b      	str	r3, [r7, #96]	; 0x60
   1a6f2:	e014      	b.n	1a71e <mp_setup_code_state+0x16a>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   1a6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a6f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a6f8:	1ad3      	subs	r3, r2, r3
   1a6fa:	3b01      	subs	r3, #1
   1a6fc:	6a39      	ldr	r1, [r7, #32]
   1a6fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a700:	1a89      	subs	r1, r1, r2
   1a702:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a704:	4411      	add	r1, r2
   1a706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a708:	3104      	adds	r1, #4
   1a70a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a70e:	68f9      	ldr	r1, [r7, #12]
   1a710:	3304      	adds	r3, #4
   1a712:	009b      	lsls	r3, r3, #2
   1a714:	440b      	add	r3, r1
   1a716:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a71a:	3301      	adds	r3, #1
   1a71c:	663b      	str	r3, [r7, #96]	; 0x60
   1a71e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a722:	429a      	cmp	r2, r3
   1a724:	d3e6      	bcc.n	1a6f4 <mp_setup_code_state+0x140>
   1a726:	e007      	b.n	1a738 <mp_setup_code_state+0x184>
                }
            } else {
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   1a728:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a72a:	6a3b      	ldr	r3, [r7, #32]
   1a72c:	1ad3      	subs	r3, r2, r3
   1a72e:	68ba      	ldr	r2, [r7, #8]
   1a730:	4619      	mov	r1, r3
   1a732:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a734:	f7ff ff36 	bl	1a5a4 <fun_pos_args_mismatch>
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   1a738:	2300      	movs	r3, #0
   1a73a:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a73c:	e010      	b.n	1a760 <mp_setup_code_state+0x1ac>
        code_state->state[n_state - 1 - i] = args[i];
   1a73e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a742:	1ad3      	subs	r3, r2, r3
   1a744:	3b01      	subs	r3, #1
   1a746:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a748:	0092      	lsls	r2, r2, #2
   1a74a:	6839      	ldr	r1, [r7, #0]
   1a74c:	440a      	add	r2, r1
   1a74e:	6812      	ldr	r2, [r2, #0]
   1a750:	68f9      	ldr	r1, [r7, #12]
   1a752:	3304      	adds	r3, #4
   1a754:	009b      	lsls	r3, r3, #2
   1a756:	440b      	add	r3, r1
   1a758:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1a75a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a75c:	3301      	adds	r3, #1
   1a75e:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a760:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a762:	68bb      	ldr	r3, [r7, #8]
   1a764:	429a      	cmp	r2, r3
   1a766:	d3ea      	bcc.n	1a73e <mp_setup_code_state+0x18a>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a768:	687b      	ldr	r3, [r7, #4]
   1a76a:	2b00      	cmp	r3, #0
   1a76c:	d105      	bne.n	1a77a <mp_setup_code_state+0x1c6>
   1a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a770:	f003 0308 	and.w	r3, r3, #8
   1a774:	2b00      	cmp	r3, #0
   1a776:	f000 811a 	beq.w	1a9ae <mp_setup_code_state+0x3fa>
        DEBUG_printf("Initial args: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        mp_obj_t dict = MP_OBJ_NULL;
   1a77a:	2300      	movs	r3, #0
   1a77c:	65bb      	str	r3, [r7, #88]	; 0x58
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a780:	f003 0302 	and.w	r3, r3, #2
   1a784:	2b00      	cmp	r3, #0
   1a786:	d006      	beq.n	1a796 <mp_setup_code_state+0x1e2>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   1a788:	6878      	ldr	r0, [r7, #4]
   1a78a:	f7f4 fcb3 	bl	f0f4 <mp_obj_new_dict>
   1a78e:	65b8      	str	r0, [r7, #88]	; 0x58
            *var_pos_kw_args = dict;
   1a790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a792:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1a794:	601a      	str	r2, [r3, #0]
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   1a796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a798:	68db      	ldr	r3, [r3, #12]
   1a79a:	61bb      	str	r3, [r7, #24]

        for (size_t i = 0; i < n_kw; i++) {
   1a79c:	2300      	movs	r3, #0
   1a79e:	657b      	str	r3, [r7, #84]	; 0x54
   1a7a0:	e059      	b.n	1a856 <mp_setup_code_state+0x2a2>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   1a7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a7a4:	00db      	lsls	r3, r3, #3
   1a7a6:	69fa      	ldr	r2, [r7, #28]
   1a7a8:	4413      	add	r3, r2
   1a7aa:	681b      	ldr	r3, [r3, #0]
   1a7ac:	617b      	str	r3, [r7, #20]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a7ae:	2300      	movs	r3, #0
   1a7b0:	653b      	str	r3, [r7, #80]	; 0x50
   1a7b2:	e030      	b.n	1a816 <mp_setup_code_state+0x262>
                if (wanted_arg_name == arg_names[j]) {
   1a7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a7b6:	009b      	lsls	r3, r3, #2
   1a7b8:	69ba      	ldr	r2, [r7, #24]
   1a7ba:	4413      	add	r3, r2
   1a7bc:	681a      	ldr	r2, [r3, #0]
   1a7be:	697b      	ldr	r3, [r7, #20]
   1a7c0:	429a      	cmp	r2, r3
   1a7c2:	d125      	bne.n	1a810 <mp_setup_code_state+0x25c>
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   1a7c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a7c8:	1ad3      	subs	r3, r2, r3
   1a7ca:	3b01      	subs	r3, #1
   1a7cc:	68fa      	ldr	r2, [r7, #12]
   1a7ce:	3304      	adds	r3, #4
   1a7d0:	009b      	lsls	r3, r3, #2
   1a7d2:	4413      	add	r3, r2
   1a7d4:	685b      	ldr	r3, [r3, #4]
   1a7d6:	2b00      	cmp	r3, #0
   1a7d8:	d00a      	beq.n	1a7f0 <mp_setup_code_state+0x23c>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a7da:	697b      	ldr	r3, [r7, #20]
   1a7dc:	089b      	lsrs	r3, r3, #2
   1a7de:	461a      	mov	r2, r3
   1a7e0:	4962      	ldr	r1, [pc, #392]	; (1a96c <mp_setup_code_state+0x3b8>)
   1a7e2:	4863      	ldr	r0, [pc, #396]	; (1a970 <mp_setup_code_state+0x3bc>)
   1a7e4:	f7f4 ff06 	bl	f5f4 <mp_obj_new_exception_msg_varg>
   1a7e8:	4603      	mov	r3, r0
   1a7ea:	4618      	mov	r0, r3
   1a7ec:	f7e5 fd78 	bl	2e0 <nlr_jump>
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   1a7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a7f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a7f4:	1ad3      	subs	r3, r2, r3
   1a7f6:	3b01      	subs	r3, #1
   1a7f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a7fa:	00d2      	lsls	r2, r2, #3
   1a7fc:	3204      	adds	r2, #4
   1a7fe:	69f9      	ldr	r1, [r7, #28]
   1a800:	440a      	add	r2, r1
   1a802:	6812      	ldr	r2, [r2, #0]
   1a804:	68f9      	ldr	r1, [r7, #12]
   1a806:	3304      	adds	r3, #4
   1a808:	009b      	lsls	r3, r3, #2
   1a80a:	440b      	add	r3, r1
   1a80c:	605a      	str	r2, [r3, #4]
                    goto continue2;
   1a80e:	e01f      	b.n	1a850 <mp_setup_code_state+0x29c>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a812:	3301      	adds	r3, #1
   1a814:	653b      	str	r3, [r7, #80]	; 0x50
   1a816:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a81a:	441a      	add	r2, r3
   1a81c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a81e:	429a      	cmp	r2, r3
   1a820:	d8c8      	bhi.n	1a7b4 <mp_setup_code_state+0x200>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   1a822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a824:	f003 0302 	and.w	r3, r3, #2
   1a828:	2b00      	cmp	r3, #0
   1a82a:	d102      	bne.n	1a832 <mp_setup_code_state+0x27e>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    mp_raise_TypeError("unexpected keyword argument");
   1a82c:	4851      	ldr	r0, [pc, #324]	; (1a974 <mp_setup_code_state+0x3c0>)
   1a82e:	f7f2 fbb3 	bl	cf98 <mp_raise_TypeError>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   1a832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a834:	00db      	lsls	r3, r3, #3
   1a836:	69fa      	ldr	r2, [r7, #28]
   1a838:	4413      	add	r3, r2
   1a83a:	6819      	ldr	r1, [r3, #0]
   1a83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a83e:	00db      	lsls	r3, r3, #3
   1a840:	3304      	adds	r3, #4
   1a842:	69fa      	ldr	r2, [r7, #28]
   1a844:	4413      	add	r3, r2
   1a846:	681b      	ldr	r3, [r3, #0]
   1a848:	461a      	mov	r2, r3
   1a84a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1a84c:	f7f4 fc74 	bl	f138 <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   1a850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a852:	3301      	adds	r3, #1
   1a854:	657b      	str	r3, [r7, #84]	; 0x54
   1a856:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a858:	687b      	ldr	r3, [r7, #4]
   1a85a:	429a      	cmp	r2, r3
   1a85c:	d3a1      	bcc.n	1a7a2 <mp_setup_code_state+0x1ee>

        DEBUG_printf("Args with kws flattened: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   1a85e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a862:	1ad3      	subs	r3, r2, r3
   1a864:	3304      	adds	r3, #4
   1a866:	009b      	lsls	r3, r3, #2
   1a868:	68fa      	ldr	r2, [r7, #12]
   1a86a:	4413      	add	r3, r2
   1a86c:	3304      	adds	r3, #4
   1a86e:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   1a870:	6a3b      	ldr	r3, [r7, #32]
   1a872:	3b01      	subs	r3, #1
   1a874:	3304      	adds	r3, #4
   1a876:	009b      	lsls	r3, r3, #2
   1a878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a87a:	4413      	add	r3, r2
   1a87c:	64bb      	str	r3, [r7, #72]	; 0x48
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a87e:	6a3b      	ldr	r3, [r7, #32]
   1a880:	647b      	str	r3, [r7, #68]	; 0x44
   1a882:	e010      	b.n	1a8a6 <mp_setup_code_state+0x2f2>
            if (*d == MP_OBJ_NULL) {
   1a884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a886:	681b      	ldr	r3, [r3, #0]
   1a888:	2b00      	cmp	r3, #0
   1a88a:	d103      	bne.n	1a894 <mp_setup_code_state+0x2e0>
                *d = *s;
   1a88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a88e:	681a      	ldr	r2, [r3, #0]
   1a890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a892:	601a      	str	r2, [r3, #0]
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a896:	3b01      	subs	r3, #1
   1a898:	647b      	str	r3, [r7, #68]	; 0x44
   1a89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a89c:	3304      	adds	r3, #4
   1a89e:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a8a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a8a2:	3b04      	subs	r3, #4
   1a8a4:	64bb      	str	r3, [r7, #72]	; 0x48
   1a8a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a8a8:	2b00      	cmp	r3, #0
   1a8aa:	d1eb      	bne.n	1a884 <mp_setup_code_state+0x2d0>

        DEBUG_printf("Args after filling default positional: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
   1a8ac:	e018      	b.n	1a8e0 <mp_setup_code_state+0x32c>
            if (*d++ == MP_OBJ_NULL) {
   1a8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a8b0:	1d1a      	adds	r2, r3, #4
   1a8b2:	64fa      	str	r2, [r7, #76]	; 0x4c
   1a8b4:	681b      	ldr	r3, [r3, #0]
   1a8b6:	2b00      	cmp	r3, #0
   1a8b8:	d112      	bne.n	1a8e0 <mp_setup_code_state+0x32c>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a8bc:	3304      	adds	r3, #4
   1a8be:	009b      	lsls	r3, r3, #2
   1a8c0:	68fa      	ldr	r2, [r7, #12]
   1a8c2:	4413      	add	r3, r2
   1a8c4:	3304      	adds	r3, #4
   1a8c6:	461a      	mov	r2, r3
   1a8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a8ca:	1ad3      	subs	r3, r2, r3
   1a8cc:	109b      	asrs	r3, r3, #2
   1a8ce:	461a      	mov	r2, r3
   1a8d0:	4929      	ldr	r1, [pc, #164]	; (1a978 <mp_setup_code_state+0x3c4>)
   1a8d2:	4827      	ldr	r0, [pc, #156]	; (1a970 <mp_setup_code_state+0x3bc>)
   1a8d4:	f7f4 fe8e 	bl	f5f4 <mp_obj_new_exception_msg_varg>
   1a8d8:	4603      	mov	r3, r0
   1a8da:	4618      	mov	r0, r3
   1a8dc:	f7e5 fd00 	bl	2e0 <nlr_jump>
        while (d < &code_state->state[n_state]) {
   1a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a8e2:	3304      	adds	r3, #4
   1a8e4:	009b      	lsls	r3, r3, #2
   1a8e6:	68fa      	ldr	r2, [r7, #12]
   1a8e8:	4413      	add	r3, r2
   1a8ea:	1d1a      	adds	r2, r3, #4
   1a8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a8ee:	429a      	cmp	r2, r3
   1a8f0:	d8dd      	bhi.n	1a8ae <mp_setup_code_state+0x2fa>
            }
        }

        // Check that all mandatory keyword args are specified
        // Fill in default kw args if we have them
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a8f2:	2300      	movs	r3, #0
   1a8f4:	643b      	str	r3, [r7, #64]	; 0x40
   1a8f6:	e055      	b.n	1a9a4 <mp_setup_code_state+0x3f0>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   1a8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a8fc:	1ad2      	subs	r2, r2, r3
   1a8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a900:	1ad3      	subs	r3, r2, r3
   1a902:	3b01      	subs	r3, #1
   1a904:	68fa      	ldr	r2, [r7, #12]
   1a906:	3304      	adds	r3, #4
   1a908:	009b      	lsls	r3, r3, #2
   1a90a:	4413      	add	r3, r2
   1a90c:	685b      	ldr	r3, [r3, #4]
   1a90e:	2b00      	cmp	r3, #0
   1a910:	d145      	bne.n	1a99e <mp_setup_code_state+0x3ea>
                mp_map_elem_t *elem = NULL;
   1a912:	2300      	movs	r3, #0
   1a914:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a918:	f003 0308 	and.w	r3, r3, #8
   1a91c:	2b00      	cmp	r3, #0
   1a91e:	d011      	beq.n	1a944 <mp_setup_code_state+0x390>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   1a920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a922:	6a3a      	ldr	r2, [r7, #32]
   1a924:	3204      	adds	r2, #4
   1a926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a92a:	1d18      	adds	r0, r3, #4
   1a92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a930:	4413      	add	r3, r2
   1a932:	009b      	lsls	r3, r3, #2
   1a934:	69ba      	ldr	r2, [r7, #24]
   1a936:	4413      	add	r3, r2
   1a938:	681b      	ldr	r3, [r3, #0]
   1a93a:	2200      	movs	r2, #0
   1a93c:	4619      	mov	r1, r3
   1a93e:	f7f2 fd9b 	bl	d478 <mp_map_lookup>
   1a942:	63f8      	str	r0, [r7, #60]	; 0x3c
                }
                if (elem != NULL) {
   1a944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a946:	2b00      	cmp	r3, #0
   1a948:	d018      	beq.n	1a97c <mp_setup_code_state+0x3c8>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   1a94a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a94e:	1ad2      	subs	r2, r2, r3
   1a950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a952:	1ad3      	subs	r3, r2, r3
   1a954:	3b01      	subs	r3, #1
   1a956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a958:	6852      	ldr	r2, [r2, #4]
   1a95a:	68f9      	ldr	r1, [r7, #12]
   1a95c:	3304      	adds	r3, #4
   1a95e:	009b      	lsls	r3, r3, #2
   1a960:	440b      	add	r3, r1
   1a962:	605a      	str	r2, [r3, #4]
   1a964:	e01b      	b.n	1a99e <mp_setup_code_state+0x3ea>
   1a966:	bf00      	nop
   1a968:	00021df0 	.word	0x00021df0
   1a96c:	00022b90 	.word	0x00022b90
   1a970:	00020748 	.word	0x00020748
   1a974:	00022bc0 	.word	0x00022bc0
   1a978:	00022bdc 	.word	0x00022bdc
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a97c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a980:	4413      	add	r3, r2
   1a982:	009b      	lsls	r3, r3, #2
   1a984:	69ba      	ldr	r2, [r7, #24]
   1a986:	4413      	add	r3, r2
   1a988:	681b      	ldr	r3, [r3, #0]
   1a98a:	089b      	lsrs	r3, r3, #2
   1a98c:	461a      	mov	r2, r3
   1a98e:	4928      	ldr	r1, [pc, #160]	; (1aa30 <mp_setup_code_state+0x47c>)
   1a990:	4828      	ldr	r0, [pc, #160]	; (1aa34 <mp_setup_code_state+0x480>)
   1a992:	f7f4 fe2f 	bl	f5f4 <mp_obj_new_exception_msg_varg>
   1a996:	4603      	mov	r3, r0
   1a998:	4618      	mov	r0, r3
   1a99a:	f7e5 fca1 	bl	2e0 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a9a0:	3301      	adds	r3, #1
   1a9a2:	643b      	str	r3, [r7, #64]	; 0x40
   1a9a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a9a8:	429a      	cmp	r2, r3
   1a9aa:	d3a5      	bcc.n	1a8f8 <mp_setup_code_state+0x344>
    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a9ac:	e010      	b.n	1a9d0 <mp_setup_code_state+0x41c>
            }
        }

    } else {
        // no keyword arguments given
        if (n_kwonly_args != 0) {
   1a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a9b0:	2b00      	cmp	r3, #0
   1a9b2:	d002      	beq.n	1a9ba <mp_setup_code_state+0x406>
            mp_raise_TypeError("function missing keyword-only argument");
   1a9b4:	4820      	ldr	r0, [pc, #128]	; (1aa38 <mp_setup_code_state+0x484>)
   1a9b6:	f7f2 faef 	bl	cf98 <mp_raise_TypeError>
        }
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a9bc:	f003 0302 	and.w	r3, r3, #2
   1a9c0:	2b00      	cmp	r3, #0
   1a9c2:	d005      	beq.n	1a9d0 <mp_setup_code_state+0x41c>
            *var_pos_kw_args = mp_obj_new_dict(0);
   1a9c4:	2000      	movs	r0, #0
   1a9c6:	f7f4 fb95 	bl	f0f4 <mp_obj_new_dict>
   1a9ca:	4602      	mov	r2, r0
   1a9cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a9ce:	601a      	str	r2, [r3, #0]
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   1a9d0:	68fb      	ldr	r3, [r7, #12]
   1a9d2:	685b      	ldr	r3, [r3, #4]
   1a9d4:	63bb      	str	r3, [r7, #56]	; 0x38

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   1a9d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a9d8:	f7ff fdc2 	bl	1a560 <mp_decode_uint_value>
   1a9dc:	4602      	mov	r2, r0
   1a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a9e0:	4413      	add	r3, r2
   1a9e2:	63bb      	str	r3, [r7, #56]	; 0x38

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   1a9e4:	e015      	b.n	1aa12 <mp_setup_code_state+0x45e>
        code_state->state[n_state - 1 - local_num] =
   1a9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9e8:	693b      	ldr	r3, [r7, #16]
   1a9ea:	1ad3      	subs	r3, r2, r3
   1a9ec:	1e5c      	subs	r4, r3, #1
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   1a9ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9f0:	693b      	ldr	r3, [r7, #16]
   1a9f2:	1ad3      	subs	r3, r2, r3
   1a9f4:	3b01      	subs	r3, #1
   1a9f6:	68fa      	ldr	r2, [r7, #12]
   1a9f8:	3304      	adds	r3, #4
   1a9fa:	009b      	lsls	r3, r3, #2
   1a9fc:	4413      	add	r3, r2
   1a9fe:	685b      	ldr	r3, [r3, #4]
   1aa00:	4618      	mov	r0, r3
   1aa02:	f7f3 fc47 	bl	e294 <mp_obj_new_cell>
   1aa06:	4601      	mov	r1, r0
        code_state->state[n_state - 1 - local_num] =
   1aa08:	68fa      	ldr	r2, [r7, #12]
   1aa0a:	1d23      	adds	r3, r4, #4
   1aa0c:	009b      	lsls	r3, r3, #2
   1aa0e:	4413      	add	r3, r2
   1aa10:	6059      	str	r1, [r3, #4]
    while ((local_num = *ip++) != 255) {
   1aa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aa14:	1c5a      	adds	r2, r3, #1
   1aa16:	63ba      	str	r2, [r7, #56]	; 0x38
   1aa18:	781b      	ldrb	r3, [r3, #0]
   1aa1a:	613b      	str	r3, [r7, #16]
   1aa1c:	693b      	ldr	r3, [r7, #16]
   1aa1e:	2bff      	cmp	r3, #255	; 0xff
   1aa20:	d1e1      	bne.n	1a9e6 <mp_setup_code_state+0x432>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   1aa22:	68fb      	ldr	r3, [r7, #12]
   1aa24:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1aa26:	605a      	str	r2, [r3, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
    dump_args(code_state->state, n_state);
}
   1aa28:	bf00      	nop
   1aa2a:	376c      	adds	r7, #108	; 0x6c
   1aa2c:	46bd      	mov	sp, r7
   1aa2e:	bd90      	pop	{r4, r7, pc}
   1aa30:	00022c10 	.word	0x00022c10
   1aa34:	00020748 	.word	0x00020748
   1aa38:	00022c40 	.word	0x00022c40

0001aa3c <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   1aa3c:	b580      	push	{r7, lr}
   1aa3e:	b084      	sub	sp, #16
   1aa40:	af00      	add	r7, sp, #0
   1aa42:	6078      	str	r0, [r7, #4]
   1aa44:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   1aa46:	2300      	movs	r3, #0
   1aa48:	60fb      	str	r3, [r7, #12]
   1aa4a:	e00e      	b.n	1aa6a <str_startswith_word+0x2e>
        if (str[i] != head[i]) {
   1aa4c:	687a      	ldr	r2, [r7, #4]
   1aa4e:	68fb      	ldr	r3, [r7, #12]
   1aa50:	4413      	add	r3, r2
   1aa52:	781a      	ldrb	r2, [r3, #0]
   1aa54:	6839      	ldr	r1, [r7, #0]
   1aa56:	68fb      	ldr	r3, [r7, #12]
   1aa58:	440b      	add	r3, r1
   1aa5a:	781b      	ldrb	r3, [r3, #0]
   1aa5c:	429a      	cmp	r2, r3
   1aa5e:	d001      	beq.n	1aa64 <str_startswith_word+0x28>
            return false;
   1aa60:	2300      	movs	r3, #0
   1aa62:	e02d      	b.n	1aac0 <str_startswith_word+0x84>
    for (i = 0; str[i] && head[i]; i++) {
   1aa64:	68fb      	ldr	r3, [r7, #12]
   1aa66:	3301      	adds	r3, #1
   1aa68:	60fb      	str	r3, [r7, #12]
   1aa6a:	687a      	ldr	r2, [r7, #4]
   1aa6c:	68fb      	ldr	r3, [r7, #12]
   1aa6e:	4413      	add	r3, r2
   1aa70:	781b      	ldrb	r3, [r3, #0]
   1aa72:	2b00      	cmp	r3, #0
   1aa74:	d005      	beq.n	1aa82 <str_startswith_word+0x46>
   1aa76:	683a      	ldr	r2, [r7, #0]
   1aa78:	68fb      	ldr	r3, [r7, #12]
   1aa7a:	4413      	add	r3, r2
   1aa7c:	781b      	ldrb	r3, [r3, #0]
   1aa7e:	2b00      	cmp	r3, #0
   1aa80:	d1e4      	bne.n	1aa4c <str_startswith_word+0x10>
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   1aa82:	683a      	ldr	r2, [r7, #0]
   1aa84:	68fb      	ldr	r3, [r7, #12]
   1aa86:	4413      	add	r3, r2
   1aa88:	781b      	ldrb	r3, [r3, #0]
   1aa8a:	2b00      	cmp	r3, #0
   1aa8c:	d114      	bne.n	1aab8 <str_startswith_word+0x7c>
   1aa8e:	687a      	ldr	r2, [r7, #4]
   1aa90:	68fb      	ldr	r3, [r7, #12]
   1aa92:	4413      	add	r3, r2
   1aa94:	781b      	ldrb	r3, [r3, #0]
   1aa96:	2b00      	cmp	r3, #0
   1aa98:	d00c      	beq.n	1aab4 <str_startswith_word+0x78>
   1aa9a:	687a      	ldr	r2, [r7, #4]
   1aa9c:	68fb      	ldr	r3, [r7, #12]
   1aa9e:	4413      	add	r3, r2
   1aaa0:	781b      	ldrb	r3, [r3, #0]
   1aaa2:	4618      	mov	r0, r3
   1aaa4:	f7e7 fcf2 	bl	248c <unichar_isident>
   1aaa8:	4603      	mov	r3, r0
   1aaaa:	f083 0301 	eor.w	r3, r3, #1
   1aaae:	b2db      	uxtb	r3, r3
   1aab0:	2b00      	cmp	r3, #0
   1aab2:	d001      	beq.n	1aab8 <str_startswith_word+0x7c>
   1aab4:	2301      	movs	r3, #1
   1aab6:	e000      	b.n	1aaba <str_startswith_word+0x7e>
   1aab8:	2300      	movs	r3, #0
   1aaba:	f003 0301 	and.w	r3, r3, #1
   1aabe:	b2db      	uxtb	r3, r3
}
   1aac0:	4618      	mov	r0, r3
   1aac2:	3710      	adds	r7, #16
   1aac4:	46bd      	mov	sp, r7
   1aac6:	bd80      	pop	{r7, pc}

0001aac8 <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   1aac8:	b580      	push	{r7, lr}
   1aaca:	b088      	sub	sp, #32
   1aacc:	af00      	add	r7, sp, #0
   1aace:	6078      	str	r0, [r7, #4]
    // check for blank input
    if (input[0] == '\0') {
   1aad0:	687b      	ldr	r3, [r7, #4]
   1aad2:	781b      	ldrb	r3, [r3, #0]
   1aad4:	2b00      	cmp	r3, #0
   1aad6:	d101      	bne.n	1aadc <mp_repl_continue_with_input+0x14>
        return false;
   1aad8:	2300      	movs	r3, #0
   1aada:	e10c      	b.n	1acf6 <mp_repl_continue_with_input+0x22e>
    }

    // check if input starts with a certain keyword
    bool starts_with_compound_keyword =
           input[0] == '@'
   1aadc:	687b      	ldr	r3, [r7, #4]
   1aade:	781b      	ldrb	r3, [r3, #0]
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   1aae0:	2b40      	cmp	r3, #64	; 0x40
   1aae2:	d030      	beq.n	1ab46 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "if")
   1aae4:	4986      	ldr	r1, [pc, #536]	; (1ad00 <mp_repl_continue_with_input+0x238>)
   1aae6:	6878      	ldr	r0, [r7, #4]
   1aae8:	f7ff ffa8 	bl	1aa3c <str_startswith_word>
   1aaec:	4603      	mov	r3, r0
   1aaee:	2b00      	cmp	r3, #0
   1aaf0:	d129      	bne.n	1ab46 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "while")
   1aaf2:	4984      	ldr	r1, [pc, #528]	; (1ad04 <mp_repl_continue_with_input+0x23c>)
   1aaf4:	6878      	ldr	r0, [r7, #4]
   1aaf6:	f7ff ffa1 	bl	1aa3c <str_startswith_word>
   1aafa:	4603      	mov	r3, r0
   1aafc:	2b00      	cmp	r3, #0
   1aafe:	d122      	bne.n	1ab46 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "for")
   1ab00:	4981      	ldr	r1, [pc, #516]	; (1ad08 <mp_repl_continue_with_input+0x240>)
   1ab02:	6878      	ldr	r0, [r7, #4]
   1ab04:	f7ff ff9a 	bl	1aa3c <str_startswith_word>
   1ab08:	4603      	mov	r3, r0
   1ab0a:	2b00      	cmp	r3, #0
   1ab0c:	d11b      	bne.n	1ab46 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "try")
   1ab0e:	497f      	ldr	r1, [pc, #508]	; (1ad0c <mp_repl_continue_with_input+0x244>)
   1ab10:	6878      	ldr	r0, [r7, #4]
   1ab12:	f7ff ff93 	bl	1aa3c <str_startswith_word>
   1ab16:	4603      	mov	r3, r0
   1ab18:	2b00      	cmp	r3, #0
   1ab1a:	d114      	bne.n	1ab46 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "with")
   1ab1c:	497c      	ldr	r1, [pc, #496]	; (1ad10 <mp_repl_continue_with_input+0x248>)
   1ab1e:	6878      	ldr	r0, [r7, #4]
   1ab20:	f7ff ff8c 	bl	1aa3c <str_startswith_word>
   1ab24:	4603      	mov	r3, r0
   1ab26:	2b00      	cmp	r3, #0
   1ab28:	d10d      	bne.n	1ab46 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "def")
   1ab2a:	497a      	ldr	r1, [pc, #488]	; (1ad14 <mp_repl_continue_with_input+0x24c>)
   1ab2c:	6878      	ldr	r0, [r7, #4]
   1ab2e:	f7ff ff85 	bl	1aa3c <str_startswith_word>
   1ab32:	4603      	mov	r3, r0
   1ab34:	2b00      	cmp	r3, #0
   1ab36:	d106      	bne.n	1ab46 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "class")
   1ab38:	4977      	ldr	r1, [pc, #476]	; (1ad18 <mp_repl_continue_with_input+0x250>)
   1ab3a:	6878      	ldr	r0, [r7, #4]
   1ab3c:	f7ff ff7e 	bl	1aa3c <str_startswith_word>
   1ab40:	4603      	mov	r3, r0
   1ab42:	2b00      	cmp	r3, #0
   1ab44:	d001      	beq.n	1ab4a <mp_repl_continue_with_input+0x82>
   1ab46:	2301      	movs	r3, #1
   1ab48:	e000      	b.n	1ab4c <mp_repl_continue_with_input+0x84>
   1ab4a:	2300      	movs	r3, #0
    bool starts_with_compound_keyword =
   1ab4c:	72fb      	strb	r3, [r7, #11]
   1ab4e:	7afb      	ldrb	r3, [r7, #11]
   1ab50:	f003 0301 	and.w	r3, r3, #1
   1ab54:	72fb      	strb	r3, [r7, #11]
    #define Q_NONE (0)
    #define Q_1_SINGLE (1)
    #define Q_1_DOUBLE (2)
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
   1ab56:	2300      	movs	r3, #0
   1ab58:	61fb      	str	r3, [r7, #28]
    int n_brack = 0;
   1ab5a:	2300      	movs	r3, #0
   1ab5c:	61bb      	str	r3, [r7, #24]
    int n_brace = 0;
   1ab5e:	2300      	movs	r3, #0
   1ab60:	617b      	str	r3, [r7, #20]
    int in_quote = Q_NONE;
   1ab62:	2300      	movs	r3, #0
   1ab64:	613b      	str	r3, [r7, #16]
    const char *i;
    for (i = input; *i; i++) {
   1ab66:	687b      	ldr	r3, [r7, #4]
   1ab68:	60fb      	str	r3, [r7, #12]
   1ab6a:	e097      	b.n	1ac9c <mp_repl_continue_with_input+0x1d4>
        if (*i == '\'') {
   1ab6c:	68fb      	ldr	r3, [r7, #12]
   1ab6e:	781b      	ldrb	r3, [r3, #0]
   1ab70:	2b27      	cmp	r3, #39	; 0x27
   1ab72:	d122      	bne.n	1abba <mp_repl_continue_with_input+0xf2>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   1ab74:	693b      	ldr	r3, [r7, #16]
   1ab76:	2b00      	cmp	r3, #0
   1ab78:	d002      	beq.n	1ab80 <mp_repl_continue_with_input+0xb8>
   1ab7a:	693b      	ldr	r3, [r7, #16]
   1ab7c:	2b03      	cmp	r3, #3
   1ab7e:	d111      	bne.n	1aba4 <mp_repl_continue_with_input+0xdc>
   1ab80:	68fb      	ldr	r3, [r7, #12]
   1ab82:	3301      	adds	r3, #1
   1ab84:	781b      	ldrb	r3, [r3, #0]
   1ab86:	2b27      	cmp	r3, #39	; 0x27
   1ab88:	d10c      	bne.n	1aba4 <mp_repl_continue_with_input+0xdc>
   1ab8a:	68fb      	ldr	r3, [r7, #12]
   1ab8c:	3302      	adds	r3, #2
   1ab8e:	781b      	ldrb	r3, [r3, #0]
   1ab90:	2b27      	cmp	r3, #39	; 0x27
   1ab92:	d107      	bne.n	1aba4 <mp_repl_continue_with_input+0xdc>
                i += 2;
   1ab94:	68fb      	ldr	r3, [r7, #12]
   1ab96:	3302      	adds	r3, #2
   1ab98:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_SINGLE - in_quote;
   1ab9a:	693b      	ldr	r3, [r7, #16]
   1ab9c:	f1c3 0303 	rsb	r3, r3, #3
   1aba0:	613b      	str	r3, [r7, #16]
   1aba2:	e078      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   1aba4:	693b      	ldr	r3, [r7, #16]
   1aba6:	2b00      	cmp	r3, #0
   1aba8:	d002      	beq.n	1abb0 <mp_repl_continue_with_input+0xe8>
   1abaa:	693b      	ldr	r3, [r7, #16]
   1abac:	2b01      	cmp	r3, #1
   1abae:	d172      	bne.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_SINGLE - in_quote;
   1abb0:	693b      	ldr	r3, [r7, #16]
   1abb2:	f1c3 0301 	rsb	r3, r3, #1
   1abb6:	613b      	str	r3, [r7, #16]
   1abb8:	e06d      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '"') {
   1abba:	68fb      	ldr	r3, [r7, #12]
   1abbc:	781b      	ldrb	r3, [r3, #0]
   1abbe:	2b22      	cmp	r3, #34	; 0x22
   1abc0:	d122      	bne.n	1ac08 <mp_repl_continue_with_input+0x140>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   1abc2:	693b      	ldr	r3, [r7, #16]
   1abc4:	2b00      	cmp	r3, #0
   1abc6:	d002      	beq.n	1abce <mp_repl_continue_with_input+0x106>
   1abc8:	693b      	ldr	r3, [r7, #16]
   1abca:	2b04      	cmp	r3, #4
   1abcc:	d111      	bne.n	1abf2 <mp_repl_continue_with_input+0x12a>
   1abce:	68fb      	ldr	r3, [r7, #12]
   1abd0:	3301      	adds	r3, #1
   1abd2:	781b      	ldrb	r3, [r3, #0]
   1abd4:	2b22      	cmp	r3, #34	; 0x22
   1abd6:	d10c      	bne.n	1abf2 <mp_repl_continue_with_input+0x12a>
   1abd8:	68fb      	ldr	r3, [r7, #12]
   1abda:	3302      	adds	r3, #2
   1abdc:	781b      	ldrb	r3, [r3, #0]
   1abde:	2b22      	cmp	r3, #34	; 0x22
   1abe0:	d107      	bne.n	1abf2 <mp_repl_continue_with_input+0x12a>
                i += 2;
   1abe2:	68fb      	ldr	r3, [r7, #12]
   1abe4:	3302      	adds	r3, #2
   1abe6:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_DOUBLE - in_quote;
   1abe8:	693b      	ldr	r3, [r7, #16]
   1abea:	f1c3 0304 	rsb	r3, r3, #4
   1abee:	613b      	str	r3, [r7, #16]
   1abf0:	e051      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   1abf2:	693b      	ldr	r3, [r7, #16]
   1abf4:	2b00      	cmp	r3, #0
   1abf6:	d002      	beq.n	1abfe <mp_repl_continue_with_input+0x136>
   1abf8:	693b      	ldr	r3, [r7, #16]
   1abfa:	2b02      	cmp	r3, #2
   1abfc:	d14b      	bne.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_DOUBLE - in_quote;
   1abfe:	693b      	ldr	r3, [r7, #16]
   1ac00:	f1c3 0302 	rsb	r3, r3, #2
   1ac04:	613b      	str	r3, [r7, #16]
   1ac06:	e046      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   1ac08:	68fb      	ldr	r3, [r7, #12]
   1ac0a:	781b      	ldrb	r3, [r3, #0]
   1ac0c:	2b5c      	cmp	r3, #92	; 0x5c
   1ac0e:	d115      	bne.n	1ac3c <mp_repl_continue_with_input+0x174>
   1ac10:	68fb      	ldr	r3, [r7, #12]
   1ac12:	3301      	adds	r3, #1
   1ac14:	781b      	ldrb	r3, [r3, #0]
   1ac16:	2b27      	cmp	r3, #39	; 0x27
   1ac18:	d009      	beq.n	1ac2e <mp_repl_continue_with_input+0x166>
   1ac1a:	68fb      	ldr	r3, [r7, #12]
   1ac1c:	3301      	adds	r3, #1
   1ac1e:	781b      	ldrb	r3, [r3, #0]
   1ac20:	2b22      	cmp	r3, #34	; 0x22
   1ac22:	d004      	beq.n	1ac2e <mp_repl_continue_with_input+0x166>
   1ac24:	68fb      	ldr	r3, [r7, #12]
   1ac26:	3301      	adds	r3, #1
   1ac28:	781b      	ldrb	r3, [r3, #0]
   1ac2a:	2b5c      	cmp	r3, #92	; 0x5c
   1ac2c:	d106      	bne.n	1ac3c <mp_repl_continue_with_input+0x174>
            if (in_quote != Q_NONE) {
   1ac2e:	693b      	ldr	r3, [r7, #16]
   1ac30:	2b00      	cmp	r3, #0
   1ac32:	d030      	beq.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                i++;
   1ac34:	68fb      	ldr	r3, [r7, #12]
   1ac36:	3301      	adds	r3, #1
   1ac38:	60fb      	str	r3, [r7, #12]
            if (in_quote != Q_NONE) {
   1ac3a:	e02c      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (in_quote == Q_NONE) {
   1ac3c:	693b      	ldr	r3, [r7, #16]
   1ac3e:	2b00      	cmp	r3, #0
   1ac40:	d129      	bne.n	1ac96 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1ac42:	68fb      	ldr	r3, [r7, #12]
   1ac44:	781b      	ldrb	r3, [r3, #0]
   1ac46:	2b5b      	cmp	r3, #91	; 0x5b
   1ac48:	d015      	beq.n	1ac76 <mp_repl_continue_with_input+0x1ae>
   1ac4a:	2b5b      	cmp	r3, #91	; 0x5b
   1ac4c:	dc04      	bgt.n	1ac58 <mp_repl_continue_with_input+0x190>
   1ac4e:	2b28      	cmp	r3, #40	; 0x28
   1ac50:	d009      	beq.n	1ac66 <mp_repl_continue_with_input+0x19e>
   1ac52:	2b29      	cmp	r3, #41	; 0x29
   1ac54:	d00b      	beq.n	1ac6e <mp_repl_continue_with_input+0x1a6>
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
                case '{': n_brace += 1; break;
                case '}': n_brace -= 1; break;
                default: break;
   1ac56:	e01e      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1ac58:	2b7b      	cmp	r3, #123	; 0x7b
   1ac5a:	d014      	beq.n	1ac86 <mp_repl_continue_with_input+0x1be>
   1ac5c:	2b7d      	cmp	r3, #125	; 0x7d
   1ac5e:	d016      	beq.n	1ac8e <mp_repl_continue_with_input+0x1c6>
   1ac60:	2b5d      	cmp	r3, #93	; 0x5d
   1ac62:	d00c      	beq.n	1ac7e <mp_repl_continue_with_input+0x1b6>
                default: break;
   1ac64:	e017      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                case '(': n_paren += 1; break;
   1ac66:	69fb      	ldr	r3, [r7, #28]
   1ac68:	3301      	adds	r3, #1
   1ac6a:	61fb      	str	r3, [r7, #28]
   1ac6c:	e013      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                case ')': n_paren -= 1; break;
   1ac6e:	69fb      	ldr	r3, [r7, #28]
   1ac70:	3b01      	subs	r3, #1
   1ac72:	61fb      	str	r3, [r7, #28]
   1ac74:	e00f      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                case '[': n_brack += 1; break;
   1ac76:	69bb      	ldr	r3, [r7, #24]
   1ac78:	3301      	adds	r3, #1
   1ac7a:	61bb      	str	r3, [r7, #24]
   1ac7c:	e00b      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                case ']': n_brack -= 1; break;
   1ac7e:	69bb      	ldr	r3, [r7, #24]
   1ac80:	3b01      	subs	r3, #1
   1ac82:	61bb      	str	r3, [r7, #24]
   1ac84:	e007      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                case '{': n_brace += 1; break;
   1ac86:	697b      	ldr	r3, [r7, #20]
   1ac88:	3301      	adds	r3, #1
   1ac8a:	617b      	str	r3, [r7, #20]
   1ac8c:	e003      	b.n	1ac96 <mp_repl_continue_with_input+0x1ce>
                case '}': n_brace -= 1; break;
   1ac8e:	697b      	ldr	r3, [r7, #20]
   1ac90:	3b01      	subs	r3, #1
   1ac92:	617b      	str	r3, [r7, #20]
   1ac94:	bf00      	nop
    for (i = input; *i; i++) {
   1ac96:	68fb      	ldr	r3, [r7, #12]
   1ac98:	3301      	adds	r3, #1
   1ac9a:	60fb      	str	r3, [r7, #12]
   1ac9c:	68fb      	ldr	r3, [r7, #12]
   1ac9e:	781b      	ldrb	r3, [r3, #0]
   1aca0:	2b00      	cmp	r3, #0
   1aca2:	f47f af63 	bne.w	1ab6c <mp_repl_continue_with_input+0xa4>
            }
        }
    }

    // continue if unmatched 3-quotes
    if (in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   1aca6:	693b      	ldr	r3, [r7, #16]
   1aca8:	2b03      	cmp	r3, #3
   1acaa:	d002      	beq.n	1acb2 <mp_repl_continue_with_input+0x1ea>
   1acac:	693b      	ldr	r3, [r7, #16]
   1acae:	2b04      	cmp	r3, #4
   1acb0:	d101      	bne.n	1acb6 <mp_repl_continue_with_input+0x1ee>
        return true;
   1acb2:	2301      	movs	r3, #1
   1acb4:	e01f      	b.n	1acf6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if unmatched brackets, but only if not in a 1-quote
    if ((n_paren > 0 || n_brack > 0 || n_brace > 0) && in_quote == Q_NONE) {
   1acb6:	69fb      	ldr	r3, [r7, #28]
   1acb8:	2b00      	cmp	r3, #0
   1acba:	dc05      	bgt.n	1acc8 <mp_repl_continue_with_input+0x200>
   1acbc:	69bb      	ldr	r3, [r7, #24]
   1acbe:	2b00      	cmp	r3, #0
   1acc0:	dc02      	bgt.n	1acc8 <mp_repl_continue_with_input+0x200>
   1acc2:	697b      	ldr	r3, [r7, #20]
   1acc4:	2b00      	cmp	r3, #0
   1acc6:	dd04      	ble.n	1acd2 <mp_repl_continue_with_input+0x20a>
   1acc8:	693b      	ldr	r3, [r7, #16]
   1acca:	2b00      	cmp	r3, #0
   1accc:	d101      	bne.n	1acd2 <mp_repl_continue_with_input+0x20a>
        return true;
   1acce:	2301      	movs	r3, #1
   1acd0:	e011      	b.n	1acf6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   1acd2:	68fb      	ldr	r3, [r7, #12]
   1acd4:	3b01      	subs	r3, #1
   1acd6:	781b      	ldrb	r3, [r3, #0]
   1acd8:	2b5c      	cmp	r3, #92	; 0x5c
   1acda:	d101      	bne.n	1ace0 <mp_repl_continue_with_input+0x218>
        return true;
   1acdc:	2301      	movs	r3, #1
   1acde:	e00a      	b.n	1acf6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   1ace0:	7afb      	ldrb	r3, [r7, #11]
   1ace2:	2b00      	cmp	r3, #0
   1ace4:	d006      	beq.n	1acf4 <mp_repl_continue_with_input+0x22c>
   1ace6:	68fb      	ldr	r3, [r7, #12]
   1ace8:	3b01      	subs	r3, #1
   1acea:	781b      	ldrb	r3, [r3, #0]
   1acec:	2b0a      	cmp	r3, #10
   1acee:	d001      	beq.n	1acf4 <mp_repl_continue_with_input+0x22c>
        return true;
   1acf0:	2301      	movs	r3, #1
   1acf2:	e000      	b.n	1acf6 <mp_repl_continue_with_input+0x22e>
    }

    // otherwise, don't continue
    return false;
   1acf4:	2300      	movs	r3, #0
}
   1acf6:	4618      	mov	r0, r3
   1acf8:	3720      	adds	r7, #32
   1acfa:	46bd      	mov	sp, r7
   1acfc:	bd80      	pop	{r7, pc}
   1acfe:	bf00      	nop
   1ad00:	00022c68 	.word	0x00022c68
   1ad04:	00022c6c 	.word	0x00022c6c
   1ad08:	00022c74 	.word	0x00022c74
   1ad0c:	00022c78 	.word	0x00022c78
   1ad10:	00022c7c 	.word	0x00022c7c
   1ad14:	00022c84 	.word	0x00022c84
   1ad18:	00022c88 	.word	0x00022c88

0001ad1c <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   1ad1c:	b580      	push	{r7, lr}
   1ad1e:	b09c      	sub	sp, #112	; 0x70
   1ad20:	af00      	add	r7, sp, #0
   1ad22:	60f8      	str	r0, [r7, #12]
   1ad24:	60b9      	str	r1, [r7, #8]
   1ad26:	607a      	str	r2, [r7, #4]
   1ad28:	603b      	str	r3, [r7, #0]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
   1ad2a:	68fb      	ldr	r3, [r7, #12]
   1ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    const char *top = str + len;
   1ad2e:	68fa      	ldr	r2, [r7, #12]
   1ad30:	68bb      	ldr	r3, [r7, #8]
   1ad32:	4413      	add	r3, r2
   1ad34:	63bb      	str	r3, [r7, #56]	; 0x38
    for (const char *s = top; --s >= str;) {
   1ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad38:	66fb      	str	r3, [r7, #108]	; 0x6c
   1ad3a:	e023      	b.n	1ad84 <mp_repl_autocomplete+0x68>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   1ad3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad3e:	781b      	ldrb	r3, [r3, #0]
   1ad40:	4618      	mov	r0, r3
   1ad42:	f7e7 fb49 	bl	23d8 <unichar_isalpha>
   1ad46:	4603      	mov	r3, r0
   1ad48:	f083 0301 	eor.w	r3, r3, #1
   1ad4c:	b2db      	uxtb	r3, r3
   1ad4e:	2b00      	cmp	r3, #0
   1ad50:	d018      	beq.n	1ad84 <mp_repl_autocomplete+0x68>
   1ad52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad54:	781b      	ldrb	r3, [r3, #0]
   1ad56:	4618      	mov	r0, r3
   1ad58:	f7e7 fb5c 	bl	2414 <unichar_isdigit>
   1ad5c:	4603      	mov	r3, r0
   1ad5e:	f083 0301 	eor.w	r3, r3, #1
   1ad62:	b2db      	uxtb	r3, r3
   1ad64:	2b00      	cmp	r3, #0
   1ad66:	d00d      	beq.n	1ad84 <mp_repl_autocomplete+0x68>
   1ad68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad6a:	781b      	ldrb	r3, [r3, #0]
   1ad6c:	2b5f      	cmp	r3, #95	; 0x5f
   1ad6e:	d009      	beq.n	1ad84 <mp_repl_autocomplete+0x68>
   1ad70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad72:	781b      	ldrb	r3, [r3, #0]
   1ad74:	2b2e      	cmp	r3, #46	; 0x2e
   1ad76:	d005      	beq.n	1ad84 <mp_repl_autocomplete+0x68>
            ++s;
   1ad78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad7a:	3301      	adds	r3, #1
   1ad7c:	66fb      	str	r3, [r7, #108]	; 0x6c
            str = s;
   1ad7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad80:	60fb      	str	r3, [r7, #12]
            break;
   1ad82:	e006      	b.n	1ad92 <mp_repl_autocomplete+0x76>
    for (const char *s = top; --s >= str;) {
   1ad84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad86:	3b01      	subs	r3, #1
   1ad88:	66fb      	str	r3, [r7, #108]	; 0x6c
   1ad8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1ad8c:	68fb      	ldr	r3, [r7, #12]
   1ad8e:	429a      	cmp	r2, r3
   1ad90:	d2d4      	bcs.n	1ad3c <mp_repl_autocomplete+0x20>
        }
    }

    size_t nqstr = QSTR_TOTAL();
   1ad92:	4b95      	ldr	r3, [pc, #596]	; (1afe8 <mp_repl_autocomplete+0x2cc>)
   1ad94:	691b      	ldr	r3, [r3, #16]
   1ad96:	685a      	ldr	r2, [r3, #4]
   1ad98:	4b93      	ldr	r3, [pc, #588]	; (1afe8 <mp_repl_autocomplete+0x2cc>)
   1ad9a:	691b      	ldr	r3, [r3, #16]
   1ad9c:	68db      	ldr	r3, [r3, #12]
   1ad9e:	4413      	add	r3, r2
   1ada0:	637b      	str	r3, [r7, #52]	; 0x34

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   1ada2:	4b92      	ldr	r3, [pc, #584]	; (1afec <mp_repl_autocomplete+0x2d0>)
   1ada4:	66bb      	str	r3, [r7, #104]	; 0x68
    mp_obj_t dest[2];

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
   1ada6:	68fb      	ldr	r3, [r7, #12]
   1ada8:	633b      	str	r3, [r7, #48]	; 0x30
        while (str < top && *str != '.') {
   1adaa:	e002      	b.n	1adb2 <mp_repl_autocomplete+0x96>
            ++str;
   1adac:	68fb      	ldr	r3, [r7, #12]
   1adae:	3301      	adds	r3, #1
   1adb0:	60fb      	str	r3, [r7, #12]
        while (str < top && *str != '.') {
   1adb2:	68fa      	ldr	r2, [r7, #12]
   1adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1adb6:	429a      	cmp	r2, r3
   1adb8:	d203      	bcs.n	1adc2 <mp_repl_autocomplete+0xa6>
   1adba:	68fb      	ldr	r3, [r7, #12]
   1adbc:	781b      	ldrb	r3, [r3, #0]
   1adbe:	2b2e      	cmp	r3, #46	; 0x2e
   1adc0:	d1f4      	bne.n	1adac <mp_repl_autocomplete+0x90>
        }
        size_t s_len = str - s_start;
   1adc2:	68fa      	ldr	r2, [r7, #12]
   1adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1adc6:	1ad3      	subs	r3, r2, r3
   1adc8:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (str < top) {
   1adca:	68fa      	ldr	r2, [r7, #12]
   1adcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1adce:	429a      	cmp	r2, r3
   1add0:	d21b      	bcs.n	1ae0a <mp_repl_autocomplete+0xee>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   1add2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1add4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1add6:	f7e6 f8db 	bl	f90 <qstr_find_strn>
   1adda:	62b8      	str	r0, [r7, #40]	; 0x28
            if (q == MP_QSTR_NULL) {
   1addc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1adde:	2b00      	cmp	r3, #0
   1ade0:	d101      	bne.n	1ade6 <mp_repl_autocomplete+0xca>
                // lookup will fail
                return 0;
   1ade2:	2300      	movs	r3, #0
   1ade4:	e0fc      	b.n	1afe0 <mp_repl_autocomplete+0x2c4>
            }
            mp_load_method_protected(obj, q, dest, true);
   1ade6:	f107 0218 	add.w	r2, r7, #24
   1adea:	2301      	movs	r3, #1
   1adec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1adee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1adf0:	f7f1 fd28 	bl	c844 <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   1adf4:	69bb      	ldr	r3, [r7, #24]
   1adf6:	66bb      	str	r3, [r7, #104]	; 0x68

            if (obj == MP_OBJ_NULL) {
   1adf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1adfa:	2b00      	cmp	r3, #0
   1adfc:	d101      	bne.n	1ae02 <mp_repl_autocomplete+0xe6>
                // lookup failed
                return 0;
   1adfe:	2300      	movs	r3, #0
   1ae00:	e0ee      	b.n	1afe0 <mp_repl_autocomplete+0x2c4>
            }

            // skip '.' to move to next word
            ++str;
   1ae02:	68fb      	ldr	r3, [r7, #12]
   1ae04:	3301      	adds	r3, #1
   1ae06:	60fb      	str	r3, [r7, #12]
   1ae08:	e7cd      	b.n	1ada6 <mp_repl_autocomplete+0x8a>

        } else {
            // end of string, do completion on this partial name

            // look for matches
            const char *match_str = NULL;
   1ae0a:	2300      	movs	r3, #0
   1ae0c:	667b      	str	r3, [r7, #100]	; 0x64
            size_t match_len = 0;
   1ae0e:	2300      	movs	r3, #0
   1ae10:	663b      	str	r3, [r7, #96]	; 0x60
            qstr q_first = 0, q_last = 0;
   1ae12:	2300      	movs	r3, #0
   1ae14:	65fb      	str	r3, [r7, #92]	; 0x5c
   1ae16:	2300      	movs	r3, #0
   1ae18:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1ae1a:	2302      	movs	r3, #2
   1ae1c:	657b      	str	r3, [r7, #84]	; 0x54
   1ae1e:	e049      	b.n	1aeb4 <mp_repl_autocomplete+0x198>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1ae20:	f107 0314 	add.w	r3, r7, #20
   1ae24:	4619      	mov	r1, r3
   1ae26:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1ae28:	f7e6 fa00 	bl	122c <qstr_data>
   1ae2c:	6278      	str	r0, [r7, #36]	; 0x24
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1ae2e:	697b      	ldr	r3, [r7, #20]
   1ae30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ae32:	429a      	cmp	r2, r3
   1ae34:	d83b      	bhi.n	1aeae <mp_repl_autocomplete+0x192>
   1ae36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ae38:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ae3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ae3c:	f001 f8f8 	bl	1c030 <strncmp>
   1ae40:	4603      	mov	r3, r0
   1ae42:	2b00      	cmp	r3, #0
   1ae44:	d133      	bne.n	1aeae <mp_repl_autocomplete+0x192>
                    mp_load_method_protected(obj, q, dest, true);
   1ae46:	f107 0218 	add.w	r2, r7, #24
   1ae4a:	2301      	movs	r3, #1
   1ae4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1ae4e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1ae50:	f7f1 fcf8 	bl	c844 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1ae54:	69bb      	ldr	r3, [r7, #24]
   1ae56:	2b00      	cmp	r3, #0
   1ae58:	d029      	beq.n	1aeae <mp_repl_autocomplete+0x192>
                        if (match_str == NULL) {
   1ae5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ae5c:	2b00      	cmp	r3, #0
   1ae5e:	d104      	bne.n	1ae6a <mp_repl_autocomplete+0x14e>
                            match_str = d_str;
   1ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae62:	667b      	str	r3, [r7, #100]	; 0x64
                            match_len = d_len;
   1ae64:	697b      	ldr	r3, [r7, #20]
   1ae66:	663b      	str	r3, [r7, #96]	; 0x60
   1ae68:	e01a      	b.n	1aea0 <mp_repl_autocomplete+0x184>
                        } else {
                            // search for longest common prefix of match_str and d_str
                            // (assumes these strings are null-terminated)
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae6c:	653b      	str	r3, [r7, #80]	; 0x50
   1ae6e:	e00f      	b.n	1ae90 <mp_repl_autocomplete+0x174>
                                if (match_str[j] != d_str[j]) {
   1ae70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ae72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ae74:	4413      	add	r3, r2
   1ae76:	781a      	ldrb	r2, [r3, #0]
   1ae78:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ae7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ae7c:	440b      	add	r3, r1
   1ae7e:	781b      	ldrb	r3, [r3, #0]
   1ae80:	429a      	cmp	r2, r3
   1ae82:	d002      	beq.n	1ae8a <mp_repl_autocomplete+0x16e>
                                    match_len = j;
   1ae84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ae86:	663b      	str	r3, [r7, #96]	; 0x60
                                    break;
   1ae88:	e00a      	b.n	1aea0 <mp_repl_autocomplete+0x184>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1ae8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ae8c:	3301      	adds	r3, #1
   1ae8e:	653b      	str	r3, [r7, #80]	; 0x50
   1ae90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ae92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ae94:	429a      	cmp	r2, r3
   1ae96:	d803      	bhi.n	1aea0 <mp_repl_autocomplete+0x184>
   1ae98:	697b      	ldr	r3, [r7, #20]
   1ae9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ae9c:	429a      	cmp	r2, r3
   1ae9e:	d9e7      	bls.n	1ae70 <mp_repl_autocomplete+0x154>
                                }
                            }
                        }
                        if (q_first == 0) {
   1aea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aea2:	2b00      	cmp	r3, #0
   1aea4:	d101      	bne.n	1aeaa <mp_repl_autocomplete+0x18e>
                            q_first = q;
   1aea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1aea8:	65fb      	str	r3, [r7, #92]	; 0x5c
                        }
                        q_last = q;
   1aeaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1aeac:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1aeae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1aeb0:	3301      	adds	r3, #1
   1aeb2:	657b      	str	r3, [r7, #84]	; 0x54
   1aeb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1aeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1aeb8:	429a      	cmp	r2, r3
   1aeba:	d3b1      	bcc.n	1ae20 <mp_repl_autocomplete+0x104>
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   1aebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aebe:	2b00      	cmp	r3, #0
   1aec0:	d116      	bne.n	1aef0 <mp_repl_autocomplete+0x1d4>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   1aec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aec6:	429a      	cmp	r2, r3
   1aec8:	d110      	bne.n	1aeec <mp_repl_autocomplete+0x1d0>
                    static const char import_str[] = "import ";
                    if (memcmp(s_start, import_str, s_len) == 0) {
   1aeca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1aecc:	4948      	ldr	r1, [pc, #288]	; (1aff0 <mp_repl_autocomplete+0x2d4>)
   1aece:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1aed0:	f001 f808 	bl	1bee4 <memcmp>
   1aed4:	4603      	mov	r3, r0
   1aed6:	2b00      	cmp	r3, #0
   1aed8:	d108      	bne.n	1aeec <mp_repl_autocomplete+0x1d0>
                        *compl_str = import_str + s_len;
   1aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aedc:	4a44      	ldr	r2, [pc, #272]	; (1aff0 <mp_repl_autocomplete+0x2d4>)
   1aede:	441a      	add	r2, r3
   1aee0:	683b      	ldr	r3, [r7, #0]
   1aee2:	601a      	str	r2, [r3, #0]
                        return sizeof(import_str) - 1 - s_len;
   1aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aee6:	f1c3 0307 	rsb	r3, r3, #7
   1aeea:	e079      	b.n	1afe0 <mp_repl_autocomplete+0x2c4>
                    }
                }

                return 0;
   1aeec:	2300      	movs	r3, #0
   1aeee:	e077      	b.n	1afe0 <mp_repl_autocomplete+0x2c4>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   1aef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1aef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1aef4:	429a      	cmp	r2, r3
   1aef6:	d003      	beq.n	1af00 <mp_repl_autocomplete+0x1e4>
   1aef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1aefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aefc:	429a      	cmp	r2, r3
   1aefe:	d908      	bls.n	1af12 <mp_repl_autocomplete+0x1f6>
                *compl_str = match_str + s_len;
   1af00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1af04:	441a      	add	r2, r3
   1af06:	683b      	ldr	r3, [r7, #0]
   1af08:	601a      	str	r2, [r3, #0]
                return match_len - s_len;
   1af0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1af0e:	1ad3      	subs	r3, r2, r3
   1af10:	e066      	b.n	1afe0 <mp_repl_autocomplete+0x2c4>
            // multiple matches found, print them out

            #define WORD_SLOT_LEN (16)
            #define MAX_LINE_LEN  (4 * WORD_SLOT_LEN)

            int line_len = MAX_LINE_LEN; // force a newline for first word
   1af12:	2340      	movs	r3, #64	; 0x40
   1af14:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1af16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1af18:	64bb      	str	r3, [r7, #72]	; 0x48
   1af1a:	e057      	b.n	1afcc <mp_repl_autocomplete+0x2b0>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1af1c:	f107 0310 	add.w	r3, r7, #16
   1af20:	4619      	mov	r1, r3
   1af22:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1af24:	f7e6 f982 	bl	122c <qstr_data>
   1af28:	6238      	str	r0, [r7, #32]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1af2a:	693b      	ldr	r3, [r7, #16]
   1af2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1af2e:	429a      	cmp	r2, r3
   1af30:	d849      	bhi.n	1afc6 <mp_repl_autocomplete+0x2aa>
   1af32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1af34:	6a39      	ldr	r1, [r7, #32]
   1af36:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1af38:	f001 f87a 	bl	1c030 <strncmp>
   1af3c:	4603      	mov	r3, r0
   1af3e:	2b00      	cmp	r3, #0
   1af40:	d141      	bne.n	1afc6 <mp_repl_autocomplete+0x2aa>
                    mp_load_method_protected(obj, q, dest, true);
   1af42:	f107 0218 	add.w	r2, r7, #24
   1af46:	2301      	movs	r3, #1
   1af48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1af4a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1af4c:	f7f1 fc7a 	bl	c844 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1af50:	69bb      	ldr	r3, [r7, #24]
   1af52:	2b00      	cmp	r3, #0
   1af54:	d037      	beq.n	1afc6 <mp_repl_autocomplete+0x2aa>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   1af56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1af58:	330f      	adds	r3, #15
   1af5a:	2b00      	cmp	r3, #0
   1af5c:	da00      	bge.n	1af60 <mp_repl_autocomplete+0x244>
   1af5e:	330f      	adds	r3, #15
   1af60:	111b      	asrs	r3, r3, #4
   1af62:	011a      	lsls	r2, r3, #4
   1af64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1af66:	1ad3      	subs	r3, r2, r3
   1af68:	647b      	str	r3, [r7, #68]	; 0x44
                        if (gap < 2) {
   1af6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af6c:	2b01      	cmp	r3, #1
   1af6e:	dc02      	bgt.n	1af76 <mp_repl_autocomplete+0x25a>
                            gap += WORD_SLOT_LEN;
   1af70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af72:	3310      	adds	r3, #16
   1af74:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   1af76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1af78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af7a:	4413      	add	r3, r2
   1af7c:	461a      	mov	r2, r3
   1af7e:	693b      	ldr	r3, [r7, #16]
   1af80:	4413      	add	r3, r2
   1af82:	2b40      	cmp	r3, #64	; 0x40
   1af84:	d818      	bhi.n	1afb8 <mp_repl_autocomplete+0x29c>
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
   1af86:	2300      	movs	r3, #0
   1af88:	643b      	str	r3, [r7, #64]	; 0x40
   1af8a:	e006      	b.n	1af9a <mp_repl_autocomplete+0x27e>
                                mp_print_str(print, " ");
   1af8c:	4919      	ldr	r1, [pc, #100]	; (1aff4 <mp_repl_autocomplete+0x2d8>)
   1af8e:	6878      	ldr	r0, [r7, #4]
   1af90:	f7e6 fc82 	bl	1898 <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   1af94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1af96:	3301      	adds	r3, #1
   1af98:	643b      	str	r3, [r7, #64]	; 0x40
   1af9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1af9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af9e:	429a      	cmp	r2, r3
   1afa0:	dbf4      	blt.n	1af8c <mp_repl_autocomplete+0x270>
                            }
                            mp_print_str(print, d_str);
   1afa2:	6a39      	ldr	r1, [r7, #32]
   1afa4:	6878      	ldr	r0, [r7, #4]
   1afa6:	f7e6 fc77 	bl	1898 <mp_print_str>
                            line_len += gap + d_len;
   1afaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1afac:	693b      	ldr	r3, [r7, #16]
   1afae:	441a      	add	r2, r3
   1afb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1afb2:	4413      	add	r3, r2
   1afb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   1afb6:	e006      	b.n	1afc6 <mp_repl_autocomplete+0x2aa>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   1afb8:	6a3a      	ldr	r2, [r7, #32]
   1afba:	490f      	ldr	r1, [pc, #60]	; (1aff8 <mp_repl_autocomplete+0x2dc>)
   1afbc:	6878      	ldr	r0, [r7, #4]
   1afbe:	f7e6 ff7f 	bl	1ec0 <mp_printf>
                            line_len = d_len;
   1afc2:	693b      	ldr	r3, [r7, #16]
   1afc4:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1afc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1afc8:	3301      	adds	r3, #1
   1afca:	64bb      	str	r3, [r7, #72]	; 0x48
   1afcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1afce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1afd0:	429a      	cmp	r2, r3
   1afd2:	d9a3      	bls.n	1af1c <mp_repl_autocomplete+0x200>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1afd4:	4909      	ldr	r1, [pc, #36]	; (1affc <mp_repl_autocomplete+0x2e0>)
   1afd6:	6878      	ldr	r0, [r7, #4]
   1afd8:	f7e6 fc5e 	bl	1898 <mp_print_str>

            return (size_t)(-1); // indicate many matches
   1afdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
   1afe0:	4618      	mov	r0, r3
   1afe2:	3770      	adds	r7, #112	; 0x70
   1afe4:	46bd      	mov	sp, r7
   1afe6:	bd80      	pop	{r7, pc}
   1afe8:	20000a2c 	.word	0x20000a2c
   1afec:	0001f634 	.word	0x0001f634
   1aff0:	00022c9c 	.word	0x00022c9c
   1aff4:	00022c90 	.word	0x00022c90
   1aff8:	00022c94 	.word	0x00022c94
   1affc:	00022c98 	.word	0x00022c98

0001b000 <mp_small_int_mul_overflow>:
 * THE SOFTWARE.
 */

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
   1b000:	b480      	push	{r7}
   1b002:	b083      	sub	sp, #12
   1b004:	af00      	add	r7, sp, #0
   1b006:	6078      	str	r0, [r7, #4]
   1b008:	6039      	str	r1, [r7, #0]
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   1b00a:	687b      	ldr	r3, [r7, #4]
   1b00c:	2b00      	cmp	r3, #0
   1b00e:	dd16      	ble.n	1b03e <mp_small_int_mul_overflow+0x3e>
        if (y > 0) { // x and y are positive
   1b010:	683b      	ldr	r3, [r7, #0]
   1b012:	2b00      	cmp	r3, #0
   1b014:	dd09      	ble.n	1b02a <mp_small_int_mul_overflow+0x2a>
            if (x > (MP_SMALL_INT_MAX / y)) {
   1b016:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1b01a:	683b      	ldr	r3, [r7, #0]
   1b01c:	fb92 f2f3 	sdiv	r2, r2, r3
   1b020:	687b      	ldr	r3, [r7, #4]
   1b022:	429a      	cmp	r2, r3
   1b024:	da25      	bge.n	1b072 <mp_small_int_mul_overflow+0x72>
                return true;
   1b026:	2301      	movs	r3, #1
   1b028:	e024      	b.n	1b074 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x positive, y nonpositive
            if (y < (MP_SMALL_INT_MIN / x)) {
   1b02a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1b02e:	687b      	ldr	r3, [r7, #4]
   1b030:	fb92 f2f3 	sdiv	r2, r2, r3
   1b034:	683b      	ldr	r3, [r7, #0]
   1b036:	429a      	cmp	r2, r3
   1b038:	dd1b      	ble.n	1b072 <mp_small_int_mul_overflow+0x72>
                return true;
   1b03a:	2301      	movs	r3, #1
   1b03c:	e01a      	b.n	1b074 <mp_small_int_mul_overflow+0x74>
            }
        } // x positive, y nonpositive
    } else { // x is nonpositive
        if (y > 0) { // x is nonpositive, y is positive
   1b03e:	683b      	ldr	r3, [r7, #0]
   1b040:	2b00      	cmp	r3, #0
   1b042:	dd09      	ble.n	1b058 <mp_small_int_mul_overflow+0x58>
            if (x < (MP_SMALL_INT_MIN / y)) {
   1b044:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1b048:	683b      	ldr	r3, [r7, #0]
   1b04a:	fb92 f2f3 	sdiv	r2, r2, r3
   1b04e:	687b      	ldr	r3, [r7, #4]
   1b050:	429a      	cmp	r2, r3
   1b052:	dd0e      	ble.n	1b072 <mp_small_int_mul_overflow+0x72>
                return true;
   1b054:	2301      	movs	r3, #1
   1b056:	e00d      	b.n	1b074 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x and y are nonpositive
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   1b058:	687b      	ldr	r3, [r7, #4]
   1b05a:	2b00      	cmp	r3, #0
   1b05c:	d009      	beq.n	1b072 <mp_small_int_mul_overflow+0x72>
   1b05e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1b062:	687b      	ldr	r3, [r7, #4]
   1b064:	fb92 f2f3 	sdiv	r2, r2, r3
   1b068:	683b      	ldr	r3, [r7, #0]
   1b06a:	429a      	cmp	r2, r3
   1b06c:	dd01      	ble.n	1b072 <mp_small_int_mul_overflow+0x72>
                return true;
   1b06e:	2301      	movs	r3, #1
   1b070:	e000      	b.n	1b074 <mp_small_int_mul_overflow+0x74>
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   1b072:	2300      	movs	r3, #0
}
   1b074:	4618      	mov	r0, r3
   1b076:	370c      	adds	r7, #12
   1b078:	46bd      	mov	sp, r7
   1b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b07e:	4770      	bx	lr

0001b080 <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
   1b080:	b480      	push	{r7}
   1b082:	b083      	sub	sp, #12
   1b084:	af00      	add	r7, sp, #0
   1b086:	6078      	str	r0, [r7, #4]
   1b088:	6039      	str	r1, [r7, #0]
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   1b08a:	687b      	ldr	r3, [r7, #4]
   1b08c:	683a      	ldr	r2, [r7, #0]
   1b08e:	fb93 f2f2 	sdiv	r2, r3, r2
   1b092:	6839      	ldr	r1, [r7, #0]
   1b094:	fb01 f202 	mul.w	r2, r1, r2
   1b098:	1a9b      	subs	r3, r3, r2
   1b09a:	607b      	str	r3, [r7, #4]
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1b09c:	687b      	ldr	r3, [r7, #4]
   1b09e:	2b00      	cmp	r3, #0
   1b0a0:	da02      	bge.n	1b0a8 <mp_small_int_modulo+0x28>
   1b0a2:	683b      	ldr	r3, [r7, #0]
   1b0a4:	2b00      	cmp	r3, #0
   1b0a6:	dc05      	bgt.n	1b0b4 <mp_small_int_modulo+0x34>
   1b0a8:	687b      	ldr	r3, [r7, #4]
   1b0aa:	2b00      	cmp	r3, #0
   1b0ac:	dd06      	ble.n	1b0bc <mp_small_int_modulo+0x3c>
   1b0ae:	683b      	ldr	r3, [r7, #0]
   1b0b0:	2b00      	cmp	r3, #0
   1b0b2:	da03      	bge.n	1b0bc <mp_small_int_modulo+0x3c>
        dividend += divisor;
   1b0b4:	687a      	ldr	r2, [r7, #4]
   1b0b6:	683b      	ldr	r3, [r7, #0]
   1b0b8:	4413      	add	r3, r2
   1b0ba:	607b      	str	r3, [r7, #4]
    }
    return dividend;
   1b0bc:	687b      	ldr	r3, [r7, #4]
}
   1b0be:	4618      	mov	r0, r3
   1b0c0:	370c      	adds	r7, #12
   1b0c2:	46bd      	mov	sp, r7
   1b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b0c8:	4770      	bx	lr
   1b0ca:	bf00      	nop

0001b0cc <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
   1b0cc:	b480      	push	{r7}
   1b0ce:	b083      	sub	sp, #12
   1b0d0:	af00      	add	r7, sp, #0
   1b0d2:	6078      	str	r0, [r7, #4]
   1b0d4:	6039      	str	r1, [r7, #0]
    if (num >= 0) {
   1b0d6:	687b      	ldr	r3, [r7, #4]
   1b0d8:	2b00      	cmp	r3, #0
   1b0da:	db08      	blt.n	1b0ee <mp_small_int_floor_divide+0x22>
        if (denom < 0) {
   1b0dc:	683b      	ldr	r3, [r7, #0]
   1b0de:	2b00      	cmp	r3, #0
   1b0e0:	da0e      	bge.n	1b100 <mp_small_int_floor_divide+0x34>
            num += -denom - 1;
   1b0e2:	683b      	ldr	r3, [r7, #0]
   1b0e4:	43db      	mvns	r3, r3
   1b0e6:	687a      	ldr	r2, [r7, #4]
   1b0e8:	4413      	add	r3, r2
   1b0ea:	607b      	str	r3, [r7, #4]
   1b0ec:	e008      	b.n	1b100 <mp_small_int_floor_divide+0x34>
        }
    } else {
        if (denom >= 0) {
   1b0ee:	683b      	ldr	r3, [r7, #0]
   1b0f0:	2b00      	cmp	r3, #0
   1b0f2:	db05      	blt.n	1b100 <mp_small_int_floor_divide+0x34>
            num += -denom + 1;
   1b0f4:	683b      	ldr	r3, [r7, #0]
   1b0f6:	f1c3 0301 	rsb	r3, r3, #1
   1b0fa:	687a      	ldr	r2, [r7, #4]
   1b0fc:	4413      	add	r3, r2
   1b0fe:	607b      	str	r3, [r7, #4]
        }
    }
    return num / denom;
   1b100:	687a      	ldr	r2, [r7, #4]
   1b102:	683b      	ldr	r3, [r7, #0]
   1b104:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1b108:	4618      	mov	r0, r3
   1b10a:	370c      	adds	r7, #12
   1b10c:	46bd      	mov	sp, r7
   1b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b112:	4770      	bx	lr

0001b114 <mp_find_frozen_mpy>:
#include "py/emitglue.h"

extern const char mp_frozen_mpy_names[];
extern const mp_raw_code_t *const mp_frozen_mpy_content[];

STATIC const mp_raw_code_t *mp_find_frozen_mpy(const char *str, size_t len) {
   1b114:	b580      	push	{r7, lr}
   1b116:	b086      	sub	sp, #24
   1b118:	af00      	add	r7, sp, #0
   1b11a:	6078      	str	r0, [r7, #4]
   1b11c:	6039      	str	r1, [r7, #0]
    const char *name = mp_frozen_mpy_names;
   1b11e:	4b15      	ldr	r3, [pc, #84]	; (1b174 <mp_find_frozen_mpy+0x60>)
   1b120:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1b122:	2300      	movs	r3, #0
   1b124:	613b      	str	r3, [r7, #16]
   1b126:	e01c      	b.n	1b162 <mp_find_frozen_mpy+0x4e>
        size_t l = strlen(name);
   1b128:	6978      	ldr	r0, [r7, #20]
   1b12a:	f000 ff2d 	bl	1bf88 <strlen>
   1b12e:	60f8      	str	r0, [r7, #12]
        if (l == len && !memcmp(str, name, l)) {
   1b130:	68fa      	ldr	r2, [r7, #12]
   1b132:	683b      	ldr	r3, [r7, #0]
   1b134:	429a      	cmp	r2, r3
   1b136:	d10c      	bne.n	1b152 <mp_find_frozen_mpy+0x3e>
   1b138:	68fa      	ldr	r2, [r7, #12]
   1b13a:	6979      	ldr	r1, [r7, #20]
   1b13c:	6878      	ldr	r0, [r7, #4]
   1b13e:	f000 fed1 	bl	1bee4 <memcmp>
   1b142:	4603      	mov	r3, r0
   1b144:	2b00      	cmp	r3, #0
   1b146:	d104      	bne.n	1b152 <mp_find_frozen_mpy+0x3e>
            return mp_frozen_mpy_content[i];
   1b148:	4a0b      	ldr	r2, [pc, #44]	; (1b178 <mp_find_frozen_mpy+0x64>)
   1b14a:	693b      	ldr	r3, [r7, #16]
   1b14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b150:	e00c      	b.n	1b16c <mp_find_frozen_mpy+0x58>
        }
        name += l + 1;
   1b152:	68fb      	ldr	r3, [r7, #12]
   1b154:	3301      	adds	r3, #1
   1b156:	697a      	ldr	r2, [r7, #20]
   1b158:	4413      	add	r3, r2
   1b15a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1b15c:	693b      	ldr	r3, [r7, #16]
   1b15e:	3301      	adds	r3, #1
   1b160:	613b      	str	r3, [r7, #16]
   1b162:	697b      	ldr	r3, [r7, #20]
   1b164:	781b      	ldrb	r3, [r3, #0]
   1b166:	2b00      	cmp	r3, #0
   1b168:	d1de      	bne.n	1b128 <mp_find_frozen_mpy+0x14>
    }
    return NULL;
   1b16a:	2300      	movs	r3, #0
}
   1b16c:	4618      	mov	r0, r3
   1b16e:	3718      	adds	r7, #24
   1b170:	46bd      	mov	sp, r7
   1b172:	bd80      	pop	{r7, pc}
   1b174:	00022f8c 	.word	0x00022f8c
   1b178:	00022f9c 	.word	0x00022f9c

0001b17c <mp_frozen_stat_helper>:

#endif

#if MICROPY_MODULE_FROZEN

STATIC mp_import_stat_t mp_frozen_stat_helper(const char *name, const char *str) {
   1b17c:	b580      	push	{r7, lr}
   1b17e:	b086      	sub	sp, #24
   1b180:	af00      	add	r7, sp, #0
   1b182:	6078      	str	r0, [r7, #4]
   1b184:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
   1b186:	6838      	ldr	r0, [r7, #0]
   1b188:	f000 fefe 	bl	1bf88 <strlen>
   1b18c:	6138      	str	r0, [r7, #16]

    for (int i = 0; *name != 0; i++) {
   1b18e:	2300      	movs	r3, #0
   1b190:	617b      	str	r3, [r7, #20]
   1b192:	e027      	b.n	1b1e4 <mp_frozen_stat_helper+0x68>
        size_t l = strlen(name);
   1b194:	6878      	ldr	r0, [r7, #4]
   1b196:	f000 fef7 	bl	1bf88 <strlen>
   1b19a:	60f8      	str	r0, [r7, #12]
        if (l >= len && !memcmp(str, name, len)) {
   1b19c:	68fa      	ldr	r2, [r7, #12]
   1b19e:	693b      	ldr	r3, [r7, #16]
   1b1a0:	429a      	cmp	r2, r3
   1b1a2:	d317      	bcc.n	1b1d4 <mp_frozen_stat_helper+0x58>
   1b1a4:	693a      	ldr	r2, [r7, #16]
   1b1a6:	6879      	ldr	r1, [r7, #4]
   1b1a8:	6838      	ldr	r0, [r7, #0]
   1b1aa:	f000 fe9b 	bl	1bee4 <memcmp>
   1b1ae:	4603      	mov	r3, r0
   1b1b0:	2b00      	cmp	r3, #0
   1b1b2:	d10f      	bne.n	1b1d4 <mp_frozen_stat_helper+0x58>
            if (name[len] == 0) {
   1b1b4:	687a      	ldr	r2, [r7, #4]
   1b1b6:	693b      	ldr	r3, [r7, #16]
   1b1b8:	4413      	add	r3, r2
   1b1ba:	781b      	ldrb	r3, [r3, #0]
   1b1bc:	2b00      	cmp	r3, #0
   1b1be:	d101      	bne.n	1b1c4 <mp_frozen_stat_helper+0x48>
                return MP_IMPORT_STAT_FILE;
   1b1c0:	2302      	movs	r3, #2
   1b1c2:	e014      	b.n	1b1ee <mp_frozen_stat_helper+0x72>
            } else if (name[len] == '/') {
   1b1c4:	687a      	ldr	r2, [r7, #4]
   1b1c6:	693b      	ldr	r3, [r7, #16]
   1b1c8:	4413      	add	r3, r2
   1b1ca:	781b      	ldrb	r3, [r3, #0]
   1b1cc:	2b2f      	cmp	r3, #47	; 0x2f
   1b1ce:	d101      	bne.n	1b1d4 <mp_frozen_stat_helper+0x58>
                return MP_IMPORT_STAT_DIR;
   1b1d0:	2301      	movs	r3, #1
   1b1d2:	e00c      	b.n	1b1ee <mp_frozen_stat_helper+0x72>
            }
        }
        name += l + 1;
   1b1d4:	68fb      	ldr	r3, [r7, #12]
   1b1d6:	3301      	adds	r3, #1
   1b1d8:	687a      	ldr	r2, [r7, #4]
   1b1da:	4413      	add	r3, r2
   1b1dc:	607b      	str	r3, [r7, #4]
    for (int i = 0; *name != 0; i++) {
   1b1de:	697b      	ldr	r3, [r7, #20]
   1b1e0:	3301      	adds	r3, #1
   1b1e2:	617b      	str	r3, [r7, #20]
   1b1e4:	687b      	ldr	r3, [r7, #4]
   1b1e6:	781b      	ldrb	r3, [r3, #0]
   1b1e8:	2b00      	cmp	r3, #0
   1b1ea:	d1d3      	bne.n	1b194 <mp_frozen_stat_helper+0x18>
    }
    return MP_IMPORT_STAT_NO_EXIST;
   1b1ec:	2300      	movs	r3, #0
}
   1b1ee:	4618      	mov	r0, r3
   1b1f0:	3718      	adds	r7, #24
   1b1f2:	46bd      	mov	sp, r7
   1b1f4:	bd80      	pop	{r7, pc}
   1b1f6:	bf00      	nop

0001b1f8 <mp_frozen_stat>:

mp_import_stat_t mp_frozen_stat(const char *str) {
   1b1f8:	b580      	push	{r7, lr}
   1b1fa:	b084      	sub	sp, #16
   1b1fc:	af00      	add	r7, sp, #0
   1b1fe:	6078      	str	r0, [r7, #4]
        return stat;
    }
    #endif

    #if MICROPY_MODULE_FROZEN_MPY
    stat = mp_frozen_stat_helper(mp_frozen_mpy_names, str);
   1b200:	6879      	ldr	r1, [r7, #4]
   1b202:	4807      	ldr	r0, [pc, #28]	; (1b220 <mp_frozen_stat+0x28>)
   1b204:	f7ff ffba 	bl	1b17c <mp_frozen_stat_helper>
   1b208:	60f8      	str	r0, [r7, #12]
    if (stat != MP_IMPORT_STAT_NO_EXIST) {
   1b20a:	68fb      	ldr	r3, [r7, #12]
   1b20c:	2b00      	cmp	r3, #0
   1b20e:	d001      	beq.n	1b214 <mp_frozen_stat+0x1c>
        return stat;
   1b210:	68fb      	ldr	r3, [r7, #12]
   1b212:	e000      	b.n	1b216 <mp_frozen_stat+0x1e>
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   1b214:	2300      	movs	r3, #0
}
   1b216:	4618      	mov	r0, r3
   1b218:	3710      	adds	r7, #16
   1b21a:	46bd      	mov	sp, r7
   1b21c:	bd80      	pop	{r7, pc}
   1b21e:	bf00      	nop
   1b220:	00022f8c 	.word	0x00022f8c

0001b224 <mp_find_frozen_module>:

int mp_find_frozen_module(const char *str, size_t len, void **data) {
   1b224:	b580      	push	{r7, lr}
   1b226:	b086      	sub	sp, #24
   1b228:	af00      	add	r7, sp, #0
   1b22a:	60f8      	str	r0, [r7, #12]
   1b22c:	60b9      	str	r1, [r7, #8]
   1b22e:	607a      	str	r2, [r7, #4]
        *data = lex;
        return MP_FROZEN_STR;
    }
    #endif
    #if MICROPY_MODULE_FROZEN_MPY
    const mp_raw_code_t *rc = mp_find_frozen_mpy(str, len);
   1b230:	68b9      	ldr	r1, [r7, #8]
   1b232:	68f8      	ldr	r0, [r7, #12]
   1b234:	f7ff ff6e 	bl	1b114 <mp_find_frozen_mpy>
   1b238:	6178      	str	r0, [r7, #20]
    if (rc != NULL) {
   1b23a:	697b      	ldr	r3, [r7, #20]
   1b23c:	2b00      	cmp	r3, #0
   1b23e:	d004      	beq.n	1b24a <mp_find_frozen_module+0x26>
        *data = (void*)rc;
   1b240:	687b      	ldr	r3, [r7, #4]
   1b242:	697a      	ldr	r2, [r7, #20]
   1b244:	601a      	str	r2, [r3, #0]
        return MP_FROZEN_MPY;
   1b246:	2302      	movs	r3, #2
   1b248:	e000      	b.n	1b24c <mp_find_frozen_module+0x28>
    }
    #endif
    return MP_FROZEN_NONE;
   1b24a:	2300      	movs	r3, #0
}
   1b24c:	4618      	mov	r0, r3
   1b24e:	3718      	adds	r7, #24
   1b250:	46bd      	mov	sp, r7
   1b252:	bd80      	pop	{r7, pc}

0001b254 <do_str>:
#include "lib/utils/pyexec.h"
#include "periph/_gpio.h"
#include "mods/pybpin.h"

#if MICROPY_ENABLE_COMPILER
void do_str(const char *src, mp_parse_input_kind_t input_kind) {
   1b254:	b580      	push	{r7, lr}
   1b256:	b094      	sub	sp, #80	; 0x50
   1b258:	af00      	add	r7, sp, #0
   1b25a:	6078      	str	r0, [r7, #4]
   1b25c:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b25e:	f107 0314 	add.w	r3, r7, #20
   1b262:	4618      	mov	r0, r3
   1b264:	f7e5 f82a 	bl	2bc <nlr_push>
   1b268:	4603      	mov	r3, r0
   1b26a:	2b00      	cmp	r3, #0
   1b26c:	d121      	bne.n	1b2b2 <do_str+0x5e>
        mp_lexer_t *lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, src, strlen(src), 0);
   1b26e:	6878      	ldr	r0, [r7, #4]
   1b270:	f000 fe8a 	bl	1bf88 <strlen>
   1b274:	4602      	mov	r2, r0
   1b276:	2300      	movs	r3, #0
   1b278:	6879      	ldr	r1, [r7, #4]
   1b27a:	2036      	movs	r0, #54	; 0x36
   1b27c:	f7e8 fa6a 	bl	3754 <mp_lexer_new_from_str_len>
   1b280:	64f8      	str	r0, [r7, #76]	; 0x4c
        qstr source_name = lex->source_name;
   1b282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b284:	681b      	ldr	r3, [r3, #0]
   1b286:	64bb      	str	r3, [r7, #72]	; 0x48
        mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b288:	f107 030c 	add.w	r3, r7, #12
   1b28c:	683a      	ldr	r2, [r7, #0]
   1b28e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1b290:	4618      	mov	r0, r3
   1b292:	f7e9 f85b 	bl	434c <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, true);
   1b296:	f107 000c 	add.w	r0, r7, #12
   1b29a:	2301      	movs	r3, #1
   1b29c:	2200      	movs	r2, #0
   1b29e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b2a0:	f7ee fa6a 	bl	9778 <mp_compile>
   1b2a4:	6478      	str	r0, [r7, #68]	; 0x44
        mp_call_function_0(module_fun);
   1b2a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1b2a8:	f7f0 fd7e 	bl	bda8 <mp_call_function_0>
        nlr_pop();
   1b2ac:	f7e4 fff4 	bl	298 <nlr_pop>
    } else {
        // uncaught exception
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
    }
}
   1b2b0:	e004      	b.n	1b2bc <do_str+0x68>
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1b2b2:	69bb      	ldr	r3, [r7, #24]
   1b2b4:	4619      	mov	r1, r3
   1b2b6:	4803      	ldr	r0, [pc, #12]	; (1b2c4 <do_str+0x70>)
   1b2b8:	f7f2 faf6 	bl	d8a8 <mp_obj_print_exception>
}
   1b2bc:	bf00      	nop
   1b2be:	3750      	adds	r7, #80	; 0x50
   1b2c0:	46bd      	mov	sp, r7
   1b2c2:	bd80      	pop	{r7, pc}
   1b2c4:	0001d838 	.word	0x0001d838

0001b2c8 <main>:
static char *stack_top;
#if MICROPY_ENABLE_GC
static char heap[2048];
#endif

int main(int argc, char **argv) {
   1b2c8:	b580      	push	{r7, lr}
   1b2ca:	b084      	sub	sp, #16
   1b2cc:	af00      	add	r7, sp, #0
   1b2ce:	6078      	str	r0, [r7, #4]
   1b2d0:	6039      	str	r1, [r7, #0]
    int stack_dummy;
    stack_top = (char*)&stack_dummy;
   1b2d2:	4a0a      	ldr	r2, [pc, #40]	; (1b2fc <main+0x34>)
   1b2d4:	f107 030c 	add.w	r3, r7, #12
   1b2d8:	6013      	str	r3, [r2, #0]

    #if MICROPY_ENABLE_GC
    gc_init(heap, heap + sizeof(heap));
   1b2da:	4b09      	ldr	r3, [pc, #36]	; (1b300 <main+0x38>)
   1b2dc:	4619      	mov	r1, r3
   1b2de:	4809      	ldr	r0, [pc, #36]	; (1b304 <main+0x3c>)
   1b2e0:	f7e5 f936 	bl	550 <gc_init>
    #endif
    mp_init();
   1b2e4:	f7f0 f920 	bl	b528 <mp_init>
        if (pyexec_event_repl_process_char(c)) {
            break;
        }
    }
    #else
    pyexec_friendly_repl();
   1b2e8:	f000 fbfc 	bl	1bae4 <pyexec_friendly_repl>
    //do_str("print('hello world!', list(x+1 for x in range(10)), end='eol\\n')", MP_PARSE_SINGLE_INPUT);
    //do_str("for i in range(10):\r\n  print(i)", MP_PARSE_FILE_INPUT);
    #else
    pyexec_frozen_module("frozentest.py");
    #endif
    mp_deinit();
   1b2ec:	f7f0 f958 	bl	b5a0 <mp_deinit>
    return 0;
   1b2f0:	2300      	movs	r3, #0
}
   1b2f2:	4618      	mov	r0, r3
   1b2f4:	3710      	adds	r7, #16
   1b2f6:	46bd      	mov	sp, r7
   1b2f8:	bd80      	pop	{r7, pc}
   1b2fa:	bf00      	nop
   1b2fc:	20000004 	.word	0x20000004
   1b300:	20000808 	.word	0x20000808
   1b304:	20000008 	.word	0x20000008

0001b308 <gc_collect>:

void gc_collect(void) {
   1b308:	b580      	push	{r7, lr}
   1b30a:	b082      	sub	sp, #8
   1b30c:	af00      	add	r7, sp, #0
    // WARNING: This gc_collect implementation doesn't try to get root
    // pointers from CPU registers, and thus may function incorrectly.
    void *dummy;
    gc_collect_start();
   1b30e:	f7e5 f961 	bl	5d4 <gc_collect_start>
    gc_collect_root(&dummy, ((mp_uint_t)stack_top - (mp_uint_t)&dummy) / sizeof(mp_uint_t));
   1b312:	4b09      	ldr	r3, [pc, #36]	; (1b338 <gc_collect+0x30>)
   1b314:	681b      	ldr	r3, [r3, #0]
   1b316:	461a      	mov	r2, r3
   1b318:	1d3b      	adds	r3, r7, #4
   1b31a:	1ad3      	subs	r3, r2, r3
   1b31c:	089a      	lsrs	r2, r3, #2
   1b31e:	1d3b      	adds	r3, r7, #4
   1b320:	4611      	mov	r1, r2
   1b322:	4618      	mov	r0, r3
   1b324:	f7e5 f994 	bl	650 <gc_collect_root>
    gc_collect_end();
   1b328:	f7e5 f9ca 	bl	6c0 <gc_collect_end>
    gc_dump_info();
   1b32c:	f7e5 fca2 	bl	c74 <gc_dump_info>
}
   1b330:	bf00      	nop
   1b332:	3708      	adds	r7, #8
   1b334:	46bd      	mov	sp, r7
   1b336:	bd80      	pop	{r7, pc}
   1b338:	20000004 	.word	0x20000004

0001b33c <mp_lexer_new_from_file>:

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
   1b33c:	b580      	push	{r7, lr}
   1b33e:	b082      	sub	sp, #8
   1b340:	af00      	add	r7, sp, #0
   1b342:	6078      	str	r0, [r7, #4]
    mp_raise_OSError(MP_ENOENT);
   1b344:	2002      	movs	r0, #2
   1b346:	f7f1 fe31 	bl	cfac <mp_raise_OSError>
   1b34a:	bf00      	nop

0001b34c <mp_import_stat>:
}

mp_import_stat_t mp_import_stat(const char *path) { // @suppress("Type cannot be resolved")
   1b34c:	b480      	push	{r7}
   1b34e:	b083      	sub	sp, #12
   1b350:	af00      	add	r7, sp, #0
   1b352:	6078      	str	r0, [r7, #4]
    return MP_IMPORT_STAT_NO_EXIST;
   1b354:	2300      	movs	r3, #0
}
   1b356:	4618      	mov	r0, r3
   1b358:	370c      	adds	r7, #12
   1b35a:	46bd      	mov	sp, r7
   1b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b360:	4770      	bx	lr
   1b362:	bf00      	nop

0001b364 <mp_builtin_open>:

mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1b364:	b480      	push	{r7}
   1b366:	b085      	sub	sp, #20
   1b368:	af00      	add	r7, sp, #0
   1b36a:	60f8      	str	r0, [r7, #12]
   1b36c:	60b9      	str	r1, [r7, #8]
   1b36e:	607a      	str	r2, [r7, #4]
    return mp_const_none;
   1b370:	4b03      	ldr	r3, [pc, #12]	; (1b380 <mp_builtin_open+0x1c>)
}
   1b372:	4618      	mov	r0, r3
   1b374:	3714      	adds	r7, #20
   1b376:	46bd      	mov	sp, r7
   1b378:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b37c:	4770      	bx	lr
   1b37e:	bf00      	nop
   1b380:	00021480 	.word	0x00021480

0001b384 <nlr_jump_fail>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_open_obj, 1, mp_builtin_open);

void nlr_jump_fail(void *val) {
   1b384:	b480      	push	{r7}
   1b386:	b083      	sub	sp, #12
   1b388:	af00      	add	r7, sp, #0
   1b38a:	6078      	str	r0, [r7, #4]
    while (1);
   1b38c:	e7fe      	b.n	1b38c <nlr_jump_fail+0x8>
   1b38e:	bf00      	nop

0001b390 <__fatal_error>:
}

void NORETURN __fatal_error(const char *msg) {
   1b390:	b480      	push	{r7}
   1b392:	b083      	sub	sp, #12
   1b394:	af00      	add	r7, sp, #0
   1b396:	6078      	str	r0, [r7, #4]
    while (1);
   1b398:	e7fe      	b.n	1b398 <__fatal_error+0x8>
   1b39a:	bf00      	nop

0001b39c <__assert_func>:
}

#ifndef NDEBUG
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1b39c:	b580      	push	{r7, lr}
   1b39e:	b084      	sub	sp, #16
   1b3a0:	af00      	add	r7, sp, #0
   1b3a2:	60f8      	str	r0, [r7, #12]
   1b3a4:	60b9      	str	r1, [r7, #8]
   1b3a6:	607a      	str	r2, [r7, #4]
   1b3a8:	603b      	str	r3, [r7, #0]
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   1b3aa:	68bb      	ldr	r3, [r7, #8]
   1b3ac:	68fa      	ldr	r2, [r7, #12]
   1b3ae:	6839      	ldr	r1, [r7, #0]
   1b3b0:	4802      	ldr	r0, [pc, #8]	; (1b3bc <__assert_func+0x20>)
   1b3b2:	f000 f935 	bl	1b620 <printf>
    __fatal_error("Assertion failed");
   1b3b6:	4802      	ldr	r0, [pc, #8]	; (1b3c0 <__assert_func+0x24>)
   1b3b8:	f7ff ffea 	bl	1b390 <__fatal_error>
   1b3bc:	00022cb0 	.word	0x00022cb0
   1b3c0:	00022cd8 	.word	0x00022cd8

0001b3c4 <_start>:
//    0,
//    (uint32_t)&Default_Handler, // PendSV_Handler
//    (uint32_t)&Default_Handler, // SysTick_Handler
//};

void _start(void) {
   1b3c4:	b580      	push	{r7, lr}
   1b3c6:	af00      	add	r7, sp, #0
    // when we get here: stack is initialised, bss is clear, data is copied

    // SCB->CCR: enable 8-byte stack alignment for IRQ handlers, in accord with EABI
    *((volatile uint32_t*)0xe000ed14) |= 1 << 9;
   1b3c8:	4a06      	ldr	r2, [pc, #24]	; (1b3e4 <_start+0x20>)
   1b3ca:	4b06      	ldr	r3, [pc, #24]	; (1b3e4 <_start+0x20>)
   1b3cc:	681b      	ldr	r3, [r3, #0]
   1b3ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b3d2:	6013      	str	r3, [r2, #0]

    // initialise the cpu and peripherals
    #if MICROPY_MIN_USE_TM4C123_MCU
    void tm4c123_init(void);
    tm4c123_init();
   1b3d4:	f000 f808 	bl	1b3e8 <tm4c123_init>
    #endif

    // now that we have a basic system up and running we can call main
    main(0, NULL);
   1b3d8:	2100      	movs	r1, #0
   1b3da:	2000      	movs	r0, #0
   1b3dc:	f7ff ff74 	bl	1b2c8 <main>

    // we must not return
    for (;;) {
    }
   1b3e0:	e7fe      	b.n	1b3e0 <_start+0x1c>
   1b3e2:	bf00      	nop
   1b3e4:	e000ed14 	.word	0xe000ed14

0001b3e8 <tm4c123_init>:

#define SYSCTL ((periph_sysctl_t*)  0x400FE000)



void tm4c123_init(void) {
   1b3e8:	b480      	push	{r7}
   1b3ea:	af00      	add	r7, sp, #0
    // basic MCU config

    // set system clock to 80MHz
    SYSCTL->RCC |= (uint32_t)0x00000800;   // set BYPASS bit
   1b3ec:	4a4c      	ldr	r2, [pc, #304]	; (1b520 <tm4c123_init+0x138>)
   1b3ee:	4b4c      	ldr	r3, [pc, #304]	; (1b520 <tm4c123_init+0x138>)
   1b3f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b3f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b3f6:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC2 |= (uint32_t)0xC0000800;  // set BYPASS2 bit, DIV400 and USERCC2
   1b3f8:	4a49      	ldr	r2, [pc, #292]	; (1b520 <tm4c123_init+0x138>)
   1b3fa:	4b49      	ldr	r3, [pc, #292]	; (1b520 <tm4c123_init+0x138>)
   1b3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b3fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1b402:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b406:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC &= (uint32_t)0xFFBFFFFF;   // clear USESYSDIV bit
   1b408:	4a45      	ldr	r2, [pc, #276]	; (1b520 <tm4c123_init+0x138>)
   1b40a:	4b45      	ldr	r3, [pc, #276]	; (1b520 <tm4c123_init+0x138>)
   1b40c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b40e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1b412:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC = (SYSCTL->RCC & (uint32_t)0xFFFFF83F) | (uint32_t)0x00000B70;    // XTAL to 16 MHz
   1b414:	4a42      	ldr	r2, [pc, #264]	; (1b520 <tm4c123_init+0x138>)
   1b416:	4b42      	ldr	r3, [pc, #264]	; (1b520 <tm4c123_init+0x138>)
   1b418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b41a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1b41e:	f443 6337 	orr.w	r3, r3, #2928	; 0xb70
   1b422:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->MISC &= 0xFFFFFFBF;            // clear PLLLRIS bit
   1b424:	4a3e      	ldr	r2, [pc, #248]	; (1b520 <tm4c123_init+0x138>)
   1b426:	4b3e      	ldr	r3, [pc, #248]	; (1b520 <tm4c123_init+0x138>)
   1b428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b42a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b42e:	6593      	str	r3, [r2, #88]	; 0x58
    SYSCTL->RCC2 &= (uint32_t)0xFFFFDFFF;  // clear PWRDN2 Bit to enable PLL
   1b430:	4a3b      	ldr	r2, [pc, #236]	; (1b520 <tm4c123_init+0x138>)
   1b432:	4b3b      	ldr	r3, [pc, #236]	; (1b520 <tm4c123_init+0x138>)
   1b434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1b43a:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC2 = (SYSCTL->RCC2 & (uint32_t)0xE03FFFFF) | (uint32_t)0x01000000;  // Set SYSDIV2 to 0x2 for 80MHz
   1b43c:	4a38      	ldr	r2, [pc, #224]	; (1b520 <tm4c123_init+0x138>)
   1b43e:	4b38      	ldr	r3, [pc, #224]	; (1b520 <tm4c123_init+0x138>)
   1b440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b442:	f023 53fe 	bic.w	r3, r3, #532676608	; 0x1fc00000
   1b446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1b44a:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC |= (uint32_t)0x00400000;   // set USESYSDIV bit
   1b44c:	4a34      	ldr	r2, [pc, #208]	; (1b520 <tm4c123_init+0x138>)
   1b44e:	4b34      	ldr	r3, [pc, #208]	; (1b520 <tm4c123_init+0x138>)
   1b450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1b456:	6613      	str	r3, [r2, #96]	; 0x60
    while(!(SYSCTL->RIS & 0x00000040)){};  // wait for Pll to lock, PLLLRIS bit
   1b458:	bf00      	nop
   1b45a:	4b31      	ldr	r3, [pc, #196]	; (1b520 <tm4c123_init+0x138>)
   1b45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b45e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1b462:	2b00      	cmp	r3, #0
   1b464:	d0f9      	beq.n	1b45a <tm4c123_init+0x72>
    SYSCTL->RCC2 &= 0xFFFFF7FF;            // clear BYPASS2 bit, clears BYPASS as well
   1b466:	4a2e      	ldr	r2, [pc, #184]	; (1b520 <tm4c123_init+0x138>)
   1b468:	4b2d      	ldr	r3, [pc, #180]	; (1b520 <tm4c123_init+0x138>)
   1b46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b46c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b470:	6713      	str	r3, [r2, #112]	; 0x70
    // write final configuration
    SYSCTL->RCC = (uint32_t)(0x07C00550);  // 0b0000 0 1111 1 0 0 000 000 0 0 0 10101 01 000 0
   1b472:	4b2b      	ldr	r3, [pc, #172]	; (1b520 <tm4c123_init+0x138>)
   1b474:	4a2b      	ldr	r2, [pc, #172]	; (1b524 <tm4c123_init+0x13c>)
   1b476:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 = (uint32_t)(0xC1000000); // 0b 1100 0001 0000 0000 0000 0000 0000 0000
   1b478:	4b29      	ldr	r3, [pc, #164]	; (1b520 <tm4c123_init+0x138>)
   1b47a:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
   1b47e:	671a      	str	r2, [r3, #112]	; 0x70

    // enable high performance GPIO BUS Ctl
    SYSCTL->GPIOHBCTL = 0x0000003F;
   1b480:	4b27      	ldr	r3, [pc, #156]	; (1b520 <tm4c123_init+0x138>)
   1b482:	223f      	movs	r2, #63	; 0x3f
   1b484:	66da      	str	r2, [r3, #108]	; 0x6c

    // enable GPIO Port F
        SYSCTL->RCGCGPIO |= 0x00000020;
   1b486:	4a26      	ldr	r2, [pc, #152]	; (1b520 <tm4c123_init+0x138>)
   1b488:	4b25      	ldr	r3, [pc, #148]	; (1b520 <tm4c123_init+0x138>)
   1b48a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b48e:	f043 0320 	orr.w	r3, r3, #32
   1b492:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    //*((volatile uint32_t*)0x400FE608) = 0x00000021;
    while( !(SYSCTL->PRGPIO & 0x00000020)){};
   1b496:	bf00      	nop
   1b498:	4b21      	ldr	r3, [pc, #132]	; (1b520 <tm4c123_init+0x138>)
   1b49a:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b49e:	f003 0320 	and.w	r3, r3, #32
   1b4a2:	2b00      	cmp	r3, #0
   1b4a4:	d0f8      	beq.n	1b498 <tm4c123_init+0xb0>
//    gpio_high(GPIOF, 3);
//    //*((volatile uint32_t*)0x4005D3FC) = 0x00000007;

    // enable UART0 at 9600 baud (TX=A1, RX=A0)
    // enable UART0
    SYSCTL->RCGCUART = 0x00000001;
   1b4a6:	4b1e      	ldr	r3, [pc, #120]	; (1b520 <tm4c123_init+0x138>)
   1b4a8:	2201      	movs	r2, #1
   1b4aa:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    //*((volatile uint32_t*)0x400FE618) = 0x00000001;
    while(SYSCTL->PRUART != 0x00000001){};
   1b4ae:	bf00      	nop
   1b4b0:	4b1b      	ldr	r3, [pc, #108]	; (1b520 <tm4c123_init+0x138>)
   1b4b2:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
   1b4b6:	2b01      	cmp	r3, #1
   1b4b8:	d1fa      	bne.n	1b4b0 <tm4c123_init+0xc8>
    //while( *((volatile uint32_t*)0x400FEA18) != 0x00000001){};

    // enable GPIO Port A
    SYSCTL->RCGCGPIO |= 0x00000001;
   1b4ba:	4a19      	ldr	r2, [pc, #100]	; (1b520 <tm4c123_init+0x138>)
   1b4bc:	4b18      	ldr	r3, [pc, #96]	; (1b520 <tm4c123_init+0x138>)
   1b4be:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b4c2:	f043 0301 	orr.w	r3, r3, #1
   1b4c6:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    while( !(SYSCTL->PRGPIO & 0x00000001)){};
   1b4ca:	bf00      	nop
   1b4cc:	4b14      	ldr	r3, [pc, #80]	; (1b520 <tm4c123_init+0x138>)
   1b4ce:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b4d2:	f003 0301 	and.w	r3, r3, #1
   1b4d6:	2b00      	cmp	r3, #0
   1b4d8:	d0f8      	beq.n	1b4cc <tm4c123_init+0xe4>
//    gpio_init(GPIOA, 1, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);

    // BRD = IBRD + FRAC = UARTSysClk / (ClkDiv * BaudRate)
    // 520.8333 = 104  + 0.166 = 80MHz      / (16     * 9600    )
    // FBRD = (0.833333 * 64 + 0.5) ~ 53
    UART0->CTL &= ~0x00000001;
   1b4da:	4a13      	ldr	r2, [pc, #76]	; (1b528 <tm4c123_init+0x140>)
   1b4dc:	4b12      	ldr	r3, [pc, #72]	; (1b528 <tm4c123_init+0x140>)
   1b4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b4e0:	f023 0301 	bic.w	r3, r3, #1
   1b4e4:	6313      	str	r3, [r2, #48]	; 0x30
    UART0->IBRD = 0x00000208;
   1b4e6:	4b10      	ldr	r3, [pc, #64]	; (1b528 <tm4c123_init+0x140>)
   1b4e8:	f44f 7202 	mov.w	r2, #520	; 0x208
   1b4ec:	625a      	str	r2, [r3, #36]	; 0x24
    UART0->FBRD = 0x00000035;
   1b4ee:	4b0e      	ldr	r3, [pc, #56]	; (1b528 <tm4c123_init+0x140>)
   1b4f0:	2235      	movs	r2, #53	; 0x35
   1b4f2:	629a      	str	r2, [r3, #40]	; 0x28
    UART0->LCRH = 0x00000060; // no stick parity, word length 8bit, FIFO enable, one STOP bit, odd parity, no parity check, no break
   1b4f4:	4b0c      	ldr	r3, [pc, #48]	; (1b528 <tm4c123_init+0x140>)
   1b4f6:	2260      	movs	r2, #96	; 0x60
   1b4f8:	62da      	str	r2, [r3, #44]	; 0x2c
    UART0->CC = 0x00000000;   // use SysClock
   1b4fa:	4b0b      	ldr	r3, [pc, #44]	; (1b528 <tm4c123_init+0x140>)
   1b4fc:	2200      	movs	r2, #0
   1b4fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    UART0->CTL = 0x00000300; // disable cts & rts, RXE, TXE, no loopback, 16x oversampling, TXRIS on IFLS match, no smart card, no low power, no SIR, UART enabled
   1b502:	4b09      	ldr	r3, [pc, #36]	; (1b528 <tm4c123_init+0x140>)
   1b504:	f44f 7240 	mov.w	r2, #768	; 0x300
   1b508:	631a      	str	r2, [r3, #48]	; 0x30
    UART0->CTL |= 0x00000001;
   1b50a:	4a07      	ldr	r2, [pc, #28]	; (1b528 <tm4c123_init+0x140>)
   1b50c:	4b06      	ldr	r3, [pc, #24]	; (1b528 <tm4c123_init+0x140>)
   1b50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b510:	f043 0301 	orr.w	r3, r3, #1
   1b514:	6313      	str	r3, [r2, #48]	; 0x30
    // to change settings in active mode: page 918 of reference
}
   1b516:	bf00      	nop
   1b518:	46bd      	mov	sp, r7
   1b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b51e:	4770      	bx	lr
   1b520:	400fe000 	.word	0x400fe000
   1b524:	07c00550 	.word	0x07c00550
   1b528:	4000c000 	.word	0x4000c000

0001b52c <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
   1b52c:	b580      	push	{r7, lr}
   1b52e:	b082      	sub	sp, #8
   1b530:	af00      	add	r7, sp, #0
    uint32_t *pui32Src, *pui32Dest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_ldata;
   1b532:	4b13      	ldr	r3, [pc, #76]	; (1b580 <zero_loop+0x24>)
   1b534:	607b      	str	r3, [r7, #4]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b536:	4b13      	ldr	r3, [pc, #76]	; (1b584 <zero_loop+0x28>)
   1b538:	603b      	str	r3, [r7, #0]
   1b53a:	e007      	b.n	1b54c <ResetISR+0x20>
    {
        *pui32Dest++ = *pui32Src++;
   1b53c:	683b      	ldr	r3, [r7, #0]
   1b53e:	1d1a      	adds	r2, r3, #4
   1b540:	603a      	str	r2, [r7, #0]
   1b542:	687a      	ldr	r2, [r7, #4]
   1b544:	1d11      	adds	r1, r2, #4
   1b546:	6079      	str	r1, [r7, #4]
   1b548:	6812      	ldr	r2, [r2, #0]
   1b54a:	601a      	str	r2, [r3, #0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b54c:	683b      	ldr	r3, [r7, #0]
   1b54e:	4a0e      	ldr	r2, [pc, #56]	; (1b588 <zero_loop+0x2c>)
   1b550:	4293      	cmp	r3, r2
   1b552:	d3f3      	bcc.n	1b53c <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
   1b554:	4814      	ldr	r0, [pc, #80]	; (1b5a8 <IntDefaultHandler+0x8>)
   1b556:	4915      	ldr	r1, [pc, #84]	; (1b5ac <IntDefaultHandler+0xc>)
   1b558:	f04f 0200 	mov.w	r2, #0

0001b55c <zero_loop>:
   1b55c:	4288      	cmp	r0, r1
   1b55e:	bfb8      	it	lt
   1b560:	f840 2b04 	strlt.w	r2, [r0], #4
   1b564:	dbfa      	blt.n	1b55c <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b566:	4a09      	ldr	r2, [pc, #36]	; (1b58c <zero_loop+0x30>)
   1b568:	4b08      	ldr	r3, [pc, #32]	; (1b58c <zero_loop+0x30>)
   1b56a:	681b      	ldr	r3, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
   1b56c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b570:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    _start();
   1b572:	f7ff ff27 	bl	1b3c4 <_start>
}
   1b576:	bf00      	nop
   1b578:	3708      	adds	r7, #8
   1b57a:	46bd      	mov	sp, r7
   1b57c:	bd80      	pop	{r7, pc}
   1b57e:	bf00      	nop
   1b580:	00022fa0 	.word	0x00022fa0
   1b584:	20000000 	.word	0x20000000
   1b588:	20000004 	.word	0x20000004
   1b58c:	e000ed88 	.word	0xe000ed88

0001b590 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
   1b590:	b480      	push	{r7}
   1b592:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
   1b594:	e7fe      	b.n	1b594 <NmiSR+0x4>
   1b596:	bf00      	nop

0001b598 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
   1b598:	b480      	push	{r7}
   1b59a:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
   1b59c:	e7fe      	b.n	1b59c <FaultISR+0x4>
   1b59e:	bf00      	nop

0001b5a0 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
   1b5a0:	b480      	push	{r7}
   1b5a2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
   1b5a4:	e7fe      	b.n	1b5a4 <IntDefaultHandler+0x4>
   1b5a6:	0000      	.short	0x0000
   1b5a8:	20000004 	.word	0x20000004
   1b5ac:	20000c3c 	.word	0x20000c3c

0001b5b0 <mp_hal_stdin_rx_chr>:
} periph_uart_t;
#define UART0 ((periph_uart_t*)0x4000C000)
#endif

// Receive single character
int mp_hal_stdin_rx_chr(void) {
   1b5b0:	b480      	push	{r7}
   1b5b2:	b083      	sub	sp, #12
   1b5b4:	af00      	add	r7, sp, #0
    unsigned char c = 0;
   1b5b6:	2300      	movs	r3, #0
   1b5b8:	71fb      	strb	r3, [r7, #7]
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    // wait for RXFE to clear
    while (UART0->FR & (1 << 4)) {
   1b5ba:	bf00      	nop
   1b5bc:	4b07      	ldr	r3, [pc, #28]	; (1b5dc <mp_hal_stdin_rx_chr+0x2c>)
   1b5be:	699b      	ldr	r3, [r3, #24]
   1b5c0:	f003 0310 	and.w	r3, r3, #16
   1b5c4:	2b00      	cmp	r3, #0
   1b5c6:	d1f9      	bne.n	1b5bc <mp_hal_stdin_rx_chr+0xc>
    }
    c = UART0->DR & 0xFF;
   1b5c8:	4b04      	ldr	r3, [pc, #16]	; (1b5dc <mp_hal_stdin_rx_chr+0x2c>)
   1b5ca:	681b      	ldr	r3, [r3, #0]
   1b5cc:	71fb      	strb	r3, [r7, #7]
#endif
    return c;
   1b5ce:	79fb      	ldrb	r3, [r7, #7]
}
   1b5d0:	4618      	mov	r0, r3
   1b5d2:	370c      	adds	r7, #12
   1b5d4:	46bd      	mov	sp, r7
   1b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b5da:	4770      	bx	lr
   1b5dc:	4000c000 	.word	0x4000c000

0001b5e0 <mp_hal_stdout_tx_strn>:

// Send string of given length
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
   1b5e0:	b480      	push	{r7}
   1b5e2:	b083      	sub	sp, #12
   1b5e4:	af00      	add	r7, sp, #0
   1b5e6:	6078      	str	r0, [r7, #4]
   1b5e8:	6039      	str	r1, [r7, #0]
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    while (len--) {
   1b5ea:	e00c      	b.n	1b606 <mp_hal_stdout_tx_strn+0x26>
        // wait for TXFF to clear
        while (UART0->FR & (1 << 5)) {
   1b5ec:	bf00      	nop
   1b5ee:	4b0b      	ldr	r3, [pc, #44]	; (1b61c <mp_hal_stdout_tx_strn+0x3c>)
   1b5f0:	699b      	ldr	r3, [r3, #24]
   1b5f2:	f003 0320 	and.w	r3, r3, #32
   1b5f6:	2b00      	cmp	r3, #0
   1b5f8:	d1f9      	bne.n	1b5ee <mp_hal_stdout_tx_strn+0xe>
        }
        UART0->DR = *str++;
   1b5fa:	4908      	ldr	r1, [pc, #32]	; (1b61c <mp_hal_stdout_tx_strn+0x3c>)
   1b5fc:	687b      	ldr	r3, [r7, #4]
   1b5fe:	1c5a      	adds	r2, r3, #1
   1b600:	607a      	str	r2, [r7, #4]
   1b602:	781b      	ldrb	r3, [r3, #0]
   1b604:	600b      	str	r3, [r1, #0]
    while (len--) {
   1b606:	683b      	ldr	r3, [r7, #0]
   1b608:	1e5a      	subs	r2, r3, #1
   1b60a:	603a      	str	r2, [r7, #0]
   1b60c:	2b00      	cmp	r3, #0
   1b60e:	d1ed      	bne.n	1b5ec <mp_hal_stdout_tx_strn+0xc>
    }
#endif
}
   1b610:	bf00      	nop
   1b612:	370c      	adds	r7, #12
   1b614:	46bd      	mov	sp, r7
   1b616:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b61a:	4770      	bx	lr
   1b61c:	4000c000 	.word	0x4000c000

0001b620 <printf>:
int putchar(int c);
int puts(const char *s);
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap);
int snprintf(char *str, size_t size, const char *fmt, ...);

int printf(const char *fmt, ...) {
   1b620:	b40f      	push	{r0, r1, r2, r3}
   1b622:	b580      	push	{r7, lr}
   1b624:	b082      	sub	sp, #8
   1b626:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1b628:	f107 0314 	add.w	r3, r7, #20
   1b62c:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   1b62e:	683a      	ldr	r2, [r7, #0]
   1b630:	6939      	ldr	r1, [r7, #16]
   1b632:	4806      	ldr	r0, [pc, #24]	; (1b64c <printf+0x2c>)
   1b634:	f7e6 fc5a 	bl	1eec <mp_vprintf>
   1b638:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1b63a:	687b      	ldr	r3, [r7, #4]
}
   1b63c:	4618      	mov	r0, r3
   1b63e:	3708      	adds	r7, #8
   1b640:	46bd      	mov	sp, r7
   1b642:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b646:	b004      	add	sp, #16
   1b648:	4770      	bx	lr
   1b64a:	bf00      	nop
   1b64c:	0001d838 	.word	0x0001d838

0001b650 <vprintf>:

int vprintf(const char *fmt, va_list ap) {
   1b650:	b580      	push	{r7, lr}
   1b652:	b082      	sub	sp, #8
   1b654:	af00      	add	r7, sp, #0
   1b656:	6078      	str	r0, [r7, #4]
   1b658:	6039      	str	r1, [r7, #0]
    return mp_vprintf(&mp_plat_print, fmt, ap);
   1b65a:	683a      	ldr	r2, [r7, #0]
   1b65c:	6879      	ldr	r1, [r7, #4]
   1b65e:	4804      	ldr	r0, [pc, #16]	; (1b670 <vprintf+0x20>)
   1b660:	f7e6 fc44 	bl	1eec <mp_vprintf>
   1b664:	4603      	mov	r3, r0
}
   1b666:	4618      	mov	r0, r3
   1b668:	3708      	adds	r7, #8
   1b66a:	46bd      	mov	sp, r7
   1b66c:	bd80      	pop	{r7, pc}
   1b66e:	bf00      	nop
   1b670:	0001d838 	.word	0x0001d838

0001b674 <putchar>:

// need this because gcc optimises printf("%c", c) -> putchar(c), and printf("a") -> putchar('a')
int putchar(int c) {
   1b674:	b580      	push	{r7, lr}
   1b676:	b084      	sub	sp, #16
   1b678:	af00      	add	r7, sp, #0
   1b67a:	6078      	str	r0, [r7, #4]
    char chr = c;
   1b67c:	687b      	ldr	r3, [r7, #4]
   1b67e:	b2db      	uxtb	r3, r3
   1b680:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b682:	f107 030f 	add.w	r3, r7, #15
   1b686:	2101      	movs	r1, #1
   1b688:	4618      	mov	r0, r3
   1b68a:	f000 f88d 	bl	1b7a8 <mp_hal_stdout_tx_strn_cooked>
    return chr;
   1b68e:	7bfb      	ldrb	r3, [r7, #15]
}
   1b690:	4618      	mov	r0, r3
   1b692:	3710      	adds	r7, #16
   1b694:	46bd      	mov	sp, r7
   1b696:	bd80      	pop	{r7, pc}

0001b698 <puts>:

// need this because gcc optimises printf("string\n") -> puts("string")
int puts(const char *s) {
   1b698:	b580      	push	{r7, lr}
   1b69a:	b084      	sub	sp, #16
   1b69c:	af00      	add	r7, sp, #0
   1b69e:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   1b6a0:	6878      	ldr	r0, [r7, #4]
   1b6a2:	f000 fc71 	bl	1bf88 <strlen>
   1b6a6:	4603      	mov	r3, r0
   1b6a8:	4619      	mov	r1, r3
   1b6aa:	6878      	ldr	r0, [r7, #4]
   1b6ac:	f000 f87c 	bl	1b7a8 <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1b6b0:	230a      	movs	r3, #10
   1b6b2:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b6b4:	f107 030f 	add.w	r3, r7, #15
   1b6b8:	2101      	movs	r1, #1
   1b6ba:	4618      	mov	r0, r3
   1b6bc:	f000 f874 	bl	1b7a8 <mp_hal_stdout_tx_strn_cooked>
    return 1;
   1b6c0:	2301      	movs	r3, #1
}
   1b6c2:	4618      	mov	r0, r3
   1b6c4:	3710      	adds	r7, #16
   1b6c6:	46bd      	mov	sp, r7
   1b6c8:	bd80      	pop	{r7, pc}
   1b6ca:	bf00      	nop

0001b6cc <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   1b6cc:	b580      	push	{r7, lr}
   1b6ce:	b086      	sub	sp, #24
   1b6d0:	af00      	add	r7, sp, #0
   1b6d2:	60f8      	str	r0, [r7, #12]
   1b6d4:	60b9      	str	r1, [r7, #8]
   1b6d6:	607a      	str	r2, [r7, #4]
    strn_print_env_t *strn_print_env = data;
   1b6d8:	68fb      	ldr	r3, [r7, #12]
   1b6da:	617b      	str	r3, [r7, #20]
    if (len > strn_print_env->remain) {
   1b6dc:	697b      	ldr	r3, [r7, #20]
   1b6de:	685a      	ldr	r2, [r3, #4]
   1b6e0:	687b      	ldr	r3, [r7, #4]
   1b6e2:	429a      	cmp	r2, r3
   1b6e4:	d202      	bcs.n	1b6ec <strn_print_strn+0x20>
        len = strn_print_env->remain;
   1b6e6:	697b      	ldr	r3, [r7, #20]
   1b6e8:	685b      	ldr	r3, [r3, #4]
   1b6ea:	607b      	str	r3, [r7, #4]
    }
    memcpy(strn_print_env->cur, str, len);
   1b6ec:	697b      	ldr	r3, [r7, #20]
   1b6ee:	681b      	ldr	r3, [r3, #0]
   1b6f0:	687a      	ldr	r2, [r7, #4]
   1b6f2:	68b9      	ldr	r1, [r7, #8]
   1b6f4:	4618      	mov	r0, r3
   1b6f6:	f000 fb0d 	bl	1bd14 <memcpy>
    strn_print_env->cur += len;
   1b6fa:	697b      	ldr	r3, [r7, #20]
   1b6fc:	681a      	ldr	r2, [r3, #0]
   1b6fe:	687b      	ldr	r3, [r7, #4]
   1b700:	441a      	add	r2, r3
   1b702:	697b      	ldr	r3, [r7, #20]
   1b704:	601a      	str	r2, [r3, #0]
    strn_print_env->remain -= len;
   1b706:	697b      	ldr	r3, [r7, #20]
   1b708:	685a      	ldr	r2, [r3, #4]
   1b70a:	687b      	ldr	r3, [r7, #4]
   1b70c:	1ad2      	subs	r2, r2, r3
   1b70e:	697b      	ldr	r3, [r7, #20]
   1b710:	605a      	str	r2, [r3, #4]
}
   1b712:	bf00      	nop
   1b714:	3718      	adds	r7, #24
   1b716:	46bd      	mov	sp, r7
   1b718:	bd80      	pop	{r7, pc}
   1b71a:	bf00      	nop

0001b71c <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   1b71c:	b580      	push	{r7, lr}
   1b71e:	b08a      	sub	sp, #40	; 0x28
   1b720:	af00      	add	r7, sp, #0
   1b722:	60f8      	str	r0, [r7, #12]
   1b724:	60b9      	str	r1, [r7, #8]
   1b726:	607a      	str	r2, [r7, #4]
   1b728:	603b      	str	r3, [r7, #0]
    strn_print_env_t strn_print_env = {str, size};
   1b72a:	68fb      	ldr	r3, [r7, #12]
   1b72c:	61fb      	str	r3, [r7, #28]
   1b72e:	68bb      	ldr	r3, [r7, #8]
   1b730:	623b      	str	r3, [r7, #32]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1b732:	f107 031c 	add.w	r3, r7, #28
   1b736:	617b      	str	r3, [r7, #20]
   1b738:	4b0e      	ldr	r3, [pc, #56]	; (1b774 <vsnprintf+0x58>)
   1b73a:	61bb      	str	r3, [r7, #24]
    int len = mp_vprintf(&print, fmt, ap);
   1b73c:	f107 0314 	add.w	r3, r7, #20
   1b740:	683a      	ldr	r2, [r7, #0]
   1b742:	6879      	ldr	r1, [r7, #4]
   1b744:	4618      	mov	r0, r3
   1b746:	f7e6 fbd1 	bl	1eec <mp_vprintf>
   1b74a:	6278      	str	r0, [r7, #36]	; 0x24
    // add terminating null byte
    if (size > 0) {
   1b74c:	68bb      	ldr	r3, [r7, #8]
   1b74e:	2b00      	cmp	r3, #0
   1b750:	d00a      	beq.n	1b768 <vsnprintf+0x4c>
        if (strn_print_env.remain == 0) {
   1b752:	6a3b      	ldr	r3, [r7, #32]
   1b754:	2b00      	cmp	r3, #0
   1b756:	d104      	bne.n	1b762 <vsnprintf+0x46>
            strn_print_env.cur[-1] = 0;
   1b758:	69fb      	ldr	r3, [r7, #28]
   1b75a:	3b01      	subs	r3, #1
   1b75c:	2200      	movs	r2, #0
   1b75e:	701a      	strb	r2, [r3, #0]
   1b760:	e002      	b.n	1b768 <vsnprintf+0x4c>
        } else {
            strn_print_env.cur[0] = 0;
   1b762:	69fb      	ldr	r3, [r7, #28]
   1b764:	2200      	movs	r2, #0
   1b766:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
   1b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b76a:	4618      	mov	r0, r3
   1b76c:	3728      	adds	r7, #40	; 0x28
   1b76e:	46bd      	mov	sp, r7
   1b770:	bd80      	pop	{r7, pc}
   1b772:	bf00      	nop
   1b774:	0001b6cd 	.word	0x0001b6cd

0001b778 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1b778:	b40c      	push	{r2, r3}
   1b77a:	b580      	push	{r7, lr}
   1b77c:	b084      	sub	sp, #16
   1b77e:	af00      	add	r7, sp, #0
   1b780:	6078      	str	r0, [r7, #4]
   1b782:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start(ap, fmt);
   1b784:	f107 031c 	add.w	r3, r7, #28
   1b788:	60bb      	str	r3, [r7, #8]
    int ret = vsnprintf(str, size, fmt, ap);
   1b78a:	68bb      	ldr	r3, [r7, #8]
   1b78c:	69ba      	ldr	r2, [r7, #24]
   1b78e:	6839      	ldr	r1, [r7, #0]
   1b790:	6878      	ldr	r0, [r7, #4]
   1b792:	f7ff ffc3 	bl	1b71c <vsnprintf>
   1b796:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
   1b798:	68fb      	ldr	r3, [r7, #12]
}
   1b79a:	4618      	mov	r0, r3
   1b79c:	3710      	adds	r7, #16
   1b79e:	46bd      	mov	sp, r7
   1b7a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b7a4:	b002      	add	sp, #8
   1b7a6:	4770      	bx	lr

0001b7a8 <mp_hal_stdout_tx_strn_cooked>:
 * implementation below can be used.
 */

// Send "cooked" string of given length, where every occurrence of
// LF character is replaced with CR LF.
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   1b7a8:	b580      	push	{r7, lr}
   1b7aa:	b082      	sub	sp, #8
   1b7ac:	af00      	add	r7, sp, #0
   1b7ae:	6078      	str	r0, [r7, #4]
   1b7b0:	6039      	str	r1, [r7, #0]
    while (len--) {
   1b7b2:	e00e      	b.n	1b7d2 <mp_hal_stdout_tx_strn_cooked+0x2a>
        if (*str == '\n') {
   1b7b4:	687b      	ldr	r3, [r7, #4]
   1b7b6:	781b      	ldrb	r3, [r3, #0]
   1b7b8:	2b0a      	cmp	r3, #10
   1b7ba:	d103      	bne.n	1b7c4 <mp_hal_stdout_tx_strn_cooked+0x1c>
            mp_hal_stdout_tx_strn("\r", 1);
   1b7bc:	2101      	movs	r1, #1
   1b7be:	4809      	ldr	r0, [pc, #36]	; (1b7e4 <mp_hal_stdout_tx_strn_cooked+0x3c>)
   1b7c0:	f7ff ff0e 	bl	1b5e0 <mp_hal_stdout_tx_strn>
        }
        mp_hal_stdout_tx_strn(str++, 1);
   1b7c4:	687b      	ldr	r3, [r7, #4]
   1b7c6:	1c5a      	adds	r2, r3, #1
   1b7c8:	607a      	str	r2, [r7, #4]
   1b7ca:	2101      	movs	r1, #1
   1b7cc:	4618      	mov	r0, r3
   1b7ce:	f7ff ff07 	bl	1b5e0 <mp_hal_stdout_tx_strn>
    while (len--) {
   1b7d2:	683b      	ldr	r3, [r7, #0]
   1b7d4:	1e5a      	subs	r2, r3, #1
   1b7d6:	603a      	str	r2, [r7, #0]
   1b7d8:	2b00      	cmp	r3, #0
   1b7da:	d1eb      	bne.n	1b7b4 <mp_hal_stdout_tx_strn_cooked+0xc>
    }
}
   1b7dc:	bf00      	nop
   1b7de:	3708      	adds	r7, #8
   1b7e0:	46bd      	mov	sp, r7
   1b7e2:	bd80      	pop	{r7, pc}
   1b7e4:	00022cec 	.word	0x00022cec

0001b7e8 <mp_hal_stdout_tx_str>:

// Send zero-terminated string
void mp_hal_stdout_tx_str(const char *str) {
   1b7e8:	b580      	push	{r7, lr}
   1b7ea:	b082      	sub	sp, #8
   1b7ec:	af00      	add	r7, sp, #0
   1b7ee:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn(str, strlen(str));
   1b7f0:	6878      	ldr	r0, [r7, #4]
   1b7f2:	f000 fbc9 	bl	1bf88 <strlen>
   1b7f6:	4603      	mov	r3, r0
   1b7f8:	4619      	mov	r1, r3
   1b7fa:	6878      	ldr	r0, [r7, #4]
   1b7fc:	f7ff fef0 	bl	1b5e0 <mp_hal_stdout_tx_strn>
}
   1b800:	bf00      	nop
   1b802:	3708      	adds	r7, #8
   1b804:	46bd      	mov	sp, r7
   1b806:	bd80      	pop	{r7, pc}

0001b808 <vstr_reset>:
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1b808:	b480      	push	{r7}
   1b80a:	b083      	sub	sp, #12
   1b80c:	af00      	add	r7, sp, #0
   1b80e:	6078      	str	r0, [r7, #4]
   1b810:	687b      	ldr	r3, [r7, #4]
   1b812:	2200      	movs	r2, #0
   1b814:	605a      	str	r2, [r3, #4]
   1b816:	bf00      	nop
   1b818:	370c      	adds	r7, #12
   1b81a:	46bd      	mov	sp, r7
   1b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b820:	4770      	bx	lr
   1b822:	bf00      	nop

0001b824 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1b824:	b480      	push	{r7}
   1b826:	b083      	sub	sp, #12
   1b828:	af00      	add	r7, sp, #0
   1b82a:	6078      	str	r0, [r7, #4]
   1b82c:	687b      	ldr	r3, [r7, #4]
   1b82e:	685b      	ldr	r3, [r3, #4]
   1b830:	4618      	mov	r0, r3
   1b832:	370c      	adds	r7, #12
   1b834:	46bd      	mov	sp, r7
   1b836:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b83a:	4770      	bx	lr

0001b83c <mp_hal_ticks_ms>:
static inline mp_uint_t mp_hal_ticks_ms(void) { return 0; }
   1b83c:	b480      	push	{r7}
   1b83e:	af00      	add	r7, sp, #0
   1b840:	2300      	movs	r3, #0
   1b842:	4618      	mov	r0, r3
   1b844:	46bd      	mov	sp, r7
   1b846:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b84a:	4770      	bx	lr

0001b84c <mp_hal_set_interrupt_char>:
static inline void mp_hal_set_interrupt_char(char c) {}
   1b84c:	b480      	push	{r7}
   1b84e:	b083      	sub	sp, #12
   1b850:	af00      	add	r7, sp, #0
   1b852:	4603      	mov	r3, r0
   1b854:	71fb      	strb	r3, [r7, #7]
   1b856:	bf00      	nop
   1b858:	370c      	adds	r7, #12
   1b85a:	46bd      	mov	sp, r7
   1b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b860:	4770      	bx	lr
   1b862:	bf00      	nop

0001b864 <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1b864:	b580      	push	{r7, lr}
   1b866:	b0a0      	sub	sp, #128	; 0x80
   1b868:	af02      	add	r7, sp, #8
   1b86a:	60f8      	str	r0, [r7, #12]
   1b86c:	60b9      	str	r1, [r7, #8]
   1b86e:	607a      	str	r2, [r7, #4]
    int ret = 0;
   1b870:	2300      	movs	r3, #0
   1b872:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t start = 0;
   1b874:	2300      	movs	r3, #0
   1b876:	673b      	str	r3, [r7, #112]	; 0x70

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1b878:	4b5f      	ldr	r3, [pc, #380]	; (1b9f8 <parse_compile_execute+0x194>)
   1b87a:	2200      	movs	r2, #0
   1b87c:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b87e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1b882:	4618      	mov	r0, r3
   1b884:	f7e4 fd1a 	bl	2bc <nlr_push>
   1b888:	4603      	mov	r3, r0
   1b88a:	2b00      	cmp	r3, #0
   1b88c:	d15b      	bne.n	1b946 <parse_compile_execute+0xe2>
        mp_obj_t module_fun;
        #if MICROPY_MODULE_FROZEN_MPY
        if (exec_flags & EXEC_FLAG_SOURCE_IS_RAW_CODE) {
   1b88e:	687b      	ldr	r3, [r7, #4]
   1b890:	f003 0308 	and.w	r3, r3, #8
   1b894:	2b00      	cmp	r3, #0
   1b896:	d006      	beq.n	1b8a6 <parse_compile_execute+0x42>
            // source is a raw_code object, create the function
            module_fun = mp_make_function_from_raw_code(source, MP_OBJ_NULL, MP_OBJ_NULL);
   1b898:	2200      	movs	r2, #0
   1b89a:	2100      	movs	r1, #0
   1b89c:	68f8      	ldr	r0, [r7, #12]
   1b89e:	f7ef fcab 	bl	b1f8 <mp_make_function_from_raw_code>
   1b8a2:	66f8      	str	r0, [r7, #108]	; 0x6c
   1b8a4:	e035      	b.n	1b912 <parse_compile_execute+0xae>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1b8a6:	687b      	ldr	r3, [r7, #4]
   1b8a8:	f003 0310 	and.w	r3, r3, #16
   1b8ac:	2b00      	cmp	r3, #0
   1b8ae:	d00b      	beq.n	1b8c8 <parse_compile_execute+0x64>
                const vstr_t *vstr = source;
   1b8b0:	68fb      	ldr	r3, [r7, #12]
   1b8b2:	667b      	str	r3, [r7, #100]	; 0x64
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1b8b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1b8b6:	6899      	ldr	r1, [r3, #8]
   1b8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1b8ba:	685a      	ldr	r2, [r3, #4]
   1b8bc:	2300      	movs	r3, #0
   1b8be:	2036      	movs	r0, #54	; 0x36
   1b8c0:	f7e7 ff48 	bl	3754 <mp_lexer_new_from_str_len>
   1b8c4:	66b8      	str	r0, [r7, #104]	; 0x68
   1b8c6:	e00b      	b.n	1b8e0 <parse_compile_execute+0x7c>
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1b8c8:	687b      	ldr	r3, [r7, #4]
   1b8ca:	f003 0320 	and.w	r3, r3, #32
   1b8ce:	2b00      	cmp	r3, #0
   1b8d0:	d004      	beq.n	1b8dc <parse_compile_execute+0x78>
                lex = mp_lexer_new_from_file(source);
   1b8d2:	68f8      	ldr	r0, [r7, #12]
   1b8d4:	f7ff fd32 	bl	1b33c <mp_lexer_new_from_file>
   1b8d8:	66b8      	str	r0, [r7, #104]	; 0x68
   1b8da:	e001      	b.n	1b8e0 <parse_compile_execute+0x7c>
            } else {
                lex = (mp_lexer_t*)source;
   1b8dc:	68fb      	ldr	r3, [r7, #12]
   1b8de:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1b8e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1b8e2:	681b      	ldr	r3, [r3, #0]
   1b8e4:	663b      	str	r3, [r7, #96]	; 0x60
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b8e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1b8ea:	68ba      	ldr	r2, [r7, #8]
   1b8ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1b8ee:	4618      	mov	r0, r3
   1b8f0:	f7e8 fd2c 	bl	434c <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1b8f4:	687b      	ldr	r3, [r7, #4]
   1b8f6:	f003 0304 	and.w	r3, r3, #4
   1b8fa:	2b00      	cmp	r3, #0
   1b8fc:	bf14      	ite	ne
   1b8fe:	2301      	movne	r3, #1
   1b900:	2300      	moveq	r3, #0
   1b902:	b2db      	uxtb	r3, r3
   1b904:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1b908:	2200      	movs	r2, #0
   1b90a:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1b90c:	f7ed ff34 	bl	9778 <mp_compile>
   1b910:	66f8      	str	r0, [r7, #108]	; 0x6c
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1b912:	2003      	movs	r0, #3
   1b914:	f7ff ff9a 	bl	1b84c <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1b918:	f7ff ff90 	bl	1b83c <mp_hal_ticks_ms>
   1b91c:	6738      	str	r0, [r7, #112]	; 0x70
        mp_call_function_0(module_fun);
   1b91e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   1b920:	f7f0 fa42 	bl	bda8 <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1b924:	20ff      	movs	r0, #255	; 0xff
   1b926:	f7ff ff91 	bl	1b84c <mp_hal_set_interrupt_char>
        nlr_pop();
   1b92a:	f7e4 fcb5 	bl	298 <nlr_pop>
        ret = 1;
   1b92e:	2301      	movs	r3, #1
   1b930:	677b      	str	r3, [r7, #116]	; 0x74
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1b932:	687b      	ldr	r3, [r7, #4]
   1b934:	f003 0301 	and.w	r3, r3, #1
   1b938:	2b00      	cmp	r3, #0
   1b93a:	d024      	beq.n	1b986 <parse_compile_execute+0x122>
            mp_hal_stdout_tx_strn("\x04", 1);
   1b93c:	2101      	movs	r1, #1
   1b93e:	482f      	ldr	r0, [pc, #188]	; (1b9fc <parse_compile_execute+0x198>)
   1b940:	f7ff fe4e 	bl	1b5e0 <mp_hal_stdout_tx_strn>
   1b944:	e01f      	b.n	1b986 <parse_compile_execute+0x122>
        }
    } else {
        // uncaught exception
        // FIXME it could be that an interrupt happens just before we disable it here
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1b946:	20ff      	movs	r0, #255	; 0xff
   1b948:	f7ff ff80 	bl	1b84c <mp_hal_set_interrupt_char>
        // print EOF after normal output
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1b94c:	687b      	ldr	r3, [r7, #4]
   1b94e:	f003 0301 	and.w	r3, r3, #1
   1b952:	2b00      	cmp	r3, #0
   1b954:	d003      	beq.n	1b95e <parse_compile_execute+0xfa>
            mp_hal_stdout_tx_strn("\x04", 1);
   1b956:	2101      	movs	r1, #1
   1b958:	4828      	ldr	r0, [pc, #160]	; (1b9fc <parse_compile_execute+0x198>)
   1b95a:	f7ff fe41 	bl	1b5e0 <mp_hal_stdout_tx_strn>
        }
        // check for SystemExit
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_SystemExit))) {
   1b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b960:	681b      	ldr	r3, [r3, #0]
   1b962:	4927      	ldr	r1, [pc, #156]	; (1ba00 <parse_compile_execute+0x19c>)
   1b964:	4618      	mov	r0, r3
   1b966:	f7fb fca9 	bl	172bc <mp_obj_is_subclass_fast>
   1b96a:	4603      	mov	r3, r0
   1b96c:	2b00      	cmp	r3, #0
   1b96e:	d003      	beq.n	1b978 <parse_compile_execute+0x114>
            // at the moment, the value of SystemExit is unused
            ret = pyexec_system_exit;
   1b970:	4b21      	ldr	r3, [pc, #132]	; (1b9f8 <parse_compile_execute+0x194>)
   1b972:	681b      	ldr	r3, [r3, #0]
   1b974:	677b      	str	r3, [r7, #116]	; 0x74
   1b976:	e006      	b.n	1b986 <parse_compile_execute+0x122>
        } else {
            mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
   1b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b97a:	4619      	mov	r1, r3
   1b97c:	4821      	ldr	r0, [pc, #132]	; (1ba04 <parse_compile_execute+0x1a0>)
   1b97e:	f7f1 ff93 	bl	d8a8 <mp_obj_print_exception>
            ret = 0;
   1b982:	2300      	movs	r3, #0
   1b984:	677b      	str	r3, [r7, #116]	; 0x74
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1b986:	687b      	ldr	r3, [r7, #4]
   1b988:	f003 0302 	and.w	r3, r3, #2
   1b98c:	2b00      	cmp	r3, #0
   1b98e:	d024      	beq.n	1b9da <parse_compile_execute+0x176>
   1b990:	4b1d      	ldr	r3, [pc, #116]	; (1ba08 <parse_compile_execute+0x1a4>)
   1b992:	781b      	ldrb	r3, [r3, #0]
   1b994:	2b00      	cmp	r3, #0
   1b996:	d020      	beq.n	1b9da <parse_compile_execute+0x176>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1b998:	f7ff ff50 	bl	1b83c <mp_hal_ticks_ms>
   1b99c:	4602      	mov	r2, r0
   1b99e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b9a0:	1ad3      	subs	r3, r2, r3
   1b9a2:	65fb      	str	r3, [r7, #92]	; 0x5c
        printf("took " UINT_FMT " ms\n", ticks);
   1b9a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1b9a6:	4819      	ldr	r0, [pc, #100]	; (1ba0c <parse_compile_execute+0x1a8>)
   1b9a8:	f7ff fe3a 	bl	1b620 <printf>
        // qstr info
        {
            size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1b9ac:	f107 0314 	add.w	r3, r7, #20
   1b9b0:	f107 0218 	add.w	r2, r7, #24
   1b9b4:	f107 011c 	add.w	r1, r7, #28
   1b9b8:	f107 0020 	add.w	r0, r7, #32
   1b9bc:	f7e5 fc4c 	bl	1258 <qstr_pool_info>
            printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  "
   1b9c0:	6a39      	ldr	r1, [r7, #32]
   1b9c2:	69fa      	ldr	r2, [r7, #28]
   1b9c4:	69b8      	ldr	r0, [r7, #24]
   1b9c6:	697b      	ldr	r3, [r7, #20]
   1b9c8:	9300      	str	r3, [sp, #0]
   1b9ca:	4603      	mov	r3, r0
   1b9cc:	4810      	ldr	r0, [pc, #64]	; (1ba10 <parse_compile_execute+0x1ac>)
   1b9ce:	f7ff fe27 	bl	1b620 <printf>
                   (unsigned)n_pool, (unsigned)n_qstr, (unsigned)n_str_data_bytes, (unsigned)n_total_bytes);
        }

        #if MICROPY_ENABLE_GC
        // run collection and print GC info
        gc_collect();
   1b9d2:	f7ff fc99 	bl	1b308 <gc_collect>
        gc_dump_info();
   1b9d6:	f7e5 f94d 	bl	c74 <gc_dump_info>
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1b9da:	687b      	ldr	r3, [r7, #4]
   1b9dc:	f003 0301 	and.w	r3, r3, #1
   1b9e0:	2b00      	cmp	r3, #0
   1b9e2:	d003      	beq.n	1b9ec <parse_compile_execute+0x188>
        mp_hal_stdout_tx_strn("\x04", 1);
   1b9e4:	2101      	movs	r1, #1
   1b9e6:	4805      	ldr	r0, [pc, #20]	; (1b9fc <parse_compile_execute+0x198>)
   1b9e8:	f7ff fdfa 	bl	1b5e0 <mp_hal_stdout_tx_strn>
    }

    return ret;
   1b9ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1b9ee:	4618      	mov	r0, r3
   1b9f0:	3778      	adds	r7, #120	; 0x78
   1b9f2:	46bd      	mov	sp, r7
   1b9f4:	bd80      	pop	{r7, pc}
   1b9f6:	bf00      	nop
   1b9f8:	20000a08 	.word	0x20000a08
   1b9fc:	00022cf0 	.word	0x00022cf0
   1ba00:	00020220 	.word	0x00020220
   1ba04:	0001d838 	.word	0x0001d838
   1ba08:	20000a0c 	.word	0x20000a0c
   1ba0c:	00022cf4 	.word	0x00022cf4
   1ba10:	00022d00 	.word	0x00022d00

0001ba14 <pyexec_raw_repl>:
    return res;
}

#else // MICROPY_REPL_EVENT_DRIVEN

int pyexec_raw_repl(void) {
   1ba14:	b580      	push	{r7, lr}
   1ba16:	b086      	sub	sp, #24
   1ba18:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1ba1a:	463b      	mov	r3, r7
   1ba1c:	2120      	movs	r1, #32
   1ba1e:	4618      	mov	r0, r3
   1ba20:	f7e5 fc7c 	bl	131c <vstr_init>

raw_repl_reset:
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1ba24:	482a      	ldr	r0, [pc, #168]	; (1bad0 <pyexec_raw_repl+0xbc>)
   1ba26:	f7ff fedf 	bl	1b7e8 <mp_hal_stdout_tx_str>

    for (;;) {
        vstr_reset(&line);
   1ba2a:	463b      	mov	r3, r7
   1ba2c:	4618      	mov	r0, r3
   1ba2e:	f7ff feeb 	bl	1b808 <vstr_reset>
        mp_hal_stdout_tx_str(">");
   1ba32:	4828      	ldr	r0, [pc, #160]	; (1bad4 <pyexec_raw_repl+0xc0>)
   1ba34:	f7ff fed8 	bl	1b7e8 <mp_hal_stdout_tx_str>
        for (;;) {
            int c = mp_hal_stdin_rx_chr();
   1ba38:	f7ff fdba 	bl	1b5b0 <mp_hal_stdin_rx_chr>
   1ba3c:	6178      	str	r0, [r7, #20]
            if (c == CHAR_CTRL_A) {
   1ba3e:	697b      	ldr	r3, [r7, #20]
   1ba40:	2b01      	cmp	r3, #1
   1ba42:	d100      	bne.n	1ba46 <pyexec_raw_repl+0x32>
                // reset raw REPL
                goto raw_repl_reset;
   1ba44:	e7ee      	b.n	1ba24 <pyexec_raw_repl+0x10>
            } else if (c == CHAR_CTRL_B) {
   1ba46:	697b      	ldr	r3, [r7, #20]
   1ba48:	2b02      	cmp	r3, #2
   1ba4a:	d10b      	bne.n	1ba64 <pyexec_raw_repl+0x50>
                // change to friendly REPL
                mp_hal_stdout_tx_str("\r\n");
   1ba4c:	4822      	ldr	r0, [pc, #136]	; (1bad8 <pyexec_raw_repl+0xc4>)
   1ba4e:	f7ff fecb 	bl	1b7e8 <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1ba52:	463b      	mov	r3, r7
   1ba54:	4618      	mov	r0, r3
   1ba56:	f7e5 fcc5 	bl	13e4 <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1ba5a:	4b20      	ldr	r3, [pc, #128]	; (1badc <pyexec_raw_repl+0xc8>)
   1ba5c:	2201      	movs	r2, #1
   1ba5e:	601a      	str	r2, [r3, #0]
                return 0;
   1ba60:	2300      	movs	r3, #0
   1ba62:	e030      	b.n	1bac6 <pyexec_raw_repl+0xb2>
            } else if (c == CHAR_CTRL_C) {
   1ba64:	697b      	ldr	r3, [r7, #20]
   1ba66:	2b03      	cmp	r3, #3
   1ba68:	d104      	bne.n	1ba74 <pyexec_raw_repl+0x60>
                // clear line
                vstr_reset(&line);
   1ba6a:	463b      	mov	r3, r7
   1ba6c:	4618      	mov	r0, r3
   1ba6e:	f7ff fecb 	bl	1b808 <vstr_reset>
   1ba72:	e7e1      	b.n	1ba38 <pyexec_raw_repl+0x24>
            } else if (c == CHAR_CTRL_D) {
   1ba74:	697b      	ldr	r3, [r7, #20]
   1ba76:	2b04      	cmp	r3, #4
   1ba78:	d007      	beq.n	1ba8a <pyexec_raw_repl+0x76>
                // input finished
                break;
            } else {
                // let through any other raw 8-bit value
                vstr_add_byte(&line, c);
   1ba7a:	697b      	ldr	r3, [r7, #20]
   1ba7c:	b2da      	uxtb	r2, r3
   1ba7e:	463b      	mov	r3, r7
   1ba80:	4611      	mov	r1, r2
   1ba82:	4618      	mov	r0, r3
   1ba84:	f7e5 fda0 	bl	15c8 <vstr_add_byte>
            }
        }
   1ba88:	e7d6      	b.n	1ba38 <pyexec_raw_repl+0x24>
                break;
   1ba8a:	bf00      	nop

        // indicate reception of command
        mp_hal_stdout_tx_str("OK");
   1ba8c:	4814      	ldr	r0, [pc, #80]	; (1bae0 <pyexec_raw_repl+0xcc>)
   1ba8e:	f7ff feab 	bl	1b7e8 <mp_hal_stdout_tx_str>

        if (line.len == 0) {
   1ba92:	687b      	ldr	r3, [r7, #4]
   1ba94:	2b00      	cmp	r3, #0
   1ba96:	d109      	bne.n	1baac <pyexec_raw_repl+0x98>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1ba98:	480f      	ldr	r0, [pc, #60]	; (1bad8 <pyexec_raw_repl+0xc4>)
   1ba9a:	f7ff fea5 	bl	1b7e8 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1ba9e:	463b      	mov	r3, r7
   1baa0:	4618      	mov	r0, r3
   1baa2:	f7e5 fc9f 	bl	13e4 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1baa6:	f44f 7380 	mov.w	r3, #256	; 0x100
   1baaa:	e00c      	b.n	1bac6 <pyexec_raw_repl+0xb2>
        }

        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1baac:	463b      	mov	r3, r7
   1baae:	2211      	movs	r2, #17
   1bab0:	2101      	movs	r1, #1
   1bab2:	4618      	mov	r0, r3
   1bab4:	f7ff fed6 	bl	1b864 <parse_compile_execute>
   1bab8:	6138      	str	r0, [r7, #16]
        if (ret & PYEXEC_FORCED_EXIT) {
   1baba:	693b      	ldr	r3, [r7, #16]
   1babc:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1bac0:	2b00      	cmp	r3, #0
   1bac2:	d0b2      	beq.n	1ba2a <pyexec_raw_repl+0x16>
            return ret;
   1bac4:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1bac6:	4618      	mov	r0, r3
   1bac8:	3718      	adds	r7, #24
   1baca:	46bd      	mov	sp, r7
   1bacc:	bd80      	pop	{r7, pc}
   1bace:	bf00      	nop
   1bad0:	00022d48 	.word	0x00022d48
   1bad4:	00022d64 	.word	0x00022d64
   1bad8:	00022d68 	.word	0x00022d68
   1badc:	20000000 	.word	0x20000000
   1bae0:	00022d6c 	.word	0x00022d6c

0001bae4 <pyexec_friendly_repl>:

int pyexec_friendly_repl(void) {
   1bae4:	b580      	push	{r7, lr}
   1bae6:	b088      	sub	sp, #32
   1bae8:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1baea:	f107 0308 	add.w	r3, r7, #8
   1baee:	2120      	movs	r1, #32
   1baf0:	4618      	mov	r0, r3
   1baf2:	f7e5 fc13 	bl	131c <vstr_init>
    mp_obj_t lcd_o = mp_call_function_0(mp_load_name(qstr_from_str("LCD")));
    mp_call_function_1(mp_load_attr(lcd_o, qstr_from_str("light")), mp_const_true);
#endif

friendly_repl_reset:
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1baf6:	485a      	ldr	r0, [pc, #360]	; (1bc60 <pyexec_friendly_repl+0x17c>)
   1baf8:	f7ff fe76 	bl	1b7e8 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_str("PYB: enabling IRQs\r\n");
            }
        }
        #endif

        vstr_reset(&line);
   1bafc:	f107 0308 	add.w	r3, r7, #8
   1bb00:	4618      	mov	r0, r3
   1bb02:	f7ff fe81 	bl	1b808 <vstr_reset>
        int ret = readline(&line, ">>> ");
   1bb06:	f107 0308 	add.w	r3, r7, #8
   1bb0a:	4956      	ldr	r1, [pc, #344]	; (1bc64 <pyexec_friendly_repl+0x180>)
   1bb0c:	4618      	mov	r0, r3
   1bb0e:	f000 fe89 	bl	1c824 <readline>
   1bb12:	61b8      	str	r0, [r7, #24]
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1bb14:	2300      	movs	r3, #0
   1bb16:	61fb      	str	r3, [r7, #28]

        if (ret == CHAR_CTRL_A) {
   1bb18:	69bb      	ldr	r3, [r7, #24]
   1bb1a:	2b01      	cmp	r3, #1
   1bb1c:	d10c      	bne.n	1bb38 <pyexec_friendly_repl+0x54>
            // change to raw REPL
            mp_hal_stdout_tx_str("\r\n");
   1bb1e:	4852      	ldr	r0, [pc, #328]	; (1bc68 <pyexec_friendly_repl+0x184>)
   1bb20:	f7ff fe62 	bl	1b7e8 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1bb24:	f107 0308 	add.w	r3, r7, #8
   1bb28:	4618      	mov	r0, r3
   1bb2a:	f7e5 fc5b 	bl	13e4 <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1bb2e:	4b4f      	ldr	r3, [pc, #316]	; (1bc6c <pyexec_friendly_repl+0x188>)
   1bb30:	2200      	movs	r2, #0
   1bb32:	601a      	str	r2, [r3, #0]
            return 0;
   1bb34:	2300      	movs	r3, #0
   1bb36:	e08f      	b.n	1bc58 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_B) {
   1bb38:	69bb      	ldr	r3, [r7, #24]
   1bb3a:	2b02      	cmp	r3, #2
   1bb3c:	d103      	bne.n	1bb46 <pyexec_friendly_repl+0x62>
            // reset friendly REPL
            mp_hal_stdout_tx_str("\r\n");
   1bb3e:	484a      	ldr	r0, [pc, #296]	; (1bc68 <pyexec_friendly_repl+0x184>)
   1bb40:	f7ff fe52 	bl	1b7e8 <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1bb44:	e7d7      	b.n	1baf6 <pyexec_friendly_repl+0x12>
        } else if (ret == CHAR_CTRL_C) {
   1bb46:	69bb      	ldr	r3, [r7, #24]
   1bb48:	2b03      	cmp	r3, #3
   1bb4a:	d103      	bne.n	1bb54 <pyexec_friendly_repl+0x70>
            // break
            mp_hal_stdout_tx_str("\r\n");
   1bb4c:	4846      	ldr	r0, [pc, #280]	; (1bc68 <pyexec_friendly_repl+0x184>)
   1bb4e:	f7ff fe4b 	bl	1b7e8 <mp_hal_stdout_tx_str>
            continue;
   1bb52:	e080      	b.n	1bc56 <pyexec_friendly_repl+0x172>
        } else if (ret == CHAR_CTRL_D) {
   1bb54:	69bb      	ldr	r3, [r7, #24]
   1bb56:	2b04      	cmp	r3, #4
   1bb58:	d10a      	bne.n	1bb70 <pyexec_friendly_repl+0x8c>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1bb5a:	4843      	ldr	r0, [pc, #268]	; (1bc68 <pyexec_friendly_repl+0x184>)
   1bb5c:	f7ff fe44 	bl	1b7e8 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1bb60:	f107 0308 	add.w	r3, r7, #8
   1bb64:	4618      	mov	r0, r3
   1bb66:	f7e5 fc3d 	bl	13e4 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1bb6a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1bb6e:	e073      	b.n	1bc58 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_E) {
   1bb70:	69bb      	ldr	r3, [r7, #24]
   1bb72:	2b05      	cmp	r3, #5
   1bb74:	d130      	bne.n	1bbd8 <pyexec_friendly_repl+0xf4>
            // paste mode
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1bb76:	483e      	ldr	r0, [pc, #248]	; (1bc70 <pyexec_friendly_repl+0x18c>)
   1bb78:	f7ff fe36 	bl	1b7e8 <mp_hal_stdout_tx_str>
            vstr_reset(&line);
   1bb7c:	f107 0308 	add.w	r3, r7, #8
   1bb80:	4618      	mov	r0, r3
   1bb82:	f7ff fe41 	bl	1b808 <vstr_reset>
            for (;;) {
                char c = mp_hal_stdin_rx_chr();
   1bb86:	f7ff fd13 	bl	1b5b0 <mp_hal_stdin_rx_chr>
   1bb8a:	4603      	mov	r3, r0
   1bb8c:	b2db      	uxtb	r3, r3
   1bb8e:	71fb      	strb	r3, [r7, #7]
                if (c == CHAR_CTRL_C) {
   1bb90:	79fb      	ldrb	r3, [r7, #7]
   1bb92:	2b03      	cmp	r3, #3
   1bb94:	d103      	bne.n	1bb9e <pyexec_friendly_repl+0xba>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1bb96:	4834      	ldr	r0, [pc, #208]	; (1bc68 <pyexec_friendly_repl+0x184>)
   1bb98:	f7ff fe26 	bl	1b7e8 <mp_hal_stdout_tx_str>
   1bb9c:	e7ae      	b.n	1bafc <pyexec_friendly_repl+0x18>
                    goto input_restart;
                } else if (c == CHAR_CTRL_D) {
   1bb9e:	79fb      	ldrb	r3, [r7, #7]
   1bba0:	2b04      	cmp	r3, #4
   1bba2:	d105      	bne.n	1bbb0 <pyexec_friendly_repl+0xcc>
                    // end of input
                    mp_hal_stdout_tx_str("\r\n");
   1bba4:	4830      	ldr	r0, [pc, #192]	; (1bc68 <pyexec_friendly_repl+0x184>)
   1bba6:	f7ff fe1f 	bl	1b7e8 <mp_hal_stdout_tx_str>
                    } else {
                        mp_hal_stdout_tx_strn(&c, 1);
                    }
                }
            }
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1bbaa:	2301      	movs	r3, #1
   1bbac:	61fb      	str	r3, [r7, #28]
   1bbae:	e041      	b.n	1bc34 <pyexec_friendly_repl+0x150>
                    vstr_add_byte(&line, c);
   1bbb0:	79fa      	ldrb	r2, [r7, #7]
   1bbb2:	f107 0308 	add.w	r3, r7, #8
   1bbb6:	4611      	mov	r1, r2
   1bbb8:	4618      	mov	r0, r3
   1bbba:	f7e5 fd05 	bl	15c8 <vstr_add_byte>
                    if (c == '\r') {
   1bbbe:	79fb      	ldrb	r3, [r7, #7]
   1bbc0:	2b0d      	cmp	r3, #13
   1bbc2:	d103      	bne.n	1bbcc <pyexec_friendly_repl+0xe8>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1bbc4:	482b      	ldr	r0, [pc, #172]	; (1bc74 <pyexec_friendly_repl+0x190>)
   1bbc6:	f7ff fe0f 	bl	1b7e8 <mp_hal_stdout_tx_str>
   1bbca:	e7dc      	b.n	1bb86 <pyexec_friendly_repl+0xa2>
                        mp_hal_stdout_tx_strn(&c, 1);
   1bbcc:	1dfb      	adds	r3, r7, #7
   1bbce:	2101      	movs	r1, #1
   1bbd0:	4618      	mov	r0, r3
   1bbd2:	f7ff fd05 	bl	1b5e0 <mp_hal_stdout_tx_strn>
            }
   1bbd6:	e7d6      	b.n	1bb86 <pyexec_friendly_repl+0xa2>
        } else if (vstr_len(&line) == 0) {
   1bbd8:	f107 0308 	add.w	r3, r7, #8
   1bbdc:	4618      	mov	r0, r3
   1bbde:	f7ff fe21 	bl	1b824 <vstr_len>
   1bbe2:	4603      	mov	r3, r0
   1bbe4:	2b00      	cmp	r3, #0
   1bbe6:	d035      	beq.n	1bc54 <pyexec_friendly_repl+0x170>
            continue;
        } else {
            // got a line with non-zero length, see if it needs continuing
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1bbe8:	e016      	b.n	1bc18 <pyexec_friendly_repl+0x134>
                vstr_add_byte(&line, '\n');
   1bbea:	f107 0308 	add.w	r3, r7, #8
   1bbee:	210a      	movs	r1, #10
   1bbf0:	4618      	mov	r0, r3
   1bbf2:	f7e5 fce9 	bl	15c8 <vstr_add_byte>
                ret = readline(&line, "... ");
   1bbf6:	f107 0308 	add.w	r3, r7, #8
   1bbfa:	491f      	ldr	r1, [pc, #124]	; (1bc78 <pyexec_friendly_repl+0x194>)
   1bbfc:	4618      	mov	r0, r3
   1bbfe:	f000 fe11 	bl	1c824 <readline>
   1bc02:	61b8      	str	r0, [r7, #24]
                if (ret == CHAR_CTRL_C) {
   1bc04:	69bb      	ldr	r3, [r7, #24]
   1bc06:	2b03      	cmp	r3, #3
   1bc08:	d103      	bne.n	1bc12 <pyexec_friendly_repl+0x12e>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1bc0a:	4817      	ldr	r0, [pc, #92]	; (1bc68 <pyexec_friendly_repl+0x184>)
   1bc0c:	f7ff fdec 	bl	1b7e8 <mp_hal_stdout_tx_str>
                    goto input_restart;
   1bc10:	e774      	b.n	1bafc <pyexec_friendly_repl+0x18>
                } else if (ret == CHAR_CTRL_D) {
   1bc12:	69bb      	ldr	r3, [r7, #24]
   1bc14:	2b04      	cmp	r3, #4
   1bc16:	d00c      	beq.n	1bc32 <pyexec_friendly_repl+0x14e>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1bc18:	f107 0308 	add.w	r3, r7, #8
   1bc1c:	4618      	mov	r0, r3
   1bc1e:	f7e5 fcb7 	bl	1590 <vstr_null_terminated_str>
   1bc22:	4603      	mov	r3, r0
   1bc24:	4618      	mov	r0, r3
   1bc26:	f7fe ff4f 	bl	1aac8 <mp_repl_continue_with_input>
   1bc2a:	4603      	mov	r3, r0
   1bc2c:	2b00      	cmp	r3, #0
   1bc2e:	d1dc      	bne.n	1bbea <pyexec_friendly_repl+0x106>
   1bc30:	e000      	b.n	1bc34 <pyexec_friendly_repl+0x150>
                    // stop entering compound statement
                    break;
   1bc32:	bf00      	nop
                }
            }
        }

        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1bc34:	f107 0308 	add.w	r3, r7, #8
   1bc38:	2216      	movs	r2, #22
   1bc3a:	69f9      	ldr	r1, [r7, #28]
   1bc3c:	4618      	mov	r0, r3
   1bc3e:	f7ff fe11 	bl	1b864 <parse_compile_execute>
   1bc42:	61b8      	str	r0, [r7, #24]
        if (ret & PYEXEC_FORCED_EXIT) {
   1bc44:	69bb      	ldr	r3, [r7, #24]
   1bc46:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1bc4a:	2b00      	cmp	r3, #0
   1bc4c:	f43f af56 	beq.w	1bafc <pyexec_friendly_repl+0x18>
            return ret;
   1bc50:	69bb      	ldr	r3, [r7, #24]
   1bc52:	e001      	b.n	1bc58 <pyexec_friendly_repl+0x174>
            continue;
   1bc54:	bf00      	nop
        }
    }
   1bc56:	e751      	b.n	1bafc <pyexec_friendly_repl+0x18>
}
   1bc58:	4618      	mov	r0, r3
   1bc5a:	3720      	adds	r7, #32
   1bc5c:	46bd      	mov	sp, r7
   1bc5e:	bd80      	pop	{r7, pc}
   1bc60:	00022d70 	.word	0x00022d70
   1bc64:	00022dc8 	.word	0x00022dc8
   1bc68:	00022d68 	.word	0x00022d68
   1bc6c:	20000000 	.word	0x20000000
   1bc70:	00022dd0 	.word	0x00022dd0
   1bc74:	00022e08 	.word	0x00022e08
   1bc78:	00022e10 	.word	0x00022e10

0001bc7c <pyexec_file>:

#endif // MICROPY_REPL_EVENT_DRIVEN
#endif // MICROPY_ENABLE_COMPILER

int pyexec_file(const char *filename) {
   1bc7c:	b580      	push	{r7, lr}
   1bc7e:	b082      	sub	sp, #8
   1bc80:	af00      	add	r7, sp, #0
   1bc82:	6078      	str	r0, [r7, #4]
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1bc84:	2220      	movs	r2, #32
   1bc86:	2101      	movs	r1, #1
   1bc88:	6878      	ldr	r0, [r7, #4]
   1bc8a:	f7ff fdeb 	bl	1b864 <parse_compile_execute>
   1bc8e:	4603      	mov	r3, r0
}
   1bc90:	4618      	mov	r0, r3
   1bc92:	3708      	adds	r7, #8
   1bc94:	46bd      	mov	sp, r7
   1bc96:	bd80      	pop	{r7, pc}

0001bc98 <pyexec_frozen_module>:

#if MICROPY_MODULE_FROZEN
int pyexec_frozen_module(const char *name) {
   1bc98:	b580      	push	{r7, lr}
   1bc9a:	b084      	sub	sp, #16
   1bc9c:	af00      	add	r7, sp, #0
   1bc9e:	6078      	str	r0, [r7, #4]
    void *frozen_data;
    int frozen_type = mp_find_frozen_module(name, strlen(name), &frozen_data);
   1bca0:	6878      	ldr	r0, [r7, #4]
   1bca2:	f000 f971 	bl	1bf88 <strlen>
   1bca6:	4601      	mov	r1, r0
   1bca8:	f107 0308 	add.w	r3, r7, #8
   1bcac:	461a      	mov	r2, r3
   1bcae:	6878      	ldr	r0, [r7, #4]
   1bcb0:	f7ff fab8 	bl	1b224 <mp_find_frozen_module>
   1bcb4:	60f8      	str	r0, [r7, #12]

    switch (frozen_type) {
   1bcb6:	68fb      	ldr	r3, [r7, #12]
   1bcb8:	2b02      	cmp	r3, #2
   1bcba:	d107      	bne.n	1bccc <pyexec_frozen_module+0x34>
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, 0);
        #endif

        #if MICROPY_MODULE_FROZEN_MPY
        case MP_FROZEN_MPY:
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_RAW_CODE);
   1bcbc:	68bb      	ldr	r3, [r7, #8]
   1bcbe:	2208      	movs	r2, #8
   1bcc0:	2101      	movs	r1, #1
   1bcc2:	4618      	mov	r0, r3
   1bcc4:	f7ff fdce 	bl	1b864 <parse_compile_execute>
   1bcc8:	4603      	mov	r3, r0
   1bcca:	e004      	b.n	1bcd6 <pyexec_frozen_module+0x3e>
        #endif

        default:
            printf("could not find module '%s'\n", name);
   1bccc:	6879      	ldr	r1, [r7, #4]
   1bcce:	4804      	ldr	r0, [pc, #16]	; (1bce0 <pyexec_frozen_module+0x48>)
   1bcd0:	f7ff fca6 	bl	1b620 <printf>
            return false;
   1bcd4:	2300      	movs	r3, #0
    }
}
   1bcd6:	4618      	mov	r0, r3
   1bcd8:	3710      	adds	r7, #16
   1bcda:	46bd      	mov	sp, r7
   1bcdc:	bd80      	pop	{r7, pc}
   1bcde:	bf00      	nop
   1bce0:	00022e18 	.word	0x00022e18

0001bce4 <pyb_set_repl_info>:
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1bce4:	b580      	push	{r7, lr}
   1bce6:	b082      	sub	sp, #8
   1bce8:	af00      	add	r7, sp, #0
   1bcea:	6078      	str	r0, [r7, #4]
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1bcec:	6878      	ldr	r0, [r7, #4]
   1bcee:	f7f1 ff4b 	bl	db88 <mp_obj_get_int>
   1bcf2:	4603      	mov	r3, r0
   1bcf4:	2b00      	cmp	r3, #0
   1bcf6:	bf14      	ite	ne
   1bcf8:	2301      	movne	r3, #1
   1bcfa:	2300      	moveq	r3, #0
   1bcfc:	b2da      	uxtb	r2, r3
   1bcfe:	4b03      	ldr	r3, [pc, #12]	; (1bd0c <pyb_set_repl_info+0x28>)
   1bd00:	701a      	strb	r2, [r3, #0]
    return mp_const_none;
   1bd02:	4b03      	ldr	r3, [pc, #12]	; (1bd10 <pyb_set_repl_info+0x2c>)
}
   1bd04:	4618      	mov	r0, r3
   1bd06:	3708      	adds	r7, #8
   1bd08:	46bd      	mov	sp, r7
   1bd0a:	bd80      	pop	{r7, pc}
   1bd0c:	20000a0c 	.word	0x20000a0c
   1bd10:	00021480 	.word	0x00021480

0001bd14 <memcpy>:
#include <stdint.h>
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
   1bd14:	b480      	push	{r7}
   1bd16:	b08b      	sub	sp, #44	; 0x2c
   1bd18:	af00      	add	r7, sp, #0
   1bd1a:	60f8      	str	r0, [r7, #12]
   1bd1c:	60b9      	str	r1, [r7, #8]
   1bd1e:	607a      	str	r2, [r7, #4]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1bd20:	68fb      	ldr	r3, [r7, #12]
   1bd22:	f003 0303 	and.w	r3, r3, #3
   1bd26:	2b00      	cmp	r3, #0
   1bd28:	bf0c      	ite	eq
   1bd2a:	2301      	moveq	r3, #1
   1bd2c:	2300      	movne	r3, #0
   1bd2e:	b2db      	uxtb	r3, r3
   1bd30:	2b00      	cmp	r3, #0
   1bd32:	d038      	beq.n	1bda6 <memcpy+0x92>
   1bd34:	68bb      	ldr	r3, [r7, #8]
   1bd36:	f003 0303 	and.w	r3, r3, #3
   1bd3a:	2b00      	cmp	r3, #0
   1bd3c:	bf0c      	ite	eq
   1bd3e:	2301      	moveq	r3, #1
   1bd40:	2300      	movne	r3, #0
   1bd42:	b2db      	uxtb	r3, r3
   1bd44:	2b00      	cmp	r3, #0
   1bd46:	d02e      	beq.n	1bda6 <memcpy+0x92>
        // pointers aligned
        uint32_t *d = dst;
   1bd48:	68fb      	ldr	r3, [r7, #12]
   1bd4a:	627b      	str	r3, [r7, #36]	; 0x24
        const uint32_t *s = src;
   1bd4c:	68bb      	ldr	r3, [r7, #8]
   1bd4e:	623b      	str	r3, [r7, #32]

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1bd50:	687b      	ldr	r3, [r7, #4]
   1bd52:	089b      	lsrs	r3, r3, #2
   1bd54:	61fb      	str	r3, [r7, #28]
   1bd56:	e00a      	b.n	1bd6e <memcpy+0x5a>
            *d++ = *s++;
   1bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd5a:	1d1a      	adds	r2, r3, #4
   1bd5c:	627a      	str	r2, [r7, #36]	; 0x24
   1bd5e:	6a3a      	ldr	r2, [r7, #32]
   1bd60:	1d11      	adds	r1, r2, #4
   1bd62:	6239      	str	r1, [r7, #32]
   1bd64:	6812      	ldr	r2, [r2, #0]
   1bd66:	601a      	str	r2, [r3, #0]
        for (size_t i = (n >> 2); i; i--) {
   1bd68:	69fb      	ldr	r3, [r7, #28]
   1bd6a:	3b01      	subs	r3, #1
   1bd6c:	61fb      	str	r3, [r7, #28]
   1bd6e:	69fb      	ldr	r3, [r7, #28]
   1bd70:	2b00      	cmp	r3, #0
   1bd72:	d1f1      	bne.n	1bd58 <memcpy+0x44>
        }

        if (n & 2) {
   1bd74:	687b      	ldr	r3, [r7, #4]
   1bd76:	f003 0302 	and.w	r3, r3, #2
   1bd7a:	2b00      	cmp	r3, #0
   1bd7c:	d009      	beq.n	1bd92 <memcpy+0x7e>
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1bd7e:	6a3b      	ldr	r3, [r7, #32]
   1bd80:	881a      	ldrh	r2, [r3, #0]
   1bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd84:	801a      	strh	r2, [r3, #0]
            d = (uint32_t*)((uint16_t*)d + 1);
   1bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd88:	3302      	adds	r3, #2
   1bd8a:	627b      	str	r3, [r7, #36]	; 0x24
            s = (const uint32_t*)((const uint16_t*)s + 1);
   1bd8c:	6a3b      	ldr	r3, [r7, #32]
   1bd8e:	3302      	adds	r3, #2
   1bd90:	623b      	str	r3, [r7, #32]
        }

        if (n & 1) {
   1bd92:	687b      	ldr	r3, [r7, #4]
   1bd94:	f003 0301 	and.w	r3, r3, #1
   1bd98:	2b00      	cmp	r3, #0
   1bd9a:	d018      	beq.n	1bdce <memcpy+0xba>
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1bd9c:	6a3b      	ldr	r3, [r7, #32]
   1bd9e:	781a      	ldrb	r2, [r3, #0]
   1bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bda2:	701a      	strb	r2, [r3, #0]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1bda4:	e013      	b.n	1bdce <memcpy+0xba>
        }
    } else {
        // unaligned access, copy bytes
        uint8_t *d = dst;
   1bda6:	68fb      	ldr	r3, [r7, #12]
   1bda8:	61bb      	str	r3, [r7, #24]
        const uint8_t *s = src;
   1bdaa:	68bb      	ldr	r3, [r7, #8]
   1bdac:	617b      	str	r3, [r7, #20]

        for (; n; n--) {
   1bdae:	e00a      	b.n	1bdc6 <memcpy+0xb2>
            *d++ = *s++;
   1bdb0:	69bb      	ldr	r3, [r7, #24]
   1bdb2:	1c5a      	adds	r2, r3, #1
   1bdb4:	61ba      	str	r2, [r7, #24]
   1bdb6:	697a      	ldr	r2, [r7, #20]
   1bdb8:	1c51      	adds	r1, r2, #1
   1bdba:	6179      	str	r1, [r7, #20]
   1bdbc:	7812      	ldrb	r2, [r2, #0]
   1bdbe:	701a      	strb	r2, [r3, #0]
        for (; n; n--) {
   1bdc0:	687b      	ldr	r3, [r7, #4]
   1bdc2:	3b01      	subs	r3, #1
   1bdc4:	607b      	str	r3, [r7, #4]
   1bdc6:	687b      	ldr	r3, [r7, #4]
   1bdc8:	2b00      	cmp	r3, #0
   1bdca:	d1f1      	bne.n	1bdb0 <memcpy+0x9c>
   1bdcc:	e000      	b.n	1bdd0 <memcpy+0xbc>
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1bdce:	bf00      	nop
        }
    }

    return dst;
   1bdd0:	68fb      	ldr	r3, [r7, #12]
}
   1bdd2:	4618      	mov	r0, r3
   1bdd4:	372c      	adds	r7, #44	; 0x2c
   1bdd6:	46bd      	mov	sp, r7
   1bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bddc:	4770      	bx	lr
   1bdde:	bf00      	nop

0001bde0 <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
   1bde0:	b580      	push	{r7, lr}
   1bde2:	b086      	sub	sp, #24
   1bde4:	af00      	add	r7, sp, #0
   1bde6:	60f8      	str	r0, [r7, #12]
   1bde8:	60b9      	str	r1, [r7, #8]
   1bdea:	607a      	str	r2, [r7, #4]
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1bdec:	68ba      	ldr	r2, [r7, #8]
   1bdee:	68fb      	ldr	r3, [r7, #12]
   1bdf0:	429a      	cmp	r2, r3
   1bdf2:	d220      	bcs.n	1be36 <memmove+0x56>
   1bdf4:	68ba      	ldr	r2, [r7, #8]
   1bdf6:	687b      	ldr	r3, [r7, #4]
   1bdf8:	441a      	add	r2, r3
   1bdfa:	68fb      	ldr	r3, [r7, #12]
   1bdfc:	429a      	cmp	r2, r3
   1bdfe:	d91a      	bls.n	1be36 <memmove+0x56>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1be00:	687b      	ldr	r3, [r7, #4]
   1be02:	3b01      	subs	r3, #1
   1be04:	68fa      	ldr	r2, [r7, #12]
   1be06:	4413      	add	r3, r2
   1be08:	617b      	str	r3, [r7, #20]
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1be0a:	687b      	ldr	r3, [r7, #4]
   1be0c:	3b01      	subs	r3, #1
   1be0e:	68ba      	ldr	r2, [r7, #8]
   1be10:	4413      	add	r3, r2
   1be12:	613b      	str	r3, [r7, #16]
        for (; n > 0; n--) {
   1be14:	e00a      	b.n	1be2c <memmove+0x4c>
            *d-- = *s--;
   1be16:	697b      	ldr	r3, [r7, #20]
   1be18:	1e5a      	subs	r2, r3, #1
   1be1a:	617a      	str	r2, [r7, #20]
   1be1c:	693a      	ldr	r2, [r7, #16]
   1be1e:	1e51      	subs	r1, r2, #1
   1be20:	6139      	str	r1, [r7, #16]
   1be22:	7812      	ldrb	r2, [r2, #0]
   1be24:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1be26:	687b      	ldr	r3, [r7, #4]
   1be28:	3b01      	subs	r3, #1
   1be2a:	607b      	str	r3, [r7, #4]
   1be2c:	687b      	ldr	r3, [r7, #4]
   1be2e:	2b00      	cmp	r3, #0
   1be30:	d1f1      	bne.n	1be16 <memmove+0x36>
        }
        return dest;
   1be32:	68fb      	ldr	r3, [r7, #12]
   1be34:	e005      	b.n	1be42 <memmove+0x62>
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
   1be36:	687a      	ldr	r2, [r7, #4]
   1be38:	68b9      	ldr	r1, [r7, #8]
   1be3a:	68f8      	ldr	r0, [r7, #12]
   1be3c:	f7ff ff6a 	bl	1bd14 <memcpy>
   1be40:	4603      	mov	r3, r0
    }
}
   1be42:	4618      	mov	r0, r3
   1be44:	3718      	adds	r7, #24
   1be46:	46bd      	mov	sp, r7
   1be48:	bd80      	pop	{r7, pc}
   1be4a:	bf00      	nop

0001be4c <memset>:

void *memset(void *s, int c, size_t n) {
   1be4c:	b480      	push	{r7}
   1be4e:	b089      	sub	sp, #36	; 0x24
   1be50:	af00      	add	r7, sp, #0
   1be52:	60f8      	str	r0, [r7, #12]
   1be54:	60b9      	str	r1, [r7, #8]
   1be56:	607a      	str	r2, [r7, #4]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1be58:	68bb      	ldr	r3, [r7, #8]
   1be5a:	2b00      	cmp	r3, #0
   1be5c:	d129      	bne.n	1beb2 <memset+0x66>
   1be5e:	68fb      	ldr	r3, [r7, #12]
   1be60:	f003 0303 	and.w	r3, r3, #3
   1be64:	2b00      	cmp	r3, #0
   1be66:	d124      	bne.n	1beb2 <memset+0x66>
        // aligned store of 0
        uint32_t *s32 = s;
   1be68:	68fb      	ldr	r3, [r7, #12]
   1be6a:	61fb      	str	r3, [r7, #28]
        for (size_t i = n >> 2; i > 0; i--) {
   1be6c:	687b      	ldr	r3, [r7, #4]
   1be6e:	089b      	lsrs	r3, r3, #2
   1be70:	61bb      	str	r3, [r7, #24]
   1be72:	e007      	b.n	1be84 <memset+0x38>
            *s32++ = 0;
   1be74:	69fb      	ldr	r3, [r7, #28]
   1be76:	1d1a      	adds	r2, r3, #4
   1be78:	61fa      	str	r2, [r7, #28]
   1be7a:	2200      	movs	r2, #0
   1be7c:	601a      	str	r2, [r3, #0]
        for (size_t i = n >> 2; i > 0; i--) {
   1be7e:	69bb      	ldr	r3, [r7, #24]
   1be80:	3b01      	subs	r3, #1
   1be82:	61bb      	str	r3, [r7, #24]
   1be84:	69bb      	ldr	r3, [r7, #24]
   1be86:	2b00      	cmp	r3, #0
   1be88:	d1f4      	bne.n	1be74 <memset+0x28>
        }
        if (n & 2) {
   1be8a:	687b      	ldr	r3, [r7, #4]
   1be8c:	f003 0302 	and.w	r3, r3, #2
   1be90:	2b00      	cmp	r3, #0
   1be92:	d005      	beq.n	1bea0 <memset+0x54>
            *((uint16_t*)s32) = 0;
   1be94:	69fb      	ldr	r3, [r7, #28]
   1be96:	2200      	movs	r2, #0
   1be98:	801a      	strh	r2, [r3, #0]
            s32 = (uint32_t*)((uint16_t*)s32 + 1);
   1be9a:	69fb      	ldr	r3, [r7, #28]
   1be9c:	3302      	adds	r3, #2
   1be9e:	61fb      	str	r3, [r7, #28]
        }
        if (n & 1) {
   1bea0:	687b      	ldr	r3, [r7, #4]
   1bea2:	f003 0301 	and.w	r3, r3, #1
   1bea6:	2b00      	cmp	r3, #0
   1bea8:	d013      	beq.n	1bed2 <memset+0x86>
            *((uint8_t*)s32) = 0;
   1beaa:	69fb      	ldr	r3, [r7, #28]
   1beac:	2200      	movs	r2, #0
   1beae:	701a      	strb	r2, [r3, #0]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1beb0:	e00f      	b.n	1bed2 <memset+0x86>
        }
    } else {
        uint8_t *s2 = s;
   1beb2:	68fb      	ldr	r3, [r7, #12]
   1beb4:	617b      	str	r3, [r7, #20]
        for (; n > 0; n--) {
   1beb6:	e008      	b.n	1beca <memset+0x7e>
            *s2++ = c;
   1beb8:	697b      	ldr	r3, [r7, #20]
   1beba:	1c5a      	adds	r2, r3, #1
   1bebc:	617a      	str	r2, [r7, #20]
   1bebe:	68ba      	ldr	r2, [r7, #8]
   1bec0:	b2d2      	uxtb	r2, r2
   1bec2:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1bec4:	687b      	ldr	r3, [r7, #4]
   1bec6:	3b01      	subs	r3, #1
   1bec8:	607b      	str	r3, [r7, #4]
   1beca:	687b      	ldr	r3, [r7, #4]
   1becc:	2b00      	cmp	r3, #0
   1bece:	d1f3      	bne.n	1beb8 <memset+0x6c>
   1bed0:	e000      	b.n	1bed4 <memset+0x88>
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1bed2:	bf00      	nop
        }
    }
    return s;
   1bed4:	68fb      	ldr	r3, [r7, #12]
}
   1bed6:	4618      	mov	r0, r3
   1bed8:	3724      	adds	r7, #36	; 0x24
   1beda:	46bd      	mov	sp, r7
   1bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bee0:	4770      	bx	lr
   1bee2:	bf00      	nop

0001bee4 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1bee4:	b480      	push	{r7}
   1bee6:	b089      	sub	sp, #36	; 0x24
   1bee8:	af00      	add	r7, sp, #0
   1beea:	60f8      	str	r0, [r7, #12]
   1beec:	60b9      	str	r1, [r7, #8]
   1beee:	607a      	str	r2, [r7, #4]
    const uint8_t *s1_8 = s1;
   1bef0:	68fb      	ldr	r3, [r7, #12]
   1bef2:	61fb      	str	r3, [r7, #28]
    const uint8_t *s2_8 = s2;
   1bef4:	68bb      	ldr	r3, [r7, #8]
   1bef6:	61bb      	str	r3, [r7, #24]
    while (n--) {
   1bef8:	e016      	b.n	1bf28 <memcmp+0x44>
        char c1 = *s1_8++;
   1befa:	69fb      	ldr	r3, [r7, #28]
   1befc:	1c5a      	adds	r2, r3, #1
   1befe:	61fa      	str	r2, [r7, #28]
   1bf00:	781b      	ldrb	r3, [r3, #0]
   1bf02:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2_8++;
   1bf04:	69bb      	ldr	r3, [r7, #24]
   1bf06:	1c5a      	adds	r2, r3, #1
   1bf08:	61ba      	str	r2, [r7, #24]
   1bf0a:	781b      	ldrb	r3, [r3, #0]
   1bf0c:	75bb      	strb	r3, [r7, #22]
        if (c1 < c2) return -1;
   1bf0e:	7dfa      	ldrb	r2, [r7, #23]
   1bf10:	7dbb      	ldrb	r3, [r7, #22]
   1bf12:	429a      	cmp	r2, r3
   1bf14:	d202      	bcs.n	1bf1c <memcmp+0x38>
   1bf16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bf1a:	e00b      	b.n	1bf34 <memcmp+0x50>
        else if (c1 > c2) return 1;
   1bf1c:	7dfa      	ldrb	r2, [r7, #23]
   1bf1e:	7dbb      	ldrb	r3, [r7, #22]
   1bf20:	429a      	cmp	r2, r3
   1bf22:	d901      	bls.n	1bf28 <memcmp+0x44>
   1bf24:	2301      	movs	r3, #1
   1bf26:	e005      	b.n	1bf34 <memcmp+0x50>
    while (n--) {
   1bf28:	687b      	ldr	r3, [r7, #4]
   1bf2a:	1e5a      	subs	r2, r3, #1
   1bf2c:	607a      	str	r2, [r7, #4]
   1bf2e:	2b00      	cmp	r3, #0
   1bf30:	d1e3      	bne.n	1befa <memcmp+0x16>
    }
    return 0;
   1bf32:	2300      	movs	r3, #0
}
   1bf34:	4618      	mov	r0, r3
   1bf36:	3724      	adds	r7, #36	; 0x24
   1bf38:	46bd      	mov	sp, r7
   1bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bf3e:	4770      	bx	lr

0001bf40 <memchr>:

void *memchr(const void *s, int c, size_t n) {
   1bf40:	b480      	push	{r7}
   1bf42:	b087      	sub	sp, #28
   1bf44:	af00      	add	r7, sp, #0
   1bf46:	60f8      	str	r0, [r7, #12]
   1bf48:	60b9      	str	r1, [r7, #8]
   1bf4a:	607a      	str	r2, [r7, #4]
    if (n != 0) {
   1bf4c:	687b      	ldr	r3, [r7, #4]
   1bf4e:	2b00      	cmp	r3, #0
   1bf50:	d012      	beq.n	1bf78 <memchr+0x38>
        const unsigned char *p = s;
   1bf52:	68fb      	ldr	r3, [r7, #12]
   1bf54:	617b      	str	r3, [r7, #20]

        do {
            if (*p++ == c)
   1bf56:	697b      	ldr	r3, [r7, #20]
   1bf58:	1c5a      	adds	r2, r3, #1
   1bf5a:	617a      	str	r2, [r7, #20]
   1bf5c:	781b      	ldrb	r3, [r3, #0]
   1bf5e:	461a      	mov	r2, r3
   1bf60:	68bb      	ldr	r3, [r7, #8]
   1bf62:	429a      	cmp	r2, r3
   1bf64:	d102      	bne.n	1bf6c <memchr+0x2c>
                return ((void *)(p - 1));
   1bf66:	697b      	ldr	r3, [r7, #20]
   1bf68:	3b01      	subs	r3, #1
   1bf6a:	e006      	b.n	1bf7a <memchr+0x3a>
        } while (--n != 0);
   1bf6c:	687b      	ldr	r3, [r7, #4]
   1bf6e:	3b01      	subs	r3, #1
   1bf70:	607b      	str	r3, [r7, #4]
   1bf72:	687b      	ldr	r3, [r7, #4]
   1bf74:	2b00      	cmp	r3, #0
   1bf76:	d1ee      	bne.n	1bf56 <memchr+0x16>
    }
    return 0;
   1bf78:	2300      	movs	r3, #0
}
   1bf7a:	4618      	mov	r0, r3
   1bf7c:	371c      	adds	r7, #28
   1bf7e:	46bd      	mov	sp, r7
   1bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bf84:	4770      	bx	lr
   1bf86:	bf00      	nop

0001bf88 <strlen>:

size_t strlen(const char *str) {
   1bf88:	b480      	push	{r7}
   1bf8a:	b085      	sub	sp, #20
   1bf8c:	af00      	add	r7, sp, #0
   1bf8e:	6078      	str	r0, [r7, #4]
    int len = 0;
   1bf90:	2300      	movs	r3, #0
   1bf92:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1bf94:	687b      	ldr	r3, [r7, #4]
   1bf96:	60bb      	str	r3, [r7, #8]
   1bf98:	e005      	b.n	1bfa6 <strlen+0x1e>
        len += 1;
   1bf9a:	68fb      	ldr	r3, [r7, #12]
   1bf9c:	3301      	adds	r3, #1
   1bf9e:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1bfa0:	68bb      	ldr	r3, [r7, #8]
   1bfa2:	3301      	adds	r3, #1
   1bfa4:	60bb      	str	r3, [r7, #8]
   1bfa6:	68bb      	ldr	r3, [r7, #8]
   1bfa8:	781b      	ldrb	r3, [r3, #0]
   1bfaa:	2b00      	cmp	r3, #0
   1bfac:	d1f5      	bne.n	1bf9a <strlen+0x12>
    }
    return len;
   1bfae:	68fb      	ldr	r3, [r7, #12]
}
   1bfb0:	4618      	mov	r0, r3
   1bfb2:	3714      	adds	r7, #20
   1bfb4:	46bd      	mov	sp, r7
   1bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bfba:	4770      	bx	lr

0001bfbc <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1bfbc:	b480      	push	{r7}
   1bfbe:	b085      	sub	sp, #20
   1bfc0:	af00      	add	r7, sp, #0
   1bfc2:	6078      	str	r0, [r7, #4]
   1bfc4:	6039      	str	r1, [r7, #0]
    while (*s1 && *s2) {
   1bfc6:	e016      	b.n	1bff6 <strcmp+0x3a>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1bfc8:	687b      	ldr	r3, [r7, #4]
   1bfca:	1c5a      	adds	r2, r3, #1
   1bfcc:	607a      	str	r2, [r7, #4]
   1bfce:	781b      	ldrb	r3, [r3, #0]
   1bfd0:	73fb      	strb	r3, [r7, #15]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1bfd2:	683b      	ldr	r3, [r7, #0]
   1bfd4:	1c5a      	adds	r2, r3, #1
   1bfd6:	603a      	str	r2, [r7, #0]
   1bfd8:	781b      	ldrb	r3, [r3, #0]
   1bfda:	73bb      	strb	r3, [r7, #14]
        if (c1 < c2) return -1;
   1bfdc:	7bfa      	ldrb	r2, [r7, #15]
   1bfde:	7bbb      	ldrb	r3, [r7, #14]
   1bfe0:	429a      	cmp	r2, r3
   1bfe2:	d202      	bcs.n	1bfea <strcmp+0x2e>
   1bfe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bfe8:	e01b      	b.n	1c022 <strcmp+0x66>
        else if (c1 > c2) return 1;
   1bfea:	7bfa      	ldrb	r2, [r7, #15]
   1bfec:	7bbb      	ldrb	r3, [r7, #14]
   1bfee:	429a      	cmp	r2, r3
   1bff0:	d901      	bls.n	1bff6 <strcmp+0x3a>
   1bff2:	2301      	movs	r3, #1
   1bff4:	e015      	b.n	1c022 <strcmp+0x66>
    while (*s1 && *s2) {
   1bff6:	687b      	ldr	r3, [r7, #4]
   1bff8:	781b      	ldrb	r3, [r3, #0]
   1bffa:	2b00      	cmp	r3, #0
   1bffc:	d003      	beq.n	1c006 <strcmp+0x4a>
   1bffe:	683b      	ldr	r3, [r7, #0]
   1c000:	781b      	ldrb	r3, [r3, #0]
   1c002:	2b00      	cmp	r3, #0
   1c004:	d1e0      	bne.n	1bfc8 <strcmp+0xc>
    }
    if (*s2) return -1;
   1c006:	683b      	ldr	r3, [r7, #0]
   1c008:	781b      	ldrb	r3, [r3, #0]
   1c00a:	2b00      	cmp	r3, #0
   1c00c:	d002      	beq.n	1c014 <strcmp+0x58>
   1c00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c012:	e006      	b.n	1c022 <strcmp+0x66>
    else if (*s1) return 1;
   1c014:	687b      	ldr	r3, [r7, #4]
   1c016:	781b      	ldrb	r3, [r3, #0]
   1c018:	2b00      	cmp	r3, #0
   1c01a:	d001      	beq.n	1c020 <strcmp+0x64>
   1c01c:	2301      	movs	r3, #1
   1c01e:	e000      	b.n	1c022 <strcmp+0x66>
    else return 0;
   1c020:	2300      	movs	r3, #0
}
   1c022:	4618      	mov	r0, r3
   1c024:	3714      	adds	r7, #20
   1c026:	46bd      	mov	sp, r7
   1c028:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c02c:	4770      	bx	lr
   1c02e:	bf00      	nop

0001c030 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1c030:	b480      	push	{r7}
   1c032:	b087      	sub	sp, #28
   1c034:	af00      	add	r7, sp, #0
   1c036:	60f8      	str	r0, [r7, #12]
   1c038:	60b9      	str	r1, [r7, #8]
   1c03a:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
   1c03c:	e019      	b.n	1c072 <strncmp+0x42>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1c03e:	68fb      	ldr	r3, [r7, #12]
   1c040:	1c5a      	adds	r2, r3, #1
   1c042:	60fa      	str	r2, [r7, #12]
   1c044:	781b      	ldrb	r3, [r3, #0]
   1c046:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1c048:	68bb      	ldr	r3, [r7, #8]
   1c04a:	1c5a      	adds	r2, r3, #1
   1c04c:	60ba      	str	r2, [r7, #8]
   1c04e:	781b      	ldrb	r3, [r3, #0]
   1c050:	75bb      	strb	r3, [r7, #22]
        n--;
   1c052:	687b      	ldr	r3, [r7, #4]
   1c054:	3b01      	subs	r3, #1
   1c056:	607b      	str	r3, [r7, #4]
        if (c1 < c2) return -1;
   1c058:	7dfa      	ldrb	r2, [r7, #23]
   1c05a:	7dbb      	ldrb	r3, [r7, #22]
   1c05c:	429a      	cmp	r2, r3
   1c05e:	d202      	bcs.n	1c066 <strncmp+0x36>
   1c060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c064:	e023      	b.n	1c0ae <strncmp+0x7e>
        else if (c1 > c2) return 1;
   1c066:	7dfa      	ldrb	r2, [r7, #23]
   1c068:	7dbb      	ldrb	r3, [r7, #22]
   1c06a:	429a      	cmp	r2, r3
   1c06c:	d901      	bls.n	1c072 <strncmp+0x42>
   1c06e:	2301      	movs	r3, #1
   1c070:	e01d      	b.n	1c0ae <strncmp+0x7e>
    while (*s1 && *s2 && n > 0) {
   1c072:	68fb      	ldr	r3, [r7, #12]
   1c074:	781b      	ldrb	r3, [r3, #0]
   1c076:	2b00      	cmp	r3, #0
   1c078:	d006      	beq.n	1c088 <strncmp+0x58>
   1c07a:	68bb      	ldr	r3, [r7, #8]
   1c07c:	781b      	ldrb	r3, [r3, #0]
   1c07e:	2b00      	cmp	r3, #0
   1c080:	d002      	beq.n	1c088 <strncmp+0x58>
   1c082:	687b      	ldr	r3, [r7, #4]
   1c084:	2b00      	cmp	r3, #0
   1c086:	d1da      	bne.n	1c03e <strncmp+0xe>
    }
    if (n == 0) return 0;
   1c088:	687b      	ldr	r3, [r7, #4]
   1c08a:	2b00      	cmp	r3, #0
   1c08c:	d101      	bne.n	1c092 <strncmp+0x62>
   1c08e:	2300      	movs	r3, #0
   1c090:	e00d      	b.n	1c0ae <strncmp+0x7e>
    else if (*s2) return -1;
   1c092:	68bb      	ldr	r3, [r7, #8]
   1c094:	781b      	ldrb	r3, [r3, #0]
   1c096:	2b00      	cmp	r3, #0
   1c098:	d002      	beq.n	1c0a0 <strncmp+0x70>
   1c09a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c09e:	e006      	b.n	1c0ae <strncmp+0x7e>
    else if (*s1) return 1;
   1c0a0:	68fb      	ldr	r3, [r7, #12]
   1c0a2:	781b      	ldrb	r3, [r3, #0]
   1c0a4:	2b00      	cmp	r3, #0
   1c0a6:	d001      	beq.n	1c0ac <strncmp+0x7c>
   1c0a8:	2301      	movs	r3, #1
   1c0aa:	e000      	b.n	1c0ae <strncmp+0x7e>
    else return 0;
   1c0ac:	2300      	movs	r3, #0
}
   1c0ae:	4618      	mov	r0, r3
   1c0b0:	371c      	adds	r7, #28
   1c0b2:	46bd      	mov	sp, r7
   1c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c0b8:	4770      	bx	lr
   1c0ba:	bf00      	nop

0001c0bc <strcpy>:

char *strcpy(char *dest, const char *src) {
   1c0bc:	b480      	push	{r7}
   1c0be:	b085      	sub	sp, #20
   1c0c0:	af00      	add	r7, sp, #0
   1c0c2:	6078      	str	r0, [r7, #4]
   1c0c4:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1c0c6:	687b      	ldr	r3, [r7, #4]
   1c0c8:	60fb      	str	r3, [r7, #12]
    while (*src) {
   1c0ca:	e007      	b.n	1c0dc <strcpy+0x20>
        *d++ = *src++;
   1c0cc:	68fb      	ldr	r3, [r7, #12]
   1c0ce:	1c5a      	adds	r2, r3, #1
   1c0d0:	60fa      	str	r2, [r7, #12]
   1c0d2:	683a      	ldr	r2, [r7, #0]
   1c0d4:	1c51      	adds	r1, r2, #1
   1c0d6:	6039      	str	r1, [r7, #0]
   1c0d8:	7812      	ldrb	r2, [r2, #0]
   1c0da:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c0dc:	683b      	ldr	r3, [r7, #0]
   1c0de:	781b      	ldrb	r3, [r3, #0]
   1c0e0:	2b00      	cmp	r3, #0
   1c0e2:	d1f3      	bne.n	1c0cc <strcpy+0x10>
    }
    *d = '\0';
   1c0e4:	68fb      	ldr	r3, [r7, #12]
   1c0e6:	2200      	movs	r2, #0
   1c0e8:	701a      	strb	r2, [r3, #0]
    return dest;
   1c0ea:	687b      	ldr	r3, [r7, #4]
}
   1c0ec:	4618      	mov	r0, r3
   1c0ee:	3714      	adds	r7, #20
   1c0f0:	46bd      	mov	sp, r7
   1c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c0f6:	4770      	bx	lr

0001c0f8 <stpcpy>:

// needed because gcc optimises strcpy + strcat to this
char *stpcpy(char *dest, const char *src) {
   1c0f8:	b480      	push	{r7}
   1c0fa:	b083      	sub	sp, #12
   1c0fc:	af00      	add	r7, sp, #0
   1c0fe:	6078      	str	r0, [r7, #4]
   1c100:	6039      	str	r1, [r7, #0]
    while (*src) {
   1c102:	e007      	b.n	1c114 <stpcpy+0x1c>
        *dest++ = *src++;
   1c104:	687b      	ldr	r3, [r7, #4]
   1c106:	1c5a      	adds	r2, r3, #1
   1c108:	607a      	str	r2, [r7, #4]
   1c10a:	683a      	ldr	r2, [r7, #0]
   1c10c:	1c51      	adds	r1, r2, #1
   1c10e:	6039      	str	r1, [r7, #0]
   1c110:	7812      	ldrb	r2, [r2, #0]
   1c112:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c114:	683b      	ldr	r3, [r7, #0]
   1c116:	781b      	ldrb	r3, [r3, #0]
   1c118:	2b00      	cmp	r3, #0
   1c11a:	d1f3      	bne.n	1c104 <stpcpy+0xc>
    }
    *dest = '\0';
   1c11c:	687b      	ldr	r3, [r7, #4]
   1c11e:	2200      	movs	r2, #0
   1c120:	701a      	strb	r2, [r3, #0]
    return dest;
   1c122:	687b      	ldr	r3, [r7, #4]
}
   1c124:	4618      	mov	r0, r3
   1c126:	370c      	adds	r7, #12
   1c128:	46bd      	mov	sp, r7
   1c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c12e:	4770      	bx	lr

0001c130 <strcat>:

char *strcat(char *dest, const char *src) {
   1c130:	b480      	push	{r7}
   1c132:	b085      	sub	sp, #20
   1c134:	af00      	add	r7, sp, #0
   1c136:	6078      	str	r0, [r7, #4]
   1c138:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1c13a:	687b      	ldr	r3, [r7, #4]
   1c13c:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1c13e:	e002      	b.n	1c146 <strcat+0x16>
        d++;
   1c140:	68fb      	ldr	r3, [r7, #12]
   1c142:	3301      	adds	r3, #1
   1c144:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1c146:	68fb      	ldr	r3, [r7, #12]
   1c148:	781b      	ldrb	r3, [r3, #0]
   1c14a:	2b00      	cmp	r3, #0
   1c14c:	d1f8      	bne.n	1c140 <strcat+0x10>
    }
    while (*src) {
   1c14e:	e007      	b.n	1c160 <strcat+0x30>
        *d++ = *src++;
   1c150:	68fb      	ldr	r3, [r7, #12]
   1c152:	1c5a      	adds	r2, r3, #1
   1c154:	60fa      	str	r2, [r7, #12]
   1c156:	683a      	ldr	r2, [r7, #0]
   1c158:	1c51      	adds	r1, r2, #1
   1c15a:	6039      	str	r1, [r7, #0]
   1c15c:	7812      	ldrb	r2, [r2, #0]
   1c15e:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c160:	683b      	ldr	r3, [r7, #0]
   1c162:	781b      	ldrb	r3, [r3, #0]
   1c164:	2b00      	cmp	r3, #0
   1c166:	d1f3      	bne.n	1c150 <strcat+0x20>
    }
    *d = '\0';
   1c168:	68fb      	ldr	r3, [r7, #12]
   1c16a:	2200      	movs	r2, #0
   1c16c:	701a      	strb	r2, [r3, #0]
    return dest;
   1c16e:	687b      	ldr	r3, [r7, #4]
}
   1c170:	4618      	mov	r0, r3
   1c172:	3714      	adds	r7, #20
   1c174:	46bd      	mov	sp, r7
   1c176:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c17a:	4770      	bx	lr

0001c17c <strchr>:

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1c17c:	b480      	push	{r7}
   1c17e:	b083      	sub	sp, #12
   1c180:	af00      	add	r7, sp, #0
   1c182:	6078      	str	r0, [r7, #4]
   1c184:	6039      	str	r1, [r7, #0]
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1c186:	e002      	b.n	1c18e <strchr+0x12>
        s++;
   1c188:	687b      	ldr	r3, [r7, #4]
   1c18a:	3301      	adds	r3, #1
   1c18c:	607b      	str	r3, [r7, #4]
    while (*s != '\0' && *s != (char)c)
   1c18e:	687b      	ldr	r3, [r7, #4]
   1c190:	781b      	ldrb	r3, [r3, #0]
   1c192:	2b00      	cmp	r3, #0
   1c194:	d005      	beq.n	1c1a2 <strchr+0x26>
   1c196:	687b      	ldr	r3, [r7, #4]
   1c198:	781a      	ldrb	r2, [r3, #0]
   1c19a:	683b      	ldr	r3, [r7, #0]
   1c19c:	b2db      	uxtb	r3, r3
   1c19e:	429a      	cmp	r2, r3
   1c1a0:	d1f2      	bne.n	1c188 <strchr+0xc>
    return ((*s == c) ? (char *) s : 0);
   1c1a2:	687b      	ldr	r3, [r7, #4]
   1c1a4:	781b      	ldrb	r3, [r3, #0]
   1c1a6:	461a      	mov	r2, r3
   1c1a8:	683b      	ldr	r3, [r7, #0]
   1c1aa:	429a      	cmp	r2, r3
   1c1ac:	d101      	bne.n	1c1b2 <strchr+0x36>
   1c1ae:	687b      	ldr	r3, [r7, #4]
   1c1b0:	e000      	b.n	1c1b4 <strchr+0x38>
   1c1b2:	2300      	movs	r3, #0
}
   1c1b4:	4618      	mov	r0, r3
   1c1b6:	370c      	adds	r7, #12
   1c1b8:	46bd      	mov	sp, r7
   1c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c1be:	4770      	bx	lr

0001c1c0 <strstr>:


// Public Domain implementation of strstr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strstr_function
char *strstr(const char *haystack, const char *needle)
{
   1c1c0:	b580      	push	{r7, lr}
   1c1c2:	b084      	sub	sp, #16
   1c1c4:	af00      	add	r7, sp, #0
   1c1c6:	6078      	str	r0, [r7, #4]
   1c1c8:	6039      	str	r1, [r7, #0]
    size_t needlelen;
    /* Check for the null needle case.  */
    if (*needle == '\0')
   1c1ca:	683b      	ldr	r3, [r7, #0]
   1c1cc:	781b      	ldrb	r3, [r3, #0]
   1c1ce:	2b00      	cmp	r3, #0
   1c1d0:	d101      	bne.n	1c1d6 <strstr+0x16>
        return (char *) haystack;
   1c1d2:	687b      	ldr	r3, [r7, #4]
   1c1d4:	e01c      	b.n	1c210 <strstr+0x50>
    needlelen = strlen(needle);
   1c1d6:	6838      	ldr	r0, [r7, #0]
   1c1d8:	f7ff fed6 	bl	1bf88 <strlen>
   1c1dc:	60f8      	str	r0, [r7, #12]
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1c1de:	e00c      	b.n	1c1fa <strstr+0x3a>
        if (strncmp(haystack, needle, needlelen) == 0)
   1c1e0:	68fa      	ldr	r2, [r7, #12]
   1c1e2:	6839      	ldr	r1, [r7, #0]
   1c1e4:	6878      	ldr	r0, [r7, #4]
   1c1e6:	f7ff ff23 	bl	1c030 <strncmp>
   1c1ea:	4603      	mov	r3, r0
   1c1ec:	2b00      	cmp	r3, #0
   1c1ee:	d101      	bne.n	1c1f4 <strstr+0x34>
            return (char *) haystack;
   1c1f0:	687b      	ldr	r3, [r7, #4]
   1c1f2:	e00d      	b.n	1c210 <strstr+0x50>
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1c1f4:	687b      	ldr	r3, [r7, #4]
   1c1f6:	3301      	adds	r3, #1
   1c1f8:	607b      	str	r3, [r7, #4]
   1c1fa:	683b      	ldr	r3, [r7, #0]
   1c1fc:	781b      	ldrb	r3, [r3, #0]
   1c1fe:	4619      	mov	r1, r3
   1c200:	6878      	ldr	r0, [r7, #4]
   1c202:	f7ff ffbb 	bl	1c17c <strchr>
   1c206:	6078      	str	r0, [r7, #4]
   1c208:	687b      	ldr	r3, [r7, #4]
   1c20a:	2b00      	cmp	r3, #0
   1c20c:	d1e8      	bne.n	1c1e0 <strstr+0x20>
    return 0;
   1c20e:	2300      	movs	r3, #0
}
   1c210:	4618      	mov	r0, r3
   1c212:	3710      	adds	r7, #16
   1c214:	46bd      	mov	sp, r7
   1c216:	bd80      	pop	{r7, pc}

0001c218 <vstr_len>:
   1c218:	b480      	push	{r7}
   1c21a:	b083      	sub	sp, #12
   1c21c:	af00      	add	r7, sp, #0
   1c21e:	6078      	str	r0, [r7, #4]
   1c220:	687b      	ldr	r3, [r7, #4]
   1c222:	685b      	ldr	r3, [r3, #4]
   1c224:	4618      	mov	r0, r3
   1c226:	370c      	adds	r7, #12
   1c228:	46bd      	mov	sp, r7
   1c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c22e:	4770      	bx	lr

0001c230 <readline_init0>:

#define READLINE_HIST_SIZE (MP_ARRAY_SIZE(MP_STATE_PORT(readline_hist)))

enum { ESEQ_NONE, ESEQ_ESC, ESEQ_ESC_BRACKET, ESEQ_ESC_BRACKET_DIGIT, ESEQ_ESC_O };

void readline_init0(void) {
   1c230:	b580      	push	{r7, lr}
   1c232:	af00      	add	r7, sp, #0
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1c234:	2220      	movs	r2, #32
   1c236:	2100      	movs	r1, #0
   1c238:	4802      	ldr	r0, [pc, #8]	; (1c244 <readline_init0+0x14>)
   1c23a:	f7ff fe07 	bl	1be4c <memset>
}
   1c23e:	bf00      	nop
   1c240:	bd80      	pop	{r7, pc}
   1c242:	bf00      	nop
   1c244:	20000aa8 	.word	0x20000aa8

0001c248 <str_dup_maybe>:

STATIC char *str_dup_maybe(const char *str) {
   1c248:	b580      	push	{r7, lr}
   1c24a:	b084      	sub	sp, #16
   1c24c:	af00      	add	r7, sp, #0
   1c24e:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(str);
   1c250:	6878      	ldr	r0, [r7, #4]
   1c252:	f7ff fe99 	bl	1bf88 <strlen>
   1c256:	60f8      	str	r0, [r7, #12]
    char *s2 = m_new_maybe(char, len + 1);
   1c258:	68fb      	ldr	r3, [r7, #12]
   1c25a:	3301      	adds	r3, #1
   1c25c:	4618      	mov	r0, r3
   1c25e:	f7e4 f875 	bl	34c <m_malloc_maybe>
   1c262:	60b8      	str	r0, [r7, #8]
    if (s2 == NULL) {
   1c264:	68bb      	ldr	r3, [r7, #8]
   1c266:	2b00      	cmp	r3, #0
   1c268:	d101      	bne.n	1c26e <str_dup_maybe+0x26>
        return NULL;
   1c26a:	2300      	movs	r3, #0
   1c26c:	e007      	b.n	1c27e <str_dup_maybe+0x36>
    }
    memcpy(s2, str, len + 1);
   1c26e:	68fb      	ldr	r3, [r7, #12]
   1c270:	3301      	adds	r3, #1
   1c272:	461a      	mov	r2, r3
   1c274:	6879      	ldr	r1, [r7, #4]
   1c276:	68b8      	ldr	r0, [r7, #8]
   1c278:	f7ff fd4c 	bl	1bd14 <memcpy>
    return s2;
   1c27c:	68bb      	ldr	r3, [r7, #8]
}
   1c27e:	4618      	mov	r0, r3
   1c280:	3710      	adds	r7, #16
   1c282:	46bd      	mov	sp, r7
   1c284:	bd80      	pop	{r7, pc}
   1c286:	bf00      	nop

0001c288 <mp_hal_move_cursor_back>:
#define MICROPY_HAL_HAS_VT100 (1)
#endif

// ...and provide the implementation using them
#if MICROPY_HAL_HAS_VT100
STATIC void mp_hal_move_cursor_back(uint pos) {
   1c288:	b580      	push	{r7, lr}
   1c28a:	b086      	sub	sp, #24
   1c28c:	af00      	add	r7, sp, #0
   1c28e:	6078      	str	r0, [r7, #4]
    if (pos <= 4) {
   1c290:	687b      	ldr	r3, [r7, #4]
   1c292:	2b04      	cmp	r3, #4
   1c294:	d804      	bhi.n	1c2a0 <mp_hal_move_cursor_back+0x18>
        // fast path for most common case of 1 step back
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1c296:	6879      	ldr	r1, [r7, #4]
   1c298:	4810      	ldr	r0, [pc, #64]	; (1c2dc <mp_hal_move_cursor_back+0x54>)
   1c29a:	f7ff f9a1 	bl	1b5e0 <mp_hal_stdout_tx_strn>
        if (n > 0) {
            vt100_command[n] = 'D'; // replace null char
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}
   1c29e:	e019      	b.n	1c2d4 <mp_hal_move_cursor_back+0x4c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1c2a0:	f107 000c 	add.w	r0, r7, #12
   1c2a4:	687b      	ldr	r3, [r7, #4]
   1c2a6:	4a0e      	ldr	r2, [pc, #56]	; (1c2e0 <mp_hal_move_cursor_back+0x58>)
   1c2a8:	2106      	movs	r1, #6
   1c2aa:	f7ff fa65 	bl	1b778 <snprintf>
   1c2ae:	6178      	str	r0, [r7, #20]
        if (n > 0) {
   1c2b0:	697b      	ldr	r3, [r7, #20]
   1c2b2:	2b00      	cmp	r3, #0
   1c2b4:	dd0e      	ble.n	1c2d4 <mp_hal_move_cursor_back+0x4c>
            vt100_command[n] = 'D'; // replace null char
   1c2b6:	f107 020c 	add.w	r2, r7, #12
   1c2ba:	697b      	ldr	r3, [r7, #20]
   1c2bc:	4413      	add	r3, r2
   1c2be:	2244      	movs	r2, #68	; 0x44
   1c2c0:	701a      	strb	r2, [r3, #0]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1c2c2:	697b      	ldr	r3, [r7, #20]
   1c2c4:	3301      	adds	r3, #1
   1c2c6:	461a      	mov	r2, r3
   1c2c8:	f107 030c 	add.w	r3, r7, #12
   1c2cc:	4611      	mov	r1, r2
   1c2ce:	4618      	mov	r0, r3
   1c2d0:	f7ff f986 	bl	1b5e0 <mp_hal_stdout_tx_strn>
}
   1c2d4:	bf00      	nop
   1c2d6:	3718      	adds	r7, #24
   1c2d8:	46bd      	mov	sp, r7
   1c2da:	bd80      	pop	{r7, pc}
   1c2dc:	00022e3c 	.word	0x00022e3c
   1c2e0:	00022e44 	.word	0x00022e44

0001c2e4 <mp_hal_erase_line_from_cursor>:

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1c2e4:	b580      	push	{r7, lr}
   1c2e6:	b082      	sub	sp, #8
   1c2e8:	af00      	add	r7, sp, #0
   1c2ea:	6078      	str	r0, [r7, #4]
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1c2ec:	2103      	movs	r1, #3
   1c2ee:	4803      	ldr	r0, [pc, #12]	; (1c2fc <mp_hal_erase_line_from_cursor+0x18>)
   1c2f0:	f7ff f976 	bl	1b5e0 <mp_hal_stdout_tx_strn>
}
   1c2f4:	bf00      	nop
   1c2f6:	3708      	adds	r7, #8
   1c2f8:	46bd      	mov	sp, r7
   1c2fa:	bd80      	pop	{r7, pc}
   1c2fc:	00022e4c 	.word	0x00022e4c

0001c300 <readline_process_char>:
    const char *prompt;
} readline_t;

STATIC readline_t rl;

int readline_process_char(int c) {
   1c300:	b580      	push	{r7, lr}
   1c302:	b08a      	sub	sp, #40	; 0x28
   1c304:	af00      	add	r7, sp, #0
   1c306:	6078      	str	r0, [r7, #4]
    size_t last_line_len = rl.line->len;
   1c308:	4b9a      	ldr	r3, [pc, #616]	; (1c574 <readline_process_char+0x274>)
   1c30a:	681b      	ldr	r3, [r3, #0]
   1c30c:	685b      	ldr	r3, [r3, #4]
   1c30e:	617b      	str	r3, [r7, #20]
    int redraw_step_back = 0;
   1c310:	2300      	movs	r3, #0
   1c312:	627b      	str	r3, [r7, #36]	; 0x24
    bool redraw_from_cursor = false;
   1c314:	2300      	movs	r3, #0
   1c316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int redraw_step_forward = 0;
   1c31a:	2300      	movs	r3, #0
   1c31c:	61fb      	str	r3, [r7, #28]
    if (rl.escape_seq == ESEQ_NONE) {
   1c31e:	4b95      	ldr	r3, [pc, #596]	; (1c574 <readline_process_char+0x274>)
   1c320:	689b      	ldr	r3, [r3, #8]
   1c322:	2b00      	cmp	r3, #0
   1c324:	f040 80bf 	bne.w	1c4a6 <readline_process_char+0x1a6>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1c328:	687b      	ldr	r3, [r7, #4]
   1c32a:	2b00      	cmp	r3, #0
   1c32c:	dd0e      	ble.n	1c34c <readline_process_char+0x4c>
   1c32e:	687b      	ldr	r3, [r7, #4]
   1c330:	2b05      	cmp	r3, #5
   1c332:	dc0b      	bgt.n	1c34c <readline_process_char+0x4c>
   1c334:	4b8f      	ldr	r3, [pc, #572]	; (1c574 <readline_process_char+0x274>)
   1c336:	681b      	ldr	r3, [r3, #0]
   1c338:	4618      	mov	r0, r3
   1c33a:	f7ff ff6d 	bl	1c218 <vstr_len>
   1c33e:	4602      	mov	r2, r0
   1c340:	4b8c      	ldr	r3, [pc, #560]	; (1c574 <readline_process_char+0x274>)
   1c342:	685b      	ldr	r3, [r3, #4]
   1c344:	429a      	cmp	r2, r3
   1c346:	d101      	bne.n	1c34c <readline_process_char+0x4c>
            // control character with empty line
            return c;
   1c348:	687b      	ldr	r3, [r7, #4]
   1c34a:	e223      	b.n	1c794 <readline_process_char+0x494>
        } else if (c == CHAR_CTRL_A) {
   1c34c:	687b      	ldr	r3, [r7, #4]
   1c34e:	2b01      	cmp	r3, #1
   1c350:	f000 8181 	beq.w	1c656 <readline_process_char+0x356>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_B) {
            // CTRL-B with non-empty line is go-back-one-char
            goto left_arrow_key;
        #endif
        } else if (c == CHAR_CTRL_C) {
   1c354:	687b      	ldr	r3, [r7, #4]
   1c356:	2b03      	cmp	r3, #3
   1c358:	d101      	bne.n	1c35e <readline_process_char+0x5e>
            // CTRL-C with non-empty line is cancel
            return c;
   1c35a:	687b      	ldr	r3, [r7, #4]
   1c35c:	e21a      	b.n	1c794 <readline_process_char+0x494>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_D) {
            // CTRL-D with non-empty line is delete-at-cursor
            goto delete_key;
        #endif
        } else if (c == CHAR_CTRL_E) {
   1c35e:	687b      	ldr	r3, [r7, #4]
   1c360:	2b05      	cmp	r3, #5
   1c362:	f000 818d 	beq.w	1c680 <readline_process_char+0x380>
            vstr_cut_out_bytes(rl.line, rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
            // set redraw parameters
            redraw_step_back = rl.cursor_pos - rl.orig_line_len;
            redraw_from_cursor = true;
        #endif
        } else if (c == '\r') {
   1c366:	687b      	ldr	r3, [r7, #4]
   1c368:	2b0d      	cmp	r3, #13
   1c36a:	d110      	bne.n	1c38e <readline_process_char+0x8e>
            // newline
            mp_hal_stdout_tx_str("\r\n");
   1c36c:	4882      	ldr	r0, [pc, #520]	; (1c578 <readline_process_char+0x278>)
   1c36e:	f7ff fa3b 	bl	1b7e8 <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1c372:	4b80      	ldr	r3, [pc, #512]	; (1c574 <readline_process_char+0x274>)
   1c374:	681b      	ldr	r3, [r3, #0]
   1c376:	4618      	mov	r0, r3
   1c378:	f7e5 f90a 	bl	1590 <vstr_null_terminated_str>
   1c37c:	4602      	mov	r2, r0
   1c37e:	4b7d      	ldr	r3, [pc, #500]	; (1c574 <readline_process_char+0x274>)
   1c380:	685b      	ldr	r3, [r3, #4]
   1c382:	4413      	add	r3, r2
   1c384:	4618      	mov	r0, r3
   1c386:	f000 fa65 	bl	1c854 <readline_push_history>
            return 0;
   1c38a:	2300      	movs	r3, #0
   1c38c:	e202      	b.n	1c794 <readline_process_char+0x494>
        } else if (c == 27) {
   1c38e:	687b      	ldr	r3, [r7, #4]
   1c390:	2b1b      	cmp	r3, #27
   1c392:	d103      	bne.n	1c39c <readline_process_char+0x9c>
            // escape sequence
            rl.escape_seq = ESEQ_ESC;
   1c394:	4b77      	ldr	r3, [pc, #476]	; (1c574 <readline_process_char+0x274>)
   1c396:	2201      	movs	r2, #1
   1c398:	609a      	str	r2, [r3, #8]
   1c39a:	e1a6      	b.n	1c6ea <readline_process_char+0x3ea>
        } else if (c == 8 || c == 127) {
   1c39c:	687b      	ldr	r3, [r7, #4]
   1c39e:	2b08      	cmp	r3, #8
   1c3a0:	d002      	beq.n	1c3a8 <readline_process_char+0xa8>
   1c3a2:	687b      	ldr	r3, [r7, #4]
   1c3a4:	2b7f      	cmp	r3, #127	; 0x7f
   1c3a6:	d118      	bne.n	1c3da <readline_process_char+0xda>
            // backspace/delete
            if (rl.cursor_pos > rl.orig_line_len) {
   1c3a8:	4b72      	ldr	r3, [pc, #456]	; (1c574 <readline_process_char+0x274>)
   1c3aa:	691a      	ldr	r2, [r3, #16]
   1c3ac:	4b71      	ldr	r3, [pc, #452]	; (1c574 <readline_process_char+0x274>)
   1c3ae:	685b      	ldr	r3, [r3, #4]
   1c3b0:	429a      	cmp	r2, r3
   1c3b2:	f240 819a 	bls.w	1c6ea <readline_process_char+0x3ea>
                    nspace = 1;
                } else {
                    nspace = 4;
                }
                #else
                int nspace = 1;
   1c3b6:	2301      	movs	r3, #1
   1c3b8:	60fb      	str	r3, [r7, #12]
                #endif

                // do the backspace
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1c3ba:	4b6e      	ldr	r3, [pc, #440]	; (1c574 <readline_process_char+0x274>)
   1c3bc:	6818      	ldr	r0, [r3, #0]
   1c3be:	4b6d      	ldr	r3, [pc, #436]	; (1c574 <readline_process_char+0x274>)
   1c3c0:	691a      	ldr	r2, [r3, #16]
   1c3c2:	68fb      	ldr	r3, [r7, #12]
   1c3c4:	1ad3      	subs	r3, r2, r3
   1c3c6:	68fa      	ldr	r2, [r7, #12]
   1c3c8:	4619      	mov	r1, r3
   1c3ca:	f7e5 f9d3 	bl	1774 <vstr_cut_out_bytes>
                // set redraw parameters
                redraw_step_back = nspace;
   1c3ce:	68fb      	ldr	r3, [r7, #12]
   1c3d0:	627b      	str	r3, [r7, #36]	; 0x24
                redraw_from_cursor = true;
   1c3d2:	2301      	movs	r3, #1
   1c3d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (rl.cursor_pos > rl.orig_line_len) {
   1c3d8:	e187      	b.n	1c6ea <readline_process_char+0x3ea>
            }
        #if MICROPY_HELPER_REPL
        } else if (c == 9) {
   1c3da:	687b      	ldr	r3, [r7, #4]
   1c3dc:	2b09      	cmp	r3, #9
   1c3de:	d14c      	bne.n	1c47a <readline_process_char+0x17a>
            // tab magic
            const char *compl_str;
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1c3e0:	4b64      	ldr	r3, [pc, #400]	; (1c574 <readline_process_char+0x274>)
   1c3e2:	681b      	ldr	r3, [r3, #0]
   1c3e4:	689a      	ldr	r2, [r3, #8]
   1c3e6:	4b63      	ldr	r3, [pc, #396]	; (1c574 <readline_process_char+0x274>)
   1c3e8:	685b      	ldr	r3, [r3, #4]
   1c3ea:	18d0      	adds	r0, r2, r3
   1c3ec:	4b61      	ldr	r3, [pc, #388]	; (1c574 <readline_process_char+0x274>)
   1c3ee:	691a      	ldr	r2, [r3, #16]
   1c3f0:	4b60      	ldr	r3, [pc, #384]	; (1c574 <readline_process_char+0x274>)
   1c3f2:	685b      	ldr	r3, [r3, #4]
   1c3f4:	1ad1      	subs	r1, r2, r3
   1c3f6:	f107 0308 	add.w	r3, r7, #8
   1c3fa:	4a60      	ldr	r2, [pc, #384]	; (1c57c <readline_process_char+0x27c>)
   1c3fc:	f7fe fc8e 	bl	1ad1c <mp_repl_autocomplete>
   1c400:	6138      	str	r0, [r7, #16]
            if (compl_len == 0) {
   1c402:	693b      	ldr	r3, [r7, #16]
   1c404:	2b00      	cmp	r3, #0
   1c406:	f000 8170 	beq.w	1c6ea <readline_process_char+0x3ea>
                // no match
            } else if (compl_len == (size_t)(-1)) {
   1c40a:	693b      	ldr	r3, [r7, #16]
   1c40c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c410:	d116      	bne.n	1c440 <readline_process_char+0x140>
                // many matches
                mp_hal_stdout_tx_str(rl.prompt);
   1c412:	4b58      	ldr	r3, [pc, #352]	; (1c574 <readline_process_char+0x274>)
   1c414:	699b      	ldr	r3, [r3, #24]
   1c416:	4618      	mov	r0, r3
   1c418:	f7ff f9e6 	bl	1b7e8 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1c41c:	4b55      	ldr	r3, [pc, #340]	; (1c574 <readline_process_char+0x274>)
   1c41e:	681b      	ldr	r3, [r3, #0]
   1c420:	689a      	ldr	r2, [r3, #8]
   1c422:	4b54      	ldr	r3, [pc, #336]	; (1c574 <readline_process_char+0x274>)
   1c424:	685b      	ldr	r3, [r3, #4]
   1c426:	18d0      	adds	r0, r2, r3
   1c428:	4b52      	ldr	r3, [pc, #328]	; (1c574 <readline_process_char+0x274>)
   1c42a:	691a      	ldr	r2, [r3, #16]
   1c42c:	4b51      	ldr	r3, [pc, #324]	; (1c574 <readline_process_char+0x274>)
   1c42e:	685b      	ldr	r3, [r3, #4]
   1c430:	1ad3      	subs	r3, r2, r3
   1c432:	4619      	mov	r1, r3
   1c434:	f7ff f8d4 	bl	1b5e0 <mp_hal_stdout_tx_strn>
                redraw_from_cursor = true;
   1c438:	2301      	movs	r3, #1
   1c43a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   1c43e:	e154      	b.n	1c6ea <readline_process_char+0x3ea>
            } else {
                // one match
                for (size_t i = 0; i < compl_len; ++i) {
   1c440:	2300      	movs	r3, #0
   1c442:	61bb      	str	r3, [r7, #24]
   1c444:	e00f      	b.n	1c466 <readline_process_char+0x166>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1c446:	4b4b      	ldr	r3, [pc, #300]	; (1c574 <readline_process_char+0x274>)
   1c448:	6818      	ldr	r0, [r3, #0]
   1c44a:	4b4a      	ldr	r3, [pc, #296]	; (1c574 <readline_process_char+0x274>)
   1c44c:	691a      	ldr	r2, [r3, #16]
   1c44e:	69bb      	ldr	r3, [r7, #24]
   1c450:	18d1      	adds	r1, r2, r3
   1c452:	68bb      	ldr	r3, [r7, #8]
   1c454:	1c5a      	adds	r2, r3, #1
   1c456:	60ba      	str	r2, [r7, #8]
   1c458:	781b      	ldrb	r3, [r3, #0]
   1c45a:	461a      	mov	r2, r3
   1c45c:	f7e5 f93a 	bl	16d4 <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1c460:	69bb      	ldr	r3, [r7, #24]
   1c462:	3301      	adds	r3, #1
   1c464:	61bb      	str	r3, [r7, #24]
   1c466:	69ba      	ldr	r2, [r7, #24]
   1c468:	693b      	ldr	r3, [r7, #16]
   1c46a:	429a      	cmp	r2, r3
   1c46c:	d3eb      	bcc.n	1c446 <readline_process_char+0x146>
                }
                // set redraw parameters
                redraw_from_cursor = true;
   1c46e:	2301      	movs	r3, #1
   1c470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                redraw_step_forward = compl_len;
   1c474:	693b      	ldr	r3, [r7, #16]
   1c476:	61fb      	str	r3, [r7, #28]
   1c478:	e137      	b.n	1c6ea <readline_process_char+0x3ea>
            }
        #endif
        } else if (32 <= c && c <= 126) {
   1c47a:	687b      	ldr	r3, [r7, #4]
   1c47c:	2b1f      	cmp	r3, #31
   1c47e:	f340 8134 	ble.w	1c6ea <readline_process_char+0x3ea>
   1c482:	687b      	ldr	r3, [r7, #4]
   1c484:	2b7e      	cmp	r3, #126	; 0x7e
   1c486:	f300 8130 	bgt.w	1c6ea <readline_process_char+0x3ea>
            // printable character
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1c48a:	4b3a      	ldr	r3, [pc, #232]	; (1c574 <readline_process_char+0x274>)
   1c48c:	6818      	ldr	r0, [r3, #0]
   1c48e:	4b39      	ldr	r3, [pc, #228]	; (1c574 <readline_process_char+0x274>)
   1c490:	691b      	ldr	r3, [r3, #16]
   1c492:	687a      	ldr	r2, [r7, #4]
   1c494:	4619      	mov	r1, r3
   1c496:	f7e5 f931 	bl	16fc <vstr_ins_char>
            // set redraw parameters
            redraw_from_cursor = true;
   1c49a:	2301      	movs	r3, #1
   1c49c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            redraw_step_forward = 1;
   1c4a0:	2301      	movs	r3, #1
   1c4a2:	61fb      	str	r3, [r7, #28]
   1c4a4:	e121      	b.n	1c6ea <readline_process_char+0x3ea>
        }
    } else if (rl.escape_seq == ESEQ_ESC) {
   1c4a6:	4b33      	ldr	r3, [pc, #204]	; (1c574 <readline_process_char+0x274>)
   1c4a8:	689b      	ldr	r3, [r3, #8]
   1c4aa:	2b01      	cmp	r3, #1
   1c4ac:	d110      	bne.n	1c4d0 <readline_process_char+0x1d0>
        switch (c) {
   1c4ae:	687b      	ldr	r3, [r7, #4]
   1c4b0:	2b4f      	cmp	r3, #79	; 0x4f
   1c4b2:	d005      	beq.n	1c4c0 <readline_process_char+0x1c0>
   1c4b4:	2b5b      	cmp	r3, #91	; 0x5b
   1c4b6:	d107      	bne.n	1c4c8 <readline_process_char+0x1c8>
            case '[':
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1c4b8:	4b2e      	ldr	r3, [pc, #184]	; (1c574 <readline_process_char+0x274>)
   1c4ba:	2202      	movs	r2, #2
   1c4bc:	609a      	str	r2, [r3, #8]
                break;
   1c4be:	e114      	b.n	1c6ea <readline_process_char+0x3ea>
            case 'O':
                rl.escape_seq = ESEQ_ESC_O;
   1c4c0:	4b2c      	ldr	r3, [pc, #176]	; (1c574 <readline_process_char+0x274>)
   1c4c2:	2204      	movs	r2, #4
   1c4c4:	609a      	str	r2, [r3, #8]
                break;
   1c4c6:	e110      	b.n	1c6ea <readline_process_char+0x3ea>
            default:
                DEBUG_printf("(ESC %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1c4c8:	4b2a      	ldr	r3, [pc, #168]	; (1c574 <readline_process_char+0x274>)
   1c4ca:	2200      	movs	r2, #0
   1c4cc:	609a      	str	r2, [r3, #8]
   1c4ce:	e10c      	b.n	1c6ea <readline_process_char+0x3ea>
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1c4d0:	4b28      	ldr	r3, [pc, #160]	; (1c574 <readline_process_char+0x274>)
   1c4d2:	689b      	ldr	r3, [r3, #8]
   1c4d4:	2b02      	cmp	r3, #2
   1c4d6:	f040 80ae 	bne.w	1c636 <readline_process_char+0x336>
        if ('0' <= c && c <= '9') {
   1c4da:	687b      	ldr	r3, [r7, #4]
   1c4dc:	2b2f      	cmp	r3, #47	; 0x2f
   1c4de:	dd0a      	ble.n	1c4f6 <readline_process_char+0x1f6>
   1c4e0:	687b      	ldr	r3, [r7, #4]
   1c4e2:	2b39      	cmp	r3, #57	; 0x39
   1c4e4:	dc07      	bgt.n	1c4f6 <readline_process_char+0x1f6>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1c4e6:	4b23      	ldr	r3, [pc, #140]	; (1c574 <readline_process_char+0x274>)
   1c4e8:	2203      	movs	r2, #3
   1c4ea:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1c4ec:	687b      	ldr	r3, [r7, #4]
   1c4ee:	b2da      	uxtb	r2, r3
   1c4f0:	4b20      	ldr	r3, [pc, #128]	; (1c574 <readline_process_char+0x274>)
   1c4f2:	751a      	strb	r2, [r3, #20]
   1c4f4:	e0f9      	b.n	1c6ea <readline_process_char+0x3ea>
        } else {
            rl.escape_seq = ESEQ_NONE;
   1c4f6:	4b1f      	ldr	r3, [pc, #124]	; (1c574 <readline_process_char+0x274>)
   1c4f8:	2200      	movs	r2, #0
   1c4fa:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1c4fc:	687b      	ldr	r3, [r7, #4]
   1c4fe:	2b41      	cmp	r3, #65	; 0x41
   1c500:	d140      	bne.n	1c584 <readline_process_char+0x284>
#if MICROPY_REPL_EMACS_KEYS
up_arrow_key:
#endif
                // up arrow
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1c502:	4b1c      	ldr	r3, [pc, #112]	; (1c574 <readline_process_char+0x274>)
   1c504:	68db      	ldr	r3, [r3, #12]
   1c506:	3301      	adds	r3, #1
   1c508:	2b07      	cmp	r3, #7
   1c50a:	f300 80ee 	bgt.w	1c6ea <readline_process_char+0x3ea>
   1c50e:	4b19      	ldr	r3, [pc, #100]	; (1c574 <readline_process_char+0x274>)
   1c510:	68db      	ldr	r3, [r3, #12]
   1c512:	3301      	adds	r3, #1
   1c514:	4a1a      	ldr	r2, [pc, #104]	; (1c580 <readline_process_char+0x280>)
   1c516:	331e      	adds	r3, #30
   1c518:	009b      	lsls	r3, r3, #2
   1c51a:	4413      	add	r3, r2
   1c51c:	685b      	ldr	r3, [r3, #4]
   1c51e:	2b00      	cmp	r3, #0
   1c520:	f000 80e3 	beq.w	1c6ea <readline_process_char+0x3ea>
                    // increase hist num
                    rl.hist_cur += 1;
   1c524:	4b13      	ldr	r3, [pc, #76]	; (1c574 <readline_process_char+0x274>)
   1c526:	68db      	ldr	r3, [r3, #12]
   1c528:	3301      	adds	r3, #1
   1c52a:	4a12      	ldr	r2, [pc, #72]	; (1c574 <readline_process_char+0x274>)
   1c52c:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    rl.line->len = rl.orig_line_len;
   1c52e:	4b11      	ldr	r3, [pc, #68]	; (1c574 <readline_process_char+0x274>)
   1c530:	681b      	ldr	r3, [r3, #0]
   1c532:	4a10      	ldr	r2, [pc, #64]	; (1c574 <readline_process_char+0x274>)
   1c534:	6852      	ldr	r2, [r2, #4]
   1c536:	605a      	str	r2, [r3, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1c538:	4b0e      	ldr	r3, [pc, #56]	; (1c574 <readline_process_char+0x274>)
   1c53a:	6818      	ldr	r0, [r3, #0]
   1c53c:	4b0d      	ldr	r3, [pc, #52]	; (1c574 <readline_process_char+0x274>)
   1c53e:	68db      	ldr	r3, [r3, #12]
   1c540:	4a0f      	ldr	r2, [pc, #60]	; (1c580 <readline_process_char+0x280>)
   1c542:	331e      	adds	r3, #30
   1c544:	009b      	lsls	r3, r3, #2
   1c546:	4413      	add	r3, r2
   1c548:	685b      	ldr	r3, [r3, #4]
   1c54a:	4619      	mov	r1, r3
   1c54c:	f7e5 f85e 	bl	160c <vstr_add_str>
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c550:	4b08      	ldr	r3, [pc, #32]	; (1c574 <readline_process_char+0x274>)
   1c552:	691a      	ldr	r2, [r3, #16]
   1c554:	4b07      	ldr	r3, [pc, #28]	; (1c574 <readline_process_char+0x274>)
   1c556:	685b      	ldr	r3, [r3, #4]
   1c558:	1ad3      	subs	r3, r2, r3
   1c55a:	627b      	str	r3, [r7, #36]	; 0x24
                    redraw_from_cursor = true;
   1c55c:	2301      	movs	r3, #1
   1c55e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1c562:	4b04      	ldr	r3, [pc, #16]	; (1c574 <readline_process_char+0x274>)
   1c564:	681b      	ldr	r3, [r3, #0]
   1c566:	685a      	ldr	r2, [r3, #4]
   1c568:	4b02      	ldr	r3, [pc, #8]	; (1c574 <readline_process_char+0x274>)
   1c56a:	685b      	ldr	r3, [r3, #4]
   1c56c:	1ad3      	subs	r3, r2, r3
   1c56e:	61fb      	str	r3, [r7, #28]
   1c570:	e0bb      	b.n	1c6ea <readline_process_char+0x3ea>
   1c572:	bf00      	nop
   1c574:	20000a10 	.word	0x20000a10
   1c578:	00022e50 	.word	0x00022e50
   1c57c:	0001d838 	.word	0x0001d838
   1c580:	20000a2c 	.word	0x20000a2c
                }
            } else if (c == 'B') {
   1c584:	687b      	ldr	r3, [r7, #4]
   1c586:	2b42      	cmp	r3, #66	; 0x42
   1c588:	d135      	bne.n	1c5f6 <readline_process_char+0x2f6>
#if MICROPY_REPL_EMACS_KEYS
down_arrow_key:
#endif
                // down arrow
                if (rl.hist_cur >= 0) {
   1c58a:	4b84      	ldr	r3, [pc, #528]	; (1c79c <readline_process_char+0x49c>)
   1c58c:	68db      	ldr	r3, [r3, #12]
   1c58e:	2b00      	cmp	r3, #0
   1c590:	f2c0 80ab 	blt.w	1c6ea <readline_process_char+0x3ea>
                    // decrease hist num
                    rl.hist_cur -= 1;
   1c594:	4b81      	ldr	r3, [pc, #516]	; (1c79c <readline_process_char+0x49c>)
   1c596:	68db      	ldr	r3, [r3, #12]
   1c598:	3b01      	subs	r3, #1
   1c59a:	4a80      	ldr	r2, [pc, #512]	; (1c79c <readline_process_char+0x49c>)
   1c59c:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1c59e:	4b7f      	ldr	r3, [pc, #508]	; (1c79c <readline_process_char+0x49c>)
   1c5a0:	6818      	ldr	r0, [r3, #0]
   1c5a2:	4b7e      	ldr	r3, [pc, #504]	; (1c79c <readline_process_char+0x49c>)
   1c5a4:	681b      	ldr	r3, [r3, #0]
   1c5a6:	685a      	ldr	r2, [r3, #4]
   1c5a8:	4b7c      	ldr	r3, [pc, #496]	; (1c79c <readline_process_char+0x49c>)
   1c5aa:	685b      	ldr	r3, [r3, #4]
   1c5ac:	1ad3      	subs	r3, r2, r3
   1c5ae:	4619      	mov	r1, r3
   1c5b0:	f7e5 f8c6 	bl	1740 <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1c5b4:	4b79      	ldr	r3, [pc, #484]	; (1c79c <readline_process_char+0x49c>)
   1c5b6:	68db      	ldr	r3, [r3, #12]
   1c5b8:	2b00      	cmp	r3, #0
   1c5ba:	db0b      	blt.n	1c5d4 <readline_process_char+0x2d4>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1c5bc:	4b77      	ldr	r3, [pc, #476]	; (1c79c <readline_process_char+0x49c>)
   1c5be:	6818      	ldr	r0, [r3, #0]
   1c5c0:	4b76      	ldr	r3, [pc, #472]	; (1c79c <readline_process_char+0x49c>)
   1c5c2:	68db      	ldr	r3, [r3, #12]
   1c5c4:	4a76      	ldr	r2, [pc, #472]	; (1c7a0 <readline_process_char+0x4a0>)
   1c5c6:	331e      	adds	r3, #30
   1c5c8:	009b      	lsls	r3, r3, #2
   1c5ca:	4413      	add	r3, r2
   1c5cc:	685b      	ldr	r3, [r3, #4]
   1c5ce:	4619      	mov	r1, r3
   1c5d0:	f7e5 f81c 	bl	160c <vstr_add_str>
                    }
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c5d4:	4b71      	ldr	r3, [pc, #452]	; (1c79c <readline_process_char+0x49c>)
   1c5d6:	691a      	ldr	r2, [r3, #16]
   1c5d8:	4b70      	ldr	r3, [pc, #448]	; (1c79c <readline_process_char+0x49c>)
   1c5da:	685b      	ldr	r3, [r3, #4]
   1c5dc:	1ad3      	subs	r3, r2, r3
   1c5de:	627b      	str	r3, [r7, #36]	; 0x24
                    redraw_from_cursor = true;
   1c5e0:	2301      	movs	r3, #1
   1c5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1c5e6:	4b6d      	ldr	r3, [pc, #436]	; (1c79c <readline_process_char+0x49c>)
   1c5e8:	681b      	ldr	r3, [r3, #0]
   1c5ea:	685a      	ldr	r2, [r3, #4]
   1c5ec:	4b6b      	ldr	r3, [pc, #428]	; (1c79c <readline_process_char+0x49c>)
   1c5ee:	685b      	ldr	r3, [r3, #4]
   1c5f0:	1ad3      	subs	r3, r2, r3
   1c5f2:	61fb      	str	r3, [r7, #28]
   1c5f4:	e079      	b.n	1c6ea <readline_process_char+0x3ea>
                }
            } else if (c == 'C') {
   1c5f6:	687b      	ldr	r3, [r7, #4]
   1c5f8:	2b43      	cmp	r3, #67	; 0x43
   1c5fa:	d109      	bne.n	1c610 <readline_process_char+0x310>
#if MICROPY_REPL_EMACS_KEYS
right_arrow_key:
#endif
                // right arrow
                if (rl.cursor_pos < rl.line->len) {
   1c5fc:	4b67      	ldr	r3, [pc, #412]	; (1c79c <readline_process_char+0x49c>)
   1c5fe:	691a      	ldr	r2, [r3, #16]
   1c600:	4b66      	ldr	r3, [pc, #408]	; (1c79c <readline_process_char+0x49c>)
   1c602:	681b      	ldr	r3, [r3, #0]
   1c604:	685b      	ldr	r3, [r3, #4]
   1c606:	429a      	cmp	r2, r3
   1c608:	d26f      	bcs.n	1c6ea <readline_process_char+0x3ea>
                    redraw_step_forward = 1;
   1c60a:	2301      	movs	r3, #1
   1c60c:	61fb      	str	r3, [r7, #28]
   1c60e:	e06c      	b.n	1c6ea <readline_process_char+0x3ea>
                }
            } else if (c == 'D') {
   1c610:	687b      	ldr	r3, [r7, #4]
   1c612:	2b44      	cmp	r3, #68	; 0x44
   1c614:	d108      	bne.n	1c628 <readline_process_char+0x328>
#if MICROPY_REPL_EMACS_KEYS
left_arrow_key:
#endif
                // left arrow
                if (rl.cursor_pos > rl.orig_line_len) {
   1c616:	4b61      	ldr	r3, [pc, #388]	; (1c79c <readline_process_char+0x49c>)
   1c618:	691a      	ldr	r2, [r3, #16]
   1c61a:	4b60      	ldr	r3, [pc, #384]	; (1c79c <readline_process_char+0x49c>)
   1c61c:	685b      	ldr	r3, [r3, #4]
   1c61e:	429a      	cmp	r2, r3
   1c620:	d963      	bls.n	1c6ea <readline_process_char+0x3ea>
                    redraw_step_back = 1;
   1c622:	2301      	movs	r3, #1
   1c624:	627b      	str	r3, [r7, #36]	; 0x24
   1c626:	e060      	b.n	1c6ea <readline_process_char+0x3ea>
                }
            } else if (c == 'H') {
   1c628:	687b      	ldr	r3, [r7, #4]
   1c62a:	2b48      	cmp	r3, #72	; 0x48
   1c62c:	d015      	beq.n	1c65a <readline_process_char+0x35a>
                // home
                goto home_key;
            } else if (c == 'F') {
   1c62e:	687b      	ldr	r3, [r7, #4]
   1c630:	2b46      	cmp	r3, #70	; 0x46
   1c632:	d15a      	bne.n	1c6ea <readline_process_char+0x3ea>
                // end
                goto end_key;
   1c634:	e027      	b.n	1c686 <readline_process_char+0x386>
            } else {
                DEBUG_printf("(ESC [ %d)", c);
            }
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1c636:	4b59      	ldr	r3, [pc, #356]	; (1c79c <readline_process_char+0x49c>)
   1c638:	689b      	ldr	r3, [r3, #8]
   1c63a:	2b03      	cmp	r3, #3
   1c63c:	d145      	bne.n	1c6ca <readline_process_char+0x3ca>
        if (c == '~') {
   1c63e:	687b      	ldr	r3, [r7, #4]
   1c640:	2b7e      	cmp	r3, #126	; 0x7e
   1c642:	d13e      	bne.n	1c6c2 <readline_process_char+0x3c2>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1c644:	4b55      	ldr	r3, [pc, #340]	; (1c79c <readline_process_char+0x49c>)
   1c646:	7d1b      	ldrb	r3, [r3, #20]
   1c648:	2b31      	cmp	r3, #49	; 0x31
   1c64a:	d009      	beq.n	1c660 <readline_process_char+0x360>
   1c64c:	4b53      	ldr	r3, [pc, #332]	; (1c79c <readline_process_char+0x49c>)
   1c64e:	7d1b      	ldrb	r3, [r3, #20]
   1c650:	2b37      	cmp	r3, #55	; 0x37
   1c652:	d10c      	bne.n	1c66e <readline_process_char+0x36e>
   1c654:	e004      	b.n	1c660 <readline_process_char+0x360>
            goto home_key;
   1c656:	bf00      	nop
   1c658:	e002      	b.n	1c660 <readline_process_char+0x360>
                goto home_key;
   1c65a:	bf00      	nop
   1c65c:	e000      	b.n	1c660 <readline_process_char+0x360>
        }
        rl.escape_seq = ESEQ_NONE;
    } else if (rl.escape_seq == ESEQ_ESC_O) {
        switch (c) {
            case 'H':
                goto home_key;
   1c65e:	bf00      	nop
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c660:	4b4e      	ldr	r3, [pc, #312]	; (1c79c <readline_process_char+0x49c>)
   1c662:	691a      	ldr	r2, [r3, #16]
   1c664:	4b4d      	ldr	r3, [pc, #308]	; (1c79c <readline_process_char+0x49c>)
   1c666:	685b      	ldr	r3, [r3, #4]
   1c668:	1ad3      	subs	r3, r2, r3
   1c66a:	627b      	str	r3, [r7, #36]	; 0x24
   1c66c:	e029      	b.n	1c6c2 <readline_process_char+0x3c2>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1c66e:	4b4b      	ldr	r3, [pc, #300]	; (1c79c <readline_process_char+0x49c>)
   1c670:	7d1b      	ldrb	r3, [r3, #20]
   1c672:	2b34      	cmp	r3, #52	; 0x34
   1c674:	d007      	beq.n	1c686 <readline_process_char+0x386>
   1c676:	4b49      	ldr	r3, [pc, #292]	; (1c79c <readline_process_char+0x49c>)
   1c678:	7d1b      	ldrb	r3, [r3, #20]
   1c67a:	2b38      	cmp	r3, #56	; 0x38
   1c67c:	d10b      	bne.n	1c696 <readline_process_char+0x396>
   1c67e:	e002      	b.n	1c686 <readline_process_char+0x386>
            goto end_key;
   1c680:	bf00      	nop
   1c682:	e000      	b.n	1c686 <readline_process_char+0x386>
            case 'F':
                goto end_key;
   1c684:	bf00      	nop
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1c686:	4b45      	ldr	r3, [pc, #276]	; (1c79c <readline_process_char+0x49c>)
   1c688:	681b      	ldr	r3, [r3, #0]
   1c68a:	685a      	ldr	r2, [r3, #4]
   1c68c:	4b43      	ldr	r3, [pc, #268]	; (1c79c <readline_process_char+0x49c>)
   1c68e:	691b      	ldr	r3, [r3, #16]
   1c690:	1ad3      	subs	r3, r2, r3
   1c692:	61fb      	str	r3, [r7, #28]
   1c694:	e015      	b.n	1c6c2 <readline_process_char+0x3c2>
            } else if (rl.escape_seq_buf[0] == '3') {
   1c696:	4b41      	ldr	r3, [pc, #260]	; (1c79c <readline_process_char+0x49c>)
   1c698:	7d1b      	ldrb	r3, [r3, #20]
   1c69a:	2b33      	cmp	r3, #51	; 0x33
   1c69c:	d111      	bne.n	1c6c2 <readline_process_char+0x3c2>
                if (rl.cursor_pos < rl.line->len) {
   1c69e:	4b3f      	ldr	r3, [pc, #252]	; (1c79c <readline_process_char+0x49c>)
   1c6a0:	691a      	ldr	r2, [r3, #16]
   1c6a2:	4b3e      	ldr	r3, [pc, #248]	; (1c79c <readline_process_char+0x49c>)
   1c6a4:	681b      	ldr	r3, [r3, #0]
   1c6a6:	685b      	ldr	r3, [r3, #4]
   1c6a8:	429a      	cmp	r2, r3
   1c6aa:	d20a      	bcs.n	1c6c2 <readline_process_char+0x3c2>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1c6ac:	4b3b      	ldr	r3, [pc, #236]	; (1c79c <readline_process_char+0x49c>)
   1c6ae:	6818      	ldr	r0, [r3, #0]
   1c6b0:	4b3a      	ldr	r3, [pc, #232]	; (1c79c <readline_process_char+0x49c>)
   1c6b2:	691b      	ldr	r3, [r3, #16]
   1c6b4:	2201      	movs	r2, #1
   1c6b6:	4619      	mov	r1, r3
   1c6b8:	f7e5 f85c 	bl	1774 <vstr_cut_out_bytes>
                    redraw_from_cursor = true;
   1c6bc:	2301      	movs	r3, #1
   1c6be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        rl.escape_seq = ESEQ_NONE;
   1c6c2:	4b36      	ldr	r3, [pc, #216]	; (1c79c <readline_process_char+0x49c>)
   1c6c4:	2200      	movs	r2, #0
   1c6c6:	609a      	str	r2, [r3, #8]
   1c6c8:	e00f      	b.n	1c6ea <readline_process_char+0x3ea>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1c6ca:	4b34      	ldr	r3, [pc, #208]	; (1c79c <readline_process_char+0x49c>)
   1c6cc:	689b      	ldr	r3, [r3, #8]
   1c6ce:	2b04      	cmp	r3, #4
   1c6d0:	d108      	bne.n	1c6e4 <readline_process_char+0x3e4>
        switch (c) {
   1c6d2:	687b      	ldr	r3, [r7, #4]
   1c6d4:	2b46      	cmp	r3, #70	; 0x46
   1c6d6:	d0d5      	beq.n	1c684 <readline_process_char+0x384>
   1c6d8:	2b48      	cmp	r3, #72	; 0x48
   1c6da:	d0c0      	beq.n	1c65e <readline_process_char+0x35e>
            default:
                DEBUG_printf("(ESC O %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1c6dc:	4b2f      	ldr	r3, [pc, #188]	; (1c79c <readline_process_char+0x49c>)
   1c6de:	2200      	movs	r2, #0
   1c6e0:	609a      	str	r2, [r3, #8]
   1c6e2:	e002      	b.n	1c6ea <readline_process_char+0x3ea>
        }
    } else {
        rl.escape_seq = ESEQ_NONE;
   1c6e4:	4b2d      	ldr	r3, [pc, #180]	; (1c79c <readline_process_char+0x49c>)
   1c6e6:	2200      	movs	r2, #0
   1c6e8:	609a      	str	r2, [r3, #8]
    }

    // redraw command prompt, efficiently
    if (redraw_step_back > 0) {
   1c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6ec:	2b00      	cmp	r3, #0
   1c6ee:	dd09      	ble.n	1c704 <readline_process_char+0x404>
        mp_hal_move_cursor_back(redraw_step_back);
   1c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6f2:	4618      	mov	r0, r3
   1c6f4:	f7ff fdc8 	bl	1c288 <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1c6f8:	4b28      	ldr	r3, [pc, #160]	; (1c79c <readline_process_char+0x49c>)
   1c6fa:	691a      	ldr	r2, [r3, #16]
   1c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6fe:	1ad3      	subs	r3, r2, r3
   1c700:	4a26      	ldr	r2, [pc, #152]	; (1c79c <readline_process_char+0x49c>)
   1c702:	6113      	str	r3, [r2, #16]
    }
    if (redraw_from_cursor) {
   1c704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1c708:	2b00      	cmp	r3, #0
   1c70a:	d02d      	beq.n	1c768 <readline_process_char+0x468>
        if (rl.line->len < last_line_len) {
   1c70c:	4b23      	ldr	r3, [pc, #140]	; (1c79c <readline_process_char+0x49c>)
   1c70e:	681b      	ldr	r3, [r3, #0]
   1c710:	685a      	ldr	r2, [r3, #4]
   1c712:	697b      	ldr	r3, [r7, #20]
   1c714:	429a      	cmp	r2, r3
   1c716:	d206      	bcs.n	1c726 <readline_process_char+0x426>
            // erase old chars
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1c718:	4b20      	ldr	r3, [pc, #128]	; (1c79c <readline_process_char+0x49c>)
   1c71a:	691b      	ldr	r3, [r3, #16]
   1c71c:	697a      	ldr	r2, [r7, #20]
   1c71e:	1ad3      	subs	r3, r2, r3
   1c720:	4618      	mov	r0, r3
   1c722:	f7ff fddf 	bl	1c2e4 <mp_hal_erase_line_from_cursor>
        }
        // draw new chars
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1c726:	4b1d      	ldr	r3, [pc, #116]	; (1c79c <readline_process_char+0x49c>)
   1c728:	681b      	ldr	r3, [r3, #0]
   1c72a:	689a      	ldr	r2, [r3, #8]
   1c72c:	4b1b      	ldr	r3, [pc, #108]	; (1c79c <readline_process_char+0x49c>)
   1c72e:	691b      	ldr	r3, [r3, #16]
   1c730:	18d0      	adds	r0, r2, r3
   1c732:	4b1a      	ldr	r3, [pc, #104]	; (1c79c <readline_process_char+0x49c>)
   1c734:	681b      	ldr	r3, [r3, #0]
   1c736:	685a      	ldr	r2, [r3, #4]
   1c738:	4b18      	ldr	r3, [pc, #96]	; (1c79c <readline_process_char+0x49c>)
   1c73a:	691b      	ldr	r3, [r3, #16]
   1c73c:	1ad3      	subs	r3, r2, r3
   1c73e:	4619      	mov	r1, r3
   1c740:	f7fe ff4e 	bl	1b5e0 <mp_hal_stdout_tx_strn>
        // move cursor forward if needed (already moved forward by length of line, so move it back)
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1c744:	4b15      	ldr	r3, [pc, #84]	; (1c79c <readline_process_char+0x49c>)
   1c746:	681b      	ldr	r3, [r3, #0]
   1c748:	685a      	ldr	r2, [r3, #4]
   1c74a:	4b14      	ldr	r3, [pc, #80]	; (1c79c <readline_process_char+0x49c>)
   1c74c:	6919      	ldr	r1, [r3, #16]
   1c74e:	69fb      	ldr	r3, [r7, #28]
   1c750:	440b      	add	r3, r1
   1c752:	1ad3      	subs	r3, r2, r3
   1c754:	4618      	mov	r0, r3
   1c756:	f7ff fd97 	bl	1c288 <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1c75a:	4b10      	ldr	r3, [pc, #64]	; (1c79c <readline_process_char+0x49c>)
   1c75c:	691a      	ldr	r2, [r3, #16]
   1c75e:	69fb      	ldr	r3, [r7, #28]
   1c760:	4413      	add	r3, r2
   1c762:	4a0e      	ldr	r2, [pc, #56]	; (1c79c <readline_process_char+0x49c>)
   1c764:	6113      	str	r3, [r2, #16]
   1c766:	e013      	b.n	1c790 <readline_process_char+0x490>
    } else if (redraw_step_forward > 0) {
   1c768:	69fb      	ldr	r3, [r7, #28]
   1c76a:	2b00      	cmp	r3, #0
   1c76c:	dd10      	ble.n	1c790 <readline_process_char+0x490>
        // draw over old chars to move cursor forwards
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1c76e:	4b0b      	ldr	r3, [pc, #44]	; (1c79c <readline_process_char+0x49c>)
   1c770:	681b      	ldr	r3, [r3, #0]
   1c772:	689a      	ldr	r2, [r3, #8]
   1c774:	4b09      	ldr	r3, [pc, #36]	; (1c79c <readline_process_char+0x49c>)
   1c776:	691b      	ldr	r3, [r3, #16]
   1c778:	4413      	add	r3, r2
   1c77a:	69fa      	ldr	r2, [r7, #28]
   1c77c:	4611      	mov	r1, r2
   1c77e:	4618      	mov	r0, r3
   1c780:	f7fe ff2e 	bl	1b5e0 <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1c784:	4b05      	ldr	r3, [pc, #20]	; (1c79c <readline_process_char+0x49c>)
   1c786:	691a      	ldr	r2, [r3, #16]
   1c788:	69fb      	ldr	r3, [r7, #28]
   1c78a:	4413      	add	r3, r2
   1c78c:	4a03      	ldr	r2, [pc, #12]	; (1c79c <readline_process_char+0x49c>)
   1c78e:	6113      	str	r3, [r2, #16]
    }

    return -1;
   1c790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1c794:	4618      	mov	r0, r3
   1c796:	3728      	adds	r7, #40	; 0x28
   1c798:	46bd      	mov	sp, r7
   1c79a:	bd80      	pop	{r7, pc}
   1c79c:	20000a10 	.word	0x20000a10
   1c7a0:	20000a2c 	.word	0x20000a2c

0001c7a4 <readline_note_newline>:
        }
    }
}
#endif

void readline_note_newline(const char *prompt) {
   1c7a4:	b580      	push	{r7, lr}
   1c7a6:	b082      	sub	sp, #8
   1c7a8:	af00      	add	r7, sp, #0
   1c7aa:	6078      	str	r0, [r7, #4]
    rl.orig_line_len = rl.line->len;
   1c7ac:	4b09      	ldr	r3, [pc, #36]	; (1c7d4 <readline_note_newline+0x30>)
   1c7ae:	681b      	ldr	r3, [r3, #0]
   1c7b0:	685b      	ldr	r3, [r3, #4]
   1c7b2:	4a08      	ldr	r2, [pc, #32]	; (1c7d4 <readline_note_newline+0x30>)
   1c7b4:	6053      	str	r3, [r2, #4]
    rl.cursor_pos = rl.orig_line_len;
   1c7b6:	4b07      	ldr	r3, [pc, #28]	; (1c7d4 <readline_note_newline+0x30>)
   1c7b8:	685b      	ldr	r3, [r3, #4]
   1c7ba:	4a06      	ldr	r2, [pc, #24]	; (1c7d4 <readline_note_newline+0x30>)
   1c7bc:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1c7be:	4a05      	ldr	r2, [pc, #20]	; (1c7d4 <readline_note_newline+0x30>)
   1c7c0:	687b      	ldr	r3, [r7, #4]
   1c7c2:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1c7c4:	6878      	ldr	r0, [r7, #4]
   1c7c6:	f7ff f80f 	bl	1b7e8 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
    #endif
}
   1c7ca:	bf00      	nop
   1c7cc:	3708      	adds	r7, #8
   1c7ce:	46bd      	mov	sp, r7
   1c7d0:	bd80      	pop	{r7, pc}
   1c7d2:	bf00      	nop
   1c7d4:	20000a10 	.word	0x20000a10

0001c7d8 <readline_init>:

void readline_init(vstr_t *line, const char *prompt) {
   1c7d8:	b580      	push	{r7, lr}
   1c7da:	b082      	sub	sp, #8
   1c7dc:	af00      	add	r7, sp, #0
   1c7de:	6078      	str	r0, [r7, #4]
   1c7e0:	6039      	str	r1, [r7, #0]
    rl.line = line;
   1c7e2:	4a0f      	ldr	r2, [pc, #60]	; (1c820 <readline_init+0x48>)
   1c7e4:	687b      	ldr	r3, [r7, #4]
   1c7e6:	6013      	str	r3, [r2, #0]
    rl.orig_line_len = line->len;
   1c7e8:	687b      	ldr	r3, [r7, #4]
   1c7ea:	685b      	ldr	r3, [r3, #4]
   1c7ec:	4a0c      	ldr	r2, [pc, #48]	; (1c820 <readline_init+0x48>)
   1c7ee:	6053      	str	r3, [r2, #4]
    rl.escape_seq = ESEQ_NONE;
   1c7f0:	4b0b      	ldr	r3, [pc, #44]	; (1c820 <readline_init+0x48>)
   1c7f2:	2200      	movs	r2, #0
   1c7f4:	609a      	str	r2, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1c7f6:	4b0a      	ldr	r3, [pc, #40]	; (1c820 <readline_init+0x48>)
   1c7f8:	2200      	movs	r2, #0
   1c7fa:	751a      	strb	r2, [r3, #20]
    rl.hist_cur = -1;
   1c7fc:	4b08      	ldr	r3, [pc, #32]	; (1c820 <readline_init+0x48>)
   1c7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c802:	60da      	str	r2, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1c804:	4b06      	ldr	r3, [pc, #24]	; (1c820 <readline_init+0x48>)
   1c806:	685b      	ldr	r3, [r3, #4]
   1c808:	4a05      	ldr	r2, [pc, #20]	; (1c820 <readline_init+0x48>)
   1c80a:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1c80c:	4a04      	ldr	r2, [pc, #16]	; (1c820 <readline_init+0x48>)
   1c80e:	683b      	ldr	r3, [r7, #0]
   1c810:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1c812:	6838      	ldr	r0, [r7, #0]
   1c814:	f7fe ffe8 	bl	1b7e8 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
    #endif
}
   1c818:	bf00      	nop
   1c81a:	3708      	adds	r7, #8
   1c81c:	46bd      	mov	sp, r7
   1c81e:	bd80      	pop	{r7, pc}
   1c820:	20000a10 	.word	0x20000a10

0001c824 <readline>:

int readline(vstr_t *line, const char *prompt) {
   1c824:	b580      	push	{r7, lr}
   1c826:	b084      	sub	sp, #16
   1c828:	af00      	add	r7, sp, #0
   1c82a:	6078      	str	r0, [r7, #4]
   1c82c:	6039      	str	r1, [r7, #0]
    readline_init(line, prompt);
   1c82e:	6839      	ldr	r1, [r7, #0]
   1c830:	6878      	ldr	r0, [r7, #4]
   1c832:	f7ff ffd1 	bl	1c7d8 <readline_init>
    for (;;) {
        int c = mp_hal_stdin_rx_chr();
   1c836:	f7fe febb 	bl	1b5b0 <mp_hal_stdin_rx_chr>
   1c83a:	60f8      	str	r0, [r7, #12]
        int r = readline_process_char(c);
   1c83c:	68f8      	ldr	r0, [r7, #12]
   1c83e:	f7ff fd5f 	bl	1c300 <readline_process_char>
   1c842:	60b8      	str	r0, [r7, #8]
        if (r >= 0) {
   1c844:	68bb      	ldr	r3, [r7, #8]
   1c846:	2b00      	cmp	r3, #0
   1c848:	dbf5      	blt.n	1c836 <readline+0x12>
            return r;
   1c84a:	68bb      	ldr	r3, [r7, #8]
        }
    }
}
   1c84c:	4618      	mov	r0, r3
   1c84e:	3710      	adds	r7, #16
   1c850:	46bd      	mov	sp, r7
   1c852:	bd80      	pop	{r7, pc}

0001c854 <readline_push_history>:

void readline_push_history(const char *line) {
   1c854:	b580      	push	{r7, lr}
   1c856:	b084      	sub	sp, #16
   1c858:	af00      	add	r7, sp, #0
   1c85a:	6078      	str	r0, [r7, #4]
    if (line[0] != '\0'
   1c85c:	687b      	ldr	r3, [r7, #4]
   1c85e:	781b      	ldrb	r3, [r3, #0]
   1c860:	2b00      	cmp	r3, #0
   1c862:	d02c      	beq.n	1c8be <readline_push_history+0x6a>
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1c864:	4b18      	ldr	r3, [pc, #96]	; (1c8c8 <readline_push_history+0x74>)
   1c866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1c868:	2b00      	cmp	r3, #0
   1c86a:	d008      	beq.n	1c87e <readline_push_history+0x2a>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1c86c:	4b16      	ldr	r3, [pc, #88]	; (1c8c8 <readline_push_history+0x74>)
   1c86e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1c870:	6879      	ldr	r1, [r7, #4]
   1c872:	4618      	mov	r0, r3
   1c874:	f7ff fba2 	bl	1bfbc <strcmp>
   1c878:	4603      	mov	r3, r0
   1c87a:	2b00      	cmp	r3, #0
   1c87c:	d01f      	beq.n	1c8be <readline_push_history+0x6a>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1c87e:	6878      	ldr	r0, [r7, #4]
   1c880:	f7ff fce2 	bl	1c248 <str_dup_maybe>
   1c884:	60b8      	str	r0, [r7, #8]
        if (most_recent_hist != NULL) {
   1c886:	68bb      	ldr	r3, [r7, #8]
   1c888:	2b00      	cmp	r3, #0
   1c88a:	d018      	beq.n	1c8be <readline_push_history+0x6a>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1c88c:	2307      	movs	r3, #7
   1c88e:	60fb      	str	r3, [r7, #12]
   1c890:	e00f      	b.n	1c8b2 <readline_push_history+0x5e>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1c892:	68fb      	ldr	r3, [r7, #12]
   1c894:	3b01      	subs	r3, #1
   1c896:	4a0c      	ldr	r2, [pc, #48]	; (1c8c8 <readline_push_history+0x74>)
   1c898:	331e      	adds	r3, #30
   1c89a:	009b      	lsls	r3, r3, #2
   1c89c:	4413      	add	r3, r2
   1c89e:	685a      	ldr	r2, [r3, #4]
   1c8a0:	4909      	ldr	r1, [pc, #36]	; (1c8c8 <readline_push_history+0x74>)
   1c8a2:	68fb      	ldr	r3, [r7, #12]
   1c8a4:	331e      	adds	r3, #30
   1c8a6:	009b      	lsls	r3, r3, #2
   1c8a8:	440b      	add	r3, r1
   1c8aa:	605a      	str	r2, [r3, #4]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1c8ac:	68fb      	ldr	r3, [r7, #12]
   1c8ae:	3b01      	subs	r3, #1
   1c8b0:	60fb      	str	r3, [r7, #12]
   1c8b2:	68fb      	ldr	r3, [r7, #12]
   1c8b4:	2b00      	cmp	r3, #0
   1c8b6:	dcec      	bgt.n	1c892 <readline_push_history+0x3e>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1c8b8:	4a03      	ldr	r2, [pc, #12]	; (1c8c8 <readline_push_history+0x74>)
   1c8ba:	68bb      	ldr	r3, [r7, #8]
   1c8bc:	67d3      	str	r3, [r2, #124]	; 0x7c
        }
    }
}
   1c8be:	bf00      	nop
   1c8c0:	3710      	adds	r7, #16
   1c8c2:	46bd      	mov	sp, r7
   1c8c4:	bd80      	pop	{r7, pc}
   1c8c6:	bf00      	nop
   1c8c8:	20000a2c 	.word	0x20000a2c

0001c8cc <__func__.6655>:
   1c8cc:	665f6367 00656572                       gc_free.

0001c8d4 <__func__.6672>:
   1c8d4:	725f6367 6c6c6165 0000636f 49524556     gc_realloc..VERI
   1c8e4:	505f5946 70285254 00297274 2e2f2e2e     FY_PTR(ptr).../.
   1c8f4:	79702f2e 2e63672f 00000063 5f425441     ./py/gc.c...ATB_
   1c904:	5f544547 444e494b 6f6c6228 20296b63     GET_KIND(block) 
   1c914:	41203d3d 45485f54 00004441 5f425441     == AT_HEAD..ATB_
   1c924:	5f544547 444e494b 296c6228 203d3d20     GET_KIND(bl) == 
   1c934:	465f5441 00454552 203a4347 61746f74     AT_FREE.GC: tota
   1c944:	25203a6c 75202c75 3a646573 2c752520     l: %u, used: %u,
   1c954:	65726620 25203a65 00000a75 2e6f4e20      free: %u... No.
   1c964:	20666f20 6c622d31 736b636f 7525203a      of 1-blocks: %u
   1c974:	2d32202c 636f6c62 203a736b 202c7525     , 2-blocks: %u, 
   1c984:	2078616d 206b6c62 203a7a73 202c7525     max blk sz: %u, 
   1c994:	2078616d 65657266 3a7a7320 0a752520     max free sz: %u.
   1c9a4:	00000000 6d204347 726f6d65 616c2079     ....GC memory la
   1c9b4:	74756f79 7266203b 25206d6f 00003a70     yout; from %p:..
   1c9c4:	0000000a 2020200a 20202020 20752528     .....       (%u 
   1c9d4:	656e696c 6c612073 7266206c 00296565     lines all free).
   1c9e4:	3530250a 00203a78 00006325 00000000     .%05x: .%c......
   1c9f4:	00000005 5f5f07c4 5f646461 0000005f     ......__add__...
   1ca04:	5f5f082b 6c6f6f62 00005f5f 5f5f0f42     +.__bool__..B.__
   1ca14:	6c697562 6c635f64 5f737361 0000005f     build_class__...
   1ca24:	5f5f08a7 6c6c6163 00005f5f 5f5f092b     ..__call__..+.__
   1ca34:	73616c63 005f5f73 5f5f0cc6 746e6f63     class__...__cont
   1ca44:	736e6961 00005f5f 5f5f0bfd 696c6564     ains__....__deli
   1ca54:	5f6d6574 0000005f 5f5f096d 65746e65     tem__...m.__ente
   1ca64:	005f5f72 5f5f0671 5f5f7165 00000000     r__.q.__eq__....
   1ca74:	5f5f0845 74697865 00005f5f 5f5f06a7     E.__exit__....__
   1ca84:	5f5f6567 00000000 5f5f0b40 61746567     ge__....@.__geta
   1ca94:	5f727474 0000005f 5f5f0b26 69746567     ttr__...&.__geti
   1caa4:	5f6d6574 0000005f 5f5f06b6 5f5f7467     tem__.....__gt__
   1cab4:	00000000 5f5f08f7 68736168 00005f5f     ......__hash__..
   1cac4:	5f5f086d 64646169 00005f5f 5f5f0a38     m.__iadd__..8.__
   1cad4:	6f706d69 5f5f7472 00000000 5f5f085f     import__...._.__
   1cae4:	74696e69 00005f5f 5f5f0808 62757369     init__....__isub
   1caf4:	00005f5f 5f5f08cf 72657469 00005f5f     __....__iter__..
   1cb04:	5f5f06cc 5f5f656c 00000000 5f5f07e2     ..__le__......__
   1cb14:	5f6e656c 0000005f 5f5f065d 5f5f746c     len__...].__lt__
   1cb24:	00000000 5f5f088e 6e69616d 00005f5f     ......__main__..
   1cb34:	5f5f0aff 75646f6d 5f5f656c 00000000     ..__module__....
   1cb44:	5f5f08e2 656d616e 00005f5f 5f5f0779     ..__name__..y.__
   1cb54:	5f77656e 0000005f 5f5f0802 7478656e     new__.....__next
   1cb64:	00005f5f 5f5f08c8 68746170 00005f5f     __....__path__..
   1cb74:	5f5f0c6b 6c617571 656d616e 00005f5f     k.__qualname__..
   1cb84:	5f5f0e01 6c706572 6972705f 5f5f746e     ..__repl_print__
   1cb94:	00000000 5f5f0810 72706572 00005f5f     ......__repr__..
   1cba4:	5f5f0b32 69746573 5f6d6574 0000005f     2.__setitem__...
   1cbb4:	5f5f07d0 5f727473 0000005f 5f5f0721     ..__str__...!.__
   1cbc4:	5f627573 0000005f 5f5f0d4f 63617274     sub__...O.__trac
   1cbd4:	63616265 005f5f6b 002a018f 005f01fa     eback__...*..._.
   1cbe4:	002f018a 2325036c 0000006f 2325037b     ../.l.%#o...{.%#
   1cbf4:	00000078 3a7b0558 007d6223 00200185     x...X.{:#b}... .
   1cc04:	000a01af 616d2073 756d6978 6572206d     ....s maximum re
   1cc14:	73727563 206e6f69 74706564 78652068     cursion depth ex
   1cc24:	64656563 00006465 6d3c08bd 6c75646f     ceeded....<modul
   1cc34:	00003e65 6c3c0880 64626d61 00003e61     e>....<lambda>..
   1cc44:	6c3c0ad4 63747369 3e706d6f 00000000     ..<listcomp>....
   1cc54:	643c0acc 63746369 3e706d6f 00000000     ..<dictcomp>....
   1cc64:	733c0954 6f637465 003e706d 673c0934     T.<setcomp>.4.<g
   1cc74:	78656e65 003e7270 733c0852 6e697274     enexpr>.R.<strin
   1cc84:	00003e67 733c07e3 6e696474 0000003e     g>....<stdin>...
   1cc94:	747505b7 00382d66 662f061a 6873616c     ..utf-8.../flash
   1cca4:	00000000 662f0a92 6873616c 62696c2f     ....../flash/lib
   1ccb4:	00000000 4c41037c 00000054 72410f2d     ....|.ALT...-.Ar
   1ccc4:	6d687469 63697465 6f727245 00000072     ithmeticError...
   1ccd4:	73410e97 74726573 456e6f69 726f7272     ..AssertionError
   1cce4:	00000000 74410e21 62697274 45657475     ....!.AttributeE
   1ccf4:	726f7272 00000000 61420d07 78456573     rror......BaseEx
   1cd04:	74706563 006e6f69 4f450891 72724546     ception...EOFErr
   1cd14:	0000726f 6c4508f0 7370696c 00007369     or....Ellipsis..
   1cd24:	784509f2 74706563 006e6f69 65470d16     ..Exception...Ge
   1cd34:	6172656e 45726f74 00746978 49480a8b     neratorExit...HI
   1cd44:	505f4847 5245574f 00000000 4e490222     GH_POWER....".IN
   1cd54:	00000000 52490b37 41465f51 4e494c4c     ....7.IRQ_FALLIN
   1cd64:	00000047 52490e57 49485f51 4c5f4847     G...W.IRQ_HIGH_L
   1cd74:	4c455645 00000000 52490d8d 4f4c5f51     EVEL......IRQ_LO
   1cd84:	454c5f57 004c4556 52490a78 49525f51     W_LEVEL.x.IRQ_RI
   1cd94:	474e4953 00000000 6d490b20 74726f70     SING.... .Import
   1cda4:	6f727245 00000072 6e49105c 746e6564     Error...\.Indent
   1cdb4:	6f697461 7272456e 0000726f 6e490a83     ationError....In
   1cdc4:	45786564 726f7272 00000000 654b08ea     dexError......Ke
   1cdd4:	72724579 0000726f 654b11af 616f6279     yError....Keyboa
   1cde4:	6e496472 72726574 00747075 4f4c09b1     rdInterrupt...LO
   1cdf4:	4f505f57 00524557 6f4c0bff 70756b6f     W_POWER...Lookup
   1ce04:	6f727245 00000072 454d0969 4f505f44     Error...i.MED_PO
   1ce14:	00524557 654d0bdc 79726f6d 6f727245     WER...MemoryErro
   1ce24:	00000072 614e09ba 7245656d 00726f72     r.....NameError.
   1ce34:	6f4e046f 0000656e 6f4e0817 7954656e     o.None....NoneTy
   1ce44:	00006570 6f4e13c6 706d4974 656d656c     pe....NotImpleme
   1ce54:	6465746e 6f727245 00000072 504f0a5e     ntedError...^.OP
   1ce64:	445f4e45 4e494152 00000000 534f07a1     EN_DRAIN......OS
   1ce74:	6f727245 00000072 554f030b 00000054     Error.....OUT...
   1ce84:	764f0d81 6c667265 7245776f 00726f72     ..OverflowError.
   1ce94:	555009ad 445f4c4c 004e574f 555007ba     ..PULL_DOWN...PU
   1cea4:	555f4c4c 00000050 69500312 0000006e     LL_UP.....Pin...
   1ceb4:	75520c61 6d69746e 72724565 0000726f     a.RuntimeError..
   1cec4:	74530dea 7449706f 74617265 006e6f69     ..StopIteration.
   1ced4:	79530b94 7861746e 6f727245 00000072     ..SyntaxError...
   1cee4:	79530a20 6d657473 74697845 00000000      .SystemExit....
   1cef4:	79540925 72456570 00726f72 61560a96     %.TypeError...Va
   1cf04:	4565756c 726f7272 00000000 655a11b6     lueError......Ze
   1cf14:	69446f72 69736976 72456e6f 00726f72     roDivisionError.
   1cf24:	62610395 00000073 6c610344 0000006c     ..abs...D.all...
   1cf34:	6c611d78 5f636f6c 72656d65 636e6567     x.alloc_emergenc
   1cf44:	78655f79 74706563 5f6e6f69 00667562     y_exception_buf.
   1cf54:	6c61035c 00000074 6c610821 696c5f74     \.alt...!.alt_li
   1cf64:	00007473 6e610313 00000079 7061066b     st....any...k.ap
   1cf74:	646e6570 00000000 726104c2 00007367     pend......args..
   1cf84:	696203e0 0000006e 6f62057f 00647261     ..bin.....board.
   1cf94:	6f6204eb 00006c6f 6f620c97 5f646e75     ..bool....bound_
   1cfa4:	6874656d 0000646f 756208f7 69746c69     method....builti
   1cfb4:	0000736e 79620822 6f636574 00006564     ns..".bytecode..
   1cfc4:	7962055c 00736574 6163080d 62616c6c     \.bytes...callab
   1cfd4:	0000656c 686303dc 00000072 6c630bb4     le....chr.....cl
   1cfe4:	6d737361 6f687465 00000064 6c63057c     assmethod...|.cl
   1cff4:	00726165 6c630533 0065736f 6c630774     ear.3.close.t.cl
   1d004:	7275736f 00000065 6f6305c0 0074736e     osure.....const.
   1d014:	6f6304e0 00007970 6f6305a6 00746e75     ..copy....count.
   1d024:	6964043f 00007463 6964092d 765f7463     ?.dict..-.dict_v
   1d034:	00776569 696403fa 00000072 696406b8     iew...dir.....di
   1d044:	646f6d76 00000000 72640549 00657669     vmod....I.drive.
   1d054:	6e65030a 00000064 6e65081b 69777364     ..end.....endswi
   1d064:	00006874 7665049b 00006c61 7865041e     th....eval....ex
   1d074:	00006365 78650663 646e6574 00000000     ec..c.extend....
   1d084:	69660401 0000646e 6f660626 74616d72     ..find..&.format
   1d094:	00000000 72660a35 625f6d6f 73657479     ....5.from_bytes
   1d0a4:	00000000 72660837 656b6d6f 00007379     ....7.fromkeys..
   1d0b4:	75660827 6974636e 00006e6f 65670996     '.function....ge
   1d0c4:	6172656e 00726f74 65670333 00000074     nerator.3.get...
   1d0d4:	656707c0 74746174 00000072 6c67079d     ..getattr.....gl
   1d0e4:	6c61626f 00000073 6168078c 74746173     obals.....hasatt
   1d0f4:	00000072 616804b7 00006873 656809ad     r.....hash....he
   1d104:	6c5f7061 006b636f 65680b56 755f7061     ap_lock.V.heap_u
   1d114:	636f6c6e 0000006b 65680370 00000078     nlock...p.hex...
   1d124:	64690228 00000000 6e69057b 00786564     (.id....{.index.
   1d134:	6e69041f 00007469 6e690612 74726573     ..init....insert
   1d144:	00000000 6e690316 00000074 7269038f     ......int.....ir
   1d154:	00000071 736907eb 68706c61 00000061     q.....isalpha...
   1d164:	736907a8 69676964 00000074 73690ab6     ..isdigit.....is
   1d174:	74736e69 65636e61 00000000 736907fc     instance......is
   1d184:	65776f6c 00000072 7369075b 63617073     lower...[.isspac
   1d194:	00000065 73690ab5 63627573 7373616c     e.....issubclass
   1d1a4:	00000000 736907dd 65707075 00000072     ......isupper...
   1d1b4:	746905e3 00736d65 7469048f 00007265     ..items...iter..
   1d1c4:	74690847 74617265 0000726f 6f6a04a7     G.iterator....jo
   1d1d4:	00006e69 626b08f6 6e695f64 00007274     in....kbd_intr..
   1d1e4:	656b0332 00000079 656b0401 00007379     2.key.....keys..
   1d1f4:	656c0362 0000006e 696c0427 00007473     b.len...'.list..
   1d204:	696c0689 656c7474 00000000 6f6c063b     ..little....;.lo
   1d214:	736c6163 00000000 6f6c05c6 00726577     cals......lower.
   1d224:	736c06e5 70697274 00000000 616d03b9     ..lstrip......ma
   1d234:	00000070 696d0b0b 706f7263 6f687479     p.....micropytho
   1d244:	0000006e 6f6d0426 00006564 6f6d06bf     n...&.mode....mo
   1d254:	656c7564 00000000 656e0442 00007478     dule....B.next..
   1d264:	626f0690 7463656a 00000000 636f03fd     ..object......oc
   1d274:	00000074 706f04d1 00006e65 706f0987     t.....open....op
   1d284:	656c5f74 006c6576 726f031c 00000064     t_level...ord...
   1d294:	65700af3 745f646e 776f7268 00000000     ..pend_throw....
   1d2a4:	6f70032a 00000070 6f7007bf 65746970     *.pop.....popite
   1d2b4:	0000006d 6f70032d 00000077 72700554     m...-.pow...T.pr
   1d2c4:	00746e69 75700480 00006c6c 6172051a     int...pull....ra
   1d2d4:	0065676e 65720663 65766f6d 00000000     nge.c.remove....
   1d2e4:	65720749 63616c70 00000065 657204d0     I.replace.....re
   1d2f4:	00007270 65720725 73726576 00000065     pr..%.reverse...
   1d304:	667205d2 00646e69 697206e9 7865646e     ..rfind...rindex
   1d314:	00000000 6f7205e7 00646e75 737206a5     ......round...rs
   1d324:	74696c70 00000000 7372063b 70697274     plit....;.rstrip
   1d334:	00000000 657304b9 0000646e 65730323     ......send..#.se
   1d344:	00000070 657307d4 74746174 00000072     p.....setattr...
   1d354:	65730a6c 66656474 746c7561 00000000     l.setdefault....
   1d364:	6f7304bf 00007472 6f73065e 64657472     ..sort..^.sorted
   1d374:	00000000 707305b7 0074696c 74730585     ......split...st
   1d384:	00747261 74730a74 73747261 68746977     art.t.startswith
   1d394:	00000000 74730c62 63697461 6874656d     ....b.staticmeth
   1d3a4:	0000646f 74730457 00007065 7473049d     od..W.step....st
   1d3b4:	0000706f 74730350 00000072 74730529     op..P.str...).st
   1d3c4:	00706972 7573032e 0000006d 757305c4     rip...sum.....su
   1d3d4:	00726570 687405b3 00776f72 6f7408d8     per...throw...to
   1d3e4:	7479625f 00007365 757405fd 00656c70     _bytes....tuple.
   1d3f4:	7974049d 00006570 707506b4 65746164     ..type....update
   1d404:	00000000 70750527 00726570 6176054e     ....'.upper.N.va
   1d414:	0065756c 6176067d 7365756c 00000000     lue.}.values....
   1d424:	697a03e6 00000070                       ..zip...

0001d42c <mp_qstr_const_pool>:
	...
   1d434:	0000000a 000000e1 0001c9f0 0001c9f4     ................
   1d444:	0001c9f8 0001ca04 0001ca10 0001ca24     ............$...
   1d454:	0001ca30 0001ca3c 0001ca4c 0001ca5c     0...<...L...\...
   1d464:	0001ca68 0001ca74 0001ca80 0001ca8c     h...t...........
   1d474:	0001ca9c 0001caac 0001cab8 0001cac4     ................
   1d484:	0001cad0 0001cae0 0001caec 0001caf8     ................
   1d494:	0001cb04 0001cb10 0001cb1c 0001cb28     ............(...
   1d4a4:	0001cb34 0001cb44 0001cb50 0001cb5c     4...D...P...\...
   1d4b4:	0001cb68 0001cb74 0001cb84 0001cb98     h...t...........
   1d4c4:	0001cba4 0001cbb4 0001cbc0 0001cbcc     ................
   1d4d4:	0001cbdc 0001cbe0 0001cbe4 0001cbe8     ................
   1d4e4:	0001cbf0 0001cbf8 0001cc00 0001cc04     ................
   1d4f4:	0001cc08 0001cc2c 0001cc38 0001cc44     ....,...8...D...
   1d504:	0001cc54 0001cc64 0001cc70 0001cc7c     T...d...p...|...
   1d514:	0001cc88 0001cc94 0001cc9c 0001cca8     ................
   1d524:	0001ccb8 0001ccc0 0001ccd4 0001cce8     ................
   1d534:	0001ccfc 0001cd0c 0001cd18 0001cd24     ............$...
   1d544:	0001cd30 0001cd40 0001cd50 0001cd58     0...@...P...X...
   1d554:	0001cd68 0001cd7c 0001cd8c 0001cd9c     h...|...........
   1d564:	0001cdac 0001cdc0 0001cdd0 0001cddc     ................
   1d574:	0001cdf0 0001cdfc 0001ce0c 0001ce18     ................
   1d584:	0001ce28 0001ce34 0001ce3c 0001ce48     (...4...<...H...
   1d594:	0001ce60 0001ce70 0001ce7c 0001ce84     `...p...|.......
   1d5a4:	0001ce94 0001cea0 0001ceac 0001ceb4     ................
   1d5b4:	0001cec4 0001ced4 0001cee4 0001cef4     ................
   1d5c4:	0001cf00 0001cf10 0001cf24 0001cf2c     ........$...,...
   1d5d4:	0001cf34 0001cf54 0001cf5c 0001cf68     4...T...\...h...
   1d5e4:	0001cf70 0001cf7c 0001cf84 0001cf8c     p...|...........
   1d5f4:	0001cf94 0001cf9c 0001cfac 0001cfb8     ................
   1d604:	0001cfc4 0001cfcc 0001cfd8 0001cfe0     ................
   1d614:	0001cff0 0001cff8 0001d000 0001d00c     ................
   1d624:	0001d014 0001d01c 0001d024 0001d02c     ........$...,...
   1d634:	0001d038 0001d040 0001d04c 0001d054     8...@...L...T...
   1d644:	0001d05c 0001d068 0001d070 0001d078     \...h...p...x...
   1d654:	0001d084 0001d08c 0001d098 0001d0a8     ................
   1d664:	0001d0b4 0001d0c0 0001d0cc 0001d0d4     ................
   1d674:	0001d0e0 0001d0ec 0001d0f8 0001d100     ................
   1d684:	0001d10c 0001d11c 0001d124 0001d12c     ........$...,...
   1d694:	0001d134 0001d13c 0001d148 0001d150     4...<...H...P...
   1d6a4:	0001d158 0001d164 0001d170 0001d180     X...d...p.......
   1d6b4:	0001d18c 0001d198 0001d1a8 0001d1b4     ................
   1d6c4:	0001d1bc 0001d1c4 0001d1d0 0001d1d8     ................
   1d6d4:	0001d1e4 0001d1ec 0001d1f4 0001d1fc     ................
   1d6e4:	0001d204 0001d210 0001d21c 0001d224     ............$...
   1d6f4:	0001d230 0001d238 0001d248 0001d250     0...8...H...P...
   1d704:	0001d25c 0001d264 0001d270 0001d278     \...d...p...x...
   1d714:	0001d280 0001d28c 0001d294 0001d2a4     ................
   1d724:	0001d2ac 0001d2b8 0001d2c0 0001d2c8     ................
   1d734:	0001d2d0 0001d2d8 0001d2e4 0001d2f0     ................
   1d744:	0001d2f8 0001d304 0001d30c 0001d318     ................
   1d754:	0001d320 0001d32c 0001d338 0001d340      ...,...8...@...
   1d764:	0001d348 0001d354 0001d364 0001d36c     H...T...d...l...
   1d774:	0001d378 0001d380 0001d388 0001d398     x...............
   1d784:	0001d3a8 0001d3b0 0001d3b8 0001d3c0     ................
   1d794:	0001d3c8 0001d3d0 0001d3d8 0001d3e0     ................
   1d7a4:	0001d3ec 0001d3f4 0001d3fc 0001d408     ................
   1d7b4:	0001d410 0001d418 0001d424 206e656c     ........$...len 
   1d7c4:	3128203c 203c3c20 2a203828 43494d20     < (1 << (8 * MIC
   1d7d4:	59504f52 5453515f 59425f52 5f534554     ROPY_QSTR_BYTES_
   1d7e4:	4c5f4e49 29294e45 00000000 2e2f2e2e     IN_LEN))....../.
   1d7f4:	79702f2e 7473712f 00632e72              ./py/qstr.c.

0001d800 <__func__.6339>:
   1d800:	72747371 6f72665f 74735f6d 00006e72     qstr_from_strn..

0001d810 <pad_spaces>:
   1d810:	20202020 20202020 20202020 20202020                     
   1d820:	00000000                                ....

0001d824 <pad_zeroes>:
   1d824:	30303030 30303030 30303030 30303030     0000000000000000
   1d834:	00000000                                ....

0001d838 <mp_plat_print>:
   1d838:	00000000 0000187d 65736162 203d3d20     ....}...base == 
   1d848:	7c7c2032 73616220 3d3d2065 7c203820     2 || base == 8 |
   1d858:	6162207c 3d206573 3031203d 207c7c20     | base == 10 || 
   1d868:	65736162 203d3d20 00003631 2e2f2e2e     base == 16..../.
   1d878:	79702f2e 70706d2f 746e6972 0000632e     ./py/mpprint.c..
   1d888:	00000000 65757274 00000000 736c6166     ....true....fals
   1d898:	00000065 6c756e28 0000296c 746d662a     e...(null)..*fmt
   1d8a8:	203d3d20 20272527 21207c7c 736e7522      == '%' || !"uns
   1d8b8:	6f707075 64657472 746d6620 61686320     upported fmt cha
   1d8c8:	00002272                                r"..

0001d8cc <__func__.6800>:
   1d8cc:	705f706d 746e6972 5f706d5f 00746e69     mp_print_mp_int.

0001d8dc <__func__.6865>:
   1d8dc:	765f706d 6e697270 00006674              mp_vprintf..

0001d8e8 <attr>:
	...
   1d8f0:	03030300 00000303 00000000 00000000     ................
	...
   1d908:	01010103 01010101 01010101 01010101     ................
   1d918:	45454545 45454545 01014545 01010101     EEEEEEEEEE......
   1d928:	59595901 19595959 19191919 19191919     .YYYYYY.........
   1d938:	19191919 19191919 01191919 01010101     ................
   1d948:	69696901 29696969 29292929 29292929     .iiiiii)))))))))
   1d958:	29292929 29292929 01292929 00010101     ))))))))))).....
   1d968:	5d5b2928 3a2c7d7b 3c7e403b 3c633d65     ()[]{},:;@~<e=c<
   1d978:	653e3d65 653e633d 3d652a3d 3d652a63     e=>e=c>e=*e=c*e=
   1d988:	2d3d652b 3e653d65 7c3d6526 652f3d65     +e=-e=e>&e=|e=/e
   1d998:	652f633d 3d65253d 3d3d655e 2e213d65     =c/e=%e=^e==e=!.
   1d9a8:	00000000                                ....

0001d9ac <tok_enc>:
   1d9ac:	0001d968                                h...

0001d9b0 <tok_enc_kind>:
   1d9b0:	45444342 49484746 363d4c4b 3858373e     BCDEFGHIKL=6>7X8
   1d9c0:	3157393f 2f593250 5a4f304e 553b543a     ?9W1P2Y/N0OZ:T;U
   1d9d0:	52345133 563c5335 0000404d 736c6146     3Q4R5S<VM@..Fals
   1d9e0:	00000065 656e6f4e 00000000 65757254     e...None....True
   1d9f0:	00000000 65645f5f 5f677562 0000005f     ....__debug__...
   1da00:	00646e61 00007361 65737361 00007472     and.as..assert..
   1da10:	61657262 0000006b 73616c63 00000073     break...class...
   1da20:	746e6f63 65756e69 00000000 00666564     continue....def.
   1da30:	006c6564 66696c65 00000000 65736c65     del.elif....else
   1da40:	00000000 65637865 00007470 616e6966     ....except..fina
   1da50:	00796c6c 00726f66 6d6f7266 00000000     lly.for.from....
   1da60:	626f6c67 00006c61 00006669 6f706d69     global..if..impo
   1da70:	00007472 00006e69 00007369 626d616c     rt..in..is..lamb
   1da80:	00006164 6c6e6f6e 6c61636f 00000000     da..nonlocal....
   1da90:	00746f6e 0000726f 73736170 00000000     not.or..pass....
   1daa0:	73696172 00000065 75746572 00006e72     raise...return..
   1dab0:	00797274 6c696877 00000065 68746977     try.while...with
   1dac0:	00000000 6c656979 00000064              ....yield...

0001dacc <tok_kw>:
   1dacc:	0001d9dc 0001d9e4 0001d9ec 0001d9f4     ................
   1dadc:	0001da00 0001da04 0001da08 0001da10     ................
   1daec:	0001da18 0001da20 0001da2c 0001da30     .... ...,...0...
   1dafc:	0001da34 0001da3c 0001da44 0001da4c     4...<...D...L...
   1db0c:	0001da54 0001da58 0001da60 0001da68     T...X...`...h...
   1db1c:	0001da6c 0001da74 0001da78 0001da7c     l...t...x...|...
   1db2c:	0001da84 0001da90 0001da94 0001da98     ................
   1db3c:	0001daa0 0001daa8 0001dab0 0001dab4     ................
   1db4c:	0001dabc 0001dac4 63696e75 2065646f     ........unicode 
   1db5c:	656d616e 63736520 73657061 00000000     name escapes....

0001db6c <rule_act_table>:
   1db6c:	a8623261 22332233 22212121 24222221     a2b.3"3"!!!"!""$
   1db7c:	26232222 24242725 a4a46232 31223131     ""#&%'$$2b..11"1
   1db8c:	31313122 62313131 23236262 22232323     "111111bbb#####"
   1db9c:	a5233333 12130022 32242162 13336212     33#."...b!$2.b3.
   1dbac:	62232263 13332262 62222262 18621261     c"#bb"3.b""ba.b.
   1dbbc:	62326212 151c1212 12126262 32631362     .b2b....bb..b.c2
   1dbcc:	62622212 31313133 24321862 62246312     ."bb3111b.2$.c$b
   1dbdc:	31632332 64126262 12122412 21222219     2#c1bb.d.$...""!
   1dbec:	12141212 62321113 1262121c 13336212     ......2b..b..b3.
   1dbfc:	12621233 33633322 62222213 a5126212     3.b."3c3.""b.b..
   1dc0c:	00221223                                #.".

0001dc10 <rule_arg_combined_table>:
   1dc10:	20373001 203c203b 10071017 303e1042     .07 ; < ....B.>0
   1dc20:	303d1043 20761049 104b204f 30502006     C.=0I.v O K.. P0
   1dc30:	10482055 20901018 10141028 102a1016     U H.... (.....*.
   1dc40:	20343031 30581029 20651021 205b101e     104 ).X0!.e ..[ 
   1dc50:	205d1021 2067101f 20671025 20781013     !.] ..g %.g ..x 
   1dc60:	10203068 10492078 306a2076 102c3072     h0 .x I.v j0r0,.
   1dc70:	10492078 30722076 2090101d 20311022     x I.v r0... ".1 
   1dc80:	20761049 102b3072 20761049 102d206c     I.v r0+.I.v l -.
   1dc90:	10492073 204d2076 3079201c 30461024     s I.v M . y0$.F0
   1dca0:	20781049 30461024 207a1049 1027201d     I.x $.F0I.z . '.
   1dcb0:	1011207b 207b1026 207c2021 20211031     { ..&.{ ! | 1.! 
   1dcc0:	103b2022 103c2023 103a2024 20802025     " ;.# <.$ :.% . 
   1dcd0:	20812026 20822083 20832084 30872085     & . . . . . . .0
   1dce0:	30862088 30891042 10441043 1045308a     . .0B..0C.D..0E.
   1dcf0:	30921046 10421047 10433097 20301044     F..0G.B..0C.D.0 
   1dd00:	104a1045 20781007 20781048 20781048     E.J...x H.x H.x 
   1dd10:	20781049 10071015 10493096 102e2076     I.x .....0I.v ..
   1dd20:	100430a1 2069204e 204d1004 30392031     .0..N i ..M 1 90
   1dd30:	104c1004 302d2066 203a1004 20032033     ..L.f -0..: 3 . 
   1dd40:	2078105a 1048203f 20412040 10072042     Z.x ? H.@ A B ..
   1dd50:	30443043 30451031 10071032 10493043     C0D01.E02...C0I.
   1dd60:	104d2078 10072078 20473043 20481048     x M.x ..C0G H.H 
   1dd70:	204a2049 304b1007 304c1031 10071032     I J ..K01.L02...
   1dd80:	2078104d 20691007 2004204e 20071004     M.x ..i N . ... 
   1dd90:	20572008 2010205a 20122011 20512005     . W Z . . . . Q 
   1dda0:	20562052 20532054 2054104d 20062034     R V T S M.T 4 . 
   1ddb0:	20782020 104f104e 10511050 10541053       x N.O.P.Q.S.T.
   1ddc0:	10561055 10571058 10521059 200a2009     U.V.X.W.Y.R.. . 
   1ddd0:	200d200b 2078200c 101e3059 200e2078     . . . x Y0..x . 
   1dde0:	2066200f 205f205c 10313066 2064205e     . f \ _ f01.^ d 
   1ddf0:	20641042 20601043 100c104a 30631007     B.d C.` J.....c0
   1de00:	30632066 10071012 10482061 10482062     f c0....a H.b H.
   1de10:	104a1007 10481007 20781048 20142013     ..J...H.H.x . . 
   1de20:	20162015 20032017 20022033 1019206b     . . . . 3 . k ..
   1de30:	10492078 206d2076 20702071 30713072     x I.v m q p r0q0
   1de40:	306f101b 20761049 30632078 101c206e     ..o0I.v x c0n ..
   1de50:	20761049 1049101a 20742076 20781048     I.v ..I.v t H.x 
   1de60:	10123075 20772021 1004204e 20181005     u0..! w N ..... 
   1de70:	201a1006 10202019 101a201c 201b2078     ... .  .. ..x . 
   1de80:	201e201c 1036201f 10401038 103f103e     . . . 6.8.@.>.?.
   1de90:	10221041 207e207d 10221026 307f1023     A.".} ~ &.".#..0
   1dea0:	10371026 102f1039 10311030 10351033     &.7.9./.0.1.3.5.
   1deb0:	20271034 102f2028 103d1030 208f2029     4.' ( /.0.=.) . 
   1dec0:	20831032 10081007 100a1009 100c100b     2.. ............
   1ded0:	100f100e 202a100d 202c202b 208a2034     ......* + , 4 . 
   1dee0:	308c208b 20782020 208d209f 308e1048     . .0  x . . H..0
   1def0:	1048208b 202e202d 2091202f 20201048     . H.- . / . H.  
   1df00:	20322021 209f3093 10482094 20323095     ! 2 .0. . H..02 
   1df10:	10421048 10433097 10482098 209a2099     H.B..0C.. H.. . 
   1df20:	1031209b 10322078 20782078 209f309c     . 1.x 2.x x .0. 
   1df30:	104d209d 209f2078 101d20a0 10222090     . M.x . . ... ".
   1df40:	309e201c 207a1020 20a2309e 101e2031     . .0 .z .0. 1 ..
   1df50:	00002078                                x ..

0001df54 <rule_arg_offset_table>:
   1df54:	04020100 12100e0c 17161514 1e1c1a19     ................
   1df64:	29262422 3f3b342f 4a464443 5452504e     "$&)/4;?CDFJNPRT
   1df74:	5c5a5856 6462605e 6d6a6866 79767370     VXZ\^`bdfhjmpsvy
   1df84:	827f7d7b 8c890087 9591908e 9c9a9896     {}..............
   1df94:	a7a4a29f afadaba9 b8b6b4b2 bfbdbbba     ................
   1dfa4:	cccbc9c7 ded2d0ce e9e7e5e3 f3f0edeb     ................
   1dfb4:	faf8f6f4 0200fefc 0f0e0604 1c181513     ................
   1dfc4:	25221f1e 2d2b2927 39373331 4846443b     .."%')+-1379;DFH
   1dfd4:	514d4b49 58575653 6a68665a 72706e6c     IKMQSVWXZfhjlnpr
   1dfe4:	7b797775 84817f7d 8d8b8986 9593918f     uwy{}...........
   1dff4:	009f9d9a                                ....

0001dff8 <FIRST_RULE_WITH_OFFSET_ABOVE_255>:
   1dff8:	00000066 67726128 52202620 5f454c55     f...(arg & RULE_
   1e008:	5f475241 444e494b 53414d5f 3d20294b     ARG_KIND_MASK) =
   1e018:	5552203d 415f454c 525f4752 20454c55     = RULE_ARG_RULE 
   1e028:	28207c7c 20677261 55522026 415f454c     || (arg & RULE_A
   1e038:	4b5f4752 5f444e49 4b53414d 3d3d2029     RG_KIND_MASK) ==
   1e048:	4c555220 52415f45 504f5f47 55525f54      RULE_ARG_OPT_RU
   1e058:	0000454c 2e2f2e2e 79702f2e 7261702f     LE..../../py/par
   1e068:	632e6573 00000000 73726170 3e2d7265     se.c....parser->
   1e078:	75736572 735f746c 6b636174 706f745f     result_stack_top
   1e088:	30203e20 00000000 73726170 3e2d7265      > 0....parser->
   1e098:	75736572 735f746c 6b636174 706f745f     result_stack_top
   1e0a8:	70203e20 0000736f 206b6f74 4d203d3d      > pos..tok == M
   1e0b8:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   1e0c8:	00000000 646e696b 203d3d20 454c5552     ....kind == RULE
   1e0d8:	4752415f 4c55525f 00000045 203e2069     _ARG_RULE...i > 
   1e0e8:	00000030 3d3d2069 00006e20 6c757228     0...i == n..(rul
   1e0f8:	63615f65 20262074 454c5552 5443415f     e_act & RULE_ACT
   1e108:	4e494b5f 414d5f44 20294b53 52203d3d     _KIND_MASK) == R
   1e118:	5f454c55 5f544341 5453494c 00000000     ULE_ACT_LIST....
   1e128:	67726128 52202620 5f454c55 5f475241     (arg & RULE_ARG_
   1e138:	444e494b 53414d5f 3d20294b 5552203d     KIND_MASK) == RU
   1e148:	415f454c 525f4752 00454c55 3d3e2069     LE_ARG_RULE.i >=
   1e158:	00003120 78656e75 74636570 69206465      1..unexpected i
   1e168:	6e65646e 00000074 6e696e75 746e6564     ndent...unindent
   1e178:	656f6420 6f6e2073 616d2074 20686374      does not match 
   1e188:	20796e61 6574756f 6e692072 746e6564     any outer indent
   1e198:	6f697461 656c206e 006c6576 61766e69     ation level.inva
   1e1a8:	2064696c 746e7973 00007861 73726170     lid syntax..pars
   1e1b8:	722e7265 6c757365 74735f74 5f6b6361     er.result_stack_
   1e1c8:	20706f74 31203d3d 00000000              top == 1....

0001e1d4 <__func__.7872>:
   1e1d4:	68737570 6c75725f 72665f65 615f6d6f     push_rule_from_a
   1e1e4:	00006772                                rg..

0001e1e8 <__func__.7900>:
   1e1e8:	5f706f70 75736572 0000746c              pop_result..

0001e1f4 <__func__.7905>:
   1e1f4:	6b656570 7365725f 00746c75              peek_result.

0001e200 <token_to_op.7971>:
   1e200:	ff1c1b1a ff1f1dff 0019ff18              ............

0001e20c <__func__.7980>:
   1e20c:	646c6f66 6e6f635f 6e617473 00007374     fold_constants..

0001e21c <__func__.8018>:
   1e21c:	705f706d 65737261 00000000              mp_parse....

0001e228 <scope_simple_name_table>:
   1e228:	3130002f 00343332 505f504d 45535241     /.01234.MP_PARSE
   1e238:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   1e248:	00296e70 2e2f2e2e 79702f2e 6f63732f     pn).../../py/sco
   1e258:	632e6570 00000000 706f6373 703e2d65     pe.c....scope->p
   1e268:	6e657261 3d212074 4c554e20 0000004c     arent != NULL...
   1e278:	703e2d73 6e657261 3d212074 4c554e20     s->parent != NUL
   1e288:	0000004c 3e2d6469 646e696b 203d3d20     L...id->kind == 
   1e298:	495f4449 5f4f464e 444e494b 4552465f     ID_INFO_KIND_FRE
   1e2a8:	7c7c2045 2d646920 6e696b3e 3d3d2064     E || id->kind ==
   1e2b8:	5f444920 4f464e49 4e494b5f 45435f44      ID_INFO_KIND_CE
   1e2c8:	00004c4c                                LL..

0001e2cc <__func__.5655>:
   1e2cc:	706f6373 656e5f65 00000077              scope_new...

0001e2d8 <__func__.5684>:
   1e2d8:	706f6373 6c635f65 5f65736f 7265766f     scope_close_over
   1e2e8:	5f6e695f 65726170 0073746e 706d6f63     _in_parents.comp
   1e2f8:	75633e2d 78655f72 74706563 76656c5f     ->cur_except_lev
   1e308:	3e206c65 00003020 2e2f2e2e 79702f2e     el > 0..../../py
   1e318:	6d6f632f 656c6970 0000632e 505f504d     /compile.c..MP_P
   1e328:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e338:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1e348:	5b736564 202c5d30 745f4e50 6c747365     des[0], PN_testl
   1e358:	5f747369 706d6f63 00000029 505f504d     ist_comp)...MP_P
   1e368:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e378:	28544355 31736e70 6f6e3e2d 5b736564     UCT(pns1->nodes[
   1e388:	202d206e 00295d31 505f504d 45535241     n - 1]).MP_PARSE
   1e398:	444f4e5f 53495f45 2844495f 31736e70     _NODE_IS_ID(pns1
   1e3a8:	6f6e3e2d 5b736564 00295d30 276e6163     ->nodes[0]).can'
   1e3b8:	73612074 6e676973 206f7420 72707865     t assign to expr
   1e3c8:	69737365 00006e6f 746c756d 656c7069     ession..multiple
   1e3d8:	20782a20 61206e69 67697373 6e656d6e      *x in assignmen
   1e3e8:	00000074 5f504d21 53524150 4f4e5f45     t...!MP_PARSE_NO
   1e3f8:	495f4544 554e5f53 70284c4c 0000296e     DE_IS_NULL(pn)..
   1e408:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e418:	4c554e5f 6e70284c 3e2d3273 65646f6e     _NULL(pns2->node
   1e428:	5d305b73 00000029 6f705f6e 65645f73     s[0])...n_pos_de
   1e438:	6c756166 3e207374 0030203d 776b5f6e     faults >= 0.n_kw
   1e448:	6665645f 746c7561 3d3e2073 00003020     _defaults >= 0..
   1e458:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e468:	5254535f 28544355 00296e70 6b5f6e70     _STRUCT(pn).pn_k
   1e478:	20646e69 50203d3d 61765f4e 67726172     ind == PN_vararg
   1e488:	73696c73 616e5f74 0000656d 2d6e6f6e     slist_name..non-
   1e498:	61666564 20746c75 75677261 746e656d     default argument
   1e4a8:	6c6f6620 73776f6c 66656420 746c7561      follows default
   1e4b8:	67726120 6e656d75 00000074 61766e69      argument...inva
   1e4c8:	2064696c 7263696d 7479706f 206e6f68     lid micropython 
   1e4d8:	6f636564 6f746172 00000072 505f504d     decorator...MP_P
   1e4e8:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e4f8:	5f544355 444e494b 646f6e28 695b7365     UCT_KIND(nodes[i
   1e508:	50202c5d 65645f4e 61726f63 29726f74     ], PN_decorator)
   1e518:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   1e528:	53495f45 2844495f 656d616e 646f6e5f     E_IS_ID(name_nod
   1e538:	6a5b7365 0000295d 505f504d 45535241     es[j])..MP_PARSE
   1e548:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1e558:	6e702844 6f625f73 20297964 50203d3d     D(pns_body) == P
   1e568:	6c635f4e 64737361 00006665 505f504d     N_classdef..MP_P
   1e578:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e588:	5f544355 444e494b 2c6e7028 5f4e5020     UCT_KIND(pn, PN_
   1e598:	74736574 7473696c 6d6f635f 00002970     testlist_comp)..
   1e5a8:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e5b8:	4c554e5f 6e70284c 3e2d3173 65646f6e     _NULL(pns1->node
   1e5c8:	5d305b73 00000029 276e6163 65642074     s[0])...can't de
   1e5d8:	6574656c 70786520 73736572 006e6f69     lete expression.
   1e5e8:	65726227 20276b61 7374756f 20656469     'break' outside 
   1e5f8:	706f6f6c 00000000 6e6f6327 756e6974     loop....'continu
   1e608:	6f202765 69737475 6c206564 00706f6f     e' outside loop.
   1e618:	706d6f63 75633e2d 78655f72 74706563     comp->cur_except
   1e628:	76656c5f 3e206c65 6f63203d 3e2d706d     _level >= comp->
   1e638:	61657262 6f635f6b 6e69746e 655f6575     break_continue_e
   1e648:	70656378 656c5f74 006c6576 74657227     xcept_level.'ret
   1e658:	276e7275 74756f20 65646973 6e756620     urn' outside fun
   1e668:	6f697463 0000006e 505f504d 45535241     ction...MP_PARSE
   1e678:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   1e688:	444e494b 2c6e7028 5f4e5020 74746f64     KIND(pn, PN_dott
   1e698:	6e5f6465 29656d61 00000000 5f504d21     ed_name)....!MP_
   1e6a8:	53524150 4f4e5f45 495f4544 554e5f53     PARSE_NODE_IS_NU
   1e6b8:	70284c4c 6d695f6e 74726f70 756f735f     LL(pn_import_sou
   1e6c8:	29656372 00000000 505f504d 45535241     rce)....MP_PARSE
   1e6d8:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   1e6e8:	444e494b 5f6e7028 65646f6e 5d695b73     KIND(pn_nodes[i]
   1e6f8:	4e50202c 706d695f 5f74726f 6e5f7361     , PN_import_as_n
   1e708:	29656d61 00000000 6e656469 69666974     ame)....identifi
   1e718:	72207265 66656465 64656e69 20736120     er redefined as 
   1e728:	626f6c67 00006c61 62206f6e 69646e69     global..no bindi
   1e738:	6620676e 6e20726f 6f6c6e6f 206c6163     ng for nonlocal 
   1e748:	6e756f66 00000064 6e656469 69666974     found...identifi
   1e758:	72207265 66656465 64656e69 20736120     er redefined as 
   1e768:	6c6e6f6e 6c61636f 00000000 276e6163     nonlocal....can'
   1e778:	65642074 72616c63 6f6e2065 636f6c6e     t declare nonloc
   1e788:	69206c61 756f206e 20726574 65646f63     al in outer code
   1e798:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   1e7a8:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   1e7b8:	5f6e7028 66696c65 2c5d695b 5f4e5020     (pn_elif[i], PN_
   1e7c8:	735f6669 5f746d74 66696c65 00000029     if_stmt_elif)...
   1e7d8:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e7e8:	414d535f 495f4c4c 7028544e 74735f6e     _SMALL_INT(pn_st
   1e7f8:	00297065 505f504d 45535241 444f4e5f     ep).MP_PARSE_NOD
   1e808:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   1e818:	5f6e7028 65637865 5b737470 202c5d69     (pn_excepts[i], 
   1e828:	745f4e50 735f7972 5f746d74 65637865     PN_try_stmt_exce
   1e838:	00297470 61666564 20746c75 63786527     pt).default 'exc
   1e848:	27747065 73756d20 65622074 73616c20     ept' must be las
   1e858:	00000074 505f504d 45535241 444f4e5f     t...MP_PARSE_NOD
   1e868:	53495f45 4c554e5f 6e70284c 736c655f     E_IS_NULL(pn_els
   1e878:	00002965 505f504d 45535241 444f4e5f     e)..MP_PARSE_NOD
   1e888:	53495f45 5254535f 28544355 2d736e70     E_IS_STRUCT(pns-
   1e898:	646f6e3e 315b7365 0000295d 203e206e     >nodes[1])..n > 
   1e8a8:	00000030 505f504d 45535241 444f4e5f     0...MP_PARSE_NOD
   1e8b8:	53495f45 4b4f545f 70284e45 2d31736e     E_IS_TOKEN(pns1-
   1e8c8:	646f6e3e 305b7365 0000295d 505f504d     >nodes[0])..MP_P
   1e8d8:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e8e8:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1e8f8:	5b736564 202c5d31 745f4e50 5f747365     des[1], PN_test_
   1e908:	655f6669 2965736c 00000000 505f504d     if_else)....MP_P
   1e918:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e928:	28544355 2d736e70 646f6e3e 695b7365     UCT(pns->nodes[i
   1e938:	0000295d 646e696b 203d3d20 635f4e50     ])..kind == PN_c
   1e948:	5f706d6f 695f706f 00000073 6d20782a     omp_op_is...*x m
   1e958:	20747375 61206562 67697373 6e656d6e     ust be assignmen
   1e968:	61742074 74656772 00000000 206b6f74     t target....tok 
   1e978:	4d203d3d 4f545f50 5f4e454b 445f504f     == MP_TOKEN_OP_D
   1e988:	4d5f4c42 0045524f 206b6f74 4d203d3d     BL_MORE.tok == M
   1e998:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   1e9a8:	00000000 65707573 20292872 276e6163     ....super() can'
   1e9b8:	69662074 7320646e 00666c65 276e6163     t find self.can'
   1e9c8:	61682074 6d206576 69746c75 20656c70     t have multiple 
   1e9d8:	0000782a 276e6163 61682074 6d206576     *x..can't have m
   1e9e8:	69746c75 20656c70 00782a2a 2053484c     ultiple **x.LHS 
   1e9f8:	6b20666f 6f777965 61206472 6d206772     of keyword arg m
   1ea08:	20747375 61206562 6469206e 00000000     ust be an id....
   1ea18:	2d6e6f6e 7779656b 2064726f 20677261     non-keyword arg 
   1ea28:	65746661 2f2a2072 00002a2a 2d6e6f6e     after */**..non-
   1ea38:	7779656b 2064726f 20677261 65746661     keyword arg afte
   1ea48:	656b2072 726f7779 72612064 00000067     r keyword arg...
   1ea58:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   1ea68:	54435552 4d554e5f 444f4e5f 70285345     RUCT_NUM_NODES(p
   1ea78:	2029736e 32203d3d 00000000 505f504d     ns) == 2....MP_P
   1ea88:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1ea98:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1eaa8:	5b736564 202c5d31 635f4e50 5f706d6f     des[1], PN_comp_
   1eab8:	29726f66 00000000 5f504d21 53524150     for)....!MP_PARS
   1eac8:	4f4e5f45 495f4544 554e5f53 70284c4c     E_NODE_IS_NULL(p
   1ead8:	3e2d736e 65646f6e 5d315b73 00000029     ns->nodes[1])...
   1eae8:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1eaf8:	4c554e5f 6e70284c 3e2d3373 65646f6e     _NULL(pns3->node
   1eb08:	5d305b73 00000029 61766e69 2064696c     s[0])...invalid 
   1eb18:	746e7973 00007861 505f504d 45535241     syntax..MP_PARSE
   1eb28:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1eb38:	6e702844 20293173 50203d3d 6f635f4e     D(pns1) == PN_co
   1eb48:	665f706d 0000726f 00000030 65697927     mp_for..0...'yie
   1eb58:	2027646c 7374756f 20656469 636e7566     ld' outside func
   1eb68:	6e6f6974 00000000                       tion....

0001eb70 <compile_function>:
   1eb70:	00004f39 00004f39 00005cbd 00005e75     9O..9O...\..u^..
   1eb80:	00004f39 00007699 000050c1 0000612d     9O...v...P..-a..
   1eb90:	00004f39 00006151 00006151 000061e1     9O..Qa..Qa...a..
   1eba0:	00006239 00006261 0000651d 00006541     9b..ab...e..Ae..
   1ebb0:	00006871 00006871 00006939 000069b9     qh..qh..9i...i..
   1ebc0:	00006b71 00006e5d 00007451 00007611     qk..]n..Qt...v..
   1ebd0:	00004f39 000078f1 000079ad 000079ad     9O...x...y...y..
   1ebe0:	000079f5 000079f5 00007a71 00007a9d     .y...y..qz...z..
   1ebf0:	00007cc5 00007ce9 00007ce9 00007ce9     .|...|...|...|..
   1ec00:	00007d4d 00007d4d 00007d4d 00007e39     M}..M}..M}..9~..
   1ec10:	000080ad 00007ea9 000083cd 000084d9     .....~..........
   1ec20:	0000861d 000087e9 00008809 00008835     ............5...
   1ec30:	000050c1 000050c1 00008859 00008885     .P...P..Y.......
   1ec40:	000088b1 00008975 505f504d 45535241     ....u...MP_PARSE
   1ec50:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1ec60:	6e702844 3c202973 4e50203d 6e6f635f     D(pns) <= PN_con
   1ec70:	6f5f7473 63656a62 00000074 505f504d     st_object...MP_P
   1ec80:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1ec90:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1eca0:	5b736564 202c5d30 745f4e50 65647066     des[0], PN_tfpde
   1ecb0:	00002966 505f504d 45535241 444f4e5f     f)..MP_PARSE_NOD
   1ecc0:	54535f45 54435552 4e494b5f 6e702844     E_STRUCT_KIND(pn
   1ecd0:	3d202973 6e70203d 6c62645f 6174735f     s) == pn_dbl_sta
   1ece0:	00000072 656d616e 75657220 20646573     r...name reused 
   1ecf0:	20726f66 75677261 746e656d 00000000     for argument....
   1ed00:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   1ed10:	54435552 4e494b5f 6d282844 61705f70     RUCT_KIND((mp_pa
   1ed20:	5f657372 65646f6e 7274735f 5f746375     rse_node_struct_
   1ed30:	70292a74 74695f6e 20297265 50203d3d     t*)pn_iter) == P
   1ed40:	6f635f4e 665f706d 0000726f 706f6373     N_comp_for..scop
   1ed50:	6b3e2d65 20646e69 53203d3d 45504f43     e->kind == SCOPE
   1ed60:	444f4d5f 00454c55 505f504d 45535241     _MODULE.MP_PARSE
   1ed70:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   1ed80:	706f6373 703e2d65 0000296e 505f504d     scope->pn)..MP_P
   1ed90:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1eda0:	4e494b5f 6e702844 3d202973 4e50203d     _KIND(pns) == PN
   1edb0:	6e75665f 66656463 00000000 505f504d     _funcdef....MP_P
   1edc0:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1edd0:	4d554e5f 444f4e5f 70285345 2029736e     _NUM_NODES(pns) 
   1ede0:	33203d3d 00000000 65646461 00000064     == 3....added...
   1edf0:	706f6373 6b3e2d65 20646e69 53203d3d     scope->kind == S
   1ee00:	45504f43 414c435f 00005353 505f504d     COPE_CLASS..MP_P
   1ee10:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1ee20:	4e494b5f 6e702844 3d202973 4e50203d     _KIND(pns) == PN
   1ee30:	616c635f 65647373 00000066 21206469     _classdef...id !
   1ee40:	554e203d 00004c4c 706d6f63 75633e2d     = NULL..comp->cu
   1ee50:	78655f72 74706563 76656c5f 3d206c65     r_except_level =
   1ee60:	0030203d 64692821 663e2d32 7367616c     = 0.!(id2->flags
   1ee70:	49202620 4c465f44 495f4741 41505f53      & ID_FLAG_IS_PA
   1ee80:	294d4152 00000000                       RAM)....

0001ee88 <__func__.7513>:
   1ee88:	706d6f63 5f656c69 72636564 65736165     compile_decrease
   1ee98:	6378655f 5f747065 6576656c 0000006c     _except_level...

0001eea8 <__func__.7595>:
   1eea8:	66695f63 6e6f635f 00000064              c_if_cond...

0001eeb4 <__func__.7616>:
   1eeb4:	73615f63 6e676973 6f74615f 78655f6d     c_assign_atom_ex
   1eec4:	00007270                                pr..

0001eec8 <__func__.7638>:
   1eec8:	73615f63 6e676973 00000000              c_assign....

0001eed4 <__func__.7664>:
   1eed4:	736f6c63 766f5f65 765f7265 61697261     close_over_varia
   1eee4:	73656c62 6374655f 00000000              bles_etc....

0001eef0 <__func__.7681>:
   1eef0:	706d6f63 5f656c69 636e7566 5f666564     compile_funcdef_
   1ef00:	626d616c 5f666564 61726170 0000006d     lambdef_param...

0001ef10 <__func__.7726>:
   1ef10:	706d6f63 5f656c69 6f636564 65746172     compile_decorate
   1ef20:	00000064                                d...

0001ef24 <__func__.7759>:
   1ef24:	65645f63 74735f6c 0000746d              c_del_stmt..

0001ef30 <__func__.7779>:
   1ef30:	706d6f63 5f656c69 61657262 6f635f6b     compile_break_co
   1ef40:	735f746e 00746d74                       nt_stmt.

0001ef48 <__func__.7803>:
   1ef48:	695f6f64 726f706d 616e5f74 0000656d     do_import_name..

0001ef58 <__func__.7841>:
   1ef58:	706d6f63 5f656c69 6f706d69 665f7472     compile_import_f
   1ef68:	006d6f72                                rom.

0001ef6c <__func__.7908>:
   1ef6c:	706d6f63 5f656c69 735f6669 00746d74     compile_if_stmt.

0001ef7c <__func__.7941>:
   1ef7c:	706d6f63 5f656c69 5f726f66 746d7473     compile_for_stmt
   1ef8c:	74706f5f 73696d69 725f6465 65676e61     _optimised_range
   1ef9c:	00000000                                ....

0001efa0 <__func__.7974>:
   1efa0:	706d6f63 5f656c69 5f797274 65637865     compile_try_exce
   1efb0:	00007470                                pt..

0001efb4 <__func__.7993>:
   1efb4:	706d6f63 5f656c69 5f797274 616e6966     compile_try_fina
   1efc4:	00796c6c                                lly.

0001efc8 <__func__.7998>:
   1efc8:	706d6f63 5f656c69 5f797274 746d7473     compile_try_stmt
   1efd8:	00000000                                ....

0001efdc <__func__.8018>:
   1efdc:	706d6f63 5f656c69 68746977 6d74735f     compile_with_stm
   1efec:	00000074                                t...

0001eff0 <__func__.8028>:
   1eff0:	706d6f63 5f656c69 72707865 6d74735f     compile_expr_stm
   1f000:	00000074                                t...

0001f004 <__func__.8054>:
   1f004:	706d6f63 5f656c69 74736574 5f66695f     compile_test_if_
   1f014:	72707865 00000000                       expr....

0001f01c <__func__.8097>:
   1f01c:	706d6f63 5f656c69 706d6f63 73697261     compile_comparis
   1f02c:	00006e6f                                on..

0001f030 <__func__.8135>:
   1f030:	706d6f63 5f656c69 6d726574 00000000     compile_term....

0001f040 <__func__.8149>:
   1f040:	706d6f63 5f656c69 74636166 325f726f     compile_factor_2
   1f050:	00000000                                ....

0001f054 <__func__.8198>:
   1f054:	706d6f63 5f656c69 706d6f63 65686572     compile_comprehe
   1f064:	6f69736e 0000006e                       nsion...

0001f06c <__func__.8206>:
   1f06c:	706d6f63 5f656c69 6d6f7461 7261705f     compile_atom_par
   1f07c:	00006e65                                en..

0001f080 <__func__.8215>:
   1f080:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   1f090:	74656b63 00000000                       cket....

0001f098 <__func__.8222>:
   1f098:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   1f0a8:	00006563                                ce..

0001f0ac <__func__.8285>:
   1f0ac:	706d6f63 5f656c69 65646f6e 00000000     compile_node....

0001f0bc <__func__.8296>:
   1f0bc:	706d6f63 5f656c69 706f6373 75665f65     compile_scope_fu
   1f0cc:	6c5f636e 64626d61 61705f61 006d6172     nc_lambda_param.

0001f0dc <__func__.8319>:
   1f0dc:	706d6f63 5f656c69 706f6373 6f635f65     compile_scope_co
   1f0ec:	695f706d 00726574                       mp_iter.

0001f0f4 <__func__.8330>:
   1f0f4:	706d6f63 5f656c69 706f6373 00000065     compile_scope...

0001f104 <__func__.8369>:
   1f104:	706f6373 6f635f65 7475706d 68745f65     scope_compute_th
   1f114:	73676e69 00000000 21206469 554e203d     ings....id != NU
   1f124:	00004c4c 2e2f2e2e 79702f2e 696d652f     LL..../../py/emi
   1f134:	6d6f6374 2e6e6f6d 00000063 3e2d6469     tcommon.c...id->
   1f144:	646e696b 203d3d20 495f4449 5f4f464e     kind == ID_INFO_
   1f154:	444e494b 4c45435f 7c7c204c 2d646920     KIND_CELL || id-
   1f164:	6e696b3e 3d3d2064 5f444920 4f464e49     >kind == ID_INFO
   1f174:	4e494b5f 52465f44 00004545              _KIND_FREE..

0001f180 <__func__.6258>:
   1f180:	655f706d 5f74696d 6d6d6f63 695f6e6f     mp_emit_common_i
   1f190:	706f5f64 00000000 74696d65 6f633e2d     d_op....emit->co
   1f1a0:	695f6564 5f6f666e 7366666f 2b207465     de_info_offset +
   1f1b0:	6d756e20 7479625f 745f7365 72775f6f      num_bytes_to_wr
   1f1c0:	20657469 65203d3c 2d74696d 646f633e     ite <= emit->cod
   1f1d0:	6e695f65 735f6f66 00657a69 2e2f2e2e     e_info_size.../.
   1f1e0:	79702f2e 696d652f 2e636274 00000063     ./py/emitbc.c...
   1f1f0:	74737128 203e3e20 20293631 30203d3d     (qst >> 16) == 0
   1f200:	00000000 74696d65 79623e2d 6f636574     ....emit->byteco
   1f210:	6f5f6564 65736666 202b2074 5f6d756e     de_offset + num_
   1f220:	65747962 6f745f73 6972775f 3c206574     bytes_to_write <
   1f230:	6d65203d 3e2d7469 65747962 65646f63     = emit->bytecode
   1f240:	7a69735f 00000065 3e2d6469 61636f6c     _size...id->loca
   1f250:	756e5f6c 203c206d 00353532 74696d65     l_num < 255.emit
   1f260:	74733e2d 5f6b6361 657a6973 203d3d20     ->stack_size == 
   1f270:	00000030 74696d65 61703e2d 3c207373     0...emit->pass <
   1f280:	504d203d 5341505f 54535f53 5f4b4341     = MP_PASS_STACK_
   1f290:	455a4953 207c7c20 696d6528 633e2d74     SIZE || (emit->c
   1f2a0:	756e5f74 626f5f6d 3d3d206a 696d6520     t_num_obj == emi
   1f2b0:	633e2d74 75635f74 626f5f72 0000296a     t->ct_cur_obj)..
   1f2c0:	5f706d28 5f746e69 6d652974 3e2d7469     (mp_int_t)emit->
   1f2d0:	63617473 69735f6b 2b20657a 6c656420     stack_size + del
   1f2e0:	3e206174 0030203d 203c206c 74696d65     ta >= 0.l < emit
   1f2f0:	616d3e2d 756e5f78 616c5f6d 736c6562     ->max_num_labels
   1f300:	00000000 74696d65 616c3e2d 5f6c6562     ....emit->label_
   1f310:	7366666f 5b737465 3d205d6c 6d28203d     offsets[l] == (m
   1f320:	69755f70 745f746e 00312d29 74696d65     p_uint_t)-1.emit
   1f330:	616c3e2d 5f6c6562 7366666f 5b737465     ->label_offsets[
   1f340:	3d205d6c 6d65203d 3e2d7469 65747962     l] == emit->byte
   1f350:	65646f63 66666f5f 00746573 206b6f74     code_offset.tok 
   1f360:	4d203d3d 4f545f50 5f4e454b 494c4c45     == MP_TOKEN_ELLI
   1f370:	53495350 00000000 6c635f6e 6465736f     PSIS....n_closed
   1f380:	65766f5f 3d3c2072 35353220 00000000     _over <= 255....
   1f390:	72615f6e 3c207367 0032203d              n_args <= 2.

0001f39c <mp_emit_bc_method_table_load_id_ops>:
   1f39c:	0000a451 0000a4a1                       Q.......

0001f3a4 <mp_emit_bc_method_table_store_id_ops>:
   1f3a4:	0000a5d1 0000a621                       ....!...

0001f3ac <mp_emit_bc_method_table_delete_id_ops>:
   1f3ac:	0000a651 0000a679                       Q...y...

0001f3b4 <__func__.7048>:
   1f3b4:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   1f3c4:	74697277 6f635f65 695f6564 006f666e     write_code_info.

0001f3d4 <__func__.7062>:
   1f3d4:	74696d65 6972775f 635f6574 5f65646f     emit_write_code_
   1f3e4:	6f666e69 7473715f 00000072              info_qstr...

0001f3f0 <__func__.7068>:
   1f3f0:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   1f400:	74697277 79625f65 6f636574 00006564     write_bytecode..

0001f410 <__func__.7110>:
   1f410:	74696d65 6972775f 625f6574 63657479     emit_write_bytec
   1f420:	5f65646f 65747962 7473715f 00000072     ode_byte_qstr...

0001f430 <__func__.7144>:
   1f430:	655f706d 5f74696d 735f6362 74726174     mp_emit_bc_start
   1f440:	7361705f 00000073                       _pass...

0001f448 <__func__.7161>:
   1f448:	655f706d 5f74696d 655f6362 705f646e     mp_emit_bc_end_p
   1f458:	00737361                                ass.

0001f45c <__func__.7169>:
   1f45c:	655f706d 5f74696d 615f6362 73756a64     mp_emit_bc_adjus
   1f46c:	74735f74 5f6b6361 657a6973 00000000     t_stack_size....

0001f47c <__func__.7182>:
   1f47c:	655f706d 5f74696d 6c5f6362 6c656261     mp_emit_bc_label
   1f48c:	7373615f 006e6769                       _assign.

0001f494 <__func__.7197>:
   1f494:	655f706d 5f74696d 6c5f6362 5f64616f     mp_emit_bc_load_
   1f4a4:	736e6f63 6f745f74 0000006b              const_tok...

0001f4b0 <__func__.7376>:
   1f4b0:	655f706d 5f74696d 6d5f6362 5f656b61     mp_emit_bc_make_
   1f4c0:	736f6c63 00657275                       closure.

0001f4c8 <__func__.7404>:
   1f4c8:	655f706d 5f74696d 725f6362 65736961     mp_emit_bc_raise
   1f4d8:	7261765f 73677261 00000000 28746e69     _varargs....int(
   1f4e8:	72612029 20322067 7473756d 20656220     ) arg 2 must be 
   1f4f8:	32203d3e 646e6120 203d3c20 00003633     >= 2 and <= 36..
   1f508:	61766e69 2064696c 746e7973 66207861     invalid syntax f
   1f518:	6920726f 6765746e 00007265 69636564     or integer..deci
   1f528:	206c616d 626d756e 20737265 20746f6e     mal numbers not 
   1f538:	70707573 6574726f 00000064 21206372     supported...rc !
   1f548:	554e203d 00004c4c 2e2f2e2e 79702f2e     = NULL..../../py
   1f558:	696d652f 756c6774 00632e65 5f666564     /emitglue.c.def_
   1f568:	73677261 203d3d20 4f5f504d 4e5f4a42     args == MP_OBJ_N
   1f578:	204c4c55 4d207c7c 424f5f50 53495f4a     ULL || MP_OBJ_IS
   1f588:	5059545f 65642845 72615f66 202c7367     _TYPE(def_args, 
   1f598:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).
   1f5a8:	5f666564 615f776b 20736772 4d203d3d     def_kw_args == M
   1f5b8:	424f5f50 554e5f4a 7c204c4c 504d207c     P_OBJ_NULL || MP
   1f5c8:	4a424f5f 5f53495f 45505954 66656428     _OBJ_IS_TYPE(def
   1f5d8:	5f776b5f 73677261 6d26202c 79745f70     _kw_args, &mp_ty
   1f5e8:	645f6570 29746369 00000000 3e2d6372     pe_dict)....rc->
   1f5f8:	646e696b 203d3d20 435f504d 5f45444f     kind == MP_CODE_
   1f608:	45545942 45444f43 00000000              BYTECODE....

0001f614 <__func__.6612>:
   1f614:	6d5f706d 5f656b61 636e7566 6e6f6974     mp_make_function
   1f624:	6f72665f 61725f6d 6f635f77 00006564     _from_raw_code..

0001f634 <mp_module___main__>:
   1f634:	00021364 20000a78 656d616e 746f6e20     d...x.. name not
   1f644:	66656420 64656e69 00000000 3d20706f      defined....op =
   1f654:	504d203d 414e555f 4f5f5952 4e495f50     = MP_UNARY_OP_IN
   1f664:	54524556 00000000 2e2f2e2e 79702f2e     VERT....../../py
   1f674:	6e75722f 656d6974 0000632e 75736e75     /runtime.c..unsu
   1f684:	726f7070 20646574 65707974 726f6620     pported type for
   1f694:	65706f20 6f746172 00000072 6167656e      operator...nega
   1f6a4:	65766974 69687320 63207466 746e756f     tive shift count
   1f6b4:	00000000 6167656e 65766974 776f7020     ....negative pow
   1f6c4:	77207265 20687469 66206f6e 74616f6c     er with no float
   1f6d4:	70757320 74726f70 00000000 69766964      support....divi
   1f6e4:	6e6f6973 20796220 6f72657a 00000000     sion by zero....
   1f6f4:	656a626f 6e207463 6320746f 616c6c61     object not calla
   1f704:	00656c62 73677261 656c5f32 202b206e     ble.args2_len + 
   1f714:	202a2032 2d70616d 6573753e 3d3c2064     2 * map->used <=
   1f724:	67726120 615f3273 636f6c6c 00000000      args2_alloc....
   1f734:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   1f744:	756c6176 74207365 6e75206f 6b636170     values to unpack
   1f754:	00000000 65707974 6f6c3e2d 736c6163     ....type->locals
   1f764:	6369645f 623e2d74 2e657361 65707974     _dict->base.type
   1f774:	203d3d20 5f706d26 65707974 6369645f      == &mp_type_dic
   1f784:	00000074 73206f6e 20686375 72747461     t...no such attr
   1f794:	74756269 00000065 6e695f6f 00000000     ibute...o_in....
   1f7a4:	656a626f 6e207463 6920746f 61726574     object not itera
   1f7b4:	00656c62 656a626f 6e207463 6120746f     ble.object not a
   1f7c4:	7469206e 74617265 0000726f 6e657328     n iterator..(sen
   1f7d4:	61765f64 2065756c 4d203d21 424f5f50     d_value != MP_OB
   1f7e4:	554e5f4a 20294c4c 7428205e 776f7268     J_NULL) ^ (throw
   1f7f4:	6c61765f 21206575 504d203d 4a424f5f     _value != MP_OBJ
   1f804:	4c554e5f 0000294c 6f726874 61765f77     _NULL)..throw_va
   1f814:	2065756c 4d203d21 424f5f50 554e5f4a     lue != MP_OBJ_NU
   1f824:	00004c4c 65637865 6f697470 6d20736e     LL..exceptions m
   1f834:	20747375 69726564 66206576 206d6f72     ust derive from 
   1f844:	65736142 65637845 6f697470 0000006e     BaseException...
   1f854:	6e6e6163 6920746f 726f706d 616e2074     cannot import na
   1f864:	2520656d 00000071 6f6d656d 61207972     me %q...memory a
   1f874:	636f6c6c 6f697461 6166206e 64656c69     llocation failed
   1f884:	6568202c 69207061 6f6c2073 64656b63     , heap is locked
   1f894:	00000000 6f6d656d 61207972 636f6c6c     ....memory alloc
   1f8a4:	6f697461 6166206e 64656c69 6c61202c     ation failed, al
   1f8b4:	61636f6c 676e6974 20752520 65747962     locating %u byte
   1f8c4:	00000073                                s...

0001f8c8 <__func__.7049>:
   1f8c8:	755f706d 7972616e 00706f5f              mp_unary_op.

0001f8d4 <__func__.7166>:
   1f8d4:	635f706d 5f6c6c61 70657270 5f657261     mp_call_prepare_
   1f8e4:	73677261 6b5f6e5f 61765f77 00000072     args_n_kw_var...

0001f8f4 <__func__.7254>:
   1f8f4:	6c5f706d 5f64616f 6874656d 6d5f646f     mp_load_method_m
   1f904:	65627961 00000000                       aybe....

0001f90c <__func__.7280>:
   1f90c:	675f706d 74697465 00007265              mp_getiter..

0001f918 <__func__.7302>:
   1f918:	725f706d 6d757365 00000065 6c6c6128     mp_resume...(all
   1f928:	6465776f 2e5d695b 67616c66 20262073     owed[i].flags & 
   1f938:	415f504d 4b5f4752 5f444e49 4b53414d     MP_ARG_KIND_MASK
   1f948:	3d3d2029 5f504d20 5f475241 004a424f     ) == MP_ARG_OBJ.
   1f958:	2e2f2e2e 79702f2e 6772612f 63656863     ../../py/argchec
   1f968:	00632e6b 75677261 746e656d 6d756e20     k.c.argument num
   1f978:	7079742f 6d207365 616d7369 00686374     /types mismatch.

0001f988 <__func__.6164>:
   1f988:	615f706d 705f6772 65737261 6c6c615f     mp_arg_parse_all
   1f998:	00000000                                ....

0001f99c <mp_const_empty_map>:
   1f99c:	00000006 00000000 00000000              ............

0001f9a8 <hash_allocation_sizes>:
   1f9a8:	00020000 00060004 000a0008 0011000c     ................
   1f9b8:	001d0017 002f0025 0049003b 007f0061     ....%./.;.I.a...
   1f9c8:	00df00a7 01850125 02b30209 04c70397     ....%...........
   1f9d8:	0871065b 12df0c9d 2a6d1c4b 5f573f91     [.q.....K.m*.?W_
   1f9e8:	d67b8eff 70616d21 73693e2d 7869665f     ..{.!map->is_fix
   1f9f8:	7c206465 6f6c207c 70756b6f 6e696b5f     ed || lookup_kin
   1fa08:	3d3d2064 5f504d20 5f50414d 4b4f4f4c     d == MP_MAP_LOOK
   1fa18:	00005055 2e2f2e2e 79702f2e 70616d2f     UP..../../py/map
   1fa28:	0000632e                                .c..

0001fa2c <__func__.6269>:
   1fa2c:	6d5f706d 6c5f7061 756b6f6f 00000070     mp_map_lookup...
   1fa3c:	6c696e28 00000029 3e71253c 00000000     (nil)...<%q>....
   1fa4c:	2025206e 3d3d2033 00003020 2e2f2e2e     n % 3 == 0..../.
   1fa5c:	79702f2e 6a626f2f 0000632e 63617254     ./py/obj.c..Trac
   1fa6c:	63616265 6d28206b 2074736f 65636572     eback (most rece
   1fa7c:	6320746e 206c6c61 7473616c 000a3a29     nt call last):..
   1fa8c:	69462020 2220656c 00227125 0000000a       File "%q".....
   1fa9c:	6e69202c 0a712520 00000000 276e6163     , in %q.....can'
   1faac:	6f632074 7265766e 6f742074 746e6920     t convert to int
   1fabc:	00000000 65707865 64657463 70757420     ....expected tup
   1facc:	6c2f656c 00747369 6c707574 696c2f65     le/list.tuple/li
   1fadc:	68207473 77207361 676e6f72 6e656c20     st has wrong len
   1faec:	00687467 69646e69 20736563 7473756d     gth.indices must
   1fafc:	20656220 65746e69 73726567 00000000      be integers....
   1fb0c:	65646e69 756f2078 666f2074 6e617220     index out of ran
   1fb1c:	00006567 656a626f 68207463 6e207361     ge..object has n
   1fb2c:	656c206f 0000006e 656a626f 64207463     o len...object d
   1fb3c:	2073656f 20746f6e 70707573 2074726f     oes not support 
   1fb4c:	6d657469 6c656420 6f697465 0000006e     item deletion...
   1fb5c:	656a626f 69207463 6f6e2073 75732074     object is not su
   1fb6c:	72637362 61747069 00656c62 656a626f     bscriptable.obje
   1fb7c:	64207463 2073656f 20746f6e 70707573     ct does not supp
   1fb8c:	2074726f 6d657469 73736120 6d6e6769     ort item assignm
   1fb9c:	00746e65                                ent.

0001fba0 <mp_identity_obj>:
   1fba0:	0002098c 0000df7d 656a626f 77207463     ....}...object w
   1fbb0:	20687469 66667562 70207265 6f746f72     ith buffer proto
   1fbc0:	206c6f63 75716572 64657269 00000000     col required....

0001fbd0 <__func__.6794>:
   1fbd0:	6f5f706d 705f6a62 746e6972 6378655f     mp_obj_print_exc
   1fbe0:	69747065 00006e6f 65757254 00000000     eption..True....
   1fbf0:	736c6146 00000065                       False...

0001fbf8 <mp_type_bool>:
   1fbf8:	000220ac 006e0000 0000e075 0000e0b1     . ....n.u.......
   1fc08:	00000000 0000e0f9 0000e12d 00000000     ........-.......
	...

0001fc34 <mp_const_false_obj>:
   1fc34:	0001fbf8 00000000                       ........

0001fc3c <mp_const_true_obj>:
   1fc3c:	0001fbf8 00000001                       ........

0001fc44 <mp_type_bound_meth>:
   1fc44:	000220ac 006f0000 00000000 00000000     . ....o.........
   1fc54:	0000e1f5 00000000 00000000 00000000     ................
	...

0001fc80 <mp_type_cell>:
   1fc80:	000220ac 00010000 00000000 00000000     . ..............
	...

0001fcbc <closure_type>:
   1fcbc:	000220ac 00780000 00000000 00000000     . ....x.........
   1fccc:	0000e2c1 00000000 00000000 00000000     ................
	...
   1fcf8:	0000007b 0000202c 0000203a 0000007d     {..., ..: ..}...
   1fd08:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   1fd18:	5f666c65 20296e69 28202626 5f706d28     elf_in) && ((mp_
   1fd28:	5f6a626f 65736162 292a745f 6f762828     obj_base_t*)((vo
   1fd38:	292a6469 666c6573 296e695f 743e2d29     id*)self_in))->t
   1fd48:	2d657079 6b616d3e 656e5f65 3d3d2077     ype->make_new ==
   1fd58:	63696420 616d5f74 6e5f656b 00297765      dict_make_new).
   1fd68:	2e2f2e2e 79702f2e 6a626f2f 74636964     ../../py/objdict
   1fd78:	0000632e                                .c..

0001fd7c <dict_clear_obj>:
   1fd7c:	0002098c 0000e7e1                       ........

0001fd84 <dict_copy_obj>:
   1fd84:	0002098c 0000e845                       ....E...

0001fd8c <dict_fromkeys_fun_obj>:
   1fd8c:	00020ad4 00030004 0000e905              ............

0001fd98 <dict_fromkeys_obj>:
   1fd98:	000222f4 0001fd8c 5f504d28 5f4a424f     ."......(MP_OBJ_
   1fda8:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   1fdb8:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   1fdc8:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   1fdd8:	295d305b 743e2d29 2d657079 6b616d3e     [0]))->type->mak
   1fde8:	656e5f65 3d3d2077 63696420 616d5f74     e_new == dict_ma
   1fdf8:	6e5f656b 00297765                       ke_new).

0001fe00 <dict_get_obj>:
   1fe00:	00020ad4 00030004 0000ea79              ........y...

0001fe0c <dict_pop_obj>:
   1fe0c:	00020ad4 00030004 0000ea99              ............

0001fe18 <dict_setdefault_obj>:
   1fe18:	00020ad4 00030004 0000eab9 69706f70     ............popi
   1fe28:	286d6574 64203a29 69746369 72616e6f     tem(): dictionar
   1fe38:	73692079 706d6520 00007974              y is empty..

0001fe44 <dict_popitem_obj>:
   1fe44:	0002098c 0000ead9 74636964 64707520     ........dict upd
   1fe54:	20657461 75716573 65636e65 73616820     ate sequence has
   1fe64:	6f727720 6c20676e 74676e65 00000068      wrong length...

0001fe74 <dict_update_obj>:
   1fe74:	00020ad4 ffff0003 0000eb9d              ............

0001fe80 <dict_view_type>:
   1fe80:	000220ac 007d0000 0000ee69 00000000     . ....}.i.......
	...
   1fe98:	0000ef3d 00000000 00000000 0000edf1     =...............
	...

0001febc <dict_view_it_type>:
   1febc:	000220ac 00a30000 00000000 00000000     . ..............
	...
   1fee0:	0000df95 0000ed55 00000000 00000000     ....U...........
	...
   1fef8:	74636964 6574695f 0000736d 74636964     dict_items..dict
   1ff08:	79656b5f 00000073 74636964 6c61765f     _keys...dict_val
   1ff18:	00736575                                ues.

0001ff1c <mp_dict_view_names>:
   1ff1c:	0001fef8 0001ff04 0001ff10 5f504d28     ............(MP_
   1ff2c:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   1ff3c:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   1ff4c:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   1ff5c:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   1ff6c:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   1ff7c:	745f7469 29657079 00002929 5f504d28     it_type)))..(MP_
   1ff8c:	5f4a424f 4f5f5349 76284a42 5f776569     OBJ_IS_OBJ(view_
   1ff9c:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   1ffac:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   1ffbc:	65697629 6e695f77 3e2d2929 65707974     )view_in))->type
   1ffcc:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   1ffdc:	65707974 00292929 5f504d28 5f4a424f     type))).(MP_OBJ_
   1ffec:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   1fffc:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   2000c:	2a745f65 76282829 2a64696f 6c657329     e_t*)((void*)sel
   2001c:	6e695f66 3e2d2929 65707974 203d3d20     f_in))->type == 
   2002c:	69642628 765f7463 5f776569 65707974     (&dict_view_type
   2003c:	00292929 00005b28 0000295d              ))).([..])..

00020048 <dict_items_obj>:
   20048:	0002098c 0000f009                       ........

00020050 <dict_keys_obj>:
   20050:	0002098c 0000f025                       ....%...

00020058 <dict_values_obj>:
   20058:	0002098c 0000f041                       ....A...

00020060 <dict_locals_dict_table>:
   20060:	000001da 0001fd7c 000001ea 0001fd84     ....|...........
   20070:	00000226 0001fd98 00000232 0001fe00     &.......2.......
   20080:	00000286 00020048 0000029e 00020050     ....H.......P...
   20090:	000002e6 0001fe0c 000002ea 0001fe44     ............D...
   200a0:	0000032e 0001fe18 00000372 0001fe74     ........r...t...
   200b0:	0000037e 00020058 0000003a 000224a0     ~...X...:....$..
   200c0:	0000008a 000224a8 00000022 000224b0     .....$.."....$..

000200d0 <dict_locals_dict>:
   200d0:	000200e0 00000077 0000000e 00020060     ....w.......`...

000200e0 <mp_type_dict>:
   200e0:	000220ac 007c0000 0000e4cd 0000e569     . ....|.....i...
   200f0:	00000000 0000e5d1 0000e621 00000000     ........!.......
   20100:	0000e74d 0000f05d 00000000 00000000     M...]...........
	...
   20118:	000200d0                                ....

0002011c <__func__.6142>:
   2011c:	74636964 656c635f 00007261              dict_clear..

00020128 <__func__.6148>:
   20128:	74636964 706f635f 00000079              dict_copy...

00020134 <__func__.6173>:
   20134:	74636964 7465675f 6c65685f 00726570     dict_get_helper.

00020144 <__func__.6195>:
   20144:	74636964 706f705f 6d657469 00000000     dict_popitem....

00020154 <__func__.6207>:
   20154:	74636964 6470755f 00657461              dict_update.

00020160 <__func__.6250>:
   20160:	74636964 6569765f 74695f77 6574695f     dict_view_it_ite
   20170:	78656e72 00000074                       rnext...

00020178 <__func__.6263>:
   20178:	74636964 6569765f 65675f77 65746974     dict_view_getite
   20188:	00000072                                r...

0002018c <__func__.6271>:
   2018c:	74636964 6569765f 72705f77 00746e69     dict_view_print.

0002019c <__func__.6296>:
   2019c:	74636964 6569765f 00000077              dict_view...

000201a8 <__func__.6313>:
   201a8:	74636964 7465675f 72657469 00000000     dict_getiter....

000201b8 <__func__.6335>:
   201b8:	6f5f706d 645f6a62 5f746369 726f7473     mp_obj_dict_stor
   201c8:	00000065                                e...

000201cc <mp_const_GeneratorExit_obj>:
   201cc:	00020298 00000000 00000000 00021df0     ................
   201dc:	0000203a 00000000                       : ......

000201e4 <mp_type_BaseException>:
   201e4:	000220ac 003e0000 0000f27d 0000f341     . ....>.}...A...
	...
   20200:	0000f435 00000000 00000000 00000000     5...............
	...

00020220 <mp_type_SystemExit>:
   20220:	000220ac 00600000 0000f27d 0000f341     . ....`.}...A...
	...
   2023c:	0000f435 00000000 00000000 00000000     5...............
	...
   20254:	000201e4 00000000                       ........

0002025c <mp_type_KeyboardInterrupt>:
   2025c:	000220ac 004d0000 0000f27d 0000f341     . ....M.}...A...
	...
   20278:	0000f435 00000000 00000000 00000000     5...............
	...
   20290:	000201e4 00000000                       ........

00020298 <mp_type_GeneratorExit>:
   20298:	000220ac 00420000 0000f27d 0000f341     . ....B.}...A...
	...
   202b4:	0000f435 00000000 00000000 00000000     5...............
	...
   202cc:	000201e4 00000000                       ........

000202d4 <mp_type_Exception>:
   202d4:	000220ac 00410000 0000f27d 0000f341     . ....A.}...A...
	...
   202f0:	0000f435 00000000 00000000 00000000     5...............
	...
   20308:	000201e4 00000000                       ........

00020310 <mp_type_StopIteration>:
   20310:	000220ac 005e0000 0000f27d 0000f341     . ....^.}...A...
	...
   2032c:	0000f435 00000000 00000000 00000000     5...............
	...
   20344:	000202d4 00000000                       ........

0002034c <mp_type_ArithmeticError>:
   2034c:	000220ac 003b0000 0000f27d 0000f341     . ....;.}...A...
	...
   20368:	0000f435 00000000 00000000 00000000     5...............
	...
   20380:	000202d4 00000000                       ........

00020388 <mp_type_OverflowError>:
   20388:	000220ac 00590000 0000f27d 0000f341     . ....Y.}...A...
	...
   203a4:	0000f435 00000000 00000000 00000000     5...............
	...
   203bc:	0002034c 00000000                       L.......

000203c4 <mp_type_ZeroDivisionError>:
   203c4:	000220ac 00630000 0000f27d 0000f341     . ....c.}...A...
	...
   203e0:	0000f435 00000000 00000000 00000000     5...............
	...
   203f8:	0002034c 00000000                       L.......

00020400 <mp_type_AssertionError>:
   20400:	000220ac 003c0000 0000f27d 0000f341     . ....<.}...A...
	...
   2041c:	0000f435 00000000 00000000 00000000     5...............
	...
   20434:	000202d4 00000000                       ........

0002043c <mp_type_AttributeError>:
   2043c:	000220ac 003d0000 0000f27d 0000f341     . ....=.}...A...
	...
   20458:	0000f435 00000000 00000000 00000000     5...............
	...
   20470:	000202d4 00000000                       ........

00020478 <mp_type_EOFError>:
   20478:	000220ac 003f0000 0000f27d 0000f341     . ....?.}...A...
	...
   20494:	0000f435 00000000 00000000 00000000     5...............
	...
   204ac:	000202d4 00000000                       ........

000204b4 <mp_type_ImportError>:
   204b4:	000220ac 00490000 0000f27d 0000f341     . ....I.}...A...
	...
   204d0:	0000f435 00000000 00000000 00000000     5...............
	...
   204e8:	000202d4 00000000                       ........

000204f0 <mp_type_LookupError>:
   204f0:	000220ac 004f0000 0000f27d 0000f341     . ....O.}...A...
	...
   2050c:	0000f435 00000000 00000000 00000000     5...............
	...
   20524:	000202d4 00000000                       ........

0002052c <mp_type_IndexError>:
   2052c:	000220ac 004b0000 0000f27d 0000f341     . ....K.}...A...
	...
   20548:	0000f435 00000000 00000000 00000000     5...............
	...
   20560:	000204f0 00000000                       ........

00020568 <mp_type_KeyError>:
   20568:	000220ac 004c0000 0000f27d 0000f341     . ....L.}...A...
	...
   20584:	0000f435 00000000 00000000 00000000     5...............
	...
   2059c:	000204f0 00000000                       ........

000205a4 <mp_type_MemoryError>:
   205a4:	000220ac 00510000 0000f27d 0000f341     . ....Q.}...A...
	...
   205c0:	0000f435 00000000 00000000 00000000     5...............
	...
   205d8:	000202d4 00000000                       ........

000205e0 <mp_type_NameError>:
   205e0:	000220ac 00520000 0000f27d 0000f341     . ....R.}...A...
	...
   205fc:	0000f435 00000000 00000000 00000000     5...............
	...
   20614:	000202d4 00000000                       ........

0002061c <mp_type_OSError>:
   2061c:	000220ac 00570000 0000f27d 0000f341     . ....W.}...A...
	...
   20638:	0000f435 00000000 00000000 00000000     5...............
	...
   20650:	000202d4 00000000                       ........

00020658 <mp_type_RuntimeError>:
   20658:	000220ac 005d0000 0000f27d 0000f341     . ....].}...A...
	...
   20674:	0000f435 00000000 00000000 00000000     5...............
	...
   2068c:	000202d4 00000000                       ........

00020694 <mp_type_NotImplementedError>:
   20694:	000220ac 00550000 0000f27d 0000f341     . ....U.}...A...
	...
   206b0:	0000f435 00000000 00000000 00000000     5...............
	...
   206c8:	00020658 00000000                       X.......

000206d0 <mp_type_SyntaxError>:
   206d0:	000220ac 005f0000 0000f27d 0000f341     . ...._.}...A...
	...
   206ec:	0000f435 00000000 00000000 00000000     5...............
	...
   20704:	000202d4 00000000                       ........

0002070c <mp_type_IndentationError>:
   2070c:	000220ac 004a0000 0000f27d 0000f341     . ....J.}...A...
	...
   20728:	0000f435 00000000 00000000 00000000     5...............
	...
   20740:	000206d0 00000000                       ........

00020748 <mp_type_TypeError>:
   20748:	000220ac 00610000 0000f27d 0000f341     . ....a.}...A...
	...
   20764:	0000f435 00000000 00000000 00000000     5...............
	...
   2077c:	000202d4 00000000                       ........

00020784 <mp_type_ValueError>:
   20784:	000220ac 00620000 0000f27d 0000f341     . ....b.}...A...
	...
   207a0:	0000f435 00000000 00000000 00000000     5...............
	...
   207b8:	000202d4 00000000 5f637865 65707974     ........exc_type
   207c8:	616d3e2d 6e5f656b 3d207765 706d203d     ->make_new == mp
   207d8:	6a626f5f 6378655f 69747065 6d5f6e6f     _obj_exception_m
   207e8:	5f656b61 0077656e 2e2f2e2e 79702f2e     ake_new.../../py
   207f8:	6a626f2f 65637865 632e7470 00000000     /objexcept.c....
   20808:	20746d66 4e203d21 004c4c55 6f5f706d     fmt != NULL.mp_o
   20818:	695f6a62 78655f73 74706563 5f6e6f69     bj_is_exception_
   20828:	74736e69 65636e61 6c657328 6e695f66     instance(self_in
   20838:	00000029                                )...

0002083c <__func__.6722>:
   2083c:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   2084c:	6e6f6974 6772615f 00000073              tion_args...

00020858 <__func__.6744>:
   20858:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   20868:	6e6f6974 67736d5f 7261765f 00000067     tion_msg_varg...

00020878 <__func__.6767>:
   20878:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   20888:	656c635f 745f7261 65636172 6b636162     _clear_traceback
   20898:	00000000                                ....

0002089c <__func__.6775>:
   2089c:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   208ac:	6464615f 6172745f 61626563 00006b63     _add_traceback..

000208bc <__func__.6785>:
   208bc:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   208cc:	7465675f 6172745f 61626563 00006b63     _get_traceback..
   208dc:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   208ec:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   208fc:	6e75665f 6975625f 6e69746c 0029305f     _fun_builtin_0).
   2090c:	2e2f2e2e 79702f2e 6a626f2f 2e6e7566     ../../py/objfun.
   2091c:	00000063                                c...

00020920 <mp_type_fun_builtin_0>:
   20920:	000220ac 008a0000 00000000 00000000     . ..............
   20930:	0000fa79 0000e025 00000000 00000000     y...%...........
	...
   2095c:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   2096c:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   2097c:	6e75665f 6975625f 6e69746c 0029315f     _fun_builtin_1).

0002098c <mp_type_fun_builtin_1>:
   2098c:	000220ac 008a0000 00000000 00000000     . ..............
   2099c:	0000fae5 0000e025 00000000 00000000     ....%...........
	...
   209c8:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   209d8:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   209e8:	6e75665f 6975625f 6e69746c 0029325f     _fun_builtin_2).

000209f8 <mp_type_fun_builtin_2>:
   209f8:	000220ac 008a0000 00000000 00000000     . ..............
   20a08:	0000fb55 0000e025 00000000 00000000     U...%...........
	...
   20a34:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20a44:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20a54:	6e75665f 6975625f 6e69746c 0029335f     _fun_builtin_3).

00020a64 <mp_type_fun_builtin_3>:
   20a64:	000220ac 008a0000 00000000 00000000     . ..............
   20a74:	0000fbcd 0000e025 00000000 00000000     ....%...........
	...
   20aa0:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20ab0:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20ac0:	6e75665f 6975625f 6e69746c 7261765f     _fun_builtin_var
   20ad0:	00000029                                )...

00020ad4 <mp_type_fun_builtin_var>:
   20ad4:	000220ac 008a0000 00000000 00000000     . ..............
   20ae4:	0000fc49 0000e025 00000000 00000000     I...%...........
	...
   20b10:	725f6d76 72757465 696b5f6e 3d20646e     vm_return_kind =
   20b20:	504d203d 5f4d565f 55544552 455f4e52     = MP_VM_RETURN_E
   20b30:	50454358 4e4f4954 00000000              XCEPTION....

00020b3c <mp_type_fun_bc>:
   20b3c:	000220ac 008a0000 00000000 00000000     . ..............
   20b4c:	0000fd79 0000e025 00000000 00000000     y...%...........
	...
   20b78:	4f5f504d 495f4a42 59545f53 64284550     MP_OBJ_IS_TYPE(d
   20b88:	615f6665 5f736772 202c6e69 5f706d26     ef_args_in, &mp_
   20b98:	65707974 7075745f 0029656c              type_tuple).

00020ba4 <__func__.6021>:
   20ba4:	5f6e7566 6c697562 5f6e6974 61635f30     fun_builtin_0_ca
   20bb4:	00006c6c                                ll..

00020bb8 <__func__.6030>:
   20bb8:	5f6e7566 6c697562 5f6e6974 61635f31     fun_builtin_1_ca
   20bc8:	00006c6c                                ll..

00020bcc <__func__.6039>:
   20bcc:	5f6e7566 6c697562 5f6e6974 61635f32     fun_builtin_2_ca
   20bdc:	00006c6c                                ll..

00020be0 <__func__.6048>:
   20be0:	5f6e7566 6c697562 5f6e6974 61635f33     fun_builtin_3_ca
   20bf0:	00006c6c                                ll..

00020bf4 <__func__.6057>:
   20bf4:	5f6e7566 6c697562 5f6e6974 5f726176     fun_builtin_var_
   20c04:	6c6c6163 00000000                       call....

00020c0c <__func__.6082>:
   20c0c:	5f6e7566 635f6362 006c6c61              fun_bc_call.

00020c18 <__func__.6093>:
   20c18:	6f5f706d 6e5f6a62 665f7765 625f6e75     mp_obj_new_fun_b
   20c28:	00000063                                c...

00020c2c <mp_type_gen_wrap>:
   20c2c:	000220ac 008b0000 00000000 00000000     . ..............
   20c3c:	0000ffcd 0000e025 00000000 00000000     ....%...........
	...
   20c68:	6e65673c 74617265 6f20726f 63656a62     <generator objec
   20c78:	25272074 61202771 70252074 0000003e     t '%q' at %p>...
   20c88:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   20c98:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   20ca8:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   20cb8:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   20cc8:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   20cd8:	65675f65 6e695f6e 6e617473 29296563     e_gen_instance))
   20ce8:	00000029 2e2f2e2e 79702f2e 6a626f2f     )...../../py/obj
   20cf8:	656e6567 6f746172 00632e72 276e6163     generator.c.can'
   20d08:	65732074 6e20646e 4e2d6e6f 20656e6f     t send non-None 
   20d18:	756c6176 6f742065 6a206120 2d747375     value to a just-
   20d28:	72617473 20646574 656e6567 6f746172     started generato
   20d38:	00000072 656e6567 6f746172 6c612072     r...generator al
   20d48:	64616572 78652079 74756365 00676e69     ready executing.

00020d58 <gen_instance_send_obj>:
   20d58:	000209f8 00010295                       ........

00020d60 <gen_instance_throw_obj>:
   20d60:	00020ad4 00040004 000102cd 656e6567     ............gene
   20d70:	6f746172 67692072 65726f6e 65472064     rator ignored Ge
   20d80:	6172656e 45726f74 00746978              neratorExit.

00020d8c <gen_instance_close_obj>:
   20d8c:	0002098c 00010321 276e6163 65702074     ....!...can't pe
   20d9c:	7420646e 776f7268 206f7420 7473756a     nd throw to just
   20dac:	6174732d 64657472 6e656720 74617265     -started generat
   20dbc:	0000726f                                or..

00020dc0 <gen_instance_pend_throw_obj>:
   20dc0:	000209f8 000103a9                       ........

00020dc8 <gen_instance_locals_dict_table>:
   20dc8:	000001de 00020d8c 00000322 00020d58     ........"...X...
   20dd8:	00000362 00020d60 000002e2 00020dc0     b...`...........

00020de8 <gen_instance_locals_dict>:
   20de8:	000200e0 00000027 00000004 00020dc8     ....'...........

00020df8 <mp_type_gen_instance>:
   20df8:	000220ac 008b0000 00010051 00000000     . ......Q.......
   20e08:	00000000 0000e025 00000000 00000000     ....%...........
   20e18:	00000000 0000df95 00010275 00000000     ........u.......
	...
   20e30:	00020de8                                ....

00020e34 <__func__.6235>:
   20e34:	6f5f706d 675f6a62 725f6e65 6d757365     mp_obj_gen_resum
   20e44:	00000065                                e...

00020e48 <it_type>:
   20e48:	000220ac 00a30000 00000000 00000000     . ..............
	...
   20e6c:	0000df95 000103e9 00000000 00000000     ................
	...

00020e84 <log_base2_floor>:
   20e84:	02010100 03020202 03030303 04030303     ................
   20e94:	3d3c2032 73616220 26262065 73616220     2 <= base && bas
   20ea4:	3d3c2065 00363120 2e2f2e2e 79702f2e     e <= 16.../../py
   20eb4:	6a626f2f 2e746e69 00000063 676e6f6c     /objint.c...long
   20ec4:	746e6920 746f6e20 70757320 74726f70      int not support
   20ed4:	69206465 6874206e 62207369 646c6975     ed in this build
   20ee4:	00000000 6c616d73 6e69206c 766f2074     ....small int ov
   20ef4:	6c667265 0000776f                       erflow..

00020efc <int_from_bytes_fun_obj>:
   20efc:	00020ad4 00040006 00010a99              ............

00020f08 <int_from_bytes_obj>:
   20f08:	000222f4 00020efc                       ."......

00020f10 <int_to_bytes_obj>:
   20f10:	00020ad4 00040006 00010b15              ............

00020f1c <int_locals_dict_table>:
   20f1c:	00000222 00020f08 00000366 00020f10     ".......f.......

00020f2c <int_locals_dict>:
   20f2c:	000200e0 00000017 00000002 00020f1c     ................

00020f3c <mp_type_int>:
   20f3c:	000220ac 00980000 00010611 0001050d     . ..............
   20f4c:	00000000 000108b1 000108c9 00000000     ................
	...
   20f74:	00020f2c                                ,...

00020f78 <__func__.6738>:
   20f78:	695f706d 665f746e 616d726f 69735f74     mp_int_format_si
   20f88:	0000657a 0000005b 0000202c 0000005d     ze..[..., ..]...
   20f98:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   20fa8:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   20fb8:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   20fc8:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   20fd8:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   20fe8:	696c5f65 29297473 00000029 2e2f2e2e     e_list)))...../.
   20ff8:	79702f2e 6a626f2f 7473696c 0000632e     ./py/objlist.c..
   21008:	5f504d28 5f4a424f 4f5f5349 61284a42     (MP_OBJ_IS_OBJ(a
   21018:	5b736772 20295d30 28202626 706d2828     rgs[0]) && (((mp
   21028:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   21038:	2a64696f 67726129 5d305b73 3e2d2929     oid*)args[0]))->
   21048:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   21058:	696c5f65 29297473 00000029 20706f70     e_list)))...pop 
   21068:	6d6f7266 706d6520 6c207974 00747369     from empty list.
   21078:	5f504d28 5f4a424f 4f5f5349 70284a42     (MP_OBJ_IS_OBJ(p
   21088:	615f736f 5b736772 20295d30 28202626     os_args[0]) && (
   21098:	706d2828 6a626f5f 7361625f 2a745f65     ((mp_obj_base_t*
   210a8:	76282829 2a64696f 736f7029 6772615f     )((void*)pos_arg
   210b8:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   210c8:	706d2628 7079745f 696c5f65 29297473     (&mp_type_list))
   210d8:	00000029                                )...

000210dc <list_append_obj>:
   210dc:	000209f8 00010fa5                       ........

000210e4 <list_extend_obj>:
   210e4:	000209f8 00011065                       ....e...

000210ec <list_clear_obj>:
   210ec:	0002098c 00011485                       ........

000210f4 <list_copy_obj>:
   210f4:	0002098c 00011509                       ........

000210fc <list_count_obj>:
   210fc:	000209f8 00011569                       ....i...

00021104 <list_index_obj>:
   21104:	00020ad4 00040004 000115cd              ............

00021110 <list_insert_obj>:
   21110:	00020a64 00011639                       d...9...

00021118 <list_pop_obj>:
   21118:	00020ad4 00020002 00011175              ........u...

00021124 <list_remove_obj>:
   21124:	000209f8 0001170d                       ........

0002112c <list_reverse_obj>:
   2112c:	0002098c 00011785                       ........

00021134 <list_sort_obj>:
   21134:	00020ad4 ffff0003 000113c1              ............

00021140 <list_locals_dict_table>:
   21140:	000001aa 000210dc 000001da 000210ec     ................
   21150:	000001ea 000210f4 000001ee 000210fc     ................
   21160:	00000216 000210e4 00000256 00021104     ........V.......
   21170:	0000025e 00021110 000002e6 00021118     ^...............
   21180:	000002fe 00021124 0000030a 0002112c     ....$.......,...
   21190:	00000332 00021134                       2...4...

00021198 <list_locals_dict>:
   21198:	000200e0 0000005f 0000000b 00021140     ...._.......@...

000211a8 <mp_type_list>:
   211a8:	000220ac 00a90000 00010c09 00010cb5     . ..............
   211b8:	00000000 00010d05 00010d4d 00000000     ........M.......
   211c8:	00010f19 00010f85 00000000 00000000     ................
	...
   211e0:	00021198                                ....

000211e4 <__func__.6047>:
   211e4:	6f5f706d 6c5f6a62 5f747369 65707061     mp_obj_list_appe
   211f4:	0000646e                                nd..

000211f8 <__func__.6053>:
   211f8:	7473696c 7478655f 00646e65              list_extend.

00021204 <__func__.6060>:
   21204:	7473696c 706f705f 00000000              list_pop....

00021210 <allowed_args.6089>:
   21210:	020300a6 00021480 020100c2 00000000     ................

00021220 <__func__.6094>:
   21220:	6f5f706d 6c5f6a62 5f747369 74726f73     mp_obj_list_sort
   21230:	00000000                                ....

00021234 <__func__.6099>:
   21234:	7473696c 656c635f 00007261              list_clear..

00021240 <__func__.6104>:
   21240:	7473696c 706f635f 00000079              list_copy...

0002124c <__func__.6110>:
   2124c:	7473696c 756f635f 0000746e              list_count..

00021258 <__func__.6116>:
   21258:	7473696c 646e695f 00007865              list_index..

00021264 <__func__.6123>:
   21264:	7473696c 736e695f 00747265              list_insert.

00021270 <__func__.6134>:
   21270:	6f5f706d 6c5f6a62 5f747369 6f6d6572     mp_obj_list_remo
   21280:	00006576                                ve..

00021284 <__func__.6139>:
   21284:	7473696c 7665725f 65737265 00000000     list_reverse....
   21294:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   212a4:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   212b4:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   212c4:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   212d4:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   212e4:	616d5f65 29292970 00000000 2e2f2e2e     e_map)))....../.
   212f4:	79702f2e 6a626f2f 2e70616d 00000063     ./py/objmap.c...

00021304 <mp_type_map>:
   21304:	000220ac 00ae0000 00000000 00011a49     . ..........I...
	...
   21328:	0000df95 00011ad1 00000000 00000000     ................
	...

00021340 <__func__.6162>:
   21340:	5f70616d 72657469 7478656e 00000000     map_iternext....
   21350:	00000000 646f6d3c 20656c75 27732527     ....<module '%s'
   21360:	0000003e                                >...

00021364 <mp_type_module>:
   21364:	000220ac 00b10000 00011b9d 00000000     . ..............
	...
   21380:	00011bf1 00000000 00000000 00000000     ................
	...

000213a0 <mp_builtin_module_table>:
   213a0:	00000066 0001f634 000001c2 000229c4     f...4........)..
   213b0:	000002be 00022a6c                       ....l*..

000213b8 <mp_builtin_module_map>:
   213b8:	0000001f 00000003 000213a0              ............

000213c4 <mp_type_object>:
   213c4:	000220ac 00b30000 00000000 00011d95     . ..............
	...

00021400 <mp_type_polymorph_iter>:
   21400:	000220ac 00a30000 00000000 00000000     . ..............
	...
   21424:	0000df95 00011dcd 00000000 00000000     ................
	...
   2143c:	656e6f4e 00000000                       None....

00021444 <mp_type_NoneType>:
   21444:	000220ac 00540000 00011ded 00000000     . ....T.........
   21454:	00000000 0000e025 00000000 00000000     ....%...........
	...

00021480 <mp_const_none_obj>:
   21480:	00021444                                D...

00021484 <range_it_type>:
   21484:	000220ac 00a30000 00000000 00000000     . ..............
	...
   214a8:	0000df95 00011e35 00000000 00000000     ....5...........
	...
   214c0:	676e6172 64252865 6425202c 00000000     range(%d, %d....
   214d0:	00000029 6425202c 00000029 6f72657a     )..., %d)...zero
   214e0:	65747320 00000070                        step...

000214e8 <mp_type_range>:
   214e8:	000220ac 00be0000 00011ed1 00011f25     . ..........%...
   214f8:	00000000 00012021 00000000 000120ed     ....! ....... ..
   21508:	0001206d 000120c1 00000000 00000000     m ... ..........
	...
   21524:	00007125                                %q..

00021528 <mp_type_singleton>:
   21528:	000220ac 00010000 00012155 00000000     . ......U!......
	...

00021564 <mp_const_ellipsis_obj>:
   21564:	00021528 00000040 00006325 0063255c     (...@...%c..\%c.
   21574:	00005c5c 00006e5c 0000725c 0000745c     \\..\n..\r..\t..
   21584:	3025785c 00007832 732a2e25 00000000     \x%02x..%.*s....
   21594:	00000062 65747962 61762073 2065756c     b...bytes value 
   215a4:	2074756f 7220666f 65676e61 00000000     out of range....
   215b4:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   215c4:	75677261 746e656d 00000073 5f504d28     arguments...(MP_
   215d4:	5f4a424f 515f5349 28525453 666c6573     OBJ_IS_QSTR(self
   215e4:	296e695f 207c7c20 5f504d28 5f4a424f     _in) || (MP_OBJ_
   215f4:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   21604:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   21614:	292a745f 6f762828 292a6469 666c6573     _t*)((void*)self
   21624:	296e695f 743e2d29 2d657079 6e69623e     _in))->type->bin
   21634:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   21644:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   21654:	00000000 2e2f2e2e 79702f2e 6a626f2f     ....../../py/obj
   21664:	2e727473 00000063 6e696f6a 70786520     str.c...join exp
   21674:	73746365 6c206120 20747369 7320666f     ects a list of s
   21684:	622f7274 73657479 6a626f20 73746365     tr/bytes objects
   21694:	6e6f6320 74736973 20746e65 68746977      consistent with
   216a4:	6c657320 626f2066 7463656a 00000000      self object....

000216b4 <str_join_obj>:
   216b4:	000209f8 00012bf9 74706d65 65732079     .....+..empty se
   216c4:	61726170 00726f74                       parator.

000216cc <str_split_obj>:
   216cc:	00020ad4 00030002 00012e2d 6c707372     ........-...rspl
   216dc:	4e287469 2c656e6f 0000296e              it(None,n)..

000216e8 <str_rsplit_obj>:
   216e8:	00020ad4 00030002 00013041 5f504d28     ........A0..(MP_
   216f8:	5f4a424f 515f5349 28525453 73677261     OBJ_IS_QSTR(args
   21708:	295d305b 207c7c20 5f504d28 5f4a424f     [0]) || (MP_OBJ_
   21718:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   21728:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   21738:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   21748:	295d305b 743e2d29 2d657079 6e69623e     [0]))->type->bin
   21758:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   21768:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   21778:	00000000 73627573 6e697274 6f6e2067     ....substring no
   21788:	6f662074 00646e75                       t found.

00021790 <str_find_obj>:
   21790:	00020ad4 00040004 000133cd              .........3..

0002179c <str_rfind_obj>:
   2179c:	00020ad4 00040004 000133ed              .........3..

000217a8 <str_index_obj>:
   217a8:	00020ad4 00040004 00013411              .........4..

000217b4 <str_rindex_obj>:
   217b4:	00020ad4 00040004 00013431              ........14..

000217c0 <str_startswith_obj>:
   217c0:	00020ad4 00030004 00013455 72617473     ........U4..star
   217d0:	6e652f74 6e692064 65636964 00000073     t/end indices...

000217e0 <str_endswith_obj>:
   217e0:	00020ad4 00030004 00013519 7473616c     .........5..last
   217f0:	6f6f675f 68635f64 705f7261 3e20736f     _good_char_pos >
   21800:	6966203d 5f747372 646f6f67 6168635f     = first_good_cha
   21810:	6f705f72 00000073 73726966 6f675f74     r_pos...first_go
   21820:	635f646f 5f726168 20736f70 30203d3d     od_char_pos == 0
   21830:	00000000                                ....

00021834 <str_strip_obj>:
   21834:	00020ad4 00020002 000137fd              .........7..

00021840 <str_lstrip_obj>:
   21840:	00020ad4 00020002 0001381d              .........8..

0002184c <str_rstrip_obj>:
   2184c:	00020ad4 00020002 0001383d 5e3d3e3c     ........=8..<>=^
   2185c:	00000000 65646362 67466645 736f6e47     ....bcdeEfFgGnos
   2186c:	00255878 20646162 6d726f66 73207461     xX%.bad format s
   2187c:	6e697274 00000067 6c707574 6e692065     tring...tuple in
   2188c:	20786564 2074756f 7220666f 65676e61     dex out of range
   2189c:	00000000 72747461 74756269 6e207365     ....attributes n
   218ac:	7320746f 6f707075 64657472 74657920     ot supported yet
   218bc:	00000000 766e6f63 69737265 3d206e6f     ....conversion =
   218cc:	7227203d 00000027                       = 'r'...

000218d4 <str_format_obj>:
   218d4:	00020ad4 ffff0003 0001433d 5f504d28     ........=C..(MP_
   218e4:	5f4a424f 515f5349 28525453 74746170     OBJ_IS_QSTR(patt
   218f4:	296e7265 207c7c20 5f504d28 5f4a424f     ern) || (MP_OBJ_
   21904:	4f5f5349 70284a42 65747461 20296e72     IS_OBJ(pattern) 
   21914:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   21924:	292a745f 6f762828 292a6469 74746170     _t*)((void*)patt
   21934:	296e7265 743e2d29 2d657079 6e69623e     ern))->type->bin
   21944:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   21954:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   21964:	00000000 6d726f66 72207461 69757165     ....format requi
   21974:	20736572 69642061 00007463 20746f6e     res a dict..not 
   21984:	756f6e65 61206867 6d756772 73746e65     enough arguments
   21994:	726f6620 726f6620 2074616d 69727473      for format stri
   219a4:	0000676e 20632525 75716572 73657269     ng..%%c requires
   219b4:	746e6920 20726f20 72616863 00000000      int or char....
   219c4:	65746e69 20726567 75716572 64657269     integer required
   219d4:	00000000 20746f6e 206c6c61 75677261     ....not all argu
   219e4:	746e656d 6f632073 7265766e 20646574     ments converted 
   219f4:	69727564 7320676e 6e697274 6f662067     during string fo
   21a04:	74616d72 676e6974 00000000 61746164     rmatting....data
   21a14:	203d2120 4c4c554e 00000000               != NULL....

00021a20 <str_replace_obj>:
   21a20:	00020ad4 00040006 00014a6d              ........mJ..

00021a2c <str_count_obj>:
   21a2c:	00020ad4 00040004 00014d51              ........QM..

00021a38 <str_lower_obj>:
   21a38:	0002098c 00014fc1                       .....O..

00021a40 <str_upper_obj>:
   21a40:	0002098c 00014fe1                       .....O..

00021a48 <str_isspace_obj>:
   21a48:	0002098c 00015101                       .....Q..

00021a50 <str_isalpha_obj>:
   21a50:	0002098c 00015121                       ....!Q..

00021a58 <str_isdigit_obj>:
   21a58:	0002098c 00015141                       ....AQ..

00021a60 <str_isupper_obj>:
   21a60:	0002098c 00015161                       ....aQ..

00021a68 <str_islower_obj>:
   21a68:	0002098c 00015181                       .....Q..

00021a70 <str8_locals_dict_table>:
   21a70:	0000021a 00021790 0000030e 0002179c     ................
   21a80:	00000256 000217a8 00000312 000217b4     V...............
   21a90:	00000292 000216b4 0000033a 000216cc     ........:.......
   21aa0:	0000031a 000216e8 00000342 000217c0     ........B.......
   21ab0:	0000020a 000217e0 00000356 00021834     ........V...4...
   21ac0:	000002b6 00021840 0000031e 0002184c     ....@.......L...
   21ad0:	0000021e 000218d4 00000302 00021a20     ............ ...
   21ae0:	000001ee 00021a2c 000002b2 00021a38     ....,.......8...
   21af0:	00000376 00021a40 0000027a 00021a48     v...@...z...H...
   21b00:	0000026a 00021a50 0000026e 00021a58     j...P...n...X...
   21b10:	00000282 00021a60 00000276 00021a68     ....`...v...h...

00021b20 <str8_locals_dict>:
   21b20:	000200e0 000000b7 00000016 00021a70     ............p...

00021b30 <mp_type_str>:
   21b30:	000220ac 00d40000 000123bd 00012471     . .......#..q$..
	...
   21b48:	00012849 00000000 00012b6d 0001574d     I(......m+..MW..
   21b58:	00000000 000151a1 00000000 00000000     .....Q..........
   21b68:	00021b20                                 ...

00021b6c <mp_type_bytes>:
   21b6c:	000220ac 00720000 000123bd 000125c1     . ....r..#...%..
	...
   21b84:	00012849 00000000 00012b6d 00015801     I(......m+...X..
   21b94:	00000000 000151a1 00000000 00000000     .....Q..........
   21ba4:	00021b20 00000000                        .......

00021bac <mp_const_empty_bytes_obj>:
   21bac:	00021b6c 00000000 00000000 00021ba8     l...............
   21bbc:	276e6163 6f632074 7265766e 6f742074     can't convert to
   21bcc:	72747320 706d6920 6963696c 00796c74      str implicitly.

00021bdc <__func__.6181>:
   21bdc:	5f727473 6e696f6a 00000000              str_join....

00021be8 <__func__.6263>:
   21be8:	5f727473 646e6966 00007265              str_finder..

00021bf4 <__func__.6321>:
   21bf4:	5f727473 5f696e75 69727473 00000070     str_uni_strip...

00021c04 <whitespace.6325>:
   21c04:	0d0a0920 00000c0b                        .......

00021c0c <__func__.6411>:
   21c0c:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   21c1c:	65685f74 7265706c 00000000              t_helper....

00021c28 <__func__.6460>:
   21c28:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   21c38:	00000074                                t...

00021c3c <__func__.6472>:
   21c3c:	5f727473 75646f6d 665f6f6c 616d726f     str_modulo_forma
   21c4c:	00000074                                t...

00021c50 <__func__.6523>:
   21c50:	5f727473 6c706572 00656361              str_replace.

00021c5c <__func__.6550>:
   21c5c:	5f727473 6e756f63 00000074 00000028     str_count...(...
   21c6c:	0000202c 0000002c 00000029 6f5f706d     , ..,...)...mp_o
   21c7c:	675f6a62 745f7465 28657079 666c6573     bj_get_type(self
   21c8c:	296e695f 65673e2d 65746974 3d3d2072     _in)->getiter ==
   21c9c:	5f706d20 5f6a626f 6c707574 65675f65      mp_obj_tuple_ge
   21cac:	65746974 00000072 2e2f2e2e 79702f2e     titer...../../py
   21cbc:	6a626f2f 6c707574 00632e65 5f504d28     /objtuple.c.(MP_
   21ccc:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   21cdc:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   21cec:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   21cfc:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   21d0c:	203d3d20 706d2628 7079745f 75745f65      == (&mp_type_tu
   21d1c:	29656c70 00002929                       ple)))..

00021d24 <tuple_count_obj>:
   21d24:	000209f8 00015cd5 5f504d28 5f4a424f     .....\..(MP_OBJ_
   21d34:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   21d44:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   21d54:	2a745f65 76282829 2a64696f 67726129     e_t*)((void*)arg
   21d64:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   21d74:	706d2628 7079745f 75745f65 29656c70     (&mp_type_tuple)
   21d84:	00002929                                ))..

00021d88 <tuple_index_obj>:
   21d88:	00020ad4 00040004 00015d39              ........9]..

00021d94 <tuple_locals_dict_table>:
   21d94:	000001ee 00021d24 00000256 00021d88     ....$...V.......

00021da4 <tuple_locals_dict>:
   21da4:	000200e0 00000017 00000002 00021d94     ................

00021db4 <mp_type_tuple>:
   21db4:	000220ac 00da0000 00015889 0001590d     . .......X...Y..
   21dc4:	00000000 00015a81 00015b11 00000000     .....Z...[......
   21dd4:	00015c95 00015f15 00000000 00000000     .\..._..........
	...
   21dec:	00021da4                                ....

00021df0 <mp_const_empty_tuple_obj>:
   21df0:	00021db4 00000000 4f5f504d 495f4a42     ........MP_OBJ_I
   21e00:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   21e10:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).

00021e20 <__func__.5988>:
   21e20:	6c707574 6d635f65 65685f70 7265706c     tuple_cmp_helper
   21e30:	00000000                                ....

00021e34 <__func__.6037>:
   21e34:	6c707574 6f635f65 00746e75              tuple_count.

00021e40 <__func__.6044>:
   21e40:	6c707574 6e695f65 00786564              tuple_index.

00021e4c <__func__.6065>:
   21e4c:	6f5f706d 745f6a62 656c7075 7465675f     mp_obj_tuple_get
   21e5c:	00000000                                ....

00021e60 <__func__.6070>:
   21e60:	6f5f706d 745f6a62 656c7075 6c65645f     mp_obj_tuple_del
   21e70:	00000000 4f5f504d 495f4a42 59545f53     ....MP_OBJ_IS_TY
   21e80:	2a284550 6d657469 6d26202c 79745f70     PE(*item, &mp_ty
   21e90:	745f6570 29657079 00000000 2e2f2e2e     pe_type)....../.
   21ea0:	79702f2e 6a626f2f 65707974 0000632e     ./py/objtype.c..

00021eb0 <native_base_init_wrapper_obj>:
   21eb0:	00020ad4 ffff0002 00016059 5f6d756e     ........Y`..num_
   21ec0:	6974616e 625f6576 73657361 32203c20     native_bases < 2
   21ed0:	00000000 6b6f6f6c 3e2d7075 74736564     ....lookup->dest
   21ee0:	205d305b 4d203d3d 424f5f50 554e5f4a     [0] == MP_OBJ_NU
   21ef0:	00004c4c 6b6f6f6c 3e2d7075 74736564     LL..lookup->dest
   21f00:	205d315b 4d203d3d 424f5f50 554e5f4a     [1] == MP_OBJ_NU
   21f10:	00004c4c 65707974 6f6c3e2d 736c6163     LL..type->locals
   21f20:	6369645f 623e2d74 2e657361 65707974     _dict->base.type
   21f30:	203d3d20 5f706d26 65707974 6369645f      == &mp_type_dic
   21f40:	00000074 2073253c 656a626f 61207463     t...<%s object a
   21f50:	70252074 0000003e 6f5f706d 695f6a62     t %p>...mp_obj_i
   21f60:	6e695f73 6e617473 745f6563 28657079     s_instance_type(
   21f70:	666c6573 00000029 6e695f5f 5f5f7469     self)...__init__
   21f80:	73202928 6c756f68 65722064 6e727574     () should return
   21f90:	6e6f4e20 00000065                        None...

00021f98 <mp_unary_op_method_name>:
   21f98:	00000000 00101703 00000000              ............

00021fa4 <mp_binary_op_method_name>:
   21fa4:	160a0f18 0000000c 00000000 14110000     ................
	...
   21fbc:	24020000 00000000 00070000 6f5f706d     ...$........mp_o
   21fcc:	695f6a62 6e695f73 6e617473 745f6563     bj_is_instance_t
   21fdc:	28657079 6f5f706d 675f6a62 745f7465     ype(mp_obj_get_t
   21fec:	28657079 666c6573 296e695f 00000029     ype(self_in))...
   21ffc:	656a626f 6e207463 6320746f 616c6c61     object not calla
   2200c:	00656c62 616c633c 27207373 3e277125     ble.<class '%q'>
   2201c:	00000000 65707974 6b617420 31207365     ....type takes 1
   2202c:	20726f20 72612033 656d7567 0073746e      or 3 arguments.
   2203c:	6e6e6163 6320746f 74616572 6e692065     cannot create in
   2204c:	6e617473 00006563 4f5f504d 495f4a42     stance..MP_OBJ_I
   2205c:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   2206c:	5f706d26 65707974 7079745f 00002965     &mp_type_type)..
   2207c:	666c6573 6f6c3e2d 736c6163 6369645f     self->locals_dic
   2208c:	623e2d74 2e657361 65707974 203d3d20     t->base.type == 
   2209c:	5f706d26 65707974 6369645f 00000074     &mp_type_dict...

000220ac <mp_type_type>:
   220ac:	000220ac 00db0000 00016c19 00016c45     . .......l..El..
   220bc:	00016cb1 0000e025 00000000 00016cf1     .l..%........l..
	...
   220e8:	65707974 20736920 20746f6e 61206e61     type is not an a
   220f8:	70656363 6c626174 61622065 74206573     cceptable base t
   22108:	00657079 746c756d 656c7069 73616220     ype.multiple bas
   22118:	68207365 20657661 74736e69 65636e61     es have instance
   22128:	79616c20 74756f2d 6e6f6320 63696c66      lay-out conflic
   22138:	00000074 7075733c 203a7265 00000000     t...<super: ....
   22148:	0000202c 0000003e 4f5f504d 495f4a42     , ..>...MP_OBJ_I
   22158:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   22168:	5f706d26 65707974 7075735f 00297265     &mp_type_super).
   22178:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   22188:	2d666c65 7079743e 26202c65 745f706d     elf->type, &mp_t
   22198:	5f657079 65707974 00000029 4f5f504d     ype_type)...MP_O
   221a8:	495f4a42 59545f53 69284550 736d6574     BJ_IS_TYPE(items
   221b8:	2c5d695b 706d2620 7079745f 79745f65     [i], &mp_type_ty
   221c8:	00296570                                pe).

000221cc <mp_type_super>:
   221cc:	000220ac 00d70000 00016ff1 00017049     . .......o..Ip..
	...
   221e8:	000170bd 00000000 00000000 00000000     .p..............
	...
   22208:	75737369 616c6362 29287373 67726120     issubclass() arg
   22218:	6d203220 20747375 61206562 616c6320      2 must be a cla
   22228:	6f207373 20612072 6c707574 666f2065     ss or a tuple of
   22238:	616c6320 73657373 00000000 75737369      classes....issu
   22248:	616c6362 29287373 67726120 6d203120     bclass() arg 1 m
   22258:	20747375 61206562 616c6320 00007373     ust be a class..

00022268 <mp_builtin_issubclass_obj>:
   22268:	000209f8 00017435                       ....5t..

00022270 <mp_builtin_isinstance_obj>:
   22270:	000209f8 0001747d 666c6573 203d3d20     ....}t..self == 
   22280:	5f706d26 65707974 6174735f 6d636974     &mp_type_staticm
   22290:	6f687465 7c7c2064 6c657320 3d3d2066     ethod || self ==
   222a0:	706d2620 7079745f 6c635f65 6d737361      &mp_type_classm
   222b0:	6f687465 00000064                       ethod...

000222b8 <mp_type_staticmethod>:
   222b8:	000220ac 00d10000 00000000 000174dd     . ...........t..
	...

000222f4 <mp_type_classmethod>:
   222f4:	000220ac 00750000 00000000 000174dd     . ....u......t..
	...

00022330 <__func__.6524>:
   22330:	74736e69 65636e61 756f635f 6e5f746e     instance_count_n
   22340:	76697461 61625f65 00736573              ative_bases.

0002234c <__func__.6542>:
   2234c:	6f5f706d 6e5f6a62 695f7765 6174736e     mp_obj_new_insta
   2235c:	0065636e                                nce.

00022360 <__func__.6554>:
   22360:	6f5f706d 635f6a62 7373616c 6f6f6c5f     mp_obj_class_loo
   22370:	0070756b                                kup.

00022374 <__func__.6585>:
   22374:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   22384:	656b616d 77656e5f 00000000              make_new....

00022390 <__func__.6622>:
   22390:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   223a0:	64616f6c 7474615f 00000072              load_attr...

000223ac <__func__.6716>:
   223ac:	65707974 7474615f 00000072              type_attr...

000223b8 <__func__.6765>:
   223b8:	65707573 74615f72 00007274              super_attr..

000223c4 <__func__.6827>:
   223c4:	74617473 635f6369 7373616c 74656d5f     static_class_met
   223d4:	5f646f68 656b616d 77656e5f 00000000     hod_make_new....
   223e4:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   223f4:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   22404:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   22414:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   22424:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   22434:	697a5f65 29292970 00000000 2e2f2e2e     e_zip)))....../.
   22444:	79702f2e 6a626f2f 2e70697a 00000063     ./py/objzip.c...

00022454 <mp_type_zip>:
   22454:	000220ac 00e00000 00000000 00017571     . ..........qu..
	...
   22478:	0000df95 000175e9 00000000 00000000     .....u..........
	...

00022490 <__func__.6161>:
   22490:	5f70697a 72657469 7478656e 00000000     zip_iternext....

000224a0 <mp_op_getitem_obj>:
   224a0:	000209f8 00017695                       .....v..

000224a8 <mp_op_setitem_obj>:
   224a8:	00020a64 000176bd                       d....v..

000224b0 <mp_op_delitem_obj>:
   224b0:	000209f8 000176e9                       .....v..

000224b8 <mp_op_contains_obj>:
   224b8:	000209f8 00017711 656a626f 6e207463     .....w..object n
   224c8:	6920746f 6573206e 6e657571 00006563     ot in sequence..
   224d8:	20646162 65707974 65646f63 00000000     bad typecode....
   224e8:	0079702e 73696874 6d616e5f 20715f65     .py.this_name_q 
   224f8:	4d203d21 424f5f50 554e5f4a 00004c4c     != MP_OBJ_NULL..
   22508:	2e2f2e2e 79702f2e 6975622f 6e69746c     ../../py/builtin
   22518:	6f706d69 632e7472 00000000 6e6e6163     import.c....cann
   22528:	7020746f 6f667265 72206d72 74616c65     ot perform relat
   22538:	20657669 6f706d69 00007472 75646f6d     ive import..modu
   22548:	6e20656c 6620746f 646e756f 00000000     le not found....
   22558:	6e695f5f 5f5f7469 0079702e              __init__.py.

00022564 <mp_builtin___import___obj>:
   22564:	00020ad4 00050002 00018795              ............

00022570 <__func__.6940>:
   22570:	625f706d 746c6975 5f5f6e69 706d695f     mp_builtin___imp
   22580:	5f74726f 0000005f                       ort__...

00022588 <mp_builtin_eval_obj>:
   22588:	00020ad4 00030002 00018dc1              ............

00022594 <mp_builtin_exec_obj>:
   22594:	00020ad4 00030002 00018de1 3d3c2032     ............2 <=
   225a4:	615f6e20 00736772 2e2f2e2e 79702f2e      n_args.../../py
   225b4:	646f6d2f 6c697562 736e6974 0000632e     /modbuiltins.c..

000225c4 <mp_builtin___build_class___obj>:
   225c4:	00020ad4 ffff0004 00018f05              ............

000225d0 <mp_builtin_abs_obj>:
   225d0:	0002098c 00018fbd                       ........

000225d8 <mp_builtin_all_obj>:
   225d8:	0002098c 00018fd9                       ........

000225e0 <mp_builtin_any_obj>:
   225e0:	0002098c 00019029                       ....)...

000225e8 <mp_builtin_bin_obj>:
   225e8:	0002098c 00019071                       ....q...

000225f0 <mp_builtin_callable_obj>:
   225f0:	0002098c 00019099 28726863 72612029     ........chr() ar
   22600:	6f6e2067 6e692074 6e617220 32286567     g not in range(2
   22610:	00293635                                56).

00022614 <mp_builtin_chr_obj>:
   22614:	0002098c 000190c5                       ........

0002261c <mp_builtin_dir_obj>:
   2261c:	00020ad4 00010000 00019109              ............

00022628 <mp_builtin_divmod_obj>:
   22628:	000209f8 000191c1                       ........

00022630 <mp_builtin_hash_obj>:
   22630:	0002098c 000191e1                       ........

00022638 <mp_builtin_hex_obj>:
   22638:	0002098c 000191fd                       ........

00022640 <mp_builtin_iter_obj>:
   22640:	0002098c 00019219                       ........

00022648 <mp_builtin_next_obj>:
   22648:	0002098c 00019235                       ....5...

00022650 <mp_builtin_oct_obj>:
   22650:	0002098c 00019269 2064726f 65707865     ....i...ord expe
   22660:	20737463 68632061 63617261 00726574     cts a character.

00022670 <mp_builtin_ord_obj>:
   22670:	0002098c 00019285 72612d33 6f702067     ........3-arg po
   22680:	20292877 20746f6e 70707573 6574726f     w() not supporte
   22690:	00000064                                d...

00022694 <mp_builtin_pow_obj>:
   22694:	00020ad4 00030004 000192c1              ............

000226a0 <mp_builtin_print_obj>:
   226a0:	00020ad4 ffff0001 00019301 0000000a     ................

000226b0 <mp_builtin___repl_print___obj>:
   226b0:	0002098c 000193b5                       ........

000226b8 <mp_builtin_repr_obj>:
   226b8:	0002098c 000193ed                       ........

000226c0 <mp_builtin_round_obj>:
   226c0:	00020ad4 00020002 0001942d              ........-...

000226cc <mp_builtin_sum_obj>:
   226cc:	00020ad4 00020002 0001948d 7473756d     ............must
   226dc:	65737520 79656b20 64726f77 67726120      use keyword arg
   226ec:	6e656d75 6f662074 656b2072 75662079     ument for key fu
   226fc:	6974636e 00006e6f                       nction..

00022704 <mp_builtin_sorted_obj>:
   22704:	00020ad4 ffff0003 000194e5              ............

00022710 <mp_builtin_getattr_obj>:
   22710:	00020ad4 00030004 00019585              ............

0002271c <mp_builtin_setattr_obj>:
   2271c:	00020a64 000195c5                       d.......

00022724 <mp_builtin_hasattr_obj>:
   22724:	000209f8 000195f1                       ........

0002272c <mp_builtin_globals_obj>:
   2272c:	00020920 0001962d                        ...-...

00022734 <mp_builtin_locals_obj>:
   22734:	00020920 0001963d                        ...=...

0002273c <mp_builtin_id_obj>:
   2273c:	0002098c 0000de01                       ........

00022744 <mp_builtin_len_obj>:
   22744:	0002098c 0000de4d                       ....M...

0002274c <mp_module_builtins_globals_table>:
   2274c:	0000006e 000001c2 00000012 000225c4     n............%..
   2275c:	0000004a 00022564 00000082 000226b0     J...d%.......&..
   2276c:	000001ba 0001fbf8 000001ca 00021b6c     ............l...
   2277c:	000001f2 000200e0 00000262 00020f3c     ........b...<...
   2278c:	000002a6 000211a8 000002ba 00021304     ................
   2279c:	000002ce 000213c4 000002fa 000214e8     ................
   227ac:	00000352 00021b30 0000035e 000221cc     R...0...^....!..
   227bc:	0000036a 00021db4 0000036e 000220ac     j.......n.... ..
   227cc:	00000382 00022454 000001d6 000222f4     ....T$......."..
   227dc:	00000346 000222b8 00000102 00021564     F...."......d...
   227ec:	00000192 000225d0 00000196 000225d8     .....%.......%..
   227fc:	000001a6 000225e0 000001b2 000225e8     .....%.......%..
   2280c:	000001ce 000225f0 000001d2 00022614     .....%.......&..
   2281c:	000001fa 0002261c 000001fe 00022628     .....&......(&..
   2282c:	0000020e 00022588 00000212 00022594     .....%.......%..
   2283c:	00000236 00022710 0000032a 0002271c     6....'..*....'..
   2284c:	0000023a 0002272c 0000023e 00022724     :...,'..>...$'..
   2285c:	00000242 00022630 0000024e 00022638     B...0&..N...8&..
   2286c:	00000252 0002273c 00000272 00022270     R...<'..r...p"..
   2287c:	0000027e 00022268 0000028a 00022640     ~...h"......@&..
   2288c:	000002a2 00022744 000002ae 00022734     ....D'......4'..
   2289c:	000002ca 00022648 000002d2 00022650     ....H&......P&..
   228ac:	000002de 00022670 000002ee 00022694     ....p&.......&..
   228bc:	000002f2 000226a0 00000306 000226b8     .....&.......&..
   228cc:	00000316 000226c0 00000336 00022704     .....&..6....'..
   228dc:	0000035a 000226cc 000000fa 000201e4     Z....&..........
   228ec:	000000ee 0002034c 000000f2 00020400     ....L...........
   228fc:	000000f6 0002043c 000000fe 00020478     ....<.......x...
   2290c:	00000106 000202d4 0000010a 00020298     ................
   2291c:	00000126 000204b4 0000012a 0002070c     &.......*.......
   2292c:	0000012e 0002052c 00000136 0002025c     ....,...6...\...
   2293c:	00000132 00020568 0000013e 000204f0     2...h...>.......
   2294c:	00000146 000205a4 0000014a 000205e0     F.......J.......
   2295c:	00000156 00020694 0000015e 0002061c     V.......^.......
   2296c:	00000166 00020388 00000176 00020658     f.......v...X...
   2297c:	0000017a 00020310 0000017e 000206d0     z.......~.......
   2298c:	00000182 00020220 00000186 00020748     .... .......H...
   2299c:	0000018a 00020784 0000018e 000203c4     ................
   229ac:	000002d6 00022ca4                       .....,..

000229b4 <mp_module_builtins_globals>:
   229b4:	000200e0 0000026f 0000004d 0002274c     ....o...M...L'..

000229c4 <mp_module_builtins>:
   229c4:	00021364 000229b4                       d....)..

000229cc <__func__.6859>:
   229cc:	625f706d 746c6975 5f5f6e69 6975625f     mp_builtin___bui
   229dc:	635f646c 7373616c 00005f5f              ld_class__..

000229e8 <allowed_args.6971>:
   229e8:	020300c9 000000b2 02030081 000000b6     ................

000229f8 <mp_micropython_opt_level_obj>:
   229f8:	00020ad4 00010000 00019665              ........e...

00022a04 <mp_micropython_heap_lock_obj>:
   22a04:	00020920 000196a9                        .......

00022a0c <mp_micropython_heap_unlock_obj>:
   22a0c:	00020920 000196bd                        .......

00022a14 <mp_alloc_emergency_exception_buf_obj>:
   22a14:	0002098c 0000f219                       ........

00022a1c <mp_micropython_kbd_intr_obj>:
   22a1c:	0002098c 000196d1                       ........

00022a24 <mp_module_micropython_globals_table>:
   22a24:	0000006e 000002be 000001e6 0001fba0     n...............
   22a34:	000002da 000229f8 0000019a 00022a14     .....).......*..
   22a44:	00000246 00022a04 0000024a 00022a0c     F....*..J....*..
   22a54:	00000296 00022a1c                       .....*..

00022a5c <mp_module_micropython_globals>:
   22a5c:	000200e0 0000003f 00000007 00022a24     ....?.......$*..

00022a6c <mp_module_micropython>:
   22a6c:	00021364 00022a5c                       d...\*..

00022a74 <__func__.6723>:
   22a74:	655f706d 75636578 625f6574 63657479     mp_execute_bytec
   22a84:	0065646f 61636f6c 6176206c 62616972     ode.local variab
   22a94:	7220656c 72656665 65636e65 65622064     le referenced be
   22aa4:	65726f66 73736120 6d6e6769 00746e65     fore assignment.
   22ab4:	6f5f706d 695f6a62 78655f73 74706563     mp_obj_is_except
   22ac4:	5f6e6f69 74736e69 65636e61 504f5428     ion_instance(TOP
   22ad4:	00292928 2e2f2e2e 79702f2e 2e6d762f     ()).../../py/vm.
   22ae4:	00000063 5f637865 3e207073 7865203d     c...exc_sp >= ex
   22af4:	74735f63 006b6361 72727563 6c746e65     c_stack.currentl
   22b04:	6e695f79 6378655f 5f747065 636f6c62     y_in_except_bloc
   22b14:	0000006b 5f637865 3d207073 7865203d     k...exc_sp == ex
   22b24:	74735f63 206b6361 0031202d 5f746572     c_stack - 1.ret_
   22b34:	646e696b 203d3d20 565f504d 45525f4d     kind == MP_VM_RE
   22b44:	4e525554 4358455f 49545045 00004e4f     TURN_EXCEPTION..
   22b54:	65747962 646f6320 6f6e2065 6d692074     byte code not im
   22b64:	6d656c70 65746e65 00000064 61206f6e     plemented...no a
   22b74:	76697463 78652065 74706563 206e6f69     ctive exception 
   22b84:	72206f74 69617265 00006573 636e7566     to reraise..func
   22b94:	6e6f6974 746f6720 6c756d20 6c706974     tion got multipl
   22ba4:	61762065 7365756c 726f6620 67726120     e values for arg
   22bb4:	6e656d75 25272074 00002771 78656e75     ument '%q'..unex
   22bc4:	74636570 6b206465 6f777965 61206472     pected keyword a
   22bd4:	6d756772 00746e65 636e7566 6e6f6974     rgument.function
   22be4:	73696d20 676e6973 71657220 65726975      missing require
   22bf4:	6f702064 69746973 6c616e6f 67726120     d positional arg
   22c04:	6e656d75 25232074 00000064 636e7566     ument #%d...func
   22c14:	6e6f6974 73696d20 676e6973 71657220     tion missing req
   22c24:	65726975 656b2064 726f7779 72612064     uired keyword ar
   22c34:	656d7567 2720746e 00277125 636e7566     gument '%q'.func
   22c44:	6e6f6974 73696d20 676e6973 79656b20     tion missing key
   22c54:	64726f77 6c6e6f2d 72612079 656d7567     word-only argume
   22c64:	0000746e 00006669 6c696877 00000065     nt..if..while...
   22c74:	00726f66 00797274 68746977 00000000     for.try.with....
   22c84:	00666564 73616c63 00000073 00000020     def.class... ...
   22c94:	0073250a 0000000a                       .%s.....

00022c9c <import_str.6106>:
   22c9c:	6f706d69 00207472                       import .

00022ca4 <mp_builtin_open_obj>:
   22ca4:	00020ad4 ffff0003 0001b365 65737341     ........e...Asse
   22cb4:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   22cc4:	61202c64 69662074 2520656c 64253a73     d, at file %s:%d
   22cd4:	0000000a 65737341 6f697472 6166206e     ....Assertion fa
   22ce4:	64656c69 00000000 0000000d 00000004     iled............
   22cf4:	6b6f6f74 20752520 000a736d 72747371     took %u ms..qstr
   22d04:	20200a3a 6f705f6e 253d6c6f 20200a75     :.  n_pool=%u.  
   22d14:	73715f6e 253d7274 20200a75 74735f6e     n_qstr=%u.  n_st
   22d24:	61645f72 625f6174 73657479 0a75253d     r_data_bytes=%u.
   22d34:	5f6e2020 61746f74 79625f6c 3d736574       n_total_bytes=
   22d44:	000a7525 20776172 4c504552 5443203b     %u..raw REPL; CT
   22d54:	422d4c52 206f7420 74697865 00000a0d     RL-B to exit....
   22d64:	0000003e 00000a0d 00004b4f 7263694d     >.......OK..Micr
   22d74:	7479506f 206e6f68 392e3176 342d342e     oPython v1.9.4-4
   22d84:	672d3234 35336130 62323261 69642d33     42-g0a35a22b3-di
   22d94:	20797472 32206e6f 2d383130 322d3031     rty on 2018-10-2
   22da4:	54203b32 3143344d 58473332 6977204c     2; TM4C123GXL wi
   22db4:	20206874 43344d54 47333231 4d503648     th  TM4C123GH6PM
   22dc4:	00000a0d 203e3e3e 00000000 61700a0d     ....>>> ......pa
   22dd4:	20657473 65646f6d 7443203b 432d6c72     ste mode; Ctrl-C
   22de4:	206f7420 636e6163 202c6c65 6c727443      to cancel, Ctrl
   22df4:	7420442d 6966206f 6873696e 3d3d0a0d     -D to finish..==
   22e04:	0000203d 3d3d0a0d 0000203d 202e2e2e     = ....=== ..... 
   22e14:	00000000 6c756f63 6f6e2064 69662074     ....could not fi
   22e24:	6d20646e 6c75646f 25272065 000a2773     nd module '%s'..

00022e34 <pyb_set_repl_info_obj>:
   22e34:	0002098c 0001bce5 08080808 00000000     ................
   22e44:	75255b1b 00000000 004b5b1b 00000a0d     .[%u.....[K.....
   22e54:	72660dfe 6e657a6f 74736574 0079702e     ..frozentest.py.
   22e64:	507503f9 00000079 006901cc              ..uPy.....i.

00022e70 <mp_qstr_frozen_const_pool>:
   22e70:	0001d42c 000000e1 00000003 00000003     ,...............
   22e80:	00022e54 00022e64 00022e6c              T...d...l...

00022e8c <bytecode_data_frozentest__lt_module_gt_>:
   22e8c:	00000003 2f0d0000 2a00e100 2b282828     ......./...*(((+
   22e9c:	ff000028 1600bc1b 016400e2 00bc1b32     (.........d.2...
   22eac:	01640017 00bc1b32 01640117 00bc1b32     ..d.2.....d.2...
   22ebc:	01640217 00bc1b32 9aefba14 32016415     ..d.2........d.2
   22ecc:	800f3580 00e32430 1b00bc1b 016400e3     .5..0$........d.
   22edc:	30e58132 eb36d784 5b11327f 6f6c2061     2..0..6..2.[a lo
   22eec:	7320676e 6e697274 68742067 69207461     ng string that i
   22efc:	6f6e2073 6e692074 6e726574 00006465     s not interned..

00022f0c <const_obj_frozentest__lt_module_gt__0>:
   22f0c:	00021b30 000000f6 00000022 00022ee8     0.......".......
   22f1c:	74732061 676e6972 61687420 61682074     a string that ha
   22f2c:	6e752073 646f6369 b1ce2065 b3ceb2ce     s unicode ......
   22f3c:	61686320 00007372                        chars..

00022f44 <const_obj_frozentest__lt_module_gt__1>:
   22f44:	00021b30 000000c8 00000026 00022f1c     0.......&..../..
   22f54:	65747962 32312073 00013433              bytes 1234..

00022f60 <const_obj_frozentest__lt_module_gt__2>:
   22f60:	00021b6c 00000039 0000000b 00022f54     l...9.......T/..

00022f70 <const_table_data_frozentest__lt_module_gt_>:
   22f70:	00022f0c 00022f44 00022f60              ./..D/..`/..

00022f7c <raw_code_frozentest__lt_module_gt_>:
   22f7c:	00000002 00022e8c 00022f70 00000000     ........p/......

00022f8c <mp_frozen_mpy_names>:
   22f8c:	7a6f7266 65746e65 702e7473 00000079     frozentest.py...

00022f9c <mp_frozen_mpy_content>:
   22f9c:	00022f7c                                |/..
