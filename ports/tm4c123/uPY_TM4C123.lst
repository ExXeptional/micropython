
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_text>:
       0:	20001218 	.word	0x20001218
       4:	0001b37d 	.word	0x0001b37d
       8:	0001b3e1 	.word	0x0001b3e1
       c:	0001b3e7 	.word	0x0001b3e7
      10:	0001b3ed 	.word	0x0001b3ed
      14:	0001b3ed 	.word	0x0001b3ed
      18:	0001b3ed 	.word	0x0001b3ed
	...
      2c:	0001b3ed 	.word	0x0001b3ed
      30:	0001b3ed 	.word	0x0001b3ed
      34:	00000000 	.word	0x00000000
      38:	0001b3ed 	.word	0x0001b3ed
      3c:	0001b3ed 	.word	0x0001b3ed
      40:	0001b3ed 	.word	0x0001b3ed
      44:	0001b3ed 	.word	0x0001b3ed
      48:	0001b3ed 	.word	0x0001b3ed
      4c:	0001b3ed 	.word	0x0001b3ed
      50:	0001b3ed 	.word	0x0001b3ed
      54:	0001b3ed 	.word	0x0001b3ed
      58:	0001b3ed 	.word	0x0001b3ed
      5c:	0001b3ed 	.word	0x0001b3ed
      60:	0001b3ed 	.word	0x0001b3ed
      64:	0001b3ed 	.word	0x0001b3ed
      68:	0001b3ed 	.word	0x0001b3ed
      6c:	0001b3ed 	.word	0x0001b3ed
      70:	0001b3ed 	.word	0x0001b3ed
      74:	0001b3ed 	.word	0x0001b3ed
      78:	0001b3ed 	.word	0x0001b3ed
      7c:	0001b3ed 	.word	0x0001b3ed
      80:	0001b3ed 	.word	0x0001b3ed
      84:	0001b3ed 	.word	0x0001b3ed
      88:	0001b3ed 	.word	0x0001b3ed
      8c:	0001b3ed 	.word	0x0001b3ed
      90:	0001b3ed 	.word	0x0001b3ed
      94:	0001b3ed 	.word	0x0001b3ed
      98:	0001b3ed 	.word	0x0001b3ed
      9c:	0001b3ed 	.word	0x0001b3ed
      a0:	0001b3ed 	.word	0x0001b3ed
      a4:	0001b3ed 	.word	0x0001b3ed
      a8:	0001b3ed 	.word	0x0001b3ed
      ac:	0001b3ed 	.word	0x0001b3ed
      b0:	0001b3ed 	.word	0x0001b3ed
      b4:	0001b3ed 	.word	0x0001b3ed
      b8:	0001b3ed 	.word	0x0001b3ed
      bc:	0001b3ed 	.word	0x0001b3ed
      c0:	0001b3ed 	.word	0x0001b3ed
      c4:	0001b3ed 	.word	0x0001b3ed
      c8:	0001b3ed 	.word	0x0001b3ed
      cc:	0001b3ed 	.word	0x0001b3ed
      d0:	0001b3ed 	.word	0x0001b3ed
      d4:	0001b3ed 	.word	0x0001b3ed
      d8:	0001b3ed 	.word	0x0001b3ed
      dc:	0001b3ed 	.word	0x0001b3ed
      e0:	0001b3ed 	.word	0x0001b3ed
	...
      ec:	0001b3ed 	.word	0x0001b3ed
      f0:	0001b3ed 	.word	0x0001b3ed
      f4:	0001b3ed 	.word	0x0001b3ed
      f8:	0001b3ed 	.word	0x0001b3ed
      fc:	0001b3ed 	.word	0x0001b3ed
     100:	0001b3ed 	.word	0x0001b3ed
     104:	0001b3ed 	.word	0x0001b3ed
     108:	0001b3ed 	.word	0x0001b3ed
     10c:	0001b3ed 	.word	0x0001b3ed
	...
     118:	0001b3ed 	.word	0x0001b3ed
     11c:	0001b3ed 	.word	0x0001b3ed
     120:	0001b3ed 	.word	0x0001b3ed
     124:	0001b3ed 	.word	0x0001b3ed
     128:	0001b3ed 	.word	0x0001b3ed
     12c:	0001b3ed 	.word	0x0001b3ed
     130:	0001b3ed 	.word	0x0001b3ed
     134:	0001b3ed 	.word	0x0001b3ed
     138:	0001b3ed 	.word	0x0001b3ed
     13c:	0001b3ed 	.word	0x0001b3ed
	...
     150:	0001b3ed 	.word	0x0001b3ed
     154:	0001b3ed 	.word	0x0001b3ed
     158:	0001b3ed 	.word	0x0001b3ed
     15c:	0001b3ed 	.word	0x0001b3ed
	...
     1b0:	0001b3ed 	.word	0x0001b3ed
     1b4:	0001b3ed 	.word	0x0001b3ed
     1b8:	0001b3ed 	.word	0x0001b3ed
     1bc:	0001b3ed 	.word	0x0001b3ed
     1c0:	0001b3ed 	.word	0x0001b3ed
     1c4:	0001b3ed 	.word	0x0001b3ed
     1c8:	0001b3ed 	.word	0x0001b3ed
     1cc:	0001b3ed 	.word	0x0001b3ed
     1d0:	0001b3ed 	.word	0x0001b3ed
     1d4:	0001b3ed 	.word	0x0001b3ed
     1d8:	0001b3ed 	.word	0x0001b3ed
     1dc:	0001b3ed 	.word	0x0001b3ed
     1e0:	0001b3ed 	.word	0x0001b3ed
     1e4:	0001b3ed 	.word	0x0001b3ed
     1e8:	0001b3ed 	.word	0x0001b3ed
	...
     1f4:	0001b3ed 	.word	0x0001b3ed
     1f8:	0001b3ed 	.word	0x0001b3ed
     1fc:	0001b3ed 	.word	0x0001b3ed
     200:	0001b3ed 	.word	0x0001b3ed
     204:	0001b3ed 	.word	0x0001b3ed
	...
     210:	0001b3ed 	.word	0x0001b3ed
     214:	0001b3ed 	.word	0x0001b3ed
     218:	0001b3ed 	.word	0x0001b3ed
     21c:	0001b3ed 	.word	0x0001b3ed
     220:	0001b3ed 	.word	0x0001b3ed
     224:	0001b3ed 	.word	0x0001b3ed
     228:	0001b3ed 	.word	0x0001b3ed
     22c:	0001b3ed 	.word	0x0001b3ed
     230:	0001b3ed 	.word	0x0001b3ed
     234:	0001b3ed 	.word	0x0001b3ed
     238:	0001b3ed 	.word	0x0001b3ed
     23c:	0001b3ed 	.word	0x0001b3ed
     240:	0001b3ed 	.word	0x0001b3ed
     244:	0001b3ed 	.word	0x0001b3ed
     248:	0001b3ed 	.word	0x0001b3ed
     24c:	0001b3ed 	.word	0x0001b3ed
     250:	0001b3ed 	.word	0x0001b3ed
     254:	0001b3ed 	.word	0x0001b3ed
     258:	0001b3ed 	.word	0x0001b3ed
     25c:	0001b3ed 	.word	0x0001b3ed
     260:	0001b3ed 	.word	0x0001b3ed
     264:	0001b3ed 	.word	0x0001b3ed
     268:	0001b3ed 	.word	0x0001b3ed

0000026c <nlr_push_tail>:
// LTO can't see inside inline asm functions so explicitly mark nlr_push_tail as used
__attribute__((used)) unsigned int nlr_push_tail(nlr_buf_t *nlr);
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
     26c:	b480      	push	{r7}
     26e:	b085      	sub	sp, #20
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <nlr_push_tail+0x28>)
     276:	60fb      	str	r3, [r7, #12]
    nlr->prev = *top;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	601a      	str	r2, [r3, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	687a      	ldr	r2, [r7, #4]
     284:	601a      	str	r2, [r3, #0]
    return 0; // normal return
     286:	2300      	movs	r3, #0
}
     288:	4618      	mov	r0, r3
     28a:	3714      	adds	r7, #20
     28c:	46bd      	mov	sp, r7
     28e:	f85d 7b04 	ldr.w	r7, [sp], #4
     292:	4770      	bx	lr
     294:	2000124c 	.word	0x2000124c

00000298 <nlr_pop>:

void nlr_pop(void) {
     298:	b480      	push	{r7}
     29a:	b083      	sub	sp, #12
     29c:	af00      	add	r7, sp, #0
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <nlr_pop+0x20>)
     2a0:	607b      	str	r3, [r7, #4]
    *top = (*top)->prev;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	601a      	str	r2, [r3, #0]
}
     2ac:	bf00      	nop
     2ae:	370c      	adds	r7, #12
     2b0:	46bd      	mov	sp, r7
     2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2b6:	4770      	bx	lr
     2b8:	2000124c 	.word	0x2000124c

000002bc <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     2bc:	60c4      	str	r4, [r0, #12]
     2be:	6105      	str	r5, [r0, #16]
     2c0:	6146      	str	r6, [r0, #20]
     2c2:	6187      	str	r7, [r0, #24]
     2c4:	f8c0 801c 	str.w	r8, [r0, #28]
     2c8:	f8c0 9020 	str.w	r9, [r0, #32]
     2cc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     2d0:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     2d4:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     2d8:	f8c0 e008 	str.w	lr, [r0, #8]
     2dc:	f7ff bfc6 	b.w	26c <nlr_push_tail>

000002e0 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     2e0:	4a0d      	ldr	r2, [pc, #52]	; (318 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     2e2:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     2e4:	68d3      	ldr	r3, [r2, #12]
     2e6:	b90b      	cbnz	r3, 2ec <nlr_jump+0xc>
     2e8:	f01a ff72 	bl	1b1d0 <nlr_jump_fail>
     2ec:	6819      	ldr	r1, [r3, #0]
     2ee:	6058      	str	r0, [r3, #4]
     2f0:	60d1      	str	r1, [r2, #12]

    __asm volatile (
     2f2:	4618      	mov	r0, r3
     2f4:	68c4      	ldr	r4, [r0, #12]
     2f6:	6905      	ldr	r5, [r0, #16]
     2f8:	6946      	ldr	r6, [r0, #20]
     2fa:	6987      	ldr	r7, [r0, #24]
     2fc:	f8d0 801c 	ldr.w	r8, [r0, #28]
     300:	f8d0 9020 	ldr.w	r9, [r0, #32]
     304:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     308:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     30c:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     310:	f8d0 e008 	ldr.w	lr, [r0, #8]
     314:	2001      	movs	r0, #1
     316:	4770      	bx	lr
     318:	20001240 	.word	0x20001240

0000031c <m_malloc>:
    }
}

#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     324:	2100      	movs	r1, #0
     326:	6878      	ldr	r0, [r7, #4]
     328:	f000 fac0 	bl	8ac <gc_alloc>
     32c:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	2b00      	cmp	r3, #0
     332:	d105      	bne.n	340 <m_malloc+0x24>
     334:	687b      	ldr	r3, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d002      	beq.n	340 <m_malloc+0x24>
        m_malloc_fail(num_bytes);
     33a:	6878      	ldr	r0, [r7, #4]
     33c:	f00c fd80 	bl	ce40 <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     340:	68fb      	ldr	r3, [r7, #12]
}
     342:	4618      	mov	r0, r3
     344:	3710      	adds	r7, #16
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}

0000034a <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     34a:	b580      	push	{r7, lr}
     34c:	b084      	sub	sp, #16
     34e:	af00      	add	r7, sp, #0
     350:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     352:	2100      	movs	r1, #0
     354:	6878      	ldr	r0, [r7, #4]
     356:	f000 faa9 	bl	8ac <gc_alloc>
     35a:	60f8      	str	r0, [r7, #12]
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     35c:	68fb      	ldr	r3, [r7, #12]
}
     35e:	4618      	mov	r0, r3
     360:	3710      	adds	r7, #16
     362:	46bd      	mov	sp, r7
     364:	bd80      	pop	{r7, pc}

00000366 <m_malloc0>:
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
#endif

void *m_malloc0(size_t num_bytes) {
     366:	b580      	push	{r7, lr}
     368:	b084      	sub	sp, #16
     36a:	af00      	add	r7, sp, #0
     36c:	6078      	str	r0, [r7, #4]
    void *ptr = m_malloc(num_bytes);
     36e:	6878      	ldr	r0, [r7, #4]
     370:	f7ff ffd4 	bl	31c <m_malloc>
     374:	60f8      	str	r0, [r7, #12]
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
     376:	68fb      	ldr	r3, [r7, #12]
}
     378:	4618      	mov	r0, r3
     37a:	3710      	adds	r7, #16
     37c:	46bd      	mov	sp, r7
     37e:	bd80      	pop	{r7, pc}

00000380 <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     380:	b580      	push	{r7, lr}
     382:	b084      	sub	sp, #16
     384:	af00      	add	r7, sp, #0
     386:	6078      	str	r0, [r7, #4]
     388:	6039      	str	r1, [r7, #0]
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     38a:	2201      	movs	r2, #1
     38c:	6839      	ldr	r1, [r7, #0]
     38e:	6878      	ldr	r0, [r7, #4]
     390:	f000 fb6c 	bl	a6c <gc_realloc>
     394:	60f8      	str	r0, [r7, #12]
    if (new_ptr == NULL && new_num_bytes != 0) {
     396:	68fb      	ldr	r3, [r7, #12]
     398:	2b00      	cmp	r3, #0
     39a:	d105      	bne.n	3a8 <m_realloc+0x28>
     39c:	683b      	ldr	r3, [r7, #0]
     39e:	2b00      	cmp	r3, #0
     3a0:	d002      	beq.n	3a8 <m_realloc+0x28>
        m_malloc_fail(new_num_bytes);
     3a2:	6838      	ldr	r0, [r7, #0]
     3a4:	f00c fd4c 	bl	ce40 <m_malloc_fail>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3a8:	68fb      	ldr	r3, [r7, #12]
}
     3aa:	4618      	mov	r0, r3
     3ac:	3710      	adds	r7, #16
     3ae:	46bd      	mov	sp, r7
     3b0:	bd80      	pop	{r7, pc}

000003b2 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     3b2:	b580      	push	{r7, lr}
     3b4:	b086      	sub	sp, #24
     3b6:	af00      	add	r7, sp, #0
     3b8:	60f8      	str	r0, [r7, #12]
     3ba:	60b9      	str	r1, [r7, #8]
     3bc:	4613      	mov	r3, r2
     3be:	71fb      	strb	r3, [r7, #7]
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     3c0:	79fb      	ldrb	r3, [r7, #7]
     3c2:	461a      	mov	r2, r3
     3c4:	68b9      	ldr	r1, [r7, #8]
     3c6:	68f8      	ldr	r0, [r7, #12]
     3c8:	f000 fb50 	bl	a6c <gc_realloc>
     3cc:	6178      	str	r0, [r7, #20]
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3ce:	697b      	ldr	r3, [r7, #20]
}
     3d0:	4618      	mov	r0, r3
     3d2:	3718      	adds	r7, #24
     3d4:	46bd      	mov	sp, r7
     3d6:	bd80      	pop	{r7, pc}

000003d8 <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     3d8:	b580      	push	{r7, lr}
     3da:	b082      	sub	sp, #8
     3dc:	af00      	add	r7, sp, #0
     3de:	6078      	str	r0, [r7, #4]
#endif
    free(ptr);
     3e0:	6878      	ldr	r0, [r7, #4]
     3e2:	f000 fb03 	bl	9ec <gc_free>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
    #endif
}
     3e6:	bf00      	nop
     3e8:	3708      	adds	r7, #8
     3ea:	46bd      	mov	sp, r7
     3ec:	bd80      	pop	{r7, pc}
	...

000003f0 <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3f4:	4c2a      	ldr	r4, [pc, #168]	; (4a0 <gc_mark_subtree+0xb0>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     3f6:	2500      	movs	r5, #0
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
                    // an unmarked head, mark it, and push it on gc stack
                    TRACE_MARK(childblock, ptr);
                    ATB_HEAD_TO_MARK(childblock);
     3f8:	f04f 0903 	mov.w	r9, #3
     3fc:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
        size_t n_blocks = 0;
     400:	2100      	movs	r1, #0
            n_blocks += 1;
     402:	3101      	adds	r1, #1
     404:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     406:	089a      	lsrs	r2, r3, #2
     408:	f003 0303 	and.w	r3, r3, #3
     40c:	5cba      	ldrb	r2, [r7, r2]
     40e:	005b      	lsls	r3, r3, #1
     410:	fa42 f303 	asr.w	r3, r2, r3
     414:	f003 0303 	and.w	r3, r3, #3
     418:	2b02      	cmp	r3, #2
     41a:	d0f2      	beq.n	402 <gc_mark_subtree+0x12>
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     41c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     420:	0109      	lsls	r1, r1, #4
     422:	088a      	lsrs	r2, r1, #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     424:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     428:	b309      	cbz	r1, 46e <gc_mark_subtree+0x7e>
     42a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
            void *ptr = *ptrs;
     42e:	f850 3b04 	ldr.w	r3, [r0], #4
            if (VERIFY_PTR(ptr)) {
     432:	071a      	lsls	r2, r3, #28
     434:	d119      	bne.n	46a <gc_mark_subtree+0x7a>
     436:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
     43a:	4293      	cmp	r3, r2
     43c:	d315      	bcc.n	46a <gc_mark_subtree+0x7a>
                size_t childblock = BLOCK_FROM_PTR(ptr);
     43e:	1a9a      	subs	r2, r3, r2
            if (VERIFY_PTR(ptr)) {
     440:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     444:	ea4f 1e92 	mov.w	lr, r2, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     448:	0912      	lsrs	r2, r2, #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     44a:	f002 0703 	and.w	r7, r2, #3
            if (VERIFY_PTR(ptr)) {
     44e:	42b3      	cmp	r3, r6
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     450:	ea4f 0747 	mov.w	r7, r7, lsl #1
            if (VERIFY_PTR(ptr)) {
     454:	d209      	bcs.n	46a <gc_mark_subtree+0x7a>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     456:	f8d4 c0b4 	ldr.w	ip, [r4, #180]	; 0xb4
     45a:	f81c 800e 	ldrb.w	r8, [ip, lr]
     45e:	fa48 f307 	asr.w	r3, r8, r7
     462:	f003 0303 	and.w	r3, r3, #3
     466:	2b01      	cmp	r3, #1
     468:	d008      	beq.n	47c <gc_mark_subtree+0x8c>
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     46a:	4281      	cmp	r1, r0
     46c:	d1df      	bne.n	42e <gc_mark_subtree+0x3e>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     46e:	b1ad      	cbz	r5, 49c <gc_mark_subtree+0xac>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     470:	3d01      	subs	r5, #1
     472:	eb04 0385 	add.w	r3, r4, r5, lsl #2
     476:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
    for (;;) {
     47a:	e7bf      	b.n	3fc <gc_mark_subtree+0xc>
                    ATB_HEAD_TO_MARK(childblock);
     47c:	fa09 f707 	lsl.w	r7, r9, r7
     480:	ea47 0708 	orr.w	r7, r7, r8
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     484:	eb04 0885 	add.w	r8, r4, r5, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     488:	2d3f      	cmp	r5, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     48a:	f80c 700e 	strb.w	r7, [ip, lr]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     48e:	bf9a      	itte	ls
     490:	3501      	addls	r5, #1
     492:	f8c8 20c8 	strls.w	r2, [r8, #200]	; 0xc8
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     496:	f8c4 30c4 	strhi.w	r3, [r4, #196]	; 0xc4
     49a:	e7e6      	b.n	46a <gc_mark_subtree+0x7a>
     49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4a0:	20001240 	.word	0x20001240

000004a4 <gc_free.part.0>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (ptr == NULL) {
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     4a6:	0703      	lsls	r3, r0, #28
     4a8:	d134      	bne.n	514 <gc_free.part.0+0x70>
     4aa:	4e21      	ldr	r6, [pc, #132]	; (530 <gc_free.part.0+0x8c>)
     4ac:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
     4b0:	4298      	cmp	r0, r3
     4b2:	d32f      	bcc.n	514 <gc_free.part.0+0x70>
     4b4:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
     4b8:	4290      	cmp	r0, r2
     4ba:	d22b      	bcs.n	514 <gc_free.part.0+0x70>
        size_t block = BLOCK_FROM_PTR(ptr);
     4bc:	1ac0      	subs	r0, r0, r3
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4be:	0981      	lsrs	r1, r0, #6
     4c0:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
        size_t block = BLOCK_FROM_PTR(ptr);
     4c4:	0900      	lsrs	r0, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4c6:	f000 0303 	and.w	r3, r0, #3
     4ca:	5c7a      	ldrb	r2, [r7, r1]
     4cc:	005c      	lsls	r4, r3, #1
     4ce:	4122      	asrs	r2, r4
     4d0:	f002 0203 	and.w	r2, r2, #3
     4d4:	2a01      	cmp	r2, #1
     4d6:	d124      	bne.n	522 <gc_free.part.0+0x7e>
        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     4d8:	f8d6 21cc 	ldr.w	r2, [r6, #460]	; 0x1cc
     4dc:	4291      	cmp	r1, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     4de:	bf38      	it	cc
     4e0:	f8c6 11cc 	strcc.w	r1, [r6, #460]	; 0x1cc
     4e4:	5c79      	ldrb	r1, [r7, r1]
     4e6:	0884      	lsrs	r4, r0, #2
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     4e8:	2503      	movs	r5, #3
     4ea:	005b      	lsls	r3, r3, #1
     4ec:	fa05 f303 	lsl.w	r3, r5, r3
     4f0:	ea21 0103 	bic.w	r1, r1, r3
     4f4:	5539      	strb	r1, [r7, r4]
            block += 1;
     4f6:	3001      	adds	r0, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     4f8:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
     4fc:	0884      	lsrs	r4, r0, #2
     4fe:	f000 0303 	and.w	r3, r0, #3
     502:	5d39      	ldrb	r1, [r7, r4]
     504:	005a      	lsls	r2, r3, #1
     506:	fa41 f202 	asr.w	r2, r1, r2
     50a:	f002 0203 	and.w	r2, r2, #3
     50e:	2a02      	cmp	r2, #2
     510:	d0eb      	beq.n	4ea <gc_free.part.0+0x46>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif
    }
}
     512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     514:	4b07      	ldr	r3, [pc, #28]	; (534 <gc_free.part.0+0x90>)
     516:	4a08      	ldr	r2, [pc, #32]	; (538 <gc_free.part.0+0x94>)
     518:	4808      	ldr	r0, [pc, #32]	; (53c <gc_free.part.0+0x98>)
     51a:	f240 2147 	movw	r1, #583	; 0x247
     51e:	f01a fe61 	bl	1b1e4 <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     522:	4b07      	ldr	r3, [pc, #28]	; (540 <gc_free.part.0+0x9c>)
     524:	4a04      	ldr	r2, [pc, #16]	; (538 <gc_free.part.0+0x94>)
     526:	4805      	ldr	r0, [pc, #20]	; (53c <gc_free.part.0+0x98>)
     528:	f240 2149 	movw	r1, #585	; 0x249
     52c:	f01a fe5a 	bl	1b1e4 <__assert_func>
     530:	20001240 	.word	0x20001240
     534:	0001d6b4 	.word	0x0001d6b4
     538:	0001d6a0 	.word	0x0001d6a0
     53c:	0001d6c4 	.word	0x0001d6c4
     540:	0001d6d4 	.word	0x0001d6d4

00000544 <gc_init>:
void gc_init(void *start, void *end) {
     544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     546:	4a0f      	ldr	r2, [pc, #60]	; (584 <gc_init+0x40>)
     548:	4c0f      	ldr	r4, [pc, #60]	; (588 <gc_init+0x44>)
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     54a:	f021 050f 	bic.w	r5, r1, #15
    size_t total_byte_len = (byte*)end - (byte*)start;
     54e:	1a2b      	subs	r3, r5, r0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     550:	fba2 2303 	umull	r2, r3, r2, r3
     554:	099b      	lsrs	r3, r3, #6
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     556:	eba5 1783 	sub.w	r7, r5, r3, lsl #6
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     55a:	461a      	mov	r2, r3
     55c:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     55e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     562:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    MP_STATE_MEM(gc_pool_end) = end;
     566:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     56a:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     56e:	f01c f891 	bl	1c694 <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     572:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth) = 0;
     574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     578:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
    MP_STATE_MEM(gc_lock_depth) = 0;
     57c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
     580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     582:	bf00      	nop
     584:	fc0fc0fd 	.word	0xfc0fc0fd
     588:	20001240 	.word	0x20001240

0000058c <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     58c:	4a03      	ldr	r2, [pc, #12]	; (59c <gc_lock+0x10>)
     58e:	f8b2 31c8 	ldrh.w	r3, [r2, #456]	; 0x1c8
     592:	3301      	adds	r3, #1
     594:	f8a2 31c8 	strh.w	r3, [r2, #456]	; 0x1c8
     598:	4770      	bx	lr
     59a:	bf00      	nop
     59c:	20001240 	.word	0x20001240

000005a0 <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     5a0:	4a03      	ldr	r2, [pc, #12]	; (5b0 <gc_unlock+0x10>)
     5a2:	f8b2 31c8 	ldrh.w	r3, [r2, #456]	; 0x1c8
     5a6:	3b01      	subs	r3, #1
     5a8:	f8a2 31c8 	strh.w	r3, [r2, #456]	; 0x1c8
     5ac:	4770      	bx	lr
     5ae:	bf00      	nop
     5b0:	20001240 	.word	0x20001240

000005b4 <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     5b4:	4b03      	ldr	r3, [pc, #12]	; (5c4 <gc_is_locked+0x10>)
     5b6:	f8b3 01c8 	ldrh.w	r0, [r3, #456]	; 0x1c8
}
     5ba:	3000      	adds	r0, #0
     5bc:	bf18      	it	ne
     5be:	2001      	movne	r0, #1
     5c0:	4770      	bx	lr
     5c2:	bf00      	nop
     5c4:	20001240 	.word	0x20001240

000005c8 <gc_collect_start>:
void gc_collect_start(void) {
     5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_lock_depth)++;
     5ca:	4b1c      	ldr	r3, [pc, #112]	; (63c <gc_collect_start+0x74>)
     5cc:	f8b3 21c8 	ldrh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5d0:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     5d2:	3201      	adds	r2, #1
     5d4:	461d      	mov	r5, r3
     5d6:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5da:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
     5de:	461c      	mov	r4, r3
     5e0:	f103 06a0 	add.w	r6, r3, #160	; 0xa0
                ATB_HEAD_TO_MARK(block);
     5e4:	2703      	movs	r7, #3
        void *ptr = ptrs[i];
     5e6:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     5ea:	071a      	lsls	r2, r3, #28
     5ec:	d119      	bne.n	622 <gc_collect_start+0x5a>
     5ee:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
     5f2:	4283      	cmp	r3, r0
     5f4:	d315      	bcc.n	622 <gc_collect_start+0x5a>
            size_t block = BLOCK_FROM_PTR(ptr);
     5f6:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     5f8:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
            if (ATB_GET_KIND(block) == AT_HEAD) {
     5fc:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     600:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     602:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     606:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     608:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     60c:	d209      	bcs.n	622 <gc_collect_start+0x5a>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     60e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
     612:	f811 c00e 	ldrb.w	ip, [r1, lr]
     616:	fa4c f302 	asr.w	r3, ip, r2
     61a:	f003 0303 	and.w	r3, r3, #3
     61e:	2b01      	cmp	r3, #1
     620:	d002      	beq.n	628 <gc_collect_start+0x60>
    for (size_t i = 0; i < len; i++) {
     622:	42a6      	cmp	r6, r4
     624:	d1df      	bne.n	5e6 <gc_collect_start+0x1e>
}
     626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                ATB_HEAD_TO_MARK(block);
     628:	fa07 f202 	lsl.w	r2, r7, r2
     62c:	ea42 030c 	orr.w	r3, r2, ip
     630:	f801 300e 	strb.w	r3, [r1, lr]
                gc_mark_subtree(block);
     634:	f7ff fedc 	bl	3f0 <gc_mark_subtree>
     638:	e7f3      	b.n	622 <gc_collect_start+0x5a>
     63a:	bf00      	nop
     63c:	20001240 	.word	0x20001240

00000640 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     640:	b3a1      	cbz	r1, 6ac <gc_collect_root+0x6c>
void gc_collect_root(void **ptrs, size_t len) {
     642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (VERIFY_PTR(ptr)) {
     646:	4f1a      	ldr	r7, [pc, #104]	; (6b0 <gc_collect_root+0x70>)
     648:	460e      	mov	r6, r1
     64a:	1f05      	subs	r5, r0, #4
    for (size_t i = 0; i < len; i++) {
     64c:	2400      	movs	r4, #0
                ATB_HEAD_TO_MARK(block);
     64e:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     652:	f855 3f04 	ldr.w	r3, [r5, #4]!
        if (VERIFY_PTR(ptr)) {
     656:	071a      	lsls	r2, r3, #28
    for (size_t i = 0; i < len; i++) {
     658:	f104 0401 	add.w	r4, r4, #1
        if (VERIFY_PTR(ptr)) {
     65c:	d119      	bne.n	692 <gc_collect_root+0x52>
     65e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
     662:	4283      	cmp	r3, r0
     664:	d315      	bcc.n	692 <gc_collect_root+0x52>
            size_t block = BLOCK_FROM_PTR(ptr);
     666:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     668:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
            if (ATB_GET_KIND(block) == AT_HEAD) {
     66c:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     670:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     672:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     676:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     678:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     67c:	d209      	bcs.n	692 <gc_collect_root+0x52>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     67e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
     682:	f811 c00e 	ldrb.w	ip, [r1, lr]
     686:	fa4c f302 	asr.w	r3, ip, r2
     68a:	f003 0303 	and.w	r3, r3, #3
     68e:	2b01      	cmp	r3, #1
     690:	d003      	beq.n	69a <gc_collect_root+0x5a>
    for (size_t i = 0; i < len; i++) {
     692:	42a6      	cmp	r6, r4
     694:	d1dd      	bne.n	652 <gc_collect_root+0x12>
     696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     69a:	fa08 f202 	lsl.w	r2, r8, r2
     69e:	ea42 030c 	orr.w	r3, r2, ip
     6a2:	f801 300e 	strb.w	r3, [r1, lr]
                gc_mark_subtree(block);
     6a6:	f7ff fea3 	bl	3f0 <gc_mark_subtree>
     6aa:	e7f2      	b.n	692 <gc_collect_root+0x52>
     6ac:	4770      	bx	lr
     6ae:	bf00      	nop
     6b0:	20001240 	.word	0x20001240

000006b4 <gc_collect_end>:
void gc_collect_end(void) {
     6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6b8:	4e35      	ldr	r6, [pc, #212]	; (790 <gc_collect_end+0xdc>)
     6ba:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
     6be:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
     6c2:	0080      	lsls	r0, r0, #2
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6c4:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     6c6:	b313      	cbz	r3, 70e <gc_collect_end+0x5a>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6c8:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     6cc:	2800      	cmp	r0, #0
     6ce:	d04a      	beq.n	766 <gc_collect_end+0xb2>
     6d0:	2400      	movs	r4, #0
     6d2:	e002      	b.n	6da <gc_collect_end+0x26>
     6d4:	3401      	adds	r4, #1
     6d6:	4284      	cmp	r4, r0
     6d8:	d215      	bcs.n	706 <gc_collect_end+0x52>
            if (ATB_GET_KIND(block) == AT_MARK) {
     6da:	08a2      	lsrs	r2, r4, #2
     6dc:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
     6e0:	f004 0303 	and.w	r3, r4, #3
     6e4:	5c8a      	ldrb	r2, [r1, r2]
     6e6:	005b      	lsls	r3, r3, #1
     6e8:	fa42 f303 	asr.w	r3, r2, r3
     6ec:	f003 0303 	and.w	r3, r3, #3
     6f0:	2b03      	cmp	r3, #3
     6f2:	d1ef      	bne.n	6d4 <gc_collect_end+0x20>
                gc_mark_subtree(block);
     6f4:	4620      	mov	r0, r4
     6f6:	f7ff fe7b 	bl	3f0 <gc_mark_subtree>
     6fa:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     6fe:	3401      	adds	r4, #1
     700:	0080      	lsls	r0, r0, #2
     702:	4284      	cmp	r4, r0
     704:	d3e9      	bcc.n	6da <gc_collect_end+0x26>
     706:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
    while (MP_STATE_MEM(gc_stack_overflow)) {
     70a:	2b00      	cmp	r3, #0
     70c:	d1dc      	bne.n	6c8 <gc_collect_end+0x14>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     70e:	b350      	cbz	r0, 766 <gc_collect_end+0xb2>
     710:	4698      	mov	r8, r3
     712:	4619      	mov	r1, r3
                    ATB_ANY_TO_FREE(block);
     714:	f04f 0e03 	mov.w	lr, #3
                ATB_MARK_TO_HEAD(block);
     718:	2702      	movs	r7, #2
     71a:	e006      	b.n	72a <gc_collect_end+0x76>
        switch (ATB_GET_KIND(block)) {
     71c:	2a03      	cmp	r2, #3
     71e:	d02c      	beq.n	77a <gc_collect_end+0xc6>
     720:	2a01      	cmp	r2, #1
     722:	d013      	beq.n	74c <gc_collect_end+0x98>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     724:	3101      	adds	r1, #1
     726:	4281      	cmp	r1, r0
     728:	d21d      	bcs.n	766 <gc_collect_end+0xb2>
        switch (ATB_GET_KIND(block)) {
     72a:	088c      	lsrs	r4, r1, #2
     72c:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
     730:	f001 0303 	and.w	r3, r1, #3
     734:	f815 c004 	ldrb.w	ip, [r5, r4]
     738:	005b      	lsls	r3, r3, #1
     73a:	fa4c f203 	asr.w	r2, ip, r3
     73e:	f002 0203 	and.w	r2, r2, #3
     742:	2a02      	cmp	r2, #2
     744:	d1ea      	bne.n	71c <gc_collect_end+0x68>
                if (free_tail) {
     746:	f1b8 0f00 	cmp.w	r8, #0
     74a:	d0eb      	beq.n	724 <gc_collect_end+0x70>
                    ATB_ANY_TO_FREE(block);
     74c:	fa0e f303 	lsl.w	r3, lr, r3
     750:	ea2c 0303 	bic.w	r3, ip, r3
     754:	552b      	strb	r3, [r5, r4]
     756:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     75a:	3101      	adds	r1, #1
     75c:	0080      	lsls	r0, r0, #2
     75e:	4281      	cmp	r1, r0
                    ATB_ANY_TO_FREE(block);
     760:	f04f 0801 	mov.w	r8, #1
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     764:	d3e1      	bcc.n	72a <gc_collect_end+0x76>
    MP_STATE_MEM(gc_lock_depth)--;
     766:	f8b6 31c8 	ldrh.w	r3, [r6, #456]	; 0x1c8
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     76a:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     76c:	3b01      	subs	r3, #1
     76e:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     772:	f8c6 21cc 	str.w	r2, [r6, #460]	; 0x1cc
}
     776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_MARK_TO_HEAD(block);
     77a:	fa07 f303 	lsl.w	r3, r7, r3
     77e:	ea2c 0303 	bic.w	r3, ip, r3
     782:	552b      	strb	r3, [r5, r4]
     784:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
                free_tail = 0;
     788:	f04f 0800 	mov.w	r8, #0
     78c:	0080      	lsls	r0, r0, #2
     78e:	e7c9      	b.n	724 <gc_collect_end+0x70>
     790:	20001240 	.word	0x20001240

00000794 <gc_sweep_all>:
    MP_STATE_MEM(gc_lock_depth)++;
     794:	4b05      	ldr	r3, [pc, #20]	; (7ac <gc_sweep_all+0x18>)
     796:	f8b3 21c8 	ldrh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_stack_overflow) = 0;
     79a:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     79c:	3201      	adds	r2, #1
     79e:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_stack_overflow) = 0;
     7a2:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    gc_collect_end();
     7a6:	f7ff bf85 	b.w	6b4 <gc_collect_end>
     7aa:	bf00      	nop
     7ac:	20001240 	.word	0x20001240

000007b0 <gc_info>:
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7b0:	4b3d      	ldr	r3, [pc, #244]	; (8a8 <gc_info+0xf8>)
     7b2:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
     7b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
void gc_info(gc_info_t *info) {
     7ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7be:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
     7c2:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7c6:	1a52      	subs	r2, r2, r1
    info->used = 0;
     7c8:	2300      	movs	r3, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7ca:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7cc:	461d      	mov	r5, r3
     7ce:	00b6      	lsls	r6, r6, #2
    info->used = 0;
     7d0:	6043      	str	r3, [r0, #4]
    info->free = 0;
     7d2:	6083      	str	r3, [r0, #8]
    info->max_free = 0;
     7d4:	60c3      	str	r3, [r0, #12]
    info->num_1block = 0;
     7d6:	6103      	str	r3, [r0, #16]
    info->num_2block = 0;
     7d8:	6143      	str	r3, [r0, #20]
    info->max_block = 0;
     7da:	6183      	str	r3, [r0, #24]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7dc:	469c      	mov	ip, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     7de:	469e      	mov	lr, r3
     7e0:	461c      	mov	r4, r3
     7e2:	461a      	mov	r2, r3
     7e4:	4699      	mov	r9, r3
     7e6:	4619      	mov	r1, r3
     7e8:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     7ea:	f817 3009 	ldrb.w	r3, [r7, r9]
     7ee:	0049      	lsls	r1, r1, #1
     7f0:	410b      	asrs	r3, r1
     7f2:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     7f6:	2b01      	cmp	r3, #1
     7f8:	d030      	beq.n	85c <gc_info+0xac>
     7fa:	d327      	bcc.n	84c <gc_info+0x9c>
     7fc:	2b02      	cmp	r3, #2
     7fe:	d102      	bne.n	806 <gc_info+0x56>
                info->used += 1;
     800:	3501      	adds	r5, #1
     802:	6045      	str	r5, [r0, #4]
                len += 1;
     804:	3401      	adds	r4, #1
        block++;
     806:	3201      	adds	r2, #1
        if (!finish) {
     808:	42b2      	cmp	r2, r6
     80a:	d00e      	beq.n	82a <gc_info+0x7a>
            kind = ATB_GET_KIND(block);
     80c:	ea4f 0992 	mov.w	r9, r2, lsr #2
     810:	f002 0103 	and.w	r1, r2, #3
     814:	f817 3009 	ldrb.w	r3, [r7, r9]
     818:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     81c:	fa43 f30a 	asr.w	r3, r3, sl
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     820:	f013 0303 	ands.w	r3, r3, #3
     824:	d001      	beq.n	82a <gc_info+0x7a>
     826:	2b01      	cmp	r3, #1
     828:	d1df      	bne.n	7ea <gc_info+0x3a>
            if (len == 1) {
     82a:	2c01      	cmp	r4, #1
     82c:	d01a      	beq.n	864 <gc_info+0xb4>
            } else if (len == 2) {
     82e:	2c02      	cmp	r4, #2
     830:	d02b      	beq.n	88a <gc_info+0xda>
            if (len > info->max_block) {
     832:	6981      	ldr	r1, [r0, #24]
     834:	428c      	cmp	r4, r1
                info->max_block = len;
     836:	bf88      	it	hi
     838:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     83a:	42b2      	cmp	r2, r6
     83c:	d01b      	beq.n	876 <gc_info+0xc6>
     83e:	2b01      	cmp	r3, #1
     840:	d027      	beq.n	892 <gc_info+0xe2>
     842:	ea4f 0992 	mov.w	r9, r2, lsr #2
     846:	f002 0103 	and.w	r1, r2, #3
     84a:	e7ce      	b.n	7ea <gc_info+0x3a>
                info->free += 1;
     84c:	f10c 0c01 	add.w	ip, ip, #1
     850:	f8c0 c008 	str.w	ip, [r0, #8]
                len_free += 1;
     854:	f10e 0e01 	add.w	lr, lr, #1
                len = 0;
     858:	461c      	mov	r4, r3
                break;
     85a:	e7d4      	b.n	806 <gc_info+0x56>
                info->used += 1;
     85c:	3501      	adds	r5, #1
     85e:	6045      	str	r5, [r0, #4]
                len = 1;
     860:	461c      	mov	r4, r3
                break;
     862:	e7d0      	b.n	806 <gc_info+0x56>
                info->num_1block += 1;
     864:	6901      	ldr	r1, [r0, #16]
     866:	3101      	adds	r1, #1
     868:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     86a:	6981      	ldr	r1, [r0, #24]
     86c:	428c      	cmp	r4, r1
                info->max_block = len;
     86e:	bf88      	it	hi
     870:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     872:	42b2      	cmp	r2, r6
     874:	d1e3      	bne.n	83e <gc_info+0x8e>
                if (len_free > info->max_free) {
     876:	45c6      	cmp	lr, r8
     878:	d90e      	bls.n	898 <gc_info+0xe8>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     87a:	42b2      	cmp	r2, r6
                    info->max_free = len_free;
     87c:	f8c0 e00c 	str.w	lr, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     880:	d00a      	beq.n	898 <gc_info+0xe8>
     882:	46f0      	mov	r8, lr
                len_free = 0;
     884:	f04f 0e00 	mov.w	lr, #0
     888:	e7db      	b.n	842 <gc_info+0x92>
                info->num_2block += 1;
     88a:	6941      	ldr	r1, [r0, #20]
     88c:	3101      	adds	r1, #1
     88e:	6141      	str	r1, [r0, #20]
     890:	e7cf      	b.n	832 <gc_info+0x82>
                if (len_free > info->max_free) {
     892:	45f0      	cmp	r8, lr
     894:	d2f6      	bcs.n	884 <gc_info+0xd4>
     896:	e7f0      	b.n	87a <gc_info+0xca>
    info->used *= BYTES_PER_BLOCK;
     898:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     89a:	ea4f 130c 	mov.w	r3, ip, lsl #4
    info->used *= BYTES_PER_BLOCK;
     89e:	6045      	str	r5, [r0, #4]
    info->free *= BYTES_PER_BLOCK;
     8a0:	6083      	str	r3, [r0, #8]
}
     8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8a6:	bf00      	nop
     8a8:	20001240 	.word	0x20001240

000008ac <gc_alloc>:
    size_t n_blocks = ((n_bytes + BYTES_PER_BLOCK - 1) & (~(BYTES_PER_BLOCK - 1))) / BYTES_PER_BLOCK;
     8ac:	300f      	adds	r0, #15
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (n_blocks == 0) {
     8b0:	0906      	lsrs	r6, r0, #4
     8b2:	d052      	beq.n	95a <gc_alloc+0xae>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     8b4:	4d4c      	ldr	r5, [pc, #304]	; (9e8 <gc_alloc+0x13c>)
     8b6:	f8b5 41c8 	ldrh.w	r4, [r5, #456]	; 0x1c8
     8ba:	2c00      	cmp	r4, #0
     8bc:	d14d      	bne.n	95a <gc_alloc+0xae>
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8be:	f8b5 e1ca 	ldrh.w	lr, [r5, #458]	; 0x1ca
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8c2:	f8d5 21cc 	ldr.w	r2, [r5, #460]	; 0x1cc
     8c6:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8ca:	fabe fe8e 	clz	lr, lr
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8ce:	4282      	cmp	r2, r0
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8d0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8d4:	d234      	bcs.n	940 <gc_alloc+0x94>
     8d6:	f8d5 70b4 	ldr.w	r7, [r5, #180]	; 0xb4
     8da:	18b9      	adds	r1, r7, r2
     8dc:	e017      	b.n	90e <gc_alloc+0x62>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     8de:	3401      	adds	r4, #1
     8e0:	42a6      	cmp	r6, r4
     8e2:	d93d      	bls.n	960 <gc_alloc+0xb4>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     8e4:	f013 0f0c 	tst.w	r3, #12
     8e8:	d11b      	bne.n	922 <gc_alloc+0x76>
     8ea:	3401      	adds	r4, #1
     8ec:	42a6      	cmp	r6, r4
     8ee:	d971      	bls.n	9d4 <gc_alloc+0x128>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     8f0:	f013 0f30 	tst.w	r3, #48	; 0x30
     8f4:	d11a      	bne.n	92c <gc_alloc+0x80>
     8f6:	3401      	adds	r4, #1
     8f8:	42a6      	cmp	r6, r4
     8fa:	d96e      	bls.n	9da <gc_alloc+0x12e>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     8fc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     900:	d119      	bne.n	936 <gc_alloc+0x8a>
     902:	3401      	adds	r4, #1
     904:	42a6      	cmp	r6, r4
     906:	d96b      	bls.n	9e0 <gc_alloc+0x134>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     908:	3201      	adds	r2, #1
     90a:	4282      	cmp	r2, r0
     90c:	d218      	bcs.n	940 <gc_alloc+0x94>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     90e:	f811 3b01 	ldrb.w	r3, [r1], #1
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     912:	f013 0f03 	tst.w	r3, #3
     916:	d0e2      	beq.n	8de <gc_alloc+0x32>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     918:	f013 0f0c 	tst.w	r3, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     91c:	f04f 0400 	mov.w	r4, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     920:	d0e3      	beq.n	8ea <gc_alloc+0x3e>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     922:	f013 0f30 	tst.w	r3, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     926:	f04f 0400 	mov.w	r4, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     92a:	d0e4      	beq.n	8f6 <gc_alloc+0x4a>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     92c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     930:	f04f 0400 	mov.w	r4, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     934:	d0e5      	beq.n	902 <gc_alloc+0x56>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     936:	3201      	adds	r2, #1
     938:	4282      	cmp	r2, r0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     93a:	f04f 0400 	mov.w	r4, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     93e:	d3e6      	bcc.n	90e <gc_alloc+0x62>
        if (collected) {
     940:	f1be 0f00 	cmp.w	lr, #0
     944:	d109      	bne.n	95a <gc_alloc+0xae>
        gc_collect();
     946:	f01a fc07 	bl	1b158 <gc_collect>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     94a:	f8d5 21cc 	ldr.w	r2, [r5, #460]	; 0x1cc
     94e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
     952:	4282      	cmp	r2, r0
        collected = 1;
     954:	f04f 0e01 	mov.w	lr, #1
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     958:	d3bd      	bcc.n	8d6 <gc_alloc+0x2a>
        return NULL;
     95a:	2400      	movs	r4, #0
}
     95c:	4620      	mov	r0, r4
     95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     960:	0092      	lsls	r2, r2, #2
    start_block = i - n_free + 1;
     962:	1b11      	subs	r1, r2, r4
    if (n_free == 1) {
     964:	2c01      	cmp	r4, #1
    start_block = i - n_free + 1;
     966:	f101 0001 	add.w	r0, r1, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     96a:	f102 0c01 	add.w	ip, r2, #1
     96e:	bf08      	it	eq
     970:	ea4f 039c 	moveq.w	r3, ip, lsr #2
    ATB_FREE_TO_HEAD(start_block);
     974:	ea4f 0490 	mov.w	r4, r0, lsr #2
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     978:	bf08      	it	eq
     97a:	f8c5 31cc 	streq.w	r3, [r5, #460]	; 0x1cc
    ATB_FREE_TO_HEAD(start_block);
     97e:	f000 0303 	and.w	r3, r0, #3
     982:	f817 e004 	ldrb.w	lr, [r7, r4]
     986:	005e      	lsls	r6, r3, #1
     988:	2301      	movs	r3, #1
     98a:	40b3      	lsls	r3, r6
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     98c:	3102      	adds	r1, #2
    ATB_FREE_TO_HEAD(start_block);
     98e:	ea43 030e 	orr.w	r3, r3, lr
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     992:	428a      	cmp	r2, r1
    ATB_FREE_TO_HEAD(start_block);
     994:	553b      	strb	r3, [r7, r4]
        ATB_FREE_TO_TAIL(bl);
     996:	bf28      	it	cs
     998:	f04f 0e02 	movcs.w	lr, #2
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     99c:	d30d      	bcc.n	9ba <gc_alloc+0x10e>
        ATB_FREE_TO_TAIL(bl);
     99e:	088c      	lsrs	r4, r1, #2
     9a0:	f8d5 60b4 	ldr.w	r6, [r5, #180]	; 0xb4
     9a4:	f001 0303 	and.w	r3, r1, #3
     9a8:	5d37      	ldrb	r7, [r6, r4]
     9aa:	005b      	lsls	r3, r3, #1
     9ac:	fa0e f303 	lsl.w	r3, lr, r3
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9b0:	3101      	adds	r1, #1
        ATB_FREE_TO_TAIL(bl);
     9b2:	433b      	orrs	r3, r7
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9b4:	428a      	cmp	r2, r1
        ATB_FREE_TO_TAIL(bl);
     9b6:	5533      	strb	r3, [r6, r4]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9b8:	d2f1      	bcs.n	99e <gc_alloc+0xf2>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     9ba:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     9be:	ebac 0200 	sub.w	r2, ip, r0
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     9c2:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     9c6:	0112      	lsls	r2, r2, #4
     9c8:	4620      	mov	r0, r4
     9ca:	2100      	movs	r1, #0
     9cc:	f01b fe62 	bl	1c694 <memset>
}
     9d0:	4620      	mov	r0, r4
     9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     9d4:	0092      	lsls	r2, r2, #2
     9d6:	3201      	adds	r2, #1
     9d8:	e7c3      	b.n	962 <gc_alloc+0xb6>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     9da:	0092      	lsls	r2, r2, #2
     9dc:	3202      	adds	r2, #2
     9de:	e7c0      	b.n	962 <gc_alloc+0xb6>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     9e0:	0092      	lsls	r2, r2, #2
     9e2:	3203      	adds	r2, #3
     9e4:	e7bd      	b.n	962 <gc_alloc+0xb6>
     9e6:	bf00      	nop
     9e8:	20001240 	.word	0x20001240

000009ec <gc_free>:
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     9ec:	4b03      	ldr	r3, [pc, #12]	; (9fc <gc_free+0x10>)
     9ee:	f8b3 31c8 	ldrh.w	r3, [r3, #456]	; 0x1c8
     9f2:	b90b      	cbnz	r3, 9f8 <gc_free+0xc>
    if (ptr == NULL) {
     9f4:	b100      	cbz	r0, 9f8 <gc_free+0xc>
     9f6:	e555      	b.n	4a4 <gc_free.part.0>
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop
     9fc:	20001240 	.word	0x20001240

00000a00 <gc_nbytes>:

size_t gc_nbytes(const void *ptr) {
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     a00:	f010 030f 	ands.w	r3, r0, #15
     a04:	d11b      	bne.n	a3e <gc_nbytes+0x3e>
     a06:	4a18      	ldr	r2, [pc, #96]	; (a68 <gc_nbytes+0x68>)
     a08:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
     a0c:	4288      	cmp	r0, r1
     a0e:	d316      	bcc.n	a3e <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     a10:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     a12:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
     a16:	42a0      	cmp	r0, r4
     a18:	d222      	bcs.n	a60 <gc_nbytes+0x60>
        size_t block = BLOCK_FROM_PTR(ptr);
     a1a:	1a40      	subs	r0, r0, r1
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a1c:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
     a20:	0982      	lsrs	r2, r0, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     a22:	0901      	lsrs	r1, r0, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a24:	5ca2      	ldrb	r2, [r4, r2]
     a26:	f001 0003 	and.w	r0, r1, #3
     a2a:	0040      	lsls	r0, r0, #1
     a2c:	4102      	asrs	r2, r0
     a2e:	f002 0203 	and.w	r2, r2, #3
     a32:	2a01      	cmp	r2, #1
     a34:	4618      	mov	r0, r3
     a36:	d004      	beq.n	a42 <gc_nbytes+0x42>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     a38:	f85d 4b04 	ldr.w	r4, [sp], #4
     a3c:	4770      	bx	lr
    return 0;
     a3e:	2000      	movs	r0, #0
     a40:	4770      	bx	lr
                n_blocks += 1;
     a42:	3001      	adds	r0, #1
     a44:	180b      	adds	r3, r1, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     a46:	089a      	lsrs	r2, r3, #2
     a48:	f003 0303 	and.w	r3, r3, #3
     a4c:	5ca2      	ldrb	r2, [r4, r2]
     a4e:	005b      	lsls	r3, r3, #1
     a50:	fa42 f303 	asr.w	r3, r2, r3
     a54:	f003 0303 	and.w	r3, r3, #3
     a58:	2b02      	cmp	r3, #2
     a5a:	d0f2      	beq.n	a42 <gc_nbytes+0x42>
            return n_blocks * BYTES_PER_BLOCK;
     a5c:	0100      	lsls	r0, r0, #4
     a5e:	e7eb      	b.n	a38 <gc_nbytes+0x38>
    return 0;
     a60:	4618      	mov	r0, r3
}
     a62:	f85d 4b04 	ldr.w	r4, [sp], #4
     a66:	4770      	bx	lr
     a68:	20001240 	.word	0x20001240

00000a6c <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a70:	460b      	mov	r3, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     a72:	4606      	mov	r6, r0
     a74:	2800      	cmp	r0, #0
     a76:	f000 80c7 	beq.w	c08 <gc_realloc+0x19c>
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     a7a:	2900      	cmp	r1, #0
     a7c:	d07a      	beq.n	b74 <gc_realloc+0x108>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     a7e:	4d70      	ldr	r5, [pc, #448]	; (c40 <gc_realloc+0x1d4>)
     a80:	f8b5 31c8 	ldrh.w	r3, [r5, #456]	; 0x1c8
     a84:	2b00      	cmp	r3, #0
     a86:	d17a      	bne.n	b7e <gc_realloc+0x112>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     a88:	f010 090f 	ands.w	r9, r0, #15
     a8c:	f040 80c9 	bne.w	c22 <gc_realloc+0x1b6>
     a90:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
     a94:	4286      	cmp	r6, r0
     a96:	f0c0 80c4 	bcc.w	c22 <gc_realloc+0x1b6>
     a9a:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
     a9e:	429e      	cmp	r6, r3
     aa0:	f080 80bf 	bcs.w	c22 <gc_realloc+0x1b6>
    size_t block = BLOCK_FROM_PTR(ptr);
     aa4:	1a30      	subs	r0, r6, r0
    assert(ATB_GET_KIND(block) == AT_HEAD);
     aa6:	0984      	lsrs	r4, r0, #6
     aa8:	f8d5 70b4 	ldr.w	r7, [r5, #180]	; 0xb4
    size_t block = BLOCK_FROM_PTR(ptr);
     aac:	0900      	lsrs	r0, r0, #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     aae:	f000 0303 	and.w	r3, r0, #3
     ab2:	5d3c      	ldrb	r4, [r7, r4]
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	411c      	asrs	r4, r3
     ab8:	f004 0403 	and.w	r4, r4, #3
     abc:	2c01      	cmp	r4, #1
     abe:	f040 80b7 	bne.w	c30 <gc_realloc+0x1c4>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     ac2:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     ac6:	f100 0801 	add.w	r8, r0, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     aca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     ace:	f101 0e0f 	add.w	lr, r1, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     ad2:	45c2      	cmp	sl, r8
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     ad4:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     ad8:	d913      	bls.n	b02 <gc_realloc+0x96>
        byte block_type = ATB_GET_KIND(bl);
     ada:	ea4f 0c98 	mov.w	ip, r8, lsr #2
     ade:	f008 0303 	and.w	r3, r8, #3
     ae2:	f817 c00c 	ldrb.w	ip, [r7, ip]
     ae6:	005b      	lsls	r3, r3, #1
     ae8:	fa4c f303 	asr.w	r3, ip, r3
     aec:	f003 0303 	and.w	r3, r3, #3
        if (block_type == AT_TAIL) {
     af0:	2b02      	cmp	r3, #2
     af2:	d048      	beq.n	b86 <gc_realloc+0x11a>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
     af4:	b92b      	cbnz	r3, b02 <gc_realloc+0x96>
            n_free++;
     af6:	f109 0901 	add.w	r9, r9, #1
            if (n_blocks + n_free >= new_blocks) {
     afa:	eb09 0304 	add.w	r3, r9, r4
     afe:	459e      	cmp	lr, r3
     b00:	d842      	bhi.n	b88 <gc_realloc+0x11c>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
     b02:	45a6      	cmp	lr, r4
     b04:	d065      	beq.n	bd2 <gc_realloc+0x166>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
     b06:	d344      	bcc.n	b92 <gc_realloc+0x126>

        return ptr_in;
    }

    // check if we can expand in place
    if (new_blocks <= n_blocks + n_free) {
     b08:	44a1      	add	r9, r4
     b0a:	45ce      	cmp	lr, r9
     b0c:	d865      	bhi.n	bda <gc_realloc+0x16e>
        // mark few more blocks as used tail
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b0e:	1901      	adds	r1, r0, r4
     b10:	4470      	add	r0, lr
     b12:	4288      	cmp	r0, r1
     b14:	d924      	bls.n	b60 <gc_realloc+0xf4>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b16:	088a      	lsrs	r2, r1, #2
     b18:	f001 0303 	and.w	r3, r1, #3
     b1c:	f817 c002 	ldrb.w	ip, [r7, r2]
     b20:	005b      	lsls	r3, r3, #1
     b22:	fa4c f803 	asr.w	r8, ip, r3
     b26:	f018 0f03 	tst.w	r8, #3
     b2a:	443a      	add	r2, r7
            ATB_FREE_TO_TAIL(bl);
     b2c:	bf08      	it	eq
     b2e:	2702      	moveq	r7, #2
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b30:	d00e      	beq.n	b50 <gc_realloc+0xe4>
     b32:	e06f      	b.n	c14 <gc_realloc+0x1a8>
     b34:	088a      	lsrs	r2, r1, #2
     b36:	f8d5 80b4 	ldr.w	r8, [r5, #180]	; 0xb4
     b3a:	f001 0303 	and.w	r3, r1, #3
     b3e:	f818 c002 	ldrb.w	ip, [r8, r2]
     b42:	005b      	lsls	r3, r3, #1
     b44:	fa4c f903 	asr.w	r9, ip, r3
     b48:	f019 0f03 	tst.w	r9, #3
     b4c:	4442      	add	r2, r8
     b4e:	d161      	bne.n	c14 <gc_realloc+0x1a8>
            ATB_FREE_TO_TAIL(bl);
     b50:	fa07 f303 	lsl.w	r3, r7, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b54:	3101      	adds	r1, #1
            ATB_FREE_TO_TAIL(bl);
     b56:	ea43 030c 	orr.w	r3, r3, ip
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b5a:	4288      	cmp	r0, r1
            ATB_FREE_TO_TAIL(bl);
     b5c:	7013      	strb	r3, [r2, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b5e:	d1e9      	bne.n	b34 <gc_realloc+0xc8>

        GC_EXIT();

        #if MICROPY_GC_CONSERVATIVE_CLEAR
        // be conservative and zero out all the newly allocated blocks
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     b60:	ebae 0204 	sub.w	r2, lr, r4
     b64:	0112      	lsls	r2, r2, #4
     b66:	eb06 1004 	add.w	r0, r6, r4, lsl #4
     b6a:	2100      	movs	r1, #0

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif

        return ptr_in;
     b6c:	4637      	mov	r7, r6
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     b6e:	f01b fd91 	bl	1c694 <memset>
        return ptr_in;
     b72:	e005      	b.n	b80 <gc_realloc+0x114>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     b74:	4b32      	ldr	r3, [pc, #200]	; (c40 <gc_realloc+0x1d4>)
     b76:	f8b3 71c8 	ldrh.w	r7, [r3, #456]	; 0x1c8
     b7a:	2f00      	cmp	r7, #0
     b7c:	d03f      	beq.n	bfe <gc_realloc+0x192>
        return NULL;
     b7e:	2700      	movs	r7, #0

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
    gc_free(ptr_in);
    return ptr_out;
}
     b80:	4638      	mov	r0, r7
     b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n_blocks++;
     b86:	3401      	adds	r4, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     b88:	f108 0801 	add.w	r8, r8, #1
     b8c:	45c2      	cmp	sl, r8
     b8e:	d1a4      	bne.n	ada <gc_realloc+0x6e>
     b90:	e7b7      	b.n	b02 <gc_realloc+0x96>
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     b92:	4486      	add	lr, r0
            ATB_ANY_TO_FREE(bl);
     b94:	f04f 0803 	mov.w	r8, #3
     b98:	4420      	add	r0, r4
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     b9a:	4674      	mov	r4, lr
     b9c:	e001      	b.n	ba2 <gc_realloc+0x136>
     b9e:	f8d5 70b4 	ldr.w	r7, [r5, #180]	; 0xb4
            ATB_ANY_TO_FREE(bl);
     ba2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
     ba6:	f004 0303 	and.w	r3, r4, #3
     baa:	f817 100c 	ldrb.w	r1, [r7, ip]
     bae:	005b      	lsls	r3, r3, #1
     bb0:	fa08 f303 	lsl.w	r3, r8, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bb4:	3401      	adds	r4, #1
            ATB_ANY_TO_FREE(bl);
     bb6:	ea21 0303 	bic.w	r3, r1, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bba:	4284      	cmp	r4, r0
            ATB_ANY_TO_FREE(bl);
     bbc:	f807 300c 	strb.w	r3, [r7, ip]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bc0:	d1ed      	bne.n	b9e <gc_realloc+0x132>
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     bc2:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
     bc6:	ea4f 029e 	mov.w	r2, lr, lsr #2
     bca:	429a      	cmp	r2, r3
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
     bcc:	bf38      	it	cc
     bce:	f8c5 21cc 	strcc.w	r2, [r5, #460]	; 0x1cc
     bd2:	4637      	mov	r7, r6
}
     bd4:	4638      	mov	r0, r7
     bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!allow_move) {
     bda:	2a00      	cmp	r2, #0
     bdc:	d0cf      	beq.n	b7e <gc_realloc+0x112>
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
     bde:	4608      	mov	r0, r1
     be0:	2100      	movs	r1, #0
     be2:	f7ff fe63 	bl	8ac <gc_alloc>
    if (ptr_out == NULL) {
     be6:	4607      	mov	r7, r0
     be8:	2800      	cmp	r0, #0
     bea:	d0c8      	beq.n	b7e <gc_realloc+0x112>
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
     bec:	0122      	lsls	r2, r4, #4
     bee:	4631      	mov	r1, r6
     bf0:	f01b fcb6 	bl	1c560 <memcpy>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     bf4:	f8b5 31c8 	ldrh.w	r3, [r5, #456]	; 0x1c8
     bf8:	2b00      	cmp	r3, #0
     bfa:	d1c1      	bne.n	b80 <gc_realloc+0x114>
     bfc:	4630      	mov	r0, r6
     bfe:	f7ff fc51 	bl	4a4 <gc_free.part.0>
}
     c02:	4638      	mov	r0, r7
     c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return gc_alloc(n_bytes, false);
     c08:	4601      	mov	r1, r0
}
     c0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return gc_alloc(n_bytes, false);
     c0e:	4618      	mov	r0, r3
     c10:	f7ff be4c 	b.w	8ac <gc_alloc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     c14:	4b0b      	ldr	r3, [pc, #44]	; (c44 <gc_realloc+0x1d8>)
     c16:	4a0c      	ldr	r2, [pc, #48]	; (c48 <gc_realloc+0x1dc>)
     c18:	480c      	ldr	r0, [pc, #48]	; (c4c <gc_realloc+0x1e0>)
     c1a:	f240 21e9 	movw	r1, #745	; 0x2e9
     c1e:	f01a fae1 	bl	1b1e4 <__assert_func>
    assert(VERIFY_PTR(ptr));
     c22:	4b0b      	ldr	r3, [pc, #44]	; (c50 <gc_realloc+0x1e4>)
     c24:	4a08      	ldr	r2, [pc, #32]	; (c48 <gc_realloc+0x1dc>)
     c26:	4809      	ldr	r0, [pc, #36]	; (c4c <gc_realloc+0x1e0>)
     c28:	f240 21a9 	movw	r1, #681	; 0x2a9
     c2c:	f01a fada 	bl	1b1e4 <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c30:	4b08      	ldr	r3, [pc, #32]	; (c54 <gc_realloc+0x1e8>)
     c32:	4a05      	ldr	r2, [pc, #20]	; (c48 <gc_realloc+0x1dc>)
     c34:	4805      	ldr	r0, [pc, #20]	; (c4c <gc_realloc+0x1e0>)
     c36:	f240 21ab 	movw	r1, #683	; 0x2ab
     c3a:	f01a fad3 	bl	1b1e4 <__assert_func>
     c3e:	bf00      	nop
     c40:	20001240 	.word	0x20001240
     c44:	0001d6f4 	.word	0x0001d6f4
     c48:	0001d6a8 	.word	0x0001d6a8
     c4c:	0001d6c4 	.word	0x0001d6c4
     c50:	0001d6b4 	.word	0x0001d6b4
     c54:	0001d6d4 	.word	0x0001d6d4

00000c58 <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
     c58:	b510      	push	{r4, lr}
     c5a:	b08a      	sub	sp, #40	; 0x28
    gc_info_t info;
    gc_info(&info);
     c5c:	a803      	add	r0, sp, #12
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     c5e:	4c0b      	ldr	r4, [pc, #44]	; (c8c <gc_dump_info+0x34>)
    gc_info(&info);
     c60:	f7ff fda6 	bl	7b0 <gc_info>
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     c64:	9905      	ldr	r1, [sp, #20]
     c66:	9b04      	ldr	r3, [sp, #16]
     c68:	9a03      	ldr	r2, [sp, #12]
     c6a:	9100      	str	r1, [sp, #0]
     c6c:	4620      	mov	r0, r4
     c6e:	4908      	ldr	r1, [pc, #32]	; (c90 <gc_dump_info+0x38>)
     c70:	f001 f90e 	bl	1e90 <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
     c74:	a806      	add	r0, sp, #24
     c76:	c80d      	ldmia	r0, {r0, r2, r3}
     c78:	9909      	ldr	r1, [sp, #36]	; 0x24
     c7a:	9001      	str	r0, [sp, #4]
     c7c:	9100      	str	r1, [sp, #0]
     c7e:	4620      	mov	r0, r4
     c80:	4904      	ldr	r1, [pc, #16]	; (c94 <gc_dump_info+0x3c>)
     c82:	f001 f905 	bl	1e90 <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
     c86:	b00a      	add	sp, #40	; 0x28
     c88:	bd10      	pop	{r4, pc}
     c8a:	bf00      	nop
     c8c:	0001ef0c 	.word	0x0001ef0c
     c90:	0001d710 	.word	0x0001d710
     c94:	0001d734 	.word	0x0001d734

00000c98 <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
     c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
     c9c:	4f4f      	ldr	r7, [pc, #316]	; (ddc <gc_dump_alloc_table+0x144>)
     c9e:	4950      	ldr	r1, [pc, #320]	; (de0 <gc_dump_alloc_table+0x148>)
     ca0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
     ca4:	484f      	ldr	r0, [pc, #316]	; (de4 <gc_dump_alloc_table+0x14c>)
     ca6:	f001 f8f3 	bl	1e90 <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     caa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     cae:	0089      	lsls	r1, r1, #2
     cb0:	d07e      	beq.n	db0 <gc_dump_alloc_table+0x118>
                }
            }
            // print header for new line of blocks
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     cb2:	f8df a15c 	ldr.w	sl, [pc, #348]	; e10 <gc_dump_alloc_table+0x178>
     cb6:	f8df 915c 	ldr.w	r9, [pc, #348]	; e14 <gc_dump_alloc_table+0x17c>
     cba:	f8df 8128 	ldr.w	r8, [pc, #296]	; de4 <gc_dump_alloc_table+0x14c>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     cbe:	2500      	movs	r5, #0
     cc0:	e01d      	b.n	cfe <gc_dump_alloc_table+0x66>
     cc2:	f005 0603 	and.w	r6, r5, #3
     cc6:	0076      	lsls	r6, r6, #1
     cc8:	ea4f 0b95 	mov.w	fp, r5, lsr #2
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
     ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
     cd0:	f813 300b 	ldrb.w	r3, [r3, fp]
     cd4:	fa43 f606 	asr.w	r6, r3, r6
     cd8:	f006 0603 	and.w	r6, r6, #3
     cdc:	2e02      	cmp	r6, #2
     cde:	d065      	beq.n	dac <gc_dump_alloc_table+0x114>
     ce0:	2e03      	cmp	r6, #3
     ce2:	d061      	beq.n	da8 <gc_dump_alloc_table+0x110>
     ce4:	2e01      	cmp	r6, #1
     ce6:	d043      	beq.n	d70 <gc_dump_alloc_table+0xd8>
            case AT_FREE: c = '.'; break;
     ce8:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
     cea:	493f      	ldr	r1, [pc, #252]	; (de8 <gc_dump_alloc_table+0x150>)
     cec:	4640      	mov	r0, r8
     cee:	f001 f8cf 	bl	1e90 <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     cf2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     cf6:	3501      	adds	r5, #1
     cf8:	0089      	lsls	r1, r1, #2
     cfa:	42a9      	cmp	r1, r5
     cfc:	d958      	bls.n	db0 <gc_dump_alloc_table+0x118>
        if (bl % DUMP_BYTES_PER_LINE == 0) {
     cfe:	06a8      	lsls	r0, r5, #26
     d00:	d1df      	bne.n	cc2 <gc_dump_alloc_table+0x2a>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     d02:	428d      	cmp	r5, r1
     d04:	d260      	bcs.n	dc8 <gc_dump_alloc_table+0x130>
     d06:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
     d0a:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     d0e:	f005 0603 	and.w	r6, r5, #3
     d12:	f810 300b 	ldrb.w	r3, [r0, fp]
     d16:	0076      	lsls	r6, r6, #1
     d18:	4133      	asrs	r3, r6
     d1a:	079a      	lsls	r2, r3, #30
     d1c:	d121      	bne.n	d62 <gc_dump_alloc_table+0xca>
     d1e:	462c      	mov	r4, r5
     d20:	e004      	b.n	d2c <gc_dump_alloc_table+0x94>
     d22:	5c82      	ldrb	r2, [r0, r2]
     d24:	fa42 f303 	asr.w	r3, r2, r3
     d28:	079b      	lsls	r3, r3, #30
     d2a:	d108      	bne.n	d3e <gc_dump_alloc_table+0xa6>
                    bl2++;
     d2c:	3401      	adds	r4, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     d2e:	f004 0303 	and.w	r3, r4, #3
     d32:	428c      	cmp	r4, r1
     d34:	ea4f 0294 	mov.w	r2, r4, lsr #2
     d38:	ea4f 0343 	mov.w	r3, r3, lsl #1
     d3c:	d1f1      	bne.n	d22 <gc_dump_alloc_table+0x8a>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
     d3e:	1b62      	subs	r2, r4, r5
     d40:	2a7f      	cmp	r2, #127	; 0x7f
     d42:	d90e      	bls.n	d62 <gc_dump_alloc_table+0xca>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
     d44:	0992      	lsrs	r2, r2, #6
     d46:	4929      	ldr	r1, [pc, #164]	; (dec <gc_dump_alloc_table+0x154>)
     d48:	4640      	mov	r0, r8
     d4a:	f001 f8a1 	bl	1e90 <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
     d52:	f024 053f 	bic.w	r5, r4, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     d56:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     d5a:	d229      	bcs.n	db0 <gc_dump_alloc_table+0x118>
     d5c:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     d60:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     d62:	ea0a 1205 	and.w	r2, sl, r5, lsl #4
     d66:	4649      	mov	r1, r9
     d68:	4640      	mov	r0, r8
     d6a:	f001 f891 	bl	1e90 <mp_printf>
     d6e:	e7ad      	b.n	ccc <gc_dump_alloc_table+0x34>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     d70:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
     d74:	4b1e      	ldr	r3, [pc, #120]	; (df0 <gc_dump_alloc_table+0x158>)
     d76:	012a      	lsls	r2, r5, #4
     d78:	588a      	ldr	r2, [r1, r2]
     d7a:	429a      	cmp	r2, r3
     d7c:	d020      	beq.n	dc0 <gc_dump_alloc_table+0x128>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     d7e:	4b1d      	ldr	r3, [pc, #116]	; (df4 <gc_dump_alloc_table+0x15c>)
     d80:	429a      	cmp	r2, r3
     d82:	d01f      	beq.n	dc4 <gc_dump_alloc_table+0x12c>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     d84:	4b1c      	ldr	r3, [pc, #112]	; (df8 <gc_dump_alloc_table+0x160>)
     d86:	429a      	cmp	r2, r3
     d88:	d024      	beq.n	dd4 <gc_dump_alloc_table+0x13c>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     d8a:	4b1c      	ldr	r3, [pc, #112]	; (dfc <gc_dump_alloc_table+0x164>)
     d8c:	429a      	cmp	r2, r3
     d8e:	d015      	beq.n	dbc <gc_dump_alloc_table+0x124>
     d90:	4b1b      	ldr	r3, [pc, #108]	; (e00 <gc_dump_alloc_table+0x168>)
     d92:	429a      	cmp	r2, r3
     d94:	d012      	beq.n	dbc <gc_dump_alloc_table+0x124>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     d96:	4b1b      	ldr	r3, [pc, #108]	; (e04 <gc_dump_alloc_table+0x16c>)
     d98:	429a      	cmp	r2, r3
     d9a:	d01d      	beq.n	dd8 <gc_dump_alloc_table+0x140>
                else if (*ptr == &mp_type_module) { c = 'M'; }
     d9c:	4b1a      	ldr	r3, [pc, #104]	; (e08 <gc_dump_alloc_table+0x170>)
     d9e:	429a      	cmp	r2, r3
     da0:	bf14      	ite	ne
     da2:	2268      	movne	r2, #104	; 0x68
     da4:	224d      	moveq	r2, #77	; 0x4d
     da6:	e7a0      	b.n	cea <gc_dump_alloc_table+0x52>
            case AT_MARK: c = 'm'; break;
     da8:	226d      	movs	r2, #109	; 0x6d
     daa:	e79e      	b.n	cea <gc_dump_alloc_table+0x52>
            case AT_TAIL: c = '='; break;
     dac:	223d      	movs	r2, #61	; 0x3d
     dae:	e79c      	b.n	cea <gc_dump_alloc_table+0x52>
    }
    mp_print_str(&mp_plat_print, "\n");
     db0:	4916      	ldr	r1, [pc, #88]	; (e0c <gc_dump_alloc_table+0x174>)
     db2:	480c      	ldr	r0, [pc, #48]	; (de4 <gc_dump_alloc_table+0x14c>)
    GC_EXIT();
}
     db4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mp_print_str(&mp_plat_print, "\n");
     db8:	f000 bd58 	b.w	186c <mp_print_str>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     dbc:	2253      	movs	r2, #83	; 0x53
     dbe:	e794      	b.n	cea <gc_dump_alloc_table+0x52>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     dc0:	2254      	movs	r2, #84	; 0x54
     dc2:	e792      	b.n	cea <gc_dump_alloc_table+0x52>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     dc4:	224c      	movs	r2, #76	; 0x4c
     dc6:	e790      	b.n	cea <gc_dump_alloc_table+0x52>
     dc8:	f005 0603 	and.w	r6, r5, #3
     dcc:	0076      	lsls	r6, r6, #1
     dce:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     dd2:	e7c6      	b.n	d62 <gc_dump_alloc_table+0xca>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     dd4:	2244      	movs	r2, #68	; 0x44
     dd6:	e788      	b.n	cea <gc_dump_alloc_table+0x52>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     dd8:	2242      	movs	r2, #66	; 0x42
     dda:	e786      	b.n	cea <gc_dump_alloc_table+0x52>
     ddc:	20001240 	.word	0x20001240
     de0:	0001d77c 	.word	0x0001d77c
     de4:	0001ef0c 	.word	0x0001ef0c
     de8:	0001d7c0 	.word	0x0001d7c0
     dec:	0001d79c 	.word	0x0001d79c
     df0:	00023488 	.word	0x00023488
     df4:	0002287c 	.word	0x0002287c
     df8:	000217b4 	.word	0x000217b4
     dfc:	00023204 	.word	0x00023204
     e00:	00023240 	.word	0x00023240
     e04:	00022210 	.word	0x00022210
     e08:	00022a38 	.word	0x00022a38
     e0c:	0001d798 	.word	0x0001d798
     e10:	000ffff0 	.word	0x000ffff0
     e14:	0001d7b8 	.word	0x0001d7b8

00000e18 <qstr_compute_hash>:
#define QSTR_ENTER()
#define QSTR_EXIT()
#endif

// this must match the equivalent function in makeqstrdata.py
mp_uint_t qstr_compute_hash(const byte *data, size_t len) {
     e18:	b480      	push	{r7}
     e1a:	b085      	sub	sp, #20
     e1c:	af00      	add	r7, sp, #0
     e1e:	6078      	str	r0, [r7, #4]
     e20:	6039      	str	r1, [r7, #0]
    // djb2 algorithm; see http://www.cse.yorku.ca/~oz/hash.html
    mp_uint_t hash = 5381;
     e22:	f241 5305 	movw	r3, #5381	; 0x1505
     e26:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e28:	687a      	ldr	r2, [r7, #4]
     e2a:	683b      	ldr	r3, [r7, #0]
     e2c:	4413      	add	r3, r2
     e2e:	60bb      	str	r3, [r7, #8]
     e30:	e00a      	b.n	e48 <qstr_compute_hash+0x30>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
     e32:	68fb      	ldr	r3, [r7, #12]
     e34:	015a      	lsls	r2, r3, #5
     e36:	68fb      	ldr	r3, [r7, #12]
     e38:	4413      	add	r3, r2
     e3a:	687a      	ldr	r2, [r7, #4]
     e3c:	7812      	ldrb	r2, [r2, #0]
     e3e:	4053      	eors	r3, r2
     e40:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	3301      	adds	r3, #1
     e46:	607b      	str	r3, [r7, #4]
     e48:	687a      	ldr	r2, [r7, #4]
     e4a:	68bb      	ldr	r3, [r7, #8]
     e4c:	429a      	cmp	r2, r3
     e4e:	d3f0      	bcc.n	e32 <qstr_compute_hash+0x1a>
    }
    hash &= Q_HASH_MASK;
     e50:	68fb      	ldr	r3, [r7, #12]
     e52:	b2db      	uxtb	r3, r3
     e54:	60fb      	str	r3, [r7, #12]
    // Make sure that valid hash is never zero, zero means "hash not computed"
    if (hash == 0) {
     e56:	68fb      	ldr	r3, [r7, #12]
     e58:	2b00      	cmp	r3, #0
     e5a:	d102      	bne.n	e62 <qstr_compute_hash+0x4a>
        hash++;
     e5c:	68fb      	ldr	r3, [r7, #12]
     e5e:	3301      	adds	r3, #1
     e60:	60fb      	str	r3, [r7, #12]
    }
    return hash;
     e62:	68fb      	ldr	r3, [r7, #12]
}
     e64:	4618      	mov	r0, r3
     e66:	3714      	adds	r7, #20
     e68:	46bd      	mov	sp, r7
     e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e6e:	4770      	bx	lr

00000e70 <qstr_init>:
#define CONST_POOL MICROPY_QSTR_EXTRA_POOL
#else
#define CONST_POOL mp_qstr_const_pool
#endif

void qstr_init(void) {
     e70:	b480      	push	{r7}
     e72:	af00      	add	r7, sp, #0
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
     e74:	4b05      	ldr	r3, [pc, #20]	; (e8c <qstr_init+0x1c>)
     e76:	4a06      	ldr	r2, [pc, #24]	; (e90 <qstr_init+0x20>)
     e78:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
     e7a:	4b04      	ldr	r3, [pc, #16]	; (e8c <qstr_init+0x1c>)
     e7c:	2200      	movs	r2, #0
     e7e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    #if MICROPY_PY_THREAD
    mp_thread_mutex_init(&MP_STATE_VM(qstr_mutex));
    #endif
}
     e82:	bf00      	nop
     e84:	46bd      	mov	sp, r7
     e86:	f85d 7b04 	ldr.w	r7, [sp], #4
     e8a:	4770      	bx	lr
     e8c:	20001240 	.word	0x20001240
     e90:	00025074 	.word	0x00025074

00000e94 <find_qstr>:

STATIC const byte *find_qstr(qstr q) {
     e94:	b480      	push	{r7}
     e96:	b085      	sub	sp, #20
     e98:	af00      	add	r7, sp, #0
     e9a:	6078      	str	r0, [r7, #4]
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
     e9c:	4b0c      	ldr	r3, [pc, #48]	; (ed0 <find_qstr+0x3c>)
     e9e:	691b      	ldr	r3, [r3, #16]
     ea0:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     ea2:	e002      	b.n	eaa <find_qstr+0x16>
        pool = pool->prev;
     ea4:	68fb      	ldr	r3, [r7, #12]
     ea6:	681b      	ldr	r3, [r3, #0]
     ea8:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     eaa:	68fb      	ldr	r3, [r7, #12]
     eac:	685a      	ldr	r2, [r3, #4]
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	429a      	cmp	r2, r3
     eb2:	d8f7      	bhi.n	ea4 <find_qstr+0x10>
    }
    return pool->qstrs[q - pool->total_prev_len];
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	685b      	ldr	r3, [r3, #4]
     eb8:	687a      	ldr	r2, [r7, #4]
     eba:	1ad2      	subs	r2, r2, r3
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	3204      	adds	r2, #4
     ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
     ec4:	4618      	mov	r0, r3
     ec6:	3714      	adds	r7, #20
     ec8:	46bd      	mov	sp, r7
     eca:	f85d 7b04 	ldr.w	r7, [sp], #4
     ece:	4770      	bx	lr
     ed0:	20001240 	.word	0x20001240

00000ed4 <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
     ed4:	b580      	push	{r7, lr}
     ed6:	b084      	sub	sp, #16
     ed8:	af00      	add	r7, sp, #0
     eda:	6078      	str	r0, [r7, #4]
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
     edc:	4b25      	ldr	r3, [pc, #148]	; (f74 <qstr_add+0xa0>)
     ede:	691b      	ldr	r3, [r3, #16]
     ee0:	68da      	ldr	r2, [r3, #12]
     ee2:	4b24      	ldr	r3, [pc, #144]	; (f74 <qstr_add+0xa0>)
     ee4:	691b      	ldr	r3, [r3, #16]
     ee6:	689b      	ldr	r3, [r3, #8]
     ee8:	429a      	cmp	r2, r3
     eea:	d32b      	bcc.n	f44 <qstr_add+0x70>
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
     eec:	4b21      	ldr	r3, [pc, #132]	; (f74 <qstr_add+0xa0>)
     eee:	691b      	ldr	r3, [r3, #16]
     ef0:	689b      	ldr	r3, [r3, #8]
     ef2:	3302      	adds	r3, #2
     ef4:	00db      	lsls	r3, r3, #3
     ef6:	4618      	mov	r0, r3
     ef8:	f7ff fa27 	bl	34a <m_malloc_maybe>
     efc:	60f8      	str	r0, [r7, #12]
        if (pool == NULL) {
     efe:	68fb      	ldr	r3, [r7, #12]
     f00:	2b00      	cmp	r3, #0
     f02:	d106      	bne.n	f12 <qstr_add+0x3e>
            QSTR_EXIT();
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
     f04:	4b1b      	ldr	r3, [pc, #108]	; (f74 <qstr_add+0xa0>)
     f06:	691b      	ldr	r3, [r3, #16]
     f08:	689b      	ldr	r3, [r3, #8]
     f0a:	005b      	lsls	r3, r3, #1
     f0c:	4618      	mov	r0, r3
     f0e:	f00b ff97 	bl	ce40 <m_malloc_fail>
        }
        pool->prev = MP_STATE_VM(last_pool);
     f12:	4b18      	ldr	r3, [pc, #96]	; (f74 <qstr_add+0xa0>)
     f14:	691a      	ldr	r2, [r3, #16]
     f16:	68fb      	ldr	r3, [r7, #12]
     f18:	601a      	str	r2, [r3, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
     f1a:	4b16      	ldr	r3, [pc, #88]	; (f74 <qstr_add+0xa0>)
     f1c:	691b      	ldr	r3, [r3, #16]
     f1e:	685a      	ldr	r2, [r3, #4]
     f20:	4b14      	ldr	r3, [pc, #80]	; (f74 <qstr_add+0xa0>)
     f22:	691b      	ldr	r3, [r3, #16]
     f24:	68db      	ldr	r3, [r3, #12]
     f26:	441a      	add	r2, r3
     f28:	68fb      	ldr	r3, [r7, #12]
     f2a:	605a      	str	r2, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
     f2c:	4b11      	ldr	r3, [pc, #68]	; (f74 <qstr_add+0xa0>)
     f2e:	691b      	ldr	r3, [r3, #16]
     f30:	689b      	ldr	r3, [r3, #8]
     f32:	005a      	lsls	r2, r3, #1
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	609a      	str	r2, [r3, #8]
        pool->len = 0;
     f38:	68fb      	ldr	r3, [r7, #12]
     f3a:	2200      	movs	r2, #0
     f3c:	60da      	str	r2, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
     f3e:	4a0d      	ldr	r2, [pc, #52]	; (f74 <qstr_add+0xa0>)
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	6113      	str	r3, [r2, #16]
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
     f44:	4b0b      	ldr	r3, [pc, #44]	; (f74 <qstr_add+0xa0>)
     f46:	6919      	ldr	r1, [r3, #16]
     f48:	4b0a      	ldr	r3, [pc, #40]	; (f74 <qstr_add+0xa0>)
     f4a:	691a      	ldr	r2, [r3, #16]
     f4c:	68d3      	ldr	r3, [r2, #12]
     f4e:	1c58      	adds	r0, r3, #1
     f50:	60d0      	str	r0, [r2, #12]
     f52:	3304      	adds	r3, #4
     f54:	687a      	ldr	r2, [r7, #4]
     f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
     f5a:	4b06      	ldr	r3, [pc, #24]	; (f74 <qstr_add+0xa0>)
     f5c:	691b      	ldr	r3, [r3, #16]
     f5e:	685a      	ldr	r2, [r3, #4]
     f60:	4b04      	ldr	r3, [pc, #16]	; (f74 <qstr_add+0xa0>)
     f62:	691b      	ldr	r3, [r3, #16]
     f64:	68db      	ldr	r3, [r3, #12]
     f66:	4413      	add	r3, r2
     f68:	3b01      	subs	r3, #1
}
     f6a:	4618      	mov	r0, r3
     f6c:	3710      	adds	r7, #16
     f6e:	46bd      	mov	sp, r7
     f70:	bd80      	pop	{r7, pc}
     f72:	bf00      	nop
     f74:	20001240 	.word	0x20001240

00000f78 <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
     f78:	b580      	push	{r7, lr}
     f7a:	b086      	sub	sp, #24
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
     f80:	6039      	str	r1, [r7, #0]
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
     f82:	6839      	ldr	r1, [r7, #0]
     f84:	6878      	ldr	r0, [r7, #4]
     f86:	f7ff ff47 	bl	e18 <qstr_compute_hash>
     f8a:	60f8      	str	r0, [r7, #12]

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
     f8c:	4b22      	ldr	r3, [pc, #136]	; (1018 <qstr_find_strn+0xa0>)
     f8e:	691b      	ldr	r3, [r3, #16]
     f90:	617b      	str	r3, [r7, #20]
     f92:	e038      	b.n	1006 <qstr_find_strn+0x8e>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
     f94:	697b      	ldr	r3, [r7, #20]
     f96:	3310      	adds	r3, #16
     f98:	613b      	str	r3, [r7, #16]
     f9a:	697b      	ldr	r3, [r7, #20]
     f9c:	f103 0210 	add.w	r2, r3, #16
     fa0:	697b      	ldr	r3, [r7, #20]
     fa2:	68db      	ldr	r3, [r3, #12]
     fa4:	009b      	lsls	r3, r3, #2
     fa6:	4413      	add	r3, r2
     fa8:	60bb      	str	r3, [r7, #8]
     faa:	e025      	b.n	ff8 <qstr_find_strn+0x80>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
     fac:	693b      	ldr	r3, [r7, #16]
     fae:	681b      	ldr	r3, [r3, #0]
     fb0:	781b      	ldrb	r3, [r3, #0]
     fb2:	461a      	mov	r2, r3
     fb4:	68fb      	ldr	r3, [r7, #12]
     fb6:	429a      	cmp	r2, r3
     fb8:	d11b      	bne.n	ff2 <qstr_find_strn+0x7a>
     fba:	693b      	ldr	r3, [r7, #16]
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	3301      	adds	r3, #1
     fc0:	781b      	ldrb	r3, [r3, #0]
     fc2:	461a      	mov	r2, r3
     fc4:	683b      	ldr	r3, [r7, #0]
     fc6:	429a      	cmp	r2, r3
     fc8:	d113      	bne.n	ff2 <qstr_find_strn+0x7a>
     fca:	693b      	ldr	r3, [r7, #16]
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	3302      	adds	r3, #2
     fd0:	683a      	ldr	r2, [r7, #0]
     fd2:	6879      	ldr	r1, [r7, #4]
     fd4:	4618      	mov	r0, r3
     fd6:	f01b fba8 	bl	1c72a <memcmp>
     fda:	4603      	mov	r3, r0
     fdc:	2b00      	cmp	r3, #0
     fde:	d108      	bne.n	ff2 <qstr_find_strn+0x7a>
                return pool->total_prev_len + (q - pool->qstrs);
     fe0:	697b      	ldr	r3, [r7, #20]
     fe2:	685b      	ldr	r3, [r3, #4]
     fe4:	693a      	ldr	r2, [r7, #16]
     fe6:	6979      	ldr	r1, [r7, #20]
     fe8:	3110      	adds	r1, #16
     fea:	1a52      	subs	r2, r2, r1
     fec:	1092      	asrs	r2, r2, #2
     fee:	4413      	add	r3, r2
     ff0:	e00d      	b.n	100e <qstr_find_strn+0x96>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
     ff2:	693b      	ldr	r3, [r7, #16]
     ff4:	3304      	adds	r3, #4
     ff6:	613b      	str	r3, [r7, #16]
     ff8:	693a      	ldr	r2, [r7, #16]
     ffa:	68bb      	ldr	r3, [r7, #8]
     ffc:	429a      	cmp	r2, r3
     ffe:	d3d5      	bcc.n	fac <qstr_find_strn+0x34>
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    1000:	697b      	ldr	r3, [r7, #20]
    1002:	681b      	ldr	r3, [r3, #0]
    1004:	617b      	str	r3, [r7, #20]
    1006:	697b      	ldr	r3, [r7, #20]
    1008:	2b00      	cmp	r3, #0
    100a:	d1c3      	bne.n	f94 <qstr_find_strn+0x1c>
            }
        }
    }

    // not found; return null qstr
    return 0;
    100c:	2300      	movs	r3, #0
}
    100e:	4618      	mov	r0, r3
    1010:	3718      	adds	r7, #24
    1012:	46bd      	mov	sp, r7
    1014:	bd80      	pop	{r7, pc}
    1016:	bf00      	nop
    1018:	20001240 	.word	0x20001240

0000101c <qstr_from_str>:

qstr qstr_from_str(const char *str) {
    101c:	b580      	push	{r7, lr}
    101e:	b082      	sub	sp, #8
    1020:	af00      	add	r7, sp, #0
    1022:	6078      	str	r0, [r7, #4]
    return qstr_from_strn(str, strlen(str));
    1024:	6878      	ldr	r0, [r7, #4]
    1026:	f01b fbd1 	bl	1c7cc <strlen>
    102a:	4603      	mov	r3, r0
    102c:	4619      	mov	r1, r3
    102e:	6878      	ldr	r0, [r7, #4]
    1030:	f000 f805 	bl	103e <qstr_from_strn>
    1034:	4603      	mov	r3, r0
}
    1036:	4618      	mov	r0, r3
    1038:	3708      	adds	r7, #8
    103a:	46bd      	mov	sp, r7
    103c:	bd80      	pop	{r7, pc}

0000103e <qstr_from_strn>:

qstr qstr_from_strn(const char *str, size_t len) {
    103e:	b580      	push	{r7, lr}
    1040:	b088      	sub	sp, #32
    1042:	af00      	add	r7, sp, #0
    1044:	6078      	str	r0, [r7, #4]
    1046:	6039      	str	r1, [r7, #0]
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    1048:	683b      	ldr	r3, [r7, #0]
    104a:	2bff      	cmp	r3, #255	; 0xff
    104c:	d905      	bls.n	105a <qstr_from_strn+0x1c>
    104e:	4b56      	ldr	r3, [pc, #344]	; (11a8 <qstr_from_strn+0x16a>)
    1050:	4a56      	ldr	r2, [pc, #344]	; (11ac <qstr_from_strn+0x16e>)
    1052:	21ba      	movs	r1, #186	; 0xba
    1054:	4856      	ldr	r0, [pc, #344]	; (11b0 <qstr_from_strn+0x172>)
    1056:	f01a f8c5 	bl	1b1e4 <__assert_func>
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    105a:	6839      	ldr	r1, [r7, #0]
    105c:	6878      	ldr	r0, [r7, #4]
    105e:	f7ff ff8b 	bl	f78 <qstr_find_strn>
    1062:	61f8      	str	r0, [r7, #28]
    if (q == 0) {
    1064:	69fb      	ldr	r3, [r7, #28]
    1066:	2b00      	cmp	r3, #0
    1068:	f040 8099 	bne.w	119e <qstr_from_strn+0x160>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    106c:	683b      	ldr	r3, [r7, #0]
    106e:	3303      	adds	r3, #3
    1070:	617b      	str	r3, [r7, #20]

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    1072:	4b50      	ldr	r3, [pc, #320]	; (11b4 <qstr_from_strn+0x176>)
    1074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1078:	2b00      	cmp	r3, #0
    107a:	d030      	beq.n	10de <qstr_from_strn+0xa0>
    107c:	4b4d      	ldr	r3, [pc, #308]	; (11b4 <qstr_from_strn+0x176>)
    107e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1082:	697b      	ldr	r3, [r7, #20]
    1084:	441a      	add	r2, r3
    1086:	4b4b      	ldr	r3, [pc, #300]	; (11b4 <qstr_from_strn+0x176>)
    1088:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    108c:	429a      	cmp	r2, r3
    108e:	d926      	bls.n	10de <qstr_from_strn+0xa0>
            // not enough room at end of previously interned string so try to grow
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    1090:	4b48      	ldr	r3, [pc, #288]	; (11b4 <qstr_from_strn+0x176>)
    1092:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    1096:	4b47      	ldr	r3, [pc, #284]	; (11b4 <qstr_from_strn+0x176>)
    1098:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    109c:	697b      	ldr	r3, [r7, #20]
    109e:	4413      	add	r3, r2
    10a0:	2200      	movs	r2, #0
    10a2:	4619      	mov	r1, r3
    10a4:	f7ff f985 	bl	3b2 <m_realloc_maybe>
    10a8:	6138      	str	r0, [r7, #16]
            if (new_p == NULL) {
    10aa:	693b      	ldr	r3, [r7, #16]
    10ac:	2b00      	cmp	r3, #0
    10ae:	d10e      	bne.n	10ce <qstr_from_strn+0x90>
                // could not grow existing memory; shrink it to fit previous
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    10b0:	4b40      	ldr	r3, [pc, #256]	; (11b4 <qstr_from_strn+0x176>)
    10b2:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    10b6:	4b3f      	ldr	r3, [pc, #252]	; (11b4 <qstr_from_strn+0x176>)
    10b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    10bc:	2200      	movs	r2, #0
    10be:	4619      	mov	r1, r3
    10c0:	f7ff f977 	bl	3b2 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    10c4:	4b3b      	ldr	r3, [pc, #236]	; (11b4 <qstr_from_strn+0x176>)
    10c6:	2200      	movs	r2, #0
    10c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    10cc:	e007      	b.n	10de <qstr_from_strn+0xa0>
            } else {
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    10ce:	4b39      	ldr	r3, [pc, #228]	; (11b4 <qstr_from_strn+0x176>)
    10d0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    10d4:	697b      	ldr	r3, [r7, #20]
    10d6:	4413      	add	r3, r2
    10d8:	4a36      	ldr	r2, [pc, #216]	; (11b4 <qstr_from_strn+0x176>)
    10da:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    10de:	4b35      	ldr	r3, [pc, #212]	; (11b4 <qstr_from_strn+0x176>)
    10e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    10e4:	2b00      	cmp	r3, #0
    10e6:	d12b      	bne.n	1140 <qstr_from_strn+0x102>
            // no existing memory for the interned string so allocate a new chunk
            size_t al = n_bytes;
    10e8:	697b      	ldr	r3, [r7, #20]
    10ea:	61bb      	str	r3, [r7, #24]
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    10ec:	69bb      	ldr	r3, [r7, #24]
    10ee:	2b7f      	cmp	r3, #127	; 0x7f
    10f0:	d801      	bhi.n	10f6 <qstr_from_strn+0xb8>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    10f2:	2380      	movs	r3, #128	; 0x80
    10f4:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    10f6:	69b8      	ldr	r0, [r7, #24]
    10f8:	f7ff f927 	bl	34a <m_malloc_maybe>
    10fc:	4602      	mov	r2, r0
    10fe:	4b2d      	ldr	r3, [pc, #180]	; (11b4 <qstr_from_strn+0x176>)
    1100:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1104:	4b2b      	ldr	r3, [pc, #172]	; (11b4 <qstr_from_strn+0x176>)
    1106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    110a:	2b00      	cmp	r3, #0
    110c:	d110      	bne.n	1130 <qstr_from_strn+0xf2>
                // failed to allocate a large chunk so try with exact size
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    110e:	6978      	ldr	r0, [r7, #20]
    1110:	f7ff f91b 	bl	34a <m_malloc_maybe>
    1114:	4602      	mov	r2, r0
    1116:	4b27      	ldr	r3, [pc, #156]	; (11b4 <qstr_from_strn+0x176>)
    1118:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    111c:	4b25      	ldr	r3, [pc, #148]	; (11b4 <qstr_from_strn+0x176>)
    111e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1122:	2b00      	cmp	r3, #0
    1124:	d102      	bne.n	112c <qstr_from_strn+0xee>
                    QSTR_EXIT();
                    m_malloc_fail(n_bytes);
    1126:	6978      	ldr	r0, [r7, #20]
    1128:	f00b fe8a 	bl	ce40 <m_malloc_fail>
                }
                al = n_bytes;
    112c:	697b      	ldr	r3, [r7, #20]
    112e:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_alloc) = al;
    1130:	4a20      	ldr	r2, [pc, #128]	; (11b4 <qstr_from_strn+0x176>)
    1132:	69bb      	ldr	r3, [r7, #24]
    1134:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            MP_STATE_VM(qstr_last_used) = 0;
    1138:	4b1e      	ldr	r3, [pc, #120]	; (11b4 <qstr_from_strn+0x176>)
    113a:	2200      	movs	r2, #0
    113c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    1140:	4b1c      	ldr	r3, [pc, #112]	; (11b4 <qstr_from_strn+0x176>)
    1142:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    1146:	4b1b      	ldr	r3, [pc, #108]	; (11b4 <qstr_from_strn+0x176>)
    1148:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    114c:	4413      	add	r3, r2
    114e:	60fb      	str	r3, [r7, #12]
        MP_STATE_VM(qstr_last_used) += n_bytes;
    1150:	4b18      	ldr	r3, [pc, #96]	; (11b4 <qstr_from_strn+0x176>)
    1152:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1156:	697b      	ldr	r3, [r7, #20]
    1158:	4413      	add	r3, r2
    115a:	4a16      	ldr	r2, [pc, #88]	; (11b4 <qstr_from_strn+0x176>)
    115c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    1160:	6839      	ldr	r1, [r7, #0]
    1162:	6878      	ldr	r0, [r7, #4]
    1164:	f7ff fe58 	bl	e18 <qstr_compute_hash>
    1168:	60b8      	str	r0, [r7, #8]
        Q_SET_HASH(q_ptr, hash);
    116a:	68bb      	ldr	r3, [r7, #8]
    116c:	b2da      	uxtb	r2, r3
    116e:	68fb      	ldr	r3, [r7, #12]
    1170:	701a      	strb	r2, [r3, #0]
        Q_SET_LENGTH(q_ptr, len);
    1172:	68fb      	ldr	r3, [r7, #12]
    1174:	3301      	adds	r3, #1
    1176:	683a      	ldr	r2, [r7, #0]
    1178:	b2d2      	uxtb	r2, r2
    117a:	701a      	strb	r2, [r3, #0]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    117c:	68fb      	ldr	r3, [r7, #12]
    117e:	3302      	adds	r3, #2
    1180:	683a      	ldr	r2, [r7, #0]
    1182:	6879      	ldr	r1, [r7, #4]
    1184:	4618      	mov	r0, r3
    1186:	f01b f9eb 	bl	1c560 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	3302      	adds	r3, #2
    118e:	68fa      	ldr	r2, [r7, #12]
    1190:	4413      	add	r3, r2
    1192:	2200      	movs	r2, #0
    1194:	701a      	strb	r2, [r3, #0]
        q = qstr_add(q_ptr);
    1196:	68f8      	ldr	r0, [r7, #12]
    1198:	f7ff fe9c 	bl	ed4 <qstr_add>
    119c:	61f8      	str	r0, [r7, #28]
    }
    QSTR_EXIT();
    return q;
    119e:	69fb      	ldr	r3, [r7, #28]
}
    11a0:	4618      	mov	r0, r3
    11a2:	3720      	adds	r7, #32
    11a4:	46bd      	mov	sp, r7
    11a6:	bd80      	pop	{r7, pc}
    11a8:	0001ee94 	.word	0x0001ee94
    11ac:	0001eed4 	.word	0x0001eed4
    11b0:	0001eec4 	.word	0x0001eec4
    11b4:	20001240 	.word	0x20001240

000011b8 <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    11b8:	b580      	push	{r7, lr}
    11ba:	b082      	sub	sp, #8
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
    return Q_GET_HASH(find_qstr(q));
    11c0:	6878      	ldr	r0, [r7, #4]
    11c2:	f7ff fe67 	bl	e94 <find_qstr>
    11c6:	4603      	mov	r3, r0
    11c8:	781b      	ldrb	r3, [r3, #0]
}
    11ca:	4618      	mov	r0, r3
    11cc:	3708      	adds	r7, #8
    11ce:	46bd      	mov	sp, r7
    11d0:	bd80      	pop	{r7, pc}

000011d2 <qstr_len>:

size_t qstr_len(qstr q) {
    11d2:	b580      	push	{r7, lr}
    11d4:	b084      	sub	sp, #16
    11d6:	af00      	add	r7, sp, #0
    11d8:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    11da:	6878      	ldr	r0, [r7, #4]
    11dc:	f7ff fe5a 	bl	e94 <find_qstr>
    11e0:	60f8      	str	r0, [r7, #12]
    return Q_GET_LENGTH(qd);
    11e2:	68fb      	ldr	r3, [r7, #12]
    11e4:	3301      	adds	r3, #1
    11e6:	781b      	ldrb	r3, [r3, #0]
}
    11e8:	4618      	mov	r0, r3
    11ea:	3710      	adds	r7, #16
    11ec:	46bd      	mov	sp, r7
    11ee:	bd80      	pop	{r7, pc}

000011f0 <qstr_str>:

const char *qstr_str(qstr q) {
    11f0:	b580      	push	{r7, lr}
    11f2:	b084      	sub	sp, #16
    11f4:	af00      	add	r7, sp, #0
    11f6:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    11f8:	6878      	ldr	r0, [r7, #4]
    11fa:	f7ff fe4b 	bl	e94 <find_qstr>
    11fe:	60f8      	str	r0, [r7, #12]
    return (const char*)Q_GET_DATA(qd);
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	3302      	adds	r3, #2
}
    1204:	4618      	mov	r0, r3
    1206:	3710      	adds	r7, #16
    1208:	46bd      	mov	sp, r7
    120a:	bd80      	pop	{r7, pc}

0000120c <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    120c:	b580      	push	{r7, lr}
    120e:	b084      	sub	sp, #16
    1210:	af00      	add	r7, sp, #0
    1212:	6078      	str	r0, [r7, #4]
    1214:	6039      	str	r1, [r7, #0]
    const byte *qd = find_qstr(q);
    1216:	6878      	ldr	r0, [r7, #4]
    1218:	f7ff fe3c 	bl	e94 <find_qstr>
    121c:	60f8      	str	r0, [r7, #12]
    *len = Q_GET_LENGTH(qd);
    121e:	68fb      	ldr	r3, [r7, #12]
    1220:	3301      	adds	r3, #1
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	461a      	mov	r2, r3
    1226:	683b      	ldr	r3, [r7, #0]
    1228:	601a      	str	r2, [r3, #0]
    return Q_GET_DATA(qd);
    122a:	68fb      	ldr	r3, [r7, #12]
    122c:	3302      	adds	r3, #2
}
    122e:	4618      	mov	r0, r3
    1230:	3710      	adds	r7, #16
    1232:	46bd      	mov	sp, r7
    1234:	bd80      	pop	{r7, pc}

00001236 <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    1236:	b580      	push	{r7, lr}
    1238:	b088      	sub	sp, #32
    123a:	af00      	add	r7, sp, #0
    123c:	60f8      	str	r0, [r7, #12]
    123e:	60b9      	str	r1, [r7, #8]
    1240:	607a      	str	r2, [r7, #4]
    1242:	603b      	str	r3, [r7, #0]
    QSTR_ENTER();
    *n_pool = 0;
    1244:	68fb      	ldr	r3, [r7, #12]
    1246:	2200      	movs	r2, #0
    1248:	601a      	str	r2, [r3, #0]
    *n_qstr = 0;
    124a:	68bb      	ldr	r3, [r7, #8]
    124c:	2200      	movs	r2, #0
    124e:	601a      	str	r2, [r3, #0]
    *n_str_data_bytes = 0;
    1250:	687b      	ldr	r3, [r7, #4]
    1252:	2200      	movs	r2, #0
    1254:	601a      	str	r2, [r3, #0]
    *n_total_bytes = 0;
    1256:	683b      	ldr	r3, [r7, #0]
    1258:	2200      	movs	r2, #0
    125a:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    125c:	4b25      	ldr	r3, [pc, #148]	; (12f4 <qstr_pool_info+0xbe>)
    125e:	691b      	ldr	r3, [r3, #16]
    1260:	61fb      	str	r3, [r7, #28]
    1262:	e034      	b.n	12ce <qstr_pool_info+0x98>
        *n_pool += 1;
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	681b      	ldr	r3, [r3, #0]
    1268:	1c5a      	adds	r2, r3, #1
    126a:	68fb      	ldr	r3, [r7, #12]
    126c:	601a      	str	r2, [r3, #0]
        *n_qstr += pool->len;
    126e:	68bb      	ldr	r3, [r7, #8]
    1270:	681a      	ldr	r2, [r3, #0]
    1272:	69fb      	ldr	r3, [r7, #28]
    1274:	68db      	ldr	r3, [r3, #12]
    1276:	441a      	add	r2, r3
    1278:	68bb      	ldr	r3, [r7, #8]
    127a:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    127c:	69fb      	ldr	r3, [r7, #28]
    127e:	3310      	adds	r3, #16
    1280:	61bb      	str	r3, [r7, #24]
    1282:	69fb      	ldr	r3, [r7, #28]
    1284:	f103 0210 	add.w	r2, r3, #16
    1288:	69fb      	ldr	r3, [r7, #28]
    128a:	68db      	ldr	r3, [r3, #12]
    128c:	009b      	lsls	r3, r3, #2
    128e:	4413      	add	r3, r2
    1290:	617b      	str	r3, [r7, #20]
    1292:	e00c      	b.n	12ae <qstr_pool_info+0x78>
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	681b      	ldr	r3, [r3, #0]
    1298:	69ba      	ldr	r2, [r7, #24]
    129a:	6812      	ldr	r2, [r2, #0]
    129c:	3201      	adds	r2, #1
    129e:	7812      	ldrb	r2, [r2, #0]
    12a0:	4413      	add	r3, r2
    12a2:	1cda      	adds	r2, r3, #3
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    12a8:	69bb      	ldr	r3, [r7, #24]
    12aa:	3304      	adds	r3, #4
    12ac:	61bb      	str	r3, [r7, #24]
    12ae:	69ba      	ldr	r2, [r7, #24]
    12b0:	697b      	ldr	r3, [r7, #20]
    12b2:	429a      	cmp	r2, r3
    12b4:	d3ee      	bcc.n	1294 <qstr_pool_info+0x5e>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    12b6:	69f8      	ldr	r0, [r7, #28]
    12b8:	f7ff fba2 	bl	a00 <gc_nbytes>
    12bc:	4602      	mov	r2, r0
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	441a      	add	r2, r3
    12c4:	683b      	ldr	r3, [r7, #0]
    12c6:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    12c8:	69fb      	ldr	r3, [r7, #28]
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	61fb      	str	r3, [r7, #28]
    12ce:	69fb      	ldr	r3, [r7, #28]
    12d0:	2b00      	cmp	r3, #0
    12d2:	d003      	beq.n	12dc <qstr_pool_info+0xa6>
    12d4:	69fb      	ldr	r3, [r7, #28]
    12d6:	4a08      	ldr	r2, [pc, #32]	; (12f8 <qstr_pool_info+0xc2>)
    12d8:	4293      	cmp	r3, r2
    12da:	d1c3      	bne.n	1264 <qstr_pool_info+0x2e>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    12dc:	683b      	ldr	r3, [r7, #0]
    12de:	681a      	ldr	r2, [r3, #0]
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	681b      	ldr	r3, [r3, #0]
    12e4:	441a      	add	r2, r3
    12e6:	683b      	ldr	r3, [r7, #0]
    12e8:	601a      	str	r2, [r3, #0]
    QSTR_EXIT();
}
    12ea:	bf00      	nop
    12ec:	3720      	adds	r7, #32
    12ee:	46bd      	mov	sp, r7
    12f0:	bd80      	pop	{r7, pc}
    12f2:	bf00      	nop
    12f4:	20001240 	.word	0x20001240
    12f8:	00025074 	.word	0x00025074

000012fc <vstr_init>:

// returned value is always at least 1 greater than argument
#define ROUND_ALLOC(a) (((a) & ((~0U) - 7)) + 8)

// Init the vstr so it allocs exactly given number of bytes.  Set length to zero.
void vstr_init(vstr_t *vstr, size_t alloc) {
    12fc:	b580      	push	{r7, lr}
    12fe:	b082      	sub	sp, #8
    1300:	af00      	add	r7, sp, #0
    1302:	6078      	str	r0, [r7, #4]
    1304:	6039      	str	r1, [r7, #0]
    if (alloc < 1) {
    1306:	683b      	ldr	r3, [r7, #0]
    1308:	2b00      	cmp	r3, #0
    130a:	d101      	bne.n	1310 <vstr_init+0x14>
        alloc = 1;
    130c:	2301      	movs	r3, #1
    130e:	603b      	str	r3, [r7, #0]
    }
    vstr->alloc = alloc;
    1310:	687b      	ldr	r3, [r7, #4]
    1312:	683a      	ldr	r2, [r7, #0]
    1314:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	2200      	movs	r2, #0
    131a:	605a      	str	r2, [r3, #4]
    vstr->buf = m_new(char, vstr->alloc);
    131c:	687b      	ldr	r3, [r7, #4]
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	4618      	mov	r0, r3
    1322:	f7fe fffb 	bl	31c <m_malloc>
    1326:	4602      	mov	r2, r0
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = false;
    132c:	687a      	ldr	r2, [r7, #4]
    132e:	7b13      	ldrb	r3, [r2, #12]
    1330:	f36f 0300 	bfc	r3, #0, #1
    1334:	7313      	strb	r3, [r2, #12]
}
    1336:	bf00      	nop
    1338:	3708      	adds	r7, #8
    133a:	46bd      	mov	sp, r7
    133c:	bd80      	pop	{r7, pc}

0000133e <vstr_init_len>:

// Init the vstr so it allocs exactly enough ram to hold a null-terminated
// string of the given length, and set the length.
void vstr_init_len(vstr_t *vstr, size_t len) {
    133e:	b580      	push	{r7, lr}
    1340:	b082      	sub	sp, #8
    1342:	af00      	add	r7, sp, #0
    1344:	6078      	str	r0, [r7, #4]
    1346:	6039      	str	r1, [r7, #0]
    vstr_init(vstr, len + 1);
    1348:	683b      	ldr	r3, [r7, #0]
    134a:	3301      	adds	r3, #1
    134c:	4619      	mov	r1, r3
    134e:	6878      	ldr	r0, [r7, #4]
    1350:	f7ff ffd4 	bl	12fc <vstr_init>
    vstr->len = len;
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	683a      	ldr	r2, [r7, #0]
    1358:	605a      	str	r2, [r3, #4]
}
    135a:	bf00      	nop
    135c:	3708      	adds	r7, #8
    135e:	46bd      	mov	sp, r7
    1360:	bd80      	pop	{r7, pc}

00001362 <vstr_init_fixed_buf>:

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    1362:	b480      	push	{r7}
    1364:	b085      	sub	sp, #20
    1366:	af00      	add	r7, sp, #0
    1368:	60f8      	str	r0, [r7, #12]
    136a:	60b9      	str	r1, [r7, #8]
    136c:	607a      	str	r2, [r7, #4]
    vstr->alloc = alloc;
    136e:	68fb      	ldr	r3, [r7, #12]
    1370:	68ba      	ldr	r2, [r7, #8]
    1372:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    1374:	68fb      	ldr	r3, [r7, #12]
    1376:	2200      	movs	r2, #0
    1378:	605a      	str	r2, [r3, #4]
    vstr->buf = buf;
    137a:	68fb      	ldr	r3, [r7, #12]
    137c:	687a      	ldr	r2, [r7, #4]
    137e:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = true;
    1380:	68fa      	ldr	r2, [r7, #12]
    1382:	7b13      	ldrb	r3, [r2, #12]
    1384:	f043 0301 	orr.w	r3, r3, #1
    1388:	7313      	strb	r3, [r2, #12]
}
    138a:	bf00      	nop
    138c:	3714      	adds	r7, #20
    138e:	46bd      	mov	sp, r7
    1390:	f85d 7b04 	ldr.w	r7, [sp], #4
    1394:	4770      	bx	lr

00001396 <vstr_init_print>:

void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    1396:	b580      	push	{r7, lr}
    1398:	b084      	sub	sp, #16
    139a:	af00      	add	r7, sp, #0
    139c:	60f8      	str	r0, [r7, #12]
    139e:	60b9      	str	r1, [r7, #8]
    13a0:	607a      	str	r2, [r7, #4]
    vstr_init(vstr, alloc);
    13a2:	68b9      	ldr	r1, [r7, #8]
    13a4:	68f8      	ldr	r0, [r7, #12]
    13a6:	f7ff ffa9 	bl	12fc <vstr_init>
    print->data = vstr;
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	68fa      	ldr	r2, [r7, #12]
    13ae:	601a      	str	r2, [r3, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	4a03      	ldr	r2, [pc, #12]	; (13c0 <vstr_init_print+0x2a>)
    13b4:	605a      	str	r2, [r3, #4]
}
    13b6:	bf00      	nop
    13b8:	3710      	adds	r7, #16
    13ba:	46bd      	mov	sp, r7
    13bc:	bd80      	pop	{r7, pc}
    13be:	bf00      	nop
    13c0:	00001607 	.word	0x00001607

000013c4 <vstr_clear>:

void vstr_clear(vstr_t *vstr) {
    13c4:	b580      	push	{r7, lr}
    13c6:	b082      	sub	sp, #8
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    if (!vstr->fixed_buf) {
    13cc:	687b      	ldr	r3, [r7, #4]
    13ce:	7b1b      	ldrb	r3, [r3, #12]
    13d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
    13d4:	b2db      	uxtb	r3, r3
    13d6:	f083 0301 	eor.w	r3, r3, #1
    13da:	b2db      	uxtb	r3, r3
    13dc:	2b00      	cmp	r3, #0
    13de:	d004      	beq.n	13ea <vstr_clear+0x26>
        m_del(char, vstr->buf, vstr->alloc);
    13e0:	687b      	ldr	r3, [r7, #4]
    13e2:	689b      	ldr	r3, [r3, #8]
    13e4:	4618      	mov	r0, r3
    13e6:	f7fe fff7 	bl	3d8 <m_free>
    }
    vstr->buf = NULL;
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	2200      	movs	r2, #0
    13ee:	609a      	str	r2, [r3, #8]
}
    13f0:	bf00      	nop
    13f2:	3708      	adds	r7, #8
    13f4:	46bd      	mov	sp, r7
    13f6:	bd80      	pop	{r7, pc}

000013f8 <vstr_new>:

vstr_t *vstr_new(size_t alloc) {
    13f8:	b580      	push	{r7, lr}
    13fa:	b084      	sub	sp, #16
    13fc:	af00      	add	r7, sp, #0
    13fe:	6078      	str	r0, [r7, #4]
    vstr_t *vstr = m_new_obj(vstr_t);
    1400:	2010      	movs	r0, #16
    1402:	f7fe ff8b 	bl	31c <m_malloc>
    1406:	60f8      	str	r0, [r7, #12]
    vstr_init(vstr, alloc);
    1408:	6879      	ldr	r1, [r7, #4]
    140a:	68f8      	ldr	r0, [r7, #12]
    140c:	f7ff ff76 	bl	12fc <vstr_init>
    return vstr;
    1410:	68fb      	ldr	r3, [r7, #12]
}
    1412:	4618      	mov	r0, r3
    1414:	3710      	adds	r7, #16
    1416:	46bd      	mov	sp, r7
    1418:	bd80      	pop	{r7, pc}

0000141a <vstr_free>:

void vstr_free(vstr_t *vstr) {
    141a:	b580      	push	{r7, lr}
    141c:	b082      	sub	sp, #8
    141e:	af00      	add	r7, sp, #0
    1420:	6078      	str	r0, [r7, #4]
    if (vstr != NULL) {
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	2b00      	cmp	r3, #0
    1426:	d011      	beq.n	144c <vstr_free+0x32>
        if (!vstr->fixed_buf) {
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	7b1b      	ldrb	r3, [r3, #12]
    142c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1430:	b2db      	uxtb	r3, r3
    1432:	f083 0301 	eor.w	r3, r3, #1
    1436:	b2db      	uxtb	r3, r3
    1438:	2b00      	cmp	r3, #0
    143a:	d004      	beq.n	1446 <vstr_free+0x2c>
            m_del(char, vstr->buf, vstr->alloc);
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	689b      	ldr	r3, [r3, #8]
    1440:	4618      	mov	r0, r3
    1442:	f7fe ffc9 	bl	3d8 <m_free>
        }
        m_del_obj(vstr_t, vstr);
    1446:	6878      	ldr	r0, [r7, #4]
    1448:	f7fe ffc6 	bl	3d8 <m_free>
    }
}
    144c:	bf00      	nop
    144e:	3708      	adds	r7, #8
    1450:	46bd      	mov	sp, r7
    1452:	bd80      	pop	{r7, pc}

00001454 <vstr_extend>:

// Extend vstr strictly by requested size, return pointer to newly added chunk.
char *vstr_extend(vstr_t *vstr, size_t size) {
    1454:	b580      	push	{r7, lr}
    1456:	b084      	sub	sp, #16
    1458:	af00      	add	r7, sp, #0
    145a:	6078      	str	r0, [r7, #4]
    145c:	6039      	str	r1, [r7, #0]
    if (vstr->fixed_buf) {
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	7b1b      	ldrb	r3, [r3, #12]
    1462:	f003 0301 	and.w	r3, r3, #1
    1466:	b2db      	uxtb	r3, r3
    1468:	2b00      	cmp	r3, #0
    146a:	d003      	beq.n	1474 <vstr_extend+0x20>
        // We can't reallocate, and the caller is expecting the space to
        // be there, so the only safe option is to raise an exception.
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    146c:	2100      	movs	r1, #0
    146e:	4810      	ldr	r0, [pc, #64]	; (14b0 <vstr_extend+0x5c>)
    1470:	f00b fd02 	bl	ce78 <mp_raise_msg>
    }
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    1474:	687b      	ldr	r3, [r7, #4]
    1476:	6898      	ldr	r0, [r3, #8]
    1478:	687b      	ldr	r3, [r7, #4]
    147a:	681a      	ldr	r2, [r3, #0]
    147c:	683b      	ldr	r3, [r7, #0]
    147e:	4413      	add	r3, r2
    1480:	4619      	mov	r1, r3
    1482:	f7fe ff7d 	bl	380 <m_realloc>
    1486:	60f8      	str	r0, [r7, #12]
    char *p = new_buf + vstr->alloc;
    1488:	687b      	ldr	r3, [r7, #4]
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	4413      	add	r3, r2
    1490:	60bb      	str	r3, [r7, #8]
    vstr->alloc += size;
    1492:	687b      	ldr	r3, [r7, #4]
    1494:	681a      	ldr	r2, [r3, #0]
    1496:	683b      	ldr	r3, [r7, #0]
    1498:	441a      	add	r2, r3
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	601a      	str	r2, [r3, #0]
    vstr->buf = new_buf;
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	68fa      	ldr	r2, [r7, #12]
    14a2:	609a      	str	r2, [r3, #8]
    return p;
    14a4:	68bb      	ldr	r3, [r7, #8]
}
    14a6:	4618      	mov	r0, r3
    14a8:	3710      	adds	r7, #16
    14aa:	46bd      	mov	sp, r7
    14ac:	bd80      	pop	{r7, pc}
    14ae:	bf00      	nop
    14b0:	00021d2c 	.word	0x00021d2c

000014b4 <vstr_ensure_extra>:

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    14b4:	b580      	push	{r7, lr}
    14b6:	b084      	sub	sp, #16
    14b8:	af00      	add	r7, sp, #0
    14ba:	6078      	str	r0, [r7, #4]
    14bc:	6039      	str	r1, [r7, #0]
    if (vstr->len + size > vstr->alloc) {
    14be:	687b      	ldr	r3, [r7, #4]
    14c0:	685a      	ldr	r2, [r3, #4]
    14c2:	683b      	ldr	r3, [r7, #0]
    14c4:	441a      	add	r2, r3
    14c6:	687b      	ldr	r3, [r7, #4]
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	429a      	cmp	r2, r3
    14cc:	d920      	bls.n	1510 <vstr_ensure_extra+0x5c>
        if (vstr->fixed_buf) {
    14ce:	687b      	ldr	r3, [r7, #4]
    14d0:	7b1b      	ldrb	r3, [r3, #12]
    14d2:	f003 0301 	and.w	r3, r3, #1
    14d6:	b2db      	uxtb	r3, r3
    14d8:	2b00      	cmp	r3, #0
    14da:	d003      	beq.n	14e4 <vstr_ensure_extra+0x30>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    14dc:	2100      	movs	r1, #0
    14de:	480e      	ldr	r0, [pc, #56]	; (1518 <vstr_ensure_extra+0x64>)
    14e0:	f00b fcca 	bl	ce78 <mp_raise_msg>
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	685a      	ldr	r2, [r3, #4]
    14e8:	683b      	ldr	r3, [r7, #0]
    14ea:	4413      	add	r3, r2
    14ec:	3310      	adds	r3, #16
    14ee:	f023 0307 	bic.w	r3, r3, #7
    14f2:	3308      	adds	r3, #8
    14f4:	60fb      	str	r3, [r7, #12]
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	689b      	ldr	r3, [r3, #8]
    14fa:	68f9      	ldr	r1, [r7, #12]
    14fc:	4618      	mov	r0, r3
    14fe:	f7fe ff3f 	bl	380 <m_realloc>
    1502:	60b8      	str	r0, [r7, #8]
        vstr->alloc = new_alloc;
    1504:	687b      	ldr	r3, [r7, #4]
    1506:	68fa      	ldr	r2, [r7, #12]
    1508:	601a      	str	r2, [r3, #0]
        vstr->buf = new_buf;
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	68ba      	ldr	r2, [r7, #8]
    150e:	609a      	str	r2, [r3, #8]
    }
}
    1510:	bf00      	nop
    1512:	3710      	adds	r7, #16
    1514:	46bd      	mov	sp, r7
    1516:	bd80      	pop	{r7, pc}
    1518:	00021d2c 	.word	0x00021d2c

0000151c <vstr_hint_size>:

void vstr_hint_size(vstr_t *vstr, size_t size) {
    151c:	b580      	push	{r7, lr}
    151e:	b082      	sub	sp, #8
    1520:	af00      	add	r7, sp, #0
    1522:	6078      	str	r0, [r7, #4]
    1524:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, size);
    1526:	6839      	ldr	r1, [r7, #0]
    1528:	6878      	ldr	r0, [r7, #4]
    152a:	f7ff ffc3 	bl	14b4 <vstr_ensure_extra>
}
    152e:	bf00      	nop
    1530:	3708      	adds	r7, #8
    1532:	46bd      	mov	sp, r7
    1534:	bd80      	pop	{r7, pc}

00001536 <vstr_add_len>:

char *vstr_add_len(vstr_t *vstr, size_t len) {
    1536:	b580      	push	{r7, lr}
    1538:	b084      	sub	sp, #16
    153a:	af00      	add	r7, sp, #0
    153c:	6078      	str	r0, [r7, #4]
    153e:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, len);
    1540:	6839      	ldr	r1, [r7, #0]
    1542:	6878      	ldr	r0, [r7, #4]
    1544:	f7ff ffb6 	bl	14b4 <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	689a      	ldr	r2, [r3, #8]
    154c:	687b      	ldr	r3, [r7, #4]
    154e:	685b      	ldr	r3, [r3, #4]
    1550:	4413      	add	r3, r2
    1552:	60fb      	str	r3, [r7, #12]
    vstr->len += len;
    1554:	687b      	ldr	r3, [r7, #4]
    1556:	685a      	ldr	r2, [r3, #4]
    1558:	683b      	ldr	r3, [r7, #0]
    155a:	441a      	add	r2, r3
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	605a      	str	r2, [r3, #4]
    return buf;
    1560:	68fb      	ldr	r3, [r7, #12]
}
    1562:	4618      	mov	r0, r3
    1564:	3710      	adds	r7, #16
    1566:	46bd      	mov	sp, r7
    1568:	bd80      	pop	{r7, pc}

0000156a <vstr_null_terminated_str>:

// Doesn't increase len, just makes sure there is a null byte at the end
char *vstr_null_terminated_str(vstr_t *vstr) {
    156a:	b580      	push	{r7, lr}
    156c:	b082      	sub	sp, #8
    156e:	af00      	add	r7, sp, #0
    1570:	6078      	str	r0, [r7, #4]
    // If there's no more room, add single byte
    if (vstr->alloc == vstr->len) {
    1572:	687b      	ldr	r3, [r7, #4]
    1574:	681a      	ldr	r2, [r3, #0]
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	685b      	ldr	r3, [r3, #4]
    157a:	429a      	cmp	r2, r3
    157c:	d103      	bne.n	1586 <vstr_null_terminated_str+0x1c>
        vstr_extend(vstr, 1);
    157e:	2101      	movs	r1, #1
    1580:	6878      	ldr	r0, [r7, #4]
    1582:	f7ff ff67 	bl	1454 <vstr_extend>
    }
    vstr->buf[vstr->len] = '\0';
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	689a      	ldr	r2, [r3, #8]
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	685b      	ldr	r3, [r3, #4]
    158e:	4413      	add	r3, r2
    1590:	2200      	movs	r2, #0
    1592:	701a      	strb	r2, [r3, #0]
    return vstr->buf;
    1594:	687b      	ldr	r3, [r7, #4]
    1596:	689b      	ldr	r3, [r3, #8]
}
    1598:	4618      	mov	r0, r3
    159a:	3708      	adds	r7, #8
    159c:	46bd      	mov	sp, r7
    159e:	bd80      	pop	{r7, pc}

000015a0 <vstr_add_byte>:

void vstr_add_byte(vstr_t *vstr, byte b) {
    15a0:	b580      	push	{r7, lr}
    15a2:	b084      	sub	sp, #16
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	460b      	mov	r3, r1
    15aa:	70fb      	strb	r3, [r7, #3]
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    15ac:	2101      	movs	r1, #1
    15ae:	6878      	ldr	r0, [r7, #4]
    15b0:	f7ff ffc1 	bl	1536 <vstr_add_len>
    15b4:	60f8      	str	r0, [r7, #12]
    buf[0] = b;
    15b6:	68fb      	ldr	r3, [r7, #12]
    15b8:	78fa      	ldrb	r2, [r7, #3]
    15ba:	701a      	strb	r2, [r3, #0]
}
    15bc:	bf00      	nop
    15be:	3710      	adds	r7, #16
    15c0:	46bd      	mov	sp, r7
    15c2:	bd80      	pop	{r7, pc}

000015c4 <vstr_add_char>:

void vstr_add_char(vstr_t *vstr, unichar c) {
    15c4:	b580      	push	{r7, lr}
    15c6:	b082      	sub	sp, #8
    15c8:	af00      	add	r7, sp, #0
    15ca:	6078      	str	r0, [r7, #4]
    15cc:	6039      	str	r1, [r7, #0]
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
#else
    vstr_add_byte(vstr, c);
    15ce:	683b      	ldr	r3, [r7, #0]
    15d0:	b2db      	uxtb	r3, r3
    15d2:	4619      	mov	r1, r3
    15d4:	6878      	ldr	r0, [r7, #4]
    15d6:	f7ff ffe3 	bl	15a0 <vstr_add_byte>
#endif
}
    15da:	bf00      	nop
    15dc:	3708      	adds	r7, #8
    15de:	46bd      	mov	sp, r7
    15e0:	bd80      	pop	{r7, pc}

000015e2 <vstr_add_str>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    15e2:	b580      	push	{r7, lr}
    15e4:	b082      	sub	sp, #8
    15e6:	af00      	add	r7, sp, #0
    15e8:	6078      	str	r0, [r7, #4]
    15ea:	6039      	str	r1, [r7, #0]
    vstr_add_strn(vstr, str, strlen(str));
    15ec:	6838      	ldr	r0, [r7, #0]
    15ee:	f01b f8ed 	bl	1c7cc <strlen>
    15f2:	4603      	mov	r3, r0
    15f4:	461a      	mov	r2, r3
    15f6:	6839      	ldr	r1, [r7, #0]
    15f8:	6878      	ldr	r0, [r7, #4]
    15fa:	f000 f804 	bl	1606 <vstr_add_strn>
}
    15fe:	bf00      	nop
    1600:	3708      	adds	r7, #8
    1602:	46bd      	mov	sp, r7
    1604:	bd80      	pop	{r7, pc}

00001606 <vstr_add_strn>:

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    1606:	b580      	push	{r7, lr}
    1608:	b084      	sub	sp, #16
    160a:	af00      	add	r7, sp, #0
    160c:	60f8      	str	r0, [r7, #12]
    160e:	60b9      	str	r1, [r7, #8]
    1610:	607a      	str	r2, [r7, #4]
    vstr_ensure_extra(vstr, len);
    1612:	6879      	ldr	r1, [r7, #4]
    1614:	68f8      	ldr	r0, [r7, #12]
    1616:	f7ff ff4d 	bl	14b4 <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    161a:	68fb      	ldr	r3, [r7, #12]
    161c:	689a      	ldr	r2, [r3, #8]
    161e:	68fb      	ldr	r3, [r7, #12]
    1620:	685b      	ldr	r3, [r3, #4]
    1622:	4413      	add	r3, r2
    1624:	687a      	ldr	r2, [r7, #4]
    1626:	68b9      	ldr	r1, [r7, #8]
    1628:	4618      	mov	r0, r3
    162a:	f01a fffe 	bl	1c62a <memmove>
    vstr->len += len;
    162e:	68fb      	ldr	r3, [r7, #12]
    1630:	685a      	ldr	r2, [r3, #4]
    1632:	687b      	ldr	r3, [r7, #4]
    1634:	441a      	add	r2, r3
    1636:	68fb      	ldr	r3, [r7, #12]
    1638:	605a      	str	r2, [r3, #4]
}
    163a:	bf00      	nop
    163c:	3710      	adds	r7, #16
    163e:	46bd      	mov	sp, r7
    1640:	bd80      	pop	{r7, pc}

00001642 <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    1642:	b580      	push	{r7, lr}
    1644:	b086      	sub	sp, #24
    1646:	af00      	add	r7, sp, #0
    1648:	60f8      	str	r0, [r7, #12]
    164a:	60b9      	str	r1, [r7, #8]
    164c:	607a      	str	r2, [r7, #4]
    size_t l = vstr->len;
    164e:	68fb      	ldr	r3, [r7, #12]
    1650:	685b      	ldr	r3, [r3, #4]
    1652:	617b      	str	r3, [r7, #20]
    if (byte_pos > l) {
    1654:	68ba      	ldr	r2, [r7, #8]
    1656:	697b      	ldr	r3, [r7, #20]
    1658:	429a      	cmp	r2, r3
    165a:	d901      	bls.n	1660 <vstr_ins_blank_bytes+0x1e>
        byte_pos = l;
    165c:	697b      	ldr	r3, [r7, #20]
    165e:	60bb      	str	r3, [r7, #8]
    }
    if (byte_len > 0) {
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	2b00      	cmp	r3, #0
    1664:	d019      	beq.n	169a <vstr_ins_blank_bytes+0x58>
        // ensure room for the new bytes
        vstr_ensure_extra(vstr, byte_len);
    1666:	6879      	ldr	r1, [r7, #4]
    1668:	68f8      	ldr	r0, [r7, #12]
    166a:	f7ff ff23 	bl	14b4 <vstr_ensure_extra>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	689a      	ldr	r2, [r3, #8]
    1672:	68b9      	ldr	r1, [r7, #8]
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	440b      	add	r3, r1
    1678:	18d0      	adds	r0, r2, r3
    167a:	68fb      	ldr	r3, [r7, #12]
    167c:	689a      	ldr	r2, [r3, #8]
    167e:	68bb      	ldr	r3, [r7, #8]
    1680:	18d1      	adds	r1, r2, r3
    1682:	697a      	ldr	r2, [r7, #20]
    1684:	68bb      	ldr	r3, [r7, #8]
    1686:	1ad3      	subs	r3, r2, r3
    1688:	461a      	mov	r2, r3
    168a:	f01a ffce 	bl	1c62a <memmove>
        // increase the length
        vstr->len += byte_len;
    168e:	68fb      	ldr	r3, [r7, #12]
    1690:	685a      	ldr	r2, [r3, #4]
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	441a      	add	r2, r3
    1696:	68fb      	ldr	r3, [r7, #12]
    1698:	605a      	str	r2, [r3, #4]
    }
    return vstr->buf + byte_pos;
    169a:	68fb      	ldr	r3, [r7, #12]
    169c:	689a      	ldr	r2, [r3, #8]
    169e:	68bb      	ldr	r3, [r7, #8]
    16a0:	4413      	add	r3, r2
}
    16a2:	4618      	mov	r0, r3
    16a4:	3718      	adds	r7, #24
    16a6:	46bd      	mov	sp, r7
    16a8:	bd80      	pop	{r7, pc}

000016aa <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    16aa:	b580      	push	{r7, lr}
    16ac:	b086      	sub	sp, #24
    16ae:	af00      	add	r7, sp, #0
    16b0:	60f8      	str	r0, [r7, #12]
    16b2:	60b9      	str	r1, [r7, #8]
    16b4:	4613      	mov	r3, r2
    16b6:	71fb      	strb	r3, [r7, #7]
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    16b8:	2201      	movs	r2, #1
    16ba:	68b9      	ldr	r1, [r7, #8]
    16bc:	68f8      	ldr	r0, [r7, #12]
    16be:	f7ff ffc0 	bl	1642 <vstr_ins_blank_bytes>
    16c2:	6178      	str	r0, [r7, #20]
    *s = b;
    16c4:	697b      	ldr	r3, [r7, #20]
    16c6:	79fa      	ldrb	r2, [r7, #7]
    16c8:	701a      	strb	r2, [r3, #0]
}
    16ca:	bf00      	nop
    16cc:	3718      	adds	r7, #24
    16ce:	46bd      	mov	sp, r7
    16d0:	bd80      	pop	{r7, pc}

000016d2 <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    16d2:	b580      	push	{r7, lr}
    16d4:	b086      	sub	sp, #24
    16d6:	af00      	add	r7, sp, #0
    16d8:	60f8      	str	r0, [r7, #12]
    16da:	60b9      	str	r1, [r7, #8]
    16dc:	607a      	str	r2, [r7, #4]
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    16de:	2201      	movs	r2, #1
    16e0:	68b9      	ldr	r1, [r7, #8]
    16e2:	68f8      	ldr	r0, [r7, #12]
    16e4:	f7ff ffad 	bl	1642 <vstr_ins_blank_bytes>
    16e8:	6178      	str	r0, [r7, #20]
    *s = chr;
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	b2da      	uxtb	r2, r3
    16ee:	697b      	ldr	r3, [r7, #20]
    16f0:	701a      	strb	r2, [r3, #0]
}
    16f2:	bf00      	nop
    16f4:	3718      	adds	r7, #24
    16f6:	46bd      	mov	sp, r7
    16f8:	bd80      	pop	{r7, pc}

000016fa <vstr_cut_head_bytes>:

void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    16fa:	b580      	push	{r7, lr}
    16fc:	b082      	sub	sp, #8
    16fe:	af00      	add	r7, sp, #0
    1700:	6078      	str	r0, [r7, #4]
    1702:	6039      	str	r1, [r7, #0]
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
    1704:	683a      	ldr	r2, [r7, #0]
    1706:	2100      	movs	r1, #0
    1708:	6878      	ldr	r0, [r7, #4]
    170a:	f000 f81e 	bl	174a <vstr_cut_out_bytes>
}
    170e:	bf00      	nop
    1710:	3708      	adds	r7, #8
    1712:	46bd      	mov	sp, r7
    1714:	bd80      	pop	{r7, pc}

00001716 <vstr_cut_tail_bytes>:

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    1716:	b480      	push	{r7}
    1718:	b083      	sub	sp, #12
    171a:	af00      	add	r7, sp, #0
    171c:	6078      	str	r0, [r7, #4]
    171e:	6039      	str	r1, [r7, #0]
    if (len > vstr->len) {
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	685a      	ldr	r2, [r3, #4]
    1724:	683b      	ldr	r3, [r7, #0]
    1726:	429a      	cmp	r2, r3
    1728:	d203      	bcs.n	1732 <vstr_cut_tail_bytes+0x1c>
        vstr->len = 0;
    172a:	687b      	ldr	r3, [r7, #4]
    172c:	2200      	movs	r2, #0
    172e:	605a      	str	r2, [r3, #4]
    } else {
        vstr->len -= len;
    }
}
    1730:	e005      	b.n	173e <vstr_cut_tail_bytes+0x28>
        vstr->len -= len;
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	685a      	ldr	r2, [r3, #4]
    1736:	683b      	ldr	r3, [r7, #0]
    1738:	1ad2      	subs	r2, r2, r3
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	605a      	str	r2, [r3, #4]
}
    173e:	bf00      	nop
    1740:	370c      	adds	r7, #12
    1742:	46bd      	mov	sp, r7
    1744:	f85d 7b04 	ldr.w	r7, [sp], #4
    1748:	4770      	bx	lr

0000174a <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    174a:	b580      	push	{r7, lr}
    174c:	b084      	sub	sp, #16
    174e:	af00      	add	r7, sp, #0
    1750:	60f8      	str	r0, [r7, #12]
    1752:	60b9      	str	r1, [r7, #8]
    1754:	607a      	str	r2, [r7, #4]
    if (byte_pos >= vstr->len) {
    1756:	68fb      	ldr	r3, [r7, #12]
    1758:	685a      	ldr	r2, [r3, #4]
    175a:	68bb      	ldr	r3, [r7, #8]
    175c:	429a      	cmp	r2, r3
    175e:	d924      	bls.n	17aa <vstr_cut_out_bytes+0x60>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    1760:	68ba      	ldr	r2, [r7, #8]
    1762:	687b      	ldr	r3, [r7, #4]
    1764:	441a      	add	r2, r3
    1766:	68fb      	ldr	r3, [r7, #12]
    1768:	685b      	ldr	r3, [r3, #4]
    176a:	429a      	cmp	r2, r3
    176c:	d303      	bcc.n	1776 <vstr_cut_out_bytes+0x2c>
        vstr->len = byte_pos;
    176e:	68fb      	ldr	r3, [r7, #12]
    1770:	68ba      	ldr	r2, [r7, #8]
    1772:	605a      	str	r2, [r3, #4]
    1774:	e01a      	b.n	17ac <vstr_cut_out_bytes+0x62>
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    1776:	68fb      	ldr	r3, [r7, #12]
    1778:	689a      	ldr	r2, [r3, #8]
    177a:	68bb      	ldr	r3, [r7, #8]
    177c:	18d0      	adds	r0, r2, r3
    177e:	68fb      	ldr	r3, [r7, #12]
    1780:	689a      	ldr	r2, [r3, #8]
    1782:	68b9      	ldr	r1, [r7, #8]
    1784:	687b      	ldr	r3, [r7, #4]
    1786:	440b      	add	r3, r1
    1788:	18d1      	adds	r1, r2, r3
    178a:	68fb      	ldr	r3, [r7, #12]
    178c:	685a      	ldr	r2, [r3, #4]
    178e:	68bb      	ldr	r3, [r7, #8]
    1790:	1ad2      	subs	r2, r2, r3
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	1ad3      	subs	r3, r2, r3
    1796:	461a      	mov	r2, r3
    1798:	f01a ff47 	bl	1c62a <memmove>
        vstr->len -= bytes_to_cut;
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	685a      	ldr	r2, [r3, #4]
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	1ad2      	subs	r2, r2, r3
    17a4:	68fb      	ldr	r3, [r7, #12]
    17a6:	605a      	str	r2, [r3, #4]
    17a8:	e000      	b.n	17ac <vstr_cut_out_bytes+0x62>
        return;
    17aa:	bf00      	nop
    }
}
    17ac:	3710      	adds	r7, #16
    17ae:	46bd      	mov	sp, r7
    17b0:	bd80      	pop	{r7, pc}

000017b2 <vstr_printf>:

void vstr_printf(vstr_t *vstr, const char *fmt, ...) {
    17b2:	b40e      	push	{r1, r2, r3}
    17b4:	b580      	push	{r7, lr}
    17b6:	b085      	sub	sp, #20
    17b8:	af00      	add	r7, sp, #0
    17ba:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    17bc:	f107 0320 	add.w	r3, r7, #32
    17c0:	60fb      	str	r3, [r7, #12]
    vstr_vprintf(vstr, fmt, ap);
    17c2:	68fa      	ldr	r2, [r7, #12]
    17c4:	69f9      	ldr	r1, [r7, #28]
    17c6:	6878      	ldr	r0, [r7, #4]
    17c8:	f000 f807 	bl	17da <vstr_vprintf>
    va_end(ap);
}
    17cc:	bf00      	nop
    17ce:	3714      	adds	r7, #20
    17d0:	46bd      	mov	sp, r7
    17d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    17d6:	b003      	add	sp, #12
    17d8:	4770      	bx	lr

000017da <vstr_vprintf>:

void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap) {
    17da:	b580      	push	{r7, lr}
    17dc:	b086      	sub	sp, #24
    17de:	af00      	add	r7, sp, #0
    17e0:	60f8      	str	r0, [r7, #12]
    17e2:	60b9      	str	r1, [r7, #8]
    17e4:	607a      	str	r2, [r7, #4]
    mp_print_t print = {vstr, (mp_print_strn_t)vstr_add_strn};
    17e6:	68fb      	ldr	r3, [r7, #12]
    17e8:	613b      	str	r3, [r7, #16]
    17ea:	4b06      	ldr	r3, [pc, #24]	; (1804 <vstr_vprintf+0x2a>)
    17ec:	617b      	str	r3, [r7, #20]
    mp_vprintf(&print, fmt, ap);
    17ee:	f107 0310 	add.w	r3, r7, #16
    17f2:	687a      	ldr	r2, [r7, #4]
    17f4:	68b9      	ldr	r1, [r7, #8]
    17f6:	4618      	mov	r0, r3
    17f8:	f000 fb60 	bl	1ebc <mp_vprintf>
}
    17fc:	bf00      	nop
    17fe:	3718      	adds	r7, #24
    1800:	46bd      	mov	sp, r7
    1802:	bd80      	pop	{r7, pc}
    1804:	00001607 	.word	0x00001607

00001808 <MP_OBJ_IS_SMALL_INT>:
// unpack small ints, qstrs and full object pointers.

#if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A

static inline bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }
    1808:	b480      	push	{r7}
    180a:	b083      	sub	sp, #12
    180c:	af00      	add	r7, sp, #0
    180e:	6078      	str	r0, [r7, #4]
    1810:	687b      	ldr	r3, [r7, #4]
    1812:	f003 0301 	and.w	r3, r3, #1
    1816:	2b00      	cmp	r3, #0
    1818:	bf14      	ite	ne
    181a:	2301      	movne	r3, #1
    181c:	2300      	moveq	r3, #0
    181e:	b2db      	uxtb	r3, r3
    1820:	4618      	mov	r0, r3
    1822:	370c      	adds	r7, #12
    1824:	46bd      	mov	sp, r7
    1826:	f85d 7b04 	ldr.w	r7, [sp], #4
    182a:	4770      	bx	lr

0000182c <MP_OBJ_IS_OBJ>:
mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);
#endif

static inline bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
    182c:	b480      	push	{r7}
    182e:	b083      	sub	sp, #12
    1830:	af00      	add	r7, sp, #0
    1832:	6078      	str	r0, [r7, #4]
    1834:	687b      	ldr	r3, [r7, #4]
    1836:	f003 0303 	and.w	r3, r3, #3
    183a:	2b00      	cmp	r3, #0
    183c:	bf0c      	ite	eq
    183e:	2301      	moveq	r3, #1
    1840:	2300      	movne	r3, #0
    1842:	b2db      	uxtb	r3, r3
    1844:	4618      	mov	r0, r3
    1846:	370c      	adds	r7, #12
    1848:	46bd      	mov	sp, r7
    184a:	f85d 7b04 	ldr.w	r7, [sp], #4
    184e:	4770      	bx	lr

00001850 <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    1850:	b580      	push	{r7, lr}
    1852:	b084      	sub	sp, #16
    1854:	af00      	add	r7, sp, #0
    1856:	60f8      	str	r0, [r7, #12]
    1858:	60b9      	str	r1, [r7, #8]
    185a:	607a      	str	r2, [r7, #4]
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    185c:	6879      	ldr	r1, [r7, #4]
    185e:	68b8      	ldr	r0, [r7, #8]
    1860:	f01a fbdc 	bl	1c01c <mp_hal_stdout_tx_strn_cooked>
}
    1864:	bf00      	nop
    1866:	3710      	adds	r7, #16
    1868:	46bd      	mov	sp, r7
    186a:	bd80      	pop	{r7, pc}

0000186c <mp_print_str>:

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    186c:	b580      	push	{r7, lr}
    186e:	b084      	sub	sp, #16
    1870:	af00      	add	r7, sp, #0
    1872:	6078      	str	r0, [r7, #4]
    1874:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
    1876:	6838      	ldr	r0, [r7, #0]
    1878:	f01a ffa8 	bl	1c7cc <strlen>
    187c:	60f8      	str	r0, [r7, #12]
    if (len) {
    187e:	68fb      	ldr	r3, [r7, #12]
    1880:	2b00      	cmp	r3, #0
    1882:	d006      	beq.n	1892 <mp_print_str+0x26>
        print->print_strn(print->data, str, len);
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	685b      	ldr	r3, [r3, #4]
    1888:	687a      	ldr	r2, [r7, #4]
    188a:	6810      	ldr	r0, [r2, #0]
    188c:	68fa      	ldr	r2, [r7, #12]
    188e:	6839      	ldr	r1, [r7, #0]
    1890:	4798      	blx	r3
    }
    return len;
    1892:	68fb      	ldr	r3, [r7, #12]
}
    1894:	4618      	mov	r0, r3
    1896:	3710      	adds	r7, #16
    1898:	46bd      	mov	sp, r7
    189a:	bd80      	pop	{r7, pc}

0000189c <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    189c:	b580      	push	{r7, lr}
    189e:	b08c      	sub	sp, #48	; 0x30
    18a0:	af00      	add	r7, sp, #0
    18a2:	60f8      	str	r0, [r7, #12]
    18a4:	60b9      	str	r1, [r7, #8]
    18a6:	607a      	str	r2, [r7, #4]
    18a8:	603b      	str	r3, [r7, #0]
    int left_pad = 0;
    18aa:	2300      	movs	r3, #0
    18ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    int right_pad = 0;
    18ae:	2300      	movs	r3, #0
    18b0:	62bb      	str	r3, [r7, #40]	; 0x28
    int pad = width - len;
    18b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	1ad3      	subs	r3, r2, r3
    18b8:	613b      	str	r3, [r7, #16]
    int pad_size;
    int total_chars_printed = 0;
    18ba:	2300      	movs	r3, #0
    18bc:	623b      	str	r3, [r7, #32]
    const char *pad_chars;

    if (!fill || fill == ' ') {
    18be:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18c2:	2b00      	cmp	r3, #0
    18c4:	d003      	beq.n	18ce <mp_print_strn+0x32>
    18c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18ca:	2b20      	cmp	r3, #32
    18cc:	d104      	bne.n	18d8 <mp_print_strn+0x3c>
        pad_chars = pad_spaces;
    18ce:	4b3d      	ldr	r3, [pc, #244]	; (19c4 <mp_print_strn+0x128>)
    18d0:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_spaces) - 1;
    18d2:	2310      	movs	r3, #16
    18d4:	627b      	str	r3, [r7, #36]	; 0x24
    18d6:	e00d      	b.n	18f4 <mp_print_strn+0x58>
    } else if (fill == '0') {
    18d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18dc:	2b30      	cmp	r3, #48	; 0x30
    18de:	d104      	bne.n	18ea <mp_print_strn+0x4e>
        pad_chars = pad_zeroes;
    18e0:	4b39      	ldr	r3, [pc, #228]	; (19c8 <mp_print_strn+0x12c>)
    18e2:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_zeroes) - 1;
    18e4:	2310      	movs	r3, #16
    18e6:	627b      	str	r3, [r7, #36]	; 0x24
    18e8:	e004      	b.n	18f4 <mp_print_strn+0x58>
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    18ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
    18ee:	61fb      	str	r3, [r7, #28]
        pad_size = 1;
    18f0:	2301      	movs	r3, #1
    18f2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    18f4:	683b      	ldr	r3, [r7, #0]
    18f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    18fa:	2b00      	cmp	r3, #0
    18fc:	d009      	beq.n	1912 <mp_print_strn+0x76>
        left_pad = pad / 2;
    18fe:	693b      	ldr	r3, [r7, #16]
    1900:	0fda      	lsrs	r2, r3, #31
    1902:	4413      	add	r3, r2
    1904:	105b      	asrs	r3, r3, #1
    1906:	62fb      	str	r3, [r7, #44]	; 0x2c
        right_pad = pad - left_pad;
    1908:	693a      	ldr	r2, [r7, #16]
    190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    190c:	1ad3      	subs	r3, r2, r3
    190e:	62bb      	str	r3, [r7, #40]	; 0x28
    1910:	e009      	b.n	1926 <mp_print_strn+0x8a>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    1912:	683b      	ldr	r3, [r7, #0]
    1914:	f003 0301 	and.w	r3, r3, #1
    1918:	2b00      	cmp	r3, #0
    191a:	d002      	beq.n	1922 <mp_print_strn+0x86>
        right_pad = pad;
    191c:	693b      	ldr	r3, [r7, #16]
    191e:	62bb      	str	r3, [r7, #40]	; 0x28
    1920:	e001      	b.n	1926 <mp_print_strn+0x8a>
    } else {
        left_pad = pad;
    1922:	693b      	ldr	r3, [r7, #16]
    1924:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (left_pad > 0) {
    1926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1928:	2b00      	cmp	r3, #0
    192a:	dd1a      	ble.n	1962 <mp_print_strn+0xc6>
        total_chars_printed += left_pad;
    192c:	6a3a      	ldr	r2, [r7, #32]
    192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1930:	4413      	add	r3, r2
    1932:	623b      	str	r3, [r7, #32]
        while (left_pad > 0) {
    1934:	e012      	b.n	195c <mp_print_strn+0xc0>
            int p = left_pad;
    1936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1938:	61bb      	str	r3, [r7, #24]
            if (p > pad_size) {
    193a:	69ba      	ldr	r2, [r7, #24]
    193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    193e:	429a      	cmp	r2, r3
    1940:	dd01      	ble.n	1946 <mp_print_strn+0xaa>
                p = pad_size;
    1942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1944:	61bb      	str	r3, [r7, #24]
            }
            print->print_strn(print->data, pad_chars, p);
    1946:	68fb      	ldr	r3, [r7, #12]
    1948:	685b      	ldr	r3, [r3, #4]
    194a:	68fa      	ldr	r2, [r7, #12]
    194c:	6810      	ldr	r0, [r2, #0]
    194e:	69ba      	ldr	r2, [r7, #24]
    1950:	69f9      	ldr	r1, [r7, #28]
    1952:	4798      	blx	r3
            left_pad -= p;
    1954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1956:	69bb      	ldr	r3, [r7, #24]
    1958:	1ad3      	subs	r3, r2, r3
    195a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (left_pad > 0) {
    195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    195e:	2b00      	cmp	r3, #0
    1960:	dce9      	bgt.n	1936 <mp_print_strn+0x9a>
        }
    }
    if (len) {
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2b00      	cmp	r3, #0
    1966:	d00a      	beq.n	197e <mp_print_strn+0xe2>
        print->print_strn(print->data, str, len);
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	685b      	ldr	r3, [r3, #4]
    196c:	68fa      	ldr	r2, [r7, #12]
    196e:	6810      	ldr	r0, [r2, #0]
    1970:	687a      	ldr	r2, [r7, #4]
    1972:	68b9      	ldr	r1, [r7, #8]
    1974:	4798      	blx	r3
        total_chars_printed += len;
    1976:	6a3a      	ldr	r2, [r7, #32]
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	4413      	add	r3, r2
    197c:	623b      	str	r3, [r7, #32]
    }
    if (right_pad > 0) {
    197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1980:	2b00      	cmp	r3, #0
    1982:	dd1a      	ble.n	19ba <mp_print_strn+0x11e>
        total_chars_printed += right_pad;
    1984:	6a3a      	ldr	r2, [r7, #32]
    1986:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1988:	4413      	add	r3, r2
    198a:	623b      	str	r3, [r7, #32]
        while (right_pad > 0) {
    198c:	e012      	b.n	19b4 <mp_print_strn+0x118>
            int p = right_pad;
    198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1990:	617b      	str	r3, [r7, #20]
            if (p > pad_size) {
    1992:	697a      	ldr	r2, [r7, #20]
    1994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1996:	429a      	cmp	r2, r3
    1998:	dd01      	ble.n	199e <mp_print_strn+0x102>
                p = pad_size;
    199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    199c:	617b      	str	r3, [r7, #20]
            }
            print->print_strn(print->data, pad_chars, p);
    199e:	68fb      	ldr	r3, [r7, #12]
    19a0:	685b      	ldr	r3, [r3, #4]
    19a2:	68fa      	ldr	r2, [r7, #12]
    19a4:	6810      	ldr	r0, [r2, #0]
    19a6:	697a      	ldr	r2, [r7, #20]
    19a8:	69f9      	ldr	r1, [r7, #28]
    19aa:	4798      	blx	r3
            right_pad -= p;
    19ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
    19ae:	697b      	ldr	r3, [r7, #20]
    19b0:	1ad3      	subs	r3, r2, r3
    19b2:	62bb      	str	r3, [r7, #40]	; 0x28
        while (right_pad > 0) {
    19b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19b6:	2b00      	cmp	r3, #0
    19b8:	dce9      	bgt.n	198e <mp_print_strn+0xf2>
        }
    }
    return total_chars_printed;
    19ba:	6a3b      	ldr	r3, [r7, #32]
}
    19bc:	4618      	mov	r0, r3
    19be:	3730      	adds	r7, #48	; 0x30
    19c0:	46bd      	mov	sp, r7
    19c2:	bd80      	pop	{r7, pc}
    19c4:	0001eee4 	.word	0x0001eee4
    19c8:	0001eef8 	.word	0x0001eef8

000019cc <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    19cc:	b580      	push	{r7, lr}
    19ce:	b08e      	sub	sp, #56	; 0x38
    19d0:	af02      	add	r7, sp, #8
    19d2:	60f8      	str	r0, [r7, #12]
    19d4:	60b9      	str	r1, [r7, #8]
    19d6:	607a      	str	r2, [r7, #4]
    19d8:	603b      	str	r3, [r7, #0]
    char sign = 0;
    19da:	2300      	movs	r3, #0
    19dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (sgn) {
    19e0:	687b      	ldr	r3, [r7, #4]
    19e2:	2b00      	cmp	r3, #0
    19e4:	d01a      	beq.n	1a1c <mp_print_int+0x50>
        if ((mp_int_t)x < 0) {
    19e6:	68bb      	ldr	r3, [r7, #8]
    19e8:	2b00      	cmp	r3, #0
    19ea:	da06      	bge.n	19fa <mp_print_int+0x2e>
            sign = '-';
    19ec:	232d      	movs	r3, #45	; 0x2d
    19ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            x = -x;
    19f2:	68bb      	ldr	r3, [r7, #8]
    19f4:	425b      	negs	r3, r3
    19f6:	60bb      	str	r3, [r7, #8]
    19f8:	e010      	b.n	1a1c <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    19fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    19fc:	f003 0302 	and.w	r3, r3, #2
    1a00:	2b00      	cmp	r3, #0
    1a02:	d003      	beq.n	1a0c <mp_print_int+0x40>
            sign = '+';
    1a04:	232b      	movs	r3, #43	; 0x2b
    1a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1a0a:	e007      	b.n	1a1c <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a0e:	f003 0304 	and.w	r3, r3, #4
    1a12:	2b00      	cmp	r3, #0
    1a14:	d002      	beq.n	1a1c <mp_print_int+0x50>
            sign = ' ';
    1a16:	2320      	movs	r3, #32
    1a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
    }

    char buf[INT_BUF_SIZE];
    char *b = buf + INT_BUF_SIZE;
    1a1c:	f107 0310 	add.w	r3, r7, #16
    1a20:	3310      	adds	r3, #16
    1a22:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (x == 0) {
    1a24:	68bb      	ldr	r3, [r7, #8]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d106      	bne.n	1a38 <mp_print_int+0x6c>
        *(--b) = '0';
    1a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a2c:	3b01      	subs	r3, #1
    1a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a32:	2230      	movs	r2, #48	; 0x30
    1a34:	701a      	strb	r2, [r3, #0]
    1a36:	e027      	b.n	1a88 <mp_print_int+0xbc>
    } else {
        do {
            int c = x % base;
    1a38:	683a      	ldr	r2, [r7, #0]
    1a3a:	68bb      	ldr	r3, [r7, #8]
    1a3c:	fbb3 f1f2 	udiv	r1, r3, r2
    1a40:	fb02 f201 	mul.w	r2, r2, r1
    1a44:	1a9b      	subs	r3, r3, r2
    1a46:	62bb      	str	r3, [r7, #40]	; 0x28
            x /= base;
    1a48:	683b      	ldr	r3, [r7, #0]
    1a4a:	68ba      	ldr	r2, [r7, #8]
    1a4c:	fbb2 f3f3 	udiv	r3, r2, r3
    1a50:	60bb      	str	r3, [r7, #8]
            if (c >= 10) {
    1a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a54:	2b09      	cmp	r3, #9
    1a56:	dd05      	ble.n	1a64 <mp_print_int+0x98>
                c += base_char - 10;
    1a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a5a:	3b0a      	subs	r3, #10
    1a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a5e:	4413      	add	r3, r2
    1a60:	62bb      	str	r3, [r7, #40]	; 0x28
    1a62:	e002      	b.n	1a6a <mp_print_int+0x9e>
            } else {
                c += '0';
    1a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a66:	3330      	adds	r3, #48	; 0x30
    1a68:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            *(--b) = c;
    1a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a6c:	3b01      	subs	r3, #1
    1a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a72:	b2da      	uxtb	r2, r3
    1a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a76:	701a      	strb	r2, [r3, #0]
        } while (b > buf && x != 0);
    1a78:	f107 0310 	add.w	r3, r7, #16
    1a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a7e:	429a      	cmp	r2, r3
    1a80:	d902      	bls.n	1a88 <mp_print_int+0xbc>
    1a82:	68bb      	ldr	r3, [r7, #8]
    1a84:	2b00      	cmp	r3, #0
    1a86:	d1d7      	bne.n	1a38 <mp_print_int+0x6c>
            prefix_char = base_char + 'x' - 'a';
        }
    }
    #endif

    int len = 0;
    1a88:	2300      	movs	r3, #0
    1a8a:	627b      	str	r3, [r7, #36]	; 0x24
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1a92:	2b00      	cmp	r3, #0
    1a94:	d017      	beq.n	1ac6 <mp_print_int+0xfa>
        if (sign) {
    1a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d023      	beq.n	1ae6 <mp_print_int+0x11a>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1a9e:	f107 0123 	add.w	r1, r7, #35	; 0x23
    1aa2:	2301      	movs	r3, #1
    1aa4:	9301      	str	r3, [sp, #4]
    1aa6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1aaa:	9300      	str	r3, [sp, #0]
    1aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1aae:	2201      	movs	r2, #1
    1ab0:	68f8      	ldr	r0, [r7, #12]
    1ab2:	f7ff fef3 	bl	189c <mp_print_strn>
    1ab6:	4602      	mov	r2, r0
    1ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1aba:	4413      	add	r3, r2
    1abc:	627b      	str	r3, [r7, #36]	; 0x24
            width--;
    1abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ac0:	3b01      	subs	r3, #1
    1ac2:	647b      	str	r3, [r7, #68]	; 0x44
    1ac4:	e00f      	b.n	1ae6 <mp_print_int+0x11a>
        if (prefix_char && b > &buf[1]) {
            *(--b) = prefix_char;
            *(--b) = '0';
        }
        #endif
        if (sign && b > buf) {
    1ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1aca:	2b00      	cmp	r3, #0
    1acc:	d00b      	beq.n	1ae6 <mp_print_int+0x11a>
    1ace:	f107 0310 	add.w	r3, r7, #16
    1ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ad4:	429a      	cmp	r2, r3
    1ad6:	d906      	bls.n	1ae6 <mp_print_int+0x11a>
            *(--b) = sign;
    1ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ada:	3b01      	subs	r3, #1
    1adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    1ade:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ae4:	701a      	strb	r2, [r3, #0]
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1ae6:	f107 0310 	add.w	r3, r7, #16
    1aea:	3310      	adds	r3, #16
    1aec:	461a      	mov	r2, r3
    1aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1af0:	1ad3      	subs	r3, r2, r3
    1af2:	461a      	mov	r2, r3
    1af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1af6:	9301      	str	r3, [sp, #4]
    1af8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1afc:	9300      	str	r3, [sp, #0]
    1afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1b02:	68f8      	ldr	r0, [r7, #12]
    1b04:	f7ff feca 	bl	189c <mp_print_strn>
    1b08:	4602      	mov	r2, r0
    1b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b0c:	4413      	add	r3, r2
    1b0e:	627b      	str	r3, [r7, #36]	; 0x24
    return len;
    1b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1b12:	4618      	mov	r0, r3
    1b14:	3730      	adds	r7, #48	; 0x30
    1b16:	46bd      	mov	sp, r7
    1b18:	bd80      	pop	{r7, pc}

00001b1a <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1b1a:	b590      	push	{r4, r7, lr}
    1b1c:	b09b      	sub	sp, #108	; 0x6c
    1b1e:	af04      	add	r7, sp, #16
    1b20:	60f8      	str	r0, [r7, #12]
    1b22:	60b9      	str	r1, [r7, #8]
    1b24:	607a      	str	r2, [r7, #4]
    1b26:	603b      	str	r3, [r7, #0]
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	2b02      	cmp	r3, #2
    1b2c:	d00e      	beq.n	1b4c <mp_print_mp_int+0x32>
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	2b08      	cmp	r3, #8
    1b32:	d00b      	beq.n	1b4c <mp_print_mp_int+0x32>
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	2b0a      	cmp	r3, #10
    1b38:	d008      	beq.n	1b4c <mp_print_mp_int+0x32>
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	2b10      	cmp	r3, #16
    1b3e:	d005      	beq.n	1b4c <mp_print_mp_int+0x32>
    1b40:	4b8e      	ldr	r3, [pc, #568]	; (1d7c <mp_print_mp_int+0x262>)
    1b42:	4a8f      	ldr	r2, [pc, #572]	; (1d80 <mp_print_mp_int+0x266>)
    1b44:	21d0      	movs	r1, #208	; 0xd0
    1b46:	488f      	ldr	r0, [pc, #572]	; (1d84 <mp_print_mp_int+0x26a>)
    1b48:	f019 fb4c 	bl	1b1e4 <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1b4c:	68b8      	ldr	r0, [r7, #8]
    1b4e:	f7ff fe5b 	bl	1808 <MP_OBJ_IS_SMALL_INT>
    1b52:	4603      	mov	r3, r0
    1b54:	f083 0301 	eor.w	r3, r3, #1
    1b58:	b2db      	uxtb	r3, r3
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d015      	beq.n	1b8a <mp_print_mp_int+0x70>
    1b5e:	68b8      	ldr	r0, [r7, #8]
    1b60:	f7ff fe64 	bl	182c <MP_OBJ_IS_OBJ>
    1b64:	4603      	mov	r3, r0
    1b66:	f083 0301 	eor.w	r3, r3, #1
    1b6a:	b2db      	uxtb	r3, r3
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d104      	bne.n	1b7a <mp_print_mp_int+0x60>
    1b70:	68bb      	ldr	r3, [r7, #8]
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	4a84      	ldr	r2, [pc, #528]	; (1d88 <mp_print_mp_int+0x26e>)
    1b76:	4293      	cmp	r3, r2
    1b78:	d007      	beq.n	1b8a <mp_print_mp_int+0x70>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1b7a:	68b8      	ldr	r0, [r7, #8]
    1b7c:	f00b ff90 	bl	daa0 <mp_obj_get_int>
    1b80:	4603      	mov	r3, r0
    1b82:	005b      	lsls	r3, r3, #1
    1b84:	f043 0301 	orr.w	r3, r3, #1
    1b88:	60bb      	str	r3, [r7, #8]
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1b8c:	f003 0381 	and.w	r3, r3, #129	; 0x81
    1b90:	2b00      	cmp	r3, #0
    1b92:	d10b      	bne.n	1bac <mp_print_mp_int+0x92>
    1b94:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1b98:	2b30      	cmp	r3, #48	; 0x30
    1b9a:	d107      	bne.n	1bac <mp_print_mp_int+0x92>
        if (prec > width) {
    1b9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1ba0:	429a      	cmp	r2, r3
    1ba2:	dd01      	ble.n	1ba8 <mp_print_mp_int+0x8e>
            width = prec;
    1ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1ba6:	673b      	str	r3, [r7, #112]	; 0x70
        }
        prec = 0;
    1ba8:	2300      	movs	r3, #0
    1baa:	677b      	str	r3, [r7, #116]	; 0x74
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;
    1bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1bb0:	657b      	str	r3, [r7, #84]	; 0x54

    if (mp_obj_int_sign(x) >= 0) {
    1bb2:	68b8      	ldr	r0, [r7, #8]
    1bb4:	f00e fd18 	bl	105e8 <mp_obj_int_sign>
    1bb8:	4603      	mov	r3, r0
    1bba:	2b00      	cmp	r3, #0
    1bbc:	db14      	blt.n	1be8 <mp_print_mp_int+0xce>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bc0:	f003 0302 	and.w	r3, r3, #2
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d005      	beq.n	1bd4 <mp_print_mp_int+0xba>
            *prefix++ = '+';
    1bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bca:	1c5a      	adds	r2, r3, #1
    1bcc:	657a      	str	r2, [r7, #84]	; 0x54
    1bce:	222b      	movs	r2, #43	; 0x2b
    1bd0:	701a      	strb	r2, [r3, #0]
    1bd2:	e009      	b.n	1be8 <mp_print_mp_int+0xce>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bd6:	f003 0304 	and.w	r3, r3, #4
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d004      	beq.n	1be8 <mp_print_mp_int+0xce>
            *prefix++ = ' ';
    1bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1be0:	1c5a      	adds	r2, r3, #1
    1be2:	657a      	str	r2, [r7, #84]	; 0x54
    1be4:	2220      	movs	r2, #32
    1be6:	701a      	strb	r2, [r3, #0]
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bea:	f003 0310 	and.w	r3, r3, #16
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d036      	beq.n	1c60 <mp_print_mp_int+0x146>
        if (base == 2) {
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	2b02      	cmp	r3, #2
    1bf6:	d10d      	bne.n	1c14 <mp_print_mp_int+0xfa>
            *prefix++ = '0';
    1bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bfa:	1c5a      	adds	r2, r3, #1
    1bfc:	657a      	str	r2, [r7, #84]	; 0x54
    1bfe:	2230      	movs	r2, #48	; 0x30
    1c00:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'b' - 'a';
    1c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c04:	1c5a      	adds	r2, r3, #1
    1c06:	657a      	str	r2, [r7, #84]	; 0x54
    1c08:	683a      	ldr	r2, [r7, #0]
    1c0a:	b2d2      	uxtb	r2, r2
    1c0c:	3201      	adds	r2, #1
    1c0e:	b2d2      	uxtb	r2, r2
    1c10:	701a      	strb	r2, [r3, #0]
    1c12:	e025      	b.n	1c60 <mp_print_mp_int+0x146>
        } else if (base == 8) {
    1c14:	687b      	ldr	r3, [r7, #4]
    1c16:	2b08      	cmp	r3, #8
    1c18:	d112      	bne.n	1c40 <mp_print_mp_int+0x126>
            *prefix++ = '0';
    1c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c1c:	1c5a      	adds	r2, r3, #1
    1c1e:	657a      	str	r2, [r7, #84]	; 0x54
    1c20:	2230      	movs	r2, #48	; 0x30
    1c22:	701a      	strb	r2, [r3, #0]
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d018      	beq.n	1c60 <mp_print_mp_int+0x146>
                *prefix++ = base_char + 'o' - 'a';
    1c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c30:	1c5a      	adds	r2, r3, #1
    1c32:	657a      	str	r2, [r7, #84]	; 0x54
    1c34:	683a      	ldr	r2, [r7, #0]
    1c36:	b2d2      	uxtb	r2, r2
    1c38:	320e      	adds	r2, #14
    1c3a:	b2d2      	uxtb	r2, r2
    1c3c:	701a      	strb	r2, [r3, #0]
    1c3e:	e00f      	b.n	1c60 <mp_print_mp_int+0x146>
            }
        } else if (base == 16) {
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	2b10      	cmp	r3, #16
    1c44:	d10c      	bne.n	1c60 <mp_print_mp_int+0x146>
            *prefix++ = '0';
    1c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c48:	1c5a      	adds	r2, r3, #1
    1c4a:	657a      	str	r2, [r7, #84]	; 0x54
    1c4c:	2230      	movs	r2, #48	; 0x30
    1c4e:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'x' - 'a';
    1c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c52:	1c5a      	adds	r2, r3, #1
    1c54:	657a      	str	r2, [r7, #84]	; 0x54
    1c56:	683a      	ldr	r2, [r7, #0]
    1c58:	b2d2      	uxtb	r2, r2
    1c5a:	3217      	adds	r2, #23
    1c5c:	b2d2      	uxtb	r2, r2
    1c5e:	701a      	strb	r2, [r3, #0]
        }
    }
    *prefix = '\0';
    1c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c62:	2200      	movs	r2, #0
    1c64:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1c66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1c68:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c6c:	1ad3      	subs	r3, r2, r3
    1c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    prefix = prefix_buf;
    1c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c74:	657b      	str	r3, [r7, #84]	; 0x54

    char comma = '\0';
    1c76:	2300      	movs	r3, #0
    1c78:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (flags & PF_FLAG_SHOW_COMMA) {
    1c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c7e:	f003 0320 	and.w	r3, r3, #32
    1c82:	2b00      	cmp	r3, #0
    1c84:	d002      	beq.n	1c8c <mp_print_mp_int+0x172>
        comma = ',';
    1c86:	232c      	movs	r3, #44	; 0x2c
    1c88:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }

    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(mp_int_t) * 4];
    char *buf = stack_buf;
    1c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1c90:	623b      	str	r3, [r7, #32]
    size_t buf_size = sizeof(stack_buf);
    1c92:	2310      	movs	r3, #16
    1c94:	61fb      	str	r3, [r7, #28]
    size_t fmt_size = 0;
    1c96:	2300      	movs	r3, #0
    1c98:	61bb      	str	r3, [r7, #24]
    char *str;

    if (prec > 1) {
    1c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1c9c:	2b01      	cmp	r3, #1
    1c9e:	dd03      	ble.n	1ca8 <mp_print_mp_int+0x18e>
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ca6:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    char sign = '\0';
    1ca8:	2300      	movs	r3, #0
    1caa:	75fb      	strb	r3, [r7, #23]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d021      	beq.n	1cfa <mp_print_mp_int+0x1e0>
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1cb6:	683b      	ldr	r3, [r7, #0]
    1cb8:	b2db      	uxtb	r3, r3
    1cba:	f107 0418 	add.w	r4, r7, #24
    1cbe:	f107 011c 	add.w	r1, r7, #28
    1cc2:	f107 0020 	add.w	r0, r7, #32
    1cc6:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1cca:	9203      	str	r2, [sp, #12]
    1ccc:	9302      	str	r3, [sp, #8]
    1cce:	2300      	movs	r3, #0
    1cd0:	9301      	str	r3, [sp, #4]
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	9300      	str	r3, [sp, #0]
    1cd6:	68bb      	ldr	r3, [r7, #8]
    1cd8:	4622      	mov	r2, r4
    1cda:	f00e fbc1 	bl	10460 <mp_obj_int_formatted>
    1cde:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1ce2:	781b      	ldrb	r3, [r3, #0]
    1ce4:	2b2d      	cmp	r3, #45	; 0x2d
    1ce6:	d11d      	bne.n	1d24 <mp_print_mp_int+0x20a>
            sign = *str++;
    1ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1cea:	1c5a      	adds	r2, r3, #1
    1cec:	64fa      	str	r2, [r7, #76]	; 0x4c
    1cee:	781b      	ldrb	r3, [r3, #0]
    1cf0:	75fb      	strb	r3, [r7, #23]
            fmt_size--;
    1cf2:	69bb      	ldr	r3, [r7, #24]
    1cf4:	3b01      	subs	r3, #1
    1cf6:	61bb      	str	r3, [r7, #24]
    1cf8:	e014      	b.n	1d24 <mp_print_mp_int+0x20a>
        }
    } else {
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1cfa:	683b      	ldr	r3, [r7, #0]
    1cfc:	b2db      	uxtb	r3, r3
    1cfe:	f107 0418 	add.w	r4, r7, #24
    1d02:	f107 011c 	add.w	r1, r7, #28
    1d06:	f107 0020 	add.w	r0, r7, #32
    1d0a:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1d0e:	9203      	str	r2, [sp, #12]
    1d10:	9302      	str	r3, [sp, #8]
    1d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d14:	9301      	str	r3, [sp, #4]
    1d16:	687b      	ldr	r3, [r7, #4]
    1d18:	9300      	str	r3, [sp, #0]
    1d1a:	68bb      	ldr	r3, [r7, #8]
    1d1c:	4622      	mov	r2, r4
    1d1e:	f00e fb9f 	bl	10460 <mp_obj_int_formatted>
    1d22:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, prefix, base_char, comma);
    }

    int spaces_before = 0;
    1d24:	2300      	movs	r3, #0
    1d26:	64bb      	str	r3, [r7, #72]	; 0x48
    int spaces_after = 0;
    1d28:	2300      	movs	r3, #0
    1d2a:	647b      	str	r3, [r7, #68]	; 0x44

    if (prec > 1) {
    1d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d2e:	2b01      	cmp	r3, #1
    1d30:	dd37      	ble.n	1da2 <mp_print_mp_int+0x288>
        // If prec was specified, then prec specifies the width to zero-pad the
        // the number to. This zero-padded number then gets left or right
        // aligned in width characters.

        int prec_width = fmt_size;  // The digits
    1d32:	69bb      	ldr	r3, [r7, #24]
    1d34:	643b      	str	r3, [r7, #64]	; 0x40
        if (prec_width < prec) {
    1d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d3a:	429a      	cmp	r2, r3
    1d3c:	da01      	bge.n	1d42 <mp_print_mp_int+0x228>
            prec_width = prec;
    1d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d40:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d009      	beq.n	1d60 <mp_print_mp_int+0x246>
            if (sign) {
    1d4c:	7dfb      	ldrb	r3, [r7, #23]
    1d4e:	2b00      	cmp	r3, #0
    1d50:	d002      	beq.n	1d58 <mp_print_mp_int+0x23e>
                prec_width++;
    1d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d54:	3301      	adds	r3, #1
    1d56:	643b      	str	r3, [r7, #64]	; 0x40
            }
            prec_width += prefix_len;
    1d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d5c:	4413      	add	r3, r2
    1d5e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (prec_width < width) {
    1d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1d64:	429a      	cmp	r2, r3
    1d66:	da15      	bge.n	1d94 <mp_print_mp_int+0x27a>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d6a:	f003 0301 	and.w	r3, r3, #1
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d00c      	beq.n	1d8c <mp_print_mp_int+0x272>
                spaces_after = width - prec_width;
    1d72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d76:	1ad3      	subs	r3, r2, r3
    1d78:	647b      	str	r3, [r7, #68]	; 0x44
    1d7a:	e00b      	b.n	1d94 <mp_print_mp_int+0x27a>
    1d7c:	0001ef14 	.word	0x0001ef14
    1d80:	0001efa0 	.word	0x0001efa0
    1d84:	0001ef48 	.word	0x0001ef48
    1d88:	00022610 	.word	0x00022610
            } else {
                spaces_before = width - prec_width;
    1d8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d90:	1ad3      	subs	r3, r2, r3
    1d92:	64bb      	str	r3, [r7, #72]	; 0x48
            }
        }
        fill = '0';
    1d94:	2330      	movs	r3, #48	; 0x30
    1d96:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d9c:	f023 0301 	bic.w	r3, r3, #1
    1da0:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    int len = 0;
    1da2:	2300      	movs	r3, #0
    1da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (spaces_before) {
    1da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1da8:	2b00      	cmp	r3, #0
    1daa:	d00d      	beq.n	1dc8 <mp_print_mp_int+0x2ae>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1dae:	9301      	str	r3, [sp, #4]
    1db0:	2320      	movs	r3, #32
    1db2:	9300      	str	r3, [sp, #0]
    1db4:	2300      	movs	r3, #0
    1db6:	2200      	movs	r2, #0
    1db8:	4934      	ldr	r1, [pc, #208]	; (1e8c <mp_print_mp_int+0x372>)
    1dba:	68f8      	ldr	r0, [r7, #12]
    1dbc:	f7ff fd6e 	bl	189c <mp_print_strn>
    1dc0:	4602      	mov	r2, r0
    1dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1dc4:	4413      	add	r3, r2
    1dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d029      	beq.n	1e26 <mp_print_mp_int+0x30c>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1dd2:	7dfb      	ldrb	r3, [r7, #23]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d011      	beq.n	1dfc <mp_print_mp_int+0x2e2>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1dd8:	f107 0117 	add.w	r1, r7, #23
    1ddc:	2301      	movs	r3, #1
    1dde:	9301      	str	r3, [sp, #4]
    1de0:	2300      	movs	r3, #0
    1de2:	9300      	str	r3, [sp, #0]
    1de4:	2300      	movs	r3, #0
    1de6:	2201      	movs	r2, #1
    1de8:	68f8      	ldr	r0, [r7, #12]
    1dea:	f7ff fd57 	bl	189c <mp_print_strn>
    1dee:	4602      	mov	r2, r0
    1df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1df2:	4413      	add	r3, r2
    1df4:	63fb      	str	r3, [r7, #60]	; 0x3c
            width--;
    1df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1df8:	3b01      	subs	r3, #1
    1dfa:	673b      	str	r3, [r7, #112]	; 0x70
        }
        if (prefix_len) {
    1dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d011      	beq.n	1e26 <mp_print_mp_int+0x30c>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1e04:	2301      	movs	r3, #1
    1e06:	9301      	str	r3, [sp, #4]
    1e08:	2300      	movs	r3, #0
    1e0a:	9300      	str	r3, [sp, #0]
    1e0c:	2300      	movs	r3, #0
    1e0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1e10:	68f8      	ldr	r0, [r7, #12]
    1e12:	f7ff fd43 	bl	189c <mp_print_strn>
    1e16:	4602      	mov	r2, r0
    1e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e1a:	4413      	add	r3, r2
    1e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
            width -= prefix_len;
    1e1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1e22:	1ad3      	subs	r3, r2, r3
    1e24:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }
    if (prec > 1) {
    1e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e28:	2b01      	cmp	r3, #1
    1e2a:	dd01      	ble.n	1e30 <mp_print_mp_int+0x316>
        width = prec;
    1e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e2e:	673b      	str	r3, [r7, #112]	; 0x70
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1e30:	69ba      	ldr	r2, [r7, #24]
    1e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1e34:	9301      	str	r3, [sp, #4]
    1e36:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1e3a:	9300      	str	r3, [sp, #0]
    1e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1e40:	68f8      	ldr	r0, [r7, #12]
    1e42:	f7ff fd2b 	bl	189c <mp_print_strn>
    1e46:	4602      	mov	r2, r0
    1e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e4a:	4413      	add	r3, r2
    1e4c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (spaces_after) {
    1e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e50:	2b00      	cmp	r3, #0
    1e52:	d00d      	beq.n	1e70 <mp_print_mp_int+0x356>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    1e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e56:	9301      	str	r3, [sp, #4]
    1e58:	2320      	movs	r3, #32
    1e5a:	9300      	str	r3, [sp, #0]
    1e5c:	2300      	movs	r3, #0
    1e5e:	2200      	movs	r2, #0
    1e60:	490a      	ldr	r1, [pc, #40]	; (1e8c <mp_print_mp_int+0x372>)
    1e62:	68f8      	ldr	r0, [r7, #12]
    1e64:	f7ff fd1a 	bl	189c <mp_print_strn>
    1e68:	4602      	mov	r2, r0
    1e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e6c:	4413      	add	r3, r2
    1e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (buf != stack_buf) {
    1e70:	6a3a      	ldr	r2, [r7, #32]
    1e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1e76:	429a      	cmp	r2, r3
    1e78:	d003      	beq.n	1e82 <mp_print_mp_int+0x368>
        m_del(char, buf, buf_size);
    1e7a:	6a3b      	ldr	r3, [r7, #32]
    1e7c:	4618      	mov	r0, r3
    1e7e:	f7fe faab 	bl	3d8 <m_free>
    }
    return len;
    1e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1e84:	4618      	mov	r0, r3
    1e86:	375c      	adds	r7, #92	; 0x5c
    1e88:	46bd      	mov	sp, r7
    1e8a:	bd90      	pop	{r4, r7, pc}
    1e8c:	0001ef5c 	.word	0x0001ef5c

00001e90 <mp_printf>:

    return chrs;
}
#endif

int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    1e90:	b40e      	push	{r1, r2, r3}
    1e92:	b580      	push	{r7, lr}
    1e94:	b085      	sub	sp, #20
    1e96:	af00      	add	r7, sp, #0
    1e98:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    1e9a:	f107 0320 	add.w	r3, r7, #32
    1e9e:	60bb      	str	r3, [r7, #8]
    int ret = mp_vprintf(print, fmt, ap);
    1ea0:	68ba      	ldr	r2, [r7, #8]
    1ea2:	69f9      	ldr	r1, [r7, #28]
    1ea4:	6878      	ldr	r0, [r7, #4]
    1ea6:	f000 f809 	bl	1ebc <mp_vprintf>
    1eaa:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
    1eac:	68fb      	ldr	r3, [r7, #12]
}
    1eae:	4618      	mov	r0, r3
    1eb0:	3714      	adds	r7, #20
    1eb2:	46bd      	mov	sp, r7
    1eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1eb8:	b003      	add	sp, #12
    1eba:	4770      	bx	lr

00001ebc <mp_vprintf>:

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b096      	sub	sp, #88	; 0x58
    1ec0:	af04      	add	r7, sp, #16
    1ec2:	60f8      	str	r0, [r7, #12]
    1ec4:	60b9      	str	r1, [r7, #8]
    1ec6:	607a      	str	r2, [r7, #4]
    int chrs = 0;
    1ec8:	2300      	movs	r3, #0
    1eca:	647b      	str	r3, [r7, #68]	; 0x44
    for (;;) {
        {
            const char *f = fmt;
    1ecc:	68bb      	ldr	r3, [r7, #8]
    1ece:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1ed0:	e002      	b.n	1ed8 <mp_vprintf+0x1c>
                ++f; // XXX UTF8 advance char
    1ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ed4:	3301      	adds	r3, #1
    1ed6:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1eda:	781b      	ldrb	r3, [r3, #0]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d003      	beq.n	1ee8 <mp_vprintf+0x2c>
    1ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ee2:	781b      	ldrb	r3, [r3, #0]
    1ee4:	2b25      	cmp	r3, #37	; 0x25
    1ee6:	d1f4      	bne.n	1ed2 <mp_vprintf+0x16>
            }
            if (f > fmt) {
    1ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1eea:	68bb      	ldr	r3, [r7, #8]
    1eec:	429a      	cmp	r2, r3
    1eee:	d910      	bls.n	1f12 <mp_vprintf+0x56>
                print->print_strn(print->data, fmt, f - fmt);
    1ef0:	68fb      	ldr	r3, [r7, #12]
    1ef2:	685b      	ldr	r3, [r3, #4]
    1ef4:	68fa      	ldr	r2, [r7, #12]
    1ef6:	6810      	ldr	r0, [r2, #0]
    1ef8:	6c39      	ldr	r1, [r7, #64]	; 0x40
    1efa:	68ba      	ldr	r2, [r7, #8]
    1efc:	1a8a      	subs	r2, r1, r2
    1efe:	68b9      	ldr	r1, [r7, #8]
    1f00:	4798      	blx	r3
                chrs += f - fmt;
    1f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f04:	68bb      	ldr	r3, [r7, #8]
    1f06:	1ad3      	subs	r3, r2, r3
    1f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1f0a:	4413      	add	r3, r2
    1f0c:	647b      	str	r3, [r7, #68]	; 0x44
                fmt = f;
    1f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f10:	60bb      	str	r3, [r7, #8]
            }
        }

        if (*fmt == '\0') {
    1f12:	68bb      	ldr	r3, [r7, #8]
    1f14:	781b      	ldrb	r3, [r3, #0]
    1f16:	2b00      	cmp	r3, #0
    1f18:	f000 8214 	beq.w	2344 <mp_vprintf+0x488>
            break;
        }

        // move past % character
        ++fmt;
    1f1c:	68bb      	ldr	r3, [r7, #8]
    1f1e:	3301      	adds	r3, #1
    1f20:	60bb      	str	r3, [r7, #8]

        // parse flags, if they exist
        int flags = 0;
    1f22:	2300      	movs	r3, #0
    1f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        char fill = ' ';
    1f26:	2320      	movs	r3, #32
    1f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        while (*fmt != '\0') {
    1f2c:	e031      	b.n	1f92 <mp_vprintf+0xd6>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    1f2e:	68bb      	ldr	r3, [r7, #8]
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	2b2d      	cmp	r3, #45	; 0x2d
    1f34:	d104      	bne.n	1f40 <mp_vprintf+0x84>
    1f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f38:	f043 0301 	orr.w	r3, r3, #1
    1f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f3e:	e025      	b.n	1f8c <mp_vprintf+0xd0>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    1f40:	68bb      	ldr	r3, [r7, #8]
    1f42:	781b      	ldrb	r3, [r3, #0]
    1f44:	2b2b      	cmp	r3, #43	; 0x2b
    1f46:	d104      	bne.n	1f52 <mp_vprintf+0x96>
    1f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f4a:	f043 0302 	orr.w	r3, r3, #2
    1f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f50:	e01c      	b.n	1f8c <mp_vprintf+0xd0>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    1f52:	68bb      	ldr	r3, [r7, #8]
    1f54:	781b      	ldrb	r3, [r3, #0]
    1f56:	2b20      	cmp	r3, #32
    1f58:	d104      	bne.n	1f64 <mp_vprintf+0xa8>
    1f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f5c:	f043 0304 	orr.w	r3, r3, #4
    1f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f62:	e013      	b.n	1f8c <mp_vprintf+0xd0>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    1f64:	68bb      	ldr	r3, [r7, #8]
    1f66:	781b      	ldrb	r3, [r3, #0]
    1f68:	2b21      	cmp	r3, #33	; 0x21
    1f6a:	d104      	bne.n	1f76 <mp_vprintf+0xba>
    1f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f6e:	f043 0308 	orr.w	r3, r3, #8
    1f72:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f74:	e00a      	b.n	1f8c <mp_vprintf+0xd0>
            else if (*fmt == '0') {
    1f76:	68bb      	ldr	r3, [r7, #8]
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	2b30      	cmp	r3, #48	; 0x30
    1f7c:	d10e      	bne.n	1f9c <mp_vprintf+0xe0>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    1f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f84:	63fb      	str	r3, [r7, #60]	; 0x3c
                fill = '0';
    1f86:	2330      	movs	r3, #48	; 0x30
    1f88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            } else break;
            ++fmt;
    1f8c:	68bb      	ldr	r3, [r7, #8]
    1f8e:	3301      	adds	r3, #1
    1f90:	60bb      	str	r3, [r7, #8]
        while (*fmt != '\0') {
    1f92:	68bb      	ldr	r3, [r7, #8]
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d1c9      	bne.n	1f2e <mp_vprintf+0x72>
    1f9a:	e000      	b.n	1f9e <mp_vprintf+0xe2>
            } else break;
    1f9c:	bf00      	nop
        }

        // parse width, if it exists
        int width = 0;
    1f9e:	2300      	movs	r3, #0
    1fa0:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1fa2:	e00d      	b.n	1fc0 <mp_vprintf+0x104>
            width = width * 10 + *fmt - '0';
    1fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1fa6:	4613      	mov	r3, r2
    1fa8:	009b      	lsls	r3, r3, #2
    1faa:	4413      	add	r3, r2
    1fac:	005b      	lsls	r3, r3, #1
    1fae:	461a      	mov	r2, r3
    1fb0:	68bb      	ldr	r3, [r7, #8]
    1fb2:	781b      	ldrb	r3, [r3, #0]
    1fb4:	4413      	add	r3, r2
    1fb6:	3b30      	subs	r3, #48	; 0x30
    1fb8:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1fba:	68bb      	ldr	r3, [r7, #8]
    1fbc:	3301      	adds	r3, #1
    1fbe:	60bb      	str	r3, [r7, #8]
    1fc0:	68bb      	ldr	r3, [r7, #8]
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	2b2f      	cmp	r3, #47	; 0x2f
    1fc6:	d903      	bls.n	1fd0 <mp_vprintf+0x114>
    1fc8:	68bb      	ldr	r3, [r7, #8]
    1fca:	781b      	ldrb	r3, [r3, #0]
    1fcc:	2b39      	cmp	r3, #57	; 0x39
    1fce:	d9e9      	bls.n	1fa4 <mp_vprintf+0xe8>
        }

        // parse precision, if it exists
        int prec = -1;
    1fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fd4:	633b      	str	r3, [r7, #48]	; 0x30
        if (*fmt == '.') {
    1fd6:	68bb      	ldr	r3, [r7, #8]
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	2b2e      	cmp	r3, #46	; 0x2e
    1fdc:	d12d      	bne.n	203a <mp_vprintf+0x17e>
            ++fmt;
    1fde:	68bb      	ldr	r3, [r7, #8]
    1fe0:	3301      	adds	r3, #1
    1fe2:	60bb      	str	r3, [r7, #8]
            if (*fmt == '*') {
    1fe4:	68bb      	ldr	r3, [r7, #8]
    1fe6:	781b      	ldrb	r3, [r3, #0]
    1fe8:	2b2a      	cmp	r3, #42	; 0x2a
    1fea:	d108      	bne.n	1ffe <mp_vprintf+0x142>
                ++fmt;
    1fec:	68bb      	ldr	r3, [r7, #8]
    1fee:	3301      	adds	r3, #1
    1ff0:	60bb      	str	r3, [r7, #8]
                prec = va_arg(args, int);
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	1d1a      	adds	r2, r3, #4
    1ff6:	607a      	str	r2, [r7, #4]
    1ff8:	681b      	ldr	r3, [r3, #0]
    1ffa:	633b      	str	r3, [r7, #48]	; 0x30
    1ffc:	e018      	b.n	2030 <mp_vprintf+0x174>
            } else {
                prec = 0;
    1ffe:	2300      	movs	r3, #0
    2000:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    2002:	e00d      	b.n	2020 <mp_vprintf+0x164>
                    prec = prec * 10 + *fmt - '0';
    2004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2006:	4613      	mov	r3, r2
    2008:	009b      	lsls	r3, r3, #2
    200a:	4413      	add	r3, r2
    200c:	005b      	lsls	r3, r3, #1
    200e:	461a      	mov	r2, r3
    2010:	68bb      	ldr	r3, [r7, #8]
    2012:	781b      	ldrb	r3, [r3, #0]
    2014:	4413      	add	r3, r2
    2016:	3b30      	subs	r3, #48	; 0x30
    2018:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    201a:	68bb      	ldr	r3, [r7, #8]
    201c:	3301      	adds	r3, #1
    201e:	60bb      	str	r3, [r7, #8]
    2020:	68bb      	ldr	r3, [r7, #8]
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	2b2f      	cmp	r3, #47	; 0x2f
    2026:	d903      	bls.n	2030 <mp_vprintf+0x174>
    2028:	68bb      	ldr	r3, [r7, #8]
    202a:	781b      	ldrb	r3, [r3, #0]
    202c:	2b39      	cmp	r3, #57	; 0x39
    202e:	d9e9      	bls.n	2004 <mp_vprintf+0x148>
                }
            }
            if (prec < 0) {
    2030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2032:	2b00      	cmp	r3, #0
    2034:	da01      	bge.n	203a <mp_vprintf+0x17e>
                prec = 0;
    2036:	2300      	movs	r3, #0
    2038:	633b      	str	r3, [r7, #48]	; 0x30

        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
    203a:	2300      	movs	r3, #0
    203c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (*fmt == 'l') {
    2040:	68bb      	ldr	r3, [r7, #8]
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	2b6c      	cmp	r3, #108	; 0x6c
    2046:	d102      	bne.n	204e <mp_vprintf+0x192>
            ++fmt;
    2048:	68bb      	ldr	r3, [r7, #8]
    204a:	3301      	adds	r3, #1
    204c:	60bb      	str	r3, [r7, #8]
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    204e:	68bb      	ldr	r3, [r7, #8]
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	f000 8178 	beq.w	2348 <mp_vprintf+0x48c>
            break;
        }

        switch (*fmt) {
    2058:	68bb      	ldr	r3, [r7, #8]
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	3b50      	subs	r3, #80	; 0x50
    205e:	2b28      	cmp	r3, #40	; 0x28
    2060:	f200 8156 	bhi.w	2310 <mp_vprintf+0x454>
    2064:	a201      	add	r2, pc, #4	; (adr r2, 206c <mp_vprintf+0x1b0>)
    2066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    206a:	bf00      	nop
    206c:	000022e3 	.word	0x000022e3
    2070:	00002311 	.word	0x00002311
    2074:	00002311 	.word	0x00002311
    2078:	00002311 	.word	0x00002311
    207c:	00002311 	.word	0x00002311
    2080:	00002311 	.word	0x00002311
    2084:	00002311 	.word	0x00002311
    2088:	00002311 	.word	0x00002311
    208c:	00002295 	.word	0x00002295
    2090:	00002311 	.word	0x00002311
    2094:	00002311 	.word	0x00002311
    2098:	00002311 	.word	0x00002311
    209c:	00002311 	.word	0x00002311
    20a0:	00002311 	.word	0x00002311
    20a4:	00002311 	.word	0x00002311
    20a8:	00002311 	.word	0x00002311
    20ac:	00002311 	.word	0x00002311
    20b0:	00002311 	.word	0x00002311
    20b4:	00002111 	.word	0x00002111
    20b8:	0000215d 	.word	0x0000215d
    20bc:	00002265 	.word	0x00002265
    20c0:	00002311 	.word	0x00002311
    20c4:	00002311 	.word	0x00002311
    20c8:	00002311 	.word	0x00002311
    20cc:	00002311 	.word	0x00002311
    20d0:	00002311 	.word	0x00002311
    20d4:	00002311 	.word	0x00002311
    20d8:	00002311 	.word	0x00002311
    20dc:	00002311 	.word	0x00002311
    20e0:	00002311 	.word	0x00002311
    20e4:	00002311 	.word	0x00002311
    20e8:	00002311 	.word	0x00002311
    20ec:	000022e3 	.word	0x000022e3
    20f0:	0000218d 	.word	0x0000218d
    20f4:	00002311 	.word	0x00002311
    20f8:	000021d1 	.word	0x000021d1
    20fc:	00002311 	.word	0x00002311
    2100:	00002237 	.word	0x00002237
    2104:	00002311 	.word	0x00002311
    2108:	00002311 	.word	0x00002311
    210c:	00002295 	.word	0x00002295
            case 'b':
                if (va_arg(args, int)) {
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	1d1a      	adds	r2, r3, #4
    2114:	607a      	str	r2, [r7, #4]
    2116:	681b      	ldr	r3, [r3, #0]
    2118:	2b00      	cmp	r3, #0
    211a:	d00f      	beq.n	213c <mp_vprintf+0x280>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    211e:	9301      	str	r3, [sp, #4]
    2120:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2124:	9300      	str	r3, [sp, #0]
    2126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2128:	2204      	movs	r2, #4
    212a:	498a      	ldr	r1, [pc, #552]	; (2354 <mp_vprintf+0x498>)
    212c:	68f8      	ldr	r0, [r7, #12]
    212e:	f7ff fbb5 	bl	189c <mp_print_strn>
    2132:	4602      	mov	r2, r0
    2134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2136:	4413      	add	r3, r2
    2138:	647b      	str	r3, [r7, #68]	; 0x44
                } else {
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
                }
                break;
    213a:	e0ff      	b.n	233c <mp_vprintf+0x480>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    213e:	9301      	str	r3, [sp, #4]
    2140:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2144:	9300      	str	r3, [sp, #0]
    2146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2148:	2205      	movs	r2, #5
    214a:	4983      	ldr	r1, [pc, #524]	; (2358 <mp_vprintf+0x49c>)
    214c:	68f8      	ldr	r0, [r7, #12]
    214e:	f7ff fba5 	bl	189c <mp_print_strn>
    2152:	4602      	mov	r2, r0
    2154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2156:	4413      	add	r3, r2
    2158:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    215a:	e0ef      	b.n	233c <mp_vprintf+0x480>
            case 'c':
            {
                char str = va_arg(args, int);
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	1d1a      	adds	r2, r3, #4
    2160:	607a      	str	r2, [r7, #4]
    2162:	681b      	ldr	r3, [r3, #0]
    2164:	b2db      	uxtb	r3, r3
    2166:	76bb      	strb	r3, [r7, #26]
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    2168:	f107 011a 	add.w	r1, r7, #26
    216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    216e:	9301      	str	r3, [sp, #4]
    2170:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2174:	9300      	str	r3, [sp, #0]
    2176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2178:	2201      	movs	r2, #1
    217a:	68f8      	ldr	r0, [r7, #12]
    217c:	f7ff fb8e 	bl	189c <mp_print_strn>
    2180:	4602      	mov	r2, r0
    2182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2184:	4413      	add	r3, r2
    2186:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2188:	bf00      	nop
    218a:	e0d7      	b.n	233c <mp_vprintf+0x480>
            }
            case 'q':
            {
                qstr qst = va_arg(args, qstr);
    218c:	687b      	ldr	r3, [r7, #4]
    218e:	1d1a      	adds	r2, r3, #4
    2190:	607a      	str	r2, [r7, #4]
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	627b      	str	r3, [r7, #36]	; 0x24
                size_t len;
                const char *str = (const char*)qstr_data(qst, &len);
    2196:	f107 0314 	add.w	r3, r7, #20
    219a:	4619      	mov	r1, r3
    219c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    219e:	f7ff f835 	bl	120c <qstr_data>
    21a2:	6238      	str	r0, [r7, #32]
                if (prec < 0) {
    21a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21a6:	2b00      	cmp	r3, #0
    21a8:	da01      	bge.n	21ae <mp_vprintf+0x2f2>
                    prec = len;
    21aa:	697b      	ldr	r3, [r7, #20]
    21ac:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    21ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    21b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21b2:	9301      	str	r3, [sp, #4]
    21b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    21b8:	9300      	str	r3, [sp, #0]
    21ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21bc:	6a39      	ldr	r1, [r7, #32]
    21be:	68f8      	ldr	r0, [r7, #12]
    21c0:	f7ff fb6c 	bl	189c <mp_print_strn>
    21c4:	4602      	mov	r2, r0
    21c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21c8:	4413      	add	r3, r2
    21ca:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    21cc:	bf00      	nop
    21ce:	e0b5      	b.n	233c <mp_vprintf+0x480>
            }
            case 's':
            {
                const char *str = va_arg(args, const char*);
    21d0:	687b      	ldr	r3, [r7, #4]
    21d2:	1d1a      	adds	r2, r3, #4
    21d4:	607a      	str	r2, [r7, #4]
    21d6:	681b      	ldr	r3, [r3, #0]
    21d8:	61fb      	str	r3, [r7, #28]
                #ifndef NDEBUG
                // With debugging enabled, catch printing of null string pointers
                if (prec != 0 && str == NULL) {
    21da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21dc:	2b00      	cmp	r3, #0
    21de:	d012      	beq.n	2206 <mp_vprintf+0x34a>
    21e0:	69fb      	ldr	r3, [r7, #28]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d10f      	bne.n	2206 <mp_vprintf+0x34a>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    21e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21e8:	9301      	str	r3, [sp, #4]
    21ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    21ee:	9300      	str	r3, [sp, #0]
    21f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21f2:	2206      	movs	r2, #6
    21f4:	4959      	ldr	r1, [pc, #356]	; (235c <mp_vprintf+0x4a0>)
    21f6:	68f8      	ldr	r0, [r7, #12]
    21f8:	f7ff fb50 	bl	189c <mp_print_strn>
    21fc:	4602      	mov	r2, r0
    21fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2200:	4413      	add	r3, r2
    2202:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
    2204:	e09a      	b.n	233c <mp_vprintf+0x480>
                }
                #endif
                if (prec < 0) {
    2206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2208:	2b00      	cmp	r3, #0
    220a:	da04      	bge.n	2216 <mp_vprintf+0x35a>
                    prec = strlen(str);
    220c:	69f8      	ldr	r0, [r7, #28]
    220e:	f01a fadd 	bl	1c7cc <strlen>
    2212:	4603      	mov	r3, r0
    2214:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    2216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    221a:	9301      	str	r3, [sp, #4]
    221c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2220:	9300      	str	r3, [sp, #0]
    2222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2224:	69f9      	ldr	r1, [r7, #28]
    2226:	68f8      	ldr	r0, [r7, #12]
    2228:	f7ff fb38 	bl	189c <mp_print_strn>
    222c:	4602      	mov	r2, r0
    222e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2230:	4413      	add	r3, r2
    2232:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2234:	e082      	b.n	233c <mp_vprintf+0x480>
            }
            case 'u':
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    2236:	687b      	ldr	r3, [r7, #4]
    2238:	1d1a      	adds	r2, r3, #4
    223a:	607a      	str	r2, [r7, #4]
    223c:	6819      	ldr	r1, [r3, #0]
    223e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2240:	9303      	str	r3, [sp, #12]
    2242:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2246:	9302      	str	r3, [sp, #8]
    2248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    224a:	9301      	str	r3, [sp, #4]
    224c:	2361      	movs	r3, #97	; 0x61
    224e:	9300      	str	r3, [sp, #0]
    2250:	230a      	movs	r3, #10
    2252:	2200      	movs	r2, #0
    2254:	68f8      	ldr	r0, [r7, #12]
    2256:	f7ff fbb9 	bl	19cc <mp_print_int>
    225a:	4602      	mov	r2, r0
    225c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    225e:	4413      	add	r3, r2
    2260:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2262:	e06b      	b.n	233c <mp_vprintf+0x480>
            case 'd':
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	1d1a      	adds	r2, r3, #4
    2268:	607a      	str	r2, [r7, #4]
    226a:	681b      	ldr	r3, [r3, #0]
    226c:	4619      	mov	r1, r3
    226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2270:	9303      	str	r3, [sp, #12]
    2272:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2276:	9302      	str	r3, [sp, #8]
    2278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    227a:	9301      	str	r3, [sp, #4]
    227c:	2361      	movs	r3, #97	; 0x61
    227e:	9300      	str	r3, [sp, #0]
    2280:	230a      	movs	r3, #10
    2282:	2201      	movs	r2, #1
    2284:	68f8      	ldr	r0, [r7, #12]
    2286:	f7ff fba1 	bl	19cc <mp_print_int>
    228a:	4602      	mov	r2, r0
    228c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    228e:	4413      	add	r3, r2
    2290:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2292:	e053      	b.n	233c <mp_vprintf+0x480>
            case 'x':
            case 'X': {
                char fmt_c = *fmt - 'X' + 'A';
    2294:	68bb      	ldr	r3, [r7, #8]
    2296:	781b      	ldrb	r3, [r3, #0]
    2298:	3b17      	subs	r3, #23
    229a:	76fb      	strb	r3, [r7, #27]
                mp_uint_t val;
                if (long_arg) {
    229c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    22a0:	2b00      	cmp	r3, #0
    22a2:	d005      	beq.n	22b0 <mp_vprintf+0x3f4>
                    val = va_arg(args, unsigned long int);
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	1d1a      	adds	r2, r3, #4
    22a8:	607a      	str	r2, [r7, #4]
    22aa:	681b      	ldr	r3, [r3, #0]
    22ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    22ae:	e004      	b.n	22ba <mp_vprintf+0x3fe>
                } else {
                    val = va_arg(args, unsigned int);
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	1d1a      	adds	r2, r3, #4
    22b4:	607a      	str	r2, [r7, #4]
    22b6:	681b      	ldr	r3, [r3, #0]
    22b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    22ba:	7efb      	ldrb	r3, [r7, #27]
    22bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    22be:	9203      	str	r2, [sp, #12]
    22c0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    22c4:	9202      	str	r2, [sp, #8]
    22c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    22c8:	9201      	str	r2, [sp, #4]
    22ca:	9300      	str	r3, [sp, #0]
    22cc:	2310      	movs	r3, #16
    22ce:	2200      	movs	r2, #0
    22d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    22d2:	68f8      	ldr	r0, [r7, #12]
    22d4:	f7ff fb7a 	bl	19cc <mp_print_int>
    22d8:	4602      	mov	r2, r0
    22da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22dc:	4413      	add	r3, r2
    22de:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22e0:	e02c      	b.n	233c <mp_vprintf+0x480>
            }
            case 'p':
            case 'P': // don't bother to handle upcase for 'P'
                // Use unsigned long int to work on both ILP32 and LP64 systems
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    22e2:	687b      	ldr	r3, [r7, #4]
    22e4:	1d1a      	adds	r2, r3, #4
    22e6:	607a      	str	r2, [r7, #4]
    22e8:	6819      	ldr	r1, [r3, #0]
    22ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22ec:	9303      	str	r3, [sp, #12]
    22ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    22f2:	9302      	str	r3, [sp, #8]
    22f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22f6:	9301      	str	r3, [sp, #4]
    22f8:	2361      	movs	r3, #97	; 0x61
    22fa:	9300      	str	r3, [sp, #0]
    22fc:	2310      	movs	r3, #16
    22fe:	2200      	movs	r2, #0
    2300:	68f8      	ldr	r0, [r7, #12]
    2302:	f7ff fb63 	bl	19cc <mp_print_int>
    2306:	4602      	mov	r2, r0
    2308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    230a:	4413      	add	r3, r2
    230c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    230e:	e015      	b.n	233c <mp_vprintf+0x480>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    2310:	68bb      	ldr	r3, [r7, #8]
    2312:	781b      	ldrb	r3, [r3, #0]
    2314:	2b25      	cmp	r3, #37	; 0x25
    2316:	d006      	beq.n	2326 <mp_vprintf+0x46a>
    2318:	4b11      	ldr	r3, [pc, #68]	; (2360 <mp_vprintf+0x4a4>)
    231a:	4a12      	ldr	r2, [pc, #72]	; (2364 <mp_vprintf+0x4a8>)
    231c:	f240 2132 	movw	r1, #562	; 0x232
    2320:	4811      	ldr	r0, [pc, #68]	; (2368 <mp_vprintf+0x4ac>)
    2322:	f018 ff5f 	bl	1b1e4 <__assert_func>
                print->print_strn(print->data, fmt, 1);
    2326:	68fb      	ldr	r3, [r7, #12]
    2328:	685b      	ldr	r3, [r3, #4]
    232a:	68fa      	ldr	r2, [r7, #12]
    232c:	6810      	ldr	r0, [r2, #0]
    232e:	2201      	movs	r2, #1
    2330:	68b9      	ldr	r1, [r7, #8]
    2332:	4798      	blx	r3
                chrs += 1;
    2334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2336:	3301      	adds	r3, #1
    2338:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    233a:	bf00      	nop
        }
        ++fmt;
    233c:	68bb      	ldr	r3, [r7, #8]
    233e:	3301      	adds	r3, #1
    2340:	60bb      	str	r3, [r7, #8]
    for (;;) {
    2342:	e5c3      	b.n	1ecc <mp_vprintf+0x10>
            break;
    2344:	bf00      	nop
    2346:	e000      	b.n	234a <mp_vprintf+0x48e>
            break;
    2348:	bf00      	nop
    }
    return chrs;
    234a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    234c:	4618      	mov	r0, r3
    234e:	3748      	adds	r7, #72	; 0x48
    2350:	46bd      	mov	sp, r7
    2352:	bd80      	pop	{r7, pc}
    2354:	0001ef60 	.word	0x0001ef60
    2358:	0001ef68 	.word	0x0001ef68
    235c:	0001ef70 	.word	0x0001ef70
    2360:	0001ef78 	.word	0x0001ef78
    2364:	0001efb0 	.word	0x0001efb0
    2368:	0001ef48 	.word	0x0001ef48

0000236c <unichar_isspace>:
}

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    236c:	b480      	push	{r7}
    236e:	b083      	sub	sp, #12
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    2374:	687b      	ldr	r3, [r7, #4]
    2376:	2b7f      	cmp	r3, #127	; 0x7f
    2378:	d809      	bhi.n	238e <unichar_isspace+0x22>
    237a:	4a0a      	ldr	r2, [pc, #40]	; (23a4 <unichar_isspace+0x38>)
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	4413      	add	r3, r2
    2380:	781b      	ldrb	r3, [r3, #0]
    2382:	f003 0302 	and.w	r3, r3, #2
    2386:	2b00      	cmp	r3, #0
    2388:	d001      	beq.n	238e <unichar_isspace+0x22>
    238a:	2301      	movs	r3, #1
    238c:	e000      	b.n	2390 <unichar_isspace+0x24>
    238e:	2300      	movs	r3, #0
    2390:	f003 0301 	and.w	r3, r3, #1
    2394:	b2db      	uxtb	r3, r3
}
    2396:	4618      	mov	r0, r3
    2398:	370c      	adds	r7, #12
    239a:	46bd      	mov	sp, r7
    239c:	f85d 7b04 	ldr.w	r7, [sp], #4
    23a0:	4770      	bx	lr
    23a2:	bf00      	nop
    23a4:	0001efbc 	.word	0x0001efbc

000023a8 <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    23a8:	b480      	push	{r7}
    23aa:	b083      	sub	sp, #12
    23ac:	af00      	add	r7, sp, #0
    23ae:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	2b7f      	cmp	r3, #127	; 0x7f
    23b4:	d809      	bhi.n	23ca <unichar_isalpha+0x22>
    23b6:	4a0a      	ldr	r2, [pc, #40]	; (23e0 <unichar_isalpha+0x38>)
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	4413      	add	r3, r2
    23bc:	781b      	ldrb	r3, [r3, #0]
    23be:	f003 0308 	and.w	r3, r3, #8
    23c2:	2b00      	cmp	r3, #0
    23c4:	d001      	beq.n	23ca <unichar_isalpha+0x22>
    23c6:	2301      	movs	r3, #1
    23c8:	e000      	b.n	23cc <unichar_isalpha+0x24>
    23ca:	2300      	movs	r3, #0
    23cc:	f003 0301 	and.w	r3, r3, #1
    23d0:	b2db      	uxtb	r3, r3
}
    23d2:	4618      	mov	r0, r3
    23d4:	370c      	adds	r7, #12
    23d6:	46bd      	mov	sp, r7
    23d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23dc:	4770      	bx	lr
    23de:	bf00      	nop
    23e0:	0001efbc 	.word	0x0001efbc

000023e4 <unichar_isdigit>:
bool unichar_isprint(unichar c) {
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    23e4:	b480      	push	{r7}
    23e6:	b083      	sub	sp, #12
    23e8:	af00      	add	r7, sp, #0
    23ea:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    23ec:	687b      	ldr	r3, [r7, #4]
    23ee:	2b7f      	cmp	r3, #127	; 0x7f
    23f0:	d809      	bhi.n	2406 <unichar_isdigit+0x22>
    23f2:	4a0a      	ldr	r2, [pc, #40]	; (241c <unichar_isdigit+0x38>)
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	4413      	add	r3, r2
    23f8:	781b      	ldrb	r3, [r3, #0]
    23fa:	f003 0304 	and.w	r3, r3, #4
    23fe:	2b00      	cmp	r3, #0
    2400:	d001      	beq.n	2406 <unichar_isdigit+0x22>
    2402:	2301      	movs	r3, #1
    2404:	e000      	b.n	2408 <unichar_isdigit+0x24>
    2406:	2300      	movs	r3, #0
    2408:	f003 0301 	and.w	r3, r3, #1
    240c:	b2db      	uxtb	r3, r3
}
    240e:	4618      	mov	r0, r3
    2410:	370c      	adds	r7, #12
    2412:	46bd      	mov	sp, r7
    2414:	f85d 7b04 	ldr.w	r7, [sp], #4
    2418:	4770      	bx	lr
    241a:	bf00      	nop
    241c:	0001efbc 	.word	0x0001efbc

00002420 <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    2420:	b480      	push	{r7}
    2422:	b083      	sub	sp, #12
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	2b7f      	cmp	r3, #127	; 0x7f
    242c:	d809      	bhi.n	2442 <unichar_isxdigit+0x22>
    242e:	4a0a      	ldr	r2, [pc, #40]	; (2458 <unichar_isxdigit+0x38>)
    2430:	687b      	ldr	r3, [r7, #4]
    2432:	4413      	add	r3, r2
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	f003 0340 	and.w	r3, r3, #64	; 0x40
    243a:	2b00      	cmp	r3, #0
    243c:	d001      	beq.n	2442 <unichar_isxdigit+0x22>
    243e:	2301      	movs	r3, #1
    2440:	e000      	b.n	2444 <unichar_isxdigit+0x24>
    2442:	2300      	movs	r3, #0
    2444:	f003 0301 	and.w	r3, r3, #1
    2448:	b2db      	uxtb	r3, r3
}
    244a:	4618      	mov	r0, r3
    244c:	370c      	adds	r7, #12
    244e:	46bd      	mov	sp, r7
    2450:	f85d 7b04 	ldr.w	r7, [sp], #4
    2454:	4770      	bx	lr
    2456:	bf00      	nop
    2458:	0001efbc 	.word	0x0001efbc

0000245c <unichar_isident>:

bool unichar_isident(unichar c) {
    245c:	b480      	push	{r7}
    245e:	b083      	sub	sp, #12
    2460:	af00      	add	r7, sp, #0
    2462:	6078      	str	r0, [r7, #4]
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    2464:	687b      	ldr	r3, [r7, #4]
    2466:	2b7f      	cmp	r3, #127	; 0x7f
    2468:	d80c      	bhi.n	2484 <unichar_isident+0x28>
    246a:	4a0b      	ldr	r2, [pc, #44]	; (2498 <unichar_isident+0x3c>)
    246c:	687b      	ldr	r3, [r7, #4]
    246e:	4413      	add	r3, r2
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	f003 030c 	and.w	r3, r3, #12
    2476:	2b00      	cmp	r3, #0
    2478:	d102      	bne.n	2480 <unichar_isident+0x24>
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	2b5f      	cmp	r3, #95	; 0x5f
    247e:	d101      	bne.n	2484 <unichar_isident+0x28>
    2480:	2301      	movs	r3, #1
    2482:	e000      	b.n	2486 <unichar_isident+0x2a>
    2484:	2300      	movs	r3, #0
    2486:	f003 0301 	and.w	r3, r3, #1
    248a:	b2db      	uxtb	r3, r3
}
    248c:	4618      	mov	r0, r3
    248e:	370c      	adds	r7, #12
    2490:	46bd      	mov	sp, r7
    2492:	f85d 7b04 	ldr.w	r7, [sp], #4
    2496:	4770      	bx	lr
    2498:	0001efbc 	.word	0x0001efbc

0000249c <unichar_isupper>:

bool unichar_isupper(unichar c) {
    249c:	b480      	push	{r7}
    249e:	b083      	sub	sp, #12
    24a0:	af00      	add	r7, sp, #0
    24a2:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	2b7f      	cmp	r3, #127	; 0x7f
    24a8:	d809      	bhi.n	24be <unichar_isupper+0x22>
    24aa:	4a0a      	ldr	r2, [pc, #40]	; (24d4 <unichar_isupper+0x38>)
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	4413      	add	r3, r2
    24b0:	781b      	ldrb	r3, [r3, #0]
    24b2:	f003 0310 	and.w	r3, r3, #16
    24b6:	2b00      	cmp	r3, #0
    24b8:	d001      	beq.n	24be <unichar_isupper+0x22>
    24ba:	2301      	movs	r3, #1
    24bc:	e000      	b.n	24c0 <unichar_isupper+0x24>
    24be:	2300      	movs	r3, #0
    24c0:	f003 0301 	and.w	r3, r3, #1
    24c4:	b2db      	uxtb	r3, r3
}
    24c6:	4618      	mov	r0, r3
    24c8:	370c      	adds	r7, #12
    24ca:	46bd      	mov	sp, r7
    24cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    24d0:	4770      	bx	lr
    24d2:	bf00      	nop
    24d4:	0001efbc 	.word	0x0001efbc

000024d8 <unichar_islower>:

bool unichar_islower(unichar c) {
    24d8:	b480      	push	{r7}
    24da:	b083      	sub	sp, #12
    24dc:	af00      	add	r7, sp, #0
    24de:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    24e0:	687b      	ldr	r3, [r7, #4]
    24e2:	2b7f      	cmp	r3, #127	; 0x7f
    24e4:	d809      	bhi.n	24fa <unichar_islower+0x22>
    24e6:	4a0a      	ldr	r2, [pc, #40]	; (2510 <unichar_islower+0x38>)
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	4413      	add	r3, r2
    24ec:	781b      	ldrb	r3, [r3, #0]
    24ee:	f003 0320 	and.w	r3, r3, #32
    24f2:	2b00      	cmp	r3, #0
    24f4:	d001      	beq.n	24fa <unichar_islower+0x22>
    24f6:	2301      	movs	r3, #1
    24f8:	e000      	b.n	24fc <unichar_islower+0x24>
    24fa:	2300      	movs	r3, #0
    24fc:	f003 0301 	and.w	r3, r3, #1
    2500:	b2db      	uxtb	r3, r3
}
    2502:	4618      	mov	r0, r3
    2504:	370c      	adds	r7, #12
    2506:	46bd      	mov	sp, r7
    2508:	f85d 7b04 	ldr.w	r7, [sp], #4
    250c:	4770      	bx	lr
    250e:	bf00      	nop
    2510:	0001efbc 	.word	0x0001efbc

00002514 <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    2514:	b580      	push	{r7, lr}
    2516:	b082      	sub	sp, #8
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    if (unichar_isupper(c)) {
    251c:	6878      	ldr	r0, [r7, #4]
    251e:	f7ff ffbd 	bl	249c <unichar_isupper>
    2522:	4603      	mov	r3, r0
    2524:	2b00      	cmp	r3, #0
    2526:	d002      	beq.n	252e <unichar_tolower+0x1a>
        return c + 0x20;
    2528:	687b      	ldr	r3, [r7, #4]
    252a:	3320      	adds	r3, #32
    252c:	e000      	b.n	2530 <unichar_tolower+0x1c>
    }
    return c;
    252e:	687b      	ldr	r3, [r7, #4]
}
    2530:	4618      	mov	r0, r3
    2532:	3708      	adds	r7, #8
    2534:	46bd      	mov	sp, r7
    2536:	bd80      	pop	{r7, pc}

00002538 <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    2538:	b580      	push	{r7, lr}
    253a:	b082      	sub	sp, #8
    253c:	af00      	add	r7, sp, #0
    253e:	6078      	str	r0, [r7, #4]
    if (unichar_islower(c)) {
    2540:	6878      	ldr	r0, [r7, #4]
    2542:	f7ff ffc9 	bl	24d8 <unichar_islower>
    2546:	4603      	mov	r3, r0
    2548:	2b00      	cmp	r3, #0
    254a:	d002      	beq.n	2552 <unichar_toupper+0x1a>
        return c - 0x20;
    254c:	687b      	ldr	r3, [r7, #4]
    254e:	3b20      	subs	r3, #32
    2550:	e000      	b.n	2554 <unichar_toupper+0x1c>
    }
    return c;
    2552:	687b      	ldr	r3, [r7, #4]
}
    2554:	4618      	mov	r0, r3
    2556:	3708      	adds	r7, #8
    2558:	46bd      	mov	sp, r7
    255a:	bd80      	pop	{r7, pc}

0000255c <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    255c:	b480      	push	{r7}
    255e:	b085      	sub	sp, #20
    2560:	af00      	add	r7, sp, #0
    2562:	6078      	str	r0, [r7, #4]
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    2564:	687b      	ldr	r3, [r7, #4]
    2566:	3b30      	subs	r3, #48	; 0x30
    2568:	60fb      	str	r3, [r7, #12]
    if (n > 9) {
    256a:	68fb      	ldr	r3, [r7, #12]
    256c:	2b09      	cmp	r3, #9
    256e:	d906      	bls.n	257e <unichar_xdigit_value+0x22>
        n &= ~('a' - 'A');
    2570:	68fb      	ldr	r3, [r7, #12]
    2572:	f023 0320 	bic.w	r3, r3, #32
    2576:	60fb      	str	r3, [r7, #12]
        n -= ('A' - ('9' + 1));
    2578:	68fb      	ldr	r3, [r7, #12]
    257a:	3b07      	subs	r3, #7
    257c:	60fb      	str	r3, [r7, #12]
    }
    return n;
    257e:	68fb      	ldr	r3, [r7, #12]
}
    2580:	4618      	mov	r0, r3
    2582:	3714      	adds	r7, #20
    2584:	46bd      	mov	sp, r7
    2586:	f85d 7b04 	ldr.w	r7, [sp], #4
    258a:	4770      	bx	lr

0000258c <mp_reader_mem_readbyte>:
    const byte *beg;
    const byte *cur;
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    258c:	b480      	push	{r7}
    258e:	b085      	sub	sp, #20
    2590:	af00      	add	r7, sp, #0
    2592:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	60fb      	str	r3, [r7, #12]
    if (reader->cur < reader->end) {
    2598:	68fb      	ldr	r3, [r7, #12]
    259a:	689a      	ldr	r2, [r3, #8]
    259c:	68fb      	ldr	r3, [r7, #12]
    259e:	68db      	ldr	r3, [r3, #12]
    25a0:	429a      	cmp	r2, r3
    25a2:	d206      	bcs.n	25b2 <mp_reader_mem_readbyte+0x26>
        return *reader->cur++;
    25a4:	68fb      	ldr	r3, [r7, #12]
    25a6:	689b      	ldr	r3, [r3, #8]
    25a8:	1c59      	adds	r1, r3, #1
    25aa:	68fa      	ldr	r2, [r7, #12]
    25ac:	6091      	str	r1, [r2, #8]
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	e001      	b.n	25b6 <mp_reader_mem_readbyte+0x2a>
    } else {
        return MP_READER_EOF;
    25b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
    25b6:	4618      	mov	r0, r3
    25b8:	3714      	adds	r7, #20
    25ba:	46bd      	mov	sp, r7
    25bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    25c0:	4770      	bx	lr

000025c2 <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    25c2:	b580      	push	{r7, lr}
    25c4:	b084      	sub	sp, #16
    25c6:	af00      	add	r7, sp, #0
    25c8:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	60fb      	str	r3, [r7, #12]
    if (reader->free_len > 0) {
    25ce:	68fb      	ldr	r3, [r7, #12]
    25d0:	681b      	ldr	r3, [r3, #0]
    25d2:	2b00      	cmp	r3, #0
    25d4:	d004      	beq.n	25e0 <mp_reader_mem_close+0x1e>
        m_del(char, (char*)reader->beg, reader->free_len);
    25d6:	68fb      	ldr	r3, [r7, #12]
    25d8:	685b      	ldr	r3, [r3, #4]
    25da:	4618      	mov	r0, r3
    25dc:	f7fd fefc 	bl	3d8 <m_free>
    }
    m_del_obj(mp_reader_mem_t, reader);
    25e0:	68f8      	ldr	r0, [r7, #12]
    25e2:	f7fd fef9 	bl	3d8 <m_free>
}
    25e6:	bf00      	nop
    25e8:	3710      	adds	r7, #16
    25ea:	46bd      	mov	sp, r7
    25ec:	bd80      	pop	{r7, pc}

000025ee <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    25ee:	b580      	push	{r7, lr}
    25f0:	b086      	sub	sp, #24
    25f2:	af00      	add	r7, sp, #0
    25f4:	60f8      	str	r0, [r7, #12]
    25f6:	60b9      	str	r1, [r7, #8]
    25f8:	607a      	str	r2, [r7, #4]
    25fa:	603b      	str	r3, [r7, #0]
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    25fc:	2010      	movs	r0, #16
    25fe:	f7fd fe8d 	bl	31c <m_malloc>
    2602:	6178      	str	r0, [r7, #20]
    rm->free_len = free_len;
    2604:	697b      	ldr	r3, [r7, #20]
    2606:	683a      	ldr	r2, [r7, #0]
    2608:	601a      	str	r2, [r3, #0]
    rm->beg = buf;
    260a:	697b      	ldr	r3, [r7, #20]
    260c:	68ba      	ldr	r2, [r7, #8]
    260e:	605a      	str	r2, [r3, #4]
    rm->cur = buf;
    2610:	697b      	ldr	r3, [r7, #20]
    2612:	68ba      	ldr	r2, [r7, #8]
    2614:	609a      	str	r2, [r3, #8]
    rm->end = buf + len;
    2616:	68ba      	ldr	r2, [r7, #8]
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	441a      	add	r2, r3
    261c:	697b      	ldr	r3, [r7, #20]
    261e:	60da      	str	r2, [r3, #12]
    reader->data = rm;
    2620:	68fb      	ldr	r3, [r7, #12]
    2622:	697a      	ldr	r2, [r7, #20]
    2624:	601a      	str	r2, [r3, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    2626:	68fb      	ldr	r3, [r7, #12]
    2628:	4a04      	ldr	r2, [pc, #16]	; (263c <mp_reader_new_mem+0x4e>)
    262a:	605a      	str	r2, [r3, #4]
    reader->close = mp_reader_mem_close;
    262c:	68fb      	ldr	r3, [r7, #12]
    262e:	4a04      	ldr	r2, [pc, #16]	; (2640 <mp_reader_new_mem+0x52>)
    2630:	609a      	str	r2, [r3, #8]
}
    2632:	bf00      	nop
    2634:	3718      	adds	r7, #24
    2636:	46bd      	mov	sp, r7
    2638:	bd80      	pop	{r7, pc}
    263a:	bf00      	nop
    263c:	0000258d 	.word	0x0000258d
    2640:	000025c3 	.word	0x000025c3

00002644 <vstr_reset>:
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    2644:	b480      	push	{r7}
    2646:	b083      	sub	sp, #12
    2648:	af00      	add	r7, sp, #0
    264a:	6078      	str	r0, [r7, #4]
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	2200      	movs	r2, #0
    2650:	605a      	str	r2, [r3, #4]
    2652:	bf00      	nop
    2654:	370c      	adds	r7, #12
    2656:	46bd      	mov	sp, r7
    2658:	f85d 7b04 	ldr.w	r7, [sp], #4
    265c:	4770      	bx	lr

0000265e <is_end>:
// don't know if that's intentional or not, but we don't allow it

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    265e:	b480      	push	{r7}
    2660:	b083      	sub	sp, #12
    2662:	af00      	add	r7, sp, #0
    2664:	6078      	str	r0, [r7, #4]
    return lex->chr0 == MP_LEXER_EOF;
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	691b      	ldr	r3, [r3, #16]
    266a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    266e:	bf0c      	ite	eq
    2670:	2301      	moveq	r3, #1
    2672:	2300      	movne	r3, #0
    2674:	b2db      	uxtb	r3, r3
}
    2676:	4618      	mov	r0, r3
    2678:	370c      	adds	r7, #12
    267a:	46bd      	mov	sp, r7
    267c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2680:	4770      	bx	lr

00002682 <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    2682:	b480      	push	{r7}
    2684:	b083      	sub	sp, #12
    2686:	af00      	add	r7, sp, #0
    2688:	6078      	str	r0, [r7, #4]
    return lex->chr0 == '\n';
    268a:	687b      	ldr	r3, [r7, #4]
    268c:	691b      	ldr	r3, [r3, #16]
    268e:	2b0a      	cmp	r3, #10
    2690:	bf0c      	ite	eq
    2692:	2301      	moveq	r3, #1
    2694:	2300      	movne	r3, #0
    2696:	b2db      	uxtb	r3, r3
}
    2698:	4618      	mov	r0, r3
    269a:	370c      	adds	r7, #12
    269c:	46bd      	mov	sp, r7
    269e:	f85d 7b04 	ldr.w	r7, [sp], #4
    26a2:	4770      	bx	lr

000026a4 <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    26a4:	b480      	push	{r7}
    26a6:	b083      	sub	sp, #12
    26a8:	af00      	add	r7, sp, #0
    26aa:	6078      	str	r0, [r7, #4]
    26ac:	460b      	mov	r3, r1
    26ae:	70fb      	strb	r3, [r7, #3]
    return lex->chr0 == c;
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	691a      	ldr	r2, [r3, #16]
    26b4:	78fb      	ldrb	r3, [r7, #3]
    26b6:	429a      	cmp	r2, r3
    26b8:	bf0c      	ite	eq
    26ba:	2301      	moveq	r3, #1
    26bc:	2300      	movne	r3, #0
    26be:	b2db      	uxtb	r3, r3
}
    26c0:	4618      	mov	r0, r3
    26c2:	370c      	adds	r7, #12
    26c4:	46bd      	mov	sp, r7
    26c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ca:	4770      	bx	lr

000026cc <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    26cc:	b480      	push	{r7}
    26ce:	b083      	sub	sp, #12
    26d0:	af00      	add	r7, sp, #0
    26d2:	6078      	str	r0, [r7, #4]
    26d4:	460b      	mov	r3, r1
    26d6:	70fb      	strb	r3, [r7, #3]
    26d8:	4613      	mov	r3, r2
    26da:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 || lex->chr0 == c2;
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	691a      	ldr	r2, [r3, #16]
    26e0:	78fb      	ldrb	r3, [r7, #3]
    26e2:	429a      	cmp	r2, r3
    26e4:	d004      	beq.n	26f0 <is_char_or+0x24>
    26e6:	687b      	ldr	r3, [r7, #4]
    26e8:	691a      	ldr	r2, [r3, #16]
    26ea:	78bb      	ldrb	r3, [r7, #2]
    26ec:	429a      	cmp	r2, r3
    26ee:	d101      	bne.n	26f4 <is_char_or+0x28>
    26f0:	2301      	movs	r3, #1
    26f2:	e000      	b.n	26f6 <is_char_or+0x2a>
    26f4:	2300      	movs	r3, #0
    26f6:	f003 0301 	and.w	r3, r3, #1
    26fa:	b2db      	uxtb	r3, r3
}
    26fc:	4618      	mov	r0, r3
    26fe:	370c      	adds	r7, #12
    2700:	46bd      	mov	sp, r7
    2702:	f85d 7b04 	ldr.w	r7, [sp], #4
    2706:	4770      	bx	lr

00002708 <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    2708:	b480      	push	{r7}
    270a:	b083      	sub	sp, #12
    270c:	af00      	add	r7, sp, #0
    270e:	6078      	str	r0, [r7, #4]
    2710:	4608      	mov	r0, r1
    2712:	4611      	mov	r1, r2
    2714:	461a      	mov	r2, r3
    2716:	4603      	mov	r3, r0
    2718:	70fb      	strb	r3, [r7, #3]
    271a:	460b      	mov	r3, r1
    271c:	70bb      	strb	r3, [r7, #2]
    271e:	4613      	mov	r3, r2
    2720:	707b      	strb	r3, [r7, #1]
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	691a      	ldr	r2, [r3, #16]
    2726:	78fb      	ldrb	r3, [r7, #3]
    2728:	429a      	cmp	r2, r3
    272a:	d009      	beq.n	2740 <is_char_or3+0x38>
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	691a      	ldr	r2, [r3, #16]
    2730:	78bb      	ldrb	r3, [r7, #2]
    2732:	429a      	cmp	r2, r3
    2734:	d004      	beq.n	2740 <is_char_or3+0x38>
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	691a      	ldr	r2, [r3, #16]
    273a:	787b      	ldrb	r3, [r7, #1]
    273c:	429a      	cmp	r2, r3
    273e:	d101      	bne.n	2744 <is_char_or3+0x3c>
    2740:	2301      	movs	r3, #1
    2742:	e000      	b.n	2746 <is_char_or3+0x3e>
    2744:	2300      	movs	r3, #0
    2746:	f003 0301 	and.w	r3, r3, #1
    274a:	b2db      	uxtb	r3, r3
}
    274c:	4618      	mov	r0, r3
    274e:	370c      	adds	r7, #12
    2750:	46bd      	mov	sp, r7
    2752:	f85d 7b04 	ldr.w	r7, [sp], #4
    2756:	4770      	bx	lr

00002758 <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    2758:	b480      	push	{r7}
    275a:	b083      	sub	sp, #12
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
    2760:	460b      	mov	r3, r1
    2762:	70fb      	strb	r3, [r7, #3]
    return lex->chr1 == c;
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	695a      	ldr	r2, [r3, #20]
    2768:	78fb      	ldrb	r3, [r7, #3]
    276a:	429a      	cmp	r2, r3
    276c:	bf0c      	ite	eq
    276e:	2301      	moveq	r3, #1
    2770:	2300      	movne	r3, #0
    2772:	b2db      	uxtb	r3, r3
}
    2774:	4618      	mov	r0, r3
    2776:	370c      	adds	r7, #12
    2778:	46bd      	mov	sp, r7
    277a:	f85d 7b04 	ldr.w	r7, [sp], #4
    277e:	4770      	bx	lr

00002780 <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    2780:	b480      	push	{r7}
    2782:	b083      	sub	sp, #12
    2784:	af00      	add	r7, sp, #0
    2786:	6078      	str	r0, [r7, #4]
    2788:	460b      	mov	r3, r1
    278a:	70fb      	strb	r3, [r7, #3]
    278c:	4613      	mov	r3, r2
    278e:	70bb      	strb	r3, [r7, #2]
    return lex->chr1 == c1 || lex->chr1 == c2;
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	695a      	ldr	r2, [r3, #20]
    2794:	78fb      	ldrb	r3, [r7, #3]
    2796:	429a      	cmp	r2, r3
    2798:	d004      	beq.n	27a4 <is_char_following_or+0x24>
    279a:	687b      	ldr	r3, [r7, #4]
    279c:	695a      	ldr	r2, [r3, #20]
    279e:	78bb      	ldrb	r3, [r7, #2]
    27a0:	429a      	cmp	r2, r3
    27a2:	d101      	bne.n	27a8 <is_char_following_or+0x28>
    27a4:	2301      	movs	r3, #1
    27a6:	e000      	b.n	27aa <is_char_following_or+0x2a>
    27a8:	2300      	movs	r3, #0
    27aa:	f003 0301 	and.w	r3, r3, #1
    27ae:	b2db      	uxtb	r3, r3
}
    27b0:	4618      	mov	r0, r3
    27b2:	370c      	adds	r7, #12
    27b4:	46bd      	mov	sp, r7
    27b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ba:	4770      	bx	lr

000027bc <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    27bc:	b480      	push	{r7}
    27be:	b083      	sub	sp, #12
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
    27c4:	460b      	mov	r3, r1
    27c6:	70fb      	strb	r3, [r7, #3]
    27c8:	4613      	mov	r3, r2
    27ca:	70bb      	strb	r3, [r7, #2]
    return lex->chr2 == c1 || lex->chr2 == c2;
    27cc:	687b      	ldr	r3, [r7, #4]
    27ce:	699a      	ldr	r2, [r3, #24]
    27d0:	78fb      	ldrb	r3, [r7, #3]
    27d2:	429a      	cmp	r2, r3
    27d4:	d004      	beq.n	27e0 <is_char_following_following_or+0x24>
    27d6:	687b      	ldr	r3, [r7, #4]
    27d8:	699a      	ldr	r2, [r3, #24]
    27da:	78bb      	ldrb	r3, [r7, #2]
    27dc:	429a      	cmp	r2, r3
    27de:	d101      	bne.n	27e4 <is_char_following_following_or+0x28>
    27e0:	2301      	movs	r3, #1
    27e2:	e000      	b.n	27e6 <is_char_following_following_or+0x2a>
    27e4:	2300      	movs	r3, #0
    27e6:	f003 0301 	and.w	r3, r3, #1
    27ea:	b2db      	uxtb	r3, r3
}
    27ec:	4618      	mov	r0, r3
    27ee:	370c      	adds	r7, #12
    27f0:	46bd      	mov	sp, r7
    27f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    27f6:	4770      	bx	lr

000027f8 <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    27f8:	b480      	push	{r7}
    27fa:	b083      	sub	sp, #12
    27fc:	af00      	add	r7, sp, #0
    27fe:	6078      	str	r0, [r7, #4]
    2800:	460b      	mov	r3, r1
    2802:	70fb      	strb	r3, [r7, #3]
    2804:	4613      	mov	r3, r2
    2806:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 && lex->chr1 == c2;
    2808:	687b      	ldr	r3, [r7, #4]
    280a:	691a      	ldr	r2, [r3, #16]
    280c:	78fb      	ldrb	r3, [r7, #3]
    280e:	429a      	cmp	r2, r3
    2810:	d106      	bne.n	2820 <is_char_and+0x28>
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	695a      	ldr	r2, [r3, #20]
    2816:	78bb      	ldrb	r3, [r7, #2]
    2818:	429a      	cmp	r2, r3
    281a:	d101      	bne.n	2820 <is_char_and+0x28>
    281c:	2301      	movs	r3, #1
    281e:	e000      	b.n	2822 <is_char_and+0x2a>
    2820:	2300      	movs	r3, #0
    2822:	f003 0301 	and.w	r3, r3, #1
    2826:	b2db      	uxtb	r3, r3
}
    2828:	4618      	mov	r0, r3
    282a:	370c      	adds	r7, #12
    282c:	46bd      	mov	sp, r7
    282e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2832:	4770      	bx	lr

00002834 <is_whitespace>:

STATIC bool is_whitespace(mp_lexer_t *lex) {
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
    return unichar_isspace(lex->chr0);
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	691b      	ldr	r3, [r3, #16]
    2840:	4618      	mov	r0, r3
    2842:	f7ff fd93 	bl	236c <unichar_isspace>
    2846:	4603      	mov	r3, r0
}
    2848:	4618      	mov	r0, r3
    284a:	3708      	adds	r7, #8
    284c:	46bd      	mov	sp, r7
    284e:	bd80      	pop	{r7, pc}

00002850 <is_letter>:

STATIC bool is_letter(mp_lexer_t *lex) {
    2850:	b580      	push	{r7, lr}
    2852:	b082      	sub	sp, #8
    2854:	af00      	add	r7, sp, #0
    2856:	6078      	str	r0, [r7, #4]
    return unichar_isalpha(lex->chr0);
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	691b      	ldr	r3, [r3, #16]
    285c:	4618      	mov	r0, r3
    285e:	f7ff fda3 	bl	23a8 <unichar_isalpha>
    2862:	4603      	mov	r3, r0
}
    2864:	4618      	mov	r0, r3
    2866:	3708      	adds	r7, #8
    2868:	46bd      	mov	sp, r7
    286a:	bd80      	pop	{r7, pc}

0000286c <is_digit>:

STATIC bool is_digit(mp_lexer_t *lex) {
    286c:	b580      	push	{r7, lr}
    286e:	b082      	sub	sp, #8
    2870:	af00      	add	r7, sp, #0
    2872:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr0);
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	691b      	ldr	r3, [r3, #16]
    2878:	4618      	mov	r0, r3
    287a:	f7ff fdb3 	bl	23e4 <unichar_isdigit>
    287e:	4603      	mov	r3, r0
}
    2880:	4618      	mov	r0, r3
    2882:	3708      	adds	r7, #8
    2884:	46bd      	mov	sp, r7
    2886:	bd80      	pop	{r7, pc}

00002888 <is_following_digit>:

STATIC bool is_following_digit(mp_lexer_t *lex) {
    2888:	b580      	push	{r7, lr}
    288a:	b082      	sub	sp, #8
    288c:	af00      	add	r7, sp, #0
    288e:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr1);
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	695b      	ldr	r3, [r3, #20]
    2894:	4618      	mov	r0, r3
    2896:	f7ff fda5 	bl	23e4 <unichar_isdigit>
    289a:	4603      	mov	r3, r0
}
    289c:	4618      	mov	r0, r3
    289e:	3708      	adds	r7, #8
    28a0:	46bd      	mov	sp, r7
    28a2:	bd80      	pop	{r7, pc}

000028a4 <is_following_base_char>:

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    28a4:	b480      	push	{r7}
    28a6:	b085      	sub	sp, #20
    28a8:	af00      	add	r7, sp, #0
    28aa:	6078      	str	r0, [r7, #4]
    const unichar chr1 = lex->chr1 | 0x20;
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	695b      	ldr	r3, [r3, #20]
    28b0:	f043 0320 	orr.w	r3, r3, #32
    28b4:	60fb      	str	r3, [r7, #12]
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    28b6:	68fb      	ldr	r3, [r7, #12]
    28b8:	2b62      	cmp	r3, #98	; 0x62
    28ba:	d005      	beq.n	28c8 <is_following_base_char+0x24>
    28bc:	68fb      	ldr	r3, [r7, #12]
    28be:	2b6f      	cmp	r3, #111	; 0x6f
    28c0:	d002      	beq.n	28c8 <is_following_base_char+0x24>
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	2b78      	cmp	r3, #120	; 0x78
    28c6:	d101      	bne.n	28cc <is_following_base_char+0x28>
    28c8:	2301      	movs	r3, #1
    28ca:	e000      	b.n	28ce <is_following_base_char+0x2a>
    28cc:	2300      	movs	r3, #0
    28ce:	f003 0301 	and.w	r3, r3, #1
    28d2:	b2db      	uxtb	r3, r3
}
    28d4:	4618      	mov	r0, r3
    28d6:	3714      	adds	r7, #20
    28d8:	46bd      	mov	sp, r7
    28da:	f85d 7b04 	ldr.w	r7, [sp], #4
    28de:	4770      	bx	lr

000028e0 <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    28e0:	b480      	push	{r7}
    28e2:	b083      	sub	sp, #12
    28e4:	af00      	add	r7, sp, #0
    28e6:	6078      	str	r0, [r7, #4]
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	695b      	ldr	r3, [r3, #20]
    28ec:	2b2f      	cmp	r3, #47	; 0x2f
    28ee:	d905      	bls.n	28fc <is_following_odigit+0x1c>
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	695b      	ldr	r3, [r3, #20]
    28f4:	2b37      	cmp	r3, #55	; 0x37
    28f6:	d801      	bhi.n	28fc <is_following_odigit+0x1c>
    28f8:	2301      	movs	r3, #1
    28fa:	e000      	b.n	28fe <is_following_odigit+0x1e>
    28fc:	2300      	movs	r3, #0
    28fe:	f003 0301 	and.w	r3, r3, #1
    2902:	b2db      	uxtb	r3, r3
}
    2904:	4618      	mov	r0, r3
    2906:	370c      	adds	r7, #12
    2908:	46bd      	mov	sp, r7
    290a:	f85d 7b04 	ldr.w	r7, [sp], #4
    290e:	4770      	bx	lr

00002910 <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    2910:	b580      	push	{r7, lr}
    2912:	b082      	sub	sp, #8
    2914:	af00      	add	r7, sp, #0
    2916:	6078      	str	r0, [r7, #4]
    return is_char_or(lex, '\'', '\"')
    2918:	2222      	movs	r2, #34	; 0x22
    291a:	2127      	movs	r1, #39	; 0x27
    291c:	6878      	ldr	r0, [r7, #4]
    291e:	f7ff fed5 	bl	26cc <is_char_or>
    2922:	4603      	mov	r3, r0
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2924:	2b00      	cmp	r3, #0
    2926:	d128      	bne.n	297a <is_string_or_bytes+0x6a>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    2928:	2362      	movs	r3, #98	; 0x62
    292a:	2275      	movs	r2, #117	; 0x75
    292c:	2172      	movs	r1, #114	; 0x72
    292e:	6878      	ldr	r0, [r7, #4]
    2930:	f7ff feea 	bl	2708 <is_char_or3>
    2934:	4603      	mov	r3, r0
    2936:	2b00      	cmp	r3, #0
    2938:	d007      	beq.n	294a <is_string_or_bytes+0x3a>
    293a:	2222      	movs	r2, #34	; 0x22
    293c:	2127      	movs	r1, #39	; 0x27
    293e:	6878      	ldr	r0, [r7, #4]
    2940:	f7ff ff1e 	bl	2780 <is_char_following_or>
    2944:	4603      	mov	r3, r0
    2946:	2b00      	cmp	r3, #0
    2948:	d117      	bne.n	297a <is_string_or_bytes+0x6a>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    294a:	2262      	movs	r2, #98	; 0x62
    294c:	2172      	movs	r1, #114	; 0x72
    294e:	6878      	ldr	r0, [r7, #4]
    2950:	f7ff ff52 	bl	27f8 <is_char_and>
    2954:	4603      	mov	r3, r0
    2956:	2b00      	cmp	r3, #0
    2958:	d107      	bne.n	296a <is_string_or_bytes+0x5a>
    295a:	2272      	movs	r2, #114	; 0x72
    295c:	2162      	movs	r1, #98	; 0x62
    295e:	6878      	ldr	r0, [r7, #4]
    2960:	f7ff ff4a 	bl	27f8 <is_char_and>
    2964:	4603      	mov	r3, r0
    2966:	2b00      	cmp	r3, #0
    2968:	d009      	beq.n	297e <is_string_or_bytes+0x6e>
            && is_char_following_following_or(lex, '\'', '\"'));
    296a:	2222      	movs	r2, #34	; 0x22
    296c:	2127      	movs	r1, #39	; 0x27
    296e:	6878      	ldr	r0, [r7, #4]
    2970:	f7ff ff24 	bl	27bc <is_char_following_following_or>
    2974:	4603      	mov	r3, r0
    2976:	2b00      	cmp	r3, #0
    2978:	d001      	beq.n	297e <is_string_or_bytes+0x6e>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    297a:	2301      	movs	r3, #1
    297c:	e000      	b.n	2980 <is_string_or_bytes+0x70>
    297e:	2300      	movs	r3, #0
    2980:	f003 0301 	and.w	r3, r3, #1
    2984:	b2db      	uxtb	r3, r3
}
    2986:	4618      	mov	r0, r3
    2988:	3708      	adds	r7, #8
    298a:	46bd      	mov	sp, r7
    298c:	bd80      	pop	{r7, pc}

0000298e <is_head_of_identifier>:

// to easily parse utf-8 identifiers we allow any raw byte with high bit set
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    298e:	b580      	push	{r7, lr}
    2990:	b082      	sub	sp, #8
    2992:	af00      	add	r7, sp, #0
    2994:	6078      	str	r0, [r7, #4]
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    2996:	6878      	ldr	r0, [r7, #4]
    2998:	f7ff ff5a 	bl	2850 <is_letter>
    299c:	4603      	mov	r3, r0
    299e:	2b00      	cmp	r3, #0
    29a0:	d107      	bne.n	29b2 <is_head_of_identifier+0x24>
    29a2:	687b      	ldr	r3, [r7, #4]
    29a4:	691b      	ldr	r3, [r3, #16]
    29a6:	2b5f      	cmp	r3, #95	; 0x5f
    29a8:	d003      	beq.n	29b2 <is_head_of_identifier+0x24>
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	691b      	ldr	r3, [r3, #16]
    29ae:	2b7f      	cmp	r3, #127	; 0x7f
    29b0:	d901      	bls.n	29b6 <is_head_of_identifier+0x28>
    29b2:	2301      	movs	r3, #1
    29b4:	e000      	b.n	29b8 <is_head_of_identifier+0x2a>
    29b6:	2300      	movs	r3, #0
    29b8:	f003 0301 	and.w	r3, r3, #1
    29bc:	b2db      	uxtb	r3, r3
}
    29be:	4618      	mov	r0, r3
    29c0:	3708      	adds	r7, #8
    29c2:	46bd      	mov	sp, r7
    29c4:	bd80      	pop	{r7, pc}

000029c6 <is_tail_of_identifier>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    29c6:	b580      	push	{r7, lr}
    29c8:	b082      	sub	sp, #8
    29ca:	af00      	add	r7, sp, #0
    29cc:	6078      	str	r0, [r7, #4]
    return is_head_of_identifier(lex) || is_digit(lex);
    29ce:	6878      	ldr	r0, [r7, #4]
    29d0:	f7ff ffdd 	bl	298e <is_head_of_identifier>
    29d4:	4603      	mov	r3, r0
    29d6:	2b00      	cmp	r3, #0
    29d8:	d105      	bne.n	29e6 <is_tail_of_identifier+0x20>
    29da:	6878      	ldr	r0, [r7, #4]
    29dc:	f7ff ff46 	bl	286c <is_digit>
    29e0:	4603      	mov	r3, r0
    29e2:	2b00      	cmp	r3, #0
    29e4:	d001      	beq.n	29ea <is_tail_of_identifier+0x24>
    29e6:	2301      	movs	r3, #1
    29e8:	e000      	b.n	29ec <is_tail_of_identifier+0x26>
    29ea:	2300      	movs	r3, #0
    29ec:	f003 0301 	and.w	r3, r3, #1
    29f0:	b2db      	uxtb	r3, r3
}
    29f2:	4618      	mov	r0, r3
    29f4:	3708      	adds	r7, #8
    29f6:	46bd      	mov	sp, r7
    29f8:	bd80      	pop	{r7, pc}

000029fa <next_char>:

STATIC void next_char(mp_lexer_t *lex) {
    29fa:	b580      	push	{r7, lr}
    29fc:	b082      	sub	sp, #8
    29fe:	af00      	add	r7, sp, #0
    2a00:	6078      	str	r0, [r7, #4]
    if (lex->chr0 == '\n') {
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	691b      	ldr	r3, [r3, #16]
    2a06:	2b0a      	cmp	r3, #10
    2a08:	d108      	bne.n	2a1c <next_char+0x22>
        // a new line
        ++lex->line;
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	69db      	ldr	r3, [r3, #28]
    2a0e:	1c5a      	adds	r2, r3, #1
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	61da      	str	r2, [r3, #28]
        lex->column = 1;
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	2201      	movs	r2, #1
    2a18:	621a      	str	r2, [r3, #32]
    2a1a:	e011      	b.n	2a40 <next_char+0x46>
    } else if (lex->chr0 == '\t') {
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	691b      	ldr	r3, [r3, #16]
    2a20:	2b09      	cmp	r3, #9
    2a22:	d108      	bne.n	2a36 <next_char+0x3c>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	6a1b      	ldr	r3, [r3, #32]
    2a28:	3307      	adds	r3, #7
    2a2a:	f023 0307 	bic.w	r3, r3, #7
    2a2e:	1c5a      	adds	r2, r3, #1
    2a30:	687b      	ldr	r3, [r7, #4]
    2a32:	621a      	str	r2, [r3, #32]
    2a34:	e004      	b.n	2a40 <next_char+0x46>
    } else {
        // a character worth one column
        ++lex->column;
    2a36:	687b      	ldr	r3, [r7, #4]
    2a38:	6a1b      	ldr	r3, [r3, #32]
    2a3a:	1c5a      	adds	r2, r3, #1
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	621a      	str	r2, [r3, #32]
    }

    lex->chr0 = lex->chr1;
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	695a      	ldr	r2, [r3, #20]
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	611a      	str	r2, [r3, #16]
    lex->chr1 = lex->chr2;
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	699a      	ldr	r2, [r3, #24]
    2a4c:	687b      	ldr	r3, [r7, #4]
    2a4e:	615a      	str	r2, [r3, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	689b      	ldr	r3, [r3, #8]
    2a54:	687a      	ldr	r2, [r7, #4]
    2a56:	6852      	ldr	r2, [r2, #4]
    2a58:	4610      	mov	r0, r2
    2a5a:	4798      	blx	r3
    2a5c:	4602      	mov	r2, r0
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	619a      	str	r2, [r3, #24]

    if (lex->chr1 == '\r') {
    2a62:	687b      	ldr	r3, [r7, #4]
    2a64:	695b      	ldr	r3, [r3, #20]
    2a66:	2b0d      	cmp	r3, #13
    2a68:	d10f      	bne.n	2a8a <next_char+0x90>
        // CR is a new line, converted to LF
        lex->chr1 = '\n';
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	220a      	movs	r2, #10
    2a6e:	615a      	str	r2, [r3, #20]
        if (lex->chr2 == '\n') {
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	699b      	ldr	r3, [r3, #24]
    2a74:	2b0a      	cmp	r3, #10
    2a76:	d108      	bne.n	2a8a <next_char+0x90>
            // CR LF is a single new line, throw out the extra LF
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	689b      	ldr	r3, [r3, #8]
    2a7c:	687a      	ldr	r2, [r7, #4]
    2a7e:	6852      	ldr	r2, [r2, #4]
    2a80:	4610      	mov	r0, r2
    2a82:	4798      	blx	r3
    2a84:	4602      	mov	r2, r0
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	619a      	str	r2, [r3, #24]
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    2a8a:	687b      	ldr	r3, [r7, #4]
    2a8c:	699b      	ldr	r3, [r3, #24]
    2a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2a92:	d10b      	bne.n	2aac <next_char+0xb2>
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	695b      	ldr	r3, [r3, #20]
    2a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2a9c:	d006      	beq.n	2aac <next_char+0xb2>
    2a9e:	687b      	ldr	r3, [r7, #4]
    2aa0:	695b      	ldr	r3, [r3, #20]
    2aa2:	2b0a      	cmp	r3, #10
    2aa4:	d002      	beq.n	2aac <next_char+0xb2>
        lex->chr2 = '\n';
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	220a      	movs	r2, #10
    2aaa:	619a      	str	r2, [r3, #24]
    }
}
    2aac:	bf00      	nop
    2aae:	3708      	adds	r7, #8
    2ab0:	46bd      	mov	sp, r7
    2ab2:	bd80      	pop	{r7, pc}

00002ab4 <indent_push>:

STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    2ab4:	b580      	push	{r7, lr}
    2ab6:	b082      	sub	sp, #8
    2ab8:	af00      	add	r7, sp, #0
    2aba:	6078      	str	r0, [r7, #4]
    2abc:	6039      	str	r1, [r7, #0]
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ac6:	429a      	cmp	r2, r3
    2ac8:	d312      	bcc.n	2af0 <indent_push+0x3c>
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    2aca:	687b      	ldr	r3, [r7, #4]
    2acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ad2:	3308      	adds	r3, #8
    2ad4:	005b      	lsls	r3, r3, #1
    2ad6:	4619      	mov	r1, r3
    2ad8:	4610      	mov	r0, r2
    2ada:	f7fd fc51 	bl	380 <m_realloc>
    2ade:	4602      	mov	r2, r0
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	635a      	str	r2, [r3, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ae8:	f103 0208 	add.w	r2, r3, #8
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    lex->indent_level[lex->num_indent_level++] = indent;
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2af8:	1c58      	adds	r0, r3, #1
    2afa:	6879      	ldr	r1, [r7, #4]
    2afc:	6308      	str	r0, [r1, #48]	; 0x30
    2afe:	005b      	lsls	r3, r3, #1
    2b00:	4413      	add	r3, r2
    2b02:	683a      	ldr	r2, [r7, #0]
    2b04:	b292      	uxth	r2, r2
    2b06:	801a      	strh	r2, [r3, #0]
}
    2b08:	bf00      	nop
    2b0a:	3708      	adds	r7, #8
    2b0c:	46bd      	mov	sp, r7
    2b0e:	bd80      	pop	{r7, pc}

00002b10 <indent_top>:

STATIC size_t indent_top(mp_lexer_t *lex) {
    2b10:	b480      	push	{r7}
    2b12:	b083      	sub	sp, #12
    2b14:	af00      	add	r7, sp, #0
    2b16:	6078      	str	r0, [r7, #4]
    return lex->indent_level[lex->num_indent_level - 1];
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2b24:	3b01      	subs	r3, #1
    2b26:	005b      	lsls	r3, r3, #1
    2b28:	4413      	add	r3, r2
    2b2a:	881b      	ldrh	r3, [r3, #0]
}
    2b2c:	4618      	mov	r0, r3
    2b2e:	370c      	adds	r7, #12
    2b30:	46bd      	mov	sp, r7
    2b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b36:	4770      	bx	lr

00002b38 <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    2b38:	b480      	push	{r7}
    2b3a:	b083      	sub	sp, #12
    2b3c:	af00      	add	r7, sp, #0
    2b3e:	6078      	str	r0, [r7, #4]
    lex->num_indent_level -= 1;
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b44:	1e5a      	subs	r2, r3, #1
    2b46:	687b      	ldr	r3, [r7, #4]
    2b48:	631a      	str	r2, [r3, #48]	; 0x30
}
    2b4a:	bf00      	nop
    2b4c:	370c      	adds	r7, #12
    2b4e:	46bd      	mov	sp, r7
    2b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b54:	4770      	bx	lr

00002b56 <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    2b56:	b590      	push	{r4, r7, lr}
    2b58:	b087      	sub	sp, #28
    2b5a:	af00      	add	r7, sp, #0
    2b5c:	60f8      	str	r0, [r7, #12]
    2b5e:	60b9      	str	r1, [r7, #8]
    2b60:	607a      	str	r2, [r7, #4]
    mp_uint_t num = 0;
    2b62:	2300      	movs	r3, #0
    2b64:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2b66:	e018      	b.n	2b9a <get_hex+0x44>
        next_char(lex);
    2b68:	68f8      	ldr	r0, [r7, #12]
    2b6a:	f7ff ff46 	bl	29fa <next_char>
        unichar c = CUR_CHAR(lex);
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	691b      	ldr	r3, [r3, #16]
    2b72:	613b      	str	r3, [r7, #16]
        if (!unichar_isxdigit(c)) {
    2b74:	6938      	ldr	r0, [r7, #16]
    2b76:	f7ff fc53 	bl	2420 <unichar_isxdigit>
    2b7a:	4603      	mov	r3, r0
    2b7c:	f083 0301 	eor.w	r3, r3, #1
    2b80:	b2db      	uxtb	r3, r3
    2b82:	2b00      	cmp	r3, #0
    2b84:	d001      	beq.n	2b8a <get_hex+0x34>
            return false;
    2b86:	2300      	movs	r3, #0
    2b88:	e010      	b.n	2bac <get_hex+0x56>
        }
        num = (num << 4) + unichar_xdigit_value(c);
    2b8a:	697b      	ldr	r3, [r7, #20]
    2b8c:	011c      	lsls	r4, r3, #4
    2b8e:	6938      	ldr	r0, [r7, #16]
    2b90:	f7ff fce4 	bl	255c <unichar_xdigit_value>
    2b94:	4603      	mov	r3, r0
    2b96:	4423      	add	r3, r4
    2b98:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2b9a:	68bb      	ldr	r3, [r7, #8]
    2b9c:	1e5a      	subs	r2, r3, #1
    2b9e:	60ba      	str	r2, [r7, #8]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d1e1      	bne.n	2b68 <get_hex+0x12>
    }
    *result = num;
    2ba4:	687b      	ldr	r3, [r7, #4]
    2ba6:	697a      	ldr	r2, [r7, #20]
    2ba8:	601a      	str	r2, [r3, #0]
    return true;
    2baa:	2301      	movs	r3, #1
}
    2bac:	4618      	mov	r0, r3
    2bae:	371c      	adds	r7, #28
    2bb0:	46bd      	mov	sp, r7
    2bb2:	bd90      	pop	{r4, r7, pc}

00002bb4 <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    2bb4:	b580      	push	{r7, lr}
    2bb6:	b08a      	sub	sp, #40	; 0x28
    2bb8:	af00      	add	r7, sp, #0
    2bba:	6078      	str	r0, [r7, #4]
    2bbc:	460b      	mov	r3, r1
    2bbe:	70fb      	strb	r3, [r7, #3]
    // get first quoting character
    char quote_char = '\'';
    2bc0:	2327      	movs	r3, #39	; 0x27
    2bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_char(lex, '\"')) {
    2bc6:	2122      	movs	r1, #34	; 0x22
    2bc8:	6878      	ldr	r0, [r7, #4]
    2bca:	f7ff fd6b 	bl	26a4 <is_char>
    2bce:	4603      	mov	r3, r0
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d002      	beq.n	2bda <parse_string_literal+0x26>
        quote_char = '\"';
    2bd4:	2322      	movs	r3, #34	; 0x22
    2bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    next_char(lex);
    2bda:	6878      	ldr	r0, [r7, #4]
    2bdc:	f7ff ff0d 	bl	29fa <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    2be0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2be8:	4619      	mov	r1, r3
    2bea:	6878      	ldr	r0, [r7, #4]
    2bec:	f7ff fe04 	bl	27f8 <is_char_and>
    2bf0:	4603      	mov	r3, r0
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d008      	beq.n	2c08 <parse_string_literal+0x54>
        // triple quotes
        next_char(lex);
    2bf6:	6878      	ldr	r0, [r7, #4]
    2bf8:	f7ff feff 	bl	29fa <next_char>
        next_char(lex);
    2bfc:	6878      	ldr	r0, [r7, #4]
    2bfe:	f7ff fefc 	bl	29fa <next_char>
        num_quotes = 3;
    2c02:	2303      	movs	r3, #3
    2c04:	623b      	str	r3, [r7, #32]
    2c06:	e001      	b.n	2c0c <parse_string_literal+0x58>
    } else {
        // single quotes
        num_quotes = 1;
    2c08:	2301      	movs	r3, #1
    2c0a:	623b      	str	r3, [r7, #32]
    }

    size_t n_closing = 0;
    2c0c:	2300      	movs	r3, #0
    2c0e:	61fb      	str	r3, [r7, #28]
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2c10:	e1ac      	b.n	2f6c <parse_string_literal+0x3b8>
        if (is_char(lex, quote_char)) {
    2c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c16:	4619      	mov	r1, r3
    2c18:	6878      	ldr	r0, [r7, #4]
    2c1a:	f7ff fd43 	bl	26a4 <is_char>
    2c1e:	4603      	mov	r3, r0
    2c20:	2b00      	cmp	r3, #0
    2c22:	d00c      	beq.n	2c3e <parse_string_literal+0x8a>
            n_closing += 1;
    2c24:	69fb      	ldr	r3, [r7, #28]
    2c26:	3301      	adds	r3, #1
    2c28:	61fb      	str	r3, [r7, #28]
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	691b      	ldr	r3, [r3, #16]
    2c34:	4619      	mov	r1, r3
    2c36:	4610      	mov	r0, r2
    2c38:	f7fe fcc4 	bl	15c4 <vstr_add_char>
    2c3c:	e193      	b.n	2f66 <parse_string_literal+0x3b2>
        } else {
            n_closing = 0;
    2c3e:	2300      	movs	r3, #0
    2c40:	61fb      	str	r3, [r7, #28]
            if (is_char(lex, '\\')) {
    2c42:	215c      	movs	r1, #92	; 0x5c
    2c44:	6878      	ldr	r0, [r7, #4]
    2c46:	f7ff fd2d 	bl	26a4 <is_char>
    2c4a:	4603      	mov	r3, r0
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	f000 8180 	beq.w	2f52 <parse_string_literal+0x39e>
                next_char(lex);
    2c52:	6878      	ldr	r0, [r7, #4]
    2c54:	f7ff fed1 	bl	29fa <next_char>
                unichar c = CUR_CHAR(lex);
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	691b      	ldr	r3, [r3, #16]
    2c5c:	61bb      	str	r3, [r7, #24]
                if (is_raw) {
    2c5e:	78fb      	ldrb	r3, [r7, #3]
    2c60:	2b00      	cmp	r3, #0
    2c62:	d006      	beq.n	2c72 <parse_string_literal+0xbe>
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    2c64:	687b      	ldr	r3, [r7, #4]
    2c66:	3344      	adds	r3, #68	; 0x44
    2c68:	215c      	movs	r1, #92	; 0x5c
    2c6a:	4618      	mov	r0, r3
    2c6c:	f7fe fcaa 	bl	15c4 <vstr_add_char>
    2c70:	e15b      	b.n	2f2a <parse_string_literal+0x376>
                } else {
                    switch (c) {
    2c72:	69bb      	ldr	r3, [r7, #24]
    2c74:	3b0a      	subs	r3, #10
    2c76:	2b6e      	cmp	r3, #110	; 0x6e
    2c78:	f200 8129 	bhi.w	2ece <parse_string_literal+0x31a>
    2c7c:	a201      	add	r2, pc, #4	; (adr r2, 2c84 <parse_string_literal+0xd0>)
    2c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2c82:	bf00      	nop
    2c84:	00002e41 	.word	0x00002e41
    2c88:	00002ecf 	.word	0x00002ecf
    2c8c:	00002ecf 	.word	0x00002ecf
    2c90:	00002ecf 	.word	0x00002ecf
    2c94:	00002ecf 	.word	0x00002ecf
    2c98:	00002ecf 	.word	0x00002ecf
    2c9c:	00002ecf 	.word	0x00002ecf
    2ca0:	00002ecf 	.word	0x00002ecf
    2ca4:	00002ecf 	.word	0x00002ecf
    2ca8:	00002ecf 	.word	0x00002ecf
    2cac:	00002ecf 	.word	0x00002ecf
    2cb0:	00002ecf 	.word	0x00002ecf
    2cb4:	00002ecf 	.word	0x00002ecf
    2cb8:	00002ecf 	.word	0x00002ecf
    2cbc:	00002ecf 	.word	0x00002ecf
    2cc0:	00002ecf 	.word	0x00002ecf
    2cc4:	00002ecf 	.word	0x00002ecf
    2cc8:	00002ecf 	.word	0x00002ecf
    2ccc:	00002ecf 	.word	0x00002ecf
    2cd0:	00002ecf 	.word	0x00002ecf
    2cd4:	00002ecf 	.word	0x00002ecf
    2cd8:	00002ecf 	.word	0x00002ecf
    2cdc:	00002ecf 	.word	0x00002ecf
    2ce0:	00002ecf 	.word	0x00002ecf
    2ce4:	00002f29 	.word	0x00002f29
    2ce8:	00002ecf 	.word	0x00002ecf
    2cec:	00002ecf 	.word	0x00002ecf
    2cf0:	00002ecf 	.word	0x00002ecf
    2cf4:	00002ecf 	.word	0x00002ecf
    2cf8:	00002f29 	.word	0x00002f29
    2cfc:	00002ecf 	.word	0x00002ecf
    2d00:	00002ecf 	.word	0x00002ecf
    2d04:	00002ecf 	.word	0x00002ecf
    2d08:	00002ecf 	.word	0x00002ecf
    2d0c:	00002ecf 	.word	0x00002ecf
    2d10:	00002ecf 	.word	0x00002ecf
    2d14:	00002ecf 	.word	0x00002ecf
    2d18:	00002ecf 	.word	0x00002ecf
    2d1c:	00002ecf 	.word	0x00002ecf
    2d20:	00002ecf 	.word	0x00002ecf
    2d24:	00002ecf 	.word	0x00002ecf
    2d28:	00002ecf 	.word	0x00002ecf
    2d2c:	00002ecf 	.word	0x00002ecf
    2d30:	00002ecf 	.word	0x00002ecf
    2d34:	00002ecf 	.word	0x00002ecf
    2d38:	00002ecf 	.word	0x00002ecf
    2d3c:	00002ecf 	.word	0x00002ecf
    2d40:	00002ecf 	.word	0x00002ecf
    2d44:	00002ecf 	.word	0x00002ecf
    2d48:	00002ecf 	.word	0x00002ecf
    2d4c:	00002ecf 	.word	0x00002ecf
    2d50:	00002ecf 	.word	0x00002ecf
    2d54:	00002ecf 	.word	0x00002ecf
    2d58:	00002ecf 	.word	0x00002ecf
    2d5c:	00002ecf 	.word	0x00002ecf
    2d60:	00002ecf 	.word	0x00002ecf
    2d64:	00002ecf 	.word	0x00002ecf
    2d68:	00002ecf 	.word	0x00002ecf
    2d6c:	00002ecf 	.word	0x00002ecf
    2d70:	00002ecf 	.word	0x00002ecf
    2d74:	00002ecf 	.word	0x00002ecf
    2d78:	00002ecf 	.word	0x00002ecf
    2d7c:	00002ecf 	.word	0x00002ecf
    2d80:	00002ecf 	.word	0x00002ecf
    2d84:	00002ecf 	.word	0x00002ecf
    2d88:	00002ecf 	.word	0x00002ecf
    2d8c:	00002ecf 	.word	0x00002ecf
    2d90:	00002ecf 	.word	0x00002ecf
    2d94:	00002ec9 	.word	0x00002ec9
    2d98:	00002ecf 	.word	0x00002ecf
    2d9c:	00002ecf 	.word	0x00002ecf
    2da0:	00002ecf 	.word	0x00002ecf
    2da4:	00002ecf 	.word	0x00002ecf
    2da8:	00002ecf 	.word	0x00002ecf
    2dac:	00002ecf 	.word	0x00002ecf
    2db0:	00002e73 	.word	0x00002e73
    2db4:	00002ecf 	.word	0x00002ecf
    2db8:	00002ecf 	.word	0x00002ecf
    2dbc:	00002ecf 	.word	0x00002ecf
    2dc0:	00002ecf 	.word	0x00002ecf
    2dc4:	00002ecf 	.word	0x00002ecf
    2dc8:	00002ecf 	.word	0x00002ecf
    2dcc:	00002f29 	.word	0x00002f29
    2dd0:	00002ecf 	.word	0x00002ecf
    2dd4:	00002ecf 	.word	0x00002ecf
    2dd8:	00002ecf 	.word	0x00002ecf
    2ddc:	00002ecf 	.word	0x00002ecf
    2de0:	00002e49 	.word	0x00002e49
    2de4:	00002e4f 	.word	0x00002e4f
    2de8:	00002ecf 	.word	0x00002ecf
    2dec:	00002ecf 	.word	0x00002ecf
    2df0:	00002ecf 	.word	0x00002ecf
    2df4:	00002e67 	.word	0x00002e67
    2df8:	00002ecf 	.word	0x00002ecf
    2dfc:	00002ecf 	.word	0x00002ecf
    2e00:	00002ecf 	.word	0x00002ecf
    2e04:	00002ecf 	.word	0x00002ecf
    2e08:	00002ecf 	.word	0x00002ecf
    2e0c:	00002ecf 	.word	0x00002ecf
    2e10:	00002ecf 	.word	0x00002ecf
    2e14:	00002e5b 	.word	0x00002e5b
    2e18:	00002ecf 	.word	0x00002ecf
    2e1c:	00002ecf 	.word	0x00002ecf
    2e20:	00002ecf 	.word	0x00002ecf
    2e24:	00002e6d 	.word	0x00002e6d
    2e28:	00002ecf 	.word	0x00002ecf
    2e2c:	00002e55 	.word	0x00002e55
    2e30:	00002e73 	.word	0x00002e73
    2e34:	00002e61 	.word	0x00002e61
    2e38:	00002ecf 	.word	0x00002ecf
    2e3c:	00002e89 	.word	0x00002e89
                        // note: "c" can never be MP_LEXER_EOF because next_char
                        // always inserts a newline at the end of the input stream
                        case '\n': c = MP_LEXER_EOF; break; // backslash escape the newline, just ignore it
    2e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e44:	61bb      	str	r3, [r7, #24]
    2e46:	e070      	b.n	2f2a <parse_string_literal+0x376>
                        case '\\': break;
                        case '\'': break;
                        case '"': break;
                        case 'a': c = 0x07; break;
    2e48:	2307      	movs	r3, #7
    2e4a:	61bb      	str	r3, [r7, #24]
    2e4c:	e06d      	b.n	2f2a <parse_string_literal+0x376>
                        case 'b': c = 0x08; break;
    2e4e:	2308      	movs	r3, #8
    2e50:	61bb      	str	r3, [r7, #24]
    2e52:	e06a      	b.n	2f2a <parse_string_literal+0x376>
                        case 't': c = 0x09; break;
    2e54:	2309      	movs	r3, #9
    2e56:	61bb      	str	r3, [r7, #24]
    2e58:	e067      	b.n	2f2a <parse_string_literal+0x376>
                        case 'n': c = 0x0a; break;
    2e5a:	230a      	movs	r3, #10
    2e5c:	61bb      	str	r3, [r7, #24]
    2e5e:	e064      	b.n	2f2a <parse_string_literal+0x376>
                        case 'v': c = 0x0b; break;
    2e60:	230b      	movs	r3, #11
    2e62:	61bb      	str	r3, [r7, #24]
    2e64:	e061      	b.n	2f2a <parse_string_literal+0x376>
                        case 'f': c = 0x0c; break;
    2e66:	230c      	movs	r3, #12
    2e68:	61bb      	str	r3, [r7, #24]
    2e6a:	e05e      	b.n	2f2a <parse_string_literal+0x376>
                        case 'r': c = 0x0d; break;
    2e6c:	230d      	movs	r3, #13
    2e6e:	61bb      	str	r3, [r7, #24]
    2e70:	e05b      	b.n	2f2a <parse_string_literal+0x376>
                        case 'u':
                        case 'U':
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    2e72:	687b      	ldr	r3, [r7, #4]
    2e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2e76:	2b0b      	cmp	r3, #11
    2e78:	d106      	bne.n	2e88 <parse_string_literal+0x2d4>
                                // b'\u1234' == b'\\u1234'
                                vstr_add_char(&lex->vstr, '\\');
    2e7a:	687b      	ldr	r3, [r7, #4]
    2e7c:	3344      	adds	r3, #68	; 0x44
    2e7e:	215c      	movs	r1, #92	; 0x5c
    2e80:	4618      	mov	r0, r3
    2e82:	f7fe fb9f 	bl	15c4 <vstr_add_char>
                                break;
    2e86:	e050      	b.n	2f2a <parse_string_literal+0x376>
                            }
                            // Otherwise fall through.
                        case 'x':
                        {
                            mp_uint_t num = 0;
    2e88:	2300      	movs	r3, #0
    2e8a:	60fb      	str	r3, [r7, #12]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    2e8c:	69bb      	ldr	r3, [r7, #24]
    2e8e:	2b78      	cmp	r3, #120	; 0x78
    2e90:	d006      	beq.n	2ea0 <parse_string_literal+0x2ec>
    2e92:	69bb      	ldr	r3, [r7, #24]
    2e94:	2b75      	cmp	r3, #117	; 0x75
    2e96:	d101      	bne.n	2e9c <parse_string_literal+0x2e8>
    2e98:	2304      	movs	r3, #4
    2e9a:	e002      	b.n	2ea2 <parse_string_literal+0x2ee>
    2e9c:	2308      	movs	r3, #8
    2e9e:	e000      	b.n	2ea2 <parse_string_literal+0x2ee>
    2ea0:	2302      	movs	r3, #2
    2ea2:	f107 020c 	add.w	r2, r7, #12
    2ea6:	4619      	mov	r1, r3
    2ea8:	6878      	ldr	r0, [r7, #4]
    2eaa:	f7ff fe54 	bl	2b56 <get_hex>
    2eae:	4603      	mov	r3, r0
    2eb0:	f083 0301 	eor.w	r3, r3, #1
    2eb4:	b2db      	uxtb	r3, r3
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d002      	beq.n	2ec0 <parse_string_literal+0x30c>
                                // not enough hex chars for escape sequence
                                lex->tok_kind = MP_TOKEN_INVALID;
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	2201      	movs	r2, #1
    2ebe:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                            c = num;
    2ec0:	68fb      	ldr	r3, [r7, #12]
    2ec2:	61bb      	str	r3, [r7, #24]
                            break;
    2ec4:	bf00      	nop
    2ec6:	e030      	b.n	2f2a <parse_string_literal+0x376>
                            // Supporting '\N{LATIN SMALL LETTER A}' == 'a' would require keeping the
                            // entire Unicode name table in the core. As of Unicode 6.3.0, that's nearly
                            // 3MB of text; even gzip-compressed and with minimal structure, it'll take
                            // roughly half a meg of storage. This form of Unicode escape may be added
                            // later on, but it's definitely not a priority right now. -- CJA 20140607
                            mp_raise_NotImplementedError("unicode name escapes");
    2ec8:	483e      	ldr	r0, [pc, #248]	; (2fc4 <parse_string_literal+0x410>)
    2eca:	f00a f813 	bl	cef4 <mp_raise_NotImplementedError>
                            break;
                        default:
                            if (c >= '0' && c <= '7') {
    2ece:	69bb      	ldr	r3, [r7, #24]
    2ed0:	2b2f      	cmp	r3, #47	; 0x2f
    2ed2:	d922      	bls.n	2f1a <parse_string_literal+0x366>
    2ed4:	69bb      	ldr	r3, [r7, #24]
    2ed6:	2b37      	cmp	r3, #55	; 0x37
    2ed8:	d81f      	bhi.n	2f1a <parse_string_literal+0x366>
                                // Octal sequence, 1-3 chars
                                size_t digits = 3;
    2eda:	2303      	movs	r3, #3
    2edc:	617b      	str	r3, [r7, #20]
                                mp_uint_t num = c - '0';
    2ede:	69bb      	ldr	r3, [r7, #24]
    2ee0:	3b30      	subs	r3, #48	; 0x30
    2ee2:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2ee4:	e009      	b.n	2efa <parse_string_literal+0x346>
                                    next_char(lex);
    2ee6:	6878      	ldr	r0, [r7, #4]
    2ee8:	f7ff fd87 	bl	29fa <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    2eec:	693b      	ldr	r3, [r7, #16]
    2eee:	00da      	lsls	r2, r3, #3
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	691b      	ldr	r3, [r3, #16]
    2ef4:	4413      	add	r3, r2
    2ef6:	3b30      	subs	r3, #48	; 0x30
    2ef8:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2efa:	6878      	ldr	r0, [r7, #4]
    2efc:	f7ff fcf0 	bl	28e0 <is_following_odigit>
    2f00:	4603      	mov	r3, r0
    2f02:	2b00      	cmp	r3, #0
    2f04:	d005      	beq.n	2f12 <parse_string_literal+0x35e>
    2f06:	697b      	ldr	r3, [r7, #20]
    2f08:	3b01      	subs	r3, #1
    2f0a:	617b      	str	r3, [r7, #20]
    2f0c:	697b      	ldr	r3, [r7, #20]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d1e9      	bne.n	2ee6 <parse_string_literal+0x332>
                                }
                                c = num;
    2f12:	693b      	ldr	r3, [r7, #16]
    2f14:	61bb      	str	r3, [r7, #24]
                            if (c >= '0' && c <= '7') {
    2f16:	bf00      	nop
                            } else {
                                // unrecognised escape character; CPython lets this through verbatim as '\' and then the character
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
    2f18:	e007      	b.n	2f2a <parse_string_literal+0x376>
                                vstr_add_char(&lex->vstr, '\\');
    2f1a:	687b      	ldr	r3, [r7, #4]
    2f1c:	3344      	adds	r3, #68	; 0x44
    2f1e:	215c      	movs	r1, #92	; 0x5c
    2f20:	4618      	mov	r0, r3
    2f22:	f7fe fb4f 	bl	15c4 <vstr_add_char>
                            break;
    2f26:	e000      	b.n	2f2a <parse_string_literal+0x376>
                        case '"': break;
    2f28:	bf00      	nop
                    }
                }
                if (c != MP_LEXER_EOF) {
    2f2a:	69bb      	ldr	r3, [r7, #24]
    2f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2f30:	d019      	beq.n	2f66 <parse_string_literal+0x3b2>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    2f32:	69bb      	ldr	r3, [r7, #24]
    2f34:	2bff      	cmp	r3, #255	; 0xff
    2f36:	d808      	bhi.n	2f4a <parse_string_literal+0x396>
                            vstr_add_byte(&lex->vstr, c);
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	3344      	adds	r3, #68	; 0x44
    2f3c:	69ba      	ldr	r2, [r7, #24]
    2f3e:	b2d2      	uxtb	r2, r2
    2f40:	4611      	mov	r1, r2
    2f42:	4618      	mov	r0, r3
    2f44:	f7fe fb2c 	bl	15a0 <vstr_add_byte>
    2f48:	e00d      	b.n	2f66 <parse_string_literal+0x3b2>
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    2f4a:	687b      	ldr	r3, [r7, #4]
    2f4c:	2201      	movs	r2, #1
    2f4e:	641a      	str	r2, [r3, #64]	; 0x40
    2f50:	e009      	b.n	2f66 <parse_string_literal+0x3b2>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	691b      	ldr	r3, [r3, #16]
    2f5c:	b2db      	uxtb	r3, r3
    2f5e:	4619      	mov	r1, r3
    2f60:	4610      	mov	r0, r2
    2f62:	f7fe fb1d 	bl	15a0 <vstr_add_byte>
            }
        }
        next_char(lex);
    2f66:	6878      	ldr	r0, [r7, #4]
    2f68:	f7ff fd47 	bl	29fa <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2f6c:	6878      	ldr	r0, [r7, #4]
    2f6e:	f7ff fb76 	bl	265e <is_end>
    2f72:	4603      	mov	r3, r0
    2f74:	f083 0301 	eor.w	r3, r3, #1
    2f78:	b2db      	uxtb	r3, r3
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	d011      	beq.n	2fa2 <parse_string_literal+0x3ee>
    2f7e:	6a3b      	ldr	r3, [r7, #32]
    2f80:	2b01      	cmp	r3, #1
    2f82:	d809      	bhi.n	2f98 <parse_string_literal+0x3e4>
    2f84:	210a      	movs	r1, #10
    2f86:	6878      	ldr	r0, [r7, #4]
    2f88:	f7ff fb8c 	bl	26a4 <is_char>
    2f8c:	4603      	mov	r3, r0
    2f8e:	f083 0301 	eor.w	r3, r3, #1
    2f92:	b2db      	uxtb	r3, r3
    2f94:	2b00      	cmp	r3, #0
    2f96:	d004      	beq.n	2fa2 <parse_string_literal+0x3ee>
    2f98:	69fa      	ldr	r2, [r7, #28]
    2f9a:	6a3b      	ldr	r3, [r7, #32]
    2f9c:	429a      	cmp	r2, r3
    2f9e:	f4ff ae38 	bcc.w	2c12 <parse_string_literal+0x5e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    2fa2:	69fa      	ldr	r2, [r7, #28]
    2fa4:	6a3b      	ldr	r3, [r7, #32]
    2fa6:	429a      	cmp	r2, r3
    2fa8:	d202      	bcs.n	2fb0 <parse_string_literal+0x3fc>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	2203      	movs	r2, #3
    2fae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	3344      	adds	r3, #68	; 0x44
    2fb4:	69f9      	ldr	r1, [r7, #28]
    2fb6:	4618      	mov	r0, r3
    2fb8:	f7fe fbad 	bl	1716 <vstr_cut_tail_bytes>
}
    2fbc:	bf00      	nop
    2fbe:	3728      	adds	r7, #40	; 0x28
    2fc0:	46bd      	mov	sp, r7
    2fc2:	bd80      	pop	{r7, pc}
    2fc4:	0001f228 	.word	0x0001f228

00002fc8 <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    2fc8:	b580      	push	{r7, lr}
    2fca:	b084      	sub	sp, #16
    2fcc:	af00      	add	r7, sp, #0
    2fce:	6078      	str	r0, [r7, #4]
    2fd0:	460b      	mov	r3, r1
    2fd2:	70fb      	strb	r3, [r7, #3]
    bool had_physical_newline = false;
    2fd4:	2300      	movs	r3, #0
    2fd6:	73fb      	strb	r3, [r7, #15]
    while (!is_end(lex)) {
    2fd8:	e04b      	b.n	3072 <skip_whitespace+0xaa>
        if (is_physical_newline(lex)) {
    2fda:	6878      	ldr	r0, [r7, #4]
    2fdc:	f7ff fb51 	bl	2682 <is_physical_newline>
    2fe0:	4603      	mov	r3, r0
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d00c      	beq.n	3000 <skip_whitespace+0x38>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    2fe6:	78fb      	ldrb	r3, [r7, #3]
    2fe8:	2b00      	cmp	r3, #0
    2fea:	d003      	beq.n	2ff4 <skip_whitespace+0x2c>
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d048      	beq.n	3086 <skip_whitespace+0xbe>
                break;
            }
            had_physical_newline = true;
    2ff4:	2301      	movs	r3, #1
    2ff6:	73fb      	strb	r3, [r7, #15]
            next_char(lex);
    2ff8:	6878      	ldr	r0, [r7, #4]
    2ffa:	f7ff fcfe 	bl	29fa <next_char>
    2ffe:	e038      	b.n	3072 <skip_whitespace+0xaa>
        } else if (is_whitespace(lex)) {
    3000:	6878      	ldr	r0, [r7, #4]
    3002:	f7ff fc17 	bl	2834 <is_whitespace>
    3006:	4603      	mov	r3, r0
    3008:	2b00      	cmp	r3, #0
    300a:	d003      	beq.n	3014 <skip_whitespace+0x4c>
            next_char(lex);
    300c:	6878      	ldr	r0, [r7, #4]
    300e:	f7ff fcf4 	bl	29fa <next_char>
    3012:	e02e      	b.n	3072 <skip_whitespace+0xaa>
        } else if (is_char(lex, '#')) {
    3014:	2123      	movs	r1, #35	; 0x23
    3016:	6878      	ldr	r0, [r7, #4]
    3018:	f7ff fb44 	bl	26a4 <is_char>
    301c:	4603      	mov	r3, r0
    301e:	2b00      	cmp	r3, #0
    3020:	d019      	beq.n	3056 <skip_whitespace+0x8e>
            next_char(lex);
    3022:	6878      	ldr	r0, [r7, #4]
    3024:	f7ff fce9 	bl	29fa <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3028:	e002      	b.n	3030 <skip_whitespace+0x68>
                next_char(lex);
    302a:	6878      	ldr	r0, [r7, #4]
    302c:	f7ff fce5 	bl	29fa <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3030:	6878      	ldr	r0, [r7, #4]
    3032:	f7ff fb14 	bl	265e <is_end>
    3036:	4603      	mov	r3, r0
    3038:	f083 0301 	eor.w	r3, r3, #1
    303c:	b2db      	uxtb	r3, r3
    303e:	2b00      	cmp	r3, #0
    3040:	d017      	beq.n	3072 <skip_whitespace+0xaa>
    3042:	6878      	ldr	r0, [r7, #4]
    3044:	f7ff fb1d 	bl	2682 <is_physical_newline>
    3048:	4603      	mov	r3, r0
    304a:	f083 0301 	eor.w	r3, r3, #1
    304e:	b2db      	uxtb	r3, r3
    3050:	2b00      	cmp	r3, #0
    3052:	d1ea      	bne.n	302a <skip_whitespace+0x62>
    3054:	e00d      	b.n	3072 <skip_whitespace+0xaa>
            }
            // had_physical_newline will be set on next loop
        } else if (is_char_and(lex, '\\', '\n')) {
    3056:	220a      	movs	r2, #10
    3058:	215c      	movs	r1, #92	; 0x5c
    305a:	6878      	ldr	r0, [r7, #4]
    305c:	f7ff fbcc 	bl	27f8 <is_char_and>
    3060:	4603      	mov	r3, r0
    3062:	2b00      	cmp	r3, #0
    3064:	d011      	beq.n	308a <skip_whitespace+0xc2>
            // line-continuation, so don't set had_physical_newline
            next_char(lex);
    3066:	6878      	ldr	r0, [r7, #4]
    3068:	f7ff fcc7 	bl	29fa <next_char>
            next_char(lex);
    306c:	6878      	ldr	r0, [r7, #4]
    306e:	f7ff fcc4 	bl	29fa <next_char>
    while (!is_end(lex)) {
    3072:	6878      	ldr	r0, [r7, #4]
    3074:	f7ff faf3 	bl	265e <is_end>
    3078:	4603      	mov	r3, r0
    307a:	f083 0301 	eor.w	r3, r3, #1
    307e:	b2db      	uxtb	r3, r3
    3080:	2b00      	cmp	r3, #0
    3082:	d1aa      	bne.n	2fda <skip_whitespace+0x12>
    3084:	e002      	b.n	308c <skip_whitespace+0xc4>
                break;
    3086:	bf00      	nop
    3088:	e000      	b.n	308c <skip_whitespace+0xc4>
        } else {
            break;
    308a:	bf00      	nop
        }
    }
    return had_physical_newline;
    308c:	7bfb      	ldrb	r3, [r7, #15]
}
    308e:	4618      	mov	r0, r3
    3090:	3710      	adds	r7, #16
    3092:	46bd      	mov	sp, r7
    3094:	bd80      	pop	{r7, pc}

00003096 <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    3096:	b580      	push	{r7, lr}
    3098:	b08e      	sub	sp, #56	; 0x38
    309a:	af00      	add	r7, sp, #0
    309c:	6078      	str	r0, [r7, #4]
    // start new token text
    vstr_reset(&lex->vstr);
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	3344      	adds	r3, #68	; 0x44
    30a2:	4618      	mov	r0, r3
    30a4:	f7ff face 	bl	2644 <vstr_reset>

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    30a8:	2100      	movs	r1, #0
    30aa:	6878      	ldr	r0, [r7, #4]
    30ac:	f7ff ff8c 	bl	2fc8 <skip_whitespace>
    30b0:	4603      	mov	r3, r0
    30b2:	75fb      	strb	r3, [r7, #23]

    // set token source information
    lex->tok_line = lex->line;
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	69da      	ldr	r2, [r3, #28]
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	639a      	str	r2, [r3, #56]	; 0x38
    lex->tok_column = lex->column;
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	6a1a      	ldr	r2, [r3, #32]
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	63da      	str	r2, [r3, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    30c4:	687b      	ldr	r3, [r7, #4]
    30c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30c8:	2b00      	cmp	r3, #0
    30ca:	da08      	bge.n	30de <mp_lexer_to_next+0x48>
        lex->tok_kind = MP_TOKEN_DEDENT;
    30cc:	687b      	ldr	r3, [r7, #4]
    30ce:	2206      	movs	r2, #6
    30d0:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent += 1;
    30d2:	687b      	ldr	r3, [r7, #4]
    30d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30d6:	1c5a      	adds	r2, r3, #1
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	625a      	str	r2, [r3, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    30dc:	e2b6      	b.n	364c <mp_lexer_to_next+0x5b6>
    } else if (lex->emit_dent > 0) {
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30e2:	2b00      	cmp	r3, #0
    30e4:	dd08      	ble.n	30f8 <mp_lexer_to_next+0x62>
        lex->tok_kind = MP_TOKEN_INDENT;
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	2205      	movs	r2, #5
    30ea:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent -= 1;
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30f0:	1e5a      	subs	r2, r3, #1
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	625a      	str	r2, [r3, #36]	; 0x24
}
    30f6:	e2a9      	b.n	364c <mp_lexer_to_next+0x5b6>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    30f8:	7dfb      	ldrb	r3, [r7, #23]
    30fa:	2b00      	cmp	r3, #0
    30fc:	d03e      	beq.n	317c <mp_lexer_to_next+0xe6>
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3102:	2b00      	cmp	r3, #0
    3104:	d13a      	bne.n	317c <mp_lexer_to_next+0xe6>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	2204      	movs	r2, #4
    310a:	641a      	str	r2, [r3, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	6a1b      	ldr	r3, [r3, #32]
    3110:	3b01      	subs	r3, #1
    3112:	613b      	str	r3, [r7, #16]
        if (num_spaces == indent_top(lex)) {
    3114:	6878      	ldr	r0, [r7, #4]
    3116:	f7ff fcfb 	bl	2b10 <indent_top>
    311a:	4602      	mov	r2, r0
    311c:	693b      	ldr	r3, [r7, #16]
    311e:	429a      	cmp	r2, r3
    3120:	f000 828d 	beq.w	363e <mp_lexer_to_next+0x5a8>
        } else if (num_spaces > indent_top(lex)) {
    3124:	6878      	ldr	r0, [r7, #4]
    3126:	f7ff fcf3 	bl	2b10 <indent_top>
    312a:	4602      	mov	r2, r0
    312c:	693b      	ldr	r3, [r7, #16]
    312e:	429a      	cmp	r2, r3
    3130:	d211      	bcs.n	3156 <mp_lexer_to_next+0xc0>
            indent_push(lex, num_spaces);
    3132:	6939      	ldr	r1, [r7, #16]
    3134:	6878      	ldr	r0, [r7, #4]
    3136:	f7ff fcbd 	bl	2ab4 <indent_push>
            lex->emit_dent += 1;
    313a:	687b      	ldr	r3, [r7, #4]
    313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    313e:	1c5a      	adds	r2, r3, #1
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	625a      	str	r2, [r3, #36]	; 0x24
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3144:	e27b      	b.n	363e <mp_lexer_to_next+0x5a8>
                indent_pop(lex);
    3146:	6878      	ldr	r0, [r7, #4]
    3148:	f7ff fcf6 	bl	2b38 <indent_pop>
                lex->emit_dent -= 1;
    314c:	687b      	ldr	r3, [r7, #4]
    314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3150:	1e5a      	subs	r2, r3, #1
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	625a      	str	r2, [r3, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    3156:	6878      	ldr	r0, [r7, #4]
    3158:	f7ff fcda 	bl	2b10 <indent_top>
    315c:	4602      	mov	r2, r0
    315e:	693b      	ldr	r3, [r7, #16]
    3160:	429a      	cmp	r2, r3
    3162:	d8f0      	bhi.n	3146 <mp_lexer_to_next+0xb0>
            if (num_spaces != indent_top(lex)) {
    3164:	6878      	ldr	r0, [r7, #4]
    3166:	f7ff fcd3 	bl	2b10 <indent_top>
    316a:	4602      	mov	r2, r0
    316c:	693b      	ldr	r3, [r7, #16]
    316e:	429a      	cmp	r2, r3
    3170:	f000 8265 	beq.w	363e <mp_lexer_to_next+0x5a8>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	2202      	movs	r2, #2
    3178:	641a      	str	r2, [r3, #64]	; 0x40
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    317a:	e260      	b.n	363e <mp_lexer_to_next+0x5a8>
    } else if (is_end(lex)) {
    317c:	6878      	ldr	r0, [r7, #4]
    317e:	f7ff fa6e 	bl	265e <is_end>
    3182:	4603      	mov	r3, r0
    3184:	2b00      	cmp	r3, #0
    3186:	d003      	beq.n	3190 <mp_lexer_to_next+0xfa>
        lex->tok_kind = MP_TOKEN_END;
    3188:	687b      	ldr	r3, [r7, #4]
    318a:	2200      	movs	r2, #0
    318c:	641a      	str	r2, [r3, #64]	; 0x40
}
    318e:	e25d      	b.n	364c <mp_lexer_to_next+0x5b6>
    } else if (is_string_or_bytes(lex)) {
    3190:	6878      	ldr	r0, [r7, #4]
    3192:	f7ff fbbd 	bl	2910 <is_string_or_bytes>
    3196:	4603      	mov	r3, r0
    3198:	2b00      	cmp	r3, #0
    319a:	d06d      	beq.n	3278 <mp_lexer_to_next+0x1e2>
        lex->tok_kind = MP_TOKEN_END;
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	2200      	movs	r2, #0
    31a0:	641a      	str	r2, [r3, #64]	; 0x40
            bool is_raw = false;
    31a2:	2300      	movs	r3, #0
    31a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            mp_token_kind_t kind = MP_TOKEN_STRING;
    31a8:	230a      	movs	r3, #10
    31aa:	633b      	str	r3, [r7, #48]	; 0x30
            int n_char = 0;
    31ac:	2300      	movs	r3, #0
    31ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (is_char(lex, 'u')) {
    31b0:	2175      	movs	r1, #117	; 0x75
    31b2:	6878      	ldr	r0, [r7, #4]
    31b4:	f7ff fa76 	bl	26a4 <is_char>
    31b8:	4603      	mov	r3, r0
    31ba:	2b00      	cmp	r3, #0
    31bc:	d002      	beq.n	31c4 <mp_lexer_to_next+0x12e>
                n_char = 1;
    31be:	2301      	movs	r3, #1
    31c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    31c2:	e02e      	b.n	3222 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'b')) {
    31c4:	2162      	movs	r1, #98	; 0x62
    31c6:	6878      	ldr	r0, [r7, #4]
    31c8:	f7ff fa6c 	bl	26a4 <is_char>
    31cc:	4603      	mov	r3, r0
    31ce:	2b00      	cmp	r3, #0
    31d0:	d010      	beq.n	31f4 <mp_lexer_to_next+0x15e>
                kind = MP_TOKEN_BYTES;
    31d2:	230b      	movs	r3, #11
    31d4:	633b      	str	r3, [r7, #48]	; 0x30
                n_char = 1;
    31d6:	2301      	movs	r3, #1
    31d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'r')) {
    31da:	2172      	movs	r1, #114	; 0x72
    31dc:	6878      	ldr	r0, [r7, #4]
    31de:	f7ff fabb 	bl	2758 <is_char_following>
    31e2:	4603      	mov	r3, r0
    31e4:	2b00      	cmp	r3, #0
    31e6:	d01c      	beq.n	3222 <mp_lexer_to_next+0x18c>
                    is_raw = true;
    31e8:	2301      	movs	r3, #1
    31ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    n_char = 2;
    31ee:	2302      	movs	r3, #2
    31f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    31f2:	e016      	b.n	3222 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'r')) {
    31f4:	2172      	movs	r1, #114	; 0x72
    31f6:	6878      	ldr	r0, [r7, #4]
    31f8:	f7ff fa54 	bl	26a4 <is_char>
    31fc:	4603      	mov	r3, r0
    31fe:	2b00      	cmp	r3, #0
    3200:	d00f      	beq.n	3222 <mp_lexer_to_next+0x18c>
                is_raw = true;
    3202:	2301      	movs	r3, #1
    3204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                n_char = 1;
    3208:	2301      	movs	r3, #1
    320a:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'b')) {
    320c:	2162      	movs	r1, #98	; 0x62
    320e:	6878      	ldr	r0, [r7, #4]
    3210:	f7ff faa2 	bl	2758 <is_char_following>
    3214:	4603      	mov	r3, r0
    3216:	2b00      	cmp	r3, #0
    3218:	d003      	beq.n	3222 <mp_lexer_to_next+0x18c>
                    kind = MP_TOKEN_BYTES;
    321a:	230b      	movs	r3, #11
    321c:	633b      	str	r3, [r7, #48]	; 0x30
                    n_char = 2;
    321e:	2302      	movs	r3, #2
    3220:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (lex->tok_kind == MP_TOKEN_END) {
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3226:	2b00      	cmp	r3, #0
    3228:	d103      	bne.n	3232 <mp_lexer_to_next+0x19c>
                lex->tok_kind = kind;
    322a:	687b      	ldr	r3, [r7, #4]
    322c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    322e:	641a      	str	r2, [r3, #64]	; 0x40
    3230:	e005      	b.n	323e <mp_lexer_to_next+0x1a8>
            } else if (lex->tok_kind != kind) {
    3232:	687b      	ldr	r3, [r7, #4]
    3234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3238:	429a      	cmp	r2, r3
    323a:	f040 8202 	bne.w	3642 <mp_lexer_to_next+0x5ac>
            if (n_char != 0) {
    323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3240:	2b00      	cmp	r3, #0
    3242:	d008      	beq.n	3256 <mp_lexer_to_next+0x1c0>
                next_char(lex);
    3244:	6878      	ldr	r0, [r7, #4]
    3246:	f7ff fbd8 	bl	29fa <next_char>
                if (n_char == 2) {
    324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    324c:	2b02      	cmp	r3, #2
    324e:	d102      	bne.n	3256 <mp_lexer_to_next+0x1c0>
                    next_char(lex);
    3250:	6878      	ldr	r0, [r7, #4]
    3252:	f7ff fbd2 	bl	29fa <next_char>
            parse_string_literal(lex, is_raw);
    3256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    325a:	4619      	mov	r1, r3
    325c:	6878      	ldr	r0, [r7, #4]
    325e:	f7ff fca9 	bl	2bb4 <parse_string_literal>
            skip_whitespace(lex, true);
    3262:	2101      	movs	r1, #1
    3264:	6878      	ldr	r0, [r7, #4]
    3266:	f7ff feaf 	bl	2fc8 <skip_whitespace>
        } while (is_string_or_bytes(lex));
    326a:	6878      	ldr	r0, [r7, #4]
    326c:	f7ff fb50 	bl	2910 <is_string_or_bytes>
    3270:	4603      	mov	r3, r0
    3272:	2b00      	cmp	r3, #0
    3274:	d195      	bne.n	31a2 <mp_lexer_to_next+0x10c>
}
    3276:	e1e9      	b.n	364c <mp_lexer_to_next+0x5b6>
    } else if (is_head_of_identifier(lex)) {
    3278:	6878      	ldr	r0, [r7, #4]
    327a:	f7ff fb88 	bl	298e <is_head_of_identifier>
    327e:	4603      	mov	r3, r0
    3280:	2b00      	cmp	r3, #0
    3282:	d061      	beq.n	3348 <mp_lexer_to_next+0x2b2>
        lex->tok_kind = MP_TOKEN_NAME;
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	2207      	movs	r2, #7
    3288:	641a      	str	r2, [r3, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	691b      	ldr	r3, [r3, #16]
    3294:	b2db      	uxtb	r3, r3
    3296:	4619      	mov	r1, r3
    3298:	4610      	mov	r0, r2
    329a:	f7fe f981 	bl	15a0 <vstr_add_byte>
        next_char(lex);
    329e:	6878      	ldr	r0, [r7, #4]
    32a0:	f7ff fbab 	bl	29fa <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    32a4:	e00c      	b.n	32c0 <mp_lexer_to_next+0x22a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	f103 0244 	add.w	r2, r3, #68	; 0x44
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	691b      	ldr	r3, [r3, #16]
    32b0:	b2db      	uxtb	r3, r3
    32b2:	4619      	mov	r1, r3
    32b4:	4610      	mov	r0, r2
    32b6:	f7fe f973 	bl	15a0 <vstr_add_byte>
            next_char(lex);
    32ba:	6878      	ldr	r0, [r7, #4]
    32bc:	f7ff fb9d 	bl	29fa <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    32c0:	6878      	ldr	r0, [r7, #4]
    32c2:	f7ff f9cc 	bl	265e <is_end>
    32c6:	4603      	mov	r3, r0
    32c8:	f083 0301 	eor.w	r3, r3, #1
    32cc:	b2db      	uxtb	r3, r3
    32ce:	2b00      	cmp	r3, #0
    32d0:	d005      	beq.n	32de <mp_lexer_to_next+0x248>
    32d2:	6878      	ldr	r0, [r7, #4]
    32d4:	f7ff fb77 	bl	29c6 <is_tail_of_identifier>
    32d8:	4603      	mov	r3, r0
    32da:	2b00      	cmp	r3, #0
    32dc:	d1e3      	bne.n	32a6 <mp_lexer_to_next+0x210>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    32de:	687b      	ldr	r3, [r7, #4]
    32e0:	3344      	adds	r3, #68	; 0x44
    32e2:	4618      	mov	r0, r3
    32e4:	f7fe f941 	bl	156a <vstr_null_terminated_str>
    32e8:	60f8      	str	r0, [r7, #12]
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    32ea:	2300      	movs	r3, #0
    32ec:	62bb      	str	r3, [r7, #40]	; 0x28
    32ee:	e027      	b.n	3340 <mp_lexer_to_next+0x2aa>
            int cmp = strcmp(s, tok_kw[i]);
    32f0:	4aa6      	ldr	r2, [pc, #664]	; (358c <mp_lexer_to_next+0x4f6>)
    32f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    32f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    32f8:	4619      	mov	r1, r3
    32fa:	68f8      	ldr	r0, [r7, #12]
    32fc:	f019 fa80 	bl	1c800 <strcmp>
    3300:	60b8      	str	r0, [r7, #8]
            if (cmp == 0) {
    3302:	68bb      	ldr	r3, [r7, #8]
    3304:	2b00      	cmp	r3, #0
    3306:	d114      	bne.n	3332 <mp_lexer_to_next+0x29c>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    3308:	6abb      	ldr	r3, [r7, #40]	; 0x28
    330a:	f103 020d 	add.w	r2, r3, #13
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	641a      	str	r2, [r3, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    3312:	687b      	ldr	r3, [r7, #4]
    3314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3316:	2b10      	cmp	r3, #16
    3318:	f040 8195 	bne.w	3646 <mp_lexer_to_next+0x5b0>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    331c:	4b9c      	ldr	r3, [pc, #624]	; (3590 <mp_lexer_to_next+0x4fa>)
    331e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    3322:	2b00      	cmp	r3, #0
    3324:	d101      	bne.n	332a <mp_lexer_to_next+0x294>
    3326:	220f      	movs	r2, #15
    3328:	e000      	b.n	332c <mp_lexer_to_next+0x296>
    332a:	220d      	movs	r2, #13
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	641a      	str	r2, [r3, #64]	; 0x40
                break;
    3330:	e189      	b.n	3646 <mp_lexer_to_next+0x5b0>
            } else if (cmp < 0) {
    3332:	68bb      	ldr	r3, [r7, #8]
    3334:	2b00      	cmp	r3, #0
    3336:	f2c0 8188 	blt.w	364a <mp_lexer_to_next+0x5b4>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    333c:	3301      	adds	r3, #1
    333e:	62bb      	str	r3, [r7, #40]	; 0x28
    3340:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3342:	2b21      	cmp	r3, #33	; 0x21
    3344:	d9d4      	bls.n	32f0 <mp_lexer_to_next+0x25a>
}
    3346:	e181      	b.n	364c <mp_lexer_to_next+0x5b6>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3348:	6878      	ldr	r0, [r7, #4]
    334a:	f7ff fa8f 	bl	286c <is_digit>
    334e:	4603      	mov	r3, r0
    3350:	2b00      	cmp	r3, #0
    3352:	d10e      	bne.n	3372 <mp_lexer_to_next+0x2dc>
    3354:	212e      	movs	r1, #46	; 0x2e
    3356:	6878      	ldr	r0, [r7, #4]
    3358:	f7ff f9a4 	bl	26a4 <is_char>
    335c:	4603      	mov	r3, r0
    335e:	2b00      	cmp	r3, #0
    3360:	f000 80ad 	beq.w	34be <mp_lexer_to_next+0x428>
    3364:	6878      	ldr	r0, [r7, #4]
    3366:	f7ff fa8f 	bl	2888 <is_following_digit>
    336a:	4603      	mov	r3, r0
    336c:	2b00      	cmp	r3, #0
    336e:	f000 80a6 	beq.w	34be <mp_lexer_to_next+0x428>
        bool forced_integer = false;
    3372:	2300      	movs	r3, #0
    3374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (is_char(lex, '.')) {
    3378:	212e      	movs	r1, #46	; 0x2e
    337a:	6878      	ldr	r0, [r7, #4]
    337c:	f7ff f992 	bl	26a4 <is_char>
    3380:	4603      	mov	r3, r0
    3382:	2b00      	cmp	r3, #0
    3384:	d003      	beq.n	338e <mp_lexer_to_next+0x2f8>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3386:	687b      	ldr	r3, [r7, #4]
    3388:	2209      	movs	r2, #9
    338a:	641a      	str	r2, [r3, #64]	; 0x40
    338c:	e012      	b.n	33b4 <mp_lexer_to_next+0x31e>
            lex->tok_kind = MP_TOKEN_INTEGER;
    338e:	687b      	ldr	r3, [r7, #4]
    3390:	2208      	movs	r2, #8
    3392:	641a      	str	r2, [r3, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    3394:	2130      	movs	r1, #48	; 0x30
    3396:	6878      	ldr	r0, [r7, #4]
    3398:	f7ff f984 	bl	26a4 <is_char>
    339c:	4603      	mov	r3, r0
    339e:	2b00      	cmp	r3, #0
    33a0:	d008      	beq.n	33b4 <mp_lexer_to_next+0x31e>
    33a2:	6878      	ldr	r0, [r7, #4]
    33a4:	f7ff fa7e 	bl	28a4 <is_following_base_char>
    33a8:	4603      	mov	r3, r0
    33aa:	2b00      	cmp	r3, #0
    33ac:	d002      	beq.n	33b4 <mp_lexer_to_next+0x31e>
                forced_integer = true;
    33ae:	2301      	movs	r3, #1
    33b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    33b4:	687b      	ldr	r3, [r7, #4]
    33b6:	f103 0244 	add.w	r2, r3, #68	; 0x44
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	691b      	ldr	r3, [r3, #16]
    33be:	4619      	mov	r1, r3
    33c0:	4610      	mov	r0, r2
    33c2:	f7fe f8ff 	bl	15c4 <vstr_add_char>
        next_char(lex);
    33c6:	6878      	ldr	r0, [r7, #4]
    33c8:	f7ff fb17 	bl	29fa <next_char>
        while (!is_end(lex)) {
    33cc:	e06b      	b.n	34a6 <mp_lexer_to_next+0x410>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    33ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    33d2:	f083 0301 	eor.w	r3, r3, #1
    33d6:	b2db      	uxtb	r3, r3
    33d8:	2b00      	cmp	r3, #0
    33da:	d02e      	beq.n	343a <mp_lexer_to_next+0x3a4>
    33dc:	2245      	movs	r2, #69	; 0x45
    33de:	2165      	movs	r1, #101	; 0x65
    33e0:	6878      	ldr	r0, [r7, #4]
    33e2:	f7ff f973 	bl	26cc <is_char_or>
    33e6:	4603      	mov	r3, r0
    33e8:	2b00      	cmp	r3, #0
    33ea:	d026      	beq.n	343a <mp_lexer_to_next+0x3a4>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	2209      	movs	r2, #9
    33f0:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	3344      	adds	r3, #68	; 0x44
    33f6:	2165      	movs	r1, #101	; 0x65
    33f8:	4618      	mov	r0, r3
    33fa:	f7fe f8e3 	bl	15c4 <vstr_add_char>
                next_char(lex);
    33fe:	6878      	ldr	r0, [r7, #4]
    3400:	f7ff fafb 	bl	29fa <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    3404:	212b      	movs	r1, #43	; 0x2b
    3406:	6878      	ldr	r0, [r7, #4]
    3408:	f7ff f94c 	bl	26a4 <is_char>
    340c:	4603      	mov	r3, r0
    340e:	2b00      	cmp	r3, #0
    3410:	d106      	bne.n	3420 <mp_lexer_to_next+0x38a>
    3412:	212d      	movs	r1, #45	; 0x2d
    3414:	6878      	ldr	r0, [r7, #4]
    3416:	f7ff f945 	bl	26a4 <is_char>
    341a:	4603      	mov	r3, r0
    341c:	2b00      	cmp	r3, #0
    341e:	d042      	beq.n	34a6 <mp_lexer_to_next+0x410>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3420:	687b      	ldr	r3, [r7, #4]
    3422:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	691b      	ldr	r3, [r3, #16]
    342a:	4619      	mov	r1, r3
    342c:	4610      	mov	r0, r2
    342e:	f7fe f8c9 	bl	15c4 <vstr_add_char>
                    next_char(lex);
    3432:	6878      	ldr	r0, [r7, #4]
    3434:	f7ff fae1 	bl	29fa <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    3438:	e035      	b.n	34a6 <mp_lexer_to_next+0x410>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    343a:	6878      	ldr	r0, [r7, #4]
    343c:	f7ff fa08 	bl	2850 <is_letter>
    3440:	4603      	mov	r3, r0
    3442:	2b00      	cmp	r3, #0
    3444:	d10c      	bne.n	3460 <mp_lexer_to_next+0x3ca>
    3446:	6878      	ldr	r0, [r7, #4]
    3448:	f7ff fa10 	bl	286c <is_digit>
    344c:	4603      	mov	r3, r0
    344e:	2b00      	cmp	r3, #0
    3450:	d106      	bne.n	3460 <mp_lexer_to_next+0x3ca>
    3452:	212e      	movs	r1, #46	; 0x2e
    3454:	6878      	ldr	r0, [r7, #4]
    3456:	f7ff f925 	bl	26a4 <is_char>
    345a:	4603      	mov	r3, r0
    345c:	2b00      	cmp	r3, #0
    345e:	d018      	beq.n	3492 <mp_lexer_to_next+0x3fc>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    3460:	234a      	movs	r3, #74	; 0x4a
    3462:	226a      	movs	r2, #106	; 0x6a
    3464:	212e      	movs	r1, #46	; 0x2e
    3466:	6878      	ldr	r0, [r7, #4]
    3468:	f7ff f94e 	bl	2708 <is_char_or3>
    346c:	4603      	mov	r3, r0
    346e:	2b00      	cmp	r3, #0
    3470:	d002      	beq.n	3478 <mp_lexer_to_next+0x3e2>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3472:	687b      	ldr	r3, [r7, #4]
    3474:	2209      	movs	r2, #9
    3476:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3478:	687b      	ldr	r3, [r7, #4]
    347a:	f103 0244 	add.w	r2, r3, #68	; 0x44
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	691b      	ldr	r3, [r3, #16]
    3482:	4619      	mov	r1, r3
    3484:	4610      	mov	r0, r2
    3486:	f7fe f89d 	bl	15c4 <vstr_add_char>
                next_char(lex);
    348a:	6878      	ldr	r0, [r7, #4]
    348c:	f7ff fab5 	bl	29fa <next_char>
    3490:	e009      	b.n	34a6 <mp_lexer_to_next+0x410>
            } else if (is_char(lex, '_')) {
    3492:	215f      	movs	r1, #95	; 0x5f
    3494:	6878      	ldr	r0, [r7, #4]
    3496:	f7ff f905 	bl	26a4 <is_char>
    349a:	4603      	mov	r3, r0
    349c:	2b00      	cmp	r3, #0
    349e:	d00c      	beq.n	34ba <mp_lexer_to_next+0x424>
                next_char(lex);
    34a0:	6878      	ldr	r0, [r7, #4]
    34a2:	f7ff faaa 	bl	29fa <next_char>
        while (!is_end(lex)) {
    34a6:	6878      	ldr	r0, [r7, #4]
    34a8:	f7ff f8d9 	bl	265e <is_end>
    34ac:	4603      	mov	r3, r0
    34ae:	f083 0301 	eor.w	r3, r3, #1
    34b2:	b2db      	uxtb	r3, r3
    34b4:	2b00      	cmp	r3, #0
    34b6:	d18a      	bne.n	33ce <mp_lexer_to_next+0x338>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    34b8:	e0c8      	b.n	364c <mp_lexer_to_next+0x5b6>
                break;
    34ba:	bf00      	nop
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    34bc:	e0c6      	b.n	364c <mp_lexer_to_next+0x5b6>
        const char *t = tok_enc;
    34be:	4b35      	ldr	r3, [pc, #212]	; (3594 <mp_lexer_to_next+0x4fe>)
    34c0:	623b      	str	r3, [r7, #32]
        size_t tok_enc_index = 0;
    34c2:	2300      	movs	r3, #0
    34c4:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    34c6:	e010      	b.n	34ea <mp_lexer_to_next+0x454>
            if (*t == 'e' || *t == 'c') {
    34c8:	6a3b      	ldr	r3, [r7, #32]
    34ca:	781b      	ldrb	r3, [r3, #0]
    34cc:	2b65      	cmp	r3, #101	; 0x65
    34ce:	d003      	beq.n	34d8 <mp_lexer_to_next+0x442>
    34d0:	6a3b      	ldr	r3, [r7, #32]
    34d2:	781b      	ldrb	r3, [r3, #0]
    34d4:	2b63      	cmp	r3, #99	; 0x63
    34d6:	d102      	bne.n	34de <mp_lexer_to_next+0x448>
                t += 1;
    34d8:	6a3b      	ldr	r3, [r7, #32]
    34da:	3301      	adds	r3, #1
    34dc:	623b      	str	r3, [r7, #32]
            tok_enc_index += 1;
    34de:	69fb      	ldr	r3, [r7, #28]
    34e0:	3301      	adds	r3, #1
    34e2:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    34e4:	6a3b      	ldr	r3, [r7, #32]
    34e6:	3301      	adds	r3, #1
    34e8:	623b      	str	r3, [r7, #32]
    34ea:	6a3b      	ldr	r3, [r7, #32]
    34ec:	781b      	ldrb	r3, [r3, #0]
    34ee:	2b00      	cmp	r3, #0
    34f0:	d00b      	beq.n	350a <mp_lexer_to_next+0x474>
    34f2:	6a3b      	ldr	r3, [r7, #32]
    34f4:	781b      	ldrb	r3, [r3, #0]
    34f6:	4619      	mov	r1, r3
    34f8:	6878      	ldr	r0, [r7, #4]
    34fa:	f7ff f8d3 	bl	26a4 <is_char>
    34fe:	4603      	mov	r3, r0
    3500:	f083 0301 	eor.w	r3, r3, #1
    3504:	b2db      	uxtb	r3, r3
    3506:	2b00      	cmp	r3, #0
    3508:	d1de      	bne.n	34c8 <mp_lexer_to_next+0x432>
        next_char(lex);
    350a:	6878      	ldr	r0, [r7, #4]
    350c:	f7ff fa75 	bl	29fa <next_char>
        if (*t == 0) {
    3510:	6a3b      	ldr	r3, [r7, #32]
    3512:	781b      	ldrb	r3, [r3, #0]
    3514:	2b00      	cmp	r3, #0
    3516:	d103      	bne.n	3520 <mp_lexer_to_next+0x48a>
            lex->tok_kind = MP_TOKEN_INVALID;
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	2201      	movs	r2, #1
    351c:	641a      	str	r2, [r3, #64]	; 0x40
}
    351e:	e095      	b.n	364c <mp_lexer_to_next+0x5b6>
        } else if (*t == '!') {
    3520:	6a3b      	ldr	r3, [r7, #32]
    3522:	781b      	ldrb	r3, [r3, #0]
    3524:	2b21      	cmp	r3, #33	; 0x21
    3526:	d111      	bne.n	354c <mp_lexer_to_next+0x4b6>
            if (is_char(lex, '=')) {
    3528:	213d      	movs	r1, #61	; 0x3d
    352a:	6878      	ldr	r0, [r7, #4]
    352c:	f7ff f8ba 	bl	26a4 <is_char>
    3530:	4603      	mov	r3, r0
    3532:	2b00      	cmp	r3, #0
    3534:	d006      	beq.n	3544 <mp_lexer_to_next+0x4ae>
                next_char(lex);
    3536:	6878      	ldr	r0, [r7, #4]
    3538:	f7ff fa5f 	bl	29fa <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    353c:	687b      	ldr	r3, [r7, #4]
    353e:	2241      	movs	r2, #65	; 0x41
    3540:	641a      	str	r2, [r3, #64]	; 0x40
}
    3542:	e083      	b.n	364c <mp_lexer_to_next+0x5b6>
                lex->tok_kind = MP_TOKEN_INVALID;
    3544:	687b      	ldr	r3, [r7, #4]
    3546:	2201      	movs	r2, #1
    3548:	641a      	str	r2, [r3, #64]	; 0x40
}
    354a:	e07f      	b.n	364c <mp_lexer_to_next+0x5b6>
        } else if (*t == '.') {
    354c:	6a3b      	ldr	r3, [r7, #32]
    354e:	781b      	ldrb	r3, [r3, #0]
    3550:	2b2e      	cmp	r3, #46	; 0x2e
    3552:	d115      	bne.n	3580 <mp_lexer_to_next+0x4ea>
            if (is_char_and(lex, '.', '.')) {
    3554:	222e      	movs	r2, #46	; 0x2e
    3556:	212e      	movs	r1, #46	; 0x2e
    3558:	6878      	ldr	r0, [r7, #4]
    355a:	f7ff f94d 	bl	27f8 <is_char_and>
    355e:	4603      	mov	r3, r0
    3560:	2b00      	cmp	r3, #0
    3562:	d009      	beq.n	3578 <mp_lexer_to_next+0x4e2>
                next_char(lex);
    3564:	6878      	ldr	r0, [r7, #4]
    3566:	f7ff fa48 	bl	29fa <next_char>
                next_char(lex);
    356a:	6878      	ldr	r0, [r7, #4]
    356c:	f7ff fa45 	bl	29fa <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    3570:	687b      	ldr	r3, [r7, #4]
    3572:	220c      	movs	r2, #12
    3574:	641a      	str	r2, [r3, #64]	; 0x40
}
    3576:	e069      	b.n	364c <mp_lexer_to_next+0x5b6>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	224a      	movs	r2, #74	; 0x4a
    357c:	641a      	str	r2, [r3, #64]	; 0x40
}
    357e:	e065      	b.n	364c <mp_lexer_to_next+0x5b6>
            t += 1;
    3580:	6a3b      	ldr	r3, [r7, #32]
    3582:	3301      	adds	r3, #1
    3584:	623b      	str	r3, [r7, #32]
            size_t t_index = tok_enc_index;
    3586:	69fb      	ldr	r3, [r7, #28]
    3588:	61bb      	str	r3, [r7, #24]
            while (*t == 'c' || *t == 'e') {
    358a:	e023      	b.n	35d4 <mp_lexer_to_next+0x53e>
    358c:	0001f1a0 	.word	0x0001f1a0
    3590:	20001240 	.word	0x20001240
    3594:	0001f03c 	.word	0x0001f03c
                t_index += 1;
    3598:	69bb      	ldr	r3, [r7, #24]
    359a:	3301      	adds	r3, #1
    359c:	61bb      	str	r3, [r7, #24]
                if (is_char(lex, t[1])) {
    359e:	6a3b      	ldr	r3, [r7, #32]
    35a0:	3301      	adds	r3, #1
    35a2:	781b      	ldrb	r3, [r3, #0]
    35a4:	4619      	mov	r1, r3
    35a6:	6878      	ldr	r0, [r7, #4]
    35a8:	f7ff f87c 	bl	26a4 <is_char>
    35ac:	4603      	mov	r3, r0
    35ae:	2b00      	cmp	r3, #0
    35b0:	d009      	beq.n	35c6 <mp_lexer_to_next+0x530>
                    next_char(lex);
    35b2:	6878      	ldr	r0, [r7, #4]
    35b4:	f7ff fa21 	bl	29fa <next_char>
                    tok_enc_index = t_index;
    35b8:	69bb      	ldr	r3, [r7, #24]
    35ba:	61fb      	str	r3, [r7, #28]
                    if (*t == 'e') {
    35bc:	6a3b      	ldr	r3, [r7, #32]
    35be:	781b      	ldrb	r3, [r3, #0]
    35c0:	2b65      	cmp	r3, #101	; 0x65
    35c2:	d104      	bne.n	35ce <mp_lexer_to_next+0x538>
                        break;
    35c4:	e010      	b.n	35e8 <mp_lexer_to_next+0x552>
                } else if (*t == 'c') {
    35c6:	6a3b      	ldr	r3, [r7, #32]
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	2b63      	cmp	r3, #99	; 0x63
    35cc:	d00b      	beq.n	35e6 <mp_lexer_to_next+0x550>
                t += 2;
    35ce:	6a3b      	ldr	r3, [r7, #32]
    35d0:	3302      	adds	r3, #2
    35d2:	623b      	str	r3, [r7, #32]
            while (*t == 'c' || *t == 'e') {
    35d4:	6a3b      	ldr	r3, [r7, #32]
    35d6:	781b      	ldrb	r3, [r3, #0]
    35d8:	2b63      	cmp	r3, #99	; 0x63
    35da:	d0dd      	beq.n	3598 <mp_lexer_to_next+0x502>
    35dc:	6a3b      	ldr	r3, [r7, #32]
    35de:	781b      	ldrb	r3, [r3, #0]
    35e0:	2b65      	cmp	r3, #101	; 0x65
    35e2:	d0d9      	beq.n	3598 <mp_lexer_to_next+0x502>
    35e4:	e000      	b.n	35e8 <mp_lexer_to_next+0x552>
                    break;
    35e6:	bf00      	nop
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    35e8:	4a1a      	ldr	r2, [pc, #104]	; (3654 <mp_lexer_to_next+0x5be>)
    35ea:	69fb      	ldr	r3, [r7, #28]
    35ec:	4413      	add	r3, r2
    35ee:	781b      	ldrb	r3, [r3, #0]
    35f0:	461a      	mov	r2, r3
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	641a      	str	r2, [r3, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    35f6:	687b      	ldr	r3, [r7, #4]
    35f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    35fa:	2b42      	cmp	r3, #66	; 0x42
    35fc:	d007      	beq.n	360e <mp_lexer_to_next+0x578>
    35fe:	687b      	ldr	r3, [r7, #4]
    3600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3602:	2b44      	cmp	r3, #68	; 0x44
    3604:	d003      	beq.n	360e <mp_lexer_to_next+0x578>
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    360a:	2b46      	cmp	r3, #70	; 0x46
    360c:	d105      	bne.n	361a <mp_lexer_to_next+0x584>
                lex->nested_bracket_level += 1;
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3612:	1c5a      	adds	r2, r3, #1
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	629a      	str	r2, [r3, #40]	; 0x28
    3618:	e018      	b.n	364c <mp_lexer_to_next+0x5b6>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    361e:	2b43      	cmp	r3, #67	; 0x43
    3620:	d007      	beq.n	3632 <mp_lexer_to_next+0x59c>
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3626:	2b45      	cmp	r3, #69	; 0x45
    3628:	d003      	beq.n	3632 <mp_lexer_to_next+0x59c>
    362a:	687b      	ldr	r3, [r7, #4]
    362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    362e:	2b47      	cmp	r3, #71	; 0x47
    3630:	d10c      	bne.n	364c <mp_lexer_to_next+0x5b6>
                lex->nested_bracket_level -= 1;
    3632:	687b      	ldr	r3, [r7, #4]
    3634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3636:	1e5a      	subs	r2, r3, #1
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	629a      	str	r2, [r3, #40]	; 0x28
}
    363c:	e006      	b.n	364c <mp_lexer_to_next+0x5b6>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    363e:	bf00      	nop
    3640:	e004      	b.n	364c <mp_lexer_to_next+0x5b6>
                break;
    3642:	bf00      	nop
    3644:	e002      	b.n	364c <mp_lexer_to_next+0x5b6>
                break;
    3646:	bf00      	nop
    3648:	e000      	b.n	364c <mp_lexer_to_next+0x5b6>
                break;
    364a:	bf00      	nop
}
    364c:	bf00      	nop
    364e:	3738      	adds	r7, #56	; 0x38
    3650:	46bd      	mov	sp, r7
    3652:	bd80      	pop	{r7, pc}
    3654:	0001f084 	.word	0x0001f084

00003658 <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    3658:	b580      	push	{r7, lr}
    365a:	b086      	sub	sp, #24
    365c:	af00      	add	r7, sp, #0
    365e:	60f8      	str	r0, [r7, #12]
    3660:	4638      	mov	r0, r7
    3662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    3666:	2054      	movs	r0, #84	; 0x54
    3668:	f7fc fe58 	bl	31c <m_malloc>
    366c:	6178      	str	r0, [r7, #20]

    lex->source_name = src_name;
    366e:	697b      	ldr	r3, [r7, #20]
    3670:	68fa      	ldr	r2, [r7, #12]
    3672:	601a      	str	r2, [r3, #0]
    lex->reader = reader;
    3674:	697b      	ldr	r3, [r7, #20]
    3676:	3304      	adds	r3, #4
    3678:	463a      	mov	r2, r7
    367a:	ca07      	ldmia	r2, {r0, r1, r2}
    367c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    3680:	697b      	ldr	r3, [r7, #20]
    3682:	2201      	movs	r2, #1
    3684:	61da      	str	r2, [r3, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    3686:	697b      	ldr	r3, [r7, #20]
    3688:	f06f 0201 	mvn.w	r2, #1
    368c:	621a      	str	r2, [r3, #32]
    lex->emit_dent = 0;
    368e:	697b      	ldr	r3, [r7, #20]
    3690:	2200      	movs	r2, #0
    3692:	625a      	str	r2, [r3, #36]	; 0x24
    lex->nested_bracket_level = 0;
    3694:	697b      	ldr	r3, [r7, #20]
    3696:	2200      	movs	r2, #0
    3698:	629a      	str	r2, [r3, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    369a:	697b      	ldr	r3, [r7, #20]
    369c:	220a      	movs	r2, #10
    369e:	62da      	str	r2, [r3, #44]	; 0x2c
    lex->num_indent_level = 1;
    36a0:	697b      	ldr	r3, [r7, #20]
    36a2:	2201      	movs	r2, #1
    36a4:	631a      	str	r2, [r3, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    36a6:	697b      	ldr	r3, [r7, #20]
    36a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36aa:	005b      	lsls	r3, r3, #1
    36ac:	4618      	mov	r0, r3
    36ae:	f7fc fe35 	bl	31c <m_malloc>
    36b2:	4602      	mov	r2, r0
    36b4:	697b      	ldr	r3, [r7, #20]
    36b6:	635a      	str	r2, [r3, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    36b8:	697b      	ldr	r3, [r7, #20]
    36ba:	3344      	adds	r3, #68	; 0x44
    36bc:	2120      	movs	r1, #32
    36be:	4618      	mov	r0, r3
    36c0:	f7fd fe1c 	bl	12fc <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    36c4:	697b      	ldr	r3, [r7, #20]
    36c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    36c8:	2200      	movs	r2, #0
    36ca:	801a      	strh	r2, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    36cc:	697b      	ldr	r3, [r7, #20]
    36ce:	2200      	movs	r2, #0
    36d0:	619a      	str	r2, [r3, #24]
    36d2:	697b      	ldr	r3, [r7, #20]
    36d4:	699a      	ldr	r2, [r3, #24]
    36d6:	697b      	ldr	r3, [r7, #20]
    36d8:	615a      	str	r2, [r3, #20]
    36da:	697b      	ldr	r3, [r7, #20]
    36dc:	695a      	ldr	r2, [r3, #20]
    36de:	697b      	ldr	r3, [r7, #20]
    36e0:	611a      	str	r2, [r3, #16]
    next_char(lex);
    36e2:	6978      	ldr	r0, [r7, #20]
    36e4:	f7ff f989 	bl	29fa <next_char>
    next_char(lex);
    36e8:	6978      	ldr	r0, [r7, #20]
    36ea:	f7ff f986 	bl	29fa <next_char>
    next_char(lex);
    36ee:	6978      	ldr	r0, [r7, #20]
    36f0:	f7ff f983 	bl	29fa <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    36f4:	6978      	ldr	r0, [r7, #20]
    36f6:	f7ff fcce 	bl	3096 <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    36fa:	697b      	ldr	r3, [r7, #20]
    36fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    36fe:	2b01      	cmp	r3, #1
    3700:	d002      	beq.n	3708 <mp_lexer_new+0xb0>
        lex->tok_kind = MP_TOKEN_INDENT;
    3702:	697b      	ldr	r3, [r7, #20]
    3704:	2205      	movs	r2, #5
    3706:	641a      	str	r2, [r3, #64]	; 0x40
    }

    return lex;
    3708:	697b      	ldr	r3, [r7, #20]
}
    370a:	4618      	mov	r0, r3
    370c:	3718      	adds	r7, #24
    370e:	46bd      	mov	sp, r7
    3710:	bd80      	pop	{r7, pc}

00003712 <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    3712:	b580      	push	{r7, lr}
    3714:	b088      	sub	sp, #32
    3716:	af00      	add	r7, sp, #0
    3718:	60f8      	str	r0, [r7, #12]
    371a:	60b9      	str	r1, [r7, #8]
    371c:	607a      	str	r2, [r7, #4]
    371e:	603b      	str	r3, [r7, #0]
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    3720:	f107 0014 	add.w	r0, r7, #20
    3724:	683b      	ldr	r3, [r7, #0]
    3726:	687a      	ldr	r2, [r7, #4]
    3728:	68b9      	ldr	r1, [r7, #8]
    372a:	f7fe ff60 	bl	25ee <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    372e:	f107 0314 	add.w	r3, r7, #20
    3732:	cb0e      	ldmia	r3, {r1, r2, r3}
    3734:	68f8      	ldr	r0, [r7, #12]
    3736:	f7ff ff8f 	bl	3658 <mp_lexer_new>
    373a:	4603      	mov	r3, r0
}
    373c:	4618      	mov	r0, r3
    373e:	3720      	adds	r7, #32
    3740:	46bd      	mov	sp, r7
    3742:	bd80      	pop	{r7, pc}

00003744 <mp_lexer_free>:

#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    3744:	b580      	push	{r7, lr}
    3746:	b082      	sub	sp, #8
    3748:	af00      	add	r7, sp, #0
    374a:	6078      	str	r0, [r7, #4]
    if (lex) {
    374c:	687b      	ldr	r3, [r7, #4]
    374e:	2b00      	cmp	r3, #0
    3750:	d012      	beq.n	3778 <mp_lexer_free+0x34>
        lex->reader.close(lex->reader.data);
    3752:	687b      	ldr	r3, [r7, #4]
    3754:	68db      	ldr	r3, [r3, #12]
    3756:	687a      	ldr	r2, [r7, #4]
    3758:	6852      	ldr	r2, [r2, #4]
    375a:	4610      	mov	r0, r2
    375c:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    375e:	687b      	ldr	r3, [r7, #4]
    3760:	3344      	adds	r3, #68	; 0x44
    3762:	4618      	mov	r0, r3
    3764:	f7fd fe2e 	bl	13c4 <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    376c:	4618      	mov	r0, r3
    376e:	f7fc fe33 	bl	3d8 <m_free>
        m_del_obj(mp_lexer_t, lex);
    3772:	6878      	ldr	r0, [r7, #4]
    3774:	f7fc fe30 	bl	3d8 <m_free>
    }
}
    3778:	bf00      	nop
    377a:	3708      	adds	r7, #8
    377c:	46bd      	mov	sp, r7
    377e:	bd80      	pop	{r7, pc}

00003780 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    3780:	b480      	push	{r7}
    3782:	b083      	sub	sp, #12
    3784:	af00      	add	r7, sp, #0
    3786:	6078      	str	r0, [r7, #4]
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	f003 0301 	and.w	r3, r3, #1
    378e:	2b00      	cmp	r3, #0
    3790:	bf14      	ite	ne
    3792:	2301      	movne	r3, #1
    3794:	2300      	moveq	r3, #0
    3796:	b2db      	uxtb	r3, r3
    3798:	4618      	mov	r0, r3
    379a:	370c      	adds	r7, #12
    379c:	46bd      	mov	sp, r7
    379e:	f85d 7b04 	ldr.w	r7, [sp], #4
    37a2:	4770      	bx	lr

000037a4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    37a4:	b480      	push	{r7}
    37a6:	b083      	sub	sp, #12
    37a8:	af00      	add	r7, sp, #0
    37aa:	6078      	str	r0, [r7, #4]
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	f003 0303 	and.w	r3, r3, #3
    37b2:	2b00      	cmp	r3, #0
    37b4:	bf0c      	ite	eq
    37b6:	2301      	moveq	r3, #1
    37b8:	2300      	movne	r3, #0
    37ba:	b2db      	uxtb	r3, r3
    37bc:	4618      	mov	r0, r3
    37be:	370c      	adds	r7, #12
    37c0:	46bd      	mov	sp, r7
    37c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37c6:	4770      	bx	lr

000037c8 <mp_parse_node_new_small_int>:
#define MP_PARSE_NODE_LEAF_ARG(pn) (((uintptr_t)(pn)) >> 4)
#define MP_PARSE_NODE_LEAF_SMALL_INT(pn) (((mp_int_t)(intptr_t)(pn)) >> 1)
#define MP_PARSE_NODE_STRUCT_KIND(pns) ((pns)->kind_num_nodes & 0xff)
#define MP_PARSE_NODE_STRUCT_NUM_NODES(pns) ((pns)->kind_num_nodes >> 8)

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    37c8:	b480      	push	{r7}
    37ca:	b083      	sub	sp, #12
    37cc:	af00      	add	r7, sp, #0
    37ce:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    37d0:	687b      	ldr	r3, [r7, #4]
    37d2:	005b      	lsls	r3, r3, #1
    37d4:	f043 0301 	orr.w	r3, r3, #1
}
    37d8:	4618      	mov	r0, r3
    37da:	370c      	adds	r7, #12
    37dc:	46bd      	mov	sp, r7
    37de:	f85d 7b04 	ldr.w	r7, [sp], #4
    37e2:	4770      	bx	lr

000037e4 <mp_parse_node_new_leaf>:
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    37e4:	b480      	push	{r7}
    37e6:	b083      	sub	sp, #12
    37e8:	af00      	add	r7, sp, #0
    37ea:	6078      	str	r0, [r7, #4]
    37ec:	6039      	str	r1, [r7, #0]
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    37ee:	683b      	ldr	r3, [r7, #0]
    37f0:	011a      	lsls	r2, r3, #4
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	4313      	orrs	r3, r2
}
    37f6:	4618      	mov	r0, r3
    37f8:	370c      	adds	r7, #12
    37fa:	46bd      	mov	sp, r7
    37fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3800:	4770      	bx	lr

00003802 <get_rule_arg>:
    #if MICROPY_COMP_CONST
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    3802:	b480      	push	{r7}
    3804:	b085      	sub	sp, #20
    3806:	af00      	add	r7, sp, #0
    3808:	4603      	mov	r3, r0
    380a:	71fb      	strb	r3, [r7, #7]
    size_t off = rule_arg_offset_table[r_id];
    380c:	79fb      	ldrb	r3, [r7, #7]
    380e:	4a0a      	ldr	r2, [pc, #40]	; (3838 <get_rule_arg+0x36>)
    3810:	5cd3      	ldrb	r3, [r2, r3]
    3812:	60fb      	str	r3, [r7, #12]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    3814:	79fb      	ldrb	r3, [r7, #7]
    3816:	2266      	movs	r2, #102	; 0x66
    3818:	4293      	cmp	r3, r2
    381a:	d303      	bcc.n	3824 <get_rule_arg+0x22>
        off |= 0x100;
    381c:	68fb      	ldr	r3, [r7, #12]
    381e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3822:	60fb      	str	r3, [r7, #12]
    }
    return &rule_arg_combined_table[off];
    3824:	68fb      	ldr	r3, [r7, #12]
    3826:	005b      	lsls	r3, r3, #1
    3828:	4a04      	ldr	r2, [pc, #16]	; (383c <get_rule_arg+0x3a>)
    382a:	4413      	add	r3, r2
}
    382c:	4618      	mov	r0, r3
    382e:	3714      	adds	r7, #20
    3830:	46bd      	mov	sp, r7
    3832:	f85d 7b04 	ldr.w	r7, [sp], #4
    3836:	4770      	bx	lr
    3838:	0001f628 	.word	0x0001f628
    383c:	0001f2e4 	.word	0x0001f2e4

00003840 <parser_alloc>:

STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    3840:	b580      	push	{r7, lr}
    3842:	b086      	sub	sp, #24
    3844:	af00      	add	r7, sp, #0
    3846:	6078      	str	r0, [r7, #4]
    3848:	6039      	str	r1, [r7, #0]
    // use a custom memory allocator to store parse nodes sequentially in large chunks

    mp_parse_chunk_t *chunk = parser->cur_chunk;
    384a:	687b      	ldr	r3, [r7, #4]
    384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    384e:	617b      	str	r3, [r7, #20]

    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    3850:	697b      	ldr	r3, [r7, #20]
    3852:	2b00      	cmp	r3, #0
    3854:	d031      	beq.n	38ba <parser_alloc+0x7a>
    3856:	697b      	ldr	r3, [r7, #20]
    3858:	685a      	ldr	r2, [r3, #4]
    385a:	683b      	ldr	r3, [r7, #0]
    385c:	441a      	add	r2, r3
    385e:	697b      	ldr	r3, [r7, #20]
    3860:	681b      	ldr	r3, [r3, #0]
    3862:	429a      	cmp	r2, r3
    3864:	d929      	bls.n	38ba <parser_alloc+0x7a>
        // not enough room at end of previously allocated chunk so try to grow
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    3866:	697b      	ldr	r3, [r7, #20]
    3868:	681a      	ldr	r2, [r3, #0]
    386a:	683b      	ldr	r3, [r7, #0]
    386c:	4413      	add	r3, r2
    386e:	3308      	adds	r3, #8
    3870:	2200      	movs	r2, #0
    3872:	4619      	mov	r1, r3
    3874:	6978      	ldr	r0, [r7, #20]
    3876:	f7fc fd9c 	bl	3b2 <m_realloc_maybe>
    387a:	60f8      	str	r0, [r7, #12]
            sizeof(mp_parse_chunk_t) + chunk->alloc,
            sizeof(mp_parse_chunk_t) + chunk->alloc + num_bytes, false);
        if (new_data == NULL) {
    387c:	68fb      	ldr	r3, [r7, #12]
    387e:	2b00      	cmp	r3, #0
    3880:	d115      	bne.n	38ae <parser_alloc+0x6e>
            // could not grow existing memory; shrink it to fit previous
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    3882:	697b      	ldr	r3, [r7, #20]
    3884:	685b      	ldr	r3, [r3, #4]
    3886:	3308      	adds	r3, #8
    3888:	2200      	movs	r2, #0
    388a:	4619      	mov	r1, r3
    388c:	6978      	ldr	r0, [r7, #20]
    388e:	f7fc fd90 	bl	3b2 <m_realloc_maybe>
                sizeof(mp_parse_chunk_t) + chunk->union_.used, false);
            chunk->alloc = chunk->union_.used;
    3892:	697b      	ldr	r3, [r7, #20]
    3894:	685a      	ldr	r2, [r3, #4]
    3896:	697b      	ldr	r3, [r7, #20]
    3898:	601a      	str	r2, [r3, #0]
            chunk->union_.next = parser->tree.chunk;
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	6a1a      	ldr	r2, [r3, #32]
    389e:	697b      	ldr	r3, [r7, #20]
    38a0:	605a      	str	r2, [r3, #4]
            parser->tree.chunk = chunk;
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	697a      	ldr	r2, [r7, #20]
    38a6:	621a      	str	r2, [r3, #32]
            chunk = NULL;
    38a8:	2300      	movs	r3, #0
    38aa:	617b      	str	r3, [r7, #20]
    38ac:	e005      	b.n	38ba <parser_alloc+0x7a>
        } else {
            // could grow existing memory
            chunk->alloc += num_bytes;
    38ae:	697b      	ldr	r3, [r7, #20]
    38b0:	681a      	ldr	r2, [r3, #0]
    38b2:	683b      	ldr	r3, [r7, #0]
    38b4:	441a      	add	r2, r3
    38b6:	697b      	ldr	r3, [r7, #20]
    38b8:	601a      	str	r2, [r3, #0]
        }
    }

    if (chunk == NULL) {
    38ba:	697b      	ldr	r3, [r7, #20]
    38bc:	2b00      	cmp	r3, #0
    38be:	d116      	bne.n	38ee <parser_alloc+0xae>
        // no previous chunk, allocate a new chunk
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    38c0:	2310      	movs	r3, #16
    38c2:	613b      	str	r3, [r7, #16]
        if (alloc < num_bytes) {
    38c4:	693a      	ldr	r2, [r7, #16]
    38c6:	683b      	ldr	r3, [r7, #0]
    38c8:	429a      	cmp	r2, r3
    38ca:	d201      	bcs.n	38d0 <parser_alloc+0x90>
            alloc = num_bytes;
    38cc:	683b      	ldr	r3, [r7, #0]
    38ce:	613b      	str	r3, [r7, #16]
        }
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    38d0:	693b      	ldr	r3, [r7, #16]
    38d2:	3308      	adds	r3, #8
    38d4:	4618      	mov	r0, r3
    38d6:	f7fc fd21 	bl	31c <m_malloc>
    38da:	6178      	str	r0, [r7, #20]
        chunk->alloc = alloc;
    38dc:	697b      	ldr	r3, [r7, #20]
    38de:	693a      	ldr	r2, [r7, #16]
    38e0:	601a      	str	r2, [r3, #0]
        chunk->union_.used = 0;
    38e2:	697b      	ldr	r3, [r7, #20]
    38e4:	2200      	movs	r2, #0
    38e6:	605a      	str	r2, [r3, #4]
        parser->cur_chunk = chunk;
    38e8:	687b      	ldr	r3, [r7, #4]
    38ea:	697a      	ldr	r2, [r7, #20]
    38ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    byte *ret = chunk->data + chunk->union_.used;
    38ee:	697b      	ldr	r3, [r7, #20]
    38f0:	f103 0208 	add.w	r2, r3, #8
    38f4:	697b      	ldr	r3, [r7, #20]
    38f6:	685b      	ldr	r3, [r3, #4]
    38f8:	4413      	add	r3, r2
    38fa:	60bb      	str	r3, [r7, #8]
    chunk->union_.used += num_bytes;
    38fc:	697b      	ldr	r3, [r7, #20]
    38fe:	685a      	ldr	r2, [r3, #4]
    3900:	683b      	ldr	r3, [r7, #0]
    3902:	441a      	add	r2, r3
    3904:	697b      	ldr	r3, [r7, #20]
    3906:	605a      	str	r2, [r3, #4]
    return ret;
    3908:	68bb      	ldr	r3, [r7, #8]
}
    390a:	4618      	mov	r0, r3
    390c:	3718      	adds	r7, #24
    390e:	46bd      	mov	sp, r7
    3910:	bd80      	pop	{r7, pc}

00003912 <push_rule>:

STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    3912:	b580      	push	{r7, lr}
    3914:	b086      	sub	sp, #24
    3916:	af00      	add	r7, sp, #0
    3918:	60f8      	str	r0, [r7, #12]
    391a:	60b9      	str	r1, [r7, #8]
    391c:	603b      	str	r3, [r7, #0]
    391e:	4613      	mov	r3, r2
    3920:	71fb      	strb	r3, [r7, #7]
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    3922:	68fb      	ldr	r3, [r7, #12]
    3924:	685a      	ldr	r2, [r3, #4]
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	681b      	ldr	r3, [r3, #0]
    392a:	429a      	cmp	r2, r3
    392c:	d313      	bcc.n	3956 <push_rule+0x44>
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	689a      	ldr	r2, [r3, #8]
    3932:	68fb      	ldr	r3, [r7, #12]
    3934:	681b      	ldr	r3, [r3, #0]
    3936:	3310      	adds	r3, #16
    3938:	00db      	lsls	r3, r3, #3
    393a:	4619      	mov	r1, r3
    393c:	4610      	mov	r0, r2
    393e:	f7fc fd1f 	bl	380 <m_realloc>
    3942:	6178      	str	r0, [r7, #20]
        parser->rule_stack = rs;
    3944:	68fb      	ldr	r3, [r7, #12]
    3946:	697a      	ldr	r2, [r7, #20]
    3948:	609a      	str	r2, [r3, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    394a:	68fb      	ldr	r3, [r7, #12]
    394c:	681b      	ldr	r3, [r3, #0]
    394e:	f103 0210 	add.w	r2, r3, #16
    3952:	68fb      	ldr	r3, [r7, #12]
    3954:	601a      	str	r2, [r3, #0]
    }
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    3956:	68fb      	ldr	r3, [r7, #12]
    3958:	689a      	ldr	r2, [r3, #8]
    395a:	68fb      	ldr	r3, [r7, #12]
    395c:	685b      	ldr	r3, [r3, #4]
    395e:	1c58      	adds	r0, r3, #1
    3960:	68f9      	ldr	r1, [r7, #12]
    3962:	6048      	str	r0, [r1, #4]
    3964:	00db      	lsls	r3, r3, #3
    3966:	4413      	add	r3, r2
    3968:	613b      	str	r3, [r7, #16]
    rs->src_line = src_line;
    396a:	68bb      	ldr	r3, [r7, #8]
    396c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    3970:	693a      	ldr	r2, [r7, #16]
    3972:	6813      	ldr	r3, [r2, #0]
    3974:	f361 0317 	bfi	r3, r1, #0, #24
    3978:	6013      	str	r3, [r2, #0]
    rs->rule_id = rule_id;
    397a:	693b      	ldr	r3, [r7, #16]
    397c:	79fa      	ldrb	r2, [r7, #7]
    397e:	70da      	strb	r2, [r3, #3]
    rs->arg_i = arg_i;
    3980:	693b      	ldr	r3, [r7, #16]
    3982:	683a      	ldr	r2, [r7, #0]
    3984:	605a      	str	r2, [r3, #4]
}
    3986:	bf00      	nop
    3988:	3718      	adds	r7, #24
    398a:	46bd      	mov	sp, r7
    398c:	bd80      	pop	{r7, pc}

0000398e <push_rule_from_arg>:

STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    398e:	b580      	push	{r7, lr}
    3990:	b084      	sub	sp, #16
    3992:	af00      	add	r7, sp, #0
    3994:	6078      	str	r0, [r7, #4]
    3996:	6039      	str	r1, [r7, #0]
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    3998:	683b      	ldr	r3, [r7, #0]
    399a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    399e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    39a2:	d00c      	beq.n	39be <push_rule_from_arg+0x30>
    39a4:	683b      	ldr	r3, [r7, #0]
    39a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    39aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    39ae:	d006      	beq.n	39be <push_rule_from_arg+0x30>
    39b0:	4b0b      	ldr	r3, [pc, #44]	; (39e0 <push_rule_from_arg+0x52>)
    39b2:	4a0c      	ldr	r2, [pc, #48]	; (39e4 <push_rule_from_arg+0x56>)
    39b4:	f44f 7199 	mov.w	r1, #306	; 0x132
    39b8:	480b      	ldr	r0, [pc, #44]	; (39e8 <push_rule_from_arg+0x5a>)
    39ba:	f017 fc13 	bl	1b1e4 <__assert_func>
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    39be:	683b      	ldr	r3, [r7, #0]
    39c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    39c4:	60fb      	str	r3, [r7, #12]
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    39c6:	687b      	ldr	r3, [r7, #4]
    39c8:	699b      	ldr	r3, [r3, #24]
    39ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
    39cc:	68fb      	ldr	r3, [r7, #12]
    39ce:	b2da      	uxtb	r2, r3
    39d0:	2300      	movs	r3, #0
    39d2:	6878      	ldr	r0, [r7, #4]
    39d4:	f7ff ff9d 	bl	3912 <push_rule>
}
    39d8:	bf00      	nop
    39da:	3710      	adds	r7, #16
    39dc:	46bd      	mov	sp, r7
    39de:	bd80      	pop	{r7, pc}
    39e0:	0001f6d0 	.word	0x0001f6d0
    39e4:	0001f8a8 	.word	0x0001f8a8
    39e8:	0001f730 	.word	0x0001f730

000039ec <pop_rule>:

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    39ec:	b480      	push	{r7}
    39ee:	b087      	sub	sp, #28
    39f0:	af00      	add	r7, sp, #0
    39f2:	60f8      	str	r0, [r7, #12]
    39f4:	60b9      	str	r1, [r7, #8]
    39f6:	607a      	str	r2, [r7, #4]
    parser->rule_stack_top -= 1;
    39f8:	68fb      	ldr	r3, [r7, #12]
    39fa:	685b      	ldr	r3, [r3, #4]
    39fc:	1e5a      	subs	r2, r3, #1
    39fe:	68fb      	ldr	r3, [r7, #12]
    3a00:	605a      	str	r2, [r3, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    3a02:	68fb      	ldr	r3, [r7, #12]
    3a04:	689a      	ldr	r2, [r3, #8]
    3a06:	68fb      	ldr	r3, [r7, #12]
    3a08:	685b      	ldr	r3, [r3, #4]
    3a0a:	00db      	lsls	r3, r3, #3
    3a0c:	4413      	add	r3, r2
    3a0e:	78db      	ldrb	r3, [r3, #3]
    3a10:	75fb      	strb	r3, [r7, #23]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    3a12:	68fb      	ldr	r3, [r7, #12]
    3a14:	689a      	ldr	r2, [r3, #8]
    3a16:	68fb      	ldr	r3, [r7, #12]
    3a18:	685b      	ldr	r3, [r3, #4]
    3a1a:	00db      	lsls	r3, r3, #3
    3a1c:	4413      	add	r3, r2
    3a1e:	685a      	ldr	r2, [r3, #4]
    3a20:	68bb      	ldr	r3, [r7, #8]
    3a22:	601a      	str	r2, [r3, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    3a24:	68fb      	ldr	r3, [r7, #12]
    3a26:	689a      	ldr	r2, [r3, #8]
    3a28:	68fb      	ldr	r3, [r7, #12]
    3a2a:	685b      	ldr	r3, [r3, #4]
    3a2c:	00db      	lsls	r3, r3, #3
    3a2e:	4413      	add	r3, r2
    3a30:	681b      	ldr	r3, [r3, #0]
    3a32:	f3c3 0317 	ubfx	r3, r3, #0, #24
    3a36:	461a      	mov	r2, r3
    3a38:	687b      	ldr	r3, [r7, #4]
    3a3a:	601a      	str	r2, [r3, #0]
    return rule_id;
    3a3c:	7dfb      	ldrb	r3, [r7, #23]
}
    3a3e:	4618      	mov	r0, r3
    3a40:	371c      	adds	r7, #28
    3a42:	46bd      	mov	sp, r7
    3a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a48:	4770      	bx	lr

00003a4a <mp_parse_node_is_const_false>:

bool mp_parse_node_is_const_false(mp_parse_node_t pn) {
    3a4a:	b480      	push	{r7}
    3a4c:	b083      	sub	sp, #12
    3a4e:	af00      	add	r7, sp, #0
    3a50:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	2bde      	cmp	r3, #222	; 0xde
    3a56:	d008      	beq.n	3a6a <mp_parse_node_is_const_false+0x20>
    3a58:	687b      	ldr	r3, [r7, #4]
    3a5a:	f003 0301 	and.w	r3, r3, #1
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d005      	beq.n	3a6e <mp_parse_node_is_const_false+0x24>
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	105b      	asrs	r3, r3, #1
    3a66:	2b00      	cmp	r3, #0
    3a68:	d101      	bne.n	3a6e <mp_parse_node_is_const_false+0x24>
    3a6a:	2301      	movs	r3, #1
    3a6c:	e000      	b.n	3a70 <mp_parse_node_is_const_false+0x26>
    3a6e:	2300      	movs	r3, #0
    3a70:	f003 0301 	and.w	r3, r3, #1
    3a74:	b2db      	uxtb	r3, r3
}
    3a76:	4618      	mov	r0, r3
    3a78:	370c      	adds	r7, #12
    3a7a:	46bd      	mov	sp, r7
    3a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a80:	4770      	bx	lr

00003a82 <mp_parse_node_is_const_true>:

bool mp_parse_node_is_const_true(mp_parse_node_t pn) {
    3a82:	b480      	push	{r7}
    3a84:	b083      	sub	sp, #12
    3a86:	af00      	add	r7, sp, #0
    3a88:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    3a8a:	687b      	ldr	r3, [r7, #4]
    3a8c:	2bfe      	cmp	r3, #254	; 0xfe
    3a8e:	d008      	beq.n	3aa2 <mp_parse_node_is_const_true+0x20>
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	f003 0301 	and.w	r3, r3, #1
    3a96:	2b00      	cmp	r3, #0
    3a98:	d005      	beq.n	3aa6 <mp_parse_node_is_const_true+0x24>
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	105b      	asrs	r3, r3, #1
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d001      	beq.n	3aa6 <mp_parse_node_is_const_true+0x24>
    3aa2:	2301      	movs	r3, #1
    3aa4:	e000      	b.n	3aa8 <mp_parse_node_is_const_true+0x26>
    3aa6:	2300      	movs	r3, #0
    3aa8:	f003 0301 	and.w	r3, r3, #1
    3aac:	b2db      	uxtb	r3, r3
}
    3aae:	4618      	mov	r0, r3
    3ab0:	370c      	adds	r7, #12
    3ab2:	46bd      	mov	sp, r7
    3ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ab8:	4770      	bx	lr

00003aba <mp_parse_node_get_int_maybe>:

bool mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o) {
    3aba:	b580      	push	{r7, lr}
    3abc:	b084      	sub	sp, #16
    3abe:	af00      	add	r7, sp, #0
    3ac0:	6078      	str	r0, [r7, #4]
    3ac2:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3ac4:	687b      	ldr	r3, [r7, #4]
    3ac6:	f003 0301 	and.w	r3, r3, #1
    3aca:	2b00      	cmp	r3, #0
    3acc:	d009      	beq.n	3ae2 <mp_parse_node_get_int_maybe+0x28>
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	105b      	asrs	r3, r3, #1
    3ad2:	005b      	lsls	r3, r3, #1
    3ad4:	f043 0301 	orr.w	r3, r3, #1
    3ad8:	461a      	mov	r2, r3
    3ada:	683b      	ldr	r3, [r7, #0]
    3adc:	601a      	str	r2, [r3, #0]
        return true;
    3ade:	2301      	movs	r3, #1
    3ae0:	e031      	b.n	3b46 <mp_parse_node_get_int_maybe+0x8c>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d02d      	beq.n	3b44 <mp_parse_node_get_int_maybe+0x8a>
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	f003 0303 	and.w	r3, r3, #3
    3aee:	2b00      	cmp	r3, #0
    3af0:	d128      	bne.n	3b44 <mp_parse_node_get_int_maybe+0x8a>
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	685b      	ldr	r3, [r3, #4]
    3af6:	b2db      	uxtb	r3, r3
    3af8:	2b35      	cmp	r3, #53	; 0x35
    3afa:	d123      	bne.n	3b44 <mp_parse_node_get_int_maybe+0x8a>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3afc:	687b      	ldr	r3, [r7, #4]
    3afe:	60fb      	str	r3, [r7, #12]
        #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
        // nodes are 32-bit pointers, but need to extract 64-bit object
        *o = (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
        #else
        *o = (mp_obj_t)pns->nodes[0];
    3b00:	68fb      	ldr	r3, [r7, #12]
    3b02:	689b      	ldr	r3, [r3, #8]
    3b04:	461a      	mov	r2, r3
    3b06:	683b      	ldr	r3, [r7, #0]
    3b08:	601a      	str	r2, [r3, #0]
        #endif
        return MP_OBJ_IS_INT(*o);
    3b0a:	683b      	ldr	r3, [r7, #0]
    3b0c:	681b      	ldr	r3, [r3, #0]
    3b0e:	4618      	mov	r0, r3
    3b10:	f7ff fe36 	bl	3780 <MP_OBJ_IS_SMALL_INT>
    3b14:	4603      	mov	r3, r0
    3b16:	2b00      	cmp	r3, #0
    3b18:	d10d      	bne.n	3b36 <mp_parse_node_get_int_maybe+0x7c>
    3b1a:	683b      	ldr	r3, [r7, #0]
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	4618      	mov	r0, r3
    3b20:	f7ff fe40 	bl	37a4 <MP_OBJ_IS_OBJ>
    3b24:	4603      	mov	r3, r0
    3b26:	2b00      	cmp	r3, #0
    3b28:	d007      	beq.n	3b3a <mp_parse_node_get_int_maybe+0x80>
    3b2a:	683b      	ldr	r3, [r7, #0]
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	681b      	ldr	r3, [r3, #0]
    3b30:	4a07      	ldr	r2, [pc, #28]	; (3b50 <mp_parse_node_get_int_maybe+0x96>)
    3b32:	4293      	cmp	r3, r2
    3b34:	d101      	bne.n	3b3a <mp_parse_node_get_int_maybe+0x80>
    3b36:	2301      	movs	r3, #1
    3b38:	e000      	b.n	3b3c <mp_parse_node_get_int_maybe+0x82>
    3b3a:	2300      	movs	r3, #0
    3b3c:	f003 0301 	and.w	r3, r3, #1
    3b40:	b2db      	uxtb	r3, r3
    3b42:	e000      	b.n	3b46 <mp_parse_node_get_int_maybe+0x8c>
    } else {
        return false;
    3b44:	2300      	movs	r3, #0
    }
}
    3b46:	4618      	mov	r0, r3
    3b48:	3710      	adds	r7, #16
    3b4a:	46bd      	mov	sp, r7
    3b4c:	bd80      	pop	{r7, pc}
    3b4e:	bf00      	nop
    3b50:	00022610 	.word	0x00022610

00003b54 <mp_parse_node_extract_list>:

int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    3b54:	b480      	push	{r7}
    3b56:	b087      	sub	sp, #28
    3b58:	af00      	add	r7, sp, #0
    3b5a:	60f8      	str	r0, [r7, #12]
    3b5c:	60b9      	str	r1, [r7, #8]
    3b5e:	607a      	str	r2, [r7, #4]
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    3b60:	68fb      	ldr	r3, [r7, #12]
    3b62:	681b      	ldr	r3, [r3, #0]
    3b64:	2b00      	cmp	r3, #0
    3b66:	d104      	bne.n	3b72 <mp_parse_node_extract_list+0x1e>
        *nodes = NULL;
    3b68:	687b      	ldr	r3, [r7, #4]
    3b6a:	2200      	movs	r2, #0
    3b6c:	601a      	str	r2, [r3, #0]
        return 0;
    3b6e:	2300      	movs	r3, #0
    3b70:	e020      	b.n	3bb4 <mp_parse_node_extract_list+0x60>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	681b      	ldr	r3, [r3, #0]
    3b76:	f003 0303 	and.w	r3, r3, #3
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d004      	beq.n	3b88 <mp_parse_node_extract_list+0x34>
        *nodes = pn;
    3b7e:	687b      	ldr	r3, [r7, #4]
    3b80:	68fa      	ldr	r2, [r7, #12]
    3b82:	601a      	str	r2, [r3, #0]
        return 1;
    3b84:	2301      	movs	r3, #1
    3b86:	e015      	b.n	3bb4 <mp_parse_node_extract_list+0x60>
    } else {
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)(*pn);
    3b88:	68fb      	ldr	r3, [r7, #12]
    3b8a:	681b      	ldr	r3, [r3, #0]
    3b8c:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    3b8e:	697b      	ldr	r3, [r7, #20]
    3b90:	685b      	ldr	r3, [r3, #4]
    3b92:	b2da      	uxtb	r2, r3
    3b94:	68bb      	ldr	r3, [r7, #8]
    3b96:	429a      	cmp	r2, r3
    3b98:	d004      	beq.n	3ba4 <mp_parse_node_extract_list+0x50>
            *nodes = pn;
    3b9a:	687b      	ldr	r3, [r7, #4]
    3b9c:	68fa      	ldr	r2, [r7, #12]
    3b9e:	601a      	str	r2, [r3, #0]
            return 1;
    3ba0:	2301      	movs	r3, #1
    3ba2:	e007      	b.n	3bb4 <mp_parse_node_extract_list+0x60>
        } else {
            *nodes = pns->nodes;
    3ba4:	697b      	ldr	r3, [r7, #20]
    3ba6:	f103 0208 	add.w	r2, r3, #8
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	601a      	str	r2, [r3, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3bae:	697b      	ldr	r3, [r7, #20]
    3bb0:	685b      	ldr	r3, [r3, #4]
    3bb2:	0a1b      	lsrs	r3, r3, #8
        }
    }
}
    3bb4:	4618      	mov	r0, r3
    3bb6:	371c      	adds	r7, #28
    3bb8:	46bd      	mov	sp, r7
    3bba:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bbe:	4770      	bx	lr

00003bc0 <pop_result>:
        mp_parse_node_print(parser->result_stack[i], 0);
    }
}
*/

STATIC mp_parse_node_t pop_result(parser_t *parser) {
    3bc0:	b580      	push	{r7, lr}
    3bc2:	b082      	sub	sp, #8
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
    assert(parser->result_stack_top > 0);
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	691b      	ldr	r3, [r3, #16]
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d106      	bne.n	3bde <pop_result+0x1e>
    3bd0:	4b0b      	ldr	r3, [pc, #44]	; (3c00 <pop_result+0x40>)
    3bd2:	4a0c      	ldr	r2, [pc, #48]	; (3c04 <pop_result+0x44>)
    3bd4:	f240 11a9 	movw	r1, #425	; 0x1a9
    3bd8:	480b      	ldr	r0, [pc, #44]	; (3c08 <pop_result+0x48>)
    3bda:	f017 fb03 	bl	1b1e4 <__assert_func>
    return parser->result_stack[--parser->result_stack_top];
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	695a      	ldr	r2, [r3, #20]
    3be2:	687b      	ldr	r3, [r7, #4]
    3be4:	691b      	ldr	r3, [r3, #16]
    3be6:	1e59      	subs	r1, r3, #1
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	6119      	str	r1, [r3, #16]
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	691b      	ldr	r3, [r3, #16]
    3bf0:	009b      	lsls	r3, r3, #2
    3bf2:	4413      	add	r3, r2
    3bf4:	681b      	ldr	r3, [r3, #0]
}
    3bf6:	4618      	mov	r0, r3
    3bf8:	3708      	adds	r7, #8
    3bfa:	46bd      	mov	sp, r7
    3bfc:	bd80      	pop	{r7, pc}
    3bfe:	bf00      	nop
    3c00:	0001f744 	.word	0x0001f744
    3c04:	0001f8bc 	.word	0x0001f8bc
    3c08:	0001f730 	.word	0x0001f730

00003c0c <peek_result>:

STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    3c0c:	b580      	push	{r7, lr}
    3c0e:	b082      	sub	sp, #8
    3c10:	af00      	add	r7, sp, #0
    3c12:	6078      	str	r0, [r7, #4]
    3c14:	6039      	str	r1, [r7, #0]
    assert(parser->result_stack_top > pos);
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	691a      	ldr	r2, [r3, #16]
    3c1a:	683b      	ldr	r3, [r7, #0]
    3c1c:	429a      	cmp	r2, r3
    3c1e:	d806      	bhi.n	3c2e <peek_result+0x22>
    3c20:	4b0b      	ldr	r3, [pc, #44]	; (3c50 <peek_result+0x44>)
    3c22:	4a0c      	ldr	r2, [pc, #48]	; (3c54 <peek_result+0x48>)
    3c24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    3c28:	480b      	ldr	r0, [pc, #44]	; (3c58 <peek_result+0x4c>)
    3c2a:	f017 fadb 	bl	1b1e4 <__assert_func>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	695a      	ldr	r2, [r3, #20]
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	6919      	ldr	r1, [r3, #16]
    3c36:	683b      	ldr	r3, [r7, #0]
    3c38:	1acb      	subs	r3, r1, r3
    3c3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3c3e:	3b01      	subs	r3, #1
    3c40:	009b      	lsls	r3, r3, #2
    3c42:	4413      	add	r3, r2
    3c44:	681b      	ldr	r3, [r3, #0]
}
    3c46:	4618      	mov	r0, r3
    3c48:	3708      	adds	r7, #8
    3c4a:	46bd      	mov	sp, r7
    3c4c:	bd80      	pop	{r7, pc}
    3c4e:	bf00      	nop
    3c50:	0001f764 	.word	0x0001f764
    3c54:	0001f8c8 	.word	0x0001f8c8
    3c58:	0001f730 	.word	0x0001f730

00003c5c <push_result_node>:

STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b084      	sub	sp, #16
    3c60:	af00      	add	r7, sp, #0
    3c62:	6078      	str	r0, [r7, #4]
    3c64:	6039      	str	r1, [r7, #0]
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    3c66:	687b      	ldr	r3, [r7, #4]
    3c68:	691a      	ldr	r2, [r3, #16]
    3c6a:	687b      	ldr	r3, [r7, #4]
    3c6c:	68db      	ldr	r3, [r3, #12]
    3c6e:	429a      	cmp	r2, r3
    3c70:	d313      	bcc.n	3c9a <push_result_node+0x3e>
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	695a      	ldr	r2, [r3, #20]
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	68db      	ldr	r3, [r3, #12]
    3c7a:	3310      	adds	r3, #16
    3c7c:	009b      	lsls	r3, r3, #2
    3c7e:	4619      	mov	r1, r3
    3c80:	4610      	mov	r0, r2
    3c82:	f7fc fb7d 	bl	380 <m_realloc>
    3c86:	60f8      	str	r0, [r7, #12]
        parser->result_stack = stack;
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	68fa      	ldr	r2, [r7, #12]
    3c8c:	615a      	str	r2, [r3, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	68db      	ldr	r3, [r3, #12]
    3c92:	f103 0210 	add.w	r2, r3, #16
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	60da      	str	r2, [r3, #12]
    }
    parser->result_stack[parser->result_stack_top++] = pn;
    3c9a:	687b      	ldr	r3, [r7, #4]
    3c9c:	695a      	ldr	r2, [r3, #20]
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	691b      	ldr	r3, [r3, #16]
    3ca2:	1c58      	adds	r0, r3, #1
    3ca4:	6879      	ldr	r1, [r7, #4]
    3ca6:	6108      	str	r0, [r1, #16]
    3ca8:	009b      	lsls	r3, r3, #2
    3caa:	4413      	add	r3, r2
    3cac:	683a      	ldr	r2, [r7, #0]
    3cae:	601a      	str	r2, [r3, #0]
}
    3cb0:	bf00      	nop
    3cb2:	3710      	adds	r7, #16
    3cb4:	46bd      	mov	sp, r7
    3cb6:	bd80      	pop	{r7, pc}

00003cb8 <make_node_const_object>:

STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    3cb8:	b580      	push	{r7, lr}
    3cba:	b086      	sub	sp, #24
    3cbc:	af00      	add	r7, sp, #0
    3cbe:	60f8      	str	r0, [r7, #12]
    3cc0:	60b9      	str	r1, [r7, #8]
    3cc2:	607a      	str	r2, [r7, #4]
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    3cc4:	210c      	movs	r1, #12
    3cc6:	68f8      	ldr	r0, [r7, #12]
    3cc8:	f7ff fdba 	bl	3840 <parser_alloc>
    3ccc:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    3cce:	697b      	ldr	r3, [r7, #20]
    3cd0:	68ba      	ldr	r2, [r7, #8]
    3cd2:	601a      	str	r2, [r3, #0]
    // nodes are 32-bit pointers, but need to store 64-bit object
    pn->kind_num_nodes = RULE_const_object | (2 << 8);
    pn->nodes[0] = (uint64_t)obj;
    pn->nodes[1] = (uint64_t)obj >> 32;
    #else
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    3cd4:	697b      	ldr	r3, [r7, #20]
    3cd6:	f240 1235 	movw	r2, #309	; 0x135
    3cda:	605a      	str	r2, [r3, #4]
    pn->nodes[0] = (uintptr_t)obj;
    3cdc:	687a      	ldr	r2, [r7, #4]
    3cde:	697b      	ldr	r3, [r7, #20]
    3ce0:	609a      	str	r2, [r3, #8]
    #endif
    return (mp_parse_node_t)pn;
    3ce2:	697b      	ldr	r3, [r7, #20]
}
    3ce4:	4618      	mov	r0, r3
    3ce6:	3718      	adds	r7, #24
    3ce8:	46bd      	mov	sp, r7
    3cea:	bd80      	pop	{r7, pc}

00003cec <mp_parse_node_new_small_int_checked>:

STATIC mp_parse_node_t mp_parse_node_new_small_int_checked(parser_t *parser, mp_obj_t o_val) {
    3cec:	b580      	push	{r7, lr}
    3cee:	b084      	sub	sp, #16
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	6078      	str	r0, [r7, #4]
    3cf4:	6039      	str	r1, [r7, #0]
    (void)parser;
    mp_int_t val = MP_OBJ_SMALL_INT_VALUE(o_val);
    3cf6:	683b      	ldr	r3, [r7, #0]
    3cf8:	105b      	asrs	r3, r3, #1
    3cfa:	60fb      	str	r3, [r7, #12]
    // A parse node is only 32-bits and the small-int value must fit in 31-bits
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
    3cfc:	68f8      	ldr	r0, [r7, #12]
    3cfe:	f7ff fd63 	bl	37c8 <mp_parse_node_new_small_int>
    3d02:	4603      	mov	r3, r0
}
    3d04:	4618      	mov	r0, r3
    3d06:	3710      	adds	r7, #16
    3d08:	46bd      	mov	sp, r7
    3d0a:	bd80      	pop	{r7, pc}

00003d0c <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    3d0c:	b580      	push	{r7, lr}
    3d0e:	b08c      	sub	sp, #48	; 0x30
    3d10:	af02      	add	r7, sp, #8
    3d12:	6078      	str	r0, [r7, #4]
    3d14:	460b      	mov	r3, r1
    3d16:	70fb      	strb	r3, [r7, #3]
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    3d18:	687b      	ldr	r3, [r7, #4]
    3d1a:	699b      	ldr	r3, [r3, #24]
    3d1c:	61fb      	str	r3, [r7, #28]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    3d1e:	69fb      	ldr	r3, [r7, #28]
    3d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d22:	2b07      	cmp	r3, #7
    3d24:	d10f      	bne.n	3d46 <push_result_token+0x3a>
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3d26:	69fb      	ldr	r3, [r7, #28]
    3d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3d2a:	69fb      	ldr	r3, [r7, #28]
    3d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d2e:	4619      	mov	r1, r3
    3d30:	4610      	mov	r0, r2
    3d32:	f7fd f984 	bl	103e <qstr_from_strn>
    3d36:	61b8      	str	r0, [r7, #24]
        } else {
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
    3d38:	69bb      	ldr	r3, [r7, #24]
    3d3a:	4619      	mov	r1, r3
    3d3c:	2002      	movs	r0, #2
    3d3e:	f7ff fd51 	bl	37e4 <mp_parse_node_new_leaf>
    3d42:	6278      	str	r0, [r7, #36]	; 0x24
    3d44:	e08a      	b.n	3e5c <push_result_token+0x150>
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    3d46:	69fb      	ldr	r3, [r7, #28]
    3d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d4a:	2b08      	cmp	r3, #8
    3d4c:	d11d      	bne.n	3d8a <push_result_token+0x7e>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    3d4e:	69fb      	ldr	r3, [r7, #28]
    3d50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3d52:	69fb      	ldr	r3, [r7, #28]
    3d54:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3d56:	69fb      	ldr	r3, [r7, #28]
    3d58:	2200      	movs	r2, #0
    3d5a:	f007 f8bf 	bl	aedc <mp_parse_num_integer>
    3d5e:	6178      	str	r0, [r7, #20]
        if (MP_OBJ_IS_SMALL_INT(o)) {
    3d60:	6978      	ldr	r0, [r7, #20]
    3d62:	f7ff fd0d 	bl	3780 <MP_OBJ_IS_SMALL_INT>
    3d66:	4603      	mov	r3, r0
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d005      	beq.n	3d78 <push_result_token+0x6c>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    3d6c:	6979      	ldr	r1, [r7, #20]
    3d6e:	6878      	ldr	r0, [r7, #4]
    3d70:	f7ff ffbc 	bl	3cec <mp_parse_node_new_small_int_checked>
    3d74:	6278      	str	r0, [r7, #36]	; 0x24
    3d76:	e071      	b.n	3e5c <push_result_token+0x150>
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
    3d78:	69fb      	ldr	r3, [r7, #28]
    3d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3d7c:	697a      	ldr	r2, [r7, #20]
    3d7e:	4619      	mov	r1, r3
    3d80:	6878      	ldr	r0, [r7, #4]
    3d82:	f7ff ff99 	bl	3cb8 <make_node_const_object>
    3d86:	6278      	str	r0, [r7, #36]	; 0x24
    3d88:	e068      	b.n	3e5c <push_result_token+0x150>
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    3d8a:	69fb      	ldr	r3, [r7, #28]
    3d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d8e:	2b09      	cmp	r3, #9
    3d90:	d113      	bne.n	3dba <push_result_token+0xae>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    3d92:	69fb      	ldr	r3, [r7, #28]
    3d94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3d96:	69fb      	ldr	r3, [r7, #28]
    3d98:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3d9a:	69fb      	ldr	r3, [r7, #28]
    3d9c:	9300      	str	r3, [sp, #0]
    3d9e:	2300      	movs	r3, #0
    3da0:	2201      	movs	r2, #1
    3da2:	f007 f983 	bl	b0ac <mp_parse_num_decimal>
    3da6:	6138      	str	r0, [r7, #16]
        pn = make_node_const_object(parser, lex->tok_line, o);
    3da8:	69fb      	ldr	r3, [r7, #28]
    3daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3dac:	693a      	ldr	r2, [r7, #16]
    3dae:	4619      	mov	r1, r3
    3db0:	6878      	ldr	r0, [r7, #4]
    3db2:	f7ff ff81 	bl	3cb8 <make_node_const_object>
    3db6:	6278      	str	r0, [r7, #36]	; 0x24
    3db8:	e050      	b.n	3e5c <push_result_token+0x150>
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3dba:	69fb      	ldr	r3, [r7, #28]
    3dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3dbe:	2b0a      	cmp	r3, #10
    3dc0:	d003      	beq.n	3dca <push_result_token+0xbe>
    3dc2:	69fb      	ldr	r3, [r7, #28]
    3dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3dc6:	2b0b      	cmp	r3, #11
    3dc8:	d141      	bne.n	3e4e <push_result_token+0x142>
        // Don't automatically intern all strings/bytes.  doc strings (which are usually large)
        // will be discarded by the compiler, and so we shouldn't intern them.
        qstr qst = MP_QSTR_NULL;
    3dca:	2300      	movs	r3, #0
    3dcc:	623b      	str	r3, [r7, #32]
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    3dce:	69fb      	ldr	r3, [r7, #28]
    3dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3dd2:	2b0a      	cmp	r3, #10
    3dd4:	d809      	bhi.n	3dea <push_result_token+0xde>
            // intern short strings
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3dd6:	69fb      	ldr	r3, [r7, #28]
    3dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3dda:	69fb      	ldr	r3, [r7, #28]
    3ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3dde:	4619      	mov	r1, r3
    3de0:	4610      	mov	r0, r2
    3de2:	f7fd f92c 	bl	103e <qstr_from_strn>
    3de6:	6238      	str	r0, [r7, #32]
    3de8:	e008      	b.n	3dfc <push_result_token+0xf0>
        } else {
            // check if this string is already interned
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    3dea:	69fb      	ldr	r3, [r7, #28]
    3dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3dee:	69fb      	ldr	r3, [r7, #28]
    3df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3df2:	4619      	mov	r1, r3
    3df4:	4610      	mov	r0, r2
    3df6:	f7fd f8bf 	bl	f78 <qstr_find_strn>
    3dfa:	6238      	str	r0, [r7, #32]
        }
        if (qst != MP_QSTR_NULL) {
    3dfc:	6a3b      	ldr	r3, [r7, #32]
    3dfe:	2b00      	cmp	r3, #0
    3e00:	d00d      	beq.n	3e1e <push_result_token+0x112>
            // qstr exists, make a leaf node
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    3e02:	69fb      	ldr	r3, [r7, #28]
    3e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e06:	2b0a      	cmp	r3, #10
    3e08:	d101      	bne.n	3e0e <push_result_token+0x102>
    3e0a:	2306      	movs	r3, #6
    3e0c:	e000      	b.n	3e10 <push_result_token+0x104>
    3e0e:	230a      	movs	r3, #10
    3e10:	6a3a      	ldr	r2, [r7, #32]
    3e12:	4611      	mov	r1, r2
    3e14:	4618      	mov	r0, r3
    3e16:	f7ff fce5 	bl	37e4 <mp_parse_node_new_leaf>
    3e1a:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e1c:	e01e      	b.n	3e5c <push_result_token+0x150>
        } else {
            // not interned, make a node holding a pointer to the string/bytes object
            mp_obj_t o = mp_obj_new_str_copy(
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    3e1e:	69fb      	ldr	r3, [r7, #28]
    3e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    3e22:	2b0a      	cmp	r3, #10
    3e24:	d101      	bne.n	3e2a <push_result_token+0x11e>
    3e26:	4811      	ldr	r0, [pc, #68]	; (3e6c <push_result_token+0x160>)
    3e28:	e000      	b.n	3e2c <push_result_token+0x120>
    3e2a:	4811      	ldr	r0, [pc, #68]	; (3e70 <push_result_token+0x164>)
                (const byte*)lex->vstr.buf, lex->vstr.len);
    3e2c:	69fb      	ldr	r3, [r7, #28]
    3e2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            mp_obj_t o = mp_obj_new_str_copy(
    3e30:	69fb      	ldr	r3, [r7, #28]
    3e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e34:	461a      	mov	r2, r3
    3e36:	f011 f83e 	bl	14eb6 <mp_obj_new_str_copy>
    3e3a:	60f8      	str	r0, [r7, #12]
            pn = make_node_const_object(parser, lex->tok_line, o);
    3e3c:	69fb      	ldr	r3, [r7, #28]
    3e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e40:	68fa      	ldr	r2, [r7, #12]
    3e42:	4619      	mov	r1, r3
    3e44:	6878      	ldr	r0, [r7, #4]
    3e46:	f7ff ff37 	bl	3cb8 <make_node_const_object>
    3e4a:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e4c:	e006      	b.n	3e5c <push_result_token+0x150>
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    3e4e:	69fb      	ldr	r3, [r7, #28]
    3e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e52:	4619      	mov	r1, r3
    3e54:	200e      	movs	r0, #14
    3e56:	f7ff fcc5 	bl	37e4 <mp_parse_node_new_leaf>
    3e5a:	6278      	str	r0, [r7, #36]	; 0x24
    }
    push_result_node(parser, pn);
    3e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3e5e:	6878      	ldr	r0, [r7, #4]
    3e60:	f7ff fefc 	bl	3c5c <push_result_node>
}
    3e64:	bf00      	nop
    3e66:	3728      	adds	r7, #40	; 0x28
    3e68:	46bd      	mov	sp, r7
    3e6a:	bd80      	pop	{r7, pc}
    3e6c:	00023204 	.word	0x00023204
    3e70:	00023240 	.word	0x00023240

00003e74 <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    3e74:	b580      	push	{r7, lr}
    3e76:	b08a      	sub	sp, #40	; 0x28
    3e78:	af00      	add	r7, sp, #0
    3e7a:	60f8      	str	r0, [r7, #12]
    3e7c:	460b      	mov	r3, r1
    3e7e:	607a      	str	r2, [r7, #4]
    3e80:	72fb      	strb	r3, [r7, #11]
    if (rule_id == RULE_or_test
    3e82:	7afb      	ldrb	r3, [r7, #11]
    3e84:	2b1c      	cmp	r3, #28
    3e86:	d002      	beq.n	3e8e <fold_logical_constants+0x1a>
        || rule_id == RULE_and_test) {
    3e88:	7afb      	ldrb	r3, [r7, #11]
    3e8a:	2b1d      	cmp	r3, #29
    3e8c:	d169      	bne.n	3f62 <fold_logical_constants+0xee>
        // folding for binary logical ops: or and
        size_t copy_to = *num_args;
    3e8e:	687b      	ldr	r3, [r7, #4]
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e96:	623b      	str	r3, [r7, #32]
    3e98:	e03c      	b.n	3f14 <fold_logical_constants+0xa0>
            mp_parse_node_t pn = peek_result(parser, --i);
    3e9a:	6a3b      	ldr	r3, [r7, #32]
    3e9c:	3b01      	subs	r3, #1
    3e9e:	623b      	str	r3, [r7, #32]
    3ea0:	6a39      	ldr	r1, [r7, #32]
    3ea2:	68f8      	ldr	r0, [r7, #12]
    3ea4:	f7ff feb2 	bl	3c0c <peek_result>
    3ea8:	6178      	str	r0, [r7, #20]
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    3eaa:	68fb      	ldr	r3, [r7, #12]
    3eac:	695a      	ldr	r2, [r3, #20]
    3eae:	68fb      	ldr	r3, [r7, #12]
    3eb0:	6919      	ldr	r1, [r3, #16]
    3eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3eb4:	1acb      	subs	r3, r1, r3
    3eb6:	009b      	lsls	r3, r3, #2
    3eb8:	4413      	add	r3, r2
    3eba:	697a      	ldr	r2, [r7, #20]
    3ebc:	601a      	str	r2, [r3, #0]
            if (i == 0) {
    3ebe:	6a3b      	ldr	r3, [r7, #32]
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d02b      	beq.n	3f1c <fold_logical_constants+0xa8>
                // always need to keep the last value
                break;
            }
            if (rule_id == RULE_or_test) {
    3ec4:	7afb      	ldrb	r3, [r7, #11]
    3ec6:	2b1c      	cmp	r3, #28
    3ec8:	d112      	bne.n	3ef0 <fold_logical_constants+0x7c>
                if (mp_parse_node_is_const_true(pn)) {
    3eca:	6978      	ldr	r0, [r7, #20]
    3ecc:	f7ff fdd9 	bl	3a82 <mp_parse_node_is_const_true>
    3ed0:	4603      	mov	r3, r0
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d124      	bne.n	3f20 <fold_logical_constants+0xac>
                    //
                    break;
                } else if (!mp_parse_node_is_const_false(pn)) {
    3ed6:	6978      	ldr	r0, [r7, #20]
    3ed8:	f7ff fdb7 	bl	3a4a <mp_parse_node_is_const_false>
    3edc:	4603      	mov	r3, r0
    3ede:	f083 0301 	eor.w	r3, r3, #1
    3ee2:	b2db      	uxtb	r3, r3
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d015      	beq.n	3f14 <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3eea:	3b01      	subs	r3, #1
    3eec:	627b      	str	r3, [r7, #36]	; 0x24
    3eee:	e011      	b.n	3f14 <fold_logical_constants+0xa0>
                }
            } else {
                // RULE_and_test
                if (mp_parse_node_is_const_false(pn)) {
    3ef0:	6978      	ldr	r0, [r7, #20]
    3ef2:	f7ff fdaa 	bl	3a4a <mp_parse_node_is_const_false>
    3ef6:	4603      	mov	r3, r0
    3ef8:	2b00      	cmp	r3, #0
    3efa:	d113      	bne.n	3f24 <fold_logical_constants+0xb0>
                    break;
                } else if (!mp_parse_node_is_const_true(pn)) {
    3efc:	6978      	ldr	r0, [r7, #20]
    3efe:	f7ff fdc0 	bl	3a82 <mp_parse_node_is_const_true>
    3f02:	4603      	mov	r3, r0
    3f04:	f083 0301 	eor.w	r3, r3, #1
    3f08:	b2db      	uxtb	r3, r3
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d002      	beq.n	3f14 <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f10:	3b01      	subs	r3, #1
    3f12:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3f14:	6a3b      	ldr	r3, [r7, #32]
    3f16:	2b00      	cmp	r3, #0
    3f18:	d1bf      	bne.n	3e9a <fold_logical_constants+0x26>
    3f1a:	e004      	b.n	3f26 <fold_logical_constants+0xb2>
                break;
    3f1c:	bf00      	nop
    3f1e:	e002      	b.n	3f26 <fold_logical_constants+0xb2>
                    break;
    3f20:	bf00      	nop
    3f22:	e000      	b.n	3f26 <fold_logical_constants+0xb2>
                    break;
    3f24:	bf00      	nop
                }
            }
        }
        copy_to -= 1; // copy_to now contains number of args to pop
    3f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f28:	3b01      	subs	r3, #1
    3f2a:	627b      	str	r3, [r7, #36]	; 0x24

        // pop and discard all the short-circuited expressions
        for (size_t i = 0; i < copy_to; ++i) {
    3f2c:	2300      	movs	r3, #0
    3f2e:	61fb      	str	r3, [r7, #28]
    3f30:	e005      	b.n	3f3e <fold_logical_constants+0xca>
            pop_result(parser);
    3f32:	68f8      	ldr	r0, [r7, #12]
    3f34:	f7ff fe44 	bl	3bc0 <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    3f38:	69fb      	ldr	r3, [r7, #28]
    3f3a:	3301      	adds	r3, #1
    3f3c:	61fb      	str	r3, [r7, #28]
    3f3e:	69fa      	ldr	r2, [r7, #28]
    3f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f42:	429a      	cmp	r2, r3
    3f44:	d3f5      	bcc.n	3f32 <fold_logical_constants+0xbe>
        }
        *num_args -= copy_to;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	681a      	ldr	r2, [r3, #0]
    3f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f4c:	1ad2      	subs	r2, r2, r3
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	601a      	str	r2, [r3, #0]

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	681b      	ldr	r3, [r3, #0]
    3f56:	2b01      	cmp	r3, #1
    3f58:	bf0c      	ite	eq
    3f5a:	2301      	moveq	r3, #1
    3f5c:	2300      	movne	r3, #0
    3f5e:	b2db      	uxtb	r3, r3
    3f60:	e02b      	b.n	3fba <fold_logical_constants+0x146>

    } else if (rule_id == RULE_not_test_2) {
    3f62:	7afb      	ldrb	r3, [r7, #11]
    3f64:	2b1e      	cmp	r3, #30
    3f66:	d127      	bne.n	3fb8 <fold_logical_constants+0x144>
        // folding for unary logical op: not
        mp_parse_node_t pn = peek_result(parser, 0);
    3f68:	2100      	movs	r1, #0
    3f6a:	68f8      	ldr	r0, [r7, #12]
    3f6c:	f7ff fe4e 	bl	3c0c <peek_result>
    3f70:	61b8      	str	r0, [r7, #24]
        if (mp_parse_node_is_const_false(pn)) {
    3f72:	69b8      	ldr	r0, [r7, #24]
    3f74:	f7ff fd69 	bl	3a4a <mp_parse_node_is_const_false>
    3f78:	4603      	mov	r3, r0
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d005      	beq.n	3f8a <fold_logical_constants+0x116>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    3f7e:	210f      	movs	r1, #15
    3f80:	200e      	movs	r0, #14
    3f82:	f7ff fc2f 	bl	37e4 <mp_parse_node_new_leaf>
    3f86:	61b8      	str	r0, [r7, #24]
    3f88:	e00d      	b.n	3fa6 <fold_logical_constants+0x132>
        } else if (mp_parse_node_is_const_true(pn)) {
    3f8a:	69b8      	ldr	r0, [r7, #24]
    3f8c:	f7ff fd79 	bl	3a82 <mp_parse_node_is_const_true>
    3f90:	4603      	mov	r3, r0
    3f92:	2b00      	cmp	r3, #0
    3f94:	d005      	beq.n	3fa2 <fold_logical_constants+0x12e>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    3f96:	210d      	movs	r1, #13
    3f98:	200e      	movs	r0, #14
    3f9a:	f7ff fc23 	bl	37e4 <mp_parse_node_new_leaf>
    3f9e:	61b8      	str	r0, [r7, #24]
    3fa0:	e001      	b.n	3fa6 <fold_logical_constants+0x132>
        } else {
            return false;
    3fa2:	2300      	movs	r3, #0
    3fa4:	e009      	b.n	3fba <fold_logical_constants+0x146>
        }
        pop_result(parser);
    3fa6:	68f8      	ldr	r0, [r7, #12]
    3fa8:	f7ff fe0a 	bl	3bc0 <pop_result>
        push_result_node(parser, pn);
    3fac:	69b9      	ldr	r1, [r7, #24]
    3fae:	68f8      	ldr	r0, [r7, #12]
    3fb0:	f7ff fe54 	bl	3c5c <push_result_node>
        return true;
    3fb4:	2301      	movs	r3, #1
    3fb6:	e000      	b.n	3fba <fold_logical_constants+0x146>
    }

    return false;
    3fb8:	2300      	movs	r3, #0
}
    3fba:	4618      	mov	r0, r3
    3fbc:	3728      	adds	r7, #40	; 0x28
    3fbe:	46bd      	mov	sp, r7
    3fc0:	bd80      	pop	{r7, pc}

00003fc2 <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    3fc2:	b580      	push	{r7, lr}
    3fc4:	b094      	sub	sp, #80	; 0x50
    3fc6:	af00      	add	r7, sp, #0
    3fc8:	60f8      	str	r0, [r7, #12]
    3fca:	460b      	mov	r3, r1
    3fcc:	607a      	str	r2, [r7, #4]
    3fce:	72fb      	strb	r3, [r7, #11]
    // this code does folding of arbitrary integer expressions, eg 1 + 2 * 3 + 4
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
    3fd0:	7afb      	ldrb	r3, [r7, #11]
    3fd2:	2b21      	cmp	r3, #33	; 0x21
    3fd4:	d005      	beq.n	3fe2 <fold_constants+0x20>
        || rule_id == RULE_xor_expr
    3fd6:	7afb      	ldrb	r3, [r7, #11]
    3fd8:	2b22      	cmp	r3, #34	; 0x22
    3fda:	d002      	beq.n	3fe2 <fold_constants+0x20>
        || rule_id == RULE_and_expr) {
    3fdc:	7afb      	ldrb	r3, [r7, #11]
    3fde:	2b23      	cmp	r3, #35	; 0x23
    3fe0:	d149      	bne.n	4076 <fold_constants+0xb4>
        // folding for binary ops: | ^ &
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	3b01      	subs	r3, #1
    3fe6:	4619      	mov	r1, r3
    3fe8:	68f8      	ldr	r0, [r7, #12]
    3fea:	f7ff fe0f 	bl	3c0c <peek_result>
    3fee:	6238      	str	r0, [r7, #32]
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    3ff0:	f107 031c 	add.w	r3, r7, #28
    3ff4:	4619      	mov	r1, r3
    3ff6:	6a38      	ldr	r0, [r7, #32]
    3ff8:	f7ff fd5f 	bl	3aba <mp_parse_node_get_int_maybe>
    3ffc:	4603      	mov	r3, r0
    3ffe:	f083 0301 	eor.w	r3, r3, #1
    4002:	b2db      	uxtb	r3, r3
    4004:	2b00      	cmp	r3, #0
    4006:	d001      	beq.n	400c <fold_constants+0x4a>
            return false;
    4008:	2300      	movs	r3, #0
    400a:	e10a      	b.n	4222 <fold_constants+0x260>
        }
        mp_binary_op_t op;
        if (rule_id == RULE_expr) {
    400c:	7afb      	ldrb	r3, [r7, #11]
    400e:	2b21      	cmp	r3, #33	; 0x21
    4010:	d102      	bne.n	4018 <fold_constants+0x56>
            op = MP_BINARY_OP_OR;
    4012:	2315      	movs	r3, #21
    4014:	64fb      	str	r3, [r7, #76]	; 0x4c
    4016:	e007      	b.n	4028 <fold_constants+0x66>
        } else if (rule_id == RULE_xor_expr) {
    4018:	7afb      	ldrb	r3, [r7, #11]
    401a:	2b22      	cmp	r3, #34	; 0x22
    401c:	d102      	bne.n	4024 <fold_constants+0x62>
            op = MP_BINARY_OP_XOR;
    401e:	2316      	movs	r3, #22
    4020:	64fb      	str	r3, [r7, #76]	; 0x4c
    4022:	e001      	b.n	4028 <fold_constants+0x66>
        } else {
            op = MP_BINARY_OP_AND;
    4024:	2317      	movs	r3, #23
    4026:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    4028:	687b      	ldr	r3, [r7, #4]
    402a:	3b02      	subs	r3, #2
    402c:	64bb      	str	r3, [r7, #72]	; 0x48
    402e:	e01e      	b.n	406e <fold_constants+0xac>
            pn = peek_result(parser, i);
    4030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4032:	4619      	mov	r1, r3
    4034:	68f8      	ldr	r0, [r7, #12]
    4036:	f7ff fde9 	bl	3c0c <peek_result>
    403a:	6238      	str	r0, [r7, #32]
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    403c:	f107 0318 	add.w	r3, r7, #24
    4040:	4619      	mov	r1, r3
    4042:	6a38      	ldr	r0, [r7, #32]
    4044:	f7ff fd39 	bl	3aba <mp_parse_node_get_int_maybe>
    4048:	4603      	mov	r3, r0
    404a:	f083 0301 	eor.w	r3, r3, #1
    404e:	b2db      	uxtb	r3, r3
    4050:	2b00      	cmp	r3, #0
    4052:	d001      	beq.n	4058 <fold_constants+0x96>
                return false;
    4054:	2300      	movs	r3, #0
    4056:	e0e4      	b.n	4222 <fold_constants+0x260>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    4058:	69fb      	ldr	r3, [r7, #28]
    405a:	69ba      	ldr	r2, [r7, #24]
    405c:	4619      	mov	r1, r3
    405e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    4060:	f007 fbd4 	bl	b80c <mp_binary_op>
    4064:	4603      	mov	r3, r0
    4066:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    4068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    406a:	3b01      	subs	r3, #1
    406c:	64bb      	str	r3, [r7, #72]	; 0x48
    406e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4070:	2b00      	cmp	r3, #0
    4072:	dadd      	bge.n	4030 <fold_constants+0x6e>
        || rule_id == RULE_and_expr) {
    4074:	e0ab      	b.n	41ce <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_shift_expr
    4076:	7afb      	ldrb	r3, [r7, #11]
    4078:	2b24      	cmp	r3, #36	; 0x24
    407a:	d005      	beq.n	4088 <fold_constants+0xc6>
        || rule_id == RULE_arith_expr
    407c:	7afb      	ldrb	r3, [r7, #11]
    407e:	2b25      	cmp	r3, #37	; 0x25
    4080:	d002      	beq.n	4088 <fold_constants+0xc6>
        || rule_id == RULE_term) {
    4082:	7afb      	ldrb	r3, [r7, #11]
    4084:	2b26      	cmp	r3, #38	; 0x26
    4086:	d163      	bne.n	4150 <fold_constants+0x18e>
        // folding for binary ops: << >> + - * / % //
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    4088:	687b      	ldr	r3, [r7, #4]
    408a:	3b01      	subs	r3, #1
    408c:	4619      	mov	r1, r3
    408e:	68f8      	ldr	r0, [r7, #12]
    4090:	f7ff fdbc 	bl	3c0c <peek_result>
    4094:	6338      	str	r0, [r7, #48]	; 0x30
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4096:	f107 031c 	add.w	r3, r7, #28
    409a:	4619      	mov	r1, r3
    409c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    409e:	f7ff fd0c 	bl	3aba <mp_parse_node_get_int_maybe>
    40a2:	4603      	mov	r3, r0
    40a4:	f083 0301 	eor.w	r3, r3, #1
    40a8:	b2db      	uxtb	r3, r3
    40aa:	2b00      	cmp	r3, #0
    40ac:	d001      	beq.n	40b2 <fold_constants+0xf0>
            return false;
    40ae:	2300      	movs	r3, #0
    40b0:	e0b7      	b.n	4222 <fold_constants+0x260>
        }
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	3b02      	subs	r3, #2
    40b6:	647b      	str	r3, [r7, #68]	; 0x44
    40b8:	e046      	b.n	4148 <fold_constants+0x186>
            pn = peek_result(parser, i - 1);
    40ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    40bc:	3b01      	subs	r3, #1
    40be:	4619      	mov	r1, r3
    40c0:	68f8      	ldr	r0, [r7, #12]
    40c2:	f7ff fda3 	bl	3c0c <peek_result>
    40c6:	6338      	str	r0, [r7, #48]	; 0x30
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    40c8:	f107 0314 	add.w	r3, r7, #20
    40cc:	4619      	mov	r1, r3
    40ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
    40d0:	f7ff fcf3 	bl	3aba <mp_parse_node_get_int_maybe>
    40d4:	4603      	mov	r3, r0
    40d6:	f083 0301 	eor.w	r3, r3, #1
    40da:	b2db      	uxtb	r3, r3
    40dc:	2b00      	cmp	r3, #0
    40de:	d001      	beq.n	40e4 <fold_constants+0x122>
                return false;
    40e0:	2300      	movs	r3, #0
    40e2:	e09e      	b.n	4222 <fold_constants+0x260>
            }
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    40e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    40e6:	4619      	mov	r1, r3
    40e8:	68f8      	ldr	r0, [r7, #12]
    40ea:	f7ff fd8f 	bl	3c0c <peek_result>
    40ee:	4603      	mov	r3, r0
    40f0:	091b      	lsrs	r3, r3, #4
    40f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                255,//MP_BINARY_OP_LESS
                MP_BINARY_OP_LSHIFT,
                255,//MP_BINARY_OP_MORE
                MP_BINARY_OP_RSHIFT,
            };
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    40f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    40f6:	3b2f      	subs	r3, #47	; 0x2f
    40f8:	4a4c      	ldr	r2, [pc, #304]	; (422c <fold_constants+0x26a>)
    40fa:	5cd3      	ldrb	r3, [r2, r3]
    40fc:	62bb      	str	r3, [r7, #40]	; 0x28
            if (op == (mp_binary_op_t)255) {
    40fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4100:	2bff      	cmp	r3, #255	; 0xff
    4102:	d101      	bne.n	4108 <fold_constants+0x146>
                return false;
    4104:	2300      	movs	r3, #0
    4106:	e08c      	b.n	4222 <fold_constants+0x260>
            }
            int rhs_sign = mp_obj_int_sign(arg1);
    4108:	697b      	ldr	r3, [r7, #20]
    410a:	4618      	mov	r0, r3
    410c:	f00c fa6c 	bl	105e8 <mp_obj_int_sign>
    4110:	6278      	str	r0, [r7, #36]	; 0x24
            if (op <= MP_BINARY_OP_RSHIFT) {
    4112:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4114:	2b19      	cmp	r3, #25
    4116:	d804      	bhi.n	4122 <fold_constants+0x160>
                // << and >> can't have negative rhs
                if (rhs_sign < 0) {
    4118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    411a:	2b00      	cmp	r3, #0
    411c:	da09      	bge.n	4132 <fold_constants+0x170>
                    return false;
    411e:	2300      	movs	r3, #0
    4120:	e07f      	b.n	4222 <fold_constants+0x260>
                }
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    4122:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4124:	2b1c      	cmp	r3, #28
    4126:	d904      	bls.n	4132 <fold_constants+0x170>
                // % and // can't have zero rhs
                if (rhs_sign == 0) {
    4128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    412a:	2b00      	cmp	r3, #0
    412c:	d101      	bne.n	4132 <fold_constants+0x170>
                    return false;
    412e:	2300      	movs	r3, #0
    4130:	e077      	b.n	4222 <fold_constants+0x260>
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    4132:	69fb      	ldr	r3, [r7, #28]
    4134:	697a      	ldr	r2, [r7, #20]
    4136:	4619      	mov	r1, r3
    4138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    413a:	f007 fb67 	bl	b80c <mp_binary_op>
    413e:	4603      	mov	r3, r0
    4140:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    4142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4144:	3b02      	subs	r3, #2
    4146:	647b      	str	r3, [r7, #68]	; 0x44
    4148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    414a:	2b00      	cmp	r3, #0
    414c:	dcb5      	bgt.n	40ba <fold_constants+0xf8>
        || rule_id == RULE_term) {
    414e:	e03e      	b.n	41ce <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_factor_2) {
    4150:	7afb      	ldrb	r3, [r7, #11]
    4152:	2b27      	cmp	r3, #39	; 0x27
    4154:	d139      	bne.n	41ca <fold_constants+0x208>
        // folding for unary ops: + - ~
        mp_parse_node_t pn = peek_result(parser, 0);
    4156:	2100      	movs	r1, #0
    4158:	68f8      	ldr	r0, [r7, #12]
    415a:	f7ff fd57 	bl	3c0c <peek_result>
    415e:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4160:	f107 031c 	add.w	r3, r7, #28
    4164:	4619      	mov	r1, r3
    4166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4168:	f7ff fca7 	bl	3aba <mp_parse_node_get_int_maybe>
    416c:	4603      	mov	r3, r0
    416e:	f083 0301 	eor.w	r3, r3, #1
    4172:	b2db      	uxtb	r3, r3
    4174:	2b00      	cmp	r3, #0
    4176:	d001      	beq.n	417c <fold_constants+0x1ba>
            return false;
    4178:	2300      	movs	r3, #0
    417a:	e052      	b.n	4222 <fold_constants+0x260>
        }
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    417c:	2101      	movs	r1, #1
    417e:	68f8      	ldr	r0, [r7, #12]
    4180:	f7ff fd44 	bl	3c0c <peek_result>
    4184:	4603      	mov	r3, r0
    4186:	091b      	lsrs	r3, r3, #4
    4188:	637b      	str	r3, [r7, #52]	; 0x34
        mp_unary_op_t op;
        if (tok == MP_TOKEN_OP_PLUS) {
    418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    418c:	2b2f      	cmp	r3, #47	; 0x2f
    418e:	d102      	bne.n	4196 <fold_constants+0x1d4>
            op = MP_UNARY_OP_POSITIVE;
    4190:	2300      	movs	r3, #0
    4192:	643b      	str	r3, [r7, #64]	; 0x40
    4194:	e011      	b.n	41ba <fold_constants+0x1f8>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    4196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4198:	2b30      	cmp	r3, #48	; 0x30
    419a:	d102      	bne.n	41a2 <fold_constants+0x1e0>
            op = MP_UNARY_OP_NEGATIVE;
    419c:	2301      	movs	r3, #1
    419e:	643b      	str	r3, [r7, #64]	; 0x40
    41a0:	e00b      	b.n	41ba <fold_constants+0x1f8>
        } else {
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    41a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41a4:	2b3d      	cmp	r3, #61	; 0x3d
    41a6:	d006      	beq.n	41b6 <fold_constants+0x1f4>
    41a8:	4b21      	ldr	r3, [pc, #132]	; (4230 <fold_constants+0x26e>)
    41aa:	4a22      	ldr	r2, [pc, #136]	; (4234 <fold_constants+0x272>)
    41ac:	f240 21b3 	movw	r1, #691	; 0x2b3
    41b0:	4821      	ldr	r0, [pc, #132]	; (4238 <fold_constants+0x276>)
    41b2:	f017 f817 	bl	1b1e4 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    41b6:	2302      	movs	r3, #2
    41b8:	643b      	str	r3, [r7, #64]	; 0x40
        }
        arg0 = mp_unary_op(op, arg0);
    41ba:	69fb      	ldr	r3, [r7, #28]
    41bc:	4619      	mov	r1, r3
    41be:	6c38      	ldr	r0, [r7, #64]	; 0x40
    41c0:	f007 fa3e 	bl	b640 <mp_unary_op>
    41c4:	4603      	mov	r3, r0
    41c6:	61fb      	str	r3, [r7, #28]
    41c8:	e001      	b.n	41ce <fold_constants+0x20c>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    41ca:	2300      	movs	r3, #0
    41cc:	e029      	b.n	4222 <fold_constants+0x260>
    }

    // success folding this rule

    for (size_t i = num_args; i > 0; i--) {
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    41d2:	e005      	b.n	41e0 <fold_constants+0x21e>
        pop_result(parser);
    41d4:	68f8      	ldr	r0, [r7, #12]
    41d6:	f7ff fcf3 	bl	3bc0 <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    41da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    41dc:	3b01      	subs	r3, #1
    41de:	63fb      	str	r3, [r7, #60]	; 0x3c
    41e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    41e2:	2b00      	cmp	r3, #0
    41e4:	d1f6      	bne.n	41d4 <fold_constants+0x212>
    }
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    41e6:	69fb      	ldr	r3, [r7, #28]
    41e8:	4618      	mov	r0, r3
    41ea:	f7ff fac9 	bl	3780 <MP_OBJ_IS_SMALL_INT>
    41ee:	4603      	mov	r3, r0
    41f0:	2b00      	cmp	r3, #0
    41f2:	d00a      	beq.n	420a <fold_constants+0x248>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    41f4:	69fb      	ldr	r3, [r7, #28]
    41f6:	4619      	mov	r1, r3
    41f8:	68f8      	ldr	r0, [r7, #12]
    41fa:	f7ff fd77 	bl	3cec <mp_parse_node_new_small_int_checked>
    41fe:	4603      	mov	r3, r0
    4200:	4619      	mov	r1, r3
    4202:	68f8      	ldr	r0, [r7, #12]
    4204:	f7ff fd2a 	bl	3c5c <push_result_node>
    4208:	e00a      	b.n	4220 <fold_constants+0x25e>
    } else {
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    420a:	69fb      	ldr	r3, [r7, #28]
    420c:	461a      	mov	r2, r3
    420e:	2100      	movs	r1, #0
    4210:	68f8      	ldr	r0, [r7, #12]
    4212:	f7ff fd51 	bl	3cb8 <make_node_const_object>
    4216:	4603      	mov	r3, r0
    4218:	4619      	mov	r1, r3
    421a:	68f8      	ldr	r0, [r7, #12]
    421c:	f7ff fd1e 	bl	3c5c <push_result_node>
    }

    return true;
    4220:	2301      	movs	r3, #1
}
    4222:	4618      	mov	r0, r3
    4224:	3750      	adds	r7, #80	; 0x50
    4226:	46bd      	mov	sp, r7
    4228:	bd80      	pop	{r7, pc}
    422a:	bf00      	nop
    422c:	0001f8d4 	.word	0x0001f8d4
    4230:	0001f784 	.word	0x0001f784
    4234:	0001f8e0 	.word	0x0001f8e0
    4238:	0001f730 	.word	0x0001f730

0000423c <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    423c:	b590      	push	{r4, r7, lr}
    423e:	b089      	sub	sp, #36	; 0x24
    4240:	af00      	add	r7, sp, #0
    4242:	60f8      	str	r0, [r7, #12]
    4244:	60b9      	str	r1, [r7, #8]
    4246:	603b      	str	r3, [r7, #0]
    4248:	4613      	mov	r3, r2
    424a:	71fb      	strb	r3, [r7, #7]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    424c:	79fb      	ldrb	r3, [r7, #7]
    424e:	2b2a      	cmp	r3, #42	; 0x2a
    4250:	d114      	bne.n	427c <push_result_rule+0x40>
        // there should be just 1 arg for this rule
        mp_parse_node_t pn = peek_result(parser, 0);
    4252:	2100      	movs	r1, #0
    4254:	68f8      	ldr	r0, [r7, #12]
    4256:	f7ff fcd9 	bl	3c0c <peek_result>
    425a:	61b8      	str	r0, [r7, #24]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    425c:	69bb      	ldr	r3, [r7, #24]
    425e:	2b00      	cmp	r3, #0
    4260:	d00c      	beq.n	427c <push_result_rule+0x40>
            // need to keep parenthesis for ()
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    4262:	69bb      	ldr	r3, [r7, #24]
    4264:	2b00      	cmp	r3, #0
    4266:	d045      	beq.n	42f4 <push_result_rule+0xb8>
    4268:	69bb      	ldr	r3, [r7, #24]
    426a:	f003 0303 	and.w	r3, r3, #3
    426e:	2b00      	cmp	r3, #0
    4270:	d140      	bne.n	42f4 <push_result_rule+0xb8>
    4272:	69bb      	ldr	r3, [r7, #24]
    4274:	685b      	ldr	r3, [r3, #4]
    4276:	b2db      	uxtb	r3, r3
    4278:	2b8a      	cmp	r3, #138	; 0x8a
    427a:	d13b      	bne.n	42f4 <push_result_rule+0xb8>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    427c:	463a      	mov	r2, r7
    427e:	79fb      	ldrb	r3, [r7, #7]
    4280:	4619      	mov	r1, r3
    4282:	68f8      	ldr	r0, [r7, #12]
    4284:	f7ff fdf6 	bl	3e74 <fold_logical_constants>
    4288:	4603      	mov	r3, r0
    428a:	2b00      	cmp	r3, #0
    428c:	d134      	bne.n	42f8 <push_result_rule+0xbc>
        // we folded this rule so return straight away
        return;
    }
    if (fold_constants(parser, rule_id, num_args)) {
    428e:	683a      	ldr	r2, [r7, #0]
    4290:	79fb      	ldrb	r3, [r7, #7]
    4292:	4619      	mov	r1, r3
    4294:	68f8      	ldr	r0, [r7, #12]
    4296:	f7ff fe94 	bl	3fc2 <fold_constants>
    429a:	4603      	mov	r3, r0
    429c:	2b00      	cmp	r3, #0
    429e:	d12d      	bne.n	42fc <push_result_rule+0xc0>
        // we folded this rule so return straight away
        return;
    }
    #endif

    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    42a0:	683b      	ldr	r3, [r7, #0]
    42a2:	3302      	adds	r3, #2
    42a4:	009b      	lsls	r3, r3, #2
    42a6:	4619      	mov	r1, r3
    42a8:	68f8      	ldr	r0, [r7, #12]
    42aa:	f7ff fac9 	bl	3840 <parser_alloc>
    42ae:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    42b0:	697b      	ldr	r3, [r7, #20]
    42b2:	68ba      	ldr	r2, [r7, #8]
    42b4:	601a      	str	r2, [r3, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    42b6:	79fa      	ldrb	r2, [r7, #7]
    42b8:	683b      	ldr	r3, [r7, #0]
    42ba:	021b      	lsls	r3, r3, #8
    42bc:	431a      	orrs	r2, r3
    42be:	697b      	ldr	r3, [r7, #20]
    42c0:	605a      	str	r2, [r3, #4]
    for (size_t i = num_args; i > 0; i--) {
    42c2:	683b      	ldr	r3, [r7, #0]
    42c4:	61fb      	str	r3, [r7, #28]
    42c6:	e00c      	b.n	42e2 <push_result_rule+0xa6>
        pn->nodes[i - 1] = pop_result(parser);
    42c8:	69fb      	ldr	r3, [r7, #28]
    42ca:	1e5c      	subs	r4, r3, #1
    42cc:	68f8      	ldr	r0, [r7, #12]
    42ce:	f7ff fc77 	bl	3bc0 <pop_result>
    42d2:	4601      	mov	r1, r0
    42d4:	697b      	ldr	r3, [r7, #20]
    42d6:	1ca2      	adds	r2, r4, #2
    42d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    42dc:	69fb      	ldr	r3, [r7, #28]
    42de:	3b01      	subs	r3, #1
    42e0:	61fb      	str	r3, [r7, #28]
    42e2:	69fb      	ldr	r3, [r7, #28]
    42e4:	2b00      	cmp	r3, #0
    42e6:	d1ef      	bne.n	42c8 <push_result_rule+0x8c>
    }
    push_result_node(parser, (mp_parse_node_t)pn);
    42e8:	697b      	ldr	r3, [r7, #20]
    42ea:	4619      	mov	r1, r3
    42ec:	68f8      	ldr	r0, [r7, #12]
    42ee:	f7ff fcb5 	bl	3c5c <push_result_node>
    42f2:	e004      	b.n	42fe <push_result_rule+0xc2>
            return;
    42f4:	bf00      	nop
    42f6:	e002      	b.n	42fe <push_result_rule+0xc2>
        return;
    42f8:	bf00      	nop
    42fa:	e000      	b.n	42fe <push_result_rule+0xc2>
        return;
    42fc:	bf00      	nop
}
    42fe:	3724      	adds	r7, #36	; 0x24
    4300:	46bd      	mov	sp, r7
    4302:	bd90      	pop	{r4, r7, pc}

00004304 <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    4304:	b580      	push	{r7, lr}
    4306:	b0a2      	sub	sp, #136	; 0x88
    4308:	af00      	add	r7, sp, #0
    430a:	60f8      	str	r0, [r7, #12]
    430c:	60b9      	str	r1, [r7, #8]
    430e:	607a      	str	r2, [r7, #4]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    4310:	2340      	movs	r3, #64	; 0x40
    4312:	61fb      	str	r3, [r7, #28]
    parser.rule_stack_top = 0;
    4314:	2300      	movs	r3, #0
    4316:	623b      	str	r3, [r7, #32]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    4318:	69fb      	ldr	r3, [r7, #28]
    431a:	00db      	lsls	r3, r3, #3
    431c:	4618      	mov	r0, r3
    431e:	f7fb fffd 	bl	31c <m_malloc>
    4322:	4603      	mov	r3, r0
    4324:	627b      	str	r3, [r7, #36]	; 0x24

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    4326:	2320      	movs	r3, #32
    4328:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.result_stack_top = 0;
    432a:	2300      	movs	r3, #0
    432c:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4330:	009b      	lsls	r3, r3, #2
    4332:	4618      	mov	r0, r3
    4334:	f7fb fff2 	bl	31c <m_malloc>
    4338:	4603      	mov	r3, r0
    433a:	633b      	str	r3, [r7, #48]	; 0x30

    parser.lexer = lex;
    433c:	68bb      	ldr	r3, [r7, #8]
    433e:	637b      	str	r3, [r7, #52]	; 0x34

    parser.tree.chunk = NULL;
    4340:	2300      	movs	r3, #0
    4342:	63fb      	str	r3, [r7, #60]	; 0x3c
    parser.cur_chunk = NULL;
    4344:	2300      	movs	r3, #0
    4346:	643b      	str	r3, [r7, #64]	; 0x40
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	2b00      	cmp	r3, #0
    434c:	d002      	beq.n	4354 <mp_parse+0x50>
    434e:	2b02      	cmp	r3, #2
    4350:	d004      	beq.n	435c <mp_parse+0x58>
    4352:	e007      	b.n	4364 <mp_parse+0x60>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    4354:	2336      	movs	r3, #54	; 0x36
    4356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    435a:	e006      	b.n	436a <mp_parse+0x66>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    435c:	2338      	movs	r3, #56	; 0x38
    435e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    4362:	e002      	b.n	436a <mp_parse+0x66>
        default: top_level_rule = RULE_file_input;
    4364:	2300      	movs	r3, #0
    4366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    436a:	68bb      	ldr	r3, [r7, #8]
    436c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    436e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    4372:	b2da      	uxtb	r2, r3
    4374:	f107 001c 	add.w	r0, r7, #28
    4378:	2300      	movs	r3, #0
    437a:	f7ff faca 	bl	3912 <push_rule>

    // parse!

    bool backtrack = false;
    437e:	2300      	movs	r3, #0
    4380:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

    for (;;) {
        next_rule:
        if (parser.rule_stack_top == 0) {
    4384:	6a3b      	ldr	r3, [r7, #32]
    4386:	2b00      	cmp	r3, #0
    4388:	d104      	bne.n	4394 <mp_parse+0x90>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    438a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    438c:	2b00      	cmp	r3, #0
    438e:	f040 8292 	bne.w	48b6 <mp_parse+0x5b2>
    4392:	e2a1      	b.n	48d8 <mp_parse+0x5d4>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    4394:	f107 0214 	add.w	r2, r7, #20
    4398:	f107 0118 	add.w	r1, r7, #24
    439c:	f107 031c 	add.w	r3, r7, #28
    43a0:	4618      	mov	r0, r3
    43a2:	f7ff fb23 	bl	39ec <pop_rule>
    43a6:	4603      	mov	r3, r0
    43a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        uint8_t rule_act = rule_act_table[rule_id];
    43ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    43b0:	4ab2      	ldr	r2, [pc, #712]	; (467c <mp_parse+0x378>)
    43b2:	5cd3      	ldrb	r3, [r2, r3]
    43b4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    43b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    43bc:	4618      	mov	r0, r3
    43be:	f7ff fa20 	bl	3802 <get_rule_arg>
    43c2:	6638      	str	r0, [r7, #96]	; 0x60
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    43c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    43c8:	f003 030f 	and.w	r3, r3, #15
    43cc:	65fb      	str	r3, [r7, #92]	; 0x5c
        switch (rule_act & RULE_ACT_KIND_MASK) {
    43ce:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    43d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
    43d6:	2b10      	cmp	r3, #16
    43d8:	d002      	beq.n	43e0 <mp_parse+0xdc>
    43da:	2b20      	cmp	r3, #32
    43dc:	d067      	beq.n	44ae <mp_parse+0x1aa>
    43de:	e1aa      	b.n	4736 <mp_parse+0x432>
                if (i > 0 && !backtrack) {
    43e0:	69bb      	ldr	r3, [r7, #24]
    43e2:	2b00      	cmp	r3, #0
    43e4:	d006      	beq.n	43f4 <mp_parse+0xf0>
    43e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    43ea:	f083 0301 	eor.w	r3, r3, #1
    43ee:	b2db      	uxtb	r3, r3
    43f0:	2b00      	cmp	r3, #0
    43f2:	d1c7      	bne.n	4384 <mp_parse+0x80>
                    backtrack = false;
    43f4:	2300      	movs	r3, #0
    43f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                for (; i < n; ++i) {
    43fa:	e050      	b.n	449e <mp_parse+0x19a>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    43fc:	69bb      	ldr	r3, [r7, #24]
    43fe:	005b      	lsls	r3, r3, #1
    4400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4402:	4413      	add	r3, r2
    4404:	881b      	ldrh	r3, [r3, #0]
    4406:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    440a:	f023 030f 	bic.w	r3, r3, #15
    440e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    if (kind == RULE_ARG_TOK) {
    4412:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    4416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    441a:	d116      	bne.n	444a <mp_parse+0x146>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    441c:	68bb      	ldr	r3, [r7, #8]
    441e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4420:	69bb      	ldr	r3, [r7, #24]
    4422:	005b      	lsls	r3, r3, #1
    4424:	6e39      	ldr	r1, [r7, #96]	; 0x60
    4426:	440b      	add	r3, r1
    4428:	881b      	ldrh	r3, [r3, #0]
    442a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    442e:	429a      	cmp	r2, r3
    4430:	d132      	bne.n	4498 <mp_parse+0x194>
                            push_result_token(&parser, rule_id);
    4432:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4436:	f107 031c 	add.w	r3, r7, #28
    443a:	4611      	mov	r1, r2
    443c:	4618      	mov	r0, r3
    443e:	f7ff fc65 	bl	3d0c <push_result_token>
                            mp_lexer_to_next(lex);
    4442:	68b8      	ldr	r0, [r7, #8]
    4444:	f7fe fe27 	bl	3096 <mp_lexer_to_next>
                            goto next_rule;
    4448:	e79c      	b.n	4384 <mp_parse+0x80>
                        assert(kind == RULE_ARG_RULE);
    444a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    444e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4452:	d006      	beq.n	4462 <mp_parse+0x15e>
    4454:	4b8a      	ldr	r3, [pc, #552]	; (4680 <mp_parse+0x37c>)
    4456:	4a8b      	ldr	r2, [pc, #556]	; (4684 <mp_parse+0x380>)
    4458:	f240 318b 	movw	r1, #907	; 0x38b
    445c:	488a      	ldr	r0, [pc, #552]	; (4688 <mp_parse+0x384>)
    445e:	f016 fec1 	bl	1b1e4 <__assert_func>
                        if (i + 1 < n) {
    4462:	69bb      	ldr	r3, [r7, #24]
    4464:	1c5a      	adds	r2, r3, #1
    4466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4468:	429a      	cmp	r2, r3
    446a:	d208      	bcs.n	447e <mp_parse+0x17a>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    446c:	6979      	ldr	r1, [r7, #20]
    446e:	69bb      	ldr	r3, [r7, #24]
    4470:	3301      	adds	r3, #1
    4472:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4476:	f107 001c 	add.w	r0, r7, #28
    447a:	f7ff fa4a 	bl	3912 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    447e:	69bb      	ldr	r3, [r7, #24]
    4480:	005b      	lsls	r3, r3, #1
    4482:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4484:	4413      	add	r3, r2
    4486:	881b      	ldrh	r3, [r3, #0]
    4488:	461a      	mov	r2, r3
    448a:	f107 031c 	add.w	r3, r7, #28
    448e:	4611      	mov	r1, r2
    4490:	4618      	mov	r0, r3
    4492:	f7ff fa7c 	bl	398e <push_rule_from_arg>
                        goto next_rule;
    4496:	e775      	b.n	4384 <mp_parse+0x80>
                for (; i < n; ++i) {
    4498:	69bb      	ldr	r3, [r7, #24]
    449a:	3301      	adds	r3, #1
    449c:	61bb      	str	r3, [r7, #24]
    449e:	69ba      	ldr	r2, [r7, #24]
    44a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    44a2:	429a      	cmp	r2, r3
    44a4:	d3aa      	bcc.n	43fc <mp_parse+0xf8>
                backtrack = true;
    44a6:	2301      	movs	r3, #1
    44a8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                break;
    44ac:	e202      	b.n	48b4 <mp_parse+0x5b0>
                if (backtrack) {
    44ae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    44b2:	2b00      	cmp	r3, #0
    44b4:	d06c      	beq.n	4590 <mp_parse+0x28c>
                    assert(i > 0);
    44b6:	69bb      	ldr	r3, [r7, #24]
    44b8:	2b00      	cmp	r3, #0
    44ba:	d106      	bne.n	44ca <mp_parse+0x1c6>
    44bc:	4b73      	ldr	r3, [pc, #460]	; (468c <mp_parse+0x388>)
    44be:	4a71      	ldr	r2, [pc, #452]	; (4684 <mp_parse+0x380>)
    44c0:	f240 319a 	movw	r1, #922	; 0x39a
    44c4:	4870      	ldr	r0, [pc, #448]	; (4688 <mp_parse+0x384>)
    44c6:	f016 fe8d 	bl	1b1e4 <__assert_func>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    44ca:	69bb      	ldr	r3, [r7, #24]
    44cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    44d0:	3b01      	subs	r3, #1
    44d2:	005b      	lsls	r3, r3, #1
    44d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    44d6:	4413      	add	r3, r2
    44d8:	881b      	ldrh	r3, [r3, #0]
    44da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    44de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    44e2:	d109      	bne.n	44f8 <mp_parse+0x1f4>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    44e4:	f107 031c 	add.w	r3, r7, #28
    44e8:	2100      	movs	r1, #0
    44ea:	4618      	mov	r0, r3
    44ec:	f7ff fbb6 	bl	3c5c <push_result_node>
                        backtrack = false;
    44f0:	2300      	movs	r3, #0
    44f2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    44f6:	e04b      	b.n	4590 <mp_parse+0x28c>
                        if (i > 1) {
    44f8:	69bb      	ldr	r3, [r7, #24]
    44fa:	2b01      	cmp	r3, #1
    44fc:	f200 81f4 	bhi.w	48e8 <mp_parse+0x5e4>
                            goto next_rule;
    4500:	e740      	b.n	4384 <mp_parse+0x80>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4502:	69bb      	ldr	r3, [r7, #24]
    4504:	005b      	lsls	r3, r3, #1
    4506:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4508:	4413      	add	r3, r2
    450a:	881b      	ldrh	r3, [r3, #0]
    450c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4514:	d123      	bne.n	455e <mp_parse+0x25a>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    4516:	69bb      	ldr	r3, [r7, #24]
    4518:	005b      	lsls	r3, r3, #1
    451a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    451c:	4413      	add	r3, r2
    451e:	881b      	ldrh	r3, [r3, #0]
    4520:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4524:	657b      	str	r3, [r7, #84]	; 0x54
                        if (lex->tok_kind == tok_kind) {
    4526:	68bb      	ldr	r3, [r7, #8]
    4528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    452a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    452c:	429a      	cmp	r2, r3
    452e:	d10e      	bne.n	454e <mp_parse+0x24a>
                            if (tok_kind == MP_TOKEN_NAME) {
    4530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4532:	2b07      	cmp	r3, #7
    4534:	d107      	bne.n	4546 <mp_parse+0x242>
                                push_result_token(&parser, rule_id);
    4536:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    453a:	f107 031c 	add.w	r3, r7, #28
    453e:	4611      	mov	r1, r2
    4540:	4618      	mov	r0, r3
    4542:	f7ff fbe3 	bl	3d0c <push_result_token>
                            mp_lexer_to_next(lex);
    4546:	68b8      	ldr	r0, [r7, #8]
    4548:	f7fe fda5 	bl	3096 <mp_lexer_to_next>
    454c:	e01d      	b.n	458a <mp_parse+0x286>
                            if (i > 0) {
    454e:	69bb      	ldr	r3, [r7, #24]
    4550:	2b00      	cmp	r3, #0
    4552:	f040 81cb 	bne.w	48ec <mp_parse+0x5e8>
                                backtrack = true;
    4556:	2301      	movs	r3, #1
    4558:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto next_rule;
    455c:	e712      	b.n	4384 <mp_parse+0x80>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    455e:	6979      	ldr	r1, [r7, #20]
    4560:	69bb      	ldr	r3, [r7, #24]
    4562:	3301      	adds	r3, #1
    4564:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4568:	f107 001c 	add.w	r0, r7, #28
    456c:	f7ff f9d1 	bl	3912 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    4570:	69bb      	ldr	r3, [r7, #24]
    4572:	005b      	lsls	r3, r3, #1
    4574:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4576:	4413      	add	r3, r2
    4578:	881b      	ldrh	r3, [r3, #0]
    457a:	461a      	mov	r2, r3
    457c:	f107 031c 	add.w	r3, r7, #28
    4580:	4611      	mov	r1, r2
    4582:	4618      	mov	r0, r3
    4584:	f7ff fa03 	bl	398e <push_rule_from_arg>
                        goto next_rule;
    4588:	e6fc      	b.n	4384 <mp_parse+0x80>
                for (; i < n; ++i) {
    458a:	69bb      	ldr	r3, [r7, #24]
    458c:	3301      	adds	r3, #1
    458e:	61bb      	str	r3, [r7, #24]
    4590:	69ba      	ldr	r2, [r7, #24]
    4592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4594:	429a      	cmp	r2, r3
    4596:	d3b4      	bcc.n	4502 <mp_parse+0x1fe>
                assert(i == n);
    4598:	69ba      	ldr	r2, [r7, #24]
    459a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    459c:	429a      	cmp	r2, r3
    459e:	d006      	beq.n	45ae <mp_parse+0x2aa>
    45a0:	4b3b      	ldr	r3, [pc, #236]	; (4690 <mp_parse+0x38c>)
    45a2:	4a38      	ldr	r2, [pc, #224]	; (4684 <mp_parse+0x380>)
    45a4:	f240 31c7 	movw	r1, #967	; 0x3c7
    45a8:	4837      	ldr	r0, [pc, #220]	; (4688 <mp_parse+0x384>)
    45aa:	f016 fe1b 	bl	1b1e4 <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    45ae:	687b      	ldr	r3, [r7, #4]
    45b0:	2b00      	cmp	r3, #0
    45b2:	d03c      	beq.n	462e <mp_parse+0x32a>
    45b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    45b8:	2b05      	cmp	r3, #5
    45ba:	d138      	bne.n	462e <mp_parse+0x32a>
    45bc:	f107 031c 	add.w	r3, r7, #28
    45c0:	2100      	movs	r1, #0
    45c2:	4618      	mov	r0, r3
    45c4:	f7ff fb22 	bl	3c0c <peek_result>
    45c8:	4603      	mov	r3, r0
    45ca:	2b00      	cmp	r3, #0
    45cc:	d12f      	bne.n	462e <mp_parse+0x32a>
                    mp_parse_node_t p = peek_result(&parser, 1);
    45ce:	f107 031c 	add.w	r3, r7, #28
    45d2:	2101      	movs	r1, #1
    45d4:	4618      	mov	r0, r3
    45d6:	f7ff fb19 	bl	3c0c <peek_result>
    45da:	6538      	str	r0, [r7, #80]	; 0x50
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    45dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45de:	f003 0303 	and.w	r3, r3, #3
    45e2:	2b00      	cmp	r3, #0
    45e4:	d004      	beq.n	45f0 <mp_parse+0x2ec>
    45e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45e8:	f003 030f 	and.w	r3, r3, #15
    45ec:	2b02      	cmp	r3, #2
    45ee:	d10c      	bne.n	460a <mp_parse+0x306>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    45f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45f2:	2b00      	cmp	r3, #0
    45f4:	d01b      	beq.n	462e <mp_parse+0x32a>
    45f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45f8:	f003 0303 	and.w	r3, r3, #3
    45fc:	2b00      	cmp	r3, #0
    45fe:	d116      	bne.n	462e <mp_parse+0x32a>
    4600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4602:	685b      	ldr	r3, [r3, #4]
    4604:	b2db      	uxtb	r3, r3
    4606:	2b35      	cmp	r3, #53	; 0x35
    4608:	d111      	bne.n	462e <mp_parse+0x32a>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    460a:	f107 031c 	add.w	r3, r7, #28
    460e:	4618      	mov	r0, r3
    4610:	f7ff fad6 	bl	3bc0 <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    4614:	f107 031c 	add.w	r3, r7, #28
    4618:	4618      	mov	r0, r3
    461a:	f7ff fad1 	bl	3bc0 <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    461e:	6979      	ldr	r1, [r7, #20]
    4620:	f107 001c 	add.w	r0, r7, #28
    4624:	2300      	movs	r3, #0
    4626:	2208      	movs	r2, #8
    4628:	f7ff fe08 	bl	423c <push_result_rule>
                        break;
    462c:	e142      	b.n	48b4 <mp_parse+0x5b0>
                i = 0;
    462e:	2300      	movs	r3, #0
    4630:	61bb      	str	r3, [r7, #24]
                size_t num_not_nil = 0;
    4632:	2300      	movs	r3, #0
    4634:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (size_t x = n; x > 0;) {
    4636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4638:	67bb      	str	r3, [r7, #120]	; 0x78
    463a:	e03b      	b.n	46b4 <mp_parse+0x3b0>
                    --x;
    463c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    463e:	3b01      	subs	r3, #1
    4640:	67bb      	str	r3, [r7, #120]	; 0x78
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4644:	005b      	lsls	r3, r3, #1
    4646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4648:	4413      	add	r3, r2
    464a:	881b      	ldrh	r3, [r3, #0]
    464c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4654:	d11e      	bne.n	4694 <mp_parse+0x390>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    4656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4658:	005b      	lsls	r3, r3, #1
    465a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    465c:	4413      	add	r3, r2
    465e:	881b      	ldrh	r3, [r3, #0]
    4660:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4664:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (tok_kind == MP_TOKEN_NAME) {
    4666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4668:	2b07      	cmp	r3, #7
    466a:	d123      	bne.n	46b4 <mp_parse+0x3b0>
                            i += 1;
    466c:	69bb      	ldr	r3, [r7, #24]
    466e:	3301      	adds	r3, #1
    4670:	61bb      	str	r3, [r7, #24]
                            num_not_nil += 1;
    4672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4674:	3301      	adds	r3, #1
    4676:	67fb      	str	r3, [r7, #124]	; 0x7c
    4678:	e01c      	b.n	46b4 <mp_parse+0x3b0>
    467a:	bf00      	nop
    467c:	0001f240 	.word	0x0001f240
    4680:	0001f7a0 	.word	0x0001f7a0
    4684:	0001f8f0 	.word	0x0001f8f0
    4688:	0001f730 	.word	0x0001f730
    468c:	0001f7b8 	.word	0x0001f7b8
    4690:	0001f7c0 	.word	0x0001f7c0
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    4694:	69ba      	ldr	r2, [r7, #24]
    4696:	f107 031c 	add.w	r3, r7, #28
    469a:	4611      	mov	r1, r2
    469c:	4618      	mov	r0, r3
    469e:	f7ff fab5 	bl	3c0c <peek_result>
    46a2:	4603      	mov	r3, r0
    46a4:	2b00      	cmp	r3, #0
    46a6:	d002      	beq.n	46ae <mp_parse+0x3aa>
                            num_not_nil += 1;
    46a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    46aa:	3301      	adds	r3, #1
    46ac:	67fb      	str	r3, [r7, #124]	; 0x7c
                        i += 1;
    46ae:	69bb      	ldr	r3, [r7, #24]
    46b0:	3301      	adds	r3, #1
    46b2:	61bb      	str	r3, [r7, #24]
                for (size_t x = n; x > 0;) {
    46b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    46b6:	2b00      	cmp	r3, #0
    46b8:	d1c0      	bne.n	463c <mp_parse+0x338>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    46ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    46bc:	2b01      	cmp	r3, #1
    46be:	d124      	bne.n	470a <mp_parse+0x406>
    46c0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    46c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    46c8:	2b00      	cmp	r3, #0
    46ca:	d01e      	beq.n	470a <mp_parse+0x406>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    46cc:	2300      	movs	r3, #0
    46ce:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    46d0:	2300      	movs	r3, #0
    46d2:	673b      	str	r3, [r7, #112]	; 0x70
    46d4:	e00d      	b.n	46f2 <mp_parse+0x3ee>
                        mp_parse_node_t pn2 = pop_result(&parser);
    46d6:	f107 031c 	add.w	r3, r7, #28
    46da:	4618      	mov	r0, r3
    46dc:	f7ff fa70 	bl	3bc0 <pop_result>
    46e0:	64b8      	str	r0, [r7, #72]	; 0x48
                        if (pn2 != MP_PARSE_NODE_NULL) {
    46e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46e4:	2b00      	cmp	r3, #0
    46e6:	d001      	beq.n	46ec <mp_parse+0x3e8>
                            pn = pn2;
    46e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46ea:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    46ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    46ee:	3301      	adds	r3, #1
    46f0:	673b      	str	r3, [r7, #112]	; 0x70
    46f2:	69bb      	ldr	r3, [r7, #24]
    46f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    46f6:	429a      	cmp	r2, r3
    46f8:	d3ed      	bcc.n	46d6 <mp_parse+0x3d2>
                    push_result_node(&parser, pn);
    46fa:	f107 031c 	add.w	r3, r7, #28
    46fe:	6f79      	ldr	r1, [r7, #116]	; 0x74
    4700:	4618      	mov	r0, r3
    4702:	f7ff faab 	bl	3c5c <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    4706:	bf00      	nop
                break;
    4708:	e0d4      	b.n	48b4 <mp_parse+0x5b0>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    470a:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
    470e:	2b00      	cmp	r3, #0
    4710:	da08      	bge.n	4724 <mp_parse+0x420>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    4712:	f107 031c 	add.w	r3, r7, #28
    4716:	2100      	movs	r1, #0
    4718:	4618      	mov	r0, r3
    471a:	f7ff fa9f 	bl	3c5c <push_result_node>
                        i += 1;
    471e:	69bb      	ldr	r3, [r7, #24]
    4720:	3301      	adds	r3, #1
    4722:	61bb      	str	r3, [r7, #24]
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    4724:	6979      	ldr	r1, [r7, #20]
    4726:	69bb      	ldr	r3, [r7, #24]
    4728:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    472c:	f107 001c 	add.w	r0, r7, #28
    4730:	f7ff fd84 	bl	423c <push_result_rule>
                break;
    4734:	e0be      	b.n	48b4 <mp_parse+0x5b0>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    4736:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    473a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    473e:	2b30      	cmp	r3, #48	; 0x30
    4740:	d006      	beq.n	4750 <mp_parse+0x44c>
    4742:	4b90      	ldr	r3, [pc, #576]	; (4984 <mp_parse+0x680>)
    4744:	4a90      	ldr	r2, [pc, #576]	; (4988 <mp_parse+0x684>)
    4746:	f240 410a 	movw	r1, #1034	; 0x40a
    474a:	4890      	ldr	r0, [pc, #576]	; (498c <mp_parse+0x688>)
    474c:	f016 fd4a 	bl	1b1e4 <__assert_func>
                if (backtrack) {
    4750:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4754:	2b00      	cmp	r3, #0
    4756:	d025      	beq.n	47a4 <mp_parse+0x4a0>
                    had_trailing_sep = false;
    4758:	2300      	movs	r3, #0
    475a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    if (n == 2) {
    475e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4760:	2b02      	cmp	r3, #2
    4762:	d107      	bne.n	4774 <mp_parse+0x470>
                        if (i == 1) {
    4764:	69bb      	ldr	r3, [r7, #24]
    4766:	2b01      	cmp	r3, #1
    4768:	d100      	bne.n	476c <mp_parse+0x468>
                            goto next_rule;
    476a:	e60b      	b.n	4384 <mp_parse+0x80>
                            backtrack = false;
    476c:	2300      	movs	r3, #0
    476e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4772:	e068      	b.n	4846 <mp_parse+0x542>
                        if (i == 1) {
    4774:	69bb      	ldr	r3, [r7, #24]
    4776:	2b01      	cmp	r3, #1
    4778:	d100      	bne.n	477c <mp_parse+0x478>
                            goto next_rule;
    477a:	e603      	b.n	4384 <mp_parse+0x80>
                        } else if ((i & 1) == 1) {
    477c:	69bb      	ldr	r3, [r7, #24]
    477e:	f003 0301 	and.w	r3, r3, #1
    4782:	2b00      	cmp	r3, #0
    4784:	d00a      	beq.n	479c <mp_parse+0x498>
                            if (n == 3) {
    4786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4788:	2b03      	cmp	r3, #3
    478a:	f040 80b1 	bne.w	48f0 <mp_parse+0x5ec>
                                had_trailing_sep = true;
    478e:	2301      	movs	r3, #1
    4790:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                backtrack = false;
    4794:	2300      	movs	r3, #0
    4796:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    479a:	e054      	b.n	4846 <mp_parse+0x542>
                            backtrack = false;
    479c:	2300      	movs	r3, #0
    479e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47a2:	e050      	b.n	4846 <mp_parse+0x542>
                        size_t arg = rule_arg[i & 1 & n];
    47a4:	69ba      	ldr	r2, [r7, #24]
    47a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47a8:	4013      	ands	r3, r2
    47aa:	f003 0301 	and.w	r3, r3, #1
    47ae:	005b      	lsls	r3, r3, #1
    47b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    47b2:	4413      	add	r3, r2
    47b4:	881b      	ldrh	r3, [r3, #0]
    47b6:	647b      	str	r3, [r7, #68]	; 0x44
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    47b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    47ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    47be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    47c2:	d123      	bne.n	480c <mp_parse+0x508>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    47c4:	68bb      	ldr	r3, [r7, #8]
    47c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    47c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    47ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    47ce:	429a      	cmp	r2, r3
    47d0:	d115      	bne.n	47fe <mp_parse+0x4fa>
                                if (i & 1 & n) {
    47d2:	69ba      	ldr	r2, [r7, #24]
    47d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47d6:	4013      	ands	r3, r2
    47d8:	f003 0301 	and.w	r3, r3, #1
    47dc:	2b00      	cmp	r3, #0
    47de:	d107      	bne.n	47f0 <mp_parse+0x4ec>
                                    push_result_token(&parser, rule_id);
    47e0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    47e4:	f107 031c 	add.w	r3, r7, #28
    47e8:	4611      	mov	r1, r2
    47ea:	4618      	mov	r0, r3
    47ec:	f7ff fa8e 	bl	3d0c <push_result_token>
                                mp_lexer_to_next(lex);
    47f0:	68b8      	ldr	r0, [r7, #8]
    47f2:	f7fe fc50 	bl	3096 <mp_lexer_to_next>
                                i += 1;
    47f6:	69bb      	ldr	r3, [r7, #24]
    47f8:	3301      	adds	r3, #1
    47fa:	61bb      	str	r3, [r7, #24]
    47fc:	e7d2      	b.n	47a4 <mp_parse+0x4a0>
                                i += 1;
    47fe:	69bb      	ldr	r3, [r7, #24]
    4800:	3301      	adds	r3, #1
    4802:	61bb      	str	r3, [r7, #24]
                                backtrack = true;
    4804:	2301      	movs	r3, #1
    4806:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto list_backtrack;
    480a:	e7a5      	b.n	4758 <mp_parse+0x454>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    480c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    480e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4816:	d006      	beq.n	4826 <mp_parse+0x522>
    4818:	4b5d      	ldr	r3, [pc, #372]	; (4990 <mp_parse+0x68c>)
    481a:	4a5b      	ldr	r2, [pc, #364]	; (4988 <mp_parse+0x684>)
    481c:	f240 4142 	movw	r1, #1090	; 0x442
    4820:	485a      	ldr	r0, [pc, #360]	; (498c <mp_parse+0x688>)
    4822:	f016 fcdf 	bl	1b1e4 <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    4826:	6979      	ldr	r1, [r7, #20]
    4828:	69bb      	ldr	r3, [r7, #24]
    482a:	3301      	adds	r3, #1
    482c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4830:	f107 001c 	add.w	r0, r7, #28
    4834:	f7ff f86d 	bl	3912 <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    4838:	f107 031c 	add.w	r3, r7, #28
    483c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    483e:	4618      	mov	r0, r3
    4840:	f7ff f8a5 	bl	398e <push_rule_from_arg>
                            goto next_rule;
    4844:	e59e      	b.n	4384 <mp_parse+0x80>
                assert(i >= 1);
    4846:	69bb      	ldr	r3, [r7, #24]
    4848:	2b00      	cmp	r3, #0
    484a:	d106      	bne.n	485a <mp_parse+0x556>
    484c:	4b51      	ldr	r3, [pc, #324]	; (4994 <mp_parse+0x690>)
    484e:	4a4e      	ldr	r2, [pc, #312]	; (4988 <mp_parse+0x684>)
    4850:	f240 4149 	movw	r1, #1097	; 0x449
    4854:	484d      	ldr	r0, [pc, #308]	; (498c <mp_parse+0x688>)
    4856:	f016 fcc5 	bl	1b1e4 <__assert_func>
                i -= 1;
    485a:	69bb      	ldr	r3, [r7, #24]
    485c:	3b01      	subs	r3, #1
    485e:	61bb      	str	r3, [r7, #24]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4862:	f003 0301 	and.w	r3, r3, #1
    4866:	2b00      	cmp	r3, #0
    4868:	d00b      	beq.n	4882 <mp_parse+0x57e>
    486a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    486c:	3302      	adds	r3, #2
    486e:	881b      	ldrh	r3, [r3, #0]
    4870:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4878:	d103      	bne.n	4882 <mp_parse+0x57e>
                    i = (i + 1) / 2;
    487a:	69bb      	ldr	r3, [r7, #24]
    487c:	3301      	adds	r3, #1
    487e:	085b      	lsrs	r3, r3, #1
    4880:	61bb      	str	r3, [r7, #24]
                if (i == 1) {
    4882:	69bb      	ldr	r3, [r7, #24]
    4884:	2b01      	cmp	r3, #1
    4886:	d10c      	bne.n	48a2 <mp_parse+0x59e>
                    if (had_trailing_sep) {
    4888:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    488c:	2b00      	cmp	r3, #0
    488e:	d010      	beq.n	48b2 <mp_parse+0x5ae>
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    4890:	6979      	ldr	r1, [r7, #20]
    4892:	69bb      	ldr	r3, [r7, #24]
    4894:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4898:	f107 001c 	add.w	r0, r7, #28
    489c:	f7ff fcce 	bl	423c <push_result_rule>
                break;
    48a0:	e007      	b.n	48b2 <mp_parse+0x5ae>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    48a2:	6979      	ldr	r1, [r7, #20]
    48a4:	69bb      	ldr	r3, [r7, #24]
    48a6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48aa:	f107 001c 	add.w	r0, r7, #28
    48ae:	f7ff fcc5 	bl	423c <push_result_rule>
                break;
    48b2:	bf00      	nop
    for (;;) {
    48b4:	e566      	b.n	4384 <mp_parse+0x80>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    48b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    48b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48ba:	685b      	ldr	r3, [r3, #4]
    48bc:	3308      	adds	r3, #8
    48be:	2200      	movs	r2, #0
    48c0:	4619      	mov	r1, r3
    48c2:	f7fb fd76 	bl	3b2 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    48c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    48ca:	6852      	ldr	r2, [r2, #4]
    48cc:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    48ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    48d2:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    48d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    48d8:	68bb      	ldr	r3, [r7, #8]
    48da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (
    48dc:	2b00      	cmp	r3, #0
    48de:	d108      	bne.n	48f2 <mp_parse+0x5ee>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    48e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    48e2:	2b00      	cmp	r3, #0
    48e4:	d129      	bne.n	493a <mp_parse+0x636>
    48e6:	e004      	b.n	48f2 <mp_parse+0x5ee>
                            goto syntax_error;
    48e8:	bf00      	nop
    48ea:	e002      	b.n	48f2 <mp_parse+0x5ee>
                                goto syntax_error;
    48ec:	bf00      	nop
    48ee:	e000      	b.n	48f2 <mp_parse+0x5ee>
                                goto syntax_error;
    48f0:	bf00      	nop
        ) {
    syntax_error:;
        mp_obj_t exc;
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    48f2:	68bb      	ldr	r3, [r7, #8]
    48f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48f6:	2b05      	cmp	r3, #5
    48f8:	d105      	bne.n	4906 <mp_parse+0x602>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    48fa:	4927      	ldr	r1, [pc, #156]	; (4998 <mp_parse+0x694>)
    48fc:	4827      	ldr	r0, [pc, #156]	; (499c <mp_parse+0x698>)
    48fe:	f00a fd1f 	bl	f340 <mp_obj_new_exception_msg>
    4902:	66b8      	str	r0, [r7, #104]	; 0x68
    4904:	e00e      	b.n	4924 <mp_parse+0x620>
                "unexpected indent");
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    4906:	68bb      	ldr	r3, [r7, #8]
    4908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    490a:	2b02      	cmp	r3, #2
    490c:	d105      	bne.n	491a <mp_parse+0x616>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    490e:	4924      	ldr	r1, [pc, #144]	; (49a0 <mp_parse+0x69c>)
    4910:	4822      	ldr	r0, [pc, #136]	; (499c <mp_parse+0x698>)
    4912:	f00a fd15 	bl	f340 <mp_obj_new_exception_msg>
    4916:	66b8      	str	r0, [r7, #104]	; 0x68
    4918:	e004      	b.n	4924 <mp_parse+0x620>
                "unindent does not match any outer indentation level");
        } else {
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    491a:	4922      	ldr	r1, [pc, #136]	; (49a4 <mp_parse+0x6a0>)
    491c:	4822      	ldr	r0, [pc, #136]	; (49a8 <mp_parse+0x6a4>)
    491e:	f00a fd0f 	bl	f340 <mp_obj_new_exception_msg>
    4922:	66b8      	str	r0, [r7, #104]	; 0x68
                "invalid syntax");
        }
        // add traceback to give info about file name and location
        // we don't have a 'block' name, so just pass the NULL qstr to indicate this
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    4924:	68bb      	ldr	r3, [r7, #8]
    4926:	6819      	ldr	r1, [r3, #0]
    4928:	68bb      	ldr	r3, [r7, #8]
    492a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    492c:	2300      	movs	r3, #0
    492e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4930:	f00a fe82 	bl	f638 <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    4934:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4936:	f7fb fcd3 	bl	2e0 <nlr_jump>
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    493c:	2b01      	cmp	r3, #1
    493e:	d006      	beq.n	494e <mp_parse+0x64a>
    4940:	4b1a      	ldr	r3, [pc, #104]	; (49ac <mp_parse+0x6a8>)
    4942:	4a11      	ldr	r2, [pc, #68]	; (4988 <mp_parse+0x684>)
    4944:	f44f 6191 	mov.w	r1, #1160	; 0x488
    4948:	4810      	ldr	r0, [pc, #64]	; (498c <mp_parse+0x688>)
    494a:	f016 fc4b 	bl	1b1e4 <__assert_func>
    parser.tree.root = parser.result_stack[0];
    494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4950:	681b      	ldr	r3, [r3, #0]
    4952:	63bb      	str	r3, [r7, #56]	; 0x38

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    4954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4956:	4618      	mov	r0, r3
    4958:	f7fb fd3e 	bl	3d8 <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    495e:	4618      	mov	r0, r3
    4960:	f7fb fd3a 	bl	3d8 <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    4964:	68b8      	ldr	r0, [r7, #8]
    4966:	f7fe feed 	bl	3744 <mp_lexer_free>

    return parser.tree;
    496a:	68fb      	ldr	r3, [r7, #12]
    496c:	461a      	mov	r2, r3
    496e:	f107 0338 	add.w	r3, r7, #56	; 0x38
    4972:	e893 0003 	ldmia.w	r3, {r0, r1}
    4976:	e882 0003 	stmia.w	r2, {r0, r1}
}
    497a:	68f8      	ldr	r0, [r7, #12]
    497c:	3788      	adds	r7, #136	; 0x88
    497e:	46bd      	mov	sp, r7
    4980:	bd80      	pop	{r7, pc}
    4982:	bf00      	nop
    4984:	0001f7c8 	.word	0x0001f7c8
    4988:	0001f8f0 	.word	0x0001f8f0
    498c:	0001f730 	.word	0x0001f730
    4990:	0001f7fc 	.word	0x0001f7fc
    4994:	0001f828 	.word	0x0001f828
    4998:	0001f830 	.word	0x0001f830
    499c:	00021de0 	.word	0x00021de0
    49a0:	0001f844 	.word	0x0001f844
    49a4:	0001f878 	.word	0x0001f878
    49a8:	00021da4 	.word	0x00021da4
    49ac:	0001f888 	.word	0x0001f888

000049b0 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    49b0:	b580      	push	{r7, lr}
    49b2:	b084      	sub	sp, #16
    49b4:	af00      	add	r7, sp, #0
    49b6:	6078      	str	r0, [r7, #4]
    mp_parse_chunk_t *chunk = tree->chunk;
    49b8:	687b      	ldr	r3, [r7, #4]
    49ba:	685b      	ldr	r3, [r3, #4]
    49bc:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    49be:	e007      	b.n	49d0 <mp_parse_tree_clear+0x20>
        mp_parse_chunk_t *next = chunk->union_.next;
    49c0:	68fb      	ldr	r3, [r7, #12]
    49c2:	685b      	ldr	r3, [r3, #4]
    49c4:	60bb      	str	r3, [r7, #8]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    49c6:	68f8      	ldr	r0, [r7, #12]
    49c8:	f7fb fd06 	bl	3d8 <m_free>
        chunk = next;
    49cc:	68bb      	ldr	r3, [r7, #8]
    49ce:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    49d0:	68fb      	ldr	r3, [r7, #12]
    49d2:	2b00      	cmp	r3, #0
    49d4:	d1f4      	bne.n	49c0 <mp_parse_tree_clear+0x10>
    }
}
    49d6:	bf00      	nop
    49d8:	3710      	adds	r7, #16
    49da:	46bd      	mov	sp, r7
    49dc:	bd80      	pop	{r7, pc}
    49de:	bf00      	nop

000049e0 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    49e0:	b580      	push	{r7, lr}
    49e2:	b086      	sub	sp, #24
    49e4:	af00      	add	r7, sp, #0
    49e6:	60f8      	str	r0, [r7, #12]
    49e8:	60b9      	str	r1, [r7, #8]
    49ea:	607a      	str	r2, [r7, #4]
    49ec:	603b      	str	r3, [r7, #0]
    scope_t *scope = m_new0(scope_t, 1);
    49ee:	2030      	movs	r0, #48	; 0x30
    49f0:	f7fb fcb9 	bl	366 <m_malloc0>
    49f4:	6178      	str	r0, [r7, #20]
    scope->kind = kind;
    49f6:	697b      	ldr	r3, [r7, #20]
    49f8:	68fa      	ldr	r2, [r7, #12]
    49fa:	601a      	str	r2, [r3, #0]
    scope->pn = pn;
    49fc:	697b      	ldr	r3, [r7, #20]
    49fe:	68ba      	ldr	r2, [r7, #8]
    4a00:	60da      	str	r2, [r3, #12]
    scope->source_file = source_file;
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	b29a      	uxth	r2, r3
    4a06:	697b      	ldr	r3, [r7, #20]
    4a08:	821a      	strh	r2, [r3, #16]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    4a0a:	68fb      	ldr	r3, [r7, #12]
    4a0c:	2b07      	cmp	r3, #7
    4a0e:	d002      	beq.n	4a16 <scope_new+0x36>
    4a10:	68fb      	ldr	r3, [r7, #12]
    4a12:	2b01      	cmp	r3, #1
    4a14:	d114      	bne.n	4a40 <scope_new+0x60>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4a16:	68bb      	ldr	r3, [r7, #8]
    4a18:	2b00      	cmp	r3, #0
    4a1a:	d004      	beq.n	4a26 <scope_new+0x46>
    4a1c:	68bb      	ldr	r3, [r7, #8]
    4a1e:	f003 0303 	and.w	r3, r3, #3
    4a22:	2b00      	cmp	r3, #0
    4a24:	d005      	beq.n	4a32 <scope_new+0x52>
    4a26:	4b17      	ldr	r3, [pc, #92]	; (4a84 <scope_new+0xa4>)
    4a28:	4a17      	ldr	r2, [pc, #92]	; (4a88 <scope_new+0xa8>)
    4a2a:	2131      	movs	r1, #49	; 0x31
    4a2c:	4817      	ldr	r0, [pc, #92]	; (4a8c <scope_new+0xac>)
    4a2e:	f016 fbd9 	bl	1b1e4 <__assert_func>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4a32:	68bb      	ldr	r3, [r7, #8]
    4a34:	689b      	ldr	r3, [r3, #8]
    4a36:	091b      	lsrs	r3, r3, #4
    4a38:	b29a      	uxth	r2, r3
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	825a      	strh	r2, [r3, #18]
    4a3e:	e006      	b.n	4a4e <scope_new+0x6e>
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4a40:	4a13      	ldr	r2, [pc, #76]	; (4a90 <scope_new+0xb0>)
    4a42:	68fb      	ldr	r3, [r7, #12]
    4a44:	4413      	add	r3, r2
    4a46:	781b      	ldrb	r3, [r3, #0]
    4a48:	b29a      	uxth	r2, r3
    4a4a:	697b      	ldr	r3, [r7, #20]
    4a4c:	825a      	strh	r2, [r3, #18]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4a4e:	f006 fb57 	bl	b100 <mp_emit_glue_new_raw_code>
    4a52:	4602      	mov	r2, r0
    4a54:	697b      	ldr	r3, [r7, #20]
    4a56:	615a      	str	r2, [r3, #20]
    scope->emit_options = emit_options;
    4a58:	683b      	ldr	r3, [r7, #0]
    4a5a:	b2da      	uxtb	r2, r3
    4a5c:	697b      	ldr	r3, [r7, #20]
    4a5e:	765a      	strb	r2, [r3, #25]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4a60:	697b      	ldr	r3, [r7, #20]
    4a62:	2204      	movs	r2, #4
    4a64:	84da      	strh	r2, [r3, #38]	; 0x26
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4a66:	697b      	ldr	r3, [r7, #20]
    4a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4a6a:	00db      	lsls	r3, r3, #3
    4a6c:	4618      	mov	r0, r3
    4a6e:	f7fb fc55 	bl	31c <m_malloc>
    4a72:	4602      	mov	r2, r0
    4a74:	697b      	ldr	r3, [r7, #20]
    4a76:	62da      	str	r2, [r3, #44]	; 0x2c

    return scope;
    4a78:	697b      	ldr	r3, [r7, #20]
}
    4a7a:	4618      	mov	r0, r3
    4a7c:	3718      	adds	r7, #24
    4a7e:	46bd      	mov	sp, r7
    4a80:	bd80      	pop	{r7, pc}
    4a82:	bf00      	nop
    4a84:	0001f904 	.word	0x0001f904
    4a88:	0001f9a0 	.word	0x0001f9a0
    4a8c:	0001f920 	.word	0x0001f920
    4a90:	0001f8fc 	.word	0x0001f8fc

00004a94 <scope_free>:

void scope_free(scope_t *scope) {
    4a94:	b580      	push	{r7, lr}
    4a96:	b082      	sub	sp, #8
    4a98:	af00      	add	r7, sp, #0
    4a9a:	6078      	str	r0, [r7, #4]
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4aa0:	4618      	mov	r0, r3
    4aa2:	f7fb fc99 	bl	3d8 <m_free>
    m_del(scope_t, scope, 1);
    4aa6:	6878      	ldr	r0, [r7, #4]
    4aa8:	f7fb fc96 	bl	3d8 <m_free>
}
    4aac:	bf00      	nop
    4aae:	3708      	adds	r7, #8
    4ab0:	46bd      	mov	sp, r7
    4ab2:	bd80      	pop	{r7, pc}

00004ab4 <scope_find_or_add_id>:

id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, bool *added) {
    4ab4:	b580      	push	{r7, lr}
    4ab6:	b086      	sub	sp, #24
    4ab8:	af00      	add	r7, sp, #0
    4aba:	60f8      	str	r0, [r7, #12]
    4abc:	60b9      	str	r1, [r7, #8]
    4abe:	607a      	str	r2, [r7, #4]
    id_info_t *id_info = scope_find(scope, qst);
    4ac0:	68b9      	ldr	r1, [r7, #8]
    4ac2:	68f8      	ldr	r0, [r7, #12]
    4ac4:	f000 f841 	bl	4b4a <scope_find>
    4ac8:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    4aca:	697b      	ldr	r3, [r7, #20]
    4acc:	2b00      	cmp	r3, #0
    4ace:	d004      	beq.n	4ada <scope_find_or_add_id+0x26>
        *added = false;
    4ad0:	687b      	ldr	r3, [r7, #4]
    4ad2:	2200      	movs	r2, #0
    4ad4:	701a      	strb	r2, [r3, #0]
        return id_info;
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	e033      	b.n	4b42 <scope_find_or_add_id+0x8e>
    }

    // make sure we have enough memory
    if (scope->id_info_len >= scope->id_info_alloc) {
    4ada:	68fb      	ldr	r3, [r7, #12]
    4adc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    4ade:	68fb      	ldr	r3, [r7, #12]
    4ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4ae2:	429a      	cmp	r2, r3
    4ae4:	d312      	bcc.n	4b0c <scope_find_or_add_id+0x58>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4ae6:	68fb      	ldr	r3, [r7, #12]
    4ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4aea:	68fb      	ldr	r3, [r7, #12]
    4aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4aee:	3306      	adds	r3, #6
    4af0:	00db      	lsls	r3, r3, #3
    4af2:	4619      	mov	r1, r3
    4af4:	4610      	mov	r0, r2
    4af6:	f7fb fc43 	bl	380 <m_realloc>
    4afa:	4602      	mov	r2, r0
    4afc:	68fb      	ldr	r3, [r7, #12]
    4afe:	62da      	str	r2, [r3, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4b00:	68fb      	ldr	r3, [r7, #12]
    4b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b04:	3306      	adds	r3, #6
    4b06:	b29a      	uxth	r2, r3
    4b08:	68fb      	ldr	r3, [r7, #12]
    4b0a:	84da      	strh	r2, [r3, #38]	; 0x26
    }

    // add new id to end of array of all ids; this seems to match CPython
    // important thing is that function arguments are first, but that is
    // handled by the compiler because it adds arguments before compiling the body
    id_info = &scope->id_info[scope->id_info_len++];
    4b0c:	68fb      	ldr	r3, [r7, #12]
    4b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b10:	68fb      	ldr	r3, [r7, #12]
    4b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b14:	1c59      	adds	r1, r3, #1
    4b16:	b288      	uxth	r0, r1
    4b18:	68f9      	ldr	r1, [r7, #12]
    4b1a:	8508      	strh	r0, [r1, #40]	; 0x28
    4b1c:	00db      	lsls	r3, r3, #3
    4b1e:	4413      	add	r3, r2
    4b20:	617b      	str	r3, [r7, #20]

    id_info->kind = 0;
    4b22:	697b      	ldr	r3, [r7, #20]
    4b24:	2200      	movs	r2, #0
    4b26:	701a      	strb	r2, [r3, #0]
    id_info->flags = 0;
    4b28:	697b      	ldr	r3, [r7, #20]
    4b2a:	2200      	movs	r2, #0
    4b2c:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4b2e:	697b      	ldr	r3, [r7, #20]
    4b30:	2200      	movs	r2, #0
    4b32:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4b34:	697b      	ldr	r3, [r7, #20]
    4b36:	68ba      	ldr	r2, [r7, #8]
    4b38:	605a      	str	r2, [r3, #4]
    *added = true;
    4b3a:	687b      	ldr	r3, [r7, #4]
    4b3c:	2201      	movs	r2, #1
    4b3e:	701a      	strb	r2, [r3, #0]
    return id_info;
    4b40:	697b      	ldr	r3, [r7, #20]
}
    4b42:	4618      	mov	r0, r3
    4b44:	3718      	adds	r7, #24
    4b46:	46bd      	mov	sp, r7
    4b48:	bd80      	pop	{r7, pc}

00004b4a <scope_find>:

id_info_t *scope_find(scope_t *scope, qstr qst) {
    4b4a:	b480      	push	{r7}
    4b4c:	b085      	sub	sp, #20
    4b4e:	af00      	add	r7, sp, #0
    4b50:	6078      	str	r0, [r7, #4]
    4b52:	6039      	str	r1, [r7, #0]
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4b54:	2300      	movs	r3, #0
    4b56:	60fb      	str	r3, [r7, #12]
    4b58:	e011      	b.n	4b7e <scope_find+0x34>
        if (scope->id_info[i].qst == qst) {
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b5e:	68fb      	ldr	r3, [r7, #12]
    4b60:	00db      	lsls	r3, r3, #3
    4b62:	4413      	add	r3, r2
    4b64:	685a      	ldr	r2, [r3, #4]
    4b66:	683b      	ldr	r3, [r7, #0]
    4b68:	429a      	cmp	r2, r3
    4b6a:	d105      	bne.n	4b78 <scope_find+0x2e>
            return &scope->id_info[i];
    4b6c:	687b      	ldr	r3, [r7, #4]
    4b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b70:	68fb      	ldr	r3, [r7, #12]
    4b72:	00db      	lsls	r3, r3, #3
    4b74:	4413      	add	r3, r2
    4b76:	e009      	b.n	4b8c <scope_find+0x42>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4b78:	68fb      	ldr	r3, [r7, #12]
    4b7a:	3301      	adds	r3, #1
    4b7c:	60fb      	str	r3, [r7, #12]
    4b7e:	687b      	ldr	r3, [r7, #4]
    4b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b82:	461a      	mov	r2, r3
    4b84:	68fb      	ldr	r3, [r7, #12]
    4b86:	429a      	cmp	r2, r3
    4b88:	d8e7      	bhi.n	4b5a <scope_find+0x10>
        }
    }
    return NULL;
    4b8a:	2300      	movs	r3, #0
}
    4b8c:	4618      	mov	r0, r3
    4b8e:	3714      	adds	r7, #20
    4b90:	46bd      	mov	sp, r7
    4b92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b96:	4770      	bx	lr

00004b98 <scope_find_global>:

id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4b98:	b580      	push	{r7, lr}
    4b9a:	b082      	sub	sp, #8
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
    4ba0:	6039      	str	r1, [r7, #0]
    while (scope->parent != NULL) {
    4ba2:	e002      	b.n	4baa <scope_find_global+0x12>
        scope = scope->parent;
    4ba4:	687b      	ldr	r3, [r7, #4]
    4ba6:	685b      	ldr	r3, [r3, #4]
    4ba8:	607b      	str	r3, [r7, #4]
    while (scope->parent != NULL) {
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	685b      	ldr	r3, [r3, #4]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d1f8      	bne.n	4ba4 <scope_find_global+0xc>
    }
    return scope_find(scope, qst);
    4bb2:	6839      	ldr	r1, [r7, #0]
    4bb4:	6878      	ldr	r0, [r7, #4]
    4bb6:	f7ff ffc8 	bl	4b4a <scope_find>
    4bba:	4603      	mov	r3, r0
}
    4bbc:	4618      	mov	r0, r3
    4bbe:	3708      	adds	r7, #8
    4bc0:	46bd      	mov	sp, r7
    4bc2:	bd80      	pop	{r7, pc}

00004bc4 <scope_close_over_in_parents>:

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4bc4:	b580      	push	{r7, lr}
    4bc6:	b086      	sub	sp, #24
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
    4bcc:	6039      	str	r1, [r7, #0]
    assert(scope->parent != NULL); // we should have at least 1 parent
    4bce:	687b      	ldr	r3, [r7, #4]
    4bd0:	685b      	ldr	r3, [r3, #4]
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d105      	bne.n	4be2 <scope_close_over_in_parents+0x1e>
    4bd6:	4b1f      	ldr	r3, [pc, #124]	; (4c54 <scope_close_over_in_parents+0x90>)
    4bd8:	4a1f      	ldr	r2, [pc, #124]	; (4c58 <scope_close_over_in_parents+0x94>)
    4bda:	216e      	movs	r1, #110	; 0x6e
    4bdc:	481f      	ldr	r0, [pc, #124]	; (4c5c <scope_close_over_in_parents+0x98>)
    4bde:	f016 fb01 	bl	1b1e4 <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	685b      	ldr	r3, [r3, #4]
    4be6:	617b      	str	r3, [r7, #20]
        assert(s->parent != NULL); // we should not get to the outer scope
    4be8:	697b      	ldr	r3, [r7, #20]
    4bea:	685b      	ldr	r3, [r3, #4]
    4bec:	2b00      	cmp	r3, #0
    4bee:	d105      	bne.n	4bfc <scope_close_over_in_parents+0x38>
    4bf0:	4b1b      	ldr	r3, [pc, #108]	; (4c60 <scope_close_over_in_parents+0x9c>)
    4bf2:	4a19      	ldr	r2, [pc, #100]	; (4c58 <scope_close_over_in_parents+0x94>)
    4bf4:	2170      	movs	r1, #112	; 0x70
    4bf6:	4819      	ldr	r0, [pc, #100]	; (4c5c <scope_close_over_in_parents+0x98>)
    4bf8:	f016 faf4 	bl	1b1e4 <__assert_func>
        bool added;
        id_info_t *id = scope_find_or_add_id(s, qst, &added);
    4bfc:	f107 030f 	add.w	r3, r7, #15
    4c00:	461a      	mov	r2, r3
    4c02:	6839      	ldr	r1, [r7, #0]
    4c04:	6978      	ldr	r0, [r7, #20]
    4c06:	f7ff ff55 	bl	4ab4 <scope_find_or_add_id>
    4c0a:	6138      	str	r0, [r7, #16]
        if (added) {
    4c0c:	7bfb      	ldrb	r3, [r7, #15]
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d006      	beq.n	4c20 <scope_close_over_in_parents+0x5c>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4c12:	693b      	ldr	r3, [r7, #16]
    4c14:	2204      	movs	r2, #4
    4c16:	701a      	strb	r2, [r3, #0]
    for (scope_t *s = scope->parent;; s = s->parent) {
    4c18:	697b      	ldr	r3, [r7, #20]
    4c1a:	685b      	ldr	r3, [r3, #4]
    4c1c:	617b      	str	r3, [r7, #20]
    4c1e:	e7e3      	b.n	4be8 <scope_close_over_in_parents+0x24>
        } else {
            // variable is declared in this scope, so finish
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4c20:	693b      	ldr	r3, [r7, #16]
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	2b02      	cmp	r3, #2
    4c26:	d103      	bne.n	4c30 <scope_close_over_in_parents+0x6c>
                // variable local to this scope, close it over
                id->kind = ID_INFO_KIND_CELL;
    4c28:	693b      	ldr	r3, [r7, #16]
    4c2a:	2203      	movs	r2, #3
    4c2c:	701a      	strb	r2, [r3, #0]
            } else {
                // ID_INFO_KIND_FREE: variable already closed over in a parent scope
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
            }
            return;
    4c2e:	e00d      	b.n	4c4c <scope_close_over_in_parents+0x88>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4c30:	693b      	ldr	r3, [r7, #16]
    4c32:	781b      	ldrb	r3, [r3, #0]
    4c34:	2b04      	cmp	r3, #4
    4c36:	d009      	beq.n	4c4c <scope_close_over_in_parents+0x88>
    4c38:	693b      	ldr	r3, [r7, #16]
    4c3a:	781b      	ldrb	r3, [r3, #0]
    4c3c:	2b03      	cmp	r3, #3
    4c3e:	d005      	beq.n	4c4c <scope_close_over_in_parents+0x88>
    4c40:	4b08      	ldr	r3, [pc, #32]	; (4c64 <scope_close_over_in_parents+0xa0>)
    4c42:	4a05      	ldr	r2, [pc, #20]	; (4c58 <scope_close_over_in_parents+0x94>)
    4c44:	217e      	movs	r1, #126	; 0x7e
    4c46:	4805      	ldr	r0, [pc, #20]	; (4c5c <scope_close_over_in_parents+0x98>)
    4c48:	f016 facc 	bl	1b1e4 <__assert_func>
            return;
    4c4c:	bf00      	nop
        }
    }
}
    4c4e:	3718      	adds	r7, #24
    4c50:	46bd      	mov	sp, r7
    4c52:	bd80      	pop	{r7, pc}
    4c54:	0001f934 	.word	0x0001f934
    4c58:	0001f9ac 	.word	0x0001f9ac
    4c5c:	0001f920 	.word	0x0001f920
    4c60:	0001f94c 	.word	0x0001f94c
    4c64:	0001f960 	.word	0x0001f960

00004c68 <scope_find_local_and_close_over>:

void scope_find_local_and_close_over(scope_t *scope, id_info_t *id, qstr qst) {
    4c68:	b580      	push	{r7, lr}
    4c6a:	b086      	sub	sp, #24
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	60f8      	str	r0, [r7, #12]
    4c70:	60b9      	str	r1, [r7, #8]
    4c72:	607a      	str	r2, [r7, #4]
    if (scope->parent != NULL) {
    4c74:	68fb      	ldr	r3, [r7, #12]
    4c76:	685b      	ldr	r3, [r3, #4]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d028      	beq.n	4cce <scope_find_local_and_close_over+0x66>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4c7c:	68fb      	ldr	r3, [r7, #12]
    4c7e:	685b      	ldr	r3, [r3, #4]
    4c80:	617b      	str	r3, [r7, #20]
    4c82:	e01e      	b.n	4cc2 <scope_find_local_and_close_over+0x5a>
            id_info_t *id2 = scope_find(s, qst);
    4c84:	6879      	ldr	r1, [r7, #4]
    4c86:	6978      	ldr	r0, [r7, #20]
    4c88:	f7ff ff5f 	bl	4b4a <scope_find>
    4c8c:	6138      	str	r0, [r7, #16]
            if (id2 != NULL) {
    4c8e:	693b      	ldr	r3, [r7, #16]
    4c90:	2b00      	cmp	r3, #0
    4c92:	d013      	beq.n	4cbc <scope_find_local_and_close_over+0x54>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4c94:	693b      	ldr	r3, [r7, #16]
    4c96:	781b      	ldrb	r3, [r3, #0]
    4c98:	2b02      	cmp	r3, #2
    4c9a:	d007      	beq.n	4cac <scope_find_local_and_close_over+0x44>
    4c9c:	693b      	ldr	r3, [r7, #16]
    4c9e:	781b      	ldrb	r3, [r3, #0]
    4ca0:	2b03      	cmp	r3, #3
    4ca2:	d003      	beq.n	4cac <scope_find_local_and_close_over+0x44>
    4ca4:	693b      	ldr	r3, [r7, #16]
    4ca6:	781b      	ldrb	r3, [r3, #0]
    4ca8:	2b04      	cmp	r3, #4
    4caa:	d10f      	bne.n	4ccc <scope_find_local_and_close_over+0x64>
                    id->kind = ID_INFO_KIND_FREE;
    4cac:	68bb      	ldr	r3, [r7, #8]
    4cae:	2204      	movs	r2, #4
    4cb0:	701a      	strb	r2, [r3, #0]
                    scope_close_over_in_parents(scope, qst);
    4cb2:	6879      	ldr	r1, [r7, #4]
    4cb4:	68f8      	ldr	r0, [r7, #12]
    4cb6:	f7ff ff85 	bl	4bc4 <scope_close_over_in_parents>
                    return;
    4cba:	e00b      	b.n	4cd4 <scope_find_local_and_close_over+0x6c>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4cbc:	697b      	ldr	r3, [r7, #20]
    4cbe:	685b      	ldr	r3, [r3, #4]
    4cc0:	617b      	str	r3, [r7, #20]
    4cc2:	697b      	ldr	r3, [r7, #20]
    4cc4:	685b      	ldr	r3, [r3, #4]
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d1dc      	bne.n	4c84 <scope_find_local_and_close_over+0x1c>
    4cca:	e000      	b.n	4cce <scope_find_local_and_close_over+0x66>
                }
                break;
    4ccc:	bf00      	nop
            }
        }
    }
    id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    4cce:	68bb      	ldr	r3, [r7, #8]
    4cd0:	2200      	movs	r2, #0
    4cd2:	701a      	strb	r2, [r3, #0]
}
    4cd4:	3718      	adds	r7, #24
    4cd6:	46bd      	mov	sp, r7
    4cd8:	bd80      	pop	{r7, pc}
    4cda:	bf00      	nop

00004cdc <mp_parse_node_new_small_int>:
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    4cdc:	b480      	push	{r7}
    4cde:	b083      	sub	sp, #12
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    4ce4:	687b      	ldr	r3, [r7, #4]
    4ce6:	005b      	lsls	r3, r3, #1
    4ce8:	f043 0301 	orr.w	r3, r3, #1
}
    4cec:	4618      	mov	r0, r3
    4cee:	370c      	adds	r7, #12
    4cf0:	46bd      	mov	sp, r7
    4cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cf6:	4770      	bx	lr

00004cf8 <mp_local_free>:

#if !MICROPY_ENABLE_PYSTACK

#define mp_local_alloc(n_bytes) alloca(n_bytes)

static inline void mp_local_free(void *ptr) {
    4cf8:	b480      	push	{r7}
    4cfa:	b083      	sub	sp, #12
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	6078      	str	r0, [r7, #4]
    (void)ptr;
}
    4d00:	bf00      	nop
    4d02:	370c      	adds	r7, #12
    4d04:	46bd      	mov	sp, r7
    4d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d0a:	4770      	bx	lr

00004d0c <compile_error_set_line>:
    emit_inline_asm_t *emit_inline_asm;                                   // current emitter for inline asm
    const emit_inline_asm_method_table_t *emit_inline_asm_method_table;   // current emit method table for inline asm
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    4d0c:	b480      	push	{r7}
    4d0e:	b083      	sub	sp, #12
    4d10:	af00      	add	r7, sp, #0
    4d12:	6078      	str	r0, [r7, #4]
    4d14:	6039      	str	r1, [r7, #0]
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    4d16:	687b      	ldr	r3, [r7, #4]
    4d18:	68db      	ldr	r3, [r3, #12]
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d10b      	bne.n	4d36 <compile_error_set_line+0x2a>
    4d1e:	683b      	ldr	r3, [r7, #0]
    4d20:	2b00      	cmp	r3, #0
    4d22:	d008      	beq.n	4d36 <compile_error_set_line+0x2a>
    4d24:	683b      	ldr	r3, [r7, #0]
    4d26:	f003 0303 	and.w	r3, r3, #3
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d103      	bne.n	4d36 <compile_error_set_line+0x2a>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    4d2e:	683b      	ldr	r3, [r7, #0]
    4d30:	681a      	ldr	r2, [r3, #0]
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	60da      	str	r2, [r3, #12]
    }
}
    4d36:	bf00      	nop
    4d38:	370c      	adds	r7, #12
    4d3a:	46bd      	mov	sp, r7
    4d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d40:	4770      	bx	lr

00004d42 <compile_syntax_error>:

STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    4d42:	b580      	push	{r7, lr}
    4d44:	b084      	sub	sp, #16
    4d46:	af00      	add	r7, sp, #0
    4d48:	60f8      	str	r0, [r7, #12]
    4d4a:	60b9      	str	r1, [r7, #8]
    4d4c:	607a      	str	r2, [r7, #4]
    // only register the error if there has been no other error
    if (comp->compile_error == MP_OBJ_NULL) {
    4d4e:	68fb      	ldr	r3, [r7, #12]
    4d50:	689b      	ldr	r3, [r3, #8]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d10a      	bne.n	4d6c <compile_syntax_error+0x2a>
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    4d56:	6879      	ldr	r1, [r7, #4]
    4d58:	4806      	ldr	r0, [pc, #24]	; (4d74 <compile_syntax_error+0x32>)
    4d5a:	f00a faf1 	bl	f340 <mp_obj_new_exception_msg>
    4d5e:	4602      	mov	r2, r0
    4d60:	68fb      	ldr	r3, [r7, #12]
    4d62:	609a      	str	r2, [r3, #8]
        compile_error_set_line(comp, pn);
    4d64:	68b9      	ldr	r1, [r7, #8]
    4d66:	68f8      	ldr	r0, [r7, #12]
    4d68:	f7ff ffd0 	bl	4d0c <compile_error_set_line>
    }
}
    4d6c:	bf00      	nop
    4d6e:	3710      	adds	r7, #16
    4d70:	46bd      	mov	sp, r7
    4d72:	bd80      	pop	{r7, pc}
    4d74:	00021da4 	.word	0x00021da4

00004d78 <comp_next_label>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    4d78:	b480      	push	{r7}
    4d7a:	b083      	sub	sp, #12
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    return comp->next_label++;
    4d80:	687b      	ldr	r3, [r7, #4]
    4d82:	691b      	ldr	r3, [r3, #16]
    4d84:	1c59      	adds	r1, r3, #1
    4d86:	687a      	ldr	r2, [r7, #4]
    4d88:	6111      	str	r1, [r2, #16]
}
    4d8a:	4618      	mov	r0, r3
    4d8c:	370c      	adds	r7, #12
    4d8e:	46bd      	mov	sp, r7
    4d90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d94:	4770      	bx	lr

00004d96 <compile_increase_except_level>:

STATIC void compile_increase_except_level(compiler_t *comp) {
    4d96:	b480      	push	{r7}
    4d98:	b083      	sub	sp, #12
    4d9a:	af00      	add	r7, sp, #0
    4d9c:	6078      	str	r0, [r7, #4]
    comp->cur_except_level += 1;
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	8b9b      	ldrh	r3, [r3, #28]
    4da2:	3301      	adds	r3, #1
    4da4:	b29a      	uxth	r2, r3
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	839a      	strh	r2, [r3, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	8b9a      	ldrh	r2, [r3, #28]
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4db2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4db4:	429a      	cmp	r2, r3
    4db6:	d904      	bls.n	4dc2 <compile_increase_except_level+0x2c>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4dbc:	687a      	ldr	r2, [r7, #4]
    4dbe:	8b92      	ldrh	r2, [r2, #28]
    4dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    }
}
    4dc2:	bf00      	nop
    4dc4:	370c      	adds	r7, #12
    4dc6:	46bd      	mov	sp, r7
    4dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dcc:	4770      	bx	lr

00004dce <compile_decrease_except_level>:

STATIC void compile_decrease_except_level(compiler_t *comp) {
    4dce:	b580      	push	{r7, lr}
    4dd0:	b082      	sub	sp, #8
    4dd2:	af00      	add	r7, sp, #0
    4dd4:	6078      	str	r0, [r7, #4]
    assert(comp->cur_except_level > 0);
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	8b9b      	ldrh	r3, [r3, #28]
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d105      	bne.n	4dea <compile_decrease_except_level+0x1c>
    4dde:	4b08      	ldr	r3, [pc, #32]	; (4e00 <compile_decrease_except_level+0x32>)
    4de0:	4a08      	ldr	r2, [pc, #32]	; (4e04 <compile_decrease_except_level+0x36>)
    4de2:	21b5      	movs	r1, #181	; 0xb5
    4de4:	4808      	ldr	r0, [pc, #32]	; (4e08 <compile_decrease_except_level+0x3a>)
    4de6:	f016 f9fd 	bl	1b1e4 <__assert_func>
    comp->cur_except_level -= 1;
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	8b9b      	ldrh	r3, [r3, #28]
    4dee:	3b01      	subs	r3, #1
    4df0:	b29a      	uxth	r2, r3
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	839a      	strh	r2, [r3, #28]
}
    4df6:	bf00      	nop
    4df8:	3708      	adds	r7, #8
    4dfa:	46bd      	mov	sp, r7
    4dfc:	bd80      	pop	{r7, pc}
    4dfe:	bf00      	nop
    4e00:	0001f9c8 	.word	0x0001f9c8
    4e04:	0002055c 	.word	0x0002055c
    4e08:	0001f9e4 	.word	0x0001f9e4

00004e0c <scope_new_and_link>:

STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    4e0c:	b580      	push	{r7, lr}
    4e0e:	b086      	sub	sp, #24
    4e10:	af00      	add	r7, sp, #0
    4e12:	60f8      	str	r0, [r7, #12]
    4e14:	60b9      	str	r1, [r7, #8]
    4e16:	607a      	str	r2, [r7, #4]
    4e18:	603b      	str	r3, [r7, #0]
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    4e1a:	68fb      	ldr	r3, [r7, #12]
    4e1c:	681a      	ldr	r2, [r3, #0]
    4e1e:	683b      	ldr	r3, [r7, #0]
    4e20:	6879      	ldr	r1, [r7, #4]
    4e22:	68b8      	ldr	r0, [r7, #8]
    4e24:	f7ff fddc 	bl	49e0 <scope_new>
    4e28:	6138      	str	r0, [r7, #16]
    scope->parent = comp->scope_cur;
    4e2a:	68fb      	ldr	r3, [r7, #12]
    4e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4e2e:	693b      	ldr	r3, [r7, #16]
    4e30:	605a      	str	r2, [r3, #4]
    scope->next = NULL;
    4e32:	693b      	ldr	r3, [r7, #16]
    4e34:	2200      	movs	r2, #0
    4e36:	609a      	str	r2, [r3, #8]
    if (comp->scope_head == NULL) {
    4e38:	68fb      	ldr	r3, [r7, #12]
    4e3a:	6a1b      	ldr	r3, [r3, #32]
    4e3c:	2b00      	cmp	r3, #0
    4e3e:	d103      	bne.n	4e48 <scope_new_and_link+0x3c>
        comp->scope_head = scope;
    4e40:	68fb      	ldr	r3, [r7, #12]
    4e42:	693a      	ldr	r2, [r7, #16]
    4e44:	621a      	str	r2, [r3, #32]
    4e46:	e00d      	b.n	4e64 <scope_new_and_link+0x58>
    } else {
        scope_t *s = comp->scope_head;
    4e48:	68fb      	ldr	r3, [r7, #12]
    4e4a:	6a1b      	ldr	r3, [r3, #32]
    4e4c:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4e4e:	e002      	b.n	4e56 <scope_new_and_link+0x4a>
            s = s->next;
    4e50:	697b      	ldr	r3, [r7, #20]
    4e52:	689b      	ldr	r3, [r3, #8]
    4e54:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4e56:	697b      	ldr	r3, [r7, #20]
    4e58:	689b      	ldr	r3, [r3, #8]
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d1f8      	bne.n	4e50 <scope_new_and_link+0x44>
        }
        s->next = scope;
    4e5e:	697b      	ldr	r3, [r7, #20]
    4e60:	693a      	ldr	r2, [r7, #16]
    4e62:	609a      	str	r2, [r3, #8]
    }
    return scope;
    4e64:	693b      	ldr	r3, [r7, #16]
}
    4e66:	4618      	mov	r0, r3
    4e68:	3718      	adds	r7, #24
    4e6a:	46bd      	mov	sp, r7
    4e6c:	bd80      	pop	{r7, pc}

00004e6e <apply_to_single_or_list>:

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    4e6e:	b580      	push	{r7, lr}
    4e70:	b088      	sub	sp, #32
    4e72:	af00      	add	r7, sp, #0
    4e74:	60f8      	str	r0, [r7, #12]
    4e76:	60b9      	str	r1, [r7, #8]
    4e78:	607a      	str	r2, [r7, #4]
    4e7a:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4e7c:	68bb      	ldr	r3, [r7, #8]
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d024      	beq.n	4ecc <apply_to_single_or_list+0x5e>
    4e82:	68bb      	ldr	r3, [r7, #8]
    4e84:	f003 0303 	and.w	r3, r3, #3
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d11f      	bne.n	4ecc <apply_to_single_or_list+0x5e>
    4e8c:	68bb      	ldr	r3, [r7, #8]
    4e8e:	685b      	ldr	r3, [r3, #4]
    4e90:	b2da      	uxtb	r2, r3
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	429a      	cmp	r2, r3
    4e96:	d119      	bne.n	4ecc <apply_to_single_or_list+0x5e>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    4e98:	68bb      	ldr	r3, [r7, #8]
    4e9a:	61bb      	str	r3, [r7, #24]
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4e9c:	69bb      	ldr	r3, [r7, #24]
    4e9e:	685b      	ldr	r3, [r3, #4]
    4ea0:	0a1b      	lsrs	r3, r3, #8
    4ea2:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < num_nodes; i++) {
    4ea4:	2300      	movs	r3, #0
    4ea6:	61fb      	str	r3, [r7, #28]
    4ea8:	e00b      	b.n	4ec2 <apply_to_single_or_list+0x54>
            f(comp, pns->nodes[i]);
    4eaa:	69bb      	ldr	r3, [r7, #24]
    4eac:	69fa      	ldr	r2, [r7, #28]
    4eae:	3202      	adds	r2, #2
    4eb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4eb4:	683b      	ldr	r3, [r7, #0]
    4eb6:	4611      	mov	r1, r2
    4eb8:	68f8      	ldr	r0, [r7, #12]
    4eba:	4798      	blx	r3
        for (int i = 0; i < num_nodes; i++) {
    4ebc:	69fb      	ldr	r3, [r7, #28]
    4ebe:	3301      	adds	r3, #1
    4ec0:	61fb      	str	r3, [r7, #28]
    4ec2:	69fa      	ldr	r2, [r7, #28]
    4ec4:	697b      	ldr	r3, [r7, #20]
    4ec6:	429a      	cmp	r2, r3
    4ec8:	dbef      	blt.n	4eaa <apply_to_single_or_list+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4eca:	e007      	b.n	4edc <apply_to_single_or_list+0x6e>
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    4ecc:	68bb      	ldr	r3, [r7, #8]
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d004      	beq.n	4edc <apply_to_single_or_list+0x6e>
        f(comp, pn);
    4ed2:	683b      	ldr	r3, [r7, #0]
    4ed4:	68b9      	ldr	r1, [r7, #8]
    4ed6:	68f8      	ldr	r0, [r7, #12]
    4ed8:	4798      	blx	r3
    }
}
    4eda:	e7ff      	b.n	4edc <apply_to_single_or_list+0x6e>
    4edc:	bf00      	nop
    4ede:	3720      	adds	r7, #32
    4ee0:	46bd      	mov	sp, r7
    4ee2:	bd80      	pop	{r7, pc}

00004ee4 <compile_generic_all_nodes>:

STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    4ee4:	b580      	push	{r7, lr}
    4ee6:	b084      	sub	sp, #16
    4ee8:	af00      	add	r7, sp, #0
    4eea:	6078      	str	r0, [r7, #4]
    4eec:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4eee:	683b      	ldr	r3, [r7, #0]
    4ef0:	685b      	ldr	r3, [r3, #4]
    4ef2:	0a1b      	lsrs	r3, r3, #8
    4ef4:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < num_nodes; i++) {
    4ef6:	2300      	movs	r3, #0
    4ef8:	60fb      	str	r3, [r7, #12]
    4efa:	e019      	b.n	4f30 <compile_generic_all_nodes+0x4c>
        compile_node(comp, pns->nodes[i]);
    4efc:	683b      	ldr	r3, [r7, #0]
    4efe:	68fa      	ldr	r2, [r7, #12]
    4f00:	3202      	adds	r2, #2
    4f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f06:	4619      	mov	r1, r3
    4f08:	6878      	ldr	r0, [r7, #4]
    4f0a:	f003 fd1a 	bl	8942 <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	689b      	ldr	r3, [r3, #8]
    4f12:	2b00      	cmp	r3, #0
    4f14:	d009      	beq.n	4f2a <compile_generic_all_nodes+0x46>
            // add line info for the error in case it didn't have a line number
            compile_error_set_line(comp, pns->nodes[i]);
    4f16:	683b      	ldr	r3, [r7, #0]
    4f18:	68fa      	ldr	r2, [r7, #12]
    4f1a:	3202      	adds	r2, #2
    4f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f20:	4619      	mov	r1, r3
    4f22:	6878      	ldr	r0, [r7, #4]
    4f24:	f7ff fef2 	bl	4d0c <compile_error_set_line>
            return;
    4f28:	e006      	b.n	4f38 <compile_generic_all_nodes+0x54>
    for (int i = 0; i < num_nodes; i++) {
    4f2a:	68fb      	ldr	r3, [r7, #12]
    4f2c:	3301      	adds	r3, #1
    4f2e:	60fb      	str	r3, [r7, #12]
    4f30:	68fa      	ldr	r2, [r7, #12]
    4f32:	68bb      	ldr	r3, [r7, #8]
    4f34:	429a      	cmp	r2, r3
    4f36:	dbe1      	blt.n	4efc <compile_generic_all_nodes+0x18>
        }
    }
}
    4f38:	3710      	adds	r7, #16
    4f3a:	46bd      	mov	sp, r7
    4f3c:	bd80      	pop	{r7, pc}

00004f3e <compile_load_id>:

STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    4f3e:	b580      	push	{r7, lr}
    4f40:	b082      	sub	sp, #8
    4f42:	af00      	add	r7, sp, #0
    4f44:	6078      	str	r0, [r7, #4]
    4f46:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	795b      	ldrb	r3, [r3, #5]
    4f4c:	2b01      	cmp	r3, #1
    4f4e:	d106      	bne.n	4f5e <compile_load_id+0x20>
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    4f50:	687b      	ldr	r3, [r7, #4]
    4f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f54:	6839      	ldr	r1, [r7, #0]
    4f56:	4618      	mov	r0, r3
    4f58:	f004 fbf6 	bl	9748 <mp_emit_common_get_id_for_load>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->load_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4f5c:	e007      	b.n	4f6e <compile_load_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    4f5e:	687b      	ldr	r3, [r7, #4]
    4f60:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f66:	683b      	ldr	r3, [r7, #0]
    4f68:	4903      	ldr	r1, [pc, #12]	; (4f78 <compile_load_id+0x3a>)
    4f6a:	f004 fc31 	bl	97d0 <mp_emit_common_id_op>
}
    4f6e:	bf00      	nop
    4f70:	3708      	adds	r7, #8
    4f72:	46bd      	mov	sp, r7
    4f74:	bd80      	pop	{r7, pc}
    4f76:	bf00      	nop
    4f78:	00020a70 	.word	0x00020a70

00004f7c <compile_store_id>:

STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    4f7c:	b580      	push	{r7, lr}
    4f7e:	b082      	sub	sp, #8
    4f80:	af00      	add	r7, sp, #0
    4f82:	6078      	str	r0, [r7, #4]
    4f84:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4f86:	687b      	ldr	r3, [r7, #4]
    4f88:	795b      	ldrb	r3, [r3, #5]
    4f8a:	2b01      	cmp	r3, #1
    4f8c:	d106      	bne.n	4f9c <compile_store_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f92:	6839      	ldr	r1, [r7, #0]
    4f94:	4618      	mov	r0, r3
    4f96:	f004 fbf0 	bl	977a <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->store_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4f9a:	e007      	b.n	4fac <compile_store_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4fa0:	687b      	ldr	r3, [r7, #4]
    4fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4fa4:	683b      	ldr	r3, [r7, #0]
    4fa6:	4903      	ldr	r1, [pc, #12]	; (4fb4 <compile_store_id+0x38>)
    4fa8:	f004 fc12 	bl	97d0 <mp_emit_common_id_op>
}
    4fac:	bf00      	nop
    4fae:	3708      	adds	r7, #8
    4fb0:	46bd      	mov	sp, r7
    4fb2:	bd80      	pop	{r7, pc}
    4fb4:	00020a78 	.word	0x00020a78

00004fb8 <compile_delete_id>:

STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    4fb8:	b580      	push	{r7, lr}
    4fba:	b082      	sub	sp, #8
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	6078      	str	r0, [r7, #4]
    4fc0:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4fc2:	687b      	ldr	r3, [r7, #4]
    4fc4:	795b      	ldrb	r3, [r3, #5]
    4fc6:	2b01      	cmp	r3, #1
    4fc8:	d106      	bne.n	4fd8 <compile_delete_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    4fca:	687b      	ldr	r3, [r7, #4]
    4fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4fce:	6839      	ldr	r1, [r7, #0]
    4fd0:	4618      	mov	r0, r3
    4fd2:	f004 fbd2 	bl	977a <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->delete_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4fd6:	e007      	b.n	4fe8 <compile_delete_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    4fd8:	687b      	ldr	r3, [r7, #4]
    4fda:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4fdc:	687b      	ldr	r3, [r7, #4]
    4fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4fe0:	683b      	ldr	r3, [r7, #0]
    4fe2:	4903      	ldr	r1, [pc, #12]	; (4ff0 <compile_delete_id+0x38>)
    4fe4:	f004 fbf4 	bl	97d0 <mp_emit_common_id_op>
}
    4fe8:	bf00      	nop
    4fea:	3708      	adds	r7, #8
    4fec:	46bd      	mov	sp, r7
    4fee:	bd80      	pop	{r7, pc}
    4ff0:	00020a80 	.word	0x00020a80

00004ff4 <c_tuple>:

STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    4ff4:	b580      	push	{r7, lr}
    4ff6:	b088      	sub	sp, #32
    4ff8:	af00      	add	r7, sp, #0
    4ffa:	60f8      	str	r0, [r7, #12]
    4ffc:	60b9      	str	r1, [r7, #8]
    4ffe:	607a      	str	r2, [r7, #4]
    int total = 0;
    5000:	2300      	movs	r3, #0
    5002:	61fb      	str	r3, [r7, #28]
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    5004:	68bb      	ldr	r3, [r7, #8]
    5006:	2b00      	cmp	r3, #0
    5008:	d006      	beq.n	5018 <c_tuple+0x24>
        compile_node(comp, pn);
    500a:	68b9      	ldr	r1, [r7, #8]
    500c:	68f8      	ldr	r0, [r7, #12]
    500e:	f003 fc98 	bl	8942 <compile_node>
        total += 1;
    5012:	69fb      	ldr	r3, [r7, #28]
    5014:	3301      	adds	r3, #1
    5016:	61fb      	str	r3, [r7, #28]
    }
    if (pns_list != NULL) {
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	2b00      	cmp	r3, #0
    501c:	d01a      	beq.n	5054 <c_tuple+0x60>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    501e:	687b      	ldr	r3, [r7, #4]
    5020:	685b      	ldr	r3, [r3, #4]
    5022:	0a1b      	lsrs	r3, r3, #8
    5024:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < n; i++) {
    5026:	2300      	movs	r3, #0
    5028:	61bb      	str	r3, [r7, #24]
    502a:	e00b      	b.n	5044 <c_tuple+0x50>
            compile_node(comp, pns_list->nodes[i]);
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	69ba      	ldr	r2, [r7, #24]
    5030:	3202      	adds	r2, #2
    5032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5036:	4619      	mov	r1, r3
    5038:	68f8      	ldr	r0, [r7, #12]
    503a:	f003 fc82 	bl	8942 <compile_node>
        for (int i = 0; i < n; i++) {
    503e:	69bb      	ldr	r3, [r7, #24]
    5040:	3301      	adds	r3, #1
    5042:	61bb      	str	r3, [r7, #24]
    5044:	69ba      	ldr	r2, [r7, #24]
    5046:	697b      	ldr	r3, [r7, #20]
    5048:	429a      	cmp	r2, r3
    504a:	dbef      	blt.n	502c <c_tuple+0x38>
        }
        total += n;
    504c:	69fa      	ldr	r2, [r7, #28]
    504e:	697b      	ldr	r3, [r7, #20]
    5050:	4413      	add	r3, r2
    5052:	61fb      	str	r3, [r7, #28]
    }
    EMIT_ARG(build, total, MP_EMIT_BUILD_TUPLE);
    5054:	68fb      	ldr	r3, [r7, #12]
    5056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5058:	69f9      	ldr	r1, [r7, #28]
    505a:	2200      	movs	r2, #0
    505c:	4618      	mov	r0, r3
    505e:	f005 fcc2 	bl	a9e6 <mp_emit_bc_build>
}
    5062:	bf00      	nop
    5064:	3720      	adds	r7, #32
    5066:	46bd      	mov	sp, r7
    5068:	bd80      	pop	{r7, pc}

0000506a <compile_generic_tuple>:

STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    506a:	b580      	push	{r7, lr}
    506c:	b082      	sub	sp, #8
    506e:	af00      	add	r7, sp, #0
    5070:	6078      	str	r0, [r7, #4]
    5072:	6039      	str	r1, [r7, #0]
    // a simple tuple expression
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    5074:	683a      	ldr	r2, [r7, #0]
    5076:	2100      	movs	r1, #0
    5078:	6878      	ldr	r0, [r7, #4]
    507a:	f7ff ffbb 	bl	4ff4 <c_tuple>
}
    507e:	bf00      	nop
    5080:	3708      	adds	r7, #8
    5082:	46bd      	mov	sp, r7
    5084:	bd80      	pop	{r7, pc}

00005086 <c_if_cond>:

STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    5086:	b580      	push	{r7, lr}
    5088:	b08a      	sub	sp, #40	; 0x28
    508a:	af00      	add	r7, sp, #0
    508c:	60f8      	str	r0, [r7, #12]
    508e:	60b9      	str	r1, [r7, #8]
    5090:	603b      	str	r3, [r7, #0]
    5092:	4613      	mov	r3, r2
    5094:	71fb      	strb	r3, [r7, #7]
    if (mp_parse_node_is_const_false(pn)) {
    5096:	68b8      	ldr	r0, [r7, #8]
    5098:	f7fe fcd7 	bl	3a4a <mp_parse_node_is_const_false>
    509c:	4603      	mov	r3, r0
    509e:	2b00      	cmp	r3, #0
    50a0:	d00e      	beq.n	50c0 <c_if_cond+0x3a>
        if (jump_if == false) {
    50a2:	79fb      	ldrb	r3, [r7, #7]
    50a4:	f083 0301 	eor.w	r3, r3, #1
    50a8:	b2db      	uxtb	r3, r3
    50aa:	2b00      	cmp	r3, #0
    50ac:	f000 80eb 	beq.w	5286 <c_if_cond+0x200>
            EMIT_ARG(jump, label);
    50b0:	68fb      	ldr	r3, [r7, #12]
    50b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50b4:	683a      	ldr	r2, [r7, #0]
    50b6:	4611      	mov	r1, r2
    50b8:	4618      	mov	r0, r3
    50ba:	f005 fb09 	bl	a6d0 <mp_emit_bc_jump>
        }
        return;
    50be:	e0e2      	b.n	5286 <c_if_cond+0x200>
    } else if (mp_parse_node_is_const_true(pn)) {
    50c0:	68b8      	ldr	r0, [r7, #8]
    50c2:	f7fe fcde 	bl	3a82 <mp_parse_node_is_const_true>
    50c6:	4603      	mov	r3, r0
    50c8:	2b00      	cmp	r3, #0
    50ca:	d00b      	beq.n	50e4 <c_if_cond+0x5e>
        if (jump_if == true) {
    50cc:	79fb      	ldrb	r3, [r7, #7]
    50ce:	2b00      	cmp	r3, #0
    50d0:	f000 80db 	beq.w	528a <c_if_cond+0x204>
            EMIT_ARG(jump, label);
    50d4:	68fb      	ldr	r3, [r7, #12]
    50d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50d8:	683a      	ldr	r2, [r7, #0]
    50da:	4611      	mov	r1, r2
    50dc:	4618      	mov	r0, r3
    50de:	f005 faf7 	bl	a6d0 <mp_emit_bc_jump>
        }
        return;
    50e2:	e0d2      	b.n	528a <c_if_cond+0x204>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    50e4:	68bb      	ldr	r3, [r7, #8]
    50e6:	2b00      	cmp	r3, #0
    50e8:	f000 80c1 	beq.w	526e <c_if_cond+0x1e8>
    50ec:	68bb      	ldr	r3, [r7, #8]
    50ee:	f003 0303 	and.w	r3, r3, #3
    50f2:	2b00      	cmp	r3, #0
    50f4:	f040 80bb 	bne.w	526e <c_if_cond+0x1e8>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    50f8:	68bb      	ldr	r3, [r7, #8]
    50fa:	61fb      	str	r3, [r7, #28]
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    50fc:	69fb      	ldr	r3, [r7, #28]
    50fe:	685b      	ldr	r3, [r3, #4]
    5100:	0a1b      	lsrs	r3, r3, #8
    5102:	61bb      	str	r3, [r7, #24]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    5104:	69fb      	ldr	r3, [r7, #28]
    5106:	685b      	ldr	r3, [r3, #4]
    5108:	b2db      	uxtb	r3, r3
    510a:	2b1c      	cmp	r3, #28
    510c:	d152      	bne.n	51b4 <c_if_cond+0x12e>
            if (jump_if == false) {
    510e:	79fb      	ldrb	r3, [r7, #7]
    5110:	f083 0301 	eor.w	r3, r3, #1
    5114:	b2db      	uxtb	r3, r3
    5116:	2b00      	cmp	r3, #0
    5118:	d037      	beq.n	518a <c_if_cond+0x104>
    511a:	e000      	b.n	511e <c_if_cond+0x98>
            return;
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
            if (jump_if == false) {
                goto and_or_logic2;
            } else {
                goto and_or_logic1;
    511c:	bf00      	nop
                uint label2 = comp_next_label(comp);
    511e:	68f8      	ldr	r0, [r7, #12]
    5120:	f7ff fe2a 	bl	4d78 <comp_next_label>
    5124:	6178      	str	r0, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    5126:	2300      	movs	r3, #0
    5128:	627b      	str	r3, [r7, #36]	; 0x24
    512a:	e017      	b.n	515c <c_if_cond+0xd6>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    512c:	69fb      	ldr	r3, [r7, #28]
    512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5130:	3202      	adds	r2, #2
    5132:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5136:	79fb      	ldrb	r3, [r7, #7]
    5138:	2b00      	cmp	r3, #0
    513a:	bf14      	ite	ne
    513c:	2301      	movne	r3, #1
    513e:	2300      	moveq	r3, #0
    5140:	b2db      	uxtb	r3, r3
    5142:	f083 0301 	eor.w	r3, r3, #1
    5146:	b2db      	uxtb	r3, r3
    5148:	f003 0301 	and.w	r3, r3, #1
    514c:	b2da      	uxtb	r2, r3
    514e:	697b      	ldr	r3, [r7, #20]
    5150:	68f8      	ldr	r0, [r7, #12]
    5152:	f7ff ff98 	bl	5086 <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    5156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5158:	3301      	adds	r3, #1
    515a:	627b      	str	r3, [r7, #36]	; 0x24
    515c:	69bb      	ldr	r3, [r7, #24]
    515e:	1e5a      	subs	r2, r3, #1
    5160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5162:	429a      	cmp	r2, r3
    5164:	dce2      	bgt.n	512c <c_if_cond+0xa6>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    5166:	69bb      	ldr	r3, [r7, #24]
    5168:	1e5a      	subs	r2, r3, #1
    516a:	69fb      	ldr	r3, [r7, #28]
    516c:	3202      	adds	r2, #2
    516e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5172:	79fa      	ldrb	r2, [r7, #7]
    5174:	683b      	ldr	r3, [r7, #0]
    5176:	68f8      	ldr	r0, [r7, #12]
    5178:	f7ff ff85 	bl	5086 <c_if_cond>
                EMIT_ARG(label_assign, label2);
    517c:	68fb      	ldr	r3, [r7, #12]
    517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5180:	6979      	ldr	r1, [r7, #20]
    5182:	4618      	mov	r0, r3
    5184:	f005 f81a 	bl	a1bc <mp_emit_bc_label_assign>
            return;
    5188:	e082      	b.n	5290 <c_if_cond+0x20a>
                for (int i = 0; i < n; i++) {
    518a:	2300      	movs	r3, #0
    518c:	623b      	str	r3, [r7, #32]
    518e:	e00c      	b.n	51aa <c_if_cond+0x124>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    5190:	69fb      	ldr	r3, [r7, #28]
    5192:	6a3a      	ldr	r2, [r7, #32]
    5194:	3202      	adds	r2, #2
    5196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    519a:	79fa      	ldrb	r2, [r7, #7]
    519c:	683b      	ldr	r3, [r7, #0]
    519e:	68f8      	ldr	r0, [r7, #12]
    51a0:	f7ff ff71 	bl	5086 <c_if_cond>
                for (int i = 0; i < n; i++) {
    51a4:	6a3b      	ldr	r3, [r7, #32]
    51a6:	3301      	adds	r3, #1
    51a8:	623b      	str	r3, [r7, #32]
    51aa:	6a3a      	ldr	r2, [r7, #32]
    51ac:	69bb      	ldr	r3, [r7, #24]
    51ae:	429a      	cmp	r2, r3
    51b0:	dbee      	blt.n	5190 <c_if_cond+0x10a>
            return;
    51b2:	e06d      	b.n	5290 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    51b4:	69fb      	ldr	r3, [r7, #28]
    51b6:	685b      	ldr	r3, [r3, #4]
    51b8:	b2db      	uxtb	r3, r3
    51ba:	2b1d      	cmp	r3, #29
    51bc:	d106      	bne.n	51cc <c_if_cond+0x146>
            if (jump_if == false) {
    51be:	79fb      	ldrb	r3, [r7, #7]
    51c0:	f083 0301 	eor.w	r3, r3, #1
    51c4:	b2db      	uxtb	r3, r3
    51c6:	2b00      	cmp	r3, #0
    51c8:	d0a8      	beq.n	511c <c_if_cond+0x96>
                goto and_or_logic2;
    51ca:	e7de      	b.n	518a <c_if_cond+0x104>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    51cc:	69fb      	ldr	r3, [r7, #28]
    51ce:	685b      	ldr	r3, [r3, #4]
    51d0:	b2db      	uxtb	r3, r3
    51d2:	2b1e      	cmp	r3, #30
    51d4:	d112      	bne.n	51fc <c_if_cond+0x176>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    51d6:	69fb      	ldr	r3, [r7, #28]
    51d8:	6899      	ldr	r1, [r3, #8]
    51da:	79fb      	ldrb	r3, [r7, #7]
    51dc:	2b00      	cmp	r3, #0
    51de:	bf14      	ite	ne
    51e0:	2301      	movne	r3, #1
    51e2:	2300      	moveq	r3, #0
    51e4:	b2db      	uxtb	r3, r3
    51e6:	f083 0301 	eor.w	r3, r3, #1
    51ea:	b2db      	uxtb	r3, r3
    51ec:	f003 0301 	and.w	r3, r3, #1
    51f0:	b2da      	uxtb	r2, r3
    51f2:	683b      	ldr	r3, [r7, #0]
    51f4:	68f8      	ldr	r0, [r7, #12]
    51f6:	f7ff ff46 	bl	5086 <c_if_cond>
            return;
    51fa:	e049      	b.n	5290 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    51fc:	69fb      	ldr	r3, [r7, #28]
    51fe:	685b      	ldr	r3, [r3, #4]
    5200:	b2db      	uxtb	r3, r3
    5202:	2b2a      	cmp	r3, #42	; 0x2a
    5204:	d133      	bne.n	526e <c_if_cond+0x1e8>
            // cond is something in parenthesis
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5206:	69fb      	ldr	r3, [r7, #28]
    5208:	689b      	ldr	r3, [r3, #8]
    520a:	2b00      	cmp	r3, #0
    520c:	d10d      	bne.n	522a <c_if_cond+0x1a4>
                // empty tuple, acts as false for the condition
                if (jump_if == false) {
    520e:	79fb      	ldrb	r3, [r7, #7]
    5210:	f083 0301 	eor.w	r3, r3, #1
    5214:	b2db      	uxtb	r3, r3
    5216:	2b00      	cmp	r3, #0
    5218:	d039      	beq.n	528e <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    521a:	68fb      	ldr	r3, [r7, #12]
    521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    521e:	683a      	ldr	r2, [r7, #0]
    5220:	4611      	mov	r1, r2
    5222:	4618      	mov	r0, r3
    5224:	f005 fa54 	bl	a6d0 <mp_emit_bc_jump>
                // non-empty tuple, acts as true for the condition
                if (jump_if == true) {
                    EMIT_ARG(jump, label);
                }
            }
            return;
    5228:	e031      	b.n	528e <c_if_cond+0x208>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    522a:	69fb      	ldr	r3, [r7, #28]
    522c:	689b      	ldr	r3, [r3, #8]
    522e:	2b00      	cmp	r3, #0
    5230:	d00b      	beq.n	524a <c_if_cond+0x1c4>
    5232:	69fb      	ldr	r3, [r7, #28]
    5234:	689b      	ldr	r3, [r3, #8]
    5236:	f003 0303 	and.w	r3, r3, #3
    523a:	2b00      	cmp	r3, #0
    523c:	d105      	bne.n	524a <c_if_cond+0x1c4>
    523e:	69fb      	ldr	r3, [r7, #28]
    5240:	689b      	ldr	r3, [r3, #8]
    5242:	685b      	ldr	r3, [r3, #4]
    5244:	b2db      	uxtb	r3, r3
    5246:	2b8a      	cmp	r3, #138	; 0x8a
    5248:	d006      	beq.n	5258 <c_if_cond+0x1d2>
    524a:	4b13      	ldr	r3, [pc, #76]	; (5298 <c_if_cond+0x212>)
    524c:	4a13      	ldr	r2, [pc, #76]	; (529c <c_if_cond+0x216>)
    524e:	f240 114b 	movw	r1, #331	; 0x14b
    5252:	4813      	ldr	r0, [pc, #76]	; (52a0 <c_if_cond+0x21a>)
    5254:	f015 ffc6 	bl	1b1e4 <__assert_func>
                if (jump_if == true) {
    5258:	79fb      	ldrb	r3, [r7, #7]
    525a:	2b00      	cmp	r3, #0
    525c:	d017      	beq.n	528e <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    525e:	68fb      	ldr	r3, [r7, #12]
    5260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5262:	683a      	ldr	r2, [r7, #0]
    5264:	4611      	mov	r1, r2
    5266:	4618      	mov	r0, r3
    5268:	f005 fa32 	bl	a6d0 <mp_emit_bc_jump>
            return;
    526c:	e00f      	b.n	528e <c_if_cond+0x208>
        }
    }

    // nothing special, fall back to default compiling for node and jump
    compile_node(comp, pn);
    526e:	68b9      	ldr	r1, [r7, #8]
    5270:	68f8      	ldr	r0, [r7, #12]
    5272:	f003 fb66 	bl	8942 <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    5276:	68fb      	ldr	r3, [r7, #12]
    5278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    527a:	683a      	ldr	r2, [r7, #0]
    527c:	79f9      	ldrb	r1, [r7, #7]
    527e:	4618      	mov	r0, r3
    5280:	f005 fa38 	bl	a6f4 <mp_emit_bc_pop_jump_if>
    5284:	e004      	b.n	5290 <c_if_cond+0x20a>
        return;
    5286:	bf00      	nop
    5288:	e002      	b.n	5290 <c_if_cond+0x20a>
        return;
    528a:	bf00      	nop
    528c:	e000      	b.n	5290 <c_if_cond+0x20a>
            return;
    528e:	bf00      	nop
}
    5290:	3728      	adds	r7, #40	; 0x28
    5292:	46bd      	mov	sp, r7
    5294:	bd80      	pop	{r7, pc}
    5296:	bf00      	nop
    5298:	0001f9f8 	.word	0x0001f9f8
    529c:	0002057c 	.word	0x0002057c
    52a0:	0001f9e4 	.word	0x0001f9e4

000052a4 <c_assign_atom_expr>:

typedef enum { ASSIGN_STORE, ASSIGN_AUG_LOAD, ASSIGN_AUG_STORE } assign_kind_t;
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t kind);

STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    52a4:	b580      	push	{r7, lr}
    52a6:	b088      	sub	sp, #32
    52a8:	af00      	add	r7, sp, #0
    52aa:	60f8      	str	r0, [r7, #12]
    52ac:	60b9      	str	r1, [r7, #8]
    52ae:	607a      	str	r2, [r7, #4]
    if (assign_kind != ASSIGN_AUG_STORE) {
    52b0:	687b      	ldr	r3, [r7, #4]
    52b2:	2b02      	cmp	r3, #2
    52b4:	d005      	beq.n	52c2 <c_assign_atom_expr+0x1e>
        compile_node(comp, pns->nodes[0]);
    52b6:	68bb      	ldr	r3, [r7, #8]
    52b8:	689b      	ldr	r3, [r3, #8]
    52ba:	4619      	mov	r1, r3
    52bc:	68f8      	ldr	r0, [r7, #12]
    52be:	f003 fb40 	bl	8942 <compile_node>
    }

    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    52c2:	68bb      	ldr	r3, [r7, #8]
    52c4:	68db      	ldr	r3, [r3, #12]
    52c6:	2b00      	cmp	r3, #0
    52c8:	f000 80b0 	beq.w	542c <c_assign_atom_expr+0x188>
    52cc:	68bb      	ldr	r3, [r7, #8]
    52ce:	68db      	ldr	r3, [r3, #12]
    52d0:	f003 0303 	and.w	r3, r3, #3
    52d4:	2b00      	cmp	r3, #0
    52d6:	f040 80a9 	bne.w	542c <c_assign_atom_expr+0x188>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    52da:	68bb      	ldr	r3, [r7, #8]
    52dc:	68db      	ldr	r3, [r3, #12]
    52de:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    52e0:	69fb      	ldr	r3, [r7, #28]
    52e2:	685b      	ldr	r3, [r3, #4]
    52e4:	b2db      	uxtb	r3, r3
    52e6:	2b86      	cmp	r3, #134	; 0x86
    52e8:	d13a      	bne.n	5360 <c_assign_atom_expr+0xbc>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    52ea:	69fb      	ldr	r3, [r7, #28]
    52ec:	685b      	ldr	r3, [r3, #4]
    52ee:	0a1b      	lsrs	r3, r3, #8
    52f0:	617b      	str	r3, [r7, #20]
            if (assign_kind != ASSIGN_AUG_STORE) {
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	2b02      	cmp	r3, #2
    52f6:	d013      	beq.n	5320 <c_assign_atom_expr+0x7c>
                for (int i = 0; i < n - 1; i++) {
    52f8:	2300      	movs	r3, #0
    52fa:	61bb      	str	r3, [r7, #24]
    52fc:	e00b      	b.n	5316 <c_assign_atom_expr+0x72>
                    compile_node(comp, pns1->nodes[i]);
    52fe:	69fb      	ldr	r3, [r7, #28]
    5300:	69ba      	ldr	r2, [r7, #24]
    5302:	3202      	adds	r2, #2
    5304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5308:	4619      	mov	r1, r3
    530a:	68f8      	ldr	r0, [r7, #12]
    530c:	f003 fb19 	bl	8942 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5310:	69bb      	ldr	r3, [r7, #24]
    5312:	3301      	adds	r3, #1
    5314:	61bb      	str	r3, [r7, #24]
    5316:	697b      	ldr	r3, [r7, #20]
    5318:	1e5a      	subs	r2, r3, #1
    531a:	69bb      	ldr	r3, [r7, #24]
    531c:	429a      	cmp	r2, r3
    531e:	dcee      	bgt.n	52fe <c_assign_atom_expr+0x5a>
                }
            }
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5320:	697b      	ldr	r3, [r7, #20]
    5322:	1e5a      	subs	r2, r3, #1
    5324:	69fb      	ldr	r3, [r7, #28]
    5326:	3202      	adds	r2, #2
    5328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    532c:	2b00      	cmp	r3, #0
    532e:	d009      	beq.n	5344 <c_assign_atom_expr+0xa0>
    5330:	697b      	ldr	r3, [r7, #20]
    5332:	1e5a      	subs	r2, r3, #1
    5334:	69fb      	ldr	r3, [r7, #28]
    5336:	3202      	adds	r2, #2
    5338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    533c:	f003 0303 	and.w	r3, r3, #3
    5340:	2b00      	cmp	r3, #0
    5342:	d006      	beq.n	5352 <c_assign_atom_expr+0xae>
    5344:	4b3e      	ldr	r3, [pc, #248]	; (5440 <c_assign_atom_expr+0x19c>)
    5346:	4a3f      	ldr	r2, [pc, #252]	; (5444 <c_assign_atom_expr+0x1a0>)
    5348:	f240 116b 	movw	r1, #363	; 0x16b
    534c:	483e      	ldr	r0, [pc, #248]	; (5448 <c_assign_atom_expr+0x1a4>)
    534e:	f015 ff49 	bl	1b1e4 <__assert_func>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    5352:	697b      	ldr	r3, [r7, #20]
    5354:	1e5a      	subs	r2, r3, #1
    5356:	69fb      	ldr	r3, [r7, #28]
    5358:	3202      	adds	r2, #2
    535a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    535e:	61fb      	str	r3, [r7, #28]
        }
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5360:	69fb      	ldr	r3, [r7, #28]
    5362:	685b      	ldr	r3, [r3, #4]
    5364:	b2db      	uxtb	r3, r3
    5366:	2b2e      	cmp	r3, #46	; 0x2e
    5368:	d12a      	bne.n	53c0 <c_assign_atom_expr+0x11c>
            if (assign_kind == ASSIGN_AUG_STORE) {
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	2b02      	cmp	r3, #2
    536e:	d10b      	bne.n	5388 <c_assign_atom_expr+0xe4>
                EMIT(rot_three);
    5370:	68fb      	ldr	r3, [r7, #12]
    5372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5374:	4618      	mov	r0, r3
    5376:	f005 f99b 	bl	a6b0 <mp_emit_bc_rot_three>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    537a:	68fb      	ldr	r3, [r7, #12]
    537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    537e:	2101      	movs	r1, #1
    5380:	4618      	mov	r0, r3
    5382:	f005 f897 	bl	a4b4 <mp_emit_bc_subscr>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
                } else {
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
                }
            }
            return;
    5386:	e057      	b.n	5438 <c_assign_atom_expr+0x194>
                compile_node(comp, pns1->nodes[0]);
    5388:	69fb      	ldr	r3, [r7, #28]
    538a:	689b      	ldr	r3, [r3, #8]
    538c:	4619      	mov	r1, r3
    538e:	68f8      	ldr	r0, [r7, #12]
    5390:	f003 fad7 	bl	8942 <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	2b01      	cmp	r3, #1
    5398:	d10b      	bne.n	53b2 <c_assign_atom_expr+0x10e>
                    EMIT(dup_top_two);
    539a:	68fb      	ldr	r3, [r7, #12]
    539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    539e:	4618      	mov	r0, r3
    53a0:	f005 f955 	bl	a64e <mp_emit_bc_dup_top_two>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    53a4:	68fb      	ldr	r3, [r7, #12]
    53a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53a8:	2100      	movs	r1, #0
    53aa:	4618      	mov	r0, r3
    53ac:	f005 f882 	bl	a4b4 <mp_emit_bc_subscr>
            return;
    53b0:	e042      	b.n	5438 <c_assign_atom_expr+0x194>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    53b2:	68fb      	ldr	r3, [r7, #12]
    53b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53b6:	2101      	movs	r1, #1
    53b8:	4618      	mov	r0, r3
    53ba:	f005 f87b 	bl	a4b4 <mp_emit_bc_subscr>
            return;
    53be:	e03b      	b.n	5438 <c_assign_atom_expr+0x194>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    53c0:	69fb      	ldr	r3, [r7, #28]
    53c2:	685b      	ldr	r3, [r3, #4]
    53c4:	b2db      	uxtb	r3, r3
    53c6:	2b2f      	cmp	r3, #47	; 0x2f
    53c8:	d130      	bne.n	542c <c_assign_atom_expr+0x188>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    53ca:	69fb      	ldr	r3, [r7, #28]
    53cc:	689b      	ldr	r3, [r3, #8]
    53ce:	f003 030f 	and.w	r3, r3, #15
    53d2:	2b02      	cmp	r3, #2
    53d4:	d006      	beq.n	53e4 <c_assign_atom_expr+0x140>
    53d6:	4b1d      	ldr	r3, [pc, #116]	; (544c <c_assign_atom_expr+0x1a8>)
    53d8:	4a1a      	ldr	r2, [pc, #104]	; (5444 <c_assign_atom_expr+0x1a0>)
    53da:	f240 117d 	movw	r1, #381	; 0x17d
    53de:	481a      	ldr	r0, [pc, #104]	; (5448 <c_assign_atom_expr+0x1a4>)
    53e0:	f015 ff00 	bl	1b1e4 <__assert_func>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    53e4:	687b      	ldr	r3, [r7, #4]
    53e6:	2b01      	cmp	r3, #1
    53e8:	d10e      	bne.n	5408 <c_assign_atom_expr+0x164>
                EMIT(dup_top);
    53ea:	68fb      	ldr	r3, [r7, #12]
    53ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53ee:	4618      	mov	r0, r3
    53f0:	f005 f91d 	bl	a62e <mp_emit_bc_dup_top>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_LOAD);
    53f4:	68fb      	ldr	r3, [r7, #12]
    53f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    53f8:	69fb      	ldr	r3, [r7, #28]
    53fa:	689b      	ldr	r3, [r3, #8]
    53fc:	091b      	lsrs	r3, r3, #4
    53fe:	2200      	movs	r2, #0
    5400:	4619      	mov	r1, r3
    5402:	f005 f87f 	bl	a504 <mp_emit_bc_attr>
                if (assign_kind == ASSIGN_AUG_STORE) {
                    EMIT(rot_two);
                }
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
            }
            return;
    5406:	e017      	b.n	5438 <c_assign_atom_expr+0x194>
                if (assign_kind == ASSIGN_AUG_STORE) {
    5408:	687b      	ldr	r3, [r7, #4]
    540a:	2b02      	cmp	r3, #2
    540c:	d104      	bne.n	5418 <c_assign_atom_expr+0x174>
                    EMIT(rot_two);
    540e:	68fb      	ldr	r3, [r7, #12]
    5410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5412:	4618      	mov	r0, r3
    5414:	f005 f93c 	bl	a690 <mp_emit_bc_rot_two>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
    5418:	68fb      	ldr	r3, [r7, #12]
    541a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    541c:	69fb      	ldr	r3, [r7, #28]
    541e:	689b      	ldr	r3, [r3, #8]
    5420:	091b      	lsrs	r3, r3, #4
    5422:	2201      	movs	r2, #1
    5424:	4619      	mov	r1, r3
    5426:	f005 f86d 	bl	a504 <mp_emit_bc_attr>
            return;
    542a:	e005      	b.n	5438 <c_assign_atom_expr+0x194>
        }
    }

    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    542c:	68bb      	ldr	r3, [r7, #8]
    542e:	4a08      	ldr	r2, [pc, #32]	; (5450 <c_assign_atom_expr+0x1ac>)
    5430:	4619      	mov	r1, r3
    5432:	68f8      	ldr	r0, [r7, #12]
    5434:	f7ff fc85 	bl	4d42 <compile_syntax_error>
}
    5438:	3720      	adds	r7, #32
    543a:	46bd      	mov	sp, r7
    543c:	bd80      	pop	{r7, pc}
    543e:	bf00      	nop
    5440:	0001fa38 	.word	0x0001fa38
    5444:	00020588 	.word	0x00020588
    5448:	0001f9e4 	.word	0x0001f9e4
    544c:	0001fa64 	.word	0x0001fa64
    5450:	0001fa88 	.word	0x0001fa88

00005454 <c_assign_tuple>:

// we need to allow for a caller passing in 1 initial node (node_head) followed by an array of nodes (nodes_tail)
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    5454:	b580      	push	{r7, lr}
    5456:	b088      	sub	sp, #32
    5458:	af00      	add	r7, sp, #0
    545a:	60f8      	str	r0, [r7, #12]
    545c:	60b9      	str	r1, [r7, #8]
    545e:	607a      	str	r2, [r7, #4]
    5460:	603b      	str	r3, [r7, #0]
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    5462:	68bb      	ldr	r3, [r7, #8]
    5464:	2b00      	cmp	r3, #0
    5466:	bf14      	ite	ne
    5468:	2301      	movne	r3, #1
    546a:	2300      	moveq	r3, #0
    546c:	b2db      	uxtb	r3, r3
    546e:	613b      	str	r3, [r7, #16]

    // look for star expression
    uint have_star_index = -1;
    5470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5474:	61fb      	str	r3, [r7, #28]
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    5476:	693b      	ldr	r3, [r7, #16]
    5478:	2b00      	cmp	r3, #0
    547a:	d015      	beq.n	54a8 <c_assign_tuple+0x54>
    547c:	68bb      	ldr	r3, [r7, #8]
    547e:	2b00      	cmp	r3, #0
    5480:	d012      	beq.n	54a8 <c_assign_tuple+0x54>
    5482:	68bb      	ldr	r3, [r7, #8]
    5484:	f003 0303 	and.w	r3, r3, #3
    5488:	2b00      	cmp	r3, #0
    548a:	d10d      	bne.n	54a8 <c_assign_tuple+0x54>
    548c:	68bb      	ldr	r3, [r7, #8]
    548e:	685b      	ldr	r3, [r3, #4]
    5490:	b2db      	uxtb	r3, r3
    5492:	2b20      	cmp	r3, #32
    5494:	d108      	bne.n	54a8 <c_assign_tuple+0x54>
        EMIT_ARG(unpack_ex, 0, num_tail);
    5496:	68fb      	ldr	r3, [r7, #12]
    5498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    549a:	687a      	ldr	r2, [r7, #4]
    549c:	2100      	movs	r1, #0
    549e:	4618      	mov	r0, r3
    54a0:	f005 fb0f 	bl	aac2 <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    54a4:	2300      	movs	r3, #0
    54a6:	61fb      	str	r3, [r7, #28]
    }
    for (uint i = 0; i < num_tail; i++) {
    54a8:	2300      	movs	r3, #0
    54aa:	61bb      	str	r3, [r7, #24]
    54ac:	e03b      	b.n	5526 <c_assign_tuple+0xd2>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    54ae:	69bb      	ldr	r3, [r7, #24]
    54b0:	009b      	lsls	r3, r3, #2
    54b2:	683a      	ldr	r2, [r7, #0]
    54b4:	4413      	add	r3, r2
    54b6:	681b      	ldr	r3, [r3, #0]
    54b8:	2b00      	cmp	r3, #0
    54ba:	d031      	beq.n	5520 <c_assign_tuple+0xcc>
    54bc:	69bb      	ldr	r3, [r7, #24]
    54be:	009b      	lsls	r3, r3, #2
    54c0:	683a      	ldr	r2, [r7, #0]
    54c2:	4413      	add	r3, r2
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	f003 0303 	and.w	r3, r3, #3
    54ca:	2b00      	cmp	r3, #0
    54cc:	d128      	bne.n	5520 <c_assign_tuple+0xcc>
    54ce:	69bb      	ldr	r3, [r7, #24]
    54d0:	009b      	lsls	r3, r3, #2
    54d2:	683a      	ldr	r2, [r7, #0]
    54d4:	4413      	add	r3, r2
    54d6:	681b      	ldr	r3, [r3, #0]
    54d8:	685b      	ldr	r3, [r3, #4]
    54da:	b2db      	uxtb	r3, r3
    54dc:	2b20      	cmp	r3, #32
    54de:	d11f      	bne.n	5520 <c_assign_tuple+0xcc>
            if (have_star_index == (uint)-1) {
    54e0:	69fb      	ldr	r3, [r7, #28]
    54e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    54e6:	d110      	bne.n	550a <c_assign_tuple+0xb6>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    54e8:	68fb      	ldr	r3, [r7, #12]
    54ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
    54ec:	693a      	ldr	r2, [r7, #16]
    54ee:	69bb      	ldr	r3, [r7, #24]
    54f0:	18d1      	adds	r1, r2, r3
    54f2:	687a      	ldr	r2, [r7, #4]
    54f4:	69bb      	ldr	r3, [r7, #24]
    54f6:	1ad3      	subs	r3, r2, r3
    54f8:	3b01      	subs	r3, #1
    54fa:	461a      	mov	r2, r3
    54fc:	f005 fae1 	bl	aac2 <mp_emit_bc_unpack_ex>
                have_star_index = num_head + i;
    5500:	693a      	ldr	r2, [r7, #16]
    5502:	69bb      	ldr	r3, [r7, #24]
    5504:	4413      	add	r3, r2
    5506:	61fb      	str	r3, [r7, #28]
    5508:	e00a      	b.n	5520 <c_assign_tuple+0xcc>
            } else {
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    550a:	69bb      	ldr	r3, [r7, #24]
    550c:	009b      	lsls	r3, r3, #2
    550e:	683a      	ldr	r2, [r7, #0]
    5510:	4413      	add	r3, r2
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	4a2a      	ldr	r2, [pc, #168]	; (55c0 <c_assign_tuple+0x16c>)
    5516:	4619      	mov	r1, r3
    5518:	68f8      	ldr	r0, [r7, #12]
    551a:	f7ff fc12 	bl	4d42 <compile_syntax_error>
                return;
    551e:	e04b      	b.n	55b8 <c_assign_tuple+0x164>
    for (uint i = 0; i < num_tail; i++) {
    5520:	69bb      	ldr	r3, [r7, #24]
    5522:	3301      	adds	r3, #1
    5524:	61bb      	str	r3, [r7, #24]
    5526:	69ba      	ldr	r2, [r7, #24]
    5528:	687b      	ldr	r3, [r7, #4]
    552a:	429a      	cmp	r2, r3
    552c:	d3bf      	bcc.n	54ae <c_assign_tuple+0x5a>
            }
        }
    }
    if (have_star_index == (uint)-1) {
    552e:	69fb      	ldr	r3, [r7, #28]
    5530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5534:	d107      	bne.n	5546 <c_assign_tuple+0xf2>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    5536:	68fb      	ldr	r3, [r7, #12]
    5538:	6a98      	ldr	r0, [r3, #40]	; 0x28
    553a:	693a      	ldr	r2, [r7, #16]
    553c:	687b      	ldr	r3, [r7, #4]
    553e:	4413      	add	r3, r2
    5540:	4619      	mov	r1, r3
    5542:	f005 faaa 	bl	aa9a <mp_emit_bc_unpack_sequence>
    }
    if (num_head != 0) {
    5546:	693b      	ldr	r3, [r7, #16]
    5548:	2b00      	cmp	r3, #0
    554a:	d00f      	beq.n	556c <c_assign_tuple+0x118>
        if (0 == have_star_index) {
    554c:	69fb      	ldr	r3, [r7, #28]
    554e:	2b00      	cmp	r3, #0
    5550:	d107      	bne.n	5562 <c_assign_tuple+0x10e>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    5552:	68bb      	ldr	r3, [r7, #8]
    5554:	689b      	ldr	r3, [r3, #8]
    5556:	2200      	movs	r2, #0
    5558:	4619      	mov	r1, r3
    555a:	68f8      	ldr	r0, [r7, #12]
    555c:	f000 f832 	bl	55c4 <c_assign>
    5560:	e004      	b.n	556c <c_assign_tuple+0x118>
        } else {
            c_assign(comp, node_head, ASSIGN_STORE);
    5562:	2200      	movs	r2, #0
    5564:	68b9      	ldr	r1, [r7, #8]
    5566:	68f8      	ldr	r0, [r7, #12]
    5568:	f000 f82c 	bl	55c4 <c_assign>
        }
    }
    for (uint i = 0; i < num_tail; i++) {
    556c:	2300      	movs	r3, #0
    556e:	617b      	str	r3, [r7, #20]
    5570:	e01e      	b.n	55b0 <c_assign_tuple+0x15c>
        if (num_head + i == have_star_index) {
    5572:	693a      	ldr	r2, [r7, #16]
    5574:	697b      	ldr	r3, [r7, #20]
    5576:	441a      	add	r2, r3
    5578:	69fb      	ldr	r3, [r7, #28]
    557a:	429a      	cmp	r2, r3
    557c:	d10b      	bne.n	5596 <c_assign_tuple+0x142>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    557e:	697b      	ldr	r3, [r7, #20]
    5580:	009b      	lsls	r3, r3, #2
    5582:	683a      	ldr	r2, [r7, #0]
    5584:	4413      	add	r3, r2
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	689b      	ldr	r3, [r3, #8]
    558a:	2200      	movs	r2, #0
    558c:	4619      	mov	r1, r3
    558e:	68f8      	ldr	r0, [r7, #12]
    5590:	f000 f818 	bl	55c4 <c_assign>
    5594:	e009      	b.n	55aa <c_assign_tuple+0x156>
        } else {
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    5596:	697b      	ldr	r3, [r7, #20]
    5598:	009b      	lsls	r3, r3, #2
    559a:	683a      	ldr	r2, [r7, #0]
    559c:	4413      	add	r3, r2
    559e:	681b      	ldr	r3, [r3, #0]
    55a0:	2200      	movs	r2, #0
    55a2:	4619      	mov	r1, r3
    55a4:	68f8      	ldr	r0, [r7, #12]
    55a6:	f000 f80d 	bl	55c4 <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    55aa:	697b      	ldr	r3, [r7, #20]
    55ac:	3301      	adds	r3, #1
    55ae:	617b      	str	r3, [r7, #20]
    55b0:	697a      	ldr	r2, [r7, #20]
    55b2:	687b      	ldr	r3, [r7, #4]
    55b4:	429a      	cmp	r2, r3
    55b6:	d3dc      	bcc.n	5572 <c_assign_tuple+0x11e>
        }
    }
}
    55b8:	3720      	adds	r7, #32
    55ba:	46bd      	mov	sp, r7
    55bc:	bd80      	pop	{r7, pc}
    55be:	bf00      	nop
    55c0:	0001faa4 	.word	0x0001faa4

000055c4 <c_assign>:

// assigns top of stack to pn
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    55c4:	b580      	push	{r7, lr}
    55c6:	b088      	sub	sp, #32
    55c8:	af00      	add	r7, sp, #0
    55ca:	60f8      	str	r0, [r7, #12]
    55cc:	60b9      	str	r1, [r7, #8]
    55ce:	607a      	str	r2, [r7, #4]
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    55d0:	68bb      	ldr	r3, [r7, #8]
    55d2:	2b00      	cmp	r3, #0
    55d4:	d106      	bne.n	55e4 <c_assign+0x20>
    55d6:	4b7a      	ldr	r3, [pc, #488]	; (57c0 <c_assign+0x1fc>)
    55d8:	4a7a      	ldr	r2, [pc, #488]	; (57c4 <c_assign+0x200>)
    55da:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    55de:	487a      	ldr	r0, [pc, #488]	; (57c8 <c_assign+0x204>)
    55e0:	f015 fe00 	bl	1b1e4 <__assert_func>
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    55e4:	68bb      	ldr	r3, [r7, #8]
    55e6:	f003 0303 	and.w	r3, r3, #3
    55ea:	2b00      	cmp	r3, #0
    55ec:	d018      	beq.n	5620 <c_assign+0x5c>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    55ee:	68bb      	ldr	r3, [r7, #8]
    55f0:	f003 030f 	and.w	r3, r3, #15
    55f4:	2b02      	cmp	r3, #2
    55f6:	f040 80cf 	bne.w	5798 <c_assign+0x1d4>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    55fa:	68bb      	ldr	r3, [r7, #8]
    55fc:	091b      	lsrs	r3, r3, #4
    55fe:	613b      	str	r3, [r7, #16]
            switch (assign_kind) {
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	2b00      	cmp	r3, #0
    5604:	d001      	beq.n	560a <c_assign+0x46>
    5606:	2b02      	cmp	r3, #2
    5608:	d104      	bne.n	5614 <c_assign+0x50>
                case ASSIGN_STORE:
                case ASSIGN_AUG_STORE:
                    compile_store_id(comp, arg);
    560a:	6939      	ldr	r1, [r7, #16]
    560c:	68f8      	ldr	r0, [r7, #12]
    560e:	f7ff fcb5 	bl	4f7c <compile_store_id>
                    break;
    5612:	e0c0      	b.n	5796 <c_assign+0x1d2>
                case ASSIGN_AUG_LOAD:
                default:
                    compile_load_id(comp, arg);
    5614:	6939      	ldr	r1, [r7, #16]
    5616:	68f8      	ldr	r0, [r7, #12]
    5618:	f7ff fc91 	bl	4f3e <compile_load_id>
                    break;
    561c:	bf00      	nop
    561e:	e0ba      	b.n	5796 <c_assign+0x1d2>
        } else {
            goto cannot_assign;
        }
    } else {
        // pn must be a struct
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5620:	68bb      	ldr	r3, [r7, #8]
    5622:	61fb      	str	r3, [r7, #28]
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    5624:	69fb      	ldr	r3, [r7, #28]
    5626:	685b      	ldr	r3, [r3, #4]
    5628:	b2db      	uxtb	r3, r3
    562a:	2b2a      	cmp	r3, #42	; 0x2a
    562c:	d01f      	beq.n	566e <c_assign+0xaa>
    562e:	2b2a      	cmp	r3, #42	; 0x2a
    5630:	d804      	bhi.n	563c <c_assign+0x78>
    5632:	2b06      	cmp	r3, #6
    5634:	d00d      	beq.n	5652 <c_assign+0x8e>
    5636:	2b29      	cmp	r3, #41	; 0x29
    5638:	d005      	beq.n	5646 <c_assign+0x82>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
                }
                break;

            default:
                goto cannot_assign;
    563a:	e0b8      	b.n	57ae <c_assign+0x1ea>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    563c:	2b2b      	cmp	r3, #43	; 0x2b
    563e:	d039      	beq.n	56b4 <c_assign+0xf0>
    5640:	2b90      	cmp	r3, #144	; 0x90
    5642:	d006      	beq.n	5652 <c_assign+0x8e>
                goto cannot_assign;
    5644:	e0b3      	b.n	57ae <c_assign+0x1ea>
                c_assign_atom_expr(comp, pns, assign_kind);
    5646:	687a      	ldr	r2, [r7, #4]
    5648:	69f9      	ldr	r1, [r7, #28]
    564a:	68f8      	ldr	r0, [r7, #12]
    564c:	f7ff fe2a 	bl	52a4 <c_assign_atom_expr>
                break;
    5650:	e05a      	b.n	5708 <c_assign+0x144>
                if (assign_kind != ASSIGN_STORE) {
    5652:	687b      	ldr	r3, [r7, #4]
    5654:	2b00      	cmp	r3, #0
    5656:	f040 80a1 	bne.w	579c <c_assign+0x1d8>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    565a:	69fb      	ldr	r3, [r7, #28]
    565c:	685b      	ldr	r3, [r3, #4]
    565e:	0a1a      	lsrs	r2, r3, #8
    5660:	69fb      	ldr	r3, [r7, #28]
    5662:	3308      	adds	r3, #8
    5664:	2100      	movs	r1, #0
    5666:	68f8      	ldr	r0, [r7, #12]
    5668:	f7ff fef4 	bl	5454 <c_assign_tuple>
                break;
    566c:	e04c      	b.n	5708 <c_assign+0x144>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    566e:	69fb      	ldr	r3, [r7, #28]
    5670:	689b      	ldr	r3, [r3, #8]
    5672:	2b00      	cmp	r3, #0
    5674:	f000 8094 	beq.w	57a0 <c_assign+0x1dc>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    5678:	69fb      	ldr	r3, [r7, #28]
    567a:	689b      	ldr	r3, [r3, #8]
    567c:	2b00      	cmp	r3, #0
    567e:	d00b      	beq.n	5698 <c_assign+0xd4>
    5680:	69fb      	ldr	r3, [r7, #28]
    5682:	689b      	ldr	r3, [r3, #8]
    5684:	f003 0303 	and.w	r3, r3, #3
    5688:	2b00      	cmp	r3, #0
    568a:	d105      	bne.n	5698 <c_assign+0xd4>
    568c:	69fb      	ldr	r3, [r7, #28]
    568e:	689b      	ldr	r3, [r3, #8]
    5690:	685b      	ldr	r3, [r3, #4]
    5692:	b2db      	uxtb	r3, r3
    5694:	2b8a      	cmp	r3, #138	; 0x8a
    5696:	d006      	beq.n	56a6 <c_assign+0xe2>
    5698:	4b4c      	ldr	r3, [pc, #304]	; (57cc <c_assign+0x208>)
    569a:	4a4a      	ldr	r2, [pc, #296]	; (57c4 <c_assign+0x200>)
    569c:	f240 11e1 	movw	r1, #481	; 0x1e1
    56a0:	4849      	ldr	r0, [pc, #292]	; (57c8 <c_assign+0x204>)
    56a2:	f015 fd9f 	bl	1b1e4 <__assert_func>
                    if (assign_kind != ASSIGN_STORE) {
    56a6:	687b      	ldr	r3, [r7, #4]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d17b      	bne.n	57a4 <c_assign+0x1e0>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    56ac:	69fb      	ldr	r3, [r7, #28]
    56ae:	689b      	ldr	r3, [r3, #8]
    56b0:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    56b2:	e02a      	b.n	570a <c_assign+0x146>
                if (assign_kind != ASSIGN_STORE) {
    56b4:	687b      	ldr	r3, [r7, #4]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d176      	bne.n	57a8 <c_assign+0x1e4>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    56ba:	69fb      	ldr	r3, [r7, #28]
    56bc:	689b      	ldr	r3, [r3, #8]
    56be:	2b00      	cmp	r3, #0
    56c0:	d106      	bne.n	56d0 <c_assign+0x10c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    56c2:	2300      	movs	r3, #0
    56c4:	2200      	movs	r2, #0
    56c6:	2100      	movs	r1, #0
    56c8:	68f8      	ldr	r0, [r7, #12]
    56ca:	f7ff fec3 	bl	5454 <c_assign_tuple>
                break;
    56ce:	e01a      	b.n	5706 <c_assign+0x142>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    56d0:	69fb      	ldr	r3, [r7, #28]
    56d2:	689b      	ldr	r3, [r3, #8]
    56d4:	2b00      	cmp	r3, #0
    56d6:	d00f      	beq.n	56f8 <c_assign+0x134>
    56d8:	69fb      	ldr	r3, [r7, #28]
    56da:	689b      	ldr	r3, [r3, #8]
    56dc:	f003 0303 	and.w	r3, r3, #3
    56e0:	2b00      	cmp	r3, #0
    56e2:	d109      	bne.n	56f8 <c_assign+0x134>
    56e4:	69fb      	ldr	r3, [r7, #28]
    56e6:	689b      	ldr	r3, [r3, #8]
    56e8:	685b      	ldr	r3, [r3, #4]
    56ea:	b2db      	uxtb	r3, r3
    56ec:	2b8a      	cmp	r3, #138	; 0x8a
    56ee:	d103      	bne.n	56f8 <c_assign+0x134>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    56f0:	69fb      	ldr	r3, [r7, #28]
    56f2:	689b      	ldr	r3, [r3, #8]
    56f4:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    56f6:	e008      	b.n	570a <c_assign+0x146>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    56f8:	69fb      	ldr	r3, [r7, #28]
    56fa:	6899      	ldr	r1, [r3, #8]
    56fc:	2300      	movs	r3, #0
    56fe:	2200      	movs	r2, #0
    5700:	68f8      	ldr	r0, [r7, #12]
    5702:	f7ff fea7 	bl	5454 <c_assign_tuple>
                break;
    5706:	bf00      	nop
        }
        return;
    5708:	e056      	b.n	57b8 <c_assign+0x1f4>

        testlist_comp:
        // lhs is a sequence
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    570a:	69fb      	ldr	r3, [r7, #28]
    570c:	68db      	ldr	r3, [r3, #12]
    570e:	2b00      	cmp	r3, #0
    5710:	d038      	beq.n	5784 <c_assign+0x1c0>
    5712:	69fb      	ldr	r3, [r7, #28]
    5714:	68db      	ldr	r3, [r3, #12]
    5716:	f003 0303 	and.w	r3, r3, #3
    571a:	2b00      	cmp	r3, #0
    571c:	d132      	bne.n	5784 <c_assign+0x1c0>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    571e:	69fb      	ldr	r3, [r7, #28]
    5720:	68db      	ldr	r3, [r3, #12]
    5722:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    5724:	69bb      	ldr	r3, [r7, #24]
    5726:	685b      	ldr	r3, [r3, #4]
    5728:	b2db      	uxtb	r3, r3
    572a:	2b8d      	cmp	r3, #141	; 0x8d
    572c:	d112      	bne.n	5754 <c_assign+0x190>
                // sequence of one item, with trailing comma
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    572e:	69bb      	ldr	r3, [r7, #24]
    5730:	689b      	ldr	r3, [r3, #8]
    5732:	2b00      	cmp	r3, #0
    5734:	d006      	beq.n	5744 <c_assign+0x180>
    5736:	4b26      	ldr	r3, [pc, #152]	; (57d0 <c_assign+0x20c>)
    5738:	4a22      	ldr	r2, [pc, #136]	; (57c4 <c_assign+0x200>)
    573a:	f240 2106 	movw	r1, #518	; 0x206
    573e:	4822      	ldr	r0, [pc, #136]	; (57c8 <c_assign+0x204>)
    5740:	f015 fd50 	bl	1b1e4 <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    5744:	69fb      	ldr	r3, [r7, #28]
    5746:	6899      	ldr	r1, [r3, #8]
    5748:	2300      	movs	r3, #0
    574a:	2200      	movs	r2, #0
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	f7ff fe81 	bl	5454 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5752:	e01f      	b.n	5794 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    5754:	69bb      	ldr	r3, [r7, #24]
    5756:	685b      	ldr	r3, [r3, #4]
    5758:	b2db      	uxtb	r3, r3
    575a:	2b8e      	cmp	r3, #142	; 0x8e
    575c:	d10c      	bne.n	5778 <c_assign+0x1b4>
                // sequence of many items
                uint n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns2);
    575e:	69bb      	ldr	r3, [r7, #24]
    5760:	685b      	ldr	r3, [r3, #4]
    5762:	0a1b      	lsrs	r3, r3, #8
    5764:	617b      	str	r3, [r7, #20]
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    5766:	69fb      	ldr	r3, [r7, #28]
    5768:	6899      	ldr	r1, [r3, #8]
    576a:	69bb      	ldr	r3, [r7, #24]
    576c:	3308      	adds	r3, #8
    576e:	697a      	ldr	r2, [r7, #20]
    5770:	68f8      	ldr	r0, [r7, #12]
    5772:	f7ff fe6f 	bl	5454 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5776:	e00d      	b.n	5794 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    5778:	69bb      	ldr	r3, [r7, #24]
    577a:	685b      	ldr	r3, [r3, #4]
    577c:	b2db      	uxtb	r3, r3
    577e:	2b9f      	cmp	r3, #159	; 0x9f
    5780:	d014      	beq.n	57ac <c_assign+0x1e8>
                goto cannot_assign;
            } else {
                // sequence with 2 items
                goto sequence_with_2_items;
    5782:	bf00      	nop
            }
        } else {
            // sequence with 2 items
            sequence_with_2_items:
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    5784:	69fb      	ldr	r3, [r7, #28]
    5786:	3308      	adds	r3, #8
    5788:	2202      	movs	r2, #2
    578a:	2100      	movs	r1, #0
    578c:	68f8      	ldr	r0, [r7, #12]
    578e:	f7ff fe61 	bl	5454 <c_assign_tuple>
        }
        return;
    5792:	e011      	b.n	57b8 <c_assign+0x1f4>
    5794:	e010      	b.n	57b8 <c_assign+0x1f4>
    }
    return;
    5796:	e00f      	b.n	57b8 <c_assign+0x1f4>
            goto cannot_assign;
    5798:	bf00      	nop
    579a:	e008      	b.n	57ae <c_assign+0x1ea>
                    goto cannot_assign;
    579c:	bf00      	nop
    579e:	e006      	b.n	57ae <c_assign+0x1ea>
                    goto cannot_assign;
    57a0:	bf00      	nop
    57a2:	e004      	b.n	57ae <c_assign+0x1ea>
                        goto cannot_assign;
    57a4:	bf00      	nop
    57a6:	e002      	b.n	57ae <c_assign+0x1ea>
                    goto cannot_assign;
    57a8:	bf00      	nop
    57aa:	e000      	b.n	57ae <c_assign+0x1ea>
                goto cannot_assign;
    57ac:	bf00      	nop

    cannot_assign:
    compile_syntax_error(comp, pn, "can't assign to expression");
    57ae:	4a09      	ldr	r2, [pc, #36]	; (57d4 <c_assign+0x210>)
    57b0:	68b9      	ldr	r1, [r7, #8]
    57b2:	68f8      	ldr	r0, [r7, #12]
    57b4:	f7ff fac5 	bl	4d42 <compile_syntax_error>
}
    57b8:	3720      	adds	r7, #32
    57ba:	46bd      	mov	sp, r7
    57bc:	bd80      	pop	{r7, pc}
    57be:	bf00      	nop
    57c0:	0001fac0 	.word	0x0001fac0
    57c4:	0002059c 	.word	0x0002059c
    57c8:	0001f9e4 	.word	0x0001f9e4
    57cc:	0001f9f8 	.word	0x0001f9f8
    57d0:	0001fadc 	.word	0x0001fadc
    57d4:	0001fa88 	.word	0x0001fa88

000057d8 <close_over_variables_etc>:

// stuff for lambda and comprehensions and generators:
//  if n_pos_defaults > 0 then there is a tuple on the stack with the positional defaults
//  if n_kw_defaults > 0 then there is a dictionary on the stack with the keyword defaults
//  if both exist, the tuple is above the dictionary (ie the first pop gets the tuple)
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    57d8:	b580      	push	{r7, lr}
    57da:	b08c      	sub	sp, #48	; 0x30
    57dc:	af02      	add	r7, sp, #8
    57de:	60f8      	str	r0, [r7, #12]
    57e0:	60b9      	str	r1, [r7, #8]
    57e2:	607a      	str	r2, [r7, #4]
    57e4:	603b      	str	r3, [r7, #0]
    assert(n_pos_defaults >= 0);
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	2b00      	cmp	r3, #0
    57ea:	da06      	bge.n	57fa <close_over_variables_etc+0x22>
    57ec:	4b41      	ldr	r3, [pc, #260]	; (58f4 <close_over_variables_etc+0x11c>)
    57ee:	4a42      	ldr	r2, [pc, #264]	; (58f8 <close_over_variables_etc+0x120>)
    57f0:	f44f 7109 	mov.w	r1, #548	; 0x224
    57f4:	4841      	ldr	r0, [pc, #260]	; (58fc <close_over_variables_etc+0x124>)
    57f6:	f015 fcf5 	bl	1b1e4 <__assert_func>
    assert(n_kw_defaults >= 0);
    57fa:	683b      	ldr	r3, [r7, #0]
    57fc:	2b00      	cmp	r3, #0
    57fe:	da06      	bge.n	580e <close_over_variables_etc+0x36>
    5800:	4b3f      	ldr	r3, [pc, #252]	; (5900 <close_over_variables_etc+0x128>)
    5802:	4a3d      	ldr	r2, [pc, #244]	; (58f8 <close_over_variables_etc+0x120>)
    5804:	f240 2125 	movw	r1, #549	; 0x225
    5808:	483c      	ldr	r0, [pc, #240]	; (58fc <close_over_variables_etc+0x124>)
    580a:	f015 fceb 	bl	1b1e4 <__assert_func>

    // set flags
    if (n_kw_defaults > 0) {
    580e:	683b      	ldr	r3, [r7, #0]
    5810:	2b00      	cmp	r3, #0
    5812:	dd06      	ble.n	5822 <close_over_variables_etc+0x4a>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    5814:	68bb      	ldr	r3, [r7, #8]
    5816:	7e1b      	ldrb	r3, [r3, #24]
    5818:	f043 0308 	orr.w	r3, r3, #8
    581c:	b2da      	uxtb	r2, r3
    581e:	68bb      	ldr	r3, [r7, #8]
    5820:	761a      	strb	r2, [r3, #24]
    }
    this_scope->num_def_pos_args = n_pos_defaults;
    5822:	687b      	ldr	r3, [r7, #4]
    5824:	b29a      	uxth	r2, r3
    5826:	68bb      	ldr	r3, [r7, #8]
    5828:	83da      	strh	r2, [r3, #30]

    // make closed over variables, if any
    // ensure they are closed over in the order defined in the outer scope (mainly to agree with CPython)
    int nfree = 0;
    582a:	2300      	movs	r3, #0
    582c:	627b      	str	r3, [r7, #36]	; 0x24
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    582e:	68fb      	ldr	r3, [r7, #12]
    5830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	2b00      	cmp	r3, #0
    5836:	d044      	beq.n	58c2 <close_over_variables_etc+0xea>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5838:	2300      	movs	r3, #0
    583a:	623b      	str	r3, [r7, #32]
    583c:	e03a      	b.n	58b4 <close_over_variables_etc+0xdc>
            id_info_t *id = &comp->scope_cur->id_info[i];
    583e:	68fb      	ldr	r3, [r7, #12]
    5840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5844:	6a3b      	ldr	r3, [r7, #32]
    5846:	00db      	lsls	r3, r3, #3
    5848:	4413      	add	r3, r2
    584a:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    584c:	69bb      	ldr	r3, [r7, #24]
    584e:	781b      	ldrb	r3, [r3, #0]
    5850:	2b03      	cmp	r3, #3
    5852:	d003      	beq.n	585c <close_over_variables_etc+0x84>
    5854:	69bb      	ldr	r3, [r7, #24]
    5856:	781b      	ldrb	r3, [r3, #0]
    5858:	2b04      	cmp	r3, #4
    585a:	d128      	bne.n	58ae <close_over_variables_etc+0xd6>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    585c:	2300      	movs	r3, #0
    585e:	61fb      	str	r3, [r7, #28]
    5860:	e01f      	b.n	58a2 <close_over_variables_etc+0xca>
                    id_info_t *id2 = &this_scope->id_info[j];
    5862:	68bb      	ldr	r3, [r7, #8]
    5864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5866:	69fb      	ldr	r3, [r7, #28]
    5868:	00db      	lsls	r3, r3, #3
    586a:	4413      	add	r3, r2
    586c:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    586e:	697b      	ldr	r3, [r7, #20]
    5870:	781b      	ldrb	r3, [r3, #0]
    5872:	2b04      	cmp	r3, #4
    5874:	d112      	bne.n	589c <close_over_variables_etc+0xc4>
    5876:	69bb      	ldr	r3, [r7, #24]
    5878:	685a      	ldr	r2, [r3, #4]
    587a:	697b      	ldr	r3, [r7, #20]
    587c:	685b      	ldr	r3, [r3, #4]
    587e:	429a      	cmp	r2, r3
    5880:	d10c      	bne.n	589c <close_over_variables_etc+0xc4>
                        // in MicroPython we load closures using LOAD_FAST
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    5882:	68fb      	ldr	r3, [r7, #12]
    5884:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5886:	69bb      	ldr	r3, [r7, #24]
    5888:	6859      	ldr	r1, [r3, #4]
    588a:	69bb      	ldr	r3, [r7, #24]
    588c:	885b      	ldrh	r3, [r3, #2]
    588e:	461a      	mov	r2, r3
    5890:	2300      	movs	r3, #0
    5892:	f004 fda3 	bl	a3dc <mp_emit_bc_load_local>
                        nfree += 1;
    5896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5898:	3301      	adds	r3, #1
    589a:	627b      	str	r3, [r7, #36]	; 0x24
                for (int j = 0; j < this_scope->id_info_len; j++) {
    589c:	69fb      	ldr	r3, [r7, #28]
    589e:	3301      	adds	r3, #1
    58a0:	61fb      	str	r3, [r7, #28]
    58a2:	68bb      	ldr	r3, [r7, #8]
    58a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    58a6:	461a      	mov	r2, r3
    58a8:	69fb      	ldr	r3, [r7, #28]
    58aa:	429a      	cmp	r2, r3
    58ac:	dcd9      	bgt.n	5862 <close_over_variables_etc+0x8a>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    58ae:	6a3b      	ldr	r3, [r7, #32]
    58b0:	3301      	adds	r3, #1
    58b2:	623b      	str	r3, [r7, #32]
    58b4:	68fb      	ldr	r3, [r7, #12]
    58b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    58ba:	461a      	mov	r2, r3
    58bc:	6a3b      	ldr	r3, [r7, #32]
    58be:	429a      	cmp	r2, r3
    58c0:	dcbd      	bgt.n	583e <close_over_variables_etc+0x66>
            }
        }
    }

    // make the function/closure
    if (nfree == 0) {
    58c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58c4:	2b00      	cmp	r3, #0
    58c6:	d107      	bne.n	58d8 <close_over_variables_etc+0x100>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    58c8:	68fb      	ldr	r3, [r7, #12]
    58ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
    58cc:	687a      	ldr	r2, [r7, #4]
    58ce:	683b      	ldr	r3, [r7, #0]
    58d0:	68b9      	ldr	r1, [r7, #8]
    58d2:	f005 f910 	bl	aaf6 <mp_emit_bc_make_function>
    } else {
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    }
}
    58d6:	e009      	b.n	58ec <close_over_variables_etc+0x114>
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    58d8:	68fb      	ldr	r3, [r7, #12]
    58da:	6a98      	ldr	r0, [r3, #40]	; 0x28
    58dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    58de:	6879      	ldr	r1, [r7, #4]
    58e0:	683b      	ldr	r3, [r7, #0]
    58e2:	9300      	str	r3, [sp, #0]
    58e4:	460b      	mov	r3, r1
    58e6:	68b9      	ldr	r1, [r7, #8]
    58e8:	f005 f92e 	bl	ab48 <mp_emit_bc_make_closure>
}
    58ec:	bf00      	nop
    58ee:	3728      	adds	r7, #40	; 0x28
    58f0:	46bd      	mov	sp, r7
    58f2:	bd80      	pop	{r7, pc}
    58f4:	0001fb04 	.word	0x0001fb04
    58f8:	000205a8 	.word	0x000205a8
    58fc:	0001f9e4 	.word	0x0001f9e4
    5900:	0001fb18 	.word	0x0001fb18

00005904 <compile_funcdef_lambdef_param>:

STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    5904:	b580      	push	{r7, lr}
    5906:	b088      	sub	sp, #32
    5908:	af00      	add	r7, sp, #0
    590a:	6078      	str	r0, [r7, #4]
    590c:	6039      	str	r1, [r7, #0]
    // For efficiency of the code below we extract the parse-node kind here
    int pn_kind;
    if (MP_PARSE_NODE_IS_ID(pn)) {
    590e:	683b      	ldr	r3, [r7, #0]
    5910:	f003 030f 	and.w	r3, r3, #15
    5914:	2b02      	cmp	r3, #2
    5916:	d103      	bne.n	5920 <compile_funcdef_lambdef_param+0x1c>
        pn_kind = -1;
    5918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    591c:	61fb      	str	r3, [r7, #28]
    591e:	e012      	b.n	5946 <compile_funcdef_lambdef_param+0x42>
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    5920:	683b      	ldr	r3, [r7, #0]
    5922:	2b00      	cmp	r3, #0
    5924:	d004      	beq.n	5930 <compile_funcdef_lambdef_param+0x2c>
    5926:	683b      	ldr	r3, [r7, #0]
    5928:	f003 0303 	and.w	r3, r3, #3
    592c:	2b00      	cmp	r3, #0
    592e:	d006      	beq.n	593e <compile_funcdef_lambdef_param+0x3a>
    5930:	4b4c      	ldr	r3, [pc, #304]	; (5a64 <compile_funcdef_lambdef_param+0x160>)
    5932:	4a4d      	ldr	r2, [pc, #308]	; (5a68 <compile_funcdef_lambdef_param+0x164>)
    5934:	f240 214e 	movw	r1, #590	; 0x24e
    5938:	484c      	ldr	r0, [pc, #304]	; (5a6c <compile_funcdef_lambdef_param+0x168>)
    593a:	f015 fc53 	bl	1b1e4 <__assert_func>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    593e:	683b      	ldr	r3, [r7, #0]
    5940:	685b      	ldr	r3, [r3, #4]
    5942:	b2db      	uxtb	r3, r3
    5944:	61fb      	str	r3, [r7, #28]
    }

    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    5946:	69fb      	ldr	r3, [r7, #28]
    5948:	2b41      	cmp	r3, #65	; 0x41
    594a:	d002      	beq.n	5952 <compile_funcdef_lambdef_param+0x4e>
    594c:	69fb      	ldr	r3, [r7, #28]
    594e:	2b49      	cmp	r3, #73	; 0x49
    5950:	d103      	bne.n	595a <compile_funcdef_lambdef_param+0x56>
        comp->have_star = true;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	2201      	movs	r2, #1
    5956:	719a      	strb	r2, [r3, #6]
    5958:	e080      	b.n	5a5c <compile_funcdef_lambdef_param+0x158>
        } else {
            // named star
        }
        */

    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    595a:	69fb      	ldr	r3, [r7, #28]
    595c:	2b42      	cmp	r3, #66	; 0x42
    595e:	d07d      	beq.n	5a5c <compile_funcdef_lambdef_param+0x158>
    5960:	69fb      	ldr	r3, [r7, #28]
    5962:	2b4a      	cmp	r3, #74	; 0x4a
    5964:	d07a      	beq.n	5a5c <compile_funcdef_lambdef_param+0x158>
        // TODO do we need to do anything with this?

    } else {
        mp_parse_node_t pn_id;
        mp_parse_node_t pn_equal;
        if (pn_kind == -1) {
    5966:	69fb      	ldr	r3, [r7, #28]
    5968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    596c:	d104      	bne.n	5978 <compile_funcdef_lambdef_param+0x74>
            // this parameter is just an id

            pn_id = pn;
    596e:	683b      	ldr	r3, [r7, #0]
    5970:	61bb      	str	r3, [r7, #24]
            pn_equal = MP_PARSE_NODE_NULL;
    5972:	2300      	movs	r3, #0
    5974:	617b      	str	r3, [r7, #20]
    5976:	e01d      	b.n	59b4 <compile_funcdef_lambdef_param+0xb0>

        } else if (pn_kind == PN_typedargslist_name) {
    5978:	69fb      	ldr	r3, [r7, #28]
    597a:	2b40      	cmp	r3, #64	; 0x40
    597c:	d108      	bne.n	5990 <compile_funcdef_lambdef_param+0x8c>
            // this parameter has a colon and/or equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    597e:	683b      	ldr	r3, [r7, #0]
    5980:	613b      	str	r3, [r7, #16]
            pn_id = pns->nodes[0];
    5982:	693b      	ldr	r3, [r7, #16]
    5984:	689b      	ldr	r3, [r3, #8]
    5986:	61bb      	str	r3, [r7, #24]
            //pn_colon = pns->nodes[1]; // unused
            pn_equal = pns->nodes[2];
    5988:	693b      	ldr	r3, [r7, #16]
    598a:	691b      	ldr	r3, [r3, #16]
    598c:	617b      	str	r3, [r7, #20]
    598e:	e011      	b.n	59b4 <compile_funcdef_lambdef_param+0xb0>

        } else {
            assert(pn_kind == PN_varargslist_name); // should be
    5990:	69fb      	ldr	r3, [r7, #28]
    5992:	2b48      	cmp	r3, #72	; 0x48
    5994:	d006      	beq.n	59a4 <compile_funcdef_lambdef_param+0xa0>
    5996:	4b36      	ldr	r3, [pc, #216]	; (5a70 <compile_funcdef_lambdef_param+0x16c>)
    5998:	4a33      	ldr	r2, [pc, #204]	; (5a68 <compile_funcdef_lambdef_param+0x164>)
    599a:	f240 2173 	movw	r1, #627	; 0x273
    599e:	4833      	ldr	r0, [pc, #204]	; (5a6c <compile_funcdef_lambdef_param+0x168>)
    59a0:	f015 fc20 	bl	1b1e4 <__assert_func>
            // this parameter has an equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    59a4:	683b      	ldr	r3, [r7, #0]
    59a6:	60fb      	str	r3, [r7, #12]
            pn_id = pns->nodes[0];
    59a8:	68fb      	ldr	r3, [r7, #12]
    59aa:	689b      	ldr	r3, [r3, #8]
    59ac:	61bb      	str	r3, [r7, #24]
            pn_equal = pns->nodes[1];
    59ae:	68fb      	ldr	r3, [r7, #12]
    59b0:	68db      	ldr	r3, [r3, #12]
    59b2:	617b      	str	r3, [r7, #20]
        }

        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    59b4:	697b      	ldr	r3, [r7, #20]
    59b6:	2b00      	cmp	r3, #0
    59b8:	d10d      	bne.n	59d6 <compile_funcdef_lambdef_param+0xd2>
            // this parameter does not have a default value

            // check for non-default parameters given after default parameters (allowed by parser, but not syntactically valid)
            if (!comp->have_star && comp->num_default_params != 0) {
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	799b      	ldrb	r3, [r3, #6]
    59be:	2b00      	cmp	r3, #0
    59c0:	d14c      	bne.n	5a5c <compile_funcdef_lambdef_param+0x158>
    59c2:	687b      	ldr	r3, [r7, #4]
    59c4:	8adb      	ldrh	r3, [r3, #22]
    59c6:	2b00      	cmp	r3, #0
    59c8:	d048      	beq.n	5a5c <compile_funcdef_lambdef_param+0x158>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    59ca:	4a2a      	ldr	r2, [pc, #168]	; (5a74 <compile_funcdef_lambdef_param+0x170>)
    59cc:	6839      	ldr	r1, [r7, #0]
    59ce:	6878      	ldr	r0, [r7, #4]
    59d0:	f7ff f9b7 	bl	4d42 <compile_syntax_error>
                return;
    59d4:	e042      	b.n	5a5c <compile_funcdef_lambdef_param+0x158>

        } else {
            // this parameter has a default value
            // in CPython, None (and True, False?) as default parameters are loaded with LOAD_NAME; don't understandy why

            if (comp->have_star) {
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	799b      	ldrb	r3, [r3, #6]
    59da:	2b00      	cmp	r3, #0
    59dc:	d034      	beq.n	5a48 <compile_funcdef_lambdef_param+0x144>
                comp->num_dict_params += 1;
    59de:	687b      	ldr	r3, [r7, #4]
    59e0:	8a9b      	ldrh	r3, [r3, #20]
    59e2:	3301      	adds	r3, #1
    59e4:	b29a      	uxth	r2, r3
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	829a      	strh	r2, [r3, #20]
                // in MicroPython we put the default dict parameters into a dictionary using the bytecode
                if (comp->num_dict_params == 1) {
    59ea:	687b      	ldr	r3, [r7, #4]
    59ec:	8a9b      	ldrh	r3, [r3, #20]
    59ee:	2b01      	cmp	r3, #1
    59f0:	d118      	bne.n	5a24 <compile_funcdef_lambdef_param+0x120>
                    // in MicroPython we put the default positional parameters into a tuple using the bytecode
                    // we need to do this here before we start building the map for the default keywords
                    if (comp->num_default_params > 0) {
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	8adb      	ldrh	r3, [r3, #22]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d008      	beq.n	5a0c <compile_funcdef_lambdef_param+0x108>
                        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    59fa:	687b      	ldr	r3, [r7, #4]
    59fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	8adb      	ldrh	r3, [r3, #22]
    5a02:	2200      	movs	r2, #0
    5a04:	4619      	mov	r1, r3
    5a06:	f004 ffee 	bl	a9e6 <mp_emit_bc_build>
    5a0a:	e004      	b.n	5a16 <compile_funcdef_lambdef_param+0x112>
                    } else {
                        EMIT(load_null); // sentinel indicating empty default positional args
    5a0c:	687b      	ldr	r3, [r7, #4]
    5a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a10:	4618      	mov	r0, r3
    5a12:	f004 fcd3 	bl	a3bc <mp_emit_bc_load_null>
                    }
                    // first default dict param, so make the map
                    EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    5a16:	687b      	ldr	r3, [r7, #4]
    5a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a1a:	2203      	movs	r2, #3
    5a1c:	2100      	movs	r1, #0
    5a1e:	4618      	mov	r0, r3
    5a20:	f004 ffe1 	bl	a9e6 <mp_emit_bc_build>
                }

                // compile value then key, then store it to the dict
                compile_node(comp, pn_equal);
    5a24:	6979      	ldr	r1, [r7, #20]
    5a26:	6878      	ldr	r0, [r7, #4]
    5a28:	f002 ff8b 	bl	8942 <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a30:	69bb      	ldr	r3, [r7, #24]
    5a32:	091b      	lsrs	r3, r3, #4
    5a34:	4619      	mov	r1, r3
    5a36:	4610      	mov	r0, r2
    5a38:	f004 fc9c 	bl	a374 <mp_emit_bc_load_const_str>
                EMIT(store_map);
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a40:	4618      	mov	r0, r3
    5a42:	f004 fff2 	bl	aa2a <mp_emit_bc_store_map>
    5a46:	e009      	b.n	5a5c <compile_funcdef_lambdef_param+0x158>
            } else {
                comp->num_default_params += 1;
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	8adb      	ldrh	r3, [r3, #22]
    5a4c:	3301      	adds	r3, #1
    5a4e:	b29a      	uxth	r2, r3
    5a50:	687b      	ldr	r3, [r7, #4]
    5a52:	82da      	strh	r2, [r3, #22]
                compile_node(comp, pn_equal);
    5a54:	6979      	ldr	r1, [r7, #20]
    5a56:	6878      	ldr	r0, [r7, #4]
    5a58:	f002 ff73 	bl	8942 <compile_node>
            }
        }
    }
}
    5a5c:	3720      	adds	r7, #32
    5a5e:	46bd      	mov	sp, r7
    5a60:	bd80      	pop	{r7, pc}
    5a62:	bf00      	nop
    5a64:	0001fb2c 	.word	0x0001fb2c
    5a68:	000205c4 	.word	0x000205c4
    5a6c:	0001f9e4 	.word	0x0001f9e4
    5a70:	0001fb48 	.word	0x0001fb48
    5a74:	0001fb68 	.word	0x0001fb68

00005a78 <compile_funcdef_lambdef>:

STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    5a78:	b580      	push	{r7, lr}
    5a7a:	b086      	sub	sp, #24
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	60f8      	str	r0, [r7, #12]
    5a80:	60b9      	str	r1, [r7, #8]
    5a82:	607a      	str	r2, [r7, #4]
    5a84:	603b      	str	r3, [r7, #0]
    // When we call compile_funcdef_lambdef_param below it can compile an arbitrary
    // expression for default arguments, which may contain a lambda.  The lambda will
    // call here in a nested way, so we must save and restore the relevant state.
    bool orig_have_star = comp->have_star;
    5a86:	68fb      	ldr	r3, [r7, #12]
    5a88:	799b      	ldrb	r3, [r3, #6]
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	bf14      	ite	ne
    5a8e:	2301      	movne	r3, #1
    5a90:	2300      	moveq	r3, #0
    5a92:	75fb      	strb	r3, [r7, #23]
    uint16_t orig_num_dict_params = comp->num_dict_params;
    5a94:	68fb      	ldr	r3, [r7, #12]
    5a96:	8a9b      	ldrh	r3, [r3, #20]
    5a98:	82bb      	strh	r3, [r7, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    5a9a:	68fb      	ldr	r3, [r7, #12]
    5a9c:	8adb      	ldrh	r3, [r3, #22]
    5a9e:	827b      	strh	r3, [r7, #18]

    // compile default parameters
    comp->have_star = false;
    5aa0:	68fb      	ldr	r3, [r7, #12]
    5aa2:	2200      	movs	r2, #0
    5aa4:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = 0;
    5aa6:	68fb      	ldr	r3, [r7, #12]
    5aa8:	2200      	movs	r2, #0
    5aaa:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = 0;
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	2200      	movs	r2, #0
    5ab0:	82da      	strh	r2, [r3, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    5ab2:	4b1b      	ldr	r3, [pc, #108]	; (5b20 <compile_funcdef_lambdef+0xa8>)
    5ab4:	683a      	ldr	r2, [r7, #0]
    5ab6:	6879      	ldr	r1, [r7, #4]
    5ab8:	68f8      	ldr	r0, [r7, #12]
    5aba:	f7ff f9d8 	bl	4e6e <apply_to_single_or_list>

    if (comp->compile_error != MP_OBJ_NULL) {
    5abe:	68fb      	ldr	r3, [r7, #12]
    5ac0:	689b      	ldr	r3, [r3, #8]
    5ac2:	2b00      	cmp	r3, #0
    5ac4:	d127      	bne.n	5b16 <compile_funcdef_lambdef+0x9e>
        return;
    }

    // in MicroPython we put the default positional parameters into a tuple using the bytecode
    // the default keywords args may have already made the tuple; if not, do it now
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    5ac6:	68fb      	ldr	r3, [r7, #12]
    5ac8:	8adb      	ldrh	r3, [r3, #22]
    5aca:	2b00      	cmp	r3, #0
    5acc:	d010      	beq.n	5af0 <compile_funcdef_lambdef+0x78>
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	8a9b      	ldrh	r3, [r3, #20]
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d10c      	bne.n	5af0 <compile_funcdef_lambdef+0x78>
        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5ad6:	68fb      	ldr	r3, [r7, #12]
    5ad8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5ada:	68fb      	ldr	r3, [r7, #12]
    5adc:	8adb      	ldrh	r3, [r3, #22]
    5ade:	2200      	movs	r2, #0
    5ae0:	4619      	mov	r1, r3
    5ae2:	f004 ff80 	bl	a9e6 <mp_emit_bc_build>
        EMIT(load_null); // sentinel indicating empty default keyword args
    5ae6:	68fb      	ldr	r3, [r7, #12]
    5ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5aea:	4618      	mov	r0, r3
    5aec:	f004 fc66 	bl	a3bc <mp_emit_bc_load_null>
    }

    // make the function
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    5af0:	68fb      	ldr	r3, [r7, #12]
    5af2:	8adb      	ldrh	r3, [r3, #22]
    5af4:	461a      	mov	r2, r3
    5af6:	68fb      	ldr	r3, [r7, #12]
    5af8:	8a9b      	ldrh	r3, [r3, #20]
    5afa:	68b9      	ldr	r1, [r7, #8]
    5afc:	68f8      	ldr	r0, [r7, #12]
    5afe:	f7ff fe6b 	bl	57d8 <close_over_variables_etc>

    // restore state
    comp->have_star = orig_have_star;
    5b02:	7dfa      	ldrb	r2, [r7, #23]
    5b04:	68fb      	ldr	r3, [r7, #12]
    5b06:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = orig_num_dict_params;
    5b08:	68fb      	ldr	r3, [r7, #12]
    5b0a:	8aba      	ldrh	r2, [r7, #20]
    5b0c:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = orig_num_default_params;
    5b0e:	68fb      	ldr	r3, [r7, #12]
    5b10:	8a7a      	ldrh	r2, [r7, #18]
    5b12:	82da      	strh	r2, [r3, #22]
    5b14:	e000      	b.n	5b18 <compile_funcdef_lambdef+0xa0>
        return;
    5b16:	bf00      	nop
}
    5b18:	3718      	adds	r7, #24
    5b1a:	46bd      	mov	sp, r7
    5b1c:	bd80      	pop	{r7, pc}
    5b1e:	bf00      	nop
    5b20:	00005905 	.word	0x00005905

00005b24 <compile_funcdef_helper>:

// leaves function object on stack
// returns function name
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5b24:	b580      	push	{r7, lr}
    5b26:	b086      	sub	sp, #24
    5b28:	af00      	add	r7, sp, #0
    5b2a:	60f8      	str	r0, [r7, #12]
    5b2c:	60b9      	str	r1, [r7, #8]
    5b2e:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	795b      	ldrb	r3, [r3, #5]
    5b34:	2b01      	cmp	r3, #1
    5b36:	d109      	bne.n	5b4c <compile_funcdef_helper+0x28>
        // create a new scope for this function
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    5b38:	68ba      	ldr	r2, [r7, #8]
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	2107      	movs	r1, #7
    5b3e:	68f8      	ldr	r0, [r7, #12]
    5b40:	f7ff f964 	bl	4e0c <scope_new_and_link>
    5b44:	6178      	str	r0, [r7, #20]
        // store the function scope so the compiling function can use it at each pass
        pns->nodes[4] = (mp_parse_node_t)s;
    5b46:	697a      	ldr	r2, [r7, #20]
    5b48:	68bb      	ldr	r3, [r7, #8]
    5b4a:	619a      	str	r2, [r3, #24]
    }

    // get the scope for this function
    scope_t *fscope = (scope_t*)pns->nodes[4];
    5b4c:	68bb      	ldr	r3, [r7, #8]
    5b4e:	699b      	ldr	r3, [r3, #24]
    5b50:	613b      	str	r3, [r7, #16]

    // compile the function definition
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    5b52:	68bb      	ldr	r3, [r7, #8]
    5b54:	68da      	ldr	r2, [r3, #12]
    5b56:	233e      	movs	r3, #62	; 0x3e
    5b58:	6939      	ldr	r1, [r7, #16]
    5b5a:	68f8      	ldr	r0, [r7, #12]
    5b5c:	f7ff ff8c 	bl	5a78 <compile_funcdef_lambdef>

    // return its name (the 'f' in "def f(...):")
    return fscope->simple_name;
    5b60:	693b      	ldr	r3, [r7, #16]
    5b62:	8a5b      	ldrh	r3, [r3, #18]
}
    5b64:	4618      	mov	r0, r3
    5b66:	3718      	adds	r7, #24
    5b68:	46bd      	mov	sp, r7
    5b6a:	bd80      	pop	{r7, pc}

00005b6c <compile_classdef_helper>:

// leaves class object on stack
// returns class name
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5b6c:	b580      	push	{r7, lr}
    5b6e:	b088      	sub	sp, #32
    5b70:	af00      	add	r7, sp, #0
    5b72:	60f8      	str	r0, [r7, #12]
    5b74:	60b9      	str	r1, [r7, #8]
    5b76:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5b78:	68fb      	ldr	r3, [r7, #12]
    5b7a:	795b      	ldrb	r3, [r3, #5]
    5b7c:	2b01      	cmp	r3, #1
    5b7e:	d109      	bne.n	5b94 <compile_classdef_helper+0x28>
        // create a new scope for this class
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    5b80:	68ba      	ldr	r2, [r7, #8]
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	2101      	movs	r1, #1
    5b86:	68f8      	ldr	r0, [r7, #12]
    5b88:	f7ff f940 	bl	4e0c <scope_new_and_link>
    5b8c:	61b8      	str	r0, [r7, #24]
        // store the class scope so the compiling function can use it at each pass
        pns->nodes[3] = (mp_parse_node_t)s;
    5b8e:	69ba      	ldr	r2, [r7, #24]
    5b90:	68bb      	ldr	r3, [r7, #8]
    5b92:	615a      	str	r2, [r3, #20]
    }

    EMIT(load_build_class);
    5b94:	68fb      	ldr	r3, [r7, #12]
    5b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b98:	4618      	mov	r0, r3
    5b9a:	f004 fc7b 	bl	a494 <mp_emit_bc_load_build_class>

    // scope for this class
    scope_t *cscope = (scope_t*)pns->nodes[3];
    5b9e:	68bb      	ldr	r3, [r7, #8]
    5ba0:	695b      	ldr	r3, [r3, #20]
    5ba2:	617b      	str	r3, [r7, #20]

    // compile the class
    close_over_variables_etc(comp, cscope, 0, 0);
    5ba4:	2300      	movs	r3, #0
    5ba6:	2200      	movs	r2, #0
    5ba8:	6979      	ldr	r1, [r7, #20]
    5baa:	68f8      	ldr	r0, [r7, #12]
    5bac:	f7ff fe14 	bl	57d8 <close_over_variables_etc>

    // get its name
    EMIT_ARG(load_const_str, cscope->simple_name);
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5bb4:	697b      	ldr	r3, [r7, #20]
    5bb6:	8a5b      	ldrh	r3, [r3, #18]
    5bb8:	4619      	mov	r1, r3
    5bba:	4610      	mov	r0, r2
    5bbc:	f004 fbda 	bl	a374 <mp_emit_bc_load_const_str>

    // nodes[1] has parent classes, if any
    // empty parenthesis (eg class C():) gets here as an empty PN_classdef_2 and needs special handling
    mp_parse_node_t parents = pns->nodes[1];
    5bc0:	68bb      	ldr	r3, [r7, #8]
    5bc2:	68db      	ldr	r3, [r3, #12]
    5bc4:	61fb      	str	r3, [r7, #28]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    5bc6:	69fb      	ldr	r3, [r7, #28]
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d00b      	beq.n	5be4 <compile_classdef_helper+0x78>
    5bcc:	69fb      	ldr	r3, [r7, #28]
    5bce:	f003 0303 	and.w	r3, r3, #3
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d106      	bne.n	5be4 <compile_classdef_helper+0x78>
    5bd6:	69fb      	ldr	r3, [r7, #28]
    5bd8:	685b      	ldr	r3, [r3, #4]
    5bda:	b2db      	uxtb	r3, r3
    5bdc:	2b96      	cmp	r3, #150	; 0x96
    5bde:	d101      	bne.n	5be4 <compile_classdef_helper+0x78>
        parents = MP_PARSE_NODE_NULL;
    5be0:	2300      	movs	r3, #0
    5be2:	61fb      	str	r3, [r7, #28]
    }
    compile_trailer_paren_helper(comp, parents, false, 2);
    5be4:	2302      	movs	r3, #2
    5be6:	2200      	movs	r2, #0
    5be8:	69f9      	ldr	r1, [r7, #28]
    5bea:	68f8      	ldr	r0, [r7, #12]
    5bec:	f002 fa49 	bl	8082 <compile_trailer_paren_helper>

    // return its name (the 'C' in class C(...):")
    return cscope->simple_name;
    5bf0:	697b      	ldr	r3, [r7, #20]
    5bf2:	8a5b      	ldrh	r3, [r3, #18]
}
    5bf4:	4618      	mov	r0, r3
    5bf6:	3720      	adds	r7, #32
    5bf8:	46bd      	mov	sp, r7
    5bfa:	bd80      	pop	{r7, pc}

00005bfc <compile_built_in_decorator>:

// returns true if it was a built-in decorator (even if the built-in had an error)
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b086      	sub	sp, #24
    5c00:	af00      	add	r7, sp, #0
    5c02:	60f8      	str	r0, [r7, #12]
    5c04:	60b9      	str	r1, [r7, #8]
    5c06:	607a      	str	r2, [r7, #4]
    5c08:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5c0a:	687b      	ldr	r3, [r7, #4]
    5c0c:	681b      	ldr	r3, [r3, #0]
    5c0e:	091b      	lsrs	r3, r3, #4
    5c10:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
    5c14:	d001      	beq.n	5c1a <compile_built_in_decorator+0x1e>
        return false;
    5c16:	2300      	movs	r3, #0
    5c18:	e020      	b.n	5c5c <compile_built_in_decorator+0x60>
    }

    if (name_len != 2) {
    5c1a:	68bb      	ldr	r3, [r7, #8]
    5c1c:	2b02      	cmp	r3, #2
    5c1e:	d008      	beq.n	5c32 <compile_built_in_decorator+0x36>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5c20:	687b      	ldr	r3, [r7, #4]
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	4a0f      	ldr	r2, [pc, #60]	; (5c64 <compile_built_in_decorator+0x68>)
    5c26:	4619      	mov	r1, r3
    5c28:	68f8      	ldr	r0, [r7, #12]
    5c2a:	f7ff f88a 	bl	4d42 <compile_syntax_error>
        return true;
    5c2e:	2301      	movs	r3, #1
    5c30:	e014      	b.n	5c5c <compile_built_in_decorator+0x60>
    }

    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5c32:	687b      	ldr	r3, [r7, #4]
    5c34:	3304      	adds	r3, #4
    5c36:	681b      	ldr	r3, [r3, #0]
    5c38:	091b      	lsrs	r3, r3, #4
    5c3a:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_bytecode) {
    5c3c:	697b      	ldr	r3, [r7, #20]
    5c3e:	2bf3      	cmp	r3, #243	; 0xf3
    5c40:	d103      	bne.n	5c4a <compile_built_in_decorator+0x4e>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5c42:	683b      	ldr	r3, [r7, #0]
    5c44:	2201      	movs	r2, #1
    5c46:	601a      	str	r2, [r3, #0]
    5c48:	e007      	b.n	5c5a <compile_built_in_decorator+0x5e>
    #if MICROPY_EMIT_INLINE_ASM
    } else if (attr == ASM_DECORATOR_QSTR) {
        *emit_options = MP_EMIT_OPT_ASM;
    #endif
    } else {
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	3304      	adds	r3, #4
    5c4e:	681b      	ldr	r3, [r3, #0]
    5c50:	4a04      	ldr	r2, [pc, #16]	; (5c64 <compile_built_in_decorator+0x68>)
    5c52:	4619      	mov	r1, r3
    5c54:	68f8      	ldr	r0, [r7, #12]
    5c56:	f7ff f874 	bl	4d42 <compile_syntax_error>
    }

    return true;
    5c5a:	2301      	movs	r3, #1
}
    5c5c:	4618      	mov	r0, r3
    5c5e:	3718      	adds	r7, #24
    5c60:	46bd      	mov	sp, r7
    5c62:	bd80      	pop	{r7, pc}
    5c64:	0001fb98 	.word	0x0001fb98

00005c68 <compile_decorated>:

STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5c68:	b580      	push	{r7, lr}
    5c6a:	b08e      	sub	sp, #56	; 0x38
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	6078      	str	r0, [r7, #4]
    5c70:	6039      	str	r1, [r7, #0]
    // get the list of decorators
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    5c72:	683b      	ldr	r3, [r7, #0]
    5c74:	3308      	adds	r3, #8
    5c76:	f107 0210 	add.w	r2, r7, #16
    5c7a:	213b      	movs	r1, #59	; 0x3b
    5c7c:	4618      	mov	r0, r3
    5c7e:	f7fd ff69 	bl	3b54 <mp_parse_node_extract_list>
    5c82:	6238      	str	r0, [r7, #32]

    // inherit emit options for this function/class definition
    uint emit_options = comp->scope_cur->emit_options;
    5c84:	687b      	ldr	r3, [r7, #4]
    5c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5c88:	7e5b      	ldrb	r3, [r3, #25]
    5c8a:	60fb      	str	r3, [r7, #12]

    // compile each decorator
    int num_built_in_decorators = 0;
    5c8c:	2300      	movs	r3, #0
    5c8e:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n; i++) {
    5c90:	2300      	movs	r3, #0
    5c92:	633b      	str	r3, [r7, #48]	; 0x30
    5c94:	e075      	b.n	5d82 <compile_decorated+0x11a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    5c96:	693a      	ldr	r2, [r7, #16]
    5c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5c9a:	009b      	lsls	r3, r3, #2
    5c9c:	4413      	add	r3, r2
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d011      	beq.n	5cc8 <compile_decorated+0x60>
    5ca4:	693a      	ldr	r2, [r7, #16]
    5ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ca8:	009b      	lsls	r3, r3, #2
    5caa:	4413      	add	r3, r2
    5cac:	681b      	ldr	r3, [r3, #0]
    5cae:	f003 0303 	and.w	r3, r3, #3
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d108      	bne.n	5cc8 <compile_decorated+0x60>
    5cb6:	693a      	ldr	r2, [r7, #16]
    5cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cba:	009b      	lsls	r3, r3, #2
    5cbc:	4413      	add	r3, r2
    5cbe:	681b      	ldr	r3, [r3, #0]
    5cc0:	685b      	ldr	r3, [r3, #4]
    5cc2:	b2db      	uxtb	r3, r3
    5cc4:	2b3a      	cmp	r3, #58	; 0x3a
    5cc6:	d006      	beq.n	5cd6 <compile_decorated+0x6e>
    5cc8:	4b50      	ldr	r3, [pc, #320]	; (5e0c <compile_decorated+0x1a4>)
    5cca:	4a51      	ldr	r2, [pc, #324]	; (5e10 <compile_decorated+0x1a8>)
    5ccc:	f44f 7149 	mov.w	r1, #804	; 0x324
    5cd0:	4850      	ldr	r0, [pc, #320]	; (5e14 <compile_decorated+0x1ac>)
    5cd2:	f015 fa87 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns_decorator = (mp_parse_node_struct_t*)nodes[i];
    5cd6:	693a      	ldr	r2, [r7, #16]
    5cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cda:	009b      	lsls	r3, r3, #2
    5cdc:	4413      	add	r3, r2
    5cde:	681b      	ldr	r3, [r3, #0]
    5ce0:	61fb      	str	r3, [r7, #28]

        // nodes[0] contains the decorator function, which is a dotted name
        mp_parse_node_t *name_nodes;
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    5ce2:	69fb      	ldr	r3, [r7, #28]
    5ce4:	3308      	adds	r3, #8
    5ce6:	f107 0208 	add.w	r2, r7, #8
    5cea:	2166      	movs	r1, #102	; 0x66
    5cec:	4618      	mov	r0, r3
    5cee:	f7fd ff31 	bl	3b54 <mp_parse_node_extract_list>
    5cf2:	61b8      	str	r0, [r7, #24]

        // check for built-in decorators
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    5cf4:	68ba      	ldr	r2, [r7, #8]
    5cf6:	f107 030c 	add.w	r3, r7, #12
    5cfa:	69b9      	ldr	r1, [r7, #24]
    5cfc:	6878      	ldr	r0, [r7, #4]
    5cfe:	f7ff ff7d 	bl	5bfc <compile_built_in_decorator>
    5d02:	4603      	mov	r3, r0
    5d04:	2b00      	cmp	r3, #0
    5d06:	d003      	beq.n	5d10 <compile_decorated+0xa8>
            // this was a built-in
            num_built_in_decorators += 1;
    5d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d0a:	3301      	adds	r3, #1
    5d0c:	637b      	str	r3, [r7, #52]	; 0x34
    5d0e:	e035      	b.n	5d7c <compile_decorated+0x114>

        } else {
            // not a built-in, compile normally

            // compile the decorator function
            compile_node(comp, name_nodes[0]);
    5d10:	68bb      	ldr	r3, [r7, #8]
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	4619      	mov	r1, r3
    5d16:	6878      	ldr	r0, [r7, #4]
    5d18:	f002 fe13 	bl	8942 <compile_node>
            for (int j = 1; j < name_len; j++) {
    5d1c:	2301      	movs	r3, #1
    5d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d20:	e01e      	b.n	5d60 <compile_decorated+0xf8>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    5d22:	68ba      	ldr	r2, [r7, #8]
    5d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d26:	009b      	lsls	r3, r3, #2
    5d28:	4413      	add	r3, r2
    5d2a:	681b      	ldr	r3, [r3, #0]
    5d2c:	f003 030f 	and.w	r3, r3, #15
    5d30:	2b02      	cmp	r3, #2
    5d32:	d006      	beq.n	5d42 <compile_decorated+0xda>
    5d34:	4b38      	ldr	r3, [pc, #224]	; (5e18 <compile_decorated+0x1b0>)
    5d36:	4a36      	ldr	r2, [pc, #216]	; (5e10 <compile_decorated+0x1a8>)
    5d38:	f240 3136 	movw	r1, #822	; 0x336
    5d3c:	4835      	ldr	r0, [pc, #212]	; (5e14 <compile_decorated+0x1ac>)
    5d3e:	f015 fa51 	bl	1b1e4 <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]), MP_EMIT_ATTR_LOAD);
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5d46:	68ba      	ldr	r2, [r7, #8]
    5d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d4a:	009b      	lsls	r3, r3, #2
    5d4c:	4413      	add	r3, r2
    5d4e:	681b      	ldr	r3, [r3, #0]
    5d50:	091b      	lsrs	r3, r3, #4
    5d52:	2200      	movs	r2, #0
    5d54:	4619      	mov	r1, r3
    5d56:	f004 fbd5 	bl	a504 <mp_emit_bc_attr>
            for (int j = 1; j < name_len; j++) {
    5d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d5c:	3301      	adds	r3, #1
    5d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5d62:	69bb      	ldr	r3, [r7, #24]
    5d64:	429a      	cmp	r2, r3
    5d66:	dbdc      	blt.n	5d22 <compile_decorated+0xba>
            }

            // nodes[1] contains arguments to the decorator function, if any
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    5d68:	69fb      	ldr	r3, [r7, #28]
    5d6a:	68db      	ldr	r3, [r3, #12]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d005      	beq.n	5d7c <compile_decorated+0x114>
                // call the decorator function with the arguments in nodes[1]
                compile_node(comp, pns_decorator->nodes[1]);
    5d70:	69fb      	ldr	r3, [r7, #28]
    5d72:	68db      	ldr	r3, [r3, #12]
    5d74:	4619      	mov	r1, r3
    5d76:	6878      	ldr	r0, [r7, #4]
    5d78:	f002 fde3 	bl	8942 <compile_node>
    for (int i = 0; i < n; i++) {
    5d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d7e:	3301      	adds	r3, #1
    5d80:	633b      	str	r3, [r7, #48]	; 0x30
    5d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5d84:	6a3b      	ldr	r3, [r7, #32]
    5d86:	429a      	cmp	r2, r3
    5d88:	db85      	blt.n	5c96 <compile_decorated+0x2e>
            }
        }
    }

    // compile the body (funcdef, async funcdef or classdef) and get its name
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    5d8a:	683b      	ldr	r3, [r7, #0]
    5d8c:	68db      	ldr	r3, [r3, #12]
    5d8e:	617b      	str	r3, [r7, #20]
    qstr body_name = 0;
    5d90:	2300      	movs	r3, #0
    5d92:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    5d94:	697b      	ldr	r3, [r7, #20]
    5d96:	685b      	ldr	r3, [r3, #4]
    5d98:	b2db      	uxtb	r3, r3
    5d9a:	2b03      	cmp	r3, #3
    5d9c:	d107      	bne.n	5dae <compile_decorated+0x146>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    5d9e:	68fb      	ldr	r3, [r7, #12]
    5da0:	461a      	mov	r2, r3
    5da2:	6979      	ldr	r1, [r7, #20]
    5da4:	6878      	ldr	r0, [r7, #4]
    5da6:	f7ff febd 	bl	5b24 <compile_funcdef_helper>
    5daa:	62b8      	str	r0, [r7, #40]	; 0x28
    5dac:	e012      	b.n	5dd4 <compile_decorated+0x16c>
        body_name = compile_funcdef_helper(comp, pns0, emit_options);
        scope_t *fscope = (scope_t*)pns0->nodes[4];
        fscope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    #endif
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    5dae:	697b      	ldr	r3, [r7, #20]
    5db0:	685b      	ldr	r3, [r3, #4]
    5db2:	b2db      	uxtb	r3, r3
    5db4:	2b33      	cmp	r3, #51	; 0x33
    5db6:	d006      	beq.n	5dc6 <compile_decorated+0x15e>
    5db8:	4b18      	ldr	r3, [pc, #96]	; (5e1c <compile_decorated+0x1b4>)
    5dba:	4a15      	ldr	r2, [pc, #84]	; (5e10 <compile_decorated+0x1a8>)
    5dbc:	f44f 7154 	mov.w	r1, #848	; 0x350
    5dc0:	4814      	ldr	r0, [pc, #80]	; (5e14 <compile_decorated+0x1ac>)
    5dc2:	f015 fa0f 	bl	1b1e4 <__assert_func>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    5dc6:	68fb      	ldr	r3, [r7, #12]
    5dc8:	461a      	mov	r2, r3
    5dca:	6979      	ldr	r1, [r7, #20]
    5dcc:	6878      	ldr	r0, [r7, #4]
    5dce:	f7ff fecd 	bl	5b6c <compile_classdef_helper>
    5dd2:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    // call each decorator
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5dd4:	2300      	movs	r3, #0
    5dd6:	627b      	str	r3, [r7, #36]	; 0x24
    5dd8:	e009      	b.n	5dee <compile_decorated+0x186>
        EMIT_ARG(call_function, 1, 0, 0);
    5dda:	687b      	ldr	r3, [r7, #4]
    5ddc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5dde:	2300      	movs	r3, #0
    5de0:	2200      	movs	r2, #0
    5de2:	2101      	movs	r1, #1
    5de4:	f004 ff34 	bl	ac50 <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5dea:	3301      	adds	r3, #1
    5dec:	627b      	str	r3, [r7, #36]	; 0x24
    5dee:	6a3a      	ldr	r2, [r7, #32]
    5df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5df2:	1ad2      	subs	r2, r2, r3
    5df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5df6:	429a      	cmp	r2, r3
    5df8:	dcef      	bgt.n	5dda <compile_decorated+0x172>
    }

    // store func/class object into name
    compile_store_id(comp, body_name);
    5dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5dfc:	6878      	ldr	r0, [r7, #4]
    5dfe:	f7ff f8bd 	bl	4f7c <compile_store_id>
}
    5e02:	bf00      	nop
    5e04:	3738      	adds	r7, #56	; 0x38
    5e06:	46bd      	mov	sp, r7
    5e08:	bd80      	pop	{r7, pc}
    5e0a:	bf00      	nop
    5e0c:	0001fbb8 	.word	0x0001fbb8
    5e10:	000205e4 	.word	0x000205e4
    5e14:	0001f9e4 	.word	0x0001f9e4
    5e18:	0001fbf0 	.word	0x0001fbf0
    5e1c:	0001fc14 	.word	0x0001fc14

00005e20 <compile_funcdef>:

STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5e20:	b580      	push	{r7, lr}
    5e22:	b084      	sub	sp, #16
    5e24:	af00      	add	r7, sp, #0
    5e26:	6078      	str	r0, [r7, #4]
    5e28:	6039      	str	r1, [r7, #0]
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    5e2a:	687b      	ldr	r3, [r7, #4]
    5e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e2e:	7e5b      	ldrb	r3, [r3, #25]
    5e30:	461a      	mov	r2, r3
    5e32:	6839      	ldr	r1, [r7, #0]
    5e34:	6878      	ldr	r0, [r7, #4]
    5e36:	f7ff fe75 	bl	5b24 <compile_funcdef_helper>
    5e3a:	60f8      	str	r0, [r7, #12]
    // store function object into function name
    compile_store_id(comp, fname);
    5e3c:	68f9      	ldr	r1, [r7, #12]
    5e3e:	6878      	ldr	r0, [r7, #4]
    5e40:	f7ff f89c 	bl	4f7c <compile_store_id>
}
    5e44:	bf00      	nop
    5e46:	3710      	adds	r7, #16
    5e48:	46bd      	mov	sp, r7
    5e4a:	bd80      	pop	{r7, pc}

00005e4c <c_del_stmt>:

STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    5e4c:	b580      	push	{r7, lr}
    5e4e:	b08a      	sub	sp, #40	; 0x28
    5e50:	af00      	add	r7, sp, #0
    5e52:	6078      	str	r0, [r7, #4]
    5e54:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5e56:	683b      	ldr	r3, [r7, #0]
    5e58:	f003 030f 	and.w	r3, r3, #15
    5e5c:	2b02      	cmp	r3, #2
    5e5e:	d106      	bne.n	5e6e <c_del_stmt+0x22>
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    5e60:	683b      	ldr	r3, [r7, #0]
    5e62:	091b      	lsrs	r3, r3, #4
    5e64:	4619      	mov	r1, r3
    5e66:	6878      	ldr	r0, [r7, #4]
    5e68:	f7ff f8a6 	bl	4fb8 <compile_delete_id>
    } else {
        // some arbitrary statement that we can't delete (eg del 1)
        goto cannot_delete;
    }

    return;
    5e6c:	e122      	b.n	60b4 <c_del_stmt+0x268>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5e6e:	683b      	ldr	r3, [r7, #0]
    5e70:	2b00      	cmp	r3, #0
    5e72:	f000 808f 	beq.w	5f94 <c_del_stmt+0x148>
    5e76:	683b      	ldr	r3, [r7, #0]
    5e78:	f003 0303 	and.w	r3, r3, #3
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	f040 8089 	bne.w	5f94 <c_del_stmt+0x148>
    5e82:	683b      	ldr	r3, [r7, #0]
    5e84:	685b      	ldr	r3, [r3, #4]
    5e86:	b2db      	uxtb	r3, r3
    5e88:	2b29      	cmp	r3, #41	; 0x29
    5e8a:	f040 8083 	bne.w	5f94 <c_del_stmt+0x148>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5e8e:	683b      	ldr	r3, [r7, #0]
    5e90:	61bb      	str	r3, [r7, #24]
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    5e92:	69bb      	ldr	r3, [r7, #24]
    5e94:	689b      	ldr	r3, [r3, #8]
    5e96:	4619      	mov	r1, r3
    5e98:	6878      	ldr	r0, [r7, #4]
    5e9a:	f002 fd52 	bl	8942 <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5e9e:	69bb      	ldr	r3, [r7, #24]
    5ea0:	68db      	ldr	r3, [r3, #12]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	f000 8101 	beq.w	60aa <c_del_stmt+0x25e>
    5ea8:	69bb      	ldr	r3, [r7, #24]
    5eaa:	68db      	ldr	r3, [r3, #12]
    5eac:	f003 0303 	and.w	r3, r3, #3
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	f040 80fa 	bne.w	60aa <c_del_stmt+0x25e>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    5eb6:	69bb      	ldr	r3, [r7, #24]
    5eb8:	68db      	ldr	r3, [r3, #12]
    5eba:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ebe:	685b      	ldr	r3, [r3, #4]
    5ec0:	b2db      	uxtb	r3, r3
    5ec2:	2b86      	cmp	r3, #134	; 0x86
    5ec4:	d137      	bne.n	5f36 <c_del_stmt+0xea>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    5ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ec8:	685b      	ldr	r3, [r3, #4]
    5eca:	0a1b      	lsrs	r3, r3, #8
    5ecc:	617b      	str	r3, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    5ece:	2300      	movs	r3, #0
    5ed0:	623b      	str	r3, [r7, #32]
    5ed2:	e00b      	b.n	5eec <c_del_stmt+0xa0>
                    compile_node(comp, pns1->nodes[i]);
    5ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ed6:	6a3a      	ldr	r2, [r7, #32]
    5ed8:	3202      	adds	r2, #2
    5eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ede:	4619      	mov	r1, r3
    5ee0:	6878      	ldr	r0, [r7, #4]
    5ee2:	f002 fd2e 	bl	8942 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5ee6:	6a3b      	ldr	r3, [r7, #32]
    5ee8:	3301      	adds	r3, #1
    5eea:	623b      	str	r3, [r7, #32]
    5eec:	697b      	ldr	r3, [r7, #20]
    5eee:	1e5a      	subs	r2, r3, #1
    5ef0:	6a3b      	ldr	r3, [r7, #32]
    5ef2:	429a      	cmp	r2, r3
    5ef4:	dcee      	bgt.n	5ed4 <c_del_stmt+0x88>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5ef6:	697b      	ldr	r3, [r7, #20]
    5ef8:	1e5a      	subs	r2, r3, #1
    5efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5efc:	3202      	adds	r2, #2
    5efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f02:	2b00      	cmp	r3, #0
    5f04:	d009      	beq.n	5f1a <c_del_stmt+0xce>
    5f06:	697b      	ldr	r3, [r7, #20]
    5f08:	1e5a      	subs	r2, r3, #1
    5f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f0c:	3202      	adds	r2, #2
    5f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f12:	f003 0303 	and.w	r3, r3, #3
    5f16:	2b00      	cmp	r3, #0
    5f18:	d006      	beq.n	5f28 <c_del_stmt+0xdc>
    5f1a:	4b68      	ldr	r3, [pc, #416]	; (60bc <c_del_stmt+0x270>)
    5f1c:	4a68      	ldr	r2, [pc, #416]	; (60c0 <c_del_stmt+0x274>)
    5f1e:	f240 3172 	movw	r1, #882	; 0x372
    5f22:	4868      	ldr	r0, [pc, #416]	; (60c4 <c_del_stmt+0x278>)
    5f24:	f015 f95e 	bl	1b1e4 <__assert_func>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    5f28:	697b      	ldr	r3, [r7, #20]
    5f2a:	1e5a      	subs	r2, r3, #1
    5f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f2e:	3202      	adds	r2, #2
    5f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f34:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f38:	685b      	ldr	r3, [r3, #4]
    5f3a:	b2db      	uxtb	r3, r3
    5f3c:	2b2e      	cmp	r3, #46	; 0x2e
    5f3e:	d10c      	bne.n	5f5a <c_del_stmt+0x10e>
                compile_node(comp, pns1->nodes[0]);
    5f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f42:	689b      	ldr	r3, [r3, #8]
    5f44:	4619      	mov	r1, r3
    5f46:	6878      	ldr	r0, [r7, #4]
    5f48:	f002 fcfb 	bl	8942 <compile_node>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_DELETE);
    5f4c:	687b      	ldr	r3, [r7, #4]
    5f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f50:	2102      	movs	r1, #2
    5f52:	4618      	mov	r0, r3
    5f54:	f004 faae 	bl	a4b4 <mp_emit_bc_subscr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5f58:	e0a1      	b.n	609e <c_del_stmt+0x252>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f5c:	685b      	ldr	r3, [r3, #4]
    5f5e:	b2db      	uxtb	r3, r3
    5f60:	2b2f      	cmp	r3, #47	; 0x2f
    5f62:	f040 809d 	bne.w	60a0 <c_del_stmt+0x254>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    5f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f68:	689b      	ldr	r3, [r3, #8]
    5f6a:	f003 030f 	and.w	r3, r3, #15
    5f6e:	2b02      	cmp	r3, #2
    5f70:	d006      	beq.n	5f80 <c_del_stmt+0x134>
    5f72:	4b55      	ldr	r3, [pc, #340]	; (60c8 <c_del_stmt+0x27c>)
    5f74:	4a52      	ldr	r2, [pc, #328]	; (60c0 <c_del_stmt+0x274>)
    5f76:	f240 3179 	movw	r1, #889	; 0x379
    5f7a:	4852      	ldr	r0, [pc, #328]	; (60c4 <c_del_stmt+0x278>)
    5f7c:	f015 f932 	bl	1b1e4 <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_DELETE);
    5f80:	687b      	ldr	r3, [r7, #4]
    5f82:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f86:	689b      	ldr	r3, [r3, #8]
    5f88:	091b      	lsrs	r3, r3, #4
    5f8a:	2202      	movs	r2, #2
    5f8c:	4619      	mov	r1, r3
    5f8e:	f004 fab9 	bl	a504 <mp_emit_bc_attr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5f92:	e084      	b.n	609e <c_del_stmt+0x252>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    5f94:	683b      	ldr	r3, [r7, #0]
    5f96:	2b00      	cmp	r3, #0
    5f98:	f000 8087 	beq.w	60aa <c_del_stmt+0x25e>
    5f9c:	683b      	ldr	r3, [r7, #0]
    5f9e:	f003 0303 	and.w	r3, r3, #3
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	f040 8081 	bne.w	60aa <c_del_stmt+0x25e>
    5fa8:	683b      	ldr	r3, [r7, #0]
    5faa:	685b      	ldr	r3, [r3, #4]
    5fac:	b2db      	uxtb	r3, r3
    5fae:	2b2a      	cmp	r3, #42	; 0x2a
    5fb0:	d17b      	bne.n	60aa <c_del_stmt+0x25e>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    5fb2:	683b      	ldr	r3, [r7, #0]
    5fb4:	689b      	ldr	r3, [r3, #8]
    5fb6:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    5fb8:	683b      	ldr	r3, [r7, #0]
    5fba:	2b00      	cmp	r3, #0
    5fbc:	d072      	beq.n	60a4 <c_del_stmt+0x258>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    5fbe:	683b      	ldr	r3, [r7, #0]
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d009      	beq.n	5fd8 <c_del_stmt+0x18c>
    5fc4:	683b      	ldr	r3, [r7, #0]
    5fc6:	f003 0303 	and.w	r3, r3, #3
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d104      	bne.n	5fd8 <c_del_stmt+0x18c>
    5fce:	683b      	ldr	r3, [r7, #0]
    5fd0:	685b      	ldr	r3, [r3, #4]
    5fd2:	b2db      	uxtb	r3, r3
    5fd4:	2b8a      	cmp	r3, #138	; 0x8a
    5fd6:	d006      	beq.n	5fe6 <c_del_stmt+0x19a>
    5fd8:	4b3c      	ldr	r3, [pc, #240]	; (60cc <c_del_stmt+0x280>)
    5fda:	4a39      	ldr	r2, [pc, #228]	; (60c0 <c_del_stmt+0x274>)
    5fdc:	f240 3187 	movw	r1, #903	; 0x387
    5fe0:	4838      	ldr	r0, [pc, #224]	; (60c4 <c_del_stmt+0x278>)
    5fe2:	f015 f8ff 	bl	1b1e4 <__assert_func>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5fe6:	683b      	ldr	r3, [r7, #0]
    5fe8:	613b      	str	r3, [r7, #16]
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5fea:	693b      	ldr	r3, [r7, #16]
    5fec:	68db      	ldr	r3, [r3, #12]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d048      	beq.n	6084 <c_del_stmt+0x238>
    5ff2:	693b      	ldr	r3, [r7, #16]
    5ff4:	68db      	ldr	r3, [r3, #12]
    5ff6:	f003 0303 	and.w	r3, r3, #3
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d142      	bne.n	6084 <c_del_stmt+0x238>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    5ffe:	693b      	ldr	r3, [r7, #16]
    6000:	68db      	ldr	r3, [r3, #12]
    6002:	60fb      	str	r3, [r7, #12]
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    6004:	68fb      	ldr	r3, [r7, #12]
    6006:	685b      	ldr	r3, [r3, #4]
    6008:	b2db      	uxtb	r3, r3
    600a:	2b8d      	cmp	r3, #141	; 0x8d
    600c:	d111      	bne.n	6032 <c_del_stmt+0x1e6>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    600e:	68fb      	ldr	r3, [r7, #12]
    6010:	689b      	ldr	r3, [r3, #8]
    6012:	2b00      	cmp	r3, #0
    6014:	d006      	beq.n	6024 <c_del_stmt+0x1d8>
    6016:	4b2e      	ldr	r3, [pc, #184]	; (60d0 <c_del_stmt+0x284>)
    6018:	4a29      	ldr	r2, [pc, #164]	; (60c0 <c_del_stmt+0x274>)
    601a:	f240 318f 	movw	r1, #911	; 0x38f
    601e:	4829      	ldr	r0, [pc, #164]	; (60c4 <c_del_stmt+0x278>)
    6020:	f015 f8e0 	bl	1b1e4 <__assert_func>
                    c_del_stmt(comp, pns->nodes[0]);
    6024:	693b      	ldr	r3, [r7, #16]
    6026:	689b      	ldr	r3, [r3, #8]
    6028:	4619      	mov	r1, r3
    602a:	6878      	ldr	r0, [r7, #4]
    602c:	f7ff ff0e 	bl	5e4c <c_del_stmt>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6030:	e035      	b.n	609e <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    6032:	68fb      	ldr	r3, [r7, #12]
    6034:	685b      	ldr	r3, [r3, #4]
    6036:	b2db      	uxtb	r3, r3
    6038:	2b8e      	cmp	r3, #142	; 0x8e
    603a:	d11d      	bne.n	6078 <c_del_stmt+0x22c>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    603c:	68fb      	ldr	r3, [r7, #12]
    603e:	685b      	ldr	r3, [r3, #4]
    6040:	0a1b      	lsrs	r3, r3, #8
    6042:	60bb      	str	r3, [r7, #8]
                    c_del_stmt(comp, pns->nodes[0]);
    6044:	693b      	ldr	r3, [r7, #16]
    6046:	689b      	ldr	r3, [r3, #8]
    6048:	4619      	mov	r1, r3
    604a:	6878      	ldr	r0, [r7, #4]
    604c:	f7ff fefe 	bl	5e4c <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    6050:	2300      	movs	r3, #0
    6052:	61fb      	str	r3, [r7, #28]
    6054:	e00b      	b.n	606e <c_del_stmt+0x222>
                        c_del_stmt(comp, pns1->nodes[i]);
    6056:	68fb      	ldr	r3, [r7, #12]
    6058:	69fa      	ldr	r2, [r7, #28]
    605a:	3202      	adds	r2, #2
    605c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6060:	4619      	mov	r1, r3
    6062:	6878      	ldr	r0, [r7, #4]
    6064:	f7ff fef2 	bl	5e4c <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    6068:	69fb      	ldr	r3, [r7, #28]
    606a:	3301      	adds	r3, #1
    606c:	61fb      	str	r3, [r7, #28]
    606e:	69fa      	ldr	r2, [r7, #28]
    6070:	68bb      	ldr	r3, [r7, #8]
    6072:	429a      	cmp	r2, r3
    6074:	dbef      	blt.n	6056 <c_del_stmt+0x20a>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6076:	e012      	b.n	609e <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    6078:	68fb      	ldr	r3, [r7, #12]
    607a:	685b      	ldr	r3, [r3, #4]
    607c:	b2db      	uxtb	r3, r3
    607e:	2b9f      	cmp	r3, #159	; 0x9f
    6080:	d012      	beq.n	60a8 <c_del_stmt+0x25c>
                    goto sequence_with_2_items;
    6082:	bf00      	nop
                c_del_stmt(comp, pns->nodes[0]);
    6084:	693b      	ldr	r3, [r7, #16]
    6086:	689b      	ldr	r3, [r3, #8]
    6088:	4619      	mov	r1, r3
    608a:	6878      	ldr	r0, [r7, #4]
    608c:	f7ff fede 	bl	5e4c <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    6090:	693b      	ldr	r3, [r7, #16]
    6092:	68db      	ldr	r3, [r3, #12]
    6094:	4619      	mov	r1, r3
    6096:	6878      	ldr	r0, [r7, #4]
    6098:	f7ff fed8 	bl	5e4c <c_del_stmt>
    return;
    609c:	e00a      	b.n	60b4 <c_del_stmt+0x268>
    609e:	e009      	b.n	60b4 <c_del_stmt+0x268>
                goto cannot_delete;
    60a0:	bf00      	nop
    60a2:	e002      	b.n	60aa <c_del_stmt+0x25e>
            goto cannot_delete;
    60a4:	bf00      	nop
    60a6:	e000      	b.n	60aa <c_del_stmt+0x25e>
                    goto cannot_delete;
    60a8:	bf00      	nop

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    60aa:	4a0a      	ldr	r2, [pc, #40]	; (60d4 <c_del_stmt+0x288>)
    60ac:	6839      	ldr	r1, [r7, #0]
    60ae:	6878      	ldr	r0, [r7, #4]
    60b0:	f7fe fe47 	bl	4d42 <compile_syntax_error>
}
    60b4:	3728      	adds	r7, #40	; 0x28
    60b6:	46bd      	mov	sp, r7
    60b8:	bd80      	pop	{r7, pc}
    60ba:	bf00      	nop
    60bc:	0001fa38 	.word	0x0001fa38
    60c0:	000205f8 	.word	0x000205f8
    60c4:	0001f9e4 	.word	0x0001f9e4
    60c8:	0001fa64 	.word	0x0001fa64
    60cc:	0001fc48 	.word	0x0001fc48
    60d0:	0001fc7c 	.word	0x0001fc7c
    60d4:	0001fca4 	.word	0x0001fca4

000060d8 <compile_del_stmt>:

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    60d8:	b580      	push	{r7, lr}
    60da:	b082      	sub	sp, #8
    60dc:	af00      	add	r7, sp, #0
    60de:	6078      	str	r0, [r7, #4]
    60e0:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    60e2:	683b      	ldr	r3, [r7, #0]
    60e4:	6899      	ldr	r1, [r3, #8]
    60e6:	4b04      	ldr	r3, [pc, #16]	; (60f8 <compile_del_stmt+0x20>)
    60e8:	2290      	movs	r2, #144	; 0x90
    60ea:	6878      	ldr	r0, [r7, #4]
    60ec:	f7fe febf 	bl	4e6e <apply_to_single_or_list>
}
    60f0:	bf00      	nop
    60f2:	3708      	adds	r7, #8
    60f4:	46bd      	mov	sp, r7
    60f6:	bd80      	pop	{r7, pc}
    60f8:	00005e4d 	.word	0x00005e4d

000060fc <compile_break_cont_stmt>:

STATIC void compile_break_cont_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    60fc:	b580      	push	{r7, lr}
    60fe:	b084      	sub	sp, #16
    6100:	af00      	add	r7, sp, #0
    6102:	6078      	str	r0, [r7, #4]
    6104:	6039      	str	r1, [r7, #0]
    uint16_t label;
    const char *error_msg;
    if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_break_stmt) {
    6106:	683b      	ldr	r3, [r7, #0]
    6108:	685b      	ldr	r3, [r3, #4]
    610a:	b2db      	uxtb	r3, r3
    610c:	2b09      	cmp	r3, #9
    610e:	d105      	bne.n	611c <compile_break_cont_stmt+0x20>
        label = comp->break_label;
    6110:	687b      	ldr	r3, [r7, #4]
    6112:	8b1b      	ldrh	r3, [r3, #24]
    6114:	81fb      	strh	r3, [r7, #14]
        error_msg = "'break' outside loop";
    6116:	4b18      	ldr	r3, [pc, #96]	; (6178 <compile_break_cont_stmt+0x7c>)
    6118:	60bb      	str	r3, [r7, #8]
    611a:	e004      	b.n	6126 <compile_break_cont_stmt+0x2a>
    } else {
        label = comp->continue_label;
    611c:	687b      	ldr	r3, [r7, #4]
    611e:	8b5b      	ldrh	r3, [r3, #26]
    6120:	81fb      	strh	r3, [r7, #14]
        error_msg = "'continue' outside loop";
    6122:	4b16      	ldr	r3, [pc, #88]	; (617c <compile_break_cont_stmt+0x80>)
    6124:	60bb      	str	r3, [r7, #8]
    }
    if (label == INVALID_LABEL) {
    6126:	89fb      	ldrh	r3, [r7, #14]
    6128:	f64f 72ff 	movw	r2, #65535	; 0xffff
    612c:	4293      	cmp	r3, r2
    612e:	d105      	bne.n	613c <compile_break_cont_stmt+0x40>
        compile_syntax_error(comp, (mp_parse_node_t)pns, error_msg);
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	68ba      	ldr	r2, [r7, #8]
    6134:	4619      	mov	r1, r3
    6136:	6878      	ldr	r0, [r7, #4]
    6138:	f7fe fe03 	bl	4d42 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    613c:	687b      	ldr	r3, [r7, #4]
    613e:	8b9a      	ldrh	r2, [r3, #28]
    6140:	687b      	ldr	r3, [r7, #4]
    6142:	8bdb      	ldrh	r3, [r3, #30]
    6144:	429a      	cmp	r2, r3
    6146:	d206      	bcs.n	6156 <compile_break_cont_stmt+0x5a>
    6148:	4b0d      	ldr	r3, [pc, #52]	; (6180 <compile_break_cont_stmt+0x84>)
    614a:	4a0e      	ldr	r2, [pc, #56]	; (6184 <compile_break_cont_stmt+0x88>)
    614c:	f240 31c1 	movw	r1, #961	; 0x3c1
    6150:	480d      	ldr	r0, [pc, #52]	; (6188 <compile_break_cont_stmt+0x8c>)
    6152:	f015 f847 	bl	1b1e4 <__assert_func>
    EMIT_ARG(unwind_jump, label, comp->cur_except_level - comp->break_continue_except_level);
    6156:	687b      	ldr	r3, [r7, #4]
    6158:	6a98      	ldr	r0, [r3, #40]	; 0x28
    615a:	89f9      	ldrh	r1, [r7, #14]
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	8b9b      	ldrh	r3, [r3, #28]
    6160:	461a      	mov	r2, r3
    6162:	687b      	ldr	r3, [r7, #4]
    6164:	8bdb      	ldrh	r3, [r3, #30]
    6166:	1ad3      	subs	r3, r2, r3
    6168:	461a      	mov	r2, r3
    616a:	f004 faff 	bl	a76c <mp_emit_bc_unwind_jump>
}
    616e:	bf00      	nop
    6170:	3710      	adds	r7, #16
    6172:	46bd      	mov	sp, r7
    6174:	bd80      	pop	{r7, pc}
    6176:	bf00      	nop
    6178:	0001fcbc 	.word	0x0001fcbc
    617c:	0001fcd4 	.word	0x0001fcd4
    6180:	0001fcec 	.word	0x0001fcec
    6184:	00020604 	.word	0x00020604
    6188:	0001f9e4 	.word	0x0001f9e4

0000618c <compile_return_stmt>:

STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    618c:	b580      	push	{r7, lr}
    618e:	b082      	sub	sp, #8
    6190:	af00      	add	r7, sp, #0
    6192:	6078      	str	r0, [r7, #4]
    6194:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	2b07      	cmp	r3, #7
    619e:	d006      	beq.n	61ae <compile_return_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    61a0:	683b      	ldr	r3, [r7, #0]
    61a2:	4a0f      	ldr	r2, [pc, #60]	; (61e0 <compile_return_stmt+0x54>)
    61a4:	4619      	mov	r1, r3
    61a6:	6878      	ldr	r0, [r7, #4]
    61a8:	f7fe fdcb 	bl	4d42 <compile_syntax_error>
        return;
    61ac:	e015      	b.n	61da <compile_return_stmt+0x4e>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    61ae:	683b      	ldr	r3, [r7, #0]
    61b0:	689b      	ldr	r3, [r3, #8]
    61b2:	2b00      	cmp	r3, #0
    61b4:	d106      	bne.n	61c4 <compile_return_stmt+0x38>
        // no argument to 'return', so return None
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61ba:	210e      	movs	r1, #14
    61bc:	4618      	mov	r0, r3
    61be:	f004 f87b 	bl	a2b8 <mp_emit_bc_load_const_tok>
    61c2:	e005      	b.n	61d0 <compile_return_stmt+0x44>
        compile_node(comp, pns_test_if_expr->nodes[0]); // success value
        EMIT(return_value);
        EMIT_ARG(label_assign, l_fail);
        compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    } else {
        compile_node(comp, pns->nodes[0]);
    61c4:	683b      	ldr	r3, [r7, #0]
    61c6:	689b      	ldr	r3, [r3, #8]
    61c8:	4619      	mov	r1, r3
    61ca:	6878      	ldr	r0, [r7, #4]
    61cc:	f002 fbb9 	bl	8942 <compile_node>
    }
    EMIT(return_value);
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61d4:	4618      	mov	r0, r3
    61d6:	f004 fd66 	bl	aca6 <mp_emit_bc_return_value>
}
    61da:	3708      	adds	r7, #8
    61dc:	46bd      	mov	sp, r7
    61de:	bd80      	pop	{r7, pc}
    61e0:	0001fd28 	.word	0x0001fd28

000061e4 <compile_yield_stmt>:

STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    61e4:	b580      	push	{r7, lr}
    61e6:	b082      	sub	sp, #8
    61e8:	af00      	add	r7, sp, #0
    61ea:	6078      	str	r0, [r7, #4]
    61ec:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    61ee:	683b      	ldr	r3, [r7, #0]
    61f0:	689b      	ldr	r3, [r3, #8]
    61f2:	4619      	mov	r1, r3
    61f4:	6878      	ldr	r0, [r7, #4]
    61f6:	f002 fba4 	bl	8942 <compile_node>
    EMIT(pop_top);
    61fa:	687b      	ldr	r3, [r7, #4]
    61fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61fe:	4618      	mov	r0, r3
    6200:	f004 fa35 	bl	a66e <mp_emit_bc_pop_top>
}
    6204:	bf00      	nop
    6206:	3708      	adds	r7, #8
    6208:	46bd      	mov	sp, r7
    620a:	bd80      	pop	{r7, pc}

0000620c <compile_raise_stmt>:

STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    620c:	b580      	push	{r7, lr}
    620e:	b082      	sub	sp, #8
    6210:	af00      	add	r7, sp, #0
    6212:	6078      	str	r0, [r7, #4]
    6214:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    6216:	683b      	ldr	r3, [r7, #0]
    6218:	689b      	ldr	r3, [r3, #8]
    621a:	2b00      	cmp	r3, #0
    621c:	d106      	bne.n	622c <compile_raise_stmt+0x20>
        // raise
        EMIT_ARG(raise_varargs, 0);
    621e:	687b      	ldr	r3, [r7, #4]
    6220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6222:	2100      	movs	r1, #0
    6224:	4618      	mov	r0, r3
    6226:	f004 fd52 	bl	acce <mp_emit_bc_raise_varargs>
    } else {
        // raise x
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(raise_varargs, 1);
    }
}
    622a:	e031      	b.n	6290 <compile_raise_stmt+0x84>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    622c:	683b      	ldr	r3, [r7, #0]
    622e:	689b      	ldr	r3, [r3, #8]
    6230:	2b00      	cmp	r3, #0
    6232:	d021      	beq.n	6278 <compile_raise_stmt+0x6c>
    6234:	683b      	ldr	r3, [r7, #0]
    6236:	689b      	ldr	r3, [r3, #8]
    6238:	f003 0303 	and.w	r3, r3, #3
    623c:	2b00      	cmp	r3, #0
    623e:	d11b      	bne.n	6278 <compile_raise_stmt+0x6c>
    6240:	683b      	ldr	r3, [r7, #0]
    6242:	689b      	ldr	r3, [r3, #8]
    6244:	685b      	ldr	r3, [r3, #4]
    6246:	b2db      	uxtb	r3, r3
    6248:	2b58      	cmp	r3, #88	; 0x58
    624a:	d115      	bne.n	6278 <compile_raise_stmt+0x6c>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    624c:	683b      	ldr	r3, [r7, #0]
    624e:	689b      	ldr	r3, [r3, #8]
    6250:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    6252:	683b      	ldr	r3, [r7, #0]
    6254:	689b      	ldr	r3, [r3, #8]
    6256:	4619      	mov	r1, r3
    6258:	6878      	ldr	r0, [r7, #4]
    625a:	f002 fb72 	bl	8942 <compile_node>
        compile_node(comp, pns->nodes[1]);
    625e:	683b      	ldr	r3, [r7, #0]
    6260:	68db      	ldr	r3, [r3, #12]
    6262:	4619      	mov	r1, r3
    6264:	6878      	ldr	r0, [r7, #4]
    6266:	f002 fb6c 	bl	8942 <compile_node>
        EMIT_ARG(raise_varargs, 2);
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    626e:	2102      	movs	r1, #2
    6270:	4618      	mov	r0, r3
    6272:	f004 fd2c 	bl	acce <mp_emit_bc_raise_varargs>
}
    6276:	e00b      	b.n	6290 <compile_raise_stmt+0x84>
        compile_node(comp, pns->nodes[0]);
    6278:	683b      	ldr	r3, [r7, #0]
    627a:	689b      	ldr	r3, [r3, #8]
    627c:	4619      	mov	r1, r3
    627e:	6878      	ldr	r0, [r7, #4]
    6280:	f002 fb5f 	bl	8942 <compile_node>
        EMIT_ARG(raise_varargs, 1);
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6288:	2101      	movs	r1, #1
    628a:	4618      	mov	r0, r3
    628c:	f004 fd1f 	bl	acce <mp_emit_bc_raise_varargs>
}
    6290:	bf00      	nop
    6292:	3708      	adds	r7, #8
    6294:	46bd      	mov	sp, r7
    6296:	bd80      	pop	{r7, pc}

00006298 <do_import_name>:

// q_base holds the base of the name
// eg   a -> q_base=a
//      a.b.c -> q_base=a
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    6298:	b580      	push	{r7, lr}
    629a:	b092      	sub	sp, #72	; 0x48
    629c:	af00      	add	r7, sp, #0
    629e:	60f8      	str	r0, [r7, #12]
    62a0:	60b9      	str	r1, [r7, #8]
    62a2:	607a      	str	r2, [r7, #4]
    bool is_as = false;
    62a4:	2300      	movs	r3, #0
    62a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    62aa:	68bb      	ldr	r3, [r7, #8]
    62ac:	2b00      	cmp	r3, #0
    62ae:	d016      	beq.n	62de <do_import_name+0x46>
    62b0:	68bb      	ldr	r3, [r7, #8]
    62b2:	f003 0303 	and.w	r3, r3, #3
    62b6:	2b00      	cmp	r3, #0
    62b8:	d111      	bne.n	62de <do_import_name+0x46>
    62ba:	68bb      	ldr	r3, [r7, #8]
    62bc:	685b      	ldr	r3, [r3, #4]
    62be:	b2db      	uxtb	r3, r3
    62c0:	2b62      	cmp	r3, #98	; 0x62
    62c2:	d10c      	bne.n	62de <do_import_name+0x46>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    62c4:	68bb      	ldr	r3, [r7, #8]
    62c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        // a name of the form x as y; unwrap it
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    62c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    62ca:	68db      	ldr	r3, [r3, #12]
    62cc:	091a      	lsrs	r2, r3, #4
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	601a      	str	r2, [r3, #0]
        pn = pns->nodes[0];
    62d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    62d4:	689b      	ldr	r3, [r3, #8]
    62d6:	60bb      	str	r3, [r7, #8]
        is_as = true;
    62d8:	2301      	movs	r3, #1
    62da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    62de:	68bb      	ldr	r3, [r7, #8]
    62e0:	2b00      	cmp	r3, #0
    62e2:	d10a      	bne.n	62fa <do_import_name+0x62>
        // empty name (eg, from . import x)
        *q_base = MP_QSTR_;
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	2201      	movs	r2, #1
    62e8:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, MP_QSTR_, MP_EMIT_IMPORT_NAME); // import the empty string
    62ea:	68fb      	ldr	r3, [r7, #12]
    62ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62ee:	2200      	movs	r2, #0
    62f0:	2101      	movs	r1, #1
    62f2:	4618      	mov	r0, r3
    62f4:	f003 ffb8 	bl	a268 <mp_emit_bc_import>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
                }
            }
        }
    }
}
    62f8:	e0ba      	b.n	6470 <do_import_name+0x1d8>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    62fa:	68bb      	ldr	r3, [r7, #8]
    62fc:	f003 030f 	and.w	r3, r3, #15
    6300:	2b02      	cmp	r3, #2
    6302:	d114      	bne.n	632e <do_import_name+0x96>
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    6304:	68bb      	ldr	r3, [r7, #8]
    6306:	091b      	lsrs	r3, r3, #4
    6308:	62bb      	str	r3, [r7, #40]	; 0x28
        if (!is_as) {
    630a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    630e:	f083 0301 	eor.w	r3, r3, #1
    6312:	b2db      	uxtb	r3, r3
    6314:	2b00      	cmp	r3, #0
    6316:	d002      	beq.n	631e <do_import_name+0x86>
            *q_base = q_full;
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    631c:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    631e:	68fb      	ldr	r3, [r7, #12]
    6320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6322:	2200      	movs	r2, #0
    6324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    6326:	4618      	mov	r0, r3
    6328:	f003 ff9e 	bl	a268 <mp_emit_bc_import>
}
    632c:	e0a0      	b.n	6470 <do_import_name+0x1d8>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    632e:	68bb      	ldr	r3, [r7, #8]
    6330:	2b00      	cmp	r3, #0
    6332:	d009      	beq.n	6348 <do_import_name+0xb0>
    6334:	68bb      	ldr	r3, [r7, #8]
    6336:	f003 0303 	and.w	r3, r3, #3
    633a:	2b00      	cmp	r3, #0
    633c:	d104      	bne.n	6348 <do_import_name+0xb0>
    633e:	68bb      	ldr	r3, [r7, #8]
    6340:	685b      	ldr	r3, [r3, #4]
    6342:	b2db      	uxtb	r3, r3
    6344:	2b66      	cmp	r3, #102	; 0x66
    6346:	d006      	beq.n	6356 <do_import_name+0xbe>
    6348:	4b4b      	ldr	r3, [pc, #300]	; (6478 <do_import_name+0x1e0>)
    634a:	4a4c      	ldr	r2, [pc, #304]	; (647c <do_import_name+0x1e4>)
    634c:	f240 410d 	movw	r1, #1037	; 0x40d
    6350:	484b      	ldr	r0, [pc, #300]	; (6480 <do_import_name+0x1e8>)
    6352:	f014 ff47 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    6356:	68bb      	ldr	r3, [r7, #8]
    6358:	627b      	str	r3, [r7, #36]	; 0x24
            if (!is_as) {
    635a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    635e:	f083 0301 	eor.w	r3, r3, #1
    6362:	b2db      	uxtb	r3, r3
    6364:	2b00      	cmp	r3, #0
    6366:	d004      	beq.n	6372 <do_import_name+0xda>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    6368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    636a:	689b      	ldr	r3, [r3, #8]
    636c:	091a      	lsrs	r2, r3, #4
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	601a      	str	r2, [r3, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    6372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6374:	685b      	ldr	r3, [r3, #4]
    6376:	0a1b      	lsrs	r3, r3, #8
    6378:	623b      	str	r3, [r7, #32]
            int len = n - 1;
    637a:	6a3b      	ldr	r3, [r7, #32]
    637c:	3b01      	subs	r3, #1
    637e:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6380:	2300      	movs	r3, #0
    6382:	63fb      	str	r3, [r7, #60]	; 0x3c
    6384:	e00f      	b.n	63a6 <do_import_name+0x10e>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    6386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    638a:	3202      	adds	r2, #2
    638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6390:	091b      	lsrs	r3, r3, #4
    6392:	4618      	mov	r0, r3
    6394:	f7fa ff1d 	bl	11d2 <qstr_len>
    6398:	4602      	mov	r2, r0
    639a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    639c:	4413      	add	r3, r2
    639e:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    63a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    63a2:	3301      	adds	r3, #1
    63a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    63a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    63a8:	6a3b      	ldr	r3, [r7, #32]
    63aa:	429a      	cmp	r2, r3
    63ac:	dbeb      	blt.n	6386 <do_import_name+0xee>
            char *q_ptr = mp_local_alloc(len);
    63ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    63b0:	3307      	adds	r3, #7
    63b2:	3307      	adds	r3, #7
    63b4:	08db      	lsrs	r3, r3, #3
    63b6:	00db      	lsls	r3, r3, #3
    63b8:	ebad 0d03 	sub.w	sp, sp, r3
    63bc:	466b      	mov	r3, sp
    63be:	3307      	adds	r3, #7
    63c0:	08db      	lsrs	r3, r3, #3
    63c2:	00db      	lsls	r3, r3, #3
    63c4:	61fb      	str	r3, [r7, #28]
            char *str_dest = q_ptr;
    63c6:	69fb      	ldr	r3, [r7, #28]
    63c8:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    63ca:	2300      	movs	r3, #0
    63cc:	637b      	str	r3, [r7, #52]	; 0x34
    63ce:	e021      	b.n	6414 <do_import_name+0x17c>
                if (i > 0) {
    63d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    63d2:	2b00      	cmp	r3, #0
    63d4:	dd04      	ble.n	63e0 <do_import_name+0x148>
                    *str_dest++ = '.';
    63d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    63d8:	1c5a      	adds	r2, r3, #1
    63da:	63ba      	str	r2, [r7, #56]	; 0x38
    63dc:	222e      	movs	r2, #46	; 0x2e
    63de:	701a      	strb	r2, [r3, #0]
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    63e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    63e4:	3202      	adds	r2, #2
    63e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    63ea:	091b      	lsrs	r3, r3, #4
    63ec:	f107 0210 	add.w	r2, r7, #16
    63f0:	4611      	mov	r1, r2
    63f2:	4618      	mov	r0, r3
    63f4:	f7fa ff0a 	bl	120c <qstr_data>
    63f8:	61b8      	str	r0, [r7, #24]
                memcpy(str_dest, str_src, str_src_len);
    63fa:	693b      	ldr	r3, [r7, #16]
    63fc:	461a      	mov	r2, r3
    63fe:	69b9      	ldr	r1, [r7, #24]
    6400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6402:	f016 f8ad 	bl	1c560 <memcpy>
                str_dest += str_src_len;
    6406:	693b      	ldr	r3, [r7, #16]
    6408:	6bba      	ldr	r2, [r7, #56]	; 0x38
    640a:	4413      	add	r3, r2
    640c:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6410:	3301      	adds	r3, #1
    6412:	637b      	str	r3, [r7, #52]	; 0x34
    6414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6416:	6a3b      	ldr	r3, [r7, #32]
    6418:	429a      	cmp	r2, r3
    641a:	dbd9      	blt.n	63d0 <do_import_name+0x138>
            qstr q_full = qstr_from_strn(q_ptr, len);
    641c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    641e:	4619      	mov	r1, r3
    6420:	69f8      	ldr	r0, [r7, #28]
    6422:	f7fa fe0c 	bl	103e <qstr_from_strn>
    6426:	6178      	str	r0, [r7, #20]
            mp_local_free(q_ptr);
    6428:	69f8      	ldr	r0, [r7, #28]
    642a:	f7fe fc65 	bl	4cf8 <mp_local_free>
            EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    642e:	68fb      	ldr	r3, [r7, #12]
    6430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6432:	2200      	movs	r2, #0
    6434:	6979      	ldr	r1, [r7, #20]
    6436:	4618      	mov	r0, r3
    6438:	f003 ff16 	bl	a268 <mp_emit_bc_import>
            if (is_as) {
    643c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6440:	2b00      	cmp	r3, #0
    6442:	d015      	beq.n	6470 <do_import_name+0x1d8>
                for (int i = 1; i < n; i++) {
    6444:	2301      	movs	r3, #1
    6446:	633b      	str	r3, [r7, #48]	; 0x30
    6448:	e00e      	b.n	6468 <do_import_name+0x1d0>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
    644a:	68fb      	ldr	r3, [r7, #12]
    644c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    6452:	3202      	adds	r2, #2
    6454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6458:	091b      	lsrs	r3, r3, #4
    645a:	2200      	movs	r2, #0
    645c:	4619      	mov	r1, r3
    645e:	f004 f851 	bl	a504 <mp_emit_bc_attr>
                for (int i = 1; i < n; i++) {
    6462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6464:	3301      	adds	r3, #1
    6466:	633b      	str	r3, [r7, #48]	; 0x30
    6468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    646a:	6a3b      	ldr	r3, [r7, #32]
    646c:	429a      	cmp	r2, r3
    646e:	dbec      	blt.n	644a <do_import_name+0x1b2>
}
    6470:	bf00      	nop
    6472:	3748      	adds	r7, #72	; 0x48
    6474:	46bd      	mov	sp, r7
    6476:	bd80      	pop	{r7, pc}
    6478:	0001fd44 	.word	0x0001fd44
    647c:	0002061c 	.word	0x0002061c
    6480:	0001f9e4 	.word	0x0001f9e4

00006484 <compile_dotted_as_name>:

STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    6484:	b580      	push	{r7, lr}
    6486:	b084      	sub	sp, #16
    6488:	af00      	add	r7, sp, #0
    648a:	6078      	str	r0, [r7, #4]
    648c:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6492:	2100      	movs	r1, #0
    6494:	4618      	mov	r0, r3
    6496:	f003 ff4b 	bl	a330 <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    649e:	210e      	movs	r1, #14
    64a0:	4618      	mov	r0, r3
    64a2:	f003 ff09 	bl	a2b8 <mp_emit_bc_load_const_tok>
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    64a6:	f107 030c 	add.w	r3, r7, #12
    64aa:	461a      	mov	r2, r3
    64ac:	6839      	ldr	r1, [r7, #0]
    64ae:	6878      	ldr	r0, [r7, #4]
    64b0:	f7ff fef2 	bl	6298 <do_import_name>
    compile_store_id(comp, q_base);
    64b4:	68fb      	ldr	r3, [r7, #12]
    64b6:	4619      	mov	r1, r3
    64b8:	6878      	ldr	r0, [r7, #4]
    64ba:	f7fe fd5f 	bl	4f7c <compile_store_id>
}
    64be:	bf00      	nop
    64c0:	3710      	adds	r7, #16
    64c2:	46bd      	mov	sp, r7
    64c4:	bd80      	pop	{r7, pc}

000064c6 <compile_import_name>:

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    64c6:	b580      	push	{r7, lr}
    64c8:	b082      	sub	sp, #8
    64ca:	af00      	add	r7, sp, #0
    64cc:	6078      	str	r0, [r7, #4]
    64ce:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    64d0:	683b      	ldr	r3, [r7, #0]
    64d2:	6899      	ldr	r1, [r3, #8]
    64d4:	4b04      	ldr	r3, [pc, #16]	; (64e8 <compile_import_name+0x22>)
    64d6:	2265      	movs	r2, #101	; 0x65
    64d8:	6878      	ldr	r0, [r7, #4]
    64da:	f7fe fcc8 	bl	4e6e <apply_to_single_or_list>
}
    64de:	bf00      	nop
    64e0:	3708      	adds	r7, #8
    64e2:	46bd      	mov	sp, r7
    64e4:	bd80      	pop	{r7, pc}
    64e6:	bf00      	nop
    64e8:	00006485 	.word	0x00006485

000064ec <compile_import_from>:

STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    64ec:	b580      	push	{r7, lr}
    64ee:	b094      	sub	sp, #80	; 0x50
    64f0:	af00      	add	r7, sp, #0
    64f2:	6078      	str	r0, [r7, #4]
    64f4:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn_import_source = pns->nodes[0];
    64f6:	683b      	ldr	r3, [r7, #0]
    64f8:	689b      	ldr	r3, [r3, #8]
    64fa:	64fb      	str	r3, [r7, #76]	; 0x4c

    // extract the preceding .'s (if any) for a relative import, to compute the import level
    uint import_level = 0;
    64fc:	2300      	movs	r3, #0
    64fe:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
        mp_parse_node_t pn_rel;
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    6500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6502:	f003 030f 	and.w	r3, r3, #15
    6506:	2b0e      	cmp	r3, #14
    6508:	d00c      	beq.n	6524 <compile_import_from+0x38>
    650a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    650c:	2b00      	cmp	r3, #0
    650e:	d00e      	beq.n	652e <compile_import_from+0x42>
    6510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6512:	f003 0303 	and.w	r3, r3, #3
    6516:	2b00      	cmp	r3, #0
    6518:	d109      	bne.n	652e <compile_import_from+0x42>
    651a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    651c:	685b      	ldr	r3, [r3, #4]
    651e:	b2db      	uxtb	r3, r3
    6520:	2b5f      	cmp	r3, #95	; 0x5f
    6522:	d104      	bne.n	652e <compile_import_from+0x42>
            // This covers relative imports with dots only like "from .. import"
            pn_rel = pn_import_source;
    6524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6526:	61fb      	str	r3, [r7, #28]
            pn_import_source = MP_PARSE_NODE_NULL;
    6528:	2300      	movs	r3, #0
    652a:	64fb      	str	r3, [r7, #76]	; 0x4c
    652c:	e01e      	b.n	656c <compile_import_from+0x80>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6530:	2b00      	cmp	r3, #0
    6532:	d03e      	beq.n	65b2 <compile_import_from+0xc6>
    6534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6536:	f003 0303 	and.w	r3, r3, #3
    653a:	2b00      	cmp	r3, #0
    653c:	d139      	bne.n	65b2 <compile_import_from+0xc6>
    653e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6540:	685b      	ldr	r3, [r3, #4]
    6542:	b2db      	uxtb	r3, r3
    6544:	2b5c      	cmp	r3, #92	; 0x5c
    6546:	d134      	bne.n	65b2 <compile_import_from+0xc6>
            // This covers relative imports starting with dot(s) like "from .foo import"
            mp_parse_node_struct_t *pns_2b = (mp_parse_node_struct_t*)pn_import_source;
    6548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    654a:	63bb      	str	r3, [r7, #56]	; 0x38
            pn_rel = pns_2b->nodes[0];
    654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    654e:	689b      	ldr	r3, [r3, #8]
    6550:	61fb      	str	r3, [r7, #28]
            pn_import_source = pns_2b->nodes[1];
    6552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6554:	68db      	ldr	r3, [r3, #12]
    6556:	64fb      	str	r3, [r7, #76]	; 0x4c
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    6558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    655a:	2b00      	cmp	r3, #0
    655c:	d106      	bne.n	656c <compile_import_from+0x80>
    655e:	4b7f      	ldr	r3, [pc, #508]	; (675c <compile_import_from+0x270>)
    6560:	4a7f      	ldr	r2, [pc, #508]	; (6760 <compile_import_from+0x274>)
    6562:	f240 414c 	movw	r1, #1100	; 0x44c
    6566:	487f      	ldr	r0, [pc, #508]	; (6764 <compile_import_from+0x278>)
    6568:	f014 fe3c 	bl	1b1e4 <__assert_func>
            break;
        }

        // get the list of . and/or ...'s
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    656c:	f107 0218 	add.w	r2, r7, #24
    6570:	f107 031c 	add.w	r3, r7, #28
    6574:	215f      	movs	r1, #95	; 0x5f
    6576:	4618      	mov	r0, r3
    6578:	f7fd faec 	bl	3b54 <mp_parse_node_extract_list>
    657c:	6378      	str	r0, [r7, #52]	; 0x34

        // count the total number of .'s
        for (int i = 0; i < n; i++) {
    657e:	2300      	movs	r3, #0
    6580:	647b      	str	r3, [r7, #68]	; 0x44
    6582:	e012      	b.n	65aa <compile_import_from+0xbe>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    6584:	69ba      	ldr	r2, [r7, #24]
    6586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6588:	009b      	lsls	r3, r3, #2
    658a:	4413      	add	r3, r2
    658c:	681b      	ldr	r3, [r3, #0]
    658e:	f240 42ae 	movw	r2, #1198	; 0x4ae
    6592:	4293      	cmp	r3, r2
    6594:	d103      	bne.n	659e <compile_import_from+0xb2>
                import_level++;
    6596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6598:	3301      	adds	r3, #1
    659a:	64bb      	str	r3, [r7, #72]	; 0x48
    659c:	e002      	b.n	65a4 <compile_import_from+0xb8>
            } else {
                // should be an MP_TOKEN_ELLIPSIS
                import_level += 3;
    659e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    65a0:	3303      	adds	r3, #3
    65a2:	64bb      	str	r3, [r7, #72]	; 0x48
        for (int i = 0; i < n; i++) {
    65a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    65a6:	3301      	adds	r3, #1
    65a8:	647b      	str	r3, [r7, #68]	; 0x44
    65aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    65ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    65ae:	429a      	cmp	r2, r3
    65b0:	dbe8      	blt.n	6584 <compile_import_from+0x98>
            }
        }
    } while (0);

    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    65b2:	683b      	ldr	r3, [r7, #0]
    65b4:	68db      	ldr	r3, [r3, #12]
    65b6:	f240 321e 	movw	r2, #798	; 0x31e
    65ba:	4293      	cmp	r3, r2
    65bc:	d122      	bne.n	6604 <compile_import_from+0x118>
        EMIT_ARG(load_const_small_int, import_level);
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    65c4:	4611      	mov	r1, r2
    65c6:	4618      	mov	r0, r3
    65c8:	f003 feb2 	bl	a330 <mp_emit_bc_load_const_small_int>

        // build the "fromlist" tuple
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    65cc:	687b      	ldr	r3, [r7, #4]
    65ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65d0:	2126      	movs	r1, #38	; 0x26
    65d2:	4618      	mov	r0, r3
    65d4:	f003 fece 	bl	a374 <mp_emit_bc_load_const_str>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_TUPLE);
    65d8:	687b      	ldr	r3, [r7, #4]
    65da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65dc:	2200      	movs	r2, #0
    65de:	2101      	movs	r1, #1
    65e0:	4618      	mov	r0, r3
    65e2:	f004 fa00 	bl	a9e6 <mp_emit_bc_build>

        // do the import
        qstr dummy_q;
        do_import_name(comp, pn_import_source, &dummy_q);
    65e6:	f107 0314 	add.w	r3, r7, #20
    65ea:	461a      	mov	r2, r3
    65ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    65ee:	6878      	ldr	r0, [r7, #4]
    65f0:	f7ff fe52 	bl	6298 <do_import_name>
        EMIT_ARG(import, MP_QSTR_NULL, MP_EMIT_IMPORT_STAR);
    65f4:	687b      	ldr	r3, [r7, #4]
    65f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    65f8:	2202      	movs	r2, #2
    65fa:	2100      	movs	r1, #0
    65fc:	4618      	mov	r0, r3
    65fe:	f003 fe33 	bl	a268 <mp_emit_bc_import>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
            }
        }
        EMIT(pop_top);
    }
}
    6602:	e0a7      	b.n	6754 <compile_import_from+0x268>
        EMIT_ARG(load_const_small_int, import_level);
    6604:	687b      	ldr	r3, [r7, #4]
    6606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6608:	6cba      	ldr	r2, [r7, #72]	; 0x48
    660a:	4611      	mov	r1, r2
    660c:	4618      	mov	r0, r3
    660e:	f003 fe8f 	bl	a330 <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    6612:	683b      	ldr	r3, [r7, #0]
    6614:	330c      	adds	r3, #12
    6616:	f107 0210 	add.w	r2, r7, #16
    661a:	2164      	movs	r1, #100	; 0x64
    661c:	4618      	mov	r0, r3
    661e:	f7fd fa99 	bl	3b54 <mp_parse_node_extract_list>
    6622:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < n; i++) {
    6624:	2300      	movs	r3, #0
    6626:	643b      	str	r3, [r7, #64]	; 0x40
    6628:	e032      	b.n	6690 <compile_import_from+0x1a4>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    662a:	693a      	ldr	r2, [r7, #16]
    662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    662e:	009b      	lsls	r3, r3, #2
    6630:	4413      	add	r3, r2
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	2b00      	cmp	r3, #0
    6636:	d011      	beq.n	665c <compile_import_from+0x170>
    6638:	693a      	ldr	r2, [r7, #16]
    663a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    663c:	009b      	lsls	r3, r3, #2
    663e:	4413      	add	r3, r2
    6640:	681b      	ldr	r3, [r3, #0]
    6642:	f003 0303 	and.w	r3, r3, #3
    6646:	2b00      	cmp	r3, #0
    6648:	d108      	bne.n	665c <compile_import_from+0x170>
    664a:	693a      	ldr	r2, [r7, #16]
    664c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    664e:	009b      	lsls	r3, r3, #2
    6650:	4413      	add	r3, r2
    6652:	681b      	ldr	r3, [r3, #0]
    6654:	685b      	ldr	r3, [r3, #4]
    6656:	b2db      	uxtb	r3, r3
    6658:	2b61      	cmp	r3, #97	; 0x61
    665a:	d006      	beq.n	666a <compile_import_from+0x17e>
    665c:	4b42      	ldr	r3, [pc, #264]	; (6768 <compile_import_from+0x27c>)
    665e:	4a40      	ldr	r2, [pc, #256]	; (6760 <compile_import_from+0x274>)
    6660:	f240 4174 	movw	r1, #1140	; 0x474
    6664:	483f      	ldr	r0, [pc, #252]	; (6764 <compile_import_from+0x278>)
    6666:	f014 fdbd 	bl	1b1e4 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    666a:	693a      	ldr	r2, [r7, #16]
    666c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    666e:	009b      	lsls	r3, r3, #2
    6670:	4413      	add	r3, r2
    6672:	681b      	ldr	r3, [r3, #0]
    6674:	62fb      	str	r3, [r7, #44]	; 0x2c
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    6676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6678:	689b      	ldr	r3, [r3, #8]
    667a:	091b      	lsrs	r3, r3, #4
    667c:	62bb      	str	r3, [r7, #40]	; 0x28
            EMIT_ARG(load_const_str, id2);
    667e:	687b      	ldr	r3, [r7, #4]
    6680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    6684:	4618      	mov	r0, r3
    6686:	f003 fe75 	bl	a374 <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    668a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    668c:	3301      	adds	r3, #1
    668e:	643b      	str	r3, [r7, #64]	; 0x40
    6690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6694:	429a      	cmp	r2, r3
    6696:	dbc8      	blt.n	662a <compile_import_from+0x13e>
        EMIT_ARG(build, n, MP_EMIT_BUILD_TUPLE);
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    669c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    669e:	2200      	movs	r2, #0
    66a0:	4618      	mov	r0, r3
    66a2:	f004 f9a0 	bl	a9e6 <mp_emit_bc_build>
        do_import_name(comp, pn_import_source, &dummy_q);
    66a6:	f107 030c 	add.w	r3, r7, #12
    66aa:	461a      	mov	r2, r3
    66ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    66ae:	6878      	ldr	r0, [r7, #4]
    66b0:	f7ff fdf2 	bl	6298 <do_import_name>
        for (int i = 0; i < n; i++) {
    66b4:	2300      	movs	r3, #0
    66b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    66b8:	e043      	b.n	6742 <compile_import_from+0x256>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    66ba:	693a      	ldr	r2, [r7, #16]
    66bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    66be:	009b      	lsls	r3, r3, #2
    66c0:	4413      	add	r3, r2
    66c2:	681b      	ldr	r3, [r3, #0]
    66c4:	2b00      	cmp	r3, #0
    66c6:	d011      	beq.n	66ec <compile_import_from+0x200>
    66c8:	693a      	ldr	r2, [r7, #16]
    66ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    66cc:	009b      	lsls	r3, r3, #2
    66ce:	4413      	add	r3, r2
    66d0:	681b      	ldr	r3, [r3, #0]
    66d2:	f003 0303 	and.w	r3, r3, #3
    66d6:	2b00      	cmp	r3, #0
    66d8:	d108      	bne.n	66ec <compile_import_from+0x200>
    66da:	693a      	ldr	r2, [r7, #16]
    66dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    66de:	009b      	lsls	r3, r3, #2
    66e0:	4413      	add	r3, r2
    66e2:	681b      	ldr	r3, [r3, #0]
    66e4:	685b      	ldr	r3, [r3, #4]
    66e6:	b2db      	uxtb	r3, r3
    66e8:	2b61      	cmp	r3, #97	; 0x61
    66ea:	d006      	beq.n	66fa <compile_import_from+0x20e>
    66ec:	4b1e      	ldr	r3, [pc, #120]	; (6768 <compile_import_from+0x27c>)
    66ee:	4a1c      	ldr	r2, [pc, #112]	; (6760 <compile_import_from+0x274>)
    66f0:	f240 417f 	movw	r1, #1151	; 0x47f
    66f4:	481b      	ldr	r0, [pc, #108]	; (6764 <compile_import_from+0x278>)
    66f6:	f014 fd75 	bl	1b1e4 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    66fa:	693a      	ldr	r2, [r7, #16]
    66fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    66fe:	009b      	lsls	r3, r3, #2
    6700:	4413      	add	r3, r2
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	627b      	str	r3, [r7, #36]	; 0x24
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    6706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6708:	689b      	ldr	r3, [r3, #8]
    670a:	091b      	lsrs	r3, r3, #4
    670c:	623b      	str	r3, [r7, #32]
            EMIT_ARG(import, id2, MP_EMIT_IMPORT_FROM);
    670e:	687b      	ldr	r3, [r7, #4]
    6710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6712:	2201      	movs	r2, #1
    6714:	6a39      	ldr	r1, [r7, #32]
    6716:	4618      	mov	r0, r3
    6718:	f003 fda6 	bl	a268 <mp_emit_bc_import>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    671e:	68db      	ldr	r3, [r3, #12]
    6720:	2b00      	cmp	r3, #0
    6722:	d104      	bne.n	672e <compile_import_from+0x242>
                compile_store_id(comp, id2);
    6724:	6a39      	ldr	r1, [r7, #32]
    6726:	6878      	ldr	r0, [r7, #4]
    6728:	f7fe fc28 	bl	4f7c <compile_store_id>
    672c:	e006      	b.n	673c <compile_import_from+0x250>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6730:	68db      	ldr	r3, [r3, #12]
    6732:	091b      	lsrs	r3, r3, #4
    6734:	4619      	mov	r1, r3
    6736:	6878      	ldr	r0, [r7, #4]
    6738:	f7fe fc20 	bl	4f7c <compile_store_id>
        for (int i = 0; i < n; i++) {
    673c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    673e:	3301      	adds	r3, #1
    6740:	63fb      	str	r3, [r7, #60]	; 0x3c
    6742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6746:	429a      	cmp	r2, r3
    6748:	dbb7      	blt.n	66ba <compile_import_from+0x1ce>
        EMIT(pop_top);
    674a:	687b      	ldr	r3, [r7, #4]
    674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    674e:	4618      	mov	r0, r3
    6750:	f003 ff8d 	bl	a66e <mp_emit_bc_pop_top>
}
    6754:	bf00      	nop
    6756:	3750      	adds	r7, #80	; 0x50
    6758:	46bd      	mov	sp, r7
    675a:	bd80      	pop	{r7, pc}
    675c:	0001fd78 	.word	0x0001fd78
    6760:	0002062c 	.word	0x0002062c
    6764:	0001f9e4 	.word	0x0001f9e4
    6768:	0001fda4 	.word	0x0001fda4

0000676c <compile_declare_global>:

STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, qstr qst, bool added, id_info_t *id_info) {
    676c:	b580      	push	{r7, lr}
    676e:	b084      	sub	sp, #16
    6770:	af00      	add	r7, sp, #0
    6772:	60f8      	str	r0, [r7, #12]
    6774:	60b9      	str	r1, [r7, #8]
    6776:	607a      	str	r2, [r7, #4]
    6778:	70fb      	strb	r3, [r7, #3]
    if (!added && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    677a:	78fb      	ldrb	r3, [r7, #3]
    677c:	f083 0301 	eor.w	r3, r3, #1
    6780:	b2db      	uxtb	r3, r3
    6782:	2b00      	cmp	r3, #0
    6784:	d009      	beq.n	679a <compile_declare_global+0x2e>
    6786:	69bb      	ldr	r3, [r7, #24]
    6788:	781b      	ldrb	r3, [r3, #0]
    678a:	2b01      	cmp	r3, #1
    678c:	d005      	beq.n	679a <compile_declare_global+0x2e>
        compile_syntax_error(comp, pn, "identifier redefined as global");
    678e:	4a0c      	ldr	r2, [pc, #48]	; (67c0 <compile_declare_global+0x54>)
    6790:	68b9      	ldr	r1, [r7, #8]
    6792:	68f8      	ldr	r0, [r7, #12]
    6794:	f7fe fad5 	bl	4d42 <compile_syntax_error>
        return;
    6798:	e00f      	b.n	67ba <compile_declare_global+0x4e>
    }
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    679a:	69bb      	ldr	r3, [r7, #24]
    679c:	2201      	movs	r2, #1
    679e:	701a      	strb	r2, [r3, #0]

    // if the id exists in the global scope, set its kind to EXPLICIT_GLOBAL
    id_info = scope_find_global(comp->scope_cur, qst);
    67a0:	68fb      	ldr	r3, [r7, #12]
    67a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67a4:	6879      	ldr	r1, [r7, #4]
    67a6:	4618      	mov	r0, r3
    67a8:	f7fe f9f6 	bl	4b98 <scope_find_global>
    67ac:	61b8      	str	r0, [r7, #24]
    if (id_info != NULL) {
    67ae:	69bb      	ldr	r3, [r7, #24]
    67b0:	2b00      	cmp	r3, #0
    67b2:	d002      	beq.n	67ba <compile_declare_global+0x4e>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    67b4:	69bb      	ldr	r3, [r7, #24]
    67b6:	2201      	movs	r2, #1
    67b8:	701a      	strb	r2, [r3, #0]
    }
}
    67ba:	3710      	adds	r7, #16
    67bc:	46bd      	mov	sp, r7
    67be:	bd80      	pop	{r7, pc}
    67c0:	0001fde4 	.word	0x0001fde4

000067c4 <compile_declare_nonlocal>:

STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, qstr qst, bool added, id_info_t *id_info) {
    67c4:	b580      	push	{r7, lr}
    67c6:	b084      	sub	sp, #16
    67c8:	af00      	add	r7, sp, #0
    67ca:	60f8      	str	r0, [r7, #12]
    67cc:	60b9      	str	r1, [r7, #8]
    67ce:	607a      	str	r2, [r7, #4]
    67d0:	70fb      	strb	r3, [r7, #3]
    if (added) {
    67d2:	78fb      	ldrb	r3, [r7, #3]
    67d4:	2b00      	cmp	r3, #0
    67d6:	d010      	beq.n	67fa <compile_declare_nonlocal+0x36>
        scope_find_local_and_close_over(comp->scope_cur, id_info, qst);
    67d8:	68fb      	ldr	r3, [r7, #12]
    67da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67dc:	687a      	ldr	r2, [r7, #4]
    67de:	69b9      	ldr	r1, [r7, #24]
    67e0:	4618      	mov	r0, r3
    67e2:	f7fe fa41 	bl	4c68 <scope_find_local_and_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    67e6:	69bb      	ldr	r3, [r7, #24]
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	2b00      	cmp	r3, #0
    67ec:	d10e      	bne.n	680c <compile_declare_nonlocal+0x48>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    67ee:	4a09      	ldr	r2, [pc, #36]	; (6814 <compile_declare_nonlocal+0x50>)
    67f0:	68b9      	ldr	r1, [r7, #8]
    67f2:	68f8      	ldr	r0, [r7, #12]
    67f4:	f7fe faa5 	bl	4d42 <compile_syntax_error>
        }
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    }
}
    67f8:	e008      	b.n	680c <compile_declare_nonlocal+0x48>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    67fa:	69bb      	ldr	r3, [r7, #24]
    67fc:	781b      	ldrb	r3, [r3, #0]
    67fe:	2b04      	cmp	r3, #4
    6800:	d004      	beq.n	680c <compile_declare_nonlocal+0x48>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    6802:	4a05      	ldr	r2, [pc, #20]	; (6818 <compile_declare_nonlocal+0x54>)
    6804:	68b9      	ldr	r1, [r7, #8]
    6806:	68f8      	ldr	r0, [r7, #12]
    6808:	f7fe fa9b 	bl	4d42 <compile_syntax_error>
}
    680c:	bf00      	nop
    680e:	3710      	adds	r7, #16
    6810:	46bd      	mov	sp, r7
    6812:	bd80      	pop	{r7, pc}
    6814:	0001fe04 	.word	0x0001fe04
    6818:	0001fe24 	.word	0x0001fe24

0000681c <compile_global_nonlocal_stmt>:

STATIC void compile_global_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    681c:	b580      	push	{r7, lr}
    681e:	b08c      	sub	sp, #48	; 0x30
    6820:	af02      	add	r7, sp, #8
    6822:	6078      	str	r0, [r7, #4]
    6824:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	795b      	ldrb	r3, [r3, #5]
    682a:	2b01      	cmp	r3, #1
    682c:	d155      	bne.n	68da <compile_global_nonlocal_stmt+0xbe>
        bool is_global = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_global_stmt;
    682e:	683b      	ldr	r3, [r7, #0]
    6830:	685b      	ldr	r3, [r3, #4]
    6832:	b2db      	uxtb	r3, r3
    6834:	2b10      	cmp	r3, #16
    6836:	bf0c      	ite	eq
    6838:	2301      	moveq	r3, #1
    683a:	2300      	movne	r3, #0
    683c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        if (!is_global && comp->scope_cur->kind == SCOPE_MODULE) {
    6840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    6844:	f083 0301 	eor.w	r3, r3, #1
    6848:	b2db      	uxtb	r3, r3
    684a:	2b00      	cmp	r3, #0
    684c:	d00b      	beq.n	6866 <compile_global_nonlocal_stmt+0x4a>
    684e:	687b      	ldr	r3, [r7, #4]
    6850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6852:	681b      	ldr	r3, [r3, #0]
    6854:	2b00      	cmp	r3, #0
    6856:	d106      	bne.n	6866 <compile_global_nonlocal_stmt+0x4a>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    6858:	683b      	ldr	r3, [r7, #0]
    685a:	4a21      	ldr	r2, [pc, #132]	; (68e0 <compile_global_nonlocal_stmt+0xc4>)
    685c:	4619      	mov	r1, r3
    685e:	6878      	ldr	r0, [r7, #4]
    6860:	f7fe fa6f 	bl	4d42 <compile_syntax_error>
    6864:	e039      	b.n	68da <compile_global_nonlocal_stmt+0xbe>
            return;
        }

        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    6866:	683b      	ldr	r3, [r7, #0]
    6868:	3308      	adds	r3, #8
    686a:	f107 0210 	add.w	r2, r7, #16
    686e:	2167      	movs	r1, #103	; 0x67
    6870:	4618      	mov	r0, r3
    6872:	f7fd f96f 	bl	3b54 <mp_parse_node_extract_list>
    6876:	61f8      	str	r0, [r7, #28]
        for (int i = 0; i < n; i++) {
    6878:	2300      	movs	r3, #0
    687a:	627b      	str	r3, [r7, #36]	; 0x24
    687c:	e029      	b.n	68d2 <compile_global_nonlocal_stmt+0xb6>
            qstr qst = MP_PARSE_NODE_LEAF_ARG(nodes[i]);
    687e:	693a      	ldr	r2, [r7, #16]
    6880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6882:	009b      	lsls	r3, r3, #2
    6884:	4413      	add	r3, r2
    6886:	681b      	ldr	r3, [r3, #0]
    6888:	091b      	lsrs	r3, r3, #4
    688a:	61bb      	str	r3, [r7, #24]
            bool added;
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6890:	f107 020f 	add.w	r2, r7, #15
    6894:	69b9      	ldr	r1, [r7, #24]
    6896:	4618      	mov	r0, r3
    6898:	f7fe f90c 	bl	4ab4 <scope_find_or_add_id>
    689c:	6178      	str	r0, [r7, #20]
            if (is_global) {
    689e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    68a2:	2b00      	cmp	r3, #0
    68a4:	d009      	beq.n	68ba <compile_global_nonlocal_stmt+0x9e>
                compile_declare_global(comp, (mp_parse_node_t)pns, qst, added, id_info);
    68a6:	6839      	ldr	r1, [r7, #0]
    68a8:	7bfa      	ldrb	r2, [r7, #15]
    68aa:	697b      	ldr	r3, [r7, #20]
    68ac:	9300      	str	r3, [sp, #0]
    68ae:	4613      	mov	r3, r2
    68b0:	69ba      	ldr	r2, [r7, #24]
    68b2:	6878      	ldr	r0, [r7, #4]
    68b4:	f7ff ff5a 	bl	676c <compile_declare_global>
    68b8:	e008      	b.n	68cc <compile_global_nonlocal_stmt+0xb0>
            } else {
                compile_declare_nonlocal(comp, (mp_parse_node_t)pns, qst, added, id_info);
    68ba:	6839      	ldr	r1, [r7, #0]
    68bc:	7bfa      	ldrb	r2, [r7, #15]
    68be:	697b      	ldr	r3, [r7, #20]
    68c0:	9300      	str	r3, [sp, #0]
    68c2:	4613      	mov	r3, r2
    68c4:	69ba      	ldr	r2, [r7, #24]
    68c6:	6878      	ldr	r0, [r7, #4]
    68c8:	f7ff ff7c 	bl	67c4 <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    68cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68ce:	3301      	adds	r3, #1
    68d0:	627b      	str	r3, [r7, #36]	; 0x24
    68d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    68d4:	69fb      	ldr	r3, [r7, #28]
    68d6:	429a      	cmp	r2, r3
    68d8:	dbd1      	blt.n	687e <compile_global_nonlocal_stmt+0x62>
            }
        }
    }
}
    68da:	3728      	adds	r7, #40	; 0x28
    68dc:	46bd      	mov	sp, r7
    68de:	bd80      	pop	{r7, pc}
    68e0:	0001fe48 	.word	0x0001fe48

000068e4 <compile_assert_stmt>:

STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    68e4:	b580      	push	{r7, lr}
    68e6:	b084      	sub	sp, #16
    68e8:	af00      	add	r7, sp, #0
    68ea:	6078      	str	r0, [r7, #4]
    68ec:	6039      	str	r1, [r7, #0]
    // with optimisations enabled we don't compile assertions
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    68ee:	4b1c      	ldr	r3, [pc, #112]	; (6960 <compile_assert_stmt+0x7c>)
    68f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    68f4:	2b00      	cmp	r3, #0
    68f6:	d12f      	bne.n	6958 <compile_assert_stmt+0x74>
        return;
    }

    uint l_end = comp_next_label(comp);
    68f8:	6878      	ldr	r0, [r7, #4]
    68fa:	f7fe fa3d 	bl	4d78 <comp_next_label>
    68fe:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns->nodes[0], true, l_end);
    6900:	683b      	ldr	r3, [r7, #0]
    6902:	6899      	ldr	r1, [r3, #8]
    6904:	68fb      	ldr	r3, [r7, #12]
    6906:	2201      	movs	r2, #1
    6908:	6878      	ldr	r0, [r7, #4]
    690a:	f7fe fbbc 	bl	5086 <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    690e:	687b      	ldr	r3, [r7, #4]
    6910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6912:	2201      	movs	r2, #1
    6914:	21b6      	movs	r1, #182	; 0xb6
    6916:	4618      	mov	r0, r3
    6918:	f003 fd87 	bl	a42a <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    691c:	683b      	ldr	r3, [r7, #0]
    691e:	68db      	ldr	r3, [r3, #12]
    6920:	2b00      	cmp	r3, #0
    6922:	d00c      	beq.n	693e <compile_assert_stmt+0x5a>
        // assertion message
        compile_node(comp, pns->nodes[1]);
    6924:	683b      	ldr	r3, [r7, #0]
    6926:	68db      	ldr	r3, [r3, #12]
    6928:	4619      	mov	r1, r3
    692a:	6878      	ldr	r0, [r7, #4]
    692c:	f002 f809 	bl	8942 <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6934:	2300      	movs	r3, #0
    6936:	2200      	movs	r2, #0
    6938:	2101      	movs	r1, #1
    693a:	f004 f989 	bl	ac50 <mp_emit_bc_call_function>
    }
    EMIT_ARG(raise_varargs, 1);
    693e:	687b      	ldr	r3, [r7, #4]
    6940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6942:	2101      	movs	r1, #1
    6944:	4618      	mov	r0, r3
    6946:	f004 f9c2 	bl	acce <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    694a:	687b      	ldr	r3, [r7, #4]
    694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    694e:	68f9      	ldr	r1, [r7, #12]
    6950:	4618      	mov	r0, r3
    6952:	f003 fc33 	bl	a1bc <mp_emit_bc_label_assign>
    6956:	e000      	b.n	695a <compile_assert_stmt+0x76>
        return;
    6958:	bf00      	nop
}
    695a:	3710      	adds	r7, #16
    695c:	46bd      	mov	sp, r7
    695e:	bd80      	pop	{r7, pc}
    6960:	20001240 	.word	0x20001240

00006964 <compile_if_stmt>:

STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6964:	b580      	push	{r7, lr}
    6966:	b08a      	sub	sp, #40	; 0x28
    6968:	af00      	add	r7, sp, #0
    696a:	6078      	str	r0, [r7, #4]
    696c:	6039      	str	r1, [r7, #0]
    uint l_end = comp_next_label(comp);
    696e:	6878      	ldr	r0, [r7, #4]
    6970:	f7fe fa02 	bl	4d78 <comp_next_label>
    6974:	6238      	str	r0, [r7, #32]

    // optimisation: don't emit anything when "if False"
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    6976:	683b      	ldr	r3, [r7, #0]
    6978:	689b      	ldr	r3, [r3, #8]
    697a:	4618      	mov	r0, r3
    697c:	f7fd f865 	bl	3a4a <mp_parse_node_is_const_false>
    6980:	4603      	mov	r3, r0
    6982:	f083 0301 	eor.w	r3, r3, #1
    6986:	b2db      	uxtb	r3, r3
    6988:	2b00      	cmp	r3, #0
    698a:	d038      	beq.n	69fe <compile_if_stmt+0x9a>
        uint l_fail = comp_next_label(comp);
    698c:	6878      	ldr	r0, [r7, #4]
    698e:	f7fe f9f3 	bl	4d78 <comp_next_label>
    6992:	61f8      	str	r0, [r7, #28]
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    6994:	683b      	ldr	r3, [r7, #0]
    6996:	6899      	ldr	r1, [r3, #8]
    6998:	69fb      	ldr	r3, [r7, #28]
    699a:	2200      	movs	r2, #0
    699c:	6878      	ldr	r0, [r7, #4]
    699e:	f7fe fb72 	bl	5086 <c_if_cond>

        compile_node(comp, pns->nodes[1]); // if block
    69a2:	683b      	ldr	r3, [r7, #0]
    69a4:	68db      	ldr	r3, [r3, #12]
    69a6:	4619      	mov	r1, r3
    69a8:	6878      	ldr	r0, [r7, #4]
    69aa:	f001 ffca 	bl	8942 <compile_node>

        // optimisation: skip everything else when "if True"
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    69ae:	683b      	ldr	r3, [r7, #0]
    69b0:	689b      	ldr	r3, [r3, #8]
    69b2:	4618      	mov	r0, r3
    69b4:	f7fd f865 	bl	3a82 <mp_parse_node_is_const_true>
    69b8:	4603      	mov	r3, r0
    69ba:	2b00      	cmp	r3, #0
    69bc:	f040 809a 	bne.w	6af4 <compile_if_stmt+0x190>
            goto done;
        }

        if (
            // optimisation: don't jump over non-existent elif/else blocks
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    69c0:	683b      	ldr	r3, [r7, #0]
    69c2:	691b      	ldr	r3, [r3, #16]
        if (
    69c4:	2b00      	cmp	r3, #0
    69c6:	d103      	bne.n	69d0 <compile_if_stmt+0x6c>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    69c8:	683b      	ldr	r3, [r7, #0]
    69ca:	695b      	ldr	r3, [r3, #20]
    69cc:	2b00      	cmp	r3, #0
    69ce:	d010      	beq.n	69f2 <compile_if_stmt+0x8e>
            // optimisation: don't jump if last instruction was return
            && !EMIT(last_emit_was_return_value)
    69d0:	687b      	ldr	r3, [r7, #4]
    69d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69d4:	4618      	mov	r0, r3
    69d6:	f003 fb91 	bl	a0fc <mp_emit_bc_last_emit_was_return_value>
    69da:	4603      	mov	r3, r0
    69dc:	f083 0301 	eor.w	r3, r3, #1
    69e0:	b2db      	uxtb	r3, r3
    69e2:	2b00      	cmp	r3, #0
    69e4:	d005      	beq.n	69f2 <compile_if_stmt+0x8e>
            ) {
            // jump over elif/else blocks
            EMIT_ARG(jump, l_end);
    69e6:	687b      	ldr	r3, [r7, #4]
    69e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69ea:	6a39      	ldr	r1, [r7, #32]
    69ec:	4618      	mov	r0, r3
    69ee:	f003 fe6f 	bl	a6d0 <mp_emit_bc_jump>
        }

        EMIT_ARG(label_assign, l_fail);
    69f2:	687b      	ldr	r3, [r7, #4]
    69f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69f6:	69f9      	ldr	r1, [r7, #28]
    69f8:	4618      	mov	r0, r3
    69fa:	f003 fbdf 	bl	a1bc <mp_emit_bc_label_assign>
    }

    // compile elif blocks (if any)
    mp_parse_node_t *pn_elif;
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    69fe:	683b      	ldr	r3, [r7, #0]
    6a00:	3310      	adds	r3, #16
    6a02:	f107 020c 	add.w	r2, r7, #12
    6a06:	216a      	movs	r1, #106	; 0x6a
    6a08:	4618      	mov	r0, r3
    6a0a:	f7fd f8a3 	bl	3b54 <mp_parse_node_extract_list>
    6a0e:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < n_elif; i++) {
    6a10:	2300      	movs	r3, #0
    6a12:	627b      	str	r3, [r7, #36]	; 0x24
    6a14:	e063      	b.n	6ade <compile_if_stmt+0x17a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    6a16:	68fa      	ldr	r2, [r7, #12]
    6a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a1a:	009b      	lsls	r3, r3, #2
    6a1c:	4413      	add	r3, r2
    6a1e:	681b      	ldr	r3, [r3, #0]
    6a20:	2b00      	cmp	r3, #0
    6a22:	d011      	beq.n	6a48 <compile_if_stmt+0xe4>
    6a24:	68fa      	ldr	r2, [r7, #12]
    6a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a28:	009b      	lsls	r3, r3, #2
    6a2a:	4413      	add	r3, r2
    6a2c:	681b      	ldr	r3, [r3, #0]
    6a2e:	f003 0303 	and.w	r3, r3, #3
    6a32:	2b00      	cmp	r3, #0
    6a34:	d108      	bne.n	6a48 <compile_if_stmt+0xe4>
    6a36:	68fa      	ldr	r2, [r7, #12]
    6a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a3a:	009b      	lsls	r3, r3, #2
    6a3c:	4413      	add	r3, r2
    6a3e:	681b      	ldr	r3, [r3, #0]
    6a40:	685b      	ldr	r3, [r3, #4]
    6a42:	b2db      	uxtb	r3, r3
    6a44:	2b6b      	cmp	r3, #107	; 0x6b
    6a46:	d006      	beq.n	6a56 <compile_if_stmt+0xf2>
    6a48:	4b31      	ldr	r3, [pc, #196]	; (6b10 <compile_if_stmt+0x1ac>)
    6a4a:	4a32      	ldr	r2, [pc, #200]	; (6b14 <compile_if_stmt+0x1b0>)
    6a4c:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
    6a50:	4831      	ldr	r0, [pc, #196]	; (6b18 <compile_if_stmt+0x1b4>)
    6a52:	f014 fbc7 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns_elif = (mp_parse_node_struct_t*)pn_elif[i];
    6a56:	68fa      	ldr	r2, [r7, #12]
    6a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a5a:	009b      	lsls	r3, r3, #2
    6a5c:	4413      	add	r3, r2
    6a5e:	681b      	ldr	r3, [r3, #0]
    6a60:	617b      	str	r3, [r7, #20]

        // optimisation: don't emit anything when "if False"
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    6a62:	697b      	ldr	r3, [r7, #20]
    6a64:	689b      	ldr	r3, [r3, #8]
    6a66:	4618      	mov	r0, r3
    6a68:	f7fc ffef 	bl	3a4a <mp_parse_node_is_const_false>
    6a6c:	4603      	mov	r3, r0
    6a6e:	f083 0301 	eor.w	r3, r3, #1
    6a72:	b2db      	uxtb	r3, r3
    6a74:	2b00      	cmp	r3, #0
    6a76:	d02f      	beq.n	6ad8 <compile_if_stmt+0x174>
            uint l_fail = comp_next_label(comp);
    6a78:	6878      	ldr	r0, [r7, #4]
    6a7a:	f7fe f97d 	bl	4d78 <comp_next_label>
    6a7e:	6138      	str	r0, [r7, #16]
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    6a80:	697b      	ldr	r3, [r7, #20]
    6a82:	6899      	ldr	r1, [r3, #8]
    6a84:	693b      	ldr	r3, [r7, #16]
    6a86:	2200      	movs	r2, #0
    6a88:	6878      	ldr	r0, [r7, #4]
    6a8a:	f7fe fafc 	bl	5086 <c_if_cond>

            compile_node(comp, pns_elif->nodes[1]); // elif block
    6a8e:	697b      	ldr	r3, [r7, #20]
    6a90:	68db      	ldr	r3, [r3, #12]
    6a92:	4619      	mov	r1, r3
    6a94:	6878      	ldr	r0, [r7, #4]
    6a96:	f001 ff54 	bl	8942 <compile_node>

            // optimisation: skip everything else when "elif True"
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    6a9a:	697b      	ldr	r3, [r7, #20]
    6a9c:	689b      	ldr	r3, [r3, #8]
    6a9e:	4618      	mov	r0, r3
    6aa0:	f7fc ffef 	bl	3a82 <mp_parse_node_is_const_true>
    6aa4:	4603      	mov	r3, r0
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d126      	bne.n	6af8 <compile_if_stmt+0x194>
                goto done;
            }

            // optimisation: don't jump if last instruction was return
            if (!EMIT(last_emit_was_return_value)) {
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6aae:	4618      	mov	r0, r3
    6ab0:	f003 fb24 	bl	a0fc <mp_emit_bc_last_emit_was_return_value>
    6ab4:	4603      	mov	r3, r0
    6ab6:	f083 0301 	eor.w	r3, r3, #1
    6aba:	b2db      	uxtb	r3, r3
    6abc:	2b00      	cmp	r3, #0
    6abe:	d005      	beq.n	6acc <compile_if_stmt+0x168>
                EMIT_ARG(jump, l_end);
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ac4:	6a39      	ldr	r1, [r7, #32]
    6ac6:	4618      	mov	r0, r3
    6ac8:	f003 fe02 	bl	a6d0 <mp_emit_bc_jump>
            }
            EMIT_ARG(label_assign, l_fail);
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ad0:	6939      	ldr	r1, [r7, #16]
    6ad2:	4618      	mov	r0, r3
    6ad4:	f003 fb72 	bl	a1bc <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    6ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ada:	3301      	adds	r3, #1
    6adc:	627b      	str	r3, [r7, #36]	; 0x24
    6ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6ae0:	69bb      	ldr	r3, [r7, #24]
    6ae2:	429a      	cmp	r2, r3
    6ae4:	db97      	blt.n	6a16 <compile_if_stmt+0xb2>
        }
    }

    // compile else block
    compile_node(comp, pns->nodes[3]); // can be null
    6ae6:	683b      	ldr	r3, [r7, #0]
    6ae8:	695b      	ldr	r3, [r3, #20]
    6aea:	4619      	mov	r1, r3
    6aec:	6878      	ldr	r0, [r7, #4]
    6aee:	f001 ff28 	bl	8942 <compile_node>
    6af2:	e002      	b.n	6afa <compile_if_stmt+0x196>
            goto done;
    6af4:	bf00      	nop
    6af6:	e000      	b.n	6afa <compile_if_stmt+0x196>
                goto done;
    6af8:	bf00      	nop

done:
    EMIT_ARG(label_assign, l_end);
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6afe:	6a39      	ldr	r1, [r7, #32]
    6b00:	4618      	mov	r0, r3
    6b02:	f003 fb5b 	bl	a1bc <mp_emit_bc_label_assign>
}
    6b06:	bf00      	nop
    6b08:	3728      	adds	r7, #40	; 0x28
    6b0a:	46bd      	mov	sp, r7
    6b0c:	bd80      	pop	{r7, pc}
    6b0e:	bf00      	nop
    6b10:	0001fe70 	.word	0x0001fe70
    6b14:	00020640 	.word	0x00020640
    6b18:	0001f9e4 	.word	0x0001f9e4

00006b1c <compile_while_stmt>:
#define END_BREAK_CONTINUE_BLOCK \
    comp->break_label = old_break_label; \
    comp->continue_label = old_continue_label; \
    comp->break_continue_except_level = old_break_continue_except_level;

STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6b1c:	b580      	push	{r7, lr}
    6b1e:	b088      	sub	sp, #32
    6b20:	af00      	add	r7, sp, #0
    6b22:	6078      	str	r0, [r7, #4]
    6b24:	6039      	str	r1, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	8b1b      	ldrh	r3, [r3, #24]
    6b2a:	83fb      	strh	r3, [r7, #30]
    6b2c:	687b      	ldr	r3, [r7, #4]
    6b2e:	8b5b      	ldrh	r3, [r3, #26]
    6b30:	83bb      	strh	r3, [r7, #28]
    6b32:	687b      	ldr	r3, [r7, #4]
    6b34:	8bdb      	ldrh	r3, [r3, #30]
    6b36:	837b      	strh	r3, [r7, #26]
    6b38:	6878      	ldr	r0, [r7, #4]
    6b3a:	f7fe f91d 	bl	4d78 <comp_next_label>
    6b3e:	6178      	str	r0, [r7, #20]
    6b40:	6878      	ldr	r0, [r7, #4]
    6b42:	f7fe f919 	bl	4d78 <comp_next_label>
    6b46:	6138      	str	r0, [r7, #16]
    6b48:	697b      	ldr	r3, [r7, #20]
    6b4a:	b29a      	uxth	r2, r3
    6b4c:	687b      	ldr	r3, [r7, #4]
    6b4e:	831a      	strh	r2, [r3, #24]
    6b50:	693b      	ldr	r3, [r7, #16]
    6b52:	b29a      	uxth	r2, r3
    6b54:	687b      	ldr	r3, [r7, #4]
    6b56:	835a      	strh	r2, [r3, #26]
    6b58:	687b      	ldr	r3, [r7, #4]
    6b5a:	8b9a      	ldrh	r2, [r3, #28]
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	83da      	strh	r2, [r3, #30]

    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    6b60:	683b      	ldr	r3, [r7, #0]
    6b62:	689b      	ldr	r3, [r3, #8]
    6b64:	4618      	mov	r0, r3
    6b66:	f7fc ff70 	bl	3a4a <mp_parse_node_is_const_false>
    6b6a:	4603      	mov	r3, r0
    6b6c:	f083 0301 	eor.w	r3, r3, #1
    6b70:	b2db      	uxtb	r3, r3
    6b72:	2b00      	cmp	r3, #0
    6b74:	d02d      	beq.n	6bd2 <compile_while_stmt+0xb6>
        uint top_label = comp_next_label(comp);
    6b76:	6878      	ldr	r0, [r7, #4]
    6b78:	f7fe f8fe 	bl	4d78 <comp_next_label>
    6b7c:	60f8      	str	r0, [r7, #12]
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    6b7e:	683b      	ldr	r3, [r7, #0]
    6b80:	689b      	ldr	r3, [r3, #8]
    6b82:	4618      	mov	r0, r3
    6b84:	f7fc ff7d 	bl	3a82 <mp_parse_node_is_const_true>
    6b88:	4603      	mov	r3, r0
    6b8a:	f083 0301 	eor.w	r3, r3, #1
    6b8e:	b2db      	uxtb	r3, r3
    6b90:	2b00      	cmp	r3, #0
    6b92:	d005      	beq.n	6ba0 <compile_while_stmt+0x84>
            EMIT_ARG(jump, continue_label);
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b98:	6939      	ldr	r1, [r7, #16]
    6b9a:	4618      	mov	r0, r3
    6b9c:	f003 fd98 	bl	a6d0 <mp_emit_bc_jump>
        }
        EMIT_ARG(label_assign, top_label);
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ba4:	68f9      	ldr	r1, [r7, #12]
    6ba6:	4618      	mov	r0, r3
    6ba8:	f003 fb08 	bl	a1bc <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    6bac:	683b      	ldr	r3, [r7, #0]
    6bae:	68db      	ldr	r3, [r3, #12]
    6bb0:	4619      	mov	r1, r3
    6bb2:	6878      	ldr	r0, [r7, #4]
    6bb4:	f001 fec5 	bl	8942 <compile_node>
        EMIT_ARG(label_assign, continue_label);
    6bb8:	687b      	ldr	r3, [r7, #4]
    6bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bbc:	6939      	ldr	r1, [r7, #16]
    6bbe:	4618      	mov	r0, r3
    6bc0:	f003 fafc 	bl	a1bc <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    6bc4:	683b      	ldr	r3, [r7, #0]
    6bc6:	6899      	ldr	r1, [r3, #8]
    6bc8:	68fb      	ldr	r3, [r7, #12]
    6bca:	2201      	movs	r2, #1
    6bcc:	6878      	ldr	r0, [r7, #4]
    6bce:	f7fe fa5a 	bl	5086 <c_if_cond>
    }

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	8bfa      	ldrh	r2, [r7, #30]
    6bd6:	831a      	strh	r2, [r3, #24]
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	8bba      	ldrh	r2, [r7, #28]
    6bdc:	835a      	strh	r2, [r3, #26]
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	8b7a      	ldrh	r2, [r7, #26]
    6be2:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[2]); // else
    6be4:	683b      	ldr	r3, [r7, #0]
    6be6:	691b      	ldr	r3, [r3, #16]
    6be8:	4619      	mov	r1, r3
    6bea:	6878      	ldr	r0, [r7, #4]
    6bec:	f001 fea9 	bl	8942 <compile_node>

    EMIT_ARG(label_assign, break_label);
    6bf0:	687b      	ldr	r3, [r7, #4]
    6bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bf4:	6979      	ldr	r1, [r7, #20]
    6bf6:	4618      	mov	r0, r3
    6bf8:	f003 fae0 	bl	a1bc <mp_emit_bc_label_assign>
}
    6bfc:	bf00      	nop
    6bfe:	3720      	adds	r7, #32
    6c00:	46bd      	mov	sp, r7
    6c02:	bd80      	pop	{r7, pc}

00006c04 <compile_for_stmt_optimised_range>:
//    (<step> is a constant for us, so no need to worry about it changing)
//
// If <end> is a small-int, then the stack during the for-loop contains just
// the current value of <var>.  Otherwise, the stack contains <end> then the
// current value of <var>.
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6c04:	b580      	push	{r7, lr}
    6c06:	b08c      	sub	sp, #48	; 0x30
    6c08:	af00      	add	r7, sp, #0
    6c0a:	60f8      	str	r0, [r7, #12]
    6c0c:	60b9      	str	r1, [r7, #8]
    6c0e:	607a      	str	r2, [r7, #4]
    6c10:	603b      	str	r3, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6c12:	68fb      	ldr	r3, [r7, #12]
    6c14:	8b1b      	ldrh	r3, [r3, #24]
    6c16:	857b      	strh	r3, [r7, #42]	; 0x2a
    6c18:	68fb      	ldr	r3, [r7, #12]
    6c1a:	8b5b      	ldrh	r3, [r3, #26]
    6c1c:	853b      	strh	r3, [r7, #40]	; 0x28
    6c1e:	68fb      	ldr	r3, [r7, #12]
    6c20:	8bdb      	ldrh	r3, [r3, #30]
    6c22:	84fb      	strh	r3, [r7, #38]	; 0x26
    6c24:	68f8      	ldr	r0, [r7, #12]
    6c26:	f7fe f8a7 	bl	4d78 <comp_next_label>
    6c2a:	6238      	str	r0, [r7, #32]
    6c2c:	68f8      	ldr	r0, [r7, #12]
    6c2e:	f7fe f8a3 	bl	4d78 <comp_next_label>
    6c32:	61f8      	str	r0, [r7, #28]
    6c34:	6a3b      	ldr	r3, [r7, #32]
    6c36:	b29a      	uxth	r2, r3
    6c38:	68fb      	ldr	r3, [r7, #12]
    6c3a:	831a      	strh	r2, [r3, #24]
    6c3c:	69fb      	ldr	r3, [r7, #28]
    6c3e:	b29a      	uxth	r2, r3
    6c40:	68fb      	ldr	r3, [r7, #12]
    6c42:	835a      	strh	r2, [r3, #26]
    6c44:	68fb      	ldr	r3, [r7, #12]
    6c46:	8b9a      	ldrh	r2, [r3, #28]
    6c48:	68fb      	ldr	r3, [r7, #12]
    6c4a:	83da      	strh	r2, [r3, #30]

    uint top_label = comp_next_label(comp);
    6c4c:	68f8      	ldr	r0, [r7, #12]
    6c4e:	f7fe f893 	bl	4d78 <comp_next_label>
    6c52:	61b8      	str	r0, [r7, #24]
    uint entry_label = comp_next_label(comp);
    6c54:	68f8      	ldr	r0, [r7, #12]
    6c56:	f7fe f88f 	bl	4d78 <comp_next_label>
    6c5a:	6178      	str	r0, [r7, #20]

    // put the end value on the stack if it's not a small-int constant
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6c5c:	683b      	ldr	r3, [r7, #0]
    6c5e:	f003 0301 	and.w	r3, r3, #1
    6c62:	2b00      	cmp	r3, #0
    6c64:	bf0c      	ite	eq
    6c66:	2301      	moveq	r3, #1
    6c68:	2300      	movne	r3, #0
    6c6a:	74fb      	strb	r3, [r7, #19]
    if (end_on_stack) {
    6c6c:	7cfb      	ldrb	r3, [r7, #19]
    6c6e:	2b00      	cmp	r3, #0
    6c70:	d003      	beq.n	6c7a <compile_for_stmt_optimised_range+0x76>
        compile_node(comp, pn_end);
    6c72:	6839      	ldr	r1, [r7, #0]
    6c74:	68f8      	ldr	r0, [r7, #12]
    6c76:	f001 fe64 	bl	8942 <compile_node>
    }

    // compile: start
    compile_node(comp, pn_start);
    6c7a:	6879      	ldr	r1, [r7, #4]
    6c7c:	68f8      	ldr	r0, [r7, #12]
    6c7e:	f001 fe60 	bl	8942 <compile_node>

    EMIT_ARG(jump, entry_label);
    6c82:	68fb      	ldr	r3, [r7, #12]
    6c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c86:	6979      	ldr	r1, [r7, #20]
    6c88:	4618      	mov	r0, r3
    6c8a:	f003 fd21 	bl	a6d0 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    6c8e:	68fb      	ldr	r3, [r7, #12]
    6c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c92:	69b9      	ldr	r1, [r7, #24]
    6c94:	4618      	mov	r0, r3
    6c96:	f003 fa91 	bl	a1bc <mp_emit_bc_label_assign>

    // duplicate next value and store it to var
    EMIT(dup_top);
    6c9a:	68fb      	ldr	r3, [r7, #12]
    6c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c9e:	4618      	mov	r0, r3
    6ca0:	f003 fcc5 	bl	a62e <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    6ca4:	2200      	movs	r2, #0
    6ca6:	68b9      	ldr	r1, [r7, #8]
    6ca8:	68f8      	ldr	r0, [r7, #12]
    6caa:	f7fe fc8b 	bl	55c4 <c_assign>

    // compile body
    compile_node(comp, pn_body);
    6cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6cb0:	68f8      	ldr	r0, [r7, #12]
    6cb2:	f001 fe46 	bl	8942 <compile_node>

    EMIT_ARG(label_assign, continue_label);
    6cb6:	68fb      	ldr	r3, [r7, #12]
    6cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cba:	69f9      	ldr	r1, [r7, #28]
    6cbc:	4618      	mov	r0, r3
    6cbe:	f003 fa7d 	bl	a1bc <mp_emit_bc_label_assign>

    // compile: var + step
    compile_node(comp, pn_step);
    6cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    6cc4:	68f8      	ldr	r0, [r7, #12]
    6cc6:	f001 fe3c 	bl	8942 <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    6cca:	68fb      	ldr	r3, [r7, #12]
    6ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cce:	210e      	movs	r1, #14
    6cd0:	4618      	mov	r0, r3
    6cd2:	f003 fe56 	bl	a982 <mp_emit_bc_binary_op>

    EMIT_ARG(label_assign, entry_label);
    6cd6:	68fb      	ldr	r3, [r7, #12]
    6cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cda:	6979      	ldr	r1, [r7, #20]
    6cdc:	4618      	mov	r0, r3
    6cde:	f003 fa6d 	bl	a1bc <mp_emit_bc_label_assign>

    // compile: if var <cond> end: goto top
    if (end_on_stack) {
    6ce2:	7cfb      	ldrb	r3, [r7, #19]
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d00a      	beq.n	6cfe <compile_for_stmt_optimised_range+0xfa>
        EMIT(dup_top_two);
    6ce8:	68fb      	ldr	r3, [r7, #12]
    6cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cec:	4618      	mov	r0, r3
    6cee:	f003 fcae 	bl	a64e <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    6cf2:	68fb      	ldr	r3, [r7, #12]
    6cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cf6:	4618      	mov	r0, r3
    6cf8:	f003 fcca 	bl	a690 <mp_emit_bc_rot_two>
    6cfc:	e008      	b.n	6d10 <compile_for_stmt_optimised_range+0x10c>
    } else {
        EMIT(dup_top);
    6cfe:	68fb      	ldr	r3, [r7, #12]
    6d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d02:	4618      	mov	r0, r3
    6d04:	f003 fc93 	bl	a62e <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    6d08:	6839      	ldr	r1, [r7, #0]
    6d0a:	68f8      	ldr	r0, [r7, #12]
    6d0c:	f001 fe19 	bl	8942 <compile_node>
    }
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    6d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d12:	f003 0301 	and.w	r3, r3, #1
    6d16:	2b00      	cmp	r3, #0
    6d18:	d106      	bne.n	6d28 <compile_for_stmt_optimised_range+0x124>
    6d1a:	4b38      	ldr	r3, [pc, #224]	; (6dfc <compile_for_stmt_optimised_range+0x1f8>)
    6d1c:	4a38      	ldr	r2, [pc, #224]	; (6e00 <compile_for_stmt_optimised_range+0x1fc>)
    6d1e:	f240 516c 	movw	r1, #1388	; 0x56c
    6d22:	4838      	ldr	r0, [pc, #224]	; (6e04 <compile_for_stmt_optimised_range+0x200>)
    6d24:	f014 fa5e 	bl	1b1e4 <__assert_func>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    6d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d2a:	105b      	asrs	r3, r3, #1
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	db06      	blt.n	6d3e <compile_for_stmt_optimised_range+0x13a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    6d30:	68fb      	ldr	r3, [r7, #12]
    6d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d34:	2100      	movs	r1, #0
    6d36:	4618      	mov	r0, r3
    6d38:	f003 fe23 	bl	a982 <mp_emit_bc_binary_op>
    6d3c:	e005      	b.n	6d4a <compile_for_stmt_optimised_range+0x146>
    } else {
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    6d3e:	68fb      	ldr	r3, [r7, #12]
    6d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d42:	2101      	movs	r1, #1
    6d44:	4618      	mov	r0, r3
    6d46:	f003 fe1c 	bl	a982 <mp_emit_bc_binary_op>
    }
    EMIT_ARG(pop_jump_if, true, top_label);
    6d4a:	68fb      	ldr	r3, [r7, #12]
    6d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d4e:	69ba      	ldr	r2, [r7, #24]
    6d50:	2101      	movs	r1, #1
    6d52:	4618      	mov	r0, r3
    6d54:	f003 fcce 	bl	a6f4 <mp_emit_bc_pop_jump_if>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6d58:	68fb      	ldr	r3, [r7, #12]
    6d5a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    6d5c:	831a      	strh	r2, [r3, #24]
    6d5e:	68fb      	ldr	r3, [r7, #12]
    6d60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6d62:	835a      	strh	r2, [r3, #26]
    6d64:	68fb      	ldr	r3, [r7, #12]
    6d66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6d68:	83da      	strh	r2, [r3, #30]

    // Compile the else block.  We must pop the iterator variables before
    // executing the else code because it may contain break/continue statements.
    uint end_label = 0;
    6d6a:	2300      	movs	r3, #0
    6d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6d70:	2b00      	cmp	r3, #0
    6d72:	d022      	beq.n	6dba <compile_for_stmt_optimised_range+0x1b6>
        // discard final value of "var", and possible "end" value
        EMIT(pop_top);
    6d74:	68fb      	ldr	r3, [r7, #12]
    6d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d78:	4618      	mov	r0, r3
    6d7a:	f003 fc78 	bl	a66e <mp_emit_bc_pop_top>
        if (end_on_stack) {
    6d7e:	7cfb      	ldrb	r3, [r7, #19]
    6d80:	2b00      	cmp	r3, #0
    6d82:	d004      	beq.n	6d8e <compile_for_stmt_optimised_range+0x18a>
            EMIT(pop_top);
    6d84:	68fb      	ldr	r3, [r7, #12]
    6d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d88:	4618      	mov	r0, r3
    6d8a:	f003 fc70 	bl	a66e <mp_emit_bc_pop_top>
        }
        compile_node(comp, pn_else);
    6d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    6d90:	68f8      	ldr	r0, [r7, #12]
    6d92:	f001 fdd6 	bl	8942 <compile_node>
        end_label = comp_next_label(comp);
    6d96:	68f8      	ldr	r0, [r7, #12]
    6d98:	f7fd ffee 	bl	4d78 <comp_next_label>
    6d9c:	62f8      	str	r0, [r7, #44]	; 0x2c
        EMIT_ARG(jump, end_label);
    6d9e:	68fb      	ldr	r3, [r7, #12]
    6da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6da4:	4618      	mov	r0, r3
    6da6:	f003 fc93 	bl	a6d0 <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    6daa:	68fb      	ldr	r3, [r7, #12]
    6dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6dae:	7cfb      	ldrb	r3, [r7, #19]
    6db0:	3301      	adds	r3, #1
    6db2:	4619      	mov	r1, r3
    6db4:	4610      	mov	r0, r2
    6db6:	f003 f9b2 	bl	a11e <mp_emit_bc_adjust_stack_size>
    }

    EMIT_ARG(label_assign, break_label);
    6dba:	68fb      	ldr	r3, [r7, #12]
    6dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dbe:	6a39      	ldr	r1, [r7, #32]
    6dc0:	4618      	mov	r0, r3
    6dc2:	f003 f9fb 	bl	a1bc <mp_emit_bc_label_assign>

    // discard final value of var that failed the loop condition
    EMIT(pop_top);
    6dc6:	68fb      	ldr	r3, [r7, #12]
    6dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dca:	4618      	mov	r0, r3
    6dcc:	f003 fc4f 	bl	a66e <mp_emit_bc_pop_top>

    // discard <end> value if it's on the stack
    if (end_on_stack) {
    6dd0:	7cfb      	ldrb	r3, [r7, #19]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	d004      	beq.n	6de0 <compile_for_stmt_optimised_range+0x1dc>
        EMIT(pop_top);
    6dd6:	68fb      	ldr	r3, [r7, #12]
    6dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dda:	4618      	mov	r0, r3
    6ddc:	f003 fc47 	bl	a66e <mp_emit_bc_pop_top>
    }

    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6de2:	2b00      	cmp	r3, #0
    6de4:	d005      	beq.n	6df2 <compile_for_stmt_optimised_range+0x1ee>
        EMIT_ARG(label_assign, end_label);
    6de6:	68fb      	ldr	r3, [r7, #12]
    6de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6dec:	4618      	mov	r0, r3
    6dee:	f003 f9e5 	bl	a1bc <mp_emit_bc_label_assign>
    }
}
    6df2:	bf00      	nop
    6df4:	3730      	adds	r7, #48	; 0x30
    6df6:	46bd      	mov	sp, r7
    6df8:	bd80      	pop	{r7, pc}
    6dfa:	bf00      	nop
    6dfc:	0001feac 	.word	0x0001feac
    6e00:	00020650 	.word	0x00020650
    6e04:	0001f9e4 	.word	0x0001f9e4

00006e08 <compile_for_stmt>:

STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6e08:	b580      	push	{r7, lr}
    6e0a:	b096      	sub	sp, #88	; 0x58
    6e0c:	af04      	add	r7, sp, #16
    6e0e:	6078      	str	r0, [r7, #4]
    6e10:	6039      	str	r1, [r7, #0]
    // this bit optimises: for <x> in range(...), turning it into an explicitly incremented variable
    // this is actually slower, but uses no heap memory
    // for viper it will be much, much faster
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    6e12:	683b      	ldr	r3, [r7, #0]
    6e14:	689b      	ldr	r3, [r3, #8]
    6e16:	f003 030f 	and.w	r3, r3, #15
    6e1a:	2b02      	cmp	r3, #2
    6e1c:	f040 80c2 	bne.w	6fa4 <compile_for_stmt+0x19c>
    6e20:	683b      	ldr	r3, [r7, #0]
    6e22:	68db      	ldr	r3, [r3, #12]
    6e24:	2b00      	cmp	r3, #0
    6e26:	f000 80bd 	beq.w	6fa4 <compile_for_stmt+0x19c>
    6e2a:	683b      	ldr	r3, [r7, #0]
    6e2c:	68db      	ldr	r3, [r3, #12]
    6e2e:	f003 0303 	and.w	r3, r3, #3
    6e32:	2b00      	cmp	r3, #0
    6e34:	f040 80b6 	bne.w	6fa4 <compile_for_stmt+0x19c>
    6e38:	683b      	ldr	r3, [r7, #0]
    6e3a:	68db      	ldr	r3, [r3, #12]
    6e3c:	685b      	ldr	r3, [r3, #4]
    6e3e:	b2db      	uxtb	r3, r3
    6e40:	2b29      	cmp	r3, #41	; 0x29
    6e42:	f040 80af 	bne.w	6fa4 <compile_for_stmt+0x19c>
        mp_parse_node_struct_t *pns_it = (mp_parse_node_struct_t*)pns->nodes[1];
    6e46:	683b      	ldr	r3, [r7, #0]
    6e48:	68db      	ldr	r3, [r3, #12]
    6e4a:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    6e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6e4e:	689b      	ldr	r3, [r3, #8]
    6e50:	f003 030f 	and.w	r3, r3, #15
    6e54:	2b02      	cmp	r3, #2
    6e56:	f040 80a5 	bne.w	6fa4 <compile_for_stmt+0x19c>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    6e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6e5c:	689b      	ldr	r3, [r3, #8]
    6e5e:	091b      	lsrs	r3, r3, #4
    6e60:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
    6e64:	f040 809e 	bne.w	6fa4 <compile_for_stmt+0x19c>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    6e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6e6a:	68db      	ldr	r3, [r3, #12]
    6e6c:	685b      	ldr	r3, [r3, #4]
    6e6e:	b2db      	uxtb	r3, r3
    6e70:	2b2d      	cmp	r3, #45	; 0x2d
    6e72:	f040 8097 	bne.w	6fa4 <compile_for_stmt+0x19c>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    6e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6e78:	68db      	ldr	r3, [r3, #12]
    6e7a:	689b      	ldr	r3, [r3, #8]
    6e7c:	613b      	str	r3, [r7, #16]
            mp_parse_node_t *args;
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    6e7e:	f107 020c 	add.w	r2, r7, #12
    6e82:	f107 0310 	add.w	r3, r7, #16
    6e86:	2197      	movs	r1, #151	; 0x97
    6e88:	4618      	mov	r0, r3
    6e8a:	f7fc fe63 	bl	3b54 <mp_parse_node_extract_list>
    6e8e:	6338      	str	r0, [r7, #48]	; 0x30
            mp_parse_node_t pn_range_start;
            mp_parse_node_t pn_range_end;
            mp_parse_node_t pn_range_step;
            bool optimize = false;
    6e90:	2300      	movs	r3, #0
    6e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            if (1 <= n_args && n_args <= 3) {
    6e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6e98:	2b00      	cmp	r3, #0
    6e9a:	dd6f      	ble.n	6f7c <compile_for_stmt+0x174>
    6e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6e9e:	2b03      	cmp	r3, #3
    6ea0:	dc6c      	bgt.n	6f7c <compile_for_stmt+0x174>
                optimize = true;
    6ea2:	2301      	movs	r3, #1
    6ea4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (n_args == 1) {
    6ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6eaa:	2b01      	cmp	r3, #1
    6eac:	d10b      	bne.n	6ec6 <compile_for_stmt+0xbe>
                    pn_range_start = mp_parse_node_new_small_int(0);
    6eae:	2000      	movs	r0, #0
    6eb0:	f7fd ff14 	bl	4cdc <mp_parse_node_new_small_int>
    6eb4:	6478      	str	r0, [r7, #68]	; 0x44
                    pn_range_end = args[0];
    6eb6:	68fb      	ldr	r3, [r7, #12]
    6eb8:	681b      	ldr	r3, [r3, #0]
    6eba:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6ebc:	2001      	movs	r0, #1
    6ebe:	f7fd ff0d 	bl	4cdc <mp_parse_node_new_small_int>
    6ec2:	63f8      	str	r0, [r7, #60]	; 0x3c
    6ec4:	e022      	b.n	6f0c <compile_for_stmt+0x104>
                } else if (n_args == 2) {
    6ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6ec8:	2b02      	cmp	r3, #2
    6eca:	d10a      	bne.n	6ee2 <compile_for_stmt+0xda>
                    pn_range_start = args[0];
    6ecc:	68fb      	ldr	r3, [r7, #12]
    6ece:	681b      	ldr	r3, [r3, #0]
    6ed0:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6ed2:	68fb      	ldr	r3, [r7, #12]
    6ed4:	685b      	ldr	r3, [r3, #4]
    6ed6:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6ed8:	2001      	movs	r0, #1
    6eda:	f7fd feff 	bl	4cdc <mp_parse_node_new_small_int>
    6ede:	63f8      	str	r0, [r7, #60]	; 0x3c
    6ee0:	e014      	b.n	6f0c <compile_for_stmt+0x104>
                } else {
                    pn_range_start = args[0];
    6ee2:	68fb      	ldr	r3, [r7, #12]
    6ee4:	681b      	ldr	r3, [r3, #0]
    6ee6:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6ee8:	68fb      	ldr	r3, [r7, #12]
    6eea:	685b      	ldr	r3, [r3, #4]
    6eec:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = args[2];
    6eee:	68fb      	ldr	r3, [r7, #12]
    6ef0:	689b      	ldr	r3, [r3, #8]
    6ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // the step must be a non-zero constant integer to do the optimisation
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    6ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ef6:	f003 0301 	and.w	r3, r3, #1
    6efa:	2b00      	cmp	r3, #0
    6efc:	d003      	beq.n	6f06 <compile_for_stmt+0xfe>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    6efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f00:	105b      	asrs	r3, r3, #1
    6f02:	2b00      	cmp	r3, #0
    6f04:	d102      	bne.n	6f0c <compile_for_stmt+0x104>
                        optimize = false;
    6f06:	2300      	movs	r3, #0
    6f08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                // arguments must be able to be compiled as standard expressions
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    6f0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6f10:	2b00      	cmp	r3, #0
    6f12:	d017      	beq.n	6f44 <compile_for_stmt+0x13c>
    6f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f16:	2b00      	cmp	r3, #0
    6f18:	d014      	beq.n	6f44 <compile_for_stmt+0x13c>
    6f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f1c:	f003 0303 	and.w	r3, r3, #3
    6f20:	2b00      	cmp	r3, #0
    6f22:	d10f      	bne.n	6f44 <compile_for_stmt+0x13c>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    6f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f26:	685b      	ldr	r3, [r3, #4]
    6f28:	b2db      	uxtb	r3, r3
    6f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f2e:	2b99      	cmp	r3, #153	; 0x99
    6f30:	d005      	beq.n	6f3e <compile_for_stmt+0x136>
    6f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f34:	2b9a      	cmp	r3, #154	; 0x9a
    6f36:	d002      	beq.n	6f3e <compile_for_stmt+0x136>
    6f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f3a:	2b9b      	cmp	r3, #155	; 0x9b
    6f3c:	d102      	bne.n	6f44 <compile_for_stmt+0x13c>
                        optimize = false;
    6f3e:	2300      	movs	r3, #0
    6f40:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    6f44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d017      	beq.n	6f7c <compile_for_stmt+0x174>
    6f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d014      	beq.n	6f7c <compile_for_stmt+0x174>
    6f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6f54:	f003 0303 	and.w	r3, r3, #3
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d10f      	bne.n	6f7c <compile_for_stmt+0x174>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    6f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6f5e:	685b      	ldr	r3, [r3, #4]
    6f60:	b2db      	uxtb	r3, r3
    6f62:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f66:	2b99      	cmp	r3, #153	; 0x99
    6f68:	d005      	beq.n	6f76 <compile_for_stmt+0x16e>
    6f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f6c:	2b9a      	cmp	r3, #154	; 0x9a
    6f6e:	d002      	beq.n	6f76 <compile_for_stmt+0x16e>
    6f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f72:	2b9b      	cmp	r3, #155	; 0x9b
    6f74:	d102      	bne.n	6f7c <compile_for_stmt+0x174>
                        optimize = false;
    6f76:	2300      	movs	r3, #0
    6f78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
            }
            if (optimize) {
    6f7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6f80:	2b00      	cmp	r3, #0
    6f82:	d00f      	beq.n	6fa4 <compile_for_stmt+0x19c>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    6f84:	683b      	ldr	r3, [r7, #0]
    6f86:	6899      	ldr	r1, [r3, #8]
    6f88:	683b      	ldr	r3, [r7, #0]
    6f8a:	691b      	ldr	r3, [r3, #16]
    6f8c:	683a      	ldr	r2, [r7, #0]
    6f8e:	6952      	ldr	r2, [r2, #20]
    6f90:	9202      	str	r2, [sp, #8]
    6f92:	9301      	str	r3, [sp, #4]
    6f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f96:	9300      	str	r3, [sp, #0]
    6f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6f9c:	6878      	ldr	r0, [r7, #4]
    6f9e:	f7ff fe31 	bl	6c04 <compile_for_stmt_optimised_range>
    6fa2:	e07f      	b.n	70a4 <compile_for_stmt+0x29c>
                return;
            }
        }
    }

    START_BREAK_CONTINUE_BLOCK
    6fa4:	687b      	ldr	r3, [r7, #4]
    6fa6:	8b1b      	ldrh	r3, [r3, #24]
    6fa8:	84fb      	strh	r3, [r7, #38]	; 0x26
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	8b5b      	ldrh	r3, [r3, #26]
    6fae:	84bb      	strh	r3, [r7, #36]	; 0x24
    6fb0:	687b      	ldr	r3, [r7, #4]
    6fb2:	8bdb      	ldrh	r3, [r3, #30]
    6fb4:	847b      	strh	r3, [r7, #34]	; 0x22
    6fb6:	6878      	ldr	r0, [r7, #4]
    6fb8:	f7fd fede 	bl	4d78 <comp_next_label>
    6fbc:	61f8      	str	r0, [r7, #28]
    6fbe:	6878      	ldr	r0, [r7, #4]
    6fc0:	f7fd feda 	bl	4d78 <comp_next_label>
    6fc4:	61b8      	str	r0, [r7, #24]
    6fc6:	69fb      	ldr	r3, [r7, #28]
    6fc8:	b29a      	uxth	r2, r3
    6fca:	687b      	ldr	r3, [r7, #4]
    6fcc:	831a      	strh	r2, [r3, #24]
    6fce:	69bb      	ldr	r3, [r7, #24]
    6fd0:	b29a      	uxth	r2, r3
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	835a      	strh	r2, [r3, #26]
    6fd6:	687b      	ldr	r3, [r7, #4]
    6fd8:	8b9a      	ldrh	r2, [r3, #28]
    6fda:	687b      	ldr	r3, [r7, #4]
    6fdc:	83da      	strh	r2, [r3, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	8b1b      	ldrh	r3, [r3, #24]
    6fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6fea:	b29a      	uxth	r2, r3
    6fec:	687b      	ldr	r3, [r7, #4]
    6fee:	831a      	strh	r2, [r3, #24]

    uint pop_label = comp_next_label(comp);
    6ff0:	6878      	ldr	r0, [r7, #4]
    6ff2:	f7fd fec1 	bl	4d78 <comp_next_label>
    6ff6:	6178      	str	r0, [r7, #20]

    compile_node(comp, pns->nodes[1]); // iterator
    6ff8:	683b      	ldr	r3, [r7, #0]
    6ffa:	68db      	ldr	r3, [r3, #12]
    6ffc:	4619      	mov	r1, r3
    6ffe:	6878      	ldr	r0, [r7, #4]
    7000:	f001 fc9f 	bl	8942 <compile_node>
    EMIT_ARG(get_iter, true);
    7004:	687b      	ldr	r3, [r7, #4]
    7006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7008:	2101      	movs	r1, #1
    700a:	4618      	mov	r0, r3
    700c:	f003 fc47 	bl	a89e <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    7010:	687b      	ldr	r3, [r7, #4]
    7012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7014:	69b9      	ldr	r1, [r7, #24]
    7016:	4618      	mov	r0, r3
    7018:	f003 f8d0 	bl	a1bc <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7020:	6979      	ldr	r1, [r7, #20]
    7022:	4618      	mov	r0, r3
    7024:	f003 fc59 	bl	a8da <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    7028:	683b      	ldr	r3, [r7, #0]
    702a:	689b      	ldr	r3, [r3, #8]
    702c:	2200      	movs	r2, #0
    702e:	4619      	mov	r1, r3
    7030:	6878      	ldr	r0, [r7, #4]
    7032:	f7fe fac7 	bl	55c4 <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    7036:	683b      	ldr	r3, [r7, #0]
    7038:	691b      	ldr	r3, [r3, #16]
    703a:	4619      	mov	r1, r3
    703c:	6878      	ldr	r0, [r7, #4]
    703e:	f001 fc80 	bl	8942 <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7046:	4618      	mov	r0, r3
    7048:	f003 f858 	bl	a0fc <mp_emit_bc_last_emit_was_return_value>
    704c:	4603      	mov	r3, r0
    704e:	f083 0301 	eor.w	r3, r3, #1
    7052:	b2db      	uxtb	r3, r3
    7054:	2b00      	cmp	r3, #0
    7056:	d005      	beq.n	7064 <compile_for_stmt+0x25c>
        EMIT_ARG(jump, continue_label);
    7058:	687b      	ldr	r3, [r7, #4]
    705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    705c:	69b9      	ldr	r1, [r7, #24]
    705e:	4618      	mov	r0, r3
    7060:	f003 fb36 	bl	a6d0 <mp_emit_bc_jump>
    }
    EMIT_ARG(label_assign, pop_label);
    7064:	687b      	ldr	r3, [r7, #4]
    7066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7068:	6979      	ldr	r1, [r7, #20]
    706a:	4618      	mov	r0, r3
    706c:	f003 f8a6 	bl	a1bc <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    7070:	687b      	ldr	r3, [r7, #4]
    7072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7074:	4618      	mov	r0, r3
    7076:	f003 fc42 	bl	a8fe <mp_emit_bc_for_iter_end>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    707a:	687b      	ldr	r3, [r7, #4]
    707c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    707e:	831a      	strh	r2, [r3, #24]
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    7084:	835a      	strh	r2, [r3, #26]
    7086:	687b      	ldr	r3, [r7, #4]
    7088:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    708a:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[3]); // else (may be empty)
    708c:	683b      	ldr	r3, [r7, #0]
    708e:	695b      	ldr	r3, [r3, #20]
    7090:	4619      	mov	r1, r3
    7092:	6878      	ldr	r0, [r7, #4]
    7094:	f001 fc55 	bl	8942 <compile_node>

    EMIT_ARG(label_assign, break_label);
    7098:	687b      	ldr	r3, [r7, #4]
    709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    709c:	69f9      	ldr	r1, [r7, #28]
    709e:	4618      	mov	r0, r3
    70a0:	f003 f88c 	bl	a1bc <mp_emit_bc_label_assign>
}
    70a4:	3748      	adds	r7, #72	; 0x48
    70a6:	46bd      	mov	sp, r7
    70a8:	bd80      	pop	{r7, pc}

000070aa <compile_try_except>:

STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    70aa:	b580      	push	{r7, lr}
    70ac:	b08e      	sub	sp, #56	; 0x38
    70ae:	af00      	add	r7, sp, #0
    70b0:	60f8      	str	r0, [r7, #12]
    70b2:	60b9      	str	r1, [r7, #8]
    70b4:	607a      	str	r2, [r7, #4]
    70b6:	603b      	str	r3, [r7, #0]
    // setup code
    uint l1 = comp_next_label(comp);
    70b8:	68f8      	ldr	r0, [r7, #12]
    70ba:	f7fd fe5d 	bl	4d78 <comp_next_label>
    70be:	6278      	str	r0, [r7, #36]	; 0x24
    uint success_label = comp_next_label(comp);
    70c0:	68f8      	ldr	r0, [r7, #12]
    70c2:	f7fd fe59 	bl	4d78 <comp_next_label>
    70c6:	6238      	str	r0, [r7, #32]

    EMIT_ARG(setup_block, l1, MP_EMIT_SETUP_BLOCK_EXCEPT);
    70c8:	68fb      	ldr	r3, [r7, #12]
    70ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70cc:	2202      	movs	r2, #2
    70ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
    70d0:	4618      	mov	r0, r3
    70d2:	f003 fb93 	bl	a7fc <mp_emit_bc_setup_block>
    compile_increase_except_level(comp);
    70d6:	68f8      	ldr	r0, [r7, #12]
    70d8:	f7fd fe5d 	bl	4d96 <compile_increase_except_level>

    compile_node(comp, pn_body); // body
    70dc:	68b9      	ldr	r1, [r7, #8]
    70de:	68f8      	ldr	r0, [r7, #12]
    70e0:	f001 fc2f 	bl	8942 <compile_node>
    EMIT(pop_block);
    70e4:	68fb      	ldr	r3, [r7, #12]
    70e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70e8:	4618      	mov	r0, r3
    70ea:	f003 fc15 	bl	a918 <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    70ee:	68fb      	ldr	r3, [r7, #12]
    70f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70f2:	6a39      	ldr	r1, [r7, #32]
    70f4:	4618      	mov	r0, r3
    70f6:	f003 faeb 	bl	a6d0 <mp_emit_bc_jump>

    EMIT_ARG(label_assign, l1); // start of exception handler
    70fa:	68fb      	ldr	r3, [r7, #12]
    70fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7100:	4618      	mov	r0, r3
    7102:	f003 f85b 	bl	a1bc <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    710a:	4618      	mov	r0, r3
    710c:	f003 fe26 	bl	ad5c <mp_emit_bc_start_except_handler>

    // at this point the top of the stack contains the exception instance that was raised

    uint l2 = comp_next_label(comp);
    7110:	68f8      	ldr	r0, [r7, #12]
    7112:	f7fd fe31 	bl	4d78 <comp_next_label>
    7116:	61f8      	str	r0, [r7, #28]

    for (int i = 0; i < n_except; i++) {
    7118:	2300      	movs	r3, #0
    711a:	637b      	str	r3, [r7, #52]	; 0x34
    711c:	e0de      	b.n	72dc <compile_try_except+0x232>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7120:	009b      	lsls	r3, r3, #2
    7122:	683a      	ldr	r2, [r7, #0]
    7124:	4413      	add	r3, r2
    7126:	681b      	ldr	r3, [r3, #0]
    7128:	2b00      	cmp	r3, #0
    712a:	d011      	beq.n	7150 <compile_try_except+0xa6>
    712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    712e:	009b      	lsls	r3, r3, #2
    7130:	683a      	ldr	r2, [r7, #0]
    7132:	4413      	add	r3, r2
    7134:	681b      	ldr	r3, [r3, #0]
    7136:	f003 0303 	and.w	r3, r3, #3
    713a:	2b00      	cmp	r3, #0
    713c:	d108      	bne.n	7150 <compile_try_except+0xa6>
    713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7140:	009b      	lsls	r3, r3, #2
    7142:	683a      	ldr	r2, [r7, #0]
    7144:	4413      	add	r3, r2
    7146:	681b      	ldr	r3, [r3, #0]
    7148:	685b      	ldr	r3, [r3, #4]
    714a:	b2db      	uxtb	r3, r3
    714c:	2b6e      	cmp	r3, #110	; 0x6e
    714e:	d006      	beq.n	715e <compile_try_except+0xb4>
    7150:	4b75      	ldr	r3, [pc, #468]	; (7328 <compile_try_except+0x27e>)
    7152:	4a76      	ldr	r2, [pc, #472]	; (732c <compile_try_except+0x282>)
    7154:	f240 51fb 	movw	r1, #1531	; 0x5fb
    7158:	4875      	ldr	r0, [pc, #468]	; (7330 <compile_try_except+0x286>)
    715a:	f014 f843 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns_except = (mp_parse_node_struct_t*)pn_excepts[i];
    715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7160:	009b      	lsls	r3, r3, #2
    7162:	683a      	ldr	r2, [r7, #0]
    7164:	4413      	add	r3, r2
    7166:	681b      	ldr	r3, [r3, #0]
    7168:	61bb      	str	r3, [r7, #24]

        qstr qstr_exception_local = 0;
    716a:	2300      	movs	r3, #0
    716c:	633b      	str	r3, [r7, #48]	; 0x30
        uint end_finally_label = comp_next_label(comp);
    716e:	68f8      	ldr	r0, [r7, #12]
    7170:	f7fd fe02 	bl	4d78 <comp_next_label>
    7174:	6178      	str	r0, [r7, #20]

        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    7176:	69bb      	ldr	r3, [r7, #24]
    7178:	689b      	ldr	r3, [r3, #8]
    717a:	2b00      	cmp	r3, #0
    717c:	d112      	bne.n	71a4 <compile_try_except+0xfa>
            // this is a catch all exception handler
            if (i + 1 != n_except) {
    717e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7180:	1c5a      	adds	r2, r3, #1
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	429a      	cmp	r2, r3
    7186:	d03c      	beq.n	7202 <compile_try_except+0x158>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    7188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    718a:	009b      	lsls	r3, r3, #2
    718c:	683a      	ldr	r2, [r7, #0]
    718e:	4413      	add	r3, r2
    7190:	681b      	ldr	r3, [r3, #0]
    7192:	4a68      	ldr	r2, [pc, #416]	; (7334 <compile_try_except+0x28a>)
    7194:	4619      	mov	r1, r3
    7196:	68f8      	ldr	r0, [r7, #12]
    7198:	f7fd fdd3 	bl	4d42 <compile_syntax_error>
                compile_decrease_except_level(comp);
    719c:	68f8      	ldr	r0, [r7, #12]
    719e:	f7fd fe16 	bl	4dce <compile_decrease_except_level>
                return;
    71a2:	e0bd      	b.n	7320 <compile_try_except+0x276>
            }
        } else {
            // this exception handler requires a match to a certain type of exception
            mp_parse_node_t pns_exception_expr = pns_except->nodes[0];
    71a4:	69bb      	ldr	r3, [r7, #24]
    71a6:	689b      	ldr	r3, [r3, #8]
    71a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    71aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71ac:	2b00      	cmp	r3, #0
    71ae:	d012      	beq.n	71d6 <compile_try_except+0x12c>
    71b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71b2:	f003 0303 	and.w	r3, r3, #3
    71b6:	2b00      	cmp	r3, #0
    71b8:	d10d      	bne.n	71d6 <compile_try_except+0x12c>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    71ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71bc:	613b      	str	r3, [r7, #16]
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    71be:	693b      	ldr	r3, [r7, #16]
    71c0:	685b      	ldr	r3, [r3, #4]
    71c2:	b2db      	uxtb	r3, r3
    71c4:	2b6f      	cmp	r3, #111	; 0x6f
    71c6:	d106      	bne.n	71d6 <compile_try_except+0x12c>
                    // handler binds the exception to a local
                    pns_exception_expr = pns3->nodes[0];
    71c8:	693b      	ldr	r3, [r7, #16]
    71ca:	689b      	ldr	r3, [r3, #8]
    71cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    71ce:	693b      	ldr	r3, [r7, #16]
    71d0:	68db      	ldr	r3, [r3, #12]
    71d2:	091b      	lsrs	r3, r3, #4
    71d4:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
            EMIT(dup_top);
    71d6:	68fb      	ldr	r3, [r7, #12]
    71d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71da:	4618      	mov	r0, r3
    71dc:	f003 fa27 	bl	a62e <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    71e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    71e2:	68f8      	ldr	r0, [r7, #12]
    71e4:	f001 fbad 	bl	8942 <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    71e8:	68fb      	ldr	r3, [r7, #12]
    71ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71ec:	2108      	movs	r1, #8
    71ee:	4618      	mov	r0, r3
    71f0:	f003 fbc7 	bl	a982 <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    71f4:	68fb      	ldr	r3, [r7, #12]
    71f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71f8:	697a      	ldr	r2, [r7, #20]
    71fa:	2100      	movs	r1, #0
    71fc:	4618      	mov	r0, r3
    71fe:	f003 fa79 	bl	a6f4 <mp_emit_bc_pop_jump_if>
        }

        // either discard or store the exception instance
        if (qstr_exception_local == 0) {
    7202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7204:	2b00      	cmp	r3, #0
    7206:	d105      	bne.n	7214 <compile_try_except+0x16a>
            EMIT(pop_top);
    7208:	68fb      	ldr	r3, [r7, #12]
    720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    720c:	4618      	mov	r0, r3
    720e:	f003 fa2e 	bl	a66e <mp_emit_bc_pop_top>
    7212:	e003      	b.n	721c <compile_try_except+0x172>
        } else {
            compile_store_id(comp, qstr_exception_local);
    7214:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7216:	68f8      	ldr	r0, [r7, #12]
    7218:	f7fd feb0 	bl	4f7c <compile_store_id>
        }

        uint l3 = 0;
    721c:	2300      	movs	r3, #0
    721e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (qstr_exception_local != 0) {
    7220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7222:	2b00      	cmp	r3, #0
    7224:	d00d      	beq.n	7242 <compile_try_except+0x198>
            l3 = comp_next_label(comp);
    7226:	68f8      	ldr	r0, [r7, #12]
    7228:	f7fd fda6 	bl	4d78 <comp_next_label>
    722c:	62b8      	str	r0, [r7, #40]	; 0x28
            EMIT_ARG(setup_block, l3, MP_EMIT_SETUP_BLOCK_FINALLY);
    722e:	68fb      	ldr	r3, [r7, #12]
    7230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7232:	2203      	movs	r2, #3
    7234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7236:	4618      	mov	r0, r3
    7238:	f003 fae0 	bl	a7fc <mp_emit_bc_setup_block>
            compile_increase_except_level(comp);
    723c:	68f8      	ldr	r0, [r7, #12]
    723e:	f7fd fdaa 	bl	4d96 <compile_increase_except_level>
        }
        compile_node(comp, pns_except->nodes[1]);
    7242:	69bb      	ldr	r3, [r7, #24]
    7244:	68db      	ldr	r3, [r3, #12]
    7246:	4619      	mov	r1, r3
    7248:	68f8      	ldr	r0, [r7, #12]
    724a:	f001 fb7a 	bl	8942 <compile_node>
        if (qstr_exception_local != 0) {
    724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7250:	2b00      	cmp	r3, #0
    7252:	d004      	beq.n	725e <compile_try_except+0x1b4>
            EMIT(pop_block);
    7254:	68fb      	ldr	r3, [r7, #12]
    7256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7258:	4618      	mov	r0, r3
    725a:	f003 fb5d 	bl	a918 <mp_emit_bc_pop_block>
        }
        EMIT(pop_except);
    725e:	68fb      	ldr	r3, [r7, #12]
    7260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7262:	4618      	mov	r0, r3
    7264:	f003 fb68 	bl	a938 <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    7268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    726a:	2b00      	cmp	r3, #0
    726c:	d021      	beq.n	72b2 <compile_try_except+0x208>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    726e:	68fb      	ldr	r3, [r7, #12]
    7270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7272:	210e      	movs	r1, #14
    7274:	4618      	mov	r0, r3
    7276:	f003 f81f 	bl	a2b8 <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    727a:	68fb      	ldr	r3, [r7, #12]
    727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    727e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7280:	4618      	mov	r0, r3
    7282:	f002 ff9b 	bl	a1bc <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7286:	68fb      	ldr	r3, [r7, #12]
    7288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    728a:	210e      	movs	r1, #14
    728c:	4618      	mov	r0, r3
    728e:	f003 f813 	bl	a2b8 <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    7292:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7294:	68f8      	ldr	r0, [r7, #12]
    7296:	f7fd fe71 	bl	4f7c <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    729a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    729c:	68f8      	ldr	r0, [r7, #12]
    729e:	f7fd fe8b 	bl	4fb8 <compile_delete_id>

            compile_decrease_except_level(comp);
    72a2:	68f8      	ldr	r0, [r7, #12]
    72a4:	f7fd fd93 	bl	4dce <compile_decrease_except_level>
            EMIT(end_finally);
    72a8:	68fb      	ldr	r3, [r7, #12]
    72aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ac:	4618      	mov	r0, r3
    72ae:	f003 fae5 	bl	a87c <mp_emit_bc_end_finally>
        }
        EMIT_ARG(jump, l2);
    72b2:	68fb      	ldr	r3, [r7, #12]
    72b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72b6:	69f9      	ldr	r1, [r7, #28]
    72b8:	4618      	mov	r0, r3
    72ba:	f003 fa09 	bl	a6d0 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    72be:	68fb      	ldr	r3, [r7, #12]
    72c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72c2:	6979      	ldr	r1, [r7, #20]
    72c4:	4618      	mov	r0, r3
    72c6:	f002 ff79 	bl	a1bc <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    72ca:	68fb      	ldr	r3, [r7, #12]
    72cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ce:	2101      	movs	r1, #1
    72d0:	4618      	mov	r0, r3
    72d2:	f002 ff24 	bl	a11e <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    72d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    72d8:	3301      	adds	r3, #1
    72da:	637b      	str	r3, [r7, #52]	; 0x34
    72dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    72de:	687b      	ldr	r3, [r7, #4]
    72e0:	429a      	cmp	r2, r3
    72e2:	f6ff af1c 	blt.w	711e <compile_try_except+0x74>
    }

    compile_decrease_except_level(comp);
    72e6:	68f8      	ldr	r0, [r7, #12]
    72e8:	f7fd fd71 	bl	4dce <compile_decrease_except_level>
    EMIT(end_finally);
    72ec:	68fb      	ldr	r3, [r7, #12]
    72ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72f0:	4618      	mov	r0, r3
    72f2:	f003 fac3 	bl	a87c <mp_emit_bc_end_finally>
    EMIT(end_except_handler);
    72f6:	68fb      	ldr	r3, [r7, #12]
    72f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72fa:	4618      	mov	r0, r3
    72fc:	f003 fd3a 	bl	ad74 <mp_emit_bc_end_except_handler>

    EMIT_ARG(label_assign, success_label);
    7300:	68fb      	ldr	r3, [r7, #12]
    7302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7304:	6a39      	ldr	r1, [r7, #32]
    7306:	4618      	mov	r0, r3
    7308:	f002 ff58 	bl	a1bc <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    730c:	6c39      	ldr	r1, [r7, #64]	; 0x40
    730e:	68f8      	ldr	r0, [r7, #12]
    7310:	f001 fb17 	bl	8942 <compile_node>
    EMIT_ARG(label_assign, l2);
    7314:	68fb      	ldr	r3, [r7, #12]
    7316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7318:	69f9      	ldr	r1, [r7, #28]
    731a:	4618      	mov	r0, r3
    731c:	f002 ff4e 	bl	a1bc <mp_emit_bc_label_assign>
}
    7320:	3738      	adds	r7, #56	; 0x38
    7322:	46bd      	mov	sp, r7
    7324:	bd80      	pop	{r7, pc}
    7326:	bf00      	nop
    7328:	0001fed0 	.word	0x0001fed0
    732c:	00020674 	.word	0x00020674
    7330:	0001f9e4 	.word	0x0001f9e4
    7334:	0001ff10 	.word	0x0001ff10

00007338 <compile_try_finally>:

STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    7338:	b580      	push	{r7, lr}
    733a:	b088      	sub	sp, #32
    733c:	af02      	add	r7, sp, #8
    733e:	60f8      	str	r0, [r7, #12]
    7340:	60b9      	str	r1, [r7, #8]
    7342:	607a      	str	r2, [r7, #4]
    7344:	603b      	str	r3, [r7, #0]
    uint l_finally_block = comp_next_label(comp);
    7346:	68f8      	ldr	r0, [r7, #12]
    7348:	f7fd fd16 	bl	4d78 <comp_next_label>
    734c:	6178      	str	r0, [r7, #20]

    EMIT_ARG(setup_block, l_finally_block, MP_EMIT_SETUP_BLOCK_FINALLY);
    734e:	68fb      	ldr	r3, [r7, #12]
    7350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7352:	2203      	movs	r2, #3
    7354:	6979      	ldr	r1, [r7, #20]
    7356:	4618      	mov	r0, r3
    7358:	f003 fa50 	bl	a7fc <mp_emit_bc_setup_block>
    compile_increase_except_level(comp);
    735c:	68f8      	ldr	r0, [r7, #12]
    735e:	f7fd fd1a 	bl	4d96 <compile_increase_except_level>

    if (n_except == 0) {
    7362:	687b      	ldr	r3, [r7, #4]
    7364:	2b00      	cmp	r3, #0
    7366:	d11b      	bne.n	73a0 <compile_try_finally+0x68>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    7368:	6a3b      	ldr	r3, [r7, #32]
    736a:	2b00      	cmp	r3, #0
    736c:	d006      	beq.n	737c <compile_try_finally+0x44>
    736e:	4b21      	ldr	r3, [pc, #132]	; (73f4 <compile_try_finally+0xbc>)
    7370:	4a21      	ldr	r2, [pc, #132]	; (73f8 <compile_try_finally+0xc0>)
    7372:	f240 614a 	movw	r1, #1610	; 0x64a
    7376:	4821      	ldr	r0, [pc, #132]	; (73fc <compile_try_finally+0xc4>)
    7378:	f013 ff34 	bl	1b1e4 <__assert_func>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    737c:	68fb      	ldr	r3, [r7, #12]
    737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7380:	2103      	movs	r1, #3
    7382:	4618      	mov	r0, r3
    7384:	f002 fecb 	bl	a11e <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    7388:	68b9      	ldr	r1, [r7, #8]
    738a:	68f8      	ldr	r0, [r7, #12]
    738c:	f001 fad9 	bl	8942 <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    7390:	68fb      	ldr	r3, [r7, #12]
    7392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7394:	f06f 0102 	mvn.w	r1, #2
    7398:	4618      	mov	r0, r3
    739a:	f002 fec0 	bl	a11e <mp_emit_bc_adjust_stack_size>
    739e:	e007      	b.n	73b0 <compile_try_finally+0x78>
    } else {
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    73a0:	6a3b      	ldr	r3, [r7, #32]
    73a2:	9300      	str	r3, [sp, #0]
    73a4:	683b      	ldr	r3, [r7, #0]
    73a6:	687a      	ldr	r2, [r7, #4]
    73a8:	68b9      	ldr	r1, [r7, #8]
    73aa:	68f8      	ldr	r0, [r7, #12]
    73ac:	f7ff fe7d 	bl	70aa <compile_try_except>
    }
    EMIT(pop_block);
    73b0:	68fb      	ldr	r3, [r7, #12]
    73b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73b4:	4618      	mov	r0, r3
    73b6:	f003 faaf 	bl	a918 <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    73ba:	68fb      	ldr	r3, [r7, #12]
    73bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73be:	210e      	movs	r1, #14
    73c0:	4618      	mov	r0, r3
    73c2:	f002 ff79 	bl	a2b8 <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    73c6:	68fb      	ldr	r3, [r7, #12]
    73c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73ca:	6979      	ldr	r1, [r7, #20]
    73cc:	4618      	mov	r0, r3
    73ce:	f002 fef5 	bl	a1bc <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    73d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    73d4:	68f8      	ldr	r0, [r7, #12]
    73d6:	f001 fab4 	bl	8942 <compile_node>

    compile_decrease_except_level(comp);
    73da:	68f8      	ldr	r0, [r7, #12]
    73dc:	f7fd fcf7 	bl	4dce <compile_decrease_except_level>
    EMIT(end_finally);
    73e0:	68fb      	ldr	r3, [r7, #12]
    73e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73e4:	4618      	mov	r0, r3
    73e6:	f003 fa49 	bl	a87c <mp_emit_bc_end_finally>
}
    73ea:	bf00      	nop
    73ec:	3718      	adds	r7, #24
    73ee:	46bd      	mov	sp, r7
    73f0:	bd80      	pop	{r7, pc}
    73f2:	bf00      	nop
    73f4:	0001ff30 	.word	0x0001ff30
    73f8:	00020688 	.word	0x00020688
    73fc:	0001f9e4 	.word	0x0001f9e4

00007400 <compile_try_stmt>:

STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7400:	b580      	push	{r7, lr}
    7402:	b08a      	sub	sp, #40	; 0x28
    7404:	af02      	add	r7, sp, #8
    7406:	6078      	str	r0, [r7, #4]
    7408:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    740a:	683b      	ldr	r3, [r7, #0]
    740c:	68db      	ldr	r3, [r3, #12]
    740e:	2b00      	cmp	r3, #0
    7410:	d005      	beq.n	741e <compile_try_stmt+0x1e>
    7412:	683b      	ldr	r3, [r7, #0]
    7414:	68db      	ldr	r3, [r3, #12]
    7416:	f003 0303 	and.w	r3, r3, #3
    741a:	2b00      	cmp	r3, #0
    741c:	d006      	beq.n	742c <compile_try_stmt+0x2c>
    741e:	4b30      	ldr	r3, [pc, #192]	; (74e0 <compile_try_stmt+0xe0>)
    7420:	4a30      	ldr	r2, [pc, #192]	; (74e4 <compile_try_stmt+0xe4>)
    7422:	f240 615b 	movw	r1, #1627	; 0x65b
    7426:	4830      	ldr	r0, [pc, #192]	; (74e8 <compile_try_stmt+0xe8>)
    7428:	f013 fedc 	bl	1b1e4 <__assert_func>
    {
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    742c:	683b      	ldr	r3, [r7, #0]
    742e:	68db      	ldr	r3, [r3, #12]
    7430:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    7432:	69fb      	ldr	r3, [r7, #28]
    7434:	685b      	ldr	r3, [r3, #4]
    7436:	b2db      	uxtb	r3, r3
    7438:	2b71      	cmp	r3, #113	; 0x71
    743a:	d10c      	bne.n	7456 <compile_try_stmt+0x56>
            // just try-finally
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    743c:	683b      	ldr	r3, [r7, #0]
    743e:	6899      	ldr	r1, [r3, #8]
    7440:	69fb      	ldr	r3, [r7, #28]
    7442:	689b      	ldr	r3, [r3, #8]
    7444:	9301      	str	r3, [sp, #4]
    7446:	2300      	movs	r3, #0
    7448:	9300      	str	r3, [sp, #0]
    744a:	2300      	movs	r3, #0
    744c:	2200      	movs	r2, #0
    744e:	6878      	ldr	r0, [r7, #4]
    7450:	f7ff ff72 	bl	7338 <compile_try_finally>
            mp_parse_node_t *pn_excepts;
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
        }
    }
}
    7454:	e040      	b.n	74d8 <compile_try_stmt+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    7456:	69fb      	ldr	r3, [r7, #28]
    7458:	685b      	ldr	r3, [r3, #4]
    745a:	b2db      	uxtb	r3, r3
    745c:	2b6d      	cmp	r3, #109	; 0x6d
    745e:	d128      	bne.n	74b2 <compile_try_stmt+0xb2>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    7460:	69fb      	ldr	r3, [r7, #28]
    7462:	3308      	adds	r3, #8
    7464:	f107 0210 	add.w	r2, r7, #16
    7468:	2170      	movs	r1, #112	; 0x70
    746a:	4618      	mov	r0, r3
    746c:	f7fc fb72 	bl	3b54 <mp_parse_node_extract_list>
    7470:	61b8      	str	r0, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    7472:	69fb      	ldr	r3, [r7, #28]
    7474:	691b      	ldr	r3, [r3, #16]
    7476:	2b00      	cmp	r3, #0
    7478:	d10b      	bne.n	7492 <compile_try_stmt+0x92>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    747a:	683b      	ldr	r3, [r7, #0]
    747c:	6899      	ldr	r1, [r3, #8]
    747e:	693a      	ldr	r2, [r7, #16]
    7480:	69fb      	ldr	r3, [r7, #28]
    7482:	68db      	ldr	r3, [r3, #12]
    7484:	9300      	str	r3, [sp, #0]
    7486:	4613      	mov	r3, r2
    7488:	69ba      	ldr	r2, [r7, #24]
    748a:	6878      	ldr	r0, [r7, #4]
    748c:	f7ff fe0d 	bl	70aa <compile_try_except>
}
    7490:	e022      	b.n	74d8 <compile_try_stmt+0xd8>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    7492:	683b      	ldr	r3, [r7, #0]
    7494:	6899      	ldr	r1, [r3, #8]
    7496:	6938      	ldr	r0, [r7, #16]
    7498:	69fb      	ldr	r3, [r7, #28]
    749a:	68db      	ldr	r3, [r3, #12]
    749c:	69fa      	ldr	r2, [r7, #28]
    749e:	6912      	ldr	r2, [r2, #16]
    74a0:	6892      	ldr	r2, [r2, #8]
    74a2:	9201      	str	r2, [sp, #4]
    74a4:	9300      	str	r3, [sp, #0]
    74a6:	4603      	mov	r3, r0
    74a8:	69ba      	ldr	r2, [r7, #24]
    74aa:	6878      	ldr	r0, [r7, #4]
    74ac:	f7ff ff44 	bl	7338 <compile_try_finally>
}
    74b0:	e012      	b.n	74d8 <compile_try_stmt+0xd8>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    74b2:	683b      	ldr	r3, [r7, #0]
    74b4:	330c      	adds	r3, #12
    74b6:	f107 020c 	add.w	r2, r7, #12
    74ba:	2170      	movs	r1, #112	; 0x70
    74bc:	4618      	mov	r0, r3
    74be:	f7fc fb49 	bl	3b54 <mp_parse_node_extract_list>
    74c2:	6178      	str	r0, [r7, #20]
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    74c4:	683b      	ldr	r3, [r7, #0]
    74c6:	6899      	ldr	r1, [r3, #8]
    74c8:	68fa      	ldr	r2, [r7, #12]
    74ca:	2300      	movs	r3, #0
    74cc:	9300      	str	r3, [sp, #0]
    74ce:	4613      	mov	r3, r2
    74d0:	697a      	ldr	r2, [r7, #20]
    74d2:	6878      	ldr	r0, [r7, #4]
    74d4:	f7ff fde9 	bl	70aa <compile_try_except>
}
    74d8:	bf00      	nop
    74da:	3720      	adds	r7, #32
    74dc:	46bd      	mov	sp, r7
    74de:	bd80      	pop	{r7, pc}
    74e0:	0001ff50 	.word	0x0001ff50
    74e4:	0002069c 	.word	0x0002069c
    74e8:	0001f9e4 	.word	0x0001f9e4

000074ec <compile_with_stmt_helper>:

STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    74ec:	b580      	push	{r7, lr}
    74ee:	b086      	sub	sp, #24
    74f0:	af00      	add	r7, sp, #0
    74f2:	60f8      	str	r0, [r7, #12]
    74f4:	60b9      	str	r1, [r7, #8]
    74f6:	607a      	str	r2, [r7, #4]
    74f8:	603b      	str	r3, [r7, #0]
    if (n == 0) {
    74fa:	68bb      	ldr	r3, [r7, #8]
    74fc:	2b00      	cmp	r3, #0
    74fe:	d104      	bne.n	750a <compile_with_stmt_helper+0x1e>
        // no more pre-bits, compile the body of the with
        compile_node(comp, body);
    7500:	6839      	ldr	r1, [r7, #0]
    7502:	68f8      	ldr	r0, [r7, #12]
    7504:	f001 fa1d 	bl	8942 <compile_node>
        // finish this with block
        EMIT_ARG(with_cleanup, l_end);
        compile_decrease_except_level(comp);
        EMIT(end_finally);
    }
}
    7508:	e056      	b.n	75b8 <compile_with_stmt_helper+0xcc>
        uint l_end = comp_next_label(comp);
    750a:	68f8      	ldr	r0, [r7, #12]
    750c:	f7fd fc34 	bl	4d78 <comp_next_label>
    7510:	6178      	str	r0, [r7, #20]
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    7512:	687b      	ldr	r3, [r7, #4]
    7514:	681b      	ldr	r3, [r3, #0]
    7516:	2b00      	cmp	r3, #0
    7518:	d023      	beq.n	7562 <compile_with_stmt_helper+0x76>
    751a:	687b      	ldr	r3, [r7, #4]
    751c:	681b      	ldr	r3, [r3, #0]
    751e:	f003 0303 	and.w	r3, r3, #3
    7522:	2b00      	cmp	r3, #0
    7524:	d11d      	bne.n	7562 <compile_with_stmt_helper+0x76>
    7526:	687b      	ldr	r3, [r7, #4]
    7528:	681b      	ldr	r3, [r3, #0]
    752a:	685b      	ldr	r3, [r3, #4]
    752c:	b2db      	uxtb	r3, r3
    752e:	2b74      	cmp	r3, #116	; 0x74
    7530:	d117      	bne.n	7562 <compile_with_stmt_helper+0x76>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)nodes[0];
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	681b      	ldr	r3, [r3, #0]
    7536:	613b      	str	r3, [r7, #16]
            compile_node(comp, pns->nodes[0]);
    7538:	693b      	ldr	r3, [r7, #16]
    753a:	689b      	ldr	r3, [r3, #8]
    753c:	4619      	mov	r1, r3
    753e:	68f8      	ldr	r0, [r7, #12]
    7540:	f001 f9ff 	bl	8942 <compile_node>
            EMIT_ARG(setup_block, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    7544:	68fb      	ldr	r3, [r7, #12]
    7546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7548:	2200      	movs	r2, #0
    754a:	6979      	ldr	r1, [r7, #20]
    754c:	4618      	mov	r0, r3
    754e:	f003 f955 	bl	a7fc <mp_emit_bc_setup_block>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    7552:	693b      	ldr	r3, [r7, #16]
    7554:	68db      	ldr	r3, [r3, #12]
    7556:	2200      	movs	r2, #0
    7558:	4619      	mov	r1, r3
    755a:	68f8      	ldr	r0, [r7, #12]
    755c:	f7fe f832 	bl	55c4 <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    7560:	e011      	b.n	7586 <compile_with_stmt_helper+0x9a>
            compile_node(comp, nodes[0]);
    7562:	687b      	ldr	r3, [r7, #4]
    7564:	681b      	ldr	r3, [r3, #0]
    7566:	4619      	mov	r1, r3
    7568:	68f8      	ldr	r0, [r7, #12]
    756a:	f001 f9ea 	bl	8942 <compile_node>
            EMIT_ARG(setup_block, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    756e:	68fb      	ldr	r3, [r7, #12]
    7570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7572:	2200      	movs	r2, #0
    7574:	6979      	ldr	r1, [r7, #20]
    7576:	4618      	mov	r0, r3
    7578:	f003 f940 	bl	a7fc <mp_emit_bc_setup_block>
            EMIT(pop_top);
    757c:	68fb      	ldr	r3, [r7, #12]
    757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7580:	4618      	mov	r0, r3
    7582:	f003 f874 	bl	a66e <mp_emit_bc_pop_top>
        compile_increase_except_level(comp);
    7586:	68f8      	ldr	r0, [r7, #12]
    7588:	f7fd fc05 	bl	4d96 <compile_increase_except_level>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    758c:	68bb      	ldr	r3, [r7, #8]
    758e:	1e59      	subs	r1, r3, #1
    7590:	687b      	ldr	r3, [r7, #4]
    7592:	1d1a      	adds	r2, r3, #4
    7594:	683b      	ldr	r3, [r7, #0]
    7596:	68f8      	ldr	r0, [r7, #12]
    7598:	f7ff ffa8 	bl	74ec <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    759c:	68fb      	ldr	r3, [r7, #12]
    759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75a0:	6979      	ldr	r1, [r7, #20]
    75a2:	4618      	mov	r0, r3
    75a4:	f003 f949 	bl	a83a <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    75a8:	68f8      	ldr	r0, [r7, #12]
    75aa:	f7fd fc10 	bl	4dce <compile_decrease_except_level>
        EMIT(end_finally);
    75ae:	68fb      	ldr	r3, [r7, #12]
    75b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75b2:	4618      	mov	r0, r3
    75b4:	f003 f962 	bl	a87c <mp_emit_bc_end_finally>
}
    75b8:	bf00      	nop
    75ba:	3718      	adds	r7, #24
    75bc:	46bd      	mov	sp, r7
    75be:	bd80      	pop	{r7, pc}

000075c0 <compile_with_stmt>:

STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    75c0:	b580      	push	{r7, lr}
    75c2:	b084      	sub	sp, #16
    75c4:	af00      	add	r7, sp, #0
    75c6:	6078      	str	r0, [r7, #4]
    75c8:	6039      	str	r1, [r7, #0]
    // get the nodes for the pre-bit of the with (the a as b, c as d, ... bit)
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    75ca:	683b      	ldr	r3, [r7, #0]
    75cc:	3308      	adds	r3, #8
    75ce:	f107 0208 	add.w	r2, r7, #8
    75d2:	2173      	movs	r1, #115	; 0x73
    75d4:	4618      	mov	r0, r3
    75d6:	f7fc fabd 	bl	3b54 <mp_parse_node_extract_list>
    75da:	60f8      	str	r0, [r7, #12]
    assert(n > 0);
    75dc:	68fb      	ldr	r3, [r7, #12]
    75de:	2b00      	cmp	r3, #0
    75e0:	dc06      	bgt.n	75f0 <compile_with_stmt+0x30>
    75e2:	4b09      	ldr	r3, [pc, #36]	; (7608 <compile_with_stmt+0x48>)
    75e4:	4a09      	ldr	r2, [pc, #36]	; (760c <compile_with_stmt+0x4c>)
    75e6:	f240 619a 	movw	r1, #1690	; 0x69a
    75ea:	4809      	ldr	r0, [pc, #36]	; (7610 <compile_with_stmt+0x50>)
    75ec:	f013 fdfa 	bl	1b1e4 <__assert_func>

    // compile in a nested fashion
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    75f0:	68ba      	ldr	r2, [r7, #8]
    75f2:	683b      	ldr	r3, [r7, #0]
    75f4:	68db      	ldr	r3, [r3, #12]
    75f6:	68f9      	ldr	r1, [r7, #12]
    75f8:	6878      	ldr	r0, [r7, #4]
    75fa:	f7ff ff77 	bl	74ec <compile_with_stmt_helper>
}
    75fe:	bf00      	nop
    7600:	3710      	adds	r7, #16
    7602:	46bd      	mov	sp, r7
    7604:	bd80      	pop	{r7, pc}
    7606:	bf00      	nop
    7608:	0001ff78 	.word	0x0001ff78
    760c:	000206b0 	.word	0x000206b0
    7610:	0001f9e4 	.word	0x0001f9e4

00007614 <compile_yield_from>:

STATIC void compile_yield_from(compiler_t *comp) {
    7614:	b580      	push	{r7, lr}
    7616:	b082      	sub	sp, #8
    7618:	af00      	add	r7, sp, #0
    761a:	6078      	str	r0, [r7, #4]
    EMIT_ARG(get_iter, false);
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7620:	2100      	movs	r1, #0
    7622:	4618      	mov	r0, r3
    7624:	f003 f93b 	bl	a89e <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7628:	687b      	ldr	r3, [r7, #4]
    762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    762c:	210e      	movs	r1, #14
    762e:	4618      	mov	r0, r3
    7630:	f002 fe42 	bl	a2b8 <mp_emit_bc_load_const_tok>
    EMIT_ARG(yield, MP_EMIT_YIELD_FROM);
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7638:	2101      	movs	r1, #1
    763a:	4618      	mov	r0, r3
    763c:	f003 fb6e 	bl	ad1c <mp_emit_bc_yield>
}
    7640:	bf00      	nop
    7642:	3708      	adds	r7, #8
    7644:	46bd      	mov	sp, r7
    7646:	bd80      	pop	{r7, pc}

00007648 <compile_expr_stmt>:
        compile_async_with_stmt(comp, pns0);
    }
}
#endif

STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7648:	b580      	push	{r7, lr}
    764a:	b088      	sub	sp, #32
    764c:	af00      	add	r7, sp, #0
    764e:	6078      	str	r0, [r7, #4]
    7650:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7652:	683b      	ldr	r3, [r7, #0]
    7654:	68db      	ldr	r3, [r3, #12]
    7656:	2b00      	cmp	r3, #0
    7658:	d149      	bne.n	76ee <compile_expr_stmt+0xa6>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    765a:	687b      	ldr	r3, [r7, #4]
    765c:	791b      	ldrb	r3, [r3, #4]
    765e:	2b00      	cmp	r3, #0
    7660:	d01b      	beq.n	769a <compile_expr_stmt+0x52>
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7666:	681b      	ldr	r3, [r3, #0]
    7668:	2b00      	cmp	r3, #0
    766a:	d116      	bne.n	769a <compile_expr_stmt+0x52>
            // for REPL, evaluate then print the expression
            compile_load_id(comp, MP_QSTR___repl_print__);
    766c:	2120      	movs	r1, #32
    766e:	6878      	ldr	r0, [r7, #4]
    7670:	f7fd fc65 	bl	4f3e <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    7674:	683b      	ldr	r3, [r7, #0]
    7676:	689b      	ldr	r3, [r3, #8]
    7678:	4619      	mov	r1, r3
    767a:	6878      	ldr	r0, [r7, #4]
    767c:	f001 f961 	bl	8942 <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7684:	2300      	movs	r3, #0
    7686:	2200      	movs	r2, #0
    7688:	2101      	movs	r1, #1
    768a:	f003 fae1 	bl	ac50 <mp_emit_bc_call_function>
            EMIT(pop_top);
    768e:	687b      	ldr	r3, [r7, #4]
    7690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7692:	4618      	mov	r0, r3
    7694:	f002 ffeb 	bl	a66e <mp_emit_bc_pop_top>
    7698:	e0f7      	b.n	788a <compile_expr_stmt+0x242>

        } else {
            // for non-REPL, evaluate then discard the expression
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    769a:	683b      	ldr	r3, [r7, #0]
    769c:	689b      	ldr	r3, [r3, #8]
    769e:	f003 0303 	and.w	r3, r3, #3
    76a2:	2b00      	cmp	r3, #0
    76a4:	d006      	beq.n	76b4 <compile_expr_stmt+0x6c>
    76a6:	683b      	ldr	r3, [r7, #0]
    76a8:	689b      	ldr	r3, [r3, #8]
    76aa:	f003 030f 	and.w	r3, r3, #15
    76ae:	2b02      	cmp	r3, #2
    76b0:	f040 80eb 	bne.w	788a <compile_expr_stmt+0x242>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    76b4:	683b      	ldr	r3, [r7, #0]
    76b6:	689b      	ldr	r3, [r3, #8]
    76b8:	2b00      	cmp	r3, #0
    76ba:	d00c      	beq.n	76d6 <compile_expr_stmt+0x8e>
    76bc:	683b      	ldr	r3, [r7, #0]
    76be:	689b      	ldr	r3, [r3, #8]
    76c0:	f003 0303 	and.w	r3, r3, #3
    76c4:	2b00      	cmp	r3, #0
    76c6:	d106      	bne.n	76d6 <compile_expr_stmt+0x8e>
    76c8:	683b      	ldr	r3, [r7, #0]
    76ca:	689b      	ldr	r3, [r3, #8]
    76cc:	685b      	ldr	r3, [r3, #4]
    76ce:	b2db      	uxtb	r3, r3
    76d0:	2b35      	cmp	r3, #53	; 0x35
    76d2:	f000 80da 	beq.w	788a <compile_expr_stmt+0x242>
                // do nothing with a lonely constant
            } else {
                compile_node(comp, pns->nodes[0]); // just an expression
    76d6:	683b      	ldr	r3, [r7, #0]
    76d8:	689b      	ldr	r3, [r3, #8]
    76da:	4619      	mov	r1, r3
    76dc:	6878      	ldr	r0, [r7, #4]
    76de:	f001 f930 	bl	8942 <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    76e2:	687b      	ldr	r3, [r7, #4]
    76e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76e6:	4618      	mov	r0, r3
    76e8:	f002 ffc1 	bl	a66e <mp_emit_bc_pop_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
        }
    } else {
        goto plain_assign;
    }
}
    76ec:	e0cd      	b.n	788a <compile_expr_stmt+0x242>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    76ee:	683b      	ldr	r3, [r7, #0]
    76f0:	68db      	ldr	r3, [r3, #12]
    76f2:	2b00      	cmp	r3, #0
    76f4:	f000 80bb 	beq.w	786e <compile_expr_stmt+0x226>
    76f8:	683b      	ldr	r3, [r7, #0]
    76fa:	68db      	ldr	r3, [r3, #12]
    76fc:	f003 0303 	and.w	r3, r3, #3
    7700:	2b00      	cmp	r3, #0
    7702:	f040 80b4 	bne.w	786e <compile_expr_stmt+0x226>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    7706:	683b      	ldr	r3, [r7, #0]
    7708:	68db      	ldr	r3, [r3, #12]
    770a:	617b      	str	r3, [r7, #20]
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    770c:	697b      	ldr	r3, [r7, #20]
    770e:	685b      	ldr	r3, [r3, #4]
    7710:	b2db      	uxtb	r3, r3
    7712:	613b      	str	r3, [r7, #16]
        if (kind == PN_expr_stmt_augassign) {
    7714:	693b      	ldr	r3, [r7, #16]
    7716:	2b51      	cmp	r3, #81	; 0x51
    7718:	d16a      	bne.n	77f0 <compile_expr_stmt+0x1a8>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    771a:	683b      	ldr	r3, [r7, #0]
    771c:	689b      	ldr	r3, [r3, #8]
    771e:	2201      	movs	r2, #1
    7720:	4619      	mov	r1, r3
    7722:	6878      	ldr	r0, [r7, #4]
    7724:	f7fd ff4e 	bl	55c4 <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    7728:	697b      	ldr	r3, [r7, #20]
    772a:	68db      	ldr	r3, [r3, #12]
    772c:	4619      	mov	r1, r3
    772e:	6878      	ldr	r0, [r7, #4]
    7730:	f001 f907 	bl	8942 <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    7734:	697b      	ldr	r3, [r7, #20]
    7736:	689b      	ldr	r3, [r3, #8]
    7738:	f003 030f 	and.w	r3, r3, #15
    773c:	2b0e      	cmp	r3, #14
    773e:	d006      	beq.n	774e <compile_expr_stmt+0x106>
    7740:	4b54      	ldr	r3, [pc, #336]	; (7894 <compile_expr_stmt+0x24c>)
    7742:	4a55      	ldr	r2, [pc, #340]	; (7898 <compile_expr_stmt+0x250>)
    7744:	f240 718d 	movw	r1, #1933	; 0x78d
    7748:	4854      	ldr	r0, [pc, #336]	; (789c <compile_expr_stmt+0x254>)
    774a:	f013 fd4b 	bl	1b1e4 <__assert_func>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    774e:	697b      	ldr	r3, [r7, #20]
    7750:	689b      	ldr	r3, [r3, #8]
    7752:	091b      	lsrs	r3, r3, #4
    7754:	3b4e      	subs	r3, #78	; 0x4e
    7756:	2b0a      	cmp	r3, #10
    7758:	d839      	bhi.n	77ce <compile_expr_stmt+0x186>
    775a:	a201      	add	r2, pc, #4	; (adr r2, 7760 <compile_expr_stmt+0x118>)
    775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7760:	000077ab 	.word	0x000077ab
    7764:	000077b1 	.word	0x000077b1
    7768:	000077b7 	.word	0x000077b7
    776c:	000077c3 	.word	0x000077c3
    7770:	000077bd 	.word	0x000077bd
    7774:	000077c9 	.word	0x000077c9
    7778:	00007799 	.word	0x00007799
    777c:	0000778d 	.word	0x0000778d
    7780:	00007793 	.word	0x00007793
    7784:	000077a5 	.word	0x000077a5
    7788:	0000779f 	.word	0x0000779f
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    778c:	2309      	movs	r3, #9
    778e:	61fb      	str	r3, [r7, #28]
    7790:	e020      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    7792:	230a      	movs	r3, #10
    7794:	61fb      	str	r3, [r7, #28]
    7796:	e01d      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    7798:	230b      	movs	r3, #11
    779a:	61fb      	str	r3, [r7, #28]
    779c:	e01a      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    779e:	230c      	movs	r3, #12
    77a0:	61fb      	str	r3, [r7, #28]
    77a2:	e017      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    77a4:	230d      	movs	r3, #13
    77a6:	61fb      	str	r3, [r7, #28]
    77a8:	e014      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    77aa:	230e      	movs	r3, #14
    77ac:	61fb      	str	r3, [r7, #28]
    77ae:	e011      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    77b0:	230f      	movs	r3, #15
    77b2:	61fb      	str	r3, [r7, #28]
    77b4:	e00e      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    77b6:	2310      	movs	r3, #16
    77b8:	61fb      	str	r3, [r7, #28]
    77ba:	e00b      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    77bc:	2311      	movs	r3, #17
    77be:	61fb      	str	r3, [r7, #28]
    77c0:	e008      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    77c2:	2312      	movs	r3, #18
    77c4:	61fb      	str	r3, [r7, #28]
    77c6:	e005      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    77c8:	2313      	movs	r3, #19
    77ca:	61fb      	str	r3, [r7, #28]
    77cc:	e002      	b.n	77d4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    77ce:	2314      	movs	r3, #20
    77d0:	61fb      	str	r3, [r7, #28]
    77d2:	bf00      	nop
            EMIT_ARG(binary_op, op);
    77d4:	687b      	ldr	r3, [r7, #4]
    77d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77d8:	69f9      	ldr	r1, [r7, #28]
    77da:	4618      	mov	r0, r3
    77dc:	f003 f8d1 	bl	a982 <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    77e0:	683b      	ldr	r3, [r7, #0]
    77e2:	689b      	ldr	r3, [r3, #8]
    77e4:	2202      	movs	r2, #2
    77e6:	4619      	mov	r1, r3
    77e8:	6878      	ldr	r0, [r7, #4]
    77ea:	f7fd feeb 	bl	55c4 <c_assign>
}
    77ee:	e04c      	b.n	788a <compile_expr_stmt+0x242>
        } else if (kind == PN_expr_stmt_assign_list) {
    77f0:	693b      	ldr	r3, [r7, #16]
    77f2:	2b52      	cmp	r3, #82	; 0x52
    77f4:	d13b      	bne.n	786e <compile_expr_stmt+0x226>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    77f6:	697b      	ldr	r3, [r7, #20]
    77f8:	685b      	ldr	r3, [r3, #4]
    77fa:	0a1b      	lsrs	r3, r3, #8
    77fc:	3b01      	subs	r3, #1
    77fe:	60fb      	str	r3, [r7, #12]
            compile_node(comp, pns1->nodes[rhs]); // rhs
    7800:	697b      	ldr	r3, [r7, #20]
    7802:	68fa      	ldr	r2, [r7, #12]
    7804:	3202      	adds	r2, #2
    7806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    780a:	4619      	mov	r1, r3
    780c:	6878      	ldr	r0, [r7, #4]
    780e:	f001 f898 	bl	8942 <compile_node>
            if (rhs > 0) {
    7812:	68fb      	ldr	r3, [r7, #12]
    7814:	2b00      	cmp	r3, #0
    7816:	dd04      	ble.n	7822 <compile_expr_stmt+0x1da>
                EMIT(dup_top);
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    781c:	4618      	mov	r0, r3
    781e:	f002 ff06 	bl	a62e <mp_emit_bc_dup_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7822:	683b      	ldr	r3, [r7, #0]
    7824:	689b      	ldr	r3, [r3, #8]
    7826:	2200      	movs	r2, #0
    7828:	4619      	mov	r1, r3
    782a:	6878      	ldr	r0, [r7, #4]
    782c:	f7fd feca 	bl	55c4 <c_assign>
            for (int i = 0; i < rhs; i++) {
    7830:	2300      	movs	r3, #0
    7832:	61bb      	str	r3, [r7, #24]
    7834:	e016      	b.n	7864 <compile_expr_stmt+0x21c>
                if (i + 1 < rhs) {
    7836:	69bb      	ldr	r3, [r7, #24]
    7838:	1c5a      	adds	r2, r3, #1
    783a:	68fb      	ldr	r3, [r7, #12]
    783c:	429a      	cmp	r2, r3
    783e:	da04      	bge.n	784a <compile_expr_stmt+0x202>
                    EMIT(dup_top);
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7844:	4618      	mov	r0, r3
    7846:	f002 fef2 	bl	a62e <mp_emit_bc_dup_top>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    784a:	697b      	ldr	r3, [r7, #20]
    784c:	69ba      	ldr	r2, [r7, #24]
    784e:	3202      	adds	r2, #2
    7850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7854:	2200      	movs	r2, #0
    7856:	4619      	mov	r1, r3
    7858:	6878      	ldr	r0, [r7, #4]
    785a:	f7fd feb3 	bl	55c4 <c_assign>
            for (int i = 0; i < rhs; i++) {
    785e:	69bb      	ldr	r3, [r7, #24]
    7860:	3301      	adds	r3, #1
    7862:	61bb      	str	r3, [r7, #24]
    7864:	69ba      	ldr	r2, [r7, #24]
    7866:	68fb      	ldr	r3, [r7, #12]
    7868:	429a      	cmp	r2, r3
    786a:	dbe4      	blt.n	7836 <compile_expr_stmt+0x1ee>
}
    786c:	e00d      	b.n	788a <compile_expr_stmt+0x242>
            compile_node(comp, pns->nodes[1]); // rhs
    786e:	683b      	ldr	r3, [r7, #0]
    7870:	68db      	ldr	r3, [r3, #12]
    7872:	4619      	mov	r1, r3
    7874:	6878      	ldr	r0, [r7, #4]
    7876:	f001 f864 	bl	8942 <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    787a:	683b      	ldr	r3, [r7, #0]
    787c:	689b      	ldr	r3, [r3, #8]
    787e:	2200      	movs	r2, #0
    7880:	4619      	mov	r1, r3
    7882:	6878      	ldr	r0, [r7, #4]
    7884:	f7fd fe9e 	bl	55c4 <c_assign>
}
    7888:	e7ff      	b.n	788a <compile_expr_stmt+0x242>
    788a:	bf00      	nop
    788c:	3720      	adds	r7, #32
    788e:	46bd      	mov	sp, r7
    7890:	bd80      	pop	{r7, pc}
    7892:	bf00      	nop
    7894:	0001ff80 	.word	0x0001ff80
    7898:	000206c4 	.word	0x000206c4
    789c:	0001f9e4 	.word	0x0001f9e4

000078a0 <compile_test_if_expr>:

STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    78a0:	b580      	push	{r7, lr}
    78a2:	b086      	sub	sp, #24
    78a4:	af00      	add	r7, sp, #0
    78a6:	6078      	str	r0, [r7, #4]
    78a8:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    78aa:	683b      	ldr	r3, [r7, #0]
    78ac:	68db      	ldr	r3, [r3, #12]
    78ae:	2b00      	cmp	r3, #0
    78b0:	d00b      	beq.n	78ca <compile_test_if_expr+0x2a>
    78b2:	683b      	ldr	r3, [r7, #0]
    78b4:	68db      	ldr	r3, [r3, #12]
    78b6:	f003 0303 	and.w	r3, r3, #3
    78ba:	2b00      	cmp	r3, #0
    78bc:	d105      	bne.n	78ca <compile_test_if_expr+0x2a>
    78be:	683b      	ldr	r3, [r7, #0]
    78c0:	68db      	ldr	r3, [r3, #12]
    78c2:	685b      	ldr	r3, [r3, #4]
    78c4:	b2db      	uxtb	r3, r3
    78c6:	2b79      	cmp	r3, #121	; 0x79
    78c8:	d006      	beq.n	78d8 <compile_test_if_expr+0x38>
    78ca:	4b21      	ldr	r3, [pc, #132]	; (7950 <compile_test_if_expr+0xb0>)
    78cc:	4a21      	ldr	r2, [pc, #132]	; (7954 <compile_test_if_expr+0xb4>)
    78ce:	f240 71e4 	movw	r1, #2020	; 0x7e4
    78d2:	4821      	ldr	r0, [pc, #132]	; (7958 <compile_test_if_expr+0xb8>)
    78d4:	f013 fc86 	bl	1b1e4 <__assert_func>
    mp_parse_node_struct_t *pns_test_if_else = (mp_parse_node_struct_t*)pns->nodes[1];
    78d8:	683b      	ldr	r3, [r7, #0]
    78da:	68db      	ldr	r3, [r3, #12]
    78dc:	617b      	str	r3, [r7, #20]

    uint l_fail = comp_next_label(comp);
    78de:	6878      	ldr	r0, [r7, #4]
    78e0:	f7fd fa4a 	bl	4d78 <comp_next_label>
    78e4:	6138      	str	r0, [r7, #16]
    uint l_end = comp_next_label(comp);
    78e6:	6878      	ldr	r0, [r7, #4]
    78e8:	f7fd fa46 	bl	4d78 <comp_next_label>
    78ec:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    78ee:	697b      	ldr	r3, [r7, #20]
    78f0:	6899      	ldr	r1, [r3, #8]
    78f2:	693b      	ldr	r3, [r7, #16]
    78f4:	2200      	movs	r2, #0
    78f6:	6878      	ldr	r0, [r7, #4]
    78f8:	f7fd fbc5 	bl	5086 <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    78fc:	683b      	ldr	r3, [r7, #0]
    78fe:	689b      	ldr	r3, [r3, #8]
    7900:	4619      	mov	r1, r3
    7902:	6878      	ldr	r0, [r7, #4]
    7904:	f001 f81d 	bl	8942 <compile_node>
    EMIT_ARG(jump, l_end);
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    790c:	68f9      	ldr	r1, [r7, #12]
    790e:	4618      	mov	r0, r3
    7910:	f002 fede 	bl	a6d0 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    7914:	687b      	ldr	r3, [r7, #4]
    7916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7918:	6939      	ldr	r1, [r7, #16]
    791a:	4618      	mov	r0, r3
    791c:	f002 fc4e 	bl	a1bc <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    7920:	687b      	ldr	r3, [r7, #4]
    7922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7924:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7928:	4618      	mov	r0, r3
    792a:	f002 fbf8 	bl	a11e <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    792e:	697b      	ldr	r3, [r7, #20]
    7930:	68db      	ldr	r3, [r3, #12]
    7932:	4619      	mov	r1, r3
    7934:	6878      	ldr	r0, [r7, #4]
    7936:	f001 f804 	bl	8942 <compile_node>
    EMIT_ARG(label_assign, l_end);
    793a:	687b      	ldr	r3, [r7, #4]
    793c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    793e:	68f9      	ldr	r1, [r7, #12]
    7940:	4618      	mov	r0, r3
    7942:	f002 fc3b 	bl	a1bc <mp_emit_bc_label_assign>
}
    7946:	bf00      	nop
    7948:	3718      	adds	r7, #24
    794a:	46bd      	mov	sp, r7
    794c:	bd80      	pop	{r7, pc}
    794e:	bf00      	nop
    7950:	0001ffa8 	.word	0x0001ffa8
    7954:	000206d8 	.word	0x000206d8
    7958:	0001f9e4 	.word	0x0001f9e4

0000795c <compile_lambdef>:

STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    795c:	b580      	push	{r7, lr}
    795e:	b084      	sub	sp, #16
    7960:	af00      	add	r7, sp, #0
    7962:	6078      	str	r0, [r7, #4]
    7964:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	795b      	ldrb	r3, [r3, #5]
    796a:	2b01      	cmp	r3, #1
    796c:	d10b      	bne.n	7986 <compile_lambdef+0x2a>
        // create a new scope for this lambda
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    796e:	683a      	ldr	r2, [r7, #0]
    7970:	687b      	ldr	r3, [r7, #4]
    7972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7974:	7e5b      	ldrb	r3, [r3, #25]
    7976:	2102      	movs	r1, #2
    7978:	6878      	ldr	r0, [r7, #4]
    797a:	f7fd fa47 	bl	4e0c <scope_new_and_link>
    797e:	60f8      	str	r0, [r7, #12]
        // store the lambda scope so the compiling function (this one) can use it at each pass
        pns->nodes[2] = (mp_parse_node_t)s;
    7980:	68fa      	ldr	r2, [r7, #12]
    7982:	683b      	ldr	r3, [r7, #0]
    7984:	611a      	str	r2, [r3, #16]
    }

    // get the scope for this lambda
    scope_t *this_scope = (scope_t*)pns->nodes[2];
    7986:	683b      	ldr	r3, [r7, #0]
    7988:	691b      	ldr	r3, [r3, #16]
    798a:	60bb      	str	r3, [r7, #8]

    // compile the lambda definition
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    798c:	683b      	ldr	r3, [r7, #0]
    798e:	689a      	ldr	r2, [r3, #8]
    7990:	2346      	movs	r3, #70	; 0x46
    7992:	68b9      	ldr	r1, [r7, #8]
    7994:	6878      	ldr	r0, [r7, #4]
    7996:	f7fe f86f 	bl	5a78 <compile_funcdef_lambdef>
}
    799a:	bf00      	nop
    799c:	3710      	adds	r7, #16
    799e:	46bd      	mov	sp, r7
    79a0:	bd80      	pop	{r7, pc}

000079a2 <compile_or_and_test>:

STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    79a2:	b580      	push	{r7, lr}
    79a4:	b086      	sub	sp, #24
    79a6:	af00      	add	r7, sp, #0
    79a8:	6078      	str	r0, [r7, #4]
    79aa:	6039      	str	r1, [r7, #0]
    bool cond = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test;
    79ac:	683b      	ldr	r3, [r7, #0]
    79ae:	685b      	ldr	r3, [r3, #4]
    79b0:	b2db      	uxtb	r3, r3
    79b2:	2b1c      	cmp	r3, #28
    79b4:	bf0c      	ite	eq
    79b6:	2301      	moveq	r3, #1
    79b8:	2300      	movne	r3, #0
    79ba:	74fb      	strb	r3, [r7, #19]
    uint l_end = comp_next_label(comp);
    79bc:	6878      	ldr	r0, [r7, #4]
    79be:	f7fd f9db 	bl	4d78 <comp_next_label>
    79c2:	60f8      	str	r0, [r7, #12]
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    79c4:	683b      	ldr	r3, [r7, #0]
    79c6:	685b      	ldr	r3, [r3, #4]
    79c8:	0a1b      	lsrs	r3, r3, #8
    79ca:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < n; i += 1) {
    79cc:	2300      	movs	r3, #0
    79ce:	617b      	str	r3, [r7, #20]
    79d0:	e017      	b.n	7a02 <compile_or_and_test+0x60>
        compile_node(comp, pns->nodes[i]);
    79d2:	683b      	ldr	r3, [r7, #0]
    79d4:	697a      	ldr	r2, [r7, #20]
    79d6:	3202      	adds	r2, #2
    79d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79dc:	4619      	mov	r1, r3
    79de:	6878      	ldr	r0, [r7, #4]
    79e0:	f000 ffaf 	bl	8942 <compile_node>
        if (i + 1 < n) {
    79e4:	697b      	ldr	r3, [r7, #20]
    79e6:	1c5a      	adds	r2, r3, #1
    79e8:	68bb      	ldr	r3, [r7, #8]
    79ea:	429a      	cmp	r2, r3
    79ec:	da06      	bge.n	79fc <compile_or_and_test+0x5a>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    79ee:	687b      	ldr	r3, [r7, #4]
    79f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79f2:	7cf9      	ldrb	r1, [r7, #19]
    79f4:	68fa      	ldr	r2, [r7, #12]
    79f6:	4618      	mov	r0, r3
    79f8:	f002 fe9a 	bl	a730 <mp_emit_bc_jump_if_or_pop>
    for (int i = 0; i < n; i += 1) {
    79fc:	697b      	ldr	r3, [r7, #20]
    79fe:	3301      	adds	r3, #1
    7a00:	617b      	str	r3, [r7, #20]
    7a02:	697a      	ldr	r2, [r7, #20]
    7a04:	68bb      	ldr	r3, [r7, #8]
    7a06:	429a      	cmp	r2, r3
    7a08:	dbe3      	blt.n	79d2 <compile_or_and_test+0x30>
        }
    }
    EMIT_ARG(label_assign, l_end);
    7a0a:	687b      	ldr	r3, [r7, #4]
    7a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a0e:	68f9      	ldr	r1, [r7, #12]
    7a10:	4618      	mov	r0, r3
    7a12:	f002 fbd3 	bl	a1bc <mp_emit_bc_label_assign>
}
    7a16:	bf00      	nop
    7a18:	3718      	adds	r7, #24
    7a1a:	46bd      	mov	sp, r7
    7a1c:	bd80      	pop	{r7, pc}

00007a1e <compile_not_test_2>:

STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a1e:	b580      	push	{r7, lr}
    7a20:	b082      	sub	sp, #8
    7a22:	af00      	add	r7, sp, #0
    7a24:	6078      	str	r0, [r7, #4]
    7a26:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    7a28:	683b      	ldr	r3, [r7, #0]
    7a2a:	689b      	ldr	r3, [r3, #8]
    7a2c:	4619      	mov	r1, r3
    7a2e:	6878      	ldr	r0, [r7, #4]
    7a30:	f000 ff87 	bl	8942 <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a38:	2103      	movs	r1, #3
    7a3a:	4618      	mov	r0, r3
    7a3c:	f002 ff8c 	bl	a958 <mp_emit_bc_unary_op>
}
    7a40:	bf00      	nop
    7a42:	3708      	adds	r7, #8
    7a44:	46bd      	mov	sp, r7
    7a46:	bd80      	pop	{r7, pc}

00007a48 <compile_comparison>:

STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a48:	b580      	push	{r7, lr}
    7a4a:	b08a      	sub	sp, #40	; 0x28
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	6078      	str	r0, [r7, #4]
    7a50:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7a52:	683b      	ldr	r3, [r7, #0]
    7a54:	685b      	ldr	r3, [r3, #4]
    7a56:	0a1b      	lsrs	r3, r3, #8
    7a58:	61bb      	str	r3, [r7, #24]
    compile_node(comp, pns->nodes[0]);
    7a5a:	683b      	ldr	r3, [r7, #0]
    7a5c:	689b      	ldr	r3, [r3, #8]
    7a5e:	4619      	mov	r1, r3
    7a60:	6878      	ldr	r0, [r7, #4]
    7a62:	f000 ff6e 	bl	8942 <compile_node>
    bool multi = (num_nodes > 3);
    7a66:	69bb      	ldr	r3, [r7, #24]
    7a68:	2b03      	cmp	r3, #3
    7a6a:	bfcc      	ite	gt
    7a6c:	2301      	movgt	r3, #1
    7a6e:	2300      	movle	r3, #0
    7a70:	75fb      	strb	r3, [r7, #23]
    uint l_fail = 0;
    7a72:	2300      	movs	r3, #0
    7a74:	627b      	str	r3, [r7, #36]	; 0x24
    if (multi) {
    7a76:	7dfb      	ldrb	r3, [r7, #23]
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d003      	beq.n	7a84 <compile_comparison+0x3c>
        l_fail = comp_next_label(comp);
    7a7c:	6878      	ldr	r0, [r7, #4]
    7a7e:	f7fd f97b 	bl	4d78 <comp_next_label>
    7a82:	6278      	str	r0, [r7, #36]	; 0x24
    }
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7a84:	2301      	movs	r3, #1
    7a86:	623b      	str	r3, [r7, #32]
    7a88:	e0b7      	b.n	7bfa <compile_comparison+0x1b2>
        compile_node(comp, pns->nodes[i + 1]);
    7a8a:	6a3b      	ldr	r3, [r7, #32]
    7a8c:	1c5a      	adds	r2, r3, #1
    7a8e:	683b      	ldr	r3, [r7, #0]
    7a90:	3202      	adds	r2, #2
    7a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a96:	4619      	mov	r1, r3
    7a98:	6878      	ldr	r0, [r7, #4]
    7a9a:	f000 ff52 	bl	8942 <compile_node>
        if (i + 2 < num_nodes) {
    7a9e:	6a3b      	ldr	r3, [r7, #32]
    7aa0:	1c9a      	adds	r2, r3, #2
    7aa2:	69bb      	ldr	r3, [r7, #24]
    7aa4:	429a      	cmp	r2, r3
    7aa6:	da09      	bge.n	7abc <compile_comparison+0x74>
            EMIT(dup_top);
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7aac:	4618      	mov	r0, r3
    7aae:	f002 fdbe 	bl	a62e <mp_emit_bc_dup_top>
            EMIT(rot_three);
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ab6:	4618      	mov	r0, r3
    7ab8:	f002 fdfa 	bl	a6b0 <mp_emit_bc_rot_three>
        }
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    7abc:	683b      	ldr	r3, [r7, #0]
    7abe:	6a3a      	ldr	r2, [r7, #32]
    7ac0:	3202      	adds	r2, #2
    7ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ac6:	f003 030f 	and.w	r3, r3, #15
    7aca:	2b0e      	cmp	r3, #14
    7acc:	d140      	bne.n	7b50 <compile_comparison+0x108>
            mp_binary_op_t op;
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    7ace:	683b      	ldr	r3, [r7, #0]
    7ad0:	6a3a      	ldr	r2, [r7, #32]
    7ad2:	3202      	adds	r2, #2
    7ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ad8:	091b      	lsrs	r3, r3, #4
    7ada:	3b36      	subs	r3, #54	; 0x36
    7adc:	2b0b      	cmp	r3, #11
    7ade:	d82d      	bhi.n	7b3c <compile_comparison+0xf4>
    7ae0:	a201      	add	r2, pc, #4	; (adr r2, 7ae8 <compile_comparison+0xa0>)
    7ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7ae6:	bf00      	nop
    7ae8:	00007b19 	.word	0x00007b19
    7aec:	00007b3d 	.word	0x00007b3d
    7af0:	00007b1f 	.word	0x00007b1f
    7af4:	00007b3d 	.word	0x00007b3d
    7af8:	00007b3d 	.word	0x00007b3d
    7afc:	00007b3d 	.word	0x00007b3d
    7b00:	00007b3d 	.word	0x00007b3d
    7b04:	00007b3d 	.word	0x00007b3d
    7b08:	00007b2b 	.word	0x00007b2b
    7b0c:	00007b31 	.word	0x00007b31
    7b10:	00007b25 	.word	0x00007b25
    7b14:	00007b37 	.word	0x00007b37
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    7b18:	2300      	movs	r3, #0
    7b1a:	61fb      	str	r3, [r7, #28]
    7b1c:	e011      	b.n	7b42 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    7b1e:	2301      	movs	r3, #1
    7b20:	61fb      	str	r3, [r7, #28]
    7b22:	e00e      	b.n	7b42 <compile_comparison+0xfa>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    7b24:	2302      	movs	r3, #2
    7b26:	61fb      	str	r3, [r7, #28]
    7b28:	e00b      	b.n	7b42 <compile_comparison+0xfa>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    7b2a:	2303      	movs	r3, #3
    7b2c:	61fb      	str	r3, [r7, #28]
    7b2e:	e008      	b.n	7b42 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    7b30:	2304      	movs	r3, #4
    7b32:	61fb      	str	r3, [r7, #28]
    7b34:	e005      	b.n	7b42 <compile_comparison+0xfa>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    7b36:	2305      	movs	r3, #5
    7b38:	61fb      	str	r3, [r7, #28]
    7b3a:	e002      	b.n	7b42 <compile_comparison+0xfa>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    7b3c:	2306      	movs	r3, #6
    7b3e:	61fb      	str	r3, [r7, #28]
    7b40:	bf00      	nop
            }
            EMIT_ARG(binary_op, op);
    7b42:	687b      	ldr	r3, [r7, #4]
    7b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b46:	69f9      	ldr	r1, [r7, #28]
    7b48:	4618      	mov	r0, r3
    7b4a:	f002 ff1a 	bl	a982 <mp_emit_bc_binary_op>
    7b4e:	e045      	b.n	7bdc <compile_comparison+0x194>
        } else {
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    7b50:	683b      	ldr	r3, [r7, #0]
    7b52:	6a3a      	ldr	r2, [r7, #32]
    7b54:	3202      	adds	r2, #2
    7b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b5a:	2b00      	cmp	r3, #0
    7b5c:	d008      	beq.n	7b70 <compile_comparison+0x128>
    7b5e:	683b      	ldr	r3, [r7, #0]
    7b60:	6a3a      	ldr	r2, [r7, #32]
    7b62:	3202      	adds	r2, #2
    7b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b68:	f003 0303 	and.w	r3, r3, #3
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	d006      	beq.n	7b7e <compile_comparison+0x136>
    7b70:	4b3b      	ldr	r3, [pc, #236]	; (7c60 <compile_comparison+0x218>)
    7b72:	4a3c      	ldr	r2, [pc, #240]	; (7c64 <compile_comparison+0x21c>)
    7b74:	f640 012e 	movw	r1, #2094	; 0x82e
    7b78:	483b      	ldr	r0, [pc, #236]	; (7c68 <compile_comparison+0x220>)
    7b7a:	f013 fb33 	bl	1b1e4 <__assert_func>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[i];
    7b7e:	683b      	ldr	r3, [r7, #0]
    7b80:	6a3a      	ldr	r2, [r7, #32]
    7b82:	3202      	adds	r2, #2
    7b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b88:	613b      	str	r3, [r7, #16]
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    7b8a:	693b      	ldr	r3, [r7, #16]
    7b8c:	685b      	ldr	r3, [r3, #4]
    7b8e:	b2db      	uxtb	r3, r3
    7b90:	60fb      	str	r3, [r7, #12]
            if (kind == PN_comp_op_not_in) {
    7b92:	68fb      	ldr	r3, [r7, #12]
    7b94:	2b7d      	cmp	r3, #125	; 0x7d
    7b96:	d106      	bne.n	7ba6 <compile_comparison+0x15e>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b9c:	2124      	movs	r1, #36	; 0x24
    7b9e:	4618      	mov	r0, r3
    7ba0:	f002 feef 	bl	a982 <mp_emit_bc_binary_op>
    7ba4:	e01a      	b.n	7bdc <compile_comparison+0x194>
            } else {
                assert(kind == PN_comp_op_is); // should be
    7ba6:	68fb      	ldr	r3, [r7, #12]
    7ba8:	2b7e      	cmp	r3, #126	; 0x7e
    7baa:	d006      	beq.n	7bba <compile_comparison+0x172>
    7bac:	4b2f      	ldr	r3, [pc, #188]	; (7c6c <compile_comparison+0x224>)
    7bae:	4a2d      	ldr	r2, [pc, #180]	; (7c64 <compile_comparison+0x21c>)
    7bb0:	f640 0134 	movw	r1, #2100	; 0x834
    7bb4:	482c      	ldr	r0, [pc, #176]	; (7c68 <compile_comparison+0x220>)
    7bb6:	f013 fb15 	bl	1b1e4 <__assert_func>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    7bba:	693b      	ldr	r3, [r7, #16]
    7bbc:	689b      	ldr	r3, [r3, #8]
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	d106      	bne.n	7bd0 <compile_comparison+0x188>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    7bc2:	687b      	ldr	r3, [r7, #4]
    7bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bc6:	2107      	movs	r1, #7
    7bc8:	4618      	mov	r0, r3
    7bca:	f002 feda 	bl	a982 <mp_emit_bc_binary_op>
    7bce:	e005      	b.n	7bdc <compile_comparison+0x194>
                } else {
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    7bd0:	687b      	ldr	r3, [r7, #4]
    7bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bd4:	2125      	movs	r1, #37	; 0x25
    7bd6:	4618      	mov	r0, r3
    7bd8:	f002 fed3 	bl	a982 <mp_emit_bc_binary_op>
                }
            }
        }
        if (i + 2 < num_nodes) {
    7bdc:	6a3b      	ldr	r3, [r7, #32]
    7bde:	1c9a      	adds	r2, r3, #2
    7be0:	69bb      	ldr	r3, [r7, #24]
    7be2:	429a      	cmp	r2, r3
    7be4:	da06      	bge.n	7bf4 <compile_comparison+0x1ac>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    7be6:	687b      	ldr	r3, [r7, #4]
    7be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7bec:	2100      	movs	r1, #0
    7bee:	4618      	mov	r0, r3
    7bf0:	f002 fd9e 	bl	a730 <mp_emit_bc_jump_if_or_pop>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7bf4:	6a3b      	ldr	r3, [r7, #32]
    7bf6:	3302      	adds	r3, #2
    7bf8:	623b      	str	r3, [r7, #32]
    7bfa:	6a3b      	ldr	r3, [r7, #32]
    7bfc:	1c5a      	adds	r2, r3, #1
    7bfe:	69bb      	ldr	r3, [r7, #24]
    7c00:	429a      	cmp	r2, r3
    7c02:	f6ff af42 	blt.w	7a8a <compile_comparison+0x42>
        }
    }
    if (multi) {
    7c06:	7dfb      	ldrb	r3, [r7, #23]
    7c08:	2b00      	cmp	r3, #0
    7c0a:	d025      	beq.n	7c58 <compile_comparison+0x210>
        uint l_end = comp_next_label(comp);
    7c0c:	6878      	ldr	r0, [r7, #4]
    7c0e:	f7fd f8b3 	bl	4d78 <comp_next_label>
    7c12:	60b8      	str	r0, [r7, #8]
        EMIT_ARG(jump, l_end);
    7c14:	687b      	ldr	r3, [r7, #4]
    7c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c18:	68b9      	ldr	r1, [r7, #8]
    7c1a:	4618      	mov	r0, r3
    7c1c:	f002 fd58 	bl	a6d0 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    7c20:	687b      	ldr	r3, [r7, #4]
    7c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7c26:	4618      	mov	r0, r3
    7c28:	f002 fac8 	bl	a1bc <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c30:	2101      	movs	r1, #1
    7c32:	4618      	mov	r0, r3
    7c34:	f002 fa73 	bl	a11e <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    7c38:	687b      	ldr	r3, [r7, #4]
    7c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c3c:	4618      	mov	r0, r3
    7c3e:	f002 fd27 	bl	a690 <mp_emit_bc_rot_two>
        EMIT(pop_top);
    7c42:	687b      	ldr	r3, [r7, #4]
    7c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c46:	4618      	mov	r0, r3
    7c48:	f002 fd11 	bl	a66e <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c50:	68b9      	ldr	r1, [r7, #8]
    7c52:	4618      	mov	r0, r3
    7c54:	f002 fab2 	bl	a1bc <mp_emit_bc_label_assign>
    }
}
    7c58:	bf00      	nop
    7c5a:	3728      	adds	r7, #40	; 0x28
    7c5c:	46bd      	mov	sp, r7
    7c5e:	bd80      	pop	{r7, pc}
    7c60:	0001ffe8 	.word	0x0001ffe8
    7c64:	000206f0 	.word	0x000206f0
    7c68:	0001f9e4 	.word	0x0001f9e4
    7c6c:	00020010 	.word	0x00020010

00007c70 <compile_star_expr>:

STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7c70:	b580      	push	{r7, lr}
    7c72:	b082      	sub	sp, #8
    7c74:	af00      	add	r7, sp, #0
    7c76:	6078      	str	r0, [r7, #4]
    7c78:	6039      	str	r1, [r7, #0]
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    7c7a:	683b      	ldr	r3, [r7, #0]
    7c7c:	4a04      	ldr	r2, [pc, #16]	; (7c90 <compile_star_expr+0x20>)
    7c7e:	4619      	mov	r1, r3
    7c80:	6878      	ldr	r0, [r7, #4]
    7c82:	f7fd f85e 	bl	4d42 <compile_syntax_error>
}
    7c86:	bf00      	nop
    7c88:	3708      	adds	r7, #8
    7c8a:	46bd      	mov	sp, r7
    7c8c:	bd80      	pop	{r7, pc}
    7c8e:	bf00      	nop
    7c90:	00020028 	.word	0x00020028

00007c94 <compile_binary_op>:

STATIC void compile_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7c94:	b580      	push	{r7, lr}
    7c96:	b086      	sub	sp, #24
    7c98:	af00      	add	r7, sp, #0
    7c9a:	6078      	str	r0, [r7, #4]
    7c9c:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_xor_expr - PN_expr == MP_BINARY_OP_XOR);
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_and_expr - PN_expr == MP_BINARY_OP_AND);
    mp_binary_op_t binary_op = MP_BINARY_OP_OR + MP_PARSE_NODE_STRUCT_KIND(pns) - PN_expr;
    7c9e:	683b      	ldr	r3, [r7, #0]
    7ca0:	685b      	ldr	r3, [r3, #4]
    7ca2:	b2db      	uxtb	r3, r3
    7ca4:	3b0c      	subs	r3, #12
    7ca6:	613b      	str	r3, [r7, #16]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7ca8:	683b      	ldr	r3, [r7, #0]
    7caa:	685b      	ldr	r3, [r3, #4]
    7cac:	0a1b      	lsrs	r3, r3, #8
    7cae:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7cb0:	683b      	ldr	r3, [r7, #0]
    7cb2:	689b      	ldr	r3, [r3, #8]
    7cb4:	4619      	mov	r1, r3
    7cb6:	6878      	ldr	r0, [r7, #4]
    7cb8:	f000 fe43 	bl	8942 <compile_node>
    for (int i = 1; i < num_nodes; ++i) {
    7cbc:	2301      	movs	r3, #1
    7cbe:	617b      	str	r3, [r7, #20]
    7cc0:	e011      	b.n	7ce6 <compile_binary_op+0x52>
        compile_node(comp, pns->nodes[i]);
    7cc2:	683b      	ldr	r3, [r7, #0]
    7cc4:	697a      	ldr	r2, [r7, #20]
    7cc6:	3202      	adds	r2, #2
    7cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ccc:	4619      	mov	r1, r3
    7cce:	6878      	ldr	r0, [r7, #4]
    7cd0:	f000 fe37 	bl	8942 <compile_node>
        EMIT_ARG(binary_op, binary_op);
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cd8:	6939      	ldr	r1, [r7, #16]
    7cda:	4618      	mov	r0, r3
    7cdc:	f002 fe51 	bl	a982 <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; ++i) {
    7ce0:	697b      	ldr	r3, [r7, #20]
    7ce2:	3301      	adds	r3, #1
    7ce4:	617b      	str	r3, [r7, #20]
    7ce6:	697a      	ldr	r2, [r7, #20]
    7ce8:	68fb      	ldr	r3, [r7, #12]
    7cea:	429a      	cmp	r2, r3
    7cec:	dbe9      	blt.n	7cc2 <compile_binary_op+0x2e>
    }
}
    7cee:	bf00      	nop
    7cf0:	3718      	adds	r7, #24
    7cf2:	46bd      	mov	sp, r7
    7cf4:	bd80      	pop	{r7, pc}

00007cf6 <compile_term>:

STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7cf6:	b580      	push	{r7, lr}
    7cf8:	b086      	sub	sp, #24
    7cfa:	af00      	add	r7, sp, #0
    7cfc:	6078      	str	r0, [r7, #4]
    7cfe:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7d00:	683b      	ldr	r3, [r7, #0]
    7d02:	685b      	ldr	r3, [r3, #4]
    7d04:	0a1b      	lsrs	r3, r3, #8
    7d06:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7d08:	683b      	ldr	r3, [r7, #0]
    7d0a:	689b      	ldr	r3, [r3, #8]
    7d0c:	4619      	mov	r1, r3
    7d0e:	6878      	ldr	r0, [r7, #4]
    7d10:	f000 fe17 	bl	8942 <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7d14:	2301      	movs	r3, #1
    7d16:	617b      	str	r3, [r7, #20]
    7d18:	e055      	b.n	7dc6 <compile_term+0xd0>
        compile_node(comp, pns->nodes[i + 1]);
    7d1a:	697b      	ldr	r3, [r7, #20]
    7d1c:	1c5a      	adds	r2, r3, #1
    7d1e:	683b      	ldr	r3, [r7, #0]
    7d20:	3202      	adds	r2, #2
    7d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d26:	4619      	mov	r1, r3
    7d28:	6878      	ldr	r0, [r7, #4]
    7d2a:	f000 fe0a 	bl	8942 <compile_node>
        mp_binary_op_t op;
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    7d2e:	683b      	ldr	r3, [r7, #0]
    7d30:	697a      	ldr	r2, [r7, #20]
    7d32:	3202      	adds	r2, #2
    7d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d38:	091b      	lsrs	r3, r3, #4
    7d3a:	60bb      	str	r3, [r7, #8]
        switch (tok) {
    7d3c:	68bb      	ldr	r3, [r7, #8]
    7d3e:	3b2f      	subs	r3, #47	; 0x2f
    7d40:	2b08      	cmp	r3, #8
    7d42:	d82a      	bhi.n	7d9a <compile_term+0xa4>
    7d44:	a201      	add	r2, pc, #4	; (adr r2, 7d4c <compile_term+0x56>)
    7d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7d4a:	bf00      	nop
    7d4c:	00007d71 	.word	0x00007d71
    7d50:	00007d77 	.word	0x00007d77
    7d54:	00007d7d 	.word	0x00007d7d
    7d58:	00007d9b 	.word	0x00007d9b
    7d5c:	00007d89 	.word	0x00007d89
    7d60:	00007d83 	.word	0x00007d83
    7d64:	00007d8f 	.word	0x00007d8f
    7d68:	00007d9b 	.word	0x00007d9b
    7d6c:	00007d95 	.word	0x00007d95
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    7d70:	231a      	movs	r3, #26
    7d72:	613b      	str	r3, [r7, #16]
    7d74:	e01e      	b.n	7db4 <compile_term+0xbe>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    7d76:	231b      	movs	r3, #27
    7d78:	613b      	str	r3, [r7, #16]
    7d7a:	e01b      	b.n	7db4 <compile_term+0xbe>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    7d7c:	231c      	movs	r3, #28
    7d7e:	613b      	str	r3, [r7, #16]
    7d80:	e018      	b.n	7db4 <compile_term+0xbe>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    7d82:	231d      	movs	r3, #29
    7d84:	613b      	str	r3, [r7, #16]
    7d86:	e015      	b.n	7db4 <compile_term+0xbe>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    7d88:	231e      	movs	r3, #30
    7d8a:	613b      	str	r3, [r7, #16]
    7d8c:	e012      	b.n	7db4 <compile_term+0xbe>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    7d8e:	231f      	movs	r3, #31
    7d90:	613b      	str	r3, [r7, #16]
    7d92:	e00f      	b.n	7db4 <compile_term+0xbe>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    7d94:	2318      	movs	r3, #24
    7d96:	613b      	str	r3, [r7, #16]
    7d98:	e00c      	b.n	7db4 <compile_term+0xbe>
            default:
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    7d9a:	68bb      	ldr	r3, [r7, #8]
    7d9c:	2b39      	cmp	r3, #57	; 0x39
    7d9e:	d006      	beq.n	7dae <compile_term+0xb8>
    7da0:	4b0d      	ldr	r3, [pc, #52]	; (7dd8 <compile_term+0xe2>)
    7da2:	4a0e      	ldr	r2, [pc, #56]	; (7ddc <compile_term+0xe6>)
    7da4:	f640 016b 	movw	r1, #2155	; 0x86b
    7da8:	480d      	ldr	r0, [pc, #52]	; (7de0 <compile_term+0xea>)
    7daa:	f013 fa1b 	bl	1b1e4 <__assert_func>
                op = MP_BINARY_OP_RSHIFT;
    7dae:	2319      	movs	r3, #25
    7db0:	613b      	str	r3, [r7, #16]
                break;
    7db2:	bf00      	nop
        }
        EMIT_ARG(binary_op, op);
    7db4:	687b      	ldr	r3, [r7, #4]
    7db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7db8:	6939      	ldr	r1, [r7, #16]
    7dba:	4618      	mov	r0, r3
    7dbc:	f002 fde1 	bl	a982 <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7dc0:	697b      	ldr	r3, [r7, #20]
    7dc2:	3302      	adds	r3, #2
    7dc4:	617b      	str	r3, [r7, #20]
    7dc6:	697b      	ldr	r3, [r7, #20]
    7dc8:	1c5a      	adds	r2, r3, #1
    7dca:	68fb      	ldr	r3, [r7, #12]
    7dcc:	429a      	cmp	r2, r3
    7dce:	dba4      	blt.n	7d1a <compile_term+0x24>
    }
}
    7dd0:	bf00      	nop
    7dd2:	3718      	adds	r7, #24
    7dd4:	46bd      	mov	sp, r7
    7dd6:	bd80      	pop	{r7, pc}
    7dd8:	00020048 	.word	0x00020048
    7ddc:	00020704 	.word	0x00020704
    7de0:	0001f9e4 	.word	0x0001f9e4

00007de4 <compile_factor_2>:

STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7de4:	b580      	push	{r7, lr}
    7de6:	b084      	sub	sp, #16
    7de8:	af00      	add	r7, sp, #0
    7dea:	6078      	str	r0, [r7, #4]
    7dec:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[1]);
    7dee:	683b      	ldr	r3, [r7, #0]
    7df0:	68db      	ldr	r3, [r3, #12]
    7df2:	4619      	mov	r1, r3
    7df4:	6878      	ldr	r0, [r7, #4]
    7df6:	f000 fda4 	bl	8942 <compile_node>
    mp_unary_op_t op;
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    7dfa:	683b      	ldr	r3, [r7, #0]
    7dfc:	689b      	ldr	r3, [r3, #8]
    7dfe:	091b      	lsrs	r3, r3, #4
    7e00:	60bb      	str	r3, [r7, #8]
    switch (tok) {
    7e02:	68bb      	ldr	r3, [r7, #8]
    7e04:	2b2f      	cmp	r3, #47	; 0x2f
    7e06:	d002      	beq.n	7e0e <compile_factor_2+0x2a>
    7e08:	2b30      	cmp	r3, #48	; 0x30
    7e0a:	d003      	beq.n	7e14 <compile_factor_2+0x30>
    7e0c:	e005      	b.n	7e1a <compile_factor_2+0x36>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    7e0e:	2300      	movs	r3, #0
    7e10:	60fb      	str	r3, [r7, #12]
    7e12:	e00f      	b.n	7e34 <compile_factor_2+0x50>
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    7e14:	2301      	movs	r3, #1
    7e16:	60fb      	str	r3, [r7, #12]
    7e18:	e00c      	b.n	7e34 <compile_factor_2+0x50>
        default:
            assert(tok == MP_TOKEN_OP_TILDE);
    7e1a:	68bb      	ldr	r3, [r7, #8]
    7e1c:	2b3d      	cmp	r3, #61	; 0x3d
    7e1e:	d006      	beq.n	7e2e <compile_factor_2+0x4a>
    7e20:	4b09      	ldr	r3, [pc, #36]	; (7e48 <compile_factor_2+0x64>)
    7e22:	4a0a      	ldr	r2, [pc, #40]	; (7e4c <compile_factor_2+0x68>)
    7e24:	f640 017b 	movw	r1, #2171	; 0x87b
    7e28:	4809      	ldr	r0, [pc, #36]	; (7e50 <compile_factor_2+0x6c>)
    7e2a:	f013 f9db 	bl	1b1e4 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    7e2e:	2302      	movs	r3, #2
    7e30:	60fb      	str	r3, [r7, #12]
            break;
    7e32:	bf00      	nop
    }
    EMIT_ARG(unary_op, op);
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e38:	68f9      	ldr	r1, [r7, #12]
    7e3a:	4618      	mov	r0, r3
    7e3c:	f002 fd8c 	bl	a958 <mp_emit_bc_unary_op>
}
    7e40:	bf00      	nop
    7e42:	3710      	adds	r7, #16
    7e44:	46bd      	mov	sp, r7
    7e46:	bd80      	pop	{r7, pc}
    7e48:	00020064 	.word	0x00020064
    7e4c:	00020714 	.word	0x00020714
    7e50:	0001f9e4 	.word	0x0001f9e4

00007e54 <compile_atom_expr_normal>:

STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e54:	b580      	push	{r7, lr}
    7e56:	b08c      	sub	sp, #48	; 0x30
    7e58:	af00      	add	r7, sp, #0
    7e5a:	6078      	str	r0, [r7, #4]
    7e5c:	6039      	str	r1, [r7, #0]
    // compile the subject of the expression
    compile_node(comp, pns->nodes[0]);
    7e5e:	683b      	ldr	r3, [r7, #0]
    7e60:	689b      	ldr	r3, [r3, #8]
    7e62:	4619      	mov	r1, r3
    7e64:	6878      	ldr	r0, [r7, #4]
    7e66:	f000 fd6c 	bl	8942 <compile_node>

    // compile_atom_expr_await may call us with a NULL node
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7e6a:	683b      	ldr	r3, [r7, #0]
    7e6c:	68db      	ldr	r3, [r3, #12]
    7e6e:	2b00      	cmp	r3, #0
    7e70:	f000 80ed 	beq.w	804e <compile_atom_expr_normal+0x1fa>
        return;
    }

    // get the array of trailers (known to be an array of PARSE_NODE_STRUCT)
    size_t num_trail = 1;
    7e74:	2301      	movs	r3, #1
    7e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    7e78:	683b      	ldr	r3, [r7, #0]
    7e7a:	330c      	adds	r3, #12
    7e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    7e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e80:	681b      	ldr	r3, [r3, #0]
    7e82:	685b      	ldr	r3, [r3, #4]
    7e84:	b2db      	uxtb	r3, r3
    7e86:	2b86      	cmp	r3, #134	; 0x86
    7e88:	d108      	bne.n	7e9c <compile_atom_expr_normal+0x48>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    7e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e8c:	681b      	ldr	r3, [r3, #0]
    7e8e:	685b      	ldr	r3, [r3, #4]
    7e90:	0a1b      	lsrs	r3, r3, #8
    7e92:	62fb      	str	r3, [r7, #44]	; 0x2c
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    7e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e96:	681b      	ldr	r3, [r3, #0]
    7e98:	3308      	adds	r3, #8
    7e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    // the current index into the array of trailers
    size_t i = 0;
    7e9c:	2300      	movs	r3, #0
    7e9e:	627b      	str	r3, [r7, #36]	; 0x24

    // handle special super() call
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    7ea0:	687b      	ldr	r3, [r7, #4]
    7ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ea4:	681b      	ldr	r3, [r3, #0]
    7ea6:	2b07      	cmp	r3, #7
    7ea8:	f040 80cc 	bne.w	8044 <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    7eac:	683b      	ldr	r3, [r7, #0]
    7eae:	689b      	ldr	r3, [r3, #8]
    7eb0:	f003 030f 	and.w	r3, r3, #15
    7eb4:	2b02      	cmp	r3, #2
    7eb6:	f040 80c5 	bne.w	8044 <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    7eba:	683b      	ldr	r3, [r7, #0]
    7ebc:	689b      	ldr	r3, [r3, #8]
    7ebe:	091b      	lsrs	r3, r3, #4
    7ec0:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
    7ec4:	f040 80be 	bne.w	8044 <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    7ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	685b      	ldr	r3, [r3, #4]
    7ece:	b2db      	uxtb	r3, r3
    7ed0:	2b2d      	cmp	r3, #45	; 0x2d
    7ed2:	f040 80b7 	bne.w	8044 <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    7ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	689b      	ldr	r3, [r3, #8]
    7edc:	2b00      	cmp	r3, #0
    7ede:	f040 80b1 	bne.w	8044 <compile_atom_expr_normal+0x1f0>
        // at this point we have matched "super()" within a function

        // load the class for super to search for a parent
        compile_load_id(comp, MP_QSTR___class__);
    7ee2:	2106      	movs	r1, #6
    7ee4:	6878      	ldr	r0, [r7, #4]
    7ee6:	f7fd f82a 	bl	4f3e <compile_load_id>

        // look for first argument to function (assumes it's "self")
        bool found = false;
    7eea:	2300      	movs	r3, #0
    7eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        id_info_t *id = &comp->scope_cur->id_info[0];
    7ef0:	687b      	ldr	r3, [r7, #4]
    7ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ef6:	61fb      	str	r3, [r7, #28]
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    7ef8:	687b      	ldr	r3, [r7, #4]
    7efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7efe:	61bb      	str	r3, [r7, #24]
    7f00:	e015      	b.n	7f2e <compile_atom_expr_normal+0xda>
            if (id->flags & ID_FLAG_IS_PARAM) {
    7f02:	69fb      	ldr	r3, [r7, #28]
    7f04:	785b      	ldrb	r3, [r3, #1]
    7f06:	f003 0301 	and.w	r3, r3, #1
    7f0a:	2b00      	cmp	r3, #0
    7f0c:	d009      	beq.n	7f22 <compile_atom_expr_normal+0xce>
                // first argument found; load it
                compile_load_id(comp, id->qst);
    7f0e:	69fb      	ldr	r3, [r7, #28]
    7f10:	685b      	ldr	r3, [r3, #4]
    7f12:	4619      	mov	r1, r3
    7f14:	6878      	ldr	r0, [r7, #4]
    7f16:	f7fd f812 	bl	4f3e <compile_load_id>
                found = true;
    7f1a:	2301      	movs	r3, #1
    7f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                break;
    7f20:	e008      	b.n	7f34 <compile_atom_expr_normal+0xe0>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    7f22:	69bb      	ldr	r3, [r7, #24]
    7f24:	3b01      	subs	r3, #1
    7f26:	61bb      	str	r3, [r7, #24]
    7f28:	69fb      	ldr	r3, [r7, #28]
    7f2a:	3308      	adds	r3, #8
    7f2c:	61fb      	str	r3, [r7, #28]
    7f2e:	69bb      	ldr	r3, [r7, #24]
    7f30:	2b00      	cmp	r3, #0
    7f32:	d1e6      	bne.n	7f02 <compile_atom_expr_normal+0xae>
            }
        }
        if (!found) {
    7f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7f38:	f083 0301 	eor.w	r3, r3, #1
    7f3c:	b2db      	uxtb	r3, r3
    7f3e:	2b00      	cmp	r3, #0
    7f40:	d007      	beq.n	7f52 <compile_atom_expr_normal+0xfe>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    7f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f44:	681b      	ldr	r3, [r3, #0]
    7f46:	4a44      	ldr	r2, [pc, #272]	; (8058 <compile_atom_expr_normal+0x204>)
    7f48:	4619      	mov	r1, r3
    7f4a:	6878      	ldr	r0, [r7, #4]
    7f4c:	f7fc fef9 	bl	4d42 <compile_syntax_error>
                "super() can't find self"); // really a TypeError
            return;
    7f50:	e07e      	b.n	8050 <compile_atom_expr_normal+0x1fc>
        }

        if (num_trail >= 3
    7f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7f54:	2b02      	cmp	r3, #2
    7f56:	d926      	bls.n	7fa6 <compile_atom_expr_normal+0x152>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    7f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f5a:	3304      	adds	r3, #4
    7f5c:	681b      	ldr	r3, [r3, #0]
    7f5e:	685b      	ldr	r3, [r3, #4]
    7f60:	b2db      	uxtb	r3, r3
    7f62:	2b2f      	cmp	r3, #47	; 0x2f
    7f64:	d11f      	bne.n	7fa6 <compile_atom_expr_normal+0x152>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    7f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f68:	3308      	adds	r3, #8
    7f6a:	681b      	ldr	r3, [r3, #0]
    7f6c:	685b      	ldr	r3, [r3, #4]
    7f6e:	b2db      	uxtb	r3, r3
    7f70:	2b2d      	cmp	r3, #45	; 0x2d
    7f72:	d118      	bne.n	7fa6 <compile_atom_expr_normal+0x152>
            // optimisation for method calls super().f(...), to eliminate heap allocation
            mp_parse_node_struct_t *pns_period = pns_trail[1];
    7f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f76:	685b      	ldr	r3, [r3, #4]
    7f78:	617b      	str	r3, [r7, #20]
            mp_parse_node_struct_t *pns_paren = pns_trail[2];
    7f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f7c:	689b      	ldr	r3, [r3, #8]
    7f7e:	613b      	str	r3, [r7, #16]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7f84:	697b      	ldr	r3, [r7, #20]
    7f86:	689b      	ldr	r3, [r3, #8]
    7f88:	091b      	lsrs	r3, r3, #4
    7f8a:	2201      	movs	r2, #1
    7f8c:	4619      	mov	r1, r3
    7f8e:	f002 fa63 	bl	a458 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    7f92:	693b      	ldr	r3, [r7, #16]
    7f94:	6899      	ldr	r1, [r3, #8]
    7f96:	2300      	movs	r3, #0
    7f98:	2201      	movs	r2, #1
    7f9a:	6878      	ldr	r0, [r7, #4]
    7f9c:	f000 f871 	bl	8082 <compile_trailer_paren_helper>
            i = 3;
    7fa0:	2303      	movs	r3, #3
    7fa2:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    7fa4:	e008      	b.n	7fb8 <compile_atom_expr_normal+0x164>
        } else {
            // a super() call
            EMIT_ARG(call_function, 2, 0, 0);
    7fa6:	687b      	ldr	r3, [r7, #4]
    7fa8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7faa:	2300      	movs	r3, #0
    7fac:	2200      	movs	r2, #0
    7fae:	2102      	movs	r1, #2
    7fb0:	f002 fe4e 	bl	ac50 <mp_emit_bc_call_function>
            i = 1;
    7fb4:	2301      	movs	r3, #1
    7fb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    // compile the remaining trailers
    for (; i < num_trail; i++) {
    7fb8:	e044      	b.n	8044 <compile_atom_expr_normal+0x1f0>
        if (i + 1 < num_trail
    7fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fbc:	1c5a      	adds	r2, r3, #1
    7fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7fc0:	429a      	cmp	r2, r3
    7fc2:	d233      	bcs.n	802c <compile_atom_expr_normal+0x1d8>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    7fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fc6:	009b      	lsls	r3, r3, #2
    7fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7fca:	4413      	add	r3, r2
    7fcc:	681b      	ldr	r3, [r3, #0]
    7fce:	685b      	ldr	r3, [r3, #4]
    7fd0:	b2db      	uxtb	r3, r3
    7fd2:	2b2f      	cmp	r3, #47	; 0x2f
    7fd4:	d12a      	bne.n	802c <compile_atom_expr_normal+0x1d8>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    7fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fd8:	3301      	adds	r3, #1
    7fda:	009b      	lsls	r3, r3, #2
    7fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7fde:	4413      	add	r3, r2
    7fe0:	681b      	ldr	r3, [r3, #0]
    7fe2:	685b      	ldr	r3, [r3, #4]
    7fe4:	b2db      	uxtb	r3, r3
    7fe6:	2b2d      	cmp	r3, #45	; 0x2d
    7fe8:	d120      	bne.n	802c <compile_atom_expr_normal+0x1d8>
            // optimisation for method calls a.f(...), following PyPy
            mp_parse_node_struct_t *pns_period = pns_trail[i];
    7fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fec:	009b      	lsls	r3, r3, #2
    7fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7ff0:	4413      	add	r3, r2
    7ff2:	681b      	ldr	r3, [r3, #0]
    7ff4:	60fb      	str	r3, [r7, #12]
            mp_parse_node_struct_t *pns_paren = pns_trail[i + 1];
    7ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ff8:	3301      	adds	r3, #1
    7ffa:	009b      	lsls	r3, r3, #2
    7ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7ffe:	4413      	add	r3, r2
    8000:	681b      	ldr	r3, [r3, #0]
    8002:	60bb      	str	r3, [r7, #8]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    8004:	687b      	ldr	r3, [r7, #4]
    8006:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8008:	68fb      	ldr	r3, [r7, #12]
    800a:	689b      	ldr	r3, [r3, #8]
    800c:	091b      	lsrs	r3, r3, #4
    800e:	2200      	movs	r2, #0
    8010:	4619      	mov	r1, r3
    8012:	f002 fa21 	bl	a458 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    8016:	68bb      	ldr	r3, [r7, #8]
    8018:	6899      	ldr	r1, [r3, #8]
    801a:	2300      	movs	r3, #0
    801c:	2201      	movs	r2, #1
    801e:	6878      	ldr	r0, [r7, #4]
    8020:	f000 f82f 	bl	8082 <compile_trailer_paren_helper>
            i += 1;
    8024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8026:	3301      	adds	r3, #1
    8028:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    802a:	e008      	b.n	803e <compile_atom_expr_normal+0x1ea>
        } else {
            // node is one of: trailer_paren, trailer_bracket, trailer_period
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    802e:	009b      	lsls	r3, r3, #2
    8030:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8032:	4413      	add	r3, r2
    8034:	681b      	ldr	r3, [r3, #0]
    8036:	4619      	mov	r1, r3
    8038:	6878      	ldr	r0, [r7, #4]
    803a:	f000 fc82 	bl	8942 <compile_node>
    for (; i < num_trail; i++) {
    803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8040:	3301      	adds	r3, #1
    8042:	627b      	str	r3, [r7, #36]	; 0x24
    8044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8048:	429a      	cmp	r2, r3
    804a:	d3b6      	bcc.n	7fba <compile_atom_expr_normal+0x166>
    804c:	e000      	b.n	8050 <compile_atom_expr_normal+0x1fc>
        return;
    804e:	bf00      	nop
        }
    }
}
    8050:	3730      	adds	r7, #48	; 0x30
    8052:	46bd      	mov	sp, r7
    8054:	bd80      	pop	{r7, pc}
    8056:	bf00      	nop
    8058:	00020080 	.word	0x00020080

0000805c <compile_power>:

STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    805c:	b580      	push	{r7, lr}
    805e:	b082      	sub	sp, #8
    8060:	af00      	add	r7, sp, #0
    8062:	6078      	str	r0, [r7, #4]
    8064:	6039      	str	r1, [r7, #0]
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    8066:	6839      	ldr	r1, [r7, #0]
    8068:	6878      	ldr	r0, [r7, #4]
    806a:	f7fc ff3b 	bl	4ee4 <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    806e:	687b      	ldr	r3, [r7, #4]
    8070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8072:	2120      	movs	r1, #32
    8074:	4618      	mov	r0, r3
    8076:	f002 fc84 	bl	a982 <mp_emit_bc_binary_op>
}
    807a:	bf00      	nop
    807c:	3708      	adds	r7, #8
    807e:	46bd      	mov	sp, r7
    8080:	bd80      	pop	{r7, pc}

00008082 <compile_trailer_paren_helper>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    8082:	b580      	push	{r7, lr}
    8084:	b08e      	sub	sp, #56	; 0x38
    8086:	af00      	add	r7, sp, #0
    8088:	60f8      	str	r0, [r7, #12]
    808a:	60b9      	str	r1, [r7, #8]
    808c:	603b      	str	r3, [r7, #0]
    808e:	4613      	mov	r3, r2
    8090:	71fb      	strb	r3, [r7, #7]
    // function to call is on top of stack

    // get the list of arguments
    mp_parse_node_t *args;
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    8092:	f107 0214 	add.w	r2, r7, #20
    8096:	f107 0308 	add.w	r3, r7, #8
    809a:	2197      	movs	r1, #151	; 0x97
    809c:	4618      	mov	r0, r3
    809e:	f7fb fd59 	bl	3b54 <mp_parse_node_extract_list>
    80a2:	61f8      	str	r0, [r7, #28]

    // compile the arguments
    // Rather than calling compile_node on the list, we go through the list of args
    // explicitly here so that we can count the number of arguments and give sensible
    // error messages.
    int n_positional = n_positional_extra;
    80a4:	683b      	ldr	r3, [r7, #0]
    80a6:	637b      	str	r3, [r7, #52]	; 0x34
    uint n_keyword = 0;
    80a8:	2300      	movs	r3, #0
    80aa:	633b      	str	r3, [r7, #48]	; 0x30
    uint star_flags = 0;
    80ac:	2300      	movs	r3, #0
    80ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    80b0:	2300      	movs	r3, #0
    80b2:	62bb      	str	r3, [r7, #40]	; 0x28
    80b4:	2300      	movs	r3, #0
    80b6:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < n_args; i++) {
    80b8:	2300      	movs	r3, #0
    80ba:	623b      	str	r3, [r7, #32]
    80bc:	e0af      	b.n	821e <compile_trailer_paren_helper+0x19c>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    80be:	697a      	ldr	r2, [r7, #20]
    80c0:	6a3b      	ldr	r3, [r7, #32]
    80c2:	009b      	lsls	r3, r3, #2
    80c4:	4413      	add	r3, r2
    80c6:	681b      	ldr	r3, [r3, #0]
    80c8:	2b00      	cmp	r3, #0
    80ca:	d07d      	beq.n	81c8 <compile_trailer_paren_helper+0x146>
    80cc:	697a      	ldr	r2, [r7, #20]
    80ce:	6a3b      	ldr	r3, [r7, #32]
    80d0:	009b      	lsls	r3, r3, #2
    80d2:	4413      	add	r3, r2
    80d4:	681b      	ldr	r3, [r3, #0]
    80d6:	f003 0303 	and.w	r3, r3, #3
    80da:	2b00      	cmp	r3, #0
    80dc:	d174      	bne.n	81c8 <compile_trailer_paren_helper+0x146>
            mp_parse_node_struct_t *pns_arg = (mp_parse_node_struct_t*)args[i];
    80de:	697a      	ldr	r2, [r7, #20]
    80e0:	6a3b      	ldr	r3, [r7, #32]
    80e2:	009b      	lsls	r3, r3, #2
    80e4:	4413      	add	r3, r2
    80e6:	681b      	ldr	r3, [r3, #0]
    80e8:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    80ea:	69bb      	ldr	r3, [r7, #24]
    80ec:	685b      	ldr	r3, [r3, #4]
    80ee:	b2db      	uxtb	r3, r3
    80f0:	2b99      	cmp	r3, #153	; 0x99
    80f2:	d112      	bne.n	811a <compile_trailer_paren_helper+0x98>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    80f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    80f6:	f003 0301 	and.w	r3, r3, #1
    80fa:	2b00      	cmp	r3, #0
    80fc:	d006      	beq.n	810c <compile_trailer_paren_helper+0x8a>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    80fe:	69bb      	ldr	r3, [r7, #24]
    8100:	4a64      	ldr	r2, [pc, #400]	; (8294 <compile_trailer_paren_helper+0x212>)
    8102:	4619      	mov	r1, r3
    8104:	68f8      	ldr	r0, [r7, #12]
    8106:	f7fc fe1c 	bl	4d42 <compile_syntax_error>
                    return;
    810a:	e0c0      	b.n	828e <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    810e:	f043 0301 	orr.w	r3, r3, #1
    8112:	62fb      	str	r3, [r7, #44]	; 0x2c
                star_args_node = pns_arg;
    8114:	69bb      	ldr	r3, [r7, #24]
    8116:	62bb      	str	r3, [r7, #40]	; 0x28
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8118:	e07e      	b.n	8218 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    811a:	69bb      	ldr	r3, [r7, #24]
    811c:	685b      	ldr	r3, [r3, #4]
    811e:	b2db      	uxtb	r3, r3
    8120:	2b9a      	cmp	r3, #154	; 0x9a
    8122:	d112      	bne.n	814a <compile_trailer_paren_helper+0xc8>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    8124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8126:	f003 0302 	and.w	r3, r3, #2
    812a:	2b00      	cmp	r3, #0
    812c:	d006      	beq.n	813c <compile_trailer_paren_helper+0xba>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    812e:	69bb      	ldr	r3, [r7, #24]
    8130:	4a59      	ldr	r2, [pc, #356]	; (8298 <compile_trailer_paren_helper+0x216>)
    8132:	4619      	mov	r1, r3
    8134:	68f8      	ldr	r0, [r7, #12]
    8136:	f7fc fe04 	bl	4d42 <compile_syntax_error>
                    return;
    813a:	e0a8      	b.n	828e <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    813e:	f043 0302 	orr.w	r3, r3, #2
    8142:	62fb      	str	r3, [r7, #44]	; 0x2c
                dblstar_args_node = pns_arg;
    8144:	69bb      	ldr	r3, [r7, #24]
    8146:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8148:	e066      	b.n	8218 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    814a:	69bb      	ldr	r3, [r7, #24]
    814c:	685b      	ldr	r3, [r3, #4]
    814e:	b2db      	uxtb	r3, r3
    8150:	2b9b      	cmp	r3, #155	; 0x9b
    8152:	d138      	bne.n	81c6 <compile_trailer_paren_helper+0x144>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    8154:	69bb      	ldr	r3, [r7, #24]
    8156:	68db      	ldr	r3, [r3, #12]
    8158:	2b00      	cmp	r3, #0
    815a:	d00b      	beq.n	8174 <compile_trailer_paren_helper+0xf2>
    815c:	69bb      	ldr	r3, [r7, #24]
    815e:	68db      	ldr	r3, [r3, #12]
    8160:	f003 0303 	and.w	r3, r3, #3
    8164:	2b00      	cmp	r3, #0
    8166:	d105      	bne.n	8174 <compile_trailer_paren_helper+0xf2>
    8168:	69bb      	ldr	r3, [r7, #24]
    816a:	68db      	ldr	r3, [r3, #12]
    816c:	685b      	ldr	r3, [r3, #4]
    816e:	b2db      	uxtb	r3, r3
    8170:	2b9f      	cmp	r3, #159	; 0x9f
    8172:	d01f      	beq.n	81b4 <compile_trailer_paren_helper+0x132>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    8174:	69bb      	ldr	r3, [r7, #24]
    8176:	689b      	ldr	r3, [r3, #8]
    8178:	f003 030f 	and.w	r3, r3, #15
    817c:	2b02      	cmp	r3, #2
    817e:	d006      	beq.n	818e <compile_trailer_paren_helper+0x10c>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    8180:	69bb      	ldr	r3, [r7, #24]
    8182:	4a46      	ldr	r2, [pc, #280]	; (829c <compile_trailer_paren_helper+0x21a>)
    8184:	4619      	mov	r1, r3
    8186:	68f8      	ldr	r0, [r7, #12]
    8188:	f7fc fddb 	bl	4d42 <compile_syntax_error>
                        return;
    818c:	e07f      	b.n	828e <compile_trailer_paren_helper+0x20c>
                    }
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    818e:	68fb      	ldr	r3, [r7, #12]
    8190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8192:	69bb      	ldr	r3, [r7, #24]
    8194:	689b      	ldr	r3, [r3, #8]
    8196:	091b      	lsrs	r3, r3, #4
    8198:	4619      	mov	r1, r3
    819a:	4610      	mov	r0, r2
    819c:	f002 f8ea 	bl	a374 <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    81a0:	69bb      	ldr	r3, [r7, #24]
    81a2:	68db      	ldr	r3, [r3, #12]
    81a4:	4619      	mov	r1, r3
    81a6:	68f8      	ldr	r0, [r7, #12]
    81a8:	f000 fbcb 	bl	8942 <compile_node>
                    n_keyword += 1;
    81ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    81ae:	3301      	adds	r3, #1
    81b0:	633b      	str	r3, [r7, #48]	; 0x30
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    81b2:	e031      	b.n	8218 <compile_trailer_paren_helper+0x196>
                } else {
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    81b4:	2206      	movs	r2, #6
    81b6:	69b9      	ldr	r1, [r7, #24]
    81b8:	68f8      	ldr	r0, [r7, #12]
    81ba:	f000 f875 	bl	82a8 <compile_comprehension>
                    n_positional++;
    81be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    81c0:	3301      	adds	r3, #1
    81c2:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    81c4:	e028      	b.n	8218 <compile_trailer_paren_helper+0x196>
                }
            } else {
                goto normal_argument;
    81c6:	bf00      	nop
            }
        } else {
            normal_argument:
            if (star_flags) {
    81c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81ca:	2b00      	cmp	r3, #0
    81cc:	d00a      	beq.n	81e4 <compile_trailer_paren_helper+0x162>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    81ce:	697a      	ldr	r2, [r7, #20]
    81d0:	6a3b      	ldr	r3, [r7, #32]
    81d2:	009b      	lsls	r3, r3, #2
    81d4:	4413      	add	r3, r2
    81d6:	681b      	ldr	r3, [r3, #0]
    81d8:	4a31      	ldr	r2, [pc, #196]	; (82a0 <compile_trailer_paren_helper+0x21e>)
    81da:	4619      	mov	r1, r3
    81dc:	68f8      	ldr	r0, [r7, #12]
    81de:	f7fc fdb0 	bl	4d42 <compile_syntax_error>
                return;
    81e2:	e054      	b.n	828e <compile_trailer_paren_helper+0x20c>
            }
            if (n_keyword > 0) {
    81e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    81e6:	2b00      	cmp	r3, #0
    81e8:	d00a      	beq.n	8200 <compile_trailer_paren_helper+0x17e>
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    81ea:	697a      	ldr	r2, [r7, #20]
    81ec:	6a3b      	ldr	r3, [r7, #32]
    81ee:	009b      	lsls	r3, r3, #2
    81f0:	4413      	add	r3, r2
    81f2:	681b      	ldr	r3, [r3, #0]
    81f4:	4a2b      	ldr	r2, [pc, #172]	; (82a4 <compile_trailer_paren_helper+0x222>)
    81f6:	4619      	mov	r1, r3
    81f8:	68f8      	ldr	r0, [r7, #12]
    81fa:	f7fc fda2 	bl	4d42 <compile_syntax_error>
                return;
    81fe:	e046      	b.n	828e <compile_trailer_paren_helper+0x20c>
            }
            compile_node(comp, args[i]);
    8200:	697a      	ldr	r2, [r7, #20]
    8202:	6a3b      	ldr	r3, [r7, #32]
    8204:	009b      	lsls	r3, r3, #2
    8206:	4413      	add	r3, r2
    8208:	681b      	ldr	r3, [r3, #0]
    820a:	4619      	mov	r1, r3
    820c:	68f8      	ldr	r0, [r7, #12]
    820e:	f000 fb98 	bl	8942 <compile_node>
            n_positional++;
    8212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8214:	3301      	adds	r3, #1
    8216:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n_args; i++) {
    8218:	6a3b      	ldr	r3, [r7, #32]
    821a:	3301      	adds	r3, #1
    821c:	623b      	str	r3, [r7, #32]
    821e:	6a3a      	ldr	r2, [r7, #32]
    8220:	69fb      	ldr	r3, [r7, #28]
    8222:	429a      	cmp	r2, r3
    8224:	f6ff af4b 	blt.w	80be <compile_trailer_paren_helper+0x3c>
        }
    }

    // compile the star/double-star arguments if we had them
    // if we had one but not the other then we load "null" as a place holder
    if (star_flags != 0) {
    8228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    822a:	2b00      	cmp	r3, #0
    822c:	d01d      	beq.n	826a <compile_trailer_paren_helper+0x1e8>
        if (star_args_node == NULL) {
    822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8230:	2b00      	cmp	r3, #0
    8232:	d105      	bne.n	8240 <compile_trailer_paren_helper+0x1be>
            EMIT(load_null);
    8234:	68fb      	ldr	r3, [r7, #12]
    8236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8238:	4618      	mov	r0, r3
    823a:	f002 f8bf 	bl	a3bc <mp_emit_bc_load_null>
    823e:	e005      	b.n	824c <compile_trailer_paren_helper+0x1ca>
        } else {
            compile_node(comp, star_args_node->nodes[0]);
    8240:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8242:	689b      	ldr	r3, [r3, #8]
    8244:	4619      	mov	r1, r3
    8246:	68f8      	ldr	r0, [r7, #12]
    8248:	f000 fb7b 	bl	8942 <compile_node>
        }
        if (dblstar_args_node == NULL) {
    824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    824e:	2b00      	cmp	r3, #0
    8250:	d105      	bne.n	825e <compile_trailer_paren_helper+0x1dc>
            EMIT(load_null);
    8252:	68fb      	ldr	r3, [r7, #12]
    8254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8256:	4618      	mov	r0, r3
    8258:	f002 f8b0 	bl	a3bc <mp_emit_bc_load_null>
    825c:	e005      	b.n	826a <compile_trailer_paren_helper+0x1e8>
        } else {
            compile_node(comp, dblstar_args_node->nodes[0]);
    825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8260:	689b      	ldr	r3, [r3, #8]
    8262:	4619      	mov	r1, r3
    8264:	68f8      	ldr	r0, [r7, #12]
    8266:	f000 fb6c 	bl	8942 <compile_node>
        }
    }

    // emit the function/method call
    if (is_method_call) {
    826a:	79fb      	ldrb	r3, [r7, #7]
    826c:	2b00      	cmp	r3, #0
    826e:	d007      	beq.n	8280 <compile_trailer_paren_helper+0x1fe>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    8270:	68fb      	ldr	r3, [r7, #12]
    8272:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8274:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    827a:	f002 fcfe 	bl	ac7a <mp_emit_bc_call_method>
    827e:	e006      	b.n	828e <compile_trailer_paren_helper+0x20c>
    } else {
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    8280:	68fb      	ldr	r3, [r7, #12]
    8282:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8284:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    828a:	f002 fce1 	bl	ac50 <mp_emit_bc_call_function>
    }
}
    828e:	3738      	adds	r7, #56	; 0x38
    8290:	46bd      	mov	sp, r7
    8292:	bd80      	pop	{r7, pc}
    8294:	00020098 	.word	0x00020098
    8298:	000200b0 	.word	0x000200b0
    829c:	000200c8 	.word	0x000200c8
    82a0:	000200ec 	.word	0x000200ec
    82a4:	00020108 	.word	0x00020108

000082a8 <compile_comprehension>:

// pns needs to have 2 nodes, first is lhs of comprehension, second is PN_comp_for node
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    82a8:	b580      	push	{r7, lr}
    82aa:	b088      	sub	sp, #32
    82ac:	af00      	add	r7, sp, #0
    82ae:	60f8      	str	r0, [r7, #12]
    82b0:	60b9      	str	r1, [r7, #8]
    82b2:	607a      	str	r2, [r7, #4]
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    82b4:	68bb      	ldr	r3, [r7, #8]
    82b6:	685b      	ldr	r3, [r3, #4]
    82b8:	0a1b      	lsrs	r3, r3, #8
    82ba:	2b02      	cmp	r3, #2
    82bc:	d006      	beq.n	82cc <compile_comprehension+0x24>
    82be:	4b2a      	ldr	r3, [pc, #168]	; (8368 <compile_comprehension+0xc0>)
    82c0:	4a2a      	ldr	r2, [pc, #168]	; (836c <compile_comprehension+0xc4>)
    82c2:	f640 1131 	movw	r1, #2353	; 0x931
    82c6:	482a      	ldr	r0, [pc, #168]	; (8370 <compile_comprehension+0xc8>)
    82c8:	f012 ff8c 	bl	1b1e4 <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    82cc:	68bb      	ldr	r3, [r7, #8]
    82ce:	68db      	ldr	r3, [r3, #12]
    82d0:	2b00      	cmp	r3, #0
    82d2:	d00b      	beq.n	82ec <compile_comprehension+0x44>
    82d4:	68bb      	ldr	r3, [r7, #8]
    82d6:	68db      	ldr	r3, [r3, #12]
    82d8:	f003 0303 	and.w	r3, r3, #3
    82dc:	2b00      	cmp	r3, #0
    82de:	d105      	bne.n	82ec <compile_comprehension+0x44>
    82e0:	68bb      	ldr	r3, [r7, #8]
    82e2:	68db      	ldr	r3, [r3, #12]
    82e4:	685b      	ldr	r3, [r3, #4]
    82e6:	b2db      	uxtb	r3, r3
    82e8:	2b9f      	cmp	r3, #159	; 0x9f
    82ea:	d006      	beq.n	82fa <compile_comprehension+0x52>
    82ec:	4b21      	ldr	r3, [pc, #132]	; (8374 <compile_comprehension+0xcc>)
    82ee:	4a1f      	ldr	r2, [pc, #124]	; (836c <compile_comprehension+0xc4>)
    82f0:	f640 1132 	movw	r1, #2354	; 0x932
    82f4:	481e      	ldr	r0, [pc, #120]	; (8370 <compile_comprehension+0xc8>)
    82f6:	f012 ff75 	bl	1b1e4 <__assert_func>
    mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    82fa:	68bb      	ldr	r3, [r7, #8]
    82fc:	68db      	ldr	r3, [r3, #12]
    82fe:	61fb      	str	r3, [r7, #28]

    if (comp->pass == MP_PASS_SCOPE) {
    8300:	68fb      	ldr	r3, [r7, #12]
    8302:	795b      	ldrb	r3, [r3, #5]
    8304:	2b01      	cmp	r3, #1
    8306:	d10b      	bne.n	8320 <compile_comprehension+0x78>
        // create a new scope for this comprehension
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    8308:	68ba      	ldr	r2, [r7, #8]
    830a:	68fb      	ldr	r3, [r7, #12]
    830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    830e:	7e5b      	ldrb	r3, [r3, #25]
    8310:	6879      	ldr	r1, [r7, #4]
    8312:	68f8      	ldr	r0, [r7, #12]
    8314:	f7fc fd7a 	bl	4e0c <scope_new_and_link>
    8318:	61b8      	str	r0, [r7, #24]
        // store the comprehension scope so the compiling function (this one) can use it at each pass
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    831a:	69ba      	ldr	r2, [r7, #24]
    831c:	69fb      	ldr	r3, [r7, #28]
    831e:	615a      	str	r2, [r3, #20]
    }

    // get the scope for this comprehension
    scope_t *this_scope = (scope_t*)pns_comp_for->nodes[3];
    8320:	69fb      	ldr	r3, [r7, #28]
    8322:	695b      	ldr	r3, [r3, #20]
    8324:	617b      	str	r3, [r7, #20]

    // compile the comprehension
    close_over_variables_etc(comp, this_scope, 0, 0);
    8326:	2300      	movs	r3, #0
    8328:	2200      	movs	r2, #0
    832a:	6979      	ldr	r1, [r7, #20]
    832c:	68f8      	ldr	r0, [r7, #12]
    832e:	f7fd fa53 	bl	57d8 <close_over_variables_etc>

    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    8332:	69fb      	ldr	r3, [r7, #28]
    8334:	68db      	ldr	r3, [r3, #12]
    8336:	4619      	mov	r1, r3
    8338:	68f8      	ldr	r0, [r7, #12]
    833a:	f000 fb02 	bl	8942 <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    833e:	687b      	ldr	r3, [r7, #4]
    8340:	2b06      	cmp	r3, #6
    8342:	d105      	bne.n	8350 <compile_comprehension+0xa8>
        EMIT_ARG(get_iter, false);
    8344:	68fb      	ldr	r3, [r7, #12]
    8346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8348:	2100      	movs	r1, #0
    834a:	4618      	mov	r0, r3
    834c:	f002 faa7 	bl	a89e <mp_emit_bc_get_iter>
    }
    EMIT_ARG(call_function, 1, 0, 0);
    8350:	68fb      	ldr	r3, [r7, #12]
    8352:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8354:	2300      	movs	r3, #0
    8356:	2200      	movs	r2, #0
    8358:	2101      	movs	r1, #1
    835a:	f002 fc79 	bl	ac50 <mp_emit_bc_call_function>
}
    835e:	bf00      	nop
    8360:	3720      	adds	r7, #32
    8362:	46bd      	mov	sp, r7
    8364:	bd80      	pop	{r7, pc}
    8366:	bf00      	nop
    8368:	0002012c 	.word	0x0002012c
    836c:	00020728 	.word	0x00020728
    8370:	0001f9e4 	.word	0x0001f9e4
    8374:	00020158 	.word	0x00020158

00008378 <compile_atom_paren>:

STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8378:	b580      	push	{r7, lr}
    837a:	b084      	sub	sp, #16
    837c:	af00      	add	r7, sp, #0
    837e:	6078      	str	r0, [r7, #4]
    8380:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8382:	683b      	ldr	r3, [r7, #0]
    8384:	689b      	ldr	r3, [r3, #8]
    8386:	2b00      	cmp	r3, #0
    8388:	d105      	bne.n	8396 <compile_atom_paren+0x1e>
        // an empty tuple
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    838a:	2200      	movs	r2, #0
    838c:	2100      	movs	r1, #0
    838e:	6878      	ldr	r0, [r7, #4]
    8390:	f7fc fe30 	bl	4ff4 <c_tuple>
            // tuple with 2 items
            tuple_with_2_items:
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
        }
    }
}
    8394:	e068      	b.n	8468 <compile_atom_paren+0xf0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    8396:	683b      	ldr	r3, [r7, #0]
    8398:	689b      	ldr	r3, [r3, #8]
    839a:	2b00      	cmp	r3, #0
    839c:	d00b      	beq.n	83b6 <compile_atom_paren+0x3e>
    839e:	683b      	ldr	r3, [r7, #0]
    83a0:	689b      	ldr	r3, [r3, #8]
    83a2:	f003 0303 	and.w	r3, r3, #3
    83a6:	2b00      	cmp	r3, #0
    83a8:	d105      	bne.n	83b6 <compile_atom_paren+0x3e>
    83aa:	683b      	ldr	r3, [r7, #0]
    83ac:	689b      	ldr	r3, [r3, #8]
    83ae:	685b      	ldr	r3, [r3, #4]
    83b0:	b2db      	uxtb	r3, r3
    83b2:	2b8a      	cmp	r3, #138	; 0x8a
    83b4:	d006      	beq.n	83c4 <compile_atom_paren+0x4c>
    83b6:	4b2e      	ldr	r3, [pc, #184]	; (8470 <compile_atom_paren+0xf8>)
    83b8:	4a2e      	ldr	r2, [pc, #184]	; (8474 <compile_atom_paren+0xfc>)
    83ba:	f640 114e 	movw	r1, #2382	; 0x94e
    83be:	482e      	ldr	r0, [pc, #184]	; (8478 <compile_atom_paren+0x100>)
    83c0:	f012 ff10 	bl	1b1e4 <__assert_func>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    83c4:	683b      	ldr	r3, [r7, #0]
    83c6:	689b      	ldr	r3, [r3, #8]
    83c8:	603b      	str	r3, [r7, #0]
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    83ca:	683b      	ldr	r3, [r7, #0]
    83cc:	68db      	ldr	r3, [r3, #12]
    83ce:	2b00      	cmp	r3, #0
    83d0:	d106      	bne.n	83e0 <compile_atom_paren+0x68>
    83d2:	4b2a      	ldr	r3, [pc, #168]	; (847c <compile_atom_paren+0x104>)
    83d4:	4a27      	ldr	r2, [pc, #156]	; (8474 <compile_atom_paren+0xfc>)
    83d6:	f44f 6115 	mov.w	r1, #2384	; 0x950
    83da:	4827      	ldr	r0, [pc, #156]	; (8478 <compile_atom_paren+0x100>)
    83dc:	f012 ff02 	bl	1b1e4 <__assert_func>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    83e0:	683b      	ldr	r3, [r7, #0]
    83e2:	68db      	ldr	r3, [r3, #12]
    83e4:	2b00      	cmp	r3, #0
    83e6:	d039      	beq.n	845c <compile_atom_paren+0xe4>
    83e8:	683b      	ldr	r3, [r7, #0]
    83ea:	68db      	ldr	r3, [r3, #12]
    83ec:	f003 0303 	and.w	r3, r3, #3
    83f0:	2b00      	cmp	r3, #0
    83f2:	d133      	bne.n	845c <compile_atom_paren+0xe4>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    83f4:	683b      	ldr	r3, [r7, #0]
    83f6:	68db      	ldr	r3, [r3, #12]
    83f8:	60fb      	str	r3, [r7, #12]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    83fa:	68fb      	ldr	r3, [r7, #12]
    83fc:	685b      	ldr	r3, [r3, #4]
    83fe:	b2db      	uxtb	r3, r3
    8400:	2b8d      	cmp	r3, #141	; 0x8d
    8402:	d112      	bne.n	842a <compile_atom_paren+0xb2>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    8404:	68fb      	ldr	r3, [r7, #12]
    8406:	689b      	ldr	r3, [r3, #8]
    8408:	2b00      	cmp	r3, #0
    840a:	d006      	beq.n	841a <compile_atom_paren+0xa2>
    840c:	4b1c      	ldr	r3, [pc, #112]	; (8480 <compile_atom_paren+0x108>)
    840e:	4a19      	ldr	r2, [pc, #100]	; (8474 <compile_atom_paren+0xfc>)
    8410:	f640 1155 	movw	r1, #2389	; 0x955
    8414:	4818      	ldr	r0, [pc, #96]	; (8478 <compile_atom_paren+0x100>)
    8416:	f012 fee5 	bl	1b1e4 <__assert_func>
                c_tuple(comp, pns->nodes[0], NULL);
    841a:	683b      	ldr	r3, [r7, #0]
    841c:	689b      	ldr	r3, [r3, #8]
    841e:	2200      	movs	r2, #0
    8420:	4619      	mov	r1, r3
    8422:	6878      	ldr	r0, [r7, #4]
    8424:	f7fc fde6 	bl	4ff4 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8428:	e01e      	b.n	8468 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    842a:	68fb      	ldr	r3, [r7, #12]
    842c:	685b      	ldr	r3, [r3, #4]
    842e:	b2db      	uxtb	r3, r3
    8430:	2b8e      	cmp	r3, #142	; 0x8e
    8432:	d107      	bne.n	8444 <compile_atom_paren+0xcc>
                c_tuple(comp, pns->nodes[0], pns2);
    8434:	683b      	ldr	r3, [r7, #0]
    8436:	689b      	ldr	r3, [r3, #8]
    8438:	68fa      	ldr	r2, [r7, #12]
    843a:	4619      	mov	r1, r3
    843c:	6878      	ldr	r0, [r7, #4]
    843e:	f7fc fdd9 	bl	4ff4 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8442:	e011      	b.n	8468 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    8444:	68fb      	ldr	r3, [r7, #12]
    8446:	685b      	ldr	r3, [r3, #4]
    8448:	b2db      	uxtb	r3, r3
    844a:	2b9f      	cmp	r3, #159	; 0x9f
    844c:	d105      	bne.n	845a <compile_atom_paren+0xe2>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    844e:	2206      	movs	r2, #6
    8450:	6839      	ldr	r1, [r7, #0]
    8452:	6878      	ldr	r0, [r7, #4]
    8454:	f7ff ff28 	bl	82a8 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8458:	e006      	b.n	8468 <compile_atom_paren+0xf0>
                goto tuple_with_2_items;
    845a:	bf00      	nop
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    845c:	683a      	ldr	r2, [r7, #0]
    845e:	2100      	movs	r1, #0
    8460:	6878      	ldr	r0, [r7, #4]
    8462:	f7fc fdc7 	bl	4ff4 <c_tuple>
}
    8466:	e7ff      	b.n	8468 <compile_atom_paren+0xf0>
    8468:	bf00      	nop
    846a:	3710      	adds	r7, #16
    846c:	46bd      	mov	sp, r7
    846e:	bd80      	pop	{r7, pc}
    8470:	0001f9f8 	.word	0x0001f9f8
    8474:	00020740 	.word	0x00020740
    8478:	0001f9e4 	.word	0x0001f9e4
    847c:	00020194 	.word	0x00020194
    8480:	0001fadc 	.word	0x0001fadc

00008484 <compile_atom_bracket>:

STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8484:	b580      	push	{r7, lr}
    8486:	b084      	sub	sp, #16
    8488:	af00      	add	r7, sp, #0
    848a:	6078      	str	r0, [r7, #4]
    848c:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    848e:	683b      	ldr	r3, [r7, #0]
    8490:	689b      	ldr	r3, [r3, #8]
    8492:	2b00      	cmp	r3, #0
    8494:	d107      	bne.n	84a6 <compile_atom_bracket+0x22>
        // empty list
        EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    8496:	687b      	ldr	r3, [r7, #4]
    8498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    849a:	2201      	movs	r2, #1
    849c:	2100      	movs	r1, #0
    849e:	4618      	mov	r0, r3
    84a0:	f002 faa1 	bl	a9e6 <mp_emit_bc_build>
    } else {
        // list with 1 item
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    }
}
    84a4:	e086      	b.n	85b4 <compile_atom_bracket+0x130>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    84a6:	683b      	ldr	r3, [r7, #0]
    84a8:	689b      	ldr	r3, [r3, #8]
    84aa:	2b00      	cmp	r3, #0
    84ac:	d074      	beq.n	8598 <compile_atom_bracket+0x114>
    84ae:	683b      	ldr	r3, [r7, #0]
    84b0:	689b      	ldr	r3, [r3, #8]
    84b2:	f003 0303 	and.w	r3, r3, #3
    84b6:	2b00      	cmp	r3, #0
    84b8:	d16e      	bne.n	8598 <compile_atom_bracket+0x114>
    84ba:	683b      	ldr	r3, [r7, #0]
    84bc:	689b      	ldr	r3, [r3, #8]
    84be:	685b      	ldr	r3, [r3, #4]
    84c0:	b2db      	uxtb	r3, r3
    84c2:	2b8a      	cmp	r3, #138	; 0x8a
    84c4:	d168      	bne.n	8598 <compile_atom_bracket+0x114>
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[0];
    84c6:	683b      	ldr	r3, [r7, #0]
    84c8:	689b      	ldr	r3, [r3, #8]
    84ca:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    84cc:	68fb      	ldr	r3, [r7, #12]
    84ce:	68db      	ldr	r3, [r3, #12]
    84d0:	2b00      	cmp	r3, #0
    84d2:	d04c      	beq.n	856e <compile_atom_bracket+0xea>
    84d4:	68fb      	ldr	r3, [r7, #12]
    84d6:	68db      	ldr	r3, [r3, #12]
    84d8:	f003 0303 	and.w	r3, r3, #3
    84dc:	2b00      	cmp	r3, #0
    84de:	d146      	bne.n	856e <compile_atom_bracket+0xea>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns2->nodes[1];
    84e0:	68fb      	ldr	r3, [r7, #12]
    84e2:	68db      	ldr	r3, [r3, #12]
    84e4:	60bb      	str	r3, [r7, #8]
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    84e6:	68bb      	ldr	r3, [r7, #8]
    84e8:	685b      	ldr	r3, [r3, #4]
    84ea:	b2db      	uxtb	r3, r3
    84ec:	2b8d      	cmp	r3, #141	; 0x8d
    84ee:	d118      	bne.n	8522 <compile_atom_bracket+0x9e>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    84f0:	68bb      	ldr	r3, [r7, #8]
    84f2:	689b      	ldr	r3, [r3, #8]
    84f4:	2b00      	cmp	r3, #0
    84f6:	d006      	beq.n	8506 <compile_atom_bracket+0x82>
    84f8:	4b30      	ldr	r3, [pc, #192]	; (85bc <compile_atom_bracket+0x138>)
    84fa:	4a31      	ldr	r2, [pc, #196]	; (85c0 <compile_atom_bracket+0x13c>)
    84fc:	f640 1173 	movw	r1, #2419	; 0x973
    8500:	4830      	ldr	r0, [pc, #192]	; (85c4 <compile_atom_bracket+0x140>)
    8502:	f012 fe6f 	bl	1b1e4 <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    8506:	68fb      	ldr	r3, [r7, #12]
    8508:	689b      	ldr	r3, [r3, #8]
    850a:	4619      	mov	r1, r3
    850c:	6878      	ldr	r0, [r7, #4]
    850e:	f000 fa18 	bl	8942 <compile_node>
                EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    8512:	687b      	ldr	r3, [r7, #4]
    8514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8516:	2201      	movs	r2, #1
    8518:	2101      	movs	r1, #1
    851a:	4618      	mov	r0, r3
    851c:	f002 fa63 	bl	a9e6 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8520:	e039      	b.n	8596 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    8522:	68bb      	ldr	r3, [r7, #8]
    8524:	685b      	ldr	r3, [r3, #4]
    8526:	b2db      	uxtb	r3, r3
    8528:	2b8e      	cmp	r3, #142	; 0x8e
    852a:	d114      	bne.n	8556 <compile_atom_bracket+0xd2>
                compile_node(comp, pns2->nodes[0]);
    852c:	68fb      	ldr	r3, [r7, #12]
    852e:	689b      	ldr	r3, [r3, #8]
    8530:	4619      	mov	r1, r3
    8532:	6878      	ldr	r0, [r7, #4]
    8534:	f000 fa05 	bl	8942 <compile_node>
                compile_generic_all_nodes(comp, pns3);
    8538:	68b9      	ldr	r1, [r7, #8]
    853a:	6878      	ldr	r0, [r7, #4]
    853c:	f7fc fcd2 	bl	4ee4 <compile_generic_all_nodes>
                EMIT_ARG(build, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3), MP_EMIT_BUILD_LIST);
    8540:	687b      	ldr	r3, [r7, #4]
    8542:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8544:	68bb      	ldr	r3, [r7, #8]
    8546:	685b      	ldr	r3, [r3, #4]
    8548:	0a1b      	lsrs	r3, r3, #8
    854a:	3301      	adds	r3, #1
    854c:	2201      	movs	r2, #1
    854e:	4619      	mov	r1, r3
    8550:	f002 fa49 	bl	a9e6 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8554:	e01f      	b.n	8596 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    8556:	68bb      	ldr	r3, [r7, #8]
    8558:	685b      	ldr	r3, [r3, #4]
    855a:	b2db      	uxtb	r3, r3
    855c:	2b9f      	cmp	r3, #159	; 0x9f
    855e:	d105      	bne.n	856c <compile_atom_bracket+0xe8>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    8560:	2203      	movs	r2, #3
    8562:	68f9      	ldr	r1, [r7, #12]
    8564:	6878      	ldr	r0, [r7, #4]
    8566:	f7ff fe9f 	bl	82a8 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    856a:	e014      	b.n	8596 <compile_atom_bracket+0x112>
                goto list_with_2_items;
    856c:	bf00      	nop
            compile_node(comp, pns2->nodes[0]);
    856e:	68fb      	ldr	r3, [r7, #12]
    8570:	689b      	ldr	r3, [r3, #8]
    8572:	4619      	mov	r1, r3
    8574:	6878      	ldr	r0, [r7, #4]
    8576:	f000 f9e4 	bl	8942 <compile_node>
            compile_node(comp, pns2->nodes[1]);
    857a:	68fb      	ldr	r3, [r7, #12]
    857c:	68db      	ldr	r3, [r3, #12]
    857e:	4619      	mov	r1, r3
    8580:	6878      	ldr	r0, [r7, #4]
    8582:	f000 f9de 	bl	8942 <compile_node>
            EMIT_ARG(build, 2, MP_EMIT_BUILD_LIST);
    8586:	687b      	ldr	r3, [r7, #4]
    8588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    858a:	2201      	movs	r2, #1
    858c:	2102      	movs	r1, #2
    858e:	4618      	mov	r0, r3
    8590:	f002 fa29 	bl	a9e6 <mp_emit_bc_build>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    8594:	e00e      	b.n	85b4 <compile_atom_bracket+0x130>
    8596:	e00d      	b.n	85b4 <compile_atom_bracket+0x130>
        compile_node(comp, pns->nodes[0]);
    8598:	683b      	ldr	r3, [r7, #0]
    859a:	689b      	ldr	r3, [r3, #8]
    859c:	4619      	mov	r1, r3
    859e:	6878      	ldr	r0, [r7, #4]
    85a0:	f000 f9cf 	bl	8942 <compile_node>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    85a4:	687b      	ldr	r3, [r7, #4]
    85a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85a8:	2201      	movs	r2, #1
    85aa:	2101      	movs	r1, #1
    85ac:	4618      	mov	r0, r3
    85ae:	f002 fa1a 	bl	a9e6 <mp_emit_bc_build>
}
    85b2:	e7ff      	b.n	85b4 <compile_atom_bracket+0x130>
    85b4:	bf00      	nop
    85b6:	3710      	adds	r7, #16
    85b8:	46bd      	mov	sp, r7
    85ba:	bd80      	pop	{r7, pc}
    85bc:	000201bc 	.word	0x000201bc
    85c0:	00020754 	.word	0x00020754
    85c4:	0001f9e4 	.word	0x0001f9e4

000085c8 <compile_atom_brace>:

STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    85c8:	b580      	push	{r7, lr}
    85ca:	b08a      	sub	sp, #40	; 0x28
    85cc:	af00      	add	r7, sp, #0
    85ce:	6078      	str	r0, [r7, #4]
    85d0:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn = pns->nodes[0];
    85d2:	683b      	ldr	r3, [r7, #0]
    85d4:	689b      	ldr	r3, [r3, #8]
    85d6:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    85d8:	6a3b      	ldr	r3, [r7, #32]
    85da:	2b00      	cmp	r3, #0
    85dc:	d107      	bne.n	85ee <compile_atom_brace+0x26>
        // empty dict
        EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    85de:	687b      	ldr	r3, [r7, #4]
    85e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85e2:	2203      	movs	r2, #3
    85e4:	2100      	movs	r1, #0
    85e6:	4618      	mov	r0, r3
    85e8:	f002 f9fd 	bl	a9e6 <mp_emit_bc_build>
    85ec:	e0c3      	b.n	8776 <compile_atom_brace+0x1ae>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    85ee:	6a3b      	ldr	r3, [r7, #32]
    85f0:	2b00      	cmp	r3, #0
    85f2:	f000 80b9 	beq.w	8768 <compile_atom_brace+0x1a0>
    85f6:	6a3b      	ldr	r3, [r7, #32]
    85f8:	f003 0303 	and.w	r3, r3, #3
    85fc:	2b00      	cmp	r3, #0
    85fe:	f040 80b3 	bne.w	8768 <compile_atom_brace+0x1a0>
        pns = (mp_parse_node_struct_t*)pn;
    8602:	6a3b      	ldr	r3, [r7, #32]
    8604:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8606:	683b      	ldr	r3, [r7, #0]
    8608:	685b      	ldr	r3, [r3, #4]
    860a:	b2db      	uxtb	r3, r3
    860c:	2b32      	cmp	r3, #50	; 0x32
    860e:	d110      	bne.n	8632 <compile_atom_brace+0x6a>
            // dict with one element
            EMIT_ARG(build, 1, MP_EMIT_BUILD_MAP);
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8614:	2203      	movs	r2, #3
    8616:	2101      	movs	r1, #1
    8618:	4618      	mov	r0, r3
    861a:	f002 f9e4 	bl	a9e6 <mp_emit_bc_build>
            compile_node(comp, pn);
    861e:	6a39      	ldr	r1, [r7, #32]
    8620:	6878      	ldr	r0, [r7, #4]
    8622:	f000 f98e 	bl	8942 <compile_node>
            EMIT(store_map);
    8626:	687b      	ldr	r3, [r7, #4]
    8628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    862a:	4618      	mov	r0, r3
    862c:	f002 f9fd 	bl	aa2a <mp_emit_bc_store_map>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8630:	e0a1      	b.n	8776 <compile_atom_brace+0x1ae>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    8632:	683b      	ldr	r3, [r7, #0]
    8634:	685b      	ldr	r3, [r3, #4]
    8636:	b2db      	uxtb	r3, r3
    8638:	2b92      	cmp	r3, #146	; 0x92
    863a:	f040 8094 	bne.w	8766 <compile_atom_brace+0x19e>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    863e:	683b      	ldr	r3, [r7, #0]
    8640:	68db      	ldr	r3, [r3, #12]
    8642:	2b00      	cmp	r3, #0
    8644:	d005      	beq.n	8652 <compile_atom_brace+0x8a>
    8646:	683b      	ldr	r3, [r7, #0]
    8648:	68db      	ldr	r3, [r3, #12]
    864a:	f003 0303 	and.w	r3, r3, #3
    864e:	2b00      	cmp	r3, #0
    8650:	d006      	beq.n	8660 <compile_atom_brace+0x98>
    8652:	4b4a      	ldr	r3, [pc, #296]	; (877c <compile_atom_brace+0x1b4>)
    8654:	4a4a      	ldr	r2, [pc, #296]	; (8780 <compile_atom_brace+0x1b8>)
    8656:	f640 119d 	movw	r1, #2461	; 0x99d
    865a:	484a      	ldr	r0, [pc, #296]	; (8784 <compile_atom_brace+0x1bc>)
    865c:	f012 fdc2 	bl	1b1e4 <__assert_func>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    8660:	683b      	ldr	r3, [r7, #0]
    8662:	68db      	ldr	r3, [r3, #12]
    8664:	61fb      	str	r3, [r7, #28]
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    8666:	69fb      	ldr	r3, [r7, #28]
    8668:	685b      	ldr	r3, [r3, #4]
    866a:	b2db      	uxtb	r3, r3
    866c:	2b94      	cmp	r3, #148	; 0x94
    866e:	d168      	bne.n	8742 <compile_atom_brace+0x17a>
                // dict/set with multiple elements

                // get tail elements (2nd, 3rd, ...)
                mp_parse_node_t *nodes;
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    8670:	69fb      	ldr	r3, [r7, #28]
    8672:	3308      	adds	r3, #8
    8674:	f107 0208 	add.w	r2, r7, #8
    8678:	2195      	movs	r1, #149	; 0x95
    867a:	4618      	mov	r0, r3
    867c:	f7fb fa6a 	bl	3b54 <mp_parse_node_extract_list>
    8680:	61b8      	str	r0, [r7, #24]

                // first element sets whether it's a dict or set
                bool is_dict;
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_MAP);
    8682:	687b      	ldr	r3, [r7, #4]
    8684:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8686:	69bb      	ldr	r3, [r7, #24]
    8688:	3301      	adds	r3, #1
    868a:	2203      	movs	r2, #3
    868c:	4619      	mov	r1, r3
    868e:	f002 f9aa 	bl	a9e6 <mp_emit_bc_build>
                    compile_node(comp, pns->nodes[0]);
    8692:	683b      	ldr	r3, [r7, #0]
    8694:	689b      	ldr	r3, [r3, #8]
    8696:	4619      	mov	r1, r3
    8698:	6878      	ldr	r0, [r7, #4]
    869a:	f000 f952 	bl	8942 <compile_node>
                    EMIT(store_map);
    869e:	687b      	ldr	r3, [r7, #4]
    86a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86a2:	4618      	mov	r0, r3
    86a4:	f002 f9c1 	bl	aa2a <mp_emit_bc_store_map>
                    is_dict = true;
    86a8:	2301      	movs	r3, #1
    86aa:	75fb      	strb	r3, [r7, #23]
                    compile_node(comp, pns->nodes[0]); // 1st value of set
                    is_dict = false;
                }

                // process rest of elements
                for (int i = 0; i < n; i++) {
    86ac:	2300      	movs	r3, #0
    86ae:	627b      	str	r3, [r7, #36]	; 0x24
    86b0:	e042      	b.n	8738 <compile_atom_brace+0x170>
                    mp_parse_node_t pn_i = nodes[i];
    86b2:	68ba      	ldr	r2, [r7, #8]
    86b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86b6:	009b      	lsls	r3, r3, #2
    86b8:	4413      	add	r3, r2
    86ba:	681b      	ldr	r3, [r3, #0]
    86bc:	613b      	str	r3, [r7, #16]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    86be:	693b      	ldr	r3, [r7, #16]
    86c0:	2b00      	cmp	r3, #0
    86c2:	d00b      	beq.n	86dc <compile_atom_brace+0x114>
    86c4:	693b      	ldr	r3, [r7, #16]
    86c6:	f003 0303 	and.w	r3, r3, #3
    86ca:	2b00      	cmp	r3, #0
    86cc:	d106      	bne.n	86dc <compile_atom_brace+0x114>
    86ce:	693b      	ldr	r3, [r7, #16]
    86d0:	685b      	ldr	r3, [r3, #4]
    86d2:	b2db      	uxtb	r3, r3
    86d4:	2b32      	cmp	r3, #50	; 0x32
    86d6:	d101      	bne.n	86dc <compile_atom_brace+0x114>
    86d8:	2301      	movs	r3, #1
    86da:	e000      	b.n	86de <compile_atom_brace+0x116>
    86dc:	2300      	movs	r3, #0
    86de:	73fb      	strb	r3, [r7, #15]
    86e0:	7bfb      	ldrb	r3, [r7, #15]
    86e2:	f003 0301 	and.w	r3, r3, #1
    86e6:	73fb      	strb	r3, [r7, #15]
                    compile_node(comp, pn_i);
    86e8:	6939      	ldr	r1, [r7, #16]
    86ea:	6878      	ldr	r0, [r7, #4]
    86ec:	f000 f929 	bl	8942 <compile_node>
                    if (is_dict) {
    86f0:	7dfb      	ldrb	r3, [r7, #23]
    86f2:	2b00      	cmp	r3, #0
    86f4:	d012      	beq.n	871c <compile_atom_brace+0x154>
                        if (!is_key_value) {
    86f6:	7bfb      	ldrb	r3, [r7, #15]
    86f8:	f083 0301 	eor.w	r3, r3, #1
    86fc:	b2db      	uxtb	r3, r3
    86fe:	2b00      	cmp	r3, #0
    8700:	d006      	beq.n	8710 <compile_atom_brace+0x148>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8702:	683b      	ldr	r3, [r7, #0]
    8704:	4a20      	ldr	r2, [pc, #128]	; (8788 <compile_atom_brace+0x1c0>)
    8706:	4619      	mov	r1, r3
    8708:	6878      	ldr	r0, [r7, #4]
    870a:	f7fc fb1a 	bl	4d42 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
                            }
                            return;
    870e:	e032      	b.n	8776 <compile_atom_brace+0x1ae>
                        }
                        EMIT(store_map);
    8710:	687b      	ldr	r3, [r7, #4]
    8712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8714:	4618      	mov	r0, r3
    8716:	f002 f988 	bl	aa2a <mp_emit_bc_store_map>
    871a:	e00a      	b.n	8732 <compile_atom_brace+0x16a>
                    } else {
                        if (is_key_value) {
    871c:	7bfb      	ldrb	r3, [r7, #15]
    871e:	2b00      	cmp	r3, #0
    8720:	d007      	beq.n	8732 <compile_atom_brace+0x16a>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8722:	683b      	ldr	r3, [r7, #0]
    8724:	4a18      	ldr	r2, [pc, #96]	; (8788 <compile_atom_brace+0x1c0>)
    8726:	4619      	mov	r1, r3
    8728:	6878      	ldr	r0, [r7, #4]
    872a:	f7fc fb0a 	bl	4d42 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting just a value for set");
                            }
                            return;
    872e:	bf00      	nop
    8730:	e021      	b.n	8776 <compile_atom_brace+0x1ae>
                for (int i = 0; i < n; i++) {
    8732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8734:	3301      	adds	r3, #1
    8736:	627b      	str	r3, [r7, #36]	; 0x24
    8738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    873a:	69bb      	ldr	r3, [r7, #24]
    873c:	429a      	cmp	r2, r3
    873e:	dbb8      	blt.n	86b2 <compile_atom_brace+0xea>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8740:	e019      	b.n	8776 <compile_atom_brace+0x1ae>
                if (!is_dict) {
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_SET);
                }
                #endif
            } else {
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    8742:	69fb      	ldr	r3, [r7, #28]
    8744:	685b      	ldr	r3, [r3, #4]
    8746:	b2db      	uxtb	r3, r3
    8748:	2b9f      	cmp	r3, #159	; 0x9f
    874a:	d006      	beq.n	875a <compile_atom_brace+0x192>
    874c:	4b0f      	ldr	r3, [pc, #60]	; (878c <compile_atom_brace+0x1c4>)
    874e:	4a0c      	ldr	r2, [pc, #48]	; (8780 <compile_atom_brace+0x1b8>)
    8750:	f640 11d6 	movw	r1, #2518	; 0x9d6
    8754:	480b      	ldr	r0, [pc, #44]	; (8784 <compile_atom_brace+0x1bc>)
    8756:	f012 fd45 	bl	1b1e4 <__assert_func>
                // dict/set comprehension
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary comprehension
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    875a:	2204      	movs	r2, #4
    875c:	6839      	ldr	r1, [r7, #0]
    875e:	6878      	ldr	r0, [r7, #4]
    8760:	f7ff fda2 	bl	82a8 <compile_comprehension>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8764:	e007      	b.n	8776 <compile_atom_brace+0x1ae>
                    compile_comprehension(comp, pns, SCOPE_SET_COMP);
                }
            }
        } else {
            // set with one element
            goto set_with_one_element;
    8766:	bf00      	nop
        set_with_one_element:
        #if MICROPY_PY_BUILTINS_SET
        compile_node(comp, pn);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_SET);
        #else
        assert(0);
    8768:	4b09      	ldr	r3, [pc, #36]	; (8790 <compile_atom_brace+0x1c8>)
    876a:	4a05      	ldr	r2, [pc, #20]	; (8780 <compile_atom_brace+0x1b8>)
    876c:	f640 11eb 	movw	r1, #2539	; 0x9eb
    8770:	4804      	ldr	r0, [pc, #16]	; (8784 <compile_atom_brace+0x1bc>)
    8772:	f012 fd37 	bl	1b1e4 <__assert_func>
        #endif
    }
}
    8776:	3728      	adds	r7, #40	; 0x28
    8778:	46bd      	mov	sp, r7
    877a:	bd80      	pop	{r7, pc}
    877c:	0001ff50 	.word	0x0001ff50
    8780:	0002076c 	.word	0x0002076c
    8784:	0001f9e4 	.word	0x0001f9e4
    8788:	000201e4 	.word	0x000201e4
    878c:	000201f4 	.word	0x000201f4
    8790:	00020224 	.word	0x00020224

00008794 <compile_trailer_paren>:

STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8794:	b580      	push	{r7, lr}
    8796:	b082      	sub	sp, #8
    8798:	af00      	add	r7, sp, #0
    879a:	6078      	str	r0, [r7, #4]
    879c:	6039      	str	r1, [r7, #0]
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    879e:	683b      	ldr	r3, [r7, #0]
    87a0:	6899      	ldr	r1, [r3, #8]
    87a2:	2300      	movs	r3, #0
    87a4:	2200      	movs	r2, #0
    87a6:	6878      	ldr	r0, [r7, #4]
    87a8:	f7ff fc6b 	bl	8082 <compile_trailer_paren_helper>
}
    87ac:	bf00      	nop
    87ae:	3708      	adds	r7, #8
    87b0:	46bd      	mov	sp, r7
    87b2:	bd80      	pop	{r7, pc}

000087b4 <compile_trailer_bracket>:

STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    87b4:	b580      	push	{r7, lr}
    87b6:	b082      	sub	sp, #8
    87b8:	af00      	add	r7, sp, #0
    87ba:	6078      	str	r0, [r7, #4]
    87bc:	6039      	str	r1, [r7, #0]
    // object who's index we want is on top of stack
    compile_node(comp, pns->nodes[0]); // the index
    87be:	683b      	ldr	r3, [r7, #0]
    87c0:	689b      	ldr	r3, [r3, #8]
    87c2:	4619      	mov	r1, r3
    87c4:	6878      	ldr	r0, [r7, #4]
    87c6:	f000 f8bc 	bl	8942 <compile_node>
    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87ce:	2100      	movs	r1, #0
    87d0:	4618      	mov	r0, r3
    87d2:	f001 fe6f 	bl	a4b4 <mp_emit_bc_subscr>
}
    87d6:	bf00      	nop
    87d8:	3708      	adds	r7, #8
    87da:	46bd      	mov	sp, r7
    87dc:	bd80      	pop	{r7, pc}

000087de <compile_trailer_period>:

STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    87de:	b580      	push	{r7, lr}
    87e0:	b082      	sub	sp, #8
    87e2:	af00      	add	r7, sp, #0
    87e4:	6078      	str	r0, [r7, #4]
    87e6:	6039      	str	r1, [r7, #0]
    // object who's attribute we want is on top of stack
    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]), MP_EMIT_ATTR_LOAD); // attribute to get
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
    87ec:	683b      	ldr	r3, [r7, #0]
    87ee:	689b      	ldr	r3, [r3, #8]
    87f0:	091b      	lsrs	r3, r3, #4
    87f2:	2200      	movs	r2, #0
    87f4:	4619      	mov	r1, r3
    87f6:	f001 fe85 	bl	a504 <mp_emit_bc_attr>
}
    87fa:	bf00      	nop
    87fc:	3708      	adds	r7, #8
    87fe:	46bd      	mov	sp, r7
    8800:	bd80      	pop	{r7, pc}

00008802 <compile_dictorsetmaker_item>:
        EMIT_ARG(build, 2, MP_EMIT_BUILD_SLICE);
    }
}
#endif // MICROPY_PY_BUILTINS_SLICE

STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8802:	b580      	push	{r7, lr}
    8804:	b082      	sub	sp, #8
    8806:	af00      	add	r7, sp, #0
    8808:	6078      	str	r0, [r7, #4]
    880a:	6039      	str	r1, [r7, #0]
    // if this is called then we are compiling a dict key:value pair
    compile_node(comp, pns->nodes[1]); // value
    880c:	683b      	ldr	r3, [r7, #0]
    880e:	68db      	ldr	r3, [r3, #12]
    8810:	4619      	mov	r1, r3
    8812:	6878      	ldr	r0, [r7, #4]
    8814:	f000 f895 	bl	8942 <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    8818:	683b      	ldr	r3, [r7, #0]
    881a:	689b      	ldr	r3, [r3, #8]
    881c:	4619      	mov	r1, r3
    881e:	6878      	ldr	r0, [r7, #4]
    8820:	f000 f88f 	bl	8942 <compile_node>
}
    8824:	bf00      	nop
    8826:	3708      	adds	r7, #8
    8828:	46bd      	mov	sp, r7
    882a:	bd80      	pop	{r7, pc}

0000882c <compile_classdef>:

STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    882c:	b580      	push	{r7, lr}
    882e:	b084      	sub	sp, #16
    8830:	af00      	add	r7, sp, #0
    8832:	6078      	str	r0, [r7, #4]
    8834:	6039      	str	r1, [r7, #0]
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    8836:	687b      	ldr	r3, [r7, #4]
    8838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    883a:	7e5b      	ldrb	r3, [r3, #25]
    883c:	461a      	mov	r2, r3
    883e:	6839      	ldr	r1, [r7, #0]
    8840:	6878      	ldr	r0, [r7, #4]
    8842:	f7fd f993 	bl	5b6c <compile_classdef_helper>
    8846:	60f8      	str	r0, [r7, #12]
    // store class object into class name
    compile_store_id(comp, cname);
    8848:	68f9      	ldr	r1, [r7, #12]
    884a:	6878      	ldr	r0, [r7, #4]
    884c:	f7fc fb96 	bl	4f7c <compile_store_id>
}
    8850:	bf00      	nop
    8852:	3710      	adds	r7, #16
    8854:	46bd      	mov	sp, r7
    8856:	bd80      	pop	{r7, pc}

00008858 <compile_yield_expr>:

STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8858:	b580      	push	{r7, lr}
    885a:	b082      	sub	sp, #8
    885c:	af00      	add	r7, sp, #0
    885e:	6078      	str	r0, [r7, #4]
    8860:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    8862:	687b      	ldr	r3, [r7, #4]
    8864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8866:	681b      	ldr	r3, [r3, #0]
    8868:	2b07      	cmp	r3, #7
    886a:	d00b      	beq.n	8884 <compile_yield_expr+0x2c>
    886c:	687b      	ldr	r3, [r7, #4]
    886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8870:	681b      	ldr	r3, [r3, #0]
    8872:	2b02      	cmp	r3, #2
    8874:	d006      	beq.n	8884 <compile_yield_expr+0x2c>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    8876:	683b      	ldr	r3, [r7, #0]
    8878:	4a21      	ldr	r2, [pc, #132]	; (8900 <compile_yield_expr+0xa8>)
    887a:	4619      	mov	r1, r3
    887c:	6878      	ldr	r0, [r7, #4]
    887e:	f7fc fa60 	bl	4d42 <compile_syntax_error>
        return;
    8882:	e039      	b.n	88f8 <compile_yield_expr+0xa0>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8884:	683b      	ldr	r3, [r7, #0]
    8886:	689b      	ldr	r3, [r3, #8]
    8888:	2b00      	cmp	r3, #0
    888a:	d10c      	bne.n	88a6 <compile_yield_expr+0x4e>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    888c:	687b      	ldr	r3, [r7, #4]
    888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8890:	210e      	movs	r1, #14
    8892:	4618      	mov	r0, r3
    8894:	f001 fd10 	bl	a2b8 <mp_emit_bc_load_const_tok>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8898:	687b      	ldr	r3, [r7, #4]
    889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    889c:	2100      	movs	r1, #0
    889e:	4618      	mov	r0, r3
    88a0:	f002 fa3c 	bl	ad1c <mp_emit_bc_yield>
    88a4:	e028      	b.n	88f8 <compile_yield_expr+0xa0>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    88a6:	683b      	ldr	r3, [r7, #0]
    88a8:	689b      	ldr	r3, [r3, #8]
    88aa:	2b00      	cmp	r3, #0
    88ac:	d018      	beq.n	88e0 <compile_yield_expr+0x88>
    88ae:	683b      	ldr	r3, [r7, #0]
    88b0:	689b      	ldr	r3, [r3, #8]
    88b2:	f003 0303 	and.w	r3, r3, #3
    88b6:	2b00      	cmp	r3, #0
    88b8:	d112      	bne.n	88e0 <compile_yield_expr+0x88>
    88ba:	683b      	ldr	r3, [r7, #0]
    88bc:	689b      	ldr	r3, [r3, #8]
    88be:	685b      	ldr	r3, [r3, #4]
    88c0:	b2db      	uxtb	r3, r3
    88c2:	2ba2      	cmp	r3, #162	; 0xa2
    88c4:	d10c      	bne.n	88e0 <compile_yield_expr+0x88>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    88c6:	683b      	ldr	r3, [r7, #0]
    88c8:	689b      	ldr	r3, [r3, #8]
    88ca:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    88cc:	683b      	ldr	r3, [r7, #0]
    88ce:	689b      	ldr	r3, [r3, #8]
    88d0:	4619      	mov	r1, r3
    88d2:	6878      	ldr	r0, [r7, #4]
    88d4:	f000 f835 	bl	8942 <compile_node>
        compile_yield_from(comp);
    88d8:	6878      	ldr	r0, [r7, #4]
    88da:	f7fe fe9b 	bl	7614 <compile_yield_from>
    88de:	e00b      	b.n	88f8 <compile_yield_expr+0xa0>
    } else {
        compile_node(comp, pns->nodes[0]);
    88e0:	683b      	ldr	r3, [r7, #0]
    88e2:	689b      	ldr	r3, [r3, #8]
    88e4:	4619      	mov	r1, r3
    88e6:	6878      	ldr	r0, [r7, #4]
    88e8:	f000 f82b 	bl	8942 <compile_node>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    88ec:	687b      	ldr	r3, [r7, #4]
    88ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88f0:	2100      	movs	r1, #0
    88f2:	4618      	mov	r0, r3
    88f4:	f002 fa12 	bl	ad1c <mp_emit_bc_yield>
    }
}
    88f8:	3708      	adds	r7, #8
    88fa:	46bd      	mov	sp, r7
    88fc:	bd80      	pop	{r7, pc}
    88fe:	bf00      	nop
    8900:	00020228 	.word	0x00020228

00008904 <get_const_object>:
    compile_atom_expr_normal(comp, pns);
    compile_yield_from(comp);
}
#endif

STATIC mp_obj_t get_const_object(mp_parse_node_struct_t *pns) {
    8904:	b480      	push	{r7}
    8906:	b083      	sub	sp, #12
    8908:	af00      	add	r7, sp, #0
    890a:	6078      	str	r0, [r7, #4]
    #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    890c:	687b      	ldr	r3, [r7, #4]
    890e:	689b      	ldr	r3, [r3, #8]
    #endif
}
    8910:	4618      	mov	r0, r3
    8912:	370c      	adds	r7, #12
    8914:	46bd      	mov	sp, r7
    8916:	f85d 7b04 	ldr.w	r7, [sp], #4
    891a:	4770      	bx	lr

0000891c <compile_const_object>:

STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    891c:	b590      	push	{r4, r7, lr}
    891e:	b083      	sub	sp, #12
    8920:	af00      	add	r7, sp, #0
    8922:	6078      	str	r0, [r7, #4]
    8924:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_obj, get_const_object(pns));
    8926:	687b      	ldr	r3, [r7, #4]
    8928:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    892a:	6838      	ldr	r0, [r7, #0]
    892c:	f7ff ffea 	bl	8904 <get_const_object>
    8930:	4603      	mov	r3, r0
    8932:	4619      	mov	r1, r3
    8934:	4620      	mov	r0, r4
    8936:	f001 fd2f 	bl	a398 <mp_emit_bc_load_const_obj>
}
    893a:	bf00      	nop
    893c:	370c      	adds	r7, #12
    893e:	46bd      	mov	sp, r7
    8940:	bd90      	pop	{r4, r7, pc}

00008942 <compile_node>:
#undef DEF_RULE
#undef DEF_RULE_NC
    compile_const_object,
};

STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    8942:	b590      	push	{r4, r7, lr}
    8944:	b089      	sub	sp, #36	; 0x24
    8946:	af00      	add	r7, sp, #0
    8948:	6078      	str	r0, [r7, #4]
    894a:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    894c:	683b      	ldr	r3, [r7, #0]
    894e:	2b00      	cmp	r3, #0
    8950:	d078      	beq.n	8a44 <compile_node+0x102>
        // pass
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    8952:	683b      	ldr	r3, [r7, #0]
    8954:	f003 0301 	and.w	r3, r3, #1
    8958:	2b00      	cmp	r3, #0
    895a:	d009      	beq.n	8970 <compile_node+0x2e>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    895c:	683b      	ldr	r3, [r7, #0]
    895e:	105b      	asrs	r3, r3, #1
    8960:	61fb      	str	r3, [r7, #28]
            } else {
                EMIT_ARG(load_const_obj, mp_obj_new_int_from_ll(arg));
            }
        }
        #else
        EMIT_ARG(load_const_small_int, arg);
    8962:	687b      	ldr	r3, [r7, #4]
    8964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8966:	69f9      	ldr	r1, [r7, #28]
    8968:	4618      	mov	r0, r3
    896a:	f001 fce1 	bl	a330 <mp_emit_bc_load_const_small_int>
        EMIT_ARG(set_source_line, pns->source_line);
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
        f(comp, pns);
    }
}
    896e:	e069      	b.n	8a44 <compile_node+0x102>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    8970:	683b      	ldr	r3, [r7, #0]
    8972:	f003 0303 	and.w	r3, r3, #3
    8976:	2b00      	cmp	r3, #0
    8978:	d041      	beq.n	89fe <compile_node+0xbc>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    897a:	683b      	ldr	r3, [r7, #0]
    897c:	091b      	lsrs	r3, r3, #4
    897e:	61bb      	str	r3, [r7, #24]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    8980:	683b      	ldr	r3, [r7, #0]
    8982:	f003 030f 	and.w	r3, r3, #15
    8986:	2b06      	cmp	r3, #6
    8988:	d008      	beq.n	899c <compile_node+0x5a>
    898a:	2b0a      	cmp	r3, #10
    898c:	d00d      	beq.n	89aa <compile_node+0x68>
    898e:	2b02      	cmp	r3, #2
    8990:	d12a      	bne.n	89e8 <compile_node+0xa6>
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    8992:	69b9      	ldr	r1, [r7, #24]
    8994:	6878      	ldr	r0, [r7, #4]
    8996:	f7fc fad2 	bl	4f3e <compile_load_id>
    899a:	e053      	b.n	8a44 <compile_node+0x102>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    899c:	687b      	ldr	r3, [r7, #4]
    899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89a0:	69b9      	ldr	r1, [r7, #24]
    89a2:	4618      	mov	r0, r3
    89a4:	f001 fce6 	bl	a374 <mp_emit_bc_load_const_str>
    89a8:	e04c      	b.n	8a44 <compile_node+0x102>
                if (comp->pass != MP_PASS_EMIT) {
    89aa:	687b      	ldr	r3, [r7, #4]
    89ac:	795b      	ldrb	r3, [r3, #5]
    89ae:	2b04      	cmp	r3, #4
    89b0:	d006      	beq.n	89c0 <compile_node+0x7e>
                    EMIT_ARG(load_const_obj, mp_const_none);
    89b2:	687b      	ldr	r3, [r7, #4]
    89b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89b6:	4925      	ldr	r1, [pc, #148]	; (8a4c <compile_node+0x10a>)
    89b8:	4618      	mov	r0, r3
    89ba:	f001 fced 	bl	a398 <mp_emit_bc_load_const_obj>
                break;
    89be:	e041      	b.n	8a44 <compile_node+0x102>
                    const byte *data = qstr_data(arg, &len);
    89c0:	f107 0308 	add.w	r3, r7, #8
    89c4:	4619      	mov	r1, r3
    89c6:	69b8      	ldr	r0, [r7, #24]
    89c8:	f7f8 fc20 	bl	120c <qstr_data>
    89cc:	6178      	str	r0, [r7, #20]
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    89d2:	68bb      	ldr	r3, [r7, #8]
    89d4:	4619      	mov	r1, r3
    89d6:	6978      	ldr	r0, [r7, #20]
    89d8:	f00c fb85 	bl	150e6 <mp_obj_new_bytes>
    89dc:	4603      	mov	r3, r0
    89de:	4619      	mov	r1, r3
    89e0:	4620      	mov	r0, r4
    89e2:	f001 fcd9 	bl	a398 <mp_emit_bc_load_const_obj>
                break;
    89e6:	e02d      	b.n	8a44 <compile_node+0x102>
                if (arg == MP_TOKEN_NEWLINE) {
    89e8:	69bb      	ldr	r3, [r7, #24]
    89ea:	2b04      	cmp	r3, #4
    89ec:	d029      	beq.n	8a42 <compile_node+0x100>
                  EMIT_ARG(load_const_tok, arg);
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89f2:	69b9      	ldr	r1, [r7, #24]
    89f4:	4618      	mov	r0, r3
    89f6:	f001 fc5f 	bl	a2b8 <mp_emit_bc_load_const_tok>
                break;
    89fa:	bf00      	nop
    89fc:	e021      	b.n	8a42 <compile_node+0x100>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    89fe:	683b      	ldr	r3, [r7, #0]
    8a00:	613b      	str	r3, [r7, #16]
        EMIT_ARG(set_source_line, pns->source_line);
    8a02:	687b      	ldr	r3, [r7, #4]
    8a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8a06:	693b      	ldr	r3, [r7, #16]
    8a08:	681b      	ldr	r3, [r3, #0]
    8a0a:	4619      	mov	r1, r3
    8a0c:	4610      	mov	r0, r2
    8a0e:	f001 fbca 	bl	a1a6 <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    8a12:	693b      	ldr	r3, [r7, #16]
    8a14:	685b      	ldr	r3, [r3, #4]
    8a16:	b2db      	uxtb	r3, r3
    8a18:	2b35      	cmp	r3, #53	; 0x35
    8a1a:	d906      	bls.n	8a2a <compile_node+0xe8>
    8a1c:	4b0c      	ldr	r3, [pc, #48]	; (8a50 <compile_node+0x10e>)
    8a1e:	4a0d      	ldr	r2, [pc, #52]	; (8a54 <compile_node+0x112>)
    8a20:	f640 21ac 	movw	r1, #2732	; 0xaac
    8a24:	480c      	ldr	r0, [pc, #48]	; (8a58 <compile_node+0x116>)
    8a26:	f012 fbdd 	bl	1b1e4 <__assert_func>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    8a2a:	693b      	ldr	r3, [r7, #16]
    8a2c:	685b      	ldr	r3, [r3, #4]
    8a2e:	b2db      	uxtb	r3, r3
    8a30:	4a0a      	ldr	r2, [pc, #40]	; (8a5c <compile_node+0x11a>)
    8a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a36:	60fb      	str	r3, [r7, #12]
        f(comp, pns);
    8a38:	68fb      	ldr	r3, [r7, #12]
    8a3a:	6939      	ldr	r1, [r7, #16]
    8a3c:	6878      	ldr	r0, [r7, #4]
    8a3e:	4798      	blx	r3
}
    8a40:	e000      	b.n	8a44 <compile_node+0x102>
                break;
    8a42:	bf00      	nop
}
    8a44:	bf00      	nop
    8a46:	3724      	adds	r7, #36	; 0x24
    8a48:	46bd      	mov	sp, r7
    8a4a:	bd90      	pop	{r4, r7, pc}
    8a4c:	00022b54 	.word	0x00022b54
    8a50:	0002031c 	.word	0x0002031c
    8a54:	00020780 	.word	0x00020780
    8a58:	0001f9e4 	.word	0x0001f9e4
    8a5c:	00020244 	.word	0x00020244

00008a60 <compile_scope_func_lambda_param>:

STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    8a60:	b580      	push	{r7, lr}
    8a62:	b08a      	sub	sp, #40	; 0x28
    8a64:	af00      	add	r7, sp, #0
    8a66:	60f8      	str	r0, [r7, #12]
    8a68:	60b9      	str	r1, [r7, #8]
    8a6a:	607a      	str	r2, [r7, #4]
    8a6c:	603b      	str	r3, [r7, #0]
    // check that **kw is last
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    8a6e:	68fb      	ldr	r3, [r7, #12]
    8a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a72:	7e1b      	ldrb	r3, [r3, #24]
    8a74:	f003 0302 	and.w	r3, r3, #2
    8a78:	2b00      	cmp	r3, #0
    8a7a:	d005      	beq.n	8a88 <compile_scope_func_lambda_param+0x28>
        compile_syntax_error(comp, pn, "invalid syntax");
    8a7c:	4a75      	ldr	r2, [pc, #468]	; (8c54 <compile_scope_func_lambda_param+0x1f4>)
    8a7e:	68b9      	ldr	r1, [r7, #8]
    8a80:	68f8      	ldr	r0, [r7, #12]
    8a82:	f7fc f95e 	bl	4d42 <compile_syntax_error>
        return;
    8a86:	e0e2      	b.n	8c4e <compile_scope_func_lambda_param+0x1ee>
    }

    qstr param_name = MP_QSTR_NULL;
    8a88:	2300      	movs	r3, #0
    8a8a:	627b      	str	r3, [r7, #36]	; 0x24
    uint param_flag = ID_FLAG_IS_PARAM;
    8a8c:	2301      	movs	r3, #1
    8a8e:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    8a90:	68bb      	ldr	r3, [r7, #8]
    8a92:	f003 030f 	and.w	r3, r3, #15
    8a96:	2b02      	cmp	r3, #2
    8a98:	d118      	bne.n	8acc <compile_scope_func_lambda_param+0x6c>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    8a9a:	68bb      	ldr	r3, [r7, #8]
    8a9c:	091b      	lsrs	r3, r3, #4
    8a9e:	627b      	str	r3, [r7, #36]	; 0x24
        if (comp->have_star) {
    8aa0:	68fb      	ldr	r3, [r7, #12]
    8aa2:	799b      	ldrb	r3, [r3, #6]
    8aa4:	2b00      	cmp	r3, #0
    8aa6:	d008      	beq.n	8aba <compile_scope_func_lambda_param+0x5a>
            // comes after a star, so counts as a keyword-only parameter
            comp->scope_cur->num_kwonly_args += 1;
    8aa8:	68fb      	ldr	r3, [r7, #12]
    8aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8aac:	68fa      	ldr	r2, [r7, #12]
    8aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8ab0:	8b92      	ldrh	r2, [r2, #28]
    8ab2:	3201      	adds	r2, #1
    8ab4:	b292      	uxth	r2, r2
    8ab6:	839a      	strh	r2, [r3, #28]
    8ab8:	e0aa      	b.n	8c10 <compile_scope_func_lambda_param+0x1b0>
        } else {
            // comes before a star, so counts as a positional parameter
            comp->scope_cur->num_pos_args += 1;
    8aba:	68fb      	ldr	r3, [r7, #12]
    8abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8abe:	68fa      	ldr	r2, [r7, #12]
    8ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8ac2:	8b52      	ldrh	r2, [r2, #26]
    8ac4:	3201      	adds	r2, #1
    8ac6:	b292      	uxth	r2, r2
    8ac8:	835a      	strh	r2, [r3, #26]
    8aca:	e0a1      	b.n	8c10 <compile_scope_func_lambda_param+0x1b0>
        }
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    8acc:	68bb      	ldr	r3, [r7, #8]
    8ace:	2b00      	cmp	r3, #0
    8ad0:	d004      	beq.n	8adc <compile_scope_func_lambda_param+0x7c>
    8ad2:	68bb      	ldr	r3, [r7, #8]
    8ad4:	f003 0303 	and.w	r3, r3, #3
    8ad8:	2b00      	cmp	r3, #0
    8ada:	d006      	beq.n	8aea <compile_scope_func_lambda_param+0x8a>
    8adc:	4b5e      	ldr	r3, [pc, #376]	; (8c58 <compile_scope_func_lambda_param+0x1f8>)
    8ade:	4a5f      	ldr	r2, [pc, #380]	; (8c5c <compile_scope_func_lambda_param+0x1fc>)
    8ae0:	f640 21c5 	movw	r1, #2757	; 0xac5
    8ae4:	485e      	ldr	r0, [pc, #376]	; (8c60 <compile_scope_func_lambda_param+0x200>)
    8ae6:	f012 fb7d 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8aea:	68bb      	ldr	r3, [r7, #8]
    8aec:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    8aee:	69fb      	ldr	r3, [r7, #28]
    8af0:	685b      	ldr	r3, [r3, #4]
    8af2:	b2da      	uxtb	r2, r3
    8af4:	687b      	ldr	r3, [r7, #4]
    8af6:	429a      	cmp	r2, r3
    8af8:	d119      	bne.n	8b2e <compile_scope_func_lambda_param+0xce>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8afa:	69fb      	ldr	r3, [r7, #28]
    8afc:	689b      	ldr	r3, [r3, #8]
    8afe:	091b      	lsrs	r3, r3, #4
    8b00:	627b      	str	r3, [r7, #36]	; 0x24
            if (comp->have_star) {
    8b02:	68fb      	ldr	r3, [r7, #12]
    8b04:	799b      	ldrb	r3, [r3, #6]
    8b06:	2b00      	cmp	r3, #0
    8b08:	d008      	beq.n	8b1c <compile_scope_func_lambda_param+0xbc>
                // comes after a star, so counts as a keyword-only parameter
                comp->scope_cur->num_kwonly_args += 1;
    8b0a:	68fb      	ldr	r3, [r7, #12]
    8b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b0e:	68fa      	ldr	r2, [r7, #12]
    8b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b12:	8b92      	ldrh	r2, [r2, #28]
    8b14:	3201      	adds	r2, #1
    8b16:	b292      	uxth	r2, r2
    8b18:	839a      	strh	r2, [r3, #28]
    8b1a:	e079      	b.n	8c10 <compile_scope_func_lambda_param+0x1b0>
            } else {
                // comes before a star, so counts as a positional parameter
                comp->scope_cur->num_pos_args += 1;
    8b1c:	68fb      	ldr	r3, [r7, #12]
    8b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b20:	68fa      	ldr	r2, [r7, #12]
    8b22:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b24:	8b52      	ldrh	r2, [r2, #26]
    8b26:	3201      	adds	r2, #1
    8b28:	b292      	uxth	r2, r2
    8b2a:	835a      	strh	r2, [r3, #26]
    8b2c:	e070      	b.n	8c10 <compile_scope_func_lambda_param+0x1b0>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    8b2e:	69fb      	ldr	r3, [r7, #28]
    8b30:	685b      	ldr	r3, [r3, #4]
    8b32:	b2da      	uxtb	r2, r3
    8b34:	683b      	ldr	r3, [r7, #0]
    8b36:	429a      	cmp	r2, r3
    8b38:	d14e      	bne.n	8bd8 <compile_scope_func_lambda_param+0x178>
            if (comp->have_star) {
    8b3a:	68fb      	ldr	r3, [r7, #12]
    8b3c:	799b      	ldrb	r3, [r3, #6]
    8b3e:	2b00      	cmp	r3, #0
    8b40:	d005      	beq.n	8b4e <compile_scope_func_lambda_param+0xee>
                // more than one star
                compile_syntax_error(comp, pn, "invalid syntax");
    8b42:	4a44      	ldr	r2, [pc, #272]	; (8c54 <compile_scope_func_lambda_param+0x1f4>)
    8b44:	68b9      	ldr	r1, [r7, #8]
    8b46:	68f8      	ldr	r0, [r7, #12]
    8b48:	f7fc f8fb 	bl	4d42 <compile_syntax_error>
                return;
    8b4c:	e07f      	b.n	8c4e <compile_scope_func_lambda_param+0x1ee>
            }
            comp->have_star = true;
    8b4e:	68fb      	ldr	r3, [r7, #12]
    8b50:	2201      	movs	r2, #1
    8b52:	719a      	strb	r2, [r3, #6]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    8b54:	2303      	movs	r3, #3
    8b56:	623b      	str	r3, [r7, #32]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8b58:	69fb      	ldr	r3, [r7, #28]
    8b5a:	689b      	ldr	r3, [r3, #8]
    8b5c:	2b00      	cmp	r3, #0
    8b5e:	d057      	beq.n	8c10 <compile_scope_func_lambda_param+0x1b0>
                // bare star
                // TODO see http://www.python.org/dev/peps/pep-3102/
                //assert(comp->scope_cur->num_dict_params == 0);
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    8b60:	69fb      	ldr	r3, [r7, #28]
    8b62:	689b      	ldr	r3, [r3, #8]
    8b64:	f003 030f 	and.w	r3, r3, #15
    8b68:	2b02      	cmp	r3, #2
    8b6a:	d10d      	bne.n	8b88 <compile_scope_func_lambda_param+0x128>
                // named star
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8b6c:	68fb      	ldr	r3, [r7, #12]
    8b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b70:	68fa      	ldr	r2, [r7, #12]
    8b72:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b74:	7e12      	ldrb	r2, [r2, #24]
    8b76:	f042 0201 	orr.w	r2, r2, #1
    8b7a:	b2d2      	uxtb	r2, r2
    8b7c:	761a      	strb	r2, [r3, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8b7e:	69fb      	ldr	r3, [r7, #28]
    8b80:	689b      	ldr	r3, [r3, #8]
    8b82:	091b      	lsrs	r3, r3, #4
    8b84:	627b      	str	r3, [r7, #36]	; 0x24
    8b86:	e043      	b.n	8c10 <compile_scope_func_lambda_param+0x1b0>
            } else {
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    8b88:	69fb      	ldr	r3, [r7, #28]
    8b8a:	689b      	ldr	r3, [r3, #8]
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d00b      	beq.n	8ba8 <compile_scope_func_lambda_param+0x148>
    8b90:	69fb      	ldr	r3, [r7, #28]
    8b92:	689b      	ldr	r3, [r3, #8]
    8b94:	f003 0303 	and.w	r3, r3, #3
    8b98:	2b00      	cmp	r3, #0
    8b9a:	d105      	bne.n	8ba8 <compile_scope_func_lambda_param+0x148>
    8b9c:	69fb      	ldr	r3, [r7, #28]
    8b9e:	689b      	ldr	r3, [r3, #8]
    8ba0:	685b      	ldr	r3, [r3, #4]
    8ba2:	b2db      	uxtb	r3, r3
    8ba4:	2b45      	cmp	r3, #69	; 0x45
    8ba6:	d006      	beq.n	8bb6 <compile_scope_func_lambda_param+0x156>
    8ba8:	4b2e      	ldr	r3, [pc, #184]	; (8c64 <compile_scope_func_lambda_param+0x204>)
    8baa:	4a2c      	ldr	r2, [pc, #176]	; (8c5c <compile_scope_func_lambda_param+0x1fc>)
    8bac:	f640 21e1 	movw	r1, #2785	; 0xae1
    8bb0:	482b      	ldr	r0, [pc, #172]	; (8c60 <compile_scope_func_lambda_param+0x200>)
    8bb2:	f012 fb17 	bl	1b1e4 <__assert_func>
                // named star with possible annotation
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8bb6:	68fb      	ldr	r3, [r7, #12]
    8bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bba:	68fa      	ldr	r2, [r7, #12]
    8bbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8bbe:	7e12      	ldrb	r2, [r2, #24]
    8bc0:	f042 0201 	orr.w	r2, r2, #1
    8bc4:	b2d2      	uxtb	r2, r2
    8bc6:	761a      	strb	r2, [r3, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8bc8:	69fb      	ldr	r3, [r7, #28]
    8bca:	689b      	ldr	r3, [r3, #8]
    8bcc:	61fb      	str	r3, [r7, #28]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8bce:	69fb      	ldr	r3, [r7, #28]
    8bd0:	689b      	ldr	r3, [r3, #8]
    8bd2:	091b      	lsrs	r3, r3, #4
    8bd4:	627b      	str	r3, [r7, #36]	; 0x24
    8bd6:	e01b      	b.n	8c10 <compile_scope_func_lambda_param+0x1b0>
            }
        } else {
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    8bd8:	69fb      	ldr	r3, [r7, #28]
    8bda:	685b      	ldr	r3, [r3, #4]
    8bdc:	b2da      	uxtb	r2, r3
    8bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8be0:	429a      	cmp	r2, r3
    8be2:	d006      	beq.n	8bf2 <compile_scope_func_lambda_param+0x192>
    8be4:	4b20      	ldr	r3, [pc, #128]	; (8c68 <compile_scope_func_lambda_param+0x208>)
    8be6:	4a1d      	ldr	r2, [pc, #116]	; (8c5c <compile_scope_func_lambda_param+0x1fc>)
    8be8:	f640 21e8 	movw	r1, #2792	; 0xae8
    8bec:	481c      	ldr	r0, [pc, #112]	; (8c60 <compile_scope_func_lambda_param+0x200>)
    8bee:	f012 faf9 	bl	1b1e4 <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8bf2:	69fb      	ldr	r3, [r7, #28]
    8bf4:	689b      	ldr	r3, [r3, #8]
    8bf6:	091b      	lsrs	r3, r3, #4
    8bf8:	627b      	str	r3, [r7, #36]	; 0x24
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    8bfa:	2305      	movs	r3, #5
    8bfc:	623b      	str	r3, [r7, #32]
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    8bfe:	68fb      	ldr	r3, [r7, #12]
    8c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c02:	68fa      	ldr	r2, [r7, #12]
    8c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c06:	7e12      	ldrb	r2, [r2, #24]
    8c08:	f042 0202 	orr.w	r2, r2, #2
    8c0c:	b2d2      	uxtb	r2, r2
    8c0e:	761a      	strb	r2, [r3, #24]
        }
    }

    if (param_name != MP_QSTR_NULL) {
    8c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c12:	2b00      	cmp	r3, #0
    8c14:	d01b      	beq.n	8c4e <compile_scope_func_lambda_param+0x1ee>
        bool added;
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, &added);
    8c16:	68fb      	ldr	r3, [r7, #12]
    8c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c1a:	f107 0217 	add.w	r2, r7, #23
    8c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8c20:	4618      	mov	r0, r3
    8c22:	f7fb ff47 	bl	4ab4 <scope_find_or_add_id>
    8c26:	61b8      	str	r0, [r7, #24]
        if (!added) {
    8c28:	7dfb      	ldrb	r3, [r7, #23]
    8c2a:	f083 0301 	eor.w	r3, r3, #1
    8c2e:	b2db      	uxtb	r3, r3
    8c30:	2b00      	cmp	r3, #0
    8c32:	d005      	beq.n	8c40 <compile_scope_func_lambda_param+0x1e0>
            compile_syntax_error(comp, pn, "name reused for argument");
    8c34:	4a0d      	ldr	r2, [pc, #52]	; (8c6c <compile_scope_func_lambda_param+0x20c>)
    8c36:	68b9      	ldr	r1, [r7, #8]
    8c38:	68f8      	ldr	r0, [r7, #12]
    8c3a:	f7fc f882 	bl	4d42 <compile_syntax_error>
    8c3e:	e006      	b.n	8c4e <compile_scope_func_lambda_param+0x1ee>
            return;
        }
        id_info->kind = ID_INFO_KIND_LOCAL;
    8c40:	69bb      	ldr	r3, [r7, #24]
    8c42:	2202      	movs	r2, #2
    8c44:	701a      	strb	r2, [r3, #0]
        id_info->flags = param_flag;
    8c46:	6a3b      	ldr	r3, [r7, #32]
    8c48:	b2da      	uxtb	r2, r3
    8c4a:	69bb      	ldr	r3, [r7, #24]
    8c4c:	705a      	strb	r2, [r3, #1]
    }
}
    8c4e:	3728      	adds	r7, #40	; 0x28
    8c50:	46bd      	mov	sp, r7
    8c52:	bd80      	pop	{r7, pc}
    8c54:	000201e4 	.word	0x000201e4
    8c58:	0001fb2c 	.word	0x0001fb2c
    8c5c:	00020790 	.word	0x00020790
    8c60:	0001f9e4 	.word	0x0001f9e4
    8c64:	00020350 	.word	0x00020350
    8c68:	00020388 	.word	0x00020388
    8c6c:	000203b8 	.word	0x000203b8

00008c70 <compile_scope_func_param>:

STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    8c70:	b580      	push	{r7, lr}
    8c72:	b084      	sub	sp, #16
    8c74:	af02      	add	r7, sp, #8
    8c76:	6078      	str	r0, [r7, #4]
    8c78:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    8c7a:	2342      	movs	r3, #66	; 0x42
    8c7c:	9300      	str	r3, [sp, #0]
    8c7e:	2341      	movs	r3, #65	; 0x41
    8c80:	2240      	movs	r2, #64	; 0x40
    8c82:	6839      	ldr	r1, [r7, #0]
    8c84:	6878      	ldr	r0, [r7, #4]
    8c86:	f7ff feeb 	bl	8a60 <compile_scope_func_lambda_param>
}
    8c8a:	bf00      	nop
    8c8c:	3708      	adds	r7, #8
    8c8e:	46bd      	mov	sp, r7
    8c90:	bd80      	pop	{r7, pc}

00008c92 <compile_scope_lambda_param>:

STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    8c92:	b580      	push	{r7, lr}
    8c94:	b084      	sub	sp, #16
    8c96:	af02      	add	r7, sp, #8
    8c98:	6078      	str	r0, [r7, #4]
    8c9a:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    8c9c:	234a      	movs	r3, #74	; 0x4a
    8c9e:	9300      	str	r3, [sp, #0]
    8ca0:	2349      	movs	r3, #73	; 0x49
    8ca2:	2248      	movs	r2, #72	; 0x48
    8ca4:	6839      	ldr	r1, [r7, #0]
    8ca6:	6878      	ldr	r0, [r7, #4]
    8ca8:	f7ff feda 	bl	8a60 <compile_scope_func_lambda_param>
}
    8cac:	bf00      	nop
    8cae:	3708      	adds	r7, #8
    8cb0:	46bd      	mov	sp, r7
    8cb2:	bd80      	pop	{r7, pc}

00008cb4 <compile_scope_comp_iter>:
        }
    }
}
#endif // MICROPY_EMIT_NATIVE

STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    8cb4:	b580      	push	{r7, lr}
    8cb6:	b08a      	sub	sp, #40	; 0x28
    8cb8:	af00      	add	r7, sp, #0
    8cba:	60f8      	str	r0, [r7, #12]
    8cbc:	60b9      	str	r1, [r7, #8]
    8cbe:	607a      	str	r2, [r7, #4]
    8cc0:	603b      	str	r3, [r7, #0]
    uint l_top = comp_next_label(comp);
    8cc2:	68f8      	ldr	r0, [r7, #12]
    8cc4:	f7fc f858 	bl	4d78 <comp_next_label>
    8cc8:	6238      	str	r0, [r7, #32]
    uint l_end = comp_next_label(comp);
    8cca:	68f8      	ldr	r0, [r7, #12]
    8ccc:	f7fc f854 	bl	4d78 <comp_next_label>
    8cd0:	61f8      	str	r0, [r7, #28]
    EMIT_ARG(label_assign, l_top);
    8cd2:	68fb      	ldr	r3, [r7, #12]
    8cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8cd6:	6a39      	ldr	r1, [r7, #32]
    8cd8:	4618      	mov	r0, r3
    8cda:	f001 fa6f 	bl	a1bc <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    8cde:	68fb      	ldr	r3, [r7, #12]
    8ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ce2:	69f9      	ldr	r1, [r7, #28]
    8ce4:	4618      	mov	r0, r3
    8ce6:	f001 fdf8 	bl	a8da <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    8cea:	68bb      	ldr	r3, [r7, #8]
    8cec:	689b      	ldr	r3, [r3, #8]
    8cee:	2200      	movs	r2, #0
    8cf0:	4619      	mov	r1, r3
    8cf2:	68f8      	ldr	r0, [r7, #12]
    8cf4:	f7fc fc66 	bl	55c4 <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    8cf8:	68bb      	ldr	r3, [r7, #8]
    8cfa:	691b      	ldr	r3, [r3, #16]
    8cfc:	627b      	str	r3, [r7, #36]	; 0x24

    tail_recursion:
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    8cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d00:	2b00      	cmp	r3, #0
    8d02:	d120      	bne.n	8d46 <compile_scope_comp_iter+0x92>
        // no more nested if/for; compile inner expression
        compile_node(comp, pn_inner_expr);
    8d04:	6879      	ldr	r1, [r7, #4]
    8d06:	68f8      	ldr	r0, [r7, #12]
    8d08:	f7ff fe1b 	bl	8942 <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    8d0c:	68fb      	ldr	r3, [r7, #12]
    8d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d10:	681b      	ldr	r3, [r3, #0]
    8d12:	2b06      	cmp	r3, #6
    8d14:	d10b      	bne.n	8d2e <compile_scope_comp_iter+0x7a>
            EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8d16:	68fb      	ldr	r3, [r7, #12]
    8d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d1a:	2100      	movs	r1, #0
    8d1c:	4618      	mov	r0, r3
    8d1e:	f001 fffd 	bl	ad1c <mp_emit_bc_yield>
            EMIT(pop_top);
    8d22:	68fb      	ldr	r3, [r7, #12]
    8d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d26:	4618      	mov	r0, r3
    8d28:	f001 fca1 	bl	a66e <mp_emit_bc_pop_top>
    8d2c:	e03e      	b.n	8dac <compile_scope_comp_iter+0xf8>
        } else {
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    8d2e:	68fb      	ldr	r3, [r7, #12]
    8d30:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8d32:	68fb      	ldr	r3, [r7, #12]
    8d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d36:	6819      	ldr	r1, [r3, #0]
    8d38:	683b      	ldr	r3, [r7, #0]
    8d3a:	009b      	lsls	r3, r3, #2
    8d3c:	3305      	adds	r3, #5
    8d3e:	461a      	mov	r2, r3
    8d40:	f001 fe84 	bl	aa4c <mp_emit_bc_store_comp>
    8d44:	e032      	b.n	8dac <compile_scope_comp_iter+0xf8>
        }
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    8d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d48:	685b      	ldr	r3, [r3, #4]
    8d4a:	b2db      	uxtb	r3, r3
    8d4c:	2ba0      	cmp	r3, #160	; 0xa0
    8d4e:	d10c      	bne.n	8d6a <compile_scope_comp_iter+0xb6>
        // if condition
        mp_parse_node_struct_t *pns_comp_if = (mp_parse_node_struct_t*)pn_iter;
    8d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d52:	61bb      	str	r3, [r7, #24]
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    8d54:	69bb      	ldr	r3, [r7, #24]
    8d56:	6899      	ldr	r1, [r3, #8]
    8d58:	6a3b      	ldr	r3, [r7, #32]
    8d5a:	2200      	movs	r2, #0
    8d5c:	68f8      	ldr	r0, [r7, #12]
    8d5e:	f7fc f992 	bl	5086 <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    8d62:	69bb      	ldr	r3, [r7, #24]
    8d64:	68db      	ldr	r3, [r3, #12]
    8d66:	627b      	str	r3, [r7, #36]	; 0x24
        goto tail_recursion;
    8d68:	e7c9      	b.n	8cfe <compile_scope_comp_iter+0x4a>
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    8d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d6c:	685b      	ldr	r3, [r3, #4]
    8d6e:	b2db      	uxtb	r3, r3
    8d70:	2b9f      	cmp	r3, #159	; 0x9f
    8d72:	d006      	beq.n	8d82 <compile_scope_comp_iter+0xce>
    8d74:	4b18      	ldr	r3, [pc, #96]	; (8dd8 <compile_scope_comp_iter+0x124>)
    8d76:	4a19      	ldr	r2, [pc, #100]	; (8ddc <compile_scope_comp_iter+0x128>)
    8d78:	f640 3147 	movw	r1, #2887	; 0xb47
    8d7c:	4818      	ldr	r0, [pc, #96]	; (8de0 <compile_scope_comp_iter+0x12c>)
    8d7e:	f012 fa31 	bl	1b1e4 <__assert_func>
        // for loop
        mp_parse_node_struct_t *pns_comp_for2 = (mp_parse_node_struct_t*)pn_iter;
    8d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d84:	617b      	str	r3, [r7, #20]
        compile_node(comp, pns_comp_for2->nodes[1]);
    8d86:	697b      	ldr	r3, [r7, #20]
    8d88:	68db      	ldr	r3, [r3, #12]
    8d8a:	4619      	mov	r1, r3
    8d8c:	68f8      	ldr	r0, [r7, #12]
    8d8e:	f7ff fdd8 	bl	8942 <compile_node>
        EMIT_ARG(get_iter, true);
    8d92:	68fb      	ldr	r3, [r7, #12]
    8d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d96:	2101      	movs	r1, #1
    8d98:	4618      	mov	r0, r3
    8d9a:	f001 fd80 	bl	a89e <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    8d9e:	683b      	ldr	r3, [r7, #0]
    8da0:	3301      	adds	r3, #1
    8da2:	687a      	ldr	r2, [r7, #4]
    8da4:	6979      	ldr	r1, [r7, #20]
    8da6:	68f8      	ldr	r0, [r7, #12]
    8da8:	f7ff ff84 	bl	8cb4 <compile_scope_comp_iter>
    }

    EMIT_ARG(jump, l_top);
    8dac:	68fb      	ldr	r3, [r7, #12]
    8dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8db0:	6a39      	ldr	r1, [r7, #32]
    8db2:	4618      	mov	r0, r3
    8db4:	f001 fc8c 	bl	a6d0 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    8db8:	68fb      	ldr	r3, [r7, #12]
    8dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8dbc:	69f9      	ldr	r1, [r7, #28]
    8dbe:	4618      	mov	r0, r3
    8dc0:	f001 f9fc 	bl	a1bc <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    8dc4:	68fb      	ldr	r3, [r7, #12]
    8dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8dc8:	4618      	mov	r0, r3
    8dca:	f001 fd98 	bl	a8fe <mp_emit_bc_for_iter_end>
}
    8dce:	bf00      	nop
    8dd0:	3728      	adds	r7, #40	; 0x28
    8dd2:	46bd      	mov	sp, r7
    8dd4:	bd80      	pop	{r7, pc}
    8dd6:	bf00      	nop
    8dd8:	000203d4 	.word	0x000203d4
    8ddc:	000207b0 	.word	0x000207b0
    8de0:	0001f9e4 	.word	0x0001f9e4

00008de4 <check_for_doc_string>:

STATIC void check_for_doc_string(compiler_t *comp, mp_parse_node_t pn) {
    8de4:	b480      	push	{r7}
    8de6:	b083      	sub	sp, #12
    8de8:	af00      	add	r7, sp, #0
    8dea:	6078      	str	r0, [r7, #4]
    8dec:	6039      	str	r1, [r7, #0]
    }
#else
    (void)comp;
    (void)pn;
#endif
}
    8dee:	bf00      	nop
    8df0:	370c      	adds	r7, #12
    8df2:	46bd      	mov	sp, r7
    8df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8df8:	4770      	bx	lr

00008dfa <compile_scope>:

STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    8dfa:	b580      	push	{r7, lr}
    8dfc:	b090      	sub	sp, #64	; 0x40
    8dfe:	af00      	add	r7, sp, #0
    8e00:	60f8      	str	r0, [r7, #12]
    8e02:	60b9      	str	r1, [r7, #8]
    8e04:	607a      	str	r2, [r7, #4]
    comp->pass = pass;
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	b2da      	uxtb	r2, r3
    8e0a:	68fb      	ldr	r3, [r7, #12]
    8e0c:	715a      	strb	r2, [r3, #5]
    comp->scope_cur = scope;
    8e0e:	68fb      	ldr	r3, [r7, #12]
    8e10:	68ba      	ldr	r2, [r7, #8]
    8e12:	625a      	str	r2, [r3, #36]	; 0x24
    comp->next_label = 0;
    8e14:	68fb      	ldr	r3, [r7, #12]
    8e16:	2200      	movs	r2, #0
    8e18:	611a      	str	r2, [r3, #16]
    EMIT_ARG(start_pass, pass, scope);
    8e1a:	68fb      	ldr	r3, [r7, #12]
    8e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e1e:	68ba      	ldr	r2, [r7, #8]
    8e20:	6879      	ldr	r1, [r7, #4]
    8e22:	4618      	mov	r0, r3
    8e24:	f000 fff5 	bl	9e12 <mp_emit_bc_start_pass>

    if (comp->pass == MP_PASS_SCOPE) {
    8e28:	68fb      	ldr	r3, [r7, #12]
    8e2a:	795b      	ldrb	r3, [r3, #5]
    8e2c:	2b01      	cmp	r3, #1
    8e2e:	d105      	bne.n	8e3c <compile_scope+0x42>
        // reset maximum stack sizes in scope
        // they will be computed in this first pass
        scope->stack_size = 0;
    8e30:	68bb      	ldr	r3, [r7, #8]
    8e32:	2200      	movs	r2, #0
    8e34:	845a      	strh	r2, [r3, #34]	; 0x22
        scope->exc_stack_size = 0;
    8e36:	68bb      	ldr	r3, [r7, #8]
    8e38:	2200      	movs	r2, #0
    8e3a:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    // compile
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8e3c:	68bb      	ldr	r3, [r7, #8]
    8e3e:	68db      	ldr	r3, [r3, #12]
    8e40:	2b00      	cmp	r3, #0
    8e42:	d025      	beq.n	8e90 <compile_scope+0x96>
    8e44:	68bb      	ldr	r3, [r7, #8]
    8e46:	68db      	ldr	r3, [r3, #12]
    8e48:	f003 0303 	and.w	r3, r3, #3
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d11f      	bne.n	8e90 <compile_scope+0x96>
    8e50:	68bb      	ldr	r3, [r7, #8]
    8e52:	68db      	ldr	r3, [r3, #12]
    8e54:	685b      	ldr	r3, [r3, #4]
    8e56:	b2db      	uxtb	r3, r3
    8e58:	2b38      	cmp	r3, #56	; 0x38
    8e5a:	d119      	bne.n	8e90 <compile_scope+0x96>
        assert(scope->kind == SCOPE_MODULE);
    8e5c:	68bb      	ldr	r3, [r7, #8]
    8e5e:	681b      	ldr	r3, [r3, #0]
    8e60:	2b00      	cmp	r3, #0
    8e62:	d006      	beq.n	8e72 <compile_scope+0x78>
    8e64:	4b9c      	ldr	r3, [pc, #624]	; (90d8 <compile_scope+0x2de>)
    8e66:	4a9d      	ldr	r2, [pc, #628]	; (90dc <compile_scope+0x2e2>)
    8e68:	f44f 6139 	mov.w	r1, #2960	; 0xb90
    8e6c:	489c      	ldr	r0, [pc, #624]	; (90e0 <compile_scope+0x2e6>)
    8e6e:	f012 f9b9 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8e72:	68bb      	ldr	r3, [r7, #8]
    8e74:	68db      	ldr	r3, [r3, #12]
    8e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        compile_node(comp, pns->nodes[0]); // compile the expression
    8e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8e7a:	689b      	ldr	r3, [r3, #8]
    8e7c:	4619      	mov	r1, r3
    8e7e:	68f8      	ldr	r0, [r7, #12]
    8e80:	f7ff fd5f 	bl	8942 <compile_node>
        EMIT(return_value);
    8e84:	68fb      	ldr	r3, [r7, #12]
    8e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e88:	4618      	mov	r0, r3
    8e8a:	f001 ff0c 	bl	aca6 <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8e8e:	e21c      	b.n	92ca <compile_scope+0x4d0>
    } else if (scope->kind == SCOPE_MODULE) {
    8e90:	68bb      	ldr	r3, [r7, #8]
    8e92:	681b      	ldr	r3, [r3, #0]
    8e94:	2b00      	cmp	r3, #0
    8e96:	d11b      	bne.n	8ed0 <compile_scope+0xd6>
        if (!comp->is_repl) {
    8e98:	68fb      	ldr	r3, [r7, #12]
    8e9a:	791b      	ldrb	r3, [r3, #4]
    8e9c:	2b00      	cmp	r3, #0
    8e9e:	d105      	bne.n	8eac <compile_scope+0xb2>
            check_for_doc_string(comp, scope->pn);
    8ea0:	68bb      	ldr	r3, [r7, #8]
    8ea2:	68db      	ldr	r3, [r3, #12]
    8ea4:	4619      	mov	r1, r3
    8ea6:	68f8      	ldr	r0, [r7, #12]
    8ea8:	f7ff ff9c 	bl	8de4 <check_for_doc_string>
        }
        compile_node(comp, scope->pn);
    8eac:	68bb      	ldr	r3, [r7, #8]
    8eae:	68db      	ldr	r3, [r3, #12]
    8eb0:	4619      	mov	r1, r3
    8eb2:	68f8      	ldr	r0, [r7, #12]
    8eb4:	f7ff fd45 	bl	8942 <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8eb8:	68fb      	ldr	r3, [r7, #12]
    8eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ebc:	210e      	movs	r1, #14
    8ebe:	4618      	mov	r0, r3
    8ec0:	f001 f9fa 	bl	a2b8 <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    8ec4:	68fb      	ldr	r3, [r7, #12]
    8ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ec8:	4618      	mov	r0, r3
    8eca:	f001 feec 	bl	aca6 <mp_emit_bc_return_value>
    8ece:	e1fc      	b.n	92ca <compile_scope+0x4d0>
    } else if (scope->kind == SCOPE_FUNCTION) {
    8ed0:	68bb      	ldr	r3, [r7, #8]
    8ed2:	681b      	ldr	r3, [r3, #0]
    8ed4:	2b07      	cmp	r3, #7
    8ed6:	d14b      	bne.n	8f70 <compile_scope+0x176>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    8ed8:	68bb      	ldr	r3, [r7, #8]
    8eda:	68db      	ldr	r3, [r3, #12]
    8edc:	2b00      	cmp	r3, #0
    8ede:	d005      	beq.n	8eec <compile_scope+0xf2>
    8ee0:	68bb      	ldr	r3, [r7, #8]
    8ee2:	68db      	ldr	r3, [r3, #12]
    8ee4:	f003 0303 	and.w	r3, r3, #3
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d006      	beq.n	8efa <compile_scope+0x100>
    8eec:	4b7d      	ldr	r3, [pc, #500]	; (90e4 <compile_scope+0x2ea>)
    8eee:	4a7b      	ldr	r2, [pc, #492]	; (90dc <compile_scope+0x2e2>)
    8ef0:	f640 319c 	movw	r1, #2972	; 0xb9c
    8ef4:	487a      	ldr	r0, [pc, #488]	; (90e0 <compile_scope+0x2e6>)
    8ef6:	f012 f975 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8efa:	68bb      	ldr	r3, [r7, #8]
    8efc:	68db      	ldr	r3, [r3, #12]
    8efe:	63bb      	str	r3, [r7, #56]	; 0x38
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    8f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8f02:	685b      	ldr	r3, [r3, #4]
    8f04:	b2db      	uxtb	r3, r3
    8f06:	2b03      	cmp	r3, #3
    8f08:	d006      	beq.n	8f18 <compile_scope+0x11e>
    8f0a:	4b77      	ldr	r3, [pc, #476]	; (90e8 <compile_scope+0x2ee>)
    8f0c:	4a73      	ldr	r2, [pc, #460]	; (90dc <compile_scope+0x2e2>)
    8f0e:	f640 319e 	movw	r1, #2974	; 0xb9e
    8f12:	4873      	ldr	r0, [pc, #460]	; (90e0 <compile_scope+0x2e6>)
    8f14:	f012 f966 	bl	1b1e4 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    8f18:	68fb      	ldr	r3, [r7, #12]
    8f1a:	795b      	ldrb	r3, [r3, #5]
    8f1c:	2b01      	cmp	r3, #1
    8f1e:	d109      	bne.n	8f34 <compile_scope+0x13a>
            comp->have_star = false;
    8f20:	68fb      	ldr	r3, [r7, #12]
    8f22:	2200      	movs	r2, #0
    8f24:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    8f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8f28:	68d9      	ldr	r1, [r3, #12]
    8f2a:	4b70      	ldr	r3, [pc, #448]	; (90ec <compile_scope+0x2f2>)
    8f2c:	223e      	movs	r2, #62	; 0x3e
    8f2e:	68f8      	ldr	r0, [r7, #12]
    8f30:	f7fb ff9d 	bl	4e6e <apply_to_single_or_list>
                }
            }
        }
        #endif // MICROPY_EMIT_NATIVE

        compile_node(comp, pns->nodes[3]); // 3 is function body
    8f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8f36:	695b      	ldr	r3, [r3, #20]
    8f38:	4619      	mov	r1, r3
    8f3a:	68f8      	ldr	r0, [r7, #12]
    8f3c:	f7ff fd01 	bl	8942 <compile_node>
        // emit return if it wasn't the last opcode
        if (!EMIT(last_emit_was_return_value)) {
    8f40:	68fb      	ldr	r3, [r7, #12]
    8f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f44:	4618      	mov	r0, r3
    8f46:	f001 f8d9 	bl	a0fc <mp_emit_bc_last_emit_was_return_value>
    8f4a:	4603      	mov	r3, r0
    8f4c:	f083 0301 	eor.w	r3, r3, #1
    8f50:	b2db      	uxtb	r3, r3
    8f52:	2b00      	cmp	r3, #0
    8f54:	f000 81b9 	beq.w	92ca <compile_scope+0x4d0>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8f58:	68fb      	ldr	r3, [r7, #12]
    8f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f5c:	210e      	movs	r1, #14
    8f5e:	4618      	mov	r0, r3
    8f60:	f001 f9aa 	bl	a2b8 <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    8f64:	68fb      	ldr	r3, [r7, #12]
    8f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f68:	4618      	mov	r0, r3
    8f6a:	f001 fe9c 	bl	aca6 <mp_emit_bc_return_value>
    8f6e:	e1ac      	b.n	92ca <compile_scope+0x4d0>
        }
    } else if (scope->kind == SCOPE_LAMBDA) {
    8f70:	68bb      	ldr	r3, [r7, #8]
    8f72:	681b      	ldr	r3, [r3, #0]
    8f74:	2b02      	cmp	r3, #2
    8f76:	d14a      	bne.n	900e <compile_scope+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    8f78:	68bb      	ldr	r3, [r7, #8]
    8f7a:	68db      	ldr	r3, [r3, #12]
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d005      	beq.n	8f8c <compile_scope+0x192>
    8f80:	68bb      	ldr	r3, [r7, #8]
    8f82:	68db      	ldr	r3, [r3, #12]
    8f84:	f003 0303 	and.w	r3, r3, #3
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d006      	beq.n	8f9a <compile_scope+0x1a0>
    8f8c:	4b55      	ldr	r3, [pc, #340]	; (90e4 <compile_scope+0x2ea>)
    8f8e:	4a53      	ldr	r2, [pc, #332]	; (90dc <compile_scope+0x2e2>)
    8f90:	f640 31c3 	movw	r1, #3011	; 0xbc3
    8f94:	4852      	ldr	r0, [pc, #328]	; (90e0 <compile_scope+0x2e6>)
    8f96:	f012 f925 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8f9a:	68bb      	ldr	r3, [r7, #8]
    8f9c:	68db      	ldr	r3, [r3, #12]
    8f9e:	637b      	str	r3, [r7, #52]	; 0x34
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    8fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8fa2:	685b      	ldr	r3, [r3, #4]
    8fa4:	0a1b      	lsrs	r3, r3, #8
    8fa6:	2b03      	cmp	r3, #3
    8fa8:	d006      	beq.n	8fb8 <compile_scope+0x1be>
    8faa:	4b51      	ldr	r3, [pc, #324]	; (90f0 <compile_scope+0x2f6>)
    8fac:	4a4b      	ldr	r2, [pc, #300]	; (90dc <compile_scope+0x2e2>)
    8fae:	f640 31c5 	movw	r1, #3013	; 0xbc5
    8fb2:	484b      	ldr	r0, [pc, #300]	; (90e0 <compile_scope+0x2e6>)
    8fb4:	f012 f916 	bl	1b1e4 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    8fb8:	68fb      	ldr	r3, [r7, #12]
    8fba:	795b      	ldrb	r3, [r3, #5]
    8fbc:	2b01      	cmp	r3, #1
    8fbe:	d109      	bne.n	8fd4 <compile_scope+0x1da>
            comp->have_star = false;
    8fc0:	68fb      	ldr	r3, [r7, #12]
    8fc2:	2200      	movs	r2, #0
    8fc4:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    8fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8fc8:	6899      	ldr	r1, [r3, #8]
    8fca:	4b4a      	ldr	r3, [pc, #296]	; (90f4 <compile_scope+0x2fa>)
    8fcc:	2246      	movs	r2, #70	; 0x46
    8fce:	68f8      	ldr	r0, [r7, #12]
    8fd0:	f7fb ff4d 	bl	4e6e <apply_to_single_or_list>
        }

        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    8fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8fd6:	68db      	ldr	r3, [r3, #12]
    8fd8:	4619      	mov	r1, r3
    8fda:	68f8      	ldr	r0, [r7, #12]
    8fdc:	f7ff fcb1 	bl	8942 <compile_node>

        // if the lambda is a generator, then we return None, not the result of the expression of the lambda
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    8fe0:	68bb      	ldr	r3, [r7, #8]
    8fe2:	7e1b      	ldrb	r3, [r3, #24]
    8fe4:	f003 0304 	and.w	r3, r3, #4
    8fe8:	2b00      	cmp	r3, #0
    8fea:	d00a      	beq.n	9002 <compile_scope+0x208>
            EMIT(pop_top);
    8fec:	68fb      	ldr	r3, [r7, #12]
    8fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ff0:	4618      	mov	r0, r3
    8ff2:	f001 fb3c 	bl	a66e <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8ff6:	68fb      	ldr	r3, [r7, #12]
    8ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ffa:	210e      	movs	r1, #14
    8ffc:	4618      	mov	r0, r3
    8ffe:	f001 f95b 	bl	a2b8 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    9002:	68fb      	ldr	r3, [r7, #12]
    9004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9006:	4618      	mov	r0, r3
    9008:	f001 fe4d 	bl	aca6 <mp_emit_bc_return_value>
    900c:	e15d      	b.n	92ca <compile_scope+0x4d0>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    900e:	68bb      	ldr	r3, [r7, #8]
    9010:	681b      	ldr	r3, [r3, #0]
    9012:	2b03      	cmp	r3, #3
    9014:	d00c      	beq.n	9030 <compile_scope+0x236>
    9016:	68bb      	ldr	r3, [r7, #8]
    9018:	681b      	ldr	r3, [r3, #0]
    901a:	2b04      	cmp	r3, #4
    901c:	d008      	beq.n	9030 <compile_scope+0x236>
    901e:	68bb      	ldr	r3, [r7, #8]
    9020:	681b      	ldr	r3, [r3, #0]
    9022:	2b05      	cmp	r3, #5
    9024:	d004      	beq.n	9030 <compile_scope+0x236>
    9026:	68bb      	ldr	r3, [r7, #8]
    9028:	681b      	ldr	r3, [r3, #0]
    902a:	2b06      	cmp	r3, #6
    902c:	f040 80c0 	bne.w	91b0 <compile_scope+0x3b6>
        // a bit of a hack at the moment

        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9030:	68bb      	ldr	r3, [r7, #8]
    9032:	68db      	ldr	r3, [r3, #12]
    9034:	2b00      	cmp	r3, #0
    9036:	d005      	beq.n	9044 <compile_scope+0x24a>
    9038:	68bb      	ldr	r3, [r7, #8]
    903a:	68db      	ldr	r3, [r3, #12]
    903c:	f003 0303 	and.w	r3, r3, #3
    9040:	2b00      	cmp	r3, #0
    9042:	d006      	beq.n	9052 <compile_scope+0x258>
    9044:	4b27      	ldr	r3, [pc, #156]	; (90e4 <compile_scope+0x2ea>)
    9046:	4a25      	ldr	r2, [pc, #148]	; (90dc <compile_scope+0x2e2>)
    9048:	f640 31d9 	movw	r1, #3033	; 0xbd9
    904c:	4824      	ldr	r0, [pc, #144]	; (90e0 <compile_scope+0x2e6>)
    904e:	f012 f8c9 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9052:	68bb      	ldr	r3, [r7, #8]
    9054:	68db      	ldr	r3, [r3, #12]
    9056:	627b      	str	r3, [r7, #36]	; 0x24
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    9058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    905a:	685b      	ldr	r3, [r3, #4]
    905c:	0a1b      	lsrs	r3, r3, #8
    905e:	2b02      	cmp	r3, #2
    9060:	d006      	beq.n	9070 <compile_scope+0x276>
    9062:	4b25      	ldr	r3, [pc, #148]	; (90f8 <compile_scope+0x2fe>)
    9064:	4a1d      	ldr	r2, [pc, #116]	; (90dc <compile_scope+0x2e2>)
    9066:	f640 31db 	movw	r1, #3035	; 0xbdb
    906a:	481d      	ldr	r0, [pc, #116]	; (90e0 <compile_scope+0x2e6>)
    906c:	f012 f8ba 	bl	1b1e4 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    9070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9072:	68db      	ldr	r3, [r3, #12]
    9074:	2b00      	cmp	r3, #0
    9076:	d00b      	beq.n	9090 <compile_scope+0x296>
    9078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    907a:	68db      	ldr	r3, [r3, #12]
    907c:	f003 0303 	and.w	r3, r3, #3
    9080:	2b00      	cmp	r3, #0
    9082:	d105      	bne.n	9090 <compile_scope+0x296>
    9084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9086:	68db      	ldr	r3, [r3, #12]
    9088:	685b      	ldr	r3, [r3, #4]
    908a:	b2db      	uxtb	r3, r3
    908c:	2b9f      	cmp	r3, #159	; 0x9f
    908e:	d006      	beq.n	909e <compile_scope+0x2a4>
    9090:	4b1a      	ldr	r3, [pc, #104]	; (90fc <compile_scope+0x302>)
    9092:	4a12      	ldr	r2, [pc, #72]	; (90dc <compile_scope+0x2e2>)
    9094:	f640 31dc 	movw	r1, #3036	; 0xbdc
    9098:	4811      	ldr	r0, [pc, #68]	; (90e0 <compile_scope+0x2e6>)
    909a:	f012 f8a3 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90a0:	68db      	ldr	r3, [r3, #12]
    90a2:	623b      	str	r3, [r7, #32]

        // We need a unique name for the comprehension argument (the iterator).
        // CPython uses .0, but we should be able to use anything that won't
        // clash with a user defined variable.  Best to use an existing qstr,
        // so we use the blank qstr.
        qstr qstr_arg = MP_QSTR_;
    90a4:	2301      	movs	r3, #1
    90a6:	61fb      	str	r3, [r7, #28]
        if (comp->pass == MP_PASS_SCOPE) {
    90a8:	68fb      	ldr	r3, [r7, #12]
    90aa:	795b      	ldrb	r3, [r3, #5]
    90ac:	2b01      	cmp	r3, #1
    90ae:	d12f      	bne.n	9110 <compile_scope+0x316>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qstr_arg, &added);
    90b0:	68fb      	ldr	r3, [r7, #12]
    90b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    90b4:	f107 0217 	add.w	r2, r7, #23
    90b8:	69f9      	ldr	r1, [r7, #28]
    90ba:	4618      	mov	r0, r3
    90bc:	f7fb fcfa 	bl	4ab4 <scope_find_or_add_id>
    90c0:	61b8      	str	r0, [r7, #24]
            assert(added);
    90c2:	7dfb      	ldrb	r3, [r7, #23]
    90c4:	2b00      	cmp	r3, #0
    90c6:	d11d      	bne.n	9104 <compile_scope+0x30a>
    90c8:	4b0d      	ldr	r3, [pc, #52]	; (9100 <compile_scope+0x306>)
    90ca:	4a04      	ldr	r2, [pc, #16]	; (90dc <compile_scope+0x2e2>)
    90cc:	f640 31e7 	movw	r1, #3047	; 0xbe7
    90d0:	4803      	ldr	r0, [pc, #12]	; (90e0 <compile_scope+0x2e6>)
    90d2:	f012 f887 	bl	1b1e4 <__assert_func>
    90d6:	bf00      	nop
    90d8:	00020420 	.word	0x00020420
    90dc:	000207c8 	.word	0x000207c8
    90e0:	0001f9e4 	.word	0x0001f9e4
    90e4:	0002043c 	.word	0x0002043c
    90e8:	00020460 	.word	0x00020460
    90ec:	00008c71 	.word	0x00008c71
    90f0:	00020490 	.word	0x00020490
    90f4:	00008c93 	.word	0x00008c93
    90f8:	0002012c 	.word	0x0002012c
    90fc:	00020158 	.word	0x00020158
    9100:	000204bc 	.word	0x000204bc
            id_info->kind = ID_INFO_KIND_LOCAL;
    9104:	69bb      	ldr	r3, [r7, #24]
    9106:	2202      	movs	r2, #2
    9108:	701a      	strb	r2, [r3, #0]
            scope->num_pos_args = 1;
    910a:	68bb      	ldr	r3, [r7, #8]
    910c:	2201      	movs	r2, #1
    910e:	835a      	strh	r2, [r3, #26]
        }

        if (scope->kind == SCOPE_LIST_COMP) {
    9110:	68bb      	ldr	r3, [r7, #8]
    9112:	681b      	ldr	r3, [r3, #0]
    9114:	2b03      	cmp	r3, #3
    9116:	d107      	bne.n	9128 <compile_scope+0x32e>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    9118:	68fb      	ldr	r3, [r7, #12]
    911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    911c:	2201      	movs	r2, #1
    911e:	2100      	movs	r1, #0
    9120:	4618      	mov	r0, r3
    9122:	f001 fc60 	bl	a9e6 <mp_emit_bc_build>
    9126:	e00a      	b.n	913e <compile_scope+0x344>
        } else if (scope->kind == SCOPE_DICT_COMP) {
    9128:	68bb      	ldr	r3, [r7, #8]
    912a:	681b      	ldr	r3, [r3, #0]
    912c:	2b04      	cmp	r3, #4
    912e:	d106      	bne.n	913e <compile_scope+0x344>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    9130:	68fb      	ldr	r3, [r7, #12]
    9132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9134:	2203      	movs	r2, #3
    9136:	2100      	movs	r1, #0
    9138:	4618      	mov	r0, r3
    913a:	f001 fc54 	bl	a9e6 <mp_emit_bc_build>
        #endif
        }

        // There are 4 slots on the stack for the iterator, and the first one is
        // NULL to indicate that the second one points to the iterator object.
        if (scope->kind == SCOPE_GEN_EXPR) {
    913e:	68bb      	ldr	r3, [r7, #8]
    9140:	681b      	ldr	r3, [r3, #0]
    9142:	2b06      	cmp	r3, #6
    9144:	d113      	bne.n	916e <compile_scope+0x374>
            MP_STATIC_ASSERT(MP_OBJ_ITER_BUF_NSLOTS == 4);
            EMIT(load_null);
    9146:	68fb      	ldr	r3, [r7, #12]
    9148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    914a:	4618      	mov	r0, r3
    914c:	f001 f936 	bl	a3bc <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    9150:	69f9      	ldr	r1, [r7, #28]
    9152:	68f8      	ldr	r0, [r7, #12]
    9154:	f7fb fef3 	bl	4f3e <compile_load_id>
            EMIT(load_null);
    9158:	68fb      	ldr	r3, [r7, #12]
    915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    915c:	4618      	mov	r0, r3
    915e:	f001 f92d 	bl	a3bc <mp_emit_bc_load_null>
            EMIT(load_null);
    9162:	68fb      	ldr	r3, [r7, #12]
    9164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9166:	4618      	mov	r0, r3
    9168:	f001 f928 	bl	a3bc <mp_emit_bc_load_null>
    916c:	e009      	b.n	9182 <compile_scope+0x388>
        } else {
            compile_load_id(comp, qstr_arg);
    916e:	69f9      	ldr	r1, [r7, #28]
    9170:	68f8      	ldr	r0, [r7, #12]
    9172:	f7fb fee4 	bl	4f3e <compile_load_id>
            EMIT_ARG(get_iter, true);
    9176:	68fb      	ldr	r3, [r7, #12]
    9178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    917a:	2101      	movs	r1, #1
    917c:	4618      	mov	r0, r3
    917e:	f001 fb8e 	bl	a89e <mp_emit_bc_get_iter>
        }

        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    9182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9184:	689a      	ldr	r2, [r3, #8]
    9186:	2300      	movs	r3, #0
    9188:	6a39      	ldr	r1, [r7, #32]
    918a:	68f8      	ldr	r0, [r7, #12]
    918c:	f7ff fd92 	bl	8cb4 <compile_scope_comp_iter>

        if (scope->kind == SCOPE_GEN_EXPR) {
    9190:	68bb      	ldr	r3, [r7, #8]
    9192:	681b      	ldr	r3, [r3, #0]
    9194:	2b06      	cmp	r3, #6
    9196:	d105      	bne.n	91a4 <compile_scope+0x3aa>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9198:	68fb      	ldr	r3, [r7, #12]
    919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    919c:	210e      	movs	r1, #14
    919e:	4618      	mov	r0, r3
    91a0:	f001 f88a 	bl	a2b8 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    91a4:	68fb      	ldr	r3, [r7, #12]
    91a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91a8:	4618      	mov	r0, r3
    91aa:	f001 fd7c 	bl	aca6 <mp_emit_bc_return_value>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    91ae:	e08c      	b.n	92ca <compile_scope+0x4d0>
    } else {
        assert(scope->kind == SCOPE_CLASS);
    91b0:	68bb      	ldr	r3, [r7, #8]
    91b2:	681b      	ldr	r3, [r3, #0]
    91b4:	2b01      	cmp	r3, #1
    91b6:	d006      	beq.n	91c6 <compile_scope+0x3cc>
    91b8:	4b4e      	ldr	r3, [pc, #312]	; (92f4 <compile_scope+0x4fa>)
    91ba:	4a4f      	ldr	r2, [pc, #316]	; (92f8 <compile_scope+0x4fe>)
    91bc:	f640 410a 	movw	r1, #3082	; 0xc0a
    91c0:	484e      	ldr	r0, [pc, #312]	; (92fc <compile_scope+0x502>)
    91c2:	f012 f80f 	bl	1b1e4 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    91c6:	68bb      	ldr	r3, [r7, #8]
    91c8:	68db      	ldr	r3, [r3, #12]
    91ca:	2b00      	cmp	r3, #0
    91cc:	d005      	beq.n	91da <compile_scope+0x3e0>
    91ce:	68bb      	ldr	r3, [r7, #8]
    91d0:	68db      	ldr	r3, [r3, #12]
    91d2:	f003 0303 	and.w	r3, r3, #3
    91d6:	2b00      	cmp	r3, #0
    91d8:	d006      	beq.n	91e8 <compile_scope+0x3ee>
    91da:	4b49      	ldr	r3, [pc, #292]	; (9300 <compile_scope+0x506>)
    91dc:	4a46      	ldr	r2, [pc, #280]	; (92f8 <compile_scope+0x4fe>)
    91de:	f640 410b 	movw	r1, #3083	; 0xc0b
    91e2:	4846      	ldr	r0, [pc, #280]	; (92fc <compile_scope+0x502>)
    91e4:	f011 fffe 	bl	1b1e4 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    91e8:	68bb      	ldr	r3, [r7, #8]
    91ea:	68db      	ldr	r3, [r3, #12]
    91ec:	633b      	str	r3, [r7, #48]	; 0x30
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    91ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    91f0:	685b      	ldr	r3, [r3, #4]
    91f2:	b2db      	uxtb	r3, r3
    91f4:	2b33      	cmp	r3, #51	; 0x33
    91f6:	d006      	beq.n	9206 <compile_scope+0x40c>
    91f8:	4b42      	ldr	r3, [pc, #264]	; (9304 <compile_scope+0x50a>)
    91fa:	4a3f      	ldr	r2, [pc, #252]	; (92f8 <compile_scope+0x4fe>)
    91fc:	f640 410d 	movw	r1, #3085	; 0xc0d
    9200:	483e      	ldr	r0, [pc, #248]	; (92fc <compile_scope+0x502>)
    9202:	f011 ffef 	bl	1b1e4 <__assert_func>

        if (comp->pass == MP_PASS_SCOPE) {
    9206:	68fb      	ldr	r3, [r7, #12]
    9208:	795b      	ldrb	r3, [r3, #5]
    920a:	2b01      	cmp	r3, #1
    920c:	d114      	bne.n	9238 <compile_scope+0x43e>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(scope, MP_QSTR___class__, &added);
    920e:	f107 0316 	add.w	r3, r7, #22
    9212:	461a      	mov	r2, r3
    9214:	2106      	movs	r1, #6
    9216:	68b8      	ldr	r0, [r7, #8]
    9218:	f7fb fc4c 	bl	4ab4 <scope_find_or_add_id>
    921c:	62f8      	str	r0, [r7, #44]	; 0x2c
            assert(added);
    921e:	7dbb      	ldrb	r3, [r7, #22]
    9220:	2b00      	cmp	r3, #0
    9222:	d106      	bne.n	9232 <compile_scope+0x438>
    9224:	4b38      	ldr	r3, [pc, #224]	; (9308 <compile_scope+0x50e>)
    9226:	4a34      	ldr	r2, [pc, #208]	; (92f8 <compile_scope+0x4fe>)
    9228:	f640 4112 	movw	r1, #3090	; 0xc12
    922c:	4833      	ldr	r0, [pc, #204]	; (92fc <compile_scope+0x502>)
    922e:	f011 ffd9 	bl	1b1e4 <__assert_func>
            id_info->kind = ID_INFO_KIND_LOCAL;
    9232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9234:	2202      	movs	r2, #2
    9236:	701a      	strb	r2, [r3, #0]
        }

        compile_load_id(comp, MP_QSTR___name__);
    9238:	211b      	movs	r1, #27
    923a:	68f8      	ldr	r0, [r7, #12]
    923c:	f7fb fe7f 	bl	4f3e <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    9240:	211a      	movs	r1, #26
    9242:	68f8      	ldr	r0, [r7, #12]
    9244:	f7fb fe9a 	bl	4f7c <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    9248:	68fb      	ldr	r3, [r7, #12]
    924a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    924e:	689b      	ldr	r3, [r3, #8]
    9250:	091b      	lsrs	r3, r3, #4
    9252:	4619      	mov	r1, r3
    9254:	4610      	mov	r0, r2
    9256:	f001 f88d 	bl	a374 <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    925a:	211f      	movs	r1, #31
    925c:	68f8      	ldr	r0, [r7, #12]
    925e:	f7fb fe8d 	bl	4f7c <compile_store_id>

        check_for_doc_string(comp, pns->nodes[2]);
    9262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9264:	691b      	ldr	r3, [r3, #16]
    9266:	4619      	mov	r1, r3
    9268:	68f8      	ldr	r0, [r7, #12]
    926a:	f7ff fdbb 	bl	8de4 <check_for_doc_string>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9270:	691b      	ldr	r3, [r3, #16]
    9272:	4619      	mov	r1, r3
    9274:	68f8      	ldr	r0, [r7, #12]
    9276:	f7ff fb64 	bl	8942 <compile_node>

        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    927a:	2106      	movs	r1, #6
    927c:	68b8      	ldr	r0, [r7, #8]
    927e:	f7fb fc64 	bl	4b4a <scope_find>
    9282:	62b8      	str	r0, [r7, #40]	; 0x28
        assert(id != NULL);
    9284:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9286:	2b00      	cmp	r3, #0
    9288:	d106      	bne.n	9298 <compile_scope+0x49e>
    928a:	4b20      	ldr	r3, [pc, #128]	; (930c <compile_scope+0x512>)
    928c:	4a1a      	ldr	r2, [pc, #104]	; (92f8 <compile_scope+0x4fe>)
    928e:	f640 411f 	movw	r1, #3103	; 0xc1f
    9292:	481a      	ldr	r0, [pc, #104]	; (92fc <compile_scope+0x502>)
    9294:	f011 ffa6 	bl	1b1e4 <__assert_func>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    9298:	6abb      	ldr	r3, [r7, #40]	; 0x28
    929a:	781b      	ldrb	r3, [r3, #0]
    929c:	2b02      	cmp	r3, #2
    929e:	d106      	bne.n	92ae <compile_scope+0x4b4>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    92a0:	68fb      	ldr	r3, [r7, #12]
    92a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92a4:	210e      	movs	r1, #14
    92a6:	4618      	mov	r0, r3
    92a8:	f001 f806 	bl	a2b8 <mp_emit_bc_load_const_tok>
    92ac:	e008      	b.n	92c0 <compile_scope+0x4c6>
        } else {
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    92ae:	68fb      	ldr	r3, [r7, #12]
    92b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    92b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92b4:	885b      	ldrh	r3, [r3, #2]
    92b6:	461a      	mov	r2, r3
    92b8:	2300      	movs	r3, #0
    92ba:	2106      	movs	r1, #6
    92bc:	f001 f88e 	bl	a3dc <mp_emit_bc_load_local>
        }
        EMIT(return_value);
    92c0:	68fb      	ldr	r3, [r7, #12]
    92c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92c4:	4618      	mov	r0, r3
    92c6:	f001 fcee 	bl	aca6 <mp_emit_bc_return_value>
    }

    EMIT(end_pass);
    92ca:	68fb      	ldr	r3, [r7, #12]
    92cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92ce:	4618      	mov	r0, r3
    92d0:	f000 fe9e 	bl	a010 <mp_emit_bc_end_pass>

    // make sure we match all the exception levels
    assert(comp->cur_except_level == 0);
    92d4:	68fb      	ldr	r3, [r7, #12]
    92d6:	8b9b      	ldrh	r3, [r3, #28]
    92d8:	2b00      	cmp	r3, #0
    92da:	d006      	beq.n	92ea <compile_scope+0x4f0>
    92dc:	4b0c      	ldr	r3, [pc, #48]	; (9310 <compile_scope+0x516>)
    92de:	4a06      	ldr	r2, [pc, #24]	; (92f8 <compile_scope+0x4fe>)
    92e0:	f640 412b 	movw	r1, #3115	; 0xc2b
    92e4:	4805      	ldr	r0, [pc, #20]	; (92fc <compile_scope+0x502>)
    92e6:	f011 ff7d 	bl	1b1e4 <__assert_func>
}
    92ea:	bf00      	nop
    92ec:	3740      	adds	r7, #64	; 0x40
    92ee:	46bd      	mov	sp, r7
    92f0:	bd80      	pop	{r7, pc}
    92f2:	bf00      	nop
    92f4:	000204c4 	.word	0x000204c4
    92f8:	000207c8 	.word	0x000207c8
    92fc:	0001f9e4 	.word	0x0001f9e4
    9300:	0002043c 	.word	0x0002043c
    9304:	000204e0 	.word	0x000204e0
    9308:	000204bc 	.word	0x000204bc
    930c:	00020510 	.word	0x00020510
    9310:	0002051c 	.word	0x0002051c

00009314 <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    9314:	b580      	push	{r7, lr}
    9316:	b092      	sub	sp, #72	; 0x48
    9318:	af00      	add	r7, sp, #0
    931a:	6078      	str	r0, [r7, #4]
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    931c:	687b      	ldr	r3, [r7, #4]
    931e:	7e1b      	ldrb	r3, [r3, #24]
    9320:	f003 0301 	and.w	r3, r3, #1
    9324:	2b00      	cmp	r3, #0
    9326:	d03c      	beq.n	93a2 <scope_compute_things+0x8e>
        id_info_t *id_param = NULL;
    9328:	2300      	movs	r3, #0
    932a:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9330:	3b01      	subs	r3, #1
    9332:	643b      	str	r3, [r7, #64]	; 0x40
    9334:	e030      	b.n	9398 <scope_compute_things+0x84>
            id_info_t *id = &scope->id_info[i];
    9336:	687b      	ldr	r3, [r7, #4]
    9338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    933a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    933c:	00db      	lsls	r3, r3, #3
    933e:	4413      	add	r3, r2
    9340:	627b      	str	r3, [r7, #36]	; 0x24
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    9342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9344:	785b      	ldrb	r3, [r3, #1]
    9346:	f003 0302 	and.w	r3, r3, #2
    934a:	2b00      	cmp	r3, #0
    934c:	d018      	beq.n	9380 <scope_compute_things+0x6c>
                if (id_param != NULL) {
    934e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9350:	2b00      	cmp	r3, #0
    9352:	d025      	beq.n	93a0 <scope_compute_things+0x8c>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    9354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    9356:	f107 0308 	add.w	r3, r7, #8
    935a:	e892 0003 	ldmia.w	r2, {r0, r1}
    935e:	e883 0003 	stmia.w	r3, {r0, r1}
    9362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9366:	e892 0003 	ldmia.w	r2, {r0, r1}
    936a:	e883 0003 	stmia.w	r3, {r0, r1}
    936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9370:	461a      	mov	r2, r3
    9372:	f107 0308 	add.w	r3, r7, #8
    9376:	e893 0003 	ldmia.w	r3, {r0, r1}
    937a:	e882 0003 	stmia.w	r2, {r0, r1}
                }
                break;
    937e:	e00f      	b.n	93a0 <scope_compute_things+0x8c>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    9380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9382:	2b00      	cmp	r3, #0
    9384:	d105      	bne.n	9392 <scope_compute_things+0x7e>
    9386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9388:	785b      	ldrb	r3, [r3, #1]
    938a:	2b01      	cmp	r3, #1
    938c:	d101      	bne.n	9392 <scope_compute_things+0x7e>
                id_param = id;
    938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9390:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    9392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9394:	3b01      	subs	r3, #1
    9396:	643b      	str	r3, [r7, #64]	; 0x40
    9398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    939a:	2b00      	cmp	r3, #0
    939c:	dacb      	bge.n	9336 <scope_compute_things+0x22>
    939e:	e000      	b.n	93a2 <scope_compute_things+0x8e>
                break;
    93a0:	bf00      	nop
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	2200      	movs	r2, #0
    93a6:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    93a8:	2300      	movs	r3, #0
    93aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    93ac:	e02f      	b.n	940e <scope_compute_things+0xfa>
        id_info_t *id = &scope->id_info[i];
    93ae:	687b      	ldr	r3, [r7, #4]
    93b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    93b4:	00db      	lsls	r3, r3, #3
    93b6:	4413      	add	r3, r2
    93b8:	623b      	str	r3, [r7, #32]
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    93ba:	687b      	ldr	r3, [r7, #4]
    93bc:	681b      	ldr	r3, [r3, #0]
    93be:	2b01      	cmp	r3, #1
    93c0:	d103      	bne.n	93ca <scope_compute_things+0xb6>
    93c2:	6a3b      	ldr	r3, [r7, #32]
    93c4:	685b      	ldr	r3, [r3, #4]
    93c6:	2b06      	cmp	r3, #6
    93c8:	d01d      	beq.n	9406 <scope_compute_things+0xf2>
            // __class__ is not counted as a local; if it's used then it becomes a ID_INFO_KIND_CELL
            continue;
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	681b      	ldr	r3, [r3, #0]
    93ce:	2b01      	cmp	r3, #1
    93d0:	d906      	bls.n	93e0 <scope_compute_things+0xcc>
    93d2:	6a3b      	ldr	r3, [r7, #32]
    93d4:	781b      	ldrb	r3, [r3, #0]
    93d6:	2b00      	cmp	r3, #0
    93d8:	d102      	bne.n	93e0 <scope_compute_things+0xcc>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    93da:	6a3b      	ldr	r3, [r7, #32]
    93dc:	2201      	movs	r2, #1
    93de:	701a      	strb	r2, [r3, #0]
        }
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    93e0:	6a3b      	ldr	r3, [r7, #32]
    93e2:	781b      	ldrb	r3, [r3, #0]
    93e4:	2b02      	cmp	r3, #2
    93e6:	d005      	beq.n	93f4 <scope_compute_things+0xe0>
    93e8:	6a3b      	ldr	r3, [r7, #32]
    93ea:	785b      	ldrb	r3, [r3, #1]
    93ec:	f003 0301 	and.w	r3, r3, #1
    93f0:	2b00      	cmp	r3, #0
    93f2:	d009      	beq.n	9408 <scope_compute_things+0xf4>
            id->local_num = scope->num_locals++;
    93f4:	687b      	ldr	r3, [r7, #4]
    93f6:	8c1b      	ldrh	r3, [r3, #32]
    93f8:	1c5a      	adds	r2, r3, #1
    93fa:	b291      	uxth	r1, r2
    93fc:	687a      	ldr	r2, [r7, #4]
    93fe:	8411      	strh	r1, [r2, #32]
    9400:	6a3a      	ldr	r2, [r7, #32]
    9402:	8053      	strh	r3, [r2, #2]
    9404:	e000      	b.n	9408 <scope_compute_things+0xf4>
            continue;
    9406:	bf00      	nop
    for (int i = 0; i < scope->id_info_len; i++) {
    9408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    940a:	3301      	adds	r3, #1
    940c:	63fb      	str	r3, [r7, #60]	; 0x3c
    940e:	687b      	ldr	r3, [r7, #4]
    9410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9412:	461a      	mov	r2, r3
    9414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9416:	429a      	cmp	r2, r3
    9418:	dcc9      	bgt.n	93ae <scope_compute_things+0x9a>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    941a:	2300      	movs	r3, #0
    941c:	63bb      	str	r3, [r7, #56]	; 0x38
    941e:	e01c      	b.n	945a <scope_compute_things+0x146>
        id_info_t *id = &scope->id_info[i];
    9420:	687b      	ldr	r3, [r7, #4]
    9422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9426:	00db      	lsls	r3, r3, #3
    9428:	4413      	add	r3, r2
    942a:	61fb      	str	r3, [r7, #28]
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    942c:	69fb      	ldr	r3, [r7, #28]
    942e:	781b      	ldrb	r3, [r3, #0]
    9430:	2b03      	cmp	r3, #3
    9432:	d10f      	bne.n	9454 <scope_compute_things+0x140>
    9434:	69fb      	ldr	r3, [r7, #28]
    9436:	785b      	ldrb	r3, [r3, #1]
    9438:	f003 0301 	and.w	r3, r3, #1
    943c:	2b00      	cmp	r3, #0
    943e:	d109      	bne.n	9454 <scope_compute_things+0x140>
            id->local_num = scope->num_locals;
    9440:	687b      	ldr	r3, [r7, #4]
    9442:	8c1a      	ldrh	r2, [r3, #32]
    9444:	69fb      	ldr	r3, [r7, #28]
    9446:	805a      	strh	r2, [r3, #2]
            scope->num_locals += 1;
    9448:	687b      	ldr	r3, [r7, #4]
    944a:	8c1b      	ldrh	r3, [r3, #32]
    944c:	3301      	adds	r3, #1
    944e:	b29a      	uxth	r2, r3
    9450:	687b      	ldr	r3, [r7, #4]
    9452:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    9454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9456:	3301      	adds	r3, #1
    9458:	63bb      	str	r3, [r7, #56]	; 0x38
    945a:	687b      	ldr	r3, [r7, #4]
    945c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    945e:	461a      	mov	r2, r3
    9460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9462:	429a      	cmp	r2, r3
    9464:	dcdc      	bgt.n	9420 <scope_compute_things+0x10c>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    9466:	687b      	ldr	r3, [r7, #4]
    9468:	685b      	ldr	r3, [r3, #4]
    946a:	2b00      	cmp	r3, #0
    946c:	f000 8085 	beq.w	957a <scope_compute_things+0x266>
        int num_free = 0;
    9470:	2300      	movs	r3, #0
    9472:	637b      	str	r3, [r7, #52]	; 0x34
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    9474:	2300      	movs	r3, #0
    9476:	633b      	str	r3, [r7, #48]	; 0x30
    9478:	e041      	b.n	94fe <scope_compute_things+0x1ea>
            id_info_t *id = &scope->parent->id_info[i];
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	685b      	ldr	r3, [r3, #4]
    947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9482:	00db      	lsls	r3, r3, #3
    9484:	4413      	add	r3, r2
    9486:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    9488:	69bb      	ldr	r3, [r7, #24]
    948a:	781b      	ldrb	r3, [r3, #0]
    948c:	2b03      	cmp	r3, #3
    948e:	d003      	beq.n	9498 <scope_compute_things+0x184>
    9490:	69bb      	ldr	r3, [r7, #24]
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	2b04      	cmp	r3, #4
    9496:	d12f      	bne.n	94f8 <scope_compute_things+0x1e4>
                for (int j = 0; j < scope->id_info_len; j++) {
    9498:	2300      	movs	r3, #0
    949a:	62fb      	str	r3, [r7, #44]	; 0x2c
    949c:	e026      	b.n	94ec <scope_compute_things+0x1d8>
                    id_info_t *id2 = &scope->id_info[j];
    949e:	687b      	ldr	r3, [r7, #4]
    94a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    94a4:	00db      	lsls	r3, r3, #3
    94a6:	4413      	add	r3, r2
    94a8:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    94aa:	697b      	ldr	r3, [r7, #20]
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	2b04      	cmp	r3, #4
    94b0:	d119      	bne.n	94e6 <scope_compute_things+0x1d2>
    94b2:	69bb      	ldr	r3, [r7, #24]
    94b4:	685a      	ldr	r2, [r3, #4]
    94b6:	697b      	ldr	r3, [r7, #20]
    94b8:	685b      	ldr	r3, [r3, #4]
    94ba:	429a      	cmp	r2, r3
    94bc:	d113      	bne.n	94e6 <scope_compute_things+0x1d2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    94be:	697b      	ldr	r3, [r7, #20]
    94c0:	785b      	ldrb	r3, [r3, #1]
    94c2:	f003 0301 	and.w	r3, r3, #1
    94c6:	2b00      	cmp	r3, #0
    94c8:	d006      	beq.n	94d8 <scope_compute_things+0x1c4>
    94ca:	4b2e      	ldr	r3, [pc, #184]	; (9584 <scope_compute_things+0x270>)
    94cc:	4a2e      	ldr	r2, [pc, #184]	; (9588 <scope_compute_things+0x274>)
    94ce:	f640 5109 	movw	r1, #3337	; 0xd09
    94d2:	482e      	ldr	r0, [pc, #184]	; (958c <scope_compute_things+0x278>)
    94d4:	f011 fe86 	bl	1b1e4 <__assert_func>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    94d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94da:	b29a      	uxth	r2, r3
    94dc:	697b      	ldr	r3, [r7, #20]
    94de:	805a      	strh	r2, [r3, #2]
                        num_free += 1;
    94e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94e2:	3301      	adds	r3, #1
    94e4:	637b      	str	r3, [r7, #52]	; 0x34
                for (int j = 0; j < scope->id_info_len; j++) {
    94e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    94e8:	3301      	adds	r3, #1
    94ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    94ec:	687b      	ldr	r3, [r7, #4]
    94ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    94f0:	461a      	mov	r2, r3
    94f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    94f4:	429a      	cmp	r2, r3
    94f6:	dcd2      	bgt.n	949e <scope_compute_things+0x18a>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    94f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    94fa:	3301      	adds	r3, #1
    94fc:	633b      	str	r3, [r7, #48]	; 0x30
    94fe:	687b      	ldr	r3, [r7, #4]
    9500:	685b      	ldr	r3, [r3, #4]
    9502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9504:	461a      	mov	r2, r3
    9506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9508:	429a      	cmp	r2, r3
    950a:	dcb6      	bgt.n	947a <scope_compute_things+0x166>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    950c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    950e:	2b00      	cmp	r3, #0
    9510:	dd33      	ble.n	957a <scope_compute_things+0x266>
            for (int i = 0; i < scope->id_info_len; i++) {
    9512:	2300      	movs	r3, #0
    9514:	62bb      	str	r3, [r7, #40]	; 0x28
    9516:	e01a      	b.n	954e <scope_compute_things+0x23a>
                id_info_t *id = &scope->id_info[i];
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    951e:	00db      	lsls	r3, r3, #3
    9520:	4413      	add	r3, r2
    9522:	613b      	str	r3, [r7, #16]
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    9524:	693b      	ldr	r3, [r7, #16]
    9526:	781b      	ldrb	r3, [r3, #0]
    9528:	2b04      	cmp	r3, #4
    952a:	d105      	bne.n	9538 <scope_compute_things+0x224>
    952c:	693b      	ldr	r3, [r7, #16]
    952e:	785b      	ldrb	r3, [r3, #1]
    9530:	f003 0301 	and.w	r3, r3, #1
    9534:	2b00      	cmp	r3, #0
    9536:	d007      	beq.n	9548 <scope_compute_things+0x234>
                    id->local_num += num_free;
    9538:	693b      	ldr	r3, [r7, #16]
    953a:	885a      	ldrh	r2, [r3, #2]
    953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    953e:	b29b      	uxth	r3, r3
    9540:	4413      	add	r3, r2
    9542:	b29a      	uxth	r2, r3
    9544:	693b      	ldr	r3, [r7, #16]
    9546:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    9548:	6abb      	ldr	r3, [r7, #40]	; 0x28
    954a:	3301      	adds	r3, #1
    954c:	62bb      	str	r3, [r7, #40]	; 0x28
    954e:	687b      	ldr	r3, [r7, #4]
    9550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9552:	461a      	mov	r2, r3
    9554:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9556:	429a      	cmp	r2, r3
    9558:	dcde      	bgt.n	9518 <scope_compute_things+0x204>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    955a:	687b      	ldr	r3, [r7, #4]
    955c:	8b5a      	ldrh	r2, [r3, #26]
    955e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9560:	b29b      	uxth	r3, r3
    9562:	4413      	add	r3, r2
    9564:	b29a      	uxth	r2, r3
    9566:	687b      	ldr	r3, [r7, #4]
    9568:	835a      	strh	r2, [r3, #26]
            scope->num_locals += num_free;
    956a:	687b      	ldr	r3, [r7, #4]
    956c:	8c1a      	ldrh	r2, [r3, #32]
    956e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9570:	b29b      	uxth	r3, r3
    9572:	4413      	add	r3, r2
    9574:	b29a      	uxth	r2, r3
    9576:	687b      	ldr	r3, [r7, #4]
    9578:	841a      	strh	r2, [r3, #32]
        }
    }
}
    957a:	bf00      	nop
    957c:	3748      	adds	r7, #72	; 0x48
    957e:	46bd      	mov	sp, r7
    9580:	bd80      	pop	{r7, pc}
    9582:	bf00      	nop
    9584:	00020538 	.word	0x00020538
    9588:	000207d8 	.word	0x000207d8
    958c:	0001f9e4 	.word	0x0001f9e4

00009590 <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9590:	b580      	push	{r7, lr}
    9592:	b09a      	sub	sp, #104	; 0x68
    9594:	af00      	add	r7, sp, #0
    9596:	60f8      	str	r0, [r7, #12]
    9598:	60b9      	str	r1, [r7, #8]
    959a:	607a      	str	r2, [r7, #4]
    959c:	70fb      	strb	r3, [r7, #3]
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    959e:	f107 0314 	add.w	r3, r7, #20
    95a2:	222c      	movs	r2, #44	; 0x2c
    95a4:	2100      	movs	r1, #0
    95a6:	4618      	mov	r0, r3
    95a8:	f013 f874 	bl	1c694 <memset>
    compiler_t *comp = &comp_state;
    95ac:	f107 0314 	add.w	r3, r7, #20
    95b0:	653b      	str	r3, [r7, #80]	; 0x50

    comp->source_file = source_file;
    95b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    95b4:	68ba      	ldr	r2, [r7, #8]
    95b6:	601a      	str	r2, [r3, #0]
    comp->is_repl = is_repl;
    95b8:	78fa      	ldrb	r2, [r7, #3]
    95ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    95bc:	711a      	strb	r2, [r3, #4]
    comp->break_label = INVALID_LABEL;
    95be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    95c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    95c4:	831a      	strh	r2, [r3, #24]
    comp->continue_label = INVALID_LABEL;
    95c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    95c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    95cc:	835a      	strh	r2, [r3, #26]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    95ce:	68fb      	ldr	r3, [r7, #12]
    95d0:	681a      	ldr	r2, [r3, #0]
    95d2:	687b      	ldr	r3, [r7, #4]
    95d4:	2100      	movs	r1, #0
    95d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    95d8:	f7fb fc18 	bl	4e0c <scope_new_and_link>
    95dc:	64f8      	str	r0, [r7, #76]	; 0x4c

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    95de:	f000 f953 	bl	9888 <emit_bc_new>
    95e2:	64b8      	str	r0, [r7, #72]	; 0x48

    // compile pass 1
    comp->emit = emit_bc;
    95e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    95e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    95e8:	629a      	str	r2, [r3, #40]	; 0x28
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    95ea:	2300      	movs	r3, #0
    95ec:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    95ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    95f0:	6a1b      	ldr	r3, [r3, #32]
    95f2:	663b      	str	r3, [r7, #96]	; 0x60
    95f4:	e00f      	b.n	9616 <mp_compile_to_raw_code+0x86>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    95f6:	2201      	movs	r2, #1
    95f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
    95fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
    95fc:	f7ff fbfd 	bl	8dfa <compile_scope>
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    9600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9602:	691a      	ldr	r2, [r3, #16]
    9604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9606:	429a      	cmp	r2, r3
    9608:	d902      	bls.n	9610 <mp_compile_to_raw_code+0x80>
            max_num_labels = comp->next_label;
    960a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    960c:	691b      	ldr	r3, [r3, #16]
    960e:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9612:	689b      	ldr	r3, [r3, #8]
    9614:	663b      	str	r3, [r7, #96]	; 0x60
    9616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9618:	2b00      	cmp	r3, #0
    961a:	d003      	beq.n	9624 <mp_compile_to_raw_code+0x94>
    961c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    961e:	689b      	ldr	r3, [r3, #8]
    9620:	2b00      	cmp	r3, #0
    9622:	d0e8      	beq.n	95f6 <mp_compile_to_raw_code+0x66>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9626:	6a1b      	ldr	r3, [r3, #32]
    9628:	65fb      	str	r3, [r7, #92]	; 0x5c
    962a:	e005      	b.n	9638 <mp_compile_to_raw_code+0xa8>
        scope_compute_things(s);
    962c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    962e:	f7ff fe71 	bl	9314 <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9634:	689b      	ldr	r3, [r3, #8]
    9636:	65fb      	str	r3, [r7, #92]	; 0x5c
    9638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    963a:	2b00      	cmp	r3, #0
    963c:	d003      	beq.n	9646 <mp_compile_to_raw_code+0xb6>
    963e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9640:	689b      	ldr	r3, [r3, #8]
    9642:	2b00      	cmp	r3, #0
    9644:	d0f2      	beq.n	962c <mp_compile_to_raw_code+0x9c>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    9646:	6e79      	ldr	r1, [r7, #100]	; 0x64
    9648:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    964a:	f000 f929 	bl	98a0 <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    964e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9650:	6a1b      	ldr	r3, [r3, #32]
    9652:	65bb      	str	r3, [r7, #88]	; 0x58
    9654:	e01d      	b.n	9692 <mp_compile_to_raw_code+0x102>
                    EMIT_ARG(set_native_type, MP_EMIT_NATIVE_TYPE_ENABLE, s->emit_options == MP_EMIT_OPT_VIPER, 0);
                    break;
#endif // MICROPY_EMIT_NATIVE

                default:
                    comp->emit = emit_bc;
    9656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9658:	6cba      	ldr	r2, [r7, #72]	; 0x48
    965a:	629a      	str	r2, [r3, #40]	; 0x28
                    #if MICROPY_EMIT_NATIVE
                    comp->emit_method_table = &emit_bc_method_table;
                    #endif
                    break;
    965c:	bf00      	nop
            }

            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    965e:	2202      	movs	r2, #2
    9660:	6db9      	ldr	r1, [r7, #88]	; 0x58
    9662:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9664:	f7ff fbc9 	bl	8dfa <compile_scope>

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
    9668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    966a:	689b      	ldr	r3, [r3, #8]
    966c:	2b00      	cmp	r3, #0
    966e:	d104      	bne.n	967a <mp_compile_to_raw_code+0xea>
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    9670:	2203      	movs	r2, #3
    9672:	6db9      	ldr	r1, [r7, #88]	; 0x58
    9674:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9676:	f7ff fbc0 	bl	8dfa <compile_scope>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    967a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    967c:	689b      	ldr	r3, [r3, #8]
    967e:	2b00      	cmp	r3, #0
    9680:	d104      	bne.n	968c <mp_compile_to_raw_code+0xfc>
                compile_scope(comp, s, MP_PASS_EMIT);
    9682:	2204      	movs	r2, #4
    9684:	6db9      	ldr	r1, [r7, #88]	; 0x58
    9686:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9688:	f7ff fbb7 	bl	8dfa <compile_scope>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    968c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    968e:	689b      	ldr	r3, [r3, #8]
    9690:	65bb      	str	r3, [r7, #88]	; 0x58
    9692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9694:	2b00      	cmp	r3, #0
    9696:	d003      	beq.n	96a0 <mp_compile_to_raw_code+0x110>
    9698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    969a:	689b      	ldr	r3, [r3, #8]
    969c:	2b00      	cmp	r3, #0
    969e:	d0da      	beq.n	9656 <mp_compile_to_raw_code+0xc6>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    96a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96a2:	689b      	ldr	r3, [r3, #8]
    96a4:	2b00      	cmp	r3, #0
    96a6:	d011      	beq.n	96cc <mp_compile_to_raw_code+0x13c>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    96a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    96ac:	68db      	ldr	r3, [r3, #12]
    96ae:	4619      	mov	r1, r3
    96b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
    96b2:	f7fb fb2b 	bl	4d0c <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    96b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96b8:	6898      	ldr	r0, [r3, #8]
    96ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96bc:	6819      	ldr	r1, [r3, #0]
    96be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96c0:	68da      	ldr	r2, [r3, #12]
            comp->compile_error_line, comp->scope_cur->simple_name);
    96c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    96c6:	8a5b      	ldrh	r3, [r3, #18]
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    96c8:	f005 ffb6 	bl	f638 <mp_obj_exception_add_traceback>
    }

    // free the emitters

    emit_bc_free(emit_bc);
    96cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    96ce:	f000 f8fc 	bl	98ca <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    96d2:	68f8      	ldr	r0, [r7, #12]
    96d4:	f7fb f96c 	bl	49b0 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    96d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    96da:	695b      	ldr	r3, [r3, #20]
    96dc:	647b      	str	r3, [r7, #68]	; 0x44
    for (scope_t *s = module_scope; s;) {
    96de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    96e0:	657b      	str	r3, [r7, #84]	; 0x54
    96e2:	e007      	b.n	96f4 <mp_compile_to_raw_code+0x164>
        scope_t *next = s->next;
    96e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96e6:	689b      	ldr	r3, [r3, #8]
    96e8:	643b      	str	r3, [r7, #64]	; 0x40
        scope_free(s);
    96ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
    96ec:	f7fb f9d2 	bl	4a94 <scope_free>
        s = next;
    96f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    96f2:	657b      	str	r3, [r7, #84]	; 0x54
    for (scope_t *s = module_scope; s;) {
    96f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96f6:	2b00      	cmp	r3, #0
    96f8:	d1f4      	bne.n	96e4 <mp_compile_to_raw_code+0x154>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    96fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96fc:	689b      	ldr	r3, [r3, #8]
    96fe:	2b00      	cmp	r3, #0
    9700:	d004      	beq.n	970c <mp_compile_to_raw_code+0x17c>
        nlr_raise(comp->compile_error);
    9702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9704:	689b      	ldr	r3, [r3, #8]
    9706:	4618      	mov	r0, r3
    9708:	f7f6 fdea 	bl	2e0 <nlr_jump>
    } else {
        return outer_raw_code;
    970c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
    970e:	4618      	mov	r0, r3
    9710:	3768      	adds	r7, #104	; 0x68
    9712:	46bd      	mov	sp, r7
    9714:	bd80      	pop	{r7, pc}

00009716 <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9716:	b580      	push	{r7, lr}
    9718:	b086      	sub	sp, #24
    971a:	af00      	add	r7, sp, #0
    971c:	60f8      	str	r0, [r7, #12]
    971e:	60b9      	str	r1, [r7, #8]
    9720:	607a      	str	r2, [r7, #4]
    9722:	70fb      	strb	r3, [r7, #3]
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    9724:	78fb      	ldrb	r3, [r7, #3]
    9726:	687a      	ldr	r2, [r7, #4]
    9728:	68b9      	ldr	r1, [r7, #8]
    972a:	68f8      	ldr	r0, [r7, #12]
    972c:	f7ff ff30 	bl	9590 <mp_compile_to_raw_code>
    9730:	6178      	str	r0, [r7, #20]
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    9732:	2200      	movs	r2, #0
    9734:	2100      	movs	r1, #0
    9736:	6978      	ldr	r0, [r7, #20]
    9738:	f001 fd17 	bl	b16a <mp_make_function_from_raw_code>
    973c:	4603      	mov	r3, r0
}
    973e:	4618      	mov	r0, r3
    9740:	3718      	adds	r7, #24
    9742:	46bd      	mov	sp, r7
    9744:	bd80      	pop	{r7, pc}
    9746:	bf00      	nop

00009748 <mp_emit_common_get_id_for_load>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    9748:	b580      	push	{r7, lr}
    974a:	b084      	sub	sp, #16
    974c:	af00      	add	r7, sp, #0
    974e:	6078      	str	r0, [r7, #4]
    9750:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    9752:	f107 030b 	add.w	r3, r7, #11
    9756:	461a      	mov	r2, r3
    9758:	6839      	ldr	r1, [r7, #0]
    975a:	6878      	ldr	r0, [r7, #4]
    975c:	f7fb f9aa 	bl	4ab4 <scope_find_or_add_id>
    9760:	60f8      	str	r0, [r7, #12]
    if (added) {
    9762:	7afb      	ldrb	r3, [r7, #11]
    9764:	2b00      	cmp	r3, #0
    9766:	d004      	beq.n	9772 <mp_emit_common_get_id_for_load+0x2a>
        scope_find_local_and_close_over(scope, id, qst);
    9768:	683a      	ldr	r2, [r7, #0]
    976a:	68f9      	ldr	r1, [r7, #12]
    976c:	6878      	ldr	r0, [r7, #4]
    976e:	f7fb fa7b 	bl	4c68 <scope_find_local_and_close_over>
    }
}
    9772:	bf00      	nop
    9774:	3710      	adds	r7, #16
    9776:	46bd      	mov	sp, r7
    9778:	bd80      	pop	{r7, pc}

0000977a <mp_emit_common_get_id_for_modification>:

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    977a:	b580      	push	{r7, lr}
    977c:	b084      	sub	sp, #16
    977e:	af00      	add	r7, sp, #0
    9780:	6078      	str	r0, [r7, #4]
    9782:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    9784:	f107 030b 	add.w	r3, r7, #11
    9788:	461a      	mov	r2, r3
    978a:	6839      	ldr	r1, [r7, #0]
    978c:	6878      	ldr	r0, [r7, #4]
    978e:	f7fb f991 	bl	4ab4 <scope_find_or_add_id>
    9792:	60f8      	str	r0, [r7, #12]
    if (added) {
    9794:	7afb      	ldrb	r3, [r7, #11]
    9796:	2b00      	cmp	r3, #0
    9798:	d00b      	beq.n	97b2 <mp_emit_common_get_id_for_modification+0x38>
        if (SCOPE_IS_FUNC_LIKE(scope->kind)) {
    979a:	687b      	ldr	r3, [r7, #4]
    979c:	681b      	ldr	r3, [r3, #0]
    979e:	2b01      	cmp	r3, #1
    97a0:	d903      	bls.n	97aa <mp_emit_common_get_id_for_modification+0x30>
            id->kind = ID_INFO_KIND_LOCAL;
    97a2:	68fb      	ldr	r3, [r7, #12]
    97a4:	2202      	movs	r2, #2
    97a6:	701a      	strb	r2, [r3, #0]
        }
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    }
}
    97a8:	e00e      	b.n	97c8 <mp_emit_common_get_id_for_modification+0x4e>
            id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    97aa:	68fb      	ldr	r3, [r7, #12]
    97ac:	2200      	movs	r2, #0
    97ae:	701a      	strb	r2, [r3, #0]
}
    97b0:	e00a      	b.n	97c8 <mp_emit_common_get_id_for_modification+0x4e>
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    97b2:	687b      	ldr	r3, [r7, #4]
    97b4:	681b      	ldr	r3, [r3, #0]
    97b6:	2b01      	cmp	r3, #1
    97b8:	d906      	bls.n	97c8 <mp_emit_common_get_id_for_modification+0x4e>
    97ba:	68fb      	ldr	r3, [r7, #12]
    97bc:	781b      	ldrb	r3, [r3, #0]
    97be:	2b00      	cmp	r3, #0
    97c0:	d102      	bne.n	97c8 <mp_emit_common_get_id_for_modification+0x4e>
        id->kind = ID_INFO_KIND_LOCAL;
    97c2:	68fb      	ldr	r3, [r7, #12]
    97c4:	2202      	movs	r2, #2
    97c6:	701a      	strb	r2, [r3, #0]
}
    97c8:	bf00      	nop
    97ca:	3710      	adds	r7, #16
    97cc:	46bd      	mov	sp, r7
    97ce:	bd80      	pop	{r7, pc}

000097d0 <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    97d0:	b590      	push	{r4, r7, lr}
    97d2:	b087      	sub	sp, #28
    97d4:	af00      	add	r7, sp, #0
    97d6:	60f8      	str	r0, [r7, #12]
    97d8:	60b9      	str	r1, [r7, #8]
    97da:	607a      	str	r2, [r7, #4]
    97dc:	603b      	str	r3, [r7, #0]
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    97de:	6839      	ldr	r1, [r7, #0]
    97e0:	6878      	ldr	r0, [r7, #4]
    97e2:	f7fb f9b2 	bl	4b4a <scope_find>
    97e6:	6178      	str	r0, [r7, #20]
    assert(id != NULL);
    97e8:	697b      	ldr	r3, [r7, #20]
    97ea:	2b00      	cmp	r3, #0
    97ec:	d105      	bne.n	97fa <mp_emit_common_id_op+0x2a>
    97ee:	4b22      	ldr	r3, [pc, #136]	; (9878 <mp_emit_common_id_op+0xa8>)
    97f0:	4a22      	ldr	r2, [pc, #136]	; (987c <mp_emit_common_id_op+0xac>)
    97f2:	213e      	movs	r1, #62	; 0x3e
    97f4:	4822      	ldr	r0, [pc, #136]	; (9880 <mp_emit_common_id_op+0xb0>)
    97f6:	f011 fcf5 	bl	1b1e4 <__assert_func>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    97fa:	697b      	ldr	r3, [r7, #20]
    97fc:	781b      	ldrb	r3, [r3, #0]
    97fe:	2b00      	cmp	r3, #0
    9800:	d106      	bne.n	9810 <mp_emit_common_id_op+0x40>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_NAME);
    9802:	68bb      	ldr	r3, [r7, #8]
    9804:	685b      	ldr	r3, [r3, #4]
    9806:	2200      	movs	r2, #0
    9808:	6839      	ldr	r1, [r7, #0]
    980a:	68f8      	ldr	r0, [r7, #12]
    980c:	4798      	blx	r3
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    }
}
    980e:	e02f      	b.n	9870 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    9810:	697b      	ldr	r3, [r7, #20]
    9812:	781b      	ldrb	r3, [r3, #0]
    9814:	2b01      	cmp	r3, #1
    9816:	d106      	bne.n	9826 <mp_emit_common_id_op+0x56>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_GLOBAL);
    9818:	68bb      	ldr	r3, [r7, #8]
    981a:	685b      	ldr	r3, [r3, #4]
    981c:	2201      	movs	r2, #1
    981e:	6839      	ldr	r1, [r7, #0]
    9820:	68f8      	ldr	r0, [r7, #12]
    9822:	4798      	blx	r3
}
    9824:	e024      	b.n	9870 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    9826:	697b      	ldr	r3, [r7, #20]
    9828:	781b      	ldrb	r3, [r3, #0]
    982a:	2b02      	cmp	r3, #2
    982c:	d109      	bne.n	9842 <mp_emit_common_id_op+0x72>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    982e:	68bb      	ldr	r3, [r7, #8]
    9830:	681c      	ldr	r4, [r3, #0]
    9832:	697b      	ldr	r3, [r7, #20]
    9834:	885b      	ldrh	r3, [r3, #2]
    9836:	461a      	mov	r2, r3
    9838:	2300      	movs	r3, #0
    983a:	6839      	ldr	r1, [r7, #0]
    983c:	68f8      	ldr	r0, [r7, #12]
    983e:	47a0      	blx	r4
}
    9840:	e016      	b.n	9870 <mp_emit_common_id_op+0xa0>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    9842:	697b      	ldr	r3, [r7, #20]
    9844:	781b      	ldrb	r3, [r3, #0]
    9846:	2b03      	cmp	r3, #3
    9848:	d009      	beq.n	985e <mp_emit_common_id_op+0x8e>
    984a:	697b      	ldr	r3, [r7, #20]
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	2b04      	cmp	r3, #4
    9850:	d005      	beq.n	985e <mp_emit_common_id_op+0x8e>
    9852:	4b0c      	ldr	r3, [pc, #48]	; (9884 <mp_emit_common_id_op+0xb4>)
    9854:	4a09      	ldr	r2, [pc, #36]	; (987c <mp_emit_common_id_op+0xac>)
    9856:	2148      	movs	r1, #72	; 0x48
    9858:	4809      	ldr	r0, [pc, #36]	; (9880 <mp_emit_common_id_op+0xb0>)
    985a:	f011 fcc3 	bl	1b1e4 <__assert_func>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    985e:	68bb      	ldr	r3, [r7, #8]
    9860:	681c      	ldr	r4, [r3, #0]
    9862:	697b      	ldr	r3, [r7, #20]
    9864:	885b      	ldrh	r3, [r3, #2]
    9866:	461a      	mov	r2, r3
    9868:	2301      	movs	r3, #1
    986a:	6839      	ldr	r1, [r7, #0]
    986c:	68f8      	ldr	r0, [r7, #12]
    986e:	47a0      	blx	r4
}
    9870:	bf00      	nop
    9872:	371c      	adds	r7, #28
    9874:	46bd      	mov	sp, r7
    9876:	bd90      	pop	{r4, r7, pc}
    9878:	000207f0 	.word	0x000207f0
    987c:	00020854 	.word	0x00020854
    9880:	000207fc 	.word	0x000207fc
    9884:	00020814 	.word	0x00020814

00009888 <emit_bc_new>:
    uint16_t ct_cur_raw_code;
    #endif
    mp_uint_t *const_table;
};

emit_t *emit_bc_new(void) {
    9888:	b580      	push	{r7, lr}
    988a:	b082      	sub	sp, #8
    988c:	af00      	add	r7, sp, #0
    emit_t *emit = m_new0(emit_t, 1);
    988e:	2040      	movs	r0, #64	; 0x40
    9890:	f7f6 fd69 	bl	366 <m_malloc0>
    9894:	6078      	str	r0, [r7, #4]
    return emit;
    9896:	687b      	ldr	r3, [r7, #4]
}
    9898:	4618      	mov	r0, r3
    989a:	3708      	adds	r7, #8
    989c:	46bd      	mov	sp, r7
    989e:	bd80      	pop	{r7, pc}

000098a0 <emit_bc_set_max_num_labels>:

void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    98a0:	b580      	push	{r7, lr}
    98a2:	b082      	sub	sp, #8
    98a4:	af00      	add	r7, sp, #0
    98a6:	6078      	str	r0, [r7, #4]
    98a8:	6039      	str	r1, [r7, #0]
    emit->max_num_labels = max_num_labels;
    98aa:	687b      	ldr	r3, [r7, #4]
    98ac:	683a      	ldr	r2, [r7, #0]
    98ae:	619a      	str	r2, [r3, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    98b0:	687b      	ldr	r3, [r7, #4]
    98b2:	699b      	ldr	r3, [r3, #24]
    98b4:	009b      	lsls	r3, r3, #2
    98b6:	4618      	mov	r0, r3
    98b8:	f7f6 fd30 	bl	31c <m_malloc>
    98bc:	4602      	mov	r2, r0
    98be:	687b      	ldr	r3, [r7, #4]
    98c0:	61da      	str	r2, [r3, #28]
}
    98c2:	bf00      	nop
    98c4:	3708      	adds	r7, #8
    98c6:	46bd      	mov	sp, r7
    98c8:	bd80      	pop	{r7, pc}

000098ca <emit_bc_free>:

void emit_bc_free(emit_t *emit) {
    98ca:	b580      	push	{r7, lr}
    98cc:	b082      	sub	sp, #8
    98ce:	af00      	add	r7, sp, #0
    98d0:	6078      	str	r0, [r7, #4]
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    98d2:	687b      	ldr	r3, [r7, #4]
    98d4:	69db      	ldr	r3, [r3, #28]
    98d6:	4618      	mov	r0, r3
    98d8:	f7f6 fd7e 	bl	3d8 <m_free>
    m_del_obj(emit_t, emit);
    98dc:	6878      	ldr	r0, [r7, #4]
    98de:	f7f6 fd7b 	bl	3d8 <m_free>
}
    98e2:	bf00      	nop
    98e4:	3708      	adds	r7, #8
    98e6:	46bd      	mov	sp, r7
    98e8:	bd80      	pop	{r7, pc}

000098ea <emit_write_uint>:

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    98ea:	b580      	push	{r7, lr}
    98ec:	b088      	sub	sp, #32
    98ee:	af00      	add	r7, sp, #0
    98f0:	60f8      	str	r0, [r7, #12]
    98f2:	60b9      	str	r1, [r7, #8]
    98f4:	607a      	str	r2, [r7, #4]
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    98f6:	f107 0310 	add.w	r3, r7, #16
    98fa:	3305      	adds	r3, #5
    98fc:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    98fe:	69fb      	ldr	r3, [r7, #28]
    9900:	3b01      	subs	r3, #1
    9902:	61fb      	str	r3, [r7, #28]
    9904:	687b      	ldr	r3, [r7, #4]
    9906:	b2db      	uxtb	r3, r3
    9908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    990c:	b2da      	uxtb	r2, r3
    990e:	69fb      	ldr	r3, [r7, #28]
    9910:	701a      	strb	r2, [r3, #0]
        val >>= 7;
    9912:	687b      	ldr	r3, [r7, #4]
    9914:	09db      	lsrs	r3, r3, #7
    9916:	607b      	str	r3, [r7, #4]
    } while (val != 0);
    9918:	687b      	ldr	r3, [r7, #4]
    991a:	2b00      	cmp	r3, #0
    991c:	d1ef      	bne.n	98fe <emit_write_uint+0x14>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    991e:	f107 0310 	add.w	r3, r7, #16
    9922:	3305      	adds	r3, #5
    9924:	461a      	mov	r2, r3
    9926:	69fb      	ldr	r3, [r7, #28]
    9928:	1ad2      	subs	r2, r2, r3
    992a:	68bb      	ldr	r3, [r7, #8]
    992c:	4611      	mov	r1, r2
    992e:	68f8      	ldr	r0, [r7, #12]
    9930:	4798      	blx	r3
    9932:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9934:	e00a      	b.n	994c <emit_write_uint+0x62>
        *c++ = *p++ | 0x80;
    9936:	69bb      	ldr	r3, [r7, #24]
    9938:	1c5a      	adds	r2, r3, #1
    993a:	61ba      	str	r2, [r7, #24]
    993c:	69fa      	ldr	r2, [r7, #28]
    993e:	1c51      	adds	r1, r2, #1
    9940:	61f9      	str	r1, [r7, #28]
    9942:	7812      	ldrb	r2, [r2, #0]
    9944:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9948:	b2d2      	uxtb	r2, r2
    994a:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    994c:	f107 0310 	add.w	r3, r7, #16
    9950:	3304      	adds	r3, #4
    9952:	69fa      	ldr	r2, [r7, #28]
    9954:	4293      	cmp	r3, r2
    9956:	d1ee      	bne.n	9936 <emit_write_uint+0x4c>
    }
    *c = *p;
    9958:	69fb      	ldr	r3, [r7, #28]
    995a:	781a      	ldrb	r2, [r3, #0]
    995c:	69bb      	ldr	r3, [r7, #24]
    995e:	701a      	strb	r2, [r3, #0]
}
    9960:	bf00      	nop
    9962:	3720      	adds	r7, #32
    9964:	46bd      	mov	sp, r7
    9966:	bd80      	pop	{r7, pc}

00009968 <emit_get_cur_to_write_code_info>:

// all functions must go through this one to emit code info
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    9968:	b580      	push	{r7, lr}
    996a:	b084      	sub	sp, #16
    996c:	af00      	add	r7, sp, #0
    996e:	6078      	str	r0, [r7, #4]
    9970:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9972:	687b      	ldr	r3, [r7, #4]
    9974:	795b      	ldrb	r3, [r3, #5]
    9976:	2b03      	cmp	r3, #3
    9978:	d807      	bhi.n	998a <emit_get_cur_to_write_code_info+0x22>
        emit->code_info_offset += num_bytes_to_write;
    997a:	687b      	ldr	r3, [r7, #4]
    997c:	6a1a      	ldr	r2, [r3, #32]
    997e:	683b      	ldr	r3, [r7, #0]
    9980:	441a      	add	r2, r3
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	621a      	str	r2, [r3, #32]
        return emit->dummy_data;
    9986:	687b      	ldr	r3, [r7, #4]
    9988:	e01a      	b.n	99c0 <emit_get_cur_to_write_code_info+0x58>
    } else {
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    998a:	687b      	ldr	r3, [r7, #4]
    998c:	6a1a      	ldr	r2, [r3, #32]
    998e:	683b      	ldr	r3, [r7, #0]
    9990:	441a      	add	r2, r3
    9992:	687b      	ldr	r3, [r7, #4]
    9994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9996:	429a      	cmp	r2, r3
    9998:	d905      	bls.n	99a6 <emit_get_cur_to_write_code_info+0x3e>
    999a:	4b0b      	ldr	r3, [pc, #44]	; (99c8 <emit_get_cur_to_write_code_info+0x60>)
    999c:	4a0b      	ldr	r2, [pc, #44]	; (99cc <emit_get_cur_to_write_code_info+0x64>)
    999e:	2173      	movs	r1, #115	; 0x73
    99a0:	480b      	ldr	r0, [pc, #44]	; (99d0 <emit_get_cur_to_write_code_info+0x68>)
    99a2:	f011 fc1f 	bl	1b1e4 <__assert_func>
        byte *c = emit->code_base + emit->code_info_offset;
    99a6:	687b      	ldr	r3, [r7, #4]
    99a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    99aa:	687b      	ldr	r3, [r7, #4]
    99ac:	6a1b      	ldr	r3, [r3, #32]
    99ae:	4413      	add	r3, r2
    99b0:	60fb      	str	r3, [r7, #12]
        emit->code_info_offset += num_bytes_to_write;
    99b2:	687b      	ldr	r3, [r7, #4]
    99b4:	6a1a      	ldr	r2, [r3, #32]
    99b6:	683b      	ldr	r3, [r7, #0]
    99b8:	441a      	add	r2, r3
    99ba:	687b      	ldr	r3, [r7, #4]
    99bc:	621a      	str	r2, [r3, #32]
        return c;
    99be:	68fb      	ldr	r3, [r7, #12]
    }
}
    99c0:	4618      	mov	r0, r3
    99c2:	3710      	adds	r7, #16
    99c4:	46bd      	mov	sp, r7
    99c6:	bd80      	pop	{r7, pc}
    99c8:	0002086c 	.word	0x0002086c
    99cc:	00020a88 	.word	0x00020a88
    99d0:	000208b0 	.word	0x000208b0

000099d4 <emit_write_code_info_byte>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    99d4:	b580      	push	{r7, lr}
    99d6:	b082      	sub	sp, #8
    99d8:	af00      	add	r7, sp, #0
    99da:	6078      	str	r0, [r7, #4]
    99dc:	460b      	mov	r3, r1
    99de:	70fb      	strb	r3, [r7, #3]
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    99e0:	2101      	movs	r1, #1
    99e2:	6878      	ldr	r0, [r7, #4]
    99e4:	f7ff ffc0 	bl	9968 <emit_get_cur_to_write_code_info>
    99e8:	4602      	mov	r2, r0
    99ea:	78fb      	ldrb	r3, [r7, #3]
    99ec:	7013      	strb	r3, [r2, #0]
}
    99ee:	bf00      	nop
    99f0:	3708      	adds	r7, #8
    99f2:	46bd      	mov	sp, r7
    99f4:	bd80      	pop	{r7, pc}

000099f6 <emit_write_code_info_uint>:

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    99f6:	b580      	push	{r7, lr}
    99f8:	b082      	sub	sp, #8
    99fa:	af00      	add	r7, sp, #0
    99fc:	6078      	str	r0, [r7, #4]
    99fe:	6039      	str	r1, [r7, #0]
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    9a00:	683a      	ldr	r2, [r7, #0]
    9a02:	4904      	ldr	r1, [pc, #16]	; (9a14 <emit_write_code_info_uint+0x1e>)
    9a04:	6878      	ldr	r0, [r7, #4]
    9a06:	f7ff ff70 	bl	98ea <emit_write_uint>
}
    9a0a:	bf00      	nop
    9a0c:	3708      	adds	r7, #8
    9a0e:	46bd      	mov	sp, r7
    9a10:	bd80      	pop	{r7, pc}
    9a12:	bf00      	nop
    9a14:	00009969 	.word	0x00009969

00009a18 <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    9a18:	b580      	push	{r7, lr}
    9a1a:	b084      	sub	sp, #16
    9a1c:	af00      	add	r7, sp, #0
    9a1e:	6078      	str	r0, [r7, #4]
    9a20:	6039      	str	r1, [r7, #0]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9a22:	683b      	ldr	r3, [r7, #0]
    9a24:	0c1b      	lsrs	r3, r3, #16
    9a26:	2b00      	cmp	r3, #0
    9a28:	d005      	beq.n	9a36 <emit_write_code_info_qstr+0x1e>
    9a2a:	4b0c      	ldr	r3, [pc, #48]	; (9a5c <emit_write_code_info_qstr+0x44>)
    9a2c:	4a0c      	ldr	r2, [pc, #48]	; (9a60 <emit_write_code_info_qstr+0x48>)
    9a2e:	2184      	movs	r1, #132	; 0x84
    9a30:	480c      	ldr	r0, [pc, #48]	; (9a64 <emit_write_code_info_qstr+0x4c>)
    9a32:	f011 fbd7 	bl	1b1e4 <__assert_func>
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    9a36:	2102      	movs	r1, #2
    9a38:	6878      	ldr	r0, [r7, #4]
    9a3a:	f7ff ff95 	bl	9968 <emit_get_cur_to_write_code_info>
    9a3e:	60f8      	str	r0, [r7, #12]
    c[0] = qst;
    9a40:	683b      	ldr	r3, [r7, #0]
    9a42:	b2da      	uxtb	r2, r3
    9a44:	68fb      	ldr	r3, [r7, #12]
    9a46:	701a      	strb	r2, [r3, #0]
    c[1] = qst >> 8;
    9a48:	68fb      	ldr	r3, [r7, #12]
    9a4a:	3301      	adds	r3, #1
    9a4c:	683a      	ldr	r2, [r7, #0]
    9a4e:	0a12      	lsrs	r2, r2, #8
    9a50:	b2d2      	uxtb	r2, r2
    9a52:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    #endif
}
    9a54:	bf00      	nop
    9a56:	3710      	adds	r7, #16
    9a58:	46bd      	mov	sp, r7
    9a5a:	bd80      	pop	{r7, pc}
    9a5c:	000208c4 	.word	0x000208c4
    9a60:	00020aa8 	.word	0x00020aa8
    9a64:	000208b0 	.word	0x000208b0

00009a68 <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    9a68:	b580      	push	{r7, lr}
    9a6a:	b084      	sub	sp, #16
    9a6c:	af00      	add	r7, sp, #0
    9a6e:	6078      	str	r0, [r7, #4]
    9a70:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9a72:	687b      	ldr	r3, [r7, #4]
    9a74:	795b      	ldrb	r3, [r3, #5]
    9a76:	2b03      	cmp	r3, #3
    9a78:	d807      	bhi.n	9a8a <emit_get_cur_to_write_bytecode+0x22>
        emit->bytecode_offset += num_bytes_to_write;
    9a7a:	687b      	ldr	r3, [r7, #4]
    9a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9a7e:	683b      	ldr	r3, [r7, #0]
    9a80:	441a      	add	r2, r3
    9a82:	687b      	ldr	r3, [r7, #4]
    9a84:	629a      	str	r2, [r3, #40]	; 0x28
        return emit->dummy_data;
    9a86:	687b      	ldr	r3, [r7, #4]
    9a88:	e01d      	b.n	9ac6 <emit_get_cur_to_write_bytecode+0x5e>
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    9a8a:	687b      	ldr	r3, [r7, #4]
    9a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9a8e:	683b      	ldr	r3, [r7, #0]
    9a90:	441a      	add	r2, r3
    9a92:	687b      	ldr	r3, [r7, #4]
    9a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9a96:	429a      	cmp	r2, r3
    9a98:	d905      	bls.n	9aa6 <emit_get_cur_to_write_bytecode+0x3e>
    9a9a:	4b0d      	ldr	r3, [pc, #52]	; (9ad0 <emit_get_cur_to_write_bytecode+0x68>)
    9a9c:	4a0d      	ldr	r2, [pc, #52]	; (9ad4 <emit_get_cur_to_write_bytecode+0x6c>)
    9a9e:	21b2      	movs	r1, #178	; 0xb2
    9aa0:	480d      	ldr	r0, [pc, #52]	; (9ad8 <emit_get_cur_to_write_bytecode+0x70>)
    9aa2:	f011 fb9f 	bl	1b1e4 <__assert_func>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    9aa6:	687b      	ldr	r3, [r7, #4]
    9aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9aaa:	687b      	ldr	r3, [r7, #4]
    9aac:	6a59      	ldr	r1, [r3, #36]	; 0x24
    9aae:	687b      	ldr	r3, [r7, #4]
    9ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9ab2:	440b      	add	r3, r1
    9ab4:	4413      	add	r3, r2
    9ab6:	60fb      	str	r3, [r7, #12]
        emit->bytecode_offset += num_bytes_to_write;
    9ab8:	687b      	ldr	r3, [r7, #4]
    9aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9abc:	683b      	ldr	r3, [r7, #0]
    9abe:	441a      	add	r2, r3
    9ac0:	687b      	ldr	r3, [r7, #4]
    9ac2:	629a      	str	r2, [r3, #40]	; 0x28
        return c;
    9ac4:	68fb      	ldr	r3, [r7, #12]
    }
}
    9ac6:	4618      	mov	r0, r3
    9ac8:	3710      	adds	r7, #16
    9aca:	46bd      	mov	sp, r7
    9acc:	bd80      	pop	{r7, pc}
    9ace:	bf00      	nop
    9ad0:	000208d8 	.word	0x000208d8
    9ad4:	00020ac4 	.word	0x00020ac4
    9ad8:	000208b0 	.word	0x000208b0

00009adc <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    9adc:	b580      	push	{r7, lr}
    9ade:	b084      	sub	sp, #16
    9ae0:	af00      	add	r7, sp, #0
    9ae2:	6078      	str	r0, [r7, #4]
    9ae4:	460b      	mov	r3, r1
    9ae6:	70fb      	strb	r3, [r7, #3]
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    9ae8:	2101      	movs	r1, #1
    9aea:	6878      	ldr	r0, [r7, #4]
    9aec:	f7ff ffbc 	bl	9a68 <emit_get_cur_to_write_bytecode>
    9af0:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9af2:	68fb      	ldr	r3, [r7, #12]
    9af4:	78fa      	ldrb	r2, [r7, #3]
    9af6:	701a      	strb	r2, [r3, #0]
}
    9af8:	bf00      	nop
    9afa:	3710      	adds	r7, #16
    9afc:	46bd      	mov	sp, r7
    9afe:	bd80      	pop	{r7, pc}

00009b00 <emit_write_bytecode_byte_byte>:

STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    9b00:	b580      	push	{r7, lr}
    9b02:	b084      	sub	sp, #16
    9b04:	af00      	add	r7, sp, #0
    9b06:	6078      	str	r0, [r7, #4]
    9b08:	460b      	mov	r3, r1
    9b0a:	70fb      	strb	r3, [r7, #3]
    9b0c:	4613      	mov	r3, r2
    9b0e:	70bb      	strb	r3, [r7, #2]
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    9b10:	2102      	movs	r1, #2
    9b12:	6878      	ldr	r0, [r7, #4]
    9b14:	f7ff ffa8 	bl	9a68 <emit_get_cur_to_write_bytecode>
    9b18:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9b1a:	68fb      	ldr	r3, [r7, #12]
    9b1c:	78fa      	ldrb	r2, [r7, #3]
    9b1e:	701a      	strb	r2, [r3, #0]
    c[1] = b2;
    9b20:	68fb      	ldr	r3, [r7, #12]
    9b22:	3301      	adds	r3, #1
    9b24:	78ba      	ldrb	r2, [r7, #2]
    9b26:	701a      	strb	r2, [r3, #0]
}
    9b28:	bf00      	nop
    9b2a:	3710      	adds	r7, #16
    9b2c:	46bd      	mov	sp, r7
    9b2e:	bd80      	pop	{r7, pc}

00009b30 <emit_write_bytecode_byte_int>:

// Similar to emit_write_bytecode_uint(), just some extra handling to encode sign
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    9b30:	b580      	push	{r7, lr}
    9b32:	b088      	sub	sp, #32
    9b34:	af00      	add	r7, sp, #0
    9b36:	60f8      	str	r0, [r7, #12]
    9b38:	460b      	mov	r3, r1
    9b3a:	607a      	str	r2, [r7, #4]
    9b3c:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b1);
    9b3e:	7afb      	ldrb	r3, [r7, #11]
    9b40:	4619      	mov	r1, r3
    9b42:	68f8      	ldr	r0, [r7, #12]
    9b44:	f7ff ffca 	bl	9adc <emit_write_bytecode_byte>

    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9b48:	f107 0310 	add.w	r3, r7, #16
    9b4c:	3305      	adds	r3, #5
    9b4e:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = num & 0x7f;
    9b50:	69fb      	ldr	r3, [r7, #28]
    9b52:	3b01      	subs	r3, #1
    9b54:	61fb      	str	r3, [r7, #28]
    9b56:	687b      	ldr	r3, [r7, #4]
    9b58:	b2db      	uxtb	r3, r3
    9b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9b5e:	b2da      	uxtb	r2, r3
    9b60:	69fb      	ldr	r3, [r7, #28]
    9b62:	701a      	strb	r2, [r3, #0]
        num >>= 7;
    9b64:	687b      	ldr	r3, [r7, #4]
    9b66:	11db      	asrs	r3, r3, #7
    9b68:	607b      	str	r3, [r7, #4]
    } while (num != 0 && num != -1);
    9b6a:	687b      	ldr	r3, [r7, #4]
    9b6c:	2b00      	cmp	r3, #0
    9b6e:	d003      	beq.n	9b78 <emit_write_bytecode_byte_int+0x48>
    9b70:	687b      	ldr	r3, [r7, #4]
    9b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9b76:	d1eb      	bne.n	9b50 <emit_write_bytecode_byte_int+0x20>
    // Make sure that highest bit we stored (mask 0x40) matches sign
    // of the number. If not, store extra byte just to encode sign
    if (num == -1 && (*p & 0x40) == 0) {
    9b78:	687b      	ldr	r3, [r7, #4]
    9b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9b7e:	d10c      	bne.n	9b9a <emit_write_bytecode_byte_int+0x6a>
    9b80:	69fb      	ldr	r3, [r7, #28]
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b88:	2b00      	cmp	r3, #0
    9b8a:	d106      	bne.n	9b9a <emit_write_bytecode_byte_int+0x6a>
        *--p = 0x7f;
    9b8c:	69fb      	ldr	r3, [r7, #28]
    9b8e:	3b01      	subs	r3, #1
    9b90:	61fb      	str	r3, [r7, #28]
    9b92:	69fb      	ldr	r3, [r7, #28]
    9b94:	227f      	movs	r2, #127	; 0x7f
    9b96:	701a      	strb	r2, [r3, #0]
    9b98:	e00e      	b.n	9bb8 <emit_write_bytecode_byte_int+0x88>
    } else if (num == 0 && (*p & 0x40) != 0) {
    9b9a:	687b      	ldr	r3, [r7, #4]
    9b9c:	2b00      	cmp	r3, #0
    9b9e:	d10b      	bne.n	9bb8 <emit_write_bytecode_byte_int+0x88>
    9ba0:	69fb      	ldr	r3, [r7, #28]
    9ba2:	781b      	ldrb	r3, [r3, #0]
    9ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ba8:	2b00      	cmp	r3, #0
    9baa:	d005      	beq.n	9bb8 <emit_write_bytecode_byte_int+0x88>
        *--p = 0;
    9bac:	69fb      	ldr	r3, [r7, #28]
    9bae:	3b01      	subs	r3, #1
    9bb0:	61fb      	str	r3, [r7, #28]
    9bb2:	69fb      	ldr	r3, [r7, #28]
    9bb4:	2200      	movs	r2, #0
    9bb6:	701a      	strb	r2, [r3, #0]
    }

    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    9bb8:	f107 0310 	add.w	r3, r7, #16
    9bbc:	3305      	adds	r3, #5
    9bbe:	461a      	mov	r2, r3
    9bc0:	69fb      	ldr	r3, [r7, #28]
    9bc2:	1ad3      	subs	r3, r2, r3
    9bc4:	4619      	mov	r1, r3
    9bc6:	68f8      	ldr	r0, [r7, #12]
    9bc8:	f7ff ff4e 	bl	9a68 <emit_get_cur_to_write_bytecode>
    9bcc:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9bce:	e00a      	b.n	9be6 <emit_write_bytecode_byte_int+0xb6>
        *c++ = *p++ | 0x80;
    9bd0:	69bb      	ldr	r3, [r7, #24]
    9bd2:	1c5a      	adds	r2, r3, #1
    9bd4:	61ba      	str	r2, [r7, #24]
    9bd6:	69fa      	ldr	r2, [r7, #28]
    9bd8:	1c51      	adds	r1, r2, #1
    9bda:	61f9      	str	r1, [r7, #28]
    9bdc:	7812      	ldrb	r2, [r2, #0]
    9bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9be2:	b2d2      	uxtb	r2, r2
    9be4:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9be6:	f107 0310 	add.w	r3, r7, #16
    9bea:	3304      	adds	r3, #4
    9bec:	69fa      	ldr	r2, [r7, #28]
    9bee:	4293      	cmp	r3, r2
    9bf0:	d1ee      	bne.n	9bd0 <emit_write_bytecode_byte_int+0xa0>
    }
    *c = *p;
    9bf2:	69fb      	ldr	r3, [r7, #28]
    9bf4:	781a      	ldrb	r2, [r3, #0]
    9bf6:	69bb      	ldr	r3, [r7, #24]
    9bf8:	701a      	strb	r2, [r3, #0]
}
    9bfa:	bf00      	nop
    9bfc:	3720      	adds	r7, #32
    9bfe:	46bd      	mov	sp, r7
    9c00:	bd80      	pop	{r7, pc}

00009c02 <emit_write_bytecode_byte_uint>:

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    9c02:	b580      	push	{r7, lr}
    9c04:	b084      	sub	sp, #16
    9c06:	af00      	add	r7, sp, #0
    9c08:	60f8      	str	r0, [r7, #12]
    9c0a:	460b      	mov	r3, r1
    9c0c:	607a      	str	r2, [r7, #4]
    9c0e:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b);
    9c10:	7afb      	ldrb	r3, [r7, #11]
    9c12:	4619      	mov	r1, r3
    9c14:	68f8      	ldr	r0, [r7, #12]
    9c16:	f7ff ff61 	bl	9adc <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    9c1a:	687a      	ldr	r2, [r7, #4]
    9c1c:	4903      	ldr	r1, [pc, #12]	; (9c2c <emit_write_bytecode_byte_uint+0x2a>)
    9c1e:	68f8      	ldr	r0, [r7, #12]
    9c20:	f7ff fe63 	bl	98ea <emit_write_uint>
}
    9c24:	bf00      	nop
    9c26:	3710      	adds	r7, #16
    9c28:	46bd      	mov	sp, r7
    9c2a:	bd80      	pop	{r7, pc}
    9c2c:	00009a69 	.word	0x00009a69

00009c30 <emit_write_bytecode_byte_const>:

#if MICROPY_PERSISTENT_CODE
STATIC void emit_write_bytecode_byte_const(emit_t *emit, byte b, mp_uint_t n, mp_uint_t c) {
    9c30:	b580      	push	{r7, lr}
    9c32:	b084      	sub	sp, #16
    9c34:	af00      	add	r7, sp, #0
    9c36:	60f8      	str	r0, [r7, #12]
    9c38:	607a      	str	r2, [r7, #4]
    9c3a:	603b      	str	r3, [r7, #0]
    9c3c:	460b      	mov	r3, r1
    9c3e:	72fb      	strb	r3, [r7, #11]
    if (emit->pass == MP_PASS_EMIT) {
    9c40:	68fb      	ldr	r3, [r7, #12]
    9c42:	795b      	ldrb	r3, [r3, #5]
    9c44:	2b04      	cmp	r3, #4
    9c46:	d106      	bne.n	9c56 <emit_write_bytecode_byte_const+0x26>
        emit->const_table[n] = c;
    9c48:	68fb      	ldr	r3, [r7, #12]
    9c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9c4c:	687b      	ldr	r3, [r7, #4]
    9c4e:	009b      	lsls	r3, r3, #2
    9c50:	4413      	add	r3, r2
    9c52:	683a      	ldr	r2, [r7, #0]
    9c54:	601a      	str	r2, [r3, #0]
    }
    emit_write_bytecode_byte_uint(emit, b, n);
    9c56:	7afb      	ldrb	r3, [r7, #11]
    9c58:	687a      	ldr	r2, [r7, #4]
    9c5a:	4619      	mov	r1, r3
    9c5c:	68f8      	ldr	r0, [r7, #12]
    9c5e:	f7ff ffd0 	bl	9c02 <emit_write_bytecode_byte_uint>
}
    9c62:	bf00      	nop
    9c64:	3710      	adds	r7, #16
    9c66:	46bd      	mov	sp, r7
    9c68:	bd80      	pop	{r7, pc}

00009c6a <emit_write_bytecode_byte_qstr>:
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    9c6a:	b580      	push	{r7, lr}
    9c6c:	b086      	sub	sp, #24
    9c6e:	af00      	add	r7, sp, #0
    9c70:	60f8      	str	r0, [r7, #12]
    9c72:	460b      	mov	r3, r1
    9c74:	607a      	str	r2, [r7, #4]
    9c76:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	0c1b      	lsrs	r3, r3, #16
    9c7c:	2b00      	cmp	r3, #0
    9c7e:	d005      	beq.n	9c8c <emit_write_bytecode_byte_qstr+0x22>
    9c80:	4b0e      	ldr	r3, [pc, #56]	; (9cbc <emit_write_bytecode_byte_qstr+0x52>)
    9c82:	4a0f      	ldr	r2, [pc, #60]	; (9cc0 <emit_write_bytecode_byte_qstr+0x56>)
    9c84:	21ef      	movs	r1, #239	; 0xef
    9c86:	480f      	ldr	r0, [pc, #60]	; (9cc4 <emit_write_bytecode_byte_qstr+0x5a>)
    9c88:	f011 faac 	bl	1b1e4 <__assert_func>
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9c8c:	2103      	movs	r1, #3
    9c8e:	68f8      	ldr	r0, [r7, #12]
    9c90:	f7ff feea 	bl	9a68 <emit_get_cur_to_write_bytecode>
    9c94:	6178      	str	r0, [r7, #20]
    c[0] = b;
    9c96:	697b      	ldr	r3, [r7, #20]
    9c98:	7afa      	ldrb	r2, [r7, #11]
    9c9a:	701a      	strb	r2, [r3, #0]
    c[1] = qst;
    9c9c:	697b      	ldr	r3, [r7, #20]
    9c9e:	3301      	adds	r3, #1
    9ca0:	687a      	ldr	r2, [r7, #4]
    9ca2:	b2d2      	uxtb	r2, r2
    9ca4:	701a      	strb	r2, [r3, #0]
    c[2] = qst >> 8;
    9ca6:	697b      	ldr	r3, [r7, #20]
    9ca8:	3302      	adds	r3, #2
    9caa:	687a      	ldr	r2, [r7, #4]
    9cac:	0a12      	lsrs	r2, r2, #8
    9cae:	b2d2      	uxtb	r2, r2
    9cb0:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    #endif
}
    9cb2:	bf00      	nop
    9cb4:	3718      	adds	r7, #24
    9cb6:	46bd      	mov	sp, r7
    9cb8:	bd80      	pop	{r7, pc}
    9cba:	bf00      	nop
    9cbc:	000208c4 	.word	0x000208c4
    9cc0:	00020ae4 	.word	0x00020ae4
    9cc4:	000208b0 	.word	0x000208b0

00009cc8 <emit_write_bytecode_byte_obj>:

STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    9cc8:	b580      	push	{r7, lr}
    9cca:	b084      	sub	sp, #16
    9ccc:	af00      	add	r7, sp, #0
    9cce:	60f8      	str	r0, [r7, #12]
    9cd0:	460b      	mov	r3, r1
    9cd2:	607a      	str	r2, [r7, #4]
    9cd4:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9cd6:	68fb      	ldr	r3, [r7, #12]
    9cd8:	68db      	ldr	r3, [r3, #12]
    9cda:	8b5b      	ldrh	r3, [r3, #26]
    9cdc:	461a      	mov	r2, r3
    9cde:	68fb      	ldr	r3, [r7, #12]
    9ce0:	68db      	ldr	r3, [r3, #12]
    9ce2:	8b9b      	ldrh	r3, [r3, #28]
    9ce4:	441a      	add	r2, r3
        + emit->ct_cur_obj++, (mp_uint_t)obj);
    9ce6:	68fb      	ldr	r3, [r7, #12]
    9ce8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9cea:	1c59      	adds	r1, r3, #1
    9cec:	b288      	uxth	r0, r1
    9cee:	68f9      	ldr	r1, [r7, #12]
    9cf0:	8688      	strh	r0, [r1, #52]	; 0x34
    9cf2:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9cf4:	461a      	mov	r2, r3
    9cf6:	687b      	ldr	r3, [r7, #4]
    9cf8:	7af9      	ldrb	r1, [r7, #11]
    9cfa:	68f8      	ldr	r0, [r7, #12]
    9cfc:	f7ff ff98 	bl	9c30 <emit_write_bytecode_byte_const>
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    *c = obj;
    #endif
}
    9d00:	bf00      	nop
    9d02:	3710      	adds	r7, #16
    9d04:	46bd      	mov	sp, r7
    9d06:	bd80      	pop	{r7, pc}

00009d08 <emit_write_bytecode_byte_raw_code>:

STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    9d08:	b580      	push	{r7, lr}
    9d0a:	b084      	sub	sp, #16
    9d0c:	af00      	add	r7, sp, #0
    9d0e:	60f8      	str	r0, [r7, #12]
    9d10:	460b      	mov	r3, r1
    9d12:	607a      	str	r2, [r7, #4]
    9d14:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9d16:	68fb      	ldr	r3, [r7, #12]
    9d18:	68db      	ldr	r3, [r3, #12]
    9d1a:	8b5b      	ldrh	r3, [r3, #26]
    9d1c:	461a      	mov	r2, r3
    9d1e:	68fb      	ldr	r3, [r7, #12]
    9d20:	68db      	ldr	r3, [r3, #12]
    9d22:	8b9b      	ldrh	r3, [r3, #28]
    9d24:	4413      	add	r3, r2
        + emit->ct_num_obj + emit->ct_cur_raw_code++, (mp_uint_t)(uintptr_t)rc);
    9d26:	68fa      	ldr	r2, [r7, #12]
    9d28:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    9d2a:	441a      	add	r2, r3
    9d2c:	68fb      	ldr	r3, [r7, #12]
    9d2e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    9d30:	1c59      	adds	r1, r3, #1
    9d32:	b288      	uxth	r0, r1
    9d34:	68f9      	ldr	r1, [r7, #12]
    9d36:	8708      	strh	r0, [r1, #56]	; 0x38
    9d38:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9d3a:	461a      	mov	r2, r3
    9d3c:	687b      	ldr	r3, [r7, #4]
    9d3e:	7af9      	ldrb	r1, [r7, #11]
    9d40:	68f8      	ldr	r0, [r7, #12]
    9d42:	f7ff ff75 	bl	9c30 <emit_write_bytecode_byte_const>
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(void*)));
    *c = rc;
    #endif
}
    9d46:	bf00      	nop
    9d48:	3710      	adds	r7, #16
    9d4a:	46bd      	mov	sp, r7
    9d4c:	bd80      	pop	{r7, pc}

00009d4e <emit_write_bytecode_byte_unsigned_label>:

// unsigned labels are relative to ip following this instruction, stored as 16 bits
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    9d4e:	b580      	push	{r7, lr}
    9d50:	b086      	sub	sp, #24
    9d52:	af00      	add	r7, sp, #0
    9d54:	60f8      	str	r0, [r7, #12]
    9d56:	460b      	mov	r3, r1
    9d58:	607a      	str	r2, [r7, #4]
    9d5a:	72fb      	strb	r3, [r7, #11]
    mp_uint_t bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9d5c:	68fb      	ldr	r3, [r7, #12]
    9d5e:	795b      	ldrb	r3, [r3, #5]
    9d60:	2b03      	cmp	r3, #3
    9d62:	d802      	bhi.n	9d6a <emit_write_bytecode_byte_unsigned_label+0x1c>
        bytecode_offset = 0;
    9d64:	2300      	movs	r3, #0
    9d66:	617b      	str	r3, [r7, #20]
    9d68:	e00a      	b.n	9d80 <emit_write_bytecode_byte_unsigned_label+0x32>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    9d6a:	68fb      	ldr	r3, [r7, #12]
    9d6c:	69da      	ldr	r2, [r3, #28]
    9d6e:	687b      	ldr	r3, [r7, #4]
    9d70:	009b      	lsls	r3, r3, #2
    9d72:	4413      	add	r3, r2
    9d74:	681a      	ldr	r2, [r3, #0]
    9d76:	68fb      	ldr	r3, [r7, #12]
    9d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9d7a:	1ad3      	subs	r3, r2, r3
    9d7c:	3b03      	subs	r3, #3
    9d7e:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9d80:	2103      	movs	r1, #3
    9d82:	68f8      	ldr	r0, [r7, #12]
    9d84:	f7ff fe70 	bl	9a68 <emit_get_cur_to_write_bytecode>
    9d88:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9d8a:	693b      	ldr	r3, [r7, #16]
    9d8c:	7afa      	ldrb	r2, [r7, #11]
    9d8e:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9d90:	693b      	ldr	r3, [r7, #16]
    9d92:	3301      	adds	r3, #1
    9d94:	697a      	ldr	r2, [r7, #20]
    9d96:	b2d2      	uxtb	r2, r2
    9d98:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9d9a:	693b      	ldr	r3, [r7, #16]
    9d9c:	3302      	adds	r3, #2
    9d9e:	697a      	ldr	r2, [r7, #20]
    9da0:	0a12      	lsrs	r2, r2, #8
    9da2:	b2d2      	uxtb	r2, r2
    9da4:	701a      	strb	r2, [r3, #0]
}
    9da6:	bf00      	nop
    9da8:	3718      	adds	r7, #24
    9daa:	46bd      	mov	sp, r7
    9dac:	bd80      	pop	{r7, pc}

00009dae <emit_write_bytecode_byte_signed_label>:

// signed labels are relative to ip following this instruction, stored as 16 bits, in excess
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    9dae:	b580      	push	{r7, lr}
    9db0:	b086      	sub	sp, #24
    9db2:	af00      	add	r7, sp, #0
    9db4:	60f8      	str	r0, [r7, #12]
    9db6:	460b      	mov	r3, r1
    9db8:	607a      	str	r2, [r7, #4]
    9dba:	72fb      	strb	r3, [r7, #11]
    int bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9dbc:	68fb      	ldr	r3, [r7, #12]
    9dbe:	795b      	ldrb	r3, [r3, #5]
    9dc0:	2b03      	cmp	r3, #3
    9dc2:	d802      	bhi.n	9dca <emit_write_bytecode_byte_signed_label+0x1c>
        bytecode_offset = 0;
    9dc4:	2300      	movs	r3, #0
    9dc6:	617b      	str	r3, [r7, #20]
    9dc8:	e00c      	b.n	9de4 <emit_write_bytecode_byte_signed_label+0x36>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    9dca:	68fb      	ldr	r3, [r7, #12]
    9dcc:	69da      	ldr	r2, [r3, #28]
    9dce:	687b      	ldr	r3, [r7, #4]
    9dd0:	009b      	lsls	r3, r3, #2
    9dd2:	4413      	add	r3, r2
    9dd4:	681a      	ldr	r2, [r3, #0]
    9dd6:	68fb      	ldr	r3, [r7, #12]
    9dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9dda:	1ad3      	subs	r3, r2, r3
    9ddc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    9de0:	337d      	adds	r3, #125	; 0x7d
    9de2:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9de4:	2103      	movs	r1, #3
    9de6:	68f8      	ldr	r0, [r7, #12]
    9de8:	f7ff fe3e 	bl	9a68 <emit_get_cur_to_write_bytecode>
    9dec:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9dee:	693b      	ldr	r3, [r7, #16]
    9df0:	7afa      	ldrb	r2, [r7, #11]
    9df2:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9df4:	693b      	ldr	r3, [r7, #16]
    9df6:	3301      	adds	r3, #1
    9df8:	697a      	ldr	r2, [r7, #20]
    9dfa:	b2d2      	uxtb	r2, r2
    9dfc:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9dfe:	693b      	ldr	r3, [r7, #16]
    9e00:	3302      	adds	r3, #2
    9e02:	697a      	ldr	r2, [r7, #20]
    9e04:	1212      	asrs	r2, r2, #8
    9e06:	b2d2      	uxtb	r2, r2
    9e08:	701a      	strb	r2, [r3, #0]
}
    9e0a:	bf00      	nop
    9e0c:	3718      	adds	r7, #24
    9e0e:	46bd      	mov	sp, r7
    9e10:	bd80      	pop	{r7, pc}

00009e12 <mp_emit_bc_start_pass>:

void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    9e12:	b580      	push	{r7, lr}
    9e14:	b08c      	sub	sp, #48	; 0x30
    9e16:	af00      	add	r7, sp, #0
    9e18:	60f8      	str	r0, [r7, #12]
    9e1a:	60b9      	str	r1, [r7, #8]
    9e1c:	607a      	str	r2, [r7, #4]
    emit->pass = pass;
    9e1e:	68bb      	ldr	r3, [r7, #8]
    9e20:	b2da      	uxtb	r2, r3
    9e22:	68fb      	ldr	r3, [r7, #12]
    9e24:	715a      	strb	r2, [r3, #5]
    emit->stack_size = 0;
    9e26:	68fb      	ldr	r3, [r7, #12]
    9e28:	2200      	movs	r2, #0
    9e2a:	609a      	str	r2, [r3, #8]
    emit->last_emit_was_return_value = false;
    9e2c:	68fb      	ldr	r3, [r7, #12]
    9e2e:	2200      	movs	r2, #0
    9e30:	719a      	strb	r2, [r3, #6]
    emit->scope = scope;
    9e32:	68fb      	ldr	r3, [r7, #12]
    9e34:	687a      	ldr	r2, [r7, #4]
    9e36:	60da      	str	r2, [r3, #12]
    emit->last_source_line_offset = 0;
    9e38:	68fb      	ldr	r3, [r7, #12]
    9e3a:	2200      	movs	r2, #0
    9e3c:	611a      	str	r2, [r3, #16]
    emit->last_source_line = 1;
    9e3e:	68fb      	ldr	r3, [r7, #12]
    9e40:	2201      	movs	r2, #1
    9e42:	615a      	str	r2, [r3, #20]
    #ifndef NDEBUG
    // With debugging enabled labels are checked for unique assignment
    if (pass < MP_PASS_EMIT && emit->label_offsets != NULL) {
    9e44:	68bb      	ldr	r3, [r7, #8]
    9e46:	2b03      	cmp	r3, #3
    9e48:	d80d      	bhi.n	9e66 <mp_emit_bc_start_pass+0x54>
    9e4a:	68fb      	ldr	r3, [r7, #12]
    9e4c:	69db      	ldr	r3, [r3, #28]
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d009      	beq.n	9e66 <mp_emit_bc_start_pass+0x54>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    9e52:	68fb      	ldr	r3, [r7, #12]
    9e54:	69d8      	ldr	r0, [r3, #28]
    9e56:	68fb      	ldr	r3, [r7, #12]
    9e58:	699b      	ldr	r3, [r3, #24]
    9e5a:	009b      	lsls	r3, r3, #2
    9e5c:	461a      	mov	r2, r3
    9e5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9e62:	f012 fc17 	bl	1c694 <memset>
    }
    #endif
    emit->bytecode_offset = 0;
    9e66:	68fb      	ldr	r3, [r7, #12]
    9e68:	2200      	movs	r2, #0
    9e6a:	629a      	str	r2, [r3, #40]	; 0x28
    emit->code_info_offset = 0;
    9e6c:	68fb      	ldr	r3, [r7, #12]
    9e6e:	2200      	movs	r2, #0
    9e70:	621a      	str	r2, [r3, #32]

    // Write local state size and exception stack size.
    {
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    9e72:	687b      	ldr	r3, [r7, #4]
    9e74:	8c1b      	ldrh	r3, [r3, #32]
    9e76:	461a      	mov	r2, r3
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9e7c:	4413      	add	r3, r2
    9e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (n_state == 0) {
    9e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9e82:	2b00      	cmp	r3, #0
    9e84:	d101      	bne.n	9e8a <mp_emit_bc_start_pass+0x78>
            // Need at least 1 entry in the state, in the case an exception is
            // propagated through this function, the exception is returned in
            // the highest slot in the state (fastn[0], see vm.c).
            n_state = 1;
    9e86:	2301      	movs	r3, #1
    9e88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        emit_write_code_info_uint(emit, n_state);
    9e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9e8c:	68f8      	ldr	r0, [r7, #12]
    9e8e:	f7ff fdb2 	bl	99f6 <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    9e92:	687b      	ldr	r3, [r7, #4]
    9e94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9e96:	4619      	mov	r1, r3
    9e98:	68f8      	ldr	r0, [r7, #12]
    9e9a:	f7ff fdac 	bl	99f6 <emit_write_code_info_uint>
    }

    // Write scope flags and number of arguments.
    // TODO check that num args all fit in a byte
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    9e9e:	68fb      	ldr	r3, [r7, #12]
    9ea0:	68db      	ldr	r3, [r3, #12]
    9ea2:	7e1b      	ldrb	r3, [r3, #24]
    9ea4:	4619      	mov	r1, r3
    9ea6:	68f8      	ldr	r0, [r7, #12]
    9ea8:	f7ff fd94 	bl	99d4 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    9eac:	68fb      	ldr	r3, [r7, #12]
    9eae:	68db      	ldr	r3, [r3, #12]
    9eb0:	8b5b      	ldrh	r3, [r3, #26]
    9eb2:	b2db      	uxtb	r3, r3
    9eb4:	4619      	mov	r1, r3
    9eb6:	68f8      	ldr	r0, [r7, #12]
    9eb8:	f7ff fd8c 	bl	99d4 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    9ebc:	68fb      	ldr	r3, [r7, #12]
    9ebe:	68db      	ldr	r3, [r3, #12]
    9ec0:	8b9b      	ldrh	r3, [r3, #28]
    9ec2:	b2db      	uxtb	r3, r3
    9ec4:	4619      	mov	r1, r3
    9ec6:	68f8      	ldr	r0, [r7, #12]
    9ec8:	f7ff fd84 	bl	99d4 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    9ecc:	68fb      	ldr	r3, [r7, #12]
    9ece:	68db      	ldr	r3, [r3, #12]
    9ed0:	8bdb      	ldrh	r3, [r3, #30]
    9ed2:	b2db      	uxtb	r3, r3
    9ed4:	4619      	mov	r1, r3
    9ed6:	68f8      	ldr	r0, [r7, #12]
    9ed8:	f7ff fd7c 	bl	99d4 <emit_write_code_info_byte>

    // Write size of the rest of the code info.  We don't know how big this
    // variable uint will be on the MP_PASS_CODE_SIZE pass so we reserve 2 bytes
    // for it and hope that is enough!  TODO assert this or something.
    if (pass == MP_PASS_EMIT) {
    9edc:	68bb      	ldr	r3, [r7, #8]
    9ede:	2b04      	cmp	r3, #4
    9ee0:	d109      	bne.n	9ef6 <mp_emit_bc_start_pass+0xe4>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    9ee2:	68fb      	ldr	r3, [r7, #12]
    9ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9ee6:	68fb      	ldr	r3, [r7, #12]
    9ee8:	6a1b      	ldr	r3, [r3, #32]
    9eea:	1ad3      	subs	r3, r2, r3
    9eec:	4619      	mov	r1, r3
    9eee:	68f8      	ldr	r0, [r7, #12]
    9ef0:	f7ff fd81 	bl	99f6 <emit_write_code_info_uint>
    9ef4:	e003      	b.n	9efe <mp_emit_bc_start_pass+0xec>
    } else  {
        emit_get_cur_to_write_code_info(emit, 2);
    9ef6:	2102      	movs	r1, #2
    9ef8:	68f8      	ldr	r0, [r7, #12]
    9efa:	f7ff fd35 	bl	9968 <emit_get_cur_to_write_code_info>
    }

    // Write the name and source file of this function.
    emit_write_code_info_qstr(emit, scope->simple_name);
    9efe:	687b      	ldr	r3, [r7, #4]
    9f00:	8a5b      	ldrh	r3, [r3, #18]
    9f02:	4619      	mov	r1, r3
    9f04:	68f8      	ldr	r0, [r7, #12]
    9f06:	f7ff fd87 	bl	9a18 <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    9f0a:	687b      	ldr	r3, [r7, #4]
    9f0c:	8a1b      	ldrh	r3, [r3, #16]
    9f0e:	4619      	mov	r1, r3
    9f10:	68f8      	ldr	r0, [r7, #12]
    9f12:	f7ff fd81 	bl	9a18 <emit_write_code_info_qstr>

    // bytecode prelude: initialise closed over variables
    for (int i = 0; i < scope->id_info_len; i++) {
    9f16:	2300      	movs	r3, #0
    9f18:	62bb      	str	r3, [r7, #40]	; 0x28
    9f1a:	e01e      	b.n	9f5a <mp_emit_bc_start_pass+0x148>
        id_info_t *id = &scope->id_info[i];
    9f1c:	687b      	ldr	r3, [r7, #4]
    9f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f22:	00db      	lsls	r3, r3, #3
    9f24:	4413      	add	r3, r2
    9f26:	61bb      	str	r3, [r7, #24]
        if (id->kind == ID_INFO_KIND_CELL) {
    9f28:	69bb      	ldr	r3, [r7, #24]
    9f2a:	781b      	ldrb	r3, [r3, #0]
    9f2c:	2b03      	cmp	r3, #3
    9f2e:	d111      	bne.n	9f54 <mp_emit_bc_start_pass+0x142>
            assert(id->local_num < 255);
    9f30:	69bb      	ldr	r3, [r7, #24]
    9f32:	885b      	ldrh	r3, [r3, #2]
    9f34:	2bfe      	cmp	r3, #254	; 0xfe
    9f36:	d906      	bls.n	9f46 <mp_emit_bc_start_pass+0x134>
    9f38:	4b32      	ldr	r3, [pc, #200]	; (a004 <mp_emit_bc_start_pass+0x1f2>)
    9f3a:	4a33      	ldr	r2, [pc, #204]	; (a008 <mp_emit_bc_start_pass+0x1f6>)
    9f3c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    9f40:	4832      	ldr	r0, [pc, #200]	; (a00c <mp_emit_bc_start_pass+0x1fa>)
    9f42:	f011 f94f 	bl	1b1e4 <__assert_func>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    9f46:	69bb      	ldr	r3, [r7, #24]
    9f48:	885b      	ldrh	r3, [r3, #2]
    9f4a:	b2db      	uxtb	r3, r3
    9f4c:	4619      	mov	r1, r3
    9f4e:	68f8      	ldr	r0, [r7, #12]
    9f50:	f7ff fdc4 	bl	9adc <emit_write_bytecode_byte>
    for (int i = 0; i < scope->id_info_len; i++) {
    9f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f56:	3301      	adds	r3, #1
    9f58:	62bb      	str	r3, [r7, #40]	; 0x28
    9f5a:	687b      	ldr	r3, [r7, #4]
    9f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9f5e:	461a      	mov	r2, r3
    9f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f62:	429a      	cmp	r2, r3
    9f64:	dcda      	bgt.n	9f1c <mp_emit_bc_start_pass+0x10a>
        }
    }
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    9f66:	21ff      	movs	r1, #255	; 0xff
    9f68:	68f8      	ldr	r0, [r7, #12]
    9f6a:	f7ff fdb7 	bl	9adc <emit_write_bytecode_byte>

    #if MICROPY_PERSISTENT_CODE
    emit->ct_cur_obj = 0;
    9f6e:	68fb      	ldr	r3, [r7, #12]
    9f70:	2200      	movs	r2, #0
    9f72:	869a      	strh	r2, [r3, #52]	; 0x34
    emit->ct_cur_raw_code = 0;
    9f74:	68fb      	ldr	r3, [r7, #12]
    9f76:	2200      	movs	r2, #0
    9f78:	871a      	strh	r2, [r3, #56]	; 0x38
    #endif

    if (pass == MP_PASS_EMIT) {
    9f7a:	68bb      	ldr	r3, [r7, #8]
    9f7c:	2b04      	cmp	r3, #4
    9f7e:	d13c      	bne.n	9ffa <mp_emit_bc_start_pass+0x1e8>
        // parameter we use "*" as its name (since no argument can ever be named
        // "*").  We could use a blank qstr but "*" is better for debugging.
        // Note: there is some wasted RAM here for the case of storing a qstr
        // for each closed-over variable, and maybe there is a better way to do
        // it, but that would require changes to mp_setup_code_state.
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    9f80:	2300      	movs	r3, #0
    9f82:	627b      	str	r3, [r7, #36]	; 0x24
    9f84:	e030      	b.n	9fe8 <mp_emit_bc_start_pass+0x1d6>
            qstr qst = MP_QSTR__star_;
    9f86:	2326      	movs	r3, #38	; 0x26
    9f88:	623b      	str	r3, [r7, #32]
            for (int j = 0; j < scope->id_info_len; ++j) {
    9f8a:	2300      	movs	r3, #0
    9f8c:	61fb      	str	r3, [r7, #28]
    9f8e:	e018      	b.n	9fc2 <mp_emit_bc_start_pass+0x1b0>
                id_info_t *id = &scope->id_info[j];
    9f90:	687b      	ldr	r3, [r7, #4]
    9f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f94:	69fb      	ldr	r3, [r7, #28]
    9f96:	00db      	lsls	r3, r3, #3
    9f98:	4413      	add	r3, r2
    9f9a:	617b      	str	r3, [r7, #20]
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    9f9c:	697b      	ldr	r3, [r7, #20]
    9f9e:	785b      	ldrb	r3, [r3, #1]
    9fa0:	f003 0301 	and.w	r3, r3, #1
    9fa4:	2b00      	cmp	r3, #0
    9fa6:	d009      	beq.n	9fbc <mp_emit_bc_start_pass+0x1aa>
    9fa8:	697b      	ldr	r3, [r7, #20]
    9faa:	885b      	ldrh	r3, [r3, #2]
    9fac:	461a      	mov	r2, r3
    9fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9fb0:	429a      	cmp	r2, r3
    9fb2:	d103      	bne.n	9fbc <mp_emit_bc_start_pass+0x1aa>
                    qst = id->qst;
    9fb4:	697b      	ldr	r3, [r7, #20]
    9fb6:	685b      	ldr	r3, [r3, #4]
    9fb8:	623b      	str	r3, [r7, #32]
                    break;
    9fba:	e008      	b.n	9fce <mp_emit_bc_start_pass+0x1bc>
            for (int j = 0; j < scope->id_info_len; ++j) {
    9fbc:	69fb      	ldr	r3, [r7, #28]
    9fbe:	3301      	adds	r3, #1
    9fc0:	61fb      	str	r3, [r7, #28]
    9fc2:	687b      	ldr	r3, [r7, #4]
    9fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9fc6:	461a      	mov	r2, r3
    9fc8:	69fb      	ldr	r3, [r7, #28]
    9fca:	429a      	cmp	r2, r3
    9fcc:	dce0      	bgt.n	9f90 <mp_emit_bc_start_pass+0x17e>
                }
            }
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    9fce:	68fb      	ldr	r3, [r7, #12]
    9fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9fd4:	009b      	lsls	r3, r3, #2
    9fd6:	4413      	add	r3, r2
    9fd8:	6a3a      	ldr	r2, [r7, #32]
    9fda:	0092      	lsls	r2, r2, #2
    9fdc:	f042 0202 	orr.w	r2, r2, #2
    9fe0:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    9fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9fe4:	3301      	adds	r3, #1
    9fe6:	627b      	str	r3, [r7, #36]	; 0x24
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	8b5b      	ldrh	r3, [r3, #26]
    9fec:	461a      	mov	r2, r3
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	8b9b      	ldrh	r3, [r3, #28]
    9ff2:	441a      	add	r2, r3
    9ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9ff6:	429a      	cmp	r2, r3
    9ff8:	dcc5      	bgt.n	9f86 <mp_emit_bc_start_pass+0x174>
        }
    }
}
    9ffa:	bf00      	nop
    9ffc:	3730      	adds	r7, #48	; 0x30
    9ffe:	46bd      	mov	sp, r7
    a000:	bd80      	pop	{r7, pc}
    a002:	bf00      	nop
    a004:	0002091c 	.word	0x0002091c
    a008:	00020b04 	.word	0x00020b04
    a00c:	000208b0 	.word	0x000208b0

0000a010 <mp_emit_bc_end_pass>:

void mp_emit_bc_end_pass(emit_t *emit) {
    a010:	b580      	push	{r7, lr}
    a012:	b082      	sub	sp, #8
    a014:	af00      	add	r7, sp, #0
    a016:	6078      	str	r0, [r7, #4]
    if (emit->pass == MP_PASS_SCOPE) {
    a018:	687b      	ldr	r3, [r7, #4]
    a01a:	795b      	ldrb	r3, [r3, #5]
    a01c:	2b01      	cmp	r3, #1
    a01e:	d061      	beq.n	a0e4 <mp_emit_bc_end_pass+0xd4>
        return;
    }

    // check stack is back to zero size
    assert(emit->stack_size == 0);
    a020:	687b      	ldr	r3, [r7, #4]
    a022:	689b      	ldr	r3, [r3, #8]
    a024:	2b00      	cmp	r3, #0
    a026:	d006      	beq.n	a036 <mp_emit_bc_end_pass+0x26>
    a028:	4b30      	ldr	r3, [pc, #192]	; (a0ec <mp_emit_bc_end_pass+0xdc>)
    a02a:	4a31      	ldr	r2, [pc, #196]	; (a0f0 <mp_emit_bc_end_pass+0xe0>)
    a02c:	f240 1199 	movw	r1, #409	; 0x199
    a030:	4830      	ldr	r0, [pc, #192]	; (a0f4 <mp_emit_bc_end_pass+0xe4>)
    a032:	f011 f8d7 	bl	1b1e4 <__assert_func>

    emit_write_code_info_byte(emit, 0); // end of line number info
    a036:	2100      	movs	r1, #0
    a038:	6878      	ldr	r0, [r7, #4]
    a03a:	f7ff fccb 	bl	99d4 <emit_write_code_info_byte>

    #if MICROPY_PERSISTENT_CODE
    assert(emit->pass <= MP_PASS_STACK_SIZE || (emit->ct_num_obj == emit->ct_cur_obj));
    a03e:	687b      	ldr	r3, [r7, #4]
    a040:	795b      	ldrb	r3, [r3, #5]
    a042:	2b02      	cmp	r3, #2
    a044:	d90c      	bls.n	a060 <mp_emit_bc_end_pass+0x50>
    a046:	687b      	ldr	r3, [r7, #4]
    a048:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    a04a:	687b      	ldr	r3, [r7, #4]
    a04c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a04e:	429a      	cmp	r2, r3
    a050:	d006      	beq.n	a060 <mp_emit_bc_end_pass+0x50>
    a052:	4b29      	ldr	r3, [pc, #164]	; (a0f8 <mp_emit_bc_end_pass+0xe8>)
    a054:	4a26      	ldr	r2, [pc, #152]	; (a0f0 <mp_emit_bc_end_pass+0xe0>)
    a056:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    a05a:	4826      	ldr	r0, [pc, #152]	; (a0f4 <mp_emit_bc_end_pass+0xe4>)
    a05c:	f011 f8c2 	bl	1b1e4 <__assert_func>
    emit->ct_num_obj = emit->ct_cur_obj;
    a060:	687b      	ldr	r3, [r7, #4]
    a062:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    a064:	687b      	ldr	r3, [r7, #4]
    a066:	86da      	strh	r2, [r3, #54]	; 0x36
    #endif

    if (emit->pass == MP_PASS_CODE_SIZE) {
    a068:	687b      	ldr	r3, [r7, #4]
    a06a:	795b      	ldrb	r3, [r3, #5]
    a06c:	2b03      	cmp	r3, #3
    a06e:	d128      	bne.n	a0c2 <mp_emit_bc_end_pass+0xb2>
        // so bytecode is aligned
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
        #endif

        // calculate size of total code-info + bytecode, in bytes
        emit->code_info_size = emit->code_info_offset;
    a070:	687b      	ldr	r3, [r7, #4]
    a072:	6a1a      	ldr	r2, [r3, #32]
    a074:	687b      	ldr	r3, [r7, #4]
    a076:	625a      	str	r2, [r3, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a07c:	687b      	ldr	r3, [r7, #4]
    a07e:	62da      	str	r2, [r3, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    a080:	687b      	ldr	r3, [r7, #4]
    a082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a088:	4413      	add	r3, r2
    a08a:	4618      	mov	r0, r3
    a08c:	f7f6 f96b 	bl	366 <m_malloc0>
    a090:	4602      	mov	r2, r0
    a092:	687b      	ldr	r3, [r7, #4]
    a094:	631a      	str	r2, [r3, #48]	; 0x30

        #if MICROPY_PERSISTENT_CODE
        emit->const_table = m_new0(mp_uint_t,
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	68db      	ldr	r3, [r3, #12]
    a09a:	8b5b      	ldrh	r3, [r3, #26]
    a09c:	461a      	mov	r2, r3
    a09e:	687b      	ldr	r3, [r7, #4]
    a0a0:	68db      	ldr	r3, [r3, #12]
    a0a2:	8b9b      	ldrh	r3, [r3, #28]
    a0a4:	4413      	add	r3, r2
    a0a6:	687a      	ldr	r2, [r7, #4]
    a0a8:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    a0aa:	4413      	add	r3, r2
    a0ac:	687a      	ldr	r2, [r7, #4]
    a0ae:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    a0b0:	4413      	add	r3, r2
    a0b2:	009b      	lsls	r3, r3, #2
    a0b4:	4618      	mov	r0, r3
    a0b6:	f7f6 f956 	bl	366 <m_malloc0>
    a0ba:	4602      	mov	r2, r0
    a0bc:	687b      	ldr	r3, [r7, #4]
    a0be:	63da      	str	r2, [r3, #60]	; 0x3c
    a0c0:	e011      	b.n	a0e6 <mp_emit_bc_end_pass+0xd6>
        #else
        emit->const_table = m_new0(mp_uint_t,
            emit->scope->num_pos_args + emit->scope->num_kwonly_args);
        #endif

    } else if (emit->pass == MP_PASS_EMIT) {
    a0c2:	687b      	ldr	r3, [r7, #4]
    a0c4:	795b      	ldrb	r3, [r3, #5]
    a0c6:	2b04      	cmp	r3, #4
    a0c8:	d10d      	bne.n	a0e6 <mp_emit_bc_end_pass+0xd6>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a0ca:	687b      	ldr	r3, [r7, #4]
    a0cc:	68db      	ldr	r3, [r3, #12]
    a0ce:	6958      	ldr	r0, [r3, #20]
    a0d0:	687b      	ldr	r3, [r7, #4]
    a0d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
            #if MICROPY_PERSISTENT_CODE_SAVE || MICROPY_DEBUG_PRINTERS
            emit->code_info_size + emit->bytecode_size,
            #endif
            emit->const_table,
    a0d4:	687b      	ldr	r3, [r7, #4]
    a0d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            #if MICROPY_PERSISTENT_CODE_SAVE
            emit->ct_cur_obj, emit->ct_cur_raw_code,
            #endif
            emit->scope->scope_flags);
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	68db      	ldr	r3, [r3, #12]
    a0dc:	7e1b      	ldrb	r3, [r3, #24]
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a0de:	f001 f821 	bl	b124 <mp_emit_glue_assign_bytecode>
    a0e2:	e000      	b.n	a0e6 <mp_emit_bc_end_pass+0xd6>
        return;
    a0e4:	bf00      	nop
    }
}
    a0e6:	3708      	adds	r7, #8
    a0e8:	46bd      	mov	sp, r7
    a0ea:	bd80      	pop	{r7, pc}
    a0ec:	00020930 	.word	0x00020930
    a0f0:	00020b1c 	.word	0x00020b1c
    a0f4:	000208b0 	.word	0x000208b0
    a0f8:	00020948 	.word	0x00020948

0000a0fc <mp_emit_bc_last_emit_was_return_value>:

bool mp_emit_bc_last_emit_was_return_value(emit_t *emit) {
    a0fc:	b480      	push	{r7}
    a0fe:	b083      	sub	sp, #12
    a100:	af00      	add	r7, sp, #0
    a102:	6078      	str	r0, [r7, #4]
    return emit->last_emit_was_return_value;
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	799b      	ldrb	r3, [r3, #6]
    a108:	2b00      	cmp	r3, #0
    a10a:	bf14      	ite	ne
    a10c:	2301      	movne	r3, #1
    a10e:	2300      	moveq	r3, #0
    a110:	b2db      	uxtb	r3, r3
}
    a112:	4618      	mov	r0, r3
    a114:	370c      	adds	r7, #12
    a116:	46bd      	mov	sp, r7
    a118:	f85d 7b04 	ldr.w	r7, [sp], #4
    a11c:	4770      	bx	lr

0000a11e <mp_emit_bc_adjust_stack_size>:

void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    a11e:	b580      	push	{r7, lr}
    a120:	b082      	sub	sp, #8
    a122:	af00      	add	r7, sp, #0
    a124:	6078      	str	r0, [r7, #4]
    a126:	6039      	str	r1, [r7, #0]
    if (emit->pass == MP_PASS_SCOPE) {
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	795b      	ldrb	r3, [r3, #5]
    a12c:	2b01      	cmp	r3, #1
    a12e:	d023      	beq.n	a178 <mp_emit_bc_adjust_stack_size+0x5a>
        return;
    }
    assert((mp_int_t)emit->stack_size + delta >= 0);
    a130:	687b      	ldr	r3, [r7, #4]
    a132:	689a      	ldr	r2, [r3, #8]
    a134:	683b      	ldr	r3, [r7, #0]
    a136:	4413      	add	r3, r2
    a138:	2b00      	cmp	r3, #0
    a13a:	da06      	bge.n	a14a <mp_emit_bc_adjust_stack_size+0x2c>
    a13c:	4b10      	ldr	r3, [pc, #64]	; (a180 <mp_emit_bc_adjust_stack_size+0x62>)
    a13e:	4a11      	ldr	r2, [pc, #68]	; (a184 <mp_emit_bc_adjust_stack_size+0x66>)
    a140:	f240 11cb 	movw	r1, #459	; 0x1cb
    a144:	4810      	ldr	r0, [pc, #64]	; (a188 <mp_emit_bc_adjust_stack_size+0x6a>)
    a146:	f011 f84d 	bl	1b1e4 <__assert_func>
    emit->stack_size += delta;
    a14a:	687b      	ldr	r3, [r7, #4]
    a14c:	689a      	ldr	r2, [r3, #8]
    a14e:	683b      	ldr	r3, [r7, #0]
    a150:	441a      	add	r2, r3
    a152:	687b      	ldr	r3, [r7, #4]
    a154:	609a      	str	r2, [r3, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	689b      	ldr	r3, [r3, #8]
    a15a:	687a      	ldr	r2, [r7, #4]
    a15c:	68d2      	ldr	r2, [r2, #12]
    a15e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    a160:	4293      	cmp	r3, r2
    a162:	dd05      	ble.n	a170 <mp_emit_bc_adjust_stack_size+0x52>
        emit->scope->stack_size = emit->stack_size;
    a164:	687b      	ldr	r3, [r7, #4]
    a166:	68db      	ldr	r3, [r3, #12]
    a168:	687a      	ldr	r2, [r7, #4]
    a16a:	6892      	ldr	r2, [r2, #8]
    a16c:	b292      	uxth	r2, r2
    a16e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    emit->last_emit_was_return_value = false;
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	2200      	movs	r2, #0
    a174:	719a      	strb	r2, [r3, #6]
    a176:	e000      	b.n	a17a <mp_emit_bc_adjust_stack_size+0x5c>
        return;
    a178:	bf00      	nop
}
    a17a:	3708      	adds	r7, #8
    a17c:	46bd      	mov	sp, r7
    a17e:	bd80      	pop	{r7, pc}
    a180:	00020994 	.word	0x00020994
    a184:	00020b30 	.word	0x00020b30
    a188:	000208b0 	.word	0x000208b0

0000a18c <emit_bc_pre>:

static inline void emit_bc_pre(emit_t *emit, mp_int_t stack_size_delta) {
    a18c:	b580      	push	{r7, lr}
    a18e:	b082      	sub	sp, #8
    a190:	af00      	add	r7, sp, #0
    a192:	6078      	str	r0, [r7, #4]
    a194:	6039      	str	r1, [r7, #0]
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    a196:	6839      	ldr	r1, [r7, #0]
    a198:	6878      	ldr	r0, [r7, #4]
    a19a:	f7ff ffc0 	bl	a11e <mp_emit_bc_adjust_stack_size>
}
    a19e:	bf00      	nop
    a1a0:	3708      	adds	r7, #8
    a1a2:	46bd      	mov	sp, r7
    a1a4:	bd80      	pop	{r7, pc}

0000a1a6 <mp_emit_bc_set_source_line>:

void mp_emit_bc_set_source_line(emit_t *emit, mp_uint_t source_line) {
    a1a6:	b480      	push	{r7}
    a1a8:	b083      	sub	sp, #12
    a1aa:	af00      	add	r7, sp, #0
    a1ac:	6078      	str	r0, [r7, #4]
    a1ae:	6039      	str	r1, [r7, #0]
    }
#else
    (void)emit;
    (void)source_line;
#endif
}
    a1b0:	bf00      	nop
    a1b2:	370c      	adds	r7, #12
    a1b4:	46bd      	mov	sp, r7
    a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1ba:	4770      	bx	lr

0000a1bc <mp_emit_bc_label_assign>:

void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    a1bc:	b580      	push	{r7, lr}
    a1be:	b082      	sub	sp, #8
    a1c0:	af00      	add	r7, sp, #0
    a1c2:	6078      	str	r0, [r7, #4]
    a1c4:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a1c6:	2100      	movs	r1, #0
    a1c8:	6878      	ldr	r0, [r7, #4]
    a1ca:	f7ff ffdf 	bl	a18c <emit_bc_pre>
    if (emit->pass == MP_PASS_SCOPE) {
    a1ce:	687b      	ldr	r3, [r7, #4]
    a1d0:	795b      	ldrb	r3, [r3, #5]
    a1d2:	2b01      	cmp	r3, #1
    a1d4:	d039      	beq.n	a24a <mp_emit_bc_label_assign+0x8e>
        return;
    }
    assert(l < emit->max_num_labels);
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	699a      	ldr	r2, [r3, #24]
    a1da:	683b      	ldr	r3, [r7, #0]
    a1dc:	429a      	cmp	r2, r3
    a1de:	d806      	bhi.n	a1ee <mp_emit_bc_label_assign+0x32>
    a1e0:	4b1c      	ldr	r3, [pc, #112]	; (a254 <mp_emit_bc_label_assign+0x98>)
    a1e2:	4a1d      	ldr	r2, [pc, #116]	; (a258 <mp_emit_bc_label_assign+0x9c>)
    a1e4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    a1e8:	481c      	ldr	r0, [pc, #112]	; (a25c <mp_emit_bc_label_assign+0xa0>)
    a1ea:	f010 fffb 	bl	1b1e4 <__assert_func>
    if (emit->pass < MP_PASS_EMIT) {
    a1ee:	687b      	ldr	r3, [r7, #4]
    a1f0:	795b      	ldrb	r3, [r3, #5]
    a1f2:	2b03      	cmp	r3, #3
    a1f4:	d818      	bhi.n	a228 <mp_emit_bc_label_assign+0x6c>
        // assign label offset
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    a1f6:	687b      	ldr	r3, [r7, #4]
    a1f8:	69da      	ldr	r2, [r3, #28]
    a1fa:	683b      	ldr	r3, [r7, #0]
    a1fc:	009b      	lsls	r3, r3, #2
    a1fe:	4413      	add	r3, r2
    a200:	681b      	ldr	r3, [r3, #0]
    a202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a206:	d006      	beq.n	a216 <mp_emit_bc_label_assign+0x5a>
    a208:	4b15      	ldr	r3, [pc, #84]	; (a260 <mp_emit_bc_label_assign+0xa4>)
    a20a:	4a13      	ldr	r2, [pc, #76]	; (a258 <mp_emit_bc_label_assign+0x9c>)
    a20c:	f240 11f3 	movw	r1, #499	; 0x1f3
    a210:	4812      	ldr	r0, [pc, #72]	; (a25c <mp_emit_bc_label_assign+0xa0>)
    a212:	f010 ffe7 	bl	1b1e4 <__assert_func>
        emit->label_offsets[l] = emit->bytecode_offset;
    a216:	687b      	ldr	r3, [r7, #4]
    a218:	69da      	ldr	r2, [r3, #28]
    a21a:	683b      	ldr	r3, [r7, #0]
    a21c:	009b      	lsls	r3, r3, #2
    a21e:	4413      	add	r3, r2
    a220:	687a      	ldr	r2, [r7, #4]
    a222:	6a92      	ldr	r2, [r2, #40]	; 0x28
    a224:	601a      	str	r2, [r3, #0]
    a226:	e011      	b.n	a24c <mp_emit_bc_label_assign+0x90>
    } else {
        // ensure label offset has not changed from MP_PASS_CODE_SIZE to MP_PASS_EMIT
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    a228:	687b      	ldr	r3, [r7, #4]
    a22a:	69da      	ldr	r2, [r3, #28]
    a22c:	683b      	ldr	r3, [r7, #0]
    a22e:	009b      	lsls	r3, r3, #2
    a230:	4413      	add	r3, r2
    a232:	681a      	ldr	r2, [r3, #0]
    a234:	687b      	ldr	r3, [r7, #4]
    a236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a238:	429a      	cmp	r2, r3
    a23a:	d007      	beq.n	a24c <mp_emit_bc_label_assign+0x90>
    a23c:	4b09      	ldr	r3, [pc, #36]	; (a264 <mp_emit_bc_label_assign+0xa8>)
    a23e:	4a06      	ldr	r2, [pc, #24]	; (a258 <mp_emit_bc_label_assign+0x9c>)
    a240:	f240 11f7 	movw	r1, #503	; 0x1f7
    a244:	4805      	ldr	r0, [pc, #20]	; (a25c <mp_emit_bc_label_assign+0xa0>)
    a246:	f010 ffcd 	bl	1b1e4 <__assert_func>
        return;
    a24a:	bf00      	nop
    }
}
    a24c:	3708      	adds	r7, #8
    a24e:	46bd      	mov	sp, r7
    a250:	bd80      	pop	{r7, pc}
    a252:	bf00      	nop
    a254:	000209bc 	.word	0x000209bc
    a258:	00020b50 	.word	0x00020b50
    a25c:	000208b0 	.word	0x000208b0
    a260:	000209d8 	.word	0x000209d8
    a264:	00020a00 	.word	0x00020a00

0000a268 <mp_emit_bc_import>:

void mp_emit_bc_import(emit_t *emit, qstr qst, int kind) {
    a268:	b580      	push	{r7, lr}
    a26a:	b084      	sub	sp, #16
    a26c:	af00      	add	r7, sp, #0
    a26e:	60f8      	str	r0, [r7, #12]
    a270:	60b9      	str	r1, [r7, #8]
    a272:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_NAME == MP_BC_IMPORT_NAME);
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_FROM == MP_BC_IMPORT_FROM);
    if (kind == MP_EMIT_IMPORT_FROM) {
    a274:	687b      	ldr	r3, [r7, #4]
    a276:	2b01      	cmp	r3, #1
    a278:	d104      	bne.n	a284 <mp_emit_bc_import+0x1c>
        emit_bc_pre(emit, 1);
    a27a:	2101      	movs	r1, #1
    a27c:	68f8      	ldr	r0, [r7, #12]
    a27e:	f7ff ff85 	bl	a18c <emit_bc_pre>
    a282:	e004      	b.n	a28e <mp_emit_bc_import+0x26>
    } else {
        emit_bc_pre(emit, -1);
    a284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a288:	68f8      	ldr	r0, [r7, #12]
    a28a:	f7ff ff7f 	bl	a18c <emit_bc_pre>
    }
    if (kind == MP_EMIT_IMPORT_STAR) {
    a28e:	687b      	ldr	r3, [r7, #4]
    a290:	2b02      	cmp	r3, #2
    a292:	d104      	bne.n	a29e <mp_emit_bc_import+0x36>
        emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    a294:	216a      	movs	r1, #106	; 0x6a
    a296:	68f8      	ldr	r0, [r7, #12]
    a298:	f7ff fc20 	bl	9adc <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    }
}
    a29c:	e008      	b.n	a2b0 <mp_emit_bc_import+0x48>
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    a29e:	687b      	ldr	r3, [r7, #4]
    a2a0:	b2db      	uxtb	r3, r3
    a2a2:	3368      	adds	r3, #104	; 0x68
    a2a4:	b2db      	uxtb	r3, r3
    a2a6:	68ba      	ldr	r2, [r7, #8]
    a2a8:	4619      	mov	r1, r3
    a2aa:	68f8      	ldr	r0, [r7, #12]
    a2ac:	f7ff fcdd 	bl	9c6a <emit_write_bytecode_byte_qstr>
}
    a2b0:	bf00      	nop
    a2b2:	3710      	adds	r7, #16
    a2b4:	46bd      	mov	sp, r7
    a2b6:	bd80      	pop	{r7, pc}

0000a2b8 <mp_emit_bc_load_const_tok>:

void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    a2b8:	b580      	push	{r7, lr}
    a2ba:	b082      	sub	sp, #8
    a2bc:	af00      	add	r7, sp, #0
    a2be:	6078      	str	r0, [r7, #4]
    a2c0:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a2c2:	2101      	movs	r1, #1
    a2c4:	6878      	ldr	r0, [r7, #4]
    a2c6:	f7ff ff61 	bl	a18c <emit_bc_pre>
    switch (tok) {
    a2ca:	683b      	ldr	r3, [r7, #0]
    a2cc:	2b0e      	cmp	r3, #14
    a2ce:	d008      	beq.n	a2e2 <mp_emit_bc_load_const_tok+0x2a>
    a2d0:	2b0f      	cmp	r3, #15
    a2d2:	d00b      	beq.n	a2ec <mp_emit_bc_load_const_tok+0x34>
    a2d4:	2b0d      	cmp	r3, #13
    a2d6:	d10e      	bne.n	a2f6 <mp_emit_bc_load_const_tok+0x3e>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    a2d8:	2110      	movs	r1, #16
    a2da:	6878      	ldr	r0, [r7, #4]
    a2dc:	f7ff fbfe 	bl	9adc <emit_write_bytecode_byte>
    a2e0:	e019      	b.n	a316 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    a2e2:	2111      	movs	r1, #17
    a2e4:	6878      	ldr	r0, [r7, #4]
    a2e6:	f7ff fbf9 	bl	9adc <emit_write_bytecode_byte>
    a2ea:	e014      	b.n	a316 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    a2ec:	2112      	movs	r1, #18
    a2ee:	6878      	ldr	r0, [r7, #4]
    a2f0:	f7ff fbf4 	bl	9adc <emit_write_bytecode_byte>
    a2f4:	e00f      	b.n	a316 <mp_emit_bc_load_const_tok+0x5e>
        default:
            assert(tok == MP_TOKEN_ELLIPSIS);
    a2f6:	683b      	ldr	r3, [r7, #0]
    a2f8:	2b0c      	cmp	r3, #12
    a2fa:	d006      	beq.n	a30a <mp_emit_bc_load_const_tok+0x52>
    a2fc:	4b08      	ldr	r3, [pc, #32]	; (a320 <mp_emit_bc_load_const_tok+0x68>)
    a2fe:	4a09      	ldr	r2, [pc, #36]	; (a324 <mp_emit_bc_load_const_tok+0x6c>)
    a300:	f240 2111 	movw	r1, #529	; 0x211
    a304:	4808      	ldr	r0, [pc, #32]	; (a328 <mp_emit_bc_load_const_tok+0x70>)
    a306:	f010 ff6d 	bl	1b1e4 <__assert_func>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    a30a:	4a08      	ldr	r2, [pc, #32]	; (a32c <mp_emit_bc_load_const_tok+0x74>)
    a30c:	2117      	movs	r1, #23
    a30e:	6878      	ldr	r0, [r7, #4]
    a310:	f7ff fcda 	bl	9cc8 <emit_write_bytecode_byte_obj>
            break;
    a314:	bf00      	nop
    }
}
    a316:	bf00      	nop
    a318:	3708      	adds	r7, #8
    a31a:	46bd      	mov	sp, r7
    a31c:	bd80      	pop	{r7, pc}
    a31e:	bf00      	nop
    a320:	00020a30 	.word	0x00020a30
    a324:	00020b68 	.word	0x00020b68
    a328:	000208b0 	.word	0x000208b0
    a32c:	00022c38 	.word	0x00022c38

0000a330 <mp_emit_bc_load_const_small_int>:

void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    a330:	b580      	push	{r7, lr}
    a332:	b082      	sub	sp, #8
    a334:	af00      	add	r7, sp, #0
    a336:	6078      	str	r0, [r7, #4]
    a338:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a33a:	2101      	movs	r1, #1
    a33c:	6878      	ldr	r0, [r7, #4]
    a33e:	f7ff ff25 	bl	a18c <emit_bc_pre>
    if (-16 <= arg && arg <= 47) {
    a342:	683b      	ldr	r3, [r7, #0]
    a344:	f113 0f10 	cmn.w	r3, #16
    a348:	db0b      	blt.n	a362 <mp_emit_bc_load_const_small_int+0x32>
    a34a:	683b      	ldr	r3, [r7, #0]
    a34c:	2b2f      	cmp	r3, #47	; 0x2f
    a34e:	dc08      	bgt.n	a362 <mp_emit_bc_load_const_small_int+0x32>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    a350:	683b      	ldr	r3, [r7, #0]
    a352:	b2db      	uxtb	r3, r3
    a354:	3b80      	subs	r3, #128	; 0x80
    a356:	b2db      	uxtb	r3, r3
    a358:	4619      	mov	r1, r3
    a35a:	6878      	ldr	r0, [r7, #4]
    a35c:	f7ff fbbe 	bl	9adc <emit_write_bytecode_byte>
    a360:	e004      	b.n	a36c <mp_emit_bc_load_const_small_int+0x3c>
    } else {
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    a362:	683a      	ldr	r2, [r7, #0]
    a364:	2114      	movs	r1, #20
    a366:	6878      	ldr	r0, [r7, #4]
    a368:	f7ff fbe2 	bl	9b30 <emit_write_bytecode_byte_int>
    }
}
    a36c:	bf00      	nop
    a36e:	3708      	adds	r7, #8
    a370:	46bd      	mov	sp, r7
    a372:	bd80      	pop	{r7, pc}

0000a374 <mp_emit_bc_load_const_str>:

void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    a374:	b580      	push	{r7, lr}
    a376:	b082      	sub	sp, #8
    a378:	af00      	add	r7, sp, #0
    a37a:	6078      	str	r0, [r7, #4]
    a37c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a37e:	2101      	movs	r1, #1
    a380:	6878      	ldr	r0, [r7, #4]
    a382:	f7ff ff03 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    a386:	683a      	ldr	r2, [r7, #0]
    a388:	2116      	movs	r1, #22
    a38a:	6878      	ldr	r0, [r7, #4]
    a38c:	f7ff fc6d 	bl	9c6a <emit_write_bytecode_byte_qstr>
}
    a390:	bf00      	nop
    a392:	3708      	adds	r7, #8
    a394:	46bd      	mov	sp, r7
    a396:	bd80      	pop	{r7, pc}

0000a398 <mp_emit_bc_load_const_obj>:

void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    a398:	b580      	push	{r7, lr}
    a39a:	b082      	sub	sp, #8
    a39c:	af00      	add	r7, sp, #0
    a39e:	6078      	str	r0, [r7, #4]
    a3a0:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a3a2:	2101      	movs	r1, #1
    a3a4:	6878      	ldr	r0, [r7, #4]
    a3a6:	f7ff fef1 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    a3aa:	683a      	ldr	r2, [r7, #0]
    a3ac:	2117      	movs	r1, #23
    a3ae:	6878      	ldr	r0, [r7, #4]
    a3b0:	f7ff fc8a 	bl	9cc8 <emit_write_bytecode_byte_obj>
}
    a3b4:	bf00      	nop
    a3b6:	3708      	adds	r7, #8
    a3b8:	46bd      	mov	sp, r7
    a3ba:	bd80      	pop	{r7, pc}

0000a3bc <mp_emit_bc_load_null>:

void mp_emit_bc_load_null(emit_t *emit) {
    a3bc:	b580      	push	{r7, lr}
    a3be:	b082      	sub	sp, #8
    a3c0:	af00      	add	r7, sp, #0
    a3c2:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a3c4:	2101      	movs	r1, #1
    a3c6:	6878      	ldr	r0, [r7, #4]
    a3c8:	f7ff fee0 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    a3cc:	2118      	movs	r1, #24
    a3ce:	6878      	ldr	r0, [r7, #4]
    a3d0:	f7ff fb84 	bl	9adc <emit_write_bytecode_byte>
}
    a3d4:	bf00      	nop
    a3d6:	3708      	adds	r7, #8
    a3d8:	46bd      	mov	sp, r7
    a3da:	bd80      	pop	{r7, pc}

0000a3dc <mp_emit_bc_load_local>:

void mp_emit_bc_load_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a3dc:	b580      	push	{r7, lr}
    a3de:	b084      	sub	sp, #16
    a3e0:	af00      	add	r7, sp, #0
    a3e2:	60f8      	str	r0, [r7, #12]
    a3e4:	60b9      	str	r1, [r7, #8]
    a3e6:	607a      	str	r2, [r7, #4]
    a3e8:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_LOAD_FAST_N);
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_LOAD_DEREF);
    (void)qst;
    emit_bc_pre(emit, 1);
    a3ea:	2101      	movs	r1, #1
    a3ec:	68f8      	ldr	r0, [r7, #12]
    a3ee:	f7ff fecd 	bl	a18c <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a3f2:	683b      	ldr	r3, [r7, #0]
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	d10b      	bne.n	a410 <mp_emit_bc_load_local+0x34>
    a3f8:	687b      	ldr	r3, [r7, #4]
    a3fa:	2b0f      	cmp	r3, #15
    a3fc:	d808      	bhi.n	a410 <mp_emit_bc_load_local+0x34>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    a3fe:	687b      	ldr	r3, [r7, #4]
    a400:	b2db      	uxtb	r3, r3
    a402:	3b50      	subs	r3, #80	; 0x50
    a404:	b2db      	uxtb	r3, r3
    a406:	4619      	mov	r1, r3
    a408:	68f8      	ldr	r0, [r7, #12]
    a40a:	f7ff fb67 	bl	9adc <emit_write_bytecode_byte>
    a40e:	e008      	b.n	a422 <mp_emit_bc_load_local+0x46>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N + kind, local_num);
    a410:	683b      	ldr	r3, [r7, #0]
    a412:	b2db      	uxtb	r3, r3
    a414:	3319      	adds	r3, #25
    a416:	b2db      	uxtb	r3, r3
    a418:	687a      	ldr	r2, [r7, #4]
    a41a:	4619      	mov	r1, r3
    a41c:	68f8      	ldr	r0, [r7, #12]
    a41e:	f7ff fbf0 	bl	9c02 <emit_write_bytecode_byte_uint>
    }
}
    a422:	bf00      	nop
    a424:	3710      	adds	r7, #16
    a426:	46bd      	mov	sp, r7
    a428:	bd80      	pop	{r7, pc}

0000a42a <mp_emit_bc_load_global>:

void mp_emit_bc_load_global(emit_t *emit, qstr qst, int kind) {
    a42a:	b580      	push	{r7, lr}
    a42c:	b084      	sub	sp, #16
    a42e:	af00      	add	r7, sp, #0
    a430:	60f8      	str	r0, [r7, #12]
    a432:	60b9      	str	r1, [r7, #8]
    a434:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_LOAD_NAME);
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_LOAD_GLOBAL);
    (void)qst;
    emit_bc_pre(emit, 1);
    a436:	2101      	movs	r1, #1
    a438:	68f8      	ldr	r0, [r7, #12]
    a43a:	f7ff fea7 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME + kind, qst);
    a43e:	687b      	ldr	r3, [r7, #4]
    a440:	b2db      	uxtb	r3, r3
    a442:	331b      	adds	r3, #27
    a444:	b2db      	uxtb	r3, r3
    a446:	68ba      	ldr	r2, [r7, #8]
    a448:	4619      	mov	r1, r3
    a44a:	68f8      	ldr	r0, [r7, #12]
    a44c:	f7ff fc0d 	bl	9c6a <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a450:	bf00      	nop
    a452:	3710      	adds	r7, #16
    a454:	46bd      	mov	sp, r7
    a456:	bd80      	pop	{r7, pc}

0000a458 <mp_emit_bc_load_method>:

void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    a458:	b580      	push	{r7, lr}
    a45a:	b084      	sub	sp, #16
    a45c:	af00      	add	r7, sp, #0
    a45e:	60f8      	str	r0, [r7, #12]
    a460:	60b9      	str	r1, [r7, #8]
    a462:	4613      	mov	r3, r2
    a464:	71fb      	strb	r3, [r7, #7]
    emit_bc_pre(emit, 1 - 2 * is_super);
    a466:	79fb      	ldrb	r3, [r7, #7]
    a468:	005b      	lsls	r3, r3, #1
    a46a:	f1c3 0301 	rsb	r3, r3, #1
    a46e:	4619      	mov	r1, r3
    a470:	68f8      	ldr	r0, [r7, #12]
    a472:	f7ff fe8b 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    a476:	79fb      	ldrb	r3, [r7, #7]
    a478:	2b00      	cmp	r3, #0
    a47a:	d001      	beq.n	a480 <mp_emit_bc_load_method+0x28>
    a47c:	231f      	movs	r3, #31
    a47e:	e000      	b.n	a482 <mp_emit_bc_load_method+0x2a>
    a480:	231e      	movs	r3, #30
    a482:	68ba      	ldr	r2, [r7, #8]
    a484:	4619      	mov	r1, r3
    a486:	68f8      	ldr	r0, [r7, #12]
    a488:	f7ff fbef 	bl	9c6a <emit_write_bytecode_byte_qstr>
}
    a48c:	bf00      	nop
    a48e:	3710      	adds	r7, #16
    a490:	46bd      	mov	sp, r7
    a492:	bd80      	pop	{r7, pc}

0000a494 <mp_emit_bc_load_build_class>:

void mp_emit_bc_load_build_class(emit_t *emit) {
    a494:	b580      	push	{r7, lr}
    a496:	b082      	sub	sp, #8
    a498:	af00      	add	r7, sp, #0
    a49a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a49c:	2101      	movs	r1, #1
    a49e:	6878      	ldr	r0, [r7, #4]
    a4a0:	f7ff fe74 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    a4a4:	2120      	movs	r1, #32
    a4a6:	6878      	ldr	r0, [r7, #4]
    a4a8:	f7ff fb18 	bl	9adc <emit_write_bytecode_byte>
}
    a4ac:	bf00      	nop
    a4ae:	3708      	adds	r7, #8
    a4b0:	46bd      	mov	sp, r7
    a4b2:	bd80      	pop	{r7, pc}

0000a4b4 <mp_emit_bc_subscr>:

void mp_emit_bc_subscr(emit_t *emit, int kind) {
    a4b4:	b580      	push	{r7, lr}
    a4b6:	b082      	sub	sp, #8
    a4b8:	af00      	add	r7, sp, #0
    a4ba:	6078      	str	r0, [r7, #4]
    a4bc:	6039      	str	r1, [r7, #0]
    if (kind == MP_EMIT_SUBSCR_LOAD) {
    a4be:	683b      	ldr	r3, [r7, #0]
    a4c0:	2b00      	cmp	r3, #0
    a4c2:	d109      	bne.n	a4d8 <mp_emit_bc_subscr+0x24>
        emit_bc_pre(emit, -1);
    a4c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a4c8:	6878      	ldr	r0, [r7, #4]
    a4ca:	f7ff fe5f 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    a4ce:	2121      	movs	r1, #33	; 0x21
    a4d0:	6878      	ldr	r0, [r7, #4]
    a4d2:	f7ff fb03 	bl	9adc <emit_write_bytecode_byte>
            mp_emit_bc_rot_three(emit);
        }
        emit_bc_pre(emit, -3);
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    }
}
    a4d6:	e011      	b.n	a4fc <mp_emit_bc_subscr+0x48>
        if (kind == MP_EMIT_SUBSCR_DELETE) {
    a4d8:	683b      	ldr	r3, [r7, #0]
    a4da:	2b02      	cmp	r3, #2
    a4dc:	d105      	bne.n	a4ea <mp_emit_bc_subscr+0x36>
            mp_emit_bc_load_null(emit);
    a4de:	6878      	ldr	r0, [r7, #4]
    a4e0:	f7ff ff6c 	bl	a3bc <mp_emit_bc_load_null>
            mp_emit_bc_rot_three(emit);
    a4e4:	6878      	ldr	r0, [r7, #4]
    a4e6:	f000 f8e3 	bl	a6b0 <mp_emit_bc_rot_three>
        emit_bc_pre(emit, -3);
    a4ea:	f06f 0102 	mvn.w	r1, #2
    a4ee:	6878      	ldr	r0, [r7, #4]
    a4f0:	f7ff fe4c 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    a4f4:	2127      	movs	r1, #39	; 0x27
    a4f6:	6878      	ldr	r0, [r7, #4]
    a4f8:	f7ff faf0 	bl	9adc <emit_write_bytecode_byte>
}
    a4fc:	bf00      	nop
    a4fe:	3708      	adds	r7, #8
    a500:	46bd      	mov	sp, r7
    a502:	bd80      	pop	{r7, pc}

0000a504 <mp_emit_bc_attr>:

void mp_emit_bc_attr(emit_t *emit, qstr qst, int kind) {
    a504:	b580      	push	{r7, lr}
    a506:	b084      	sub	sp, #16
    a508:	af00      	add	r7, sp, #0
    a50a:	60f8      	str	r0, [r7, #12]
    a50c:	60b9      	str	r1, [r7, #8]
    a50e:	607a      	str	r2, [r7, #4]
    if (kind == MP_EMIT_ATTR_LOAD) {
    a510:	687b      	ldr	r3, [r7, #4]
    a512:	2b00      	cmp	r3, #0
    a514:	d109      	bne.n	a52a <mp_emit_bc_attr+0x26>
        emit_bc_pre(emit, 0);
    a516:	2100      	movs	r1, #0
    a518:	68f8      	ldr	r0, [r7, #12]
    a51a:	f7ff fe37 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    a51e:	68ba      	ldr	r2, [r7, #8]
    a520:	211d      	movs	r1, #29
    a522:	68f8      	ldr	r0, [r7, #12]
    a524:	f7ff fba1 	bl	9c6a <emit_write_bytecode_byte_qstr>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    }
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a528:	e012      	b.n	a550 <mp_emit_bc_attr+0x4c>
        if (kind == MP_EMIT_ATTR_DELETE) {
    a52a:	687b      	ldr	r3, [r7, #4]
    a52c:	2b02      	cmp	r3, #2
    a52e:	d105      	bne.n	a53c <mp_emit_bc_attr+0x38>
            mp_emit_bc_load_null(emit);
    a530:	68f8      	ldr	r0, [r7, #12]
    a532:	f7ff ff43 	bl	a3bc <mp_emit_bc_load_null>
            mp_emit_bc_rot_two(emit);
    a536:	68f8      	ldr	r0, [r7, #12]
    a538:	f000 f8aa 	bl	a690 <mp_emit_bc_rot_two>
        emit_bc_pre(emit, -2);
    a53c:	f06f 0101 	mvn.w	r1, #1
    a540:	68f8      	ldr	r0, [r7, #12]
    a542:	f7ff fe23 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    a546:	68ba      	ldr	r2, [r7, #8]
    a548:	2126      	movs	r1, #38	; 0x26
    a54a:	68f8      	ldr	r0, [r7, #12]
    a54c:	f7ff fb8d 	bl	9c6a <emit_write_bytecode_byte_qstr>
}
    a550:	bf00      	nop
    a552:	3710      	adds	r7, #16
    a554:	46bd      	mov	sp, r7
    a556:	bd80      	pop	{r7, pc}

0000a558 <mp_emit_bc_store_local>:

void mp_emit_bc_store_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a558:	b580      	push	{r7, lr}
    a55a:	b084      	sub	sp, #16
    a55c:	af00      	add	r7, sp, #0
    a55e:	60f8      	str	r0, [r7, #12]
    a560:	60b9      	str	r1, [r7, #8]
    a562:	607a      	str	r2, [r7, #4]
    a564:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_STORE_FAST_N);
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_STORE_DEREF);
    (void)qst;
    emit_bc_pre(emit, -1);
    a566:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a56a:	68f8      	ldr	r0, [r7, #12]
    a56c:	f7ff fe0e 	bl	a18c <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a570:	683b      	ldr	r3, [r7, #0]
    a572:	2b00      	cmp	r3, #0
    a574:	d10b      	bne.n	a58e <mp_emit_bc_store_local+0x36>
    a576:	687b      	ldr	r3, [r7, #4]
    a578:	2b0f      	cmp	r3, #15
    a57a:	d808      	bhi.n	a58e <mp_emit_bc_store_local+0x36>
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    a57c:	687b      	ldr	r3, [r7, #4]
    a57e:	b2db      	uxtb	r3, r3
    a580:	3b40      	subs	r3, #64	; 0x40
    a582:	b2db      	uxtb	r3, r3
    a584:	4619      	mov	r1, r3
    a586:	68f8      	ldr	r0, [r7, #12]
    a588:	f7ff faa8 	bl	9adc <emit_write_bytecode_byte>
    a58c:	e008      	b.n	a5a0 <mp_emit_bc_store_local+0x48>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N + kind, local_num);
    a58e:	683b      	ldr	r3, [r7, #0]
    a590:	b2db      	uxtb	r3, r3
    a592:	3322      	adds	r3, #34	; 0x22
    a594:	b2db      	uxtb	r3, r3
    a596:	687a      	ldr	r2, [r7, #4]
    a598:	4619      	mov	r1, r3
    a59a:	68f8      	ldr	r0, [r7, #12]
    a59c:	f7ff fb31 	bl	9c02 <emit_write_bytecode_byte_uint>
    }
}
    a5a0:	bf00      	nop
    a5a2:	3710      	adds	r7, #16
    a5a4:	46bd      	mov	sp, r7
    a5a6:	bd80      	pop	{r7, pc}

0000a5a8 <mp_emit_bc_store_global>:

void mp_emit_bc_store_global(emit_t *emit, qstr qst, int kind) {
    a5a8:	b580      	push	{r7, lr}
    a5aa:	b084      	sub	sp, #16
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	60f8      	str	r0, [r7, #12]
    a5b0:	60b9      	str	r1, [r7, #8]
    a5b2:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_STORE_NAME);
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_STORE_GLOBAL);
    emit_bc_pre(emit, -1);
    a5b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a5b8:	68f8      	ldr	r0, [r7, #12]
    a5ba:	f7ff fde7 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME + kind, qst);
    a5be:	687b      	ldr	r3, [r7, #4]
    a5c0:	b2db      	uxtb	r3, r3
    a5c2:	3324      	adds	r3, #36	; 0x24
    a5c4:	b2db      	uxtb	r3, r3
    a5c6:	68ba      	ldr	r2, [r7, #8]
    a5c8:	4619      	mov	r1, r3
    a5ca:	68f8      	ldr	r0, [r7, #12]
    a5cc:	f7ff fb4d 	bl	9c6a <emit_write_bytecode_byte_qstr>
}
    a5d0:	bf00      	nop
    a5d2:	3710      	adds	r7, #16
    a5d4:	46bd      	mov	sp, r7
    a5d6:	bd80      	pop	{r7, pc}

0000a5d8 <mp_emit_bc_delete_local>:

void mp_emit_bc_delete_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a5d8:	b580      	push	{r7, lr}
    a5da:	b084      	sub	sp, #16
    a5dc:	af00      	add	r7, sp, #0
    a5de:	60f8      	str	r0, [r7, #12]
    a5e0:	60b9      	str	r1, [r7, #8]
    a5e2:	607a      	str	r2, [r7, #4]
    a5e4:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_DELETE_FAST);
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_DELETE_DEREF);
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST + kind, local_num);
    a5e6:	683b      	ldr	r3, [r7, #0]
    a5e8:	b2db      	uxtb	r3, r3
    a5ea:	3328      	adds	r3, #40	; 0x28
    a5ec:	b2db      	uxtb	r3, r3
    a5ee:	687a      	ldr	r2, [r7, #4]
    a5f0:	4619      	mov	r1, r3
    a5f2:	68f8      	ldr	r0, [r7, #12]
    a5f4:	f7ff fb05 	bl	9c02 <emit_write_bytecode_byte_uint>
}
    a5f8:	bf00      	nop
    a5fa:	3710      	adds	r7, #16
    a5fc:	46bd      	mov	sp, r7
    a5fe:	bd80      	pop	{r7, pc}

0000a600 <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst, int kind) {
    a600:	b580      	push	{r7, lr}
    a602:	b084      	sub	sp, #16
    a604:	af00      	add	r7, sp, #0
    a606:	60f8      	str	r0, [r7, #12]
    a608:	60b9      	str	r1, [r7, #8]
    a60a:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_DELETE_NAME);
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_DELETE_GLOBAL);
    emit_bc_pre(emit, 0);
    a60c:	2100      	movs	r1, #0
    a60e:	68f8      	ldr	r0, [r7, #12]
    a610:	f7ff fdbc 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME + kind, qst);
    a614:	687b      	ldr	r3, [r7, #4]
    a616:	b2db      	uxtb	r3, r3
    a618:	332a      	adds	r3, #42	; 0x2a
    a61a:	b2db      	uxtb	r3, r3
    a61c:	68ba      	ldr	r2, [r7, #8]
    a61e:	4619      	mov	r1, r3
    a620:	68f8      	ldr	r0, [r7, #12]
    a622:	f7ff fb22 	bl	9c6a <emit_write_bytecode_byte_qstr>
}
    a626:	bf00      	nop
    a628:	3710      	adds	r7, #16
    a62a:	46bd      	mov	sp, r7
    a62c:	bd80      	pop	{r7, pc}

0000a62e <mp_emit_bc_dup_top>:

void mp_emit_bc_dup_top(emit_t *emit) {
    a62e:	b580      	push	{r7, lr}
    a630:	b082      	sub	sp, #8
    a632:	af00      	add	r7, sp, #0
    a634:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a636:	2101      	movs	r1, #1
    a638:	6878      	ldr	r0, [r7, #4]
    a63a:	f7ff fda7 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    a63e:	2130      	movs	r1, #48	; 0x30
    a640:	6878      	ldr	r0, [r7, #4]
    a642:	f7ff fa4b 	bl	9adc <emit_write_bytecode_byte>
}
    a646:	bf00      	nop
    a648:	3708      	adds	r7, #8
    a64a:	46bd      	mov	sp, r7
    a64c:	bd80      	pop	{r7, pc}

0000a64e <mp_emit_bc_dup_top_two>:

void mp_emit_bc_dup_top_two(emit_t *emit) {
    a64e:	b580      	push	{r7, lr}
    a650:	b082      	sub	sp, #8
    a652:	af00      	add	r7, sp, #0
    a654:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 2);
    a656:	2102      	movs	r1, #2
    a658:	6878      	ldr	r0, [r7, #4]
    a65a:	f7ff fd97 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    a65e:	2131      	movs	r1, #49	; 0x31
    a660:	6878      	ldr	r0, [r7, #4]
    a662:	f7ff fa3b 	bl	9adc <emit_write_bytecode_byte>
}
    a666:	bf00      	nop
    a668:	3708      	adds	r7, #8
    a66a:	46bd      	mov	sp, r7
    a66c:	bd80      	pop	{r7, pc}

0000a66e <mp_emit_bc_pop_top>:

void mp_emit_bc_pop_top(emit_t *emit) {
    a66e:	b580      	push	{r7, lr}
    a670:	b082      	sub	sp, #8
    a672:	af00      	add	r7, sp, #0
    a674:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a676:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a67a:	6878      	ldr	r0, [r7, #4]
    a67c:	f7ff fd86 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a680:	2132      	movs	r1, #50	; 0x32
    a682:	6878      	ldr	r0, [r7, #4]
    a684:	f7ff fa2a 	bl	9adc <emit_write_bytecode_byte>
}
    a688:	bf00      	nop
    a68a:	3708      	adds	r7, #8
    a68c:	46bd      	mov	sp, r7
    a68e:	bd80      	pop	{r7, pc}

0000a690 <mp_emit_bc_rot_two>:

void mp_emit_bc_rot_two(emit_t *emit) {
    a690:	b580      	push	{r7, lr}
    a692:	b082      	sub	sp, #8
    a694:	af00      	add	r7, sp, #0
    a696:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a698:	2100      	movs	r1, #0
    a69a:	6878      	ldr	r0, [r7, #4]
    a69c:	f7ff fd76 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    a6a0:	2133      	movs	r1, #51	; 0x33
    a6a2:	6878      	ldr	r0, [r7, #4]
    a6a4:	f7ff fa1a 	bl	9adc <emit_write_bytecode_byte>
}
    a6a8:	bf00      	nop
    a6aa:	3708      	adds	r7, #8
    a6ac:	46bd      	mov	sp, r7
    a6ae:	bd80      	pop	{r7, pc}

0000a6b0 <mp_emit_bc_rot_three>:

void mp_emit_bc_rot_three(emit_t *emit) {
    a6b0:	b580      	push	{r7, lr}
    a6b2:	b082      	sub	sp, #8
    a6b4:	af00      	add	r7, sp, #0
    a6b6:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a6b8:	2100      	movs	r1, #0
    a6ba:	6878      	ldr	r0, [r7, #4]
    a6bc:	f7ff fd66 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    a6c0:	2134      	movs	r1, #52	; 0x34
    a6c2:	6878      	ldr	r0, [r7, #4]
    a6c4:	f7ff fa0a 	bl	9adc <emit_write_bytecode_byte>
}
    a6c8:	bf00      	nop
    a6ca:	3708      	adds	r7, #8
    a6cc:	46bd      	mov	sp, r7
    a6ce:	bd80      	pop	{r7, pc}

0000a6d0 <mp_emit_bc_jump>:

void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    a6d0:	b580      	push	{r7, lr}
    a6d2:	b082      	sub	sp, #8
    a6d4:	af00      	add	r7, sp, #0
    a6d6:	6078      	str	r0, [r7, #4]
    a6d8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a6da:	2100      	movs	r1, #0
    a6dc:	6878      	ldr	r0, [r7, #4]
    a6de:	f7ff fd55 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    a6e2:	683a      	ldr	r2, [r7, #0]
    a6e4:	2135      	movs	r1, #53	; 0x35
    a6e6:	6878      	ldr	r0, [r7, #4]
    a6e8:	f7ff fb61 	bl	9dae <emit_write_bytecode_byte_signed_label>
}
    a6ec:	bf00      	nop
    a6ee:	3708      	adds	r7, #8
    a6f0:	46bd      	mov	sp, r7
    a6f2:	bd80      	pop	{r7, pc}

0000a6f4 <mp_emit_bc_pop_jump_if>:

void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    a6f4:	b580      	push	{r7, lr}
    a6f6:	b084      	sub	sp, #16
    a6f8:	af00      	add	r7, sp, #0
    a6fa:	60f8      	str	r0, [r7, #12]
    a6fc:	460b      	mov	r3, r1
    a6fe:	607a      	str	r2, [r7, #4]
    a700:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a702:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a706:	68f8      	ldr	r0, [r7, #12]
    a708:	f7ff fd40 	bl	a18c <emit_bc_pre>
    if (cond) {
    a70c:	7afb      	ldrb	r3, [r7, #11]
    a70e:	2b00      	cmp	r3, #0
    a710:	d005      	beq.n	a71e <mp_emit_bc_pop_jump_if+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    a712:	687a      	ldr	r2, [r7, #4]
    a714:	2136      	movs	r1, #54	; 0x36
    a716:	68f8      	ldr	r0, [r7, #12]
    a718:	f7ff fb49 	bl	9dae <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    }
}
    a71c:	e004      	b.n	a728 <mp_emit_bc_pop_jump_if+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    a71e:	687a      	ldr	r2, [r7, #4]
    a720:	2137      	movs	r1, #55	; 0x37
    a722:	68f8      	ldr	r0, [r7, #12]
    a724:	f7ff fb43 	bl	9dae <emit_write_bytecode_byte_signed_label>
}
    a728:	bf00      	nop
    a72a:	3710      	adds	r7, #16
    a72c:	46bd      	mov	sp, r7
    a72e:	bd80      	pop	{r7, pc}

0000a730 <mp_emit_bc_jump_if_or_pop>:

void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    a730:	b580      	push	{r7, lr}
    a732:	b084      	sub	sp, #16
    a734:	af00      	add	r7, sp, #0
    a736:	60f8      	str	r0, [r7, #12]
    a738:	460b      	mov	r3, r1
    a73a:	607a      	str	r2, [r7, #4]
    a73c:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a73e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a742:	68f8      	ldr	r0, [r7, #12]
    a744:	f7ff fd22 	bl	a18c <emit_bc_pre>
    if (cond) {
    a748:	7afb      	ldrb	r3, [r7, #11]
    a74a:	2b00      	cmp	r3, #0
    a74c:	d005      	beq.n	a75a <mp_emit_bc_jump_if_or_pop+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    a74e:	687a      	ldr	r2, [r7, #4]
    a750:	2138      	movs	r1, #56	; 0x38
    a752:	68f8      	ldr	r0, [r7, #12]
    a754:	f7ff fb2b 	bl	9dae <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    }
}
    a758:	e004      	b.n	a764 <mp_emit_bc_jump_if_or_pop+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    a75a:	687a      	ldr	r2, [r7, #4]
    a75c:	2139      	movs	r1, #57	; 0x39
    a75e:	68f8      	ldr	r0, [r7, #12]
    a760:	f7ff fb25 	bl	9dae <emit_write_bytecode_byte_signed_label>
}
    a764:	bf00      	nop
    a766:	3710      	adds	r7, #16
    a768:	46bd      	mov	sp, r7
    a76a:	bd80      	pop	{r7, pc}

0000a76c <mp_emit_bc_unwind_jump>:

void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    a76c:	b580      	push	{r7, lr}
    a76e:	b086      	sub	sp, #24
    a770:	af00      	add	r7, sp, #0
    a772:	60f8      	str	r0, [r7, #12]
    a774:	60b9      	str	r1, [r7, #8]
    a776:	607a      	str	r2, [r7, #4]
    if (except_depth == 0) {
    a778:	687b      	ldr	r3, [r7, #4]
    a77a:	2b00      	cmp	r3, #0
    a77c:	d122      	bne.n	a7c4 <mp_emit_bc_unwind_jump+0x58>
        emit_bc_pre(emit, 0);
    a77e:	2100      	movs	r1, #0
    a780:	68f8      	ldr	r0, [r7, #12]
    a782:	f7ff fd03 	bl	a18c <emit_bc_pre>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    a786:	68bb      	ldr	r3, [r7, #8]
    a788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a78c:	2b00      	cmp	r3, #0
    a78e:	d010      	beq.n	a7b2 <mp_emit_bc_unwind_jump+0x46>
            // need to pop the iterator if we are breaking out of a for loop
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a790:	2132      	movs	r1, #50	; 0x32
    a792:	68f8      	ldr	r0, [r7, #12]
    a794:	f7ff f9a2 	bl	9adc <emit_write_bytecode_byte>
            // also pop the iter_buf
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a798:	2300      	movs	r3, #0
    a79a:	617b      	str	r3, [r7, #20]
    a79c:	e006      	b.n	a7ac <mp_emit_bc_unwind_jump+0x40>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a79e:	2132      	movs	r1, #50	; 0x32
    a7a0:	68f8      	ldr	r0, [r7, #12]
    a7a2:	f7ff f99b 	bl	9adc <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a7a6:	697b      	ldr	r3, [r7, #20]
    a7a8:	3301      	adds	r3, #1
    a7aa:	617b      	str	r3, [r7, #20]
    a7ac:	697b      	ldr	r3, [r7, #20]
    a7ae:	2b02      	cmp	r3, #2
    a7b0:	d9f5      	bls.n	a79e <mp_emit_bc_unwind_jump+0x32>
            }
        }
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a7b2:	68bb      	ldr	r3, [r7, #8]
    a7b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a7b8:	461a      	mov	r2, r3
    a7ba:	2135      	movs	r1, #53	; 0x35
    a7bc:	68f8      	ldr	r0, [r7, #12]
    a7be:	f7ff faf6 	bl	9dae <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    }
}
    a7c2:	e017      	b.n	a7f4 <mp_emit_bc_unwind_jump+0x88>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a7c4:	68bb      	ldr	r3, [r7, #8]
    a7c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a7ca:	461a      	mov	r2, r3
    a7cc:	2146      	movs	r1, #70	; 0x46
    a7ce:	68f8      	ldr	r0, [r7, #12]
    a7d0:	f7ff faed 	bl	9dae <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    a7d4:	68bb      	ldr	r3, [r7, #8]
    a7d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d001      	beq.n	a7e2 <mp_emit_bc_unwind_jump+0x76>
    a7de:	2280      	movs	r2, #128	; 0x80
    a7e0:	e000      	b.n	a7e4 <mp_emit_bc_unwind_jump+0x78>
    a7e2:	2200      	movs	r2, #0
    a7e4:	687b      	ldr	r3, [r7, #4]
    a7e6:	b2db      	uxtb	r3, r3
    a7e8:	4313      	orrs	r3, r2
    a7ea:	b2db      	uxtb	r3, r3
    a7ec:	4619      	mov	r1, r3
    a7ee:	68f8      	ldr	r0, [r7, #12]
    a7f0:	f7ff f974 	bl	9adc <emit_write_bytecode_byte>
}
    a7f4:	bf00      	nop
    a7f6:	3718      	adds	r7, #24
    a7f8:	46bd      	mov	sp, r7
    a7fa:	bd80      	pop	{r7, pc}

0000a7fc <mp_emit_bc_setup_block>:

void mp_emit_bc_setup_block(emit_t *emit, mp_uint_t label, int kind) {
    a7fc:	b580      	push	{r7, lr}
    a7fe:	b084      	sub	sp, #16
    a800:	af00      	add	r7, sp, #0
    a802:	60f8      	str	r0, [r7, #12]
    a804:	60b9      	str	r1, [r7, #8]
    a806:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_WITH == MP_BC_SETUP_WITH);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_EXCEPT == MP_BC_SETUP_EXCEPT);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_FINALLY == MP_BC_SETUP_FINALLY);
    if (kind == MP_EMIT_SETUP_BLOCK_WITH) {
    a808:	687b      	ldr	r3, [r7, #4]
    a80a:	2b00      	cmp	r3, #0
    a80c:	d104      	bne.n	a818 <mp_emit_bc_setup_block+0x1c>
    // The SETUP_WITH opcode pops ctx_mgr from the top of the stack
    // and then pushes 3 entries: __exit__, ctx_mgr, as_value.
        emit_bc_pre(emit, 2);
    a80e:	2102      	movs	r1, #2
    a810:	68f8      	ldr	r0, [r7, #12]
    a812:	f7ff fcbb 	bl	a18c <emit_bc_pre>
    a816:	e003      	b.n	a820 <mp_emit_bc_setup_block+0x24>
    } else {
        emit_bc_pre(emit, 0);
    a818:	2100      	movs	r1, #0
    a81a:	68f8      	ldr	r0, [r7, #12]
    a81c:	f7ff fcb6 	bl	a18c <emit_bc_pre>
    }
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH + kind, label);
    a820:	687b      	ldr	r3, [r7, #4]
    a822:	b2db      	uxtb	r3, r3
    a824:	333d      	adds	r3, #61	; 0x3d
    a826:	b2db      	uxtb	r3, r3
    a828:	68ba      	ldr	r2, [r7, #8]
    a82a:	4619      	mov	r1, r3
    a82c:	68f8      	ldr	r0, [r7, #12]
    a82e:	f7ff fa8e 	bl	9d4e <emit_write_bytecode_byte_unsigned_label>
}
    a832:	bf00      	nop
    a834:	3710      	adds	r7, #16
    a836:	46bd      	mov	sp, r7
    a838:	bd80      	pop	{r7, pc}

0000a83a <mp_emit_bc_with_cleanup>:

void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    a83a:	b580      	push	{r7, lr}
    a83c:	b082      	sub	sp, #8
    a83e:	af00      	add	r7, sp, #0
    a840:	6078      	str	r0, [r7, #4]
    a842:	6039      	str	r1, [r7, #0]
    mp_emit_bc_pop_block(emit);
    a844:	6878      	ldr	r0, [r7, #4]
    a846:	f000 f867 	bl	a918 <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    a84a:	210e      	movs	r1, #14
    a84c:	6878      	ldr	r0, [r7, #4]
    a84e:	f7ff fd33 	bl	a2b8 <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    a852:	6839      	ldr	r1, [r7, #0]
    a854:	6878      	ldr	r0, [r7, #4]
    a856:	f7ff fcb1 	bl	a1bc <mp_emit_bc_label_assign>
    emit_bc_pre(emit, 2); // ensure we have enough stack space to call the __exit__ method
    a85a:	2102      	movs	r1, #2
    a85c:	6878      	ldr	r0, [r7, #4]
    a85e:	f7ff fc95 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    a862:	213e      	movs	r1, #62	; 0x3e
    a864:	6878      	ldr	r0, [r7, #4]
    a866:	f7ff f939 	bl	9adc <emit_write_bytecode_byte>
    emit_bc_pre(emit, -4); // cancel the 2 above, plus the 2 from mp_emit_bc_setup_block(MP_EMIT_SETUP_BLOCK_WITH)
    a86a:	f06f 0103 	mvn.w	r1, #3
    a86e:	6878      	ldr	r0, [r7, #4]
    a870:	f7ff fc8c 	bl	a18c <emit_bc_pre>
}
    a874:	bf00      	nop
    a876:	3708      	adds	r7, #8
    a878:	46bd      	mov	sp, r7
    a87a:	bd80      	pop	{r7, pc}

0000a87c <mp_emit_bc_end_finally>:

void mp_emit_bc_end_finally(emit_t *emit) {
    a87c:	b580      	push	{r7, lr}
    a87e:	b082      	sub	sp, #8
    a880:	af00      	add	r7, sp, #0
    a882:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a888:	6878      	ldr	r0, [r7, #4]
    a88a:	f7ff fc7f 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    a88e:	2141      	movs	r1, #65	; 0x41
    a890:	6878      	ldr	r0, [r7, #4]
    a892:	f7ff f923 	bl	9adc <emit_write_bytecode_byte>
}
    a896:	bf00      	nop
    a898:	3708      	adds	r7, #8
    a89a:	46bd      	mov	sp, r7
    a89c:	bd80      	pop	{r7, pc}

0000a89e <mp_emit_bc_get_iter>:

void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    a89e:	b580      	push	{r7, lr}
    a8a0:	b082      	sub	sp, #8
    a8a2:	af00      	add	r7, sp, #0
    a8a4:	6078      	str	r0, [r7, #4]
    a8a6:	460b      	mov	r3, r1
    a8a8:	70fb      	strb	r3, [r7, #3]
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    a8aa:	78fb      	ldrb	r3, [r7, #3]
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d001      	beq.n	a8b4 <mp_emit_bc_get_iter+0x16>
    a8b0:	2303      	movs	r3, #3
    a8b2:	e000      	b.n	a8b6 <mp_emit_bc_get_iter+0x18>
    a8b4:	2300      	movs	r3, #0
    a8b6:	4619      	mov	r1, r3
    a8b8:	6878      	ldr	r0, [r7, #4]
    a8ba:	f7ff fc67 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    a8be:	78fb      	ldrb	r3, [r7, #3]
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	d001      	beq.n	a8c8 <mp_emit_bc_get_iter+0x2a>
    a8c4:	2347      	movs	r3, #71	; 0x47
    a8c6:	e000      	b.n	a8ca <mp_emit_bc_get_iter+0x2c>
    a8c8:	2342      	movs	r3, #66	; 0x42
    a8ca:	4619      	mov	r1, r3
    a8cc:	6878      	ldr	r0, [r7, #4]
    a8ce:	f7ff f905 	bl	9adc <emit_write_bytecode_byte>
}
    a8d2:	bf00      	nop
    a8d4:	3708      	adds	r7, #8
    a8d6:	46bd      	mov	sp, r7
    a8d8:	bd80      	pop	{r7, pc}

0000a8da <mp_emit_bc_for_iter>:

void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    a8da:	b580      	push	{r7, lr}
    a8dc:	b082      	sub	sp, #8
    a8de:	af00      	add	r7, sp, #0
    a8e0:	6078      	str	r0, [r7, #4]
    a8e2:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a8e4:	2101      	movs	r1, #1
    a8e6:	6878      	ldr	r0, [r7, #4]
    a8e8:	f7ff fc50 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    a8ec:	683a      	ldr	r2, [r7, #0]
    a8ee:	2143      	movs	r1, #67	; 0x43
    a8f0:	6878      	ldr	r0, [r7, #4]
    a8f2:	f7ff fa2c 	bl	9d4e <emit_write_bytecode_byte_unsigned_label>
}
    a8f6:	bf00      	nop
    a8f8:	3708      	adds	r7, #8
    a8fa:	46bd      	mov	sp, r7
    a8fc:	bd80      	pop	{r7, pc}

0000a8fe <mp_emit_bc_for_iter_end>:

void mp_emit_bc_for_iter_end(emit_t *emit) {
    a8fe:	b580      	push	{r7, lr}
    a900:	b082      	sub	sp, #8
    a902:	af00      	add	r7, sp, #0
    a904:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -MP_OBJ_ITER_BUF_NSLOTS);
    a906:	f06f 0103 	mvn.w	r1, #3
    a90a:	6878      	ldr	r0, [r7, #4]
    a90c:	f7ff fc3e 	bl	a18c <emit_bc_pre>
}
    a910:	bf00      	nop
    a912:	3708      	adds	r7, #8
    a914:	46bd      	mov	sp, r7
    a916:	bd80      	pop	{r7, pc}

0000a918 <mp_emit_bc_pop_block>:

void mp_emit_bc_pop_block(emit_t *emit) {
    a918:	b580      	push	{r7, lr}
    a91a:	b082      	sub	sp, #8
    a91c:	af00      	add	r7, sp, #0
    a91e:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a920:	2100      	movs	r1, #0
    a922:	6878      	ldr	r0, [r7, #4]
    a924:	f7ff fc32 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    a928:	2144      	movs	r1, #68	; 0x44
    a92a:	6878      	ldr	r0, [r7, #4]
    a92c:	f7ff f8d6 	bl	9adc <emit_write_bytecode_byte>
}
    a930:	bf00      	nop
    a932:	3708      	adds	r7, #8
    a934:	46bd      	mov	sp, r7
    a936:	bd80      	pop	{r7, pc}

0000a938 <mp_emit_bc_pop_except>:

void mp_emit_bc_pop_except(emit_t *emit) {
    a938:	b580      	push	{r7, lr}
    a93a:	b082      	sub	sp, #8
    a93c:	af00      	add	r7, sp, #0
    a93e:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a940:	2100      	movs	r1, #0
    a942:	6878      	ldr	r0, [r7, #4]
    a944:	f7ff fc22 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    a948:	2145      	movs	r1, #69	; 0x45
    a94a:	6878      	ldr	r0, [r7, #4]
    a94c:	f7ff f8c6 	bl	9adc <emit_write_bytecode_byte>
}
    a950:	bf00      	nop
    a952:	3708      	adds	r7, #8
    a954:	46bd      	mov	sp, r7
    a956:	bd80      	pop	{r7, pc}

0000a958 <mp_emit_bc_unary_op>:

void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    a958:	b580      	push	{r7, lr}
    a95a:	b082      	sub	sp, #8
    a95c:	af00      	add	r7, sp, #0
    a95e:	6078      	str	r0, [r7, #4]
    a960:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a962:	2100      	movs	r1, #0
    a964:	6878      	ldr	r0, [r7, #4]
    a966:	f7ff fc11 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    a96a:	683b      	ldr	r3, [r7, #0]
    a96c:	b2db      	uxtb	r3, r3
    a96e:	3b30      	subs	r3, #48	; 0x30
    a970:	b2db      	uxtb	r3, r3
    a972:	4619      	mov	r1, r3
    a974:	6878      	ldr	r0, [r7, #4]
    a976:	f7ff f8b1 	bl	9adc <emit_write_bytecode_byte>
}
    a97a:	bf00      	nop
    a97c:	3708      	adds	r7, #8
    a97e:	46bd      	mov	sp, r7
    a980:	bd80      	pop	{r7, pc}

0000a982 <mp_emit_bc_binary_op>:

void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    a982:	b580      	push	{r7, lr}
    a984:	b084      	sub	sp, #16
    a986:	af00      	add	r7, sp, #0
    a988:	6078      	str	r0, [r7, #4]
    a98a:	6039      	str	r1, [r7, #0]
    bool invert = false;
    a98c:	2300      	movs	r3, #0
    a98e:	73fb      	strb	r3, [r7, #15]
    if (op == MP_BINARY_OP_NOT_IN) {
    a990:	683b      	ldr	r3, [r7, #0]
    a992:	2b24      	cmp	r3, #36	; 0x24
    a994:	d104      	bne.n	a9a0 <mp_emit_bc_binary_op+0x1e>
        invert = true;
    a996:	2301      	movs	r3, #1
    a998:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IN;
    a99a:	2306      	movs	r3, #6
    a99c:	603b      	str	r3, [r7, #0]
    a99e:	e006      	b.n	a9ae <mp_emit_bc_binary_op+0x2c>
    } else if (op == MP_BINARY_OP_IS_NOT) {
    a9a0:	683b      	ldr	r3, [r7, #0]
    a9a2:	2b25      	cmp	r3, #37	; 0x25
    a9a4:	d103      	bne.n	a9ae <mp_emit_bc_binary_op+0x2c>
        invert = true;
    a9a6:	2301      	movs	r3, #1
    a9a8:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IS;
    a9aa:	2307      	movs	r3, #7
    a9ac:	603b      	str	r3, [r7, #0]
    }
    emit_bc_pre(emit, -1);
    a9ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a9b2:	6878      	ldr	r0, [r7, #4]
    a9b4:	f7ff fbea 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    a9b8:	683b      	ldr	r3, [r7, #0]
    a9ba:	b2db      	uxtb	r3, r3
    a9bc:	3b29      	subs	r3, #41	; 0x29
    a9be:	b2db      	uxtb	r3, r3
    a9c0:	4619      	mov	r1, r3
    a9c2:	6878      	ldr	r0, [r7, #4]
    a9c4:	f7ff f88a 	bl	9adc <emit_write_bytecode_byte>
    if (invert) {
    a9c8:	7bfb      	ldrb	r3, [r7, #15]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d007      	beq.n	a9de <mp_emit_bc_binary_op+0x5c>
        emit_bc_pre(emit, 0);
    a9ce:	2100      	movs	r1, #0
    a9d0:	6878      	ldr	r0, [r7, #4]
    a9d2:	f7ff fbdb 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    a9d6:	21d3      	movs	r1, #211	; 0xd3
    a9d8:	6878      	ldr	r0, [r7, #4]
    a9da:	f7ff f87f 	bl	9adc <emit_write_bytecode_byte>
    }
}
    a9de:	bf00      	nop
    a9e0:	3710      	adds	r7, #16
    a9e2:	46bd      	mov	sp, r7
    a9e4:	bd80      	pop	{r7, pc}

0000a9e6 <mp_emit_bc_build>:

void mp_emit_bc_build(emit_t *emit, mp_uint_t n_args, int kind) {
    a9e6:	b580      	push	{r7, lr}
    a9e8:	b084      	sub	sp, #16
    a9ea:	af00      	add	r7, sp, #0
    a9ec:	60f8      	str	r0, [r7, #12]
    a9ee:	60b9      	str	r1, [r7, #8]
    a9f0:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_TUPLE == MP_BC_BUILD_TUPLE);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_LIST == MP_BC_BUILD_LIST);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_MAP == MP_BC_BUILD_MAP);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SET == MP_BC_BUILD_SET);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SLICE == MP_BC_BUILD_SLICE);
    if (kind == MP_EMIT_BUILD_MAP) {
    a9f2:	687b      	ldr	r3, [r7, #4]
    a9f4:	2b03      	cmp	r3, #3
    a9f6:	d104      	bne.n	aa02 <mp_emit_bc_build+0x1c>
        emit_bc_pre(emit, 1);
    a9f8:	2101      	movs	r1, #1
    a9fa:	68f8      	ldr	r0, [r7, #12]
    a9fc:	f7ff fbc6 	bl	a18c <emit_bc_pre>
    aa00:	e006      	b.n	aa10 <mp_emit_bc_build+0x2a>
    } else {
        emit_bc_pre(emit, 1 - n_args);
    aa02:	68bb      	ldr	r3, [r7, #8]
    aa04:	f1c3 0301 	rsb	r3, r3, #1
    aa08:	4619      	mov	r1, r3
    aa0a:	68f8      	ldr	r0, [r7, #12]
    aa0c:	f7ff fbbe 	bl	a18c <emit_bc_pre>
    }
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE + kind, n_args);
    aa10:	687b      	ldr	r3, [r7, #4]
    aa12:	b2db      	uxtb	r3, r3
    aa14:	3350      	adds	r3, #80	; 0x50
    aa16:	b2db      	uxtb	r3, r3
    aa18:	68ba      	ldr	r2, [r7, #8]
    aa1a:	4619      	mov	r1, r3
    aa1c:	68f8      	ldr	r0, [r7, #12]
    aa1e:	f7ff f8f0 	bl	9c02 <emit_write_bytecode_byte_uint>
}
    aa22:	bf00      	nop
    aa24:	3710      	adds	r7, #16
    aa26:	46bd      	mov	sp, r7
    aa28:	bd80      	pop	{r7, pc}

0000aa2a <mp_emit_bc_store_map>:

void mp_emit_bc_store_map(emit_t *emit) {
    aa2a:	b580      	push	{r7, lr}
    aa2c:	b082      	sub	sp, #8
    aa2e:	af00      	add	r7, sp, #0
    aa30:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -2);
    aa32:	f06f 0101 	mvn.w	r1, #1
    aa36:	6878      	ldr	r0, [r7, #4]
    aa38:	f7ff fba8 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    aa3c:	2154      	movs	r1, #84	; 0x54
    aa3e:	6878      	ldr	r0, [r7, #4]
    aa40:	f7ff f84c 	bl	9adc <emit_write_bytecode_byte>
}
    aa44:	bf00      	nop
    aa46:	3708      	adds	r7, #8
    aa48:	46bd      	mov	sp, r7
    aa4a:	bd80      	pop	{r7, pc}

0000aa4c <mp_emit_bc_store_comp>:

void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    aa4c:	b580      	push	{r7, lr}
    aa4e:	b086      	sub	sp, #24
    aa50:	af00      	add	r7, sp, #0
    aa52:	60f8      	str	r0, [r7, #12]
    aa54:	60b9      	str	r1, [r7, #8]
    aa56:	607a      	str	r2, [r7, #4]
    int t;
    int n;
    if (kind == SCOPE_LIST_COMP) {
    aa58:	68bb      	ldr	r3, [r7, #8]
    aa5a:	2b03      	cmp	r3, #3
    aa5c:	d104      	bne.n	aa68 <mp_emit_bc_store_comp+0x1c>
        n = 0;
    aa5e:	2300      	movs	r3, #0
    aa60:	613b      	str	r3, [r7, #16]
        t = 0;
    aa62:	2300      	movs	r3, #0
    aa64:	617b      	str	r3, [r7, #20]
    aa66:	e003      	b.n	aa70 <mp_emit_bc_store_comp+0x24>
    } else if (!MICROPY_PY_BUILTINS_SET || kind == SCOPE_DICT_COMP) {
        n = 1;
    aa68:	2301      	movs	r3, #1
    aa6a:	613b      	str	r3, [r7, #16]
        t = 1;
    aa6c:	2301      	movs	r3, #1
    aa6e:	617b      	str	r3, [r7, #20]
    } else if (MICROPY_PY_BUILTINS_SET) {
        n = 0;
        t = 2;
    }
    emit_bc_pre(emit, -1 - n);
    aa70:	693b      	ldr	r3, [r7, #16]
    aa72:	43db      	mvns	r3, r3
    aa74:	4619      	mov	r1, r3
    aa76:	68f8      	ldr	r0, [r7, #12]
    aa78:	f7ff fb88 	bl	a18c <emit_bc_pre>
    // the lower 2 bits of the opcode argument indicate the collection type
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    aa7c:	693a      	ldr	r2, [r7, #16]
    aa7e:	687b      	ldr	r3, [r7, #4]
    aa80:	4413      	add	r3, r2
    aa82:	009a      	lsls	r2, r3, #2
    aa84:	697b      	ldr	r3, [r7, #20]
    aa86:	4313      	orrs	r3, r2
    aa88:	461a      	mov	r2, r3
    aa8a:	2157      	movs	r1, #87	; 0x57
    aa8c:	68f8      	ldr	r0, [r7, #12]
    aa8e:	f7ff f8b8 	bl	9c02 <emit_write_bytecode_byte_uint>
}
    aa92:	bf00      	nop
    aa94:	3718      	adds	r7, #24
    aa96:	46bd      	mov	sp, r7
    aa98:	bd80      	pop	{r7, pc}

0000aa9a <mp_emit_bc_unpack_sequence>:

void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    aa9a:	b580      	push	{r7, lr}
    aa9c:	b082      	sub	sp, #8
    aa9e:	af00      	add	r7, sp, #0
    aaa0:	6078      	str	r0, [r7, #4]
    aaa2:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1 + n_args);
    aaa4:	683b      	ldr	r3, [r7, #0]
    aaa6:	3b01      	subs	r3, #1
    aaa8:	4619      	mov	r1, r3
    aaaa:	6878      	ldr	r0, [r7, #4]
    aaac:	f7ff fb6e 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    aab0:	683a      	ldr	r2, [r7, #0]
    aab2:	2159      	movs	r1, #89	; 0x59
    aab4:	6878      	ldr	r0, [r7, #4]
    aab6:	f7ff f8a4 	bl	9c02 <emit_write_bytecode_byte_uint>
}
    aaba:	bf00      	nop
    aabc:	3708      	adds	r7, #8
    aabe:	46bd      	mov	sp, r7
    aac0:	bd80      	pop	{r7, pc}

0000aac2 <mp_emit_bc_unpack_ex>:

void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    aac2:	b580      	push	{r7, lr}
    aac4:	b084      	sub	sp, #16
    aac6:	af00      	add	r7, sp, #0
    aac8:	60f8      	str	r0, [r7, #12]
    aaca:	60b9      	str	r1, [r7, #8]
    aacc:	607a      	str	r2, [r7, #4]
    emit_bc_pre(emit, -1 + n_left + n_right + 1);
    aace:	68ba      	ldr	r2, [r7, #8]
    aad0:	687b      	ldr	r3, [r7, #4]
    aad2:	4413      	add	r3, r2
    aad4:	4619      	mov	r1, r3
    aad6:	68f8      	ldr	r0, [r7, #12]
    aad8:	f7ff fb58 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    aadc:	687b      	ldr	r3, [r7, #4]
    aade:	021a      	lsls	r2, r3, #8
    aae0:	68bb      	ldr	r3, [r7, #8]
    aae2:	4313      	orrs	r3, r2
    aae4:	461a      	mov	r2, r3
    aae6:	215a      	movs	r1, #90	; 0x5a
    aae8:	68f8      	ldr	r0, [r7, #12]
    aaea:	f7ff f88a 	bl	9c02 <emit_write_bytecode_byte_uint>
}
    aaee:	bf00      	nop
    aaf0:	3710      	adds	r7, #16
    aaf2:	46bd      	mov	sp, r7
    aaf4:	bd80      	pop	{r7, pc}

0000aaf6 <mp_emit_bc_make_function>:

void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    aaf6:	b580      	push	{r7, lr}
    aaf8:	b084      	sub	sp, #16
    aafa:	af00      	add	r7, sp, #0
    aafc:	60f8      	str	r0, [r7, #12]
    aafe:	60b9      	str	r1, [r7, #8]
    ab00:	607a      	str	r2, [r7, #4]
    ab02:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	2b00      	cmp	r3, #0
    ab08:	d10e      	bne.n	ab28 <mp_emit_bc_make_function+0x32>
    ab0a:	683b      	ldr	r3, [r7, #0]
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d10b      	bne.n	ab28 <mp_emit_bc_make_function+0x32>
        emit_bc_pre(emit, 1);
    ab10:	2101      	movs	r1, #1
    ab12:	68f8      	ldr	r0, [r7, #12]
    ab14:	f7ff fb3a 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    ab18:	68bb      	ldr	r3, [r7, #8]
    ab1a:	695b      	ldr	r3, [r3, #20]
    ab1c:	461a      	mov	r2, r3
    ab1e:	2160      	movs	r1, #96	; 0x60
    ab20:	68f8      	ldr	r0, [r7, #12]
    ab22:	f7ff f8f1 	bl	9d08 <emit_write_bytecode_byte_raw_code>
    ab26:	e00b      	b.n	ab40 <mp_emit_bc_make_function+0x4a>
    } else {
        emit_bc_pre(emit, -1);
    ab28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ab2c:	68f8      	ldr	r0, [r7, #12]
    ab2e:	f7ff fb2d 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    ab32:	68bb      	ldr	r3, [r7, #8]
    ab34:	695b      	ldr	r3, [r3, #20]
    ab36:	461a      	mov	r2, r3
    ab38:	2161      	movs	r1, #97	; 0x61
    ab3a:	68f8      	ldr	r0, [r7, #12]
    ab3c:	f7ff f8e4 	bl	9d08 <emit_write_bytecode_byte_raw_code>
    }
}
    ab40:	bf00      	nop
    ab42:	3710      	adds	r7, #16
    ab44:	46bd      	mov	sp, r7
    ab46:	bd80      	pop	{r7, pc}

0000ab48 <mp_emit_bc_make_closure>:

void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ab48:	b580      	push	{r7, lr}
    ab4a:	b084      	sub	sp, #16
    ab4c:	af00      	add	r7, sp, #0
    ab4e:	60f8      	str	r0, [r7, #12]
    ab50:	60b9      	str	r1, [r7, #8]
    ab52:	607a      	str	r2, [r7, #4]
    ab54:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ab56:	683b      	ldr	r3, [r7, #0]
    ab58:	2b00      	cmp	r3, #0
    ab5a:	d117      	bne.n	ab8c <mp_emit_bc_make_closure+0x44>
    ab5c:	69bb      	ldr	r3, [r7, #24]
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d114      	bne.n	ab8c <mp_emit_bc_make_closure+0x44>
        emit_bc_pre(emit, -n_closed_over + 1);
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	f1c3 0301 	rsb	r3, r3, #1
    ab68:	4619      	mov	r1, r3
    ab6a:	68f8      	ldr	r0, [r7, #12]
    ab6c:	f7ff fb0e 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    ab70:	68bb      	ldr	r3, [r7, #8]
    ab72:	695b      	ldr	r3, [r3, #20]
    ab74:	461a      	mov	r2, r3
    ab76:	2162      	movs	r1, #98	; 0x62
    ab78:	68f8      	ldr	r0, [r7, #12]
    ab7a:	f7ff f8c5 	bl	9d08 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ab7e:	687b      	ldr	r3, [r7, #4]
    ab80:	b2db      	uxtb	r3, r3
    ab82:	4619      	mov	r1, r3
    ab84:	68f8      	ldr	r0, [r7, #12]
    ab86:	f7fe ffa9 	bl	9adc <emit_write_bytecode_byte>
    ab8a:	e01c      	b.n	abc6 <mp_emit_bc_make_closure+0x7e>
    } else {
        assert(n_closed_over <= 255);
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	2bff      	cmp	r3, #255	; 0xff
    ab90:	d906      	bls.n	aba0 <mp_emit_bc_make_closure+0x58>
    ab92:	4b0f      	ldr	r3, [pc, #60]	; (abd0 <mp_emit_bc_make_closure+0x88>)
    ab94:	4a0f      	ldr	r2, [pc, #60]	; (abd4 <mp_emit_bc_make_closure+0x8c>)
    ab96:	f240 315b 	movw	r1, #859	; 0x35b
    ab9a:	480f      	ldr	r0, [pc, #60]	; (abd8 <mp_emit_bc_make_closure+0x90>)
    ab9c:	f010 fb22 	bl	1b1e4 <__assert_func>
        emit_bc_pre(emit, -2 - (mp_int_t)n_closed_over + 1);
    aba0:	687b      	ldr	r3, [r7, #4]
    aba2:	43db      	mvns	r3, r3
    aba4:	4619      	mov	r1, r3
    aba6:	68f8      	ldr	r0, [r7, #12]
    aba8:	f7ff faf0 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    abac:	68bb      	ldr	r3, [r7, #8]
    abae:	695b      	ldr	r3, [r3, #20]
    abb0:	461a      	mov	r2, r3
    abb2:	2163      	movs	r1, #99	; 0x63
    abb4:	68f8      	ldr	r0, [r7, #12]
    abb6:	f7ff f8a7 	bl	9d08 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    abba:	687b      	ldr	r3, [r7, #4]
    abbc:	b2db      	uxtb	r3, r3
    abbe:	4619      	mov	r1, r3
    abc0:	68f8      	ldr	r0, [r7, #12]
    abc2:	f7fe ff8b 	bl	9adc <emit_write_bytecode_byte>
    }
}
    abc6:	bf00      	nop
    abc8:	3710      	adds	r7, #16
    abca:	46bd      	mov	sp, r7
    abcc:	bd80      	pop	{r7, pc}
    abce:	bf00      	nop
    abd0:	00020a4c 	.word	0x00020a4c
    abd4:	00020b84 	.word	0x00020b84
    abd8:	000208b0 	.word	0x000208b0

0000abdc <emit_bc_call_function_method_helper>:

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    abdc:	b580      	push	{r7, lr}
    abde:	b084      	sub	sp, #16
    abe0:	af00      	add	r7, sp, #0
    abe2:	60f8      	str	r0, [r7, #12]
    abe4:	60b9      	str	r1, [r7, #8]
    abe6:	607a      	str	r2, [r7, #4]
    abe8:	603b      	str	r3, [r7, #0]
    if (star_flags) {
    abea:	69fb      	ldr	r3, [r7, #28]
    abec:	2b00      	cmp	r3, #0
    abee:	d017      	beq.n	ac20 <emit_bc_call_function_method_helper+0x44>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    abf0:	683b      	ldr	r3, [r7, #0]
    abf2:	68ba      	ldr	r2, [r7, #8]
    abf4:	1ad2      	subs	r2, r2, r3
    abf6:	69bb      	ldr	r3, [r7, #24]
    abf8:	005b      	lsls	r3, r3, #1
    abfa:	1ad3      	subs	r3, r2, r3
    abfc:	3b02      	subs	r3, #2
    abfe:	4619      	mov	r1, r3
    ac00:	68f8      	ldr	r0, [r7, #12]
    ac02:	f7ff fac3 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    ac06:	687b      	ldr	r3, [r7, #4]
    ac08:	b2db      	uxtb	r3, r3
    ac0a:	3301      	adds	r3, #1
    ac0c:	b2d9      	uxtb	r1, r3
    ac0e:	69bb      	ldr	r3, [r7, #24]
    ac10:	021a      	lsls	r2, r3, #8
    ac12:	683b      	ldr	r3, [r7, #0]
    ac14:	4313      	orrs	r3, r2
    ac16:	461a      	mov	r2, r3
    ac18:	68f8      	ldr	r0, [r7, #12]
    ac1a:	f7fe fff2 	bl	9c02 <emit_write_bytecode_byte_uint>
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    }
}
    ac1e:	e013      	b.n	ac48 <emit_bc_call_function_method_helper+0x6c>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    ac20:	683b      	ldr	r3, [r7, #0]
    ac22:	68ba      	ldr	r2, [r7, #8]
    ac24:	1ad2      	subs	r2, r2, r3
    ac26:	69bb      	ldr	r3, [r7, #24]
    ac28:	005b      	lsls	r3, r3, #1
    ac2a:	1ad3      	subs	r3, r2, r3
    ac2c:	4619      	mov	r1, r3
    ac2e:	68f8      	ldr	r0, [r7, #12]
    ac30:	f7ff faac 	bl	a18c <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    ac34:	687b      	ldr	r3, [r7, #4]
    ac36:	b2d9      	uxtb	r1, r3
    ac38:	69bb      	ldr	r3, [r7, #24]
    ac3a:	021a      	lsls	r2, r3, #8
    ac3c:	683b      	ldr	r3, [r7, #0]
    ac3e:	4313      	orrs	r3, r2
    ac40:	461a      	mov	r2, r3
    ac42:	68f8      	ldr	r0, [r7, #12]
    ac44:	f7fe ffdd 	bl	9c02 <emit_write_bytecode_byte_uint>
}
    ac48:	bf00      	nop
    ac4a:	3710      	adds	r7, #16
    ac4c:	46bd      	mov	sp, r7
    ac4e:	bd80      	pop	{r7, pc}

0000ac50 <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ac50:	b580      	push	{r7, lr}
    ac52:	b086      	sub	sp, #24
    ac54:	af02      	add	r7, sp, #8
    ac56:	60f8      	str	r0, [r7, #12]
    ac58:	60b9      	str	r1, [r7, #8]
    ac5a:	607a      	str	r2, [r7, #4]
    ac5c:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    ac5e:	683b      	ldr	r3, [r7, #0]
    ac60:	9301      	str	r3, [sp, #4]
    ac62:	687b      	ldr	r3, [r7, #4]
    ac64:	9300      	str	r3, [sp, #0]
    ac66:	68bb      	ldr	r3, [r7, #8]
    ac68:	2264      	movs	r2, #100	; 0x64
    ac6a:	2100      	movs	r1, #0
    ac6c:	68f8      	ldr	r0, [r7, #12]
    ac6e:	f7ff ffb5 	bl	abdc <emit_bc_call_function_method_helper>
}
    ac72:	bf00      	nop
    ac74:	3710      	adds	r7, #16
    ac76:	46bd      	mov	sp, r7
    ac78:	bd80      	pop	{r7, pc}

0000ac7a <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ac7a:	b580      	push	{r7, lr}
    ac7c:	b086      	sub	sp, #24
    ac7e:	af02      	add	r7, sp, #8
    ac80:	60f8      	str	r0, [r7, #12]
    ac82:	60b9      	str	r1, [r7, #8]
    ac84:	607a      	str	r2, [r7, #4]
    ac86:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    ac88:	683b      	ldr	r3, [r7, #0]
    ac8a:	9301      	str	r3, [sp, #4]
    ac8c:	687b      	ldr	r3, [r7, #4]
    ac8e:	9300      	str	r3, [sp, #0]
    ac90:	68bb      	ldr	r3, [r7, #8]
    ac92:	2266      	movs	r2, #102	; 0x66
    ac94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac98:	68f8      	ldr	r0, [r7, #12]
    ac9a:	f7ff ff9f 	bl	abdc <emit_bc_call_function_method_helper>
}
    ac9e:	bf00      	nop
    aca0:	3710      	adds	r7, #16
    aca2:	46bd      	mov	sp, r7
    aca4:	bd80      	pop	{r7, pc}

0000aca6 <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    aca6:	b580      	push	{r7, lr}
    aca8:	b082      	sub	sp, #8
    acaa:	af00      	add	r7, sp, #0
    acac:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    acae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    acb2:	6878      	ldr	r0, [r7, #4]
    acb4:	f7ff fa6a 	bl	a18c <emit_bc_pre>
    emit->last_emit_was_return_value = true;
    acb8:	687b      	ldr	r3, [r7, #4]
    acba:	2201      	movs	r2, #1
    acbc:	719a      	strb	r2, [r3, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    acbe:	215b      	movs	r1, #91	; 0x5b
    acc0:	6878      	ldr	r0, [r7, #4]
    acc2:	f7fe ff0b 	bl	9adc <emit_write_bytecode_byte>
}
    acc6:	bf00      	nop
    acc8:	3708      	adds	r7, #8
    acca:	46bd      	mov	sp, r7
    accc:	bd80      	pop	{r7, pc}

0000acce <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    acce:	b580      	push	{r7, lr}
    acd0:	b082      	sub	sp, #8
    acd2:	af00      	add	r7, sp, #0
    acd4:	6078      	str	r0, [r7, #4]
    acd6:	6039      	str	r1, [r7, #0]
    assert(n_args <= 2);
    acd8:	683b      	ldr	r3, [r7, #0]
    acda:	2b02      	cmp	r3, #2
    acdc:	d906      	bls.n	acec <mp_emit_bc_raise_varargs+0x1e>
    acde:	4b0c      	ldr	r3, [pc, #48]	; (ad10 <mp_emit_bc_raise_varargs+0x42>)
    ace0:	4a0c      	ldr	r2, [pc, #48]	; (ad14 <mp_emit_bc_raise_varargs+0x46>)
    ace2:	f240 317b 	movw	r1, #891	; 0x37b
    ace6:	480c      	ldr	r0, [pc, #48]	; (ad18 <mp_emit_bc_raise_varargs+0x4a>)
    ace8:	f010 fa7c 	bl	1b1e4 <__assert_func>
    emit_bc_pre(emit, -n_args);
    acec:	683b      	ldr	r3, [r7, #0]
    acee:	425b      	negs	r3, r3
    acf0:	4619      	mov	r1, r3
    acf2:	6878      	ldr	r0, [r7, #4]
    acf4:	f7ff fa4a 	bl	a18c <emit_bc_pre>
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    acf8:	683b      	ldr	r3, [r7, #0]
    acfa:	b2db      	uxtb	r3, r3
    acfc:	461a      	mov	r2, r3
    acfe:	215c      	movs	r1, #92	; 0x5c
    ad00:	6878      	ldr	r0, [r7, #4]
    ad02:	f7fe fefd 	bl	9b00 <emit_write_bytecode_byte_byte>
}
    ad06:	bf00      	nop
    ad08:	3708      	adds	r7, #8
    ad0a:	46bd      	mov	sp, r7
    ad0c:	bd80      	pop	{r7, pc}
    ad0e:	bf00      	nop
    ad10:	00020a64 	.word	0x00020a64
    ad14:	00020b9c 	.word	0x00020b9c
    ad18:	000208b0 	.word	0x000208b0

0000ad1c <mp_emit_bc_yield>:

void mp_emit_bc_yield(emit_t *emit, int kind) {
    ad1c:	b580      	push	{r7, lr}
    ad1e:	b082      	sub	sp, #8
    ad20:	af00      	add	r7, sp, #0
    ad22:	6078      	str	r0, [r7, #4]
    ad24:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_YIELD_VALUE + 1 == MP_BC_YIELD_FROM);
    emit_bc_pre(emit, -kind);
    ad26:	683b      	ldr	r3, [r7, #0]
    ad28:	425b      	negs	r3, r3
    ad2a:	4619      	mov	r1, r3
    ad2c:	6878      	ldr	r0, [r7, #4]
    ad2e:	f7ff fa2d 	bl	a18c <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    ad32:	687b      	ldr	r3, [r7, #4]
    ad34:	68db      	ldr	r3, [r3, #12]
    ad36:	687a      	ldr	r2, [r7, #4]
    ad38:	68d2      	ldr	r2, [r2, #12]
    ad3a:	7e12      	ldrb	r2, [r2, #24]
    ad3c:	f042 0204 	orr.w	r2, r2, #4
    ad40:	b2d2      	uxtb	r2, r2
    ad42:	761a      	strb	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE + kind);
    ad44:	683b      	ldr	r3, [r7, #0]
    ad46:	b2db      	uxtb	r3, r3
    ad48:	335d      	adds	r3, #93	; 0x5d
    ad4a:	b2db      	uxtb	r3, r3
    ad4c:	4619      	mov	r1, r3
    ad4e:	6878      	ldr	r0, [r7, #4]
    ad50:	f7fe fec4 	bl	9adc <emit_write_bytecode_byte>
}
    ad54:	bf00      	nop
    ad56:	3708      	adds	r7, #8
    ad58:	46bd      	mov	sp, r7
    ad5a:	bd80      	pop	{r7, pc}

0000ad5c <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    ad5c:	b580      	push	{r7, lr}
    ad5e:	b082      	sub	sp, #8
    ad60:	af00      	add	r7, sp, #0
    ad62:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    ad64:	2104      	movs	r1, #4
    ad66:	6878      	ldr	r0, [r7, #4]
    ad68:	f7ff f9d9 	bl	a11e <mp_emit_bc_adjust_stack_size>
}
    ad6c:	bf00      	nop
    ad6e:	3708      	adds	r7, #8
    ad70:	46bd      	mov	sp, r7
    ad72:	bd80      	pop	{r7, pc}

0000ad74 <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    ad74:	b580      	push	{r7, lr}
    ad76:	b082      	sub	sp, #8
    ad78:	af00      	add	r7, sp, #0
    ad7a:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    ad7c:	f06f 0102 	mvn.w	r1, #2
    ad80:	6878      	ldr	r0, [r7, #4]
    ad82:	f7ff f9cc 	bl	a11e <mp_emit_bc_adjust_stack_size>
}
    ad86:	bf00      	nop
    ad88:	3708      	adds	r7, #8
    ad8a:	46bd      	mov	sp, r7
    ad8c:	bd80      	pop	{r7, pc}
    ad8e:	bf00      	nop

0000ad90 <mp_parse_num_base>:
#include "py/misc.h"
#include "py/parsenumbase.h"

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    ad90:	b480      	push	{r7}
    ad92:	b087      	sub	sp, #28
    ad94:	af00      	add	r7, sp, #0
    ad96:	60f8      	str	r0, [r7, #12]
    ad98:	60b9      	str	r1, [r7, #8]
    ad9a:	607a      	str	r2, [r7, #4]
    const byte *p = (const byte*)str;
    ad9c:	68fb      	ldr	r3, [r7, #12]
    ad9e:	617b      	str	r3, [r7, #20]
    if (len <= 1) {
    ada0:	68bb      	ldr	r3, [r7, #8]
    ada2:	2b01      	cmp	r3, #1
    ada4:	d971      	bls.n	ae8a <mp_parse_num_base+0xfa>
        goto no_prefix;
    }
    unichar c = *(p++);
    ada6:	697b      	ldr	r3, [r7, #20]
    ada8:	1c5a      	adds	r2, r3, #1
    adaa:	617a      	str	r2, [r7, #20]
    adac:	781b      	ldrb	r3, [r3, #0]
    adae:	613b      	str	r3, [r7, #16]
    if ((*base == 0 || *base == 16) && c == '0') {
    adb0:	687b      	ldr	r3, [r7, #4]
    adb2:	681b      	ldr	r3, [r3, #0]
    adb4:	2b00      	cmp	r3, #0
    adb6:	d003      	beq.n	adc0 <mp_parse_num_base+0x30>
    adb8:	687b      	ldr	r3, [r7, #4]
    adba:	681b      	ldr	r3, [r3, #0]
    adbc:	2b10      	cmp	r3, #16
    adbe:	d136      	bne.n	ae2e <mp_parse_num_base+0x9e>
    adc0:	693b      	ldr	r3, [r7, #16]
    adc2:	2b30      	cmp	r3, #48	; 0x30
    adc4:	d133      	bne.n	ae2e <mp_parse_num_base+0x9e>
        c = *(p++);
    adc6:	697b      	ldr	r3, [r7, #20]
    adc8:	1c5a      	adds	r2, r3, #1
    adca:	617a      	str	r2, [r7, #20]
    adcc:	781b      	ldrb	r3, [r3, #0]
    adce:	613b      	str	r3, [r7, #16]
        if ((c | 32) == 'x') {
    add0:	693b      	ldr	r3, [r7, #16]
    add2:	f043 0320 	orr.w	r3, r3, #32
    add6:	2b78      	cmp	r3, #120	; 0x78
    add8:	d103      	bne.n	ade2 <mp_parse_num_base+0x52>
            *base = 16;
    adda:	687b      	ldr	r3, [r7, #4]
    addc:	2210      	movs	r2, #16
    adde:	601a      	str	r2, [r3, #0]
        if ((c | 32) == 'x') {
    ade0:	e05b      	b.n	ae9a <mp_parse_num_base+0x10a>
        } else if (*base == 0 && (c | 32) == 'o') {
    ade2:	687b      	ldr	r3, [r7, #4]
    ade4:	681b      	ldr	r3, [r3, #0]
    ade6:	2b00      	cmp	r3, #0
    ade8:	d108      	bne.n	adfc <mp_parse_num_base+0x6c>
    adea:	693b      	ldr	r3, [r7, #16]
    adec:	f043 0320 	orr.w	r3, r3, #32
    adf0:	2b6f      	cmp	r3, #111	; 0x6f
    adf2:	d103      	bne.n	adfc <mp_parse_num_base+0x6c>
            *base = 8;
    adf4:	687b      	ldr	r3, [r7, #4]
    adf6:	2208      	movs	r2, #8
    adf8:	601a      	str	r2, [r3, #0]
    adfa:	e017      	b.n	ae2c <mp_parse_num_base+0x9c>
        } else if (*base == 0 && (c | 32) == 'b') {
    adfc:	687b      	ldr	r3, [r7, #4]
    adfe:	681b      	ldr	r3, [r3, #0]
    ae00:	2b00      	cmp	r3, #0
    ae02:	d108      	bne.n	ae16 <mp_parse_num_base+0x86>
    ae04:	693b      	ldr	r3, [r7, #16]
    ae06:	f043 0320 	orr.w	r3, r3, #32
    ae0a:	2b62      	cmp	r3, #98	; 0x62
    ae0c:	d103      	bne.n	ae16 <mp_parse_num_base+0x86>
            *base = 2;
    ae0e:	687b      	ldr	r3, [r7, #4]
    ae10:	2202      	movs	r2, #2
    ae12:	601a      	str	r2, [r3, #0]
    ae14:	e00a      	b.n	ae2c <mp_parse_num_base+0x9c>
        } else {
            if (*base == 0) {
    ae16:	687b      	ldr	r3, [r7, #4]
    ae18:	681b      	ldr	r3, [r3, #0]
    ae1a:	2b00      	cmp	r3, #0
    ae1c:	d102      	bne.n	ae24 <mp_parse_num_base+0x94>
                *base = 10;
    ae1e:	687b      	ldr	r3, [r7, #4]
    ae20:	220a      	movs	r2, #10
    ae22:	601a      	str	r2, [r3, #0]
            }
            p -= 2;
    ae24:	697b      	ldr	r3, [r7, #20]
    ae26:	3b02      	subs	r3, #2
    ae28:	617b      	str	r3, [r7, #20]
        if ((c | 32) == 'x') {
    ae2a:	e036      	b.n	ae9a <mp_parse_num_base+0x10a>
    ae2c:	e035      	b.n	ae9a <mp_parse_num_base+0x10a>
        }
    } else if (*base == 8 && c == '0') {
    ae2e:	687b      	ldr	r3, [r7, #4]
    ae30:	681b      	ldr	r3, [r3, #0]
    ae32:	2b08      	cmp	r3, #8
    ae34:	d110      	bne.n	ae58 <mp_parse_num_base+0xc8>
    ae36:	693b      	ldr	r3, [r7, #16]
    ae38:	2b30      	cmp	r3, #48	; 0x30
    ae3a:	d10d      	bne.n	ae58 <mp_parse_num_base+0xc8>
        c = *(p++);
    ae3c:	697b      	ldr	r3, [r7, #20]
    ae3e:	1c5a      	adds	r2, r3, #1
    ae40:	617a      	str	r2, [r7, #20]
    ae42:	781b      	ldrb	r3, [r3, #0]
    ae44:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'o') {
    ae46:	693b      	ldr	r3, [r7, #16]
    ae48:	f043 0320 	orr.w	r3, r3, #32
    ae4c:	2b6f      	cmp	r3, #111	; 0x6f
    ae4e:	d024      	beq.n	ae9a <mp_parse_num_base+0x10a>
            p -= 2;
    ae50:	697b      	ldr	r3, [r7, #20]
    ae52:	3b02      	subs	r3, #2
    ae54:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'o') {
    ae56:	e020      	b.n	ae9a <mp_parse_num_base+0x10a>
        }
    } else if (*base == 2 && c == '0') {
    ae58:	687b      	ldr	r3, [r7, #4]
    ae5a:	681b      	ldr	r3, [r3, #0]
    ae5c:	2b02      	cmp	r3, #2
    ae5e:	d110      	bne.n	ae82 <mp_parse_num_base+0xf2>
    ae60:	693b      	ldr	r3, [r7, #16]
    ae62:	2b30      	cmp	r3, #48	; 0x30
    ae64:	d10d      	bne.n	ae82 <mp_parse_num_base+0xf2>
        c = *(p++);
    ae66:	697b      	ldr	r3, [r7, #20]
    ae68:	1c5a      	adds	r2, r3, #1
    ae6a:	617a      	str	r2, [r7, #20]
    ae6c:	781b      	ldrb	r3, [r3, #0]
    ae6e:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'b') {
    ae70:	693b      	ldr	r3, [r7, #16]
    ae72:	f043 0320 	orr.w	r3, r3, #32
    ae76:	2b62      	cmp	r3, #98	; 0x62
    ae78:	d00f      	beq.n	ae9a <mp_parse_num_base+0x10a>
            p -= 2;
    ae7a:	697b      	ldr	r3, [r7, #20]
    ae7c:	3b02      	subs	r3, #2
    ae7e:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'b') {
    ae80:	e00b      	b.n	ae9a <mp_parse_num_base+0x10a>
        }
    } else {
        p--;
    ae82:	697b      	ldr	r3, [r7, #20]
    ae84:	3b01      	subs	r3, #1
    ae86:	617b      	str	r3, [r7, #20]
    ae88:	e000      	b.n	ae8c <mp_parse_num_base+0xfc>
        goto no_prefix;
    ae8a:	bf00      	nop
    no_prefix:
        if (*base == 0) {
    ae8c:	687b      	ldr	r3, [r7, #4]
    ae8e:	681b      	ldr	r3, [r3, #0]
    ae90:	2b00      	cmp	r3, #0
    ae92:	d102      	bne.n	ae9a <mp_parse_num_base+0x10a>
            *base = 10;
    ae94:	687b      	ldr	r3, [r7, #4]
    ae96:	220a      	movs	r2, #10
    ae98:	601a      	str	r2, [r3, #0]
        }
    }
    return p - (const byte*)str;
    ae9a:	697a      	ldr	r2, [r7, #20]
    ae9c:	68fb      	ldr	r3, [r7, #12]
    ae9e:	1ad3      	subs	r3, r2, r3
}
    aea0:	4618      	mov	r0, r3
    aea2:	371c      	adds	r7, #28
    aea4:	46bd      	mov	sp, r7
    aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeaa:	4770      	bx	lr

0000aeac <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    aeac:	b580      	push	{r7, lr}
    aeae:	b082      	sub	sp, #8
    aeb0:	af00      	add	r7, sp, #0
    aeb2:	6078      	str	r0, [r7, #4]
    aeb4:	6039      	str	r1, [r7, #0]
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    aeb6:	683b      	ldr	r3, [r7, #0]
    aeb8:	2b00      	cmp	r3, #0
    aeba:	d00a      	beq.n	aed2 <raise_exc+0x26>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	4a06      	ldr	r2, [pc, #24]	; (aed8 <raise_exc+0x2c>)
    aec0:	601a      	str	r2, [r3, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    aec2:	683b      	ldr	r3, [r7, #0]
    aec4:	6819      	ldr	r1, [r3, #0]
    aec6:	683b      	ldr	r3, [r7, #0]
    aec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    aeca:	2300      	movs	r3, #0
    aecc:	6878      	ldr	r0, [r7, #4]
    aece:	f004 fbb3 	bl	f638 <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    aed2:	6878      	ldr	r0, [r7, #4]
    aed4:	f7f5 fa04 	bl	2e0 <nlr_jump>
    aed8:	00021da4 	.word	0x00021da4

0000aedc <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    aedc:	b580      	push	{r7, lr}
    aede:	b094      	sub	sp, #80	; 0x50
    aee0:	af00      	add	r7, sp, #0
    aee2:	60f8      	str	r0, [r7, #12]
    aee4:	60b9      	str	r1, [r7, #8]
    aee6:	607a      	str	r2, [r7, #4]
    aee8:	603b      	str	r3, [r7, #0]
    const byte *restrict str = (const byte *)str_;
    aeea:	68fb      	ldr	r3, [r7, #12]
    aeec:	64fb      	str	r3, [r7, #76]	; 0x4c
    const byte *restrict top = str + len;
    aeee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    aef0:	68bb      	ldr	r3, [r7, #8]
    aef2:	4413      	add	r3, r2
    aef4:	63bb      	str	r3, [r7, #56]	; 0x38
    bool neg = false;
    aef6:	2300      	movs	r3, #0
    aef8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	2b00      	cmp	r3, #0
    af00:	d002      	beq.n	af08 <mp_parse_num_integer+0x2c>
    af02:	687b      	ldr	r3, [r7, #4]
    af04:	2b01      	cmp	r3, #1
    af06:	dd02      	ble.n	af0e <mp_parse_num_integer+0x32>
    af08:	687b      	ldr	r3, [r7, #4]
    af0a:	2b24      	cmp	r3, #36	; 0x24
    af0c:	dd05      	ble.n	af1a <mp_parse_num_integer+0x3e>
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    af0e:	4864      	ldr	r0, [pc, #400]	; (b0a0 <mp_parse_num_integer+0x1c4>)
    af10:	f001 ffc9 	bl	cea6 <mp_raise_ValueError>
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    af14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af16:	3301      	adds	r3, #1
    af18:	64fb      	str	r3, [r7, #76]	; 0x4c
    af1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    af1e:	429a      	cmp	r2, r3
    af20:	d207      	bcs.n	af32 <mp_parse_num_integer+0x56>
    af22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af24:	781b      	ldrb	r3, [r3, #0]
    af26:	4618      	mov	r0, r3
    af28:	f7f7 fa20 	bl	236c <unichar_isspace>
    af2c:	4603      	mov	r3, r0
    af2e:	2b00      	cmp	r3, #0
    af30:	d1f0      	bne.n	af14 <mp_parse_num_integer+0x38>
    }

    // parse optional sign
    if (str < top) {
    af32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    af36:	429a      	cmp	r2, r3
    af38:	d211      	bcs.n	af5e <mp_parse_num_integer+0x82>
        if (*str == '+') {
    af3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af3c:	781b      	ldrb	r3, [r3, #0]
    af3e:	2b2b      	cmp	r3, #43	; 0x2b
    af40:	d103      	bne.n	af4a <mp_parse_num_integer+0x6e>
            str++;
    af42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af44:	3301      	adds	r3, #1
    af46:	64fb      	str	r3, [r7, #76]	; 0x4c
    af48:	e009      	b.n	af5e <mp_parse_num_integer+0x82>
        } else if (*str == '-') {
    af4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af4c:	781b      	ldrb	r3, [r3, #0]
    af4e:	2b2d      	cmp	r3, #45	; 0x2d
    af50:	d105      	bne.n	af5e <mp_parse_num_integer+0x82>
            str++;
    af52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af54:	3301      	adds	r3, #1
    af56:	64fb      	str	r3, [r7, #76]	; 0x4c
            neg = true;
    af58:	2301      	movs	r3, #1
    af5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    af5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    af60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af62:	1ad3      	subs	r3, r2, r3
    af64:	4619      	mov	r1, r3
    af66:	1d3b      	adds	r3, r7, #4
    af68:	461a      	mov	r2, r3
    af6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    af6c:	f7ff ff10 	bl	ad90 <mp_parse_num_base>
    af70:	4602      	mov	r2, r0
    af72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af74:	4413      	add	r3, r2
    af76:	64fb      	str	r3, [r7, #76]	; 0x4c

    // string should be an integer number
    mp_int_t int_val = 0;
    af78:	2300      	movs	r3, #0
    af7a:	643b      	str	r3, [r7, #64]	; 0x40
    const byte *restrict str_val_start = str;
    af7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af7e:	637b      	str	r3, [r7, #52]	; 0x34
    for (; str < top; str++) {
    af80:	e03c      	b.n	affc <mp_parse_num_integer+0x120>
        // get next digit as a value
        mp_uint_t dig = *str;
    af82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af84:	781b      	ldrb	r3, [r3, #0]
    af86:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ('0' <= dig && dig <= '9') {
    af88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af8a:	2b2f      	cmp	r3, #47	; 0x2f
    af8c:	d906      	bls.n	af9c <mp_parse_num_integer+0xc0>
    af8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af90:	2b39      	cmp	r3, #57	; 0x39
    af92:	d803      	bhi.n	af9c <mp_parse_num_integer+0xc0>
            dig -= '0';
    af94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af96:	3b30      	subs	r3, #48	; 0x30
    af98:	63fb      	str	r3, [r7, #60]	; 0x3c
    af9a:	e00f      	b.n	afbc <mp_parse_num_integer+0xe0>
        } else if (dig == '_') {
    af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af9e:	2b5f      	cmp	r3, #95	; 0x5f
    afa0:	d028      	beq.n	aff4 <mp_parse_num_integer+0x118>
            continue;
        } else {
            dig |= 0x20; // make digit lower-case
    afa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    afa4:	f043 0320 	orr.w	r3, r3, #32
    afa8:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ('a' <= dig && dig <= 'z') {
    afaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    afac:	2b60      	cmp	r3, #96	; 0x60
    afae:	d92b      	bls.n	b008 <mp_parse_num_integer+0x12c>
    afb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    afb2:	2b7a      	cmp	r3, #122	; 0x7a
    afb4:	d828      	bhi.n	b008 <mp_parse_num_integer+0x12c>
                dig -= 'a' - 10;
    afb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    afb8:	3b57      	subs	r3, #87	; 0x57
    afba:	63fb      	str	r3, [r7, #60]	; 0x3c
            } else {
                // unknown character
                break;
            }
        }
        if (dig >= (mp_uint_t)base) {
    afbc:	687b      	ldr	r3, [r7, #4]
    afbe:	461a      	mov	r2, r3
    afc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    afc2:	4293      	cmp	r3, r2
    afc4:	d21f      	bcs.n	b006 <mp_parse_num_integer+0x12a>
            break;
        }

        // add next digi and check for overflow
        if (mp_small_int_mul_overflow(int_val, base)) {
    afc6:	687b      	ldr	r3, [r7, #4]
    afc8:	4619      	mov	r1, r3
    afca:	6c38      	ldr	r0, [r7, #64]	; 0x40
    afcc:	f00f fe80 	bl	1acd0 <mp_small_int_mul_overflow>
    afd0:	4603      	mov	r3, r0
    afd2:	2b00      	cmp	r3, #0
    afd4:	d13e      	bne.n	b054 <mp_parse_num_integer+0x178>
            goto overflow;
        }
        int_val = int_val * base + dig;
    afd6:	687b      	ldr	r3, [r7, #4]
    afd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    afda:	fb02 f303 	mul.w	r3, r2, r3
    afde:	461a      	mov	r2, r3
    afe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    afe2:	4413      	add	r3, r2
    afe4:	643b      	str	r3, [r7, #64]	; 0x40
        if (!MP_SMALL_INT_FITS(int_val)) {
    afe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    afe8:	005a      	lsls	r2, r3, #1
    afea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    afec:	4053      	eors	r3, r2
    afee:	2b00      	cmp	r3, #0
    aff0:	db32      	blt.n	b058 <mp_parse_num_integer+0x17c>
    aff2:	e000      	b.n	aff6 <mp_parse_num_integer+0x11a>
            continue;
    aff4:	bf00      	nop
    for (; str < top; str++) {
    aff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aff8:	3301      	adds	r3, #1
    affa:	64fb      	str	r3, [r7, #76]	; 0x4c
    affc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b000:	429a      	cmp	r2, r3
    b002:	d3be      	bcc.n	af82 <mp_parse_num_integer+0xa6>
    b004:	e000      	b.n	b008 <mp_parse_num_integer+0x12c>
            break;
    b006:	bf00      	nop
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    b008:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    b00c:	2b00      	cmp	r3, #0
    b00e:	d002      	beq.n	b016 <mp_parse_num_integer+0x13a>
        int_val = -int_val;
    b010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b012:	425b      	negs	r3, r3
    b014:	643b      	str	r3, [r7, #64]	; 0x40
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    b016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b018:	005b      	lsls	r3, r3, #1
    b01a:	f043 0301 	orr.w	r3, r3, #1
    b01e:	647b      	str	r3, [r7, #68]	; 0x44

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    b020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b024:	429a      	cmp	r2, r3
    b026:	d02a      	beq.n	b07e <mp_parse_num_integer+0x1a2>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    b028:	e002      	b.n	b030 <mp_parse_num_integer+0x154>
    b02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b02c:	3301      	adds	r3, #1
    b02e:	64fb      	str	r3, [r7, #76]	; 0x4c
    b030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b034:	429a      	cmp	r2, r3
    b036:	d207      	bcs.n	b048 <mp_parse_num_integer+0x16c>
    b038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b03a:	781b      	ldrb	r3, [r3, #0]
    b03c:	4618      	mov	r0, r3
    b03e:	f7f7 f995 	bl	236c <unichar_isspace>
    b042:	4603      	mov	r3, r0
    b044:	2b00      	cmp	r3, #0
    b046:	d1f0      	bne.n	b02a <mp_parse_num_integer+0x14e>
    }

    // check we reached the end of the string
    if (str != top) {
    b048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b04c:	429a      	cmp	r2, r3
    b04e:	d118      	bne.n	b082 <mp_parse_num_integer+0x1a6>
        goto value_error;
    }

    // return the object
    return ret_val;
    b050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b052:	e020      	b.n	b096 <mp_parse_num_integer+0x1ba>
            goto overflow;
    b054:	bf00      	nop
    b056:	e000      	b.n	b05a <mp_parse_num_integer+0x17e>
            goto overflow;
    b058:	bf00      	nop

overflow:
    // reparse using long int
    {
        const char *s2 = (const char*)str_val_start;
    b05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b05c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    b05e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b062:	1ad3      	subs	r3, r2, r3
    b064:	4619      	mov	r1, r3
    b066:	687b      	ldr	r3, [r7, #4]
    b068:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
    b06c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    b070:	f005 faee 	bl	10650 <mp_obj_new_int_from_str_len>
    b074:	6478      	str	r0, [r7, #68]	; 0x44
        str = (const byte*)s2;
    b076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b078:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto have_ret_val;
    b07a:	bf00      	nop
    b07c:	e7d0      	b.n	b020 <mp_parse_num_integer+0x144>
        goto value_error;
    b07e:	bf00      	nop
    b080:	e000      	b.n	b084 <mp_parse_num_integer+0x1a8>
        goto value_error;
    b082:	bf00      	nop
    }

value_error:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
    b084:	4907      	ldr	r1, [pc, #28]	; (b0a4 <mp_parse_num_integer+0x1c8>)
    b086:	4808      	ldr	r0, [pc, #32]	; (b0a8 <mp_parse_num_integer+0x1cc>)
    b088:	f004 f95a 	bl	f340 <mp_obj_new_exception_msg>
    b08c:	6338      	str	r0, [r7, #48]	; 0x30
            "invalid syntax for integer");
        raise_exc(exc, lex);
    b08e:	6839      	ldr	r1, [r7, #0]
    b090:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b092:	f7ff ff0b 	bl	aeac <raise_exc>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    b096:	4618      	mov	r0, r3
    b098:	3750      	adds	r7, #80	; 0x50
    b09a:	46bd      	mov	sp, r7
    b09c:	bd80      	pop	{r7, pc}
    b09e:	bf00      	nop
    b0a0:	00020bb8 	.word	0x00020bb8
    b0a4:	00020bdc 	.word	0x00020bdc
    b0a8:	00021e58 	.word	0x00021e58

0000b0ac <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    b0ac:	b580      	push	{r7, lr}
    b0ae:	b084      	sub	sp, #16
    b0b0:	af00      	add	r7, sp, #0
    b0b2:	60f8      	str	r0, [r7, #12]
    b0b4:	60b9      	str	r1, [r7, #8]
    b0b6:	4611      	mov	r1, r2
    b0b8:	461a      	mov	r2, r3
    b0ba:	460b      	mov	r3, r1
    b0bc:	71fb      	strb	r3, [r7, #7]
    b0be:	4613      	mov	r3, r2
    b0c0:	71bb      	strb	r3, [r7, #6]

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
    b0c2:	4904      	ldr	r1, [pc, #16]	; (b0d4 <mp_parse_num_decimal+0x28>)
    b0c4:	4804      	ldr	r0, [pc, #16]	; (b0d8 <mp_parse_num_decimal+0x2c>)
    b0c6:	f004 f93b 	bl	f340 <mp_obj_new_exception_msg>
    b0ca:	4603      	mov	r3, r0
    b0cc:	69b9      	ldr	r1, [r7, #24]
    b0ce:	4618      	mov	r0, r3
    b0d0:	f7ff feec 	bl	aeac <raise_exc>
    b0d4:	00020bf8 	.word	0x00020bf8
    b0d8:	00021e58 	.word	0x00021e58

0000b0dc <MP_OBJ_IS_OBJ>:
    b0dc:	b480      	push	{r7}
    b0de:	b083      	sub	sp, #12
    b0e0:	af00      	add	r7, sp, #0
    b0e2:	6078      	str	r0, [r7, #4]
    b0e4:	687b      	ldr	r3, [r7, #4]
    b0e6:	f003 0303 	and.w	r3, r3, #3
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	bf0c      	ite	eq
    b0ee:	2301      	moveq	r3, #1
    b0f0:	2300      	movne	r3, #0
    b0f2:	b2db      	uxtb	r3, r3
    b0f4:	4618      	mov	r0, r3
    b0f6:	370c      	adds	r7, #12
    b0f8:	46bd      	mov	sp, r7
    b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0fe:	4770      	bx	lr

0000b100 <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    b100:	b580      	push	{r7, lr}
    b102:	b082      	sub	sp, #8
    b104:	af00      	add	r7, sp, #0
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    b106:	2010      	movs	r0, #16
    b108:	f7f5 f92d 	bl	366 <m_malloc0>
    b10c:	6078      	str	r0, [r7, #4]
    rc->kind = MP_CODE_RESERVED;
    b10e:	687a      	ldr	r2, [r7, #4]
    b110:	7813      	ldrb	r3, [r2, #0]
    b112:	2101      	movs	r1, #1
    b114:	f361 0302 	bfi	r3, r1, #0, #3
    b118:	7013      	strb	r3, [r2, #0]
    return rc;
    b11a:	687b      	ldr	r3, [r7, #4]
}
    b11c:	4618      	mov	r0, r3
    b11e:	3708      	adds	r7, #8
    b120:	46bd      	mov	sp, r7
    b122:	bd80      	pop	{r7, pc}

0000b124 <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    b124:	b480      	push	{r7}
    b126:	b085      	sub	sp, #20
    b128:	af00      	add	r7, sp, #0
    b12a:	60f8      	str	r0, [r7, #12]
    b12c:	60b9      	str	r1, [r7, #8]
    b12e:	607a      	str	r2, [r7, #4]
    b130:	603b      	str	r3, [r7, #0]

    rc->kind = MP_CODE_BYTECODE;
    b132:	68fa      	ldr	r2, [r7, #12]
    b134:	7813      	ldrb	r3, [r2, #0]
    b136:	2102      	movs	r1, #2
    b138:	f361 0302 	bfi	r3, r1, #0, #3
    b13c:	7013      	strb	r3, [r2, #0]
    rc->scope_flags = scope_flags;
    b13e:	683b      	ldr	r3, [r7, #0]
    b140:	b2db      	uxtb	r3, r3
    b142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b146:	b2d9      	uxtb	r1, r3
    b148:	68fa      	ldr	r2, [r7, #12]
    b14a:	8813      	ldrh	r3, [r2, #0]
    b14c:	f361 03c9 	bfi	r3, r1, #3, #7
    b150:	8013      	strh	r3, [r2, #0]
    rc->data.u_byte.bytecode = code;
    b152:	68fb      	ldr	r3, [r7, #12]
    b154:	68ba      	ldr	r2, [r7, #8]
    b156:	605a      	str	r2, [r3, #4]
    rc->data.u_byte.const_table = const_table;
    b158:	68fb      	ldr	r3, [r7, #12]
    b15a:	687a      	ldr	r2, [r7, #4]
    b15c:	609a      	str	r2, [r3, #8]
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
        mp_bytecode_print(rc, code, len, const_table);
    }
#endif
}
    b15e:	bf00      	nop
    b160:	3714      	adds	r7, #20
    b162:	46bd      	mov	sp, r7
    b164:	f85d 7b04 	ldr.w	r7, [sp], #4
    b168:	4770      	bx	lr

0000b16a <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    b16a:	b580      	push	{r7, lr}
    b16c:	b086      	sub	sp, #24
    b16e:	af00      	add	r7, sp, #0
    b170:	60f8      	str	r0, [r7, #12]
    b172:	60b9      	str	r1, [r7, #8]
    b174:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    assert(rc != NULL);
    b176:	68fb      	ldr	r3, [r7, #12]
    b178:	2b00      	cmp	r3, #0
    b17a:	d105      	bne.n	b188 <mp_make_function_from_raw_code+0x1e>
    b17c:	4b2c      	ldr	r3, [pc, #176]	; (b230 <mp_make_function_from_raw_code+0xc6>)
    b17e:	4a2d      	ldr	r2, [pc, #180]	; (b234 <mp_make_function_from_raw_code+0xca>)
    b180:	2179      	movs	r1, #121	; 0x79
    b182:	482d      	ldr	r0, [pc, #180]	; (b238 <mp_make_function_from_raw_code+0xce>)
    b184:	f010 f82e 	bl	1b1e4 <__assert_func>

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    b188:	68bb      	ldr	r3, [r7, #8]
    b18a:	2b00      	cmp	r3, #0
    b18c:	d010      	beq.n	b1b0 <mp_make_function_from_raw_code+0x46>
    b18e:	68b8      	ldr	r0, [r7, #8]
    b190:	f7ff ffa4 	bl	b0dc <MP_OBJ_IS_OBJ>
    b194:	4603      	mov	r3, r0
    b196:	2b00      	cmp	r3, #0
    b198:	d004      	beq.n	b1a4 <mp_make_function_from_raw_code+0x3a>
    b19a:	68bb      	ldr	r3, [r7, #8]
    b19c:	681b      	ldr	r3, [r3, #0]
    b19e:	4a27      	ldr	r2, [pc, #156]	; (b23c <mp_make_function_from_raw_code+0xd2>)
    b1a0:	4293      	cmp	r3, r2
    b1a2:	d005      	beq.n	b1b0 <mp_make_function_from_raw_code+0x46>
    b1a4:	4b26      	ldr	r3, [pc, #152]	; (b240 <mp_make_function_from_raw_code+0xd6>)
    b1a6:	4a23      	ldr	r2, [pc, #140]	; (b234 <mp_make_function_from_raw_code+0xca>)
    b1a8:	217c      	movs	r1, #124	; 0x7c
    b1aa:	4823      	ldr	r0, [pc, #140]	; (b238 <mp_make_function_from_raw_code+0xce>)
    b1ac:	f010 f81a 	bl	1b1e4 <__assert_func>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    b1b0:	687b      	ldr	r3, [r7, #4]
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	d010      	beq.n	b1d8 <mp_make_function_from_raw_code+0x6e>
    b1b6:	6878      	ldr	r0, [r7, #4]
    b1b8:	f7ff ff90 	bl	b0dc <MP_OBJ_IS_OBJ>
    b1bc:	4603      	mov	r3, r0
    b1be:	2b00      	cmp	r3, #0
    b1c0:	d004      	beq.n	b1cc <mp_make_function_from_raw_code+0x62>
    b1c2:	687b      	ldr	r3, [r7, #4]
    b1c4:	681b      	ldr	r3, [r3, #0]
    b1c6:	4a1f      	ldr	r2, [pc, #124]	; (b244 <mp_make_function_from_raw_code+0xda>)
    b1c8:	4293      	cmp	r3, r2
    b1ca:	d005      	beq.n	b1d8 <mp_make_function_from_raw_code+0x6e>
    b1cc:	4b1e      	ldr	r3, [pc, #120]	; (b248 <mp_make_function_from_raw_code+0xde>)
    b1ce:	4a19      	ldr	r2, [pc, #100]	; (b234 <mp_make_function_from_raw_code+0xca>)
    b1d0:	217f      	movs	r1, #127	; 0x7f
    b1d2:	4819      	ldr	r0, [pc, #100]	; (b238 <mp_make_function_from_raw_code+0xce>)
    b1d4:	f010 f806 	bl	1b1e4 <__assert_func>

    // make the function, depending on the raw code kind
    mp_obj_t fun;
    switch (rc->kind) {
    b1d8:	68fb      	ldr	r3, [r7, #12]
    b1da:	781b      	ldrb	r3, [r3, #0]
    b1dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    b1e0:	68fb      	ldr	r3, [r7, #12]
    b1e2:	781b      	ldrb	r3, [r3, #0]
    b1e4:	f003 0307 	and.w	r3, r3, #7
    b1e8:	b2db      	uxtb	r3, r3
    b1ea:	2b02      	cmp	r3, #2
    b1ec:	d005      	beq.n	b1fa <mp_make_function_from_raw_code+0x90>
    b1ee:	4b17      	ldr	r3, [pc, #92]	; (b24c <mp_make_function_from_raw_code+0xe2>)
    b1f0:	4a10      	ldr	r2, [pc, #64]	; (b234 <mp_make_function_from_raw_code+0xca>)
    b1f2:	2193      	movs	r1, #147	; 0x93
    b1f4:	4810      	ldr	r0, [pc, #64]	; (b238 <mp_make_function_from_raw_code+0xce>)
    b1f6:	f00f fff5 	bl	1b1e4 <__assert_func>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    b1fa:	68fb      	ldr	r3, [r7, #12]
    b1fc:	685a      	ldr	r2, [r3, #4]
    b1fe:	68fb      	ldr	r3, [r7, #12]
    b200:	689b      	ldr	r3, [r3, #8]
    b202:	6879      	ldr	r1, [r7, #4]
    b204:	68b8      	ldr	r0, [r7, #8]
    b206:	f004 fd01 	bl	fc0c <mp_obj_new_fun_bc>
    b20a:	6178      	str	r0, [r7, #20]
            // check for generator functions and if so change the type of the object
            if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    b20c:	68fb      	ldr	r3, [r7, #12]
    b20e:	881b      	ldrh	r3, [r3, #0]
    b210:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    b214:	b2db      	uxtb	r3, r3
    b216:	f003 0304 	and.w	r3, r3, #4
    b21a:	2b00      	cmp	r3, #0
    b21c:	d002      	beq.n	b224 <mp_make_function_from_raw_code+0xba>
                ((mp_obj_base_t*)MP_OBJ_TO_PTR(fun))->type = &mp_type_gen_wrap;
    b21e:	697b      	ldr	r3, [r7, #20]
    b220:	4a0b      	ldr	r2, [pc, #44]	; (b250 <mp_make_function_from_raw_code+0xe6>)
    b222:	601a      	str	r2, [r3, #0]
            }
            break;
    b224:	bf00      	nop
    }

    return fun;
    b226:	697b      	ldr	r3, [r7, #20]
}
    b228:	4618      	mov	r0, r3
    b22a:	3718      	adds	r7, #24
    b22c:	46bd      	mov	sp, r7
    b22e:	bd80      	pop	{r7, pc}
    b230:	00020c18 	.word	0x00020c18
    b234:	00020ce8 	.word	0x00020ce8
    b238:	00020c24 	.word	0x00020c24
    b23c:	00023488 	.word	0x00023488
    b240:	00020c38 	.word	0x00020c38
    b244:	000217b4 	.word	0x000217b4
    b248:	00020c7c 	.word	0x00020c7c
    b24c:	00020cc8 	.word	0x00020cc8
    b250:	00022300 	.word	0x00022300

0000b254 <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    b254:	b580      	push	{r7, lr}
    b256:	b086      	sub	sp, #24
    b258:	af00      	add	r7, sp, #0
    b25a:	60f8      	str	r0, [r7, #12]
    b25c:	60b9      	str	r1, [r7, #8]
    b25e:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    b260:	68bb      	ldr	r3, [r7, #8]
    b262:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b266:	2b00      	cmp	r3, #0
    b268:	d00a      	beq.n	b280 <mp_make_closure_from_raw_code+0x2c>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	6819      	ldr	r1, [r3, #0]
    b26e:	687b      	ldr	r3, [r7, #4]
    b270:	3304      	adds	r3, #4
    b272:	681b      	ldr	r3, [r3, #0]
    b274:	461a      	mov	r2, r3
    b276:	68f8      	ldr	r0, [r7, #12]
    b278:	f7ff ff77 	bl	b16a <mp_make_function_from_raw_code>
    b27c:	6178      	str	r0, [r7, #20]
    b27e:	e005      	b.n	b28c <mp_make_closure_from_raw_code+0x38>
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    b280:	2200      	movs	r2, #0
    b282:	2100      	movs	r1, #0
    b284:	68f8      	ldr	r0, [r7, #12]
    b286:	f7ff ff70 	bl	b16a <mp_make_function_from_raw_code>
    b28a:	6178      	str	r0, [r7, #20]
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    b28c:	68bb      	ldr	r3, [r7, #8]
    b28e:	b2d9      	uxtb	r1, r3
    b290:	68bb      	ldr	r3, [r7, #8]
    b292:	09db      	lsrs	r3, r3, #7
    b294:	f003 0302 	and.w	r3, r3, #2
    b298:	009b      	lsls	r3, r3, #2
    b29a:	687a      	ldr	r2, [r7, #4]
    b29c:	4413      	add	r3, r2
    b29e:	461a      	mov	r2, r3
    b2a0:	6978      	ldr	r0, [r7, #20]
    b2a2:	f002 ffff 	bl	e2a4 <mp_obj_new_closure>
    b2a6:	4603      	mov	r3, r0
}
    b2a8:	4618      	mov	r0, r3
    b2aa:	3718      	adds	r7, #24
    b2ac:	46bd      	mov	sp, r7
    b2ae:	bd80      	pop	{r7, pc}

0000b2b0 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    b2b0:	b480      	push	{r7}
    b2b2:	b083      	sub	sp, #12
    b2b4:	af00      	add	r7, sp, #0
    b2b6:	6078      	str	r0, [r7, #4]
    b2b8:	687b      	ldr	r3, [r7, #4]
    b2ba:	f003 0301 	and.w	r3, r3, #1
    b2be:	2b00      	cmp	r3, #0
    b2c0:	bf14      	ite	ne
    b2c2:	2301      	movne	r3, #1
    b2c4:	2300      	moveq	r3, #0
    b2c6:	b2db      	uxtb	r3, r3
    b2c8:	4618      	mov	r0, r3
    b2ca:	370c      	adds	r7, #12
    b2cc:	46bd      	mov	sp, r7
    b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2d2:	4770      	bx	lr

0000b2d4 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    b2d4:	b480      	push	{r7}
    b2d6:	b083      	sub	sp, #12
    b2d8:	af00      	add	r7, sp, #0
    b2da:	6078      	str	r0, [r7, #4]
    b2dc:	687b      	ldr	r3, [r7, #4]
    b2de:	f003 0303 	and.w	r3, r3, #3
    b2e2:	2b02      	cmp	r3, #2
    b2e4:	bf0c      	ite	eq
    b2e6:	2301      	moveq	r3, #1
    b2e8:	2300      	movne	r3, #0
    b2ea:	b2db      	uxtb	r3, r3
    b2ec:	4618      	mov	r0, r3
    b2ee:	370c      	adds	r7, #12
    b2f0:	46bd      	mov	sp, r7
    b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2f6:	4770      	bx	lr

0000b2f8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    b2f8:	b480      	push	{r7}
    b2fa:	b083      	sub	sp, #12
    b2fc:	af00      	add	r7, sp, #0
    b2fe:	6078      	str	r0, [r7, #4]
    b300:	687b      	ldr	r3, [r7, #4]
    b302:	f003 0303 	and.w	r3, r3, #3
    b306:	2b00      	cmp	r3, #0
    b308:	bf0c      	ite	eq
    b30a:	2301      	moveq	r3, #1
    b30c:	2300      	movne	r3, #0
    b30e:	b2db      	uxtb	r3, r3
    b310:	4618      	mov	r0, r3
    b312:	370c      	adds	r7, #12
    b314:	46bd      	mov	sp, r7
    b316:	f85d 7b04 	ldr.w	r7, [sp], #4
    b31a:	4770      	bx	lr

0000b31c <MP_MAP_SLOT_IS_FILLED>:
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3, // only valid for mp_set_lookup
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    b31c:	b480      	push	{r7}
    b31e:	b083      	sub	sp, #12
    b320:	af00      	add	r7, sp, #0
    b322:	6078      	str	r0, [r7, #4]
    b324:	6039      	str	r1, [r7, #0]
    b326:	687b      	ldr	r3, [r7, #4]
    b328:	689a      	ldr	r2, [r3, #8]
    b32a:	683b      	ldr	r3, [r7, #0]
    b32c:	00db      	lsls	r3, r3, #3
    b32e:	4413      	add	r3, r2
    b330:	681b      	ldr	r3, [r3, #0]
    b332:	2b00      	cmp	r3, #0
    b334:	d009      	beq.n	b34a <MP_MAP_SLOT_IS_FILLED+0x2e>
    b336:	687b      	ldr	r3, [r7, #4]
    b338:	689a      	ldr	r2, [r3, #8]
    b33a:	683b      	ldr	r3, [r7, #0]
    b33c:	00db      	lsls	r3, r3, #3
    b33e:	4413      	add	r3, r2
    b340:	681b      	ldr	r3, [r3, #0]
    b342:	2b08      	cmp	r3, #8
    b344:	d001      	beq.n	b34a <MP_MAP_SLOT_IS_FILLED+0x2e>
    b346:	2301      	movs	r3, #1
    b348:	e000      	b.n	b34c <MP_MAP_SLOT_IS_FILLED+0x30>
    b34a:	2300      	movs	r3, #0
    b34c:	f003 0301 	and.w	r3, r3, #1
    b350:	b2db      	uxtb	r3, r3
    b352:	4618      	mov	r0, r3
    b354:	370c      	adds	r7, #12
    b356:	46bd      	mov	sp, r7
    b358:	f85d 7b04 	ldr.w	r7, [sp], #4
    b35c:	4770      	bx	lr

0000b35e <mp_obj_new_bool>:
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b35e:	b480      	push	{r7}
    b360:	b083      	sub	sp, #12
    b362:	af00      	add	r7, sp, #0
    b364:	6078      	str	r0, [r7, #4]
    b366:	687b      	ldr	r3, [r7, #4]
    b368:	2b00      	cmp	r3, #0
    b36a:	d001      	beq.n	b370 <mp_obj_new_bool+0x12>
    b36c:	4b04      	ldr	r3, [pc, #16]	; (b380 <mp_obj_new_bool+0x22>)
    b36e:	e000      	b.n	b372 <mp_obj_new_bool+0x14>
    b370:	4b04      	ldr	r3, [pc, #16]	; (b384 <mp_obj_new_bool+0x26>)
    b372:	4618      	mov	r0, r3
    b374:	370c      	adds	r7, #12
    b376:	46bd      	mov	sp, r7
    b378:	f85d 7b04 	ldr.w	r7, [sp], #4
    b37c:	4770      	bx	lr
    b37e:	bf00      	nop
    b380:	00021310 	.word	0x00021310
    b384:	00021308 	.word	0x00021308

0000b388 <mp_obj_dict_get_map>:
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
    b388:	b480      	push	{r7}
    b38a:	b083      	sub	sp, #12
    b38c:	af00      	add	r7, sp, #0
    b38e:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
    b390:	687b      	ldr	r3, [r7, #4]
    b392:	3304      	adds	r3, #4
}
    b394:	4618      	mov	r0, r3
    b396:	370c      	adds	r7, #12
    b398:	46bd      	mov	sp, r7
    b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b39e:	4770      	bx	lr

0000b3a0 <mp_obj_module_get_globals>:
// module
typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
    b3a0:	b480      	push	{r7}
    b3a2:	b083      	sub	sp, #12
    b3a4:	af00      	add	r7, sp, #0
    b3a6:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
    b3a8:	687b      	ldr	r3, [r7, #4]
    b3aa:	685b      	ldr	r3, [r3, #4]
}
    b3ac:	4618      	mov	r0, r3
    b3ae:	370c      	adds	r7, #12
    b3b0:	46bd      	mov	sp, r7
    b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3b6:	4770      	bx	lr

0000b3b8 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
    b3b8:	b480      	push	{r7}
    b3ba:	b083      	sub	sp, #12
    b3bc:	af00      	add	r7, sp, #0
    b3be:	6078      	str	r0, [r7, #4]
}
    b3c0:	bf00      	nop
    b3c2:	370c      	adds	r7, #12
    b3c4:	46bd      	mov	sp, r7
    b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3ca:	4770      	bx	lr

0000b3cc <mp_nonlocal_alloc>:

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    b3cc:	b580      	push	{r7, lr}
    b3ce:	b082      	sub	sp, #8
    b3d0:	af00      	add	r7, sp, #0
    b3d2:	6078      	str	r0, [r7, #4]
    return m_new(uint8_t, n_bytes);
    b3d4:	6878      	ldr	r0, [r7, #4]
    b3d6:	f7f4 ffa1 	bl	31c <m_malloc>
    b3da:	4603      	mov	r3, r0
}
    b3dc:	4618      	mov	r0, r3
    b3de:	3708      	adds	r7, #8
    b3e0:	46bd      	mov	sp, r7
    b3e2:	bd80      	pop	{r7, pc}

0000b3e4 <mp_nonlocal_realloc>:

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    b3e4:	b580      	push	{r7, lr}
    b3e6:	b084      	sub	sp, #16
    b3e8:	af00      	add	r7, sp, #0
    b3ea:	60f8      	str	r0, [r7, #12]
    b3ec:	60b9      	str	r1, [r7, #8]
    b3ee:	607a      	str	r2, [r7, #4]
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    b3f0:	6879      	ldr	r1, [r7, #4]
    b3f2:	68f8      	ldr	r0, [r7, #12]
    b3f4:	f7f4 ffc4 	bl	380 <m_realloc>
    b3f8:	4603      	mov	r3, r0
}
    b3fa:	4618      	mov	r0, r3
    b3fc:	3710      	adds	r7, #16
    b3fe:	46bd      	mov	sp, r7
    b400:	bd80      	pop	{r7, pc}

0000b402 <mp_nonlocal_free>:

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    b402:	b580      	push	{r7, lr}
    b404:	b082      	sub	sp, #8
    b406:	af00      	add	r7, sp, #0
    b408:	6078      	str	r0, [r7, #4]
    b40a:	6039      	str	r1, [r7, #0]
    m_del(uint8_t, ptr, n_bytes);
    b40c:	6878      	ldr	r0, [r7, #4]
    b40e:	f7f4 ffe3 	bl	3d8 <m_free>
}
    b412:	bf00      	nop
    b414:	3708      	adds	r7, #8
    b416:	46bd      	mov	sp, r7
    b418:	bd80      	pop	{r7, pc}

0000b41a <mp_locals_get>:
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    b41a:	b480      	push	{r7}
    b41c:	af00      	add	r7, sp, #0
    b41e:	4b03      	ldr	r3, [pc, #12]	; (b42c <mp_locals_get+0x12>)
    b420:	685b      	ldr	r3, [r3, #4]
    b422:	4618      	mov	r0, r3
    b424:	46bd      	mov	sp, r7
    b426:	f85d 7b04 	ldr.w	r7, [sp], #4
    b42a:	4770      	bx	lr
    b42c:	20001240 	.word	0x20001240

0000b430 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    b430:	b480      	push	{r7}
    b432:	b083      	sub	sp, #12
    b434:	af00      	add	r7, sp, #0
    b436:	6078      	str	r0, [r7, #4]
    b438:	4a04      	ldr	r2, [pc, #16]	; (b44c <mp_locals_set+0x1c>)
    b43a:	687b      	ldr	r3, [r7, #4]
    b43c:	6053      	str	r3, [r2, #4]
    b43e:	bf00      	nop
    b440:	370c      	adds	r7, #12
    b442:	46bd      	mov	sp, r7
    b444:	f85d 7b04 	ldr.w	r7, [sp], #4
    b448:	4770      	bx	lr
    b44a:	bf00      	nop
    b44c:	20001240 	.word	0x20001240

0000b450 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    b450:	b480      	push	{r7}
    b452:	af00      	add	r7, sp, #0
    b454:	4b03      	ldr	r3, [pc, #12]	; (b464 <mp_globals_get+0x14>)
    b456:	689b      	ldr	r3, [r3, #8]
    b458:	4618      	mov	r0, r3
    b45a:	46bd      	mov	sp, r7
    b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b460:	4770      	bx	lr
    b462:	bf00      	nop
    b464:	20001240 	.word	0x20001240

0000b468 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    b468:	b480      	push	{r7}
    b46a:	b083      	sub	sp, #12
    b46c:	af00      	add	r7, sp, #0
    b46e:	6078      	str	r0, [r7, #4]
    b470:	4a04      	ldr	r2, [pc, #16]	; (b484 <mp_globals_set+0x1c>)
    b472:	687b      	ldr	r3, [r7, #4]
    b474:	6093      	str	r3, [r2, #8]
    b476:	bf00      	nop
    b478:	370c      	adds	r7, #12
    b47a:	46bd      	mov	sp, r7
    b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b480:	4770      	bx	lr
    b482:	bf00      	nop
    b484:	20001240 	.word	0x20001240

0000b488 <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    b488:	b580      	push	{r7, lr}
    b48a:	af00      	add	r7, sp, #0
    qstr_init();
    b48c:	f7f5 fcf0 	bl	e70 <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    b490:	4b0d      	ldr	r3, [pc, #52]	; (b4c8 <mp_init+0x40>)
    b492:	2200      	movs	r2, #0
    b494:	635a      	str	r2, [r3, #52]	; 0x34
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    b496:	4b0c      	ldr	r3, [pc, #48]	; (b4c8 <mp_init+0x40>)
    b498:	2200      	movs	r2, #0
    b49a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    b49e:	2103      	movs	r1, #3
    b4a0:	480a      	ldr	r0, [pc, #40]	; (b4cc <mp_init+0x44>)
    b4a2:	f003 fd71 	bl	ef88 <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    b4a6:	2101      	movs	r1, #1
    b4a8:	4809      	ldr	r0, [pc, #36]	; (b4d0 <mp_init+0x48>)
    b4aa:	f003 fd6d 	bl	ef88 <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    b4ae:	2266      	movs	r2, #102	; 0x66
    b4b0:	216e      	movs	r1, #110	; 0x6e
    b4b2:	4807      	ldr	r0, [pc, #28]	; (b4d0 <mp_init+0x48>)
    b4b4:	f003 fd9d 	bl	eff2 <mp_obj_dict_store>

    // locals = globals for outer module (see Objects/frameobject.c/PyFrame_New())
    mp_locals_set(&MP_STATE_VM(dict_main));
    b4b8:	4805      	ldr	r0, [pc, #20]	; (b4d0 <mp_init+0x48>)
    b4ba:	f7ff ffb9 	bl	b430 <mp_locals_set>
    mp_globals_set(&MP_STATE_VM(dict_main));
    b4be:	4804      	ldr	r0, [pc, #16]	; (b4d0 <mp_init+0x48>)
    b4c0:	f7ff ffd2 	bl	b468 <mp_globals_set>
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    b4c4:	bf00      	nop
    b4c6:	bd80      	pop	{r7, pc}
    b4c8:	20001240 	.word	0x20001240
    b4cc:	20001264 	.word	0x20001264
    b4d0:	20001278 	.word	0x20001278

0000b4d4 <mp_deinit>:

void mp_deinit(void) {
    b4d4:	b480      	push	{r7}
    b4d6:	af00      	add	r7, sp, #0

    // call port specific deinitialization if any
#ifdef MICROPY_PORT_INIT_FUNC
    MICROPY_PORT_DEINIT_FUNC;
#endif
}
    b4d8:	bf00      	nop
    b4da:	46bd      	mov	sp, r7
    b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4e0:	4770      	bx	lr

0000b4e2 <mp_load_name>:

mp_obj_t mp_load_name(qstr qst) {
    b4e2:	b590      	push	{r4, r7, lr}
    b4e4:	b085      	sub	sp, #20
    b4e6:	af00      	add	r7, sp, #0
    b4e8:	6078      	str	r0, [r7, #4]
    // logic: search locals, globals, builtins
    DEBUG_OP_printf("load name %s\n", qstr_str(qst));
    // If we're at the outer scope (locals == globals), dispatch to load_global right away
    if (mp_locals_get() != mp_globals_get()) {
    b4ea:	f7ff ff96 	bl	b41a <mp_locals_get>
    b4ee:	4604      	mov	r4, r0
    b4f0:	f7ff ffae 	bl	b450 <mp_globals_get>
    b4f4:	4603      	mov	r3, r0
    b4f6:	429c      	cmp	r4, r3
    b4f8:	d012      	beq.n	b520 <mp_load_name+0x3e>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b4fa:	f7ff ff8e 	bl	b41a <mp_locals_get>
    b4fe:	4603      	mov	r3, r0
    b500:	1d18      	adds	r0, r3, #4
    b502:	687b      	ldr	r3, [r7, #4]
    b504:	009b      	lsls	r3, r3, #2
    b506:	f043 0302 	orr.w	r3, r3, #2
    b50a:	2200      	movs	r2, #0
    b50c:	4619      	mov	r1, r3
    b50e:	f001 ff41 	bl	d394 <mp_map_lookup>
    b512:	60f8      	str	r0, [r7, #12]
        if (elem != NULL) {
    b514:	68fb      	ldr	r3, [r7, #12]
    b516:	2b00      	cmp	r3, #0
    b518:	d002      	beq.n	b520 <mp_load_name+0x3e>
            return elem->value;
    b51a:	68fb      	ldr	r3, [r7, #12]
    b51c:	685b      	ldr	r3, [r3, #4]
    b51e:	e003      	b.n	b528 <mp_load_name+0x46>
        }
    }
    return mp_load_global(qst);
    b520:	6878      	ldr	r0, [r7, #4]
    b522:	f000 f805 	bl	b530 <mp_load_global>
    b526:	4603      	mov	r3, r0
}
    b528:	4618      	mov	r0, r3
    b52a:	3714      	adds	r7, #20
    b52c:	46bd      	mov	sp, r7
    b52e:	bd90      	pop	{r4, r7, pc}

0000b530 <mp_load_global>:

mp_obj_t mp_load_global(qstr qst) {
    b530:	b580      	push	{r7, lr}
    b532:	b084      	sub	sp, #16
    b534:	af00      	add	r7, sp, #0
    b536:	6078      	str	r0, [r7, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b538:	f7ff ff8a 	bl	b450 <mp_globals_get>
    b53c:	4603      	mov	r3, r0
    b53e:	1d18      	adds	r0, r3, #4
    b540:	687b      	ldr	r3, [r7, #4]
    b542:	009b      	lsls	r3, r3, #2
    b544:	f043 0302 	orr.w	r3, r3, #2
    b548:	2200      	movs	r2, #0
    b54a:	4619      	mov	r1, r3
    b54c:	f001 ff22 	bl	d394 <mp_map_lookup>
    b550:	60f8      	str	r0, [r7, #12]
    if (elem == NULL) {
    b552:	68fb      	ldr	r3, [r7, #12]
    b554:	2b00      	cmp	r3, #0
    b556:	d110      	bne.n	b57a <mp_load_global+0x4a>
            if (elem != NULL) {
                return elem->value;
            }
        }
        #endif
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b558:	687b      	ldr	r3, [r7, #4]
    b55a:	009b      	lsls	r3, r3, #2
    b55c:	f043 0302 	orr.w	r3, r3, #2
    b560:	2200      	movs	r2, #0
    b562:	4619      	mov	r1, r3
    b564:	4808      	ldr	r0, [pc, #32]	; (b588 <mp_load_global+0x58>)
    b566:	f001 ff15 	bl	d394 <mp_map_lookup>
    b56a:	60f8      	str	r0, [r7, #12]
        if (elem == NULL) {
    b56c:	68fb      	ldr	r3, [r7, #12]
    b56e:	2b00      	cmp	r3, #0
    b570:	d103      	bne.n	b57a <mp_load_global+0x4a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_NameError, "name not defined");
    b572:	4906      	ldr	r1, [pc, #24]	; (b58c <mp_load_global+0x5c>)
    b574:	4806      	ldr	r0, [pc, #24]	; (b590 <mp_load_global+0x60>)
    b576:	f001 fc7f 	bl	ce78 <mp_raise_msg>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
                    "name '%q' is not defined", qst));
            }
        }
    }
    return elem->value;
    b57a:	68fb      	ldr	r3, [r7, #12]
    b57c:	685b      	ldr	r3, [r3, #4]
}
    b57e:	4618      	mov	r0, r3
    b580:	3710      	adds	r7, #16
    b582:	46bd      	mov	sp, r7
    b584:	bd80      	pop	{r7, pc}
    b586:	bf00      	nop
    b588:	0002408c 	.word	0x0002408c
    b58c:	00020d10 	.word	0x00020d10
    b590:	00021cb4 	.word	0x00021cb4

0000b594 <mp_load_build_class>:

mp_obj_t mp_load_build_class(void) {
    b594:	b480      	push	{r7}
    b596:	af00      	add	r7, sp, #0
        if (elem != NULL) {
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
    b598:	4b02      	ldr	r3, [pc, #8]	; (b5a4 <mp_load_build_class+0x10>)
}
    b59a:	4618      	mov	r0, r3
    b59c:	46bd      	mov	sp, r7
    b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5a2:	4770      	bx	lr
    b5a4:	00023c98 	.word	0x00023c98

0000b5a8 <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    b5a8:	b580      	push	{r7, lr}
    b5aa:	b082      	sub	sp, #8
    b5ac:	af00      	add	r7, sp, #0
    b5ae:	6078      	str	r0, [r7, #4]
    b5b0:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b5b2:	f7ff ff32 	bl	b41a <mp_locals_get>
    b5b6:	687b      	ldr	r3, [r7, #4]
    b5b8:	009b      	lsls	r3, r3, #2
    b5ba:	f043 0302 	orr.w	r3, r3, #2
    b5be:	683a      	ldr	r2, [r7, #0]
    b5c0:	4619      	mov	r1, r3
    b5c2:	f003 fd16 	bl	eff2 <mp_obj_dict_store>
}
    b5c6:	bf00      	nop
    b5c8:	3708      	adds	r7, #8
    b5ca:	46bd      	mov	sp, r7
    b5cc:	bd80      	pop	{r7, pc}

0000b5ce <mp_delete_name>:

void mp_delete_name(qstr qst) {
    b5ce:	b580      	push	{r7, lr}
    b5d0:	b082      	sub	sp, #8
    b5d2:	af00      	add	r7, sp, #0
    b5d4:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    b5d6:	f7ff ff20 	bl	b41a <mp_locals_get>
    b5da:	4602      	mov	r2, r0
    b5dc:	687b      	ldr	r3, [r7, #4]
    b5de:	009b      	lsls	r3, r3, #2
    b5e0:	f043 0302 	orr.w	r3, r3, #2
    b5e4:	4619      	mov	r1, r3
    b5e6:	4610      	mov	r0, r2
    b5e8:	f003 fd38 	bl	f05c <mp_obj_dict_delete>
}
    b5ec:	bf00      	nop
    b5ee:	3708      	adds	r7, #8
    b5f0:	46bd      	mov	sp, r7
    b5f2:	bd80      	pop	{r7, pc}

0000b5f4 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    b5f4:	b580      	push	{r7, lr}
    b5f6:	b082      	sub	sp, #8
    b5f8:	af00      	add	r7, sp, #0
    b5fa:	6078      	str	r0, [r7, #4]
    b5fc:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b5fe:	f7ff ff27 	bl	b450 <mp_globals_get>
    b602:	687b      	ldr	r3, [r7, #4]
    b604:	009b      	lsls	r3, r3, #2
    b606:	f043 0302 	orr.w	r3, r3, #2
    b60a:	683a      	ldr	r2, [r7, #0]
    b60c:	4619      	mov	r1, r3
    b60e:	f003 fcf0 	bl	eff2 <mp_obj_dict_store>
}
    b612:	bf00      	nop
    b614:	3708      	adds	r7, #8
    b616:	46bd      	mov	sp, r7
    b618:	bd80      	pop	{r7, pc}

0000b61a <mp_delete_global>:

void mp_delete_global(qstr qst) {
    b61a:	b580      	push	{r7, lr}
    b61c:	b082      	sub	sp, #8
    b61e:	af00      	add	r7, sp, #0
    b620:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    b622:	f7ff ff15 	bl	b450 <mp_globals_get>
    b626:	4602      	mov	r2, r0
    b628:	687b      	ldr	r3, [r7, #4]
    b62a:	009b      	lsls	r3, r3, #2
    b62c:	f043 0302 	orr.w	r3, r3, #2
    b630:	4619      	mov	r1, r3
    b632:	4610      	mov	r0, r2
    b634:	f003 fd12 	bl	f05c <mp_obj_dict_delete>
}
    b638:	bf00      	nop
    b63a:	3708      	adds	r7, #8
    b63c:	46bd      	mov	sp, r7
    b63e:	bd80      	pop	{r7, pc}

0000b640 <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    b640:	b580      	push	{r7, lr}
    b642:	b088      	sub	sp, #32
    b644:	af00      	add	r7, sp, #0
    b646:	6078      	str	r0, [r7, #4]
    b648:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);

    if (op == MP_UNARY_OP_NOT) {
    b64a:	687b      	ldr	r3, [r7, #4]
    b64c:	2b03      	cmp	r3, #3
    b64e:	d10b      	bne.n	b668 <mp_unary_op+0x28>
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    b650:	6838      	ldr	r0, [r7, #0]
    b652:	f002 f925 	bl	d8a0 <mp_obj_is_true>
    b656:	4603      	mov	r3, r0
    b658:	f083 0301 	eor.w	r3, r3, #1
    b65c:	b2db      	uxtb	r3, r3
    b65e:	4618      	mov	r0, r3
    b660:	f7ff fe7d 	bl	b35e <mp_obj_new_bool>
    b664:	4603      	mov	r3, r0
    b666:	e0c3      	b.n	b7f0 <mp_unary_op+0x1b0>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    b668:	6838      	ldr	r0, [r7, #0]
    b66a:	f7ff fe21 	bl	b2b0 <MP_OBJ_IS_SMALL_INT>
    b66e:	4603      	mov	r3, r0
    b670:	2b00      	cmp	r3, #0
    b672:	d05e      	beq.n	b732 <mp_unary_op+0xf2>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    b674:	683b      	ldr	r3, [r7, #0]
    b676:	105b      	asrs	r3, r3, #1
    b678:	617b      	str	r3, [r7, #20]
        switch (op) {
    b67a:	687b      	ldr	r3, [r7, #4]
    b67c:	2b07      	cmp	r3, #7
    b67e:	d849      	bhi.n	b714 <mp_unary_op+0xd4>
    b680:	a201      	add	r2, pc, #4	; (adr r2, b688 <mp_unary_op+0x48>)
    b682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b686:	bf00      	nop
    b688:	0000b6c3 	.word	0x0000b6c3
    b68c:	0000b6c7 	.word	0x0000b6c7
    b690:	0000b715 	.word	0x0000b715
    b694:	0000b715 	.word	0x0000b715
    b698:	0000b6a9 	.word	0x0000b6a9
    b69c:	0000b715 	.word	0x0000b715
    b6a0:	0000b6bf 	.word	0x0000b6bf
    b6a4:	0000b6e9 	.word	0x0000b6e9
            case MP_UNARY_OP_BOOL:
                return mp_obj_new_bool(val != 0);
    b6a8:	697b      	ldr	r3, [r7, #20]
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	bf14      	ite	ne
    b6ae:	2301      	movne	r3, #1
    b6b0:	2300      	moveq	r3, #0
    b6b2:	b2db      	uxtb	r3, r3
    b6b4:	4618      	mov	r0, r3
    b6b6:	f7ff fe52 	bl	b35e <mp_obj_new_bool>
    b6ba:	4603      	mov	r3, r0
    b6bc:	e098      	b.n	b7f0 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_HASH:
                return arg;
    b6be:	683b      	ldr	r3, [r7, #0]
    b6c0:	e096      	b.n	b7f0 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_POSITIVE:
                return arg;
    b6c2:	683b      	ldr	r3, [r7, #0]
    b6c4:	e094      	b.n	b7f0 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    b6c6:	697b      	ldr	r3, [r7, #20]
    b6c8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b6cc:	d106      	bne.n	b6dc <mp_unary_op+0x9c>
                    return mp_obj_new_int(-val);
    b6ce:	697b      	ldr	r3, [r7, #20]
    b6d0:	425b      	negs	r3, r3
    b6d2:	4618      	mov	r0, r3
    b6d4:	f005 f802 	bl	106dc <mp_obj_new_int>
    b6d8:	4603      	mov	r3, r0
    b6da:	e089      	b.n	b7f0 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b6dc:	697b      	ldr	r3, [r7, #20]
    b6de:	425b      	negs	r3, r3
    b6e0:	005b      	lsls	r3, r3, #1
    b6e2:	f043 0301 	orr.w	r3, r3, #1
    b6e6:	e083      	b.n	b7f0 <mp_unary_op+0x1b0>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    b6e8:	697b      	ldr	r3, [r7, #20]
    b6ea:	2b00      	cmp	r3, #0
    b6ec:	db01      	blt.n	b6f2 <mp_unary_op+0xb2>
                    return arg;
    b6ee:	683b      	ldr	r3, [r7, #0]
    b6f0:	e07e      	b.n	b7f0 <mp_unary_op+0x1b0>
                } else if (val == MP_SMALL_INT_MIN) {
    b6f2:	697b      	ldr	r3, [r7, #20]
    b6f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b6f8:	d106      	bne.n	b708 <mp_unary_op+0xc8>
                    // check for overflow
                    return mp_obj_new_int(-val);
    b6fa:	697b      	ldr	r3, [r7, #20]
    b6fc:	425b      	negs	r3, r3
    b6fe:	4618      	mov	r0, r3
    b700:	f004 ffec 	bl	106dc <mp_obj_new_int>
    b704:	4603      	mov	r3, r0
    b706:	e073      	b.n	b7f0 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b708:	697b      	ldr	r3, [r7, #20]
    b70a:	425b      	negs	r3, r3
    b70c:	005b      	lsls	r3, r3, #1
    b70e:	f043 0301 	orr.w	r3, r3, #1
    b712:	e06d      	b.n	b7f0 <mp_unary_op+0x1b0>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    b714:	687b      	ldr	r3, [r7, #4]
    b716:	2b02      	cmp	r3, #2
    b718:	d005      	beq.n	b726 <mp_unary_op+0xe6>
    b71a:	4b37      	ldr	r3, [pc, #220]	; (b7f8 <mp_unary_op+0x1b8>)
    b71c:	4a37      	ldr	r2, [pc, #220]	; (b7fc <mp_unary_op+0x1bc>)
    b71e:	21f9      	movs	r1, #249	; 0xf9
    b720:	4837      	ldr	r0, [pc, #220]	; (b800 <mp_unary_op+0x1c0>)
    b722:	f00f fd5f 	bl	1b1e4 <__assert_func>
                return MP_OBJ_NEW_SMALL_INT(~val);
    b726:	697b      	ldr	r3, [r7, #20]
    b728:	43db      	mvns	r3, r3
    b72a:	005b      	lsls	r3, r3, #1
    b72c:	f043 0301 	orr.w	r3, r3, #1
    b730:	e05e      	b.n	b7f0 <mp_unary_op+0x1b0>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    b732:	687b      	ldr	r3, [r7, #4]
    b734:	2b06      	cmp	r3, #6
    b736:	d145      	bne.n	b7c4 <mp_unary_op+0x184>
    b738:	6838      	ldr	r0, [r7, #0]
    b73a:	f7ff fdcb 	bl	b2d4 <MP_OBJ_IS_QSTR>
    b73e:	4603      	mov	r3, r0
    b740:	2b00      	cmp	r3, #0
    b742:	d10b      	bne.n	b75c <mp_unary_op+0x11c>
    b744:	6838      	ldr	r0, [r7, #0]
    b746:	f7ff fdd7 	bl	b2f8 <MP_OBJ_IS_OBJ>
    b74a:	4603      	mov	r3, r0
    b74c:	2b00      	cmp	r3, #0
    b74e:	d039      	beq.n	b7c4 <mp_unary_op+0x184>
    b750:	683b      	ldr	r3, [r7, #0]
    b752:	681b      	ldr	r3, [r3, #0]
    b754:	699b      	ldr	r3, [r3, #24]
    b756:	4a2b      	ldr	r2, [pc, #172]	; (b804 <mp_unary_op+0x1c4>)
    b758:	4293      	cmp	r3, r2
    b75a:	d133      	bne.n	b7c4 <mp_unary_op+0x184>
        // fast path for hashing str/bytes
        GET_STR_HASH(arg, h);
    b75c:	6838      	ldr	r0, [r7, #0]
    b75e:	f7ff fdb9 	bl	b2d4 <MP_OBJ_IS_QSTR>
    b762:	4603      	mov	r3, r0
    b764:	2b00      	cmp	r3, #0
    b766:	d006      	beq.n	b776 <mp_unary_op+0x136>
    b768:	683b      	ldr	r3, [r7, #0]
    b76a:	089b      	lsrs	r3, r3, #2
    b76c:	4618      	mov	r0, r3
    b76e:	f7f5 fd23 	bl	11b8 <qstr_hash>
    b772:	61f8      	str	r0, [r7, #28]
    b774:	e002      	b.n	b77c <mp_unary_op+0x13c>
    b776:	683b      	ldr	r3, [r7, #0]
    b778:	685b      	ldr	r3, [r3, #4]
    b77a:	61fb      	str	r3, [r7, #28]
        if (h == 0) {
    b77c:	69fb      	ldr	r3, [r7, #28]
    b77e:	2b00      	cmp	r3, #0
    b780:	d11b      	bne.n	b7ba <mp_unary_op+0x17a>
            GET_STR_DATA_LEN(arg, data, len);
    b782:	6838      	ldr	r0, [r7, #0]
    b784:	f7ff fda6 	bl	b2d4 <MP_OBJ_IS_QSTR>
    b788:	4603      	mov	r3, r0
    b78a:	2b00      	cmp	r3, #0
    b78c:	d009      	beq.n	b7a2 <mp_unary_op+0x162>
    b78e:	683b      	ldr	r3, [r7, #0]
    b790:	089b      	lsrs	r3, r3, #2
    b792:	f107 0208 	add.w	r2, r7, #8
    b796:	4611      	mov	r1, r2
    b798:	4618      	mov	r0, r3
    b79a:	f7f5 fd37 	bl	120c <qstr_data>
    b79e:	61b8      	str	r0, [r7, #24]
    b7a0:	e005      	b.n	b7ae <mp_unary_op+0x16e>
    b7a2:	683b      	ldr	r3, [r7, #0]
    b7a4:	689b      	ldr	r3, [r3, #8]
    b7a6:	60bb      	str	r3, [r7, #8]
    b7a8:	683b      	ldr	r3, [r7, #0]
    b7aa:	68db      	ldr	r3, [r3, #12]
    b7ac:	61bb      	str	r3, [r7, #24]
            h = qstr_compute_hash(data, len);
    b7ae:	68bb      	ldr	r3, [r7, #8]
    b7b0:	4619      	mov	r1, r3
    b7b2:	69b8      	ldr	r0, [r7, #24]
    b7b4:	f7f5 fb30 	bl	e18 <qstr_compute_hash>
    b7b8:	61f8      	str	r0, [r7, #28]
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    b7ba:	69fb      	ldr	r3, [r7, #28]
    b7bc:	005b      	lsls	r3, r3, #1
    b7be:	f043 0301 	orr.w	r3, r3, #1
    b7c2:	e015      	b.n	b7f0 <mp_unary_op+0x1b0>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    b7c4:	6838      	ldr	r0, [r7, #0]
    b7c6:	f001 ff8f 	bl	d6e8 <mp_obj_get_type>
    b7ca:	6138      	str	r0, [r7, #16]
        if (type->unary_op != NULL) {
    b7cc:	693b      	ldr	r3, [r7, #16]
    b7ce:	695b      	ldr	r3, [r3, #20]
    b7d0:	2b00      	cmp	r3, #0
    b7d2:	d00a      	beq.n	b7ea <mp_unary_op+0x1aa>
            mp_obj_t result = type->unary_op(op, arg);
    b7d4:	693b      	ldr	r3, [r7, #16]
    b7d6:	695b      	ldr	r3, [r3, #20]
    b7d8:	6839      	ldr	r1, [r7, #0]
    b7da:	6878      	ldr	r0, [r7, #4]
    b7dc:	4798      	blx	r3
    b7de:	60f8      	str	r0, [r7, #12]
            if (result != MP_OBJ_NULL) {
    b7e0:	68fb      	ldr	r3, [r7, #12]
    b7e2:	2b00      	cmp	r3, #0
    b7e4:	d001      	beq.n	b7ea <mp_unary_op+0x1aa>
                return result;
    b7e6:	68fb      	ldr	r3, [r7, #12]
    b7e8:	e002      	b.n	b7f0 <mp_unary_op+0x1b0>
            }
        }
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("unsupported type for operator");
    b7ea:	4807      	ldr	r0, [pc, #28]	; (b808 <mp_unary_op+0x1c8>)
    b7ec:	f001 fb66 	bl	cebc <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "unsupported type for %q: '%s'",
                mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
        }
    }
}
    b7f0:	4618      	mov	r0, r3
    b7f2:	3720      	adds	r7, #32
    b7f4:	46bd      	mov	sp, r7
    b7f6:	bd80      	pop	{r7, pc}
    b7f8:	00020d24 	.word	0x00020d24
    b7fc:	00020f9c 	.word	0x00020f9c
    b800:	00020d40 	.word	0x00020d40
    b804:	0001254f 	.word	0x0001254f
    b808:	00020d54 	.word	0x00020d54

0000b80c <mp_binary_op>:

mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    b80c:	b590      	push	{r4, r7, lr}
    b80e:	b095      	sub	sp, #84	; 0x54
    b810:	af00      	add	r7, sp, #0
    b812:	60f8      	str	r0, [r7, #12]
    b814:	60b9      	str	r1, [r7, #8]
    b816:	607a      	str	r2, [r7, #4]
    //   then check for implemented seq.concat
    //   then fail
    // note that list does not implement + or +=, so that inplace_concat is reached first for +=

    // deal with is
    if (op == MP_BINARY_OP_IS) {
    b818:	68fb      	ldr	r3, [r7, #12]
    b81a:	2b07      	cmp	r3, #7
    b81c:	d10b      	bne.n	b836 <mp_binary_op+0x2a>
        return mp_obj_new_bool(lhs == rhs);
    b81e:	68ba      	ldr	r2, [r7, #8]
    b820:	687b      	ldr	r3, [r7, #4]
    b822:	429a      	cmp	r2, r3
    b824:	bf0c      	ite	eq
    b826:	2301      	moveq	r3, #1
    b828:	2300      	movne	r3, #0
    b82a:	b2db      	uxtb	r3, r3
    b82c:	4618      	mov	r0, r3
    b82e:	f7ff fd96 	bl	b35e <mp_obj_new_bool>
    b832:	4603      	mov	r3, r0
    b834:	e23d      	b.n	bcb2 <mp_binary_op+0x4a6>
    }

    // deal with == and != for all types
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    b836:	68fb      	ldr	r3, [r7, #12]
    b838:	2b02      	cmp	r3, #2
    b83a:	d002      	beq.n	b842 <mp_binary_op+0x36>
    b83c:	68fb      	ldr	r3, [r7, #12]
    b83e:	2b05      	cmp	r3, #5
    b840:	d114      	bne.n	b86c <mp_binary_op+0x60>
        if (mp_obj_equal(lhs, rhs)) {
    b842:	6879      	ldr	r1, [r7, #4]
    b844:	68b8      	ldr	r0, [r7, #8]
    b846:	f002 f8a1 	bl	d98c <mp_obj_equal>
    b84a:	4603      	mov	r3, r0
    b84c:	2b00      	cmp	r3, #0
    b84e:	d006      	beq.n	b85e <mp_binary_op+0x52>
            if (op == MP_BINARY_OP_EQUAL) {
    b850:	68fb      	ldr	r3, [r7, #12]
    b852:	2b02      	cmp	r3, #2
    b854:	d101      	bne.n	b85a <mp_binary_op+0x4e>
                return mp_const_true;
    b856:	4bb0      	ldr	r3, [pc, #704]	; (bb18 <mp_binary_op+0x30c>)
    b858:	e22b      	b.n	bcb2 <mp_binary_op+0x4a6>
            } else {
                return mp_const_false;
    b85a:	4bb0      	ldr	r3, [pc, #704]	; (bb1c <mp_binary_op+0x310>)
    b85c:	e229      	b.n	bcb2 <mp_binary_op+0x4a6>
            }
        } else {
            if (op == MP_BINARY_OP_EQUAL) {
    b85e:	68fb      	ldr	r3, [r7, #12]
    b860:	2b02      	cmp	r3, #2
    b862:	d101      	bne.n	b868 <mp_binary_op+0x5c>
                return mp_const_false;
    b864:	4bad      	ldr	r3, [pc, #692]	; (bb1c <mp_binary_op+0x310>)
    b866:	e224      	b.n	bcb2 <mp_binary_op+0x4a6>
            } else {
                return mp_const_true;
    b868:	4bab      	ldr	r3, [pc, #684]	; (bb18 <mp_binary_op+0x30c>)
    b86a:	e222      	b.n	bcb2 <mp_binary_op+0x4a6>
            }
        }
    }

    // deal with exception_match for all types
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    b86c:	68fb      	ldr	r3, [r7, #12]
    b86e:	2b08      	cmp	r3, #8
    b870:	d145      	bne.n	b8fe <mp_binary_op+0xf2>
        // rhs must be issubclass(rhs, BaseException)
        if (mp_obj_is_exception_type(rhs)) {
    b872:	6878      	ldr	r0, [r7, #4]
    b874:	f003 fe62 	bl	f53c <mp_obj_is_exception_type>
    b878:	4603      	mov	r3, r0
    b87a:	2b00      	cmp	r3, #0
    b87c:	d00a      	beq.n	b894 <mp_binary_op+0x88>
            if (mp_obj_exception_match(lhs, rhs)) {
    b87e:	6879      	ldr	r1, [r7, #4]
    b880:	68b8      	ldr	r0, [r7, #8]
    b882:	f003 fe93 	bl	f5ac <mp_obj_exception_match>
    b886:	4603      	mov	r3, r0
    b888:	2b00      	cmp	r3, #0
    b88a:	d001      	beq.n	b890 <mp_binary_op+0x84>
                return mp_const_true;
    b88c:	4ba2      	ldr	r3, [pc, #648]	; (bb18 <mp_binary_op+0x30c>)
    b88e:	e210      	b.n	bcb2 <mp_binary_op+0x4a6>
            } else {
                return mp_const_false;
    b890:	4ba2      	ldr	r3, [pc, #648]	; (bb1c <mp_binary_op+0x310>)
    b892:	e20e      	b.n	bcb2 <mp_binary_op+0x4a6>
            }
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    b894:	6878      	ldr	r0, [r7, #4]
    b896:	f7ff fd2f 	bl	b2f8 <MP_OBJ_IS_OBJ>
    b89a:	4603      	mov	r3, r0
    b89c:	2b00      	cmp	r3, #0
    b89e:	f000 81f7 	beq.w	bc90 <mp_binary_op+0x484>
    b8a2:	687b      	ldr	r3, [r7, #4]
    b8a4:	681b      	ldr	r3, [r3, #0]
    b8a6:	4a9e      	ldr	r2, [pc, #632]	; (bb20 <mp_binary_op+0x314>)
    b8a8:	4293      	cmp	r3, r2
    b8aa:	f040 81f1 	bne.w	bc90 <mp_binary_op+0x484>
            mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(rhs);
    b8ae:	687b      	ldr	r3, [r7, #4]
    b8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (size_t i = 0; i < tuple->len; i++) {
    b8b2:	2300      	movs	r3, #0
    b8b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    b8b6:	e01b      	b.n	b8f0 <mp_binary_op+0xe4>
                rhs = tuple->items[i];
    b8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b8bc:	3202      	adds	r2, #2
    b8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b8c2:	607b      	str	r3, [r7, #4]
                if (!mp_obj_is_exception_type(rhs)) {
    b8c4:	6878      	ldr	r0, [r7, #4]
    b8c6:	f003 fe39 	bl	f53c <mp_obj_is_exception_type>
    b8ca:	4603      	mov	r3, r0
    b8cc:	f083 0301 	eor.w	r3, r3, #1
    b8d0:	b2db      	uxtb	r3, r3
    b8d2:	2b00      	cmp	r3, #0
    b8d4:	f040 81de 	bne.w	bc94 <mp_binary_op+0x488>
                    goto unsupported_op;
                }
                if (mp_obj_exception_match(lhs, rhs)) {
    b8d8:	6879      	ldr	r1, [r7, #4]
    b8da:	68b8      	ldr	r0, [r7, #8]
    b8dc:	f003 fe66 	bl	f5ac <mp_obj_exception_match>
    b8e0:	4603      	mov	r3, r0
    b8e2:	2b00      	cmp	r3, #0
    b8e4:	d001      	beq.n	b8ea <mp_binary_op+0xde>
                    return mp_const_true;
    b8e6:	4b8c      	ldr	r3, [pc, #560]	; (bb18 <mp_binary_op+0x30c>)
    b8e8:	e1e3      	b.n	bcb2 <mp_binary_op+0x4a6>
            for (size_t i = 0; i < tuple->len; i++) {
    b8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b8ec:	3301      	adds	r3, #1
    b8ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    b8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8f2:	685a      	ldr	r2, [r3, #4]
    b8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b8f6:	429a      	cmp	r2, r3
    b8f8:	d8de      	bhi.n	b8b8 <mp_binary_op+0xac>
                }
            }
            return mp_const_false;
    b8fa:	4b88      	ldr	r3, [pc, #544]	; (bb1c <mp_binary_op+0x310>)
    b8fc:	e1d9      	b.n	bcb2 <mp_binary_op+0x4a6>
        }
        goto unsupported_op;
    }

    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    b8fe:	68b8      	ldr	r0, [r7, #8]
    b900:	f7ff fcd6 	bl	b2b0 <MP_OBJ_IS_SMALL_INT>
    b904:	4603      	mov	r3, r0
    b906:	2b00      	cmp	r3, #0
    b908:	f000 8186 	beq.w	bc18 <mp_binary_op+0x40c>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    b90c:	68bb      	ldr	r3, [r7, #8]
    b90e:	105b      	asrs	r3, r3, #1
    b910:	64bb      	str	r3, [r7, #72]	; 0x48
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    b912:	6878      	ldr	r0, [r7, #4]
    b914:	f7ff fccc 	bl	b2b0 <MP_OBJ_IS_SMALL_INT>
    b918:	4603      	mov	r3, r0
    b91a:	2b00      	cmp	r3, #0
    b91c:	f000 817c 	beq.w	bc18 <mp_binary_op+0x40c>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    b920:	687b      	ldr	r3, [r7, #4]
    b922:	105b      	asrs	r3, r3, #1
    b924:	647b      	str	r3, [r7, #68]	; 0x44
            //      -       result always fits in mp_int_t, then handled by SMALL_INT check
            //      *       checked explicitly
            //      /       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      %       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      <<      checked explicitly
            switch (op) {
    b926:	68fb      	ldr	r3, [r7, #12]
    b928:	2b21      	cmp	r3, #33	; 0x21
    b92a:	f200 81b5 	bhi.w	bc98 <mp_binary_op+0x48c>
    b92e:	a201      	add	r2, pc, #4	; (adr r2, b934 <mp_binary_op+0x128>)
    b930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b934:	0000bb91 	.word	0x0000bb91
    b938:	0000bba9 	.word	0x0000bba9
    b93c:	0000bc99 	.word	0x0000bc99
    b940:	0000bbc1 	.word	0x0000bbc1
    b944:	0000bbd9 	.word	0x0000bbd9
    b948:	0000bc99 	.word	0x0000bc99
    b94c:	0000bc99 	.word	0x0000bc99
    b950:	0000bc99 	.word	0x0000bc99
    b954:	0000bc99 	.word	0x0000bc99
    b958:	0000b9bd 	.word	0x0000b9bd
    b95c:	0000b9c7 	.word	0x0000b9c7
    b960:	0000b9d1 	.word	0x0000b9d1
    b964:	0000b9db 	.word	0x0000b9db
    b968:	0000ba27 	.word	0x0000ba27
    b96c:	0000ba49 	.word	0x0000ba49
    b970:	0000ba53 	.word	0x0000ba53
    b974:	0000ba5d 	.word	0x0000ba5d
    b978:	0000ba8d 	.word	0x0000ba8d
    b97c:	0000bc99 	.word	0x0000bc99
    b980:	0000baa1 	.word	0x0000baa1
    b984:	0000bab5 	.word	0x0000bab5
    b988:	0000b9bd 	.word	0x0000b9bd
    b98c:	0000b9c7 	.word	0x0000b9c7
    b990:	0000b9d1 	.word	0x0000b9d1
    b994:	0000b9db 	.word	0x0000b9db
    b998:	0000ba27 	.word	0x0000ba27
    b99c:	0000ba49 	.word	0x0000ba49
    b9a0:	0000ba53 	.word	0x0000ba53
    b9a4:	0000ba5d 	.word	0x0000ba5d
    b9a8:	0000ba8d 	.word	0x0000ba8d
    b9ac:	0000bc99 	.word	0x0000bc99
    b9b0:	0000baa1 	.word	0x0000baa1
    b9b4:	0000bab5 	.word	0x0000bab5
    b9b8:	0000bb4f 	.word	0x0000bb4f
                case MP_BINARY_OP_OR:
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    b9bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b9be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9c0:	4313      	orrs	r3, r2
    b9c2:	64bb      	str	r3, [r7, #72]	; 0x48
    b9c4:	e114      	b.n	bbf0 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_XOR:
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    b9c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b9c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9ca:	4053      	eors	r3, r2
    b9cc:	64bb      	str	r3, [r7, #72]	; 0x48
    b9ce:	e10f      	b.n	bbf0 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_AND:
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    b9d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9d4:	4013      	ands	r3, r2
    b9d6:	64bb      	str	r3, [r7, #72]	; 0x48
    b9d8:	e10a      	b.n	bbf0 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_LSHIFT:
                case MP_BINARY_OP_INPLACE_LSHIFT: {
                    if (rhs_val < 0) {
    b9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9dc:	2b00      	cmp	r3, #0
    b9de:	da02      	bge.n	b9e6 <mp_binary_op+0x1da>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    b9e0:	4850      	ldr	r0, [pc, #320]	; (bb24 <mp_binary_op+0x318>)
    b9e2:	f001 fa60 	bl	cea6 <mp_raise_ValueError>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    b9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9e8:	2b1f      	cmp	r3, #31
    b9ea:	dc0d      	bgt.n	ba08 <mp_binary_op+0x1fc>
    b9ec:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    b9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9f2:	411a      	asrs	r2, r3
    b9f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b9f6:	429a      	cmp	r2, r3
    b9f8:	db06      	blt.n	ba08 <mp_binary_op+0x1fc>
    b9fa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    b9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba00:	411a      	asrs	r2, r3
    ba02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba04:	429a      	cmp	r2, r3
    ba06:	dd08      	ble.n	ba1a <mp_binary_op+0x20e>
                        // left-shift will overflow, so use higher precision integer
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    ba08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba0a:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ba0e:	4618      	mov	r0, r3
    ba10:	4621      	mov	r1, r4
    ba12:	f004 fe2d 	bl	10670 <mp_obj_new_int_from_ll>
    ba16:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    ba18:	e109      	b.n	bc2e <mp_binary_op+0x422>
                    } else {
                        // use standard precision
                        lhs_val <<= rhs_val;
    ba1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba1e:	fa02 f303 	lsl.w	r3, r2, r3
    ba22:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    ba24:	e0e4      	b.n	bbf0 <mp_binary_op+0x3e4>
                }
                case MP_BINARY_OP_RSHIFT:
                case MP_BINARY_OP_INPLACE_RSHIFT:
                    if (rhs_val < 0) {
    ba26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba28:	2b00      	cmp	r3, #0
    ba2a:	da02      	bge.n	ba32 <mp_binary_op+0x226>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    ba2c:	483d      	ldr	r0, [pc, #244]	; (bb24 <mp_binary_op+0x318>)
    ba2e:	f001 fa3a 	bl	cea6 <mp_raise_ValueError>
                    } else {
                        // standard precision is enough for right-shift
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    ba32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba34:	2b1f      	cmp	r3, #31
    ba36:	dd01      	ble.n	ba3c <mp_binary_op+0x230>
                            // Shifting to big amounts is underfined behavior
                            // in C and is CPU-dependent; propagate sign bit.
                            rhs_val = BITS_PER_WORD - 1;
    ba38:	231f      	movs	r3, #31
    ba3a:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        lhs_val >>= rhs_val;
    ba3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba40:	fa42 f303 	asr.w	r3, r2, r3
    ba44:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    ba46:	e0d3      	b.n	bbf0 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_ADD:
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    ba48:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba4c:	4413      	add	r3, r2
    ba4e:	64bb      	str	r3, [r7, #72]	; 0x48
    ba50:	e0ce      	b.n	bbf0 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_SUBTRACT:
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    ba52:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba56:	1ad3      	subs	r3, r2, r3
    ba58:	64bb      	str	r3, [r7, #72]	; 0x48
    ba5a:	e0c9      	b.n	bbf0 <mp_binary_op+0x3e4>
                        // use standard precision
                        lhs_val = (mp_int_t)res;
                    }
                    #endif

                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    ba5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    ba5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ba60:	f00f f936 	bl	1acd0 <mp_small_int_mul_overflow>
    ba64:	4603      	mov	r3, r0
    ba66:	2b00      	cmp	r3, #0
    ba68:	d008      	beq.n	ba7c <mp_binary_op+0x270>
                        // use higher precision
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    ba6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba6c:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ba70:	4618      	mov	r0, r3
    ba72:	4621      	mov	r1, r4
    ba74:	f004 fdfc 	bl	10670 <mp_obj_new_int_from_ll>
    ba78:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    ba7a:	e0d8      	b.n	bc2e <mp_binary_op+0x422>
                    } else {
                        // use standard precision
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    ba7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ba80:	fb02 f303 	mul.w	r3, r2, r3
    ba84:	005b      	lsls	r3, r3, #1
    ba86:	f043 0301 	orr.w	r3, r3, #1
    ba8a:	e112      	b.n	bcb2 <mp_binary_op+0x4a6>
                    }
                }
                case MP_BINARY_OP_FLOOR_DIVIDE:
                case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
                    if (rhs_val == 0) {
    ba8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba8e:	2b00      	cmp	r3, #0
    ba90:	f000 8106 	beq.w	bca0 <mp_binary_op+0x494>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    ba94:	6c79      	ldr	r1, [r7, #68]	; 0x44
    ba96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ba98:	f00f f97f 	bl	1ad9a <mp_small_int_floor_divide>
    ba9c:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    ba9e:	e0a7      	b.n	bbf0 <mp_binary_op+0x3e4>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
                #endif

                case MP_BINARY_OP_MODULO:
                case MP_BINARY_OP_INPLACE_MODULO: {
                    if (rhs_val == 0) {
    baa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baa2:	2b00      	cmp	r3, #0
    baa4:	f000 80fe 	beq.w	bca4 <mp_binary_op+0x498>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    baa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
    baaa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    baac:	f00f f950 	bl	1ad50 <mp_small_int_modulo>
    bab0:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bab2:	e09d      	b.n	bbf0 <mp_binary_op+0x3e4>
                }

                case MP_BINARY_OP_POWER:
                case MP_BINARY_OP_INPLACE_POWER:
                    if (rhs_val < 0) {
    bab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bab6:	2b00      	cmp	r3, #0
    bab8:	da02      	bge.n	bac0 <mp_binary_op+0x2b4>
                        #if MICROPY_PY_BUILTINS_FLOAT
                        lhs = mp_obj_new_float(lhs_val);
                        goto generic_binary_op;
                        #else
                        mp_raise_ValueError("negative power with no float support");
    baba:	481b      	ldr	r0, [pc, #108]	; (bb28 <mp_binary_op+0x31c>)
    babc:	f001 f9f3 	bl	cea6 <mp_raise_ValueError>
                        #endif
                    } else {
                        mp_int_t ans = 1;
    bac0:	2301      	movs	r3, #1
    bac2:	643b      	str	r3, [r7, #64]	; 0x40
                        while (rhs_val > 0) {
    bac4:	e024      	b.n	bb10 <mp_binary_op+0x304>
                            if (rhs_val & 1) {
    bac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bac8:	f003 0301 	and.w	r3, r3, #1
    bacc:	2b00      	cmp	r3, #0
    bace:	d00b      	beq.n	bae8 <mp_binary_op+0x2dc>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    bad0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bad2:	6c38      	ldr	r0, [r7, #64]	; 0x40
    bad4:	f00f f8fc 	bl	1acd0 <mp_small_int_mul_overflow>
    bad8:	4603      	mov	r3, r0
    bada:	2b00      	cmp	r3, #0
    badc:	d12a      	bne.n	bb34 <mp_binary_op+0x328>
                                    goto power_overflow;
                                }
                                ans *= lhs_val;
    bade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bae2:	fb02 f303 	mul.w	r3, r2, r3
    bae6:	643b      	str	r3, [r7, #64]	; 0x40
                            }
                            if (rhs_val == 1) {
    bae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baea:	2b01      	cmp	r3, #1
    baec:	d01e      	beq.n	bb2c <mp_binary_op+0x320>
                                break;
                            }
                            rhs_val /= 2;
    baee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baf0:	0fda      	lsrs	r2, r3, #31
    baf2:	4413      	add	r3, r2
    baf4:	105b      	asrs	r3, r3, #1
    baf6:	647b      	str	r3, [r7, #68]	; 0x44
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    baf8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bafa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bafc:	f00f f8e8 	bl	1acd0 <mp_small_int_mul_overflow>
    bb00:	4603      	mov	r3, r0
    bb02:	2b00      	cmp	r3, #0
    bb04:	d118      	bne.n	bb38 <mp_binary_op+0x32c>
                                goto power_overflow;
                            }
                            lhs_val *= lhs_val;
    bb06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb08:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb0a:	fb02 f303 	mul.w	r3, r2, r3
    bb0e:	64bb      	str	r3, [r7, #72]	; 0x48
                        while (rhs_val > 0) {
    bb10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb12:	2b00      	cmp	r3, #0
    bb14:	dcd7      	bgt.n	bac6 <mp_binary_op+0x2ba>
    bb16:	e00a      	b.n	bb2e <mp_binary_op+0x322>
    bb18:	00021310 	.word	0x00021310
    bb1c:	00021308 	.word	0x00021308
    bb20:	00023488 	.word	0x00023488
    bb24:	00020d74 	.word	0x00020d74
    bb28:	00020d8c 	.word	0x00020d8c
                                break;
    bb2c:	bf00      	nop
                        }
                        lhs_val = ans;
    bb2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bb30:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bb32:	e05d      	b.n	bbf0 <mp_binary_op+0x3e4>
                                    goto power_overflow;
    bb34:	bf00      	nop
    bb36:	e000      	b.n	bb3a <mp_binary_op+0x32e>
                                goto power_overflow;
    bb38:	bf00      	nop

                power_overflow:
                    // use higher precision
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    bb3a:	68bb      	ldr	r3, [r7, #8]
    bb3c:	105b      	asrs	r3, r3, #1
    bb3e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bb42:	4618      	mov	r0, r3
    bb44:	4621      	mov	r1, r4
    bb46:	f004 fd93 	bl	10670 <mp_obj_new_int_from_ll>
    bb4a:	60b8      	str	r0, [r7, #8]
                    goto generic_binary_op;
    bb4c:	e06f      	b.n	bc2e <mp_binary_op+0x422>

                case MP_BINARY_OP_DIVMOD: {
                    if (rhs_val == 0) {
    bb4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb50:	2b00      	cmp	r3, #0
    bb52:	f000 80a9 	beq.w	bca8 <mp_binary_op+0x49c>
                        goto zero_division;
                    }
                    // to reduce stack usage we don't pass a temp array of the 2 items
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    bb56:	2100      	movs	r1, #0
    bb58:	2002      	movs	r0, #2
    bb5a:	f009 ff67 	bl	15a2c <mp_obj_new_tuple>
    bb5e:	63b8      	str	r0, [r7, #56]	; 0x38
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    bb60:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb62:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb64:	f00f f919 	bl	1ad9a <mp_small_int_floor_divide>
    bb68:	4603      	mov	r3, r0
    bb6a:	005b      	lsls	r3, r3, #1
    bb6c:	f043 0301 	orr.w	r3, r3, #1
    bb70:	461a      	mov	r2, r3
    bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb74:	609a      	str	r2, [r3, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    bb76:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb78:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb7a:	f00f f8e9 	bl	1ad50 <mp_small_int_modulo>
    bb7e:	4603      	mov	r3, r0
    bb80:	005b      	lsls	r3, r3, #1
    bb82:	f043 0301 	orr.w	r3, r3, #1
    bb86:	461a      	mov	r2, r3
    bb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb8a:	60da      	str	r2, [r3, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    bb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb8e:	e090      	b.n	bcb2 <mp_binary_op+0x4a6>
                }

                case MP_BINARY_OP_LESS: return mp_obj_new_bool(lhs_val < rhs_val);
    bb90:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb94:	429a      	cmp	r2, r3
    bb96:	bfb4      	ite	lt
    bb98:	2301      	movlt	r3, #1
    bb9a:	2300      	movge	r3, #0
    bb9c:	b2db      	uxtb	r3, r3
    bb9e:	4618      	mov	r0, r3
    bba0:	f7ff fbdd 	bl	b35e <mp_obj_new_bool>
    bba4:	4603      	mov	r3, r0
    bba6:	e084      	b.n	bcb2 <mp_binary_op+0x4a6>
                case MP_BINARY_OP_MORE: return mp_obj_new_bool(lhs_val > rhs_val);
    bba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bbaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbac:	429a      	cmp	r2, r3
    bbae:	bfcc      	ite	gt
    bbb0:	2301      	movgt	r3, #1
    bbb2:	2300      	movle	r3, #0
    bbb4:	b2db      	uxtb	r3, r3
    bbb6:	4618      	mov	r0, r3
    bbb8:	f7ff fbd1 	bl	b35e <mp_obj_new_bool>
    bbbc:	4603      	mov	r3, r0
    bbbe:	e078      	b.n	bcb2 <mp_binary_op+0x4a6>
                case MP_BINARY_OP_LESS_EQUAL: return mp_obj_new_bool(lhs_val <= rhs_val);
    bbc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bbc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbc4:	429a      	cmp	r2, r3
    bbc6:	bfd4      	ite	le
    bbc8:	2301      	movle	r3, #1
    bbca:	2300      	movgt	r3, #0
    bbcc:	b2db      	uxtb	r3, r3
    bbce:	4618      	mov	r0, r3
    bbd0:	f7ff fbc5 	bl	b35e <mp_obj_new_bool>
    bbd4:	4603      	mov	r3, r0
    bbd6:	e06c      	b.n	bcb2 <mp_binary_op+0x4a6>
                case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);
    bbd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bbda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbdc:	429a      	cmp	r2, r3
    bbde:	bfac      	ite	ge
    bbe0:	2301      	movge	r3, #1
    bbe2:	2300      	movlt	r3, #0
    bbe4:	b2db      	uxtb	r3, r3
    bbe6:	4618      	mov	r0, r3
    bbe8:	f7ff fbb9 	bl	b35e <mp_obj_new_bool>
    bbec:	4603      	mov	r3, r0
    bbee:	e060      	b.n	bcb2 <mp_binary_op+0x4a6>

                default:
                    goto unsupported_op;
            }
            // This is an inlined version of mp_obj_new_int, for speed
            if (MP_SMALL_INT_FITS(lhs_val)) {
    bbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbf2:	005a      	lsls	r2, r3, #1
    bbf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbf6:	4053      	eors	r3, r2
    bbf8:	2b00      	cmp	r3, #0
    bbfa:	db04      	blt.n	bc06 <mp_binary_op+0x3fa>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    bbfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbfe:	005b      	lsls	r3, r3, #1
    bc00:	f043 0301 	orr.w	r3, r3, #1
    bc04:	e055      	b.n	bcb2 <mp_binary_op+0x4a6>
            } else {
                return mp_obj_new_int_from_ll(lhs_val);
    bc06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bc08:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bc0c:	4618      	mov	r0, r3
    bc0e:	4621      	mov	r1, r4
    bc10:	f004 fd2e 	bl	10670 <mp_obj_new_int_from_ll>
    bc14:	4603      	mov	r3, r0
    bc16:	e04c      	b.n	bcb2 <mp_binary_op+0x4a6>
#endif
        }
    }

    // Convert MP_BINARY_OP_IN to MP_BINARY_OP_CONTAINS with swapped args.
    if (op == MP_BINARY_OP_IN) {
    bc18:	68fb      	ldr	r3, [r7, #12]
    bc1a:	2b06      	cmp	r3, #6
    bc1c:	d107      	bne.n	bc2e <mp_binary_op+0x422>
        op = MP_BINARY_OP_CONTAINS;
    bc1e:	2322      	movs	r3, #34	; 0x22
    bc20:	60fb      	str	r3, [r7, #12]
        mp_obj_t temp = lhs;
    bc22:	68bb      	ldr	r3, [r7, #8]
    bc24:	637b      	str	r3, [r7, #52]	; 0x34
        lhs = rhs;
    bc26:	687b      	ldr	r3, [r7, #4]
    bc28:	60bb      	str	r3, [r7, #8]
        rhs = temp;
    bc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bc2c:	607b      	str	r3, [r7, #4]
    }

    // generic binary_op supplied by type
    mp_obj_type_t *type;
generic_binary_op:
    type = mp_obj_get_type(lhs);
    bc2e:	68b8      	ldr	r0, [r7, #8]
    bc30:	f001 fd5a 	bl	d6e8 <mp_obj_get_type>
    bc34:	6338      	str	r0, [r7, #48]	; 0x30
    if (type->binary_op != NULL) {
    bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc38:	699b      	ldr	r3, [r3, #24]
    bc3a:	2b00      	cmp	r3, #0
    bc3c:	d00b      	beq.n	bc56 <mp_binary_op+0x44a>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc40:	699b      	ldr	r3, [r3, #24]
    bc42:	687a      	ldr	r2, [r7, #4]
    bc44:	68b9      	ldr	r1, [r7, #8]
    bc46:	68f8      	ldr	r0, [r7, #12]
    bc48:	4798      	blx	r3
    bc4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result != MP_OBJ_NULL) {
    bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d001      	beq.n	bc56 <mp_binary_op+0x44a>
            return result;
    bc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc54:	e02d      	b.n	bcb2 <mp_binary_op+0x4a6>
        // Convert __rop__ back to __op__ for error message
        op -= MP_BINARY_OP_REVERSE_OR - MP_BINARY_OP_OR;
    }
#endif

    if (op == MP_BINARY_OP_CONTAINS) {
    bc56:	68fb      	ldr	r3, [r7, #12]
    bc58:	2b22      	cmp	r3, #34	; 0x22
    bc5a:	d11e      	bne.n	bc9a <mp_binary_op+0x48e>
        // If type didn't support containment then explicitly walk the iterator.
        // mp_getiter will raise the appropriate exception if lhs is not iterable.
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    bc5c:	f107 0314 	add.w	r3, r7, #20
    bc60:	4619      	mov	r1, r3
    bc62:	68b8      	ldr	r0, [r7, #8]
    bc64:	f000 fddc 	bl	c820 <mp_getiter>
    bc68:	62b8      	str	r0, [r7, #40]	; 0x28
        mp_obj_t next;
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bc6a:	e008      	b.n	bc7e <mp_binary_op+0x472>
            if (mp_obj_equal(next, rhs)) {
    bc6c:	6879      	ldr	r1, [r7, #4]
    bc6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bc70:	f001 fe8c 	bl	d98c <mp_obj_equal>
    bc74:	4603      	mov	r3, r0
    bc76:	2b00      	cmp	r3, #0
    bc78:	d001      	beq.n	bc7e <mp_binary_op+0x472>
                return mp_const_true;
    bc7a:	4b10      	ldr	r3, [pc, #64]	; (bcbc <mp_binary_op+0x4b0>)
    bc7c:	e019      	b.n	bcb2 <mp_binary_op+0x4a6>
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bc7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bc80:	f000 fe50 	bl	c924 <mp_iternext>
    bc84:	6278      	str	r0, [r7, #36]	; 0x24
    bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bc88:	2b04      	cmp	r3, #4
    bc8a:	d1ef      	bne.n	bc6c <mp_binary_op+0x460>
            }
        }
        return mp_const_false;
    bc8c:	4b0c      	ldr	r3, [pc, #48]	; (bcc0 <mp_binary_op+0x4b4>)
    bc8e:	e010      	b.n	bcb2 <mp_binary_op+0x4a6>
        goto unsupported_op;
    bc90:	bf00      	nop
    bc92:	e002      	b.n	bc9a <mp_binary_op+0x48e>
                    goto unsupported_op;
    bc94:	bf00      	nop
    bc96:	e000      	b.n	bc9a <mp_binary_op+0x48e>
                    goto unsupported_op;
    bc98:	bf00      	nop
    }

unsupported_op:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("unsupported type for operator");
    bc9a:	480a      	ldr	r0, [pc, #40]	; (bcc4 <mp_binary_op+0x4b8>)
    bc9c:	f001 f90e 	bl	cebc <mp_raise_TypeError>
                        goto zero_division;
    bca0:	bf00      	nop
    bca2:	e002      	b.n	bcaa <mp_binary_op+0x49e>
                        goto zero_division;
    bca4:	bf00      	nop
    bca6:	e000      	b.n	bcaa <mp_binary_op+0x49e>
                        goto zero_division;
    bca8:	bf00      	nop
            "unsupported types for %q: '%s', '%s'",
            mp_binary_op_method_name[op], mp_obj_get_type_str(lhs), mp_obj_get_type_str(rhs)));
    }

zero_division:
    mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
    bcaa:	4907      	ldr	r1, [pc, #28]	; (bcc8 <mp_binary_op+0x4bc>)
    bcac:	4807      	ldr	r0, [pc, #28]	; (bccc <mp_binary_op+0x4c0>)
    bcae:	f001 f8e3 	bl	ce78 <mp_raise_msg>
}
    bcb2:	4618      	mov	r0, r3
    bcb4:	3754      	adds	r7, #84	; 0x54
    bcb6:	46bd      	mov	sp, r7
    bcb8:	bd90      	pop	{r4, r7, pc}
    bcba:	bf00      	nop
    bcbc:	00021310 	.word	0x00021310
    bcc0:	00021308 	.word	0x00021308
    bcc4:	00020d54 	.word	0x00020d54
    bcc8:	00020db4 	.word	0x00020db4
    bccc:	00021a98 	.word	0x00021a98

0000bcd0 <mp_call_function_0>:

mp_obj_t mp_call_function_0(mp_obj_t fun) {
    bcd0:	b580      	push	{r7, lr}
    bcd2:	b082      	sub	sp, #8
    bcd4:	af00      	add	r7, sp, #0
    bcd6:	6078      	str	r0, [r7, #4]
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    bcd8:	2300      	movs	r3, #0
    bcda:	2200      	movs	r2, #0
    bcdc:	2100      	movs	r1, #0
    bcde:	6878      	ldr	r0, [r7, #4]
    bce0:	f000 f82b 	bl	bd3a <mp_call_function_n_kw>
    bce4:	4603      	mov	r3, r0
}
    bce6:	4618      	mov	r0, r3
    bce8:	3708      	adds	r7, #8
    bcea:	46bd      	mov	sp, r7
    bcec:	bd80      	pop	{r7, pc}

0000bcee <mp_call_function_1>:

mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    bcee:	b580      	push	{r7, lr}
    bcf0:	b082      	sub	sp, #8
    bcf2:	af00      	add	r7, sp, #0
    bcf4:	6078      	str	r0, [r7, #4]
    bcf6:	6039      	str	r1, [r7, #0]
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    bcf8:	463b      	mov	r3, r7
    bcfa:	2200      	movs	r2, #0
    bcfc:	2101      	movs	r1, #1
    bcfe:	6878      	ldr	r0, [r7, #4]
    bd00:	f000 f81b 	bl	bd3a <mp_call_function_n_kw>
    bd04:	4603      	mov	r3, r0
}
    bd06:	4618      	mov	r0, r3
    bd08:	3708      	adds	r7, #8
    bd0a:	46bd      	mov	sp, r7
    bd0c:	bd80      	pop	{r7, pc}

0000bd0e <mp_call_function_2>:

mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    bd0e:	b580      	push	{r7, lr}
    bd10:	b086      	sub	sp, #24
    bd12:	af00      	add	r7, sp, #0
    bd14:	60f8      	str	r0, [r7, #12]
    bd16:	60b9      	str	r1, [r7, #8]
    bd18:	607a      	str	r2, [r7, #4]
    mp_obj_t args[2];
    args[0] = arg1;
    bd1a:	68bb      	ldr	r3, [r7, #8]
    bd1c:	613b      	str	r3, [r7, #16]
    args[1] = arg2;
    bd1e:	687b      	ldr	r3, [r7, #4]
    bd20:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(fun, 2, 0, args);
    bd22:	f107 0310 	add.w	r3, r7, #16
    bd26:	2200      	movs	r2, #0
    bd28:	2102      	movs	r1, #2
    bd2a:	68f8      	ldr	r0, [r7, #12]
    bd2c:	f000 f805 	bl	bd3a <mp_call_function_n_kw>
    bd30:	4603      	mov	r3, r0
}
    bd32:	4618      	mov	r0, r3
    bd34:	3718      	adds	r7, #24
    bd36:	46bd      	mov	sp, r7
    bd38:	bd80      	pop	{r7, pc}

0000bd3a <mp_call_function_n_kw>:

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    bd3a:	b590      	push	{r4, r7, lr}
    bd3c:	b087      	sub	sp, #28
    bd3e:	af00      	add	r7, sp, #0
    bd40:	60f8      	str	r0, [r7, #12]
    bd42:	60b9      	str	r1, [r7, #8]
    bd44:	607a      	str	r2, [r7, #4]
    bd46:	603b      	str	r3, [r7, #0]
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    bd48:	68f8      	ldr	r0, [r7, #12]
    bd4a:	f001 fccd 	bl	d6e8 <mp_obj_get_type>
    bd4e:	6178      	str	r0, [r7, #20]

    // do the call
    if (type->call != NULL) {
    bd50:	697b      	ldr	r3, [r7, #20]
    bd52:	691b      	ldr	r3, [r3, #16]
    bd54:	2b00      	cmp	r3, #0
    bd56:	d008      	beq.n	bd6a <mp_call_function_n_kw+0x30>
        return type->call(fun_in, n_args, n_kw, args);
    bd58:	697b      	ldr	r3, [r7, #20]
    bd5a:	691c      	ldr	r4, [r3, #16]
    bd5c:	683b      	ldr	r3, [r7, #0]
    bd5e:	687a      	ldr	r2, [r7, #4]
    bd60:	68b9      	ldr	r1, [r7, #8]
    bd62:	68f8      	ldr	r0, [r7, #12]
    bd64:	47a0      	blx	r4
    bd66:	4603      	mov	r3, r0
    bd68:	e002      	b.n	bd70 <mp_call_function_n_kw+0x36>
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not callable");
    bd6a:	4803      	ldr	r0, [pc, #12]	; (bd78 <mp_call_function_n_kw+0x3e>)
    bd6c:	f001 f8a6 	bl	cebc <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not callable", mp_obj_get_type_str(fun_in)));
    }
}
    bd70:	4618      	mov	r0, r3
    bd72:	371c      	adds	r7, #28
    bd74:	46bd      	mov	sp, r7
    bd76:	bd90      	pop	{r4, r7, pc}
    bd78:	00020dc8 	.word	0x00020dc8

0000bd7c <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    bd7c:	b580      	push	{r7, lr}
    bd7e:	b086      	sub	sp, #24
    bd80:	af00      	add	r7, sp, #0
    bd82:	60f8      	str	r0, [r7, #12]
    bd84:	60b9      	str	r1, [r7, #8]
    bd86:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    bd88:	687b      	ldr	r3, [r7, #4]
    bd8a:	3304      	adds	r3, #4
    bd8c:	681b      	ldr	r3, [r3, #0]
    bd8e:	2b00      	cmp	r3, #0
    bd90:	bf14      	ite	ne
    bd92:	2301      	movne	r3, #1
    bd94:	2300      	moveq	r3, #0
    bd96:	b2db      	uxtb	r3, r3
    bd98:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    bd9a:	687b      	ldr	r3, [r7, #4]
    bd9c:	6818      	ldr	r0, [r3, #0]
    bd9e:	697a      	ldr	r2, [r7, #20]
    bda0:	68fb      	ldr	r3, [r7, #12]
    bda2:	18d1      	adds	r1, r2, r3
    bda4:	697a      	ldr	r2, [r7, #20]
    bda6:	4613      	mov	r3, r2
    bda8:	079b      	lsls	r3, r3, #30
    bdaa:	1a9b      	subs	r3, r3, r2
    bdac:	009b      	lsls	r3, r3, #2
    bdae:	3308      	adds	r3, #8
    bdb0:	687a      	ldr	r2, [r7, #4]
    bdb2:	4413      	add	r3, r2
    bdb4:	68ba      	ldr	r2, [r7, #8]
    bdb6:	f7ff ffc0 	bl	bd3a <mp_call_function_n_kw>
    bdba:	4603      	mov	r3, r0
}
    bdbc:	4618      	mov	r0, r3
    bdbe:	3718      	adds	r7, #24
    bdc0:	46bd      	mov	sp, r7
    bdc2:	bd80      	pop	{r7, pc}

0000bdc4 <mp_call_prepare_args_n_kw_var>:

// This function only needs to be exposed externally when in stackless mode.
#if !MICROPY_STACKLESS
STATIC
#endif
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    bdc4:	b580      	push	{r7, lr}
    bdc6:	b0a2      	sub	sp, #136	; 0x88
    bdc8:	af00      	add	r7, sp, #0
    bdca:	60b9      	str	r1, [r7, #8]
    bdcc:	607a      	str	r2, [r7, #4]
    bdce:	603b      	str	r3, [r7, #0]
    bdd0:	4603      	mov	r3, r0
    bdd2:	73fb      	strb	r3, [r7, #15]
    mp_obj_t fun = *args++;
    bdd4:	687b      	ldr	r3, [r7, #4]
    bdd6:	1d1a      	adds	r2, r3, #4
    bdd8:	607a      	str	r2, [r7, #4]
    bdda:	681b      	ldr	r3, [r3, #0]
    bddc:	663b      	str	r3, [r7, #96]	; 0x60
    mp_obj_t self = MP_OBJ_NULL;
    bdde:	2300      	movs	r3, #0
    bde0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (have_self) {
    bde4:	7bfb      	ldrb	r3, [r7, #15]
    bde6:	2b00      	cmp	r3, #0
    bde8:	d005      	beq.n	bdf6 <mp_call_prepare_args_n_kw_var+0x32>
        self = *args++; // may be MP_OBJ_NULL
    bdea:	687b      	ldr	r3, [r7, #4]
    bdec:	1d1a      	adds	r2, r3, #4
    bdee:	607a      	str	r2, [r7, #4]
    bdf0:	681b      	ldr	r3, [r3, #0]
    bdf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    uint n_args = n_args_n_kw & 0xff;
    bdf6:	68bb      	ldr	r3, [r7, #8]
    bdf8:	b2db      	uxtb	r3, r3
    bdfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    bdfc:	68bb      	ldr	r3, [r7, #8]
    bdfe:	0a1b      	lsrs	r3, r3, #8
    be00:	b2db      	uxtb	r3, r3
    be02:	65bb      	str	r3, [r7, #88]	; 0x58
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    be04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    be06:	005a      	lsls	r2, r3, #1
    be08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be0a:	4413      	add	r3, r2
    be0c:	009b      	lsls	r3, r3, #2
    be0e:	687a      	ldr	r2, [r7, #4]
    be10:	4413      	add	r3, r2
    be12:	681b      	ldr	r3, [r3, #0]
    be14:	657b      	str	r3, [r7, #84]	; 0x54
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    be16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    be18:	005a      	lsls	r2, r3, #1
    be1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be1c:	4413      	add	r3, r2
    be1e:	3301      	adds	r3, #1
    be20:	009b      	lsls	r3, r3, #2
    be22:	687a      	ldr	r2, [r7, #4]
    be24:	4413      	add	r3, r2
    be26:	681b      	ldr	r3, [r3, #0]
    be28:	653b      	str	r3, [r7, #80]	; 0x50
    // TODO: optimize one day to avoid constructing new arg array? Will be hard.

    // The new args array
    mp_obj_t *args2;
    uint args2_alloc;
    uint args2_len = 0;
    be2a:	2300      	movs	r3, #0
    be2c:	67bb      	str	r3, [r7, #120]	; 0x78

    // Try to get a hint for the size of the kw_dict
    uint kw_dict_len = 0;
    be2e:	2300      	movs	r3, #0
    be30:	677b      	str	r3, [r7, #116]	; 0x74
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    be32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    be34:	2b00      	cmp	r3, #0
    be36:	d00e      	beq.n	be56 <mp_call_prepare_args_n_kw_var+0x92>
    be38:	6d38      	ldr	r0, [r7, #80]	; 0x50
    be3a:	f7ff fa5d 	bl	b2f8 <MP_OBJ_IS_OBJ>
    be3e:	4603      	mov	r3, r0
    be40:	2b00      	cmp	r3, #0
    be42:	d008      	beq.n	be56 <mp_call_prepare_args_n_kw_var+0x92>
    be44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    be46:	681b      	ldr	r3, [r3, #0]
    be48:	4ab0      	ldr	r2, [pc, #704]	; (c10c <mp_call_prepare_args_n_kw_var+0x348>)
    be4a:	4293      	cmp	r3, r2
    be4c:	d103      	bne.n	be56 <mp_call_prepare_args_n_kw_var+0x92>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    be4e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    be50:	f003 f8bf 	bl	efd2 <mp_obj_dict_len>
    be54:	6778      	str	r0, [r7, #116]	; 0x74
    }

    // Extract the pos_seq sequence to the new args array.
    // Note that it can be arbitrary iterator.
    if (pos_seq == MP_OBJ_NULL) {
    be56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    be58:	2b00      	cmp	r3, #0
    be5a:	d12c      	bne.n	beb6 <mp_call_prepare_args_n_kw_var+0xf2>
        // no sequence

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    be5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
    be5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    be60:	4413      	add	r3, r2
    be62:	005a      	lsls	r2, r3, #1
    be64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be66:	4413      	add	r3, r2
    be68:	3301      	adds	r3, #1
    be6a:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    be6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    be6e:	009b      	lsls	r3, r3, #2
    be70:	4618      	mov	r0, r3
    be72:	f7ff faab 	bl	b3cc <mp_nonlocal_alloc>
    be76:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    be7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    be7e:	2b00      	cmp	r3, #0
    be80:	d009      	beq.n	be96 <mp_call_prepare_args_n_kw_var+0xd2>
            args2[args2_len++] = self;
    be82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    be84:	1c5a      	adds	r2, r3, #1
    be86:	67ba      	str	r2, [r7, #120]	; 0x78
    be88:	009b      	lsls	r3, r3, #2
    be8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    be8e:	4413      	add	r3, r2
    be90:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    be94:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed pos args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    be96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    be98:	009b      	lsls	r3, r3, #2
    be9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    be9e:	18d0      	adds	r0, r2, r3
    bea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bea2:	009b      	lsls	r3, r3, #2
    bea4:	461a      	mov	r2, r3
    bea6:	6879      	ldr	r1, [r7, #4]
    bea8:	f010 fb5a 	bl	1c560 <memcpy>
        args2_len += n_args;
    beac:	6fba      	ldr	r2, [r7, #120]	; 0x78
    beae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    beb0:	4413      	add	r3, r2
    beb2:	67bb      	str	r3, [r7, #120]	; 0x78
    beb4:	e0b1      	b.n	c01a <mp_call_prepare_args_n_kw_var+0x256>

    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    beb6:	6d78      	ldr	r0, [r7, #84]	; 0x54
    beb8:	f7ff fa1e 	bl	b2f8 <MP_OBJ_IS_OBJ>
    bebc:	4603      	mov	r3, r0
    bebe:	2b00      	cmp	r3, #0
    bec0:	d004      	beq.n	becc <mp_call_prepare_args_n_kw_var+0x108>
    bec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bec4:	681b      	ldr	r3, [r3, #0]
    bec6:	4a92      	ldr	r2, [pc, #584]	; (c110 <mp_call_prepare_args_n_kw_var+0x34c>)
    bec8:	4293      	cmp	r3, r2
    beca:	d00a      	beq.n	bee2 <mp_call_prepare_args_n_kw_var+0x11e>
    becc:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bece:	f7ff fa13 	bl	b2f8 <MP_OBJ_IS_OBJ>
    bed2:	4603      	mov	r3, r0
    bed4:	2b00      	cmp	r3, #0
    bed6:	d04a      	beq.n	bf6e <mp_call_prepare_args_n_kw_var+0x1aa>
    bed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    beda:	681b      	ldr	r3, [r3, #0]
    bedc:	4a8d      	ldr	r2, [pc, #564]	; (c114 <mp_call_prepare_args_n_kw_var+0x350>)
    bede:	4293      	cmp	r3, r2
    bee0:	d145      	bne.n	bf6e <mp_call_prepare_args_n_kw_var+0x1aa>
        // optimise the case of a tuple and list

        // get the items
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(pos_seq, &len, &items);
    bee2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    bee6:	f107 0334 	add.w	r3, r7, #52	; 0x34
    beea:	4619      	mov	r1, r3
    beec:	6d78      	ldr	r0, [r7, #84]	; 0x54
    beee:	f001 fe73 	bl	dbd8 <mp_obj_get_array>

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    bef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bef6:	441a      	add	r2, r3
    bef8:	6db9      	ldr	r1, [r7, #88]	; 0x58
    befa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    befc:	440b      	add	r3, r1
    befe:	005b      	lsls	r3, r3, #1
    bf00:	4413      	add	r3, r2
    bf02:	3301      	adds	r3, #1
    bf04:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bf06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bf08:	009b      	lsls	r3, r3, #2
    bf0a:	4618      	mov	r0, r3
    bf0c:	f7ff fa5e 	bl	b3cc <mp_nonlocal_alloc>
    bf10:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bf14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bf18:	2b00      	cmp	r3, #0
    bf1a:	d009      	beq.n	bf30 <mp_call_prepare_args_n_kw_var+0x16c>
            args2[args2_len++] = self;
    bf1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf1e:	1c5a      	adds	r2, r3, #1
    bf20:	67ba      	str	r2, [r7, #120]	; 0x78
    bf22:	009b      	lsls	r3, r3, #2
    bf24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf28:	4413      	add	r3, r2
    bf2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bf2e:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed and variable position args
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    bf30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf32:	009b      	lsls	r3, r3, #2
    bf34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf38:	18d0      	adds	r0, r2, r3
    bf3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf3c:	009b      	lsls	r3, r3, #2
    bf3e:	461a      	mov	r2, r3
    bf40:	6879      	ldr	r1, [r7, #4]
    bf42:	f010 fb0d 	bl	1c560 <memcpy>
    bf46:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bf48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf4a:	4413      	add	r3, r2
    bf4c:	009b      	lsls	r3, r3, #2
    bf4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf52:	18d0      	adds	r0, r2, r3
    bf54:	6b39      	ldr	r1, [r7, #48]	; 0x30
    bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bf58:	009b      	lsls	r3, r3, #2
    bf5a:	461a      	mov	r2, r3
    bf5c:	f010 fb00 	bl	1c560 <memcpy>
        args2_len += n_args + len;
    bf60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bf62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf64:	4413      	add	r3, r2
    bf66:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bf68:	4413      	add	r3, r2
    bf6a:	67bb      	str	r3, [r7, #120]	; 0x78
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    bf6c:	e055      	b.n	c01a <mp_call_prepare_args_n_kw_var+0x256>

    } else {
        // generic iterator

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    bf6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bf70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bf72:	4413      	add	r3, r2
    bf74:	005a      	lsls	r2, r3, #1
    bf76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf78:	4413      	add	r3, r2
    bf7a:	3304      	adds	r3, #4
    bf7c:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bf7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bf80:	009b      	lsls	r3, r3, #2
    bf82:	4618      	mov	r0, r3
    bf84:	f7ff fa22 	bl	b3cc <mp_nonlocal_alloc>
    bf88:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bf8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bf90:	2b00      	cmp	r3, #0
    bf92:	d009      	beq.n	bfa8 <mp_call_prepare_args_n_kw_var+0x1e4>
            args2[args2_len++] = self;
    bf94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf96:	1c5a      	adds	r2, r3, #1
    bf98:	67ba      	str	r2, [r7, #120]	; 0x78
    bf9a:	009b      	lsls	r3, r3, #2
    bf9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfa0:	4413      	add	r3, r2
    bfa2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bfa6:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed position args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    bfa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bfaa:	009b      	lsls	r3, r3, #2
    bfac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfb0:	18d0      	adds	r0, r2, r3
    bfb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfb4:	009b      	lsls	r3, r3, #2
    bfb6:	461a      	mov	r2, r3
    bfb8:	6879      	ldr	r1, [r7, #4]
    bfba:	f010 fad1 	bl	1c560 <memcpy>
        args2_len += n_args;
    bfbe:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bfc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfc2:	4413      	add	r3, r2
    bfc4:	67bb      	str	r3, [r7, #120]	; 0x78

        // extract the variable position args from the iterator
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    bfc6:	f107 0320 	add.w	r3, r7, #32
    bfca:	4619      	mov	r1, r3
    bfcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bfce:	f000 fc27 	bl	c820 <mp_getiter>
    bfd2:	64f8      	str	r0, [r7, #76]	; 0x4c
        mp_obj_t item;
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    bfd4:	e01a      	b.n	c00c <mp_call_prepare_args_n_kw_var+0x248>
            if (args2_len >= args2_alloc) {
    bfd6:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bfd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfda:	429a      	cmp	r2, r3
    bfdc:	d30d      	bcc.n	bffa <mp_call_prepare_args_n_kw_var+0x236>
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), args2_alloc * 2 * sizeof(mp_obj_t));
    bfde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfe0:	0099      	lsls	r1, r3, #2
    bfe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfe4:	00db      	lsls	r3, r3, #3
    bfe6:	461a      	mov	r2, r3
    bfe8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    bfec:	f7ff f9fa 	bl	b3e4 <mp_nonlocal_realloc>
    bff0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc *= 2;
    bff4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bff6:	005b      	lsls	r3, r3, #1
    bff8:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            args2[args2_len++] = item;
    bffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bffc:	1c5a      	adds	r2, r3, #1
    bffe:	67ba      	str	r2, [r7, #120]	; 0x78
    c000:	009b      	lsls	r3, r3, #2
    c002:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c006:	4413      	add	r3, r2
    c008:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c00a:	601a      	str	r2, [r3, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c00c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c00e:	f000 fc89 	bl	c924 <mp_iternext>
    c012:	64b8      	str	r0, [r7, #72]	; 0x48
    c014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c016:	2b04      	cmp	r3, #4
    c018:	d1dd      	bne.n	bfd6 <mp_call_prepare_args_n_kw_var+0x212>
        }
    }

    // The size of the args2 array now is the number of positional args.
    uint pos_args_len = args2_len;
    c01a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c01c:	647b      	str	r3, [r7, #68]	; 0x44

    // Copy the fixed kw args.
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    c01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c020:	009b      	lsls	r3, r3, #2
    c022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c026:	18d0      	adds	r0, r2, r3
    c028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c02a:	009b      	lsls	r3, r3, #2
    c02c:	687a      	ldr	r2, [r7, #4]
    c02e:	18d1      	adds	r1, r2, r3
    c030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c032:	00db      	lsls	r3, r3, #3
    c034:	461a      	mov	r2, r3
    c036:	f010 fa93 	bl	1c560 <memcpy>
    args2_len += 2 * n_kw;
    c03a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c03c:	005b      	lsls	r3, r3, #1
    c03e:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c040:	4413      	add	r3, r2
    c042:	67bb      	str	r3, [r7, #120]	; 0x78

    // Extract (key,value) pairs from kw_dict dictionary and append to args2.
    // Note that it can be arbitrary iterator.
    if (kw_dict == MP_OBJ_NULL) {
    c044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c046:	2b00      	cmp	r3, #0
    c048:	f000 80d3 	beq.w	c1f2 <mp_call_prepare_args_n_kw_var+0x42e>
        // pass
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c04c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c04e:	f7ff f953 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c052:	4603      	mov	r3, r0
    c054:	2b00      	cmp	r3, #0
    c056:	d065      	beq.n	c124 <mp_call_prepare_args_n_kw_var+0x360>
    c058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c05a:	681b      	ldr	r3, [r3, #0]
    c05c:	4a2b      	ldr	r2, [pc, #172]	; (c10c <mp_call_prepare_args_n_kw_var+0x348>)
    c05e:	4293      	cmp	r3, r2
    c060:	d160      	bne.n	c124 <mp_call_prepare_args_n_kw_var+0x360>
        // dictionary
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    c062:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c064:	f7ff f990 	bl	b388 <mp_obj_dict_get_map>
    c068:	6438      	str	r0, [r7, #64]	; 0x40
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    c06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c06c:	681b      	ldr	r3, [r3, #0]
    c06e:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c072:	005b      	lsls	r3, r3, #1
    c074:	461a      	mov	r2, r3
    c076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c078:	441a      	add	r2, r3
    c07a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c07c:	429a      	cmp	r2, r3
    c07e:	d906      	bls.n	c08e <mp_call_prepare_args_n_kw_var+0x2ca>
    c080:	4b25      	ldr	r3, [pc, #148]	; (c118 <mp_call_prepare_args_n_kw_var+0x354>)
    c082:	4a26      	ldr	r2, [pc, #152]	; (c11c <mp_call_prepare_args_n_kw_var+0x358>)
    c084:	f240 21eb 	movw	r1, #747	; 0x2eb
    c088:	4825      	ldr	r0, [pc, #148]	; (c120 <mp_call_prepare_args_n_kw_var+0x35c>)
    c08a:	f00f f8ab 	bl	1b1e4 <__assert_func>
        for (size_t i = 0; i < map->alloc; i++) {
    c08e:	2300      	movs	r3, #0
    c090:	673b      	str	r3, [r7, #112]	; 0x70
    c092:	e034      	b.n	c0fe <mp_call_prepare_args_n_kw_var+0x33a>
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c094:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c096:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c098:	f7ff f940 	bl	b31c <MP_MAP_SLOT_IS_FILLED>
    c09c:	4603      	mov	r3, r0
    c09e:	2b00      	cmp	r3, #0
    c0a0:	d02a      	beq.n	c0f8 <mp_call_prepare_args_n_kw_var+0x334>
                // the key must be a qstr, so intern it if it's a string
                mp_obj_t key = map->table[i].key;
    c0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c0a4:	689a      	ldr	r2, [r3, #8]
    c0a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c0a8:	00db      	lsls	r3, r3, #3
    c0aa:	4413      	add	r3, r2
    c0ac:	681b      	ldr	r3, [r3, #0]
    c0ae:	66fb      	str	r3, [r7, #108]	; 0x6c
                if (!MP_OBJ_IS_QSTR(key)) {
    c0b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c0b2:	f7ff f90f 	bl	b2d4 <MP_OBJ_IS_QSTR>
    c0b6:	4603      	mov	r3, r0
    c0b8:	f083 0301 	eor.w	r3, r3, #1
    c0bc:	b2db      	uxtb	r3, r3
    c0be:	2b00      	cmp	r3, #0
    c0c0:	d003      	beq.n	c0ca <mp_call_prepare_args_n_kw_var+0x306>
                    key = mp_obj_str_intern_checked(key);
    c0c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c0c4:	f008 fffa 	bl	150bc <mp_obj_str_intern_checked>
    c0c8:	66f8      	str	r0, [r7, #108]	; 0x6c
                }
                args2[args2_len++] = key;
    c0ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0cc:	1c5a      	adds	r2, r3, #1
    c0ce:	67ba      	str	r2, [r7, #120]	; 0x78
    c0d0:	009b      	lsls	r3, r3, #2
    c0d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0d6:	4413      	add	r3, r2
    c0d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    c0da:	601a      	str	r2, [r3, #0]
                args2[args2_len++] = map->table[i].value;
    c0dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0de:	1c5a      	adds	r2, r3, #1
    c0e0:	67ba      	str	r2, [r7, #120]	; 0x78
    c0e2:	009b      	lsls	r3, r3, #2
    c0e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0e8:	4413      	add	r3, r2
    c0ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c0ec:	6891      	ldr	r1, [r2, #8]
    c0ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c0f0:	00d2      	lsls	r2, r2, #3
    c0f2:	440a      	add	r2, r1
    c0f4:	6852      	ldr	r2, [r2, #4]
    c0f6:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < map->alloc; i++) {
    c0f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c0fa:	3301      	adds	r3, #1
    c0fc:	673b      	str	r3, [r7, #112]	; 0x70
    c0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c100:	685a      	ldr	r2, [r3, #4]
    c102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c104:	429a      	cmp	r2, r3
    c106:	d8c5      	bhi.n	c094 <mp_call_prepare_args_n_kw_var+0x2d0>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c108:	e073      	b.n	c1f2 <mp_call_prepare_args_n_kw_var+0x42e>
    c10a:	bf00      	nop
    c10c:	000217b4 	.word	0x000217b4
    c110:	00023488 	.word	0x00023488
    c114:	0002287c 	.word	0x0002287c
    c118:	00020ddc 	.word	0x00020ddc
    c11c:	00020fa8 	.word	0x00020fa8
    c120:	00020d40 	.word	0x00020d40
        // - call keys() to get an iterable of all keys in the mapping
        // - call __getitem__ for each key to get the corresponding value

        // get the keys iterable
        mp_obj_t dest[3];
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    c124:	f107 0314 	add.w	r3, r7, #20
    c128:	461a      	mov	r2, r3
    c12a:	f240 112d 	movw	r1, #301	; 0x12d
    c12e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c130:	f000 fafe 	bl	c730 <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    c134:	f107 0314 	add.w	r3, r7, #20
    c138:	461a      	mov	r2, r3
    c13a:	2100      	movs	r1, #0
    c13c:	2000      	movs	r0, #0
    c13e:	f7ff fe1d 	bl	bd7c <mp_call_method_n_kw>
    c142:	4603      	mov	r3, r0
    c144:	2100      	movs	r1, #0
    c146:	4618      	mov	r0, r3
    c148:	f000 fb6a 	bl	c820 <mp_getiter>
    c14c:	63f8      	str	r0, [r7, #60]	; 0x3c

        mp_obj_t key;
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c14e:	e049      	b.n	c1e4 <mp_call_prepare_args_n_kw_var+0x420>
            // expand size of args array if needed
            if (args2_len + 1 >= args2_alloc) {
    c150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c152:	1c5a      	adds	r2, r3, #1
    c154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c156:	429a      	cmp	r2, r3
    c158:	d314      	bcc.n	c184 <mp_call_prepare_args_n_kw_var+0x3c0>
                uint new_alloc = args2_alloc * 2;
    c15a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c15c:	005b      	lsls	r3, r3, #1
    c15e:	667b      	str	r3, [r7, #100]	; 0x64
                if (new_alloc < 4) {
    c160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c162:	2b03      	cmp	r3, #3
    c164:	d801      	bhi.n	c16a <mp_call_prepare_args_n_kw_var+0x3a6>
                    new_alloc = 4;
    c166:	2304      	movs	r3, #4
    c168:	667b      	str	r3, [r7, #100]	; 0x64
                }
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), new_alloc * sizeof(mp_obj_t));
    c16a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c16c:	0099      	lsls	r1, r3, #2
    c16e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c170:	009b      	lsls	r3, r3, #2
    c172:	461a      	mov	r2, r3
    c174:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c178:	f7ff f934 	bl	b3e4 <mp_nonlocal_realloc>
    c17c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc = new_alloc;
    c180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c182:	67fb      	str	r3, [r7, #124]	; 0x7c
            }

            // the key must be a qstr, so intern it if it's a string
            if (!MP_OBJ_IS_QSTR(key)) {
    c184:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c186:	f7ff f8a5 	bl	b2d4 <MP_OBJ_IS_QSTR>
    c18a:	4603      	mov	r3, r0
    c18c:	f083 0301 	eor.w	r3, r3, #1
    c190:	b2db      	uxtb	r3, r3
    c192:	2b00      	cmp	r3, #0
    c194:	d003      	beq.n	c19e <mp_call_prepare_args_n_kw_var+0x3da>
                key = mp_obj_str_intern_checked(key);
    c196:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c198:	f008 ff90 	bl	150bc <mp_obj_str_intern_checked>
    c19c:	66b8      	str	r0, [r7, #104]	; 0x68
            }

            // get the value corresponding to the key
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    c19e:	f107 0314 	add.w	r3, r7, #20
    c1a2:	461a      	mov	r2, r3
    c1a4:	210e      	movs	r1, #14
    c1a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c1a8:	f000 fac2 	bl	c730 <mp_load_method>
            dest[2] = key;
    c1ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c1ae:	61fb      	str	r3, [r7, #28]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    c1b0:	f107 0314 	add.w	r3, r7, #20
    c1b4:	461a      	mov	r2, r3
    c1b6:	2100      	movs	r1, #0
    c1b8:	2001      	movs	r0, #1
    c1ba:	f7ff fddf 	bl	bd7c <mp_call_method_n_kw>
    c1be:	63b8      	str	r0, [r7, #56]	; 0x38

            // store the key/value pair in the argument array
            args2[args2_len++] = key;
    c1c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1c2:	1c5a      	adds	r2, r3, #1
    c1c4:	67ba      	str	r2, [r7, #120]	; 0x78
    c1c6:	009b      	lsls	r3, r3, #2
    c1c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1cc:	4413      	add	r3, r2
    c1ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c1d0:	601a      	str	r2, [r3, #0]
            args2[args2_len++] = value;
    c1d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1d4:	1c5a      	adds	r2, r3, #1
    c1d6:	67ba      	str	r2, [r7, #120]	; 0x78
    c1d8:	009b      	lsls	r3, r3, #2
    c1da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1de:	4413      	add	r3, r2
    c1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c1e2:	601a      	str	r2, [r3, #0]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c1e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c1e6:	f000 fb9d 	bl	c924 <mp_iternext>
    c1ea:	66b8      	str	r0, [r7, #104]	; 0x68
    c1ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c1ee:	2b04      	cmp	r3, #4
    c1f0:	d1ae      	bne.n	c150 <mp_call_prepare_args_n_kw_var+0x38c>
        }
    }

    out_args->fun = fun;
    c1f2:	683b      	ldr	r3, [r7, #0]
    c1f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c1f6:	601a      	str	r2, [r3, #0]
    out_args->args = args2;
    c1f8:	683b      	ldr	r3, [r7, #0]
    c1fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1fe:	611a      	str	r2, [r3, #16]
    out_args->n_args = pos_args_len;
    c200:	683b      	ldr	r3, [r7, #0]
    c202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c204:	605a      	str	r2, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    c206:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c20a:	1ad3      	subs	r3, r2, r3
    c20c:	085a      	lsrs	r2, r3, #1
    c20e:	683b      	ldr	r3, [r7, #0]
    c210:	609a      	str	r2, [r3, #8]
    out_args->n_alloc = args2_alloc;
    c212:	683b      	ldr	r3, [r7, #0]
    c214:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    c216:	60da      	str	r2, [r3, #12]
}
    c218:	bf00      	nop
    c21a:	3788      	adds	r7, #136	; 0x88
    c21c:	46bd      	mov	sp, r7
    c21e:	bd80      	pop	{r7, pc}

0000c220 <mp_call_method_n_kw_var>:

mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    c220:	b580      	push	{r7, lr}
    c222:	b08a      	sub	sp, #40	; 0x28
    c224:	af00      	add	r7, sp, #0
    c226:	4603      	mov	r3, r0
    c228:	60b9      	str	r1, [r7, #8]
    c22a:	607a      	str	r2, [r7, #4]
    c22c:	73fb      	strb	r3, [r7, #15]
    mp_call_args_t out_args;
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    c22e:	f107 0310 	add.w	r3, r7, #16
    c232:	7bf8      	ldrb	r0, [r7, #15]
    c234:	687a      	ldr	r2, [r7, #4]
    c236:	68b9      	ldr	r1, [r7, #8]
    c238:	f7ff fdc4 	bl	bdc4 <mp_call_prepare_args_n_kw_var>

    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    c23c:	6938      	ldr	r0, [r7, #16]
    c23e:	6979      	ldr	r1, [r7, #20]
    c240:	69ba      	ldr	r2, [r7, #24]
    c242:	6a3b      	ldr	r3, [r7, #32]
    c244:	f7ff fd79 	bl	bd3a <mp_call_function_n_kw>
    c248:	6278      	str	r0, [r7, #36]	; 0x24
    mp_nonlocal_free(out_args.args, out_args.n_alloc * sizeof(mp_obj_t));
    c24a:	6a3a      	ldr	r2, [r7, #32]
    c24c:	69fb      	ldr	r3, [r7, #28]
    c24e:	009b      	lsls	r3, r3, #2
    c250:	4619      	mov	r1, r3
    c252:	4610      	mov	r0, r2
    c254:	f7ff f8d5 	bl	b402 <mp_nonlocal_free>

    return res;
    c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c25a:	4618      	mov	r0, r3
    c25c:	3728      	adds	r7, #40	; 0x28
    c25e:	46bd      	mov	sp, r7
    c260:	bd80      	pop	{r7, pc}

0000c262 <mp_unpack_sequence>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    c262:	b580      	push	{r7, lr}
    c264:	b08e      	sub	sp, #56	; 0x38
    c266:	af00      	add	r7, sp, #0
    c268:	60f8      	str	r0, [r7, #12]
    c26a:	60b9      	str	r1, [r7, #8]
    c26c:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c26e:	68f8      	ldr	r0, [r7, #12]
    c270:	f7ff f842 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c274:	4603      	mov	r3, r0
    c276:	2b00      	cmp	r3, #0
    c278:	d004      	beq.n	c284 <mp_unpack_sequence+0x22>
    c27a:	68fb      	ldr	r3, [r7, #12]
    c27c:	681b      	ldr	r3, [r3, #0]
    c27e:	4a38      	ldr	r2, [pc, #224]	; (c360 <mp_unpack_sequence+0xfe>)
    c280:	4293      	cmp	r3, r2
    c282:	d00a      	beq.n	c29a <mp_unpack_sequence+0x38>
    c284:	68f8      	ldr	r0, [r7, #12]
    c286:	f7ff f837 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c28a:	4603      	mov	r3, r0
    c28c:	2b00      	cmp	r3, #0
    c28e:	d02e      	beq.n	c2ee <mp_unpack_sequence+0x8c>
    c290:	68fb      	ldr	r3, [r7, #12]
    c292:	681b      	ldr	r3, [r3, #0]
    c294:	4a33      	ldr	r2, [pc, #204]	; (c364 <mp_unpack_sequence+0x102>)
    c296:	4293      	cmp	r3, r2
    c298:	d129      	bne.n	c2ee <mp_unpack_sequence+0x8c>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c29a:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c29e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c2a2:	4619      	mov	r1, r3
    c2a4:	68f8      	ldr	r0, [r7, #12]
    c2a6:	f001 fc97 	bl	dbd8 <mp_obj_get_array>
        if (seq_len < num) {
    c2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c2ac:	68bb      	ldr	r3, [r7, #8]
    c2ae:	429a      	cmp	r2, r3
    c2b0:	d348      	bcc.n	c344 <mp_unpack_sequence+0xe2>
            goto too_short;
        } else if (seq_len > num) {
    c2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c2b4:	68bb      	ldr	r3, [r7, #8]
    c2b6:	429a      	cmp	r2, r3
    c2b8:	d84a      	bhi.n	c350 <mp_unpack_sequence+0xee>
            goto too_long;
        }
        for (size_t i = 0; i < num; i++) {
    c2ba:	2300      	movs	r3, #0
    c2bc:	637b      	str	r3, [r7, #52]	; 0x34
    c2be:	e011      	b.n	c2e4 <mp_unpack_sequence+0x82>
            items[i] = seq_items[num - 1 - i];
    c2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c2c2:	009b      	lsls	r3, r3, #2
    c2c4:	687a      	ldr	r2, [r7, #4]
    c2c6:	441a      	add	r2, r3
    c2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c2ca:	68b8      	ldr	r0, [r7, #8]
    c2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c2ce:	1ac3      	subs	r3, r0, r3
    c2d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c2d4:	3b01      	subs	r3, #1
    c2d6:	009b      	lsls	r3, r3, #2
    c2d8:	440b      	add	r3, r1
    c2da:	681b      	ldr	r3, [r3, #0]
    c2dc:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num; i++) {
    c2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c2e0:	3301      	adds	r3, #1
    c2e2:	637b      	str	r3, [r7, #52]	; 0x34
    c2e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c2e6:	68bb      	ldr	r3, [r7, #8]
    c2e8:	429a      	cmp	r2, r3
    c2ea:	d3e9      	bcc.n	c2c0 <mp_unpack_sequence+0x5e>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c2ec:	e029      	b.n	c342 <mp_unpack_sequence+0xe0>
        }
    } else {
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    c2ee:	f107 0314 	add.w	r3, r7, #20
    c2f2:	4619      	mov	r1, r3
    c2f4:	68f8      	ldr	r0, [r7, #12]
    c2f6:	f000 fa93 	bl	c820 <mp_getiter>
    c2fa:	6338      	str	r0, [r7, #48]	; 0x30

        for (seq_len = 0; seq_len < num; seq_len++) {
    c2fc:	2300      	movs	r3, #0
    c2fe:	62bb      	str	r3, [r7, #40]	; 0x28
    c300:	e014      	b.n	c32c <mp_unpack_sequence+0xca>
            mp_obj_t el = mp_iternext(iterable);
    c302:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c304:	f000 fb0e 	bl	c924 <mp_iternext>
    c308:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (el == MP_OBJ_STOP_ITERATION) {
    c30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c30c:	2b04      	cmp	r3, #4
    c30e:	d01b      	beq.n	c348 <mp_unpack_sequence+0xe6>
                goto too_short;
            }
            items[num - 1 - seq_len] = el;
    c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c312:	68ba      	ldr	r2, [r7, #8]
    c314:	1ad3      	subs	r3, r2, r3
    c316:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c31a:	3b01      	subs	r3, #1
    c31c:	009b      	lsls	r3, r3, #2
    c31e:	687a      	ldr	r2, [r7, #4]
    c320:	4413      	add	r3, r2
    c322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c324:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num; seq_len++) {
    c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c328:	3301      	adds	r3, #1
    c32a:	62bb      	str	r3, [r7, #40]	; 0x28
    c32c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c32e:	68bb      	ldr	r3, [r7, #8]
    c330:	429a      	cmp	r2, r3
    c332:	d3e6      	bcc.n	c302 <mp_unpack_sequence+0xa0>
        }
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    c334:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c336:	f000 faf5 	bl	c924 <mp_iternext>
    c33a:	4603      	mov	r3, r0
    c33c:	2b04      	cmp	r3, #4
    c33e:	d00b      	beq.n	c358 <mp_unpack_sequence+0xf6>
            goto too_long;
    c340:	e007      	b.n	c352 <mp_unpack_sequence+0xf0>
        }
    }
    return;
    c342:	e009      	b.n	c358 <mp_unpack_sequence+0xf6>
            goto too_short;
    c344:	bf00      	nop
    c346:	e000      	b.n	c34a <mp_unpack_sequence+0xe8>
                goto too_short;
    c348:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c34a:	4807      	ldr	r0, [pc, #28]	; (c368 <mp_unpack_sequence+0x106>)
    c34c:	f000 fdab 	bl	cea6 <mp_raise_ValueError>
            goto too_long;
    c350:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
too_long:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c352:	4805      	ldr	r0, [pc, #20]	; (c368 <mp_unpack_sequence+0x106>)
    c354:	f000 fda7 	bl	cea6 <mp_raise_ValueError>
    return;
    c358:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "too many values to unpack (expected %d)", (int)num));
    }
}
    c35a:	3738      	adds	r7, #56	; 0x38
    c35c:	46bd      	mov	sp, r7
    c35e:	bd80      	pop	{r7, pc}
    c360:	00023488 	.word	0x00023488
    c364:	0002287c 	.word	0x0002287c
    c368:	00020e08 	.word	0x00020e08

0000c36c <mp_unpack_ex>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    c36c:	b590      	push	{r4, r7, lr}
    c36e:	b08f      	sub	sp, #60	; 0x3c
    c370:	af00      	add	r7, sp, #0
    c372:	60f8      	str	r0, [r7, #12]
    c374:	60b9      	str	r1, [r7, #8]
    c376:	607a      	str	r2, [r7, #4]
    size_t num_left = num_in & 0xff;
    c378:	68bb      	ldr	r3, [r7, #8]
    c37a:	b2db      	uxtb	r3, r3
    c37c:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t num_right = (num_in >> 8) & 0xff;
    c37e:	68bb      	ldr	r3, [r7, #8]
    c380:	0a1b      	lsrs	r3, r3, #8
    c382:	b2db      	uxtb	r3, r3
    c384:	627b      	str	r3, [r7, #36]	; 0x24
    DEBUG_OP_printf("unpack ex " UINT_FMT " " UINT_FMT "\n", num_left, num_right);
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c386:	68f8      	ldr	r0, [r7, #12]
    c388:	f7fe ffb6 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c38c:	4603      	mov	r3, r0
    c38e:	2b00      	cmp	r3, #0
    c390:	d004      	beq.n	c39c <mp_unpack_ex+0x30>
    c392:	68fb      	ldr	r3, [r7, #12]
    c394:	681b      	ldr	r3, [r3, #0]
    c396:	4a6a      	ldr	r2, [pc, #424]	; (c540 <mp_unpack_ex+0x1d4>)
    c398:	4293      	cmp	r3, r2
    c39a:	d00a      	beq.n	c3b2 <mp_unpack_ex+0x46>
    c39c:	68f8      	ldr	r0, [r7, #12]
    c39e:	f7fe ffab 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c3a2:	4603      	mov	r3, r0
    c3a4:	2b00      	cmp	r3, #0
    c3a6:	d05b      	beq.n	c460 <mp_unpack_ex+0xf4>
    c3a8:	68fb      	ldr	r3, [r7, #12]
    c3aa:	681b      	ldr	r3, [r3, #0]
    c3ac:	4a65      	ldr	r2, [pc, #404]	; (c544 <mp_unpack_ex+0x1d8>)
    c3ae:	4293      	cmp	r3, r2
    c3b0:	d156      	bne.n	c460 <mp_unpack_ex+0xf4>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c3b2:	f107 0210 	add.w	r2, r7, #16
    c3b6:	f107 0314 	add.w	r3, r7, #20
    c3ba:	4619      	mov	r1, r3
    c3bc:	68f8      	ldr	r0, [r7, #12]
    c3be:	f001 fc0b 	bl	dbd8 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    c3c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3c6:	441a      	add	r2, r3
    c3c8:	697b      	ldr	r3, [r7, #20]
    c3ca:	429a      	cmp	r2, r3
    c3cc:	f200 80ad 	bhi.w	c52a <mp_unpack_ex+0x1be>
            goto too_short;
        }
        for (size_t i = 0; i < num_right; i++) {
    c3d0:	2300      	movs	r3, #0
    c3d2:	637b      	str	r3, [r7, #52]	; 0x34
    c3d4:	e011      	b.n	c3fa <mp_unpack_ex+0x8e>
            items[i] = seq_items[seq_len - 1 - i];
    c3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3d8:	009b      	lsls	r3, r3, #2
    c3da:	687a      	ldr	r2, [r7, #4]
    c3dc:	441a      	add	r2, r3
    c3de:	6939      	ldr	r1, [r7, #16]
    c3e0:	6978      	ldr	r0, [r7, #20]
    c3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3e4:	1ac3      	subs	r3, r0, r3
    c3e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c3ea:	3b01      	subs	r3, #1
    c3ec:	009b      	lsls	r3, r3, #2
    c3ee:	440b      	add	r3, r1
    c3f0:	681b      	ldr	r3, [r3, #0]
    c3f2:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_right; i++) {
    c3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3f6:	3301      	adds	r3, #1
    c3f8:	637b      	str	r3, [r7, #52]	; 0x34
    c3fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3fe:	429a      	cmp	r2, r3
    c400:	d3e9      	bcc.n	c3d6 <mp_unpack_ex+0x6a>
        }
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c404:	009b      	lsls	r3, r3, #2
    c406:	687a      	ldr	r2, [r7, #4]
    c408:	18d4      	adds	r4, r2, r3
    c40a:	697a      	ldr	r2, [r7, #20]
    c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c40e:	1ad2      	subs	r2, r2, r3
    c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c412:	1ad0      	subs	r0, r2, r3
    c414:	693a      	ldr	r2, [r7, #16]
    c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c418:	009b      	lsls	r3, r3, #2
    c41a:	4413      	add	r3, r2
    c41c:	4619      	mov	r1, r3
    c41e:	f005 f8dc 	bl	115da <mp_obj_new_list>
    c422:	4603      	mov	r3, r0
    c424:	6023      	str	r3, [r4, #0]
        for (size_t i = 0; i < num_left; i++) {
    c426:	2300      	movs	r3, #0
    c428:	633b      	str	r3, [r7, #48]	; 0x30
    c42a:	e014      	b.n	c456 <mp_unpack_ex+0xea>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    c42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c430:	4413      	add	r3, r2
    c432:	3301      	adds	r3, #1
    c434:	009b      	lsls	r3, r3, #2
    c436:	687a      	ldr	r2, [r7, #4]
    c438:	441a      	add	r2, r3
    c43a:	6939      	ldr	r1, [r7, #16]
    c43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c440:	1ac3      	subs	r3, r0, r3
    c442:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c446:	3b01      	subs	r3, #1
    c448:	009b      	lsls	r3, r3, #2
    c44a:	440b      	add	r3, r1
    c44c:	681b      	ldr	r3, [r3, #0]
    c44e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_left; i++) {
    c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c452:	3301      	adds	r3, #1
    c454:	633b      	str	r3, [r7, #48]	; 0x30
    c456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c45a:	429a      	cmp	r2, r3
    c45c:	d3e6      	bcc.n	c42c <mp_unpack_ex+0xc0>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c45e:	e063      	b.n	c528 <mp_unpack_ex+0x1bc>
    } else {
        // Generic iterable; this gets a bit messy: we unpack known left length to the
        // items destination array, then the rest to a dynamically created list.  Once the
        // iterable is exhausted, we take from this list for the right part of the items.
        // TODO Improve to waste less memory in the dynamically created list.
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    c460:	2100      	movs	r1, #0
    c462:	68f8      	ldr	r0, [r7, #12]
    c464:	f000 f9dc 	bl	c820 <mp_getiter>
    c468:	6238      	str	r0, [r7, #32]
        mp_obj_t item;
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c46a:	2300      	movs	r3, #0
    c46c:	617b      	str	r3, [r7, #20]
    c46e:	e013      	b.n	c498 <mp_unpack_ex+0x12c>
            item = mp_iternext(iterable);
    c470:	6a38      	ldr	r0, [r7, #32]
    c472:	f000 fa57 	bl	c924 <mp_iternext>
    c476:	61f8      	str	r0, [r7, #28]
            if (item == MP_OBJ_STOP_ITERATION) {
    c478:	69fb      	ldr	r3, [r7, #28]
    c47a:	2b04      	cmp	r3, #4
    c47c:	d057      	beq.n	c52e <mp_unpack_ex+0x1c2>
                goto too_short;
            }
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    c47e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c482:	441a      	add	r2, r3
    c484:	697b      	ldr	r3, [r7, #20]
    c486:	1ad3      	subs	r3, r2, r3
    c488:	009b      	lsls	r3, r3, #2
    c48a:	687a      	ldr	r2, [r7, #4]
    c48c:	4413      	add	r3, r2
    c48e:	69fa      	ldr	r2, [r7, #28]
    c490:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c492:	697b      	ldr	r3, [r7, #20]
    c494:	3301      	adds	r3, #1
    c496:	617b      	str	r3, [r7, #20]
    c498:	697a      	ldr	r2, [r7, #20]
    c49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c49c:	429a      	cmp	r2, r3
    c49e:	d3e7      	bcc.n	c470 <mp_unpack_ex+0x104>
        }
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    c4a0:	2100      	movs	r1, #0
    c4a2:	2000      	movs	r0, #0
    c4a4:	f005 f899 	bl	115da <mp_obj_new_list>
    c4a8:	61b8      	str	r0, [r7, #24]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c4aa:	e003      	b.n	c4b4 <mp_unpack_ex+0x148>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    c4ac:	69f9      	ldr	r1, [r7, #28]
    c4ae:	69b8      	ldr	r0, [r7, #24]
    c4b0:	f004 fc27 	bl	10d02 <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c4b4:	6a38      	ldr	r0, [r7, #32]
    c4b6:	f000 fa35 	bl	c924 <mp_iternext>
    c4ba:	61f8      	str	r0, [r7, #28]
    c4bc:	69fb      	ldr	r3, [r7, #28]
    c4be:	2b04      	cmp	r3, #4
    c4c0:	d1f4      	bne.n	c4ac <mp_unpack_ex+0x140>
        }
        if (rest->len < num_right) {
    c4c2:	69bb      	ldr	r3, [r7, #24]
    c4c4:	689a      	ldr	r2, [r3, #8]
    c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4c8:	429a      	cmp	r2, r3
    c4ca:	d332      	bcc.n	c532 <mp_unpack_ex+0x1c6>
            goto too_short;
        }
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    c4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4ce:	009b      	lsls	r3, r3, #2
    c4d0:	687a      	ldr	r2, [r7, #4]
    c4d2:	4413      	add	r3, r2
    c4d4:	69ba      	ldr	r2, [r7, #24]
    c4d6:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c4d8:	2300      	movs	r3, #0
    c4da:	62fb      	str	r3, [r7, #44]	; 0x2c
    c4dc:	e017      	b.n	c50e <mp_unpack_ex+0x1a2>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    c4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4e2:	1ad3      	subs	r3, r2, r3
    c4e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c4e8:	3b01      	subs	r3, #1
    c4ea:	009b      	lsls	r3, r3, #2
    c4ec:	687a      	ldr	r2, [r7, #4]
    c4ee:	4413      	add	r3, r2
    c4f0:	69ba      	ldr	r2, [r7, #24]
    c4f2:	68d1      	ldr	r1, [r2, #12]
    c4f4:	69ba      	ldr	r2, [r7, #24]
    c4f6:	6890      	ldr	r0, [r2, #8]
    c4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c4fa:	1a80      	subs	r0, r0, r2
    c4fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c4fe:	4402      	add	r2, r0
    c500:	0092      	lsls	r2, r2, #2
    c502:	440a      	add	r2, r1
    c504:	6812      	ldr	r2, [r2, #0]
    c506:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c50a:	3301      	adds	r3, #1
    c50c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c50e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c512:	429a      	cmp	r2, r3
    c514:	d3e3      	bcc.n	c4de <mp_unpack_ex+0x172>
        }
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    c516:	69bb      	ldr	r3, [r7, #24]
    c518:	689a      	ldr	r2, [r3, #8]
    c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c51c:	1ad3      	subs	r3, r2, r3
    c51e:	4619      	mov	r1, r3
    c520:	69b8      	ldr	r0, [r7, #24]
    c522:	f005 f896 	bl	11652 <mp_obj_list_set_len>
    }
    return;
    c526:	e008      	b.n	c53a <mp_unpack_ex+0x1ce>
    c528:	e007      	b.n	c53a <mp_unpack_ex+0x1ce>
            goto too_short;
    c52a:	bf00      	nop
    c52c:	e002      	b.n	c534 <mp_unpack_ex+0x1c8>
                goto too_short;
    c52e:	bf00      	nop
    c530:	e000      	b.n	c534 <mp_unpack_ex+0x1c8>
            goto too_short;
    c532:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c534:	4804      	ldr	r0, [pc, #16]	; (c548 <mp_unpack_ex+0x1dc>)
    c536:	f000 fcb6 	bl	cea6 <mp_raise_ValueError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
}
    c53a:	373c      	adds	r7, #60	; 0x3c
    c53c:	46bd      	mov	sp, r7
    c53e:	bd90      	pop	{r4, r7, pc}
    c540:	00023488 	.word	0x00023488
    c544:	0002287c 	.word	0x0002287c
    c548:	00020e08 	.word	0x00020e08

0000c54c <mp_load_attr>:

mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    c54c:	b580      	push	{r7, lr}
    c54e:	b084      	sub	sp, #16
    c550:	af00      	add	r7, sp, #0
    c552:	6078      	str	r0, [r7, #4]
    c554:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("load attr %p.%s\n", base, qstr_str(attr));
    // use load_method
    mp_obj_t dest[2];
    mp_load_method(base, attr, dest);
    c556:	f107 0308 	add.w	r3, r7, #8
    c55a:	461a      	mov	r2, r3
    c55c:	6839      	ldr	r1, [r7, #0]
    c55e:	6878      	ldr	r0, [r7, #4]
    c560:	f000 f8e6 	bl	c730 <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    c564:	68fb      	ldr	r3, [r7, #12]
    c566:	2b00      	cmp	r3, #0
    c568:	d101      	bne.n	c56e <mp_load_attr+0x22>
        // load_method returned just a normal attribute
        return dest[0];
    c56a:	68bb      	ldr	r3, [r7, #8]
    c56c:	e006      	b.n	c57c <mp_load_attr+0x30>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    c56e:	68bb      	ldr	r3, [r7, #8]
    c570:	68fa      	ldr	r2, [r7, #12]
    c572:	4611      	mov	r1, r2
    c574:	4618      	mov	r0, r3
    c576:	f001 fddc 	bl	e132 <mp_obj_new_bound_meth>
    c57a:	4603      	mov	r3, r0
    }
}
    c57c:	4618      	mov	r0, r3
    c57e:	3710      	adds	r7, #16
    c580:	46bd      	mov	sp, r7
    c582:	bd80      	pop	{r7, pc}

0000c584 <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    c584:	b580      	push	{r7, lr}
    c586:	b084      	sub	sp, #16
    c588:	af00      	add	r7, sp, #0
    c58a:	60f8      	str	r0, [r7, #12]
    c58c:	60b9      	str	r1, [r7, #8]
    c58e:	607a      	str	r2, [r7, #4]
    c590:	603b      	str	r3, [r7, #0]
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    c592:	6878      	ldr	r0, [r7, #4]
    c594:	f7fe feb0 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c598:	4603      	mov	r3, r0
    c59a:	2b00      	cmp	r3, #0
    c59c:	d009      	beq.n	c5b2 <mp_convert_member_lookup+0x2e>
    c59e:	687b      	ldr	r3, [r7, #4]
    c5a0:	681b      	ldr	r3, [r3, #0]
    c5a2:	4a2f      	ldr	r2, [pc, #188]	; (c660 <mp_convert_member_lookup+0xdc>)
    c5a4:	4293      	cmp	r3, r2
    c5a6:	d104      	bne.n	c5b2 <mp_convert_member_lookup+0x2e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c5a8:	687b      	ldr	r3, [r7, #4]
    c5aa:	685a      	ldr	r2, [r3, #4]
    c5ac:	683b      	ldr	r3, [r7, #0]
    c5ae:	601a      	str	r2, [r3, #0]
    c5b0:	e052      	b.n	c658 <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    c5b2:	6878      	ldr	r0, [r7, #4]
    c5b4:	f7fe fea0 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c5b8:	4603      	mov	r3, r0
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	d014      	beq.n	c5e8 <mp_convert_member_lookup+0x64>
    c5be:	687b      	ldr	r3, [r7, #4]
    c5c0:	681b      	ldr	r3, [r3, #0]
    c5c2:	4a28      	ldr	r2, [pc, #160]	; (c664 <mp_convert_member_lookup+0xe0>)
    c5c4:	4293      	cmp	r3, r2
    c5c6:	d10f      	bne.n	c5e8 <mp_convert_member_lookup+0x64>
        // return a bound method, with self being the type of this object
        // this type should be the type of the original instance, not the base
        // type (which is what is passed in the 'type' argument to this function)
        if (self != MP_OBJ_NULL) {
    c5c8:	68fb      	ldr	r3, [r7, #12]
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d003      	beq.n	c5d6 <mp_convert_member_lookup+0x52>
            type = mp_obj_get_type(self);
    c5ce:	68f8      	ldr	r0, [r7, #12]
    c5d0:	f001 f88a 	bl	d6e8 <mp_obj_get_type>
    c5d4:	60b8      	str	r0, [r7, #8]
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c5d6:	687b      	ldr	r3, [r7, #4]
    c5d8:	685a      	ldr	r2, [r3, #4]
    c5da:	683b      	ldr	r3, [r7, #0]
    c5dc:	601a      	str	r2, [r3, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    c5de:	683b      	ldr	r3, [r7, #0]
    c5e0:	3304      	adds	r3, #4
    c5e2:	68ba      	ldr	r2, [r7, #8]
    c5e4:	601a      	str	r2, [r3, #0]
    c5e6:	e037      	b.n	c658 <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    c5e8:	6878      	ldr	r0, [r7, #4]
    c5ea:	f7fe fe85 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c5ee:	4603      	mov	r3, r0
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d008      	beq.n	c606 <mp_convert_member_lookup+0x82>
    c5f4:	687b      	ldr	r3, [r7, #4]
    c5f6:	681b      	ldr	r3, [r3, #0]
    c5f8:	4a1b      	ldr	r2, [pc, #108]	; (c668 <mp_convert_member_lookup+0xe4>)
    c5fa:	4293      	cmp	r3, r2
    c5fc:	d103      	bne.n	c606 <mp_convert_member_lookup+0x82>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    c5fe:	683b      	ldr	r3, [r7, #0]
    c600:	687a      	ldr	r2, [r7, #4]
    c602:	601a      	str	r2, [r3, #0]
    c604:	e028      	b.n	c658 <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_FUN(member)
    c606:	6878      	ldr	r0, [r7, #4]
    c608:	f7fe fe76 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c60c:	4603      	mov	r3, r0
    c60e:	2b00      	cmp	r3, #0
    c610:	d005      	beq.n	c61e <mp_convert_member_lookup+0x9a>
    c612:	687b      	ldr	r3, [r7, #4]
    c614:	681b      	ldr	r3, [r3, #0]
    c616:	88db      	ldrh	r3, [r3, #6]
    c618:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
    c61c:	d011      	beq.n	c642 <mp_convert_member_lookup+0xbe>
        || (MP_OBJ_IS_OBJ(member)
    c61e:	6878      	ldr	r0, [r7, #4]
    c620:	f7fe fe6a 	bl	b2f8 <MP_OBJ_IS_OBJ>
    c624:	4603      	mov	r3, r0
    c626:	2b00      	cmp	r3, #0
    c628:	d013      	beq.n	c652 <mp_convert_member_lookup+0xce>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    c62a:	687b      	ldr	r3, [r7, #4]
    c62c:	681b      	ldr	r3, [r3, #0]
    c62e:	88db      	ldrh	r3, [r3, #6]
    c630:	2bfa      	cmp	r3, #250	; 0xfa
    c632:	d006      	beq.n	c642 <mp_convert_member_lookup+0xbe>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    c634:	687b      	ldr	r3, [r7, #4]
    c636:	681b      	ldr	r3, [r3, #0]
    c638:	88db      	ldrh	r3, [r3, #6]
    c63a:	f240 120f 	movw	r2, #271	; 0x10f
    c63e:	4293      	cmp	r3, r2
    c640:	d107      	bne.n	c652 <mp_convert_member_lookup+0xce>
            dest[0] = mp_obj_new_checked_fun(type, member);
        } else
        #endif
        {
            // return a bound method, with self being this object
            dest[0] = member;
    c642:	683b      	ldr	r3, [r7, #0]
    c644:	687a      	ldr	r2, [r7, #4]
    c646:	601a      	str	r2, [r3, #0]
            dest[1] = self;
    c648:	683b      	ldr	r3, [r7, #0]
    c64a:	3304      	adds	r3, #4
    c64c:	68fa      	ldr	r2, [r7, #12]
    c64e:	601a      	str	r2, [r3, #0]
    c650:	e002      	b.n	c658 <mp_convert_member_lookup+0xd4>
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    c652:	683b      	ldr	r3, [r7, #0]
    c654:	687a      	ldr	r2, [r7, #4]
    c656:	601a      	str	r2, [r3, #0]
    }
}
    c658:	bf00      	nop
    c65a:	3710      	adds	r7, #16
    c65c:	46bd      	mov	sp, r7
    c65e:	bd80      	pop	{r7, pc}
    c660:	0002398c 	.word	0x0002398c
    c664:	000239c8 	.word	0x000239c8
    c668:	00023780 	.word	0x00023780

0000c66c <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    c66c:	b580      	push	{r7, lr}
    c66e:	b088      	sub	sp, #32
    c670:	af00      	add	r7, sp, #0
    c672:	60f8      	str	r0, [r7, #12]
    c674:	60b9      	str	r1, [r7, #8]
    c676:	607a      	str	r2, [r7, #4]
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    c678:	687b      	ldr	r3, [r7, #4]
    c67a:	2200      	movs	r2, #0
    c67c:	601a      	str	r2, [r3, #0]
    dest[1] = MP_OBJ_NULL;
    c67e:	687b      	ldr	r3, [r7, #4]
    c680:	3304      	adds	r3, #4
    c682:	2200      	movs	r2, #0
    c684:	601a      	str	r2, [r3, #0]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    c686:	68f8      	ldr	r0, [r7, #12]
    c688:	f001 f82e 	bl	d6e8 <mp_obj_get_type>
    c68c:	61f8      	str	r0, [r7, #28]
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    c68e:	68bb      	ldr	r3, [r7, #8]
    c690:	2b1d      	cmp	r3, #29
    c692:	d10b      	bne.n	c6ac <mp_load_method_maybe+0x40>
    c694:	69fb      	ldr	r3, [r7, #28]
    c696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c698:	2b00      	cmp	r3, #0
    c69a:	d007      	beq.n	c6ac <mp_load_method_maybe+0x40>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    c69c:	687b      	ldr	r3, [r7, #4]
    c69e:	4a1f      	ldr	r2, [pc, #124]	; (c71c <mp_load_method_maybe+0xb0>)
    c6a0:	601a      	str	r2, [r3, #0]
        dest[1] = obj;
    c6a2:	687b      	ldr	r3, [r7, #4]
    c6a4:	3304      	adds	r3, #4
    c6a6:	68fa      	ldr	r2, [r7, #12]
    c6a8:	601a      	str	r2, [r3, #0]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    c6aa:	e033      	b.n	c714 <mp_load_method_maybe+0xa8>
    } else if (type->attr != NULL) {
    c6ac:	69fb      	ldr	r3, [r7, #28]
    c6ae:	69db      	ldr	r3, [r3, #28]
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d006      	beq.n	c6c2 <mp_load_method_maybe+0x56>
        type->attr(obj, attr, dest);
    c6b4:	69fb      	ldr	r3, [r7, #28]
    c6b6:	69db      	ldr	r3, [r3, #28]
    c6b8:	687a      	ldr	r2, [r7, #4]
    c6ba:	68b9      	ldr	r1, [r7, #8]
    c6bc:	68f8      	ldr	r0, [r7, #12]
    c6be:	4798      	blx	r3
}
    c6c0:	e028      	b.n	c714 <mp_load_method_maybe+0xa8>
    } else if (type->locals_dict != NULL) {
    c6c2:	69fb      	ldr	r3, [r7, #28]
    c6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c6c6:	2b00      	cmp	r3, #0
    c6c8:	d024      	beq.n	c714 <mp_load_method_maybe+0xa8>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    c6ca:	69fb      	ldr	r3, [r7, #28]
    c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c6ce:	681b      	ldr	r3, [r3, #0]
    c6d0:	4a13      	ldr	r2, [pc, #76]	; (c720 <mp_load_method_maybe+0xb4>)
    c6d2:	4293      	cmp	r3, r2
    c6d4:	d006      	beq.n	c6e4 <mp_load_method_maybe+0x78>
    c6d6:	4b13      	ldr	r3, [pc, #76]	; (c724 <mp_load_method_maybe+0xb8>)
    c6d8:	4a13      	ldr	r2, [pc, #76]	; (c728 <mp_load_method_maybe+0xbc>)
    c6da:	f240 411f 	movw	r1, #1055	; 0x41f
    c6de:	4813      	ldr	r0, [pc, #76]	; (c72c <mp_load_method_maybe+0xc0>)
    c6e0:	f00e fd80 	bl	1b1e4 <__assert_func>
        mp_map_t *locals_map = &type->locals_dict->map;
    c6e4:	69fb      	ldr	r3, [r7, #28]
    c6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c6e8:	3304      	adds	r3, #4
    c6ea:	61bb      	str	r3, [r7, #24]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    c6ec:	68bb      	ldr	r3, [r7, #8]
    c6ee:	009b      	lsls	r3, r3, #2
    c6f0:	f043 0302 	orr.w	r3, r3, #2
    c6f4:	2200      	movs	r2, #0
    c6f6:	4619      	mov	r1, r3
    c6f8:	69b8      	ldr	r0, [r7, #24]
    c6fa:	f000 fe4b 	bl	d394 <mp_map_lookup>
    c6fe:	6178      	str	r0, [r7, #20]
        if (elem != NULL) {
    c700:	697b      	ldr	r3, [r7, #20]
    c702:	2b00      	cmp	r3, #0
    c704:	d006      	beq.n	c714 <mp_load_method_maybe+0xa8>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    c706:	697b      	ldr	r3, [r7, #20]
    c708:	685a      	ldr	r2, [r3, #4]
    c70a:	687b      	ldr	r3, [r7, #4]
    c70c:	69f9      	ldr	r1, [r7, #28]
    c70e:	68f8      	ldr	r0, [r7, #12]
    c710:	f7ff ff38 	bl	c584 <mp_convert_member_lookup>
}
    c714:	bf00      	nop
    c716:	3720      	adds	r7, #32
    c718:	46bd      	mov	sp, r7
    c71a:	bd80      	pop	{r7, pc}
    c71c:	00023d1c 	.word	0x00023d1c
    c720:	000217b4 	.word	0x000217b4
    c724:	00020e2c 	.word	0x00020e2c
    c728:	00020fc8 	.word	0x00020fc8
    c72c:	00020d40 	.word	0x00020d40

0000c730 <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    c730:	b580      	push	{r7, lr}
    c732:	b084      	sub	sp, #16
    c734:	af00      	add	r7, sp, #0
    c736:	60f8      	str	r0, [r7, #12]
    c738:	60b9      	str	r1, [r7, #8]
    c73a:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));

    mp_load_method_maybe(base, attr, dest);
    c73c:	687a      	ldr	r2, [r7, #4]
    c73e:	68b9      	ldr	r1, [r7, #8]
    c740:	68f8      	ldr	r0, [r7, #12]
    c742:	f7ff ff93 	bl	c66c <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    c746:	687b      	ldr	r3, [r7, #4]
    c748:	681b      	ldr	r3, [r3, #0]
    c74a:	2b00      	cmp	r3, #0
    c74c:	d103      	bne.n	c756 <mp_load_method+0x26>
        // no attribute/method called attr
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c74e:	4904      	ldr	r1, [pc, #16]	; (c760 <mp_load_method+0x30>)
    c750:	4804      	ldr	r0, [pc, #16]	; (c764 <mp_load_method+0x34>)
    c752:	f000 fb91 	bl	ce78 <mp_raise_msg>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    c756:	bf00      	nop
    c758:	3710      	adds	r7, #16
    c75a:	46bd      	mov	sp, r7
    c75c:	bd80      	pop	{r7, pc}
    c75e:	bf00      	nop
    c760:	00020e5c 	.word	0x00020e5c
    c764:	00021b10 	.word	0x00021b10

0000c768 <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    c768:	b580      	push	{r7, lr}
    c76a:	b090      	sub	sp, #64	; 0x40
    c76c:	af00      	add	r7, sp, #0
    c76e:	60f8      	str	r0, [r7, #12]
    c770:	60b9      	str	r1, [r7, #8]
    c772:	607a      	str	r2, [r7, #4]
    c774:	70fb      	strb	r3, [r7, #3]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    c776:	f107 0310 	add.w	r3, r7, #16
    c77a:	4618      	mov	r0, r3
    c77c:	f7f3 fd9e 	bl	2bc <nlr_push>
    c780:	4603      	mov	r3, r0
    c782:	2b00      	cmp	r3, #0
    c784:	d107      	bne.n	c796 <mp_load_method_protected+0x2e>
        mp_load_method_maybe(obj, attr, dest);
    c786:	687a      	ldr	r2, [r7, #4]
    c788:	68b9      	ldr	r1, [r7, #8]
    c78a:	68f8      	ldr	r0, [r7, #12]
    c78c:	f7ff ff6e 	bl	c66c <mp_load_method_maybe>
        nlr_pop();
    c790:	f7f3 fd82 	bl	298 <nlr_pop>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    c794:	e015      	b.n	c7c2 <mp_load_method_protected+0x5a>
        if (!catch_all_exc
    c796:	78fb      	ldrb	r3, [r7, #3]
    c798:	f083 0301 	eor.w	r3, r3, #1
    c79c:	b2db      	uxtb	r3, r3
    c79e:	2b00      	cmp	r3, #0
    c7a0:	d00f      	beq.n	c7c2 <mp_load_method_protected+0x5a>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    c7a2:	697b      	ldr	r3, [r7, #20]
    c7a4:	681b      	ldr	r3, [r3, #0]
    c7a6:	4909      	ldr	r1, [pc, #36]	; (c7cc <mp_load_method_protected+0x64>)
    c7a8:	4618      	mov	r0, r3
    c7aa:	f00a fbaf 	bl	16f0c <mp_obj_is_subclass_fast>
    c7ae:	4603      	mov	r3, r0
    c7b0:	f083 0301 	eor.w	r3, r3, #1
    c7b4:	b2db      	uxtb	r3, r3
    c7b6:	2b00      	cmp	r3, #0
    c7b8:	d003      	beq.n	c7c2 <mp_load_method_protected+0x5a>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    c7ba:	697b      	ldr	r3, [r7, #20]
    c7bc:	4618      	mov	r0, r3
    c7be:	f7f3 fd8f 	bl	2e0 <nlr_jump>
}
    c7c2:	bf00      	nop
    c7c4:	3740      	adds	r7, #64	; 0x40
    c7c6:	46bd      	mov	sp, r7
    c7c8:	bd80      	pop	{r7, pc}
    c7ca:	bf00      	nop
    c7cc:	00021b10 	.word	0x00021b10

0000c7d0 <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    c7d0:	b580      	push	{r7, lr}
    c7d2:	b088      	sub	sp, #32
    c7d4:	af00      	add	r7, sp, #0
    c7d6:	60f8      	str	r0, [r7, #12]
    c7d8:	60b9      	str	r1, [r7, #8]
    c7da:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    mp_obj_type_t *type = mp_obj_get_type(base);
    c7dc:	68f8      	ldr	r0, [r7, #12]
    c7de:	f000 ff83 	bl	d6e8 <mp_obj_get_type>
    c7e2:	61f8      	str	r0, [r7, #28]
    if (type->attr != NULL) {
    c7e4:	69fb      	ldr	r3, [r7, #28]
    c7e6:	69db      	ldr	r3, [r3, #28]
    c7e8:	2b00      	cmp	r3, #0
    c7ea:	d00d      	beq.n	c808 <mp_store_attr+0x38>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    c7ec:	2308      	movs	r3, #8
    c7ee:	617b      	str	r3, [r7, #20]
    c7f0:	687b      	ldr	r3, [r7, #4]
    c7f2:	61bb      	str	r3, [r7, #24]
        type->attr(base, attr, dest);
    c7f4:	69fb      	ldr	r3, [r7, #28]
    c7f6:	69db      	ldr	r3, [r3, #28]
    c7f8:	f107 0214 	add.w	r2, r7, #20
    c7fc:	68b9      	ldr	r1, [r7, #8]
    c7fe:	68f8      	ldr	r0, [r7, #12]
    c800:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    c802:	697b      	ldr	r3, [r7, #20]
    c804:	2b00      	cmp	r3, #0
    c806:	d003      	beq.n	c810 <mp_store_attr+0x40>
            // success
            return;
        }
    }
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c808:	4903      	ldr	r1, [pc, #12]	; (c818 <mp_store_attr+0x48>)
    c80a:	4804      	ldr	r0, [pc, #16]	; (c81c <mp_store_attr+0x4c>)
    c80c:	f000 fb34 	bl	ce78 <mp_raise_msg>
            return;
    c810:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    c812:	3720      	adds	r7, #32
    c814:	46bd      	mov	sp, r7
    c816:	bd80      	pop	{r7, pc}
    c818:	00020e5c 	.word	0x00020e5c
    c81c:	00021b10 	.word	0x00021b10

0000c820 <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    c820:	b580      	push	{r7, lr}
    c822:	b086      	sub	sp, #24
    c824:	af00      	add	r7, sp, #0
    c826:	6078      	str	r0, [r7, #4]
    c828:	6039      	str	r1, [r7, #0]
    assert(o_in);
    c82a:	687b      	ldr	r3, [r7, #4]
    c82c:	2b00      	cmp	r3, #0
    c82e:	d106      	bne.n	c83e <mp_getiter+0x1e>
    c830:	4b20      	ldr	r3, [pc, #128]	; (c8b4 <mp_getiter+0x94>)
    c832:	4a21      	ldr	r2, [pc, #132]	; (c8b8 <mp_getiter+0x98>)
    c834:	f240 4165 	movw	r1, #1125	; 0x465
    c838:	4820      	ldr	r0, [pc, #128]	; (c8bc <mp_getiter+0x9c>)
    c83a:	f00e fcd3 	bl	1b1e4 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c83e:	6878      	ldr	r0, [r7, #4]
    c840:	f000 ff52 	bl	d6e8 <mp_obj_get_type>
    c844:	6178      	str	r0, [r7, #20]

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    c846:	697b      	ldr	r3, [r7, #20]
    c848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c84a:	4a1d      	ldr	r2, [pc, #116]	; (c8c0 <mp_getiter+0xa0>)
    c84c:	4293      	cmp	r3, r2
    c84e:	d101      	bne.n	c854 <mp_getiter+0x34>
        return o_in;
    c850:	687b      	ldr	r3, [r7, #4]
    c852:	e02a      	b.n	c8aa <mp_getiter+0x8a>
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    c854:	683b      	ldr	r3, [r7, #0]
    c856:	2b00      	cmp	r3, #0
    c858:	d103      	bne.n	c862 <mp_getiter+0x42>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    c85a:	2010      	movs	r0, #16
    c85c:	f7f3 fd5e 	bl	31c <m_malloc>
    c860:	6038      	str	r0, [r7, #0]
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    c862:	697b      	ldr	r3, [r7, #20]
    c864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c866:	2b00      	cmp	r3, #0
    c868:	d00a      	beq.n	c880 <mp_getiter+0x60>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    c86a:	697b      	ldr	r3, [r7, #20]
    c86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c86e:	6839      	ldr	r1, [r7, #0]
    c870:	6878      	ldr	r0, [r7, #4]
    c872:	4798      	blx	r3
    c874:	6138      	str	r0, [r7, #16]
        if (iter != MP_OBJ_NULL) {
    c876:	693b      	ldr	r3, [r7, #16]
    c878:	2b00      	cmp	r3, #0
    c87a:	d001      	beq.n	c880 <mp_getiter+0x60>
            return iter;
    c87c:	693b      	ldr	r3, [r7, #16]
    c87e:	e014      	b.n	c8aa <mp_getiter+0x8a>
        }
    }

    // check for __getitem__
    mp_obj_t dest[2];
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    c880:	f107 0308 	add.w	r3, r7, #8
    c884:	461a      	mov	r2, r3
    c886:	210e      	movs	r1, #14
    c888:	6878      	ldr	r0, [r7, #4]
    c88a:	f7ff feef 	bl	c66c <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    c88e:	68bb      	ldr	r3, [r7, #8]
    c890:	2b00      	cmp	r3, #0
    c892:	d007      	beq.n	c8a4 <mp_getiter+0x84>
        // __getitem__ exists, create and return an iterator
        return mp_obj_new_getitem_iter(dest, iter_buf);
    c894:	f107 0308 	add.w	r3, r7, #8
    c898:	6839      	ldr	r1, [r7, #0]
    c89a:	4618      	mov	r0, r3
    c89c:	f003 fc96 	bl	101cc <mp_obj_new_getitem_iter>
    c8a0:	4603      	mov	r3, r0
    c8a2:	e002      	b.n	c8aa <mp_getiter+0x8a>
    }

    // object not iterable
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not iterable");
    c8a4:	4807      	ldr	r0, [pc, #28]	; (c8c4 <mp_getiter+0xa4>)
    c8a6:	f000 fb09 	bl	cebc <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not iterable", mp_obj_get_type_str(o_in)));
    }
}
    c8aa:	4618      	mov	r0, r3
    c8ac:	3718      	adds	r7, #24
    c8ae:	46bd      	mov	sp, r7
    c8b0:	bd80      	pop	{r7, pc}
    c8b2:	bf00      	nop
    c8b4:	00020e70 	.word	0x00020e70
    c8b8:	00020fe0 	.word	0x00020fe0
    c8bc:	00020d40 	.word	0x00020d40
    c8c0:	0000dea7 	.word	0x0000dea7
    c8c4:	00020e78 	.word	0x00020e78

0000c8c8 <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    c8c8:	b580      	push	{r7, lr}
    c8ca:	b086      	sub	sp, #24
    c8cc:	af00      	add	r7, sp, #0
    c8ce:	6078      	str	r0, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c8d0:	6878      	ldr	r0, [r7, #4]
    c8d2:	f000 ff09 	bl	d6e8 <mp_obj_get_type>
    c8d6:	6178      	str	r0, [r7, #20]
    if (type->iternext != NULL) {
    c8d8:	697b      	ldr	r3, [r7, #20]
    c8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c8dc:	2b00      	cmp	r3, #0
    c8de:	d005      	beq.n	c8ec <mp_iternext_allow_raise+0x24>
        return type->iternext(o_in);
    c8e0:	697b      	ldr	r3, [r7, #20]
    c8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c8e4:	6878      	ldr	r0, [r7, #4]
    c8e6:	4798      	blx	r3
    c8e8:	4603      	mov	r3, r0
    c8ea:	e015      	b.n	c918 <mp_iternext_allow_raise+0x50>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    c8ec:	f107 030c 	add.w	r3, r7, #12
    c8f0:	461a      	mov	r2, r3
    c8f2:	211d      	movs	r1, #29
    c8f4:	6878      	ldr	r0, [r7, #4]
    c8f6:	f7ff feb9 	bl	c66c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    c8fa:	68fb      	ldr	r3, [r7, #12]
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	d008      	beq.n	c912 <mp_iternext_allow_raise+0x4a>
            // __next__ exists, call it and return its result
            return mp_call_method_n_kw(0, 0, dest);
    c900:	f107 030c 	add.w	r3, r7, #12
    c904:	461a      	mov	r2, r3
    c906:	2100      	movs	r1, #0
    c908:	2000      	movs	r0, #0
    c90a:	f7ff fa37 	bl	bd7c <mp_call_method_n_kw>
    c90e:	4603      	mov	r3, r0
    c910:	e002      	b.n	c918 <mp_iternext_allow_raise+0x50>
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    c912:	4803      	ldr	r0, [pc, #12]	; (c920 <mp_iternext_allow_raise+0x58>)
    c914:	f000 fad2 	bl	cebc <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    c918:	4618      	mov	r0, r3
    c91a:	3718      	adds	r7, #24
    c91c:	46bd      	mov	sp, r7
    c91e:	bd80      	pop	{r7, pc}
    c920:	00020e8c 	.word	0x00020e8c

0000c924 <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    c924:	b580      	push	{r7, lr}
    c926:	b092      	sub	sp, #72	; 0x48
    c928:	af00      	add	r7, sp, #0
    c92a:	6078      	str	r0, [r7, #4]
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c92c:	6878      	ldr	r0, [r7, #4]
    c92e:	f000 fedb 	bl	d6e8 <mp_obj_get_type>
    c932:	6478      	str	r0, [r7, #68]	; 0x44
    if (type->iternext != NULL) {
    c934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c938:	2b00      	cmp	r3, #0
    c93a:	d005      	beq.n	c948 <mp_iternext+0x24>
        return type->iternext(o_in);
    c93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c940:	6878      	ldr	r0, [r7, #4]
    c942:	4798      	blx	r3
    c944:	4603      	mov	r3, r0
    c946:	e02f      	b.n	c9a8 <mp_iternext+0x84>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    c948:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c94c:	461a      	mov	r2, r3
    c94e:	211d      	movs	r1, #29
    c950:	6878      	ldr	r0, [r7, #4]
    c952:	f7ff fe8b 	bl	c66c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c958:	2b00      	cmp	r3, #0
    c95a:	d022      	beq.n	c9a2 <mp_iternext+0x7e>
            // __next__ exists, call it and return its result
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    c95c:	f107 0308 	add.w	r3, r7, #8
    c960:	4618      	mov	r0, r3
    c962:	f7f3 fcab 	bl	2bc <nlr_push>
    c966:	4603      	mov	r3, r0
    c968:	2b00      	cmp	r3, #0
    c96a:	d10b      	bne.n	c984 <mp_iternext+0x60>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    c96c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c970:	461a      	mov	r2, r3
    c972:	2100      	movs	r1, #0
    c974:	2000      	movs	r0, #0
    c976:	f7ff fa01 	bl	bd7c <mp_call_method_n_kw>
    c97a:	6438      	str	r0, [r7, #64]	; 0x40
                nlr_pop();
    c97c:	f7f3 fc8c 	bl	298 <nlr_pop>
                return ret;
    c980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c982:	e011      	b.n	c9a8 <mp_iternext+0x84>
            } else {
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    c984:	68fb      	ldr	r3, [r7, #12]
    c986:	681b      	ldr	r3, [r3, #0]
    c988:	4909      	ldr	r1, [pc, #36]	; (c9b0 <mp_iternext+0x8c>)
    c98a:	4618      	mov	r0, r3
    c98c:	f00a fabe 	bl	16f0c <mp_obj_is_subclass_fast>
    c990:	4603      	mov	r3, r0
    c992:	2b00      	cmp	r3, #0
    c994:	d001      	beq.n	c99a <mp_iternext+0x76>
                    return MP_OBJ_STOP_ITERATION;
    c996:	2304      	movs	r3, #4
    c998:	e006      	b.n	c9a8 <mp_iternext+0x84>
                } else {
                    nlr_jump(nlr.ret_val);
    c99a:	68fb      	ldr	r3, [r7, #12]
    c99c:	4618      	mov	r0, r3
    c99e:	f7f3 fc9f 	bl	2e0 <nlr_jump>
                }
            }
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    c9a2:	4804      	ldr	r0, [pc, #16]	; (c9b4 <mp_iternext+0x90>)
    c9a4:	f000 fa8a 	bl	cebc <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    c9a8:	4618      	mov	r0, r3
    c9aa:	3748      	adds	r7, #72	; 0x48
    c9ac:	46bd      	mov	sp, r7
    c9ae:	bd80      	pop	{r7, pc}
    c9b0:	000219e4 	.word	0x000219e4
    c9b4:	00020e8c 	.word	0x00020e8c

0000c9b8 <mp_resume>:

// TODO: Unclear what to do with StopIterarion exception here.
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    c9b8:	b580      	push	{r7, lr}
    c9ba:	b096      	sub	sp, #88	; 0x58
    c9bc:	af00      	add	r7, sp, #0
    c9be:	60f8      	str	r0, [r7, #12]
    c9c0:	60b9      	str	r1, [r7, #8]
    c9c2:	607a      	str	r2, [r7, #4]
    c9c4:	603b      	str	r3, [r7, #0]
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    c9c6:	68bb      	ldr	r3, [r7, #8]
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	bf14      	ite	ne
    c9cc:	2301      	movne	r3, #1
    c9ce:	2300      	moveq	r3, #0
    c9d0:	b2da      	uxtb	r2, r3
    c9d2:	687b      	ldr	r3, [r7, #4]
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	bf14      	ite	ne
    c9d8:	2301      	movne	r3, #1
    c9da:	2300      	moveq	r3, #0
    c9dc:	b2db      	uxtb	r3, r3
    c9de:	4053      	eors	r3, r2
    c9e0:	b2db      	uxtb	r3, r3
    c9e2:	2b00      	cmp	r3, #0
    c9e4:	d106      	bne.n	c9f4 <mp_resume+0x3c>
    c9e6:	4b5f      	ldr	r3, [pc, #380]	; (cb64 <mp_resume+0x1ac>)
    c9e8:	4a5f      	ldr	r2, [pc, #380]	; (cb68 <mp_resume+0x1b0>)
    c9ea:	f240 41ca 	movw	r1, #1226	; 0x4ca
    c9ee:	485f      	ldr	r0, [pc, #380]	; (cb6c <mp_resume+0x1b4>)
    c9f0:	f00e fbf8 	bl	1b1e4 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    c9f4:	68f8      	ldr	r0, [r7, #12]
    c9f6:	f000 fe77 	bl	d6e8 <mp_obj_get_type>
    c9fa:	6578      	str	r0, [r7, #84]	; 0x54

    if (type == &mp_type_gen_instance) {
    c9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c9fe:	4a5c      	ldr	r2, [pc, #368]	; (cb70 <mp_resume+0x1b8>)
    ca00:	4293      	cmp	r3, r2
    ca02:	d107      	bne.n	ca14 <mp_resume+0x5c>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    ca04:	683b      	ldr	r3, [r7, #0]
    ca06:	687a      	ldr	r2, [r7, #4]
    ca08:	68b9      	ldr	r1, [r7, #8]
    ca0a:	68f8      	ldr	r0, [r7, #12]
    ca0c:	f003 f9f2 	bl	fdf4 <mp_obj_gen_resume>
    ca10:	4603      	mov	r3, r0
    ca12:	e0a3      	b.n	cb5c <mp_resume+0x1a4>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
    ca14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ca16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca18:	2b00      	cmp	r3, #0
    ca1a:	d012      	beq.n	ca42 <mp_resume+0x8a>
    ca1c:	68bb      	ldr	r3, [r7, #8]
    ca1e:	4a55      	ldr	r2, [pc, #340]	; (cb74 <mp_resume+0x1bc>)
    ca20:	4293      	cmp	r3, r2
    ca22:	d10e      	bne.n	ca42 <mp_resume+0x8a>
        mp_obj_t ret = type->iternext(self_in);
    ca24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ca26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca28:	68f8      	ldr	r0, [r7, #12]
    ca2a:	4798      	blx	r3
    ca2c:	6538      	str	r0, [r7, #80]	; 0x50
        *ret_val = ret;
    ca2e:	683b      	ldr	r3, [r7, #0]
    ca30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    ca32:	601a      	str	r2, [r3, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    ca34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ca36:	2b04      	cmp	r3, #4
    ca38:	d001      	beq.n	ca3e <mp_resume+0x86>
            return MP_VM_RETURN_YIELD;
    ca3a:	2301      	movs	r3, #1
    ca3c:	e08e      	b.n	cb5c <mp_resume+0x1a4>
        } else {
            // Emulate raise StopIteration()
            // Special case, handled in vm.c
            return MP_VM_RETURN_NORMAL;
    ca3e:	2300      	movs	r3, #0
    ca40:	e08c      	b.n	cb5c <mp_resume+0x1a4>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
    ca42:	68bb      	ldr	r3, [r7, #8]
    ca44:	4a4b      	ldr	r2, [pc, #300]	; (cb74 <mp_resume+0x1bc>)
    ca46:	4293      	cmp	r3, r2
    ca48:	d124      	bne.n	ca94 <mp_resume+0xdc>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    ca4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ca4e:	461a      	mov	r2, r3
    ca50:	211d      	movs	r1, #29
    ca52:	68f8      	ldr	r0, [r7, #12]
    ca54:	f7ff fe0a 	bl	c66c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    ca58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	d01a      	beq.n	ca94 <mp_resume+0xdc>
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    ca5e:	f107 0314 	add.w	r3, r7, #20
    ca62:	4618      	mov	r0, r3
    ca64:	f7f3 fc2a 	bl	2bc <nlr_push>
    ca68:	4603      	mov	r3, r0
    ca6a:	2b00      	cmp	r3, #0
    ca6c:	d10d      	bne.n	ca8a <mp_resume+0xd2>
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    ca6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ca72:	461a      	mov	r2, r3
    ca74:	2100      	movs	r1, #0
    ca76:	2000      	movs	r0, #0
    ca78:	f7ff f980 	bl	bd7c <mp_call_method_n_kw>
    ca7c:	4602      	mov	r2, r0
    ca7e:	683b      	ldr	r3, [r7, #0]
    ca80:	601a      	str	r2, [r3, #0]
                nlr_pop();
    ca82:	f7f3 fc09 	bl	298 <nlr_pop>
                return MP_VM_RETURN_YIELD;
    ca86:	2301      	movs	r3, #1
    ca88:	e068      	b.n	cb5c <mp_resume+0x1a4>
            } else {
                *ret_val = MP_OBJ_FROM_PTR(nlr.ret_val);
    ca8a:	69ba      	ldr	r2, [r7, #24]
    ca8c:	683b      	ldr	r3, [r7, #0]
    ca8e:	601a      	str	r2, [r3, #0]
                return MP_VM_RETURN_EXCEPTION;
    ca90:	2302      	movs	r3, #2
    ca92:	e063      	b.n	cb5c <mp_resume+0x1a4>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
    ca94:	68bb      	ldr	r3, [r7, #8]
    ca96:	2b00      	cmp	r3, #0
    ca98:	d015      	beq.n	cac6 <mp_resume+0x10e>
        mp_load_method(self_in, MP_QSTR_send, dest);
    ca9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ca9e:	461a      	mov	r2, r3
    caa0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    caa4:	68f8      	ldr	r0, [r7, #12]
    caa6:	f7ff fe43 	bl	c730 <mp_load_method>
        dest[2] = send_value;
    caaa:	68bb      	ldr	r3, [r7, #8]
    caac:	64fb      	str	r3, [r7, #76]	; 0x4c
        // TODO: This should have exception wrapping like __next__ case
        // above. Not done right away to think how to optimize native
        // generators better, see:
        // https://github.com/micropython/micropython/issues/2628
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    caae:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cab2:	461a      	mov	r2, r3
    cab4:	2100      	movs	r1, #0
    cab6:	2001      	movs	r0, #1
    cab8:	f7ff f960 	bl	bd7c <mp_call_method_n_kw>
    cabc:	4602      	mov	r2, r0
    cabe:	683b      	ldr	r3, [r7, #0]
    cac0:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_YIELD;
    cac2:	2301      	movs	r3, #1
    cac4:	e04a      	b.n	cb5c <mp_resume+0x1a4>
    }

    assert(throw_value != MP_OBJ_NULL);
    cac6:	687b      	ldr	r3, [r7, #4]
    cac8:	2b00      	cmp	r3, #0
    caca:	d106      	bne.n	cada <mp_resume+0x122>
    cacc:	4b2a      	ldr	r3, [pc, #168]	; (cb78 <mp_resume+0x1c0>)
    cace:	4a26      	ldr	r2, [pc, #152]	; (cb68 <mp_resume+0x1b0>)
    cad0:	f240 41fc 	movw	r1, #1276	; 0x4fc
    cad4:	4825      	ldr	r0, [pc, #148]	; (cb6c <mp_resume+0x1b4>)
    cad6:	f00e fb85 	bl	1b1e4 <__assert_func>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    cada:	6878      	ldr	r0, [r7, #4]
    cadc:	f000 fe04 	bl	d6e8 <mp_obj_get_type>
    cae0:	4603      	mov	r3, r0
    cae2:	4926      	ldr	r1, [pc, #152]	; (cb7c <mp_resume+0x1c4>)
    cae4:	4618      	mov	r0, r3
    cae6:	f00a fa11 	bl	16f0c <mp_obj_is_subclass_fast>
    caea:	4603      	mov	r3, r0
    caec:	2b00      	cmp	r3, #0
    caee:	d015      	beq.n	cb1c <mp_resume+0x164>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    caf0:	f107 0344 	add.w	r3, r7, #68	; 0x44
    caf4:	461a      	mov	r2, r3
    caf6:	21f9      	movs	r1, #249	; 0xf9
    caf8:	68f8      	ldr	r0, [r7, #12]
    cafa:	f7ff fdb7 	bl	c66c <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb00:	2b00      	cmp	r3, #0
    cb02:	d024      	beq.n	cb4e <mp_resume+0x196>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cb04:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb08:	461a      	mov	r2, r3
    cb0a:	2100      	movs	r1, #0
    cb0c:	2000      	movs	r0, #0
    cb0e:	f7ff f935 	bl	bd7c <mp_call_method_n_kw>
    cb12:	4602      	mov	r2, r0
    cb14:	683b      	ldr	r3, [r7, #0]
    cb16:	601a      	str	r2, [r3, #0]
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
    cb18:	2300      	movs	r3, #0
    cb1a:	e01f      	b.n	cb5c <mp_resume+0x1a4>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    cb1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb20:	461a      	mov	r2, r3
    cb22:	f240 116b 	movw	r1, #363	; 0x16b
    cb26:	68f8      	ldr	r0, [r7, #12]
    cb28:	f7ff fda0 	bl	c66c <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cb2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d00d      	beq.n	cb4e <mp_resume+0x196>
                dest[2] = throw_value;
    cb32:	687b      	ldr	r3, [r7, #4]
    cb34:	64fb      	str	r3, [r7, #76]	; 0x4c
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    cb36:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb3a:	461a      	mov	r2, r3
    cb3c:	2100      	movs	r1, #0
    cb3e:	2001      	movs	r0, #1
    cb40:	f7ff f91c 	bl	bd7c <mp_call_method_n_kw>
    cb44:	4602      	mov	r2, r0
    cb46:	683b      	ldr	r3, [r7, #0]
    cb48:	601a      	str	r2, [r3, #0]
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
    cb4a:	2301      	movs	r3, #1
    cb4c:	e006      	b.n	cb5c <mp_resume+0x1a4>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        *ret_val = mp_make_raise_obj(throw_value);
    cb4e:	6878      	ldr	r0, [r7, #4]
    cb50:	f000 f816 	bl	cb80 <mp_make_raise_obj>
    cb54:	4602      	mov	r2, r0
    cb56:	683b      	ldr	r3, [r7, #0]
    cb58:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_EXCEPTION;
    cb5a:	2302      	movs	r3, #2
    }
}
    cb5c:	4618      	mov	r0, r3
    cb5e:	3758      	adds	r7, #88	; 0x58
    cb60:	46bd      	mov	sp, r7
    cb62:	bd80      	pop	{r7, pc}
    cb64:	00020ea4 	.word	0x00020ea4
    cb68:	00020fec 	.word	0x00020fec
    cb6c:	00020d40 	.word	0x00020d40
    cb70:	000224cc 	.word	0x000224cc
    cb74:	00022b54 	.word	0x00022b54
    cb78:	00020ee0 	.word	0x00020ee0
    cb7c:	0002196c 	.word	0x0002196c

0000cb80 <mp_make_raise_obj>:

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    cb80:	b580      	push	{r7, lr}
    cb82:	b082      	sub	sp, #8
    cb84:	af00      	add	r7, sp, #0
    cb86:	6078      	str	r0, [r7, #4]
    DEBUG_printf("raise %p\n", o);
    if (mp_obj_is_exception_type(o)) {
    cb88:	6878      	ldr	r0, [r7, #4]
    cb8a:	f002 fcd7 	bl	f53c <mp_obj_is_exception_type>
    cb8e:	4603      	mov	r3, r0
    cb90:	2b00      	cmp	r3, #0
    cb92:	d007      	beq.n	cba4 <mp_make_raise_obj+0x24>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    cb94:	2300      	movs	r3, #0
    cb96:	2200      	movs	r2, #0
    cb98:	2100      	movs	r1, #0
    cb9a:	6878      	ldr	r0, [r7, #4]
    cb9c:	f7ff f8cd 	bl	bd3a <mp_call_function_n_kw>
    cba0:	4603      	mov	r3, r0
    cba2:	e00c      	b.n	cbbe <mp_make_raise_obj+0x3e>
    } else if (mp_obj_is_exception_instance(o)) {
    cba4:	6878      	ldr	r0, [r7, #4]
    cba6:	f002 fcf1 	bl	f58c <mp_obj_is_exception_instance>
    cbaa:	4603      	mov	r3, r0
    cbac:	2b00      	cmp	r3, #0
    cbae:	d001      	beq.n	cbb4 <mp_make_raise_obj+0x34>
        // o is an instance of an exception, so use it as the exception
        return o;
    cbb0:	687b      	ldr	r3, [r7, #4]
    cbb2:	e004      	b.n	cbbe <mp_make_raise_obj+0x3e>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    cbb4:	4904      	ldr	r1, [pc, #16]	; (cbc8 <mp_make_raise_obj+0x48>)
    cbb6:	4805      	ldr	r0, [pc, #20]	; (cbcc <mp_make_raise_obj+0x4c>)
    cbb8:	f002 fbc2 	bl	f340 <mp_obj_new_exception_msg>
    cbbc:	4603      	mov	r3, r0
    }
}
    cbbe:	4618      	mov	r0, r3
    cbc0:	3708      	adds	r7, #8
    cbc2:	46bd      	mov	sp, r7
    cbc4:	bd80      	pop	{r7, pc}
    cbc6:	bf00      	nop
    cbc8:	00020efc 	.word	0x00020efc
    cbcc:	00021e1c 	.word	0x00021e1c

0000cbd0 <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    cbd0:	b580      	push	{r7, lr}
    cbd2:	b08a      	sub	sp, #40	; 0x28
    cbd4:	af00      	add	r7, sp, #0
    cbd6:	60f8      	str	r0, [r7, #12]
    cbd8:	60b9      	str	r1, [r7, #8]
    cbda:	607a      	str	r2, [r7, #4]
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    cbdc:	68fb      	ldr	r3, [r7, #12]
    cbde:	009b      	lsls	r3, r3, #2
    cbe0:	f043 0302 	orr.w	r3, r3, #2
    cbe4:	617b      	str	r3, [r7, #20]
    args[1] = mp_const_none; // TODO should be globals
    cbe6:	4b09      	ldr	r3, [pc, #36]	; (cc0c <mp_import_name+0x3c>)
    cbe8:	61bb      	str	r3, [r7, #24]
    args[2] = mp_const_none; // TODO should be locals
    cbea:	4b08      	ldr	r3, [pc, #32]	; (cc0c <mp_import_name+0x3c>)
    cbec:	61fb      	str	r3, [r7, #28]
    args[3] = fromlist;
    cbee:	68bb      	ldr	r3, [r7, #8]
    cbf0:	623b      	str	r3, [r7, #32]
    args[4] = level; // must be 0; we don't yet support other values
    cbf2:	687b      	ldr	r3, [r7, #4]
    cbf4:	627b      	str	r3, [r7, #36]	; 0x24

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    cbf6:	f107 0314 	add.w	r3, r7, #20
    cbfa:	4619      	mov	r1, r3
    cbfc:	2005      	movs	r0, #5
    cbfe:	f00b fbe6 	bl	183ce <mp_builtin___import__>
    cc02:	4603      	mov	r3, r0
}
    cc04:	4618      	mov	r0, r3
    cc06:	3728      	adds	r7, #40	; 0x28
    cc08:	46bd      	mov	sp, r7
    cc0a:	bd80      	pop	{r7, pc}
    cc0c:	00022b54 	.word	0x00022b54

0000cc10 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    cc10:	b5b0      	push	{r4, r5, r7, lr}
    cc12:	b08e      	sub	sp, #56	; 0x38
    cc14:	af00      	add	r7, sp, #0
    cc16:	6078      	str	r0, [r7, #4]
    cc18:	6039      	str	r1, [r7, #0]
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    cc1a:	f107 0320 	add.w	r3, r7, #32
    cc1e:	461a      	mov	r2, r3
    cc20:	6839      	ldr	r1, [r7, #0]
    cc22:	6878      	ldr	r0, [r7, #4]
    cc24:	f7ff fd22 	bl	c66c <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	d00a      	beq.n	cc44 <mp_import_from+0x34>
    cc2e:	e000      	b.n	cc32 <mp_import_from+0x22>

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
        goto import_error;
    cc30:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    cc32:	683a      	ldr	r2, [r7, #0]
    cc34:	493a      	ldr	r1, [pc, #232]	; (cd20 <mp_import_from+0x110>)
    cc36:	483b      	ldr	r0, [pc, #236]	; (cd24 <mp_import_from+0x114>)
    cc38:	f002 fbe2 	bl	f400 <mp_obj_new_exception_msg_varg>
    cc3c:	4603      	mov	r3, r0
    cc3e:	4618      	mov	r0, r3
    cc40:	f7f3 fb4e 	bl	2e0 <nlr_jump>
    if (dest[0] != MP_OBJ_NULL) {
    cc44:	6a3b      	ldr	r3, [r7, #32]
    cc46:	2b00      	cmp	r3, #0
    cc48:	d001      	beq.n	cc4e <mp_import_from+0x3e>
        return dest[0];
    cc4a:	6a3b      	ldr	r3, [r7, #32]
    cc4c:	e063      	b.n	cd16 <mp_import_from+0x106>
    if (!mp_obj_is_package(module)) {
    cc4e:	6878      	ldr	r0, [r7, #4]
    cc50:	f00b faae 	bl	181b0 <mp_obj_is_package>
    cc54:	4603      	mov	r3, r0
    cc56:	f083 0301 	eor.w	r3, r3, #1
    cc5a:	b2db      	uxtb	r3, r3
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d1e7      	bne.n	cc30 <mp_import_from+0x20>
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    cc60:	f107 0320 	add.w	r3, r7, #32
    cc64:	461a      	mov	r2, r3
    cc66:	211b      	movs	r1, #27
    cc68:	6878      	ldr	r0, [r7, #4]
    cc6a:	f7ff fcff 	bl	c66c <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    cc6e:	6a3b      	ldr	r3, [r7, #32]
    cc70:	f107 021c 	add.w	r2, r7, #28
    cc74:	4611      	mov	r1, r2
    cc76:	4618      	mov	r0, r3
    cc78:	f008 fb3c 	bl	152f4 <mp_obj_str_get_data>
    cc7c:	6378      	str	r0, [r7, #52]	; 0x34

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    cc7e:	6838      	ldr	r0, [r7, #0]
    cc80:	f7f4 faa7 	bl	11d2 <qstr_len>
    cc84:	4602      	mov	r2, r0
    cc86:	69fb      	ldr	r3, [r7, #28]
    cc88:	4413      	add	r3, r2
    cc8a:	3301      	adds	r3, #1
    cc8c:	633b      	str	r3, [r7, #48]	; 0x30
    char *dot_name = mp_local_alloc(dot_name_len);
    cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc90:	3307      	adds	r3, #7
    cc92:	3307      	adds	r3, #7
    cc94:	08db      	lsrs	r3, r3, #3
    cc96:	00db      	lsls	r3, r3, #3
    cc98:	ebad 0d03 	sub.w	sp, sp, r3
    cc9c:	466b      	mov	r3, sp
    cc9e:	3307      	adds	r3, #7
    cca0:	08db      	lsrs	r3, r3, #3
    cca2:	00db      	lsls	r3, r3, #3
    cca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(dot_name, pkg_name, pkg_name_len);
    cca6:	69fb      	ldr	r3, [r7, #28]
    cca8:	461a      	mov	r2, r3
    ccaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ccac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ccae:	f00f fc57 	bl	1c560 <memcpy>
    dot_name[pkg_name_len] = '.';
    ccb2:	69fb      	ldr	r3, [r7, #28]
    ccb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ccb6:	4413      	add	r3, r2
    ccb8:	222e      	movs	r2, #46	; 0x2e
    ccba:	701a      	strb	r2, [r3, #0]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    ccbc:	69fb      	ldr	r3, [r7, #28]
    ccbe:	3301      	adds	r3, #1
    ccc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ccc2:	18d4      	adds	r4, r2, r3
    ccc4:	6838      	ldr	r0, [r7, #0]
    ccc6:	f7f4 fa93 	bl	11f0 <qstr_str>
    ccca:	4605      	mov	r5, r0
    cccc:	6838      	ldr	r0, [r7, #0]
    ccce:	f7f4 fa80 	bl	11d2 <qstr_len>
    ccd2:	4603      	mov	r3, r0
    ccd4:	461a      	mov	r2, r3
    ccd6:	4629      	mov	r1, r5
    ccd8:	4620      	mov	r0, r4
    ccda:	f00f fc41 	bl	1c560 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    ccde:	6b39      	ldr	r1, [r7, #48]	; 0x30
    cce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cce2:	f7f4 f9ac 	bl	103e <qstr_from_strn>
    cce6:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_local_free(dot_name);
    cce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ccea:	f7fe fb65 	bl	b3b8 <mp_local_free>

    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(dot_name_q);
    ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ccf0:	009b      	lsls	r3, r3, #2
    ccf2:	f043 0302 	orr.w	r3, r3, #2
    ccf6:	60bb      	str	r3, [r7, #8]
    args[1] = mp_const_none; // TODO should be globals
    ccf8:	4b0b      	ldr	r3, [pc, #44]	; (cd28 <mp_import_from+0x118>)
    ccfa:	60fb      	str	r3, [r7, #12]
    args[2] = mp_const_none; // TODO should be locals
    ccfc:	4b0a      	ldr	r3, [pc, #40]	; (cd28 <mp_import_from+0x118>)
    ccfe:	613b      	str	r3, [r7, #16]
    args[3] = mp_const_true; // Pass sentinel "non empty" value to force returning of leaf module
    cd00:	4b0a      	ldr	r3, [pc, #40]	; (cd2c <mp_import_from+0x11c>)
    cd02:	617b      	str	r3, [r7, #20]
    args[4] = MP_OBJ_NEW_SMALL_INT(0);
    cd04:	2301      	movs	r3, #1
    cd06:	61bb      	str	r3, [r7, #24]

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    cd08:	f107 0308 	add.w	r3, r7, #8
    cd0c:	4619      	mov	r1, r3
    cd0e:	2005      	movs	r0, #5
    cd10:	f00b fb5d 	bl	183ce <mp_builtin___import__>
    cd14:	4603      	mov	r3, r0

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    cd16:	4618      	mov	r0, r3
    cd18:	3738      	adds	r7, #56	; 0x38
    cd1a:	46bd      	mov	sp, r7
    cd1c:	bdb0      	pop	{r4, r5, r7, pc}
    cd1e:	bf00      	nop
    cd20:	00020f28 	.word	0x00020f28
    cd24:	00021b88 	.word	0x00021b88
    cd28:	00022b54 	.word	0x00022b54
    cd2c:	00021310 	.word	0x00021310

0000cd30 <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    cd30:	b580      	push	{r7, lr}
    cd32:	b086      	sub	sp, #24
    cd34:	af00      	add	r7, sp, #0
    cd36:	6078      	str	r0, [r7, #4]
    DEBUG_printf("import all %p\n", module);

    // TODO: Support __all__
    mp_map_t *map = &mp_obj_module_get_globals(module)->map;
    cd38:	6878      	ldr	r0, [r7, #4]
    cd3a:	f7fe fb31 	bl	b3a0 <mp_obj_module_get_globals>
    cd3e:	4603      	mov	r3, r0
    cd40:	3304      	adds	r3, #4
    cd42:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < map->alloc; i++) {
    cd44:	2300      	movs	r3, #0
    cd46:	617b      	str	r3, [r7, #20]
    cd48:	e022      	b.n	cd90 <mp_import_all+0x60>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    cd4a:	6979      	ldr	r1, [r7, #20]
    cd4c:	6938      	ldr	r0, [r7, #16]
    cd4e:	f7fe fae5 	bl	b31c <MP_MAP_SLOT_IS_FILLED>
    cd52:	4603      	mov	r3, r0
    cd54:	2b00      	cmp	r3, #0
    cd56:	d018      	beq.n	cd8a <mp_import_all+0x5a>
            qstr name = MP_OBJ_QSTR_VALUE(map->table[i].key);
    cd58:	693b      	ldr	r3, [r7, #16]
    cd5a:	689a      	ldr	r2, [r3, #8]
    cd5c:	697b      	ldr	r3, [r7, #20]
    cd5e:	00db      	lsls	r3, r3, #3
    cd60:	4413      	add	r3, r2
    cd62:	681b      	ldr	r3, [r3, #0]
    cd64:	089b      	lsrs	r3, r3, #2
    cd66:	60fb      	str	r3, [r7, #12]
            if (*qstr_str(name) != '_') {
    cd68:	68f8      	ldr	r0, [r7, #12]
    cd6a:	f7f4 fa41 	bl	11f0 <qstr_str>
    cd6e:	4603      	mov	r3, r0
    cd70:	781b      	ldrb	r3, [r3, #0]
    cd72:	2b5f      	cmp	r3, #95	; 0x5f
    cd74:	d009      	beq.n	cd8a <mp_import_all+0x5a>
                mp_store_name(name, map->table[i].value);
    cd76:	693b      	ldr	r3, [r7, #16]
    cd78:	689a      	ldr	r2, [r3, #8]
    cd7a:	697b      	ldr	r3, [r7, #20]
    cd7c:	00db      	lsls	r3, r3, #3
    cd7e:	4413      	add	r3, r2
    cd80:	685b      	ldr	r3, [r3, #4]
    cd82:	4619      	mov	r1, r3
    cd84:	68f8      	ldr	r0, [r7, #12]
    cd86:	f7fe fc0f 	bl	b5a8 <mp_store_name>
    for (size_t i = 0; i < map->alloc; i++) {
    cd8a:	697b      	ldr	r3, [r7, #20]
    cd8c:	3301      	adds	r3, #1
    cd8e:	617b      	str	r3, [r7, #20]
    cd90:	693b      	ldr	r3, [r7, #16]
    cd92:	685a      	ldr	r2, [r3, #4]
    cd94:	697b      	ldr	r3, [r7, #20]
    cd96:	429a      	cmp	r2, r3
    cd98:	d8d7      	bhi.n	cd4a <mp_import_all+0x1a>
            }
        }
    }
}
    cd9a:	bf00      	nop
    cd9c:	3718      	adds	r7, #24
    cd9e:	46bd      	mov	sp, r7
    cda0:	bd80      	pop	{r7, pc}

0000cda2 <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    cda2:	b580      	push	{r7, lr}
    cda4:	b098      	sub	sp, #96	; 0x60
    cda6:	af00      	add	r7, sp, #0
    cda8:	60f8      	str	r0, [r7, #12]
    cdaa:	60b9      	str	r1, [r7, #8]
    cdac:	607a      	str	r2, [r7, #4]
    cdae:	603b      	str	r3, [r7, #0]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    cdb0:	f7fe fb4e 	bl	b450 <mp_globals_get>
    cdb4:	4603      	mov	r3, r0
    cdb6:	653b      	str	r3, [r7, #80]	; 0x50
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    cdb8:	f7fe fb2f 	bl	b41a <mp_locals_get>
    cdbc:	4603      	mov	r3, r0
    cdbe:	64fb      	str	r3, [r7, #76]	; 0x4c

    // set new context
    mp_globals_set(globals);
    cdc0:	6878      	ldr	r0, [r7, #4]
    cdc2:	f7fe fb51 	bl	b468 <mp_globals_set>
    mp_locals_set(locals);
    cdc6:	6838      	ldr	r0, [r7, #0]
    cdc8:	f7fe fb32 	bl	b430 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    cdcc:	f107 031c 	add.w	r3, r7, #28
    cdd0:	4618      	mov	r0, r3
    cdd2:	f7f3 fa73 	bl	2bc <nlr_push>
    cdd6:	4603      	mov	r3, r0
    cdd8:	2b00      	cmp	r3, #0
    cdda:	d121      	bne.n	ce20 <mp_parse_compile_execute+0x7e>
        qstr source_name = lex->source_name;
    cddc:	68fb      	ldr	r3, [r7, #12]
    cdde:	681b      	ldr	r3, [r3, #0]
    cde0:	65fb      	str	r3, [r7, #92]	; 0x5c
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    cde2:	f107 0314 	add.w	r3, r7, #20
    cde6:	68ba      	ldr	r2, [r7, #8]
    cde8:	68f9      	ldr	r1, [r7, #12]
    cdea:	4618      	mov	r0, r3
    cdec:	f7f7 fa8a 	bl	4304 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    cdf0:	f107 0014 	add.w	r0, r7, #20
    cdf4:	2300      	movs	r3, #0
    cdf6:	2200      	movs	r2, #0
    cdf8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    cdfa:	f7fc fc8c 	bl	9716 <mp_compile>
    cdfe:	65b8      	str	r0, [r7, #88]	; 0x58
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    ce00:	6db8      	ldr	r0, [r7, #88]	; 0x58
    ce02:	f7fe ff65 	bl	bcd0 <mp_call_function_0>
    ce06:	6578      	str	r0, [r7, #84]	; 0x54
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    ce08:	f7f3 fa46 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
    ce0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ce0e:	4618      	mov	r0, r3
    ce10:	f7fe fb2a 	bl	b468 <mp_globals_set>
        mp_locals_set(old_locals);
    ce14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce16:	4618      	mov	r0, r3
    ce18:	f7fe fb0a 	bl	b430 <mp_locals_set>
        return ret;
    ce1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    ce1e:	e00b      	b.n	ce38 <mp_parse_compile_execute+0x96>
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
    ce20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    ce22:	4618      	mov	r0, r3
    ce24:	f7fe fb20 	bl	b468 <mp_globals_set>
        mp_locals_set(old_locals);
    ce28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ce2a:	4618      	mov	r0, r3
    ce2c:	f7fe fb00 	bl	b430 <mp_locals_set>
        nlr_jump(nlr.ret_val);
    ce30:	6a3b      	ldr	r3, [r7, #32]
    ce32:	4618      	mov	r0, r3
    ce34:	f7f3 fa54 	bl	2e0 <nlr_jump>
    }
}
    ce38:	4618      	mov	r0, r3
    ce3a:	3760      	adds	r7, #96	; 0x60
    ce3c:	46bd      	mov	sp, r7
    ce3e:	bd80      	pop	{r7, pc}

0000ce40 <m_malloc_fail>:

#endif // MICROPY_ENABLE_COMPILER

NORETURN void m_malloc_fail(size_t num_bytes) {
    ce40:	b580      	push	{r7, lr}
    ce42:	b082      	sub	sp, #8
    ce44:	af00      	add	r7, sp, #0
    ce46:	6078      	str	r0, [r7, #4]
    DEBUG_printf("memory allocation failed, allocating %u bytes\n", (uint)num_bytes);
    #if MICROPY_ENABLE_GC
    if (gc_is_locked()) {
    ce48:	f7f3 fbb4 	bl	5b4 <gc_is_locked>
    ce4c:	4603      	mov	r3, r0
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d003      	beq.n	ce5a <m_malloc_fail+0x1a>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    ce52:	4906      	ldr	r1, [pc, #24]	; (ce6c <m_malloc_fail+0x2c>)
    ce54:	4806      	ldr	r0, [pc, #24]	; (ce70 <m_malloc_fail+0x30>)
    ce56:	f000 f80f 	bl	ce78 <mp_raise_msg>
    }
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    ce5a:	687a      	ldr	r2, [r7, #4]
    ce5c:	4905      	ldr	r1, [pc, #20]	; (ce74 <m_malloc_fail+0x34>)
    ce5e:	4804      	ldr	r0, [pc, #16]	; (ce70 <m_malloc_fail+0x30>)
    ce60:	f002 face 	bl	f400 <mp_obj_new_exception_msg_varg>
    ce64:	4603      	mov	r3, r0
    ce66:	4618      	mov	r0, r3
    ce68:	f7f3 fa3a 	bl	2e0 <nlr_jump>
    ce6c:	00020f40 	.word	0x00020f40
    ce70:	00021c78 	.word	0x00021c78
    ce74:	00020f6c 	.word	0x00020f6c

0000ce78 <mp_raise_msg>:
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    ce78:	b580      	push	{r7, lr}
    ce7a:	b082      	sub	sp, #8
    ce7c:	af00      	add	r7, sp, #0
    ce7e:	6078      	str	r0, [r7, #4]
    ce80:	6039      	str	r1, [r7, #0]
    if (msg == NULL) {
    ce82:	683b      	ldr	r3, [r7, #0]
    ce84:	2b00      	cmp	r3, #0
    ce86:	d106      	bne.n	ce96 <mp_raise_msg+0x1e>
        nlr_raise(mp_obj_new_exception(exc_type));
    ce88:	6878      	ldr	r0, [r7, #4]
    ce8a:	f002 fa15 	bl	f2b8 <mp_obj_new_exception>
    ce8e:	4603      	mov	r3, r0
    ce90:	4618      	mov	r0, r3
    ce92:	f7f3 fa25 	bl	2e0 <nlr_jump>
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    ce96:	6839      	ldr	r1, [r7, #0]
    ce98:	6878      	ldr	r0, [r7, #4]
    ce9a:	f002 fa51 	bl	f340 <mp_obj_new_exception_msg>
    ce9e:	4603      	mov	r3, r0
    cea0:	4618      	mov	r0, r3
    cea2:	f7f3 fa1d 	bl	2e0 <nlr_jump>

0000cea6 <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    cea6:	b580      	push	{r7, lr}
    cea8:	b082      	sub	sp, #8
    ceaa:	af00      	add	r7, sp, #0
    ceac:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_ValueError, msg);
    ceae:	6879      	ldr	r1, [r7, #4]
    ceb0:	4801      	ldr	r0, [pc, #4]	; (ceb8 <mp_raise_ValueError+0x12>)
    ceb2:	f7ff ffe1 	bl	ce78 <mp_raise_msg>
    ceb6:	bf00      	nop
    ceb8:	00021e58 	.word	0x00021e58

0000cebc <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    cebc:	b580      	push	{r7, lr}
    cebe:	b082      	sub	sp, #8
    cec0:	af00      	add	r7, sp, #0
    cec2:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_TypeError, msg);
    cec4:	6879      	ldr	r1, [r7, #4]
    cec6:	4801      	ldr	r0, [pc, #4]	; (cecc <mp_raise_TypeError+0x10>)
    cec8:	f7ff ffd6 	bl	ce78 <mp_raise_msg>
    cecc:	00021e1c 	.word	0x00021e1c

0000ced0 <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    ced0:	b580      	push	{r7, lr}
    ced2:	b082      	sub	sp, #8
    ced4:	af00      	add	r7, sp, #0
    ced6:	6078      	str	r0, [r7, #4]
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    ced8:	687b      	ldr	r3, [r7, #4]
    ceda:	005b      	lsls	r3, r3, #1
    cedc:	f043 0301 	orr.w	r3, r3, #1
    cee0:	4619      	mov	r1, r3
    cee2:	4803      	ldr	r0, [pc, #12]	; (cef0 <mp_raise_OSError+0x20>)
    cee4:	f002 f9f6 	bl	f2d4 <mp_obj_new_exception_arg1>
    cee8:	4603      	mov	r3, r0
    ceea:	4618      	mov	r0, r3
    ceec:	f7f3 f9f8 	bl	2e0 <nlr_jump>
    cef0:	00021cf0 	.word	0x00021cf0

0000cef4 <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    cef4:	b580      	push	{r7, lr}
    cef6:	b082      	sub	sp, #8
    cef8:	af00      	add	r7, sp, #0
    cefa:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    cefc:	6879      	ldr	r1, [r7, #4]
    cefe:	4801      	ldr	r0, [pc, #4]	; (cf04 <mp_raise_NotImplementedError+0x10>)
    cf00:	f7ff ffba 	bl	ce78 <mp_raise_msg>
    cf04:	00021d68 	.word	0x00021d68

0000cf08 <mp_arg_check_num>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    cf08:	b580      	push	{r7, lr}
    cf0a:	b084      	sub	sp, #16
    cf0c:	af00      	add	r7, sp, #0
    cf0e:	60f8      	str	r0, [r7, #12]
    cf10:	60b9      	str	r1, [r7, #8]
    cf12:	607a      	str	r2, [r7, #4]
    cf14:	603b      	str	r3, [r7, #0]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    if (n_kw && !takes_kw) {
    cf16:	68bb      	ldr	r3, [r7, #8]
    cf18:	2b00      	cmp	r3, #0
    cf1a:	d007      	beq.n	cf2c <mp_arg_check_num+0x24>
    cf1c:	7e3b      	ldrb	r3, [r7, #24]
    cf1e:	f083 0301 	eor.w	r3, r3, #1
    cf22:	b2db      	uxtb	r3, r3
    cf24:	2b00      	cmp	r3, #0
    cf26:	d001      	beq.n	cf2c <mp_arg_check_num+0x24>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    cf28:	f000 f8e8 	bl	d0fc <mp_arg_error_terse_mismatch>
        } else {
            mp_raise_TypeError("function does not take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    cf2c:	687a      	ldr	r2, [r7, #4]
    cf2e:	683b      	ldr	r3, [r7, #0]
    cf30:	429a      	cmp	r2, r3
    cf32:	d105      	bne.n	cf40 <mp_arg_check_num+0x38>
        if (n_args != n_args_min) {
    cf34:	68fa      	ldr	r2, [r7, #12]
    cf36:	687b      	ldr	r3, [r7, #4]
    cf38:	429a      	cmp	r2, r3
    cf3a:	d00d      	beq.n	cf58 <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cf3c:	f000 f8de 	bl	d0fc <mp_arg_error_terse_mismatch>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    cf40:	68fa      	ldr	r2, [r7, #12]
    cf42:	687b      	ldr	r3, [r7, #4]
    cf44:	429a      	cmp	r2, r3
    cf46:	d201      	bcs.n	cf4c <mp_arg_check_num+0x44>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cf48:	f000 f8d8 	bl	d0fc <mp_arg_error_terse_mismatch>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    cf4c:	68fa      	ldr	r2, [r7, #12]
    cf4e:	683b      	ldr	r3, [r7, #0]
    cf50:	429a      	cmp	r2, r3
    cf52:	d901      	bls.n	cf58 <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cf54:	f000 f8d2 	bl	d0fc <mp_arg_error_terse_mismatch>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    cf58:	bf00      	nop
    cf5a:	3710      	adds	r7, #16
    cf5c:	46bd      	mov	sp, r7
    cf5e:	bd80      	pop	{r7, pc}

0000cf60 <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    cf60:	b590      	push	{r4, r7, lr}
    cf62:	b08b      	sub	sp, #44	; 0x2c
    cf64:	af00      	add	r7, sp, #0
    cf66:	60f8      	str	r0, [r7, #12]
    cf68:	60b9      	str	r1, [r7, #8]
    cf6a:	607a      	str	r2, [r7, #4]
    cf6c:	603b      	str	r3, [r7, #0]
    size_t pos_found = 0, kws_found = 0;
    cf6e:	2300      	movs	r3, #0
    cf70:	627b      	str	r3, [r7, #36]	; 0x24
    cf72:	2300      	movs	r3, #0
    cf74:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < n_allowed; i++) {
    cf76:	2300      	movs	r3, #0
    cf78:	61fb      	str	r3, [r7, #28]
    cf7a:	e07e      	b.n	d07a <mp_arg_parse_all+0x11a>
        mp_obj_t given_arg;
        if (i < n_pos) {
    cf7c:	69fa      	ldr	r2, [r7, #28]
    cf7e:	68fb      	ldr	r3, [r7, #12]
    cf80:	429a      	cmp	r2, r3
    cf82:	d212      	bcs.n	cfaa <mp_arg_parse_all+0x4a>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    cf84:	69fb      	ldr	r3, [r7, #28]
    cf86:	00db      	lsls	r3, r3, #3
    cf88:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf8a:	4413      	add	r3, r2
    cf8c:	885b      	ldrh	r3, [r3, #2]
    cf8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    cf92:	2b00      	cmp	r3, #0
    cf94:	d17b      	bne.n	d08e <mp_arg_parse_all+0x12e>
                goto extra_positional;
            }
            pos_found++;
    cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf98:	3301      	adds	r3, #1
    cf9a:	627b      	str	r3, [r7, #36]	; 0x24
            given_arg = pos[i];
    cf9c:	69fb      	ldr	r3, [r7, #28]
    cf9e:	009b      	lsls	r3, r3, #2
    cfa0:	68ba      	ldr	r2, [r7, #8]
    cfa2:	4413      	add	r3, r2
    cfa4:	681b      	ldr	r3, [r3, #0]
    cfa6:	61bb      	str	r3, [r7, #24]
    cfa8:	e02c      	b.n	d004 <mp_arg_parse_all+0xa4>
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    cfaa:	69fb      	ldr	r3, [r7, #28]
    cfac:	00db      	lsls	r3, r3, #3
    cfae:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfb0:	4413      	add	r3, r2
    cfb2:	881b      	ldrh	r3, [r3, #0]
    cfb4:	009b      	lsls	r3, r3, #2
    cfb6:	f043 0302 	orr.w	r3, r3, #2
    cfba:	2200      	movs	r2, #0
    cfbc:	4619      	mov	r1, r3
    cfbe:	6878      	ldr	r0, [r7, #4]
    cfc0:	f000 f9e8 	bl	d394 <mp_map_lookup>
    cfc4:	6178      	str	r0, [r7, #20]
            if (kw == NULL) {
    cfc6:	697b      	ldr	r3, [r7, #20]
    cfc8:	2b00      	cmp	r3, #0
    cfca:	d115      	bne.n	cff8 <mp_arg_parse_all+0x98>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    cfcc:	69fb      	ldr	r3, [r7, #28]
    cfce:	00db      	lsls	r3, r3, #3
    cfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfd2:	4413      	add	r3, r2
    cfd4:	885b      	ldrh	r3, [r3, #2]
    cfd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d001      	beq.n	cfe2 <mp_arg_parse_all+0x82>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_arg_error_terse_mismatch();
    cfde:	f000 f88d 	bl	d0fc <mp_arg_error_terse_mismatch>
                    } else {
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "'%q' argument required", allowed[i].qst));
                    }
                }
                out_vals[i] = allowed[i].defval;
    cfe2:	69fb      	ldr	r3, [r7, #28]
    cfe4:	009b      	lsls	r3, r3, #2
    cfe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfe8:	4413      	add	r3, r2
    cfea:	69fa      	ldr	r2, [r7, #28]
    cfec:	00d2      	lsls	r2, r2, #3
    cfee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cff0:	440a      	add	r2, r1
    cff2:	6852      	ldr	r2, [r2, #4]
    cff4:	601a      	str	r2, [r3, #0]
                continue;
    cff6:	e03d      	b.n	d074 <mp_arg_parse_all+0x114>
            } else {
                kws_found++;
    cff8:	6a3b      	ldr	r3, [r7, #32]
    cffa:	3301      	adds	r3, #1
    cffc:	623b      	str	r3, [r7, #32]
                given_arg = kw->value;
    cffe:	697b      	ldr	r3, [r7, #20]
    d000:	685b      	ldr	r3, [r3, #4]
    d002:	61bb      	str	r3, [r7, #24]
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    d004:	69fb      	ldr	r3, [r7, #28]
    d006:	00db      	lsls	r3, r3, #3
    d008:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d00a:	4413      	add	r3, r2
    d00c:	885b      	ldrh	r3, [r3, #2]
    d00e:	b2db      	uxtb	r3, r3
    d010:	2b01      	cmp	r3, #1
    d012:	d109      	bne.n	d028 <mp_arg_parse_all+0xc8>
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    d014:	69fb      	ldr	r3, [r7, #28]
    d016:	009b      	lsls	r3, r3, #2
    d018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d01a:	18d4      	adds	r4, r2, r3
    d01c:	69b8      	ldr	r0, [r7, #24]
    d01e:	f000 fc3f 	bl	d8a0 <mp_obj_is_true>
    d022:	4603      	mov	r3, r0
    d024:	7023      	strb	r3, [r4, #0]
    d026:	e025      	b.n	d074 <mp_arg_parse_all+0x114>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    d028:	69fb      	ldr	r3, [r7, #28]
    d02a:	00db      	lsls	r3, r3, #3
    d02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d02e:	4413      	add	r3, r2
    d030:	885b      	ldrh	r3, [r3, #2]
    d032:	b2db      	uxtb	r3, r3
    d034:	2b02      	cmp	r3, #2
    d036:	d109      	bne.n	d04c <mp_arg_parse_all+0xec>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    d038:	69fb      	ldr	r3, [r7, #28]
    d03a:	009b      	lsls	r3, r3, #2
    d03c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d03e:	18d4      	adds	r4, r2, r3
    d040:	69b8      	ldr	r0, [r7, #24]
    d042:	f000 fd2d 	bl	daa0 <mp_obj_get_int>
    d046:	4603      	mov	r3, r0
    d048:	6023      	str	r3, [r4, #0]
    d04a:	e013      	b.n	d074 <mp_arg_parse_all+0x114>
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    d04c:	69fb      	ldr	r3, [r7, #28]
    d04e:	00db      	lsls	r3, r3, #3
    d050:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d052:	4413      	add	r3, r2
    d054:	885b      	ldrh	r3, [r3, #2]
    d056:	b2db      	uxtb	r3, r3
    d058:	2b03      	cmp	r3, #3
    d05a:	d005      	beq.n	d068 <mp_arg_parse_all+0x108>
    d05c:	4b14      	ldr	r3, [pc, #80]	; (d0b0 <mp_arg_parse_all+0x150>)
    d05e:	4a15      	ldr	r2, [pc, #84]	; (d0b4 <mp_arg_parse_all+0x154>)
    d060:	216b      	movs	r1, #107	; 0x6b
    d062:	4815      	ldr	r0, [pc, #84]	; (d0b8 <mp_arg_parse_all+0x158>)
    d064:	f00e f8be 	bl	1b1e4 <__assert_func>
            out_vals[i].u_obj = given_arg;
    d068:	69fb      	ldr	r3, [r7, #28]
    d06a:	009b      	lsls	r3, r3, #2
    d06c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d06e:	4413      	add	r3, r2
    d070:	69ba      	ldr	r2, [r7, #24]
    d072:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n_allowed; i++) {
    d074:	69fb      	ldr	r3, [r7, #28]
    d076:	3301      	adds	r3, #1
    d078:	61fb      	str	r3, [r7, #28]
    d07a:	69fa      	ldr	r2, [r7, #28]
    d07c:	683b      	ldr	r3, [r7, #0]
    d07e:	429a      	cmp	r2, r3
    d080:	f4ff af7c 	bcc.w	cf7c <mp_arg_parse_all+0x1c>
        }
    }
    if (pos_found < n_pos) {
    d084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d086:	68fb      	ldr	r3, [r7, #12]
    d088:	429a      	cmp	r2, r3
    d08a:	d203      	bcs.n	d094 <mp_arg_parse_all+0x134>
    d08c:	e000      	b.n	d090 <mp_arg_parse_all+0x130>
                goto extra_positional;
    d08e:	bf00      	nop
        extra_positional:
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d090:	f000 f834 	bl	d0fc <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    d094:	687b      	ldr	r3, [r7, #4]
    d096:	681b      	ldr	r3, [r3, #0]
    d098:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d09c:	461a      	mov	r2, r3
    d09e:	6a3b      	ldr	r3, [r7, #32]
    d0a0:	429a      	cmp	r2, r3
    d0a2:	d901      	bls.n	d0a8 <mp_arg_parse_all+0x148>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d0a4:	f000 f82a 	bl	d0fc <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    d0a8:	bf00      	nop
    d0aa:	372c      	adds	r7, #44	; 0x2c
    d0ac:	46bd      	mov	sp, r7
    d0ae:	bd90      	pop	{r4, r7, pc}
    d0b0:	00020ff8 	.word	0x00020ff8
    d0b4:	0002105c 	.word	0x0002105c
    d0b8:	0002102c 	.word	0x0002102c

0000d0bc <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d0bc:	b580      	push	{r7, lr}
    d0be:	b08a      	sub	sp, #40	; 0x28
    d0c0:	af02      	add	r7, sp, #8
    d0c2:	60f8      	str	r0, [r7, #12]
    d0c4:	60b9      	str	r1, [r7, #8]
    d0c6:	607a      	str	r2, [r7, #4]
    d0c8:	603b      	str	r3, [r7, #0]
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    d0ca:	68fb      	ldr	r3, [r7, #12]
    d0cc:	009b      	lsls	r3, r3, #2
    d0ce:	687a      	ldr	r2, [r7, #4]
    d0d0:	441a      	add	r2, r3
    d0d2:	f107 0314 	add.w	r3, r7, #20
    d0d6:	68b9      	ldr	r1, [r7, #8]
    d0d8:	4618      	mov	r0, r3
    d0da:	f000 f896 	bl	d20a <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    d0de:	f107 0214 	add.w	r2, r7, #20
    d0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0e4:	9301      	str	r3, [sp, #4]
    d0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d0e8:	9300      	str	r3, [sp, #0]
    d0ea:	683b      	ldr	r3, [r7, #0]
    d0ec:	6879      	ldr	r1, [r7, #4]
    d0ee:	68f8      	ldr	r0, [r7, #12]
    d0f0:	f7ff ff36 	bl	cf60 <mp_arg_parse_all>
}
    d0f4:	bf00      	nop
    d0f6:	3720      	adds	r7, #32
    d0f8:	46bd      	mov	sp, r7
    d0fa:	bd80      	pop	{r7, pc}

0000d0fc <mp_arg_error_terse_mismatch>:

NORETURN void mp_arg_error_terse_mismatch(void) {
    d0fc:	b580      	push	{r7, lr}
    d0fe:	af00      	add	r7, sp, #0
    mp_raise_TypeError("argument num/types mismatch");
    d100:	4801      	ldr	r0, [pc, #4]	; (d108 <mp_arg_error_terse_mismatch+0xc>)
    d102:	f7ff fedb 	bl	cebc <mp_raise_TypeError>
    d106:	bf00      	nop
    d108:	00021040 	.word	0x00021040

0000d10c <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d10c:	b480      	push	{r7}
    d10e:	b083      	sub	sp, #12
    d110:	af00      	add	r7, sp, #0
    d112:	6078      	str	r0, [r7, #4]
    d114:	687b      	ldr	r3, [r7, #4]
    d116:	f003 0303 	and.w	r3, r3, #3
    d11a:	2b02      	cmp	r3, #2
    d11c:	bf0c      	ite	eq
    d11e:	2301      	moveq	r3, #1
    d120:	2300      	movne	r3, #0
    d122:	b2db      	uxtb	r3, r3
    d124:	4618      	mov	r0, r3
    d126:	370c      	adds	r7, #12
    d128:	46bd      	mov	sp, r7
    d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d12e:	4770      	bx	lr

0000d130 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d130:	b480      	push	{r7}
    d132:	b083      	sub	sp, #12
    d134:	af00      	add	r7, sp, #0
    d136:	6078      	str	r0, [r7, #4]
    d138:	687b      	ldr	r3, [r7, #4]
    d13a:	f003 0303 	and.w	r3, r3, #3
    d13e:	2b00      	cmp	r3, #0
    d140:	bf0c      	ite	eq
    d142:	2301      	moveq	r3, #1
    d144:	2300      	movne	r3, #0
    d146:	b2db      	uxtb	r3, r3
    d148:	4618      	mov	r0, r3
    d14a:	370c      	adds	r7, #12
    d14c:	46bd      	mov	sp, r7
    d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d152:	4770      	bx	lr

0000d154 <get_hash_alloc_greater_or_equal_to>:
    17, 23, 29, 37, 47, 59, 73, // *1.25
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    d154:	b480      	push	{r7}
    d156:	b085      	sub	sp, #20
    d158:	af00      	add	r7, sp, #0
    d15a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d15c:	2300      	movs	r3, #0
    d15e:	60fb      	str	r3, [r7, #12]
    d160:	e00f      	b.n	d182 <get_hash_alloc_greater_or_equal_to+0x2e>
        if (hash_allocation_sizes[i] >= x) {
    d162:	4a0f      	ldr	r2, [pc, #60]	; (d1a0 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d164:	68fb      	ldr	r3, [r7, #12]
    d166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d16a:	461a      	mov	r2, r3
    d16c:	687b      	ldr	r3, [r7, #4]
    d16e:	429a      	cmp	r2, r3
    d170:	d304      	bcc.n	d17c <get_hash_alloc_greater_or_equal_to+0x28>
            return hash_allocation_sizes[i];
    d172:	4a0b      	ldr	r2, [pc, #44]	; (d1a0 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d174:	68fb      	ldr	r3, [r7, #12]
    d176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d17a:	e00b      	b.n	d194 <get_hash_alloc_greater_or_equal_to+0x40>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d17c:	68fb      	ldr	r3, [r7, #12]
    d17e:	3301      	adds	r3, #1
    d180:	60fb      	str	r3, [r7, #12]
    d182:	68fb      	ldr	r3, [r7, #12]
    d184:	2b21      	cmp	r3, #33	; 0x21
    d186:	d9ec      	bls.n	d162 <get_hash_alloc_greater_or_equal_to+0xe>
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    d188:	687b      	ldr	r3, [r7, #4]
    d18a:	085a      	lsrs	r2, r3, #1
    d18c:	687b      	ldr	r3, [r7, #4]
    d18e:	4413      	add	r3, r2
    d190:	f043 0301 	orr.w	r3, r3, #1
}
    d194:	4618      	mov	r0, r3
    d196:	3714      	adds	r7, #20
    d198:	46bd      	mov	sp, r7
    d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d19e:	4770      	bx	lr
    d1a0:	0002107c 	.word	0x0002107c

0000d1a4 <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    d1a4:	b580      	push	{r7, lr}
    d1a6:	b082      	sub	sp, #8
    d1a8:	af00      	add	r7, sp, #0
    d1aa:	6078      	str	r0, [r7, #4]
    d1ac:	6039      	str	r1, [r7, #0]
    if (n == 0) {
    d1ae:	683b      	ldr	r3, [r7, #0]
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	d106      	bne.n	d1c2 <mp_map_init+0x1e>
        map->alloc = 0;
    d1b4:	687b      	ldr	r3, [r7, #4]
    d1b6:	2200      	movs	r2, #0
    d1b8:	605a      	str	r2, [r3, #4]
        map->table = NULL;
    d1ba:	687b      	ldr	r3, [r7, #4]
    d1bc:	2200      	movs	r2, #0
    d1be:	609a      	str	r2, [r3, #8]
    d1c0:	e00b      	b.n	d1da <mp_map_init+0x36>
    } else {
        map->alloc = n;
    d1c2:	687b      	ldr	r3, [r7, #4]
    d1c4:	683a      	ldr	r2, [r7, #0]
    d1c6:	605a      	str	r2, [r3, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    d1c8:	687b      	ldr	r3, [r7, #4]
    d1ca:	685b      	ldr	r3, [r3, #4]
    d1cc:	00db      	lsls	r3, r3, #3
    d1ce:	4618      	mov	r0, r3
    d1d0:	f7f3 f8c9 	bl	366 <m_malloc0>
    d1d4:	4602      	mov	r2, r0
    d1d6:	687b      	ldr	r3, [r7, #4]
    d1d8:	609a      	str	r2, [r3, #8]
    }
    map->used = 0;
    d1da:	687a      	ldr	r2, [r7, #4]
    d1dc:	6813      	ldr	r3, [r2, #0]
    d1de:	f36f 03df 	bfc	r3, #3, #29
    d1e2:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d1e4:	687a      	ldr	r2, [r7, #4]
    d1e6:	7813      	ldrb	r3, [r2, #0]
    d1e8:	f043 0301 	orr.w	r3, r3, #1
    d1ec:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d1ee:	687a      	ldr	r2, [r7, #4]
    d1f0:	7813      	ldrb	r3, [r2, #0]
    d1f2:	f36f 0341 	bfc	r3, #1, #1
    d1f6:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 0;
    d1f8:	687a      	ldr	r2, [r7, #4]
    d1fa:	7813      	ldrb	r3, [r2, #0]
    d1fc:	f36f 0382 	bfc	r3, #2, #1
    d200:	7013      	strb	r3, [r2, #0]
}
    d202:	bf00      	nop
    d204:	3708      	adds	r7, #8
    d206:	46bd      	mov	sp, r7
    d208:	bd80      	pop	{r7, pc}

0000d20a <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    d20a:	b480      	push	{r7}
    d20c:	b085      	sub	sp, #20
    d20e:	af00      	add	r7, sp, #0
    d210:	60f8      	str	r0, [r7, #12]
    d212:	60b9      	str	r1, [r7, #8]
    d214:	607a      	str	r2, [r7, #4]
    map->alloc = n;
    d216:	68fb      	ldr	r3, [r7, #12]
    d218:	68ba      	ldr	r2, [r7, #8]
    d21a:	605a      	str	r2, [r3, #4]
    map->used = n;
    d21c:	68bb      	ldr	r3, [r7, #8]
    d21e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d222:	68fa      	ldr	r2, [r7, #12]
    d224:	6813      	ldr	r3, [r2, #0]
    d226:	f361 03df 	bfi	r3, r1, #3, #29
    d22a:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d22c:	68fa      	ldr	r2, [r7, #12]
    d22e:	7813      	ldrb	r3, [r2, #0]
    d230:	f043 0301 	orr.w	r3, r3, #1
    d234:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 1;
    d236:	68fa      	ldr	r2, [r7, #12]
    d238:	7813      	ldrb	r3, [r2, #0]
    d23a:	f043 0302 	orr.w	r3, r3, #2
    d23e:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 1;
    d240:	68fa      	ldr	r2, [r7, #12]
    d242:	7813      	ldrb	r3, [r2, #0]
    d244:	f043 0304 	orr.w	r3, r3, #4
    d248:	7013      	strb	r3, [r2, #0]
    map->table = (mp_map_elem_t*)table;
    d24a:	68fb      	ldr	r3, [r7, #12]
    d24c:	687a      	ldr	r2, [r7, #4]
    d24e:	609a      	str	r2, [r3, #8]
}
    d250:	bf00      	nop
    d252:	3714      	adds	r7, #20
    d254:	46bd      	mov	sp, r7
    d256:	f85d 7b04 	ldr.w	r7, [sp], #4
    d25a:	4770      	bx	lr

0000d25c <mp_map_deinit>:

// Differentiate from mp_map_clear() - semantics is different
void mp_map_deinit(mp_map_t *map) {
    d25c:	b580      	push	{r7, lr}
    d25e:	b082      	sub	sp, #8
    d260:	af00      	add	r7, sp, #0
    d262:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d264:	687b      	ldr	r3, [r7, #4]
    d266:	781b      	ldrb	r3, [r3, #0]
    d268:	f003 0302 	and.w	r3, r3, #2
    d26c:	b2db      	uxtb	r3, r3
    d26e:	2b00      	cmp	r3, #0
    d270:	d104      	bne.n	d27c <mp_map_deinit+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d272:	687b      	ldr	r3, [r7, #4]
    d274:	689b      	ldr	r3, [r3, #8]
    d276:	4618      	mov	r0, r3
    d278:	f7f3 f8ae 	bl	3d8 <m_free>
    }
    map->used = map->alloc = 0;
    d27c:	687b      	ldr	r3, [r7, #4]
    d27e:	2200      	movs	r2, #0
    d280:	605a      	str	r2, [r3, #4]
    d282:	687a      	ldr	r2, [r7, #4]
    d284:	6813      	ldr	r3, [r2, #0]
    d286:	f36f 03df 	bfc	r3, #3, #29
    d28a:	6013      	str	r3, [r2, #0]
}
    d28c:	bf00      	nop
    d28e:	3708      	adds	r7, #8
    d290:	46bd      	mov	sp, r7
    d292:	bd80      	pop	{r7, pc}

0000d294 <mp_map_clear>:

void mp_map_clear(mp_map_t *map) {
    d294:	b580      	push	{r7, lr}
    d296:	b082      	sub	sp, #8
    d298:	af00      	add	r7, sp, #0
    d29a:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d29c:	687b      	ldr	r3, [r7, #4]
    d29e:	781b      	ldrb	r3, [r3, #0]
    d2a0:	f003 0302 	and.w	r3, r3, #2
    d2a4:	b2db      	uxtb	r3, r3
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d104      	bne.n	d2b4 <mp_map_clear+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d2aa:	687b      	ldr	r3, [r7, #4]
    d2ac:	689b      	ldr	r3, [r3, #8]
    d2ae:	4618      	mov	r0, r3
    d2b0:	f7f3 f892 	bl	3d8 <m_free>
    }
    map->alloc = 0;
    d2b4:	687b      	ldr	r3, [r7, #4]
    d2b6:	2200      	movs	r2, #0
    d2b8:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d2ba:	687a      	ldr	r2, [r7, #4]
    d2bc:	6813      	ldr	r3, [r2, #0]
    d2be:	f36f 03df 	bfc	r3, #3, #29
    d2c2:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d2c4:	687a      	ldr	r2, [r7, #4]
    d2c6:	7813      	ldrb	r3, [r2, #0]
    d2c8:	f043 0301 	orr.w	r3, r3, #1
    d2cc:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d2ce:	687a      	ldr	r2, [r7, #4]
    d2d0:	7813      	ldrb	r3, [r2, #0]
    d2d2:	f36f 0341 	bfc	r3, #1, #1
    d2d6:	7013      	strb	r3, [r2, #0]
    map->table = NULL;
    d2d8:	687b      	ldr	r3, [r7, #4]
    d2da:	2200      	movs	r2, #0
    d2dc:	609a      	str	r2, [r3, #8]
}
    d2de:	bf00      	nop
    d2e0:	3708      	adds	r7, #8
    d2e2:	46bd      	mov	sp, r7
    d2e4:	bd80      	pop	{r7, pc}

0000d2e6 <mp_map_rehash>:

STATIC void mp_map_rehash(mp_map_t *map) {
    d2e6:	b580      	push	{r7, lr}
    d2e8:	b088      	sub	sp, #32
    d2ea:	af00      	add	r7, sp, #0
    d2ec:	6078      	str	r0, [r7, #4]
    size_t old_alloc = map->alloc;
    d2ee:	687b      	ldr	r3, [r7, #4]
    d2f0:	685b      	ldr	r3, [r3, #4]
    d2f2:	61bb      	str	r3, [r7, #24]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    d2f4:	687b      	ldr	r3, [r7, #4]
    d2f6:	685b      	ldr	r3, [r3, #4]
    d2f8:	3301      	adds	r3, #1
    d2fa:	4618      	mov	r0, r3
    d2fc:	f7ff ff2a 	bl	d154 <get_hash_alloc_greater_or_equal_to>
    d300:	6178      	str	r0, [r7, #20]
    DEBUG_printf("mp_map_rehash(%p): " UINT_FMT " -> " UINT_FMT "\n", map, old_alloc, new_alloc);
    mp_map_elem_t *old_table = map->table;
    d302:	687b      	ldr	r3, [r7, #4]
    d304:	689b      	ldr	r3, [r3, #8]
    d306:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    d308:	697b      	ldr	r3, [r7, #20]
    d30a:	00db      	lsls	r3, r3, #3
    d30c:	4618      	mov	r0, r3
    d30e:	f7f3 f82a 	bl	366 <m_malloc0>
    d312:	60f8      	str	r0, [r7, #12]
    // If we reach this point, table resizing succeeded, now we can edit the old map.
    map->alloc = new_alloc;
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	697a      	ldr	r2, [r7, #20]
    d318:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d31a:	687a      	ldr	r2, [r7, #4]
    d31c:	6813      	ldr	r3, [r2, #0]
    d31e:	f36f 03df 	bfc	r3, #3, #29
    d322:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d324:	687a      	ldr	r2, [r7, #4]
    d326:	7813      	ldrb	r3, [r2, #0]
    d328:	f043 0301 	orr.w	r3, r3, #1
    d32c:	7013      	strb	r3, [r2, #0]
    map->table = new_table;
    d32e:	687b      	ldr	r3, [r7, #4]
    d330:	68fa      	ldr	r2, [r7, #12]
    d332:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    d334:	2300      	movs	r3, #0
    d336:	61fb      	str	r3, [r7, #28]
    d338:	e021      	b.n	d37e <mp_map_rehash+0x98>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    d33a:	69fb      	ldr	r3, [r7, #28]
    d33c:	00db      	lsls	r3, r3, #3
    d33e:	693a      	ldr	r2, [r7, #16]
    d340:	4413      	add	r3, r2
    d342:	681b      	ldr	r3, [r3, #0]
    d344:	2b00      	cmp	r3, #0
    d346:	d017      	beq.n	d378 <mp_map_rehash+0x92>
    d348:	69fb      	ldr	r3, [r7, #28]
    d34a:	00db      	lsls	r3, r3, #3
    d34c:	693a      	ldr	r2, [r7, #16]
    d34e:	4413      	add	r3, r2
    d350:	681b      	ldr	r3, [r3, #0]
    d352:	2b08      	cmp	r3, #8
    d354:	d010      	beq.n	d378 <mp_map_rehash+0x92>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    d356:	69fb      	ldr	r3, [r7, #28]
    d358:	00db      	lsls	r3, r3, #3
    d35a:	693a      	ldr	r2, [r7, #16]
    d35c:	4413      	add	r3, r2
    d35e:	681b      	ldr	r3, [r3, #0]
    d360:	2201      	movs	r2, #1
    d362:	4619      	mov	r1, r3
    d364:	6878      	ldr	r0, [r7, #4]
    d366:	f000 f815 	bl	d394 <mp_map_lookup>
    d36a:	4601      	mov	r1, r0
    d36c:	69fb      	ldr	r3, [r7, #28]
    d36e:	00db      	lsls	r3, r3, #3
    d370:	693a      	ldr	r2, [r7, #16]
    d372:	4413      	add	r3, r2
    d374:	685b      	ldr	r3, [r3, #4]
    d376:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < old_alloc; i++) {
    d378:	69fb      	ldr	r3, [r7, #28]
    d37a:	3301      	adds	r3, #1
    d37c:	61fb      	str	r3, [r7, #28]
    d37e:	69fa      	ldr	r2, [r7, #28]
    d380:	69bb      	ldr	r3, [r7, #24]
    d382:	429a      	cmp	r2, r3
    d384:	d3d9      	bcc.n	d33a <mp_map_rehash+0x54>
        }
    }
    m_del(mp_map_elem_t, old_table, old_alloc);
    d386:	6938      	ldr	r0, [r7, #16]
    d388:	f7f3 f826 	bl	3d8 <m_free>
}
    d38c:	bf00      	nop
    d38e:	3720      	adds	r7, #32
    d390:	46bd      	mov	sp, r7
    d392:	bd80      	pop	{r7, pc}

0000d394 <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    d394:	b580      	push	{r7, lr}
    d396:	b08c      	sub	sp, #48	; 0x30
    d398:	af00      	add	r7, sp, #0
    d39a:	60f8      	str	r0, [r7, #12]
    d39c:	60b9      	str	r1, [r7, #8]
    d39e:	607a      	str	r2, [r7, #4]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    d3a0:	68fb      	ldr	r3, [r7, #12]
    d3a2:	781b      	ldrb	r3, [r3, #0]
    d3a4:	f003 0302 	and.w	r3, r3, #2
    d3a8:	b2db      	uxtb	r3, r3
    d3aa:	2b00      	cmp	r3, #0
    d3ac:	d008      	beq.n	d3c0 <mp_map_lookup+0x2c>
    d3ae:	687b      	ldr	r3, [r7, #4]
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	d005      	beq.n	d3c0 <mp_map_lookup+0x2c>
    d3b4:	4ba3      	ldr	r3, [pc, #652]	; (d644 <mp_map_lookup+0x2b0>)
    d3b6:	4aa4      	ldr	r2, [pc, #656]	; (d648 <mp_map_lookup+0x2b4>)
    d3b8:	2194      	movs	r1, #148	; 0x94
    d3ba:	48a4      	ldr	r0, [pc, #656]	; (d64c <mp_map_lookup+0x2b8>)
    d3bc:	f00d ff12 	bl	1b1e4 <__assert_func>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    d3c0:	68fb      	ldr	r3, [r7, #12]
    d3c2:	781b      	ldrb	r3, [r3, #0]
    d3c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
    d3c8:	b2db      	uxtb	r3, r3
    d3ca:	2b00      	cmp	r3, #0
    d3cc:	bf14      	ite	ne
    d3ce:	2301      	movne	r3, #1
    d3d0:	2300      	moveq	r3, #0
    d3d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (compare_only_ptrs) {
    d3d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3da:	2b00      	cmp	r3, #0
    d3dc:	d019      	beq.n	d412 <mp_map_lookup+0x7e>
        if (MP_OBJ_IS_QSTR(index)) {
    d3de:	68b8      	ldr	r0, [r7, #8]
    d3e0:	f7ff fe94 	bl	d10c <MP_OBJ_IS_QSTR>
    d3e4:	4603      	mov	r3, r0
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d113      	bne.n	d412 <mp_map_lookup+0x7e>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    d3ea:	68b8      	ldr	r0, [r7, #8]
    d3ec:	f7ff fea0 	bl	d130 <MP_OBJ_IS_OBJ>
    d3f0:	4603      	mov	r3, r0
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d008      	beq.n	d408 <mp_map_lookup+0x74>
    d3f6:	68bb      	ldr	r3, [r7, #8]
    d3f8:	681b      	ldr	r3, [r3, #0]
    d3fa:	4a95      	ldr	r2, [pc, #596]	; (d650 <mp_map_lookup+0x2bc>)
    d3fc:	4293      	cmp	r3, r2
    d3fe:	d103      	bne.n	d408 <mp_map_lookup+0x74>
            // Index is a non-interned string.
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
    d400:	2300      	movs	r3, #0
    d402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d406:	e004      	b.n	d412 <mp_map_lookup+0x7e>
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d408:	687b      	ldr	r3, [r7, #4]
    d40a:	2b01      	cmp	r3, #1
    d40c:	d001      	beq.n	d412 <mp_map_lookup+0x7e>
            // If we are not adding, then we can return straight away a failed
            // lookup because we know that the index will never be found.
            return NULL;
    d40e:	2300      	movs	r3, #0
    d410:	e130      	b.n	d674 <mp_map_lookup+0x2e0>
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    d412:	68fb      	ldr	r3, [r7, #12]
    d414:	781b      	ldrb	r3, [r3, #0]
    d416:	f003 0304 	and.w	r3, r3, #4
    d41a:	b2db      	uxtb	r3, r3
    d41c:	2b00      	cmp	r3, #0
    d41e:	d02c      	beq.n	d47a <mp_map_lookup+0xe6>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d420:	68fb      	ldr	r3, [r7, #12]
    d422:	689b      	ldr	r3, [r3, #8]
    d424:	62bb      	str	r3, [r7, #40]	; 0x28
    d426:	68fb      	ldr	r3, [r7, #12]
    d428:	689a      	ldr	r2, [r3, #8]
    d42a:	68fb      	ldr	r3, [r7, #12]
    d42c:	681b      	ldr	r3, [r3, #0]
    d42e:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d432:	00db      	lsls	r3, r3, #3
    d434:	4413      	add	r3, r2
    d436:	617b      	str	r3, [r7, #20]
    d438:	e019      	b.n	d46e <mp_map_lookup+0xda>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d43c:	681a      	ldr	r2, [r3, #0]
    d43e:	68bb      	ldr	r3, [r7, #8]
    d440:	429a      	cmp	r2, r3
    d442:	d00f      	beq.n	d464 <mp_map_lookup+0xd0>
    d444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d448:	f083 0301 	eor.w	r3, r3, #1
    d44c:	b2db      	uxtb	r3, r3
    d44e:	2b00      	cmp	r3, #0
    d450:	d00a      	beq.n	d468 <mp_map_lookup+0xd4>
    d452:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d454:	681b      	ldr	r3, [r3, #0]
    d456:	68b9      	ldr	r1, [r7, #8]
    d458:	4618      	mov	r0, r3
    d45a:	f000 fa97 	bl	d98c <mp_obj_equal>
    d45e:	4603      	mov	r3, r0
    d460:	2b00      	cmp	r3, #0
    d462:	d001      	beq.n	d468 <mp_map_lookup+0xd4>
                    elem = &map->table[map->used];
                    elem->key = MP_OBJ_NULL;
                    elem->value = value;
                }
                #endif
                return elem;
    d464:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d466:	e105      	b.n	d674 <mp_map_lookup+0x2e0>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d468:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d46a:	3308      	adds	r3, #8
    d46c:	62bb      	str	r3, [r7, #40]	; 0x28
    d46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d470:	697b      	ldr	r3, [r7, #20]
    d472:	429a      	cmp	r2, r3
    d474:	d3e1      	bcc.n	d43a <mp_map_lookup+0xa6>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    d476:	2300      	movs	r3, #0
    d478:	e0fc      	b.n	d674 <mp_map_lookup+0x2e0>
        #endif
    }

    // map is a hash table (not an ordered array), so do a hash lookup

    if (map->alloc == 0) {
    d47a:	68fb      	ldr	r3, [r7, #12]
    d47c:	685b      	ldr	r3, [r3, #4]
    d47e:	2b00      	cmp	r3, #0
    d480:	d108      	bne.n	d494 <mp_map_lookup+0x100>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d482:	687b      	ldr	r3, [r7, #4]
    d484:	2b01      	cmp	r3, #1
    d486:	d103      	bne.n	d490 <mp_map_lookup+0xfc>
            mp_map_rehash(map);
    d488:	68f8      	ldr	r0, [r7, #12]
    d48a:	f7ff ff2c 	bl	d2e6 <mp_map_rehash>
    d48e:	e001      	b.n	d494 <mp_map_lookup+0x100>
        } else {
            return NULL;
    d490:	2300      	movs	r3, #0
    d492:	e0ef      	b.n	d674 <mp_map_lookup+0x2e0>
        }
    }

    // get hash of index, with fast path for common case of qstr
    mp_uint_t hash;
    if (MP_OBJ_IS_QSTR(index)) {
    d494:	68b8      	ldr	r0, [r7, #8]
    d496:	f7ff fe39 	bl	d10c <MP_OBJ_IS_QSTR>
    d49a:	4603      	mov	r3, r0
    d49c:	2b00      	cmp	r3, #0
    d49e:	d006      	beq.n	d4ae <mp_map_lookup+0x11a>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    d4a0:	68bb      	ldr	r3, [r7, #8]
    d4a2:	089b      	lsrs	r3, r3, #2
    d4a4:	4618      	mov	r0, r3
    d4a6:	f7f3 fe87 	bl	11b8 <qstr_hash>
    d4aa:	6278      	str	r0, [r7, #36]	; 0x24
    d4ac:	e006      	b.n	d4bc <mp_map_lookup+0x128>
    } else {
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    d4ae:	68b9      	ldr	r1, [r7, #8]
    d4b0:	2006      	movs	r0, #6
    d4b2:	f7fe f8c5 	bl	b640 <mp_unary_op>
    d4b6:	4603      	mov	r3, r0
    d4b8:	105b      	asrs	r3, r3, #1
    d4ba:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_t pos = hash % map->alloc;
    d4bc:	68fb      	ldr	r3, [r7, #12]
    d4be:	685a      	ldr	r2, [r3, #4]
    d4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4c2:	fbb3 f1f2 	udiv	r1, r3, r2
    d4c6:	fb02 f201 	mul.w	r2, r2, r1
    d4ca:	1a9b      	subs	r3, r3, r2
    d4cc:	623b      	str	r3, [r7, #32]
    size_t start_pos = pos;
    d4ce:	6a3b      	ldr	r3, [r7, #32]
    d4d0:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *avail_slot = NULL;
    d4d2:	2300      	movs	r3, #0
    d4d4:	61bb      	str	r3, [r7, #24]
    for (;;) {
        mp_map_elem_t *slot = &map->table[pos];
    d4d6:	68fb      	ldr	r3, [r7, #12]
    d4d8:	689a      	ldr	r2, [r3, #8]
    d4da:	6a3b      	ldr	r3, [r7, #32]
    d4dc:	00db      	lsls	r3, r3, #3
    d4de:	4413      	add	r3, r2
    d4e0:	613b      	str	r3, [r7, #16]
        if (slot->key == MP_OBJ_NULL) {
    d4e2:	693b      	ldr	r3, [r7, #16]
    d4e4:	681b      	ldr	r3, [r3, #0]
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d12b      	bne.n	d542 <mp_map_lookup+0x1ae>
            // found NULL slot, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d4ea:	687b      	ldr	r3, [r7, #4]
    d4ec:	2b01      	cmp	r3, #1
    d4ee:	d126      	bne.n	d53e <mp_map_lookup+0x1aa>
                map->used += 1;
    d4f0:	68fb      	ldr	r3, [r7, #12]
    d4f2:	681b      	ldr	r3, [r3, #0]
    d4f4:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d4f8:	3301      	adds	r3, #1
    d4fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d4fe:	68fa      	ldr	r2, [r7, #12]
    d500:	6813      	ldr	r3, [r2, #0]
    d502:	f361 03df 	bfi	r3, r1, #3, #29
    d506:	6013      	str	r3, [r2, #0]
                if (avail_slot == NULL) {
    d508:	69bb      	ldr	r3, [r7, #24]
    d50a:	2b00      	cmp	r3, #0
    d50c:	d101      	bne.n	d512 <mp_map_lookup+0x17e>
                    avail_slot = slot;
    d50e:	693b      	ldr	r3, [r7, #16]
    d510:	61bb      	str	r3, [r7, #24]
                }
                avail_slot->key = index;
    d512:	69bb      	ldr	r3, [r7, #24]
    d514:	68ba      	ldr	r2, [r7, #8]
    d516:	601a      	str	r2, [r3, #0]
                avail_slot->value = MP_OBJ_NULL;
    d518:	69bb      	ldr	r3, [r7, #24]
    d51a:	2200      	movs	r2, #0
    d51c:	605a      	str	r2, [r3, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    d51e:	68b8      	ldr	r0, [r7, #8]
    d520:	f7ff fdf4 	bl	d10c <MP_OBJ_IS_QSTR>
    d524:	4603      	mov	r3, r0
    d526:	f083 0301 	eor.w	r3, r3, #1
    d52a:	b2db      	uxtb	r3, r3
    d52c:	2b00      	cmp	r3, #0
    d52e:	d004      	beq.n	d53a <mp_map_lookup+0x1a6>
                    map->all_keys_are_qstrs = 0;
    d530:	68fa      	ldr	r2, [r7, #12]
    d532:	7813      	ldrb	r3, [r2, #0]
    d534:	f36f 0300 	bfc	r3, #0, #1
    d538:	7013      	strb	r3, [r2, #0]
                }
                return avail_slot;
    d53a:	69bb      	ldr	r3, [r7, #24]
    d53c:	e09a      	b.n	d674 <mp_map_lookup+0x2e0>
            } else {
                return NULL;
    d53e:	2300      	movs	r3, #0
    d540:	e098      	b.n	d674 <mp_map_lookup+0x2e0>
            }
        } else if (slot->key == MP_OBJ_SENTINEL) {
    d542:	693b      	ldr	r3, [r7, #16]
    d544:	681b      	ldr	r3, [r3, #0]
    d546:	2b08      	cmp	r3, #8
    d548:	d105      	bne.n	d556 <mp_map_lookup+0x1c2>
            // found deleted slot, remember for later
            if (avail_slot == NULL) {
    d54a:	69bb      	ldr	r3, [r7, #24]
    d54c:	2b00      	cmp	r3, #0
    d54e:	d141      	bne.n	d5d4 <mp_map_lookup+0x240>
                avail_slot = slot;
    d550:	693b      	ldr	r3, [r7, #16]
    d552:	61bb      	str	r3, [r7, #24]
    d554:	e03e      	b.n	d5d4 <mp_map_lookup+0x240>
            }
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    d556:	693b      	ldr	r3, [r7, #16]
    d558:	681a      	ldr	r2, [r3, #0]
    d55a:	68bb      	ldr	r3, [r7, #8]
    d55c:	429a      	cmp	r2, r3
    d55e:	d00f      	beq.n	d580 <mp_map_lookup+0x1ec>
    d560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d564:	f083 0301 	eor.w	r3, r3, #1
    d568:	b2db      	uxtb	r3, r3
    d56a:	2b00      	cmp	r3, #0
    d56c:	d032      	beq.n	d5d4 <mp_map_lookup+0x240>
    d56e:	693b      	ldr	r3, [r7, #16]
    d570:	681b      	ldr	r3, [r3, #0]
    d572:	68b9      	ldr	r1, [r7, #8]
    d574:	4618      	mov	r0, r3
    d576:	f000 fa09 	bl	d98c <mp_obj_equal>
    d57a:	4603      	mov	r3, r0
    d57c:	2b00      	cmp	r3, #0
    d57e:	d029      	beq.n	d5d4 <mp_map_lookup+0x240>
            // found index
            // Note: CPython does not replace the index; try x={True:'true'};x[1]='one';x
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    d580:	687b      	ldr	r3, [r7, #4]
    d582:	2b02      	cmp	r3, #2
    d584:	d124      	bne.n	d5d0 <mp_map_lookup+0x23c>
                // delete element in this slot
                map->used--;
    d586:	68fb      	ldr	r3, [r7, #12]
    d588:	681b      	ldr	r3, [r3, #0]
    d58a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d58e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d592:	3b01      	subs	r3, #1
    d594:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    d598:	68f9      	ldr	r1, [r7, #12]
    d59a:	680a      	ldr	r2, [r1, #0]
    d59c:	f363 02df 	bfi	r2, r3, #3, #29
    d5a0:	600a      	str	r2, [r1, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    d5a2:	68fb      	ldr	r3, [r7, #12]
    d5a4:	6899      	ldr	r1, [r3, #8]
    d5a6:	6a3b      	ldr	r3, [r7, #32]
    d5a8:	3301      	adds	r3, #1
    d5aa:	68fa      	ldr	r2, [r7, #12]
    d5ac:	6852      	ldr	r2, [r2, #4]
    d5ae:	fbb3 f0f2 	udiv	r0, r3, r2
    d5b2:	fb02 f200 	mul.w	r2, r2, r0
    d5b6:	1a9b      	subs	r3, r3, r2
    d5b8:	00db      	lsls	r3, r3, #3
    d5ba:	440b      	add	r3, r1
    d5bc:	681b      	ldr	r3, [r3, #0]
    d5be:	2b00      	cmp	r3, #0
    d5c0:	d103      	bne.n	d5ca <mp_map_lookup+0x236>
                    // optimisation if next slot is empty
                    slot->key = MP_OBJ_NULL;
    d5c2:	693b      	ldr	r3, [r7, #16]
    d5c4:	2200      	movs	r2, #0
    d5c6:	601a      	str	r2, [r3, #0]
    d5c8:	e002      	b.n	d5d0 <mp_map_lookup+0x23c>
                } else {
                    slot->key = MP_OBJ_SENTINEL;
    d5ca:	693b      	ldr	r3, [r7, #16]
    d5cc:	2208      	movs	r2, #8
    d5ce:	601a      	str	r2, [r3, #0]
                }
                // keep slot->value so that caller can access it if needed
            }
            return slot;
    d5d0:	693b      	ldr	r3, [r7, #16]
    d5d2:	e04f      	b.n	d674 <mp_map_lookup+0x2e0>
        }

        // not yet found, keep searching in this table
        pos = (pos + 1) % map->alloc;
    d5d4:	6a3b      	ldr	r3, [r7, #32]
    d5d6:	3301      	adds	r3, #1
    d5d8:	68fa      	ldr	r2, [r7, #12]
    d5da:	6852      	ldr	r2, [r2, #4]
    d5dc:	fbb3 f1f2 	udiv	r1, r3, r2
    d5e0:	fb02 f201 	mul.w	r2, r2, r1
    d5e4:	1a9b      	subs	r3, r3, r2
    d5e6:	623b      	str	r3, [r7, #32]

        if (pos == start_pos) {
    d5e8:	6a3a      	ldr	r2, [r7, #32]
    d5ea:	69fb      	ldr	r3, [r7, #28]
    d5ec:	429a      	cmp	r2, r3
    d5ee:	f47f af72 	bne.w	d4d6 <mp_map_lookup+0x142>
            // search got back to starting position, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d5f2:	687b      	ldr	r3, [r7, #4]
    d5f4:	2b01      	cmp	r3, #1
    d5f6:	d13c      	bne.n	d672 <mp_map_lookup+0x2de>
                if (avail_slot != NULL) {
    d5f8:	69bb      	ldr	r3, [r7, #24]
    d5fa:	2b00      	cmp	r3, #0
    d5fc:	d02a      	beq.n	d654 <mp_map_lookup+0x2c0>
                    // there was an available slot, so use that
                    map->used++;
    d5fe:	68fb      	ldr	r3, [r7, #12]
    d600:	681b      	ldr	r3, [r3, #0]
    d602:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d606:	1c5a      	adds	r2, r3, #1
    d608:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    d60c:	68f9      	ldr	r1, [r7, #12]
    d60e:	680b      	ldr	r3, [r1, #0]
    d610:	f362 03df 	bfi	r3, r2, #3, #29
    d614:	600b      	str	r3, [r1, #0]
                    avail_slot->key = index;
    d616:	69bb      	ldr	r3, [r7, #24]
    d618:	68ba      	ldr	r2, [r7, #8]
    d61a:	601a      	str	r2, [r3, #0]
                    avail_slot->value = MP_OBJ_NULL;
    d61c:	69bb      	ldr	r3, [r7, #24]
    d61e:	2200      	movs	r2, #0
    d620:	605a      	str	r2, [r3, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    d622:	68b8      	ldr	r0, [r7, #8]
    d624:	f7ff fd72 	bl	d10c <MP_OBJ_IS_QSTR>
    d628:	4603      	mov	r3, r0
    d62a:	f083 0301 	eor.w	r3, r3, #1
    d62e:	b2db      	uxtb	r3, r3
    d630:	2b00      	cmp	r3, #0
    d632:	d004      	beq.n	d63e <mp_map_lookup+0x2aa>
                        map->all_keys_are_qstrs = 0;
    d634:	68fa      	ldr	r2, [r7, #12]
    d636:	7813      	ldrb	r3, [r2, #0]
    d638:	f36f 0300 	bfc	r3, #0, #1
    d63c:	7013      	strb	r3, [r2, #0]
                    }
                    return avail_slot;
    d63e:	69bb      	ldr	r3, [r7, #24]
    d640:	e018      	b.n	d674 <mp_map_lookup+0x2e0>
    d642:	bf00      	nop
    d644:	000210c0 	.word	0x000210c0
    d648:	00021100 	.word	0x00021100
    d64c:	000210f0 	.word	0x000210f0
    d650:	00023204 	.word	0x00023204
                } else {
                    // not enough room in table, rehash it
                    mp_map_rehash(map);
    d654:	68f8      	ldr	r0, [r7, #12]
    d656:	f7ff fe46 	bl	d2e6 <mp_map_rehash>
                    // restart the search for the new element
                    start_pos = pos = hash % map->alloc;
    d65a:	68fb      	ldr	r3, [r7, #12]
    d65c:	685a      	ldr	r2, [r3, #4]
    d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d660:	fbb3 f1f2 	udiv	r1, r3, r2
    d664:	fb02 f201 	mul.w	r2, r2, r1
    d668:	1a9b      	subs	r3, r3, r2
    d66a:	623b      	str	r3, [r7, #32]
    d66c:	6a3b      	ldr	r3, [r7, #32]
    d66e:	61fb      	str	r3, [r7, #28]
    d670:	e731      	b.n	d4d6 <mp_map_lookup+0x142>
                }
            } else {
                return NULL;
    d672:	2300      	movs	r3, #0
            }
        }
    }
}
    d674:	4618      	mov	r0, r3
    d676:	3730      	adds	r7, #48	; 0x30
    d678:	46bd      	mov	sp, r7
    d67a:	bd80      	pop	{r7, pc}

0000d67c <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    d67c:	b480      	push	{r7}
    d67e:	b083      	sub	sp, #12
    d680:	af00      	add	r7, sp, #0
    d682:	6078      	str	r0, [r7, #4]
    d684:	687b      	ldr	r3, [r7, #4]
    d686:	f003 0301 	and.w	r3, r3, #1
    d68a:	2b00      	cmp	r3, #0
    d68c:	bf14      	ite	ne
    d68e:	2301      	movne	r3, #1
    d690:	2300      	moveq	r3, #0
    d692:	b2db      	uxtb	r3, r3
    d694:	4618      	mov	r0, r3
    d696:	370c      	adds	r7, #12
    d698:	46bd      	mov	sp, r7
    d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d69e:	4770      	bx	lr

0000d6a0 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d6a0:	b480      	push	{r7}
    d6a2:	b083      	sub	sp, #12
    d6a4:	af00      	add	r7, sp, #0
    d6a6:	6078      	str	r0, [r7, #4]
    d6a8:	687b      	ldr	r3, [r7, #4]
    d6aa:	f003 0303 	and.w	r3, r3, #3
    d6ae:	2b02      	cmp	r3, #2
    d6b0:	bf0c      	ite	eq
    d6b2:	2301      	moveq	r3, #1
    d6b4:	2300      	movne	r3, #0
    d6b6:	b2db      	uxtb	r3, r3
    d6b8:	4618      	mov	r0, r3
    d6ba:	370c      	adds	r7, #12
    d6bc:	46bd      	mov	sp, r7
    d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6c2:	4770      	bx	lr

0000d6c4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d6c4:	b480      	push	{r7}
    d6c6:	b083      	sub	sp, #12
    d6c8:	af00      	add	r7, sp, #0
    d6ca:	6078      	str	r0, [r7, #4]
    d6cc:	687b      	ldr	r3, [r7, #4]
    d6ce:	f003 0303 	and.w	r3, r3, #3
    d6d2:	2b00      	cmp	r3, #0
    d6d4:	bf0c      	ite	eq
    d6d6:	2301      	moveq	r3, #1
    d6d8:	2300      	movne	r3, #0
    d6da:	b2db      	uxtb	r3, r3
    d6dc:	4618      	mov	r0, r3
    d6de:	370c      	adds	r7, #12
    d6e0:	46bd      	mov	sp, r7
    d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6e6:	4770      	bx	lr

0000d6e8 <mp_obj_get_type>:
#include "py/objstr.h"
#include "py/runtime.h"
#include "py/stackctrl.h"
#include "py/stream.h" // for mp_obj_print

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in) {
    d6e8:	b580      	push	{r7, lr}
    d6ea:	b084      	sub	sp, #16
    d6ec:	af00      	add	r7, sp, #0
    d6ee:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    d6f0:	6878      	ldr	r0, [r7, #4]
    d6f2:	f7ff ffc3 	bl	d67c <MP_OBJ_IS_SMALL_INT>
    d6f6:	4603      	mov	r3, r0
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	d001      	beq.n	d700 <mp_obj_get_type+0x18>
        return (mp_obj_type_t*)&mp_type_int;
    d6fc:	4b08      	ldr	r3, [pc, #32]	; (d720 <mp_obj_get_type+0x38>)
    d6fe:	e00b      	b.n	d718 <mp_obj_get_type+0x30>
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    d700:	6878      	ldr	r0, [r7, #4]
    d702:	f7ff ffcd 	bl	d6a0 <MP_OBJ_IS_QSTR>
    d706:	4603      	mov	r3, r0
    d708:	2b00      	cmp	r3, #0
    d70a:	d001      	beq.n	d710 <mp_obj_get_type+0x28>
        return (mp_obj_type_t*)&mp_type_str;
    d70c:	4b05      	ldr	r3, [pc, #20]	; (d724 <mp_obj_get_type+0x3c>)
    d70e:	e003      	b.n	d718 <mp_obj_get_type+0x30>
    #if MICROPY_PY_BUILTINS_FLOAT
    } else if (mp_obj_is_float(o_in)) {
        return (mp_obj_type_t*)&mp_type_float;
    #endif
    } else {
        const mp_obj_base_t *o = MP_OBJ_TO_PTR(o_in);
    d710:	687b      	ldr	r3, [r7, #4]
    d712:	60fb      	str	r3, [r7, #12]
        return (mp_obj_type_t*)o->type;
    d714:	68fb      	ldr	r3, [r7, #12]
    d716:	681b      	ldr	r3, [r3, #0]
    }
}
    d718:	4618      	mov	r0, r3
    d71a:	3710      	adds	r7, #16
    d71c:	46bd      	mov	sp, r7
    d71e:	bd80      	pop	{r7, pc}
    d720:	00022610 	.word	0x00022610
    d724:	00023204 	.word	0x00023204

0000d728 <mp_obj_get_type_str>:

const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    d728:	b580      	push	{r7, lr}
    d72a:	b082      	sub	sp, #8
    d72c:	af00      	add	r7, sp, #0
    d72e:	6078      	str	r0, [r7, #4]
    return qstr_str(mp_obj_get_type(o_in)->name);
    d730:	6878      	ldr	r0, [r7, #4]
    d732:	f7ff ffd9 	bl	d6e8 <mp_obj_get_type>
    d736:	4603      	mov	r3, r0
    d738:	88db      	ldrh	r3, [r3, #6]
    d73a:	4618      	mov	r0, r3
    d73c:	f7f3 fd58 	bl	11f0 <qstr_str>
    d740:	4603      	mov	r3, r0
}
    d742:	4618      	mov	r0, r3
    d744:	3708      	adds	r7, #8
    d746:	46bd      	mov	sp, r7
    d748:	bd80      	pop	{r7, pc}

0000d74a <mp_obj_print_helper>:

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    d74a:	b580      	push	{r7, lr}
    d74c:	b086      	sub	sp, #24
    d74e:	af00      	add	r7, sp, #0
    d750:	60f8      	str	r0, [r7, #12]
    d752:	60b9      	str	r1, [r7, #8]
    d754:	607a      	str	r2, [r7, #4]
    // There can be data structures nested too deep, or just recursive
    MP_STACK_CHECK();
#ifndef NDEBUG
    if (o_in == MP_OBJ_NULL) {
    d756:	68bb      	ldr	r3, [r7, #8]
    d758:	2b00      	cmp	r3, #0
    d75a:	d104      	bne.n	d766 <mp_obj_print_helper+0x1c>
        mp_print_str(print, "(nil)");
    d75c:	490e      	ldr	r1, [pc, #56]	; (d798 <mp_obj_print_helper+0x4e>)
    d75e:	68f8      	ldr	r0, [r7, #12]
    d760:	f7f4 f884 	bl	186c <mp_print_str>
        return;
    d764:	e015      	b.n	d792 <mp_obj_print_helper+0x48>
    }
#endif
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    d766:	68b8      	ldr	r0, [r7, #8]
    d768:	f7ff ffbe 	bl	d6e8 <mp_obj_get_type>
    d76c:	6178      	str	r0, [r7, #20]
    if (type->print != NULL) {
    d76e:	697b      	ldr	r3, [r7, #20]
    d770:	689b      	ldr	r3, [r3, #8]
    d772:	2b00      	cmp	r3, #0
    d774:	d006      	beq.n	d784 <mp_obj_print_helper+0x3a>
        type->print((mp_print_t*)print, o_in, kind);
    d776:	697b      	ldr	r3, [r7, #20]
    d778:	689b      	ldr	r3, [r3, #8]
    d77a:	687a      	ldr	r2, [r7, #4]
    d77c:	68b9      	ldr	r1, [r7, #8]
    d77e:	68f8      	ldr	r0, [r7, #12]
    d780:	4798      	blx	r3
    d782:	e006      	b.n	d792 <mp_obj_print_helper+0x48>
    } else {
        mp_printf(print, "<%q>", type->name);
    d784:	697b      	ldr	r3, [r7, #20]
    d786:	88db      	ldrh	r3, [r3, #6]
    d788:	461a      	mov	r2, r3
    d78a:	4904      	ldr	r1, [pc, #16]	; (d79c <mp_obj_print_helper+0x52>)
    d78c:	68f8      	ldr	r0, [r7, #12]
    d78e:	f7f4 fb7f 	bl	1e90 <mp_printf>
    }
}
    d792:	3718      	adds	r7, #24
    d794:	46bd      	mov	sp, r7
    d796:	bd80      	pop	{r7, pc}
    d798:	00021110 	.word	0x00021110
    d79c:	00021118 	.word	0x00021118

0000d7a0 <mp_obj_print>:

void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    d7a0:	b580      	push	{r7, lr}
    d7a2:	b082      	sub	sp, #8
    d7a4:	af00      	add	r7, sp, #0
    d7a6:	6078      	str	r0, [r7, #4]
    d7a8:	6039      	str	r1, [r7, #0]
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    d7aa:	683a      	ldr	r2, [r7, #0]
    d7ac:	6879      	ldr	r1, [r7, #4]
    d7ae:	4803      	ldr	r0, [pc, #12]	; (d7bc <mp_obj_print+0x1c>)
    d7b0:	f7ff ffcb 	bl	d74a <mp_obj_print_helper>
}
    d7b4:	bf00      	nop
    d7b6:	3708      	adds	r7, #8
    d7b8:	46bd      	mov	sp, r7
    d7ba:	bd80      	pop	{r7, pc}
    d7bc:	0001ef0c 	.word	0x0001ef0c

0000d7c0 <mp_obj_print_exception>:

// helper function to print an exception with traceback
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    d7c0:	b580      	push	{r7, lr}
    d7c2:	b086      	sub	sp, #24
    d7c4:	af00      	add	r7, sp, #0
    d7c6:	6078      	str	r0, [r7, #4]
    d7c8:	6039      	str	r1, [r7, #0]
    if (mp_obj_is_exception_instance(exc)) {
    d7ca:	6838      	ldr	r0, [r7, #0]
    d7cc:	f001 fede 	bl	f58c <mp_obj_is_exception_instance>
    d7d0:	4603      	mov	r3, r0
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	d047      	beq.n	d866 <mp_obj_print_exception+0xa6>
        size_t n, *values;
        mp_obj_exception_get_traceback(exc, &n, &values);
    d7d6:	f107 0208 	add.w	r2, r7, #8
    d7da:	f107 030c 	add.w	r3, r7, #12
    d7de:	4619      	mov	r1, r3
    d7e0:	6838      	ldr	r0, [r7, #0]
    d7e2:	f001 ffa5 	bl	f730 <mp_obj_exception_get_traceback>
        if (n > 0) {
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	2b00      	cmp	r3, #0
    d7ea:	d03c      	beq.n	d866 <mp_obj_print_exception+0xa6>
            assert(n % 3 == 0);
    d7ec:	68f9      	ldr	r1, [r7, #12]
    d7ee:	4b24      	ldr	r3, [pc, #144]	; (d880 <mp_obj_print_exception+0xc0>)
    d7f0:	fba3 2301 	umull	r2, r3, r3, r1
    d7f4:	085a      	lsrs	r2, r3, #1
    d7f6:	4613      	mov	r3, r2
    d7f8:	005b      	lsls	r3, r3, #1
    d7fa:	4413      	add	r3, r2
    d7fc:	1aca      	subs	r2, r1, r3
    d7fe:	2a00      	cmp	r2, #0
    d800:	d005      	beq.n	d80e <mp_obj_print_exception+0x4e>
    d802:	4b20      	ldr	r3, [pc, #128]	; (d884 <mp_obj_print_exception+0xc4>)
    d804:	4a20      	ldr	r2, [pc, #128]	; (d888 <mp_obj_print_exception+0xc8>)
    d806:	2156      	movs	r1, #86	; 0x56
    d808:	4820      	ldr	r0, [pc, #128]	; (d88c <mp_obj_print_exception+0xcc>)
    d80a:	f00d fceb 	bl	1b1e4 <__assert_func>
            mp_print_str(print, "Traceback (most recent call last):\n");
    d80e:	4920      	ldr	r1, [pc, #128]	; (d890 <mp_obj_print_exception+0xd0>)
    d810:	6878      	ldr	r0, [r7, #4]
    d812:	f7f4 f82b 	bl	186c <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    d816:	68fb      	ldr	r3, [r7, #12]
    d818:	3b03      	subs	r3, #3
    d81a:	617b      	str	r3, [r7, #20]
    d81c:	e020      	b.n	d860 <mp_obj_print_exception+0xa0>
#if MICROPY_ENABLE_SOURCE_LINE
                mp_printf(print, "  File \"%q\", line %d", values[i], (int)values[i + 1]);
#else
                mp_printf(print, "  File \"%q\"", values[i]);
    d81e:	68ba      	ldr	r2, [r7, #8]
    d820:	697b      	ldr	r3, [r7, #20]
    d822:	009b      	lsls	r3, r3, #2
    d824:	4413      	add	r3, r2
    d826:	681b      	ldr	r3, [r3, #0]
    d828:	461a      	mov	r2, r3
    d82a:	491a      	ldr	r1, [pc, #104]	; (d894 <mp_obj_print_exception+0xd4>)
    d82c:	6878      	ldr	r0, [r7, #4]
    d82e:	f7f4 fb2f 	bl	1e90 <mp_printf>
#endif
                // the block name can be NULL if it's unknown
                qstr block = values[i + 2];
    d832:	68ba      	ldr	r2, [r7, #8]
    d834:	697b      	ldr	r3, [r7, #20]
    d836:	3302      	adds	r3, #2
    d838:	009b      	lsls	r3, r3, #2
    d83a:	4413      	add	r3, r2
    d83c:	681b      	ldr	r3, [r3, #0]
    d83e:	613b      	str	r3, [r7, #16]
                if (block == MP_QSTR_NULL) {
    d840:	693b      	ldr	r3, [r7, #16]
    d842:	2b00      	cmp	r3, #0
    d844:	d104      	bne.n	d850 <mp_obj_print_exception+0x90>
                    mp_print_str(print, "\n");
    d846:	4914      	ldr	r1, [pc, #80]	; (d898 <mp_obj_print_exception+0xd8>)
    d848:	6878      	ldr	r0, [r7, #4]
    d84a:	f7f4 f80f 	bl	186c <mp_print_str>
    d84e:	e004      	b.n	d85a <mp_obj_print_exception+0x9a>
                } else {
                    mp_printf(print, ", in %q\n", block);
    d850:	693a      	ldr	r2, [r7, #16]
    d852:	4912      	ldr	r1, [pc, #72]	; (d89c <mp_obj_print_exception+0xdc>)
    d854:	6878      	ldr	r0, [r7, #4]
    d856:	f7f4 fb1b 	bl	1e90 <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    d85a:	697b      	ldr	r3, [r7, #20]
    d85c:	3b03      	subs	r3, #3
    d85e:	617b      	str	r3, [r7, #20]
    d860:	697b      	ldr	r3, [r7, #20]
    d862:	2b00      	cmp	r3, #0
    d864:	dadb      	bge.n	d81e <mp_obj_print_exception+0x5e>
                }
            }
        }
    }
    mp_obj_print_helper(print, exc, PRINT_EXC);
    d866:	2202      	movs	r2, #2
    d868:	6839      	ldr	r1, [r7, #0]
    d86a:	6878      	ldr	r0, [r7, #4]
    d86c:	f7ff ff6d 	bl	d74a <mp_obj_print_helper>
    mp_print_str(print, "\n");
    d870:	4909      	ldr	r1, [pc, #36]	; (d898 <mp_obj_print_exception+0xd8>)
    d872:	6878      	ldr	r0, [r7, #4]
    d874:	f7f3 fffa 	bl	186c <mp_print_str>
}
    d878:	bf00      	nop
    d87a:	3718      	adds	r7, #24
    d87c:	46bd      	mov	sp, r7
    d87e:	bd80      	pop	{r7, pc}
    d880:	aaaaaaab 	.word	0xaaaaaaab
    d884:	00021120 	.word	0x00021120
    d888:	000212a4 	.word	0x000212a4
    d88c:	0002112c 	.word	0x0002112c
    d890:	0002113c 	.word	0x0002113c
    d894:	00021160 	.word	0x00021160
    d898:	0002116c 	.word	0x0002116c
    d89c:	00021170 	.word	0x00021170

0000d8a0 <mp_obj_is_true>:

bool mp_obj_is_true(mp_obj_t arg) {
    d8a0:	b580      	push	{r7, lr}
    d8a2:	b086      	sub	sp, #24
    d8a4:	af00      	add	r7, sp, #0
    d8a6:	6078      	str	r0, [r7, #4]
    if (arg == mp_const_false) {
    d8a8:	687b      	ldr	r3, [r7, #4]
    d8aa:	4a25      	ldr	r2, [pc, #148]	; (d940 <mp_obj_is_true+0xa0>)
    d8ac:	4293      	cmp	r3, r2
    d8ae:	d101      	bne.n	d8b4 <mp_obj_is_true+0x14>
        return 0;
    d8b0:	2300      	movs	r3, #0
    d8b2:	e041      	b.n	d938 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_true) {
    d8b4:	687b      	ldr	r3, [r7, #4]
    d8b6:	4a23      	ldr	r2, [pc, #140]	; (d944 <mp_obj_is_true+0xa4>)
    d8b8:	4293      	cmp	r3, r2
    d8ba:	d101      	bne.n	d8c0 <mp_obj_is_true+0x20>
        return 1;
    d8bc:	2301      	movs	r3, #1
    d8be:	e03b      	b.n	d938 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_none) {
    d8c0:	687b      	ldr	r3, [r7, #4]
    d8c2:	4a21      	ldr	r2, [pc, #132]	; (d948 <mp_obj_is_true+0xa8>)
    d8c4:	4293      	cmp	r3, r2
    d8c6:	d101      	bne.n	d8cc <mp_obj_is_true+0x2c>
        return 0;
    d8c8:	2300      	movs	r3, #0
    d8ca:	e035      	b.n	d938 <mp_obj_is_true+0x98>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    d8cc:	6878      	ldr	r0, [r7, #4]
    d8ce:	f7ff fed5 	bl	d67c <MP_OBJ_IS_SMALL_INT>
    d8d2:	4603      	mov	r3, r0
    d8d4:	2b00      	cmp	r3, #0
    d8d6:	d007      	beq.n	d8e8 <mp_obj_is_true+0x48>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    d8d8:	687b      	ldr	r3, [r7, #4]
    d8da:	105b      	asrs	r3, r3, #1
    d8dc:	2b00      	cmp	r3, #0
    d8de:	d101      	bne.n	d8e4 <mp_obj_is_true+0x44>
            return 0;
    d8e0:	2300      	movs	r3, #0
    d8e2:	e029      	b.n	d938 <mp_obj_is_true+0x98>
        } else {
            return 1;
    d8e4:	2301      	movs	r3, #1
    d8e6:	e027      	b.n	d938 <mp_obj_is_true+0x98>
        }
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    d8e8:	6878      	ldr	r0, [r7, #4]
    d8ea:	f7ff fefd 	bl	d6e8 <mp_obj_get_type>
    d8ee:	6178      	str	r0, [r7, #20]
        if (type->unary_op != NULL) {
    d8f0:	697b      	ldr	r3, [r7, #20]
    d8f2:	695b      	ldr	r3, [r3, #20]
    d8f4:	2b00      	cmp	r3, #0
    d8f6:	d010      	beq.n	d91a <mp_obj_is_true+0x7a>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    d8f8:	697b      	ldr	r3, [r7, #20]
    d8fa:	695b      	ldr	r3, [r3, #20]
    d8fc:	6879      	ldr	r1, [r7, #4]
    d8fe:	2004      	movs	r0, #4
    d900:	4798      	blx	r3
    d902:	6138      	str	r0, [r7, #16]
            if (result != MP_OBJ_NULL) {
    d904:	693b      	ldr	r3, [r7, #16]
    d906:	2b00      	cmp	r3, #0
    d908:	d007      	beq.n	d91a <mp_obj_is_true+0x7a>
                return result == mp_const_true;
    d90a:	693b      	ldr	r3, [r7, #16]
    d90c:	4a0d      	ldr	r2, [pc, #52]	; (d944 <mp_obj_is_true+0xa4>)
    d90e:	4293      	cmp	r3, r2
    d910:	bf0c      	ite	eq
    d912:	2301      	moveq	r3, #1
    d914:	2300      	movne	r3, #0
    d916:	b2db      	uxtb	r3, r3
    d918:	e00e      	b.n	d938 <mp_obj_is_true+0x98>
            }
        }

        mp_obj_t len = mp_obj_len_maybe(arg);
    d91a:	6878      	ldr	r0, [r7, #4]
    d91c:	f000 fa36 	bl	dd8c <mp_obj_len_maybe>
    d920:	60f8      	str	r0, [r7, #12]
        if (len != MP_OBJ_NULL) {
    d922:	68fb      	ldr	r3, [r7, #12]
    d924:	2b00      	cmp	r3, #0
    d926:	d006      	beq.n	d936 <mp_obj_is_true+0x96>
            // obj has a length, truth determined if len != 0
            return len != MP_OBJ_NEW_SMALL_INT(0);
    d928:	68fb      	ldr	r3, [r7, #12]
    d92a:	2b01      	cmp	r3, #1
    d92c:	bf14      	ite	ne
    d92e:	2301      	movne	r3, #1
    d930:	2300      	moveq	r3, #0
    d932:	b2db      	uxtb	r3, r3
    d934:	e000      	b.n	d938 <mp_obj_is_true+0x98>
        } else {
            // any other obj is true per Python semantics
            return 1;
    d936:	2301      	movs	r3, #1
        }
    }
}
    d938:	4618      	mov	r0, r3
    d93a:	3718      	adds	r7, #24
    d93c:	46bd      	mov	sp, r7
    d93e:	bd80      	pop	{r7, pc}
    d940:	00021308 	.word	0x00021308
    d944:	00021310 	.word	0x00021310
    d948:	00022b54 	.word	0x00022b54

0000d94c <mp_obj_is_callable>:

bool mp_obj_is_callable(mp_obj_t o_in) {
    d94c:	b580      	push	{r7, lr}
    d94e:	b084      	sub	sp, #16
    d950:	af00      	add	r7, sp, #0
    d952:	6078      	str	r0, [r7, #4]
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    d954:	6878      	ldr	r0, [r7, #4]
    d956:	f7ff fec7 	bl	d6e8 <mp_obj_get_type>
    d95a:	4603      	mov	r3, r0
    d95c:	691b      	ldr	r3, [r3, #16]
    d95e:	60fb      	str	r3, [r7, #12]
    if (call != mp_obj_instance_call) {
    d960:	68fb      	ldr	r3, [r7, #12]
    d962:	4a09      	ldr	r2, [pc, #36]	; (d988 <mp_obj_is_callable+0x3c>)
    d964:	4293      	cmp	r3, r2
    d966:	d006      	beq.n	d976 <mp_obj_is_callable+0x2a>
        return call != NULL;
    d968:	68fb      	ldr	r3, [r7, #12]
    d96a:	2b00      	cmp	r3, #0
    d96c:	bf14      	ite	ne
    d96e:	2301      	movne	r3, #1
    d970:	2300      	moveq	r3, #0
    d972:	b2db      	uxtb	r3, r3
    d974:	e003      	b.n	d97e <mp_obj_is_callable+0x32>
    }
    return mp_obj_instance_is_callable(o_in);
    d976:	6878      	ldr	r0, [r7, #4]
    d978:	f008 feb9 	bl	166ee <mp_obj_instance_is_callable>
    d97c:	4603      	mov	r3, r0
}
    d97e:	4618      	mov	r0, r3
    d980:	3710      	adds	r7, #16
    d982:	46bd      	mov	sp, r7
    d984:	bd80      	pop	{r7, pc}
    d986:	bf00      	nop
    d988:	0001671f 	.word	0x0001671f

0000d98c <mp_obj_equal>:
// This means that False==0 and True==1 are true expressions.
//
// Furthermore, from the v3.4.2 code for object.c: "Practical amendments: If rich
// comparison returns NotImplemented, == and != are decided by comparing the object
// pointer."
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    d98c:	b580      	push	{r7, lr}
    d98e:	b086      	sub	sp, #24
    d990:	af00      	add	r7, sp, #0
    d992:	6078      	str	r0, [r7, #4]
    d994:	6039      	str	r1, [r7, #0]
    // Float (and complex) NaN is never equal to anything, not even itself,
    // so we must have a special check here to cover those cases.
    if (o1 == o2
    d996:	687a      	ldr	r2, [r7, #4]
    d998:	683b      	ldr	r3, [r7, #0]
    d99a:	429a      	cmp	r2, r3
    d99c:	d101      	bne.n	d9a2 <mp_obj_equal+0x16>
        #endif
        #if MICROPY_PY_BUILTINS_COMPLEX
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
        #endif
        ) {
        return true;
    d99e:	2301      	movs	r3, #1
    d9a0:	e073      	b.n	da8a <mp_obj_equal+0xfe>
    }
    if (o1 == mp_const_none || o2 == mp_const_none) {
    d9a2:	687b      	ldr	r3, [r7, #4]
    d9a4:	4a3b      	ldr	r2, [pc, #236]	; (da94 <mp_obj_equal+0x108>)
    d9a6:	4293      	cmp	r3, r2
    d9a8:	d003      	beq.n	d9b2 <mp_obj_equal+0x26>
    d9aa:	683b      	ldr	r3, [r7, #0]
    d9ac:	4a39      	ldr	r2, [pc, #228]	; (da94 <mp_obj_equal+0x108>)
    d9ae:	4293      	cmp	r3, r2
    d9b0:	d101      	bne.n	d9b6 <mp_obj_equal+0x2a>
        return false;
    d9b2:	2300      	movs	r3, #0
    d9b4:	e069      	b.n	da8a <mp_obj_equal+0xfe>
    }

    // fast path for small ints
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    d9b6:	6878      	ldr	r0, [r7, #4]
    d9b8:	f7ff fe60 	bl	d67c <MP_OBJ_IS_SMALL_INT>
    d9bc:	4603      	mov	r3, r0
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d00d      	beq.n	d9de <mp_obj_equal+0x52>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    d9c2:	6838      	ldr	r0, [r7, #0]
    d9c4:	f7ff fe5a 	bl	d67c <MP_OBJ_IS_SMALL_INT>
    d9c8:	4603      	mov	r3, r0
    d9ca:	2b00      	cmp	r3, #0
    d9cc:	d001      	beq.n	d9d2 <mp_obj_equal+0x46>
            // both SMALL_INT, and not equal if we get here
            return false;
    d9ce:	2300      	movs	r3, #0
    d9d0:	e05b      	b.n	da8a <mp_obj_equal+0xfe>
        } else {
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    d9d2:	683b      	ldr	r3, [r7, #0]
    d9d4:	617b      	str	r3, [r7, #20]
    d9d6:	687b      	ldr	r3, [r7, #4]
    d9d8:	603b      	str	r3, [r7, #0]
    d9da:	697b      	ldr	r3, [r7, #20]
    d9dc:	607b      	str	r3, [r7, #4]
            // fall through to generic op
        }
    }

    // fast path for strings
    if (MP_OBJ_IS_STR(o1)) {
    d9de:	6878      	ldr	r0, [r7, #4]
    d9e0:	f7ff fe5e 	bl	d6a0 <MP_OBJ_IS_QSTR>
    d9e4:	4603      	mov	r3, r0
    d9e6:	2b00      	cmp	r3, #0
    d9e8:	d10a      	bne.n	da00 <mp_obj_equal+0x74>
    d9ea:	6878      	ldr	r0, [r7, #4]
    d9ec:	f7ff fe6a 	bl	d6c4 <MP_OBJ_IS_OBJ>
    d9f0:	4603      	mov	r3, r0
    d9f2:	2b00      	cmp	r3, #0
    d9f4:	d01b      	beq.n	da2e <mp_obj_equal+0xa2>
    d9f6:	687b      	ldr	r3, [r7, #4]
    d9f8:	681b      	ldr	r3, [r3, #0]
    d9fa:	4a27      	ldr	r2, [pc, #156]	; (da98 <mp_obj_equal+0x10c>)
    d9fc:	4293      	cmp	r3, r2
    d9fe:	d116      	bne.n	da2e <mp_obj_equal+0xa2>
        if (MP_OBJ_IS_STR(o2)) {
    da00:	6838      	ldr	r0, [r7, #0]
    da02:	f7ff fe4d 	bl	d6a0 <MP_OBJ_IS_QSTR>
    da06:	4603      	mov	r3, r0
    da08:	2b00      	cmp	r3, #0
    da0a:	d10a      	bne.n	da22 <mp_obj_equal+0x96>
    da0c:	6838      	ldr	r0, [r7, #0]
    da0e:	f7ff fe59 	bl	d6c4 <MP_OBJ_IS_OBJ>
    da12:	4603      	mov	r3, r0
    da14:	2b00      	cmp	r3, #0
    da16:	d01b      	beq.n	da50 <mp_obj_equal+0xc4>
    da18:	683b      	ldr	r3, [r7, #0]
    da1a:	681b      	ldr	r3, [r3, #0]
    da1c:	4a1e      	ldr	r2, [pc, #120]	; (da98 <mp_obj_equal+0x10c>)
    da1e:	4293      	cmp	r3, r2
    da20:	d116      	bne.n	da50 <mp_obj_equal+0xc4>
            // both strings, use special function
            return mp_obj_str_equal(o1, o2);
    da22:	6839      	ldr	r1, [r7, #0]
    da24:	6878      	ldr	r0, [r7, #4]
    da26:	f007 fb6f 	bl	15108 <mp_obj_str_equal>
    da2a:	4603      	mov	r3, r0
    da2c:	e02d      	b.n	da8a <mp_obj_equal+0xfe>
        } else {
            // a string is never equal to anything else
            goto str_cmp_err;
        }
    } else if (MP_OBJ_IS_STR(o2)) {
    da2e:	6838      	ldr	r0, [r7, #0]
    da30:	f7ff fe36 	bl	d6a0 <MP_OBJ_IS_QSTR>
    da34:	4603      	mov	r3, r0
    da36:	2b00      	cmp	r3, #0
    da38:	d10a      	bne.n	da50 <mp_obj_equal+0xc4>
    da3a:	6838      	ldr	r0, [r7, #0]
    da3c:	f7ff fe42 	bl	d6c4 <MP_OBJ_IS_OBJ>
    da40:	4603      	mov	r3, r0
    da42:	2b00      	cmp	r3, #0
    da44:	d006      	beq.n	da54 <mp_obj_equal+0xc8>
    da46:	683b      	ldr	r3, [r7, #0]
    da48:	681b      	ldr	r3, [r3, #0]
    da4a:	4a13      	ldr	r2, [pc, #76]	; (da98 <mp_obj_equal+0x10c>)
    da4c:	4293      	cmp	r3, r2
    da4e:	d101      	bne.n	da54 <mp_obj_equal+0xc8>
        #if MICROPY_PY_STR_BYTES_CMP_WARN
        if (MP_OBJ_IS_TYPE(o1, &mp_type_bytes) || MP_OBJ_IS_TYPE(o2, &mp_type_bytes)) {
            mp_warning("Comparison between bytes and str");
        }
        #endif
        return false;
    da50:	2300      	movs	r3, #0
    da52:	e01a      	b.n	da8a <mp_obj_equal+0xfe>
    }

    // generic type, call binary_op(MP_BINARY_OP_EQUAL)
    mp_obj_type_t *type = mp_obj_get_type(o1);
    da54:	6878      	ldr	r0, [r7, #4]
    da56:	f7ff fe47 	bl	d6e8 <mp_obj_get_type>
    da5a:	6138      	str	r0, [r7, #16]
    if (type->binary_op != NULL) {
    da5c:	693b      	ldr	r3, [r7, #16]
    da5e:	699b      	ldr	r3, [r3, #24]
    da60:	2b00      	cmp	r3, #0
    da62:	d011      	beq.n	da88 <mp_obj_equal+0xfc>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    da64:	693b      	ldr	r3, [r7, #16]
    da66:	699b      	ldr	r3, [r3, #24]
    da68:	683a      	ldr	r2, [r7, #0]
    da6a:	6879      	ldr	r1, [r7, #4]
    da6c:	2002      	movs	r0, #2
    da6e:	4798      	blx	r3
    da70:	60f8      	str	r0, [r7, #12]
        if (r != MP_OBJ_NULL) {
    da72:	68fb      	ldr	r3, [r7, #12]
    da74:	2b00      	cmp	r3, #0
    da76:	d007      	beq.n	da88 <mp_obj_equal+0xfc>
            return r == mp_const_true ? true : false;
    da78:	68fb      	ldr	r3, [r7, #12]
    da7a:	4a08      	ldr	r2, [pc, #32]	; (da9c <mp_obj_equal+0x110>)
    da7c:	4293      	cmp	r3, r2
    da7e:	bf0c      	ite	eq
    da80:	2301      	moveq	r3, #1
    da82:	2300      	movne	r3, #0
    da84:	b2db      	uxtb	r3, r3
    da86:	e000      	b.n	da8a <mp_obj_equal+0xfe>
        }
    }

    // equality not implemented, and objects are not the same object, so
    // they are defined as not equal
    return false;
    da88:	2300      	movs	r3, #0
}
    da8a:	4618      	mov	r0, r3
    da8c:	3718      	adds	r7, #24
    da8e:	46bd      	mov	sp, r7
    da90:	bd80      	pop	{r7, pc}
    da92:	bf00      	nop
    da94:	00022b54 	.word	0x00022b54
    da98:	00023204 	.word	0x00023204
    da9c:	00021310 	.word	0x00021310

0000daa0 <mp_obj_get_int>:

mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    daa0:	b580      	push	{r7, lr}
    daa2:	b082      	sub	sp, #8
    daa4:	af00      	add	r7, sp, #0
    daa6:	6078      	str	r0, [r7, #4]
    // This function essentially performs implicit type conversion to int
    // Note that Python does NOT provide implicit type conversion from
    // float to int in the core expression language, try some_list[1.0].
    if (arg == mp_const_false) {
    daa8:	687b      	ldr	r3, [r7, #4]
    daaa:	4a15      	ldr	r2, [pc, #84]	; (db00 <mp_obj_get_int+0x60>)
    daac:	4293      	cmp	r3, r2
    daae:	d101      	bne.n	dab4 <mp_obj_get_int+0x14>
        return 0;
    dab0:	2300      	movs	r3, #0
    dab2:	e021      	b.n	daf8 <mp_obj_get_int+0x58>
    } else if (arg == mp_const_true) {
    dab4:	687b      	ldr	r3, [r7, #4]
    dab6:	4a13      	ldr	r2, [pc, #76]	; (db04 <mp_obj_get_int+0x64>)
    dab8:	4293      	cmp	r3, r2
    daba:	d101      	bne.n	dac0 <mp_obj_get_int+0x20>
        return 1;
    dabc:	2301      	movs	r3, #1
    dabe:	e01b      	b.n	daf8 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dac0:	6878      	ldr	r0, [r7, #4]
    dac2:	f7ff fddb 	bl	d67c <MP_OBJ_IS_SMALL_INT>
    dac6:	4603      	mov	r3, r0
    dac8:	2b00      	cmp	r3, #0
    daca:	d002      	beq.n	dad2 <mp_obj_get_int+0x32>
        return MP_OBJ_SMALL_INT_VALUE(arg);
    dacc:	687b      	ldr	r3, [r7, #4]
    dace:	105b      	asrs	r3, r3, #1
    dad0:	e012      	b.n	daf8 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dad2:	6878      	ldr	r0, [r7, #4]
    dad4:	f7ff fdf6 	bl	d6c4 <MP_OBJ_IS_OBJ>
    dad8:	4603      	mov	r3, r0
    dada:	2b00      	cmp	r3, #0
    dadc:	d009      	beq.n	daf2 <mp_obj_get_int+0x52>
    dade:	687b      	ldr	r3, [r7, #4]
    dae0:	681b      	ldr	r3, [r3, #0]
    dae2:	4a09      	ldr	r2, [pc, #36]	; (db08 <mp_obj_get_int+0x68>)
    dae4:	4293      	cmp	r3, r2
    dae6:	d104      	bne.n	daf2 <mp_obj_get_int+0x52>
        return mp_obj_int_get_checked(arg);
    dae8:	6878      	ldr	r0, [r7, #4]
    daea:	f002 fe1f 	bl	1072c <mp_obj_int_get_checked>
    daee:	4603      	mov	r3, r0
    daf0:	e002      	b.n	daf8 <mp_obj_get_int+0x58>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("can't convert to int");
    daf2:	4806      	ldr	r0, [pc, #24]	; (db0c <mp_obj_get_int+0x6c>)
    daf4:	f7ff f9e2 	bl	cebc <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "can't convert %s to int", mp_obj_get_type_str(arg)));
        }
    }
}
    daf8:	4618      	mov	r0, r3
    dafa:	3708      	adds	r7, #8
    dafc:	46bd      	mov	sp, r7
    dafe:	bd80      	pop	{r7, pc}
    db00:	00021308 	.word	0x00021308
    db04:	00021310 	.word	0x00021310
    db08:	00022610 	.word	0x00022610
    db0c:	0002117c 	.word	0x0002117c

0000db10 <mp_obj_get_int_truncated>:

mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    db10:	b580      	push	{r7, lr}
    db12:	b082      	sub	sp, #8
    db14:	af00      	add	r7, sp, #0
    db16:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_INT(arg)) {
    db18:	6878      	ldr	r0, [r7, #4]
    db1a:	f7ff fdaf 	bl	d67c <MP_OBJ_IS_SMALL_INT>
    db1e:	4603      	mov	r3, r0
    db20:	2b00      	cmp	r3, #0
    db22:	d10a      	bne.n	db3a <mp_obj_get_int_truncated+0x2a>
    db24:	6878      	ldr	r0, [r7, #4]
    db26:	f7ff fdcd 	bl	d6c4 <MP_OBJ_IS_OBJ>
    db2a:	4603      	mov	r3, r0
    db2c:	2b00      	cmp	r3, #0
    db2e:	d009      	beq.n	db44 <mp_obj_get_int_truncated+0x34>
    db30:	687b      	ldr	r3, [r7, #4]
    db32:	681b      	ldr	r3, [r3, #0]
    db34:	4a07      	ldr	r2, [pc, #28]	; (db54 <mp_obj_get_int_truncated+0x44>)
    db36:	4293      	cmp	r3, r2
    db38:	d104      	bne.n	db44 <mp_obj_get_int_truncated+0x34>
        return mp_obj_int_get_truncated(arg);
    db3a:	6878      	ldr	r0, [r7, #4]
    db3c:	f002 fdea 	bl	10714 <mp_obj_int_get_truncated>
    db40:	4603      	mov	r3, r0
    db42:	e003      	b.n	db4c <mp_obj_get_int_truncated+0x3c>
    } else {
        return mp_obj_get_int(arg);
    db44:	6878      	ldr	r0, [r7, #4]
    db46:	f7ff ffab 	bl	daa0 <mp_obj_get_int>
    db4a:	4603      	mov	r3, r0
    }
}
    db4c:	4618      	mov	r0, r3
    db4e:	3708      	adds	r7, #8
    db50:	46bd      	mov	sp, r7
    db52:	bd80      	pop	{r7, pc}
    db54:	00022610 	.word	0x00022610

0000db58 <mp_obj_get_int_maybe>:

// returns false if arg is not of integral type
// returns true and sets *value if it is of integral type
// can throw OverflowError if arg is of integral type, but doesn't fit in a mp_int_t
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    db58:	b580      	push	{r7, lr}
    db5a:	b082      	sub	sp, #8
    db5c:	af00      	add	r7, sp, #0
    db5e:	6078      	str	r0, [r7, #4]
    db60:	6039      	str	r1, [r7, #0]
    if (arg == mp_const_false) {
    db62:	687b      	ldr	r3, [r7, #4]
    db64:	4a19      	ldr	r2, [pc, #100]	; (dbcc <mp_obj_get_int_maybe+0x74>)
    db66:	4293      	cmp	r3, r2
    db68:	d103      	bne.n	db72 <mp_obj_get_int_maybe+0x1a>
        *value = 0;
    db6a:	683b      	ldr	r3, [r7, #0]
    db6c:	2200      	movs	r2, #0
    db6e:	601a      	str	r2, [r3, #0]
    db70:	e026      	b.n	dbc0 <mp_obj_get_int_maybe+0x68>
    } else if (arg == mp_const_true) {
    db72:	687b      	ldr	r3, [r7, #4]
    db74:	4a16      	ldr	r2, [pc, #88]	; (dbd0 <mp_obj_get_int_maybe+0x78>)
    db76:	4293      	cmp	r3, r2
    db78:	d103      	bne.n	db82 <mp_obj_get_int_maybe+0x2a>
        *value = 1;
    db7a:	683b      	ldr	r3, [r7, #0]
    db7c:	2201      	movs	r2, #1
    db7e:	601a      	str	r2, [r3, #0]
    db80:	e01e      	b.n	dbc0 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    db82:	6878      	ldr	r0, [r7, #4]
    db84:	f7ff fd7a 	bl	d67c <MP_OBJ_IS_SMALL_INT>
    db88:	4603      	mov	r3, r0
    db8a:	2b00      	cmp	r3, #0
    db8c:	d004      	beq.n	db98 <mp_obj_get_int_maybe+0x40>
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    db8e:	687b      	ldr	r3, [r7, #4]
    db90:	105a      	asrs	r2, r3, #1
    db92:	683b      	ldr	r3, [r7, #0]
    db94:	601a      	str	r2, [r3, #0]
    db96:	e013      	b.n	dbc0 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    db98:	6878      	ldr	r0, [r7, #4]
    db9a:	f7ff fd93 	bl	d6c4 <MP_OBJ_IS_OBJ>
    db9e:	4603      	mov	r3, r0
    dba0:	2b00      	cmp	r3, #0
    dba2:	d00b      	beq.n	dbbc <mp_obj_get_int_maybe+0x64>
    dba4:	687b      	ldr	r3, [r7, #4]
    dba6:	681b      	ldr	r3, [r3, #0]
    dba8:	4a0a      	ldr	r2, [pc, #40]	; (dbd4 <mp_obj_get_int_maybe+0x7c>)
    dbaa:	4293      	cmp	r3, r2
    dbac:	d106      	bne.n	dbbc <mp_obj_get_int_maybe+0x64>
        *value = mp_obj_int_get_checked(arg);
    dbae:	6878      	ldr	r0, [r7, #4]
    dbb0:	f002 fdbc 	bl	1072c <mp_obj_int_get_checked>
    dbb4:	4602      	mov	r2, r0
    dbb6:	683b      	ldr	r3, [r7, #0]
    dbb8:	601a      	str	r2, [r3, #0]
    dbba:	e001      	b.n	dbc0 <mp_obj_get_int_maybe+0x68>
    } else {
        return false;
    dbbc:	2300      	movs	r3, #0
    dbbe:	e000      	b.n	dbc2 <mp_obj_get_int_maybe+0x6a>
    }
    return true;
    dbc0:	2301      	movs	r3, #1
}
    dbc2:	4618      	mov	r0, r3
    dbc4:	3708      	adds	r7, #8
    dbc6:	46bd      	mov	sp, r7
    dbc8:	bd80      	pop	{r7, pc}
    dbca:	bf00      	nop
    dbcc:	00021308 	.word	0x00021308
    dbd0:	00021310 	.word	0x00021310
    dbd4:	00022610 	.word	0x00022610

0000dbd8 <mp_obj_get_array>:
}
#endif
#endif

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    dbd8:	b580      	push	{r7, lr}
    dbda:	b084      	sub	sp, #16
    dbdc:	af00      	add	r7, sp, #0
    dbde:	60f8      	str	r0, [r7, #12]
    dbe0:	60b9      	str	r1, [r7, #8]
    dbe2:	607a      	str	r2, [r7, #4]
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    dbe4:	68f8      	ldr	r0, [r7, #12]
    dbe6:	f7ff fd6d 	bl	d6c4 <MP_OBJ_IS_OBJ>
    dbea:	4603      	mov	r3, r0
    dbec:	2b00      	cmp	r3, #0
    dbee:	d00a      	beq.n	dc06 <mp_obj_get_array+0x2e>
    dbf0:	68fb      	ldr	r3, [r7, #12]
    dbf2:	681b      	ldr	r3, [r3, #0]
    dbf4:	4a10      	ldr	r2, [pc, #64]	; (dc38 <mp_obj_get_array+0x60>)
    dbf6:	4293      	cmp	r3, r2
    dbf8:	d105      	bne.n	dc06 <mp_obj_get_array+0x2e>
        mp_obj_tuple_get(o, len, items);
    dbfa:	687a      	ldr	r2, [r7, #4]
    dbfc:	68b9      	ldr	r1, [r7, #8]
    dbfe:	68f8      	ldr	r0, [r7, #12]
    dc00:	f007 ff4c 	bl	15a9c <mp_obj_tuple_get>
    dc04:	e013      	b.n	dc2e <mp_obj_get_array+0x56>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    dc06:	68f8      	ldr	r0, [r7, #12]
    dc08:	f7ff fd5c 	bl	d6c4 <MP_OBJ_IS_OBJ>
    dc0c:	4603      	mov	r3, r0
    dc0e:	2b00      	cmp	r3, #0
    dc10:	d00a      	beq.n	dc28 <mp_obj_get_array+0x50>
    dc12:	68fb      	ldr	r3, [r7, #12]
    dc14:	681b      	ldr	r3, [r3, #0]
    dc16:	4a09      	ldr	r2, [pc, #36]	; (dc3c <mp_obj_get_array+0x64>)
    dc18:	4293      	cmp	r3, r2
    dc1a:	d105      	bne.n	dc28 <mp_obj_get_array+0x50>
        mp_obj_list_get(o, len, items);
    dc1c:	687a      	ldr	r2, [r7, #4]
    dc1e:	68b9      	ldr	r1, [r7, #8]
    dc20:	68f8      	ldr	r0, [r7, #12]
    dc22:	f003 fd00 	bl	11626 <mp_obj_list_get>
    dc26:	e002      	b.n	dc2e <mp_obj_get_array+0x56>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("expected tuple/list");
    dc28:	4805      	ldr	r0, [pc, #20]	; (dc40 <mp_obj_get_array+0x68>)
    dc2a:	f7ff f947 	bl	cebc <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object '%s' is not a tuple or list", mp_obj_get_type_str(o)));
        }
    }
}
    dc2e:	bf00      	nop
    dc30:	3710      	adds	r7, #16
    dc32:	46bd      	mov	sp, r7
    dc34:	bd80      	pop	{r7, pc}
    dc36:	bf00      	nop
    dc38:	00023488 	.word	0x00023488
    dc3c:	0002287c 	.word	0x0002287c
    dc40:	00021194 	.word	0x00021194

0000dc44 <mp_obj_get_array_fixed_n>:

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    dc44:	b580      	push	{r7, lr}
    dc46:	b086      	sub	sp, #24
    dc48:	af00      	add	r7, sp, #0
    dc4a:	60f8      	str	r0, [r7, #12]
    dc4c:	60b9      	str	r1, [r7, #8]
    dc4e:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    mp_obj_get_array(o, &seq_len, items);
    dc50:	f107 0314 	add.w	r3, r7, #20
    dc54:	687a      	ldr	r2, [r7, #4]
    dc56:	4619      	mov	r1, r3
    dc58:	68f8      	ldr	r0, [r7, #12]
    dc5a:	f7ff ffbd 	bl	dbd8 <mp_obj_get_array>
    if (seq_len != len) {
    dc5e:	697a      	ldr	r2, [r7, #20]
    dc60:	68bb      	ldr	r3, [r7, #8]
    dc62:	429a      	cmp	r2, r3
    dc64:	d002      	beq.n	dc6c <mp_obj_get_array_fixed_n+0x28>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_ValueError("tuple/list has wrong length");
    dc66:	4803      	ldr	r0, [pc, #12]	; (dc74 <mp_obj_get_array_fixed_n+0x30>)
    dc68:	f7ff f91d 	bl	cea6 <mp_raise_ValueError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
                "requested length %d but object has length %d", (int)len, (int)seq_len));
        }
    }
}
    dc6c:	bf00      	nop
    dc6e:	3718      	adds	r7, #24
    dc70:	46bd      	mov	sp, r7
    dc72:	bd80      	pop	{r7, pc}
    dc74:	000211a8 	.word	0x000211a8

0000dc78 <mp_get_index>:

// is_slice determines whether the index is a slice index
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    dc78:	b580      	push	{r7, lr}
    dc7a:	b086      	sub	sp, #24
    dc7c:	af00      	add	r7, sp, #0
    dc7e:	60f8      	str	r0, [r7, #12]
    dc80:	60b9      	str	r1, [r7, #8]
    dc82:	607a      	str	r2, [r7, #4]
    dc84:	70fb      	strb	r3, [r7, #3]
    mp_int_t i;
    if (MP_OBJ_IS_SMALL_INT(index)) {
    dc86:	6878      	ldr	r0, [r7, #4]
    dc88:	f7ff fcf8 	bl	d67c <MP_OBJ_IS_SMALL_INT>
    dc8c:	4603      	mov	r3, r0
    dc8e:	2b00      	cmp	r3, #0
    dc90:	d003      	beq.n	dc9a <mp_get_index+0x22>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    dc92:	687b      	ldr	r3, [r7, #4]
    dc94:	105b      	asrs	r3, r3, #1
    dc96:	617b      	str	r3, [r7, #20]
    dc98:	e00e      	b.n	dcb8 <mp_get_index+0x40>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    dc9a:	f107 0314 	add.w	r3, r7, #20
    dc9e:	4619      	mov	r1, r3
    dca0:	6878      	ldr	r0, [r7, #4]
    dca2:	f7ff ff59 	bl	db58 <mp_obj_get_int_maybe>
    dca6:	4603      	mov	r3, r0
    dca8:	f083 0301 	eor.w	r3, r3, #1
    dcac:	b2db      	uxtb	r3, r3
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d002      	beq.n	dcb8 <mp_get_index+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("indices must be integers");
    dcb2:	4816      	ldr	r0, [pc, #88]	; (dd0c <mp_get_index+0x94>)
    dcb4:	f7ff f902 	bl	cebc <mp_raise_TypeError>
                "%q indices must be integers, not %s",
                type->name, mp_obj_get_type_str(index)));
        }
    }

    if (i < 0) {
    dcb8:	697b      	ldr	r3, [r7, #20]
    dcba:	2b00      	cmp	r3, #0
    dcbc:	da04      	bge.n	dcc8 <mp_get_index+0x50>
        i += len;
    dcbe:	697b      	ldr	r3, [r7, #20]
    dcc0:	461a      	mov	r2, r3
    dcc2:	68bb      	ldr	r3, [r7, #8]
    dcc4:	4413      	add	r3, r2
    dcc6:	617b      	str	r3, [r7, #20]
    }
    if (is_slice) {
    dcc8:	78fb      	ldrb	r3, [r7, #3]
    dcca:	2b00      	cmp	r3, #0
    dccc:	d00d      	beq.n	dcea <mp_get_index+0x72>
        if (i < 0) {
    dcce:	697b      	ldr	r3, [r7, #20]
    dcd0:	2b00      	cmp	r3, #0
    dcd2:	da02      	bge.n	dcda <mp_get_index+0x62>
            i = 0;
    dcd4:	2300      	movs	r3, #0
    dcd6:	617b      	str	r3, [r7, #20]
    dcd8:	e013      	b.n	dd02 <mp_get_index+0x8a>
        } else if ((mp_uint_t)i > len) {
    dcda:	697b      	ldr	r3, [r7, #20]
    dcdc:	461a      	mov	r2, r3
    dcde:	68bb      	ldr	r3, [r7, #8]
    dce0:	429a      	cmp	r2, r3
    dce2:	d90e      	bls.n	dd02 <mp_get_index+0x8a>
            i = len;
    dce4:	68bb      	ldr	r3, [r7, #8]
    dce6:	617b      	str	r3, [r7, #20]
    dce8:	e00b      	b.n	dd02 <mp_get_index+0x8a>
        }
    } else {
        if (i < 0 || (mp_uint_t)i >= len) {
    dcea:	697b      	ldr	r3, [r7, #20]
    dcec:	2b00      	cmp	r3, #0
    dcee:	db04      	blt.n	dcfa <mp_get_index+0x82>
    dcf0:	697b      	ldr	r3, [r7, #20]
    dcf2:	461a      	mov	r2, r3
    dcf4:	68bb      	ldr	r3, [r7, #8]
    dcf6:	429a      	cmp	r2, r3
    dcf8:	d303      	bcc.n	dd02 <mp_get_index+0x8a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_IndexError, "index out of range");
    dcfa:	4905      	ldr	r1, [pc, #20]	; (dd10 <mp_get_index+0x98>)
    dcfc:	4805      	ldr	r0, [pc, #20]	; (dd14 <mp_get_index+0x9c>)
    dcfe:	f7ff f8bb 	bl	ce78 <mp_raise_msg>
            }
        }
    }

    // By this point 0 <= i <= len and so fits in a size_t
    return (size_t)i;
    dd02:	697b      	ldr	r3, [r7, #20]
}
    dd04:	4618      	mov	r0, r3
    dd06:	3718      	adds	r7, #24
    dd08:	46bd      	mov	sp, r7
    dd0a:	bd80      	pop	{r7, pc}
    dd0c:	000211c4 	.word	0x000211c4
    dd10:	000211e0 	.word	0x000211e0
    dd14:	00021c00 	.word	0x00021c00

0000dd18 <mp_obj_id>:

mp_obj_t mp_obj_id(mp_obj_t o_in) {
    dd18:	b580      	push	{r7, lr}
    dd1a:	b084      	sub	sp, #16
    dd1c:	af00      	add	r7, sp, #0
    dd1e:	6078      	str	r0, [r7, #4]
    mp_int_t id = (mp_int_t)o_in;
    dd20:	687b      	ldr	r3, [r7, #4]
    dd22:	60fb      	str	r3, [r7, #12]
    if (!MP_OBJ_IS_OBJ(o_in)) {
    dd24:	6878      	ldr	r0, [r7, #4]
    dd26:	f7ff fccd 	bl	d6c4 <MP_OBJ_IS_OBJ>
    dd2a:	4603      	mov	r3, r0
    dd2c:	f083 0301 	eor.w	r3, r3, #1
    dd30:	b2db      	uxtb	r3, r3
    dd32:	2b00      	cmp	r3, #0
    dd34:	d004      	beq.n	dd40 <mp_obj_id+0x28>
        return mp_obj_new_int(id);
    dd36:	68f8      	ldr	r0, [r7, #12]
    dd38:	f002 fcd0 	bl	106dc <mp_obj_new_int>
    dd3c:	4603      	mov	r3, r0
    dd3e:	e00c      	b.n	dd5a <mp_obj_id+0x42>
    } else if (id >= 0) {
    dd40:	68fb      	ldr	r3, [r7, #12]
    dd42:	2b00      	cmp	r3, #0
    dd44:	db04      	blt.n	dd50 <mp_obj_id+0x38>
        // Many OSes and CPUs have affinity for putting "user" memories
        // into low half of address space, and "system" into upper half.
        // We're going to take advantage of that and return small int
        // (signed) for such "user" addresses.
        return MP_OBJ_NEW_SMALL_INT(id);
    dd46:	68fb      	ldr	r3, [r7, #12]
    dd48:	005b      	lsls	r3, r3, #1
    dd4a:	f043 0301 	orr.w	r3, r3, #1
    dd4e:	e004      	b.n	dd5a <mp_obj_id+0x42>
    } else {
        // If that didn't work, well, let's return long int, just as
        // a (big) positive value, so it will never clash with the range
        // of small int returned in previous case.
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    dd50:	68fb      	ldr	r3, [r7, #12]
    dd52:	4618      	mov	r0, r3
    dd54:	f002 fca8 	bl	106a8 <mp_obj_new_int_from_uint>
    dd58:	4603      	mov	r3, r0
    }
}
    dd5a:	4618      	mov	r0, r3
    dd5c:	3710      	adds	r7, #16
    dd5e:	46bd      	mov	sp, r7
    dd60:	bd80      	pop	{r7, pc}

0000dd62 <mp_obj_len>:

// will raise a TypeError if object has no length
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    dd62:	b580      	push	{r7, lr}
    dd64:	b084      	sub	sp, #16
    dd66:	af00      	add	r7, sp, #0
    dd68:	6078      	str	r0, [r7, #4]
    mp_obj_t len = mp_obj_len_maybe(o_in);
    dd6a:	6878      	ldr	r0, [r7, #4]
    dd6c:	f000 f80e 	bl	dd8c <mp_obj_len_maybe>
    dd70:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    dd72:	68fb      	ldr	r3, [r7, #12]
    dd74:	2b00      	cmp	r3, #0
    dd76:	d102      	bne.n	dd7e <mp_obj_len+0x1c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object has no len");
    dd78:	4803      	ldr	r0, [pc, #12]	; (dd88 <mp_obj_len+0x26>)
    dd7a:	f7ff f89f 	bl	cebc <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object of type '%s' has no len()", mp_obj_get_type_str(o_in)));
        }
    } else {
        return len;
    dd7e:	68fb      	ldr	r3, [r7, #12]
    }
}
    dd80:	4618      	mov	r0, r3
    dd82:	3710      	adds	r7, #16
    dd84:	46bd      	mov	sp, r7
    dd86:	bd80      	pop	{r7, pc}
    dd88:	000211f4 	.word	0x000211f4

0000dd8c <mp_obj_len_maybe>:

// may return MP_OBJ_NULL
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    dd8c:	b580      	push	{r7, lr}
    dd8e:	b084      	sub	sp, #16
    dd90:	af00      	add	r7, sp, #0
    dd92:	6078      	str	r0, [r7, #4]
    if (
#if !MICROPY_PY_BUILTINS_STR_UNICODE
        // It's simple - unicode is slow, non-unicode is fast
        MP_OBJ_IS_STR(o_in) ||
    dd94:	6878      	ldr	r0, [r7, #4]
    dd96:	f7ff fc83 	bl	d6a0 <MP_OBJ_IS_QSTR>
    dd9a:	4603      	mov	r3, r0
    if (
    dd9c:	2b00      	cmp	r3, #0
    dd9e:	d115      	bne.n	ddcc <mp_obj_len_maybe+0x40>
        MP_OBJ_IS_STR(o_in) ||
    dda0:	6878      	ldr	r0, [r7, #4]
    dda2:	f7ff fc8f 	bl	d6c4 <MP_OBJ_IS_OBJ>
    dda6:	4603      	mov	r3, r0
    dda8:	2b00      	cmp	r3, #0
    ddaa:	d004      	beq.n	ddb6 <mp_obj_len_maybe+0x2a>
    ddac:	687b      	ldr	r3, [r7, #4]
    ddae:	681b      	ldr	r3, [r3, #0]
    ddb0:	4a1b      	ldr	r2, [pc, #108]	; (de20 <mp_obj_len_maybe+0x94>)
    ddb2:	4293      	cmp	r3, r2
    ddb4:	d00a      	beq.n	ddcc <mp_obj_len_maybe+0x40>
#endif
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    ddb6:	6878      	ldr	r0, [r7, #4]
    ddb8:	f7ff fc84 	bl	d6c4 <MP_OBJ_IS_OBJ>
    ddbc:	4603      	mov	r3, r0
        MP_OBJ_IS_STR(o_in) ||
    ddbe:	2b00      	cmp	r3, #0
    ddc0:	d019      	beq.n	ddf6 <mp_obj_len_maybe+0x6a>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	681b      	ldr	r3, [r3, #0]
    ddc6:	4a17      	ldr	r2, [pc, #92]	; (de24 <mp_obj_len_maybe+0x98>)
    ddc8:	4293      	cmp	r3, r2
    ddca:	d114      	bne.n	ddf6 <mp_obj_len_maybe+0x6a>
        GET_STR_LEN(o_in, l);
    ddcc:	6878      	ldr	r0, [r7, #4]
    ddce:	f7ff fc67 	bl	d6a0 <MP_OBJ_IS_QSTR>
    ddd2:	4603      	mov	r3, r0
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d006      	beq.n	dde6 <mp_obj_len_maybe+0x5a>
    ddd8:	687b      	ldr	r3, [r7, #4]
    ddda:	089b      	lsrs	r3, r3, #2
    dddc:	4618      	mov	r0, r3
    ddde:	f7f3 f9f8 	bl	11d2 <qstr_len>
    dde2:	60f8      	str	r0, [r7, #12]
    dde4:	e002      	b.n	ddec <mp_obj_len_maybe+0x60>
    dde6:	687b      	ldr	r3, [r7, #4]
    dde8:	689b      	ldr	r3, [r3, #8]
    ddea:	60fb      	str	r3, [r7, #12]
        return MP_OBJ_NEW_SMALL_INT(l);
    ddec:	68fb      	ldr	r3, [r7, #12]
    ddee:	005b      	lsls	r3, r3, #1
    ddf0:	f043 0301 	orr.w	r3, r3, #1
    ddf4:	e00f      	b.n	de16 <mp_obj_len_maybe+0x8a>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    ddf6:	6878      	ldr	r0, [r7, #4]
    ddf8:	f7ff fc76 	bl	d6e8 <mp_obj_get_type>
    ddfc:	60b8      	str	r0, [r7, #8]
        if (type->unary_op != NULL) {
    ddfe:	68bb      	ldr	r3, [r7, #8]
    de00:	695b      	ldr	r3, [r3, #20]
    de02:	2b00      	cmp	r3, #0
    de04:	d006      	beq.n	de14 <mp_obj_len_maybe+0x88>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    de06:	68bb      	ldr	r3, [r7, #8]
    de08:	695b      	ldr	r3, [r3, #20]
    de0a:	6879      	ldr	r1, [r7, #4]
    de0c:	2005      	movs	r0, #5
    de0e:	4798      	blx	r3
    de10:	4603      	mov	r3, r0
    de12:	e000      	b.n	de16 <mp_obj_len_maybe+0x8a>
        } else {
            return MP_OBJ_NULL;
    de14:	2300      	movs	r3, #0
        }
    }
}
    de16:	4618      	mov	r0, r3
    de18:	3710      	adds	r7, #16
    de1a:	46bd      	mov	sp, r7
    de1c:	bd80      	pop	{r7, pc}
    de1e:	bf00      	nop
    de20:	00023204 	.word	0x00023204
    de24:	00023240 	.word	0x00023240

0000de28 <mp_obj_subscr>:

mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    de28:	b580      	push	{r7, lr}
    de2a:	b086      	sub	sp, #24
    de2c:	af00      	add	r7, sp, #0
    de2e:	60f8      	str	r0, [r7, #12]
    de30:	60b9      	str	r1, [r7, #8]
    de32:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(base);
    de34:	68f8      	ldr	r0, [r7, #12]
    de36:	f7ff fc57 	bl	d6e8 <mp_obj_get_type>
    de3a:	6178      	str	r0, [r7, #20]
    if (type->subscr != NULL) {
    de3c:	697b      	ldr	r3, [r7, #20]
    de3e:	6a1b      	ldr	r3, [r3, #32]
    de40:	2b00      	cmp	r3, #0
    de42:	d00b      	beq.n	de5c <mp_obj_subscr+0x34>
        mp_obj_t ret = type->subscr(base, index, value);
    de44:	697b      	ldr	r3, [r7, #20]
    de46:	6a1b      	ldr	r3, [r3, #32]
    de48:	687a      	ldr	r2, [r7, #4]
    de4a:	68b9      	ldr	r1, [r7, #8]
    de4c:	68f8      	ldr	r0, [r7, #12]
    de4e:	4798      	blx	r3
    de50:	6138      	str	r0, [r7, #16]
        if (ret != MP_OBJ_NULL) {
    de52:	693b      	ldr	r3, [r7, #16]
    de54:	2b00      	cmp	r3, #0
    de56:	d001      	beq.n	de5c <mp_obj_subscr+0x34>
            return ret;
    de58:	693b      	ldr	r3, [r7, #16]
    de5a:	e00e      	b.n	de7a <mp_obj_subscr+0x52>
        }
        // TODO: call base classes here?
    }
    if (value == MP_OBJ_NULL) {
    de5c:	687b      	ldr	r3, [r7, #4]
    de5e:	2b00      	cmp	r3, #0
    de60:	d102      	bne.n	de68 <mp_obj_subscr+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item deletion");
    de62:	4808      	ldr	r0, [pc, #32]	; (de84 <mp_obj_subscr+0x5c>)
    de64:	f7ff f82a 	bl	cebc <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item deletion", mp_obj_get_type_str(base)));
        }
    } else if (value == MP_OBJ_SENTINEL) {
    de68:	687b      	ldr	r3, [r7, #4]
    de6a:	2b08      	cmp	r3, #8
    de6c:	d102      	bne.n	de74 <mp_obj_subscr+0x4c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object is not subscriptable");
    de6e:	4806      	ldr	r0, [pc, #24]	; (de88 <mp_obj_subscr+0x60>)
    de70:	f7ff f824 	bl	cebc <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not subscriptable", mp_obj_get_type_str(base)));
        }
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item assignment");
    de74:	4805      	ldr	r0, [pc, #20]	; (de8c <mp_obj_subscr+0x64>)
    de76:	f7ff f821 	bl	cebc <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item assignment", mp_obj_get_type_str(base)));
        }
    }
}
    de7a:	4618      	mov	r0, r3
    de7c:	3718      	adds	r7, #24
    de7e:	46bd      	mov	sp, r7
    de80:	bd80      	pop	{r7, pc}
    de82:	bf00      	nop
    de84:	00021208 	.word	0x00021208
    de88:	00021230 	.word	0x00021230
    de8c:	0002124c 	.word	0x0002124c

0000de90 <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    de90:	b480      	push	{r7}
    de92:	b083      	sub	sp, #12
    de94:	af00      	add	r7, sp, #0
    de96:	6078      	str	r0, [r7, #4]
    return self;
    de98:	687b      	ldr	r3, [r7, #4]
}
    de9a:	4618      	mov	r0, r3
    de9c:	370c      	adds	r7, #12
    de9e:	46bd      	mov	sp, r7
    dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    dea4:	4770      	bx	lr

0000dea6 <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    dea6:	b480      	push	{r7}
    dea8:	b083      	sub	sp, #12
    deaa:	af00      	add	r7, sp, #0
    deac:	6078      	str	r0, [r7, #4]
    deae:	6039      	str	r1, [r7, #0]
    (void)iter_buf;
    return self;
    deb0:	687b      	ldr	r3, [r7, #4]
}
    deb2:	4618      	mov	r0, r3
    deb4:	370c      	adds	r7, #12
    deb6:	46bd      	mov	sp, r7
    deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    debc:	4770      	bx	lr

0000debe <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    debe:	b580      	push	{r7, lr}
    dec0:	b086      	sub	sp, #24
    dec2:	af00      	add	r7, sp, #0
    dec4:	60f8      	str	r0, [r7, #12]
    dec6:	60b9      	str	r1, [r7, #8]
    dec8:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(obj);
    deca:	68f8      	ldr	r0, [r7, #12]
    decc:	f7ff fc0c 	bl	d6e8 <mp_obj_get_type>
    ded0:	6178      	str	r0, [r7, #20]
    if (type->buffer_p.get_buffer == NULL) {
    ded2:	697b      	ldr	r3, [r7, #20]
    ded4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ded6:	2b00      	cmp	r3, #0
    ded8:	d101      	bne.n	dede <mp_get_buffer+0x20>
        return false;
    deda:	2300      	movs	r3, #0
    dedc:	e00c      	b.n	def8 <mp_get_buffer+0x3a>
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    dede:	697b      	ldr	r3, [r7, #20]
    dee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dee2:	687a      	ldr	r2, [r7, #4]
    dee4:	68b9      	ldr	r1, [r7, #8]
    dee6:	68f8      	ldr	r0, [r7, #12]
    dee8:	4798      	blx	r3
    deea:	6138      	str	r0, [r7, #16]
    if (ret != 0) {
    deec:	693b      	ldr	r3, [r7, #16]
    deee:	2b00      	cmp	r3, #0
    def0:	d001      	beq.n	def6 <mp_get_buffer+0x38>
        return false;
    def2:	2300      	movs	r3, #0
    def4:	e000      	b.n	def8 <mp_get_buffer+0x3a>
    }
    return true;
    def6:	2301      	movs	r3, #1
}
    def8:	4618      	mov	r0, r3
    defa:	3718      	adds	r7, #24
    defc:	46bd      	mov	sp, r7
    defe:	bd80      	pop	{r7, pc}

0000df00 <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    df00:	b580      	push	{r7, lr}
    df02:	b084      	sub	sp, #16
    df04:	af00      	add	r7, sp, #0
    df06:	60f8      	str	r0, [r7, #12]
    df08:	60b9      	str	r1, [r7, #8]
    df0a:	607a      	str	r2, [r7, #4]
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    df0c:	687a      	ldr	r2, [r7, #4]
    df0e:	68b9      	ldr	r1, [r7, #8]
    df10:	68f8      	ldr	r0, [r7, #12]
    df12:	f7ff ffd4 	bl	debe <mp_get_buffer>
    df16:	4603      	mov	r3, r0
    df18:	f083 0301 	eor.w	r3, r3, #1
    df1c:	b2db      	uxtb	r3, r3
    df1e:	2b00      	cmp	r3, #0
    df20:	d002      	beq.n	df28 <mp_get_buffer_raise+0x28>
        mp_raise_TypeError("object with buffer protocol required");
    df22:	4803      	ldr	r0, [pc, #12]	; (df30 <mp_get_buffer_raise+0x30>)
    df24:	f7fe ffca 	bl	cebc <mp_raise_TypeError>
    }
}
    df28:	bf00      	nop
    df2a:	3710      	adds	r7, #16
    df2c:	46bd      	mov	sp, r7
    df2e:	bd80      	pop	{r7, pc}
    df30:	0002127c 	.word	0x0002127c

0000df34 <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    df34:	b480      	push	{r7}
    df36:	b083      	sub	sp, #12
    df38:	af00      	add	r7, sp, #0
    df3a:	6078      	str	r0, [r7, #4]
    df3c:	6039      	str	r1, [r7, #0]
    switch (op) {
    df3e:	687b      	ldr	r3, [r7, #4]
    df40:	2b06      	cmp	r3, #6
    df42:	d104      	bne.n	df4e <mp_generic_unary_op+0x1a>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    df44:	683b      	ldr	r3, [r7, #0]
    df46:	005b      	lsls	r3, r3, #1
    df48:	f043 0301 	orr.w	r3, r3, #1
    df4c:	e000      	b.n	df50 <mp_generic_unary_op+0x1c>
        default: return MP_OBJ_NULL; // op not supported
    df4e:	2300      	movs	r3, #0
    }
}
    df50:	4618      	mov	r0, r3
    df52:	370c      	adds	r7, #12
    df54:	46bd      	mov	sp, r7
    df56:	f85d 7b04 	ldr.w	r7, [sp], #4
    df5a:	4770      	bx	lr

0000df5c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    df5c:	b480      	push	{r7}
    df5e:	b083      	sub	sp, #12
    df60:	af00      	add	r7, sp, #0
    df62:	6078      	str	r0, [r7, #4]
    df64:	687b      	ldr	r3, [r7, #4]
    df66:	2b00      	cmp	r3, #0
    df68:	d001      	beq.n	df6e <mp_obj_new_bool+0x12>
    df6a:	4b04      	ldr	r3, [pc, #16]	; (df7c <mp_obj_new_bool+0x20>)
    df6c:	e000      	b.n	df70 <mp_obj_new_bool+0x14>
    df6e:	4b04      	ldr	r3, [pc, #16]	; (df80 <mp_obj_new_bool+0x24>)
    df70:	4618      	mov	r0, r3
    df72:	370c      	adds	r7, #12
    df74:	46bd      	mov	sp, r7
    df76:	f85d 7b04 	ldr.w	r7, [sp], #4
    df7a:	4770      	bx	lr
    df7c:	00021310 	.word	0x00021310
    df80:	00021308 	.word	0x00021308

0000df84 <bool_print>:
typedef struct _mp_obj_bool_t {
    mp_obj_base_t base;
    bool value;
} mp_obj_bool_t;

STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    df84:	b580      	push	{r7, lr}
    df86:	b086      	sub	sp, #24
    df88:	af00      	add	r7, sp, #0
    df8a:	60f8      	str	r0, [r7, #12]
    df8c:	60b9      	str	r1, [r7, #8]
    df8e:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(self_in);
    df90:	68bb      	ldr	r3, [r7, #8]
    df92:	617b      	str	r3, [r7, #20]
            mp_print_str(print, "true");
        } else {
            mp_print_str(print, "false");
        }
    } else {
        if (self->value) {
    df94:	697b      	ldr	r3, [r7, #20]
    df96:	791b      	ldrb	r3, [r3, #4]
    df98:	2b00      	cmp	r3, #0
    df9a:	d004      	beq.n	dfa6 <bool_print+0x22>
            mp_print_str(print, "True");
    df9c:	4906      	ldr	r1, [pc, #24]	; (dfb8 <bool_print+0x34>)
    df9e:	68f8      	ldr	r0, [r7, #12]
    dfa0:	f7f3 fc64 	bl	186c <mp_print_str>
        } else {
            mp_print_str(print, "False");
        }
    }
}
    dfa4:	e003      	b.n	dfae <bool_print+0x2a>
            mp_print_str(print, "False");
    dfa6:	4905      	ldr	r1, [pc, #20]	; (dfbc <bool_print+0x38>)
    dfa8:	68f8      	ldr	r0, [r7, #12]
    dfaa:	f7f3 fc5f 	bl	186c <mp_print_str>
}
    dfae:	bf00      	nop
    dfb0:	3718      	adds	r7, #24
    dfb2:	46bd      	mov	sp, r7
    dfb4:	bd80      	pop	{r7, pc}
    dfb6:	bf00      	nop
    dfb8:	000212bc 	.word	0x000212bc
    dfbc:	000212c4 	.word	0x000212c4

0000dfc0 <bool_make_new>:

STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    dfc0:	b580      	push	{r7, lr}
    dfc2:	b086      	sub	sp, #24
    dfc4:	af02      	add	r7, sp, #8
    dfc6:	60f8      	str	r0, [r7, #12]
    dfc8:	60b9      	str	r1, [r7, #8]
    dfca:	607a      	str	r2, [r7, #4]
    dfcc:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    dfce:	2300      	movs	r3, #0
    dfd0:	9300      	str	r3, [sp, #0]
    dfd2:	2301      	movs	r3, #1
    dfd4:	2200      	movs	r2, #0
    dfd6:	6879      	ldr	r1, [r7, #4]
    dfd8:	68b8      	ldr	r0, [r7, #8]
    dfda:	f7fe ff95 	bl	cf08 <mp_arg_check_num>

    if (n_args == 0) {
    dfde:	68bb      	ldr	r3, [r7, #8]
    dfe0:	2b00      	cmp	r3, #0
    dfe2:	d101      	bne.n	dfe8 <bool_make_new+0x28>
        return mp_const_false;
    dfe4:	4b07      	ldr	r3, [pc, #28]	; (e004 <bool_make_new+0x44>)
    dfe6:	e009      	b.n	dffc <bool_make_new+0x3c>
    } else {
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    dfe8:	683b      	ldr	r3, [r7, #0]
    dfea:	681b      	ldr	r3, [r3, #0]
    dfec:	4618      	mov	r0, r3
    dfee:	f7ff fc57 	bl	d8a0 <mp_obj_is_true>
    dff2:	4603      	mov	r3, r0
    dff4:	4618      	mov	r0, r3
    dff6:	f7ff ffb1 	bl	df5c <mp_obj_new_bool>
    dffa:	4603      	mov	r3, r0
    }
}
    dffc:	4618      	mov	r0, r3
    dffe:	3710      	adds	r7, #16
    e000:	46bd      	mov	sp, r7
    e002:	bd80      	pop	{r7, pc}
    e004:	00021308 	.word	0x00021308

0000e008 <bool_unary_op>:

STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e008:	b580      	push	{r7, lr}
    e00a:	b084      	sub	sp, #16
    e00c:	af00      	add	r7, sp, #0
    e00e:	6078      	str	r0, [r7, #4]
    e010:	6039      	str	r1, [r7, #0]
    if (op == MP_UNARY_OP_LEN) {
    e012:	687b      	ldr	r3, [r7, #4]
    e014:	2b05      	cmp	r3, #5
    e016:	d101      	bne.n	e01c <bool_unary_op+0x14>
        return MP_OBJ_NULL;
    e018:	2300      	movs	r3, #0
    e01a:	e00b      	b.n	e034 <bool_unary_op+0x2c>
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    e01c:	683b      	ldr	r3, [r7, #0]
    e01e:	60fb      	str	r3, [r7, #12]
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    e020:	68fb      	ldr	r3, [r7, #12]
    e022:	791b      	ldrb	r3, [r3, #4]
    e024:	005b      	lsls	r3, r3, #1
    e026:	f043 0301 	orr.w	r3, r3, #1
    e02a:	4619      	mov	r1, r3
    e02c:	6878      	ldr	r0, [r7, #4]
    e02e:	f7fd fb07 	bl	b640 <mp_unary_op>
    e032:	4603      	mov	r3, r0
}
    e034:	4618      	mov	r0, r3
    e036:	3710      	adds	r7, #16
    e038:	46bd      	mov	sp, r7
    e03a:	bd80      	pop	{r7, pc}

0000e03c <bool_binary_op>:

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e03c:	b580      	push	{r7, lr}
    e03e:	b086      	sub	sp, #24
    e040:	af00      	add	r7, sp, #0
    e042:	60f8      	str	r0, [r7, #12]
    e044:	60b9      	str	r1, [r7, #8]
    e046:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    e048:	68bb      	ldr	r3, [r7, #8]
    e04a:	617b      	str	r3, [r7, #20]
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    e04c:	697b      	ldr	r3, [r7, #20]
    e04e:	791b      	ldrb	r3, [r3, #4]
    e050:	005b      	lsls	r3, r3, #1
    e052:	f043 0301 	orr.w	r3, r3, #1
    e056:	687a      	ldr	r2, [r7, #4]
    e058:	4619      	mov	r1, r3
    e05a:	68f8      	ldr	r0, [r7, #12]
    e05c:	f7fd fbd6 	bl	b80c <mp_binary_op>
    e060:	4603      	mov	r3, r0
}
    e062:	4618      	mov	r0, r3
    e064:	3718      	adds	r7, #24
    e066:	46bd      	mov	sp, r7
    e068:	bd80      	pop	{r7, pc}
    e06a:	bf00      	nop

0000e06c <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e06c:	b580      	push	{r7, lr}
    e06e:	b088      	sub	sp, #32
    e070:	af00      	add	r7, sp, #0
    e072:	60f8      	str	r0, [r7, #12]
    e074:	60b9      	str	r1, [r7, #8]
    e076:	607a      	str	r2, [r7, #4]
    e078:	603b      	str	r3, [r7, #0]
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    e07a:	683b      	ldr	r3, [r7, #0]
    e07c:	005a      	lsls	r2, r3, #1
    e07e:	687b      	ldr	r3, [r7, #4]
    e080:	4413      	add	r3, r2
    e082:	617b      	str	r3, [r7, #20]
    mp_obj_t *args2 = NULL;
    e084:	2300      	movs	r3, #0
    e086:	61fb      	str	r3, [r7, #28]
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    e088:	2300      	movs	r3, #0
    e08a:	61bb      	str	r3, [r7, #24]
    if (n_total > 4) {
    e08c:	697b      	ldr	r3, [r7, #20]
    e08e:	2b04      	cmp	r3, #4
    e090:	d908      	bls.n	e0a4 <mp_call_method_self_n_kw+0x38>
        // try to use heap to allocate temporary args array
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    e092:	697b      	ldr	r3, [r7, #20]
    e094:	3301      	adds	r3, #1
    e096:	009b      	lsls	r3, r3, #2
    e098:	4618      	mov	r0, r3
    e09a:	f7f2 f956 	bl	34a <m_malloc_maybe>
    e09e:	61f8      	str	r0, [r7, #28]
        free_args2 = args2;
    e0a0:	69fb      	ldr	r3, [r7, #28]
    e0a2:	61bb      	str	r3, [r7, #24]
    }
    if (args2 == NULL) {
    e0a4:	69fb      	ldr	r3, [r7, #28]
    e0a6:	2b00      	cmp	r3, #0
    e0a8:	d10d      	bne.n	e0c6 <mp_call_method_self_n_kw+0x5a>
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    e0aa:	697b      	ldr	r3, [r7, #20]
    e0ac:	3301      	adds	r3, #1
    e0ae:	009b      	lsls	r3, r3, #2
    e0b0:	3307      	adds	r3, #7
    e0b2:	3307      	adds	r3, #7
    e0b4:	08db      	lsrs	r3, r3, #3
    e0b6:	00db      	lsls	r3, r3, #3
    e0b8:	ebad 0d03 	sub.w	sp, sp, r3
    e0bc:	466b      	mov	r3, sp
    e0be:	3307      	adds	r3, #7
    e0c0:	08db      	lsrs	r3, r3, #3
    e0c2:	00db      	lsls	r3, r3, #3
    e0c4:	61fb      	str	r3, [r7, #28]
    }
    #endif
    args2[0] = self;
    e0c6:	69fb      	ldr	r3, [r7, #28]
    e0c8:	68ba      	ldr	r2, [r7, #8]
    e0ca:	601a      	str	r2, [r3, #0]
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    e0cc:	69fb      	ldr	r3, [r7, #28]
    e0ce:	1d18      	adds	r0, r3, #4
    e0d0:	697b      	ldr	r3, [r7, #20]
    e0d2:	009b      	lsls	r3, r3, #2
    e0d4:	461a      	mov	r2, r3
    e0d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e0d8:	f00e fa42 	bl	1c560 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    e0dc:	687b      	ldr	r3, [r7, #4]
    e0de:	1c59      	adds	r1, r3, #1
    e0e0:	69fb      	ldr	r3, [r7, #28]
    e0e2:	683a      	ldr	r2, [r7, #0]
    e0e4:	68f8      	ldr	r0, [r7, #12]
    e0e6:	f7fd fe28 	bl	bd3a <mp_call_function_n_kw>
    e0ea:	6138      	str	r0, [r7, #16]
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    e0ec:	69bb      	ldr	r3, [r7, #24]
    e0ee:	2b00      	cmp	r3, #0
    e0f0:	d002      	beq.n	e0f8 <mp_call_method_self_n_kw+0x8c>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    e0f2:	69b8      	ldr	r0, [r7, #24]
    e0f4:	f7f2 f970 	bl	3d8 <m_free>
    }
    #endif
    return res;
    e0f8:	693b      	ldr	r3, [r7, #16]
}
    e0fa:	4618      	mov	r0, r3
    e0fc:	3720      	adds	r7, #32
    e0fe:	46bd      	mov	sp, r7
    e100:	bd80      	pop	{r7, pc}

0000e102 <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e102:	b580      	push	{r7, lr}
    e104:	b088      	sub	sp, #32
    e106:	af02      	add	r7, sp, #8
    e108:	60f8      	str	r0, [r7, #12]
    e10a:	60b9      	str	r1, [r7, #8]
    e10c:	607a      	str	r2, [r7, #4]
    e10e:	603b      	str	r3, [r7, #0]
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    e110:	68fb      	ldr	r3, [r7, #12]
    e112:	617b      	str	r3, [r7, #20]
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    e114:	697b      	ldr	r3, [r7, #20]
    e116:	6858      	ldr	r0, [r3, #4]
    e118:	697b      	ldr	r3, [r7, #20]
    e11a:	6899      	ldr	r1, [r3, #8]
    e11c:	683b      	ldr	r3, [r7, #0]
    e11e:	9300      	str	r3, [sp, #0]
    e120:	687b      	ldr	r3, [r7, #4]
    e122:	68ba      	ldr	r2, [r7, #8]
    e124:	f7ff ffa2 	bl	e06c <mp_call_method_self_n_kw>
    e128:	4603      	mov	r3, r0
}
    e12a:	4618      	mov	r0, r3
    e12c:	3718      	adds	r7, #24
    e12e:	46bd      	mov	sp, r7
    e130:	bd80      	pop	{r7, pc}

0000e132 <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    e132:	b580      	push	{r7, lr}
    e134:	b084      	sub	sp, #16
    e136:	af00      	add	r7, sp, #0
    e138:	6078      	str	r0, [r7, #4]
    e13a:	6039      	str	r1, [r7, #0]
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    e13c:	200c      	movs	r0, #12
    e13e:	f7f2 f8ed 	bl	31c <m_malloc>
    e142:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_bound_meth;
    e144:	68fb      	ldr	r3, [r7, #12]
    e146:	4a06      	ldr	r2, [pc, #24]	; (e160 <mp_obj_new_bound_meth+0x2e>)
    e148:	601a      	str	r2, [r3, #0]
    o->meth = meth;
    e14a:	68fb      	ldr	r3, [r7, #12]
    e14c:	687a      	ldr	r2, [r7, #4]
    e14e:	605a      	str	r2, [r3, #4]
    o->self = self;
    e150:	68fb      	ldr	r3, [r7, #12]
    e152:	683a      	ldr	r2, [r7, #0]
    e154:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    e156:	68fb      	ldr	r3, [r7, #12]
}
    e158:	4618      	mov	r0, r3
    e15a:	3710      	adds	r7, #16
    e15c:	46bd      	mov	sp, r7
    e15e:	bd80      	pop	{r7, pc}
    e160:	00021318 	.word	0x00021318

0000e164 <mp_obj_cell_get>:
typedef struct _mp_obj_cell_t {
    mp_obj_base_t base;
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    e164:	b480      	push	{r7}
    e166:	b085      	sub	sp, #20
    e168:	af00      	add	r7, sp, #0
    e16a:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e16c:	687b      	ldr	r3, [r7, #4]
    e16e:	60fb      	str	r3, [r7, #12]
    return self->obj;
    e170:	68fb      	ldr	r3, [r7, #12]
    e172:	685b      	ldr	r3, [r3, #4]
}
    e174:	4618      	mov	r0, r3
    e176:	3714      	adds	r7, #20
    e178:	46bd      	mov	sp, r7
    e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e17e:	4770      	bx	lr

0000e180 <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    e180:	b480      	push	{r7}
    e182:	b085      	sub	sp, #20
    e184:	af00      	add	r7, sp, #0
    e186:	6078      	str	r0, [r7, #4]
    e188:	6039      	str	r1, [r7, #0]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e18a:	687b      	ldr	r3, [r7, #4]
    e18c:	60fb      	str	r3, [r7, #12]
    self->obj = obj;
    e18e:	68fb      	ldr	r3, [r7, #12]
    e190:	683a      	ldr	r2, [r7, #0]
    e192:	605a      	str	r2, [r3, #4]
}
    e194:	bf00      	nop
    e196:	3714      	adds	r7, #20
    e198:	46bd      	mov	sp, r7
    e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e19e:	4770      	bx	lr

0000e1a0 <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    e1a0:	b580      	push	{r7, lr}
    e1a2:	b084      	sub	sp, #16
    e1a4:	af00      	add	r7, sp, #0
    e1a6:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    e1a8:	2008      	movs	r0, #8
    e1aa:	f7f2 f8b7 	bl	31c <m_malloc>
    e1ae:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_cell;
    e1b0:	68fb      	ldr	r3, [r7, #12]
    e1b2:	4a05      	ldr	r2, [pc, #20]	; (e1c8 <mp_obj_new_cell+0x28>)
    e1b4:	601a      	str	r2, [r3, #0]
    o->obj = obj;
    e1b6:	68fb      	ldr	r3, [r7, #12]
    e1b8:	687a      	ldr	r2, [r7, #4]
    e1ba:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    e1bc:	68fb      	ldr	r3, [r7, #12]
}
    e1be:	4618      	mov	r0, r3
    e1c0:	3710      	adds	r7, #16
    e1c2:	46bd      	mov	sp, r7
    e1c4:	bd80      	pop	{r7, pc}
    e1c6:	bf00      	nop
    e1c8:	00021354 	.word	0x00021354

0000e1cc <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e1cc:	b580      	push	{r7, lr}
    e1ce:	b08e      	sub	sp, #56	; 0x38
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	60f8      	str	r0, [r7, #12]
    e1d4:	60b9      	str	r1, [r7, #8]
    e1d6:	607a      	str	r2, [r7, #4]
    e1d8:	603b      	str	r3, [r7, #0]
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);
    e1da:	68fb      	ldr	r3, [r7, #12]
    e1dc:	637b      	str	r3, [r7, #52]	; 0x34

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    e1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e1e0:	689a      	ldr	r2, [r3, #8]
    e1e2:	68bb      	ldr	r3, [r7, #8]
    e1e4:	441a      	add	r2, r3
    e1e6:	687b      	ldr	r3, [r7, #4]
    e1e8:	005b      	lsls	r3, r3, #1
    e1ea:	4413      	add	r3, r2
    e1ec:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_total <= 5) {
    e1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e1f0:	2b05      	cmp	r3, #5
    e1f2:	d826      	bhi.n	e242 <closure_call+0x76>
        // use stack to allocate temporary args array
        mp_obj_t args2[5];
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e1f6:	f103 010c 	add.w	r1, r3, #12
    e1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e1fc:	689b      	ldr	r3, [r3, #8]
    e1fe:	009a      	lsls	r2, r3, #2
    e200:	f107 0314 	add.w	r3, r7, #20
    e204:	4618      	mov	r0, r3
    e206:	f00e f9ab 	bl	1c560 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e20c:	689b      	ldr	r3, [r3, #8]
    e20e:	009b      	lsls	r3, r3, #2
    e210:	f107 0214 	add.w	r2, r7, #20
    e214:	18d0      	adds	r0, r2, r3
    e216:	687b      	ldr	r3, [r7, #4]
    e218:	005a      	lsls	r2, r3, #1
    e21a:	68bb      	ldr	r3, [r7, #8]
    e21c:	4413      	add	r3, r2
    e21e:	009b      	lsls	r3, r3, #2
    e220:	461a      	mov	r2, r3
    e222:	6839      	ldr	r1, [r7, #0]
    e224:	f00e f99c 	bl	1c560 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e22a:	6858      	ldr	r0, [r3, #4]
    e22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e22e:	689a      	ldr	r2, [r3, #8]
    e230:	68bb      	ldr	r3, [r7, #8]
    e232:	18d1      	adds	r1, r2, r3
    e234:	f107 0314 	add.w	r3, r7, #20
    e238:	687a      	ldr	r2, [r7, #4]
    e23a:	f7fd fd7e 	bl	bd3a <mp_call_function_n_kw>
    e23e:	4603      	mov	r3, r0
    e240:	e02c      	b.n	e29c <closure_call+0xd0>
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    e242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e244:	009b      	lsls	r3, r3, #2
    e246:	4618      	mov	r0, r3
    e248:	f7f2 f868 	bl	31c <m_malloc>
    e24c:	62f8      	str	r0, [r7, #44]	; 0x2c
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e250:	f103 010c 	add.w	r1, r3, #12
    e254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e256:	689b      	ldr	r3, [r3, #8]
    e258:	009b      	lsls	r3, r3, #2
    e25a:	461a      	mov	r2, r3
    e25c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e25e:	f00e f97f 	bl	1c560 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e264:	689b      	ldr	r3, [r3, #8]
    e266:	009b      	lsls	r3, r3, #2
    e268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e26a:	18d0      	adds	r0, r2, r3
    e26c:	687b      	ldr	r3, [r7, #4]
    e26e:	005a      	lsls	r2, r3, #1
    e270:	68bb      	ldr	r3, [r7, #8]
    e272:	4413      	add	r3, r2
    e274:	009b      	lsls	r3, r3, #2
    e276:	461a      	mov	r2, r3
    e278:	6839      	ldr	r1, [r7, #0]
    e27a:	f00e f971 	bl	1c560 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e280:	6858      	ldr	r0, [r3, #4]
    e282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e284:	689a      	ldr	r2, [r3, #8]
    e286:	68bb      	ldr	r3, [r7, #8]
    e288:	18d1      	adds	r1, r2, r3
    e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e28c:	687a      	ldr	r2, [r7, #4]
    e28e:	f7fd fd54 	bl	bd3a <mp_call_function_n_kw>
    e292:	62b8      	str	r0, [r7, #40]	; 0x28
        m_del(mp_obj_t, args2, n_total);
    e294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e296:	f7f2 f89f 	bl	3d8 <m_free>
        return res;
    e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
}
    e29c:	4618      	mov	r0, r3
    e29e:	3738      	adds	r7, #56	; 0x38
    e2a0:	46bd      	mov	sp, r7
    e2a2:	bd80      	pop	{r7, pc}

0000e2a4 <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    e2a4:	b580      	push	{r7, lr}
    e2a6:	b086      	sub	sp, #24
    e2a8:	af00      	add	r7, sp, #0
    e2aa:	60f8      	str	r0, [r7, #12]
    e2ac:	60b9      	str	r1, [r7, #8]
    e2ae:	607a      	str	r2, [r7, #4]
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    e2b0:	68bb      	ldr	r3, [r7, #8]
    e2b2:	3303      	adds	r3, #3
    e2b4:	009b      	lsls	r3, r3, #2
    e2b6:	4618      	mov	r0, r3
    e2b8:	f7f2 f830 	bl	31c <m_malloc>
    e2bc:	6178      	str	r0, [r7, #20]
    o->base.type = &closure_type;
    e2be:	697b      	ldr	r3, [r7, #20]
    e2c0:	4a0a      	ldr	r2, [pc, #40]	; (e2ec <mp_obj_new_closure+0x48>)
    e2c2:	601a      	str	r2, [r3, #0]
    o->fun = fun;
    e2c4:	697b      	ldr	r3, [r7, #20]
    e2c6:	68fa      	ldr	r2, [r7, #12]
    e2c8:	605a      	str	r2, [r3, #4]
    o->n_closed = n_closed_over;
    e2ca:	697b      	ldr	r3, [r7, #20]
    e2cc:	68ba      	ldr	r2, [r7, #8]
    e2ce:	609a      	str	r2, [r3, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    e2d0:	697b      	ldr	r3, [r7, #20]
    e2d2:	f103 000c 	add.w	r0, r3, #12
    e2d6:	68bb      	ldr	r3, [r7, #8]
    e2d8:	009b      	lsls	r3, r3, #2
    e2da:	461a      	mov	r2, r3
    e2dc:	6879      	ldr	r1, [r7, #4]
    e2de:	f00e f93f 	bl	1c560 <memcpy>
    return MP_OBJ_FROM_PTR(o);
    e2e2:	697b      	ldr	r3, [r7, #20]
}
    e2e4:	4618      	mov	r0, r3
    e2e6:	3718      	adds	r7, #24
    e2e8:	46bd      	mov	sp, r7
    e2ea:	bd80      	pop	{r7, pc}
    e2ec:	00021390 	.word	0x00021390

0000e2f0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    e2f0:	b480      	push	{r7}
    e2f2:	b083      	sub	sp, #12
    e2f4:	af00      	add	r7, sp, #0
    e2f6:	6078      	str	r0, [r7, #4]
    e2f8:	687b      	ldr	r3, [r7, #4]
    e2fa:	f003 0303 	and.w	r3, r3, #3
    e2fe:	2b00      	cmp	r3, #0
    e300:	bf0c      	ite	eq
    e302:	2301      	moveq	r3, #1
    e304:	2300      	movne	r3, #0
    e306:	b2db      	uxtb	r3, r3
    e308:	4618      	mov	r0, r3
    e30a:	370c      	adds	r7, #12
    e30c:	46bd      	mov	sp, r7
    e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e312:	4770      	bx	lr

0000e314 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    e314:	b480      	push	{r7}
    e316:	b083      	sub	sp, #12
    e318:	af00      	add	r7, sp, #0
    e31a:	6078      	str	r0, [r7, #4]
    e31c:	6039      	str	r1, [r7, #0]
    e31e:	687b      	ldr	r3, [r7, #4]
    e320:	689a      	ldr	r2, [r3, #8]
    e322:	683b      	ldr	r3, [r7, #0]
    e324:	00db      	lsls	r3, r3, #3
    e326:	4413      	add	r3, r2
    e328:	681b      	ldr	r3, [r3, #0]
    e32a:	2b00      	cmp	r3, #0
    e32c:	d009      	beq.n	e342 <MP_MAP_SLOT_IS_FILLED+0x2e>
    e32e:	687b      	ldr	r3, [r7, #4]
    e330:	689a      	ldr	r2, [r3, #8]
    e332:	683b      	ldr	r3, [r7, #0]
    e334:	00db      	lsls	r3, r3, #3
    e336:	4413      	add	r3, r2
    e338:	681b      	ldr	r3, [r3, #0]
    e33a:	2b08      	cmp	r3, #8
    e33c:	d001      	beq.n	e342 <MP_MAP_SLOT_IS_FILLED+0x2e>
    e33e:	2301      	movs	r3, #1
    e340:	e000      	b.n	e344 <MP_MAP_SLOT_IS_FILLED+0x30>
    e342:	2300      	movs	r3, #0
    e344:	f003 0301 	and.w	r3, r3, #1
    e348:	b2db      	uxtb	r3, r3
    e34a:	4618      	mov	r0, r3
    e34c:	370c      	adds	r7, #12
    e34e:	46bd      	mov	sp, r7
    e350:	f85d 7b04 	ldr.w	r7, [sp], #4
    e354:	4770      	bx	lr

0000e356 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e356:	b480      	push	{r7}
    e358:	b083      	sub	sp, #12
    e35a:	af00      	add	r7, sp, #0
    e35c:	6078      	str	r0, [r7, #4]
    e35e:	687b      	ldr	r3, [r7, #4]
    e360:	2b00      	cmp	r3, #0
    e362:	d001      	beq.n	e368 <mp_obj_new_bool+0x12>
    e364:	4b04      	ldr	r3, [pc, #16]	; (e378 <mp_obj_new_bool+0x22>)
    e366:	e000      	b.n	e36a <mp_obj_new_bool+0x14>
    e368:	4b04      	ldr	r3, [pc, #16]	; (e37c <mp_obj_new_bool+0x26>)
    e36a:	4618      	mov	r0, r3
    e36c:	370c      	adds	r7, #12
    e36e:	46bd      	mov	sp, r7
    e370:	f85d 7b04 	ldr.w	r7, [sp], #4
    e374:	4770      	bx	lr
    e376:	bf00      	nop
    e378:	00021310 	.word	0x00021310
    e37c:	00021308 	.word	0x00021308

0000e380 <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    e380:	b580      	push	{r7, lr}
    e382:	b086      	sub	sp, #24
    e384:	af00      	add	r7, sp, #0
    e386:	6078      	str	r0, [r7, #4]
    e388:	6039      	str	r1, [r7, #0]
    size_t max = dict->map.alloc;
    e38a:	687b      	ldr	r3, [r7, #4]
    e38c:	689b      	ldr	r3, [r3, #8]
    e38e:	613b      	str	r3, [r7, #16]
    mp_map_t *map = &dict->map;
    e390:	687b      	ldr	r3, [r7, #4]
    e392:	3304      	adds	r3, #4
    e394:	60fb      	str	r3, [r7, #12]

    for (size_t i = *cur; i < max; i++) {
    e396:	683b      	ldr	r3, [r7, #0]
    e398:	681b      	ldr	r3, [r3, #0]
    e39a:	617b      	str	r3, [r7, #20]
    e39c:	e013      	b.n	e3c6 <dict_iter_next+0x46>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    e39e:	6979      	ldr	r1, [r7, #20]
    e3a0:	68f8      	ldr	r0, [r7, #12]
    e3a2:	f7ff ffb7 	bl	e314 <MP_MAP_SLOT_IS_FILLED>
    e3a6:	4603      	mov	r3, r0
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	d009      	beq.n	e3c0 <dict_iter_next+0x40>
            *cur = i + 1;
    e3ac:	697b      	ldr	r3, [r7, #20]
    e3ae:	1c5a      	adds	r2, r3, #1
    e3b0:	683b      	ldr	r3, [r7, #0]
    e3b2:	601a      	str	r2, [r3, #0]
            return &(map->table[i]);
    e3b4:	68fb      	ldr	r3, [r7, #12]
    e3b6:	689a      	ldr	r2, [r3, #8]
    e3b8:	697b      	ldr	r3, [r7, #20]
    e3ba:	00db      	lsls	r3, r3, #3
    e3bc:	4413      	add	r3, r2
    e3be:	e007      	b.n	e3d0 <dict_iter_next+0x50>
    for (size_t i = *cur; i < max; i++) {
    e3c0:	697b      	ldr	r3, [r7, #20]
    e3c2:	3301      	adds	r3, #1
    e3c4:	617b      	str	r3, [r7, #20]
    e3c6:	697a      	ldr	r2, [r7, #20]
    e3c8:	693b      	ldr	r3, [r7, #16]
    e3ca:	429a      	cmp	r2, r3
    e3cc:	d3e7      	bcc.n	e39e <dict_iter_next+0x1e>
        }
    }

    return NULL;
    e3ce:	2300      	movs	r3, #0
}
    e3d0:	4618      	mov	r0, r3
    e3d2:	3718      	adds	r7, #24
    e3d4:	46bd      	mov	sp, r7
    e3d6:	bd80      	pop	{r7, pc}

0000e3d8 <dict_print>:

STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e3d8:	b580      	push	{r7, lr}
    e3da:	b088      	sub	sp, #32
    e3dc:	af00      	add	r7, sp, #0
    e3de:	60f8      	str	r0, [r7, #12]
    e3e0:	60b9      	str	r1, [r7, #8]
    e3e2:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e3e4:	68bb      	ldr	r3, [r7, #8]
    e3e6:	61bb      	str	r3, [r7, #24]
    bool first = true;
    e3e8:	2301      	movs	r3, #1
    e3ea:	77fb      	strb	r3, [r7, #31]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
    e3ec:	2301      	movs	r3, #1
    e3ee:	607b      	str	r3, [r7, #4]
    }
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_printf(print, "%q(", self->base.type->name);
    }
    mp_print_str(print, "{");
    e3f0:	491c      	ldr	r1, [pc, #112]	; (e464 <dict_print+0x8c>)
    e3f2:	68f8      	ldr	r0, [r7, #12]
    e3f4:	f7f3 fa3a 	bl	186c <mp_print_str>
    size_t cur = 0;
    e3f8:	2300      	movs	r3, #0
    e3fa:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = NULL;
    e3fc:	2300      	movs	r3, #0
    e3fe:	617b      	str	r3, [r7, #20]
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e400:	e01d      	b.n	e43e <dict_print+0x66>
        if (!first) {
    e402:	7ffb      	ldrb	r3, [r7, #31]
    e404:	f083 0301 	eor.w	r3, r3, #1
    e408:	b2db      	uxtb	r3, r3
    e40a:	2b00      	cmp	r3, #0
    e40c:	d003      	beq.n	e416 <dict_print+0x3e>
            mp_print_str(print, ", ");
    e40e:	4916      	ldr	r1, [pc, #88]	; (e468 <dict_print+0x90>)
    e410:	68f8      	ldr	r0, [r7, #12]
    e412:	f7f3 fa2b 	bl	186c <mp_print_str>
        }
        first = false;
    e416:	2300      	movs	r3, #0
    e418:	77fb      	strb	r3, [r7, #31]
        mp_obj_print_helper(print, next->key, kind);
    e41a:	697b      	ldr	r3, [r7, #20]
    e41c:	681b      	ldr	r3, [r3, #0]
    e41e:	687a      	ldr	r2, [r7, #4]
    e420:	4619      	mov	r1, r3
    e422:	68f8      	ldr	r0, [r7, #12]
    e424:	f7ff f991 	bl	d74a <mp_obj_print_helper>
        mp_print_str(print, ": ");
    e428:	4910      	ldr	r1, [pc, #64]	; (e46c <dict_print+0x94>)
    e42a:	68f8      	ldr	r0, [r7, #12]
    e42c:	f7f3 fa1e 	bl	186c <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    e430:	697b      	ldr	r3, [r7, #20]
    e432:	685b      	ldr	r3, [r3, #4]
    e434:	687a      	ldr	r2, [r7, #4]
    e436:	4619      	mov	r1, r3
    e438:	68f8      	ldr	r0, [r7, #12]
    e43a:	f7ff f986 	bl	d74a <mp_obj_print_helper>
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e43e:	f107 0310 	add.w	r3, r7, #16
    e442:	4619      	mov	r1, r3
    e444:	69b8      	ldr	r0, [r7, #24]
    e446:	f7ff ff9b 	bl	e380 <dict_iter_next>
    e44a:	6178      	str	r0, [r7, #20]
    e44c:	697b      	ldr	r3, [r7, #20]
    e44e:	2b00      	cmp	r3, #0
    e450:	d1d7      	bne.n	e402 <dict_print+0x2a>
    }
    mp_print_str(print, "}");
    e452:	4907      	ldr	r1, [pc, #28]	; (e470 <dict_print+0x98>)
    e454:	68f8      	ldr	r0, [r7, #12]
    e456:	f7f3 fa09 	bl	186c <mp_print_str>
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_print_str(print, ")");
    }
}
    e45a:	bf00      	nop
    e45c:	3720      	adds	r7, #32
    e45e:	46bd      	mov	sp, r7
    e460:	bd80      	pop	{r7, pc}
    e462:	bf00      	nop
    e464:	000213cc 	.word	0x000213cc
    e468:	000213d0 	.word	0x000213d0
    e46c:	000213d4 	.word	0x000213d4
    e470:	000213d8 	.word	0x000213d8

0000e474 <dict_make_new>:

STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e474:	b580      	push	{r7, lr}
    e476:	b08c      	sub	sp, #48	; 0x30
    e478:	af00      	add	r7, sp, #0
    e47a:	60f8      	str	r0, [r7, #12]
    e47c:	60b9      	str	r1, [r7, #8]
    e47e:	607a      	str	r2, [r7, #4]
    e480:	603b      	str	r3, [r7, #0]
    mp_obj_t dict_out = mp_obj_new_dict(0);
    e482:	2000      	movs	r0, #0
    e484:	f000 fd94 	bl	efb0 <mp_obj_new_dict>
    e488:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_dict_t *dict = MP_OBJ_TO_PTR(dict_out);
    e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e48c:	62bb      	str	r3, [r7, #40]	; 0x28
    dict->base.type = type;
    e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e490:	68fa      	ldr	r2, [r7, #12]
    e492:	601a      	str	r2, [r3, #0]
    #if MICROPY_PY_COLLECTIONS_ORDEREDDICT
    if (type == &mp_type_ordereddict) {
        dict->map.is_ordered = 1;
    }
    #endif
    if (n_args > 0 || n_kw > 0) {
    e494:	68bb      	ldr	r3, [r7, #8]
    e496:	2b00      	cmp	r3, #0
    e498:	d102      	bne.n	e4a0 <dict_make_new+0x2c>
    e49a:	687b      	ldr	r3, [r7, #4]
    e49c:	2b00      	cmp	r3, #0
    e49e:	d017      	beq.n	e4d0 <dict_make_new+0x5c>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4a2:	623b      	str	r3, [r7, #32]
    e4a4:	683b      	ldr	r3, [r7, #0]
    e4a6:	681b      	ldr	r3, [r3, #0]
    e4a8:	627b      	str	r3, [r7, #36]	; 0x24
        mp_map_t kwargs;
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    e4aa:	68bb      	ldr	r3, [r7, #8]
    e4ac:	009b      	lsls	r3, r3, #2
    e4ae:	683a      	ldr	r2, [r7, #0]
    e4b0:	441a      	add	r2, r3
    e4b2:	f107 0314 	add.w	r3, r7, #20
    e4b6:	6879      	ldr	r1, [r7, #4]
    e4b8:	4618      	mov	r0, r3
    e4ba:	f7fe fea6 	bl	d20a <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    e4be:	68bb      	ldr	r3, [r7, #8]
    e4c0:	3301      	adds	r3, #1
    e4c2:	f107 0214 	add.w	r2, r7, #20
    e4c6:	f107 0120 	add.w	r1, r7, #32
    e4ca:	4618      	mov	r0, r3
    e4cc:	f000 fadc 	bl	ea88 <dict_update>
    }
    return dict_out;
    e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e4d2:	4618      	mov	r0, r3
    e4d4:	3730      	adds	r7, #48	; 0x30
    e4d6:	46bd      	mov	sp, r7
    e4d8:	bd80      	pop	{r7, pc}

0000e4da <dict_unary_op>:

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    e4da:	b580      	push	{r7, lr}
    e4dc:	b084      	sub	sp, #16
    e4de:	af00      	add	r7, sp, #0
    e4e0:	6078      	str	r0, [r7, #4]
    e4e2:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e4e4:	683b      	ldr	r3, [r7, #0]
    e4e6:	60fb      	str	r3, [r7, #12]
    switch (op) {
    e4e8:	687b      	ldr	r3, [r7, #4]
    e4ea:	2b04      	cmp	r3, #4
    e4ec:	d002      	beq.n	e4f4 <dict_unary_op+0x1a>
    e4ee:	2b05      	cmp	r3, #5
    e4f0:	d00e      	beq.n	e510 <dict_unary_op+0x36>
    e4f2:	e015      	b.n	e520 <dict_unary_op+0x46>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    e4f4:	68fb      	ldr	r3, [r7, #12]
    e4f6:	685b      	ldr	r3, [r3, #4]
    e4f8:	f023 0307 	bic.w	r3, r3, #7
    e4fc:	2b00      	cmp	r3, #0
    e4fe:	bf14      	ite	ne
    e500:	2301      	movne	r3, #1
    e502:	2300      	moveq	r3, #0
    e504:	b2db      	uxtb	r3, r3
    e506:	4618      	mov	r0, r3
    e508:	f7ff ff25 	bl	e356 <mp_obj_new_bool>
    e50c:	4603      	mov	r3, r0
    e50e:	e008      	b.n	e522 <dict_unary_op+0x48>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    e510:	68fb      	ldr	r3, [r7, #12]
    e512:	685b      	ldr	r3, [r3, #4]
    e514:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e518:	005b      	lsls	r3, r3, #1
    e51a:	f043 0301 	orr.w	r3, r3, #1
    e51e:	e000      	b.n	e522 <dict_unary_op+0x48>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    e520:	2300      	movs	r3, #0
    }
}
    e522:	4618      	mov	r0, r3
    e524:	3710      	adds	r7, #16
    e526:	46bd      	mov	sp, r7
    e528:	bd80      	pop	{r7, pc}

0000e52a <dict_binary_op>:

STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e52a:	b580      	push	{r7, lr}
    e52c:	b08a      	sub	sp, #40	; 0x28
    e52e:	af00      	add	r7, sp, #0
    e530:	60f8      	str	r0, [r7, #12]
    e532:	60b9      	str	r1, [r7, #8]
    e534:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *o = MP_OBJ_TO_PTR(lhs_in);
    e536:	68bb      	ldr	r3, [r7, #8]
    e538:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
    e53a:	68fb      	ldr	r3, [r7, #12]
    e53c:	2b02      	cmp	r3, #2
    e53e:	d014      	beq.n	e56a <dict_binary_op+0x40>
    e540:	2b22      	cmp	r3, #34	; 0x22
    e542:	d15a      	bne.n	e5fa <dict_binary_op+0xd0>
        case MP_BINARY_OP_CONTAINS: {
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e546:	3304      	adds	r3, #4
    e548:	2200      	movs	r2, #0
    e54a:	6879      	ldr	r1, [r7, #4]
    e54c:	4618      	mov	r0, r3
    e54e:	f7fe ff21 	bl	d394 <mp_map_lookup>
    e552:	6238      	str	r0, [r7, #32]
            return mp_obj_new_bool(elem != NULL);
    e554:	6a3b      	ldr	r3, [r7, #32]
    e556:	2b00      	cmp	r3, #0
    e558:	bf14      	ite	ne
    e55a:	2301      	movne	r3, #1
    e55c:	2300      	moveq	r3, #0
    e55e:	b2db      	uxtb	r3, r3
    e560:	4618      	mov	r0, r3
    e562:	f7ff fef8 	bl	e356 <mp_obj_new_bool>
    e566:	4603      	mov	r3, r0
    e568:	e048      	b.n	e5fc <dict_binary_op+0xd2>
                    }
                }
                return e1 == NULL && e2 == NULL ? mp_const_true : mp_const_false;
            } else
            #endif
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    e56a:	6878      	ldr	r0, [r7, #4]
    e56c:	f7ff fec0 	bl	e2f0 <MP_OBJ_IS_OBJ>
    e570:	4603      	mov	r3, r0
    e572:	2b00      	cmp	r3, #0
    e574:	d03f      	beq.n	e5f6 <dict_binary_op+0xcc>
    e576:	687b      	ldr	r3, [r7, #4]
    e578:	681b      	ldr	r3, [r3, #0]
    e57a:	4a22      	ldr	r2, [pc, #136]	; (e604 <dict_binary_op+0xda>)
    e57c:	4293      	cmp	r3, r2
    e57e:	d13a      	bne.n	e5f6 <dict_binary_op+0xcc>
                mp_obj_dict_t *rhs = MP_OBJ_TO_PTR(rhs_in);
    e580:	687b      	ldr	r3, [r7, #4]
    e582:	61fb      	str	r3, [r7, #28]
                if (o->map.used != rhs->map.used) {
    e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e586:	685b      	ldr	r3, [r3, #4]
    e588:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    e58c:	69fb      	ldr	r3, [r7, #28]
    e58e:	685b      	ldr	r3, [r3, #4]
    e590:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e594:	429a      	cmp	r2, r3
    e596:	d001      	beq.n	e59c <dict_binary_op+0x72>
                    return mp_const_false;
    e598:	4b1b      	ldr	r3, [pc, #108]	; (e608 <dict_binary_op+0xde>)
    e59a:	e02f      	b.n	e5fc <dict_binary_op+0xd2>
                }

                size_t cur = 0;
    e59c:	2300      	movs	r3, #0
    e59e:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *next = NULL;
    e5a0:	2300      	movs	r3, #0
    e5a2:	61bb      	str	r3, [r7, #24]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e5a4:	e01b      	b.n	e5de <dict_binary_op+0xb4>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    e5a6:	69fb      	ldr	r3, [r7, #28]
    e5a8:	1d18      	adds	r0, r3, #4
    e5aa:	69bb      	ldr	r3, [r7, #24]
    e5ac:	681b      	ldr	r3, [r3, #0]
    e5ae:	2200      	movs	r2, #0
    e5b0:	4619      	mov	r1, r3
    e5b2:	f7fe feef 	bl	d394 <mp_map_lookup>
    e5b6:	6178      	str	r0, [r7, #20]
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    e5b8:	697b      	ldr	r3, [r7, #20]
    e5ba:	2b00      	cmp	r3, #0
    e5bc:	d00d      	beq.n	e5da <dict_binary_op+0xb0>
    e5be:	69bb      	ldr	r3, [r7, #24]
    e5c0:	685a      	ldr	r2, [r3, #4]
    e5c2:	697b      	ldr	r3, [r7, #20]
    e5c4:	685b      	ldr	r3, [r3, #4]
    e5c6:	4619      	mov	r1, r3
    e5c8:	4610      	mov	r0, r2
    e5ca:	f7ff f9df 	bl	d98c <mp_obj_equal>
    e5ce:	4603      	mov	r3, r0
    e5d0:	f083 0301 	eor.w	r3, r3, #1
    e5d4:	b2db      	uxtb	r3, r3
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	d001      	beq.n	e5de <dict_binary_op+0xb4>
                        return mp_const_false;
    e5da:	4b0b      	ldr	r3, [pc, #44]	; (e608 <dict_binary_op+0xde>)
    e5dc:	e00e      	b.n	e5fc <dict_binary_op+0xd2>
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e5de:	f107 0310 	add.w	r3, r7, #16
    e5e2:	4619      	mov	r1, r3
    e5e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5e6:	f7ff fecb 	bl	e380 <dict_iter_next>
    e5ea:	61b8      	str	r0, [r7, #24]
    e5ec:	69bb      	ldr	r3, [r7, #24]
    e5ee:	2b00      	cmp	r3, #0
    e5f0:	d1d9      	bne.n	e5a6 <dict_binary_op+0x7c>
                    }
                }
                return mp_const_true;
    e5f2:	4b06      	ldr	r3, [pc, #24]	; (e60c <dict_binary_op+0xe2>)
    e5f4:	e002      	b.n	e5fc <dict_binary_op+0xd2>
            } else {
                // dict is not equal to instance of any other type
                return mp_const_false;
    e5f6:	4b04      	ldr	r3, [pc, #16]	; (e608 <dict_binary_op+0xde>)
    e5f8:	e000      	b.n	e5fc <dict_binary_op+0xd2>
            }
        }
        default:
            // op not supported
            return MP_OBJ_NULL;
    e5fa:	2300      	movs	r3, #0
    }
}
    e5fc:	4618      	mov	r0, r3
    e5fe:	3728      	adds	r7, #40	; 0x28
    e600:	46bd      	mov	sp, r7
    e602:	bd80      	pop	{r7, pc}
    e604:	000217b4 	.word	0x000217b4
    e608:	00021308 	.word	0x00021308
    e60c:	00021310 	.word	0x00021310

0000e610 <mp_obj_dict_get>:

// TODO: Make sure this is inlined in dict_subscr() below.
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    e610:	b580      	push	{r7, lr}
    e612:	b084      	sub	sp, #16
    e614:	af00      	add	r7, sp, #0
    e616:	6078      	str	r0, [r7, #4]
    e618:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e61a:	687b      	ldr	r3, [r7, #4]
    e61c:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e61e:	68fb      	ldr	r3, [r7, #12]
    e620:	3304      	adds	r3, #4
    e622:	2200      	movs	r2, #0
    e624:	6839      	ldr	r1, [r7, #0]
    e626:	4618      	mov	r0, r3
    e628:	f7fe feb4 	bl	d394 <mp_map_lookup>
    e62c:	60b8      	str	r0, [r7, #8]
    if (elem == NULL) {
    e62e:	68bb      	ldr	r3, [r7, #8]
    e630:	2b00      	cmp	r3, #0
    e632:	d107      	bne.n	e644 <mp_obj_dict_get+0x34>
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e634:	6839      	ldr	r1, [r7, #0]
    e636:	4806      	ldr	r0, [pc, #24]	; (e650 <mp_obj_dict_get+0x40>)
    e638:	f000 fe4c 	bl	f2d4 <mp_obj_new_exception_arg1>
    e63c:	4603      	mov	r3, r0
    e63e:	4618      	mov	r0, r3
    e640:	f7f1 fe4e 	bl	2e0 <nlr_jump>
    } else {
        return elem->value;
    e644:	68bb      	ldr	r3, [r7, #8]
    e646:	685b      	ldr	r3, [r3, #4]
    }
}
    e648:	4618      	mov	r0, r3
    e64a:	3710      	adds	r7, #16
    e64c:	46bd      	mov	sp, r7
    e64e:	bd80      	pop	{r7, pc}
    e650:	00021c3c 	.word	0x00021c3c

0000e654 <dict_subscr>:

STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    e654:	b580      	push	{r7, lr}
    e656:	b086      	sub	sp, #24
    e658:	af00      	add	r7, sp, #0
    e65a:	60f8      	str	r0, [r7, #12]
    e65c:	60b9      	str	r1, [r7, #8]
    e65e:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	2b00      	cmp	r3, #0
    e664:	d105      	bne.n	e672 <dict_subscr+0x1e>
        // delete
        mp_obj_dict_delete(self_in, index);
    e666:	68b9      	ldr	r1, [r7, #8]
    e668:	68f8      	ldr	r0, [r7, #12]
    e66a:	f000 fcf7 	bl	f05c <mp_obj_dict_delete>
        return mp_const_none;
    e66e:	4b13      	ldr	r3, [pc, #76]	; (e6bc <dict_subscr+0x68>)
    e670:	e020      	b.n	e6b4 <dict_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
    e672:	687b      	ldr	r3, [r7, #4]
    e674:	2b08      	cmp	r3, #8
    e676:	d117      	bne.n	e6a8 <dict_subscr+0x54>
        // load
        mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e678:	68fb      	ldr	r3, [r7, #12]
    e67a:	617b      	str	r3, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e67c:	697b      	ldr	r3, [r7, #20]
    e67e:	3304      	adds	r3, #4
    e680:	2200      	movs	r2, #0
    e682:	68b9      	ldr	r1, [r7, #8]
    e684:	4618      	mov	r0, r3
    e686:	f7fe fe85 	bl	d394 <mp_map_lookup>
    e68a:	6138      	str	r0, [r7, #16]
        if (elem == NULL) {
    e68c:	693b      	ldr	r3, [r7, #16]
    e68e:	2b00      	cmp	r3, #0
    e690:	d107      	bne.n	e6a2 <dict_subscr+0x4e>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e692:	68b9      	ldr	r1, [r7, #8]
    e694:	480a      	ldr	r0, [pc, #40]	; (e6c0 <dict_subscr+0x6c>)
    e696:	f000 fe1d 	bl	f2d4 <mp_obj_new_exception_arg1>
    e69a:	4603      	mov	r3, r0
    e69c:	4618      	mov	r0, r3
    e69e:	f7f1 fe1f 	bl	2e0 <nlr_jump>
        } else {
            return elem->value;
    e6a2:	693b      	ldr	r3, [r7, #16]
    e6a4:	685b      	ldr	r3, [r3, #4]
    e6a6:	e005      	b.n	e6b4 <dict_subscr+0x60>
        }
    } else {
        // store
        mp_obj_dict_store(self_in, index, value);
    e6a8:	687a      	ldr	r2, [r7, #4]
    e6aa:	68b9      	ldr	r1, [r7, #8]
    e6ac:	68f8      	ldr	r0, [r7, #12]
    e6ae:	f000 fca0 	bl	eff2 <mp_obj_dict_store>
        return mp_const_none;
    e6b2:	4b02      	ldr	r3, [pc, #8]	; (e6bc <dict_subscr+0x68>)
    }
}
    e6b4:	4618      	mov	r0, r3
    e6b6:	3718      	adds	r7, #24
    e6b8:	46bd      	mov	sp, r7
    e6ba:	bd80      	pop	{r7, pc}
    e6bc:	00022b54 	.word	0x00022b54
    e6c0:	00021c3c 	.word	0x00021c3c

0000e6c4 <mp_ensure_not_fixed>:

/******************************************************************************/
/* dict methods                                                               */

STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    e6c4:	b580      	push	{r7, lr}
    e6c6:	b082      	sub	sp, #8
    e6c8:	af00      	add	r7, sp, #0
    e6ca:	6078      	str	r0, [r7, #4]
    if (dict->map.is_fixed) {
    e6cc:	687b      	ldr	r3, [r7, #4]
    e6ce:	791b      	ldrb	r3, [r3, #4]
    e6d0:	f003 0302 	and.w	r3, r3, #2
    e6d4:	b2db      	uxtb	r3, r3
    e6d6:	2b00      	cmp	r3, #0
    e6d8:	d002      	beq.n	e6e0 <mp_ensure_not_fixed+0x1c>
        mp_raise_TypeError(NULL);
    e6da:	2000      	movs	r0, #0
    e6dc:	f7fe fbee 	bl	cebc <mp_raise_TypeError>
    }
}
    e6e0:	bf00      	nop
    e6e2:	3708      	adds	r7, #8
    e6e4:	46bd      	mov	sp, r7
    e6e6:	bd80      	pop	{r7, pc}

0000e6e8 <dict_clear>:

STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    e6e8:	b580      	push	{r7, lr}
    e6ea:	b084      	sub	sp, #16
    e6ec:	af00      	add	r7, sp, #0
    e6ee:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e6f0:	6878      	ldr	r0, [r7, #4]
    e6f2:	f7ff fdfd 	bl	e2f0 <MP_OBJ_IS_OBJ>
    e6f6:	4603      	mov	r3, r0
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	d005      	beq.n	e708 <dict_clear+0x20>
    e6fc:	687b      	ldr	r3, [r7, #4]
    e6fe:	681b      	ldr	r3, [r3, #0]
    e700:	68db      	ldr	r3, [r3, #12]
    e702:	4a0c      	ldr	r2, [pc, #48]	; (e734 <dict_clear+0x4c>)
    e704:	4293      	cmp	r3, r2
    e706:	d005      	beq.n	e714 <dict_clear+0x2c>
    e708:	4b0b      	ldr	r3, [pc, #44]	; (e738 <dict_clear+0x50>)
    e70a:	4a0c      	ldr	r2, [pc, #48]	; (e73c <dict_clear+0x54>)
    e70c:	21cd      	movs	r1, #205	; 0xcd
    e70e:	480c      	ldr	r0, [pc, #48]	; (e740 <dict_clear+0x58>)
    e710:	f00c fd68 	bl	1b1e4 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e714:	687b      	ldr	r3, [r7, #4]
    e716:	60fb      	str	r3, [r7, #12]
    mp_ensure_not_fixed(self);
    e718:	68f8      	ldr	r0, [r7, #12]
    e71a:	f7ff ffd3 	bl	e6c4 <mp_ensure_not_fixed>

    mp_map_clear(&self->map);
    e71e:	68fb      	ldr	r3, [r7, #12]
    e720:	3304      	adds	r3, #4
    e722:	4618      	mov	r0, r3
    e724:	f7fe fdb6 	bl	d294 <mp_map_clear>

    return mp_const_none;
    e728:	4b06      	ldr	r3, [pc, #24]	; (e744 <dict_clear+0x5c>)
}
    e72a:	4618      	mov	r0, r3
    e72c:	3710      	adds	r7, #16
    e72e:	46bd      	mov	sp, r7
    e730:	bd80      	pop	{r7, pc}
    e732:	bf00      	nop
    e734:	0000e475 	.word	0x0000e475
    e738:	000213dc 	.word	0x000213dc
    e73c:	000217f0 	.word	0x000217f0
    e740:	0002143c 	.word	0x0002143c
    e744:	00022b54 	.word	0x00022b54

0000e748 <dict_copy>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_clear_obj, dict_clear);

STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    e748:	b580      	push	{r7, lr}
    e74a:	b086      	sub	sp, #24
    e74c:	af00      	add	r7, sp, #0
    e74e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e750:	6878      	ldr	r0, [r7, #4]
    e752:	f7ff fdcd 	bl	e2f0 <MP_OBJ_IS_OBJ>
    e756:	4603      	mov	r3, r0
    e758:	2b00      	cmp	r3, #0
    e75a:	d005      	beq.n	e768 <dict_copy+0x20>
    e75c:	687b      	ldr	r3, [r7, #4]
    e75e:	681b      	ldr	r3, [r3, #0]
    e760:	68db      	ldr	r3, [r3, #12]
    e762:	4a24      	ldr	r2, [pc, #144]	; (e7f4 <dict_copy+0xac>)
    e764:	4293      	cmp	r3, r2
    e766:	d005      	beq.n	e774 <dict_copy+0x2c>
    e768:	4b23      	ldr	r3, [pc, #140]	; (e7f8 <dict_copy+0xb0>)
    e76a:	4a24      	ldr	r2, [pc, #144]	; (e7fc <dict_copy+0xb4>)
    e76c:	21d8      	movs	r1, #216	; 0xd8
    e76e:	4824      	ldr	r0, [pc, #144]	; (e800 <dict_copy+0xb8>)
    e770:	f00c fd38 	bl	1b1e4 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e774:	687b      	ldr	r3, [r7, #4]
    e776:	617b      	str	r3, [r7, #20]
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    e778:	697b      	ldr	r3, [r7, #20]
    e77a:	689b      	ldr	r3, [r3, #8]
    e77c:	4618      	mov	r0, r3
    e77e:	f000 fc17 	bl	efb0 <mp_obj_new_dict>
    e782:	6138      	str	r0, [r7, #16]
    mp_obj_dict_t *other = MP_OBJ_TO_PTR(other_out);
    e784:	693b      	ldr	r3, [r7, #16]
    e786:	60fb      	str	r3, [r7, #12]
    other->base.type = self->base.type;
    e788:	697b      	ldr	r3, [r7, #20]
    e78a:	681a      	ldr	r2, [r3, #0]
    e78c:	68fb      	ldr	r3, [r7, #12]
    e78e:	601a      	str	r2, [r3, #0]
    other->map.used = self->map.used;
    e790:	697b      	ldr	r3, [r7, #20]
    e792:	685b      	ldr	r3, [r3, #4]
    e794:	f3c3 01dc 	ubfx	r1, r3, #3, #29
    e798:	68fa      	ldr	r2, [r7, #12]
    e79a:	6853      	ldr	r3, [r2, #4]
    e79c:	f361 03df 	bfi	r3, r1, #3, #29
    e7a0:	6053      	str	r3, [r2, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    e7a2:	697b      	ldr	r3, [r7, #20]
    e7a4:	791b      	ldrb	r3, [r3, #4]
    e7a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
    e7aa:	b2d9      	uxtb	r1, r3
    e7ac:	68fa      	ldr	r2, [r7, #12]
    e7ae:	7913      	ldrb	r3, [r2, #4]
    e7b0:	f361 0300 	bfi	r3, r1, #0, #1
    e7b4:	7113      	strb	r3, [r2, #4]
    other->map.is_fixed = 0;
    e7b6:	68fa      	ldr	r2, [r7, #12]
    e7b8:	7913      	ldrb	r3, [r2, #4]
    e7ba:	f36f 0341 	bfc	r3, #1, #1
    e7be:	7113      	strb	r3, [r2, #4]
    other->map.is_ordered = self->map.is_ordered;
    e7c0:	697b      	ldr	r3, [r7, #20]
    e7c2:	791b      	ldrb	r3, [r3, #4]
    e7c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e7c8:	b2d9      	uxtb	r1, r3
    e7ca:	68fa      	ldr	r2, [r7, #12]
    e7cc:	7913      	ldrb	r3, [r2, #4]
    e7ce:	f361 0382 	bfi	r3, r1, #2, #1
    e7d2:	7113      	strb	r3, [r2, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    e7d4:	68fb      	ldr	r3, [r7, #12]
    e7d6:	68d8      	ldr	r0, [r3, #12]
    e7d8:	697b      	ldr	r3, [r7, #20]
    e7da:	68d9      	ldr	r1, [r3, #12]
    e7dc:	697b      	ldr	r3, [r7, #20]
    e7de:	689b      	ldr	r3, [r3, #8]
    e7e0:	00db      	lsls	r3, r3, #3
    e7e2:	461a      	mov	r2, r3
    e7e4:	f00d febc 	bl	1c560 <memcpy>
    return other_out;
    e7e8:	693b      	ldr	r3, [r7, #16]
}
    e7ea:	4618      	mov	r0, r3
    e7ec:	3718      	adds	r7, #24
    e7ee:	46bd      	mov	sp, r7
    e7f0:	bd80      	pop	{r7, pc}
    e7f2:	bf00      	nop
    e7f4:	0000e475 	.word	0x0000e475
    e7f8:	000213dc 	.word	0x000213dc
    e7fc:	000217fc 	.word	0x000217fc
    e800:	0002143c 	.word	0x0002143c

0000e804 <dict_fromkeys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_copy_obj, dict_copy);

// this is a classmethod
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    e804:	b580      	push	{r7, lr}
    e806:	b088      	sub	sp, #32
    e808:	af00      	add	r7, sp, #0
    e80a:	6078      	str	r0, [r7, #4]
    e80c:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(args[1], NULL);
    e80e:	683b      	ldr	r3, [r7, #0]
    e810:	3304      	adds	r3, #4
    e812:	681b      	ldr	r3, [r3, #0]
    e814:	2100      	movs	r1, #0
    e816:	4618      	mov	r0, r3
    e818:	f7fe f802 	bl	c820 <mp_getiter>
    e81c:	6178      	str	r0, [r7, #20]
    mp_obj_t value = mp_const_none;
    e81e:	4b1c      	ldr	r3, [pc, #112]	; (e890 <dict_fromkeys+0x8c>)
    e820:	61fb      	str	r3, [r7, #28]
    mp_obj_t next = MP_OBJ_NULL;
    e822:	2300      	movs	r3, #0
    e824:	613b      	str	r3, [r7, #16]

    if (n_args > 2) {
    e826:	687b      	ldr	r3, [r7, #4]
    e828:	2b02      	cmp	r3, #2
    e82a:	d902      	bls.n	e832 <dict_fromkeys+0x2e>
        value = args[2];
    e82c:	683b      	ldr	r3, [r7, #0]
    e82e:	689b      	ldr	r3, [r3, #8]
    e830:	61fb      	str	r3, [r7, #28]
    }

    // optimisation to allocate result based on len of argument
    mp_obj_t self_out;
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    e832:	683b      	ldr	r3, [r7, #0]
    e834:	3304      	adds	r3, #4
    e836:	681b      	ldr	r3, [r3, #0]
    e838:	4618      	mov	r0, r3
    e83a:	f7ff faa7 	bl	dd8c <mp_obj_len_maybe>
    e83e:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    e840:	68fb      	ldr	r3, [r7, #12]
    e842:	2b00      	cmp	r3, #0
    e844:	d104      	bne.n	e850 <dict_fromkeys+0x4c>
        /* object's type doesn't have a __len__ slot */
        self_out = mp_obj_new_dict(0);
    e846:	2000      	movs	r0, #0
    e848:	f000 fbb2 	bl	efb0 <mp_obj_new_dict>
    e84c:	61b8      	str	r0, [r7, #24]
    e84e:	e005      	b.n	e85c <dict_fromkeys+0x58>
    } else {
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    e850:	68fb      	ldr	r3, [r7, #12]
    e852:	105b      	asrs	r3, r3, #1
    e854:	4618      	mov	r0, r3
    e856:	f000 fbab 	bl	efb0 <mp_obj_new_dict>
    e85a:	61b8      	str	r0, [r7, #24]
    }

    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_out);
    e85c:	69bb      	ldr	r3, [r7, #24]
    e85e:	60bb      	str	r3, [r7, #8]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e860:	e009      	b.n	e876 <dict_fromkeys+0x72>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    e862:	68bb      	ldr	r3, [r7, #8]
    e864:	3304      	adds	r3, #4
    e866:	2201      	movs	r2, #1
    e868:	6939      	ldr	r1, [r7, #16]
    e86a:	4618      	mov	r0, r3
    e86c:	f7fe fd92 	bl	d394 <mp_map_lookup>
    e870:	4602      	mov	r2, r0
    e872:	69fb      	ldr	r3, [r7, #28]
    e874:	6053      	str	r3, [r2, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e876:	6978      	ldr	r0, [r7, #20]
    e878:	f7fe f854 	bl	c924 <mp_iternext>
    e87c:	6138      	str	r0, [r7, #16]
    e87e:	693b      	ldr	r3, [r7, #16]
    e880:	2b04      	cmp	r3, #4
    e882:	d1ee      	bne.n	e862 <dict_fromkeys+0x5e>
    }

    return self_out;
    e884:	69bb      	ldr	r3, [r7, #24]
}
    e886:	4618      	mov	r0, r3
    e888:	3720      	adds	r7, #32
    e88a:	46bd      	mov	sp, r7
    e88c:	bd80      	pop	{r7, pc}
    e88e:	bf00      	nop
    e890:	00022b54 	.word	0x00022b54

0000e894 <dict_get_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_fromkeys_fun_obj, 2, 3, dict_fromkeys);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(dict_fromkeys_obj, MP_ROM_PTR(&dict_fromkeys_fun_obj));

STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    e894:	b580      	push	{r7, lr}
    e896:	b088      	sub	sp, #32
    e898:	af00      	add	r7, sp, #0
    e89a:	60f8      	str	r0, [r7, #12]
    e89c:	60b9      	str	r1, [r7, #8]
    e89e:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    e8a0:	68bb      	ldr	r3, [r7, #8]
    e8a2:	681b      	ldr	r3, [r3, #0]
    e8a4:	4618      	mov	r0, r3
    e8a6:	f7ff fd23 	bl	e2f0 <MP_OBJ_IS_OBJ>
    e8aa:	4603      	mov	r3, r0
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	d006      	beq.n	e8be <dict_get_helper+0x2a>
    e8b0:	68bb      	ldr	r3, [r7, #8]
    e8b2:	681b      	ldr	r3, [r3, #0]
    e8b4:	681b      	ldr	r3, [r3, #0]
    e8b6:	68db      	ldr	r3, [r3, #12]
    e8b8:	4a27      	ldr	r2, [pc, #156]	; (e958 <dict_get_helper+0xc4>)
    e8ba:	4293      	cmp	r3, r2
    e8bc:	d006      	beq.n	e8cc <dict_get_helper+0x38>
    e8be:	4b27      	ldr	r3, [pc, #156]	; (e95c <dict_get_helper+0xc8>)
    e8c0:	4a27      	ldr	r2, [pc, #156]	; (e960 <dict_get_helper+0xcc>)
    e8c2:	f240 1105 	movw	r1, #261	; 0x105
    e8c6:	4827      	ldr	r0, [pc, #156]	; (e964 <dict_get_helper+0xd0>)
    e8c8:	f00c fc8c 	bl	1b1e4 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    e8cc:	68bb      	ldr	r3, [r7, #8]
    e8ce:	681b      	ldr	r3, [r3, #0]
    e8d0:	61bb      	str	r3, [r7, #24]
    if (lookup_kind != MP_MAP_LOOKUP) {
    e8d2:	687b      	ldr	r3, [r7, #4]
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d002      	beq.n	e8de <dict_get_helper+0x4a>
        mp_ensure_not_fixed(self);
    e8d8:	69b8      	ldr	r0, [r7, #24]
    e8da:	f7ff fef3 	bl	e6c4 <mp_ensure_not_fixed>
    }
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    e8de:	69bb      	ldr	r3, [r7, #24]
    e8e0:	1d18      	adds	r0, r3, #4
    e8e2:	68bb      	ldr	r3, [r7, #8]
    e8e4:	3304      	adds	r3, #4
    e8e6:	681b      	ldr	r3, [r3, #0]
    e8e8:	687a      	ldr	r2, [r7, #4]
    e8ea:	4619      	mov	r1, r3
    e8ec:	f7fe fd52 	bl	d394 <mp_map_lookup>
    e8f0:	6178      	str	r0, [r7, #20]
    mp_obj_t value;
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    e8f2:	697b      	ldr	r3, [r7, #20]
    e8f4:	2b00      	cmp	r3, #0
    e8f6:	d003      	beq.n	e900 <dict_get_helper+0x6c>
    e8f8:	697b      	ldr	r3, [r7, #20]
    e8fa:	685b      	ldr	r3, [r3, #4]
    e8fc:	2b00      	cmp	r3, #0
    e8fe:	d11d      	bne.n	e93c <dict_get_helper+0xa8>
        if (n_args == 2) {
    e900:	68fb      	ldr	r3, [r7, #12]
    e902:	2b02      	cmp	r3, #2
    e904:	d110      	bne.n	e928 <dict_get_helper+0x94>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    e906:	687b      	ldr	r3, [r7, #4]
    e908:	2b02      	cmp	r3, #2
    e90a:	d10a      	bne.n	e922 <dict_get_helper+0x8e>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    e90c:	68bb      	ldr	r3, [r7, #8]
    e90e:	3304      	adds	r3, #4
    e910:	681b      	ldr	r3, [r3, #0]
    e912:	4619      	mov	r1, r3
    e914:	4814      	ldr	r0, [pc, #80]	; (e968 <dict_get_helper+0xd4>)
    e916:	f000 fcdd 	bl	f2d4 <mp_obj_new_exception_arg1>
    e91a:	4603      	mov	r3, r0
    e91c:	4618      	mov	r0, r3
    e91e:	f7f1 fcdf 	bl	2e0 <nlr_jump>
            } else {
                value = mp_const_none;
    e922:	4b12      	ldr	r3, [pc, #72]	; (e96c <dict_get_helper+0xd8>)
    e924:	61fb      	str	r3, [r7, #28]
    e926:	e002      	b.n	e92e <dict_get_helper+0x9a>
            }
        } else {
            value = args[2];
    e928:	68bb      	ldr	r3, [r7, #8]
    e92a:	689b      	ldr	r3, [r3, #8]
    e92c:	61fb      	str	r3, [r7, #28]
        }
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    e92e:	687b      	ldr	r3, [r7, #4]
    e930:	2b01      	cmp	r3, #1
    e932:	d10c      	bne.n	e94e <dict_get_helper+0xba>
            elem->value = value;
    e934:	697b      	ldr	r3, [r7, #20]
    e936:	69fa      	ldr	r2, [r7, #28]
    e938:	605a      	str	r2, [r3, #4]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    e93a:	e008      	b.n	e94e <dict_get_helper+0xba>
        }
    } else {
        value = elem->value;
    e93c:	697b      	ldr	r3, [r7, #20]
    e93e:	685b      	ldr	r3, [r3, #4]
    e940:	61fb      	str	r3, [r7, #28]
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    e942:	687b      	ldr	r3, [r7, #4]
    e944:	2b02      	cmp	r3, #2
    e946:	d102      	bne.n	e94e <dict_get_helper+0xba>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    e948:	697b      	ldr	r3, [r7, #20]
    e94a:	2200      	movs	r2, #0
    e94c:	605a      	str	r2, [r3, #4]
        }
    }
    return value;
    e94e:	69fb      	ldr	r3, [r7, #28]
}
    e950:	4618      	mov	r0, r3
    e952:	3720      	adds	r7, #32
    e954:	46bd      	mov	sp, r7
    e956:	bd80      	pop	{r7, pc}
    e958:	0000e475 	.word	0x0000e475
    e95c:	00021474 	.word	0x00021474
    e960:	00021808 	.word	0x00021808
    e964:	0002143c 	.word	0x0002143c
    e968:	00021c3c 	.word	0x00021c3c
    e96c:	00022b54 	.word	0x00022b54

0000e970 <dict_get>:

STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    e970:	b580      	push	{r7, lr}
    e972:	b082      	sub	sp, #8
    e974:	af00      	add	r7, sp, #0
    e976:	6078      	str	r0, [r7, #4]
    e978:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    e97a:	2200      	movs	r2, #0
    e97c:	6839      	ldr	r1, [r7, #0]
    e97e:	6878      	ldr	r0, [r7, #4]
    e980:	f7ff ff88 	bl	e894 <dict_get_helper>
    e984:	4603      	mov	r3, r0
}
    e986:	4618      	mov	r0, r3
    e988:	3708      	adds	r7, #8
    e98a:	46bd      	mov	sp, r7
    e98c:	bd80      	pop	{r7, pc}

0000e98e <dict_pop>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_get_obj, 2, 3, dict_get);

STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    e98e:	b580      	push	{r7, lr}
    e990:	b082      	sub	sp, #8
    e992:	af00      	add	r7, sp, #0
    e994:	6078      	str	r0, [r7, #4]
    e996:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    e998:	2202      	movs	r2, #2
    e99a:	6839      	ldr	r1, [r7, #0]
    e99c:	6878      	ldr	r0, [r7, #4]
    e99e:	f7ff ff79 	bl	e894 <dict_get_helper>
    e9a2:	4603      	mov	r3, r0
}
    e9a4:	4618      	mov	r0, r3
    e9a6:	3708      	adds	r7, #8
    e9a8:	46bd      	mov	sp, r7
    e9aa:	bd80      	pop	{r7, pc}

0000e9ac <dict_setdefault>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_pop_obj, 2, 3, dict_pop);

STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    e9ac:	b580      	push	{r7, lr}
    e9ae:	b082      	sub	sp, #8
    e9b0:	af00      	add	r7, sp, #0
    e9b2:	6078      	str	r0, [r7, #4]
    e9b4:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    e9b6:	2201      	movs	r2, #1
    e9b8:	6839      	ldr	r1, [r7, #0]
    e9ba:	6878      	ldr	r0, [r7, #4]
    e9bc:	f7ff ff6a 	bl	e894 <dict_get_helper>
    e9c0:	4603      	mov	r3, r0
}
    e9c2:	4618      	mov	r0, r3
    e9c4:	3708      	adds	r7, #8
    e9c6:	46bd      	mov	sp, r7
    e9c8:	bd80      	pop	{r7, pc}

0000e9ca <dict_popitem>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_setdefault_obj, 2, 3, dict_setdefault);

STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    e9ca:	b580      	push	{r7, lr}
    e9cc:	b088      	sub	sp, #32
    e9ce:	af00      	add	r7, sp, #0
    e9d0:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e9d2:	6878      	ldr	r0, [r7, #4]
    e9d4:	f7ff fc8c 	bl	e2f0 <MP_OBJ_IS_OBJ>
    e9d8:	4603      	mov	r3, r0
    e9da:	2b00      	cmp	r3, #0
    e9dc:	d005      	beq.n	e9ea <dict_popitem+0x20>
    e9de:	687b      	ldr	r3, [r7, #4]
    e9e0:	681b      	ldr	r3, [r3, #0]
    e9e2:	68db      	ldr	r3, [r3, #12]
    e9e4:	4a22      	ldr	r2, [pc, #136]	; (ea70 <dict_popitem+0xa6>)
    e9e6:	4293      	cmp	r3, r2
    e9e8:	d006      	beq.n	e9f8 <dict_popitem+0x2e>
    e9ea:	4b22      	ldr	r3, [pc, #136]	; (ea74 <dict_popitem+0xaa>)
    e9ec:	4a22      	ldr	r2, [pc, #136]	; (ea78 <dict_popitem+0xae>)
    e9ee:	f44f 7199 	mov.w	r1, #306	; 0x132
    e9f2:	4822      	ldr	r0, [pc, #136]	; (ea7c <dict_popitem+0xb2>)
    e9f4:	f00c fbf6 	bl	1b1e4 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e9f8:	687b      	ldr	r3, [r7, #4]
    e9fa:	61fb      	str	r3, [r7, #28]
    mp_ensure_not_fixed(self);
    e9fc:	69f8      	ldr	r0, [r7, #28]
    e9fe:	f7ff fe61 	bl	e6c4 <mp_ensure_not_fixed>
    size_t cur = 0;
    ea02:	2300      	movs	r3, #0
    ea04:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    ea06:	f107 0310 	add.w	r3, r7, #16
    ea0a:	4619      	mov	r1, r3
    ea0c:	69f8      	ldr	r0, [r7, #28]
    ea0e:	f7ff fcb7 	bl	e380 <dict_iter_next>
    ea12:	61b8      	str	r0, [r7, #24]
    if (next == NULL) {
    ea14:	69bb      	ldr	r3, [r7, #24]
    ea16:	2b00      	cmp	r3, #0
    ea18:	d103      	bne.n	ea22 <dict_popitem+0x58>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    ea1a:	4919      	ldr	r1, [pc, #100]	; (ea80 <dict_popitem+0xb6>)
    ea1c:	4819      	ldr	r0, [pc, #100]	; (ea84 <dict_popitem+0xba>)
    ea1e:	f7fe fa2b 	bl	ce78 <mp_raise_msg>
    }
    self->map.used--;
    ea22:	69fb      	ldr	r3, [r7, #28]
    ea24:	685b      	ldr	r3, [r3, #4]
    ea26:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ea2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    ea2e:	3b01      	subs	r3, #1
    ea30:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    ea34:	69f9      	ldr	r1, [r7, #28]
    ea36:	684a      	ldr	r2, [r1, #4]
    ea38:	f363 02df 	bfi	r2, r3, #3, #29
    ea3c:	604a      	str	r2, [r1, #4]
    mp_obj_t items[] = {next->key, next->value};
    ea3e:	69bb      	ldr	r3, [r7, #24]
    ea40:	681b      	ldr	r3, [r3, #0]
    ea42:	60bb      	str	r3, [r7, #8]
    ea44:	69bb      	ldr	r3, [r7, #24]
    ea46:	685b      	ldr	r3, [r3, #4]
    ea48:	60fb      	str	r3, [r7, #12]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    ea4a:	69bb      	ldr	r3, [r7, #24]
    ea4c:	2208      	movs	r2, #8
    ea4e:	601a      	str	r2, [r3, #0]
    next->value = MP_OBJ_NULL;
    ea50:	69bb      	ldr	r3, [r7, #24]
    ea52:	2200      	movs	r2, #0
    ea54:	605a      	str	r2, [r3, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    ea56:	f107 0308 	add.w	r3, r7, #8
    ea5a:	4619      	mov	r1, r3
    ea5c:	2002      	movs	r0, #2
    ea5e:	f006 ffe5 	bl	15a2c <mp_obj_new_tuple>
    ea62:	6178      	str	r0, [r7, #20]

    return tuple;
    ea64:	697b      	ldr	r3, [r7, #20]
}
    ea66:	4618      	mov	r0, r3
    ea68:	3720      	adds	r7, #32
    ea6a:	46bd      	mov	sp, r7
    ea6c:	bd80      	pop	{r7, pc}
    ea6e:	bf00      	nop
    ea70:	0000e475 	.word	0x0000e475
    ea74:	000213dc 	.word	0x000213dc
    ea78:	00021818 	.word	0x00021818
    ea7c:	0002143c 	.word	0x0002143c
    ea80:	000214f8 	.word	0x000214f8
    ea84:	00021c3c 	.word	0x00021c3c

0000ea88 <dict_update>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_popitem_obj, dict_popitem);

STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    ea88:	b580      	push	{r7, lr}
    ea8a:	b090      	sub	sp, #64	; 0x40
    ea8c:	af02      	add	r7, sp, #8
    ea8e:	60f8      	str	r0, [r7, #12]
    ea90:	60b9      	str	r1, [r7, #8]
    ea92:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    ea94:	68bb      	ldr	r3, [r7, #8]
    ea96:	681b      	ldr	r3, [r3, #0]
    ea98:	4618      	mov	r0, r3
    ea9a:	f7ff fc29 	bl	e2f0 <MP_OBJ_IS_OBJ>
    ea9e:	4603      	mov	r3, r0
    eaa0:	2b00      	cmp	r3, #0
    eaa2:	d006      	beq.n	eab2 <dict_update+0x2a>
    eaa4:	68bb      	ldr	r3, [r7, #8]
    eaa6:	681b      	ldr	r3, [r3, #0]
    eaa8:	681b      	ldr	r3, [r3, #0]
    eaaa:	68db      	ldr	r3, [r3, #12]
    eaac:	4a5c      	ldr	r2, [pc, #368]	; (ec20 <dict_update+0x198>)
    eaae:	4293      	cmp	r3, r2
    eab0:	d006      	beq.n	eac0 <dict_update+0x38>
    eab2:	4b5c      	ldr	r3, [pc, #368]	; (ec24 <dict_update+0x19c>)
    eab4:	4a5c      	ldr	r2, [pc, #368]	; (ec28 <dict_update+0x1a0>)
    eab6:	f240 1145 	movw	r1, #325	; 0x145
    eaba:	485c      	ldr	r0, [pc, #368]	; (ec2c <dict_update+0x1a4>)
    eabc:	f00c fb92 	bl	1b1e4 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    eac0:	68bb      	ldr	r3, [r7, #8]
    eac2:	681b      	ldr	r3, [r3, #0]
    eac4:	633b      	str	r3, [r7, #48]	; 0x30
    mp_ensure_not_fixed(self);
    eac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    eac8:	f7ff fdfc 	bl	e6c4 <mp_ensure_not_fixed>

    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    eacc:	687b      	ldr	r3, [r7, #4]
    eace:	681b      	ldr	r3, [r3, #0]
    ead0:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ead4:	4619      	mov	r1, r3
    ead6:	2301      	movs	r3, #1
    ead8:	9300      	str	r3, [sp, #0]
    eada:	2302      	movs	r3, #2
    eadc:	2201      	movs	r2, #1
    eade:	68f8      	ldr	r0, [r7, #12]
    eae0:	f7fe fa12 	bl	cf08 <mp_arg_check_num>

    if (n_args == 2) {
    eae4:	68fb      	ldr	r3, [r7, #12]
    eae6:	2b02      	cmp	r3, #2
    eae8:	d16f      	bne.n	ebca <dict_update+0x142>
        // given a positional argument

        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    eaea:	68bb      	ldr	r3, [r7, #8]
    eaec:	3304      	adds	r3, #4
    eaee:	681b      	ldr	r3, [r3, #0]
    eaf0:	4618      	mov	r0, r3
    eaf2:	f7ff fbfd 	bl	e2f0 <MP_OBJ_IS_OBJ>
    eaf6:	4603      	mov	r3, r0
    eaf8:	2b00      	cmp	r3, #0
    eafa:	d02d      	beq.n	eb58 <dict_update+0xd0>
    eafc:	68bb      	ldr	r3, [r7, #8]
    eafe:	3304      	adds	r3, #4
    eb00:	681b      	ldr	r3, [r3, #0]
    eb02:	681b      	ldr	r3, [r3, #0]
    eb04:	68db      	ldr	r3, [r3, #12]
    eb06:	4a46      	ldr	r2, [pc, #280]	; (ec20 <dict_update+0x198>)
    eb08:	4293      	cmp	r3, r2
    eb0a:	d125      	bne.n	eb58 <dict_update+0xd0>
            // update from other dictionary (make sure other is not self)
            if (args[1] != args[0]) {
    eb0c:	68bb      	ldr	r3, [r7, #8]
    eb0e:	3304      	adds	r3, #4
    eb10:	681a      	ldr	r2, [r3, #0]
    eb12:	68bb      	ldr	r3, [r7, #8]
    eb14:	681b      	ldr	r3, [r3, #0]
    eb16:	429a      	cmp	r2, r3
    eb18:	d057      	beq.n	ebca <dict_update+0x142>
                size_t cur = 0;
    eb1a:	2300      	movs	r3, #0
    eb1c:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *elem = NULL;
    eb1e:	2300      	movs	r3, #0
    eb20:	62fb      	str	r3, [r7, #44]	; 0x2c
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    eb22:	e00b      	b.n	eb3c <dict_update+0xb4>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eb26:	1d18      	adds	r0, r3, #4
    eb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb2a:	681b      	ldr	r3, [r3, #0]
    eb2c:	2201      	movs	r2, #1
    eb2e:	4619      	mov	r1, r3
    eb30:	f7fe fc30 	bl	d394 <mp_map_lookup>
    eb34:	4602      	mov	r2, r0
    eb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb38:	685b      	ldr	r3, [r3, #4]
    eb3a:	6053      	str	r3, [r2, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    eb3c:	68bb      	ldr	r3, [r7, #8]
    eb3e:	3304      	adds	r3, #4
    eb40:	681b      	ldr	r3, [r3, #0]
    eb42:	f107 0210 	add.w	r2, r7, #16
    eb46:	4611      	mov	r1, r2
    eb48:	4618      	mov	r0, r3
    eb4a:	f7ff fc19 	bl	e380 <dict_iter_next>
    eb4e:	62f8      	str	r0, [r7, #44]	; 0x2c
    eb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb52:	2b00      	cmp	r3, #0
    eb54:	d1e6      	bne.n	eb24 <dict_update+0x9c>
            if (args[1] != args[0]) {
    eb56:	e038      	b.n	ebca <dict_update+0x142>
                }
            }
        } else {
            // update from a generic iterable of pairs
            mp_obj_t iter = mp_getiter(args[1], NULL);
    eb58:	68bb      	ldr	r3, [r7, #8]
    eb5a:	3304      	adds	r3, #4
    eb5c:	681b      	ldr	r3, [r3, #0]
    eb5e:	2100      	movs	r1, #0
    eb60:	4618      	mov	r0, r3
    eb62:	f7fd fe5d 	bl	c820 <mp_getiter>
    eb66:	62b8      	str	r0, [r7, #40]	; 0x28
            mp_obj_t next = MP_OBJ_NULL;
    eb68:	2300      	movs	r3, #0
    eb6a:	627b      	str	r3, [r7, #36]	; 0x24
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    eb6c:	e026      	b.n	ebbc <dict_update+0x134>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    eb6e:	2100      	movs	r1, #0
    eb70:	6a78      	ldr	r0, [r7, #36]	; 0x24
    eb72:	f7fd fe55 	bl	c820 <mp_getiter>
    eb76:	6238      	str	r0, [r7, #32]
                mp_obj_t key = mp_iternext(inneriter);
    eb78:	6a38      	ldr	r0, [r7, #32]
    eb7a:	f7fd fed3 	bl	c924 <mp_iternext>
    eb7e:	61f8      	str	r0, [r7, #28]
                mp_obj_t value = mp_iternext(inneriter);
    eb80:	6a38      	ldr	r0, [r7, #32]
    eb82:	f7fd fecf 	bl	c924 <mp_iternext>
    eb86:	61b8      	str	r0, [r7, #24]
                mp_obj_t stop = mp_iternext(inneriter);
    eb88:	6a38      	ldr	r0, [r7, #32]
    eb8a:	f7fd fecb 	bl	c924 <mp_iternext>
    eb8e:	6178      	str	r0, [r7, #20]
                if (key == MP_OBJ_STOP_ITERATION
    eb90:	69fb      	ldr	r3, [r7, #28]
    eb92:	2b04      	cmp	r3, #4
    eb94:	d005      	beq.n	eba2 <dict_update+0x11a>
                    || value == MP_OBJ_STOP_ITERATION
    eb96:	69bb      	ldr	r3, [r7, #24]
    eb98:	2b04      	cmp	r3, #4
    eb9a:	d002      	beq.n	eba2 <dict_update+0x11a>
                    || stop != MP_OBJ_STOP_ITERATION) {
    eb9c:	697b      	ldr	r3, [r7, #20]
    eb9e:	2b04      	cmp	r3, #4
    eba0:	d002      	beq.n	eba8 <dict_update+0x120>
                    mp_raise_ValueError("dict update sequence has wrong length");
    eba2:	4823      	ldr	r0, [pc, #140]	; (ec30 <dict_update+0x1a8>)
    eba4:	f7fe f97f 	bl	cea6 <mp_raise_ValueError>
                } else {
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ebaa:	3304      	adds	r3, #4
    ebac:	2201      	movs	r2, #1
    ebae:	69f9      	ldr	r1, [r7, #28]
    ebb0:	4618      	mov	r0, r3
    ebb2:	f7fe fbef 	bl	d394 <mp_map_lookup>
    ebb6:	4602      	mov	r2, r0
    ebb8:	69bb      	ldr	r3, [r7, #24]
    ebba:	6053      	str	r3, [r2, #4]
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ebbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ebbe:	f7fd feb1 	bl	c924 <mp_iternext>
    ebc2:	6278      	str	r0, [r7, #36]	; 0x24
    ebc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ebc6:	2b04      	cmp	r3, #4
    ebc8:	d1d1      	bne.n	eb6e <dict_update+0xe6>
            }
        }
    }

    // update the dict with any keyword args
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ebca:	2300      	movs	r3, #0
    ebcc:	637b      	str	r3, [r7, #52]	; 0x34
    ebce:	e01d      	b.n	ec0c <dict_update+0x184>
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    ebd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ebd2:	6878      	ldr	r0, [r7, #4]
    ebd4:	f7ff fb9e 	bl	e314 <MP_MAP_SLOT_IS_FILLED>
    ebd8:	4603      	mov	r3, r0
    ebda:	2b00      	cmp	r3, #0
    ebdc:	d013      	beq.n	ec06 <dict_update+0x17e>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ebe0:	1d18      	adds	r0, r3, #4
    ebe2:	687b      	ldr	r3, [r7, #4]
    ebe4:	689a      	ldr	r2, [r3, #8]
    ebe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ebe8:	00db      	lsls	r3, r3, #3
    ebea:	4413      	add	r3, r2
    ebec:	681b      	ldr	r3, [r3, #0]
    ebee:	2201      	movs	r2, #1
    ebf0:	4619      	mov	r1, r3
    ebf2:	f7fe fbcf 	bl	d394 <mp_map_lookup>
    ebf6:	4601      	mov	r1, r0
    ebf8:	687b      	ldr	r3, [r7, #4]
    ebfa:	689a      	ldr	r2, [r3, #8]
    ebfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ebfe:	00db      	lsls	r3, r3, #3
    ec00:	4413      	add	r3, r2
    ec02:	685b      	ldr	r3, [r3, #4]
    ec04:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ec06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec08:	3301      	adds	r3, #1
    ec0a:	637b      	str	r3, [r7, #52]	; 0x34
    ec0c:	687b      	ldr	r3, [r7, #4]
    ec0e:	685a      	ldr	r2, [r3, #4]
    ec10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec12:	429a      	cmp	r2, r3
    ec14:	d8dc      	bhi.n	ebd0 <dict_update+0x148>
        }
    }

    return mp_const_none;
    ec16:	4b07      	ldr	r3, [pc, #28]	; (ec34 <dict_update+0x1ac>)
}
    ec18:	4618      	mov	r0, r3
    ec1a:	3738      	adds	r7, #56	; 0x38
    ec1c:	46bd      	mov	sp, r7
    ec1e:	bd80      	pop	{r7, pc}
    ec20:	0000e475 	.word	0x0000e475
    ec24:	00021474 	.word	0x00021474
    ec28:	00021828 	.word	0x00021828
    ec2c:	0002143c 	.word	0x0002143c
    ec30:	00021520 	.word	0x00021520
    ec34:	00022b54 	.word	0x00022b54

0000ec38 <dict_view_it_iternext>:
    mp_obj_base_t base;
    mp_obj_t dict;
    mp_dict_view_kind_t kind;
} mp_obj_dict_view_t;

STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    ec38:	b580      	push	{r7, lr}
    ec3a:	b086      	sub	sp, #24
    ec3c:	af00      	add	r7, sp, #0
    ec3e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    ec40:	6878      	ldr	r0, [r7, #4]
    ec42:	f7ff fb55 	bl	e2f0 <MP_OBJ_IS_OBJ>
    ec46:	4603      	mov	r3, r0
    ec48:	2b00      	cmp	r3, #0
    ec4a:	d004      	beq.n	ec56 <dict_view_it_iternext+0x1e>
    ec4c:	687b      	ldr	r3, [r7, #4]
    ec4e:	681b      	ldr	r3, [r3, #0]
    ec50:	4a1b      	ldr	r2, [pc, #108]	; (ecc0 <dict_view_it_iternext+0x88>)
    ec52:	4293      	cmp	r3, r2
    ec54:	d006      	beq.n	ec64 <dict_view_it_iternext+0x2c>
    ec56:	4b1b      	ldr	r3, [pc, #108]	; (ecc4 <dict_view_it_iternext+0x8c>)
    ec58:	4a1b      	ldr	r2, [pc, #108]	; (ecc8 <dict_view_it_iternext+0x90>)
    ec5a:	f240 1193 	movw	r1, #403	; 0x193
    ec5e:	481b      	ldr	r0, [pc, #108]	; (eccc <dict_view_it_iternext+0x94>)
    ec60:	f00c fac0 	bl	1b1e4 <__assert_func>
    mp_obj_dict_view_it_t *self = MP_OBJ_TO_PTR(self_in);
    ec64:	687b      	ldr	r3, [r7, #4]
    ec66:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    ec68:	697b      	ldr	r3, [r7, #20]
    ec6a:	689a      	ldr	r2, [r3, #8]
    ec6c:	697b      	ldr	r3, [r7, #20]
    ec6e:	330c      	adds	r3, #12
    ec70:	4619      	mov	r1, r3
    ec72:	4610      	mov	r0, r2
    ec74:	f7ff fb84 	bl	e380 <dict_iter_next>
    ec78:	6138      	str	r0, [r7, #16]

    if (next == NULL) {
    ec7a:	693b      	ldr	r3, [r7, #16]
    ec7c:	2b00      	cmp	r3, #0
    ec7e:	d101      	bne.n	ec84 <dict_view_it_iternext+0x4c>
        return MP_OBJ_STOP_ITERATION;
    ec80:	2304      	movs	r3, #4
    ec82:	e018      	b.n	ecb6 <dict_view_it_iternext+0x7e>
    } else {
        switch (self->kind) {
    ec84:	697b      	ldr	r3, [r7, #20]
    ec86:	685b      	ldr	r3, [r3, #4]
    ec88:	2b01      	cmp	r3, #1
    ec8a:	d00f      	beq.n	ecac <dict_view_it_iternext+0x74>
    ec8c:	2b02      	cmp	r3, #2
    ec8e:	d010      	beq.n	ecb2 <dict_view_it_iternext+0x7a>
            case MP_DICT_VIEW_ITEMS:
            default: {
                mp_obj_t items[] = {next->key, next->value};
    ec90:	693b      	ldr	r3, [r7, #16]
    ec92:	681b      	ldr	r3, [r3, #0]
    ec94:	60bb      	str	r3, [r7, #8]
    ec96:	693b      	ldr	r3, [r7, #16]
    ec98:	685b      	ldr	r3, [r3, #4]
    ec9a:	60fb      	str	r3, [r7, #12]
                return mp_obj_new_tuple(2, items);
    ec9c:	f107 0308 	add.w	r3, r7, #8
    eca0:	4619      	mov	r1, r3
    eca2:	2002      	movs	r0, #2
    eca4:	f006 fec2 	bl	15a2c <mp_obj_new_tuple>
    eca8:	4603      	mov	r3, r0
    ecaa:	e004      	b.n	ecb6 <dict_view_it_iternext+0x7e>
            }
            case MP_DICT_VIEW_KEYS:
                return next->key;
    ecac:	693b      	ldr	r3, [r7, #16]
    ecae:	681b      	ldr	r3, [r3, #0]
    ecb0:	e001      	b.n	ecb6 <dict_view_it_iternext+0x7e>
            case MP_DICT_VIEW_VALUES:
                return next->value;
    ecb2:	693b      	ldr	r3, [r7, #16]
    ecb4:	685b      	ldr	r3, [r3, #4]
        }
    }
}
    ecb6:	4618      	mov	r0, r3
    ecb8:	3718      	adds	r7, #24
    ecba:	46bd      	mov	sp, r7
    ecbc:	bd80      	pop	{r7, pc}
    ecbe:	bf00      	nop
    ecc0:	00021590 	.word	0x00021590
    ecc4:	000215fc 	.word	0x000215fc
    ecc8:	00021834 	.word	0x00021834
    eccc:	0002143c 	.word	0x0002143c

0000ecd0 <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    ecd0:	b580      	push	{r7, lr}
    ecd2:	b084      	sub	sp, #16
    ecd4:	af00      	add	r7, sp, #0
    ecd6:	6078      	str	r0, [r7, #4]
    ecd8:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    ecda:	6878      	ldr	r0, [r7, #4]
    ecdc:	f7ff fb08 	bl	e2f0 <MP_OBJ_IS_OBJ>
    ece0:	4603      	mov	r3, r0
    ece2:	2b00      	cmp	r3, #0
    ece4:	d004      	beq.n	ecf0 <dict_view_getiter+0x20>
    ece6:	687b      	ldr	r3, [r7, #4]
    ece8:	681b      	ldr	r3, [r3, #0]
    ecea:	4a10      	ldr	r2, [pc, #64]	; (ed2c <dict_view_getiter+0x5c>)
    ecec:	4293      	cmp	r3, r2
    ecee:	d006      	beq.n	ecfe <dict_view_getiter+0x2e>
    ecf0:	4b0f      	ldr	r3, [pc, #60]	; (ed30 <dict_view_getiter+0x60>)
    ecf2:	4a10      	ldr	r2, [pc, #64]	; (ed34 <dict_view_getiter+0x64>)
    ecf4:	f240 11b1 	movw	r1, #433	; 0x1b1
    ecf8:	480f      	ldr	r0, [pc, #60]	; (ed38 <dict_view_getiter+0x68>)
    ecfa:	f00c fa73 	bl	1b1e4 <__assert_func>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    ecfe:	687b      	ldr	r3, [r7, #4]
    ed00:	60fb      	str	r3, [r7, #12]
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    ed02:	683b      	ldr	r3, [r7, #0]
    ed04:	60bb      	str	r3, [r7, #8]
    o->base.type = &dict_view_it_type;
    ed06:	68bb      	ldr	r3, [r7, #8]
    ed08:	4a0c      	ldr	r2, [pc, #48]	; (ed3c <dict_view_getiter+0x6c>)
    ed0a:	601a      	str	r2, [r3, #0]
    o->kind = view->kind;
    ed0c:	68fb      	ldr	r3, [r7, #12]
    ed0e:	689a      	ldr	r2, [r3, #8]
    ed10:	68bb      	ldr	r3, [r7, #8]
    ed12:	605a      	str	r2, [r3, #4]
    o->dict = view->dict;
    ed14:	68fb      	ldr	r3, [r7, #12]
    ed16:	685a      	ldr	r2, [r3, #4]
    ed18:	68bb      	ldr	r3, [r7, #8]
    ed1a:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    ed1c:	68bb      	ldr	r3, [r7, #8]
    ed1e:	2200      	movs	r2, #0
    ed20:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    ed22:	68bb      	ldr	r3, [r7, #8]
}
    ed24:	4618      	mov	r0, r3
    ed26:	3710      	adds	r7, #16
    ed28:	46bd      	mov	sp, r7
    ed2a:	bd80      	pop	{r7, pc}
    ed2c:	00021554 	.word	0x00021554
    ed30:	0002165c 	.word	0x0002165c
    ed34:	0002184c 	.word	0x0002184c
    ed38:	0002143c 	.word	0x0002143c
    ed3c:	00021590 	.word	0x00021590

0000ed40 <dict_view_print>:

STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    ed40:	b580      	push	{r7, lr}
    ed42:	b08c      	sub	sp, #48	; 0x30
    ed44:	af00      	add	r7, sp, #0
    ed46:	60f8      	str	r0, [r7, #12]
    ed48:	60b9      	str	r1, [r7, #8]
    ed4a:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    ed4c:	68b8      	ldr	r0, [r7, #8]
    ed4e:	f7ff facf 	bl	e2f0 <MP_OBJ_IS_OBJ>
    ed52:	4603      	mov	r3, r0
    ed54:	2b00      	cmp	r3, #0
    ed56:	d004      	beq.n	ed62 <dict_view_print+0x22>
    ed58:	68bb      	ldr	r3, [r7, #8]
    ed5a:	681b      	ldr	r3, [r3, #0]
    ed5c:	4a23      	ldr	r2, [pc, #140]	; (edec <dict_view_print+0xac>)
    ed5e:	4293      	cmp	r3, r2
    ed60:	d006      	beq.n	ed70 <dict_view_print+0x30>
    ed62:	4b23      	ldr	r3, [pc, #140]	; (edf0 <dict_view_print+0xb0>)
    ed64:	4a23      	ldr	r2, [pc, #140]	; (edf4 <dict_view_print+0xb4>)
    ed66:	f240 11bd 	movw	r1, #445	; 0x1bd
    ed6a:	4823      	ldr	r0, [pc, #140]	; (edf8 <dict_view_print+0xb8>)
    ed6c:	f00c fa3a 	bl	1b1e4 <__assert_func>
    mp_obj_dict_view_t *self = MP_OBJ_TO_PTR(self_in);
    ed70:	68bb      	ldr	r3, [r7, #8]
    ed72:	62bb      	str	r3, [r7, #40]	; 0x28
    bool first = true;
    ed74:	2301      	movs	r3, #1
    ed76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    mp_print_str(print, mp_dict_view_names[self->kind]);
    ed7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed7c:	689b      	ldr	r3, [r3, #8]
    ed7e:	4a1f      	ldr	r2, [pc, #124]	; (edfc <dict_view_print+0xbc>)
    ed80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed84:	4619      	mov	r1, r3
    ed86:	68f8      	ldr	r0, [r7, #12]
    ed88:	f7f2 fd70 	bl	186c <mp_print_str>
    mp_print_str(print, "([");
    ed8c:	491c      	ldr	r1, [pc, #112]	; (ee00 <dict_view_print+0xc0>)
    ed8e:	68f8      	ldr	r0, [r7, #12]
    ed90:	f7f2 fd6c 	bl	186c <mp_print_str>
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    ed94:	f107 0310 	add.w	r3, r7, #16
    ed98:	4619      	mov	r1, r3
    ed9a:	68b8      	ldr	r0, [r7, #8]
    ed9c:	f7ff ff98 	bl	ecd0 <dict_view_getiter>
    eda0:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_t next = MP_OBJ_NULL;
    eda2:	2300      	movs	r3, #0
    eda4:	623b      	str	r3, [r7, #32]
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    eda6:	e012      	b.n	edce <dict_view_print+0x8e>
        if (!first) {
    eda8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    edac:	f083 0301 	eor.w	r3, r3, #1
    edb0:	b2db      	uxtb	r3, r3
    edb2:	2b00      	cmp	r3, #0
    edb4:	d003      	beq.n	edbe <dict_view_print+0x7e>
            mp_print_str(print, ", ");
    edb6:	4913      	ldr	r1, [pc, #76]	; (ee04 <dict_view_print+0xc4>)
    edb8:	68f8      	ldr	r0, [r7, #12]
    edba:	f7f2 fd57 	bl	186c <mp_print_str>
        }
        first = false;
    edbe:	2300      	movs	r3, #0
    edc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        mp_obj_print_helper(print, next, PRINT_REPR);
    edc4:	2201      	movs	r2, #1
    edc6:	6a39      	ldr	r1, [r7, #32]
    edc8:	68f8      	ldr	r0, [r7, #12]
    edca:	f7fe fcbe 	bl	d74a <mp_obj_print_helper>
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    edce:	6a78      	ldr	r0, [r7, #36]	; 0x24
    edd0:	f7ff ff32 	bl	ec38 <dict_view_it_iternext>
    edd4:	6238      	str	r0, [r7, #32]
    edd6:	6a3b      	ldr	r3, [r7, #32]
    edd8:	2b04      	cmp	r3, #4
    edda:	d1e5      	bne.n	eda8 <dict_view_print+0x68>
    }
    mp_print_str(print, "])");
    eddc:	490a      	ldr	r1, [pc, #40]	; (ee08 <dict_view_print+0xc8>)
    edde:	68f8      	ldr	r0, [r7, #12]
    ede0:	f7f2 fd44 	bl	186c <mp_print_str>
}
    ede4:	bf00      	nop
    ede6:	3730      	adds	r7, #48	; 0x30
    ede8:	46bd      	mov	sp, r7
    edea:	bd80      	pop	{r7, pc}
    edec:	00021554 	.word	0x00021554
    edf0:	000216b8 	.word	0x000216b8
    edf4:	00021860 	.word	0x00021860
    edf8:	0002143c 	.word	0x0002143c
    edfc:	000215f0 	.word	0x000215f0
    ee00:	00021714 	.word	0x00021714
    ee04:	000213d0 	.word	0x000213d0
    ee08:	00021718 	.word	0x00021718

0000ee0c <dict_view_binary_op>:

STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    ee0c:	b580      	push	{r7, lr}
    ee0e:	b086      	sub	sp, #24
    ee10:	af00      	add	r7, sp, #0
    ee12:	60f8      	str	r0, [r7, #12]
    ee14:	60b9      	str	r1, [r7, #8]
    ee16:	607a      	str	r2, [r7, #4]
    // only supported for the 'keys' kind until sets and dicts are refactored
    mp_obj_dict_view_t *o = MP_OBJ_TO_PTR(lhs_in);
    ee18:	68bb      	ldr	r3, [r7, #8]
    ee1a:	617b      	str	r3, [r7, #20]
    if (o->kind != MP_DICT_VIEW_KEYS) {
    ee1c:	697b      	ldr	r3, [r7, #20]
    ee1e:	689b      	ldr	r3, [r3, #8]
    ee20:	2b01      	cmp	r3, #1
    ee22:	d001      	beq.n	ee28 <dict_view_binary_op+0x1c>
        return MP_OBJ_NULL; // op not supported
    ee24:	2300      	movs	r3, #0
    ee26:	e00c      	b.n	ee42 <dict_view_binary_op+0x36>
    }
    if (op != MP_BINARY_OP_CONTAINS) {
    ee28:	68fb      	ldr	r3, [r7, #12]
    ee2a:	2b22      	cmp	r3, #34	; 0x22
    ee2c:	d001      	beq.n	ee32 <dict_view_binary_op+0x26>
        return MP_OBJ_NULL; // op not supported
    ee2e:	2300      	movs	r3, #0
    ee30:	e007      	b.n	ee42 <dict_view_binary_op+0x36>
    }
    return dict_binary_op(op, o->dict, rhs_in);
    ee32:	697b      	ldr	r3, [r7, #20]
    ee34:	685b      	ldr	r3, [r3, #4]
    ee36:	687a      	ldr	r2, [r7, #4]
    ee38:	4619      	mov	r1, r3
    ee3a:	68f8      	ldr	r0, [r7, #12]
    ee3c:	f7ff fb75 	bl	e52a <dict_binary_op>
    ee40:	4603      	mov	r3, r0
}
    ee42:	4618      	mov	r0, r3
    ee44:	3718      	adds	r7, #24
    ee46:	46bd      	mov	sp, r7
    ee48:	bd80      	pop	{r7, pc}

0000ee4a <mp_obj_new_dict_view>:
    .print = dict_view_print,
    .binary_op = dict_view_binary_op,
    .getiter = dict_view_getiter,
};

STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    ee4a:	b580      	push	{r7, lr}
    ee4c:	b084      	sub	sp, #16
    ee4e:	af00      	add	r7, sp, #0
    ee50:	6078      	str	r0, [r7, #4]
    ee52:	6039      	str	r1, [r7, #0]
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    ee54:	200c      	movs	r0, #12
    ee56:	f7f1 fa61 	bl	31c <m_malloc>
    ee5a:	60f8      	str	r0, [r7, #12]
    o->base.type = &dict_view_type;
    ee5c:	68fb      	ldr	r3, [r7, #12]
    ee5e:	4a06      	ldr	r2, [pc, #24]	; (ee78 <mp_obj_new_dict_view+0x2e>)
    ee60:	601a      	str	r2, [r3, #0]
    o->dict = dict;
    ee62:	68fb      	ldr	r3, [r7, #12]
    ee64:	687a      	ldr	r2, [r7, #4]
    ee66:	605a      	str	r2, [r3, #4]
    o->kind = kind;
    ee68:	68fb      	ldr	r3, [r7, #12]
    ee6a:	683a      	ldr	r2, [r7, #0]
    ee6c:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    ee6e:	68fb      	ldr	r3, [r7, #12]
}
    ee70:	4618      	mov	r0, r3
    ee72:	3710      	adds	r7, #16
    ee74:	46bd      	mov	sp, r7
    ee76:	bd80      	pop	{r7, pc}
    ee78:	00021554 	.word	0x00021554

0000ee7c <dict_view>:

STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    ee7c:	b580      	push	{r7, lr}
    ee7e:	b082      	sub	sp, #8
    ee80:	af00      	add	r7, sp, #0
    ee82:	6078      	str	r0, [r7, #4]
    ee84:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ee86:	6878      	ldr	r0, [r7, #4]
    ee88:	f7ff fa32 	bl	e2f0 <MP_OBJ_IS_OBJ>
    ee8c:	4603      	mov	r3, r0
    ee8e:	2b00      	cmp	r3, #0
    ee90:	d005      	beq.n	ee9e <dict_view+0x22>
    ee92:	687b      	ldr	r3, [r7, #4]
    ee94:	681b      	ldr	r3, [r3, #0]
    ee96:	68db      	ldr	r3, [r3, #12]
    ee98:	4a09      	ldr	r2, [pc, #36]	; (eec0 <dict_view+0x44>)
    ee9a:	4293      	cmp	r3, r2
    ee9c:	d006      	beq.n	eeac <dict_view+0x30>
    ee9e:	4b09      	ldr	r3, [pc, #36]	; (eec4 <dict_view+0x48>)
    eea0:	4a09      	ldr	r2, [pc, #36]	; (eec8 <dict_view+0x4c>)
    eea2:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    eea6:	4809      	ldr	r0, [pc, #36]	; (eecc <dict_view+0x50>)
    eea8:	f00c f99c 	bl	1b1e4 <__assert_func>
    return mp_obj_new_dict_view(self_in, kind);
    eeac:	6839      	ldr	r1, [r7, #0]
    eeae:	6878      	ldr	r0, [r7, #4]
    eeb0:	f7ff ffcb 	bl	ee4a <mp_obj_new_dict_view>
    eeb4:	4603      	mov	r3, r0
}
    eeb6:	4618      	mov	r0, r3
    eeb8:	3708      	adds	r7, #8
    eeba:	46bd      	mov	sp, r7
    eebc:	bd80      	pop	{r7, pc}
    eebe:	bf00      	nop
    eec0:	0000e475 	.word	0x0000e475
    eec4:	000213dc 	.word	0x000213dc
    eec8:	00021870 	.word	0x00021870
    eecc:	0002143c 	.word	0x0002143c

0000eed0 <dict_items>:

STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    eed0:	b580      	push	{r7, lr}
    eed2:	b082      	sub	sp, #8
    eed4:	af00      	add	r7, sp, #0
    eed6:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    eed8:	2100      	movs	r1, #0
    eeda:	6878      	ldr	r0, [r7, #4]
    eedc:	f7ff ffce 	bl	ee7c <dict_view>
    eee0:	4603      	mov	r3, r0
}
    eee2:	4618      	mov	r0, r3
    eee4:	3708      	adds	r7, #8
    eee6:	46bd      	mov	sp, r7
    eee8:	bd80      	pop	{r7, pc}

0000eeea <dict_keys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_items_obj, dict_items);

STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    eeea:	b580      	push	{r7, lr}
    eeec:	b082      	sub	sp, #8
    eeee:	af00      	add	r7, sp, #0
    eef0:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    eef2:	2101      	movs	r1, #1
    eef4:	6878      	ldr	r0, [r7, #4]
    eef6:	f7ff ffc1 	bl	ee7c <dict_view>
    eefa:	4603      	mov	r3, r0
}
    eefc:	4618      	mov	r0, r3
    eefe:	3708      	adds	r7, #8
    ef00:	46bd      	mov	sp, r7
    ef02:	bd80      	pop	{r7, pc}

0000ef04 <dict_values>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_keys_obj, dict_keys);

STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    ef04:	b580      	push	{r7, lr}
    ef06:	b082      	sub	sp, #8
    ef08:	af00      	add	r7, sp, #0
    ef0a:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    ef0c:	2102      	movs	r1, #2
    ef0e:	6878      	ldr	r0, [r7, #4]
    ef10:	f7ff ffb4 	bl	ee7c <dict_view>
    ef14:	4603      	mov	r3, r0
}
    ef16:	4618      	mov	r0, r3
    ef18:	3708      	adds	r7, #8
    ef1a:	46bd      	mov	sp, r7
    ef1c:	bd80      	pop	{r7, pc}

0000ef1e <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    ef1e:	b580      	push	{r7, lr}
    ef20:	b084      	sub	sp, #16
    ef22:	af00      	add	r7, sp, #0
    ef24:	6078      	str	r0, [r7, #4]
    ef26:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ef28:	6878      	ldr	r0, [r7, #4]
    ef2a:	f7ff f9e1 	bl	e2f0 <MP_OBJ_IS_OBJ>
    ef2e:	4603      	mov	r3, r0
    ef30:	2b00      	cmp	r3, #0
    ef32:	d005      	beq.n	ef40 <dict_getiter+0x22>
    ef34:	687b      	ldr	r3, [r7, #4]
    ef36:	681b      	ldr	r3, [r3, #0]
    ef38:	68db      	ldr	r3, [r3, #12]
    ef3a:	4a0e      	ldr	r2, [pc, #56]	; (ef74 <dict_getiter+0x56>)
    ef3c:	4293      	cmp	r3, r2
    ef3e:	d006      	beq.n	ef4e <dict_getiter+0x30>
    ef40:	4b0d      	ldr	r3, [pc, #52]	; (ef78 <dict_getiter+0x5a>)
    ef42:	4a0e      	ldr	r2, [pc, #56]	; (ef7c <dict_getiter+0x5e>)
    ef44:	f44f 7101 	mov.w	r1, #516	; 0x204
    ef48:	480d      	ldr	r0, [pc, #52]	; (ef80 <dict_getiter+0x62>)
    ef4a:	f00c f94b 	bl	1b1e4 <__assert_func>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    ef4e:	683b      	ldr	r3, [r7, #0]
    ef50:	60fb      	str	r3, [r7, #12]
    o->base.type = &dict_view_it_type;
    ef52:	68fb      	ldr	r3, [r7, #12]
    ef54:	4a0b      	ldr	r2, [pc, #44]	; (ef84 <dict_getiter+0x66>)
    ef56:	601a      	str	r2, [r3, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    ef58:	68fb      	ldr	r3, [r7, #12]
    ef5a:	2201      	movs	r2, #1
    ef5c:	605a      	str	r2, [r3, #4]
    o->dict = self_in;
    ef5e:	68fb      	ldr	r3, [r7, #12]
    ef60:	687a      	ldr	r2, [r7, #4]
    ef62:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    ef64:	68fb      	ldr	r3, [r7, #12]
    ef66:	2200      	movs	r2, #0
    ef68:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    ef6a:	68fb      	ldr	r3, [r7, #12]
}
    ef6c:	4618      	mov	r0, r3
    ef6e:	3710      	adds	r7, #16
    ef70:	46bd      	mov	sp, r7
    ef72:	bd80      	pop	{r7, pc}
    ef74:	0000e475 	.word	0x0000e475
    ef78:	000213dc 	.word	0x000213dc
    ef7c:	0002187c 	.word	0x0002187c
    ef80:	0002143c 	.word	0x0002143c
    ef84:	00021590 	.word	0x00021590

0000ef88 <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    ef88:	b580      	push	{r7, lr}
    ef8a:	b082      	sub	sp, #8
    ef8c:	af00      	add	r7, sp, #0
    ef8e:	6078      	str	r0, [r7, #4]
    ef90:	6039      	str	r1, [r7, #0]
    dict->base.type = &mp_type_dict;
    ef92:	687b      	ldr	r3, [r7, #4]
    ef94:	4a05      	ldr	r2, [pc, #20]	; (efac <mp_obj_dict_init+0x24>)
    ef96:	601a      	str	r2, [r3, #0]
    mp_map_init(&dict->map, n_args);
    ef98:	687b      	ldr	r3, [r7, #4]
    ef9a:	3304      	adds	r3, #4
    ef9c:	6839      	ldr	r1, [r7, #0]
    ef9e:	4618      	mov	r0, r3
    efa0:	f7fe f900 	bl	d1a4 <mp_map_init>
}
    efa4:	bf00      	nop
    efa6:	3708      	adds	r7, #8
    efa8:	46bd      	mov	sp, r7
    efaa:	bd80      	pop	{r7, pc}
    efac:	000217b4 	.word	0x000217b4

0000efb0 <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    efb0:	b580      	push	{r7, lr}
    efb2:	b084      	sub	sp, #16
    efb4:	af00      	add	r7, sp, #0
    efb6:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    efb8:	2010      	movs	r0, #16
    efba:	f7f1 f9af 	bl	31c <m_malloc>
    efbe:	60f8      	str	r0, [r7, #12]
    mp_obj_dict_init(o, n_args);
    efc0:	6879      	ldr	r1, [r7, #4]
    efc2:	68f8      	ldr	r0, [r7, #12]
    efc4:	f7ff ffe0 	bl	ef88 <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
    efc8:	68fb      	ldr	r3, [r7, #12]
}
    efca:	4618      	mov	r0, r3
    efcc:	3710      	adds	r7, #16
    efce:	46bd      	mov	sp, r7
    efd0:	bd80      	pop	{r7, pc}

0000efd2 <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    efd2:	b480      	push	{r7}
    efd4:	b085      	sub	sp, #20
    efd6:	af00      	add	r7, sp, #0
    efd8:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    efda:	687b      	ldr	r3, [r7, #4]
    efdc:	60fb      	str	r3, [r7, #12]
    return self->map.used;
    efde:	68fb      	ldr	r3, [r7, #12]
    efe0:	685b      	ldr	r3, [r3, #4]
    efe2:	f3c3 03dc 	ubfx	r3, r3, #3, #29
}
    efe6:	4618      	mov	r0, r3
    efe8:	3714      	adds	r7, #20
    efea:	46bd      	mov	sp, r7
    efec:	f85d 7b04 	ldr.w	r7, [sp], #4
    eff0:	4770      	bx	lr

0000eff2 <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    eff2:	b580      	push	{r7, lr}
    eff4:	b086      	sub	sp, #24
    eff6:	af00      	add	r7, sp, #0
    eff8:	60f8      	str	r0, [r7, #12]
    effa:	60b9      	str	r1, [r7, #8]
    effc:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    effe:	68f8      	ldr	r0, [r7, #12]
    f000:	f7ff f976 	bl	e2f0 <MP_OBJ_IS_OBJ>
    f004:	4603      	mov	r3, r0
    f006:	2b00      	cmp	r3, #0
    f008:	d005      	beq.n	f016 <mp_obj_dict_store+0x24>
    f00a:	68fb      	ldr	r3, [r7, #12]
    f00c:	681b      	ldr	r3, [r3, #0]
    f00e:	68db      	ldr	r3, [r3, #12]
    f010:	4a0e      	ldr	r2, [pc, #56]	; (f04c <mp_obj_dict_store+0x5a>)
    f012:	4293      	cmp	r3, r2
    f014:	d006      	beq.n	f024 <mp_obj_dict_store+0x32>
    f016:	4b0e      	ldr	r3, [pc, #56]	; (f050 <mp_obj_dict_store+0x5e>)
    f018:	4a0e      	ldr	r2, [pc, #56]	; (f054 <mp_obj_dict_store+0x62>)
    f01a:	f240 214f 	movw	r1, #591	; 0x24f
    f01e:	480e      	ldr	r0, [pc, #56]	; (f058 <mp_obj_dict_store+0x66>)
    f020:	f00c f8e0 	bl	1b1e4 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f024:	68fb      	ldr	r3, [r7, #12]
    f026:	617b      	str	r3, [r7, #20]
    mp_ensure_not_fixed(self);
    f028:	6978      	ldr	r0, [r7, #20]
    f02a:	f7ff fb4b 	bl	e6c4 <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f02e:	697b      	ldr	r3, [r7, #20]
    f030:	3304      	adds	r3, #4
    f032:	2201      	movs	r2, #1
    f034:	68b9      	ldr	r1, [r7, #8]
    f036:	4618      	mov	r0, r3
    f038:	f7fe f9ac 	bl	d394 <mp_map_lookup>
    f03c:	4602      	mov	r2, r0
    f03e:	687b      	ldr	r3, [r7, #4]
    f040:	6053      	str	r3, [r2, #4]
    return self_in;
    f042:	68fb      	ldr	r3, [r7, #12]
}
    f044:	4618      	mov	r0, r3
    f046:	3718      	adds	r7, #24
    f048:	46bd      	mov	sp, r7
    f04a:	bd80      	pop	{r7, pc}
    f04c:	0000e475 	.word	0x0000e475
    f050:	000213dc 	.word	0x000213dc
    f054:	0002188c 	.word	0x0002188c
    f058:	0002143c 	.word	0x0002143c

0000f05c <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    f05c:	b580      	push	{r7, lr}
    f05e:	b084      	sub	sp, #16
    f060:	af00      	add	r7, sp, #0
    f062:	6078      	str	r0, [r7, #4]
    f064:	6039      	str	r1, [r7, #0]
    mp_obj_t args[2] = {self_in, key};
    f066:	687b      	ldr	r3, [r7, #4]
    f068:	60bb      	str	r3, [r7, #8]
    f06a:	683b      	ldr	r3, [r7, #0]
    f06c:	60fb      	str	r3, [r7, #12]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    f06e:	f107 0308 	add.w	r3, r7, #8
    f072:	2202      	movs	r2, #2
    f074:	4619      	mov	r1, r3
    f076:	2002      	movs	r0, #2
    f078:	f7ff fc0c 	bl	e894 <dict_get_helper>
    return self_in;
    f07c:	687b      	ldr	r3, [r7, #4]
}
    f07e:	4618      	mov	r0, r3
    f080:	3710      	adds	r7, #16
    f082:	46bd      	mov	sp, r7
    f084:	bd80      	pop	{r7, pc}
    f086:	bf00      	nop

0000f088 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    f088:	b480      	push	{r7}
    f08a:	b083      	sub	sp, #12
    f08c:	af00      	add	r7, sp, #0
    f08e:	6078      	str	r0, [r7, #4]
    f090:	687b      	ldr	r3, [r7, #4]
    f092:	f003 0303 	and.w	r3, r3, #3
    f096:	2b00      	cmp	r3, #0
    f098:	bf0c      	ite	eq
    f09a:	2301      	moveq	r3, #1
    f09c:	2300      	movne	r3, #0
    f09e:	b2db      	uxtb	r3, r3
    f0a0:	4618      	mov	r0, r3
    f0a2:	370c      	adds	r7, #12
    f0a4:	46bd      	mov	sp, r7
    f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    f0aa:	4770      	bx	lr

0000f0ac <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    f0ac:	b580      	push	{r7, lr}
    f0ae:	b088      	sub	sp, #32
    f0b0:	af00      	add	r7, sp, #0
    f0b2:	60f8      	str	r0, [r7, #12]
    f0b4:	60b9      	str	r1, [r7, #8]
    f0b6:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    f0b8:	68bb      	ldr	r3, [r7, #8]
    f0ba:	61fb      	str	r3, [r7, #28]
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    f0bc:	687b      	ldr	r3, [r7, #4]
    f0be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f0c2:	61bb      	str	r3, [r7, #24]
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    f0c4:	687b      	ldr	r3, [r7, #4]
    f0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f0ca:	2b00      	cmp	r3, #0
    f0cc:	bf14      	ite	ne
    f0ce:	2301      	movne	r3, #1
    f0d0:	2300      	moveq	r3, #0
    f0d2:	75fb      	strb	r3, [r7, #23]
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    f0d4:	7dfb      	ldrb	r3, [r7, #23]
    f0d6:	f083 0301 	eor.w	r3, r3, #1
    f0da:	b2db      	uxtb	r3, r3
    f0dc:	2b00      	cmp	r3, #0
    f0de:	d010      	beq.n	f102 <mp_obj_exception_print+0x56>
    f0e0:	69bb      	ldr	r3, [r7, #24]
    f0e2:	2b01      	cmp	r3, #1
    f0e4:	d002      	beq.n	f0ec <mp_obj_exception_print+0x40>
    f0e6:	69bb      	ldr	r3, [r7, #24]
    f0e8:	2b02      	cmp	r3, #2
    f0ea:	d10a      	bne.n	f102 <mp_obj_exception_print+0x56>
        mp_print_str(print, qstr_str(o->base.type->name));
    f0ec:	69fb      	ldr	r3, [r7, #28]
    f0ee:	681b      	ldr	r3, [r3, #0]
    f0f0:	88db      	ldrh	r3, [r3, #6]
    f0f2:	4618      	mov	r0, r3
    f0f4:	f7f2 f87c 	bl	11f0 <qstr_str>
    f0f8:	4603      	mov	r3, r0
    f0fa:	4619      	mov	r1, r3
    f0fc:	68f8      	ldr	r0, [r7, #12]
    f0fe:	f7f2 fbb5 	bl	186c <mp_print_str>
    }

    if (k == PRINT_EXC) {
    f102:	69bb      	ldr	r3, [r7, #24]
    f104:	2b02      	cmp	r3, #2
    f106:	d103      	bne.n	f110 <mp_obj_exception_print+0x64>
        mp_print_str(print, ": ");
    f108:	4917      	ldr	r1, [pc, #92]	; (f168 <mp_obj_exception_print+0xbc>)
    f10a:	68f8      	ldr	r0, [r7, #12]
    f10c:	f7f2 fbae 	bl	186c <mp_print_str>
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    f110:	69bb      	ldr	r3, [r7, #24]
    f112:	2b00      	cmp	r3, #0
    f114:	d002      	beq.n	f11c <mp_obj_exception_print+0x70>
    f116:	69bb      	ldr	r3, [r7, #24]
    f118:	2b02      	cmp	r3, #2
    f11a:	d11b      	bne.n	f154 <mp_obj_exception_print+0xa8>
        if (o->args == NULL || o->args->len == 0) {
    f11c:	69fb      	ldr	r3, [r7, #28]
    f11e:	68db      	ldr	r3, [r3, #12]
    f120:	2b00      	cmp	r3, #0
    f122:	d004      	beq.n	f12e <mp_obj_exception_print+0x82>
    f124:	69fb      	ldr	r3, [r7, #28]
    f126:	68db      	ldr	r3, [r3, #12]
    f128:	685b      	ldr	r3, [r3, #4]
    f12a:	2b00      	cmp	r3, #0
    f12c:	d104      	bne.n	f138 <mp_obj_exception_print+0x8c>
            mp_print_str(print, "");
    f12e:	490f      	ldr	r1, [pc, #60]	; (f16c <mp_obj_exception_print+0xc0>)
    f130:	68f8      	ldr	r0, [r7, #12]
    f132:	f7f2 fb9b 	bl	186c <mp_print_str>
            return;
    f136:	e014      	b.n	f162 <mp_obj_exception_print+0xb6>
        } else if (o->args->len == 1) {
    f138:	69fb      	ldr	r3, [r7, #28]
    f13a:	68db      	ldr	r3, [r3, #12]
    f13c:	685b      	ldr	r3, [r3, #4]
    f13e:	2b01      	cmp	r3, #1
    f140:	d108      	bne.n	f154 <mp_obj_exception_print+0xa8>
                    mp_printf(print, "[Errno " INT_FMT "] %q", MP_OBJ_SMALL_INT_VALUE(o->args->items[0]), qst);
                    return;
                }
            }
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    f142:	69fb      	ldr	r3, [r7, #28]
    f144:	68db      	ldr	r3, [r3, #12]
    f146:	689b      	ldr	r3, [r3, #8]
    f148:	2200      	movs	r2, #0
    f14a:	4619      	mov	r1, r3
    f14c:	68f8      	ldr	r0, [r7, #12]
    f14e:	f7fe fafc 	bl	d74a <mp_obj_print_helper>
            return;
    f152:	e006      	b.n	f162 <mp_obj_exception_print+0xb6>
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    f154:	69fb      	ldr	r3, [r7, #28]
    f156:	68db      	ldr	r3, [r3, #12]
    f158:	687a      	ldr	r2, [r7, #4]
    f15a:	4619      	mov	r1, r3
    f15c:	68f8      	ldr	r0, [r7, #12]
    f15e:	f006 f9df 	bl	15520 <mp_obj_tuple_print>
}
    f162:	3720      	adds	r7, #32
    f164:	46bd      	mov	sp, r7
    f166:	bd80      	pop	{r7, pc}
    f168:	000218b0 	.word	0x000218b0
    f16c:	000218b4 	.word	0x000218b4

0000f170 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f170:	b580      	push	{r7, lr}
    f172:	b088      	sub	sp, #32
    f174:	af02      	add	r7, sp, #8
    f176:	60f8      	str	r0, [r7, #12]
    f178:	60b9      	str	r1, [r7, #8]
    f17a:	607a      	str	r2, [r7, #4]
    f17c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    f17e:	2300      	movs	r3, #0
    f180:	9300      	str	r3, [sp, #0]
    f182:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f186:	2200      	movs	r2, #0
    f188:	6879      	ldr	r1, [r7, #4]
    f18a:	68b8      	ldr	r0, [r7, #8]
    f18c:	f7fd febc 	bl	cf08 <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    f190:	2010      	movs	r0, #16
    f192:	f7f1 f8da 	bl	34a <m_malloc_maybe>
    f196:	6178      	str	r0, [r7, #20]
    if (o_exc == NULL) {
    f198:	697b      	ldr	r3, [r7, #20]
    f19a:	2b00      	cmp	r3, #0
    f19c:	d101      	bne.n	f1a2 <mp_obj_exception_make_new+0x32>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    f19e:	4b19      	ldr	r3, [pc, #100]	; (f204 <mp_obj_exception_make_new+0x94>)
    f1a0:	617b      	str	r3, [r7, #20]
    }

    // Populate the exception object
    o_exc->base.type = type;
    f1a2:	697b      	ldr	r3, [r7, #20]
    f1a4:	68fa      	ldr	r2, [r7, #12]
    f1a6:	601a      	str	r2, [r3, #0]
    o_exc->traceback_data = NULL;
    f1a8:	697b      	ldr	r3, [r7, #20]
    f1aa:	2200      	movs	r2, #0
    f1ac:	609a      	str	r2, [r3, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    f1ae:	68bb      	ldr	r3, [r7, #8]
    f1b0:	2b00      	cmp	r3, #0
    f1b2:	d102      	bne.n	f1ba <mp_obj_exception_make_new+0x4a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f1b4:	4b14      	ldr	r3, [pc, #80]	; (f208 <mp_obj_exception_make_new+0x98>)
    f1b6:	613b      	str	r3, [r7, #16]
    f1b8:	e01b      	b.n	f1f2 <mp_obj_exception_make_new+0x82>
    } else {
        // Try to allocate memory for the tuple containing the args
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    f1ba:	68bb      	ldr	r3, [r7, #8]
    f1bc:	3302      	adds	r3, #2
    f1be:	009b      	lsls	r3, r3, #2
    f1c0:	4618      	mov	r0, r3
    f1c2:	f7f1 f8c2 	bl	34a <m_malloc_maybe>
    f1c6:	6138      	str	r0, [r7, #16]
            o_tuple = (mp_obj_tuple_t*)
                ((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf) + EMG_TRACEBACK_ALLOC * sizeof(size_t));
        }
        #endif

        if (o_tuple == NULL) {
    f1c8:	693b      	ldr	r3, [r7, #16]
    f1ca:	2b00      	cmp	r3, #0
    f1cc:	d102      	bne.n	f1d4 <mp_obj_exception_make_new+0x64>
            // No memory for a tuple, fallback to an empty tuple
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f1ce:	4b0e      	ldr	r3, [pc, #56]	; (f208 <mp_obj_exception_make_new+0x98>)
    f1d0:	613b      	str	r3, [r7, #16]
    f1d2:	e00e      	b.n	f1f2 <mp_obj_exception_make_new+0x82>
        } else {
            // Have memory for a tuple so populate it
            o_tuple->base.type = &mp_type_tuple;
    f1d4:	693b      	ldr	r3, [r7, #16]
    f1d6:	4a0d      	ldr	r2, [pc, #52]	; (f20c <mp_obj_exception_make_new+0x9c>)
    f1d8:	601a      	str	r2, [r3, #0]
            o_tuple->len = n_args;
    f1da:	693b      	ldr	r3, [r7, #16]
    f1dc:	68ba      	ldr	r2, [r7, #8]
    f1de:	605a      	str	r2, [r3, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    f1e0:	693b      	ldr	r3, [r7, #16]
    f1e2:	f103 0008 	add.w	r0, r3, #8
    f1e6:	68bb      	ldr	r3, [r7, #8]
    f1e8:	009b      	lsls	r3, r3, #2
    f1ea:	461a      	mov	r2, r3
    f1ec:	6839      	ldr	r1, [r7, #0]
    f1ee:	f00d f9b7 	bl	1c560 <memcpy>
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    f1f2:	697b      	ldr	r3, [r7, #20]
    f1f4:	693a      	ldr	r2, [r7, #16]
    f1f6:	60da      	str	r2, [r3, #12]

    return MP_OBJ_FROM_PTR(o_exc);
    f1f8:	697b      	ldr	r3, [r7, #20]
}
    f1fa:	4618      	mov	r0, r3
    f1fc:	3718      	adds	r7, #24
    f1fe:	46bd      	mov	sp, r7
    f200:	bd80      	pop	{r7, pc}
    f202:	bf00      	nop
    f204:	20001254 	.word	0x20001254
    f208:	000234c4 	.word	0x000234c4
    f20c:	00023488 	.word	0x00023488

0000f210 <mp_obj_exception_get_value>:

// Get exception "value" - that is, first argument, or None
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in) {
    f210:	b480      	push	{r7}
    f212:	b085      	sub	sp, #20
    f214:	af00      	add	r7, sp, #0
    f216:	6078      	str	r0, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f218:	687b      	ldr	r3, [r7, #4]
    f21a:	60fb      	str	r3, [r7, #12]
    if (self->args->len == 0) {
    f21c:	68fb      	ldr	r3, [r7, #12]
    f21e:	68db      	ldr	r3, [r3, #12]
    f220:	685b      	ldr	r3, [r3, #4]
    f222:	2b00      	cmp	r3, #0
    f224:	d101      	bne.n	f22a <mp_obj_exception_get_value+0x1a>
        return mp_const_none;
    f226:	4b05      	ldr	r3, [pc, #20]	; (f23c <mp_obj_exception_get_value+0x2c>)
    f228:	e002      	b.n	f230 <mp_obj_exception_get_value+0x20>
    } else {
        return self->args->items[0];
    f22a:	68fb      	ldr	r3, [r7, #12]
    f22c:	68db      	ldr	r3, [r3, #12]
    f22e:	689b      	ldr	r3, [r3, #8]
    }
}
    f230:	4618      	mov	r0, r3
    f232:	3714      	adds	r7, #20
    f234:	46bd      	mov	sp, r7
    f236:	f85d 7b04 	ldr.w	r7, [sp], #4
    f23a:	4770      	bx	lr
    f23c:	00022b54 	.word	0x00022b54

0000f240 <mp_obj_exception_attr>:

void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    f240:	b580      	push	{r7, lr}
    f242:	b086      	sub	sp, #24
    f244:	af00      	add	r7, sp, #0
    f246:	60f8      	str	r0, [r7, #12]
    f248:	60b9      	str	r1, [r7, #8]
    f24a:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f24c:	68fb      	ldr	r3, [r7, #12]
    f24e:	617b      	str	r3, [r7, #20]
    if (dest[0] != MP_OBJ_NULL) {
    f250:	687b      	ldr	r3, [r7, #4]
    f252:	681b      	ldr	r3, [r3, #0]
    f254:	2b00      	cmp	r3, #0
    f256:	d00f      	beq.n	f278 <mp_obj_exception_attr+0x38>
        // store/delete attribute
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    f258:	68bb      	ldr	r3, [r7, #8]
    f25a:	2b25      	cmp	r3, #37	; 0x25
    f25c:	d124      	bne.n	f2a8 <mp_obj_exception_attr+0x68>
    f25e:	687b      	ldr	r3, [r7, #4]
    f260:	3304      	adds	r3, #4
    f262:	681b      	ldr	r3, [r3, #0]
    f264:	4a12      	ldr	r2, [pc, #72]	; (f2b0 <mp_obj_exception_attr+0x70>)
    f266:	4293      	cmp	r3, r2
    f268:	d11e      	bne.n	f2a8 <mp_obj_exception_attr+0x68>
            // optimization of pre-allocating exception instance and raising
            // it repeatedly - this avoids memory allocation during raise.
            // However, uPy will keep adding traceback entries to such
            // exception instance, so before throwing it, traceback should
            // be cleared like above.
            self->traceback_len = 0;
    f26a:	697b      	ldr	r3, [r7, #20]
    f26c:	2200      	movs	r2, #0
    f26e:	80da      	strh	r2, [r3, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    f270:	687b      	ldr	r3, [r7, #4]
    f272:	2200      	movs	r2, #0
    f274:	601a      	str	r2, [r3, #0]
        }
        return;
    f276:	e017      	b.n	f2a8 <mp_obj_exception_attr+0x68>
    }
    if (attr == MP_QSTR_args) {
    f278:	68bb      	ldr	r3, [r7, #8]
    f27a:	2bec      	cmp	r3, #236	; 0xec
    f27c:	d104      	bne.n	f288 <mp_obj_exception_attr+0x48>
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    f27e:	697b      	ldr	r3, [r7, #20]
    f280:	68da      	ldr	r2, [r3, #12]
    f282:	687b      	ldr	r3, [r7, #4]
    f284:	601a      	str	r2, [r3, #0]
    f286:	e010      	b.n	f2aa <mp_obj_exception_attr+0x6a>
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    f288:	697b      	ldr	r3, [r7, #20]
    f28a:	681b      	ldr	r3, [r3, #0]
    f28c:	4a09      	ldr	r2, [pc, #36]	; (f2b4 <mp_obj_exception_attr+0x74>)
    f28e:	4293      	cmp	r3, r2
    f290:	d10b      	bne.n	f2aa <mp_obj_exception_attr+0x6a>
    f292:	68bb      	ldr	r3, [r7, #8]
    f294:	f5b3 7fba 	cmp.w	r3, #372	; 0x174
    f298:	d107      	bne.n	f2aa <mp_obj_exception_attr+0x6a>
        dest[0] = mp_obj_exception_get_value(self_in);
    f29a:	68f8      	ldr	r0, [r7, #12]
    f29c:	f7ff ffb8 	bl	f210 <mp_obj_exception_get_value>
    f2a0:	4602      	mov	r2, r0
    f2a2:	687b      	ldr	r3, [r7, #4]
    f2a4:	601a      	str	r2, [r3, #0]
    f2a6:	e000      	b.n	f2aa <mp_obj_exception_attr+0x6a>
        return;
    f2a8:	bf00      	nop
    }
}
    f2aa:	3718      	adds	r7, #24
    f2ac:	46bd      	mov	sp, r7
    f2ae:	bd80      	pop	{r7, pc}
    f2b0:	00022b54 	.word	0x00022b54
    f2b4:	000219e4 	.word	0x000219e4

0000f2b8 <mp_obj_new_exception>:
    MP_DEFINE_EXCEPTION(UnicodeWarning, Warning)
    MP_DEFINE_EXCEPTION(BytesWarning, Warning)
    MP_DEFINE_EXCEPTION(ResourceWarning, Warning)
    */

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    f2b8:	b580      	push	{r7, lr}
    f2ba:	b082      	sub	sp, #8
    f2bc:	af00      	add	r7, sp, #0
    f2be:	6078      	str	r0, [r7, #4]
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    f2c0:	2200      	movs	r2, #0
    f2c2:	2100      	movs	r1, #0
    f2c4:	6878      	ldr	r0, [r7, #4]
    f2c6:	f000 f815 	bl	f2f4 <mp_obj_new_exception_args>
    f2ca:	4603      	mov	r3, r0
}
    f2cc:	4618      	mov	r0, r3
    f2ce:	3708      	adds	r7, #8
    f2d0:	46bd      	mov	sp, r7
    f2d2:	bd80      	pop	{r7, pc}

0000f2d4 <mp_obj_new_exception_arg1>:

// "Optimized" version for common(?) case of having 1 exception arg
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    f2d4:	b580      	push	{r7, lr}
    f2d6:	b082      	sub	sp, #8
    f2d8:	af00      	add	r7, sp, #0
    f2da:	6078      	str	r0, [r7, #4]
    f2dc:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    f2de:	463b      	mov	r3, r7
    f2e0:	461a      	mov	r2, r3
    f2e2:	2101      	movs	r1, #1
    f2e4:	6878      	ldr	r0, [r7, #4]
    f2e6:	f000 f805 	bl	f2f4 <mp_obj_new_exception_args>
    f2ea:	4603      	mov	r3, r0
}
    f2ec:	4618      	mov	r0, r3
    f2ee:	3708      	adds	r7, #8
    f2f0:	46bd      	mov	sp, r7
    f2f2:	bd80      	pop	{r7, pc}

0000f2f4 <mp_obj_new_exception_args>:

mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    f2f4:	b590      	push	{r4, r7, lr}
    f2f6:	b085      	sub	sp, #20
    f2f8:	af00      	add	r7, sp, #0
    f2fa:	60f8      	str	r0, [r7, #12]
    f2fc:	60b9      	str	r1, [r7, #8]
    f2fe:	607a      	str	r2, [r7, #4]
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f300:	68fb      	ldr	r3, [r7, #12]
    f302:	68db      	ldr	r3, [r3, #12]
    f304:	4a0a      	ldr	r2, [pc, #40]	; (f330 <mp_obj_new_exception_args+0x3c>)
    f306:	4293      	cmp	r3, r2
    f308:	d006      	beq.n	f318 <mp_obj_new_exception_args+0x24>
    f30a:	4b0a      	ldr	r3, [pc, #40]	; (f334 <mp_obj_new_exception_args+0x40>)
    f30c:	4a0a      	ldr	r2, [pc, #40]	; (f338 <mp_obj_new_exception_args+0x44>)
    f30e:	f240 1137 	movw	r1, #311	; 0x137
    f312:	480a      	ldr	r0, [pc, #40]	; (f33c <mp_obj_new_exception_args+0x48>)
    f314:	f00b ff66 	bl	1b1e4 <__assert_func>
    return exc_type->make_new(exc_type, n_args, 0, args);
    f318:	68fb      	ldr	r3, [r7, #12]
    f31a:	68dc      	ldr	r4, [r3, #12]
    f31c:	687b      	ldr	r3, [r7, #4]
    f31e:	2200      	movs	r2, #0
    f320:	68b9      	ldr	r1, [r7, #8]
    f322:	68f8      	ldr	r0, [r7, #12]
    f324:	47a0      	blx	r4
    f326:	4603      	mov	r3, r0
}
    f328:	4618      	mov	r0, r3
    f32a:	3714      	adds	r7, #20
    f32c:	46bd      	mov	sp, r7
    f32e:	bd90      	pop	{r4, r7, pc}
    f330:	0000f171 	.word	0x0000f171
    f334:	00021e94 	.word	0x00021e94
    f338:	00021f10 	.word	0x00021f10
    f33c:	00021ec4 	.word	0x00021ec4

0000f340 <mp_obj_new_exception_msg>:

mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    f340:	b580      	push	{r7, lr}
    f342:	b082      	sub	sp, #8
    f344:	af00      	add	r7, sp, #0
    f346:	6078      	str	r0, [r7, #4]
    f348:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    f34a:	6839      	ldr	r1, [r7, #0]
    f34c:	6878      	ldr	r0, [r7, #4]
    f34e:	f000 f857 	bl	f400 <mp_obj_new_exception_msg_varg>
    f352:	4603      	mov	r3, r0
}
    f354:	4618      	mov	r0, r3
    f356:	3708      	adds	r7, #8
    f358:	46bd      	mov	sp, r7
    f35a:	bd80      	pop	{r7, pc}

0000f35c <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    f35c:	b580      	push	{r7, lr}
    f35e:	b088      	sub	sp, #32
    f360:	af00      	add	r7, sp, #0
    f362:	60f8      	str	r0, [r7, #12]
    f364:	60b9      	str	r1, [r7, #8]
    f366:	607a      	str	r2, [r7, #4]
    struct _exc_printer_t *pr = data;
    f368:	68fb      	ldr	r3, [r7, #12]
    f36a:	61fb      	str	r3, [r7, #28]
    if (pr->len + len >= pr->alloc) {
    f36c:	69fb      	ldr	r3, [r7, #28]
    f36e:	689a      	ldr	r2, [r3, #8]
    f370:	687b      	ldr	r3, [r7, #4]
    f372:	441a      	add	r2, r3
    f374:	69fb      	ldr	r3, [r7, #28]
    f376:	685b      	ldr	r3, [r3, #4]
    f378:	429a      	cmp	r2, r3
    f37a:	d32d      	bcc.n	f3d8 <exc_add_strn+0x7c>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    f37c:	69fb      	ldr	r3, [r7, #28]
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	2b00      	cmp	r3, #0
    f382:	d022      	beq.n	f3ca <exc_add_strn+0x6e>
            size_t new_alloc = pr->alloc + len + 16;
    f384:	69fb      	ldr	r3, [r7, #28]
    f386:	685a      	ldr	r2, [r3, #4]
    f388:	687b      	ldr	r3, [r7, #4]
    f38a:	4413      	add	r3, r2
    f38c:	3310      	adds	r3, #16
    f38e:	61bb      	str	r3, [r7, #24]
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    f390:	69fb      	ldr	r3, [r7, #28]
    f392:	68db      	ldr	r3, [r3, #12]
    f394:	2201      	movs	r2, #1
    f396:	69b9      	ldr	r1, [r7, #24]
    f398:	4618      	mov	r0, r3
    f39a:	f7f1 f80a 	bl	3b2 <m_realloc_maybe>
    f39e:	6178      	str	r0, [r7, #20]
            if (new_buf == NULL) {
    f3a0:	697b      	ldr	r3, [r7, #20]
    f3a2:	2b00      	cmp	r3, #0
    f3a4:	d10a      	bne.n	f3bc <exc_add_strn+0x60>
                pr->allow_realloc = false;
    f3a6:	69fb      	ldr	r3, [r7, #28]
    f3a8:	2200      	movs	r2, #0
    f3aa:	701a      	strb	r2, [r3, #0]
                len = pr->alloc - pr->len - 1;
    f3ac:	69fb      	ldr	r3, [r7, #28]
    f3ae:	685a      	ldr	r2, [r3, #4]
    f3b0:	69fb      	ldr	r3, [r7, #28]
    f3b2:	689b      	ldr	r3, [r3, #8]
    f3b4:	1ad3      	subs	r3, r2, r3
    f3b6:	3b01      	subs	r3, #1
    f3b8:	607b      	str	r3, [r7, #4]
    f3ba:	e00d      	b.n	f3d8 <exc_add_strn+0x7c>
            } else {
                pr->alloc = new_alloc;
    f3bc:	69fb      	ldr	r3, [r7, #28]
    f3be:	69ba      	ldr	r2, [r7, #24]
    f3c0:	605a      	str	r2, [r3, #4]
                pr->buf = new_buf;
    f3c2:	69fb      	ldr	r3, [r7, #28]
    f3c4:	697a      	ldr	r2, [r7, #20]
    f3c6:	60da      	str	r2, [r3, #12]
    f3c8:	e006      	b.n	f3d8 <exc_add_strn+0x7c>
            }
        } else {
            len = pr->alloc - pr->len - 1;
    f3ca:	69fb      	ldr	r3, [r7, #28]
    f3cc:	685a      	ldr	r2, [r3, #4]
    f3ce:	69fb      	ldr	r3, [r7, #28]
    f3d0:	689b      	ldr	r3, [r3, #8]
    f3d2:	1ad3      	subs	r3, r2, r3
    f3d4:	3b01      	subs	r3, #1
    f3d6:	607b      	str	r3, [r7, #4]
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    f3d8:	69fb      	ldr	r3, [r7, #28]
    f3da:	68da      	ldr	r2, [r3, #12]
    f3dc:	69fb      	ldr	r3, [r7, #28]
    f3de:	689b      	ldr	r3, [r3, #8]
    f3e0:	4413      	add	r3, r2
    f3e2:	687a      	ldr	r2, [r7, #4]
    f3e4:	68b9      	ldr	r1, [r7, #8]
    f3e6:	4618      	mov	r0, r3
    f3e8:	f00d f8ba 	bl	1c560 <memcpy>
    pr->len += len;
    f3ec:	69fb      	ldr	r3, [r7, #28]
    f3ee:	689a      	ldr	r2, [r3, #8]
    f3f0:	687b      	ldr	r3, [r7, #4]
    f3f2:	441a      	add	r2, r3
    f3f4:	69fb      	ldr	r3, [r7, #28]
    f3f6:	609a      	str	r2, [r3, #8]
}
    f3f8:	bf00      	nop
    f3fa:	3720      	adds	r7, #32
    f3fc:	46bd      	mov	sp, r7
    f3fe:	bd80      	pop	{r7, pc}

0000f400 <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    f400:	b40e      	push	{r1, r2, r3}
    f402:	b580      	push	{r7, lr}
    f404:	b08f      	sub	sp, #60	; 0x3c
    f406:	af00      	add	r7, sp, #0
    f408:	6078      	str	r0, [r7, #4]
    assert(fmt != NULL);
    f40a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f40c:	2b00      	cmp	r3, #0
    f40e:	d106      	bne.n	f41e <mp_obj_new_exception_msg_varg+0x1e>
    f410:	4b43      	ldr	r3, [pc, #268]	; (f520 <mp_obj_new_exception_msg_varg+0x120>)
    f412:	4a44      	ldr	r2, [pc, #272]	; (f524 <mp_obj_new_exception_msg_varg+0x124>)
    f414:	f240 1161 	movw	r1, #353	; 0x161
    f418:	4843      	ldr	r0, [pc, #268]	; (f528 <mp_obj_new_exception_msg_varg+0x128>)
    f41a:	f00b fee3 	bl	1b1e4 <__assert_func>

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f41e:	687b      	ldr	r3, [r7, #4]
    f420:	68db      	ldr	r3, [r3, #12]
    f422:	4a42      	ldr	r2, [pc, #264]	; (f52c <mp_obj_new_exception_msg_varg+0x12c>)
    f424:	4293      	cmp	r3, r2
    f426:	d006      	beq.n	f436 <mp_obj_new_exception_msg_varg+0x36>
    f428:	4b41      	ldr	r3, [pc, #260]	; (f530 <mp_obj_new_exception_msg_varg+0x130>)
    f42a:	4a3e      	ldr	r2, [pc, #248]	; (f524 <mp_obj_new_exception_msg_varg+0x124>)
    f42c:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f430:	483d      	ldr	r0, [pc, #244]	; (f528 <mp_obj_new_exception_msg_varg+0x128>)
    f432:	f00b fed7 	bl	1b1e4 <__assert_func>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    f436:	2010      	movs	r0, #16
    f438:	f7f0 ff87 	bl	34a <m_malloc_maybe>
    f43c:	6378      	str	r0, [r7, #52]	; 0x34
    size_t o_str_alloc = strlen(fmt) + 1;
    f43e:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f440:	f00d f9c4 	bl	1c7cc <strlen>
    f444:	4603      	mov	r3, r0
    f446:	3301      	adds	r3, #1
    f448:	633b      	str	r3, [r7, #48]	; 0x30
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    f44a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f44c:	f7f0 ff7d 	bl	34a <m_malloc_maybe>
    f450:	62f8      	str	r0, [r7, #44]	; 0x2c

    bool used_emg_buf = false;
    f452:	2300      	movs	r3, #0
    f454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
            + mp_emergency_exception_buf_size - o_str_buf;
    }
    #endif

    if (o_str == NULL) {
    f458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f45a:	2b00      	cmp	r3, #0
    f45c:	d107      	bne.n	f46e <mp_obj_new_exception_msg_varg+0x6e>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    f45e:	2300      	movs	r3, #0
    f460:	2200      	movs	r2, #0
    f462:	2100      	movs	r1, #0
    f464:	6878      	ldr	r0, [r7, #4]
    f466:	f7ff fe83 	bl	f170 <mp_obj_exception_make_new>
    f46a:	4603      	mov	r3, r0
    f46c:	e050      	b.n	f510 <mp_obj_new_exception_msg_varg+0x110>
    }

    if (o_str_buf == NULL) {
    f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f470:	2b00      	cmp	r3, #0
    f472:	d107      	bne.n	f484 <mp_obj_new_exception_msg_varg+0x84>
        // No memory for the string buffer: assume that the fmt string is in ROM
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f476:	1e5a      	subs	r2, r3, #1
    f478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f47a:	609a      	str	r2, [r3, #8]
        o_str->data = (const byte*)fmt;
    f47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f47e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f480:	60da      	str	r2, [r3, #12]
    f482:	e02d      	b.n	f4e0 <mp_obj_new_exception_msg_varg+0xe0>
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    f484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    f488:	2b00      	cmp	r3, #0
    f48a:	bf14      	ite	ne
    f48c:	2301      	movne	r3, #1
    f48e:	2300      	moveq	r3, #0
    f490:	b2db      	uxtb	r3, r3
    f492:	f083 0301 	eor.w	r3, r3, #1
    f496:	b2db      	uxtb	r3, r3
    f498:	f003 0301 	and.w	r3, r3, #1
    f49c:	b2db      	uxtb	r3, r3
    f49e:	753b      	strb	r3, [r7, #20]
    f4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f4a2:	61bb      	str	r3, [r7, #24]
    f4a4:	2300      	movs	r3, #0
    f4a6:	61fb      	str	r3, [r7, #28]
    f4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f4aa:	623b      	str	r3, [r7, #32]
        mp_print_t print = {&exc_pr, exc_add_strn};
    f4ac:	f107 0314 	add.w	r3, r7, #20
    f4b0:	60fb      	str	r3, [r7, #12]
    f4b2:	4b20      	ldr	r3, [pc, #128]	; (f534 <mp_obj_new_exception_msg_varg+0x134>)
    f4b4:	613b      	str	r3, [r7, #16]
        va_list ap;
        va_start(ap, fmt);
    f4b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
    f4ba:	60bb      	str	r3, [r7, #8]
        mp_vprintf(&print, fmt, ap);
    f4bc:	f107 030c 	add.w	r3, r7, #12
    f4c0:	68ba      	ldr	r2, [r7, #8]
    f4c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
    f4c4:	4618      	mov	r0, r3
    f4c6:	f7f2 fcf9 	bl	1ebc <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    f4ca:	6a3a      	ldr	r2, [r7, #32]
    f4cc:	69fb      	ldr	r3, [r7, #28]
    f4ce:	4413      	add	r3, r2
    f4d0:	2200      	movs	r2, #0
    f4d2:	701a      	strb	r2, [r3, #0]
        o_str->len = exc_pr.len;
    f4d4:	69fa      	ldr	r2, [r7, #28]
    f4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4d8:	609a      	str	r2, [r3, #8]
        o_str->data = exc_pr.buf;
    f4da:	6a3a      	ldr	r2, [r7, #32]
    f4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4de:	60da      	str	r2, [r3, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    f4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4e2:	4a15      	ldr	r2, [pc, #84]	; (f538 <mp_obj_new_exception_msg_varg+0x138>)
    f4e4:	601a      	str	r2, [r3, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    f4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4e8:	68da      	ldr	r2, [r3, #12]
    f4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4ec:	689b      	ldr	r3, [r3, #8]
    f4ee:	4619      	mov	r1, r3
    f4f0:	4610      	mov	r0, r2
    f4f2:	f7f1 fc91 	bl	e18 <qstr_compute_hash>
    f4f6:	4602      	mov	r2, r0
    f4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4fa:	605a      	str	r2, [r3, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    f4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4fe:	627b      	str	r3, [r7, #36]	; 0x24
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    f500:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f504:	2200      	movs	r2, #0
    f506:	2101      	movs	r1, #1
    f508:	6878      	ldr	r0, [r7, #4]
    f50a:	f7ff fe31 	bl	f170 <mp_obj_exception_make_new>
    f50e:	4603      	mov	r3, r0
}
    f510:	4618      	mov	r0, r3
    f512:	373c      	adds	r7, #60	; 0x3c
    f514:	46bd      	mov	sp, r7
    f516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f51a:	b003      	add	sp, #12
    f51c:	4770      	bx	lr
    f51e:	bf00      	nop
    f520:	00021edc 	.word	0x00021edc
    f524:	00021f2c 	.word	0x00021f2c
    f528:	00021ec4 	.word	0x00021ec4
    f52c:	0000f171 	.word	0x0000f171
    f530:	00021e94 	.word	0x00021e94
    f534:	0000f35d 	.word	0x0000f35d
    f538:	00023204 	.word	0x00023204

0000f53c <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    f53c:	b580      	push	{r7, lr}
    f53e:	b084      	sub	sp, #16
    f540:	af00      	add	r7, sp, #0
    f542:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    f544:	6878      	ldr	r0, [r7, #4]
    f546:	f7ff fd9f 	bl	f088 <MP_OBJ_IS_OBJ>
    f54a:	4603      	mov	r3, r0
    f54c:	2b00      	cmp	r3, #0
    f54e:	d00d      	beq.n	f56c <mp_obj_is_exception_type+0x30>
    f550:	687b      	ldr	r3, [r7, #4]
    f552:	681b      	ldr	r3, [r3, #0]
    f554:	4a0a      	ldr	r2, [pc, #40]	; (f580 <mp_obj_is_exception_type+0x44>)
    f556:	4293      	cmp	r3, r2
    f558:	d108      	bne.n	f56c <mp_obj_is_exception_type+0x30>
        // optimisation when self_in is a builtin exception
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
    f55a:	687b      	ldr	r3, [r7, #4]
    f55c:	60fb      	str	r3, [r7, #12]
        if (self->make_new == mp_obj_exception_make_new) {
    f55e:	68fb      	ldr	r3, [r7, #12]
    f560:	68db      	ldr	r3, [r3, #12]
    f562:	4a08      	ldr	r2, [pc, #32]	; (f584 <mp_obj_is_exception_type+0x48>)
    f564:	4293      	cmp	r3, r2
    f566:	d101      	bne.n	f56c <mp_obj_is_exception_type+0x30>
            return true;
    f568:	2301      	movs	r3, #1
    f56a:	e004      	b.n	f576 <mp_obj_is_exception_type+0x3a>
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    f56c:	4906      	ldr	r1, [pc, #24]	; (f588 <mp_obj_is_exception_type+0x4c>)
    f56e:	6878      	ldr	r0, [r7, #4]
    f570:	f007 fccc 	bl	16f0c <mp_obj_is_subclass_fast>
    f574:	4603      	mov	r3, r0
}
    f576:	4618      	mov	r0, r3
    f578:	3710      	adds	r7, #16
    f57a:	46bd      	mov	sp, r7
    f57c:	bd80      	pop	{r7, pc}
    f57e:	bf00      	nop
    f580:	00023780 	.word	0x00023780
    f584:	0000f171 	.word	0x0000f171
    f588:	000218b8 	.word	0x000218b8

0000f58c <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    f58c:	b580      	push	{r7, lr}
    f58e:	b082      	sub	sp, #8
    f590:	af00      	add	r7, sp, #0
    f592:	6078      	str	r0, [r7, #4]
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    f594:	6878      	ldr	r0, [r7, #4]
    f596:	f7fe f8a7 	bl	d6e8 <mp_obj_get_type>
    f59a:	4603      	mov	r3, r0
    f59c:	4618      	mov	r0, r3
    f59e:	f7ff ffcd 	bl	f53c <mp_obj_is_exception_type>
    f5a2:	4603      	mov	r3, r0
}
    f5a4:	4618      	mov	r0, r3
    f5a6:	3708      	adds	r7, #8
    f5a8:	46bd      	mov	sp, r7
    f5aa:	bd80      	pop	{r7, pc}

0000f5ac <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    f5ac:	b580      	push	{r7, lr}
    f5ae:	b082      	sub	sp, #8
    f5b0:	af00      	add	r7, sp, #0
    f5b2:	6078      	str	r0, [r7, #4]
    f5b4:	6039      	str	r1, [r7, #0]
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    f5b6:	6878      	ldr	r0, [r7, #4]
    f5b8:	f7ff ffe8 	bl	f58c <mp_obj_is_exception_instance>
    f5bc:	4603      	mov	r3, r0
    f5be:	2b00      	cmp	r3, #0
    f5c0:	d003      	beq.n	f5ca <mp_obj_exception_match+0x1e>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    f5c2:	6878      	ldr	r0, [r7, #4]
    f5c4:	f7fe f890 	bl	d6e8 <mp_obj_get_type>
    f5c8:	6078      	str	r0, [r7, #4]
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    f5ca:	6839      	ldr	r1, [r7, #0]
    f5cc:	6878      	ldr	r0, [r7, #4]
    f5ce:	f007 fc9d 	bl	16f0c <mp_obj_is_subclass_fast>
    f5d2:	4603      	mov	r3, r0
}
    f5d4:	4618      	mov	r0, r3
    f5d6:	3708      	adds	r7, #8
    f5d8:	46bd      	mov	sp, r7
    f5da:	bd80      	pop	{r7, pc}

0000f5dc <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    f5dc:	b580      	push	{r7, lr}
    f5de:	b084      	sub	sp, #16
    f5e0:	af00      	add	r7, sp, #0
    f5e2:	6078      	str	r0, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f5e4:	6878      	ldr	r0, [r7, #4]
    f5e6:	f7ff ffd1 	bl	f58c <mp_obj_is_exception_instance>
    f5ea:	4603      	mov	r3, r0
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	d106      	bne.n	f5fe <mp_obj_exception_clear_traceback+0x22>
    f5f0:	4b0d      	ldr	r3, [pc, #52]	; (f628 <mp_obj_exception_clear_traceback+0x4c>)
    f5f2:	4a0e      	ldr	r2, [pc, #56]	; (f62c <mp_obj_exception_clear_traceback+0x50>)
    f5f4:	f240 11c3 	movw	r1, #451	; 0x1c3
    f5f8:	480d      	ldr	r0, [pc, #52]	; (f630 <mp_obj_exception_clear_traceback+0x54>)
    f5fa:	f00b fdf3 	bl	1b1e4 <__assert_func>
    f5fe:	6878      	ldr	r0, [r7, #4]
    f600:	f7fe f872 	bl	d6e8 <mp_obj_get_type>
    f604:	4603      	mov	r3, r0
    f606:	68db      	ldr	r3, [r3, #12]
    f608:	4a0a      	ldr	r2, [pc, #40]	; (f634 <mp_obj_exception_clear_traceback+0x58>)
    f60a:	4293      	cmp	r3, r2
    f60c:	d102      	bne.n	f614 <mp_obj_exception_clear_traceback+0x38>
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	60fb      	str	r3, [r7, #12]
    f612:	e002      	b.n	f61a <mp_obj_exception_clear_traceback+0x3e>
    f614:	687b      	ldr	r3, [r7, #4]
    f616:	691b      	ldr	r3, [r3, #16]
    f618:	60fb      	str	r3, [r7, #12]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    f61a:	68fb      	ldr	r3, [r7, #12]
    f61c:	2200      	movs	r2, #0
    f61e:	609a      	str	r2, [r3, #8]
}
    f620:	bf00      	nop
    f622:	3710      	adds	r7, #16
    f624:	46bd      	mov	sp, r7
    f626:	bd80      	pop	{r7, pc}
    f628:	00021ee8 	.word	0x00021ee8
    f62c:	00021f4c 	.word	0x00021f4c
    f630:	00021ec4 	.word	0x00021ec4
    f634:	0000f171 	.word	0x0000f171

0000f638 <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    f638:	b580      	push	{r7, lr}
    f63a:	b088      	sub	sp, #32
    f63c:	af00      	add	r7, sp, #0
    f63e:	60f8      	str	r0, [r7, #12]
    f640:	60b9      	str	r1, [r7, #8]
    f642:	607a      	str	r2, [r7, #4]
    f644:	603b      	str	r3, [r7, #0]
    GET_NATIVE_EXCEPTION(self, self_in);
    f646:	68f8      	ldr	r0, [r7, #12]
    f648:	f7ff ffa0 	bl	f58c <mp_obj_is_exception_instance>
    f64c:	4603      	mov	r3, r0
    f64e:	2b00      	cmp	r3, #0
    f650:	d106      	bne.n	f660 <mp_obj_exception_add_traceback+0x28>
    f652:	4b33      	ldr	r3, [pc, #204]	; (f720 <mp_obj_exception_add_traceback+0xe8>)
    f654:	4a33      	ldr	r2, [pc, #204]	; (f724 <mp_obj_exception_add_traceback+0xec>)
    f656:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    f65a:	4833      	ldr	r0, [pc, #204]	; (f728 <mp_obj_exception_add_traceback+0xf0>)
    f65c:	f00b fdc2 	bl	1b1e4 <__assert_func>
    f660:	68f8      	ldr	r0, [r7, #12]
    f662:	f7fe f841 	bl	d6e8 <mp_obj_get_type>
    f666:	4603      	mov	r3, r0
    f668:	68db      	ldr	r3, [r3, #12]
    f66a:	4a30      	ldr	r2, [pc, #192]	; (f72c <mp_obj_exception_add_traceback+0xf4>)
    f66c:	4293      	cmp	r3, r2
    f66e:	d102      	bne.n	f676 <mp_obj_exception_add_traceback+0x3e>
    f670:	68fb      	ldr	r3, [r7, #12]
    f672:	61fb      	str	r3, [r7, #28]
    f674:	e002      	b.n	f67c <mp_obj_exception_add_traceback+0x44>
    f676:	68fb      	ldr	r3, [r7, #12]
    f678:	691b      	ldr	r3, [r3, #16]
    f67a:	61fb      	str	r3, [r7, #28]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    f67c:	69fb      	ldr	r3, [r7, #28]
    f67e:	689b      	ldr	r3, [r3, #8]
    f680:	2b00      	cmp	r3, #0
    f682:	d110      	bne.n	f6a6 <mp_obj_exception_add_traceback+0x6e>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    f684:	200c      	movs	r0, #12
    f686:	f7f0 fe60 	bl	34a <m_malloc_maybe>
    f68a:	4602      	mov	r2, r0
    f68c:	69fb      	ldr	r3, [r7, #28]
    f68e:	609a      	str	r2, [r3, #8]
        if (self->traceback_data == NULL) {
    f690:	69fb      	ldr	r3, [r7, #28]
    f692:	689b      	ldr	r3, [r3, #8]
    f694:	2b00      	cmp	r3, #0
    f696:	d03d      	beq.n	f714 <mp_obj_exception_add_traceback+0xdc>
            // Can't allocate
            return;
            #endif
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    f698:	69fb      	ldr	r3, [r7, #28]
    f69a:	2203      	movs	r2, #3
    f69c:	809a      	strh	r2, [r3, #4]
        }
        self->traceback_len = 0;
    f69e:	69fb      	ldr	r3, [r7, #28]
    f6a0:	2200      	movs	r2, #0
    f6a2:	80da      	strh	r2, [r3, #6]
    f6a4:	e01d      	b.n	f6e2 <mp_obj_exception_add_traceback+0xaa>
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    f6a6:	69fb      	ldr	r3, [r7, #28]
    f6a8:	88db      	ldrh	r3, [r3, #6]
    f6aa:	3303      	adds	r3, #3
    f6ac:	69fa      	ldr	r2, [r7, #28]
    f6ae:	8892      	ldrh	r2, [r2, #4]
    f6b0:	4293      	cmp	r3, r2
    f6b2:	dd16      	ble.n	f6e2 <mp_obj_exception_add_traceback+0xaa>
            // Can't resize the emergency buffer
            return;
        }
        #endif
        // be conservative with growing traceback data
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    f6b4:	69fb      	ldr	r3, [r7, #28]
    f6b6:	6898      	ldr	r0, [r3, #8]
    f6b8:	69fb      	ldr	r3, [r7, #28]
    f6ba:	889b      	ldrh	r3, [r3, #4]
    f6bc:	3303      	adds	r3, #3
    f6be:	009b      	lsls	r3, r3, #2
    f6c0:	2201      	movs	r2, #1
    f6c2:	4619      	mov	r1, r3
    f6c4:	f7f0 fe75 	bl	3b2 <m_realloc_maybe>
    f6c8:	61b8      	str	r0, [r7, #24]
            self->traceback_alloc + TRACEBACK_ENTRY_LEN, true);
        if (tb_data == NULL) {
    f6ca:	69bb      	ldr	r3, [r7, #24]
    f6cc:	2b00      	cmp	r3, #0
    f6ce:	d023      	beq.n	f718 <mp_obj_exception_add_traceback+0xe0>
            return;
        }
        self->traceback_data = tb_data;
    f6d0:	69fb      	ldr	r3, [r7, #28]
    f6d2:	69ba      	ldr	r2, [r7, #24]
    f6d4:	609a      	str	r2, [r3, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    f6d6:	69fb      	ldr	r3, [r7, #28]
    f6d8:	889b      	ldrh	r3, [r3, #4]
    f6da:	3303      	adds	r3, #3
    f6dc:	b29a      	uxth	r2, r3
    f6de:	69fb      	ldr	r3, [r7, #28]
    f6e0:	809a      	strh	r2, [r3, #4]
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    f6e2:	69fb      	ldr	r3, [r7, #28]
    f6e4:	689a      	ldr	r2, [r3, #8]
    f6e6:	69fb      	ldr	r3, [r7, #28]
    f6e8:	88db      	ldrh	r3, [r3, #6]
    f6ea:	009b      	lsls	r3, r3, #2
    f6ec:	4413      	add	r3, r2
    f6ee:	617b      	str	r3, [r7, #20]
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    f6f0:	69fb      	ldr	r3, [r7, #28]
    f6f2:	88db      	ldrh	r3, [r3, #6]
    f6f4:	3303      	adds	r3, #3
    f6f6:	b29a      	uxth	r2, r3
    f6f8:	69fb      	ldr	r3, [r7, #28]
    f6fa:	80da      	strh	r2, [r3, #6]
    tb_data[0] = file;
    f6fc:	697b      	ldr	r3, [r7, #20]
    f6fe:	68ba      	ldr	r2, [r7, #8]
    f700:	601a      	str	r2, [r3, #0]
    tb_data[1] = line;
    f702:	697b      	ldr	r3, [r7, #20]
    f704:	3304      	adds	r3, #4
    f706:	687a      	ldr	r2, [r7, #4]
    f708:	601a      	str	r2, [r3, #0]
    tb_data[2] = block;
    f70a:	697b      	ldr	r3, [r7, #20]
    f70c:	3308      	adds	r3, #8
    f70e:	683a      	ldr	r2, [r7, #0]
    f710:	601a      	str	r2, [r3, #0]
    f712:	e002      	b.n	f71a <mp_obj_exception_add_traceback+0xe2>
            return;
    f714:	bf00      	nop
    f716:	e000      	b.n	f71a <mp_obj_exception_add_traceback+0xe2>
            return;
    f718:	bf00      	nop
}
    f71a:	3720      	adds	r7, #32
    f71c:	46bd      	mov	sp, r7
    f71e:	bd80      	pop	{r7, pc}
    f720:	00021ee8 	.word	0x00021ee8
    f724:	00021f70 	.word	0x00021f70
    f728:	00021ec4 	.word	0x00021ec4
    f72c:	0000f171 	.word	0x0000f171

0000f730 <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    f730:	b580      	push	{r7, lr}
    f732:	b086      	sub	sp, #24
    f734:	af00      	add	r7, sp, #0
    f736:	60f8      	str	r0, [r7, #12]
    f738:	60b9      	str	r1, [r7, #8]
    f73a:	607a      	str	r2, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f73c:	68f8      	ldr	r0, [r7, #12]
    f73e:	f7ff ff25 	bl	f58c <mp_obj_is_exception_instance>
    f742:	4603      	mov	r3, r0
    f744:	2b00      	cmp	r3, #0
    f746:	d106      	bne.n	f756 <mp_obj_exception_get_traceback+0x26>
    f748:	4b16      	ldr	r3, [pc, #88]	; (f7a4 <mp_obj_exception_get_traceback+0x74>)
    f74a:	4a17      	ldr	r2, [pc, #92]	; (f7a8 <mp_obj_exception_get_traceback+0x78>)
    f74c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    f750:	4816      	ldr	r0, [pc, #88]	; (f7ac <mp_obj_exception_get_traceback+0x7c>)
    f752:	f00b fd47 	bl	1b1e4 <__assert_func>
    f756:	68f8      	ldr	r0, [r7, #12]
    f758:	f7fd ffc6 	bl	d6e8 <mp_obj_get_type>
    f75c:	4603      	mov	r3, r0
    f75e:	68db      	ldr	r3, [r3, #12]
    f760:	4a13      	ldr	r2, [pc, #76]	; (f7b0 <mp_obj_exception_get_traceback+0x80>)
    f762:	4293      	cmp	r3, r2
    f764:	d102      	bne.n	f76c <mp_obj_exception_get_traceback+0x3c>
    f766:	68fb      	ldr	r3, [r7, #12]
    f768:	617b      	str	r3, [r7, #20]
    f76a:	e002      	b.n	f772 <mp_obj_exception_get_traceback+0x42>
    f76c:	68fb      	ldr	r3, [r7, #12]
    f76e:	691b      	ldr	r3, [r3, #16]
    f770:	617b      	str	r3, [r7, #20]

    if (self->traceback_data == NULL) {
    f772:	697b      	ldr	r3, [r7, #20]
    f774:	689b      	ldr	r3, [r3, #8]
    f776:	2b00      	cmp	r3, #0
    f778:	d106      	bne.n	f788 <mp_obj_exception_get_traceback+0x58>
        *n = 0;
    f77a:	68bb      	ldr	r3, [r7, #8]
    f77c:	2200      	movs	r2, #0
    f77e:	601a      	str	r2, [r3, #0]
        *values = NULL;
    f780:	687b      	ldr	r3, [r7, #4]
    f782:	2200      	movs	r2, #0
    f784:	601a      	str	r2, [r3, #0]
    } else {
        *n = self->traceback_len;
        *values = self->traceback_data;
    }
}
    f786:	e008      	b.n	f79a <mp_obj_exception_get_traceback+0x6a>
        *n = self->traceback_len;
    f788:	697b      	ldr	r3, [r7, #20]
    f78a:	88db      	ldrh	r3, [r3, #6]
    f78c:	461a      	mov	r2, r3
    f78e:	68bb      	ldr	r3, [r7, #8]
    f790:	601a      	str	r2, [r3, #0]
        *values = self->traceback_data;
    f792:	697b      	ldr	r3, [r7, #20]
    f794:	689a      	ldr	r2, [r3, #8]
    f796:	687b      	ldr	r3, [r7, #4]
    f798:	601a      	str	r2, [r3, #0]
}
    f79a:	bf00      	nop
    f79c:	3718      	adds	r7, #24
    f79e:	46bd      	mov	sp, r7
    f7a0:	bd80      	pop	{r7, pc}
    f7a2:	bf00      	nop
    f7a4:	00021ee8 	.word	0x00021ee8
    f7a8:	00021f90 	.word	0x00021f90
    f7ac:	00021ec4 	.word	0x00021ec4
    f7b0:	0000f171 	.word	0x0000f171

0000f7b4 <MP_OBJ_IS_OBJ>:
    f7b4:	b480      	push	{r7}
    f7b6:	b083      	sub	sp, #12
    f7b8:	af00      	add	r7, sp, #0
    f7ba:	6078      	str	r0, [r7, #4]
    f7bc:	687b      	ldr	r3, [r7, #4]
    f7be:	f003 0303 	and.w	r3, r3, #3
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	bf0c      	ite	eq
    f7c6:	2301      	moveq	r3, #1
    f7c8:	2300      	movne	r3, #0
    f7ca:	b2db      	uxtb	r3, r3
    f7cc:	4618      	mov	r0, r3
    f7ce:	370c      	adds	r7, #12
    f7d0:	46bd      	mov	sp, r7
    f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    f7d6:	4770      	bx	lr

0000f7d8 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    f7d8:	b480      	push	{r7}
    f7da:	af00      	add	r7, sp, #0
    f7dc:	4b03      	ldr	r3, [pc, #12]	; (f7ec <mp_globals_get+0x14>)
    f7de:	689b      	ldr	r3, [r3, #8]
    f7e0:	4618      	mov	r0, r3
    f7e2:	46bd      	mov	sp, r7
    f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    f7e8:	4770      	bx	lr
    f7ea:	bf00      	nop
    f7ec:	20001240 	.word	0x20001240

0000f7f0 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    f7f0:	b480      	push	{r7}
    f7f2:	b083      	sub	sp, #12
    f7f4:	af00      	add	r7, sp, #0
    f7f6:	6078      	str	r0, [r7, #4]
    f7f8:	4a04      	ldr	r2, [pc, #16]	; (f80c <mp_globals_set+0x1c>)
    f7fa:	687b      	ldr	r3, [r7, #4]
    f7fc:	6093      	str	r3, [r2, #8]
    f7fe:	bf00      	nop
    f800:	370c      	adds	r7, #12
    f802:	46bd      	mov	sp, r7
    f804:	f85d 7b04 	ldr.w	r7, [sp], #4
    f808:	4770      	bx	lr
    f80a:	bf00      	nop
    f80c:	20001240 	.word	0x20001240

0000f810 <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f810:	b580      	push	{r7, lr}
    f812:	b088      	sub	sp, #32
    f814:	af02      	add	r7, sp, #8
    f816:	60f8      	str	r0, [r7, #12]
    f818:	60b9      	str	r1, [r7, #8]
    f81a:	607a      	str	r2, [r7, #4]
    f81c:	603b      	str	r3, [r7, #0]
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    f81e:	68f8      	ldr	r0, [r7, #12]
    f820:	f7ff ffc8 	bl	f7b4 <MP_OBJ_IS_OBJ>
    f824:	4603      	mov	r3, r0
    f826:	2b00      	cmp	r3, #0
    f828:	d004      	beq.n	f834 <fun_builtin_0_call+0x24>
    f82a:	68fb      	ldr	r3, [r7, #12]
    f82c:	681b      	ldr	r3, [r3, #0]
    f82e:	4a0d      	ldr	r2, [pc, #52]	; (f864 <fun_builtin_0_call+0x54>)
    f830:	4293      	cmp	r3, r2
    f832:	d005      	beq.n	f840 <fun_builtin_0_call+0x30>
    f834:	4b0c      	ldr	r3, [pc, #48]	; (f868 <fun_builtin_0_call+0x58>)
    f836:	4a0d      	ldr	r2, [pc, #52]	; (f86c <fun_builtin_0_call+0x5c>)
    f838:	2135      	movs	r1, #53	; 0x35
    f83a:	480d      	ldr	r0, [pc, #52]	; (f870 <fun_builtin_0_call+0x60>)
    f83c:	f00b fcd2 	bl	1b1e4 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f840:	68fb      	ldr	r3, [r7, #12]
    f842:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    f844:	2300      	movs	r3, #0
    f846:	9300      	str	r3, [sp, #0]
    f848:	2300      	movs	r3, #0
    f84a:	2200      	movs	r2, #0
    f84c:	6879      	ldr	r1, [r7, #4]
    f84e:	68b8      	ldr	r0, [r7, #8]
    f850:	f7fd fb5a 	bl	cf08 <mp_arg_check_num>
    return self->fun._0();
    f854:	697b      	ldr	r3, [r7, #20]
    f856:	685b      	ldr	r3, [r3, #4]
    f858:	4798      	blx	r3
    f85a:	4603      	mov	r3, r0
}
    f85c:	4618      	mov	r0, r3
    f85e:	3718      	adds	r7, #24
    f860:	46bd      	mov	sp, r7
    f862:	bd80      	pop	{r7, pc}
    f864:	00021ff4 	.word	0x00021ff4
    f868:	00021fb0 	.word	0x00021fb0
    f86c:	00022278 	.word	0x00022278
    f870:	00021fe0 	.word	0x00021fe0

0000f874 <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f874:	b580      	push	{r7, lr}
    f876:	b088      	sub	sp, #32
    f878:	af02      	add	r7, sp, #8
    f87a:	60f8      	str	r0, [r7, #12]
    f87c:	60b9      	str	r1, [r7, #8]
    f87e:	607a      	str	r2, [r7, #4]
    f880:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    f882:	68f8      	ldr	r0, [r7, #12]
    f884:	f7ff ff96 	bl	f7b4 <MP_OBJ_IS_OBJ>
    f888:	4603      	mov	r3, r0
    f88a:	2b00      	cmp	r3, #0
    f88c:	d004      	beq.n	f898 <fun_builtin_1_call+0x24>
    f88e:	68fb      	ldr	r3, [r7, #12]
    f890:	681b      	ldr	r3, [r3, #0]
    f892:	4a0f      	ldr	r2, [pc, #60]	; (f8d0 <fun_builtin_1_call+0x5c>)
    f894:	4293      	cmp	r3, r2
    f896:	d005      	beq.n	f8a4 <fun_builtin_1_call+0x30>
    f898:	4b0e      	ldr	r3, [pc, #56]	; (f8d4 <fun_builtin_1_call+0x60>)
    f89a:	4a0f      	ldr	r2, [pc, #60]	; (f8d8 <fun_builtin_1_call+0x64>)
    f89c:	2143      	movs	r1, #67	; 0x43
    f89e:	480f      	ldr	r0, [pc, #60]	; (f8dc <fun_builtin_1_call+0x68>)
    f8a0:	f00b fca0 	bl	1b1e4 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f8a4:	68fb      	ldr	r3, [r7, #12]
    f8a6:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    f8a8:	2300      	movs	r3, #0
    f8aa:	9300      	str	r3, [sp, #0]
    f8ac:	2301      	movs	r3, #1
    f8ae:	2201      	movs	r2, #1
    f8b0:	6879      	ldr	r1, [r7, #4]
    f8b2:	68b8      	ldr	r0, [r7, #8]
    f8b4:	f7fd fb28 	bl	cf08 <mp_arg_check_num>
    return self->fun._1(args[0]);
    f8b8:	697b      	ldr	r3, [r7, #20]
    f8ba:	685b      	ldr	r3, [r3, #4]
    f8bc:	683a      	ldr	r2, [r7, #0]
    f8be:	6812      	ldr	r2, [r2, #0]
    f8c0:	4610      	mov	r0, r2
    f8c2:	4798      	blx	r3
    f8c4:	4603      	mov	r3, r0
}
    f8c6:	4618      	mov	r0, r3
    f8c8:	3718      	adds	r7, #24
    f8ca:	46bd      	mov	sp, r7
    f8cc:	bd80      	pop	{r7, pc}
    f8ce:	bf00      	nop
    f8d0:	00022060 	.word	0x00022060
    f8d4:	00022030 	.word	0x00022030
    f8d8:	0002228c 	.word	0x0002228c
    f8dc:	00021fe0 	.word	0x00021fe0

0000f8e0 <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f8e0:	b580      	push	{r7, lr}
    f8e2:	b088      	sub	sp, #32
    f8e4:	af02      	add	r7, sp, #8
    f8e6:	60f8      	str	r0, [r7, #12]
    f8e8:	60b9      	str	r1, [r7, #8]
    f8ea:	607a      	str	r2, [r7, #4]
    f8ec:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    f8ee:	68f8      	ldr	r0, [r7, #12]
    f8f0:	f7ff ff60 	bl	f7b4 <MP_OBJ_IS_OBJ>
    f8f4:	4603      	mov	r3, r0
    f8f6:	2b00      	cmp	r3, #0
    f8f8:	d004      	beq.n	f904 <fun_builtin_2_call+0x24>
    f8fa:	68fb      	ldr	r3, [r7, #12]
    f8fc:	681b      	ldr	r3, [r3, #0]
    f8fe:	4a10      	ldr	r2, [pc, #64]	; (f940 <fun_builtin_2_call+0x60>)
    f900:	4293      	cmp	r3, r2
    f902:	d005      	beq.n	f910 <fun_builtin_2_call+0x30>
    f904:	4b0f      	ldr	r3, [pc, #60]	; (f944 <fun_builtin_2_call+0x64>)
    f906:	4a10      	ldr	r2, [pc, #64]	; (f948 <fun_builtin_2_call+0x68>)
    f908:	2151      	movs	r1, #81	; 0x51
    f90a:	4810      	ldr	r0, [pc, #64]	; (f94c <fun_builtin_2_call+0x6c>)
    f90c:	f00b fc6a 	bl	1b1e4 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f910:	68fb      	ldr	r3, [r7, #12]
    f912:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    f914:	2300      	movs	r3, #0
    f916:	9300      	str	r3, [sp, #0]
    f918:	2302      	movs	r3, #2
    f91a:	2202      	movs	r2, #2
    f91c:	6879      	ldr	r1, [r7, #4]
    f91e:	68b8      	ldr	r0, [r7, #8]
    f920:	f7fd faf2 	bl	cf08 <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    f924:	697b      	ldr	r3, [r7, #20]
    f926:	685b      	ldr	r3, [r3, #4]
    f928:	683a      	ldr	r2, [r7, #0]
    f92a:	6810      	ldr	r0, [r2, #0]
    f92c:	683a      	ldr	r2, [r7, #0]
    f92e:	3204      	adds	r2, #4
    f930:	6812      	ldr	r2, [r2, #0]
    f932:	4611      	mov	r1, r2
    f934:	4798      	blx	r3
    f936:	4603      	mov	r3, r0
}
    f938:	4618      	mov	r0, r3
    f93a:	3718      	adds	r7, #24
    f93c:	46bd      	mov	sp, r7
    f93e:	bd80      	pop	{r7, pc}
    f940:	000220cc 	.word	0x000220cc
    f944:	0002209c 	.word	0x0002209c
    f948:	000222a0 	.word	0x000222a0
    f94c:	00021fe0 	.word	0x00021fe0

0000f950 <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f950:	b580      	push	{r7, lr}
    f952:	b088      	sub	sp, #32
    f954:	af02      	add	r7, sp, #8
    f956:	60f8      	str	r0, [r7, #12]
    f958:	60b9      	str	r1, [r7, #8]
    f95a:	607a      	str	r2, [r7, #4]
    f95c:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    f95e:	68f8      	ldr	r0, [r7, #12]
    f960:	f7ff ff28 	bl	f7b4 <MP_OBJ_IS_OBJ>
    f964:	4603      	mov	r3, r0
    f966:	2b00      	cmp	r3, #0
    f968:	d004      	beq.n	f974 <fun_builtin_3_call+0x24>
    f96a:	68fb      	ldr	r3, [r7, #12]
    f96c:	681b      	ldr	r3, [r3, #0]
    f96e:	4a11      	ldr	r2, [pc, #68]	; (f9b4 <fun_builtin_3_call+0x64>)
    f970:	4293      	cmp	r3, r2
    f972:	d005      	beq.n	f980 <fun_builtin_3_call+0x30>
    f974:	4b10      	ldr	r3, [pc, #64]	; (f9b8 <fun_builtin_3_call+0x68>)
    f976:	4a11      	ldr	r2, [pc, #68]	; (f9bc <fun_builtin_3_call+0x6c>)
    f978:	215f      	movs	r1, #95	; 0x5f
    f97a:	4811      	ldr	r0, [pc, #68]	; (f9c0 <fun_builtin_3_call+0x70>)
    f97c:	f00b fc32 	bl	1b1e4 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f980:	68fb      	ldr	r3, [r7, #12]
    f982:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    f984:	2300      	movs	r3, #0
    f986:	9300      	str	r3, [sp, #0]
    f988:	2303      	movs	r3, #3
    f98a:	2203      	movs	r2, #3
    f98c:	6879      	ldr	r1, [r7, #4]
    f98e:	68b8      	ldr	r0, [r7, #8]
    f990:	f7fd faba 	bl	cf08 <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    f994:	697b      	ldr	r3, [r7, #20]
    f996:	685b      	ldr	r3, [r3, #4]
    f998:	683a      	ldr	r2, [r7, #0]
    f99a:	6810      	ldr	r0, [r2, #0]
    f99c:	683a      	ldr	r2, [r7, #0]
    f99e:	3204      	adds	r2, #4
    f9a0:	6811      	ldr	r1, [r2, #0]
    f9a2:	683a      	ldr	r2, [r7, #0]
    f9a4:	3208      	adds	r2, #8
    f9a6:	6812      	ldr	r2, [r2, #0]
    f9a8:	4798      	blx	r3
    f9aa:	4603      	mov	r3, r0
}
    f9ac:	4618      	mov	r0, r3
    f9ae:	3718      	adds	r7, #24
    f9b0:	46bd      	mov	sp, r7
    f9b2:	bd80      	pop	{r7, pc}
    f9b4:	00022138 	.word	0x00022138
    f9b8:	00022108 	.word	0x00022108
    f9bc:	000222b4 	.word	0x000222b4
    f9c0:	00021fe0 	.word	0x00021fe0

0000f9c4 <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f9c4:	b580      	push	{r7, lr}
    f9c6:	b08a      	sub	sp, #40	; 0x28
    f9c8:	af02      	add	r7, sp, #8
    f9ca:	60f8      	str	r0, [r7, #12]
    f9cc:	60b9      	str	r1, [r7, #8]
    f9ce:	607a      	str	r2, [r7, #4]
    f9d0:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    f9d2:	68f8      	ldr	r0, [r7, #12]
    f9d4:	f7ff feee 	bl	f7b4 <MP_OBJ_IS_OBJ>
    f9d8:	4603      	mov	r3, r0
    f9da:	2b00      	cmp	r3, #0
    f9dc:	d004      	beq.n	f9e8 <fun_builtin_var_call+0x24>
    f9de:	68fb      	ldr	r3, [r7, #12]
    f9e0:	681b      	ldr	r3, [r3, #0]
    f9e2:	4a21      	ldr	r2, [pc, #132]	; (fa68 <fun_builtin_var_call+0xa4>)
    f9e4:	4293      	cmp	r3, r2
    f9e6:	d005      	beq.n	f9f4 <fun_builtin_var_call+0x30>
    f9e8:	4b20      	ldr	r3, [pc, #128]	; (fa6c <fun_builtin_var_call+0xa8>)
    f9ea:	4a21      	ldr	r2, [pc, #132]	; (fa70 <fun_builtin_var_call+0xac>)
    f9ec:	216d      	movs	r1, #109	; 0x6d
    f9ee:	4821      	ldr	r0, [pc, #132]	; (fa74 <fun_builtin_var_call+0xb0>)
    f9f0:	f00b fbf8 	bl	1b1e4 <__assert_func>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);
    f9f4:	68fb      	ldr	r3, [r7, #12]
    f9f6:	61fb      	str	r3, [r7, #28]

    // check number of arguments
    mp_arg_check_num(n_args, n_kw, self->n_args_min, self->n_args_max, self->is_kw);
    f9f8:	69fb      	ldr	r3, [r7, #28]
    f9fa:	889b      	ldrh	r3, [r3, #4]
    f9fc:	f3c3 034e 	ubfx	r3, r3, #1, #15
    fa00:	b29b      	uxth	r3, r3
    fa02:	461a      	mov	r2, r3
    fa04:	69fb      	ldr	r3, [r7, #28]
    fa06:	88db      	ldrh	r3, [r3, #6]
    fa08:	4619      	mov	r1, r3
    fa0a:	69fb      	ldr	r3, [r7, #28]
    fa0c:	791b      	ldrb	r3, [r3, #4]
    fa0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    fa12:	b2db      	uxtb	r3, r3
    fa14:	9300      	str	r3, [sp, #0]
    fa16:	460b      	mov	r3, r1
    fa18:	6879      	ldr	r1, [r7, #4]
    fa1a:	68b8      	ldr	r0, [r7, #8]
    fa1c:	f7fd fa74 	bl	cf08 <mp_arg_check_num>

    if (self->is_kw) {
    fa20:	69fb      	ldr	r3, [r7, #28]
    fa22:	791b      	ldrb	r3, [r3, #4]
    fa24:	f003 0301 	and.w	r3, r3, #1
    fa28:	b2db      	uxtb	r3, r3
    fa2a:	2b00      	cmp	r3, #0
    fa2c:	d012      	beq.n	fa54 <fun_builtin_var_call+0x90>
        // function allows keywords

        // we create a map directly from the given args array
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
    fa2e:	68bb      	ldr	r3, [r7, #8]
    fa30:	009b      	lsls	r3, r3, #2
    fa32:	683a      	ldr	r2, [r7, #0]
    fa34:	441a      	add	r2, r3
    fa36:	f107 0310 	add.w	r3, r7, #16
    fa3a:	6879      	ldr	r1, [r7, #4]
    fa3c:	4618      	mov	r0, r3
    fa3e:	f7fd fbe4 	bl	d20a <mp_map_init_fixed_table>

        return self->fun.kw(n_args, args, &kw_args);
    fa42:	69fb      	ldr	r3, [r7, #28]
    fa44:	689b      	ldr	r3, [r3, #8]
    fa46:	f107 0210 	add.w	r2, r7, #16
    fa4a:	6839      	ldr	r1, [r7, #0]
    fa4c:	68b8      	ldr	r0, [r7, #8]
    fa4e:	4798      	blx	r3
    fa50:	4603      	mov	r3, r0
    fa52:	e005      	b.n	fa60 <fun_builtin_var_call+0x9c>

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
    fa54:	69fb      	ldr	r3, [r7, #28]
    fa56:	689b      	ldr	r3, [r3, #8]
    fa58:	6839      	ldr	r1, [r7, #0]
    fa5a:	68b8      	ldr	r0, [r7, #8]
    fa5c:	4798      	blx	r3
    fa5e:	4603      	mov	r3, r0
    }
}
    fa60:	4618      	mov	r0, r3
    fa62:	3720      	adds	r7, #32
    fa64:	46bd      	mov	sp, r7
    fa66:	bd80      	pop	{r7, pc}
    fa68:	000221a8 	.word	0x000221a8
    fa6c:	00022174 	.word	0x00022174
    fa70:	000222c8 	.word	0x000222c8
    fa74:	00021fe0 	.word	0x00021fe0

0000fa78 <mp_obj_code_get_name>:
};

/******************************************************************************/
/* byte code functions                                                        */

qstr mp_obj_code_get_name(const byte *code_info) {
    fa78:	b580      	push	{r7, lr}
    fa7a:	b082      	sub	sp, #8
    fa7c:	af00      	add	r7, sp, #0
    fa7e:	6078      	str	r0, [r7, #4]
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
    fa80:	6878      	ldr	r0, [r7, #4]
    fa82:	f00a fbe5 	bl	1a250 <mp_decode_uint_skip>
    fa86:	6078      	str	r0, [r7, #4]
    #if MICROPY_PERSISTENT_CODE
    return code_info[0] | (code_info[1] << 8);
    fa88:	687b      	ldr	r3, [r7, #4]
    fa8a:	781b      	ldrb	r3, [r3, #0]
    fa8c:	461a      	mov	r2, r3
    fa8e:	687b      	ldr	r3, [r7, #4]
    fa90:	3301      	adds	r3, #1
    fa92:	781b      	ldrb	r3, [r3, #0]
    fa94:	021b      	lsls	r3, r3, #8
    fa96:	4313      	orrs	r3, r2
    #else
    return mp_decode_uint_value(code_info);
    #endif
}
    fa98:	4618      	mov	r0, r3
    fa9a:	3708      	adds	r7, #8
    fa9c:	46bd      	mov	sp, r7
    fa9e:	bd80      	pop	{r7, pc}

0000faa0 <mp_obj_fun_get_name>:

#if MICROPY_EMIT_NATIVE
STATIC const mp_obj_type_t mp_type_fun_native;
#endif

qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
    faa0:	b580      	push	{r7, lr}
    faa2:	b084      	sub	sp, #16
    faa4:	af00      	add	r7, sp, #0
    faa6:	6078      	str	r0, [r7, #4]
    const mp_obj_fun_bc_t *fun = MP_OBJ_TO_PTR(fun_in);
    faa8:	687b      	ldr	r3, [r7, #4]
    faaa:	60fb      	str	r3, [r7, #12]
        // TODO native functions don't have name stored
        return MP_QSTR_;
    }
    #endif

    const byte *bc = fun->bytecode;
    faac:	68fb      	ldr	r3, [r7, #12]
    faae:	689b      	ldr	r3, [r3, #8]
    fab0:	60bb      	str	r3, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_state
    fab2:	68b8      	ldr	r0, [r7, #8]
    fab4:	f00a fbcc 	bl	1a250 <mp_decode_uint_skip>
    fab8:	60b8      	str	r0, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
    faba:	68b8      	ldr	r0, [r7, #8]
    fabc:	f00a fbc8 	bl	1a250 <mp_decode_uint_skip>
    fac0:	60b8      	str	r0, [r7, #8]
    bc++; // skip scope_params
    fac2:	68bb      	ldr	r3, [r7, #8]
    fac4:	3301      	adds	r3, #1
    fac6:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_pos_args
    fac8:	68bb      	ldr	r3, [r7, #8]
    faca:	3301      	adds	r3, #1
    facc:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_kwonly_args
    face:	68bb      	ldr	r3, [r7, #8]
    fad0:	3301      	adds	r3, #1
    fad2:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_def_pos_args
    fad4:	68bb      	ldr	r3, [r7, #8]
    fad6:	3301      	adds	r3, #1
    fad8:	60bb      	str	r3, [r7, #8]
    return mp_obj_code_get_name(bc);
    fada:	68b8      	ldr	r0, [r7, #8]
    fadc:	f7ff ffcc 	bl	fa78 <mp_obj_code_get_name>
    fae0:	4603      	mov	r3, r0
}
    fae2:	4618      	mov	r0, r3
    fae4:	3710      	adds	r7, #16
    fae6:	46bd      	mov	sp, r7
    fae8:	bd80      	pop	{r7, pc}

0000faea <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    faea:	b580      	push	{r7, lr}
    faec:	b08c      	sub	sp, #48	; 0x30
    faee:	af00      	add	r7, sp, #0
    faf0:	60f8      	str	r0, [r7, #12]
    faf2:	60b9      	str	r1, [r7, #8]
    faf4:	607a      	str	r2, [r7, #4]
    faf6:	603b      	str	r3, [r7, #0]
    DEBUG_printf("Input n_args: " UINT_FMT ", n_kw: " UINT_FMT "\n", n_args, n_kw);
    DEBUG_printf("Input pos args: ");
    dump_args(args, n_args);
    DEBUG_printf("Input kw args: ");
    dump_args(args + n_args, n_kw * 2);
    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
    faf8:	68fb      	ldr	r3, [r7, #12]
    fafa:	623b      	str	r3, [r7, #32]
    DEBUG_printf("Func n_def_args: %d\n", self->n_def_args);

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
    fafc:	6a3b      	ldr	r3, [r7, #32]
    fafe:	689b      	ldr	r3, [r3, #8]
    fb00:	4618      	mov	r0, r3
    fb02:	f00a fb98 	bl	1a236 <mp_decode_uint_value>
    fb06:	61f8      	str	r0, [r7, #28]
    fb08:	6a3b      	ldr	r3, [r7, #32]
    fb0a:	689b      	ldr	r3, [r3, #8]
    fb0c:	4618      	mov	r0, r3
    fb0e:	f00a fb9f 	bl	1a250 <mp_decode_uint_skip>
    fb12:	4603      	mov	r3, r0
    fb14:	4618      	mov	r0, r3
    fb16:	f00a fb8e 	bl	1a236 <mp_decode_uint_value>
    fb1a:	61b8      	str	r0, [r7, #24]
    fb1c:	69ba      	ldr	r2, [r7, #24]
    fb1e:	4613      	mov	r3, r2
    fb20:	005b      	lsls	r3, r3, #1
    fb22:	441a      	add	r2, r3
    fb24:	69fb      	ldr	r3, [r7, #28]
    fb26:	4413      	add	r3, r2
    fb28:	009b      	lsls	r3, r3, #2
    fb2a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    fb2c:	2300      	movs	r3, #0
    fb2e:	62bb      	str	r3, [r7, #40]	; 0x28
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
    fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fb32:	2b2c      	cmp	r3, #44	; 0x2c
    fb34:	d905      	bls.n	fb42 <fun_bc_call+0x58>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    fb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fb38:	3314      	adds	r3, #20
    fb3a:	4618      	mov	r0, r3
    fb3c:	f7f0 fc05 	bl	34a <m_malloc_maybe>
    fb40:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (code_state == NULL) {
    fb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb44:	2b00      	cmp	r3, #0
    fb46:	d10e      	bne.n	fb66 <fun_bc_call+0x7c>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
    fb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fb4a:	3314      	adds	r3, #20
    fb4c:	3307      	adds	r3, #7
    fb4e:	3307      	adds	r3, #7
    fb50:	08db      	lsrs	r3, r3, #3
    fb52:	00db      	lsls	r3, r3, #3
    fb54:	ebad 0d03 	sub.w	sp, sp, r3
    fb58:	466b      	mov	r3, sp
    fb5a:	3307      	adds	r3, #7
    fb5c:	08db      	lsrs	r3, r3, #3
    fb5e:	00db      	lsls	r3, r3, #3
    fb60:	62bb      	str	r3, [r7, #40]	; 0x28
        state_size = 0; // indicate that we allocated using alloca
    fb62:	2300      	movs	r3, #0
    fb64:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
    fb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb68:	6a3a      	ldr	r2, [r7, #32]
    fb6a:	601a      	str	r2, [r3, #0]
    fb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb6e:	2200      	movs	r2, #0
    fb70:	605a      	str	r2, [r3, #4]
    fb72:	683b      	ldr	r3, [r7, #0]
    fb74:	687a      	ldr	r2, [r7, #4]
    fb76:	68b9      	ldr	r1, [r7, #8]
    fb78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fb7a:	f00a fb84 	bl	1a286 <mp_setup_code_state>
    fb7e:	f7ff fe2b 	bl	f7d8 <mp_globals_get>
    fb82:	4602      	mov	r2, r0
    fb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb86:	611a      	str	r2, [r3, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
    fb88:	6a3b      	ldr	r3, [r7, #32]
    fb8a:	685b      	ldr	r3, [r3, #4]
    fb8c:	4618      	mov	r0, r3
    fb8e:	f7ff fe2f 	bl	f7f0 <mp_globals_set>
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
    fb92:	2100      	movs	r1, #0
    fb94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fb96:	f009 fb9f 	bl	192d8 <mp_execute_bytecode>
    fb9a:	6178      	str	r0, [r7, #20]
    mp_globals_set(code_state->old_globals);
    fb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb9e:	691b      	ldr	r3, [r3, #16]
    fba0:	4618      	mov	r0, r3
    fba2:	f7ff fe25 	bl	f7f0 <mp_globals_set>
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fba6:	697b      	ldr	r3, [r7, #20]
    fba8:	2b00      	cmp	r3, #0
    fbaa:	d104      	bne.n	fbb6 <fun_bc_call+0xcc>
        // return value is in *sp
        result = *code_state->sp;
    fbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbae:	689b      	ldr	r3, [r3, #8]
    fbb0:	681b      	ldr	r3, [r3, #0]
    fbb2:	627b      	str	r3, [r7, #36]	; 0x24
    fbb4:	e011      	b.n	fbda <fun_bc_call+0xf0>
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
    fbb6:	697b      	ldr	r3, [r7, #20]
    fbb8:	2b02      	cmp	r3, #2
    fbba:	d006      	beq.n	fbca <fun_bc_call+0xe0>
    fbbc:	4b10      	ldr	r3, [pc, #64]	; (fc00 <fun_bc_call+0x116>)
    fbbe:	4a11      	ldr	r2, [pc, #68]	; (fc04 <fun_bc_call+0x11a>)
    fbc0:	f240 113f 	movw	r1, #319	; 0x13f
    fbc4:	4810      	ldr	r0, [pc, #64]	; (fc08 <fun_bc_call+0x11e>)
    fbc6:	f00b fb0d 	bl	1b1e4 <__assert_func>
        // return value is in fastn[0]==state[n_state - 1]
        result = code_state->state[n_state - 1];
    fbca:	69fb      	ldr	r3, [r7, #28]
    fbcc:	3b01      	subs	r3, #1
    fbce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fbd0:	3304      	adds	r3, #4
    fbd2:	009b      	lsls	r3, r3, #2
    fbd4:	4413      	add	r3, r2
    fbd6:	685b      	ldr	r3, [r3, #4]
    fbd8:	627b      	str	r3, [r7, #36]	; 0x24

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
    fbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fbdc:	2b00      	cmp	r3, #0
    fbde:	d002      	beq.n	fbe6 <fun_bc_call+0xfc>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    fbe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fbe2:	f7f0 fbf9 	bl	3d8 <m_free>
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fbe6:	697b      	ldr	r3, [r7, #20]
    fbe8:	2b00      	cmp	r3, #0
    fbea:	d101      	bne.n	fbf0 <fun_bc_call+0x106>
        return result;
    fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fbee:	e002      	b.n	fbf6 <fun_bc_call+0x10c>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    fbf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    fbf2:	f7f0 fb75 	bl	2e0 <nlr_jump>
    }
}
    fbf6:	4618      	mov	r0, r3
    fbf8:	3730      	adds	r7, #48	; 0x30
    fbfa:	46bd      	mov	sp, r7
    fbfc:	bd80      	pop	{r7, pc}
    fbfe:	bf00      	nop
    fc00:	000221e4 	.word	0x000221e4
    fc04:	000222e0 	.word	0x000222e0
    fc08:	00021fe0 	.word	0x00021fe0

0000fc0c <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = mp_obj_fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
    fc0c:	b580      	push	{r7, lr}
    fc0e:	b088      	sub	sp, #32
    fc10:	af00      	add	r7, sp, #0
    fc12:	60f8      	str	r0, [r7, #12]
    fc14:	60b9      	str	r1, [r7, #8]
    fc16:	607a      	str	r2, [r7, #4]
    fc18:	603b      	str	r3, [r7, #0]
    size_t n_def_args = 0;
    fc1a:	2300      	movs	r3, #0
    fc1c:	61fb      	str	r3, [r7, #28]
    size_t n_extra_args = 0;
    fc1e:	2300      	movs	r3, #0
    fc20:	61bb      	str	r3, [r7, #24]
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
    fc22:	68fb      	ldr	r3, [r7, #12]
    fc24:	617b      	str	r3, [r7, #20]
    if (def_args_in != MP_OBJ_NULL) {
    fc26:	68fb      	ldr	r3, [r7, #12]
    fc28:	2b00      	cmp	r3, #0
    fc2a:	d017      	beq.n	fc5c <mp_obj_new_fun_bc+0x50>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
    fc2c:	68f8      	ldr	r0, [r7, #12]
    fc2e:	f7ff fdc1 	bl	f7b4 <MP_OBJ_IS_OBJ>
    fc32:	4603      	mov	r3, r0
    fc34:	2b00      	cmp	r3, #0
    fc36:	d004      	beq.n	fc42 <mp_obj_new_fun_bc+0x36>
    fc38:	68fb      	ldr	r3, [r7, #12]
    fc3a:	681b      	ldr	r3, [r3, #0]
    fc3c:	4a23      	ldr	r2, [pc, #140]	; (fccc <mp_obj_new_fun_bc+0xc0>)
    fc3e:	4293      	cmp	r3, r2
    fc40:	d006      	beq.n	fc50 <mp_obj_new_fun_bc+0x44>
    fc42:	4b23      	ldr	r3, [pc, #140]	; (fcd0 <mp_obj_new_fun_bc+0xc4>)
    fc44:	4a23      	ldr	r2, [pc, #140]	; (fcd4 <mp_obj_new_fun_bc+0xc8>)
    fc46:	f44f 71b9 	mov.w	r1, #370	; 0x172
    fc4a:	4823      	ldr	r0, [pc, #140]	; (fcd8 <mp_obj_new_fun_bc+0xcc>)
    fc4c:	f00b faca 	bl	1b1e4 <__assert_func>
        n_def_args = def_args->len;
    fc50:	697b      	ldr	r3, [r7, #20]
    fc52:	685b      	ldr	r3, [r3, #4]
    fc54:	61fb      	str	r3, [r7, #28]
        n_extra_args = def_args->len;
    fc56:	697b      	ldr	r3, [r7, #20]
    fc58:	685b      	ldr	r3, [r3, #4]
    fc5a:	61bb      	str	r3, [r7, #24]
    }
    if (def_kw_args != MP_OBJ_NULL) {
    fc5c:	68bb      	ldr	r3, [r7, #8]
    fc5e:	2b00      	cmp	r3, #0
    fc60:	d002      	beq.n	fc68 <mp_obj_new_fun_bc+0x5c>
        n_extra_args += 1;
    fc62:	69bb      	ldr	r3, [r7, #24]
    fc64:	3301      	adds	r3, #1
    fc66:	61bb      	str	r3, [r7, #24]
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
    fc68:	69bb      	ldr	r3, [r7, #24]
    fc6a:	3304      	adds	r3, #4
    fc6c:	009b      	lsls	r3, r3, #2
    fc6e:	4618      	mov	r0, r3
    fc70:	f7f0 fb54 	bl	31c <m_malloc>
    fc74:	6138      	str	r0, [r7, #16]
    o->base.type = &mp_type_fun_bc;
    fc76:	693b      	ldr	r3, [r7, #16]
    fc78:	4a18      	ldr	r2, [pc, #96]	; (fcdc <mp_obj_new_fun_bc+0xd0>)
    fc7a:	601a      	str	r2, [r3, #0]
    o->globals = mp_globals_get();
    fc7c:	f7ff fdac 	bl	f7d8 <mp_globals_get>
    fc80:	4602      	mov	r2, r0
    fc82:	693b      	ldr	r3, [r7, #16]
    fc84:	605a      	str	r2, [r3, #4]
    o->bytecode = code;
    fc86:	693b      	ldr	r3, [r7, #16]
    fc88:	687a      	ldr	r2, [r7, #4]
    fc8a:	609a      	str	r2, [r3, #8]
    o->const_table = const_table;
    fc8c:	693b      	ldr	r3, [r7, #16]
    fc8e:	683a      	ldr	r2, [r7, #0]
    fc90:	60da      	str	r2, [r3, #12]
    if (def_args != NULL) {
    fc92:	697b      	ldr	r3, [r7, #20]
    fc94:	2b00      	cmp	r3, #0
    fc96:	d00a      	beq.n	fcae <mp_obj_new_fun_bc+0xa2>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
    fc98:	693b      	ldr	r3, [r7, #16]
    fc9a:	f103 0010 	add.w	r0, r3, #16
    fc9e:	697b      	ldr	r3, [r7, #20]
    fca0:	f103 0108 	add.w	r1, r3, #8
    fca4:	69fb      	ldr	r3, [r7, #28]
    fca6:	009b      	lsls	r3, r3, #2
    fca8:	461a      	mov	r2, r3
    fcaa:	f00c fc59 	bl	1c560 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
    fcae:	68bb      	ldr	r3, [r7, #8]
    fcb0:	2b00      	cmp	r3, #0
    fcb2:	d005      	beq.n	fcc0 <mp_obj_new_fun_bc+0xb4>
        o->extra_args[n_def_args] = def_kw_args;
    fcb4:	693b      	ldr	r3, [r7, #16]
    fcb6:	69fa      	ldr	r2, [r7, #28]
    fcb8:	3204      	adds	r2, #4
    fcba:	68b9      	ldr	r1, [r7, #8]
    fcbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
    fcc0:	693b      	ldr	r3, [r7, #16]
}
    fcc2:	4618      	mov	r0, r3
    fcc4:	3720      	adds	r7, #32
    fcc6:	46bd      	mov	sp, r7
    fcc8:	bd80      	pop	{r7, pc}
    fcca:	bf00      	nop
    fccc:	00023488 	.word	0x00023488
    fcd0:	0002224c 	.word	0x0002224c
    fcd4:	000222ec 	.word	0x000222ec
    fcd8:	00021fe0 	.word	0x00021fe0
    fcdc:	00022210 	.word	0x00022210

0000fce0 <MP_OBJ_IS_OBJ>:
    fce0:	b480      	push	{r7}
    fce2:	b083      	sub	sp, #12
    fce4:	af00      	add	r7, sp, #0
    fce6:	6078      	str	r0, [r7, #4]
    fce8:	687b      	ldr	r3, [r7, #4]
    fcea:	f003 0303 	and.w	r3, r3, #3
    fcee:	2b00      	cmp	r3, #0
    fcf0:	bf0c      	ite	eq
    fcf2:	2301      	moveq	r3, #1
    fcf4:	2300      	movne	r3, #0
    fcf6:	b2db      	uxtb	r3, r3
    fcf8:	4618      	mov	r0, r3
    fcfa:	370c      	adds	r7, #12
    fcfc:	46bd      	mov	sp, r7
    fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd02:	4770      	bx	lr

0000fd04 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    fd04:	b480      	push	{r7}
    fd06:	af00      	add	r7, sp, #0
    fd08:	4b03      	ldr	r3, [pc, #12]	; (fd18 <mp_globals_get+0x14>)
    fd0a:	689b      	ldr	r3, [r3, #8]
    fd0c:	4618      	mov	r0, r3
    fd0e:	46bd      	mov	sp, r7
    fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd14:	4770      	bx	lr
    fd16:	bf00      	nop
    fd18:	20001240 	.word	0x20001240

0000fd1c <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    fd1c:	b480      	push	{r7}
    fd1e:	b083      	sub	sp, #12
    fd20:	af00      	add	r7, sp, #0
    fd22:	6078      	str	r0, [r7, #4]
    fd24:	4a04      	ldr	r2, [pc, #16]	; (fd38 <mp_globals_set+0x1c>)
    fd26:	687b      	ldr	r3, [r7, #4]
    fd28:	6093      	str	r3, [r2, #8]
    fd2a:	bf00      	nop
    fd2c:	370c      	adds	r7, #12
    fd2e:	46bd      	mov	sp, r7
    fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd34:	4770      	bx	lr
    fd36:	bf00      	nop
    fd38:	20001240 	.word	0x20001240

0000fd3c <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fd3c:	b580      	push	{r7, lr}
    fd3e:	b088      	sub	sp, #32
    fd40:	af00      	add	r7, sp, #0
    fd42:	60f8      	str	r0, [r7, #12]
    fd44:	60b9      	str	r1, [r7, #8]
    fd46:	607a      	str	r2, [r7, #4]
    fd48:	603b      	str	r3, [r7, #0]
    // A generating function is just a bytecode function with type mp_type_gen_wrap
    mp_obj_fun_bc_t *self_fun = MP_OBJ_TO_PTR(self_in);
    fd4a:	68fb      	ldr	r3, [r7, #12]
    fd4c:	61fb      	str	r3, [r7, #28]

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
    fd4e:	69fb      	ldr	r3, [r7, #28]
    fd50:	689b      	ldr	r3, [r3, #8]
    fd52:	4618      	mov	r0, r3
    fd54:	f00a fa6f 	bl	1a236 <mp_decode_uint_value>
    fd58:	61b8      	str	r0, [r7, #24]
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
    fd5a:	69fb      	ldr	r3, [r7, #28]
    fd5c:	689b      	ldr	r3, [r3, #8]
    fd5e:	4618      	mov	r0, r3
    fd60:	f00a fa76 	bl	1a250 <mp_decode_uint_skip>
    fd64:	4603      	mov	r3, r0
    fd66:	4618      	mov	r0, r3
    fd68:	f00a fa65 	bl	1a236 <mp_decode_uint_value>
    fd6c:	6178      	str	r0, [r7, #20]

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
    fd6e:	697a      	ldr	r2, [r7, #20]
    fd70:	4613      	mov	r3, r2
    fd72:	005b      	lsls	r3, r3, #1
    fd74:	441a      	add	r2, r3
    fd76:	69bb      	ldr	r3, [r7, #24]
    fd78:	4413      	add	r3, r2
    fd7a:	3307      	adds	r3, #7
    fd7c:	009b      	lsls	r3, r3, #2
    fd7e:	4618      	mov	r0, r3
    fd80:	f7f0 facc 	bl	31c <m_malloc>
    fd84:	6138      	str	r0, [r7, #16]
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
    fd86:	693b      	ldr	r3, [r7, #16]
    fd88:	4a0c      	ldr	r2, [pc, #48]	; (fdbc <gen_wrap_call+0x80>)
    fd8a:	601a      	str	r2, [r3, #0]

    o->globals = self_fun->globals;
    fd8c:	69fb      	ldr	r3, [r7, #28]
    fd8e:	685a      	ldr	r2, [r3, #4]
    fd90:	693b      	ldr	r3, [r7, #16]
    fd92:	605a      	str	r2, [r3, #4]
    o->code_state.fun_bc = self_fun;
    fd94:	693b      	ldr	r3, [r7, #16]
    fd96:	69fa      	ldr	r2, [r7, #28]
    fd98:	609a      	str	r2, [r3, #8]
    o->code_state.ip = 0;
    fd9a:	693b      	ldr	r3, [r7, #16]
    fd9c:	2200      	movs	r2, #0
    fd9e:	60da      	str	r2, [r3, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
    fda0:	693b      	ldr	r3, [r7, #16]
    fda2:	f103 0008 	add.w	r0, r3, #8
    fda6:	683b      	ldr	r3, [r7, #0]
    fda8:	687a      	ldr	r2, [r7, #4]
    fdaa:	68b9      	ldr	r1, [r7, #8]
    fdac:	f00a fa6b 	bl	1a286 <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
    fdb0:	693b      	ldr	r3, [r7, #16]
}
    fdb2:	4618      	mov	r0, r3
    fdb4:	3720      	adds	r7, #32
    fdb6:	46bd      	mov	sp, r7
    fdb8:	bd80      	pop	{r7, pc}
    fdba:	bf00      	nop
    fdbc:	000224cc 	.word	0x000224cc

0000fdc0 <gen_instance_print>:
};

/******************************************************************************/
/* generator instance                                                         */

STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    fdc0:	b580      	push	{r7, lr}
    fdc2:	b086      	sub	sp, #24
    fdc4:	af00      	add	r7, sp, #0
    fdc6:	60f8      	str	r0, [r7, #12]
    fdc8:	60b9      	str	r1, [r7, #8]
    fdca:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    fdcc:	68bb      	ldr	r3, [r7, #8]
    fdce:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
    fdd0:	697b      	ldr	r3, [r7, #20]
    fdd2:	689b      	ldr	r3, [r3, #8]
    fdd4:	4618      	mov	r0, r3
    fdd6:	f7ff fe63 	bl	faa0 <mp_obj_fun_get_name>
    fdda:	4602      	mov	r2, r0
    fddc:	697b      	ldr	r3, [r7, #20]
    fdde:	4904      	ldr	r1, [pc, #16]	; (fdf0 <gen_instance_print+0x30>)
    fde0:	68f8      	ldr	r0, [r7, #12]
    fde2:	f7f2 f855 	bl	1e90 <mp_printf>
}
    fde6:	bf00      	nop
    fde8:	3718      	adds	r7, #24
    fdea:	46bd      	mov	sp, r7
    fdec:	bd80      	pop	{r7, pc}
    fdee:	bf00      	nop
    fdf0:	0002233c 	.word	0x0002233c

0000fdf4 <mp_obj_gen_resume>:

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    fdf4:	b580      	push	{r7, lr}
    fdf6:	b088      	sub	sp, #32
    fdf8:	af00      	add	r7, sp, #0
    fdfa:	60f8      	str	r0, [r7, #12]
    fdfc:	60b9      	str	r1, [r7, #8]
    fdfe:	607a      	str	r2, [r7, #4]
    fe00:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
    fe02:	68f8      	ldr	r0, [r7, #12]
    fe04:	f7ff ff6c 	bl	fce0 <MP_OBJ_IS_OBJ>
    fe08:	4603      	mov	r3, r0
    fe0a:	2b00      	cmp	r3, #0
    fe0c:	d004      	beq.n	fe18 <mp_obj_gen_resume+0x24>
    fe0e:	68fb      	ldr	r3, [r7, #12]
    fe10:	681b      	ldr	r3, [r3, #0]
    fe12:	4a45      	ldr	r2, [pc, #276]	; (ff28 <mp_obj_gen_resume+0x134>)
    fe14:	4293      	cmp	r3, r2
    fe16:	d005      	beq.n	fe24 <mp_obj_gen_resume+0x30>
    fe18:	4b44      	ldr	r3, [pc, #272]	; (ff2c <mp_obj_gen_resume+0x138>)
    fe1a:	4a45      	ldr	r2, [pc, #276]	; (ff30 <mp_obj_gen_resume+0x13c>)
    fe1c:	2157      	movs	r1, #87	; 0x57
    fe1e:	4845      	ldr	r0, [pc, #276]	; (ff34 <mp_obj_gen_resume+0x140>)
    fe20:	f00b f9e0 	bl	1b1e4 <__assert_func>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    fe24:	68fb      	ldr	r3, [r7, #12]
    fe26:	61fb      	str	r3, [r7, #28]
    if (self->code_state.ip == 0) {
    fe28:	69fb      	ldr	r3, [r7, #28]
    fe2a:	68db      	ldr	r3, [r3, #12]
    fe2c:	2b00      	cmp	r3, #0
    fe2e:	d104      	bne.n	fe3a <mp_obj_gen_resume+0x46>
        // Trying to resume already stopped generator
        *ret_val = MP_OBJ_STOP_ITERATION;
    fe30:	683b      	ldr	r3, [r7, #0]
    fe32:	2204      	movs	r2, #4
    fe34:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_NORMAL;
    fe36:	2300      	movs	r3, #0
    fe38:	e072      	b.n	ff20 <mp_obj_gen_resume+0x12c>
    }
    if (self->code_state.sp == self->code_state.state - 1) {
    fe3a:	69fb      	ldr	r3, [r7, #28]
    fe3c:	691a      	ldr	r2, [r3, #16]
    fe3e:	69fb      	ldr	r3, [r7, #28]
    fe40:	331c      	adds	r3, #28
    fe42:	3b04      	subs	r3, #4
    fe44:	429a      	cmp	r2, r3
    fe46:	d106      	bne.n	fe56 <mp_obj_gen_resume+0x62>
        if (send_value != mp_const_none) {
    fe48:	68bb      	ldr	r3, [r7, #8]
    fe4a:	4a3b      	ldr	r2, [pc, #236]	; (ff38 <mp_obj_gen_resume+0x144>)
    fe4c:	4293      	cmp	r3, r2
    fe4e:	d015      	beq.n	fe7c <mp_obj_gen_resume+0x88>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
    fe50:	483a      	ldr	r0, [pc, #232]	; (ff3c <mp_obj_gen_resume+0x148>)
    fe52:	f7fd f833 	bl	cebc <mp_raise_TypeError>
        }
    } else {
        #if MICROPY_PY_GENERATOR_PEND_THROW
        // If exception is pending (set using .pend_throw()), process it now.
        if (*self->code_state.sp != mp_const_none) {
    fe56:	69fb      	ldr	r3, [r7, #28]
    fe58:	691b      	ldr	r3, [r3, #16]
    fe5a:	681b      	ldr	r3, [r3, #0]
    fe5c:	4a36      	ldr	r2, [pc, #216]	; (ff38 <mp_obj_gen_resume+0x144>)
    fe5e:	4293      	cmp	r3, r2
    fe60:	d008      	beq.n	fe74 <mp_obj_gen_resume+0x80>
            throw_value = *self->code_state.sp;
    fe62:	69fb      	ldr	r3, [r7, #28]
    fe64:	691b      	ldr	r3, [r3, #16]
    fe66:	681b      	ldr	r3, [r3, #0]
    fe68:	607b      	str	r3, [r7, #4]
            *self->code_state.sp = MP_OBJ_NULL;
    fe6a:	69fb      	ldr	r3, [r7, #28]
    fe6c:	691b      	ldr	r3, [r3, #16]
    fe6e:	2200      	movs	r2, #0
    fe70:	601a      	str	r2, [r3, #0]
    fe72:	e003      	b.n	fe7c <mp_obj_gen_resume+0x88>
        } else
        #endif
        {
            *self->code_state.sp = send_value;
    fe74:	69fb      	ldr	r3, [r7, #28]
    fe76:	691b      	ldr	r3, [r3, #16]
    fe78:	68ba      	ldr	r2, [r7, #8]
    fe7a:	601a      	str	r2, [r3, #0]
        }
    }

    // We set self->globals=NULL while executing, for a sentinel to ensure the generator
    // cannot be reentered during execution
    if (self->globals == NULL) {
    fe7c:	69fb      	ldr	r3, [r7, #28]
    fe7e:	685b      	ldr	r3, [r3, #4]
    fe80:	2b00      	cmp	r3, #0
    fe82:	d102      	bne.n	fe8a <mp_obj_gen_resume+0x96>
        mp_raise_ValueError("generator already executing");
    fe84:	482e      	ldr	r0, [pc, #184]	; (ff40 <mp_obj_gen_resume+0x14c>)
    fe86:	f7fd f80e 	bl	cea6 <mp_raise_ValueError>
    }

    // Set up the correct globals context for the generator and execute it
    self->code_state.old_globals = mp_globals_get();
    fe8a:	f7ff ff3b 	bl	fd04 <mp_globals_get>
    fe8e:	4602      	mov	r2, r0
    fe90:	69fb      	ldr	r3, [r7, #28]
    fe92:	619a      	str	r2, [r3, #24]
    mp_globals_set(self->globals);
    fe94:	69fb      	ldr	r3, [r7, #28]
    fe96:	685b      	ldr	r3, [r3, #4]
    fe98:	4618      	mov	r0, r3
    fe9a:	f7ff ff3f 	bl	fd1c <mp_globals_set>
    self->globals = NULL;
    fe9e:	69fb      	ldr	r3, [r7, #28]
    fea0:	2200      	movs	r2, #0
    fea2:	605a      	str	r2, [r3, #4]
    mp_vm_return_kind_t ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
    fea4:	69fb      	ldr	r3, [r7, #28]
    fea6:	3308      	adds	r3, #8
    fea8:	6879      	ldr	r1, [r7, #4]
    feaa:	4618      	mov	r0, r3
    feac:	f009 fa14 	bl	192d8 <mp_execute_bytecode>
    feb0:	61b8      	str	r0, [r7, #24]
    self->globals = mp_globals_get();
    feb2:	f7ff ff27 	bl	fd04 <mp_globals_get>
    feb6:	4602      	mov	r2, r0
    feb8:	69fb      	ldr	r3, [r7, #28]
    feba:	605a      	str	r2, [r3, #4]
    mp_globals_set(self->code_state.old_globals);
    febc:	69fb      	ldr	r3, [r7, #28]
    febe:	699b      	ldr	r3, [r3, #24]
    fec0:	4618      	mov	r0, r3
    fec2:	f7ff ff2b 	bl	fd1c <mp_globals_set>

    switch (ret_kind) {
    fec6:	69bb      	ldr	r3, [r7, #24]
    fec8:	2b01      	cmp	r3, #1
    feca:	d00a      	beq.n	fee2 <mp_obj_gen_resume+0xee>
    fecc:	2b02      	cmp	r3, #2
    fece:	d012      	beq.n	fef6 <mp_obj_gen_resume+0x102>
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            // TODO: check how return with value behaves under such conditions
            // in CPython.
            self->code_state.ip = 0;
    fed0:	69fb      	ldr	r3, [r7, #28]
    fed2:	2200      	movs	r2, #0
    fed4:	60da      	str	r2, [r3, #12]
            *ret_val = *self->code_state.sp;
    fed6:	69fb      	ldr	r3, [r7, #28]
    fed8:	691b      	ldr	r3, [r3, #16]
    feda:	681a      	ldr	r2, [r3, #0]
    fedc:	683b      	ldr	r3, [r7, #0]
    fede:	601a      	str	r2, [r3, #0]
            break;
    fee0:	e01d      	b.n	ff1e <mp_obj_gen_resume+0x12a>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
    fee2:	69fb      	ldr	r3, [r7, #28]
    fee4:	691b      	ldr	r3, [r3, #16]
    fee6:	681a      	ldr	r2, [r3, #0]
    fee8:	683b      	ldr	r3, [r7, #0]
    feea:	601a      	str	r2, [r3, #0]
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
    feec:	69fb      	ldr	r3, [r7, #28]
    feee:	691b      	ldr	r3, [r3, #16]
    fef0:	4a11      	ldr	r2, [pc, #68]	; (ff38 <mp_obj_gen_resume+0x144>)
    fef2:	601a      	str	r2, [r3, #0]
            #endif
            break;
    fef4:	e013      	b.n	ff1e <mp_obj_gen_resume+0x12a>

        case MP_VM_RETURN_EXCEPTION: {
            size_t n_state = mp_decode_uint_value(self->code_state.fun_bc->bytecode);
    fef6:	69fb      	ldr	r3, [r7, #28]
    fef8:	689b      	ldr	r3, [r3, #8]
    fefa:	689b      	ldr	r3, [r3, #8]
    fefc:	4618      	mov	r0, r3
    fefe:	f00a f99a 	bl	1a236 <mp_decode_uint_value>
    ff02:	6178      	str	r0, [r7, #20]
            self->code_state.ip = 0;
    ff04:	69fb      	ldr	r3, [r7, #28]
    ff06:	2200      	movs	r2, #0
    ff08:	60da      	str	r2, [r3, #12]
            *ret_val = self->code_state.state[n_state - 1];
    ff0a:	697b      	ldr	r3, [r7, #20]
    ff0c:	3b01      	subs	r3, #1
    ff0e:	69fa      	ldr	r2, [r7, #28]
    ff10:	3306      	adds	r3, #6
    ff12:	009b      	lsls	r3, r3, #2
    ff14:	4413      	add	r3, r2
    ff16:	685a      	ldr	r2, [r3, #4]
    ff18:	683b      	ldr	r3, [r7, #0]
    ff1a:	601a      	str	r2, [r3, #0]
            break;
    ff1c:	bf00      	nop
        }
    }

    return ret_kind;
    ff1e:	69bb      	ldr	r3, [r7, #24]
}
    ff20:	4618      	mov	r0, r3
    ff22:	3720      	adds	r7, #32
    ff24:	46bd      	mov	sp, r7
    ff26:	bd80      	pop	{r7, pc}
    ff28:	000224cc 	.word	0x000224cc
    ff2c:	0002235c 	.word	0x0002235c
    ff30:	00022508 	.word	0x00022508
    ff34:	000223c0 	.word	0x000223c0
    ff38:	00022b54 	.word	0x00022b54
    ff3c:	000223d8 	.word	0x000223d8
    ff40:	00022410 	.word	0x00022410

0000ff44 <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
    ff44:	b580      	push	{r7, lr}
    ff46:	b086      	sub	sp, #24
    ff48:	af00      	add	r7, sp, #0
    ff4a:	60f8      	str	r0, [r7, #12]
    ff4c:	60b9      	str	r1, [r7, #8]
    ff4e:	607a      	str	r2, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
    ff50:	f107 0310 	add.w	r3, r7, #16
    ff54:	687a      	ldr	r2, [r7, #4]
    ff56:	68b9      	ldr	r1, [r7, #8]
    ff58:	68f8      	ldr	r0, [r7, #12]
    ff5a:	f7ff ff4b 	bl	fdf4 <mp_obj_gen_resume>
    ff5e:	4603      	mov	r3, r0
    ff60:	2b01      	cmp	r3, #1
    ff62:	d015      	beq.n	ff90 <gen_resume_and_raise+0x4c>
    ff64:	2b02      	cmp	r3, #2
    ff66:	d015      	beq.n	ff94 <gen_resume_and_raise+0x50>
        case MP_VM_RETURN_NORMAL:
        default:
            // Optimize return w/o value in case generator is used in for loop
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
    ff68:	693b      	ldr	r3, [r7, #16]
    ff6a:	4a1a      	ldr	r2, [pc, #104]	; (ffd4 <gen_resume_and_raise+0x90>)
    ff6c:	4293      	cmp	r3, r2
    ff6e:	d002      	beq.n	ff76 <gen_resume_and_raise+0x32>
    ff70:	693b      	ldr	r3, [r7, #16]
    ff72:	2b04      	cmp	r3, #4
    ff74:	d101      	bne.n	ff7a <gen_resume_and_raise+0x36>
                return MP_OBJ_STOP_ITERATION;
    ff76:	2304      	movs	r3, #4
    ff78:	e027      	b.n	ffca <gen_resume_and_raise+0x86>
            } else {
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
    ff7a:	f107 0310 	add.w	r3, r7, #16
    ff7e:	461a      	mov	r2, r3
    ff80:	2101      	movs	r1, #1
    ff82:	4815      	ldr	r0, [pc, #84]	; (ffd8 <gen_resume_and_raise+0x94>)
    ff84:	f7ff f9b6 	bl	f2f4 <mp_obj_new_exception_args>
    ff88:	4603      	mov	r3, r0
    ff8a:	4618      	mov	r0, r3
    ff8c:	f7f0 f9a8 	bl	2e0 <nlr_jump>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
    ff90:	693b      	ldr	r3, [r7, #16]
    ff92:	e01a      	b.n	ffca <gen_resume_and_raise+0x86>

        case MP_VM_RETURN_EXCEPTION:
            // TODO: Optimization of returning MP_OBJ_STOP_ITERATION is really part
            // of mp_iternext() protocol, but this function is called by other methods
            // too, which may not handled MP_OBJ_STOP_ITERATION.
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    ff94:	693b      	ldr	r3, [r7, #16]
    ff96:	4618      	mov	r0, r3
    ff98:	f7fd fba6 	bl	d6e8 <mp_obj_get_type>
    ff9c:	4603      	mov	r3, r0
    ff9e:	490e      	ldr	r1, [pc, #56]	; (ffd8 <gen_resume_and_raise+0x94>)
    ffa0:	4618      	mov	r0, r3
    ffa2:	f006 ffb3 	bl	16f0c <mp_obj_is_subclass_fast>
    ffa6:	4603      	mov	r3, r0
    ffa8:	2b00      	cmp	r3, #0
    ffaa:	d00a      	beq.n	ffc2 <gen_resume_and_raise+0x7e>
                mp_obj_t val = mp_obj_exception_get_value(ret);
    ffac:	693b      	ldr	r3, [r7, #16]
    ffae:	4618      	mov	r0, r3
    ffb0:	f7ff f92e 	bl	f210 <mp_obj_exception_get_value>
    ffb4:	6178      	str	r0, [r7, #20]
                if (val == mp_const_none) {
    ffb6:	697b      	ldr	r3, [r7, #20]
    ffb8:	4a06      	ldr	r2, [pc, #24]	; (ffd4 <gen_resume_and_raise+0x90>)
    ffba:	4293      	cmp	r3, r2
    ffbc:	d101      	bne.n	ffc2 <gen_resume_and_raise+0x7e>
                    return MP_OBJ_STOP_ITERATION;
    ffbe:	2304      	movs	r3, #4
    ffc0:	e003      	b.n	ffca <gen_resume_and_raise+0x86>
                }
            }
            nlr_raise(ret);
    ffc2:	693b      	ldr	r3, [r7, #16]
    ffc4:	4618      	mov	r0, r3
    ffc6:	f7f0 f98b 	bl	2e0 <nlr_jump>
    }
}
    ffca:	4618      	mov	r0, r3
    ffcc:	3718      	adds	r7, #24
    ffce:	46bd      	mov	sp, r7
    ffd0:	bd80      	pop	{r7, pc}
    ffd2:	bf00      	nop
    ffd4:	00022b54 	.word	0x00022b54
    ffd8:	000219e4 	.word	0x000219e4

0000ffdc <gen_instance_iternext>:

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
    ffdc:	b580      	push	{r7, lr}
    ffde:	b082      	sub	sp, #8
    ffe0:	af00      	add	r7, sp, #0
    ffe2:	6078      	str	r0, [r7, #4]
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
    ffe4:	2200      	movs	r2, #0
    ffe6:	4904      	ldr	r1, [pc, #16]	; (fff8 <gen_instance_iternext+0x1c>)
    ffe8:	6878      	ldr	r0, [r7, #4]
    ffea:	f7ff ffab 	bl	ff44 <gen_resume_and_raise>
    ffee:	4603      	mov	r3, r0
}
    fff0:	4618      	mov	r0, r3
    fff2:	3708      	adds	r7, #8
    fff4:	46bd      	mov	sp, r7
    fff6:	bd80      	pop	{r7, pc}
    fff8:	00022b54 	.word	0x00022b54

0000fffc <gen_instance_send>:

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
    fffc:	b580      	push	{r7, lr}
    fffe:	b084      	sub	sp, #16
   10000:	af00      	add	r7, sp, #0
   10002:	6078      	str	r0, [r7, #4]
   10004:	6039      	str	r1, [r7, #0]
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
   10006:	2200      	movs	r2, #0
   10008:	6839      	ldr	r1, [r7, #0]
   1000a:	6878      	ldr	r0, [r7, #4]
   1000c:	f7ff ff9a 	bl	ff44 <gen_resume_and_raise>
   10010:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   10012:	68fb      	ldr	r3, [r7, #12]
   10014:	2b04      	cmp	r3, #4
   10016:	d106      	bne.n	10026 <gen_instance_send+0x2a>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10018:	4805      	ldr	r0, [pc, #20]	; (10030 <gen_instance_send+0x34>)
   1001a:	f7ff f94d 	bl	f2b8 <mp_obj_new_exception>
   1001e:	4603      	mov	r3, r0
   10020:	4618      	mov	r0, r3
   10022:	f7f0 f95d 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10026:	68fb      	ldr	r3, [r7, #12]
    }
}
   10028:	4618      	mov	r0, r3
   1002a:	3710      	adds	r7, #16
   1002c:	46bd      	mov	sp, r7
   1002e:	bd80      	pop	{r7, pc}
   10030:	000219e4 	.word	0x000219e4

00010034 <gen_instance_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in);
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   10034:	b580      	push	{r7, lr}
   10036:	b084      	sub	sp, #16
   10038:	af00      	add	r7, sp, #0
   1003a:	6078      	str	r0, [r7, #4]
   1003c:	6039      	str	r1, [r7, #0]
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
   1003e:	687b      	ldr	r3, [r7, #4]
   10040:	2b02      	cmp	r3, #2
   10042:	d102      	bne.n	1004a <gen_instance_throw+0x16>
   10044:	683b      	ldr	r3, [r7, #0]
   10046:	685b      	ldr	r3, [r3, #4]
   10048:	e001      	b.n	1004e <gen_instance_throw+0x1a>
   1004a:	683b      	ldr	r3, [r7, #0]
   1004c:	689b      	ldr	r3, [r3, #8]
   1004e:	60fb      	str	r3, [r7, #12]

    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
   10050:	683b      	ldr	r3, [r7, #0]
   10052:	681b      	ldr	r3, [r3, #0]
   10054:	68fa      	ldr	r2, [r7, #12]
   10056:	490a      	ldr	r1, [pc, #40]	; (10080 <gen_instance_throw+0x4c>)
   10058:	4618      	mov	r0, r3
   1005a:	f7ff ff73 	bl	ff44 <gen_resume_and_raise>
   1005e:	60b8      	str	r0, [r7, #8]
    if (ret == MP_OBJ_STOP_ITERATION) {
   10060:	68bb      	ldr	r3, [r7, #8]
   10062:	2b04      	cmp	r3, #4
   10064:	d106      	bne.n	10074 <gen_instance_throw+0x40>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10066:	4807      	ldr	r0, [pc, #28]	; (10084 <gen_instance_throw+0x50>)
   10068:	f7ff f926 	bl	f2b8 <mp_obj_new_exception>
   1006c:	4603      	mov	r3, r0
   1006e:	4618      	mov	r0, r3
   10070:	f7f0 f936 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10074:	68bb      	ldr	r3, [r7, #8]
    }
}
   10076:	4618      	mov	r0, r3
   10078:	3710      	adds	r7, #16
   1007a:	46bd      	mov	sp, r7
   1007c:	bd80      	pop	{r7, pc}
   1007e:	bf00      	nop
   10080:	00022b54 	.word	0x00022b54
   10084:	000219e4 	.word	0x000219e4

00010088 <gen_instance_close>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   10088:	b580      	push	{r7, lr}
   1008a:	b084      	sub	sp, #16
   1008c:	af00      	add	r7, sp, #0
   1008e:	6078      	str	r0, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   10090:	f107 030c 	add.w	r3, r7, #12
   10094:	4a18      	ldr	r2, [pc, #96]	; (100f8 <gen_instance_close+0x70>)
   10096:	4919      	ldr	r1, [pc, #100]	; (100fc <gen_instance_close+0x74>)
   10098:	6878      	ldr	r0, [r7, #4]
   1009a:	f7ff feab 	bl	fdf4 <mp_obj_gen_resume>
   1009e:	4603      	mov	r3, r0
   100a0:	2b01      	cmp	r3, #1
   100a2:	d002      	beq.n	100aa <gen_instance_close+0x22>
   100a4:	2b02      	cmp	r3, #2
   100a6:	d004      	beq.n	100b2 <gen_instance_close+0x2a>
   100a8:	e021      	b.n	100ee <gen_instance_close+0x66>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
   100aa:	4915      	ldr	r1, [pc, #84]	; (10100 <gen_instance_close+0x78>)
   100ac:	4815      	ldr	r0, [pc, #84]	; (10104 <gen_instance_close+0x7c>)
   100ae:	f7fc fee3 	bl	ce78 <mp_raise_msg>

        // Swallow StopIteration & GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   100b2:	68fb      	ldr	r3, [r7, #12]
   100b4:	4618      	mov	r0, r3
   100b6:	f7fd fb17 	bl	d6e8 <mp_obj_get_type>
   100ba:	4603      	mov	r3, r0
   100bc:	4912      	ldr	r1, [pc, #72]	; (10108 <gen_instance_close+0x80>)
   100be:	4618      	mov	r0, r3
   100c0:	f006 ff24 	bl	16f0c <mp_obj_is_subclass_fast>
   100c4:	4603      	mov	r3, r0
   100c6:	2b00      	cmp	r3, #0
   100c8:	d10b      	bne.n	100e2 <gen_instance_close+0x5a>
                mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   100ca:	68fb      	ldr	r3, [r7, #12]
   100cc:	4618      	mov	r0, r3
   100ce:	f7fd fb0b 	bl	d6e8 <mp_obj_get_type>
   100d2:	4603      	mov	r3, r0
   100d4:	490d      	ldr	r1, [pc, #52]	; (1010c <gen_instance_close+0x84>)
   100d6:	4618      	mov	r0, r3
   100d8:	f006 ff18 	bl	16f0c <mp_obj_is_subclass_fast>
   100dc:	4603      	mov	r3, r0
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   100de:	2b00      	cmp	r3, #0
   100e0:	d001      	beq.n	100e6 <gen_instance_close+0x5e>
                return mp_const_none;
   100e2:	4b06      	ldr	r3, [pc, #24]	; (100fc <gen_instance_close+0x74>)
   100e4:	e004      	b.n	100f0 <gen_instance_close+0x68>
            }
            nlr_raise(ret);
   100e6:	68fb      	ldr	r3, [r7, #12]
   100e8:	4618      	mov	r0, r3
   100ea:	f7f0 f8f9 	bl	2e0 <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
   100ee:	4b03      	ldr	r3, [pc, #12]	; (100fc <gen_instance_close+0x74>)
    }
}
   100f0:	4618      	mov	r0, r3
   100f2:	3710      	adds	r7, #16
   100f4:	46bd      	mov	sp, r7
   100f6:	bd80      	pop	{r7, pc}
   100f8:	000218a0 	.word	0x000218a0
   100fc:	00022b54 	.word	0x00022b54
   10100:	00022440 	.word	0x00022440
   10104:	00021d2c 	.word	0x00021d2c
   10108:	0002196c 	.word	0x0002196c
   1010c:	000219e4 	.word	0x000219e4

00010110 <gen_instance_pend_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
   10110:	b580      	push	{r7, lr}
   10112:	b084      	sub	sp, #16
   10114:	af00      	add	r7, sp, #0
   10116:	6078      	str	r0, [r7, #4]
   10118:	6039      	str	r1, [r7, #0]
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1011a:	687b      	ldr	r3, [r7, #4]
   1011c:	60fb      	str	r3, [r7, #12]
    if (self->code_state.sp == self->code_state.state - 1) {
   1011e:	68fb      	ldr	r3, [r7, #12]
   10120:	691a      	ldr	r2, [r3, #16]
   10122:	68fb      	ldr	r3, [r7, #12]
   10124:	331c      	adds	r3, #28
   10126:	3b04      	subs	r3, #4
   10128:	429a      	cmp	r2, r3
   1012a:	d102      	bne.n	10132 <gen_instance_pend_throw+0x22>
        mp_raise_TypeError("can't pend throw to just-started generator");
   1012c:	4807      	ldr	r0, [pc, #28]	; (1014c <gen_instance_pend_throw+0x3c>)
   1012e:	f7fc fec5 	bl	cebc <mp_raise_TypeError>
    }
    mp_obj_t prev = *self->code_state.sp;
   10132:	68fb      	ldr	r3, [r7, #12]
   10134:	691b      	ldr	r3, [r3, #16]
   10136:	681b      	ldr	r3, [r3, #0]
   10138:	60bb      	str	r3, [r7, #8]
    *self->code_state.sp = exc_in;
   1013a:	68fb      	ldr	r3, [r7, #12]
   1013c:	691b      	ldr	r3, [r3, #16]
   1013e:	683a      	ldr	r2, [r7, #0]
   10140:	601a      	str	r2, [r3, #0]
    return prev;
   10142:	68bb      	ldr	r3, [r7, #8]
}
   10144:	4618      	mov	r0, r3
   10146:	3710      	adds	r7, #16
   10148:	46bd      	mov	sp, r7
   1014a:	bd80      	pop	{r7, pc}
   1014c:	00022468 	.word	0x00022468

00010150 <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   10150:	b580      	push	{r7, lr}
   10152:	b092      	sub	sp, #72	; 0x48
   10154:	af00      	add	r7, sp, #0
   10156:	6078      	str	r0, [r7, #4]
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
   10158:	687b      	ldr	r3, [r7, #4]
   1015a:	647b      	str	r3, [r7, #68]	; 0x44
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1015c:	f107 030c 	add.w	r3, r7, #12
   10160:	4618      	mov	r0, r3
   10162:	f7f0 f8ab 	bl	2bc <nlr_push>
   10166:	4603      	mov	r3, r0
   10168:	2b00      	cmp	r3, #0
   1016a:	d115      	bne.n	10198 <it_iternext+0x48>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   1016c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1016e:	3304      	adds	r3, #4
   10170:	461a      	mov	r2, r3
   10172:	2100      	movs	r1, #0
   10174:	2001      	movs	r0, #1
   10176:	f7fb fe01 	bl	bd7c <mp_call_method_n_kw>
   1017a:	6438      	str	r0, [r7, #64]	; 0x40
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   1017c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1017e:	68db      	ldr	r3, [r3, #12]
   10180:	105b      	asrs	r3, r3, #1
   10182:	3301      	adds	r3, #1
   10184:	005b      	lsls	r3, r3, #1
   10186:	f043 0301 	orr.w	r3, r3, #1
   1018a:	461a      	mov	r2, r3
   1018c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1018e:	60da      	str	r2, [r3, #12]
        nlr_pop();
   10190:	f7f0 f882 	bl	298 <nlr_pop>
        return value;
   10194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10196:	e010      	b.n	101ba <it_iternext+0x6a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
   10198:	693b      	ldr	r3, [r7, #16]
   1019a:	681b      	ldr	r3, [r3, #0]
   1019c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   1019e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   101a0:	4a08      	ldr	r2, [pc, #32]	; (101c4 <it_iternext+0x74>)
   101a2:	4293      	cmp	r3, r2
   101a4:	d003      	beq.n	101ae <it_iternext+0x5e>
   101a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   101a8:	4a07      	ldr	r2, [pc, #28]	; (101c8 <it_iternext+0x78>)
   101aa:	4293      	cmp	r3, r2
   101ac:	d101      	bne.n	101b2 <it_iternext+0x62>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
   101ae:	2304      	movs	r3, #4
   101b0:	e003      	b.n	101ba <it_iternext+0x6a>
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   101b2:	693b      	ldr	r3, [r7, #16]
   101b4:	4618      	mov	r0, r3
   101b6:	f7f0 f893 	bl	2e0 <nlr_jump>
        }
    }
}
   101ba:	4618      	mov	r0, r3
   101bc:	3748      	adds	r7, #72	; 0x48
   101be:	46bd      	mov	sp, r7
   101c0:	bd80      	pop	{r7, pc}
   101c2:	bf00      	nop
   101c4:	000219e4 	.word	0x000219e4
   101c8:	00021c00 	.word	0x00021c00

000101cc <mp_obj_new_getitem_iter>:
    .getiter = mp_identity_getiter,
    .iternext = it_iternext,
};

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
   101cc:	b480      	push	{r7}
   101ce:	b085      	sub	sp, #20
   101d0:	af00      	add	r7, sp, #0
   101d2:	6078      	str	r0, [r7, #4]
   101d4:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
   101d6:	683b      	ldr	r3, [r7, #0]
   101d8:	60fb      	str	r3, [r7, #12]
    o->base.type = &it_type;
   101da:	68fb      	ldr	r3, [r7, #12]
   101dc:	4a09      	ldr	r2, [pc, #36]	; (10204 <mp_obj_new_getitem_iter+0x38>)
   101de:	601a      	str	r2, [r3, #0]
    o->args[0] = args[0];
   101e0:	687b      	ldr	r3, [r7, #4]
   101e2:	681a      	ldr	r2, [r3, #0]
   101e4:	68fb      	ldr	r3, [r7, #12]
   101e6:	605a      	str	r2, [r3, #4]
    o->args[1] = args[1];
   101e8:	687b      	ldr	r3, [r7, #4]
   101ea:	685a      	ldr	r2, [r3, #4]
   101ec:	68fb      	ldr	r3, [r7, #12]
   101ee:	609a      	str	r2, [r3, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
   101f0:	68fb      	ldr	r3, [r7, #12]
   101f2:	2201      	movs	r2, #1
   101f4:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   101f6:	68fb      	ldr	r3, [r7, #12]
}
   101f8:	4618      	mov	r0, r3
   101fa:	3714      	adds	r7, #20
   101fc:	46bd      	mov	sp, r7
   101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   10202:	4770      	bx	lr
   10204:	0002251c 	.word	0x0002251c

00010208 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   10208:	b480      	push	{r7}
   1020a:	b083      	sub	sp, #12
   1020c:	af00      	add	r7, sp, #0
   1020e:	6078      	str	r0, [r7, #4]
   10210:	687b      	ldr	r3, [r7, #4]
   10212:	f003 0301 	and.w	r3, r3, #1
   10216:	2b00      	cmp	r3, #0
   10218:	bf14      	ite	ne
   1021a:	2301      	movne	r3, #1
   1021c:	2300      	moveq	r3, #0
   1021e:	b2db      	uxtb	r3, r3
   10220:	4618      	mov	r0, r3
   10222:	370c      	adds	r7, #12
   10224:	46bd      	mov	sp, r7
   10226:	f85d 7b04 	ldr.w	r7, [sp], #4
   1022a:	4770      	bx	lr

0001022c <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   1022c:	b480      	push	{r7}
   1022e:	b083      	sub	sp, #12
   10230:	af00      	add	r7, sp, #0
   10232:	6078      	str	r0, [r7, #4]
   10234:	687b      	ldr	r3, [r7, #4]
   10236:	f003 0303 	and.w	r3, r3, #3
   1023a:	2b02      	cmp	r3, #2
   1023c:	bf0c      	ite	eq
   1023e:	2301      	moveq	r3, #1
   10240:	2300      	movne	r3, #0
   10242:	b2db      	uxtb	r3, r3
   10244:	4618      	mov	r0, r3
   10246:	370c      	adds	r7, #12
   10248:	46bd      	mov	sp, r7
   1024a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1024e:	4770      	bx	lr

00010250 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   10250:	b480      	push	{r7}
   10252:	b083      	sub	sp, #12
   10254:	af00      	add	r7, sp, #0
   10256:	6078      	str	r0, [r7, #4]
   10258:	687b      	ldr	r3, [r7, #4]
   1025a:	f003 0303 	and.w	r3, r3, #3
   1025e:	2b00      	cmp	r3, #0
   10260:	bf0c      	ite	eq
   10262:	2301      	moveq	r3, #1
   10264:	2300      	movne	r3, #0
   10266:	b2db      	uxtb	r3, r3
   10268:	4618      	mov	r0, r3
   1026a:	370c      	adds	r7, #12
   1026c:	46bd      	mov	sp, r7
   1026e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10272:	4770      	bx	lr

00010274 <mp_obj_int_make_new>:
#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

// This dispatcher function is expected to be independent of the implementation of long int
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10274:	b590      	push	{r4, r7, lr}
   10276:	b08b      	sub	sp, #44	; 0x2c
   10278:	af02      	add	r7, sp, #8
   1027a:	60f8      	str	r0, [r7, #12]
   1027c:	60b9      	str	r1, [r7, #8]
   1027e:	607a      	str	r2, [r7, #4]
   10280:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
   10282:	2300      	movs	r3, #0
   10284:	9300      	str	r3, [sp, #0]
   10286:	2302      	movs	r3, #2
   10288:	2200      	movs	r2, #0
   1028a:	6879      	ldr	r1, [r7, #4]
   1028c:	68b8      	ldr	r0, [r7, #8]
   1028e:	f7fc fe3b 	bl	cf08 <mp_arg_check_num>

    switch (n_args) {
   10292:	68bb      	ldr	r3, [r7, #8]
   10294:	2b00      	cmp	r3, #0
   10296:	d002      	beq.n	1029e <mp_obj_int_make_new+0x2a>
   10298:	2b01      	cmp	r3, #1
   1029a:	d002      	beq.n	102a2 <mp_obj_int_make_new+0x2e>
   1029c:	e04c      	b.n	10338 <mp_obj_int_make_new+0xc4>
        case 0:
            return MP_OBJ_NEW_SMALL_INT(0);
   1029e:	2301      	movs	r3, #1
   102a0:	e061      	b.n	10366 <mp_obj_int_make_new+0xf2>

        case 1:
            if (MP_OBJ_IS_INT(args[0])) {
   102a2:	683b      	ldr	r3, [r7, #0]
   102a4:	681b      	ldr	r3, [r3, #0]
   102a6:	4618      	mov	r0, r3
   102a8:	f7ff ffae 	bl	10208 <MP_OBJ_IS_SMALL_INT>
   102ac:	4603      	mov	r3, r0
   102ae:	2b00      	cmp	r3, #0
   102b0:	d10d      	bne.n	102ce <mp_obj_int_make_new+0x5a>
   102b2:	683b      	ldr	r3, [r7, #0]
   102b4:	681b      	ldr	r3, [r3, #0]
   102b6:	4618      	mov	r0, r3
   102b8:	f7ff ffca 	bl	10250 <MP_OBJ_IS_OBJ>
   102bc:	4603      	mov	r3, r0
   102be:	2b00      	cmp	r3, #0
   102c0:	d008      	beq.n	102d4 <mp_obj_int_make_new+0x60>
   102c2:	683b      	ldr	r3, [r7, #0]
   102c4:	681b      	ldr	r3, [r3, #0]
   102c6:	681b      	ldr	r3, [r3, #0]
   102c8:	4a29      	ldr	r2, [pc, #164]	; (10370 <mp_obj_int_make_new+0xfc>)
   102ca:	4293      	cmp	r3, r2
   102cc:	d102      	bne.n	102d4 <mp_obj_int_make_new+0x60>
                // already an int (small or long), just return it
                return args[0];
   102ce:	683b      	ldr	r3, [r7, #0]
   102d0:	681b      	ldr	r3, [r3, #0]
   102d2:	e048      	b.n	10366 <mp_obj_int_make_new+0xf2>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   102d4:	683b      	ldr	r3, [r7, #0]
   102d6:	681b      	ldr	r3, [r3, #0]
   102d8:	4618      	mov	r0, r3
   102da:	f7ff ffa7 	bl	1022c <MP_OBJ_IS_QSTR>
   102de:	4603      	mov	r3, r0
   102e0:	2b00      	cmp	r3, #0
   102e2:	d10e      	bne.n	10302 <mp_obj_int_make_new+0x8e>
   102e4:	683b      	ldr	r3, [r7, #0]
   102e6:	681b      	ldr	r3, [r3, #0]
   102e8:	4618      	mov	r0, r3
   102ea:	f7ff ffb1 	bl	10250 <MP_OBJ_IS_OBJ>
   102ee:	4603      	mov	r3, r0
   102f0:	2b00      	cmp	r3, #0
   102f2:	d017      	beq.n	10324 <mp_obj_int_make_new+0xb0>
   102f4:	683b      	ldr	r3, [r7, #0]
   102f6:	681b      	ldr	r3, [r3, #0]
   102f8:	681b      	ldr	r3, [r3, #0]
   102fa:	699b      	ldr	r3, [r3, #24]
   102fc:	4a1d      	ldr	r2, [pc, #116]	; (10374 <mp_obj_int_make_new+0x100>)
   102fe:	4293      	cmp	r3, r2
   10300:	d110      	bne.n	10324 <mp_obj_int_make_new+0xb0>
                // a string, parse it
                size_t l;
                const char *s = mp_obj_str_get_data(args[0], &l);
   10302:	683b      	ldr	r3, [r7, #0]
   10304:	681b      	ldr	r3, [r3, #0]
   10306:	f107 0214 	add.w	r2, r7, #20
   1030a:	4611      	mov	r1, r2
   1030c:	4618      	mov	r0, r3
   1030e:	f004 fff1 	bl	152f4 <mp_obj_str_get_data>
   10312:	61f8      	str	r0, [r7, #28]
                return mp_parse_num_integer(s, l, 0, NULL);
   10314:	6979      	ldr	r1, [r7, #20]
   10316:	2300      	movs	r3, #0
   10318:	2200      	movs	r2, #0
   1031a:	69f8      	ldr	r0, [r7, #28]
   1031c:	f7fa fdde 	bl	aedc <mp_parse_num_integer>
   10320:	4603      	mov	r3, r0
   10322:	e020      	b.n	10366 <mp_obj_int_make_new+0xf2>
            } else if (mp_obj_is_float(args[0])) {
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
#endif
            } else {
                // try to convert to small int (eg from bool)
                return MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(args[0]));
   10324:	683b      	ldr	r3, [r7, #0]
   10326:	681b      	ldr	r3, [r3, #0]
   10328:	4618      	mov	r0, r3
   1032a:	f7fd fbb9 	bl	daa0 <mp_obj_get_int>
   1032e:	4603      	mov	r3, r0
   10330:	005b      	lsls	r3, r3, #1
   10332:	f043 0301 	orr.w	r3, r3, #1
   10336:	e016      	b.n	10366 <mp_obj_int_make_new+0xf2>
        case 2:
        default: {
            // should be a string, parse it
            // TODO proper error checking of argument types
            size_t l;
            const char *s = mp_obj_str_get_data(args[0], &l);
   10338:	683b      	ldr	r3, [r7, #0]
   1033a:	681b      	ldr	r3, [r3, #0]
   1033c:	f107 0210 	add.w	r2, r7, #16
   10340:	4611      	mov	r1, r2
   10342:	4618      	mov	r0, r3
   10344:	f004 ffd6 	bl	152f4 <mp_obj_str_get_data>
   10348:	61b8      	str	r0, [r7, #24]
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
   1034a:	693c      	ldr	r4, [r7, #16]
   1034c:	683b      	ldr	r3, [r7, #0]
   1034e:	3304      	adds	r3, #4
   10350:	681b      	ldr	r3, [r3, #0]
   10352:	4618      	mov	r0, r3
   10354:	f7fd fba4 	bl	daa0 <mp_obj_get_int>
   10358:	4602      	mov	r2, r0
   1035a:	2300      	movs	r3, #0
   1035c:	4621      	mov	r1, r4
   1035e:	69b8      	ldr	r0, [r7, #24]
   10360:	f7fa fdbc 	bl	aedc <mp_parse_num_integer>
   10364:	4603      	mov	r3, r0
        }
    }
}
   10366:	4618      	mov	r0, r3
   10368:	3724      	adds	r7, #36	; 0x24
   1036a:	46bd      	mov	sp, r7
   1036c:	bd90      	pop	{r4, r7, pc}
   1036e:	bf00      	nop
   10370:	00022610 	.word	0x00022610
   10374:	0001254f 	.word	0x0001254f

00010378 <mp_obj_int_print>:
#else
typedef mp_int_t fmt_int_t;
typedef mp_uint_t fmt_uint_t;
#endif

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10378:	b580      	push	{r7, lr}
   1037a:	b090      	sub	sp, #64	; 0x40
   1037c:	af04      	add	r7, sp, #16
   1037e:	60f8      	str	r0, [r7, #12]
   10380:	60b9      	str	r1, [r7, #8]
   10382:	607a      	str	r2, [r7, #4]
    (void)kind;
    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(fmt_int_t) * 4];
    char *buf = stack_buf;
   10384:	f107 031c 	add.w	r3, r7, #28
   10388:	61bb      	str	r3, [r7, #24]
    size_t buf_size = sizeof(stack_buf);
   1038a:	2310      	movs	r3, #16
   1038c:	617b      	str	r3, [r7, #20]
    size_t fmt_size;

    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
   1038e:	f107 0210 	add.w	r2, r7, #16
   10392:	f107 0114 	add.w	r1, r7, #20
   10396:	f107 0018 	add.w	r0, r7, #24
   1039a:	2300      	movs	r3, #0
   1039c:	9303      	str	r3, [sp, #12]
   1039e:	2300      	movs	r3, #0
   103a0:	9302      	str	r3, [sp, #8]
   103a2:	2300      	movs	r3, #0
   103a4:	9301      	str	r3, [sp, #4]
   103a6:	230a      	movs	r3, #10
   103a8:	9300      	str	r3, [sp, #0]
   103aa:	68bb      	ldr	r3, [r7, #8]
   103ac:	f000 f858 	bl	10460 <mp_obj_int_formatted>
   103b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_print_str(print, str);
   103b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   103b4:	68f8      	ldr	r0, [r7, #12]
   103b6:	f7f1 fa59 	bl	186c <mp_print_str>

    if (buf != stack_buf) {
   103ba:	69ba      	ldr	r2, [r7, #24]
   103bc:	f107 031c 	add.w	r3, r7, #28
   103c0:	429a      	cmp	r2, r3
   103c2:	d003      	beq.n	103cc <mp_obj_int_print+0x54>
        m_del(char, buf, buf_size);
   103c4:	69bb      	ldr	r3, [r7, #24]
   103c6:	4618      	mov	r0, r3
   103c8:	f7f0 f806 	bl	3d8 <m_free>
    }
}
   103cc:	bf00      	nop
   103ce:	3730      	adds	r7, #48	; 0x30
   103d0:	46bd      	mov	sp, r7
   103d2:	bd80      	pop	{r7, pc}

000103d4 <mp_int_format_size>:
    4, 4, 4, 4,
    4, 4, 4, 5
    */
};

size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
   103d4:	b580      	push	{r7, lr}
   103d6:	b088      	sub	sp, #32
   103d8:	af00      	add	r7, sp, #0
   103da:	60f8      	str	r0, [r7, #12]
   103dc:	60b9      	str	r1, [r7, #8]
   103de:	607a      	str	r2, [r7, #4]
   103e0:	70fb      	strb	r3, [r7, #3]
    assert(2 <= base && base <= 16);
   103e2:	68bb      	ldr	r3, [r7, #8]
   103e4:	2b01      	cmp	r3, #1
   103e6:	dd02      	ble.n	103ee <mp_int_format_size+0x1a>
   103e8:	68bb      	ldr	r3, [r7, #8]
   103ea:	2b10      	cmp	r3, #16
   103ec:	dd05      	ble.n	103fa <mp_int_format_size+0x26>
   103ee:	4b17      	ldr	r3, [pc, #92]	; (1044c <mp_int_format_size+0x78>)
   103f0:	4a17      	ldr	r2, [pc, #92]	; (10450 <mp_int_format_size+0x7c>)
   103f2:	21d0      	movs	r1, #208	; 0xd0
   103f4:	4817      	ldr	r0, [pc, #92]	; (10454 <mp_int_format_size+0x80>)
   103f6:	f00a fef5 	bl	1b1e4 <__assert_func>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
   103fa:	68bb      	ldr	r3, [r7, #8]
   103fc:	3b01      	subs	r3, #1
   103fe:	4a16      	ldr	r2, [pc, #88]	; (10458 <mp_int_format_size+0x84>)
   10400:	5cd3      	ldrb	r3, [r2, r3]
   10402:	461a      	mov	r2, r3
   10404:	68fb      	ldr	r3, [r7, #12]
   10406:	fbb3 f3f2 	udiv	r3, r3, r2
   1040a:	3301      	adds	r3, #1
   1040c:	61fb      	str	r3, [r7, #28]
    size_t num_commas = comma ? num_digits / 3 : 0;
   1040e:	78fb      	ldrb	r3, [r7, #3]
   10410:	2b00      	cmp	r3, #0
   10412:	d005      	beq.n	10420 <mp_int_format_size+0x4c>
   10414:	69fb      	ldr	r3, [r7, #28]
   10416:	4a11      	ldr	r2, [pc, #68]	; (1045c <mp_int_format_size+0x88>)
   10418:	fba2 2303 	umull	r2, r3, r2, r3
   1041c:	085b      	lsrs	r3, r3, #1
   1041e:	e000      	b.n	10422 <mp_int_format_size+0x4e>
   10420:	2300      	movs	r3, #0
   10422:	61bb      	str	r3, [r7, #24]
    size_t prefix_len = prefix ? strlen(prefix) : 0;
   10424:	687b      	ldr	r3, [r7, #4]
   10426:	2b00      	cmp	r3, #0
   10428:	d004      	beq.n	10434 <mp_int_format_size+0x60>
   1042a:	6878      	ldr	r0, [r7, #4]
   1042c:	f00c f9ce 	bl	1c7cc <strlen>
   10430:	4603      	mov	r3, r0
   10432:	e000      	b.n	10436 <mp_int_format_size+0x62>
   10434:	2300      	movs	r3, #0
   10436:	617b      	str	r3, [r7, #20]
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
   10438:	69fa      	ldr	r2, [r7, #28]
   1043a:	69bb      	ldr	r3, [r7, #24]
   1043c:	441a      	add	r2, r3
   1043e:	697b      	ldr	r3, [r7, #20]
   10440:	4413      	add	r3, r2
   10442:	3302      	adds	r3, #2
}
   10444:	4618      	mov	r0, r3
   10446:	3720      	adds	r7, #32
   10448:	46bd      	mov	sp, r7
   1044a:	bd80      	pop	{r7, pc}
   1044c:	00022568 	.word	0x00022568
   10450:	0002264c 	.word	0x0002264c
   10454:	00022580 	.word	0x00022580
   10458:	00022558 	.word	0x00022558
   1045c:	aaaaaaab 	.word	0xaaaaaaab

00010460 <mp_obj_int_formatted>:
// is the callers responsibility to free this allocated buffer.
//
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma) {
   10460:	b580      	push	{r7, lr}
   10462:	b08e      	sub	sp, #56	; 0x38
   10464:	af00      	add	r7, sp, #0
   10466:	60f8      	str	r0, [r7, #12]
   10468:	60b9      	str	r1, [r7, #8]
   1046a:	607a      	str	r2, [r7, #4]
   1046c:	603b      	str	r3, [r7, #0]
    fmt_int_t num;
    #if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE
    // Only have small ints; get the integer value to format.
    num = MP_OBJ_SMALL_INT_VALUE(self_in);
   1046e:	683b      	ldr	r3, [r7, #0]
   10470:	105b      	asrs	r3, r3, #1
   10472:	637b      	str	r3, [r7, #52]	; 0x34
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
        #endif
    }
    #endif

    char sign = '\0';
   10474:	2300      	movs	r3, #0
   10476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (num < 0) {
   1047a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1047c:	2b00      	cmp	r3, #0
   1047e:	da05      	bge.n	1048c <mp_obj_int_formatted+0x2c>
        num = -num;
   10480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10482:	425b      	negs	r3, r3
   10484:	637b      	str	r3, [r7, #52]	; 0x34
        sign = '-';
   10486:	232d      	movs	r3, #45	; 0x2d
   10488:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
   1048c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10492:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10494:	2020      	movs	r0, #32
   10496:	f7ff ff9d 	bl	103d4 <mp_int_format_size>
   1049a:	61f8      	str	r0, [r7, #28]
    if (needed_size > *buf_size) {
   1049c:	68bb      	ldr	r3, [r7, #8]
   1049e:	681a      	ldr	r2, [r3, #0]
   104a0:	69fb      	ldr	r3, [r7, #28]
   104a2:	429a      	cmp	r2, r3
   104a4:	d208      	bcs.n	104b8 <mp_obj_int_formatted+0x58>
        *buf = m_new(char, needed_size);
   104a6:	69f8      	ldr	r0, [r7, #28]
   104a8:	f7ef ff38 	bl	31c <m_malloc>
   104ac:	4602      	mov	r2, r0
   104ae:	68fb      	ldr	r3, [r7, #12]
   104b0:	601a      	str	r2, [r3, #0]
        *buf_size = needed_size;
   104b2:	68bb      	ldr	r3, [r7, #8]
   104b4:	69fa      	ldr	r2, [r7, #28]
   104b6:	601a      	str	r2, [r3, #0]
    }
    char *str = *buf;
   104b8:	68fb      	ldr	r3, [r7, #12]
   104ba:	681b      	ldr	r3, [r3, #0]
   104bc:	61bb      	str	r3, [r7, #24]

    char *b = str + needed_size;
   104be:	69ba      	ldr	r2, [r7, #24]
   104c0:	69fb      	ldr	r3, [r7, #28]
   104c2:	4413      	add	r3, r2
   104c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *(--b) = '\0';
   104c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104c8:	3b01      	subs	r3, #1
   104ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   104cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104ce:	2200      	movs	r2, #0
   104d0:	701a      	strb	r2, [r3, #0]
    char *last_comma = b;
   104d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104d4:	62bb      	str	r3, [r7, #40]	; 0x28

    if (num == 0) {
   104d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   104d8:	2b00      	cmp	r3, #0
   104da:	d106      	bne.n	104ea <mp_obj_int_formatted+0x8a>
        *(--b) = '0';
   104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104de:	3b01      	subs	r3, #1
   104e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   104e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   104e4:	2230      	movs	r2, #48	; 0x30
   104e6:	701a      	strb	r2, [r3, #0]
   104e8:	e040      	b.n	1056c <mp_obj_int_formatted+0x10c>
    } else {
        do {
            // The cast to fmt_uint_t is because num is positive and we want unsigned arithmetic
            int c = (fmt_uint_t)num % base;
   104ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   104ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104ee:	fbb3 f1f2 	udiv	r1, r3, r2
   104f2:	fb02 f201 	mul.w	r2, r2, r1
   104f6:	1a9b      	subs	r3, r3, r2
   104f8:	627b      	str	r3, [r7, #36]	; 0x24
            num = (fmt_uint_t)num / base;
   104fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   104fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   104fe:	fbb2 f3f3 	udiv	r3, r2, r3
   10502:	637b      	str	r3, [r7, #52]	; 0x34
            if (c >= 10) {
   10504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10506:	2b09      	cmp	r3, #9
   10508:	dd06      	ble.n	10518 <mp_obj_int_formatted+0xb8>
                c += base_char - 10;
   1050a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   1050e:	3b0a      	subs	r3, #10
   10510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10512:	4413      	add	r3, r2
   10514:	627b      	str	r3, [r7, #36]	; 0x24
   10516:	e002      	b.n	1051e <mp_obj_int_formatted+0xbe>
            } else {
                c += '0';
   10518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1051a:	3330      	adds	r3, #48	; 0x30
   1051c:	627b      	str	r3, [r7, #36]	; 0x24
            }
            *(--b) = c;
   1051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10520:	3b01      	subs	r3, #1
   10522:	62fb      	str	r3, [r7, #44]	; 0x2c
   10524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10526:	b2da      	uxtb	r2, r3
   10528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1052a:	701a      	strb	r2, [r3, #0]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
   1052c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10530:	2b00      	cmp	r3, #0
   10532:	d014      	beq.n	1055e <mp_obj_int_formatted+0xfe>
   10534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10536:	2b00      	cmp	r3, #0
   10538:	d011      	beq.n	1055e <mp_obj_int_formatted+0xfe>
   1053a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1053c:	69bb      	ldr	r3, [r7, #24]
   1053e:	429a      	cmp	r2, r3
   10540:	d90d      	bls.n	1055e <mp_obj_int_formatted+0xfe>
   10542:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10546:	1ad3      	subs	r3, r2, r3
   10548:	2b03      	cmp	r3, #3
   1054a:	d108      	bne.n	1055e <mp_obj_int_formatted+0xfe>
                *(--b) = comma;
   1054c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1054e:	3b01      	subs	r3, #1
   10550:	62fb      	str	r3, [r7, #44]	; 0x2c
   10552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10554:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   10558:	701a      	strb	r2, [r3, #0]
                last_comma = b;
   1055a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1055c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        while (b > str && num != 0);
   1055e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10560:	69bb      	ldr	r3, [r7, #24]
   10562:	429a      	cmp	r2, r3
   10564:	d902      	bls.n	1056c <mp_obj_int_formatted+0x10c>
   10566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10568:	2b00      	cmp	r3, #0
   1056a:	d1be      	bne.n	104ea <mp_obj_int_formatted+0x8a>
    }
    if (prefix) {
   1056c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1056e:	2b00      	cmp	r3, #0
   10570:	d01b      	beq.n	105aa <mp_obj_int_formatted+0x14a>
        size_t prefix_len = strlen(prefix);
   10572:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10574:	f00c f92a 	bl	1c7cc <strlen>
   10578:	6178      	str	r0, [r7, #20]
        char *p = b - prefix_len;
   1057a:	697b      	ldr	r3, [r7, #20]
   1057c:	425b      	negs	r3, r3
   1057e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10580:	4413      	add	r3, r2
   10582:	623b      	str	r3, [r7, #32]
        if (p > str) {
   10584:	6a3a      	ldr	r2, [r7, #32]
   10586:	69bb      	ldr	r3, [r7, #24]
   10588:	429a      	cmp	r2, r3
   1058a:	d90e      	bls.n	105aa <mp_obj_int_formatted+0x14a>
            b = p;
   1058c:	6a3b      	ldr	r3, [r7, #32]
   1058e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (*prefix) {
   10590:	e007      	b.n	105a2 <mp_obj_int_formatted+0x142>
                *p++ = *prefix++;
   10592:	6a3b      	ldr	r3, [r7, #32]
   10594:	1c5a      	adds	r2, r3, #1
   10596:	623a      	str	r2, [r7, #32]
   10598:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1059a:	1c51      	adds	r1, r2, #1
   1059c:	6479      	str	r1, [r7, #68]	; 0x44
   1059e:	7812      	ldrb	r2, [r2, #0]
   105a0:	701a      	strb	r2, [r3, #0]
            while (*prefix) {
   105a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   105a4:	781b      	ldrb	r3, [r3, #0]
   105a6:	2b00      	cmp	r3, #0
   105a8:	d1f3      	bne.n	10592 <mp_obj_int_formatted+0x132>
            }
        }
    }
    if (sign && b > str) {
   105aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   105ae:	2b00      	cmp	r3, #0
   105b0:	d00a      	beq.n	105c8 <mp_obj_int_formatted+0x168>
   105b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   105b4:	69bb      	ldr	r3, [r7, #24]
   105b6:	429a      	cmp	r2, r3
   105b8:	d906      	bls.n	105c8 <mp_obj_int_formatted+0x168>
        *(--b) = sign;
   105ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105bc:	3b01      	subs	r3, #1
   105be:	62fb      	str	r3, [r7, #44]	; 0x2c
   105c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   105c6:	701a      	strb	r2, [r3, #0]
    }
    *fmt_size = *buf + needed_size - b - 1;
   105c8:	68fb      	ldr	r3, [r7, #12]
   105ca:	681a      	ldr	r2, [r3, #0]
   105cc:	69fb      	ldr	r3, [r7, #28]
   105ce:	4413      	add	r3, r2
   105d0:	461a      	mov	r2, r3
   105d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105d4:	1ad3      	subs	r3, r2, r3
   105d6:	3b01      	subs	r3, #1
   105d8:	461a      	mov	r2, r3
   105da:	687b      	ldr	r3, [r7, #4]
   105dc:	601a      	str	r2, [r3, #0]

    return b;
   105de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   105e0:	4618      	mov	r0, r3
   105e2:	3738      	adds	r7, #56	; 0x38
   105e4:	46bd      	mov	sp, r7
   105e6:	bd80      	pop	{r7, pc}

000105e8 <mp_obj_int_sign>:

#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

int mp_obj_int_sign(mp_obj_t self_in) {
   105e8:	b580      	push	{r7, lr}
   105ea:	b084      	sub	sp, #16
   105ec:	af00      	add	r7, sp, #0
   105ee:	6078      	str	r0, [r7, #4]
    mp_int_t val = mp_obj_get_int(self_in);
   105f0:	6878      	ldr	r0, [r7, #4]
   105f2:	f7fd fa55 	bl	daa0 <mp_obj_get_int>
   105f6:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   105f8:	68fb      	ldr	r3, [r7, #12]
   105fa:	2b00      	cmp	r3, #0
   105fc:	da02      	bge.n	10604 <mp_obj_int_sign+0x1c>
        return -1;
   105fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10602:	e005      	b.n	10610 <mp_obj_int_sign+0x28>
    } else if (val > 0) {
   10604:	68fb      	ldr	r3, [r7, #12]
   10606:	2b00      	cmp	r3, #0
   10608:	dd01      	ble.n	1060e <mp_obj_int_sign+0x26>
        return 1;
   1060a:	2301      	movs	r3, #1
   1060c:	e000      	b.n	10610 <mp_obj_int_sign+0x28>
    } else {
        return 0;
   1060e:	2300      	movs	r3, #0
    }
}
   10610:	4618      	mov	r0, r3
   10612:	3710      	adds	r7, #16
   10614:	46bd      	mov	sp, r7
   10616:	bd80      	pop	{r7, pc}

00010618 <mp_obj_int_unary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_unary_op
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
   10618:	b480      	push	{r7}
   1061a:	b083      	sub	sp, #12
   1061c:	af00      	add	r7, sp, #0
   1061e:	6078      	str	r0, [r7, #4]
   10620:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NULL; // op not supported
   10622:	2300      	movs	r3, #0
}
   10624:	4618      	mov	r0, r3
   10626:	370c      	adds	r7, #12
   10628:	46bd      	mov	sp, r7
   1062a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1062e:	4770      	bx	lr

00010630 <mp_obj_int_binary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_binary_op
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10630:	b580      	push	{r7, lr}
   10632:	b084      	sub	sp, #16
   10634:	af00      	add	r7, sp, #0
   10636:	60f8      	str	r0, [r7, #12]
   10638:	60b9      	str	r1, [r7, #8]
   1063a:	607a      	str	r2, [r7, #4]
    return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
   1063c:	687a      	ldr	r2, [r7, #4]
   1063e:	68b9      	ldr	r1, [r7, #8]
   10640:	68f8      	ldr	r0, [r7, #12]
   10642:	f000 f87f 	bl	10744 <mp_obj_int_binary_op_extra_cases>
   10646:	4603      	mov	r3, r0
}
   10648:	4618      	mov	r0, r3
   1064a:	3710      	adds	r7, #16
   1064c:	46bd      	mov	sp, r7
   1064e:	bd80      	pop	{r7, pc}

00010650 <mp_obj_new_int_from_str_len>:

// This is called only with strings whose value doesn't fit in SMALL_INT
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
   10650:	b580      	push	{r7, lr}
   10652:	b084      	sub	sp, #16
   10654:	af00      	add	r7, sp, #0
   10656:	60f8      	str	r0, [r7, #12]
   10658:	60b9      	str	r1, [r7, #8]
   1065a:	603b      	str	r3, [r7, #0]
   1065c:	4613      	mov	r3, r2
   1065e:	71fb      	strb	r3, [r7, #7]
    mp_raise_msg(&mp_type_OverflowError, "long int not supported in this build");
   10660:	4901      	ldr	r1, [pc, #4]	; (10668 <mp_obj_new_int_from_str_len+0x18>)
   10662:	4802      	ldr	r0, [pc, #8]	; (1066c <mp_obj_new_int_from_str_len+0x1c>)
   10664:	f7fc fc08 	bl	ce78 <mp_raise_msg>
   10668:	00022594 	.word	0x00022594
   1066c:	00021a5c 	.word	0x00021a5c

00010670 <mp_obj_new_int_from_ll>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ll(long long val) {
   10670:	b580      	push	{r7, lr}
   10672:	b082      	sub	sp, #8
   10674:	af00      	add	r7, sp, #0
   10676:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   1067a:	4902      	ldr	r1, [pc, #8]	; (10684 <mp_obj_new_int_from_ll+0x14>)
   1067c:	4802      	ldr	r0, [pc, #8]	; (10688 <mp_obj_new_int_from_ll+0x18>)
   1067e:	f7fc fbfb 	bl	ce78 <mp_raise_msg>
   10682:	bf00      	nop
   10684:	000225bc 	.word	0x000225bc
   10688:	00021a5c 	.word	0x00021a5c

0001068c <mp_obj_new_int_from_ull>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
   1068c:	b580      	push	{r7, lr}
   1068e:	b082      	sub	sp, #8
   10690:	af00      	add	r7, sp, #0
   10692:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10696:	4902      	ldr	r1, [pc, #8]	; (106a0 <mp_obj_new_int_from_ull+0x14>)
   10698:	4802      	ldr	r0, [pc, #8]	; (106a4 <mp_obj_new_int_from_ull+0x18>)
   1069a:	f7fc fbed 	bl	ce78 <mp_raise_msg>
   1069e:	bf00      	nop
   106a0:	000225bc 	.word	0x000225bc
   106a4:	00021a5c 	.word	0x00021a5c

000106a8 <mp_obj_new_int_from_uint>:
    return mp_const_none;
}

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
   106a8:	b580      	push	{r7, lr}
   106aa:	b082      	sub	sp, #8
   106ac:	af00      	add	r7, sp, #0
   106ae:	6078      	str	r0, [r7, #4]
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
   106b0:	687b      	ldr	r3, [r7, #4]
   106b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
   106b6:	2b00      	cmp	r3, #0
   106b8:	d104      	bne.n	106c4 <mp_obj_new_int_from_uint+0x1c>
        return MP_OBJ_NEW_SMALL_INT(value);
   106ba:	687b      	ldr	r3, [r7, #4]
   106bc:	005b      	lsls	r3, r3, #1
   106be:	f043 0301 	orr.w	r3, r3, #1
   106c2:	e003      	b.n	106cc <mp_obj_new_int_from_uint+0x24>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   106c4:	4903      	ldr	r1, [pc, #12]	; (106d4 <mp_obj_new_int_from_uint+0x2c>)
   106c6:	4804      	ldr	r0, [pc, #16]	; (106d8 <mp_obj_new_int_from_uint+0x30>)
   106c8:	f7fc fbd6 	bl	ce78 <mp_raise_msg>
    return mp_const_none;
}
   106cc:	4618      	mov	r0, r3
   106ce:	3708      	adds	r7, #8
   106d0:	46bd      	mov	sp, r7
   106d2:	bd80      	pop	{r7, pc}
   106d4:	000225bc 	.word	0x000225bc
   106d8:	00021a5c 	.word	0x00021a5c

000106dc <mp_obj_new_int>:

mp_obj_t mp_obj_new_int(mp_int_t value) {
   106dc:	b580      	push	{r7, lr}
   106de:	b082      	sub	sp, #8
   106e0:	af00      	add	r7, sp, #0
   106e2:	6078      	str	r0, [r7, #4]
    if (MP_SMALL_INT_FITS(value)) {
   106e4:	687b      	ldr	r3, [r7, #4]
   106e6:	005a      	lsls	r2, r3, #1
   106e8:	687b      	ldr	r3, [r7, #4]
   106ea:	4053      	eors	r3, r2
   106ec:	2b00      	cmp	r3, #0
   106ee:	db04      	blt.n	106fa <mp_obj_new_int+0x1e>
        return MP_OBJ_NEW_SMALL_INT(value);
   106f0:	687b      	ldr	r3, [r7, #4]
   106f2:	005b      	lsls	r3, r3, #1
   106f4:	f043 0301 	orr.w	r3, r3, #1
   106f8:	e003      	b.n	10702 <mp_obj_new_int+0x26>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   106fa:	4904      	ldr	r1, [pc, #16]	; (1070c <mp_obj_new_int+0x30>)
   106fc:	4804      	ldr	r0, [pc, #16]	; (10710 <mp_obj_new_int+0x34>)
   106fe:	f7fc fbbb 	bl	ce78 <mp_raise_msg>
    return mp_const_none;
}
   10702:	4618      	mov	r0, r3
   10704:	3708      	adds	r7, #8
   10706:	46bd      	mov	sp, r7
   10708:	bd80      	pop	{r7, pc}
   1070a:	bf00      	nop
   1070c:	000225bc 	.word	0x000225bc
   10710:	00021a5c 	.word	0x00021a5c

00010714 <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
   10714:	b480      	push	{r7}
   10716:	b083      	sub	sp, #12
   10718:	af00      	add	r7, sp, #0
   1071a:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   1071c:	687b      	ldr	r3, [r7, #4]
   1071e:	105b      	asrs	r3, r3, #1
}
   10720:	4618      	mov	r0, r3
   10722:	370c      	adds	r7, #12
   10724:	46bd      	mov	sp, r7
   10726:	f85d 7b04 	ldr.w	r7, [sp], #4
   1072a:	4770      	bx	lr

0001072c <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
   1072c:	b480      	push	{r7}
   1072e:	b083      	sub	sp, #12
   10730:	af00      	add	r7, sp, #0
   10732:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10734:	687b      	ldr	r3, [r7, #4]
   10736:	105b      	asrs	r3, r3, #1
}
   10738:	4618      	mov	r0, r3
   1073a:	370c      	adds	r7, #12
   1073c:	46bd      	mov	sp, r7
   1073e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10742:	4770      	bx	lr

00010744 <mp_obj_int_binary_op_extra_cases>:

#endif // MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

// This dispatcher function is expected to be independent of the implementation of long int
// It handles the extra cases for integer-like arithmetic
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10744:	b580      	push	{r7, lr}
   10746:	b084      	sub	sp, #16
   10748:	af00      	add	r7, sp, #0
   1074a:	60f8      	str	r0, [r7, #12]
   1074c:	60b9      	str	r1, [r7, #8]
   1074e:	607a      	str	r2, [r7, #4]
    if (rhs_in == mp_const_false) {
   10750:	687b      	ldr	r3, [r7, #4]
   10752:	4a26      	ldr	r2, [pc, #152]	; (107ec <mp_obj_int_binary_op_extra_cases+0xa8>)
   10754:	4293      	cmp	r3, r2
   10756:	d106      	bne.n	10766 <mp_obj_int_binary_op_extra_cases+0x22>
        // false acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
   10758:	2201      	movs	r2, #1
   1075a:	68b9      	ldr	r1, [r7, #8]
   1075c:	68f8      	ldr	r0, [r7, #12]
   1075e:	f7fb f855 	bl	b80c <mp_binary_op>
   10762:	4603      	mov	r3, r0
   10764:	e03d      	b.n	107e2 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (rhs_in == mp_const_true) {
   10766:	687b      	ldr	r3, [r7, #4]
   10768:	4a21      	ldr	r2, [pc, #132]	; (107f0 <mp_obj_int_binary_op_extra_cases+0xac>)
   1076a:	4293      	cmp	r3, r2
   1076c:	d106      	bne.n	1077c <mp_obj_int_binary_op_extra_cases+0x38>
        // true acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
   1076e:	2203      	movs	r2, #3
   10770:	68b9      	ldr	r1, [r7, #8]
   10772:	68f8      	ldr	r0, [r7, #12]
   10774:	f7fb f84a 	bl	b80c <mp_binary_op>
   10778:	4603      	mov	r3, r0
   1077a:	e032      	b.n	107e2 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
   1077c:	68fb      	ldr	r3, [r7, #12]
   1077e:	2b1c      	cmp	r3, #28
   10780:	d12e      	bne.n	107e0 <mp_obj_int_binary_op_extra_cases+0x9c>
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
   10782:	6878      	ldr	r0, [r7, #4]
   10784:	f7ff fd52 	bl	1022c <MP_OBJ_IS_QSTR>
   10788:	4603      	mov	r3, r0
   1078a:	2b00      	cmp	r3, #0
   1078c:	d121      	bne.n	107d2 <mp_obj_int_binary_op_extra_cases+0x8e>
   1078e:	6878      	ldr	r0, [r7, #4]
   10790:	f7ff fd5e 	bl	10250 <MP_OBJ_IS_OBJ>
   10794:	4603      	mov	r3, r0
   10796:	2b00      	cmp	r3, #0
   10798:	d005      	beq.n	107a6 <mp_obj_int_binary_op_extra_cases+0x62>
   1079a:	687b      	ldr	r3, [r7, #4]
   1079c:	681b      	ldr	r3, [r3, #0]
   1079e:	699b      	ldr	r3, [r3, #24]
   107a0:	4a14      	ldr	r2, [pc, #80]	; (107f4 <mp_obj_int_binary_op_extra_cases+0xb0>)
   107a2:	4293      	cmp	r3, r2
   107a4:	d015      	beq.n	107d2 <mp_obj_int_binary_op_extra_cases+0x8e>
   107a6:	6878      	ldr	r0, [r7, #4]
   107a8:	f7ff fd52 	bl	10250 <MP_OBJ_IS_OBJ>
   107ac:	4603      	mov	r3, r0
   107ae:	2b00      	cmp	r3, #0
   107b0:	d004      	beq.n	107bc <mp_obj_int_binary_op_extra_cases+0x78>
   107b2:	687b      	ldr	r3, [r7, #4]
   107b4:	681b      	ldr	r3, [r3, #0]
   107b6:	4a10      	ldr	r2, [pc, #64]	; (107f8 <mp_obj_int_binary_op_extra_cases+0xb4>)
   107b8:	4293      	cmp	r3, r2
   107ba:	d00a      	beq.n	107d2 <mp_obj_int_binary_op_extra_cases+0x8e>
   107bc:	6878      	ldr	r0, [r7, #4]
   107be:	f7ff fd47 	bl	10250 <MP_OBJ_IS_OBJ>
   107c2:	4603      	mov	r3, r0
   107c4:	2b00      	cmp	r3, #0
   107c6:	d00b      	beq.n	107e0 <mp_obj_int_binary_op_extra_cases+0x9c>
   107c8:	687b      	ldr	r3, [r7, #4]
   107ca:	681b      	ldr	r3, [r3, #0]
   107cc:	4a0b      	ldr	r2, [pc, #44]	; (107fc <mp_obj_int_binary_op_extra_cases+0xb8>)
   107ce:	4293      	cmp	r3, r2
   107d0:	d106      	bne.n	107e0 <mp_obj_int_binary_op_extra_cases+0x9c>
            // multiply is commutative for these types, so delegate to them
            return mp_binary_op(op, rhs_in, lhs_in);
   107d2:	68ba      	ldr	r2, [r7, #8]
   107d4:	6879      	ldr	r1, [r7, #4]
   107d6:	68f8      	ldr	r0, [r7, #12]
   107d8:	f7fb f818 	bl	b80c <mp_binary_op>
   107dc:	4603      	mov	r3, r0
   107de:	e000      	b.n	107e2 <mp_obj_int_binary_op_extra_cases+0x9e>
        }
    }
    return MP_OBJ_NULL; // op not supported
   107e0:	2300      	movs	r3, #0
}
   107e2:	4618      	mov	r0, r3
   107e4:	3710      	adds	r7, #16
   107e6:	46bd      	mov	sp, r7
   107e8:	bd80      	pop	{r7, pc}
   107ea:	bf00      	nop
   107ec:	00021308 	.word	0x00021308
   107f0:	00021310 	.word	0x00021310
   107f4:	0001254f 	.word	0x0001254f
   107f8:	00023488 	.word	0x00023488
   107fc:	0002287c 	.word	0x0002287c

00010800 <int_from_bytes>:

// this is a classmethod
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
   10800:	b580      	push	{r7, lr}
   10802:	b08a      	sub	sp, #40	; 0x28
   10804:	af00      	add	r7, sp, #0
   10806:	6078      	str	r0, [r7, #4]
   10808:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False at the moment)
    (void)n_args;

    // get the buffer info
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   1080a:	683b      	ldr	r3, [r7, #0]
   1080c:	3304      	adds	r3, #4
   1080e:	681b      	ldr	r3, [r3, #0]
   10810:	f107 010c 	add.w	r1, r7, #12
   10814:	2201      	movs	r2, #1
   10816:	4618      	mov	r0, r3
   10818:	f7fd fb72 	bl	df00 <mp_get_buffer_raise>

    const byte* buf = (const byte*)bufinfo.buf;
   1081c:	68fb      	ldr	r3, [r7, #12]
   1081e:	627b      	str	r3, [r7, #36]	; 0x24
    int delta = 1;
   10820:	2301      	movs	r3, #1
   10822:	623b      	str	r3, [r7, #32]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
   10824:	683b      	ldr	r3, [r7, #0]
   10826:	3308      	adds	r3, #8
   10828:	681b      	ldr	r3, [r3, #0]
   1082a:	f240 42c2 	movw	r2, #1218	; 0x4c2
   1082e:	4293      	cmp	r3, r2
   10830:	d107      	bne.n	10842 <int_from_bytes+0x42>
        buf += bufinfo.len - 1;
   10832:	693b      	ldr	r3, [r7, #16]
   10834:	3b01      	subs	r3, #1
   10836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10838:	4413      	add	r3, r2
   1083a:	627b      	str	r3, [r7, #36]	; 0x24
        delta = -1;
   1083c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10840:	623b      	str	r3, [r7, #32]
    }

    mp_uint_t value = 0;
   10842:	2300      	movs	r3, #0
   10844:	61fb      	str	r3, [r7, #28]
    size_t len = bufinfo.len;
   10846:	693b      	ldr	r3, [r7, #16]
   10848:	61bb      	str	r3, [r7, #24]
    for (; len--; buf += delta) {
   1084a:	e009      	b.n	10860 <int_from_bytes+0x60>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
            // Result will overflow a small-int so construct a big-int
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
        }
        #endif
        value = (value << 8) | *buf;
   1084c:	69fb      	ldr	r3, [r7, #28]
   1084e:	021b      	lsls	r3, r3, #8
   10850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10852:	7812      	ldrb	r2, [r2, #0]
   10854:	4313      	orrs	r3, r2
   10856:	61fb      	str	r3, [r7, #28]
    for (; len--; buf += delta) {
   10858:	6a3b      	ldr	r3, [r7, #32]
   1085a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1085c:	4413      	add	r3, r2
   1085e:	627b      	str	r3, [r7, #36]	; 0x24
   10860:	69bb      	ldr	r3, [r7, #24]
   10862:	1e5a      	subs	r2, r3, #1
   10864:	61ba      	str	r2, [r7, #24]
   10866:	2b00      	cmp	r3, #0
   10868:	d1f0      	bne.n	1084c <int_from_bytes+0x4c>
    }
    return mp_obj_new_int_from_uint(value);
   1086a:	69f8      	ldr	r0, [r7, #28]
   1086c:	f7ff ff1c 	bl	106a8 <mp_obj_new_int_from_uint>
   10870:	4603      	mov	r3, r0
}
   10872:	4618      	mov	r0, r3
   10874:	3728      	adds	r7, #40	; 0x28
   10876:	46bd      	mov	sp, r7
   10878:	bd80      	pop	{r7, pc}

0001087a <int_to_bytes>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
   1087a:	b580      	push	{r7, lr}
   1087c:	b08c      	sub	sp, #48	; 0x30
   1087e:	af00      	add	r7, sp, #0
   10880:	6078      	str	r0, [r7, #4]
   10882:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
   10884:	683b      	ldr	r3, [r7, #0]
   10886:	3304      	adds	r3, #4
   10888:	681b      	ldr	r3, [r3, #0]
   1088a:	4618      	mov	r0, r3
   1088c:	f7fd f908 	bl	daa0 <mp_obj_get_int>
   10890:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len < 0) {
   10892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10894:	2b00      	cmp	r3, #0
   10896:	da02      	bge.n	1089e <int_to_bytes+0x24>
        mp_raise_ValueError(NULL);
   10898:	2000      	movs	r0, #0
   1089a:	f7fc fb04 	bl	cea6 <mp_raise_ValueError>
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
   1089e:	683b      	ldr	r3, [r7, #0]
   108a0:	3308      	adds	r3, #8
   108a2:	681b      	ldr	r3, [r3, #0]
   108a4:	f240 42c2 	movw	r2, #1218	; 0x4c2
   108a8:	4293      	cmp	r3, r2
   108aa:	bf14      	ite	ne
   108ac:	2301      	movne	r3, #1
   108ae:	2300      	moveq	r3, #0
   108b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    vstr_t vstr;
    vstr_init_len(&vstr, len);
   108b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   108b6:	f107 030c 	add.w	r3, r7, #12
   108ba:	4611      	mov	r1, r2
   108bc:	4618      	mov	r0, r3
   108be:	f7f0 fd3e 	bl	133e <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   108c2:	697b      	ldr	r3, [r7, #20]
   108c4:	627b      	str	r3, [r7, #36]	; 0x24
    memset(data, 0, len);
   108c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108c8:	461a      	mov	r2, r3
   108ca:	2100      	movs	r1, #0
   108cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   108ce:	f00b fee1 	bl	1c694 <memset>
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
   108d2:	683b      	ldr	r3, [r7, #0]
   108d4:	681b      	ldr	r3, [r3, #0]
   108d6:	105b      	asrs	r3, r3, #1
   108d8:	623b      	str	r3, [r7, #32]
        size_t l = MIN((size_t)len, sizeof(val));
   108da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108dc:	2b04      	cmp	r3, #4
   108de:	bf28      	it	cs
   108e0:	2304      	movcs	r3, #4
   108e2:	61fb      	str	r3, [r7, #28]
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
   108e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   108e8:	2b00      	cmp	r3, #0
   108ea:	d003      	beq.n	108f4 <int_to_bytes+0x7a>
   108ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   108ee:	69fb      	ldr	r3, [r7, #28]
   108f0:	1ad3      	subs	r3, r2, r3
   108f2:	e000      	b.n	108f6 <int_to_bytes+0x7c>
   108f4:	2300      	movs	r3, #0
   108f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108f8:	441a      	add	r2, r3
   108fa:	6a3b      	ldr	r3, [r7, #32]
   108fc:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
   10900:	69f8      	ldr	r0, [r7, #28]
   10902:	f007 fad8 	bl	17eb6 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   10906:	f107 030c 	add.w	r3, r7, #12
   1090a:	4619      	mov	r1, r3
   1090c:	4803      	ldr	r0, [pc, #12]	; (1091c <int_to_bytes+0xa2>)
   1090e:	f004 fb30 	bl	14f72 <mp_obj_new_str_from_vstr>
   10912:	4603      	mov	r3, r0
}
   10914:	4618      	mov	r0, r3
   10916:	3730      	adds	r7, #48	; 0x30
   10918:	46bd      	mov	sp, r7
   1091a:	bd80      	pop	{r7, pc}
   1091c:	00023240 	.word	0x00023240

00010920 <MP_OBJ_IS_OBJ>:
   10920:	b480      	push	{r7}
   10922:	b083      	sub	sp, #12
   10924:	af00      	add	r7, sp, #0
   10926:	6078      	str	r0, [r7, #4]
   10928:	687b      	ldr	r3, [r7, #4]
   1092a:	f003 0303 	and.w	r3, r3, #3
   1092e:	2b00      	cmp	r3, #0
   10930:	bf0c      	ite	eq
   10932:	2301      	moveq	r3, #1
   10934:	2300      	movne	r3, #0
   10936:	b2db      	uxtb	r3, r3
   10938:	4618      	mov	r0, r3
   1093a:	370c      	adds	r7, #12
   1093c:	46bd      	mov	sp, r7
   1093e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10942:	4770      	bx	lr

00010944 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10944:	b480      	push	{r7}
   10946:	b083      	sub	sp, #12
   10948:	af00      	add	r7, sp, #0
   1094a:	6078      	str	r0, [r7, #4]
   1094c:	687b      	ldr	r3, [r7, #4]
   1094e:	2b00      	cmp	r3, #0
   10950:	d001      	beq.n	10956 <mp_obj_new_bool+0x12>
   10952:	4b04      	ldr	r3, [pc, #16]	; (10964 <mp_obj_new_bool+0x20>)
   10954:	e000      	b.n	10958 <mp_obj_new_bool+0x14>
   10956:	4b04      	ldr	r3, [pc, #16]	; (10968 <mp_obj_new_bool+0x24>)
   10958:	4618      	mov	r0, r3
   1095a:	370c      	adds	r7, #12
   1095c:	46bd      	mov	sp, r7
   1095e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10962:	4770      	bx	lr
   10964:	00021310 	.word	0x00021310
   10968:	00021308 	.word	0x00021308

0001096c <list_print>:
#define LIST_MIN_ALLOC 4

/******************************************************************************/
/* list                                                                       */

STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   1096c:	b580      	push	{r7, lr}
   1096e:	b086      	sub	sp, #24
   10970:	af00      	add	r7, sp, #0
   10972:	60f8      	str	r0, [r7, #12]
   10974:	60b9      	str	r1, [r7, #8]
   10976:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(o_in);
   10978:	68bb      	ldr	r3, [r7, #8]
   1097a:	613b      	str	r3, [r7, #16]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
   1097c:	2301      	movs	r3, #1
   1097e:	607b      	str	r3, [r7, #4]
    }
    mp_print_str(print, "[");
   10980:	4914      	ldr	r1, [pc, #80]	; (109d4 <list_print+0x68>)
   10982:	68f8      	ldr	r0, [r7, #12]
   10984:	f7f0 ff72 	bl	186c <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   10988:	2300      	movs	r3, #0
   1098a:	617b      	str	r3, [r7, #20]
   1098c:	e014      	b.n	109b8 <list_print+0x4c>
        if (i > 0) {
   1098e:	697b      	ldr	r3, [r7, #20]
   10990:	2b00      	cmp	r3, #0
   10992:	d003      	beq.n	1099c <list_print+0x30>
            mp_print_str(print, ", ");
   10994:	4910      	ldr	r1, [pc, #64]	; (109d8 <list_print+0x6c>)
   10996:	68f8      	ldr	r0, [r7, #12]
   10998:	f7f0 ff68 	bl	186c <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   1099c:	693b      	ldr	r3, [r7, #16]
   1099e:	68da      	ldr	r2, [r3, #12]
   109a0:	697b      	ldr	r3, [r7, #20]
   109a2:	009b      	lsls	r3, r3, #2
   109a4:	4413      	add	r3, r2
   109a6:	681b      	ldr	r3, [r3, #0]
   109a8:	687a      	ldr	r2, [r7, #4]
   109aa:	4619      	mov	r1, r3
   109ac:	68f8      	ldr	r0, [r7, #12]
   109ae:	f7fc fecc 	bl	d74a <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   109b2:	697b      	ldr	r3, [r7, #20]
   109b4:	3301      	adds	r3, #1
   109b6:	617b      	str	r3, [r7, #20]
   109b8:	693b      	ldr	r3, [r7, #16]
   109ba:	689a      	ldr	r2, [r3, #8]
   109bc:	697b      	ldr	r3, [r7, #20]
   109be:	429a      	cmp	r2, r3
   109c0:	d8e5      	bhi.n	1098e <list_print+0x22>
    }
    mp_print_str(print, "]");
   109c2:	4906      	ldr	r1, [pc, #24]	; (109dc <list_print+0x70>)
   109c4:	68f8      	ldr	r0, [r7, #12]
   109c6:	f7f0 ff51 	bl	186c <mp_print_str>
}
   109ca:	bf00      	nop
   109cc:	3718      	adds	r7, #24
   109ce:	46bd      	mov	sp, r7
   109d0:	bd80      	pop	{r7, pc}
   109d2:	bf00      	nop
   109d4:	00022660 	.word	0x00022660
   109d8:	00022664 	.word	0x00022664
   109dc:	00022668 	.word	0x00022668

000109e0 <list_extend_from_iter>:

STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
   109e0:	b580      	push	{r7, lr}
   109e2:	b084      	sub	sp, #16
   109e4:	af00      	add	r7, sp, #0
   109e6:	6078      	str	r0, [r7, #4]
   109e8:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(iterable, NULL);
   109ea:	2100      	movs	r1, #0
   109ec:	6838      	ldr	r0, [r7, #0]
   109ee:	f7fb ff17 	bl	c820 <mp_getiter>
   109f2:	60f8      	str	r0, [r7, #12]
    mp_obj_t item;
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   109f4:	e003      	b.n	109fe <list_extend_from_iter+0x1e>
        mp_obj_list_append(list, item);
   109f6:	68b9      	ldr	r1, [r7, #8]
   109f8:	6878      	ldr	r0, [r7, #4]
   109fa:	f000 f982 	bl	10d02 <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   109fe:	68f8      	ldr	r0, [r7, #12]
   10a00:	f7fb ff90 	bl	c924 <mp_iternext>
   10a04:	60b8      	str	r0, [r7, #8]
   10a06:	68bb      	ldr	r3, [r7, #8]
   10a08:	2b04      	cmp	r3, #4
   10a0a:	d1f4      	bne.n	109f6 <list_extend_from_iter+0x16>
    }
    return list;
   10a0c:	687b      	ldr	r3, [r7, #4]
}
   10a0e:	4618      	mov	r0, r3
   10a10:	3710      	adds	r7, #16
   10a12:	46bd      	mov	sp, r7
   10a14:	bd80      	pop	{r7, pc}

00010a16 <list_make_new>:

STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10a16:	b580      	push	{r7, lr}
   10a18:	b088      	sub	sp, #32
   10a1a:	af02      	add	r7, sp, #8
   10a1c:	60f8      	str	r0, [r7, #12]
   10a1e:	60b9      	str	r1, [r7, #8]
   10a20:	607a      	str	r2, [r7, #4]
   10a22:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   10a24:	2300      	movs	r3, #0
   10a26:	9300      	str	r3, [sp, #0]
   10a28:	2301      	movs	r3, #1
   10a2a:	2200      	movs	r2, #0
   10a2c:	6879      	ldr	r1, [r7, #4]
   10a2e:	68b8      	ldr	r0, [r7, #8]
   10a30:	f7fc fa6a 	bl	cf08 <mp_arg_check_num>

    switch (n_args) {
   10a34:	68bb      	ldr	r3, [r7, #8]
   10a36:	2b00      	cmp	r3, #0
   10a38:	d105      	bne.n	10a46 <list_make_new+0x30>
        case 0:
            // return a new, empty list
            return mp_obj_new_list(0, NULL);
   10a3a:	2100      	movs	r1, #0
   10a3c:	2000      	movs	r0, #0
   10a3e:	f000 fdcc 	bl	115da <mp_obj_new_list>
   10a42:	4603      	mov	r3, r0
   10a44:	e00b      	b.n	10a5e <list_make_new+0x48>

        case 1:
        default: {
            // make list from iterable
            // TODO: optimize list/tuple
            mp_obj_t list = mp_obj_new_list(0, NULL);
   10a46:	2100      	movs	r1, #0
   10a48:	2000      	movs	r0, #0
   10a4a:	f000 fdc6 	bl	115da <mp_obj_new_list>
   10a4e:	6178      	str	r0, [r7, #20]
            return list_extend_from_iter(list, args[0]);
   10a50:	683b      	ldr	r3, [r7, #0]
   10a52:	681b      	ldr	r3, [r3, #0]
   10a54:	4619      	mov	r1, r3
   10a56:	6978      	ldr	r0, [r7, #20]
   10a58:	f7ff ffc2 	bl	109e0 <list_extend_from_iter>
   10a5c:	4603      	mov	r3, r0
        }
    }
}
   10a5e:	4618      	mov	r0, r3
   10a60:	3718      	adds	r7, #24
   10a62:	46bd      	mov	sp, r7
   10a64:	bd80      	pop	{r7, pc}

00010a66 <list_unary_op>:

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   10a66:	b580      	push	{r7, lr}
   10a68:	b084      	sub	sp, #16
   10a6a:	af00      	add	r7, sp, #0
   10a6c:	6078      	str	r0, [r7, #4]
   10a6e:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10a70:	683b      	ldr	r3, [r7, #0]
   10a72:	60fb      	str	r3, [r7, #12]
    switch (op) {
   10a74:	687b      	ldr	r3, [r7, #4]
   10a76:	2b04      	cmp	r3, #4
   10a78:	d002      	beq.n	10a80 <list_unary_op+0x1a>
   10a7a:	2b05      	cmp	r3, #5
   10a7c:	d00c      	beq.n	10a98 <list_unary_op+0x32>
   10a7e:	e011      	b.n	10aa4 <list_unary_op+0x3e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   10a80:	68fb      	ldr	r3, [r7, #12]
   10a82:	689b      	ldr	r3, [r3, #8]
   10a84:	2b00      	cmp	r3, #0
   10a86:	bf14      	ite	ne
   10a88:	2301      	movne	r3, #1
   10a8a:	2300      	moveq	r3, #0
   10a8c:	b2db      	uxtb	r3, r3
   10a8e:	4618      	mov	r0, r3
   10a90:	f7ff ff58 	bl	10944 <mp_obj_new_bool>
   10a94:	4603      	mov	r3, r0
   10a96:	e006      	b.n	10aa6 <list_unary_op+0x40>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   10a98:	68fb      	ldr	r3, [r7, #12]
   10a9a:	689b      	ldr	r3, [r3, #8]
   10a9c:	005b      	lsls	r3, r3, #1
   10a9e:	f043 0301 	orr.w	r3, r3, #1
   10aa2:	e000      	b.n	10aa6 <list_unary_op+0x40>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
   10aa4:	2300      	movs	r3, #0
    }
}
   10aa6:	4618      	mov	r0, r3
   10aa8:	3710      	adds	r7, #16
   10aaa:	46bd      	mov	sp, r7
   10aac:	bd80      	pop	{r7, pc}

00010aae <list_binary_op>:

STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   10aae:	b580      	push	{r7, lr}
   10ab0:	b08e      	sub	sp, #56	; 0x38
   10ab2:	af02      	add	r7, sp, #8
   10ab4:	60f8      	str	r0, [r7, #12]
   10ab6:	60b9      	str	r1, [r7, #8]
   10ab8:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(lhs);
   10aba:	68bb      	ldr	r3, [r7, #8]
   10abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (op) {
   10abe:	68fb      	ldr	r3, [r7, #12]
   10ac0:	2b1c      	cmp	r3, #28
   10ac2:	f200 80cf 	bhi.w	10c64 <list_binary_op+0x1b6>
   10ac6:	a201      	add	r2, pc, #4	; (adr r2, 10acc <list_binary_op+0x1e>)
   10ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10acc:	00010c0d 	.word	0x00010c0d
   10ad0:	00010c0d 	.word	0x00010c0d
   10ad4:	00010c0d 	.word	0x00010c0d
   10ad8:	00010c0d 	.word	0x00010c0d
   10adc:	00010c0d 	.word	0x00010c0d
   10ae0:	00010c65 	.word	0x00010c65
   10ae4:	00010c65 	.word	0x00010c65
   10ae8:	00010c65 	.word	0x00010c65
   10aec:	00010c65 	.word	0x00010c65
   10af0:	00010c65 	.word	0x00010c65
   10af4:	00010c65 	.word	0x00010c65
   10af8:	00010c65 	.word	0x00010c65
   10afc:	00010c65 	.word	0x00010c65
   10b00:	00010c65 	.word	0x00010c65
   10b04:	00010bab 	.word	0x00010bab
   10b08:	00010c65 	.word	0x00010c65
   10b0c:	00010c65 	.word	0x00010c65
   10b10:	00010c65 	.word	0x00010c65
   10b14:	00010c65 	.word	0x00010c65
   10b18:	00010c65 	.word	0x00010c65
   10b1c:	00010c65 	.word	0x00010c65
   10b20:	00010c65 	.word	0x00010c65
   10b24:	00010c65 	.word	0x00010c65
   10b28:	00010c65 	.word	0x00010c65
   10b2c:	00010c65 	.word	0x00010c65
   10b30:	00010c65 	.word	0x00010c65
   10b34:	00010b41 	.word	0x00010b41
   10b38:	00010c65 	.word	0x00010c65
   10b3c:	00010bb7 	.word	0x00010bb7
        case MP_BINARY_OP_ADD: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10b40:	6878      	ldr	r0, [r7, #4]
   10b42:	f7ff feed 	bl	10920 <MP_OBJ_IS_OBJ>
   10b46:	4603      	mov	r3, r0
   10b48:	f083 0301 	eor.w	r3, r3, #1
   10b4c:	b2db      	uxtb	r3, r3
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d104      	bne.n	10b5c <list_binary_op+0xae>
   10b52:	687b      	ldr	r3, [r7, #4]
   10b54:	681b      	ldr	r3, [r3, #0]
   10b56:	4a46      	ldr	r2, [pc, #280]	; (10c70 <list_binary_op+0x1c2>)
   10b58:	4293      	cmp	r3, r2
   10b5a:	d001      	beq.n	10b60 <list_binary_op+0xb2>
                return MP_OBJ_NULL; // op not supported
   10b5c:	2300      	movs	r3, #0
   10b5e:	e082      	b.n	10c66 <list_binary_op+0x1b8>
            }
            mp_obj_list_t *p = MP_OBJ_TO_PTR(rhs);
   10b60:	687b      	ldr	r3, [r7, #4]
   10b62:	62bb      	str	r3, [r7, #40]	; 0x28
            mp_obj_list_t *s = list_new(o->len + p->len);
   10b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b66:	689a      	ldr	r2, [r3, #8]
   10b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10b6a:	689b      	ldr	r3, [r3, #8]
   10b6c:	4413      	add	r3, r2
   10b6e:	4618      	mov	r0, r3
   10b70:	f000 fd22 	bl	115b8 <list_new>
   10b74:	6278      	str	r0, [r7, #36]	; 0x24
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   10b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10b78:	68d8      	ldr	r0, [r3, #12]
   10b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b7c:	68d9      	ldr	r1, [r3, #12]
   10b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b80:	689b      	ldr	r3, [r3, #8]
   10b82:	009b      	lsls	r3, r3, #2
   10b84:	461a      	mov	r2, r3
   10b86:	f00b fceb 	bl	1c560 <memcpy>
   10b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10b8c:	68da      	ldr	r2, [r3, #12]
   10b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b90:	689b      	ldr	r3, [r3, #8]
   10b92:	009b      	lsls	r3, r3, #2
   10b94:	18d0      	adds	r0, r2, r3
   10b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10b98:	68d9      	ldr	r1, [r3, #12]
   10b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10b9c:	689b      	ldr	r3, [r3, #8]
   10b9e:	009b      	lsls	r3, r3, #2
   10ba0:	461a      	mov	r2, r3
   10ba2:	f00b fcdd 	bl	1c560 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   10ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10ba8:	e05d      	b.n	10c66 <list_binary_op+0x1b8>
        }
        case MP_BINARY_OP_INPLACE_ADD: {
            list_extend(lhs, rhs);
   10baa:	6879      	ldr	r1, [r7, #4]
   10bac:	68b8      	ldr	r0, [r7, #8]
   10bae:	f000 f905 	bl	10dbc <list_extend>
            return lhs;
   10bb2:	68bb      	ldr	r3, [r7, #8]
   10bb4:	e057      	b.n	10c66 <list_binary_op+0x1b8>
        }
        case MP_BINARY_OP_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   10bb6:	f107 0314 	add.w	r3, r7, #20
   10bba:	4619      	mov	r1, r3
   10bbc:	6878      	ldr	r0, [r7, #4]
   10bbe:	f7fc ffcb 	bl	db58 <mp_obj_get_int_maybe>
   10bc2:	4603      	mov	r3, r0
   10bc4:	f083 0301 	eor.w	r3, r3, #1
   10bc8:	b2db      	uxtb	r3, r3
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d001      	beq.n	10bd2 <list_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   10bce:	2300      	movs	r3, #0
   10bd0:	e049      	b.n	10c66 <list_binary_op+0x1b8>
            }
            if (n < 0) {
   10bd2:	697b      	ldr	r3, [r7, #20]
   10bd4:	2b00      	cmp	r3, #0
   10bd6:	da01      	bge.n	10bdc <list_binary_op+0x12e>
                n = 0;
   10bd8:	2300      	movs	r3, #0
   10bda:	617b      	str	r3, [r7, #20]
            }
            mp_obj_list_t *s = list_new(o->len * n);
   10bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10bde:	689b      	ldr	r3, [r3, #8]
   10be0:	697a      	ldr	r2, [r7, #20]
   10be2:	fb02 f303 	mul.w	r3, r2, r3
   10be6:	4618      	mov	r0, r3
   10be8:	f000 fce6 	bl	115b8 <list_new>
   10bec:	6238      	str	r0, [r7, #32]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   10bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10bf0:	68d8      	ldr	r0, [r3, #12]
   10bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10bf4:	689a      	ldr	r2, [r3, #8]
   10bf6:	697b      	ldr	r3, [r7, #20]
   10bf8:	4619      	mov	r1, r3
   10bfa:	6a3b      	ldr	r3, [r7, #32]
   10bfc:	68db      	ldr	r3, [r3, #12]
   10bfe:	9300      	str	r3, [sp, #0]
   10c00:	460b      	mov	r3, r1
   10c02:	2104      	movs	r1, #4
   10c04:	f006 fbbc 	bl	17380 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   10c08:	6a3b      	ldr	r3, [r7, #32]
   10c0a:	e02c      	b.n	10c66 <list_binary_op+0x1b8>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10c0c:	6878      	ldr	r0, [r7, #4]
   10c0e:	f7ff fe87 	bl	10920 <MP_OBJ_IS_OBJ>
   10c12:	4603      	mov	r3, r0
   10c14:	f083 0301 	eor.w	r3, r3, #1
   10c18:	b2db      	uxtb	r3, r3
   10c1a:	2b00      	cmp	r3, #0
   10c1c:	d104      	bne.n	10c28 <list_binary_op+0x17a>
   10c1e:	687b      	ldr	r3, [r7, #4]
   10c20:	681b      	ldr	r3, [r3, #0]
   10c22:	4a13      	ldr	r2, [pc, #76]	; (10c70 <list_binary_op+0x1c2>)
   10c24:	4293      	cmp	r3, r2
   10c26:	d006      	beq.n	10c36 <list_binary_op+0x188>
                if (op == MP_BINARY_OP_EQUAL) {
   10c28:	68fb      	ldr	r3, [r7, #12]
   10c2a:	2b02      	cmp	r3, #2
   10c2c:	d101      	bne.n	10c32 <list_binary_op+0x184>
                    return mp_const_false;
   10c2e:	4b11      	ldr	r3, [pc, #68]	; (10c74 <list_binary_op+0x1c6>)
   10c30:	e019      	b.n	10c66 <list_binary_op+0x1b8>
                }
                return MP_OBJ_NULL; // op not supported
   10c32:	2300      	movs	r3, #0
   10c34:	e017      	b.n	10c66 <list_binary_op+0x1b8>
            }

            mp_obj_list_t *another = MP_OBJ_TO_PTR(rhs);
   10c36:	687b      	ldr	r3, [r7, #4]
   10c38:	61fb      	str	r3, [r7, #28]
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
   10c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c3c:	68d9      	ldr	r1, [r3, #12]
   10c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c40:	689a      	ldr	r2, [r3, #8]
   10c42:	69fb      	ldr	r3, [r7, #28]
   10c44:	68d8      	ldr	r0, [r3, #12]
   10c46:	69fb      	ldr	r3, [r7, #28]
   10c48:	689b      	ldr	r3, [r3, #8]
   10c4a:	9300      	str	r3, [sp, #0]
   10c4c:	4603      	mov	r3, r0
   10c4e:	68f8      	ldr	r0, [r7, #12]
   10c50:	f006 fc57 	bl	17502 <mp_seq_cmp_objs>
   10c54:	4603      	mov	r3, r0
   10c56:	76fb      	strb	r3, [r7, #27]
            return mp_obj_new_bool(res);
   10c58:	7efb      	ldrb	r3, [r7, #27]
   10c5a:	4618      	mov	r0, r3
   10c5c:	f7ff fe72 	bl	10944 <mp_obj_new_bool>
   10c60:	4603      	mov	r3, r0
   10c62:	e000      	b.n	10c66 <list_binary_op+0x1b8>
        }

        default:
            return MP_OBJ_NULL; // op not supported
   10c64:	2300      	movs	r3, #0
    }
}
   10c66:	4618      	mov	r0, r3
   10c68:	3730      	adds	r7, #48	; 0x30
   10c6a:	46bd      	mov	sp, r7
   10c6c:	bd80      	pop	{r7, pc}
   10c6e:	bf00      	nop
   10c70:	0002287c 	.word	0x0002287c
   10c74:	00021308 	.word	0x00021308

00010c78 <list_subscr>:

STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   10c78:	b580      	push	{r7, lr}
   10c7a:	b088      	sub	sp, #32
   10c7c:	af00      	add	r7, sp, #0
   10c7e:	60f8      	str	r0, [r7, #12]
   10c80:	60b9      	str	r1, [r7, #8]
   10c82:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
   10c84:	687b      	ldr	r3, [r7, #4]
   10c86:	2b00      	cmp	r3, #0
   10c88:	d10b      	bne.n	10ca2 <list_subscr+0x2a>
            mp_seq_clear(self->items, self->len + len_adj, self->len, sizeof(*self->items));
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_t args[2] = {self_in, index};
   10c8a:	68fb      	ldr	r3, [r7, #12]
   10c8c:	613b      	str	r3, [r7, #16]
   10c8e:	68bb      	ldr	r3, [r7, #8]
   10c90:	617b      	str	r3, [r7, #20]
        list_pop(2, args);
   10c92:	f107 0310 	add.w	r3, r7, #16
   10c96:	4619      	mov	r1, r3
   10c98:	2002      	movs	r0, #2
   10c9a:	f000 f913 	bl	10ec4 <list_pop>
        return mp_const_none;
   10c9e:	4b10      	ldr	r3, [pc, #64]	; (10ce0 <list_subscr+0x68>)
   10ca0:	e01a      	b.n	10cd8 <list_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
   10ca2:	687b      	ldr	r3, [r7, #4]
   10ca4:	2b08      	cmp	r3, #8
   10ca6:	d111      	bne.n	10ccc <list_subscr+0x54>
        // load
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10ca8:	68fb      	ldr	r3, [r7, #12]
   10caa:	61fb      	str	r3, [r7, #28]
            mp_obj_list_t *res = list_new(slice.stop - slice.start);
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
   10cac:	69fb      	ldr	r3, [r7, #28]
   10cae:	6818      	ldr	r0, [r3, #0]
   10cb0:	69fb      	ldr	r3, [r7, #28]
   10cb2:	6899      	ldr	r1, [r3, #8]
   10cb4:	2300      	movs	r3, #0
   10cb6:	68ba      	ldr	r2, [r7, #8]
   10cb8:	f7fc ffde 	bl	dc78 <mp_get_index>
   10cbc:	61b8      	str	r0, [r7, #24]
        return self->items[index_val];
   10cbe:	69fb      	ldr	r3, [r7, #28]
   10cc0:	68da      	ldr	r2, [r3, #12]
   10cc2:	69bb      	ldr	r3, [r7, #24]
   10cc4:	009b      	lsls	r3, r3, #2
   10cc6:	4413      	add	r3, r2
   10cc8:	681b      	ldr	r3, [r3, #0]
   10cca:	e005      	b.n	10cd8 <list_subscr+0x60>
            }
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_list_store(self_in, index, value);
   10ccc:	687a      	ldr	r2, [r7, #4]
   10cce:	68b9      	ldr	r1, [r7, #8]
   10cd0:	68f8      	ldr	r0, [r7, #12]
   10cd2:	f000 fcce 	bl	11672 <mp_obj_list_store>
        return mp_const_none;
   10cd6:	4b02      	ldr	r3, [pc, #8]	; (10ce0 <list_subscr+0x68>)
    }
}
   10cd8:	4618      	mov	r0, r3
   10cda:	3720      	adds	r7, #32
   10cdc:	46bd      	mov	sp, r7
   10cde:	bd80      	pop	{r7, pc}
   10ce0:	00022b54 	.word	0x00022b54

00010ce4 <list_getiter>:

STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   10ce4:	b580      	push	{r7, lr}
   10ce6:	b082      	sub	sp, #8
   10ce8:	af00      	add	r7, sp, #0
   10cea:	6078      	str	r0, [r7, #4]
   10cec:	6039      	str	r1, [r7, #0]
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
   10cee:	683a      	ldr	r2, [r7, #0]
   10cf0:	2100      	movs	r1, #0
   10cf2:	6878      	ldr	r0, [r7, #4]
   10cf4:	f000 fcfe 	bl	116f4 <mp_obj_new_list_iterator>
   10cf8:	4603      	mov	r3, r0
}
   10cfa:	4618      	mov	r0, r3
   10cfc:	3708      	adds	r7, #8
   10cfe:	46bd      	mov	sp, r7
   10d00:	bd80      	pop	{r7, pc}

00010d02 <mp_obj_list_append>:

mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
   10d02:	b580      	push	{r7, lr}
   10d04:	b084      	sub	sp, #16
   10d06:	af00      	add	r7, sp, #0
   10d08:	6078      	str	r0, [r7, #4]
   10d0a:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   10d0c:	6878      	ldr	r0, [r7, #4]
   10d0e:	f7ff fe07 	bl	10920 <MP_OBJ_IS_OBJ>
   10d12:	4603      	mov	r3, r0
   10d14:	2b00      	cmp	r3, #0
   10d16:	d004      	beq.n	10d22 <mp_obj_list_append+0x20>
   10d18:	687b      	ldr	r3, [r7, #4]
   10d1a:	681b      	ldr	r3, [r3, #0]
   10d1c:	4a22      	ldr	r2, [pc, #136]	; (10da8 <mp_obj_list_append+0xa6>)
   10d1e:	4293      	cmp	r3, r2
   10d20:	d005      	beq.n	10d2e <mp_obj_list_append+0x2c>
   10d22:	4b22      	ldr	r3, [pc, #136]	; (10dac <mp_obj_list_append+0xaa>)
   10d24:	4a22      	ldr	r2, [pc, #136]	; (10db0 <mp_obj_list_append+0xae>)
   10d26:	21eb      	movs	r1, #235	; 0xeb
   10d28:	4822      	ldr	r0, [pc, #136]	; (10db4 <mp_obj_list_append+0xb2>)
   10d2a:	f00a fa5b 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10d2e:	687b      	ldr	r3, [r7, #4]
   10d30:	60fb      	str	r3, [r7, #12]
    if (self->len >= self->alloc) {
   10d32:	68fb      	ldr	r3, [r7, #12]
   10d34:	689a      	ldr	r2, [r3, #8]
   10d36:	68fb      	ldr	r3, [r7, #12]
   10d38:	685b      	ldr	r3, [r3, #4]
   10d3a:	429a      	cmp	r2, r3
   10d3c:	d324      	bcc.n	10d88 <mp_obj_list_append+0x86>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
   10d3e:	68fb      	ldr	r3, [r7, #12]
   10d40:	68da      	ldr	r2, [r3, #12]
   10d42:	68fb      	ldr	r3, [r7, #12]
   10d44:	685b      	ldr	r3, [r3, #4]
   10d46:	00db      	lsls	r3, r3, #3
   10d48:	4619      	mov	r1, r3
   10d4a:	4610      	mov	r0, r2
   10d4c:	f7ef fb18 	bl	380 <m_realloc>
   10d50:	4602      	mov	r2, r0
   10d52:	68fb      	ldr	r3, [r7, #12]
   10d54:	60da      	str	r2, [r3, #12]
        self->alloc *= 2;
   10d56:	68fb      	ldr	r3, [r7, #12]
   10d58:	685b      	ldr	r3, [r3, #4]
   10d5a:	005a      	lsls	r2, r3, #1
   10d5c:	68fb      	ldr	r3, [r7, #12]
   10d5e:	605a      	str	r2, [r3, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
   10d60:	68fb      	ldr	r3, [r7, #12]
   10d62:	68da      	ldr	r2, [r3, #12]
   10d64:	68fb      	ldr	r3, [r7, #12]
   10d66:	689b      	ldr	r3, [r3, #8]
   10d68:	3301      	adds	r3, #1
   10d6a:	009b      	lsls	r3, r3, #2
   10d6c:	18d0      	adds	r0, r2, r3
   10d6e:	68fb      	ldr	r3, [r7, #12]
   10d70:	685a      	ldr	r2, [r3, #4]
   10d72:	68fb      	ldr	r3, [r7, #12]
   10d74:	689b      	ldr	r3, [r3, #8]
   10d76:	1ad3      	subs	r3, r2, r3
   10d78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10d7c:	3b01      	subs	r3, #1
   10d7e:	009b      	lsls	r3, r3, #2
   10d80:	461a      	mov	r2, r3
   10d82:	2100      	movs	r1, #0
   10d84:	f00b fc86 	bl	1c694 <memset>
    }
    self->items[self->len++] = arg;
   10d88:	68fb      	ldr	r3, [r7, #12]
   10d8a:	68da      	ldr	r2, [r3, #12]
   10d8c:	68fb      	ldr	r3, [r7, #12]
   10d8e:	689b      	ldr	r3, [r3, #8]
   10d90:	1c58      	adds	r0, r3, #1
   10d92:	68f9      	ldr	r1, [r7, #12]
   10d94:	6088      	str	r0, [r1, #8]
   10d96:	009b      	lsls	r3, r3, #2
   10d98:	4413      	add	r3, r2
   10d9a:	683a      	ldr	r2, [r7, #0]
   10d9c:	601a      	str	r2, [r3, #0]
    return mp_const_none; // return None, as per CPython
   10d9e:	4b06      	ldr	r3, [pc, #24]	; (10db8 <mp_obj_list_append+0xb6>)
}
   10da0:	4618      	mov	r0, r3
   10da2:	3710      	adds	r7, #16
   10da4:	46bd      	mov	sp, r7
   10da6:	bd80      	pop	{r7, pc}
   10da8:	0002287c 	.word	0x0002287c
   10dac:	0002266c 	.word	0x0002266c
   10db0:	000228b8 	.word	0x000228b8
   10db4:	000226c8 	.word	0x000226c8
   10db8:	00022b54 	.word	0x00022b54

00010dbc <list_extend>:

STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
   10dbc:	b580      	push	{r7, lr}
   10dbe:	b084      	sub	sp, #16
   10dc0:	af00      	add	r7, sp, #0
   10dc2:	6078      	str	r0, [r7, #4]
   10dc4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   10dc6:	6878      	ldr	r0, [r7, #4]
   10dc8:	f7ff fdaa 	bl	10920 <MP_OBJ_IS_OBJ>
   10dcc:	4603      	mov	r3, r0
   10dce:	2b00      	cmp	r3, #0
   10dd0:	d004      	beq.n	10ddc <list_extend+0x20>
   10dd2:	687b      	ldr	r3, [r7, #4]
   10dd4:	681b      	ldr	r3, [r3, #0]
   10dd6:	4a36      	ldr	r2, [pc, #216]	; (10eb0 <list_extend+0xf4>)
   10dd8:	4293      	cmp	r3, r2
   10dda:	d005      	beq.n	10de8 <list_extend+0x2c>
   10ddc:	4b35      	ldr	r3, [pc, #212]	; (10eb4 <list_extend+0xf8>)
   10dde:	4a36      	ldr	r2, [pc, #216]	; (10eb8 <list_extend+0xfc>)
   10de0:	21f7      	movs	r1, #247	; 0xf7
   10de2:	4836      	ldr	r0, [pc, #216]	; (10ebc <list_extend+0x100>)
   10de4:	f00a f9fe 	bl	1b1e4 <__assert_func>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   10de8:	6838      	ldr	r0, [r7, #0]
   10dea:	f7ff fd99 	bl	10920 <MP_OBJ_IS_OBJ>
   10dee:	4603      	mov	r3, r0
   10df0:	2b00      	cmp	r3, #0
   10df2:	d054      	beq.n	10e9e <list_extend+0xe2>
   10df4:	683b      	ldr	r3, [r7, #0]
   10df6:	681b      	ldr	r3, [r3, #0]
   10df8:	4a2d      	ldr	r2, [pc, #180]	; (10eb0 <list_extend+0xf4>)
   10dfa:	4293      	cmp	r3, r2
   10dfc:	d14f      	bne.n	10e9e <list_extend+0xe2>
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10dfe:	687b      	ldr	r3, [r7, #4]
   10e00:	60fb      	str	r3, [r7, #12]
        mp_obj_list_t *arg = MP_OBJ_TO_PTR(arg_in);
   10e02:	683b      	ldr	r3, [r7, #0]
   10e04:	60bb      	str	r3, [r7, #8]

        if (self->len + arg->len > self->alloc) {
   10e06:	68fb      	ldr	r3, [r7, #12]
   10e08:	689a      	ldr	r2, [r3, #8]
   10e0a:	68bb      	ldr	r3, [r7, #8]
   10e0c:	689b      	ldr	r3, [r3, #8]
   10e0e:	441a      	add	r2, r3
   10e10:	68fb      	ldr	r3, [r7, #12]
   10e12:	685b      	ldr	r3, [r3, #4]
   10e14:	429a      	cmp	r2, r3
   10e16:	d92c      	bls.n	10e72 <list_extend+0xb6>
            // TODO: use alloc policy for "4"
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
   10e18:	68fb      	ldr	r3, [r7, #12]
   10e1a:	68d8      	ldr	r0, [r3, #12]
   10e1c:	68fb      	ldr	r3, [r7, #12]
   10e1e:	689a      	ldr	r2, [r3, #8]
   10e20:	68bb      	ldr	r3, [r7, #8]
   10e22:	689b      	ldr	r3, [r3, #8]
   10e24:	4413      	add	r3, r2
   10e26:	3304      	adds	r3, #4
   10e28:	009b      	lsls	r3, r3, #2
   10e2a:	4619      	mov	r1, r3
   10e2c:	f7ef faa8 	bl	380 <m_realloc>
   10e30:	4602      	mov	r2, r0
   10e32:	68fb      	ldr	r3, [r7, #12]
   10e34:	60da      	str	r2, [r3, #12]
            self->alloc = self->len + arg->len + 4;
   10e36:	68fb      	ldr	r3, [r7, #12]
   10e38:	689a      	ldr	r2, [r3, #8]
   10e3a:	68bb      	ldr	r3, [r7, #8]
   10e3c:	689b      	ldr	r3, [r3, #8]
   10e3e:	4413      	add	r3, r2
   10e40:	1d1a      	adds	r2, r3, #4
   10e42:	68fb      	ldr	r3, [r7, #12]
   10e44:	605a      	str	r2, [r3, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
   10e46:	68fb      	ldr	r3, [r7, #12]
   10e48:	68da      	ldr	r2, [r3, #12]
   10e4a:	68fb      	ldr	r3, [r7, #12]
   10e4c:	6899      	ldr	r1, [r3, #8]
   10e4e:	68bb      	ldr	r3, [r7, #8]
   10e50:	689b      	ldr	r3, [r3, #8]
   10e52:	440b      	add	r3, r1
   10e54:	009b      	lsls	r3, r3, #2
   10e56:	18d0      	adds	r0, r2, r3
   10e58:	68fb      	ldr	r3, [r7, #12]
   10e5a:	685a      	ldr	r2, [r3, #4]
   10e5c:	68fb      	ldr	r3, [r7, #12]
   10e5e:	6899      	ldr	r1, [r3, #8]
   10e60:	68bb      	ldr	r3, [r7, #8]
   10e62:	689b      	ldr	r3, [r3, #8]
   10e64:	440b      	add	r3, r1
   10e66:	1ad3      	subs	r3, r2, r3
   10e68:	009b      	lsls	r3, r3, #2
   10e6a:	461a      	mov	r2, r3
   10e6c:	2100      	movs	r1, #0
   10e6e:	f00b fc11 	bl	1c694 <memset>
        }

        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
   10e72:	68fb      	ldr	r3, [r7, #12]
   10e74:	68da      	ldr	r2, [r3, #12]
   10e76:	68fb      	ldr	r3, [r7, #12]
   10e78:	689b      	ldr	r3, [r3, #8]
   10e7a:	009b      	lsls	r3, r3, #2
   10e7c:	18d0      	adds	r0, r2, r3
   10e7e:	68bb      	ldr	r3, [r7, #8]
   10e80:	68d9      	ldr	r1, [r3, #12]
   10e82:	68bb      	ldr	r3, [r7, #8]
   10e84:	689b      	ldr	r3, [r3, #8]
   10e86:	009b      	lsls	r3, r3, #2
   10e88:	461a      	mov	r2, r3
   10e8a:	f00b fb69 	bl	1c560 <memcpy>
        self->len += arg->len;
   10e8e:	68fb      	ldr	r3, [r7, #12]
   10e90:	689a      	ldr	r2, [r3, #8]
   10e92:	68bb      	ldr	r3, [r7, #8]
   10e94:	689b      	ldr	r3, [r3, #8]
   10e96:	441a      	add	r2, r3
   10e98:	68fb      	ldr	r3, [r7, #12]
   10e9a:	609a      	str	r2, [r3, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   10e9c:	e003      	b.n	10ea6 <list_extend+0xea>
    } else {
        list_extend_from_iter(self_in, arg_in);
   10e9e:	6839      	ldr	r1, [r7, #0]
   10ea0:	6878      	ldr	r0, [r7, #4]
   10ea2:	f7ff fd9d 	bl	109e0 <list_extend_from_iter>
    }
    return mp_const_none; // return None, as per CPython
   10ea6:	4b06      	ldr	r3, [pc, #24]	; (10ec0 <list_extend+0x104>)
}
   10ea8:	4618      	mov	r0, r3
   10eaa:	3710      	adds	r7, #16
   10eac:	46bd      	mov	sp, r7
   10eae:	bd80      	pop	{r7, pc}
   10eb0:	0002287c 	.word	0x0002287c
   10eb4:	0002266c 	.word	0x0002266c
   10eb8:	000228cc 	.word	0x000228cc
   10ebc:	000226c8 	.word	0x000226c8
   10ec0:	00022b54 	.word	0x00022b54

00010ec4 <list_pop>:

STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
   10ec4:	b580      	push	{r7, lr}
   10ec6:	b086      	sub	sp, #24
   10ec8:	af00      	add	r7, sp, #0
   10eca:	6078      	str	r0, [r7, #4]
   10ecc:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   10ece:	683b      	ldr	r3, [r7, #0]
   10ed0:	681b      	ldr	r3, [r3, #0]
   10ed2:	4618      	mov	r0, r3
   10ed4:	f7ff fd24 	bl	10920 <MP_OBJ_IS_OBJ>
   10ed8:	4603      	mov	r3, r0
   10eda:	2b00      	cmp	r3, #0
   10edc:	d005      	beq.n	10eea <list_pop+0x26>
   10ede:	683b      	ldr	r3, [r7, #0]
   10ee0:	681b      	ldr	r3, [r3, #0]
   10ee2:	681b      	ldr	r3, [r3, #0]
   10ee4:	4a36      	ldr	r2, [pc, #216]	; (10fc0 <list_pop+0xfc>)
   10ee6:	4293      	cmp	r3, r2
   10ee8:	d006      	beq.n	10ef8 <list_pop+0x34>
   10eea:	4b36      	ldr	r3, [pc, #216]	; (10fc4 <list_pop+0x100>)
   10eec:	4a36      	ldr	r2, [pc, #216]	; (10fc8 <list_pop+0x104>)
   10eee:	f44f 7186 	mov.w	r1, #268	; 0x10c
   10ef2:	4836      	ldr	r0, [pc, #216]	; (10fcc <list_pop+0x108>)
   10ef4:	f00a f976 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   10ef8:	683b      	ldr	r3, [r7, #0]
   10efa:	681b      	ldr	r3, [r3, #0]
   10efc:	617b      	str	r3, [r7, #20]
    if (self->len == 0) {
   10efe:	697b      	ldr	r3, [r7, #20]
   10f00:	689b      	ldr	r3, [r3, #8]
   10f02:	2b00      	cmp	r3, #0
   10f04:	d103      	bne.n	10f0e <list_pop+0x4a>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
   10f06:	4932      	ldr	r1, [pc, #200]	; (10fd0 <list_pop+0x10c>)
   10f08:	4832      	ldr	r0, [pc, #200]	; (10fd4 <list_pop+0x110>)
   10f0a:	f7fb ffb5 	bl	ce78 <mp_raise_msg>
    }
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
   10f0e:	697b      	ldr	r3, [r7, #20]
   10f10:	6818      	ldr	r0, [r3, #0]
   10f12:	697b      	ldr	r3, [r7, #20]
   10f14:	6899      	ldr	r1, [r3, #8]
   10f16:	687b      	ldr	r3, [r7, #4]
   10f18:	2b01      	cmp	r3, #1
   10f1a:	d002      	beq.n	10f22 <list_pop+0x5e>
   10f1c:	683b      	ldr	r3, [r7, #0]
   10f1e:	685a      	ldr	r2, [r3, #4]
   10f20:	e001      	b.n	10f26 <list_pop+0x62>
   10f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10f26:	2300      	movs	r3, #0
   10f28:	f7fc fea6 	bl	dc78 <mp_get_index>
   10f2c:	6138      	str	r0, [r7, #16]
    mp_obj_t ret = self->items[index];
   10f2e:	697b      	ldr	r3, [r7, #20]
   10f30:	68da      	ldr	r2, [r3, #12]
   10f32:	693b      	ldr	r3, [r7, #16]
   10f34:	009b      	lsls	r3, r3, #2
   10f36:	4413      	add	r3, r2
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	60fb      	str	r3, [r7, #12]
    self->len -= 1;
   10f3c:	697b      	ldr	r3, [r7, #20]
   10f3e:	689b      	ldr	r3, [r3, #8]
   10f40:	1e5a      	subs	r2, r3, #1
   10f42:	697b      	ldr	r3, [r7, #20]
   10f44:	609a      	str	r2, [r3, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
   10f46:	697b      	ldr	r3, [r7, #20]
   10f48:	68da      	ldr	r2, [r3, #12]
   10f4a:	693b      	ldr	r3, [r7, #16]
   10f4c:	009b      	lsls	r3, r3, #2
   10f4e:	18d0      	adds	r0, r2, r3
   10f50:	697b      	ldr	r3, [r7, #20]
   10f52:	68da      	ldr	r2, [r3, #12]
   10f54:	693b      	ldr	r3, [r7, #16]
   10f56:	3301      	adds	r3, #1
   10f58:	009b      	lsls	r3, r3, #2
   10f5a:	18d1      	adds	r1, r2, r3
   10f5c:	697b      	ldr	r3, [r7, #20]
   10f5e:	689a      	ldr	r2, [r3, #8]
   10f60:	693b      	ldr	r3, [r7, #16]
   10f62:	1ad3      	subs	r3, r2, r3
   10f64:	009b      	lsls	r3, r3, #2
   10f66:	461a      	mov	r2, r3
   10f68:	f00b fb5f 	bl	1c62a <memmove>
    // Clear stale pointer from slot which just got freed to prevent GC issues
    self->items[self->len] = MP_OBJ_NULL;
   10f6c:	697b      	ldr	r3, [r7, #20]
   10f6e:	68da      	ldr	r2, [r3, #12]
   10f70:	697b      	ldr	r3, [r7, #20]
   10f72:	689b      	ldr	r3, [r3, #8]
   10f74:	009b      	lsls	r3, r3, #2
   10f76:	4413      	add	r3, r2
   10f78:	2200      	movs	r2, #0
   10f7a:	601a      	str	r2, [r3, #0]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
   10f7c:	697b      	ldr	r3, [r7, #20]
   10f7e:	685b      	ldr	r3, [r3, #4]
   10f80:	2b04      	cmp	r3, #4
   10f82:	d918      	bls.n	10fb6 <list_pop+0xf2>
   10f84:	697b      	ldr	r3, [r7, #20]
   10f86:	685a      	ldr	r2, [r3, #4]
   10f88:	697b      	ldr	r3, [r7, #20]
   10f8a:	689b      	ldr	r3, [r3, #8]
   10f8c:	005b      	lsls	r3, r3, #1
   10f8e:	429a      	cmp	r2, r3
   10f90:	d911      	bls.n	10fb6 <list_pop+0xf2>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
   10f92:	697b      	ldr	r3, [r7, #20]
   10f94:	68da      	ldr	r2, [r3, #12]
   10f96:	697b      	ldr	r3, [r7, #20]
   10f98:	685b      	ldr	r3, [r3, #4]
   10f9a:	085b      	lsrs	r3, r3, #1
   10f9c:	009b      	lsls	r3, r3, #2
   10f9e:	4619      	mov	r1, r3
   10fa0:	4610      	mov	r0, r2
   10fa2:	f7ef f9ed 	bl	380 <m_realloc>
   10fa6:	4602      	mov	r2, r0
   10fa8:	697b      	ldr	r3, [r7, #20]
   10faa:	60da      	str	r2, [r3, #12]
        self->alloc /= 2;
   10fac:	697b      	ldr	r3, [r7, #20]
   10fae:	685b      	ldr	r3, [r3, #4]
   10fb0:	085a      	lsrs	r2, r3, #1
   10fb2:	697b      	ldr	r3, [r7, #20]
   10fb4:	605a      	str	r2, [r3, #4]
    }
    return ret;
   10fb6:	68fb      	ldr	r3, [r7, #12]
}
   10fb8:	4618      	mov	r0, r3
   10fba:	3718      	adds	r7, #24
   10fbc:	46bd      	mov	sp, r7
   10fbe:	bd80      	pop	{r7, pc}
   10fc0:	0002287c 	.word	0x0002287c
   10fc4:	000226dc 	.word	0x000226dc
   10fc8:	000228d8 	.word	0x000228d8
   10fcc:	000226c8 	.word	0x000226c8
   10fd0:	00022738 	.word	0x00022738
   10fd4:	00021c00 	.word	0x00021c00

00010fd8 <mp_quicksort>:

STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
   10fd8:	b580      	push	{r7, lr}
   10fda:	b08a      	sub	sp, #40	; 0x28
   10fdc:	af00      	add	r7, sp, #0
   10fde:	60f8      	str	r0, [r7, #12]
   10fe0:	60b9      	str	r1, [r7, #8]
   10fe2:	607a      	str	r2, [r7, #4]
   10fe4:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    while (head < tail) {
   10fe6:	e085      	b.n	110f4 <mp_quicksort+0x11c>
        mp_obj_t *h = head - 1;
   10fe8:	68fb      	ldr	r3, [r7, #12]
   10fea:	3b04      	subs	r3, #4
   10fec:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_t *t = tail;
   10fee:	68bb      	ldr	r3, [r7, #8]
   10ff0:	623b      	str	r3, [r7, #32]
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
   10ff2:	687b      	ldr	r3, [r7, #4]
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	d102      	bne.n	10ffe <mp_quicksort+0x26>
   10ff8:	68bb      	ldr	r3, [r7, #8]
   10ffa:	681b      	ldr	r3, [r3, #0]
   10ffc:	e006      	b.n	1100c <mp_quicksort+0x34>
   10ffe:	68bb      	ldr	r3, [r7, #8]
   11000:	681b      	ldr	r3, [r3, #0]
   11002:	4619      	mov	r1, r3
   11004:	6878      	ldr	r0, [r7, #4]
   11006:	f7fa fe72 	bl	bcee <mp_call_function_1>
   1100a:	4603      	mov	r3, r0
   1100c:	61fb      	str	r3, [r7, #28]
        for (;;) {
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
   1100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11010:	3304      	adds	r3, #4
   11012:	627b      	str	r3, [r7, #36]	; 0x24
   11014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11016:	6a3b      	ldr	r3, [r7, #32]
   11018:	429a      	cmp	r2, r3
   1101a:	d215      	bcs.n	11048 <mp_quicksort+0x70>
   1101c:	687b      	ldr	r3, [r7, #4]
   1101e:	2b00      	cmp	r3, #0
   11020:	d102      	bne.n	11028 <mp_quicksort+0x50>
   11022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11024:	681b      	ldr	r3, [r3, #0]
   11026:	e006      	b.n	11036 <mp_quicksort+0x5e>
   11028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1102a:	681b      	ldr	r3, [r3, #0]
   1102c:	4619      	mov	r1, r3
   1102e:	6878      	ldr	r0, [r7, #4]
   11030:	f7fa fe5d 	bl	bcee <mp_call_function_1>
   11034:	4603      	mov	r3, r0
   11036:	69fa      	ldr	r2, [r7, #28]
   11038:	4619      	mov	r1, r3
   1103a:	2000      	movs	r0, #0
   1103c:	f7fa fbe6 	bl	b80c <mp_binary_op>
   11040:	4602      	mov	r2, r0
   11042:	683b      	ldr	r3, [r7, #0]
   11044:	429a      	cmp	r2, r3
   11046:	d0e2      	beq.n	1100e <mp_quicksort+0x36>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
   11048:	6a3b      	ldr	r3, [r7, #32]
   1104a:	3b04      	subs	r3, #4
   1104c:	623b      	str	r3, [r7, #32]
   1104e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11050:	6a3b      	ldr	r3, [r7, #32]
   11052:	429a      	cmp	r2, r3
   11054:	d215      	bcs.n	11082 <mp_quicksort+0xaa>
   11056:	687b      	ldr	r3, [r7, #4]
   11058:	2b00      	cmp	r3, #0
   1105a:	d102      	bne.n	11062 <mp_quicksort+0x8a>
   1105c:	6a3b      	ldr	r3, [r7, #32]
   1105e:	681b      	ldr	r3, [r3, #0]
   11060:	e006      	b.n	11070 <mp_quicksort+0x98>
   11062:	6a3b      	ldr	r3, [r7, #32]
   11064:	681b      	ldr	r3, [r3, #0]
   11066:	4619      	mov	r1, r3
   11068:	6878      	ldr	r0, [r7, #4]
   1106a:	f7fa fe40 	bl	bcee <mp_call_function_1>
   1106e:	4603      	mov	r3, r0
   11070:	461a      	mov	r2, r3
   11072:	69f9      	ldr	r1, [r7, #28]
   11074:	2000      	movs	r0, #0
   11076:	f7fa fbc9 	bl	b80c <mp_binary_op>
   1107a:	4602      	mov	r2, r0
   1107c:	683b      	ldr	r3, [r7, #0]
   1107e:	429a      	cmp	r2, r3
   11080:	d0e2      	beq.n	11048 <mp_quicksort+0x70>
            if (h >= t) break;
   11082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11084:	6a3b      	ldr	r3, [r7, #32]
   11086:	429a      	cmp	r2, r3
   11088:	d20a      	bcs.n	110a0 <mp_quicksort+0xc8>
            mp_obj_t x = h[0];
   1108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1108c:	681b      	ldr	r3, [r3, #0]
   1108e:	61bb      	str	r3, [r7, #24]
            h[0] = t[0];
   11090:	6a3b      	ldr	r3, [r7, #32]
   11092:	681a      	ldr	r2, [r3, #0]
   11094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11096:	601a      	str	r2, [r3, #0]
            t[0] = x;
   11098:	6a3b      	ldr	r3, [r7, #32]
   1109a:	69ba      	ldr	r2, [r7, #24]
   1109c:	601a      	str	r2, [r3, #0]
        for (;;) {
   1109e:	e7b6      	b.n	1100e <mp_quicksort+0x36>
            if (h >= t) break;
   110a0:	bf00      	nop
        }
        mp_obj_t x = h[0];
   110a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110a4:	681b      	ldr	r3, [r3, #0]
   110a6:	617b      	str	r3, [r7, #20]
        h[0] = tail[0];
   110a8:	68bb      	ldr	r3, [r7, #8]
   110aa:	681a      	ldr	r2, [r3, #0]
   110ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110ae:	601a      	str	r2, [r3, #0]
        tail[0] = x;
   110b0:	68bb      	ldr	r3, [r7, #8]
   110b2:	697a      	ldr	r2, [r7, #20]
   110b4:	601a      	str	r2, [r3, #0]
        // do the smaller recursive call first, to keep stack within O(log(N))
        if (t - head < tail - h - 1) {
   110b6:	6a3a      	ldr	r2, [r7, #32]
   110b8:	68fb      	ldr	r3, [r7, #12]
   110ba:	1ad3      	subs	r3, r2, r3
   110bc:	109b      	asrs	r3, r3, #2
   110be:	4619      	mov	r1, r3
   110c0:	68ba      	ldr	r2, [r7, #8]
   110c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110c4:	1ad3      	subs	r3, r2, r3
   110c6:	109b      	asrs	r3, r3, #2
   110c8:	3b01      	subs	r3, #1
   110ca:	4299      	cmp	r1, r3
   110cc:	da09      	bge.n	110e2 <mp_quicksort+0x10a>
            mp_quicksort(head, t, key_fn, binop_less_result);
   110ce:	683b      	ldr	r3, [r7, #0]
   110d0:	687a      	ldr	r2, [r7, #4]
   110d2:	6a39      	ldr	r1, [r7, #32]
   110d4:	68f8      	ldr	r0, [r7, #12]
   110d6:	f7ff ff7f 	bl	10fd8 <mp_quicksort>
            head = h + 1;
   110da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110dc:	3304      	adds	r3, #4
   110de:	60fb      	str	r3, [r7, #12]
   110e0:	e008      	b.n	110f4 <mp_quicksort+0x11c>
        } else {
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
   110e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110e4:	1d18      	adds	r0, r3, #4
   110e6:	683b      	ldr	r3, [r7, #0]
   110e8:	687a      	ldr	r2, [r7, #4]
   110ea:	68b9      	ldr	r1, [r7, #8]
   110ec:	f7ff ff74 	bl	10fd8 <mp_quicksort>
            tail = t;
   110f0:	6a3b      	ldr	r3, [r7, #32]
   110f2:	60bb      	str	r3, [r7, #8]
    while (head < tail) {
   110f4:	68fa      	ldr	r2, [r7, #12]
   110f6:	68bb      	ldr	r3, [r7, #8]
   110f8:	429a      	cmp	r2, r3
   110fa:	f4ff af75 	bcc.w	10fe8 <mp_quicksort+0x10>
        }
    }
}
   110fe:	bf00      	nop
   11100:	3728      	adds	r7, #40	; 0x28
   11102:	46bd      	mov	sp, r7
   11104:	bd80      	pop	{r7, pc}

00011106 <mp_obj_list_sort>:

// TODO Python defines sort to be stable but ours is not
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   11106:	b580      	push	{r7, lr}
   11108:	b08a      	sub	sp, #40	; 0x28
   1110a:	af02      	add	r7, sp, #8
   1110c:	60f8      	str	r0, [r7, #12]
   1110e:	60b9      	str	r1, [r7, #8]
   11110:	607a      	str	r2, [r7, #4]

    // parse args
    struct {
        mp_arg_val_t key, reverse;
    } args;
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
   11112:	68fb      	ldr	r3, [r7, #12]
   11114:	1e58      	subs	r0, r3, #1
   11116:	68bb      	ldr	r3, [r7, #8]
   11118:	1d19      	adds	r1, r3, #4
   1111a:	f107 0314 	add.w	r3, r7, #20
   1111e:	9301      	str	r3, [sp, #4]
   11120:	4b20      	ldr	r3, [pc, #128]	; (111a4 <mp_obj_list_sort+0x9e>)
   11122:	9300      	str	r3, [sp, #0]
   11124:	2302      	movs	r3, #2
   11126:	687a      	ldr	r2, [r7, #4]
   11128:	f7fb ff1a 	bl	cf60 <mp_arg_parse_all>
        MP_ARRAY_SIZE(allowed_args), allowed_args, (mp_arg_val_t*)&args);

    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
   1112c:	68bb      	ldr	r3, [r7, #8]
   1112e:	681b      	ldr	r3, [r3, #0]
   11130:	4618      	mov	r0, r3
   11132:	f7ff fbf5 	bl	10920 <MP_OBJ_IS_OBJ>
   11136:	4603      	mov	r3, r0
   11138:	2b00      	cmp	r3, #0
   1113a:	d005      	beq.n	11148 <mp_obj_list_sort+0x42>
   1113c:	68bb      	ldr	r3, [r7, #8]
   1113e:	681b      	ldr	r3, [r3, #0]
   11140:	681b      	ldr	r3, [r3, #0]
   11142:	4a19      	ldr	r2, [pc, #100]	; (111a8 <mp_obj_list_sort+0xa2>)
   11144:	4293      	cmp	r3, r2
   11146:	d006      	beq.n	11156 <mp_obj_list_sort+0x50>
   11148:	4b18      	ldr	r3, [pc, #96]	; (111ac <mp_obj_list_sort+0xa6>)
   1114a:	4a19      	ldr	r2, [pc, #100]	; (111b0 <mp_obj_list_sort+0xaa>)
   1114c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11150:	4818      	ldr	r0, [pc, #96]	; (111b4 <mp_obj_list_sort+0xae>)
   11152:	f00a f847 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(pos_args[0]);
   11156:	68bb      	ldr	r3, [r7, #8]
   11158:	681b      	ldr	r3, [r3, #0]
   1115a:	61fb      	str	r3, [r7, #28]

    if (self->len > 1) {
   1115c:	69fb      	ldr	r3, [r7, #28]
   1115e:	689b      	ldr	r3, [r3, #8]
   11160:	2b01      	cmp	r3, #1
   11162:	d919      	bls.n	11198 <mp_obj_list_sort+0x92>
        mp_quicksort(self->items, self->items + self->len - 1,
   11164:	69fb      	ldr	r3, [r7, #28]
   11166:	68d8      	ldr	r0, [r3, #12]
   11168:	69fb      	ldr	r3, [r7, #28]
   1116a:	68da      	ldr	r2, [r3, #12]
   1116c:	69fb      	ldr	r3, [r7, #28]
   1116e:	689b      	ldr	r3, [r3, #8]
   11170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11174:	3b01      	subs	r3, #1
   11176:	009b      	lsls	r3, r3, #2
   11178:	18d1      	adds	r1, r2, r3
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
   1117a:	697b      	ldr	r3, [r7, #20]
        mp_quicksort(self->items, self->items + self->len - 1,
   1117c:	4a0e      	ldr	r2, [pc, #56]	; (111b8 <mp_obj_list_sort+0xb2>)
   1117e:	4293      	cmp	r3, r2
   11180:	d001      	beq.n	11186 <mp_obj_list_sort+0x80>
   11182:	697a      	ldr	r2, [r7, #20]
   11184:	e000      	b.n	11188 <mp_obj_list_sort+0x82>
   11186:	2200      	movs	r2, #0
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
   11188:	7e3b      	ldrb	r3, [r7, #24]
        mp_quicksort(self->items, self->items + self->len - 1,
   1118a:	2b00      	cmp	r3, #0
   1118c:	d001      	beq.n	11192 <mp_obj_list_sort+0x8c>
   1118e:	4b0b      	ldr	r3, [pc, #44]	; (111bc <mp_obj_list_sort+0xb6>)
   11190:	e000      	b.n	11194 <mp_obj_list_sort+0x8e>
   11192:	4b0b      	ldr	r3, [pc, #44]	; (111c0 <mp_obj_list_sort+0xba>)
   11194:	f7ff ff20 	bl	10fd8 <mp_quicksort>
    }

    return mp_const_none;
   11198:	4b07      	ldr	r3, [pc, #28]	; (111b8 <mp_obj_list_sort+0xb2>)
}
   1119a:	4618      	mov	r0, r3
   1119c:	3720      	adds	r7, #32
   1119e:	46bd      	mov	sp, r7
   111a0:	bd80      	pop	{r7, pc}
   111a2:	bf00      	nop
   111a4:	000228e4 	.word	0x000228e4
   111a8:	0002287c 	.word	0x0002287c
   111ac:	0002274c 	.word	0x0002274c
   111b0:	000228f4 	.word	0x000228f4
   111b4:	000226c8 	.word	0x000226c8
   111b8:	00022b54 	.word	0x00022b54
   111bc:	00021308 	.word	0x00021308
   111c0:	00021310 	.word	0x00021310

000111c4 <list_clear>:

STATIC mp_obj_t list_clear(mp_obj_t self_in) {
   111c4:	b580      	push	{r7, lr}
   111c6:	b084      	sub	sp, #16
   111c8:	af00      	add	r7, sp, #0
   111ca:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   111cc:	6878      	ldr	r0, [r7, #4]
   111ce:	f7ff fba7 	bl	10920 <MP_OBJ_IS_OBJ>
   111d2:	4603      	mov	r3, r0
   111d4:	2b00      	cmp	r3, #0
   111d6:	d004      	beq.n	111e2 <list_clear+0x1e>
   111d8:	687b      	ldr	r3, [r7, #4]
   111da:	681b      	ldr	r3, [r3, #0]
   111dc:	4a14      	ldr	r2, [pc, #80]	; (11230 <list_clear+0x6c>)
   111de:	4293      	cmp	r3, r2
   111e0:	d006      	beq.n	111f0 <list_clear+0x2c>
   111e2:	4b14      	ldr	r3, [pc, #80]	; (11234 <list_clear+0x70>)
   111e4:	4a14      	ldr	r2, [pc, #80]	; (11238 <list_clear+0x74>)
   111e6:	f240 1155 	movw	r1, #341	; 0x155
   111ea:	4814      	ldr	r0, [pc, #80]	; (1123c <list_clear+0x78>)
   111ec:	f009 fffa 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   111f0:	687b      	ldr	r3, [r7, #4]
   111f2:	60fb      	str	r3, [r7, #12]
    self->len = 0;
   111f4:	68fb      	ldr	r3, [r7, #12]
   111f6:	2200      	movs	r2, #0
   111f8:	609a      	str	r2, [r3, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
   111fa:	68fb      	ldr	r3, [r7, #12]
   111fc:	68db      	ldr	r3, [r3, #12]
   111fe:	2110      	movs	r1, #16
   11200:	4618      	mov	r0, r3
   11202:	f7ef f8bd 	bl	380 <m_realloc>
   11206:	4602      	mov	r2, r0
   11208:	68fb      	ldr	r3, [r7, #12]
   1120a:	60da      	str	r2, [r3, #12]
    self->alloc = LIST_MIN_ALLOC;
   1120c:	68fb      	ldr	r3, [r7, #12]
   1120e:	2204      	movs	r2, #4
   11210:	605a      	str	r2, [r3, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
   11212:	68fb      	ldr	r3, [r7, #12]
   11214:	68d8      	ldr	r0, [r3, #12]
   11216:	68fb      	ldr	r3, [r7, #12]
   11218:	685b      	ldr	r3, [r3, #4]
   1121a:	009b      	lsls	r3, r3, #2
   1121c:	461a      	mov	r2, r3
   1121e:	2100      	movs	r1, #0
   11220:	f00b fa38 	bl	1c694 <memset>
    return mp_const_none;
   11224:	4b06      	ldr	r3, [pc, #24]	; (11240 <list_clear+0x7c>)
}
   11226:	4618      	mov	r0, r3
   11228:	3710      	adds	r7, #16
   1122a:	46bd      	mov	sp, r7
   1122c:	bd80      	pop	{r7, pc}
   1122e:	bf00      	nop
   11230:	0002287c 	.word	0x0002287c
   11234:	0002266c 	.word	0x0002266c
   11238:	00022908 	.word	0x00022908
   1123c:	000226c8 	.word	0x000226c8
   11240:	00022b54 	.word	0x00022b54

00011244 <list_copy>:

STATIC mp_obj_t list_copy(mp_obj_t self_in) {
   11244:	b580      	push	{r7, lr}
   11246:	b084      	sub	sp, #16
   11248:	af00      	add	r7, sp, #0
   1124a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1124c:	6878      	ldr	r0, [r7, #4]
   1124e:	f7ff fb67 	bl	10920 <MP_OBJ_IS_OBJ>
   11252:	4603      	mov	r3, r0
   11254:	2b00      	cmp	r3, #0
   11256:	d004      	beq.n	11262 <list_copy+0x1e>
   11258:	687b      	ldr	r3, [r7, #4]
   1125a:	681b      	ldr	r3, [r3, #0]
   1125c:	4a0c      	ldr	r2, [pc, #48]	; (11290 <list_copy+0x4c>)
   1125e:	4293      	cmp	r3, r2
   11260:	d006      	beq.n	11270 <list_copy+0x2c>
   11262:	4b0c      	ldr	r3, [pc, #48]	; (11294 <list_copy+0x50>)
   11264:	4a0c      	ldr	r2, [pc, #48]	; (11298 <list_copy+0x54>)
   11266:	f240 115f 	movw	r1, #351	; 0x15f
   1126a:	480c      	ldr	r0, [pc, #48]	; (1129c <list_copy+0x58>)
   1126c:	f009 ffba 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11270:	687b      	ldr	r3, [r7, #4]
   11272:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_list(self->len, self->items);
   11274:	68fb      	ldr	r3, [r7, #12]
   11276:	689a      	ldr	r2, [r3, #8]
   11278:	68fb      	ldr	r3, [r7, #12]
   1127a:	68db      	ldr	r3, [r3, #12]
   1127c:	4619      	mov	r1, r3
   1127e:	4610      	mov	r0, r2
   11280:	f000 f9ab 	bl	115da <mp_obj_new_list>
   11284:	4603      	mov	r3, r0
}
   11286:	4618      	mov	r0, r3
   11288:	3710      	adds	r7, #16
   1128a:	46bd      	mov	sp, r7
   1128c:	bd80      	pop	{r7, pc}
   1128e:	bf00      	nop
   11290:	0002287c 	.word	0x0002287c
   11294:	0002266c 	.word	0x0002266c
   11298:	00022914 	.word	0x00022914
   1129c:	000226c8 	.word	0x000226c8

000112a0 <list_count>:

STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
   112a0:	b580      	push	{r7, lr}
   112a2:	b084      	sub	sp, #16
   112a4:	af00      	add	r7, sp, #0
   112a6:	6078      	str	r0, [r7, #4]
   112a8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   112aa:	6878      	ldr	r0, [r7, #4]
   112ac:	f7ff fb38 	bl	10920 <MP_OBJ_IS_OBJ>
   112b0:	4603      	mov	r3, r0
   112b2:	2b00      	cmp	r3, #0
   112b4:	d004      	beq.n	112c0 <list_count+0x20>
   112b6:	687b      	ldr	r3, [r7, #4]
   112b8:	681b      	ldr	r3, [r3, #0]
   112ba:	4a0c      	ldr	r2, [pc, #48]	; (112ec <list_count+0x4c>)
   112bc:	4293      	cmp	r3, r2
   112be:	d006      	beq.n	112ce <list_count+0x2e>
   112c0:	4b0b      	ldr	r3, [pc, #44]	; (112f0 <list_count+0x50>)
   112c2:	4a0c      	ldr	r2, [pc, #48]	; (112f4 <list_count+0x54>)
   112c4:	f240 1165 	movw	r1, #357	; 0x165
   112c8:	480b      	ldr	r0, [pc, #44]	; (112f8 <list_count+0x58>)
   112ca:	f009 ff8b 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   112ce:	687b      	ldr	r3, [r7, #4]
   112d0:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   112d2:	68fb      	ldr	r3, [r7, #12]
   112d4:	68d8      	ldr	r0, [r3, #12]
   112d6:	68fb      	ldr	r3, [r7, #12]
   112d8:	689b      	ldr	r3, [r3, #8]
   112da:	683a      	ldr	r2, [r7, #0]
   112dc:	4619      	mov	r1, r3
   112de:	f006 f9dd 	bl	1769c <mp_seq_count_obj>
   112e2:	4603      	mov	r3, r0
}
   112e4:	4618      	mov	r0, r3
   112e6:	3710      	adds	r7, #16
   112e8:	46bd      	mov	sp, r7
   112ea:	bd80      	pop	{r7, pc}
   112ec:	0002287c 	.word	0x0002287c
   112f0:	0002266c 	.word	0x0002266c
   112f4:	00022920 	.word	0x00022920
   112f8:	000226c8 	.word	0x000226c8

000112fc <list_index>:

STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
   112fc:	b580      	push	{r7, lr}
   112fe:	b084      	sub	sp, #16
   11300:	af00      	add	r7, sp, #0
   11302:	6078      	str	r0, [r7, #4]
   11304:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   11306:	683b      	ldr	r3, [r7, #0]
   11308:	681b      	ldr	r3, [r3, #0]
   1130a:	4618      	mov	r0, r3
   1130c:	f7ff fb08 	bl	10920 <MP_OBJ_IS_OBJ>
   11310:	4603      	mov	r3, r0
   11312:	2b00      	cmp	r3, #0
   11314:	d005      	beq.n	11322 <list_index+0x26>
   11316:	683b      	ldr	r3, [r7, #0]
   11318:	681b      	ldr	r3, [r3, #0]
   1131a:	681b      	ldr	r3, [r3, #0]
   1131c:	4a0c      	ldr	r2, [pc, #48]	; (11350 <list_index+0x54>)
   1131e:	4293      	cmp	r3, r2
   11320:	d006      	beq.n	11330 <list_index+0x34>
   11322:	4b0c      	ldr	r3, [pc, #48]	; (11354 <list_index+0x58>)
   11324:	4a0c      	ldr	r2, [pc, #48]	; (11358 <list_index+0x5c>)
   11326:	f240 116b 	movw	r1, #363	; 0x16b
   1132a:	480c      	ldr	r0, [pc, #48]	; (1135c <list_index+0x60>)
   1132c:	f009 ff5a 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   11330:	683b      	ldr	r3, [r7, #0]
   11332:	681b      	ldr	r3, [r3, #0]
   11334:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   11336:	68fb      	ldr	r3, [r7, #12]
   11338:	68d8      	ldr	r0, [r3, #12]
   1133a:	68fb      	ldr	r3, [r7, #12]
   1133c:	6899      	ldr	r1, [r3, #8]
   1133e:	683b      	ldr	r3, [r7, #0]
   11340:	687a      	ldr	r2, [r7, #4]
   11342:	f006 f95b 	bl	175fc <mp_seq_index_obj>
   11346:	4603      	mov	r3, r0
}
   11348:	4618      	mov	r0, r3
   1134a:	3710      	adds	r7, #16
   1134c:	46bd      	mov	sp, r7
   1134e:	bd80      	pop	{r7, pc}
   11350:	0002287c 	.word	0x0002287c
   11354:	000226dc 	.word	0x000226dc
   11358:	0002292c 	.word	0x0002292c
   1135c:	000226c8 	.word	0x000226c8

00011360 <list_insert>:

STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
   11360:	b580      	push	{r7, lr}
   11362:	b088      	sub	sp, #32
   11364:	af00      	add	r7, sp, #0
   11366:	60f8      	str	r0, [r7, #12]
   11368:	60b9      	str	r1, [r7, #8]
   1136a:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1136c:	68f8      	ldr	r0, [r7, #12]
   1136e:	f7ff fad7 	bl	10920 <MP_OBJ_IS_OBJ>
   11372:	4603      	mov	r3, r0
   11374:	2b00      	cmp	r3, #0
   11376:	d004      	beq.n	11382 <list_insert+0x22>
   11378:	68fb      	ldr	r3, [r7, #12]
   1137a:	681b      	ldr	r3, [r3, #0]
   1137c:	4a27      	ldr	r2, [pc, #156]	; (1141c <list_insert+0xbc>)
   1137e:	4293      	cmp	r3, r2
   11380:	d006      	beq.n	11390 <list_insert+0x30>
   11382:	4b27      	ldr	r3, [pc, #156]	; (11420 <list_insert+0xc0>)
   11384:	4a27      	ldr	r2, [pc, #156]	; (11424 <list_insert+0xc4>)
   11386:	f240 1171 	movw	r1, #369	; 0x171
   1138a:	4827      	ldr	r0, [pc, #156]	; (11428 <list_insert+0xc8>)
   1138c:	f009 ff2a 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11390:	68fb      	ldr	r3, [r7, #12]
   11392:	617b      	str	r3, [r7, #20]
    // insert has its own strange index logic
    mp_int_t index = MP_OBJ_SMALL_INT_VALUE(idx);
   11394:	68bb      	ldr	r3, [r7, #8]
   11396:	105b      	asrs	r3, r3, #1
   11398:	61fb      	str	r3, [r7, #28]
    if (index < 0) {
   1139a:	69fb      	ldr	r3, [r7, #28]
   1139c:	2b00      	cmp	r3, #0
   1139e:	da04      	bge.n	113aa <list_insert+0x4a>
         index += self->len;
   113a0:	697b      	ldr	r3, [r7, #20]
   113a2:	689a      	ldr	r2, [r3, #8]
   113a4:	69fb      	ldr	r3, [r7, #28]
   113a6:	4413      	add	r3, r2
   113a8:	61fb      	str	r3, [r7, #28]
    }
    if (index < 0) {
   113aa:	69fb      	ldr	r3, [r7, #28]
   113ac:	2b00      	cmp	r3, #0
   113ae:	da01      	bge.n	113b4 <list_insert+0x54>
         index = 0;
   113b0:	2300      	movs	r3, #0
   113b2:	61fb      	str	r3, [r7, #28]
    }
    if ((size_t)index > self->len) {
   113b4:	697b      	ldr	r3, [r7, #20]
   113b6:	689a      	ldr	r2, [r3, #8]
   113b8:	69fb      	ldr	r3, [r7, #28]
   113ba:	429a      	cmp	r2, r3
   113bc:	d202      	bcs.n	113c4 <list_insert+0x64>
         index = self->len;
   113be:	697b      	ldr	r3, [r7, #20]
   113c0:	689b      	ldr	r3, [r3, #8]
   113c2:	61fb      	str	r3, [r7, #28]
    }

    mp_obj_list_append(self_in, mp_const_none);
   113c4:	4919      	ldr	r1, [pc, #100]	; (1142c <list_insert+0xcc>)
   113c6:	68f8      	ldr	r0, [r7, #12]
   113c8:	f7ff fc9b 	bl	10d02 <mp_obj_list_append>

    for (mp_int_t i = self->len-1; i > index; i--) {
   113cc:	697b      	ldr	r3, [r7, #20]
   113ce:	689b      	ldr	r3, [r3, #8]
   113d0:	3b01      	subs	r3, #1
   113d2:	61bb      	str	r3, [r7, #24]
   113d4:	e011      	b.n	113fa <list_insert+0x9a>
         self->items[i] = self->items[i-1];
   113d6:	697b      	ldr	r3, [r7, #20]
   113d8:	68da      	ldr	r2, [r3, #12]
   113da:	69bb      	ldr	r3, [r7, #24]
   113dc:	009b      	lsls	r3, r3, #2
   113de:	441a      	add	r2, r3
   113e0:	697b      	ldr	r3, [r7, #20]
   113e2:	68d9      	ldr	r1, [r3, #12]
   113e4:	69bb      	ldr	r3, [r7, #24]
   113e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   113ea:	3b01      	subs	r3, #1
   113ec:	009b      	lsls	r3, r3, #2
   113ee:	440b      	add	r3, r1
   113f0:	681b      	ldr	r3, [r3, #0]
   113f2:	6013      	str	r3, [r2, #0]
    for (mp_int_t i = self->len-1; i > index; i--) {
   113f4:	69bb      	ldr	r3, [r7, #24]
   113f6:	3b01      	subs	r3, #1
   113f8:	61bb      	str	r3, [r7, #24]
   113fa:	69ba      	ldr	r2, [r7, #24]
   113fc:	69fb      	ldr	r3, [r7, #28]
   113fe:	429a      	cmp	r2, r3
   11400:	dce9      	bgt.n	113d6 <list_insert+0x76>
    }
    self->items[index] = obj;
   11402:	697b      	ldr	r3, [r7, #20]
   11404:	68da      	ldr	r2, [r3, #12]
   11406:	69fb      	ldr	r3, [r7, #28]
   11408:	009b      	lsls	r3, r3, #2
   1140a:	4413      	add	r3, r2
   1140c:	687a      	ldr	r2, [r7, #4]
   1140e:	601a      	str	r2, [r3, #0]

    return mp_const_none;
   11410:	4b06      	ldr	r3, [pc, #24]	; (1142c <list_insert+0xcc>)
}
   11412:	4618      	mov	r0, r3
   11414:	3720      	adds	r7, #32
   11416:	46bd      	mov	sp, r7
   11418:	bd80      	pop	{r7, pc}
   1141a:	bf00      	nop
   1141c:	0002287c 	.word	0x0002287c
   11420:	0002266c 	.word	0x0002266c
   11424:	00022938 	.word	0x00022938
   11428:	000226c8 	.word	0x000226c8
   1142c:	00022b54 	.word	0x00022b54

00011430 <mp_obj_list_remove>:

mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
   11430:	b580      	push	{r7, lr}
   11432:	b084      	sub	sp, #16
   11434:	af00      	add	r7, sp, #0
   11436:	6078      	str	r0, [r7, #4]
   11438:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1143a:	6878      	ldr	r0, [r7, #4]
   1143c:	f7ff fa70 	bl	10920 <MP_OBJ_IS_OBJ>
   11440:	4603      	mov	r3, r0
   11442:	2b00      	cmp	r3, #0
   11444:	d004      	beq.n	11450 <mp_obj_list_remove+0x20>
   11446:	687b      	ldr	r3, [r7, #4]
   11448:	681b      	ldr	r3, [r3, #0]
   1144a:	4a10      	ldr	r2, [pc, #64]	; (1148c <mp_obj_list_remove+0x5c>)
   1144c:	4293      	cmp	r3, r2
   1144e:	d006      	beq.n	1145e <mp_obj_list_remove+0x2e>
   11450:	4b0f      	ldr	r3, [pc, #60]	; (11490 <mp_obj_list_remove+0x60>)
   11452:	4a10      	ldr	r2, [pc, #64]	; (11494 <mp_obj_list_remove+0x64>)
   11454:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   11458:	480f      	ldr	r0, [pc, #60]	; (11498 <mp_obj_list_remove+0x68>)
   1145a:	f009 fec3 	bl	1b1e4 <__assert_func>
    mp_obj_t args[] = {self_in, value};
   1145e:	687b      	ldr	r3, [r7, #4]
   11460:	60bb      	str	r3, [r7, #8]
   11462:	683b      	ldr	r3, [r7, #0]
   11464:	60fb      	str	r3, [r7, #12]
    args[1] = list_index(2, args);
   11466:	f107 0308 	add.w	r3, r7, #8
   1146a:	4619      	mov	r1, r3
   1146c:	2002      	movs	r0, #2
   1146e:	f7ff ff45 	bl	112fc <list_index>
   11472:	4603      	mov	r3, r0
   11474:	60fb      	str	r3, [r7, #12]
    list_pop(2, args);
   11476:	f107 0308 	add.w	r3, r7, #8
   1147a:	4619      	mov	r1, r3
   1147c:	2002      	movs	r0, #2
   1147e:	f7ff fd21 	bl	10ec4 <list_pop>

    return mp_const_none;
   11482:	4b06      	ldr	r3, [pc, #24]	; (1149c <mp_obj_list_remove+0x6c>)
}
   11484:	4618      	mov	r0, r3
   11486:	3710      	adds	r7, #16
   11488:	46bd      	mov	sp, r7
   1148a:	bd80      	pop	{r7, pc}
   1148c:	0002287c 	.word	0x0002287c
   11490:	0002266c 	.word	0x0002266c
   11494:	00022944 	.word	0x00022944
   11498:	000226c8 	.word	0x000226c8
   1149c:	00022b54 	.word	0x00022b54

000114a0 <list_reverse>:

STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
   114a0:	b580      	push	{r7, lr}
   114a2:	b086      	sub	sp, #24
   114a4:	af00      	add	r7, sp, #0
   114a6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   114a8:	6878      	ldr	r0, [r7, #4]
   114aa:	f7ff fa39 	bl	10920 <MP_OBJ_IS_OBJ>
   114ae:	4603      	mov	r3, r0
   114b0:	2b00      	cmp	r3, #0
   114b2:	d004      	beq.n	114be <list_reverse+0x1e>
   114b4:	687b      	ldr	r3, [r7, #4]
   114b6:	681b      	ldr	r3, [r3, #0]
   114b8:	4a22      	ldr	r2, [pc, #136]	; (11544 <list_reverse+0xa4>)
   114ba:	4293      	cmp	r3, r2
   114bc:	d006      	beq.n	114cc <list_reverse+0x2c>
   114be:	4b22      	ldr	r3, [pc, #136]	; (11548 <list_reverse+0xa8>)
   114c0:	4a22      	ldr	r2, [pc, #136]	; (1154c <list_reverse+0xac>)
   114c2:	f240 1193 	movw	r1, #403	; 0x193
   114c6:	4822      	ldr	r0, [pc, #136]	; (11550 <list_reverse+0xb0>)
   114c8:	f009 fe8c 	bl	1b1e4 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   114cc:	687b      	ldr	r3, [r7, #4]
   114ce:	613b      	str	r3, [r7, #16]

    mp_int_t len = self->len;
   114d0:	693b      	ldr	r3, [r7, #16]
   114d2:	689b      	ldr	r3, [r3, #8]
   114d4:	60fb      	str	r3, [r7, #12]
    for (mp_int_t i = 0; i < len/2; i++) {
   114d6:	2300      	movs	r3, #0
   114d8:	617b      	str	r3, [r7, #20]
   114da:	e026      	b.n	1152a <list_reverse+0x8a>
         mp_obj_t a = self->items[i];
   114dc:	693b      	ldr	r3, [r7, #16]
   114de:	68da      	ldr	r2, [r3, #12]
   114e0:	697b      	ldr	r3, [r7, #20]
   114e2:	009b      	lsls	r3, r3, #2
   114e4:	4413      	add	r3, r2
   114e6:	681b      	ldr	r3, [r3, #0]
   114e8:	60bb      	str	r3, [r7, #8]
         self->items[i] = self->items[len-i-1];
   114ea:	693b      	ldr	r3, [r7, #16]
   114ec:	68da      	ldr	r2, [r3, #12]
   114ee:	697b      	ldr	r3, [r7, #20]
   114f0:	009b      	lsls	r3, r3, #2
   114f2:	441a      	add	r2, r3
   114f4:	693b      	ldr	r3, [r7, #16]
   114f6:	68d9      	ldr	r1, [r3, #12]
   114f8:	68f8      	ldr	r0, [r7, #12]
   114fa:	697b      	ldr	r3, [r7, #20]
   114fc:	1ac3      	subs	r3, r0, r3
   114fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11502:	3b01      	subs	r3, #1
   11504:	009b      	lsls	r3, r3, #2
   11506:	440b      	add	r3, r1
   11508:	681b      	ldr	r3, [r3, #0]
   1150a:	6013      	str	r3, [r2, #0]
         self->items[len-i-1] = a;
   1150c:	693b      	ldr	r3, [r7, #16]
   1150e:	68da      	ldr	r2, [r3, #12]
   11510:	68f9      	ldr	r1, [r7, #12]
   11512:	697b      	ldr	r3, [r7, #20]
   11514:	1acb      	subs	r3, r1, r3
   11516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1151a:	3b01      	subs	r3, #1
   1151c:	009b      	lsls	r3, r3, #2
   1151e:	4413      	add	r3, r2
   11520:	68ba      	ldr	r2, [r7, #8]
   11522:	601a      	str	r2, [r3, #0]
    for (mp_int_t i = 0; i < len/2; i++) {
   11524:	697b      	ldr	r3, [r7, #20]
   11526:	3301      	adds	r3, #1
   11528:	617b      	str	r3, [r7, #20]
   1152a:	68fb      	ldr	r3, [r7, #12]
   1152c:	0fda      	lsrs	r2, r3, #31
   1152e:	4413      	add	r3, r2
   11530:	105b      	asrs	r3, r3, #1
   11532:	461a      	mov	r2, r3
   11534:	697b      	ldr	r3, [r7, #20]
   11536:	429a      	cmp	r2, r3
   11538:	dcd0      	bgt.n	114dc <list_reverse+0x3c>
    }

    return mp_const_none;
   1153a:	4b06      	ldr	r3, [pc, #24]	; (11554 <list_reverse+0xb4>)
}
   1153c:	4618      	mov	r0, r3
   1153e:	3718      	adds	r7, #24
   11540:	46bd      	mov	sp, r7
   11542:	bd80      	pop	{r7, pc}
   11544:	0002287c 	.word	0x0002287c
   11548:	0002266c 	.word	0x0002266c
   1154c:	00022958 	.word	0x00022958
   11550:	000226c8 	.word	0x000226c8
   11554:	00022b54 	.word	0x00022b54

00011558 <mp_obj_list_init>:
    .subscr = list_subscr,
    .getiter = list_getiter,
    .locals_dict = (mp_obj_dict_t*)&list_locals_dict,
};

void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
   11558:	b580      	push	{r7, lr}
   1155a:	b082      	sub	sp, #8
   1155c:	af00      	add	r7, sp, #0
   1155e:	6078      	str	r0, [r7, #4]
   11560:	6039      	str	r1, [r7, #0]
    o->base.type = &mp_type_list;
   11562:	687b      	ldr	r3, [r7, #4]
   11564:	4a13      	ldr	r2, [pc, #76]	; (115b4 <mp_obj_list_init+0x5c>)
   11566:	601a      	str	r2, [r3, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
   11568:	683b      	ldr	r3, [r7, #0]
   1156a:	2b04      	cmp	r3, #4
   1156c:	bf38      	it	cc
   1156e:	2304      	movcc	r3, #4
   11570:	461a      	mov	r2, r3
   11572:	687b      	ldr	r3, [r7, #4]
   11574:	605a      	str	r2, [r3, #4]
    o->len = n;
   11576:	687b      	ldr	r3, [r7, #4]
   11578:	683a      	ldr	r2, [r7, #0]
   1157a:	609a      	str	r2, [r3, #8]
    o->items = m_new(mp_obj_t, o->alloc);
   1157c:	687b      	ldr	r3, [r7, #4]
   1157e:	685b      	ldr	r3, [r3, #4]
   11580:	009b      	lsls	r3, r3, #2
   11582:	4618      	mov	r0, r3
   11584:	f7ee feca 	bl	31c <m_malloc>
   11588:	4602      	mov	r2, r0
   1158a:	687b      	ldr	r3, [r7, #4]
   1158c:	60da      	str	r2, [r3, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
   1158e:	687b      	ldr	r3, [r7, #4]
   11590:	68da      	ldr	r2, [r3, #12]
   11592:	683b      	ldr	r3, [r7, #0]
   11594:	009b      	lsls	r3, r3, #2
   11596:	18d0      	adds	r0, r2, r3
   11598:	687b      	ldr	r3, [r7, #4]
   1159a:	685a      	ldr	r2, [r3, #4]
   1159c:	683b      	ldr	r3, [r7, #0]
   1159e:	1ad3      	subs	r3, r2, r3
   115a0:	009b      	lsls	r3, r3, #2
   115a2:	461a      	mov	r2, r3
   115a4:	2100      	movs	r1, #0
   115a6:	f00b f875 	bl	1c694 <memset>
}
   115aa:	bf00      	nop
   115ac:	3708      	adds	r7, #8
   115ae:	46bd      	mov	sp, r7
   115b0:	bd80      	pop	{r7, pc}
   115b2:	bf00      	nop
   115b4:	0002287c 	.word	0x0002287c

000115b8 <list_new>:

STATIC mp_obj_list_t *list_new(size_t n) {
   115b8:	b580      	push	{r7, lr}
   115ba:	b084      	sub	sp, #16
   115bc:	af00      	add	r7, sp, #0
   115be:	6078      	str	r0, [r7, #4]
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
   115c0:	2010      	movs	r0, #16
   115c2:	f7ee feab 	bl	31c <m_malloc>
   115c6:	60f8      	str	r0, [r7, #12]
    mp_obj_list_init(o, n);
   115c8:	6879      	ldr	r1, [r7, #4]
   115ca:	68f8      	ldr	r0, [r7, #12]
   115cc:	f7ff ffc4 	bl	11558 <mp_obj_list_init>
    return o;
   115d0:	68fb      	ldr	r3, [r7, #12]
}
   115d2:	4618      	mov	r0, r3
   115d4:	3710      	adds	r7, #16
   115d6:	46bd      	mov	sp, r7
   115d8:	bd80      	pop	{r7, pc}

000115da <mp_obj_new_list>:

mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
   115da:	b580      	push	{r7, lr}
   115dc:	b084      	sub	sp, #16
   115de:	af00      	add	r7, sp, #0
   115e0:	6078      	str	r0, [r7, #4]
   115e2:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *o = list_new(n);
   115e4:	6878      	ldr	r0, [r7, #4]
   115e6:	f7ff ffe7 	bl	115b8 <list_new>
   115ea:	60b8      	str	r0, [r7, #8]
    if (items != NULL) {
   115ec:	683b      	ldr	r3, [r7, #0]
   115ee:	2b00      	cmp	r3, #0
   115f0:	d014      	beq.n	1161c <mp_obj_new_list+0x42>
        for (size_t i = 0; i < n; i++) {
   115f2:	2300      	movs	r3, #0
   115f4:	60fb      	str	r3, [r7, #12]
   115f6:	e00d      	b.n	11614 <mp_obj_new_list+0x3a>
            o->items[i] = items[i];
   115f8:	68bb      	ldr	r3, [r7, #8]
   115fa:	68da      	ldr	r2, [r3, #12]
   115fc:	68fb      	ldr	r3, [r7, #12]
   115fe:	009b      	lsls	r3, r3, #2
   11600:	4413      	add	r3, r2
   11602:	68fa      	ldr	r2, [r7, #12]
   11604:	0092      	lsls	r2, r2, #2
   11606:	6839      	ldr	r1, [r7, #0]
   11608:	440a      	add	r2, r1
   1160a:	6812      	ldr	r2, [r2, #0]
   1160c:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < n; i++) {
   1160e:	68fb      	ldr	r3, [r7, #12]
   11610:	3301      	adds	r3, #1
   11612:	60fb      	str	r3, [r7, #12]
   11614:	68fa      	ldr	r2, [r7, #12]
   11616:	687b      	ldr	r3, [r7, #4]
   11618:	429a      	cmp	r2, r3
   1161a:	d3ed      	bcc.n	115f8 <mp_obj_new_list+0x1e>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   1161c:	68bb      	ldr	r3, [r7, #8]
}
   1161e:	4618      	mov	r0, r3
   11620:	3710      	adds	r7, #16
   11622:	46bd      	mov	sp, r7
   11624:	bd80      	pop	{r7, pc}

00011626 <mp_obj_list_get>:

void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   11626:	b480      	push	{r7}
   11628:	b087      	sub	sp, #28
   1162a:	af00      	add	r7, sp, #0
   1162c:	60f8      	str	r0, [r7, #12]
   1162e:	60b9      	str	r1, [r7, #8]
   11630:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11632:	68fb      	ldr	r3, [r7, #12]
   11634:	617b      	str	r3, [r7, #20]
    *len = self->len;
   11636:	697b      	ldr	r3, [r7, #20]
   11638:	689a      	ldr	r2, [r3, #8]
   1163a:	68bb      	ldr	r3, [r7, #8]
   1163c:	601a      	str	r2, [r3, #0]
    *items = self->items;
   1163e:	697b      	ldr	r3, [r7, #20]
   11640:	68da      	ldr	r2, [r3, #12]
   11642:	687b      	ldr	r3, [r7, #4]
   11644:	601a      	str	r2, [r3, #0]
}
   11646:	bf00      	nop
   11648:	371c      	adds	r7, #28
   1164a:	46bd      	mov	sp, r7
   1164c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11650:	4770      	bx	lr

00011652 <mp_obj_list_set_len>:

void mp_obj_list_set_len(mp_obj_t self_in, size_t len) {
   11652:	b480      	push	{r7}
   11654:	b085      	sub	sp, #20
   11656:	af00      	add	r7, sp, #0
   11658:	6078      	str	r0, [r7, #4]
   1165a:	6039      	str	r1, [r7, #0]
    // trust that the caller knows what it's doing
    // TODO realloc if len got much smaller than alloc
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1165c:	687b      	ldr	r3, [r7, #4]
   1165e:	60fb      	str	r3, [r7, #12]
    self->len = len;
   11660:	68fb      	ldr	r3, [r7, #12]
   11662:	683a      	ldr	r2, [r7, #0]
   11664:	609a      	str	r2, [r3, #8]
}
   11666:	bf00      	nop
   11668:	3714      	adds	r7, #20
   1166a:	46bd      	mov	sp, r7
   1166c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11670:	4770      	bx	lr

00011672 <mp_obj_list_store>:

void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11672:	b580      	push	{r7, lr}
   11674:	b086      	sub	sp, #24
   11676:	af00      	add	r7, sp, #0
   11678:	60f8      	str	r0, [r7, #12]
   1167a:	60b9      	str	r1, [r7, #8]
   1167c:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1167e:	68fb      	ldr	r3, [r7, #12]
   11680:	617b      	str	r3, [r7, #20]
    size_t i = mp_get_index(self->base.type, self->len, index, false);
   11682:	697b      	ldr	r3, [r7, #20]
   11684:	6818      	ldr	r0, [r3, #0]
   11686:	697b      	ldr	r3, [r7, #20]
   11688:	6899      	ldr	r1, [r3, #8]
   1168a:	2300      	movs	r3, #0
   1168c:	68ba      	ldr	r2, [r7, #8]
   1168e:	f7fc faf3 	bl	dc78 <mp_get_index>
   11692:	6138      	str	r0, [r7, #16]
    self->items[i] = value;
   11694:	697b      	ldr	r3, [r7, #20]
   11696:	68da      	ldr	r2, [r3, #12]
   11698:	693b      	ldr	r3, [r7, #16]
   1169a:	009b      	lsls	r3, r3, #2
   1169c:	4413      	add	r3, r2
   1169e:	687a      	ldr	r2, [r7, #4]
   116a0:	601a      	str	r2, [r3, #0]
}
   116a2:	bf00      	nop
   116a4:	3718      	adds	r7, #24
   116a6:	46bd      	mov	sp, r7
   116a8:	bd80      	pop	{r7, pc}

000116aa <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
   116aa:	b480      	push	{r7}
   116ac:	b087      	sub	sp, #28
   116ae:	af00      	add	r7, sp, #0
   116b0:	6078      	str	r0, [r7, #4]
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
   116b2:	687b      	ldr	r3, [r7, #4]
   116b4:	617b      	str	r3, [r7, #20]
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
   116b6:	697b      	ldr	r3, [r7, #20]
   116b8:	689b      	ldr	r3, [r3, #8]
   116ba:	613b      	str	r3, [r7, #16]
    if (self->cur < list->len) {
   116bc:	697b      	ldr	r3, [r7, #20]
   116be:	68da      	ldr	r2, [r3, #12]
   116c0:	693b      	ldr	r3, [r7, #16]
   116c2:	689b      	ldr	r3, [r3, #8]
   116c4:	429a      	cmp	r2, r3
   116c6:	d20e      	bcs.n	116e6 <list_it_iternext+0x3c>
        mp_obj_t o_out = list->items[self->cur];
   116c8:	693b      	ldr	r3, [r7, #16]
   116ca:	68da      	ldr	r2, [r3, #12]
   116cc:	697b      	ldr	r3, [r7, #20]
   116ce:	68db      	ldr	r3, [r3, #12]
   116d0:	009b      	lsls	r3, r3, #2
   116d2:	4413      	add	r3, r2
   116d4:	681b      	ldr	r3, [r3, #0]
   116d6:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   116d8:	697b      	ldr	r3, [r7, #20]
   116da:	68db      	ldr	r3, [r3, #12]
   116dc:	1c5a      	adds	r2, r3, #1
   116de:	697b      	ldr	r3, [r7, #20]
   116e0:	60da      	str	r2, [r3, #12]
        return o_out;
   116e2:	68fb      	ldr	r3, [r7, #12]
   116e4:	e000      	b.n	116e8 <list_it_iternext+0x3e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   116e6:	2304      	movs	r3, #4
    }
}
   116e8:	4618      	mov	r0, r3
   116ea:	371c      	adds	r7, #28
   116ec:	46bd      	mov	sp, r7
   116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   116f2:	4770      	bx	lr

000116f4 <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
   116f4:	b480      	push	{r7}
   116f6:	b087      	sub	sp, #28
   116f8:	af00      	add	r7, sp, #0
   116fa:	60f8      	str	r0, [r7, #12]
   116fc:	60b9      	str	r1, [r7, #8]
   116fe:	607a      	str	r2, [r7, #4]
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
   11700:	687b      	ldr	r3, [r7, #4]
   11702:	617b      	str	r3, [r7, #20]
    o->base.type = &mp_type_polymorph_iter;
   11704:	697b      	ldr	r3, [r7, #20]
   11706:	4a09      	ldr	r2, [pc, #36]	; (1172c <mp_obj_new_list_iterator+0x38>)
   11708:	601a      	str	r2, [r3, #0]
    o->iternext = list_it_iternext;
   1170a:	697b      	ldr	r3, [r7, #20]
   1170c:	4a08      	ldr	r2, [pc, #32]	; (11730 <mp_obj_new_list_iterator+0x3c>)
   1170e:	605a      	str	r2, [r3, #4]
    o->list = list;
   11710:	697b      	ldr	r3, [r7, #20]
   11712:	68fa      	ldr	r2, [r7, #12]
   11714:	609a      	str	r2, [r3, #8]
    o->cur = cur;
   11716:	697b      	ldr	r3, [r7, #20]
   11718:	68ba      	ldr	r2, [r7, #8]
   1171a:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   1171c:	697b      	ldr	r3, [r7, #20]
}
   1171e:	4618      	mov	r0, r3
   11720:	371c      	adds	r7, #28
   11722:	46bd      	mov	sp, r7
   11724:	f85d 7b04 	ldr.w	r7, [sp], #4
   11728:	4770      	bx	lr
   1172a:	bf00      	nop
   1172c:	00022ad4 	.word	0x00022ad4
   11730:	000116ab 	.word	0x000116ab

00011734 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   11734:	b480      	push	{r7}
   11736:	b083      	sub	sp, #12
   11738:	af00      	add	r7, sp, #0
   1173a:	6078      	str	r0, [r7, #4]
   1173c:	687b      	ldr	r3, [r7, #4]
   1173e:	f003 0303 	and.w	r3, r3, #3
   11742:	2b00      	cmp	r3, #0
   11744:	bf0c      	ite	eq
   11746:	2301      	moveq	r3, #1
   11748:	2300      	movne	r3, #0
   1174a:	b2db      	uxtb	r3, r3
   1174c:	4618      	mov	r0, r3
   1174e:	370c      	adds	r7, #12
   11750:	46bd      	mov	sp, r7
   11752:	f85d 7b04 	ldr.w	r7, [sp], #4
   11756:	4770      	bx	lr

00011758 <map_make_new>:
    size_t n_iters;
    mp_obj_t fun;
    mp_obj_t iters[];
} mp_obj_map_t;

STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11758:	b580      	push	{r7, lr}
   1175a:	b088      	sub	sp, #32
   1175c:	af02      	add	r7, sp, #8
   1175e:	60f8      	str	r0, [r7, #12]
   11760:	60b9      	str	r1, [r7, #8]
   11762:	607a      	str	r2, [r7, #4]
   11764:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
   11766:	2300      	movs	r3, #0
   11768:	9300      	str	r3, [sp, #0]
   1176a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1176e:	2202      	movs	r2, #2
   11770:	6879      	ldr	r1, [r7, #4]
   11772:	68b8      	ldr	r0, [r7, #8]
   11774:	f7fb fbc8 	bl	cf08 <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
   11778:	68bb      	ldr	r3, [r7, #8]
   1177a:	3302      	adds	r3, #2
   1177c:	009b      	lsls	r3, r3, #2
   1177e:	4618      	mov	r0, r3
   11780:	f7ee fdcc 	bl	31c <m_malloc>
   11784:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   11786:	693b      	ldr	r3, [r7, #16]
   11788:	68fa      	ldr	r2, [r7, #12]
   1178a:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args - 1;
   1178c:	68bb      	ldr	r3, [r7, #8]
   1178e:	1e5a      	subs	r2, r3, #1
   11790:	693b      	ldr	r3, [r7, #16]
   11792:	605a      	str	r2, [r3, #4]
    o->fun = args[0];
   11794:	683b      	ldr	r3, [r7, #0]
   11796:	681a      	ldr	r2, [r3, #0]
   11798:	693b      	ldr	r3, [r7, #16]
   1179a:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
   1179c:	2300      	movs	r3, #0
   1179e:	617b      	str	r3, [r7, #20]
   117a0:	e013      	b.n	117ca <map_make_new+0x72>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
   117a2:	697b      	ldr	r3, [r7, #20]
   117a4:	3301      	adds	r3, #1
   117a6:	009b      	lsls	r3, r3, #2
   117a8:	683a      	ldr	r2, [r7, #0]
   117aa:	4413      	add	r3, r2
   117ac:	681b      	ldr	r3, [r3, #0]
   117ae:	2100      	movs	r1, #0
   117b0:	4618      	mov	r0, r3
   117b2:	f7fb f835 	bl	c820 <mp_getiter>
   117b6:	4601      	mov	r1, r0
   117b8:	693a      	ldr	r2, [r7, #16]
   117ba:	697b      	ldr	r3, [r7, #20]
   117bc:	3302      	adds	r3, #2
   117be:	009b      	lsls	r3, r3, #2
   117c0:	4413      	add	r3, r2
   117c2:	6059      	str	r1, [r3, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
   117c4:	697b      	ldr	r3, [r7, #20]
   117c6:	3301      	adds	r3, #1
   117c8:	617b      	str	r3, [r7, #20]
   117ca:	68bb      	ldr	r3, [r7, #8]
   117cc:	1e5a      	subs	r2, r3, #1
   117ce:	697b      	ldr	r3, [r7, #20]
   117d0:	429a      	cmp	r2, r3
   117d2:	d8e6      	bhi.n	117a2 <map_make_new+0x4a>
    }
    return MP_OBJ_FROM_PTR(o);
   117d4:	693b      	ldr	r3, [r7, #16]
}
   117d6:	4618      	mov	r0, r3
   117d8:	3718      	adds	r7, #24
   117da:	46bd      	mov	sp, r7
   117dc:	bd80      	pop	{r7, pc}

000117de <map_iternext>:

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
   117de:	b580      	push	{r7, lr}
   117e0:	b086      	sub	sp, #24
   117e2:	af00      	add	r7, sp, #0
   117e4:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
   117e6:	6878      	ldr	r0, [r7, #4]
   117e8:	f7ff ffa4 	bl	11734 <MP_OBJ_IS_OBJ>
   117ec:	4603      	mov	r3, r0
   117ee:	2b00      	cmp	r3, #0
   117f0:	d004      	beq.n	117fc <map_iternext+0x1e>
   117f2:	687b      	ldr	r3, [r7, #4]
   117f4:	681b      	ldr	r3, [r3, #0]
   117f6:	4a21      	ldr	r2, [pc, #132]	; (1187c <map_iternext+0x9e>)
   117f8:	4293      	cmp	r3, r2
   117fa:	d005      	beq.n	11808 <map_iternext+0x2a>
   117fc:	4b20      	ldr	r3, [pc, #128]	; (11880 <map_iternext+0xa2>)
   117fe:	4a21      	ldr	r2, [pc, #132]	; (11884 <map_iternext+0xa6>)
   11800:	2134      	movs	r1, #52	; 0x34
   11802:	4821      	ldr	r0, [pc, #132]	; (11888 <map_iternext+0xaa>)
   11804:	f009 fcee 	bl	1b1e4 <__assert_func>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
   11808:	687b      	ldr	r3, [r7, #4]
   1180a:	613b      	str	r3, [r7, #16]
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
   1180c:	693b      	ldr	r3, [r7, #16]
   1180e:	685b      	ldr	r3, [r3, #4]
   11810:	009b      	lsls	r3, r3, #2
   11812:	4618      	mov	r0, r3
   11814:	f7ee fd82 	bl	31c <m_malloc>
   11818:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   1181a:	2300      	movs	r3, #0
   1181c:	617b      	str	r3, [r7, #20]
   1181e:	e01a      	b.n	11856 <map_iternext+0x78>
        mp_obj_t next = mp_iternext(self->iters[i]);
   11820:	693a      	ldr	r2, [r7, #16]
   11822:	697b      	ldr	r3, [r7, #20]
   11824:	3302      	adds	r3, #2
   11826:	009b      	lsls	r3, r3, #2
   11828:	4413      	add	r3, r2
   1182a:	685b      	ldr	r3, [r3, #4]
   1182c:	4618      	mov	r0, r3
   1182e:	f7fb f879 	bl	c924 <mp_iternext>
   11832:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   11834:	68bb      	ldr	r3, [r7, #8]
   11836:	2b04      	cmp	r3, #4
   11838:	d104      	bne.n	11844 <map_iternext+0x66>
            m_del(mp_obj_t, nextses, self->n_iters);
   1183a:	68f8      	ldr	r0, [r7, #12]
   1183c:	f7ee fdcc 	bl	3d8 <m_free>
            return MP_OBJ_STOP_ITERATION;
   11840:	2304      	movs	r3, #4
   11842:	e016      	b.n	11872 <map_iternext+0x94>
        }
        nextses[i] = next;
   11844:	697b      	ldr	r3, [r7, #20]
   11846:	009b      	lsls	r3, r3, #2
   11848:	68fa      	ldr	r2, [r7, #12]
   1184a:	4413      	add	r3, r2
   1184c:	68ba      	ldr	r2, [r7, #8]
   1184e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < self->n_iters; i++) {
   11850:	697b      	ldr	r3, [r7, #20]
   11852:	3301      	adds	r3, #1
   11854:	617b      	str	r3, [r7, #20]
   11856:	693b      	ldr	r3, [r7, #16]
   11858:	685a      	ldr	r2, [r3, #4]
   1185a:	697b      	ldr	r3, [r7, #20]
   1185c:	429a      	cmp	r2, r3
   1185e:	d8df      	bhi.n	11820 <map_iternext+0x42>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
   11860:	693b      	ldr	r3, [r7, #16]
   11862:	6898      	ldr	r0, [r3, #8]
   11864:	693b      	ldr	r3, [r7, #16]
   11866:	6859      	ldr	r1, [r3, #4]
   11868:	68fb      	ldr	r3, [r7, #12]
   1186a:	2200      	movs	r2, #0
   1186c:	f7fa fa65 	bl	bd3a <mp_call_function_n_kw>
   11870:	4603      	mov	r3, r0
}
   11872:	4618      	mov	r0, r3
   11874:	3718      	adds	r7, #24
   11876:	46bd      	mov	sp, r7
   11878:	bd80      	pop	{r7, pc}
   1187a:	bf00      	nop
   1187c:	000229d8 	.word	0x000229d8
   11880:	00022968 	.word	0x00022968
   11884:	00022a14 	.word	0x00022a14
   11888:	000229c4 	.word	0x000229c4

0001188c <mp_module_call_init>:
void mp_module_register(qstr qstr, mp_obj_t module);

#if MICROPY_MODULE_BUILTIN_INIT
void mp_module_call_init(qstr module_name, mp_obj_t module_obj);
#else
static inline void mp_module_call_init(qstr module_name, mp_obj_t module_obj) {
   1188c:	b480      	push	{r7}
   1188e:	b083      	sub	sp, #12
   11890:	af00      	add	r7, sp, #0
   11892:	6078      	str	r0, [r7, #4]
   11894:	6039      	str	r1, [r7, #0]
    (void)module_name;
    (void)module_obj;
}
   11896:	bf00      	nop
   11898:	370c      	adds	r7, #12
   1189a:	46bd      	mov	sp, r7
   1189c:	f85d 7b04 	ldr.w	r7, [sp], #4
   118a0:	4770      	bx	lr

000118a2 <module_print>:

#include "py/objmodule.h"
#include "py/runtime.h"
#include "py/builtin.h"

STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   118a2:	b580      	push	{r7, lr}
   118a4:	b088      	sub	sp, #32
   118a6:	af00      	add	r7, sp, #0
   118a8:	60f8      	str	r0, [r7, #12]
   118aa:	60b9      	str	r1, [r7, #8]
   118ac:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   118ae:	68bb      	ldr	r3, [r7, #8]
   118b0:	61bb      	str	r3, [r7, #24]

    const char *module_name = "";
   118b2:	4b0e      	ldr	r3, [pc, #56]	; (118ec <module_print+0x4a>)
   118b4:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
   118b6:	69bb      	ldr	r3, [r7, #24]
   118b8:	685b      	ldr	r3, [r3, #4]
   118ba:	3304      	adds	r3, #4
   118bc:	2200      	movs	r2, #0
   118be:	216e      	movs	r1, #110	; 0x6e
   118c0:	4618      	mov	r0, r3
   118c2:	f7fb fd67 	bl	d394 <mp_map_lookup>
   118c6:	6178      	str	r0, [r7, #20]
    if (elem != NULL) {
   118c8:	697b      	ldr	r3, [r7, #20]
   118ca:	2b00      	cmp	r3, #0
   118cc:	d005      	beq.n	118da <module_print+0x38>
        module_name = mp_obj_str_get_str(elem->value);
   118ce:	697b      	ldr	r3, [r7, #20]
   118d0:	685b      	ldr	r3, [r3, #4]
   118d2:	4618      	mov	r0, r3
   118d4:	f003 fcd6 	bl	15284 <mp_obj_str_get_str>
   118d8:	61f8      	str	r0, [r7, #28]
        mp_printf(print, "<module '%s' from '%s'>", module_name, mp_obj_str_get_str(elem->value));
        return;
    }
#endif

    mp_printf(print, "<module '%s'>", module_name);
   118da:	69fa      	ldr	r2, [r7, #28]
   118dc:	4904      	ldr	r1, [pc, #16]	; (118f0 <module_print+0x4e>)
   118de:	68f8      	ldr	r0, [r7, #12]
   118e0:	f7f0 fad6 	bl	1e90 <mp_printf>
}
   118e4:	bf00      	nop
   118e6:	3720      	adds	r7, #32
   118e8:	46bd      	mov	sp, r7
   118ea:	bd80      	pop	{r7, pc}
   118ec:	00022a24 	.word	0x00022a24
   118f0:	00022a28 	.word	0x00022a28

000118f4 <module_attr>:

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   118f4:	b580      	push	{r7, lr}
   118f6:	b088      	sub	sp, #32
   118f8:	af00      	add	r7, sp, #0
   118fa:	60f8      	str	r0, [r7, #12]
   118fc:	60b9      	str	r1, [r7, #8]
   118fe:	607a      	str	r2, [r7, #4]
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11900:	68fb      	ldr	r3, [r7, #12]
   11902:	61fb      	str	r3, [r7, #28]
    if (dest[0] == MP_OBJ_NULL) {
   11904:	687b      	ldr	r3, [r7, #4]
   11906:	681b      	ldr	r3, [r3, #0]
   11908:	2b00      	cmp	r3, #0
   1190a:	d113      	bne.n	11934 <module_attr+0x40>
        // load attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   1190c:	69fb      	ldr	r3, [r7, #28]
   1190e:	685b      	ldr	r3, [r3, #4]
   11910:	1d18      	adds	r0, r3, #4
   11912:	68bb      	ldr	r3, [r7, #8]
   11914:	009b      	lsls	r3, r3, #2
   11916:	f043 0302 	orr.w	r3, r3, #2
   1191a:	2200      	movs	r2, #0
   1191c:	4619      	mov	r1, r3
   1191e:	f7fb fd39 	bl	d394 <mp_map_lookup>
   11922:	61b8      	str	r0, [r7, #24]
        if (elem != NULL) {
   11924:	69bb      	ldr	r3, [r7, #24]
   11926:	2b00      	cmp	r3, #0
   11928:	d02d      	beq.n	11986 <module_attr+0x92>
            dest[0] = elem->value;
   1192a:	69bb      	ldr	r3, [r7, #24]
   1192c:	685a      	ldr	r2, [r3, #4]
   1192e:	687b      	ldr	r3, [r7, #4]
   11930:	601a      	str	r2, [r3, #0]
   11932:	e028      	b.n	11986 <module_attr+0x92>
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
   11934:	69fb      	ldr	r3, [r7, #28]
   11936:	685b      	ldr	r3, [r3, #4]
   11938:	617b      	str	r3, [r7, #20]
        if (dict->map.is_fixed) {
   1193a:	697b      	ldr	r3, [r7, #20]
   1193c:	791b      	ldrb	r3, [r3, #4]
   1193e:	f003 0302 	and.w	r3, r3, #2
   11942:	b2db      	uxtb	r3, r3
   11944:	2b00      	cmp	r3, #0
   11946:	d11d      	bne.n	11984 <module_attr+0x90>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
   11948:	687b      	ldr	r3, [r7, #4]
   1194a:	3304      	adds	r3, #4
   1194c:	681b      	ldr	r3, [r3, #0]
   1194e:	2b00      	cmp	r3, #0
   11950:	d108      	bne.n	11964 <module_attr+0x70>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
   11952:	68bb      	ldr	r3, [r7, #8]
   11954:	009b      	lsls	r3, r3, #2
   11956:	f043 0302 	orr.w	r3, r3, #2
   1195a:	4619      	mov	r1, r3
   1195c:	6978      	ldr	r0, [r7, #20]
   1195e:	f7fd fb7d 	bl	f05c <mp_obj_dict_delete>
   11962:	e00b      	b.n	1197c <module_attr+0x88>
        } else {
            // store attribute
            // TODO CPython allows STORE_ATTR to a module, but is this the correct implementation?
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
   11964:	68bb      	ldr	r3, [r7, #8]
   11966:	009b      	lsls	r3, r3, #2
   11968:	f043 0302 	orr.w	r3, r3, #2
   1196c:	4619      	mov	r1, r3
   1196e:	687b      	ldr	r3, [r7, #4]
   11970:	3304      	adds	r3, #4
   11972:	681b      	ldr	r3, [r3, #0]
   11974:	461a      	mov	r2, r3
   11976:	6978      	ldr	r0, [r7, #20]
   11978:	f7fd fb3b 	bl	eff2 <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
   1197c:	687b      	ldr	r3, [r7, #4]
   1197e:	2200      	movs	r2, #0
   11980:	601a      	str	r2, [r3, #0]
   11982:	e000      	b.n	11986 <module_attr+0x92>
                return;
   11984:	bf00      	nop
    }
}
   11986:	3720      	adds	r7, #32
   11988:	46bd      	mov	sp, r7
   1198a:	bd80      	pop	{r7, pc}

0001198c <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
   1198c:	b580      	push	{r7, lr}
   1198e:	b086      	sub	sp, #24
   11990:	af00      	add	r7, sp, #0
   11992:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11994:	4b18      	ldr	r3, [pc, #96]	; (119f8 <mp_obj_new_module+0x6c>)
   11996:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   11998:	687b      	ldr	r3, [r7, #4]
   1199a:	009b      	lsls	r3, r3, #2
   1199c:	f043 0302 	orr.w	r3, r3, #2
   119a0:	2201      	movs	r2, #1
   119a2:	4619      	mov	r1, r3
   119a4:	6978      	ldr	r0, [r7, #20]
   119a6:	f7fb fcf5 	bl	d394 <mp_map_lookup>
   119aa:	6138      	str	r0, [r7, #16]
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
   119ac:	693b      	ldr	r3, [r7, #16]
   119ae:	685b      	ldr	r3, [r3, #4]
   119b0:	2b00      	cmp	r3, #0
   119b2:	d002      	beq.n	119ba <mp_obj_new_module+0x2e>
        return el->value;
   119b4:	693b      	ldr	r3, [r7, #16]
   119b6:	685b      	ldr	r3, [r3, #4]
   119b8:	e01a      	b.n	119f0 <mp_obj_new_module+0x64>
    }

    // create new module object
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
   119ba:	2008      	movs	r0, #8
   119bc:	f7ee fcae 	bl	31c <m_malloc>
   119c0:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_module;
   119c2:	68fb      	ldr	r3, [r7, #12]
   119c4:	4a0d      	ldr	r2, [pc, #52]	; (119fc <mp_obj_new_module+0x70>)
   119c6:	601a      	str	r2, [r3, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
   119c8:	2001      	movs	r0, #1
   119ca:	f7fd faf1 	bl	efb0 <mp_obj_new_dict>
   119ce:	4602      	mov	r2, r0
   119d0:	68fb      	ldr	r3, [r7, #12]
   119d2:	605a      	str	r2, [r3, #4]

    // store __name__ entry in the module
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
   119d4:	68fb      	ldr	r3, [r7, #12]
   119d6:	6858      	ldr	r0, [r3, #4]
   119d8:	687b      	ldr	r3, [r7, #4]
   119da:	009b      	lsls	r3, r3, #2
   119dc:	f043 0302 	orr.w	r3, r3, #2
   119e0:	461a      	mov	r2, r3
   119e2:	216e      	movs	r1, #110	; 0x6e
   119e4:	f7fd fb05 	bl	eff2 <mp_obj_dict_store>

    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);
   119e8:	693b      	ldr	r3, [r7, #16]
   119ea:	68fa      	ldr	r2, [r7, #12]
   119ec:	605a      	str	r2, [r3, #4]

    // return the new module
    return MP_OBJ_FROM_PTR(o);
   119ee:	68fb      	ldr	r3, [r7, #12]
}
   119f0:	4618      	mov	r0, r3
   119f2:	3718      	adds	r7, #24
   119f4:	46bd      	mov	sp, r7
   119f6:	bd80      	pop	{r7, pc}
   119f8:	20001268 	.word	0x20001268
   119fc:	00022a38 	.word	0x00022a38

00011a00 <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
   11a00:	b580      	push	{r7, lr}
   11a02:	b084      	sub	sp, #16
   11a04:	af00      	add	r7, sp, #0
   11a06:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11a08:	4b14      	ldr	r3, [pc, #80]	; (11a5c <mp_module_get+0x5c>)
   11a0a:	60bb      	str	r3, [r7, #8]
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11a0c:	687b      	ldr	r3, [r7, #4]
   11a0e:	009b      	lsls	r3, r3, #2
   11a10:	f043 0302 	orr.w	r3, r3, #2
   11a14:	2200      	movs	r2, #0
   11a16:	4619      	mov	r1, r3
   11a18:	68b8      	ldr	r0, [r7, #8]
   11a1a:	f7fb fcbb 	bl	d394 <mp_map_lookup>
   11a1e:	60f8      	str	r0, [r7, #12]

    if (el == NULL) {
   11a20:	68fb      	ldr	r3, [r7, #12]
   11a22:	2b00      	cmp	r3, #0
   11a24:	d114      	bne.n	11a50 <mp_module_get+0x50>
        // module not found, look for builtin module names
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11a26:	687b      	ldr	r3, [r7, #4]
   11a28:	009b      	lsls	r3, r3, #2
   11a2a:	f043 0302 	orr.w	r3, r3, #2
   11a2e:	2200      	movs	r2, #0
   11a30:	4619      	mov	r1, r3
   11a32:	480b      	ldr	r0, [pc, #44]	; (11a60 <mp_module_get+0x60>)
   11a34:	f7fb fcae 	bl	d394 <mp_map_lookup>
   11a38:	60f8      	str	r0, [r7, #12]
        if (el == NULL) {
   11a3a:	68fb      	ldr	r3, [r7, #12]
   11a3c:	2b00      	cmp	r3, #0
   11a3e:	d101      	bne.n	11a44 <mp_module_get+0x44>
            return MP_OBJ_NULL;
   11a40:	2300      	movs	r3, #0
   11a42:	e007      	b.n	11a54 <mp_module_get+0x54>
        }
        mp_module_call_init(module_name, el->value);
   11a44:	68fb      	ldr	r3, [r7, #12]
   11a46:	685b      	ldr	r3, [r3, #4]
   11a48:	4619      	mov	r1, r3
   11a4a:	6878      	ldr	r0, [r7, #4]
   11a4c:	f7ff ff1e 	bl	1188c <mp_module_call_init>
    }

    // module found, return it
    return el->value;
   11a50:	68fb      	ldr	r3, [r7, #12]
   11a52:	685b      	ldr	r3, [r3, #4]
}
   11a54:	4618      	mov	r0, r3
   11a56:	3710      	adds	r7, #16
   11a58:	46bd      	mov	sp, r7
   11a5a:	bd80      	pop	{r7, pc}
   11a5c:	20001268 	.word	0x20001268
   11a60:	00022a8c 	.word	0x00022a8c

00011a64 <mp_module_register>:

void mp_module_register(qstr qst, mp_obj_t module) {
   11a64:	b580      	push	{r7, lr}
   11a66:	b084      	sub	sp, #16
   11a68:	af00      	add	r7, sp, #0
   11a6a:	6078      	str	r0, [r7, #4]
   11a6c:	6039      	str	r1, [r7, #0]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11a6e:	4b09      	ldr	r3, [pc, #36]	; (11a94 <mp_module_register+0x30>)
   11a70:	60fb      	str	r3, [r7, #12]
    mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = module;
   11a72:	687b      	ldr	r3, [r7, #4]
   11a74:	009b      	lsls	r3, r3, #2
   11a76:	f043 0302 	orr.w	r3, r3, #2
   11a7a:	2201      	movs	r2, #1
   11a7c:	4619      	mov	r1, r3
   11a7e:	68f8      	ldr	r0, [r7, #12]
   11a80:	f7fb fc88 	bl	d394 <mp_map_lookup>
   11a84:	4602      	mov	r2, r0
   11a86:	683b      	ldr	r3, [r7, #0]
   11a88:	6053      	str	r3, [r2, #4]
}
   11a8a:	bf00      	nop
   11a8c:	3710      	adds	r7, #16
   11a8e:	46bd      	mov	sp, r7
   11a90:	bd80      	pop	{r7, pc}
   11a92:	bf00      	nop
   11a94:	20001268 	.word	0x20001268

00011a98 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11a98:	b580      	push	{r7, lr}
   11a9a:	b088      	sub	sp, #32
   11a9c:	af02      	add	r7, sp, #8
   11a9e:	60f8      	str	r0, [r7, #12]
   11aa0:	60b9      	str	r1, [r7, #8]
   11aa2:	607a      	str	r2, [r7, #4]
   11aa4:	603b      	str	r3, [r7, #0]
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   11aa6:	2300      	movs	r3, #0
   11aa8:	9300      	str	r3, [sp, #0]
   11aaa:	2300      	movs	r3, #0
   11aac:	2200      	movs	r2, #0
   11aae:	6879      	ldr	r1, [r7, #4]
   11ab0:	68b8      	ldr	r0, [r7, #8]
   11ab2:	f7fb fa29 	bl	cf08 <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
   11ab6:	2004      	movs	r0, #4
   11ab8:	f7ee fc30 	bl	31c <m_malloc>
   11abc:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11abe:	697b      	ldr	r3, [r7, #20]
   11ac0:	68fa      	ldr	r2, [r7, #12]
   11ac2:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   11ac4:	697b      	ldr	r3, [r7, #20]
}
   11ac6:	4618      	mov	r0, r3
   11ac8:	3718      	adds	r7, #24
   11aca:	46bd      	mov	sp, r7
   11acc:	bd80      	pop	{r7, pc}

00011ace <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
   11ace:	b580      	push	{r7, lr}
   11ad0:	b084      	sub	sp, #16
   11ad2:	af00      	add	r7, sp, #0
   11ad4:	6078      	str	r0, [r7, #4]
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
   11ad6:	687b      	ldr	r3, [r7, #4]
   11ad8:	60fb      	str	r3, [r7, #12]
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
   11ada:	68fb      	ldr	r3, [r7, #12]
   11adc:	685b      	ldr	r3, [r3, #4]
   11ade:	6878      	ldr	r0, [r7, #4]
   11ae0:	4798      	blx	r3
   11ae2:	4603      	mov	r3, r0
}
   11ae4:	4618      	mov	r0, r3
   11ae6:	3710      	adds	r7, #16
   11ae8:	46bd      	mov	sp, r7
   11aea:	bd80      	pop	{r7, pc}

00011aec <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11aec:	b580      	push	{r7, lr}
   11aee:	b084      	sub	sp, #16
   11af0:	af00      	add	r7, sp, #0
   11af2:	60f8      	str	r0, [r7, #12]
   11af4:	60b9      	str	r1, [r7, #8]
   11af6:	607a      	str	r2, [r7, #4]
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
   11af8:	4903      	ldr	r1, [pc, #12]	; (11b08 <none_print+0x1c>)
   11afa:	68f8      	ldr	r0, [r7, #12]
   11afc:	f7ef feb6 	bl	186c <mp_print_str>
    }
}
   11b00:	bf00      	nop
   11b02:	3710      	adds	r7, #16
   11b04:	46bd      	mov	sp, r7
   11b06:	bd80      	pop	{r7, pc}
   11b08:	00022b10 	.word	0x00022b10

00011b0c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   11b0c:	b480      	push	{r7}
   11b0e:	b083      	sub	sp, #12
   11b10:	af00      	add	r7, sp, #0
   11b12:	6078      	str	r0, [r7, #4]
   11b14:	687b      	ldr	r3, [r7, #4]
   11b16:	2b00      	cmp	r3, #0
   11b18:	d001      	beq.n	11b1e <mp_obj_new_bool+0x12>
   11b1a:	4b04      	ldr	r3, [pc, #16]	; (11b2c <mp_obj_new_bool+0x20>)
   11b1c:	e000      	b.n	11b20 <mp_obj_new_bool+0x14>
   11b1e:	4b04      	ldr	r3, [pc, #16]	; (11b30 <mp_obj_new_bool+0x24>)
   11b20:	4618      	mov	r0, r3
   11b22:	370c      	adds	r7, #12
   11b24:	46bd      	mov	sp, r7
   11b26:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b2a:	4770      	bx	lr
   11b2c:	00021310 	.word	0x00021310
   11b30:	00021308 	.word	0x00021308

00011b34 <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
   11b34:	b480      	push	{r7}
   11b36:	b085      	sub	sp, #20
   11b38:	af00      	add	r7, sp, #0
   11b3a:	6078      	str	r0, [r7, #4]
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
   11b3c:	687b      	ldr	r3, [r7, #4]
   11b3e:	60fb      	str	r3, [r7, #12]
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
   11b40:	68fb      	ldr	r3, [r7, #12]
   11b42:	68db      	ldr	r3, [r3, #12]
   11b44:	2b00      	cmp	r3, #0
   11b46:	dd05      	ble.n	11b54 <range_it_iternext+0x20>
   11b48:	68fb      	ldr	r3, [r7, #12]
   11b4a:	685a      	ldr	r2, [r3, #4]
   11b4c:	68fb      	ldr	r3, [r7, #12]
   11b4e:	689b      	ldr	r3, [r3, #8]
   11b50:	429a      	cmp	r2, r3
   11b52:	db09      	blt.n	11b68 <range_it_iternext+0x34>
   11b54:	68fb      	ldr	r3, [r7, #12]
   11b56:	68db      	ldr	r3, [r3, #12]
   11b58:	2b00      	cmp	r3, #0
   11b5a:	da14      	bge.n	11b86 <range_it_iternext+0x52>
   11b5c:	68fb      	ldr	r3, [r7, #12]
   11b5e:	685a      	ldr	r2, [r3, #4]
   11b60:	68fb      	ldr	r3, [r7, #12]
   11b62:	689b      	ldr	r3, [r3, #8]
   11b64:	429a      	cmp	r2, r3
   11b66:	dd0e      	ble.n	11b86 <range_it_iternext+0x52>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
   11b68:	68fb      	ldr	r3, [r7, #12]
   11b6a:	685b      	ldr	r3, [r3, #4]
   11b6c:	005b      	lsls	r3, r3, #1
   11b6e:	f043 0301 	orr.w	r3, r3, #1
   11b72:	60bb      	str	r3, [r7, #8]
        o->cur += o->step;
   11b74:	68fb      	ldr	r3, [r7, #12]
   11b76:	685a      	ldr	r2, [r3, #4]
   11b78:	68fb      	ldr	r3, [r7, #12]
   11b7a:	68db      	ldr	r3, [r3, #12]
   11b7c:	441a      	add	r2, r3
   11b7e:	68fb      	ldr	r3, [r7, #12]
   11b80:	605a      	str	r2, [r3, #4]
        return o_out;
   11b82:	68bb      	ldr	r3, [r7, #8]
   11b84:	e000      	b.n	11b88 <range_it_iternext+0x54>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11b86:	2304      	movs	r3, #4
    }
}
   11b88:	4618      	mov	r0, r3
   11b8a:	3714      	adds	r7, #20
   11b8c:	46bd      	mov	sp, r7
   11b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b92:	4770      	bx	lr

00011b94 <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
   11b94:	b480      	push	{r7}
   11b96:	b087      	sub	sp, #28
   11b98:	af00      	add	r7, sp, #0
   11b9a:	60f8      	str	r0, [r7, #12]
   11b9c:	60b9      	str	r1, [r7, #8]
   11b9e:	607a      	str	r2, [r7, #4]
   11ba0:	603b      	str	r3, [r7, #0]
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
   11ba2:	683b      	ldr	r3, [r7, #0]
   11ba4:	617b      	str	r3, [r7, #20]
    o->base.type = &range_it_type;
   11ba6:	697b      	ldr	r3, [r7, #20]
   11ba8:	4a08      	ldr	r2, [pc, #32]	; (11bcc <mp_obj_new_range_iterator+0x38>)
   11baa:	601a      	str	r2, [r3, #0]
    o->cur = cur;
   11bac:	697b      	ldr	r3, [r7, #20]
   11bae:	68fa      	ldr	r2, [r7, #12]
   11bb0:	605a      	str	r2, [r3, #4]
    o->stop = stop;
   11bb2:	697b      	ldr	r3, [r7, #20]
   11bb4:	68ba      	ldr	r2, [r7, #8]
   11bb6:	609a      	str	r2, [r3, #8]
    o->step = step;
   11bb8:	697b      	ldr	r3, [r7, #20]
   11bba:	687a      	ldr	r2, [r7, #4]
   11bbc:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11bbe:	697b      	ldr	r3, [r7, #20]
}
   11bc0:	4618      	mov	r0, r3
   11bc2:	371c      	adds	r7, #28
   11bc4:	46bd      	mov	sp, r7
   11bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   11bca:	4770      	bx	lr
   11bcc:	00022b58 	.word	0x00022b58

00011bd0 <range_print>:
    mp_int_t start;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_t;

STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11bd0:	b580      	push	{r7, lr}
   11bd2:	b086      	sub	sp, #24
   11bd4:	af00      	add	r7, sp, #0
   11bd6:	60f8      	str	r0, [r7, #12]
   11bd8:	60b9      	str	r1, [r7, #8]
   11bda:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11bdc:	68bb      	ldr	r3, [r7, #8]
   11bde:	617b      	str	r3, [r7, #20]
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
   11be0:	697b      	ldr	r3, [r7, #20]
   11be2:	685a      	ldr	r2, [r3, #4]
   11be4:	697b      	ldr	r3, [r7, #20]
   11be6:	689b      	ldr	r3, [r3, #8]
   11be8:	490b      	ldr	r1, [pc, #44]	; (11c18 <range_print+0x48>)
   11bea:	68f8      	ldr	r0, [r7, #12]
   11bec:	f7f0 f950 	bl	1e90 <mp_printf>
    if (self->step == 1) {
   11bf0:	697b      	ldr	r3, [r7, #20]
   11bf2:	68db      	ldr	r3, [r3, #12]
   11bf4:	2b01      	cmp	r3, #1
   11bf6:	d104      	bne.n	11c02 <range_print+0x32>
        mp_print_str(print, ")");
   11bf8:	4908      	ldr	r1, [pc, #32]	; (11c1c <range_print+0x4c>)
   11bfa:	68f8      	ldr	r0, [r7, #12]
   11bfc:	f7ef fe36 	bl	186c <mp_print_str>
    } else {
        mp_printf(print, ", " INT_FMT ")", self->step);
    }
}
   11c00:	e006      	b.n	11c10 <range_print+0x40>
        mp_printf(print, ", " INT_FMT ")", self->step);
   11c02:	697b      	ldr	r3, [r7, #20]
   11c04:	68db      	ldr	r3, [r3, #12]
   11c06:	461a      	mov	r2, r3
   11c08:	4905      	ldr	r1, [pc, #20]	; (11c20 <range_print+0x50>)
   11c0a:	68f8      	ldr	r0, [r7, #12]
   11c0c:	f7f0 f940 	bl	1e90 <mp_printf>
}
   11c10:	bf00      	nop
   11c12:	3718      	adds	r7, #24
   11c14:	46bd      	mov	sp, r7
   11c16:	bd80      	pop	{r7, pc}
   11c18:	00022b94 	.word	0x00022b94
   11c1c:	00022ba4 	.word	0x00022ba4
   11c20:	00022ba8 	.word	0x00022ba8

00011c24 <range_make_new>:

STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11c24:	b580      	push	{r7, lr}
   11c26:	b088      	sub	sp, #32
   11c28:	af02      	add	r7, sp, #8
   11c2a:	60f8      	str	r0, [r7, #12]
   11c2c:	60b9      	str	r1, [r7, #8]
   11c2e:	607a      	str	r2, [r7, #4]
   11c30:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   11c32:	2300      	movs	r3, #0
   11c34:	9300      	str	r3, [sp, #0]
   11c36:	2303      	movs	r3, #3
   11c38:	2201      	movs	r2, #1
   11c3a:	6879      	ldr	r1, [r7, #4]
   11c3c:	68b8      	ldr	r0, [r7, #8]
   11c3e:	f7fb f963 	bl	cf08 <mp_arg_check_num>

    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
   11c42:	2010      	movs	r0, #16
   11c44:	f7ee fb6a 	bl	31c <m_malloc>
   11c48:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11c4a:	697b      	ldr	r3, [r7, #20]
   11c4c:	68fa      	ldr	r2, [r7, #12]
   11c4e:	601a      	str	r2, [r3, #0]
    o->start = 0;
   11c50:	697b      	ldr	r3, [r7, #20]
   11c52:	2200      	movs	r2, #0
   11c54:	605a      	str	r2, [r3, #4]
    o->step = 1;
   11c56:	697b      	ldr	r3, [r7, #20]
   11c58:	2201      	movs	r2, #1
   11c5a:	60da      	str	r2, [r3, #12]

    if (n_args == 1) {
   11c5c:	68bb      	ldr	r3, [r7, #8]
   11c5e:	2b01      	cmp	r3, #1
   11c60:	d108      	bne.n	11c74 <range_make_new+0x50>
        o->stop = mp_obj_get_int(args[0]);
   11c62:	683b      	ldr	r3, [r7, #0]
   11c64:	681b      	ldr	r3, [r3, #0]
   11c66:	4618      	mov	r0, r3
   11c68:	f7fb ff1a 	bl	daa0 <mp_obj_get_int>
   11c6c:	4602      	mov	r2, r0
   11c6e:	697b      	ldr	r3, [r7, #20]
   11c70:	609a      	str	r2, [r3, #8]
   11c72:	e023      	b.n	11cbc <range_make_new+0x98>
    } else {
        o->start = mp_obj_get_int(args[0]);
   11c74:	683b      	ldr	r3, [r7, #0]
   11c76:	681b      	ldr	r3, [r3, #0]
   11c78:	4618      	mov	r0, r3
   11c7a:	f7fb ff11 	bl	daa0 <mp_obj_get_int>
   11c7e:	4602      	mov	r2, r0
   11c80:	697b      	ldr	r3, [r7, #20]
   11c82:	605a      	str	r2, [r3, #4]
        o->stop = mp_obj_get_int(args[1]);
   11c84:	683b      	ldr	r3, [r7, #0]
   11c86:	3304      	adds	r3, #4
   11c88:	681b      	ldr	r3, [r3, #0]
   11c8a:	4618      	mov	r0, r3
   11c8c:	f7fb ff08 	bl	daa0 <mp_obj_get_int>
   11c90:	4602      	mov	r2, r0
   11c92:	697b      	ldr	r3, [r7, #20]
   11c94:	609a      	str	r2, [r3, #8]
        if (n_args == 3) {
   11c96:	68bb      	ldr	r3, [r7, #8]
   11c98:	2b03      	cmp	r3, #3
   11c9a:	d10f      	bne.n	11cbc <range_make_new+0x98>
            o->step = mp_obj_get_int(args[2]);
   11c9c:	683b      	ldr	r3, [r7, #0]
   11c9e:	3308      	adds	r3, #8
   11ca0:	681b      	ldr	r3, [r3, #0]
   11ca2:	4618      	mov	r0, r3
   11ca4:	f7fb fefc 	bl	daa0 <mp_obj_get_int>
   11ca8:	4602      	mov	r2, r0
   11caa:	697b      	ldr	r3, [r7, #20]
   11cac:	60da      	str	r2, [r3, #12]
            if (o->step == 0) {
   11cae:	697b      	ldr	r3, [r7, #20]
   11cb0:	68db      	ldr	r3, [r3, #12]
   11cb2:	2b00      	cmp	r3, #0
   11cb4:	d102      	bne.n	11cbc <range_make_new+0x98>
                mp_raise_ValueError("zero step");
   11cb6:	4804      	ldr	r0, [pc, #16]	; (11cc8 <range_make_new+0xa4>)
   11cb8:	f7fb f8f5 	bl	cea6 <mp_raise_ValueError>
            }
        }
    }

    return MP_OBJ_FROM_PTR(o);
   11cbc:	697b      	ldr	r3, [r7, #20]
}
   11cbe:	4618      	mov	r0, r3
   11cc0:	3718      	adds	r7, #24
   11cc2:	46bd      	mov	sp, r7
   11cc4:	bd80      	pop	{r7, pc}
   11cc6:	bf00      	nop
   11cc8:	00022bb0 	.word	0x00022bb0

00011ccc <range_len>:

STATIC mp_int_t range_len(mp_obj_range_t *self) {
   11ccc:	b480      	push	{r7}
   11cce:	b085      	sub	sp, #20
   11cd0:	af00      	add	r7, sp, #0
   11cd2:	6078      	str	r0, [r7, #4]
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
   11cd4:	687b      	ldr	r3, [r7, #4]
   11cd6:	689a      	ldr	r2, [r3, #8]
   11cd8:	687b      	ldr	r3, [r7, #4]
   11cda:	685b      	ldr	r3, [r3, #4]
   11cdc:	1ad2      	subs	r2, r2, r3
   11cde:	687b      	ldr	r3, [r7, #4]
   11ce0:	68db      	ldr	r3, [r3, #12]
   11ce2:	4413      	add	r3, r2
   11ce4:	60fb      	str	r3, [r7, #12]
    if (self->step > 0) {
   11ce6:	687b      	ldr	r3, [r7, #4]
   11ce8:	68db      	ldr	r3, [r3, #12]
   11cea:	2b00      	cmp	r3, #0
   11cec:	dd03      	ble.n	11cf6 <range_len+0x2a>
        len -= 1;
   11cee:	68fb      	ldr	r3, [r7, #12]
   11cf0:	3b01      	subs	r3, #1
   11cf2:	60fb      	str	r3, [r7, #12]
   11cf4:	e002      	b.n	11cfc <range_len+0x30>
    } else {
        len += 1;
   11cf6:	68fb      	ldr	r3, [r7, #12]
   11cf8:	3301      	adds	r3, #1
   11cfa:	60fb      	str	r3, [r7, #12]
    }
    len = len / self->step;
   11cfc:	687b      	ldr	r3, [r7, #4]
   11cfe:	68db      	ldr	r3, [r3, #12]
   11d00:	68fa      	ldr	r2, [r7, #12]
   11d02:	fb92 f3f3 	sdiv	r3, r2, r3
   11d06:	60fb      	str	r3, [r7, #12]
    if (len < 0) {
   11d08:	68fb      	ldr	r3, [r7, #12]
   11d0a:	2b00      	cmp	r3, #0
   11d0c:	da01      	bge.n	11d12 <range_len+0x46>
        len = 0;
   11d0e:	2300      	movs	r3, #0
   11d10:	60fb      	str	r3, [r7, #12]
    }
    return len;
   11d12:	68fb      	ldr	r3, [r7, #12]
}
   11d14:	4618      	mov	r0, r3
   11d16:	3714      	adds	r7, #20
   11d18:	46bd      	mov	sp, r7
   11d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d1e:	4770      	bx	lr

00011d20 <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   11d20:	b580      	push	{r7, lr}
   11d22:	b084      	sub	sp, #16
   11d24:	af00      	add	r7, sp, #0
   11d26:	6078      	str	r0, [r7, #4]
   11d28:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11d2a:	683b      	ldr	r3, [r7, #0]
   11d2c:	60fb      	str	r3, [r7, #12]
    mp_int_t len = range_len(self);
   11d2e:	68f8      	ldr	r0, [r7, #12]
   11d30:	f7ff ffcc 	bl	11ccc <range_len>
   11d34:	60b8      	str	r0, [r7, #8]
    switch (op) {
   11d36:	687b      	ldr	r3, [r7, #4]
   11d38:	2b04      	cmp	r3, #4
   11d3a:	d002      	beq.n	11d42 <range_unary_op+0x22>
   11d3c:	2b05      	cmp	r3, #5
   11d3e:	d00b      	beq.n	11d58 <range_unary_op+0x38>
   11d40:	e00f      	b.n	11d62 <range_unary_op+0x42>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
   11d42:	68bb      	ldr	r3, [r7, #8]
   11d44:	2b00      	cmp	r3, #0
   11d46:	bfcc      	ite	gt
   11d48:	2301      	movgt	r3, #1
   11d4a:	2300      	movle	r3, #0
   11d4c:	b2db      	uxtb	r3, r3
   11d4e:	4618      	mov	r0, r3
   11d50:	f7ff fedc 	bl	11b0c <mp_obj_new_bool>
   11d54:	4603      	mov	r3, r0
   11d56:	e005      	b.n	11d64 <range_unary_op+0x44>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
   11d58:	68bb      	ldr	r3, [r7, #8]
   11d5a:	005b      	lsls	r3, r3, #1
   11d5c:	f043 0301 	orr.w	r3, r3, #1
   11d60:	e000      	b.n	11d64 <range_unary_op+0x44>
        default: return MP_OBJ_NULL; // op not supported
   11d62:	2300      	movs	r3, #0
    }
}
   11d64:	4618      	mov	r0, r3
   11d66:	3710      	adds	r7, #16
   11d68:	46bd      	mov	sp, r7
   11d6a:	bd80      	pop	{r7, pc}

00011d6c <range_subscr>:
                && (lhs_len == 1 || lhs->step == rhs->step)))
    );
}
#endif

STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11d6c:	b580      	push	{r7, lr}
   11d6e:	b088      	sub	sp, #32
   11d70:	af00      	add	r7, sp, #0
   11d72:	60f8      	str	r0, [r7, #12]
   11d74:	60b9      	str	r1, [r7, #8]
   11d76:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   11d78:	687b      	ldr	r3, [r7, #4]
   11d7a:	2b08      	cmp	r3, #8
   11d7c:	d11b      	bne.n	11db6 <range_subscr+0x4a>
        // load
        mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11d7e:	68fb      	ldr	r3, [r7, #12]
   11d80:	61fb      	str	r3, [r7, #28]
        mp_int_t len = range_len(self);
   11d82:	69f8      	ldr	r0, [r7, #28]
   11d84:	f7ff ffa2 	bl	11ccc <range_len>
   11d88:	61b8      	str	r0, [r7, #24]
                o->stop -= self->step;
            }
            return MP_OBJ_FROM_PTR(o);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, len, index, false);
   11d8a:	69fb      	ldr	r3, [r7, #28]
   11d8c:	6818      	ldr	r0, [r3, #0]
   11d8e:	69b9      	ldr	r1, [r7, #24]
   11d90:	2300      	movs	r3, #0
   11d92:	68ba      	ldr	r2, [r7, #8]
   11d94:	f7fb ff70 	bl	dc78 <mp_get_index>
   11d98:	6178      	str	r0, [r7, #20]
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
   11d9a:	69fb      	ldr	r3, [r7, #28]
   11d9c:	685b      	ldr	r3, [r3, #4]
   11d9e:	461a      	mov	r2, r3
   11da0:	69fb      	ldr	r3, [r7, #28]
   11da2:	68db      	ldr	r3, [r3, #12]
   11da4:	4619      	mov	r1, r3
   11da6:	697b      	ldr	r3, [r7, #20]
   11da8:	fb03 f301 	mul.w	r3, r3, r1
   11dac:	4413      	add	r3, r2
   11dae:	005b      	lsls	r3, r3, #1
   11db0:	f043 0301 	orr.w	r3, r3, #1
   11db4:	e000      	b.n	11db8 <range_subscr+0x4c>
    } else {
        return MP_OBJ_NULL; // op not supported
   11db6:	2300      	movs	r3, #0
    }
}
   11db8:	4618      	mov	r0, r3
   11dba:	3720      	adds	r7, #32
   11dbc:	46bd      	mov	sp, r7
   11dbe:	bd80      	pop	{r7, pc}

00011dc0 <range_getiter>:

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   11dc0:	b580      	push	{r7, lr}
   11dc2:	b084      	sub	sp, #16
   11dc4:	af00      	add	r7, sp, #0
   11dc6:	6078      	str	r0, [r7, #4]
   11dc8:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   11dca:	687b      	ldr	r3, [r7, #4]
   11dcc:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
   11dce:	68fb      	ldr	r3, [r7, #12]
   11dd0:	6858      	ldr	r0, [r3, #4]
   11dd2:	68fb      	ldr	r3, [r7, #12]
   11dd4:	6899      	ldr	r1, [r3, #8]
   11dd6:	68fb      	ldr	r3, [r7, #12]
   11dd8:	68da      	ldr	r2, [r3, #12]
   11dda:	683b      	ldr	r3, [r7, #0]
   11ddc:	f7ff feda 	bl	11b94 <mp_obj_new_range_iterator>
   11de0:	4603      	mov	r3, r0
}
   11de2:	4618      	mov	r0, r3
   11de4:	3710      	adds	r7, #16
   11de6:	46bd      	mov	sp, r7
   11de8:	bd80      	pop	{r7, pc}

00011dea <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
   11dea:	b580      	push	{r7, lr}
   11dec:	b086      	sub	sp, #24
   11dee:	af00      	add	r7, sp, #0
   11df0:	60f8      	str	r0, [r7, #12]
   11df2:	60b9      	str	r1, [r7, #8]
   11df4:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   11df6:	687b      	ldr	r3, [r7, #4]
   11df8:	681b      	ldr	r3, [r3, #0]
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	d129      	bne.n	11e52 <range_attr+0x68>
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   11dfe:	68fb      	ldr	r3, [r7, #12]
   11e00:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_start) {
   11e02:	68bb      	ldr	r3, [r7, #8]
   11e04:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
   11e08:	d108      	bne.n	11e1c <range_attr+0x32>
        dest[0] = mp_obj_new_int(o->start);
   11e0a:	697b      	ldr	r3, [r7, #20]
   11e0c:	685b      	ldr	r3, [r3, #4]
   11e0e:	4618      	mov	r0, r3
   11e10:	f7fe fc64 	bl	106dc <mp_obj_new_int>
   11e14:	4602      	mov	r2, r0
   11e16:	687b      	ldr	r3, [r7, #4]
   11e18:	601a      	str	r2, [r3, #0]
   11e1a:	e01b      	b.n	11e54 <range_attr+0x6a>
    } else if (attr == MP_QSTR_stop) {
   11e1c:	68bb      	ldr	r3, [r7, #8]
   11e1e:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
   11e22:	d108      	bne.n	11e36 <range_attr+0x4c>
        dest[0] = mp_obj_new_int(o->stop);
   11e24:	697b      	ldr	r3, [r7, #20]
   11e26:	689b      	ldr	r3, [r3, #8]
   11e28:	4618      	mov	r0, r3
   11e2a:	f7fe fc57 	bl	106dc <mp_obj_new_int>
   11e2e:	4602      	mov	r2, r0
   11e30:	687b      	ldr	r3, [r7, #4]
   11e32:	601a      	str	r2, [r3, #0]
   11e34:	e00e      	b.n	11e54 <range_attr+0x6a>
    } else if (attr == MP_QSTR_step) {
   11e36:	68bb      	ldr	r3, [r7, #8]
   11e38:	f240 1265 	movw	r2, #357	; 0x165
   11e3c:	4293      	cmp	r3, r2
   11e3e:	d109      	bne.n	11e54 <range_attr+0x6a>
        dest[0] = mp_obj_new_int(o->step);
   11e40:	697b      	ldr	r3, [r7, #20]
   11e42:	68db      	ldr	r3, [r3, #12]
   11e44:	4618      	mov	r0, r3
   11e46:	f7fe fc49 	bl	106dc <mp_obj_new_int>
   11e4a:	4602      	mov	r2, r0
   11e4c:	687b      	ldr	r3, [r7, #4]
   11e4e:	601a      	str	r2, [r3, #0]
   11e50:	e000      	b.n	11e54 <range_attr+0x6a>
        return;
   11e52:	bf00      	nop
    }
}
   11e54:	3718      	adds	r7, #24
   11e56:	46bd      	mov	sp, r7
   11e58:	bd80      	pop	{r7, pc}
   11e5a:	bf00      	nop

00011e5c <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11e5c:	b580      	push	{r7, lr}
   11e5e:	b086      	sub	sp, #24
   11e60:	af00      	add	r7, sp, #0
   11e62:	60f8      	str	r0, [r7, #12]
   11e64:	60b9      	str	r1, [r7, #8]
   11e66:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
   11e68:	68bb      	ldr	r3, [r7, #8]
   11e6a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "%q", self->name);
   11e6c:	697b      	ldr	r3, [r7, #20]
   11e6e:	685b      	ldr	r3, [r3, #4]
   11e70:	461a      	mov	r2, r3
   11e72:	4904      	ldr	r1, [pc, #16]	; (11e84 <singleton_print+0x28>)
   11e74:	68f8      	ldr	r0, [r7, #12]
   11e76:	f7f0 f80b 	bl	1e90 <mp_printf>
}
   11e7a:	bf00      	nop
   11e7c:	3718      	adds	r7, #24
   11e7e:	46bd      	mov	sp, r7
   11e80:	bd80      	pop	{r7, pc}
   11e82:	bf00      	nop
   11e84:	00022bf8 	.word	0x00022bf8

00011e88 <utf8_next_char>:
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
   11e88:	b480      	push	{r7}
   11e8a:	b083      	sub	sp, #12
   11e8c:	af00      	add	r7, sp, #0
   11e8e:	6078      	str	r0, [r7, #4]
   11e90:	687b      	ldr	r3, [r7, #4]
   11e92:	3301      	adds	r3, #1
   11e94:	4618      	mov	r0, r3
   11e96:	370c      	adds	r7, #12
   11e98:	46bd      	mov	sp, r7
   11e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e9e:	4770      	bx	lr

00011ea0 <utf8_charlen>:
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }
   11ea0:	b480      	push	{r7}
   11ea2:	b083      	sub	sp, #12
   11ea4:	af00      	add	r7, sp, #0
   11ea6:	6078      	str	r0, [r7, #4]
   11ea8:	6039      	str	r1, [r7, #0]
   11eaa:	683b      	ldr	r3, [r7, #0]
   11eac:	4618      	mov	r0, r3
   11eae:	370c      	adds	r7, #12
   11eb0:	46bd      	mov	sp, r7
   11eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   11eb6:	4770      	bx	lr

00011eb8 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   11eb8:	b480      	push	{r7}
   11eba:	b083      	sub	sp, #12
   11ebc:	af00      	add	r7, sp, #0
   11ebe:	6078      	str	r0, [r7, #4]
   11ec0:	687b      	ldr	r3, [r7, #4]
   11ec2:	f003 0301 	and.w	r3, r3, #1
   11ec6:	2b00      	cmp	r3, #0
   11ec8:	bf14      	ite	ne
   11eca:	2301      	movne	r3, #1
   11ecc:	2300      	moveq	r3, #0
   11ece:	b2db      	uxtb	r3, r3
   11ed0:	4618      	mov	r0, r3
   11ed2:	370c      	adds	r7, #12
   11ed4:	46bd      	mov	sp, r7
   11ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
   11eda:	4770      	bx	lr

00011edc <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   11edc:	b480      	push	{r7}
   11ede:	b083      	sub	sp, #12
   11ee0:	af00      	add	r7, sp, #0
   11ee2:	6078      	str	r0, [r7, #4]
   11ee4:	687b      	ldr	r3, [r7, #4]
   11ee6:	f003 0303 	and.w	r3, r3, #3
   11eea:	2b02      	cmp	r3, #2
   11eec:	bf0c      	ite	eq
   11eee:	2301      	moveq	r3, #1
   11ef0:	2300      	movne	r3, #0
   11ef2:	b2db      	uxtb	r3, r3
   11ef4:	4618      	mov	r0, r3
   11ef6:	370c      	adds	r7, #12
   11ef8:	46bd      	mov	sp, r7
   11efa:	f85d 7b04 	ldr.w	r7, [sp], #4
   11efe:	4770      	bx	lr

00011f00 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   11f00:	b480      	push	{r7}
   11f02:	b083      	sub	sp, #12
   11f04:	af00      	add	r7, sp, #0
   11f06:	6078      	str	r0, [r7, #4]
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	f003 0303 	and.w	r3, r3, #3
   11f0e:	2b00      	cmp	r3, #0
   11f10:	bf0c      	ite	eq
   11f12:	2301      	moveq	r3, #1
   11f14:	2300      	movne	r3, #0
   11f16:	b2db      	uxtb	r3, r3
   11f18:	4618      	mov	r0, r3
   11f1a:	370c      	adds	r7, #12
   11f1c:	46bd      	mov	sp, r7
   11f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f22:	4770      	bx	lr

00011f24 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   11f24:	b480      	push	{r7}
   11f26:	b083      	sub	sp, #12
   11f28:	af00      	add	r7, sp, #0
   11f2a:	6078      	str	r0, [r7, #4]
   11f2c:	687b      	ldr	r3, [r7, #4]
   11f2e:	2b00      	cmp	r3, #0
   11f30:	d001      	beq.n	11f36 <mp_obj_new_bool+0x12>
   11f32:	4b04      	ldr	r3, [pc, #16]	; (11f44 <mp_obj_new_bool+0x20>)
   11f34:	e000      	b.n	11f38 <mp_obj_new_bool+0x14>
   11f36:	4b04      	ldr	r3, [pc, #16]	; (11f48 <mp_obj_new_bool+0x24>)
   11f38:	4618      	mov	r0, r3
   11f3a:	370c      	adds	r7, #12
   11f3c:	46bd      	mov	sp, r7
   11f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f42:	4770      	bx	lr
   11f44:	00021310 	.word	0x00021310
   11f48:	00021308 	.word	0x00021308

00011f4c <mp_str_print_quoted>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in);

/******************************************************************************/
/* str                                                                        */

void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
   11f4c:	b580      	push	{r7, lr}
   11f4e:	b08a      	sub	sp, #40	; 0x28
   11f50:	af00      	add	r7, sp, #0
   11f52:	60f8      	str	r0, [r7, #12]
   11f54:	60b9      	str	r1, [r7, #8]
   11f56:	607a      	str	r2, [r7, #4]
   11f58:	70fb      	strb	r3, [r7, #3]
    // this escapes characters, but it will be very slow to print (calling print many times)
    bool has_single_quote = false;
   11f5a:	2300      	movs	r3, #0
   11f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool has_double_quote = false;
   11f60:	2300      	movs	r3, #0
   11f62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   11f66:	68bb      	ldr	r3, [r7, #8]
   11f68:	623b      	str	r3, [r7, #32]
   11f6a:	68ba      	ldr	r2, [r7, #8]
   11f6c:	687b      	ldr	r3, [r7, #4]
   11f6e:	4413      	add	r3, r2
   11f70:	617b      	str	r3, [r7, #20]
   11f72:	e011      	b.n	11f98 <mp_str_print_quoted+0x4c>
        if (*s == '\'') {
   11f74:	6a3b      	ldr	r3, [r7, #32]
   11f76:	781b      	ldrb	r3, [r3, #0]
   11f78:	2b27      	cmp	r3, #39	; 0x27
   11f7a:	d103      	bne.n	11f84 <mp_str_print_quoted+0x38>
            has_single_quote = true;
   11f7c:	2301      	movs	r3, #1
   11f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   11f82:	e006      	b.n	11f92 <mp_str_print_quoted+0x46>
        } else if (*s == '"') {
   11f84:	6a3b      	ldr	r3, [r7, #32]
   11f86:	781b      	ldrb	r3, [r3, #0]
   11f88:	2b22      	cmp	r3, #34	; 0x22
   11f8a:	d102      	bne.n	11f92 <mp_str_print_quoted+0x46>
            has_double_quote = true;
   11f8c:	2301      	movs	r3, #1
   11f8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   11f92:	6a3b      	ldr	r3, [r7, #32]
   11f94:	3301      	adds	r3, #1
   11f96:	623b      	str	r3, [r7, #32]
   11f98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   11f9c:	f083 0301 	eor.w	r3, r3, #1
   11fa0:	b2db      	uxtb	r3, r3
   11fa2:	2b00      	cmp	r3, #0
   11fa4:	d003      	beq.n	11fae <mp_str_print_quoted+0x62>
   11fa6:	6a3a      	ldr	r2, [r7, #32]
   11fa8:	697b      	ldr	r3, [r7, #20]
   11faa:	429a      	cmp	r2, r3
   11fac:	d3e2      	bcc.n	11f74 <mp_str_print_quoted+0x28>
        }
    }
    int quote_char = '\'';
   11fae:	2327      	movs	r3, #39	; 0x27
   11fb0:	61fb      	str	r3, [r7, #28]
    if (has_single_quote && !has_double_quote) {
   11fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11fb6:	2b00      	cmp	r3, #0
   11fb8:	d008      	beq.n	11fcc <mp_str_print_quoted+0x80>
   11fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   11fbe:	f083 0301 	eor.w	r3, r3, #1
   11fc2:	b2db      	uxtb	r3, r3
   11fc4:	2b00      	cmp	r3, #0
   11fc6:	d001      	beq.n	11fcc <mp_str_print_quoted+0x80>
        quote_char = '"';
   11fc8:	2322      	movs	r3, #34	; 0x22
   11fca:	61fb      	str	r3, [r7, #28]
    }
    mp_printf(print, "%c", quote_char);
   11fcc:	69fa      	ldr	r2, [r7, #28]
   11fce:	4936      	ldr	r1, [pc, #216]	; (120a8 <mp_str_print_quoted+0x15c>)
   11fd0:	68f8      	ldr	r0, [r7, #12]
   11fd2:	f7ef ff5d 	bl	1e90 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   11fd6:	68bb      	ldr	r3, [r7, #8]
   11fd8:	61bb      	str	r3, [r7, #24]
   11fda:	68ba      	ldr	r2, [r7, #8]
   11fdc:	687b      	ldr	r3, [r7, #4]
   11fde:	4413      	add	r3, r2
   11fe0:	613b      	str	r3, [r7, #16]
   11fe2:	e054      	b.n	1208e <mp_str_print_quoted+0x142>
        if (*s == quote_char) {
   11fe4:	69bb      	ldr	r3, [r7, #24]
   11fe6:	781b      	ldrb	r3, [r3, #0]
   11fe8:	461a      	mov	r2, r3
   11fea:	69fb      	ldr	r3, [r7, #28]
   11fec:	429a      	cmp	r2, r3
   11fee:	d105      	bne.n	11ffc <mp_str_print_quoted+0xb0>
            mp_printf(print, "\\%c", quote_char);
   11ff0:	69fa      	ldr	r2, [r7, #28]
   11ff2:	492e      	ldr	r1, [pc, #184]	; (120ac <mp_str_print_quoted+0x160>)
   11ff4:	68f8      	ldr	r0, [r7, #12]
   11ff6:	f7ef ff4b 	bl	1e90 <mp_printf>
   11ffa:	e045      	b.n	12088 <mp_str_print_quoted+0x13c>
        } else if (*s == '\\') {
   11ffc:	69bb      	ldr	r3, [r7, #24]
   11ffe:	781b      	ldrb	r3, [r3, #0]
   12000:	2b5c      	cmp	r3, #92	; 0x5c
   12002:	d104      	bne.n	1200e <mp_str_print_quoted+0xc2>
            mp_print_str(print, "\\\\");
   12004:	492a      	ldr	r1, [pc, #168]	; (120b0 <mp_str_print_quoted+0x164>)
   12006:	68f8      	ldr	r0, [r7, #12]
   12008:	f7ef fc30 	bl	186c <mp_print_str>
   1200c:	e03c      	b.n	12088 <mp_str_print_quoted+0x13c>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
   1200e:	69bb      	ldr	r3, [r7, #24]
   12010:	781b      	ldrb	r3, [r3, #0]
   12012:	2b1f      	cmp	r3, #31
   12014:	d916      	bls.n	12044 <mp_str_print_quoted+0xf8>
   12016:	69bb      	ldr	r3, [r7, #24]
   12018:	781b      	ldrb	r3, [r3, #0]
   1201a:	2b7f      	cmp	r3, #127	; 0x7f
   1201c:	d012      	beq.n	12044 <mp_str_print_quoted+0xf8>
   1201e:	78fb      	ldrb	r3, [r7, #3]
   12020:	f083 0301 	eor.w	r3, r3, #1
   12024:	b2db      	uxtb	r3, r3
   12026:	2b00      	cmp	r3, #0
   12028:	d104      	bne.n	12034 <mp_str_print_quoted+0xe8>
   1202a:	69bb      	ldr	r3, [r7, #24]
   1202c:	781b      	ldrb	r3, [r3, #0]
   1202e:	b25b      	sxtb	r3, r3
   12030:	2b00      	cmp	r3, #0
   12032:	db07      	blt.n	12044 <mp_str_print_quoted+0xf8>
            // In strings, anything which is not ascii control character
            // is printed as is, this includes characters in range 0x80-0xff
            // (which can be non-Latin letters, etc.)
            mp_printf(print, "%c", *s);
   12034:	69bb      	ldr	r3, [r7, #24]
   12036:	781b      	ldrb	r3, [r3, #0]
   12038:	461a      	mov	r2, r3
   1203a:	491b      	ldr	r1, [pc, #108]	; (120a8 <mp_str_print_quoted+0x15c>)
   1203c:	68f8      	ldr	r0, [r7, #12]
   1203e:	f7ef ff27 	bl	1e90 <mp_printf>
   12042:	e021      	b.n	12088 <mp_str_print_quoted+0x13c>
        } else if (*s == '\n') {
   12044:	69bb      	ldr	r3, [r7, #24]
   12046:	781b      	ldrb	r3, [r3, #0]
   12048:	2b0a      	cmp	r3, #10
   1204a:	d104      	bne.n	12056 <mp_str_print_quoted+0x10a>
            mp_print_str(print, "\\n");
   1204c:	4919      	ldr	r1, [pc, #100]	; (120b4 <mp_str_print_quoted+0x168>)
   1204e:	68f8      	ldr	r0, [r7, #12]
   12050:	f7ef fc0c 	bl	186c <mp_print_str>
   12054:	e018      	b.n	12088 <mp_str_print_quoted+0x13c>
        } else if (*s == '\r') {
   12056:	69bb      	ldr	r3, [r7, #24]
   12058:	781b      	ldrb	r3, [r3, #0]
   1205a:	2b0d      	cmp	r3, #13
   1205c:	d104      	bne.n	12068 <mp_str_print_quoted+0x11c>
            mp_print_str(print, "\\r");
   1205e:	4916      	ldr	r1, [pc, #88]	; (120b8 <mp_str_print_quoted+0x16c>)
   12060:	68f8      	ldr	r0, [r7, #12]
   12062:	f7ef fc03 	bl	186c <mp_print_str>
   12066:	e00f      	b.n	12088 <mp_str_print_quoted+0x13c>
        } else if (*s == '\t') {
   12068:	69bb      	ldr	r3, [r7, #24]
   1206a:	781b      	ldrb	r3, [r3, #0]
   1206c:	2b09      	cmp	r3, #9
   1206e:	d104      	bne.n	1207a <mp_str_print_quoted+0x12e>
            mp_print_str(print, "\\t");
   12070:	4912      	ldr	r1, [pc, #72]	; (120bc <mp_str_print_quoted+0x170>)
   12072:	68f8      	ldr	r0, [r7, #12]
   12074:	f7ef fbfa 	bl	186c <mp_print_str>
   12078:	e006      	b.n	12088 <mp_str_print_quoted+0x13c>
        } else {
            mp_printf(print, "\\x%02x", *s);
   1207a:	69bb      	ldr	r3, [r7, #24]
   1207c:	781b      	ldrb	r3, [r3, #0]
   1207e:	461a      	mov	r2, r3
   12080:	490f      	ldr	r1, [pc, #60]	; (120c0 <mp_str_print_quoted+0x174>)
   12082:	68f8      	ldr	r0, [r7, #12]
   12084:	f7ef ff04 	bl	1e90 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   12088:	69bb      	ldr	r3, [r7, #24]
   1208a:	3301      	adds	r3, #1
   1208c:	61bb      	str	r3, [r7, #24]
   1208e:	69ba      	ldr	r2, [r7, #24]
   12090:	693b      	ldr	r3, [r7, #16]
   12092:	429a      	cmp	r2, r3
   12094:	d3a6      	bcc.n	11fe4 <mp_str_print_quoted+0x98>
        }
    }
    mp_printf(print, "%c", quote_char);
   12096:	69fa      	ldr	r2, [r7, #28]
   12098:	4903      	ldr	r1, [pc, #12]	; (120a8 <mp_str_print_quoted+0x15c>)
   1209a:	68f8      	ldr	r0, [r7, #12]
   1209c:	f7ef fef8 	bl	1e90 <mp_printf>
}
   120a0:	bf00      	nop
   120a2:	3728      	adds	r7, #40	; 0x28
   120a4:	46bd      	mov	sp, r7
   120a6:	bd80      	pop	{r7, pc}
   120a8:	00022c40 	.word	0x00022c40
   120ac:	00022c44 	.word	0x00022c44
   120b0:	00022c48 	.word	0x00022c48
   120b4:	00022c4c 	.word	0x00022c4c
   120b8:	00022c50 	.word	0x00022c50
   120bc:	00022c54 	.word	0x00022c54
   120c0:	00022c58 	.word	0x00022c58

000120c4 <str_print>:
    }
    mp_print_str(print, "\"");
}
#endif

STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   120c4:	b580      	push	{r7, lr}
   120c6:	b088      	sub	sp, #32
   120c8:	af00      	add	r7, sp, #0
   120ca:	60f8      	str	r0, [r7, #12]
   120cc:	60b9      	str	r1, [r7, #8]
   120ce:	607a      	str	r2, [r7, #4]
    GET_STR_DATA_LEN(self_in, str_data, str_len);
   120d0:	68b8      	ldr	r0, [r7, #8]
   120d2:	f7ff ff03 	bl	11edc <MP_OBJ_IS_QSTR>
   120d6:	4603      	mov	r3, r0
   120d8:	2b00      	cmp	r3, #0
   120da:	d009      	beq.n	120f0 <str_print+0x2c>
   120dc:	68bb      	ldr	r3, [r7, #8]
   120de:	089b      	lsrs	r3, r3, #2
   120e0:	f107 0214 	add.w	r2, r7, #20
   120e4:	4611      	mov	r1, r2
   120e6:	4618      	mov	r0, r3
   120e8:	f7ef f890 	bl	120c <qstr_data>
   120ec:	61f8      	str	r0, [r7, #28]
   120ee:	e005      	b.n	120fc <str_print+0x38>
   120f0:	68bb      	ldr	r3, [r7, #8]
   120f2:	689b      	ldr	r3, [r3, #8]
   120f4:	617b      	str	r3, [r7, #20]
   120f6:	68bb      	ldr	r3, [r7, #8]
   120f8:	68db      	ldr	r3, [r3, #12]
   120fa:	61fb      	str	r3, [r7, #28]
        mp_str_print_json(print, str_data, str_len);
        return;
    }
    #endif
    #if !MICROPY_PY_BUILTINS_STR_UNICODE
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
   120fc:	68b8      	ldr	r0, [r7, #8]
   120fe:	f7ff feff 	bl	11f00 <MP_OBJ_IS_OBJ>
   12102:	4603      	mov	r3, r0
   12104:	2b00      	cmp	r3, #0
   12106:	d006      	beq.n	12116 <str_print+0x52>
   12108:	68bb      	ldr	r3, [r7, #8]
   1210a:	681b      	ldr	r3, [r3, #0]
   1210c:	4a17      	ldr	r2, [pc, #92]	; (1216c <str_print+0xa8>)
   1210e:	4293      	cmp	r3, r2
   12110:	d101      	bne.n	12116 <str_print+0x52>
   12112:	2301      	movs	r3, #1
   12114:	e000      	b.n	12118 <str_print+0x54>
   12116:	2300      	movs	r3, #0
   12118:	76fb      	strb	r3, [r7, #27]
   1211a:	7efb      	ldrb	r3, [r7, #27]
   1211c:	f003 0301 	and.w	r3, r3, #1
   12120:	76fb      	strb	r3, [r7, #27]
    #else
    bool is_bytes = true;
    #endif
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
   12122:	687b      	ldr	r3, [r7, #4]
   12124:	2b04      	cmp	r3, #4
   12126:	d008      	beq.n	1213a <str_print+0x76>
   12128:	687b      	ldr	r3, [r7, #4]
   1212a:	2b00      	cmp	r3, #0
   1212c:	d10c      	bne.n	12148 <str_print+0x84>
   1212e:	7efb      	ldrb	r3, [r7, #27]
   12130:	f083 0301 	eor.w	r3, r3, #1
   12134:	b2db      	uxtb	r3, r3
   12136:	2b00      	cmp	r3, #0
   12138:	d006      	beq.n	12148 <str_print+0x84>
        mp_printf(print, "%.*s", str_len, str_data);
   1213a:	697a      	ldr	r2, [r7, #20]
   1213c:	69fb      	ldr	r3, [r7, #28]
   1213e:	490c      	ldr	r1, [pc, #48]	; (12170 <str_print+0xac>)
   12140:	68f8      	ldr	r0, [r7, #12]
   12142:	f7ef fea5 	bl	1e90 <mp_printf>
   12146:	e00c      	b.n	12162 <str_print+0x9e>
    } else {
        if (is_bytes) {
   12148:	7efb      	ldrb	r3, [r7, #27]
   1214a:	2b00      	cmp	r3, #0
   1214c:	d003      	beq.n	12156 <str_print+0x92>
            mp_print_str(print, "b");
   1214e:	4909      	ldr	r1, [pc, #36]	; (12174 <str_print+0xb0>)
   12150:	68f8      	ldr	r0, [r7, #12]
   12152:	f7ef fb8b 	bl	186c <mp_print_str>
        }
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
   12156:	697a      	ldr	r2, [r7, #20]
   12158:	7efb      	ldrb	r3, [r7, #27]
   1215a:	69f9      	ldr	r1, [r7, #28]
   1215c:	68f8      	ldr	r0, [r7, #12]
   1215e:	f7ff fef5 	bl	11f4c <mp_str_print_quoted>
    }
}
   12162:	bf00      	nop
   12164:	3720      	adds	r7, #32
   12166:	46bd      	mov	sp, r7
   12168:	bd80      	pop	{r7, pc}
   1216a:	bf00      	nop
   1216c:	00023240 	.word	0x00023240
   12170:	00022c60 	.word	0x00022c60
   12174:	00022c68 	.word	0x00022c68

00012178 <mp_obj_str_make_new>:

mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12178:	b580      	push	{r7, lr}
   1217a:	b094      	sub	sp, #80	; 0x50
   1217c:	af02      	add	r7, sp, #8
   1217e:	60f8      	str	r0, [r7, #12]
   12180:	60b9      	str	r1, [r7, #8]
   12182:	607a      	str	r2, [r7, #4]
   12184:	603b      	str	r3, [r7, #0]
    if (n_kw != 0) {
        mp_arg_error_unimpl_kw();
    }
#endif

    mp_arg_check_num(n_args, n_kw, 0, 3, false);
   12186:	2300      	movs	r3, #0
   12188:	9300      	str	r3, [sp, #0]
   1218a:	2303      	movs	r3, #3
   1218c:	2200      	movs	r2, #0
   1218e:	6879      	ldr	r1, [r7, #4]
   12190:	68b8      	ldr	r0, [r7, #8]
   12192:	f7fa feb9 	bl	cf08 <mp_arg_check_num>

    switch (n_args) {
   12196:	68bb      	ldr	r3, [r7, #8]
   12198:	2b00      	cmp	r3, #0
   1219a:	d002      	beq.n	121a2 <mp_obj_str_make_new+0x2a>
   1219c:	2b01      	cmp	r3, #1
   1219e:	d002      	beq.n	121a6 <mp_obj_str_make_new+0x2e>
   121a0:	e019      	b.n	121d6 <mp_obj_str_make_new+0x5e>
        case 0:
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   121a2:	2306      	movs	r3, #6
   121a4:	e089      	b.n	122ba <mp_obj_str_make_new+0x142>

        case 1: {
            vstr_t vstr;
            mp_print_t print;
            vstr_init_print(&vstr, 16, &print);
   121a6:	f107 0220 	add.w	r2, r7, #32
   121aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
   121ae:	2110      	movs	r1, #16
   121b0:	4618      	mov	r0, r3
   121b2:	f7ef f8f0 	bl	1396 <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
   121b6:	683b      	ldr	r3, [r7, #0]
   121b8:	6819      	ldr	r1, [r3, #0]
   121ba:	f107 0320 	add.w	r3, r7, #32
   121be:	2200      	movs	r2, #0
   121c0:	4618      	mov	r0, r3
   121c2:	f7fb fac2 	bl	d74a <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
   121c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   121ca:	4619      	mov	r1, r3
   121cc:	68f8      	ldr	r0, [r7, #12]
   121ce:	f002 fed0 	bl	14f72 <mp_obj_new_str_from_vstr>
   121d2:	4603      	mov	r3, r0
   121d4:	e071      	b.n	122ba <mp_obj_str_make_new+0x142>
        }

        default: // 2 or 3 args
            // TODO: validate 2nd/3rd args
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
   121d6:	683b      	ldr	r3, [r7, #0]
   121d8:	681b      	ldr	r3, [r3, #0]
   121da:	4618      	mov	r0, r3
   121dc:	f7ff fe90 	bl	11f00 <MP_OBJ_IS_OBJ>
   121e0:	4603      	mov	r3, r0
   121e2:	2b00      	cmp	r3, #0
   121e4:	d05a      	beq.n	1229c <mp_obj_str_make_new+0x124>
   121e6:	683b      	ldr	r3, [r7, #0]
   121e8:	681b      	ldr	r3, [r3, #0]
   121ea:	681b      	ldr	r3, [r3, #0]
   121ec:	4a35      	ldr	r2, [pc, #212]	; (122c4 <mp_obj_str_make_new+0x14c>)
   121ee:	4293      	cmp	r3, r2
   121f0:	d154      	bne.n	1229c <mp_obj_str_make_new+0x124>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
   121f2:	683b      	ldr	r3, [r7, #0]
   121f4:	681b      	ldr	r3, [r3, #0]
   121f6:	4618      	mov	r0, r3
   121f8:	f7ff fe70 	bl	11edc <MP_OBJ_IS_QSTR>
   121fc:	4603      	mov	r3, r0
   121fe:	2b00      	cmp	r3, #0
   12200:	d00a      	beq.n	12218 <mp_obj_str_make_new+0xa0>
   12202:	683b      	ldr	r3, [r7, #0]
   12204:	681b      	ldr	r3, [r3, #0]
   12206:	089b      	lsrs	r3, r3, #2
   12208:	f107 021c 	add.w	r2, r7, #28
   1220c:	4611      	mov	r1, r2
   1220e:	4618      	mov	r0, r3
   12210:	f7ee fffc 	bl	120c <qstr_data>
   12214:	6478      	str	r0, [r7, #68]	; 0x44
   12216:	e007      	b.n	12228 <mp_obj_str_make_new+0xb0>
   12218:	683b      	ldr	r3, [r7, #0]
   1221a:	681b      	ldr	r3, [r3, #0]
   1221c:	689b      	ldr	r3, [r3, #8]
   1221e:	61fb      	str	r3, [r7, #28]
   12220:	683b      	ldr	r3, [r7, #0]
   12222:	681b      	ldr	r3, [r3, #0]
   12224:	68db      	ldr	r3, [r3, #12]
   12226:	647b      	str	r3, [r7, #68]	; 0x44
                GET_STR_HASH(args[0], str_hash);
   12228:	683b      	ldr	r3, [r7, #0]
   1222a:	681b      	ldr	r3, [r3, #0]
   1222c:	4618      	mov	r0, r3
   1222e:	f7ff fe55 	bl	11edc <MP_OBJ_IS_QSTR>
   12232:	4603      	mov	r3, r0
   12234:	2b00      	cmp	r3, #0
   12236:	d007      	beq.n	12248 <mp_obj_str_make_new+0xd0>
   12238:	683b      	ldr	r3, [r7, #0]
   1223a:	681b      	ldr	r3, [r3, #0]
   1223c:	089b      	lsrs	r3, r3, #2
   1223e:	4618      	mov	r0, r3
   12240:	f7ee ffba 	bl	11b8 <qstr_hash>
   12244:	6438      	str	r0, [r7, #64]	; 0x40
   12246:	e003      	b.n	12250 <mp_obj_str_make_new+0xd8>
   12248:	683b      	ldr	r3, [r7, #0]
   1224a:	681b      	ldr	r3, [r3, #0]
   1224c:	685b      	ldr	r3, [r3, #4]
   1224e:	643b      	str	r3, [r7, #64]	; 0x40
                if (str_hash == 0) {
   12250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12252:	2b00      	cmp	r3, #0
   12254:	d105      	bne.n	12262 <mp_obj_str_make_new+0xea>
                    str_hash = qstr_compute_hash(str_data, str_len);
   12256:	69fb      	ldr	r3, [r7, #28]
   12258:	4619      	mov	r1, r3
   1225a:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1225c:	f7ee fddc 	bl	e18 <qstr_compute_hash>
   12260:	6438      	str	r0, [r7, #64]	; 0x40
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif

                // Check if a qstr with this data already exists
                qstr q = qstr_find_strn((const char*)str_data, str_len);
   12262:	69fb      	ldr	r3, [r7, #28]
   12264:	4619      	mov	r1, r3
   12266:	6c78      	ldr	r0, [r7, #68]	; 0x44
   12268:	f7ee fe86 	bl	f78 <qstr_find_strn>
   1226c:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (q != MP_QSTR_NULL) {
   1226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12270:	2b00      	cmp	r3, #0
   12272:	d004      	beq.n	1227e <mp_obj_str_make_new+0x106>
                    return MP_OBJ_NEW_QSTR(q);
   12274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12276:	009b      	lsls	r3, r3, #2
   12278:	f043 0302 	orr.w	r3, r3, #2
   1227c:	e01d      	b.n	122ba <mp_obj_str_make_new+0x142>
                }

                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
   1227e:	69fb      	ldr	r3, [r7, #28]
   12280:	461a      	mov	r2, r3
   12282:	2100      	movs	r1, #0
   12284:	68f8      	ldr	r0, [r7, #12]
   12286:	f002 fe16 	bl	14eb6 <mp_obj_new_str_copy>
   1228a:	63b8      	str	r0, [r7, #56]	; 0x38
                o->data = str_data;
   1228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1228e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12290:	60da      	str	r2, [r3, #12]
                o->hash = str_hash;
   12292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12296:	605a      	str	r2, [r3, #4]
                return MP_OBJ_FROM_PTR(o);
   12298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1229a:	e00e      	b.n	122ba <mp_obj_str_make_new+0x142>
            } else {
                mp_buffer_info_t bufinfo;
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   1229c:	683b      	ldr	r3, [r7, #0]
   1229e:	681b      	ldr	r3, [r3, #0]
   122a0:	f107 0110 	add.w	r1, r7, #16
   122a4:	2201      	movs	r2, #1
   122a6:	4618      	mov	r0, r3
   122a8:	f7fb fe2a 	bl	df00 <mp_get_buffer_raise>
                #if MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
                if (!utf8_check(bufinfo.buf, bufinfo.len)) {
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
   122ac:	693b      	ldr	r3, [r7, #16]
   122ae:	697a      	ldr	r2, [r7, #20]
   122b0:	4611      	mov	r1, r2
   122b2:	4618      	mov	r0, r3
   122b4:	f002 fec0 	bl	15038 <mp_obj_new_str>
   122b8:	4603      	mov	r3, r0
            }
    }
}
   122ba:	4618      	mov	r0, r3
   122bc:	3748      	adds	r7, #72	; 0x48
   122be:	46bd      	mov	sp, r7
   122c0:	bd80      	pop	{r7, pc}
   122c2:	bf00      	nop
   122c4:	00023240 	.word	0x00023240

000122c8 <bytes_make_new>:

STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   122c8:	b580      	push	{r7, lr}
   122ca:	b09e      	sub	sp, #120	; 0x78
   122cc:	af00      	add	r7, sp, #0
   122ce:	60f8      	str	r0, [r7, #12]
   122d0:	60b9      	str	r1, [r7, #8]
   122d2:	607a      	str	r2, [r7, #4]
   122d4:	603b      	str	r3, [r7, #0]
    }
    #else
    (void)n_kw;
    #endif

    if (n_args == 0) {
   122d6:	68bb      	ldr	r3, [r7, #8]
   122d8:	2b00      	cmp	r3, #0
   122da:	d101      	bne.n	122e0 <bytes_make_new+0x18>
        return mp_const_empty_bytes;
   122dc:	4b7a      	ldr	r3, [pc, #488]	; (124c8 <bytes_make_new+0x200>)
   122de:	e0ee      	b.n	124be <bytes_make_new+0x1f6>
    }

    if (MP_OBJ_IS_STR(args[0])) {
   122e0:	683b      	ldr	r3, [r7, #0]
   122e2:	681b      	ldr	r3, [r3, #0]
   122e4:	4618      	mov	r0, r3
   122e6:	f7ff fdf9 	bl	11edc <MP_OBJ_IS_QSTR>
   122ea:	4603      	mov	r3, r0
   122ec:	2b00      	cmp	r3, #0
   122ee:	d10d      	bne.n	1230c <bytes_make_new+0x44>
   122f0:	683b      	ldr	r3, [r7, #0]
   122f2:	681b      	ldr	r3, [r3, #0]
   122f4:	4618      	mov	r0, r3
   122f6:	f7ff fe03 	bl	11f00 <MP_OBJ_IS_OBJ>
   122fa:	4603      	mov	r3, r0
   122fc:	2b00      	cmp	r3, #0
   122fe:	d054      	beq.n	123aa <bytes_make_new+0xe2>
   12300:	683b      	ldr	r3, [r7, #0]
   12302:	681b      	ldr	r3, [r3, #0]
   12304:	681b      	ldr	r3, [r3, #0]
   12306:	4a71      	ldr	r2, [pc, #452]	; (124cc <bytes_make_new+0x204>)
   12308:	4293      	cmp	r3, r2
   1230a:	d14e      	bne.n	123aa <bytes_make_new+0xe2>
        if (n_args < 2 || n_args > 3) {
   1230c:	68bb      	ldr	r3, [r7, #8]
   1230e:	2b01      	cmp	r3, #1
   12310:	f240 80d2 	bls.w	124b8 <bytes_make_new+0x1f0>
   12314:	68bb      	ldr	r3, [r7, #8]
   12316:	2b03      	cmp	r3, #3
   12318:	f200 80ce 	bhi.w	124b8 <bytes_make_new+0x1f0>
            goto wrong_args;
        }
        GET_STR_DATA_LEN(args[0], str_data, str_len);
   1231c:	683b      	ldr	r3, [r7, #0]
   1231e:	681b      	ldr	r3, [r3, #0]
   12320:	4618      	mov	r0, r3
   12322:	f7ff fddb 	bl	11edc <MP_OBJ_IS_QSTR>
   12326:	4603      	mov	r3, r0
   12328:	2b00      	cmp	r3, #0
   1232a:	d00a      	beq.n	12342 <bytes_make_new+0x7a>
   1232c:	683b      	ldr	r3, [r7, #0]
   1232e:	681b      	ldr	r3, [r3, #0]
   12330:	089b      	lsrs	r3, r3, #2
   12332:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12336:	4611      	mov	r1, r2
   12338:	4618      	mov	r0, r3
   1233a:	f7ee ff67 	bl	120c <qstr_data>
   1233e:	6778      	str	r0, [r7, #116]	; 0x74
   12340:	e007      	b.n	12352 <bytes_make_new+0x8a>
   12342:	683b      	ldr	r3, [r7, #0]
   12344:	681b      	ldr	r3, [r3, #0]
   12346:	689b      	ldr	r3, [r3, #8]
   12348:	627b      	str	r3, [r7, #36]	; 0x24
   1234a:	683b      	ldr	r3, [r7, #0]
   1234c:	681b      	ldr	r3, [r3, #0]
   1234e:	68db      	ldr	r3, [r3, #12]
   12350:	677b      	str	r3, [r7, #116]	; 0x74
        GET_STR_HASH(args[0], str_hash);
   12352:	683b      	ldr	r3, [r7, #0]
   12354:	681b      	ldr	r3, [r3, #0]
   12356:	4618      	mov	r0, r3
   12358:	f7ff fdc0 	bl	11edc <MP_OBJ_IS_QSTR>
   1235c:	4603      	mov	r3, r0
   1235e:	2b00      	cmp	r3, #0
   12360:	d007      	beq.n	12372 <bytes_make_new+0xaa>
   12362:	683b      	ldr	r3, [r7, #0]
   12364:	681b      	ldr	r3, [r3, #0]
   12366:	089b      	lsrs	r3, r3, #2
   12368:	4618      	mov	r0, r3
   1236a:	f7ee ff25 	bl	11b8 <qstr_hash>
   1236e:	6738      	str	r0, [r7, #112]	; 0x70
   12370:	e003      	b.n	1237a <bytes_make_new+0xb2>
   12372:	683b      	ldr	r3, [r7, #0]
   12374:	681b      	ldr	r3, [r3, #0]
   12376:	685b      	ldr	r3, [r3, #4]
   12378:	673b      	str	r3, [r7, #112]	; 0x70
        if (str_hash == 0) {
   1237a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1237c:	2b00      	cmp	r3, #0
   1237e:	d105      	bne.n	1238c <bytes_make_new+0xc4>
            str_hash = qstr_compute_hash(str_data, str_len);
   12380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12382:	4619      	mov	r1, r3
   12384:	6f78      	ldr	r0, [r7, #116]	; 0x74
   12386:	f7ee fd47 	bl	e18 <qstr_compute_hash>
   1238a:	6738      	str	r0, [r7, #112]	; 0x70
        }
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
   1238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1238e:	461a      	mov	r2, r3
   12390:	2100      	movs	r1, #0
   12392:	484f      	ldr	r0, [pc, #316]	; (124d0 <bytes_make_new+0x208>)
   12394:	f002 fd8f 	bl	14eb6 <mp_obj_new_str_copy>
   12398:	6578      	str	r0, [r7, #84]	; 0x54
        o->data = str_data;
   1239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1239c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1239e:	60da      	str	r2, [r3, #12]
        o->hash = str_hash;
   123a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   123a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   123a4:	605a      	str	r2, [r3, #4]
        return MP_OBJ_FROM_PTR(o);
   123a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   123a8:	e089      	b.n	124be <bytes_make_new+0x1f6>
    }

    if (n_args > 1) {
   123aa:	68bb      	ldr	r3, [r7, #8]
   123ac:	2b01      	cmp	r3, #1
   123ae:	f200 8082 	bhi.w	124b6 <bytes_make_new+0x1ee>
        goto wrong_args;
    }

    if (MP_OBJ_IS_SMALL_INT(args[0])) {
   123b2:	683b      	ldr	r3, [r7, #0]
   123b4:	681b      	ldr	r3, [r3, #0]
   123b6:	4618      	mov	r0, r3
   123b8:	f7ff fd7e 	bl	11eb8 <MP_OBJ_IS_SMALL_INT>
   123bc:	4603      	mov	r3, r0
   123be:	2b00      	cmp	r3, #0
   123c0:	d01e      	beq.n	12400 <bytes_make_new+0x138>
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(args[0]);
   123c2:	683b      	ldr	r3, [r7, #0]
   123c4:	681b      	ldr	r3, [r3, #0]
   123c6:	105b      	asrs	r3, r3, #1
   123c8:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (len < 0) {
   123ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   123cc:	2b00      	cmp	r3, #0
   123ce:	da02      	bge.n	123d6 <bytes_make_new+0x10e>
            mp_raise_ValueError(NULL);
   123d0:	2000      	movs	r0, #0
   123d2:	f7fa fd68 	bl	cea6 <mp_raise_ValueError>
        }
        vstr_t vstr;
        vstr_init_len(&vstr, len);
   123d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   123d8:	f107 0314 	add.w	r3, r7, #20
   123dc:	4611      	mov	r1, r2
   123de:	4618      	mov	r0, r3
   123e0:	f7ee ffad 	bl	133e <vstr_init_len>
        memset(vstr.buf, 0, len);
   123e4:	69fb      	ldr	r3, [r7, #28]
   123e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   123e8:	2100      	movs	r1, #0
   123ea:	4618      	mov	r0, r3
   123ec:	f00a f952 	bl	1c694 <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   123f0:	f107 0314 	add.w	r3, r7, #20
   123f4:	4619      	mov	r1, r3
   123f6:	4836      	ldr	r0, [pc, #216]	; (124d0 <bytes_make_new+0x208>)
   123f8:	f002 fdbb 	bl	14f72 <mp_obj_new_str_from_vstr>
   123fc:	4603      	mov	r3, r0
   123fe:	e05e      	b.n	124be <bytes_make_new+0x1f6>
    }

    // check if argument has the buffer protocol
    mp_buffer_info_t bufinfo;
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
   12400:	683b      	ldr	r3, [r7, #0]
   12402:	681b      	ldr	r3, [r3, #0]
   12404:	f107 0148 	add.w	r1, r7, #72	; 0x48
   12408:	2201      	movs	r2, #1
   1240a:	4618      	mov	r0, r3
   1240c:	f7fb fd57 	bl	debe <mp_get_buffer>
   12410:	4603      	mov	r3, r0
   12412:	2b00      	cmp	r3, #0
   12414:	d007      	beq.n	12426 <bytes_make_new+0x15e>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
   12416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1241a:	4611      	mov	r1, r2
   1241c:	4618      	mov	r0, r3
   1241e:	f002 fe62 	bl	150e6 <mp_obj_new_bytes>
   12422:	4603      	mov	r3, r0
   12424:	e04b      	b.n	124be <bytes_make_new+0x1f6>
    }

    vstr_t vstr;
    // Try to create array of exact len if initializer len is known
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
   12426:	683b      	ldr	r3, [r7, #0]
   12428:	681b      	ldr	r3, [r3, #0]
   1242a:	4618      	mov	r0, r3
   1242c:	f7fb fcae 	bl	dd8c <mp_obj_len_maybe>
   12430:	66b8      	str	r0, [r7, #104]	; 0x68
    if (len_in == MP_OBJ_NULL) {
   12432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12434:	2b00      	cmp	r3, #0
   12436:	d106      	bne.n	12446 <bytes_make_new+0x17e>
        vstr_init(&vstr, 16);
   12438:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1243c:	2110      	movs	r1, #16
   1243e:	4618      	mov	r0, r3
   12440:	f7ee ff5c 	bl	12fc <vstr_init>
   12444:	e009      	b.n	1245a <bytes_make_new+0x192>
    } else {
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(len_in);
   12446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12448:	105b      	asrs	r3, r3, #1
   1244a:	667b      	str	r3, [r7, #100]	; 0x64
        vstr_init(&vstr, len);
   1244c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1244e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12452:	4611      	mov	r1, r2
   12454:	4618      	mov	r0, r3
   12456:	f7ee ff51 	bl	12fc <vstr_init>
    }

    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   1245a:	683b      	ldr	r3, [r7, #0]
   1245c:	681b      	ldr	r3, [r3, #0]
   1245e:	f107 0228 	add.w	r2, r7, #40	; 0x28
   12462:	4611      	mov	r1, r2
   12464:	4618      	mov	r0, r3
   12466:	f7fa f9db 	bl	c820 <mp_getiter>
   1246a:	6638      	str	r0, [r7, #96]	; 0x60
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1246c:	e014      	b.n	12498 <bytes_make_new+0x1d0>
        mp_int_t val = mp_obj_get_int(item);
   1246e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   12470:	f7fb fb16 	bl	daa0 <mp_obj_get_int>
   12474:	65b8      	str	r0, [r7, #88]	; 0x58
        #if MICROPY_FULL_CHECKS
        if (val < 0 || val > 255) {
   12476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12478:	2b00      	cmp	r3, #0
   1247a:	db02      	blt.n	12482 <bytes_make_new+0x1ba>
   1247c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1247e:	2bff      	cmp	r3, #255	; 0xff
   12480:	dd02      	ble.n	12488 <bytes_make_new+0x1c0>
            mp_raise_ValueError("bytes value out of range");
   12482:	4814      	ldr	r0, [pc, #80]	; (124d4 <bytes_make_new+0x20c>)
   12484:	f7fa fd0f 	bl	cea6 <mp_raise_ValueError>
        }
        #endif
        vstr_add_byte(&vstr, val);
   12488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1248a:	b2da      	uxtb	r2, r3
   1248c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12490:	4611      	mov	r1, r2
   12492:	4618      	mov	r0, r3
   12494:	f7ef f884 	bl	15a0 <vstr_add_byte>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12498:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1249a:	f7fa fa43 	bl	c924 <mp_iternext>
   1249e:	65f8      	str	r0, [r7, #92]	; 0x5c
   124a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   124a2:	2b04      	cmp	r3, #4
   124a4:	d1e3      	bne.n	1246e <bytes_make_new+0x1a6>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   124a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
   124aa:	4619      	mov	r1, r3
   124ac:	4808      	ldr	r0, [pc, #32]	; (124d0 <bytes_make_new+0x208>)
   124ae:	f002 fd60 	bl	14f72 <mp_obj_new_str_from_vstr>
   124b2:	4603      	mov	r3, r0
   124b4:	e003      	b.n	124be <bytes_make_new+0x1f6>
        goto wrong_args;
   124b6:	bf00      	nop

wrong_args:
    mp_raise_TypeError("wrong number of arguments");
   124b8:	4807      	ldr	r0, [pc, #28]	; (124d8 <bytes_make_new+0x210>)
   124ba:	f7fa fcff 	bl	cebc <mp_raise_TypeError>
}
   124be:	4618      	mov	r0, r3
   124c0:	3778      	adds	r7, #120	; 0x78
   124c2:	46bd      	mov	sp, r7
   124c4:	bd80      	pop	{r7, pc}
   124c6:	bf00      	nop
   124c8:	00023280 	.word	0x00023280
   124cc:	00023204 	.word	0x00023204
   124d0:	00023240 	.word	0x00023240
   124d4:	00022c6c 	.word	0x00022c6c
   124d8:	00022c88 	.word	0x00022c88

000124dc <find_subbytes>:

// like strstr but with specified length and allows \0 bytes
// TODO replace with something more efficient/standard
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
   124dc:	b580      	push	{r7, lr}
   124de:	b086      	sub	sp, #24
   124e0:	af00      	add	r7, sp, #0
   124e2:	60f8      	str	r0, [r7, #12]
   124e4:	60b9      	str	r1, [r7, #8]
   124e6:	607a      	str	r2, [r7, #4]
   124e8:	603b      	str	r3, [r7, #0]
    if (hlen >= nlen) {
   124ea:	68ba      	ldr	r2, [r7, #8]
   124ec:	683b      	ldr	r3, [r7, #0]
   124ee:	429a      	cmp	r2, r3
   124f0:	d328      	bcc.n	12544 <find_subbytes+0x68>
        size_t str_index, str_index_end;
        if (direction > 0) {
   124f2:	6a3b      	ldr	r3, [r7, #32]
   124f4:	2b00      	cmp	r3, #0
   124f6:	dd06      	ble.n	12506 <find_subbytes+0x2a>
            str_index = 0;
   124f8:	2300      	movs	r3, #0
   124fa:	617b      	str	r3, [r7, #20]
            str_index_end = hlen - nlen;
   124fc:	68ba      	ldr	r2, [r7, #8]
   124fe:	683b      	ldr	r3, [r7, #0]
   12500:	1ad3      	subs	r3, r2, r3
   12502:	613b      	str	r3, [r7, #16]
   12504:	e005      	b.n	12512 <find_subbytes+0x36>
        } else {
            str_index = hlen - nlen;
   12506:	68ba      	ldr	r2, [r7, #8]
   12508:	683b      	ldr	r3, [r7, #0]
   1250a:	1ad3      	subs	r3, r2, r3
   1250c:	617b      	str	r3, [r7, #20]
            str_index_end = 0;
   1250e:	2300      	movs	r3, #0
   12510:	613b      	str	r3, [r7, #16]
        }
        for (;;) {
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   12512:	68fa      	ldr	r2, [r7, #12]
   12514:	697b      	ldr	r3, [r7, #20]
   12516:	4413      	add	r3, r2
   12518:	683a      	ldr	r2, [r7, #0]
   1251a:	6879      	ldr	r1, [r7, #4]
   1251c:	4618      	mov	r0, r3
   1251e:	f00a f904 	bl	1c72a <memcmp>
   12522:	4603      	mov	r3, r0
   12524:	2b00      	cmp	r3, #0
   12526:	d103      	bne.n	12530 <find_subbytes+0x54>
                //found
                return haystack + str_index;
   12528:	68fa      	ldr	r2, [r7, #12]
   1252a:	697b      	ldr	r3, [r7, #20]
   1252c:	4413      	add	r3, r2
   1252e:	e00a      	b.n	12546 <find_subbytes+0x6a>
            }
            if (str_index == str_index_end) {
   12530:	697a      	ldr	r2, [r7, #20]
   12532:	693b      	ldr	r3, [r7, #16]
   12534:	429a      	cmp	r2, r3
   12536:	d004      	beq.n	12542 <find_subbytes+0x66>
                //not found
                break;
            }
            str_index += direction;
   12538:	6a3b      	ldr	r3, [r7, #32]
   1253a:	697a      	ldr	r2, [r7, #20]
   1253c:	4413      	add	r3, r2
   1253e:	617b      	str	r3, [r7, #20]
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   12540:	e7e7      	b.n	12512 <find_subbytes+0x36>
                break;
   12542:	bf00      	nop
        }
    }
    return NULL;
   12544:	2300      	movs	r3, #0
}
   12546:	4618      	mov	r0, r3
   12548:	3718      	adds	r7, #24
   1254a:	46bd      	mov	sp, r7
   1254c:	bd80      	pop	{r7, pc}

0001254e <mp_obj_str_binary_op>:

// Note: this function is used to check if an object is a str or bytes, which
// works because both those types use it as their binary_op method.  Revisit
// MP_OBJ_IS_STR_OR_BYTES if this fact changes.
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   1254e:	b580      	push	{r7, lr}
   12550:	b09c      	sub	sp, #112	; 0x70
   12552:	af02      	add	r7, sp, #8
   12554:	60f8      	str	r0, [r7, #12]
   12556:	60b9      	str	r1, [r7, #8]
   12558:	607a      	str	r2, [r7, #4]
    // check for modulo
    if (op == MP_BINARY_OP_MODULO) {
   1255a:	68fb      	ldr	r3, [r7, #12]
   1255c:	2b1f      	cmp	r3, #31
   1255e:	d130      	bne.n	125c2 <mp_obj_str_binary_op+0x74>
        mp_obj_t *args = &rhs_in;
   12560:	1d3b      	adds	r3, r7, #4
   12562:	64bb      	str	r3, [r7, #72]	; 0x48
        size_t n_args = 1;
   12564:	2301      	movs	r3, #1
   12566:	647b      	str	r3, [r7, #68]	; 0x44
        mp_obj_t dict = MP_OBJ_NULL;
   12568:	2300      	movs	r3, #0
   1256a:	667b      	str	r3, [r7, #100]	; 0x64
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   1256c:	687b      	ldr	r3, [r7, #4]
   1256e:	4618      	mov	r0, r3
   12570:	f7ff fcc6 	bl	11f00 <MP_OBJ_IS_OBJ>
   12574:	4603      	mov	r3, r0
   12576:	2b00      	cmp	r3, #0
   12578:	d00d      	beq.n	12596 <mp_obj_str_binary_op+0x48>
   1257a:	687b      	ldr	r3, [r7, #4]
   1257c:	681b      	ldr	r3, [r3, #0]
   1257e:	4aad      	ldr	r2, [pc, #692]	; (12834 <mp_obj_str_binary_op+0x2e6>)
   12580:	4293      	cmp	r3, r2
   12582:	d108      	bne.n	12596 <mp_obj_str_binary_op+0x48>
            // TODO: Support tuple subclasses?
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   12584:	687b      	ldr	r3, [r7, #4]
   12586:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1258a:	f107 0144 	add.w	r1, r7, #68	; 0x44
   1258e:	4618      	mov	r0, r3
   12590:	f003 fa84 	bl	15a9c <mp_obj_tuple_get>
   12594:	e00d      	b.n	125b2 <mp_obj_str_binary_op+0x64>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   12596:	687b      	ldr	r3, [r7, #4]
   12598:	4618      	mov	r0, r3
   1259a:	f7ff fcb1 	bl	11f00 <MP_OBJ_IS_OBJ>
   1259e:	4603      	mov	r3, r0
   125a0:	2b00      	cmp	r3, #0
   125a2:	d006      	beq.n	125b2 <mp_obj_str_binary_op+0x64>
   125a4:	687b      	ldr	r3, [r7, #4]
   125a6:	681b      	ldr	r3, [r3, #0]
   125a8:	4aa3      	ldr	r2, [pc, #652]	; (12838 <mp_obj_str_binary_op+0x2ea>)
   125aa:	4293      	cmp	r3, r2
   125ac:	d101      	bne.n	125b2 <mp_obj_str_binary_op+0x64>
            dict = rhs_in;
   125ae:	687b      	ldr	r3, [r7, #4]
   125b0:	667b      	str	r3, [r7, #100]	; 0x64
        }
        return str_modulo_format(lhs_in, n_args, args, dict);
   125b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
   125b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   125b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   125b8:	68b8      	ldr	r0, [r7, #8]
   125ba:	f001 fd93 	bl	140e4 <str_modulo_format>
   125be:	4603      	mov	r3, r0
   125c0:	e133      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
    }

    // from now on we need lhs type and data, so extract them
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   125c2:	68b8      	ldr	r0, [r7, #8]
   125c4:	f7fb f890 	bl	d6e8 <mp_obj_get_type>
   125c8:	6538      	str	r0, [r7, #80]	; 0x50
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   125ca:	68b8      	ldr	r0, [r7, #8]
   125cc:	f7ff fc86 	bl	11edc <MP_OBJ_IS_QSTR>
   125d0:	4603      	mov	r3, r0
   125d2:	2b00      	cmp	r3, #0
   125d4:	d009      	beq.n	125ea <mp_obj_str_binary_op+0x9c>
   125d6:	68bb      	ldr	r3, [r7, #8]
   125d8:	089b      	lsrs	r3, r3, #2
   125da:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   125de:	4611      	mov	r1, r2
   125e0:	4618      	mov	r0, r3
   125e2:	f7ee fe13 	bl	120c <qstr_data>
   125e6:	6638      	str	r0, [r7, #96]	; 0x60
   125e8:	e005      	b.n	125f6 <mp_obj_str_binary_op+0xa8>
   125ea:	68bb      	ldr	r3, [r7, #8]
   125ec:	689b      	ldr	r3, [r3, #8]
   125ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   125f0:	68bb      	ldr	r3, [r7, #8]
   125f2:	68db      	ldr	r3, [r3, #12]
   125f4:	663b      	str	r3, [r7, #96]	; 0x60

    // check for multiply
    if (op == MP_BINARY_OP_MULTIPLY) {
   125f6:	68fb      	ldr	r3, [r7, #12]
   125f8:	2b1c      	cmp	r3, #28
   125fa:	d135      	bne.n	12668 <mp_obj_str_binary_op+0x11a>
        mp_int_t n;
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   125fc:	687b      	ldr	r3, [r7, #4]
   125fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12602:	4611      	mov	r1, r2
   12604:	4618      	mov	r0, r3
   12606:	f7fb faa7 	bl	db58 <mp_obj_get_int_maybe>
   1260a:	4603      	mov	r3, r0
   1260c:	f083 0301 	eor.w	r3, r3, #1
   12610:	b2db      	uxtb	r3, r3
   12612:	2b00      	cmp	r3, #0
   12614:	d001      	beq.n	1261a <mp_obj_str_binary_op+0xcc>
            return MP_OBJ_NULL; // op not supported
   12616:	2300      	movs	r3, #0
   12618:	e107      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
        }
        if (n <= 0) {
   1261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1261c:	2b00      	cmp	r3, #0
   1261e:	dc07      	bgt.n	12630 <mp_obj_str_binary_op+0xe2>
            if (lhs_type == &mp_type_str) {
   12620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12622:	4a86      	ldr	r2, [pc, #536]	; (1283c <mp_obj_str_binary_op+0x2ee>)
   12624:	4293      	cmp	r3, r2
   12626:	d101      	bne.n	1262c <mp_obj_str_binary_op+0xde>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   12628:	2306      	movs	r3, #6
   1262a:	e0fe      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
            } else {
                return mp_const_empty_bytes;
   1262c:	4b84      	ldr	r3, [pc, #528]	; (12840 <mp_obj_str_binary_op+0x2f2>)
   1262e:	e0fc      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
            }
        }
        vstr_t vstr;
        vstr_init_len(&vstr, lhs_len * n);
   12630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12634:	fb02 f203 	mul.w	r2, r2, r3
   12638:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1263c:	4611      	mov	r1, r2
   1263e:	4618      	mov	r0, r3
   12640:	f7ee fe7d 	bl	133e <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   12644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12648:	4619      	mov	r1, r3
   1264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1264c:	9300      	str	r3, [sp, #0]
   1264e:	460b      	mov	r3, r1
   12650:	2101      	movs	r1, #1
   12652:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12654:	f004 fe94 	bl	17380 <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12658:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1265c:	4619      	mov	r1, r3
   1265e:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12660:	f002 fc87 	bl	14f72 <mp_obj_new_str_from_vstr>
   12664:	4603      	mov	r3, r0
   12666:	e0e0      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
    // easy to "fix" this with a bit of extra logic below, but it costs code
    // size and execution time so we don't.

    const byte *rhs_data;
    size_t rhs_len;
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   12668:	687b      	ldr	r3, [r7, #4]
   1266a:	4618      	mov	r0, r3
   1266c:	f7fb f83c 	bl	d6e8 <mp_obj_get_type>
   12670:	4602      	mov	r2, r0
   12672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12674:	429a      	cmp	r2, r3
   12676:	d11b      	bne.n	126b0 <mp_obj_str_binary_op+0x162>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   12678:	687b      	ldr	r3, [r7, #4]
   1267a:	4618      	mov	r0, r3
   1267c:	f7ff fc2e 	bl	11edc <MP_OBJ_IS_QSTR>
   12680:	4603      	mov	r3, r0
   12682:	2b00      	cmp	r3, #0
   12684:	d009      	beq.n	1269a <mp_obj_str_binary_op+0x14c>
   12686:	687b      	ldr	r3, [r7, #4]
   12688:	089b      	lsrs	r3, r3, #2
   1268a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1268e:	4611      	mov	r1, r2
   12690:	4618      	mov	r0, r3
   12692:	f7ee fdbb 	bl	120c <qstr_data>
   12696:	6578      	str	r0, [r7, #84]	; 0x54
   12698:	e005      	b.n	126a6 <mp_obj_str_binary_op+0x158>
   1269a:	687b      	ldr	r3, [r7, #4]
   1269c:	689b      	ldr	r3, [r3, #8]
   1269e:	62fb      	str	r3, [r7, #44]	; 0x2c
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	68db      	ldr	r3, [r3, #12]
   126a4:	657b      	str	r3, [r7, #84]	; 0x54
        rhs_data = rhs_data_;
   126a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   126a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = rhs_len_;
   126aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   126ac:	65bb      	str	r3, [r7, #88]	; 0x58
   126ae:	e01b      	b.n	126e8 <mp_obj_str_binary_op+0x19a>
    } else if (lhs_type == &mp_type_bytes) {
   126b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   126b2:	4a64      	ldr	r2, [pc, #400]	; (12844 <mp_obj_str_binary_op+0x2f6>)
   126b4:	4293      	cmp	r3, r2
   126b6:	d113      	bne.n	126e0 <mp_obj_str_binary_op+0x192>
        mp_buffer_info_t bufinfo;
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   126b8:	687b      	ldr	r3, [r7, #4]
   126ba:	f107 0120 	add.w	r1, r7, #32
   126be:	2201      	movs	r2, #1
   126c0:	4618      	mov	r0, r3
   126c2:	f7fb fbfc 	bl	debe <mp_get_buffer>
   126c6:	4603      	mov	r3, r0
   126c8:	f083 0301 	eor.w	r3, r3, #1
   126cc:	b2db      	uxtb	r3, r3
   126ce:	2b00      	cmp	r3, #0
   126d0:	d001      	beq.n	126d6 <mp_obj_str_binary_op+0x188>
            return MP_OBJ_NULL; // op not supported
   126d2:	2300      	movs	r3, #0
   126d4:	e0a9      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
        }
        rhs_data = bufinfo.buf;
   126d6:	6a3b      	ldr	r3, [r7, #32]
   126d8:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = bufinfo.len;
   126da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   126dc:	65bb      	str	r3, [r7, #88]	; 0x58
   126de:	e003      	b.n	126e8 <mp_obj_str_binary_op+0x19a>
    } else {
        // LHS is str and RHS has an incompatible type
        // (except if operation is EQUAL, but that's handled by mp_obj_equal)
        bad_implicit_conversion(rhs_in);
   126e0:	687b      	ldr	r3, [r7, #4]
   126e2:	4618      	mov	r0, r3
   126e4:	f002 fd97 	bl	15216 <bad_implicit_conversion>
    }

    switch (op) {
   126e8:	68fb      	ldr	r3, [r7, #12]
   126ea:	2b22      	cmp	r3, #34	; 0x22
   126ec:	f200 809c 	bhi.w	12828 <mp_obj_str_binary_op+0x2da>
   126f0:	a201      	add	r2, pc, #4	; (adr r2, 126f8 <mp_obj_str_binary_op+0x1aa>)
   126f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   126f6:	bf00      	nop
   126f8:	0001280d 	.word	0x0001280d
   126fc:	0001280d 	.word	0x0001280d
   12700:	0001280d 	.word	0x0001280d
   12704:	0001280d 	.word	0x0001280d
   12708:	0001280d 	.word	0x0001280d
   1270c:	00012829 	.word	0x00012829
   12710:	00012829 	.word	0x00012829
   12714:	00012829 	.word	0x00012829
   12718:	00012829 	.word	0x00012829
   1271c:	00012829 	.word	0x00012829
   12720:	00012829 	.word	0x00012829
   12724:	00012829 	.word	0x00012829
   12728:	00012829 	.word	0x00012829
   1272c:	00012829 	.word	0x00012829
   12730:	00012785 	.word	0x00012785
   12734:	00012829 	.word	0x00012829
   12738:	00012829 	.word	0x00012829
   1273c:	00012829 	.word	0x00012829
   12740:	00012829 	.word	0x00012829
   12744:	00012829 	.word	0x00012829
   12748:	00012829 	.word	0x00012829
   1274c:	00012829 	.word	0x00012829
   12750:	00012829 	.word	0x00012829
   12754:	00012829 	.word	0x00012829
   12758:	00012829 	.word	0x00012829
   1275c:	00012829 	.word	0x00012829
   12760:	00012785 	.word	0x00012785
   12764:	00012829 	.word	0x00012829
   12768:	00012829 	.word	0x00012829
   1276c:	00012829 	.word	0x00012829
   12770:	00012829 	.word	0x00012829
   12774:	00012829 	.word	0x00012829
   12778:	00012829 	.word	0x00012829
   1277c:	00012829 	.word	0x00012829
   12780:	000127e7 	.word	0x000127e7
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   12784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12786:	2b00      	cmp	r3, #0
   12788:	d109      	bne.n	1279e <mp_obj_str_binary_op+0x250>
   1278a:	687b      	ldr	r3, [r7, #4]
   1278c:	4618      	mov	r0, r3
   1278e:	f7fa ffab 	bl	d6e8 <mp_obj_get_type>
   12792:	4602      	mov	r2, r0
   12794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12796:	429a      	cmp	r2, r3
   12798:	d101      	bne.n	1279e <mp_obj_str_binary_op+0x250>
                return rhs_in;
   1279a:	687b      	ldr	r3, [r7, #4]
   1279c:	e045      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
            }
            if (rhs_len == 0) {
   1279e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   127a0:	2b00      	cmp	r3, #0
   127a2:	d101      	bne.n	127a8 <mp_obj_str_binary_op+0x25a>
                return lhs_in;
   127a4:	68bb      	ldr	r3, [r7, #8]
   127a6:	e040      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
            }

            vstr_t vstr;
            vstr_init_len(&vstr, lhs_len + rhs_len);
   127a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   127aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   127ac:	441a      	add	r2, r3
   127ae:	f107 0310 	add.w	r3, r7, #16
   127b2:	4611      	mov	r1, r2
   127b4:	4618      	mov	r0, r3
   127b6:	f7ee fdc2 	bl	133e <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   127ba:	69bb      	ldr	r3, [r7, #24]
   127bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   127be:	6e39      	ldr	r1, [r7, #96]	; 0x60
   127c0:	4618      	mov	r0, r3
   127c2:	f009 fecd 	bl	1c560 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   127c6:	69ba      	ldr	r2, [r7, #24]
   127c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   127ca:	4413      	add	r3, r2
   127cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
   127ce:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   127d0:	4618      	mov	r0, r3
   127d2:	f009 fec5 	bl	1c560 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   127d6:	f107 0310 	add.w	r3, r7, #16
   127da:	4619      	mov	r1, r3
   127dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
   127de:	f002 fbc8 	bl	14f72 <mp_obj_new_str_from_vstr>
   127e2:	4603      	mov	r3, r0
   127e4:	e021      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
        }

        case MP_BINARY_OP_CONTAINS:
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   127e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   127e8:	2301      	movs	r3, #1
   127ea:	9300      	str	r3, [sp, #0]
   127ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   127ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   127f0:	6e38      	ldr	r0, [r7, #96]	; 0x60
   127f2:	f7ff fe73 	bl	124dc <find_subbytes>
   127f6:	4603      	mov	r3, r0
   127f8:	2b00      	cmp	r3, #0
   127fa:	bf14      	ite	ne
   127fc:	2301      	movne	r3, #1
   127fe:	2300      	moveq	r3, #0
   12800:	b2db      	uxtb	r3, r3
   12802:	4618      	mov	r0, r3
   12804:	f7ff fb8e 	bl	11f24 <mp_obj_new_bool>
   12808:	4603      	mov	r3, r0
   1280a:	e00e      	b.n	1282a <mp_obj_str_binary_op+0x2dc>
        case MP_BINARY_OP_EQUAL: // This will be passed only for bytes, str is dealt with in mp_obj_equal()
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   1280c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1280e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12810:	9300      	str	r3, [sp, #0]
   12812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12814:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12816:	68f8      	ldr	r0, [r7, #12]
   12818:	f004 fe15 	bl	17446 <mp_seq_cmp_bytes>
   1281c:	4603      	mov	r3, r0
   1281e:	4618      	mov	r0, r3
   12820:	f7ff fb80 	bl	11f24 <mp_obj_new_bool>
   12824:	4603      	mov	r3, r0
   12826:	e000      	b.n	1282a <mp_obj_str_binary_op+0x2dc>

        default:
            return MP_OBJ_NULL; // op not supported
   12828:	2300      	movs	r3, #0
    }
}
   1282a:	4618      	mov	r0, r3
   1282c:	3768      	adds	r7, #104	; 0x68
   1282e:	46bd      	mov	sp, r7
   12830:	bd80      	pop	{r7, pc}
   12832:	bf00      	nop
   12834:	00023488 	.word	0x00023488
   12838:	000217b4 	.word	0x000217b4
   1283c:	00023204 	.word	0x00023204
   12840:	00023280 	.word	0x00023280
   12844:	00023240 	.word	0x00023240

00012848 <str_index_to_ptr>:

#if !MICROPY_PY_BUILTINS_STR_UNICODE
// objstrunicode defines own version
const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, bool is_slice) {
   12848:	b580      	push	{r7, lr}
   1284a:	b086      	sub	sp, #24
   1284c:	af00      	add	r7, sp, #0
   1284e:	60f8      	str	r0, [r7, #12]
   12850:	60b9      	str	r1, [r7, #8]
   12852:	607a      	str	r2, [r7, #4]
   12854:	603b      	str	r3, [r7, #0]
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
   12856:	f897 3020 	ldrb.w	r3, [r7, #32]
   1285a:	683a      	ldr	r2, [r7, #0]
   1285c:	6879      	ldr	r1, [r7, #4]
   1285e:	68f8      	ldr	r0, [r7, #12]
   12860:	f7fb fa0a 	bl	dc78 <mp_get_index>
   12864:	6178      	str	r0, [r7, #20]
    return self_data + index_val;
   12866:	68ba      	ldr	r2, [r7, #8]
   12868:	697b      	ldr	r3, [r7, #20]
   1286a:	4413      	add	r3, r2
}
   1286c:	4618      	mov	r0, r3
   1286e:	3718      	adds	r7, #24
   12870:	46bd      	mov	sp, r7
   12872:	bd80      	pop	{r7, pc}

00012874 <bytes_subscr>:
#endif

// This is used for both bytes and 8-bit strings. This is not used for unicode strings.
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   12874:	b580      	push	{r7, lr}
   12876:	b088      	sub	sp, #32
   12878:	af00      	add	r7, sp, #0
   1287a:	60f8      	str	r0, [r7, #12]
   1287c:	60b9      	str	r1, [r7, #8]
   1287e:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   12880:	68f8      	ldr	r0, [r7, #12]
   12882:	f7fa ff31 	bl	d6e8 <mp_obj_get_type>
   12886:	61b8      	str	r0, [r7, #24]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   12888:	68f8      	ldr	r0, [r7, #12]
   1288a:	f7ff fb27 	bl	11edc <MP_OBJ_IS_QSTR>
   1288e:	4603      	mov	r3, r0
   12890:	2b00      	cmp	r3, #0
   12892:	d009      	beq.n	128a8 <bytes_subscr+0x34>
   12894:	68fb      	ldr	r3, [r7, #12]
   12896:	089b      	lsrs	r3, r3, #2
   12898:	f107 0210 	add.w	r2, r7, #16
   1289c:	4611      	mov	r1, r2
   1289e:	4618      	mov	r0, r3
   128a0:	f7ee fcb4 	bl	120c <qstr_data>
   128a4:	61f8      	str	r0, [r7, #28]
   128a6:	e005      	b.n	128b4 <bytes_subscr+0x40>
   128a8:	68fb      	ldr	r3, [r7, #12]
   128aa:	689b      	ldr	r3, [r3, #8]
   128ac:	613b      	str	r3, [r7, #16]
   128ae:	68fb      	ldr	r3, [r7, #12]
   128b0:	68db      	ldr	r3, [r3, #12]
   128b2:	61fb      	str	r3, [r7, #28]
    if (value == MP_OBJ_SENTINEL) {
   128b4:	687b      	ldr	r3, [r7, #4]
   128b6:	2b08      	cmp	r3, #8
   128b8:	d11b      	bne.n	128f2 <bytes_subscr+0x7e>
                mp_raise_NotImplementedError("only slices with step=1 (aka None) are supported");
            }
            return mp_obj_new_str_of_type(type, self_data + slice.start, slice.stop - slice.start);
        }
#endif
        size_t index_val = mp_get_index(type, self_len, index, false);
   128ba:	6939      	ldr	r1, [r7, #16]
   128bc:	2300      	movs	r3, #0
   128be:	68ba      	ldr	r2, [r7, #8]
   128c0:	69b8      	ldr	r0, [r7, #24]
   128c2:	f7fb f9d9 	bl	dc78 <mp_get_index>
   128c6:	6178      	str	r0, [r7, #20]
        // If we have unicode enabled the type will always be bytes, so take the short cut.
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
   128c8:	69bb      	ldr	r3, [r7, #24]
   128ca:	4a0c      	ldr	r2, [pc, #48]	; (128fc <bytes_subscr+0x88>)
   128cc:	4293      	cmp	r3, r2
   128ce:	d107      	bne.n	128e0 <bytes_subscr+0x6c>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
   128d0:	69fa      	ldr	r2, [r7, #28]
   128d2:	697b      	ldr	r3, [r7, #20]
   128d4:	4413      	add	r3, r2
   128d6:	781b      	ldrb	r3, [r3, #0]
   128d8:	005b      	lsls	r3, r3, #1
   128da:	f043 0301 	orr.w	r3, r3, #1
   128de:	e009      	b.n	128f4 <bytes_subscr+0x80>
        } else {
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
   128e0:	69fa      	ldr	r2, [r7, #28]
   128e2:	697b      	ldr	r3, [r7, #20]
   128e4:	4413      	add	r3, r2
   128e6:	2101      	movs	r1, #1
   128e8:	4618      	mov	r0, r3
   128ea:	f002 fb31 	bl	14f50 <mp_obj_new_str_via_qstr>
   128ee:	4603      	mov	r3, r0
   128f0:	e000      	b.n	128f4 <bytes_subscr+0x80>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   128f2:	2300      	movs	r3, #0
    }
}
   128f4:	4618      	mov	r0, r3
   128f6:	3720      	adds	r7, #32
   128f8:	46bd      	mov	sp, r7
   128fa:	bd80      	pop	{r7, pc}
   128fc:	00023240 	.word	0x00023240

00012900 <str_join>:

STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
   12900:	b590      	push	{r4, r7, lr}
   12902:	b093      	sub	sp, #76	; 0x4c
   12904:	af00      	add	r7, sp, #0
   12906:	6078      	str	r0, [r7, #4]
   12908:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
   1290a:	6878      	ldr	r0, [r7, #4]
   1290c:	f7ff fae6 	bl	11edc <MP_OBJ_IS_QSTR>
   12910:	4603      	mov	r3, r0
   12912:	2b00      	cmp	r3, #0
   12914:	d112      	bne.n	1293c <str_join+0x3c>
   12916:	6878      	ldr	r0, [r7, #4]
   12918:	f7ff faf2 	bl	11f00 <MP_OBJ_IS_OBJ>
   1291c:	4603      	mov	r3, r0
   1291e:	2b00      	cmp	r3, #0
   12920:	d005      	beq.n	1292e <str_join+0x2e>
   12922:	687b      	ldr	r3, [r7, #4]
   12924:	681b      	ldr	r3, [r3, #0]
   12926:	699b      	ldr	r3, [r3, #24]
   12928:	4a78      	ldr	r2, [pc, #480]	; (12b0c <str_join+0x20c>)
   1292a:	4293      	cmp	r3, r2
   1292c:	d006      	beq.n	1293c <str_join+0x3c>
   1292e:	4b78      	ldr	r3, [pc, #480]	; (12b10 <str_join+0x210>)
   12930:	4a78      	ldr	r2, [pc, #480]	; (12b14 <str_join+0x214>)
   12932:	f240 11bb 	movw	r1, #443	; 0x1bb
   12936:	4878      	ldr	r0, [pc, #480]	; (12b18 <str_join+0x218>)
   12938:	f008 fc54 	bl	1b1e4 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   1293c:	6878      	ldr	r0, [r7, #4]
   1293e:	f7fa fed3 	bl	d6e8 <mp_obj_get_type>
   12942:	62b8      	str	r0, [r7, #40]	; 0x28

    // get separation string
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
   12944:	6878      	ldr	r0, [r7, #4]
   12946:	f7ff fac9 	bl	11edc <MP_OBJ_IS_QSTR>
   1294a:	4603      	mov	r3, r0
   1294c:	2b00      	cmp	r3, #0
   1294e:	d009      	beq.n	12964 <str_join+0x64>
   12950:	687b      	ldr	r3, [r7, #4]
   12952:	089b      	lsrs	r3, r3, #2
   12954:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12958:	4611      	mov	r1, r2
   1295a:	4618      	mov	r0, r3
   1295c:	f7ee fc56 	bl	120c <qstr_data>
   12960:	6478      	str	r0, [r7, #68]	; 0x44
   12962:	e005      	b.n	12970 <str_join+0x70>
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	689b      	ldr	r3, [r3, #8]
   12968:	627b      	str	r3, [r7, #36]	; 0x24
   1296a:	687b      	ldr	r3, [r7, #4]
   1296c:	68db      	ldr	r3, [r3, #12]
   1296e:	647b      	str	r3, [r7, #68]	; 0x44

    // process args
    size_t seq_len;
    mp_obj_t *seq_items;

    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
   12970:	683b      	ldr	r3, [r7, #0]
   12972:	4618      	mov	r0, r3
   12974:	f7ff fac4 	bl	11f00 <MP_OBJ_IS_OBJ>
   12978:	4603      	mov	r3, r0
   1297a:	f083 0301 	eor.w	r3, r3, #1
   1297e:	b2db      	uxtb	r3, r3
   12980:	2b00      	cmp	r3, #0
   12982:	d104      	bne.n	1298e <str_join+0x8e>
   12984:	683b      	ldr	r3, [r7, #0]
   12986:	681b      	ldr	r3, [r3, #0]
   12988:	4a64      	ldr	r2, [pc, #400]	; (12b1c <str_join+0x21c>)
   1298a:	4293      	cmp	r3, r2
   1298c:	d017      	beq.n	129be <str_join+0xbe>
   1298e:	683b      	ldr	r3, [r7, #0]
   12990:	4618      	mov	r0, r3
   12992:	f7ff fab5 	bl	11f00 <MP_OBJ_IS_OBJ>
   12996:	4603      	mov	r3, r0
   12998:	f083 0301 	eor.w	r3, r3, #1
   1299c:	b2db      	uxtb	r3, r3
   1299e:	2b00      	cmp	r3, #0
   129a0:	d104      	bne.n	129ac <str_join+0xac>
   129a2:	683b      	ldr	r3, [r7, #0]
   129a4:	681b      	ldr	r3, [r3, #0]
   129a6:	4a5e      	ldr	r2, [pc, #376]	; (12b20 <str_join+0x220>)
   129a8:	4293      	cmp	r3, r2
   129aa:	d008      	beq.n	129be <str_join+0xbe>
        // arg is not a list nor a tuple, try to convert it to a list
        // TODO: Try to optimize?
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
   129ac:	4b5b      	ldr	r3, [pc, #364]	; (12b1c <str_join+0x21c>)
   129ae:	68dc      	ldr	r4, [r3, #12]
   129b0:	463b      	mov	r3, r7
   129b2:	2200      	movs	r2, #0
   129b4:	2101      	movs	r1, #1
   129b6:	4859      	ldr	r0, [pc, #356]	; (12b1c <str_join+0x21c>)
   129b8:	47a0      	blx	r4
   129ba:	4603      	mov	r3, r0
   129bc:	603b      	str	r3, [r7, #0]
    }
    mp_obj_get_array(arg, &seq_len, &seq_items);
   129be:	683b      	ldr	r3, [r7, #0]
   129c0:	f107 021c 	add.w	r2, r7, #28
   129c4:	f107 0120 	add.w	r1, r7, #32
   129c8:	4618      	mov	r0, r3
   129ca:	f7fb f905 	bl	dbd8 <mp_obj_get_array>

    // count required length
    size_t required_len = 0;
   129ce:	2300      	movs	r3, #0
   129d0:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   129d2:	2300      	movs	r3, #0
   129d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   129d6:	e039      	b.n	12a4c <str_join+0x14c>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
   129d8:	69fa      	ldr	r2, [r7, #28]
   129da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   129dc:	009b      	lsls	r3, r3, #2
   129de:	4413      	add	r3, r2
   129e0:	681b      	ldr	r3, [r3, #0]
   129e2:	4618      	mov	r0, r3
   129e4:	f7fa fe80 	bl	d6e8 <mp_obj_get_type>
   129e8:	4602      	mov	r2, r0
   129ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   129ec:	429a      	cmp	r2, r3
   129ee:	d002      	beq.n	129f6 <str_join+0xf6>
            mp_raise_TypeError(
   129f0:	484c      	ldr	r0, [pc, #304]	; (12b24 <str_join+0x224>)
   129f2:	f7fa fa63 	bl	cebc <mp_raise_TypeError>
                "join expects a list of str/bytes objects consistent with self object");
        }
        if (i > 0) {
   129f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   129f8:	2b00      	cmp	r3, #0
   129fa:	d003      	beq.n	12a04 <str_join+0x104>
            required_len += sep_len;
   129fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12a00:	4413      	add	r3, r2
   12a02:	643b      	str	r3, [r7, #64]	; 0x40
        }
        GET_STR_LEN(seq_items[i], l);
   12a04:	69fa      	ldr	r2, [r7, #28]
   12a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12a08:	009b      	lsls	r3, r3, #2
   12a0a:	4413      	add	r3, r2
   12a0c:	681b      	ldr	r3, [r3, #0]
   12a0e:	4618      	mov	r0, r3
   12a10:	f7ff fa64 	bl	11edc <MP_OBJ_IS_QSTR>
   12a14:	4603      	mov	r3, r0
   12a16:	2b00      	cmp	r3, #0
   12a18:	d00a      	beq.n	12a30 <str_join+0x130>
   12a1a:	69fa      	ldr	r2, [r7, #28]
   12a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12a1e:	009b      	lsls	r3, r3, #2
   12a20:	4413      	add	r3, r2
   12a22:	681b      	ldr	r3, [r3, #0]
   12a24:	089b      	lsrs	r3, r3, #2
   12a26:	4618      	mov	r0, r3
   12a28:	f7ee fbd3 	bl	11d2 <qstr_len>
   12a2c:	63b8      	str	r0, [r7, #56]	; 0x38
   12a2e:	e006      	b.n	12a3e <str_join+0x13e>
   12a30:	69fa      	ldr	r2, [r7, #28]
   12a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12a34:	009b      	lsls	r3, r3, #2
   12a36:	4413      	add	r3, r2
   12a38:	681b      	ldr	r3, [r3, #0]
   12a3a:	689b      	ldr	r3, [r3, #8]
   12a3c:	63bb      	str	r3, [r7, #56]	; 0x38
        required_len += l;
   12a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12a42:	4413      	add	r3, r2
   12a44:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12a48:	3301      	adds	r3, #1
   12a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   12a4c:	6a3b      	ldr	r3, [r7, #32]
   12a4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12a50:	429a      	cmp	r2, r3
   12a52:	d3c1      	bcc.n	129d8 <str_join+0xd8>
    }

    // make joined string
    vstr_t vstr;
    vstr_init_len(&vstr, required_len);
   12a54:	f107 030c 	add.w	r3, r7, #12
   12a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
   12a5a:	4618      	mov	r0, r3
   12a5c:	f7ee fc6f 	bl	133e <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   12a60:	697b      	ldr	r3, [r7, #20]
   12a62:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12a64:	2300      	movs	r3, #0
   12a66:	633b      	str	r3, [r7, #48]	; 0x30
   12a68:	e040      	b.n	12aec <str_join+0x1ec>
        if (i > 0) {
   12a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12a6c:	2b00      	cmp	r3, #0
   12a6e:	d009      	beq.n	12a84 <str_join+0x184>
            memcpy(data, sep_str, sep_len);
   12a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12a72:	461a      	mov	r2, r3
   12a74:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12a76:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12a78:	f009 fd72 	bl	1c560 <memcpy>
            data += sep_len;
   12a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12a80:	4413      	add	r3, r2
   12a82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        GET_STR_DATA_LEN(seq_items[i], s, l);
   12a84:	69fa      	ldr	r2, [r7, #28]
   12a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12a88:	009b      	lsls	r3, r3, #2
   12a8a:	4413      	add	r3, r2
   12a8c:	681b      	ldr	r3, [r3, #0]
   12a8e:	4618      	mov	r0, r3
   12a90:	f7ff fa24 	bl	11edc <MP_OBJ_IS_QSTR>
   12a94:	4603      	mov	r3, r0
   12a96:	2b00      	cmp	r3, #0
   12a98:	d00d      	beq.n	12ab6 <str_join+0x1b6>
   12a9a:	69fa      	ldr	r2, [r7, #28]
   12a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12a9e:	009b      	lsls	r3, r3, #2
   12aa0:	4413      	add	r3, r2
   12aa2:	681b      	ldr	r3, [r3, #0]
   12aa4:	089b      	lsrs	r3, r3, #2
   12aa6:	f107 0208 	add.w	r2, r7, #8
   12aaa:	4611      	mov	r1, r2
   12aac:	4618      	mov	r0, r3
   12aae:	f7ee fbad 	bl	120c <qstr_data>
   12ab2:	62f8      	str	r0, [r7, #44]	; 0x2c
   12ab4:	e00d      	b.n	12ad2 <str_join+0x1d2>
   12ab6:	69fa      	ldr	r2, [r7, #28]
   12ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12aba:	009b      	lsls	r3, r3, #2
   12abc:	4413      	add	r3, r2
   12abe:	681b      	ldr	r3, [r3, #0]
   12ac0:	689b      	ldr	r3, [r3, #8]
   12ac2:	60bb      	str	r3, [r7, #8]
   12ac4:	69fa      	ldr	r2, [r7, #28]
   12ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12ac8:	009b      	lsls	r3, r3, #2
   12aca:	4413      	add	r3, r2
   12acc:	681b      	ldr	r3, [r3, #0]
   12ace:	68db      	ldr	r3, [r3, #12]
   12ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        memcpy(data, s, l);
   12ad2:	68bb      	ldr	r3, [r7, #8]
   12ad4:	461a      	mov	r2, r3
   12ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12ad8:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12ada:	f009 fd41 	bl	1c560 <memcpy>
        data += l;
   12ade:	68bb      	ldr	r3, [r7, #8]
   12ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12ae2:	4413      	add	r3, r2
   12ae4:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12ae8:	3301      	adds	r3, #1
   12aea:	633b      	str	r3, [r7, #48]	; 0x30
   12aec:	6a3b      	ldr	r3, [r7, #32]
   12aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12af0:	429a      	cmp	r2, r3
   12af2:	d3ba      	bcc.n	12a6a <str_join+0x16a>
    }

    // return joined string
    return mp_obj_new_str_from_vstr(self_type, &vstr);
   12af4:	f107 030c 	add.w	r3, r7, #12
   12af8:	4619      	mov	r1, r3
   12afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12afc:	f002 fa39 	bl	14f72 <mp_obj_new_str_from_vstr>
   12b00:	4603      	mov	r3, r0
}
   12b02:	4618      	mov	r0, r3
   12b04:	374c      	adds	r7, #76	; 0x4c
   12b06:	46bd      	mov	sp, r7
   12b08:	bd90      	pop	{r4, r7, pc}
   12b0a:	bf00      	nop
   12b0c:	0001254f 	.word	0x0001254f
   12b10:	00022ca4 	.word	0x00022ca4
   12b14:	000232b0 	.word	0x000232b0
   12b18:	00022d2c 	.word	0x00022d2c
   12b1c:	0002287c 	.word	0x0002287c
   12b20:	00023488 	.word	0x00023488
   12b24:	00022d40 	.word	0x00022d40

00012b28 <mp_obj_str_split>:
MP_DEFINE_CONST_FUN_OBJ_2(str_join_obj, str_join);

mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   12b28:	b580      	push	{r7, lr}
   12b2a:	b08e      	sub	sp, #56	; 0x38
   12b2c:	af00      	add	r7, sp, #0
   12b2e:	6078      	str	r0, [r7, #4]
   12b30:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12b32:	683b      	ldr	r3, [r7, #0]
   12b34:	681b      	ldr	r3, [r3, #0]
   12b36:	4618      	mov	r0, r3
   12b38:	f7fa fdd6 	bl	d6e8 <mp_obj_get_type>
   12b3c:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_int_t splits = -1;
   12b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b42:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t sep = mp_const_none;
   12b44:	4b7b      	ldr	r3, [pc, #492]	; (12d34 <mp_obj_str_split+0x20c>)
   12b46:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_args > 1) {
   12b48:	687b      	ldr	r3, [r7, #4]
   12b4a:	2b01      	cmp	r3, #1
   12b4c:	d90c      	bls.n	12b68 <mp_obj_str_split+0x40>
        sep = args[1];
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	685b      	ldr	r3, [r3, #4]
   12b52:	633b      	str	r3, [r7, #48]	; 0x30
        if (n_args > 2) {
   12b54:	687b      	ldr	r3, [r7, #4]
   12b56:	2b02      	cmp	r3, #2
   12b58:	d906      	bls.n	12b68 <mp_obj_str_split+0x40>
            splits = mp_obj_get_int(args[2]);
   12b5a:	683b      	ldr	r3, [r7, #0]
   12b5c:	3308      	adds	r3, #8
   12b5e:	681b      	ldr	r3, [r3, #0]
   12b60:	4618      	mov	r0, r3
   12b62:	f7fa ff9d 	bl	daa0 <mp_obj_get_int>
   12b66:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    mp_obj_t res = mp_obj_new_list(0, NULL);
   12b68:	2100      	movs	r1, #0
   12b6a:	2000      	movs	r0, #0
   12b6c:	f7fe fd35 	bl	115da <mp_obj_new_list>
   12b70:	6278      	str	r0, [r7, #36]	; 0x24
    GET_STR_DATA_LEN(args[0], s, len);
   12b72:	683b      	ldr	r3, [r7, #0]
   12b74:	681b      	ldr	r3, [r3, #0]
   12b76:	4618      	mov	r0, r3
   12b78:	f7ff f9b0 	bl	11edc <MP_OBJ_IS_QSTR>
   12b7c:	4603      	mov	r3, r0
   12b7e:	2b00      	cmp	r3, #0
   12b80:	d00a      	beq.n	12b98 <mp_obj_str_split+0x70>
   12b82:	683b      	ldr	r3, [r7, #0]
   12b84:	681b      	ldr	r3, [r3, #0]
   12b86:	089b      	lsrs	r3, r3, #2
   12b88:	f107 0210 	add.w	r2, r7, #16
   12b8c:	4611      	mov	r1, r2
   12b8e:	4618      	mov	r0, r3
   12b90:	f7ee fb3c 	bl	120c <qstr_data>
   12b94:	62f8      	str	r0, [r7, #44]	; 0x2c
   12b96:	e007      	b.n	12ba8 <mp_obj_str_split+0x80>
   12b98:	683b      	ldr	r3, [r7, #0]
   12b9a:	681b      	ldr	r3, [r3, #0]
   12b9c:	689b      	ldr	r3, [r3, #8]
   12b9e:	613b      	str	r3, [r7, #16]
   12ba0:	683b      	ldr	r3, [r7, #0]
   12ba2:	681b      	ldr	r3, [r3, #0]
   12ba4:	68db      	ldr	r3, [r3, #12]
   12ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte *top = s + len;
   12ba8:	693b      	ldr	r3, [r7, #16]
   12baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12bac:	4413      	add	r3, r2
   12bae:	623b      	str	r3, [r7, #32]

    if (sep == mp_const_none) {
   12bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12bb2:	4a60      	ldr	r2, [pc, #384]	; (12d34 <mp_obj_str_split+0x20c>)
   12bb4:	4293      	cmp	r3, r2
   12bb6:	d167      	bne.n	12c88 <mp_obj_str_split+0x160>
        // sep not given, so separate on whitespace

        // Initial whitespace is not counted as split, so we pre-do it
        while (s < top && unichar_isspace(*s)) s++;
   12bb8:	e002      	b.n	12bc0 <mp_obj_str_split+0x98>
   12bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12bbc:	3301      	adds	r3, #1
   12bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   12bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12bc2:	6a3b      	ldr	r3, [r7, #32]
   12bc4:	429a      	cmp	r2, r3
   12bc6:	d244      	bcs.n	12c52 <mp_obj_str_split+0x12a>
   12bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12bca:	781b      	ldrb	r3, [r3, #0]
   12bcc:	4618      	mov	r0, r3
   12bce:	f7ef fbcd 	bl	236c <unichar_isspace>
   12bd2:	4603      	mov	r3, r0
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	d1f0      	bne.n	12bba <mp_obj_str_split+0x92>
        while (s < top && splits != 0) {
   12bd8:	e03b      	b.n	12c52 <mp_obj_str_split+0x12a>
            const byte *start = s;
   12bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12bdc:	61fb      	str	r3, [r7, #28]
            while (s < top && !unichar_isspace(*s)) s++;
   12bde:	e002      	b.n	12be6 <mp_obj_str_split+0xbe>
   12be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12be2:	3301      	adds	r3, #1
   12be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   12be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12be8:	6a3b      	ldr	r3, [r7, #32]
   12bea:	429a      	cmp	r2, r3
   12bec:	d20a      	bcs.n	12c04 <mp_obj_str_split+0xdc>
   12bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12bf0:	781b      	ldrb	r3, [r3, #0]
   12bf2:	4618      	mov	r0, r3
   12bf4:	f7ef fbba 	bl	236c <unichar_isspace>
   12bf8:	4603      	mov	r3, r0
   12bfa:	f083 0301 	eor.w	r3, r3, #1
   12bfe:	b2db      	uxtb	r3, r3
   12c00:	2b00      	cmp	r3, #0
   12c02:	d1ed      	bne.n	12be0 <mp_obj_str_split+0xb8>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12c06:	69fb      	ldr	r3, [r7, #28]
   12c08:	1ad3      	subs	r3, r2, r3
   12c0a:	461a      	mov	r2, r3
   12c0c:	69f9      	ldr	r1, [r7, #28]
   12c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12c10:	f002 f983 	bl	14f1a <mp_obj_new_str_of_type>
   12c14:	4603      	mov	r3, r0
   12c16:	4619      	mov	r1, r3
   12c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12c1a:	f7fe f872 	bl	10d02 <mp_obj_list_append>
            if (s >= top) {
   12c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12c20:	6a3b      	ldr	r3, [r7, #32]
   12c22:	429a      	cmp	r2, r3
   12c24:	d21d      	bcs.n	12c62 <mp_obj_str_split+0x13a>
                break;
            }
            while (s < top && unichar_isspace(*s)) s++;
   12c26:	e002      	b.n	12c2e <mp_obj_str_split+0x106>
   12c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c2a:	3301      	adds	r3, #1
   12c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   12c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12c30:	6a3b      	ldr	r3, [r7, #32]
   12c32:	429a      	cmp	r2, r3
   12c34:	d207      	bcs.n	12c46 <mp_obj_str_split+0x11e>
   12c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c38:	781b      	ldrb	r3, [r3, #0]
   12c3a:	4618      	mov	r0, r3
   12c3c:	f7ef fb96 	bl	236c <unichar_isspace>
   12c40:	4603      	mov	r3, r0
   12c42:	2b00      	cmp	r3, #0
   12c44:	d1f0      	bne.n	12c28 <mp_obj_str_split+0x100>
            if (splits > 0) {
   12c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c48:	2b00      	cmp	r3, #0
   12c4a:	dd02      	ble.n	12c52 <mp_obj_str_split+0x12a>
                splits--;
   12c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c4e:	3b01      	subs	r3, #1
   12c50:	637b      	str	r3, [r7, #52]	; 0x34
        while (s < top && splits != 0) {
   12c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12c54:	6a3b      	ldr	r3, [r7, #32]
   12c56:	429a      	cmp	r2, r3
   12c58:	d204      	bcs.n	12c64 <mp_obj_str_split+0x13c>
   12c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c5c:	2b00      	cmp	r3, #0
   12c5e:	d1bc      	bne.n	12bda <mp_obj_str_split+0xb2>
   12c60:	e000      	b.n	12c64 <mp_obj_str_split+0x13c>
                break;
   12c62:	bf00      	nop
            }
        }

        if (s < top) {
   12c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12c66:	6a3b      	ldr	r3, [r7, #32]
   12c68:	429a      	cmp	r2, r3
   12c6a:	d25d      	bcs.n	12d28 <mp_obj_str_split+0x200>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   12c6c:	6a3a      	ldr	r2, [r7, #32]
   12c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c70:	1ad3      	subs	r3, r2, r3
   12c72:	461a      	mov	r2, r3
   12c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12c78:	f002 f94f 	bl	14f1a <mp_obj_new_str_of_type>
   12c7c:	4603      	mov	r3, r0
   12c7e:	4619      	mov	r1, r3
   12c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12c82:	f7fe f83e 	bl	10d02 <mp_obj_list_append>
   12c86:	e04f      	b.n	12d28 <mp_obj_str_split+0x200>
        }

    } else {
        // sep given
        if (mp_obj_get_type(sep) != self_type) {
   12c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12c8a:	f7fa fd2d 	bl	d6e8 <mp_obj_get_type>
   12c8e:	4602      	mov	r2, r0
   12c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c92:	429a      	cmp	r2, r3
   12c94:	d002      	beq.n	12c9c <mp_obj_str_split+0x174>
            bad_implicit_conversion(sep);
   12c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12c98:	f002 fabd 	bl	15216 <bad_implicit_conversion>
        }

        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   12c9c:	f107 030c 	add.w	r3, r7, #12
   12ca0:	4619      	mov	r1, r3
   12ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12ca4:	f002 fb26 	bl	152f4 <mp_obj_str_get_data>
   12ca8:	61b8      	str	r0, [r7, #24]

        if (sep_len == 0) {
   12caa:	68fb      	ldr	r3, [r7, #12]
   12cac:	2b00      	cmp	r3, #0
   12cae:	d102      	bne.n	12cb6 <mp_obj_str_split+0x18e>
            mp_raise_ValueError("empty separator");
   12cb0:	4821      	ldr	r0, [pc, #132]	; (12d38 <mp_obj_str_split+0x210>)
   12cb2:	f7fa f8f8 	bl	cea6 <mp_raise_ValueError>
        }

        for (;;) {
            const byte *start = s;
   12cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12cb8:	617b      	str	r3, [r7, #20]
            for (;;) {
                if (splits == 0 || s + sep_len > top) {
   12cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cbc:	2b00      	cmp	r3, #0
   12cbe:	d005      	beq.n	12ccc <mp_obj_str_split+0x1a4>
   12cc0:	68fb      	ldr	r3, [r7, #12]
   12cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12cc4:	441a      	add	r2, r3
   12cc6:	6a3b      	ldr	r3, [r7, #32]
   12cc8:	429a      	cmp	r2, r3
   12cca:	d902      	bls.n	12cd2 <mp_obj_str_split+0x1aa>
                    s = top;
   12ccc:	6a3b      	ldr	r3, [r7, #32]
   12cce:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   12cd0:	e00d      	b.n	12cee <mp_obj_str_split+0x1c6>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   12cd2:	68fb      	ldr	r3, [r7, #12]
   12cd4:	461a      	mov	r2, r3
   12cd6:	69b9      	ldr	r1, [r7, #24]
   12cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12cda:	f009 fd26 	bl	1c72a <memcmp>
   12cde:	4603      	mov	r3, r0
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d003      	beq.n	12cec <mp_obj_str_split+0x1c4>
                    break;
                }
                s++;
   12ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ce6:	3301      	adds	r3, #1
   12ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (splits == 0 || s + sep_len > top) {
   12cea:	e7e6      	b.n	12cba <mp_obj_str_split+0x192>
                    break;
   12cec:	bf00      	nop
            }
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12cf0:	697b      	ldr	r3, [r7, #20]
   12cf2:	1ad3      	subs	r3, r2, r3
   12cf4:	461a      	mov	r2, r3
   12cf6:	6979      	ldr	r1, [r7, #20]
   12cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12cfa:	f002 f90e 	bl	14f1a <mp_obj_new_str_of_type>
   12cfe:	4603      	mov	r3, r0
   12d00:	4619      	mov	r1, r3
   12d02:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12d04:	f7fd fffd 	bl	10d02 <mp_obj_list_append>
            if (s >= top) {
   12d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d0a:	6a3b      	ldr	r3, [r7, #32]
   12d0c:	429a      	cmp	r2, r3
   12d0e:	d20a      	bcs.n	12d26 <mp_obj_str_split+0x1fe>
                break;
            }
            s += sep_len;
   12d10:	68fb      	ldr	r3, [r7, #12]
   12d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d14:	4413      	add	r3, r2
   12d16:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (splits > 0) {
   12d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d1a:	2b00      	cmp	r3, #0
   12d1c:	ddcb      	ble.n	12cb6 <mp_obj_str_split+0x18e>
                splits--;
   12d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d20:	3b01      	subs	r3, #1
   12d22:	637b      	str	r3, [r7, #52]	; 0x34
        for (;;) {
   12d24:	e7c7      	b.n	12cb6 <mp_obj_str_split+0x18e>
                break;
   12d26:	bf00      	nop
            }
        }
    }

    return res;
   12d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   12d2a:	4618      	mov	r0, r3
   12d2c:	3738      	adds	r7, #56	; 0x38
   12d2e:	46bd      	mov	sp, r7
   12d30:	bd80      	pop	{r7, pc}
   12d32:	bf00      	nop
   12d34:	00022b54 	.word	0x00022b54
   12d38:	00022d90 	.word	0x00022d90

00012d3c <str_rsplit>:
    return res;
}
MP_DEFINE_CONST_FUN_OBJ_KW(str_splitlines_obj, 1, str_splitlines);
#endif

STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   12d3c:	b590      	push	{r4, r7, lr}
   12d3e:	b091      	sub	sp, #68	; 0x44
   12d40:	af00      	add	r7, sp, #0
   12d42:	6078      	str	r0, [r7, #4]
   12d44:	6039      	str	r1, [r7, #0]
    if (n_args < 3) {
   12d46:	687b      	ldr	r3, [r7, #4]
   12d48:	2b02      	cmp	r3, #2
   12d4a:	d805      	bhi.n	12d58 <str_rsplit+0x1c>
        // If we don't have split limit, it doesn't matter from which side
        // we split.
        return mp_obj_str_split(n_args, args);
   12d4c:	6839      	ldr	r1, [r7, #0]
   12d4e:	6878      	ldr	r0, [r7, #4]
   12d50:	f7ff feea 	bl	12b28 <mp_obj_str_split>
   12d54:	4603      	mov	r3, r0
   12d56:	e0cc      	b.n	12ef2 <str_rsplit+0x1b6>
    }
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12d58:	683b      	ldr	r3, [r7, #0]
   12d5a:	681b      	ldr	r3, [r3, #0]
   12d5c:	4618      	mov	r0, r3
   12d5e:	f7fa fcc3 	bl	d6e8 <mp_obj_get_type>
   12d62:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_t sep = args[1];
   12d64:	683b      	ldr	r3, [r7, #0]
   12d66:	685b      	ldr	r3, [r3, #4]
   12d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_STR_DATA_LEN(args[0], s, len);
   12d6a:	683b      	ldr	r3, [r7, #0]
   12d6c:	681b      	ldr	r3, [r3, #0]
   12d6e:	4618      	mov	r0, r3
   12d70:	f7ff f8b4 	bl	11edc <MP_OBJ_IS_QSTR>
   12d74:	4603      	mov	r3, r0
   12d76:	2b00      	cmp	r3, #0
   12d78:	d00a      	beq.n	12d90 <str_rsplit+0x54>
   12d7a:	683b      	ldr	r3, [r7, #0]
   12d7c:	681b      	ldr	r3, [r3, #0]
   12d7e:	089b      	lsrs	r3, r3, #2
   12d80:	f107 0210 	add.w	r2, r7, #16
   12d84:	4611      	mov	r1, r2
   12d86:	4618      	mov	r0, r3
   12d88:	f7ee fa40 	bl	120c <qstr_data>
   12d8c:	63f8      	str	r0, [r7, #60]	; 0x3c
   12d8e:	e007      	b.n	12da0 <str_rsplit+0x64>
   12d90:	683b      	ldr	r3, [r7, #0]
   12d92:	681b      	ldr	r3, [r3, #0]
   12d94:	689b      	ldr	r3, [r3, #8]
   12d96:	613b      	str	r3, [r7, #16]
   12d98:	683b      	ldr	r3, [r7, #0]
   12d9a:	681b      	ldr	r3, [r3, #0]
   12d9c:	68db      	ldr	r3, [r3, #12]
   12d9e:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_int_t splits = mp_obj_get_int(args[2]);
   12da0:	683b      	ldr	r3, [r7, #0]
   12da2:	3308      	adds	r3, #8
   12da4:	681b      	ldr	r3, [r3, #0]
   12da6:	4618      	mov	r0, r3
   12da8:	f7fa fe7a 	bl	daa0 <mp_obj_get_int>
   12dac:	63b8      	str	r0, [r7, #56]	; 0x38
    if (splits < 0) {
   12dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12db0:	2b00      	cmp	r3, #0
   12db2:	da05      	bge.n	12dc0 <str_rsplit+0x84>
        // Negative limit means no limit, so delegate to split().
        return mp_obj_str_split(n_args, args);
   12db4:	6839      	ldr	r1, [r7, #0]
   12db6:	6878      	ldr	r0, [r7, #4]
   12db8:	f7ff feb6 	bl	12b28 <mp_obj_str_split>
   12dbc:	4603      	mov	r3, r0
   12dbe:	e098      	b.n	12ef2 <str_rsplit+0x1b6>
    }

    mp_int_t org_splits = splits;
   12dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12dc2:	627b      	str	r3, [r7, #36]	; 0x24
    // Preallocate list to the max expected # of elements, as we
    // will fill it from the end.
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   12dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12dc6:	3301      	adds	r3, #1
   12dc8:	2100      	movs	r1, #0
   12dca:	4618      	mov	r0, r3
   12dcc:	f7fe fc05 	bl	115da <mp_obj_new_list>
   12dd0:	6238      	str	r0, [r7, #32]
    mp_int_t idx = splits;
   12dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12dd4:	637b      	str	r3, [r7, #52]	; 0x34

    if (sep == mp_const_none) {
   12dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12dd8:	4a48      	ldr	r2, [pc, #288]	; (12efc <str_rsplit+0x1c0>)
   12dda:	4293      	cmp	r3, r2
   12ddc:	d102      	bne.n	12de4 <str_rsplit+0xa8>
        mp_raise_NotImplementedError("rsplit(None,n)");
   12dde:	4848      	ldr	r0, [pc, #288]	; (12f00 <str_rsplit+0x1c4>)
   12de0:	f7fa f888 	bl	cef4 <mp_raise_NotImplementedError>
    } else {
        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   12de4:	f107 030c 	add.w	r3, r7, #12
   12de8:	4619      	mov	r1, r3
   12dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12dec:	f002 fa82 	bl	152f4 <mp_obj_str_get_data>
   12df0:	61f8      	str	r0, [r7, #28]

        if (sep_len == 0) {
   12df2:	68fb      	ldr	r3, [r7, #12]
   12df4:	2b00      	cmp	r3, #0
   12df6:	d102      	bne.n	12dfe <str_rsplit+0xc2>
            mp_raise_ValueError("empty separator");
   12df8:	4842      	ldr	r0, [pc, #264]	; (12f04 <str_rsplit+0x1c8>)
   12dfa:	f7fa f854 	bl	cea6 <mp_raise_ValueError>
        }

        const byte *beg = s;
   12dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12e00:	61bb      	str	r3, [r7, #24]
        const byte *last = s + len;
   12e02:	693b      	ldr	r3, [r7, #16]
   12e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12e06:	4413      	add	r3, r2
   12e08:	633b      	str	r3, [r7, #48]	; 0x30
        for (;;) {
            s = last - sep_len;
   12e0a:	68fb      	ldr	r3, [r7, #12]
   12e0c:	425b      	negs	r3, r3
   12e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12e10:	4413      	add	r3, r2
   12e12:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (;;) {
                if (splits == 0 || s < beg) {
   12e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12e16:	2b00      	cmp	r3, #0
   12e18:	d011      	beq.n	12e3e <str_rsplit+0x102>
   12e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12e1c:	69bb      	ldr	r3, [r7, #24]
   12e1e:	429a      	cmp	r2, r3
   12e20:	d30d      	bcc.n	12e3e <str_rsplit+0x102>
                    break;
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   12e22:	68fb      	ldr	r3, [r7, #12]
   12e24:	461a      	mov	r2, r3
   12e26:	69f9      	ldr	r1, [r7, #28]
   12e28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   12e2a:	f009 fc7e 	bl	1c72a <memcmp>
   12e2e:	4603      	mov	r3, r0
   12e30:	2b00      	cmp	r3, #0
   12e32:	d003      	beq.n	12e3c <str_rsplit+0x100>
                    break;
                }
                s--;
   12e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12e36:	3b01      	subs	r3, #1
   12e38:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (splits == 0 || s < beg) {
   12e3a:	e7eb      	b.n	12e14 <str_rsplit+0xd8>
                    break;
   12e3c:	bf00      	nop
            }
            if (s < beg || splits == 0) {
   12e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12e40:	69bb      	ldr	r3, [r7, #24]
   12e42:	429a      	cmp	r2, r3
   12e44:	d302      	bcc.n	12e4c <str_rsplit+0x110>
   12e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12e48:	2b00      	cmp	r3, #0
   12e4a:	d113      	bne.n	12e74 <str_rsplit+0x138>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   12e4c:	6a3b      	ldr	r3, [r7, #32]
   12e4e:	68da      	ldr	r2, [r3, #12]
   12e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12e52:	009b      	lsls	r3, r3, #2
   12e54:	18d4      	adds	r4, r2, r3
   12e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12e58:	69bb      	ldr	r3, [r7, #24]
   12e5a:	1ad3      	subs	r3, r2, r3
   12e5c:	461a      	mov	r2, r3
   12e5e:	69b9      	ldr	r1, [r7, #24]
   12e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12e62:	f002 f85a 	bl	14f1a <mp_obj_new_str_of_type>
   12e66:	4603      	mov	r3, r0
   12e68:	6023      	str	r3, [r4, #0]
                break;
   12e6a:	bf00      	nop
            }
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
            last = s;
            splits--;
        }
        if (idx != 0) {
   12e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d03e      	beq.n	12ef0 <str_rsplit+0x1b4>
   12e72:	e01b      	b.n	12eac <str_rsplit+0x170>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   12e74:	6a3b      	ldr	r3, [r7, #32]
   12e76:	68da      	ldr	r2, [r3, #12]
   12e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12e7a:	1e59      	subs	r1, r3, #1
   12e7c:	6379      	str	r1, [r7, #52]	; 0x34
   12e7e:	009b      	lsls	r3, r3, #2
   12e80:	18d4      	adds	r4, r2, r3
   12e82:	68fb      	ldr	r3, [r7, #12]
   12e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12e86:	18d1      	adds	r1, r2, r3
   12e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12e8c:	1ad3      	subs	r3, r2, r3
   12e8e:	461a      	mov	r2, r3
   12e90:	68fb      	ldr	r3, [r7, #12]
   12e92:	1ad3      	subs	r3, r2, r3
   12e94:	461a      	mov	r2, r3
   12e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12e98:	f002 f83f 	bl	14f1a <mp_obj_new_str_of_type>
   12e9c:	4603      	mov	r3, r0
   12e9e:	6023      	str	r3, [r4, #0]
            last = s;
   12ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ea2:	633b      	str	r3, [r7, #48]	; 0x30
            splits--;
   12ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12ea6:	3b01      	subs	r3, #1
   12ea8:	63bb      	str	r3, [r7, #56]	; 0x38
            s = last - sep_len;
   12eaa:	e7ae      	b.n	12e0a <str_rsplit+0xce>
            // We split less parts than split limit, now go cleanup surplus
            size_t used = org_splits + 1 - idx;
   12eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12eae:	1c5a      	adds	r2, r3, #1
   12eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12eb2:	1ad3      	subs	r3, r2, r3
   12eb4:	617b      	str	r3, [r7, #20]
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   12eb6:	6a3b      	ldr	r3, [r7, #32]
   12eb8:	68d8      	ldr	r0, [r3, #12]
   12eba:	6a3b      	ldr	r3, [r7, #32]
   12ebc:	68da      	ldr	r2, [r3, #12]
   12ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ec0:	009b      	lsls	r3, r3, #2
   12ec2:	18d1      	adds	r1, r2, r3
   12ec4:	697b      	ldr	r3, [r7, #20]
   12ec6:	009b      	lsls	r3, r3, #2
   12ec8:	461a      	mov	r2, r3
   12eca:	f009 fbae 	bl	1c62a <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   12ece:	6a3b      	ldr	r3, [r7, #32]
   12ed0:	68da      	ldr	r2, [r3, #12]
   12ed2:	697b      	ldr	r3, [r7, #20]
   12ed4:	009b      	lsls	r3, r3, #2
   12ed6:	18d0      	adds	r0, r2, r3
   12ed8:	6a3b      	ldr	r3, [r7, #32]
   12eda:	685a      	ldr	r2, [r3, #4]
   12edc:	697b      	ldr	r3, [r7, #20]
   12ede:	1ad3      	subs	r3, r2, r3
   12ee0:	009b      	lsls	r3, r3, #2
   12ee2:	461a      	mov	r2, r3
   12ee4:	2100      	movs	r1, #0
   12ee6:	f009 fbd5 	bl	1c694 <memset>
            res->len = used;
   12eea:	6a3b      	ldr	r3, [r7, #32]
   12eec:	697a      	ldr	r2, [r7, #20]
   12eee:	609a      	str	r2, [r3, #8]
        }
    }

    return MP_OBJ_FROM_PTR(res);
   12ef0:	6a3b      	ldr	r3, [r7, #32]
}
   12ef2:	4618      	mov	r0, r3
   12ef4:	3744      	adds	r7, #68	; 0x44
   12ef6:	46bd      	mov	sp, r7
   12ef8:	bd90      	pop	{r4, r7, pc}
   12efa:	bf00      	nop
   12efc:	00022b54 	.word	0x00022b54
   12f00:	00022dac 	.word	0x00022dac
   12f04:	00022d90 	.word	0x00022d90

00012f08 <str_finder>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rsplit_obj, 1, 3, str_rsplit);

STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
   12f08:	b580      	push	{r7, lr}
   12f0a:	b08e      	sub	sp, #56	; 0x38
   12f0c:	af02      	add	r7, sp, #8
   12f0e:	60f8      	str	r0, [r7, #12]
   12f10:	60b9      	str	r1, [r7, #8]
   12f12:	607a      	str	r2, [r7, #4]
   12f14:	70fb      	strb	r3, [r7, #3]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12f16:	68bb      	ldr	r3, [r7, #8]
   12f18:	681b      	ldr	r3, [r3, #0]
   12f1a:	4618      	mov	r0, r3
   12f1c:	f7fa fbe4 	bl	d6e8 <mp_obj_get_type>
   12f20:	61f8      	str	r0, [r7, #28]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   12f22:	68bb      	ldr	r3, [r7, #8]
   12f24:	681b      	ldr	r3, [r3, #0]
   12f26:	4618      	mov	r0, r3
   12f28:	f7fe ffd8 	bl	11edc <MP_OBJ_IS_QSTR>
   12f2c:	4603      	mov	r3, r0
   12f2e:	2b00      	cmp	r3, #0
   12f30:	d115      	bne.n	12f5e <str_finder+0x56>
   12f32:	68bb      	ldr	r3, [r7, #8]
   12f34:	681b      	ldr	r3, [r3, #0]
   12f36:	4618      	mov	r0, r3
   12f38:	f7fe ffe2 	bl	11f00 <MP_OBJ_IS_OBJ>
   12f3c:	4603      	mov	r3, r0
   12f3e:	2b00      	cmp	r3, #0
   12f40:	d006      	beq.n	12f50 <str_finder+0x48>
   12f42:	68bb      	ldr	r3, [r7, #8]
   12f44:	681b      	ldr	r3, [r3, #0]
   12f46:	681b      	ldr	r3, [r3, #0]
   12f48:	699b      	ldr	r3, [r3, #24]
   12f4a:	4a56      	ldr	r2, [pc, #344]	; (130a4 <str_finder+0x19c>)
   12f4c:	4293      	cmp	r3, r2
   12f4e:	d006      	beq.n	12f5e <str_finder+0x56>
   12f50:	4b55      	ldr	r3, [pc, #340]	; (130a8 <str_finder+0x1a0>)
   12f52:	4a56      	ldr	r2, [pc, #344]	; (130ac <str_finder+0x1a4>)
   12f54:	f240 21ab 	movw	r1, #683	; 0x2ab
   12f58:	4855      	ldr	r0, [pc, #340]	; (130b0 <str_finder+0x1a8>)
   12f5a:	f008 f943 	bl	1b1e4 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   12f5e:	68bb      	ldr	r3, [r7, #8]
   12f60:	3304      	adds	r3, #4
   12f62:	681b      	ldr	r3, [r3, #0]
   12f64:	4618      	mov	r0, r3
   12f66:	f7fa fbbf 	bl	d6e8 <mp_obj_get_type>
   12f6a:	4602      	mov	r2, r0
   12f6c:	69fb      	ldr	r3, [r7, #28]
   12f6e:	429a      	cmp	r2, r3
   12f70:	d005      	beq.n	12f7e <str_finder+0x76>
        bad_implicit_conversion(args[1]);
   12f72:	68bb      	ldr	r3, [r7, #8]
   12f74:	3304      	adds	r3, #4
   12f76:	681b      	ldr	r3, [r3, #0]
   12f78:	4618      	mov	r0, r3
   12f7a:	f002 f94c 	bl	15216 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   12f7e:	68bb      	ldr	r3, [r7, #8]
   12f80:	681b      	ldr	r3, [r3, #0]
   12f82:	4618      	mov	r0, r3
   12f84:	f7fe ffaa 	bl	11edc <MP_OBJ_IS_QSTR>
   12f88:	4603      	mov	r3, r0
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d00a      	beq.n	12fa4 <str_finder+0x9c>
   12f8e:	68bb      	ldr	r3, [r7, #8]
   12f90:	681b      	ldr	r3, [r3, #0]
   12f92:	089b      	lsrs	r3, r3, #2
   12f94:	f107 0214 	add.w	r2, r7, #20
   12f98:	4611      	mov	r1, r2
   12f9a:	4618      	mov	r0, r3
   12f9c:	f7ee f936 	bl	120c <qstr_data>
   12fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
   12fa2:	e007      	b.n	12fb4 <str_finder+0xac>
   12fa4:	68bb      	ldr	r3, [r7, #8]
   12fa6:	681b      	ldr	r3, [r3, #0]
   12fa8:	689b      	ldr	r3, [r3, #8]
   12faa:	617b      	str	r3, [r7, #20]
   12fac:	68bb      	ldr	r3, [r7, #8]
   12fae:	681b      	ldr	r3, [r3, #0]
   12fb0:	68db      	ldr	r3, [r3, #12]
   12fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   12fb4:	68bb      	ldr	r3, [r7, #8]
   12fb6:	3304      	adds	r3, #4
   12fb8:	681b      	ldr	r3, [r3, #0]
   12fba:	4618      	mov	r0, r3
   12fbc:	f7fe ff8e 	bl	11edc <MP_OBJ_IS_QSTR>
   12fc0:	4603      	mov	r3, r0
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d00b      	beq.n	12fde <str_finder+0xd6>
   12fc6:	68bb      	ldr	r3, [r7, #8]
   12fc8:	3304      	adds	r3, #4
   12fca:	681b      	ldr	r3, [r3, #0]
   12fcc:	089b      	lsrs	r3, r3, #2
   12fce:	f107 0210 	add.w	r2, r7, #16
   12fd2:	4611      	mov	r1, r2
   12fd4:	4618      	mov	r0, r3
   12fd6:	f7ee f919 	bl	120c <qstr_data>
   12fda:	62b8      	str	r0, [r7, #40]	; 0x28
   12fdc:	e009      	b.n	12ff2 <str_finder+0xea>
   12fde:	68bb      	ldr	r3, [r7, #8]
   12fe0:	3304      	adds	r3, #4
   12fe2:	681b      	ldr	r3, [r3, #0]
   12fe4:	689b      	ldr	r3, [r3, #8]
   12fe6:	613b      	str	r3, [r7, #16]
   12fe8:	68bb      	ldr	r3, [r7, #8]
   12fea:	3304      	adds	r3, #4
   12fec:	681b      	ldr	r3, [r3, #0]
   12fee:	68db      	ldr	r3, [r3, #12]
   12ff0:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   12ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12ff4:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   12ff6:	697b      	ldr	r3, [r7, #20]
   12ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12ffa:	4413      	add	r3, r2
   12ffc:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   12ffe:	68fb      	ldr	r3, [r7, #12]
   13000:	2b02      	cmp	r3, #2
   13002:	d911      	bls.n	13028 <str_finder+0x120>
   13004:	68bb      	ldr	r3, [r7, #8]
   13006:	3308      	adds	r3, #8
   13008:	681b      	ldr	r3, [r3, #0]
   1300a:	4a2a      	ldr	r2, [pc, #168]	; (130b4 <str_finder+0x1ac>)
   1300c:	4293      	cmp	r3, r2
   1300e:	d00b      	beq.n	13028 <str_finder+0x120>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   13010:	697a      	ldr	r2, [r7, #20]
   13012:	68bb      	ldr	r3, [r7, #8]
   13014:	3308      	adds	r3, #8
   13016:	6819      	ldr	r1, [r3, #0]
   13018:	2301      	movs	r3, #1
   1301a:	9300      	str	r3, [sp, #0]
   1301c:	460b      	mov	r3, r1
   1301e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13020:	69f8      	ldr	r0, [r7, #28]
   13022:	f7ff fc11 	bl	12848 <str_index_to_ptr>
   13026:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   13028:	68fb      	ldr	r3, [r7, #12]
   1302a:	2b03      	cmp	r3, #3
   1302c:	d911      	bls.n	13052 <str_finder+0x14a>
   1302e:	68bb      	ldr	r3, [r7, #8]
   13030:	330c      	adds	r3, #12
   13032:	681b      	ldr	r3, [r3, #0]
   13034:	4a1f      	ldr	r2, [pc, #124]	; (130b4 <str_finder+0x1ac>)
   13036:	4293      	cmp	r3, r2
   13038:	d00b      	beq.n	13052 <str_finder+0x14a>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   1303a:	697a      	ldr	r2, [r7, #20]
   1303c:	68bb      	ldr	r3, [r7, #8]
   1303e:	330c      	adds	r3, #12
   13040:	6819      	ldr	r1, [r3, #0]
   13042:	2301      	movs	r3, #1
   13044:	9300      	str	r3, [sp, #0]
   13046:	460b      	mov	r3, r1
   13048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1304a:	69f8      	ldr	r0, [r7, #28]
   1304c:	f7ff fbfc 	bl	12848 <str_index_to_ptr>
   13050:	6238      	str	r0, [r7, #32]
    }

    if (end < start) {
   13052:	6a3a      	ldr	r2, [r7, #32]
   13054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13056:	429a      	cmp	r2, r3
   13058:	d310      	bcc.n	1307c <str_finder+0x174>
        goto out_error;
    }

    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
   1305a:	6a3a      	ldr	r2, [r7, #32]
   1305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1305e:	1ad3      	subs	r3, r2, r3
   13060:	4619      	mov	r1, r3
   13062:	693a      	ldr	r2, [r7, #16]
   13064:	687b      	ldr	r3, [r7, #4]
   13066:	9300      	str	r3, [sp, #0]
   13068:	4613      	mov	r3, r2
   1306a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1306c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1306e:	f7ff fa35 	bl	124dc <find_subbytes>
   13072:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
   13074:	69bb      	ldr	r3, [r7, #24]
   13076:	2b00      	cmp	r3, #0
   13078:	d10a      	bne.n	13090 <str_finder+0x188>
   1307a:	e000      	b.n	1307e <str_finder+0x176>
        goto out_error;
   1307c:	bf00      	nop
    out_error:
        // not found
        if (is_index) {
   1307e:	78fb      	ldrb	r3, [r7, #3]
   13080:	2b00      	cmp	r3, #0
   13082:	d002      	beq.n	1308a <str_finder+0x182>
            mp_raise_ValueError("substring not found");
   13084:	480c      	ldr	r0, [pc, #48]	; (130b8 <str_finder+0x1b0>)
   13086:	f7f9 ff0e 	bl	cea6 <mp_raise_ValueError>
        } else {
            return MP_OBJ_NEW_SMALL_INT(-1);
   1308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1308e:	e005      	b.n	1309c <str_finder+0x194>
        #if MICROPY_PY_BUILTINS_STR_UNICODE
        if (self_type == &mp_type_str) {
            return MP_OBJ_NEW_SMALL_INT(utf8_ptr_to_index(haystack, p));
        }
        #endif
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
   13090:	69ba      	ldr	r2, [r7, #24]
   13092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13094:	1ad3      	subs	r3, r2, r3
   13096:	005b      	lsls	r3, r3, #1
   13098:	f043 0301 	orr.w	r3, r3, #1
    }
}
   1309c:	4618      	mov	r0, r3
   1309e:	3730      	adds	r7, #48	; 0x30
   130a0:	46bd      	mov	sp, r7
   130a2:	bd80      	pop	{r7, pc}
   130a4:	0001254f 	.word	0x0001254f
   130a8:	00022dc8 	.word	0x00022dc8
   130ac:	000232bc 	.word	0x000232bc
   130b0:	00022d2c 	.word	0x00022d2c
   130b4:	00022b54 	.word	0x00022b54
   130b8:	00022e50 	.word	0x00022e50

000130bc <str_find>:

STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
   130bc:	b580      	push	{r7, lr}
   130be:	b082      	sub	sp, #8
   130c0:	af00      	add	r7, sp, #0
   130c2:	6078      	str	r0, [r7, #4]
   130c4:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, false);
   130c6:	2300      	movs	r3, #0
   130c8:	2201      	movs	r2, #1
   130ca:	6839      	ldr	r1, [r7, #0]
   130cc:	6878      	ldr	r0, [r7, #4]
   130ce:	f7ff ff1b 	bl	12f08 <str_finder>
   130d2:	4603      	mov	r3, r0
}
   130d4:	4618      	mov	r0, r3
   130d6:	3708      	adds	r7, #8
   130d8:	46bd      	mov	sp, r7
   130da:	bd80      	pop	{r7, pc}

000130dc <str_rfind>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_find_obj, 2, 4, str_find);

STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
   130dc:	b580      	push	{r7, lr}
   130de:	b082      	sub	sp, #8
   130e0:	af00      	add	r7, sp, #0
   130e2:	6078      	str	r0, [r7, #4]
   130e4:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, false);
   130e6:	2300      	movs	r3, #0
   130e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   130ec:	6839      	ldr	r1, [r7, #0]
   130ee:	6878      	ldr	r0, [r7, #4]
   130f0:	f7ff ff0a 	bl	12f08 <str_finder>
   130f4:	4603      	mov	r3, r0
}
   130f6:	4618      	mov	r0, r3
   130f8:	3708      	adds	r7, #8
   130fa:	46bd      	mov	sp, r7
   130fc:	bd80      	pop	{r7, pc}

000130fe <str_index>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rfind_obj, 2, 4, str_rfind);

STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
   130fe:	b580      	push	{r7, lr}
   13100:	b082      	sub	sp, #8
   13102:	af00      	add	r7, sp, #0
   13104:	6078      	str	r0, [r7, #4]
   13106:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, true);
   13108:	2301      	movs	r3, #1
   1310a:	2201      	movs	r2, #1
   1310c:	6839      	ldr	r1, [r7, #0]
   1310e:	6878      	ldr	r0, [r7, #4]
   13110:	f7ff fefa 	bl	12f08 <str_finder>
   13114:	4603      	mov	r3, r0
}
   13116:	4618      	mov	r0, r3
   13118:	3708      	adds	r7, #8
   1311a:	46bd      	mov	sp, r7
   1311c:	bd80      	pop	{r7, pc}

0001311e <str_rindex>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_index_obj, 2, 4, str_index);

STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
   1311e:	b580      	push	{r7, lr}
   13120:	b082      	sub	sp, #8
   13122:	af00      	add	r7, sp, #0
   13124:	6078      	str	r0, [r7, #4]
   13126:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, true);
   13128:	2301      	movs	r3, #1
   1312a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1312e:	6839      	ldr	r1, [r7, #0]
   13130:	6878      	ldr	r0, [r7, #4]
   13132:	f7ff fee9 	bl	12f08 <str_finder>
   13136:	4603      	mov	r3, r0
}
   13138:	4618      	mov	r0, r3
   1313a:	3708      	adds	r7, #8
   1313c:	46bd      	mov	sp, r7
   1313e:	bd80      	pop	{r7, pc}

00013140 <str_startswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rindex_obj, 2, 4, str_rindex);

// TODO: (Much) more variety in args
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   13140:	b580      	push	{r7, lr}
   13142:	b08a      	sub	sp, #40	; 0x28
   13144:	af02      	add	r7, sp, #8
   13146:	6078      	str	r0, [r7, #4]
   13148:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   1314a:	683b      	ldr	r3, [r7, #0]
   1314c:	681b      	ldr	r3, [r3, #0]
   1314e:	4618      	mov	r0, r3
   13150:	f7fa faca 	bl	d6e8 <mp_obj_get_type>
   13154:	6178      	str	r0, [r7, #20]
    GET_STR_DATA_LEN(args[0], str, str_len);
   13156:	683b      	ldr	r3, [r7, #0]
   13158:	681b      	ldr	r3, [r3, #0]
   1315a:	4618      	mov	r0, r3
   1315c:	f7fe febe 	bl	11edc <MP_OBJ_IS_QSTR>
   13160:	4603      	mov	r3, r0
   13162:	2b00      	cmp	r3, #0
   13164:	d00a      	beq.n	1317c <str_startswith+0x3c>
   13166:	683b      	ldr	r3, [r7, #0]
   13168:	681b      	ldr	r3, [r3, #0]
   1316a:	089b      	lsrs	r3, r3, #2
   1316c:	f107 020c 	add.w	r2, r7, #12
   13170:	4611      	mov	r1, r2
   13172:	4618      	mov	r0, r3
   13174:	f7ee f84a 	bl	120c <qstr_data>
   13178:	61f8      	str	r0, [r7, #28]
   1317a:	e007      	b.n	1318c <str_startswith+0x4c>
   1317c:	683b      	ldr	r3, [r7, #0]
   1317e:	681b      	ldr	r3, [r3, #0]
   13180:	689b      	ldr	r3, [r3, #8]
   13182:	60fb      	str	r3, [r7, #12]
   13184:	683b      	ldr	r3, [r7, #0]
   13186:	681b      	ldr	r3, [r3, #0]
   13188:	68db      	ldr	r3, [r3, #12]
   1318a:	61fb      	str	r3, [r7, #28]
    size_t prefix_len;
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   1318c:	683b      	ldr	r3, [r7, #0]
   1318e:	3304      	adds	r3, #4
   13190:	681b      	ldr	r3, [r3, #0]
   13192:	f107 0208 	add.w	r2, r7, #8
   13196:	4611      	mov	r1, r2
   13198:	4618      	mov	r0, r3
   1319a:	f002 f8ab 	bl	152f4 <mp_obj_str_get_data>
   1319e:	6138      	str	r0, [r7, #16]
    const byte *start = str;
   131a0:	69fb      	ldr	r3, [r7, #28]
   131a2:	61bb      	str	r3, [r7, #24]
    if (n_args > 2) {
   131a4:	687b      	ldr	r3, [r7, #4]
   131a6:	2b02      	cmp	r3, #2
   131a8:	d90b      	bls.n	131c2 <str_startswith+0x82>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   131aa:	68fa      	ldr	r2, [r7, #12]
   131ac:	683b      	ldr	r3, [r7, #0]
   131ae:	3308      	adds	r3, #8
   131b0:	6819      	ldr	r1, [r3, #0]
   131b2:	2301      	movs	r3, #1
   131b4:	9300      	str	r3, [sp, #0]
   131b6:	460b      	mov	r3, r1
   131b8:	69f9      	ldr	r1, [r7, #28]
   131ba:	6978      	ldr	r0, [r7, #20]
   131bc:	f7ff fb44 	bl	12848 <str_index_to_ptr>
   131c0:	61b8      	str	r0, [r7, #24]
    }
    if (prefix_len + (start - str) > str_len) {
   131c2:	69ba      	ldr	r2, [r7, #24]
   131c4:	69fb      	ldr	r3, [r7, #28]
   131c6:	1ad3      	subs	r3, r2, r3
   131c8:	461a      	mov	r2, r3
   131ca:	68bb      	ldr	r3, [r7, #8]
   131cc:	441a      	add	r2, r3
   131ce:	68fb      	ldr	r3, [r7, #12]
   131d0:	429a      	cmp	r2, r3
   131d2:	d901      	bls.n	131d8 <str_startswith+0x98>
        return mp_const_false;
   131d4:	4b0a      	ldr	r3, [pc, #40]	; (13200 <str_startswith+0xc0>)
   131d6:	e00f      	b.n	131f8 <str_startswith+0xb8>
    }
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   131d8:	68bb      	ldr	r3, [r7, #8]
   131da:	461a      	mov	r2, r3
   131dc:	6939      	ldr	r1, [r7, #16]
   131de:	69b8      	ldr	r0, [r7, #24]
   131e0:	f009 faa3 	bl	1c72a <memcmp>
   131e4:	4603      	mov	r3, r0
   131e6:	2b00      	cmp	r3, #0
   131e8:	bf0c      	ite	eq
   131ea:	2301      	moveq	r3, #1
   131ec:	2300      	movne	r3, #0
   131ee:	b2db      	uxtb	r3, r3
   131f0:	4618      	mov	r0, r3
   131f2:	f7fe fe97 	bl	11f24 <mp_obj_new_bool>
   131f6:	4603      	mov	r3, r0
}
   131f8:	4618      	mov	r0, r3
   131fa:	3720      	adds	r7, #32
   131fc:	46bd      	mov	sp, r7
   131fe:	bd80      	pop	{r7, pc}
   13200:	00021308 	.word	0x00021308

00013204 <str_endswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_startswith_obj, 2, 3, str_startswith);

STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   13204:	b580      	push	{r7, lr}
   13206:	b086      	sub	sp, #24
   13208:	af00      	add	r7, sp, #0
   1320a:	6078      	str	r0, [r7, #4]
   1320c:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(args[0], str, str_len);
   1320e:	683b      	ldr	r3, [r7, #0]
   13210:	681b      	ldr	r3, [r3, #0]
   13212:	4618      	mov	r0, r3
   13214:	f7fe fe62 	bl	11edc <MP_OBJ_IS_QSTR>
   13218:	4603      	mov	r3, r0
   1321a:	2b00      	cmp	r3, #0
   1321c:	d00a      	beq.n	13234 <str_endswith+0x30>
   1321e:	683b      	ldr	r3, [r7, #0]
   13220:	681b      	ldr	r3, [r3, #0]
   13222:	089b      	lsrs	r3, r3, #2
   13224:	f107 020c 	add.w	r2, r7, #12
   13228:	4611      	mov	r1, r2
   1322a:	4618      	mov	r0, r3
   1322c:	f7ed ffee 	bl	120c <qstr_data>
   13230:	6178      	str	r0, [r7, #20]
   13232:	e007      	b.n	13244 <str_endswith+0x40>
   13234:	683b      	ldr	r3, [r7, #0]
   13236:	681b      	ldr	r3, [r3, #0]
   13238:	689b      	ldr	r3, [r3, #8]
   1323a:	60fb      	str	r3, [r7, #12]
   1323c:	683b      	ldr	r3, [r7, #0]
   1323e:	681b      	ldr	r3, [r3, #0]
   13240:	68db      	ldr	r3, [r3, #12]
   13242:	617b      	str	r3, [r7, #20]
    size_t suffix_len;
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   13244:	683b      	ldr	r3, [r7, #0]
   13246:	3304      	adds	r3, #4
   13248:	681b      	ldr	r3, [r3, #0]
   1324a:	f107 0208 	add.w	r2, r7, #8
   1324e:	4611      	mov	r1, r2
   13250:	4618      	mov	r0, r3
   13252:	f002 f84f 	bl	152f4 <mp_obj_str_get_data>
   13256:	6138      	str	r0, [r7, #16]
    if (n_args > 2) {
   13258:	687b      	ldr	r3, [r7, #4]
   1325a:	2b02      	cmp	r3, #2
   1325c:	d902      	bls.n	13264 <str_endswith+0x60>
        mp_raise_NotImplementedError("start/end indices");
   1325e:	4810      	ldr	r0, [pc, #64]	; (132a0 <str_endswith+0x9c>)
   13260:	f7f9 fe48 	bl	cef4 <mp_raise_NotImplementedError>
    }

    if (suffix_len > str_len) {
   13264:	68ba      	ldr	r2, [r7, #8]
   13266:	68fb      	ldr	r3, [r7, #12]
   13268:	429a      	cmp	r2, r3
   1326a:	d901      	bls.n	13270 <str_endswith+0x6c>
        return mp_const_false;
   1326c:	4b0d      	ldr	r3, [pc, #52]	; (132a4 <str_endswith+0xa0>)
   1326e:	e013      	b.n	13298 <str_endswith+0x94>
    }
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   13270:	68fa      	ldr	r2, [r7, #12]
   13272:	68bb      	ldr	r3, [r7, #8]
   13274:	1ad3      	subs	r3, r2, r3
   13276:	697a      	ldr	r2, [r7, #20]
   13278:	4413      	add	r3, r2
   1327a:	68ba      	ldr	r2, [r7, #8]
   1327c:	6939      	ldr	r1, [r7, #16]
   1327e:	4618      	mov	r0, r3
   13280:	f009 fa53 	bl	1c72a <memcmp>
   13284:	4603      	mov	r3, r0
   13286:	2b00      	cmp	r3, #0
   13288:	bf0c      	ite	eq
   1328a:	2301      	moveq	r3, #1
   1328c:	2300      	movne	r3, #0
   1328e:	b2db      	uxtb	r3, r3
   13290:	4618      	mov	r0, r3
   13292:	f7fe fe47 	bl	11f24 <mp_obj_new_bool>
   13296:	4603      	mov	r3, r0
}
   13298:	4618      	mov	r0, r3
   1329a:	3718      	adds	r7, #24
   1329c:	46bd      	mov	sp, r7
   1329e:	bd80      	pop	{r7, pc}
   132a0:	00022ea0 	.word	0x00022ea0
   132a4:	00021308 	.word	0x00021308

000132a8 <str_uni_strip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_endswith_obj, 2, 3, str_endswith);

enum { LSTRIP, RSTRIP, STRIP };

STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
   132a8:	b580      	push	{r7, lr}
   132aa:	b094      	sub	sp, #80	; 0x50
   132ac:	af02      	add	r7, sp, #8
   132ae:	60f8      	str	r0, [r7, #12]
   132b0:	60b9      	str	r1, [r7, #8]
   132b2:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   132b4:	687b      	ldr	r3, [r7, #4]
   132b6:	681b      	ldr	r3, [r3, #0]
   132b8:	4618      	mov	r0, r3
   132ba:	f7fe fe0f 	bl	11edc <MP_OBJ_IS_QSTR>
   132be:	4603      	mov	r3, r0
   132c0:	2b00      	cmp	r3, #0
   132c2:	d115      	bne.n	132f0 <str_uni_strip+0x48>
   132c4:	687b      	ldr	r3, [r7, #4]
   132c6:	681b      	ldr	r3, [r3, #0]
   132c8:	4618      	mov	r0, r3
   132ca:	f7fe fe19 	bl	11f00 <MP_OBJ_IS_OBJ>
   132ce:	4603      	mov	r3, r0
   132d0:	2b00      	cmp	r3, #0
   132d2:	d006      	beq.n	132e2 <str_uni_strip+0x3a>
   132d4:	687b      	ldr	r3, [r7, #4]
   132d6:	681b      	ldr	r3, [r3, #0]
   132d8:	681b      	ldr	r3, [r3, #0]
   132da:	699b      	ldr	r3, [r3, #24]
   132dc:	4a76      	ldr	r2, [pc, #472]	; (134b8 <str_uni_strip+0x210>)
   132de:	4293      	cmp	r3, r2
   132e0:	d006      	beq.n	132f0 <str_uni_strip+0x48>
   132e2:	4b76      	ldr	r3, [pc, #472]	; (134bc <str_uni_strip+0x214>)
   132e4:	4a76      	ldr	r2, [pc, #472]	; (134c0 <str_uni_strip+0x218>)
   132e6:	f240 310d 	movw	r1, #781	; 0x30d
   132ea:	4876      	ldr	r0, [pc, #472]	; (134c4 <str_uni_strip+0x21c>)
   132ec:	f007 ff7a 	bl	1b1e4 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   132f0:	687b      	ldr	r3, [r7, #4]
   132f2:	681b      	ldr	r3, [r3, #0]
   132f4:	4618      	mov	r0, r3
   132f6:	f7fa f9f7 	bl	d6e8 <mp_obj_get_type>
   132fa:	61f8      	str	r0, [r7, #28]

    const byte *chars_to_del;
    uint chars_to_del_len;
    static const byte whitespace[] = " \t\n\r\v\f";

    if (n_args == 1) {
   132fc:	68bb      	ldr	r3, [r7, #8]
   132fe:	2b01      	cmp	r3, #1
   13300:	d104      	bne.n	1330c <str_uni_strip+0x64>
        chars_to_del = whitespace;
   13302:	4b71      	ldr	r3, [pc, #452]	; (134c8 <str_uni_strip+0x220>)
   13304:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = sizeof(whitespace) - 1;
   13306:	2306      	movs	r3, #6
   13308:	643b      	str	r3, [r7, #64]	; 0x40
   1330a:	e032      	b.n	13372 <str_uni_strip+0xca>
    } else {
        if (mp_obj_get_type(args[1]) != self_type) {
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	3304      	adds	r3, #4
   13310:	681b      	ldr	r3, [r3, #0]
   13312:	4618      	mov	r0, r3
   13314:	f7fa f9e8 	bl	d6e8 <mp_obj_get_type>
   13318:	4602      	mov	r2, r0
   1331a:	69fb      	ldr	r3, [r7, #28]
   1331c:	429a      	cmp	r2, r3
   1331e:	d005      	beq.n	1332c <str_uni_strip+0x84>
            bad_implicit_conversion(args[1]);
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	3304      	adds	r3, #4
   13324:	681b      	ldr	r3, [r3, #0]
   13326:	4618      	mov	r0, r3
   13328:	f001 ff75 	bl	15216 <bad_implicit_conversion>
        }
        GET_STR_DATA_LEN(args[1], s, l);
   1332c:	687b      	ldr	r3, [r7, #4]
   1332e:	3304      	adds	r3, #4
   13330:	681b      	ldr	r3, [r3, #0]
   13332:	4618      	mov	r0, r3
   13334:	f7fe fdd2 	bl	11edc <MP_OBJ_IS_QSTR>
   13338:	4603      	mov	r3, r0
   1333a:	2b00      	cmp	r3, #0
   1333c:	d00b      	beq.n	13356 <str_uni_strip+0xae>
   1333e:	687b      	ldr	r3, [r7, #4]
   13340:	3304      	adds	r3, #4
   13342:	681b      	ldr	r3, [r3, #0]
   13344:	089b      	lsrs	r3, r3, #2
   13346:	f107 0210 	add.w	r2, r7, #16
   1334a:	4611      	mov	r1, r2
   1334c:	4618      	mov	r0, r3
   1334e:	f7ed ff5d 	bl	120c <qstr_data>
   13352:	63f8      	str	r0, [r7, #60]	; 0x3c
   13354:	e009      	b.n	1336a <str_uni_strip+0xc2>
   13356:	687b      	ldr	r3, [r7, #4]
   13358:	3304      	adds	r3, #4
   1335a:	681b      	ldr	r3, [r3, #0]
   1335c:	689b      	ldr	r3, [r3, #8]
   1335e:	613b      	str	r3, [r7, #16]
   13360:	687b      	ldr	r3, [r7, #4]
   13362:	3304      	adds	r3, #4
   13364:	681b      	ldr	r3, [r3, #0]
   13366:	68db      	ldr	r3, [r3, #12]
   13368:	63fb      	str	r3, [r7, #60]	; 0x3c
        chars_to_del = s;
   1336a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1336c:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = l;
   1336e:	693b      	ldr	r3, [r7, #16]
   13370:	643b      	str	r3, [r7, #64]	; 0x40
    }

    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   13372:	687b      	ldr	r3, [r7, #4]
   13374:	681b      	ldr	r3, [r3, #0]
   13376:	4618      	mov	r0, r3
   13378:	f7fe fdb0 	bl	11edc <MP_OBJ_IS_QSTR>
   1337c:	4603      	mov	r3, r0
   1337e:	2b00      	cmp	r3, #0
   13380:	d00a      	beq.n	13398 <str_uni_strip+0xf0>
   13382:	687b      	ldr	r3, [r7, #4]
   13384:	681b      	ldr	r3, [r3, #0]
   13386:	089b      	lsrs	r3, r3, #2
   13388:	f107 0214 	add.w	r2, r7, #20
   1338c:	4611      	mov	r1, r2
   1338e:	4618      	mov	r0, r3
   13390:	f7ed ff3c 	bl	120c <qstr_data>
   13394:	63b8      	str	r0, [r7, #56]	; 0x38
   13396:	e007      	b.n	133a8 <str_uni_strip+0x100>
   13398:	687b      	ldr	r3, [r7, #4]
   1339a:	681b      	ldr	r3, [r3, #0]
   1339c:	689b      	ldr	r3, [r3, #8]
   1339e:	617b      	str	r3, [r7, #20]
   133a0:	687b      	ldr	r3, [r7, #4]
   133a2:	681b      	ldr	r3, [r3, #0]
   133a4:	68db      	ldr	r3, [r3, #12]
   133a6:	63bb      	str	r3, [r7, #56]	; 0x38

    size_t first_good_char_pos = 0;
   133a8:	2300      	movs	r3, #0
   133aa:	637b      	str	r3, [r7, #52]	; 0x34
    bool first_good_char_pos_set = false;
   133ac:	2300      	movs	r3, #0
   133ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    size_t last_good_char_pos = 0;
   133b2:	2300      	movs	r3, #0
   133b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = 0;
   133b6:	2300      	movs	r3, #0
   133b8:	62bb      	str	r3, [r7, #40]	; 0x28
    int delta = 1;
   133ba:	2301      	movs	r3, #1
   133bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (type == RSTRIP) {
   133be:	68fb      	ldr	r3, [r7, #12]
   133c0:	2b01      	cmp	r3, #1
   133c2:	d105      	bne.n	133d0 <str_uni_strip+0x128>
        i = orig_str_len - 1;
   133c4:	697b      	ldr	r3, [r7, #20]
   133c6:	3b01      	subs	r3, #1
   133c8:	62bb      	str	r3, [r7, #40]	; 0x28
        delta = -1;
   133ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   133ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (size_t len = orig_str_len; len > 0; len--) {
   133d0:	697b      	ldr	r3, [r7, #20]
   133d2:	623b      	str	r3, [r7, #32]
   133d4:	e030      	b.n	13438 <str_uni_strip+0x190>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   133d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   133d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   133da:	441a      	add	r2, r3
   133dc:	2301      	movs	r3, #1
   133de:	9300      	str	r3, [sp, #0]
   133e0:	2301      	movs	r3, #1
   133e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
   133e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   133e6:	f7ff f879 	bl	124dc <find_subbytes>
   133ea:	4603      	mov	r3, r0
   133ec:	2b00      	cmp	r3, #0
   133ee:	d11c      	bne.n	1342a <str_uni_strip+0x182>
            if (!first_good_char_pos_set) {
   133f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   133f4:	f083 0301 	eor.w	r3, r3, #1
   133f8:	b2db      	uxtb	r3, r3
   133fa:	2b00      	cmp	r3, #0
   133fc:	d013      	beq.n	13426 <str_uni_strip+0x17e>
                first_good_char_pos_set = true;
   133fe:	2301      	movs	r3, #1
   13400:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                first_good_char_pos = i;
   13404:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13406:	637b      	str	r3, [r7, #52]	; 0x34
                if (type == LSTRIP) {
   13408:	68fb      	ldr	r3, [r7, #12]
   1340a:	2b00      	cmp	r3, #0
   1340c:	d103      	bne.n	13416 <str_uni_strip+0x16e>
                    last_good_char_pos = orig_str_len - 1;
   1340e:	697b      	ldr	r3, [r7, #20]
   13410:	3b01      	subs	r3, #1
   13412:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13414:	e013      	b.n	1343e <str_uni_strip+0x196>
                } else if (type == RSTRIP) {
   13416:	68fb      	ldr	r3, [r7, #12]
   13418:	2b01      	cmp	r3, #1
   1341a:	d104      	bne.n	13426 <str_uni_strip+0x17e>
                    first_good_char_pos = 0;
   1341c:	2300      	movs	r3, #0
   1341e:	637b      	str	r3, [r7, #52]	; 0x34
                    last_good_char_pos = i;
   13420:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13422:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13424:	e00b      	b.n	1343e <str_uni_strip+0x196>
                }
            }
            last_good_char_pos = i;
   13426:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13428:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        i += delta;
   1342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1342c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1342e:	4413      	add	r3, r2
   13430:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t len = orig_str_len; len > 0; len--) {
   13432:	6a3b      	ldr	r3, [r7, #32]
   13434:	3b01      	subs	r3, #1
   13436:	623b      	str	r3, [r7, #32]
   13438:	6a3b      	ldr	r3, [r7, #32]
   1343a:	2b00      	cmp	r3, #0
   1343c:	d1cb      	bne.n	133d6 <str_uni_strip+0x12e>
    }

    if (!first_good_char_pos_set) {
   1343e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13442:	f083 0301 	eor.w	r3, r3, #1
   13446:	b2db      	uxtb	r3, r3
   13448:	2b00      	cmp	r3, #0
   1344a:	d007      	beq.n	1345c <str_uni_strip+0x1b4>
        // string is all whitespace, return ''
        if (self_type == &mp_type_str) {
   1344c:	69fb      	ldr	r3, [r7, #28]
   1344e:	4a1f      	ldr	r2, [pc, #124]	; (134cc <str_uni_strip+0x224>)
   13450:	4293      	cmp	r3, r2
   13452:	d101      	bne.n	13458 <str_uni_strip+0x1b0>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   13454:	2306      	movs	r3, #6
   13456:	e02b      	b.n	134b0 <str_uni_strip+0x208>
        } else {
            return mp_const_empty_bytes;
   13458:	4b1d      	ldr	r3, [pc, #116]	; (134d0 <str_uni_strip+0x228>)
   1345a:	e029      	b.n	134b0 <str_uni_strip+0x208>
        }
    }

    assert(last_good_char_pos >= first_good_char_pos);
   1345c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13460:	429a      	cmp	r2, r3
   13462:	d206      	bcs.n	13472 <str_uni_strip+0x1ca>
   13464:	4b1b      	ldr	r3, [pc, #108]	; (134d4 <str_uni_strip+0x22c>)
   13466:	4a16      	ldr	r2, [pc, #88]	; (134c0 <str_uni_strip+0x218>)
   13468:	f240 3147 	movw	r1, #839	; 0x347
   1346c:	4815      	ldr	r0, [pc, #84]	; (134c4 <str_uni_strip+0x21c>)
   1346e:	f007 feb9 	bl	1b1e4 <__assert_func>
    //+1 to accommodate the last character
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   13472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13476:	1ad3      	subs	r3, r2, r3
   13478:	3301      	adds	r3, #1
   1347a:	61bb      	str	r3, [r7, #24]
    if (stripped_len == orig_str_len) {
   1347c:	697b      	ldr	r3, [r7, #20]
   1347e:	69ba      	ldr	r2, [r7, #24]
   13480:	429a      	cmp	r2, r3
   13482:	d10c      	bne.n	1349e <str_uni_strip+0x1f6>
        // If nothing was stripped, don't bother to dup original string
        // TODO: watch out for this case when we'll get to bytearray.strip()
        assert(first_good_char_pos == 0);
   13484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13486:	2b00      	cmp	r3, #0
   13488:	d006      	beq.n	13498 <str_uni_strip+0x1f0>
   1348a:	4b13      	ldr	r3, [pc, #76]	; (134d8 <str_uni_strip+0x230>)
   1348c:	4a0c      	ldr	r2, [pc, #48]	; (134c0 <str_uni_strip+0x218>)
   1348e:	f240 314d 	movw	r1, #845	; 0x34d
   13492:	480c      	ldr	r0, [pc, #48]	; (134c4 <str_uni_strip+0x21c>)
   13494:	f007 fea6 	bl	1b1e4 <__assert_func>
        return args[0];
   13498:	687b      	ldr	r3, [r7, #4]
   1349a:	681b      	ldr	r3, [r3, #0]
   1349c:	e008      	b.n	134b0 <str_uni_strip+0x208>
    }
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   1349e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   134a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   134a2:	4413      	add	r3, r2
   134a4:	69ba      	ldr	r2, [r7, #24]
   134a6:	4619      	mov	r1, r3
   134a8:	69f8      	ldr	r0, [r7, #28]
   134aa:	f001 fd36 	bl	14f1a <mp_obj_new_str_of_type>
   134ae:	4603      	mov	r3, r0
}
   134b0:	4618      	mov	r0, r3
   134b2:	3748      	adds	r7, #72	; 0x48
   134b4:	46bd      	mov	sp, r7
   134b6:	bd80      	pop	{r7, pc}
   134b8:	0001254f 	.word	0x0001254f
   134bc:	00022dc8 	.word	0x00022dc8
   134c0:	000232c8 	.word	0x000232c8
   134c4:	00022d2c 	.word	0x00022d2c
   134c8:	000232d8 	.word	0x000232d8
   134cc:	00023204 	.word	0x00023204
   134d0:	00023280 	.word	0x00023280
   134d4:	00022ec0 	.word	0x00022ec0
   134d8:	00022eec 	.word	0x00022eec

000134dc <str_strip>:

STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   134dc:	b580      	push	{r7, lr}
   134de:	b082      	sub	sp, #8
   134e0:	af00      	add	r7, sp, #0
   134e2:	6078      	str	r0, [r7, #4]
   134e4:	6039      	str	r1, [r7, #0]
    return str_uni_strip(STRIP, n_args, args);
   134e6:	683a      	ldr	r2, [r7, #0]
   134e8:	6879      	ldr	r1, [r7, #4]
   134ea:	2002      	movs	r0, #2
   134ec:	f7ff fedc 	bl	132a8 <str_uni_strip>
   134f0:	4603      	mov	r3, r0
}
   134f2:	4618      	mov	r0, r3
   134f4:	3708      	adds	r7, #8
   134f6:	46bd      	mov	sp, r7
   134f8:	bd80      	pop	{r7, pc}

000134fa <str_lstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_strip_obj, 1, 2, str_strip);

STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   134fa:	b580      	push	{r7, lr}
   134fc:	b082      	sub	sp, #8
   134fe:	af00      	add	r7, sp, #0
   13500:	6078      	str	r0, [r7, #4]
   13502:	6039      	str	r1, [r7, #0]
    return str_uni_strip(LSTRIP, n_args, args);
   13504:	683a      	ldr	r2, [r7, #0]
   13506:	6879      	ldr	r1, [r7, #4]
   13508:	2000      	movs	r0, #0
   1350a:	f7ff fecd 	bl	132a8 <str_uni_strip>
   1350e:	4603      	mov	r3, r0
}
   13510:	4618      	mov	r0, r3
   13512:	3708      	adds	r7, #8
   13514:	46bd      	mov	sp, r7
   13516:	bd80      	pop	{r7, pc}

00013518 <str_rstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_lstrip_obj, 1, 2, str_lstrip);

STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   13518:	b580      	push	{r7, lr}
   1351a:	b082      	sub	sp, #8
   1351c:	af00      	add	r7, sp, #0
   1351e:	6078      	str	r0, [r7, #4]
   13520:	6039      	str	r1, [r7, #0]
    return str_uni_strip(RSTRIP, n_args, args);
   13522:	683a      	ldr	r2, [r7, #0]
   13524:	6879      	ldr	r1, [r7, #4]
   13526:	2001      	movs	r0, #1
   13528:	f7ff febe 	bl	132a8 <str_uni_strip>
   1352c:	4603      	mov	r3, r0
}
   1352e:	4618      	mov	r0, r3
   13530:	3708      	adds	r7, #8
   13532:	46bd      	mov	sp, r7
   13534:	bd80      	pop	{r7, pc}

00013536 <str_to_int>:
MP_DEFINE_CONST_FUN_OBJ_2(str_center_obj, str_center);
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
   13536:	b480      	push	{r7}
   13538:	b085      	sub	sp, #20
   1353a:	af00      	add	r7, sp, #0
   1353c:	60f8      	str	r0, [r7, #12]
   1353e:	60b9      	str	r1, [r7, #8]
   13540:	607a      	str	r2, [r7, #4]
    if (str < top && '0' <= *str && *str <= '9') {
   13542:	68fa      	ldr	r2, [r7, #12]
   13544:	68bb      	ldr	r3, [r7, #8]
   13546:	429a      	cmp	r2, r3
   13548:	d226      	bcs.n	13598 <str_to_int+0x62>
   1354a:	68fb      	ldr	r3, [r7, #12]
   1354c:	781b      	ldrb	r3, [r3, #0]
   1354e:	2b2f      	cmp	r3, #47	; 0x2f
   13550:	d922      	bls.n	13598 <str_to_int+0x62>
   13552:	68fb      	ldr	r3, [r7, #12]
   13554:	781b      	ldrb	r3, [r3, #0]
   13556:	2b39      	cmp	r3, #57	; 0x39
   13558:	d81e      	bhi.n	13598 <str_to_int+0x62>
        *num = 0;
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	2200      	movs	r2, #0
   1355e:	601a      	str	r2, [r3, #0]
        do {
            *num = *num * 10 + (*str - '0');
   13560:	687b      	ldr	r3, [r7, #4]
   13562:	681a      	ldr	r2, [r3, #0]
   13564:	4613      	mov	r3, r2
   13566:	009b      	lsls	r3, r3, #2
   13568:	4413      	add	r3, r2
   1356a:	005b      	lsls	r3, r3, #1
   1356c:	461a      	mov	r2, r3
   1356e:	68fb      	ldr	r3, [r7, #12]
   13570:	781b      	ldrb	r3, [r3, #0]
   13572:	3b30      	subs	r3, #48	; 0x30
   13574:	441a      	add	r2, r3
   13576:	687b      	ldr	r3, [r7, #4]
   13578:	601a      	str	r2, [r3, #0]
            str++;
   1357a:	68fb      	ldr	r3, [r7, #12]
   1357c:	3301      	adds	r3, #1
   1357e:	60fb      	str	r3, [r7, #12]
        }
        while (str < top && '0' <= *str && *str <= '9');
   13580:	68fa      	ldr	r2, [r7, #12]
   13582:	68bb      	ldr	r3, [r7, #8]
   13584:	429a      	cmp	r2, r3
   13586:	d207      	bcs.n	13598 <str_to_int+0x62>
   13588:	68fb      	ldr	r3, [r7, #12]
   1358a:	781b      	ldrb	r3, [r3, #0]
   1358c:	2b2f      	cmp	r3, #47	; 0x2f
   1358e:	d903      	bls.n	13598 <str_to_int+0x62>
   13590:	68fb      	ldr	r3, [r7, #12]
   13592:	781b      	ldrb	r3, [r3, #0]
   13594:	2b39      	cmp	r3, #57	; 0x39
   13596:	d9e3      	bls.n	13560 <str_to_int+0x2a>
    }
    return str;
   13598:	68fb      	ldr	r3, [r7, #12]
}
   1359a:	4618      	mov	r0, r3
   1359c:	3714      	adds	r7, #20
   1359e:	46bd      	mov	sp, r7
   135a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   135a4:	4770      	bx	lr

000135a6 <isalignment>:

STATIC bool isalignment(char ch) {
   135a6:	b580      	push	{r7, lr}
   135a8:	b082      	sub	sp, #8
   135aa:	af00      	add	r7, sp, #0
   135ac:	4603      	mov	r3, r0
   135ae:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("<>=^", ch) != NULL;
   135b0:	79fb      	ldrb	r3, [r7, #7]
   135b2:	2b00      	cmp	r3, #0
   135b4:	d009      	beq.n	135ca <isalignment+0x24>
   135b6:	79fb      	ldrb	r3, [r7, #7]
   135b8:	4619      	mov	r1, r3
   135ba:	4808      	ldr	r0, [pc, #32]	; (135dc <isalignment+0x36>)
   135bc:	f009 f9fe 	bl	1c9bc <strchr>
   135c0:	4603      	mov	r3, r0
   135c2:	2b00      	cmp	r3, #0
   135c4:	d001      	beq.n	135ca <isalignment+0x24>
   135c6:	2301      	movs	r3, #1
   135c8:	e000      	b.n	135cc <isalignment+0x26>
   135ca:	2300      	movs	r3, #0
   135cc:	f003 0301 	and.w	r3, r3, #1
   135d0:	b2db      	uxtb	r3, r3
}
   135d2:	4618      	mov	r0, r3
   135d4:	3708      	adds	r7, #8
   135d6:	46bd      	mov	sp, r7
   135d8:	bd80      	pop	{r7, pc}
   135da:	bf00      	nop
   135dc:	00022f2c 	.word	0x00022f2c

000135e0 <istype>:

STATIC bool istype(char ch) {
   135e0:	b580      	push	{r7, lr}
   135e2:	b082      	sub	sp, #8
   135e4:	af00      	add	r7, sp, #0
   135e6:	4603      	mov	r3, r0
   135e8:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
   135ea:	79fb      	ldrb	r3, [r7, #7]
   135ec:	2b00      	cmp	r3, #0
   135ee:	d009      	beq.n	13604 <istype+0x24>
   135f0:	79fb      	ldrb	r3, [r7, #7]
   135f2:	4619      	mov	r1, r3
   135f4:	4807      	ldr	r0, [pc, #28]	; (13614 <istype+0x34>)
   135f6:	f009 f9e1 	bl	1c9bc <strchr>
   135fa:	4603      	mov	r3, r0
   135fc:	2b00      	cmp	r3, #0
   135fe:	d001      	beq.n	13604 <istype+0x24>
   13600:	2301      	movs	r3, #1
   13602:	e000      	b.n	13606 <istype+0x26>
   13604:	2300      	movs	r3, #0
   13606:	f003 0301 	and.w	r3, r3, #1
   1360a:	b2db      	uxtb	r3, r3
}
   1360c:	4618      	mov	r0, r3
   1360e:	3708      	adds	r7, #8
   13610:	46bd      	mov	sp, r7
   13612:	bd80      	pop	{r7, pc}
   13614:	00022f34 	.word	0x00022f34

00013618 <arg_looks_integer>:

STATIC bool arg_looks_integer(mp_obj_t arg) {
   13618:	b580      	push	{r7, lr}
   1361a:	b082      	sub	sp, #8
   1361c:	af00      	add	r7, sp, #0
   1361e:	6078      	str	r0, [r7, #4]
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
   13620:	6878      	ldr	r0, [r7, #4]
   13622:	f7fe fc6d 	bl	11f00 <MP_OBJ_IS_OBJ>
   13626:	4603      	mov	r3, r0
   13628:	2b00      	cmp	r3, #0
   1362a:	d004      	beq.n	13636 <arg_looks_integer+0x1e>
   1362c:	687b      	ldr	r3, [r7, #4]
   1362e:	681b      	ldr	r3, [r3, #0]
   13630:	4a0e      	ldr	r2, [pc, #56]	; (1366c <arg_looks_integer+0x54>)
   13632:	4293      	cmp	r3, r2
   13634:	d010      	beq.n	13658 <arg_looks_integer+0x40>
   13636:	6878      	ldr	r0, [r7, #4]
   13638:	f7fe fc3e 	bl	11eb8 <MP_OBJ_IS_SMALL_INT>
   1363c:	4603      	mov	r3, r0
   1363e:	2b00      	cmp	r3, #0
   13640:	d10a      	bne.n	13658 <arg_looks_integer+0x40>
   13642:	6878      	ldr	r0, [r7, #4]
   13644:	f7fe fc5c 	bl	11f00 <MP_OBJ_IS_OBJ>
   13648:	4603      	mov	r3, r0
   1364a:	2b00      	cmp	r3, #0
   1364c:	d006      	beq.n	1365c <arg_looks_integer+0x44>
   1364e:	687b      	ldr	r3, [r7, #4]
   13650:	681b      	ldr	r3, [r3, #0]
   13652:	4a07      	ldr	r2, [pc, #28]	; (13670 <arg_looks_integer+0x58>)
   13654:	4293      	cmp	r3, r2
   13656:	d101      	bne.n	1365c <arg_looks_integer+0x44>
   13658:	2301      	movs	r3, #1
   1365a:	e000      	b.n	1365e <arg_looks_integer+0x46>
   1365c:	2300      	movs	r3, #0
   1365e:	f003 0301 	and.w	r3, r3, #1
   13662:	b2db      	uxtb	r3, r3
}
   13664:	4618      	mov	r0, r3
   13666:	3708      	adds	r7, #8
   13668:	46bd      	mov	sp, r7
   1366a:	bd80      	pop	{r7, pc}
   1366c:	000212cc 	.word	0x000212cc
   13670:	00022610 	.word	0x00022610

00013674 <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
   13674:	b580      	push	{r7, lr}
   13676:	b082      	sub	sp, #8
   13678:	af00      	add	r7, sp, #0
   1367a:	6078      	str	r0, [r7, #4]
    return arg_looks_integer(arg)
   1367c:	6878      	ldr	r0, [r7, #4]
   1367e:	f7ff ffcb 	bl	13618 <arg_looks_integer>
   13682:	4603      	mov	r3, r0
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
#endif
    ;
}
   13684:	4618      	mov	r0, r3
   13686:	3708      	adds	r7, #8
   13688:	46bd      	mov	sp, r7
   1368a:	bd80      	pop	{r7, pc}

0001368c <arg_as_int>:

STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
   1368c:	b480      	push	{r7}
   1368e:	b083      	sub	sp, #12
   13690:	af00      	add	r7, sp, #0
   13692:	6078      	str	r0, [r7, #4]
#if MICROPY_PY_BUILTINS_FLOAT
    if (mp_obj_is_float(arg)) {
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    }
#endif
    return arg;
   13694:	687b      	ldr	r3, [r7, #4]
}
   13696:	4618      	mov	r0, r3
   13698:	370c      	adds	r7, #12
   1369a:	46bd      	mov	sp, r7
   1369c:	f85d 7b04 	ldr.w	r7, [sp], #4
   136a0:	4770      	bx	lr

000136a2 <terse_str_format_value_error>:

#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
STATIC NORETURN void terse_str_format_value_error(void) {
   136a2:	b580      	push	{r7, lr}
   136a4:	af00      	add	r7, sp, #0
    mp_raise_ValueError("bad format string");
   136a6:	4801      	ldr	r0, [pc, #4]	; (136ac <terse_str_format_value_error+0xa>)
   136a8:	f7f9 fbfd 	bl	cea6 <mp_raise_ValueError>
   136ac:	00022f44 	.word	0x00022f44

000136b0 <mp_obj_str_format_helper>:
#else
// define to nothing to improve coverage
#define terse_str_format_value_error()
#endif

STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   136b0:	b590      	push	{r4, r7, lr}
   136b2:	b0ad      	sub	sp, #180	; 0xb4
   136b4:	af04      	add	r7, sp, #16
   136b6:	60f8      	str	r0, [r7, #12]
   136b8:	60b9      	str	r1, [r7, #8]
   136ba:	607a      	str	r2, [r7, #4]
   136bc:	603b      	str	r3, [r7, #0]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   136be:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   136c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   136c6:	2110      	movs	r1, #16
   136c8:	4618      	mov	r0, r3
   136ca:	f7ed fe64 	bl	1396 <vstr_init_print>

    for (; str < top; str++) {
   136ce:	f000 bc91 	b.w	13ff4 <mp_obj_str_format_helper+0x944>
        if (*str == '}') {
   136d2:	68bb      	ldr	r3, [r7, #8]
   136d4:	781b      	ldrb	r3, [r3, #0]
   136d6:	2b7d      	cmp	r3, #125	; 0x7d
   136d8:	d114      	bne.n	13704 <mp_obj_str_format_helper+0x54>
            str++;
   136da:	68bb      	ldr	r3, [r7, #8]
   136dc:	3301      	adds	r3, #1
   136de:	60bb      	str	r3, [r7, #8]
            if (str < top && *str == '}') {
   136e0:	68ba      	ldr	r2, [r7, #8]
   136e2:	687b      	ldr	r3, [r7, #4]
   136e4:	429a      	cmp	r2, r3
   136e6:	d20b      	bcs.n	13700 <mp_obj_str_format_helper+0x50>
   136e8:	68bb      	ldr	r3, [r7, #8]
   136ea:	781b      	ldrb	r3, [r3, #0]
   136ec:	2b7d      	cmp	r3, #125	; 0x7d
   136ee:	d107      	bne.n	13700 <mp_obj_str_format_helper+0x50>
                vstr_add_byte(&vstr, '}');
   136f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
   136f4:	217d      	movs	r1, #125	; 0x7d
   136f6:	4618      	mov	r0, r3
   136f8:	f7ed ff52 	bl	15a0 <vstr_add_byte>
                continue;
   136fc:	f000 bc77 	b.w	13fee <mp_obj_str_format_helper+0x93e>
            }
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13700:	f7ff ffcf 	bl	136a2 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("single '}' encountered in format string");
            }
        }
        if (*str != '{') {
   13704:	68bb      	ldr	r3, [r7, #8]
   13706:	781b      	ldrb	r3, [r3, #0]
   13708:	2b7b      	cmp	r3, #123	; 0x7b
   1370a:	d009      	beq.n	13720 <mp_obj_str_format_helper+0x70>
            vstr_add_byte(&vstr, *str);
   1370c:	68bb      	ldr	r3, [r7, #8]
   1370e:	781a      	ldrb	r2, [r3, #0]
   13710:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13714:	4611      	mov	r1, r2
   13716:	4618      	mov	r0, r3
   13718:	f7ed ff42 	bl	15a0 <vstr_add_byte>
            continue;
   1371c:	f000 bc67 	b.w	13fee <mp_obj_str_format_helper+0x93e>
        }

        str++;
   13720:	68bb      	ldr	r3, [r7, #8]
   13722:	3301      	adds	r3, #1
   13724:	60bb      	str	r3, [r7, #8]
        if (str < top && *str == '{') {
   13726:	68ba      	ldr	r2, [r7, #8]
   13728:	687b      	ldr	r3, [r7, #4]
   1372a:	429a      	cmp	r2, r3
   1372c:	d20b      	bcs.n	13746 <mp_obj_str_format_helper+0x96>
   1372e:	68bb      	ldr	r3, [r7, #8]
   13730:	781b      	ldrb	r3, [r3, #0]
   13732:	2b7b      	cmp	r3, #123	; 0x7b
   13734:	d107      	bne.n	13746 <mp_obj_str_format_helper+0x96>
            vstr_add_byte(&vstr, '{');
   13736:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1373a:	217b      	movs	r1, #123	; 0x7b
   1373c:	4618      	mov	r0, r3
   1373e:	f7ed ff2f 	bl	15a0 <vstr_add_byte>
            continue;
   13742:	f000 bc54 	b.w	13fee <mp_obj_str_format_helper+0x93e>
        }

        // replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"

        const char *field_name = NULL;
   13746:	2300      	movs	r3, #0
   13748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const char *field_name_top = NULL;
   1374c:	2300      	movs	r3, #0
   1374e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char conversion = '\0';
   13752:	2300      	movs	r3, #0
   13754:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        const char *format_spec = NULL;
   13758:	2300      	movs	r3, #0
   1375a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   1375e:	68ba      	ldr	r2, [r7, #8]
   13760:	687b      	ldr	r3, [r7, #4]
   13762:	429a      	cmp	r2, r3
   13764:	d225      	bcs.n	137b2 <mp_obj_str_format_helper+0x102>
   13766:	68bb      	ldr	r3, [r7, #8]
   13768:	781b      	ldrb	r3, [r3, #0]
   1376a:	2b7d      	cmp	r3, #125	; 0x7d
   1376c:	d021      	beq.n	137b2 <mp_obj_str_format_helper+0x102>
   1376e:	68bb      	ldr	r3, [r7, #8]
   13770:	781b      	ldrb	r3, [r3, #0]
   13772:	2b21      	cmp	r3, #33	; 0x21
   13774:	d01d      	beq.n	137b2 <mp_obj_str_format_helper+0x102>
   13776:	68bb      	ldr	r3, [r7, #8]
   13778:	781b      	ldrb	r3, [r3, #0]
   1377a:	2b3a      	cmp	r3, #58	; 0x3a
   1377c:	d019      	beq.n	137b2 <mp_obj_str_format_helper+0x102>
            field_name = (const char *)str;
   1377e:	68bb      	ldr	r3, [r7, #8]
   13780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13784:	e002      	b.n	1378c <mp_obj_str_format_helper+0xdc>
                ++str;
   13786:	68bb      	ldr	r3, [r7, #8]
   13788:	3301      	adds	r3, #1
   1378a:	60bb      	str	r3, [r7, #8]
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   1378c:	68ba      	ldr	r2, [r7, #8]
   1378e:	687b      	ldr	r3, [r7, #4]
   13790:	429a      	cmp	r2, r3
   13792:	d20b      	bcs.n	137ac <mp_obj_str_format_helper+0xfc>
   13794:	68bb      	ldr	r3, [r7, #8]
   13796:	781b      	ldrb	r3, [r3, #0]
   13798:	2b7d      	cmp	r3, #125	; 0x7d
   1379a:	d007      	beq.n	137ac <mp_obj_str_format_helper+0xfc>
   1379c:	68bb      	ldr	r3, [r7, #8]
   1379e:	781b      	ldrb	r3, [r3, #0]
   137a0:	2b21      	cmp	r3, #33	; 0x21
   137a2:	d003      	beq.n	137ac <mp_obj_str_format_helper+0xfc>
   137a4:	68bb      	ldr	r3, [r7, #8]
   137a6:	781b      	ldrb	r3, [r3, #0]
   137a8:	2b3a      	cmp	r3, #58	; 0x3a
   137aa:	d1ec      	bne.n	13786 <mp_obj_str_format_helper+0xd6>
            }
            field_name_top = (const char *)str;
   137ac:	68bb      	ldr	r3, [r7, #8]
   137ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // conversion ::=  "r" | "s"

        if (str < top && *str == '!') {
   137b2:	68ba      	ldr	r2, [r7, #8]
   137b4:	687b      	ldr	r3, [r7, #4]
   137b6:	429a      	cmp	r2, r3
   137b8:	d21b      	bcs.n	137f2 <mp_obj_str_format_helper+0x142>
   137ba:	68bb      	ldr	r3, [r7, #8]
   137bc:	781b      	ldrb	r3, [r3, #0]
   137be:	2b21      	cmp	r3, #33	; 0x21
   137c0:	d117      	bne.n	137f2 <mp_obj_str_format_helper+0x142>
            str++;
   137c2:	68bb      	ldr	r3, [r7, #8]
   137c4:	3301      	adds	r3, #1
   137c6:	60bb      	str	r3, [r7, #8]
            if (str < top && (*str == 'r' || *str == 's')) {
   137c8:	68ba      	ldr	r2, [r7, #8]
   137ca:	687b      	ldr	r3, [r7, #4]
   137cc:	429a      	cmp	r2, r3
   137ce:	d20e      	bcs.n	137ee <mp_obj_str_format_helper+0x13e>
   137d0:	68bb      	ldr	r3, [r7, #8]
   137d2:	781b      	ldrb	r3, [r3, #0]
   137d4:	2b72      	cmp	r3, #114	; 0x72
   137d6:	d003      	beq.n	137e0 <mp_obj_str_format_helper+0x130>
   137d8:	68bb      	ldr	r3, [r7, #8]
   137da:	781b      	ldrb	r3, [r3, #0]
   137dc:	2b73      	cmp	r3, #115	; 0x73
   137de:	d106      	bne.n	137ee <mp_obj_str_format_helper+0x13e>
                conversion = *str++;
   137e0:	68bb      	ldr	r3, [r7, #8]
   137e2:	1c5a      	adds	r2, r3, #1
   137e4:	60ba      	str	r2, [r7, #8]
   137e6:	781b      	ldrb	r3, [r3, #0]
   137e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   137ec:	e001      	b.n	137f2 <mp_obj_str_format_helper+0x142>
            } else {
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   137ee:	f7ff ff58 	bl	136a2 <terse_str_format_value_error>
                    }
                }
            }
        }

        if (str < top && *str == ':') {
   137f2:	68ba      	ldr	r2, [r7, #8]
   137f4:	687b      	ldr	r3, [r7, #4]
   137f6:	429a      	cmp	r2, r3
   137f8:	d231      	bcs.n	1385e <mp_obj_str_format_helper+0x1ae>
   137fa:	68bb      	ldr	r3, [r7, #8]
   137fc:	781b      	ldrb	r3, [r3, #0]
   137fe:	2b3a      	cmp	r3, #58	; 0x3a
   13800:	d12d      	bne.n	1385e <mp_obj_str_format_helper+0x1ae>
            str++;
   13802:	68bb      	ldr	r3, [r7, #8]
   13804:	3301      	adds	r3, #1
   13806:	60bb      	str	r3, [r7, #8]
            // {:} is the same as {}, which is the same as {!s}
            // This makes a difference when passing in a True or False
            // '{}'.format(True) returns 'True'
            // '{:d}'.format(True) returns '1'
            // So we treat {:} as {} and this later gets treated to be {!s}
            if (*str != '}') {
   13808:	68bb      	ldr	r3, [r7, #8]
   1380a:	781b      	ldrb	r3, [r3, #0]
   1380c:	2b7d      	cmp	r3, #125	; 0x7d
   1380e:	d026      	beq.n	1385e <mp_obj_str_format_helper+0x1ae>
                format_spec = str;
   13810:	68bb      	ldr	r3, [r7, #8]
   13812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                for (int nest = 1; str < top;) {
   13816:	2301      	movs	r3, #1
   13818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1381c:	e019      	b.n	13852 <mp_obj_str_format_helper+0x1a2>
                    if (*str == '{') {
   1381e:	68bb      	ldr	r3, [r7, #8]
   13820:	781b      	ldrb	r3, [r3, #0]
   13822:	2b7b      	cmp	r3, #123	; 0x7b
   13824:	d105      	bne.n	13832 <mp_obj_str_format_helper+0x182>
                        ++nest;
   13826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1382a:	3301      	adds	r3, #1
   1382c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13830:	e00c      	b.n	1384c <mp_obj_str_format_helper+0x19c>
                    } else if (*str == '}') {
   13832:	68bb      	ldr	r3, [r7, #8]
   13834:	781b      	ldrb	r3, [r3, #0]
   13836:	2b7d      	cmp	r3, #125	; 0x7d
   13838:	d108      	bne.n	1384c <mp_obj_str_format_helper+0x19c>
                        if (--nest == 0) {
   1383a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1383e:	3b01      	subs	r3, #1
   13840:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13848:	2b00      	cmp	r3, #0
   1384a:	d007      	beq.n	1385c <mp_obj_str_format_helper+0x1ac>
                            break;
                        }
                    }
                    ++str;
   1384c:	68bb      	ldr	r3, [r7, #8]
   1384e:	3301      	adds	r3, #1
   13850:	60bb      	str	r3, [r7, #8]
                for (int nest = 1; str < top;) {
   13852:	68ba      	ldr	r2, [r7, #8]
   13854:	687b      	ldr	r3, [r7, #4]
   13856:	429a      	cmp	r2, r3
   13858:	d3e1      	bcc.n	1381e <mp_obj_str_format_helper+0x16e>
   1385a:	e000      	b.n	1385e <mp_obj_str_format_helper+0x1ae>
                            break;
   1385c:	bf00      	nop
                }
            }
        }
        if (str >= top) {
   1385e:	68ba      	ldr	r2, [r7, #8]
   13860:	687b      	ldr	r3, [r7, #4]
   13862:	429a      	cmp	r2, r3
   13864:	d301      	bcc.n	1386a <mp_obj_str_format_helper+0x1ba>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13866:	f7ff ff1c 	bl	136a2 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("unmatched '{' in format");
            }
        }
        if (*str != '}') {
   1386a:	68bb      	ldr	r3, [r7, #8]
   1386c:	781b      	ldrb	r3, [r3, #0]
   1386e:	2b7d      	cmp	r3, #125	; 0x7d
   13870:	d001      	beq.n	13876 <mp_obj_str_format_helper+0x1c6>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13872:	f7ff ff16 	bl	136a2 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("expected ':' after format specifier");
            }
        }

        mp_obj_t arg = mp_const_none;
   13876:	4ba8      	ldr	r3, [pc, #672]	; (13b18 <mp_obj_str_format_helper+0x468>)
   13878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        if (field_name) {
   1387c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13880:	2b00      	cmp	r3, #0
   13882:	d07b      	beq.n	1397c <mp_obj_str_format_helper+0x2cc>
            int index = 0;
   13884:	2300      	movs	r3, #0
   13886:	643b      	str	r3, [r7, #64]	; 0x40
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   13888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1388c:	781b      	ldrb	r3, [r3, #0]
   1388e:	4618      	mov	r0, r3
   13890:	f7ee fda8 	bl	23e4 <unichar_isdigit>
   13894:	4603      	mov	r3, r0
   13896:	2b00      	cmp	r3, #0
   13898:	d028      	beq.n	138ec <mp_obj_str_format_helper+0x23c>
                if (*arg_i > 0) {
   1389a:	683b      	ldr	r3, [r7, #0]
   1389c:	681b      	ldr	r3, [r3, #0]
   1389e:	2b00      	cmp	r3, #0
   138a0:	dd01      	ble.n	138a6 <mp_obj_str_format_helper+0x1f6>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   138a2:	f7ff fefe 	bl	136a2 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError(
                            "can't switch from automatic field numbering to manual field specification");
                    }
                }
                field_name = str_to_int(field_name, field_name_top, &index);
   138a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
   138aa:	461a      	mov	r2, r3
   138ac:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   138b0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   138b4:	f7ff fe3f 	bl	13536 <str_to_int>
   138b8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                if ((uint)index >= n_args - 1) {
   138bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   138c0:	3b01      	subs	r3, #1
   138c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   138c4:	4293      	cmp	r3, r2
   138c6:	d803      	bhi.n	138d0 <mp_obj_str_format_helper+0x220>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   138c8:	4994      	ldr	r1, [pc, #592]	; (13b1c <mp_obj_str_format_helper+0x46c>)
   138ca:	4895      	ldr	r0, [pc, #596]	; (13b20 <mp_obj_str_format_helper+0x470>)
   138cc:	f7f9 fad4 	bl	ce78 <mp_raise_msg>
                }
                arg = args[index + 1];
   138d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   138d2:	3301      	adds	r3, #1
   138d4:	009b      	lsls	r3, r3, #2
   138d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   138da:	4413      	add	r3, r2
   138dc:	681b      	ldr	r3, [r3, #0]
   138de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                *arg_i = -1;
   138e2:	683b      	ldr	r3, [r7, #0]
   138e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   138e8:	601a      	str	r2, [r3, #0]
   138ea:	e03e      	b.n	1396a <mp_obj_str_format_helper+0x2ba>
            } else {
                const char *lookup;
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   138ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   138f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   138f4:	e004      	b.n	13900 <mp_obj_str_format_helper+0x250>
   138f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   138fa:	3301      	adds	r3, #1
   138fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13900:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13908:	429a      	cmp	r2, r3
   1390a:	d209      	bcs.n	13920 <mp_obj_str_format_helper+0x270>
   1390c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13910:	781b      	ldrb	r3, [r3, #0]
   13912:	2b2e      	cmp	r3, #46	; 0x2e
   13914:	d004      	beq.n	13920 <mp_obj_str_format_helper+0x270>
   13916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1391a:	781b      	ldrb	r3, [r3, #0]
   1391c:	2b5b      	cmp	r3, #91	; 0x5b
   1391e:	d1ea      	bne.n	138f6 <mp_obj_str_format_helper+0x246>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   13920:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13928:	1ad3      	subs	r3, r2, r3
   1392a:	4619      	mov	r1, r3
   1392c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13930:	f001 fb0e 	bl	14f50 <mp_obj_new_str_via_qstr>
   13934:	6738      	str	r0, [r7, #112]	; 0x70
                field_name = lookup;
   13936:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1393a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   1393e:	2200      	movs	r2, #0
   13940:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13942:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   13946:	f7f9 fd25 	bl	d394 <mp_map_lookup>
   1394a:	66f8      	str	r0, [r7, #108]	; 0x6c
                if (key_elem == NULL) {
   1394c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1394e:	2b00      	cmp	r3, #0
   13950:	d107      	bne.n	13962 <mp_obj_str_format_helper+0x2b2>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   13952:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13954:	4873      	ldr	r0, [pc, #460]	; (13b24 <mp_obj_str_format_helper+0x474>)
   13956:	f7fb fcbd 	bl	f2d4 <mp_obj_new_exception_arg1>
   1395a:	4603      	mov	r3, r0
   1395c:	4618      	mov	r0, r3
   1395e:	f7ec fcbf 	bl	2e0 <nlr_jump>
                }
                arg = key_elem->value;
   13962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13964:	685b      	ldr	r3, [r3, #4]
   13966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
            if (field_name < field_name_top) {
   1396a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1396e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13972:	429a      	cmp	r2, r3
   13974:	d223      	bcs.n	139be <mp_obj_str_format_helper+0x30e>
                mp_raise_NotImplementedError("attributes not supported yet");
   13976:	486c      	ldr	r0, [pc, #432]	; (13b28 <mp_obj_str_format_helper+0x478>)
   13978:	f7f9 fabc 	bl	cef4 <mp_raise_NotImplementedError>
            }
        } else {
            if (*arg_i < 0) {
   1397c:	683b      	ldr	r3, [r7, #0]
   1397e:	681b      	ldr	r3, [r3, #0]
   13980:	2b00      	cmp	r3, #0
   13982:	da01      	bge.n	13988 <mp_obj_str_format_helper+0x2d8>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13984:	f7ff fe8d 	bl	136a2 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError(
                        "can't switch from manual field specification to automatic field numbering");
                }
            }
            if ((uint)*arg_i >= n_args - 1) {
   13988:	683b      	ldr	r3, [r7, #0]
   1398a:	681b      	ldr	r3, [r3, #0]
   1398c:	461a      	mov	r2, r3
   1398e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13992:	3b01      	subs	r3, #1
   13994:	429a      	cmp	r2, r3
   13996:	d303      	bcc.n	139a0 <mp_obj_str_format_helper+0x2f0>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13998:	4960      	ldr	r1, [pc, #384]	; (13b1c <mp_obj_str_format_helper+0x46c>)
   1399a:	4861      	ldr	r0, [pc, #388]	; (13b20 <mp_obj_str_format_helper+0x470>)
   1399c:	f7f9 fa6c 	bl	ce78 <mp_raise_msg>
            }
            arg = args[(*arg_i) + 1];
   139a0:	683b      	ldr	r3, [r7, #0]
   139a2:	681b      	ldr	r3, [r3, #0]
   139a4:	3301      	adds	r3, #1
   139a6:	009b      	lsls	r3, r3, #2
   139a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   139ac:	4413      	add	r3, r2
   139ae:	681b      	ldr	r3, [r3, #0]
   139b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*arg_i)++;
   139b4:	683b      	ldr	r3, [r7, #0]
   139b6:	681b      	ldr	r3, [r3, #0]
   139b8:	1c5a      	adds	r2, r3, #1
   139ba:	683b      	ldr	r3, [r7, #0]
   139bc:	601a      	str	r2, [r3, #0]
        }
        if (!format_spec && !conversion) {
   139be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   139c2:	2b00      	cmp	r3, #0
   139c4:	d106      	bne.n	139d4 <mp_obj_str_format_helper+0x324>
   139c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   139ca:	2b00      	cmp	r3, #0
   139cc:	d102      	bne.n	139d4 <mp_obj_str_format_helper+0x324>
            conversion = 's';
   139ce:	2373      	movs	r3, #115	; 0x73
   139d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        }
        if (conversion) {
   139d4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   139d8:	2b00      	cmp	r3, #0
   139da:	d02e      	beq.n	13a3a <mp_obj_str_format_helper+0x38a>
            mp_print_kind_t print_kind;
            if (conversion == 's') {
   139dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   139e0:	2b73      	cmp	r3, #115	; 0x73
   139e2:	d103      	bne.n	139ec <mp_obj_str_format_helper+0x33c>
                print_kind = PRINT_STR;
   139e4:	2300      	movs	r3, #0
   139e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   139ea:	e00d      	b.n	13a08 <mp_obj_str_format_helper+0x358>
            } else {
                assert(conversion == 'r');
   139ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   139f0:	2b72      	cmp	r3, #114	; 0x72
   139f2:	d006      	beq.n	13a02 <mp_obj_str_format_helper+0x352>
   139f4:	4b4d      	ldr	r3, [pc, #308]	; (13b2c <mp_obj_str_format_helper+0x47c>)
   139f6:	4a4e      	ldr	r2, [pc, #312]	; (13b30 <mp_obj_str_format_helper+0x480>)
   139f8:	f240 4147 	movw	r1, #1095	; 0x447
   139fc:	484d      	ldr	r0, [pc, #308]	; (13b34 <mp_obj_str_format_helper+0x484>)
   139fe:	f007 fbf1 	bl	1b1e4 <__assert_func>
                print_kind = PRINT_REPR;
   13a02:	2301      	movs	r3, #1
   13a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            vstr_t arg_vstr;
            mp_print_t arg_print;
            vstr_init_print(&arg_vstr, 16, &arg_print);
   13a08:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13a0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13a10:	2110      	movs	r1, #16
   13a12:	4618      	mov	r0, r3
   13a14:	f7ed fcbf 	bl	1396 <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   13a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
   13a1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13a20:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13a24:	4618      	mov	r0, r3
   13a26:	f7f9 fe90 	bl	d74a <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   13a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13a2e:	4619      	mov	r1, r3
   13a30:	4841      	ldr	r0, [pc, #260]	; (13b38 <mp_obj_str_format_helper+0x488>)
   13a32:	f001 fa9e 	bl	14f72 <mp_obj_new_str_from_vstr>
   13a36:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        }

        char fill = '\0';
   13a3a:	2300      	movs	r3, #0
   13a3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        char align = '\0';
   13a40:	2300      	movs	r3, #0
   13a42:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        int width = -1;
   13a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a4a:	64bb      	str	r3, [r7, #72]	; 0x48
        int precision = -1;
   13a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a50:	647b      	str	r3, [r7, #68]	; 0x44
        char type = '\0';
   13a52:	2300      	movs	r3, #0
   13a54:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        int flags = 0;
   13a58:	2300      	movs	r3, #0
   13a5a:	67bb      	str	r3, [r7, #120]	; 0x78

        if (format_spec) {
   13a5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13a60:	2b00      	cmp	r3, #0
   13a62:	f000 80ce 	beq.w	13c02 <mp_obj_str_format_helper+0x552>
            // precision   ::=  integer
            // type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

            // recursively call the formatter to format any nested specifiers
            MP_STACK_CHECK();
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   13a66:	f107 0018 	add.w	r0, r7, #24
   13a6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   13a6e:	9302      	str	r3, [sp, #8]
   13a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   13a74:	9301      	str	r3, [sp, #4]
   13a76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13a7a:	9300      	str	r3, [sp, #0]
   13a7c:	683b      	ldr	r3, [r7, #0]
   13a7e:	68ba      	ldr	r2, [r7, #8]
   13a80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   13a84:	f7ff fe14 	bl	136b0 <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   13a88:	f107 0318 	add.w	r3, r7, #24
   13a8c:	4618      	mov	r0, r3
   13a8e:	f7ed fd6c 	bl	156a <vstr_null_terminated_str>
   13a92:	6778      	str	r0, [r7, #116]	; 0x74
            const char *stop = s + format_spec_vstr.len;
   13a94:	69fb      	ldr	r3, [r7, #28]
   13a96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13a98:	4413      	add	r3, r2
   13a9a:	66bb      	str	r3, [r7, #104]	; 0x68
            if (isalignment(*s)) {
   13a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13a9e:	781b      	ldrb	r3, [r3, #0]
   13aa0:	4618      	mov	r0, r3
   13aa2:	f7ff fd80 	bl	135a6 <isalignment>
   13aa6:	4603      	mov	r3, r0
   13aa8:	2b00      	cmp	r3, #0
   13aaa:	d006      	beq.n	13aba <mp_obj_str_format_helper+0x40a>
                align = *s++;
   13aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13aae:	1c5a      	adds	r2, r3, #1
   13ab0:	677a      	str	r2, [r7, #116]	; 0x74
   13ab2:	781b      	ldrb	r3, [r3, #0]
   13ab4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13ab8:	e018      	b.n	13aec <mp_obj_str_format_helper+0x43c>
            } else if (*s && isalignment(s[1])) {
   13aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13abc:	781b      	ldrb	r3, [r3, #0]
   13abe:	2b00      	cmp	r3, #0
   13ac0:	d014      	beq.n	13aec <mp_obj_str_format_helper+0x43c>
   13ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ac4:	3301      	adds	r3, #1
   13ac6:	781b      	ldrb	r3, [r3, #0]
   13ac8:	4618      	mov	r0, r3
   13aca:	f7ff fd6c 	bl	135a6 <isalignment>
   13ace:	4603      	mov	r3, r0
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	d00b      	beq.n	13aec <mp_obj_str_format_helper+0x43c>
                fill = *s++;
   13ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ad6:	1c5a      	adds	r2, r3, #1
   13ad8:	677a      	str	r2, [r7, #116]	; 0x74
   13ada:	781b      	ldrb	r3, [r3, #0]
   13adc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                align = *s++;
   13ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ae2:	1c5a      	adds	r2, r3, #1
   13ae4:	677a      	str	r2, [r7, #116]	; 0x74
   13ae6:	781b      	ldrb	r3, [r3, #0]
   13ae8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
            if (*s == '+' || *s == '-' || *s == ' ') {
   13aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13aee:	781b      	ldrb	r3, [r3, #0]
   13af0:	2b2b      	cmp	r3, #43	; 0x2b
   13af2:	d007      	beq.n	13b04 <mp_obj_str_format_helper+0x454>
   13af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13af6:	781b      	ldrb	r3, [r3, #0]
   13af8:	2b2d      	cmp	r3, #45	; 0x2d
   13afa:	d003      	beq.n	13b04 <mp_obj_str_format_helper+0x454>
   13afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13afe:	781b      	ldrb	r3, [r3, #0]
   13b00:	2b20      	cmp	r3, #32
   13b02:	d126      	bne.n	13b52 <mp_obj_str_format_helper+0x4a2>
                if (*s == '+') {
   13b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13b06:	781b      	ldrb	r3, [r3, #0]
   13b08:	2b2b      	cmp	r3, #43	; 0x2b
   13b0a:	d117      	bne.n	13b3c <mp_obj_str_format_helper+0x48c>
                    flags |= PF_FLAG_SHOW_SIGN;
   13b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13b0e:	f043 0302 	orr.w	r3, r3, #2
   13b12:	67bb      	str	r3, [r7, #120]	; 0x78
   13b14:	e01a      	b.n	13b4c <mp_obj_str_format_helper+0x49c>
   13b16:	bf00      	nop
   13b18:	00022b54 	.word	0x00022b54
   13b1c:	00022f58 	.word	0x00022f58
   13b20:	00021c00 	.word	0x00021c00
   13b24:	00021c3c 	.word	0x00021c3c
   13b28:	00022f74 	.word	0x00022f74
   13b2c:	00022f94 	.word	0x00022f94
   13b30:	000232e0 	.word	0x000232e0
   13b34:	00022d2c 	.word	0x00022d2c
   13b38:	00023204 	.word	0x00023204
                } else if (*s == ' ') {
   13b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13b3e:	781b      	ldrb	r3, [r3, #0]
   13b40:	2b20      	cmp	r3, #32
   13b42:	d103      	bne.n	13b4c <mp_obj_str_format_helper+0x49c>
                    flags |= PF_FLAG_SPACE_SIGN;
   13b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13b46:	f043 0304 	orr.w	r3, r3, #4
   13b4a:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                s++;
   13b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13b4e:	3301      	adds	r3, #1
   13b50:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '#') {
   13b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13b54:	781b      	ldrb	r3, [r3, #0]
   13b56:	2b23      	cmp	r3, #35	; 0x23
   13b58:	d106      	bne.n	13b68 <mp_obj_str_format_helper+0x4b8>
                flags |= PF_FLAG_SHOW_PREFIX;
   13b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13b5c:	f043 0310 	orr.w	r3, r3, #16
   13b60:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13b64:	3301      	adds	r3, #1
   13b66:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '0') {
   13b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13b6a:	781b      	ldrb	r3, [r3, #0]
   13b6c:	2b30      	cmp	r3, #48	; 0x30
   13b6e:	d10d      	bne.n	13b8c <mp_obj_str_format_helper+0x4dc>
                if (!align) {
   13b70:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13b74:	2b00      	cmp	r3, #0
   13b76:	d102      	bne.n	13b7e <mp_obj_str_format_helper+0x4ce>
                    align = '=';
   13b78:	233d      	movs	r3, #61	; 0x3d
   13b7a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
                }
                if (!fill) {
   13b7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13b82:	2b00      	cmp	r3, #0
   13b84:	d102      	bne.n	13b8c <mp_obj_str_format_helper+0x4dc>
                    fill = '0';
   13b86:	2330      	movs	r3, #48	; 0x30
   13b88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                }
            }
            s = str_to_int(s, stop, &width);
   13b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
   13b90:	461a      	mov	r2, r3
   13b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13b94:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13b96:	f7ff fcce 	bl	13536 <str_to_int>
   13b9a:	6778      	str	r0, [r7, #116]	; 0x74
            if (*s == ',') {
   13b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13b9e:	781b      	ldrb	r3, [r3, #0]
   13ba0:	2b2c      	cmp	r3, #44	; 0x2c
   13ba2:	d106      	bne.n	13bb2 <mp_obj_str_format_helper+0x502>
                flags |= PF_FLAG_SHOW_COMMA;
   13ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13ba6:	f043 0320 	orr.w	r3, r3, #32
   13baa:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13bae:	3301      	adds	r3, #1
   13bb0:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '.') {
   13bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13bb4:	781b      	ldrb	r3, [r3, #0]
   13bb6:	2b2e      	cmp	r3, #46	; 0x2e
   13bb8:	d10a      	bne.n	13bd0 <mp_obj_str_format_helper+0x520>
                s++;
   13bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13bbc:	3301      	adds	r3, #1
   13bbe:	677b      	str	r3, [r7, #116]	; 0x74
                s = str_to_int(s, stop, &precision);
   13bc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
   13bc4:	461a      	mov	r2, r3
   13bc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13bc8:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13bca:	f7ff fcb4 	bl	13536 <str_to_int>
   13bce:	6778      	str	r0, [r7, #116]	; 0x74
            }
            if (istype(*s)) {
   13bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13bd2:	781b      	ldrb	r3, [r3, #0]
   13bd4:	4618      	mov	r0, r3
   13bd6:	f7ff fd03 	bl	135e0 <istype>
   13bda:	4603      	mov	r3, r0
   13bdc:	2b00      	cmp	r3, #0
   13bde:	d005      	beq.n	13bec <mp_obj_str_format_helper+0x53c>
                type = *s++;
   13be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13be2:	1c5a      	adds	r2, r3, #1
   13be4:	677a      	str	r2, [r7, #116]	; 0x74
   13be6:	781b      	ldrb	r3, [r3, #0]
   13be8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (*s) {
   13bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13bee:	781b      	ldrb	r3, [r3, #0]
   13bf0:	2b00      	cmp	r3, #0
   13bf2:	d001      	beq.n	13bf8 <mp_obj_str_format_helper+0x548>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13bf4:	f7ff fd55 	bl	136a2 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("invalid format specifier");
                }
            }
            vstr_clear(&format_spec_vstr);
   13bf8:	f107 0318 	add.w	r3, r7, #24
   13bfc:	4618      	mov	r0, r3
   13bfe:	f7ed fbe1 	bl	13c4 <vstr_clear>
        }
        if (!align) {
   13c02:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13c06:	2b00      	cmp	r3, #0
   13c08:	d10d      	bne.n	13c26 <mp_obj_str_format_helper+0x576>
            if (arg_looks_numeric(arg)) {
   13c0a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13c0e:	f7ff fd31 	bl	13674 <arg_looks_numeric>
   13c12:	4603      	mov	r3, r0
   13c14:	2b00      	cmp	r3, #0
   13c16:	d003      	beq.n	13c20 <mp_obj_str_format_helper+0x570>
                align = '>';
   13c18:	233e      	movs	r3, #62	; 0x3e
   13c1a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13c1e:	e002      	b.n	13c26 <mp_obj_str_format_helper+0x576>
            } else {
                align = '<';
   13c20:	233c      	movs	r3, #60	; 0x3c
   13c22:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
        }
        if (!fill) {
   13c26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13c2a:	2b00      	cmp	r3, #0
   13c2c:	d102      	bne.n	13c34 <mp_obj_str_format_helper+0x584>
            fill = ' ';
   13c2e:	2320      	movs	r3, #32
   13c30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        }

        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   13c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13c36:	f003 0306 	and.w	r3, r3, #6
   13c3a:	2b00      	cmp	r3, #0
   13c3c:	d00b      	beq.n	13c56 <mp_obj_str_format_helper+0x5a6>
            if (type == 's') {
   13c3e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13c42:	2b73      	cmp	r3, #115	; 0x73
   13c44:	d101      	bne.n	13c4a <mp_obj_str_format_helper+0x59a>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13c46:	f7ff fd2c 	bl	136a2 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("sign not allowed in string format specifier");
                }
            }
            if (type == 'c') {
   13c4a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13c4e:	2b63      	cmp	r3, #99	; 0x63
   13c50:	d101      	bne.n	13c56 <mp_obj_str_format_helper+0x5a6>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13c52:	f7ff fd26 	bl	136a2 <terse_str_format_value_error>
                        "sign not allowed with integer format specifier 'c'");
                }
            }
        }

        switch (align) {
   13c56:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13c5a:	2b3d      	cmp	r3, #61	; 0x3d
   13c5c:	d008      	beq.n	13c70 <mp_obj_str_format_helper+0x5c0>
   13c5e:	2b5e      	cmp	r3, #94	; 0x5e
   13c60:	d00b      	beq.n	13c7a <mp_obj_str_format_helper+0x5ca>
   13c62:	2b3c      	cmp	r3, #60	; 0x3c
   13c64:	d10e      	bne.n	13c84 <mp_obj_str_format_helper+0x5d4>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   13c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13c68:	f043 0301 	orr.w	r3, r3, #1
   13c6c:	67bb      	str	r3, [r7, #120]	; 0x78
   13c6e:	e009      	b.n	13c84 <mp_obj_str_format_helper+0x5d4>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   13c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13c76:	67bb      	str	r3, [r7, #120]	; 0x78
   13c78:	e004      	b.n	13c84 <mp_obj_str_format_helper+0x5d4>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   13c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13c80:	67bb      	str	r3, [r7, #120]	; 0x78
   13c82:	bf00      	nop
        }

        if (arg_looks_integer(arg)) {
   13c84:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13c88:	f7ff fcc6 	bl	13618 <arg_looks_integer>
   13c8c:	4603      	mov	r3, r0
   13c8e:	2b00      	cmp	r3, #0
   13c90:	f000 8167 	beq.w	13f62 <mp_obj_str_format_helper+0x8b2>
            switch (type) {
   13c94:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13c98:	2b78      	cmp	r3, #120	; 0x78
   13c9a:	f200 815f 	bhi.w	13f5c <mp_obj_str_format_helper+0x8ac>
   13c9e:	a201      	add	r2, pc, #4	; (adr r2, 13ca4 <mp_obj_str_format_helper+0x5f4>)
   13ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13ca4:	00013ed7 	.word	0x00013ed7
   13ca8:	00013f5d 	.word	0x00013f5d
   13cac:	00013f5d 	.word	0x00013f5d
   13cb0:	00013f5d 	.word	0x00013f5d
   13cb4:	00013f5d 	.word	0x00013f5d
   13cb8:	00013f5d 	.word	0x00013f5d
   13cbc:	00013f5d 	.word	0x00013f5d
   13cc0:	00013f5d 	.word	0x00013f5d
   13cc4:	00013f5d 	.word	0x00013f5d
   13cc8:	00013f5d 	.word	0x00013f5d
   13ccc:	00013f5d 	.word	0x00013f5d
   13cd0:	00013f5d 	.word	0x00013f5d
   13cd4:	00013f5d 	.word	0x00013f5d
   13cd8:	00013f5d 	.word	0x00013f5d
   13cdc:	00013f5d 	.word	0x00013f5d
   13ce0:	00013f5d 	.word	0x00013f5d
   13ce4:	00013f5d 	.word	0x00013f5d
   13ce8:	00013f5d 	.word	0x00013f5d
   13cec:	00013f5d 	.word	0x00013f5d
   13cf0:	00013f5d 	.word	0x00013f5d
   13cf4:	00013f5d 	.word	0x00013f5d
   13cf8:	00013f5d 	.word	0x00013f5d
   13cfc:	00013f5d 	.word	0x00013f5d
   13d00:	00013f5d 	.word	0x00013f5d
   13d04:	00013f5d 	.word	0x00013f5d
   13d08:	00013f5d 	.word	0x00013f5d
   13d0c:	00013f5d 	.word	0x00013f5d
   13d10:	00013f5d 	.word	0x00013f5d
   13d14:	00013f5d 	.word	0x00013f5d
   13d18:	00013f5d 	.word	0x00013f5d
   13d1c:	00013f5d 	.word	0x00013f5d
   13d20:	00013f5d 	.word	0x00013f5d
   13d24:	00013f5d 	.word	0x00013f5d
   13d28:	00013f5d 	.word	0x00013f5d
   13d2c:	00013f5d 	.word	0x00013f5d
   13d30:	00013f5d 	.word	0x00013f5d
   13d34:	00013f5d 	.word	0x00013f5d
   13d38:	00013f61 	.word	0x00013f61
   13d3c:	00013f5d 	.word	0x00013f5d
   13d40:	00013f5d 	.word	0x00013f5d
   13d44:	00013f5d 	.word	0x00013f5d
   13d48:	00013f5d 	.word	0x00013f5d
   13d4c:	00013f5d 	.word	0x00013f5d
   13d50:	00013f5d 	.word	0x00013f5d
   13d54:	00013f5d 	.word	0x00013f5d
   13d58:	00013f5d 	.word	0x00013f5d
   13d5c:	00013f5d 	.word	0x00013f5d
   13d60:	00013f5d 	.word	0x00013f5d
   13d64:	00013f5d 	.word	0x00013f5d
   13d68:	00013f5d 	.word	0x00013f5d
   13d6c:	00013f5d 	.word	0x00013f5d
   13d70:	00013f5d 	.word	0x00013f5d
   13d74:	00013f5d 	.word	0x00013f5d
   13d78:	00013f5d 	.word	0x00013f5d
   13d7c:	00013f5d 	.word	0x00013f5d
   13d80:	00013f5d 	.word	0x00013f5d
   13d84:	00013f5d 	.word	0x00013f5d
   13d88:	00013f5d 	.word	0x00013f5d
   13d8c:	00013f5d 	.word	0x00013f5d
   13d90:	00013f5d 	.word	0x00013f5d
   13d94:	00013f5d 	.word	0x00013f5d
   13d98:	00013f5d 	.word	0x00013f5d
   13d9c:	00013f5d 	.word	0x00013f5d
   13da0:	00013f5d 	.word	0x00013f5d
   13da4:	00013f5d 	.word	0x00013f5d
   13da8:	00013f5d 	.word	0x00013f5d
   13dac:	00013f5d 	.word	0x00013f5d
   13db0:	00013f5d 	.word	0x00013f5d
   13db4:	00013f5d 	.word	0x00013f5d
   13db8:	00013f61 	.word	0x00013f61
   13dbc:	00013f61 	.word	0x00013f61
   13dc0:	00013f61 	.word	0x00013f61
   13dc4:	00013f5d 	.word	0x00013f5d
   13dc8:	00013f5d 	.word	0x00013f5d
   13dcc:	00013f5d 	.word	0x00013f5d
   13dd0:	00013f5d 	.word	0x00013f5d
   13dd4:	00013f5d 	.word	0x00013f5d
   13dd8:	00013f5d 	.word	0x00013f5d
   13ddc:	00013f5d 	.word	0x00013f5d
   13de0:	00013f5d 	.word	0x00013f5d
   13de4:	00013f5d 	.word	0x00013f5d
   13de8:	00013f5d 	.word	0x00013f5d
   13dec:	00013f5d 	.word	0x00013f5d
   13df0:	00013f5d 	.word	0x00013f5d
   13df4:	00013f5d 	.word	0x00013f5d
   13df8:	00013f5d 	.word	0x00013f5d
   13dfc:	00013f5d 	.word	0x00013f5d
   13e00:	00013f5d 	.word	0x00013f5d
   13e04:	00013f31 	.word	0x00013f31
   13e08:	00013f5d 	.word	0x00013f5d
   13e0c:	00013f5d 	.word	0x00013f5d
   13e10:	00013f5d 	.word	0x00013f5d
   13e14:	00013f5d 	.word	0x00013f5d
   13e18:	00013f5d 	.word	0x00013f5d
   13e1c:	00013f5d 	.word	0x00013f5d
   13e20:	00013f5d 	.word	0x00013f5d
   13e24:	00013f5d 	.word	0x00013f5d
   13e28:	00013f5d 	.word	0x00013f5d
   13e2c:	00013e89 	.word	0x00013e89
   13e30:	00013ead 	.word	0x00013ead
   13e34:	00013ed7 	.word	0x00013ed7
   13e38:	00013f61 	.word	0x00013f61
   13e3c:	00013f61 	.word	0x00013f61
   13e40:	00013f61 	.word	0x00013f61
   13e44:	00013f5d 	.word	0x00013f5d
   13e48:	00013f5d 	.word	0x00013f5d
   13e4c:	00013f5d 	.word	0x00013f5d
   13e50:	00013f5d 	.word	0x00013f5d
   13e54:	00013f5d 	.word	0x00013f5d
   13e58:	00013f5d 	.word	0x00013f5d
   13e5c:	00013ed7 	.word	0x00013ed7
   13e60:	00013efb 	.word	0x00013efb
   13e64:	00013f5d 	.word	0x00013f5d
   13e68:	00013f5d 	.word	0x00013f5d
   13e6c:	00013f5d 	.word	0x00013f5d
   13e70:	00013f5d 	.word	0x00013f5d
   13e74:	00013f5d 	.word	0x00013f5d
   13e78:	00013f5d 	.word	0x00013f5d
   13e7c:	00013f5d 	.word	0x00013f5d
   13e80:	00013f5d 	.word	0x00013f5d
   13e84:	00013f31 	.word	0x00013f31
                case 'b':
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   13e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13e8a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   13e8e:	2200      	movs	r2, #0
   13e90:	9203      	str	r2, [sp, #12]
   13e92:	9302      	str	r3, [sp, #8]
   13e94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13e98:	9301      	str	r3, [sp, #4]
   13e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13e9c:	9300      	str	r3, [sp, #0]
   13e9e:	2361      	movs	r3, #97	; 0x61
   13ea0:	2202      	movs	r2, #2
   13ea2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13ea6:	f7ed fe38 	bl	1b1a <mp_print_mp_int>
                    continue;
   13eaa:	e0a0      	b.n	13fee <mp_obj_str_format_helper+0x93e>

                case 'c':
                {
                    char ch = mp_obj_get_int(arg);
   13eac:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13eb0:	f7f9 fdf6 	bl	daa0 <mp_obj_get_int>
   13eb4:	4603      	mov	r3, r0
   13eb6:	b2db      	uxtb	r3, r3
   13eb8:	75fb      	strb	r3, [r7, #23]
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   13eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13ebc:	f107 0117 	add.w	r1, r7, #23
   13ec0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   13ec4:	9301      	str	r3, [sp, #4]
   13ec6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13eca:	9300      	str	r3, [sp, #0]
   13ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13ece:	2201      	movs	r2, #1
   13ed0:	f7ed fce4 	bl	189c <mp_print_strn>
   13ed4:	e08b      	b.n	13fee <mp_obj_str_format_helper+0x93e>
                }

                case '\0':  // No explicit format type implies 'd'
                case 'n':   // I don't think we support locales in uPy so use 'd'
                case 'd':
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   13ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13ed8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   13edc:	2200      	movs	r2, #0
   13ede:	9203      	str	r2, [sp, #12]
   13ee0:	9302      	str	r3, [sp, #8]
   13ee2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13ee6:	9301      	str	r3, [sp, #4]
   13ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13eea:	9300      	str	r3, [sp, #0]
   13eec:	2361      	movs	r3, #97	; 0x61
   13eee:	220a      	movs	r2, #10
   13ef0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13ef4:	f7ed fe11 	bl	1b1a <mp_print_mp_int>
                    continue;
   13ef8:	e079      	b.n	13fee <mp_obj_str_format_helper+0x93e>

                case 'o':
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   13efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13efc:	f003 0310 	and.w	r3, r3, #16
   13f00:	2b00      	cmp	r3, #0
   13f02:	d003      	beq.n	13f0c <mp_obj_str_format_helper+0x85c>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   13f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   13f0a:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   13f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13f0e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   13f12:	2200      	movs	r2, #0
   13f14:	9203      	str	r2, [sp, #12]
   13f16:	9302      	str	r3, [sp, #8]
   13f18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13f1c:	9301      	str	r3, [sp, #4]
   13f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13f20:	9300      	str	r3, [sp, #0]
   13f22:	2361      	movs	r3, #97	; 0x61
   13f24:	2208      	movs	r2, #8
   13f26:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13f2a:	f7ed fdf6 	bl	1b1a <mp_print_mp_int>
                    continue;
   13f2e:	e05e      	b.n	13fee <mp_obj_str_format_helper+0x93e>

                case 'X':
                case 'x':
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   13f30:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13f34:	f1a3 0117 	sub.w	r1, r3, #23
   13f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13f3a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   13f3e:	2200      	movs	r2, #0
   13f40:	9203      	str	r2, [sp, #12]
   13f42:	9302      	str	r3, [sp, #8]
   13f44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13f48:	9301      	str	r3, [sp, #4]
   13f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13f4c:	9300      	str	r3, [sp, #0]
   13f4e:	460b      	mov	r3, r1
   13f50:	2210      	movs	r2, #16
   13f52:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13f56:	f7ed fde0 	bl	1b1a <mp_print_mp_int>
                    continue;
   13f5a:	e048      	b.n	13fee <mp_obj_str_format_helper+0x93e>
                    // looks like an integer
                    break;

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13f5c:	f7ff fba1 	bl	136a2 <terse_str_format_value_error>
                    break;
   13f60:	bf00      	nop
            }
        }

        // NOTE: no else here. We need the e, f, g etc formats for integer
        //       arguments (from above if) to take this if.
        if (arg_looks_numeric(arg)) {
   13f62:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13f66:	f7ff fb85 	bl	13674 <arg_looks_numeric>
   13f6a:	4603      	mov	r3, r0
   13f6c:	2b00      	cmp	r3, #0
   13f6e:	d00f      	beq.n	13f90 <mp_obj_str_format_helper+0x8e0>
            if (!type) {
   13f70:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13f74:	2b00      	cmp	r3, #0
   13f76:	d102      	bne.n	13f7e <mp_obj_str_format_helper+0x8ce>
                // CPython sources say:
                //   Omitted type specifier.  Behaves in the same way as repr(x)
                //   and str(x) if no precision is given, else like 'g', but with
                //   at least one digit after the decimal point. */

                type = 'g';
   13f78:	2367      	movs	r3, #103	; 0x67
   13f7a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (type == 'n') {
   13f7e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13f82:	2b6e      	cmp	r3, #110	; 0x6e
   13f84:	d102      	bne.n	13f8c <mp_obj_str_format_helper+0x8dc>
                type = 'g';
   13f86:	2367      	movs	r3, #103	; 0x67
   13f88:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                    break;
#endif

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13f8c:	f7ff fb89 	bl	136a2 <terse_str_format_value_error>
                    }
            }
        } else {
            // arg doesn't look like a number

            if (align == '=') {
   13f90:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13f94:	2b3d      	cmp	r3, #61	; 0x3d
   13f96:	d101      	bne.n	13f9c <mp_obj_str_format_helper+0x8ec>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13f98:	f7ff fb83 	bl	136a2 <terse_str_format_value_error>
                    mp_raise_ValueError(
                        "'=' alignment not allowed in string format specifier");
                }
            }

            switch (type) {
   13f9c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13fa0:	2b00      	cmp	r3, #0
   13fa2:	d001      	beq.n	13fa8 <mp_obj_str_format_helper+0x8f8>
   13fa4:	2b73      	cmp	r3, #115	; 0x73
   13fa6:	d120      	bne.n	13fea <mp_obj_str_format_helper+0x93a>
                case '\0': // no explicit format type implies 's'
                case 's': {
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   13fa8:	f107 0310 	add.w	r3, r7, #16
   13fac:	4619      	mov	r1, r3
   13fae:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13fb2:	f001 f99f 	bl	152f4 <mp_obj_str_get_data>
   13fb6:	6678      	str	r0, [r7, #100]	; 0x64
                    if (precision < 0) {
   13fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13fba:	2b00      	cmp	r3, #0
   13fbc:	da01      	bge.n	13fc2 <mp_obj_str_format_helper+0x912>
                        precision = slen;
   13fbe:	693b      	ldr	r3, [r7, #16]
   13fc0:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    if (slen > (size_t)precision) {
   13fc2:	693b      	ldr	r3, [r7, #16]
   13fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   13fc6:	4293      	cmp	r3, r2
   13fc8:	d901      	bls.n	13fce <mp_obj_str_format_helper+0x91e>
                        slen = precision;
   13fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13fcc:	613b      	str	r3, [r7, #16]
                    }
                    mp_print_strn(&print, s, slen, flags, fill, width);
   13fce:	693a      	ldr	r2, [r7, #16]
   13fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13fd2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   13fd6:	9301      	str	r3, [sp, #4]
   13fd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13fdc:	9300      	str	r3, [sp, #0]
   13fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13fe0:	6e79      	ldr	r1, [r7, #100]	; 0x64
   13fe2:	f7ed fc5b 	bl	189c <mp_print_strn>
                    break;
   13fe6:	bf00      	nop
   13fe8:	e001      	b.n	13fee <mp_obj_str_format_helper+0x93e>
                }

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13fea:	f7ff fb5a 	bl	136a2 <terse_str_format_value_error>
    for (; str < top; str++) {
   13fee:	68bb      	ldr	r3, [r7, #8]
   13ff0:	3301      	adds	r3, #1
   13ff2:	60bb      	str	r3, [r7, #8]
   13ff4:	68ba      	ldr	r2, [r7, #8]
   13ff6:	687b      	ldr	r3, [r7, #4]
   13ff8:	429a      	cmp	r2, r3
   13ffa:	f4ff ab6a 	bcc.w	136d2 <mp_obj_str_format_helper+0x22>
                    }
            }
        }
    }

    return vstr;
   13ffe:	68fb      	ldr	r3, [r7, #12]
   14000:	461c      	mov	r4, r3
   14002:	f107 0354 	add.w	r3, r7, #84	; 0x54
   14006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1400c:	68f8      	ldr	r0, [r7, #12]
   1400e:	37a4      	adds	r7, #164	; 0xa4
   14010:	46bd      	mov	sp, r7
   14012:	bd90      	pop	{r4, r7, pc}

00014014 <mp_obj_str_format>:

mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   14014:	b580      	push	{r7, lr}
   14016:	b090      	sub	sp, #64	; 0x40
   14018:	af04      	add	r7, sp, #16
   1401a:	60f8      	str	r0, [r7, #12]
   1401c:	60b9      	str	r1, [r7, #8]
   1401e:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14020:	68bb      	ldr	r3, [r7, #8]
   14022:	681b      	ldr	r3, [r3, #0]
   14024:	4618      	mov	r0, r3
   14026:	f7fd ff59 	bl	11edc <MP_OBJ_IS_QSTR>
   1402a:	4603      	mov	r3, r0
   1402c:	2b00      	cmp	r3, #0
   1402e:	d115      	bne.n	1405c <mp_obj_str_format+0x48>
   14030:	68bb      	ldr	r3, [r7, #8]
   14032:	681b      	ldr	r3, [r3, #0]
   14034:	4618      	mov	r0, r3
   14036:	f7fd ff63 	bl	11f00 <MP_OBJ_IS_OBJ>
   1403a:	4603      	mov	r3, r0
   1403c:	2b00      	cmp	r3, #0
   1403e:	d006      	beq.n	1404e <mp_obj_str_format+0x3a>
   14040:	68bb      	ldr	r3, [r7, #8]
   14042:	681b      	ldr	r3, [r3, #0]
   14044:	681b      	ldr	r3, [r3, #0]
   14046:	699b      	ldr	r3, [r3, #24]
   14048:	4a21      	ldr	r2, [pc, #132]	; (140d0 <mp_obj_str_format+0xbc>)
   1404a:	4293      	cmp	r3, r2
   1404c:	d006      	beq.n	1405c <mp_obj_str_format+0x48>
   1404e:	4b21      	ldr	r3, [pc, #132]	; (140d4 <mp_obj_str_format+0xc0>)
   14050:	4a21      	ldr	r2, [pc, #132]	; (140d8 <mp_obj_str_format+0xc4>)
   14052:	f240 5161 	movw	r1, #1377	; 0x561
   14056:	4821      	ldr	r0, [pc, #132]	; (140dc <mp_obj_str_format+0xc8>)
   14058:	f007 f8c4 	bl	1b1e4 <__assert_func>

    GET_STR_DATA_LEN(args[0], str, len);
   1405c:	68bb      	ldr	r3, [r7, #8]
   1405e:	681b      	ldr	r3, [r3, #0]
   14060:	4618      	mov	r0, r3
   14062:	f7fd ff3b 	bl	11edc <MP_OBJ_IS_QSTR>
   14066:	4603      	mov	r3, r0
   14068:	2b00      	cmp	r3, #0
   1406a:	d00a      	beq.n	14082 <mp_obj_str_format+0x6e>
   1406c:	68bb      	ldr	r3, [r7, #8]
   1406e:	681b      	ldr	r3, [r3, #0]
   14070:	089b      	lsrs	r3, r3, #2
   14072:	f107 0228 	add.w	r2, r7, #40	; 0x28
   14076:	4611      	mov	r1, r2
   14078:	4618      	mov	r0, r3
   1407a:	f7ed f8c7 	bl	120c <qstr_data>
   1407e:	62f8      	str	r0, [r7, #44]	; 0x2c
   14080:	e007      	b.n	14092 <mp_obj_str_format+0x7e>
   14082:	68bb      	ldr	r3, [r7, #8]
   14084:	681b      	ldr	r3, [r3, #0]
   14086:	689b      	ldr	r3, [r3, #8]
   14088:	62bb      	str	r3, [r7, #40]	; 0x28
   1408a:	68bb      	ldr	r3, [r7, #8]
   1408c:	681b      	ldr	r3, [r3, #0]
   1408e:	68db      	ldr	r3, [r3, #12]
   14090:	62fb      	str	r3, [r7, #44]	; 0x2c
    int arg_i = 0;
   14092:	2300      	movs	r3, #0
   14094:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   14096:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1409a:	441a      	add	r2, r3
   1409c:	f107 0014 	add.w	r0, r7, #20
   140a0:	f107 0124 	add.w	r1, r7, #36	; 0x24
   140a4:	687b      	ldr	r3, [r7, #4]
   140a6:	9302      	str	r3, [sp, #8]
   140a8:	68bb      	ldr	r3, [r7, #8]
   140aa:	9301      	str	r3, [sp, #4]
   140ac:	68fb      	ldr	r3, [r7, #12]
   140ae:	9300      	str	r3, [sp, #0]
   140b0:	460b      	mov	r3, r1
   140b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   140b4:	f7ff fafc 	bl	136b0 <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   140b8:	f107 0314 	add.w	r3, r7, #20
   140bc:	4619      	mov	r1, r3
   140be:	4808      	ldr	r0, [pc, #32]	; (140e0 <mp_obj_str_format+0xcc>)
   140c0:	f000 ff57 	bl	14f72 <mp_obj_new_str_from_vstr>
   140c4:	4603      	mov	r3, r0
}
   140c6:	4618      	mov	r0, r3
   140c8:	3730      	adds	r7, #48	; 0x30
   140ca:	46bd      	mov	sp, r7
   140cc:	bd80      	pop	{r7, pc}
   140ce:	bf00      	nop
   140d0:	0001254f 	.word	0x0001254f
   140d4:	00022dc8 	.word	0x00022dc8
   140d8:	000232fc 	.word	0x000232fc
   140dc:	00022d2c 	.word	0x00022d2c
   140e0:	00023204 	.word	0x00023204

000140e4 <str_modulo_format>:
MP_DEFINE_CONST_FUN_OBJ_KW(str_format_obj, 1, mp_obj_str_format);

STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   140e4:	b590      	push	{r4, r7, lr}
   140e6:	b0a9      	sub	sp, #164	; 0xa4
   140e8:	af04      	add	r7, sp, #16
   140ea:	60f8      	str	r0, [r7, #12]
   140ec:	60b9      	str	r1, [r7, #8]
   140ee:	607a      	str	r2, [r7, #4]
   140f0:	603b      	str	r3, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   140f2:	68f8      	ldr	r0, [r7, #12]
   140f4:	f7fd fef2 	bl	11edc <MP_OBJ_IS_QSTR>
   140f8:	4603      	mov	r3, r0
   140fa:	2b00      	cmp	r3, #0
   140fc:	d112      	bne.n	14124 <str_modulo_format+0x40>
   140fe:	68f8      	ldr	r0, [r7, #12]
   14100:	f7fd fefe 	bl	11f00 <MP_OBJ_IS_OBJ>
   14104:	4603      	mov	r3, r0
   14106:	2b00      	cmp	r3, #0
   14108:	d005      	beq.n	14116 <str_modulo_format+0x32>
   1410a:	68fb      	ldr	r3, [r7, #12]
   1410c:	681b      	ldr	r3, [r3, #0]
   1410e:	699b      	ldr	r3, [r3, #24]
   14110:	4ac4      	ldr	r2, [pc, #784]	; (14424 <str_modulo_format+0x340>)
   14112:	4293      	cmp	r3, r2
   14114:	d006      	beq.n	14124 <str_modulo_format+0x40>
   14116:	4bc4      	ldr	r3, [pc, #784]	; (14428 <str_modulo_format+0x344>)
   14118:	4ac4      	ldr	r2, [pc, #784]	; (1442c <str_modulo_format+0x348>)
   1411a:	f240 516b 	movw	r1, #1387	; 0x56b
   1411e:	48c4      	ldr	r0, [pc, #784]	; (14430 <str_modulo_format+0x34c>)
   14120:	f007 f860 	bl	1b1e4 <__assert_func>

    GET_STR_DATA_LEN(pattern, str, len);
   14124:	68f8      	ldr	r0, [r7, #12]
   14126:	f7fd fed9 	bl	11edc <MP_OBJ_IS_QSTR>
   1412a:	4603      	mov	r3, r0
   1412c:	2b00      	cmp	r3, #0
   1412e:	d00a      	beq.n	14146 <str_modulo_format+0x62>
   14130:	68fb      	ldr	r3, [r7, #12]
   14132:	089b      	lsrs	r3, r3, #2
   14134:	f107 0254 	add.w	r2, r7, #84	; 0x54
   14138:	4611      	mov	r1, r2
   1413a:	4618      	mov	r0, r3
   1413c:	f7ed f866 	bl	120c <qstr_data>
   14140:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   14144:	e006      	b.n	14154 <str_modulo_format+0x70>
   14146:	68fb      	ldr	r3, [r7, #12]
   14148:	689b      	ldr	r3, [r3, #8]
   1414a:	657b      	str	r3, [r7, #84]	; 0x54
   1414c:	68fb      	ldr	r3, [r7, #12]
   1414e:	68db      	ldr	r3, [r3, #12]
   14150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const byte *start_str = str;
   14154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14158:	66fb      	str	r3, [r7, #108]	; 0x6c
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   1415a:	68f8      	ldr	r0, [r7, #12]
   1415c:	f7fd fed0 	bl	11f00 <MP_OBJ_IS_OBJ>
   14160:	4603      	mov	r3, r0
   14162:	2b00      	cmp	r3, #0
   14164:	d006      	beq.n	14174 <str_modulo_format+0x90>
   14166:	68fb      	ldr	r3, [r7, #12]
   14168:	681b      	ldr	r3, [r3, #0]
   1416a:	4ab2      	ldr	r2, [pc, #712]	; (14434 <str_modulo_format+0x350>)
   1416c:	4293      	cmp	r3, r2
   1416e:	d101      	bne.n	14174 <str_modulo_format+0x90>
   14170:	2301      	movs	r3, #1
   14172:	e000      	b.n	14176 <str_modulo_format+0x92>
   14174:	2300      	movs	r3, #0
   14176:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   1417a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   1417e:	f003 0301 	and.w	r3, r3, #1
   14182:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    size_t arg_i = 0;
   14186:	2300      	movs	r3, #0
   14188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   1418c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   14190:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14194:	2110      	movs	r1, #16
   14196:	4618      	mov	r0, r3
   14198:	f7ed f8fd 	bl	1396 <vstr_init_print>

    for (const byte *top = str + len; str < top; str++) {
   1419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1419e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   141a2:	4413      	add	r3, r2
   141a4:	667b      	str	r3, [r7, #100]	; 0x64
   141a6:	e296      	b.n	146d6 <str_modulo_format+0x5f2>
        mp_obj_t arg = MP_OBJ_NULL;
   141a8:	2300      	movs	r3, #0
   141aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (*str != '%') {
   141ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   141b2:	781b      	ldrb	r3, [r3, #0]
   141b4:	2b25      	cmp	r3, #37	; 0x25
   141b6:	d009      	beq.n	141cc <str_modulo_format+0xe8>
            vstr_add_byte(&vstr, *str);
   141b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   141bc:	781a      	ldrb	r2, [r3, #0]
   141be:	f107 0344 	add.w	r3, r7, #68	; 0x44
   141c2:	4611      	mov	r1, r2
   141c4:	4618      	mov	r0, r3
   141c6:	f7ed f9eb 	bl	15a0 <vstr_add_byte>
            continue;
   141ca:	e27f      	b.n	146cc <str_modulo_format+0x5e8>
        }
        if (++str >= top) {
   141cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   141d0:	3301      	adds	r3, #1
   141d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   141d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   141da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   141dc:	429a      	cmp	r2, r3
   141de:	f080 810d 	bcs.w	143fc <str_modulo_format+0x318>
            goto incomplete_format;
        }
        if (*str == '%') {
   141e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   141e6:	781b      	ldrb	r3, [r3, #0]
   141e8:	2b25      	cmp	r3, #37	; 0x25
   141ea:	d106      	bne.n	141fa <str_modulo_format+0x116>
            vstr_add_byte(&vstr, '%');
   141ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
   141f0:	2125      	movs	r1, #37	; 0x25
   141f2:	4618      	mov	r0, r3
   141f4:	f7ed f9d4 	bl	15a0 <vstr_add_byte>
            continue;
   141f8:	e268      	b.n	146cc <str_modulo_format+0x5e8>
        }

        // Dictionary value lookup
        if (*str == '(') {
   141fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   141fe:	781b      	ldrb	r3, [r3, #0]
   14200:	2b28      	cmp	r3, #40	; 0x28
   14202:	d136      	bne.n	14272 <str_modulo_format+0x18e>
            if (dict == MP_OBJ_NULL) {
   14204:	683b      	ldr	r3, [r7, #0]
   14206:	2b00      	cmp	r3, #0
   14208:	d102      	bne.n	14210 <str_modulo_format+0x12c>
                mp_raise_TypeError("format requires a dict");
   1420a:	488b      	ldr	r0, [pc, #556]	; (14438 <str_modulo_format+0x354>)
   1420c:	f7f8 fe56 	bl	cebc <mp_raise_TypeError>
            }
            arg_i = 1; // we used up the single dict argument
   14210:	2301      	movs	r3, #1
   14212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            const byte *key = ++str;
   14216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1421a:	3301      	adds	r3, #1
   1421c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14224:	663b      	str	r3, [r7, #96]	; 0x60
            while (*str != ')') {
   14226:	e00b      	b.n	14240 <str_modulo_format+0x15c>
                if (str >= top) {
   14228:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1422c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1422e:	429a      	cmp	r2, r3
   14230:	d301      	bcc.n	14236 <str_modulo_format+0x152>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14232:	f7ff fa36 	bl	136a2 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError("incomplete format key");
                    }
                }
                ++str;
   14236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1423a:	3301      	adds	r3, #1
   1423c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            while (*str != ')') {
   14240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14244:	781b      	ldrb	r3, [r3, #0]
   14246:	2b29      	cmp	r3, #41	; 0x29
   14248:	d1ee      	bne.n	14228 <str_modulo_format+0x144>
            }
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   1424a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1424e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   14250:	1ad3      	subs	r3, r2, r3
   14252:	4619      	mov	r1, r3
   14254:	6e38      	ldr	r0, [r7, #96]	; 0x60
   14256:	f000 fe7b 	bl	14f50 <mp_obj_new_str_via_qstr>
   1425a:	65f8      	str	r0, [r7, #92]	; 0x5c
            arg = mp_obj_dict_get(dict, k_obj);
   1425c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1425e:	6838      	ldr	r0, [r7, #0]
   14260:	f7fa f9d6 	bl	e610 <mp_obj_dict_get>
   14264:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            str++;
   14268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1426c:	3301      	adds	r3, #1
   1426e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        int flags = 0;
   14272:	2300      	movs	r3, #0
   14274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        char fill = ' ';
   14278:	2320      	movs	r3, #32
   1427a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        int alt = 0;
   1427e:	2300      	movs	r3, #0
   14280:	67bb      	str	r3, [r7, #120]	; 0x78
        while (str < top) {
   14282:	e03e      	b.n	14302 <str_modulo_format+0x21e>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   14284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14288:	781b      	ldrb	r3, [r3, #0]
   1428a:	2b2d      	cmp	r3, #45	; 0x2d
   1428c:	d106      	bne.n	1429c <str_modulo_format+0x1b8>
   1428e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14292:	f043 0301 	orr.w	r3, r3, #1
   14296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1429a:	e02d      	b.n	142f8 <str_modulo_format+0x214>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   1429c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   142a0:	781b      	ldrb	r3, [r3, #0]
   142a2:	2b2b      	cmp	r3, #43	; 0x2b
   142a4:	d106      	bne.n	142b4 <str_modulo_format+0x1d0>
   142a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   142aa:	f043 0302 	orr.w	r3, r3, #2
   142ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   142b2:	e021      	b.n	142f8 <str_modulo_format+0x214>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   142b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   142b8:	781b      	ldrb	r3, [r3, #0]
   142ba:	2b20      	cmp	r3, #32
   142bc:	d106      	bne.n	142cc <str_modulo_format+0x1e8>
   142be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   142c2:	f043 0304 	orr.w	r3, r3, #4
   142c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   142ca:	e015      	b.n	142f8 <str_modulo_format+0x214>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   142cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   142d0:	781b      	ldrb	r3, [r3, #0]
   142d2:	2b23      	cmp	r3, #35	; 0x23
   142d4:	d102      	bne.n	142dc <str_modulo_format+0x1f8>
   142d6:	2310      	movs	r3, #16
   142d8:	67bb      	str	r3, [r7, #120]	; 0x78
   142da:	e00d      	b.n	142f8 <str_modulo_format+0x214>
            else if (*str == '0') {
   142dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   142e0:	781b      	ldrb	r3, [r3, #0]
   142e2:	2b30      	cmp	r3, #48	; 0x30
   142e4:	d113      	bne.n	1430e <str_modulo_format+0x22a>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   142e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   142ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   142ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                fill = '0';
   142f2:	2330      	movs	r3, #48	; 0x30
   142f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            } else break;
            str++;
   142f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   142fc:	3301      	adds	r3, #1
   142fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (str < top) {
   14302:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14308:	429a      	cmp	r2, r3
   1430a:	d3bb      	bcc.n	14284 <str_modulo_format+0x1a0>
   1430c:	e000      	b.n	14310 <str_modulo_format+0x22c>
            } else break;
   1430e:	bf00      	nop
        }
        // parse width, if it exists
        int width = 0;
   14310:	2300      	movs	r3, #0
   14312:	63bb      	str	r3, [r7, #56]	; 0x38
        if (str < top) {
   14314:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1431a:	429a      	cmp	r2, r3
   1431c:	d227      	bcs.n	1436e <str_modulo_format+0x28a>
            if (*str == '*') {
   1431e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14322:	781b      	ldrb	r3, [r3, #0]
   14324:	2b2a      	cmp	r3, #42	; 0x2a
   14326:	d118      	bne.n	1435a <str_modulo_format+0x276>
                if (arg_i >= n_args) {
   14328:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1432c:	68bb      	ldr	r3, [r7, #8]
   1432e:	429a      	cmp	r2, r3
   14330:	d271      	bcs.n	14416 <str_modulo_format+0x332>
                    goto not_enough_args;
                }
                width = mp_obj_get_int(args[arg_i++]);
   14332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14336:	1c5a      	adds	r2, r3, #1
   14338:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1433c:	009b      	lsls	r3, r3, #2
   1433e:	687a      	ldr	r2, [r7, #4]
   14340:	4413      	add	r3, r2
   14342:	681b      	ldr	r3, [r3, #0]
   14344:	4618      	mov	r0, r3
   14346:	f7f9 fbab 	bl	daa0 <mp_obj_get_int>
   1434a:	4603      	mov	r3, r0
   1434c:	63bb      	str	r3, [r7, #56]	; 0x38
                str++;
   1434e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14352:	3301      	adds	r3, #1
   14354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14358:	e009      	b.n	1436e <str_modulo_format+0x28a>
            } else {
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   1435a:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1435e:	461a      	mov	r2, r3
   14360:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14362:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   14366:	f7ff f8e6 	bl	13536 <str_to_int>
   1436a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            }
        }
        int prec = -1;
   1436e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14372:	637b      	str	r3, [r7, #52]	; 0x34
        if (str < top && *str == '.') {
   14374:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1437a:	429a      	cmp	r2, r3
   1437c:	d238      	bcs.n	143f0 <str_modulo_format+0x30c>
   1437e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14382:	781b      	ldrb	r3, [r3, #0]
   14384:	2b2e      	cmp	r3, #46	; 0x2e
   14386:	d133      	bne.n	143f0 <str_modulo_format+0x30c>
            if (++str < top) {
   14388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1438c:	3301      	adds	r3, #1
   1438e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14392:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14398:	429a      	cmp	r2, r3
   1439a:	d229      	bcs.n	143f0 <str_modulo_format+0x30c>
                if (*str == '*') {
   1439c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143a0:	781b      	ldrb	r3, [r3, #0]
   143a2:	2b2a      	cmp	r3, #42	; 0x2a
   143a4:	d118      	bne.n	143d8 <str_modulo_format+0x2f4>
                    if (arg_i >= n_args) {
   143a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   143aa:	68bb      	ldr	r3, [r7, #8]
   143ac:	429a      	cmp	r2, r3
   143ae:	d234      	bcs.n	1441a <str_modulo_format+0x336>
                        goto not_enough_args;
                    }
                    prec = mp_obj_get_int(args[arg_i++]);
   143b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   143b4:	1c5a      	adds	r2, r3, #1
   143b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   143ba:	009b      	lsls	r3, r3, #2
   143bc:	687a      	ldr	r2, [r7, #4]
   143be:	4413      	add	r3, r2
   143c0:	681b      	ldr	r3, [r3, #0]
   143c2:	4618      	mov	r0, r3
   143c4:	f7f9 fb6c 	bl	daa0 <mp_obj_get_int>
   143c8:	4603      	mov	r3, r0
   143ca:	637b      	str	r3, [r7, #52]	; 0x34
                    str++;
   143cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143d0:	3301      	adds	r3, #1
   143d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   143d6:	e00b      	b.n	143f0 <str_modulo_format+0x30c>
                } else {
                    prec = 0;
   143d8:	2300      	movs	r3, #0
   143da:	637b      	str	r3, [r7, #52]	; 0x34
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   143dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
   143e0:	461a      	mov	r2, r3
   143e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
   143e4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   143e8:	f7ff f8a5 	bl	13536 <str_to_int>
   143ec:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                }
            }
        }

        if (str >= top) {
   143f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   143f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   143f6:	429a      	cmp	r2, r3
   143f8:	d303      	bcc.n	14402 <str_modulo_format+0x31e>
   143fa:	e000      	b.n	143fe <str_modulo_format+0x31a>
            goto incomplete_format;
   143fc:	bf00      	nop
incomplete_format:
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   143fe:	f7ff f950 	bl	136a2 <terse_str_format_value_error>
                mp_raise_ValueError("incomplete format");
            }
        }

        // Tuple value lookup
        if (arg == MP_OBJ_NULL) {
   14402:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14406:	2b00      	cmp	r3, #0
   14408:	d125      	bne.n	14456 <str_modulo_format+0x372>
            if (arg_i >= n_args) {
   1440a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1440e:	68bb      	ldr	r3, [r7, #8]
   14410:	429a      	cmp	r2, r3
   14412:	d315      	bcc.n	14440 <str_modulo_format+0x35c>
   14414:	e002      	b.n	1441c <str_modulo_format+0x338>
                    goto not_enough_args;
   14416:	bf00      	nop
   14418:	e000      	b.n	1441c <str_modulo_format+0x338>
                        goto not_enough_args;
   1441a:	bf00      	nop
not_enough_args:
                mp_raise_TypeError("not enough arguments for format string");
   1441c:	4807      	ldr	r0, [pc, #28]	; (1443c <str_modulo_format+0x358>)
   1441e:	f7f8 fd4d 	bl	cebc <mp_raise_TypeError>
   14422:	bf00      	nop
   14424:	0001254f 	.word	0x0001254f
   14428:	00022fb4 	.word	0x00022fb4
   1442c:	00023310 	.word	0x00023310
   14430:	00022d2c 	.word	0x00022d2c
   14434:	00023240 	.word	0x00023240
   14438:	0002303c 	.word	0x0002303c
   1443c:	00023054 	.word	0x00023054
            }
            arg = args[arg_i++];
   14440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14444:	1c5a      	adds	r2, r3, #1
   14446:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1444a:	009b      	lsls	r3, r3, #2
   1444c:	687a      	ldr	r2, [r7, #4]
   1444e:	4413      	add	r3, r2
   14450:	681b      	ldr	r3, [r3, #0]
   14452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }
        switch (*str) {
   14456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1445a:	781b      	ldrb	r3, [r3, #0]
   1445c:	3b58      	subs	r3, #88	; 0x58
   1445e:	2b20      	cmp	r3, #32
   14460:	f200 8132 	bhi.w	146c8 <str_modulo_format+0x5e4>
   14464:	a201      	add	r2, pc, #4	; (adr r2, 1446c <str_modulo_format+0x388>)
   14466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1446a:	bf00      	nop
   1446c:	00014695 	.word	0x00014695
   14470:	000146c9 	.word	0x000146c9
   14474:	000146c9 	.word	0x000146c9
   14478:	000146c9 	.word	0x000146c9
   1447c:	000146c9 	.word	0x000146c9
   14480:	000146c9 	.word	0x000146c9
   14484:	000146c9 	.word	0x000146c9
   14488:	000146c9 	.word	0x000146c9
   1448c:	000146c9 	.word	0x000146c9
   14490:	000146c9 	.word	0x000146c9
   14494:	000146c9 	.word	0x000146c9
   14498:	000144f1 	.word	0x000144f1
   1449c:	00014591 	.word	0x00014591
   144a0:	000146c9 	.word	0x000146c9
   144a4:	000146c9 	.word	0x000146c9
   144a8:	000146c9 	.word	0x000146c9
   144ac:	000146c9 	.word	0x000146c9
   144b0:	00014591 	.word	0x00014591
   144b4:	000146c9 	.word	0x000146c9
   144b8:	000146c9 	.word	0x000146c9
   144bc:	000146c9 	.word	0x000146c9
   144c0:	000146c9 	.word	0x000146c9
   144c4:	000146c9 	.word	0x000146c9
   144c8:	000145bd 	.word	0x000145bd
   144cc:	000146c9 	.word	0x000146c9
   144d0:	000146c9 	.word	0x000146c9
   144d4:	000145f5 	.word	0x000145f5
   144d8:	000145f5 	.word	0x000145f5
   144dc:	000146c9 	.word	0x000146c9
   144e0:	00014591 	.word	0x00014591
   144e4:	000146c9 	.word	0x000146c9
   144e8:	000146c9 	.word	0x000146c9
   144ec:	00014695 	.word	0x00014695
            case 'c':
                if (MP_OBJ_IS_STR(arg)) {
   144f0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   144f4:	f7fd fcf2 	bl	11edc <MP_OBJ_IS_QSTR>
   144f8:	4603      	mov	r3, r0
   144fa:	2b00      	cmp	r3, #0
   144fc:	d10c      	bne.n	14518 <str_modulo_format+0x434>
   144fe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14502:	f7fd fcfd 	bl	11f00 <MP_OBJ_IS_OBJ>
   14506:	4603      	mov	r3, r0
   14508:	2b00      	cmp	r3, #0
   1450a:	d021      	beq.n	14550 <str_modulo_format+0x46c>
   1450c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14510:	681b      	ldr	r3, [r3, #0]
   14512:	4a81      	ldr	r2, [pc, #516]	; (14718 <str_modulo_format+0x634>)
   14514:	4293      	cmp	r3, r2
   14516:	d11b      	bne.n	14550 <str_modulo_format+0x46c>
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   14518:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1451c:	4619      	mov	r1, r3
   1451e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14522:	f000 fee7 	bl	152f4 <mp_obj_str_get_data>
   14526:	65b8      	str	r0, [r7, #88]	; 0x58
                    if (slen != 1) {
   14528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1452a:	2b01      	cmp	r3, #1
   1452c:	d002      	beq.n	14534 <str_modulo_format+0x450>
                        mp_raise_TypeError("%%c requires int or char");
   1452e:	487b      	ldr	r0, [pc, #492]	; (1471c <str_modulo_format+0x638>)
   14530:	f7f8 fcc4 	bl	cebc <mp_raise_TypeError>
                    }
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   14534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14536:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   1453a:	9301      	str	r3, [sp, #4]
   1453c:	2320      	movs	r3, #32
   1453e:	9300      	str	r3, [sp, #0]
   14540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14544:	2201      	movs	r2, #1
   14546:	6db9      	ldr	r1, [r7, #88]	; 0x58
   14548:	f7ed f9a8 	bl	189c <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   1454c:	bf00      	nop
                    char ch = mp_obj_get_int(arg);
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
                } else {
                    mp_raise_TypeError("integer required");
                }
                break;
   1454e:	e0bd      	b.n	146cc <str_modulo_format+0x5e8>
                } else if (arg_looks_integer(arg)) {
   14550:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14554:	f7ff f860 	bl	13618 <arg_looks_integer>
   14558:	4603      	mov	r3, r0
   1455a:	2b00      	cmp	r3, #0
   1455c:	d015      	beq.n	1458a <str_modulo_format+0x4a6>
                    char ch = mp_obj_get_int(arg);
   1455e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14562:	f7f9 fa9d 	bl	daa0 <mp_obj_get_int>
   14566:	4603      	mov	r3, r0
   14568:	b2db      	uxtb	r3, r3
   1456a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   1456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14570:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   14574:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14578:	9301      	str	r3, [sp, #4]
   1457a:	2320      	movs	r3, #32
   1457c:	9300      	str	r3, [sp, #0]
   1457e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14582:	2201      	movs	r2, #1
   14584:	f7ed f98a 	bl	189c <mp_print_strn>
                break;
   14588:	e0a0      	b.n	146cc <str_modulo_format+0x5e8>
                    mp_raise_TypeError("integer required");
   1458a:	4865      	ldr	r0, [pc, #404]	; (14720 <str_modulo_format+0x63c>)
   1458c:	f7f8 fc96 	bl	cebc <mp_raise_TypeError>

            case 'd':
            case 'i':
            case 'u':
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   14590:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14594:	f7ff f87a 	bl	1368c <arg_as_int>
   14598:	4601      	mov	r1, r0
   1459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1459c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1459e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   145a2:	9203      	str	r2, [sp, #12]
   145a4:	9302      	str	r3, [sp, #8]
   145a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   145aa:	9301      	str	r3, [sp, #4]
   145ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   145b0:	9300      	str	r3, [sp, #0]
   145b2:	2361      	movs	r3, #97	; 0x61
   145b4:	220a      	movs	r2, #10
   145b6:	f7ed fab0 	bl	1b1a <mp_print_mp_int>
                break;
   145ba:	e087      	b.n	146cc <str_modulo_format+0x5e8>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
                break;
#endif

            case 'o':
                if (alt) {
   145bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   145be:	2b00      	cmp	r3, #0
   145c0:	d005      	beq.n	145ce <str_modulo_format+0x4ea>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   145c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   145c6:	f443 7304 	orr.w	r3, r3, #528	; 0x210
   145ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   145ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   145d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   145d2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   145d6:	9203      	str	r2, [sp, #12]
   145d8:	9302      	str	r3, [sp, #8]
   145da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   145de:	9301      	str	r3, [sp, #4]
   145e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   145e4:	9300      	str	r3, [sp, #0]
   145e6:	2361      	movs	r3, #97	; 0x61
   145e8:	2208      	movs	r2, #8
   145ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   145ee:	f7ed fa94 	bl	1b1a <mp_print_mp_int>
                break;
   145f2:	e06b      	b.n	146cc <str_modulo_format+0x5e8>
            case 'r':
            case 's':
            {
                vstr_t arg_vstr;
                mp_print_t arg_print;
                vstr_init_print(&arg_vstr, 16, &arg_print);
   145f4:	f107 0214 	add.w	r2, r7, #20
   145f8:	f107 031c 	add.w	r3, r7, #28
   145fc:	2110      	movs	r1, #16
   145fe:	4618      	mov	r0, r3
   14600:	f7ec fec9 	bl	1396 <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   14604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14608:	781b      	ldrb	r3, [r3, #0]
   1460a:	2b72      	cmp	r3, #114	; 0x72
   1460c:	bf0c      	ite	eq
   1460e:	2301      	moveq	r3, #1
   14610:	2300      	movne	r3, #0
   14612:	b2db      	uxtb	r3, r3
   14614:	677b      	str	r3, [r7, #116]	; 0x74
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   14616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14618:	2b00      	cmp	r3, #0
   1461a:	d112      	bne.n	14642 <str_modulo_format+0x55e>
   1461c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14620:	2b00      	cmp	r3, #0
   14622:	d00e      	beq.n	14642 <str_modulo_format+0x55e>
   14624:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14628:	f7fd fc6a 	bl	11f00 <MP_OBJ_IS_OBJ>
   1462c:	4603      	mov	r3, r0
   1462e:	2b00      	cmp	r3, #0
   14630:	d007      	beq.n	14642 <str_modulo_format+0x55e>
   14632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14636:	681b      	ldr	r3, [r3, #0]
   14638:	4a3a      	ldr	r2, [pc, #232]	; (14724 <str_modulo_format+0x640>)
   1463a:	4293      	cmp	r3, r2
   1463c:	d101      	bne.n	14642 <str_modulo_format+0x55e>
                    // If we have something like b"%s" % b"1", bytes arg should be
                    // printed undecorated.
                    print_kind = PRINT_RAW;
   1463e:	2304      	movs	r3, #4
   14640:	677b      	str	r3, [r7, #116]	; 0x74
                }
                mp_obj_print_helper(&arg_print, arg, print_kind);
   14642:	f107 0314 	add.w	r3, r7, #20
   14646:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   14648:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   1464c:	4618      	mov	r0, r3
   1464e:	f7f9 f87c 	bl	d74a <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   14652:	6a3b      	ldr	r3, [r7, #32]
   14654:	673b      	str	r3, [r7, #112]	; 0x70
                if (prec < 0) {
   14656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14658:	2b00      	cmp	r3, #0
   1465a:	da01      	bge.n	14660 <str_modulo_format+0x57c>
                    prec = vlen;
   1465c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1465e:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (vlen > (uint)prec) {
   14660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14662:	461a      	mov	r2, r3
   14664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14666:	4293      	cmp	r3, r2
   14668:	d901      	bls.n	1466e <str_modulo_format+0x58a>
                    vlen = prec;
   1466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1466c:	673b      	str	r3, [r7, #112]	; 0x70
                }
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   1466e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14672:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14676:	9301      	str	r3, [sp, #4]
   14678:	2320      	movs	r3, #32
   1467a:	9300      	str	r3, [sp, #0]
   1467c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14680:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14682:	f7ed f90b 	bl	189c <mp_print_strn>
                vstr_clear(&arg_vstr);
   14686:	f107 031c 	add.w	r3, r7, #28
   1468a:	4618      	mov	r0, r3
   1468c:	f7ec fe9a 	bl	13c4 <vstr_clear>
                break;
   14690:	bf00      	nop
   14692:	e01b      	b.n	146cc <str_modulo_format+0x5e8>
            }

            case 'X':
            case 'x':
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   14694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14698:	781b      	ldrb	r3, [r3, #0]
   1469a:	f1a3 0417 	sub.w	r4, r3, #23
   1469e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   146a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   146a4:	4313      	orrs	r3, r2
   146a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   146a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
   146aa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   146ae:	9103      	str	r1, [sp, #12]
   146b0:	9202      	str	r2, [sp, #8]
   146b2:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
   146b6:	9201      	str	r2, [sp, #4]
   146b8:	9300      	str	r3, [sp, #0]
   146ba:	4623      	mov	r3, r4
   146bc:	2210      	movs	r2, #16
   146be:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   146c2:	f7ed fa2a 	bl	1b1a <mp_print_mp_int>
                break;
   146c6:	e001      	b.n	146cc <str_modulo_format+0x5e8>

            default:
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   146c8:	f7fe ffeb 	bl	136a2 <terse_str_format_value_error>
    for (const byte *top = str + len; str < top; str++) {
   146cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146d0:	3301      	adds	r3, #1
   146d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   146d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   146da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   146dc:	429a      	cmp	r2, r3
   146de:	f4ff ad63 	bcc.w	141a8 <str_modulo_format+0xc4>
                        *str, *str, str - start_str));
                }
        }
    }

    if (arg_i != n_args) {
   146e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   146e6:	68bb      	ldr	r3, [r7, #8]
   146e8:	429a      	cmp	r2, r3
   146ea:	d002      	beq.n	146f2 <str_modulo_format+0x60e>
        mp_raise_TypeError("not all arguments converted during string formatting");
   146ec:	480e      	ldr	r0, [pc, #56]	; (14728 <str_modulo_format+0x644>)
   146ee:	f7f8 fbe5 	bl	cebc <mp_raise_TypeError>
    }

    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   146f2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   146f6:	2b00      	cmp	r3, #0
   146f8:	d001      	beq.n	146fe <str_modulo_format+0x61a>
   146fa:	4b0a      	ldr	r3, [pc, #40]	; (14724 <str_modulo_format+0x640>)
   146fc:	e000      	b.n	14700 <str_modulo_format+0x61c>
   146fe:	4b06      	ldr	r3, [pc, #24]	; (14718 <str_modulo_format+0x634>)
   14700:	f107 0244 	add.w	r2, r7, #68	; 0x44
   14704:	4611      	mov	r1, r2
   14706:	4618      	mov	r0, r3
   14708:	f000 fc33 	bl	14f72 <mp_obj_new_str_from_vstr>
   1470c:	4603      	mov	r3, r0
}
   1470e:	4618      	mov	r0, r3
   14710:	3794      	adds	r7, #148	; 0x94
   14712:	46bd      	mov	sp, r7
   14714:	bd90      	pop	{r4, r7, pc}
   14716:	bf00      	nop
   14718:	00023204 	.word	0x00023204
   1471c:	0002307c 	.word	0x0002307c
   14720:	00023098 	.word	0x00023098
   14724:	00023240 	.word	0x00023240
   14728:	000230ac 	.word	0x000230ac

0001472c <str_replace>:

// The implementation is optimized, returning the original string if there's
// nothing to replace.
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
   1472c:	b580      	push	{r7, lr}
   1472e:	b096      	sub	sp, #88	; 0x58
   14730:	af02      	add	r7, sp, #8
   14732:	6078      	str	r0, [r7, #4]
   14734:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14736:	683b      	ldr	r3, [r7, #0]
   14738:	681b      	ldr	r3, [r3, #0]
   1473a:	4618      	mov	r0, r3
   1473c:	f7fd fbce 	bl	11edc <MP_OBJ_IS_QSTR>
   14740:	4603      	mov	r3, r0
   14742:	2b00      	cmp	r3, #0
   14744:	d115      	bne.n	14772 <str_replace+0x46>
   14746:	683b      	ldr	r3, [r7, #0]
   14748:	681b      	ldr	r3, [r3, #0]
   1474a:	4618      	mov	r0, r3
   1474c:	f7fd fbd8 	bl	11f00 <MP_OBJ_IS_OBJ>
   14750:	4603      	mov	r3, r0
   14752:	2b00      	cmp	r3, #0
   14754:	d006      	beq.n	14764 <str_replace+0x38>
   14756:	683b      	ldr	r3, [r7, #0]
   14758:	681b      	ldr	r3, [r3, #0]
   1475a:	681b      	ldr	r3, [r3, #0]
   1475c:	699b      	ldr	r3, [r3, #24]
   1475e:	4aa4      	ldr	r2, [pc, #656]	; (149f0 <str_replace+0x2c4>)
   14760:	4293      	cmp	r3, r2
   14762:	d006      	beq.n	14772 <str_replace+0x46>
   14764:	4ba3      	ldr	r3, [pc, #652]	; (149f4 <str_replace+0x2c8>)
   14766:	4aa4      	ldr	r2, [pc, #656]	; (149f8 <str_replace+0x2cc>)
   14768:	f240 6131 	movw	r1, #1585	; 0x631
   1476c:	48a3      	ldr	r0, [pc, #652]	; (149fc <str_replace+0x2d0>)
   1476e:	f006 fd39 	bl	1b1e4 <__assert_func>

    mp_int_t max_rep = -1;
   14772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14776:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (n_args == 4) {
   14778:	687b      	ldr	r3, [r7, #4]
   1477a:	2b04      	cmp	r3, #4
   1477c:	d112      	bne.n	147a4 <str_replace+0x78>
        max_rep = mp_obj_get_int(args[3]);
   1477e:	683b      	ldr	r3, [r7, #0]
   14780:	330c      	adds	r3, #12
   14782:	681b      	ldr	r3, [r3, #0]
   14784:	4618      	mov	r0, r3
   14786:	f7f9 f98b 	bl	daa0 <mp_obj_get_int>
   1478a:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (max_rep == 0) {
   1478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1478e:	2b00      	cmp	r3, #0
   14790:	d102      	bne.n	14798 <str_replace+0x6c>
            return args[0];
   14792:	683b      	ldr	r3, [r7, #0]
   14794:	681b      	ldr	r3, [r3, #0]
   14796:	e127      	b.n	149e8 <str_replace+0x2bc>
        } else if (max_rep < 0) {
   14798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1479a:	2b00      	cmp	r3, #0
   1479c:	da02      	bge.n	147a4 <str_replace+0x78>
            max_rep = -1;
   1479e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147a2:	64fb      	str	r3, [r7, #76]	; 0x4c

    // if max_rep is still -1 by this point we will need to do all possible replacements

    // check argument types

    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   147a4:	683b      	ldr	r3, [r7, #0]
   147a6:	681b      	ldr	r3, [r3, #0]
   147a8:	4618      	mov	r0, r3
   147aa:	f7f8 ff9d 	bl	d6e8 <mp_obj_get_type>
   147ae:	6278      	str	r0, [r7, #36]	; 0x24

    if (mp_obj_get_type(args[1]) != self_type) {
   147b0:	683b      	ldr	r3, [r7, #0]
   147b2:	3304      	adds	r3, #4
   147b4:	681b      	ldr	r3, [r3, #0]
   147b6:	4618      	mov	r0, r3
   147b8:	f7f8 ff96 	bl	d6e8 <mp_obj_get_type>
   147bc:	4602      	mov	r2, r0
   147be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   147c0:	429a      	cmp	r2, r3
   147c2:	d005      	beq.n	147d0 <str_replace+0xa4>
        bad_implicit_conversion(args[1]);
   147c4:	683b      	ldr	r3, [r7, #0]
   147c6:	3304      	adds	r3, #4
   147c8:	681b      	ldr	r3, [r3, #0]
   147ca:	4618      	mov	r0, r3
   147cc:	f000 fd23 	bl	15216 <bad_implicit_conversion>
    }

    if (mp_obj_get_type(args[2]) != self_type) {
   147d0:	683b      	ldr	r3, [r7, #0]
   147d2:	3308      	adds	r3, #8
   147d4:	681b      	ldr	r3, [r3, #0]
   147d6:	4618      	mov	r0, r3
   147d8:	f7f8 ff86 	bl	d6e8 <mp_obj_get_type>
   147dc:	4602      	mov	r2, r0
   147de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   147e0:	429a      	cmp	r2, r3
   147e2:	d005      	beq.n	147f0 <str_replace+0xc4>
        bad_implicit_conversion(args[2]);
   147e4:	683b      	ldr	r3, [r7, #0]
   147e6:	3308      	adds	r3, #8
   147e8:	681b      	ldr	r3, [r3, #0]
   147ea:	4618      	mov	r0, r3
   147ec:	f000 fd13 	bl	15216 <bad_implicit_conversion>
    }

    // extract string data

    GET_STR_DATA_LEN(args[0], str, str_len);
   147f0:	683b      	ldr	r3, [r7, #0]
   147f2:	681b      	ldr	r3, [r3, #0]
   147f4:	4618      	mov	r0, r3
   147f6:	f7fd fb71 	bl	11edc <MP_OBJ_IS_QSTR>
   147fa:	4603      	mov	r3, r0
   147fc:	2b00      	cmp	r3, #0
   147fe:	d00a      	beq.n	14816 <str_replace+0xea>
   14800:	683b      	ldr	r3, [r7, #0]
   14802:	681b      	ldr	r3, [r3, #0]
   14804:	089b      	lsrs	r3, r3, #2
   14806:	f107 0220 	add.w	r2, r7, #32
   1480a:	4611      	mov	r1, r2
   1480c:	4618      	mov	r0, r3
   1480e:	f7ec fcfd 	bl	120c <qstr_data>
   14812:	64b8      	str	r0, [r7, #72]	; 0x48
   14814:	e007      	b.n	14826 <str_replace+0xfa>
   14816:	683b      	ldr	r3, [r7, #0]
   14818:	681b      	ldr	r3, [r3, #0]
   1481a:	689b      	ldr	r3, [r3, #8]
   1481c:	623b      	str	r3, [r7, #32]
   1481e:	683b      	ldr	r3, [r7, #0]
   14820:	681b      	ldr	r3, [r3, #0]
   14822:	68db      	ldr	r3, [r3, #12]
   14824:	64bb      	str	r3, [r7, #72]	; 0x48
    GET_STR_DATA_LEN(args[1], old, old_len);
   14826:	683b      	ldr	r3, [r7, #0]
   14828:	3304      	adds	r3, #4
   1482a:	681b      	ldr	r3, [r3, #0]
   1482c:	4618      	mov	r0, r3
   1482e:	f7fd fb55 	bl	11edc <MP_OBJ_IS_QSTR>
   14832:	4603      	mov	r3, r0
   14834:	2b00      	cmp	r3, #0
   14836:	d00b      	beq.n	14850 <str_replace+0x124>
   14838:	683b      	ldr	r3, [r7, #0]
   1483a:	3304      	adds	r3, #4
   1483c:	681b      	ldr	r3, [r3, #0]
   1483e:	089b      	lsrs	r3, r3, #2
   14840:	f107 021c 	add.w	r2, r7, #28
   14844:	4611      	mov	r1, r2
   14846:	4618      	mov	r0, r3
   14848:	f7ec fce0 	bl	120c <qstr_data>
   1484c:	6478      	str	r0, [r7, #68]	; 0x44
   1484e:	e009      	b.n	14864 <str_replace+0x138>
   14850:	683b      	ldr	r3, [r7, #0]
   14852:	3304      	adds	r3, #4
   14854:	681b      	ldr	r3, [r3, #0]
   14856:	689b      	ldr	r3, [r3, #8]
   14858:	61fb      	str	r3, [r7, #28]
   1485a:	683b      	ldr	r3, [r7, #0]
   1485c:	3304      	adds	r3, #4
   1485e:	681b      	ldr	r3, [r3, #0]
   14860:	68db      	ldr	r3, [r3, #12]
   14862:	647b      	str	r3, [r7, #68]	; 0x44
    GET_STR_DATA_LEN(args[2], new, new_len);
   14864:	683b      	ldr	r3, [r7, #0]
   14866:	3308      	adds	r3, #8
   14868:	681b      	ldr	r3, [r3, #0]
   1486a:	4618      	mov	r0, r3
   1486c:	f7fd fb36 	bl	11edc <MP_OBJ_IS_QSTR>
   14870:	4603      	mov	r3, r0
   14872:	2b00      	cmp	r3, #0
   14874:	d00b      	beq.n	1488e <str_replace+0x162>
   14876:	683b      	ldr	r3, [r7, #0]
   14878:	3308      	adds	r3, #8
   1487a:	681b      	ldr	r3, [r3, #0]
   1487c:	089b      	lsrs	r3, r3, #2
   1487e:	f107 0218 	add.w	r2, r7, #24
   14882:	4611      	mov	r1, r2
   14884:	4618      	mov	r0, r3
   14886:	f7ec fcc1 	bl	120c <qstr_data>
   1488a:	6438      	str	r0, [r7, #64]	; 0x40
   1488c:	e009      	b.n	148a2 <str_replace+0x176>
   1488e:	683b      	ldr	r3, [r7, #0]
   14890:	3308      	adds	r3, #8
   14892:	681b      	ldr	r3, [r3, #0]
   14894:	689b      	ldr	r3, [r3, #8]
   14896:	61bb      	str	r3, [r7, #24]
   14898:	683b      	ldr	r3, [r7, #0]
   1489a:	3308      	adds	r3, #8
   1489c:	681b      	ldr	r3, [r3, #0]
   1489e:	68db      	ldr	r3, [r3, #12]
   148a0:	643b      	str	r3, [r7, #64]	; 0x40

    // old won't exist in str if it's longer, so nothing to replace
    if (old_len > str_len) {
   148a2:	69fa      	ldr	r2, [r7, #28]
   148a4:	6a3b      	ldr	r3, [r7, #32]
   148a6:	429a      	cmp	r2, r3
   148a8:	d902      	bls.n	148b0 <str_replace+0x184>
        return args[0];
   148aa:	683b      	ldr	r3, [r7, #0]
   148ac:	681b      	ldr	r3, [r3, #0]
   148ae:	e09b      	b.n	149e8 <str_replace+0x2bc>
    }

    // data for the replaced string
    byte *data = NULL;
   148b0:	2300      	movs	r3, #0
   148b2:	63fb      	str	r3, [r7, #60]	; 0x3c

    // do 2 passes over the string:
    //   first pass computes the required length of the replaced string
    //   second pass does the replacements
    for (;;) {
        size_t replaced_str_index = 0;
   148b4:	2300      	movs	r3, #0
   148b6:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t num_replacements_done = 0;
   148b8:	2300      	movs	r3, #0
   148ba:	637b      	str	r3, [r7, #52]	; 0x34
        const byte *old_occurrence;
        const byte *offset_ptr = str;
   148bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   148be:	62fb      	str	r3, [r7, #44]	; 0x2c
        size_t str_len_remain = str_len;
   148c0:	6a3b      	ldr	r3, [r7, #32]
   148c2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (old_len == 0) {
   148c4:	69fb      	ldr	r3, [r7, #28]
   148c6:	2b00      	cmp	r3, #0
   148c8:	d147      	bne.n	1495a <str_replace+0x22e>
            // if old_str is empty, copy new_str to start of replaced string
            // copy the replacement string
            if (data != NULL) {
   148ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   148cc:	2b00      	cmp	r3, #0
   148ce:	d005      	beq.n	148dc <str_replace+0x1b0>
                memcpy(data, new, new_len);
   148d0:	69bb      	ldr	r3, [r7, #24]
   148d2:	461a      	mov	r2, r3
   148d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
   148d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   148d8:	f007 fe42 	bl	1c560 <memcpy>
            }
            replaced_str_index += new_len;
   148dc:	69bb      	ldr	r3, [r7, #24]
   148de:	6bba      	ldr	r2, [r7, #56]	; 0x38
   148e0:	4413      	add	r3, r2
   148e2:	63bb      	str	r3, [r7, #56]	; 0x38
            num_replacements_done++;
   148e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   148e6:	3301      	adds	r3, #1
   148e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   148ea:	e036      	b.n	1495a <str_replace+0x22e>
            if (old_len == 0) {
   148ec:	69fb      	ldr	r3, [r7, #28]
   148ee:	2b00      	cmp	r3, #0
   148f0:	d102      	bne.n	148f8 <str_replace+0x1cc>
                old_occurrence += 1;
   148f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   148f4:	3301      	adds	r3, #1
   148f6:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // copy from just after end of last occurrence of to-be-replaced string to right before start of next occurrence
            if (data != NULL) {
   148f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   148fa:	2b00      	cmp	r3, #0
   148fc:	d009      	beq.n	14912 <str_replace+0x1e6>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
   148fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14902:	18d0      	adds	r0, r2, r3
   14904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14908:	1ad3      	subs	r3, r2, r3
   1490a:	461a      	mov	r2, r3
   1490c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1490e:	f007 fe27 	bl	1c560 <memcpy>
            }
            replaced_str_index += old_occurrence - offset_ptr;
   14912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14916:	1ad3      	subs	r3, r2, r3
   14918:	461a      	mov	r2, r3
   1491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1491c:	4413      	add	r3, r2
   1491e:	63bb      	str	r3, [r7, #56]	; 0x38
            // copy the replacement string
            if (data != NULL) {
   14920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14922:	2b00      	cmp	r3, #0
   14924:	d007      	beq.n	14936 <str_replace+0x20a>
                memcpy(data + replaced_str_index, new, new_len);
   14926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1492a:	4413      	add	r3, r2
   1492c:	69ba      	ldr	r2, [r7, #24]
   1492e:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14930:	4618      	mov	r0, r3
   14932:	f007 fe15 	bl	1c560 <memcpy>
            }
            replaced_str_index += new_len;
   14936:	69bb      	ldr	r3, [r7, #24]
   14938:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1493a:	4413      	add	r3, r2
   1493c:	63bb      	str	r3, [r7, #56]	; 0x38
            offset_ptr = old_occurrence + old_len;
   1493e:	69fb      	ldr	r3, [r7, #28]
   14940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14942:	4413      	add	r3, r2
   14944:	62fb      	str	r3, [r7, #44]	; 0x2c
            str_len_remain = str + str_len - offset_ptr;
   14946:	6a3b      	ldr	r3, [r7, #32]
   14948:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1494a:	4413      	add	r3, r2
   1494c:	461a      	mov	r2, r3
   1494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14950:	1ad3      	subs	r3, r2, r3
   14952:	62bb      	str	r3, [r7, #40]	; 0x28
            num_replacements_done++;
   14954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14956:	3301      	adds	r3, #1
   14958:	637b      	str	r3, [r7, #52]	; 0x34
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   1495a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1495c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1495e:	429a      	cmp	r2, r3
   14960:	d00f      	beq.n	14982 <str_replace+0x256>
   14962:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14964:	2b00      	cmp	r3, #0
   14966:	d00c      	beq.n	14982 <str_replace+0x256>
   14968:	69fa      	ldr	r2, [r7, #28]
   1496a:	2301      	movs	r3, #1
   1496c:	9300      	str	r3, [sp, #0]
   1496e:	4613      	mov	r3, r2
   14970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14976:	f7fd fdb1 	bl	124dc <find_subbytes>
   1497a:	6338      	str	r0, [r7, #48]	; 0x30
   1497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1497e:	2b00      	cmp	r3, #0
   14980:	d1b4      	bne.n	148ec <str_replace+0x1c0>
        }

        // copy from just after end of last occurrence of to-be-replaced string to end of old string
        if (data != NULL) {
   14982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14984:	2b00      	cmp	r3, #0
   14986:	d007      	beq.n	14998 <str_replace+0x26c>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
   14988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1498c:	4413      	add	r3, r2
   1498e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14992:	4618      	mov	r0, r3
   14994:	f007 fde4 	bl	1c560 <memcpy>
        }
        replaced_str_index += str_len_remain;
   14998:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1499c:	4413      	add	r3, r2
   1499e:	63bb      	str	r3, [r7, #56]	; 0x38

        if (data == NULL) {
   149a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   149a2:	2b00      	cmp	r3, #0
   149a4:	d118      	bne.n	149d8 <str_replace+0x2ac>
            // first pass
            if (num_replacements_done == 0) {
   149a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   149a8:	2b00      	cmp	r3, #0
   149aa:	d102      	bne.n	149b2 <str_replace+0x286>
                // no substr found, return original string
                return args[0];
   149ac:	683b      	ldr	r3, [r7, #0]
   149ae:	681b      	ldr	r3, [r3, #0]
   149b0:	e01a      	b.n	149e8 <str_replace+0x2bc>
            } else {
                // substr found, allocate new string
                vstr_init_len(&vstr, replaced_str_index);
   149b2:	f107 0308 	add.w	r3, r7, #8
   149b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   149b8:	4618      	mov	r0, r3
   149ba:	f7ec fcc0 	bl	133e <vstr_init_len>
                data = (byte*)vstr.buf;
   149be:	693b      	ldr	r3, [r7, #16]
   149c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                assert(data != NULL);
   149c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   149c4:	2b00      	cmp	r3, #0
   149c6:	f47f af75 	bne.w	148b4 <str_replace+0x188>
   149ca:	4b0d      	ldr	r3, [pc, #52]	; (14a00 <str_replace+0x2d4>)
   149cc:	4a0a      	ldr	r2, [pc, #40]	; (149f8 <str_replace+0x2cc>)
   149ce:	f240 618e 	movw	r1, #1678	; 0x68e
   149d2:	480a      	ldr	r0, [pc, #40]	; (149fc <str_replace+0x2d0>)
   149d4:	f006 fc06 	bl	1b1e4 <__assert_func>
            }
        } else {
            // second pass, we are done
            break;
   149d8:	bf00      	nop
        }
    }

    return mp_obj_new_str_from_vstr(self_type, &vstr);
   149da:	f107 0308 	add.w	r3, r7, #8
   149de:	4619      	mov	r1, r3
   149e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   149e2:	f000 fac6 	bl	14f72 <mp_obj_new_str_from_vstr>
   149e6:	4603      	mov	r3, r0
}
   149e8:	4618      	mov	r0, r3
   149ea:	3750      	adds	r7, #80	; 0x50
   149ec:	46bd      	mov	sp, r7
   149ee:	bd80      	pop	{r7, pc}
   149f0:	0001254f 	.word	0x0001254f
   149f4:	00022dc8 	.word	0x00022dc8
   149f8:	00023324 	.word	0x00023324
   149fc:	00022d2c 	.word	0x00022d2c
   14a00:	000230e4 	.word	0x000230e4

00014a04 <str_count>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_replace_obj, 3, 4, str_replace);

STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
   14a04:	b580      	push	{r7, lr}
   14a06:	b08e      	sub	sp, #56	; 0x38
   14a08:	af02      	add	r7, sp, #8
   14a0a:	6078      	str	r0, [r7, #4]
   14a0c:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14a0e:	683b      	ldr	r3, [r7, #0]
   14a10:	681b      	ldr	r3, [r3, #0]
   14a12:	4618      	mov	r0, r3
   14a14:	f7f8 fe68 	bl	d6e8 <mp_obj_get_type>
   14a18:	6178      	str	r0, [r7, #20]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14a1a:	683b      	ldr	r3, [r7, #0]
   14a1c:	681b      	ldr	r3, [r3, #0]
   14a1e:	4618      	mov	r0, r3
   14a20:	f7fd fa5c 	bl	11edc <MP_OBJ_IS_QSTR>
   14a24:	4603      	mov	r3, r0
   14a26:	2b00      	cmp	r3, #0
   14a28:	d115      	bne.n	14a56 <str_count+0x52>
   14a2a:	683b      	ldr	r3, [r7, #0]
   14a2c:	681b      	ldr	r3, [r3, #0]
   14a2e:	4618      	mov	r0, r3
   14a30:	f7fd fa66 	bl	11f00 <MP_OBJ_IS_OBJ>
   14a34:	4603      	mov	r3, r0
   14a36:	2b00      	cmp	r3, #0
   14a38:	d006      	beq.n	14a48 <str_count+0x44>
   14a3a:	683b      	ldr	r3, [r7, #0]
   14a3c:	681b      	ldr	r3, [r3, #0]
   14a3e:	681b      	ldr	r3, [r3, #0]
   14a40:	699b      	ldr	r3, [r3, #24]
   14a42:	4a5e      	ldr	r2, [pc, #376]	; (14bbc <str_count+0x1b8>)
   14a44:	4293      	cmp	r3, r2
   14a46:	d006      	beq.n	14a56 <str_count+0x52>
   14a48:	4b5d      	ldr	r3, [pc, #372]	; (14bc0 <str_count+0x1bc>)
   14a4a:	4a5e      	ldr	r2, [pc, #376]	; (14bc4 <str_count+0x1c0>)
   14a4c:	f240 619c 	movw	r1, #1692	; 0x69c
   14a50:	485d      	ldr	r0, [pc, #372]	; (14bc8 <str_count+0x1c4>)
   14a52:	f006 fbc7 	bl	1b1e4 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   14a56:	683b      	ldr	r3, [r7, #0]
   14a58:	3304      	adds	r3, #4
   14a5a:	681b      	ldr	r3, [r3, #0]
   14a5c:	4618      	mov	r0, r3
   14a5e:	f7f8 fe43 	bl	d6e8 <mp_obj_get_type>
   14a62:	4602      	mov	r2, r0
   14a64:	697b      	ldr	r3, [r7, #20]
   14a66:	429a      	cmp	r2, r3
   14a68:	d005      	beq.n	14a76 <str_count+0x72>
        bad_implicit_conversion(args[1]);
   14a6a:	683b      	ldr	r3, [r7, #0]
   14a6c:	3304      	adds	r3, #4
   14a6e:	681b      	ldr	r3, [r3, #0]
   14a70:	4618      	mov	r0, r3
   14a72:	f000 fbd0 	bl	15216 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   14a76:	683b      	ldr	r3, [r7, #0]
   14a78:	681b      	ldr	r3, [r3, #0]
   14a7a:	4618      	mov	r0, r3
   14a7c:	f7fd fa2e 	bl	11edc <MP_OBJ_IS_QSTR>
   14a80:	4603      	mov	r3, r0
   14a82:	2b00      	cmp	r3, #0
   14a84:	d00a      	beq.n	14a9c <str_count+0x98>
   14a86:	683b      	ldr	r3, [r7, #0]
   14a88:	681b      	ldr	r3, [r3, #0]
   14a8a:	089b      	lsrs	r3, r3, #2
   14a8c:	f107 0210 	add.w	r2, r7, #16
   14a90:	4611      	mov	r1, r2
   14a92:	4618      	mov	r0, r3
   14a94:	f7ec fbba 	bl	120c <qstr_data>
   14a98:	62f8      	str	r0, [r7, #44]	; 0x2c
   14a9a:	e007      	b.n	14aac <str_count+0xa8>
   14a9c:	683b      	ldr	r3, [r7, #0]
   14a9e:	681b      	ldr	r3, [r3, #0]
   14aa0:	689b      	ldr	r3, [r3, #8]
   14aa2:	613b      	str	r3, [r7, #16]
   14aa4:	683b      	ldr	r3, [r7, #0]
   14aa6:	681b      	ldr	r3, [r3, #0]
   14aa8:	68db      	ldr	r3, [r3, #12]
   14aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   14aac:	683b      	ldr	r3, [r7, #0]
   14aae:	3304      	adds	r3, #4
   14ab0:	681b      	ldr	r3, [r3, #0]
   14ab2:	4618      	mov	r0, r3
   14ab4:	f7fd fa12 	bl	11edc <MP_OBJ_IS_QSTR>
   14ab8:	4603      	mov	r3, r0
   14aba:	2b00      	cmp	r3, #0
   14abc:	d00b      	beq.n	14ad6 <str_count+0xd2>
   14abe:	683b      	ldr	r3, [r7, #0]
   14ac0:	3304      	adds	r3, #4
   14ac2:	681b      	ldr	r3, [r3, #0]
   14ac4:	089b      	lsrs	r3, r3, #2
   14ac6:	f107 020c 	add.w	r2, r7, #12
   14aca:	4611      	mov	r1, r2
   14acc:	4618      	mov	r0, r3
   14ace:	f7ec fb9d 	bl	120c <qstr_data>
   14ad2:	62b8      	str	r0, [r7, #40]	; 0x28
   14ad4:	e009      	b.n	14aea <str_count+0xe6>
   14ad6:	683b      	ldr	r3, [r7, #0]
   14ad8:	3304      	adds	r3, #4
   14ada:	681b      	ldr	r3, [r3, #0]
   14adc:	689b      	ldr	r3, [r3, #8]
   14ade:	60fb      	str	r3, [r7, #12]
   14ae0:	683b      	ldr	r3, [r7, #0]
   14ae2:	3304      	adds	r3, #4
   14ae4:	681b      	ldr	r3, [r3, #0]
   14ae6:	68db      	ldr	r3, [r3, #12]
   14ae8:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   14aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14aec:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   14aee:	693b      	ldr	r3, [r7, #16]
   14af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14af2:	4413      	add	r3, r2
   14af4:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   14af6:	687b      	ldr	r3, [r7, #4]
   14af8:	2b02      	cmp	r3, #2
   14afa:	d911      	bls.n	14b20 <str_count+0x11c>
   14afc:	683b      	ldr	r3, [r7, #0]
   14afe:	3308      	adds	r3, #8
   14b00:	681b      	ldr	r3, [r3, #0]
   14b02:	4a32      	ldr	r2, [pc, #200]	; (14bcc <str_count+0x1c8>)
   14b04:	4293      	cmp	r3, r2
   14b06:	d00b      	beq.n	14b20 <str_count+0x11c>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   14b08:	693a      	ldr	r2, [r7, #16]
   14b0a:	683b      	ldr	r3, [r7, #0]
   14b0c:	3308      	adds	r3, #8
   14b0e:	6819      	ldr	r1, [r3, #0]
   14b10:	2301      	movs	r3, #1
   14b12:	9300      	str	r3, [sp, #0]
   14b14:	460b      	mov	r3, r1
   14b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14b18:	6978      	ldr	r0, [r7, #20]
   14b1a:	f7fd fe95 	bl	12848 <str_index_to_ptr>
   14b1e:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   14b20:	687b      	ldr	r3, [r7, #4]
   14b22:	2b03      	cmp	r3, #3
   14b24:	d911      	bls.n	14b4a <str_count+0x146>
   14b26:	683b      	ldr	r3, [r7, #0]
   14b28:	330c      	adds	r3, #12
   14b2a:	681b      	ldr	r3, [r3, #0]
   14b2c:	4a27      	ldr	r2, [pc, #156]	; (14bcc <str_count+0x1c8>)
   14b2e:	4293      	cmp	r3, r2
   14b30:	d00b      	beq.n	14b4a <str_count+0x146>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   14b32:	693a      	ldr	r2, [r7, #16]
   14b34:	683b      	ldr	r3, [r7, #0]
   14b36:	330c      	adds	r3, #12
   14b38:	6819      	ldr	r1, [r3, #0]
   14b3a:	2301      	movs	r3, #1
   14b3c:	9300      	str	r3, [sp, #0]
   14b3e:	460b      	mov	r3, r1
   14b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14b42:	6978      	ldr	r0, [r7, #20]
   14b44:	f7fd fe80 	bl	12848 <str_index_to_ptr>
   14b48:	6238      	str	r0, [r7, #32]
    }

    // if needle_len is zero then we count each gap between characters as an occurrence
    if (needle_len == 0) {
   14b4a:	68fb      	ldr	r3, [r7, #12]
   14b4c:	2b00      	cmp	r3, #0
   14b4e:	d10c      	bne.n	14b6a <str_count+0x166>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
   14b50:	6a3a      	ldr	r2, [r7, #32]
   14b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b54:	1ad3      	subs	r3, r2, r3
   14b56:	4619      	mov	r1, r3
   14b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14b5a:	f7fd f9a1 	bl	11ea0 <utf8_charlen>
   14b5e:	4603      	mov	r3, r0
   14b60:	3301      	adds	r3, #1
   14b62:	005b      	lsls	r3, r3, #1
   14b64:	f043 0301 	orr.w	r3, r3, #1
   14b68:	e023      	b.n	14bb2 <str_count+0x1ae>
    }

    // count the occurrences
    mp_int_t num_occurrences = 0;
   14b6a:	2300      	movs	r3, #0
   14b6c:	61fb      	str	r3, [r7, #28]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b70:	61bb      	str	r3, [r7, #24]
   14b72:	e014      	b.n	14b9e <str_count+0x19a>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
   14b74:	68fb      	ldr	r3, [r7, #12]
   14b76:	461a      	mov	r2, r3
   14b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14b7a:	69b8      	ldr	r0, [r7, #24]
   14b7c:	f007 fdd5 	bl	1c72a <memcmp>
   14b80:	4603      	mov	r3, r0
   14b82:	2b00      	cmp	r3, #0
   14b84:	d107      	bne.n	14b96 <str_count+0x192>
            num_occurrences++;
   14b86:	69fb      	ldr	r3, [r7, #28]
   14b88:	3301      	adds	r3, #1
   14b8a:	61fb      	str	r3, [r7, #28]
            haystack_ptr += needle_len;
   14b8c:	68fb      	ldr	r3, [r7, #12]
   14b8e:	69ba      	ldr	r2, [r7, #24]
   14b90:	4413      	add	r3, r2
   14b92:	61bb      	str	r3, [r7, #24]
   14b94:	e003      	b.n	14b9e <str_count+0x19a>
        } else {
            haystack_ptr = utf8_next_char(haystack_ptr);
   14b96:	69b8      	ldr	r0, [r7, #24]
   14b98:	f7fd f976 	bl	11e88 <utf8_next_char>
   14b9c:	61b8      	str	r0, [r7, #24]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14b9e:	68fb      	ldr	r3, [r7, #12]
   14ba0:	69ba      	ldr	r2, [r7, #24]
   14ba2:	441a      	add	r2, r3
   14ba4:	6a3b      	ldr	r3, [r7, #32]
   14ba6:	429a      	cmp	r2, r3
   14ba8:	d9e4      	bls.n	14b74 <str_count+0x170>
        }
    }

    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
   14baa:	69fb      	ldr	r3, [r7, #28]
   14bac:	005b      	lsls	r3, r3, #1
   14bae:	f043 0301 	orr.w	r3, r3, #1
}
   14bb2:	4618      	mov	r0, r3
   14bb4:	3730      	adds	r7, #48	; 0x30
   14bb6:	46bd      	mov	sp, r7
   14bb8:	bd80      	pop	{r7, pc}
   14bba:	bf00      	nop
   14bbc:	0001254f 	.word	0x0001254f
   14bc0:	00022dc8 	.word	0x00022dc8
   14bc4:	00023330 	.word	0x00023330
   14bc8:	00022d2c 	.word	0x00022d2c
   14bcc:	00022b54 	.word	0x00022b54

00014bd0 <str_caseconv>:
}
MP_DEFINE_CONST_FUN_OBJ_2(str_rpartition_obj, str_rpartition);
#endif

// Supposedly not too critical operations, so optimize for code size
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
   14bd0:	b590      	push	{r4, r7, lr}
   14bd2:	b08b      	sub	sp, #44	; 0x2c
   14bd4:	af00      	add	r7, sp, #0
   14bd6:	6078      	str	r0, [r7, #4]
   14bd8:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   14bda:	6838      	ldr	r0, [r7, #0]
   14bdc:	f7fd f97e 	bl	11edc <MP_OBJ_IS_QSTR>
   14be0:	4603      	mov	r3, r0
   14be2:	2b00      	cmp	r3, #0
   14be4:	d009      	beq.n	14bfa <str_caseconv+0x2a>
   14be6:	683b      	ldr	r3, [r7, #0]
   14be8:	089b      	lsrs	r3, r3, #2
   14bea:	f107 0218 	add.w	r2, r7, #24
   14bee:	4611      	mov	r1, r2
   14bf0:	4618      	mov	r0, r3
   14bf2:	f7ec fb0b 	bl	120c <qstr_data>
   14bf6:	6278      	str	r0, [r7, #36]	; 0x24
   14bf8:	e005      	b.n	14c06 <str_caseconv+0x36>
   14bfa:	683b      	ldr	r3, [r7, #0]
   14bfc:	689b      	ldr	r3, [r3, #8]
   14bfe:	61bb      	str	r3, [r7, #24]
   14c00:	683b      	ldr	r3, [r7, #0]
   14c02:	68db      	ldr	r3, [r3, #12]
   14c04:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr;
    vstr_init_len(&vstr, self_len);
   14c06:	69ba      	ldr	r2, [r7, #24]
   14c08:	f107 0308 	add.w	r3, r7, #8
   14c0c:	4611      	mov	r1, r2
   14c0e:	4618      	mov	r0, r3
   14c10:	f7ec fb95 	bl	133e <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   14c14:	693b      	ldr	r3, [r7, #16]
   14c16:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < self_len; i++) {
   14c18:	2300      	movs	r3, #0
   14c1a:	61fb      	str	r3, [r7, #28]
   14c1c:	e010      	b.n	14c40 <str_caseconv+0x70>
        *data++ = op(*self_data++);
   14c1e:	6a3c      	ldr	r4, [r7, #32]
   14c20:	1c63      	adds	r3, r4, #1
   14c22:	623b      	str	r3, [r7, #32]
   14c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14c26:	1c5a      	adds	r2, r3, #1
   14c28:	627a      	str	r2, [r7, #36]	; 0x24
   14c2a:	781b      	ldrb	r3, [r3, #0]
   14c2c:	461a      	mov	r2, r3
   14c2e:	687b      	ldr	r3, [r7, #4]
   14c30:	4610      	mov	r0, r2
   14c32:	4798      	blx	r3
   14c34:	4603      	mov	r3, r0
   14c36:	b2db      	uxtb	r3, r3
   14c38:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < self_len; i++) {
   14c3a:	69fb      	ldr	r3, [r7, #28]
   14c3c:	3301      	adds	r3, #1
   14c3e:	61fb      	str	r3, [r7, #28]
   14c40:	69bb      	ldr	r3, [r7, #24]
   14c42:	69fa      	ldr	r2, [r7, #28]
   14c44:	429a      	cmp	r2, r3
   14c46:	d3ea      	bcc.n	14c1e <str_caseconv+0x4e>
    }
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
   14c48:	6838      	ldr	r0, [r7, #0]
   14c4a:	f7f8 fd4d 	bl	d6e8 <mp_obj_get_type>
   14c4e:	4602      	mov	r2, r0
   14c50:	f107 0308 	add.w	r3, r7, #8
   14c54:	4619      	mov	r1, r3
   14c56:	4610      	mov	r0, r2
   14c58:	f000 f98b 	bl	14f72 <mp_obj_new_str_from_vstr>
   14c5c:	4603      	mov	r3, r0
}
   14c5e:	4618      	mov	r0, r3
   14c60:	372c      	adds	r7, #44	; 0x2c
   14c62:	46bd      	mov	sp, r7
   14c64:	bd90      	pop	{r4, r7, pc}

00014c66 <str_lower>:

STATIC mp_obj_t str_lower(mp_obj_t self_in) {
   14c66:	b580      	push	{r7, lr}
   14c68:	b082      	sub	sp, #8
   14c6a:	af00      	add	r7, sp, #0
   14c6c:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_tolower, self_in);
   14c6e:	6879      	ldr	r1, [r7, #4]
   14c70:	4803      	ldr	r0, [pc, #12]	; (14c80 <str_lower+0x1a>)
   14c72:	f7ff ffad 	bl	14bd0 <str_caseconv>
   14c76:	4603      	mov	r3, r0
}
   14c78:	4618      	mov	r0, r3
   14c7a:	3708      	adds	r7, #8
   14c7c:	46bd      	mov	sp, r7
   14c7e:	bd80      	pop	{r7, pc}
   14c80:	00002515 	.word	0x00002515

00014c84 <str_upper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_lower_obj, str_lower);

STATIC mp_obj_t str_upper(mp_obj_t self_in) {
   14c84:	b580      	push	{r7, lr}
   14c86:	b082      	sub	sp, #8
   14c88:	af00      	add	r7, sp, #0
   14c8a:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_toupper, self_in);
   14c8c:	6879      	ldr	r1, [r7, #4]
   14c8e:	4804      	ldr	r0, [pc, #16]	; (14ca0 <str_upper+0x1c>)
   14c90:	f7ff ff9e 	bl	14bd0 <str_caseconv>
   14c94:	4603      	mov	r3, r0
}
   14c96:	4618      	mov	r0, r3
   14c98:	3708      	adds	r7, #8
   14c9a:	46bd      	mov	sp, r7
   14c9c:	bd80      	pop	{r7, pc}
   14c9e:	bf00      	nop
   14ca0:	00002539 	.word	0x00002539

00014ca4 <str_uni_istype>:
MP_DEFINE_CONST_FUN_OBJ_1(str_upper_obj, str_upper);

STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
   14ca4:	b580      	push	{r7, lr}
   14ca6:	b088      	sub	sp, #32
   14ca8:	af00      	add	r7, sp, #0
   14caa:	6078      	str	r0, [r7, #4]
   14cac:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   14cae:	6838      	ldr	r0, [r7, #0]
   14cb0:	f7fd f914 	bl	11edc <MP_OBJ_IS_QSTR>
   14cb4:	4603      	mov	r3, r0
   14cb6:	2b00      	cmp	r3, #0
   14cb8:	d009      	beq.n	14cce <str_uni_istype+0x2a>
   14cba:	683b      	ldr	r3, [r7, #0]
   14cbc:	089b      	lsrs	r3, r3, #2
   14cbe:	f107 020c 	add.w	r2, r7, #12
   14cc2:	4611      	mov	r1, r2
   14cc4:	4618      	mov	r0, r3
   14cc6:	f7ec faa1 	bl	120c <qstr_data>
   14cca:	61f8      	str	r0, [r7, #28]
   14ccc:	e005      	b.n	14cda <str_uni_istype+0x36>
   14cce:	683b      	ldr	r3, [r7, #0]
   14cd0:	689b      	ldr	r3, [r3, #8]
   14cd2:	60fb      	str	r3, [r7, #12]
   14cd4:	683b      	ldr	r3, [r7, #0]
   14cd6:	68db      	ldr	r3, [r3, #12]
   14cd8:	61fb      	str	r3, [r7, #28]

    if (self_len == 0) {
   14cda:	68fb      	ldr	r3, [r7, #12]
   14cdc:	2b00      	cmp	r3, #0
   14cde:	d101      	bne.n	14ce4 <str_uni_istype+0x40>
        return mp_const_false; // default to False for empty str
   14ce0:	4b2c      	ldr	r3, [pc, #176]	; (14d94 <str_uni_istype+0xf0>)
   14ce2:	e052      	b.n	14d8a <str_uni_istype+0xe6>
    }

    if (f != unichar_isupper && f != unichar_islower) {
   14ce4:	687b      	ldr	r3, [r7, #4]
   14ce6:	4a2c      	ldr	r2, [pc, #176]	; (14d98 <str_uni_istype+0xf4>)
   14ce8:	4293      	cmp	r3, r2
   14cea:	d01e      	beq.n	14d2a <str_uni_istype+0x86>
   14cec:	687b      	ldr	r3, [r7, #4]
   14cee:	4a2b      	ldr	r2, [pc, #172]	; (14d9c <str_uni_istype+0xf8>)
   14cf0:	4293      	cmp	r3, r2
   14cf2:	d01a      	beq.n	14d2a <str_uni_istype+0x86>
        for (size_t i = 0; i < self_len; i++) {
   14cf4:	2300      	movs	r3, #0
   14cf6:	61bb      	str	r3, [r7, #24]
   14cf8:	e012      	b.n	14d20 <str_uni_istype+0x7c>
            if (!f(*self_data++)) {
   14cfa:	69fb      	ldr	r3, [r7, #28]
   14cfc:	1c5a      	adds	r2, r3, #1
   14cfe:	61fa      	str	r2, [r7, #28]
   14d00:	781b      	ldrb	r3, [r3, #0]
   14d02:	461a      	mov	r2, r3
   14d04:	687b      	ldr	r3, [r7, #4]
   14d06:	4610      	mov	r0, r2
   14d08:	4798      	blx	r3
   14d0a:	4603      	mov	r3, r0
   14d0c:	f083 0301 	eor.w	r3, r3, #1
   14d10:	b2db      	uxtb	r3, r3
   14d12:	2b00      	cmp	r3, #0
   14d14:	d001      	beq.n	14d1a <str_uni_istype+0x76>
                return mp_const_false;
   14d16:	4b1f      	ldr	r3, [pc, #124]	; (14d94 <str_uni_istype+0xf0>)
   14d18:	e037      	b.n	14d8a <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) {
   14d1a:	69bb      	ldr	r3, [r7, #24]
   14d1c:	3301      	adds	r3, #1
   14d1e:	61bb      	str	r3, [r7, #24]
   14d20:	68fb      	ldr	r3, [r7, #12]
   14d22:	69ba      	ldr	r2, [r7, #24]
   14d24:	429a      	cmp	r2, r3
   14d26:	d3e8      	bcc.n	14cfa <str_uni_istype+0x56>
   14d28:	e02e      	b.n	14d88 <str_uni_istype+0xe4>
            }
        }
    } else {
        bool contains_alpha = false;
   14d2a:	2300      	movs	r3, #0
   14d2c:	75fb      	strb	r3, [r7, #23]

        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   14d2e:	2300      	movs	r3, #0
   14d30:	613b      	str	r3, [r7, #16]
   14d32:	e01d      	b.n	14d70 <str_uni_istype+0xcc>
            if (unichar_isalpha(*self_data++)) {
   14d34:	69fb      	ldr	r3, [r7, #28]
   14d36:	1c5a      	adds	r2, r3, #1
   14d38:	61fa      	str	r2, [r7, #28]
   14d3a:	781b      	ldrb	r3, [r3, #0]
   14d3c:	4618      	mov	r0, r3
   14d3e:	f7ed fb33 	bl	23a8 <unichar_isalpha>
   14d42:	4603      	mov	r3, r0
   14d44:	2b00      	cmp	r3, #0
   14d46:	d010      	beq.n	14d6a <str_uni_istype+0xc6>
                contains_alpha = true;
   14d48:	2301      	movs	r3, #1
   14d4a:	75fb      	strb	r3, [r7, #23]
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
   14d4c:	69fb      	ldr	r3, [r7, #28]
   14d4e:	3b01      	subs	r3, #1
   14d50:	781b      	ldrb	r3, [r3, #0]
   14d52:	461a      	mov	r2, r3
   14d54:	687b      	ldr	r3, [r7, #4]
   14d56:	4610      	mov	r0, r2
   14d58:	4798      	blx	r3
   14d5a:	4603      	mov	r3, r0
   14d5c:	f083 0301 	eor.w	r3, r3, #1
   14d60:	b2db      	uxtb	r3, r3
   14d62:	2b00      	cmp	r3, #0
   14d64:	d001      	beq.n	14d6a <str_uni_istype+0xc6>
                    return mp_const_false;
   14d66:	4b0b      	ldr	r3, [pc, #44]	; (14d94 <str_uni_istype+0xf0>)
   14d68:	e00f      	b.n	14d8a <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   14d6a:	693b      	ldr	r3, [r7, #16]
   14d6c:	3301      	adds	r3, #1
   14d6e:	613b      	str	r3, [r7, #16]
   14d70:	68fb      	ldr	r3, [r7, #12]
   14d72:	693a      	ldr	r2, [r7, #16]
   14d74:	429a      	cmp	r2, r3
   14d76:	d3dd      	bcc.n	14d34 <str_uni_istype+0x90>
                }
            }
        }

        if (!contains_alpha) {
   14d78:	7dfb      	ldrb	r3, [r7, #23]
   14d7a:	f083 0301 	eor.w	r3, r3, #1
   14d7e:	b2db      	uxtb	r3, r3
   14d80:	2b00      	cmp	r3, #0
   14d82:	d001      	beq.n	14d88 <str_uni_istype+0xe4>
            return mp_const_false;
   14d84:	4b03      	ldr	r3, [pc, #12]	; (14d94 <str_uni_istype+0xf0>)
   14d86:	e000      	b.n	14d8a <str_uni_istype+0xe6>
        }
    }

    return mp_const_true;
   14d88:	4b05      	ldr	r3, [pc, #20]	; (14da0 <str_uni_istype+0xfc>)
}
   14d8a:	4618      	mov	r0, r3
   14d8c:	3720      	adds	r7, #32
   14d8e:	46bd      	mov	sp, r7
   14d90:	bd80      	pop	{r7, pc}
   14d92:	bf00      	nop
   14d94:	00021308 	.word	0x00021308
   14d98:	0000249d 	.word	0x0000249d
   14d9c:	000024d9 	.word	0x000024d9
   14da0:	00021310 	.word	0x00021310

00014da4 <str_isspace>:

STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
   14da4:	b580      	push	{r7, lr}
   14da6:	b082      	sub	sp, #8
   14da8:	af00      	add	r7, sp, #0
   14daa:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isspace, self_in);
   14dac:	6879      	ldr	r1, [r7, #4]
   14dae:	4804      	ldr	r0, [pc, #16]	; (14dc0 <str_isspace+0x1c>)
   14db0:	f7ff ff78 	bl	14ca4 <str_uni_istype>
   14db4:	4603      	mov	r3, r0
}
   14db6:	4618      	mov	r0, r3
   14db8:	3708      	adds	r7, #8
   14dba:	46bd      	mov	sp, r7
   14dbc:	bd80      	pop	{r7, pc}
   14dbe:	bf00      	nop
   14dc0:	0000236d 	.word	0x0000236d

00014dc4 <str_isalpha>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isspace_obj, str_isspace);

STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
   14dc4:	b580      	push	{r7, lr}
   14dc6:	b082      	sub	sp, #8
   14dc8:	af00      	add	r7, sp, #0
   14dca:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isalpha, self_in);
   14dcc:	6879      	ldr	r1, [r7, #4]
   14dce:	4804      	ldr	r0, [pc, #16]	; (14de0 <str_isalpha+0x1c>)
   14dd0:	f7ff ff68 	bl	14ca4 <str_uni_istype>
   14dd4:	4603      	mov	r3, r0
}
   14dd6:	4618      	mov	r0, r3
   14dd8:	3708      	adds	r7, #8
   14dda:	46bd      	mov	sp, r7
   14ddc:	bd80      	pop	{r7, pc}
   14dde:	bf00      	nop
   14de0:	000023a9 	.word	0x000023a9

00014de4 <str_isdigit>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isalpha_obj, str_isalpha);

STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
   14de4:	b580      	push	{r7, lr}
   14de6:	b082      	sub	sp, #8
   14de8:	af00      	add	r7, sp, #0
   14dea:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isdigit, self_in);
   14dec:	6879      	ldr	r1, [r7, #4]
   14dee:	4804      	ldr	r0, [pc, #16]	; (14e00 <str_isdigit+0x1c>)
   14df0:	f7ff ff58 	bl	14ca4 <str_uni_istype>
   14df4:	4603      	mov	r3, r0
}
   14df6:	4618      	mov	r0, r3
   14df8:	3708      	adds	r7, #8
   14dfa:	46bd      	mov	sp, r7
   14dfc:	bd80      	pop	{r7, pc}
   14dfe:	bf00      	nop
   14e00:	000023e5 	.word	0x000023e5

00014e04 <str_isupper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isdigit_obj, str_isdigit);

STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
   14e04:	b580      	push	{r7, lr}
   14e06:	b082      	sub	sp, #8
   14e08:	af00      	add	r7, sp, #0
   14e0a:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isupper, self_in);
   14e0c:	6879      	ldr	r1, [r7, #4]
   14e0e:	4804      	ldr	r0, [pc, #16]	; (14e20 <str_isupper+0x1c>)
   14e10:	f7ff ff48 	bl	14ca4 <str_uni_istype>
   14e14:	4603      	mov	r3, r0
}
   14e16:	4618      	mov	r0, r3
   14e18:	3708      	adds	r7, #8
   14e1a:	46bd      	mov	sp, r7
   14e1c:	bd80      	pop	{r7, pc}
   14e1e:	bf00      	nop
   14e20:	0000249d 	.word	0x0000249d

00014e24 <str_islower>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isupper_obj, str_isupper);

STATIC mp_obj_t str_islower(mp_obj_t self_in) {
   14e24:	b580      	push	{r7, lr}
   14e26:	b082      	sub	sp, #8
   14e28:	af00      	add	r7, sp, #0
   14e2a:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_islower, self_in);
   14e2c:	6879      	ldr	r1, [r7, #4]
   14e2e:	4804      	ldr	r0, [pc, #16]	; (14e40 <str_islower+0x1c>)
   14e30:	f7ff ff38 	bl	14ca4 <str_uni_istype>
   14e34:	4603      	mov	r3, r0
}
   14e36:	4618      	mov	r0, r3
   14e38:	3708      	adds	r7, #8
   14e3a:	46bd      	mov	sp, r7
   14e3c:	bd80      	pop	{r7, pc}
   14e3e:	bf00      	nop
   14e40:	000024d9 	.word	0x000024d9

00014e44 <mp_obj_str_get_buffer>:
    return bytes_make_new(NULL, n_args, 0, args);
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_encode_obj, 1, 3, str_encode);
#endif

mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   14e44:	b580      	push	{r7, lr}
   14e46:	b086      	sub	sp, #24
   14e48:	af00      	add	r7, sp, #0
   14e4a:	60f8      	str	r0, [r7, #12]
   14e4c:	60b9      	str	r1, [r7, #8]
   14e4e:	607a      	str	r2, [r7, #4]
    if (flags == MP_BUFFER_READ) {
   14e50:	687b      	ldr	r3, [r7, #4]
   14e52:	2b01      	cmp	r3, #1
   14e54:	d120      	bne.n	14e98 <mp_obj_str_get_buffer+0x54>
        GET_STR_DATA_LEN(self_in, str_data, str_len);
   14e56:	68f8      	ldr	r0, [r7, #12]
   14e58:	f7fd f840 	bl	11edc <MP_OBJ_IS_QSTR>
   14e5c:	4603      	mov	r3, r0
   14e5e:	2b00      	cmp	r3, #0
   14e60:	d009      	beq.n	14e76 <mp_obj_str_get_buffer+0x32>
   14e62:	68fb      	ldr	r3, [r7, #12]
   14e64:	089b      	lsrs	r3, r3, #2
   14e66:	f107 0210 	add.w	r2, r7, #16
   14e6a:	4611      	mov	r1, r2
   14e6c:	4618      	mov	r0, r3
   14e6e:	f7ec f9cd 	bl	120c <qstr_data>
   14e72:	6178      	str	r0, [r7, #20]
   14e74:	e005      	b.n	14e82 <mp_obj_str_get_buffer+0x3e>
   14e76:	68fb      	ldr	r3, [r7, #12]
   14e78:	689b      	ldr	r3, [r3, #8]
   14e7a:	613b      	str	r3, [r7, #16]
   14e7c:	68fb      	ldr	r3, [r7, #12]
   14e7e:	68db      	ldr	r3, [r3, #12]
   14e80:	617b      	str	r3, [r7, #20]
        bufinfo->buf = (void*)str_data;
   14e82:	68bb      	ldr	r3, [r7, #8]
   14e84:	697a      	ldr	r2, [r7, #20]
   14e86:	601a      	str	r2, [r3, #0]
        bufinfo->len = str_len;
   14e88:	693a      	ldr	r2, [r7, #16]
   14e8a:	68bb      	ldr	r3, [r7, #8]
   14e8c:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
   14e8e:	68bb      	ldr	r3, [r7, #8]
   14e90:	2242      	movs	r2, #66	; 0x42
   14e92:	609a      	str	r2, [r3, #8]
        return 0;
   14e94:	2300      	movs	r3, #0
   14e96:	e00a      	b.n	14eae <mp_obj_str_get_buffer+0x6a>
    } else {
        // can't write to a string
        bufinfo->buf = NULL;
   14e98:	68bb      	ldr	r3, [r7, #8]
   14e9a:	2200      	movs	r2, #0
   14e9c:	601a      	str	r2, [r3, #0]
        bufinfo->len = 0;
   14e9e:	68bb      	ldr	r3, [r7, #8]
   14ea0:	2200      	movs	r2, #0
   14ea2:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = -1;
   14ea4:	68bb      	ldr	r3, [r7, #8]
   14ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14eaa:	609a      	str	r2, [r3, #8]
        return 1;
   14eac:	2301      	movs	r3, #1
    }
}
   14eae:	4618      	mov	r0, r3
   14eb0:	3718      	adds	r7, #24
   14eb2:	46bd      	mov	sp, r7
   14eb4:	bd80      	pop	{r7, pc}

00014eb6 <mp_obj_new_str_copy>:
const mp_obj_str_t mp_const_empty_bytes_obj = {{&mp_type_bytes}, 0, 0, (const byte*)""};

// Create a str/bytes object using the given data.  New memory is allocated and
// the data is copied across.  This function should only be used if the type is bytes,
// or if the type is str and the string data is known to be not interned.
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
   14eb6:	b580      	push	{r7, lr}
   14eb8:	b086      	sub	sp, #24
   14eba:	af00      	add	r7, sp, #0
   14ebc:	60f8      	str	r0, [r7, #12]
   14ebe:	60b9      	str	r1, [r7, #8]
   14ec0:	607a      	str	r2, [r7, #4]
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   14ec2:	2010      	movs	r0, #16
   14ec4:	f7eb fa2a 	bl	31c <m_malloc>
   14ec8:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   14eca:	697b      	ldr	r3, [r7, #20]
   14ecc:	68fa      	ldr	r2, [r7, #12]
   14ece:	601a      	str	r2, [r3, #0]
    o->len = len;
   14ed0:	697b      	ldr	r3, [r7, #20]
   14ed2:	687a      	ldr	r2, [r7, #4]
   14ed4:	609a      	str	r2, [r3, #8]
    if (data) {
   14ed6:	68bb      	ldr	r3, [r7, #8]
   14ed8:	2b00      	cmp	r3, #0
   14eda:	d019      	beq.n	14f10 <mp_obj_new_str_copy+0x5a>
        o->hash = qstr_compute_hash(data, len);
   14edc:	6879      	ldr	r1, [r7, #4]
   14ede:	68b8      	ldr	r0, [r7, #8]
   14ee0:	f7eb ff9a 	bl	e18 <qstr_compute_hash>
   14ee4:	4602      	mov	r2, r0
   14ee6:	697b      	ldr	r3, [r7, #20]
   14ee8:	605a      	str	r2, [r3, #4]
        byte *p = m_new(byte, len + 1);
   14eea:	687b      	ldr	r3, [r7, #4]
   14eec:	3301      	adds	r3, #1
   14eee:	4618      	mov	r0, r3
   14ef0:	f7eb fa14 	bl	31c <m_malloc>
   14ef4:	6138      	str	r0, [r7, #16]
        o->data = p;
   14ef6:	697b      	ldr	r3, [r7, #20]
   14ef8:	693a      	ldr	r2, [r7, #16]
   14efa:	60da      	str	r2, [r3, #12]
        memcpy(p, data, len * sizeof(byte));
   14efc:	687a      	ldr	r2, [r7, #4]
   14efe:	68b9      	ldr	r1, [r7, #8]
   14f00:	6938      	ldr	r0, [r7, #16]
   14f02:	f007 fb2d 	bl	1c560 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
   14f06:	693a      	ldr	r2, [r7, #16]
   14f08:	687b      	ldr	r3, [r7, #4]
   14f0a:	4413      	add	r3, r2
   14f0c:	2200      	movs	r2, #0
   14f0e:	701a      	strb	r2, [r3, #0]
    }
    return MP_OBJ_FROM_PTR(o);
   14f10:	697b      	ldr	r3, [r7, #20]
}
   14f12:	4618      	mov	r0, r3
   14f14:	3718      	adds	r7, #24
   14f16:	46bd      	mov	sp, r7
   14f18:	bd80      	pop	{r7, pc}

00014f1a <mp_obj_new_str_of_type>:

// Create a str/bytes object using the given data.  If the type is str and the string
// data is already interned, then a qstr object is returned.  Otherwise new memory is
// allocated for the object and the data is copied across.
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
   14f1a:	b580      	push	{r7, lr}
   14f1c:	b084      	sub	sp, #16
   14f1e:	af00      	add	r7, sp, #0
   14f20:	60f8      	str	r0, [r7, #12]
   14f22:	60b9      	str	r1, [r7, #8]
   14f24:	607a      	str	r2, [r7, #4]
    if (type == &mp_type_str) {
   14f26:	68fb      	ldr	r3, [r7, #12]
   14f28:	4a08      	ldr	r2, [pc, #32]	; (14f4c <mp_obj_new_str_of_type+0x32>)
   14f2a:	4293      	cmp	r3, r2
   14f2c:	d105      	bne.n	14f3a <mp_obj_new_str_of_type+0x20>
        return mp_obj_new_str((const char*)data, len);
   14f2e:	6879      	ldr	r1, [r7, #4]
   14f30:	68b8      	ldr	r0, [r7, #8]
   14f32:	f000 f881 	bl	15038 <mp_obj_new_str>
   14f36:	4603      	mov	r3, r0
   14f38:	e004      	b.n	14f44 <mp_obj_new_str_of_type+0x2a>
    } else {
        return mp_obj_new_bytes(data, len);
   14f3a:	6879      	ldr	r1, [r7, #4]
   14f3c:	68b8      	ldr	r0, [r7, #8]
   14f3e:	f000 f8d2 	bl	150e6 <mp_obj_new_bytes>
   14f42:	4603      	mov	r3, r0
    }
}
   14f44:	4618      	mov	r0, r3
   14f46:	3710      	adds	r7, #16
   14f48:	46bd      	mov	sp, r7
   14f4a:	bd80      	pop	{r7, pc}
   14f4c:	00023204 	.word	0x00023204

00014f50 <mp_obj_new_str_via_qstr>:

// Create a str using a qstr to store the data; may use existing or new qstr.
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
   14f50:	b580      	push	{r7, lr}
   14f52:	b082      	sub	sp, #8
   14f54:	af00      	add	r7, sp, #0
   14f56:	6078      	str	r0, [r7, #4]
   14f58:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
   14f5a:	6839      	ldr	r1, [r7, #0]
   14f5c:	6878      	ldr	r0, [r7, #4]
   14f5e:	f7ec f86e 	bl	103e <qstr_from_strn>
   14f62:	4603      	mov	r3, r0
   14f64:	009b      	lsls	r3, r3, #2
   14f66:	f043 0302 	orr.w	r3, r3, #2
}
   14f6a:	4618      	mov	r0, r3
   14f6c:	3708      	adds	r7, #8
   14f6e:	46bd      	mov	sp, r7
   14f70:	bd80      	pop	{r7, pc}

00014f72 <mp_obj_new_str_from_vstr>:

// Create a str/bytes object from the given vstr.  The vstr buffer is resized to
// the exact length required and then reused for the str/bytes object.  The vstr
// is cleared and can safely be passed to vstr_free if it was heap allocated.
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
   14f72:	b580      	push	{r7, lr}
   14f74:	b084      	sub	sp, #16
   14f76:	af00      	add	r7, sp, #0
   14f78:	6078      	str	r0, [r7, #4]
   14f7a:	6039      	str	r1, [r7, #0]
    // if not a bytes object, look if a qstr with this data already exists
    if (type == &mp_type_str) {
   14f7c:	687b      	ldr	r3, [r7, #4]
   14f7e:	4a2d      	ldr	r2, [pc, #180]	; (15034 <mp_obj_new_str_from_vstr+0xc2>)
   14f80:	4293      	cmp	r3, r2
   14f82:	d116      	bne.n	14fb2 <mp_obj_new_str_from_vstr+0x40>
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
   14f84:	683b      	ldr	r3, [r7, #0]
   14f86:	689a      	ldr	r2, [r3, #8]
   14f88:	683b      	ldr	r3, [r7, #0]
   14f8a:	685b      	ldr	r3, [r3, #4]
   14f8c:	4619      	mov	r1, r3
   14f8e:	4610      	mov	r0, r2
   14f90:	f7eb fff2 	bl	f78 <qstr_find_strn>
   14f94:	60f8      	str	r0, [r7, #12]
        if (q != MP_QSTR_NULL) {
   14f96:	68fb      	ldr	r3, [r7, #12]
   14f98:	2b00      	cmp	r3, #0
   14f9a:	d00a      	beq.n	14fb2 <mp_obj_new_str_from_vstr+0x40>
            vstr_clear(vstr);
   14f9c:	6838      	ldr	r0, [r7, #0]
   14f9e:	f7ec fa11 	bl	13c4 <vstr_clear>
            vstr->alloc = 0;
   14fa2:	683b      	ldr	r3, [r7, #0]
   14fa4:	2200      	movs	r2, #0
   14fa6:	601a      	str	r2, [r3, #0]
            return MP_OBJ_NEW_QSTR(q);
   14fa8:	68fb      	ldr	r3, [r7, #12]
   14faa:	009b      	lsls	r3, r3, #2
   14fac:	f043 0302 	orr.w	r3, r3, #2
   14fb0:	e03b      	b.n	1502a <mp_obj_new_str_from_vstr+0xb8>
        }
    }

    // make a new str/bytes object
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   14fb2:	2010      	movs	r0, #16
   14fb4:	f7eb f9b2 	bl	31c <m_malloc>
   14fb8:	60b8      	str	r0, [r7, #8]
    o->base.type = type;
   14fba:	68bb      	ldr	r3, [r7, #8]
   14fbc:	687a      	ldr	r2, [r7, #4]
   14fbe:	601a      	str	r2, [r3, #0]
    o->len = vstr->len;
   14fc0:	683b      	ldr	r3, [r7, #0]
   14fc2:	685a      	ldr	r2, [r3, #4]
   14fc4:	68bb      	ldr	r3, [r7, #8]
   14fc6:	609a      	str	r2, [r3, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
   14fc8:	683b      	ldr	r3, [r7, #0]
   14fca:	689a      	ldr	r2, [r3, #8]
   14fcc:	683b      	ldr	r3, [r7, #0]
   14fce:	685b      	ldr	r3, [r3, #4]
   14fd0:	4619      	mov	r1, r3
   14fd2:	4610      	mov	r0, r2
   14fd4:	f7eb ff20 	bl	e18 <qstr_compute_hash>
   14fd8:	4602      	mov	r2, r0
   14fda:	68bb      	ldr	r3, [r7, #8]
   14fdc:	605a      	str	r2, [r3, #4]
    if (vstr->len + 1 == vstr->alloc) {
   14fde:	683b      	ldr	r3, [r7, #0]
   14fe0:	685b      	ldr	r3, [r3, #4]
   14fe2:	1c5a      	adds	r2, r3, #1
   14fe4:	683b      	ldr	r3, [r7, #0]
   14fe6:	681b      	ldr	r3, [r3, #0]
   14fe8:	429a      	cmp	r2, r3
   14fea:	d104      	bne.n	14ff6 <mp_obj_new_str_from_vstr+0x84>
        o->data = (byte*)vstr->buf;
   14fec:	683b      	ldr	r3, [r7, #0]
   14fee:	689a      	ldr	r2, [r3, #8]
   14ff0:	68bb      	ldr	r3, [r7, #8]
   14ff2:	60da      	str	r2, [r3, #12]
   14ff4:	e00b      	b.n	1500e <mp_obj_new_str_from_vstr+0x9c>
    } else {
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
   14ff6:	683b      	ldr	r3, [r7, #0]
   14ff8:	689a      	ldr	r2, [r3, #8]
   14ffa:	683b      	ldr	r3, [r7, #0]
   14ffc:	685b      	ldr	r3, [r3, #4]
   14ffe:	3301      	adds	r3, #1
   15000:	4619      	mov	r1, r3
   15002:	4610      	mov	r0, r2
   15004:	f7eb f9bc 	bl	380 <m_realloc>
   15008:	4602      	mov	r2, r0
   1500a:	68bb      	ldr	r3, [r7, #8]
   1500c:	60da      	str	r2, [r3, #12]
    }
    ((byte*)o->data)[o->len] = '\0'; // add null byte
   1500e:	68bb      	ldr	r3, [r7, #8]
   15010:	68da      	ldr	r2, [r3, #12]
   15012:	68bb      	ldr	r3, [r7, #8]
   15014:	689b      	ldr	r3, [r3, #8]
   15016:	4413      	add	r3, r2
   15018:	2200      	movs	r2, #0
   1501a:	701a      	strb	r2, [r3, #0]
    vstr->buf = NULL;
   1501c:	683b      	ldr	r3, [r7, #0]
   1501e:	2200      	movs	r2, #0
   15020:	609a      	str	r2, [r3, #8]
    vstr->alloc = 0;
   15022:	683b      	ldr	r3, [r7, #0]
   15024:	2200      	movs	r2, #0
   15026:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   15028:	68bb      	ldr	r3, [r7, #8]
}
   1502a:	4618      	mov	r0, r3
   1502c:	3710      	adds	r7, #16
   1502e:	46bd      	mov	sp, r7
   15030:	bd80      	pop	{r7, pc}
   15032:	bf00      	nop
   15034:	00023204 	.word	0x00023204

00015038 <mp_obj_new_str>:

mp_obj_t mp_obj_new_str(const char* data, size_t len) {
   15038:	b580      	push	{r7, lr}
   1503a:	b084      	sub	sp, #16
   1503c:	af00      	add	r7, sp, #0
   1503e:	6078      	str	r0, [r7, #4]
   15040:	6039      	str	r1, [r7, #0]
    qstr q = qstr_find_strn(data, len);
   15042:	6839      	ldr	r1, [r7, #0]
   15044:	6878      	ldr	r0, [r7, #4]
   15046:	f7eb ff97 	bl	f78 <qstr_find_strn>
   1504a:	60f8      	str	r0, [r7, #12]
    if (q != MP_QSTR_NULL) {
   1504c:	68fb      	ldr	r3, [r7, #12]
   1504e:	2b00      	cmp	r3, #0
   15050:	d004      	beq.n	1505c <mp_obj_new_str+0x24>
        // qstr with this data already exists
        return MP_OBJ_NEW_QSTR(q);
   15052:	68fb      	ldr	r3, [r7, #12]
   15054:	009b      	lsls	r3, r3, #2
   15056:	f043 0302 	orr.w	r3, r3, #2
   1505a:	e005      	b.n	15068 <mp_obj_new_str+0x30>
    } else {
        // no existing qstr, don't make one
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
   1505c:	683a      	ldr	r2, [r7, #0]
   1505e:	6879      	ldr	r1, [r7, #4]
   15060:	4803      	ldr	r0, [pc, #12]	; (15070 <mp_obj_new_str+0x38>)
   15062:	f7ff ff28 	bl	14eb6 <mp_obj_new_str_copy>
   15066:	4603      	mov	r3, r0
    }
}
   15068:	4618      	mov	r0, r3
   1506a:	3710      	adds	r7, #16
   1506c:	46bd      	mov	sp, r7
   1506e:	bd80      	pop	{r7, pc}
   15070:	00023204 	.word	0x00023204

00015074 <mp_obj_str_intern>:

mp_obj_t mp_obj_str_intern(mp_obj_t str) {
   15074:	b580      	push	{r7, lr}
   15076:	b084      	sub	sp, #16
   15078:	af00      	add	r7, sp, #0
   1507a:	6078      	str	r0, [r7, #4]
    GET_STR_DATA_LEN(str, data, len);
   1507c:	6878      	ldr	r0, [r7, #4]
   1507e:	f7fc ff2d 	bl	11edc <MP_OBJ_IS_QSTR>
   15082:	4603      	mov	r3, r0
   15084:	2b00      	cmp	r3, #0
   15086:	d009      	beq.n	1509c <mp_obj_str_intern+0x28>
   15088:	687b      	ldr	r3, [r7, #4]
   1508a:	089b      	lsrs	r3, r3, #2
   1508c:	f107 0208 	add.w	r2, r7, #8
   15090:	4611      	mov	r1, r2
   15092:	4618      	mov	r0, r3
   15094:	f7ec f8ba 	bl	120c <qstr_data>
   15098:	60f8      	str	r0, [r7, #12]
   1509a:	e005      	b.n	150a8 <mp_obj_str_intern+0x34>
   1509c:	687b      	ldr	r3, [r7, #4]
   1509e:	689b      	ldr	r3, [r3, #8]
   150a0:	60bb      	str	r3, [r7, #8]
   150a2:	687b      	ldr	r3, [r7, #4]
   150a4:	68db      	ldr	r3, [r3, #12]
   150a6:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   150a8:	68bb      	ldr	r3, [r7, #8]
   150aa:	4619      	mov	r1, r3
   150ac:	68f8      	ldr	r0, [r7, #12]
   150ae:	f7ff ff4f 	bl	14f50 <mp_obj_new_str_via_qstr>
   150b2:	4603      	mov	r3, r0
}
   150b4:	4618      	mov	r0, r3
   150b6:	3710      	adds	r7, #16
   150b8:	46bd      	mov	sp, r7
   150ba:	bd80      	pop	{r7, pc}

000150bc <mp_obj_str_intern_checked>:

mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   150bc:	b580      	push	{r7, lr}
   150be:	b084      	sub	sp, #16
   150c0:	af00      	add	r7, sp, #0
   150c2:	6078      	str	r0, [r7, #4]
    size_t len;
    const char *data = mp_obj_str_get_data(obj, &len);
   150c4:	f107 0308 	add.w	r3, r7, #8
   150c8:	4619      	mov	r1, r3
   150ca:	6878      	ldr	r0, [r7, #4]
   150cc:	f000 f912 	bl	152f4 <mp_obj_str_get_data>
   150d0:	60f8      	str	r0, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   150d2:	68bb      	ldr	r3, [r7, #8]
   150d4:	4619      	mov	r1, r3
   150d6:	68f8      	ldr	r0, [r7, #12]
   150d8:	f7ff ff3a 	bl	14f50 <mp_obj_new_str_via_qstr>
   150dc:	4603      	mov	r3, r0
}
   150de:	4618      	mov	r0, r3
   150e0:	3710      	adds	r7, #16
   150e2:	46bd      	mov	sp, r7
   150e4:	bd80      	pop	{r7, pc}

000150e6 <mp_obj_new_bytes>:

mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
   150e6:	b580      	push	{r7, lr}
   150e8:	b082      	sub	sp, #8
   150ea:	af00      	add	r7, sp, #0
   150ec:	6078      	str	r0, [r7, #4]
   150ee:	6039      	str	r1, [r7, #0]
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
   150f0:	683a      	ldr	r2, [r7, #0]
   150f2:	6879      	ldr	r1, [r7, #4]
   150f4:	4803      	ldr	r0, [pc, #12]	; (15104 <mp_obj_new_bytes+0x1e>)
   150f6:	f7ff fede 	bl	14eb6 <mp_obj_new_str_copy>
   150fa:	4603      	mov	r3, r0
}
   150fc:	4618      	mov	r0, r3
   150fe:	3708      	adds	r7, #8
   15100:	46bd      	mov	sp, r7
   15102:	bd80      	pop	{r7, pc}
   15104:	00023240 	.word	0x00023240

00015108 <mp_obj_str_equal>:

bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   15108:	b580      	push	{r7, lr}
   1510a:	b088      	sub	sp, #32
   1510c:	af00      	add	r7, sp, #0
   1510e:	6078      	str	r0, [r7, #4]
   15110:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   15112:	6878      	ldr	r0, [r7, #4]
   15114:	f7fc fee2 	bl	11edc <MP_OBJ_IS_QSTR>
   15118:	4603      	mov	r3, r0
   1511a:	2b00      	cmp	r3, #0
   1511c:	d00d      	beq.n	1513a <mp_obj_str_equal+0x32>
   1511e:	6838      	ldr	r0, [r7, #0]
   15120:	f7fc fedc 	bl	11edc <MP_OBJ_IS_QSTR>
   15124:	4603      	mov	r3, r0
   15126:	2b00      	cmp	r3, #0
   15128:	d007      	beq.n	1513a <mp_obj_str_equal+0x32>
        return s1 == s2;
   1512a:	687a      	ldr	r2, [r7, #4]
   1512c:	683b      	ldr	r3, [r7, #0]
   1512e:	429a      	cmp	r2, r3
   15130:	bf0c      	ite	eq
   15132:	2301      	moveq	r3, #1
   15134:	2300      	movne	r3, #0
   15136:	b2db      	uxtb	r3, r3
   15138:	e069      	b.n	1520e <mp_obj_str_equal+0x106>
    } else {
        GET_STR_HASH(s1, h1);
   1513a:	6878      	ldr	r0, [r7, #4]
   1513c:	f7fc fece 	bl	11edc <MP_OBJ_IS_QSTR>
   15140:	4603      	mov	r3, r0
   15142:	2b00      	cmp	r3, #0
   15144:	d006      	beq.n	15154 <mp_obj_str_equal+0x4c>
   15146:	687b      	ldr	r3, [r7, #4]
   15148:	089b      	lsrs	r3, r3, #2
   1514a:	4618      	mov	r0, r3
   1514c:	f7ec f834 	bl	11b8 <qstr_hash>
   15150:	61f8      	str	r0, [r7, #28]
   15152:	e002      	b.n	1515a <mp_obj_str_equal+0x52>
   15154:	687b      	ldr	r3, [r7, #4]
   15156:	685b      	ldr	r3, [r3, #4]
   15158:	61fb      	str	r3, [r7, #28]
        GET_STR_HASH(s2, h2);
   1515a:	6838      	ldr	r0, [r7, #0]
   1515c:	f7fc febe 	bl	11edc <MP_OBJ_IS_QSTR>
   15160:	4603      	mov	r3, r0
   15162:	2b00      	cmp	r3, #0
   15164:	d006      	beq.n	15174 <mp_obj_str_equal+0x6c>
   15166:	683b      	ldr	r3, [r7, #0]
   15168:	089b      	lsrs	r3, r3, #2
   1516a:	4618      	mov	r0, r3
   1516c:	f7ec f824 	bl	11b8 <qstr_hash>
   15170:	61b8      	str	r0, [r7, #24]
   15172:	e002      	b.n	1517a <mp_obj_str_equal+0x72>
   15174:	683b      	ldr	r3, [r7, #0]
   15176:	685b      	ldr	r3, [r3, #4]
   15178:	61bb      	str	r3, [r7, #24]
        // If any of hashes is 0, it means it's not valid
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   1517a:	69fb      	ldr	r3, [r7, #28]
   1517c:	2b00      	cmp	r3, #0
   1517e:	d008      	beq.n	15192 <mp_obj_str_equal+0x8a>
   15180:	69bb      	ldr	r3, [r7, #24]
   15182:	2b00      	cmp	r3, #0
   15184:	d005      	beq.n	15192 <mp_obj_str_equal+0x8a>
   15186:	69fa      	ldr	r2, [r7, #28]
   15188:	69bb      	ldr	r3, [r7, #24]
   1518a:	429a      	cmp	r2, r3
   1518c:	d001      	beq.n	15192 <mp_obj_str_equal+0x8a>
            return false;
   1518e:	2300      	movs	r3, #0
   15190:	e03d      	b.n	1520e <mp_obj_str_equal+0x106>
        }
        GET_STR_DATA_LEN(s1, d1, l1);
   15192:	6878      	ldr	r0, [r7, #4]
   15194:	f7fc fea2 	bl	11edc <MP_OBJ_IS_QSTR>
   15198:	4603      	mov	r3, r0
   1519a:	2b00      	cmp	r3, #0
   1519c:	d009      	beq.n	151b2 <mp_obj_str_equal+0xaa>
   1519e:	687b      	ldr	r3, [r7, #4]
   151a0:	089b      	lsrs	r3, r3, #2
   151a2:	f107 020c 	add.w	r2, r7, #12
   151a6:	4611      	mov	r1, r2
   151a8:	4618      	mov	r0, r3
   151aa:	f7ec f82f 	bl	120c <qstr_data>
   151ae:	6178      	str	r0, [r7, #20]
   151b0:	e005      	b.n	151be <mp_obj_str_equal+0xb6>
   151b2:	687b      	ldr	r3, [r7, #4]
   151b4:	689b      	ldr	r3, [r3, #8]
   151b6:	60fb      	str	r3, [r7, #12]
   151b8:	687b      	ldr	r3, [r7, #4]
   151ba:	68db      	ldr	r3, [r3, #12]
   151bc:	617b      	str	r3, [r7, #20]
        GET_STR_DATA_LEN(s2, d2, l2);
   151be:	6838      	ldr	r0, [r7, #0]
   151c0:	f7fc fe8c 	bl	11edc <MP_OBJ_IS_QSTR>
   151c4:	4603      	mov	r3, r0
   151c6:	2b00      	cmp	r3, #0
   151c8:	d009      	beq.n	151de <mp_obj_str_equal+0xd6>
   151ca:	683b      	ldr	r3, [r7, #0]
   151cc:	089b      	lsrs	r3, r3, #2
   151ce:	f107 0208 	add.w	r2, r7, #8
   151d2:	4611      	mov	r1, r2
   151d4:	4618      	mov	r0, r3
   151d6:	f7ec f819 	bl	120c <qstr_data>
   151da:	6138      	str	r0, [r7, #16]
   151dc:	e005      	b.n	151ea <mp_obj_str_equal+0xe2>
   151de:	683b      	ldr	r3, [r7, #0]
   151e0:	689b      	ldr	r3, [r3, #8]
   151e2:	60bb      	str	r3, [r7, #8]
   151e4:	683b      	ldr	r3, [r7, #0]
   151e6:	68db      	ldr	r3, [r3, #12]
   151e8:	613b      	str	r3, [r7, #16]
        if (l1 != l2) {
   151ea:	68fa      	ldr	r2, [r7, #12]
   151ec:	68bb      	ldr	r3, [r7, #8]
   151ee:	429a      	cmp	r2, r3
   151f0:	d001      	beq.n	151f6 <mp_obj_str_equal+0xee>
            return false;
   151f2:	2300      	movs	r3, #0
   151f4:	e00b      	b.n	1520e <mp_obj_str_equal+0x106>
        }
        return memcmp(d1, d2, l1) == 0;
   151f6:	68fb      	ldr	r3, [r7, #12]
   151f8:	461a      	mov	r2, r3
   151fa:	6939      	ldr	r1, [r7, #16]
   151fc:	6978      	ldr	r0, [r7, #20]
   151fe:	f007 fa94 	bl	1c72a <memcmp>
   15202:	4603      	mov	r3, r0
   15204:	2b00      	cmp	r3, #0
   15206:	bf0c      	ite	eq
   15208:	2301      	moveq	r3, #1
   1520a:	2300      	movne	r3, #0
   1520c:	b2db      	uxtb	r3, r3
    }
}
   1520e:	4618      	mov	r0, r3
   15210:	3720      	adds	r7, #32
   15212:	46bd      	mov	sp, r7
   15214:	bd80      	pop	{r7, pc}

00015216 <bad_implicit_conversion>:

STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
   15216:	b580      	push	{r7, lr}
   15218:	b082      	sub	sp, #8
   1521a:	af00      	add	r7, sp, #0
   1521c:	6078      	str	r0, [r7, #4]
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("can't convert to str implicitly");
   1521e:	4801      	ldr	r0, [pc, #4]	; (15224 <bad_implicit_conversion+0xe>)
   15220:	f7f7 fe4c 	bl	cebc <mp_raise_TypeError>
   15224:	00023290 	.word	0x00023290

00015228 <mp_obj_str_get_qstr>:
    }
}

// use this if you will anyway convert the string to a qstr
// will be more efficient for the case where it's already a qstr
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   15228:	b580      	push	{r7, lr}
   1522a:	b084      	sub	sp, #16
   1522c:	af00      	add	r7, sp, #0
   1522e:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_QSTR(self_in)) {
   15230:	6878      	ldr	r0, [r7, #4]
   15232:	f7fc fe53 	bl	11edc <MP_OBJ_IS_QSTR>
   15236:	4603      	mov	r3, r0
   15238:	2b00      	cmp	r3, #0
   1523a:	d002      	beq.n	15242 <mp_obj_str_get_qstr+0x1a>
        return MP_OBJ_QSTR_VALUE(self_in);
   1523c:	687b      	ldr	r3, [r7, #4]
   1523e:	089b      	lsrs	r3, r3, #2
   15240:	e019      	b.n	15276 <mp_obj_str_get_qstr+0x4e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   15242:	6878      	ldr	r0, [r7, #4]
   15244:	f7fc fe5c 	bl	11f00 <MP_OBJ_IS_OBJ>
   15248:	4603      	mov	r3, r0
   1524a:	2b00      	cmp	r3, #0
   1524c:	d010      	beq.n	15270 <mp_obj_str_get_qstr+0x48>
   1524e:	687b      	ldr	r3, [r7, #4]
   15250:	681b      	ldr	r3, [r3, #0]
   15252:	4a0b      	ldr	r2, [pc, #44]	; (15280 <mp_obj_str_get_qstr+0x58>)
   15254:	4293      	cmp	r3, r2
   15256:	d10b      	bne.n	15270 <mp_obj_str_get_qstr+0x48>
        mp_obj_str_t *self = MP_OBJ_TO_PTR(self_in);
   15258:	687b      	ldr	r3, [r7, #4]
   1525a:	60fb      	str	r3, [r7, #12]
        return qstr_from_strn((char*)self->data, self->len);
   1525c:	68fb      	ldr	r3, [r7, #12]
   1525e:	68da      	ldr	r2, [r3, #12]
   15260:	68fb      	ldr	r3, [r7, #12]
   15262:	689b      	ldr	r3, [r3, #8]
   15264:	4619      	mov	r1, r3
   15266:	4610      	mov	r0, r2
   15268:	f7eb fee9 	bl	103e <qstr_from_strn>
   1526c:	4603      	mov	r3, r0
   1526e:	e002      	b.n	15276 <mp_obj_str_get_qstr+0x4e>
    } else {
        bad_implicit_conversion(self_in);
   15270:	6878      	ldr	r0, [r7, #4]
   15272:	f7ff ffd0 	bl	15216 <bad_implicit_conversion>
    }
}
   15276:	4618      	mov	r0, r3
   15278:	3710      	adds	r7, #16
   1527a:	46bd      	mov	sp, r7
   1527c:	bd80      	pop	{r7, pc}
   1527e:	bf00      	nop
   15280:	00023204 	.word	0x00023204

00015284 <mp_obj_str_get_str>:

// only use this function if you need the str data to be zero terminated
// at the moment all strings are zero terminated to help with C ASCIIZ compatibility
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   15284:	b580      	push	{r7, lr}
   15286:	b084      	sub	sp, #16
   15288:	af00      	add	r7, sp, #0
   1528a:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   1528c:	6878      	ldr	r0, [r7, #4]
   1528e:	f7fc fe25 	bl	11edc <MP_OBJ_IS_QSTR>
   15292:	4603      	mov	r3, r0
   15294:	2b00      	cmp	r3, #0
   15296:	d10b      	bne.n	152b0 <mp_obj_str_get_str+0x2c>
   15298:	6878      	ldr	r0, [r7, #4]
   1529a:	f7fc fe31 	bl	11f00 <MP_OBJ_IS_OBJ>
   1529e:	4603      	mov	r3, r0
   152a0:	2b00      	cmp	r3, #0
   152a2:	d01d      	beq.n	152e0 <mp_obj_str_get_str+0x5c>
   152a4:	687b      	ldr	r3, [r7, #4]
   152a6:	681b      	ldr	r3, [r3, #0]
   152a8:	699b      	ldr	r3, [r3, #24]
   152aa:	4a11      	ldr	r2, [pc, #68]	; (152f0 <mp_obj_str_get_str+0x6c>)
   152ac:	4293      	cmp	r3, r2
   152ae:	d117      	bne.n	152e0 <mp_obj_str_get_str+0x5c>
        GET_STR_DATA_LEN(self_in, s, l);
   152b0:	6878      	ldr	r0, [r7, #4]
   152b2:	f7fc fe13 	bl	11edc <MP_OBJ_IS_QSTR>
   152b6:	4603      	mov	r3, r0
   152b8:	2b00      	cmp	r3, #0
   152ba:	d009      	beq.n	152d0 <mp_obj_str_get_str+0x4c>
   152bc:	687b      	ldr	r3, [r7, #4]
   152be:	089b      	lsrs	r3, r3, #2
   152c0:	f107 0208 	add.w	r2, r7, #8
   152c4:	4611      	mov	r1, r2
   152c6:	4618      	mov	r0, r3
   152c8:	f7eb ffa0 	bl	120c <qstr_data>
   152cc:	60f8      	str	r0, [r7, #12]
   152ce:	e005      	b.n	152dc <mp_obj_str_get_str+0x58>
   152d0:	687b      	ldr	r3, [r7, #4]
   152d2:	689b      	ldr	r3, [r3, #8]
   152d4:	60bb      	str	r3, [r7, #8]
   152d6:	687b      	ldr	r3, [r7, #4]
   152d8:	68db      	ldr	r3, [r3, #12]
   152da:	60fb      	str	r3, [r7, #12]
        (void)l; // len unused
        return (const char*)s;
   152dc:	68fb      	ldr	r3, [r7, #12]
   152de:	e002      	b.n	152e6 <mp_obj_str_get_str+0x62>
    } else {
        bad_implicit_conversion(self_in);
   152e0:	6878      	ldr	r0, [r7, #4]
   152e2:	f7ff ff98 	bl	15216 <bad_implicit_conversion>
    }
}
   152e6:	4618      	mov	r0, r3
   152e8:	3710      	adds	r7, #16
   152ea:	46bd      	mov	sp, r7
   152ec:	bd80      	pop	{r7, pc}
   152ee:	bf00      	nop
   152f0:	0001254f 	.word	0x0001254f

000152f4 <mp_obj_str_get_data>:

const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   152f4:	b580      	push	{r7, lr}
   152f6:	b084      	sub	sp, #16
   152f8:	af00      	add	r7, sp, #0
   152fa:	6078      	str	r0, [r7, #4]
   152fc:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   152fe:	6878      	ldr	r0, [r7, #4]
   15300:	f7fc fdec 	bl	11edc <MP_OBJ_IS_QSTR>
   15304:	4603      	mov	r3, r0
   15306:	2b00      	cmp	r3, #0
   15308:	d10b      	bne.n	15322 <mp_obj_str_get_data+0x2e>
   1530a:	6878      	ldr	r0, [r7, #4]
   1530c:	f7fc fdf8 	bl	11f00 <MP_OBJ_IS_OBJ>
   15310:	4603      	mov	r3, r0
   15312:	2b00      	cmp	r3, #0
   15314:	d020      	beq.n	15358 <mp_obj_str_get_data+0x64>
   15316:	687b      	ldr	r3, [r7, #4]
   15318:	681b      	ldr	r3, [r3, #0]
   1531a:	699b      	ldr	r3, [r3, #24]
   1531c:	4a12      	ldr	r2, [pc, #72]	; (15368 <mp_obj_str_get_data+0x74>)
   1531e:	4293      	cmp	r3, r2
   15320:	d11a      	bne.n	15358 <mp_obj_str_get_data+0x64>
        GET_STR_DATA_LEN(self_in, s, l);
   15322:	6878      	ldr	r0, [r7, #4]
   15324:	f7fc fdda 	bl	11edc <MP_OBJ_IS_QSTR>
   15328:	4603      	mov	r3, r0
   1532a:	2b00      	cmp	r3, #0
   1532c:	d009      	beq.n	15342 <mp_obj_str_get_data+0x4e>
   1532e:	687b      	ldr	r3, [r7, #4]
   15330:	089b      	lsrs	r3, r3, #2
   15332:	f107 0208 	add.w	r2, r7, #8
   15336:	4611      	mov	r1, r2
   15338:	4618      	mov	r0, r3
   1533a:	f7eb ff67 	bl	120c <qstr_data>
   1533e:	60f8      	str	r0, [r7, #12]
   15340:	e005      	b.n	1534e <mp_obj_str_get_data+0x5a>
   15342:	687b      	ldr	r3, [r7, #4]
   15344:	689b      	ldr	r3, [r3, #8]
   15346:	60bb      	str	r3, [r7, #8]
   15348:	687b      	ldr	r3, [r7, #4]
   1534a:	68db      	ldr	r3, [r3, #12]
   1534c:	60fb      	str	r3, [r7, #12]
        *len = l;
   1534e:	68ba      	ldr	r2, [r7, #8]
   15350:	683b      	ldr	r3, [r7, #0]
   15352:	601a      	str	r2, [r3, #0]
        return (const char*)s;
   15354:	68fb      	ldr	r3, [r7, #12]
   15356:	e002      	b.n	1535e <mp_obj_str_get_data+0x6a>
    } else {
        bad_implicit_conversion(self_in);
   15358:	6878      	ldr	r0, [r7, #4]
   1535a:	f7ff ff5c 	bl	15216 <bad_implicit_conversion>
    }
}
   1535e:	4618      	mov	r0, r3
   15360:	3710      	adds	r7, #16
   15362:	46bd      	mov	sp, r7
   15364:	bd80      	pop	{r7, pc}
   15366:	bf00      	nop
   15368:	0001254f 	.word	0x0001254f

0001536c <str_it_iternext>:
    mp_obj_t str;
    size_t cur;
} mp_obj_str8_it_t;

#if !MICROPY_PY_BUILTINS_STR_UNICODE
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
   1536c:	b580      	push	{r7, lr}
   1536e:	b086      	sub	sp, #24
   15370:	af00      	add	r7, sp, #0
   15372:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15374:	687b      	ldr	r3, [r7, #4]
   15376:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   15378:	693b      	ldr	r3, [r7, #16]
   1537a:	689b      	ldr	r3, [r3, #8]
   1537c:	4618      	mov	r0, r3
   1537e:	f7fc fdad 	bl	11edc <MP_OBJ_IS_QSTR>
   15382:	4603      	mov	r3, r0
   15384:	2b00      	cmp	r3, #0
   15386:	d00a      	beq.n	1539e <str_it_iternext+0x32>
   15388:	693b      	ldr	r3, [r7, #16]
   1538a:	689b      	ldr	r3, [r3, #8]
   1538c:	089b      	lsrs	r3, r3, #2
   1538e:	f107 0208 	add.w	r2, r7, #8
   15392:	4611      	mov	r1, r2
   15394:	4618      	mov	r0, r3
   15396:	f7eb ff39 	bl	120c <qstr_data>
   1539a:	6178      	str	r0, [r7, #20]
   1539c:	e007      	b.n	153ae <str_it_iternext+0x42>
   1539e:	693b      	ldr	r3, [r7, #16]
   153a0:	689b      	ldr	r3, [r3, #8]
   153a2:	689b      	ldr	r3, [r3, #8]
   153a4:	60bb      	str	r3, [r7, #8]
   153a6:	693b      	ldr	r3, [r7, #16]
   153a8:	689b      	ldr	r3, [r3, #8]
   153aa:	68db      	ldr	r3, [r3, #12]
   153ac:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   153ae:	693b      	ldr	r3, [r7, #16]
   153b0:	68da      	ldr	r2, [r3, #12]
   153b2:	68bb      	ldr	r3, [r7, #8]
   153b4:	429a      	cmp	r2, r3
   153b6:	d20f      	bcs.n	153d8 <str_it_iternext+0x6c>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
   153b8:	693b      	ldr	r3, [r7, #16]
   153ba:	68db      	ldr	r3, [r3, #12]
   153bc:	697a      	ldr	r2, [r7, #20]
   153be:	4413      	add	r3, r2
   153c0:	2101      	movs	r1, #1
   153c2:	4618      	mov	r0, r3
   153c4:	f7ff fdc4 	bl	14f50 <mp_obj_new_str_via_qstr>
   153c8:	60f8      	str	r0, [r7, #12]
        self->cur += 1;
   153ca:	693b      	ldr	r3, [r7, #16]
   153cc:	68db      	ldr	r3, [r3, #12]
   153ce:	1c5a      	adds	r2, r3, #1
   153d0:	693b      	ldr	r3, [r7, #16]
   153d2:	60da      	str	r2, [r3, #12]
        return o_out;
   153d4:	68fb      	ldr	r3, [r7, #12]
   153d6:	e000      	b.n	153da <str_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   153d8:	2304      	movs	r3, #4
    }
}
   153da:	4618      	mov	r0, r3
   153dc:	3718      	adds	r7, #24
   153de:	46bd      	mov	sp, r7
   153e0:	bd80      	pop	{r7, pc}

000153e2 <mp_obj_new_str_iterator>:

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   153e2:	b480      	push	{r7}
   153e4:	b085      	sub	sp, #20
   153e6:	af00      	add	r7, sp, #0
   153e8:	6078      	str	r0, [r7, #4]
   153ea:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   153ec:	683b      	ldr	r3, [r7, #0]
   153ee:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   153f0:	68fb      	ldr	r3, [r7, #12]
   153f2:	4a09      	ldr	r2, [pc, #36]	; (15418 <mp_obj_new_str_iterator+0x36>)
   153f4:	601a      	str	r2, [r3, #0]
    o->iternext = str_it_iternext;
   153f6:	68fb      	ldr	r3, [r7, #12]
   153f8:	4a08      	ldr	r2, [pc, #32]	; (1541c <mp_obj_new_str_iterator+0x3a>)
   153fa:	605a      	str	r2, [r3, #4]
    o->str = str;
   153fc:	68fb      	ldr	r3, [r7, #12]
   153fe:	687a      	ldr	r2, [r7, #4]
   15400:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15402:	68fb      	ldr	r3, [r7, #12]
   15404:	2200      	movs	r2, #0
   15406:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15408:	68fb      	ldr	r3, [r7, #12]
}
   1540a:	4618      	mov	r0, r3
   1540c:	3714      	adds	r7, #20
   1540e:	46bd      	mov	sp, r7
   15410:	f85d 7b04 	ldr.w	r7, [sp], #4
   15414:	4770      	bx	lr
   15416:	bf00      	nop
   15418:	00022ad4 	.word	0x00022ad4
   1541c:	0001536d 	.word	0x0001536d

00015420 <bytes_it_iternext>:
#endif

STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
   15420:	b580      	push	{r7, lr}
   15422:	b086      	sub	sp, #24
   15424:	af00      	add	r7, sp, #0
   15426:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15428:	687b      	ldr	r3, [r7, #4]
   1542a:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   1542c:	693b      	ldr	r3, [r7, #16]
   1542e:	689b      	ldr	r3, [r3, #8]
   15430:	4618      	mov	r0, r3
   15432:	f7fc fd53 	bl	11edc <MP_OBJ_IS_QSTR>
   15436:	4603      	mov	r3, r0
   15438:	2b00      	cmp	r3, #0
   1543a:	d00a      	beq.n	15452 <bytes_it_iternext+0x32>
   1543c:	693b      	ldr	r3, [r7, #16]
   1543e:	689b      	ldr	r3, [r3, #8]
   15440:	089b      	lsrs	r3, r3, #2
   15442:	f107 0208 	add.w	r2, r7, #8
   15446:	4611      	mov	r1, r2
   15448:	4618      	mov	r0, r3
   1544a:	f7eb fedf 	bl	120c <qstr_data>
   1544e:	6178      	str	r0, [r7, #20]
   15450:	e007      	b.n	15462 <bytes_it_iternext+0x42>
   15452:	693b      	ldr	r3, [r7, #16]
   15454:	689b      	ldr	r3, [r3, #8]
   15456:	689b      	ldr	r3, [r3, #8]
   15458:	60bb      	str	r3, [r7, #8]
   1545a:	693b      	ldr	r3, [r7, #16]
   1545c:	689b      	ldr	r3, [r3, #8]
   1545e:	68db      	ldr	r3, [r3, #12]
   15460:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15462:	693b      	ldr	r3, [r7, #16]
   15464:	68da      	ldr	r2, [r3, #12]
   15466:	68bb      	ldr	r3, [r7, #8]
   15468:	429a      	cmp	r2, r3
   1546a:	d20f      	bcs.n	1548c <bytes_it_iternext+0x6c>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
   1546c:	693b      	ldr	r3, [r7, #16]
   1546e:	68db      	ldr	r3, [r3, #12]
   15470:	697a      	ldr	r2, [r7, #20]
   15472:	4413      	add	r3, r2
   15474:	781b      	ldrb	r3, [r3, #0]
   15476:	005b      	lsls	r3, r3, #1
   15478:	f043 0301 	orr.w	r3, r3, #1
   1547c:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   1547e:	693b      	ldr	r3, [r7, #16]
   15480:	68db      	ldr	r3, [r3, #12]
   15482:	1c5a      	adds	r2, r3, #1
   15484:	693b      	ldr	r3, [r7, #16]
   15486:	60da      	str	r2, [r3, #12]
        return o_out;
   15488:	68fb      	ldr	r3, [r7, #12]
   1548a:	e000      	b.n	1548e <bytes_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   1548c:	2304      	movs	r3, #4
    }
}
   1548e:	4618      	mov	r0, r3
   15490:	3718      	adds	r7, #24
   15492:	46bd      	mov	sp, r7
   15494:	bd80      	pop	{r7, pc}

00015496 <mp_obj_new_bytes_iterator>:

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15496:	b480      	push	{r7}
   15498:	b085      	sub	sp, #20
   1549a:	af00      	add	r7, sp, #0
   1549c:	6078      	str	r0, [r7, #4]
   1549e:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   154a0:	683b      	ldr	r3, [r7, #0]
   154a2:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   154a4:	68fb      	ldr	r3, [r7, #12]
   154a6:	4a09      	ldr	r2, [pc, #36]	; (154cc <mp_obj_new_bytes_iterator+0x36>)
   154a8:	601a      	str	r2, [r3, #0]
    o->iternext = bytes_it_iternext;
   154aa:	68fb      	ldr	r3, [r7, #12]
   154ac:	4a08      	ldr	r2, [pc, #32]	; (154d0 <mp_obj_new_bytes_iterator+0x3a>)
   154ae:	605a      	str	r2, [r3, #4]
    o->str = str;
   154b0:	68fb      	ldr	r3, [r7, #12]
   154b2:	687a      	ldr	r2, [r7, #4]
   154b4:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   154b6:	68fb      	ldr	r3, [r7, #12]
   154b8:	2200      	movs	r2, #0
   154ba:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   154bc:	68fb      	ldr	r3, [r7, #12]
}
   154be:	4618      	mov	r0, r3
   154c0:	3714      	adds	r7, #20
   154c2:	46bd      	mov	sp, r7
   154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   154c8:	4770      	bx	lr
   154ca:	bf00      	nop
   154cc:	00022ad4 	.word	0x00022ad4
   154d0:	00015421 	.word	0x00015421

000154d4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   154d4:	b480      	push	{r7}
   154d6:	b083      	sub	sp, #12
   154d8:	af00      	add	r7, sp, #0
   154da:	6078      	str	r0, [r7, #4]
   154dc:	687b      	ldr	r3, [r7, #4]
   154de:	f003 0303 	and.w	r3, r3, #3
   154e2:	2b00      	cmp	r3, #0
   154e4:	bf0c      	ite	eq
   154e6:	2301      	moveq	r3, #1
   154e8:	2300      	movne	r3, #0
   154ea:	b2db      	uxtb	r3, r3
   154ec:	4618      	mov	r0, r3
   154ee:	370c      	adds	r7, #12
   154f0:	46bd      	mov	sp, r7
   154f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   154f6:	4770      	bx	lr

000154f8 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   154f8:	b480      	push	{r7}
   154fa:	b083      	sub	sp, #12
   154fc:	af00      	add	r7, sp, #0
   154fe:	6078      	str	r0, [r7, #4]
   15500:	687b      	ldr	r3, [r7, #4]
   15502:	2b00      	cmp	r3, #0
   15504:	d001      	beq.n	1550a <mp_obj_new_bool+0x12>
   15506:	4b04      	ldr	r3, [pc, #16]	; (15518 <mp_obj_new_bool+0x20>)
   15508:	e000      	b.n	1550c <mp_obj_new_bool+0x14>
   1550a:	4b04      	ldr	r3, [pc, #16]	; (1551c <mp_obj_new_bool+0x24>)
   1550c:	4618      	mov	r0, r3
   1550e:	370c      	adds	r7, #12
   15510:	46bd      	mov	sp, r7
   15512:	f85d 7b04 	ldr.w	r7, [sp], #4
   15516:	4770      	bx	lr
   15518:	00021310 	.word	0x00021310
   1551c:	00021308 	.word	0x00021308

00015520 <mp_obj_tuple_print>:
#include "py/runtime.h"

/******************************************************************************/
/* tuple                                                                      */

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   15520:	b580      	push	{r7, lr}
   15522:	b086      	sub	sp, #24
   15524:	af00      	add	r7, sp, #0
   15526:	60f8      	str	r0, [r7, #12]
   15528:	60b9      	str	r1, [r7, #8]
   1552a:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(o_in);
   1552c:	68bb      	ldr	r3, [r7, #8]
   1552e:	613b      	str	r3, [r7, #16]
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "[");
    } else {
        mp_print_str(print, "(");
   15530:	4918      	ldr	r1, [pc, #96]	; (15594 <mp_obj_tuple_print+0x74>)
   15532:	68f8      	ldr	r0, [r7, #12]
   15534:	f7ec f99a 	bl	186c <mp_print_str>
        kind = PRINT_REPR;
   15538:	2301      	movs	r3, #1
   1553a:	607b      	str	r3, [r7, #4]
    }
    for (size_t i = 0; i < o->len; i++) {
   1553c:	2300      	movs	r3, #0
   1553e:	617b      	str	r3, [r7, #20]
   15540:	e013      	b.n	1556a <mp_obj_tuple_print+0x4a>
        if (i > 0) {
   15542:	697b      	ldr	r3, [r7, #20]
   15544:	2b00      	cmp	r3, #0
   15546:	d003      	beq.n	15550 <mp_obj_tuple_print+0x30>
            mp_print_str(print, ", ");
   15548:	4913      	ldr	r1, [pc, #76]	; (15598 <mp_obj_tuple_print+0x78>)
   1554a:	68f8      	ldr	r0, [r7, #12]
   1554c:	f7ec f98e 	bl	186c <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   15550:	693b      	ldr	r3, [r7, #16]
   15552:	697a      	ldr	r2, [r7, #20]
   15554:	3202      	adds	r2, #2
   15556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1555a:	687a      	ldr	r2, [r7, #4]
   1555c:	4619      	mov	r1, r3
   1555e:	68f8      	ldr	r0, [r7, #12]
   15560:	f7f8 f8f3 	bl	d74a <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   15564:	697b      	ldr	r3, [r7, #20]
   15566:	3301      	adds	r3, #1
   15568:	617b      	str	r3, [r7, #20]
   1556a:	693b      	ldr	r3, [r7, #16]
   1556c:	685a      	ldr	r2, [r3, #4]
   1556e:	697b      	ldr	r3, [r7, #20]
   15570:	429a      	cmp	r2, r3
   15572:	d8e6      	bhi.n	15542 <mp_obj_tuple_print+0x22>
    }
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "]");
    } else {
        if (o->len == 1) {
   15574:	693b      	ldr	r3, [r7, #16]
   15576:	685b      	ldr	r3, [r3, #4]
   15578:	2b01      	cmp	r3, #1
   1557a:	d103      	bne.n	15584 <mp_obj_tuple_print+0x64>
            mp_print_str(print, ",");
   1557c:	4907      	ldr	r1, [pc, #28]	; (1559c <mp_obj_tuple_print+0x7c>)
   1557e:	68f8      	ldr	r0, [r7, #12]
   15580:	f7ec f974 	bl	186c <mp_print_str>
        }
        mp_print_str(print, ")");
   15584:	4906      	ldr	r1, [pc, #24]	; (155a0 <mp_obj_tuple_print+0x80>)
   15586:	68f8      	ldr	r0, [r7, #12]
   15588:	f7ec f970 	bl	186c <mp_print_str>
    }
}
   1558c:	bf00      	nop
   1558e:	3718      	adds	r7, #24
   15590:	46bd      	mov	sp, r7
   15592:	bd80      	pop	{r7, pc}
   15594:	0002333c 	.word	0x0002333c
   15598:	00023340 	.word	0x00023340
   1559c:	00023344 	.word	0x00023344
   155a0:	00023348 	.word	0x00023348

000155a4 <mp_obj_tuple_make_new>:

STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   155a4:	b580      	push	{r7, lr}
   155a6:	b08c      	sub	sp, #48	; 0x30
   155a8:	af02      	add	r7, sp, #8
   155aa:	60f8      	str	r0, [r7, #12]
   155ac:	60b9      	str	r1, [r7, #8]
   155ae:	607a      	str	r2, [r7, #4]
   155b0:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   155b2:	2300      	movs	r3, #0
   155b4:	9300      	str	r3, [sp, #0]
   155b6:	2301      	movs	r3, #1
   155b8:	2200      	movs	r2, #0
   155ba:	6879      	ldr	r1, [r7, #4]
   155bc:	68b8      	ldr	r0, [r7, #8]
   155be:	f7f7 fca3 	bl	cf08 <mp_arg_check_num>

    switch (n_args) {
   155c2:	68bb      	ldr	r3, [r7, #8]
   155c4:	2b00      	cmp	r3, #0
   155c6:	d101      	bne.n	155cc <mp_obj_tuple_make_new+0x28>
        case 0:
            // return a empty tuple
            return mp_const_empty_tuple;
   155c8:	4b27      	ldr	r3, [pc, #156]	; (15668 <mp_obj_tuple_make_new+0xc4>)
   155ca:	e048      	b.n	1565e <mp_obj_tuple_make_new+0xba>

        case 1:
        default: {
            // 1 argument, an iterable from which we make a new tuple
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   155cc:	683b      	ldr	r3, [r7, #0]
   155ce:	681b      	ldr	r3, [r3, #0]
   155d0:	4618      	mov	r0, r3
   155d2:	f7ff ff7f 	bl	154d4 <MP_OBJ_IS_OBJ>
   155d6:	4603      	mov	r3, r0
   155d8:	2b00      	cmp	r3, #0
   155da:	d008      	beq.n	155ee <mp_obj_tuple_make_new+0x4a>
   155dc:	683b      	ldr	r3, [r7, #0]
   155de:	681b      	ldr	r3, [r3, #0]
   155e0:	681b      	ldr	r3, [r3, #0]
   155e2:	4a22      	ldr	r2, [pc, #136]	; (1566c <mp_obj_tuple_make_new+0xc8>)
   155e4:	4293      	cmp	r3, r2
   155e6:	d102      	bne.n	155ee <mp_obj_tuple_make_new+0x4a>
                return args[0];
   155e8:	683b      	ldr	r3, [r7, #0]
   155ea:	681b      	ldr	r3, [r3, #0]
   155ec:	e037      	b.n	1565e <mp_obj_tuple_make_new+0xba>
            }

            // TODO optimise for cases where we know the length of the iterator

            size_t alloc = 4;
   155ee:	2304      	movs	r3, #4
   155f0:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len = 0;
   155f2:	2300      	movs	r3, #0
   155f4:	623b      	str	r3, [r7, #32]
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   155f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   155f8:	009b      	lsls	r3, r3, #2
   155fa:	4618      	mov	r0, r3
   155fc:	f7ea fe8e 	bl	31c <m_malloc>
   15600:	61f8      	str	r0, [r7, #28]

            mp_obj_t iterable = mp_getiter(args[0], NULL);
   15602:	683b      	ldr	r3, [r7, #0]
   15604:	681b      	ldr	r3, [r3, #0]
   15606:	2100      	movs	r1, #0
   15608:	4618      	mov	r0, r3
   1560a:	f7f7 f909 	bl	c820 <mp_getiter>
   1560e:	61b8      	str	r0, [r7, #24]
            mp_obj_t item;
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15610:	e015      	b.n	1563e <mp_obj_tuple_make_new+0x9a>
                if (len >= alloc) {
   15612:	6a3a      	ldr	r2, [r7, #32]
   15614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15616:	429a      	cmp	r2, r3
   15618:	d309      	bcc.n	1562e <mp_obj_tuple_make_new+0x8a>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   1561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1561c:	00db      	lsls	r3, r3, #3
   1561e:	4619      	mov	r1, r3
   15620:	69f8      	ldr	r0, [r7, #28]
   15622:	f7ea fead 	bl	380 <m_realloc>
   15626:	61f8      	str	r0, [r7, #28]
                    alloc *= 2;
   15628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1562a:	005b      	lsls	r3, r3, #1
   1562c:	627b      	str	r3, [r7, #36]	; 0x24
                }
                items[len++] = item;
   1562e:	6a3b      	ldr	r3, [r7, #32]
   15630:	1c5a      	adds	r2, r3, #1
   15632:	623a      	str	r2, [r7, #32]
   15634:	009b      	lsls	r3, r3, #2
   15636:	69fa      	ldr	r2, [r7, #28]
   15638:	4413      	add	r3, r2
   1563a:	697a      	ldr	r2, [r7, #20]
   1563c:	601a      	str	r2, [r3, #0]
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1563e:	69b8      	ldr	r0, [r7, #24]
   15640:	f7f7 f970 	bl	c924 <mp_iternext>
   15644:	6178      	str	r0, [r7, #20]
   15646:	697b      	ldr	r3, [r7, #20]
   15648:	2b04      	cmp	r3, #4
   1564a:	d1e2      	bne.n	15612 <mp_obj_tuple_make_new+0x6e>
            }

            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   1564c:	69f9      	ldr	r1, [r7, #28]
   1564e:	6a38      	ldr	r0, [r7, #32]
   15650:	f000 f9ec 	bl	15a2c <mp_obj_new_tuple>
   15654:	6138      	str	r0, [r7, #16]
            m_del(mp_obj_t, items, alloc);
   15656:	69f8      	ldr	r0, [r7, #28]
   15658:	f7ea febe 	bl	3d8 <m_free>

            return tuple;
   1565c:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1565e:	4618      	mov	r0, r3
   15660:	3728      	adds	r7, #40	; 0x28
   15662:	46bd      	mov	sp, r7
   15664:	bd80      	pop	{r7, pc}
   15666:	bf00      	nop
   15668:	000234c4 	.word	0x000234c4
   1566c:	00023488 	.word	0x00023488

00015670 <tuple_cmp_helper>:

// Don't pass MP_BINARY_OP_NOT_EQUAL here
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   15670:	b580      	push	{r7, lr}
   15672:	b08a      	sub	sp, #40	; 0x28
   15674:	af02      	add	r7, sp, #8
   15676:	60f8      	str	r0, [r7, #12]
   15678:	60b9      	str	r1, [r7, #8]
   1567a:	607a      	str	r2, [r7, #4]
    // type check is done on getiter method to allow tuple, namedtuple, attrtuple
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   1567c:	68b8      	ldr	r0, [r7, #8]
   1567e:	f7f8 f833 	bl	d6e8 <mp_obj_get_type>
   15682:	4603      	mov	r3, r0
   15684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15686:	4a1e      	ldr	r2, [pc, #120]	; (15700 <tuple_cmp_helper+0x90>)
   15688:	4293      	cmp	r3, r2
   1568a:	d005      	beq.n	15698 <tuple_cmp_helper+0x28>
   1568c:	4b1d      	ldr	r3, [pc, #116]	; (15704 <tuple_cmp_helper+0x94>)
   1568e:	4a1e      	ldr	r2, [pc, #120]	; (15708 <tuple_cmp_helper+0x98>)
   15690:	2168      	movs	r1, #104	; 0x68
   15692:	481e      	ldr	r0, [pc, #120]	; (1570c <tuple_cmp_helper+0x9c>)
   15694:	f005 fda6 	bl	1b1e4 <__assert_func>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   15698:	6878      	ldr	r0, [r7, #4]
   1569a:	f7f8 f825 	bl	d6e8 <mp_obj_get_type>
   1569e:	61f8      	str	r0, [r7, #28]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   156a0:	68bb      	ldr	r3, [r7, #8]
   156a2:	61bb      	str	r3, [r7, #24]
    if (another_type->getiter != mp_obj_tuple_getiter) {
   156a4:	69fb      	ldr	r3, [r7, #28]
   156a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   156a8:	4a15      	ldr	r2, [pc, #84]	; (15700 <tuple_cmp_helper+0x90>)
   156aa:	4293      	cmp	r3, r2
   156ac:	d00e      	beq.n	156cc <tuple_cmp_helper+0x5c>
        // Slow path for user subclasses
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   156ae:	4918      	ldr	r1, [pc, #96]	; (15710 <tuple_cmp_helper+0xa0>)
   156b0:	6878      	ldr	r0, [r7, #4]
   156b2:	f001 fd1d 	bl	170f0 <mp_instance_cast_to_native_base>
   156b6:	6078      	str	r0, [r7, #4]
        if (another_in == MP_OBJ_NULL) {
   156b8:	687b      	ldr	r3, [r7, #4]
   156ba:	2b00      	cmp	r3, #0
   156bc:	d106      	bne.n	156cc <tuple_cmp_helper+0x5c>
            if (op == MP_BINARY_OP_EQUAL) {
   156be:	68fb      	ldr	r3, [r7, #12]
   156c0:	2b02      	cmp	r3, #2
   156c2:	d101      	bne.n	156c8 <tuple_cmp_helper+0x58>
                return mp_const_false;
   156c4:	4b13      	ldr	r3, [pc, #76]	; (15714 <tuple_cmp_helper+0xa4>)
   156c6:	e017      	b.n	156f8 <tuple_cmp_helper+0x88>
            }
            return MP_OBJ_NULL;
   156c8:	2300      	movs	r3, #0
   156ca:	e015      	b.n	156f8 <tuple_cmp_helper+0x88>
        }
    }
    mp_obj_tuple_t *another = MP_OBJ_TO_PTR(another_in);
   156cc:	687b      	ldr	r3, [r7, #4]
   156ce:	617b      	str	r3, [r7, #20]

    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   156d0:	69bb      	ldr	r3, [r7, #24]
   156d2:	f103 0108 	add.w	r1, r3, #8
   156d6:	69bb      	ldr	r3, [r7, #24]
   156d8:	685a      	ldr	r2, [r3, #4]
   156da:	697b      	ldr	r3, [r7, #20]
   156dc:	f103 0008 	add.w	r0, r3, #8
   156e0:	697b      	ldr	r3, [r7, #20]
   156e2:	685b      	ldr	r3, [r3, #4]
   156e4:	9300      	str	r3, [sp, #0]
   156e6:	4603      	mov	r3, r0
   156e8:	68f8      	ldr	r0, [r7, #12]
   156ea:	f001 ff0a 	bl	17502 <mp_seq_cmp_objs>
   156ee:	4603      	mov	r3, r0
   156f0:	4618      	mov	r0, r3
   156f2:	f7ff ff01 	bl	154f8 <mp_obj_new_bool>
   156f6:	4603      	mov	r3, r0
}
   156f8:	4618      	mov	r0, r3
   156fa:	3720      	adds	r7, #32
   156fc:	46bd      	mov	sp, r7
   156fe:	bd80      	pop	{r7, pc}
   15700:	00015b8f 	.word	0x00015b8f
   15704:	0002334c 	.word	0x0002334c
   15708:	000234f4 	.word	0x000234f4
   1570c:	00023388 	.word	0x00023388
   15710:	00023488 	.word	0x00023488
   15714:	00021308 	.word	0x00021308

00015718 <mp_obj_tuple_unary_op>:

mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   15718:	b580      	push	{r7, lr}
   1571a:	b086      	sub	sp, #24
   1571c:	af00      	add	r7, sp, #0
   1571e:	6078      	str	r0, [r7, #4]
   15720:	6039      	str	r1, [r7, #0]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15722:	683b      	ldr	r3, [r7, #0]
   15724:	60fb      	str	r3, [r7, #12]
    switch (op) {
   15726:	687b      	ldr	r3, [r7, #4]
   15728:	2b05      	cmp	r3, #5
   1572a:	d02f      	beq.n	1578c <mp_obj_tuple_unary_op+0x74>
   1572c:	2b06      	cmp	r3, #6
   1572e:	d00d      	beq.n	1574c <mp_obj_tuple_unary_op+0x34>
   15730:	2b04      	cmp	r3, #4
   15732:	d131      	bne.n	15798 <mp_obj_tuple_unary_op+0x80>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   15734:	68fb      	ldr	r3, [r7, #12]
   15736:	685b      	ldr	r3, [r3, #4]
   15738:	2b00      	cmp	r3, #0
   1573a:	bf14      	ite	ne
   1573c:	2301      	movne	r3, #1
   1573e:	2300      	moveq	r3, #0
   15740:	b2db      	uxtb	r3, r3
   15742:	4618      	mov	r0, r3
   15744:	f7ff fed8 	bl	154f8 <mp_obj_new_bool>
   15748:	4603      	mov	r3, r0
   1574a:	e026      	b.n	1579a <mp_obj_tuple_unary_op+0x82>
        case MP_UNARY_OP_HASH: {
            // start hash with pointer to empty tuple, to make it fairly unique
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   1574c:	4b15      	ldr	r3, [pc, #84]	; (157a4 <mp_obj_tuple_unary_op+0x8c>)
   1574e:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15750:	2300      	movs	r3, #0
   15752:	613b      	str	r3, [r7, #16]
   15754:	e010      	b.n	15778 <mp_obj_tuple_unary_op+0x60>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   15756:	68fb      	ldr	r3, [r7, #12]
   15758:	693a      	ldr	r2, [r7, #16]
   1575a:	3202      	adds	r2, #2
   1575c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15760:	4619      	mov	r1, r3
   15762:	2006      	movs	r0, #6
   15764:	f7f5 ff6c 	bl	b640 <mp_unary_op>
   15768:	4603      	mov	r3, r0
   1576a:	105b      	asrs	r3, r3, #1
   1576c:	697a      	ldr	r2, [r7, #20]
   1576e:	4413      	add	r3, r2
   15770:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15772:	693b      	ldr	r3, [r7, #16]
   15774:	3301      	adds	r3, #1
   15776:	613b      	str	r3, [r7, #16]
   15778:	68fb      	ldr	r3, [r7, #12]
   1577a:	685a      	ldr	r2, [r3, #4]
   1577c:	693b      	ldr	r3, [r7, #16]
   1577e:	429a      	cmp	r2, r3
   15780:	d8e9      	bhi.n	15756 <mp_obj_tuple_unary_op+0x3e>
            }
            return MP_OBJ_NEW_SMALL_INT(hash);
   15782:	697b      	ldr	r3, [r7, #20]
   15784:	005b      	lsls	r3, r3, #1
   15786:	f043 0301 	orr.w	r3, r3, #1
   1578a:	e006      	b.n	1579a <mp_obj_tuple_unary_op+0x82>
        }
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   1578c:	68fb      	ldr	r3, [r7, #12]
   1578e:	685b      	ldr	r3, [r3, #4]
   15790:	005b      	lsls	r3, r3, #1
   15792:	f043 0301 	orr.w	r3, r3, #1
   15796:	e000      	b.n	1579a <mp_obj_tuple_unary_op+0x82>
        default: return MP_OBJ_NULL; // op not supported
   15798:	2300      	movs	r3, #0
    }
}
   1579a:	4618      	mov	r0, r3
   1579c:	3718      	adds	r7, #24
   1579e:	46bd      	mov	sp, r7
   157a0:	bd80      	pop	{r7, pc}
   157a2:	bf00      	nop
   157a4:	000234c4 	.word	0x000234c4

000157a8 <mp_obj_tuple_binary_op>:

mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   157a8:	b580      	push	{r7, lr}
   157aa:	b08c      	sub	sp, #48	; 0x30
   157ac:	af02      	add	r7, sp, #8
   157ae:	60f8      	str	r0, [r7, #12]
   157b0:	60b9      	str	r1, [r7, #8]
   157b2:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(lhs);
   157b4:	68bb      	ldr	r3, [r7, #8]
   157b6:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
   157b8:	68fb      	ldr	r3, [r7, #12]
   157ba:	2b1c      	cmp	r3, #28
   157bc:	f200 80ac 	bhi.w	15918 <mp_obj_tuple_binary_op+0x170>
   157c0:	a201      	add	r2, pc, #4	; (adr r2, 157c8 <mp_obj_tuple_binary_op+0x20>)
   157c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   157c6:	bf00      	nop
   157c8:	0001590b 	.word	0x0001590b
   157cc:	0001590b 	.word	0x0001590b
   157d0:	0001590b 	.word	0x0001590b
   157d4:	0001590b 	.word	0x0001590b
   157d8:	0001590b 	.word	0x0001590b
   157dc:	00015919 	.word	0x00015919
   157e0:	00015919 	.word	0x00015919
   157e4:	00015919 	.word	0x00015919
   157e8:	00015919 	.word	0x00015919
   157ec:	00015919 	.word	0x00015919
   157f0:	00015919 	.word	0x00015919
   157f4:	00015919 	.word	0x00015919
   157f8:	00015919 	.word	0x00015919
   157fc:	00015919 	.word	0x00015919
   15800:	0001583d 	.word	0x0001583d
   15804:	00015919 	.word	0x00015919
   15808:	000158b1 	.word	0x000158b1
   1580c:	00015919 	.word	0x00015919
   15810:	00015919 	.word	0x00015919
   15814:	00015919 	.word	0x00015919
   15818:	00015919 	.word	0x00015919
   1581c:	00015919 	.word	0x00015919
   15820:	00015919 	.word	0x00015919
   15824:	00015919 	.word	0x00015919
   15828:	00015919 	.word	0x00015919
   1582c:	00015919 	.word	0x00015919
   15830:	0001583d 	.word	0x0001583d
   15834:	00015919 	.word	0x00015919
   15838:	000158b1 	.word	0x000158b1
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   1583c:	6878      	ldr	r0, [r7, #4]
   1583e:	f7f7 ff53 	bl	d6e8 <mp_obj_get_type>
   15842:	4603      	mov	r3, r0
   15844:	4937      	ldr	r1, [pc, #220]	; (15924 <mp_obj_tuple_binary_op+0x17c>)
   15846:	4618      	mov	r0, r3
   15848:	f001 fb60 	bl	16f0c <mp_obj_is_subclass_fast>
   1584c:	4603      	mov	r3, r0
   1584e:	f083 0301 	eor.w	r3, r3, #1
   15852:	b2db      	uxtb	r3, r3
   15854:	2b00      	cmp	r3, #0
   15856:	d001      	beq.n	1585c <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   15858:	2300      	movs	r3, #0
   1585a:	e05e      	b.n	1591a <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *p = MP_OBJ_TO_PTR(rhs);
   1585c:	687b      	ldr	r3, [r7, #4]
   1585e:	623b      	str	r3, [r7, #32]
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   15860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15862:	685a      	ldr	r2, [r3, #4]
   15864:	6a3b      	ldr	r3, [r7, #32]
   15866:	685b      	ldr	r3, [r3, #4]
   15868:	4413      	add	r3, r2
   1586a:	2100      	movs	r1, #0
   1586c:	4618      	mov	r0, r3
   1586e:	f000 f8dd 	bl	15a2c <mp_obj_new_tuple>
   15872:	61f8      	str	r0, [r7, #28]
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   15874:	69fb      	ldr	r3, [r7, #28]
   15876:	f103 0008 	add.w	r0, r3, #8
   1587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1587c:	f103 0108 	add.w	r1, r3, #8
   15880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15882:	685b      	ldr	r3, [r3, #4]
   15884:	009b      	lsls	r3, r3, #2
   15886:	461a      	mov	r2, r3
   15888:	f006 fe6a 	bl	1c560 <memcpy>
   1588c:	69fb      	ldr	r3, [r7, #28]
   1588e:	f103 0208 	add.w	r2, r3, #8
   15892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15894:	685b      	ldr	r3, [r3, #4]
   15896:	009b      	lsls	r3, r3, #2
   15898:	18d0      	adds	r0, r2, r3
   1589a:	6a3b      	ldr	r3, [r7, #32]
   1589c:	f103 0108 	add.w	r1, r3, #8
   158a0:	6a3b      	ldr	r3, [r7, #32]
   158a2:	685b      	ldr	r3, [r3, #4]
   158a4:	009b      	lsls	r3, r3, #2
   158a6:	461a      	mov	r2, r3
   158a8:	f006 fe5a 	bl	1c560 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   158ac:	69fb      	ldr	r3, [r7, #28]
   158ae:	e034      	b.n	1591a <mp_obj_tuple_binary_op+0x172>
        }
        case MP_BINARY_OP_MULTIPLY:
        case MP_BINARY_OP_INPLACE_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   158b0:	f107 0314 	add.w	r3, r7, #20
   158b4:	4619      	mov	r1, r3
   158b6:	6878      	ldr	r0, [r7, #4]
   158b8:	f7f8 f94e 	bl	db58 <mp_obj_get_int_maybe>
   158bc:	4603      	mov	r3, r0
   158be:	f083 0301 	eor.w	r3, r3, #1
   158c2:	b2db      	uxtb	r3, r3
   158c4:	2b00      	cmp	r3, #0
   158c6:	d001      	beq.n	158cc <mp_obj_tuple_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   158c8:	2300      	movs	r3, #0
   158ca:	e026      	b.n	1591a <mp_obj_tuple_binary_op+0x172>
            }
            if (n <= 0) {
   158cc:	697b      	ldr	r3, [r7, #20]
   158ce:	2b00      	cmp	r3, #0
   158d0:	dc01      	bgt.n	158d6 <mp_obj_tuple_binary_op+0x12e>
                return mp_const_empty_tuple;
   158d2:	4b15      	ldr	r3, [pc, #84]	; (15928 <mp_obj_tuple_binary_op+0x180>)
   158d4:	e021      	b.n	1591a <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   158d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   158d8:	685b      	ldr	r3, [r3, #4]
   158da:	697a      	ldr	r2, [r7, #20]
   158dc:	fb02 f303 	mul.w	r3, r2, r3
   158e0:	2100      	movs	r1, #0
   158e2:	4618      	mov	r0, r3
   158e4:	f000 f8a2 	bl	15a2c <mp_obj_new_tuple>
   158e8:	61b8      	str	r0, [r7, #24]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   158ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   158ec:	f103 0008 	add.w	r0, r3, #8
   158f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   158f2:	685a      	ldr	r2, [r3, #4]
   158f4:	697b      	ldr	r3, [r7, #20]
   158f6:	4619      	mov	r1, r3
   158f8:	69bb      	ldr	r3, [r7, #24]
   158fa:	3308      	adds	r3, #8
   158fc:	9300      	str	r3, [sp, #0]
   158fe:	460b      	mov	r3, r1
   15900:	2104      	movs	r1, #4
   15902:	f001 fd3d 	bl	17380 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   15906:	69bb      	ldr	r3, [r7, #24]
   15908:	e007      	b.n	1591a <mp_obj_tuple_binary_op+0x172>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return tuple_cmp_helper(op, lhs, rhs);
   1590a:	687a      	ldr	r2, [r7, #4]
   1590c:	68b9      	ldr	r1, [r7, #8]
   1590e:	68f8      	ldr	r0, [r7, #12]
   15910:	f7ff feae 	bl	15670 <tuple_cmp_helper>
   15914:	4603      	mov	r3, r0
   15916:	e000      	b.n	1591a <mp_obj_tuple_binary_op+0x172>

        default:
            return MP_OBJ_NULL; // op not supported
   15918:	2300      	movs	r3, #0
    }
}
   1591a:	4618      	mov	r0, r3
   1591c:	3728      	adds	r7, #40	; 0x28
   1591e:	46bd      	mov	sp, r7
   15920:	bd80      	pop	{r7, pc}
   15922:	bf00      	nop
   15924:	00023488 	.word	0x00023488
   15928:	000234c4 	.word	0x000234c4

0001592c <mp_obj_tuple_subscr>:

mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   1592c:	b580      	push	{r7, lr}
   1592e:	b086      	sub	sp, #24
   15930:	af00      	add	r7, sp, #0
   15932:	60f8      	str	r0, [r7, #12]
   15934:	60b9      	str	r1, [r7, #8]
   15936:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   15938:	687b      	ldr	r3, [r7, #4]
   1593a:	2b08      	cmp	r3, #8
   1593c:	d110      	bne.n	15960 <mp_obj_tuple_subscr+0x34>
        // load
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   1593e:	68fb      	ldr	r3, [r7, #12]
   15940:	617b      	str	r3, [r7, #20]
            mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(slice.stop - slice.start, NULL));
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   15942:	697b      	ldr	r3, [r7, #20]
   15944:	6818      	ldr	r0, [r3, #0]
   15946:	697b      	ldr	r3, [r7, #20]
   15948:	6859      	ldr	r1, [r3, #4]
   1594a:	2300      	movs	r3, #0
   1594c:	68ba      	ldr	r2, [r7, #8]
   1594e:	f7f8 f993 	bl	dc78 <mp_get_index>
   15952:	6138      	str	r0, [r7, #16]
        return self->items[index_value];
   15954:	697b      	ldr	r3, [r7, #20]
   15956:	693a      	ldr	r2, [r7, #16]
   15958:	3202      	adds	r2, #2
   1595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1595e:	e000      	b.n	15962 <mp_obj_tuple_subscr+0x36>
    } else {
        return MP_OBJ_NULL; // op not supported
   15960:	2300      	movs	r3, #0
    }
}
   15962:	4618      	mov	r0, r3
   15964:	3718      	adds	r7, #24
   15966:	46bd      	mov	sp, r7
   15968:	bd80      	pop	{r7, pc}

0001596a <tuple_count>:

STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   1596a:	b580      	push	{r7, lr}
   1596c:	b084      	sub	sp, #16
   1596e:	af00      	add	r7, sp, #0
   15970:	6078      	str	r0, [r7, #4]
   15972:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15974:	6878      	ldr	r0, [r7, #4]
   15976:	f7ff fdad 	bl	154d4 <MP_OBJ_IS_OBJ>
   1597a:	4603      	mov	r3, r0
   1597c:	2b00      	cmp	r3, #0
   1597e:	d004      	beq.n	1598a <tuple_count+0x20>
   15980:	687b      	ldr	r3, [r7, #4]
   15982:	681b      	ldr	r3, [r3, #0]
   15984:	4a0c      	ldr	r2, [pc, #48]	; (159b8 <tuple_count+0x4e>)
   15986:	4293      	cmp	r3, r2
   15988:	d005      	beq.n	15996 <tuple_count+0x2c>
   1598a:	4b0c      	ldr	r3, [pc, #48]	; (159bc <tuple_count+0x52>)
   1598c:	4a0c      	ldr	r2, [pc, #48]	; (159c0 <tuple_count+0x56>)
   1598e:	21c8      	movs	r1, #200	; 0xc8
   15990:	480c      	ldr	r0, [pc, #48]	; (159c4 <tuple_count+0x5a>)
   15992:	f005 fc27 	bl	1b1e4 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15996:	687b      	ldr	r3, [r7, #4]
   15998:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   1599a:	68fb      	ldr	r3, [r7, #12]
   1599c:	f103 0008 	add.w	r0, r3, #8
   159a0:	68fb      	ldr	r3, [r7, #12]
   159a2:	685b      	ldr	r3, [r3, #4]
   159a4:	683a      	ldr	r2, [r7, #0]
   159a6:	4619      	mov	r1, r3
   159a8:	f001 fe78 	bl	1769c <mp_seq_count_obj>
   159ac:	4603      	mov	r3, r0
}
   159ae:	4618      	mov	r0, r3
   159b0:	3710      	adds	r7, #16
   159b2:	46bd      	mov	sp, r7
   159b4:	bd80      	pop	{r7, pc}
   159b6:	bf00      	nop
   159b8:	00023488 	.word	0x00023488
   159bc:	0002339c 	.word	0x0002339c
   159c0:	00023508 	.word	0x00023508
   159c4:	00023388 	.word	0x00023388

000159c8 <tuple_index>:
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tuple_count_obj, tuple_count);

STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   159c8:	b580      	push	{r7, lr}
   159ca:	b084      	sub	sp, #16
   159cc:	af00      	add	r7, sp, #0
   159ce:	6078      	str	r0, [r7, #4]
   159d0:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   159d2:	683b      	ldr	r3, [r7, #0]
   159d4:	681b      	ldr	r3, [r3, #0]
   159d6:	4618      	mov	r0, r3
   159d8:	f7ff fd7c 	bl	154d4 <MP_OBJ_IS_OBJ>
   159dc:	4603      	mov	r3, r0
   159de:	2b00      	cmp	r3, #0
   159e0:	d005      	beq.n	159ee <tuple_index+0x26>
   159e2:	683b      	ldr	r3, [r7, #0]
   159e4:	681b      	ldr	r3, [r3, #0]
   159e6:	681b      	ldr	r3, [r3, #0]
   159e8:	4a0c      	ldr	r2, [pc, #48]	; (15a1c <tuple_index+0x54>)
   159ea:	4293      	cmp	r3, r2
   159ec:	d005      	beq.n	159fa <tuple_index+0x32>
   159ee:	4b0c      	ldr	r3, [pc, #48]	; (15a20 <tuple_index+0x58>)
   159f0:	4a0c      	ldr	r2, [pc, #48]	; (15a24 <tuple_index+0x5c>)
   159f2:	21cf      	movs	r1, #207	; 0xcf
   159f4:	480c      	ldr	r0, [pc, #48]	; (15a28 <tuple_index+0x60>)
   159f6:	f005 fbf5 	bl	1b1e4 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(args[0]);
   159fa:	683b      	ldr	r3, [r7, #0]
   159fc:	681b      	ldr	r3, [r3, #0]
   159fe:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   15a00:	68fb      	ldr	r3, [r7, #12]
   15a02:	f103 0008 	add.w	r0, r3, #8
   15a06:	68fb      	ldr	r3, [r7, #12]
   15a08:	6859      	ldr	r1, [r3, #4]
   15a0a:	683b      	ldr	r3, [r7, #0]
   15a0c:	687a      	ldr	r2, [r7, #4]
   15a0e:	f001 fdf5 	bl	175fc <mp_seq_index_obj>
   15a12:	4603      	mov	r3, r0
}
   15a14:	4618      	mov	r0, r3
   15a16:	3710      	adds	r7, #16
   15a18:	46bd      	mov	sp, r7
   15a1a:	bd80      	pop	{r7, pc}
   15a1c:	00023488 	.word	0x00023488
   15a20:	00023400 	.word	0x00023400
   15a24:	00023514 	.word	0x00023514
   15a28:	00023388 	.word	0x00023388

00015a2c <mp_obj_new_tuple>:
};

// the zero-length tuple
const mp_obj_tuple_t mp_const_empty_tuple_obj = {{&mp_type_tuple}, 0};

mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   15a2c:	b580      	push	{r7, lr}
   15a2e:	b084      	sub	sp, #16
   15a30:	af00      	add	r7, sp, #0
   15a32:	6078      	str	r0, [r7, #4]
   15a34:	6039      	str	r1, [r7, #0]
    if (n == 0) {
   15a36:	687b      	ldr	r3, [r7, #4]
   15a38:	2b00      	cmp	r3, #0
   15a3a:	d101      	bne.n	15a40 <mp_obj_new_tuple+0x14>
        return mp_const_empty_tuple;
   15a3c:	4b15      	ldr	r3, [pc, #84]	; (15a94 <mp_obj_new_tuple+0x68>)
   15a3e:	e024      	b.n	15a8a <mp_obj_new_tuple+0x5e>
    }
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   15a40:	687b      	ldr	r3, [r7, #4]
   15a42:	3302      	adds	r3, #2
   15a44:	009b      	lsls	r3, r3, #2
   15a46:	4618      	mov	r0, r3
   15a48:	f7ea fc68 	bl	31c <m_malloc>
   15a4c:	60b8      	str	r0, [r7, #8]
    o->base.type = &mp_type_tuple;
   15a4e:	68bb      	ldr	r3, [r7, #8]
   15a50:	4a11      	ldr	r2, [pc, #68]	; (15a98 <mp_obj_new_tuple+0x6c>)
   15a52:	601a      	str	r2, [r3, #0]
    o->len = n;
   15a54:	68bb      	ldr	r3, [r7, #8]
   15a56:	687a      	ldr	r2, [r7, #4]
   15a58:	605a      	str	r2, [r3, #4]
    if (items) {
   15a5a:	683b      	ldr	r3, [r7, #0]
   15a5c:	2b00      	cmp	r3, #0
   15a5e:	d013      	beq.n	15a88 <mp_obj_new_tuple+0x5c>
        for (size_t i = 0; i < n; i++) {
   15a60:	2300      	movs	r3, #0
   15a62:	60fb      	str	r3, [r7, #12]
   15a64:	e00c      	b.n	15a80 <mp_obj_new_tuple+0x54>
            o->items[i] = items[i];
   15a66:	68fb      	ldr	r3, [r7, #12]
   15a68:	009b      	lsls	r3, r3, #2
   15a6a:	683a      	ldr	r2, [r7, #0]
   15a6c:	4413      	add	r3, r2
   15a6e:	6819      	ldr	r1, [r3, #0]
   15a70:	68bb      	ldr	r3, [r7, #8]
   15a72:	68fa      	ldr	r2, [r7, #12]
   15a74:	3202      	adds	r2, #2
   15a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   15a7a:	68fb      	ldr	r3, [r7, #12]
   15a7c:	3301      	adds	r3, #1
   15a7e:	60fb      	str	r3, [r7, #12]
   15a80:	68fa      	ldr	r2, [r7, #12]
   15a82:	687b      	ldr	r3, [r7, #4]
   15a84:	429a      	cmp	r2, r3
   15a86:	d3ee      	bcc.n	15a66 <mp_obj_new_tuple+0x3a>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   15a88:	68bb      	ldr	r3, [r7, #8]
}
   15a8a:	4618      	mov	r0, r3
   15a8c:	3710      	adds	r7, #16
   15a8e:	46bd      	mov	sp, r7
   15a90:	bd80      	pop	{r7, pc}
   15a92:	bf00      	nop
   15a94:	000234c4 	.word	0x000234c4
   15a98:	00023488 	.word	0x00023488

00015a9c <mp_obj_tuple_get>:

void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   15a9c:	b580      	push	{r7, lr}
   15a9e:	b086      	sub	sp, #24
   15aa0:	af00      	add	r7, sp, #0
   15aa2:	60f8      	str	r0, [r7, #12]
   15aa4:	60b9      	str	r1, [r7, #8]
   15aa6:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15aa8:	68f8      	ldr	r0, [r7, #12]
   15aaa:	f7ff fd13 	bl	154d4 <MP_OBJ_IS_OBJ>
   15aae:	4603      	mov	r3, r0
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	d004      	beq.n	15abe <mp_obj_tuple_get+0x22>
   15ab4:	68fb      	ldr	r3, [r7, #12]
   15ab6:	681b      	ldr	r3, [r3, #0]
   15ab8:	4a0b      	ldr	r2, [pc, #44]	; (15ae8 <mp_obj_tuple_get+0x4c>)
   15aba:	4293      	cmp	r3, r2
   15abc:	d005      	beq.n	15aca <mp_obj_tuple_get+0x2e>
   15abe:	4b0b      	ldr	r3, [pc, #44]	; (15aec <mp_obj_tuple_get+0x50>)
   15ac0:	4a0b      	ldr	r2, [pc, #44]	; (15af0 <mp_obj_tuple_get+0x54>)
   15ac2:	21fb      	movs	r1, #251	; 0xfb
   15ac4:	480b      	ldr	r0, [pc, #44]	; (15af4 <mp_obj_tuple_get+0x58>)
   15ac6:	f005 fb8d 	bl	1b1e4 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15aca:	68fb      	ldr	r3, [r7, #12]
   15acc:	617b      	str	r3, [r7, #20]
    *len = self->len;
   15ace:	697b      	ldr	r3, [r7, #20]
   15ad0:	685a      	ldr	r2, [r3, #4]
   15ad2:	68bb      	ldr	r3, [r7, #8]
   15ad4:	601a      	str	r2, [r3, #0]
    *items = &self->items[0];
   15ad6:	697b      	ldr	r3, [r7, #20]
   15ad8:	f103 0208 	add.w	r2, r3, #8
   15adc:	687b      	ldr	r3, [r7, #4]
   15ade:	601a      	str	r2, [r3, #0]
}
   15ae0:	bf00      	nop
   15ae2:	3718      	adds	r7, #24
   15ae4:	46bd      	mov	sp, r7
   15ae6:	bd80      	pop	{r7, pc}
   15ae8:	00023488 	.word	0x00023488
   15aec:	000234cc 	.word	0x000234cc
   15af0:	00023520 	.word	0x00023520
   15af4:	00023388 	.word	0x00023388

00015af8 <mp_obj_tuple_del>:

void mp_obj_tuple_del(mp_obj_t self_in) {
   15af8:	b580      	push	{r7, lr}
   15afa:	b084      	sub	sp, #16
   15afc:	af00      	add	r7, sp, #0
   15afe:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15b00:	6878      	ldr	r0, [r7, #4]
   15b02:	f7ff fce7 	bl	154d4 <MP_OBJ_IS_OBJ>
   15b06:	4603      	mov	r3, r0
   15b08:	2b00      	cmp	r3, #0
   15b0a:	d004      	beq.n	15b16 <mp_obj_tuple_del+0x1e>
   15b0c:	687b      	ldr	r3, [r7, #4]
   15b0e:	681b      	ldr	r3, [r3, #0]
   15b10:	4a09      	ldr	r2, [pc, #36]	; (15b38 <mp_obj_tuple_del+0x40>)
   15b12:	4293      	cmp	r3, r2
   15b14:	d006      	beq.n	15b24 <mp_obj_tuple_del+0x2c>
   15b16:	4b09      	ldr	r3, [pc, #36]	; (15b3c <mp_obj_tuple_del+0x44>)
   15b18:	4a09      	ldr	r2, [pc, #36]	; (15b40 <mp_obj_tuple_del+0x48>)
   15b1a:	f44f 7181 	mov.w	r1, #258	; 0x102
   15b1e:	4809      	ldr	r0, [pc, #36]	; (15b44 <mp_obj_tuple_del+0x4c>)
   15b20:	f005 fb60 	bl	1b1e4 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15b24:	687b      	ldr	r3, [r7, #4]
   15b26:	60fb      	str	r3, [r7, #12]
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   15b28:	68f8      	ldr	r0, [r7, #12]
   15b2a:	f7ea fc55 	bl	3d8 <m_free>
}
   15b2e:	bf00      	nop
   15b30:	3710      	adds	r7, #16
   15b32:	46bd      	mov	sp, r7
   15b34:	bd80      	pop	{r7, pc}
   15b36:	bf00      	nop
   15b38:	00023488 	.word	0x00023488
   15b3c:	000234cc 	.word	0x000234cc
   15b40:	00023534 	.word	0x00023534
   15b44:	00023388 	.word	0x00023388

00015b48 <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   15b48:	b480      	push	{r7}
   15b4a:	b085      	sub	sp, #20
   15b4c:	af00      	add	r7, sp, #0
   15b4e:	6078      	str	r0, [r7, #4]
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
   15b50:	687b      	ldr	r3, [r7, #4]
   15b52:	60fb      	str	r3, [r7, #12]
    if (self->cur < self->tuple->len) {
   15b54:	68fb      	ldr	r3, [r7, #12]
   15b56:	68da      	ldr	r2, [r3, #12]
   15b58:	68fb      	ldr	r3, [r7, #12]
   15b5a:	689b      	ldr	r3, [r3, #8]
   15b5c:	685b      	ldr	r3, [r3, #4]
   15b5e:	429a      	cmp	r2, r3
   15b60:	d20e      	bcs.n	15b80 <tuple_it_iternext+0x38>
        mp_obj_t o_out = self->tuple->items[self->cur];
   15b62:	68fb      	ldr	r3, [r7, #12]
   15b64:	689b      	ldr	r3, [r3, #8]
   15b66:	68fa      	ldr	r2, [r7, #12]
   15b68:	68d2      	ldr	r2, [r2, #12]
   15b6a:	3202      	adds	r2, #2
   15b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15b70:	60bb      	str	r3, [r7, #8]
        self->cur += 1;
   15b72:	68fb      	ldr	r3, [r7, #12]
   15b74:	68db      	ldr	r3, [r3, #12]
   15b76:	1c5a      	adds	r2, r3, #1
   15b78:	68fb      	ldr	r3, [r7, #12]
   15b7a:	60da      	str	r2, [r3, #12]
        return o_out;
   15b7c:	68bb      	ldr	r3, [r7, #8]
   15b7e:	e000      	b.n	15b82 <tuple_it_iternext+0x3a>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15b80:	2304      	movs	r3, #4
    }
}
   15b82:	4618      	mov	r0, r3
   15b84:	3714      	adds	r7, #20
   15b86:	46bd      	mov	sp, r7
   15b88:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b8c:	4770      	bx	lr

00015b8e <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   15b8e:	b480      	push	{r7}
   15b90:	b085      	sub	sp, #20
   15b92:	af00      	add	r7, sp, #0
   15b94:	6078      	str	r0, [r7, #4]
   15b96:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
   15b98:	683b      	ldr	r3, [r7, #0]
   15b9a:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15b9c:	68fb      	ldr	r3, [r7, #12]
   15b9e:	4a09      	ldr	r2, [pc, #36]	; (15bc4 <mp_obj_tuple_getiter+0x36>)
   15ba0:	601a      	str	r2, [r3, #0]
    o->iternext = tuple_it_iternext;
   15ba2:	68fb      	ldr	r3, [r7, #12]
   15ba4:	4a08      	ldr	r2, [pc, #32]	; (15bc8 <mp_obj_tuple_getiter+0x3a>)
   15ba6:	605a      	str	r2, [r3, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   15ba8:	68fb      	ldr	r3, [r7, #12]
   15baa:	687a      	ldr	r2, [r7, #4]
   15bac:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15bae:	68fb      	ldr	r3, [r7, #12]
   15bb0:	2200      	movs	r2, #0
   15bb2:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15bb4:	68fb      	ldr	r3, [r7, #12]
}
   15bb6:	4618      	mov	r0, r3
   15bb8:	3714      	adds	r7, #20
   15bba:	46bd      	mov	sp, r7
   15bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   15bc0:	4770      	bx	lr
   15bc2:	bf00      	nop
   15bc4:	00022ad4 	.word	0x00022ad4
   15bc8:	00015b49 	.word	0x00015b49

00015bcc <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15bcc:	b480      	push	{r7}
   15bce:	b083      	sub	sp, #12
   15bd0:	af00      	add	r7, sp, #0
   15bd2:	6078      	str	r0, [r7, #4]
   15bd4:	687b      	ldr	r3, [r7, #4]
   15bd6:	f003 0303 	and.w	r3, r3, #3
   15bda:	2b00      	cmp	r3, #0
   15bdc:	bf0c      	ite	eq
   15bde:	2301      	moveq	r3, #1
   15be0:	2300      	movne	r3, #0
   15be2:	b2db      	uxtb	r3, r3
   15be4:	4618      	mov	r0, r3
   15be6:	370c      	adds	r7, #12
   15be8:	46bd      	mov	sp, r7
   15bea:	f85d 7b04 	ldr.w	r7, [sp], #4
   15bee:	4770      	bx	lr

00015bf0 <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   15bf0:	b580      	push	{r7, lr}
   15bf2:	b088      	sub	sp, #32
   15bf4:	af00      	add	r7, sp, #0
   15bf6:	6078      	str	r0, [r7, #4]
   15bf8:	6039      	str	r1, [r7, #0]
    int count = 0;
   15bfa:	2300      	movs	r3, #0
   15bfc:	61fb      	str	r3, [r7, #28]
    for (;;) {
        if (type == &mp_type_object) {
   15bfe:	687b      	ldr	r3, [r7, #4]
   15c00:	4a2c      	ldr	r2, [pc, #176]	; (15cb4 <instance_count_native_bases+0xc4>)
   15c02:	4293      	cmp	r3, r2
   15c04:	d101      	bne.n	15c0a <instance_count_native_bases+0x1a>
            // Not a "real" type, end search here.
            return count;
   15c06:	69fb      	ldr	r3, [r7, #28]
   15c08:	e04f      	b.n	15caa <instance_count_native_bases+0xba>
        } else if (mp_obj_is_native_type(type)) {
   15c0a:	687b      	ldr	r3, [r7, #4]
   15c0c:	68db      	ldr	r3, [r3, #12]
   15c0e:	4a2a      	ldr	r2, [pc, #168]	; (15cb8 <instance_count_native_bases+0xc8>)
   15c10:	4293      	cmp	r3, r2
   15c12:	d005      	beq.n	15c20 <instance_count_native_bases+0x30>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
   15c14:	683b      	ldr	r3, [r7, #0]
   15c16:	687a      	ldr	r2, [r7, #4]
   15c18:	601a      	str	r2, [r3, #0]
            return count + 1;
   15c1a:	69fb      	ldr	r3, [r7, #28]
   15c1c:	3301      	adds	r3, #1
   15c1e:	e044      	b.n	15caa <instance_count_native_bases+0xba>
        } else if (type->parent == NULL) {
   15c20:	687b      	ldr	r3, [r7, #4]
   15c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15c24:	2b00      	cmp	r3, #0
   15c26:	d101      	bne.n	15c2c <instance_count_native_bases+0x3c>
            // No parents so end search here.
            return count;
   15c28:	69fb      	ldr	r3, [r7, #28]
   15c2a:	e03e      	b.n	15caa <instance_count_native_bases+0xba>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   15c2c:	687b      	ldr	r3, [r7, #4]
   15c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15c30:	681b      	ldr	r3, [r3, #0]
   15c32:	4a22      	ldr	r2, [pc, #136]	; (15cbc <instance_count_native_bases+0xcc>)
   15c34:	4293      	cmp	r3, r2
   15c36:	d134      	bne.n	15ca2 <instance_count_native_bases+0xb2>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
   15c38:	687b      	ldr	r3, [r7, #4]
   15c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15c3c:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   15c3e:	697b      	ldr	r3, [r7, #20]
   15c40:	3308      	adds	r3, #8
   15c42:	61bb      	str	r3, [r7, #24]
            const mp_obj_t *top = item + parent_tuple->len;
   15c44:	697b      	ldr	r3, [r7, #20]
   15c46:	685b      	ldr	r3, [r3, #4]
   15c48:	009b      	lsls	r3, r3, #2
   15c4a:	69ba      	ldr	r2, [r7, #24]
   15c4c:	4413      	add	r3, r2
   15c4e:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   15c50:	e021      	b.n	15c96 <instance_count_native_bases+0xa6>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   15c52:	69bb      	ldr	r3, [r7, #24]
   15c54:	681b      	ldr	r3, [r3, #0]
   15c56:	4618      	mov	r0, r3
   15c58:	f7ff ffb8 	bl	15bcc <MP_OBJ_IS_OBJ>
   15c5c:	4603      	mov	r3, r0
   15c5e:	2b00      	cmp	r3, #0
   15c60:	d005      	beq.n	15c6e <instance_count_native_bases+0x7e>
   15c62:	69bb      	ldr	r3, [r7, #24]
   15c64:	681b      	ldr	r3, [r3, #0]
   15c66:	681b      	ldr	r3, [r3, #0]
   15c68:	4a15      	ldr	r2, [pc, #84]	; (15cc0 <instance_count_native_bases+0xd0>)
   15c6a:	4293      	cmp	r3, r2
   15c6c:	d005      	beq.n	15c7a <instance_count_native_bases+0x8a>
   15c6e:	4b15      	ldr	r3, [pc, #84]	; (15cc4 <instance_count_native_bases+0xd4>)
   15c70:	4a15      	ldr	r2, [pc, #84]	; (15cc8 <instance_count_native_bases+0xd8>)
   15c72:	214b      	movs	r1, #75	; 0x4b
   15c74:	4815      	ldr	r0, [pc, #84]	; (15ccc <instance_count_native_bases+0xdc>)
   15c76:	f005 fab5 	bl	1b1e4 <__assert_func>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
   15c7a:	69bb      	ldr	r3, [r7, #24]
   15c7c:	681b      	ldr	r3, [r3, #0]
   15c7e:	60fb      	str	r3, [r7, #12]
                count += instance_count_native_bases(bt, last_native_base);
   15c80:	6839      	ldr	r1, [r7, #0]
   15c82:	68f8      	ldr	r0, [r7, #12]
   15c84:	f7ff ffb4 	bl	15bf0 <instance_count_native_bases>
   15c88:	4602      	mov	r2, r0
   15c8a:	69fb      	ldr	r3, [r7, #28]
   15c8c:	4413      	add	r3, r2
   15c8e:	61fb      	str	r3, [r7, #28]
            for (; item < top; ++item) {
   15c90:	69bb      	ldr	r3, [r7, #24]
   15c92:	3304      	adds	r3, #4
   15c94:	61bb      	str	r3, [r7, #24]
   15c96:	69ba      	ldr	r2, [r7, #24]
   15c98:	693b      	ldr	r3, [r7, #16]
   15c9a:	429a      	cmp	r2, r3
   15c9c:	d3d9      	bcc.n	15c52 <instance_count_native_bases+0x62>
            }
            return count;
   15c9e:	69fb      	ldr	r3, [r7, #28]
   15ca0:	e003      	b.n	15caa <instance_count_native_bases+0xba>
        #endif
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
   15ca2:	687b      	ldr	r3, [r7, #4]
   15ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15ca6:	607b      	str	r3, [r7, #4]
        if (type == &mp_type_object) {
   15ca8:	e7a9      	b.n	15bfe <instance_count_native_bases+0xe>
        }
    }
}
   15caa:	4618      	mov	r0, r3
   15cac:	3720      	adds	r7, #32
   15cae:	46bd      	mov	sp, r7
   15cb0:	bd80      	pop	{r7, pc}
   15cb2:	bf00      	nop
   15cb4:	00022a98 	.word	0x00022a98
   15cb8:	000160f1 	.word	0x000160f1
   15cbc:	00023488 	.word	0x00023488
   15cc0:	00023780 	.word	0x00023780
   15cc4:	00023548 	.word	0x00023548
   15cc8:	00023a04 	.word	0x00023a04
   15ccc:	00023570 	.word	0x00023570

00015cd0 <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   15cd0:	b590      	push	{r4, r7, lr}
   15cd2:	b085      	sub	sp, #20
   15cd4:	af00      	add	r7, sp, #0
   15cd6:	6078      	str	r0, [r7, #4]
   15cd8:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   15cda:	683b      	ldr	r3, [r7, #0]
   15cdc:	681b      	ldr	r3, [r3, #0]
   15cde:	60fb      	str	r3, [r7, #12]
    const mp_obj_type_t *native_base = NULL;
   15ce0:	2300      	movs	r3, #0
   15ce2:	60bb      	str	r3, [r7, #8]
    instance_count_native_bases(self->base.type, &native_base);
   15ce4:	68fb      	ldr	r3, [r7, #12]
   15ce6:	681b      	ldr	r3, [r3, #0]
   15ce8:	f107 0208 	add.w	r2, r7, #8
   15cec:	4611      	mov	r1, r2
   15cee:	4618      	mov	r0, r3
   15cf0:	f7ff ff7e 	bl	15bf0 <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   15cf4:	68bb      	ldr	r3, [r7, #8]
   15cf6:	68dc      	ldr	r4, [r3, #12]
   15cf8:	68b8      	ldr	r0, [r7, #8]
   15cfa:	687b      	ldr	r3, [r7, #4]
   15cfc:	1e59      	subs	r1, r3, #1
   15cfe:	683b      	ldr	r3, [r7, #0]
   15d00:	3304      	adds	r3, #4
   15d02:	2200      	movs	r2, #0
   15d04:	47a0      	blx	r4
   15d06:	4602      	mov	r2, r0
   15d08:	68fb      	ldr	r3, [r7, #12]
   15d0a:	611a      	str	r2, [r3, #16]
    return mp_const_none;
   15d0c:	4b02      	ldr	r3, [pc, #8]	; (15d18 <native_base_init_wrapper+0x48>)
}
   15d0e:	4618      	mov	r0, r3
   15d10:	3714      	adds	r7, #20
   15d12:	46bd      	mov	sp, r7
   15d14:	bd90      	pop	{r4, r7, pc}
   15d16:	bf00      	nop
   15d18:	00022b54 	.word	0x00022b54

00015d1c <mp_obj_new_instance>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(native_base_init_wrapper_obj, 1, MP_OBJ_FUN_ARGS_MAX, native_base_init_wrapper);

#if !MICROPY_CPYTHON_COMPAT
STATIC
#endif
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   15d1c:	b580      	push	{r7, lr}
   15d1e:	b084      	sub	sp, #16
   15d20:	af00      	add	r7, sp, #0
   15d22:	6078      	str	r0, [r7, #4]
   15d24:	6039      	str	r1, [r7, #0]
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   15d26:	6839      	ldr	r1, [r7, #0]
   15d28:	6878      	ldr	r0, [r7, #4]
   15d2a:	f7ff ff61 	bl	15bf0 <instance_count_native_bases>
   15d2e:	4603      	mov	r3, r0
   15d30:	60fb      	str	r3, [r7, #12]
    assert(num_native_bases < 2);
   15d32:	68fb      	ldr	r3, [r7, #12]
   15d34:	2b01      	cmp	r3, #1
   15d36:	d905      	bls.n	15d44 <mp_obj_new_instance+0x28>
   15d38:	4b10      	ldr	r3, [pc, #64]	; (15d7c <mp_obj_new_instance+0x60>)
   15d3a:	4a11      	ldr	r2, [pc, #68]	; (15d80 <mp_obj_new_instance+0x64>)
   15d3c:	2168      	movs	r1, #104	; 0x68
   15d3e:	4811      	ldr	r0, [pc, #68]	; (15d84 <mp_obj_new_instance+0x68>)
   15d40:	f005 fa50 	bl	1b1e4 <__assert_func>
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   15d44:	68fb      	ldr	r3, [r7, #12]
   15d46:	3304      	adds	r3, #4
   15d48:	009b      	lsls	r3, r3, #2
   15d4a:	4618      	mov	r0, r3
   15d4c:	f7ea fae6 	bl	31c <m_malloc>
   15d50:	60b8      	str	r0, [r7, #8]
    o->base.type = class;
   15d52:	68bb      	ldr	r3, [r7, #8]
   15d54:	687a      	ldr	r2, [r7, #4]
   15d56:	601a      	str	r2, [r3, #0]
    mp_map_init(&o->members, 0);
   15d58:	68bb      	ldr	r3, [r7, #8]
   15d5a:	3304      	adds	r3, #4
   15d5c:	2100      	movs	r1, #0
   15d5e:	4618      	mov	r0, r3
   15d60:	f7f7 fa20 	bl	d1a4 <mp_map_init>
    // Initialise the native base-class slot (should be 1 at most) with a valid
    // object.  It doesn't matter which object, so long as it can be uniquely
    // distinguished from a native class that is initialised.
    if (num_native_bases != 0) {
   15d64:	68fb      	ldr	r3, [r7, #12]
   15d66:	2b00      	cmp	r3, #0
   15d68:	d002      	beq.n	15d70 <mp_obj_new_instance+0x54>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   15d6a:	68bb      	ldr	r3, [r7, #8]
   15d6c:	4a06      	ldr	r2, [pc, #24]	; (15d88 <mp_obj_new_instance+0x6c>)
   15d6e:	611a      	str	r2, [r3, #16]
    }
    return o;
   15d70:	68bb      	ldr	r3, [r7, #8]
}
   15d72:	4618      	mov	r0, r3
   15d74:	3710      	adds	r7, #16
   15d76:	46bd      	mov	sp, r7
   15d78:	bd80      	pop	{r7, pc}
   15d7a:	bf00      	nop
   15d7c:	00023590 	.word	0x00023590
   15d80:	00023a20 	.word	0x00023a20
   15d84:	00023570 	.word	0x00023570
   15d88:	00023584 	.word	0x00023584

00015d8c <mp_obj_class_lookup>:
    size_t meth_offset;
    mp_obj_t *dest;
    bool is_type;
};

STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   15d8c:	b580      	push	{r7, lr}
   15d8e:	b08c      	sub	sp, #48	; 0x30
   15d90:	af00      	add	r7, sp, #0
   15d92:	6078      	str	r0, [r7, #4]
   15d94:	6039      	str	r1, [r7, #0]
    assert(lookup->dest[0] == MP_OBJ_NULL);
   15d96:	687b      	ldr	r3, [r7, #4]
   15d98:	68db      	ldr	r3, [r3, #12]
   15d9a:	681b      	ldr	r3, [r3, #0]
   15d9c:	2b00      	cmp	r3, #0
   15d9e:	d005      	beq.n	15dac <mp_obj_class_lookup+0x20>
   15da0:	4b85      	ldr	r3, [pc, #532]	; (15fb8 <mp_obj_class_lookup+0x22c>)
   15da2:	4a86      	ldr	r2, [pc, #536]	; (15fbc <mp_obj_class_lookup+0x230>)
   15da4:	218c      	movs	r1, #140	; 0x8c
   15da6:	4886      	ldr	r0, [pc, #536]	; (15fc0 <mp_obj_class_lookup+0x234>)
   15da8:	f005 fa1c 	bl	1b1e4 <__assert_func>
    assert(lookup->dest[1] == MP_OBJ_NULL);
   15dac:	687b      	ldr	r3, [r7, #4]
   15dae:	68db      	ldr	r3, [r3, #12]
   15db0:	3304      	adds	r3, #4
   15db2:	681b      	ldr	r3, [r3, #0]
   15db4:	2b00      	cmp	r3, #0
   15db6:	d005      	beq.n	15dc4 <mp_obj_class_lookup+0x38>
   15db8:	4b82      	ldr	r3, [pc, #520]	; (15fc4 <mp_obj_class_lookup+0x238>)
   15dba:	4a80      	ldr	r2, [pc, #512]	; (15fbc <mp_obj_class_lookup+0x230>)
   15dbc:	218d      	movs	r1, #141	; 0x8d
   15dbe:	4880      	ldr	r0, [pc, #512]	; (15fc0 <mp_obj_class_lookup+0x234>)
   15dc0:	f005 fa10 	bl	1b1e4 <__assert_func>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
        // Optimize special method lookup for native types
        // This avoids extra method_name => slot lookup. On the other hand,
        // this should not be applied to class types, as will result in extra
        // lookup either.
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   15dc4:	687b      	ldr	r3, [r7, #4]
   15dc6:	689b      	ldr	r3, [r3, #8]
   15dc8:	2b00      	cmp	r3, #0
   15dca:	d010      	beq.n	15dee <mp_obj_class_lookup+0x62>
   15dcc:	683b      	ldr	r3, [r7, #0]
   15dce:	68db      	ldr	r3, [r3, #12]
   15dd0:	4a7d      	ldr	r2, [pc, #500]	; (15fc8 <mp_obj_class_lookup+0x23c>)
   15dd2:	4293      	cmp	r3, r2
   15dd4:	d00b      	beq.n	15dee <mp_obj_class_lookup+0x62>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   15dd6:	687b      	ldr	r3, [r7, #4]
   15dd8:	689b      	ldr	r3, [r3, #8]
   15dda:	683a      	ldr	r2, [r7, #0]
   15ddc:	4413      	add	r3, r2
   15dde:	681b      	ldr	r3, [r3, #0]
   15de0:	2b00      	cmp	r3, #0
   15de2:	d004      	beq.n	15dee <mp_obj_class_lookup+0x62>
                DEBUG_printf("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",
                    lookup->meth_offset, qstr_str(lookup->attr));
                lookup->dest[0] = MP_OBJ_SENTINEL;
   15de4:	687b      	ldr	r3, [r7, #4]
   15de6:	68db      	ldr	r3, [r3, #12]
   15de8:	2208      	movs	r2, #8
   15dea:	601a      	str	r2, [r3, #0]
                return;
   15dec:	e0e0      	b.n	15fb0 <mp_obj_class_lookup+0x224>
            }
        }

        if (type->locals_dict != NULL) {
   15dee:	683b      	ldr	r3, [r7, #0]
   15df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15df2:	2b00      	cmp	r3, #0
   15df4:	d04b      	beq.n	15e8e <mp_obj_class_lookup+0x102>
            // search locals_dict (the set of methods/attributes)
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   15df6:	683b      	ldr	r3, [r7, #0]
   15df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15dfa:	681b      	ldr	r3, [r3, #0]
   15dfc:	4a73      	ldr	r2, [pc, #460]	; (15fcc <mp_obj_class_lookup+0x240>)
   15dfe:	4293      	cmp	r3, r2
   15e00:	d005      	beq.n	15e0e <mp_obj_class_lookup+0x82>
   15e02:	4b73      	ldr	r3, [pc, #460]	; (15fd0 <mp_obj_class_lookup+0x244>)
   15e04:	4a6d      	ldr	r2, [pc, #436]	; (15fbc <mp_obj_class_lookup+0x230>)
   15e06:	219f      	movs	r1, #159	; 0x9f
   15e08:	486d      	ldr	r0, [pc, #436]	; (15fc0 <mp_obj_class_lookup+0x234>)
   15e0a:	f005 f9eb 	bl	1b1e4 <__assert_func>
            mp_map_t *locals_map = &type->locals_dict->map;
   15e0e:	683b      	ldr	r3, [r7, #0]
   15e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15e12:	3304      	adds	r3, #4
   15e14:	627b      	str	r3, [r7, #36]	; 0x24
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   15e16:	687b      	ldr	r3, [r7, #4]
   15e18:	685b      	ldr	r3, [r3, #4]
   15e1a:	009b      	lsls	r3, r3, #2
   15e1c:	f043 0302 	orr.w	r3, r3, #2
   15e20:	2200      	movs	r2, #0
   15e22:	4619      	mov	r1, r3
   15e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15e26:	f7f7 fab5 	bl	d394 <mp_map_lookup>
   15e2a:	6238      	str	r0, [r7, #32]
            if (elem != NULL) {
   15e2c:	6a3b      	ldr	r3, [r7, #32]
   15e2e:	2b00      	cmp	r3, #0
   15e30:	d02d      	beq.n	15e8e <mp_obj_class_lookup+0x102>
                if (lookup->is_type) {
   15e32:	687b      	ldr	r3, [r7, #4]
   15e34:	7c1b      	ldrb	r3, [r3, #16]
   15e36:	2b00      	cmp	r3, #0
   15e38:	d00b      	beq.n	15e52 <mp_obj_class_lookup+0xc6>
                    // If we look up a class method, we need to return original type for which we
                    // do a lookup, not a (base) type in which we found the class method.
                    const mp_obj_type_t *org_type = (const mp_obj_type_t*)lookup->obj;
   15e3a:	687b      	ldr	r3, [r7, #4]
   15e3c:	681b      	ldr	r3, [r3, #0]
   15e3e:	61fb      	str	r3, [r7, #28]
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   15e40:	6a3b      	ldr	r3, [r7, #32]
   15e42:	685a      	ldr	r2, [r3, #4]
   15e44:	687b      	ldr	r3, [r7, #4]
   15e46:	68db      	ldr	r3, [r3, #12]
   15e48:	69f9      	ldr	r1, [r7, #28]
   15e4a:	2000      	movs	r0, #0
   15e4c:	f7f6 fb9a 	bl	c584 <mp_convert_member_lookup>
                printf("mp_obj_class_lookup: Returning: ");
                mp_obj_print(lookup->dest[0], PRINT_REPR); printf(" ");
                // Don't try to repr() lookup->dest[1], as we can be called recursively
                printf("<%s @%p>\n", mp_obj_get_type_str(lookup->dest[1]), lookup->dest[1]);
#endif
                return;
   15e50:	e0ae      	b.n	15fb0 <mp_obj_class_lookup+0x224>
                    mp_obj_instance_t *obj = lookup->obj;
   15e52:	687b      	ldr	r3, [r7, #4]
   15e54:	681b      	ldr	r3, [r3, #0]
   15e56:	61bb      	str	r3, [r7, #24]
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   15e58:	69bb      	ldr	r3, [r7, #24]
   15e5a:	2b00      	cmp	r3, #0
   15e5c:	d00c      	beq.n	15e78 <mp_obj_class_lookup+0xec>
   15e5e:	683b      	ldr	r3, [r7, #0]
   15e60:	68db      	ldr	r3, [r3, #12]
   15e62:	4a59      	ldr	r2, [pc, #356]	; (15fc8 <mp_obj_class_lookup+0x23c>)
   15e64:	4293      	cmp	r3, r2
   15e66:	d007      	beq.n	15e78 <mp_obj_class_lookup+0xec>
   15e68:	683b      	ldr	r3, [r7, #0]
   15e6a:	4a5a      	ldr	r2, [pc, #360]	; (15fd4 <mp_obj_class_lookup+0x248>)
   15e6c:	4293      	cmp	r3, r2
   15e6e:	d003      	beq.n	15e78 <mp_obj_class_lookup+0xec>
                        obj_obj = obj->subobj[0];
   15e70:	69bb      	ldr	r3, [r7, #24]
   15e72:	691b      	ldr	r3, [r3, #16]
   15e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   15e76:	e001      	b.n	15e7c <mp_obj_class_lookup+0xf0>
                        obj_obj = MP_OBJ_FROM_PTR(obj);
   15e78:	69bb      	ldr	r3, [r7, #24]
   15e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   15e7c:	6a3b      	ldr	r3, [r7, #32]
   15e7e:	685a      	ldr	r2, [r3, #4]
   15e80:	687b      	ldr	r3, [r7, #4]
   15e82:	68db      	ldr	r3, [r3, #12]
   15e84:	6839      	ldr	r1, [r7, #0]
   15e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   15e88:	f7f6 fb7c 	bl	c584 <mp_convert_member_lookup>
                return;
   15e8c:	e090      	b.n	15fb0 <mp_obj_class_lookup+0x224>
        }

        // Previous code block takes care about attributes defined in .locals_dict,
        // but some attributes of native types may be handled using .load_attr method,
        // so make sure we try to lookup those too.
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   15e8e:	687b      	ldr	r3, [r7, #4]
   15e90:	681b      	ldr	r3, [r3, #0]
   15e92:	2b00      	cmp	r3, #0
   15e94:	d01e      	beq.n	15ed4 <mp_obj_class_lookup+0x148>
   15e96:	687b      	ldr	r3, [r7, #4]
   15e98:	7c1b      	ldrb	r3, [r3, #16]
   15e9a:	f083 0301 	eor.w	r3, r3, #1
   15e9e:	b2db      	uxtb	r3, r3
   15ea0:	2b00      	cmp	r3, #0
   15ea2:	d017      	beq.n	15ed4 <mp_obj_class_lookup+0x148>
   15ea4:	683b      	ldr	r3, [r7, #0]
   15ea6:	68db      	ldr	r3, [r3, #12]
   15ea8:	4a47      	ldr	r2, [pc, #284]	; (15fc8 <mp_obj_class_lookup+0x23c>)
   15eaa:	4293      	cmp	r3, r2
   15eac:	d012      	beq.n	15ed4 <mp_obj_class_lookup+0x148>
   15eae:	683b      	ldr	r3, [r7, #0]
   15eb0:	4a48      	ldr	r2, [pc, #288]	; (15fd4 <mp_obj_class_lookup+0x248>)
   15eb2:	4293      	cmp	r3, r2
   15eb4:	d00e      	beq.n	15ed4 <mp_obj_class_lookup+0x148>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   15eb6:	687b      	ldr	r3, [r7, #4]
   15eb8:	681b      	ldr	r3, [r3, #0]
   15eba:	6918      	ldr	r0, [r3, #16]
   15ebc:	687b      	ldr	r3, [r7, #4]
   15ebe:	6859      	ldr	r1, [r3, #4]
   15ec0:	687b      	ldr	r3, [r7, #4]
   15ec2:	68db      	ldr	r3, [r3, #12]
   15ec4:	461a      	mov	r2, r3
   15ec6:	f7f6 fbd1 	bl	c66c <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   15eca:	687b      	ldr	r3, [r7, #4]
   15ecc:	68db      	ldr	r3, [r3, #12]
   15ece:	681b      	ldr	r3, [r3, #0]
   15ed0:	2b00      	cmp	r3, #0
   15ed2:	d166      	bne.n	15fa2 <mp_obj_class_lookup+0x216>
            }
        }

        // attribute not found, keep searching base classes

        if (type->parent == NULL) {
   15ed4:	683b      	ldr	r3, [r7, #0]
   15ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15ed8:	2b00      	cmp	r3, #0
   15eda:	d064      	beq.n	15fa6 <mp_obj_class_lookup+0x21a>
            DEBUG_printf("mp_obj_class_lookup: No more parents\n");
            return;
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   15edc:	683b      	ldr	r3, [r7, #0]
   15ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15ee0:	681b      	ldr	r3, [r3, #0]
   15ee2:	4a3d      	ldr	r2, [pc, #244]	; (15fd8 <mp_obj_class_lookup+0x24c>)
   15ee4:	4293      	cmp	r3, r2
   15ee6:	d154      	bne.n	15f92 <mp_obj_class_lookup+0x206>
            const mp_obj_tuple_t *parent_tuple = type->parent;
   15ee8:	683b      	ldr	r3, [r7, #0]
   15eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15eec:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   15eee:	697b      	ldr	r3, [r7, #20]
   15ef0:	3308      	adds	r3, #8
   15ef2:	62bb      	str	r3, [r7, #40]	; 0x28
            const mp_obj_t *top = item + parent_tuple->len - 1;
   15ef4:	697b      	ldr	r3, [r7, #20]
   15ef6:	685b      	ldr	r3, [r3, #4]
   15ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15efc:	3b01      	subs	r3, #1
   15efe:	009b      	lsls	r3, r3, #2
   15f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15f02:	4413      	add	r3, r2
   15f04:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   15f06:	e028      	b.n	15f5a <mp_obj_class_lookup+0x1ce>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   15f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15f0a:	681b      	ldr	r3, [r3, #0]
   15f0c:	4618      	mov	r0, r3
   15f0e:	f7ff fe5d 	bl	15bcc <MP_OBJ_IS_OBJ>
   15f12:	4603      	mov	r3, r0
   15f14:	2b00      	cmp	r3, #0
   15f16:	d005      	beq.n	15f24 <mp_obj_class_lookup+0x198>
   15f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15f1a:	681b      	ldr	r3, [r3, #0]
   15f1c:	681b      	ldr	r3, [r3, #0]
   15f1e:	4a2f      	ldr	r2, [pc, #188]	; (15fdc <mp_obj_class_lookup+0x250>)
   15f20:	4293      	cmp	r3, r2
   15f22:	d005      	beq.n	15f30 <mp_obj_class_lookup+0x1a4>
   15f24:	4b2e      	ldr	r3, [pc, #184]	; (15fe0 <mp_obj_class_lookup+0x254>)
   15f26:	4a25      	ldr	r2, [pc, #148]	; (15fbc <mp_obj_class_lookup+0x230>)
   15f28:	21d2      	movs	r1, #210	; 0xd2
   15f2a:	4825      	ldr	r0, [pc, #148]	; (15fc0 <mp_obj_class_lookup+0x234>)
   15f2c:	f005 f95a 	bl	1b1e4 <__assert_func>
                mp_obj_type_t *bt = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   15f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15f32:	681b      	ldr	r3, [r3, #0]
   15f34:	60fb      	str	r3, [r7, #12]
                if (bt == &mp_type_object) {
   15f36:	68fb      	ldr	r3, [r7, #12]
   15f38:	4a26      	ldr	r2, [pc, #152]	; (15fd4 <mp_obj_class_lookup+0x248>)
   15f3a:	4293      	cmp	r3, r2
   15f3c:	d009      	beq.n	15f52 <mp_obj_class_lookup+0x1c6>
                    // Not a "real" type
                    continue;
                }
                mp_obj_class_lookup(lookup, bt);
   15f3e:	68f9      	ldr	r1, [r7, #12]
   15f40:	6878      	ldr	r0, [r7, #4]
   15f42:	f7ff ff23 	bl	15d8c <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   15f46:	687b      	ldr	r3, [r7, #4]
   15f48:	68db      	ldr	r3, [r3, #12]
   15f4a:	681b      	ldr	r3, [r3, #0]
   15f4c:	2b00      	cmp	r3, #0
   15f4e:	d12c      	bne.n	15faa <mp_obj_class_lookup+0x21e>
   15f50:	e000      	b.n	15f54 <mp_obj_class_lookup+0x1c8>
                    continue;
   15f52:	bf00      	nop
            for (; item < top; ++item) {
   15f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15f56:	3304      	adds	r3, #4
   15f58:	62bb      	str	r3, [r7, #40]	; 0x28
   15f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15f5c:	693b      	ldr	r3, [r7, #16]
   15f5e:	429a      	cmp	r2, r3
   15f60:	d3d2      	bcc.n	15f08 <mp_obj_class_lookup+0x17c>
                    return;
                }
            }

            // search last base (simple tail recursion elimination)
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   15f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15f64:	681b      	ldr	r3, [r3, #0]
   15f66:	4618      	mov	r0, r3
   15f68:	f7ff fe30 	bl	15bcc <MP_OBJ_IS_OBJ>
   15f6c:	4603      	mov	r3, r0
   15f6e:	2b00      	cmp	r3, #0
   15f70:	d005      	beq.n	15f7e <mp_obj_class_lookup+0x1f2>
   15f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15f74:	681b      	ldr	r3, [r3, #0]
   15f76:	681b      	ldr	r3, [r3, #0]
   15f78:	4a18      	ldr	r2, [pc, #96]	; (15fdc <mp_obj_class_lookup+0x250>)
   15f7a:	4293      	cmp	r3, r2
   15f7c:	d005      	beq.n	15f8a <mp_obj_class_lookup+0x1fe>
   15f7e:	4b18      	ldr	r3, [pc, #96]	; (15fe0 <mp_obj_class_lookup+0x254>)
   15f80:	4a0e      	ldr	r2, [pc, #56]	; (15fbc <mp_obj_class_lookup+0x230>)
   15f82:	21df      	movs	r1, #223	; 0xdf
   15f84:	480e      	ldr	r0, [pc, #56]	; (15fc0 <mp_obj_class_lookup+0x234>)
   15f86:	f005 f92d 	bl	1b1e4 <__assert_func>
            type = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   15f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15f8c:	681b      	ldr	r3, [r3, #0]
   15f8e:	603b      	str	r3, [r7, #0]
   15f90:	e002      	b.n	15f98 <mp_obj_class_lookup+0x20c>
        #endif
        } else {
            type = type->parent;
   15f92:	683b      	ldr	r3, [r7, #0]
   15f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15f96:	603b      	str	r3, [r7, #0]
        }
        if (type == &mp_type_object) {
   15f98:	683b      	ldr	r3, [r7, #0]
   15f9a:	4a0e      	ldr	r2, [pc, #56]	; (15fd4 <mp_obj_class_lookup+0x248>)
   15f9c:	4293      	cmp	r3, r2
   15f9e:	d006      	beq.n	15fae <mp_obj_class_lookup+0x222>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
   15fa0:	e710      	b.n	15dc4 <mp_obj_class_lookup+0x38>
                return;
   15fa2:	bf00      	nop
   15fa4:	e004      	b.n	15fb0 <mp_obj_class_lookup+0x224>
            return;
   15fa6:	bf00      	nop
   15fa8:	e002      	b.n	15fb0 <mp_obj_class_lookup+0x224>
                    return;
   15faa:	bf00      	nop
   15fac:	e000      	b.n	15fb0 <mp_obj_class_lookup+0x224>
            // Not a "real" type
            return;
   15fae:	bf00      	nop
        }
    }
}
   15fb0:	3730      	adds	r7, #48	; 0x30
   15fb2:	46bd      	mov	sp, r7
   15fb4:	bd80      	pop	{r7, pc}
   15fb6:	bf00      	nop
   15fb8:	000235a8 	.word	0x000235a8
   15fbc:	00023a34 	.word	0x00023a34
   15fc0:	00023570 	.word	0x00023570
   15fc4:	000235c8 	.word	0x000235c8
   15fc8:	000160f1 	.word	0x000160f1
   15fcc:	000217b4 	.word	0x000217b4
   15fd0:	000235e8 	.word	0x000235e8
   15fd4:	00022a98 	.word	0x00022a98
   15fd8:	00023488 	.word	0x00023488
   15fdc:	00023780 	.word	0x00023780
   15fe0:	00023548 	.word	0x00023548

00015fe4 <instance_print>:

STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   15fe4:	b580      	push	{r7, lr}
   15fe6:	b08e      	sub	sp, #56	; 0x38
   15fe8:	af00      	add	r7, sp, #0
   15fea:	60f8      	str	r0, [r7, #12]
   15fec:	60b9      	str	r1, [r7, #8]
   15fee:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   15ff0:	68bb      	ldr	r3, [r7, #8]
   15ff2:	637b      	str	r3, [r7, #52]	; 0x34
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	2b00      	cmp	r3, #0
   15ff8:	d101      	bne.n	15ffe <instance_print+0x1a>
   15ffa:	2323      	movs	r3, #35	; 0x23
   15ffc:	e000      	b.n	16000 <instance_print+0x1c>
   15ffe:	2321      	movs	r3, #33	; 0x21
   16000:	633b      	str	r3, [r7, #48]	; 0x30
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16002:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16006:	2200      	movs	r2, #0
   16008:	601a      	str	r2, [r3, #0]
   1600a:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   1600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1600e:	613b      	str	r3, [r7, #16]
   16010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16012:	617b      	str	r3, [r7, #20]
   16014:	2308      	movs	r3, #8
   16016:	61bb      	str	r3, [r7, #24]
   16018:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1601c:	61fb      	str	r3, [r7, #28]
   1601e:	2300      	movs	r3, #0
   16020:	f887 3020 	strb.w	r3, [r7, #32]
        .attr = meth,
        .meth_offset = offsetof(mp_obj_type_t, print),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16026:	681a      	ldr	r2, [r3, #0]
   16028:	f107 0310 	add.w	r3, r7, #16
   1602c:	4611      	mov	r1, r2
   1602e:	4618      	mov	r0, r3
   16030:	f7ff feac 	bl	15d8c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   16034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16036:	2b00      	cmp	r3, #0
   16038:	d10e      	bne.n	16058 <instance_print+0x74>
   1603a:	687b      	ldr	r3, [r7, #4]
   1603c:	2b00      	cmp	r3, #0
   1603e:	d10b      	bne.n	16058 <instance_print+0x74>
        // If there's no __str__, fall back to __repr__
        lookup.attr = MP_QSTR___repr__;
   16040:	2321      	movs	r3, #33	; 0x21
   16042:	617b      	str	r3, [r7, #20]
        lookup.meth_offset = 0;
   16044:	2300      	movs	r3, #0
   16046:	61bb      	str	r3, [r7, #24]
        mp_obj_class_lookup(&lookup, self->base.type);
   16048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1604a:	681a      	ldr	r2, [r3, #0]
   1604c:	f107 0310 	add.w	r3, r7, #16
   16050:	4611      	mov	r1, r2
   16052:	4618      	mov	r0, r3
   16054:	f7ff fe9a 	bl	15d8c <mp_obj_class_lookup>
    }

    if (member[0] == MP_OBJ_SENTINEL) {
   16058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1605a:	2b08      	cmp	r3, #8
   1605c:	d129      	bne.n	160b2 <instance_print+0xce>
        // Handle Exception subclasses specially
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   1605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16060:	691b      	ldr	r3, [r3, #16]
   16062:	4618      	mov	r0, r3
   16064:	f7f7 fb40 	bl	d6e8 <mp_obj_get_type>
   16068:	4603      	mov	r3, r0
   1606a:	68db      	ldr	r3, [r3, #12]
   1606c:	4a1e      	ldr	r2, [pc, #120]	; (160e8 <instance_print+0x104>)
   1606e:	4293      	cmp	r3, r2
   16070:	d117      	bne.n	160a2 <instance_print+0xbe>
            if (kind != PRINT_STR) {
   16072:	687b      	ldr	r3, [r7, #4]
   16074:	2b00      	cmp	r3, #0
   16076:	d00a      	beq.n	1608e <instance_print+0xaa>
                mp_print_str(print, qstr_str(self->base.type->name));
   16078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1607a:	681b      	ldr	r3, [r3, #0]
   1607c:	88db      	ldrh	r3, [r3, #6]
   1607e:	4618      	mov	r0, r3
   16080:	f7eb f8b6 	bl	11f0 <qstr_str>
   16084:	4603      	mov	r3, r0
   16086:	4619      	mov	r1, r3
   16088:	68f8      	ldr	r0, [r7, #12]
   1608a:	f7eb fbef 	bl	186c <mp_print_str>
            }
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   1608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16090:	6919      	ldr	r1, [r3, #16]
   16092:	687b      	ldr	r3, [r7, #4]
   16094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16098:	461a      	mov	r2, r3
   1609a:	68f8      	ldr	r0, [r7, #12]
   1609c:	f7f7 fb55 	bl	d74a <mp_obj_print_helper>
        } else {
            mp_obj_print_helper(print, self->subobj[0], kind);
        }
        return;
   160a0:	e01f      	b.n	160e2 <instance_print+0xfe>
            mp_obj_print_helper(print, self->subobj[0], kind);
   160a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   160a4:	691b      	ldr	r3, [r3, #16]
   160a6:	687a      	ldr	r2, [r7, #4]
   160a8:	4619      	mov	r1, r3
   160aa:	68f8      	ldr	r0, [r7, #12]
   160ac:	f7f7 fb4d 	bl	d74a <mp_obj_print_helper>
        return;
   160b0:	e017      	b.n	160e2 <instance_print+0xfe>
    }

    if (member[0] != MP_OBJ_NULL) {
   160b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   160b4:	2b00      	cmp	r3, #0
   160b6:	d00b      	beq.n	160d0 <instance_print+0xec>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   160b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   160ba:	68b9      	ldr	r1, [r7, #8]
   160bc:	4618      	mov	r0, r3
   160be:	f7f5 fe16 	bl	bcee <mp_call_function_1>
   160c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        mp_obj_print_helper(print, r, PRINT_STR);
   160c4:	2200      	movs	r2, #0
   160c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   160c8:	68f8      	ldr	r0, [r7, #12]
   160ca:	f7f7 fb3e 	bl	d74a <mp_obj_print_helper>
        return;
   160ce:	e008      	b.n	160e2 <instance_print+0xfe>
    }

    // TODO: CPython prints fully-qualified type name
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   160d0:	68b8      	ldr	r0, [r7, #8]
   160d2:	f7f7 fb29 	bl	d728 <mp_obj_get_type_str>
   160d6:	4602      	mov	r2, r0
   160d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   160da:	4904      	ldr	r1, [pc, #16]	; (160ec <instance_print+0x108>)
   160dc:	68f8      	ldr	r0, [r7, #12]
   160de:	f7eb fed7 	bl	1e90 <mp_printf>
}
   160e2:	3738      	adds	r7, #56	; 0x38
   160e4:	46bd      	mov	sp, r7
   160e6:	bd80      	pop	{r7, pc}
   160e8:	0000f171 	.word	0x0000f171
   160ec:	00023618 	.word	0x00023618

000160f0 <mp_obj_instance_make_new>:

mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   160f0:	b590      	push	{r4, r7, lr}
   160f2:	b093      	sub	sp, #76	; 0x4c
   160f4:	af00      	add	r7, sp, #0
   160f6:	60f8      	str	r0, [r7, #12]
   160f8:	60b9      	str	r1, [r7, #8]
   160fa:	607a      	str	r2, [r7, #4]
   160fc:	603b      	str	r3, [r7, #0]
    assert(mp_obj_is_instance_type(self));
   160fe:	68fb      	ldr	r3, [r7, #12]
   16100:	68db      	ldr	r3, [r3, #12]
   16102:	4a6b      	ldr	r2, [pc, #428]	; (162b0 <mp_obj_instance_make_new+0x1c0>)
   16104:	4293      	cmp	r3, r2
   16106:	d006      	beq.n	16116 <mp_obj_instance_make_new+0x26>
   16108:	4b6a      	ldr	r3, [pc, #424]	; (162b4 <mp_obj_instance_make_new+0x1c4>)
   1610a:	4a6b      	ldr	r2, [pc, #428]	; (162b8 <mp_obj_instance_make_new+0x1c8>)
   1610c:	f240 1117 	movw	r1, #279	; 0x117
   16110:	486a      	ldr	r0, [pc, #424]	; (162bc <mp_obj_instance_make_new+0x1cc>)
   16112:	f005 f867 	bl	1b1e4 <__assert_func>

    // look for __new__ function
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   16116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1611a:	2200      	movs	r2, #0
   1611c:	601a      	str	r2, [r3, #0]
   1611e:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16120:	2300      	movs	r3, #0
   16122:	61bb      	str	r3, [r7, #24]
   16124:	231c      	movs	r3, #28
   16126:	61fb      	str	r3, [r7, #28]
   16128:	230c      	movs	r3, #12
   1612a:	623b      	str	r3, [r7, #32]
   1612c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16130:	627b      	str	r3, [r7, #36]	; 0x24
   16132:	2300      	movs	r3, #0
   16134:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        .attr = MP_QSTR___new__,
        .meth_offset = offsetof(mp_obj_type_t, make_new),
        .dest = init_fn,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self);
   16138:	f107 0318 	add.w	r3, r7, #24
   1613c:	68f9      	ldr	r1, [r7, #12]
   1613e:	4618      	mov	r0, r3
   16140:	f7ff fe24 	bl	15d8c <mp_obj_class_lookup>

    const mp_obj_type_t *native_base = NULL;
   16144:	2300      	movs	r3, #0
   16146:	617b      	str	r3, [r7, #20]
    mp_obj_instance_t *o;
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   16148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1614a:	2b00      	cmp	r3, #0
   1614c:	d002      	beq.n	16154 <mp_obj_instance_make_new+0x64>
   1614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16150:	2b08      	cmp	r3, #8
   16152:	d107      	bne.n	16164 <mp_obj_instance_make_new+0x74>
        // Either there is no __new__() method defined or there is a native
        // constructor.  In both cases create a blank instance.
        o = mp_obj_new_instance(self, &native_base);
   16154:	f107 0314 	add.w	r3, r7, #20
   16158:	4619      	mov	r1, r3
   1615a:	68f8      	ldr	r0, [r7, #12]
   1615c:	f7ff fdde 	bl	15d1c <mp_obj_new_instance>
   16160:	6478      	str	r0, [r7, #68]	; 0x44
   16162:	e03e      	b.n	161e2 <mp_obj_instance_make_new+0xf2>
        // said native constructor.

    } else {
        // Call Python class __new__ function with all args to create an instance
        mp_obj_t new_ret;
        if (n_args == 0 && n_kw == 0) {
   16164:	68bb      	ldr	r3, [r7, #8]
   16166:	2b00      	cmp	r3, #0
   16168:	d10d      	bne.n	16186 <mp_obj_instance_make_new+0x96>
   1616a:	687b      	ldr	r3, [r7, #4]
   1616c:	2b00      	cmp	r3, #0
   1616e:	d10a      	bne.n	16186 <mp_obj_instance_make_new+0x96>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   16170:	68fb      	ldr	r3, [r7, #12]
   16172:	613b      	str	r3, [r7, #16]
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   16174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16176:	f107 0310 	add.w	r3, r7, #16
   1617a:	2200      	movs	r2, #0
   1617c:	2101      	movs	r1, #1
   1617e:	f7f5 fddc 	bl	bd3a <mp_call_function_n_kw>
   16182:	6438      	str	r0, [r7, #64]	; 0x40
        if (n_args == 0 && n_kw == 0) {
   16184:	e022      	b.n	161cc <mp_obj_instance_make_new+0xdc>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   16186:	687b      	ldr	r3, [r7, #4]
   16188:	005a      	lsls	r2, r3, #1
   1618a:	68bb      	ldr	r3, [r7, #8]
   1618c:	4413      	add	r3, r2
   1618e:	3301      	adds	r3, #1
   16190:	009b      	lsls	r3, r3, #2
   16192:	4618      	mov	r0, r3
   16194:	f7ea f8c2 	bl	31c <m_malloc>
   16198:	63b8      	str	r0, [r7, #56]	; 0x38
            args2[0] = MP_OBJ_FROM_PTR(self);
   1619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1619c:	68fa      	ldr	r2, [r7, #12]
   1619e:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   161a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   161a2:	1d18      	adds	r0, r3, #4
   161a4:	687b      	ldr	r3, [r7, #4]
   161a6:	005a      	lsls	r2, r3, #1
   161a8:	68bb      	ldr	r3, [r7, #8]
   161aa:	4413      	add	r3, r2
   161ac:	009b      	lsls	r3, r3, #2
   161ae:	461a      	mov	r2, r3
   161b0:	6839      	ldr	r1, [r7, #0]
   161b2:	f006 f9d5 	bl	1c560 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   161b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   161b8:	68bb      	ldr	r3, [r7, #8]
   161ba:	1c59      	adds	r1, r3, #1
   161bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   161be:	687a      	ldr	r2, [r7, #4]
   161c0:	f7f5 fdbb 	bl	bd3a <mp_call_function_n_kw>
   161c4:	6438      	str	r0, [r7, #64]	; 0x40
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   161c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   161c8:	f7ea f906 	bl	3d8 <m_free>
        }

        // https://docs.python.org/3.4/reference/datamodel.html#object.__new__
        // "If __new__() does not return an instance of cls, then the new
        // instance's __init__() method will not be invoked."
        if (mp_obj_get_type(new_ret) != self) {
   161cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
   161ce:	f7f7 fa8b 	bl	d6e8 <mp_obj_get_type>
   161d2:	4602      	mov	r2, r0
   161d4:	68fb      	ldr	r3, [r7, #12]
   161d6:	429a      	cmp	r2, r3
   161d8:	d001      	beq.n	161de <mp_obj_instance_make_new+0xee>
            return new_ret;
   161da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   161dc:	e063      	b.n	162a6 <mp_obj_instance_make_new+0x1b6>
        }

        // The instance returned by __new__() becomes the new object
        o = MP_OBJ_TO_PTR(new_ret);
   161de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   161e0:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // now call Python class __init__ function with all args
    // This method has a chance to call super().__init__() to construct a
    // possible native base class.
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   161e2:	2300      	movs	r3, #0
   161e4:	633b      	str	r3, [r7, #48]	; 0x30
   161e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   161e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lookup.obj = o;
   161ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   161ec:	61bb      	str	r3, [r7, #24]
    lookup.attr = MP_QSTR___init__;
   161ee:	2313      	movs	r3, #19
   161f0:	61fb      	str	r3, [r7, #28]
    lookup.meth_offset = 0;
   161f2:	2300      	movs	r3, #0
   161f4:	623b      	str	r3, [r7, #32]
    mp_obj_class_lookup(&lookup, self);
   161f6:	f107 0318 	add.w	r3, r7, #24
   161fa:	68f9      	ldr	r1, [r7, #12]
   161fc:	4618      	mov	r0, r3
   161fe:	f7ff fdc5 	bl	15d8c <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   16202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16204:	2b00      	cmp	r3, #0
   16206:	d03b      	beq.n	16280 <mp_obj_instance_make_new+0x190>
        mp_obj_t init_ret;
        if (n_args == 0 && n_kw == 0) {
   16208:	68bb      	ldr	r3, [r7, #8]
   1620a:	2b00      	cmp	r3, #0
   1620c:	d10b      	bne.n	16226 <mp_obj_instance_make_new+0x136>
   1620e:	687b      	ldr	r3, [r7, #4]
   16210:	2b00      	cmp	r3, #0
   16212:	d108      	bne.n	16226 <mp_obj_instance_make_new+0x136>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   16214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16218:	461a      	mov	r2, r3
   1621a:	2100      	movs	r1, #0
   1621c:	2000      	movs	r0, #0
   1621e:	f7f5 fdad 	bl	bd7c <mp_call_method_n_kw>
   16222:	63f8      	str	r0, [r7, #60]	; 0x3c
   16224:	e025      	b.n	16272 <mp_obj_instance_make_new+0x182>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   16226:	687b      	ldr	r3, [r7, #4]
   16228:	005a      	lsls	r2, r3, #1
   1622a:	68bb      	ldr	r3, [r7, #8]
   1622c:	4413      	add	r3, r2
   1622e:	3302      	adds	r3, #2
   16230:	009b      	lsls	r3, r3, #2
   16232:	4618      	mov	r0, r3
   16234:	f7ea f872 	bl	31c <m_malloc>
   16238:	6378      	str	r0, [r7, #52]	; 0x34
            args2[0] = init_fn[0];
   1623a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1623e:	601a      	str	r2, [r3, #0]
            args2[1] = init_fn[1];
   16240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16242:	3304      	adds	r3, #4
   16244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16246:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   16248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1624a:	f103 0008 	add.w	r0, r3, #8
   1624e:	687b      	ldr	r3, [r7, #4]
   16250:	005a      	lsls	r2, r3, #1
   16252:	68bb      	ldr	r3, [r7, #8]
   16254:	4413      	add	r3, r2
   16256:	009b      	lsls	r3, r3, #2
   16258:	461a      	mov	r2, r3
   1625a:	6839      	ldr	r1, [r7, #0]
   1625c:	f006 f980 	bl	1c560 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   16260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16262:	6879      	ldr	r1, [r7, #4]
   16264:	68b8      	ldr	r0, [r7, #8]
   16266:	f7f5 fd89 	bl	bd7c <mp_call_method_n_kw>
   1626a:	63f8      	str	r0, [r7, #60]	; 0x3c
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   1626c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1626e:	f7ea f8b3 	bl	3d8 <m_free>
        }
        if (init_ret != mp_const_none) {
   16272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16274:	4a12      	ldr	r2, [pc, #72]	; (162c0 <mp_obj_instance_make_new+0x1d0>)
   16276:	4293      	cmp	r3, r2
   16278:	d002      	beq.n	16280 <mp_obj_instance_make_new+0x190>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("__init__() should return None");
   1627a:	4812      	ldr	r0, [pc, #72]	; (162c4 <mp_obj_instance_make_new+0x1d4>)
   1627c:	f7f6 fe1e 	bl	cebc <mp_raise_TypeError>

    }

    // If the type had a native base that was not explicitly initialised
    // (constructed) by the Python __init__() method then construct it now.
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   16280:	697b      	ldr	r3, [r7, #20]
   16282:	2b00      	cmp	r3, #0
   16284:	d00e      	beq.n	162a4 <mp_obj_instance_make_new+0x1b4>
   16286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16288:	691b      	ldr	r3, [r3, #16]
   1628a:	4a0f      	ldr	r2, [pc, #60]	; (162c8 <mp_obj_instance_make_new+0x1d8>)
   1628c:	4293      	cmp	r3, r2
   1628e:	d109      	bne.n	162a4 <mp_obj_instance_make_new+0x1b4>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   16290:	697b      	ldr	r3, [r7, #20]
   16292:	68dc      	ldr	r4, [r3, #12]
   16294:	6978      	ldr	r0, [r7, #20]
   16296:	683b      	ldr	r3, [r7, #0]
   16298:	687a      	ldr	r2, [r7, #4]
   1629a:	68b9      	ldr	r1, [r7, #8]
   1629c:	47a0      	blx	r4
   1629e:	4602      	mov	r2, r0
   162a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   162a2:	611a      	str	r2, [r3, #16]
    }

    return MP_OBJ_FROM_PTR(o);
   162a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   162a6:	4618      	mov	r0, r3
   162a8:	374c      	adds	r7, #76	; 0x4c
   162aa:	46bd      	mov	sp, r7
   162ac:	bd90      	pop	{r4, r7, pc}
   162ae:	bf00      	nop
   162b0:	000160f1 	.word	0x000160f1
   162b4:	0002362c 	.word	0x0002362c
   162b8:	00023a48 	.word	0x00023a48
   162bc:	00023570 	.word	0x00023570
   162c0:	00022b54 	.word	0x00022b54
   162c4:	0002364c 	.word	0x0002364c
   162c8:	00023584 	.word	0x00023584

000162cc <instance_unary_op>:
    #if MICROPY_PY_SYS_GETSIZEOF
    [MP_UNARY_OP_SIZEOF] = MP_QSTR___sizeof__,
    #endif
};

STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   162cc:	b580      	push	{r7, lr}
   162ce:	b08c      	sub	sp, #48	; 0x30
   162d0:	af00      	add	r7, sp, #0
   162d2:	6078      	str	r0, [r7, #4]
   162d4:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   162d6:	683b      	ldr	r3, [r7, #0]
   162d8:	62bb      	str	r3, [r7, #40]	; 0x28
            + sizeof(*self->members.table) * self->members.alloc;
        return MP_OBJ_NEW_SMALL_INT(sz);
    }
    #endif

    qstr op_name = mp_unary_op_method_name[op];
   162da:	4a2c      	ldr	r2, [pc, #176]	; (1638c <instance_unary_op+0xc0>)
   162dc:	687b      	ldr	r3, [r7, #4]
   162de:	4413      	add	r3, r2
   162e0:	781b      	ldrb	r3, [r3, #0]
   162e2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t member[2] = {MP_OBJ_NULL};
   162e4:	f107 031c 	add.w	r3, r7, #28
   162e8:	2200      	movs	r2, #0
   162ea:	601a      	str	r2, [r3, #0]
   162ec:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   162ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   162f0:	60bb      	str	r3, [r7, #8]
   162f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   162f4:	60fb      	str	r3, [r7, #12]
   162f6:	2314      	movs	r3, #20
   162f8:	613b      	str	r3, [r7, #16]
   162fa:	f107 031c 	add.w	r3, r7, #28
   162fe:	617b      	str	r3, [r7, #20]
   16300:	2300      	movs	r3, #0
   16302:	763b      	strb	r3, [r7, #24]
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, unary_op),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16304:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16306:	681a      	ldr	r2, [r3, #0]
   16308:	f107 0308 	add.w	r3, r7, #8
   1630c:	4611      	mov	r1, r2
   1630e:	4618      	mov	r0, r3
   16310:	f7ff fd3c 	bl	15d8c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16314:	69fb      	ldr	r3, [r7, #28]
   16316:	2b08      	cmp	r3, #8
   16318:	d107      	bne.n	1632a <instance_unary_op+0x5e>
        return mp_unary_op(op, self->subobj[0]);
   1631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1631c:	691b      	ldr	r3, [r3, #16]
   1631e:	4619      	mov	r1, r3
   16320:	6878      	ldr	r0, [r7, #4]
   16322:	f7f5 f98d 	bl	b640 <mp_unary_op>
   16326:	4603      	mov	r3, r0
   16328:	e02b      	b.n	16382 <instance_unary_op+0xb6>
    } else if (member[0] != MP_OBJ_NULL) {
   1632a:	69fb      	ldr	r3, [r7, #28]
   1632c:	2b00      	cmp	r3, #0
   1632e:	d012      	beq.n	16356 <instance_unary_op+0x8a>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   16330:	69fb      	ldr	r3, [r7, #28]
   16332:	6839      	ldr	r1, [r7, #0]
   16334:	4618      	mov	r0, r3
   16336:	f7f5 fcda 	bl	bcee <mp_call_function_1>
   1633a:	62f8      	str	r0, [r7, #44]	; 0x2c
        // __hash__ must return a small int
        if (op == MP_UNARY_OP_HASH) {
   1633c:	687b      	ldr	r3, [r7, #4]
   1633e:	2b06      	cmp	r3, #6
   16340:	d107      	bne.n	16352 <instance_unary_op+0x86>
            val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   16342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16344:	f7f7 fbe4 	bl	db10 <mp_obj_get_int_truncated>
   16348:	4603      	mov	r3, r0
   1634a:	005b      	lsls	r3, r3, #1
   1634c:	f043 0301 	orr.w	r3, r3, #1
   16350:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        return val;
   16352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16354:	e015      	b.n	16382 <instance_unary_op+0xb6>
    } else {
        if (op == MP_UNARY_OP_HASH) {
   16356:	687b      	ldr	r3, [r7, #4]
   16358:	2b06      	cmp	r3, #6
   1635a:	d111      	bne.n	16380 <instance_unary_op+0xb4>
            lookup.attr = MP_QSTR___eq__;
   1635c:	230a      	movs	r3, #10
   1635e:	60fb      	str	r3, [r7, #12]
            mp_obj_class_lookup(&lookup, self->base.type);
   16360:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16362:	681a      	ldr	r2, [r3, #0]
   16364:	f107 0308 	add.w	r3, r7, #8
   16368:	4611      	mov	r1, r2
   1636a:	4618      	mov	r0, r3
   1636c:	f7ff fd0e 	bl	15d8c <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   16370:	69fb      	ldr	r3, [r7, #28]
   16372:	2b00      	cmp	r3, #0
   16374:	d104      	bne.n	16380 <instance_unary_op+0xb4>
                // https://docs.python.org/3/reference/datamodel.html#object.__hash__
                // "User-defined classes have __eq__() and __hash__() methods by default;
                // with them, all objects compare unequal (except with themselves) and
                // x.__hash__() returns an appropriate value such that x == y implies
                // both that x is y and hash(x) == hash(y)."
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   16376:	683b      	ldr	r3, [r7, #0]
   16378:	005b      	lsls	r3, r3, #1
   1637a:	f043 0301 	orr.w	r3, r3, #1
   1637e:	e000      	b.n	16382 <instance_unary_op+0xb6>
            }
            // "A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None.
            // When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError"
        }

        return MP_OBJ_NULL; // op not supported
   16380:	2300      	movs	r3, #0
    }
}
   16382:	4618      	mov	r0, r3
   16384:	3730      	adds	r7, #48	; 0x30
   16386:	46bd      	mov	sp, r7
   16388:	bd80      	pop	{r7, pc}
   1638a:	bf00      	nop
   1638c:	0002366c 	.word	0x0002366c

00016390 <instance_binary_op>:
    [MP_BINARY_OP_REVERSE_RSHIFT] = MP_QSTR___rrshift__,
    #endif
    #endif
};

STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   16390:	b580      	push	{r7, lr}
   16392:	b090      	sub	sp, #64	; 0x40
   16394:	af00      	add	r7, sp, #0
   16396:	60f8      	str	r0, [r7, #12]
   16398:	60b9      	str	r1, [r7, #8]
   1639a:	607a      	str	r2, [r7, #4]
    // Note: For ducktyping, CPython does not look in the instance members or use
    // __getattr__ or __getattribute__.  It only looks in the class dictionary.
    mp_obj_instance_t *lhs = MP_OBJ_TO_PTR(lhs_in);
   1639c:	68bb      	ldr	r3, [r7, #8]
   1639e:	63bb      	str	r3, [r7, #56]	; 0x38
retry:;
    qstr op_name = mp_binary_op_method_name[op];
   163a0:	4a24      	ldr	r2, [pc, #144]	; (16434 <instance_binary_op+0xa4>)
   163a2:	68fb      	ldr	r3, [r7, #12]
   163a4:	4413      	add	r3, r2
   163a6:	781b      	ldrb	r3, [r3, #0]
   163a8:	637b      	str	r3, [r7, #52]	; 0x34
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   163aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
   163ae:	2200      	movs	r2, #0
   163b0:	601a      	str	r2, [r3, #0]
   163b2:	605a      	str	r2, [r3, #4]
   163b4:	609a      	str	r2, [r3, #8]
    struct class_lookup_data lookup = {
   163b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   163b8:	617b      	str	r3, [r7, #20]
   163ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163bc:	61bb      	str	r3, [r7, #24]
   163be:	2318      	movs	r3, #24
   163c0:	61fb      	str	r3, [r7, #28]
   163c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
   163c6:	623b      	str	r3, [r7, #32]
   163c8:	2300      	movs	r3, #0
   163ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, binary_op),
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, lhs->base.type);
   163ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   163d0:	681a      	ldr	r2, [r3, #0]
   163d2:	f107 0314 	add.w	r3, r7, #20
   163d6:	4611      	mov	r1, r2
   163d8:	4618      	mov	r0, r3
   163da:	f7ff fcd7 	bl	15d8c <mp_obj_class_lookup>

    mp_obj_t res;
    if (dest[0] == MP_OBJ_SENTINEL) {
   163de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   163e0:	2b08      	cmp	r3, #8
   163e2:	d108      	bne.n	163f6 <instance_binary_op+0x66>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   163e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   163e6:	691b      	ldr	r3, [r3, #16]
   163e8:	687a      	ldr	r2, [r7, #4]
   163ea:	4619      	mov	r1, r3
   163ec:	68f8      	ldr	r0, [r7, #12]
   163ee:	f7f5 fa0d 	bl	b80c <mp_binary_op>
   163f2:	63f8      	str	r0, [r7, #60]	; 0x3c
   163f4:	e019      	b.n	1642a <instance_binary_op+0x9a>
    } else if (dest[0] != MP_OBJ_NULL) {
   163f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   163f8:	2b00      	cmp	r3, #0
   163fa:	d00a      	beq.n	16412 <instance_binary_op+0x82>
        dest[2] = rhs_in;
   163fc:	687b      	ldr	r3, [r7, #4]
   163fe:	633b      	str	r3, [r7, #48]	; 0x30
        res = mp_call_method_n_kw(1, 0, dest);
   16400:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16404:	461a      	mov	r2, r3
   16406:	2100      	movs	r1, #0
   16408:	2001      	movs	r0, #1
   1640a:	f7f5 fcb7 	bl	bd7c <mp_call_method_n_kw>
   1640e:	63f8      	str	r0, [r7, #60]	; 0x3c
   16410:	e00b      	b.n	1642a <instance_binary_op+0x9a>
    } else {
        // If this was an inplace method, fallback to normal method
        // https://docs.python.org/3/reference/datamodel.html#object.__iadd__ :
        // "If a specific method is not defined, the augmented assignment
        // falls back to the normal methods."
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   16412:	68fb      	ldr	r3, [r7, #12]
   16414:	2b08      	cmp	r3, #8
   16416:	d906      	bls.n	16426 <instance_binary_op+0x96>
   16418:	68fb      	ldr	r3, [r7, #12]
   1641a:	2b14      	cmp	r3, #20
   1641c:	d803      	bhi.n	16426 <instance_binary_op+0x96>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   1641e:	68fb      	ldr	r3, [r7, #12]
   16420:	330c      	adds	r3, #12
   16422:	60fb      	str	r3, [r7, #12]
            goto retry;
   16424:	e7bc      	b.n	163a0 <instance_binary_op+0x10>
        }
        return MP_OBJ_NULL; // op not supported
   16426:	2300      	movs	r3, #0
   16428:	e000      	b.n	1642c <instance_binary_op+0x9c>
    if (res == mp_const_notimplemented) {
        return MP_OBJ_NULL; // op not supported
    }
    #endif

    return res;
   1642a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1642c:	4618      	mov	r0, r3
   1642e:	3740      	adds	r7, #64	; 0x40
   16430:	46bd      	mov	sp, r7
   16432:	bd80      	pop	{r7, pc}
   16434:	00023678 	.word	0x00023678

00016438 <mp_obj_instance_load_attr>:

STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16438:	b580      	push	{r7, lr}
   1643a:	b090      	sub	sp, #64	; 0x40
   1643c:	af00      	add	r7, sp, #0
   1643e:	60f8      	str	r0, [r7, #12]
   16440:	60b9      	str	r1, [r7, #8]
   16442:	607a      	str	r2, [r7, #4]
    // logic: look in instance members then class locals
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   16444:	68f8      	ldr	r0, [r7, #12]
   16446:	f7f7 f94f 	bl	d6e8 <mp_obj_get_type>
   1644a:	4603      	mov	r3, r0
   1644c:	68db      	ldr	r3, [r3, #12]
   1644e:	4a2f      	ldr	r2, [pc, #188]	; (1650c <mp_obj_instance_load_attr+0xd4>)
   16450:	4293      	cmp	r3, r2
   16452:	d006      	beq.n	16462 <mp_obj_instance_load_attr+0x2a>
   16454:	4b2e      	ldr	r3, [pc, #184]	; (16510 <mp_obj_instance_load_attr+0xd8>)
   16456:	4a2f      	ldr	r2, [pc, #188]	; (16514 <mp_obj_instance_load_attr+0xdc>)
   16458:	f240 2135 	movw	r1, #565	; 0x235
   1645c:	482e      	ldr	r0, [pc, #184]	; (16518 <mp_obj_instance_load_attr+0xe0>)
   1645e:	f004 fec1 	bl	1b1e4 <__assert_func>
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16462:	68fb      	ldr	r3, [r7, #12]
   16464:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   16466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16468:	1d18      	adds	r0, r3, #4
   1646a:	68bb      	ldr	r3, [r7, #8]
   1646c:	009b      	lsls	r3, r3, #2
   1646e:	f043 0302 	orr.w	r3, r3, #2
   16472:	2200      	movs	r2, #0
   16474:	4619      	mov	r1, r3
   16476:	f7f6 ff8d 	bl	d394 <mp_map_lookup>
   1647a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (elem != NULL) {
   1647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1647e:	2b00      	cmp	r3, #0
   16480:	d004      	beq.n	1648c <mp_obj_instance_load_attr+0x54>
        // object member, always treated as a value
        dest[0] = elem->value;
   16482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16484:	685a      	ldr	r2, [r3, #4]
   16486:	687b      	ldr	r3, [r7, #4]
   16488:	601a      	str	r2, [r3, #0]
        return;
   1648a:	e03b      	b.n	16504 <mp_obj_instance_load_attr+0xcc>
        }
        dest[0] = attr_dict;
        return;
    }
#endif
    struct class_lookup_data lookup = {
   1648c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1648e:	623b      	str	r3, [r7, #32]
   16490:	68bb      	ldr	r3, [r7, #8]
   16492:	627b      	str	r3, [r7, #36]	; 0x24
   16494:	2300      	movs	r3, #0
   16496:	62bb      	str	r3, [r7, #40]	; 0x28
   16498:	687b      	ldr	r3, [r7, #4]
   1649a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1649c:	2300      	movs	r3, #0
   1649e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        .attr = attr,
        .meth_offset = 0,
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   164a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   164a4:	681a      	ldr	r2, [r3, #0]
   164a6:	f107 0320 	add.w	r3, r7, #32
   164aa:	4611      	mov	r1, r2
   164ac:	4618      	mov	r0, r3
   164ae:	f7ff fc6d 	bl	15d8c <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   164b2:	687b      	ldr	r3, [r7, #4]
   164b4:	681b      	ldr	r3, [r3, #0]
   164b6:	637b      	str	r3, [r7, #52]	; 0x34
    if (member != MP_OBJ_NULL) {
   164b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   164ba:	2b00      	cmp	r3, #0
   164bc:	d006      	beq.n	164cc <mp_obj_instance_load_attr+0x94>
        if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   164be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   164c0:	681b      	ldr	r3, [r3, #0]
   164c2:	889b      	ldrh	r3, [r3, #4]
   164c4:	f003 0302 	and.w	r3, r3, #2
   164c8:	2b00      	cmp	r3, #0
            attr_get_method[2] = self_in;
            attr_get_method[3] = MP_OBJ_FROM_PTR(mp_obj_get_type(self_in));
            dest[0] = mp_call_method_n_kw(2, 0, attr_get_method);
        }
        #endif
        return;
   164ca:	e01b      	b.n	16504 <mp_obj_instance_load_attr+0xcc>
    }

    // try __getattr__
    if (attr != MP_QSTR___getattr__) {
   164cc:	68bb      	ldr	r3, [r7, #8]
   164ce:	2b0d      	cmp	r3, #13
   164d0:	d018      	beq.n	16504 <mp_obj_instance_load_attr+0xcc>
            return;
        }
        #endif

        mp_obj_t dest2[3];
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   164d2:	f107 0314 	add.w	r3, r7, #20
   164d6:	461a      	mov	r2, r3
   164d8:	210d      	movs	r1, #13
   164da:	68f8      	ldr	r0, [r7, #12]
   164dc:	f7f6 f8c6 	bl	c66c <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   164e0:	697b      	ldr	r3, [r7, #20]
   164e2:	2b00      	cmp	r3, #0
   164e4:	d00e      	beq.n	16504 <mp_obj_instance_load_attr+0xcc>
            // __getattr__ exists, call it and return its result
            // XXX if this fails to load the requested attr, should we catch the attribute error and return silently?
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   164e6:	68bb      	ldr	r3, [r7, #8]
   164e8:	009b      	lsls	r3, r3, #2
   164ea:	f043 0302 	orr.w	r3, r3, #2
   164ee:	61fb      	str	r3, [r7, #28]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   164f0:	f107 0314 	add.w	r3, r7, #20
   164f4:	461a      	mov	r2, r3
   164f6:	2100      	movs	r1, #0
   164f8:	2001      	movs	r0, #1
   164fa:	f7f5 fc3f 	bl	bd7c <mp_call_method_n_kw>
   164fe:	4602      	mov	r2, r0
   16500:	687b      	ldr	r3, [r7, #4]
   16502:	601a      	str	r2, [r3, #0]
            return;
        }
    }
}
   16504:	3740      	adds	r7, #64	; 0x40
   16506:	46bd      	mov	sp, r7
   16508:	bd80      	pop	{r7, pc}
   1650a:	bf00      	nop
   1650c:	000160f1 	.word	0x000160f1
   16510:	0002369c 	.word	0x0002369c
   16514:	00023a64 	.word	0x00023a64
   16518:	00023570 	.word	0x00023570

0001651c <mp_obj_instance_store_attr>:

STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   1651c:	b580      	push	{r7, lr}
   1651e:	b086      	sub	sp, #24
   16520:	af00      	add	r7, sp, #0
   16522:	60f8      	str	r0, [r7, #12]
   16524:	60b9      	str	r1, [r7, #8]
   16526:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16528:	68fb      	ldr	r3, [r7, #12]
   1652a:	617b      	str	r3, [r7, #20]

    if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   1652c:	697b      	ldr	r3, [r7, #20]
   1652e:	681b      	ldr	r3, [r3, #0]
   16530:	889b      	ldrh	r3, [r3, #4]
   16532:	f003 0302 	and.w	r3, r3, #2
   16536:	2b00      	cmp	r3, #0
    }
    #endif

skip_special_accessors:

    if (value == MP_OBJ_NULL) {
   16538:	687b      	ldr	r3, [r7, #4]
   1653a:	2b00      	cmp	r3, #0
   1653c:	d111      	bne.n	16562 <mp_obj_instance_store_attr+0x46>
        // delete attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   1653e:	697b      	ldr	r3, [r7, #20]
   16540:	1d18      	adds	r0, r3, #4
   16542:	68bb      	ldr	r3, [r7, #8]
   16544:	009b      	lsls	r3, r3, #2
   16546:	f043 0302 	orr.w	r3, r3, #2
   1654a:	2202      	movs	r2, #2
   1654c:	4619      	mov	r1, r3
   1654e:	f7f6 ff21 	bl	d394 <mp_map_lookup>
   16552:	6138      	str	r0, [r7, #16]
        return elem != NULL;
   16554:	693b      	ldr	r3, [r7, #16]
   16556:	2b00      	cmp	r3, #0
   16558:	bf14      	ite	ne
   1655a:	2301      	movne	r3, #1
   1655c:	2300      	moveq	r3, #0
   1655e:	b2db      	uxtb	r3, r3
   16560:	e00d      	b.n	1657e <mp_obj_instance_store_attr+0x62>
    } else {
        // store attribute
        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   16562:	697b      	ldr	r3, [r7, #20]
   16564:	1d18      	adds	r0, r3, #4
   16566:	68bb      	ldr	r3, [r7, #8]
   16568:	009b      	lsls	r3, r3, #2
   1656a:	f043 0302 	orr.w	r3, r3, #2
   1656e:	2201      	movs	r2, #1
   16570:	4619      	mov	r1, r3
   16572:	f7f6 ff0f 	bl	d394 <mp_map_lookup>
   16576:	4602      	mov	r2, r0
   16578:	687b      	ldr	r3, [r7, #4]
   1657a:	6053      	str	r3, [r2, #4]
        return true;
   1657c:	2301      	movs	r3, #1
    }
}
   1657e:	4618      	mov	r0, r3
   16580:	3718      	adds	r7, #24
   16582:	46bd      	mov	sp, r7
   16584:	bd80      	pop	{r7, pc}

00016586 <mp_obj_instance_attr>:

STATIC void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16586:	b580      	push	{r7, lr}
   16588:	b084      	sub	sp, #16
   1658a:	af00      	add	r7, sp, #0
   1658c:	60f8      	str	r0, [r7, #12]
   1658e:	60b9      	str	r1, [r7, #8]
   16590:	607a      	str	r2, [r7, #4]
    if (dest[0] == MP_OBJ_NULL) {
   16592:	687b      	ldr	r3, [r7, #4]
   16594:	681b      	ldr	r3, [r3, #0]
   16596:	2b00      	cmp	r3, #0
   16598:	d105      	bne.n	165a6 <mp_obj_instance_attr+0x20>
        mp_obj_instance_load_attr(self_in, attr, dest);
   1659a:	687a      	ldr	r2, [r7, #4]
   1659c:	68b9      	ldr	r1, [r7, #8]
   1659e:	68f8      	ldr	r0, [r7, #12]
   165a0:	f7ff ff4a 	bl	16438 <mp_obj_instance_load_attr>
    } else {
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
            dest[0] = MP_OBJ_NULL; // indicate success
        }
    }
}
   165a4:	e00d      	b.n	165c2 <mp_obj_instance_attr+0x3c>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   165a6:	687b      	ldr	r3, [r7, #4]
   165a8:	3304      	adds	r3, #4
   165aa:	681b      	ldr	r3, [r3, #0]
   165ac:	461a      	mov	r2, r3
   165ae:	68b9      	ldr	r1, [r7, #8]
   165b0:	68f8      	ldr	r0, [r7, #12]
   165b2:	f7ff ffb3 	bl	1651c <mp_obj_instance_store_attr>
   165b6:	4603      	mov	r3, r0
   165b8:	2b00      	cmp	r3, #0
   165ba:	d002      	beq.n	165c2 <mp_obj_instance_attr+0x3c>
            dest[0] = MP_OBJ_NULL; // indicate success
   165bc:	687b      	ldr	r3, [r7, #4]
   165be:	2200      	movs	r2, #0
   165c0:	601a      	str	r2, [r3, #0]
}
   165c2:	bf00      	nop
   165c4:	3710      	adds	r7, #16
   165c6:	46bd      	mov	sp, r7
   165c8:	bd80      	pop	{r7, pc}

000165ca <instance_subscr>:

STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   165ca:	b580      	push	{r7, lr}
   165cc:	b092      	sub	sp, #72	; 0x48
   165ce:	af00      	add	r7, sp, #0
   165d0:	60f8      	str	r0, [r7, #12]
   165d2:	60b9      	str	r1, [r7, #8]
   165d4:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   165d6:	68fb      	ldr	r3, [r7, #12]
   165d8:	643b      	str	r3, [r7, #64]	; 0x40
    mp_obj_t member[2] = {MP_OBJ_NULL};
   165da:	f107 0334 	add.w	r3, r7, #52	; 0x34
   165de:	2200      	movs	r2, #0
   165e0:	601a      	str	r2, [r3, #0]
   165e2:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   165e4:	f107 0320 	add.w	r3, r7, #32
   165e8:	2200      	movs	r2, #0
   165ea:	601a      	str	r2, [r3, #0]
   165ec:	605a      	str	r2, [r3, #4]
   165ee:	609a      	str	r2, [r3, #8]
   165f0:	60da      	str	r2, [r3, #12]
   165f2:	611a      	str	r2, [r3, #16]
   165f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   165f6:	623b      	str	r3, [r7, #32]
   165f8:	2320      	movs	r3, #32
   165fa:	62bb      	str	r3, [r7, #40]	; 0x28
   165fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
   16600:	62fb      	str	r3, [r7, #44]	; 0x2c
        .meth_offset = offsetof(mp_obj_type_t, subscr),
        .dest = member,
        .is_type = false,
    };
    size_t meth_args;
    if (value == MP_OBJ_NULL) {
   16602:	687b      	ldr	r3, [r7, #4]
   16604:	2b00      	cmp	r3, #0
   16606:	d10c      	bne.n	16622 <instance_subscr+0x58>
        // delete item
        lookup.attr = MP_QSTR___delitem__;
   16608:	2308      	movs	r3, #8
   1660a:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   1660c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1660e:	681a      	ldr	r2, [r3, #0]
   16610:	f107 0320 	add.w	r3, r7, #32
   16614:	4611      	mov	r1, r2
   16616:	4618      	mov	r0, r3
   16618:	f7ff fbb8 	bl	15d8c <mp_obj_class_lookup>
        meth_args = 2;
   1661c:	2302      	movs	r3, #2
   1661e:	647b      	str	r3, [r7, #68]	; 0x44
   16620:	e01b      	b.n	1665a <instance_subscr+0x90>
    } else if (value == MP_OBJ_SENTINEL) {
   16622:	687b      	ldr	r3, [r7, #4]
   16624:	2b08      	cmp	r3, #8
   16626:	d10c      	bne.n	16642 <instance_subscr+0x78>
        // load item
        lookup.attr = MP_QSTR___getitem__;
   16628:	230e      	movs	r3, #14
   1662a:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   1662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1662e:	681a      	ldr	r2, [r3, #0]
   16630:	f107 0320 	add.w	r3, r7, #32
   16634:	4611      	mov	r1, r2
   16636:	4618      	mov	r0, r3
   16638:	f7ff fba8 	bl	15d8c <mp_obj_class_lookup>
        meth_args = 2;
   1663c:	2302      	movs	r3, #2
   1663e:	647b      	str	r3, [r7, #68]	; 0x44
   16640:	e00b      	b.n	1665a <instance_subscr+0x90>
    } else {
        // store item
        lookup.attr = MP_QSTR___setitem__;
   16642:	2322      	movs	r3, #34	; 0x22
   16644:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   16646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16648:	681a      	ldr	r2, [r3, #0]
   1664a:	f107 0320 	add.w	r3, r7, #32
   1664e:	4611      	mov	r1, r2
   16650:	4618      	mov	r0, r3
   16652:	f7ff fb9b 	bl	15d8c <mp_obj_class_lookup>
        meth_args = 3;
   16656:	2303      	movs	r3, #3
   16658:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (member[0] == MP_OBJ_SENTINEL) {
   1665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1665c:	2b08      	cmp	r3, #8
   1665e:	d108      	bne.n	16672 <instance_subscr+0xa8>
        return mp_obj_subscr(self->subobj[0], index, value);
   16660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16662:	691b      	ldr	r3, [r3, #16]
   16664:	687a      	ldr	r2, [r7, #4]
   16666:	68b9      	ldr	r1, [r7, #8]
   16668:	4618      	mov	r0, r3
   1666a:	f7f7 fbdd 	bl	de28 <mp_obj_subscr>
   1666e:	4603      	mov	r3, r0
   16670:	e018      	b.n	166a4 <instance_subscr+0xda>
    } else if (member[0] != MP_OBJ_NULL) {
   16672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16674:	2b00      	cmp	r3, #0
   16676:	d014      	beq.n	166a2 <instance_subscr+0xd8>
        mp_obj_t args[3] = {self_in, index, value};
   16678:	68fb      	ldr	r3, [r7, #12]
   1667a:	617b      	str	r3, [r7, #20]
   1667c:	68bb      	ldr	r3, [r7, #8]
   1667e:	61bb      	str	r3, [r7, #24]
   16680:	687b      	ldr	r3, [r7, #4]
   16682:	61fb      	str	r3, [r7, #28]
        // TODO probably need to call mp_convert_member_lookup, and use mp_call_method_n_kw
        mp_obj_t ret = mp_call_function_n_kw(member[0], meth_args, 0, args);
   16684:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16686:	f107 0314 	add.w	r3, r7, #20
   1668a:	2200      	movs	r2, #0
   1668c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1668e:	f7f5 fb54 	bl	bd3a <mp_call_function_n_kw>
   16692:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (value == MP_OBJ_SENTINEL) {
   16694:	687b      	ldr	r3, [r7, #4]
   16696:	2b08      	cmp	r3, #8
   16698:	d101      	bne.n	1669e <instance_subscr+0xd4>
            return ret;
   1669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1669c:	e002      	b.n	166a4 <instance_subscr+0xda>
        } else {
            return mp_const_none;
   1669e:	4b03      	ldr	r3, [pc, #12]	; (166ac <instance_subscr+0xe2>)
   166a0:	e000      	b.n	166a4 <instance_subscr+0xda>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   166a2:	2300      	movs	r3, #0
    }
}
   166a4:	4618      	mov	r0, r3
   166a6:	3748      	adds	r7, #72	; 0x48
   166a8:	46bd      	mov	sp, r7
   166aa:	bd80      	pop	{r7, pc}
   166ac:	00022b54 	.word	0x00022b54

000166b0 <mp_obj_instance_get_call>:

STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   166b0:	b580      	push	{r7, lr}
   166b2:	b088      	sub	sp, #32
   166b4:	af00      	add	r7, sp, #0
   166b6:	6078      	str	r0, [r7, #4]
   166b8:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   166ba:	687b      	ldr	r3, [r7, #4]
   166bc:	61fb      	str	r3, [r7, #28]
    struct class_lookup_data lookup = {
   166be:	69fb      	ldr	r3, [r7, #28]
   166c0:	60bb      	str	r3, [r7, #8]
   166c2:	2305      	movs	r3, #5
   166c4:	60fb      	str	r3, [r7, #12]
   166c6:	2310      	movs	r3, #16
   166c8:	613b      	str	r3, [r7, #16]
   166ca:	683b      	ldr	r3, [r7, #0]
   166cc:	617b      	str	r3, [r7, #20]
   166ce:	2300      	movs	r3, #0
   166d0:	763b      	strb	r3, [r7, #24]
        .attr = MP_QSTR___call__,
        .meth_offset = offsetof(mp_obj_type_t, call),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   166d2:	69fb      	ldr	r3, [r7, #28]
   166d4:	681a      	ldr	r2, [r3, #0]
   166d6:	f107 0308 	add.w	r3, r7, #8
   166da:	4611      	mov	r1, r2
   166dc:	4618      	mov	r0, r3
   166de:	f7ff fb55 	bl	15d8c <mp_obj_class_lookup>
    return member[0];
   166e2:	683b      	ldr	r3, [r7, #0]
   166e4:	681b      	ldr	r3, [r3, #0]
}
   166e6:	4618      	mov	r0, r3
   166e8:	3720      	adds	r7, #32
   166ea:	46bd      	mov	sp, r7
   166ec:	bd80      	pop	{r7, pc}

000166ee <mp_obj_instance_is_callable>:

bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   166ee:	b580      	push	{r7, lr}
   166f0:	b084      	sub	sp, #16
   166f2:	af00      	add	r7, sp, #0
   166f4:	6078      	str	r0, [r7, #4]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   166f6:	2300      	movs	r3, #0
   166f8:	60bb      	str	r3, [r7, #8]
   166fa:	2300      	movs	r3, #0
   166fc:	60fb      	str	r3, [r7, #12]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   166fe:	f107 0308 	add.w	r3, r7, #8
   16702:	4619      	mov	r1, r3
   16704:	6878      	ldr	r0, [r7, #4]
   16706:	f7ff ffd3 	bl	166b0 <mp_obj_instance_get_call>
   1670a:	4603      	mov	r3, r0
   1670c:	2b00      	cmp	r3, #0
   1670e:	bf14      	ite	ne
   16710:	2301      	movne	r3, #1
   16712:	2300      	moveq	r3, #0
   16714:	b2db      	uxtb	r3, r3
}
   16716:	4618      	mov	r0, r3
   16718:	3710      	adds	r7, #16
   1671a:	46bd      	mov	sp, r7
   1671c:	bd80      	pop	{r7, pc}

0001671e <mp_obj_instance_call>:

mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1671e:	b580      	push	{r7, lr}
   16720:	b08a      	sub	sp, #40	; 0x28
   16722:	af02      	add	r7, sp, #8
   16724:	60f8      	str	r0, [r7, #12]
   16726:	60b9      	str	r1, [r7, #8]
   16728:	607a      	str	r2, [r7, #4]
   1672a:	603b      	str	r3, [r7, #0]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   1672c:	2300      	movs	r3, #0
   1672e:	613b      	str	r3, [r7, #16]
   16730:	2300      	movs	r3, #0
   16732:	617b      	str	r3, [r7, #20]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   16734:	f107 0310 	add.w	r3, r7, #16
   16738:	4619      	mov	r1, r3
   1673a:	68f8      	ldr	r0, [r7, #12]
   1673c:	f7ff ffb8 	bl	166b0 <mp_obj_instance_get_call>
   16740:	61f8      	str	r0, [r7, #28]
    if (call == MP_OBJ_NULL) {
   16742:	69fb      	ldr	r3, [r7, #28]
   16744:	2b00      	cmp	r3, #0
   16746:	d102      	bne.n	1674e <mp_obj_instance_call+0x30>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object not callable");
   16748:	480e      	ldr	r0, [pc, #56]	; (16784 <mp_obj_instance_call+0x66>)
   1674a:	f7f6 fbb7 	bl	cebc <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not callable", mp_obj_get_type_str(self_in)));
        }
    }
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1674e:	68fb      	ldr	r3, [r7, #12]
   16750:	61bb      	str	r3, [r7, #24]
    if (call == MP_OBJ_SENTINEL) {
   16752:	69fb      	ldr	r3, [r7, #28]
   16754:	2b08      	cmp	r3, #8
   16756:	d108      	bne.n	1676a <mp_obj_instance_call+0x4c>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   16758:	69bb      	ldr	r3, [r7, #24]
   1675a:	6918      	ldr	r0, [r3, #16]
   1675c:	683b      	ldr	r3, [r7, #0]
   1675e:	687a      	ldr	r2, [r7, #4]
   16760:	68b9      	ldr	r1, [r7, #8]
   16762:	f7f5 faea 	bl	bd3a <mp_call_function_n_kw>
   16766:	4603      	mov	r3, r0
   16768:	e008      	b.n	1677c <mp_obj_instance_call+0x5e>
    }

    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   1676a:	6938      	ldr	r0, [r7, #16]
   1676c:	6979      	ldr	r1, [r7, #20]
   1676e:	683b      	ldr	r3, [r7, #0]
   16770:	9300      	str	r3, [sp, #0]
   16772:	687b      	ldr	r3, [r7, #4]
   16774:	68ba      	ldr	r2, [r7, #8]
   16776:	f7f7 fc79 	bl	e06c <mp_call_method_self_n_kw>
   1677a:	4603      	mov	r3, r0
}
   1677c:	4618      	mov	r0, r3
   1677e:	3720      	adds	r7, #32
   16780:	46bd      	mov	sp, r7
   16782:	bd80      	pop	{r7, pc}
   16784:	000236d0 	.word	0x000236d0

00016788 <instance_getiter>:

STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   16788:	b580      	push	{r7, lr}
   1678a:	b08c      	sub	sp, #48	; 0x30
   1678c:	af00      	add	r7, sp, #0
   1678e:	6078      	str	r0, [r7, #4]
   16790:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16792:	687b      	ldr	r3, [r7, #4]
   16794:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16796:	f107 0320 	add.w	r3, r7, #32
   1679a:	2200      	movs	r2, #0
   1679c:	601a      	str	r2, [r3, #0]
   1679e:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   167a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167a2:	60fb      	str	r3, [r7, #12]
   167a4:	2315      	movs	r3, #21
   167a6:	613b      	str	r3, [r7, #16]
   167a8:	2324      	movs	r3, #36	; 0x24
   167aa:	617b      	str	r3, [r7, #20]
   167ac:	f107 0320 	add.w	r3, r7, #32
   167b0:	61bb      	str	r3, [r7, #24]
   167b2:	2300      	movs	r3, #0
   167b4:	773b      	strb	r3, [r7, #28]
        .attr = MP_QSTR___iter__,
        .meth_offset = offsetof(mp_obj_type_t, getiter),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   167b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167b8:	681a      	ldr	r2, [r3, #0]
   167ba:	f107 030c 	add.w	r3, r7, #12
   167be:	4611      	mov	r1, r2
   167c0:	4618      	mov	r0, r3
   167c2:	f7ff fae3 	bl	15d8c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   167c6:	6a3b      	ldr	r3, [r7, #32]
   167c8:	2b00      	cmp	r3, #0
   167ca:	d101      	bne.n	167d0 <instance_getiter+0x48>
        return MP_OBJ_NULL;
   167cc:	2300      	movs	r3, #0
   167ce:	e019      	b.n	16804 <instance_getiter+0x7c>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   167d0:	6a3b      	ldr	r3, [r7, #32]
   167d2:	2b08      	cmp	r3, #8
   167d4:	d10e      	bne.n	167f4 <instance_getiter+0x6c>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   167d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167d8:	691b      	ldr	r3, [r3, #16]
   167da:	4618      	mov	r0, r3
   167dc:	f7f6 ff84 	bl	d6e8 <mp_obj_get_type>
   167e0:	62b8      	str	r0, [r7, #40]	; 0x28
        return type->getiter(self->subobj[0], iter_buf);
   167e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   167e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   167e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   167e8:	6912      	ldr	r2, [r2, #16]
   167ea:	6839      	ldr	r1, [r7, #0]
   167ec:	4610      	mov	r0, r2
   167ee:	4798      	blx	r3
   167f0:	4603      	mov	r3, r0
   167f2:	e007      	b.n	16804 <instance_getiter+0x7c>
    } else {
        return mp_call_method_n_kw(0, 0, member);
   167f4:	f107 0320 	add.w	r3, r7, #32
   167f8:	461a      	mov	r2, r3
   167fa:	2100      	movs	r1, #0
   167fc:	2000      	movs	r0, #0
   167fe:	f7f5 fabd 	bl	bd7c <mp_call_method_n_kw>
   16802:	4603      	mov	r3, r0
    }
}
   16804:	4618      	mov	r0, r3
   16806:	3730      	adds	r7, #48	; 0x30
   16808:	46bd      	mov	sp, r7
   1680a:	bd80      	pop	{r7, pc}

0001680c <instance_get_buffer>:

STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   1680c:	b580      	push	{r7, lr}
   1680e:	b08e      	sub	sp, #56	; 0x38
   16810:	af00      	add	r7, sp, #0
   16812:	60f8      	str	r0, [r7, #12]
   16814:	60b9      	str	r1, [r7, #8]
   16816:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16818:	68fb      	ldr	r3, [r7, #12]
   1681a:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t member[2] = {MP_OBJ_NULL};
   1681c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16820:	2200      	movs	r2, #0
   16822:	601a      	str	r2, [r3, #0]
   16824:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16828:	617b      	str	r3, [r7, #20]
   1682a:	2301      	movs	r3, #1
   1682c:	61bb      	str	r3, [r7, #24]
   1682e:	232c      	movs	r3, #44	; 0x2c
   16830:	61fb      	str	r3, [r7, #28]
   16832:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16836:	623b      	str	r3, [r7, #32]
   16838:	2300      	movs	r3, #0
   1683a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = MP_QSTR_, // don't actually look for a method
        .meth_offset = offsetof(mp_obj_type_t, buffer_p.get_buffer),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   1683e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16840:	681a      	ldr	r2, [r3, #0]
   16842:	f107 0314 	add.w	r3, r7, #20
   16846:	4611      	mov	r1, r2
   16848:	4618      	mov	r0, r3
   1684a:	f7ff fa9f 	bl	15d8c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   1684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16850:	2b08      	cmp	r3, #8
   16852:	d10e      	bne.n	16872 <instance_get_buffer+0x66>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16856:	691b      	ldr	r3, [r3, #16]
   16858:	4618      	mov	r0, r3
   1685a:	f7f6 ff45 	bl	d6e8 <mp_obj_get_type>
   1685e:	6338      	str	r0, [r7, #48]	; 0x30
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   16860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16866:	6910      	ldr	r0, [r2, #16]
   16868:	687a      	ldr	r2, [r7, #4]
   1686a:	68b9      	ldr	r1, [r7, #8]
   1686c:	4798      	blx	r3
   1686e:	4603      	mov	r3, r0
   16870:	e000      	b.n	16874 <instance_get_buffer+0x68>
    } else {
        return 1; // object does not support buffer protocol
   16872:	2301      	movs	r3, #1
    }
}
   16874:	4618      	mov	r0, r3
   16876:	3738      	adds	r7, #56	; 0x38
   16878:	46bd      	mov	sp, r7
   1687a:	bd80      	pop	{r7, pc}

0001687c <type_print>:
    #endif
    return false;
}
#endif

STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1687c:	b580      	push	{r7, lr}
   1687e:	b086      	sub	sp, #24
   16880:	af00      	add	r7, sp, #0
   16882:	60f8      	str	r0, [r7, #12]
   16884:	60b9      	str	r1, [r7, #8]
   16886:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16888:	68bb      	ldr	r3, [r7, #8]
   1688a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<class '%q'>", self->name);
   1688c:	697b      	ldr	r3, [r7, #20]
   1688e:	88db      	ldrh	r3, [r3, #6]
   16890:	461a      	mov	r2, r3
   16892:	4904      	ldr	r1, [pc, #16]	; (168a4 <type_print+0x28>)
   16894:	68f8      	ldr	r0, [r7, #12]
   16896:	f7eb fafb 	bl	1e90 <mp_printf>
}
   1689a:	bf00      	nop
   1689c:	3718      	adds	r7, #24
   1689e:	46bd      	mov	sp, r7
   168a0:	bd80      	pop	{r7, pc}
   168a2:	bf00      	nop
   168a4:	000236e4 	.word	0x000236e4

000168a8 <type_make_new>:

STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   168a8:	b580      	push	{r7, lr}
   168aa:	b086      	sub	sp, #24
   168ac:	af02      	add	r7, sp, #8
   168ae:	60f8      	str	r0, [r7, #12]
   168b0:	60b9      	str	r1, [r7, #8]
   168b2:	607a      	str	r2, [r7, #4]
   168b4:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   168b6:	2300      	movs	r3, #0
   168b8:	9300      	str	r3, [sp, #0]
   168ba:	2303      	movs	r3, #3
   168bc:	2201      	movs	r2, #1
   168be:	6879      	ldr	r1, [r7, #4]
   168c0:	68b8      	ldr	r0, [r7, #8]
   168c2:	f7f6 fb21 	bl	cf08 <mp_arg_check_num>

    switch (n_args) {
   168c6:	68bb      	ldr	r3, [r7, #8]
   168c8:	2b01      	cmp	r3, #1
   168ca:	d002      	beq.n	168d2 <type_make_new+0x2a>
   168cc:	2b03      	cmp	r3, #3
   168ce:	d007      	beq.n	168e0 <type_make_new+0x38>
   168d0:	e016      	b.n	16900 <type_make_new+0x58>
        case 1:
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   168d2:	683b      	ldr	r3, [r7, #0]
   168d4:	681b      	ldr	r3, [r3, #0]
   168d6:	4618      	mov	r0, r3
   168d8:	f7f6 ff06 	bl	d6e8 <mp_obj_get_type>
   168dc:	4603      	mov	r3, r0
   168de:	e012      	b.n	16906 <type_make_new+0x5e>

        case 3:
            // args[0] = name
            // args[1] = bases tuple
            // args[2] = locals dict
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   168e0:	683b      	ldr	r3, [r7, #0]
   168e2:	681b      	ldr	r3, [r3, #0]
   168e4:	4618      	mov	r0, r3
   168e6:	f7fe fc9f 	bl	15228 <mp_obj_str_get_qstr>
   168ea:	683b      	ldr	r3, [r7, #0]
   168ec:	3304      	adds	r3, #4
   168ee:	6819      	ldr	r1, [r3, #0]
   168f0:	683b      	ldr	r3, [r7, #0]
   168f2:	3308      	adds	r3, #8
   168f4:	681b      	ldr	r3, [r3, #0]
   168f6:	461a      	mov	r2, r3
   168f8:	f000 f8b0 	bl	16a5c <mp_obj_new_type>
   168fc:	4603      	mov	r3, r0
   168fe:	e002      	b.n	16906 <type_make_new+0x5e>

        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
   16900:	4803      	ldr	r0, [pc, #12]	; (16910 <type_make_new+0x68>)
   16902:	f7f6 fadb 	bl	cebc <mp_raise_TypeError>
    }
}
   16906:	4618      	mov	r0, r3
   16908:	3710      	adds	r7, #16
   1690a:	46bd      	mov	sp, r7
   1690c:	bd80      	pop	{r7, pc}
   1690e:	bf00      	nop
   16910:	000236f4 	.word	0x000236f4

00016914 <type_call>:

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16914:	b590      	push	{r4, r7, lr}
   16916:	b087      	sub	sp, #28
   16918:	af00      	add	r7, sp, #0
   1691a:	60f8      	str	r0, [r7, #12]
   1691c:	60b9      	str	r1, [r7, #8]
   1691e:	607a      	str	r2, [r7, #4]
   16920:	603b      	str	r3, [r7, #0]
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16922:	68fb      	ldr	r3, [r7, #12]
   16924:	617b      	str	r3, [r7, #20]

    if (self->make_new == NULL) {
   16926:	697b      	ldr	r3, [r7, #20]
   16928:	68db      	ldr	r3, [r3, #12]
   1692a:	2b00      	cmp	r3, #0
   1692c:	d102      	bne.n	16934 <type_call+0x20>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("cannot create instance");
   1692e:	4808      	ldr	r0, [pc, #32]	; (16950 <type_call+0x3c>)
   16930:	f7f6 fac4 	bl	cebc <mp_raise_TypeError>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   16934:	697b      	ldr	r3, [r7, #20]
   16936:	68dc      	ldr	r4, [r3, #12]
   16938:	683b      	ldr	r3, [r7, #0]
   1693a:	687a      	ldr	r2, [r7, #4]
   1693c:	68b9      	ldr	r1, [r7, #8]
   1693e:	6978      	ldr	r0, [r7, #20]
   16940:	47a0      	blx	r4
   16942:	6138      	str	r0, [r7, #16]

    // return new instance
    return o;
   16944:	693b      	ldr	r3, [r7, #16]
}
   16946:	4618      	mov	r0, r3
   16948:	371c      	adds	r7, #28
   1694a:	46bd      	mov	sp, r7
   1694c:	bd90      	pop	{r4, r7, pc}
   1694e:	bf00      	nop
   16950:	00023710 	.word	0x00023710

00016954 <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16954:	b580      	push	{r7, lr}
   16956:	b08e      	sub	sp, #56	; 0x38
   16958:	af00      	add	r7, sp, #0
   1695a:	60f8      	str	r0, [r7, #12]
   1695c:	60b9      	str	r1, [r7, #8]
   1695e:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   16960:	68f8      	ldr	r0, [r7, #12]
   16962:	f7ff f933 	bl	15bcc <MP_OBJ_IS_OBJ>
   16966:	4603      	mov	r3, r0
   16968:	2b00      	cmp	r3, #0
   1696a:	d004      	beq.n	16976 <type_attr+0x22>
   1696c:	68fb      	ldr	r3, [r7, #12]
   1696e:	681b      	ldr	r3, [r3, #0]
   16970:	4a34      	ldr	r2, [pc, #208]	; (16a44 <type_attr+0xf0>)
   16972:	4293      	cmp	r3, r2
   16974:	d006      	beq.n	16984 <type_attr+0x30>
   16976:	4b34      	ldr	r3, [pc, #208]	; (16a48 <type_attr+0xf4>)
   16978:	4a34      	ldr	r2, [pc, #208]	; (16a4c <type_attr+0xf8>)
   1697a:	f240 31e5 	movw	r1, #997	; 0x3e5
   1697e:	4834      	ldr	r0, [pc, #208]	; (16a50 <type_attr+0xfc>)
   16980:	f004 fc30 	bl	1b1e4 <__assert_func>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16984:	68fb      	ldr	r3, [r7, #12]
   16986:	637b      	str	r3, [r7, #52]	; 0x34

    if (dest[0] == MP_OBJ_NULL) {
   16988:	687b      	ldr	r3, [r7, #4]
   1698a:	681b      	ldr	r3, [r3, #0]
   1698c:	2b00      	cmp	r3, #0
   1698e:	d111      	bne.n	169b4 <type_attr+0x60>
        if (attr == MP_QSTR___name__) {
            dest[0] = MP_OBJ_NEW_QSTR(self->name);
            return;
        }
        #endif
        struct class_lookup_data lookup = {
   16990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16992:	617b      	str	r3, [r7, #20]
   16994:	68bb      	ldr	r3, [r7, #8]
   16996:	61bb      	str	r3, [r7, #24]
   16998:	2300      	movs	r3, #0
   1699a:	61fb      	str	r3, [r7, #28]
   1699c:	687b      	ldr	r3, [r7, #4]
   1699e:	623b      	str	r3, [r7, #32]
   169a0:	2301      	movs	r3, #1
   169a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            .attr = attr,
            .meth_offset = 0,
            .dest = dest,
            .is_type = true,
        };
        mp_obj_class_lookup(&lookup, self);
   169a6:	f107 0314 	add.w	r3, r7, #20
   169aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   169ac:	4618      	mov	r0, r3
   169ae:	f7ff f9ed 	bl	15d8c <mp_obj_class_lookup>
   169b2:	e044      	b.n	16a3e <type_attr+0xea>
    } else {
        // delete/store attribute

        // TODO CPython allows STORE_ATTR to a class, but is this the correct implementation?

        if (self->locals_dict != NULL) {
   169b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   169b8:	2b00      	cmp	r3, #0
   169ba:	d040      	beq.n	16a3e <type_attr+0xea>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   169bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   169c0:	681b      	ldr	r3, [r3, #0]
   169c2:	4a24      	ldr	r2, [pc, #144]	; (16a54 <type_attr+0x100>)
   169c4:	4293      	cmp	r3, r2
   169c6:	d006      	beq.n	169d6 <type_attr+0x82>
   169c8:	4b23      	ldr	r3, [pc, #140]	; (16a58 <type_attr+0x104>)
   169ca:	4a20      	ldr	r2, [pc, #128]	; (16a4c <type_attr+0xf8>)
   169cc:	f240 31fe 	movw	r1, #1022	; 0x3fe
   169d0:	481f      	ldr	r0, [pc, #124]	; (16a50 <type_attr+0xfc>)
   169d2:	f004 fc07 	bl	1b1e4 <__assert_func>
            mp_map_t *locals_map = &self->locals_dict->map;
   169d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   169da:	3304      	adds	r3, #4
   169dc:	633b      	str	r3, [r7, #48]	; 0x30
            if (locals_map->is_fixed) {
   169de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   169e0:	781b      	ldrb	r3, [r3, #0]
   169e2:	f003 0302 	and.w	r3, r3, #2
   169e6:	b2db      	uxtb	r3, r3
   169e8:	2b00      	cmp	r3, #0
   169ea:	d127      	bne.n	16a3c <type_attr+0xe8>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   169ec:	687b      	ldr	r3, [r7, #4]
   169ee:	3304      	adds	r3, #4
   169f0:	681b      	ldr	r3, [r3, #0]
   169f2:	2b00      	cmp	r3, #0
   169f4:	d110      	bne.n	16a18 <type_attr+0xc4>
                // delete attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   169f6:	68bb      	ldr	r3, [r7, #8]
   169f8:	009b      	lsls	r3, r3, #2
   169fa:	f043 0302 	orr.w	r3, r3, #2
   169fe:	2202      	movs	r2, #2
   16a00:	4619      	mov	r1, r3
   16a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16a04:	f7f6 fcc6 	bl	d394 <mp_map_lookup>
   16a08:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (elem != NULL) {
   16a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a0c:	2b00      	cmp	r3, #0
   16a0e:	d016      	beq.n	16a3e <type_attr+0xea>
                    dest[0] = MP_OBJ_NULL; // indicate success
   16a10:	687b      	ldr	r3, [r7, #4]
   16a12:	2200      	movs	r2, #0
   16a14:	601a      	str	r2, [r3, #0]
   16a16:	e012      	b.n	16a3e <type_attr+0xea>
                    }
                }
                #endif

                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   16a18:	68bb      	ldr	r3, [r7, #8]
   16a1a:	009b      	lsls	r3, r3, #2
   16a1c:	f043 0302 	orr.w	r3, r3, #2
   16a20:	2201      	movs	r2, #1
   16a22:	4619      	mov	r1, r3
   16a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16a26:	f7f6 fcb5 	bl	d394 <mp_map_lookup>
   16a2a:	62b8      	str	r0, [r7, #40]	; 0x28
                elem->value = dest[1];
   16a2c:	687b      	ldr	r3, [r7, #4]
   16a2e:	685a      	ldr	r2, [r3, #4]
   16a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a32:	605a      	str	r2, [r3, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   16a34:	687b      	ldr	r3, [r7, #4]
   16a36:	2200      	movs	r2, #0
   16a38:	601a      	str	r2, [r3, #0]
   16a3a:	e000      	b.n	16a3e <type_attr+0xea>
                return;
   16a3c:	bf00      	nop
            }
        }
    }
}
   16a3e:	3738      	adds	r7, #56	; 0x38
   16a40:	46bd      	mov	sp, r7
   16a42:	bd80      	pop	{r7, pc}
   16a44:	00023780 	.word	0x00023780
   16a48:	00023728 	.word	0x00023728
   16a4c:	00023a80 	.word	0x00023a80
   16a50:	00023570 	.word	0x00023570
   16a54:	000217b4 	.word	0x000217b4
   16a58:	00023750 	.word	0x00023750

00016a5c <mp_obj_new_type>:
    .call = type_call,
    .unary_op = mp_generic_unary_op,
    .attr = type_attr,
};

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   16a5c:	b580      	push	{r7, lr}
   16a5e:	b08e      	sub	sp, #56	; 0x38
   16a60:	af00      	add	r7, sp, #0
   16a62:	60f8      	str	r0, [r7, #12]
   16a64:	60b9      	str	r1, [r7, #8]
   16a66:	607a      	str	r2, [r7, #4]
    // Verify input objects have expected type
    if (!MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)) {
   16a68:	68b8      	ldr	r0, [r7, #8]
   16a6a:	f7ff f8af 	bl	15bcc <MP_OBJ_IS_OBJ>
   16a6e:	4603      	mov	r3, r0
   16a70:	f083 0301 	eor.w	r3, r3, #1
   16a74:	b2db      	uxtb	r3, r3
   16a76:	2b00      	cmp	r3, #0
   16a78:	d104      	bne.n	16a84 <mp_obj_new_type+0x28>
   16a7a:	68bb      	ldr	r3, [r7, #8]
   16a7c:	681b      	ldr	r3, [r3, #0]
   16a7e:	4a65      	ldr	r2, [pc, #404]	; (16c14 <mp_obj_new_type+0x1b8>)
   16a80:	4293      	cmp	r3, r2
   16a82:	d002      	beq.n	16a8a <mp_obj_new_type+0x2e>
        mp_raise_TypeError(NULL);
   16a84:	2000      	movs	r0, #0
   16a86:	f7f6 fa19 	bl	cebc <mp_raise_TypeError>
    }
    if (!MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)) {
   16a8a:	6878      	ldr	r0, [r7, #4]
   16a8c:	f7ff f89e 	bl	15bcc <MP_OBJ_IS_OBJ>
   16a90:	4603      	mov	r3, r0
   16a92:	f083 0301 	eor.w	r3, r3, #1
   16a96:	b2db      	uxtb	r3, r3
   16a98:	2b00      	cmp	r3, #0
   16a9a:	d104      	bne.n	16aa6 <mp_obj_new_type+0x4a>
   16a9c:	687b      	ldr	r3, [r7, #4]
   16a9e:	681b      	ldr	r3, [r3, #0]
   16aa0:	4a5d      	ldr	r2, [pc, #372]	; (16c18 <mp_obj_new_type+0x1bc>)
   16aa2:	4293      	cmp	r3, r2
   16aa4:	d002      	beq.n	16aac <mp_obj_new_type+0x50>
        mp_raise_TypeError(NULL);
   16aa6:	2000      	movs	r0, #0
   16aa8:	f7f6 fa08 	bl	cebc <mp_raise_TypeError>
    }

    // TODO might need to make a copy of locals_dict; at least that's how CPython does it

    // Basic validation of base classes
    uint16_t base_flags = 0;
   16aac:	2300      	movs	r3, #0
   16aae:	867b      	strh	r3, [r7, #50]	; 0x32
    size_t bases_len;
    mp_obj_t *bases_items;
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   16ab0:	f107 0214 	add.w	r2, r7, #20
   16ab4:	f107 0318 	add.w	r3, r7, #24
   16ab8:	4619      	mov	r1, r3
   16aba:	68b8      	ldr	r0, [r7, #8]
   16abc:	f7fe ffee 	bl	15a9c <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   16ac0:	2300      	movs	r3, #0
   16ac2:	637b      	str	r3, [r7, #52]	; 0x34
   16ac4:	e029      	b.n	16b1a <mp_obj_new_type+0xbe>
        if (!MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type)) {
   16ac6:	697a      	ldr	r2, [r7, #20]
   16ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16aca:	009b      	lsls	r3, r3, #2
   16acc:	4413      	add	r3, r2
   16ace:	681b      	ldr	r3, [r3, #0]
   16ad0:	4618      	mov	r0, r3
   16ad2:	f7ff f87b 	bl	15bcc <MP_OBJ_IS_OBJ>
   16ad6:	4603      	mov	r3, r0
   16ad8:	f083 0301 	eor.w	r3, r3, #1
   16adc:	b2db      	uxtb	r3, r3
   16ade:	2b00      	cmp	r3, #0
   16ae0:	d108      	bne.n	16af4 <mp_obj_new_type+0x98>
   16ae2:	697a      	ldr	r2, [r7, #20]
   16ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ae6:	009b      	lsls	r3, r3, #2
   16ae8:	4413      	add	r3, r2
   16aea:	681b      	ldr	r3, [r3, #0]
   16aec:	681b      	ldr	r3, [r3, #0]
   16aee:	4a4b      	ldr	r2, [pc, #300]	; (16c1c <mp_obj_new_type+0x1c0>)
   16af0:	4293      	cmp	r3, r2
   16af2:	d002      	beq.n	16afa <mp_obj_new_type+0x9e>
            mp_raise_TypeError(NULL);
   16af4:	2000      	movs	r0, #0
   16af6:	f7f6 f9e1 	bl	cebc <mp_raise_TypeError>
        }
        mp_obj_type_t *t = MP_OBJ_TO_PTR(bases_items[i]);
   16afa:	697a      	ldr	r2, [r7, #20]
   16afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16afe:	009b      	lsls	r3, r3, #2
   16b00:	4413      	add	r3, r2
   16b02:	681b      	ldr	r3, [r3, #0]
   16b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        // TODO: Verify with CPy, tested on function type
        if (t->make_new == NULL) {
   16b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b08:	68db      	ldr	r3, [r3, #12]
   16b0a:	2b00      	cmp	r3, #0
   16b0c:	d102      	bne.n	16b14 <mp_obj_new_type+0xb8>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("type is not an acceptable base type");
   16b0e:	4844      	ldr	r0, [pc, #272]	; (16c20 <mp_obj_new_type+0x1c4>)
   16b10:	f7f6 f9d4 	bl	cebc <mp_raise_TypeError>
    for (size_t i = 0; i < bases_len; i++) {
   16b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b16:	3301      	adds	r3, #1
   16b18:	637b      	str	r3, [r7, #52]	; 0x34
   16b1a:	69bb      	ldr	r3, [r7, #24]
   16b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16b1e:	429a      	cmp	r2, r3
   16b20:	d3d1      	bcc.n	16ac6 <mp_obj_new_type+0x6a>
            base_flags |= t->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS;
        }
        #endif
    }

    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   16b22:	203c      	movs	r0, #60	; 0x3c
   16b24:	f7e9 fc1f 	bl	366 <m_malloc0>
   16b28:	62b8      	str	r0, [r7, #40]	; 0x28
    o->base.type = &mp_type_type;
   16b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b2c:	4a3b      	ldr	r2, [pc, #236]	; (16c1c <mp_obj_new_type+0x1c0>)
   16b2e:	601a      	str	r2, [r3, #0]
    o->flags = base_flags;
   16b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b32:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   16b34:	809a      	strh	r2, [r3, #4]
    o->name = name;
   16b36:	68fb      	ldr	r3, [r7, #12]
   16b38:	b29a      	uxth	r2, r3
   16b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b3c:	80da      	strh	r2, [r3, #6]
    o->print = instance_print;
   16b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b40:	4a38      	ldr	r2, [pc, #224]	; (16c24 <mp_obj_new_type+0x1c8>)
   16b42:	609a      	str	r2, [r3, #8]
    o->make_new = mp_obj_instance_make_new;
   16b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b46:	4a38      	ldr	r2, [pc, #224]	; (16c28 <mp_obj_new_type+0x1cc>)
   16b48:	60da      	str	r2, [r3, #12]
    o->call = mp_obj_instance_call;
   16b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b4c:	4a37      	ldr	r2, [pc, #220]	; (16c2c <mp_obj_new_type+0x1d0>)
   16b4e:	611a      	str	r2, [r3, #16]
    o->unary_op = instance_unary_op;
   16b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b52:	4a37      	ldr	r2, [pc, #220]	; (16c30 <mp_obj_new_type+0x1d4>)
   16b54:	615a      	str	r2, [r3, #20]
    o->binary_op = instance_binary_op;
   16b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b58:	4a36      	ldr	r2, [pc, #216]	; (16c34 <mp_obj_new_type+0x1d8>)
   16b5a:	619a      	str	r2, [r3, #24]
    o->attr = mp_obj_instance_attr;
   16b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b5e:	4a36      	ldr	r2, [pc, #216]	; (16c38 <mp_obj_new_type+0x1dc>)
   16b60:	61da      	str	r2, [r3, #28]
    o->subscr = instance_subscr;
   16b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b64:	4a35      	ldr	r2, [pc, #212]	; (16c3c <mp_obj_new_type+0x1e0>)
   16b66:	621a      	str	r2, [r3, #32]
    o->getiter = instance_getiter;
   16b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b6a:	4a35      	ldr	r2, [pc, #212]	; (16c40 <mp_obj_new_type+0x1e4>)
   16b6c:	625a      	str	r2, [r3, #36]	; 0x24
    //o->iternext = ; not implemented
    o->buffer_p.get_buffer = instance_get_buffer;
   16b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b70:	4a34      	ldr	r2, [pc, #208]	; (16c44 <mp_obj_new_type+0x1e8>)
   16b72:	62da      	str	r2, [r3, #44]	; 0x2c

    if (bases_len > 0) {
   16b74:	69bb      	ldr	r3, [r7, #24]
   16b76:	2b00      	cmp	r3, #0
   16b78:	d00f      	beq.n	16b9a <mp_obj_new_type+0x13e>
        // Inherit protocol from a base class. This allows to define an
        // abstract base class which would translate C-level protocol to
        // Python method calls, and any subclass inheriting from it will
        // support this feature.
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   16b7a:	697b      	ldr	r3, [r7, #20]
   16b7c:	681b      	ldr	r3, [r3, #0]
   16b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b82:	631a      	str	r2, [r3, #48]	; 0x30

        if (bases_len >= 2) {
   16b84:	69bb      	ldr	r3, [r7, #24]
   16b86:	2b01      	cmp	r3, #1
   16b88:	d903      	bls.n	16b92 <mp_obj_new_type+0x136>
            #if MICROPY_MULTIPLE_INHERITANCE
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   16b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b8c:	68ba      	ldr	r2, [r7, #8]
   16b8e:	635a      	str	r2, [r3, #52]	; 0x34
   16b90:	e003      	b.n	16b9a <mp_obj_new_type+0x13e>
            #else
            mp_raise_NotImplementedError("multiple inheritance not supported");
            #endif
        } else {
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   16b92:	697b      	ldr	r3, [r7, #20]
   16b94:	681a      	ldr	r2, [r3, #0]
   16b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b98:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   16b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16b9c:	687a      	ldr	r2, [r7, #4]
   16b9e:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }
    #endif

    const mp_obj_type_t *native_base;
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   16ba0:	f107 0310 	add.w	r3, r7, #16
   16ba4:	4619      	mov	r1, r3
   16ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16ba8:	f7ff f822 	bl	15bf0 <instance_count_native_bases>
   16bac:	4603      	mov	r3, r0
   16bae:	627b      	str	r3, [r7, #36]	; 0x24
    if (num_native_bases > 1) {
   16bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16bb2:	2b01      	cmp	r3, #1
   16bb4:	d902      	bls.n	16bbc <mp_obj_new_type+0x160>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   16bb6:	4824      	ldr	r0, [pc, #144]	; (16c48 <mp_obj_new_type+0x1ec>)
   16bb8:	f7f6 f980 	bl	cebc <mp_raise_TypeError>
    }

    mp_map_t *locals_map = &o->locals_dict->map;
   16bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16bc0:	3304      	adds	r3, #4
   16bc2:	623b      	str	r3, [r7, #32]
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   16bc4:	2200      	movs	r2, #0
   16bc6:	2172      	movs	r1, #114	; 0x72
   16bc8:	6a38      	ldr	r0, [r7, #32]
   16bca:	f7f6 fbe3 	bl	d394 <mp_map_lookup>
   16bce:	61f8      	str	r0, [r7, #28]
    if (elem != NULL) {
   16bd0:	69fb      	ldr	r3, [r7, #28]
   16bd2:	2b00      	cmp	r3, #0
   16bd4:	d018      	beq.n	16c08 <mp_obj_new_type+0x1ac>
        // __new__ slot exists; check if it is a function
        if (MP_OBJ_IS_FUN(elem->value)) {
   16bd6:	69fb      	ldr	r3, [r7, #28]
   16bd8:	685b      	ldr	r3, [r3, #4]
   16bda:	4618      	mov	r0, r3
   16bdc:	f7fe fff6 	bl	15bcc <MP_OBJ_IS_OBJ>
   16be0:	4603      	mov	r3, r0
   16be2:	2b00      	cmp	r3, #0
   16be4:	d010      	beq.n	16c08 <mp_obj_new_type+0x1ac>
   16be6:	69fb      	ldr	r3, [r7, #28]
   16be8:	685b      	ldr	r3, [r3, #4]
   16bea:	681b      	ldr	r3, [r3, #0]
   16bec:	88db      	ldrh	r3, [r3, #6]
   16bee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   16bf2:	d109      	bne.n	16c08 <mp_obj_new_type+0x1ac>
            // __new__ is a function, wrap it in a staticmethod decorator
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   16bf4:	69fb      	ldr	r3, [r7, #28]
   16bf6:	3304      	adds	r3, #4
   16bf8:	2200      	movs	r2, #0
   16bfa:	2101      	movs	r1, #1
   16bfc:	4813      	ldr	r0, [pc, #76]	; (16c4c <mp_obj_new_type+0x1f0>)
   16bfe:	f000 fa94 	bl	1712a <static_class_method_make_new>
   16c02:	4602      	mov	r2, r0
   16c04:	69fb      	ldr	r3, [r7, #28]
   16c06:	605a      	str	r2, [r3, #4]
        }
    }

    return MP_OBJ_FROM_PTR(o);
   16c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   16c0a:	4618      	mov	r0, r3
   16c0c:	3738      	adds	r7, #56	; 0x38
   16c0e:	46bd      	mov	sp, r7
   16c10:	bd80      	pop	{r7, pc}
   16c12:	bf00      	nop
   16c14:	00023488 	.word	0x00023488
   16c18:	000217b4 	.word	0x000217b4
   16c1c:	00023780 	.word	0x00023780
   16c20:	000237bc 	.word	0x000237bc
   16c24:	00015fe5 	.word	0x00015fe5
   16c28:	000160f1 	.word	0x000160f1
   16c2c:	0001671f 	.word	0x0001671f
   16c30:	000162cd 	.word	0x000162cd
   16c34:	00016391 	.word	0x00016391
   16c38:	00016587 	.word	0x00016587
   16c3c:	000165cb 	.word	0x000165cb
   16c40:	00016789 	.word	0x00016789
   16c44:	0001680d 	.word	0x0001680d
   16c48:	000237e0 	.word	0x000237e0
   16c4c:	0002398c 	.word	0x0002398c

00016c50 <super_print>:
    mp_obj_base_t base;
    mp_obj_t type;
    mp_obj_t obj;
} mp_obj_super_t;

STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16c50:	b580      	push	{r7, lr}
   16c52:	b086      	sub	sp, #24
   16c54:	af00      	add	r7, sp, #0
   16c56:	60f8      	str	r0, [r7, #12]
   16c58:	60b9      	str	r1, [r7, #8]
   16c5a:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   16c5c:	68bb      	ldr	r3, [r7, #8]
   16c5e:	617b      	str	r3, [r7, #20]
    mp_print_str(print, "<super: ");
   16c60:	490e      	ldr	r1, [pc, #56]	; (16c9c <super_print+0x4c>)
   16c62:	68f8      	ldr	r0, [r7, #12]
   16c64:	f7ea fe02 	bl	186c <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   16c68:	697b      	ldr	r3, [r7, #20]
   16c6a:	685b      	ldr	r3, [r3, #4]
   16c6c:	2200      	movs	r2, #0
   16c6e:	4619      	mov	r1, r3
   16c70:	68f8      	ldr	r0, [r7, #12]
   16c72:	f7f6 fd6a 	bl	d74a <mp_obj_print_helper>
    mp_print_str(print, ", ");
   16c76:	490a      	ldr	r1, [pc, #40]	; (16ca0 <super_print+0x50>)
   16c78:	68f8      	ldr	r0, [r7, #12]
   16c7a:	f7ea fdf7 	bl	186c <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   16c7e:	697b      	ldr	r3, [r7, #20]
   16c80:	689b      	ldr	r3, [r3, #8]
   16c82:	2200      	movs	r2, #0
   16c84:	4619      	mov	r1, r3
   16c86:	68f8      	ldr	r0, [r7, #12]
   16c88:	f7f6 fd5f 	bl	d74a <mp_obj_print_helper>
    mp_print_str(print, ">");
   16c8c:	4905      	ldr	r1, [pc, #20]	; (16ca4 <super_print+0x54>)
   16c8e:	68f8      	ldr	r0, [r7, #12]
   16c90:	f7ea fdec 	bl	186c <mp_print_str>
}
   16c94:	bf00      	nop
   16c96:	3718      	adds	r7, #24
   16c98:	46bd      	mov	sp, r7
   16c9a:	bd80      	pop	{r7, pc}
   16c9c:	00023810 	.word	0x00023810
   16ca0:	0002381c 	.word	0x0002381c
   16ca4:	00023820 	.word	0x00023820

00016ca8 <super_make_new>:

STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16ca8:	b580      	push	{r7, lr}
   16caa:	b088      	sub	sp, #32
   16cac:	af02      	add	r7, sp, #8
   16cae:	60f8      	str	r0, [r7, #12]
   16cb0:	60b9      	str	r1, [r7, #8]
   16cb2:	607a      	str	r2, [r7, #4]
   16cb4:	603b      	str	r3, [r7, #0]
    (void)type_in;
    // 0 arguments are turned into 2 in the compiler
    // 1 argument is not yet implemented
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   16cb6:	2300      	movs	r3, #0
   16cb8:	9300      	str	r3, [sp, #0]
   16cba:	2302      	movs	r3, #2
   16cbc:	2202      	movs	r2, #2
   16cbe:	6879      	ldr	r1, [r7, #4]
   16cc0:	68b8      	ldr	r0, [r7, #8]
   16cc2:	f7f6 f921 	bl	cf08 <mp_arg_check_num>
    if (!MP_OBJ_IS_TYPE(args[0], &mp_type_type)) {
   16cc6:	683b      	ldr	r3, [r7, #0]
   16cc8:	681b      	ldr	r3, [r3, #0]
   16cca:	4618      	mov	r0, r3
   16ccc:	f7fe ff7e 	bl	15bcc <MP_OBJ_IS_OBJ>
   16cd0:	4603      	mov	r3, r0
   16cd2:	f083 0301 	eor.w	r3, r3, #1
   16cd6:	b2db      	uxtb	r3, r3
   16cd8:	2b00      	cmp	r3, #0
   16cda:	d105      	bne.n	16ce8 <super_make_new+0x40>
   16cdc:	683b      	ldr	r3, [r7, #0]
   16cde:	681b      	ldr	r3, [r3, #0]
   16ce0:	681b      	ldr	r3, [r3, #0]
   16ce2:	4a0d      	ldr	r2, [pc, #52]	; (16d18 <super_make_new+0x70>)
   16ce4:	4293      	cmp	r3, r2
   16ce6:	d002      	beq.n	16cee <super_make_new+0x46>
        mp_raise_TypeError(NULL);
   16ce8:	2000      	movs	r0, #0
   16cea:	f7f6 f8e7 	bl	cebc <mp_raise_TypeError>
    }
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   16cee:	200c      	movs	r0, #12
   16cf0:	f7e9 fb14 	bl	31c <m_malloc>
   16cf4:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   16cf6:	683b      	ldr	r3, [r7, #0]
   16cf8:	6819      	ldr	r1, [r3, #0]
   16cfa:	683b      	ldr	r3, [r7, #0]
   16cfc:	3304      	adds	r3, #4
   16cfe:	681a      	ldr	r2, [r3, #0]
   16d00:	697b      	ldr	r3, [r7, #20]
   16d02:	68f8      	ldr	r0, [r7, #12]
   16d04:	6018      	str	r0, [r3, #0]
   16d06:	697b      	ldr	r3, [r7, #20]
   16d08:	6059      	str	r1, [r3, #4]
   16d0a:	697b      	ldr	r3, [r7, #20]
   16d0c:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
   16d0e:	697b      	ldr	r3, [r7, #20]
}
   16d10:	4618      	mov	r0, r3
   16d12:	3718      	adds	r7, #24
   16d14:	46bd      	mov	sp, r7
   16d16:	bd80      	pop	{r7, pc}
   16d18:	00023780 	.word	0x00023780

00016d1c <super_attr>:

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16d1c:	b580      	push	{r7, lr}
   16d1e:	b090      	sub	sp, #64	; 0x40
   16d20:	af00      	add	r7, sp, #0
   16d22:	60f8      	str	r0, [r7, #12]
   16d24:	60b9      	str	r1, [r7, #8]
   16d26:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   16d28:	687b      	ldr	r3, [r7, #4]
   16d2a:	681b      	ldr	r3, [r3, #0]
   16d2c:	2b00      	cmp	r3, #0
   16d2e:	f040 80b8 	bne.w	16ea2 <super_attr+0x186>
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   16d32:	68f8      	ldr	r0, [r7, #12]
   16d34:	f7fe ff4a 	bl	15bcc <MP_OBJ_IS_OBJ>
   16d38:	4603      	mov	r3, r0
   16d3a:	2b00      	cmp	r3, #0
   16d3c:	d004      	beq.n	16d48 <super_attr+0x2c>
   16d3e:	68fb      	ldr	r3, [r7, #12]
   16d40:	681b      	ldr	r3, [r3, #0]
   16d42:	4a5b      	ldr	r2, [pc, #364]	; (16eb0 <super_attr+0x194>)
   16d44:	4293      	cmp	r3, r2
   16d46:	d006      	beq.n	16d56 <super_attr+0x3a>
   16d48:	4b5a      	ldr	r3, [pc, #360]	; (16eb4 <super_attr+0x198>)
   16d4a:	4a5b      	ldr	r2, [pc, #364]	; (16eb8 <super_attr+0x19c>)
   16d4c:	f240 41bc 	movw	r1, #1212	; 0x4bc
   16d50:	485a      	ldr	r0, [pc, #360]	; (16ebc <super_attr+0x1a0>)
   16d52:	f004 fa47 	bl	1b1e4 <__assert_func>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   16d56:	68fb      	ldr	r3, [r7, #12]
   16d58:	63bb      	str	r3, [r7, #56]	; 0x38

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   16d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d5c:	685b      	ldr	r3, [r3, #4]
   16d5e:	4618      	mov	r0, r3
   16d60:	f7fe ff34 	bl	15bcc <MP_OBJ_IS_OBJ>
   16d64:	4603      	mov	r3, r0
   16d66:	2b00      	cmp	r3, #0
   16d68:	d005      	beq.n	16d76 <super_attr+0x5a>
   16d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d6c:	685b      	ldr	r3, [r3, #4]
   16d6e:	681b      	ldr	r3, [r3, #0]
   16d70:	4a53      	ldr	r2, [pc, #332]	; (16ec0 <super_attr+0x1a4>)
   16d72:	4293      	cmp	r3, r2
   16d74:	d006      	beq.n	16d84 <super_attr+0x68>
   16d76:	4b53      	ldr	r3, [pc, #332]	; (16ec4 <super_attr+0x1a8>)
   16d78:	4a4f      	ldr	r2, [pc, #316]	; (16eb8 <super_attr+0x19c>)
   16d7a:	f240 41bf 	movw	r1, #1215	; 0x4bf
   16d7e:	484f      	ldr	r0, [pc, #316]	; (16ebc <super_attr+0x1a0>)
   16d80:	f004 fa30 	bl	1b1e4 <__assert_func>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);
   16d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d86:	685b      	ldr	r3, [r3, #4]
   16d88:	637b      	str	r3, [r7, #52]	; 0x34

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   16d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d8c:	689b      	ldr	r3, [r3, #8]
    struct class_lookup_data lookup = {
   16d8e:	617b      	str	r3, [r7, #20]
   16d90:	68bb      	ldr	r3, [r7, #8]
   16d92:	61bb      	str	r3, [r7, #24]
   16d94:	2300      	movs	r3, #0
   16d96:	61fb      	str	r3, [r7, #28]
   16d98:	687b      	ldr	r3, [r7, #4]
   16d9a:	623b      	str	r3, [r7, #32]
   16d9c:	2300      	movs	r3, #0
   16d9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   16da2:	68bb      	ldr	r3, [r7, #8]
   16da4:	2b13      	cmp	r3, #19
   16da6:	d101      	bne.n	16dac <super_attr+0x90>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   16da8:	230c      	movs	r3, #12
   16daa:	61fb      	str	r3, [r7, #28]
    }

    if (type->parent == NULL) {
   16dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16db0:	2b00      	cmp	r3, #0
   16db2:	d05c      	beq.n	16e6e <super_attr+0x152>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   16db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16db8:	681b      	ldr	r3, [r3, #0]
   16dba:	4a43      	ldr	r2, [pc, #268]	; (16ec8 <super_attr+0x1ac>)
   16dbc:	4293      	cmp	r3, r2
   16dbe:	d147      	bne.n	16e50 <super_attr+0x134>
        const mp_obj_tuple_t *parent_tuple = type->parent;
   16dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16dc4:	633b      	str	r3, [r7, #48]	; 0x30
        size_t len = parent_tuple->len;
   16dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16dc8:	685b      	ldr	r3, [r3, #4]
   16dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        const mp_obj_t *items = parent_tuple->items;
   16dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16dce:	3308      	adds	r3, #8
   16dd0:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < len; i++) {
   16dd2:	2300      	movs	r3, #0
   16dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   16dd6:	e036      	b.n	16e46 <super_attr+0x12a>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   16dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16dda:	009b      	lsls	r3, r3, #2
   16ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16dde:	4413      	add	r3, r2
   16de0:	681b      	ldr	r3, [r3, #0]
   16de2:	4618      	mov	r0, r3
   16de4:	f7fe fef2 	bl	15bcc <MP_OBJ_IS_OBJ>
   16de8:	4603      	mov	r3, r0
   16dea:	2b00      	cmp	r3, #0
   16dec:	d008      	beq.n	16e00 <super_attr+0xe4>
   16dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16df0:	009b      	lsls	r3, r3, #2
   16df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16df4:	4413      	add	r3, r2
   16df6:	681b      	ldr	r3, [r3, #0]
   16df8:	681b      	ldr	r3, [r3, #0]
   16dfa:	4a31      	ldr	r2, [pc, #196]	; (16ec0 <super_attr+0x1a4>)
   16dfc:	4293      	cmp	r3, r2
   16dfe:	d006      	beq.n	16e0e <super_attr+0xf2>
   16e00:	4b32      	ldr	r3, [pc, #200]	; (16ecc <super_attr+0x1b0>)
   16e02:	4a2d      	ldr	r2, [pc, #180]	; (16eb8 <super_attr+0x19c>)
   16e04:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
   16e08:	482c      	ldr	r0, [pc, #176]	; (16ebc <super_attr+0x1a0>)
   16e0a:	f004 f9eb 	bl	1b1e4 <__assert_func>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   16e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e10:	009b      	lsls	r3, r3, #2
   16e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e14:	4413      	add	r3, r2
   16e16:	681b      	ldr	r3, [r3, #0]
   16e18:	4a2d      	ldr	r2, [pc, #180]	; (16ed0 <super_attr+0x1b4>)
   16e1a:	4293      	cmp	r3, r2
   16e1c:	d00f      	beq.n	16e3e <super_attr+0x122>
                // The "object" type will be searched at the end of this function,
                // and we don't want to lookup native methods in object.
                continue;
            }
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   16e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e20:	009b      	lsls	r3, r3, #2
   16e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16e24:	4413      	add	r3, r2
   16e26:	681a      	ldr	r2, [r3, #0]
   16e28:	f107 0314 	add.w	r3, r7, #20
   16e2c:	4611      	mov	r1, r2
   16e2e:	4618      	mov	r0, r3
   16e30:	f7fe ffac 	bl	15d8c <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   16e34:	687b      	ldr	r3, [r7, #4]
   16e36:	681b      	ldr	r3, [r3, #0]
   16e38:	2b00      	cmp	r3, #0
   16e3a:	d117      	bne.n	16e6c <super_attr+0x150>
   16e3c:	e000      	b.n	16e40 <super_attr+0x124>
                continue;
   16e3e:	bf00      	nop
        for (size_t i = 0; i < len; i++) {
   16e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e42:	3301      	adds	r3, #1
   16e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   16e46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16e4a:	429a      	cmp	r2, r3
   16e4c:	d3c4      	bcc.n	16dd8 <super_attr+0xbc>
   16e4e:	e00e      	b.n	16e6e <super_attr+0x152>
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   16e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16e54:	4a1e      	ldr	r2, [pc, #120]	; (16ed0 <super_attr+0x1b4>)
   16e56:	4293      	cmp	r3, r2
   16e58:	d009      	beq.n	16e6e <super_attr+0x152>
        mp_obj_class_lookup(&lookup, type->parent);
   16e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   16e5e:	f107 0314 	add.w	r3, r7, #20
   16e62:	4611      	mov	r1, r2
   16e64:	4618      	mov	r0, r3
   16e66:	f7fe ff91 	bl	15d8c <mp_obj_class_lookup>
   16e6a:	e000      	b.n	16e6e <super_attr+0x152>
                break;
   16e6c:	bf00      	nop
    }

    if (dest[0] != MP_OBJ_NULL) {
   16e6e:	687b      	ldr	r3, [r7, #4]
   16e70:	681b      	ldr	r3, [r3, #0]
   16e72:	2b00      	cmp	r3, #0
   16e74:	d00c      	beq.n	16e90 <super_attr+0x174>
        if (dest[0] == MP_OBJ_SENTINEL) {
   16e76:	687b      	ldr	r3, [r7, #4]
   16e78:	681b      	ldr	r3, [r3, #0]
   16e7a:	2b08      	cmp	r3, #8
   16e7c:	d113      	bne.n	16ea6 <super_attr+0x18a>
            // Looked up native __init__ so defer to it
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   16e7e:	687b      	ldr	r3, [r7, #4]
   16e80:	4a14      	ldr	r2, [pc, #80]	; (16ed4 <super_attr+0x1b8>)
   16e82:	601a      	str	r2, [r3, #0]
            dest[1] = self->obj;
   16e84:	687b      	ldr	r3, [r7, #4]
   16e86:	3304      	adds	r3, #4
   16e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16e8a:	6892      	ldr	r2, [r2, #8]
   16e8c:	601a      	str	r2, [r3, #0]
        }
        return;
   16e8e:	e00a      	b.n	16ea6 <super_attr+0x18a>
    }

    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;
   16e90:	2300      	movs	r3, #0
   16e92:	61fb      	str	r3, [r7, #28]

    mp_obj_class_lookup(&lookup, &mp_type_object);
   16e94:	f107 0314 	add.w	r3, r7, #20
   16e98:	490d      	ldr	r1, [pc, #52]	; (16ed0 <super_attr+0x1b4>)
   16e9a:	4618      	mov	r0, r3
   16e9c:	f7fe ff76 	bl	15d8c <mp_obj_class_lookup>
   16ea0:	e002      	b.n	16ea8 <super_attr+0x18c>
        return;
   16ea2:	bf00      	nop
   16ea4:	e000      	b.n	16ea8 <super_attr+0x18c>
        return;
   16ea6:	bf00      	nop
}
   16ea8:	3740      	adds	r7, #64	; 0x40
   16eaa:	46bd      	mov	sp, r7
   16eac:	bd80      	pop	{r7, pc}
   16eae:	bf00      	nop
   16eb0:	000238a0 	.word	0x000238a0
   16eb4:	00023824 	.word	0x00023824
   16eb8:	00023a8c 	.word	0x00023a8c
   16ebc:	00023570 	.word	0x00023570
   16ec0:	00023780 	.word	0x00023780
   16ec4:	0002384c 	.word	0x0002384c
   16ec8:	00023488 	.word	0x00023488
   16ecc:	00023878 	.word	0x00023878
   16ed0:	00022a98 	.word	0x00022a98
   16ed4:	00023584 	.word	0x00023584

00016ed8 <mp_load_super_method>:
    .print = super_print,
    .make_new = super_make_new,
    .attr = super_attr,
};

void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   16ed8:	b580      	push	{r7, lr}
   16eda:	b086      	sub	sp, #24
   16edc:	af00      	add	r7, sp, #0
   16ede:	6078      	str	r0, [r7, #4]
   16ee0:	6039      	str	r1, [r7, #0]
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   16ee2:	4b09      	ldr	r3, [pc, #36]	; (16f08 <mp_load_super_method+0x30>)
   16ee4:	60fb      	str	r3, [r7, #12]
   16ee6:	683b      	ldr	r3, [r7, #0]
   16ee8:	685b      	ldr	r3, [r3, #4]
   16eea:	613b      	str	r3, [r7, #16]
   16eec:	683b      	ldr	r3, [r7, #0]
   16eee:	689b      	ldr	r3, [r3, #8]
   16ef0:	617b      	str	r3, [r7, #20]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   16ef2:	f107 030c 	add.w	r3, r7, #12
   16ef6:	683a      	ldr	r2, [r7, #0]
   16ef8:	6879      	ldr	r1, [r7, #4]
   16efa:	4618      	mov	r0, r3
   16efc:	f7f5 fc18 	bl	c730 <mp_load_method>
}
   16f00:	bf00      	nop
   16f02:	3718      	adds	r7, #24
   16f04:	46bd      	mov	sp, r7
   16f06:	bd80      	pop	{r7, pc}
   16f08:	000238a0 	.word	0x000238a0

00016f0c <mp_obj_is_subclass_fast>:
/******************************************************************************/
// subclassing and built-ins specific to types

// object and classinfo should be type objects
// (but the function will fail gracefully if they are not)
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   16f0c:	b580      	push	{r7, lr}
   16f0e:	b086      	sub	sp, #24
   16f10:	af00      	add	r7, sp, #0
   16f12:	6078      	str	r0, [r7, #4]
   16f14:	6039      	str	r1, [r7, #0]
    for (;;) {
        if (object == classinfo) {
   16f16:	687a      	ldr	r2, [r7, #4]
   16f18:	683b      	ldr	r3, [r7, #0]
   16f1a:	429a      	cmp	r2, r3
   16f1c:	d101      	bne.n	16f22 <mp_obj_is_subclass_fast+0x16>
            return true;
   16f1e:	2301      	movs	r3, #1
   16f20:	e047      	b.n	16fb2 <mp_obj_is_subclass_fast+0xa6>
        }

        // not equivalent classes, keep searching base classes

        // object should always be a type object, but just return false if it's not
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   16f22:	6878      	ldr	r0, [r7, #4]
   16f24:	f7fe fe52 	bl	15bcc <MP_OBJ_IS_OBJ>
   16f28:	4603      	mov	r3, r0
   16f2a:	f083 0301 	eor.w	r3, r3, #1
   16f2e:	b2db      	uxtb	r3, r3
   16f30:	2b00      	cmp	r3, #0
   16f32:	d104      	bne.n	16f3e <mp_obj_is_subclass_fast+0x32>
   16f34:	687b      	ldr	r3, [r7, #4]
   16f36:	681b      	ldr	r3, [r3, #0]
   16f38:	4a20      	ldr	r2, [pc, #128]	; (16fbc <mp_obj_is_subclass_fast+0xb0>)
   16f3a:	4293      	cmp	r3, r2
   16f3c:	d001      	beq.n	16f42 <mp_obj_is_subclass_fast+0x36>
            return false;
   16f3e:	2300      	movs	r3, #0
   16f40:	e037      	b.n	16fb2 <mp_obj_is_subclass_fast+0xa6>
        }

        const mp_obj_type_t *self = MP_OBJ_TO_PTR(object);
   16f42:	687b      	ldr	r3, [r7, #4]
   16f44:	613b      	str	r3, [r7, #16]

        if (self->parent == NULL) {
   16f46:	693b      	ldr	r3, [r7, #16]
   16f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16f4a:	2b00      	cmp	r3, #0
   16f4c:	d101      	bne.n	16f52 <mp_obj_is_subclass_fast+0x46>
            // type has no parents
            return false;
   16f4e:	2300      	movs	r3, #0
   16f50:	e02f      	b.n	16fb2 <mp_obj_is_subclass_fast+0xa6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   16f52:	693b      	ldr	r3, [r7, #16]
   16f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16f56:	681b      	ldr	r3, [r3, #0]
   16f58:	4a19      	ldr	r2, [pc, #100]	; (16fc0 <mp_obj_is_subclass_fast+0xb4>)
   16f5a:	4293      	cmp	r3, r2
   16f5c:	d125      	bne.n	16faa <mp_obj_is_subclass_fast+0x9e>
            // get the base objects (they should be type objects)
            const mp_obj_tuple_t *parent_tuple = self->parent;
   16f5e:	693b      	ldr	r3, [r7, #16]
   16f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16f62:	60fb      	str	r3, [r7, #12]
            const mp_obj_t *item = parent_tuple->items;
   16f64:	68fb      	ldr	r3, [r7, #12]
   16f66:	3308      	adds	r3, #8
   16f68:	617b      	str	r3, [r7, #20]
            const mp_obj_t *top = item + parent_tuple->len - 1;
   16f6a:	68fb      	ldr	r3, [r7, #12]
   16f6c:	685b      	ldr	r3, [r3, #4]
   16f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16f72:	3b01      	subs	r3, #1
   16f74:	009b      	lsls	r3, r3, #2
   16f76:	697a      	ldr	r2, [r7, #20]
   16f78:	4413      	add	r3, r2
   16f7a:	60bb      	str	r3, [r7, #8]

            // iterate through the base objects
            for (; item < top; ++item) {
   16f7c:	e00d      	b.n	16f9a <mp_obj_is_subclass_fast+0x8e>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   16f7e:	697b      	ldr	r3, [r7, #20]
   16f80:	681b      	ldr	r3, [r3, #0]
   16f82:	6839      	ldr	r1, [r7, #0]
   16f84:	4618      	mov	r0, r3
   16f86:	f7ff ffc1 	bl	16f0c <mp_obj_is_subclass_fast>
   16f8a:	4603      	mov	r3, r0
   16f8c:	2b00      	cmp	r3, #0
   16f8e:	d001      	beq.n	16f94 <mp_obj_is_subclass_fast+0x88>
                    return true;
   16f90:	2301      	movs	r3, #1
   16f92:	e00e      	b.n	16fb2 <mp_obj_is_subclass_fast+0xa6>
            for (; item < top; ++item) {
   16f94:	697b      	ldr	r3, [r7, #20]
   16f96:	3304      	adds	r3, #4
   16f98:	617b      	str	r3, [r7, #20]
   16f9a:	697a      	ldr	r2, [r7, #20]
   16f9c:	68bb      	ldr	r3, [r7, #8]
   16f9e:	429a      	cmp	r2, r3
   16fa0:	d3ed      	bcc.n	16f7e <mp_obj_is_subclass_fast+0x72>
                }
            }

            // search last base (simple tail recursion elimination)
            object = *item;
   16fa2:	697b      	ldr	r3, [r7, #20]
   16fa4:	681b      	ldr	r3, [r3, #0]
   16fa6:	607b      	str	r3, [r7, #4]
   16fa8:	e7b5      	b.n	16f16 <mp_obj_is_subclass_fast+0xa>
        #endif
        } else {
            // type has 1 parent
            object = MP_OBJ_FROM_PTR(self->parent);
   16faa:	693b      	ldr	r3, [r7, #16]
   16fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16fae:	607b      	str	r3, [r7, #4]
    for (;;) {
   16fb0:	e7b1      	b.n	16f16 <mp_obj_is_subclass_fast+0xa>
        }
    }
}
   16fb2:	4618      	mov	r0, r3
   16fb4:	3718      	adds	r7, #24
   16fb6:	46bd      	mov	sp, r7
   16fb8:	bd80      	pop	{r7, pc}
   16fba:	bf00      	nop
   16fbc:	00023780 	.word	0x00023780
   16fc0:	00023488 	.word	0x00023488

00016fc4 <mp_obj_is_subclass>:

STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   16fc4:	b580      	push	{r7, lr}
   16fc6:	b086      	sub	sp, #24
   16fc8:	af00      	add	r7, sp, #0
   16fca:	6078      	str	r0, [r7, #4]
   16fcc:	6039      	str	r1, [r7, #0]
    size_t len;
    mp_obj_t *items;
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   16fce:	683b      	ldr	r3, [r7, #0]
   16fd0:	4618      	mov	r0, r3
   16fd2:	f7fe fdfb 	bl	15bcc <MP_OBJ_IS_OBJ>
   16fd6:	4603      	mov	r3, r0
   16fd8:	2b00      	cmp	r3, #0
   16fda:	d009      	beq.n	16ff0 <mp_obj_is_subclass+0x2c>
   16fdc:	683b      	ldr	r3, [r7, #0]
   16fde:	681b      	ldr	r3, [r3, #0]
   16fe0:	4a22      	ldr	r2, [pc, #136]	; (1706c <mp_obj_is_subclass+0xa8>)
   16fe2:	4293      	cmp	r3, r2
   16fe4:	d104      	bne.n	16ff0 <mp_obj_is_subclass+0x2c>
        len = 1;
   16fe6:	2301      	movs	r3, #1
   16fe8:	613b      	str	r3, [r7, #16]
        items = &classinfo;
   16fea:	463b      	mov	r3, r7
   16fec:	60fb      	str	r3, [r7, #12]
   16fee:	e017      	b.n	17020 <mp_obj_is_subclass+0x5c>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   16ff0:	683b      	ldr	r3, [r7, #0]
   16ff2:	4618      	mov	r0, r3
   16ff4:	f7fe fdea 	bl	15bcc <MP_OBJ_IS_OBJ>
   16ff8:	4603      	mov	r3, r0
   16ffa:	2b00      	cmp	r3, #0
   16ffc:	d00d      	beq.n	1701a <mp_obj_is_subclass+0x56>
   16ffe:	683b      	ldr	r3, [r7, #0]
   17000:	681b      	ldr	r3, [r3, #0]
   17002:	4a1b      	ldr	r2, [pc, #108]	; (17070 <mp_obj_is_subclass+0xac>)
   17004:	4293      	cmp	r3, r2
   17006:	d108      	bne.n	1701a <mp_obj_is_subclass+0x56>
        mp_obj_tuple_get(classinfo, &len, &items);
   17008:	683b      	ldr	r3, [r7, #0]
   1700a:	f107 020c 	add.w	r2, r7, #12
   1700e:	f107 0110 	add.w	r1, r7, #16
   17012:	4618      	mov	r0, r3
   17014:	f7fe fd42 	bl	15a9c <mp_obj_tuple_get>
   17018:	e002      	b.n	17020 <mp_obj_is_subclass+0x5c>
    } else {
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   1701a:	4816      	ldr	r0, [pc, #88]	; (17074 <mp_obj_is_subclass+0xb0>)
   1701c:	f7f5 ff4e 	bl	cebc <mp_raise_TypeError>
    }

    for (size_t i = 0; i < len; i++) {
   17020:	2300      	movs	r3, #0
   17022:	617b      	str	r3, [r7, #20]
   17024:	e018      	b.n	17058 <mp_obj_is_subclass+0x94>
        // We explicitly check for 'object' here since no-one explicitly derives from it
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   17026:	68fa      	ldr	r2, [r7, #12]
   17028:	697b      	ldr	r3, [r7, #20]
   1702a:	009b      	lsls	r3, r3, #2
   1702c:	4413      	add	r3, r2
   1702e:	681b      	ldr	r3, [r3, #0]
   17030:	4a11      	ldr	r2, [pc, #68]	; (17078 <mp_obj_is_subclass+0xb4>)
   17032:	4293      	cmp	r3, r2
   17034:	d00b      	beq.n	1704e <mp_obj_is_subclass+0x8a>
   17036:	68fa      	ldr	r2, [r7, #12]
   17038:	697b      	ldr	r3, [r7, #20]
   1703a:	009b      	lsls	r3, r3, #2
   1703c:	4413      	add	r3, r2
   1703e:	681b      	ldr	r3, [r3, #0]
   17040:	4619      	mov	r1, r3
   17042:	6878      	ldr	r0, [r7, #4]
   17044:	f7ff ff62 	bl	16f0c <mp_obj_is_subclass_fast>
   17048:	4603      	mov	r3, r0
   1704a:	2b00      	cmp	r3, #0
   1704c:	d001      	beq.n	17052 <mp_obj_is_subclass+0x8e>
            return mp_const_true;
   1704e:	4b0b      	ldr	r3, [pc, #44]	; (1707c <mp_obj_is_subclass+0xb8>)
   17050:	e007      	b.n	17062 <mp_obj_is_subclass+0x9e>
    for (size_t i = 0; i < len; i++) {
   17052:	697b      	ldr	r3, [r7, #20]
   17054:	3301      	adds	r3, #1
   17056:	617b      	str	r3, [r7, #20]
   17058:	693b      	ldr	r3, [r7, #16]
   1705a:	697a      	ldr	r2, [r7, #20]
   1705c:	429a      	cmp	r2, r3
   1705e:	d3e2      	bcc.n	17026 <mp_obj_is_subclass+0x62>
        }
    }
    return mp_const_false;
   17060:	4b07      	ldr	r3, [pc, #28]	; (17080 <mp_obj_is_subclass+0xbc>)
}
   17062:	4618      	mov	r0, r3
   17064:	3718      	adds	r7, #24
   17066:	46bd      	mov	sp, r7
   17068:	bd80      	pop	{r7, pc}
   1706a:	bf00      	nop
   1706c:	00023780 	.word	0x00023780
   17070:	00023488 	.word	0x00023488
   17074:	000238dc 	.word	0x000238dc
   17078:	00022a98 	.word	0x00022a98
   1707c:	00021310 	.word	0x00021310
   17080:	00021308 	.word	0x00021308

00017084 <mp_builtin_issubclass>:

STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   17084:	b580      	push	{r7, lr}
   17086:	b082      	sub	sp, #8
   17088:	af00      	add	r7, sp, #0
   1708a:	6078      	str	r0, [r7, #4]
   1708c:	6039      	str	r1, [r7, #0]
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   1708e:	6878      	ldr	r0, [r7, #4]
   17090:	f7fe fd9c 	bl	15bcc <MP_OBJ_IS_OBJ>
   17094:	4603      	mov	r3, r0
   17096:	f083 0301 	eor.w	r3, r3, #1
   1709a:	b2db      	uxtb	r3, r3
   1709c:	2b00      	cmp	r3, #0
   1709e:	d104      	bne.n	170aa <mp_builtin_issubclass+0x26>
   170a0:	687b      	ldr	r3, [r7, #4]
   170a2:	681b      	ldr	r3, [r3, #0]
   170a4:	4a07      	ldr	r2, [pc, #28]	; (170c4 <mp_builtin_issubclass+0x40>)
   170a6:	4293      	cmp	r3, r2
   170a8:	d002      	beq.n	170b0 <mp_builtin_issubclass+0x2c>
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   170aa:	4807      	ldr	r0, [pc, #28]	; (170c8 <mp_builtin_issubclass+0x44>)
   170ac:	f7f5 ff06 	bl	cebc <mp_raise_TypeError>
    }
    return mp_obj_is_subclass(object, classinfo);
   170b0:	6839      	ldr	r1, [r7, #0]
   170b2:	6878      	ldr	r0, [r7, #4]
   170b4:	f7ff ff86 	bl	16fc4 <mp_obj_is_subclass>
   170b8:	4603      	mov	r3, r0
}
   170ba:	4618      	mov	r0, r3
   170bc:	3708      	adds	r7, #8
   170be:	46bd      	mov	sp, r7
   170c0:	bd80      	pop	{r7, pc}
   170c2:	bf00      	nop
   170c4:	00023780 	.word	0x00023780
   170c8:	00023918 	.word	0x00023918

000170cc <mp_builtin_isinstance>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_issubclass_obj, mp_builtin_issubclass);

STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   170cc:	b580      	push	{r7, lr}
   170ce:	b082      	sub	sp, #8
   170d0:	af00      	add	r7, sp, #0
   170d2:	6078      	str	r0, [r7, #4]
   170d4:	6039      	str	r1, [r7, #0]
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   170d6:	6878      	ldr	r0, [r7, #4]
   170d8:	f7f6 fb06 	bl	d6e8 <mp_obj_get_type>
   170dc:	4603      	mov	r3, r0
   170de:	6839      	ldr	r1, [r7, #0]
   170e0:	4618      	mov	r0, r3
   170e2:	f7ff ff6f 	bl	16fc4 <mp_obj_is_subclass>
   170e6:	4603      	mov	r3, r0
}
   170e8:	4618      	mov	r0, r3
   170ea:	3708      	adds	r7, #8
   170ec:	46bd      	mov	sp, r7
   170ee:	bd80      	pop	{r7, pc}

000170f0 <mp_instance_cast_to_native_base>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_isinstance_obj, mp_builtin_isinstance);

mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   170f0:	b580      	push	{r7, lr}
   170f2:	b084      	sub	sp, #16
   170f4:	af00      	add	r7, sp, #0
   170f6:	6078      	str	r0, [r7, #4]
   170f8:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   170fa:	6878      	ldr	r0, [r7, #4]
   170fc:	f7f6 faf4 	bl	d6e8 <mp_obj_get_type>
   17100:	60f8      	str	r0, [r7, #12]
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   17102:	6839      	ldr	r1, [r7, #0]
   17104:	68f8      	ldr	r0, [r7, #12]
   17106:	f7ff ff01 	bl	16f0c <mp_obj_is_subclass_fast>
   1710a:	4603      	mov	r3, r0
   1710c:	f083 0301 	eor.w	r3, r3, #1
   17110:	b2db      	uxtb	r3, r3
   17112:	2b00      	cmp	r3, #0
   17114:	d001      	beq.n	1711a <mp_instance_cast_to_native_base+0x2a>
        return MP_OBJ_NULL;
   17116:	2300      	movs	r3, #0
   17118:	e003      	b.n	17122 <mp_instance_cast_to_native_base+0x32>
    }
    mp_obj_instance_t *self = (mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in);
   1711a:	687b      	ldr	r3, [r7, #4]
   1711c:	60bb      	str	r3, [r7, #8]
    return self->subobj[0];
   1711e:	68bb      	ldr	r3, [r7, #8]
   17120:	691b      	ldr	r3, [r3, #16]
}
   17122:	4618      	mov	r0, r3
   17124:	3710      	adds	r7, #16
   17126:	46bd      	mov	sp, r7
   17128:	bd80      	pop	{r7, pc}

0001712a <static_class_method_make_new>:

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1712a:	b580      	push	{r7, lr}
   1712c:	b088      	sub	sp, #32
   1712e:	af02      	add	r7, sp, #8
   17130:	60f8      	str	r0, [r7, #12]
   17132:	60b9      	str	r1, [r7, #8]
   17134:	607a      	str	r2, [r7, #4]
   17136:	603b      	str	r3, [r7, #0]
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   17138:	68fb      	ldr	r3, [r7, #12]
   1713a:	4a13      	ldr	r2, [pc, #76]	; (17188 <static_class_method_make_new+0x5e>)
   1713c:	4293      	cmp	r3, r2
   1713e:	d00a      	beq.n	17156 <static_class_method_make_new+0x2c>
   17140:	68fb      	ldr	r3, [r7, #12]
   17142:	4a12      	ldr	r2, [pc, #72]	; (1718c <static_class_method_make_new+0x62>)
   17144:	4293      	cmp	r3, r2
   17146:	d006      	beq.n	17156 <static_class_method_make_new+0x2c>
   17148:	4b11      	ldr	r3, [pc, #68]	; (17190 <static_class_method_make_new+0x66>)
   1714a:	4a12      	ldr	r2, [pc, #72]	; (17194 <static_class_method_make_new+0x6a>)
   1714c:	f240 5165 	movw	r1, #1381	; 0x565
   17150:	4811      	ldr	r0, [pc, #68]	; (17198 <static_class_method_make_new+0x6e>)
   17152:	f004 f847 	bl	1b1e4 <__assert_func>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   17156:	2300      	movs	r3, #0
   17158:	9300      	str	r3, [sp, #0]
   1715a:	2301      	movs	r3, #1
   1715c:	2201      	movs	r2, #1
   1715e:	6879      	ldr	r1, [r7, #4]
   17160:	68b8      	ldr	r0, [r7, #8]
   17162:	f7f5 fed1 	bl	cf08 <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   17166:	2008      	movs	r0, #8
   17168:	f7e9 f8d8 	bl	31c <m_malloc>
   1716c:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   1716e:	683b      	ldr	r3, [r7, #0]
   17170:	681a      	ldr	r2, [r3, #0]
   17172:	697b      	ldr	r3, [r7, #20]
   17174:	68f9      	ldr	r1, [r7, #12]
   17176:	6019      	str	r1, [r3, #0]
   17178:	697b      	ldr	r3, [r7, #20]
   1717a:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   1717c:	697b      	ldr	r3, [r7, #20]
}
   1717e:	4618      	mov	r0, r3
   17180:	3718      	adds	r7, #24
   17182:	46bd      	mov	sp, r7
   17184:	bd80      	pop	{r7, pc}
   17186:	bf00      	nop
   17188:	0002398c 	.word	0x0002398c
   1718c:	000239c8 	.word	0x000239c8
   17190:	0002394c 	.word	0x0002394c
   17194:	00023a98 	.word	0x00023a98
   17198:	00023570 	.word	0x00023570

0001719c <MP_OBJ_IS_OBJ>:
   1719c:	b480      	push	{r7}
   1719e:	b083      	sub	sp, #12
   171a0:	af00      	add	r7, sp, #0
   171a2:	6078      	str	r0, [r7, #4]
   171a4:	687b      	ldr	r3, [r7, #4]
   171a6:	f003 0303 	and.w	r3, r3, #3
   171aa:	2b00      	cmp	r3, #0
   171ac:	bf0c      	ite	eq
   171ae:	2301      	moveq	r3, #1
   171b0:	2300      	movne	r3, #0
   171b2:	b2db      	uxtb	r3, r3
   171b4:	4618      	mov	r0, r3
   171b6:	370c      	adds	r7, #12
   171b8:	46bd      	mov	sp, r7
   171ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   171be:	4770      	bx	lr

000171c0 <zip_make_new>:
    mp_obj_base_t base;
    size_t n_iters;
    mp_obj_t iters[];
} mp_obj_zip_t;

STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   171c0:	b580      	push	{r7, lr}
   171c2:	b088      	sub	sp, #32
   171c4:	af02      	add	r7, sp, #8
   171c6:	60f8      	str	r0, [r7, #12]
   171c8:	60b9      	str	r1, [r7, #8]
   171ca:	607a      	str	r2, [r7, #4]
   171cc:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   171ce:	2300      	movs	r3, #0
   171d0:	9300      	str	r3, [sp, #0]
   171d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   171d6:	2200      	movs	r2, #0
   171d8:	6879      	ldr	r1, [r7, #4]
   171da:	68b8      	ldr	r0, [r7, #8]
   171dc:	f7f5 fe94 	bl	cf08 <mp_arg_check_num>

    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   171e0:	68bb      	ldr	r3, [r7, #8]
   171e2:	3302      	adds	r3, #2
   171e4:	009b      	lsls	r3, r3, #2
   171e6:	4618      	mov	r0, r3
   171e8:	f7e9 f898 	bl	31c <m_malloc>
   171ec:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   171ee:	693b      	ldr	r3, [r7, #16]
   171f0:	68fa      	ldr	r2, [r7, #12]
   171f2:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args;
   171f4:	693b      	ldr	r3, [r7, #16]
   171f6:	68ba      	ldr	r2, [r7, #8]
   171f8:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   171fa:	2300      	movs	r3, #0
   171fc:	617b      	str	r3, [r7, #20]
   171fe:	e011      	b.n	17224 <zip_make_new+0x64>
        o->iters[i] = mp_getiter(args[i], NULL);
   17200:	697b      	ldr	r3, [r7, #20]
   17202:	009b      	lsls	r3, r3, #2
   17204:	683a      	ldr	r2, [r7, #0]
   17206:	4413      	add	r3, r2
   17208:	681b      	ldr	r3, [r3, #0]
   1720a:	2100      	movs	r1, #0
   1720c:	4618      	mov	r0, r3
   1720e:	f7f5 fb07 	bl	c820 <mp_getiter>
   17212:	4601      	mov	r1, r0
   17214:	693b      	ldr	r3, [r7, #16]
   17216:	697a      	ldr	r2, [r7, #20]
   17218:	3202      	adds	r2, #2
   1721a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   1721e:	697b      	ldr	r3, [r7, #20]
   17220:	3301      	adds	r3, #1
   17222:	617b      	str	r3, [r7, #20]
   17224:	697a      	ldr	r2, [r7, #20]
   17226:	68bb      	ldr	r3, [r7, #8]
   17228:	429a      	cmp	r2, r3
   1722a:	d3e9      	bcc.n	17200 <zip_make_new+0x40>
    }
    return MP_OBJ_FROM_PTR(o);
   1722c:	693b      	ldr	r3, [r7, #16]
}
   1722e:	4618      	mov	r0, r3
   17230:	3718      	adds	r7, #24
   17232:	46bd      	mov	sp, r7
   17234:	bd80      	pop	{r7, pc}

00017236 <zip_iternext>:

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   17236:	b580      	push	{r7, lr}
   17238:	b086      	sub	sp, #24
   1723a:	af00      	add	r7, sp, #0
   1723c:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   1723e:	6878      	ldr	r0, [r7, #4]
   17240:	f7ff ffac 	bl	1719c <MP_OBJ_IS_OBJ>
   17244:	4603      	mov	r3, r0
   17246:	2b00      	cmp	r3, #0
   17248:	d004      	beq.n	17254 <zip_iternext+0x1e>
   1724a:	687b      	ldr	r3, [r7, #4]
   1724c:	681b      	ldr	r3, [r3, #0]
   1724e:	4a1f      	ldr	r2, [pc, #124]	; (172cc <zip_iternext+0x96>)
   17250:	4293      	cmp	r3, r2
   17252:	d005      	beq.n	17260 <zip_iternext+0x2a>
   17254:	4b1e      	ldr	r3, [pc, #120]	; (172d0 <zip_iternext+0x9a>)
   17256:	4a1f      	ldr	r2, [pc, #124]	; (172d4 <zip_iternext+0x9e>)
   17258:	2134      	movs	r1, #52	; 0x34
   1725a:	481f      	ldr	r0, [pc, #124]	; (172d8 <zip_iternext+0xa2>)
   1725c:	f003 ffc2 	bl	1b1e4 <__assert_func>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
   17260:	687b      	ldr	r3, [r7, #4]
   17262:	613b      	str	r3, [r7, #16]
    if (self->n_iters == 0) {
   17264:	693b      	ldr	r3, [r7, #16]
   17266:	685b      	ldr	r3, [r3, #4]
   17268:	2b00      	cmp	r3, #0
   1726a:	d101      	bne.n	17270 <zip_iternext+0x3a>
        return MP_OBJ_STOP_ITERATION;
   1726c:	2304      	movs	r3, #4
   1726e:	e029      	b.n	172c4 <zip_iternext+0x8e>
    }
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   17270:	693b      	ldr	r3, [r7, #16]
   17272:	685b      	ldr	r3, [r3, #4]
   17274:	2100      	movs	r1, #0
   17276:	4618      	mov	r0, r3
   17278:	f7fe fbd8 	bl	15a2c <mp_obj_new_tuple>
   1727c:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   1727e:	2300      	movs	r3, #0
   17280:	617b      	str	r3, [r7, #20]
   17282:	e019      	b.n	172b8 <zip_iternext+0x82>
        mp_obj_t next = mp_iternext(self->iters[i]);
   17284:	693b      	ldr	r3, [r7, #16]
   17286:	697a      	ldr	r2, [r7, #20]
   17288:	3202      	adds	r2, #2
   1728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1728e:	4618      	mov	r0, r3
   17290:	f7f5 fb48 	bl	c924 <mp_iternext>
   17294:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   17296:	68bb      	ldr	r3, [r7, #8]
   17298:	2b04      	cmp	r3, #4
   1729a:	d104      	bne.n	172a6 <zip_iternext+0x70>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   1729c:	68f8      	ldr	r0, [r7, #12]
   1729e:	f7fe fc2b 	bl	15af8 <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   172a2:	2304      	movs	r3, #4
   172a4:	e00e      	b.n	172c4 <zip_iternext+0x8e>
        }
        tuple->items[i] = next;
   172a6:	68fb      	ldr	r3, [r7, #12]
   172a8:	697a      	ldr	r2, [r7, #20]
   172aa:	3202      	adds	r2, #2
   172ac:	68b9      	ldr	r1, [r7, #8]
   172ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   172b2:	697b      	ldr	r3, [r7, #20]
   172b4:	3301      	adds	r3, #1
   172b6:	617b      	str	r3, [r7, #20]
   172b8:	693b      	ldr	r3, [r7, #16]
   172ba:	685a      	ldr	r2, [r3, #4]
   172bc:	697b      	ldr	r3, [r7, #20]
   172be:	429a      	cmp	r2, r3
   172c0:	d8e0      	bhi.n	17284 <zip_iternext+0x4e>
    }
    return MP_OBJ_FROM_PTR(tuple);
   172c2:	68fb      	ldr	r3, [r7, #12]
}
   172c4:	4618      	mov	r0, r3
   172c6:	3718      	adds	r7, #24
   172c8:	46bd      	mov	sp, r7
   172ca:	bd80      	pop	{r7, pc}
   172cc:	00023b28 	.word	0x00023b28
   172d0:	00023ab8 	.word	0x00023ab8
   172d4:	00023b64 	.word	0x00023b64
   172d8:	00023b14 	.word	0x00023b14

000172dc <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   172dc:	b580      	push	{r7, lr}
   172de:	b084      	sub	sp, #16
   172e0:	af00      	add	r7, sp, #0
   172e2:	6078      	str	r0, [r7, #4]
   172e4:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   172e6:	6878      	ldr	r0, [r7, #4]
   172e8:	f7f6 f9fe 	bl	d6e8 <mp_obj_get_type>
   172ec:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   172ee:	68fb      	ldr	r3, [r7, #12]
   172f0:	6a1b      	ldr	r3, [r3, #32]
   172f2:	2208      	movs	r2, #8
   172f4:	6839      	ldr	r1, [r7, #0]
   172f6:	6878      	ldr	r0, [r7, #4]
   172f8:	4798      	blx	r3
   172fa:	4603      	mov	r3, r0
}
   172fc:	4618      	mov	r0, r3
   172fe:	3710      	adds	r7, #16
   17300:	46bd      	mov	sp, r7
   17302:	bd80      	pop	{r7, pc}

00017304 <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   17304:	b580      	push	{r7, lr}
   17306:	b086      	sub	sp, #24
   17308:	af00      	add	r7, sp, #0
   1730a:	60f8      	str	r0, [r7, #12]
   1730c:	60b9      	str	r1, [r7, #8]
   1730e:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17310:	68f8      	ldr	r0, [r7, #12]
   17312:	f7f6 f9e9 	bl	d6e8 <mp_obj_get_type>
   17316:	6178      	str	r0, [r7, #20]
    return type->subscr(self_in, key_in, value_in);
   17318:	697b      	ldr	r3, [r7, #20]
   1731a:	6a1b      	ldr	r3, [r3, #32]
   1731c:	687a      	ldr	r2, [r7, #4]
   1731e:	68b9      	ldr	r1, [r7, #8]
   17320:	68f8      	ldr	r0, [r7, #12]
   17322:	4798      	blx	r3
   17324:	4603      	mov	r3, r0
}
   17326:	4618      	mov	r0, r3
   17328:	3718      	adds	r7, #24
   1732a:	46bd      	mov	sp, r7
   1732c:	bd80      	pop	{r7, pc}

0001732e <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   1732e:	b580      	push	{r7, lr}
   17330:	b084      	sub	sp, #16
   17332:	af00      	add	r7, sp, #0
   17334:	6078      	str	r0, [r7, #4]
   17336:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17338:	6878      	ldr	r0, [r7, #4]
   1733a:	f7f6 f9d5 	bl	d6e8 <mp_obj_get_type>
   1733e:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   17340:	68fb      	ldr	r3, [r7, #12]
   17342:	6a1b      	ldr	r3, [r3, #32]
   17344:	2200      	movs	r2, #0
   17346:	6839      	ldr	r1, [r7, #0]
   17348:	6878      	ldr	r0, [r7, #4]
   1734a:	4798      	blx	r3
   1734c:	4603      	mov	r3, r0
}
   1734e:	4618      	mov	r0, r3
   17350:	3710      	adds	r7, #16
   17352:	46bd      	mov	sp, r7
   17354:	bd80      	pop	{r7, pc}

00017356 <op_contains>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_delitem_obj, op_delitem);

STATIC mp_obj_t op_contains(mp_obj_t lhs_in, mp_obj_t rhs_in) {
   17356:	b580      	push	{r7, lr}
   17358:	b084      	sub	sp, #16
   1735a:	af00      	add	r7, sp, #0
   1735c:	6078      	str	r0, [r7, #4]
   1735e:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(lhs_in);
   17360:	6878      	ldr	r0, [r7, #4]
   17362:	f7f6 f9c1 	bl	d6e8 <mp_obj_get_type>
   17366:	60f8      	str	r0, [r7, #12]
    return type->binary_op(MP_BINARY_OP_CONTAINS, lhs_in, rhs_in);
   17368:	68fb      	ldr	r3, [r7, #12]
   1736a:	699b      	ldr	r3, [r3, #24]
   1736c:	683a      	ldr	r2, [r7, #0]
   1736e:	6879      	ldr	r1, [r7, #4]
   17370:	2022      	movs	r0, #34	; 0x22
   17372:	4798      	blx	r3
   17374:	4603      	mov	r3, r0
}
   17376:	4618      	mov	r0, r3
   17378:	3710      	adds	r7, #16
   1737a:	46bd      	mov	sp, r7
   1737c:	bd80      	pop	{r7, pc}
	...

00017380 <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   17380:	b580      	push	{r7, lr}
   17382:	b086      	sub	sp, #24
   17384:	af00      	add	r7, sp, #0
   17386:	60f8      	str	r0, [r7, #12]
   17388:	60b9      	str	r1, [r7, #8]
   1738a:	607a      	str	r2, [r7, #4]
   1738c:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < times; i++) {
   1738e:	2300      	movs	r3, #0
   17390:	617b      	str	r3, [r7, #20]
   17392:	e010      	b.n	173b6 <mp_seq_multiply+0x36>
        size_t copy_sz = item_sz * len;
   17394:	68bb      	ldr	r3, [r7, #8]
   17396:	687a      	ldr	r2, [r7, #4]
   17398:	fb02 f303 	mul.w	r3, r2, r3
   1739c:	613b      	str	r3, [r7, #16]
        memcpy(dest, items, copy_sz);
   1739e:	693a      	ldr	r2, [r7, #16]
   173a0:	68f9      	ldr	r1, [r7, #12]
   173a2:	6a38      	ldr	r0, [r7, #32]
   173a4:	f005 f8dc 	bl	1c560 <memcpy>
        dest = (char*)dest + copy_sz;
   173a8:	6a3a      	ldr	r2, [r7, #32]
   173aa:	693b      	ldr	r3, [r7, #16]
   173ac:	4413      	add	r3, r2
   173ae:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < times; i++) {
   173b0:	697b      	ldr	r3, [r7, #20]
   173b2:	3301      	adds	r3, #1
   173b4:	617b      	str	r3, [r7, #20]
   173b6:	697a      	ldr	r2, [r7, #20]
   173b8:	683b      	ldr	r3, [r7, #0]
   173ba:	429a      	cmp	r2, r3
   173bc:	d3ea      	bcc.n	17394 <mp_seq_multiply+0x14>
    }
}
   173be:	bf00      	nop
   173c0:	3718      	adds	r7, #24
   173c2:	46bd      	mov	sp, r7
   173c4:	bd80      	pop	{r7, pc}

000173c6 <mp_seq_extract_slice>:
    return indexes->step == 1;
}

#endif

mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes) {
   173c6:	b580      	push	{r7, lr}
   173c8:	b088      	sub	sp, #32
   173ca:	af00      	add	r7, sp, #0
   173cc:	60f8      	str	r0, [r7, #12]
   173ce:	60b9      	str	r1, [r7, #8]
   173d0:	607a      	str	r2, [r7, #4]
    (void)len; // TODO can we remove len from the arg list?

    mp_int_t start = indexes->start, stop = indexes->stop;
   173d2:	687b      	ldr	r3, [r7, #4]
   173d4:	681b      	ldr	r3, [r3, #0]
   173d6:	61fb      	str	r3, [r7, #28]
   173d8:	687b      	ldr	r3, [r7, #4]
   173da:	685b      	ldr	r3, [r3, #4]
   173dc:	61bb      	str	r3, [r7, #24]
    mp_int_t step = indexes->step;
   173de:	687b      	ldr	r3, [r7, #4]
   173e0:	689b      	ldr	r3, [r3, #8]
   173e2:	617b      	str	r3, [r7, #20]

    mp_obj_t res = mp_obj_new_list(0, NULL);
   173e4:	2100      	movs	r1, #0
   173e6:	2000      	movs	r0, #0
   173e8:	f7fa f8f7 	bl	115da <mp_obj_new_list>
   173ec:	6138      	str	r0, [r7, #16]

    if (step < 0) {
   173ee:	697b      	ldr	r3, [r7, #20]
   173f0:	2b00      	cmp	r3, #0
   173f2:	da1f      	bge.n	17434 <mp_seq_extract_slice+0x6e>
        while (start >= stop) {
   173f4:	e00c      	b.n	17410 <mp_seq_extract_slice+0x4a>
            mp_obj_list_append(res, seq[start]);
   173f6:	69fb      	ldr	r3, [r7, #28]
   173f8:	009b      	lsls	r3, r3, #2
   173fa:	68ba      	ldr	r2, [r7, #8]
   173fc:	4413      	add	r3, r2
   173fe:	681b      	ldr	r3, [r3, #0]
   17400:	4619      	mov	r1, r3
   17402:	6938      	ldr	r0, [r7, #16]
   17404:	f7f9 fc7d 	bl	10d02 <mp_obj_list_append>
            start += step;
   17408:	69fa      	ldr	r2, [r7, #28]
   1740a:	697b      	ldr	r3, [r7, #20]
   1740c:	4413      	add	r3, r2
   1740e:	61fb      	str	r3, [r7, #28]
        while (start >= stop) {
   17410:	69fa      	ldr	r2, [r7, #28]
   17412:	69bb      	ldr	r3, [r7, #24]
   17414:	429a      	cmp	r2, r3
   17416:	daee      	bge.n	173f6 <mp_seq_extract_slice+0x30>
   17418:	e010      	b.n	1743c <mp_seq_extract_slice+0x76>
        }
    } else {
        while (start < stop) {
            mp_obj_list_append(res, seq[start]);
   1741a:	69fb      	ldr	r3, [r7, #28]
   1741c:	009b      	lsls	r3, r3, #2
   1741e:	68ba      	ldr	r2, [r7, #8]
   17420:	4413      	add	r3, r2
   17422:	681b      	ldr	r3, [r3, #0]
   17424:	4619      	mov	r1, r3
   17426:	6938      	ldr	r0, [r7, #16]
   17428:	f7f9 fc6b 	bl	10d02 <mp_obj_list_append>
            start += step;
   1742c:	69fa      	ldr	r2, [r7, #28]
   1742e:	697b      	ldr	r3, [r7, #20]
   17430:	4413      	add	r3, r2
   17432:	61fb      	str	r3, [r7, #28]
        while (start < stop) {
   17434:	69fa      	ldr	r2, [r7, #28]
   17436:	69bb      	ldr	r3, [r7, #24]
   17438:	429a      	cmp	r2, r3
   1743a:	dbee      	blt.n	1741a <mp_seq_extract_slice+0x54>
        }
    }
    return res;
   1743c:	693b      	ldr	r3, [r7, #16]
}
   1743e:	4618      	mov	r0, r3
   17440:	3720      	adds	r7, #32
   17442:	46bd      	mov	sp, r7
   17444:	bd80      	pop	{r7, pc}

00017446 <mp_seq_cmp_bytes>:

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   17446:	b580      	push	{r7, lr}
   17448:	b088      	sub	sp, #32
   1744a:	af00      	add	r7, sp, #0
   1744c:	60f8      	str	r0, [r7, #12]
   1744e:	60b9      	str	r1, [r7, #8]
   17450:	607a      	str	r2, [r7, #4]
   17452:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17454:	68fb      	ldr	r3, [r7, #12]
   17456:	2b02      	cmp	r3, #2
   17458:	d105      	bne.n	17466 <mp_seq_cmp_bytes+0x20>
   1745a:	687a      	ldr	r2, [r7, #4]
   1745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1745e:	429a      	cmp	r2, r3
   17460:	d001      	beq.n	17466 <mp_seq_cmp_bytes+0x20>
        return false;
   17462:	2300      	movs	r3, #0
   17464:	e049      	b.n	174fa <mp_seq_cmp_bytes+0xb4>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17466:	68fb      	ldr	r3, [r7, #12]
   17468:	2b00      	cmp	r3, #0
   1746a:	d002      	beq.n	17472 <mp_seq_cmp_bytes+0x2c>
   1746c:	68fb      	ldr	r3, [r7, #12]
   1746e:	2b03      	cmp	r3, #3
   17470:	d113      	bne.n	1749a <mp_seq_cmp_bytes+0x54>
        SWAP(const byte*, data1, data2);
   17472:	683b      	ldr	r3, [r7, #0]
   17474:	61fb      	str	r3, [r7, #28]
   17476:	68bb      	ldr	r3, [r7, #8]
   17478:	603b      	str	r3, [r7, #0]
   1747a:	69fb      	ldr	r3, [r7, #28]
   1747c:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   1747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17480:	61bb      	str	r3, [r7, #24]
   17482:	687b      	ldr	r3, [r7, #4]
   17484:	62bb      	str	r3, [r7, #40]	; 0x28
   17486:	69bb      	ldr	r3, [r7, #24]
   17488:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   1748a:	68fb      	ldr	r3, [r7, #12]
   1748c:	2b00      	cmp	r3, #0
   1748e:	d102      	bne.n	17496 <mp_seq_cmp_bytes+0x50>
            op = MP_BINARY_OP_MORE;
   17490:	2301      	movs	r3, #1
   17492:	60fb      	str	r3, [r7, #12]
   17494:	e001      	b.n	1749a <mp_seq_cmp_bytes+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17496:	2304      	movs	r3, #4
   17498:	60fb      	str	r3, [r7, #12]
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
   1749a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1749c:	687b      	ldr	r3, [r7, #4]
   1749e:	4293      	cmp	r3, r2
   174a0:	bf28      	it	cs
   174a2:	4613      	movcs	r3, r2
   174a4:	617b      	str	r3, [r7, #20]
    int res = memcmp(data1, data2, min_len);
   174a6:	697a      	ldr	r2, [r7, #20]
   174a8:	6839      	ldr	r1, [r7, #0]
   174aa:	68b8      	ldr	r0, [r7, #8]
   174ac:	f005 f93d 	bl	1c72a <memcmp>
   174b0:	6138      	str	r0, [r7, #16]
    if (op == MP_BINARY_OP_EQUAL) {
   174b2:	68fb      	ldr	r3, [r7, #12]
   174b4:	2b02      	cmp	r3, #2
   174b6:	d106      	bne.n	174c6 <mp_seq_cmp_bytes+0x80>
        // If we are checking for equality, here're the answer
        return res == 0;
   174b8:	693b      	ldr	r3, [r7, #16]
   174ba:	2b00      	cmp	r3, #0
   174bc:	bf0c      	ite	eq
   174be:	2301      	moveq	r3, #1
   174c0:	2300      	movne	r3, #0
   174c2:	b2db      	uxtb	r3, r3
   174c4:	e019      	b.n	174fa <mp_seq_cmp_bytes+0xb4>
    }
    if (res < 0) {
   174c6:	693b      	ldr	r3, [r7, #16]
   174c8:	2b00      	cmp	r3, #0
   174ca:	da01      	bge.n	174d0 <mp_seq_cmp_bytes+0x8a>
        return false;
   174cc:	2300      	movs	r3, #0
   174ce:	e014      	b.n	174fa <mp_seq_cmp_bytes+0xb4>
    }
    if (res > 0) {
   174d0:	693b      	ldr	r3, [r7, #16]
   174d2:	2b00      	cmp	r3, #0
   174d4:	dd01      	ble.n	174da <mp_seq_cmp_bytes+0x94>
        return true;
   174d6:	2301      	movs	r3, #1
   174d8:	e00f      	b.n	174fa <mp_seq_cmp_bytes+0xb4>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   174da:	687a      	ldr	r2, [r7, #4]
   174dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174de:	429a      	cmp	r2, r3
   174e0:	d005      	beq.n	174ee <mp_seq_cmp_bytes+0xa8>
        if (len1 < len2) {
   174e2:	687a      	ldr	r2, [r7, #4]
   174e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   174e6:	429a      	cmp	r2, r3
   174e8:	d206      	bcs.n	174f8 <mp_seq_cmp_bytes+0xb2>
            // ... then longer list length wins (we deal only with >)
            return false;
   174ea:	2300      	movs	r3, #0
   174ec:	e005      	b.n	174fa <mp_seq_cmp_bytes+0xb4>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   174ee:	68fb      	ldr	r3, [r7, #12]
   174f0:	2b01      	cmp	r3, #1
   174f2:	d101      	bne.n	174f8 <mp_seq_cmp_bytes+0xb2>
        // Otherwise, if we have strict relation, equality means failure
        return false;
   174f4:	2300      	movs	r3, #0
   174f6:	e000      	b.n	174fa <mp_seq_cmp_bytes+0xb4>
    }
    return true;
   174f8:	2301      	movs	r3, #1
}
   174fa:	4618      	mov	r0, r3
   174fc:	3720      	adds	r7, #32
   174fe:	46bd      	mov	sp, r7
   17500:	bd80      	pop	{r7, pc}

00017502 <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   17502:	b580      	push	{r7, lr}
   17504:	b088      	sub	sp, #32
   17506:	af00      	add	r7, sp, #0
   17508:	60f8      	str	r0, [r7, #12]
   1750a:	60b9      	str	r1, [r7, #8]
   1750c:	607a      	str	r2, [r7, #4]
   1750e:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17510:	68fb      	ldr	r3, [r7, #12]
   17512:	2b02      	cmp	r3, #2
   17514:	d105      	bne.n	17522 <mp_seq_cmp_objs+0x20>
   17516:	687a      	ldr	r2, [r7, #4]
   17518:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1751a:	429a      	cmp	r2, r3
   1751c:	d001      	beq.n	17522 <mp_seq_cmp_objs+0x20>
        return false;
   1751e:	2300      	movs	r3, #0
   17520:	e065      	b.n	175ee <mp_seq_cmp_objs+0xec>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17522:	68fb      	ldr	r3, [r7, #12]
   17524:	2b00      	cmp	r3, #0
   17526:	d002      	beq.n	1752e <mp_seq_cmp_objs+0x2c>
   17528:	68fb      	ldr	r3, [r7, #12]
   1752a:	2b03      	cmp	r3, #3
   1752c:	d113      	bne.n	17556 <mp_seq_cmp_objs+0x54>
        SWAP(const mp_obj_t *, items1, items2);
   1752e:	683b      	ldr	r3, [r7, #0]
   17530:	61bb      	str	r3, [r7, #24]
   17532:	68bb      	ldr	r3, [r7, #8]
   17534:	603b      	str	r3, [r7, #0]
   17536:	69bb      	ldr	r3, [r7, #24]
   17538:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   1753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1753c:	617b      	str	r3, [r7, #20]
   1753e:	687b      	ldr	r3, [r7, #4]
   17540:	62bb      	str	r3, [r7, #40]	; 0x28
   17542:	697b      	ldr	r3, [r7, #20]
   17544:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17546:	68fb      	ldr	r3, [r7, #12]
   17548:	2b00      	cmp	r3, #0
   1754a:	d102      	bne.n	17552 <mp_seq_cmp_objs+0x50>
            op = MP_BINARY_OP_MORE;
   1754c:	2301      	movs	r3, #1
   1754e:	60fb      	str	r3, [r7, #12]
   17550:	e001      	b.n	17556 <mp_seq_cmp_objs+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17552:	2304      	movs	r3, #4
   17554:	60fb      	str	r3, [r7, #12]
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   17556:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17558:	687b      	ldr	r3, [r7, #4]
   1755a:	4293      	cmp	r3, r2
   1755c:	bf28      	it	cs
   1755e:	4613      	movcs	r3, r2
   17560:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < len; i++) {
   17562:	2300      	movs	r3, #0
   17564:	61fb      	str	r3, [r7, #28]
   17566:	e02e      	b.n	175c6 <mp_seq_cmp_objs+0xc4>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   17568:	69fb      	ldr	r3, [r7, #28]
   1756a:	009b      	lsls	r3, r3, #2
   1756c:	68ba      	ldr	r2, [r7, #8]
   1756e:	4413      	add	r3, r2
   17570:	6818      	ldr	r0, [r3, #0]
   17572:	69fb      	ldr	r3, [r7, #28]
   17574:	009b      	lsls	r3, r3, #2
   17576:	683a      	ldr	r2, [r7, #0]
   17578:	4413      	add	r3, r2
   1757a:	681b      	ldr	r3, [r3, #0]
   1757c:	4619      	mov	r1, r3
   1757e:	f7f6 fa05 	bl	d98c <mp_obj_equal>
   17582:	4603      	mov	r3, r0
   17584:	2b00      	cmp	r3, #0
   17586:	d003      	beq.n	17590 <mp_seq_cmp_objs+0x8e>
    for (size_t i = 0; i < len; i++) {
   17588:	69fb      	ldr	r3, [r7, #28]
   1758a:	3301      	adds	r3, #1
   1758c:	61fb      	str	r3, [r7, #28]
   1758e:	e01a      	b.n	175c6 <mp_seq_cmp_objs+0xc4>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   17590:	68fb      	ldr	r3, [r7, #12]
   17592:	2b02      	cmp	r3, #2
   17594:	d101      	bne.n	1759a <mp_seq_cmp_objs+0x98>
            // In particular, if we are checking for equality, here're the answer
            return false;
   17596:	2300      	movs	r3, #0
   17598:	e029      	b.n	175ee <mp_seq_cmp_objs+0xec>
        }

        // Otherwise, application of relation op gives the answer
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   1759a:	69fb      	ldr	r3, [r7, #28]
   1759c:	009b      	lsls	r3, r3, #2
   1759e:	68ba      	ldr	r2, [r7, #8]
   175a0:	4413      	add	r3, r2
   175a2:	6819      	ldr	r1, [r3, #0]
   175a4:	69fb      	ldr	r3, [r7, #28]
   175a6:	009b      	lsls	r3, r3, #2
   175a8:	683a      	ldr	r2, [r7, #0]
   175aa:	4413      	add	r3, r2
   175ac:	681b      	ldr	r3, [r3, #0]
   175ae:	461a      	mov	r2, r3
   175b0:	68f8      	ldr	r0, [r7, #12]
   175b2:	f7f4 f92b 	bl	b80c <mp_binary_op>
   175b6:	4602      	mov	r2, r0
   175b8:	4b0f      	ldr	r3, [pc, #60]	; (175f8 <mp_seq_cmp_objs+0xf6>)
   175ba:	429a      	cmp	r2, r3
   175bc:	bf0c      	ite	eq
   175be:	2301      	moveq	r3, #1
   175c0:	2300      	movne	r3, #0
   175c2:	b2db      	uxtb	r3, r3
   175c4:	e013      	b.n	175ee <mp_seq_cmp_objs+0xec>
    for (size_t i = 0; i < len; i++) {
   175c6:	69fa      	ldr	r2, [r7, #28]
   175c8:	693b      	ldr	r3, [r7, #16]
   175ca:	429a      	cmp	r2, r3
   175cc:	d3cc      	bcc.n	17568 <mp_seq_cmp_objs+0x66>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   175ce:	687a      	ldr	r2, [r7, #4]
   175d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   175d2:	429a      	cmp	r2, r3
   175d4:	d005      	beq.n	175e2 <mp_seq_cmp_objs+0xe0>
        if (len1 < len2) {
   175d6:	687a      	ldr	r2, [r7, #4]
   175d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   175da:	429a      	cmp	r2, r3
   175dc:	d206      	bcs.n	175ec <mp_seq_cmp_objs+0xea>
            // ... then longer list length wins (we deal only with >)
            return false;
   175de:	2300      	movs	r3, #0
   175e0:	e005      	b.n	175ee <mp_seq_cmp_objs+0xec>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   175e2:	68fb      	ldr	r3, [r7, #12]
   175e4:	2b01      	cmp	r3, #1
   175e6:	d101      	bne.n	175ec <mp_seq_cmp_objs+0xea>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
   175e8:	2300      	movs	r3, #0
   175ea:	e000      	b.n	175ee <mp_seq_cmp_objs+0xec>
    }

    return true;
   175ec:	2301      	movs	r3, #1
}
   175ee:	4618      	mov	r0, r3
   175f0:	3720      	adds	r7, #32
   175f2:	46bd      	mov	sp, r7
   175f4:	bd80      	pop	{r7, pc}
   175f6:	bf00      	nop
   175f8:	00021310 	.word	0x00021310

000175fc <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   175fc:	b580      	push	{r7, lr}
   175fe:	b08a      	sub	sp, #40	; 0x28
   17600:	af00      	add	r7, sp, #0
   17602:	60f8      	str	r0, [r7, #12]
   17604:	60b9      	str	r1, [r7, #8]
   17606:	607a      	str	r2, [r7, #4]
   17608:	603b      	str	r3, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   1760a:	683b      	ldr	r3, [r7, #0]
   1760c:	681b      	ldr	r3, [r3, #0]
   1760e:	4618      	mov	r0, r3
   17610:	f7f6 f86a 	bl	d6e8 <mp_obj_get_type>
   17614:	61b8      	str	r0, [r7, #24]
    mp_obj_t value = args[1];
   17616:	683b      	ldr	r3, [r7, #0]
   17618:	685b      	ldr	r3, [r3, #4]
   1761a:	617b      	str	r3, [r7, #20]
    size_t start = 0;
   1761c:	2300      	movs	r3, #0
   1761e:	627b      	str	r3, [r7, #36]	; 0x24
    size_t stop = len;
   17620:	68bb      	ldr	r3, [r7, #8]
   17622:	623b      	str	r3, [r7, #32]

    if (n_args >= 3) {
   17624:	687b      	ldr	r3, [r7, #4]
   17626:	2b02      	cmp	r3, #2
   17628:	d914      	bls.n	17654 <mp_seq_index_obj+0x58>
        start = mp_get_index(type, len, args[2], true);
   1762a:	683b      	ldr	r3, [r7, #0]
   1762c:	3308      	adds	r3, #8
   1762e:	681a      	ldr	r2, [r3, #0]
   17630:	2301      	movs	r3, #1
   17632:	68b9      	ldr	r1, [r7, #8]
   17634:	69b8      	ldr	r0, [r7, #24]
   17636:	f7f6 fb1f 	bl	dc78 <mp_get_index>
   1763a:	6278      	str	r0, [r7, #36]	; 0x24
        if (n_args >= 4) {
   1763c:	687b      	ldr	r3, [r7, #4]
   1763e:	2b03      	cmp	r3, #3
   17640:	d908      	bls.n	17654 <mp_seq_index_obj+0x58>
            stop = mp_get_index(type, len, args[3], true);
   17642:	683b      	ldr	r3, [r7, #0]
   17644:	330c      	adds	r3, #12
   17646:	681a      	ldr	r2, [r3, #0]
   17648:	2301      	movs	r3, #1
   1764a:	68b9      	ldr	r1, [r7, #8]
   1764c:	69b8      	ldr	r0, [r7, #24]
   1764e:	f7f6 fb13 	bl	dc78 <mp_get_index>
   17652:	6238      	str	r0, [r7, #32]
        }
    }

    for (size_t i = start; i < stop; i++) {
   17654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17656:	61fb      	str	r3, [r7, #28]
   17658:	e013      	b.n	17682 <mp_seq_index_obj+0x86>
        if (mp_obj_equal(items[i], value)) {
   1765a:	69fb      	ldr	r3, [r7, #28]
   1765c:	009b      	lsls	r3, r3, #2
   1765e:	68fa      	ldr	r2, [r7, #12]
   17660:	4413      	add	r3, r2
   17662:	681b      	ldr	r3, [r3, #0]
   17664:	6979      	ldr	r1, [r7, #20]
   17666:	4618      	mov	r0, r3
   17668:	f7f6 f990 	bl	d98c <mp_obj_equal>
   1766c:	4603      	mov	r3, r0
   1766e:	2b00      	cmp	r3, #0
   17670:	d004      	beq.n	1767c <mp_seq_index_obj+0x80>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
   17672:	69fb      	ldr	r3, [r7, #28]
   17674:	005b      	lsls	r3, r3, #1
   17676:	f043 0301 	orr.w	r3, r3, #1
   1767a:	e009      	b.n	17690 <mp_seq_index_obj+0x94>
    for (size_t i = start; i < stop; i++) {
   1767c:	69fb      	ldr	r3, [r7, #28]
   1767e:	3301      	adds	r3, #1
   17680:	61fb      	str	r3, [r7, #28]
   17682:	69fa      	ldr	r2, [r7, #28]
   17684:	6a3b      	ldr	r3, [r7, #32]
   17686:	429a      	cmp	r2, r3
   17688:	d3e7      	bcc.n	1765a <mp_seq_index_obj+0x5e>
        }
    }

    mp_raise_ValueError("object not in sequence");
   1768a:	4803      	ldr	r0, [pc, #12]	; (17698 <mp_seq_index_obj+0x9c>)
   1768c:	f7f5 fc0b 	bl	cea6 <mp_raise_ValueError>
}
   17690:	4618      	mov	r0, r3
   17692:	3728      	adds	r7, #40	; 0x28
   17694:	46bd      	mov	sp, r7
   17696:	bd80      	pop	{r7, pc}
   17698:	00023b94 	.word	0x00023b94

0001769c <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   1769c:	b580      	push	{r7, lr}
   1769e:	b086      	sub	sp, #24
   176a0:	af00      	add	r7, sp, #0
   176a2:	60f8      	str	r0, [r7, #12]
   176a4:	60b9      	str	r1, [r7, #8]
   176a6:	607a      	str	r2, [r7, #4]
    size_t count = 0;
   176a8:	2300      	movs	r3, #0
   176aa:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   176ac:	2300      	movs	r3, #0
   176ae:	613b      	str	r3, [r7, #16]
   176b0:	e011      	b.n	176d6 <mp_seq_count_obj+0x3a>
         if (mp_obj_equal(items[i], value)) {
   176b2:	693b      	ldr	r3, [r7, #16]
   176b4:	009b      	lsls	r3, r3, #2
   176b6:	68fa      	ldr	r2, [r7, #12]
   176b8:	4413      	add	r3, r2
   176ba:	681b      	ldr	r3, [r3, #0]
   176bc:	6879      	ldr	r1, [r7, #4]
   176be:	4618      	mov	r0, r3
   176c0:	f7f6 f964 	bl	d98c <mp_obj_equal>
   176c4:	4603      	mov	r3, r0
   176c6:	2b00      	cmp	r3, #0
   176c8:	d002      	beq.n	176d0 <mp_seq_count_obj+0x34>
              count++;
   176ca:	697b      	ldr	r3, [r7, #20]
   176cc:	3301      	adds	r3, #1
   176ce:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   176d0:	693b      	ldr	r3, [r7, #16]
   176d2:	3301      	adds	r3, #1
   176d4:	613b      	str	r3, [r7, #16]
   176d6:	693a      	ldr	r2, [r7, #16]
   176d8:	68bb      	ldr	r3, [r7, #8]
   176da:	429a      	cmp	r2, r3
   176dc:	d3e9      	bcc.n	176b2 <mp_seq_count_obj+0x16>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   176de:	697b      	ldr	r3, [r7, #20]
   176e0:	005b      	lsls	r3, r3, #1
   176e2:	f043 0301 	orr.w	r3, r3, #1
}
   176e6:	4618      	mov	r0, r3
   176e8:	3718      	adds	r7, #24
   176ea:	46bd      	mov	sp, r7
   176ec:	bd80      	pop	{r7, pc}
   176ee:	bf00      	nop

000176f0 <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   176f0:	b580      	push	{r7, lr}
   176f2:	b084      	sub	sp, #16
   176f4:	af00      	add	r7, sp, #0
   176f6:	4603      	mov	r3, r0
   176f8:	603a      	str	r2, [r7, #0]
   176fa:	71fb      	strb	r3, [r7, #7]
   176fc:	460b      	mov	r3, r1
   176fe:	71bb      	strb	r3, [r7, #6]
    size_t size = 0;
   17700:	2300      	movs	r3, #0
   17702:	60fb      	str	r3, [r7, #12]
    int align = 1;
   17704:	2301      	movs	r3, #1
   17706:	60bb      	str	r3, [r7, #8]
    switch (struct_type) {
   17708:	79fb      	ldrb	r3, [r7, #7]
   1770a:	2b3e      	cmp	r3, #62	; 0x3e
   1770c:	d005      	beq.n	1771a <mp_binary_get_size+0x2a>
   1770e:	2b40      	cmp	r3, #64	; 0x40
   17710:	f000 8085 	beq.w	1781e <mp_binary_get_size+0x12e>
   17714:	2b3c      	cmp	r3, #60	; 0x3c
   17716:	f040 8196 	bne.w	17a46 <mp_binary_get_size+0x356>
        case '<': case '>':
            switch (val_type) {
   1771a:	79bb      	ldrb	r3, [r7, #6]
   1771c:	3b42      	subs	r3, #66	; 0x42
   1771e:	2b2f      	cmp	r3, #47	; 0x2f
   17720:	f200 8190 	bhi.w	17a44 <mp_binary_get_size+0x354>
   17724:	a201      	add	r2, pc, #4	; (adr r2, 1772c <mp_binary_get_size+0x3c>)
   17726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1772a:	bf00      	nop
   1772c:	000177ed 	.word	0x000177ed
   17730:	00017a45 	.word	0x00017a45
   17734:	00017a45 	.word	0x00017a45
   17738:	00017a45 	.word	0x00017a45
   1773c:	00017a45 	.word	0x00017a45
   17740:	00017a45 	.word	0x00017a45
   17744:	000177f3 	.word	0x000177f3
   17748:	000177f9 	.word	0x000177f9
   1774c:	00017a45 	.word	0x00017a45
   17750:	00017a45 	.word	0x00017a45
   17754:	000177ff 	.word	0x000177ff
   17758:	00017a45 	.word	0x00017a45
   1775c:	00017a45 	.word	0x00017a45
   17760:	0001780b 	.word	0x0001780b
   17764:	0001780b 	.word	0x0001780b
   17768:	00017805 	.word	0x00017805
   1776c:	00017a45 	.word	0x00017a45
   17770:	0001780b 	.word	0x0001780b
   17774:	00017a45 	.word	0x00017a45
   17778:	00017a45 	.word	0x00017a45
   1777c:	00017a45 	.word	0x00017a45
   17780:	00017a45 	.word	0x00017a45
   17784:	00017a45 	.word	0x00017a45
   17788:	00017a45 	.word	0x00017a45
   1778c:	00017a45 	.word	0x00017a45
   17790:	00017a45 	.word	0x00017a45
   17794:	00017a45 	.word	0x00017a45
   17798:	00017a45 	.word	0x00017a45
   1779c:	00017a45 	.word	0x00017a45
   177a0:	00017a45 	.word	0x00017a45
   177a4:	00017a45 	.word	0x00017a45
   177a8:	00017a45 	.word	0x00017a45
   177ac:	000177ed 	.word	0x000177ed
   177b0:	00017a45 	.word	0x00017a45
   177b4:	00017817 	.word	0x00017817
   177b8:	00017a45 	.word	0x00017a45
   177bc:	00017811 	.word	0x00017811
   177c0:	00017a45 	.word	0x00017a45
   177c4:	000177f3 	.word	0x000177f3
   177c8:	000177f9 	.word	0x000177f9
   177cc:	00017a45 	.word	0x00017a45
   177d0:	00017a45 	.word	0x00017a45
   177d4:	000177ff 	.word	0x000177ff
   177d8:	00017a45 	.word	0x00017a45
   177dc:	00017a45 	.word	0x00017a45
   177e0:	00017a45 	.word	0x00017a45
   177e4:	00017a45 	.word	0x00017a45
   177e8:	00017805 	.word	0x00017805
                case 'b': case 'B':
                    size = 1; break;
   177ec:	2301      	movs	r3, #1
   177ee:	60fb      	str	r3, [r7, #12]
   177f0:	e014      	b.n	1781c <mp_binary_get_size+0x12c>
                case 'h': case 'H':
                    size = 2; break;
   177f2:	2302      	movs	r3, #2
   177f4:	60fb      	str	r3, [r7, #12]
   177f6:	e011      	b.n	1781c <mp_binary_get_size+0x12c>
                case 'i': case 'I':
                    size = 4; break;
   177f8:	2304      	movs	r3, #4
   177fa:	60fb      	str	r3, [r7, #12]
   177fc:	e00e      	b.n	1781c <mp_binary_get_size+0x12c>
                case 'l': case 'L':
                    size = 4; break;
   177fe:	2304      	movs	r3, #4
   17800:	60fb      	str	r3, [r7, #12]
   17802:	e00b      	b.n	1781c <mp_binary_get_size+0x12c>
                case 'q': case 'Q':
                    size = 8; break;
   17804:	2308      	movs	r3, #8
   17806:	60fb      	str	r3, [r7, #12]
   17808:	e008      	b.n	1781c <mp_binary_get_size+0x12c>
                case 'P': case 'O': case 'S':
                    size = sizeof(void*); break;
   1780a:	2304      	movs	r3, #4
   1780c:	60fb      	str	r3, [r7, #12]
   1780e:	e005      	b.n	1781c <mp_binary_get_size+0x12c>
                case 'f':
                    size = sizeof(float); break;
   17810:	2304      	movs	r3, #4
   17812:	60fb      	str	r3, [r7, #12]
   17814:	e002      	b.n	1781c <mp_binary_get_size+0x12c>
                case 'd':
                    size = sizeof(double); break;
   17816:	2308      	movs	r3, #8
   17818:	60fb      	str	r3, [r7, #12]
   1781a:	bf00      	nop
            }
            break;
   1781c:	e112      	b.n	17a44 <mp_binary_get_size+0x354>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   1781e:	79bb      	ldrb	r3, [r7, #6]
   17820:	3b01      	subs	r3, #1
   17822:	2b70      	cmp	r3, #112	; 0x70
   17824:	f200 810f 	bhi.w	17a46 <mp_binary_get_size+0x356>
   17828:	a201      	add	r2, pc, #4	; (adr r2, 17830 <mp_binary_get_size+0x140>)
   1782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1782e:	bf00      	nop
   17830:	000179f5 	.word	0x000179f5
   17834:	00017a47 	.word	0x00017a47
   17838:	00017a47 	.word	0x00017a47
   1783c:	00017a47 	.word	0x00017a47
   17840:	00017a47 	.word	0x00017a47
   17844:	00017a47 	.word	0x00017a47
   17848:	00017a47 	.word	0x00017a47
   1784c:	00017a47 	.word	0x00017a47
   17850:	00017a47 	.word	0x00017a47
   17854:	00017a47 	.word	0x00017a47
   17858:	00017a47 	.word	0x00017a47
   1785c:	00017a47 	.word	0x00017a47
   17860:	00017a47 	.word	0x00017a47
   17864:	00017a47 	.word	0x00017a47
   17868:	00017a47 	.word	0x00017a47
   1786c:	00017a47 	.word	0x00017a47
   17870:	00017a47 	.word	0x00017a47
   17874:	00017a47 	.word	0x00017a47
   17878:	00017a47 	.word	0x00017a47
   1787c:	00017a47 	.word	0x00017a47
   17880:	00017a47 	.word	0x00017a47
   17884:	00017a47 	.word	0x00017a47
   17888:	00017a47 	.word	0x00017a47
   1788c:	00017a47 	.word	0x00017a47
   17890:	00017a47 	.word	0x00017a47
   17894:	00017a47 	.word	0x00017a47
   17898:	00017a47 	.word	0x00017a47
   1789c:	00017a47 	.word	0x00017a47
   178a0:	00017a47 	.word	0x00017a47
   178a4:	00017a47 	.word	0x00017a47
   178a8:	00017a47 	.word	0x00017a47
   178ac:	00017a47 	.word	0x00017a47
   178b0:	00017a47 	.word	0x00017a47
   178b4:	00017a47 	.word	0x00017a47
   178b8:	00017a47 	.word	0x00017a47
   178bc:	00017a47 	.word	0x00017a47
   178c0:	00017a47 	.word	0x00017a47
   178c4:	00017a47 	.word	0x00017a47
   178c8:	00017a47 	.word	0x00017a47
   178cc:	00017a47 	.word	0x00017a47
   178d0:	00017a47 	.word	0x00017a47
   178d4:	00017a47 	.word	0x00017a47
   178d8:	00017a47 	.word	0x00017a47
   178dc:	00017a47 	.word	0x00017a47
   178e0:	00017a47 	.word	0x00017a47
   178e4:	00017a47 	.word	0x00017a47
   178e8:	00017a47 	.word	0x00017a47
   178ec:	00017a47 	.word	0x00017a47
   178f0:	00017a47 	.word	0x00017a47
   178f4:	00017a47 	.word	0x00017a47
   178f8:	00017a47 	.word	0x00017a47
   178fc:	00017a47 	.word	0x00017a47
   17900:	00017a47 	.word	0x00017a47
   17904:	00017a47 	.word	0x00017a47
   17908:	00017a47 	.word	0x00017a47
   1790c:	00017a47 	.word	0x00017a47
   17910:	00017a47 	.word	0x00017a47
   17914:	00017a47 	.word	0x00017a47
   17918:	00017a47 	.word	0x00017a47
   1791c:	00017a47 	.word	0x00017a47
   17920:	00017a47 	.word	0x00017a47
   17924:	00017a47 	.word	0x00017a47
   17928:	00017a47 	.word	0x00017a47
   1792c:	00017a47 	.word	0x00017a47
   17930:	00017a47 	.word	0x00017a47
   17934:	000179f5 	.word	0x000179f5
   17938:	00017a47 	.word	0x00017a47
   1793c:	00017a47 	.word	0x00017a47
   17940:	00017a47 	.word	0x00017a47
   17944:	00017a47 	.word	0x00017a47
   17948:	00017a47 	.word	0x00017a47
   1794c:	000179ff 	.word	0x000179ff
   17950:	00017a09 	.word	0x00017a09
   17954:	00017a47 	.word	0x00017a47
   17958:	00017a47 	.word	0x00017a47
   1795c:	00017a13 	.word	0x00017a13
   17960:	00017a47 	.word	0x00017a47
   17964:	00017a47 	.word	0x00017a47
   17968:	00017a27 	.word	0x00017a27
   1796c:	00017a27 	.word	0x00017a27
   17970:	00017a1d 	.word	0x00017a1d
   17974:	00017a47 	.word	0x00017a47
   17978:	00017a27 	.word	0x00017a27
   1797c:	00017a47 	.word	0x00017a47
   17980:	00017a47 	.word	0x00017a47
   17984:	00017a47 	.word	0x00017a47
   17988:	00017a47 	.word	0x00017a47
   1798c:	00017a47 	.word	0x00017a47
   17990:	00017a47 	.word	0x00017a47
   17994:	00017a47 	.word	0x00017a47
   17998:	00017a47 	.word	0x00017a47
   1799c:	00017a47 	.word	0x00017a47
   179a0:	00017a47 	.word	0x00017a47
   179a4:	00017a47 	.word	0x00017a47
   179a8:	00017a47 	.word	0x00017a47
   179ac:	00017a47 	.word	0x00017a47
   179b0:	00017a47 	.word	0x00017a47
   179b4:	000179f5 	.word	0x000179f5
   179b8:	00017a47 	.word	0x00017a47
   179bc:	00017a3b 	.word	0x00017a3b
   179c0:	00017a47 	.word	0x00017a47
   179c4:	00017a31 	.word	0x00017a31
   179c8:	00017a47 	.word	0x00017a47
   179cc:	000179ff 	.word	0x000179ff
   179d0:	00017a09 	.word	0x00017a09
   179d4:	00017a47 	.word	0x00017a47
   179d8:	00017a47 	.word	0x00017a47
   179dc:	00017a13 	.word	0x00017a13
   179e0:	00017a47 	.word	0x00017a47
   179e4:	00017a47 	.word	0x00017a47
   179e8:	00017a47 	.word	0x00017a47
   179ec:	00017a47 	.word	0x00017a47
   179f0:	00017a1d 	.word	0x00017a1d
                case BYTEARRAY_TYPECODE:
                case 'b': case 'B':
                    align = size = 1; break;
   179f4:	2301      	movs	r3, #1
   179f6:	60fb      	str	r3, [r7, #12]
   179f8:	2301      	movs	r3, #1
   179fa:	60bb      	str	r3, [r7, #8]
   179fc:	e023      	b.n	17a46 <mp_binary_get_size+0x356>
                case 'h': case 'H':
                    align = alignof(short);
   179fe:	2302      	movs	r3, #2
   17a00:	60bb      	str	r3, [r7, #8]
                    size = sizeof(short); break;
   17a02:	2302      	movs	r3, #2
   17a04:	60fb      	str	r3, [r7, #12]
   17a06:	e01e      	b.n	17a46 <mp_binary_get_size+0x356>
                case 'i': case 'I':
                    align = alignof(int);
   17a08:	2304      	movs	r3, #4
   17a0a:	60bb      	str	r3, [r7, #8]
                    size = sizeof(int); break;
   17a0c:	2304      	movs	r3, #4
   17a0e:	60fb      	str	r3, [r7, #12]
   17a10:	e019      	b.n	17a46 <mp_binary_get_size+0x356>
                case 'l': case 'L':
                    align = alignof(long);
   17a12:	2304      	movs	r3, #4
   17a14:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long); break;
   17a16:	2304      	movs	r3, #4
   17a18:	60fb      	str	r3, [r7, #12]
   17a1a:	e014      	b.n	17a46 <mp_binary_get_size+0x356>
                case 'q': case 'Q':
                    align = alignof(long long);
   17a1c:	2308      	movs	r3, #8
   17a1e:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long long); break;
   17a20:	2308      	movs	r3, #8
   17a22:	60fb      	str	r3, [r7, #12]
   17a24:	e00f      	b.n	17a46 <mp_binary_get_size+0x356>
                case 'P': case 'O': case 'S':
                    align = alignof(void*);
   17a26:	2304      	movs	r3, #4
   17a28:	60bb      	str	r3, [r7, #8]
                    size = sizeof(void*); break;
   17a2a:	2304      	movs	r3, #4
   17a2c:	60fb      	str	r3, [r7, #12]
   17a2e:	e00a      	b.n	17a46 <mp_binary_get_size+0x356>
                case 'f':
                    align = alignof(float);
   17a30:	2304      	movs	r3, #4
   17a32:	60bb      	str	r3, [r7, #8]
                    size = sizeof(float); break;
   17a34:	2304      	movs	r3, #4
   17a36:	60fb      	str	r3, [r7, #12]
   17a38:	e005      	b.n	17a46 <mp_binary_get_size+0x356>
                case 'd':
                    align = alignof(double);
   17a3a:	2308      	movs	r3, #8
   17a3c:	60bb      	str	r3, [r7, #8]
                    size = sizeof(double); break;
   17a3e:	2308      	movs	r3, #8
   17a40:	60fb      	str	r3, [r7, #12]
   17a42:	e000      	b.n	17a46 <mp_binary_get_size+0x356>
            break;
   17a44:	bf00      	nop
            }
        }
    }

    if (size == 0) {
   17a46:	68fb      	ldr	r3, [r7, #12]
   17a48:	2b00      	cmp	r3, #0
   17a4a:	d102      	bne.n	17a52 <mp_binary_get_size+0x362>
        mp_raise_ValueError("bad typecode");
   17a4c:	4806      	ldr	r0, [pc, #24]	; (17a68 <mp_binary_get_size+0x378>)
   17a4e:	f7f5 fa2a 	bl	cea6 <mp_raise_ValueError>
    }

    if (palign != NULL) {
   17a52:	683b      	ldr	r3, [r7, #0]
   17a54:	2b00      	cmp	r3, #0
   17a56:	d002      	beq.n	17a5e <mp_binary_get_size+0x36e>
        *palign = align;
   17a58:	68ba      	ldr	r2, [r7, #8]
   17a5a:	683b      	ldr	r3, [r7, #0]
   17a5c:	601a      	str	r2, [r3, #0]
    }
    return size;
   17a5e:	68fb      	ldr	r3, [r7, #12]
}
   17a60:	4618      	mov	r0, r3
   17a62:	3710      	adds	r7, #16
   17a64:	46bd      	mov	sp, r7
   17a66:	bd80      	pop	{r7, pc}
   17a68:	00023bac 	.word	0x00023bac

00017a6c <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   17a6c:	b580      	push	{r7, lr}
   17a6e:	b086      	sub	sp, #24
   17a70:	af00      	add	r7, sp, #0
   17a72:	4603      	mov	r3, r0
   17a74:	60b9      	str	r1, [r7, #8]
   17a76:	607a      	str	r2, [r7, #4]
   17a78:	73fb      	strb	r3, [r7, #15]
    mp_int_t val = 0;
   17a7a:	2300      	movs	r3, #0
   17a7c:	617b      	str	r3, [r7, #20]
    switch (typecode) {
   17a7e:	7bfb      	ldrb	r3, [r7, #15]
   17a80:	3b01      	subs	r3, #1
   17a82:	2b6b      	cmp	r3, #107	; 0x6b
   17a84:	f200 8130 	bhi.w	17ce8 <mp_binary_get_val_array+0x27c>
   17a88:	a201      	add	r2, pc, #4	; (adr r2, 17a90 <mp_binary_get_val_array+0x24>)
   17a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17a8e:	bf00      	nop
   17a90:	00017c4f 	.word	0x00017c4f
   17a94:	00017ce9 	.word	0x00017ce9
   17a98:	00017ce9 	.word	0x00017ce9
   17a9c:	00017ce9 	.word	0x00017ce9
   17aa0:	00017ce9 	.word	0x00017ce9
   17aa4:	00017ce9 	.word	0x00017ce9
   17aa8:	00017ce9 	.word	0x00017ce9
   17aac:	00017ce9 	.word	0x00017ce9
   17ab0:	00017ce9 	.word	0x00017ce9
   17ab4:	00017ce9 	.word	0x00017ce9
   17ab8:	00017ce9 	.word	0x00017ce9
   17abc:	00017ce9 	.word	0x00017ce9
   17ac0:	00017ce9 	.word	0x00017ce9
   17ac4:	00017ce9 	.word	0x00017ce9
   17ac8:	00017ce9 	.word	0x00017ce9
   17acc:	00017ce9 	.word	0x00017ce9
   17ad0:	00017ce9 	.word	0x00017ce9
   17ad4:	00017ce9 	.word	0x00017ce9
   17ad8:	00017ce9 	.word	0x00017ce9
   17adc:	00017ce9 	.word	0x00017ce9
   17ae0:	00017ce9 	.word	0x00017ce9
   17ae4:	00017ce9 	.word	0x00017ce9
   17ae8:	00017ce9 	.word	0x00017ce9
   17aec:	00017ce9 	.word	0x00017ce9
   17af0:	00017ce9 	.word	0x00017ce9
   17af4:	00017ce9 	.word	0x00017ce9
   17af8:	00017ce9 	.word	0x00017ce9
   17afc:	00017ce9 	.word	0x00017ce9
   17b00:	00017ce9 	.word	0x00017ce9
   17b04:	00017ce9 	.word	0x00017ce9
   17b08:	00017ce9 	.word	0x00017ce9
   17b0c:	00017ce9 	.word	0x00017ce9
   17b10:	00017ce9 	.word	0x00017ce9
   17b14:	00017ce9 	.word	0x00017ce9
   17b18:	00017ce9 	.word	0x00017ce9
   17b1c:	00017ce9 	.word	0x00017ce9
   17b20:	00017ce9 	.word	0x00017ce9
   17b24:	00017ce9 	.word	0x00017ce9
   17b28:	00017ce9 	.word	0x00017ce9
   17b2c:	00017ce9 	.word	0x00017ce9
   17b30:	00017ce9 	.word	0x00017ce9
   17b34:	00017ce9 	.word	0x00017ce9
   17b38:	00017ce9 	.word	0x00017ce9
   17b3c:	00017ce9 	.word	0x00017ce9
   17b40:	00017ce9 	.word	0x00017ce9
   17b44:	00017ce9 	.word	0x00017ce9
   17b48:	00017ce9 	.word	0x00017ce9
   17b4c:	00017ce9 	.word	0x00017ce9
   17b50:	00017ce9 	.word	0x00017ce9
   17b54:	00017ce9 	.word	0x00017ce9
   17b58:	00017ce9 	.word	0x00017ce9
   17b5c:	00017ce9 	.word	0x00017ce9
   17b60:	00017ce9 	.word	0x00017ce9
   17b64:	00017ce9 	.word	0x00017ce9
   17b68:	00017ce9 	.word	0x00017ce9
   17b6c:	00017ce9 	.word	0x00017ce9
   17b70:	00017ce9 	.word	0x00017ce9
   17b74:	00017ce9 	.word	0x00017ce9
   17b78:	00017ce9 	.word	0x00017ce9
   17b7c:	00017ce9 	.word	0x00017ce9
   17b80:	00017ce9 	.word	0x00017ce9
   17b84:	00017ce9 	.word	0x00017ce9
   17b88:	00017ce9 	.word	0x00017ce9
   17b8c:	00017ce9 	.word	0x00017ce9
   17b90:	00017ce9 	.word	0x00017ce9
   17b94:	00017c4f 	.word	0x00017c4f
   17b98:	00017ce9 	.word	0x00017ce9
   17b9c:	00017ce9 	.word	0x00017ce9
   17ba0:	00017ce9 	.word	0x00017ce9
   17ba4:	00017ce9 	.word	0x00017ce9
   17ba8:	00017ce9 	.word	0x00017ce9
   17bac:	00017c6b 	.word	0x00017c6b
   17bb0:	00017c8d 	.word	0x00017c8d
   17bb4:	00017ce9 	.word	0x00017ce9
   17bb8:	00017ce9 	.word	0x00017ce9
   17bbc:	00017cb5 	.word	0x00017cb5
   17bc0:	00017ce9 	.word	0x00017ce9
   17bc4:	00017ce9 	.word	0x00017ce9
   17bc8:	00017cc9 	.word	0x00017cc9
   17bcc:	00017cd5 	.word	0x00017cd5
   17bd0:	00017ce9 	.word	0x00017ce9
   17bd4:	00017ce9 	.word	0x00017ce9
   17bd8:	00017ce9 	.word	0x00017ce9
   17bdc:	00017ce9 	.word	0x00017ce9
   17be0:	00017ce9 	.word	0x00017ce9
   17be4:	00017ce9 	.word	0x00017ce9
   17be8:	00017ce9 	.word	0x00017ce9
   17bec:	00017ce9 	.word	0x00017ce9
   17bf0:	00017ce9 	.word	0x00017ce9
   17bf4:	00017ce9 	.word	0x00017ce9
   17bf8:	00017ce9 	.word	0x00017ce9
   17bfc:	00017ce9 	.word	0x00017ce9
   17c00:	00017ce9 	.word	0x00017ce9
   17c04:	00017ce9 	.word	0x00017ce9
   17c08:	00017ce9 	.word	0x00017ce9
   17c0c:	00017ce9 	.word	0x00017ce9
   17c10:	00017ce9 	.word	0x00017ce9
   17c14:	00017c41 	.word	0x00017c41
   17c18:	00017ce9 	.word	0x00017ce9
   17c1c:	00017ce9 	.word	0x00017ce9
   17c20:	00017ce9 	.word	0x00017ce9
   17c24:	00017ce9 	.word	0x00017ce9
   17c28:	00017ce9 	.word	0x00017ce9
   17c2c:	00017c5b 	.word	0x00017c5b
   17c30:	00017c79 	.word	0x00017c79
   17c34:	00017ce9 	.word	0x00017ce9
   17c38:	00017ce9 	.word	0x00017ce9
   17c3c:	00017ca1 	.word	0x00017ca1
        case 'b':
            val = ((signed char*)p)[index];
   17c40:	68ba      	ldr	r2, [r7, #8]
   17c42:	687b      	ldr	r3, [r7, #4]
   17c44:	4413      	add	r3, r2
   17c46:	f993 3000 	ldrsb.w	r3, [r3]
   17c4a:	617b      	str	r3, [r7, #20]
            break;
   17c4c:	e04c      	b.n	17ce8 <mp_binary_get_val_array+0x27c>
        case BYTEARRAY_TYPECODE:
        case 'B':
            val = ((unsigned char*)p)[index];
   17c4e:	68ba      	ldr	r2, [r7, #8]
   17c50:	687b      	ldr	r3, [r7, #4]
   17c52:	4413      	add	r3, r2
   17c54:	781b      	ldrb	r3, [r3, #0]
   17c56:	617b      	str	r3, [r7, #20]
            break;
   17c58:	e046      	b.n	17ce8 <mp_binary_get_val_array+0x27c>
        case 'h':
            val = ((short*)p)[index];
   17c5a:	687b      	ldr	r3, [r7, #4]
   17c5c:	005b      	lsls	r3, r3, #1
   17c5e:	68ba      	ldr	r2, [r7, #8]
   17c60:	4413      	add	r3, r2
   17c62:	f9b3 3000 	ldrsh.w	r3, [r3]
   17c66:	617b      	str	r3, [r7, #20]
            break;
   17c68:	e03e      	b.n	17ce8 <mp_binary_get_val_array+0x27c>
        case 'H':
            val = ((unsigned short*)p)[index];
   17c6a:	687b      	ldr	r3, [r7, #4]
   17c6c:	005b      	lsls	r3, r3, #1
   17c6e:	68ba      	ldr	r2, [r7, #8]
   17c70:	4413      	add	r3, r2
   17c72:	881b      	ldrh	r3, [r3, #0]
   17c74:	617b      	str	r3, [r7, #20]
            break;
   17c76:	e037      	b.n	17ce8 <mp_binary_get_val_array+0x27c>
        case 'i':
            return mp_obj_new_int(((int*)p)[index]);
   17c78:	687b      	ldr	r3, [r7, #4]
   17c7a:	009b      	lsls	r3, r3, #2
   17c7c:	68ba      	ldr	r2, [r7, #8]
   17c7e:	4413      	add	r3, r2
   17c80:	681b      	ldr	r3, [r3, #0]
   17c82:	4618      	mov	r0, r3
   17c84:	f7f8 fd2a 	bl	106dc <mp_obj_new_int>
   17c88:	4603      	mov	r3, r0
   17c8a:	e031      	b.n	17cf0 <mp_binary_get_val_array+0x284>
        case 'I':
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   17c8c:	687b      	ldr	r3, [r7, #4]
   17c8e:	009b      	lsls	r3, r3, #2
   17c90:	68ba      	ldr	r2, [r7, #8]
   17c92:	4413      	add	r3, r2
   17c94:	681b      	ldr	r3, [r3, #0]
   17c96:	4618      	mov	r0, r3
   17c98:	f7f8 fd06 	bl	106a8 <mp_obj_new_int_from_uint>
   17c9c:	4603      	mov	r3, r0
   17c9e:	e027      	b.n	17cf0 <mp_binary_get_val_array+0x284>
        case 'l':
            return mp_obj_new_int(((long*)p)[index]);
   17ca0:	687b      	ldr	r3, [r7, #4]
   17ca2:	009b      	lsls	r3, r3, #2
   17ca4:	68ba      	ldr	r2, [r7, #8]
   17ca6:	4413      	add	r3, r2
   17ca8:	681b      	ldr	r3, [r3, #0]
   17caa:	4618      	mov	r0, r3
   17cac:	f7f8 fd16 	bl	106dc <mp_obj_new_int>
   17cb0:	4603      	mov	r3, r0
   17cb2:	e01d      	b.n	17cf0 <mp_binary_get_val_array+0x284>
        case 'L':
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   17cb4:	687b      	ldr	r3, [r7, #4]
   17cb6:	009b      	lsls	r3, r3, #2
   17cb8:	68ba      	ldr	r2, [r7, #8]
   17cba:	4413      	add	r3, r2
   17cbc:	681b      	ldr	r3, [r3, #0]
   17cbe:	4618      	mov	r0, r3
   17cc0:	f7f8 fcf2 	bl	106a8 <mp_obj_new_int_from_uint>
   17cc4:	4603      	mov	r3, r0
   17cc6:	e013      	b.n	17cf0 <mp_binary_get_val_array+0x284>
        case 'd':
            return mp_obj_new_float(((double*)p)[index]);
#endif
        // Extension to CPython: array of objects
        case 'O':
            return ((mp_obj_t*)p)[index];
   17cc8:	687b      	ldr	r3, [r7, #4]
   17cca:	009b      	lsls	r3, r3, #2
   17ccc:	68ba      	ldr	r2, [r7, #8]
   17cce:	4413      	add	r3, r2
   17cd0:	681b      	ldr	r3, [r3, #0]
   17cd2:	e00d      	b.n	17cf0 <mp_binary_get_val_array+0x284>
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   17cd4:	687b      	ldr	r3, [r7, #4]
   17cd6:	009b      	lsls	r3, r3, #2
   17cd8:	68ba      	ldr	r2, [r7, #8]
   17cda:	4413      	add	r3, r2
   17cdc:	681b      	ldr	r3, [r3, #0]
   17cde:	4618      	mov	r0, r3
   17ce0:	f7f8 fcfc 	bl	106dc <mp_obj_new_int>
   17ce4:	4603      	mov	r3, r0
   17ce6:	e003      	b.n	17cf0 <mp_binary_get_val_array+0x284>
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   17ce8:	697b      	ldr	r3, [r7, #20]
   17cea:	005b      	lsls	r3, r3, #1
   17cec:	f043 0301 	orr.w	r3, r3, #1
}
   17cf0:	4618      	mov	r0, r3
   17cf2:	3718      	adds	r7, #24
   17cf4:	46bd      	mov	sp, r7
   17cf6:	bd80      	pop	{r7, pc}

00017cf8 <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   17cf8:	b4b0      	push	{r4, r5, r7}
   17cfa:	b08b      	sub	sp, #44	; 0x2c
   17cfc:	af00      	add	r7, sp, #0
   17cfe:	60f8      	str	r0, [r7, #12]
   17d00:	607b      	str	r3, [r7, #4]
   17d02:	460b      	mov	r3, r1
   17d04:	72fb      	strb	r3, [r7, #11]
   17d06:	4613      	mov	r3, r2
   17d08:	72bb      	strb	r3, [r7, #10]
    int delta;
    if (!big_endian) {
   17d0a:	7abb      	ldrb	r3, [r7, #10]
   17d0c:	f083 0301 	eor.w	r3, r3, #1
   17d10:	b2db      	uxtb	r3, r3
   17d12:	2b00      	cmp	r3, #0
   17d14:	d008      	beq.n	17d28 <mp_binary_get_int+0x30>
        delta = -1;
   17d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17d1a:	627b      	str	r3, [r7, #36]	; 0x24
        src += size - 1;
   17d1c:	68fb      	ldr	r3, [r7, #12]
   17d1e:	3b01      	subs	r3, #1
   17d20:	687a      	ldr	r2, [r7, #4]
   17d22:	4413      	add	r3, r2
   17d24:	607b      	str	r3, [r7, #4]
   17d26:	e001      	b.n	17d2c <mp_binary_get_int+0x34>
    } else {
        delta = 1;
   17d28:	2301      	movs	r3, #1
   17d2a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    long long val = 0;
   17d2c:	f04f 0200 	mov.w	r2, #0
   17d30:	f04f 0300 	mov.w	r3, #0
   17d34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (is_signed && *src & 0x80) {
   17d38:	7afb      	ldrb	r3, [r7, #11]
   17d3a:	2b00      	cmp	r3, #0
   17d3c:	d00a      	beq.n	17d54 <mp_binary_get_int+0x5c>
   17d3e:	687b      	ldr	r3, [r7, #4]
   17d40:	781b      	ldrb	r3, [r3, #0]
   17d42:	b25b      	sxtb	r3, r3
   17d44:	2b00      	cmp	r3, #0
   17d46:	da05      	bge.n	17d54 <mp_binary_get_int+0x5c>
        val = -1;
   17d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17d50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    for (uint i = 0; i < size; i++) {
   17d54:	2300      	movs	r3, #0
   17d56:	617b      	str	r3, [r7, #20]
   17d58:	e01b      	b.n	17d92 <mp_binary_get_int+0x9a>
        val <<= 8;
   17d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   17d5e:	021d      	lsls	r5, r3, #8
   17d60:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
   17d64:	0214      	lsls	r4, r2, #8
   17d66:	e9c7 4506 	strd	r4, r5, [r7, #24]
        val |= *src;
   17d6a:	687b      	ldr	r3, [r7, #4]
   17d6c:	781b      	ldrb	r3, [r3, #0]
   17d6e:	b2da      	uxtb	r2, r3
   17d70:	f04f 0300 	mov.w	r3, #0
   17d74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   17d78:	ea42 0200 	orr.w	r2, r2, r0
   17d7c:	ea43 0301 	orr.w	r3, r3, r1
   17d80:	e9c7 2306 	strd	r2, r3, [r7, #24]
        src += delta;
   17d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17d86:	687a      	ldr	r2, [r7, #4]
   17d88:	4413      	add	r3, r2
   17d8a:	607b      	str	r3, [r7, #4]
    for (uint i = 0; i < size; i++) {
   17d8c:	697b      	ldr	r3, [r7, #20]
   17d8e:	3301      	adds	r3, #1
   17d90:	617b      	str	r3, [r7, #20]
   17d92:	697a      	ldr	r2, [r7, #20]
   17d94:	68fb      	ldr	r3, [r7, #12]
   17d96:	429a      	cmp	r2, r3
   17d98:	d3df      	bcc.n	17d5a <mp_binary_get_int+0x62>
    }

    return val;
   17d9a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
   17d9e:	4618      	mov	r0, r3
   17da0:	4621      	mov	r1, r4
   17da2:	372c      	adds	r7, #44	; 0x2c
   17da4:	46bd      	mov	sp, r7
   17da6:	bcb0      	pop	{r4, r5, r7}
   17da8:	4770      	bx	lr

00017daa <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   17daa:	b590      	push	{r4, r7, lr}
   17dac:	b089      	sub	sp, #36	; 0x24
   17dae:	af00      	add	r7, sp, #0
   17db0:	4603      	mov	r3, r0
   17db2:	603a      	str	r2, [r7, #0]
   17db4:	71fb      	strb	r3, [r7, #7]
   17db6:	460b      	mov	r3, r1
   17db8:	71bb      	strb	r3, [r7, #6]
    byte *p = *ptr;
   17dba:	683b      	ldr	r3, [r7, #0]
   17dbc:	681b      	ldr	r3, [r3, #0]
   17dbe:	61fb      	str	r3, [r7, #28]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   17dc0:	f107 0208 	add.w	r2, r7, #8
   17dc4:	79b9      	ldrb	r1, [r7, #6]
   17dc6:	79fb      	ldrb	r3, [r7, #7]
   17dc8:	4618      	mov	r0, r3
   17dca:	f7ff fc91 	bl	176f0 <mp_binary_get_size>
   17dce:	61b8      	str	r0, [r7, #24]
    if (struct_type == '@') {
   17dd0:	79fb      	ldrb	r3, [r7, #7]
   17dd2:	2b40      	cmp	r3, #64	; 0x40
   17dd4:	d109      	bne.n	17dea <mp_binary_get_val+0x40>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   17dd6:	68ba      	ldr	r2, [r7, #8]
   17dd8:	69fb      	ldr	r3, [r7, #28]
   17dda:	4413      	add	r3, r2
   17ddc:	1e5a      	subs	r2, r3, #1
   17dde:	68bb      	ldr	r3, [r7, #8]
   17de0:	425b      	negs	r3, r3
   17de2:	4013      	ands	r3, r2
   17de4:	61fb      	str	r3, [r7, #28]
        #if MP_ENDIANNESS_LITTLE
        struct_type = '<';
   17de6:	233c      	movs	r3, #60	; 0x3c
   17de8:	71fb      	strb	r3, [r7, #7]
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   17dea:	69fa      	ldr	r2, [r7, #28]
   17dec:	69bb      	ldr	r3, [r7, #24]
   17dee:	441a      	add	r2, r3
   17df0:	683b      	ldr	r3, [r7, #0]
   17df2:	601a      	str	r2, [r3, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   17df4:	79bb      	ldrb	r3, [r7, #6]
   17df6:	2b5a      	cmp	r3, #90	; 0x5a
   17df8:	bf8c      	ite	hi
   17dfa:	2301      	movhi	r3, #1
   17dfc:	2300      	movls	r3, #0
   17dfe:	b2d9      	uxtb	r1, r3
   17e00:	79fb      	ldrb	r3, [r7, #7]
   17e02:	2b3e      	cmp	r3, #62	; 0x3e
   17e04:	bf0c      	ite	eq
   17e06:	2301      	moveq	r3, #1
   17e08:	2300      	movne	r3, #0
   17e0a:	b2da      	uxtb	r2, r3
   17e0c:	69fb      	ldr	r3, [r7, #28]
   17e0e:	69b8      	ldr	r0, [r7, #24]
   17e10:	f7ff ff72 	bl	17cf8 <mp_binary_get_int>
   17e14:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (val_type == 'O') {
   17e18:	79bb      	ldrb	r3, [r7, #6]
   17e1a:	2b4f      	cmp	r3, #79	; 0x4f
   17e1c:	d101      	bne.n	17e22 <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
   17e1e:	693b      	ldr	r3, [r7, #16]
   17e20:	e045      	b.n	17eae <mp_binary_get_val+0x104>
    } else if (val_type == 'S') {
   17e22:	79bb      	ldrb	r3, [r7, #6]
   17e24:	2b53      	cmp	r3, #83	; 0x53
   17e26:	d10b      	bne.n	17e40 <mp_binary_get_val+0x96>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
   17e28:	693b      	ldr	r3, [r7, #16]
   17e2a:	60fb      	str	r3, [r7, #12]
        return mp_obj_new_str(s_val, strlen(s_val));
   17e2c:	68f8      	ldr	r0, [r7, #12]
   17e2e:	f004 fccd 	bl	1c7cc <strlen>
   17e32:	4603      	mov	r3, r0
   17e34:	4619      	mov	r1, r3
   17e36:	68f8      	ldr	r0, [r7, #12]
   17e38:	f7fd f8fe 	bl	15038 <mp_obj_new_str>
   17e3c:	4603      	mov	r3, r0
   17e3e:	e036      	b.n	17eae <mp_binary_get_val+0x104>
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   17e40:	79bb      	ldrb	r3, [r7, #6]
   17e42:	2b5a      	cmp	r3, #90	; 0x5a
   17e44:	d91c      	bls.n	17e80 <mp_binary_get_val+0xd6>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   17e46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17e4a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   17e4e:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   17e52:	db0f      	blt.n	17e74 <mp_binary_get_val+0xca>
   17e54:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17e58:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   17e5c:	f04f 0200 	mov.w	r2, #0
   17e60:	4299      	cmp	r1, r3
   17e62:	eb72 0304 	sbcs.w	r3, r2, r4
   17e66:	db05      	blt.n	17e74 <mp_binary_get_val+0xca>
            return mp_obj_new_int((mp_int_t)val);
   17e68:	693b      	ldr	r3, [r7, #16]
   17e6a:	4618      	mov	r0, r3
   17e6c:	f7f8 fc36 	bl	106dc <mp_obj_new_int>
   17e70:	4603      	mov	r3, r0
   17e72:	e01c      	b.n	17eae <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ll(val);
   17e74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   17e78:	f7f8 fbfa 	bl	10670 <mp_obj_new_int_from_ll>
   17e7c:	4603      	mov	r3, r0
   17e7e:	e016      	b.n	17eae <mp_binary_get_val+0x104>
        }
    } else {
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   17e80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17e84:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   17e88:	f04f 0200 	mov.w	r2, #0
   17e8c:	42a2      	cmp	r2, r4
   17e8e:	bf08      	it	eq
   17e90:	4299      	cmpeq	r1, r3
   17e92:	d305      	bcc.n	17ea0 <mp_binary_get_val+0xf6>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   17e94:	693b      	ldr	r3, [r7, #16]
   17e96:	4618      	mov	r0, r3
   17e98:	f7f8 fc06 	bl	106a8 <mp_obj_new_int_from_uint>
   17e9c:	4603      	mov	r3, r0
   17e9e:	e006      	b.n	17eae <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ull(val);
   17ea0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   17ea4:	4618      	mov	r0, r3
   17ea6:	4621      	mov	r1, r4
   17ea8:	f7f8 fbf0 	bl	1068c <mp_obj_new_int_from_ull>
   17eac:	4603      	mov	r3, r0
        }
    }
}
   17eae:	4618      	mov	r0, r3
   17eb0:	3724      	adds	r7, #36	; 0x24
   17eb2:	46bd      	mov	sp, r7
   17eb4:	bd90      	pop	{r4, r7, pc}

00017eb6 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   17eb6:	b580      	push	{r7, lr}
   17eb8:	b086      	sub	sp, #24
   17eba:	af00      	add	r7, sp, #0
   17ebc:	60f8      	str	r0, [r7, #12]
   17ebe:	607a      	str	r2, [r7, #4]
   17ec0:	603b      	str	r3, [r7, #0]
   17ec2:	460b      	mov	r3, r1
   17ec4:	72fb      	strb	r3, [r7, #11]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   17ec6:	7afb      	ldrb	r3, [r7, #11]
   17ec8:	f083 0301 	eor.w	r3, r3, #1
   17ecc:	b2db      	uxtb	r3, r3
   17ece:	2b00      	cmp	r3, #0
   17ed0:	d006      	beq.n	17ee0 <mp_binary_set_int+0x2a>
        memcpy(dest, &val, val_sz);
   17ed2:	463b      	mov	r3, r7
   17ed4:	68fa      	ldr	r2, [r7, #12]
   17ed6:	4619      	mov	r1, r3
   17ed8:	6878      	ldr	r0, [r7, #4]
   17eda:	f004 fb41 	bl	1c560 <memcpy>
        }
        while (val_sz--) {
            *dest++ = *--src;
        }
    }
}
   17ede:	e012      	b.n	17f06 <mp_binary_set_int+0x50>
            src = (const byte*)&val + val_sz;
   17ee0:	463a      	mov	r2, r7
   17ee2:	68fb      	ldr	r3, [r7, #12]
   17ee4:	4413      	add	r3, r2
   17ee6:	617b      	str	r3, [r7, #20]
        while (val_sz--) {
   17ee8:	e008      	b.n	17efc <mp_binary_set_int+0x46>
            *dest++ = *--src;
   17eea:	687b      	ldr	r3, [r7, #4]
   17eec:	1c5a      	adds	r2, r3, #1
   17eee:	607a      	str	r2, [r7, #4]
   17ef0:	697a      	ldr	r2, [r7, #20]
   17ef2:	3a01      	subs	r2, #1
   17ef4:	617a      	str	r2, [r7, #20]
   17ef6:	697a      	ldr	r2, [r7, #20]
   17ef8:	7812      	ldrb	r2, [r2, #0]
   17efa:	701a      	strb	r2, [r3, #0]
        while (val_sz--) {
   17efc:	68fb      	ldr	r3, [r7, #12]
   17efe:	1e5a      	subs	r2, r3, #1
   17f00:	60fa      	str	r2, [r7, #12]
   17f02:	2b00      	cmp	r3, #0
   17f04:	d1f1      	bne.n	17eea <mp_binary_set_int+0x34>
}
   17f06:	bf00      	nop
   17f08:	3718      	adds	r7, #24
   17f0a:	46bd      	mov	sp, r7
   17f0c:	bd80      	pop	{r7, pc}

00017f0e <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   17f0e:	b580      	push	{r7, lr}
   17f10:	b08a      	sub	sp, #40	; 0x28
   17f12:	af00      	add	r7, sp, #0
   17f14:	60ba      	str	r2, [r7, #8]
   17f16:	607b      	str	r3, [r7, #4]
   17f18:	4603      	mov	r3, r0
   17f1a:	73fb      	strb	r3, [r7, #15]
   17f1c:	460b      	mov	r3, r1
   17f1e:	73bb      	strb	r3, [r7, #14]
    byte *p = *ptr;
   17f20:	687b      	ldr	r3, [r7, #4]
   17f22:	681b      	ldr	r3, [r3, #0]
   17f24:	627b      	str	r3, [r7, #36]	; 0x24
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   17f26:	f107 0214 	add.w	r2, r7, #20
   17f2a:	7bb9      	ldrb	r1, [r7, #14]
   17f2c:	7bfb      	ldrb	r3, [r7, #15]
   17f2e:	4618      	mov	r0, r3
   17f30:	f7ff fbde 	bl	176f0 <mp_binary_get_size>
   17f34:	61f8      	str	r0, [r7, #28]
    if (struct_type == '@') {
   17f36:	7bfb      	ldrb	r3, [r7, #15]
   17f38:	2b40      	cmp	r3, #64	; 0x40
   17f3a:	d109      	bne.n	17f50 <mp_binary_set_val+0x42>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   17f3c:	697a      	ldr	r2, [r7, #20]
   17f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17f40:	4413      	add	r3, r2
   17f42:	1e5a      	subs	r2, r3, #1
   17f44:	697b      	ldr	r3, [r7, #20]
   17f46:	425b      	negs	r3, r3
   17f48:	4013      	ands	r3, r2
   17f4a:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_ENDIANNESS_LITTLE) {
            struct_type = '<';
   17f4c:	233c      	movs	r3, #60	; 0x3c
   17f4e:	73fb      	strb	r3, [r7, #15]
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   17f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17f52:	69fb      	ldr	r3, [r7, #28]
   17f54:	441a      	add	r2, r3
   17f56:	687b      	ldr	r3, [r7, #4]
   17f58:	601a      	str	r2, [r3, #0]

    mp_uint_t val;
    switch (val_type) {
   17f5a:	7bbb      	ldrb	r3, [r7, #14]
   17f5c:	2b4f      	cmp	r3, #79	; 0x4f
   17f5e:	d102      	bne.n	17f66 <mp_binary_set_val+0x58>
        case 'O':
            val = (mp_uint_t)val_in;
   17f60:	68bb      	ldr	r3, [r7, #8]
   17f62:	623b      	str	r3, [r7, #32]
            break;
   17f64:	e01e      	b.n	17fa4 <mp_binary_set_val+0x96>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   17f66:	68b8      	ldr	r0, [r7, #8]
   17f68:	f7f5 fd9a 	bl	daa0 <mp_obj_get_int>
   17f6c:	4603      	mov	r3, r0
   17f6e:	623b      	str	r3, [r7, #32]
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   17f70:	69fb      	ldr	r3, [r7, #28]
   17f72:	2b04      	cmp	r3, #4
   17f74:	d916      	bls.n	17fa4 <mp_binary_set_val+0x96>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   17f76:	7bbb      	ldrb	r3, [r7, #14]
   17f78:	2b5a      	cmp	r3, #90	; 0x5a
   17f7a:	d904      	bls.n	17f86 <mp_binary_set_val+0x78>
   17f7c:	6a3b      	ldr	r3, [r7, #32]
   17f7e:	2b00      	cmp	r3, #0
   17f80:	da01      	bge.n	17f86 <mp_binary_set_val+0x78>
   17f82:	23ff      	movs	r3, #255	; 0xff
   17f84:	e000      	b.n	17f88 <mp_binary_set_val+0x7a>
   17f86:	2300      	movs	r3, #0
   17f88:	61bb      	str	r3, [r7, #24]
                    memset(p, c, size);
   17f8a:	69fa      	ldr	r2, [r7, #28]
   17f8c:	69b9      	ldr	r1, [r7, #24]
   17f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17f90:	f004 fb80 	bl	1c694 <memset>
                    if (struct_type == '>') {
   17f94:	7bfb      	ldrb	r3, [r7, #15]
   17f96:	2b3e      	cmp	r3, #62	; 0x3e
   17f98:	d104      	bne.n	17fa4 <mp_binary_set_val+0x96>
                        p += size - sizeof(val);
   17f9a:	69fb      	ldr	r3, [r7, #28]
   17f9c:	3b04      	subs	r3, #4
   17f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17fa0:	4413      	add	r3, r2
   17fa2:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   17fa4:	69fb      	ldr	r3, [r7, #28]
   17fa6:	2b04      	cmp	r3, #4
   17fa8:	bf28      	it	cs
   17faa:	2304      	movcs	r3, #4
   17fac:	4618      	mov	r0, r3
   17fae:	7bfb      	ldrb	r3, [r7, #15]
   17fb0:	2b3e      	cmp	r3, #62	; 0x3e
   17fb2:	bf0c      	ite	eq
   17fb4:	2301      	moveq	r3, #1
   17fb6:	2300      	movne	r3, #0
   17fb8:	b2d9      	uxtb	r1, r3
   17fba:	6a3b      	ldr	r3, [r7, #32]
   17fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17fbe:	f7ff ff7a 	bl	17eb6 <mp_binary_set_int>
}
   17fc2:	bf00      	nop
   17fc4:	3728      	adds	r7, #40	; 0x28
   17fc6:	46bd      	mov	sp, r7
   17fc8:	bd80      	pop	{r7, pc}

00017fca <mp_binary_set_val_array>:

void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   17fca:	b580      	push	{r7, lr}
   17fcc:	b084      	sub	sp, #16
   17fce:	af00      	add	r7, sp, #0
   17fd0:	60b9      	str	r1, [r7, #8]
   17fd2:	607a      	str	r2, [r7, #4]
   17fd4:	603b      	str	r3, [r7, #0]
   17fd6:	4603      	mov	r3, r0
   17fd8:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   17fda:	7bfb      	ldrb	r3, [r7, #15]
   17fdc:	2b4f      	cmp	r3, #79	; 0x4f
   17fde:	d106      	bne.n	17fee <mp_binary_set_val_array+0x24>
            ((double*)p)[index] = mp_obj_get_float(val_in);
            break;
#endif
        // Extension to CPython: array of objects
        case 'O':
            ((mp_obj_t*)p)[index] = val_in;
   17fe0:	687b      	ldr	r3, [r7, #4]
   17fe2:	009b      	lsls	r3, r3, #2
   17fe4:	68ba      	ldr	r2, [r7, #8]
   17fe6:	4413      	add	r3, r2
   17fe8:	683a      	ldr	r2, [r7, #0]
   17fea:	601a      	str	r2, [r3, #0]
            break;
   17fec:	e008      	b.n	18000 <mp_binary_set_val_array+0x36>
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
                    size, (uint8_t*)p + index * size);
                return;
            }
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   17fee:	6838      	ldr	r0, [r7, #0]
   17ff0:	f7f5 fd56 	bl	daa0 <mp_obj_get_int>
   17ff4:	4603      	mov	r3, r0
   17ff6:	7bf8      	ldrb	r0, [r7, #15]
   17ff8:	687a      	ldr	r2, [r7, #4]
   17ffa:	68b9      	ldr	r1, [r7, #8]
   17ffc:	f000 f804 	bl	18008 <mp_binary_set_val_array_from_int>
    }
}
   18000:	bf00      	nop
   18002:	3710      	adds	r7, #16
   18004:	46bd      	mov	sp, r7
   18006:	bd80      	pop	{r7, pc}

00018008 <mp_binary_set_val_array_from_int>:

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   18008:	b480      	push	{r7}
   1800a:	b085      	sub	sp, #20
   1800c:	af00      	add	r7, sp, #0
   1800e:	60b9      	str	r1, [r7, #8]
   18010:	607a      	str	r2, [r7, #4]
   18012:	603b      	str	r3, [r7, #0]
   18014:	4603      	mov	r3, r0
   18016:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   18018:	7bfb      	ldrb	r3, [r7, #15]
   1801a:	2b4c      	cmp	r3, #76	; 0x4c
   1801c:	d04e      	beq.n	180bc <mp_binary_set_val_array_from_int+0xb4>
   1801e:	2b4c      	cmp	r3, #76	; 0x4c
   18020:	dc0b      	bgt.n	1803a <mp_binary_set_val_array_from_int+0x32>
   18022:	2b42      	cmp	r3, #66	; 0x42
   18024:	d01e      	beq.n	18064 <mp_binary_set_val_array_from_int+0x5c>
   18026:	2b42      	cmp	r3, #66	; 0x42
   18028:	dc02      	bgt.n	18030 <mp_binary_set_val_array_from_int+0x28>
   1802a:	2b01      	cmp	r3, #1
   1802c:	d01a      	beq.n	18064 <mp_binary_set_val_array_from_int+0x5c>
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   1802e:	e053      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   18030:	2b48      	cmp	r3, #72	; 0x48
   18032:	d026      	beq.n	18082 <mp_binary_set_val_array_from_int+0x7a>
   18034:	2b49      	cmp	r3, #73	; 0x49
   18036:	d033      	beq.n	180a0 <mp_binary_set_val_array_from_int+0x98>
}
   18038:	e04e      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   1803a:	2b68      	cmp	r3, #104	; 0x68
   1803c:	d019      	beq.n	18072 <mp_binary_set_val_array_from_int+0x6a>
   1803e:	2b68      	cmp	r3, #104	; 0x68
   18040:	dc04      	bgt.n	1804c <mp_binary_set_val_array_from_int+0x44>
   18042:	2b50      	cmp	r3, #80	; 0x50
   18044:	d041      	beq.n	180ca <mp_binary_set_val_array_from_int+0xc2>
   18046:	2b62      	cmp	r3, #98	; 0x62
   18048:	d005      	beq.n	18056 <mp_binary_set_val_array_from_int+0x4e>
}
   1804a:	e045      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   1804c:	2b69      	cmp	r3, #105	; 0x69
   1804e:	d020      	beq.n	18092 <mp_binary_set_val_array_from_int+0x8a>
   18050:	2b6c      	cmp	r3, #108	; 0x6c
   18052:	d02c      	beq.n	180ae <mp_binary_set_val_array_from_int+0xa6>
}
   18054:	e040      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((signed char*)p)[index] = val;
   18056:	68ba      	ldr	r2, [r7, #8]
   18058:	687b      	ldr	r3, [r7, #4]
   1805a:	4413      	add	r3, r2
   1805c:	683a      	ldr	r2, [r7, #0]
   1805e:	b252      	sxtb	r2, r2
   18060:	701a      	strb	r2, [r3, #0]
            break;
   18062:	e039      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned char*)p)[index] = val;
   18064:	68ba      	ldr	r2, [r7, #8]
   18066:	687b      	ldr	r3, [r7, #4]
   18068:	4413      	add	r3, r2
   1806a:	683a      	ldr	r2, [r7, #0]
   1806c:	b2d2      	uxtb	r2, r2
   1806e:	701a      	strb	r2, [r3, #0]
            break;
   18070:	e032      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((short*)p)[index] = val;
   18072:	687b      	ldr	r3, [r7, #4]
   18074:	005b      	lsls	r3, r3, #1
   18076:	68ba      	ldr	r2, [r7, #8]
   18078:	4413      	add	r3, r2
   1807a:	683a      	ldr	r2, [r7, #0]
   1807c:	b212      	sxth	r2, r2
   1807e:	801a      	strh	r2, [r3, #0]
            break;
   18080:	e02a      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned short*)p)[index] = val;
   18082:	687b      	ldr	r3, [r7, #4]
   18084:	005b      	lsls	r3, r3, #1
   18086:	68ba      	ldr	r2, [r7, #8]
   18088:	4413      	add	r3, r2
   1808a:	683a      	ldr	r2, [r7, #0]
   1808c:	b292      	uxth	r2, r2
   1808e:	801a      	strh	r2, [r3, #0]
            break;
   18090:	e022      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((int*)p)[index] = val;
   18092:	687b      	ldr	r3, [r7, #4]
   18094:	009b      	lsls	r3, r3, #2
   18096:	68ba      	ldr	r2, [r7, #8]
   18098:	4413      	add	r3, r2
   1809a:	683a      	ldr	r2, [r7, #0]
   1809c:	601a      	str	r2, [r3, #0]
            break;
   1809e:	e01b      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned int*)p)[index] = val;
   180a0:	687b      	ldr	r3, [r7, #4]
   180a2:	009b      	lsls	r3, r3, #2
   180a4:	68ba      	ldr	r2, [r7, #8]
   180a6:	4413      	add	r3, r2
   180a8:	683a      	ldr	r2, [r7, #0]
   180aa:	601a      	str	r2, [r3, #0]
            break;
   180ac:	e014      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((long*)p)[index] = val;
   180ae:	687b      	ldr	r3, [r7, #4]
   180b0:	009b      	lsls	r3, r3, #2
   180b2:	68ba      	ldr	r2, [r7, #8]
   180b4:	4413      	add	r3, r2
   180b6:	683a      	ldr	r2, [r7, #0]
   180b8:	601a      	str	r2, [r3, #0]
            break;
   180ba:	e00d      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned long*)p)[index] = val;
   180bc:	687b      	ldr	r3, [r7, #4]
   180be:	009b      	lsls	r3, r3, #2
   180c0:	68ba      	ldr	r2, [r7, #8]
   180c2:	4413      	add	r3, r2
   180c4:	683a      	ldr	r2, [r7, #0]
   180c6:	601a      	str	r2, [r3, #0]
            break;
   180c8:	e006      	b.n	180d8 <mp_binary_set_val_array_from_int+0xd0>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   180ca:	687b      	ldr	r3, [r7, #4]
   180cc:	009b      	lsls	r3, r3, #2
   180ce:	68ba      	ldr	r2, [r7, #8]
   180d0:	4413      	add	r3, r2
   180d2:	683a      	ldr	r2, [r7, #0]
   180d4:	601a      	str	r2, [r3, #0]
            break;
   180d6:	bf00      	nop
}
   180d8:	bf00      	nop
   180da:	3714      	adds	r7, #20
   180dc:	46bd      	mov	sp, r7
   180de:	f85d 7b04 	ldr.w	r7, [sp], #4
   180e2:	4770      	bx	lr

000180e4 <vstr_str>:
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
   180e4:	b480      	push	{r7}
   180e6:	b083      	sub	sp, #12
   180e8:	af00      	add	r7, sp, #0
   180ea:	6078      	str	r0, [r7, #4]
   180ec:	687b      	ldr	r3, [r7, #4]
   180ee:	689b      	ldr	r3, [r3, #8]
   180f0:	4618      	mov	r0, r3
   180f2:	370c      	adds	r7, #12
   180f4:	46bd      	mov	sp, r7
   180f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   180fa:	4770      	bx	lr

000180fc <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   180fc:	b480      	push	{r7}
   180fe:	b083      	sub	sp, #12
   18100:	af00      	add	r7, sp, #0
   18102:	6078      	str	r0, [r7, #4]
   18104:	687b      	ldr	r3, [r7, #4]
   18106:	685b      	ldr	r3, [r3, #4]
   18108:	4618      	mov	r0, r3
   1810a:	370c      	adds	r7, #12
   1810c:	46bd      	mov	sp, r7
   1810e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18112:	4770      	bx	lr

00018114 <mp_obj_module_get_globals>:
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
   18114:	b480      	push	{r7}
   18116:	b083      	sub	sp, #12
   18118:	af00      	add	r7, sp, #0
   1811a:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
   1811c:	687b      	ldr	r3, [r7, #4]
   1811e:	685b      	ldr	r3, [r3, #4]
}
   18120:	4618      	mov	r0, r3
   18122:	370c      	adds	r7, #12
   18124:	46bd      	mov	sp, r7
   18126:	f85d 7b04 	ldr.w	r7, [sp], #4
   1812a:	4770      	bx	lr

0001812c <mp_local_free>:
static inline void mp_local_free(void *ptr) {
   1812c:	b480      	push	{r7}
   1812e:	b083      	sub	sp, #12
   18130:	af00      	add	r7, sp, #0
   18132:	6078      	str	r0, [r7, #4]
}
   18134:	bf00      	nop
   18136:	370c      	adds	r7, #12
   18138:	46bd      	mov	sp, r7
   1813a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1813e:	4770      	bx	lr

00018140 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18140:	b480      	push	{r7}
   18142:	af00      	add	r7, sp, #0
   18144:	4b03      	ldr	r3, [pc, #12]	; (18154 <mp_locals_get+0x14>)
   18146:	685b      	ldr	r3, [r3, #4]
   18148:	4618      	mov	r0, r3
   1814a:	46bd      	mov	sp, r7
   1814c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18150:	4770      	bx	lr
   18152:	bf00      	nop
   18154:	20001240 	.word	0x20001240

00018158 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18158:	b480      	push	{r7}
   1815a:	b083      	sub	sp, #12
   1815c:	af00      	add	r7, sp, #0
   1815e:	6078      	str	r0, [r7, #4]
   18160:	4a04      	ldr	r2, [pc, #16]	; (18174 <mp_locals_set+0x1c>)
   18162:	687b      	ldr	r3, [r7, #4]
   18164:	6053      	str	r3, [r2, #4]
   18166:	bf00      	nop
   18168:	370c      	adds	r7, #12
   1816a:	46bd      	mov	sp, r7
   1816c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18170:	4770      	bx	lr
   18172:	bf00      	nop
   18174:	20001240 	.word	0x20001240

00018178 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18178:	b480      	push	{r7}
   1817a:	af00      	add	r7, sp, #0
   1817c:	4b03      	ldr	r3, [pc, #12]	; (1818c <mp_globals_get+0x14>)
   1817e:	689b      	ldr	r3, [r3, #8]
   18180:	4618      	mov	r0, r3
   18182:	46bd      	mov	sp, r7
   18184:	f85d 7b04 	ldr.w	r7, [sp], #4
   18188:	4770      	bx	lr
   1818a:	bf00      	nop
   1818c:	20001240 	.word	0x20001240

00018190 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   18190:	b480      	push	{r7}
   18192:	b083      	sub	sp, #12
   18194:	af00      	add	r7, sp, #0
   18196:	6078      	str	r0, [r7, #4]
   18198:	4a04      	ldr	r2, [pc, #16]	; (181ac <mp_globals_set+0x1c>)
   1819a:	687b      	ldr	r3, [r7, #4]
   1819c:	6093      	str	r3, [r2, #8]
   1819e:	bf00      	nop
   181a0:	370c      	adds	r7, #12
   181a2:	46bd      	mov	sp, r7
   181a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   181a8:	4770      	bx	lr
   181aa:	bf00      	nop
   181ac:	20001240 	.word	0x20001240

000181b0 <mp_obj_is_package>:

#if MICROPY_ENABLE_EXTERNAL_IMPORT

#define PATH_SEP_CHAR '/'

bool mp_obj_is_package(mp_obj_t module) {
   181b0:	b580      	push	{r7, lr}
   181b2:	b084      	sub	sp, #16
   181b4:	af00      	add	r7, sp, #0
   181b6:	6078      	str	r0, [r7, #4]
    mp_obj_t dest[2];
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   181b8:	f107 0308 	add.w	r3, r7, #8
   181bc:	461a      	mov	r2, r3
   181be:	211e      	movs	r1, #30
   181c0:	6878      	ldr	r0, [r7, #4]
   181c2:	f7f4 fa53 	bl	c66c <mp_load_method_maybe>
    return dest[0] != MP_OBJ_NULL;
   181c6:	68bb      	ldr	r3, [r7, #8]
   181c8:	2b00      	cmp	r3, #0
   181ca:	bf14      	ite	ne
   181cc:	2301      	movne	r3, #1
   181ce:	2300      	moveq	r3, #0
   181d0:	b2db      	uxtb	r3, r3
}
   181d2:	4618      	mov	r0, r3
   181d4:	3710      	adds	r7, #16
   181d6:	46bd      	mov	sp, r7
   181d8:	bd80      	pop	{r7, pc}

000181da <mp_import_stat_any>:

// Stat either frozen or normal module by a given path
// (whatever is available, if at all).
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   181da:	b580      	push	{r7, lr}
   181dc:	b084      	sub	sp, #16
   181de:	af00      	add	r7, sp, #0
   181e0:	6078      	str	r0, [r7, #4]
    #if MICROPY_MODULE_FROZEN
    mp_import_stat_t st = mp_frozen_stat(path);
   181e2:	6878      	ldr	r0, [r7, #4]
   181e4:	f002 fe6f 	bl	1aec6 <mp_frozen_stat>
   181e8:	60f8      	str	r0, [r7, #12]
    if (st != MP_IMPORT_STAT_NO_EXIST) {
   181ea:	68fb      	ldr	r3, [r7, #12]
   181ec:	2b00      	cmp	r3, #0
   181ee:	d001      	beq.n	181f4 <mp_import_stat_any+0x1a>
        return st;
   181f0:	68fb      	ldr	r3, [r7, #12]
   181f2:	e003      	b.n	181fc <mp_import_stat_any+0x22>
    }
    #endif
    return mp_import_stat(path);
   181f4:	6878      	ldr	r0, [r7, #4]
   181f6:	f002 ffd0 	bl	1b19a <mp_import_stat>
   181fa:	4603      	mov	r3, r0
}
   181fc:	4618      	mov	r0, r3
   181fe:	3710      	adds	r7, #16
   18200:	46bd      	mov	sp, r7
   18202:	bd80      	pop	{r7, pc}

00018204 <stat_file_py_or_mpy>:

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   18204:	b580      	push	{r7, lr}
   18206:	b084      	sub	sp, #16
   18208:	af00      	add	r7, sp, #0
   1820a:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   1820c:	6878      	ldr	r0, [r7, #4]
   1820e:	f7e9 f9ac 	bl	156a <vstr_null_terminated_str>
   18212:	4603      	mov	r3, r0
   18214:	4618      	mov	r0, r3
   18216:	f7ff ffe0 	bl	181da <mp_import_stat_any>
   1821a:	60f8      	str	r0, [r7, #12]
    if (stat == MP_IMPORT_STAT_FILE) {
   1821c:	68fb      	ldr	r3, [r7, #12]
   1821e:	2b02      	cmp	r3, #2
   18220:	d101      	bne.n	18226 <stat_file_py_or_mpy+0x22>
        return stat;
   18222:	68fb      	ldr	r3, [r7, #12]
   18224:	e000      	b.n	18228 <stat_file_py_or_mpy+0x24>
    if (stat == MP_IMPORT_STAT_FILE) {
        return stat;
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   18226:	2300      	movs	r3, #0
}
   18228:	4618      	mov	r0, r3
   1822a:	3710      	adds	r7, #16
   1822c:	46bd      	mov	sp, r7
   1822e:	bd80      	pop	{r7, pc}

00018230 <stat_dir_or_file>:

STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   18230:	b580      	push	{r7, lr}
   18232:	b084      	sub	sp, #16
   18234:	af00      	add	r7, sp, #0
   18236:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   18238:	6878      	ldr	r0, [r7, #4]
   1823a:	f7e9 f996 	bl	156a <vstr_null_terminated_str>
   1823e:	4603      	mov	r3, r0
   18240:	4618      	mov	r0, r3
   18242:	f7ff ffca 	bl	181da <mp_import_stat_any>
   18246:	60f8      	str	r0, [r7, #12]
    DEBUG_printf("stat %s: %d\n", vstr_str(path), stat);
    if (stat == MP_IMPORT_STAT_DIR) {
   18248:	68fb      	ldr	r3, [r7, #12]
   1824a:	2b01      	cmp	r3, #1
   1824c:	d101      	bne.n	18252 <stat_dir_or_file+0x22>
        return stat;
   1824e:	68fb      	ldr	r3, [r7, #12]
   18250:	e007      	b.n	18262 <stat_dir_or_file+0x32>
    }

    // not a directory, add .py and try as a file
    vstr_add_str(path, ".py");
   18252:	4906      	ldr	r1, [pc, #24]	; (1826c <stat_dir_or_file+0x3c>)
   18254:	6878      	ldr	r0, [r7, #4]
   18256:	f7e9 f9c4 	bl	15e2 <vstr_add_str>
    return stat_file_py_or_mpy(path);
   1825a:	6878      	ldr	r0, [r7, #4]
   1825c:	f7ff ffd2 	bl	18204 <stat_file_py_or_mpy>
   18260:	4603      	mov	r3, r0
}
   18262:	4618      	mov	r0, r3
   18264:	3710      	adds	r7, #16
   18266:	46bd      	mov	sp, r7
   18268:	bd80      	pop	{r7, pc}
   1826a:	bf00      	nop
   1826c:	00023bbc 	.word	0x00023bbc

00018270 <find_file>:

STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   18270:	b580      	push	{r7, lr}
   18272:	b084      	sub	sp, #16
   18274:	af00      	add	r7, sp, #0
   18276:	60f8      	str	r0, [r7, #12]
   18278:	60b9      	str	r1, [r7, #8]
   1827a:	607a      	str	r2, [r7, #4]
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);

    if (path_num == 0) {
#endif
        // mp_sys_path is empty, so just use the given file name
        vstr_add_strn(dest, file_str, file_len);
   1827c:	68ba      	ldr	r2, [r7, #8]
   1827e:	68f9      	ldr	r1, [r7, #12]
   18280:	6878      	ldr	r0, [r7, #4]
   18282:	f7e9 f9c0 	bl	1606 <vstr_add_strn>
        return stat_dir_or_file(dest);
   18286:	6878      	ldr	r0, [r7, #4]
   18288:	f7ff ffd2 	bl	18230 <stat_dir_or_file>
   1828c:	4603      	mov	r3, r0

        // could not find a directory or file
        return MP_IMPORT_STAT_NO_EXIST;
    }
#endif
}
   1828e:	4618      	mov	r0, r3
   18290:	3710      	adds	r7, #16
   18292:	46bd      	mov	sp, r7
   18294:	bd80      	pop	{r7, pc}

00018296 <do_load_from_lexer>:

#if MICROPY_ENABLE_COMPILER
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   18296:	b580      	push	{r7, lr}
   18298:	b084      	sub	sp, #16
   1829a:	af00      	add	r7, sp, #0
   1829c:	6078      	str	r0, [r7, #4]
   1829e:	6039      	str	r1, [r7, #0]
    qstr source_name = lex->source_name;
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   182a0:	6878      	ldr	r0, [r7, #4]
   182a2:	f7ff ff37 	bl	18114 <mp_obj_module_get_globals>
   182a6:	60f8      	str	r0, [r7, #12]
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   182a8:	68fb      	ldr	r3, [r7, #12]
   182aa:	68fa      	ldr	r2, [r7, #12]
   182ac:	2101      	movs	r1, #1
   182ae:	6838      	ldr	r0, [r7, #0]
   182b0:	f7f4 fd77 	bl	cda2 <mp_parse_compile_execute>
}
   182b4:	bf00      	nop
   182b6:	3710      	adds	r7, #16
   182b8:	46bd      	mov	sp, r7
   182ba:	bd80      	pop	{r7, pc}

000182bc <do_execute_raw_code>:
#endif

#if MICROPY_PERSISTENT_CODE_LOAD || MICROPY_MODULE_FROZEN_MPY
STATIC void do_execute_raw_code(mp_obj_t module_obj, mp_raw_code_t *raw_code) {
   182bc:	b580      	push	{r7, lr}
   182be:	b092      	sub	sp, #72	; 0x48
   182c0:	af00      	add	r7, sp, #0
   182c2:	6078      	str	r0, [r7, #4]
   182c4:	6039      	str	r1, [r7, #0]
    //qstr source_name = lex->source_name;
    //mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   182c6:	6878      	ldr	r0, [r7, #4]
   182c8:	f7ff ff24 	bl	18114 <mp_obj_module_get_globals>
   182cc:	6478      	str	r0, [r7, #68]	; 0x44

    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
   182ce:	f7ff ff53 	bl	18178 <mp_globals_get>
   182d2:	4603      	mov	r3, r0
   182d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
   182d6:	f7ff ff33 	bl	18140 <mp_locals_get>
   182da:	4603      	mov	r3, r0
   182dc:	63bb      	str	r3, [r7, #56]	; 0x38

    // set new context
    mp_globals_set(mod_globals);
   182de:	6c78      	ldr	r0, [r7, #68]	; 0x44
   182e0:	f7ff ff56 	bl	18190 <mp_globals_set>
    mp_locals_set(mod_globals);
   182e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   182e6:	f7ff ff37 	bl	18158 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   182ea:	f107 0308 	add.w	r3, r7, #8
   182ee:	4618      	mov	r0, r3
   182f0:	f7e7 ffe4 	bl	2bc <nlr_push>
   182f4:	4603      	mov	r3, r0
   182f6:	2b00      	cmp	r3, #0
   182f8:	d113      	bne.n	18322 <do_execute_raw_code+0x66>
        mp_obj_t module_fun = mp_make_function_from_raw_code(raw_code, MP_OBJ_NULL, MP_OBJ_NULL);
   182fa:	2200      	movs	r2, #0
   182fc:	2100      	movs	r1, #0
   182fe:	6838      	ldr	r0, [r7, #0]
   18300:	f7f2 ff33 	bl	b16a <mp_make_function_from_raw_code>
   18304:	6438      	str	r0, [r7, #64]	; 0x40
        mp_call_function_0(module_fun);
   18306:	6c38      	ldr	r0, [r7, #64]	; 0x40
   18308:	f7f3 fce2 	bl	bcd0 <mp_call_function_0>

        // finish nlr block, restore context
        nlr_pop();
   1830c:	f7e7 ffc4 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
   18310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18312:	4618      	mov	r0, r3
   18314:	f7ff ff3c 	bl	18190 <mp_globals_set>
        mp_locals_set(old_locals);
   18318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1831a:	4618      	mov	r0, r3
   1831c:	f7ff ff1c 	bl	18158 <mp_locals_set>
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
        nlr_jump(nlr.ret_val);
    }
}
   18320:	e00b      	b.n	1833a <do_execute_raw_code+0x7e>
        mp_globals_set(old_globals);
   18322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18324:	4618      	mov	r0, r3
   18326:	f7ff ff33 	bl	18190 <mp_globals_set>
        mp_locals_set(old_locals);
   1832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1832c:	4618      	mov	r0, r3
   1832e:	f7ff ff13 	bl	18158 <mp_locals_set>
        nlr_jump(nlr.ret_val);
   18332:	68fb      	ldr	r3, [r7, #12]
   18334:	4618      	mov	r0, r3
   18336:	f7e7 ffd3 	bl	2e0 <nlr_jump>
}
   1833a:	3748      	adds	r7, #72	; 0x48
   1833c:	46bd      	mov	sp, r7
   1833e:	bd80      	pop	{r7, pc}

00018340 <do_load>:
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   18340:	b580      	push	{r7, lr}
   18342:	b086      	sub	sp, #24
   18344:	af00      	add	r7, sp, #0
   18346:	6078      	str	r0, [r7, #4]
   18348:	6039      	str	r1, [r7, #0]
    #if MICROPY_MODULE_FROZEN || MICROPY_PERSISTENT_CODE_LOAD || MICROPY_ENABLE_COMPILER
    char *file_str = vstr_null_terminated_str(file);
   1834a:	6838      	ldr	r0, [r7, #0]
   1834c:	f7e9 f90d 	bl	156a <vstr_null_terminated_str>
   18350:	6178      	str	r0, [r7, #20]

    // If we support frozen modules (either as str or mpy) then try to find the
    // requested filename in the list of frozen module filenames.
    #if MICROPY_MODULE_FROZEN
    void *modref;
    int frozen_type = mp_find_frozen_module(file_str, file->len, &modref);
   18352:	683b      	ldr	r3, [r7, #0]
   18354:	685b      	ldr	r3, [r3, #4]
   18356:	f107 0208 	add.w	r2, r7, #8
   1835a:	4619      	mov	r1, r3
   1835c:	6978      	ldr	r0, [r7, #20]
   1835e:	f002 fdc7 	bl	1aef0 <mp_find_frozen_module>
   18362:	6138      	str	r0, [r7, #16]
    #endif

    // If we support frozen mpy modules and we found a corresponding file (and
    // its data) in the list of frozen files, execute it.
    #if MICROPY_MODULE_FROZEN_MPY
    if (frozen_type == MP_FROZEN_MPY) {
   18364:	693b      	ldr	r3, [r7, #16]
   18366:	2b02      	cmp	r3, #2
   18368:	d105      	bne.n	18376 <do_load+0x36>
        do_execute_raw_code(module_obj, modref);
   1836a:	68bb      	ldr	r3, [r7, #8]
   1836c:	4619      	mov	r1, r3
   1836e:	6878      	ldr	r0, [r7, #4]
   18370:	f7ff ffa4 	bl	182bc <do_execute_raw_code>
        return;
   18374:	e008      	b.n	18388 <do_load+0x48>
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   18376:	6978      	ldr	r0, [r7, #20]
   18378:	f002 ff08 	bl	1b18c <mp_lexer_new_from_file>
   1837c:	60f8      	str	r0, [r7, #12]
        do_load_from_lexer(module_obj, lex);
   1837e:	68f9      	ldr	r1, [r7, #12]
   18380:	6878      	ldr	r0, [r7, #4]
   18382:	f7ff ff88 	bl	18296 <do_load_from_lexer>
        return;
   18386:	bf00      	nop
    #else

    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}
   18388:	3718      	adds	r7, #24
   1838a:	46bd      	mov	sp, r7
   1838c:	bd80      	pop	{r7, pc}

0001838e <chop_component>:

STATIC void chop_component(const char *start, const char **end) {
   1838e:	b480      	push	{r7}
   18390:	b085      	sub	sp, #20
   18392:	af00      	add	r7, sp, #0
   18394:	6078      	str	r0, [r7, #4]
   18396:	6039      	str	r1, [r7, #0]
    const char *p = *end;
   18398:	683b      	ldr	r3, [r7, #0]
   1839a:	681b      	ldr	r3, [r3, #0]
   1839c:	60fb      	str	r3, [r7, #12]
    while (p > start) {
   1839e:	e00a      	b.n	183b6 <chop_component+0x28>
        if (*--p == '.') {
   183a0:	68fb      	ldr	r3, [r7, #12]
   183a2:	3b01      	subs	r3, #1
   183a4:	60fb      	str	r3, [r7, #12]
   183a6:	68fb      	ldr	r3, [r7, #12]
   183a8:	781b      	ldrb	r3, [r3, #0]
   183aa:	2b2e      	cmp	r3, #46	; 0x2e
   183ac:	d103      	bne.n	183b6 <chop_component+0x28>
            *end = p;
   183ae:	683b      	ldr	r3, [r7, #0]
   183b0:	68fa      	ldr	r2, [r7, #12]
   183b2:	601a      	str	r2, [r3, #0]
            return;
   183b4:	e006      	b.n	183c4 <chop_component+0x36>
    while (p > start) {
   183b6:	68fa      	ldr	r2, [r7, #12]
   183b8:	687b      	ldr	r3, [r7, #4]
   183ba:	429a      	cmp	r2, r3
   183bc:	d8f0      	bhi.n	183a0 <chop_component+0x12>
        }
    }
    *end = p;
   183be:	683b      	ldr	r3, [r7, #0]
   183c0:	68fa      	ldr	r2, [r7, #12]
   183c2:	601a      	str	r2, [r3, #0]
}
   183c4:	3714      	adds	r7, #20
   183c6:	46bd      	mov	sp, r7
   183c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   183cc:	4770      	bx	lr

000183ce <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   183ce:	b590      	push	{r4, r7, lr}
   183d0:	b0e3      	sub	sp, #396	; 0x18c
   183d2:	af00      	add	r7, sp, #0
   183d4:	1d3b      	adds	r3, r7, #4
   183d6:	6018      	str	r0, [r3, #0]
   183d8:	463b      	mov	r3, r7
   183da:	6019      	str	r1, [r3, #0]
        mp_obj_print(args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
#endif

    mp_obj_t module_name = args[0];
   183dc:	463b      	mov	r3, r7
   183de:	681b      	ldr	r3, [r3, #0]
   183e0:	681b      	ldr	r3, [r3, #0]
   183e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    mp_obj_t fromtuple = mp_const_none;
   183e6:	4bd6      	ldr	r3, [pc, #856]	; (18740 <mp_builtin___import__+0x372>)
   183e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    mp_int_t level = 0;
   183ec:	2300      	movs	r3, #0
   183ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    if (n_args >= 4) {
   183f2:	1d3b      	adds	r3, r7, #4
   183f4:	681b      	ldr	r3, [r3, #0]
   183f6:	2b03      	cmp	r3, #3
   183f8:	d916      	bls.n	18428 <mp_builtin___import__+0x5a>
        fromtuple = args[3];
   183fa:	463b      	mov	r3, r7
   183fc:	681b      	ldr	r3, [r3, #0]
   183fe:	68db      	ldr	r3, [r3, #12]
   18400:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        if (n_args >= 5) {
   18404:	1d3b      	adds	r3, r7, #4
   18406:	681b      	ldr	r3, [r3, #0]
   18408:	2b04      	cmp	r3, #4
   1840a:	d90d      	bls.n	18428 <mp_builtin___import__+0x5a>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   1840c:	463b      	mov	r3, r7
   1840e:	681b      	ldr	r3, [r3, #0]
   18410:	3310      	adds	r3, #16
   18412:	681b      	ldr	r3, [r3, #0]
   18414:	105b      	asrs	r3, r3, #1
   18416:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            if (level < 0) {
   1841a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1841e:	2b00      	cmp	r3, #0
   18420:	da02      	bge.n	18428 <mp_builtin___import__+0x5a>
                mp_raise_ValueError(NULL);
   18422:	2000      	movs	r0, #0
   18424:	f7f4 fd3f 	bl	cea6 <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   18428:	f507 7390 	add.w	r3, r7, #288	; 0x120
   1842c:	4619      	mov	r1, r3
   1842e:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18432:	f7fc ff5f 	bl	152f4 <mp_obj_str_get_data>
   18436:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    if (level != 0) {
   1843a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1843e:	2b00      	cmp	r3, #0
   18440:	f000 80de 	beq.w	18600 <mp_builtin___import__+0x232>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   18444:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18448:	3b01      	subs	r3, #1
   1844a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   1844e:	f7ff fe93 	bl	18178 <mp_globals_get>
   18452:	4603      	mov	r3, r0
   18454:	216e      	movs	r1, #110	; 0x6e
   18456:	4618      	mov	r0, r3
   18458:	f7f6 f8da 	bl	e610 <mp_obj_dict_get>
   1845c:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        assert(this_name_q != MP_OBJ_NULL);
   18460:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   18464:	2b00      	cmp	r3, #0
   18466:	d106      	bne.n	18476 <mp_builtin___import__+0xa8>
   18468:	4bb6      	ldr	r3, [pc, #728]	; (18744 <mp_builtin___import__+0x376>)
   1846a:	4ab7      	ldr	r2, [pc, #732]	; (18748 <mp_builtin___import__+0x37a>)
   1846c:	f240 111d 	movw	r1, #285	; 0x11d
   18470:	48b6      	ldr	r0, [pc, #728]	; (1874c <mp_builtin___import__+0x37e>)
   18472:	f002 feb7 	bl	1b1e4 <__assert_func>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   18476:	f7ff fe7f 	bl	18178 <mp_globals_get>
   1847a:	4603      	mov	r3, r0
   1847c:	3304      	adds	r3, #4
   1847e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   18482:	2200      	movs	r2, #0
   18484:	217a      	movs	r1, #122	; 0x7a
   18486:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
   1848a:	f7f4 ff83 	bl	d394 <mp_map_lookup>
   1848e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        bool is_pkg = (elem != NULL);
   18492:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   18496:	2b00      	cmp	r3, #0
   18498:	bf14      	ite	ne
   1849a:	2301      	movne	r3, #1
   1849c:	2300      	moveq	r3, #0
   1849e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   184a2:	f107 030c 	add.w	r3, r7, #12
   184a6:	4619      	mov	r1, r3
   184a8:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
   184ac:	f7fc ff22 	bl	152f4 <mp_obj_str_get_data>
   184b0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        const char *p = this_name + this_name_l;
   184b4:	f107 030c 	add.w	r3, r7, #12
   184b8:	681b      	ldr	r3, [r3, #0]
   184ba:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   184be:	441a      	add	r2, r3
   184c0:	f107 0308 	add.w	r3, r7, #8
   184c4:	601a      	str	r2, [r3, #0]
        if (!is_pkg) {
   184c6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   184ca:	f083 0301 	eor.w	r3, r3, #1
   184ce:	b2db      	uxtb	r3, r3
   184d0:	2b00      	cmp	r3, #0
   184d2:	d00e      	beq.n	184f2 <mp_builtin___import__+0x124>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   184d4:	f107 0308 	add.w	r3, r7, #8
   184d8:	4619      	mov	r1, r3
   184da:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   184de:	f7ff ff56 	bl	1838e <chop_component>
        }

        while (level--) {
   184e2:	e006      	b.n	184f2 <mp_builtin___import__+0x124>
            chop_component(this_name, &p);
   184e4:	f107 0308 	add.w	r3, r7, #8
   184e8:	4619      	mov	r1, r3
   184ea:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   184ee:	f7ff ff4e 	bl	1838e <chop_component>
        while (level--) {
   184f2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   184f6:	1e5a      	subs	r2, r3, #1
   184f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
   184fc:	2b00      	cmp	r3, #0
   184fe:	d1f1      	bne.n	184e4 <mp_builtin___import__+0x116>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   18500:	f107 0308 	add.w	r3, r7, #8
   18504:	681a      	ldr	r2, [r3, #0]
   18506:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1850a:	429a      	cmp	r2, r3
   1850c:	d102      	bne.n	18514 <mp_builtin___import__+0x146>
            mp_raise_ValueError("cannot perform relative import");
   1850e:	4890      	ldr	r0, [pc, #576]	; (18750 <mp_builtin___import__+0x382>)
   18510:	f7f4 fcc9 	bl	cea6 <mp_raise_ValueError>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   18514:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18518:	2b00      	cmp	r3, #0
   1851a:	d107      	bne.n	1852c <mp_builtin___import__+0x15e>
   1851c:	f107 0308 	add.w	r3, r7, #8
   18520:	681b      	ldr	r3, [r3, #0]
   18522:	461a      	mov	r2, r3
   18524:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18528:	1ad3      	subs	r3, r2, r3
   1852a:	e00b      	b.n	18544 <mp_builtin___import__+0x176>
   1852c:	f107 0308 	add.w	r3, r7, #8
   18530:	681b      	ldr	r3, [r3, #0]
   18532:	461a      	mov	r2, r3
   18534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18538:	1ad3      	subs	r3, r2, r3
   1853a:	461a      	mov	r2, r3
   1853c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18540:	4413      	add	r3, r2
   18542:	3301      	adds	r3, #1
   18544:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        char *new_mod = mp_local_alloc(new_mod_l);
   18548:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   1854c:	3307      	adds	r3, #7
   1854e:	3307      	adds	r3, #7
   18550:	08db      	lsrs	r3, r3, #3
   18552:	00db      	lsls	r3, r3, #3
   18554:	ebad 0d03 	sub.w	sp, sp, r3
   18558:	466b      	mov	r3, sp
   1855a:	3307      	adds	r3, #7
   1855c:	08db      	lsrs	r3, r3, #3
   1855e:	00db      	lsls	r3, r3, #3
   18560:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        memcpy(new_mod, this_name, p - this_name);
   18564:	f107 0308 	add.w	r3, r7, #8
   18568:	681b      	ldr	r3, [r3, #0]
   1856a:	461a      	mov	r2, r3
   1856c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18570:	1ad3      	subs	r3, r2, r3
   18572:	461a      	mov	r2, r3
   18574:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
   18578:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   1857c:	f003 fff0 	bl	1c560 <memcpy>
        if (mod_len != 0) {
   18580:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18584:	2b00      	cmp	r3, #0
   18586:	d01e      	beq.n	185c6 <mp_builtin___import__+0x1f8>
            new_mod[p - this_name] = '.';
   18588:	f107 0308 	add.w	r3, r7, #8
   1858c:	681b      	ldr	r3, [r3, #0]
   1858e:	461a      	mov	r2, r3
   18590:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18594:	1ad3      	subs	r3, r2, r3
   18596:	461a      	mov	r2, r3
   18598:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   1859c:	4413      	add	r3, r2
   1859e:	222e      	movs	r2, #46	; 0x2e
   185a0:	701a      	strb	r2, [r3, #0]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   185a2:	f107 0308 	add.w	r3, r7, #8
   185a6:	681b      	ldr	r3, [r3, #0]
   185a8:	461a      	mov	r2, r3
   185aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   185ae:	1ad3      	subs	r3, r2, r3
   185b0:	3301      	adds	r3, #1
   185b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
   185b6:	4413      	add	r3, r2
   185b8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
   185bc:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
   185c0:	4618      	mov	r0, r3
   185c2:	f003 ffcd 	bl	1c560 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   185c6:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
   185ca:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   185ce:	f7e8 fd36 	bl	103e <qstr_from_strn>
   185d2:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
        mp_local_free(new_mod);
   185d6:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   185da:	f7ff fda7 	bl	1812c <mp_local_free>
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   185de:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   185e2:	009b      	lsls	r3, r3, #2
   185e4:	f043 0302 	orr.w	r3, r3, #2
   185e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        mod_str = qstr_str(new_mod_q);
   185ec:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   185f0:	f7e8 fdfe 	bl	11f0 <qstr_str>
   185f4:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
        mod_len = new_mod_l;
   185f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   185fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   18600:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18604:	f7fc fe10 	bl	15228 <mp_obj_str_get_qstr>
   18608:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   1860c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   18610:	f7f9 f9f6 	bl	11a00 <mp_module_get>
   18614:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (module_obj != MP_OBJ_NULL) {
   18618:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   1861c:	2b00      	cmp	r3, #0
   1861e:	d027      	beq.n	18670 <mp_builtin___import__+0x2a2>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   18620:	212e      	movs	r1, #46	; 0x2e
   18622:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18626:	f004 f9c9 	bl	1c9bc <strchr>
   1862a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        if (p == NULL) {
   1862e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   18632:	2b00      	cmp	r3, #0
   18634:	d102      	bne.n	1863c <mp_builtin___import__+0x26e>
            return module_obj;
   18636:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   1863a:	e142      	b.n	188c2 <mp_builtin___import__+0x4f4>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   1863c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18640:	4a3f      	ldr	r2, [pc, #252]	; (18740 <mp_builtin___import__+0x372>)
   18642:	4293      	cmp	r3, r2
   18644:	d002      	beq.n	1864c <mp_builtin___import__+0x27e>
            return module_obj;
   18646:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   1864a:	e13a      	b.n	188c2 <mp_builtin___import__+0x4f4>
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   1864c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
   18650:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   18654:	1ad3      	subs	r3, r2, r3
   18656:	4619      	mov	r1, r3
   18658:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   1865c:	f7e8 fcef 	bl	103e <qstr_from_strn>
   18660:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
        return mp_module_get(pkg_name);
   18664:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   18668:	f7f9 f9ca 	bl	11a00 <mp_module_get>
   1866c:	4603      	mov	r3, r0
   1866e:	e128      	b.n	188c2 <mp_builtin___import__+0x4f4>
    }
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
   18670:	2300      	movs	r3, #0
   18672:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   18676:	f107 0210 	add.w	r2, r7, #16
   1867a:	f507 7388 	add.w	r3, r7, #272	; 0x110
   1867e:	f44f 7180 	mov.w	r1, #256	; 0x100
   18682:	4618      	mov	r0, r3
   18684:	f7e8 fe6d 	bl	1362 <vstr_init_fixed_buf>
    module_obj = MP_OBJ_NULL;
   18688:	2300      	movs	r3, #0
   1868a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   1868e:	2300      	movs	r3, #0
   18690:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
   18694:	2300      	movs	r3, #0
   18696:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint i;
    for (i = 1; i <= mod_len; i++) {
   1869a:	2301      	movs	r3, #1
   1869c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   186a0:	e0fe      	b.n	188a0 <mp_builtin___import__+0x4d2>
        if (i == mod_len || mod_str[i] == '.') {
   186a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   186a6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   186aa:	429a      	cmp	r2, r3
   186ac:	d008      	beq.n	186c0 <mp_builtin___import__+0x2f2>
   186ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   186b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   186b6:	4413      	add	r3, r2
   186b8:	781b      	ldrb	r3, [r3, #0]
   186ba:	2b2e      	cmp	r3, #46	; 0x2e
   186bc:	f040 80eb 	bne.w	18896 <mp_builtin___import__+0x4c8>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   186c0:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   186c4:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   186c8:	f7e8 fcb9 	bl	103e <qstr_from_strn>
   186cc:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   186d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   186d4:	4618      	mov	r0, r3
   186d6:	f7ff fd11 	bl	180fc <vstr_len>
   186da:	4603      	mov	r3, r0
   186dc:	2b00      	cmp	r3, #0
   186de:	d10b      	bne.n	186f8 <mp_builtin___import__+0x32a>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
   186e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   186e4:	461a      	mov	r2, r3
   186e6:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   186ea:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   186ee:	f7ff fdbf 	bl	18270 <find_file>
   186f2:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
   186f6:	e01b      	b.n	18730 <mp_builtin___import__+0x362>
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
   186f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   186fc:	212f      	movs	r1, #47	; 0x2f
   186fe:	4618      	mov	r0, r3
   18700:	f7e8 ff60 	bl	15c4 <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   18704:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18708:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   1870c:	18d1      	adds	r1, r2, r3
   1870e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18712:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18716:	1ad2      	subs	r2, r2, r3
   18718:	f507 7388 	add.w	r3, r7, #272	; 0x110
   1871c:	4618      	mov	r0, r3
   1871e:	f7e8 ff72 	bl	1606 <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   18722:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18726:	4618      	mov	r0, r3
   18728:	f7ff fd82 	bl	18230 <stat_dir_or_file>
   1872c:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   18730:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18734:	2b00      	cmp	r3, #0
   18736:	d111      	bne.n	1875c <mp_builtin___import__+0x38e>
                #else
                {
                #endif
                    // couldn't find the file, so fail
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_raise_msg(&mp_type_ImportError, "module not found");
   18738:	4906      	ldr	r1, [pc, #24]	; (18754 <mp_builtin___import__+0x386>)
   1873a:	4807      	ldr	r0, [pc, #28]	; (18758 <mp_builtin___import__+0x38a>)
   1873c:	f7f4 fb9c 	bl	ce78 <mp_raise_msg>
   18740:	00022b54 	.word	0x00022b54
   18744:	00023bc0 	.word	0x00023bc0
   18748:	00023c44 	.word	0x00023c44
   1874c:	00023bdc 	.word	0x00023bdc
   18750:	00023bf8 	.word	0x00023bf8
   18754:	00023c18 	.word	0x00023c18
   18758:	00021b88 	.word	0x00021b88
                            "no module named '%q'", mod_name));
                    }
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   1875c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18760:	f7f9 f94e 	bl	11a00 <mp_module_get>
   18764:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
            }

            if (module_obj == MP_OBJ_NULL) {
   18768:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   1876c:	2b00      	cmp	r3, #0
   1876e:	d166      	bne.n	1883e <mp_builtin___import__+0x470>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   18770:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18774:	f7f9 f90a 	bl	1198c <mp_obj_new_module>
   18778:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   1877c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18780:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18784:	429a      	cmp	r2, r3
   18786:	d114      	bne.n	187b2 <mp_builtin___import__+0x3e4>
   18788:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   1878c:	4a4f      	ldr	r2, [pc, #316]	; (188cc <mp_builtin___import__+0x4fe>)
   1878e:	4293      	cmp	r3, r2
   18790:	d10f      	bne.n	187b2 <mp_builtin___import__+0x3e4>
   18792:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18796:	2b01      	cmp	r3, #1
   18798:	d00b      	beq.n	187b2 <mp_builtin___import__+0x3e4>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
   1879a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   1879e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   187a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   187a6:	685b      	ldr	r3, [r3, #4]
   187a8:	2266      	movs	r2, #102	; 0x66
   187aa:	216e      	movs	r1, #110	; 0x6e
   187ac:	4618      	mov	r0, r3
   187ae:	f7f6 fc20 	bl	eff2 <mp_obj_dict_store>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   187b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   187b6:	2b01      	cmp	r3, #1
   187b8:	d13a      	bne.n	18830 <mp_builtin___import__+0x462>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   187ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
   187be:	4618      	mov	r0, r3
   187c0:	f7ff fc90 	bl	180e4 <vstr_str>
   187c4:	4604      	mov	r4, r0
   187c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
   187ca:	4618      	mov	r0, r3
   187cc:	f7ff fc96 	bl	180fc <vstr_len>
   187d0:	4603      	mov	r3, r0
   187d2:	4619      	mov	r1, r3
   187d4:	4620      	mov	r0, r4
   187d6:	f7fc fc2f 	bl	15038 <mp_obj_new_str>
   187da:	4603      	mov	r3, r0
   187dc:	461a      	mov	r2, r3
   187de:	211e      	movs	r1, #30
   187e0:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   187e4:	f7f3 fff4 	bl	c7d0 <mp_store_attr>
                    size_t orig_path_len = path.len;
   187e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   187ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    vstr_add_char(&path, PATH_SEP_CHAR);
   187f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   187f4:	212f      	movs	r1, #47	; 0x2f
   187f6:	4618      	mov	r0, r3
   187f8:	f7e8 fee4 	bl	15c4 <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   187fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18800:	4933      	ldr	r1, [pc, #204]	; (188d0 <mp_builtin___import__+0x502>)
   18802:	4618      	mov	r0, r3
   18804:	f7e8 feed 	bl	15e2 <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   18808:	f507 7388 	add.w	r3, r7, #272	; 0x110
   1880c:	4618      	mov	r0, r3
   1880e:	f7ff fcf9 	bl	18204 <stat_file_py_or_mpy>
   18812:	4603      	mov	r3, r0
   18814:	2b02      	cmp	r3, #2
   18816:	d106      	bne.n	18826 <mp_builtin___import__+0x458>
                        //mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   18818:	f507 7388 	add.w	r3, r7, #272	; 0x110
   1881c:	4619      	mov	r1, r3
   1881e:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18822:	f7ff fd8d 	bl	18340 <do_load>
                    }
                    path.len = orig_path_len;
   18826:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
   1882a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   1882e:	e006      	b.n	1883e <mp_builtin___import__+0x470>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   18830:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18834:	4619      	mov	r1, r3
   18836:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   1883a:	f7ff fd81 	bl	18340 <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   1883e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   18842:	2b00      	cmp	r3, #0
   18844:	d016      	beq.n	18874 <mp_builtin___import__+0x4a6>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   18846:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   1884a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   1884e:	18d0      	adds	r0, r2, r3
   18850:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18854:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18858:	1ad3      	subs	r3, r2, r3
   1885a:	4619      	mov	r1, r3
   1885c:	f7e8 fbef 	bl	103e <qstr_from_strn>
   18860:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
                mp_store_attr(outer_module_obj, s, module_obj);
   18864:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   18868:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
   1886c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   18870:	f7f3 ffae 	bl	c7d0 <mp_store_attr>
            }
            outer_module_obj = module_obj;
   18874:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18878:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            if (top_module_obj == MP_OBJ_NULL) {
   1887c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   18880:	2b00      	cmp	r3, #0
   18882:	d103      	bne.n	1888c <mp_builtin___import__+0x4be>
                top_module_obj = module_obj;
   18884:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18888:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            }
            last = i + 1;
   1888c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18890:	3301      	adds	r3, #1
   18892:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    for (i = 1; i <= mod_len; i++) {
   18896:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   1889a:	3301      	adds	r3, #1
   1889c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   188a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   188a4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   188a8:	429a      	cmp	r2, r3
   188aa:	f67f aefa 	bls.w	186a2 <mp_builtin___import__+0x2d4>
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   188ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   188b2:	4a08      	ldr	r2, [pc, #32]	; (188d4 <mp_builtin___import__+0x506>)
   188b4:	4293      	cmp	r3, r2
   188b6:	d002      	beq.n	188be <mp_builtin___import__+0x4f0>
        return module_obj;
   188b8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   188bc:	e001      	b.n	188c2 <mp_builtin___import__+0x4f4>
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
   188be:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
}
   188c2:	4618      	mov	r0, r3
   188c4:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
   188c8:	46bd      	mov	sp, r7
   188ca:	bd90      	pop	{r4, r7, pc}
   188cc:	00021308 	.word	0x00021308
   188d0:	00023c2c 	.word	0x00023c2c
   188d4:	00022b54 	.word	0x00022b54

000188d8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   188d8:	b480      	push	{r7}
   188da:	b083      	sub	sp, #12
   188dc:	af00      	add	r7, sp, #0
   188de:	6078      	str	r0, [r7, #4]
   188e0:	687b      	ldr	r3, [r7, #4]
   188e2:	f003 0303 	and.w	r3, r3, #3
   188e6:	2b00      	cmp	r3, #0
   188e8:	bf0c      	ite	eq
   188ea:	2301      	moveq	r3, #1
   188ec:	2300      	movne	r3, #0
   188ee:	b2db      	uxtb	r3, r3
   188f0:	4618      	mov	r0, r3
   188f2:	370c      	adds	r7, #12
   188f4:	46bd      	mov	sp, r7
   188f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   188fa:	4770      	bx	lr

000188fc <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   188fc:	b480      	push	{r7}
   188fe:	af00      	add	r7, sp, #0
   18900:	4b03      	ldr	r3, [pc, #12]	; (18910 <mp_locals_get+0x14>)
   18902:	685b      	ldr	r3, [r3, #4]
   18904:	4618      	mov	r0, r3
   18906:	46bd      	mov	sp, r7
   18908:	f85d 7b04 	ldr.w	r7, [sp], #4
   1890c:	4770      	bx	lr
   1890e:	bf00      	nop
   18910:	20001240 	.word	0x20001240

00018914 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18914:	b480      	push	{r7}
   18916:	af00      	add	r7, sp, #0
   18918:	4b03      	ldr	r3, [pc, #12]	; (18928 <mp_globals_get+0x14>)
   1891a:	689b      	ldr	r3, [r3, #8]
   1891c:	4618      	mov	r0, r3
   1891e:	46bd      	mov	sp, r7
   18920:	f85d 7b04 	ldr.w	r7, [sp], #4
   18924:	4770      	bx	lr
   18926:	bf00      	nop
   18928:	20001240 	.word	0x20001240

0001892c <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   1892c:	b580      	push	{r7, lr}
   1892e:	b08a      	sub	sp, #40	; 0x28
   18930:	af00      	add	r7, sp, #0
   18932:	60f8      	str	r0, [r7, #12]
   18934:	60b9      	str	r1, [r7, #8]
   18936:	607a      	str	r2, [r7, #4]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
   18938:	f7ff ffec 	bl	18914 <mp_globals_get>
   1893c:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_dict_t *locals = mp_locals_get();
   1893e:	f7ff ffdd 	bl	188fc <mp_locals_get>
   18942:	6238      	str	r0, [r7, #32]
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18944:	2301      	movs	r3, #1
   18946:	61fb      	str	r3, [r7, #28]
   18948:	e02f      	b.n	189aa <eval_exec_helper+0x7e>
        if (args[i] != mp_const_none) {
   1894a:	69fb      	ldr	r3, [r7, #28]
   1894c:	009b      	lsls	r3, r3, #2
   1894e:	68ba      	ldr	r2, [r7, #8]
   18950:	4413      	add	r3, r2
   18952:	681b      	ldr	r3, [r3, #0]
   18954:	4a26      	ldr	r2, [pc, #152]	; (189f0 <eval_exec_helper+0xc4>)
   18956:	4293      	cmp	r3, r2
   18958:	d024      	beq.n	189a4 <eval_exec_helper+0x78>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   1895a:	69fb      	ldr	r3, [r7, #28]
   1895c:	009b      	lsls	r3, r3, #2
   1895e:	68ba      	ldr	r2, [r7, #8]
   18960:	4413      	add	r3, r2
   18962:	681b      	ldr	r3, [r3, #0]
   18964:	4618      	mov	r0, r3
   18966:	f7ff ffb7 	bl	188d8 <MP_OBJ_IS_OBJ>
   1896a:	4603      	mov	r3, r0
   1896c:	f083 0301 	eor.w	r3, r3, #1
   18970:	b2db      	uxtb	r3, r3
   18972:	2b00      	cmp	r3, #0
   18974:	d108      	bne.n	18988 <eval_exec_helper+0x5c>
   18976:	69fb      	ldr	r3, [r7, #28]
   18978:	009b      	lsls	r3, r3, #2
   1897a:	68ba      	ldr	r2, [r7, #8]
   1897c:	4413      	add	r3, r2
   1897e:	681b      	ldr	r3, [r3, #0]
   18980:	681b      	ldr	r3, [r3, #0]
   18982:	4a1c      	ldr	r2, [pc, #112]	; (189f4 <eval_exec_helper+0xc8>)
   18984:	4293      	cmp	r3, r2
   18986:	d002      	beq.n	1898e <eval_exec_helper+0x62>
                mp_raise_TypeError(NULL);
   18988:	2000      	movs	r0, #0
   1898a:	f7f4 fa97 	bl	cebc <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   1898e:	69fb      	ldr	r3, [r7, #28]
   18990:	009b      	lsls	r3, r3, #2
   18992:	68ba      	ldr	r2, [r7, #8]
   18994:	4413      	add	r3, r2
   18996:	681b      	ldr	r3, [r3, #0]
   18998:	623b      	str	r3, [r7, #32]
            if (i == 1) {
   1899a:	69fb      	ldr	r3, [r7, #28]
   1899c:	2b01      	cmp	r3, #1
   1899e:	d101      	bne.n	189a4 <eval_exec_helper+0x78>
                globals = locals;
   189a0:	6a3b      	ldr	r3, [r7, #32]
   189a2:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   189a4:	69fb      	ldr	r3, [r7, #28]
   189a6:	3301      	adds	r3, #1
   189a8:	61fb      	str	r3, [r7, #28]
   189aa:	69fb      	ldr	r3, [r7, #28]
   189ac:	2b02      	cmp	r3, #2
   189ae:	d803      	bhi.n	189b8 <eval_exec_helper+0x8c>
   189b0:	69fa      	ldr	r2, [r7, #28]
   189b2:	68fb      	ldr	r3, [r7, #12]
   189b4:	429a      	cmp	r2, r3
   189b6:	d3c8      	bcc.n	1894a <eval_exec_helper+0x1e>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   189b8:	68bb      	ldr	r3, [r7, #8]
   189ba:	681b      	ldr	r3, [r3, #0]
   189bc:	f107 0210 	add.w	r2, r7, #16
   189c0:	4611      	mov	r1, r2
   189c2:	4618      	mov	r0, r3
   189c4:	f7fc fc96 	bl	152f4 <mp_obj_str_get_data>
   189c8:	61b8      	str	r0, [r7, #24]
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   189ca:	693a      	ldr	r2, [r7, #16]
   189cc:	2300      	movs	r3, #0
   189ce:	69b9      	ldr	r1, [r7, #24]
   189d0:	2035      	movs	r0, #53	; 0x35
   189d2:	f7ea fe9e 	bl	3712 <mp_lexer_new_from_str_len>
   189d6:	6178      	str	r0, [r7, #20]
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   189d8:	6a3b      	ldr	r3, [r7, #32]
   189da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   189dc:	6879      	ldr	r1, [r7, #4]
   189de:	6978      	ldr	r0, [r7, #20]
   189e0:	f7f4 f9df 	bl	cda2 <mp_parse_compile_execute>
   189e4:	4603      	mov	r3, r0
}
   189e6:	4618      	mov	r0, r3
   189e8:	3728      	adds	r7, #40	; 0x28
   189ea:	46bd      	mov	sp, r7
   189ec:	bd80      	pop	{r7, pc}
   189ee:	bf00      	nop
   189f0:	00022b54 	.word	0x00022b54
   189f4:	000217b4 	.word	0x000217b4

000189f8 <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   189f8:	b580      	push	{r7, lr}
   189fa:	b082      	sub	sp, #8
   189fc:	af00      	add	r7, sp, #0
   189fe:	6078      	str	r0, [r7, #4]
   18a00:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   18a02:	2202      	movs	r2, #2
   18a04:	6839      	ldr	r1, [r7, #0]
   18a06:	6878      	ldr	r0, [r7, #4]
   18a08:	f7ff ff90 	bl	1892c <eval_exec_helper>
   18a0c:	4603      	mov	r3, r0
}
   18a0e:	4618      	mov	r0, r3
   18a10:	3708      	adds	r7, #8
   18a12:	46bd      	mov	sp, r7
   18a14:	bd80      	pop	{r7, pc}

00018a16 <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   18a16:	b580      	push	{r7, lr}
   18a18:	b082      	sub	sp, #8
   18a1a:	af00      	add	r7, sp, #0
   18a1c:	6078      	str	r0, [r7, #4]
   18a1e:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   18a20:	2201      	movs	r2, #1
   18a22:	6839      	ldr	r1, [r7, #0]
   18a24:	6878      	ldr	r0, [r7, #4]
   18a26:	f7ff ff81 	bl	1892c <eval_exec_helper>
   18a2a:	4603      	mov	r3, r0
}
   18a2c:	4618      	mov	r0, r3
   18a2e:	3708      	adds	r7, #8
   18a30:	46bd      	mov	sp, r7
   18a32:	bd80      	pop	{r7, pc}

00018a34 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   18a34:	b480      	push	{r7}
   18a36:	b083      	sub	sp, #12
   18a38:	af00      	add	r7, sp, #0
   18a3a:	6078      	str	r0, [r7, #4]
   18a3c:	687b      	ldr	r3, [r7, #4]
   18a3e:	f003 0301 	and.w	r3, r3, #1
   18a42:	2b00      	cmp	r3, #0
   18a44:	bf14      	ite	ne
   18a46:	2301      	movne	r3, #1
   18a48:	2300      	moveq	r3, #0
   18a4a:	b2db      	uxtb	r3, r3
   18a4c:	4618      	mov	r0, r3
   18a4e:	370c      	adds	r7, #12
   18a50:	46bd      	mov	sp, r7
   18a52:	f85d 7b04 	ldr.w	r7, [sp], #4
   18a56:	4770      	bx	lr

00018a58 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18a58:	b480      	push	{r7}
   18a5a:	b083      	sub	sp, #12
   18a5c:	af00      	add	r7, sp, #0
   18a5e:	6078      	str	r0, [r7, #4]
   18a60:	687b      	ldr	r3, [r7, #4]
   18a62:	f003 0303 	and.w	r3, r3, #3
   18a66:	2b00      	cmp	r3, #0
   18a68:	bf0c      	ite	eq
   18a6a:	2301      	moveq	r3, #1
   18a6c:	2300      	movne	r3, #0
   18a6e:	b2db      	uxtb	r3, r3
   18a70:	4618      	mov	r0, r3
   18a72:	370c      	adds	r7, #12
   18a74:	46bd      	mov	sp, r7
   18a76:	f85d 7b04 	ldr.w	r7, [sp], #4
   18a7a:	4770      	bx	lr

00018a7c <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   18a7c:	b480      	push	{r7}
   18a7e:	b083      	sub	sp, #12
   18a80:	af00      	add	r7, sp, #0
   18a82:	6078      	str	r0, [r7, #4]
   18a84:	6039      	str	r1, [r7, #0]
   18a86:	687b      	ldr	r3, [r7, #4]
   18a88:	689a      	ldr	r2, [r3, #8]
   18a8a:	683b      	ldr	r3, [r7, #0]
   18a8c:	00db      	lsls	r3, r3, #3
   18a8e:	4413      	add	r3, r2
   18a90:	681b      	ldr	r3, [r3, #0]
   18a92:	2b00      	cmp	r3, #0
   18a94:	d009      	beq.n	18aaa <MP_MAP_SLOT_IS_FILLED+0x2e>
   18a96:	687b      	ldr	r3, [r7, #4]
   18a98:	689a      	ldr	r2, [r3, #8]
   18a9a:	683b      	ldr	r3, [r7, #0]
   18a9c:	00db      	lsls	r3, r3, #3
   18a9e:	4413      	add	r3, r2
   18aa0:	681b      	ldr	r3, [r3, #0]
   18aa2:	2b08      	cmp	r3, #8
   18aa4:	d001      	beq.n	18aaa <MP_MAP_SLOT_IS_FILLED+0x2e>
   18aa6:	2301      	movs	r3, #1
   18aa8:	e000      	b.n	18aac <MP_MAP_SLOT_IS_FILLED+0x30>
   18aaa:	2300      	movs	r3, #0
   18aac:	f003 0301 	and.w	r3, r3, #1
   18ab0:	b2db      	uxtb	r3, r3
   18ab2:	4618      	mov	r0, r3
   18ab4:	370c      	adds	r7, #12
   18ab6:	46bd      	mov	sp, r7
   18ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
   18abc:	4770      	bx	lr

00018abe <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   18abe:	b480      	push	{r7}
   18ac0:	b083      	sub	sp, #12
   18ac2:	af00      	add	r7, sp, #0
   18ac4:	6078      	str	r0, [r7, #4]
   18ac6:	687b      	ldr	r3, [r7, #4]
   18ac8:	2b00      	cmp	r3, #0
   18aca:	d001      	beq.n	18ad0 <mp_obj_new_bool+0x12>
   18acc:	4b04      	ldr	r3, [pc, #16]	; (18ae0 <mp_obj_new_bool+0x22>)
   18ace:	e000      	b.n	18ad2 <mp_obj_new_bool+0x14>
   18ad0:	4b04      	ldr	r3, [pc, #16]	; (18ae4 <mp_obj_new_bool+0x26>)
   18ad2:	4618      	mov	r0, r3
   18ad4:	370c      	adds	r7, #12
   18ad6:	46bd      	mov	sp, r7
   18ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
   18adc:	4770      	bx	lr
   18ade:	bf00      	nop
   18ae0:	00021310 	.word	0x00021310
   18ae4:	00021308 	.word	0x00021308

00018ae8 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18ae8:	b480      	push	{r7}
   18aea:	af00      	add	r7, sp, #0
   18aec:	4b03      	ldr	r3, [pc, #12]	; (18afc <mp_locals_get+0x14>)
   18aee:	685b      	ldr	r3, [r3, #4]
   18af0:	4618      	mov	r0, r3
   18af2:	46bd      	mov	sp, r7
   18af4:	f85d 7b04 	ldr.w	r7, [sp], #4
   18af8:	4770      	bx	lr
   18afa:	bf00      	nop
   18afc:	20001240 	.word	0x20001240

00018b00 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18b00:	b480      	push	{r7}
   18b02:	b083      	sub	sp, #12
   18b04:	af00      	add	r7, sp, #0
   18b06:	6078      	str	r0, [r7, #4]
   18b08:	4a04      	ldr	r2, [pc, #16]	; (18b1c <mp_locals_set+0x1c>)
   18b0a:	687b      	ldr	r3, [r7, #4]
   18b0c:	6053      	str	r3, [r2, #4]
   18b0e:	bf00      	nop
   18b10:	370c      	adds	r7, #12
   18b12:	46bd      	mov	sp, r7
   18b14:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b18:	4770      	bx	lr
   18b1a:	bf00      	nop
   18b1c:	20001240 	.word	0x20001240

00018b20 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18b20:	b480      	push	{r7}
   18b22:	af00      	add	r7, sp, #0
   18b24:	4b03      	ldr	r3, [pc, #12]	; (18b34 <mp_globals_get+0x14>)
   18b26:	689b      	ldr	r3, [r3, #8]
   18b28:	4618      	mov	r0, r3
   18b2a:	46bd      	mov	sp, r7
   18b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b30:	4770      	bx	lr
   18b32:	bf00      	nop
   18b34:	20001240 	.word	0x20001240

00018b38 <mp_builtin___build_class__>:
#endif

// args[0] is function from class body
// args[1] is class name
// args[2:] are base objects
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   18b38:	b580      	push	{r7, lr}
   18b3a:	b08a      	sub	sp, #40	; 0x28
   18b3c:	af00      	add	r7, sp, #0
   18b3e:	6078      	str	r0, [r7, #4]
   18b40:	6039      	str	r1, [r7, #0]
    assert(2 <= n_args);
   18b42:	687b      	ldr	r3, [r7, #4]
   18b44:	2b01      	cmp	r3, #1
   18b46:	d805      	bhi.n	18b54 <mp_builtin___build_class__+0x1c>
   18b48:	4b24      	ldr	r3, [pc, #144]	; (18bdc <mp_builtin___build_class__+0xa4>)
   18b4a:	4a25      	ldr	r2, [pc, #148]	; (18be0 <mp_builtin___build_class__+0xa8>)
   18b4c:	2132      	movs	r1, #50	; 0x32
   18b4e:	4825      	ldr	r0, [pc, #148]	; (18be4 <mp_builtin___build_class__+0xac>)
   18b50:	f002 fb48 	bl	1b1e4 <__assert_func>

    // set the new classes __locals__ object
    mp_obj_dict_t *old_locals = mp_locals_get();
   18b54:	f7ff ffc8 	bl	18ae8 <mp_locals_get>
   18b58:	6238      	str	r0, [r7, #32]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   18b5a:	2000      	movs	r0, #0
   18b5c:	f7f6 fa28 	bl	efb0 <mp_obj_new_dict>
   18b60:	61f8      	str	r0, [r7, #28]
    mp_locals_set(MP_OBJ_TO_PTR(class_locals));
   18b62:	69f8      	ldr	r0, [r7, #28]
   18b64:	f7ff ffcc 	bl	18b00 <mp_locals_set>

    // call the class code
    mp_obj_t cell = mp_call_function_0(args[0]);
   18b68:	683b      	ldr	r3, [r7, #0]
   18b6a:	681b      	ldr	r3, [r3, #0]
   18b6c:	4618      	mov	r0, r3
   18b6e:	f7f3 f8af 	bl	bcd0 <mp_call_function_0>
   18b72:	61b8      	str	r0, [r7, #24]

    // restore old __locals__ object
    mp_locals_set(old_locals);
   18b74:	6a38      	ldr	r0, [r7, #32]
   18b76:	f7ff ffc3 	bl	18b00 <mp_locals_set>

    // get the class type (meta object) from the base objects
    mp_obj_t meta;
    if (n_args == 2) {
   18b7a:	687b      	ldr	r3, [r7, #4]
   18b7c:	2b02      	cmp	r3, #2
   18b7e:	d102      	bne.n	18b86 <mp_builtin___build_class__+0x4e>
        // no explicit bases, so use 'type'
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   18b80:	4b19      	ldr	r3, [pc, #100]	; (18be8 <mp_builtin___build_class__+0xb0>)
   18b82:	627b      	str	r3, [r7, #36]	; 0x24
   18b84:	e006      	b.n	18b94 <mp_builtin___build_class__+0x5c>
    } else {
        // use type of first base object
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   18b86:	683b      	ldr	r3, [r7, #0]
   18b88:	3308      	adds	r3, #8
   18b8a:	681b      	ldr	r3, [r3, #0]
   18b8c:	4618      	mov	r0, r3
   18b8e:	f7f4 fdab 	bl	d6e8 <mp_obj_get_type>
   18b92:	6278      	str	r0, [r7, #36]	; 0x24

    // TODO do proper metaclass resolution for multiple base objects

    // create the new class using a call to the meta object
    mp_obj_t meta_args[3];
    meta_args[0] = args[1]; // class name
   18b94:	683b      	ldr	r3, [r7, #0]
   18b96:	685b      	ldr	r3, [r3, #4]
   18b98:	60bb      	str	r3, [r7, #8]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   18b9a:	687b      	ldr	r3, [r7, #4]
   18b9c:	1e9a      	subs	r2, r3, #2
   18b9e:	683b      	ldr	r3, [r7, #0]
   18ba0:	3308      	adds	r3, #8
   18ba2:	4619      	mov	r1, r3
   18ba4:	4610      	mov	r0, r2
   18ba6:	f7fc ff41 	bl	15a2c <mp_obj_new_tuple>
   18baa:	4603      	mov	r3, r0
   18bac:	60fb      	str	r3, [r7, #12]
    meta_args[2] = class_locals; // dict of members
   18bae:	69fb      	ldr	r3, [r7, #28]
   18bb0:	613b      	str	r3, [r7, #16]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   18bb2:	f107 0308 	add.w	r3, r7, #8
   18bb6:	2200      	movs	r2, #0
   18bb8:	2103      	movs	r1, #3
   18bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18bbc:	f7f3 f8bd 	bl	bd3a <mp_call_function_n_kw>
   18bc0:	6178      	str	r0, [r7, #20]

    // store into cell if neede
    if (cell != mp_const_none) {
   18bc2:	69bb      	ldr	r3, [r7, #24]
   18bc4:	4a09      	ldr	r2, [pc, #36]	; (18bec <mp_builtin___build_class__+0xb4>)
   18bc6:	4293      	cmp	r3, r2
   18bc8:	d003      	beq.n	18bd2 <mp_builtin___build_class__+0x9a>
        mp_obj_cell_set(cell, new_class);
   18bca:	6979      	ldr	r1, [r7, #20]
   18bcc:	69b8      	ldr	r0, [r7, #24]
   18bce:	f7f5 fad7 	bl	e180 <mp_obj_cell_set>
    }

    return new_class;
   18bd2:	697b      	ldr	r3, [r7, #20]
}
   18bd4:	4618      	mov	r0, r3
   18bd6:	3728      	adds	r7, #40	; 0x28
   18bd8:	46bd      	mov	sp, r7
   18bda:	bd80      	pop	{r7, pc}
   18bdc:	00023c74 	.word	0x00023c74
   18be0:	000240a0 	.word	0x000240a0
   18be4:	00023c80 	.word	0x00023c80
   18be8:	00023780 	.word	0x00023780
   18bec:	00022b54 	.word	0x00022b54

00018bf0 <mp_builtin_abs>:
MP_DEFINE_CONST_FUN_OBJ_VAR(mp_builtin___build_class___obj, 2, mp_builtin___build_class__);

STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   18bf0:	b580      	push	{r7, lr}
   18bf2:	b082      	sub	sp, #8
   18bf4:	af00      	add	r7, sp, #0
   18bf6:	6078      	str	r0, [r7, #4]
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   18bf8:	6879      	ldr	r1, [r7, #4]
   18bfa:	2007      	movs	r0, #7
   18bfc:	f7f2 fd20 	bl	b640 <mp_unary_op>
   18c00:	4603      	mov	r3, r0
}
   18c02:	4618      	mov	r0, r3
   18c04:	3708      	adds	r7, #8
   18c06:	46bd      	mov	sp, r7
   18c08:	bd80      	pop	{r7, pc}

00018c0a <mp_builtin_all>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_abs_obj, mp_builtin_abs);

STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   18c0a:	b580      	push	{r7, lr}
   18c0c:	b088      	sub	sp, #32
   18c0e:	af00      	add	r7, sp, #0
   18c10:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   18c12:	f107 0308 	add.w	r3, r7, #8
   18c16:	4619      	mov	r1, r3
   18c18:	6878      	ldr	r0, [r7, #4]
   18c1a:	f7f3 fe01 	bl	c820 <mp_getiter>
   18c1e:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18c20:	e00a      	b.n	18c38 <mp_builtin_all+0x2e>
        if (!mp_obj_is_true(item)) {
   18c22:	69b8      	ldr	r0, [r7, #24]
   18c24:	f7f4 fe3c 	bl	d8a0 <mp_obj_is_true>
   18c28:	4603      	mov	r3, r0
   18c2a:	f083 0301 	eor.w	r3, r3, #1
   18c2e:	b2db      	uxtb	r3, r3
   18c30:	2b00      	cmp	r3, #0
   18c32:	d001      	beq.n	18c38 <mp_builtin_all+0x2e>
            return mp_const_false;
   18c34:	4b06      	ldr	r3, [pc, #24]	; (18c50 <mp_builtin_all+0x46>)
   18c36:	e007      	b.n	18c48 <mp_builtin_all+0x3e>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18c38:	69f8      	ldr	r0, [r7, #28]
   18c3a:	f7f3 fe73 	bl	c924 <mp_iternext>
   18c3e:	61b8      	str	r0, [r7, #24]
   18c40:	69bb      	ldr	r3, [r7, #24]
   18c42:	2b04      	cmp	r3, #4
   18c44:	d1ed      	bne.n	18c22 <mp_builtin_all+0x18>
        }
    }
    return mp_const_true;
   18c46:	4b03      	ldr	r3, [pc, #12]	; (18c54 <mp_builtin_all+0x4a>)
}
   18c48:	4618      	mov	r0, r3
   18c4a:	3720      	adds	r7, #32
   18c4c:	46bd      	mov	sp, r7
   18c4e:	bd80      	pop	{r7, pc}
   18c50:	00021308 	.word	0x00021308
   18c54:	00021310 	.word	0x00021310

00018c58 <mp_builtin_any>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_all_obj, mp_builtin_all);

STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   18c58:	b580      	push	{r7, lr}
   18c5a:	b088      	sub	sp, #32
   18c5c:	af00      	add	r7, sp, #0
   18c5e:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   18c60:	f107 0308 	add.w	r3, r7, #8
   18c64:	4619      	mov	r1, r3
   18c66:	6878      	ldr	r0, [r7, #4]
   18c68:	f7f3 fdda 	bl	c820 <mp_getiter>
   18c6c:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18c6e:	e007      	b.n	18c80 <mp_builtin_any+0x28>
        if (mp_obj_is_true(item)) {
   18c70:	69b8      	ldr	r0, [r7, #24]
   18c72:	f7f4 fe15 	bl	d8a0 <mp_obj_is_true>
   18c76:	4603      	mov	r3, r0
   18c78:	2b00      	cmp	r3, #0
   18c7a:	d001      	beq.n	18c80 <mp_builtin_any+0x28>
            return mp_const_true;
   18c7c:	4b06      	ldr	r3, [pc, #24]	; (18c98 <mp_builtin_any+0x40>)
   18c7e:	e007      	b.n	18c90 <mp_builtin_any+0x38>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18c80:	69f8      	ldr	r0, [r7, #28]
   18c82:	f7f3 fe4f 	bl	c924 <mp_iternext>
   18c86:	61b8      	str	r0, [r7, #24]
   18c88:	69bb      	ldr	r3, [r7, #24]
   18c8a:	2b04      	cmp	r3, #4
   18c8c:	d1f0      	bne.n	18c70 <mp_builtin_any+0x18>
        }
    }
    return mp_const_false;
   18c8e:	4b03      	ldr	r3, [pc, #12]	; (18c9c <mp_builtin_any+0x44>)
}
   18c90:	4618      	mov	r0, r3
   18c92:	3720      	adds	r7, #32
   18c94:	46bd      	mov	sp, r7
   18c96:	bd80      	pop	{r7, pc}
   18c98:	00021310 	.word	0x00021310
   18c9c:	00021308 	.word	0x00021308

00018ca0 <mp_builtin_bin>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_any_obj, mp_builtin_any);

STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   18ca0:	b580      	push	{r7, lr}
   18ca2:	b084      	sub	sp, #16
   18ca4:	af00      	add	r7, sp, #0
   18ca6:	6078      	str	r0, [r7, #4]
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   18ca8:	23ae      	movs	r3, #174	; 0xae
   18caa:	60bb      	str	r3, [r7, #8]
   18cac:	687b      	ldr	r3, [r7, #4]
   18cae:	60fb      	str	r3, [r7, #12]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   18cb0:	f107 0308 	add.w	r3, r7, #8
   18cb4:	2200      	movs	r2, #0
   18cb6:	4619      	mov	r1, r3
   18cb8:	2002      	movs	r0, #2
   18cba:	f7fb f9ab 	bl	14014 <mp_obj_str_format>
   18cbe:	4603      	mov	r3, r0
}
   18cc0:	4618      	mov	r0, r3
   18cc2:	3710      	adds	r7, #16
   18cc4:	46bd      	mov	sp, r7
   18cc6:	bd80      	pop	{r7, pc}

00018cc8 <mp_builtin_callable>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_bin_obj, mp_builtin_bin);

STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   18cc8:	b580      	push	{r7, lr}
   18cca:	b082      	sub	sp, #8
   18ccc:	af00      	add	r7, sp, #0
   18cce:	6078      	str	r0, [r7, #4]
    if (mp_obj_is_callable(o_in)) {
   18cd0:	6878      	ldr	r0, [r7, #4]
   18cd2:	f7f4 fe3b 	bl	d94c <mp_obj_is_callable>
   18cd6:	4603      	mov	r3, r0
   18cd8:	2b00      	cmp	r3, #0
   18cda:	d001      	beq.n	18ce0 <mp_builtin_callable+0x18>
        return mp_const_true;
   18cdc:	4b03      	ldr	r3, [pc, #12]	; (18cec <mp_builtin_callable+0x24>)
   18cde:	e000      	b.n	18ce2 <mp_builtin_callable+0x1a>
    } else {
        return mp_const_false;
   18ce0:	4b03      	ldr	r3, [pc, #12]	; (18cf0 <mp_builtin_callable+0x28>)
    }
}
   18ce2:	4618      	mov	r0, r3
   18ce4:	3708      	adds	r7, #8
   18ce6:	46bd      	mov	sp, r7
   18ce8:	bd80      	pop	{r7, pc}
   18cea:	bf00      	nop
   18cec:	00021310 	.word	0x00021310
   18cf0:	00021308 	.word	0x00021308

00018cf4 <mp_builtin_chr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_callable_obj, mp_builtin_callable);

STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   18cf4:	b580      	push	{r7, lr}
   18cf6:	b084      	sub	sp, #16
   18cf8:	af00      	add	r7, sp, #0
   18cfa:	6078      	str	r0, [r7, #4]
    } else {
        mp_raise_ValueError("chr() arg not in range(0x110000)");
    }
    return mp_obj_new_str_via_qstr((char*)str, len);
    #else
    mp_int_t ord = mp_obj_get_int(o_in);
   18cfc:	6878      	ldr	r0, [r7, #4]
   18cfe:	f7f4 fecf 	bl	daa0 <mp_obj_get_int>
   18d02:	60f8      	str	r0, [r7, #12]
    if (0 <= ord && ord <= 0xff) {
   18d04:	68fb      	ldr	r3, [r7, #12]
   18d06:	2b00      	cmp	r3, #0
   18d08:	db0d      	blt.n	18d26 <mp_builtin_chr+0x32>
   18d0a:	68fb      	ldr	r3, [r7, #12]
   18d0c:	2bff      	cmp	r3, #255	; 0xff
   18d0e:	dc0a      	bgt.n	18d26 <mp_builtin_chr+0x32>
        uint8_t str[1] = {ord};
   18d10:	68fb      	ldr	r3, [r7, #12]
   18d12:	b2db      	uxtb	r3, r3
   18d14:	723b      	strb	r3, [r7, #8]
        return mp_obj_new_str_via_qstr((char*)str, 1);
   18d16:	f107 0308 	add.w	r3, r7, #8
   18d1a:	2101      	movs	r1, #1
   18d1c:	4618      	mov	r0, r3
   18d1e:	f7fc f917 	bl	14f50 <mp_obj_new_str_via_qstr>
   18d22:	4603      	mov	r3, r0
   18d24:	e002      	b.n	18d2c <mp_builtin_chr+0x38>
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
   18d26:	4803      	ldr	r0, [pc, #12]	; (18d34 <mp_builtin_chr+0x40>)
   18d28:	f7f4 f8bd 	bl	cea6 <mp_raise_ValueError>
    }
    #endif
}
   18d2c:	4618      	mov	r0, r3
   18d2e:	3710      	adds	r7, #16
   18d30:	46bd      	mov	sp, r7
   18d32:	bd80      	pop	{r7, pc}
   18d34:	00023ccc 	.word	0x00023ccc

00018d38 <mp_builtin_dir>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_chr_obj, mp_builtin_chr);

STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   18d38:	b580      	push	{r7, lr}
   18d3a:	b08a      	sub	sp, #40	; 0x28
   18d3c:	af00      	add	r7, sp, #0
   18d3e:	6078      	str	r0, [r7, #4]
   18d40:	6039      	str	r1, [r7, #0]
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   18d42:	2100      	movs	r1, #0
   18d44:	2000      	movs	r0, #0
   18d46:	f7f8 fc48 	bl	115da <mp_obj_new_list>
   18d4a:	61f8      	str	r0, [r7, #28]
    if (n_args == 0) {
   18d4c:	687b      	ldr	r3, [r7, #4]
   18d4e:	2b00      	cmp	r3, #0
   18d50:	d121      	bne.n	18d96 <mp_builtin_dir+0x5e>
        // Make a list of names in the local namespace
        mp_obj_dict_t *dict = mp_locals_get();
   18d52:	f7ff fec9 	bl	18ae8 <mp_locals_get>
   18d56:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   18d58:	2300      	movs	r3, #0
   18d5a:	627b      	str	r3, [r7, #36]	; 0x24
   18d5c:	e015      	b.n	18d8a <mp_builtin_dir+0x52>
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   18d5e:	69bb      	ldr	r3, [r7, #24]
   18d60:	3304      	adds	r3, #4
   18d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18d64:	4618      	mov	r0, r3
   18d66:	f7ff fe89 	bl	18a7c <MP_MAP_SLOT_IS_FILLED>
   18d6a:	4603      	mov	r3, r0
   18d6c:	2b00      	cmp	r3, #0
   18d6e:	d009      	beq.n	18d84 <mp_builtin_dir+0x4c>
                mp_obj_list_append(dir, dict->map.table[i].key);
   18d70:	69bb      	ldr	r3, [r7, #24]
   18d72:	68da      	ldr	r2, [r3, #12]
   18d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18d76:	00db      	lsls	r3, r3, #3
   18d78:	4413      	add	r3, r2
   18d7a:	681b      	ldr	r3, [r3, #0]
   18d7c:	4619      	mov	r1, r3
   18d7e:	69f8      	ldr	r0, [r7, #28]
   18d80:	f7f7 ffbf 	bl	10d02 <mp_obj_list_append>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   18d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18d86:	3301      	adds	r3, #1
   18d88:	627b      	str	r3, [r7, #36]	; 0x24
   18d8a:	69bb      	ldr	r3, [r7, #24]
   18d8c:	689a      	ldr	r2, [r3, #8]
   18d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18d90:	429a      	cmp	r2, r3
   18d92:	d8e4      	bhi.n	18d5e <mp_builtin_dir+0x26>
   18d94:	e024      	b.n	18de0 <mp_builtin_dir+0xa8>
            }
        }
    } else { // n_args == 1
        // Make a list of names in the given object
        // Implemented by probing all possible qstrs with mp_load_method_maybe
        size_t nqstr = QSTR_TOTAL();
   18d96:	4b15      	ldr	r3, [pc, #84]	; (18dec <mp_builtin_dir+0xb4>)
   18d98:	691b      	ldr	r3, [r3, #16]
   18d9a:	685a      	ldr	r2, [r3, #4]
   18d9c:	4b13      	ldr	r3, [pc, #76]	; (18dec <mp_builtin_dir+0xb4>)
   18d9e:	691b      	ldr	r3, [r3, #16]
   18da0:	68db      	ldr	r3, [r3, #12]
   18da2:	4413      	add	r3, r2
   18da4:	617b      	str	r3, [r7, #20]
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   18da6:	2302      	movs	r3, #2
   18da8:	623b      	str	r3, [r7, #32]
   18daa:	e015      	b.n	18dd8 <mp_builtin_dir+0xa0>
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, false);
   18dac:	683b      	ldr	r3, [r7, #0]
   18dae:	6818      	ldr	r0, [r3, #0]
   18db0:	f107 020c 	add.w	r2, r7, #12
   18db4:	2300      	movs	r3, #0
   18db6:	6a39      	ldr	r1, [r7, #32]
   18db8:	f7f3 fcd6 	bl	c768 <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   18dbc:	68fb      	ldr	r3, [r7, #12]
   18dbe:	2b00      	cmp	r3, #0
   18dc0:	d007      	beq.n	18dd2 <mp_builtin_dir+0x9a>
                // This relies on MP_QSTR__dir__ being first after MP_QSTR_
                if (i == MP_QSTR___dir__ && dest[1] != MP_OBJ_NULL) {
                    return mp_call_method_n_kw(0, 0, dest);
                }
                #endif
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   18dc2:	6a3b      	ldr	r3, [r7, #32]
   18dc4:	009b      	lsls	r3, r3, #2
   18dc6:	f043 0302 	orr.w	r3, r3, #2
   18dca:	4619      	mov	r1, r3
   18dcc:	69f8      	ldr	r0, [r7, #28]
   18dce:	f7f7 ff98 	bl	10d02 <mp_obj_list_append>
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   18dd2:	6a3b      	ldr	r3, [r7, #32]
   18dd4:	3301      	adds	r3, #1
   18dd6:	623b      	str	r3, [r7, #32]
   18dd8:	6a3a      	ldr	r2, [r7, #32]
   18dda:	697b      	ldr	r3, [r7, #20]
   18ddc:	429a      	cmp	r2, r3
   18dde:	d3e5      	bcc.n	18dac <mp_builtin_dir+0x74>
            }
        }
    }
    return dir;
   18de0:	69fb      	ldr	r3, [r7, #28]
}
   18de2:	4618      	mov	r0, r3
   18de4:	3728      	adds	r7, #40	; 0x28
   18de6:	46bd      	mov	sp, r7
   18de8:	bd80      	pop	{r7, pc}
   18dea:	bf00      	nop
   18dec:	20001240 	.word	0x20001240

00018df0 <mp_builtin_divmod>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_dir_obj, 0, 1, mp_builtin_dir);

STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   18df0:	b580      	push	{r7, lr}
   18df2:	b082      	sub	sp, #8
   18df4:	af00      	add	r7, sp, #0
   18df6:	6078      	str	r0, [r7, #4]
   18df8:	6039      	str	r1, [r7, #0]
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   18dfa:	683a      	ldr	r2, [r7, #0]
   18dfc:	6879      	ldr	r1, [r7, #4]
   18dfe:	2021      	movs	r0, #33	; 0x21
   18e00:	f7f2 fd04 	bl	b80c <mp_binary_op>
   18e04:	4603      	mov	r3, r0
}
   18e06:	4618      	mov	r0, r3
   18e08:	3708      	adds	r7, #8
   18e0a:	46bd      	mov	sp, r7
   18e0c:	bd80      	pop	{r7, pc}

00018e0e <mp_builtin_hash>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_divmod_obj, mp_builtin_divmod);

STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   18e0e:	b580      	push	{r7, lr}
   18e10:	b082      	sub	sp, #8
   18e12:	af00      	add	r7, sp, #0
   18e14:	6078      	str	r0, [r7, #4]
    // result is guaranteed to be a (small) int
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   18e16:	6879      	ldr	r1, [r7, #4]
   18e18:	2006      	movs	r0, #6
   18e1a:	f7f2 fc11 	bl	b640 <mp_unary_op>
   18e1e:	4603      	mov	r3, r0
}
   18e20:	4618      	mov	r0, r3
   18e22:	3708      	adds	r7, #8
   18e24:	46bd      	mov	sp, r7
   18e26:	bd80      	pop	{r7, pc}

00018e28 <mp_builtin_hex>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_hash_obj, mp_builtin_hash);

STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   18e28:	b580      	push	{r7, lr}
   18e2a:	b082      	sub	sp, #8
   18e2c:	af00      	add	r7, sp, #0
   18e2e:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   18e30:	687a      	ldr	r2, [r7, #4]
   18e32:	21aa      	movs	r1, #170	; 0xaa
   18e34:	201f      	movs	r0, #31
   18e36:	f7f2 fce9 	bl	b80c <mp_binary_op>
   18e3a:	4603      	mov	r3, r0
}
   18e3c:	4618      	mov	r0, r3
   18e3e:	3708      	adds	r7, #8
   18e40:	46bd      	mov	sp, r7
   18e42:	bd80      	pop	{r7, pc}

00018e44 <mp_builtin_iter>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_input_obj, 0, 1, mp_builtin_input);

#endif

STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   18e44:	b580      	push	{r7, lr}
   18e46:	b082      	sub	sp, #8
   18e48:	af00      	add	r7, sp, #0
   18e4a:	6078      	str	r0, [r7, #4]
    return mp_getiter(o_in, NULL);
   18e4c:	2100      	movs	r1, #0
   18e4e:	6878      	ldr	r0, [r7, #4]
   18e50:	f7f3 fce6 	bl	c820 <mp_getiter>
   18e54:	4603      	mov	r3, r0
}
   18e56:	4618      	mov	r0, r3
   18e58:	3708      	adds	r7, #8
   18e5a:	46bd      	mov	sp, r7
   18e5c:	bd80      	pop	{r7, pc}

00018e5e <mp_builtin_next>:
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_min_obj, 1, mp_builtin_min);

#endif

STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   18e5e:	b580      	push	{r7, lr}
   18e60:	b084      	sub	sp, #16
   18e62:	af00      	add	r7, sp, #0
   18e64:	6078      	str	r0, [r7, #4]
    mp_obj_t ret = mp_iternext_allow_raise(o);
   18e66:	6878      	ldr	r0, [r7, #4]
   18e68:	f7f3 fd2e 	bl	c8c8 <mp_iternext_allow_raise>
   18e6c:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   18e6e:	68fb      	ldr	r3, [r7, #12]
   18e70:	2b04      	cmp	r3, #4
   18e72:	d106      	bne.n	18e82 <mp_builtin_next+0x24>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   18e74:	4805      	ldr	r0, [pc, #20]	; (18e8c <mp_builtin_next+0x2e>)
   18e76:	f7f6 fa1f 	bl	f2b8 <mp_obj_new_exception>
   18e7a:	4603      	mov	r3, r0
   18e7c:	4618      	mov	r0, r3
   18e7e:	f7e7 fa2f 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   18e82:	68fb      	ldr	r3, [r7, #12]
    }
}
   18e84:	4618      	mov	r0, r3
   18e86:	3710      	adds	r7, #16
   18e88:	46bd      	mov	sp, r7
   18e8a:	bd80      	pop	{r7, pc}
   18e8c:	000219e4 	.word	0x000219e4

00018e90 <mp_builtin_oct>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_next_obj, mp_builtin_next);

STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   18e90:	b580      	push	{r7, lr}
   18e92:	b082      	sub	sp, #8
   18e94:	af00      	add	r7, sp, #0
   18e96:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   18e98:	687a      	ldr	r2, [r7, #4]
   18e9a:	21a6      	movs	r1, #166	; 0xa6
   18e9c:	201f      	movs	r0, #31
   18e9e:	f7f2 fcb5 	bl	b80c <mp_binary_op>
   18ea2:	4603      	mov	r3, r0
}
   18ea4:	4618      	mov	r0, r3
   18ea6:	3708      	adds	r7, #8
   18ea8:	46bd      	mov	sp, r7
   18eaa:	bd80      	pop	{r7, pc}

00018eac <mp_builtin_ord>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_oct_obj, mp_builtin_oct);

STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   18eac:	b580      	push	{r7, lr}
   18eae:	b084      	sub	sp, #16
   18eb0:	af00      	add	r7, sp, #0
   18eb2:	6078      	str	r0, [r7, #4]
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   18eb4:	f107 0308 	add.w	r3, r7, #8
   18eb8:	4619      	mov	r1, r3
   18eba:	6878      	ldr	r0, [r7, #4]
   18ebc:	f7fc fa1a 	bl	152f4 <mp_obj_str_get_data>
   18ec0:	60f8      	str	r0, [r7, #12]
        }
    } else
    #endif
    {
        // a bytes object, or a str without unicode support (don't sign extend the char)
        if (len == 1) {
   18ec2:	68bb      	ldr	r3, [r7, #8]
   18ec4:	2b01      	cmp	r3, #1
   18ec6:	d105      	bne.n	18ed4 <mp_builtin_ord+0x28>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   18ec8:	68fb      	ldr	r3, [r7, #12]
   18eca:	781b      	ldrb	r3, [r3, #0]
   18ecc:	005b      	lsls	r3, r3, #1
   18ece:	f043 0301 	orr.w	r3, r3, #1
   18ed2:	e002      	b.n	18eda <mp_builtin_ord+0x2e>
        }
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("ord expects a character");
   18ed4:	4803      	ldr	r0, [pc, #12]	; (18ee4 <mp_builtin_ord+0x38>)
   18ed6:	f7f3 fff1 	bl	cebc <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "ord() expected a character, but string of length %d found", (int)len));
    }
}
   18eda:	4618      	mov	r0, r3
   18edc:	3710      	adds	r7, #16
   18ede:	46bd      	mov	sp, r7
   18ee0:	bd80      	pop	{r7, pc}
   18ee2:	bf00      	nop
   18ee4:	00023d2c 	.word	0x00023d2c

00018ee8 <mp_builtin_pow>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_ord_obj, mp_builtin_ord);

STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   18ee8:	b580      	push	{r7, lr}
   18eea:	b082      	sub	sp, #8
   18eec:	af00      	add	r7, sp, #0
   18eee:	6078      	str	r0, [r7, #4]
   18ef0:	6039      	str	r1, [r7, #0]
    switch (n_args) {
   18ef2:	687b      	ldr	r3, [r7, #4]
   18ef4:	2b02      	cmp	r3, #2
   18ef6:	d10a      	bne.n	18f0e <mp_builtin_pow+0x26>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   18ef8:	683b      	ldr	r3, [r7, #0]
   18efa:	6819      	ldr	r1, [r3, #0]
   18efc:	683b      	ldr	r3, [r7, #0]
   18efe:	3304      	adds	r3, #4
   18f00:	681b      	ldr	r3, [r3, #0]
   18f02:	461a      	mov	r2, r3
   18f04:	2020      	movs	r0, #32
   18f06:	f7f2 fc81 	bl	b80c <mp_binary_op>
   18f0a:	4603      	mov	r3, r0
   18f0c:	e003      	b.n	18f16 <mp_builtin_pow+0x2e>
        default:
#if !MICROPY_PY_BUILTINS_POW3
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   18f0e:	4904      	ldr	r1, [pc, #16]	; (18f20 <mp_builtin_pow+0x38>)
   18f10:	4804      	ldr	r0, [pc, #16]	; (18f24 <mp_builtin_pow+0x3c>)
   18f12:	f7f3 ffb1 	bl	ce78 <mp_raise_msg>
            return mp_binary_op(MP_BINARY_OP_MODULO, mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]), args[2]);
#else
            return mp_obj_int_pow3(args[0], args[1], args[2]);
#endif
    }
}
   18f16:	4618      	mov	r0, r3
   18f18:	3708      	adds	r7, #8
   18f1a:	46bd      	mov	sp, r7
   18f1c:	bd80      	pop	{r7, pc}
   18f1e:	bf00      	nop
   18f20:	00023d4c 	.word	0x00023d4c
   18f24:	00021d68 	.word	0x00021d68

00018f28 <mp_builtin_print>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_pow_obj, 2, 3, mp_builtin_pow);

STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   18f28:	b580      	push	{r7, lr}
   18f2a:	b08e      	sub	sp, #56	; 0x38
   18f2c:	af02      	add	r7, sp, #8
   18f2e:	60f8      	str	r0, [r7, #12]
   18f30:	60b9      	str	r1, [r7, #8]
   18f32:	607a      	str	r2, [r7, #4]
    // parse args (a union is used to reduce the amount of C stack that is needed)
    union {
        mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   18f34:	f107 0314 	add.w	r3, r7, #20
   18f38:	9301      	str	r3, [sp, #4]
   18f3a:	4b25      	ldr	r3, [pc, #148]	; (18fd0 <mp_builtin_print+0xa8>)
   18f3c:	9300      	str	r3, [sp, #0]
   18f3e:	2302      	movs	r3, #2
   18f40:	687a      	ldr	r2, [r7, #4]
   18f42:	2100      	movs	r1, #0
   18f44:	2000      	movs	r0, #0
   18f46:	f7f4 f80b 	bl	cf60 <mp_arg_parse_all>
    mp_get_stream_raise(u.args[ARG_file].u_obj, MP_STREAM_OP_WRITE);
    mp_print_t print = {MP_OBJ_TO_PTR(u.args[ARG_file].u_obj), mp_stream_write_adaptor};
    #endif

    // extract the objects first because we are going to use the other part of the union
    mp_obj_t sep = u.args[ARG_sep].u_obj;
   18f4a:	697b      	ldr	r3, [r7, #20]
   18f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_obj_t end = u.args[ARG_end].u_obj;
   18f4e:	69bb      	ldr	r3, [r7, #24]
   18f50:	627b      	str	r3, [r7, #36]	; 0x24
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   18f52:	f107 0314 	add.w	r3, r7, #20
   18f56:	4619      	mov	r1, r3
   18f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   18f5a:	f7fc f9cb 	bl	152f4 <mp_obj_str_get_data>
   18f5e:	6238      	str	r0, [r7, #32]
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   18f60:	f107 0314 	add.w	r3, r7, #20
   18f64:	3304      	adds	r3, #4
   18f66:	4619      	mov	r1, r3
   18f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18f6a:	f7fc f9c3 	bl	152f4 <mp_obj_str_get_data>
   18f6e:	61f8      	str	r0, [r7, #28]

    for (size_t i = 0; i < n_args; i++) {
   18f70:	2300      	movs	r3, #0
   18f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   18f74:	e019      	b.n	18faa <mp_builtin_print+0x82>
        if (i > 0) {
   18f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18f78:	2b00      	cmp	r3, #0
   18f7a:	d009      	beq.n	18f90 <mp_builtin_print+0x68>
            #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
            mp_stream_write_adaptor(print.data, sep_data, u.len[0]);
            #else
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   18f7c:	697a      	ldr	r2, [r7, #20]
   18f7e:	2300      	movs	r3, #0
   18f80:	9301      	str	r3, [sp, #4]
   18f82:	2300      	movs	r3, #0
   18f84:	9300      	str	r3, [sp, #0]
   18f86:	2300      	movs	r3, #0
   18f88:	6a39      	ldr	r1, [r7, #32]
   18f8a:	4812      	ldr	r0, [pc, #72]	; (18fd4 <mp_builtin_print+0xac>)
   18f8c:	f7e8 fc86 	bl	189c <mp_print_strn>
            #endif
        }
        #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
        mp_obj_print_helper(&print, pos_args[i], PRINT_STR);
        #else
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   18f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18f92:	009b      	lsls	r3, r3, #2
   18f94:	68ba      	ldr	r2, [r7, #8]
   18f96:	4413      	add	r3, r2
   18f98:	681b      	ldr	r3, [r3, #0]
   18f9a:	2200      	movs	r2, #0
   18f9c:	4619      	mov	r1, r3
   18f9e:	480d      	ldr	r0, [pc, #52]	; (18fd4 <mp_builtin_print+0xac>)
   18fa0:	f7f4 fbd3 	bl	d74a <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   18fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18fa6:	3301      	adds	r3, #1
   18fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   18faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   18fac:	68fb      	ldr	r3, [r7, #12]
   18fae:	429a      	cmp	r2, r3
   18fb0:	d3e1      	bcc.n	18f76 <mp_builtin_print+0x4e>
        #endif
    }
    #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
    mp_stream_write_adaptor(print.data, end_data, u.len[1]);
    #else
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   18fb2:	69ba      	ldr	r2, [r7, #24]
   18fb4:	2300      	movs	r3, #0
   18fb6:	9301      	str	r3, [sp, #4]
   18fb8:	2300      	movs	r3, #0
   18fba:	9300      	str	r3, [sp, #0]
   18fbc:	2300      	movs	r3, #0
   18fbe:	69f9      	ldr	r1, [r7, #28]
   18fc0:	4804      	ldr	r0, [pc, #16]	; (18fd4 <mp_builtin_print+0xac>)
   18fc2:	f7e8 fc6b 	bl	189c <mp_print_strn>
    #endif
    return mp_const_none;
   18fc6:	4b04      	ldr	r3, [pc, #16]	; (18fd8 <mp_builtin_print+0xb0>)
}
   18fc8:	4618      	mov	r0, r3
   18fca:	3730      	adds	r7, #48	; 0x30
   18fcc:	46bd      	mov	sp, r7
   18fce:	bd80      	pop	{r7, pc}
   18fd0:	000240bc 	.word	0x000240bc
   18fd4:	0001ef0c 	.word	0x0001ef0c
   18fd8:	00022b54 	.word	0x00022b54

00018fdc <mp_builtin___repl_print__>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_print_obj, 0, mp_builtin_print);

STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   18fdc:	b580      	push	{r7, lr}
   18fde:	b082      	sub	sp, #8
   18fe0:	af00      	add	r7, sp, #0
   18fe2:	6078      	str	r0, [r7, #4]
    if (o != mp_const_none) {
   18fe4:	687b      	ldr	r3, [r7, #4]
   18fe6:	4a08      	ldr	r2, [pc, #32]	; (19008 <mp_builtin___repl_print__+0x2c>)
   18fe8:	4293      	cmp	r3, r2
   18fea:	d008      	beq.n	18ffe <mp_builtin___repl_print__+0x22>
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   18fec:	2201      	movs	r2, #1
   18fee:	6879      	ldr	r1, [r7, #4]
   18ff0:	4806      	ldr	r0, [pc, #24]	; (1900c <mp_builtin___repl_print__+0x30>)
   18ff2:	f7f4 fbaa 	bl	d74a <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   18ff6:	4906      	ldr	r1, [pc, #24]	; (19010 <mp_builtin___repl_print__+0x34>)
   18ff8:	4804      	ldr	r0, [pc, #16]	; (1900c <mp_builtin___repl_print__+0x30>)
   18ffa:	f7e8 fc37 	bl	186c <mp_print_str>
        // Set "_" special variable
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, o};
        mp_type_module.attr(MP_OBJ_FROM_PTR(&mp_module_builtins), MP_QSTR__, dest);
        #endif
    }
    return mp_const_none;
   18ffe:	4b02      	ldr	r3, [pc, #8]	; (19008 <mp_builtin___repl_print__+0x2c>)
}
   19000:	4618      	mov	r0, r3
   19002:	3708      	adds	r7, #8
   19004:	46bd      	mov	sp, r7
   19006:	bd80      	pop	{r7, pc}
   19008:	00022b54 	.word	0x00022b54
   1900c:	0001ef0c 	.word	0x0001ef0c
   19010:	00023d80 	.word	0x00023d80

00019014 <mp_builtin_repr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin___repl_print___obj, mp_builtin___repl_print__);

STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   19014:	b580      	push	{r7, lr}
   19016:	b088      	sub	sp, #32
   19018:	af00      	add	r7, sp, #0
   1901a:	6078      	str	r0, [r7, #4]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   1901c:	f107 0208 	add.w	r2, r7, #8
   19020:	f107 0310 	add.w	r3, r7, #16
   19024:	2110      	movs	r1, #16
   19026:	4618      	mov	r0, r3
   19028:	f7e8 f9b5 	bl	1396 <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   1902c:	f107 0308 	add.w	r3, r7, #8
   19030:	2201      	movs	r2, #1
   19032:	6879      	ldr	r1, [r7, #4]
   19034:	4618      	mov	r0, r3
   19036:	f7f4 fb88 	bl	d74a <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   1903a:	f107 0310 	add.w	r3, r7, #16
   1903e:	4619      	mov	r1, r3
   19040:	4803      	ldr	r0, [pc, #12]	; (19050 <mp_builtin_repr+0x3c>)
   19042:	f7fb ff96 	bl	14f72 <mp_obj_new_str_from_vstr>
   19046:	4603      	mov	r3, r0
}
   19048:	4618      	mov	r0, r3
   1904a:	3720      	adds	r7, #32
   1904c:	46bd      	mov	sp, r7
   1904e:	bd80      	pop	{r7, pc}
   19050:	00023204 	.word	0x00023204

00019054 <mp_builtin_round>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_repr_obj, mp_builtin_repr);

STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   19054:	b580      	push	{r7, lr}
   19056:	b084      	sub	sp, #16
   19058:	af00      	add	r7, sp, #0
   1905a:	6078      	str	r0, [r7, #4]
   1905c:	6039      	str	r1, [r7, #0]
    mp_obj_t o_in = args[0];
   1905e:	683b      	ldr	r3, [r7, #0]
   19060:	681b      	ldr	r3, [r3, #0]
   19062:	60fb      	str	r3, [r7, #12]
    if (MP_OBJ_IS_INT(o_in)) {
   19064:	68f8      	ldr	r0, [r7, #12]
   19066:	f7ff fce5 	bl	18a34 <MP_OBJ_IS_SMALL_INT>
   1906a:	4603      	mov	r3, r0
   1906c:	2b00      	cmp	r3, #0
   1906e:	d10a      	bne.n	19086 <mp_builtin_round+0x32>
   19070:	68f8      	ldr	r0, [r7, #12]
   19072:	f7ff fcf1 	bl	18a58 <MP_OBJ_IS_OBJ>
   19076:	4603      	mov	r3, r0
   19078:	2b00      	cmp	r3, #0
   1907a:	d00c      	beq.n	19096 <mp_builtin_round+0x42>
   1907c:	68fb      	ldr	r3, [r7, #12]
   1907e:	681b      	ldr	r3, [r3, #0]
   19080:	4a0b      	ldr	r2, [pc, #44]	; (190b0 <mp_builtin_round+0x5c>)
   19082:	4293      	cmp	r3, r2
   19084:	d107      	bne.n	19096 <mp_builtin_round+0x42>
        if (n_args <= 1) {
   19086:	687b      	ldr	r3, [r7, #4]
   19088:	2b01      	cmp	r3, #1
   1908a:	d801      	bhi.n	19090 <mp_builtin_round+0x3c>
            return o_in;
   1908c:	68fb      	ldr	r3, [r7, #12]
   1908e:	e00a      	b.n	190a6 <mp_builtin_round+0x52>
        }

        #if !MICROPY_PY_BUILTINS_ROUND_INT
        mp_raise_NotImplementedError(NULL);
   19090:	2000      	movs	r0, #0
   19092:	f7f3 ff2f 	bl	cef4 <mp_raise_NotImplementedError>
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
    return mp_obj_new_int_from_float(rounded);
#else
    mp_int_t r = mp_obj_get_int(o_in);
   19096:	68f8      	ldr	r0, [r7, #12]
   19098:	f7f4 fd02 	bl	daa0 <mp_obj_get_int>
   1909c:	60b8      	str	r0, [r7, #8]
    return mp_obj_new_int(r);
   1909e:	68b8      	ldr	r0, [r7, #8]
   190a0:	f7f7 fb1c 	bl	106dc <mp_obj_new_int>
   190a4:	4603      	mov	r3, r0
#endif
}
   190a6:	4618      	mov	r0, r3
   190a8:	3710      	adds	r7, #16
   190aa:	46bd      	mov	sp, r7
   190ac:	bd80      	pop	{r7, pc}
   190ae:	bf00      	nop
   190b0:	00022610 	.word	0x00022610

000190b4 <mp_builtin_sum>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_round_obj, 1, 2, mp_builtin_round);

STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   190b4:	b580      	push	{r7, lr}
   190b6:	b08a      	sub	sp, #40	; 0x28
   190b8:	af00      	add	r7, sp, #0
   190ba:	6078      	str	r0, [r7, #4]
   190bc:	6039      	str	r1, [r7, #0]
    mp_obj_t value;
    switch (n_args) {
   190be:	687b      	ldr	r3, [r7, #4]
   190c0:	2b01      	cmp	r3, #1
   190c2:	d102      	bne.n	190ca <mp_builtin_sum+0x16>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   190c4:	2301      	movs	r3, #1
   190c6:	627b      	str	r3, [r7, #36]	; 0x24
   190c8:	e003      	b.n	190d2 <mp_builtin_sum+0x1e>
        default: value = args[1]; break;
   190ca:	683b      	ldr	r3, [r7, #0]
   190cc:	685b      	ldr	r3, [r3, #4]
   190ce:	627b      	str	r3, [r7, #36]	; 0x24
   190d0:	bf00      	nop
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   190d2:	683b      	ldr	r3, [r7, #0]
   190d4:	681b      	ldr	r3, [r3, #0]
   190d6:	f107 020c 	add.w	r2, r7, #12
   190da:	4611      	mov	r1, r2
   190dc:	4618      	mov	r0, r3
   190de:	f7f3 fb9f 	bl	c820 <mp_getiter>
   190e2:	6238      	str	r0, [r7, #32]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   190e4:	e005      	b.n	190f2 <mp_builtin_sum+0x3e>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   190e6:	69fa      	ldr	r2, [r7, #28]
   190e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   190ea:	201a      	movs	r0, #26
   190ec:	f7f2 fb8e 	bl	b80c <mp_binary_op>
   190f0:	6278      	str	r0, [r7, #36]	; 0x24
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   190f2:	6a38      	ldr	r0, [r7, #32]
   190f4:	f7f3 fc16 	bl	c924 <mp_iternext>
   190f8:	61f8      	str	r0, [r7, #28]
   190fa:	69fb      	ldr	r3, [r7, #28]
   190fc:	2b04      	cmp	r3, #4
   190fe:	d1f2      	bne.n	190e6 <mp_builtin_sum+0x32>
    }
    return value;
   19100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   19102:	4618      	mov	r0, r3
   19104:	3728      	adds	r7, #40	; 0x28
   19106:	46bd      	mov	sp, r7
   19108:	bd80      	pop	{r7, pc}

0001910a <mp_builtin_sorted>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_sum_obj, 1, 2, mp_builtin_sum);

STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1910a:	b590      	push	{r4, r7, lr}
   1910c:	b087      	sub	sp, #28
   1910e:	af00      	add	r7, sp, #0
   19110:	60f8      	str	r0, [r7, #12]
   19112:	60b9      	str	r1, [r7, #8]
   19114:	607a      	str	r2, [r7, #4]
    if (n_args > 1) {
   19116:	68fb      	ldr	r3, [r7, #12]
   19118:	2b01      	cmp	r3, #1
   1911a:	d902      	bls.n	19122 <mp_builtin_sorted+0x18>
        mp_raise_TypeError("must use keyword argument for key function");
   1911c:	480b      	ldr	r0, [pc, #44]	; (1914c <mp_builtin_sorted+0x42>)
   1911e:	f7f3 fecd 	bl	cebc <mp_raise_TypeError>
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   19122:	4b0b      	ldr	r3, [pc, #44]	; (19150 <mp_builtin_sorted+0x46>)
   19124:	68dc      	ldr	r4, [r3, #12]
   19126:	68bb      	ldr	r3, [r7, #8]
   19128:	2200      	movs	r2, #0
   1912a:	2101      	movs	r1, #1
   1912c:	4808      	ldr	r0, [pc, #32]	; (19150 <mp_builtin_sorted+0x46>)
   1912e:	47a0      	blx	r4
   19130:	4603      	mov	r3, r0
   19132:	617b      	str	r3, [r7, #20]
    mp_obj_list_sort(1, &self, kwargs);
   19134:	f107 0314 	add.w	r3, r7, #20
   19138:	687a      	ldr	r2, [r7, #4]
   1913a:	4619      	mov	r1, r3
   1913c:	2001      	movs	r0, #1
   1913e:	f7f7 ffe2 	bl	11106 <mp_obj_list_sort>

    return self;
   19142:	697b      	ldr	r3, [r7, #20]
}
   19144:	4618      	mov	r0, r3
   19146:	371c      	adds	r7, #28
   19148:	46bd      	mov	sp, r7
   1914a:	bd90      	pop	{r4, r7, pc}
   1914c:	00023dac 	.word	0x00023dac
   19150:	0002287c 	.word	0x0002287c

00019154 <mp_load_attr_default>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_sorted_obj, 1, mp_builtin_sorted);

// See mp_load_attr() if making any changes
static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
   19154:	b580      	push	{r7, lr}
   19156:	b086      	sub	sp, #24
   19158:	af00      	add	r7, sp, #0
   1915a:	60f8      	str	r0, [r7, #12]
   1915c:	60b9      	str	r1, [r7, #8]
   1915e:	607a      	str	r2, [r7, #4]
    mp_obj_t dest[2];
    // use load_method, raising or not raising exception
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   19160:	687b      	ldr	r3, [r7, #4]
   19162:	2b00      	cmp	r3, #0
   19164:	d101      	bne.n	1916a <mp_load_attr_default+0x16>
   19166:	4b0e      	ldr	r3, [pc, #56]	; (191a0 <mp_load_attr_default+0x4c>)
   19168:	e000      	b.n	1916c <mp_load_attr_default+0x18>
   1916a:	4b0e      	ldr	r3, [pc, #56]	; (191a4 <mp_load_attr_default+0x50>)
   1916c:	f107 0210 	add.w	r2, r7, #16
   19170:	68b9      	ldr	r1, [r7, #8]
   19172:	68f8      	ldr	r0, [r7, #12]
   19174:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   19176:	693b      	ldr	r3, [r7, #16]
   19178:	2b00      	cmp	r3, #0
   1917a:	d101      	bne.n	19180 <mp_load_attr_default+0x2c>
        return defval;
   1917c:	687b      	ldr	r3, [r7, #4]
   1917e:	e00b      	b.n	19198 <mp_load_attr_default+0x44>
    } else if (dest[1] == MP_OBJ_NULL) {
   19180:	697b      	ldr	r3, [r7, #20]
   19182:	2b00      	cmp	r3, #0
   19184:	d101      	bne.n	1918a <mp_load_attr_default+0x36>
        // load_method returned just a normal attribute
        return dest[0];
   19186:	693b      	ldr	r3, [r7, #16]
   19188:	e006      	b.n	19198 <mp_load_attr_default+0x44>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   1918a:	693b      	ldr	r3, [r7, #16]
   1918c:	697a      	ldr	r2, [r7, #20]
   1918e:	4611      	mov	r1, r2
   19190:	4618      	mov	r0, r3
   19192:	f7f4 ffce 	bl	e132 <mp_obj_new_bound_meth>
   19196:	4603      	mov	r3, r0
    }
}
   19198:	4618      	mov	r0, r3
   1919a:	3718      	adds	r7, #24
   1919c:	46bd      	mov	sp, r7
   1919e:	bd80      	pop	{r7, pc}
   191a0:	0000c731 	.word	0x0000c731
   191a4:	0000c66d 	.word	0x0000c66d

000191a8 <mp_builtin_getattr>:

STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   191a8:	b590      	push	{r4, r7, lr}
   191aa:	b085      	sub	sp, #20
   191ac:	af00      	add	r7, sp, #0
   191ae:	6078      	str	r0, [r7, #4]
   191b0:	6039      	str	r1, [r7, #0]
    mp_obj_t defval = MP_OBJ_NULL;
   191b2:	2300      	movs	r3, #0
   191b4:	60fb      	str	r3, [r7, #12]
    if (n_args > 2) {
   191b6:	687b      	ldr	r3, [r7, #4]
   191b8:	2b02      	cmp	r3, #2
   191ba:	d902      	bls.n	191c2 <mp_builtin_getattr+0x1a>
        defval = args[2];
   191bc:	683b      	ldr	r3, [r7, #0]
   191be:	689b      	ldr	r3, [r3, #8]
   191c0:	60fb      	str	r3, [r7, #12]
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   191c2:	683b      	ldr	r3, [r7, #0]
   191c4:	681c      	ldr	r4, [r3, #0]
   191c6:	683b      	ldr	r3, [r7, #0]
   191c8:	3304      	adds	r3, #4
   191ca:	681b      	ldr	r3, [r3, #0]
   191cc:	4618      	mov	r0, r3
   191ce:	f7fc f82b 	bl	15228 <mp_obj_str_get_qstr>
   191d2:	4603      	mov	r3, r0
   191d4:	68fa      	ldr	r2, [r7, #12]
   191d6:	4619      	mov	r1, r3
   191d8:	4620      	mov	r0, r4
   191da:	f7ff ffbb 	bl	19154 <mp_load_attr_default>
   191de:	4603      	mov	r3, r0
}
   191e0:	4618      	mov	r0, r3
   191e2:	3714      	adds	r7, #20
   191e4:	46bd      	mov	sp, r7
   191e6:	bd90      	pop	{r4, r7, pc}

000191e8 <mp_builtin_setattr>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_getattr_obj, 2, 3, mp_builtin_getattr);

STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   191e8:	b580      	push	{r7, lr}
   191ea:	b084      	sub	sp, #16
   191ec:	af00      	add	r7, sp, #0
   191ee:	60f8      	str	r0, [r7, #12]
   191f0:	60b9      	str	r1, [r7, #8]
   191f2:	607a      	str	r2, [r7, #4]
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   191f4:	68b8      	ldr	r0, [r7, #8]
   191f6:	f7fc f817 	bl	15228 <mp_obj_str_get_qstr>
   191fa:	4603      	mov	r3, r0
   191fc:	687a      	ldr	r2, [r7, #4]
   191fe:	4619      	mov	r1, r3
   19200:	68f8      	ldr	r0, [r7, #12]
   19202:	f7f3 fae5 	bl	c7d0 <mp_store_attr>
    return mp_const_none;
   19206:	4b02      	ldr	r3, [pc, #8]	; (19210 <mp_builtin_setattr+0x28>)
}
   19208:	4618      	mov	r0, r3
   1920a:	3710      	adds	r7, #16
   1920c:	46bd      	mov	sp, r7
   1920e:	bd80      	pop	{r7, pc}
   19210:	00022b54 	.word	0x00022b54

00019214 <mp_builtin_hasattr>:
    return mp_builtin_setattr(base, attr, MP_OBJ_NULL);
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_delattr_obj, mp_builtin_delattr);
#endif

STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   19214:	b580      	push	{r7, lr}
   19216:	b086      	sub	sp, #24
   19218:	af00      	add	r7, sp, #0
   1921a:	6078      	str	r0, [r7, #4]
   1921c:	6039      	str	r1, [r7, #0]
    qstr attr = mp_obj_str_get_qstr(attr_in);
   1921e:	6838      	ldr	r0, [r7, #0]
   19220:	f7fc f802 	bl	15228 <mp_obj_str_get_qstr>
   19224:	6178      	str	r0, [r7, #20]
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, false);
   19226:	f107 020c 	add.w	r2, r7, #12
   1922a:	2300      	movs	r3, #0
   1922c:	6979      	ldr	r1, [r7, #20]
   1922e:	6878      	ldr	r0, [r7, #4]
   19230:	f7f3 fa9a 	bl	c768 <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   19234:	68fb      	ldr	r3, [r7, #12]
   19236:	2b00      	cmp	r3, #0
   19238:	bf14      	ite	ne
   1923a:	2301      	movne	r3, #1
   1923c:	2300      	moveq	r3, #0
   1923e:	b2db      	uxtb	r3, r3
   19240:	4618      	mov	r0, r3
   19242:	f7ff fc3c 	bl	18abe <mp_obj_new_bool>
   19246:	4603      	mov	r3, r0
}
   19248:	4618      	mov	r0, r3
   1924a:	3718      	adds	r7, #24
   1924c:	46bd      	mov	sp, r7
   1924e:	bd80      	pop	{r7, pc}

00019250 <mp_builtin_globals>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
   19250:	b580      	push	{r7, lr}
   19252:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_globals_get());
   19254:	f7ff fc64 	bl	18b20 <mp_globals_get>
   19258:	4603      	mov	r3, r0
}
   1925a:	4618      	mov	r0, r3
   1925c:	bd80      	pop	{r7, pc}

0001925e <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
   1925e:	b580      	push	{r7, lr}
   19260:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_locals_get());
   19262:	f7ff fc41 	bl	18ae8 <mp_locals_get>
   19266:	4603      	mov	r3, r0
}
   19268:	4618      	mov	r0, r3
   1926a:	bd80      	pop	{r7, pc}

0001926c <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   1926c:	b580      	push	{r7, lr}
   1926e:	b082      	sub	sp, #8
   19270:	af00      	add	r7, sp, #0
   19272:	6078      	str	r0, [r7, #4]
   19274:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   19276:	687b      	ldr	r3, [r7, #4]
   19278:	2b00      	cmp	r3, #0
   1927a:	d106      	bne.n	1928a <mp_micropython_opt_level+0x1e>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   1927c:	4b0a      	ldr	r3, [pc, #40]	; (192a8 <mp_micropython_opt_level+0x3c>)
   1927e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   19282:	005b      	lsls	r3, r3, #1
   19284:	f043 0301 	orr.w	r3, r3, #1
   19288:	e00a      	b.n	192a0 <mp_micropython_opt_level+0x34>
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   1928a:	683b      	ldr	r3, [r7, #0]
   1928c:	681b      	ldr	r3, [r3, #0]
   1928e:	4618      	mov	r0, r3
   19290:	f7f4 fc06 	bl	daa0 <mp_obj_get_int>
   19294:	4603      	mov	r3, r0
   19296:	461a      	mov	r2, r3
   19298:	4b03      	ldr	r3, [pc, #12]	; (192a8 <mp_micropython_opt_level+0x3c>)
   1929a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        return mp_const_none;
   1929e:	4b03      	ldr	r3, [pc, #12]	; (192ac <mp_micropython_opt_level+0x40>)
    }
}
   192a0:	4618      	mov	r0, r3
   192a2:	3708      	adds	r7, #8
   192a4:	46bd      	mov	sp, r7
   192a6:	bd80      	pop	{r7, pc}
   192a8:	20001240 	.word	0x20001240
   192ac:	00022b54 	.word	0x00022b54

000192b0 <mp_micropython_heap_lock>:
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_pystack_use_obj, mp_micropython_pystack_use);
#endif

#if MICROPY_ENABLE_GC
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   192b0:	b580      	push	{r7, lr}
   192b2:	af00      	add	r7, sp, #0
    gc_lock();
   192b4:	f7e7 f96a 	bl	58c <gc_lock>
    return mp_const_none;
   192b8:	4b01      	ldr	r3, [pc, #4]	; (192c0 <mp_micropython_heap_lock+0x10>)
}
   192ba:	4618      	mov	r0, r3
   192bc:	bd80      	pop	{r7, pc}
   192be:	bf00      	nop
   192c0:	00022b54 	.word	0x00022b54

000192c4 <mp_micropython_heap_unlock>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_heap_lock_obj, mp_micropython_heap_lock);

STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   192c4:	b580      	push	{r7, lr}
   192c6:	af00      	add	r7, sp, #0
    gc_unlock();
   192c8:	f7e7 f96a 	bl	5a0 <gc_unlock>
    return mp_const_none;
   192cc:	4b01      	ldr	r3, [pc, #4]	; (192d4 <mp_micropython_heap_unlock+0x10>)
}
   192ce:	4618      	mov	r0, r3
   192d0:	bd80      	pop	{r7, pc}
   192d2:	bf00      	nop
   192d4:	00022b54 	.word	0x00022b54

000192d8 <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   192d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   192dc:	6803      	ldr	r3, [r0, #0]
                        DISPATCH();
                    } else {
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
                        // Pop exhausted gen
                        sp--;
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   192de:	f8df b3fc 	ldr.w	fp, [pc, #1020]	; 196dc <mp_execute_bytecode+0x404>
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   192e2:	b095      	sub	sp, #84	; 0x54
   192e4:	4680      	mov	r8, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   192e6:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   192e8:	9103      	str	r1, [sp, #12]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   192ea:	f000 ffa4 	bl	1a236 <mp_decode_uint_value>
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   192ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
   192f2:	1d02      	adds	r2, r0, #4
   192f4:	0092      	lsls	r2, r2, #2
   192f6:	f003 0101 	and.w	r1, r3, #1
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   192fa:	eb08 0702 	add.w	r7, r8, r2
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   192fe:	f023 0303 	bic.w	r3, r3, #3
        fastn = &code_state->state[n_state - 1];
   19302:	3801      	subs	r0, #1
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19304:	f88d 1017 	strb.w	r1, [sp, #23]
        fastn = &code_state->state[n_state - 1];
   19308:	9001      	str	r0, [sp, #4]
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   1930a:	3704      	adds	r7, #4
        fastn = &code_state->state[n_state - 1];
   1930c:	eb08 0a02 	add.w	sl, r8, r2
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   19310:	9306      	str	r3, [sp, #24]
        if (nlr_push(&nlr) == 0) {
   19312:	a808      	add	r0, sp, #32
   19314:	f7e6 ffd2 	bl	2bc <nlr_push>
   19318:	2800      	cmp	r0, #0
   1931a:	f040 8094 	bne.w	19446 <mp_execute_bytecode+0x16e>
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   1931e:	9b03      	ldr	r3, [sp, #12]
            const byte *ip = code_state->ip;
   19320:	f8d8 4004 	ldr.w	r4, [r8, #4]
            mp_obj_t *sp = code_state->sp;
   19324:	f8d8 5008 	ldr.w	r5, [r8, #8]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   19328:	2b00      	cmp	r3, #0
   1932a:	f000 80c0 	beq.w	194ae <mp_execute_bytecode+0x1d6>
   1932e:	7823      	ldrb	r3, [r4, #0]
   19330:	2b5e      	cmp	r3, #94	; 0x5e
   19332:	f000 80bc 	beq.w	194ae <mp_execute_bytecode+0x1d6>
                mp_obj_t exc = inject_exc;
   19336:	9b03      	ldr	r3, [sp, #12]
                inject_exc = MP_OBJ_NULL;
   19338:	9003      	str	r0, [sp, #12]
                exc = mp_make_raise_obj(exc);
   1933a:	4618      	mov	r0, r3
   1933c:	f7f3 fc20 	bl	cb80 <mp_make_raise_obj>
   19340:	4681      	mov	r9, r0
                RAISE(exc);
   19342:	f7e6 ffa9 	bl	298 <nlr_pop>
   19346:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1934a:	f8d9 0000 	ldr.w	r0, [r9]
   1934e:	4659      	mov	r1, fp
   19350:	f7fd fddc 	bl	16f0c <mp_obj_is_subclass_fast>
   19354:	b148      	cbz	r0, 1936a <mp_execute_bytecode+0x92>
                if (code_state->ip) {
   19356:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1935a:	b133      	cbz	r3, 1936a <mp_execute_bytecode+0x92>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   1935c:	781a      	ldrb	r2, [r3, #0]
   1935e:	2a43      	cmp	r2, #67	; 0x43
   19360:	f000 860a 	beq.w	19f78 <mp_execute_bytecode+0xca0>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   19364:	2a5e      	cmp	r2, #94	; 0x5e
   19366:	f000 866f 	beq.w	1a048 <mp_execute_bytecode+0xd70>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   1936a:	4bd9      	ldr	r3, [pc, #868]	; (196d0 <mp_execute_bytecode+0x3f8>)
   1936c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1936e:	429a      	cmp	r2, r3
   19370:	d049      	beq.n	19406 <mp_execute_bytecode+0x12e>
                const byte *ip = code_state->fun_bc->bytecode;
   19372:	f8d8 3000 	ldr.w	r3, [r8]
                ip = mp_decode_uint_skip(ip); // skip n_state
   19376:	6898      	ldr	r0, [r3, #8]
   19378:	f000 ff6a 	bl	1a250 <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   1937c:	f000 ff68 	bl	1a250 <mp_decode_uint_skip>
                ip++; // skip scope_params
                ip++; // skip n_pos_args
                ip++; // skip n_kwonly_args
                ip++; // skip n_def_pos_args
                size_t bc = code_state->ip - ip;
   19380:	f8d8 3004 	ldr.w	r3, [r8, #4]
                ip++; // skip n_def_pos_args
   19384:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   19386:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   19388:	1b5c      	subs	r4, r3, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   1938a:	f000 ff54 	bl	1a236 <mp_decode_uint_value>
   1938e:	4606      	mov	r6, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   19390:	4628      	mov	r0, r5
   19392:	f000 ff5d 	bl	1a250 <mp_decode_uint_skip>
                bc -= code_info_size;
   19396:	eba4 0e06 	sub.w	lr, r4, r6
                qstr source_file = mp_decode_uint_value(ip);
                ip = mp_decode_uint_skip(ip);
                #endif
                size_t source_line = 1;
                size_t c;
                while ((c = *ip)) {
   1939a:	7904      	ldrb	r4, [r0, #4]
                qstr block_name = ip[0] | (ip[1] << 8);
   1939c:	8803      	ldrh	r3, [r0, #0]
                qstr source_file = ip[2] | (ip[3] << 8);
   1939e:	8841      	ldrh	r1, [r0, #2]
                while ((c = *ip)) {
   193a0:	2201      	movs	r2, #1
                ip += 4;
   193a2:	3004      	adds	r0, #4
                while ((c = *ip)) {
   193a4:	b96c      	cbnz	r4, 193c2 <mp_execute_bytecode+0xea>
   193a6:	e01b      	b.n	193e0 <mp_execute_bytecode+0x108>
                    size_t b, l;
                    if ((c & 0x80) == 0) {
                        // 0b0LLBBBBB encoding
                        b = c & 0x1f;
   193a8:	f004 061f 	and.w	r6, r4, #31
                        // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                        b = c & 0xf;
                        l = ((c << 4) & 0x700) | ip[1];
                        ip += 2;
                    }
                    if (bc >= b) {
   193ac:	4576      	cmp	r6, lr
                        ip += 1;
   193ae:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   193b2:	ea4f 1554 	mov.w	r5, r4, lsr #5
                    if (bc >= b) {
   193b6:	d813      	bhi.n	193e0 <mp_execute_bytecode+0x108>
                while ((c = *ip)) {
   193b8:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   193ba:	ebae 0e06 	sub.w	lr, lr, r6
                        source_line += l;
   193be:	442a      	add	r2, r5
                while ((c = *ip)) {
   193c0:	b174      	cbz	r4, 193e0 <mp_execute_bytecode+0x108>
                    if ((c & 0x80) == 0) {
   193c2:	0625      	lsls	r5, r4, #24
   193c4:	d5f0      	bpl.n	193a8 <mp_execute_bytecode+0xd0>
                        l = ((c << 4) & 0x700) | ip[1];
   193c6:	f890 c001 	ldrb.w	ip, [r0, #1]
   193ca:	0125      	lsls	r5, r4, #4
                        b = c & 0xf;
   193cc:	f004 060f 	and.w	r6, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   193d0:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
                    if (bc >= b) {
   193d4:	4576      	cmp	r6, lr
                        l = ((c << 4) & 0x700) | ip[1];
   193d6:	ea45 050c 	orr.w	r5, r5, ip
                        ip += 2;
   193da:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   193de:	d9eb      	bls.n	193b8 <mp_execute_bytecode+0xe0>
                    } else {
                        // found source line corresponding to bytecode offset
                        break;
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   193e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   193e2:	f7f6 f929 	bl	f638 <mp_obj_exception_add_traceback>
            }

            while (currently_in_except_block) {
   193e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   193ea:	b183      	cbz	r3, 1940e <mp_execute_bytecode+0x136>
                // nested exception

                assert(exc_sp >= exc_stack);
   193ec:	9b06      	ldr	r3, [sp, #24]
   193ee:	429f      	cmp	r7, r3
   193f0:	f200 8688 	bhi.w	1a104 <mp_execute_bytecode+0xe2c>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   193f4:	9b06      	ldr	r3, [sp, #24]
   193f6:	685b      	ldr	r3, [r3, #4]
   193f8:	f003 0301 	and.w	r3, r3, #1
   193fc:	f88d 3017 	strb.w	r3, [sp, #23]
   19400:	9b06      	ldr	r3, [sp, #24]
   19402:	3b0c      	subs	r3, #12
   19404:	9306      	str	r3, [sp, #24]
            while (currently_in_except_block) {
   19406:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1940a:	2b00      	cmp	r3, #0
   1940c:	d1ee      	bne.n	193ec <mp_execute_bytecode+0x114>
            }

            if (exc_sp >= exc_stack) {
   1940e:	9b06      	ldr	r3, [sp, #24]
   19410:	429f      	cmp	r7, r3
   19412:	f200 8639 	bhi.w	1a088 <mp_execute_bytecode+0xdb0>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   19416:	2301      	movs	r3, #1
   19418:	f88d 3017 	strb.w	r3, [sp, #23]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   1941c:	9a06      	ldr	r2, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1941e:	9b06      	ldr	r3, [sp, #24]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   19420:	9906      	ldr	r1, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19422:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   19424:	6810      	ldr	r0, [r2, #0]
                exc_sp->prev_exc = nlr.ret_val;
   19426:	9a09      	ldr	r2, [sp, #36]	; 0x24
                code_state->ip = exc_sp->handler;
   19428:	f8c8 0004 	str.w	r0, [r8, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   1942c:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   19430:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19432:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   19436:	a808      	add	r0, sp, #32
                code_state->sp = sp;
   19438:	f8c8 3008 	str.w	r3, [r8, #8]
        if (nlr_push(&nlr) == 0) {
   1943c:	f7e6 ff3e 	bl	2bc <nlr_push>
   19440:	2800      	cmp	r0, #0
   19442:	f43f af6c 	beq.w	1931e <mp_execute_bytecode+0x46>
   19446:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1944a:	e77e      	b.n	1934a <mp_execute_bytecode+0x72>
                    if (inject_exc != MP_OBJ_NULL) {
   1944c:	f8dd 900c 	ldr.w	r9, [sp, #12]
                    mp_obj_t send_value = POP();
   19450:	6829      	ldr	r1, [r5, #0]
   19452:	1f2b      	subs	r3, r5, #4
   19454:	9302      	str	r3, [sp, #8]
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   19456:	f8c8 3008 	str.w	r3, [r8, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   1945a:	f1b9 0f00 	cmp.w	r9, #0
   1945e:	f000 85d9 	beq.w	1a014 <mp_execute_bytecode+0xd3c>
                        t_exc = inject_exc;
   19462:	f8dd 900c 	ldr.w	r9, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19466:	f855 0c04 	ldr.w	r0, [r5, #-4]
                        inject_exc = MP_OBJ_NULL;
   1946a:	f04f 0e00 	mov.w	lr, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   1946e:	464a      	mov	r2, r9
   19470:	4671      	mov	r1, lr
   19472:	ab07      	add	r3, sp, #28
                        inject_exc = MP_OBJ_NULL;
   19474:	f8cd e00c 	str.w	lr, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19478:	f7f3 fa9e 	bl	c9b8 <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   1947c:	2801      	cmp	r0, #1
   1947e:	f000 80e1 	beq.w	19644 <mp_execute_bytecode+0x36c>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   19482:	2800      	cmp	r0, #0
   19484:	f040 85a2 	bne.w	19fcc <mp_execute_bytecode+0xcf4>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   19488:	9b07      	ldr	r3, [sp, #28]
                            PUSH(mp_const_none);
   1948a:	4a92      	ldr	r2, [pc, #584]	; (196d4 <mp_execute_bytecode+0x3fc>)
   1948c:	2b04      	cmp	r3, #4
   1948e:	bf08      	it	eq
   19490:	4613      	moveq	r3, r2
   19492:	f845 3c04 	str.w	r3, [r5, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   19496:	f1b9 0f00 	cmp.w	r9, #0
   1949a:	d006      	beq.n	194aa <mp_execute_bytecode+0x1d2>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1949c:	498e      	ldr	r1, [pc, #568]	; (196d8 <mp_execute_bytecode+0x400>)
   1949e:	4648      	mov	r0, r9
   194a0:	f7f6 f884 	bl	f5ac <mp_obj_exception_match>
   194a4:	2800      	cmp	r0, #0
   194a6:	f040 84ed 	bne.w	19e84 <mp_execute_bytecode+0xbac>
                        DISPATCH();
   194aa:	9d02      	ldr	r5, [sp, #8]
                switch (*ip++) {
   194ac:	4634      	mov	r4, r6
                MARK_EXC_IP_GLOBAL();
   194ae:	f8c8 4004 	str.w	r4, [r8, #4]
                switch (*ip++) {
   194b2:	7820      	ldrb	r0, [r4, #0]
   194b4:	f1a0 0310 	sub.w	r3, r0, #16
   194b8:	1c66      	adds	r6, r4, #1
   194ba:	2b5a      	cmp	r3, #90	; 0x5a
   194bc:	f200 8512 	bhi.w	19ee4 <mp_execute_bytecode+0xc0c>
   194c0:	a201      	add	r2, pc, #4	; (adr r2, 194c8 <mp_execute_bytecode+0x1f0>)
   194c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   194c6:	bf00      	nop
   194c8:	0001999f 	.word	0x0001999f
   194cc:	000199a9 	.word	0x000199a9
   194d0:	000198f3 	.word	0x000198f3
   194d4:	00019ee5 	.word	0x00019ee5
   194d8:	000198cf 	.word	0x000198cf
   194dc:	00019ee5 	.word	0x00019ee5
   194e0:	000198bd 	.word	0x000198bd
   194e4:	00019899 	.word	0x00019899
   194e8:	0001988f 	.word	0x0001988f
   194ec:	0001994d 	.word	0x0001994d
   194f0:	00019921 	.word	0x00019921
   194f4:	0001990f 	.word	0x0001990f
   194f8:	000198fd 	.word	0x000198fd
   194fc:	0001998f 	.word	0x0001998f
   19500:	0001996b 	.word	0x0001996b
   19504:	0001997d 	.word	0x0001997d
   19508:	00019881 	.word	0x00019881
   1950c:	00019843 	.word	0x00019843
   19510:	00019821 	.word	0x00019821
   19514:	0001985b 	.word	0x0001985b
   19518:	000197d9 	.word	0x000197d9
   1951c:	000197fd 	.word	0x000197fd
   19520:	000197e9 	.word	0x000197e9
   19524:	0001980d 	.word	0x0001980d
   19528:	000197af 	.word	0x000197af
   1952c:	0001977d 	.word	0x0001977d
   19530:	00019771 	.word	0x00019771
   19534:	00019765 	.word	0x00019765
   19538:	00019ee5 	.word	0x00019ee5
   1953c:	00019ee5 	.word	0x00019ee5
   19540:	00019ee5 	.word	0x00019ee5
   19544:	00019ee5 	.word	0x00019ee5
   19548:	0001975b 	.word	0x0001975b
   1954c:	00019727 	.word	0x00019727
   19550:	0001963f 	.word	0x0001963f
   19554:	0001974b 	.word	0x0001974b
   19558:	00019737 	.word	0x00019737
   1955c:	00019e63 	.word	0x00019e63
   19560:	00019e4b 	.word	0x00019e4b
   19564:	00019ecb 	.word	0x00019ecb
   19568:	00019ce3 	.word	0x00019ce3
   1956c:	00019dcb 	.word	0x00019dcb
   19570:	00019ee5 	.word	0x00019ee5
   19574:	00019ee5 	.word	0x00019ee5
   19578:	00019ee5 	.word	0x00019ee5
   1957c:	00019d69 	.word	0x00019d69
   19580:	00019ddf 	.word	0x00019ddf
   19584:	00019b89 	.word	0x00019b89
   19588:	00019b89 	.word	0x00019b89
   1958c:	00019635 	.word	0x00019635
   19590:	00019e91 	.word	0x00019e91
   19594:	00019ea1 	.word	0x00019ea1
   19598:	00019c65 	.word	0x00019c65
   1959c:	00019d4b 	.word	0x00019d4b
   195a0:	00019cfb 	.word	0x00019cfb
   195a4:	000199db 	.word	0x000199db
   195a8:	00019ee5 	.word	0x00019ee5
   195ac:	00019ee5 	.word	0x00019ee5
   195b0:	00019ee5 	.word	0x00019ee5
   195b4:	00019ee5 	.word	0x00019ee5
   195b8:	00019ee5 	.word	0x00019ee5
   195bc:	00019ee5 	.word	0x00019ee5
   195c0:	00019ee5 	.word	0x00019ee5
   195c4:	00019ee5 	.word	0x00019ee5
   195c8:	000199b3 	.word	0x000199b3
   195cc:	00019b2d 	.word	0x00019b2d
   195d0:	00019ee5 	.word	0x00019ee5
   195d4:	00019af5 	.word	0x00019af5
   195d8:	00019b15 	.word	0x00019b15
   195dc:	00019ee5 	.word	0x00019ee5
   195e0:	00019ee5 	.word	0x00019ee5
   195e4:	00019ac7 	.word	0x00019ac7
   195e8:	00019ee5 	.word	0x00019ee5
   195ec:	00019a9d 	.word	0x00019a9d
   195f0:	00019a71 	.word	0x00019a71
   195f4:	00019a2d 	.word	0x00019a2d
   195f8:	000199f9 	.word	0x000199f9
   195fc:	0001964b 	.word	0x0001964b
   19600:	0001944d 	.word	0x0001944d
   19604:	00019ee5 	.word	0x00019ee5
   19608:	00019bfd 	.word	0x00019bfd
   1960c:	00019bbf 	.word	0x00019bbf
   19610:	00019cb7 	.word	0x00019cb7
   19614:	00019c2b 	.word	0x00019c2b
   19618:	00019c83 	.word	0x00019c83
   1961c:	00019b55 	.word	0x00019b55
   19620:	000196e1 	.word	0x000196e1
   19624:	0001969b 	.word	0x0001969b
   19628:	00019681 	.word	0x00019681
   1962c:	0001966b 	.word	0x0001966b
   19630:	00019717 	.word	0x00019717
                    if (TOP() == mp_const_none) {
   19634:	682a      	ldr	r2, [r5, #0]
   19636:	4b27      	ldr	r3, [pc, #156]	; (196d4 <mp_execute_bytecode+0x3fc>)
   19638:	429a      	cmp	r2, r3
   1963a:	f040 845f 	bne.w	19efc <mp_execute_bytecode+0xc24>
                        sp--;
   1963e:	3d04      	subs	r5, #4
                switch (*ip++) {
   19640:	4634      	mov	r4, r6
                    DISPATCH();
   19642:	e734      	b.n	194ae <mp_execute_bytecode+0x1d6>
                        PUSH(ret_value);
   19644:	9b07      	ldr	r3, [sp, #28]
   19646:	602b      	str	r3, [r5, #0]
                        goto yield;
   19648:	4626      	mov	r6, r4
                    nlr_pop();
   1964a:	f7e6 fe25 	bl	298 <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   1964e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   19652:	9b06      	ldr	r3, [sp, #24]
                    code_state->ip = ip;
   19654:	f8c8 6004 	str.w	r6, [r8, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19658:	4313      	orrs	r3, r2
                    code_state->sp = sp;
   1965a:	f8c8 5008 	str.w	r5, [r8, #8]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   1965e:	f8c8 300c 	str.w	r3, [r8, #12]
                    return MP_VM_RETURN_YIELD;
   19662:	2001      	movs	r0, #1
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   19664:	b015      	add	sp, #84	; 0x54
   19666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   1966a:	462e      	mov	r6, r5
                    DECODE_QSTR;
   1966c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   19670:	f856 0b04 	ldr.w	r0, [r6], #4
   19674:	f7f3 facc 	bl	cc10 <mp_import_from>
                    DECODE_QSTR;
   19678:	3403      	adds	r4, #3
                    PUSH(obj);
   1967a:	6068      	str	r0, [r5, #4]
   1967c:	4635      	mov	r5, r6
                    DISPATCH();
   1967e:	e716      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19680:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   19684:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19688:	6829      	ldr	r1, [r5, #0]
   1968a:	f7f3 faa1 	bl	cbd0 <mp_import_name>
                    mp_obj_t obj = POP();
   1968e:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   19690:	f845 0c04 	str.w	r0, [r5, #-4]
                    DECODE_QSTR;
   19694:	3403      	adds	r4, #3
                    mp_obj_t obj = POP();
   19696:	461d      	mov	r5, r3
                    DISPATCH();
   19698:	e709      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   1969a:	4634      	mov	r4, r6
   1969c:	2100      	movs	r1, #0
                    DECODE_UINT;
   1969e:	f814 3b01 	ldrb.w	r3, [r4], #1
   196a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   196a6:	061b      	lsls	r3, r3, #24
   196a8:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   196ac:	d4f7      	bmi.n	1969e <mp_execute_bytecode+0x3c6>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   196ae:	09cb      	lsrs	r3, r1, #7
   196b0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   196b4:	fa53 f381 	uxtab	r3, r3, r1
   196b8:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   196bc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   196c0:	3d0c      	subs	r5, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   196c2:	462a      	mov	r2, r5
   196c4:	2001      	movs	r0, #1
   196c6:	f7f2 fdab 	bl	c220 <mp_call_method_n_kw_var>
   196ca:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   196cc:	e6ef      	b.n	194ae <mp_execute_bytecode+0x1d6>
   196ce:	bf00      	nop
   196d0:	000218a0 	.word	0x000218a0
   196d4:	00022b54 	.word	0x00022b54
   196d8:	0002196c 	.word	0x0002196c
   196dc:	000219e4 	.word	0x000219e4
                switch (*ip++) {
   196e0:	4634      	mov	r4, r6
   196e2:	2100      	movs	r1, #0
                    DECODE_UINT;
   196e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   196e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   196ec:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   196f0:	061a      	lsls	r2, r3, #24
   196f2:	d4f7      	bmi.n	196e4 <mp_execute_bytecode+0x40c>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   196f4:	b2c8      	uxtb	r0, r1
   196f6:	09cb      	lsrs	r3, r1, #7
   196f8:	1c42      	adds	r2, r0, #1
   196fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   196fe:	4413      	add	r3, r2
   19700:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   19704:	eb05 0583 	add.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   19708:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1970c:	462a      	mov	r2, r5
   1970e:	f7f2 fb35 	bl	bd7c <mp_call_method_n_kw>
   19712:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19714:	e6cb      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    mp_import_all(POP());
   19716:	6828      	ldr	r0, [r5, #0]
   19718:	f1a5 0904 	sub.w	r9, r5, #4
                switch (*ip++) {
   1971c:	4634      	mov	r4, r6
                    mp_import_all(POP());
   1971e:	f7f3 fb07 	bl	cd30 <mp_import_all>
   19722:	464d      	mov	r5, r9
                    DISPATCH();
   19724:	e6c3      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    sp[0] = sp[-2];
   19726:	682a      	ldr	r2, [r5, #0]
                    sp[-1] = sp[-3];
   19728:	f855 3c04 	ldr.w	r3, [r5, #-4]
                    sp[0] = sp[-2];
   1972c:	60aa      	str	r2, [r5, #8]
                    sp[-1] = sp[-3];
   1972e:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19730:	4634      	mov	r4, r6
                    sp += 2;
   19732:	3508      	adds	r5, #8
                    DISPATCH();
   19734:	e6bb      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    sp[0] = sp[-1];
   19736:	e915 000c 	ldmdb	r5, {r2, r3}
                    mp_obj_t top = sp[0];
   1973a:	6829      	ldr	r1, [r5, #0]
                    sp[-2] = top;
   1973c:	f845 1c08 	str.w	r1, [r5, #-8]
                switch (*ip++) {
   19740:	4634      	mov	r4, r6
                    sp[-1] = sp[-2];
   19742:	f845 2c04 	str.w	r2, [r5, #-4]
                    sp[0] = sp[-1];
   19746:	602b      	str	r3, [r5, #0]
                    DISPATCH();
   19748:	e6b1      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    mp_obj_t top = sp[0];
   1974a:	682b      	ldr	r3, [r5, #0]
                    sp[0] = sp[-1];
   1974c:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19750:	602a      	str	r2, [r5, #0]
                switch (*ip++) {
   19752:	4634      	mov	r4, r6
                    sp[-1] = top;
   19754:	f845 3c04 	str.w	r3, [r5, #-4]
                    DISPATCH();
   19758:	e6a9      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    PUSH(top);
   1975a:	682b      	ldr	r3, [r5, #0]
   1975c:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1975e:	4634      	mov	r4, r6
                    PUSH(top);
   19760:	3504      	adds	r5, #4
                    DISPATCH();
   19762:	e6a4      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19764:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   19768:	3403      	adds	r4, #3
                    mp_delete_global(qst);
   1976a:	f7f1 ff56 	bl	b61a <mp_delete_global>
                    DISPATCH();
   1976e:	e69e      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   19770:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   19774:	3403      	adds	r4, #3
                    mp_delete_name(qst);
   19776:	f7f1 ff2a 	bl	b5ce <mp_delete_name>
                    DISPATCH();
   1977a:	e698      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   1977c:	2200      	movs	r2, #0
                    DECODE_UINT;
   1977e:	f816 3b01 	ldrb.w	r3, [r6], #1
   19782:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19786:	061c      	lsls	r4, r3, #24
   19788:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1978c:	d4f7      	bmi.n	1977e <mp_execute_bytecode+0x4a6>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   1978e:	ebc2 7482 	rsb	r4, r2, r2, lsl #30
   19792:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   19796:	f7f4 fce5 	bl	e164 <mp_obj_cell_get>
   1979a:	2800      	cmp	r0, #0
   1979c:	f000 848c 	beq.w	1a0b8 <mp_execute_bytecode+0xde0>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   197a0:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   197a4:	2100      	movs	r1, #0
                    DECODE_UINT;
   197a6:	4634      	mov	r4, r6
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   197a8:	f7f4 fcea 	bl	e180 <mp_obj_cell_set>
                    DISPATCH();
   197ac:	e67f      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   197ae:	2200      	movs	r2, #0
                    DECODE_UINT;
   197b0:	f816 3b01 	ldrb.w	r3, [r6], #1
   197b4:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   197b8:	061b      	lsls	r3, r3, #24
   197ba:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   197be:	d4f7      	bmi.n	197b0 <mp_execute_bytecode+0x4d8>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   197c0:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   197c4:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   197c8:	2b00      	cmp	r3, #0
   197ca:	f000 8475 	beq.w	1a0b8 <mp_execute_bytecode+0xde0>
                    fastn[-unum] = MP_OBJ_NULL;
   197ce:	2300      	movs	r3, #0
                    DECODE_UINT;
   197d0:	4634      	mov	r4, r6
                    fastn[-unum] = MP_OBJ_NULL;
   197d2:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
                    DISPATCH();
   197d6:	e66a      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   197d8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_store_name(qst, POP());
   197dc:	6829      	ldr	r1, [r5, #0]
                    DECODE_QSTR;
   197de:	3403      	adds	r4, #3
                    mp_store_name(qst, POP());
   197e0:	3d04      	subs	r5, #4
   197e2:	f7f1 fee1 	bl	b5a8 <mp_store_name>
                    DISPATCH();
   197e6:	e662      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   197e8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_store_attr(sp[0], qst, sp[-1]);
   197ec:	f855 2c04 	ldr.w	r2, [r5, #-4]
   197f0:	f855 0908 	ldr.w	r0, [r5], #-8
                    DECODE_QSTR;
   197f4:	3403      	adds	r4, #3
                    mp_store_attr(sp[0], qst, sp[-1]);
   197f6:	f7f2 ffeb 	bl	c7d0 <mp_store_attr>
                    DISPATCH();
   197fa:	e658      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   197fc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_store_global(qst, POP());
   19800:	6829      	ldr	r1, [r5, #0]
                    DECODE_QSTR;
   19802:	3403      	adds	r4, #3
                    mp_store_global(qst, POP());
   19804:	3d04      	subs	r5, #4
   19806:	f7f1 fef5 	bl	b5f4 <mp_store_global>
                    DISPATCH();
   1980a:	e650      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   1980c:	f855 2c08 	ldr.w	r2, [r5, #-8]
   19810:	6829      	ldr	r1, [r5, #0]
   19812:	f855 0c04 	ldr.w	r0, [r5, #-4]
                switch (*ip++) {
   19816:	4634      	mov	r4, r6
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   19818:	f7f4 fb06 	bl	de28 <mp_obj_subscr>
                    sp -= 3;
   1981c:	3d0c      	subs	r5, #12
                    DISPATCH();
   1981e:	e646      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19820:	4634      	mov	r4, r6
   19822:	2200      	movs	r2, #0
                    DECODE_UINT;
   19824:	f814 3b01 	ldrb.w	r3, [r4], #1
   19828:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1982c:	0618      	lsls	r0, r3, #24
   1982e:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19832:	d4f7      	bmi.n	19824 <mp_execute_bytecode+0x54c>
                    fastn[-unum] = POP();
   19834:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19838:	682b      	ldr	r3, [r5, #0]
   1983a:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
   1983e:	3d04      	subs	r5, #4
                    DISPATCH();
   19840:	e635      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19842:	6829      	ldr	r1, [r5, #0]
   19844:	f855 0c04 	ldr.w	r0, [r5, #-4]
   19848:	2208      	movs	r2, #8
   1984a:	f7f4 faed 	bl	de28 <mp_obj_subscr>
                    mp_obj_t index = POP();
   1984e:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19850:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   19854:	4634      	mov	r4, r6
                    mp_obj_t index = POP();
   19856:	461d      	mov	r5, r3
                    DISPATCH();
   19858:	e629      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   1985a:	4634      	mov	r4, r6
   1985c:	2200      	movs	r2, #0
                    DECODE_UINT;
   1985e:	f814 3b01 	ldrb.w	r3, [r4], #1
   19862:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19866:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1986a:	0619      	lsls	r1, r3, #24
   1986c:	d4f7      	bmi.n	1985e <mp_execute_bytecode+0x586>
                    mp_obj_cell_set(fastn[-unum], POP());
   1986e:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19872:	6829      	ldr	r1, [r5, #0]
   19874:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19878:	3d04      	subs	r5, #4
   1987a:	f7f4 fc81 	bl	e180 <mp_obj_cell_set>
                    DISPATCH();
   1987e:	e616      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    PUSH(mp_load_build_class());
   19880:	f7f1 fe88 	bl	b594 <mp_load_build_class>
   19884:	1d2b      	adds	r3, r5, #4
   19886:	6068      	str	r0, [r5, #4]
                switch (*ip++) {
   19888:	4634      	mov	r4, r6
                    PUSH(mp_load_build_class());
   1988a:	461d      	mov	r5, r3
                    DISPATCH();
   1988c:	e60f      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    PUSH(MP_OBJ_NULL);
   1988e:	2300      	movs	r3, #0
   19890:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19892:	4634      	mov	r4, r6
                    PUSH(MP_OBJ_NULL);
   19894:	3504      	adds	r5, #4
                    DISPATCH();
   19896:	e60a      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19898:	4634      	mov	r4, r6
   1989a:	2200      	movs	r2, #0
                    DECODE_OBJ;
   1989c:	f814 3b01 	ldrb.w	r3, [r4], #1
   198a0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   198a4:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   198a8:	0619      	lsls	r1, r3, #24
   198aa:	d4f7      	bmi.n	1989c <mp_execute_bytecode+0x5c4>
   198ac:	f8d8 3000 	ldr.w	r3, [r8]
   198b0:	68db      	ldr	r3, [r3, #12]
                    PUSH(obj);
   198b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   198b6:	606b      	str	r3, [r5, #4]
   198b8:	3504      	adds	r5, #4
                    DISPATCH();
   198ba:	e5f8      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   198bc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   198c0:	009b      	lsls	r3, r3, #2
   198c2:	f043 0302 	orr.w	r3, r3, #2
   198c6:	606b      	str	r3, [r5, #4]
                    DECODE_QSTR;
   198c8:	3403      	adds	r4, #3
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   198ca:	3504      	adds	r5, #4
                    DISPATCH();
   198cc:	e5ef      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    if ((ip[0] & 0x40) != 0) {
   198ce:	7862      	ldrb	r2, [r4, #1]
                switch (*ip++) {
   198d0:	4634      	mov	r4, r6
                    if ((ip[0] & 0x40) != 0) {
   198d2:	f342 1280 	sbfx	r2, r2, #6, #1
                        num = (num << 7) | (*ip & 0x7f);
   198d6:	f814 3b01 	ldrb.w	r3, [r4], #1
   198da:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   198de:	0618      	lsls	r0, r3, #24
                        num = (num << 7) | (*ip & 0x7f);
   198e0:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   198e4:	d4f7      	bmi.n	198d6 <mp_execute_bytecode+0x5fe>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   198e6:	0053      	lsls	r3, r2, #1
   198e8:	f043 0301 	orr.w	r3, r3, #1
   198ec:	606b      	str	r3, [r5, #4]
   198ee:	3504      	adds	r5, #4
                    DISPATCH();
   198f0:	e5dd      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    PUSH(mp_const_true);
   198f2:	4bbf      	ldr	r3, [pc, #764]	; (19bf0 <mp_execute_bytecode+0x918>)
   198f4:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   198f6:	4634      	mov	r4, r6
                    PUSH(mp_const_true);
   198f8:	3504      	adds	r5, #4
                    DISPATCH();
   198fa:	e5d8      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   198fc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    PUSH(mp_load_global(qst));
   19900:	f7f1 fe16 	bl	b530 <mp_load_global>
   19904:	1d2b      	adds	r3, r5, #4
   19906:	6068      	str	r0, [r5, #4]
                    DECODE_QSTR;
   19908:	3403      	adds	r4, #3
                    PUSH(mp_load_global(qst));
   1990a:	461d      	mov	r5, r3
                    DISPATCH();
   1990c:	e5cf      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   1990e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    PUSH(mp_load_name(qst));
   19912:	f7f1 fde6 	bl	b4e2 <mp_load_name>
   19916:	1d2b      	adds	r3, r5, #4
   19918:	6068      	str	r0, [r5, #4]
                    DECODE_QSTR;
   1991a:	3403      	adds	r4, #3
                    PUSH(mp_load_name(qst));
   1991c:	461d      	mov	r5, r3
                    DISPATCH();
   1991e:	e5c6      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19920:	4634      	mov	r4, r6
   19922:	2200      	movs	r2, #0
                    DECODE_UINT;
   19924:	f814 3b01 	ldrb.w	r3, [r4], #1
   19928:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1992c:	061e      	lsls	r6, r3, #24
   1992e:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19932:	d4f7      	bmi.n	19924 <mp_execute_bytecode+0x64c>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   19934:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19938:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   1993c:	f7f4 fc12 	bl	e164 <mp_obj_cell_get>
                    if (obj_shared == MP_OBJ_NULL) {
   19940:	2800      	cmp	r0, #0
   19942:	f000 83b9 	beq.w	1a0b8 <mp_execute_bytecode+0xde0>
                        PUSH(value); // push the next iteration value
   19946:	6068      	str	r0, [r5, #4]
   19948:	3504      	adds	r5, #4
   1994a:	e5b0      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   1994c:	4634      	mov	r4, r6
   1994e:	2200      	movs	r2, #0
                    DECODE_UINT;
   19950:	f814 3b01 	ldrb.w	r3, [r4], #1
   19954:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19958:	061b      	lsls	r3, r3, #24
   1995a:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1995e:	d4f7      	bmi.n	19950 <mp_execute_bytecode+0x678>
                    obj_shared = fastn[-unum];
   19960:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19964:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19968:	e7ea      	b.n	19940 <mp_execute_bytecode+0x668>
                    DECODE_QSTR;
   1996a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_load_method(*sp, qst, sp);
   1996e:	6828      	ldr	r0, [r5, #0]
   19970:	462a      	mov	r2, r5
                    DECODE_QSTR;
   19972:	3403      	adds	r4, #3
                    mp_load_method(*sp, qst, sp);
   19974:	f7f2 fedc 	bl	c730 <mp_load_method>
                    sp += 1;
   19978:	3504      	adds	r5, #4
                    DISPATCH();
   1997a:	e598      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   1997c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_load_super_method(qst, sp - 1);
   19980:	f1a5 0108 	sub.w	r1, r5, #8
                    DECODE_QSTR;
   19984:	3403      	adds	r4, #3
                    sp -= 1;
   19986:	3d04      	subs	r5, #4
                    mp_load_super_method(qst, sp - 1);
   19988:	f7fd faa6 	bl	16ed8 <mp_load_super_method>
                    DISPATCH();
   1998c:	e58f      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    DECODE_QSTR;
   1998e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    SET_TOP(mp_load_attr(TOP(), qst));
   19992:	6828      	ldr	r0, [r5, #0]
   19994:	f7f2 fdda 	bl	c54c <mp_load_attr>
                    DECODE_QSTR;
   19998:	3403      	adds	r4, #3
                    SET_TOP(mp_load_attr(TOP(), qst));
   1999a:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1999c:	e587      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    PUSH(mp_const_false);
   1999e:	4b95      	ldr	r3, [pc, #596]	; (19bf4 <mp_execute_bytecode+0x91c>)
   199a0:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   199a2:	4634      	mov	r4, r6
                    PUSH(mp_const_false);
   199a4:	3504      	adds	r5, #4
                    DISPATCH();
   199a6:	e582      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    PUSH(mp_const_none);
   199a8:	4b93      	ldr	r3, [pc, #588]	; (19bf8 <mp_execute_bytecode+0x920>)
   199aa:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   199ac:	4634      	mov	r4, r6
                    PUSH(mp_const_none);
   199ae:	3504      	adds	r5, #4
                    DISPATCH();
   199b0:	e57d      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   199b2:	4634      	mov	r4, r6
   199b4:	2000      	movs	r0, #0
                    DECODE_UINT;
   199b6:	f814 3b01 	ldrb.w	r3, [r4], #1
   199ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   199be:	061e      	lsls	r6, r3, #24
   199c0:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   199c4:	d4f7      	bmi.n	199b6 <mp_execute_bytecode+0x6de>
                    sp -= unum - 1;
   199c6:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   199ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   199ce:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   199d0:	4629      	mov	r1, r5
   199d2:	f7fc f82b 	bl	15a2c <mp_obj_new_tuple>
   199d6:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   199d8:	e569      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    mp_obj_t obj = TOP();
   199da:	46a9      	mov	r9, r5
                    obj = mp_getiter(obj, iter_buf);
   199dc:	4629      	mov	r1, r5
   199de:	f859 0b0c 	ldr.w	r0, [r9], #12
   199e2:	f7f2 ff1d 	bl	c820 <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   199e6:	4285      	cmp	r5, r0
   199e8:	f000 831f 	beq.w	1a02a <mp_execute_bytecode+0xd52>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   199ec:	2300      	movs	r3, #0
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   199ee:	6068      	str	r0, [r5, #4]
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   199f0:	602b      	str	r3, [r5, #0]
                switch (*ip++) {
   199f2:	4634      	mov	r4, r6
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   199f4:	464d      	mov	r5, r9
   199f6:	e55a      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    mp_uint_t unum = *ip;
   199f8:	7863      	ldrb	r3, [r4, #1]
                    if (unum == 2) {
   199fa:	2b02      	cmp	r3, #2
   199fc:	f000 82db 	beq.w	19fb6 <mp_execute_bytecode+0xcde>
                    if (unum == 0) {
   19a00:	2b00      	cmp	r3, #0
   19a02:	f040 82d9 	bne.w	19fb8 <mp_execute_bytecode+0xce0>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19a06:	9b06      	ldr	r3, [sp, #24]
   19a08:	429f      	cmp	r7, r3
   19a0a:	d904      	bls.n	19a16 <mp_execute_bytecode+0x73e>
   19a0c:	e311      	b.n	1a032 <mp_execute_bytecode+0xd5a>
   19a0e:	3b0c      	subs	r3, #12
   19a10:	429f      	cmp	r7, r3
   19a12:	f200 830e 	bhi.w	1a032 <mp_execute_bytecode+0xd5a>
                            if (e->prev_exc != NULL) {
   19a16:	6898      	ldr	r0, [r3, #8]
   19a18:	2800      	cmp	r0, #0
   19a1a:	d0f8      	beq.n	19a0e <mp_execute_bytecode+0x736>
                    obj = mp_make_raise_obj(obj);
   19a1c:	f7f3 f8b0 	bl	cb80 <mp_make_raise_obj>
   19a20:	4681      	mov	r9, r0
                    RAISE(obj);
   19a22:	f7e6 fc39 	bl	298 <nlr_pop>
   19a26:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   19a2a:	e48e      	b.n	1934a <mp_execute_bytecode+0x72>
                    if (currently_in_except_block) {
   19a2c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19a30:	b173      	cbz	r3, 19a50 <mp_execute_bytecode+0x778>
                        POP_EXC_BLOCK();
   19a32:	9b06      	ldr	r3, [sp, #24]
   19a34:	685b      	ldr	r3, [r3, #4]
   19a36:	f003 0301 	and.w	r3, r3, #1
   19a3a:	f88d 3017 	strb.w	r3, [sp, #23]
   19a3e:	e004      	b.n	19a4a <mp_execute_bytecode+0x772>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19a40:	9b06      	ldr	r3, [sp, #24]
   19a42:	685b      	ldr	r3, [r3, #4]
   19a44:	079e      	lsls	r6, r3, #30
   19a46:	f100 82a4 	bmi.w	19f92 <mp_execute_bytecode+0xcba>
                        POP_EXC_BLOCK();
   19a4a:	9b06      	ldr	r3, [sp, #24]
   19a4c:	3b0c      	subs	r3, #12
   19a4e:	9306      	str	r3, [sp, #24]
                    while (exc_sp >= exc_stack) {
   19a50:	9b06      	ldr	r3, [sp, #24]
   19a52:	429f      	cmp	r7, r3
   19a54:	d9f4      	bls.n	19a40 <mp_execute_bytecode+0x768>
                    nlr_pop();
   19a56:	f7e6 fc1f 	bl	298 <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   19a5a:	9b06      	ldr	r3, [sp, #24]
                    code_state->sp = sp;
   19a5c:	f8c8 5008 	str.w	r5, [r8, #8]
                    assert(exc_sp == exc_stack - 1);
   19a60:	3f0c      	subs	r7, #12
   19a62:	42bb      	cmp	r3, r7
   19a64:	f040 83a9 	bne.w	1a1ba <mp_execute_bytecode+0xee2>
                    return MP_VM_RETURN_NORMAL;
   19a68:	2000      	movs	r0, #0
}
   19a6a:	b015      	add	sp, #84	; 0x54
   19a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                switch (*ip++) {
   19a70:	4634      	mov	r4, r6
   19a72:	2600      	movs	r6, #0
                    DECODE_UINT;
   19a74:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19a7c:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   19a80:	061a      	lsls	r2, r3, #24
   19a82:	d4f7      	bmi.n	19a74 <mp_execute_bytecode+0x79c>
                    mp_unpack_ex(sp[0], unum, sp);
   19a84:	462a      	mov	r2, r5
   19a86:	4631      	mov	r1, r6
   19a88:	6828      	ldr	r0, [r5, #0]
   19a8a:	f7f2 fc6f 	bl	c36c <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   19a8e:	f3c6 2307 	ubfx	r3, r6, #8, #8
   19a92:	fa53 f686 	uxtab	r6, r3, r6
   19a96:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   19a9a:	e508      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19a9c:	4634      	mov	r4, r6
   19a9e:	2600      	movs	r6, #0
                    DECODE_UINT;
   19aa0:	f814 3b01 	ldrb.w	r3, [r4], #1
   19aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19aa8:	0619      	lsls	r1, r3, #24
   19aaa:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   19aae:	d4f7      	bmi.n	19aa0 <mp_execute_bytecode+0x7c8>
                    mp_unpack_sequence(sp[0], unum, sp);
   19ab0:	4631      	mov	r1, r6
                    sp += unum - 1;
   19ab2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
                    mp_unpack_sequence(sp[0], unum, sp);
   19ab6:	462a      	mov	r2, r5
   19ab8:	6828      	ldr	r0, [r5, #0]
                    sp += unum - 1;
   19aba:	3e01      	subs	r6, #1
                    mp_unpack_sequence(sp[0], unum, sp);
   19abc:	f7f2 fbd1 	bl	c262 <mp_unpack_sequence>
                    sp += unum - 1;
   19ac0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   19ac4:	e4f3      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19ac6:	4634      	mov	r4, r6
   19ac8:	2200      	movs	r2, #0
                    DECODE_UINT;
   19aca:	f814 3b01 	ldrb.w	r3, [r4], #1
   19ace:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19ad2:	061b      	lsls	r3, r3, #24
   19ad4:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19ad8:	d4f7      	bmi.n	19aca <mp_execute_bytecode+0x7f2>
                    mp_obj_t obj = sp[-(unum >> 2)];
   19ada:	0893      	lsrs	r3, r2, #2
   19adc:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   19ae0:	0796      	lsls	r6, r2, #30
                    mp_obj_t obj = sp[-(unum >> 2)];
   19ae2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
                    if ((unum & 3) == 0) {
   19ae6:	f040 821f 	bne.w	19f28 <mp_execute_bytecode+0xc50>
                        mp_obj_list_append(obj, sp[0]);
   19aea:	f855 1904 	ldr.w	r1, [r5], #-4
   19aee:	f7f7 f908 	bl	10d02 <mp_obj_list_append>
   19af2:	e4dc      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19af4:	4634      	mov	r4, r6
   19af6:	2000      	movs	r0, #0
                    DECODE_UINT;
   19af8:	f814 3b01 	ldrb.w	r3, [r4], #1
   19afc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19b00:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19b04:	061a      	lsls	r2, r3, #24
   19b06:	d4f7      	bmi.n	19af8 <mp_execute_bytecode+0x820>
                    PUSH(mp_obj_new_dict(unum));
   19b08:	f7f5 fa52 	bl	efb0 <mp_obj_new_dict>
   19b0c:	1d2b      	adds	r3, r5, #4
   19b0e:	6068      	str	r0, [r5, #4]
   19b10:	461d      	mov	r5, r3
                    DISPATCH();
   19b12:	e4cc      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    sp -= 2;
   19b14:	f1a5 0308 	sub.w	r3, r5, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   19b18:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19b1c:	6829      	ldr	r1, [r5, #0]
   19b1e:	f855 0c08 	ldr.w	r0, [r5, #-8]
                switch (*ip++) {
   19b22:	4634      	mov	r4, r6
                    sp -= 2;
   19b24:	461d      	mov	r5, r3
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   19b26:	f7f5 fa64 	bl	eff2 <mp_obj_dict_store>
                    DISPATCH();
   19b2a:	e4c0      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19b2c:	4634      	mov	r4, r6
   19b2e:	2000      	movs	r0, #0
                    DECODE_UINT;
   19b30:	f814 3b01 	ldrb.w	r3, [r4], #1
   19b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19b38:	0619      	lsls	r1, r3, #24
   19b3a:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19b3e:	d4f7      	bmi.n	19b30 <mp_execute_bytecode+0x858>
                    sp -= unum - 1;
   19b40:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   19b44:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19b48:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_list(unum, sp));
   19b4a:	4629      	mov	r1, r5
   19b4c:	f7f7 fd45 	bl	115da <mp_obj_new_list>
   19b50:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19b52:	e4ac      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19b54:	4634      	mov	r4, r6
   19b56:	2100      	movs	r1, #0
                    DECODE_UINT;
   19b58:	f814 3b01 	ldrb.w	r3, [r4], #1
   19b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19b60:	0618      	lsls	r0, r3, #24
   19b62:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19b66:	d4f7      	bmi.n	19b58 <mp_execute_bytecode+0x880>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   19b68:	09cb      	lsrs	r3, r1, #7
   19b6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19b6e:	fa53 f381 	uxtab	r3, r3, r1
   19b72:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   19b76:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19b7a:	3d08      	subs	r5, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   19b7c:	462a      	mov	r2, r5
   19b7e:	2000      	movs	r0, #0
   19b80:	f7f2 fb4e 	bl	c220 <mp_call_method_n_kw_var>
   19b84:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19b86:	e492      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   19b88:	9a06      	ldr	r2, [sp, #24]
   19b8a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   19b8e:	320c      	adds	r2, #12
   19b90:	9206      	str	r2, [sp, #24]
   19b92:	9a06      	ldr	r2, [sp, #24]
   19b94:	9806      	ldr	r0, [sp, #24]
   19b96:	1ce1      	adds	r1, r4, #3
   19b98:	440b      	add	r3, r1
   19b9a:	6013      	str	r3, [r2, #0]
   19b9c:	7822      	ldrb	r2, [r4, #0]
   19b9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19ba2:	9e06      	ldr	r6, [sp, #24]
   19ba4:	2a40      	cmp	r2, #64	; 0x40
   19ba6:	bf14      	ite	ne
   19ba8:	2200      	movne	r2, #0
   19baa:	2202      	moveq	r2, #2
   19bac:	4313      	orrs	r3, r2
   19bae:	432b      	orrs	r3, r5
   19bb0:	2200      	movs	r2, #0
   19bb2:	6043      	str	r3, [r0, #4]
   19bb4:	460c      	mov	r4, r1
   19bb6:	f88d 2017 	strb.w	r2, [sp, #23]
   19bba:	60b2      	str	r2, [r6, #8]
                    DISPATCH();
   19bbc:	e477      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19bbe:	4634      	mov	r4, r6
   19bc0:	2000      	movs	r0, #0
                    DECODE_PTR;
   19bc2:	f814 3b01 	ldrb.w	r3, [r4], #1
   19bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19bca:	061e      	lsls	r6, r3, #24
   19bcc:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19bd0:	d4f7      	bmi.n	19bc2 <mp_execute_bytecode+0x8ea>
   19bd2:	f8d8 3000 	ldr.w	r3, [r8]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19bd6:	682a      	ldr	r2, [r5, #0]
                    DECODE_PTR;
   19bd8:	68db      	ldr	r3, [r3, #12]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19bda:	f855 1c04 	ldr.w	r1, [r5, #-4]
   19bde:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19be2:	f7f1 fac2 	bl	b16a <mp_make_function_from_raw_code>
                    mp_obj_t def_dict = POP();
   19be6:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19be8:	f845 0c04 	str.w	r0, [r5, #-4]
                    mp_obj_t def_dict = POP();
   19bec:	461d      	mov	r5, r3
                    DISPATCH();
   19bee:	e45e      	b.n	194ae <mp_execute_bytecode+0x1d6>
   19bf0:	00021310 	.word	0x00021310
   19bf4:	00021308 	.word	0x00021308
   19bf8:	00022b54 	.word	0x00022b54
                switch (*ip++) {
   19bfc:	4634      	mov	r4, r6
   19bfe:	2100      	movs	r1, #0
                    DECODE_PTR;
   19c00:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19c08:	061b      	lsls	r3, r3, #24
   19c0a:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19c0e:	d4f7      	bmi.n	19c00 <mp_execute_bytecode+0x928>
   19c10:	f8d8 3000 	ldr.w	r3, [r8]
   19c14:	68db      	ldr	r3, [r3, #12]
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   19c16:	2200      	movs	r2, #0
   19c18:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   19c1c:	4611      	mov	r1, r2
   19c1e:	f7f1 faa4 	bl	b16a <mp_make_function_from_raw_code>
   19c22:	1d2b      	adds	r3, r5, #4
   19c24:	6068      	str	r0, [r5, #4]
   19c26:	461d      	mov	r5, r3
                    DISPATCH();
   19c28:	e441      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19c2a:	2000      	movs	r0, #0
   19c2c:	e000      	b.n	19c30 <mp_execute_bytecode+0x958>
                    DECODE_PTR;
   19c2e:	461e      	mov	r6, r3
   19c30:	4633      	mov	r3, r6
   19c32:	f813 2b01 	ldrb.w	r2, [r3], #1
   19c36:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   19c3a:	0612      	lsls	r2, r2, #24
   19c3c:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   19c40:	d4f5      	bmi.n	19c2e <mp_execute_bytecode+0x956>
                    size_t n_closed_over = *ip++;
   19c42:	7819      	ldrb	r1, [r3, #0]
                    DECODE_PTR;
   19c44:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= 2 + n_closed_over - 1;
   19c48:	43ca      	mvns	r2, r1
                    DECODE_PTR;
   19c4a:	68db      	ldr	r3, [r3, #12]
                    sp -= 2 + n_closed_over - 1;
   19c4c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19c50:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   19c54:	462a      	mov	r2, r5
   19c56:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19c5a:	f7f1 fafb 	bl	b254 <mp_make_closure_from_raw_code>
                    size_t n_closed_over = *ip++;
   19c5e:	1cb4      	adds	r4, r6, #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19c60:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19c62:	e424      	b.n	194ae <mp_execute_bytecode+0x1d6>
                    assert(exc_sp >= exc_stack);
   19c64:	9b06      	ldr	r3, [sp, #24]
   19c66:	429f      	cmp	r7, r3
   19c68:	f200 82a0 	bhi.w	1a1ac <mp_execute_bytecode+0xed4>
                    POP_EXC_BLOCK();
   19c6c:	9b06      	ldr	r3, [sp, #24]
   19c6e:	685b      	ldr	r3, [r3, #4]
   19c70:	f003 0301 	and.w	r3, r3, #1
   19c74:	f88d 3017 	strb.w	r3, [sp, #23]
   19c78:	9b06      	ldr	r3, [sp, #24]
   19c7a:	3b0c      	subs	r3, #12
                switch (*ip++) {
   19c7c:	4634      	mov	r4, r6
                    POP_EXC_BLOCK();
   19c7e:	9306      	str	r3, [sp, #24]
                    DISPATCH();
   19c80:	e415      	b.n	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19c82:	4634      	mov	r4, r6
   19c84:	2200      	movs	r2, #0
                    DECODE_UINT;
   19c86:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c8a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19c8e:	061e      	lsls	r6, r3, #24
   19c90:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19c94:	d4f7      	bmi.n	19c86 <mp_execute_bytecode+0x9ae>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   19c96:	09d3      	lsrs	r3, r2, #7
   19c98:	b2d1      	uxtb	r1, r2
   19c9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19c9e:	440b      	add	r3, r1
   19ca0:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   19ca4:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19ca8:	1d2b      	adds	r3, r5, #4
   19caa:	6828      	ldr	r0, [r5, #0]
   19cac:	f7f2 f845 	bl	bd3a <mp_call_function_n_kw>
   19cb0:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19cb2:	f7ff bbfc 	b.w	194ae <mp_execute_bytecode+0x1d6>
                switch (*ip++) {
   19cb6:	2000      	movs	r0, #0
   19cb8:	e000      	b.n	19cbc <mp_execute_bytecode+0x9e4>
                    DECODE_PTR;
   19cba:	461e      	mov	r6, r3
   19cbc:	4633      	mov	r3, r6
   19cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
   19cc2:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   19cc6:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   19cca:	0611      	lsls	r1, r2, #24
   19ccc:	d4f5      	bmi.n	19cba <mp_execute_bytecode+0x9e2>
                    size_t n_closed_over = *ip++;
   19cce:	7819      	ldrb	r1, [r3, #0]
                    DECODE_PTR;
   19cd0:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= n_closed_over - 1;
   19cd4:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
   19cd8:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                    DECODE_PTR;
   19cdc:	68db      	ldr	r3, [r3, #12]
                    sp -= n_closed_over - 1;
   19cde:	3504      	adds	r5, #4
   19ce0:	e7b8      	b.n	19c54 <mp_execute_bytecode+0x97c>
                    if (mp_obj_is_true(TOP())) {
   19ce2:	6828      	ldr	r0, [r5, #0]
   19ce4:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   19ce8:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   19cea:	f7f3 fdd9 	bl	d8a0 <mp_obj_is_true>
   19cee:	2800      	cmp	r0, #0
   19cf0:	d073      	beq.n	19dda <mp_execute_bytecode+0xb02>
                    DECODE_SLABEL;
   19cf2:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   19cf6:	4434      	add	r4, r6
   19cf8:	e0b9      	b.n	19e6e <mp_execute_bytecode+0xb96>
                    DECODE_SLABEL;
   19cfa:	f8b4 3001 	ldrh.w	r3, [r4, #1]
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   19cfe:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   19d02:	3b7d      	subs	r3, #125	; 0x7d
   19d04:	4423      	add	r3, r4
   19d06:	606b      	str	r3, [r5, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   19d08:	78e2      	ldrb	r2, [r4, #3]
   19d0a:	60aa      	str	r2, [r5, #8]
   19d0c:	3508      	adds	r5, #8
   19d0e:	e013      	b.n	19d38 <mp_execute_bytecode+0xa60>
                        assert(exc_sp >= exc_stack);
   19d10:	9b06      	ldr	r3, [sp, #24]
   19d12:	429f      	cmp	r7, r3
                        unum -= 1;
   19d14:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   19d18:	f200 820f 	bhi.w	1a13a <mp_execute_bytecode+0xe62>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19d1c:	9b06      	ldr	r3, [sp, #24]
   19d1e:	685b      	ldr	r3, [r3, #4]
   19d20:	0798      	lsls	r0, r3, #30
   19d22:	f100 811e 	bmi.w	19f62 <mp_execute_bytecode+0xc8a>
                        POP_EXC_BLOCK();
   19d26:	9b06      	ldr	r3, [sp, #24]
   19d28:	685b      	ldr	r3, [r3, #4]
   19d2a:	f003 0301 	and.w	r3, r3, #1
   19d2e:	f88d 3017 	strb.w	r3, [sp, #23]
   19d32:	9b06      	ldr	r3, [sp, #24]
   19d34:	3b0c      	subs	r3, #12
   19d36:	9306      	str	r3, [sp, #24]
                    while ((unum & 0x7f) > 0) {
   19d38:	0651      	lsls	r1, r2, #25
   19d3a:	d1e9      	bne.n	19d10 <mp_execute_bytecode+0xa38>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19d3c:	f855 4c04 	ldr.w	r4, [r5, #-4]
                    if (unum != 0) {
   19d40:	2a00      	cmp	r2, #0
   19d42:	f040 8158 	bne.w	19ff6 <mp_execute_bytecode+0xd1e>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19d46:	3d08      	subs	r5, #8
   19d48:	e091      	b.n	19e6e <mp_execute_bytecode+0xb96>
                    assert(exc_sp >= exc_stack);
   19d4a:	9b06      	ldr	r3, [sp, #24]
   19d4c:	429f      	cmp	r7, r3
   19d4e:	f200 81fb 	bhi.w	1a148 <mp_execute_bytecode+0xe70>
                    assert(currently_in_except_block);
   19d52:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19d56:	2b00      	cmp	r3, #0
   19d58:	d188      	bne.n	19c6c <mp_execute_bytecode+0x994>
   19d5a:	4bd0      	ldr	r3, [pc, #832]	; (1a09c <mp_execute_bytecode+0xdc4>)
   19d5c:	4ad0      	ldr	r2, [pc, #832]	; (1a0a0 <mp_execute_bytecode+0xdc8>)
   19d5e:	48d1      	ldr	r0, [pc, #836]	; (1a0a4 <mp_execute_bytecode+0xdcc>)
   19d60:	f240 3106 	movw	r1, #774	; 0x306
   19d64:	f001 fa3e 	bl	1b1e4 <__assert_func>
                    mp_obj_t obj = TOP();
   19d68:	f8d5 9000 	ldr.w	r9, [r5]
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   19d6c:	462a      	mov	r2, r5
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   19d6e:	f105 0608 	add.w	r6, r5, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   19d72:	4648      	mov	r0, r9
   19d74:	210b      	movs	r1, #11
   19d76:	f7f2 fcdb 	bl	c730 <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   19d7a:	4648      	mov	r0, r9
   19d7c:	4632      	mov	r2, r6
   19d7e:	2109      	movs	r1, #9
   19d80:	f7f2 fcd6 	bl	c730 <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   19d84:	2100      	movs	r1, #0
   19d86:	4632      	mov	r2, r6
   19d88:	4608      	mov	r0, r1
   19d8a:	f7f1 fff7 	bl	bd7c <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   19d8e:	9b06      	ldr	r3, [sp, #24]
   19d90:	f8b4 2001 	ldrh.w	r2, [r4, #1]
   19d94:	330c      	adds	r3, #12
   19d96:	9306      	str	r3, [sp, #24]
   19d98:	f8dd c018 	ldr.w	ip, [sp, #24]
   19d9c:	f8dd e018 	ldr.w	lr, [sp, #24]
   19da0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19da4:	9906      	ldr	r1, [sp, #24]
   19da6:	3403      	adds	r4, #3
   19da8:	4422      	add	r2, r4
   19daa:	f8cc 2000 	str.w	r2, [ip]
   19dae:	f043 0302 	orr.w	r3, r3, #2
                    sp += 1;
   19db2:	1d2a      	adds	r2, r5, #4
                    PUSH_EXC_BLOCK(1);
   19db4:	4313      	orrs	r3, r2
   19db6:	2200      	movs	r2, #0
   19db8:	f8ce 3004 	str.w	r3, [lr, #4]
   19dbc:	f88d 2017 	strb.w	r2, [sp, #23]
   19dc0:	608a      	str	r2, [r1, #8]
                    PUSH(ret);
   19dc2:	60a8      	str	r0, [r5, #8]
   19dc4:	4635      	mov	r5, r6
                    DISPATCH();
   19dc6:	f7ff bb72 	b.w	194ae <mp_execute_bytecode+0x1d6>
                    if (mp_obj_is_true(TOP())) {
   19dca:	6828      	ldr	r0, [r5, #0]
   19dcc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   19dd0:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   19dd2:	f7f3 fd65 	bl	d8a0 <mp_obj_is_true>
   19dd6:	2800      	cmp	r0, #0
   19dd8:	d08b      	beq.n	19cf2 <mp_execute_bytecode+0xa1a>
                        sp--;
   19dda:	3d04      	subs	r5, #4
   19ddc:	e047      	b.n	19e6e <mp_execute_bytecode+0xb96>
                    if (TOP() == mp_const_none) {
   19dde:	f8d5 9000 	ldr.w	r9, [r5]
   19de2:	4cb1      	ldr	r4, [pc, #708]	; (1a0a8 <mp_execute_bytecode+0xdd0>)
   19de4:	45a1      	cmp	r9, r4
   19de6:	f000 8172 	beq.w	1a0ce <mp_execute_bytecode+0xdf6>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   19dea:	f019 0301 	ands.w	r3, r9, #1
   19dee:	9302      	str	r3, [sp, #8]
   19df0:	f040 80a2 	bne.w	19f38 <mp_execute_bytecode+0xc60>
                        assert(mp_obj_is_exception_instance(TOP()));
   19df4:	4648      	mov	r0, r9
   19df6:	f7f5 fbc9 	bl	f58c <mp_obj_is_exception_instance>
   19dfa:	2800      	cmp	r0, #0
   19dfc:	f000 81c8 	beq.w	1a190 <mp_execute_bytecode+0xeb8>
                        sp[1] = sp[0];
   19e00:	6828      	ldr	r0, [r5, #0]
   19e02:	6068      	str	r0, [r5, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   19e04:	f7f3 fc70 	bl	d6e8 <mp_obj_get_type>
                        sp -= 2;
   19e08:	f1a5 0908 	sub.w	r9, r5, #8
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   19e0c:	6028      	str	r0, [r5, #0]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   19e0e:	9902      	ldr	r1, [sp, #8]
                        sp[2] = mp_const_none;
   19e10:	60ac      	str	r4, [r5, #8]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   19e12:	464a      	mov	r2, r9
   19e14:	2003      	movs	r0, #3
   19e16:	f7f1 ffb1 	bl	bd7c <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   19e1a:	f7f3 fd41 	bl	d8a0 <mp_obj_is_true>
   19e1e:	2800      	cmp	r0, #0
   19e20:	f000 80f1 	beq.w	1a006 <mp_execute_bytecode+0xd2e>
                            assert(exc_sp >= exc_stack);
   19e24:	9a06      	ldr	r2, [sp, #24]
                            SET_TOP(mp_const_none);
   19e26:	f845 4c08 	str.w	r4, [r5, #-8]
                            assert(exc_sp >= exc_stack);
   19e2a:	4297      	cmp	r7, r2
   19e2c:	f200 81b7 	bhi.w	1a19e <mp_execute_bytecode+0xec6>
                            POP_EXC_BLOCK();
   19e30:	9b06      	ldr	r3, [sp, #24]
   19e32:	685b      	ldr	r3, [r3, #4]
   19e34:	f003 0301 	and.w	r3, r3, #1
   19e38:	f88d 3017 	strb.w	r3, [sp, #23]
   19e3c:	9b06      	ldr	r3, [sp, #24]
   19e3e:	3b0c      	subs	r3, #12
                        sp -= 2;
   19e40:	464d      	mov	r5, r9
                switch (*ip++) {
   19e42:	4634      	mov	r4, r6
                            POP_EXC_BLOCK();
   19e44:	9306      	str	r3, [sp, #24]
   19e46:	f7ff bb32 	b.w	194ae <mp_execute_bytecode+0x1d6>
                    if (mp_obj_is_true(POP())) {
   19e4a:	6828      	ldr	r0, [r5, #0]
   19e4c:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   19e50:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   19e52:	3403      	adds	r4, #3
                    if (mp_obj_is_true(POP())) {
   19e54:	f7f3 fd24 	bl	d8a0 <mp_obj_is_true>
   19e58:	b148      	cbz	r0, 19e6e <mp_execute_bytecode+0xb96>
                    DECODE_SLABEL;
   19e5a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   19e5e:	4434      	add	r4, r6
   19e60:	e005      	b.n	19e6e <mp_execute_bytecode+0xb96>
                    DECODE_SLABEL;
   19e62:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   19e66:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   19e6a:	3b7d      	subs	r3, #125	; 0x7d
                    ip += slab;
   19e6c:	441c      	add	r4, r3
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   19e6e:	4b8f      	ldr	r3, [pc, #572]	; (1a0ac <mp_execute_bytecode+0xdd4>)
   19e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19e72:	2b00      	cmp	r3, #0
   19e74:	f43f ab1b 	beq.w	194ae <mp_execute_bytecode+0x1d6>
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19e78:	4b8c      	ldr	r3, [pc, #560]	; (1a0ac <mp_execute_bytecode+0xdd4>)
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19e7a:	4a8c      	ldr	r2, [pc, #560]	; (1a0ac <mp_execute_bytecode+0xdd4>)
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19e7c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19e80:	2300      	movs	r3, #0
   19e82:	6353      	str	r3, [r2, #52]	; 0x34
                    RAISE(obj);
   19e84:	f7e6 fa08 	bl	298 <nlr_pop>
   19e88:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   19e8c:	f7ff ba5d 	b.w	1934a <mp_execute_bytecode+0x72>
                    SET_TOP(mp_getiter(TOP(), NULL));
   19e90:	2100      	movs	r1, #0
   19e92:	6828      	ldr	r0, [r5, #0]
   19e94:	f7f2 fcc4 	bl	c820 <mp_getiter>
                switch (*ip++) {
   19e98:	4634      	mov	r4, r6
                    SET_TOP(mp_getiter(TOP(), NULL));
   19e9a:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19e9c:	f7ff bb07 	b.w	194ae <mp_execute_bytecode+0x1d6>
   19ea0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    code_state->sp = sp;
   19ea4:	f8c8 5008 	str.w	r5, [r8, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19ea8:	f855 3c0c 	ldr.w	r3, [r5, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   19eac:	3403      	adds	r4, #3
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19eae:	2b00      	cmp	r3, #0
   19eb0:	f000 80b8 	beq.w	1a024 <mp_execute_bytecode+0xd4c>
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   19eb4:	f1a5 000c 	sub.w	r0, r5, #12
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   19eb8:	f7f2 fd06 	bl	c8c8 <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   19ebc:	2804      	cmp	r0, #4
   19ebe:	f47f ad42 	bne.w	19946 <mp_execute_bytecode+0x66e>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   19ec2:	3d10      	subs	r5, #16
                        ip += ulab; // jump to after for-block
   19ec4:	4434      	add	r4, r6
   19ec6:	f7ff baf2 	b.w	194ae <mp_execute_bytecode+0x1d6>
                    if (!mp_obj_is_true(POP())) {
   19eca:	6828      	ldr	r0, [r5, #0]
   19ecc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   19ed0:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   19ed2:	3403      	adds	r4, #3
                    if (!mp_obj_is_true(POP())) {
   19ed4:	f7f3 fce4 	bl	d8a0 <mp_obj_is_true>
   19ed8:	2800      	cmp	r0, #0
   19eda:	d1c8      	bne.n	19e6e <mp_execute_bytecode+0xb96>
                    DECODE_SLABEL;
   19edc:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   19ee0:	4434      	add	r4, r6
   19ee2:	e7c4      	b.n	19e6e <mp_execute_bytecode+0xb96>
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   19ee4:	28af      	cmp	r0, #175	; 0xaf
   19ee6:	d811      	bhi.n	19f0c <mp_execute_bytecode+0xc34>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   19ee8:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   19eec:	005b      	lsls	r3, r3, #1
   19eee:	f043 0301 	orr.w	r3, r3, #1
   19ef2:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19ef4:	4634      	mov	r4, r6
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   19ef6:	3504      	adds	r5, #4
                        DISPATCH();
   19ef8:	f7ff bad9 	b.w	194ae <mp_execute_bytecode+0x1d6>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   19efc:	07d3      	lsls	r3, r2, #31
   19efe:	f140 8108 	bpl.w	1a112 <mp_execute_bytecode+0xe3a>
                        if (cause < 0) {
   19f02:	1052      	asrs	r2, r2, #1
   19f04:	f100 80ad 	bmi.w	1a062 <mp_execute_bytecode+0xd8a>
                            PUSH((mp_obj_t)cause);
   19f08:	602a      	str	r2, [r5, #0]
                            goto unwind_jump;
   19f0a:	e715      	b.n	19d38 <mp_execute_bytecode+0xa60>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   19f0c:	28bf      	cmp	r0, #191	; 0xbf
   19f0e:	d974      	bls.n	19ffa <mp_execute_bytecode+0xd22>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   19f10:	28cf      	cmp	r0, #207	; 0xcf
   19f12:	f200 80a8 	bhi.w	1a066 <mp_execute_bytecode+0xd8e>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   19f16:	f1c0 00c0 	rsb	r0, r0, #192	; 0xc0
   19f1a:	682b      	ldr	r3, [r5, #0]
   19f1c:	f84a 3020 	str.w	r3, [sl, r0, lsl #2]
                switch (*ip++) {
   19f20:	4634      	mov	r4, r6
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   19f22:	3d04      	subs	r5, #4
                        DISPATCH();
   19f24:	f7ff bac3 	b.w	194ae <mp_execute_bytecode+0x1d6>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   19f28:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19f2c:	f855 1908 	ldr.w	r1, [r5], #-8
   19f30:	f7f5 f85f 	bl	eff2 <mp_obj_dict_store>
   19f34:	f7ff babb 	b.w	194ae <mp_execute_bytecode+0x1d6>
                        mp_obj_t data = sp[-1];
   19f38:	f855 3c04 	ldr.w	r3, [r5, #-4]
                        sp[0] = mp_const_none;
   19f3c:	602c      	str	r4, [r5, #0]
                        sp[1] = mp_const_none;
   19f3e:	606c      	str	r4, [r5, #4]
                        sp[-1] = mp_const_none;
   19f40:	f845 4c04 	str.w	r4, [r5, #-4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   19f44:	f1a5 020c 	sub.w	r2, r5, #12
   19f48:	2100      	movs	r1, #0
   19f4a:	2003      	movs	r0, #3
                        mp_obj_t data = sp[-1];
   19f4c:	9302      	str	r3, [sp, #8]
                        mp_call_method_n_kw(3, 0, sp - 3);
   19f4e:	f7f1 ff15 	bl	bd7c <mp_call_method_n_kw>
                        sp[-3] = data;
   19f52:	9b02      	ldr	r3, [sp, #8]
   19f54:	f845 3c0c 	str.w	r3, [r5, #-12]
                switch (*ip++) {
   19f58:	4634      	mov	r4, r6
                        sp[-2] = cause;
   19f5a:	f845 9d08 	str.w	r9, [r5, #-8]!
   19f5e:	f7ff baa6 	b.w	194ae <mp_execute_bytecode+0x1d6>
                            ip = exc_sp->handler; // get exception handler byte code address
   19f62:	9906      	ldr	r1, [sp, #24]
                            exc_sp--; // pop exception handler
   19f64:	9b06      	ldr	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   19f66:	0052      	lsls	r2, r2, #1
   19f68:	f042 0201 	orr.w	r2, r2, #1
   19f6c:	602a      	str	r2, [r5, #0]
                            exc_sp--; // pop exception handler
   19f6e:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   19f70:	680c      	ldr	r4, [r1, #0]
                            exc_sp--; // pop exception handler
   19f72:	9306      	str	r3, [sp, #24]
                            goto dispatch_loop; // run the exception handler
   19f74:	f7ff ba9b 	b.w	194ae <mp_execute_bytecode+0x1d6>
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   19f78:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   19f7c:	f8d8 2008 	ldr.w	r2, [r8, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   19f80:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   19f82:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   19f84:	3a10      	subs	r2, #16
                        code_state->ip = ip + ulab; // jump to after for-block
   19f86:	f8c8 3004 	str.w	r3, [r8, #4]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   19f8a:	f8c8 2008 	str.w	r2, [r8, #8]
                        goto outer_dispatch_loop; // continue with dispatch loop
   19f8e:	f7ff b9c0 	b.w	19312 <mp_execute_bytecode+0x3a>
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19f92:	9b06      	ldr	r3, [sp, #24]
                            ip = exc_sp->handler;
   19f94:	9906      	ldr	r1, [sp, #24]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19f96:	685b      	ldr	r3, [r3, #4]
                            exc_sp--;
   19f98:	9a06      	ldr	r2, [sp, #24]
                            finally_sp[1] = sp[0];
   19f9a:	6828      	ldr	r0, [r5, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19f9c:	f023 0503 	bic.w	r5, r3, #3
                            exc_sp--;
   19fa0:	f1a2 030c 	sub.w	r3, r2, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   19fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   19fa8:	6068      	str	r0, [r5, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   19faa:	60aa      	str	r2, [r5, #8]
                            ip = exc_sp->handler;
   19fac:	680c      	ldr	r4, [r1, #0]
                            exc_sp--;
   19fae:	9306      	str	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   19fb0:	3508      	adds	r5, #8
                            goto dispatch_loop;
   19fb2:	f7ff ba7c 	b.w	194ae <mp_execute_bytecode+0x1d6>
                        sp--;
   19fb6:	3d04      	subs	r5, #4
                        obj = TOP();
   19fb8:	6828      	ldr	r0, [r5, #0]
                    obj = mp_make_raise_obj(obj);
   19fba:	f7f2 fde1 	bl	cb80 <mp_make_raise_obj>
   19fbe:	4681      	mov	r9, r0
                    RAISE(obj);
   19fc0:	f7e6 f96a 	bl	298 <nlr_pop>
   19fc4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   19fc8:	f7ff b9bf 	b.w	1934a <mp_execute_bytecode+0x72>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   19fcc:	2802      	cmp	r0, #2
   19fce:	f040 80d8 	bne.w	1a182 <mp_execute_bytecode+0xeaa>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   19fd2:	4659      	mov	r1, fp
   19fd4:	9807      	ldr	r0, [sp, #28]
   19fd6:	f7f5 fae9 	bl	f5ac <mp_obj_exception_match>
   19fda:	2800      	cmp	r0, #0
   19fdc:	f000 80a5 	beq.w	1a12a <mp_execute_bytecode+0xe52>
                            PUSH(mp_obj_exception_get_value(ret_value));
   19fe0:	9807      	ldr	r0, [sp, #28]
   19fe2:	f7f5 f915 	bl	f210 <mp_obj_exception_get_value>
   19fe6:	f845 0c04 	str.w	r0, [r5, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   19fea:	f1b9 0f00 	cmp.w	r9, #0
   19fee:	f47f aa55 	bne.w	1949c <mp_execute_bytecode+0x1c4>
   19ff2:	f7ff ba5a 	b.w	194aa <mp_execute_bytecode+0x1d2>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   19ff6:	3d18      	subs	r5, #24
   19ff8:	e739      	b.n	19e6e <mp_execute_bytecode+0xb96>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   19ffa:	f1c0 00b0 	rsb	r0, r0, #176	; 0xb0
                switch (*ip++) {
   19ffe:	4634      	mov	r4, r6
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a000:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
                        goto load_check;
   1a004:	e49c      	b.n	19940 <mp_execute_bytecode+0x668>
                            sp[0] = sp[3];
   1a006:	686b      	ldr	r3, [r5, #4]
   1a008:	f845 3c08 	str.w	r3, [r5, #-8]
                switch (*ip++) {
   1a00c:	4634      	mov	r4, r6
                        sp -= 2;
   1a00e:	464d      	mov	r5, r9
   1a010:	f7ff ba4d 	b.w	194ae <mp_execute_bytecode+0x1d6>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a014:	ab07      	add	r3, sp, #28
   1a016:	464a      	mov	r2, r9
   1a018:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1a01c:	f7f2 fccc 	bl	c9b8 <mp_resume>
   1a020:	f7ff ba2c 	b.w	1947c <mp_execute_bytecode+0x1a4>
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   1a024:	f855 0c08 	ldr.w	r0, [r5, #-8]
   1a028:	e746      	b.n	19eb8 <mp_execute_bytecode+0xbe0>
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   1a02a:	464d      	mov	r5, r9
                switch (*ip++) {
   1a02c:	4634      	mov	r4, r6
   1a02e:	f7ff ba3e 	b.w	194ae <mp_execute_bytecode+0x1d6>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   1a032:	491f      	ldr	r1, [pc, #124]	; (1a0b0 <mp_execute_bytecode+0xdd8>)
   1a034:	481f      	ldr	r0, [pc, #124]	; (1a0b4 <mp_execute_bytecode+0xddc>)
   1a036:	f7f5 f983 	bl	f340 <mp_obj_new_exception_msg>
   1a03a:	4681      	mov	r9, r0
                            RAISE(obj);
   1a03c:	f7e6 f92c 	bl	298 <nlr_pop>
   1a040:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a044:	f7ff b981 	b.w	1934a <mp_execute_bytecode+0x72>
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   1a048:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a04a:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a04e:	f7f5 f8df 	bl	f210 <mp_obj_exception_get_value>
   1a052:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1a054:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a058:	3301      	adds	r3, #1
   1a05a:	f8c8 3004 	str.w	r3, [r8, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a05e:	f7ff b958 	b.w	19312 <mp_execute_bytecode+0x3a>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1a062:	3d04      	subs	r5, #4
   1a064:	e4f4      	b.n	19a50 <mp_execute_bytecode+0x778>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NUM_BYTECODE) {
   1a066:	28d3      	cmp	r0, #211	; 0xd3
   1a068:	d944      	bls.n	1a0f4 <mp_execute_bytecode+0xe1c>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BINARY_OP_NUM_BYTECODE) {
   1a06a:	28f7      	cmp	r0, #247	; 0xf7
   1a06c:	d873      	bhi.n	1a156 <mp_execute_bytecode+0xe7e>
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a06e:	682a      	ldr	r2, [r5, #0]
   1a070:	f855 1c04 	ldr.w	r1, [r5, #-4]
   1a074:	38d7      	subs	r0, #215	; 0xd7
   1a076:	f7f1 fbc9 	bl	b80c <mp_binary_op>
                        mp_obj_t rhs = POP();
   1a07a:	1f2b      	subs	r3, r5, #4
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a07c:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   1a080:	4634      	mov	r4, r6
                        mp_obj_t rhs = POP();
   1a082:	461d      	mov	r5, r3
                        DISPATCH();
   1a084:	f7ff ba13 	b.w	194ae <mp_execute_bytecode+0x1d6>
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
   1a088:	9b01      	ldr	r3, [sp, #4]
   1a08a:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   1a08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a090:	f8c8 3014 	str.w	r3, [r8, #20]
                return MP_VM_RETURN_EXCEPTION;
   1a094:	2002      	movs	r0, #2
   1a096:	f7ff bae5 	b.w	19664 <mp_execute_bytecode+0x38c>
   1a09a:	bf00      	nop
   1a09c:	000241b0 	.word	0x000241b0
   1a0a0:	00024128 	.word	0x00024128
   1a0a4:	0002418c 	.word	0x0002418c
   1a0a8:	00022b54 	.word	0x00022b54
   1a0ac:	20001240 	.word	0x20001240
   1a0b0:	00024224 	.word	0x00024224
   1a0b4:	00021d2c 	.word	0x00021d2c
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   1a0b8:	4943      	ldr	r1, [pc, #268]	; (1a1c8 <mp_execute_bytecode+0xef0>)
   1a0ba:	4844      	ldr	r0, [pc, #272]	; (1a1cc <mp_execute_bytecode+0xef4>)
   1a0bc:	f7f5 f940 	bl	f340 <mp_obj_new_exception_msg>
   1a0c0:	4681      	mov	r9, r0
                            RAISE(obj);
   1a0c2:	f7e6 f8e9 	bl	298 <nlr_pop>
   1a0c6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a0ca:	f7ff b93e 	b.w	1934a <mp_execute_bytecode+0x72>
                        sp -= 2;
   1a0ce:	f1a5 0308 	sub.w	r3, r5, #8
                        sp[1] = mp_const_none;
   1a0d2:	f8c5 9004 	str.w	r9, [r5, #4]
                        sp[2] = mp_const_none;
   1a0d6:	f8c5 9008 	str.w	r9, [r5, #8]
                        mp_call_method_n_kw(3, 0, sp);
   1a0da:	461a      	mov	r2, r3
   1a0dc:	2100      	movs	r1, #0
   1a0de:	2003      	movs	r0, #3
   1a0e0:	9302      	str	r3, [sp, #8]
   1a0e2:	f7f1 fe4b 	bl	bd7c <mp_call_method_n_kw>
                        sp -= 2;
   1a0e6:	9b02      	ldr	r3, [sp, #8]
                        SET_TOP(mp_const_none);
   1a0e8:	f845 9c08 	str.w	r9, [r5, #-8]
                switch (*ip++) {
   1a0ec:	4634      	mov	r4, r6
                        sp -= 2;
   1a0ee:	461d      	mov	r5, r3
   1a0f0:	f7ff b9dd 	b.w	194ae <mp_execute_bytecode+0x1d6>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a0f4:	38d0      	subs	r0, #208	; 0xd0
   1a0f6:	6829      	ldr	r1, [r5, #0]
   1a0f8:	f7f1 faa2 	bl	b640 <mp_unary_op>
                switch (*ip++) {
   1a0fc:	4634      	mov	r4, r6
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a0fe:	6028      	str	r0, [r5, #0]
                        DISPATCH();
   1a100:	f7ff b9d5 	b.w	194ae <mp_execute_bytecode+0x1d6>
                assert(exc_sp >= exc_stack);
   1a104:	4b32      	ldr	r3, [pc, #200]	; (1a1d0 <mp_execute_bytecode+0xef8>)
   1a106:	4a33      	ldr	r2, [pc, #204]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a108:	4833      	ldr	r0, [pc, #204]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a10a:	f240 519a 	movw	r1, #1434	; 0x59a
   1a10e:	f001 f869 	bl	1b1e4 <__assert_func>
   1a112:	4610      	mov	r0, r2
                        assert(mp_obj_is_exception_instance(TOP()));
   1a114:	f7f5 fa3a 	bl	f58c <mp_obj_is_exception_instance>
   1a118:	b360      	cbz	r0, 1a174 <mp_execute_bytecode+0xe9c>
                        RAISE(TOP());
   1a11a:	f7e6 f8bd 	bl	298 <nlr_pop>
   1a11e:	f8d5 9000 	ldr.w	r9, [r5]
   1a122:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a126:	f7ff b910 	b.w	1934a <mp_execute_bytecode+0x72>
                            RAISE(ret_value);
   1a12a:	f7e6 f8b5 	bl	298 <nlr_pop>
   1a12e:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1a132:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1a136:	f7ff b908 	b.w	1934a <mp_execute_bytecode+0x72>
                        assert(exc_sp >= exc_stack);
   1a13a:	4b25      	ldr	r3, [pc, #148]	; (1a1d0 <mp_execute_bytecode+0xef8>)
   1a13c:	4a25      	ldr	r2, [pc, #148]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a13e:	4826      	ldr	r0, [pc, #152]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a140:	f44f 7124 	mov.w	r1, #656	; 0x290
   1a144:	f001 f84e 	bl	1b1e4 <__assert_func>
                    assert(exc_sp >= exc_stack);
   1a148:	4b21      	ldr	r3, [pc, #132]	; (1a1d0 <mp_execute_bytecode+0xef8>)
   1a14a:	4a22      	ldr	r2, [pc, #136]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a14c:	4822      	ldr	r0, [pc, #136]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a14e:	f240 3105 	movw	r1, #773	; 0x305
   1a152:	f001 f847 	bl	1b1e4 <__assert_func>
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   1a156:	4921      	ldr	r1, [pc, #132]	; (1a1dc <mp_execute_bytecode+0xf04>)
   1a158:	4821      	ldr	r0, [pc, #132]	; (1a1e0 <mp_execute_bytecode+0xf08>)
   1a15a:	f7f5 f8f1 	bl	f340 <mp_obj_new_exception_msg>
   1a15e:	4604      	mov	r4, r0
                    nlr_pop();
   1a160:	f7e6 f89a 	bl	298 <nlr_pop>
                    fastn[0] = obj;
   1a164:	9b01      	ldr	r3, [sp, #4]
   1a166:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   1a16a:	2002      	movs	r0, #2
                    fastn[0] = obj;
   1a16c:	f8c8 4014 	str.w	r4, [r8, #20]
                    return MP_VM_RETURN_EXCEPTION;
   1a170:	f7ff ba78 	b.w	19664 <mp_execute_bytecode+0x38c>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a174:	4b1b      	ldr	r3, [pc, #108]	; (1a1e4 <mp_execute_bytecode+0xf0c>)
   1a176:	4a17      	ldr	r2, [pc, #92]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a178:	4817      	ldr	r0, [pc, #92]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a17a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1a17e:	f001 f831 	bl	1b1e4 <__assert_func>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a182:	4b19      	ldr	r3, [pc, #100]	; (1a1e8 <mp_execute_bytecode+0xf10>)
   1a184:	4a13      	ldr	r2, [pc, #76]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a186:	4814      	ldr	r0, [pc, #80]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a188:	f240 41ae 	movw	r1, #1198	; 0x4ae
   1a18c:	f001 f82a 	bl	1b1e4 <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a190:	4b14      	ldr	r3, [pc, #80]	; (1a1e4 <mp_execute_bytecode+0xf0c>)
   1a192:	4a10      	ldr	r2, [pc, #64]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a194:	4810      	ldr	r0, [pc, #64]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a196:	f240 216e 	movw	r1, #622	; 0x26e
   1a19a:	f001 f823 	bl	1b1e4 <__assert_func>
                            assert(exc_sp >= exc_stack);
   1a19e:	4b0c      	ldr	r3, [pc, #48]	; (1a1d0 <mp_execute_bytecode+0xef8>)
   1a1a0:	4a0c      	ldr	r2, [pc, #48]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a1a2:	480d      	ldr	r0, [pc, #52]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a1a4:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1a1a8:	f001 f81c 	bl	1b1e4 <__assert_func>
                    assert(exc_sp >= exc_stack);
   1a1ac:	4b08      	ldr	r3, [pc, #32]	; (1a1d0 <mp_execute_bytecode+0xef8>)
   1a1ae:	4a09      	ldr	r2, [pc, #36]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a1b0:	4809      	ldr	r0, [pc, #36]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a1b2:	f240 21ff 	movw	r1, #767	; 0x2ff
   1a1b6:	f001 f815 	bl	1b1e4 <__assert_func>
                    assert(exc_sp == exc_stack - 1);
   1a1ba:	4b0c      	ldr	r3, [pc, #48]	; (1a1ec <mp_execute_bytecode+0xf14>)
   1a1bc:	4a05      	ldr	r2, [pc, #20]	; (1a1d4 <mp_execute_bytecode+0xefc>)
   1a1be:	4806      	ldr	r0, [pc, #24]	; (1a1d8 <mp_execute_bytecode+0xf00>)
   1a1c0:	f240 414e 	movw	r1, #1102	; 0x44e
   1a1c4:	f001 f80e 	bl	1b1e4 <__assert_func>
   1a1c8:	0002413c 	.word	0x0002413c
   1a1cc:	00021cb4 	.word	0x00021cb4
   1a1d0:	0002419c 	.word	0x0002419c
   1a1d4:	00024128 	.word	0x00024128
   1a1d8:	0002418c 	.word	0x0002418c
   1a1dc:	00024208 	.word	0x00024208
   1a1e0:	00021d68 	.word	0x00021d68
   1a1e4:	00024168 	.word	0x00024168
   1a1e8:	000241e4 	.word	0x000241e4
   1a1ec:	000241cc 	.word	0x000241cc

0001a1f0 <mp_decode_uint>:
#else // don't print debugging info
#define DEBUG_PRINT (0)
#define DEBUG_printf(...) (void)0
#endif

mp_uint_t mp_decode_uint(const byte **ptr) {
   1a1f0:	b480      	push	{r7}
   1a1f2:	b087      	sub	sp, #28
   1a1f4:	af00      	add	r7, sp, #0
   1a1f6:	6078      	str	r0, [r7, #4]
    mp_uint_t unum = 0;
   1a1f8:	2300      	movs	r3, #0
   1a1fa:	617b      	str	r3, [r7, #20]
    byte val;
    const byte *p = *ptr;
   1a1fc:	687b      	ldr	r3, [r7, #4]
   1a1fe:	681b      	ldr	r3, [r3, #0]
   1a200:	613b      	str	r3, [r7, #16]
    do {
        val = *p++;
   1a202:	693b      	ldr	r3, [r7, #16]
   1a204:	1c5a      	adds	r2, r3, #1
   1a206:	613a      	str	r2, [r7, #16]
   1a208:	781b      	ldrb	r3, [r3, #0]
   1a20a:	73fb      	strb	r3, [r7, #15]
        unum = (unum << 7) | (val & 0x7f);
   1a20c:	697b      	ldr	r3, [r7, #20]
   1a20e:	01da      	lsls	r2, r3, #7
   1a210:	7bfb      	ldrb	r3, [r7, #15]
   1a212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a216:	4313      	orrs	r3, r2
   1a218:	617b      	str	r3, [r7, #20]
    } while ((val & 0x80) != 0);
   1a21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1a21e:	2b00      	cmp	r3, #0
   1a220:	dbef      	blt.n	1a202 <mp_decode_uint+0x12>
    *ptr = p;
   1a222:	687b      	ldr	r3, [r7, #4]
   1a224:	693a      	ldr	r2, [r7, #16]
   1a226:	601a      	str	r2, [r3, #0]
    return unum;
   1a228:	697b      	ldr	r3, [r7, #20]
}
   1a22a:	4618      	mov	r0, r3
   1a22c:	371c      	adds	r7, #28
   1a22e:	46bd      	mov	sp, r7
   1a230:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a234:	4770      	bx	lr

0001a236 <mp_decode_uint_value>:
// the caller doesn't need to increase the ptr argument.  If ptr is a local variable
// and the caller uses mp_decode_uint(&ptr) instead of this function, then the compiler
// must allocate a slot on the stack for ptr, and this slot cannot be reused for
// anything else in the function because the pointer may have been stored in a global
// and reused later in the function.
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1a236:	b580      	push	{r7, lr}
   1a238:	b082      	sub	sp, #8
   1a23a:	af00      	add	r7, sp, #0
   1a23c:	6078      	str	r0, [r7, #4]
    return mp_decode_uint(&ptr);
   1a23e:	1d3b      	adds	r3, r7, #4
   1a240:	4618      	mov	r0, r3
   1a242:	f7ff ffd5 	bl	1a1f0 <mp_decode_uint>
   1a246:	4603      	mov	r3, r0
}
   1a248:	4618      	mov	r0, r3
   1a24a:	3708      	adds	r7, #8
   1a24c:	46bd      	mov	sp, r7
   1a24e:	bd80      	pop	{r7, pc}

0001a250 <mp_decode_uint_skip>:

// This function is used to help reduce stack usage at the caller, for the case when
// the caller doesn't need the actual value and just wants to skip over it.
const byte *mp_decode_uint_skip(const byte *ptr) {
   1a250:	b480      	push	{r7}
   1a252:	b083      	sub	sp, #12
   1a254:	af00      	add	r7, sp, #0
   1a256:	6078      	str	r0, [r7, #4]
    while ((*ptr++) & 0x80) {
   1a258:	bf00      	nop
   1a25a:	687b      	ldr	r3, [r7, #4]
   1a25c:	1c5a      	adds	r2, r3, #1
   1a25e:	607a      	str	r2, [r7, #4]
   1a260:	781b      	ldrb	r3, [r3, #0]
   1a262:	b25b      	sxtb	r3, r3
   1a264:	2b00      	cmp	r3, #0
   1a266:	dbf8      	blt.n	1a25a <mp_decode_uint_skip+0xa>
    }
    return ptr;
   1a268:	687b      	ldr	r3, [r7, #4]
}
   1a26a:	4618      	mov	r0, r3
   1a26c:	370c      	adds	r7, #12
   1a26e:	46bd      	mov	sp, r7
   1a270:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a274:	4770      	bx	lr

0001a276 <fun_pos_args_mismatch>:

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1a276:	b580      	push	{r7, lr}
   1a278:	b084      	sub	sp, #16
   1a27a:	af00      	add	r7, sp, #0
   1a27c:	60f8      	str	r0, [r7, #12]
   1a27e:	60b9      	str	r1, [r7, #8]
   1a280:	607a      	str	r2, [r7, #4]
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
    // generic message, used also for other argument issues
    (void)f;
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
   1a282:	f7f2 ff3b 	bl	d0fc <mp_arg_error_terse_mismatch>

0001a286 <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1a286:	b590      	push	{r4, r7, lr}
   1a288:	b09b      	sub	sp, #108	; 0x6c
   1a28a:	af00      	add	r7, sp, #0
   1a28c:	60f8      	str	r0, [r7, #12]
   1a28e:	60b9      	str	r1, [r7, #8]
   1a290:	607a      	str	r2, [r7, #4]
   1a292:	603b      	str	r3, [r7, #0]
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   1a294:	68fb      	ldr	r3, [r7, #12]
   1a296:	681b      	ldr	r3, [r3, #0]
   1a298:	637b      	str	r3, [r7, #52]	; 0x34

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   1a29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a29c:	689b      	ldr	r3, [r3, #8]
   1a29e:	68fa      	ldr	r2, [r7, #12]
   1a2a0:	6852      	ldr	r2, [r2, #4]
   1a2a2:	441a      	add	r2, r3
   1a2a4:	68fb      	ldr	r3, [r7, #12]
   1a2a6:	605a      	str	r2, [r3, #4]
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   1a2a8:	68fb      	ldr	r3, [r7, #12]
   1a2aa:	3304      	adds	r3, #4
   1a2ac:	4618      	mov	r0, r3
   1a2ae:	f7ff ff9f 	bl	1a1f0 <mp_decode_uint>
   1a2b2:	6338      	str	r0, [r7, #48]	; 0x30
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   1a2b4:	68fb      	ldr	r3, [r7, #12]
   1a2b6:	685b      	ldr	r3, [r3, #4]
   1a2b8:	4618      	mov	r0, r3
   1a2ba:	f7ff ffc9 	bl	1a250 <mp_decode_uint_skip>
   1a2be:	4602      	mov	r2, r0
   1a2c0:	68fb      	ldr	r3, [r7, #12]
   1a2c2:	605a      	str	r2, [r3, #4]
    size_t scope_flags = *code_state->ip++;
   1a2c4:	68fb      	ldr	r3, [r7, #12]
   1a2c6:	685b      	ldr	r3, [r3, #4]
   1a2c8:	1c59      	adds	r1, r3, #1
   1a2ca:	68fa      	ldr	r2, [r7, #12]
   1a2cc:	6051      	str	r1, [r2, #4]
   1a2ce:	781b      	ldrb	r3, [r3, #0]
   1a2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t n_pos_args = *code_state->ip++;
   1a2d2:	68fb      	ldr	r3, [r7, #12]
   1a2d4:	685b      	ldr	r3, [r3, #4]
   1a2d6:	1c59      	adds	r1, r3, #1
   1a2d8:	68fa      	ldr	r2, [r7, #12]
   1a2da:	6051      	str	r1, [r2, #4]
   1a2dc:	781b      	ldrb	r3, [r3, #0]
   1a2de:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t n_kwonly_args = *code_state->ip++;
   1a2e0:	68fb      	ldr	r3, [r7, #12]
   1a2e2:	685b      	ldr	r3, [r3, #4]
   1a2e4:	1c59      	adds	r1, r3, #1
   1a2e6:	68fa      	ldr	r2, [r7, #12]
   1a2e8:	6051      	str	r1, [r2, #4]
   1a2ea:	781b      	ldrb	r3, [r3, #0]
   1a2ec:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_def_pos_args = *code_state->ip++;
   1a2ee:	68fb      	ldr	r3, [r7, #12]
   1a2f0:	685b      	ldr	r3, [r3, #4]
   1a2f2:	1c59      	adds	r1, r3, #1
   1a2f4:	68fa      	ldr	r2, [r7, #12]
   1a2f6:	6051      	str	r1, [r2, #4]
   1a2f8:	781b      	ldrb	r3, [r3, #0]
   1a2fa:	623b      	str	r3, [r7, #32]

    code_state->sp = &code_state->state[0] - 1;
   1a2fc:	68fb      	ldr	r3, [r7, #12]
   1a2fe:	3314      	adds	r3, #20
   1a300:	1f1a      	subs	r2, r3, #4
   1a302:	68fb      	ldr	r3, [r7, #12]
   1a304:	609a      	str	r2, [r3, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   1a306:	68fb      	ldr	r3, [r7, #12]
   1a308:	f103 0214 	add.w	r2, r3, #20
   1a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a30e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a312:	3b03      	subs	r3, #3
   1a314:	009b      	lsls	r3, r3, #2
   1a316:	441a      	add	r2, r3
   1a318:	68fb      	ldr	r3, [r7, #12]
   1a31a:	60da      	str	r2, [r3, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   1a31c:	68fb      	ldr	r3, [r7, #12]
   1a31e:	f103 0014 	add.w	r0, r3, #20
   1a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a324:	009b      	lsls	r3, r3, #2
   1a326:	461a      	mov	r2, r3
   1a328:	2100      	movs	r1, #0
   1a32a:	f002 f9b3 	bl	1c694 <memset>

    const mp_obj_t *kwargs = args + n_args;
   1a32e:	68bb      	ldr	r3, [r7, #8]
   1a330:	009b      	lsls	r3, r3, #2
   1a332:	683a      	ldr	r2, [r7, #0]
   1a334:	4413      	add	r3, r2
   1a336:	61fb      	str	r3, [r7, #28]

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   1a338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a33c:	1ad2      	subs	r2, r2, r3
   1a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a340:	1ad3      	subs	r3, r2, r3
   1a342:	3b01      	subs	r3, #1
   1a344:	3304      	adds	r3, #4
   1a346:	009b      	lsls	r3, r3, #2
   1a348:	68fa      	ldr	r2, [r7, #12]
   1a34a:	4413      	add	r3, r2
   1a34c:	3304      	adds	r3, #4
   1a34e:	667b      	str	r3, [r7, #100]	; 0x64

    // check positional arguments

    if (n_args > n_pos_args) {
   1a350:	68ba      	ldr	r2, [r7, #8]
   1a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a354:	429a      	cmp	r2, r3
   1a356:	d91b      	bls.n	1a390 <mp_setup_code_state+0x10a>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   1a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a35a:	f003 0301 	and.w	r3, r3, #1
   1a35e:	2b00      	cmp	r3, #0
   1a360:	d104      	bne.n	1a36c <mp_setup_code_state+0xe6>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   1a362:	68ba      	ldr	r2, [r7, #8]
   1a364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a366:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a368:	f7ff ff85 	bl	1a276 <fun_pos_args_mismatch>
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   1a36c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1a36e:	1f23      	subs	r3, r4, #4
   1a370:	667b      	str	r3, [r7, #100]	; 0x64
   1a372:	68ba      	ldr	r2, [r7, #8]
   1a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a376:	1ad0      	subs	r0, r2, r3
   1a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a37a:	009b      	lsls	r3, r3, #2
   1a37c:	683a      	ldr	r2, [r7, #0]
   1a37e:	4413      	add	r3, r2
   1a380:	4619      	mov	r1, r3
   1a382:	f7fb fb53 	bl	15a2c <mp_obj_new_tuple>
   1a386:	4603      	mov	r3, r0
   1a388:	6023      	str	r3, [r4, #0]
        n_args = n_pos_args;
   1a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a38c:	60bb      	str	r3, [r7, #8]
   1a38e:	e03c      	b.n	1a40a <mp_setup_code_state+0x184>
    } else {
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   1a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a392:	f003 0301 	and.w	r3, r3, #1
   1a396:	2b00      	cmp	r3, #0
   1a398:	d004      	beq.n	1a3a4 <mp_setup_code_state+0x11e>
            DEBUG_printf("passing empty tuple as *args\n");
            *var_pos_kw_args-- = mp_const_empty_tuple;
   1a39a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a39c:	1f1a      	subs	r2, r3, #4
   1a39e:	667a      	str	r2, [r7, #100]	; 0x64
   1a3a0:	4aa5      	ldr	r2, [pc, #660]	; (1a638 <mp_setup_code_state+0x3b2>)
   1a3a2:	601a      	str	r2, [r3, #0]
        }
        // Apply processing and check below only if we don't have kwargs,
        // otherwise, kw handling code below has own extensive checks.
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   1a3a4:	687b      	ldr	r3, [r7, #4]
   1a3a6:	2b00      	cmp	r3, #0
   1a3a8:	d12f      	bne.n	1a40a <mp_setup_code_state+0x184>
   1a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a3ac:	f003 0308 	and.w	r3, r3, #8
   1a3b0:	2b00      	cmp	r3, #0
   1a3b2:	d12a      	bne.n	1a40a <mp_setup_code_state+0x184>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   1a3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a3b6:	6a3b      	ldr	r3, [r7, #32]
   1a3b8:	1ad2      	subs	r2, r2, r3
   1a3ba:	68bb      	ldr	r3, [r7, #8]
   1a3bc:	429a      	cmp	r2, r3
   1a3be:	d81c      	bhi.n	1a3fa <mp_setup_code_state+0x174>
                // given enough arguments, but may need to use some default arguments
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a3c0:	68bb      	ldr	r3, [r7, #8]
   1a3c2:	663b      	str	r3, [r7, #96]	; 0x60
   1a3c4:	e014      	b.n	1a3f0 <mp_setup_code_state+0x16a>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   1a3c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a3c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a3ca:	1ad3      	subs	r3, r2, r3
   1a3cc:	3b01      	subs	r3, #1
   1a3ce:	6a39      	ldr	r1, [r7, #32]
   1a3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a3d2:	1a89      	subs	r1, r1, r2
   1a3d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a3d6:	4411      	add	r1, r2
   1a3d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a3da:	3104      	adds	r1, #4
   1a3dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a3e0:	68f9      	ldr	r1, [r7, #12]
   1a3e2:	3304      	adds	r3, #4
   1a3e4:	009b      	lsls	r3, r3, #2
   1a3e6:	440b      	add	r3, r1
   1a3e8:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a3ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a3ec:	3301      	adds	r3, #1
   1a3ee:	663b      	str	r3, [r7, #96]	; 0x60
   1a3f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a3f4:	429a      	cmp	r2, r3
   1a3f6:	d3e6      	bcc.n	1a3c6 <mp_setup_code_state+0x140>
   1a3f8:	e007      	b.n	1a40a <mp_setup_code_state+0x184>
                }
            } else {
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   1a3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a3fc:	6a3b      	ldr	r3, [r7, #32]
   1a3fe:	1ad3      	subs	r3, r2, r3
   1a400:	68ba      	ldr	r2, [r7, #8]
   1a402:	4619      	mov	r1, r3
   1a404:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a406:	f7ff ff36 	bl	1a276 <fun_pos_args_mismatch>
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   1a40a:	2300      	movs	r3, #0
   1a40c:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a40e:	e010      	b.n	1a432 <mp_setup_code_state+0x1ac>
        code_state->state[n_state - 1 - i] = args[i];
   1a410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a414:	1ad3      	subs	r3, r2, r3
   1a416:	3b01      	subs	r3, #1
   1a418:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a41a:	0092      	lsls	r2, r2, #2
   1a41c:	6839      	ldr	r1, [r7, #0]
   1a41e:	440a      	add	r2, r1
   1a420:	6812      	ldr	r2, [r2, #0]
   1a422:	68f9      	ldr	r1, [r7, #12]
   1a424:	3304      	adds	r3, #4
   1a426:	009b      	lsls	r3, r3, #2
   1a428:	440b      	add	r3, r1
   1a42a:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1a42c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a42e:	3301      	adds	r3, #1
   1a430:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a434:	68bb      	ldr	r3, [r7, #8]
   1a436:	429a      	cmp	r2, r3
   1a438:	d3ea      	bcc.n	1a410 <mp_setup_code_state+0x18a>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a43a:	687b      	ldr	r3, [r7, #4]
   1a43c:	2b00      	cmp	r3, #0
   1a43e:	d105      	bne.n	1a44c <mp_setup_code_state+0x1c6>
   1a440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a442:	f003 0308 	and.w	r3, r3, #8
   1a446:	2b00      	cmp	r3, #0
   1a448:	f000 8119 	beq.w	1a67e <mp_setup_code_state+0x3f8>
        DEBUG_printf("Initial args: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        mp_obj_t dict = MP_OBJ_NULL;
   1a44c:	2300      	movs	r3, #0
   1a44e:	65bb      	str	r3, [r7, #88]	; 0x58
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a452:	f003 0302 	and.w	r3, r3, #2
   1a456:	2b00      	cmp	r3, #0
   1a458:	d006      	beq.n	1a468 <mp_setup_code_state+0x1e2>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   1a45a:	6878      	ldr	r0, [r7, #4]
   1a45c:	f7f4 fda8 	bl	efb0 <mp_obj_new_dict>
   1a460:	65b8      	str	r0, [r7, #88]	; 0x58
            *var_pos_kw_args = dict;
   1a462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a464:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1a466:	601a      	str	r2, [r3, #0]
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   1a468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a46a:	68db      	ldr	r3, [r3, #12]
   1a46c:	61bb      	str	r3, [r7, #24]

        for (size_t i = 0; i < n_kw; i++) {
   1a46e:	2300      	movs	r3, #0
   1a470:	657b      	str	r3, [r7, #84]	; 0x54
   1a472:	e059      	b.n	1a528 <mp_setup_code_state+0x2a2>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   1a474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a476:	00db      	lsls	r3, r3, #3
   1a478:	69fa      	ldr	r2, [r7, #28]
   1a47a:	4413      	add	r3, r2
   1a47c:	681b      	ldr	r3, [r3, #0]
   1a47e:	617b      	str	r3, [r7, #20]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a480:	2300      	movs	r3, #0
   1a482:	653b      	str	r3, [r7, #80]	; 0x50
   1a484:	e030      	b.n	1a4e8 <mp_setup_code_state+0x262>
                if (wanted_arg_name == arg_names[j]) {
   1a486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a488:	009b      	lsls	r3, r3, #2
   1a48a:	69ba      	ldr	r2, [r7, #24]
   1a48c:	4413      	add	r3, r2
   1a48e:	681a      	ldr	r2, [r3, #0]
   1a490:	697b      	ldr	r3, [r7, #20]
   1a492:	429a      	cmp	r2, r3
   1a494:	d125      	bne.n	1a4e2 <mp_setup_code_state+0x25c>
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   1a496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a49a:	1ad3      	subs	r3, r2, r3
   1a49c:	3b01      	subs	r3, #1
   1a49e:	68fa      	ldr	r2, [r7, #12]
   1a4a0:	3304      	adds	r3, #4
   1a4a2:	009b      	lsls	r3, r3, #2
   1a4a4:	4413      	add	r3, r2
   1a4a6:	685b      	ldr	r3, [r3, #4]
   1a4a8:	2b00      	cmp	r3, #0
   1a4aa:	d00a      	beq.n	1a4c2 <mp_setup_code_state+0x23c>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a4ac:	697b      	ldr	r3, [r7, #20]
   1a4ae:	089b      	lsrs	r3, r3, #2
   1a4b0:	461a      	mov	r2, r3
   1a4b2:	4962      	ldr	r1, [pc, #392]	; (1a63c <mp_setup_code_state+0x3b6>)
   1a4b4:	4862      	ldr	r0, [pc, #392]	; (1a640 <mp_setup_code_state+0x3ba>)
   1a4b6:	f7f4 ffa3 	bl	f400 <mp_obj_new_exception_msg_varg>
   1a4ba:	4603      	mov	r3, r0
   1a4bc:	4618      	mov	r0, r3
   1a4be:	f7e5 ff0f 	bl	2e0 <nlr_jump>
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   1a4c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a4c6:	1ad3      	subs	r3, r2, r3
   1a4c8:	3b01      	subs	r3, #1
   1a4ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a4cc:	00d2      	lsls	r2, r2, #3
   1a4ce:	3204      	adds	r2, #4
   1a4d0:	69f9      	ldr	r1, [r7, #28]
   1a4d2:	440a      	add	r2, r1
   1a4d4:	6812      	ldr	r2, [r2, #0]
   1a4d6:	68f9      	ldr	r1, [r7, #12]
   1a4d8:	3304      	adds	r3, #4
   1a4da:	009b      	lsls	r3, r3, #2
   1a4dc:	440b      	add	r3, r1
   1a4de:	605a      	str	r2, [r3, #4]
                    goto continue2;
   1a4e0:	e01f      	b.n	1a522 <mp_setup_code_state+0x29c>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a4e4:	3301      	adds	r3, #1
   1a4e6:	653b      	str	r3, [r7, #80]	; 0x50
   1a4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a4ec:	441a      	add	r2, r3
   1a4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a4f0:	429a      	cmp	r2, r3
   1a4f2:	d8c8      	bhi.n	1a486 <mp_setup_code_state+0x200>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   1a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a4f6:	f003 0302 	and.w	r3, r3, #2
   1a4fa:	2b00      	cmp	r3, #0
   1a4fc:	d102      	bne.n	1a504 <mp_setup_code_state+0x27e>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    mp_raise_TypeError("unexpected keyword argument");
   1a4fe:	4851      	ldr	r0, [pc, #324]	; (1a644 <mp_setup_code_state+0x3be>)
   1a500:	f7f2 fcdc 	bl	cebc <mp_raise_TypeError>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   1a504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a506:	00db      	lsls	r3, r3, #3
   1a508:	69fa      	ldr	r2, [r7, #28]
   1a50a:	4413      	add	r3, r2
   1a50c:	6819      	ldr	r1, [r3, #0]
   1a50e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a510:	00db      	lsls	r3, r3, #3
   1a512:	3304      	adds	r3, #4
   1a514:	69fa      	ldr	r2, [r7, #28]
   1a516:	4413      	add	r3, r2
   1a518:	681b      	ldr	r3, [r3, #0]
   1a51a:	461a      	mov	r2, r3
   1a51c:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1a51e:	f7f4 fd68 	bl	eff2 <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   1a522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a524:	3301      	adds	r3, #1
   1a526:	657b      	str	r3, [r7, #84]	; 0x54
   1a528:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a52a:	687b      	ldr	r3, [r7, #4]
   1a52c:	429a      	cmp	r2, r3
   1a52e:	d3a1      	bcc.n	1a474 <mp_setup_code_state+0x1ee>

        DEBUG_printf("Args with kws flattened: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   1a530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a534:	1ad3      	subs	r3, r2, r3
   1a536:	3304      	adds	r3, #4
   1a538:	009b      	lsls	r3, r3, #2
   1a53a:	68fa      	ldr	r2, [r7, #12]
   1a53c:	4413      	add	r3, r2
   1a53e:	3304      	adds	r3, #4
   1a540:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   1a542:	6a3b      	ldr	r3, [r7, #32]
   1a544:	3b01      	subs	r3, #1
   1a546:	3304      	adds	r3, #4
   1a548:	009b      	lsls	r3, r3, #2
   1a54a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a54c:	4413      	add	r3, r2
   1a54e:	64bb      	str	r3, [r7, #72]	; 0x48
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a550:	6a3b      	ldr	r3, [r7, #32]
   1a552:	647b      	str	r3, [r7, #68]	; 0x44
   1a554:	e010      	b.n	1a578 <mp_setup_code_state+0x2f2>
            if (*d == MP_OBJ_NULL) {
   1a556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a558:	681b      	ldr	r3, [r3, #0]
   1a55a:	2b00      	cmp	r3, #0
   1a55c:	d103      	bne.n	1a566 <mp_setup_code_state+0x2e0>
                *d = *s;
   1a55e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a560:	681a      	ldr	r2, [r3, #0]
   1a562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a564:	601a      	str	r2, [r3, #0]
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a568:	3b01      	subs	r3, #1
   1a56a:	647b      	str	r3, [r7, #68]	; 0x44
   1a56c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a56e:	3304      	adds	r3, #4
   1a570:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a574:	3b04      	subs	r3, #4
   1a576:	64bb      	str	r3, [r7, #72]	; 0x48
   1a578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a57a:	2b00      	cmp	r3, #0
   1a57c:	d1eb      	bne.n	1a556 <mp_setup_code_state+0x2d0>

        DEBUG_printf("Args after filling default positional: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
   1a57e:	e018      	b.n	1a5b2 <mp_setup_code_state+0x32c>
            if (*d++ == MP_OBJ_NULL) {
   1a580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a582:	1d1a      	adds	r2, r3, #4
   1a584:	64fa      	str	r2, [r7, #76]	; 0x4c
   1a586:	681b      	ldr	r3, [r3, #0]
   1a588:	2b00      	cmp	r3, #0
   1a58a:	d112      	bne.n	1a5b2 <mp_setup_code_state+0x32c>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a58e:	3304      	adds	r3, #4
   1a590:	009b      	lsls	r3, r3, #2
   1a592:	68fa      	ldr	r2, [r7, #12]
   1a594:	4413      	add	r3, r2
   1a596:	3304      	adds	r3, #4
   1a598:	461a      	mov	r2, r3
   1a59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a59c:	1ad3      	subs	r3, r2, r3
   1a59e:	109b      	asrs	r3, r3, #2
   1a5a0:	461a      	mov	r2, r3
   1a5a2:	4929      	ldr	r1, [pc, #164]	; (1a648 <mp_setup_code_state+0x3c2>)
   1a5a4:	4826      	ldr	r0, [pc, #152]	; (1a640 <mp_setup_code_state+0x3ba>)
   1a5a6:	f7f4 ff2b 	bl	f400 <mp_obj_new_exception_msg_varg>
   1a5aa:	4603      	mov	r3, r0
   1a5ac:	4618      	mov	r0, r3
   1a5ae:	f7e5 fe97 	bl	2e0 <nlr_jump>
        while (d < &code_state->state[n_state]) {
   1a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5b4:	3304      	adds	r3, #4
   1a5b6:	009b      	lsls	r3, r3, #2
   1a5b8:	68fa      	ldr	r2, [r7, #12]
   1a5ba:	4413      	add	r3, r2
   1a5bc:	1d1a      	adds	r2, r3, #4
   1a5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a5c0:	429a      	cmp	r2, r3
   1a5c2:	d8dd      	bhi.n	1a580 <mp_setup_code_state+0x2fa>
            }
        }

        // Check that all mandatory keyword args are specified
        // Fill in default kw args if we have them
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a5c4:	2300      	movs	r3, #0
   1a5c6:	643b      	str	r3, [r7, #64]	; 0x40
   1a5c8:	e054      	b.n	1a674 <mp_setup_code_state+0x3ee>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   1a5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5ce:	1ad2      	subs	r2, r2, r3
   1a5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a5d2:	1ad3      	subs	r3, r2, r3
   1a5d4:	3b01      	subs	r3, #1
   1a5d6:	68fa      	ldr	r2, [r7, #12]
   1a5d8:	3304      	adds	r3, #4
   1a5da:	009b      	lsls	r3, r3, #2
   1a5dc:	4413      	add	r3, r2
   1a5de:	685b      	ldr	r3, [r3, #4]
   1a5e0:	2b00      	cmp	r3, #0
   1a5e2:	d144      	bne.n	1a66e <mp_setup_code_state+0x3e8>
                mp_map_elem_t *elem = NULL;
   1a5e4:	2300      	movs	r3, #0
   1a5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a5ea:	f003 0308 	and.w	r3, r3, #8
   1a5ee:	2b00      	cmp	r3, #0
   1a5f0:	d011      	beq.n	1a616 <mp_setup_code_state+0x390>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   1a5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a5f4:	6a3a      	ldr	r2, [r7, #32]
   1a5f6:	3204      	adds	r2, #4
   1a5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a5fc:	1d18      	adds	r0, r3, #4
   1a5fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a602:	4413      	add	r3, r2
   1a604:	009b      	lsls	r3, r3, #2
   1a606:	69ba      	ldr	r2, [r7, #24]
   1a608:	4413      	add	r3, r2
   1a60a:	681b      	ldr	r3, [r3, #0]
   1a60c:	2200      	movs	r2, #0
   1a60e:	4619      	mov	r1, r3
   1a610:	f7f2 fec0 	bl	d394 <mp_map_lookup>
   1a614:	63f8      	str	r0, [r7, #60]	; 0x3c
                }
                if (elem != NULL) {
   1a616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a618:	2b00      	cmp	r3, #0
   1a61a:	d017      	beq.n	1a64c <mp_setup_code_state+0x3c6>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   1a61c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a620:	1ad2      	subs	r2, r2, r3
   1a622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a624:	1ad3      	subs	r3, r2, r3
   1a626:	3b01      	subs	r3, #1
   1a628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a62a:	6852      	ldr	r2, [r2, #4]
   1a62c:	68f9      	ldr	r1, [r7, #12]
   1a62e:	3304      	adds	r3, #4
   1a630:	009b      	lsls	r3, r3, #2
   1a632:	440b      	add	r3, r1
   1a634:	605a      	str	r2, [r3, #4]
   1a636:	e01a      	b.n	1a66e <mp_setup_code_state+0x3e8>
   1a638:	000234c4 	.word	0x000234c4
   1a63c:	00024244 	.word	0x00024244
   1a640:	00021e1c 	.word	0x00021e1c
   1a644:	00024274 	.word	0x00024274
   1a648:	00024290 	.word	0x00024290
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a64c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a64e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a650:	4413      	add	r3, r2
   1a652:	009b      	lsls	r3, r3, #2
   1a654:	69ba      	ldr	r2, [r7, #24]
   1a656:	4413      	add	r3, r2
   1a658:	681b      	ldr	r3, [r3, #0]
   1a65a:	089b      	lsrs	r3, r3, #2
   1a65c:	461a      	mov	r2, r3
   1a65e:	4928      	ldr	r1, [pc, #160]	; (1a700 <mp_setup_code_state+0x47a>)
   1a660:	4828      	ldr	r0, [pc, #160]	; (1a704 <mp_setup_code_state+0x47e>)
   1a662:	f7f4 fecd 	bl	f400 <mp_obj_new_exception_msg_varg>
   1a666:	4603      	mov	r3, r0
   1a668:	4618      	mov	r0, r3
   1a66a:	f7e5 fe39 	bl	2e0 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a670:	3301      	adds	r3, #1
   1a672:	643b      	str	r3, [r7, #64]	; 0x40
   1a674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a678:	429a      	cmp	r2, r3
   1a67a:	d3a6      	bcc.n	1a5ca <mp_setup_code_state+0x344>
    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a67c:	e010      	b.n	1a6a0 <mp_setup_code_state+0x41a>
            }
        }

    } else {
        // no keyword arguments given
        if (n_kwonly_args != 0) {
   1a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a680:	2b00      	cmp	r3, #0
   1a682:	d002      	beq.n	1a68a <mp_setup_code_state+0x404>
            mp_raise_TypeError("function missing keyword-only argument");
   1a684:	4820      	ldr	r0, [pc, #128]	; (1a708 <mp_setup_code_state+0x482>)
   1a686:	f7f2 fc19 	bl	cebc <mp_raise_TypeError>
        }
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a68c:	f003 0302 	and.w	r3, r3, #2
   1a690:	2b00      	cmp	r3, #0
   1a692:	d005      	beq.n	1a6a0 <mp_setup_code_state+0x41a>
            *var_pos_kw_args = mp_obj_new_dict(0);
   1a694:	2000      	movs	r0, #0
   1a696:	f7f4 fc8b 	bl	efb0 <mp_obj_new_dict>
   1a69a:	4602      	mov	r2, r0
   1a69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a69e:	601a      	str	r2, [r3, #0]
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   1a6a0:	68fb      	ldr	r3, [r7, #12]
   1a6a2:	685b      	ldr	r3, [r3, #4]
   1a6a4:	63bb      	str	r3, [r7, #56]	; 0x38

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   1a6a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a6a8:	f7ff fdc5 	bl	1a236 <mp_decode_uint_value>
   1a6ac:	4602      	mov	r2, r0
   1a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a6b0:	4413      	add	r3, r2
   1a6b2:	63bb      	str	r3, [r7, #56]	; 0x38

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   1a6b4:	e015      	b.n	1a6e2 <mp_setup_code_state+0x45c>
        code_state->state[n_state - 1 - local_num] =
   1a6b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a6b8:	693b      	ldr	r3, [r7, #16]
   1a6ba:	1ad3      	subs	r3, r2, r3
   1a6bc:	1e5c      	subs	r4, r3, #1
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   1a6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a6c0:	693b      	ldr	r3, [r7, #16]
   1a6c2:	1ad3      	subs	r3, r2, r3
   1a6c4:	3b01      	subs	r3, #1
   1a6c6:	68fa      	ldr	r2, [r7, #12]
   1a6c8:	3304      	adds	r3, #4
   1a6ca:	009b      	lsls	r3, r3, #2
   1a6cc:	4413      	add	r3, r2
   1a6ce:	685b      	ldr	r3, [r3, #4]
   1a6d0:	4618      	mov	r0, r3
   1a6d2:	f7f3 fd65 	bl	e1a0 <mp_obj_new_cell>
   1a6d6:	4601      	mov	r1, r0
        code_state->state[n_state - 1 - local_num] =
   1a6d8:	68fa      	ldr	r2, [r7, #12]
   1a6da:	1d23      	adds	r3, r4, #4
   1a6dc:	009b      	lsls	r3, r3, #2
   1a6de:	4413      	add	r3, r2
   1a6e0:	6059      	str	r1, [r3, #4]
    while ((local_num = *ip++) != 255) {
   1a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a6e4:	1c5a      	adds	r2, r3, #1
   1a6e6:	63ba      	str	r2, [r7, #56]	; 0x38
   1a6e8:	781b      	ldrb	r3, [r3, #0]
   1a6ea:	613b      	str	r3, [r7, #16]
   1a6ec:	693b      	ldr	r3, [r7, #16]
   1a6ee:	2bff      	cmp	r3, #255	; 0xff
   1a6f0:	d1e1      	bne.n	1a6b6 <mp_setup_code_state+0x430>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   1a6f2:	68fb      	ldr	r3, [r7, #12]
   1a6f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1a6f6:	605a      	str	r2, [r3, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
    dump_args(code_state->state, n_state);
}
   1a6f8:	bf00      	nop
   1a6fa:	376c      	adds	r7, #108	; 0x6c
   1a6fc:	46bd      	mov	sp, r7
   1a6fe:	bd90      	pop	{r4, r7, pc}
   1a700:	000242c4 	.word	0x000242c4
   1a704:	00021e1c 	.word	0x00021e1c
   1a708:	000242f4 	.word	0x000242f4

0001a70c <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   1a70c:	b580      	push	{r7, lr}
   1a70e:	b084      	sub	sp, #16
   1a710:	af00      	add	r7, sp, #0
   1a712:	6078      	str	r0, [r7, #4]
   1a714:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   1a716:	2300      	movs	r3, #0
   1a718:	60fb      	str	r3, [r7, #12]
   1a71a:	e00e      	b.n	1a73a <str_startswith_word+0x2e>
        if (str[i] != head[i]) {
   1a71c:	687a      	ldr	r2, [r7, #4]
   1a71e:	68fb      	ldr	r3, [r7, #12]
   1a720:	4413      	add	r3, r2
   1a722:	781a      	ldrb	r2, [r3, #0]
   1a724:	6839      	ldr	r1, [r7, #0]
   1a726:	68fb      	ldr	r3, [r7, #12]
   1a728:	440b      	add	r3, r1
   1a72a:	781b      	ldrb	r3, [r3, #0]
   1a72c:	429a      	cmp	r2, r3
   1a72e:	d001      	beq.n	1a734 <str_startswith_word+0x28>
            return false;
   1a730:	2300      	movs	r3, #0
   1a732:	e02d      	b.n	1a790 <str_startswith_word+0x84>
    for (i = 0; str[i] && head[i]; i++) {
   1a734:	68fb      	ldr	r3, [r7, #12]
   1a736:	3301      	adds	r3, #1
   1a738:	60fb      	str	r3, [r7, #12]
   1a73a:	687a      	ldr	r2, [r7, #4]
   1a73c:	68fb      	ldr	r3, [r7, #12]
   1a73e:	4413      	add	r3, r2
   1a740:	781b      	ldrb	r3, [r3, #0]
   1a742:	2b00      	cmp	r3, #0
   1a744:	d005      	beq.n	1a752 <str_startswith_word+0x46>
   1a746:	683a      	ldr	r2, [r7, #0]
   1a748:	68fb      	ldr	r3, [r7, #12]
   1a74a:	4413      	add	r3, r2
   1a74c:	781b      	ldrb	r3, [r3, #0]
   1a74e:	2b00      	cmp	r3, #0
   1a750:	d1e4      	bne.n	1a71c <str_startswith_word+0x10>
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   1a752:	683a      	ldr	r2, [r7, #0]
   1a754:	68fb      	ldr	r3, [r7, #12]
   1a756:	4413      	add	r3, r2
   1a758:	781b      	ldrb	r3, [r3, #0]
   1a75a:	2b00      	cmp	r3, #0
   1a75c:	d114      	bne.n	1a788 <str_startswith_word+0x7c>
   1a75e:	687a      	ldr	r2, [r7, #4]
   1a760:	68fb      	ldr	r3, [r7, #12]
   1a762:	4413      	add	r3, r2
   1a764:	781b      	ldrb	r3, [r3, #0]
   1a766:	2b00      	cmp	r3, #0
   1a768:	d00c      	beq.n	1a784 <str_startswith_word+0x78>
   1a76a:	687a      	ldr	r2, [r7, #4]
   1a76c:	68fb      	ldr	r3, [r7, #12]
   1a76e:	4413      	add	r3, r2
   1a770:	781b      	ldrb	r3, [r3, #0]
   1a772:	4618      	mov	r0, r3
   1a774:	f7e7 fe72 	bl	245c <unichar_isident>
   1a778:	4603      	mov	r3, r0
   1a77a:	f083 0301 	eor.w	r3, r3, #1
   1a77e:	b2db      	uxtb	r3, r3
   1a780:	2b00      	cmp	r3, #0
   1a782:	d001      	beq.n	1a788 <str_startswith_word+0x7c>
   1a784:	2301      	movs	r3, #1
   1a786:	e000      	b.n	1a78a <str_startswith_word+0x7e>
   1a788:	2300      	movs	r3, #0
   1a78a:	f003 0301 	and.w	r3, r3, #1
   1a78e:	b2db      	uxtb	r3, r3
}
   1a790:	4618      	mov	r0, r3
   1a792:	3710      	adds	r7, #16
   1a794:	46bd      	mov	sp, r7
   1a796:	bd80      	pop	{r7, pc}

0001a798 <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   1a798:	b580      	push	{r7, lr}
   1a79a:	b088      	sub	sp, #32
   1a79c:	af00      	add	r7, sp, #0
   1a79e:	6078      	str	r0, [r7, #4]
    // check for blank input
    if (input[0] == '\0') {
   1a7a0:	687b      	ldr	r3, [r7, #4]
   1a7a2:	781b      	ldrb	r3, [r3, #0]
   1a7a4:	2b00      	cmp	r3, #0
   1a7a6:	d101      	bne.n	1a7ac <mp_repl_continue_with_input+0x14>
        return false;
   1a7a8:	2300      	movs	r3, #0
   1a7aa:	e10c      	b.n	1a9c6 <mp_repl_continue_with_input+0x22e>
    }

    // check if input starts with a certain keyword
    bool starts_with_compound_keyword =
           input[0] == '@'
   1a7ac:	687b      	ldr	r3, [r7, #4]
   1a7ae:	781b      	ldrb	r3, [r3, #0]
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   1a7b0:	2b40      	cmp	r3, #64	; 0x40
   1a7b2:	d030      	beq.n	1a816 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "if")
   1a7b4:	4986      	ldr	r1, [pc, #536]	; (1a9d0 <mp_repl_continue_with_input+0x238>)
   1a7b6:	6878      	ldr	r0, [r7, #4]
   1a7b8:	f7ff ffa8 	bl	1a70c <str_startswith_word>
   1a7bc:	4603      	mov	r3, r0
   1a7be:	2b00      	cmp	r3, #0
   1a7c0:	d129      	bne.n	1a816 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "while")
   1a7c2:	4984      	ldr	r1, [pc, #528]	; (1a9d4 <mp_repl_continue_with_input+0x23c>)
   1a7c4:	6878      	ldr	r0, [r7, #4]
   1a7c6:	f7ff ffa1 	bl	1a70c <str_startswith_word>
   1a7ca:	4603      	mov	r3, r0
   1a7cc:	2b00      	cmp	r3, #0
   1a7ce:	d122      	bne.n	1a816 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "for")
   1a7d0:	4981      	ldr	r1, [pc, #516]	; (1a9d8 <mp_repl_continue_with_input+0x240>)
   1a7d2:	6878      	ldr	r0, [r7, #4]
   1a7d4:	f7ff ff9a 	bl	1a70c <str_startswith_word>
   1a7d8:	4603      	mov	r3, r0
   1a7da:	2b00      	cmp	r3, #0
   1a7dc:	d11b      	bne.n	1a816 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "try")
   1a7de:	497f      	ldr	r1, [pc, #508]	; (1a9dc <mp_repl_continue_with_input+0x244>)
   1a7e0:	6878      	ldr	r0, [r7, #4]
   1a7e2:	f7ff ff93 	bl	1a70c <str_startswith_word>
   1a7e6:	4603      	mov	r3, r0
   1a7e8:	2b00      	cmp	r3, #0
   1a7ea:	d114      	bne.n	1a816 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "with")
   1a7ec:	497c      	ldr	r1, [pc, #496]	; (1a9e0 <mp_repl_continue_with_input+0x248>)
   1a7ee:	6878      	ldr	r0, [r7, #4]
   1a7f0:	f7ff ff8c 	bl	1a70c <str_startswith_word>
   1a7f4:	4603      	mov	r3, r0
   1a7f6:	2b00      	cmp	r3, #0
   1a7f8:	d10d      	bne.n	1a816 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "def")
   1a7fa:	497a      	ldr	r1, [pc, #488]	; (1a9e4 <mp_repl_continue_with_input+0x24c>)
   1a7fc:	6878      	ldr	r0, [r7, #4]
   1a7fe:	f7ff ff85 	bl	1a70c <str_startswith_word>
   1a802:	4603      	mov	r3, r0
   1a804:	2b00      	cmp	r3, #0
   1a806:	d106      	bne.n	1a816 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "class")
   1a808:	4977      	ldr	r1, [pc, #476]	; (1a9e8 <mp_repl_continue_with_input+0x250>)
   1a80a:	6878      	ldr	r0, [r7, #4]
   1a80c:	f7ff ff7e 	bl	1a70c <str_startswith_word>
   1a810:	4603      	mov	r3, r0
   1a812:	2b00      	cmp	r3, #0
   1a814:	d001      	beq.n	1a81a <mp_repl_continue_with_input+0x82>
   1a816:	2301      	movs	r3, #1
   1a818:	e000      	b.n	1a81c <mp_repl_continue_with_input+0x84>
   1a81a:	2300      	movs	r3, #0
    bool starts_with_compound_keyword =
   1a81c:	72fb      	strb	r3, [r7, #11]
   1a81e:	7afb      	ldrb	r3, [r7, #11]
   1a820:	f003 0301 	and.w	r3, r3, #1
   1a824:	72fb      	strb	r3, [r7, #11]
    #define Q_NONE (0)
    #define Q_1_SINGLE (1)
    #define Q_1_DOUBLE (2)
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
   1a826:	2300      	movs	r3, #0
   1a828:	61fb      	str	r3, [r7, #28]
    int n_brack = 0;
   1a82a:	2300      	movs	r3, #0
   1a82c:	61bb      	str	r3, [r7, #24]
    int n_brace = 0;
   1a82e:	2300      	movs	r3, #0
   1a830:	617b      	str	r3, [r7, #20]
    int in_quote = Q_NONE;
   1a832:	2300      	movs	r3, #0
   1a834:	613b      	str	r3, [r7, #16]
    const char *i;
    for (i = input; *i; i++) {
   1a836:	687b      	ldr	r3, [r7, #4]
   1a838:	60fb      	str	r3, [r7, #12]
   1a83a:	e097      	b.n	1a96c <mp_repl_continue_with_input+0x1d4>
        if (*i == '\'') {
   1a83c:	68fb      	ldr	r3, [r7, #12]
   1a83e:	781b      	ldrb	r3, [r3, #0]
   1a840:	2b27      	cmp	r3, #39	; 0x27
   1a842:	d122      	bne.n	1a88a <mp_repl_continue_with_input+0xf2>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   1a844:	693b      	ldr	r3, [r7, #16]
   1a846:	2b00      	cmp	r3, #0
   1a848:	d002      	beq.n	1a850 <mp_repl_continue_with_input+0xb8>
   1a84a:	693b      	ldr	r3, [r7, #16]
   1a84c:	2b03      	cmp	r3, #3
   1a84e:	d111      	bne.n	1a874 <mp_repl_continue_with_input+0xdc>
   1a850:	68fb      	ldr	r3, [r7, #12]
   1a852:	3301      	adds	r3, #1
   1a854:	781b      	ldrb	r3, [r3, #0]
   1a856:	2b27      	cmp	r3, #39	; 0x27
   1a858:	d10c      	bne.n	1a874 <mp_repl_continue_with_input+0xdc>
   1a85a:	68fb      	ldr	r3, [r7, #12]
   1a85c:	3302      	adds	r3, #2
   1a85e:	781b      	ldrb	r3, [r3, #0]
   1a860:	2b27      	cmp	r3, #39	; 0x27
   1a862:	d107      	bne.n	1a874 <mp_repl_continue_with_input+0xdc>
                i += 2;
   1a864:	68fb      	ldr	r3, [r7, #12]
   1a866:	3302      	adds	r3, #2
   1a868:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_SINGLE - in_quote;
   1a86a:	693b      	ldr	r3, [r7, #16]
   1a86c:	f1c3 0303 	rsb	r3, r3, #3
   1a870:	613b      	str	r3, [r7, #16]
   1a872:	e078      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   1a874:	693b      	ldr	r3, [r7, #16]
   1a876:	2b00      	cmp	r3, #0
   1a878:	d002      	beq.n	1a880 <mp_repl_continue_with_input+0xe8>
   1a87a:	693b      	ldr	r3, [r7, #16]
   1a87c:	2b01      	cmp	r3, #1
   1a87e:	d172      	bne.n	1a966 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_SINGLE - in_quote;
   1a880:	693b      	ldr	r3, [r7, #16]
   1a882:	f1c3 0301 	rsb	r3, r3, #1
   1a886:	613b      	str	r3, [r7, #16]
   1a888:	e06d      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '"') {
   1a88a:	68fb      	ldr	r3, [r7, #12]
   1a88c:	781b      	ldrb	r3, [r3, #0]
   1a88e:	2b22      	cmp	r3, #34	; 0x22
   1a890:	d122      	bne.n	1a8d8 <mp_repl_continue_with_input+0x140>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   1a892:	693b      	ldr	r3, [r7, #16]
   1a894:	2b00      	cmp	r3, #0
   1a896:	d002      	beq.n	1a89e <mp_repl_continue_with_input+0x106>
   1a898:	693b      	ldr	r3, [r7, #16]
   1a89a:	2b04      	cmp	r3, #4
   1a89c:	d111      	bne.n	1a8c2 <mp_repl_continue_with_input+0x12a>
   1a89e:	68fb      	ldr	r3, [r7, #12]
   1a8a0:	3301      	adds	r3, #1
   1a8a2:	781b      	ldrb	r3, [r3, #0]
   1a8a4:	2b22      	cmp	r3, #34	; 0x22
   1a8a6:	d10c      	bne.n	1a8c2 <mp_repl_continue_with_input+0x12a>
   1a8a8:	68fb      	ldr	r3, [r7, #12]
   1a8aa:	3302      	adds	r3, #2
   1a8ac:	781b      	ldrb	r3, [r3, #0]
   1a8ae:	2b22      	cmp	r3, #34	; 0x22
   1a8b0:	d107      	bne.n	1a8c2 <mp_repl_continue_with_input+0x12a>
                i += 2;
   1a8b2:	68fb      	ldr	r3, [r7, #12]
   1a8b4:	3302      	adds	r3, #2
   1a8b6:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_DOUBLE - in_quote;
   1a8b8:	693b      	ldr	r3, [r7, #16]
   1a8ba:	f1c3 0304 	rsb	r3, r3, #4
   1a8be:	613b      	str	r3, [r7, #16]
   1a8c0:	e051      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   1a8c2:	693b      	ldr	r3, [r7, #16]
   1a8c4:	2b00      	cmp	r3, #0
   1a8c6:	d002      	beq.n	1a8ce <mp_repl_continue_with_input+0x136>
   1a8c8:	693b      	ldr	r3, [r7, #16]
   1a8ca:	2b02      	cmp	r3, #2
   1a8cc:	d14b      	bne.n	1a966 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_DOUBLE - in_quote;
   1a8ce:	693b      	ldr	r3, [r7, #16]
   1a8d0:	f1c3 0302 	rsb	r3, r3, #2
   1a8d4:	613b      	str	r3, [r7, #16]
   1a8d6:	e046      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   1a8d8:	68fb      	ldr	r3, [r7, #12]
   1a8da:	781b      	ldrb	r3, [r3, #0]
   1a8dc:	2b5c      	cmp	r3, #92	; 0x5c
   1a8de:	d115      	bne.n	1a90c <mp_repl_continue_with_input+0x174>
   1a8e0:	68fb      	ldr	r3, [r7, #12]
   1a8e2:	3301      	adds	r3, #1
   1a8e4:	781b      	ldrb	r3, [r3, #0]
   1a8e6:	2b27      	cmp	r3, #39	; 0x27
   1a8e8:	d009      	beq.n	1a8fe <mp_repl_continue_with_input+0x166>
   1a8ea:	68fb      	ldr	r3, [r7, #12]
   1a8ec:	3301      	adds	r3, #1
   1a8ee:	781b      	ldrb	r3, [r3, #0]
   1a8f0:	2b22      	cmp	r3, #34	; 0x22
   1a8f2:	d004      	beq.n	1a8fe <mp_repl_continue_with_input+0x166>
   1a8f4:	68fb      	ldr	r3, [r7, #12]
   1a8f6:	3301      	adds	r3, #1
   1a8f8:	781b      	ldrb	r3, [r3, #0]
   1a8fa:	2b5c      	cmp	r3, #92	; 0x5c
   1a8fc:	d106      	bne.n	1a90c <mp_repl_continue_with_input+0x174>
            if (in_quote != Q_NONE) {
   1a8fe:	693b      	ldr	r3, [r7, #16]
   1a900:	2b00      	cmp	r3, #0
   1a902:	d030      	beq.n	1a966 <mp_repl_continue_with_input+0x1ce>
                i++;
   1a904:	68fb      	ldr	r3, [r7, #12]
   1a906:	3301      	adds	r3, #1
   1a908:	60fb      	str	r3, [r7, #12]
            if (in_quote != Q_NONE) {
   1a90a:	e02c      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (in_quote == Q_NONE) {
   1a90c:	693b      	ldr	r3, [r7, #16]
   1a90e:	2b00      	cmp	r3, #0
   1a910:	d129      	bne.n	1a966 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1a912:	68fb      	ldr	r3, [r7, #12]
   1a914:	781b      	ldrb	r3, [r3, #0]
   1a916:	2b5b      	cmp	r3, #91	; 0x5b
   1a918:	d015      	beq.n	1a946 <mp_repl_continue_with_input+0x1ae>
   1a91a:	2b5b      	cmp	r3, #91	; 0x5b
   1a91c:	dc04      	bgt.n	1a928 <mp_repl_continue_with_input+0x190>
   1a91e:	2b28      	cmp	r3, #40	; 0x28
   1a920:	d009      	beq.n	1a936 <mp_repl_continue_with_input+0x19e>
   1a922:	2b29      	cmp	r3, #41	; 0x29
   1a924:	d00b      	beq.n	1a93e <mp_repl_continue_with_input+0x1a6>
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
                case '{': n_brace += 1; break;
                case '}': n_brace -= 1; break;
                default: break;
   1a926:	e01e      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1a928:	2b7b      	cmp	r3, #123	; 0x7b
   1a92a:	d014      	beq.n	1a956 <mp_repl_continue_with_input+0x1be>
   1a92c:	2b7d      	cmp	r3, #125	; 0x7d
   1a92e:	d016      	beq.n	1a95e <mp_repl_continue_with_input+0x1c6>
   1a930:	2b5d      	cmp	r3, #93	; 0x5d
   1a932:	d00c      	beq.n	1a94e <mp_repl_continue_with_input+0x1b6>
                default: break;
   1a934:	e017      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
                case '(': n_paren += 1; break;
   1a936:	69fb      	ldr	r3, [r7, #28]
   1a938:	3301      	adds	r3, #1
   1a93a:	61fb      	str	r3, [r7, #28]
   1a93c:	e013      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
                case ')': n_paren -= 1; break;
   1a93e:	69fb      	ldr	r3, [r7, #28]
   1a940:	3b01      	subs	r3, #1
   1a942:	61fb      	str	r3, [r7, #28]
   1a944:	e00f      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
                case '[': n_brack += 1; break;
   1a946:	69bb      	ldr	r3, [r7, #24]
   1a948:	3301      	adds	r3, #1
   1a94a:	61bb      	str	r3, [r7, #24]
   1a94c:	e00b      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
                case ']': n_brack -= 1; break;
   1a94e:	69bb      	ldr	r3, [r7, #24]
   1a950:	3b01      	subs	r3, #1
   1a952:	61bb      	str	r3, [r7, #24]
   1a954:	e007      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
                case '{': n_brace += 1; break;
   1a956:	697b      	ldr	r3, [r7, #20]
   1a958:	3301      	adds	r3, #1
   1a95a:	617b      	str	r3, [r7, #20]
   1a95c:	e003      	b.n	1a966 <mp_repl_continue_with_input+0x1ce>
                case '}': n_brace -= 1; break;
   1a95e:	697b      	ldr	r3, [r7, #20]
   1a960:	3b01      	subs	r3, #1
   1a962:	617b      	str	r3, [r7, #20]
   1a964:	bf00      	nop
    for (i = input; *i; i++) {
   1a966:	68fb      	ldr	r3, [r7, #12]
   1a968:	3301      	adds	r3, #1
   1a96a:	60fb      	str	r3, [r7, #12]
   1a96c:	68fb      	ldr	r3, [r7, #12]
   1a96e:	781b      	ldrb	r3, [r3, #0]
   1a970:	2b00      	cmp	r3, #0
   1a972:	f47f af63 	bne.w	1a83c <mp_repl_continue_with_input+0xa4>
            }
        }
    }

    // continue if unmatched 3-quotes
    if (in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   1a976:	693b      	ldr	r3, [r7, #16]
   1a978:	2b03      	cmp	r3, #3
   1a97a:	d002      	beq.n	1a982 <mp_repl_continue_with_input+0x1ea>
   1a97c:	693b      	ldr	r3, [r7, #16]
   1a97e:	2b04      	cmp	r3, #4
   1a980:	d101      	bne.n	1a986 <mp_repl_continue_with_input+0x1ee>
        return true;
   1a982:	2301      	movs	r3, #1
   1a984:	e01f      	b.n	1a9c6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if unmatched brackets, but only if not in a 1-quote
    if ((n_paren > 0 || n_brack > 0 || n_brace > 0) && in_quote == Q_NONE) {
   1a986:	69fb      	ldr	r3, [r7, #28]
   1a988:	2b00      	cmp	r3, #0
   1a98a:	dc05      	bgt.n	1a998 <mp_repl_continue_with_input+0x200>
   1a98c:	69bb      	ldr	r3, [r7, #24]
   1a98e:	2b00      	cmp	r3, #0
   1a990:	dc02      	bgt.n	1a998 <mp_repl_continue_with_input+0x200>
   1a992:	697b      	ldr	r3, [r7, #20]
   1a994:	2b00      	cmp	r3, #0
   1a996:	dd04      	ble.n	1a9a2 <mp_repl_continue_with_input+0x20a>
   1a998:	693b      	ldr	r3, [r7, #16]
   1a99a:	2b00      	cmp	r3, #0
   1a99c:	d101      	bne.n	1a9a2 <mp_repl_continue_with_input+0x20a>
        return true;
   1a99e:	2301      	movs	r3, #1
   1a9a0:	e011      	b.n	1a9c6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   1a9a2:	68fb      	ldr	r3, [r7, #12]
   1a9a4:	3b01      	subs	r3, #1
   1a9a6:	781b      	ldrb	r3, [r3, #0]
   1a9a8:	2b5c      	cmp	r3, #92	; 0x5c
   1a9aa:	d101      	bne.n	1a9b0 <mp_repl_continue_with_input+0x218>
        return true;
   1a9ac:	2301      	movs	r3, #1
   1a9ae:	e00a      	b.n	1a9c6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   1a9b0:	7afb      	ldrb	r3, [r7, #11]
   1a9b2:	2b00      	cmp	r3, #0
   1a9b4:	d006      	beq.n	1a9c4 <mp_repl_continue_with_input+0x22c>
   1a9b6:	68fb      	ldr	r3, [r7, #12]
   1a9b8:	3b01      	subs	r3, #1
   1a9ba:	781b      	ldrb	r3, [r3, #0]
   1a9bc:	2b0a      	cmp	r3, #10
   1a9be:	d001      	beq.n	1a9c4 <mp_repl_continue_with_input+0x22c>
        return true;
   1a9c0:	2301      	movs	r3, #1
   1a9c2:	e000      	b.n	1a9c6 <mp_repl_continue_with_input+0x22e>
    }

    // otherwise, don't continue
    return false;
   1a9c4:	2300      	movs	r3, #0
}
   1a9c6:	4618      	mov	r0, r3
   1a9c8:	3720      	adds	r7, #32
   1a9ca:	46bd      	mov	sp, r7
   1a9cc:	bd80      	pop	{r7, pc}
   1a9ce:	bf00      	nop
   1a9d0:	0002431c 	.word	0x0002431c
   1a9d4:	00024320 	.word	0x00024320
   1a9d8:	00024328 	.word	0x00024328
   1a9dc:	0002432c 	.word	0x0002432c
   1a9e0:	00024330 	.word	0x00024330
   1a9e4:	00024338 	.word	0x00024338
   1a9e8:	0002433c 	.word	0x0002433c

0001a9ec <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   1a9ec:	b580      	push	{r7, lr}
   1a9ee:	b09c      	sub	sp, #112	; 0x70
   1a9f0:	af00      	add	r7, sp, #0
   1a9f2:	60f8      	str	r0, [r7, #12]
   1a9f4:	60b9      	str	r1, [r7, #8]
   1a9f6:	607a      	str	r2, [r7, #4]
   1a9f8:	603b      	str	r3, [r7, #0]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
   1a9fa:	68fb      	ldr	r3, [r7, #12]
   1a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    const char *top = str + len;
   1a9fe:	68fa      	ldr	r2, [r7, #12]
   1aa00:	68bb      	ldr	r3, [r7, #8]
   1aa02:	4413      	add	r3, r2
   1aa04:	63bb      	str	r3, [r7, #56]	; 0x38
    for (const char *s = top; --s >= str;) {
   1aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aa08:	66fb      	str	r3, [r7, #108]	; 0x6c
   1aa0a:	e023      	b.n	1aa54 <mp_repl_autocomplete+0x68>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   1aa0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1aa0e:	781b      	ldrb	r3, [r3, #0]
   1aa10:	4618      	mov	r0, r3
   1aa12:	f7e7 fcc9 	bl	23a8 <unichar_isalpha>
   1aa16:	4603      	mov	r3, r0
   1aa18:	f083 0301 	eor.w	r3, r3, #1
   1aa1c:	b2db      	uxtb	r3, r3
   1aa1e:	2b00      	cmp	r3, #0
   1aa20:	d018      	beq.n	1aa54 <mp_repl_autocomplete+0x68>
   1aa22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1aa24:	781b      	ldrb	r3, [r3, #0]
   1aa26:	4618      	mov	r0, r3
   1aa28:	f7e7 fcdc 	bl	23e4 <unichar_isdigit>
   1aa2c:	4603      	mov	r3, r0
   1aa2e:	f083 0301 	eor.w	r3, r3, #1
   1aa32:	b2db      	uxtb	r3, r3
   1aa34:	2b00      	cmp	r3, #0
   1aa36:	d00d      	beq.n	1aa54 <mp_repl_autocomplete+0x68>
   1aa38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1aa3a:	781b      	ldrb	r3, [r3, #0]
   1aa3c:	2b5f      	cmp	r3, #95	; 0x5f
   1aa3e:	d009      	beq.n	1aa54 <mp_repl_autocomplete+0x68>
   1aa40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1aa42:	781b      	ldrb	r3, [r3, #0]
   1aa44:	2b2e      	cmp	r3, #46	; 0x2e
   1aa46:	d005      	beq.n	1aa54 <mp_repl_autocomplete+0x68>
            ++s;
   1aa48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1aa4a:	3301      	adds	r3, #1
   1aa4c:	66fb      	str	r3, [r7, #108]	; 0x6c
            str = s;
   1aa4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1aa50:	60fb      	str	r3, [r7, #12]
            break;
   1aa52:	e006      	b.n	1aa62 <mp_repl_autocomplete+0x76>
    for (const char *s = top; --s >= str;) {
   1aa54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1aa56:	3b01      	subs	r3, #1
   1aa58:	66fb      	str	r3, [r7, #108]	; 0x6c
   1aa5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1aa5c:	68fb      	ldr	r3, [r7, #12]
   1aa5e:	429a      	cmp	r2, r3
   1aa60:	d2d4      	bcs.n	1aa0c <mp_repl_autocomplete+0x20>
        }
    }

    size_t nqstr = QSTR_TOTAL();
   1aa62:	4b95      	ldr	r3, [pc, #596]	; (1acb8 <mp_repl_autocomplete+0x2cc>)
   1aa64:	691b      	ldr	r3, [r3, #16]
   1aa66:	685a      	ldr	r2, [r3, #4]
   1aa68:	4b93      	ldr	r3, [pc, #588]	; (1acb8 <mp_repl_autocomplete+0x2cc>)
   1aa6a:	691b      	ldr	r3, [r3, #16]
   1aa6c:	68db      	ldr	r3, [r3, #12]
   1aa6e:	4413      	add	r3, r2
   1aa70:	637b      	str	r3, [r7, #52]	; 0x34

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   1aa72:	4b92      	ldr	r3, [pc, #584]	; (1acbc <mp_repl_autocomplete+0x2d0>)
   1aa74:	66bb      	str	r3, [r7, #104]	; 0x68
    mp_obj_t dest[2];

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
   1aa76:	68fb      	ldr	r3, [r7, #12]
   1aa78:	633b      	str	r3, [r7, #48]	; 0x30
        while (str < top && *str != '.') {
   1aa7a:	e002      	b.n	1aa82 <mp_repl_autocomplete+0x96>
            ++str;
   1aa7c:	68fb      	ldr	r3, [r7, #12]
   1aa7e:	3301      	adds	r3, #1
   1aa80:	60fb      	str	r3, [r7, #12]
        while (str < top && *str != '.') {
   1aa82:	68fa      	ldr	r2, [r7, #12]
   1aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aa86:	429a      	cmp	r2, r3
   1aa88:	d203      	bcs.n	1aa92 <mp_repl_autocomplete+0xa6>
   1aa8a:	68fb      	ldr	r3, [r7, #12]
   1aa8c:	781b      	ldrb	r3, [r3, #0]
   1aa8e:	2b2e      	cmp	r3, #46	; 0x2e
   1aa90:	d1f4      	bne.n	1aa7c <mp_repl_autocomplete+0x90>
        }
        size_t s_len = str - s_start;
   1aa92:	68fa      	ldr	r2, [r7, #12]
   1aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aa96:	1ad3      	subs	r3, r2, r3
   1aa98:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (str < top) {
   1aa9a:	68fa      	ldr	r2, [r7, #12]
   1aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aa9e:	429a      	cmp	r2, r3
   1aaa0:	d21b      	bcs.n	1aada <mp_repl_autocomplete+0xee>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   1aaa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1aaa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1aaa6:	f7e6 fa67 	bl	f78 <qstr_find_strn>
   1aaaa:	62b8      	str	r0, [r7, #40]	; 0x28
            if (q == MP_QSTR_NULL) {
   1aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aaae:	2b00      	cmp	r3, #0
   1aab0:	d101      	bne.n	1aab6 <mp_repl_autocomplete+0xca>
                // lookup will fail
                return 0;
   1aab2:	2300      	movs	r3, #0
   1aab4:	e0fc      	b.n	1acb0 <mp_repl_autocomplete+0x2c4>
            }
            mp_load_method_protected(obj, q, dest, true);
   1aab6:	f107 0218 	add.w	r2, r7, #24
   1aaba:	2301      	movs	r3, #1
   1aabc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1aabe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1aac0:	f7f1 fe52 	bl	c768 <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   1aac4:	69bb      	ldr	r3, [r7, #24]
   1aac6:	66bb      	str	r3, [r7, #104]	; 0x68

            if (obj == MP_OBJ_NULL) {
   1aac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1aaca:	2b00      	cmp	r3, #0
   1aacc:	d101      	bne.n	1aad2 <mp_repl_autocomplete+0xe6>
                // lookup failed
                return 0;
   1aace:	2300      	movs	r3, #0
   1aad0:	e0ee      	b.n	1acb0 <mp_repl_autocomplete+0x2c4>
            }

            // skip '.' to move to next word
            ++str;
   1aad2:	68fb      	ldr	r3, [r7, #12]
   1aad4:	3301      	adds	r3, #1
   1aad6:	60fb      	str	r3, [r7, #12]
   1aad8:	e7cd      	b.n	1aa76 <mp_repl_autocomplete+0x8a>

        } else {
            // end of string, do completion on this partial name

            // look for matches
            const char *match_str = NULL;
   1aada:	2300      	movs	r3, #0
   1aadc:	667b      	str	r3, [r7, #100]	; 0x64
            size_t match_len = 0;
   1aade:	2300      	movs	r3, #0
   1aae0:	663b      	str	r3, [r7, #96]	; 0x60
            qstr q_first = 0, q_last = 0;
   1aae2:	2300      	movs	r3, #0
   1aae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   1aae6:	2300      	movs	r3, #0
   1aae8:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1aaea:	2302      	movs	r3, #2
   1aaec:	657b      	str	r3, [r7, #84]	; 0x54
   1aaee:	e049      	b.n	1ab84 <mp_repl_autocomplete+0x198>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1aaf0:	f107 0314 	add.w	r3, r7, #20
   1aaf4:	4619      	mov	r1, r3
   1aaf6:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1aaf8:	f7e6 fb88 	bl	120c <qstr_data>
   1aafc:	6278      	str	r0, [r7, #36]	; 0x24
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1aafe:	697b      	ldr	r3, [r7, #20]
   1ab00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ab02:	429a      	cmp	r2, r3
   1ab04:	d83b      	bhi.n	1ab7e <mp_repl_autocomplete+0x192>
   1ab06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ab08:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ab0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ab0c:	f001 feb1 	bl	1c872 <strncmp>
   1ab10:	4603      	mov	r3, r0
   1ab12:	2b00      	cmp	r3, #0
   1ab14:	d133      	bne.n	1ab7e <mp_repl_autocomplete+0x192>
                    mp_load_method_protected(obj, q, dest, true);
   1ab16:	f107 0218 	add.w	r2, r7, #24
   1ab1a:	2301      	movs	r3, #1
   1ab1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1ab1e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1ab20:	f7f1 fe22 	bl	c768 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1ab24:	69bb      	ldr	r3, [r7, #24]
   1ab26:	2b00      	cmp	r3, #0
   1ab28:	d029      	beq.n	1ab7e <mp_repl_autocomplete+0x192>
                        if (match_str == NULL) {
   1ab2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ab2c:	2b00      	cmp	r3, #0
   1ab2e:	d104      	bne.n	1ab3a <mp_repl_autocomplete+0x14e>
                            match_str = d_str;
   1ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab32:	667b      	str	r3, [r7, #100]	; 0x64
                            match_len = d_len;
   1ab34:	697b      	ldr	r3, [r7, #20]
   1ab36:	663b      	str	r3, [r7, #96]	; 0x60
   1ab38:	e01a      	b.n	1ab70 <mp_repl_autocomplete+0x184>
                        } else {
                            // search for longest common prefix of match_str and d_str
                            // (assumes these strings are null-terminated)
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab3c:	653b      	str	r3, [r7, #80]	; 0x50
   1ab3e:	e00f      	b.n	1ab60 <mp_repl_autocomplete+0x174>
                                if (match_str[j] != d_str[j]) {
   1ab40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ab42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab44:	4413      	add	r3, r2
   1ab46:	781a      	ldrb	r2, [r3, #0]
   1ab48:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ab4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab4c:	440b      	add	r3, r1
   1ab4e:	781b      	ldrb	r3, [r3, #0]
   1ab50:	429a      	cmp	r2, r3
   1ab52:	d002      	beq.n	1ab5a <mp_repl_autocomplete+0x16e>
                                    match_len = j;
   1ab54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab56:	663b      	str	r3, [r7, #96]	; 0x60
                                    break;
   1ab58:	e00a      	b.n	1ab70 <mp_repl_autocomplete+0x184>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1ab5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab5c:	3301      	adds	r3, #1
   1ab5e:	653b      	str	r3, [r7, #80]	; 0x50
   1ab60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ab62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ab64:	429a      	cmp	r2, r3
   1ab66:	d803      	bhi.n	1ab70 <mp_repl_autocomplete+0x184>
   1ab68:	697b      	ldr	r3, [r7, #20]
   1ab6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ab6c:	429a      	cmp	r2, r3
   1ab6e:	d9e7      	bls.n	1ab40 <mp_repl_autocomplete+0x154>
                                }
                            }
                        }
                        if (q_first == 0) {
   1ab70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ab72:	2b00      	cmp	r3, #0
   1ab74:	d101      	bne.n	1ab7a <mp_repl_autocomplete+0x18e>
                            q_first = q;
   1ab76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ab78:	65fb      	str	r3, [r7, #92]	; 0x5c
                        }
                        q_last = q;
   1ab7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ab7c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1ab7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ab80:	3301      	adds	r3, #1
   1ab82:	657b      	str	r3, [r7, #84]	; 0x54
   1ab84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1ab86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ab88:	429a      	cmp	r2, r3
   1ab8a:	d3b1      	bcc.n	1aaf0 <mp_repl_autocomplete+0x104>
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   1ab8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ab8e:	2b00      	cmp	r3, #0
   1ab90:	d116      	bne.n	1abc0 <mp_repl_autocomplete+0x1d4>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   1ab92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ab96:	429a      	cmp	r2, r3
   1ab98:	d110      	bne.n	1abbc <mp_repl_autocomplete+0x1d0>
                    static const char import_str[] = "import ";
                    if (memcmp(s_start, import_str, s_len) == 0) {
   1ab9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ab9c:	4948      	ldr	r1, [pc, #288]	; (1acc0 <mp_repl_autocomplete+0x2d4>)
   1ab9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1aba0:	f001 fdc3 	bl	1c72a <memcmp>
   1aba4:	4603      	mov	r3, r0
   1aba6:	2b00      	cmp	r3, #0
   1aba8:	d108      	bne.n	1abbc <mp_repl_autocomplete+0x1d0>
                        *compl_str = import_str + s_len;
   1abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1abac:	4a44      	ldr	r2, [pc, #272]	; (1acc0 <mp_repl_autocomplete+0x2d4>)
   1abae:	441a      	add	r2, r3
   1abb0:	683b      	ldr	r3, [r7, #0]
   1abb2:	601a      	str	r2, [r3, #0]
                        return sizeof(import_str) - 1 - s_len;
   1abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1abb6:	f1c3 0307 	rsb	r3, r3, #7
   1abba:	e079      	b.n	1acb0 <mp_repl_autocomplete+0x2c4>
                    }
                }

                return 0;
   1abbc:	2300      	movs	r3, #0
   1abbe:	e077      	b.n	1acb0 <mp_repl_autocomplete+0x2c4>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   1abc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1abc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1abc4:	429a      	cmp	r2, r3
   1abc6:	d003      	beq.n	1abd0 <mp_repl_autocomplete+0x1e4>
   1abc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1abcc:	429a      	cmp	r2, r3
   1abce:	d908      	bls.n	1abe2 <mp_repl_autocomplete+0x1f6>
                *compl_str = match_str + s_len;
   1abd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1abd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1abd4:	441a      	add	r2, r3
   1abd6:	683b      	ldr	r3, [r7, #0]
   1abd8:	601a      	str	r2, [r3, #0]
                return match_len - s_len;
   1abda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1abde:	1ad3      	subs	r3, r2, r3
   1abe0:	e066      	b.n	1acb0 <mp_repl_autocomplete+0x2c4>
            // multiple matches found, print them out

            #define WORD_SLOT_LEN (16)
            #define MAX_LINE_LEN  (4 * WORD_SLOT_LEN)

            int line_len = MAX_LINE_LEN; // force a newline for first word
   1abe2:	2340      	movs	r3, #64	; 0x40
   1abe4:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1abe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1abe8:	64bb      	str	r3, [r7, #72]	; 0x48
   1abea:	e057      	b.n	1ac9c <mp_repl_autocomplete+0x2b0>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1abec:	f107 0310 	add.w	r3, r7, #16
   1abf0:	4619      	mov	r1, r3
   1abf2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1abf4:	f7e6 fb0a 	bl	120c <qstr_data>
   1abf8:	6238      	str	r0, [r7, #32]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1abfa:	693b      	ldr	r3, [r7, #16]
   1abfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1abfe:	429a      	cmp	r2, r3
   1ac00:	d849      	bhi.n	1ac96 <mp_repl_autocomplete+0x2aa>
   1ac02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ac04:	6a39      	ldr	r1, [r7, #32]
   1ac06:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ac08:	f001 fe33 	bl	1c872 <strncmp>
   1ac0c:	4603      	mov	r3, r0
   1ac0e:	2b00      	cmp	r3, #0
   1ac10:	d141      	bne.n	1ac96 <mp_repl_autocomplete+0x2aa>
                    mp_load_method_protected(obj, q, dest, true);
   1ac12:	f107 0218 	add.w	r2, r7, #24
   1ac16:	2301      	movs	r3, #1
   1ac18:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1ac1a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1ac1c:	f7f1 fda4 	bl	c768 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1ac20:	69bb      	ldr	r3, [r7, #24]
   1ac22:	2b00      	cmp	r3, #0
   1ac24:	d037      	beq.n	1ac96 <mp_repl_autocomplete+0x2aa>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   1ac26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac28:	330f      	adds	r3, #15
   1ac2a:	2b00      	cmp	r3, #0
   1ac2c:	da00      	bge.n	1ac30 <mp_repl_autocomplete+0x244>
   1ac2e:	330f      	adds	r3, #15
   1ac30:	111b      	asrs	r3, r3, #4
   1ac32:	011a      	lsls	r2, r3, #4
   1ac34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac36:	1ad3      	subs	r3, r2, r3
   1ac38:	647b      	str	r3, [r7, #68]	; 0x44
                        if (gap < 2) {
   1ac3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ac3c:	2b01      	cmp	r3, #1
   1ac3e:	dc02      	bgt.n	1ac46 <mp_repl_autocomplete+0x25a>
                            gap += WORD_SLOT_LEN;
   1ac40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ac42:	3310      	adds	r3, #16
   1ac44:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   1ac46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1ac48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ac4a:	4413      	add	r3, r2
   1ac4c:	461a      	mov	r2, r3
   1ac4e:	693b      	ldr	r3, [r7, #16]
   1ac50:	4413      	add	r3, r2
   1ac52:	2b40      	cmp	r3, #64	; 0x40
   1ac54:	d818      	bhi.n	1ac88 <mp_repl_autocomplete+0x29c>
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
   1ac56:	2300      	movs	r3, #0
   1ac58:	643b      	str	r3, [r7, #64]	; 0x40
   1ac5a:	e006      	b.n	1ac6a <mp_repl_autocomplete+0x27e>
                                mp_print_str(print, " ");
   1ac5c:	4919      	ldr	r1, [pc, #100]	; (1acc4 <mp_repl_autocomplete+0x2d8>)
   1ac5e:	6878      	ldr	r0, [r7, #4]
   1ac60:	f7e6 fe04 	bl	186c <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   1ac64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ac66:	3301      	adds	r3, #1
   1ac68:	643b      	str	r3, [r7, #64]	; 0x40
   1ac6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ac6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ac6e:	429a      	cmp	r2, r3
   1ac70:	dbf4      	blt.n	1ac5c <mp_repl_autocomplete+0x270>
                            }
                            mp_print_str(print, d_str);
   1ac72:	6a39      	ldr	r1, [r7, #32]
   1ac74:	6878      	ldr	r0, [r7, #4]
   1ac76:	f7e6 fdf9 	bl	186c <mp_print_str>
                            line_len += gap + d_len;
   1ac7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1ac7c:	693b      	ldr	r3, [r7, #16]
   1ac7e:	441a      	add	r2, r3
   1ac80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac82:	4413      	add	r3, r2
   1ac84:	64fb      	str	r3, [r7, #76]	; 0x4c
   1ac86:	e006      	b.n	1ac96 <mp_repl_autocomplete+0x2aa>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   1ac88:	6a3a      	ldr	r2, [r7, #32]
   1ac8a:	490f      	ldr	r1, [pc, #60]	; (1acc8 <mp_repl_autocomplete+0x2dc>)
   1ac8c:	6878      	ldr	r0, [r7, #4]
   1ac8e:	f7e7 f8ff 	bl	1e90 <mp_printf>
                            line_len = d_len;
   1ac92:	693b      	ldr	r3, [r7, #16]
   1ac94:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1ac96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ac98:	3301      	adds	r3, #1
   1ac9a:	64bb      	str	r3, [r7, #72]	; 0x48
   1ac9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1ac9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1aca0:	429a      	cmp	r2, r3
   1aca2:	d9a3      	bls.n	1abec <mp_repl_autocomplete+0x200>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1aca4:	4909      	ldr	r1, [pc, #36]	; (1accc <mp_repl_autocomplete+0x2e0>)
   1aca6:	6878      	ldr	r0, [r7, #4]
   1aca8:	f7e6 fde0 	bl	186c <mp_print_str>

            return (size_t)(-1); // indicate many matches
   1acac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
   1acb0:	4618      	mov	r0, r3
   1acb2:	3770      	adds	r7, #112	; 0x70
   1acb4:	46bd      	mov	sp, r7
   1acb6:	bd80      	pop	{r7, pc}
   1acb8:	20001240 	.word	0x20001240
   1acbc:	00020d08 	.word	0x00020d08
   1acc0:	00024350 	.word	0x00024350
   1acc4:	00024344 	.word	0x00024344
   1acc8:	00024348 	.word	0x00024348
   1accc:	0002434c 	.word	0x0002434c

0001acd0 <mp_small_int_mul_overflow>:
 * THE SOFTWARE.
 */

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
   1acd0:	b480      	push	{r7}
   1acd2:	b083      	sub	sp, #12
   1acd4:	af00      	add	r7, sp, #0
   1acd6:	6078      	str	r0, [r7, #4]
   1acd8:	6039      	str	r1, [r7, #0]
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   1acda:	687b      	ldr	r3, [r7, #4]
   1acdc:	2b00      	cmp	r3, #0
   1acde:	dd16      	ble.n	1ad0e <mp_small_int_mul_overflow+0x3e>
        if (y > 0) { // x and y are positive
   1ace0:	683b      	ldr	r3, [r7, #0]
   1ace2:	2b00      	cmp	r3, #0
   1ace4:	dd09      	ble.n	1acfa <mp_small_int_mul_overflow+0x2a>
            if (x > (MP_SMALL_INT_MAX / y)) {
   1ace6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1acea:	683b      	ldr	r3, [r7, #0]
   1acec:	fb92 f2f3 	sdiv	r2, r2, r3
   1acf0:	687b      	ldr	r3, [r7, #4]
   1acf2:	429a      	cmp	r2, r3
   1acf4:	da25      	bge.n	1ad42 <mp_small_int_mul_overflow+0x72>
                return true;
   1acf6:	2301      	movs	r3, #1
   1acf8:	e024      	b.n	1ad44 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x positive, y nonpositive
            if (y < (MP_SMALL_INT_MIN / x)) {
   1acfa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1acfe:	687b      	ldr	r3, [r7, #4]
   1ad00:	fb92 f2f3 	sdiv	r2, r2, r3
   1ad04:	683b      	ldr	r3, [r7, #0]
   1ad06:	429a      	cmp	r2, r3
   1ad08:	dd1b      	ble.n	1ad42 <mp_small_int_mul_overflow+0x72>
                return true;
   1ad0a:	2301      	movs	r3, #1
   1ad0c:	e01a      	b.n	1ad44 <mp_small_int_mul_overflow+0x74>
            }
        } // x positive, y nonpositive
    } else { // x is nonpositive
        if (y > 0) { // x is nonpositive, y is positive
   1ad0e:	683b      	ldr	r3, [r7, #0]
   1ad10:	2b00      	cmp	r3, #0
   1ad12:	dd09      	ble.n	1ad28 <mp_small_int_mul_overflow+0x58>
            if (x < (MP_SMALL_INT_MIN / y)) {
   1ad14:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1ad18:	683b      	ldr	r3, [r7, #0]
   1ad1a:	fb92 f2f3 	sdiv	r2, r2, r3
   1ad1e:	687b      	ldr	r3, [r7, #4]
   1ad20:	429a      	cmp	r2, r3
   1ad22:	dd0e      	ble.n	1ad42 <mp_small_int_mul_overflow+0x72>
                return true;
   1ad24:	2301      	movs	r3, #1
   1ad26:	e00d      	b.n	1ad44 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x and y are nonpositive
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   1ad28:	687b      	ldr	r3, [r7, #4]
   1ad2a:	2b00      	cmp	r3, #0
   1ad2c:	d009      	beq.n	1ad42 <mp_small_int_mul_overflow+0x72>
   1ad2e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1ad32:	687b      	ldr	r3, [r7, #4]
   1ad34:	fb92 f2f3 	sdiv	r2, r2, r3
   1ad38:	683b      	ldr	r3, [r7, #0]
   1ad3a:	429a      	cmp	r2, r3
   1ad3c:	dd01      	ble.n	1ad42 <mp_small_int_mul_overflow+0x72>
                return true;
   1ad3e:	2301      	movs	r3, #1
   1ad40:	e000      	b.n	1ad44 <mp_small_int_mul_overflow+0x74>
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   1ad42:	2300      	movs	r3, #0
}
   1ad44:	4618      	mov	r0, r3
   1ad46:	370c      	adds	r7, #12
   1ad48:	46bd      	mov	sp, r7
   1ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad4e:	4770      	bx	lr

0001ad50 <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
   1ad50:	b480      	push	{r7}
   1ad52:	b083      	sub	sp, #12
   1ad54:	af00      	add	r7, sp, #0
   1ad56:	6078      	str	r0, [r7, #4]
   1ad58:	6039      	str	r1, [r7, #0]
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   1ad5a:	687b      	ldr	r3, [r7, #4]
   1ad5c:	683a      	ldr	r2, [r7, #0]
   1ad5e:	fb93 f2f2 	sdiv	r2, r3, r2
   1ad62:	6839      	ldr	r1, [r7, #0]
   1ad64:	fb01 f202 	mul.w	r2, r1, r2
   1ad68:	1a9b      	subs	r3, r3, r2
   1ad6a:	607b      	str	r3, [r7, #4]
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1ad6c:	687b      	ldr	r3, [r7, #4]
   1ad6e:	2b00      	cmp	r3, #0
   1ad70:	da02      	bge.n	1ad78 <mp_small_int_modulo+0x28>
   1ad72:	683b      	ldr	r3, [r7, #0]
   1ad74:	2b00      	cmp	r3, #0
   1ad76:	dc05      	bgt.n	1ad84 <mp_small_int_modulo+0x34>
   1ad78:	687b      	ldr	r3, [r7, #4]
   1ad7a:	2b00      	cmp	r3, #0
   1ad7c:	dd06      	ble.n	1ad8c <mp_small_int_modulo+0x3c>
   1ad7e:	683b      	ldr	r3, [r7, #0]
   1ad80:	2b00      	cmp	r3, #0
   1ad82:	da03      	bge.n	1ad8c <mp_small_int_modulo+0x3c>
        dividend += divisor;
   1ad84:	687a      	ldr	r2, [r7, #4]
   1ad86:	683b      	ldr	r3, [r7, #0]
   1ad88:	4413      	add	r3, r2
   1ad8a:	607b      	str	r3, [r7, #4]
    }
    return dividend;
   1ad8c:	687b      	ldr	r3, [r7, #4]
}
   1ad8e:	4618      	mov	r0, r3
   1ad90:	370c      	adds	r7, #12
   1ad92:	46bd      	mov	sp, r7
   1ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad98:	4770      	bx	lr

0001ad9a <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
   1ad9a:	b480      	push	{r7}
   1ad9c:	b083      	sub	sp, #12
   1ad9e:	af00      	add	r7, sp, #0
   1ada0:	6078      	str	r0, [r7, #4]
   1ada2:	6039      	str	r1, [r7, #0]
    if (num >= 0) {
   1ada4:	687b      	ldr	r3, [r7, #4]
   1ada6:	2b00      	cmp	r3, #0
   1ada8:	db08      	blt.n	1adbc <mp_small_int_floor_divide+0x22>
        if (denom < 0) {
   1adaa:	683b      	ldr	r3, [r7, #0]
   1adac:	2b00      	cmp	r3, #0
   1adae:	da0e      	bge.n	1adce <mp_small_int_floor_divide+0x34>
            num += -denom - 1;
   1adb0:	683b      	ldr	r3, [r7, #0]
   1adb2:	43db      	mvns	r3, r3
   1adb4:	687a      	ldr	r2, [r7, #4]
   1adb6:	4413      	add	r3, r2
   1adb8:	607b      	str	r3, [r7, #4]
   1adba:	e008      	b.n	1adce <mp_small_int_floor_divide+0x34>
        }
    } else {
        if (denom >= 0) {
   1adbc:	683b      	ldr	r3, [r7, #0]
   1adbe:	2b00      	cmp	r3, #0
   1adc0:	db05      	blt.n	1adce <mp_small_int_floor_divide+0x34>
            num += -denom + 1;
   1adc2:	683b      	ldr	r3, [r7, #0]
   1adc4:	f1c3 0301 	rsb	r3, r3, #1
   1adc8:	687a      	ldr	r2, [r7, #4]
   1adca:	4413      	add	r3, r2
   1adcc:	607b      	str	r3, [r7, #4]
        }
    }
    return num / denom;
   1adce:	687a      	ldr	r2, [r7, #4]
   1add0:	683b      	ldr	r3, [r7, #0]
   1add2:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1add6:	4618      	mov	r0, r3
   1add8:	370c      	adds	r7, #12
   1adda:	46bd      	mov	sp, r7
   1addc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ade0:	4770      	bx	lr
	...

0001ade4 <mp_find_frozen_mpy>:
#include "py/emitglue.h"

extern const char mp_frozen_mpy_names[];
extern const mp_raw_code_t *const mp_frozen_mpy_content[];

STATIC const mp_raw_code_t *mp_find_frozen_mpy(const char *str, size_t len) {
   1ade4:	b580      	push	{r7, lr}
   1ade6:	b086      	sub	sp, #24
   1ade8:	af00      	add	r7, sp, #0
   1adea:	6078      	str	r0, [r7, #4]
   1adec:	6039      	str	r1, [r7, #0]
    const char *name = mp_frozen_mpy_names;
   1adee:	4b15      	ldr	r3, [pc, #84]	; (1ae44 <mp_find_frozen_mpy+0x60>)
   1adf0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1adf2:	2300      	movs	r3, #0
   1adf4:	613b      	str	r3, [r7, #16]
   1adf6:	e01c      	b.n	1ae32 <mp_find_frozen_mpy+0x4e>
        size_t l = strlen(name);
   1adf8:	6978      	ldr	r0, [r7, #20]
   1adfa:	f001 fce7 	bl	1c7cc <strlen>
   1adfe:	60f8      	str	r0, [r7, #12]
        if (l == len && !memcmp(str, name, l)) {
   1ae00:	68fa      	ldr	r2, [r7, #12]
   1ae02:	683b      	ldr	r3, [r7, #0]
   1ae04:	429a      	cmp	r2, r3
   1ae06:	d10c      	bne.n	1ae22 <mp_find_frozen_mpy+0x3e>
   1ae08:	68fa      	ldr	r2, [r7, #12]
   1ae0a:	6979      	ldr	r1, [r7, #20]
   1ae0c:	6878      	ldr	r0, [r7, #4]
   1ae0e:	f001 fc8c 	bl	1c72a <memcmp>
   1ae12:	4603      	mov	r3, r0
   1ae14:	2b00      	cmp	r3, #0
   1ae16:	d104      	bne.n	1ae22 <mp_find_frozen_mpy+0x3e>
            return mp_frozen_mpy_content[i];
   1ae18:	4a0b      	ldr	r2, [pc, #44]	; (1ae48 <mp_find_frozen_mpy+0x64>)
   1ae1a:	693b      	ldr	r3, [r7, #16]
   1ae1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ae20:	e00c      	b.n	1ae3c <mp_find_frozen_mpy+0x58>
        }
        name += l + 1;
   1ae22:	68fb      	ldr	r3, [r7, #12]
   1ae24:	3301      	adds	r3, #1
   1ae26:	697a      	ldr	r2, [r7, #20]
   1ae28:	4413      	add	r3, r2
   1ae2a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1ae2c:	693b      	ldr	r3, [r7, #16]
   1ae2e:	3301      	adds	r3, #1
   1ae30:	613b      	str	r3, [r7, #16]
   1ae32:	697b      	ldr	r3, [r7, #20]
   1ae34:	781b      	ldrb	r3, [r3, #0]
   1ae36:	2b00      	cmp	r3, #0
   1ae38:	d1de      	bne.n	1adf8 <mp_find_frozen_mpy+0x14>
    }
    return NULL;
   1ae3a:	2300      	movs	r3, #0
}
   1ae3c:	4618      	mov	r0, r3
   1ae3e:	3718      	adds	r7, #24
   1ae40:	46bd      	mov	sp, r7
   1ae42:	bd80      	pop	{r7, pc}
   1ae44:	00025190 	.word	0x00025190
   1ae48:	000251a0 	.word	0x000251a0

0001ae4c <mp_frozen_stat_helper>:

#endif

#if MICROPY_MODULE_FROZEN

STATIC mp_import_stat_t mp_frozen_stat_helper(const char *name, const char *str) {
   1ae4c:	b580      	push	{r7, lr}
   1ae4e:	b086      	sub	sp, #24
   1ae50:	af00      	add	r7, sp, #0
   1ae52:	6078      	str	r0, [r7, #4]
   1ae54:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
   1ae56:	6838      	ldr	r0, [r7, #0]
   1ae58:	f001 fcb8 	bl	1c7cc <strlen>
   1ae5c:	6138      	str	r0, [r7, #16]

    for (int i = 0; *name != 0; i++) {
   1ae5e:	2300      	movs	r3, #0
   1ae60:	617b      	str	r3, [r7, #20]
   1ae62:	e027      	b.n	1aeb4 <mp_frozen_stat_helper+0x68>
        size_t l = strlen(name);
   1ae64:	6878      	ldr	r0, [r7, #4]
   1ae66:	f001 fcb1 	bl	1c7cc <strlen>
   1ae6a:	60f8      	str	r0, [r7, #12]
        if (l >= len && !memcmp(str, name, len)) {
   1ae6c:	68fa      	ldr	r2, [r7, #12]
   1ae6e:	693b      	ldr	r3, [r7, #16]
   1ae70:	429a      	cmp	r2, r3
   1ae72:	d317      	bcc.n	1aea4 <mp_frozen_stat_helper+0x58>
   1ae74:	693a      	ldr	r2, [r7, #16]
   1ae76:	6879      	ldr	r1, [r7, #4]
   1ae78:	6838      	ldr	r0, [r7, #0]
   1ae7a:	f001 fc56 	bl	1c72a <memcmp>
   1ae7e:	4603      	mov	r3, r0
   1ae80:	2b00      	cmp	r3, #0
   1ae82:	d10f      	bne.n	1aea4 <mp_frozen_stat_helper+0x58>
            if (name[len] == 0) {
   1ae84:	687a      	ldr	r2, [r7, #4]
   1ae86:	693b      	ldr	r3, [r7, #16]
   1ae88:	4413      	add	r3, r2
   1ae8a:	781b      	ldrb	r3, [r3, #0]
   1ae8c:	2b00      	cmp	r3, #0
   1ae8e:	d101      	bne.n	1ae94 <mp_frozen_stat_helper+0x48>
                return MP_IMPORT_STAT_FILE;
   1ae90:	2302      	movs	r3, #2
   1ae92:	e014      	b.n	1aebe <mp_frozen_stat_helper+0x72>
            } else if (name[len] == '/') {
   1ae94:	687a      	ldr	r2, [r7, #4]
   1ae96:	693b      	ldr	r3, [r7, #16]
   1ae98:	4413      	add	r3, r2
   1ae9a:	781b      	ldrb	r3, [r3, #0]
   1ae9c:	2b2f      	cmp	r3, #47	; 0x2f
   1ae9e:	d101      	bne.n	1aea4 <mp_frozen_stat_helper+0x58>
                return MP_IMPORT_STAT_DIR;
   1aea0:	2301      	movs	r3, #1
   1aea2:	e00c      	b.n	1aebe <mp_frozen_stat_helper+0x72>
            }
        }
        name += l + 1;
   1aea4:	68fb      	ldr	r3, [r7, #12]
   1aea6:	3301      	adds	r3, #1
   1aea8:	687a      	ldr	r2, [r7, #4]
   1aeaa:	4413      	add	r3, r2
   1aeac:	607b      	str	r3, [r7, #4]
    for (int i = 0; *name != 0; i++) {
   1aeae:	697b      	ldr	r3, [r7, #20]
   1aeb0:	3301      	adds	r3, #1
   1aeb2:	617b      	str	r3, [r7, #20]
   1aeb4:	687b      	ldr	r3, [r7, #4]
   1aeb6:	781b      	ldrb	r3, [r3, #0]
   1aeb8:	2b00      	cmp	r3, #0
   1aeba:	d1d3      	bne.n	1ae64 <mp_frozen_stat_helper+0x18>
    }
    return MP_IMPORT_STAT_NO_EXIST;
   1aebc:	2300      	movs	r3, #0
}
   1aebe:	4618      	mov	r0, r3
   1aec0:	3718      	adds	r7, #24
   1aec2:	46bd      	mov	sp, r7
   1aec4:	bd80      	pop	{r7, pc}

0001aec6 <mp_frozen_stat>:

mp_import_stat_t mp_frozen_stat(const char *str) {
   1aec6:	b580      	push	{r7, lr}
   1aec8:	b084      	sub	sp, #16
   1aeca:	af00      	add	r7, sp, #0
   1aecc:	6078      	str	r0, [r7, #4]
        return stat;
    }
    #endif

    #if MICROPY_MODULE_FROZEN_MPY
    stat = mp_frozen_stat_helper(mp_frozen_mpy_names, str);
   1aece:	6879      	ldr	r1, [r7, #4]
   1aed0:	4806      	ldr	r0, [pc, #24]	; (1aeec <mp_frozen_stat+0x26>)
   1aed2:	f7ff ffbb 	bl	1ae4c <mp_frozen_stat_helper>
   1aed6:	60f8      	str	r0, [r7, #12]
    if (stat != MP_IMPORT_STAT_NO_EXIST) {
   1aed8:	68fb      	ldr	r3, [r7, #12]
   1aeda:	2b00      	cmp	r3, #0
   1aedc:	d001      	beq.n	1aee2 <mp_frozen_stat+0x1c>
        return stat;
   1aede:	68fb      	ldr	r3, [r7, #12]
   1aee0:	e000      	b.n	1aee4 <mp_frozen_stat+0x1e>
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   1aee2:	2300      	movs	r3, #0
}
   1aee4:	4618      	mov	r0, r3
   1aee6:	3710      	adds	r7, #16
   1aee8:	46bd      	mov	sp, r7
   1aeea:	bd80      	pop	{r7, pc}
   1aeec:	00025190 	.word	0x00025190

0001aef0 <mp_find_frozen_module>:

int mp_find_frozen_module(const char *str, size_t len, void **data) {
   1aef0:	b580      	push	{r7, lr}
   1aef2:	b086      	sub	sp, #24
   1aef4:	af00      	add	r7, sp, #0
   1aef6:	60f8      	str	r0, [r7, #12]
   1aef8:	60b9      	str	r1, [r7, #8]
   1aefa:	607a      	str	r2, [r7, #4]
        *data = lex;
        return MP_FROZEN_STR;
    }
    #endif
    #if MICROPY_MODULE_FROZEN_MPY
    const mp_raw_code_t *rc = mp_find_frozen_mpy(str, len);
   1aefc:	68b9      	ldr	r1, [r7, #8]
   1aefe:	68f8      	ldr	r0, [r7, #12]
   1af00:	f7ff ff70 	bl	1ade4 <mp_find_frozen_mpy>
   1af04:	6178      	str	r0, [r7, #20]
    if (rc != NULL) {
   1af06:	697b      	ldr	r3, [r7, #20]
   1af08:	2b00      	cmp	r3, #0
   1af0a:	d004      	beq.n	1af16 <mp_find_frozen_module+0x26>
        *data = (void*)rc;
   1af0c:	687b      	ldr	r3, [r7, #4]
   1af0e:	697a      	ldr	r2, [r7, #20]
   1af10:	601a      	str	r2, [r3, #0]
        return MP_FROZEN_MPY;
   1af12:	2302      	movs	r3, #2
   1af14:	e000      	b.n	1af18 <mp_find_frozen_module+0x28>
    }
    #endif
    return MP_FROZEN_NONE;
   1af16:	2300      	movs	r3, #0
}
   1af18:	4618      	mov	r0, r3
   1af1a:	3718      	adds	r7, #24
   1af1c:	46bd      	mov	sp, r7
   1af1e:	bd80      	pop	{r7, pc}

0001af20 <printf>:
int putchar(int c);
int puts(const char *s);
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap);
int snprintf(char *str, size_t size, const char *fmt, ...);

int printf(const char *fmt, ...) {
   1af20:	b40f      	push	{r0, r1, r2, r3}
   1af22:	b580      	push	{r7, lr}
   1af24:	b082      	sub	sp, #8
   1af26:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1af28:	f107 0314 	add.w	r3, r7, #20
   1af2c:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   1af2e:	683a      	ldr	r2, [r7, #0]
   1af30:	6939      	ldr	r1, [r7, #16]
   1af32:	4806      	ldr	r0, [pc, #24]	; (1af4c <printf+0x2c>)
   1af34:	f7e6 ffc2 	bl	1ebc <mp_vprintf>
   1af38:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1af3a:	687b      	ldr	r3, [r7, #4]
}
   1af3c:	4618      	mov	r0, r3
   1af3e:	3708      	adds	r7, #8
   1af40:	46bd      	mov	sp, r7
   1af42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1af46:	b004      	add	sp, #16
   1af48:	4770      	bx	lr
   1af4a:	bf00      	nop
   1af4c:	0001ef0c 	.word	0x0001ef0c

0001af50 <vprintf>:

int vprintf(const char *fmt, va_list ap) {
   1af50:	b580      	push	{r7, lr}
   1af52:	b082      	sub	sp, #8
   1af54:	af00      	add	r7, sp, #0
   1af56:	6078      	str	r0, [r7, #4]
   1af58:	6039      	str	r1, [r7, #0]
    return mp_vprintf(&mp_plat_print, fmt, ap);
   1af5a:	683a      	ldr	r2, [r7, #0]
   1af5c:	6879      	ldr	r1, [r7, #4]
   1af5e:	4804      	ldr	r0, [pc, #16]	; (1af70 <vprintf+0x20>)
   1af60:	f7e6 ffac 	bl	1ebc <mp_vprintf>
   1af64:	4603      	mov	r3, r0
}
   1af66:	4618      	mov	r0, r3
   1af68:	3708      	adds	r7, #8
   1af6a:	46bd      	mov	sp, r7
   1af6c:	bd80      	pop	{r7, pc}
   1af6e:	bf00      	nop
   1af70:	0001ef0c 	.word	0x0001ef0c

0001af74 <putchar>:

// need this because gcc optimises printf("%c", c) -> putchar(c), and printf("a") -> putchar('a')
int putchar(int c) {
   1af74:	b580      	push	{r7, lr}
   1af76:	b084      	sub	sp, #16
   1af78:	af00      	add	r7, sp, #0
   1af7a:	6078      	str	r0, [r7, #4]
    char chr = c;
   1af7c:	687b      	ldr	r3, [r7, #4]
   1af7e:	b2db      	uxtb	r3, r3
   1af80:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1af82:	f107 030f 	add.w	r3, r7, #15
   1af86:	2101      	movs	r1, #1
   1af88:	4618      	mov	r0, r3
   1af8a:	f001 f847 	bl	1c01c <mp_hal_stdout_tx_strn_cooked>
    return chr;
   1af8e:	7bfb      	ldrb	r3, [r7, #15]
}
   1af90:	4618      	mov	r0, r3
   1af92:	3710      	adds	r7, #16
   1af94:	46bd      	mov	sp, r7
   1af96:	bd80      	pop	{r7, pc}

0001af98 <puts>:

// need this because gcc optimises printf("string\n") -> puts("string")
int puts(const char *s) {
   1af98:	b580      	push	{r7, lr}
   1af9a:	b084      	sub	sp, #16
   1af9c:	af00      	add	r7, sp, #0
   1af9e:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   1afa0:	6878      	ldr	r0, [r7, #4]
   1afa2:	f001 fc13 	bl	1c7cc <strlen>
   1afa6:	4603      	mov	r3, r0
   1afa8:	4619      	mov	r1, r3
   1afaa:	6878      	ldr	r0, [r7, #4]
   1afac:	f001 f836 	bl	1c01c <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1afb0:	230a      	movs	r3, #10
   1afb2:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1afb4:	f107 030f 	add.w	r3, r7, #15
   1afb8:	2101      	movs	r1, #1
   1afba:	4618      	mov	r0, r3
   1afbc:	f001 f82e 	bl	1c01c <mp_hal_stdout_tx_strn_cooked>
    return 1;
   1afc0:	2301      	movs	r3, #1
}
   1afc2:	4618      	mov	r0, r3
   1afc4:	3710      	adds	r7, #16
   1afc6:	46bd      	mov	sp, r7
   1afc8:	bd80      	pop	{r7, pc}

0001afca <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   1afca:	b580      	push	{r7, lr}
   1afcc:	b086      	sub	sp, #24
   1afce:	af00      	add	r7, sp, #0
   1afd0:	60f8      	str	r0, [r7, #12]
   1afd2:	60b9      	str	r1, [r7, #8]
   1afd4:	607a      	str	r2, [r7, #4]
    strn_print_env_t *strn_print_env = data;
   1afd6:	68fb      	ldr	r3, [r7, #12]
   1afd8:	617b      	str	r3, [r7, #20]
    if (len > strn_print_env->remain) {
   1afda:	697b      	ldr	r3, [r7, #20]
   1afdc:	685a      	ldr	r2, [r3, #4]
   1afde:	687b      	ldr	r3, [r7, #4]
   1afe0:	429a      	cmp	r2, r3
   1afe2:	d202      	bcs.n	1afea <strn_print_strn+0x20>
        len = strn_print_env->remain;
   1afe4:	697b      	ldr	r3, [r7, #20]
   1afe6:	685b      	ldr	r3, [r3, #4]
   1afe8:	607b      	str	r3, [r7, #4]
    }
    memcpy(strn_print_env->cur, str, len);
   1afea:	697b      	ldr	r3, [r7, #20]
   1afec:	681b      	ldr	r3, [r3, #0]
   1afee:	687a      	ldr	r2, [r7, #4]
   1aff0:	68b9      	ldr	r1, [r7, #8]
   1aff2:	4618      	mov	r0, r3
   1aff4:	f001 fab4 	bl	1c560 <memcpy>
    strn_print_env->cur += len;
   1aff8:	697b      	ldr	r3, [r7, #20]
   1affa:	681a      	ldr	r2, [r3, #0]
   1affc:	687b      	ldr	r3, [r7, #4]
   1affe:	441a      	add	r2, r3
   1b000:	697b      	ldr	r3, [r7, #20]
   1b002:	601a      	str	r2, [r3, #0]
    strn_print_env->remain -= len;
   1b004:	697b      	ldr	r3, [r7, #20]
   1b006:	685a      	ldr	r2, [r3, #4]
   1b008:	687b      	ldr	r3, [r7, #4]
   1b00a:	1ad2      	subs	r2, r2, r3
   1b00c:	697b      	ldr	r3, [r7, #20]
   1b00e:	605a      	str	r2, [r3, #4]
}
   1b010:	bf00      	nop
   1b012:	3718      	adds	r7, #24
   1b014:	46bd      	mov	sp, r7
   1b016:	bd80      	pop	{r7, pc}

0001b018 <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   1b018:	b580      	push	{r7, lr}
   1b01a:	b08a      	sub	sp, #40	; 0x28
   1b01c:	af00      	add	r7, sp, #0
   1b01e:	60f8      	str	r0, [r7, #12]
   1b020:	60b9      	str	r1, [r7, #8]
   1b022:	607a      	str	r2, [r7, #4]
   1b024:	603b      	str	r3, [r7, #0]
    strn_print_env_t strn_print_env = {str, size};
   1b026:	68fb      	ldr	r3, [r7, #12]
   1b028:	61fb      	str	r3, [r7, #28]
   1b02a:	68bb      	ldr	r3, [r7, #8]
   1b02c:	623b      	str	r3, [r7, #32]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1b02e:	f107 031c 	add.w	r3, r7, #28
   1b032:	617b      	str	r3, [r7, #20]
   1b034:	4b0e      	ldr	r3, [pc, #56]	; (1b070 <vsnprintf+0x58>)
   1b036:	61bb      	str	r3, [r7, #24]
    int len = mp_vprintf(&print, fmt, ap);
   1b038:	f107 0314 	add.w	r3, r7, #20
   1b03c:	683a      	ldr	r2, [r7, #0]
   1b03e:	6879      	ldr	r1, [r7, #4]
   1b040:	4618      	mov	r0, r3
   1b042:	f7e6 ff3b 	bl	1ebc <mp_vprintf>
   1b046:	6278      	str	r0, [r7, #36]	; 0x24
    // add terminating null byte
    if (size > 0) {
   1b048:	68bb      	ldr	r3, [r7, #8]
   1b04a:	2b00      	cmp	r3, #0
   1b04c:	d00a      	beq.n	1b064 <vsnprintf+0x4c>
        if (strn_print_env.remain == 0) {
   1b04e:	6a3b      	ldr	r3, [r7, #32]
   1b050:	2b00      	cmp	r3, #0
   1b052:	d104      	bne.n	1b05e <vsnprintf+0x46>
            strn_print_env.cur[-1] = 0;
   1b054:	69fb      	ldr	r3, [r7, #28]
   1b056:	3b01      	subs	r3, #1
   1b058:	2200      	movs	r2, #0
   1b05a:	701a      	strb	r2, [r3, #0]
   1b05c:	e002      	b.n	1b064 <vsnprintf+0x4c>
        } else {
            strn_print_env.cur[0] = 0;
   1b05e:	69fb      	ldr	r3, [r7, #28]
   1b060:	2200      	movs	r2, #0
   1b062:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
   1b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b066:	4618      	mov	r0, r3
   1b068:	3728      	adds	r7, #40	; 0x28
   1b06a:	46bd      	mov	sp, r7
   1b06c:	bd80      	pop	{r7, pc}
   1b06e:	bf00      	nop
   1b070:	0001afcb 	.word	0x0001afcb

0001b074 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1b074:	b40c      	push	{r2, r3}
   1b076:	b580      	push	{r7, lr}
   1b078:	b084      	sub	sp, #16
   1b07a:	af00      	add	r7, sp, #0
   1b07c:	6078      	str	r0, [r7, #4]
   1b07e:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start(ap, fmt);
   1b080:	f107 031c 	add.w	r3, r7, #28
   1b084:	60bb      	str	r3, [r7, #8]
    int ret = vsnprintf(str, size, fmt, ap);
   1b086:	68bb      	ldr	r3, [r7, #8]
   1b088:	69ba      	ldr	r2, [r7, #24]
   1b08a:	6839      	ldr	r1, [r7, #0]
   1b08c:	6878      	ldr	r0, [r7, #4]
   1b08e:	f7ff ffc3 	bl	1b018 <vsnprintf>
   1b092:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
   1b094:	68fb      	ldr	r3, [r7, #12]
}
   1b096:	4618      	mov	r0, r3
   1b098:	3710      	adds	r7, #16
   1b09a:	46bd      	mov	sp, r7
   1b09c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b0a0:	b002      	add	sp, #8
   1b0a2:	4770      	bx	lr

0001b0a4 <do_str>:
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"

#if MICROPY_ENABLE_COMPILER
void do_str(const char *src, mp_parse_input_kind_t input_kind) {
   1b0a4:	b580      	push	{r7, lr}
   1b0a6:	b094      	sub	sp, #80	; 0x50
   1b0a8:	af00      	add	r7, sp, #0
   1b0aa:	6078      	str	r0, [r7, #4]
   1b0ac:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b0ae:	f107 0314 	add.w	r3, r7, #20
   1b0b2:	4618      	mov	r0, r3
   1b0b4:	f7e5 f902 	bl	2bc <nlr_push>
   1b0b8:	4603      	mov	r3, r0
   1b0ba:	2b00      	cmp	r3, #0
   1b0bc:	d121      	bne.n	1b102 <do_str+0x5e>
        mp_lexer_t *lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, src, strlen(src), 0);
   1b0be:	6878      	ldr	r0, [r7, #4]
   1b0c0:	f001 fb84 	bl	1c7cc <strlen>
   1b0c4:	4602      	mov	r2, r0
   1b0c6:	2300      	movs	r3, #0
   1b0c8:	6879      	ldr	r1, [r7, #4]
   1b0ca:	2036      	movs	r0, #54	; 0x36
   1b0cc:	f7e8 fb21 	bl	3712 <mp_lexer_new_from_str_len>
   1b0d0:	64f8      	str	r0, [r7, #76]	; 0x4c
        qstr source_name = lex->source_name;
   1b0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b0d4:	681b      	ldr	r3, [r3, #0]
   1b0d6:	64bb      	str	r3, [r7, #72]	; 0x48
        mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b0d8:	f107 030c 	add.w	r3, r7, #12
   1b0dc:	683a      	ldr	r2, [r7, #0]
   1b0de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1b0e0:	4618      	mov	r0, r3
   1b0e2:	f7e9 f90f 	bl	4304 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, true);
   1b0e6:	f107 000c 	add.w	r0, r7, #12
   1b0ea:	2301      	movs	r3, #1
   1b0ec:	2200      	movs	r2, #0
   1b0ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b0f0:	f7ee fb11 	bl	9716 <mp_compile>
   1b0f4:	6478      	str	r0, [r7, #68]	; 0x44
        mp_call_function_0(module_fun);
   1b0f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1b0f8:	f7f0 fdea 	bl	bcd0 <mp_call_function_0>
        nlr_pop();
   1b0fc:	f7e5 f8cc 	bl	298 <nlr_pop>
    } else {
        // uncaught exception
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
    }
}
   1b100:	e004      	b.n	1b10c <do_str+0x68>
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1b102:	69bb      	ldr	r3, [r7, #24]
   1b104:	4619      	mov	r1, r3
   1b106:	4803      	ldr	r0, [pc, #12]	; (1b114 <do_str+0x70>)
   1b108:	f7f2 fb5a 	bl	d7c0 <mp_obj_print_exception>
}
   1b10c:	bf00      	nop
   1b10e:	3750      	adds	r7, #80	; 0x50
   1b110:	46bd      	mov	sp, r7
   1b112:	bd80      	pop	{r7, pc}
   1b114:	0001ef0c 	.word	0x0001ef0c

0001b118 <main>:
static char *stack_top;
#if MICROPY_ENABLE_GC
static char heap[2048];
#endif

int main(int argc, char **argv) {
   1b118:	b580      	push	{r7, lr}
   1b11a:	b084      	sub	sp, #16
   1b11c:	af00      	add	r7, sp, #0
   1b11e:	6078      	str	r0, [r7, #4]
   1b120:	6039      	str	r1, [r7, #0]
    int stack_dummy;
    stack_top = (char*)&stack_dummy;
   1b122:	4a0a      	ldr	r2, [pc, #40]	; (1b14c <main+0x34>)
   1b124:	f107 030c 	add.w	r3, r7, #12
   1b128:	6013      	str	r3, [r2, #0]

    #if MICROPY_ENABLE_GC
    gc_init(heap, heap + sizeof(heap));
   1b12a:	4b09      	ldr	r3, [pc, #36]	; (1b150 <main+0x38>)
   1b12c:	4619      	mov	r1, r3
   1b12e:	4809      	ldr	r0, [pc, #36]	; (1b154 <main+0x3c>)
   1b130:	f7e5 fa08 	bl	544 <gc_init>
    #endif
    mp_init();
   1b134:	f7f0 f9a8 	bl	b488 <mp_init>
        if (pyexec_event_repl_process_char(c)) {
            break;
        }
    }
    #else
    pyexec_friendly_repl();
   1b138:	f001 f8fa 	bl	1c330 <pyexec_friendly_repl>
    //do_str("print('hello world!', list(x+1 for x in range(10)), end='eol\\n')", MP_PARSE_SINGLE_INPUT);
    //do_str("for i in range(10):\r\n  print(i)", MP_PARSE_FILE_INPUT);
    #else
    pyexec_frozen_module("frozentest.py");
    #endif
    mp_deinit();
   1b13c:	f7f0 f9ca 	bl	b4d4 <mp_deinit>
    return 0;
   1b140:	2300      	movs	r3, #0
}
   1b142:	4618      	mov	r0, r3
   1b144:	3710      	adds	r7, #16
   1b146:	46bd      	mov	sp, r7
   1b148:	bd80      	pop	{r7, pc}
   1b14a:	bf00      	nop
   1b14c:	20000814 	.word	0x20000814
   1b150:	20001018 	.word	0x20001018
   1b154:	20000818 	.word	0x20000818

0001b158 <gc_collect>:

void gc_collect(void) {
   1b158:	b580      	push	{r7, lr}
   1b15a:	b082      	sub	sp, #8
   1b15c:	af00      	add	r7, sp, #0
    // WARNING: This gc_collect implementation doesn't try to get root
    // pointers from CPU registers, and thus may function incorrectly.
    void *dummy;
    gc_collect_start();
   1b15e:	f7e5 fa33 	bl	5c8 <gc_collect_start>
    gc_collect_root(&dummy, ((mp_uint_t)stack_top - (mp_uint_t)&dummy) / sizeof(mp_uint_t));
   1b162:	4b09      	ldr	r3, [pc, #36]	; (1b188 <gc_collect+0x30>)
   1b164:	681b      	ldr	r3, [r3, #0]
   1b166:	461a      	mov	r2, r3
   1b168:	1d3b      	adds	r3, r7, #4
   1b16a:	1ad3      	subs	r3, r2, r3
   1b16c:	089a      	lsrs	r2, r3, #2
   1b16e:	1d3b      	adds	r3, r7, #4
   1b170:	4611      	mov	r1, r2
   1b172:	4618      	mov	r0, r3
   1b174:	f7e5 fa64 	bl	640 <gc_collect_root>
    gc_collect_end();
   1b178:	f7e5 fa9c 	bl	6b4 <gc_collect_end>
    gc_dump_info();
   1b17c:	f7e5 fd6c 	bl	c58 <gc_dump_info>
}
   1b180:	bf00      	nop
   1b182:	3708      	adds	r7, #8
   1b184:	46bd      	mov	sp, r7
   1b186:	bd80      	pop	{r7, pc}
   1b188:	20000814 	.word	0x20000814

0001b18c <mp_lexer_new_from_file>:

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
   1b18c:	b580      	push	{r7, lr}
   1b18e:	b082      	sub	sp, #8
   1b190:	af00      	add	r7, sp, #0
   1b192:	6078      	str	r0, [r7, #4]
    mp_raise_OSError(MP_ENOENT);
   1b194:	2002      	movs	r0, #2
   1b196:	f7f1 fe9b 	bl	ced0 <mp_raise_OSError>

0001b19a <mp_import_stat>:
}

mp_import_stat_t mp_import_stat(const char *path) { // @suppress("Type cannot be resolved")
   1b19a:	b480      	push	{r7}
   1b19c:	b083      	sub	sp, #12
   1b19e:	af00      	add	r7, sp, #0
   1b1a0:	6078      	str	r0, [r7, #4]
    return MP_IMPORT_STAT_NO_EXIST;
   1b1a2:	2300      	movs	r3, #0
}
   1b1a4:	4618      	mov	r0, r3
   1b1a6:	370c      	adds	r7, #12
   1b1a8:	46bd      	mov	sp, r7
   1b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b1ae:	4770      	bx	lr

0001b1b0 <mp_builtin_open>:

mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1b1b0:	b480      	push	{r7}
   1b1b2:	b085      	sub	sp, #20
   1b1b4:	af00      	add	r7, sp, #0
   1b1b6:	60f8      	str	r0, [r7, #12]
   1b1b8:	60b9      	str	r1, [r7, #8]
   1b1ba:	607a      	str	r2, [r7, #4]
    return mp_const_none;
   1b1bc:	4b03      	ldr	r3, [pc, #12]	; (1b1cc <mp_builtin_open+0x1c>)
}
   1b1be:	4618      	mov	r0, r3
   1b1c0:	3714      	adds	r7, #20
   1b1c2:	46bd      	mov	sp, r7
   1b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b1c8:	4770      	bx	lr
   1b1ca:	bf00      	nop
   1b1cc:	00022b54 	.word	0x00022b54

0001b1d0 <nlr_jump_fail>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_open_obj, 1, mp_builtin_open);

void nlr_jump_fail(void *val) {
   1b1d0:	b480      	push	{r7}
   1b1d2:	b083      	sub	sp, #12
   1b1d4:	af00      	add	r7, sp, #0
   1b1d6:	6078      	str	r0, [r7, #4]
    while (1);
   1b1d8:	e7fe      	b.n	1b1d8 <nlr_jump_fail+0x8>

0001b1da <__fatal_error>:
}

void NORETURN __fatal_error(const char *msg) {
   1b1da:	b480      	push	{r7}
   1b1dc:	b083      	sub	sp, #12
   1b1de:	af00      	add	r7, sp, #0
   1b1e0:	6078      	str	r0, [r7, #4]
    while (1);
   1b1e2:	e7fe      	b.n	1b1e2 <__fatal_error+0x8>

0001b1e4 <__assert_func>:
}

#ifndef NDEBUG
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1b1e4:	b580      	push	{r7, lr}
   1b1e6:	b084      	sub	sp, #16
   1b1e8:	af00      	add	r7, sp, #0
   1b1ea:	60f8      	str	r0, [r7, #12]
   1b1ec:	60b9      	str	r1, [r7, #8]
   1b1ee:	607a      	str	r2, [r7, #4]
   1b1f0:	603b      	str	r3, [r7, #0]
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   1b1f2:	68bb      	ldr	r3, [r7, #8]
   1b1f4:	68fa      	ldr	r2, [r7, #12]
   1b1f6:	6839      	ldr	r1, [r7, #0]
   1b1f8:	4802      	ldr	r0, [pc, #8]	; (1b204 <__assert_func+0x20>)
   1b1fa:	f7ff fe91 	bl	1af20 <printf>
    __fatal_error("Assertion failed");
   1b1fe:	4802      	ldr	r0, [pc, #8]	; (1b208 <__assert_func+0x24>)
   1b200:	f7ff ffeb 	bl	1b1da <__fatal_error>
   1b204:	00024364 	.word	0x00024364
   1b208:	0002438c 	.word	0x0002438c

0001b20c <_start>:
//    0,
//    (uint32_t)&Default_Handler, // PendSV_Handler
//    (uint32_t)&Default_Handler, // SysTick_Handler
//};

void _start(void) {
   1b20c:	b580      	push	{r7, lr}
   1b20e:	af00      	add	r7, sp, #0
    // when we get here: stack is initialised, bss is clear, data is copied

    // SCB->CCR: enable 8-byte stack alignment for IRQ handlers, in accord with EABI
    *((volatile uint32_t*)0xe000ed14) |= 1 << 9;
   1b210:	4a06      	ldr	r2, [pc, #24]	; (1b22c <_start+0x20>)
   1b212:	4b06      	ldr	r3, [pc, #24]	; (1b22c <_start+0x20>)
   1b214:	681b      	ldr	r3, [r3, #0]
   1b216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b21a:	6013      	str	r3, [r2, #0]

    // initialise the cpu and peripherals
    #if MICROPY_MIN_USE_TM4C123_MCU
    void tm4c123_init(void);
    tm4c123_init();
   1b21c:	f000 f808 	bl	1b230 <tm4c123_init>
    #endif

    // now that we have a basic system up and running we can call main
    main(0, NULL);
   1b220:	2100      	movs	r1, #0
   1b222:	2000      	movs	r0, #0
   1b224:	f7ff ff78 	bl	1b118 <main>

    // we must not return
    for (;;) {
   1b228:	e7fe      	b.n	1b228 <_start+0x1c>
   1b22a:	bf00      	nop
   1b22c:	e000ed14 	.word	0xe000ed14

0001b230 <tm4c123_init>:

//#define SYSCTL ((periph_sysctl_t*)  0x400FE000)



void tm4c123_init(void) {
   1b230:	b580      	push	{r7, lr}
   1b232:	af00      	add	r7, sp, #0
    // basic MCU config

    // set system clock to 80MHz
    SYSCTL->RCC |= (uint32_t)0x00000800;   // set BYPASS bit
   1b234:	4a4d      	ldr	r2, [pc, #308]	; (1b36c <tm4c123_init+0x13c>)
   1b236:	4b4d      	ldr	r3, [pc, #308]	; (1b36c <tm4c123_init+0x13c>)
   1b238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b23a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b23e:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC2 |= (uint32_t)0xC0000800;  // set BYPASS2 bit, DIV400 and USERCC2
   1b240:	4a4a      	ldr	r2, [pc, #296]	; (1b36c <tm4c123_init+0x13c>)
   1b242:	4b4a      	ldr	r3, [pc, #296]	; (1b36c <tm4c123_init+0x13c>)
   1b244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1b24a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b24e:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC &= (uint32_t)0xFFBFFFFF;   // clear USESYSDIV bit
   1b250:	4a46      	ldr	r2, [pc, #280]	; (1b36c <tm4c123_init+0x13c>)
   1b252:	4b46      	ldr	r3, [pc, #280]	; (1b36c <tm4c123_init+0x13c>)
   1b254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b256:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1b25a:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC = (SYSCTL->RCC & (uint32_t)0xFFFFF83F) | (uint32_t)0x00000B70;    // XTAL to 16 MHz
   1b25c:	4a43      	ldr	r2, [pc, #268]	; (1b36c <tm4c123_init+0x13c>)
   1b25e:	4b43      	ldr	r3, [pc, #268]	; (1b36c <tm4c123_init+0x13c>)
   1b260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b262:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1b266:	f443 6337 	orr.w	r3, r3, #2928	; 0xb70
   1b26a:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->MISC &= 0xFFFFFFBF;            // clear PLLLRIS bit
   1b26c:	4a3f      	ldr	r2, [pc, #252]	; (1b36c <tm4c123_init+0x13c>)
   1b26e:	4b3f      	ldr	r3, [pc, #252]	; (1b36c <tm4c123_init+0x13c>)
   1b270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b276:	6593      	str	r3, [r2, #88]	; 0x58
    SYSCTL->RCC2 &= (uint32_t)0xFFFFDFFF;  // clear PWRDN2 Bit to enable PLL
   1b278:	4a3c      	ldr	r2, [pc, #240]	; (1b36c <tm4c123_init+0x13c>)
   1b27a:	4b3c      	ldr	r3, [pc, #240]	; (1b36c <tm4c123_init+0x13c>)
   1b27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b27e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1b282:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC2 = (SYSCTL->RCC2 & (uint32_t)0xE03FFFFF) | (uint32_t)0x01000000;  // Set SYSDIV2 to 0x2 for 80MHz
   1b284:	4a39      	ldr	r2, [pc, #228]	; (1b36c <tm4c123_init+0x13c>)
   1b286:	4b39      	ldr	r3, [pc, #228]	; (1b36c <tm4c123_init+0x13c>)
   1b288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b28a:	f023 53fe 	bic.w	r3, r3, #532676608	; 0x1fc00000
   1b28e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1b292:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC |= (uint32_t)0x00400000;   // set USESYSDIV bit
   1b294:	4a35      	ldr	r2, [pc, #212]	; (1b36c <tm4c123_init+0x13c>)
   1b296:	4b35      	ldr	r3, [pc, #212]	; (1b36c <tm4c123_init+0x13c>)
   1b298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b29a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1b29e:	6613      	str	r3, [r2, #96]	; 0x60
    while(!(SYSCTL->RIS & 0x00000040)){};  // wait for Pll to lock, PLLLRIS bit
   1b2a0:	bf00      	nop
   1b2a2:	4b32      	ldr	r3, [pc, #200]	; (1b36c <tm4c123_init+0x13c>)
   1b2a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1b2aa:	2b00      	cmp	r3, #0
   1b2ac:	d0f9      	beq.n	1b2a2 <tm4c123_init+0x72>
    SYSCTL->RCC2 &= 0xFFFFF7FF;            // clear BYPASS2 bit, clears BYPASS as well
   1b2ae:	4a2f      	ldr	r2, [pc, #188]	; (1b36c <tm4c123_init+0x13c>)
   1b2b0:	4b2e      	ldr	r3, [pc, #184]	; (1b36c <tm4c123_init+0x13c>)
   1b2b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b2b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b2b8:	6713      	str	r3, [r2, #112]	; 0x70
    // write final configuration
    SYSCTL->RCC = (uint32_t)(0x07C00550);  // 0b0000 0 1111 1 0 0 000 000 0 0 0 10101 01 000 0
   1b2ba:	4b2c      	ldr	r3, [pc, #176]	; (1b36c <tm4c123_init+0x13c>)
   1b2bc:	4a2c      	ldr	r2, [pc, #176]	; (1b370 <tm4c123_init+0x140>)
   1b2be:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 = (uint32_t)(0xC1000000); // 0b 1100 0001 0000 0000 0000 0000 0000 0000
   1b2c0:	4b2a      	ldr	r3, [pc, #168]	; (1b36c <tm4c123_init+0x13c>)
   1b2c2:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
   1b2c6:	671a      	str	r2, [r3, #112]	; 0x70

    // enable high performance GPIO BUS Ctl
    SYSCTL->GPIOHBCTL = 0x0000003F;
   1b2c8:	4b28      	ldr	r3, [pc, #160]	; (1b36c <tm4c123_init+0x13c>)
   1b2ca:	223f      	movs	r2, #63	; 0x3f
   1b2cc:	66da      	str	r2, [r3, #108]	; 0x6c

    // enable GPIO Port F
        SYSCTL->RCGCGPIO |= 0x00000020;
   1b2ce:	4a27      	ldr	r2, [pc, #156]	; (1b36c <tm4c123_init+0x13c>)
   1b2d0:	4b26      	ldr	r3, [pc, #152]	; (1b36c <tm4c123_init+0x13c>)
   1b2d2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b2d6:	f043 0320 	orr.w	r3, r3, #32
   1b2da:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    //*((volatile uint32_t*)0x400FE608) = 0x00000021;
    while( !(SYSCTL->PRGPIO & 0x00000020)){};
   1b2de:	bf00      	nop
   1b2e0:	4b22      	ldr	r3, [pc, #136]	; (1b36c <tm4c123_init+0x13c>)
   1b2e2:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b2e6:	f003 0320 	and.w	r3, r3, #32
   1b2ea:	2b00      	cmp	r3, #0
   1b2ec:	d0f8      	beq.n	1b2e0 <tm4c123_init+0xb0>
//    gpio_high(GPIOF, 3);
//    //*((volatile uint32_t*)0x4005D3FC) = 0x00000007;

    // enable UART0 at 9600 baud (TX=A1, RX=A0)
    // enable UART0
    SYSCTL->RCGCUART = 0x00000001;
   1b2ee:	4b1f      	ldr	r3, [pc, #124]	; (1b36c <tm4c123_init+0x13c>)
   1b2f0:	2201      	movs	r2, #1
   1b2f2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    //*((volatile uint32_t*)0x400FE618) = 0x00000001;
    while(SYSCTL->PRUART != 0x00000001){};
   1b2f6:	bf00      	nop
   1b2f8:	4b1c      	ldr	r3, [pc, #112]	; (1b36c <tm4c123_init+0x13c>)
   1b2fa:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
   1b2fe:	2b01      	cmp	r3, #1
   1b300:	d1fa      	bne.n	1b2f8 <tm4c123_init+0xc8>
    //while( *((volatile uint32_t*)0x400FEA18) != 0x00000001){};

    // enable GPIO Port A
    SYSCTL->RCGCGPIO |= 0x00000001;
   1b302:	4a1a      	ldr	r2, [pc, #104]	; (1b36c <tm4c123_init+0x13c>)
   1b304:	4b19      	ldr	r3, [pc, #100]	; (1b36c <tm4c123_init+0x13c>)
   1b306:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b30a:	f043 0301 	orr.w	r3, r3, #1
   1b30e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    while( !(SYSCTL->PRGPIO & 0x00000001)){};
   1b312:	bf00      	nop
   1b314:	4b15      	ldr	r3, [pc, #84]	; (1b36c <tm4c123_init+0x13c>)
   1b316:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b31a:	f003 0301 	and.w	r3, r3, #1
   1b31e:	2b00      	cmp	r3, #0
   1b320:	d0f8      	beq.n	1b314 <tm4c123_init+0xe4>

//    // GPIOA already configured for UART0 after reset
//    gpio_init(GPIOA, 0, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);
//    gpio_init(GPIOA, 1, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);

    MAP_GPIOPinTypeUART(GPIO_PORTA_AHB_BASE, GPIO_PIN_0 | GPIO_PIN_1);
   1b322:	2103      	movs	r1, #3
   1b324:	4813      	ldr	r0, [pc, #76]	; (1b374 <tm4c123_init+0x144>)
   1b326:	f002 f8c5 	bl	1d4b4 <GPIOPinTypeUART>

    // BRD = IBRD + FRAC = UARTSysClk / (ClkDiv * BaudRate)
    // 520.8333 = 104  + 0.166 = 80MHz      / (16     * 9600    )
    // FBRD = (0.833333 * 64 + 0.5) ~ 53
    UART0->CTL &= ~0x00000001;
   1b32a:	4a13      	ldr	r2, [pc, #76]	; (1b378 <tm4c123_init+0x148>)
   1b32c:	4b12      	ldr	r3, [pc, #72]	; (1b378 <tm4c123_init+0x148>)
   1b32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b330:	f023 0301 	bic.w	r3, r3, #1
   1b334:	6313      	str	r3, [r2, #48]	; 0x30
    UART0->IBRD = 0x00000208;
   1b336:	4b10      	ldr	r3, [pc, #64]	; (1b378 <tm4c123_init+0x148>)
   1b338:	f44f 7202 	mov.w	r2, #520	; 0x208
   1b33c:	625a      	str	r2, [r3, #36]	; 0x24
    UART0->FBRD = 0x00000035;
   1b33e:	4b0e      	ldr	r3, [pc, #56]	; (1b378 <tm4c123_init+0x148>)
   1b340:	2235      	movs	r2, #53	; 0x35
   1b342:	629a      	str	r2, [r3, #40]	; 0x28
    UART0->LCRH = 0x00000060; // no stick parity, word length 8bit, FIFO enable, one STOP bit, odd parity, no parity check, no break
   1b344:	4b0c      	ldr	r3, [pc, #48]	; (1b378 <tm4c123_init+0x148>)
   1b346:	2260      	movs	r2, #96	; 0x60
   1b348:	62da      	str	r2, [r3, #44]	; 0x2c
    UART0->CC = 0x00000000;   // use SysClock
   1b34a:	4b0b      	ldr	r3, [pc, #44]	; (1b378 <tm4c123_init+0x148>)
   1b34c:	2200      	movs	r2, #0
   1b34e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    UART0->CTL = 0x00000300; // disable cts & rts, RXE, TXE, no loopback, 16x oversampling, TXRIS on IFLS match, no smart card, no low power, no SIR, UART enabled
   1b352:	4b09      	ldr	r3, [pc, #36]	; (1b378 <tm4c123_init+0x148>)
   1b354:	f44f 7240 	mov.w	r2, #768	; 0x300
   1b358:	631a      	str	r2, [r3, #48]	; 0x30
    UART0->CTL |= 0x00000001;
   1b35a:	4a07      	ldr	r2, [pc, #28]	; (1b378 <tm4c123_init+0x148>)
   1b35c:	4b06      	ldr	r3, [pc, #24]	; (1b378 <tm4c123_init+0x148>)
   1b35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b360:	f043 0301 	orr.w	r3, r3, #1
   1b364:	6313      	str	r3, [r2, #48]	; 0x30
    // to change settings in active mode: page 918 of reference
}
   1b366:	bf00      	nop
   1b368:	bd80      	pop	{r7, pc}
   1b36a:	bf00      	nop
   1b36c:	400fe000 	.word	0x400fe000
   1b370:	07c00550 	.word	0x07c00550
   1b374:	40058000 	.word	0x40058000
   1b378:	4000c000 	.word	0x4000c000

0001b37c <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
   1b37c:	b580      	push	{r7, lr}
   1b37e:	b082      	sub	sp, #8
   1b380:	af00      	add	r7, sp, #0
    uint32_t *pui32Src, *pui32Dest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_ldata;
   1b382:	4b13      	ldr	r3, [pc, #76]	; (1b3d0 <zero_loop+0x24>)
   1b384:	607b      	str	r3, [r7, #4]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b386:	4b13      	ldr	r3, [pc, #76]	; (1b3d4 <zero_loop+0x28>)
   1b388:	603b      	str	r3, [r7, #0]
   1b38a:	e007      	b.n	1b39c <ResetISR+0x20>
    {
        *pui32Dest++ = *pui32Src++;
   1b38c:	683b      	ldr	r3, [r7, #0]
   1b38e:	1d1a      	adds	r2, r3, #4
   1b390:	603a      	str	r2, [r7, #0]
   1b392:	687a      	ldr	r2, [r7, #4]
   1b394:	1d11      	adds	r1, r2, #4
   1b396:	6079      	str	r1, [r7, #4]
   1b398:	6812      	ldr	r2, [r2, #0]
   1b39a:	601a      	str	r2, [r3, #0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b39c:	683b      	ldr	r3, [r7, #0]
   1b39e:	4a0e      	ldr	r2, [pc, #56]	; (1b3d8 <zero_loop+0x2c>)
   1b3a0:	4293      	cmp	r3, r2
   1b3a2:	d3f3      	bcc.n	1b38c <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
   1b3a4:	4813      	ldr	r0, [pc, #76]	; (1b3f4 <IntDefaultHandler+0x8>)
   1b3a6:	4914      	ldr	r1, [pc, #80]	; (1b3f8 <IntDefaultHandler+0xc>)
   1b3a8:	f04f 0200 	mov.w	r2, #0

0001b3ac <zero_loop>:
   1b3ac:	4288      	cmp	r0, r1
   1b3ae:	bfb8      	it	lt
   1b3b0:	f840 2b04 	strlt.w	r2, [r0], #4
   1b3b4:	dbfa      	blt.n	1b3ac <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b3b6:	4a09      	ldr	r2, [pc, #36]	; (1b3dc <zero_loop+0x30>)
   1b3b8:	4b08      	ldr	r3, [pc, #32]	; (1b3dc <zero_loop+0x30>)
   1b3ba:	681b      	ldr	r3, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
   1b3bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b3c0:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    _start();
   1b3c2:	f7ff ff23 	bl	1b20c <_start>
}
   1b3c6:	bf00      	nop
   1b3c8:	3708      	adds	r7, #8
   1b3ca:	46bd      	mov	sp, r7
   1b3cc:	bd80      	pop	{r7, pc}
   1b3ce:	bf00      	nop
   1b3d0:	000252a0 	.word	0x000252a0
   1b3d4:	20000000 	.word	0x20000000
   1b3d8:	20000814 	.word	0x20000814
   1b3dc:	e000ed88 	.word	0xe000ed88

0001b3e0 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
   1b3e0:	b480      	push	{r7}
   1b3e2:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
   1b3e4:	e7fe      	b.n	1b3e4 <NmiSR+0x4>

0001b3e6 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
   1b3e6:	b480      	push	{r7}
   1b3e8:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
   1b3ea:	e7fe      	b.n	1b3ea <FaultISR+0x4>

0001b3ec <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
   1b3ec:	b480      	push	{r7}
   1b3ee:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1b3f0:	e7fe      	b.n	1b3f0 <IntDefaultHandler+0x4>
   1b3f2:	0000      	.short	0x0000
   1b3f4:	20000814 	.word	0x20000814
   1b3f8:	20001410 	.word	0x20001410

0001b3fc <mp_hal_stdin_rx_chr>:
} periph_uart_t;
#define UART0 ((periph_uart_t*)0x4000C000)
#endif

// Receive single character
int mp_hal_stdin_rx_chr(void) {
   1b3fc:	b480      	push	{r7}
   1b3fe:	b083      	sub	sp, #12
   1b400:	af00      	add	r7, sp, #0
    unsigned char c = 0;
   1b402:	2300      	movs	r3, #0
   1b404:	71fb      	strb	r3, [r7, #7]
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    // wait for RXFE to clear
    while (UART0->FR & (1 << 4)) {
   1b406:	bf00      	nop
   1b408:	4b07      	ldr	r3, [pc, #28]	; (1b428 <mp_hal_stdin_rx_chr+0x2c>)
   1b40a:	699b      	ldr	r3, [r3, #24]
   1b40c:	f003 0310 	and.w	r3, r3, #16
   1b410:	2b00      	cmp	r3, #0
   1b412:	d1f9      	bne.n	1b408 <mp_hal_stdin_rx_chr+0xc>
    }
    c = UART0->DR & 0xFF;
   1b414:	4b04      	ldr	r3, [pc, #16]	; (1b428 <mp_hal_stdin_rx_chr+0x2c>)
   1b416:	681b      	ldr	r3, [r3, #0]
   1b418:	71fb      	strb	r3, [r7, #7]
#endif
    return c;
   1b41a:	79fb      	ldrb	r3, [r7, #7]
}
   1b41c:	4618      	mov	r0, r3
   1b41e:	370c      	adds	r7, #12
   1b420:	46bd      	mov	sp, r7
   1b422:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b426:	4770      	bx	lr
   1b428:	4000c000 	.word	0x4000c000

0001b42c <mp_hal_stdout_tx_strn>:

// Send string of given length
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
   1b42c:	b480      	push	{r7}
   1b42e:	b083      	sub	sp, #12
   1b430:	af00      	add	r7, sp, #0
   1b432:	6078      	str	r0, [r7, #4]
   1b434:	6039      	str	r1, [r7, #0]
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    while (len--) {
   1b436:	e00c      	b.n	1b452 <mp_hal_stdout_tx_strn+0x26>
        // wait for TXFF to clear
        while (UART0->FR & (1 << 5)) {
   1b438:	bf00      	nop
   1b43a:	4b0b      	ldr	r3, [pc, #44]	; (1b468 <mp_hal_stdout_tx_strn+0x3c>)
   1b43c:	699b      	ldr	r3, [r3, #24]
   1b43e:	f003 0320 	and.w	r3, r3, #32
   1b442:	2b00      	cmp	r3, #0
   1b444:	d1f9      	bne.n	1b43a <mp_hal_stdout_tx_strn+0xe>
        }
        UART0->DR = *str++;
   1b446:	4908      	ldr	r1, [pc, #32]	; (1b468 <mp_hal_stdout_tx_strn+0x3c>)
   1b448:	687b      	ldr	r3, [r7, #4]
   1b44a:	1c5a      	adds	r2, r3, #1
   1b44c:	607a      	str	r2, [r7, #4]
   1b44e:	781b      	ldrb	r3, [r3, #0]
   1b450:	600b      	str	r3, [r1, #0]
    while (len--) {
   1b452:	683b      	ldr	r3, [r7, #0]
   1b454:	1e5a      	subs	r2, r3, #1
   1b456:	603a      	str	r2, [r7, #0]
   1b458:	2b00      	cmp	r3, #0
   1b45a:	d1ed      	bne.n	1b438 <mp_hal_stdout_tx_strn+0xc>
    }
#endif
}
   1b45c:	bf00      	nop
   1b45e:	370c      	adds	r7, #12
   1b460:	46bd      	mov	sp, r7
   1b462:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b466:	4770      	bx	lr
   1b468:	4000c000 	.word	0x4000c000

0001b46c <mp_hal_ticks_cpu_enable>:

//NORETURN void mp_hal_raise(HAL_StatusTypeDef status) {
//    mp_raise_OSError(mp_hal_status_to_errno_table[status]);
//}

void mp_hal_ticks_cpu_enable(void) {
   1b46c:	b480      	push	{r7}
   1b46e:	af00      	add	r7, sp, #0
//        DWT->LAR = 0xc5acce55;
//        #endif
//        DWT->CYCCNT = 0;
//        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
//    }
}
   1b470:	bf00      	nop
   1b472:	46bd      	mov	sp, r7
   1b474:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b478:	4770      	bx	lr

0001b47a <mp_hal_ticks_cpu>:

mp_uint_t mp_hal_ticks_cpu(void) {
   1b47a:	b480      	push	{r7}
   1b47c:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018));
   1b47e:	4b03      	ldr	r3, [pc, #12]	; (1b48c <mp_hal_ticks_cpu+0x12>)
   1b480:	681b      	ldr	r3, [r3, #0]
}
   1b482:	4618      	mov	r0, r3
   1b484:	46bd      	mov	sp, r7
   1b486:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b48a:	4770      	bx	lr
   1b48c:	e000e018 	.word	0xe000e018

0001b490 <mp_hal_ticks_ms>:

mp_uint_t mp_hal_ticks_ms(void) {
   1b490:	b598      	push	{r3, r4, r7, lr}
   1b492:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000);
   1b494:	4b06      	ldr	r3, [pc, #24]	; (1b4b0 <mp_hal_ticks_ms+0x20>)
   1b496:	681c      	ldr	r4, [r3, #0]
   1b498:	f002 f85a 	bl	1d550 <SysCtlClockGet>
   1b49c:	4602      	mov	r2, r0
   1b49e:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1b4a2:	fb03 f302 	mul.w	r3, r3, r2
   1b4a6:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1b4aa:	4618      	mov	r0, r3
   1b4ac:	bd98      	pop	{r3, r4, r7, pc}
   1b4ae:	bf00      	nop
   1b4b0:	e000e018 	.word	0xe000e018

0001b4b4 <mp_hal_ticks_us>:

mp_uint_t mp_hal_ticks_us(void) {
   1b4b4:	b598      	push	{r3, r4, r7, lr}
   1b4b6:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000000);
   1b4b8:	4b05      	ldr	r3, [pc, #20]	; (1b4d0 <mp_hal_ticks_us+0x1c>)
   1b4ba:	681c      	ldr	r4, [r3, #0]
   1b4bc:	f002 f848 	bl	1d550 <SysCtlClockGet>
   1b4c0:	4602      	mov	r2, r0
   1b4c2:	4b04      	ldr	r3, [pc, #16]	; (1b4d4 <mp_hal_ticks_us+0x20>)
   1b4c4:	fb03 f302 	mul.w	r3, r3, r2
   1b4c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1b4cc:	4618      	mov	r0, r3
   1b4ce:	bd98      	pop	{r3, r4, r7, pc}
   1b4d0:	e000e018 	.word	0xe000e018
   1b4d4:	002dc6c0 	.word	0x002dc6c0

0001b4d8 <mp_hal_gpio_clock_enable>:

void mp_hal_gpio_clock_enable(const uint32_t port) {
   1b4d8:	b580      	push	{r7, lr}
   1b4da:	b082      	sub	sp, #8
   1b4dc:	af00      	add	r7, sp, #0
   1b4de:	6078      	str	r0, [r7, #4]
    MAP_SysCtlPeripheralEnable(port);
   1b4e0:	6878      	ldr	r0, [r7, #4]
   1b4e2:	f002 f821 	bl	1d528 <SysCtlPeripheralEnable>
    while(!MAP_SysCtlPeripheralReady(port)){};
   1b4e6:	bf00      	nop
   1b4e8:	6878      	ldr	r0, [r7, #4]
   1b4ea:	f002 f807 	bl	1d4fc <SysCtlPeripheralReady>
   1b4ee:	4603      	mov	r3, r0
   1b4f0:	f083 0301 	eor.w	r3, r3, #1
   1b4f4:	b2db      	uxtb	r3, r3
   1b4f6:	2b00      	cmp	r3, #0
   1b4f8:	d1f6      	bne.n	1b4e8 <mp_hal_gpio_clock_enable+0x10>
}
   1b4fa:	bf00      	nop
   1b4fc:	3708      	adds	r7, #8
   1b4fe:	46bd      	mov	sp, r7
   1b500:	bd80      	pop	{r7, pc}

0001b502 <mp_hal_pin_config>:

void mp_hal_pin_config(mp_hal_pin_obj_t pin_obj, uint32_t dir, uint32_t type, uint32_t drive) {
   1b502:	b580      	push	{r7, lr}
   1b504:	b084      	sub	sp, #16
   1b506:	af00      	add	r7, sp, #0
   1b508:	60f8      	str	r0, [r7, #12]
   1b50a:	60b9      	str	r1, [r7, #8]
   1b50c:	607a      	str	r2, [r7, #4]
   1b50e:	603b      	str	r3, [r7, #0]
    mp_hal_gpio_clock_enable(pin_obj->port);
   1b510:	68fb      	ldr	r3, [r7, #12]
   1b512:	689b      	ldr	r3, [r3, #8]
   1b514:	4618      	mov	r0, r3
   1b516:	f7ff ffdf 	bl	1b4d8 <mp_hal_gpio_clock_enable>

    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, dir);
   1b51a:	68fb      	ldr	r3, [r7, #12]
   1b51c:	6898      	ldr	r0, [r3, #8]
   1b51e:	68fb      	ldr	r3, [r7, #12]
   1b520:	f893 3020 	ldrb.w	r3, [r3, #32]
   1b524:	68ba      	ldr	r2, [r7, #8]
   1b526:	4619      	mov	r1, r3
   1b528:	f001 fea2 	bl	1d270 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, drive, type);
   1b52c:	68fb      	ldr	r3, [r7, #12]
   1b52e:	6898      	ldr	r0, [r3, #8]
   1b530:	68fb      	ldr	r3, [r7, #12]
   1b532:	f893 1020 	ldrb.w	r1, [r3, #32]
   1b536:	687b      	ldr	r3, [r7, #4]
   1b538:	683a      	ldr	r2, [r7, #0]
   1b53a:	f001 febe 	bl	1d2ba <GPIOPadConfigSet>
}
   1b53e:	bf00      	nop
   1b540:	3710      	adds	r7, #16
   1b542:	46bd      	mov	sp, r7
   1b544:	bd80      	pop	{r7, pc}

0001b546 <mp_hal_pin_set_af>:

void mp_hal_pin_set_af(mp_hal_pin_obj_t pin_obj, uint8_t af_id) {
   1b546:	b580      	push	{r7, lr}
   1b548:	b082      	sub	sp, #8
   1b54a:	af00      	add	r7, sp, #0
   1b54c:	6078      	str	r0, [r7, #4]
   1b54e:	460b      	mov	r3, r1
   1b550:	70fb      	strb	r3, [r7, #3]
    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, GPIO_DIR_MODE_HW);
   1b552:	687b      	ldr	r3, [r7, #4]
   1b554:	6898      	ldr	r0, [r3, #8]
   1b556:	687b      	ldr	r3, [r7, #4]
   1b558:	f893 3020 	ldrb.w	r3, [r3, #32]
   1b55c:	2202      	movs	r2, #2
   1b55e:	4619      	mov	r1, r3
   1b560:	f001 fe86 	bl	1d270 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
   1b564:	687b      	ldr	r3, [r7, #4]
   1b566:	6898      	ldr	r0, [r3, #8]
   1b568:	687b      	ldr	r3, [r7, #4]
   1b56a:	f893 1020 	ldrb.w	r1, [r3, #32]
   1b56e:	2308      	movs	r3, #8
   1b570:	2201      	movs	r2, #1
   1b572:	f001 fea2 	bl	1d2ba <GPIOPadConfigSet>
    MAP_GPIOPinConfigure((pin_obj->af_list)[af_id].conf);
   1b576:	687b      	ldr	r3, [r7, #4]
   1b578:	691a      	ldr	r2, [r3, #16]
   1b57a:	78fb      	ldrb	r3, [r7, #3]
   1b57c:	011b      	lsls	r3, r3, #4
   1b57e:	4413      	add	r3, r2
   1b580:	68db      	ldr	r3, [r3, #12]
   1b582:	4618      	mov	r0, r3
   1b584:	f001 ff98 	bl	1d4b8 <GPIOPinConfigure>
}
   1b588:	bf00      	nop
   1b58a:	3708      	adds	r7, #8
   1b58c:	46bd      	mov	sp, r7
   1b58e:	bd80      	pop	{r7, pc}

0001b590 <mp_hal_set_interrupt_char>:

void mp_hal_set_interrupt_char(int c) {
   1b590:	b480      	push	{r7}
   1b592:	b083      	sub	sp, #12
   1b594:	af00      	add	r7, sp, #0
   1b596:	6078      	str	r0, [r7, #4]

}
   1b598:	bf00      	nop
   1b59a:	370c      	adds	r7, #12
   1b59c:	46bd      	mov	sp, r7
   1b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b5a2:	4770      	bx	lr

0001b5a4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1b5a4:	b480      	push	{r7}
   1b5a6:	b083      	sub	sp, #12
   1b5a8:	af00      	add	r7, sp, #0
   1b5aa:	6078      	str	r0, [r7, #4]
   1b5ac:	687b      	ldr	r3, [r7, #4]
   1b5ae:	f003 0303 	and.w	r3, r3, #3
   1b5b2:	2b00      	cmp	r3, #0
   1b5b4:	bf0c      	ite	eq
   1b5b6:	2301      	moveq	r3, #1
   1b5b8:	2300      	movne	r3, #0
   1b5ba:	b2db      	uxtb	r3, r3
   1b5bc:	4618      	mov	r0, r3
   1b5be:	370c      	adds	r7, #12
   1b5c0:	46bd      	mov	sp, r7
   1b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b5c6:	4770      	bx	lr

0001b5c8 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1b5c8:	b480      	push	{r7}
   1b5ca:	b083      	sub	sp, #12
   1b5cc:	af00      	add	r7, sp, #0
   1b5ce:	6078      	str	r0, [r7, #4]
   1b5d0:	687b      	ldr	r3, [r7, #4]
   1b5d2:	2b00      	cmp	r3, #0
   1b5d4:	d001      	beq.n	1b5da <mp_obj_new_bool+0x12>
   1b5d6:	4b04      	ldr	r3, [pc, #16]	; (1b5e8 <mp_obj_new_bool+0x20>)
   1b5d8:	e000      	b.n	1b5dc <mp_obj_new_bool+0x14>
   1b5da:	4b04      	ldr	r3, [pc, #16]	; (1b5ec <mp_obj_new_bool+0x24>)
   1b5dc:	4618      	mov	r0, r3
   1b5de:	370c      	adds	r7, #12
   1b5e0:	46bd      	mov	sp, r7
   1b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b5e6:	4770      	bx	lr
   1b5e8:	00021310 	.word	0x00021310
   1b5ec:	00021308 	.word	0x00021308

0001b5f0 <mp_obj_dict_get_map>:
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
   1b5f0:	b480      	push	{r7}
   1b5f2:	b083      	sub	sp, #12
   1b5f4:	af00      	add	r7, sp, #0
   1b5f6:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
   1b5f8:	687b      	ldr	r3, [r7, #4]
   1b5fa:	3304      	adds	r3, #4
}
   1b5fc:	4618      	mov	r0, r3
   1b5fe:	370c      	adds	r7, #12
   1b600:	46bd      	mov	sp, r7
   1b602:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b606:	4770      	bx	lr

0001b608 <pin_init0>:
/// how a particular object gets mapped to a pin.

// Pin class variables
STATIC bool pin_class_debug;

void pin_init0(void) {
   1b608:	b480      	push	{r7}
   1b60a:	af00      	add	r7, sp, #0
    MP_STATE_PORT(pin_class_mapper) = mp_const_none;
   1b60c:	4b07      	ldr	r3, [pc, #28]	; (1b62c <pin_init0+0x24>)
   1b60e:	4a08      	ldr	r2, [pc, #32]	; (1b630 <pin_init0+0x28>)
   1b610:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MP_STATE_PORT(pin_class_map_dict) = mp_const_none;
   1b614:	4b05      	ldr	r3, [pc, #20]	; (1b62c <pin_init0+0x24>)
   1b616:	4a06      	ldr	r2, [pc, #24]	; (1b630 <pin_init0+0x28>)
   1b618:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pin_class_debug = false;
   1b61c:	4b05      	ldr	r3, [pc, #20]	; (1b634 <pin_init0+0x2c>)
   1b61e:	2200      	movs	r2, #0
   1b620:	701a      	strb	r2, [r3, #0]
}
   1b622:	bf00      	nop
   1b624:	46bd      	mov	sp, r7
   1b626:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b62a:	4770      	bx	lr
   1b62c:	20001240 	.word	0x20001240
   1b630:	00022b54 	.word	0x00022b54
   1b634:	20001218 	.word	0x20001218

0001b638 <pin_find>:



// C API used to convert a user-supplied pin name into an ordinal pin number.
const pin_obj_t *pin_find(mp_obj_t user_obj) {
   1b638:	b580      	push	{r7, lr}
   1b63a:	b088      	sub	sp, #32
   1b63c:	af00      	add	r7, sp, #0
   1b63e:	6078      	str	r0, [r7, #4]
    const pin_obj_t *pin_obj;

    // If a pin was provided, then use it
    if (MP_OBJ_IS_TYPE(user_obj, &pin_mod)) {
   1b640:	6878      	ldr	r0, [r7, #4]
   1b642:	f7ff ffaf 	bl	1b5a4 <MP_OBJ_IS_OBJ>
   1b646:	4603      	mov	r3, r0
   1b648:	2b00      	cmp	r3, #0
   1b64a:	d016      	beq.n	1b67a <pin_find+0x42>
   1b64c:	687b      	ldr	r3, [r7, #4]
   1b64e:	681b      	ldr	r3, [r3, #0]
   1b650:	4a59      	ldr	r2, [pc, #356]	; (1b7b8 <pin_find+0x180>)
   1b652:	4293      	cmp	r3, r2
   1b654:	d111      	bne.n	1b67a <pin_find+0x42>
        pin_obj = MP_OBJ_TO_PTR(user_obj);
   1b656:	687b      	ldr	r3, [r7, #4]
   1b658:	61fb      	str	r3, [r7, #28]
        if (pin_class_debug) {
   1b65a:	4b58      	ldr	r3, [pc, #352]	; (1b7bc <pin_find+0x184>)
   1b65c:	781b      	ldrb	r3, [r3, #0]
   1b65e:	2b00      	cmp	r3, #0
   1b660:	d009      	beq.n	1b676 <pin_find+0x3e>
            printf("Pin map passed pin ");
   1b662:	4857      	ldr	r0, [pc, #348]	; (1b7c0 <pin_find+0x188>)
   1b664:	f7ff fc5c 	bl	1af20 <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1b668:	2100      	movs	r1, #0
   1b66a:	69f8      	ldr	r0, [r7, #28]
   1b66c:	f7f2 f898 	bl	d7a0 <mp_obj_print>
            printf("\n");
   1b670:	200a      	movs	r0, #10
   1b672:	f7ff fc7f 	bl	1af74 <putchar>
        }
        return pin_obj;
   1b676:	69fb      	ldr	r3, [r7, #28]
   1b678:	e099      	b.n	1b7ae <pin_find+0x176>
    }


    if (MP_STATE_PORT(pin_class_mapper) != mp_const_none) {
   1b67a:	4b52      	ldr	r3, [pc, #328]	; (1b7c4 <pin_find+0x18c>)
   1b67c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1b680:	4a51      	ldr	r2, [pc, #324]	; (1b7c8 <pin_find+0x190>)
   1b682:	4293      	cmp	r3, r2
   1b684:	d033      	beq.n	1b6ee <pin_find+0xb6>
        mp_obj_t o = mp_call_function_1(MP_STATE_PORT(pin_class_mapper), user_obj);
   1b686:	4b4f      	ldr	r3, [pc, #316]	; (1b7c4 <pin_find+0x18c>)
   1b688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1b68c:	6879      	ldr	r1, [r7, #4]
   1b68e:	4618      	mov	r0, r3
   1b690:	f7f0 fb2d 	bl	bcee <mp_call_function_1>
   1b694:	61b8      	str	r0, [r7, #24]
        if (o != mp_const_none) {
   1b696:	69bb      	ldr	r3, [r7, #24]
   1b698:	4a4b      	ldr	r2, [pc, #300]	; (1b7c8 <pin_find+0x190>)
   1b69a:	4293      	cmp	r3, r2
   1b69c:	d027      	beq.n	1b6ee <pin_find+0xb6>
            if (!MP_OBJ_IS_TYPE(o, &pin_mod)) {
   1b69e:	69b8      	ldr	r0, [r7, #24]
   1b6a0:	f7ff ff80 	bl	1b5a4 <MP_OBJ_IS_OBJ>
   1b6a4:	4603      	mov	r3, r0
   1b6a6:	f083 0301 	eor.w	r3, r3, #1
   1b6aa:	b2db      	uxtb	r3, r3
   1b6ac:	2b00      	cmp	r3, #0
   1b6ae:	d104      	bne.n	1b6ba <pin_find+0x82>
   1b6b0:	69bb      	ldr	r3, [r7, #24]
   1b6b2:	681b      	ldr	r3, [r3, #0]
   1b6b4:	4a40      	ldr	r2, [pc, #256]	; (1b7b8 <pin_find+0x180>)
   1b6b6:	4293      	cmp	r3, r2
   1b6b8:	d002      	beq.n	1b6c0 <pin_find+0x88>
                mp_raise_ValueError("Pin.mapper didn't return a Pin object");
   1b6ba:	4844      	ldr	r0, [pc, #272]	; (1b7cc <pin_find+0x194>)
   1b6bc:	f7f1 fbf3 	bl	cea6 <mp_raise_ValueError>
            }
            if (pin_class_debug) {
   1b6c0:	4b3e      	ldr	r3, [pc, #248]	; (1b7bc <pin_find+0x184>)
   1b6c2:	781b      	ldrb	r3, [r3, #0]
   1b6c4:	2b00      	cmp	r3, #0
   1b6c6:	d010      	beq.n	1b6ea <pin_find+0xb2>
                printf("Pin.mapper maps ");
   1b6c8:	4841      	ldr	r0, [pc, #260]	; (1b7d0 <pin_find+0x198>)
   1b6ca:	f7ff fc29 	bl	1af20 <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1b6ce:	2101      	movs	r1, #1
   1b6d0:	6878      	ldr	r0, [r7, #4]
   1b6d2:	f7f2 f865 	bl	d7a0 <mp_obj_print>
                printf(" to ");
   1b6d6:	483f      	ldr	r0, [pc, #252]	; (1b7d4 <pin_find+0x19c>)
   1b6d8:	f7ff fc22 	bl	1af20 <printf>
                mp_obj_print(o, PRINT_STR);
   1b6dc:	2100      	movs	r1, #0
   1b6de:	69b8      	ldr	r0, [r7, #24]
   1b6e0:	f7f2 f85e 	bl	d7a0 <mp_obj_print>
                printf("\n");
   1b6e4:	200a      	movs	r0, #10
   1b6e6:	f7ff fc45 	bl	1af74 <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1b6ea:	69bb      	ldr	r3, [r7, #24]
   1b6ec:	e05f      	b.n	1b7ae <pin_find+0x176>
        }
        // The pin mapping function returned mp_const_none, fall through to
        // other lookup methods.
    }

    if (MP_STATE_PORT(pin_class_map_dict) != mp_const_none) {
   1b6ee:	4b35      	ldr	r3, [pc, #212]	; (1b7c4 <pin_find+0x18c>)
   1b6f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1b6f4:	4a34      	ldr	r2, [pc, #208]	; (1b7c8 <pin_find+0x190>)
   1b6f6:	4293      	cmp	r3, r2
   1b6f8:	d02d      	beq.n	1b756 <pin_find+0x11e>
        mp_map_t *pin_map_map = mp_obj_dict_get_map(MP_STATE_PORT(pin_class_map_dict));
   1b6fa:	4b32      	ldr	r3, [pc, #200]	; (1b7c4 <pin_find+0x18c>)
   1b6fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1b700:	4618      	mov	r0, r3
   1b702:	f7ff ff75 	bl	1b5f0 <mp_obj_dict_get_map>
   1b706:	6178      	str	r0, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(pin_map_map, user_obj, MP_MAP_LOOKUP);
   1b708:	2200      	movs	r2, #0
   1b70a:	6879      	ldr	r1, [r7, #4]
   1b70c:	6978      	ldr	r0, [r7, #20]
   1b70e:	f7f1 fe41 	bl	d394 <mp_map_lookup>
   1b712:	6138      	str	r0, [r7, #16]
        if (elem != NULL && elem->value != MP_OBJ_NULL) {
   1b714:	693b      	ldr	r3, [r7, #16]
   1b716:	2b00      	cmp	r3, #0
   1b718:	d01d      	beq.n	1b756 <pin_find+0x11e>
   1b71a:	693b      	ldr	r3, [r7, #16]
   1b71c:	685b      	ldr	r3, [r3, #4]
   1b71e:	2b00      	cmp	r3, #0
   1b720:	d019      	beq.n	1b756 <pin_find+0x11e>
            mp_obj_t o = elem->value;
   1b722:	693b      	ldr	r3, [r7, #16]
   1b724:	685b      	ldr	r3, [r3, #4]
   1b726:	60fb      	str	r3, [r7, #12]
            if (pin_class_debug) {
   1b728:	4b24      	ldr	r3, [pc, #144]	; (1b7bc <pin_find+0x184>)
   1b72a:	781b      	ldrb	r3, [r3, #0]
   1b72c:	2b00      	cmp	r3, #0
   1b72e:	d010      	beq.n	1b752 <pin_find+0x11a>
                printf("Pin.map_dict maps ");
   1b730:	4829      	ldr	r0, [pc, #164]	; (1b7d8 <pin_find+0x1a0>)
   1b732:	f7ff fbf5 	bl	1af20 <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1b736:	2101      	movs	r1, #1
   1b738:	6878      	ldr	r0, [r7, #4]
   1b73a:	f7f2 f831 	bl	d7a0 <mp_obj_print>
                printf(" to ");
   1b73e:	4825      	ldr	r0, [pc, #148]	; (1b7d4 <pin_find+0x19c>)
   1b740:	f7ff fbee 	bl	1af20 <printf>
                mp_obj_print(o, PRINT_STR);
   1b744:	2100      	movs	r1, #0
   1b746:	68f8      	ldr	r0, [r7, #12]
   1b748:	f7f2 f82a 	bl	d7a0 <mp_obj_print>
                printf("\n");
   1b74c:	200a      	movs	r0, #10
   1b74e:	f7ff fc11 	bl	1af74 <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1b752:	68fb      	ldr	r3, [r7, #12]
   1b754:	e02b      	b.n	1b7ae <pin_find+0x176>
        }
    }

    // See if the pin name matches a board pin
    pin_obj = pin_find_named_pin(&pin_board_pins_locals_dict, user_obj);
   1b756:	6879      	ldr	r1, [r7, #4]
   1b758:	4820      	ldr	r0, [pc, #128]	; (1b7dc <pin_find+0x1a4>)
   1b75a:	f000 fbeb 	bl	1bf34 <pin_find_named_pin>
   1b75e:	61f8      	str	r0, [r7, #28]
    if (pin_obj) {
   1b760:	69fb      	ldr	r3, [r7, #28]
   1b762:	2b00      	cmp	r3, #0
   1b764:	d016      	beq.n	1b794 <pin_find+0x15c>
        if (pin_class_debug) {
   1b766:	4b15      	ldr	r3, [pc, #84]	; (1b7bc <pin_find+0x184>)
   1b768:	781b      	ldrb	r3, [r3, #0]
   1b76a:	2b00      	cmp	r3, #0
   1b76c:	d010      	beq.n	1b790 <pin_find+0x158>
            printf("Pin.board maps ");
   1b76e:	481c      	ldr	r0, [pc, #112]	; (1b7e0 <pin_find+0x1a8>)
   1b770:	f7ff fbd6 	bl	1af20 <printf>
            mp_obj_print(user_obj, PRINT_REPR);
   1b774:	2101      	movs	r1, #1
   1b776:	6878      	ldr	r0, [r7, #4]
   1b778:	f7f2 f812 	bl	d7a0 <mp_obj_print>
            printf(" to ");
   1b77c:	4815      	ldr	r0, [pc, #84]	; (1b7d4 <pin_find+0x19c>)
   1b77e:	f7ff fbcf 	bl	1af20 <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1b782:	2100      	movs	r1, #0
   1b784:	69f8      	ldr	r0, [r7, #28]
   1b786:	f7f2 f80b 	bl	d7a0 <mp_obj_print>
            printf("\n");
   1b78a:	200a      	movs	r0, #10
   1b78c:	f7ff fbf2 	bl	1af74 <putchar>
        }
        return pin_obj;
   1b790:	69fb      	ldr	r3, [r7, #28]
   1b792:	e00c      	b.n	1b7ae <pin_find+0x176>
//            printf("\n");
//        }
//        return pin_obj;
//    }

    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "Pin(%s) doesn't exist", mp_obj_str_get_str(user_obj)));
   1b794:	6878      	ldr	r0, [r7, #4]
   1b796:	f7f9 fd75 	bl	15284 <mp_obj_str_get_str>
   1b79a:	4603      	mov	r3, r0
   1b79c:	461a      	mov	r2, r3
   1b79e:	4911      	ldr	r1, [pc, #68]	; (1b7e4 <pin_find+0x1ac>)
   1b7a0:	4811      	ldr	r0, [pc, #68]	; (1b7e8 <pin_find+0x1b0>)
   1b7a2:	f7f3 fe2d 	bl	f400 <mp_obj_new_exception_msg_varg>
   1b7a6:	4603      	mov	r3, r0
   1b7a8:	4618      	mov	r0, r3
   1b7aa:	f7e4 fd99 	bl	2e0 <nlr_jump>
}
   1b7ae:	4618      	mov	r0, r3
   1b7b0:	3720      	adds	r7, #32
   1b7b2:	46bd      	mov	sp, r7
   1b7b4:	bd80      	pop	{r7, pc}
   1b7b6:	bf00      	nop
   1b7b8:	000246d0 	.word	0x000246d0
   1b7bc:	20001218 	.word	0x20001218
   1b7c0:	000243a0 	.word	0x000243a0
   1b7c4:	20001240 	.word	0x20001240
   1b7c8:	00022b54 	.word	0x00022b54
   1b7cc:	000243b4 	.word	0x000243b4
   1b7d0:	000243dc 	.word	0x000243dc
   1b7d4:	000243f0 	.word	0x000243f0
   1b7d8:	000243f8 	.word	0x000243f8
   1b7dc:	00024ed4 	.word	0x00024ed4
   1b7e0:	0002440c 	.word	0x0002440c
   1b7e4:	0002441c 	.word	0x0002441c
   1b7e8:	00021e58 	.word	0x00021e58

0001b7ec <pin_print>:

/// \method __str__()
/// Return a string describing the pin object.
STATIC void pin_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1b7ec:	b580      	push	{r7, lr}
   1b7ee:	b08c      	sub	sp, #48	; 0x30
   1b7f0:	af00      	add	r7, sp, #0
   1b7f2:	60f8      	str	r0, [r7, #12]
   1b7f4:	60b9      	str	r1, [r7, #8]
   1b7f6:	607a      	str	r2, [r7, #4]

    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1b7f8:	68bb      	ldr	r3, [r7, #8]
   1b7fa:	623b      	str	r3, [r7, #32]

    // pin name
    mp_printf(print, "Pin(Pin.cpu.%q, mode=Pin.", self->name);
   1b7fc:	6a3b      	ldr	r3, [r7, #32]
   1b7fe:	685b      	ldr	r3, [r3, #4]
   1b800:	461a      	mov	r2, r3
   1b802:	4944      	ldr	r1, [pc, #272]	; (1b914 <pin_print+0x128>)
   1b804:	68f8      	ldr	r0, [r7, #12]
   1b806:	f7e6 fb43 	bl	1e90 <mp_printf>

    uint32_t dir = MAP_GPIODirModeGet(self->port, self->pin_mask);
   1b80a:	6a3b      	ldr	r3, [r7, #32]
   1b80c:	689a      	ldr	r2, [r3, #8]
   1b80e:	6a3b      	ldr	r3, [r7, #32]
   1b810:	f893 3020 	ldrb.w	r3, [r3, #32]
   1b814:	4619      	mov	r1, r3
   1b816:	4610      	mov	r0, r2
   1b818:	f001 fd3d 	bl	1d296 <GPIODirModeGet>
   1b81c:	61f8      	str	r0, [r7, #28]
    uint32_t type;
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, NULL, &type);
   1b81e:	6a3b      	ldr	r3, [r7, #32]
   1b820:	6898      	ldr	r0, [r3, #8]
   1b822:	6a3b      	ldr	r3, [r7, #32]
   1b824:	f893 1020 	ldrb.w	r1, [r3, #32]
   1b828:	f107 0310 	add.w	r3, r7, #16
   1b82c:	2200      	movs	r2, #0
   1b82e:	f001 fdc7 	bl	1d3c0 <GPIOPadConfigGet>
        // analog
        mp_print_str(print, "ANALOG)");

    } else {
        // IO mode
        bool af = false;
   1b832:	2300      	movs	r3, #0
   1b834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        qstr mode_qst;
        if (dir & GPIO_DIR_MODE_IN) {
            mode_qst = MP_QSTR_IN;
        } else if (dir & GPIO_DIR_MODE_OUT) {
   1b838:	69fb      	ldr	r3, [r7, #28]
   1b83a:	f003 0301 	and.w	r3, r3, #1
   1b83e:	2b00      	cmp	r3, #0
   1b840:	d00a      	beq.n	1b858 <pin_print+0x6c>
            if (type & GPIO_PIN_TYPE_OD){
   1b842:	693b      	ldr	r3, [r7, #16]
   1b844:	f003 0309 	and.w	r3, r3, #9
   1b848:	2b00      	cmp	r3, #0
   1b84a:	d002      	beq.n	1b852 <pin_print+0x66>
                mode_qst = MP_QSTR_OPEN_DRAIN;
   1b84c:	23d2      	movs	r3, #210	; 0xd2
   1b84e:	62bb      	str	r3, [r7, #40]	; 0x28
   1b850:	e014      	b.n	1b87c <pin_print+0x90>
            } else {
                mode_qst = MP_QSTR_OUT;
   1b852:	23d4      	movs	r3, #212	; 0xd4
   1b854:	62bb      	str	r3, [r7, #40]	; 0x28
   1b856:	e011      	b.n	1b87c <pin_print+0x90>
            }
        } else {
            af = true;
   1b858:	2301      	movs	r3, #1
   1b85a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if (dir & GPIO_DIR_MODE_HW) {
   1b85e:	69fb      	ldr	r3, [r7, #28]
   1b860:	f003 0302 	and.w	r3, r3, #2
   1b864:	2b00      	cmp	r3, #0
   1b866:	d009      	beq.n	1b87c <pin_print+0x90>
                if (type & GPIO_PIN_TYPE_OD){
   1b868:	693b      	ldr	r3, [r7, #16]
   1b86a:	f003 0309 	and.w	r3, r3, #9
   1b86e:	2b00      	cmp	r3, #0
   1b870:	d002      	beq.n	1b878 <pin_print+0x8c>
                   mode_qst = MP_QSTR_ALT_OPEN_DRAIN;
   1b872:	23b3      	movs	r3, #179	; 0xb3
   1b874:	62bb      	str	r3, [r7, #40]	; 0x28
   1b876:	e001      	b.n	1b87c <pin_print+0x90>
                } else {
                    mode_qst = MP_QSTR_ALT;
   1b878:	23b2      	movs	r3, #178	; 0xb2
   1b87a:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }
        }
        mp_print_str(print, qstr_str(mode_qst));
   1b87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1b87e:	f7e5 fcb7 	bl	11f0 <qstr_str>
   1b882:	4603      	mov	r3, r0
   1b884:	4619      	mov	r1, r3
   1b886:	68f8      	ldr	r0, [r7, #12]
   1b888:	f7e5 fff0 	bl	186c <mp_print_str>

        // pull mode
        qstr pull_qst = MP_QSTR_NULL;
   1b88c:	2300      	movs	r3, #0
   1b88e:	627b      	str	r3, [r7, #36]	; 0x24
        if (type == GPIO_PIN_TYPE_STD_WPU) {
   1b890:	693b      	ldr	r3, [r7, #16]
   1b892:	2b0a      	cmp	r3, #10
   1b894:	d102      	bne.n	1b89c <pin_print+0xb0>
            pull_qst = MP_QSTR_PULL_UP;
   1b896:	23d8      	movs	r3, #216	; 0xd8
   1b898:	627b      	str	r3, [r7, #36]	; 0x24
   1b89a:	e004      	b.n	1b8a6 <pin_print+0xba>
        } else if (type == GPIO_PIN_TYPE_STD_WPD) {
   1b89c:	693b      	ldr	r3, [r7, #16]
   1b89e:	2b0c      	cmp	r3, #12
   1b8a0:	d101      	bne.n	1b8a6 <pin_print+0xba>
            pull_qst = MP_QSTR_PULL_DOWN;
   1b8a2:	23d6      	movs	r3, #214	; 0xd6
   1b8a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (pull_qst != MP_QSTR_NULL) {
   1b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b8a8:	2b00      	cmp	r3, #0
   1b8aa:	d004      	beq.n	1b8b6 <pin_print+0xca>
            mp_printf(print, ", pull=Pin.%q", pull_qst);
   1b8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b8ae:	491a      	ldr	r1, [pc, #104]	; (1b918 <pin_print+0x12c>)
   1b8b0:	68f8      	ldr	r0, [r7, #12]
   1b8b2:	f7e6 faed 	bl	1e90 <mp_printf>
        }

        // AF mode
        if (af) {
   1b8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b8ba:	2b00      	cmp	r3, #0
   1b8bc:	d022      	beq.n	1b904 <pin_print+0x118>
            mp_uint_t af_idx = mp_hal_pin_get_af(self);
   1b8be:	6a3b      	ldr	r3, [r7, #32]
   1b8c0:	68db      	ldr	r3, [r3, #12]
   1b8c2:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1b8c6:	6a3b      	ldr	r3, [r7, #32]
   1b8c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1b8cc:	009b      	lsls	r3, r3, #2
   1b8ce:	fa22 f303 	lsr.w	r3, r2, r3
   1b8d2:	f003 030f 	and.w	r3, r3, #15
   1b8d6:	61bb      	str	r3, [r7, #24]
            const pin_af_obj_t *af_obj = pin_find_af_by_index(self, af_idx);
   1b8d8:	69b9      	ldr	r1, [r7, #24]
   1b8da:	6a38      	ldr	r0, [r7, #32]
   1b8dc:	f000 fb75 	bl	1bfca <pin_find_af_by_index>
   1b8e0:	6178      	str	r0, [r7, #20]
            if (af_obj == NULL) {
   1b8e2:	697b      	ldr	r3, [r7, #20]
   1b8e4:	2b00      	cmp	r3, #0
   1b8e6:	d105      	bne.n	1b8f4 <pin_print+0x108>
                mp_printf(print, ", af=%d)", af_idx);
   1b8e8:	69ba      	ldr	r2, [r7, #24]
   1b8ea:	490c      	ldr	r1, [pc, #48]	; (1b91c <pin_print+0x130>)
   1b8ec:	68f8      	ldr	r0, [r7, #12]
   1b8ee:	f7e6 facf 	bl	1e90 <mp_printf>
            }
        } else {
            mp_print_str(print, ")");
        }
    }
}
   1b8f2:	e00b      	b.n	1b90c <pin_print+0x120>
                mp_printf(print, ", af=Pin.%q)", af_obj->name);
   1b8f4:	697b      	ldr	r3, [r7, #20]
   1b8f6:	681b      	ldr	r3, [r3, #0]
   1b8f8:	461a      	mov	r2, r3
   1b8fa:	4909      	ldr	r1, [pc, #36]	; (1b920 <pin_print+0x134>)
   1b8fc:	68f8      	ldr	r0, [r7, #12]
   1b8fe:	f7e6 fac7 	bl	1e90 <mp_printf>
}
   1b902:	e003      	b.n	1b90c <pin_print+0x120>
            mp_print_str(print, ")");
   1b904:	4907      	ldr	r1, [pc, #28]	; (1b924 <pin_print+0x138>)
   1b906:	68f8      	ldr	r0, [r7, #12]
   1b908:	f7e5 ffb0 	bl	186c <mp_print_str>
}
   1b90c:	bf00      	nop
   1b90e:	3730      	adds	r7, #48	; 0x30
   1b910:	46bd      	mov	sp, r7
   1b912:	bd80      	pop	{r7, pc}
   1b914:	00024434 	.word	0x00024434
   1b918:	00024450 	.word	0x00024450
   1b91c:	00024460 	.word	0x00024460
   1b920:	0002446c 	.word	0x0002446c
   1b924:	0002447c 	.word	0x0002447c

0001b928 <pin_make_new>:
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *pin, size_t n_args, const mp_obj_t *args, mp_map_t *kw_args);

/// \classmethod \constructor(id, ...)
/// Create a new Pin object associated with the id.  If additional arguments are given,
/// they are used to initialise the pin.  See `init`.
mp_obj_t pin_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1b928:	b580      	push	{r7, lr}
   1b92a:	b08a      	sub	sp, #40	; 0x28
   1b92c:	af02      	add	r7, sp, #8
   1b92e:	60f8      	str	r0, [r7, #12]
   1b930:	60b9      	str	r1, [r7, #8]
   1b932:	607a      	str	r2, [r7, #4]
   1b934:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, MP_OBJ_FUN_ARGS_MAX, true);
   1b936:	2301      	movs	r3, #1
   1b938:	9300      	str	r3, [sp, #0]
   1b93a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b93e:	2201      	movs	r2, #1
   1b940:	6879      	ldr	r1, [r7, #4]
   1b942:	68b8      	ldr	r0, [r7, #8]
   1b944:	f7f1 fae0 	bl	cf08 <mp_arg_check_num>

    // Run an argument through the mapper and return the result.
    const pin_obj_t *pin = pin_find(args[0]);
   1b948:	683b      	ldr	r3, [r7, #0]
   1b94a:	681b      	ldr	r3, [r3, #0]
   1b94c:	4618      	mov	r0, r3
   1b94e:	f7ff fe73 	bl	1b638 <pin_find>
   1b952:	61f8      	str	r0, [r7, #28]

    if (n_args > 1 || n_kw > 0) {
   1b954:	68bb      	ldr	r3, [r7, #8]
   1b956:	2b01      	cmp	r3, #1
   1b958:	d802      	bhi.n	1b960 <pin_make_new+0x38>
   1b95a:	687b      	ldr	r3, [r7, #4]
   1b95c:	2b00      	cmp	r3, #0
   1b95e:	d012      	beq.n	1b986 <pin_make_new+0x5e>
        // pin mode given, so configure this GPIO
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
   1b960:	68bb      	ldr	r3, [r7, #8]
   1b962:	009b      	lsls	r3, r3, #2
   1b964:	683a      	ldr	r2, [r7, #0]
   1b966:	441a      	add	r2, r3
   1b968:	f107 0310 	add.w	r3, r7, #16
   1b96c:	6879      	ldr	r1, [r7, #4]
   1b96e:	4618      	mov	r0, r3
   1b970:	f7f1 fc4b 	bl	d20a <mp_map_init_fixed_table>
        pin_obj_init_helper(pin, n_args - 1, args + 1, &kw_args);
   1b974:	68bb      	ldr	r3, [r7, #8]
   1b976:	1e59      	subs	r1, r3, #1
   1b978:	683b      	ldr	r3, [r7, #0]
   1b97a:	1d1a      	adds	r2, r3, #4
   1b97c:	f107 0310 	add.w	r3, r7, #16
   1b980:	69f8      	ldr	r0, [r7, #28]
   1b982:	f000 f8c7 	bl	1bb14 <pin_obj_init_helper>
    }

    return MP_OBJ_FROM_PTR(pin);
   1b986:	69fb      	ldr	r3, [r7, #28]
}
   1b988:	4618      	mov	r0, r3
   1b98a:	3720      	adds	r7, #32
   1b98c:	46bd      	mov	sp, r7
   1b98e:	bd80      	pop	{r7, pc}

0001b990 <pin_call>:

// fast method for getting/setting pin value
STATIC mp_obj_t pin_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1b990:	b5b0      	push	{r4, r5, r7, lr}
   1b992:	b088      	sub	sp, #32
   1b994:	af02      	add	r7, sp, #8
   1b996:	60f8      	str	r0, [r7, #12]
   1b998:	60b9      	str	r1, [r7, #8]
   1b99a:	607a      	str	r2, [r7, #4]
   1b99c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   1b99e:	2300      	movs	r3, #0
   1b9a0:	9300      	str	r3, [sp, #0]
   1b9a2:	2301      	movs	r3, #1
   1b9a4:	2200      	movs	r2, #0
   1b9a6:	6879      	ldr	r1, [r7, #4]
   1b9a8:	68b8      	ldr	r0, [r7, #8]
   1b9aa:	f7f1 faad 	bl	cf08 <mp_arg_check_num>
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1b9ae:	68fb      	ldr	r3, [r7, #12]
   1b9b0:	617b      	str	r3, [r7, #20]
    if (n_args == 0) {
   1b9b2:	68bb      	ldr	r3, [r7, #8]
   1b9b4:	2b00      	cmp	r3, #0
   1b9b6:	d10d      	bne.n	1b9d4 <pin_call+0x44>
        // get pin
        return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_read(self));
   1b9b8:	697b      	ldr	r3, [r7, #20]
   1b9ba:	689a      	ldr	r2, [r3, #8]
   1b9bc:	697b      	ldr	r3, [r7, #20]
   1b9be:	f893 3020 	ldrb.w	r3, [r3, #32]
   1b9c2:	4619      	mov	r1, r3
   1b9c4:	4610      	mov	r0, r2
   1b9c6:	f001 fd63 	bl	1d490 <GPIOPinRead>
   1b9ca:	4603      	mov	r3, r0
   1b9cc:	005b      	lsls	r3, r3, #1
   1b9ce:	f043 0301 	orr.w	r3, r3, #1
   1b9d2:	e017      	b.n	1ba04 <pin_call+0x74>
    } else {
        // set pin
        mp_hal_pin_write(self, mp_obj_is_true(args[0]));
   1b9d4:	697b      	ldr	r3, [r7, #20]
   1b9d6:	689c      	ldr	r4, [r3, #8]
   1b9d8:	697b      	ldr	r3, [r7, #20]
   1b9da:	f893 5020 	ldrb.w	r5, [r3, #32]
   1b9de:	683b      	ldr	r3, [r7, #0]
   1b9e0:	681b      	ldr	r3, [r3, #0]
   1b9e2:	4618      	mov	r0, r3
   1b9e4:	f7f1 ff5c 	bl	d8a0 <mp_obj_is_true>
   1b9e8:	4603      	mov	r3, r0
   1b9ea:	2b00      	cmp	r3, #0
   1b9ec:	d003      	beq.n	1b9f6 <pin_call+0x66>
   1b9ee:	697b      	ldr	r3, [r7, #20]
   1b9f0:	f893 3020 	ldrb.w	r3, [r3, #32]
   1b9f4:	e000      	b.n	1b9f8 <pin_call+0x68>
   1b9f6:	2300      	movs	r3, #0
   1b9f8:	461a      	mov	r2, r3
   1b9fa:	4629      	mov	r1, r5
   1b9fc:	4620      	mov	r0, r4
   1b9fe:	f001 fd4a 	bl	1d496 <GPIOPinWrite>
        return mp_const_none;
   1ba02:	4b02      	ldr	r3, [pc, #8]	; (1ba0c <pin_call+0x7c>)
    }
}
   1ba04:	4618      	mov	r0, r3
   1ba06:	3718      	adds	r7, #24
   1ba08:	46bd      	mov	sp, r7
   1ba0a:	bdb0      	pop	{r4, r5, r7, pc}
   1ba0c:	00022b54 	.word	0x00022b54

0001ba10 <pin_mapper>:

/// \classmethod mapper([fun])
/// Get or set the pin mapper function.
STATIC mp_obj_t pin_mapper(size_t n_args, const mp_obj_t *args) {
   1ba10:	b480      	push	{r7}
   1ba12:	b083      	sub	sp, #12
   1ba14:	af00      	add	r7, sp, #0
   1ba16:	6078      	str	r0, [r7, #4]
   1ba18:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1ba1a:	687b      	ldr	r3, [r7, #4]
   1ba1c:	2b01      	cmp	r3, #1
   1ba1e:	d906      	bls.n	1ba2e <pin_mapper+0x1e>
        MP_STATE_PORT(pin_class_mapper) = args[1];
   1ba20:	683b      	ldr	r3, [r7, #0]
   1ba22:	685b      	ldr	r3, [r3, #4]
   1ba24:	4a06      	ldr	r2, [pc, #24]	; (1ba40 <pin_mapper+0x30>)
   1ba26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        return mp_const_none;
   1ba2a:	4b06      	ldr	r3, [pc, #24]	; (1ba44 <pin_mapper+0x34>)
   1ba2c:	e002      	b.n	1ba34 <pin_mapper+0x24>
    }
    return MP_STATE_PORT(pin_class_mapper);
   1ba2e:	4b04      	ldr	r3, [pc, #16]	; (1ba40 <pin_mapper+0x30>)
   1ba30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
   1ba34:	4618      	mov	r0, r3
   1ba36:	370c      	adds	r7, #12
   1ba38:	46bd      	mov	sp, r7
   1ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba3e:	4770      	bx	lr
   1ba40:	20001240 	.word	0x20001240
   1ba44:	00022b54 	.word	0x00022b54

0001ba48 <pin_map_dict>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_mapper_fun_obj, 1, 2, pin_mapper);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_mapper_obj, MP_ROM_PTR(&pin_mapper_fun_obj));

/// \classmethod dict([dict])
/// Get or set the pin mapper dictionary.
STATIC mp_obj_t pin_map_dict(size_t n_args, const mp_obj_t *args) {
   1ba48:	b480      	push	{r7}
   1ba4a:	b083      	sub	sp, #12
   1ba4c:	af00      	add	r7, sp, #0
   1ba4e:	6078      	str	r0, [r7, #4]
   1ba50:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1ba52:	687b      	ldr	r3, [r7, #4]
   1ba54:	2b01      	cmp	r3, #1
   1ba56:	d906      	bls.n	1ba66 <pin_map_dict+0x1e>
        MP_STATE_PORT(pin_class_map_dict) = args[1];
   1ba58:	683b      	ldr	r3, [r7, #0]
   1ba5a:	685b      	ldr	r3, [r3, #4]
   1ba5c:	4a06      	ldr	r2, [pc, #24]	; (1ba78 <pin_map_dict+0x30>)
   1ba5e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        return mp_const_none;
   1ba62:	4b06      	ldr	r3, [pc, #24]	; (1ba7c <pin_map_dict+0x34>)
   1ba64:	e002      	b.n	1ba6c <pin_map_dict+0x24>
    }
    return MP_STATE_PORT(pin_class_map_dict);
   1ba66:	4b04      	ldr	r3, [pc, #16]	; (1ba78 <pin_map_dict+0x30>)
   1ba68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
   1ba6c:	4618      	mov	r0, r3
   1ba6e:	370c      	adds	r7, #12
   1ba70:	46bd      	mov	sp, r7
   1ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba76:	4770      	bx	lr
   1ba78:	20001240 	.word	0x20001240
   1ba7c:	00022b54 	.word	0x00022b54

0001ba80 <pin_af_list>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_map_dict_fun_obj, 1, 2, pin_map_dict);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_map_dict_obj, MP_ROM_PTR(&pin_map_dict_fun_obj));

/// \classmethod af_list()
/// Returns an array of alternate functions available for this pin.
STATIC mp_obj_t pin_af_list(mp_obj_t self_in) {
   1ba80:	b580      	push	{r7, lr}
   1ba82:	b086      	sub	sp, #24
   1ba84:	af00      	add	r7, sp, #0
   1ba86:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1ba88:	687b      	ldr	r3, [r7, #4]
   1ba8a:	60fb      	str	r3, [r7, #12]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1ba8c:	2100      	movs	r1, #0
   1ba8e:	2000      	movs	r0, #0
   1ba90:	f7f5 fda3 	bl	115da <mp_obj_new_list>
   1ba94:	60b8      	str	r0, [r7, #8]

    const pin_af_obj_t *af = self->af_list;
   1ba96:	68fb      	ldr	r3, [r7, #12]
   1ba98:	691b      	ldr	r3, [r3, #16]
   1ba9a:	617b      	str	r3, [r7, #20]
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1ba9c:	2300      	movs	r3, #0
   1ba9e:	613b      	str	r3, [r7, #16]
   1baa0:	e009      	b.n	1bab6 <pin_af_list+0x36>
        mp_obj_list_append(result, MP_OBJ_FROM_PTR(af));
   1baa2:	6979      	ldr	r1, [r7, #20]
   1baa4:	68b8      	ldr	r0, [r7, #8]
   1baa6:	f7f5 f92c 	bl	10d02 <mp_obj_list_append>
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1baaa:	693b      	ldr	r3, [r7, #16]
   1baac:	3301      	adds	r3, #1
   1baae:	613b      	str	r3, [r7, #16]
   1bab0:	697b      	ldr	r3, [r7, #20]
   1bab2:	3310      	adds	r3, #16
   1bab4:	617b      	str	r3, [r7, #20]
   1bab6:	68fb      	ldr	r3, [r7, #12]
   1bab8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1babc:	461a      	mov	r2, r3
   1babe:	693b      	ldr	r3, [r7, #16]
   1bac0:	429a      	cmp	r2, r3
   1bac2:	d8ee      	bhi.n	1baa2 <pin_af_list+0x22>
    }
    return result;
   1bac4:	68bb      	ldr	r3, [r7, #8]
}
   1bac6:	4618      	mov	r0, r3
   1bac8:	3718      	adds	r7, #24
   1baca:	46bd      	mov	sp, r7
   1bacc:	bd80      	pop	{r7, pc}

0001bace <pin_debug>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_af_list_obj, pin_af_list);

/// \classmethod debug([state])
/// Get or set the debugging state (`True` or `False` for on or off).
STATIC mp_obj_t pin_debug(size_t n_args, const mp_obj_t *args) {
   1bace:	b580      	push	{r7, lr}
   1bad0:	b082      	sub	sp, #8
   1bad2:	af00      	add	r7, sp, #0
   1bad4:	6078      	str	r0, [r7, #4]
   1bad6:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1bad8:	687b      	ldr	r3, [r7, #4]
   1bada:	2b01      	cmp	r3, #1
   1badc:	d90b      	bls.n	1baf6 <pin_debug+0x28>
        pin_class_debug = mp_obj_is_true(args[1]);
   1bade:	683b      	ldr	r3, [r7, #0]
   1bae0:	3304      	adds	r3, #4
   1bae2:	681b      	ldr	r3, [r3, #0]
   1bae4:	4618      	mov	r0, r3
   1bae6:	f7f1 fedb 	bl	d8a0 <mp_obj_is_true>
   1baea:	4603      	mov	r3, r0
   1baec:	461a      	mov	r2, r3
   1baee:	4b07      	ldr	r3, [pc, #28]	; (1bb0c <pin_debug+0x3e>)
   1baf0:	701a      	strb	r2, [r3, #0]
        return mp_const_none;
   1baf2:	4b07      	ldr	r3, [pc, #28]	; (1bb10 <pin_debug+0x42>)
   1baf4:	e005      	b.n	1bb02 <pin_debug+0x34>
    }
    return mp_obj_new_bool(pin_class_debug);
   1baf6:	4b05      	ldr	r3, [pc, #20]	; (1bb0c <pin_debug+0x3e>)
   1baf8:	781b      	ldrb	r3, [r3, #0]
   1bafa:	4618      	mov	r0, r3
   1bafc:	f7ff fd64 	bl	1b5c8 <mp_obj_new_bool>
   1bb00:	4603      	mov	r3, r0
}
   1bb02:	4618      	mov	r0, r3
   1bb04:	3708      	adds	r7, #8
   1bb06:	46bd      	mov	sp, r7
   1bb08:	bd80      	pop	{r7, pc}
   1bb0a:	bf00      	nop
   1bb0c:	20001218 	.word	0x20001218
   1bb10:	00022b54 	.word	0x00022b54

0001bb14 <pin_obj_init_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_debug_fun_obj, 1, 2, pin_debug);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_debug_obj, MP_ROM_PTR(&pin_debug_fun_obj));

// init(dir, pull=None, af=-1, *, value, alt)
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *self, size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1bb14:	b5b0      	push	{r4, r5, r7, lr}
   1bb16:	b090      	sub	sp, #64	; 0x40
   1bb18:	af02      	add	r7, sp, #8
   1bb1a:	60f8      	str	r0, [r7, #12]
   1bb1c:	60b9      	str	r1, [r7, #8]
   1bb1e:	607a      	str	r2, [r7, #4]
   1bb20:	603b      	str	r3, [r7, #0]
        { MP_QSTR_alt, MP_ARG_KW_ONLY | MP_ARG_INT, {.u_int = -1}},
    };

    // parse args
    mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
    mp_arg_parse_all(n_args, pos_args, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   1bb22:	f107 0310 	add.w	r3, r7, #16
   1bb26:	9301      	str	r3, [sp, #4]
   1bb28:	4b59      	ldr	r3, [pc, #356]	; (1bc90 <pin_obj_init_helper+0x17c>)
   1bb2a:	9300      	str	r3, [sp, #0]
   1bb2c:	2306      	movs	r3, #6
   1bb2e:	683a      	ldr	r2, [r7, #0]
   1bb30:	6879      	ldr	r1, [r7, #4]
   1bb32:	68b8      	ldr	r0, [r7, #8]
   1bb34:	f7f1 fa14 	bl	cf60 <mp_arg_parse_all>

    // get io dir
    uint32_t dir = args[0].u_int;
   1bb38:	693b      	ldr	r3, [r7, #16]
   1bb3a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (!IS_GPIO_DIR(dir)) {
   1bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d00e      	beq.n	1bb60 <pin_obj_init_helper+0x4c>
   1bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb44:	2b01      	cmp	r3, #1
   1bb46:	d00b      	beq.n	1bb60 <pin_obj_init_helper+0x4c>
   1bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb4a:	2b02      	cmp	r3, #2
   1bb4c:	d008      	beq.n	1bb60 <pin_obj_init_helper+0x4c>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin direction: %d", dir));
   1bb4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bb50:	4950      	ldr	r1, [pc, #320]	; (1bc94 <pin_obj_init_helper+0x180>)
   1bb52:	4851      	ldr	r0, [pc, #324]	; (1bc98 <pin_obj_init_helper+0x184>)
   1bb54:	f7f3 fc54 	bl	f400 <mp_obj_new_exception_msg_varg>
   1bb58:	4603      	mov	r3, r0
   1bb5a:	4618      	mov	r0, r3
   1bb5c:	f7e4 fbc0 	bl	2e0 <nlr_jump>
    }

    // get pull dir
    uint type = GPIO_PIN_TYPE_STD;
   1bb60:	2308      	movs	r3, #8
   1bb62:	637b      	str	r3, [r7, #52]	; 0x34
    if (args[1].u_obj != mp_const_none) {
   1bb64:	697b      	ldr	r3, [r7, #20]
   1bb66:	4a4d      	ldr	r2, [pc, #308]	; (1bc9c <pin_obj_init_helper+0x188>)
   1bb68:	4293      	cmp	r3, r2
   1bb6a:	d005      	beq.n	1bb78 <pin_obj_init_helper+0x64>
        type = mp_obj_get_int(args[1].u_obj);
   1bb6c:	697b      	ldr	r3, [r7, #20]
   1bb6e:	4618      	mov	r0, r3
   1bb70:	f7f1 ff96 	bl	daa0 <mp_obj_get_int>
   1bb74:	4603      	mov	r3, r0
   1bb76:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (!IS_GPIO_TYPE(type)) {
   1bb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bb7a:	2b08      	cmp	r3, #8
   1bb7c:	d01c      	beq.n	1bbb8 <pin_obj_init_helper+0xa4>
   1bb7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bb80:	2b0a      	cmp	r3, #10
   1bb82:	d019      	beq.n	1bbb8 <pin_obj_init_helper+0xa4>
   1bb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bb86:	2b0c      	cmp	r3, #12
   1bb88:	d016      	beq.n	1bbb8 <pin_obj_init_helper+0xa4>
   1bb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bb8c:	2b09      	cmp	r3, #9
   1bb8e:	d013      	beq.n	1bbb8 <pin_obj_init_helper+0xa4>
   1bb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bb92:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
   1bb96:	d00f      	beq.n	1bbb8 <pin_obj_init_helper+0xa4>
   1bb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bb9a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
   1bb9e:	d00b      	beq.n	1bbb8 <pin_obj_init_helper+0xa4>
   1bba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bba2:	2b00      	cmp	r3, #0
   1bba4:	d008      	beq.n	1bbb8 <pin_obj_init_helper+0xa4>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin type: %d", type));
   1bba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1bba8:	493d      	ldr	r1, [pc, #244]	; (1bca0 <pin_obj_init_helper+0x18c>)
   1bbaa:	483b      	ldr	r0, [pc, #236]	; (1bc98 <pin_obj_init_helper+0x184>)
   1bbac:	f7f3 fc28 	bl	f400 <mp_obj_new_exception_msg_varg>
   1bbb0:	4603      	mov	r3, r0
   1bbb2:	4618      	mov	r0, r3
   1bbb4:	f7e4 fb94 	bl	2e0 <nlr_jump>
    }

    uint drive = GPIO_STRENGTH_2MA;
   1bbb8:	2301      	movs	r3, #1
   1bbba:	633b      	str	r3, [r7, #48]	; 0x30
    if (args[2].u_obj != MP_OBJ_NULL) {
   1bbbc:	69bb      	ldr	r3, [r7, #24]
   1bbbe:	2b00      	cmp	r3, #0
   1bbc0:	d005      	beq.n	1bbce <pin_obj_init_helper+0xba>
        drive = mp_obj_get_int(args[2].u_obj);
   1bbc2:	69bb      	ldr	r3, [r7, #24]
   1bbc4:	4618      	mov	r0, r3
   1bbc6:	f7f1 ff6b 	bl	daa0 <mp_obj_get_int>
   1bbca:	4603      	mov	r3, r0
   1bbcc:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (!IS_GPIO_STRENGTH(drive)) {
   1bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bbd0:	2b01      	cmp	r3, #1
   1bbd2:	d00e      	beq.n	1bbf2 <pin_obj_init_helper+0xde>
   1bbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bbd6:	2b02      	cmp	r3, #2
   1bbd8:	d00b      	beq.n	1bbf2 <pin_obj_init_helper+0xde>
   1bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bbdc:	2b66      	cmp	r3, #102	; 0x66
   1bbde:	d008      	beq.n	1bbf2 <pin_obj_init_helper+0xde>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin drive: %d", drive));
   1bbe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1bbe2:	4930      	ldr	r1, [pc, #192]	; (1bca4 <pin_obj_init_helper+0x190>)
   1bbe4:	482c      	ldr	r0, [pc, #176]	; (1bc98 <pin_obj_init_helper+0x184>)
   1bbe6:	f7f3 fc0b 	bl	f400 <mp_obj_new_exception_msg_varg>
   1bbea:	4603      	mov	r3, r0
   1bbec:	4618      	mov	r0, r3
   1bbee:	f7e4 fb77 	bl	2e0 <nlr_jump>
    }

    // get af (alternate function); alt-arg overrides af-arg
    mp_int_t af = args[5].u_int;
   1bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (af == -1) {
   1bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bbf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bbfc:	d101      	bne.n	1bc02 <pin_obj_init_helper+0xee>
        af = args[3].u_int;
   1bbfe:	69fb      	ldr	r3, [r7, #28]
   1bc00:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if ((dir == GPIO_DIR_MODE_HW) && !IS_GPIO_AF(af)) {
   1bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc04:	2b02      	cmp	r3, #2
   1bc06:	d119      	bne.n	1bc3c <pin_obj_init_helper+0x128>
   1bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bc0a:	2b01      	cmp	r3, #1
   1bc0c:	dd04      	ble.n	1bc18 <pin_obj_init_helper+0x104>
   1bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bc10:	2b0c      	cmp	r3, #12
   1bc12:	dc01      	bgt.n	1bc18 <pin_obj_init_helper+0x104>
   1bc14:	2301      	movs	r3, #1
   1bc16:	e000      	b.n	1bc1a <pin_obj_init_helper+0x106>
   1bc18:	2300      	movs	r3, #0
   1bc1a:	f003 0301 	and.w	r3, r3, #1
   1bc1e:	b2db      	uxtb	r3, r3
   1bc20:	f083 0301 	eor.w	r3, r3, #1
   1bc24:	b2db      	uxtb	r3, r3
   1bc26:	2b00      	cmp	r3, #0
   1bc28:	d008      	beq.n	1bc3c <pin_obj_init_helper+0x128>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin af: %d", af));
   1bc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bc2c:	491e      	ldr	r1, [pc, #120]	; (1bca8 <pin_obj_init_helper+0x194>)
   1bc2e:	481a      	ldr	r0, [pc, #104]	; (1bc98 <pin_obj_init_helper+0x184>)
   1bc30:	f7f3 fbe6 	bl	f400 <mp_obj_new_exception_msg_varg>
   1bc34:	4603      	mov	r3, r0
   1bc36:	4618      	mov	r0, r3
   1bc38:	f7e4 fb52 	bl	2e0 <nlr_jump>

    // if given, set the pin value before initialising to prevent glitches
//    if (args[4].u_obj != MP_OBJ_NULL) {
//        mp_hal_pin_write(self, mp_obj_is_true(args[3].u_obj));
//    }
    mp_hal_pin_config(self, dir, type, drive);
   1bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bc3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1bc40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1bc42:	68f8      	ldr	r0, [r7, #12]
   1bc44:	f7ff fc5d 	bl	1b502 <mp_hal_pin_config>
    mp_hal_pin_set_af(self, af);
   1bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bc4a:	b2db      	uxtb	r3, r3
   1bc4c:	4619      	mov	r1, r3
   1bc4e:	68f8      	ldr	r0, [r7, #12]
   1bc50:	f7ff fc79 	bl	1b546 <mp_hal_pin_set_af>

    if (args[4].u_obj != MP_OBJ_NULL) {
   1bc54:	6a3b      	ldr	r3, [r7, #32]
   1bc56:	2b00      	cmp	r3, #0
   1bc58:	d015      	beq.n	1bc86 <pin_obj_init_helper+0x172>
        mp_hal_pin_write(self, mp_obj_is_true(args[4].u_obj));
   1bc5a:	68fb      	ldr	r3, [r7, #12]
   1bc5c:	689c      	ldr	r4, [r3, #8]
   1bc5e:	68fb      	ldr	r3, [r7, #12]
   1bc60:	f893 5020 	ldrb.w	r5, [r3, #32]
   1bc64:	6a3b      	ldr	r3, [r7, #32]
   1bc66:	4618      	mov	r0, r3
   1bc68:	f7f1 fe1a 	bl	d8a0 <mp_obj_is_true>
   1bc6c:	4603      	mov	r3, r0
   1bc6e:	2b00      	cmp	r3, #0
   1bc70:	d003      	beq.n	1bc7a <pin_obj_init_helper+0x166>
   1bc72:	68fb      	ldr	r3, [r7, #12]
   1bc74:	f893 3020 	ldrb.w	r3, [r3, #32]
   1bc78:	e000      	b.n	1bc7c <pin_obj_init_helper+0x168>
   1bc7a:	2300      	movs	r3, #0
   1bc7c:	461a      	mov	r2, r3
   1bc7e:	4629      	mov	r1, r5
   1bc80:	4620      	mov	r0, r4
   1bc82:	f001 fc08 	bl	1d496 <GPIOPinWrite>
    }

    return mp_const_none;
   1bc86:	4b05      	ldr	r3, [pc, #20]	; (1bc9c <pin_obj_init_helper+0x188>)
}
   1bc88:	4618      	mov	r0, r3
   1bc8a:	3738      	adds	r7, #56	; 0x38
   1bc8c:	46bd      	mov	sp, r7
   1bc8e:	bdb0      	pop	{r4, r5, r7, pc}
   1bc90:	00024714 	.word	0x00024714
   1bc94:	000244c4 	.word	0x000244c4
   1bc98:	00021e58 	.word	0x00021e58
   1bc9c:	00022b54 	.word	0x00022b54
   1bca0:	000244e0 	.word	0x000244e0
   1bca4:	000244f8 	.word	0x000244f8
   1bca8:	00024510 	.word	0x00024510

0001bcac <pin_obj_init>:

STATIC mp_obj_t pin_obj_init(size_t n_args, const mp_obj_t *args, mp_map_t *kw_args) {
   1bcac:	b580      	push	{r7, lr}
   1bcae:	b084      	sub	sp, #16
   1bcb0:	af00      	add	r7, sp, #0
   1bcb2:	60f8      	str	r0, [r7, #12]
   1bcb4:	60b9      	str	r1, [r7, #8]
   1bcb6:	607a      	str	r2, [r7, #4]
    return pin_obj_init_helper(MP_OBJ_TO_PTR(args[0]), n_args - 1, args + 1, kw_args);
   1bcb8:	68bb      	ldr	r3, [r7, #8]
   1bcba:	6818      	ldr	r0, [r3, #0]
   1bcbc:	68fb      	ldr	r3, [r7, #12]
   1bcbe:	1e59      	subs	r1, r3, #1
   1bcc0:	68bb      	ldr	r3, [r7, #8]
   1bcc2:	1d1a      	adds	r2, r3, #4
   1bcc4:	687b      	ldr	r3, [r7, #4]
   1bcc6:	f7ff ff25 	bl	1bb14 <pin_obj_init_helper>
   1bcca:	4603      	mov	r3, r0
}
   1bccc:	4618      	mov	r0, r3
   1bcce:	3710      	adds	r7, #16
   1bcd0:	46bd      	mov	sp, r7
   1bcd2:	bd80      	pop	{r7, pc}

0001bcd4 <pin_value>:
///
///   - With no argument, return 0 or 1 depending on the logic level of the pin.
///   - With `value` given, set the logic level of the pin.  `value` can be
///   anything that converts to a boolean.  If it converts to `True`, the pin
///   is set high, otherwise it is set low.
STATIC mp_obj_t pin_value(size_t n_args, const mp_obj_t *args) {
   1bcd4:	b580      	push	{r7, lr}
   1bcd6:	b082      	sub	sp, #8
   1bcd8:	af00      	add	r7, sp, #0
   1bcda:	6078      	str	r0, [r7, #4]
   1bcdc:	6039      	str	r1, [r7, #0]
    return pin_call(args[0], n_args - 1, 0, args + 1);
   1bcde:	683b      	ldr	r3, [r7, #0]
   1bce0:	6818      	ldr	r0, [r3, #0]
   1bce2:	687b      	ldr	r3, [r7, #4]
   1bce4:	1e59      	subs	r1, r3, #1
   1bce6:	683b      	ldr	r3, [r7, #0]
   1bce8:	3304      	adds	r3, #4
   1bcea:	2200      	movs	r2, #0
   1bcec:	f7ff fe50 	bl	1b990 <pin_call>
   1bcf0:	4603      	mov	r3, r0
}
   1bcf2:	4618      	mov	r0, r3
   1bcf4:	3708      	adds	r7, #8
   1bcf6:	46bd      	mov	sp, r7
   1bcf8:	bd80      	pop	{r7, pc}

0001bcfa <pin_off>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_value_obj, 1, 2, pin_value);

STATIC mp_obj_t pin_off(mp_obj_t self_in) {
   1bcfa:	b580      	push	{r7, lr}
   1bcfc:	b084      	sub	sp, #16
   1bcfe:	af00      	add	r7, sp, #0
   1bd00:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bd02:	687b      	ldr	r3, [r7, #4]
   1bd04:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_low(self);
   1bd06:	68fb      	ldr	r3, [r7, #12]
   1bd08:	6898      	ldr	r0, [r3, #8]
   1bd0a:	68fb      	ldr	r3, [r7, #12]
   1bd0c:	f893 3020 	ldrb.w	r3, [r3, #32]
   1bd10:	2200      	movs	r2, #0
   1bd12:	4619      	mov	r1, r3
   1bd14:	f001 fbbf 	bl	1d496 <GPIOPinWrite>
    return mp_const_none;
   1bd18:	4b02      	ldr	r3, [pc, #8]	; (1bd24 <pin_off+0x2a>)
}
   1bd1a:	4618      	mov	r0, r3
   1bd1c:	3710      	adds	r7, #16
   1bd1e:	46bd      	mov	sp, r7
   1bd20:	bd80      	pop	{r7, pc}
   1bd22:	bf00      	nop
   1bd24:	00022b54 	.word	0x00022b54

0001bd28 <pin_on>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_off_obj, pin_off);

STATIC mp_obj_t pin_on(mp_obj_t self_in) {
   1bd28:	b580      	push	{r7, lr}
   1bd2a:	b084      	sub	sp, #16
   1bd2c:	af00      	add	r7, sp, #0
   1bd2e:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bd30:	687b      	ldr	r3, [r7, #4]
   1bd32:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_high(self);
   1bd34:	68fb      	ldr	r3, [r7, #12]
   1bd36:	6898      	ldr	r0, [r3, #8]
   1bd38:	68fb      	ldr	r3, [r7, #12]
   1bd3a:	f893 1020 	ldrb.w	r1, [r3, #32]
   1bd3e:	68fb      	ldr	r3, [r7, #12]
   1bd40:	f893 3020 	ldrb.w	r3, [r3, #32]
   1bd44:	461a      	mov	r2, r3
   1bd46:	f001 fba6 	bl	1d496 <GPIOPinWrite>
    return mp_const_none;
   1bd4a:	4b02      	ldr	r3, [pc, #8]	; (1bd54 <pin_on+0x2c>)
}
   1bd4c:	4618      	mov	r0, r3
   1bd4e:	3710      	adds	r7, #16
   1bd50:	46bd      	mov	sp, r7
   1bd52:	bd80      	pop	{r7, pc}
   1bd54:	00022b54 	.word	0x00022b54

0001bd58 <pin_irq>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_on_obj, pin_on);

// pin.irq(handler=None, trigger=IRQ_RISING, hard=False)
STATIC mp_obj_t pin_irq(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1bd58:	b480      	push	{r7}
   1bd5a:	b085      	sub	sp, #20
   1bd5c:	af00      	add	r7, sp, #0
   1bd5e:	60f8      	str	r0, [r7, #12]
   1bd60:	60b9      	str	r1, [r7, #8]
   1bd62:	607a      	str	r2, [r7, #4]
//        extint_register_pin(self, args[ARG_trigger].u_int,
//            args[ARG_hard].u_bool, args[ARG_handler].u_obj);
//    }
//
//    // TODO should return an IRQ object
    return mp_const_none;
   1bd64:	4b03      	ldr	r3, [pc, #12]	; (1bd74 <pin_irq+0x1c>)
}
   1bd66:	4618      	mov	r0, r3
   1bd68:	3714      	adds	r7, #20
   1bd6a:	46bd      	mov	sp, r7
   1bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd70:	4770      	bx	lr
   1bd72:	bf00      	nop
   1bd74:	00022b54 	.word	0x00022b54

0001bd78 <pin_name>:
STATIC MP_DEFINE_CONST_FUN_OBJ_KW(pin_irq_obj, 1, pin_irq);

/// \method name()
/// Get the pin name.
STATIC mp_obj_t pin_name(mp_obj_t self_in) {
   1bd78:	b480      	push	{r7}
   1bd7a:	b085      	sub	sp, #20
   1bd7c:	af00      	add	r7, sp, #0
   1bd7e:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bd80:	687b      	ldr	r3, [r7, #4]
   1bd82:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_QSTR(self->name);
   1bd84:	68fb      	ldr	r3, [r7, #12]
   1bd86:	685b      	ldr	r3, [r3, #4]
   1bd88:	009b      	lsls	r3, r3, #2
   1bd8a:	f043 0302 	orr.w	r3, r3, #2
}
   1bd8e:	4618      	mov	r0, r3
   1bd90:	3714      	adds	r7, #20
   1bd92:	46bd      	mov	sp, r7
   1bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd98:	4770      	bx	lr

0001bd9a <pin_names>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_name_obj, pin_name);

/// \method names()
/// Returns the cpu and board names for this pin.
STATIC mp_obj_t pin_names(mp_obj_t self_in) {
   1bd9a:	b580      	push	{r7, lr}
   1bd9c:	b088      	sub	sp, #32
   1bd9e:	af00      	add	r7, sp, #0
   1bda0:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bda2:	687b      	ldr	r3, [r7, #4]
   1bda4:	617b      	str	r3, [r7, #20]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1bda6:	2100      	movs	r1, #0
   1bda8:	2000      	movs	r0, #0
   1bdaa:	f7f5 fc16 	bl	115da <mp_obj_new_list>
   1bdae:	6138      	str	r0, [r7, #16]
    mp_obj_list_append(result, MP_OBJ_NEW_QSTR(self->name));
   1bdb0:	697b      	ldr	r3, [r7, #20]
   1bdb2:	685b      	ldr	r3, [r3, #4]
   1bdb4:	009b      	lsls	r3, r3, #2
   1bdb6:	f043 0302 	orr.w	r3, r3, #2
   1bdba:	4619      	mov	r1, r3
   1bdbc:	6938      	ldr	r0, [r7, #16]
   1bdbe:	f7f4 ffa0 	bl	10d02 <mp_obj_list_append>

    const mp_map_t *map = &pin_board_pins_locals_dict.map;
   1bdc2:	4b13      	ldr	r3, [pc, #76]	; (1be10 <pin_names+0x76>)
   1bdc4:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = map->table;
   1bdc6:	68fb      	ldr	r3, [r7, #12]
   1bdc8:	689b      	ldr	r3, [r3, #8]
   1bdca:	61fb      	str	r3, [r7, #28]

    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1bdcc:	2300      	movs	r3, #0
   1bdce:	61bb      	str	r3, [r7, #24]
   1bdd0:	e010      	b.n	1bdf4 <pin_names+0x5a>
        if (elem->value == self_in) {
   1bdd2:	69fb      	ldr	r3, [r7, #28]
   1bdd4:	685a      	ldr	r2, [r3, #4]
   1bdd6:	687b      	ldr	r3, [r7, #4]
   1bdd8:	429a      	cmp	r2, r3
   1bdda:	d105      	bne.n	1bde8 <pin_names+0x4e>
            mp_obj_list_append(result, elem->key);
   1bddc:	69fb      	ldr	r3, [r7, #28]
   1bdde:	681b      	ldr	r3, [r3, #0]
   1bde0:	4619      	mov	r1, r3
   1bde2:	6938      	ldr	r0, [r7, #16]
   1bde4:	f7f4 ff8d 	bl	10d02 <mp_obj_list_append>
    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1bde8:	69bb      	ldr	r3, [r7, #24]
   1bdea:	3301      	adds	r3, #1
   1bdec:	61bb      	str	r3, [r7, #24]
   1bdee:	69fb      	ldr	r3, [r7, #28]
   1bdf0:	3308      	adds	r3, #8
   1bdf2:	61fb      	str	r3, [r7, #28]
   1bdf4:	68fb      	ldr	r3, [r7, #12]
   1bdf6:	681b      	ldr	r3, [r3, #0]
   1bdf8:	f3c3 03dc 	ubfx	r3, r3, #3, #29
   1bdfc:	461a      	mov	r2, r3
   1bdfe:	69bb      	ldr	r3, [r7, #24]
   1be00:	429a      	cmp	r2, r3
   1be02:	d8e6      	bhi.n	1bdd2 <pin_names+0x38>
        }
    }
    return result;
   1be04:	693b      	ldr	r3, [r7, #16]
}
   1be06:	4618      	mov	r0, r3
   1be08:	3720      	adds	r7, #32
   1be0a:	46bd      	mov	sp, r7
   1be0c:	bd80      	pop	{r7, pc}
   1be0e:	bf00      	nop
   1be10:	00024ed8 	.word	0x00024ed8

0001be14 <pin_port>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_names_obj, pin_names);

/// \method port()
/// Get the pin port.
STATIC mp_obj_t pin_port(mp_obj_t self_in) {
   1be14:	b480      	push	{r7}
   1be16:	b085      	sub	sp, #20
   1be18:	af00      	add	r7, sp, #0
   1be1a:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1be1c:	687b      	ldr	r3, [r7, #4]
   1be1e:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->port);
   1be20:	68fb      	ldr	r3, [r7, #12]
   1be22:	689b      	ldr	r3, [r3, #8]
   1be24:	005b      	lsls	r3, r3, #1
   1be26:	f043 0301 	orr.w	r3, r3, #1
}
   1be2a:	4618      	mov	r0, r3
   1be2c:	3714      	adds	r7, #20
   1be2e:	46bd      	mov	sp, r7
   1be30:	f85d 7b04 	ldr.w	r7, [sp], #4
   1be34:	4770      	bx	lr

0001be36 <pin_pin>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_port_obj, pin_port);

/// \method pin()
/// Get the pin number.
STATIC mp_obj_t pin_pin(mp_obj_t self_in) {
   1be36:	b480      	push	{r7}
   1be38:	b085      	sub	sp, #20
   1be3a:	af00      	add	r7, sp, #0
   1be3c:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1be3e:	687b      	ldr	r3, [r7, #4]
   1be40:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->pin_num);
   1be42:	68fb      	ldr	r3, [r7, #12]
   1be44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1be48:	005b      	lsls	r3, r3, #1
   1be4a:	f043 0301 	orr.w	r3, r3, #1
}
   1be4e:	4618      	mov	r0, r3
   1be50:	3714      	adds	r7, #20
   1be52:	46bd      	mov	sp, r7
   1be54:	f85d 7b04 	ldr.w	r7, [sp], #4
   1be58:	4770      	bx	lr

0001be5a <pin_gpio>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_pin_obj, pin_pin);

/// \method gpio()
/// Returns the base address of the GPIO block associated with this pin.
STATIC mp_obj_t pin_gpio(mp_obj_t self_in) {
   1be5a:	b480      	push	{r7}
   1be5c:	b085      	sub	sp, #20
   1be5e:	af00      	add	r7, sp, #0
   1be60:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1be62:	687b      	ldr	r3, [r7, #4]
   1be64:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT((intptr_t)self->port);
   1be66:	68fb      	ldr	r3, [r7, #12]
   1be68:	689b      	ldr	r3, [r3, #8]
   1be6a:	005b      	lsls	r3, r3, #1
   1be6c:	f043 0301 	orr.w	r3, r3, #1
}
   1be70:	4618      	mov	r0, r3
   1be72:	3714      	adds	r7, #20
   1be74:	46bd      	mov	sp, r7
   1be76:	f85d 7b04 	ldr.w	r7, [sp], #4
   1be7a:	4770      	bx	lr

0001be7c <pin_dir>:

/// \method dir()
/// Returns the currently configured mode of the pin. The integer returned
/// will match one of the allowed constants for the mode argument to the init
/// function.
STATIC mp_obj_t pin_dir(mp_obj_t self_in) {
   1be7c:	b580      	push	{r7, lr}
   1be7e:	b082      	sub	sp, #8
   1be80:	af00      	add	r7, sp, #0
   1be82:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_dir((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1be84:	687b      	ldr	r3, [r7, #4]
   1be86:	689a      	ldr	r2, [r3, #8]
   1be88:	687b      	ldr	r3, [r7, #4]
   1be8a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1be8e:	4619      	mov	r1, r3
   1be90:	4610      	mov	r0, r2
   1be92:	f001 fa00 	bl	1d296 <GPIODirModeGet>
   1be96:	4603      	mov	r3, r0
   1be98:	005b      	lsls	r3, r3, #1
   1be9a:	f043 0301 	orr.w	r3, r3, #1
}
   1be9e:	4618      	mov	r0, r3
   1bea0:	3708      	adds	r7, #8
   1bea2:	46bd      	mov	sp, r7
   1bea4:	bd80      	pop	{r7, pc}

0001bea6 <pin_type>:

/// \method pull()
/// Returns the currently configured pull of the pin. The integer returned
/// will match one of the allowed constants for the pull argument to the init
/// function.
STATIC mp_obj_t pin_type(mp_obj_t self_in) {
   1bea6:	b580      	push	{r7, lr}
   1bea8:	b084      	sub	sp, #16
   1beaa:	af00      	add	r7, sp, #0
   1beac:	6078      	str	r0, [r7, #4]
    uint32_t type;
    pin_obj_t* self = MP_OBJ_TO_PTR(self_in);
   1beae:	687b      	ldr	r3, [r7, #4]
   1beb0:	60fb      	str	r3, [r7, #12]
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, NULL, &type);
   1beb2:	68fb      	ldr	r3, [r7, #12]
   1beb4:	6898      	ldr	r0, [r3, #8]
   1beb6:	68fb      	ldr	r3, [r7, #12]
   1beb8:	f893 1020 	ldrb.w	r1, [r3, #32]
   1bebc:	f107 0308 	add.w	r3, r7, #8
   1bec0:	2200      	movs	r2, #0
   1bec2:	f001 fa7d 	bl	1d3c0 <GPIOPadConfigGet>

    return MP_OBJ_NEW_SMALL_INT(type);
   1bec6:	68bb      	ldr	r3, [r7, #8]
   1bec8:	005b      	lsls	r3, r3, #1
   1beca:	f043 0301 	orr.w	r3, r3, #1
}
   1bece:	4618      	mov	r0, r3
   1bed0:	3710      	adds	r7, #16
   1bed2:	46bd      	mov	sp, r7
   1bed4:	bd80      	pop	{r7, pc}

0001bed6 <pin_af>:

/// \method af()
/// Returns the currently configured alternate-function of the pin. The
/// integer returned will match one of the allowed constants for the af
/// argument to the init function.
STATIC mp_obj_t pin_af(mp_obj_t self_in) {
   1bed6:	b480      	push	{r7}
   1bed8:	b083      	sub	sp, #12
   1beda:	af00      	add	r7, sp, #0
   1bedc:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_af((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1bede:	687b      	ldr	r3, [r7, #4]
   1bee0:	68db      	ldr	r3, [r3, #12]
   1bee2:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1bee6:	687b      	ldr	r3, [r7, #4]
   1bee8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1beec:	009b      	lsls	r3, r3, #2
   1beee:	fa22 f303 	lsr.w	r3, r2, r3
   1bef2:	005b      	lsls	r3, r3, #1
   1bef4:	f003 031e 	and.w	r3, r3, #30
   1bef8:	f043 0301 	orr.w	r3, r3, #1
}
   1befc:	4618      	mov	r0, r3
   1befe:	370c      	adds	r7, #12
   1bf00:	46bd      	mov	sp, r7
   1bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bf06:	4770      	bx	lr

0001bf08 <pin_named_pins_obj_print>:
//    { &mp_type_type },
//    .name = MP_QSTR_cpu,
//    .locals_dict = (mp_obj_dict_t*)&pin_cpu_pins_locals_dict,
//};

STATIC void pin_named_pins_obj_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1bf08:	b580      	push	{r7, lr}
   1bf0a:	b086      	sub	sp, #24
   1bf0c:	af00      	add	r7, sp, #0
   1bf0e:	60f8      	str	r0, [r7, #12]
   1bf10:	60b9      	str	r1, [r7, #8]
   1bf12:	607a      	str	r2, [r7, #4]
    pin_named_pins_obj_t *self = self_in;
   1bf14:	68bb      	ldr	r3, [r7, #8]
   1bf16:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<Pin.%q>", self->name);
   1bf18:	697b      	ldr	r3, [r7, #20]
   1bf1a:	685b      	ldr	r3, [r3, #4]
   1bf1c:	461a      	mov	r2, r3
   1bf1e:	4904      	ldr	r1, [pc, #16]	; (1bf30 <pin_named_pins_obj_print+0x28>)
   1bf20:	68f8      	ldr	r0, [r7, #12]
   1bf22:	f7e5 ffb5 	bl	1e90 <mp_printf>
}
   1bf26:	bf00      	nop
   1bf28:	3718      	adds	r7, #24
   1bf2a:	46bd      	mov	sp, r7
   1bf2c:	bd80      	pop	{r7, pc}
   1bf2e:	bf00      	nop
   1bf30:	00024744 	.word	0x00024744

0001bf34 <pin_find_named_pin>:
    .name = MP_QSTR_board,
    .print = pin_named_pins_obj_print,
    .locals_dict = (mp_obj_t)&pin_board_pins_locals_dict,
};

const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name) {
   1bf34:	b580      	push	{r7, lr}
   1bf36:	b084      	sub	sp, #16
   1bf38:	af00      	add	r7, sp, #0
   1bf3a:	6078      	str	r0, [r7, #4]
   1bf3c:	6039      	str	r1, [r7, #0]
    const mp_map_t *named_map = &named_pins->map;
   1bf3e:	687b      	ldr	r3, [r7, #4]
   1bf40:	3304      	adds	r3, #4
   1bf42:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *named_elem = mp_map_lookup((mp_map_t*)named_map, name, MP_MAP_LOOKUP);
   1bf44:	2200      	movs	r2, #0
   1bf46:	6839      	ldr	r1, [r7, #0]
   1bf48:	68f8      	ldr	r0, [r7, #12]
   1bf4a:	f7f1 fa23 	bl	d394 <mp_map_lookup>
   1bf4e:	60b8      	str	r0, [r7, #8]
    if (named_elem != NULL && named_elem->value != MP_OBJ_NULL) {
   1bf50:	68bb      	ldr	r3, [r7, #8]
   1bf52:	2b00      	cmp	r3, #0
   1bf54:	d006      	beq.n	1bf64 <pin_find_named_pin+0x30>
   1bf56:	68bb      	ldr	r3, [r7, #8]
   1bf58:	685b      	ldr	r3, [r3, #4]
   1bf5a:	2b00      	cmp	r3, #0
   1bf5c:	d002      	beq.n	1bf64 <pin_find_named_pin+0x30>
        return MP_OBJ_TO_PTR(named_elem->value);
   1bf5e:	68bb      	ldr	r3, [r7, #8]
   1bf60:	685b      	ldr	r3, [r3, #4]
   1bf62:	e000      	b.n	1bf66 <pin_find_named_pin+0x32>
    }
    return NULL;
   1bf64:	2300      	movs	r3, #0
}
   1bf66:	4618      	mov	r0, r3
   1bf68:	3710      	adds	r7, #16
   1bf6a:	46bd      	mov	sp, r7
   1bf6c:	bd80      	pop	{r7, pc}

0001bf6e <pin_find_af>:

const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn, uint8_t unit) {
   1bf6e:	b480      	push	{r7}
   1bf70:	b085      	sub	sp, #20
   1bf72:	af00      	add	r7, sp, #0
   1bf74:	6078      	str	r0, [r7, #4]
   1bf76:	460b      	mov	r3, r1
   1bf78:	70fb      	strb	r3, [r7, #3]
   1bf7a:	4613      	mov	r3, r2
   1bf7c:	70bb      	strb	r3, [r7, #2]
    const pin_af_obj_t *af = pin->af_list;
   1bf7e:	687b      	ldr	r3, [r7, #4]
   1bf80:	691b      	ldr	r3, [r3, #16]
   1bf82:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1bf84:	2300      	movs	r3, #0
   1bf86:	60bb      	str	r3, [r7, #8]
   1bf88:	e011      	b.n	1bfae <pin_find_af+0x40>
        if (af->fn == fn && af->unit == unit) {
   1bf8a:	68fb      	ldr	r3, [r7, #12]
   1bf8c:	795b      	ldrb	r3, [r3, #5]
   1bf8e:	78fa      	ldrb	r2, [r7, #3]
   1bf90:	429a      	cmp	r2, r3
   1bf92:	d106      	bne.n	1bfa2 <pin_find_af+0x34>
   1bf94:	68fb      	ldr	r3, [r7, #12]
   1bf96:	799b      	ldrb	r3, [r3, #6]
   1bf98:	78ba      	ldrb	r2, [r7, #2]
   1bf9a:	429a      	cmp	r2, r3
   1bf9c:	d101      	bne.n	1bfa2 <pin_find_af+0x34>
            return af;
   1bf9e:	68fb      	ldr	r3, [r7, #12]
   1bfa0:	e00d      	b.n	1bfbe <pin_find_af+0x50>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1bfa2:	68bb      	ldr	r3, [r7, #8]
   1bfa4:	3301      	adds	r3, #1
   1bfa6:	60bb      	str	r3, [r7, #8]
   1bfa8:	68fb      	ldr	r3, [r7, #12]
   1bfaa:	3310      	adds	r3, #16
   1bfac:	60fb      	str	r3, [r7, #12]
   1bfae:	687b      	ldr	r3, [r7, #4]
   1bfb0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1bfb4:	461a      	mov	r2, r3
   1bfb6:	68bb      	ldr	r3, [r7, #8]
   1bfb8:	429a      	cmp	r2, r3
   1bfba:	d8e6      	bhi.n	1bf8a <pin_find_af+0x1c>
        }
    }
    return NULL;
   1bfbc:	2300      	movs	r3, #0
}
   1bfbe:	4618      	mov	r0, r3
   1bfc0:	3714      	adds	r7, #20
   1bfc2:	46bd      	mov	sp, r7
   1bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bfc8:	4770      	bx	lr

0001bfca <pin_find_af_by_index>:

const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx) {
   1bfca:	b480      	push	{r7}
   1bfcc:	b085      	sub	sp, #20
   1bfce:	af00      	add	r7, sp, #0
   1bfd0:	6078      	str	r0, [r7, #4]
   1bfd2:	6039      	str	r1, [r7, #0]
    const pin_af_obj_t *af = pin->af_list;
   1bfd4:	687b      	ldr	r3, [r7, #4]
   1bfd6:	691b      	ldr	r3, [r3, #16]
   1bfd8:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1bfda:	2300      	movs	r3, #0
   1bfdc:	60bb      	str	r3, [r7, #8]
   1bfde:	e00e      	b.n	1bffe <pin_find_af_by_index+0x34>
        if (af->idx == af_idx) {
   1bfe0:	68fb      	ldr	r3, [r7, #12]
   1bfe2:	f993 3004 	ldrsb.w	r3, [r3, #4]
   1bfe6:	461a      	mov	r2, r3
   1bfe8:	683b      	ldr	r3, [r7, #0]
   1bfea:	429a      	cmp	r2, r3
   1bfec:	d101      	bne.n	1bff2 <pin_find_af_by_index+0x28>
            return af;
   1bfee:	68fb      	ldr	r3, [r7, #12]
   1bff0:	e00d      	b.n	1c00e <pin_find_af_by_index+0x44>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1bff2:	68bb      	ldr	r3, [r7, #8]
   1bff4:	3301      	adds	r3, #1
   1bff6:	60bb      	str	r3, [r7, #8]
   1bff8:	68fb      	ldr	r3, [r7, #12]
   1bffa:	3310      	adds	r3, #16
   1bffc:	60fb      	str	r3, [r7, #12]
   1bffe:	687b      	ldr	r3, [r7, #4]
   1c000:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1c004:	461a      	mov	r2, r3
   1c006:	68bb      	ldr	r3, [r7, #8]
   1c008:	429a      	cmp	r2, r3
   1c00a:	d8e9      	bhi.n	1bfe0 <pin_find_af_by_index+0x16>
        }
    }
    return NULL;
   1c00c:	2300      	movs	r3, #0
}
   1c00e:	4618      	mov	r0, r3
   1c010:	3714      	adds	r7, #20
   1c012:	46bd      	mov	sp, r7
   1c014:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c018:	4770      	bx	lr
   1c01a:	bf00      	nop

0001c01c <mp_hal_stdout_tx_strn_cooked>:
 * implementation below can be used.
 */

// Send "cooked" string of given length, where every occurrence of
// LF character is replaced with CR LF.
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   1c01c:	b580      	push	{r7, lr}
   1c01e:	b082      	sub	sp, #8
   1c020:	af00      	add	r7, sp, #0
   1c022:	6078      	str	r0, [r7, #4]
   1c024:	6039      	str	r1, [r7, #0]
    while (len--) {
   1c026:	e00e      	b.n	1c046 <mp_hal_stdout_tx_strn_cooked+0x2a>
        if (*str == '\n') {
   1c028:	687b      	ldr	r3, [r7, #4]
   1c02a:	781b      	ldrb	r3, [r3, #0]
   1c02c:	2b0a      	cmp	r3, #10
   1c02e:	d103      	bne.n	1c038 <mp_hal_stdout_tx_strn_cooked+0x1c>
            mp_hal_stdout_tx_strn("\r", 1);
   1c030:	2101      	movs	r1, #1
   1c032:	4809      	ldr	r0, [pc, #36]	; (1c058 <mp_hal_stdout_tx_strn_cooked+0x3c>)
   1c034:	f7ff f9fa 	bl	1b42c <mp_hal_stdout_tx_strn>
        }
        mp_hal_stdout_tx_strn(str++, 1);
   1c038:	687b      	ldr	r3, [r7, #4]
   1c03a:	1c5a      	adds	r2, r3, #1
   1c03c:	607a      	str	r2, [r7, #4]
   1c03e:	2101      	movs	r1, #1
   1c040:	4618      	mov	r0, r3
   1c042:	f7ff f9f3 	bl	1b42c <mp_hal_stdout_tx_strn>
    while (len--) {
   1c046:	683b      	ldr	r3, [r7, #0]
   1c048:	1e5a      	subs	r2, r3, #1
   1c04a:	603a      	str	r2, [r7, #0]
   1c04c:	2b00      	cmp	r3, #0
   1c04e:	d1eb      	bne.n	1c028 <mp_hal_stdout_tx_strn_cooked+0xc>
    }
}
   1c050:	bf00      	nop
   1c052:	3708      	adds	r7, #8
   1c054:	46bd      	mov	sp, r7
   1c056:	bd80      	pop	{r7, pc}
   1c058:	00024ee4 	.word	0x00024ee4

0001c05c <mp_hal_stdout_tx_str>:

// Send zero-terminated string
void mp_hal_stdout_tx_str(const char *str) {
   1c05c:	b580      	push	{r7, lr}
   1c05e:	b082      	sub	sp, #8
   1c060:	af00      	add	r7, sp, #0
   1c062:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn(str, strlen(str));
   1c064:	6878      	ldr	r0, [r7, #4]
   1c066:	f000 fbb1 	bl	1c7cc <strlen>
   1c06a:	4603      	mov	r3, r0
   1c06c:	4619      	mov	r1, r3
   1c06e:	6878      	ldr	r0, [r7, #4]
   1c070:	f7ff f9dc 	bl	1b42c <mp_hal_stdout_tx_strn>
}
   1c074:	bf00      	nop
   1c076:	3708      	adds	r7, #8
   1c078:	46bd      	mov	sp, r7
   1c07a:	bd80      	pop	{r7, pc}

0001c07c <vstr_reset>:
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1c07c:	b480      	push	{r7}
   1c07e:	b083      	sub	sp, #12
   1c080:	af00      	add	r7, sp, #0
   1c082:	6078      	str	r0, [r7, #4]
   1c084:	687b      	ldr	r3, [r7, #4]
   1c086:	2200      	movs	r2, #0
   1c088:	605a      	str	r2, [r3, #4]
   1c08a:	bf00      	nop
   1c08c:	370c      	adds	r7, #12
   1c08e:	46bd      	mov	sp, r7
   1c090:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c094:	4770      	bx	lr

0001c096 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1c096:	b480      	push	{r7}
   1c098:	b083      	sub	sp, #12
   1c09a:	af00      	add	r7, sp, #0
   1c09c:	6078      	str	r0, [r7, #4]
   1c09e:	687b      	ldr	r3, [r7, #4]
   1c0a0:	685b      	ldr	r3, [r3, #4]
   1c0a2:	4618      	mov	r0, r3
   1c0a4:	370c      	adds	r7, #12
   1c0a6:	46bd      	mov	sp, r7
   1c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c0ac:	4770      	bx	lr

0001c0ae <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1c0ae:	b580      	push	{r7, lr}
   1c0b0:	b0a0      	sub	sp, #128	; 0x80
   1c0b2:	af02      	add	r7, sp, #8
   1c0b4:	60f8      	str	r0, [r7, #12]
   1c0b6:	60b9      	str	r1, [r7, #8]
   1c0b8:	607a      	str	r2, [r7, #4]
    int ret = 0;
   1c0ba:	2300      	movs	r3, #0
   1c0bc:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t start = 0;
   1c0be:	2300      	movs	r3, #0
   1c0c0:	673b      	str	r3, [r7, #112]	; 0x70

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1c0c2:	4b60      	ldr	r3, [pc, #384]	; (1c244 <parse_compile_execute+0x196>)
   1c0c4:	2200      	movs	r2, #0
   1c0c6:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1c0c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1c0cc:	4618      	mov	r0, r3
   1c0ce:	f7e4 f8f5 	bl	2bc <nlr_push>
   1c0d2:	4603      	mov	r3, r0
   1c0d4:	2b00      	cmp	r3, #0
   1c0d6:	d15c      	bne.n	1c192 <parse_compile_execute+0xe4>
        mp_obj_t module_fun;
        #if MICROPY_MODULE_FROZEN_MPY
        if (exec_flags & EXEC_FLAG_SOURCE_IS_RAW_CODE) {
   1c0d8:	687b      	ldr	r3, [r7, #4]
   1c0da:	f003 0308 	and.w	r3, r3, #8
   1c0de:	2b00      	cmp	r3, #0
   1c0e0:	d006      	beq.n	1c0f0 <parse_compile_execute+0x42>
            // source is a raw_code object, create the function
            module_fun = mp_make_function_from_raw_code(source, MP_OBJ_NULL, MP_OBJ_NULL);
   1c0e2:	2200      	movs	r2, #0
   1c0e4:	2100      	movs	r1, #0
   1c0e6:	68f8      	ldr	r0, [r7, #12]
   1c0e8:	f7ef f83f 	bl	b16a <mp_make_function_from_raw_code>
   1c0ec:	66f8      	str	r0, [r7, #108]	; 0x6c
   1c0ee:	e035      	b.n	1c15c <parse_compile_execute+0xae>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1c0f0:	687b      	ldr	r3, [r7, #4]
   1c0f2:	f003 0310 	and.w	r3, r3, #16
   1c0f6:	2b00      	cmp	r3, #0
   1c0f8:	d00b      	beq.n	1c112 <parse_compile_execute+0x64>
                const vstr_t *vstr = source;
   1c0fa:	68fb      	ldr	r3, [r7, #12]
   1c0fc:	667b      	str	r3, [r7, #100]	; 0x64
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1c0fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1c100:	6899      	ldr	r1, [r3, #8]
   1c102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1c104:	685a      	ldr	r2, [r3, #4]
   1c106:	2300      	movs	r3, #0
   1c108:	2036      	movs	r0, #54	; 0x36
   1c10a:	f7e7 fb02 	bl	3712 <mp_lexer_new_from_str_len>
   1c10e:	66b8      	str	r0, [r7, #104]	; 0x68
   1c110:	e00b      	b.n	1c12a <parse_compile_execute+0x7c>
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1c112:	687b      	ldr	r3, [r7, #4]
   1c114:	f003 0320 	and.w	r3, r3, #32
   1c118:	2b00      	cmp	r3, #0
   1c11a:	d004      	beq.n	1c126 <parse_compile_execute+0x78>
                lex = mp_lexer_new_from_file(source);
   1c11c:	68f8      	ldr	r0, [r7, #12]
   1c11e:	f7ff f835 	bl	1b18c <mp_lexer_new_from_file>
   1c122:	66b8      	str	r0, [r7, #104]	; 0x68
   1c124:	e001      	b.n	1c12a <parse_compile_execute+0x7c>
            } else {
                lex = (mp_lexer_t*)source;
   1c126:	68fb      	ldr	r3, [r7, #12]
   1c128:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1c12a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c12c:	681b      	ldr	r3, [r3, #0]
   1c12e:	663b      	str	r3, [r7, #96]	; 0x60
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1c130:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1c134:	68ba      	ldr	r2, [r7, #8]
   1c136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1c138:	4618      	mov	r0, r3
   1c13a:	f7e8 f8e3 	bl	4304 <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1c13e:	687b      	ldr	r3, [r7, #4]
   1c140:	f003 0304 	and.w	r3, r3, #4
   1c144:	2b00      	cmp	r3, #0
   1c146:	bf14      	ite	ne
   1c148:	2301      	movne	r3, #1
   1c14a:	2300      	moveq	r3, #0
   1c14c:	b2db      	uxtb	r3, r3
   1c14e:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1c152:	2200      	movs	r2, #0
   1c154:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1c156:	f7ed fade 	bl	9716 <mp_compile>
   1c15a:	66f8      	str	r0, [r7, #108]	; 0x6c
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1c15c:	2003      	movs	r0, #3
   1c15e:	f7ff fa17 	bl	1b590 <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1c162:	f7ff f995 	bl	1b490 <mp_hal_ticks_ms>
   1c166:	6738      	str	r0, [r7, #112]	; 0x70
        mp_call_function_0(module_fun);
   1c168:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   1c16a:	f7ef fdb1 	bl	bcd0 <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c16e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c172:	f7ff fa0d 	bl	1b590 <mp_hal_set_interrupt_char>
        nlr_pop();
   1c176:	f7e4 f88f 	bl	298 <nlr_pop>
        ret = 1;
   1c17a:	2301      	movs	r3, #1
   1c17c:	677b      	str	r3, [r7, #116]	; 0x74
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c17e:	687b      	ldr	r3, [r7, #4]
   1c180:	f003 0301 	and.w	r3, r3, #1
   1c184:	2b00      	cmp	r3, #0
   1c186:	d025      	beq.n	1c1d4 <parse_compile_execute+0x126>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c188:	2101      	movs	r1, #1
   1c18a:	482f      	ldr	r0, [pc, #188]	; (1c248 <parse_compile_execute+0x19a>)
   1c18c:	f7ff f94e 	bl	1b42c <mp_hal_stdout_tx_strn>
   1c190:	e020      	b.n	1c1d4 <parse_compile_execute+0x126>
        }
    } else {
        // uncaught exception
        // FIXME it could be that an interrupt happens just before we disable it here
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c196:	f7ff f9fb 	bl	1b590 <mp_hal_set_interrupt_char>
        // print EOF after normal output
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c19a:	687b      	ldr	r3, [r7, #4]
   1c19c:	f003 0301 	and.w	r3, r3, #1
   1c1a0:	2b00      	cmp	r3, #0
   1c1a2:	d003      	beq.n	1c1ac <parse_compile_execute+0xfe>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c1a4:	2101      	movs	r1, #1
   1c1a6:	4828      	ldr	r0, [pc, #160]	; (1c248 <parse_compile_execute+0x19a>)
   1c1a8:	f7ff f940 	bl	1b42c <mp_hal_stdout_tx_strn>
        }
        // check for SystemExit
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_SystemExit))) {
   1c1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c1ae:	681b      	ldr	r3, [r3, #0]
   1c1b0:	4926      	ldr	r1, [pc, #152]	; (1c24c <parse_compile_execute+0x19e>)
   1c1b2:	4618      	mov	r0, r3
   1c1b4:	f7fa feaa 	bl	16f0c <mp_obj_is_subclass_fast>
   1c1b8:	4603      	mov	r3, r0
   1c1ba:	2b00      	cmp	r3, #0
   1c1bc:	d003      	beq.n	1c1c6 <parse_compile_execute+0x118>
            // at the moment, the value of SystemExit is unused
            ret = pyexec_system_exit;
   1c1be:	4b21      	ldr	r3, [pc, #132]	; (1c244 <parse_compile_execute+0x196>)
   1c1c0:	681b      	ldr	r3, [r3, #0]
   1c1c2:	677b      	str	r3, [r7, #116]	; 0x74
   1c1c4:	e006      	b.n	1c1d4 <parse_compile_execute+0x126>
        } else {
            mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
   1c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c1c8:	4619      	mov	r1, r3
   1c1ca:	4821      	ldr	r0, [pc, #132]	; (1c250 <parse_compile_execute+0x1a2>)
   1c1cc:	f7f1 faf8 	bl	d7c0 <mp_obj_print_exception>
            ret = 0;
   1c1d0:	2300      	movs	r3, #0
   1c1d2:	677b      	str	r3, [r7, #116]	; 0x74
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1c1d4:	687b      	ldr	r3, [r7, #4]
   1c1d6:	f003 0302 	and.w	r3, r3, #2
   1c1da:	2b00      	cmp	r3, #0
   1c1dc:	d024      	beq.n	1c228 <parse_compile_execute+0x17a>
   1c1de:	4b1d      	ldr	r3, [pc, #116]	; (1c254 <parse_compile_execute+0x1a6>)
   1c1e0:	781b      	ldrb	r3, [r3, #0]
   1c1e2:	2b00      	cmp	r3, #0
   1c1e4:	d020      	beq.n	1c228 <parse_compile_execute+0x17a>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1c1e6:	f7ff f953 	bl	1b490 <mp_hal_ticks_ms>
   1c1ea:	4602      	mov	r2, r0
   1c1ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1c1ee:	1ad3      	subs	r3, r2, r3
   1c1f0:	65fb      	str	r3, [r7, #92]	; 0x5c
        printf("took " UINT_FMT " ms\n", ticks);
   1c1f2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1c1f4:	4818      	ldr	r0, [pc, #96]	; (1c258 <parse_compile_execute+0x1aa>)
   1c1f6:	f7fe fe93 	bl	1af20 <printf>
        // qstr info
        {
            size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1c1fa:	f107 0314 	add.w	r3, r7, #20
   1c1fe:	f107 0218 	add.w	r2, r7, #24
   1c202:	f107 011c 	add.w	r1, r7, #28
   1c206:	f107 0020 	add.w	r0, r7, #32
   1c20a:	f7e5 f814 	bl	1236 <qstr_pool_info>
            printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  "
   1c20e:	6a39      	ldr	r1, [r7, #32]
   1c210:	69fa      	ldr	r2, [r7, #28]
   1c212:	69b8      	ldr	r0, [r7, #24]
   1c214:	697b      	ldr	r3, [r7, #20]
   1c216:	9300      	str	r3, [sp, #0]
   1c218:	4603      	mov	r3, r0
   1c21a:	4810      	ldr	r0, [pc, #64]	; (1c25c <parse_compile_execute+0x1ae>)
   1c21c:	f7fe fe80 	bl	1af20 <printf>
                   (unsigned)n_pool, (unsigned)n_qstr, (unsigned)n_str_data_bytes, (unsigned)n_total_bytes);
        }

        #if MICROPY_ENABLE_GC
        // run collection and print GC info
        gc_collect();
   1c220:	f7fe ff9a 	bl	1b158 <gc_collect>
        gc_dump_info();
   1c224:	f7e4 fd18 	bl	c58 <gc_dump_info>
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c228:	687b      	ldr	r3, [r7, #4]
   1c22a:	f003 0301 	and.w	r3, r3, #1
   1c22e:	2b00      	cmp	r3, #0
   1c230:	d003      	beq.n	1c23a <parse_compile_execute+0x18c>
        mp_hal_stdout_tx_strn("\x04", 1);
   1c232:	2101      	movs	r1, #1
   1c234:	4804      	ldr	r0, [pc, #16]	; (1c248 <parse_compile_execute+0x19a>)
   1c236:	f7ff f8f9 	bl	1b42c <mp_hal_stdout_tx_strn>
    }

    return ret;
   1c23a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1c23c:	4618      	mov	r0, r3
   1c23e:	3778      	adds	r7, #120	; 0x78
   1c240:	46bd      	mov	sp, r7
   1c242:	bd80      	pop	{r7, pc}
   1c244:	2000121c 	.word	0x2000121c
   1c248:	00024ee8 	.word	0x00024ee8
   1c24c:	000218f4 	.word	0x000218f4
   1c250:	0001ef0c 	.word	0x0001ef0c
   1c254:	20001220 	.word	0x20001220
   1c258:	00024eec 	.word	0x00024eec
   1c25c:	00024ef8 	.word	0x00024ef8

0001c260 <pyexec_raw_repl>:
    return res;
}

#else // MICROPY_REPL_EVENT_DRIVEN

int pyexec_raw_repl(void) {
   1c260:	b580      	push	{r7, lr}
   1c262:	b086      	sub	sp, #24
   1c264:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1c266:	463b      	mov	r3, r7
   1c268:	2120      	movs	r1, #32
   1c26a:	4618      	mov	r0, r3
   1c26c:	f7e5 f846 	bl	12fc <vstr_init>

raw_repl_reset:
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1c270:	482a      	ldr	r0, [pc, #168]	; (1c31c <pyexec_raw_repl+0xbc>)
   1c272:	f7ff fef3 	bl	1c05c <mp_hal_stdout_tx_str>

    for (;;) {
        vstr_reset(&line);
   1c276:	463b      	mov	r3, r7
   1c278:	4618      	mov	r0, r3
   1c27a:	f7ff feff 	bl	1c07c <vstr_reset>
        mp_hal_stdout_tx_str(">");
   1c27e:	4828      	ldr	r0, [pc, #160]	; (1c320 <pyexec_raw_repl+0xc0>)
   1c280:	f7ff feec 	bl	1c05c <mp_hal_stdout_tx_str>
        for (;;) {
            int c = mp_hal_stdin_rx_chr();
   1c284:	f7ff f8ba 	bl	1b3fc <mp_hal_stdin_rx_chr>
   1c288:	6178      	str	r0, [r7, #20]
            if (c == CHAR_CTRL_A) {
   1c28a:	697b      	ldr	r3, [r7, #20]
   1c28c:	2b01      	cmp	r3, #1
   1c28e:	d100      	bne.n	1c292 <pyexec_raw_repl+0x32>
                // reset raw REPL
                goto raw_repl_reset;
   1c290:	e7ee      	b.n	1c270 <pyexec_raw_repl+0x10>
            } else if (c == CHAR_CTRL_B) {
   1c292:	697b      	ldr	r3, [r7, #20]
   1c294:	2b02      	cmp	r3, #2
   1c296:	d10b      	bne.n	1c2b0 <pyexec_raw_repl+0x50>
                // change to friendly REPL
                mp_hal_stdout_tx_str("\r\n");
   1c298:	4822      	ldr	r0, [pc, #136]	; (1c324 <pyexec_raw_repl+0xc4>)
   1c29a:	f7ff fedf 	bl	1c05c <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1c29e:	463b      	mov	r3, r7
   1c2a0:	4618      	mov	r0, r3
   1c2a2:	f7e5 f88f 	bl	13c4 <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1c2a6:	4b20      	ldr	r3, [pc, #128]	; (1c328 <pyexec_raw_repl+0xc8>)
   1c2a8:	2201      	movs	r2, #1
   1c2aa:	601a      	str	r2, [r3, #0]
                return 0;
   1c2ac:	2300      	movs	r3, #0
   1c2ae:	e030      	b.n	1c312 <pyexec_raw_repl+0xb2>
            } else if (c == CHAR_CTRL_C) {
   1c2b0:	697b      	ldr	r3, [r7, #20]
   1c2b2:	2b03      	cmp	r3, #3
   1c2b4:	d104      	bne.n	1c2c0 <pyexec_raw_repl+0x60>
                // clear line
                vstr_reset(&line);
   1c2b6:	463b      	mov	r3, r7
   1c2b8:	4618      	mov	r0, r3
   1c2ba:	f7ff fedf 	bl	1c07c <vstr_reset>
   1c2be:	e7e1      	b.n	1c284 <pyexec_raw_repl+0x24>
            } else if (c == CHAR_CTRL_D) {
   1c2c0:	697b      	ldr	r3, [r7, #20]
   1c2c2:	2b04      	cmp	r3, #4
   1c2c4:	d007      	beq.n	1c2d6 <pyexec_raw_repl+0x76>
                // input finished
                break;
            } else {
                // let through any other raw 8-bit value
                vstr_add_byte(&line, c);
   1c2c6:	697b      	ldr	r3, [r7, #20]
   1c2c8:	b2da      	uxtb	r2, r3
   1c2ca:	463b      	mov	r3, r7
   1c2cc:	4611      	mov	r1, r2
   1c2ce:	4618      	mov	r0, r3
   1c2d0:	f7e5 f966 	bl	15a0 <vstr_add_byte>
        for (;;) {
   1c2d4:	e7d6      	b.n	1c284 <pyexec_raw_repl+0x24>
                break;
   1c2d6:	bf00      	nop
            }
        }

        // indicate reception of command
        mp_hal_stdout_tx_str("OK");
   1c2d8:	4814      	ldr	r0, [pc, #80]	; (1c32c <pyexec_raw_repl+0xcc>)
   1c2da:	f7ff febf 	bl	1c05c <mp_hal_stdout_tx_str>

        if (line.len == 0) {
   1c2de:	687b      	ldr	r3, [r7, #4]
   1c2e0:	2b00      	cmp	r3, #0
   1c2e2:	d109      	bne.n	1c2f8 <pyexec_raw_repl+0x98>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1c2e4:	480f      	ldr	r0, [pc, #60]	; (1c324 <pyexec_raw_repl+0xc4>)
   1c2e6:	f7ff feb9 	bl	1c05c <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c2ea:	463b      	mov	r3, r7
   1c2ec:	4618      	mov	r0, r3
   1c2ee:	f7e5 f869 	bl	13c4 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1c2f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c2f6:	e00c      	b.n	1c312 <pyexec_raw_repl+0xb2>
        }

        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1c2f8:	463b      	mov	r3, r7
   1c2fa:	2211      	movs	r2, #17
   1c2fc:	2101      	movs	r1, #1
   1c2fe:	4618      	mov	r0, r3
   1c300:	f7ff fed5 	bl	1c0ae <parse_compile_execute>
   1c304:	6138      	str	r0, [r7, #16]
        if (ret & PYEXEC_FORCED_EXIT) {
   1c306:	693b      	ldr	r3, [r7, #16]
   1c308:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1c30c:	2b00      	cmp	r3, #0
   1c30e:	d0b2      	beq.n	1c276 <pyexec_raw_repl+0x16>
            return ret;
   1c310:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1c312:	4618      	mov	r0, r3
   1c314:	3718      	adds	r7, #24
   1c316:	46bd      	mov	sp, r7
   1c318:	bd80      	pop	{r7, pc}
   1c31a:	bf00      	nop
   1c31c:	00024f40 	.word	0x00024f40
   1c320:	00024f5c 	.word	0x00024f5c
   1c324:	00024f60 	.word	0x00024f60
   1c328:	20000810 	.word	0x20000810
   1c32c:	00024f64 	.word	0x00024f64

0001c330 <pyexec_friendly_repl>:

int pyexec_friendly_repl(void) {
   1c330:	b580      	push	{r7, lr}
   1c332:	b088      	sub	sp, #32
   1c334:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1c336:	f107 0308 	add.w	r3, r7, #8
   1c33a:	2120      	movs	r1, #32
   1c33c:	4618      	mov	r0, r3
   1c33e:	f7e4 ffdd 	bl	12fc <vstr_init>
    mp_obj_t lcd_o = mp_call_function_0(mp_load_name(qstr_from_str("LCD")));
    mp_call_function_1(mp_load_attr(lcd_o, qstr_from_str("light")), mp_const_true);
#endif

friendly_repl_reset:
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1c342:	485a      	ldr	r0, [pc, #360]	; (1c4ac <pyexec_friendly_repl+0x17c>)
   1c344:	f7ff fe8a 	bl	1c05c <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_str("PYB: enabling IRQs\r\n");
            }
        }
        #endif

        vstr_reset(&line);
   1c348:	f107 0308 	add.w	r3, r7, #8
   1c34c:	4618      	mov	r0, r3
   1c34e:	f7ff fe95 	bl	1c07c <vstr_reset>
        int ret = readline(&line, ">>> ");
   1c352:	f107 0308 	add.w	r3, r7, #8
   1c356:	4956      	ldr	r1, [pc, #344]	; (1c4b0 <pyexec_friendly_repl+0x180>)
   1c358:	4618      	mov	r0, r3
   1c35a:	f000 ff37 	bl	1d1cc <readline>
   1c35e:	61b8      	str	r0, [r7, #24]
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1c360:	2300      	movs	r3, #0
   1c362:	61fb      	str	r3, [r7, #28]

        if (ret == CHAR_CTRL_A) {
   1c364:	69bb      	ldr	r3, [r7, #24]
   1c366:	2b01      	cmp	r3, #1
   1c368:	d10c      	bne.n	1c384 <pyexec_friendly_repl+0x54>
            // change to raw REPL
            mp_hal_stdout_tx_str("\r\n");
   1c36a:	4852      	ldr	r0, [pc, #328]	; (1c4b4 <pyexec_friendly_repl+0x184>)
   1c36c:	f7ff fe76 	bl	1c05c <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c370:	f107 0308 	add.w	r3, r7, #8
   1c374:	4618      	mov	r0, r3
   1c376:	f7e5 f825 	bl	13c4 <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1c37a:	4b4f      	ldr	r3, [pc, #316]	; (1c4b8 <pyexec_friendly_repl+0x188>)
   1c37c:	2200      	movs	r2, #0
   1c37e:	601a      	str	r2, [r3, #0]
            return 0;
   1c380:	2300      	movs	r3, #0
   1c382:	e08f      	b.n	1c4a4 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_B) {
   1c384:	69bb      	ldr	r3, [r7, #24]
   1c386:	2b02      	cmp	r3, #2
   1c388:	d103      	bne.n	1c392 <pyexec_friendly_repl+0x62>
            // reset friendly REPL
            mp_hal_stdout_tx_str("\r\n");
   1c38a:	484a      	ldr	r0, [pc, #296]	; (1c4b4 <pyexec_friendly_repl+0x184>)
   1c38c:	f7ff fe66 	bl	1c05c <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1c390:	e7d7      	b.n	1c342 <pyexec_friendly_repl+0x12>
        } else if (ret == CHAR_CTRL_C) {
   1c392:	69bb      	ldr	r3, [r7, #24]
   1c394:	2b03      	cmp	r3, #3
   1c396:	d103      	bne.n	1c3a0 <pyexec_friendly_repl+0x70>
            // break
            mp_hal_stdout_tx_str("\r\n");
   1c398:	4846      	ldr	r0, [pc, #280]	; (1c4b4 <pyexec_friendly_repl+0x184>)
   1c39a:	f7ff fe5f 	bl	1c05c <mp_hal_stdout_tx_str>
            continue;
   1c39e:	e080      	b.n	1c4a2 <pyexec_friendly_repl+0x172>
        } else if (ret == CHAR_CTRL_D) {
   1c3a0:	69bb      	ldr	r3, [r7, #24]
   1c3a2:	2b04      	cmp	r3, #4
   1c3a4:	d10a      	bne.n	1c3bc <pyexec_friendly_repl+0x8c>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1c3a6:	4843      	ldr	r0, [pc, #268]	; (1c4b4 <pyexec_friendly_repl+0x184>)
   1c3a8:	f7ff fe58 	bl	1c05c <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c3ac:	f107 0308 	add.w	r3, r7, #8
   1c3b0:	4618      	mov	r0, r3
   1c3b2:	f7e5 f807 	bl	13c4 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1c3b6:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c3ba:	e073      	b.n	1c4a4 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_E) {
   1c3bc:	69bb      	ldr	r3, [r7, #24]
   1c3be:	2b05      	cmp	r3, #5
   1c3c0:	d130      	bne.n	1c424 <pyexec_friendly_repl+0xf4>
            // paste mode
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1c3c2:	483e      	ldr	r0, [pc, #248]	; (1c4bc <pyexec_friendly_repl+0x18c>)
   1c3c4:	f7ff fe4a 	bl	1c05c <mp_hal_stdout_tx_str>
            vstr_reset(&line);
   1c3c8:	f107 0308 	add.w	r3, r7, #8
   1c3cc:	4618      	mov	r0, r3
   1c3ce:	f7ff fe55 	bl	1c07c <vstr_reset>
            for (;;) {
                char c = mp_hal_stdin_rx_chr();
   1c3d2:	f7ff f813 	bl	1b3fc <mp_hal_stdin_rx_chr>
   1c3d6:	4603      	mov	r3, r0
   1c3d8:	b2db      	uxtb	r3, r3
   1c3da:	71fb      	strb	r3, [r7, #7]
                if (c == CHAR_CTRL_C) {
   1c3dc:	79fb      	ldrb	r3, [r7, #7]
   1c3de:	2b03      	cmp	r3, #3
   1c3e0:	d103      	bne.n	1c3ea <pyexec_friendly_repl+0xba>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1c3e2:	4834      	ldr	r0, [pc, #208]	; (1c4b4 <pyexec_friendly_repl+0x184>)
   1c3e4:	f7ff fe3a 	bl	1c05c <mp_hal_stdout_tx_str>
   1c3e8:	e7ae      	b.n	1c348 <pyexec_friendly_repl+0x18>
                    goto input_restart;
                } else if (c == CHAR_CTRL_D) {
   1c3ea:	79fb      	ldrb	r3, [r7, #7]
   1c3ec:	2b04      	cmp	r3, #4
   1c3ee:	d105      	bne.n	1c3fc <pyexec_friendly_repl+0xcc>
                    // end of input
                    mp_hal_stdout_tx_str("\r\n");
   1c3f0:	4830      	ldr	r0, [pc, #192]	; (1c4b4 <pyexec_friendly_repl+0x184>)
   1c3f2:	f7ff fe33 	bl	1c05c <mp_hal_stdout_tx_str>
                    } else {
                        mp_hal_stdout_tx_strn(&c, 1);
                    }
                }
            }
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1c3f6:	2301      	movs	r3, #1
   1c3f8:	61fb      	str	r3, [r7, #28]
   1c3fa:	e041      	b.n	1c480 <pyexec_friendly_repl+0x150>
                    vstr_add_byte(&line, c);
   1c3fc:	79fa      	ldrb	r2, [r7, #7]
   1c3fe:	f107 0308 	add.w	r3, r7, #8
   1c402:	4611      	mov	r1, r2
   1c404:	4618      	mov	r0, r3
   1c406:	f7e5 f8cb 	bl	15a0 <vstr_add_byte>
                    if (c == '\r') {
   1c40a:	79fb      	ldrb	r3, [r7, #7]
   1c40c:	2b0d      	cmp	r3, #13
   1c40e:	d103      	bne.n	1c418 <pyexec_friendly_repl+0xe8>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1c410:	482b      	ldr	r0, [pc, #172]	; (1c4c0 <pyexec_friendly_repl+0x190>)
   1c412:	f7ff fe23 	bl	1c05c <mp_hal_stdout_tx_str>
   1c416:	e7dc      	b.n	1c3d2 <pyexec_friendly_repl+0xa2>
                        mp_hal_stdout_tx_strn(&c, 1);
   1c418:	1dfb      	adds	r3, r7, #7
   1c41a:	2101      	movs	r1, #1
   1c41c:	4618      	mov	r0, r3
   1c41e:	f7ff f805 	bl	1b42c <mp_hal_stdout_tx_strn>
            for (;;) {
   1c422:	e7d6      	b.n	1c3d2 <pyexec_friendly_repl+0xa2>
        } else if (vstr_len(&line) == 0) {
   1c424:	f107 0308 	add.w	r3, r7, #8
   1c428:	4618      	mov	r0, r3
   1c42a:	f7ff fe34 	bl	1c096 <vstr_len>
   1c42e:	4603      	mov	r3, r0
   1c430:	2b00      	cmp	r3, #0
   1c432:	d035      	beq.n	1c4a0 <pyexec_friendly_repl+0x170>
            continue;
        } else {
            // got a line with non-zero length, see if it needs continuing
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1c434:	e016      	b.n	1c464 <pyexec_friendly_repl+0x134>
                vstr_add_byte(&line, '\n');
   1c436:	f107 0308 	add.w	r3, r7, #8
   1c43a:	210a      	movs	r1, #10
   1c43c:	4618      	mov	r0, r3
   1c43e:	f7e5 f8af 	bl	15a0 <vstr_add_byte>
                ret = readline(&line, "... ");
   1c442:	f107 0308 	add.w	r3, r7, #8
   1c446:	491f      	ldr	r1, [pc, #124]	; (1c4c4 <pyexec_friendly_repl+0x194>)
   1c448:	4618      	mov	r0, r3
   1c44a:	f000 febf 	bl	1d1cc <readline>
   1c44e:	61b8      	str	r0, [r7, #24]
                if (ret == CHAR_CTRL_C) {
   1c450:	69bb      	ldr	r3, [r7, #24]
   1c452:	2b03      	cmp	r3, #3
   1c454:	d103      	bne.n	1c45e <pyexec_friendly_repl+0x12e>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1c456:	4817      	ldr	r0, [pc, #92]	; (1c4b4 <pyexec_friendly_repl+0x184>)
   1c458:	f7ff fe00 	bl	1c05c <mp_hal_stdout_tx_str>
                    goto input_restart;
   1c45c:	e774      	b.n	1c348 <pyexec_friendly_repl+0x18>
                } else if (ret == CHAR_CTRL_D) {
   1c45e:	69bb      	ldr	r3, [r7, #24]
   1c460:	2b04      	cmp	r3, #4
   1c462:	d00c      	beq.n	1c47e <pyexec_friendly_repl+0x14e>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1c464:	f107 0308 	add.w	r3, r7, #8
   1c468:	4618      	mov	r0, r3
   1c46a:	f7e5 f87e 	bl	156a <vstr_null_terminated_str>
   1c46e:	4603      	mov	r3, r0
   1c470:	4618      	mov	r0, r3
   1c472:	f7fe f991 	bl	1a798 <mp_repl_continue_with_input>
   1c476:	4603      	mov	r3, r0
   1c478:	2b00      	cmp	r3, #0
   1c47a:	d1dc      	bne.n	1c436 <pyexec_friendly_repl+0x106>
   1c47c:	e000      	b.n	1c480 <pyexec_friendly_repl+0x150>
                    // stop entering compound statement
                    break;
   1c47e:	bf00      	nop
                }
            }
        }

        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1c480:	f107 0308 	add.w	r3, r7, #8
   1c484:	2216      	movs	r2, #22
   1c486:	69f9      	ldr	r1, [r7, #28]
   1c488:	4618      	mov	r0, r3
   1c48a:	f7ff fe10 	bl	1c0ae <parse_compile_execute>
   1c48e:	61b8      	str	r0, [r7, #24]
        if (ret & PYEXEC_FORCED_EXIT) {
   1c490:	69bb      	ldr	r3, [r7, #24]
   1c492:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1c496:	2b00      	cmp	r3, #0
   1c498:	f43f af56 	beq.w	1c348 <pyexec_friendly_repl+0x18>
            return ret;
   1c49c:	69bb      	ldr	r3, [r7, #24]
   1c49e:	e001      	b.n	1c4a4 <pyexec_friendly_repl+0x174>
            continue;
   1c4a0:	bf00      	nop
    for (;;) {
   1c4a2:	e751      	b.n	1c348 <pyexec_friendly_repl+0x18>
        }
    }
}
   1c4a4:	4618      	mov	r0, r3
   1c4a6:	3720      	adds	r7, #32
   1c4a8:	46bd      	mov	sp, r7
   1c4aa:	bd80      	pop	{r7, pc}
   1c4ac:	00024f68 	.word	0x00024f68
   1c4b0:	00024fc4 	.word	0x00024fc4
   1c4b4:	00024f60 	.word	0x00024f60
   1c4b8:	20000810 	.word	0x20000810
   1c4bc:	00024fcc 	.word	0x00024fcc
   1c4c0:	00025004 	.word	0x00025004
   1c4c4:	0002500c 	.word	0x0002500c

0001c4c8 <pyexec_file>:

#endif // MICROPY_REPL_EVENT_DRIVEN
#endif // MICROPY_ENABLE_COMPILER

int pyexec_file(const char *filename) {
   1c4c8:	b580      	push	{r7, lr}
   1c4ca:	b082      	sub	sp, #8
   1c4cc:	af00      	add	r7, sp, #0
   1c4ce:	6078      	str	r0, [r7, #4]
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1c4d0:	2220      	movs	r2, #32
   1c4d2:	2101      	movs	r1, #1
   1c4d4:	6878      	ldr	r0, [r7, #4]
   1c4d6:	f7ff fdea 	bl	1c0ae <parse_compile_execute>
   1c4da:	4603      	mov	r3, r0
}
   1c4dc:	4618      	mov	r0, r3
   1c4de:	3708      	adds	r7, #8
   1c4e0:	46bd      	mov	sp, r7
   1c4e2:	bd80      	pop	{r7, pc}

0001c4e4 <pyexec_frozen_module>:

#if MICROPY_MODULE_FROZEN
int pyexec_frozen_module(const char *name) {
   1c4e4:	b580      	push	{r7, lr}
   1c4e6:	b084      	sub	sp, #16
   1c4e8:	af00      	add	r7, sp, #0
   1c4ea:	6078      	str	r0, [r7, #4]
    void *frozen_data;
    int frozen_type = mp_find_frozen_module(name, strlen(name), &frozen_data);
   1c4ec:	6878      	ldr	r0, [r7, #4]
   1c4ee:	f000 f96d 	bl	1c7cc <strlen>
   1c4f2:	4601      	mov	r1, r0
   1c4f4:	f107 0308 	add.w	r3, r7, #8
   1c4f8:	461a      	mov	r2, r3
   1c4fa:	6878      	ldr	r0, [r7, #4]
   1c4fc:	f7fe fcf8 	bl	1aef0 <mp_find_frozen_module>
   1c500:	60f8      	str	r0, [r7, #12]

    switch (frozen_type) {
   1c502:	68fb      	ldr	r3, [r7, #12]
   1c504:	2b02      	cmp	r3, #2
   1c506:	d107      	bne.n	1c518 <pyexec_frozen_module+0x34>
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, 0);
        #endif

        #if MICROPY_MODULE_FROZEN_MPY
        case MP_FROZEN_MPY:
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_RAW_CODE);
   1c508:	68bb      	ldr	r3, [r7, #8]
   1c50a:	2208      	movs	r2, #8
   1c50c:	2101      	movs	r1, #1
   1c50e:	4618      	mov	r0, r3
   1c510:	f7ff fdcd 	bl	1c0ae <parse_compile_execute>
   1c514:	4603      	mov	r3, r0
   1c516:	e004      	b.n	1c522 <pyexec_frozen_module+0x3e>
        #endif

        default:
            printf("could not find module '%s'\n", name);
   1c518:	6879      	ldr	r1, [r7, #4]
   1c51a:	4804      	ldr	r0, [pc, #16]	; (1c52c <pyexec_frozen_module+0x48>)
   1c51c:	f7fe fd00 	bl	1af20 <printf>
            return false;
   1c520:	2300      	movs	r3, #0
    }
}
   1c522:	4618      	mov	r0, r3
   1c524:	3710      	adds	r7, #16
   1c526:	46bd      	mov	sp, r7
   1c528:	bd80      	pop	{r7, pc}
   1c52a:	bf00      	nop
   1c52c:	00025014 	.word	0x00025014

0001c530 <pyb_set_repl_info>:
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1c530:	b580      	push	{r7, lr}
   1c532:	b082      	sub	sp, #8
   1c534:	af00      	add	r7, sp, #0
   1c536:	6078      	str	r0, [r7, #4]
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1c538:	6878      	ldr	r0, [r7, #4]
   1c53a:	f7f1 fab1 	bl	daa0 <mp_obj_get_int>
   1c53e:	4603      	mov	r3, r0
   1c540:	2b00      	cmp	r3, #0
   1c542:	bf14      	ite	ne
   1c544:	2301      	movne	r3, #1
   1c546:	2300      	moveq	r3, #0
   1c548:	b2da      	uxtb	r2, r3
   1c54a:	4b03      	ldr	r3, [pc, #12]	; (1c558 <pyb_set_repl_info+0x28>)
   1c54c:	701a      	strb	r2, [r3, #0]
    return mp_const_none;
   1c54e:	4b03      	ldr	r3, [pc, #12]	; (1c55c <pyb_set_repl_info+0x2c>)
}
   1c550:	4618      	mov	r0, r3
   1c552:	3708      	adds	r7, #8
   1c554:	46bd      	mov	sp, r7
   1c556:	bd80      	pop	{r7, pc}
   1c558:	20001220 	.word	0x20001220
   1c55c:	00022b54 	.word	0x00022b54

0001c560 <memcpy>:
#include <stdint.h>
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
   1c560:	b480      	push	{r7}
   1c562:	b08b      	sub	sp, #44	; 0x2c
   1c564:	af00      	add	r7, sp, #0
   1c566:	60f8      	str	r0, [r7, #12]
   1c568:	60b9      	str	r1, [r7, #8]
   1c56a:	607a      	str	r2, [r7, #4]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1c56c:	68fb      	ldr	r3, [r7, #12]
   1c56e:	f003 0303 	and.w	r3, r3, #3
   1c572:	2b00      	cmp	r3, #0
   1c574:	bf0c      	ite	eq
   1c576:	2301      	moveq	r3, #1
   1c578:	2300      	movne	r3, #0
   1c57a:	b2db      	uxtb	r3, r3
   1c57c:	2b00      	cmp	r3, #0
   1c57e:	d038      	beq.n	1c5f2 <memcpy+0x92>
   1c580:	68bb      	ldr	r3, [r7, #8]
   1c582:	f003 0303 	and.w	r3, r3, #3
   1c586:	2b00      	cmp	r3, #0
   1c588:	bf0c      	ite	eq
   1c58a:	2301      	moveq	r3, #1
   1c58c:	2300      	movne	r3, #0
   1c58e:	b2db      	uxtb	r3, r3
   1c590:	2b00      	cmp	r3, #0
   1c592:	d02e      	beq.n	1c5f2 <memcpy+0x92>
        // pointers aligned
        uint32_t *d = dst;
   1c594:	68fb      	ldr	r3, [r7, #12]
   1c596:	627b      	str	r3, [r7, #36]	; 0x24
        const uint32_t *s = src;
   1c598:	68bb      	ldr	r3, [r7, #8]
   1c59a:	623b      	str	r3, [r7, #32]

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1c59c:	687b      	ldr	r3, [r7, #4]
   1c59e:	089b      	lsrs	r3, r3, #2
   1c5a0:	61fb      	str	r3, [r7, #28]
   1c5a2:	e00a      	b.n	1c5ba <memcpy+0x5a>
            *d++ = *s++;
   1c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c5a6:	1d1a      	adds	r2, r3, #4
   1c5a8:	627a      	str	r2, [r7, #36]	; 0x24
   1c5aa:	6a3a      	ldr	r2, [r7, #32]
   1c5ac:	1d11      	adds	r1, r2, #4
   1c5ae:	6239      	str	r1, [r7, #32]
   1c5b0:	6812      	ldr	r2, [r2, #0]
   1c5b2:	601a      	str	r2, [r3, #0]
        for (size_t i = (n >> 2); i; i--) {
   1c5b4:	69fb      	ldr	r3, [r7, #28]
   1c5b6:	3b01      	subs	r3, #1
   1c5b8:	61fb      	str	r3, [r7, #28]
   1c5ba:	69fb      	ldr	r3, [r7, #28]
   1c5bc:	2b00      	cmp	r3, #0
   1c5be:	d1f1      	bne.n	1c5a4 <memcpy+0x44>
        }

        if (n & 2) {
   1c5c0:	687b      	ldr	r3, [r7, #4]
   1c5c2:	f003 0302 	and.w	r3, r3, #2
   1c5c6:	2b00      	cmp	r3, #0
   1c5c8:	d009      	beq.n	1c5de <memcpy+0x7e>
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1c5ca:	6a3b      	ldr	r3, [r7, #32]
   1c5cc:	881a      	ldrh	r2, [r3, #0]
   1c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c5d0:	801a      	strh	r2, [r3, #0]
            d = (uint32_t*)((uint16_t*)d + 1);
   1c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c5d4:	3302      	adds	r3, #2
   1c5d6:	627b      	str	r3, [r7, #36]	; 0x24
            s = (const uint32_t*)((const uint16_t*)s + 1);
   1c5d8:	6a3b      	ldr	r3, [r7, #32]
   1c5da:	3302      	adds	r3, #2
   1c5dc:	623b      	str	r3, [r7, #32]
        }

        if (n & 1) {
   1c5de:	687b      	ldr	r3, [r7, #4]
   1c5e0:	f003 0301 	and.w	r3, r3, #1
   1c5e4:	2b00      	cmp	r3, #0
   1c5e6:	d018      	beq.n	1c61a <memcpy+0xba>
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1c5e8:	6a3b      	ldr	r3, [r7, #32]
   1c5ea:	781a      	ldrb	r2, [r3, #0]
   1c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c5ee:	701a      	strb	r2, [r3, #0]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1c5f0:	e013      	b.n	1c61a <memcpy+0xba>
        }
    } else {
        // unaligned access, copy bytes
        uint8_t *d = dst;
   1c5f2:	68fb      	ldr	r3, [r7, #12]
   1c5f4:	61bb      	str	r3, [r7, #24]
        const uint8_t *s = src;
   1c5f6:	68bb      	ldr	r3, [r7, #8]
   1c5f8:	617b      	str	r3, [r7, #20]

        for (; n; n--) {
   1c5fa:	e00a      	b.n	1c612 <memcpy+0xb2>
            *d++ = *s++;
   1c5fc:	69bb      	ldr	r3, [r7, #24]
   1c5fe:	1c5a      	adds	r2, r3, #1
   1c600:	61ba      	str	r2, [r7, #24]
   1c602:	697a      	ldr	r2, [r7, #20]
   1c604:	1c51      	adds	r1, r2, #1
   1c606:	6179      	str	r1, [r7, #20]
   1c608:	7812      	ldrb	r2, [r2, #0]
   1c60a:	701a      	strb	r2, [r3, #0]
        for (; n; n--) {
   1c60c:	687b      	ldr	r3, [r7, #4]
   1c60e:	3b01      	subs	r3, #1
   1c610:	607b      	str	r3, [r7, #4]
   1c612:	687b      	ldr	r3, [r7, #4]
   1c614:	2b00      	cmp	r3, #0
   1c616:	d1f1      	bne.n	1c5fc <memcpy+0x9c>
   1c618:	e000      	b.n	1c61c <memcpy+0xbc>
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1c61a:	bf00      	nop
        }
    }

    return dst;
   1c61c:	68fb      	ldr	r3, [r7, #12]
}
   1c61e:	4618      	mov	r0, r3
   1c620:	372c      	adds	r7, #44	; 0x2c
   1c622:	46bd      	mov	sp, r7
   1c624:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c628:	4770      	bx	lr

0001c62a <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
   1c62a:	b580      	push	{r7, lr}
   1c62c:	b086      	sub	sp, #24
   1c62e:	af00      	add	r7, sp, #0
   1c630:	60f8      	str	r0, [r7, #12]
   1c632:	60b9      	str	r1, [r7, #8]
   1c634:	607a      	str	r2, [r7, #4]
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1c636:	68ba      	ldr	r2, [r7, #8]
   1c638:	68fb      	ldr	r3, [r7, #12]
   1c63a:	429a      	cmp	r2, r3
   1c63c:	d220      	bcs.n	1c680 <memmove+0x56>
   1c63e:	68ba      	ldr	r2, [r7, #8]
   1c640:	687b      	ldr	r3, [r7, #4]
   1c642:	441a      	add	r2, r3
   1c644:	68fb      	ldr	r3, [r7, #12]
   1c646:	429a      	cmp	r2, r3
   1c648:	d91a      	bls.n	1c680 <memmove+0x56>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1c64a:	687b      	ldr	r3, [r7, #4]
   1c64c:	3b01      	subs	r3, #1
   1c64e:	68fa      	ldr	r2, [r7, #12]
   1c650:	4413      	add	r3, r2
   1c652:	617b      	str	r3, [r7, #20]
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1c654:	687b      	ldr	r3, [r7, #4]
   1c656:	3b01      	subs	r3, #1
   1c658:	68ba      	ldr	r2, [r7, #8]
   1c65a:	4413      	add	r3, r2
   1c65c:	613b      	str	r3, [r7, #16]
        for (; n > 0; n--) {
   1c65e:	e00a      	b.n	1c676 <memmove+0x4c>
            *d-- = *s--;
   1c660:	697b      	ldr	r3, [r7, #20]
   1c662:	1e5a      	subs	r2, r3, #1
   1c664:	617a      	str	r2, [r7, #20]
   1c666:	693a      	ldr	r2, [r7, #16]
   1c668:	1e51      	subs	r1, r2, #1
   1c66a:	6139      	str	r1, [r7, #16]
   1c66c:	7812      	ldrb	r2, [r2, #0]
   1c66e:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1c670:	687b      	ldr	r3, [r7, #4]
   1c672:	3b01      	subs	r3, #1
   1c674:	607b      	str	r3, [r7, #4]
   1c676:	687b      	ldr	r3, [r7, #4]
   1c678:	2b00      	cmp	r3, #0
   1c67a:	d1f1      	bne.n	1c660 <memmove+0x36>
        }
        return dest;
   1c67c:	68fb      	ldr	r3, [r7, #12]
   1c67e:	e005      	b.n	1c68c <memmove+0x62>
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
   1c680:	687a      	ldr	r2, [r7, #4]
   1c682:	68b9      	ldr	r1, [r7, #8]
   1c684:	68f8      	ldr	r0, [r7, #12]
   1c686:	f7ff ff6b 	bl	1c560 <memcpy>
   1c68a:	4603      	mov	r3, r0
    }
}
   1c68c:	4618      	mov	r0, r3
   1c68e:	3718      	adds	r7, #24
   1c690:	46bd      	mov	sp, r7
   1c692:	bd80      	pop	{r7, pc}

0001c694 <memset>:

void *memset(void *s, int c, size_t n) {
   1c694:	b480      	push	{r7}
   1c696:	b089      	sub	sp, #36	; 0x24
   1c698:	af00      	add	r7, sp, #0
   1c69a:	60f8      	str	r0, [r7, #12]
   1c69c:	60b9      	str	r1, [r7, #8]
   1c69e:	607a      	str	r2, [r7, #4]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1c6a0:	68bb      	ldr	r3, [r7, #8]
   1c6a2:	2b00      	cmp	r3, #0
   1c6a4:	d129      	bne.n	1c6fa <memset+0x66>
   1c6a6:	68fb      	ldr	r3, [r7, #12]
   1c6a8:	f003 0303 	and.w	r3, r3, #3
   1c6ac:	2b00      	cmp	r3, #0
   1c6ae:	d124      	bne.n	1c6fa <memset+0x66>
        // aligned store of 0
        uint32_t *s32 = s;
   1c6b0:	68fb      	ldr	r3, [r7, #12]
   1c6b2:	61fb      	str	r3, [r7, #28]
        for (size_t i = n >> 2; i > 0; i--) {
   1c6b4:	687b      	ldr	r3, [r7, #4]
   1c6b6:	089b      	lsrs	r3, r3, #2
   1c6b8:	61bb      	str	r3, [r7, #24]
   1c6ba:	e007      	b.n	1c6cc <memset+0x38>
            *s32++ = 0;
   1c6bc:	69fb      	ldr	r3, [r7, #28]
   1c6be:	1d1a      	adds	r2, r3, #4
   1c6c0:	61fa      	str	r2, [r7, #28]
   1c6c2:	2200      	movs	r2, #0
   1c6c4:	601a      	str	r2, [r3, #0]
        for (size_t i = n >> 2; i > 0; i--) {
   1c6c6:	69bb      	ldr	r3, [r7, #24]
   1c6c8:	3b01      	subs	r3, #1
   1c6ca:	61bb      	str	r3, [r7, #24]
   1c6cc:	69bb      	ldr	r3, [r7, #24]
   1c6ce:	2b00      	cmp	r3, #0
   1c6d0:	d1f4      	bne.n	1c6bc <memset+0x28>
        }
        if (n & 2) {
   1c6d2:	687b      	ldr	r3, [r7, #4]
   1c6d4:	f003 0302 	and.w	r3, r3, #2
   1c6d8:	2b00      	cmp	r3, #0
   1c6da:	d005      	beq.n	1c6e8 <memset+0x54>
            *((uint16_t*)s32) = 0;
   1c6dc:	69fb      	ldr	r3, [r7, #28]
   1c6de:	2200      	movs	r2, #0
   1c6e0:	801a      	strh	r2, [r3, #0]
            s32 = (uint32_t*)((uint16_t*)s32 + 1);
   1c6e2:	69fb      	ldr	r3, [r7, #28]
   1c6e4:	3302      	adds	r3, #2
   1c6e6:	61fb      	str	r3, [r7, #28]
        }
        if (n & 1) {
   1c6e8:	687b      	ldr	r3, [r7, #4]
   1c6ea:	f003 0301 	and.w	r3, r3, #1
   1c6ee:	2b00      	cmp	r3, #0
   1c6f0:	d013      	beq.n	1c71a <memset+0x86>
            *((uint8_t*)s32) = 0;
   1c6f2:	69fb      	ldr	r3, [r7, #28]
   1c6f4:	2200      	movs	r2, #0
   1c6f6:	701a      	strb	r2, [r3, #0]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1c6f8:	e00f      	b.n	1c71a <memset+0x86>
        }
    } else {
        uint8_t *s2 = s;
   1c6fa:	68fb      	ldr	r3, [r7, #12]
   1c6fc:	617b      	str	r3, [r7, #20]
        for (; n > 0; n--) {
   1c6fe:	e008      	b.n	1c712 <memset+0x7e>
            *s2++ = c;
   1c700:	697b      	ldr	r3, [r7, #20]
   1c702:	1c5a      	adds	r2, r3, #1
   1c704:	617a      	str	r2, [r7, #20]
   1c706:	68ba      	ldr	r2, [r7, #8]
   1c708:	b2d2      	uxtb	r2, r2
   1c70a:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1c70c:	687b      	ldr	r3, [r7, #4]
   1c70e:	3b01      	subs	r3, #1
   1c710:	607b      	str	r3, [r7, #4]
   1c712:	687b      	ldr	r3, [r7, #4]
   1c714:	2b00      	cmp	r3, #0
   1c716:	d1f3      	bne.n	1c700 <memset+0x6c>
   1c718:	e000      	b.n	1c71c <memset+0x88>
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1c71a:	bf00      	nop
        }
    }
    return s;
   1c71c:	68fb      	ldr	r3, [r7, #12]
}
   1c71e:	4618      	mov	r0, r3
   1c720:	3724      	adds	r7, #36	; 0x24
   1c722:	46bd      	mov	sp, r7
   1c724:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c728:	4770      	bx	lr

0001c72a <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1c72a:	b480      	push	{r7}
   1c72c:	b089      	sub	sp, #36	; 0x24
   1c72e:	af00      	add	r7, sp, #0
   1c730:	60f8      	str	r0, [r7, #12]
   1c732:	60b9      	str	r1, [r7, #8]
   1c734:	607a      	str	r2, [r7, #4]
    const uint8_t *s1_8 = s1;
   1c736:	68fb      	ldr	r3, [r7, #12]
   1c738:	61fb      	str	r3, [r7, #28]
    const uint8_t *s2_8 = s2;
   1c73a:	68bb      	ldr	r3, [r7, #8]
   1c73c:	61bb      	str	r3, [r7, #24]
    while (n--) {
   1c73e:	e016      	b.n	1c76e <memcmp+0x44>
        char c1 = *s1_8++;
   1c740:	69fb      	ldr	r3, [r7, #28]
   1c742:	1c5a      	adds	r2, r3, #1
   1c744:	61fa      	str	r2, [r7, #28]
   1c746:	781b      	ldrb	r3, [r3, #0]
   1c748:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2_8++;
   1c74a:	69bb      	ldr	r3, [r7, #24]
   1c74c:	1c5a      	adds	r2, r3, #1
   1c74e:	61ba      	str	r2, [r7, #24]
   1c750:	781b      	ldrb	r3, [r3, #0]
   1c752:	75bb      	strb	r3, [r7, #22]
        if (c1 < c2) return -1;
   1c754:	7dfa      	ldrb	r2, [r7, #23]
   1c756:	7dbb      	ldrb	r3, [r7, #22]
   1c758:	429a      	cmp	r2, r3
   1c75a:	d202      	bcs.n	1c762 <memcmp+0x38>
   1c75c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c760:	e00b      	b.n	1c77a <memcmp+0x50>
        else if (c1 > c2) return 1;
   1c762:	7dfa      	ldrb	r2, [r7, #23]
   1c764:	7dbb      	ldrb	r3, [r7, #22]
   1c766:	429a      	cmp	r2, r3
   1c768:	d901      	bls.n	1c76e <memcmp+0x44>
   1c76a:	2301      	movs	r3, #1
   1c76c:	e005      	b.n	1c77a <memcmp+0x50>
    while (n--) {
   1c76e:	687b      	ldr	r3, [r7, #4]
   1c770:	1e5a      	subs	r2, r3, #1
   1c772:	607a      	str	r2, [r7, #4]
   1c774:	2b00      	cmp	r3, #0
   1c776:	d1e3      	bne.n	1c740 <memcmp+0x16>
    }
    return 0;
   1c778:	2300      	movs	r3, #0
}
   1c77a:	4618      	mov	r0, r3
   1c77c:	3724      	adds	r7, #36	; 0x24
   1c77e:	46bd      	mov	sp, r7
   1c780:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c784:	4770      	bx	lr

0001c786 <memchr>:

void *memchr(const void *s, int c, size_t n) {
   1c786:	b480      	push	{r7}
   1c788:	b087      	sub	sp, #28
   1c78a:	af00      	add	r7, sp, #0
   1c78c:	60f8      	str	r0, [r7, #12]
   1c78e:	60b9      	str	r1, [r7, #8]
   1c790:	607a      	str	r2, [r7, #4]
    if (n != 0) {
   1c792:	687b      	ldr	r3, [r7, #4]
   1c794:	2b00      	cmp	r3, #0
   1c796:	d012      	beq.n	1c7be <memchr+0x38>
        const unsigned char *p = s;
   1c798:	68fb      	ldr	r3, [r7, #12]
   1c79a:	617b      	str	r3, [r7, #20]

        do {
            if (*p++ == c)
   1c79c:	697b      	ldr	r3, [r7, #20]
   1c79e:	1c5a      	adds	r2, r3, #1
   1c7a0:	617a      	str	r2, [r7, #20]
   1c7a2:	781b      	ldrb	r3, [r3, #0]
   1c7a4:	461a      	mov	r2, r3
   1c7a6:	68bb      	ldr	r3, [r7, #8]
   1c7a8:	429a      	cmp	r2, r3
   1c7aa:	d102      	bne.n	1c7b2 <memchr+0x2c>
                return ((void *)(p - 1));
   1c7ac:	697b      	ldr	r3, [r7, #20]
   1c7ae:	3b01      	subs	r3, #1
   1c7b0:	e006      	b.n	1c7c0 <memchr+0x3a>
        } while (--n != 0);
   1c7b2:	687b      	ldr	r3, [r7, #4]
   1c7b4:	3b01      	subs	r3, #1
   1c7b6:	607b      	str	r3, [r7, #4]
   1c7b8:	687b      	ldr	r3, [r7, #4]
   1c7ba:	2b00      	cmp	r3, #0
   1c7bc:	d1ee      	bne.n	1c79c <memchr+0x16>
    }
    return 0;
   1c7be:	2300      	movs	r3, #0
}
   1c7c0:	4618      	mov	r0, r3
   1c7c2:	371c      	adds	r7, #28
   1c7c4:	46bd      	mov	sp, r7
   1c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c7ca:	4770      	bx	lr

0001c7cc <strlen>:

size_t strlen(const char *str) {
   1c7cc:	b480      	push	{r7}
   1c7ce:	b085      	sub	sp, #20
   1c7d0:	af00      	add	r7, sp, #0
   1c7d2:	6078      	str	r0, [r7, #4]
    int len = 0;
   1c7d4:	2300      	movs	r3, #0
   1c7d6:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1c7d8:	687b      	ldr	r3, [r7, #4]
   1c7da:	60bb      	str	r3, [r7, #8]
   1c7dc:	e005      	b.n	1c7ea <strlen+0x1e>
        len += 1;
   1c7de:	68fb      	ldr	r3, [r7, #12]
   1c7e0:	3301      	adds	r3, #1
   1c7e2:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1c7e4:	68bb      	ldr	r3, [r7, #8]
   1c7e6:	3301      	adds	r3, #1
   1c7e8:	60bb      	str	r3, [r7, #8]
   1c7ea:	68bb      	ldr	r3, [r7, #8]
   1c7ec:	781b      	ldrb	r3, [r3, #0]
   1c7ee:	2b00      	cmp	r3, #0
   1c7f0:	d1f5      	bne.n	1c7de <strlen+0x12>
    }
    return len;
   1c7f2:	68fb      	ldr	r3, [r7, #12]
}
   1c7f4:	4618      	mov	r0, r3
   1c7f6:	3714      	adds	r7, #20
   1c7f8:	46bd      	mov	sp, r7
   1c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c7fe:	4770      	bx	lr

0001c800 <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1c800:	b480      	push	{r7}
   1c802:	b085      	sub	sp, #20
   1c804:	af00      	add	r7, sp, #0
   1c806:	6078      	str	r0, [r7, #4]
   1c808:	6039      	str	r1, [r7, #0]
    while (*s1 && *s2) {
   1c80a:	e016      	b.n	1c83a <strcmp+0x3a>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1c80c:	687b      	ldr	r3, [r7, #4]
   1c80e:	1c5a      	adds	r2, r3, #1
   1c810:	607a      	str	r2, [r7, #4]
   1c812:	781b      	ldrb	r3, [r3, #0]
   1c814:	73fb      	strb	r3, [r7, #15]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1c816:	683b      	ldr	r3, [r7, #0]
   1c818:	1c5a      	adds	r2, r3, #1
   1c81a:	603a      	str	r2, [r7, #0]
   1c81c:	781b      	ldrb	r3, [r3, #0]
   1c81e:	73bb      	strb	r3, [r7, #14]
        if (c1 < c2) return -1;
   1c820:	7bfa      	ldrb	r2, [r7, #15]
   1c822:	7bbb      	ldrb	r3, [r7, #14]
   1c824:	429a      	cmp	r2, r3
   1c826:	d202      	bcs.n	1c82e <strcmp+0x2e>
   1c828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c82c:	e01b      	b.n	1c866 <strcmp+0x66>
        else if (c1 > c2) return 1;
   1c82e:	7bfa      	ldrb	r2, [r7, #15]
   1c830:	7bbb      	ldrb	r3, [r7, #14]
   1c832:	429a      	cmp	r2, r3
   1c834:	d901      	bls.n	1c83a <strcmp+0x3a>
   1c836:	2301      	movs	r3, #1
   1c838:	e015      	b.n	1c866 <strcmp+0x66>
    while (*s1 && *s2) {
   1c83a:	687b      	ldr	r3, [r7, #4]
   1c83c:	781b      	ldrb	r3, [r3, #0]
   1c83e:	2b00      	cmp	r3, #0
   1c840:	d003      	beq.n	1c84a <strcmp+0x4a>
   1c842:	683b      	ldr	r3, [r7, #0]
   1c844:	781b      	ldrb	r3, [r3, #0]
   1c846:	2b00      	cmp	r3, #0
   1c848:	d1e0      	bne.n	1c80c <strcmp+0xc>
    }
    if (*s2) return -1;
   1c84a:	683b      	ldr	r3, [r7, #0]
   1c84c:	781b      	ldrb	r3, [r3, #0]
   1c84e:	2b00      	cmp	r3, #0
   1c850:	d002      	beq.n	1c858 <strcmp+0x58>
   1c852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c856:	e006      	b.n	1c866 <strcmp+0x66>
    else if (*s1) return 1;
   1c858:	687b      	ldr	r3, [r7, #4]
   1c85a:	781b      	ldrb	r3, [r3, #0]
   1c85c:	2b00      	cmp	r3, #0
   1c85e:	d001      	beq.n	1c864 <strcmp+0x64>
   1c860:	2301      	movs	r3, #1
   1c862:	e000      	b.n	1c866 <strcmp+0x66>
    else return 0;
   1c864:	2300      	movs	r3, #0
}
   1c866:	4618      	mov	r0, r3
   1c868:	3714      	adds	r7, #20
   1c86a:	46bd      	mov	sp, r7
   1c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c870:	4770      	bx	lr

0001c872 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1c872:	b480      	push	{r7}
   1c874:	b087      	sub	sp, #28
   1c876:	af00      	add	r7, sp, #0
   1c878:	60f8      	str	r0, [r7, #12]
   1c87a:	60b9      	str	r1, [r7, #8]
   1c87c:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
   1c87e:	e019      	b.n	1c8b4 <strncmp+0x42>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1c880:	68fb      	ldr	r3, [r7, #12]
   1c882:	1c5a      	adds	r2, r3, #1
   1c884:	60fa      	str	r2, [r7, #12]
   1c886:	781b      	ldrb	r3, [r3, #0]
   1c888:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1c88a:	68bb      	ldr	r3, [r7, #8]
   1c88c:	1c5a      	adds	r2, r3, #1
   1c88e:	60ba      	str	r2, [r7, #8]
   1c890:	781b      	ldrb	r3, [r3, #0]
   1c892:	75bb      	strb	r3, [r7, #22]
        n--;
   1c894:	687b      	ldr	r3, [r7, #4]
   1c896:	3b01      	subs	r3, #1
   1c898:	607b      	str	r3, [r7, #4]
        if (c1 < c2) return -1;
   1c89a:	7dfa      	ldrb	r2, [r7, #23]
   1c89c:	7dbb      	ldrb	r3, [r7, #22]
   1c89e:	429a      	cmp	r2, r3
   1c8a0:	d202      	bcs.n	1c8a8 <strncmp+0x36>
   1c8a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8a6:	e023      	b.n	1c8f0 <strncmp+0x7e>
        else if (c1 > c2) return 1;
   1c8a8:	7dfa      	ldrb	r2, [r7, #23]
   1c8aa:	7dbb      	ldrb	r3, [r7, #22]
   1c8ac:	429a      	cmp	r2, r3
   1c8ae:	d901      	bls.n	1c8b4 <strncmp+0x42>
   1c8b0:	2301      	movs	r3, #1
   1c8b2:	e01d      	b.n	1c8f0 <strncmp+0x7e>
    while (*s1 && *s2 && n > 0) {
   1c8b4:	68fb      	ldr	r3, [r7, #12]
   1c8b6:	781b      	ldrb	r3, [r3, #0]
   1c8b8:	2b00      	cmp	r3, #0
   1c8ba:	d006      	beq.n	1c8ca <strncmp+0x58>
   1c8bc:	68bb      	ldr	r3, [r7, #8]
   1c8be:	781b      	ldrb	r3, [r3, #0]
   1c8c0:	2b00      	cmp	r3, #0
   1c8c2:	d002      	beq.n	1c8ca <strncmp+0x58>
   1c8c4:	687b      	ldr	r3, [r7, #4]
   1c8c6:	2b00      	cmp	r3, #0
   1c8c8:	d1da      	bne.n	1c880 <strncmp+0xe>
    }
    if (n == 0) return 0;
   1c8ca:	687b      	ldr	r3, [r7, #4]
   1c8cc:	2b00      	cmp	r3, #0
   1c8ce:	d101      	bne.n	1c8d4 <strncmp+0x62>
   1c8d0:	2300      	movs	r3, #0
   1c8d2:	e00d      	b.n	1c8f0 <strncmp+0x7e>
    else if (*s2) return -1;
   1c8d4:	68bb      	ldr	r3, [r7, #8]
   1c8d6:	781b      	ldrb	r3, [r3, #0]
   1c8d8:	2b00      	cmp	r3, #0
   1c8da:	d002      	beq.n	1c8e2 <strncmp+0x70>
   1c8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8e0:	e006      	b.n	1c8f0 <strncmp+0x7e>
    else if (*s1) return 1;
   1c8e2:	68fb      	ldr	r3, [r7, #12]
   1c8e4:	781b      	ldrb	r3, [r3, #0]
   1c8e6:	2b00      	cmp	r3, #0
   1c8e8:	d001      	beq.n	1c8ee <strncmp+0x7c>
   1c8ea:	2301      	movs	r3, #1
   1c8ec:	e000      	b.n	1c8f0 <strncmp+0x7e>
    else return 0;
   1c8ee:	2300      	movs	r3, #0
}
   1c8f0:	4618      	mov	r0, r3
   1c8f2:	371c      	adds	r7, #28
   1c8f4:	46bd      	mov	sp, r7
   1c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c8fa:	4770      	bx	lr

0001c8fc <strcpy>:

char *strcpy(char *dest, const char *src) {
   1c8fc:	b480      	push	{r7}
   1c8fe:	b085      	sub	sp, #20
   1c900:	af00      	add	r7, sp, #0
   1c902:	6078      	str	r0, [r7, #4]
   1c904:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1c906:	687b      	ldr	r3, [r7, #4]
   1c908:	60fb      	str	r3, [r7, #12]
    while (*src) {
   1c90a:	e007      	b.n	1c91c <strcpy+0x20>
        *d++ = *src++;
   1c90c:	68fb      	ldr	r3, [r7, #12]
   1c90e:	1c5a      	adds	r2, r3, #1
   1c910:	60fa      	str	r2, [r7, #12]
   1c912:	683a      	ldr	r2, [r7, #0]
   1c914:	1c51      	adds	r1, r2, #1
   1c916:	6039      	str	r1, [r7, #0]
   1c918:	7812      	ldrb	r2, [r2, #0]
   1c91a:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c91c:	683b      	ldr	r3, [r7, #0]
   1c91e:	781b      	ldrb	r3, [r3, #0]
   1c920:	2b00      	cmp	r3, #0
   1c922:	d1f3      	bne.n	1c90c <strcpy+0x10>
    }
    *d = '\0';
   1c924:	68fb      	ldr	r3, [r7, #12]
   1c926:	2200      	movs	r2, #0
   1c928:	701a      	strb	r2, [r3, #0]
    return dest;
   1c92a:	687b      	ldr	r3, [r7, #4]
}
   1c92c:	4618      	mov	r0, r3
   1c92e:	3714      	adds	r7, #20
   1c930:	46bd      	mov	sp, r7
   1c932:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c936:	4770      	bx	lr

0001c938 <stpcpy>:

// needed because gcc optimises strcpy + strcat to this
char *stpcpy(char *dest, const char *src) {
   1c938:	b480      	push	{r7}
   1c93a:	b083      	sub	sp, #12
   1c93c:	af00      	add	r7, sp, #0
   1c93e:	6078      	str	r0, [r7, #4]
   1c940:	6039      	str	r1, [r7, #0]
    while (*src) {
   1c942:	e007      	b.n	1c954 <stpcpy+0x1c>
        *dest++ = *src++;
   1c944:	687b      	ldr	r3, [r7, #4]
   1c946:	1c5a      	adds	r2, r3, #1
   1c948:	607a      	str	r2, [r7, #4]
   1c94a:	683a      	ldr	r2, [r7, #0]
   1c94c:	1c51      	adds	r1, r2, #1
   1c94e:	6039      	str	r1, [r7, #0]
   1c950:	7812      	ldrb	r2, [r2, #0]
   1c952:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c954:	683b      	ldr	r3, [r7, #0]
   1c956:	781b      	ldrb	r3, [r3, #0]
   1c958:	2b00      	cmp	r3, #0
   1c95a:	d1f3      	bne.n	1c944 <stpcpy+0xc>
    }
    *dest = '\0';
   1c95c:	687b      	ldr	r3, [r7, #4]
   1c95e:	2200      	movs	r2, #0
   1c960:	701a      	strb	r2, [r3, #0]
    return dest;
   1c962:	687b      	ldr	r3, [r7, #4]
}
   1c964:	4618      	mov	r0, r3
   1c966:	370c      	adds	r7, #12
   1c968:	46bd      	mov	sp, r7
   1c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c96e:	4770      	bx	lr

0001c970 <strcat>:

char *strcat(char *dest, const char *src) {
   1c970:	b480      	push	{r7}
   1c972:	b085      	sub	sp, #20
   1c974:	af00      	add	r7, sp, #0
   1c976:	6078      	str	r0, [r7, #4]
   1c978:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1c97a:	687b      	ldr	r3, [r7, #4]
   1c97c:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1c97e:	e002      	b.n	1c986 <strcat+0x16>
        d++;
   1c980:	68fb      	ldr	r3, [r7, #12]
   1c982:	3301      	adds	r3, #1
   1c984:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1c986:	68fb      	ldr	r3, [r7, #12]
   1c988:	781b      	ldrb	r3, [r3, #0]
   1c98a:	2b00      	cmp	r3, #0
   1c98c:	d1f8      	bne.n	1c980 <strcat+0x10>
    }
    while (*src) {
   1c98e:	e007      	b.n	1c9a0 <strcat+0x30>
        *d++ = *src++;
   1c990:	68fb      	ldr	r3, [r7, #12]
   1c992:	1c5a      	adds	r2, r3, #1
   1c994:	60fa      	str	r2, [r7, #12]
   1c996:	683a      	ldr	r2, [r7, #0]
   1c998:	1c51      	adds	r1, r2, #1
   1c99a:	6039      	str	r1, [r7, #0]
   1c99c:	7812      	ldrb	r2, [r2, #0]
   1c99e:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c9a0:	683b      	ldr	r3, [r7, #0]
   1c9a2:	781b      	ldrb	r3, [r3, #0]
   1c9a4:	2b00      	cmp	r3, #0
   1c9a6:	d1f3      	bne.n	1c990 <strcat+0x20>
    }
    *d = '\0';
   1c9a8:	68fb      	ldr	r3, [r7, #12]
   1c9aa:	2200      	movs	r2, #0
   1c9ac:	701a      	strb	r2, [r3, #0]
    return dest;
   1c9ae:	687b      	ldr	r3, [r7, #4]
}
   1c9b0:	4618      	mov	r0, r3
   1c9b2:	3714      	adds	r7, #20
   1c9b4:	46bd      	mov	sp, r7
   1c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c9ba:	4770      	bx	lr

0001c9bc <strchr>:

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1c9bc:	b480      	push	{r7}
   1c9be:	b083      	sub	sp, #12
   1c9c0:	af00      	add	r7, sp, #0
   1c9c2:	6078      	str	r0, [r7, #4]
   1c9c4:	6039      	str	r1, [r7, #0]
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1c9c6:	e002      	b.n	1c9ce <strchr+0x12>
        s++;
   1c9c8:	687b      	ldr	r3, [r7, #4]
   1c9ca:	3301      	adds	r3, #1
   1c9cc:	607b      	str	r3, [r7, #4]
    while (*s != '\0' && *s != (char)c)
   1c9ce:	687b      	ldr	r3, [r7, #4]
   1c9d0:	781b      	ldrb	r3, [r3, #0]
   1c9d2:	2b00      	cmp	r3, #0
   1c9d4:	d005      	beq.n	1c9e2 <strchr+0x26>
   1c9d6:	687b      	ldr	r3, [r7, #4]
   1c9d8:	781a      	ldrb	r2, [r3, #0]
   1c9da:	683b      	ldr	r3, [r7, #0]
   1c9dc:	b2db      	uxtb	r3, r3
   1c9de:	429a      	cmp	r2, r3
   1c9e0:	d1f2      	bne.n	1c9c8 <strchr+0xc>
    return ((*s == c) ? (char *) s : 0);
   1c9e2:	687b      	ldr	r3, [r7, #4]
   1c9e4:	781b      	ldrb	r3, [r3, #0]
   1c9e6:	461a      	mov	r2, r3
   1c9e8:	683b      	ldr	r3, [r7, #0]
   1c9ea:	429a      	cmp	r2, r3
   1c9ec:	d101      	bne.n	1c9f2 <strchr+0x36>
   1c9ee:	687b      	ldr	r3, [r7, #4]
   1c9f0:	e000      	b.n	1c9f4 <strchr+0x38>
   1c9f2:	2300      	movs	r3, #0
}
   1c9f4:	4618      	mov	r0, r3
   1c9f6:	370c      	adds	r7, #12
   1c9f8:	46bd      	mov	sp, r7
   1c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c9fe:	4770      	bx	lr

0001ca00 <strstr>:


// Public Domain implementation of strstr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strstr_function
char *strstr(const char *haystack, const char *needle)
{
   1ca00:	b580      	push	{r7, lr}
   1ca02:	b084      	sub	sp, #16
   1ca04:	af00      	add	r7, sp, #0
   1ca06:	6078      	str	r0, [r7, #4]
   1ca08:	6039      	str	r1, [r7, #0]
    size_t needlelen;
    /* Check for the null needle case.  */
    if (*needle == '\0')
   1ca0a:	683b      	ldr	r3, [r7, #0]
   1ca0c:	781b      	ldrb	r3, [r3, #0]
   1ca0e:	2b00      	cmp	r3, #0
   1ca10:	d101      	bne.n	1ca16 <strstr+0x16>
        return (char *) haystack;
   1ca12:	687b      	ldr	r3, [r7, #4]
   1ca14:	e01c      	b.n	1ca50 <strstr+0x50>
    needlelen = strlen(needle);
   1ca16:	6838      	ldr	r0, [r7, #0]
   1ca18:	f7ff fed8 	bl	1c7cc <strlen>
   1ca1c:	60f8      	str	r0, [r7, #12]
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1ca1e:	e00c      	b.n	1ca3a <strstr+0x3a>
        if (strncmp(haystack, needle, needlelen) == 0)
   1ca20:	68fa      	ldr	r2, [r7, #12]
   1ca22:	6839      	ldr	r1, [r7, #0]
   1ca24:	6878      	ldr	r0, [r7, #4]
   1ca26:	f7ff ff24 	bl	1c872 <strncmp>
   1ca2a:	4603      	mov	r3, r0
   1ca2c:	2b00      	cmp	r3, #0
   1ca2e:	d101      	bne.n	1ca34 <strstr+0x34>
            return (char *) haystack;
   1ca30:	687b      	ldr	r3, [r7, #4]
   1ca32:	e00d      	b.n	1ca50 <strstr+0x50>
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1ca34:	687b      	ldr	r3, [r7, #4]
   1ca36:	3301      	adds	r3, #1
   1ca38:	607b      	str	r3, [r7, #4]
   1ca3a:	683b      	ldr	r3, [r7, #0]
   1ca3c:	781b      	ldrb	r3, [r3, #0]
   1ca3e:	4619      	mov	r1, r3
   1ca40:	6878      	ldr	r0, [r7, #4]
   1ca42:	f7ff ffbb 	bl	1c9bc <strchr>
   1ca46:	6078      	str	r0, [r7, #4]
   1ca48:	687b      	ldr	r3, [r7, #4]
   1ca4a:	2b00      	cmp	r3, #0
   1ca4c:	d1e8      	bne.n	1ca20 <strstr+0x20>
    return 0;
   1ca4e:	2300      	movs	r3, #0
}
   1ca50:	4618      	mov	r0, r3
   1ca52:	3710      	adds	r7, #16
   1ca54:	46bd      	mov	sp, r7
   1ca56:	bd80      	pop	{r7, pc}

0001ca58 <vstr_len>:
   1ca58:	b480      	push	{r7}
   1ca5a:	b083      	sub	sp, #12
   1ca5c:	af00      	add	r7, sp, #0
   1ca5e:	6078      	str	r0, [r7, #4]
   1ca60:	687b      	ldr	r3, [r7, #4]
   1ca62:	685b      	ldr	r3, [r3, #4]
   1ca64:	4618      	mov	r0, r3
   1ca66:	370c      	adds	r7, #12
   1ca68:	46bd      	mov	sp, r7
   1ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ca6e:	4770      	bx	lr

0001ca70 <readline_init0>:

#define READLINE_HIST_SIZE (MP_ARRAY_SIZE(MP_STATE_PORT(readline_hist)))

enum { ESEQ_NONE, ESEQ_ESC, ESEQ_ESC_BRACKET, ESEQ_ESC_BRACKET_DIGIT, ESEQ_ESC_O };

void readline_init0(void) {
   1ca70:	b580      	push	{r7, lr}
   1ca72:	af00      	add	r7, sp, #0
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1ca74:	2220      	movs	r2, #32
   1ca76:	2100      	movs	r1, #0
   1ca78:	4802      	ldr	r0, [pc, #8]	; (1ca84 <readline_init0+0x14>)
   1ca7a:	f7ff fe0b 	bl	1c694 <memset>
}
   1ca7e:	bf00      	nop
   1ca80:	bd80      	pop	{r7, pc}
   1ca82:	bf00      	nop
   1ca84:	200012a8 	.word	0x200012a8

0001ca88 <str_dup_maybe>:

STATIC char *str_dup_maybe(const char *str) {
   1ca88:	b580      	push	{r7, lr}
   1ca8a:	b084      	sub	sp, #16
   1ca8c:	af00      	add	r7, sp, #0
   1ca8e:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(str);
   1ca90:	6878      	ldr	r0, [r7, #4]
   1ca92:	f7ff fe9b 	bl	1c7cc <strlen>
   1ca96:	60f8      	str	r0, [r7, #12]
    char *s2 = m_new_maybe(char, len + 1);
   1ca98:	68fb      	ldr	r3, [r7, #12]
   1ca9a:	3301      	adds	r3, #1
   1ca9c:	4618      	mov	r0, r3
   1ca9e:	f7e3 fc54 	bl	34a <m_malloc_maybe>
   1caa2:	60b8      	str	r0, [r7, #8]
    if (s2 == NULL) {
   1caa4:	68bb      	ldr	r3, [r7, #8]
   1caa6:	2b00      	cmp	r3, #0
   1caa8:	d101      	bne.n	1caae <str_dup_maybe+0x26>
        return NULL;
   1caaa:	2300      	movs	r3, #0
   1caac:	e007      	b.n	1cabe <str_dup_maybe+0x36>
    }
    memcpy(s2, str, len + 1);
   1caae:	68fb      	ldr	r3, [r7, #12]
   1cab0:	3301      	adds	r3, #1
   1cab2:	461a      	mov	r2, r3
   1cab4:	6879      	ldr	r1, [r7, #4]
   1cab6:	68b8      	ldr	r0, [r7, #8]
   1cab8:	f7ff fd52 	bl	1c560 <memcpy>
    return s2;
   1cabc:	68bb      	ldr	r3, [r7, #8]
}
   1cabe:	4618      	mov	r0, r3
   1cac0:	3710      	adds	r7, #16
   1cac2:	46bd      	mov	sp, r7
   1cac4:	bd80      	pop	{r7, pc}

0001cac6 <mp_hal_move_cursor_back>:
#define MICROPY_HAL_HAS_VT100 (1)
#endif

// ...and provide the implementation using them
#if MICROPY_HAL_HAS_VT100
STATIC void mp_hal_move_cursor_back(uint pos) {
   1cac6:	b580      	push	{r7, lr}
   1cac8:	b086      	sub	sp, #24
   1caca:	af00      	add	r7, sp, #0
   1cacc:	6078      	str	r0, [r7, #4]
    if (pos <= 4) {
   1cace:	687b      	ldr	r3, [r7, #4]
   1cad0:	2b04      	cmp	r3, #4
   1cad2:	d804      	bhi.n	1cade <mp_hal_move_cursor_back+0x18>
        // fast path for most common case of 1 step back
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1cad4:	6879      	ldr	r1, [r7, #4]
   1cad6:	4811      	ldr	r0, [pc, #68]	; (1cb1c <mp_hal_move_cursor_back+0x56>)
   1cad8:	f7fe fca8 	bl	1b42c <mp_hal_stdout_tx_strn>
        if (n > 0) {
            vt100_command[n] = 'D'; // replace null char
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}
   1cadc:	e019      	b.n	1cb12 <mp_hal_move_cursor_back+0x4c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1cade:	f107 000c 	add.w	r0, r7, #12
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	4a0e      	ldr	r2, [pc, #56]	; (1cb20 <mp_hal_move_cursor_back+0x5a>)
   1cae6:	2106      	movs	r1, #6
   1cae8:	f7fe fac4 	bl	1b074 <snprintf>
   1caec:	6178      	str	r0, [r7, #20]
        if (n > 0) {
   1caee:	697b      	ldr	r3, [r7, #20]
   1caf0:	2b00      	cmp	r3, #0
   1caf2:	dd0e      	ble.n	1cb12 <mp_hal_move_cursor_back+0x4c>
            vt100_command[n] = 'D'; // replace null char
   1caf4:	f107 020c 	add.w	r2, r7, #12
   1caf8:	697b      	ldr	r3, [r7, #20]
   1cafa:	4413      	add	r3, r2
   1cafc:	2244      	movs	r2, #68	; 0x44
   1cafe:	701a      	strb	r2, [r3, #0]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1cb00:	697b      	ldr	r3, [r7, #20]
   1cb02:	3301      	adds	r3, #1
   1cb04:	461a      	mov	r2, r3
   1cb06:	f107 030c 	add.w	r3, r7, #12
   1cb0a:	4611      	mov	r1, r2
   1cb0c:	4618      	mov	r0, r3
   1cb0e:	f7fe fc8d 	bl	1b42c <mp_hal_stdout_tx_strn>
}
   1cb12:	bf00      	nop
   1cb14:	3718      	adds	r7, #24
   1cb16:	46bd      	mov	sp, r7
   1cb18:	bd80      	pop	{r7, pc}
   1cb1a:	bf00      	nop
   1cb1c:	00025038 	.word	0x00025038
   1cb20:	00025040 	.word	0x00025040

0001cb24 <mp_hal_erase_line_from_cursor>:

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1cb24:	b580      	push	{r7, lr}
   1cb26:	b082      	sub	sp, #8
   1cb28:	af00      	add	r7, sp, #0
   1cb2a:	6078      	str	r0, [r7, #4]
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1cb2c:	2103      	movs	r1, #3
   1cb2e:	4803      	ldr	r0, [pc, #12]	; (1cb3c <mp_hal_erase_line_from_cursor+0x18>)
   1cb30:	f7fe fc7c 	bl	1b42c <mp_hal_stdout_tx_strn>
}
   1cb34:	bf00      	nop
   1cb36:	3708      	adds	r7, #8
   1cb38:	46bd      	mov	sp, r7
   1cb3a:	bd80      	pop	{r7, pc}
   1cb3c:	00025048 	.word	0x00025048

0001cb40 <readline_process_char>:
    const char *prompt;
} readline_t;

STATIC readline_t rl;

int readline_process_char(int c) {
   1cb40:	b580      	push	{r7, lr}
   1cb42:	b08c      	sub	sp, #48	; 0x30
   1cb44:	af00      	add	r7, sp, #0
   1cb46:	6078      	str	r0, [r7, #4]
    size_t last_line_len = rl.line->len;
   1cb48:	4b8c      	ldr	r3, [pc, #560]	; (1cd7c <readline_process_char+0x23c>)
   1cb4a:	681b      	ldr	r3, [r3, #0]
   1cb4c:	685b      	ldr	r3, [r3, #4]
   1cb4e:	617b      	str	r3, [r7, #20]
    int redraw_step_back = 0;
   1cb50:	2300      	movs	r3, #0
   1cb52:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool redraw_from_cursor = false;
   1cb54:	2300      	movs	r3, #0
   1cb56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    int redraw_step_forward = 0;
   1cb5a:	2300      	movs	r3, #0
   1cb5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (rl.escape_seq == ESEQ_NONE) {
   1cb5e:	4b87      	ldr	r3, [pc, #540]	; (1cd7c <readline_process_char+0x23c>)
   1cb60:	689b      	ldr	r3, [r3, #8]
   1cb62:	2b00      	cmp	r3, #0
   1cb64:	f040 80e1 	bne.w	1cd2a <readline_process_char+0x1ea>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1cb68:	687b      	ldr	r3, [r7, #4]
   1cb6a:	2b00      	cmp	r3, #0
   1cb6c:	dd0e      	ble.n	1cb8c <readline_process_char+0x4c>
   1cb6e:	687b      	ldr	r3, [r7, #4]
   1cb70:	2b05      	cmp	r3, #5
   1cb72:	dc0b      	bgt.n	1cb8c <readline_process_char+0x4c>
   1cb74:	4b81      	ldr	r3, [pc, #516]	; (1cd7c <readline_process_char+0x23c>)
   1cb76:	681b      	ldr	r3, [r3, #0]
   1cb78:	4618      	mov	r0, r3
   1cb7a:	f7ff ff6d 	bl	1ca58 <vstr_len>
   1cb7e:	4602      	mov	r2, r0
   1cb80:	4b7e      	ldr	r3, [pc, #504]	; (1cd7c <readline_process_char+0x23c>)
   1cb82:	685b      	ldr	r3, [r3, #4]
   1cb84:	429a      	cmp	r2, r3
   1cb86:	d101      	bne.n	1cb8c <readline_process_char+0x4c>
            // control character with empty line
            return c;
   1cb88:	687b      	ldr	r3, [r7, #4]
   1cb8a:	e245      	b.n	1d018 <readline_process_char+0x4d8>
        } else if (c == CHAR_CTRL_A) {
   1cb8c:	687b      	ldr	r3, [r7, #4]
   1cb8e:	2b01      	cmp	r3, #1
   1cb90:	f000 819e 	beq.w	1ced0 <readline_process_char+0x390>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_B) {
            // CTRL-B with non-empty line is go-back-one-char
            goto left_arrow_key;
        #endif
        } else if (c == CHAR_CTRL_C) {
   1cb94:	687b      	ldr	r3, [r7, #4]
   1cb96:	2b03      	cmp	r3, #3
   1cb98:	d101      	bne.n	1cb9e <readline_process_char+0x5e>
            // CTRL-C with non-empty line is cancel
            return c;
   1cb9a:	687b      	ldr	r3, [r7, #4]
   1cb9c:	e23c      	b.n	1d018 <readline_process_char+0x4d8>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_D) {
            // CTRL-D with non-empty line is delete-at-cursor
            goto delete_key;
        #endif
        } else if (c == CHAR_CTRL_E) {
   1cb9e:	687b      	ldr	r3, [r7, #4]
   1cba0:	2b05      	cmp	r3, #5
   1cba2:	f000 81aa 	beq.w	1cefa <readline_process_char+0x3ba>
            vstr_cut_out_bytes(rl.line, rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
            // set redraw parameters
            redraw_step_back = rl.cursor_pos - rl.orig_line_len;
            redraw_from_cursor = true;
        #endif
        } else if (c == '\r') {
   1cba6:	687b      	ldr	r3, [r7, #4]
   1cba8:	2b0d      	cmp	r3, #13
   1cbaa:	d110      	bne.n	1cbce <readline_process_char+0x8e>
            // newline
            mp_hal_stdout_tx_str("\r\n");
   1cbac:	4874      	ldr	r0, [pc, #464]	; (1cd80 <readline_process_char+0x240>)
   1cbae:	f7ff fa55 	bl	1c05c <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1cbb2:	4b72      	ldr	r3, [pc, #456]	; (1cd7c <readline_process_char+0x23c>)
   1cbb4:	681b      	ldr	r3, [r3, #0]
   1cbb6:	4618      	mov	r0, r3
   1cbb8:	f7e4 fcd7 	bl	156a <vstr_null_terminated_str>
   1cbbc:	4602      	mov	r2, r0
   1cbbe:	4b6f      	ldr	r3, [pc, #444]	; (1cd7c <readline_process_char+0x23c>)
   1cbc0:	685b      	ldr	r3, [r3, #4]
   1cbc2:	4413      	add	r3, r2
   1cbc4:	4618      	mov	r0, r3
   1cbc6:	f000 fb19 	bl	1d1fc <readline_push_history>
            return 0;
   1cbca:	2300      	movs	r3, #0
   1cbcc:	e224      	b.n	1d018 <readline_process_char+0x4d8>
        } else if (c == 27) {
   1cbce:	687b      	ldr	r3, [r7, #4]
   1cbd0:	2b1b      	cmp	r3, #27
   1cbd2:	d103      	bne.n	1cbdc <readline_process_char+0x9c>
            // escape sequence
            rl.escape_seq = ESEQ_ESC;
   1cbd4:	4b69      	ldr	r3, [pc, #420]	; (1cd7c <readline_process_char+0x23c>)
   1cbd6:	2201      	movs	r2, #1
   1cbd8:	609a      	str	r2, [r3, #8]
   1cbda:	e1c3      	b.n	1cf64 <readline_process_char+0x424>
        } else if (c == 8 || c == 127) {
   1cbdc:	687b      	ldr	r3, [r7, #4]
   1cbde:	2b08      	cmp	r3, #8
   1cbe0:	d002      	beq.n	1cbe8 <readline_process_char+0xa8>
   1cbe2:	687b      	ldr	r3, [r7, #4]
   1cbe4:	2b7f      	cmp	r3, #127	; 0x7f
   1cbe6:	d13a      	bne.n	1cc5e <readline_process_char+0x11e>
            // backspace/delete
            if (rl.cursor_pos > rl.orig_line_len) {
   1cbe8:	4b64      	ldr	r3, [pc, #400]	; (1cd7c <readline_process_char+0x23c>)
   1cbea:	691a      	ldr	r2, [r3, #16]
   1cbec:	4b63      	ldr	r3, [pc, #396]	; (1cd7c <readline_process_char+0x23c>)
   1cbee:	685b      	ldr	r3, [r3, #4]
   1cbf0:	429a      	cmp	r2, r3
   1cbf2:	f240 81b7 	bls.w	1cf64 <readline_process_char+0x424>
                // work out how many chars to backspace
                #if MICROPY_REPL_AUTO_INDENT
                int nspace = 0;
   1cbf6:	2300      	movs	r3, #0
   1cbf8:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1cbfa:	4b60      	ldr	r3, [pc, #384]	; (1cd7c <readline_process_char+0x23c>)
   1cbfc:	685b      	ldr	r3, [r3, #4]
   1cbfe:	61fb      	str	r3, [r7, #28]
   1cc00:	e010      	b.n	1cc24 <readline_process_char+0xe4>
                    if (rl.line->buf[i] != ' ') {
   1cc02:	4b5e      	ldr	r3, [pc, #376]	; (1cd7c <readline_process_char+0x23c>)
   1cc04:	681b      	ldr	r3, [r3, #0]
   1cc06:	689a      	ldr	r2, [r3, #8]
   1cc08:	69fb      	ldr	r3, [r7, #28]
   1cc0a:	4413      	add	r3, r2
   1cc0c:	781b      	ldrb	r3, [r3, #0]
   1cc0e:	2b20      	cmp	r3, #32
   1cc10:	d002      	beq.n	1cc18 <readline_process_char+0xd8>
                        nspace = 0;
   1cc12:	2300      	movs	r3, #0
   1cc14:	623b      	str	r3, [r7, #32]
                        break;
   1cc16:	e00a      	b.n	1cc2e <readline_process_char+0xee>
                    }
                    nspace += 1;
   1cc18:	6a3b      	ldr	r3, [r7, #32]
   1cc1a:	3301      	adds	r3, #1
   1cc1c:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1cc1e:	69fb      	ldr	r3, [r7, #28]
   1cc20:	3301      	adds	r3, #1
   1cc22:	61fb      	str	r3, [r7, #28]
   1cc24:	4b55      	ldr	r3, [pc, #340]	; (1cd7c <readline_process_char+0x23c>)
   1cc26:	691a      	ldr	r2, [r3, #16]
   1cc28:	69fb      	ldr	r3, [r7, #28]
   1cc2a:	429a      	cmp	r2, r3
   1cc2c:	d8e9      	bhi.n	1cc02 <readline_process_char+0xc2>
                }
                if (nspace < 4) {
   1cc2e:	6a3b      	ldr	r3, [r7, #32]
   1cc30:	2b03      	cmp	r3, #3
   1cc32:	dc02      	bgt.n	1cc3a <readline_process_char+0xfa>
                    nspace = 1;
   1cc34:	2301      	movs	r3, #1
   1cc36:	623b      	str	r3, [r7, #32]
   1cc38:	e001      	b.n	1cc3e <readline_process_char+0xfe>
                } else {
                    nspace = 4;
   1cc3a:	2304      	movs	r3, #4
   1cc3c:	623b      	str	r3, [r7, #32]
                #else
                int nspace = 1;
                #endif

                // do the backspace
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1cc3e:	4b4f      	ldr	r3, [pc, #316]	; (1cd7c <readline_process_char+0x23c>)
   1cc40:	6818      	ldr	r0, [r3, #0]
   1cc42:	4b4e      	ldr	r3, [pc, #312]	; (1cd7c <readline_process_char+0x23c>)
   1cc44:	691a      	ldr	r2, [r3, #16]
   1cc46:	6a3b      	ldr	r3, [r7, #32]
   1cc48:	1ad3      	subs	r3, r2, r3
   1cc4a:	6a3a      	ldr	r2, [r7, #32]
   1cc4c:	4619      	mov	r1, r3
   1cc4e:	f7e4 fd7c 	bl	174a <vstr_cut_out_bytes>
                // set redraw parameters
                redraw_step_back = nspace;
   1cc52:	6a3b      	ldr	r3, [r7, #32]
   1cc54:	62fb      	str	r3, [r7, #44]	; 0x2c
                redraw_from_cursor = true;
   1cc56:	2301      	movs	r3, #1
   1cc58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (rl.cursor_pos > rl.orig_line_len) {
   1cc5c:	e182      	b.n	1cf64 <readline_process_char+0x424>
            }
        #if MICROPY_HELPER_REPL
        } else if (c == 9) {
   1cc5e:	687b      	ldr	r3, [r7, #4]
   1cc60:	2b09      	cmp	r3, #9
   1cc62:	d14c      	bne.n	1ccfe <readline_process_char+0x1be>
            // tab magic
            const char *compl_str;
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1cc64:	4b45      	ldr	r3, [pc, #276]	; (1cd7c <readline_process_char+0x23c>)
   1cc66:	681b      	ldr	r3, [r3, #0]
   1cc68:	689a      	ldr	r2, [r3, #8]
   1cc6a:	4b44      	ldr	r3, [pc, #272]	; (1cd7c <readline_process_char+0x23c>)
   1cc6c:	685b      	ldr	r3, [r3, #4]
   1cc6e:	18d0      	adds	r0, r2, r3
   1cc70:	4b42      	ldr	r3, [pc, #264]	; (1cd7c <readline_process_char+0x23c>)
   1cc72:	691a      	ldr	r2, [r3, #16]
   1cc74:	4b41      	ldr	r3, [pc, #260]	; (1cd7c <readline_process_char+0x23c>)
   1cc76:	685b      	ldr	r3, [r3, #4]
   1cc78:	1ad1      	subs	r1, r2, r3
   1cc7a:	f107 030c 	add.w	r3, r7, #12
   1cc7e:	4a41      	ldr	r2, [pc, #260]	; (1cd84 <readline_process_char+0x244>)
   1cc80:	f7fd feb4 	bl	1a9ec <mp_repl_autocomplete>
   1cc84:	6138      	str	r0, [r7, #16]
            if (compl_len == 0) {
   1cc86:	693b      	ldr	r3, [r7, #16]
   1cc88:	2b00      	cmp	r3, #0
   1cc8a:	f000 816b 	beq.w	1cf64 <readline_process_char+0x424>
                // no match
            } else if (compl_len == (size_t)(-1)) {
   1cc8e:	693b      	ldr	r3, [r7, #16]
   1cc90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cc94:	d116      	bne.n	1ccc4 <readline_process_char+0x184>
                // many matches
                mp_hal_stdout_tx_str(rl.prompt);
   1cc96:	4b39      	ldr	r3, [pc, #228]	; (1cd7c <readline_process_char+0x23c>)
   1cc98:	699b      	ldr	r3, [r3, #24]
   1cc9a:	4618      	mov	r0, r3
   1cc9c:	f7ff f9de 	bl	1c05c <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1cca0:	4b36      	ldr	r3, [pc, #216]	; (1cd7c <readline_process_char+0x23c>)
   1cca2:	681b      	ldr	r3, [r3, #0]
   1cca4:	689a      	ldr	r2, [r3, #8]
   1cca6:	4b35      	ldr	r3, [pc, #212]	; (1cd7c <readline_process_char+0x23c>)
   1cca8:	685b      	ldr	r3, [r3, #4]
   1ccaa:	18d0      	adds	r0, r2, r3
   1ccac:	4b33      	ldr	r3, [pc, #204]	; (1cd7c <readline_process_char+0x23c>)
   1ccae:	691a      	ldr	r2, [r3, #16]
   1ccb0:	4b32      	ldr	r3, [pc, #200]	; (1cd7c <readline_process_char+0x23c>)
   1ccb2:	685b      	ldr	r3, [r3, #4]
   1ccb4:	1ad3      	subs	r3, r2, r3
   1ccb6:	4619      	mov	r1, r3
   1ccb8:	f7fe fbb8 	bl	1b42c <mp_hal_stdout_tx_strn>
                redraw_from_cursor = true;
   1ccbc:	2301      	movs	r3, #1
   1ccbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1ccc2:	e14f      	b.n	1cf64 <readline_process_char+0x424>
            } else {
                // one match
                for (size_t i = 0; i < compl_len; ++i) {
   1ccc4:	2300      	movs	r3, #0
   1ccc6:	61bb      	str	r3, [r7, #24]
   1ccc8:	e00f      	b.n	1ccea <readline_process_char+0x1aa>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1ccca:	4b2c      	ldr	r3, [pc, #176]	; (1cd7c <readline_process_char+0x23c>)
   1cccc:	6818      	ldr	r0, [r3, #0]
   1ccce:	4b2b      	ldr	r3, [pc, #172]	; (1cd7c <readline_process_char+0x23c>)
   1ccd0:	691a      	ldr	r2, [r3, #16]
   1ccd2:	69bb      	ldr	r3, [r7, #24]
   1ccd4:	18d1      	adds	r1, r2, r3
   1ccd6:	68fb      	ldr	r3, [r7, #12]
   1ccd8:	1c5a      	adds	r2, r3, #1
   1ccda:	60fa      	str	r2, [r7, #12]
   1ccdc:	781b      	ldrb	r3, [r3, #0]
   1ccde:	461a      	mov	r2, r3
   1cce0:	f7e4 fce3 	bl	16aa <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1cce4:	69bb      	ldr	r3, [r7, #24]
   1cce6:	3301      	adds	r3, #1
   1cce8:	61bb      	str	r3, [r7, #24]
   1ccea:	69ba      	ldr	r2, [r7, #24]
   1ccec:	693b      	ldr	r3, [r7, #16]
   1ccee:	429a      	cmp	r2, r3
   1ccf0:	d3eb      	bcc.n	1ccca <readline_process_char+0x18a>
                }
                // set redraw parameters
                redraw_from_cursor = true;
   1ccf2:	2301      	movs	r3, #1
   1ccf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                redraw_step_forward = compl_len;
   1ccf8:	693b      	ldr	r3, [r7, #16]
   1ccfa:	627b      	str	r3, [r7, #36]	; 0x24
   1ccfc:	e132      	b.n	1cf64 <readline_process_char+0x424>
            }
        #endif
        } else if (32 <= c && c <= 126) {
   1ccfe:	687b      	ldr	r3, [r7, #4]
   1cd00:	2b1f      	cmp	r3, #31
   1cd02:	f340 812f 	ble.w	1cf64 <readline_process_char+0x424>
   1cd06:	687b      	ldr	r3, [r7, #4]
   1cd08:	2b7e      	cmp	r3, #126	; 0x7e
   1cd0a:	f300 812b 	bgt.w	1cf64 <readline_process_char+0x424>
            // printable character
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1cd0e:	4b1b      	ldr	r3, [pc, #108]	; (1cd7c <readline_process_char+0x23c>)
   1cd10:	6818      	ldr	r0, [r3, #0]
   1cd12:	4b1a      	ldr	r3, [pc, #104]	; (1cd7c <readline_process_char+0x23c>)
   1cd14:	691b      	ldr	r3, [r3, #16]
   1cd16:	687a      	ldr	r2, [r7, #4]
   1cd18:	4619      	mov	r1, r3
   1cd1a:	f7e4 fcda 	bl	16d2 <vstr_ins_char>
            // set redraw parameters
            redraw_from_cursor = true;
   1cd1e:	2301      	movs	r3, #1
   1cd20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            redraw_step_forward = 1;
   1cd24:	2301      	movs	r3, #1
   1cd26:	627b      	str	r3, [r7, #36]	; 0x24
   1cd28:	e11c      	b.n	1cf64 <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC) {
   1cd2a:	4b14      	ldr	r3, [pc, #80]	; (1cd7c <readline_process_char+0x23c>)
   1cd2c:	689b      	ldr	r3, [r3, #8]
   1cd2e:	2b01      	cmp	r3, #1
   1cd30:	d110      	bne.n	1cd54 <readline_process_char+0x214>
        switch (c) {
   1cd32:	687b      	ldr	r3, [r7, #4]
   1cd34:	2b4f      	cmp	r3, #79	; 0x4f
   1cd36:	d005      	beq.n	1cd44 <readline_process_char+0x204>
   1cd38:	2b5b      	cmp	r3, #91	; 0x5b
   1cd3a:	d107      	bne.n	1cd4c <readline_process_char+0x20c>
            case '[':
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1cd3c:	4b0f      	ldr	r3, [pc, #60]	; (1cd7c <readline_process_char+0x23c>)
   1cd3e:	2202      	movs	r2, #2
   1cd40:	609a      	str	r2, [r3, #8]
                break;
   1cd42:	e10f      	b.n	1cf64 <readline_process_char+0x424>
            case 'O':
                rl.escape_seq = ESEQ_ESC_O;
   1cd44:	4b0d      	ldr	r3, [pc, #52]	; (1cd7c <readline_process_char+0x23c>)
   1cd46:	2204      	movs	r2, #4
   1cd48:	609a      	str	r2, [r3, #8]
                break;
   1cd4a:	e10b      	b.n	1cf64 <readline_process_char+0x424>
            default:
                DEBUG_printf("(ESC %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1cd4c:	4b0b      	ldr	r3, [pc, #44]	; (1cd7c <readline_process_char+0x23c>)
   1cd4e:	2200      	movs	r2, #0
   1cd50:	609a      	str	r2, [r3, #8]
   1cd52:	e107      	b.n	1cf64 <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1cd54:	4b09      	ldr	r3, [pc, #36]	; (1cd7c <readline_process_char+0x23c>)
   1cd56:	689b      	ldr	r3, [r3, #8]
   1cd58:	2b02      	cmp	r3, #2
   1cd5a:	f040 80a9 	bne.w	1ceb0 <readline_process_char+0x370>
        if ('0' <= c && c <= '9') {
   1cd5e:	687b      	ldr	r3, [r7, #4]
   1cd60:	2b2f      	cmp	r3, #47	; 0x2f
   1cd62:	dd11      	ble.n	1cd88 <readline_process_char+0x248>
   1cd64:	687b      	ldr	r3, [r7, #4]
   1cd66:	2b39      	cmp	r3, #57	; 0x39
   1cd68:	dc0e      	bgt.n	1cd88 <readline_process_char+0x248>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1cd6a:	4b04      	ldr	r3, [pc, #16]	; (1cd7c <readline_process_char+0x23c>)
   1cd6c:	2203      	movs	r2, #3
   1cd6e:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1cd70:	687b      	ldr	r3, [r7, #4]
   1cd72:	b2da      	uxtb	r2, r3
   1cd74:	4b01      	ldr	r3, [pc, #4]	; (1cd7c <readline_process_char+0x23c>)
   1cd76:	751a      	strb	r2, [r3, #20]
   1cd78:	e0f4      	b.n	1cf64 <readline_process_char+0x424>
   1cd7a:	bf00      	nop
   1cd7c:	20001224 	.word	0x20001224
   1cd80:	0002504c 	.word	0x0002504c
   1cd84:	0001ef0c 	.word	0x0001ef0c
        } else {
            rl.escape_seq = ESEQ_NONE;
   1cd88:	4b96      	ldr	r3, [pc, #600]	; (1cfe4 <readline_process_char+0x4a4>)
   1cd8a:	2200      	movs	r2, #0
   1cd8c:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1cd8e:	687b      	ldr	r3, [r7, #4]
   1cd90:	2b41      	cmp	r3, #65	; 0x41
   1cd92:	d135      	bne.n	1ce00 <readline_process_char+0x2c0>
#if MICROPY_REPL_EMACS_KEYS
up_arrow_key:
#endif
                // up arrow
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1cd94:	4b93      	ldr	r3, [pc, #588]	; (1cfe4 <readline_process_char+0x4a4>)
   1cd96:	68db      	ldr	r3, [r3, #12]
   1cd98:	3301      	adds	r3, #1
   1cd9a:	2b07      	cmp	r3, #7
   1cd9c:	f300 80e2 	bgt.w	1cf64 <readline_process_char+0x424>
   1cda0:	4b90      	ldr	r3, [pc, #576]	; (1cfe4 <readline_process_char+0x4a4>)
   1cda2:	68db      	ldr	r3, [r3, #12]
   1cda4:	3301      	adds	r3, #1
   1cda6:	4a90      	ldr	r2, [pc, #576]	; (1cfe8 <readline_process_char+0x4a8>)
   1cda8:	331a      	adds	r3, #26
   1cdaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1cdae:	2b00      	cmp	r3, #0
   1cdb0:	f000 80d8 	beq.w	1cf64 <readline_process_char+0x424>
                    // increase hist num
                    rl.hist_cur += 1;
   1cdb4:	4b8b      	ldr	r3, [pc, #556]	; (1cfe4 <readline_process_char+0x4a4>)
   1cdb6:	68db      	ldr	r3, [r3, #12]
   1cdb8:	3301      	adds	r3, #1
   1cdba:	4a8a      	ldr	r2, [pc, #552]	; (1cfe4 <readline_process_char+0x4a4>)
   1cdbc:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    rl.line->len = rl.orig_line_len;
   1cdbe:	4b89      	ldr	r3, [pc, #548]	; (1cfe4 <readline_process_char+0x4a4>)
   1cdc0:	681b      	ldr	r3, [r3, #0]
   1cdc2:	4a88      	ldr	r2, [pc, #544]	; (1cfe4 <readline_process_char+0x4a4>)
   1cdc4:	6852      	ldr	r2, [r2, #4]
   1cdc6:	605a      	str	r2, [r3, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1cdc8:	4b86      	ldr	r3, [pc, #536]	; (1cfe4 <readline_process_char+0x4a4>)
   1cdca:	6818      	ldr	r0, [r3, #0]
   1cdcc:	4b85      	ldr	r3, [pc, #532]	; (1cfe4 <readline_process_char+0x4a4>)
   1cdce:	68db      	ldr	r3, [r3, #12]
   1cdd0:	4a85      	ldr	r2, [pc, #532]	; (1cfe8 <readline_process_char+0x4a8>)
   1cdd2:	331a      	adds	r3, #26
   1cdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1cdd8:	4619      	mov	r1, r3
   1cdda:	f7e4 fc02 	bl	15e2 <vstr_add_str>
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1cdde:	4b81      	ldr	r3, [pc, #516]	; (1cfe4 <readline_process_char+0x4a4>)
   1cde0:	691a      	ldr	r2, [r3, #16]
   1cde2:	4b80      	ldr	r3, [pc, #512]	; (1cfe4 <readline_process_char+0x4a4>)
   1cde4:	685b      	ldr	r3, [r3, #4]
   1cde6:	1ad3      	subs	r3, r2, r3
   1cde8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1cdea:	2301      	movs	r3, #1
   1cdec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1cdf0:	4b7c      	ldr	r3, [pc, #496]	; (1cfe4 <readline_process_char+0x4a4>)
   1cdf2:	681b      	ldr	r3, [r3, #0]
   1cdf4:	685a      	ldr	r2, [r3, #4]
   1cdf6:	4b7b      	ldr	r3, [pc, #492]	; (1cfe4 <readline_process_char+0x4a4>)
   1cdf8:	685b      	ldr	r3, [r3, #4]
   1cdfa:	1ad3      	subs	r3, r2, r3
   1cdfc:	627b      	str	r3, [r7, #36]	; 0x24
   1cdfe:	e0b1      	b.n	1cf64 <readline_process_char+0x424>
                }
            } else if (c == 'B') {
   1ce00:	687b      	ldr	r3, [r7, #4]
   1ce02:	2b42      	cmp	r3, #66	; 0x42
   1ce04:	d134      	bne.n	1ce70 <readline_process_char+0x330>
#if MICROPY_REPL_EMACS_KEYS
down_arrow_key:
#endif
                // down arrow
                if (rl.hist_cur >= 0) {
   1ce06:	4b77      	ldr	r3, [pc, #476]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce08:	68db      	ldr	r3, [r3, #12]
   1ce0a:	2b00      	cmp	r3, #0
   1ce0c:	f2c0 80aa 	blt.w	1cf64 <readline_process_char+0x424>
                    // decrease hist num
                    rl.hist_cur -= 1;
   1ce10:	4b74      	ldr	r3, [pc, #464]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce12:	68db      	ldr	r3, [r3, #12]
   1ce14:	3b01      	subs	r3, #1
   1ce16:	4a73      	ldr	r2, [pc, #460]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce18:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1ce1a:	4b72      	ldr	r3, [pc, #456]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce1c:	6818      	ldr	r0, [r3, #0]
   1ce1e:	4b71      	ldr	r3, [pc, #452]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce20:	681b      	ldr	r3, [r3, #0]
   1ce22:	685a      	ldr	r2, [r3, #4]
   1ce24:	4b6f      	ldr	r3, [pc, #444]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce26:	685b      	ldr	r3, [r3, #4]
   1ce28:	1ad3      	subs	r3, r2, r3
   1ce2a:	4619      	mov	r1, r3
   1ce2c:	f7e4 fc73 	bl	1716 <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1ce30:	4b6c      	ldr	r3, [pc, #432]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce32:	68db      	ldr	r3, [r3, #12]
   1ce34:	2b00      	cmp	r3, #0
   1ce36:	db0a      	blt.n	1ce4e <readline_process_char+0x30e>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1ce38:	4b6a      	ldr	r3, [pc, #424]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce3a:	6818      	ldr	r0, [r3, #0]
   1ce3c:	4b69      	ldr	r3, [pc, #420]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce3e:	68db      	ldr	r3, [r3, #12]
   1ce40:	4a69      	ldr	r2, [pc, #420]	; (1cfe8 <readline_process_char+0x4a8>)
   1ce42:	331a      	adds	r3, #26
   1ce44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ce48:	4619      	mov	r1, r3
   1ce4a:	f7e4 fbca 	bl	15e2 <vstr_add_str>
                    }
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1ce4e:	4b65      	ldr	r3, [pc, #404]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce50:	691a      	ldr	r2, [r3, #16]
   1ce52:	4b64      	ldr	r3, [pc, #400]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce54:	685b      	ldr	r3, [r3, #4]
   1ce56:	1ad3      	subs	r3, r2, r3
   1ce58:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1ce5a:	2301      	movs	r3, #1
   1ce5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1ce60:	4b60      	ldr	r3, [pc, #384]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce62:	681b      	ldr	r3, [r3, #0]
   1ce64:	685a      	ldr	r2, [r3, #4]
   1ce66:	4b5f      	ldr	r3, [pc, #380]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce68:	685b      	ldr	r3, [r3, #4]
   1ce6a:	1ad3      	subs	r3, r2, r3
   1ce6c:	627b      	str	r3, [r7, #36]	; 0x24
   1ce6e:	e079      	b.n	1cf64 <readline_process_char+0x424>
                }
            } else if (c == 'C') {
   1ce70:	687b      	ldr	r3, [r7, #4]
   1ce72:	2b43      	cmp	r3, #67	; 0x43
   1ce74:	d109      	bne.n	1ce8a <readline_process_char+0x34a>
#if MICROPY_REPL_EMACS_KEYS
right_arrow_key:
#endif
                // right arrow
                if (rl.cursor_pos < rl.line->len) {
   1ce76:	4b5b      	ldr	r3, [pc, #364]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce78:	691a      	ldr	r2, [r3, #16]
   1ce7a:	4b5a      	ldr	r3, [pc, #360]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce7c:	681b      	ldr	r3, [r3, #0]
   1ce7e:	685b      	ldr	r3, [r3, #4]
   1ce80:	429a      	cmp	r2, r3
   1ce82:	d26f      	bcs.n	1cf64 <readline_process_char+0x424>
                    redraw_step_forward = 1;
   1ce84:	2301      	movs	r3, #1
   1ce86:	627b      	str	r3, [r7, #36]	; 0x24
   1ce88:	e06c      	b.n	1cf64 <readline_process_char+0x424>
                }
            } else if (c == 'D') {
   1ce8a:	687b      	ldr	r3, [r7, #4]
   1ce8c:	2b44      	cmp	r3, #68	; 0x44
   1ce8e:	d108      	bne.n	1cea2 <readline_process_char+0x362>
#if MICROPY_REPL_EMACS_KEYS
left_arrow_key:
#endif
                // left arrow
                if (rl.cursor_pos > rl.orig_line_len) {
   1ce90:	4b54      	ldr	r3, [pc, #336]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce92:	691a      	ldr	r2, [r3, #16]
   1ce94:	4b53      	ldr	r3, [pc, #332]	; (1cfe4 <readline_process_char+0x4a4>)
   1ce96:	685b      	ldr	r3, [r3, #4]
   1ce98:	429a      	cmp	r2, r3
   1ce9a:	d963      	bls.n	1cf64 <readline_process_char+0x424>
                    redraw_step_back = 1;
   1ce9c:	2301      	movs	r3, #1
   1ce9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1cea0:	e060      	b.n	1cf64 <readline_process_char+0x424>
                }
            } else if (c == 'H') {
   1cea2:	687b      	ldr	r3, [r7, #4]
   1cea4:	2b48      	cmp	r3, #72	; 0x48
   1cea6:	d015      	beq.n	1ced4 <readline_process_char+0x394>
                // home
                goto home_key;
            } else if (c == 'F') {
   1cea8:	687b      	ldr	r3, [r7, #4]
   1ceaa:	2b46      	cmp	r3, #70	; 0x46
   1ceac:	d15a      	bne.n	1cf64 <readline_process_char+0x424>
                // end
                goto end_key;
   1ceae:	e027      	b.n	1cf00 <readline_process_char+0x3c0>
            } else {
                DEBUG_printf("(ESC [ %d)", c);
            }
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1ceb0:	4b4c      	ldr	r3, [pc, #304]	; (1cfe4 <readline_process_char+0x4a4>)
   1ceb2:	689b      	ldr	r3, [r3, #8]
   1ceb4:	2b03      	cmp	r3, #3
   1ceb6:	d145      	bne.n	1cf44 <readline_process_char+0x404>
        if (c == '~') {
   1ceb8:	687b      	ldr	r3, [r7, #4]
   1ceba:	2b7e      	cmp	r3, #126	; 0x7e
   1cebc:	d13e      	bne.n	1cf3c <readline_process_char+0x3fc>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1cebe:	4b49      	ldr	r3, [pc, #292]	; (1cfe4 <readline_process_char+0x4a4>)
   1cec0:	7d1b      	ldrb	r3, [r3, #20]
   1cec2:	2b31      	cmp	r3, #49	; 0x31
   1cec4:	d009      	beq.n	1ceda <readline_process_char+0x39a>
   1cec6:	4b47      	ldr	r3, [pc, #284]	; (1cfe4 <readline_process_char+0x4a4>)
   1cec8:	7d1b      	ldrb	r3, [r3, #20]
   1ceca:	2b37      	cmp	r3, #55	; 0x37
   1cecc:	d10c      	bne.n	1cee8 <readline_process_char+0x3a8>
   1cece:	e004      	b.n	1ceda <readline_process_char+0x39a>
            goto home_key;
   1ced0:	bf00      	nop
   1ced2:	e002      	b.n	1ceda <readline_process_char+0x39a>
                goto home_key;
   1ced4:	bf00      	nop
   1ced6:	e000      	b.n	1ceda <readline_process_char+0x39a>
        }
        rl.escape_seq = ESEQ_NONE;
    } else if (rl.escape_seq == ESEQ_ESC_O) {
        switch (c) {
            case 'H':
                goto home_key;
   1ced8:	bf00      	nop
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1ceda:	4b42      	ldr	r3, [pc, #264]	; (1cfe4 <readline_process_char+0x4a4>)
   1cedc:	691a      	ldr	r2, [r3, #16]
   1cede:	4b41      	ldr	r3, [pc, #260]	; (1cfe4 <readline_process_char+0x4a4>)
   1cee0:	685b      	ldr	r3, [r3, #4]
   1cee2:	1ad3      	subs	r3, r2, r3
   1cee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   1cee6:	e029      	b.n	1cf3c <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1cee8:	4b3e      	ldr	r3, [pc, #248]	; (1cfe4 <readline_process_char+0x4a4>)
   1ceea:	7d1b      	ldrb	r3, [r3, #20]
   1ceec:	2b34      	cmp	r3, #52	; 0x34
   1ceee:	d007      	beq.n	1cf00 <readline_process_char+0x3c0>
   1cef0:	4b3c      	ldr	r3, [pc, #240]	; (1cfe4 <readline_process_char+0x4a4>)
   1cef2:	7d1b      	ldrb	r3, [r3, #20]
   1cef4:	2b38      	cmp	r3, #56	; 0x38
   1cef6:	d10b      	bne.n	1cf10 <readline_process_char+0x3d0>
   1cef8:	e002      	b.n	1cf00 <readline_process_char+0x3c0>
            goto end_key;
   1cefa:	bf00      	nop
   1cefc:	e000      	b.n	1cf00 <readline_process_char+0x3c0>
            case 'F':
                goto end_key;
   1cefe:	bf00      	nop
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1cf00:	4b38      	ldr	r3, [pc, #224]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf02:	681b      	ldr	r3, [r3, #0]
   1cf04:	685a      	ldr	r2, [r3, #4]
   1cf06:	4b37      	ldr	r3, [pc, #220]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf08:	691b      	ldr	r3, [r3, #16]
   1cf0a:	1ad3      	subs	r3, r2, r3
   1cf0c:	627b      	str	r3, [r7, #36]	; 0x24
   1cf0e:	e015      	b.n	1cf3c <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '3') {
   1cf10:	4b34      	ldr	r3, [pc, #208]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf12:	7d1b      	ldrb	r3, [r3, #20]
   1cf14:	2b33      	cmp	r3, #51	; 0x33
   1cf16:	d111      	bne.n	1cf3c <readline_process_char+0x3fc>
                if (rl.cursor_pos < rl.line->len) {
   1cf18:	4b32      	ldr	r3, [pc, #200]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf1a:	691a      	ldr	r2, [r3, #16]
   1cf1c:	4b31      	ldr	r3, [pc, #196]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf1e:	681b      	ldr	r3, [r3, #0]
   1cf20:	685b      	ldr	r3, [r3, #4]
   1cf22:	429a      	cmp	r2, r3
   1cf24:	d20a      	bcs.n	1cf3c <readline_process_char+0x3fc>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1cf26:	4b2f      	ldr	r3, [pc, #188]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf28:	6818      	ldr	r0, [r3, #0]
   1cf2a:	4b2e      	ldr	r3, [pc, #184]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf2c:	691b      	ldr	r3, [r3, #16]
   1cf2e:	2201      	movs	r2, #1
   1cf30:	4619      	mov	r1, r3
   1cf32:	f7e4 fc0a 	bl	174a <vstr_cut_out_bytes>
                    redraw_from_cursor = true;
   1cf36:	2301      	movs	r3, #1
   1cf38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        rl.escape_seq = ESEQ_NONE;
   1cf3c:	4b29      	ldr	r3, [pc, #164]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf3e:	2200      	movs	r2, #0
   1cf40:	609a      	str	r2, [r3, #8]
   1cf42:	e00f      	b.n	1cf64 <readline_process_char+0x424>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1cf44:	4b27      	ldr	r3, [pc, #156]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf46:	689b      	ldr	r3, [r3, #8]
   1cf48:	2b04      	cmp	r3, #4
   1cf4a:	d108      	bne.n	1cf5e <readline_process_char+0x41e>
        switch (c) {
   1cf4c:	687b      	ldr	r3, [r7, #4]
   1cf4e:	2b46      	cmp	r3, #70	; 0x46
   1cf50:	d0d5      	beq.n	1cefe <readline_process_char+0x3be>
   1cf52:	2b48      	cmp	r3, #72	; 0x48
   1cf54:	d0c0      	beq.n	1ced8 <readline_process_char+0x398>
            default:
                DEBUG_printf("(ESC O %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1cf56:	4b23      	ldr	r3, [pc, #140]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf58:	2200      	movs	r2, #0
   1cf5a:	609a      	str	r2, [r3, #8]
   1cf5c:	e002      	b.n	1cf64 <readline_process_char+0x424>
        }
    } else {
        rl.escape_seq = ESEQ_NONE;
   1cf5e:	4b21      	ldr	r3, [pc, #132]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf60:	2200      	movs	r2, #0
   1cf62:	609a      	str	r2, [r3, #8]
    }

    // redraw command prompt, efficiently
    if (redraw_step_back > 0) {
   1cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cf66:	2b00      	cmp	r3, #0
   1cf68:	dd09      	ble.n	1cf7e <readline_process_char+0x43e>
        mp_hal_move_cursor_back(redraw_step_back);
   1cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cf6c:	4618      	mov	r0, r3
   1cf6e:	f7ff fdaa 	bl	1cac6 <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1cf72:	4b1c      	ldr	r3, [pc, #112]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf74:	691a      	ldr	r2, [r3, #16]
   1cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cf78:	1ad3      	subs	r3, r2, r3
   1cf7a:	4a1a      	ldr	r2, [pc, #104]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf7c:	6113      	str	r3, [r2, #16]
    }
    if (redraw_from_cursor) {
   1cf7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1cf82:	2b00      	cmp	r3, #0
   1cf84:	d032      	beq.n	1cfec <readline_process_char+0x4ac>
        if (rl.line->len < last_line_len) {
   1cf86:	4b17      	ldr	r3, [pc, #92]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf88:	681b      	ldr	r3, [r3, #0]
   1cf8a:	685a      	ldr	r2, [r3, #4]
   1cf8c:	697b      	ldr	r3, [r7, #20]
   1cf8e:	429a      	cmp	r2, r3
   1cf90:	d206      	bcs.n	1cfa0 <readline_process_char+0x460>
            // erase old chars
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1cf92:	4b14      	ldr	r3, [pc, #80]	; (1cfe4 <readline_process_char+0x4a4>)
   1cf94:	691b      	ldr	r3, [r3, #16]
   1cf96:	697a      	ldr	r2, [r7, #20]
   1cf98:	1ad3      	subs	r3, r2, r3
   1cf9a:	4618      	mov	r0, r3
   1cf9c:	f7ff fdc2 	bl	1cb24 <mp_hal_erase_line_from_cursor>
        }
        // draw new chars
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1cfa0:	4b10      	ldr	r3, [pc, #64]	; (1cfe4 <readline_process_char+0x4a4>)
   1cfa2:	681b      	ldr	r3, [r3, #0]
   1cfa4:	689a      	ldr	r2, [r3, #8]
   1cfa6:	4b0f      	ldr	r3, [pc, #60]	; (1cfe4 <readline_process_char+0x4a4>)
   1cfa8:	691b      	ldr	r3, [r3, #16]
   1cfaa:	18d0      	adds	r0, r2, r3
   1cfac:	4b0d      	ldr	r3, [pc, #52]	; (1cfe4 <readline_process_char+0x4a4>)
   1cfae:	681b      	ldr	r3, [r3, #0]
   1cfb0:	685a      	ldr	r2, [r3, #4]
   1cfb2:	4b0c      	ldr	r3, [pc, #48]	; (1cfe4 <readline_process_char+0x4a4>)
   1cfb4:	691b      	ldr	r3, [r3, #16]
   1cfb6:	1ad3      	subs	r3, r2, r3
   1cfb8:	4619      	mov	r1, r3
   1cfba:	f7fe fa37 	bl	1b42c <mp_hal_stdout_tx_strn>
        // move cursor forward if needed (already moved forward by length of line, so move it back)
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1cfbe:	4b09      	ldr	r3, [pc, #36]	; (1cfe4 <readline_process_char+0x4a4>)
   1cfc0:	681b      	ldr	r3, [r3, #0]
   1cfc2:	685a      	ldr	r2, [r3, #4]
   1cfc4:	4b07      	ldr	r3, [pc, #28]	; (1cfe4 <readline_process_char+0x4a4>)
   1cfc6:	6919      	ldr	r1, [r3, #16]
   1cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cfca:	440b      	add	r3, r1
   1cfcc:	1ad3      	subs	r3, r2, r3
   1cfce:	4618      	mov	r0, r3
   1cfd0:	f7ff fd79 	bl	1cac6 <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1cfd4:	4b03      	ldr	r3, [pc, #12]	; (1cfe4 <readline_process_char+0x4a4>)
   1cfd6:	691a      	ldr	r2, [r3, #16]
   1cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cfda:	4413      	add	r3, r2
   1cfdc:	4a01      	ldr	r2, [pc, #4]	; (1cfe4 <readline_process_char+0x4a4>)
   1cfde:	6113      	str	r3, [r2, #16]
   1cfe0:	e018      	b.n	1d014 <readline_process_char+0x4d4>
   1cfe2:	bf00      	nop
   1cfe4:	20001224 	.word	0x20001224
   1cfe8:	20001240 	.word	0x20001240
    } else if (redraw_step_forward > 0) {
   1cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cfee:	2b00      	cmp	r3, #0
   1cff0:	dd10      	ble.n	1d014 <readline_process_char+0x4d4>
        // draw over old chars to move cursor forwards
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1cff2:	4b0b      	ldr	r3, [pc, #44]	; (1d020 <readline_process_char+0x4e0>)
   1cff4:	681b      	ldr	r3, [r3, #0]
   1cff6:	689a      	ldr	r2, [r3, #8]
   1cff8:	4b09      	ldr	r3, [pc, #36]	; (1d020 <readline_process_char+0x4e0>)
   1cffa:	691b      	ldr	r3, [r3, #16]
   1cffc:	4413      	add	r3, r2
   1cffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d000:	4611      	mov	r1, r2
   1d002:	4618      	mov	r0, r3
   1d004:	f7fe fa12 	bl	1b42c <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1d008:	4b05      	ldr	r3, [pc, #20]	; (1d020 <readline_process_char+0x4e0>)
   1d00a:	691a      	ldr	r2, [r3, #16]
   1d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d00e:	4413      	add	r3, r2
   1d010:	4a03      	ldr	r2, [pc, #12]	; (1d020 <readline_process_char+0x4e0>)
   1d012:	6113      	str	r3, [r2, #16]
    }

    return -1;
   1d014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1d018:	4618      	mov	r0, r3
   1d01a:	3730      	adds	r7, #48	; 0x30
   1d01c:	46bd      	mov	sp, r7
   1d01e:	bd80      	pop	{r7, pc}
   1d020:	20001224 	.word	0x20001224

0001d024 <readline_auto_indent>:

#if MICROPY_REPL_AUTO_INDENT
STATIC void readline_auto_indent(void) {
   1d024:	b580      	push	{r7, lr}
   1d026:	b086      	sub	sp, #24
   1d028:	af00      	add	r7, sp, #0
    vstr_t *line = rl.line;
   1d02a:	4b44      	ldr	r3, [pc, #272]	; (1d13c <readline_auto_indent+0x118>)
   1d02c:	681b      	ldr	r3, [r3, #0]
   1d02e:	607b      	str	r3, [r7, #4]
    if (line->len > 1 && line->buf[line->len - 1] == '\n') {
   1d030:	687b      	ldr	r3, [r7, #4]
   1d032:	685b      	ldr	r3, [r3, #4]
   1d034:	2b01      	cmp	r3, #1
   1d036:	d97d      	bls.n	1d134 <readline_auto_indent+0x110>
   1d038:	687b      	ldr	r3, [r7, #4]
   1d03a:	689a      	ldr	r2, [r3, #8]
   1d03c:	687b      	ldr	r3, [r7, #4]
   1d03e:	685b      	ldr	r3, [r3, #4]
   1d040:	3b01      	subs	r3, #1
   1d042:	4413      	add	r3, r2
   1d044:	781b      	ldrb	r3, [r3, #0]
   1d046:	2b0a      	cmp	r3, #10
   1d048:	d174      	bne.n	1d134 <readline_auto_indent+0x110>
        int i;
        for (i = line->len - 1; i > 0; i--) {
   1d04a:	687b      	ldr	r3, [r7, #4]
   1d04c:	685b      	ldr	r3, [r3, #4]
   1d04e:	3b01      	subs	r3, #1
   1d050:	617b      	str	r3, [r7, #20]
   1d052:	e00a      	b.n	1d06a <readline_auto_indent+0x46>
            if (line->buf[i - 1] == '\n') {
   1d054:	687b      	ldr	r3, [r7, #4]
   1d056:	689a      	ldr	r2, [r3, #8]
   1d058:	697b      	ldr	r3, [r7, #20]
   1d05a:	3b01      	subs	r3, #1
   1d05c:	4413      	add	r3, r2
   1d05e:	781b      	ldrb	r3, [r3, #0]
   1d060:	2b0a      	cmp	r3, #10
   1d062:	d006      	beq.n	1d072 <readline_auto_indent+0x4e>
        for (i = line->len - 1; i > 0; i--) {
   1d064:	697b      	ldr	r3, [r7, #20]
   1d066:	3b01      	subs	r3, #1
   1d068:	617b      	str	r3, [r7, #20]
   1d06a:	697b      	ldr	r3, [r7, #20]
   1d06c:	2b00      	cmp	r3, #0
   1d06e:	dcf1      	bgt.n	1d054 <readline_auto_indent+0x30>
   1d070:	e000      	b.n	1d074 <readline_auto_indent+0x50>
                break;
   1d072:	bf00      	nop
            }
        }
        size_t j;
        for (j = i; j < line->len; j++) {
   1d074:	697b      	ldr	r3, [r7, #20]
   1d076:	613b      	str	r3, [r7, #16]
   1d078:	e009      	b.n	1d08e <readline_auto_indent+0x6a>
            if (line->buf[j] != ' ') {
   1d07a:	687b      	ldr	r3, [r7, #4]
   1d07c:	689a      	ldr	r2, [r3, #8]
   1d07e:	693b      	ldr	r3, [r7, #16]
   1d080:	4413      	add	r3, r2
   1d082:	781b      	ldrb	r3, [r3, #0]
   1d084:	2b20      	cmp	r3, #32
   1d086:	d108      	bne.n	1d09a <readline_auto_indent+0x76>
        for (j = i; j < line->len; j++) {
   1d088:	693b      	ldr	r3, [r7, #16]
   1d08a:	3301      	adds	r3, #1
   1d08c:	613b      	str	r3, [r7, #16]
   1d08e:	687b      	ldr	r3, [r7, #4]
   1d090:	685a      	ldr	r2, [r3, #4]
   1d092:	693b      	ldr	r3, [r7, #16]
   1d094:	429a      	cmp	r2, r3
   1d096:	d8f0      	bhi.n	1d07a <readline_auto_indent+0x56>
   1d098:	e000      	b.n	1d09c <readline_auto_indent+0x78>
                break;
   1d09a:	bf00      	nop
            }
        }
        // i=start of line; j=first non-space
        if (i > 0 && j + 1 == line->len) {
   1d09c:	697b      	ldr	r3, [r7, #20]
   1d09e:	2b00      	cmp	r3, #0
   1d0a0:	dd21      	ble.n	1d0e6 <readline_auto_indent+0xc2>
   1d0a2:	693b      	ldr	r3, [r7, #16]
   1d0a4:	1c5a      	adds	r2, r3, #1
   1d0a6:	687b      	ldr	r3, [r7, #4]
   1d0a8:	685b      	ldr	r3, [r3, #4]
   1d0aa:	429a      	cmp	r2, r3
   1d0ac:	d11b      	bne.n	1d0e6 <readline_auto_indent+0xc2>
            // previous line is not first line and is all spaces
            for (size_t k = i - 1; k > 0; --k) {
   1d0ae:	697b      	ldr	r3, [r7, #20]
   1d0b0:	3b01      	subs	r3, #1
   1d0b2:	60fb      	str	r3, [r7, #12]
   1d0b4:	e012      	b.n	1d0dc <readline_auto_indent+0xb8>
                if (line->buf[k - 1] == '\n') {
   1d0b6:	687b      	ldr	r3, [r7, #4]
   1d0b8:	689a      	ldr	r2, [r3, #8]
   1d0ba:	68fb      	ldr	r3, [r7, #12]
   1d0bc:	3b01      	subs	r3, #1
   1d0be:	4413      	add	r3, r2
   1d0c0:	781b      	ldrb	r3, [r3, #0]
   1d0c2:	2b0a      	cmp	r3, #10
   1d0c4:	d035      	beq.n	1d132 <readline_auto_indent+0x10e>
                    // don't auto-indent if last 2 lines are all spaces
                    return;
                } else if (line->buf[k - 1] != ' ') {
   1d0c6:	687b      	ldr	r3, [r7, #4]
   1d0c8:	689a      	ldr	r2, [r3, #8]
   1d0ca:	68fb      	ldr	r3, [r7, #12]
   1d0cc:	3b01      	subs	r3, #1
   1d0ce:	4413      	add	r3, r2
   1d0d0:	781b      	ldrb	r3, [r3, #0]
   1d0d2:	2b20      	cmp	r3, #32
   1d0d4:	d106      	bne.n	1d0e4 <readline_auto_indent+0xc0>
            for (size_t k = i - 1; k > 0; --k) {
   1d0d6:	68fb      	ldr	r3, [r7, #12]
   1d0d8:	3b01      	subs	r3, #1
   1d0da:	60fb      	str	r3, [r7, #12]
   1d0dc:	68fb      	ldr	r3, [r7, #12]
   1d0de:	2b00      	cmp	r3, #0
   1d0e0:	d1e9      	bne.n	1d0b6 <readline_auto_indent+0x92>
   1d0e2:	e000      	b.n	1d0e6 <readline_auto_indent+0xc2>
                    // 2nd previous line is not all spaces
                    break;
   1d0e4:	bf00      	nop
                }
            }
        }
        int n = (j - i) / 4;
   1d0e6:	697b      	ldr	r3, [r7, #20]
   1d0e8:	693a      	ldr	r2, [r7, #16]
   1d0ea:	1ad3      	subs	r3, r2, r3
   1d0ec:	089b      	lsrs	r3, r3, #2
   1d0ee:	60bb      	str	r3, [r7, #8]
        if (line->buf[line->len - 2] == ':') {
   1d0f0:	687b      	ldr	r3, [r7, #4]
   1d0f2:	689a      	ldr	r2, [r3, #8]
   1d0f4:	687b      	ldr	r3, [r7, #4]
   1d0f6:	685b      	ldr	r3, [r3, #4]
   1d0f8:	3b02      	subs	r3, #2
   1d0fa:	4413      	add	r3, r2
   1d0fc:	781b      	ldrb	r3, [r3, #0]
   1d0fe:	2b3a      	cmp	r3, #58	; 0x3a
   1d100:	d111      	bne.n	1d126 <readline_auto_indent+0x102>
            n += 1;
   1d102:	68bb      	ldr	r3, [r7, #8]
   1d104:	3301      	adds	r3, #1
   1d106:	60bb      	str	r3, [r7, #8]
        }
        while (n-- > 0) {
   1d108:	e00d      	b.n	1d126 <readline_auto_indent+0x102>
            vstr_add_strn(line, "    ", 4);
   1d10a:	2204      	movs	r2, #4
   1d10c:	490c      	ldr	r1, [pc, #48]	; (1d140 <readline_auto_indent+0x11c>)
   1d10e:	6878      	ldr	r0, [r7, #4]
   1d110:	f7e4 fa79 	bl	1606 <vstr_add_strn>
            mp_hal_stdout_tx_strn("    ", 4);
   1d114:	2104      	movs	r1, #4
   1d116:	480a      	ldr	r0, [pc, #40]	; (1d140 <readline_auto_indent+0x11c>)
   1d118:	f7fe f988 	bl	1b42c <mp_hal_stdout_tx_strn>
            rl.cursor_pos += 4;
   1d11c:	4b07      	ldr	r3, [pc, #28]	; (1d13c <readline_auto_indent+0x118>)
   1d11e:	691b      	ldr	r3, [r3, #16]
   1d120:	3304      	adds	r3, #4
   1d122:	4a06      	ldr	r2, [pc, #24]	; (1d13c <readline_auto_indent+0x118>)
   1d124:	6113      	str	r3, [r2, #16]
        while (n-- > 0) {
   1d126:	68bb      	ldr	r3, [r7, #8]
   1d128:	1e5a      	subs	r2, r3, #1
   1d12a:	60ba      	str	r2, [r7, #8]
   1d12c:	2b00      	cmp	r3, #0
   1d12e:	dcec      	bgt.n	1d10a <readline_auto_indent+0xe6>
   1d130:	e000      	b.n	1d134 <readline_auto_indent+0x110>
                    return;
   1d132:	bf00      	nop
        }
    }
}
   1d134:	3718      	adds	r7, #24
   1d136:	46bd      	mov	sp, r7
   1d138:	bd80      	pop	{r7, pc}
   1d13a:	bf00      	nop
   1d13c:	20001224 	.word	0x20001224
   1d140:	00025050 	.word	0x00025050

0001d144 <readline_note_newline>:
#endif

void readline_note_newline(const char *prompt) {
   1d144:	b580      	push	{r7, lr}
   1d146:	b082      	sub	sp, #8
   1d148:	af00      	add	r7, sp, #0
   1d14a:	6078      	str	r0, [r7, #4]
    rl.orig_line_len = rl.line->len;
   1d14c:	4b0a      	ldr	r3, [pc, #40]	; (1d178 <readline_note_newline+0x34>)
   1d14e:	681b      	ldr	r3, [r3, #0]
   1d150:	685b      	ldr	r3, [r3, #4]
   1d152:	4a09      	ldr	r2, [pc, #36]	; (1d178 <readline_note_newline+0x34>)
   1d154:	6053      	str	r3, [r2, #4]
    rl.cursor_pos = rl.orig_line_len;
   1d156:	4b08      	ldr	r3, [pc, #32]	; (1d178 <readline_note_newline+0x34>)
   1d158:	685b      	ldr	r3, [r3, #4]
   1d15a:	4a07      	ldr	r2, [pc, #28]	; (1d178 <readline_note_newline+0x34>)
   1d15c:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1d15e:	4a06      	ldr	r2, [pc, #24]	; (1d178 <readline_note_newline+0x34>)
   1d160:	687b      	ldr	r3, [r7, #4]
   1d162:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1d164:	6878      	ldr	r0, [r7, #4]
   1d166:	f7fe ff79 	bl	1c05c <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1d16a:	f7ff ff5b 	bl	1d024 <readline_auto_indent>
    #endif
}
   1d16e:	bf00      	nop
   1d170:	3708      	adds	r7, #8
   1d172:	46bd      	mov	sp, r7
   1d174:	bd80      	pop	{r7, pc}
   1d176:	bf00      	nop
   1d178:	20001224 	.word	0x20001224

0001d17c <readline_init>:

void readline_init(vstr_t *line, const char *prompt) {
   1d17c:	b580      	push	{r7, lr}
   1d17e:	b082      	sub	sp, #8
   1d180:	af00      	add	r7, sp, #0
   1d182:	6078      	str	r0, [r7, #4]
   1d184:	6039      	str	r1, [r7, #0]
    rl.line = line;
   1d186:	4a10      	ldr	r2, [pc, #64]	; (1d1c8 <readline_init+0x4c>)
   1d188:	687b      	ldr	r3, [r7, #4]
   1d18a:	6013      	str	r3, [r2, #0]
    rl.orig_line_len = line->len;
   1d18c:	687b      	ldr	r3, [r7, #4]
   1d18e:	685b      	ldr	r3, [r3, #4]
   1d190:	4a0d      	ldr	r2, [pc, #52]	; (1d1c8 <readline_init+0x4c>)
   1d192:	6053      	str	r3, [r2, #4]
    rl.escape_seq = ESEQ_NONE;
   1d194:	4b0c      	ldr	r3, [pc, #48]	; (1d1c8 <readline_init+0x4c>)
   1d196:	2200      	movs	r2, #0
   1d198:	609a      	str	r2, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1d19a:	4b0b      	ldr	r3, [pc, #44]	; (1d1c8 <readline_init+0x4c>)
   1d19c:	2200      	movs	r2, #0
   1d19e:	751a      	strb	r2, [r3, #20]
    rl.hist_cur = -1;
   1d1a0:	4b09      	ldr	r3, [pc, #36]	; (1d1c8 <readline_init+0x4c>)
   1d1a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d1a6:	60da      	str	r2, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1d1a8:	4b07      	ldr	r3, [pc, #28]	; (1d1c8 <readline_init+0x4c>)
   1d1aa:	685b      	ldr	r3, [r3, #4]
   1d1ac:	4a06      	ldr	r2, [pc, #24]	; (1d1c8 <readline_init+0x4c>)
   1d1ae:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1d1b0:	4a05      	ldr	r2, [pc, #20]	; (1d1c8 <readline_init+0x4c>)
   1d1b2:	683b      	ldr	r3, [r7, #0]
   1d1b4:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1d1b6:	6838      	ldr	r0, [r7, #0]
   1d1b8:	f7fe ff50 	bl	1c05c <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1d1bc:	f7ff ff32 	bl	1d024 <readline_auto_indent>
    #endif
}
   1d1c0:	bf00      	nop
   1d1c2:	3708      	adds	r7, #8
   1d1c4:	46bd      	mov	sp, r7
   1d1c6:	bd80      	pop	{r7, pc}
   1d1c8:	20001224 	.word	0x20001224

0001d1cc <readline>:

int readline(vstr_t *line, const char *prompt) {
   1d1cc:	b580      	push	{r7, lr}
   1d1ce:	b084      	sub	sp, #16
   1d1d0:	af00      	add	r7, sp, #0
   1d1d2:	6078      	str	r0, [r7, #4]
   1d1d4:	6039      	str	r1, [r7, #0]
    readline_init(line, prompt);
   1d1d6:	6839      	ldr	r1, [r7, #0]
   1d1d8:	6878      	ldr	r0, [r7, #4]
   1d1da:	f7ff ffcf 	bl	1d17c <readline_init>
    for (;;) {
        int c = mp_hal_stdin_rx_chr();
   1d1de:	f7fe f90d 	bl	1b3fc <mp_hal_stdin_rx_chr>
   1d1e2:	60f8      	str	r0, [r7, #12]
        int r = readline_process_char(c);
   1d1e4:	68f8      	ldr	r0, [r7, #12]
   1d1e6:	f7ff fcab 	bl	1cb40 <readline_process_char>
   1d1ea:	60b8      	str	r0, [r7, #8]
        if (r >= 0) {
   1d1ec:	68bb      	ldr	r3, [r7, #8]
   1d1ee:	2b00      	cmp	r3, #0
   1d1f0:	dbf5      	blt.n	1d1de <readline+0x12>
            return r;
   1d1f2:	68bb      	ldr	r3, [r7, #8]
        }
    }
}
   1d1f4:	4618      	mov	r0, r3
   1d1f6:	3710      	adds	r7, #16
   1d1f8:	46bd      	mov	sp, r7
   1d1fa:	bd80      	pop	{r7, pc}

0001d1fc <readline_push_history>:

void readline_push_history(const char *line) {
   1d1fc:	b580      	push	{r7, lr}
   1d1fe:	b084      	sub	sp, #16
   1d200:	af00      	add	r7, sp, #0
   1d202:	6078      	str	r0, [r7, #4]
    if (line[0] != '\0'
   1d204:	687b      	ldr	r3, [r7, #4]
   1d206:	781b      	ldrb	r3, [r3, #0]
   1d208:	2b00      	cmp	r3, #0
   1d20a:	d02a      	beq.n	1d262 <readline_push_history+0x66>
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1d20c:	4b17      	ldr	r3, [pc, #92]	; (1d26c <readline_push_history+0x70>)
   1d20e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1d210:	2b00      	cmp	r3, #0
   1d212:	d008      	beq.n	1d226 <readline_push_history+0x2a>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1d214:	4b15      	ldr	r3, [pc, #84]	; (1d26c <readline_push_history+0x70>)
   1d216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1d218:	6879      	ldr	r1, [r7, #4]
   1d21a:	4618      	mov	r0, r3
   1d21c:	f7ff faf0 	bl	1c800 <strcmp>
   1d220:	4603      	mov	r3, r0
   1d222:	2b00      	cmp	r3, #0
   1d224:	d01d      	beq.n	1d262 <readline_push_history+0x66>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1d226:	6878      	ldr	r0, [r7, #4]
   1d228:	f7ff fc2e 	bl	1ca88 <str_dup_maybe>
   1d22c:	60b8      	str	r0, [r7, #8]
        if (most_recent_hist != NULL) {
   1d22e:	68bb      	ldr	r3, [r7, #8]
   1d230:	2b00      	cmp	r3, #0
   1d232:	d016      	beq.n	1d262 <readline_push_history+0x66>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1d234:	2307      	movs	r3, #7
   1d236:	60fb      	str	r3, [r7, #12]
   1d238:	e00d      	b.n	1d256 <readline_push_history+0x5a>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1d23a:	68fb      	ldr	r3, [r7, #12]
   1d23c:	3b01      	subs	r3, #1
   1d23e:	4a0b      	ldr	r2, [pc, #44]	; (1d26c <readline_push_history+0x70>)
   1d240:	331a      	adds	r3, #26
   1d242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1d246:	4909      	ldr	r1, [pc, #36]	; (1d26c <readline_push_history+0x70>)
   1d248:	68fb      	ldr	r3, [r7, #12]
   1d24a:	331a      	adds	r3, #26
   1d24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1d250:	68fb      	ldr	r3, [r7, #12]
   1d252:	3b01      	subs	r3, #1
   1d254:	60fb      	str	r3, [r7, #12]
   1d256:	68fb      	ldr	r3, [r7, #12]
   1d258:	2b00      	cmp	r3, #0
   1d25a:	dcee      	bgt.n	1d23a <readline_push_history+0x3e>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1d25c:	4a03      	ldr	r2, [pc, #12]	; (1d26c <readline_push_history+0x70>)
   1d25e:	68bb      	ldr	r3, [r7, #8]
   1d260:	6693      	str	r3, [r2, #104]	; 0x68
        }
    }
}
   1d262:	bf00      	nop
   1d264:	3710      	adds	r7, #16
   1d266:	46bd      	mov	sp, r7
   1d268:	bd80      	pop	{r7, pc}
   1d26a:	bf00      	nop
   1d26c:	20001240 	.word	0x20001240

0001d270 <GPIODirModeSet>:
   1d270:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
   1d274:	f012 0f01 	tst.w	r2, #1
   1d278:	bf14      	ite	ne
   1d27a:	430b      	orrne	r3, r1
   1d27c:	438b      	biceq	r3, r1
   1d27e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
   1d282:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
   1d286:	0792      	lsls	r2, r2, #30
   1d288:	bf4c      	ite	mi
   1d28a:	4319      	orrmi	r1, r3
   1d28c:	ea23 0101 	bicpl.w	r1, r3, r1
   1d290:	f8c0 1420 	str.w	r1, [r0, #1056]	; 0x420
   1d294:	4770      	bx	lr

0001d296 <GPIODirModeGet>:
   1d296:	2301      	movs	r3, #1
   1d298:	fa03 f101 	lsl.w	r1, r3, r1
   1d29c:	b510      	push	{r4, lr}
   1d29e:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
   1d2a2:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
   1d2a6:	b2c9      	uxtb	r1, r1
   1d2a8:	420c      	tst	r4, r1
   1d2aa:	bf08      	it	eq
   1d2ac:	2300      	moveq	r3, #0
   1d2ae:	420a      	tst	r2, r1
   1d2b0:	bf14      	ite	ne
   1d2b2:	2002      	movne	r0, #2
   1d2b4:	2000      	moveq	r0, #0
   1d2b6:	4318      	orrs	r0, r3
   1d2b8:	bd10      	pop	{r4, pc}

0001d2ba <GPIOPadConfigSet>:
   1d2ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d2bc:	f3c2 1741 	ubfx	r7, r2, #5, #2
   1d2c0:	2500      	movs	r5, #0
   1d2c2:	f04f 0e03 	mov.w	lr, #3
   1d2c6:	fa41 f405 	asr.w	r4, r1, r5
   1d2ca:	07e6      	lsls	r6, r4, #31
   1d2cc:	d50f      	bpl.n	1d2ee <GPIOPadConfigSet+0x34>
   1d2ce:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1d2d2:	006c      	lsls	r4, r5, #1
   1d2d4:	fa0e fc04 	lsl.w	ip, lr, r4
   1d2d8:	ea26 060c 	bic.w	r6, r6, ip
   1d2dc:	f8c0 6fc4 	str.w	r6, [r0, #4036]	; 0xfc4
   1d2e0:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1d2e4:	fa07 f404 	lsl.w	r4, r7, r4
   1d2e8:	4334      	orrs	r4, r6
   1d2ea:	f8c0 4fc4 	str.w	r4, [r0, #4036]	; 0xfc4
   1d2ee:	3501      	adds	r5, #1
   1d2f0:	2d08      	cmp	r5, #8
   1d2f2:	d1e8      	bne.n	1d2c6 <GPIOPadConfigSet+0xc>
   1d2f4:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
   1d2f8:	07d5      	lsls	r5, r2, #31
   1d2fa:	bf4c      	ite	mi
   1d2fc:	430c      	orrmi	r4, r1
   1d2fe:	438c      	bicpl	r4, r1
   1d300:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
   1d304:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1d308:	0797      	lsls	r7, r2, #30
   1d30a:	bf4c      	ite	mi
   1d30c:	430c      	orrmi	r4, r1
   1d30e:	438c      	bicpl	r4, r1
   1d310:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
   1d314:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1d318:	0756      	lsls	r6, r2, #29
   1d31a:	bf4c      	ite	mi
   1d31c:	430c      	orrmi	r4, r1
   1d31e:	438c      	bicpl	r4, r1
   1d320:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
   1d324:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1d328:	0715      	lsls	r5, r2, #28
   1d32a:	bf4c      	ite	mi
   1d32c:	430c      	orrmi	r4, r1
   1d32e:	438c      	bicpl	r4, r1
   1d330:	f8c0 4518 	str.w	r4, [r0, #1304]	; 0x518
   1d334:	f012 0f10 	tst.w	r2, #16
   1d338:	f8d0 253c 	ldr.w	r2, [r0, #1340]	; 0x53c
   1d33c:	bf14      	ite	ne
   1d33e:	430a      	orrne	r2, r1
   1d340:	438a      	biceq	r2, r1
   1d342:	f8c0 253c 	str.w	r2, [r0, #1340]	; 0x53c
   1d346:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1d34a:	07dc      	lsls	r4, r3, #31
   1d34c:	bf4c      	ite	mi
   1d34e:	430a      	orrmi	r2, r1
   1d350:	438a      	bicpl	r2, r1
   1d352:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
   1d356:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   1d35a:	079f      	lsls	r7, r3, #30
   1d35c:	bf4c      	ite	mi
   1d35e:	430a      	orrmi	r2, r1
   1d360:	438a      	bicpl	r2, r1
   1d362:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   1d366:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1d36a:	075e      	lsls	r6, r3, #29
   1d36c:	bf4c      	ite	mi
   1d36e:	430a      	orrmi	r2, r1
   1d370:	438a      	bicpl	r2, r1
   1d372:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
   1d376:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1d37a:	071d      	lsls	r5, r3, #28
   1d37c:	bf4c      	ite	mi
   1d37e:	430a      	orrmi	r2, r1
   1d380:	438a      	bicpl	r2, r1
   1d382:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   1d386:	f8d0 2544 	ldr.w	r2, [r0, #1348]	; 0x544
   1d38a:	059c      	lsls	r4, r3, #22
   1d38c:	bf4c      	ite	mi
   1d38e:	430a      	orrmi	r2, r1
   1d390:	438a      	bicpl	r2, r1
   1d392:	f8c0 2544 	str.w	r2, [r0, #1348]	; 0x544
   1d396:	f8d0 2540 	ldr.w	r2, [r0, #1344]	; 0x540
   1d39a:	f413 7f40 	tst.w	r3, #768	; 0x300
   1d39e:	bf14      	ite	ne
   1d3a0:	430a      	orrne	r2, r1
   1d3a2:	438a      	biceq	r2, r1
   1d3a4:	f8c0 2540 	str.w	r2, [r0, #1344]	; 0x540
   1d3a8:	b92b      	cbnz	r3, 1d3b6 <GPIOPadConfigSet+0xfc>
   1d3aa:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1d3ae:	4319      	orrs	r1, r3
   1d3b0:	f8c0 1528 	str.w	r1, [r0, #1320]	; 0x528
   1d3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d3b6:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1d3ba:	ea23 0101 	bic.w	r1, r3, r1
   1d3be:	e7f7      	b.n	1d3b0 <GPIOPadConfigSet+0xf6>

0001d3c0 <GPIOPadConfigGet>:
   1d3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3c4:	2401      	movs	r4, #1
   1d3c6:	f8d0 5500 	ldr.w	r5, [r0, #1280]	; 0x500
   1d3ca:	fa04 f101 	lsl.w	r1, r4, r1
   1d3ce:	b2c9      	uxtb	r1, r1
   1d3d0:	420d      	tst	r5, r1
   1d3d2:	bf18      	it	ne
   1d3d4:	46a0      	movne	r8, r4
   1d3d6:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1d3da:	bf08      	it	eq
   1d3dc:	f04f 0800 	moveq.w	r8, #0
   1d3e0:	4221      	tst	r1, r4
   1d3e2:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1d3e6:	bf14      	ite	ne
   1d3e8:	f04f 0c02 	movne.w	ip, #2
   1d3ec:	f04f 0c00 	moveq.w	ip, #0
   1d3f0:	4221      	tst	r1, r4
   1d3f2:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1d3f6:	bf14      	ite	ne
   1d3f8:	f04f 0e04 	movne.w	lr, #4
   1d3fc:	f04f 0e00 	moveq.w	lr, #0
   1d400:	4221      	tst	r1, r4
   1d402:	f8d0 453c 	ldr.w	r4, [r0, #1340]	; 0x53c
   1d406:	f8d0 5fc4 	ldr.w	r5, [r0, #4036]	; 0xfc4
   1d40a:	bf14      	ite	ne
   1d40c:	2708      	movne	r7, #8
   1d40e:	2700      	moveq	r7, #0
   1d410:	4221      	tst	r1, r4
   1d412:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1d416:	fa25 f404 	lsr.w	r4, r5, r4
   1d41a:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1d41e:	f004 0460 	and.w	r4, r4, #96	; 0x60
   1d422:	ea44 0408 	orr.w	r4, r4, r8
   1d426:	ea44 040c 	orr.w	r4, r4, ip
   1d42a:	ea44 040e 	orr.w	r4, r4, lr
   1d42e:	bf14      	ite	ne
   1d430:	2610      	movne	r6, #16
   1d432:	2600      	moveq	r6, #0
   1d434:	433c      	orrs	r4, r7
   1d436:	4334      	orrs	r4, r6
   1d438:	6014      	str	r4, [r2, #0]
   1d43a:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1d43e:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
   1d442:	4211      	tst	r1, r2
   1d444:	bf14      	ite	ne
   1d446:	2201      	movne	r2, #1
   1d448:	2200      	moveq	r2, #0
   1d44a:	4221      	tst	r1, r4
   1d44c:	bf14      	ite	ne
   1d44e:	2402      	movne	r4, #2
   1d450:	2400      	moveq	r4, #0
   1d452:	4314      	orrs	r4, r2
   1d454:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1d458:	4211      	tst	r1, r2
   1d45a:	bf14      	ite	ne
   1d45c:	2204      	movne	r2, #4
   1d45e:	2200      	moveq	r2, #0
   1d460:	4314      	orrs	r4, r2
   1d462:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1d466:	4211      	tst	r1, r2
   1d468:	bf14      	ite	ne
   1d46a:	2208      	movne	r2, #8
   1d46c:	2200      	moveq	r2, #0
   1d46e:	4322      	orrs	r2, r4
   1d470:	f8d0 4540 	ldr.w	r4, [r0, #1344]	; 0x540
   1d474:	4221      	tst	r1, r4
   1d476:	d008      	beq.n	1d48a <GPIOPadConfigGet+0xca>
   1d478:	f8d0 0544 	ldr.w	r0, [r0, #1348]	; 0x544
   1d47c:	4201      	tst	r1, r0
   1d47e:	bf14      	ite	ne
   1d480:	f44f 7100 	movne.w	r1, #512	; 0x200
   1d484:	f44f 7180 	moveq.w	r1, #256	; 0x100
   1d488:	430a      	orrs	r2, r1
   1d48a:	601a      	str	r2, [r3, #0]
   1d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d490 <GPIOPinRead>:
   1d490:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   1d494:	4770      	bx	lr

0001d496 <GPIOPinWrite>:
   1d496:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   1d49a:	4770      	bx	lr

0001d49c <GPIOPinTypeUSBDigital>:
   1d49c:	b570      	push	{r4, r5, r6, lr}
   1d49e:	2202      	movs	r2, #2
   1d4a0:	460d      	mov	r5, r1
   1d4a2:	f7ff fee5 	bl	1d270 <GPIODirModeSet>
   1d4a6:	4629      	mov	r1, r5
   1d4a8:	2308      	movs	r3, #8
   1d4aa:	2201      	movs	r2, #1
   1d4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d4b0:	f7ff bf03 	b.w	1d2ba <GPIOPadConfigSet>

0001d4b4 <GPIOPinTypeUART>:
   1d4b4:	f7ff bff2 	b.w	1d49c <GPIOPinTypeUSBDigital>

0001d4b8 <GPIOPinConfigure>:
   1d4b8:	4a0e      	ldr	r2, [pc, #56]	; (1d4f4 <GPIOPinConfigure+0x3c>)
   1d4ba:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1d4be:	6811      	ldr	r1, [r2, #0]
   1d4c0:	2201      	movs	r2, #1
   1d4c2:	409a      	lsls	r2, r3
   1d4c4:	420a      	tst	r2, r1
   1d4c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1d4ca:	bf18      	it	ne
   1d4cc:	3301      	addne	r3, #1
   1d4ce:	4a0a      	ldr	r2, [pc, #40]	; (1d4f8 <GPIOPinConfigure+0x40>)
   1d4d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1d4d4:	b510      	push	{r4, lr}
   1d4d6:	f8d2 352c 	ldr.w	r3, [r2, #1324]	; 0x52c
   1d4da:	f3c0 2407 	ubfx	r4, r0, #8, #8
   1d4de:	210f      	movs	r1, #15
   1d4e0:	40a1      	lsls	r1, r4
   1d4e2:	f000 000f 	and.w	r0, r0, #15
   1d4e6:	ea23 0301 	bic.w	r3, r3, r1
   1d4ea:	40a0      	lsls	r0, r4
   1d4ec:	4318      	orrs	r0, r3
   1d4ee:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
   1d4f2:	bd10      	pop	{r4, pc}
   1d4f4:	400fe06c 	.word	0x400fe06c
   1d4f8:	000251a4 	.word	0x000251a4

0001d4fc <SysCtlPeripheralReady>:
   1d4fc:	4a08      	ldr	r2, [pc, #32]	; (1d520 <SysCtlPeripheralReady+0x24>)
   1d4fe:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1d502:	441a      	add	r2, r3
   1d504:	0080      	lsls	r0, r0, #2
   1d506:	4b07      	ldr	r3, [pc, #28]	; (1d524 <SysCtlPeripheralReady+0x28>)
   1d508:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1d50c:	ea03 1342 	and.w	r3, r3, r2, lsl #5
   1d510:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1d514:	4318      	orrs	r0, r3
   1d516:	6800      	ldr	r0, [r0, #0]
   1d518:	3000      	adds	r0, #0
   1d51a:	bf18      	it	ne
   1d51c:	2001      	movne	r0, #1
   1d51e:	4770      	bx	lr
   1d520:	400fea00 	.word	0x400fea00
   1d524:	01ffffe0 	.word	0x01ffffe0

0001d528 <SysCtlPeripheralEnable>:
   1d528:	4a07      	ldr	r2, [pc, #28]	; (1d548 <SysCtlPeripheralEnable+0x20>)
   1d52a:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1d52e:	441a      	add	r2, r3
   1d530:	0080      	lsls	r0, r0, #2
   1d532:	4b06      	ldr	r3, [pc, #24]	; (1d54c <SysCtlPeripheralEnable+0x24>)
   1d534:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1d538:	ea03 1342 	and.w	r3, r3, r2, lsl #5
   1d53c:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1d540:	4318      	orrs	r0, r3
   1d542:	2301      	movs	r3, #1
   1d544:	6003      	str	r3, [r0, #0]
   1d546:	4770      	bx	lr
   1d548:	400fe600 	.word	0x400fe600
   1d54c:	01ffffe0 	.word	0x01ffffe0

0001d550 <SysCtlClockGet>:
   1d550:	4b48      	ldr	r3, [pc, #288]	; (1d674 <SysCtlClockGet+0x124>)
   1d552:	b570      	push	{r4, r5, r6, lr}
   1d554:	3310      	adds	r3, #16
   1d556:	f853 4c10 	ldr.w	r4, [r3, #-16]
   1d55a:	681b      	ldr	r3, [r3, #0]
   1d55c:	2b00      	cmp	r3, #0
   1d55e:	da3c      	bge.n	1d5da <SysCtlClockGet+0x8a>
   1d560:	f003 0270 	and.w	r2, r3, #112	; 0x70
   1d564:	2a20      	cmp	r2, #32
   1d566:	d051      	beq.n	1d60c <SysCtlClockGet+0xbc>
   1d568:	d805      	bhi.n	1d576 <SysCtlClockGet+0x26>
   1d56a:	2a00      	cmp	r2, #0
   1d56c:	d044      	beq.n	1d5f8 <SysCtlClockGet+0xa8>
   1d56e:	2a10      	cmp	r2, #16
   1d570:	d139      	bne.n	1d5e6 <SysCtlClockGet+0x96>
   1d572:	4841      	ldr	r0, [pc, #260]	; (1d678 <SysCtlClockGet+0x128>)
   1d574:	e005      	b.n	1d582 <SysCtlClockGet+0x32>
   1d576:	2a30      	cmp	r2, #48	; 0x30
   1d578:	d076      	beq.n	1d668 <SysCtlClockGet+0x118>
   1d57a:	2a70      	cmp	r2, #112	; 0x70
   1d57c:	d133      	bne.n	1d5e6 <SysCtlClockGet+0x96>
   1d57e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1d582:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1d586:	d125      	bne.n	1d5d4 <SysCtlClockGet+0x84>
   1d588:	4a3c      	ldr	r2, [pc, #240]	; (1d67c <SysCtlClockGet+0x12c>)
   1d58a:	6815      	ldr	r5, [r2, #0]
   1d58c:	3204      	adds	r2, #4
   1d58e:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
   1d592:	6812      	ldr	r2, [r2, #0]
   1d594:	f3c2 2604 	ubfx	r6, r2, #8, #5
   1d598:	f002 021f 	and.w	r2, r2, #31
   1d59c:	3201      	adds	r2, #1
   1d59e:	0052      	lsls	r2, r2, #1
   1d5a0:	fb06 2202 	mla	r2, r6, r2, r2
   1d5a4:	fbb0 f0f2 	udiv	r0, r0, r2
   1d5a8:	f3c5 0209 	ubfx	r2, r5, #0, #10
   1d5ac:	f3c5 2589 	ubfx	r5, r5, #10, #10
   1d5b0:	4345      	muls	r5, r0
   1d5b2:	0aad      	lsrs	r5, r5, #10
   1d5b4:	fb00 5002 	mla	r0, r0, r2, r5
   1d5b8:	4a31      	ldr	r2, [pc, #196]	; (1d680 <SysCtlClockGet+0x130>)
   1d5ba:	6812      	ldr	r2, [r2, #0]
   1d5bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1d5c0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   1d5c4:	d043      	beq.n	1d64e <SysCtlClockGet+0xfe>
   1d5c6:	d825      	bhi.n	1d614 <SysCtlClockGet+0xc4>
   1d5c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1d5cc:	d02a      	beq.n	1d624 <SysCtlClockGet+0xd4>
   1d5ce:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
   1d5d2:	d03a      	beq.n	1d64a <SysCtlClockGet+0xfa>
   1d5d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d5d8:	e025      	b.n	1d626 <SysCtlClockGet+0xd6>
   1d5da:	f004 0230 	and.w	r2, r4, #48	; 0x30
   1d5de:	2a10      	cmp	r2, #16
   1d5e0:	d016      	beq.n	1d610 <SysCtlClockGet+0xc0>
   1d5e2:	d802      	bhi.n	1d5ea <SysCtlClockGet+0x9a>
   1d5e4:	b142      	cbz	r2, 1d5f8 <SysCtlClockGet+0xa8>
   1d5e6:	2000      	movs	r0, #0
   1d5e8:	bd70      	pop	{r4, r5, r6, pc}
   1d5ea:	2a20      	cmp	r2, #32
   1d5ec:	d03f      	beq.n	1d66e <SysCtlClockGet+0x11e>
   1d5ee:	2a30      	cmp	r2, #48	; 0x30
   1d5f0:	d1f9      	bne.n	1d5e6 <SysCtlClockGet+0x96>
   1d5f2:	f247 5030 	movw	r0, #30000	; 0x7530
   1d5f6:	e006      	b.n	1d606 <SysCtlClockGet+0xb6>
   1d5f8:	f3c4 1184 	ubfx	r1, r4, #6, #5
   1d5fc:	4a21      	ldr	r2, [pc, #132]	; (1d684 <SysCtlClockGet+0x134>)
   1d5fe:	2b00      	cmp	r3, #0
   1d600:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1d604:	dbbd      	blt.n	1d582 <SysCtlClockGet+0x32>
   1d606:	f414 6f00 	tst.w	r4, #2048	; 0x800
   1d60a:	e7bc      	b.n	1d586 <SysCtlClockGet+0x36>
   1d60c:	481e      	ldr	r0, [pc, #120]	; (1d688 <SysCtlClockGet+0x138>)
   1d60e:	e7b8      	b.n	1d582 <SysCtlClockGet+0x32>
   1d610:	4819      	ldr	r0, [pc, #100]	; (1d678 <SysCtlClockGet+0x128>)
   1d612:	e7f8      	b.n	1d606 <SysCtlClockGet+0xb6>
   1d614:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
   1d618:	d01b      	beq.n	1d652 <SysCtlClockGet+0x102>
   1d61a:	f5b2 4f10 	cmp.w	r2, #36864	; 0x9000
   1d61e:	d1d9      	bne.n	1d5d4 <SysCtlClockGet+0x84>
   1d620:	4a1a      	ldr	r2, [pc, #104]	; (1d68c <SysCtlClockGet+0x13c>)
   1d622:	e000      	b.n	1d626 <SysCtlClockGet+0xd6>
   1d624:	4a1a      	ldr	r2, [pc, #104]	; (1d690 <SysCtlClockGet+0x140>)
   1d626:	0265      	lsls	r5, r4, #9
   1d628:	d50b      	bpl.n	1d642 <SysCtlClockGet+0xf2>
   1d62a:	2b00      	cmp	r3, #0
   1d62c:	da16      	bge.n	1d65c <SysCtlClockGet+0x10c>
   1d62e:	005c      	lsls	r4, r3, #1
   1d630:	d511      	bpl.n	1d656 <SysCtlClockGet+0x106>
   1d632:	0519      	lsls	r1, r3, #20
   1d634:	d40f      	bmi.n	1d656 <SysCtlClockGet+0x106>
   1d636:	0040      	lsls	r0, r0, #1
   1d638:	f3c3 5386 	ubfx	r3, r3, #22, #7
   1d63c:	3301      	adds	r3, #1
   1d63e:	fbb0 f0f3 	udiv	r0, r0, r3
   1d642:	4290      	cmp	r0, r2
   1d644:	bf28      	it	cs
   1d646:	4610      	movcs	r0, r2
   1d648:	bd70      	pop	{r4, r5, r6, pc}
   1d64a:	4a12      	ldr	r2, [pc, #72]	; (1d694 <SysCtlClockGet+0x144>)
   1d64c:	e7eb      	b.n	1d626 <SysCtlClockGet+0xd6>
   1d64e:	4a12      	ldr	r2, [pc, #72]	; (1d698 <SysCtlClockGet+0x148>)
   1d650:	e7e9      	b.n	1d626 <SysCtlClockGet+0xd6>
   1d652:	4a12      	ldr	r2, [pc, #72]	; (1d69c <SysCtlClockGet+0x14c>)
   1d654:	e7e7      	b.n	1d626 <SysCtlClockGet+0xd6>
   1d656:	f3c3 53c5 	ubfx	r3, r3, #23, #6
   1d65a:	e7ef      	b.n	1d63c <SysCtlClockGet+0xec>
   1d65c:	f3c4 54c3 	ubfx	r4, r4, #23, #4
   1d660:	3401      	adds	r4, #1
   1d662:	fbb0 f0f4 	udiv	r0, r0, r4
   1d666:	e7ec      	b.n	1d642 <SysCtlClockGet+0xf2>
   1d668:	f247 5030 	movw	r0, #30000	; 0x7530
   1d66c:	e789      	b.n	1d582 <SysCtlClockGet+0x32>
   1d66e:	4806      	ldr	r0, [pc, #24]	; (1d688 <SysCtlClockGet+0x138>)
   1d670:	e7c9      	b.n	1d606 <SysCtlClockGet+0xb6>
   1d672:	bf00      	nop
   1d674:	400fe060 	.word	0x400fe060
   1d678:	00f42400 	.word	0x00f42400
   1d67c:	400fe160 	.word	0x400fe160
   1d680:	400fe010 	.word	0x400fe010
   1d684:	00025234 	.word	0x00025234
   1d688:	003d0900 	.word	0x003d0900
   1d68c:	01312d00 	.word	0x01312d00
   1d690:	04c4b400 	.word	0x04c4b400
   1d694:	02faf080 	.word	0x02faf080
   1d698:	02625a00 	.word	0x02625a00
   1d69c:	017d7840 	.word	0x017d7840

0001d6a0 <__func__.7871>:
   1d6a0:	665f6367 00656572                       gc_free.

0001d6a8 <__func__.7888>:
   1d6a8:	725f6367 6c6c6165 0000636f 49524556     gc_realloc..VERI
   1d6b8:	505f5946 70285254 00297274 2e2f2e2e     FY_PTR(ptr).../.
   1d6c8:	79702f2e 2e63672f 00000063 5f425441     ./py/gc.c...ATB_
   1d6d8:	5f544547 444e494b 6f6c6228 20296b63     GET_KIND(block) 
   1d6e8:	41203d3d 45485f54 00004441 5f425441     == AT_HEAD..ATB_
   1d6f8:	5f544547 444e494b 296c6228 203d3d20     GET_KIND(bl) == 
   1d708:	465f5441 00454552 203a4347 61746f74     AT_FREE.GC: tota
   1d718:	25203a6c 75202c75 3a646573 2c752520     l: %u, used: %u,
   1d728:	65726620 25203a65 00000a75 2e6f4e20      free: %u... No.
   1d738:	20666f20 6c622d31 736b636f 7525203a      of 1-blocks: %u
   1d748:	2d32202c 636f6c62 203a736b 202c7525     , 2-blocks: %u, 
   1d758:	2078616d 206b6c62 203a7a73 202c7525     max blk sz: %u, 
   1d768:	2078616d 65657266 3a7a7320 0a752520     max free sz: %u.
   1d778:	00000000 6d204347 726f6d65 616c2079     ....GC memory la
   1d788:	74756f79 7266203b 25206d6f 00003a70     yout; from %p:..
   1d798:	0000000a 2020200a 20202020 20752528     .....       (%u 
   1d7a8:	656e696c 6c612073 7266206c 00296565     lines all free).
   1d7b8:	3530250a 00203a78 00006325 00000000     .%05x: .%c......
   1d7c8:	00000005 5f5f07c4 5f646461 0000005f     ......__add__...
   1d7d8:	5f5f082b 6c6f6f62 00005f5f 5f5f0f42     +.__bool__..B.__
   1d7e8:	6c697562 6c635f64 5f737361 0000005f     build_class__...
   1d7f8:	5f5f08a7 6c6c6163 00005f5f 5f5f092b     ..__call__..+.__
   1d808:	73616c63 005f5f73 5f5f0cc6 746e6f63     class__...__cont
   1d818:	736e6961 00005f5f 5f5f0bfd 696c6564     ains__....__deli
   1d828:	5f6d6574 0000005f 5f5f096d 65746e65     tem__...m.__ente
   1d838:	005f5f72 5f5f0671 5f5f7165 00000000     r__.q.__eq__....
   1d848:	5f5f0845 74697865 00005f5f 5f5f06a7     E.__exit__....__
   1d858:	5f5f6567 00000000 5f5f0b40 61746567     ge__....@.__geta
   1d868:	5f727474 0000005f 5f5f0b26 69746567     ttr__...&.__geti
   1d878:	5f6d6574 0000005f 5f5f06b6 5f5f7467     tem__.....__gt__
   1d888:	00000000 5f5f08f7 68736168 00005f5f     ......__hash__..
   1d898:	5f5f086d 64646169 00005f5f 5f5f0a38     m.__iadd__..8.__
   1d8a8:	6f706d69 5f5f7472 00000000 5f5f085f     import__...._.__
   1d8b8:	74696e69 00005f5f 5f5f0808 62757369     init__....__isub
   1d8c8:	00005f5f 5f5f08cf 72657469 00005f5f     __....__iter__..
   1d8d8:	5f5f06cc 5f5f656c 00000000 5f5f07e2     ..__le__......__
   1d8e8:	5f6e656c 0000005f 5f5f065d 5f5f746c     len__...].__lt__
   1d8f8:	00000000 5f5f088e 6e69616d 00005f5f     ......__main__..
   1d908:	5f5f0aff 75646f6d 5f5f656c 00000000     ..__module__....
   1d918:	5f5f08e2 656d616e 00005f5f 5f5f0779     ..__name__..y.__
   1d928:	5f77656e 0000005f 5f5f0802 7478656e     new__.....__next
   1d938:	00005f5f 5f5f08c8 68746170 00005f5f     __....__path__..
   1d948:	5f5f0c6b 6c617571 656d616e 00005f5f     k.__qualname__..
   1d958:	5f5f0e01 6c706572 6972705f 5f5f746e     ..__repl_print__
   1d968:	00000000 5f5f0810 72706572 00005f5f     ......__repr__..
   1d978:	5f5f0b32 69746573 5f6d6574 0000005f     2.__setitem__...
   1d988:	5f5f07d0 5f727473 0000005f 5f5f0721     ..__str__...!.__
   1d998:	5f627573 0000005f 5f5f0d4f 63617274     sub__...O.__trac
   1d9a8:	63616265 005f5f6b 002a018f 005f01fa     eback__...*..._.
   1d9b8:	002f018a 2325036c 0000006f 2325037b     ../.l.%#o...{.%#
   1d9c8:	00000078 3a7b0558 007d6223 00200185     x...X.{:#b}... .
   1d9d8:	000a01af 616d2073 756d6978 6572206d     ....s maximum re
   1d9e8:	73727563 206e6f69 74706564 78652068     cursion depth ex
   1d9f8:	64656563 00006465 6d3c08bd 6c75646f     ceeded....<modul
   1da08:	00003e65 6c3c0880 64626d61 00003e61     e>....<lambda>..
   1da18:	6c3c0ad4 63747369 3e706d6f 00000000     ..<listcomp>....
   1da28:	643c0acc 63746369 3e706d6f 00000000     ..<dictcomp>....
   1da38:	733c0954 6f637465 003e706d 673c0934     T.<setcomp>.4.<g
   1da48:	78656e65 003e7270 733c0852 6e697274     enexpr>.R.<strin
   1da58:	00003e67 733c07e3 6e696474 0000003e     g>....<stdin>...
   1da68:	747505b7 00382d66 662f061a 6873616c     ..utf-8.../flash
   1da78:	00000000 662f0a92 6873616c 62696c2f     ....../flash/lib
   1da88:	00000000 41500364 00000030 41500365     ....d.PA0...e.PA
   1da98:	00000031 41500366 00000032 41500367     1...f.PA2...g.PA
   1daa8:	00000033 41500360 00000034 41500361     3...`.PA4...a.PA
   1dab8:	00000035 41500362 00000036 41500363     5...b.PA6...c.PA
   1dac8:	00000037 42500387 00000030 42500386     7.....PB0.....PB
   1dad8:	00000031 42500385 00000032 42500384     1.....PB2.....PB
   1dae8:	00000033 42500383 00000034 42500382     3.....PB4.....PB
   1daf8:	00000035 42500381 00000036 42500380     5.....PB6.....PB
   1db08:	00000037 435003a6 00000030 435003a7     7.....PC0.....PC
   1db18:	00000031 435003a4 00000032 435003a5     1.....PC2.....PC
   1db28:	00000033 435003a2 00000034 435003a3     3.....PC4.....PC
   1db38:	00000035 435003a0 00000036 435003a1     5.....PC6.....PC
   1db48:	00000037 445003c1 00000030 445003c0     7.....PD0.....PD
   1db58:	00000031 445003c3 00000032 445003c2     1.....PD2.....PD
   1db68:	00000033 445003c5 00000034 445003c4     3.....PD4.....PD
   1db78:	00000035 445003c7 00000036 445003c6     5.....PD6.....PD
   1db88:	00000037 455003e0 00000030 455003e1     7.....PE0.....PE
   1db98:	00000031 455003e2 00000032 455003e3     1.....PE2.....PE
   1dba8:	00000033 455003e4 00000034 455003e5     3.....PE4.....PE
   1dbb8:	00000035 46500303 00000030 46500302     5.....PF0.....PF
   1dbc8:	00000031 46500301 00000032 46500301     1.....PF2.....PF
   1dbd8:	00000033 46500307 00000034 4441088a     3.....PF4.....AD
   1dbe8:	49415f43 0000304e 4441088b 49415f43     C_AIN0....ADC_AI
   1dbf8:	0000314e 444109db 49415f43 0030314e     N1....ADC_AIN10.
   1dc08:	444109da 49415f43 0031314e 44410888     ..ADC_AIN11...AD
   1dc18:	49415f43 0000324e 44410889 49415f43     C_AIN2....ADC_AI
   1dc28:	0000334e 4441088e 49415f43 0000344e     N3....ADC_AIN4..
   1dc38:	4441088f 49415f43 0000354e 4441088c     ..ADC_AIN5....AD
   1dc48:	49415f43 0000364e 4441088d 49415f43     C_AIN6....ADC_AI
   1dc58:	0000374e 44410882 49415f43 0000384e     N7....ADC_AIN8..
   1dc68:	44410883 49415f43 0000394e 3249080e     ..ADC_AIN9....I2
   1dc78:	535f3043 00004c43 324908e4 535f3043     C0_SCL....I2C0_S
   1dc88:	00004144 3249088f 535f3143 00004c43     DA....I2C1_SCL..
   1dc98:	324908a5 535f3143 00004144 3249080c     ..I2C1_SDA....I2
   1dca8:	535f3243 00004c43 3249088d 535f3343     C2_SCL....I2C3_S
   1dcb8:	00004c43 544a0e21 545f4741 535f4b43     CL..!.JTAG_TCK_S
   1dcc8:	4b4c4357 00000000 544a089b 545f4741     WCLK......JTAG_T
   1dcd8:	00004944 544a0c49 545f4741 535f4f44     DI..I.JTAG_TDO_S
   1dce8:	00004f57 544a0e11 545f4741 535f534d     WO....JTAG_TMS_S
   1dcf8:	4f494457 00000000 544d0c97 5f304c52     WDIO......MTRL0_
   1dd08:	4c554146 00003054 544d0a97 5f304c52     FAULT0....MTRL0_
   1dd18:	304d5750 00000000 544d0a96 5f304c52     PWM0......MTRL0_
   1dd28:	314d5750 00000000 544d0a95 5f304c52     PWM1......MTRL0_
   1dd38:	324d5750 00000000 544d0a94 5f304c52     PWM2......MTRL0_
   1dd48:	334d5750 00000000 544d0a93 5f304c52     PWM3......MTRL0_
   1dd58:	344d5750 00000000 544d0a92 5f304c52     PWM4......MTRL0_
   1dd68:	354d5750 00000000 544d0a91 5f304c52     PWM5......MTRL0_
   1dd78:	364d5750 00000000 544d0a90 5f304c52     PWM6......MTRL0_
   1dd88:	374d5750 00000000 544d0c76 5f314c52     PWM7....v.MTRL1_
   1dd98:	4c554146 00003054 544d0a36 5f314c52     FAULT0..6.MTRL1_
   1dda8:	304d5750 00000000 544d0a37 5f314c52     PWM0....7.MTRL1_
   1ddb8:	314d5750 00000000 544d0a34 5f314c52     PWM1....4.MTRL1_
   1ddc8:	324d5750 00000000 544d0a35 5f314c52     PWM2....5.MTRL1_
   1ddd8:	334d5750 00000000 544d0a32 5f314c52     PWM3....2.MTRL1_
   1dde8:	344d5750 00000000 544d0a33 5f314c52     PWM4....3.MTRL1_
   1ddf8:	354d5750 00000000 544d0a30 5f314c52     PWM5....0.MTRL1_
   1de08:	364d5750 00000000 544d0a31 5f314c52     PWM6....1.MTRL1_
   1de18:	374d5750 00000000 4d4e038f 00000049     PWM7......NMI...
   1de28:	45510802 44495f49 00003058 45510803     ..QEI_IDX0....QE
   1de38:	44495f49 00003158 4954093a 435f304d     I_IDX1..:.TIM0_C
   1de48:	00305043 4954093b 435f304d 00315043     CP0.;.TIM0_CCP1.
   1de58:	4954099b 435f314d 00305043 4954099a     ..TIM1_CCP0...TI
   1de68:	435f314d 00315043 495409f8 435f324d     M1_CCP1...TIM2_C
   1de78:	00305043 495409f9 435f324d 00315043     CP0...TIM2_CCP1.
   1de88:	49540959 435f334d 00305043 49540958     Y.TIM3_CCP0.X.TI
   1de98:	435f334d 00315043 495409be 435f344d     M3_CCP1...TIM4_C
   1dea8:	00305043 495409bf 435f344d 00315043     CP0...TIM4_CCP1.
   1deb8:	4954091f 435f354d 00305043 4954091e     ..TIM5_CCP0...TI
   1dec8:	435f354d 00315043 52540508 0030445f     M5_CCP1...TR_D0.
   1ded8:	52540509 0031445f 4155099d 5f315452     ..TR_D1...UART1_
   1dee8:	00535443 4155094c 5f315452 00535452     CTS.L.UART1_RTS.
   1def8:	535507a7 445f3042 0000004d 535507ba     ..USB0_DM.....US
   1df08:	445f3042 00000050 535509f0 455f3042     B0_DP.....USB0_E
   1df18:	004e4550 535507c3 495f3042 00000044     PEN...USB0_ID...
   1df28:	535509a0 505f3042 00544c46 5355091c     ..USB0_PFLT...US
   1df38:	565f3042 00535542 54570aed 5f304d49     B0_VBUS...WTIM0_
   1df48:	30504343 00000000 54570aec 5f304d49     CCP0......WTIM0_
   1df58:	31504343 00000000 54570a0c 5f314d49     CCP1......WTIM1_
   1df68:	30504343 00000000 54570a0d 5f314d49     CCP0......WTIM1_
   1df78:	31504343 00000000 54570a2f 5f324d49     CCP1..../.WTIM2_
   1df88:	30504343 00000000 54570a2e 5f324d49     CCP0......WTIM2_
   1df98:	31504343 00000000 54570a4e 5f334d49     CCP1....N.WTIM3_
   1dfa8:	30504343 00000000 54570a4f 5f334d49     CCP0....O.WTIM3_
   1dfb8:	31504343 00000000 54570a69 5f344d49     CCP1....i.WTIM4_
   1dfc8:	30504343 00000000 54570a68 5f344d49     CCP0....h.WTIM4_
   1dfd8:	31504343 00000000 54570a88 5f354d49     CCP1......WTIM5_
   1dfe8:	30504343 00000000 54570a89 5f354d49     CCP0......WTIM5_
   1dff8:	31504343 00000000 4c41037c 00000054     CCP1....|.ALT...
   1e008:	4c410ef8 504f5f54 445f4e45 4e494152     ..ALT_OPEN_DRAIN
   1e018:	00000000 4e4106af 474f4c41 00000000     ......ANALOG....
   1e028:	72410f2d 6d687469 63697465 6f727245     -.ArithmeticErro
   1e038:	00000072 73410e97 74726573 456e6f69     r.....AssertionE
   1e048:	726f7272 00000000 74410e21 62697274     rror....!.Attrib
   1e058:	45657475 726f7272 00000000 61420d07     uteError......Ba
   1e068:	78456573 74706563 006e6f69 45440f14     seException...DE
   1e078:	4c535045 5f504545 45534552 00000054     EPSLEEP_RESET...
   1e088:	4f450891 72724546 0000726f 6c4508f0     ..EOFError....El
   1e098:	7370696c 00007369 784509f2 74706563     lipsis....Except
   1e0a8:	006e6f69 65470d16 6172656e 45726f74     ion...GeneratorE
   1e0b8:	00746978 41480ab0 525f4452 54455345     xit...HARD_RESET
   1e0c8:	00000000 494808a4 574f505f 00005245     ......HI_POWER..
   1e0d8:	4e490222 00000000 524908c1 4f425f51     ".IN......IRQ_BO
   1e0e8:	00004854 52490b37 41465f51 4e494c4c     TH..7.IRQ_FALLIN
   1e0f8:	00000047 5249083e 49485f51 00004847     G...>.IRQ_HIGH..
   1e108:	524907e4 4f4c5f51 00000057 52490a78     ..IRQ_LOW...x.IR
   1e118:	49525f51 474e4953 00000000 6d490b20     Q_RISING.... .Im
   1e128:	74726f70 6f727245 00000072 6e49105c     portError...\.In
   1e138:	746e6564 6f697461 7272456e 0000726f     dentationError..
   1e148:	6e490a83 45786564 726f7272 00000000     ..IndexError....
   1e158:	654b08ea 72724579 0000726f 654b11af     ..KeyError....Ke
   1e168:	616f6279 6e496472 72726574 00747075     yboardInterrupt.
   1e178:	4f4c09b1 4f505f57 00524557 6f4c0bff     ..LOW_POWER...Lo
   1e188:	70756b6f 6f727245 00000072 454d0969     okupError...i.ME
   1e198:	4f505f44 00524557 654d0bdc 79726f6d     D_POWER...Memory
   1e1a8:	6f727245 00000072 614e09ba 7245656d     Error.....NameEr
   1e1b8:	00726f72 6f4e0817 7954656e 00006570     ror...NoneType..
   1e1c8:	6f4e13c6 706d4974 656d656c 6465746e     ..NotImplemented
   1e1d8:	6f727245 00000072 504f0a5e 445f4e45     Error...^.OPEN_D
   1e1e8:	4e494152 00000000 534f07a1 6f727245     RAIN......OSErro
   1e1f8:	00000072 554f030b 00000054 764f0d81     r.....OUT.....Ov
   1e208:	6c667265 7245776f 00726f72 555009ad     erflowError...PU
   1e218:	445f4c4c 004e574f 55500955 4e5f4c4c     LL_DOWN.U.PULL_N
   1e228:	00454e4f 555007ba 555f4c4c 00000050     ONE...PULL_UP...
   1e238:	57500bdb 5f4e4f52 45534552 00000054     ..PWRON_RESET...
   1e248:	69500312 0000006e 75520c61 6d69746e     ..Pin...a.Runtim
   1e258:	72724565 0000726f 4f530a01 525f5446     eError....SOFT_R
   1e268:	54455345 00000000 6953069b 6c616e67     ESET......Signal
   1e278:	00000000 74530dea 7449706f 74617265     ......StopIterat
   1e288:	006e6f69 79530b94 7861746e 6f727245     ion...SyntaxErro
   1e298:	00000072 79530a20 6d657473 74697845     r... .SystemExit
   1e2a8:	00000000 79540925 72456570 00726f72     ....%.TypeError.
   1e2b8:	61560a96 4565756c 726f7272 00000000     ..ValueError....
   1e2c8:	44570908 45525f54 00544553 655a11b6     ..WDT_RESET...Ze
   1e2d8:	69446f72 69736976 72456e6f 00726f72     roDivisionError.
   1e2e8:	62610395 00000073 66610222 00000000     ..abs...".af....
   1e2f8:	6661075f 73696c5f 00000074 6c610344     _.af_list...D.al
   1e308:	0000006c 6c61035c 00000074 6e610313     l...\.alt.....an
   1e318:	00000079 7061066b 646e6570 00000000     y...k.append....
   1e328:	726104c2 00007367 696203e0 0000006e     ..args....bin...
   1e338:	6f62057f 00647261 6f6204eb 00006c6f     ..board...bool..
   1e348:	6f620ae2 6f6c746f 72656461 00000000     ..bootloader....
   1e358:	6f620c97 5f646e75 6874656d 0000646f     ..bound_method..
   1e368:	756208f7 69746c69 0000736e 79620822     ..builtins..".by
   1e378:	6f636574 00006564 7962055c 00736574     tecode..\.bytes.
   1e388:	6163080d 62616c6c 0000656c 686303dc     ..callable....ch
   1e398:	00000072 6c630bb4 6d737361 6f687465     r.....classmetho
   1e3a8:	00000064 6c63057c 00726165 6c630533     d...|.clear.3.cl
   1e3b8:	0065736f 6c630774 7275736f 00000065     ose.t.closure...
   1e3c8:	6f6305c0 0074736e 6f6304e0 00007970     ..const...copy..
   1e3d8:	6f6305a6 00746e75 656405d4 00677562     ..count...debug.
   1e3e8:	6964043f 00007463 6964092d 765f7463     ?.dict..-.dict_v
   1e3f8:	00776569 696403fa 00000072 696406b8     iew...dir.....di
   1e408:	646f6d76 00000000 72640549 00657669     vmod....I.drive.
   1e418:	6e65030a 00000064 6e65081b 69777364     ..end.....endswi
   1e428:	00006874 7665049b 00006c61 7865041e     th....eval....ex
   1e438:	00006365 78650663 646e6574 00000000     ec..c.extend....
   1e448:	69660401 0000646e 6f660626 74616d72     ..find..&.format
   1e458:	00000000 726604e5 00007165 72660a35     ......freq..5.fr
   1e468:	625f6d6f 73657479 00000000 72660837     om_bytes....7.fr
   1e478:	656b6d6f 00007379 75660827 6974636e     omkeys..'.functi
   1e488:	00006e6f 65670996 6172656e 00726f74     on....generator.
   1e498:	65670333 00000074 656707c0 74746174     3.get.....getatt
   1e4a8:	00000072 6c67079d 6c61626f 00000073     r.....globals...
   1e4b8:	70670454 00006f69 6168078c 74746173     T.gpio....hasatt
   1e4c8:	00000072 616804b7 00006873 656809ad     r.....hash....he
   1e4d8:	6c5f7061 006b636f 65680b56 755f7061     ap_lock.V.heap_u
   1e4e8:	636f6c6e 0000006b 65680370 00000078     nlock...p.hex...
   1e4f8:	6968042b 00006867 64690228 00000000     +.high..(.id....
   1e508:	6e69057b 00786564 6e6904eb 00006f66     {.index...info..
   1e518:	6e69041f 00007469 6e690612 74726573     ..init....insert
   1e528:	00000000 6e690316 00000074 7269038f     ......int.....ir
   1e538:	00000071 736907eb 68706c61 00000061     q.....isalpha...
   1e548:	736907a8 69676964 00000074 73690ab6     ..isdigit.....is
   1e558:	74736e69 65636e61 00000000 736907fc     instance......is
   1e568:	65776f6c 00000072 7369075b 63617073     lower...[.isspac
   1e578:	00000065 73690ab5 63627573 7373616c     e.....issubclass
   1e588:	00000000 736907dd 65707075 00000072     ......isupper...
   1e598:	746905e3 00736d65 7469048f 00007265     ..items...iter..
   1e5a8:	74690847 74617265 0000726f 6f6a04a7     G.iterator....jo
   1e5b8:	00006e69 656b0332 00000079 656b0401     in..2.key.....ke
   1e5c8:	00007379 656c0362 0000006e 696c0427     ys..b.len...'.li
   1e5d8:	00007473 696c0689 656c7474 00000000     st....little....
   1e5e8:	6f6c063b 736c6163 00000000 6f6c0331     ;.locals....1.lo
   1e5f8:	00000077 6f6c05c6 00726577 736c06e5     w.....lower...ls
   1e608:	70697274 00000000 616d03b9 00000070     trip......map...
   1e618:	616d065e 72657070 00000000 656d0507     ^.mapper......me
   1e628:	0036316d 656d0541 0032336d 656d0418     m16.A.mem32...me
   1e638:	0000386d 696d0b0b 706f7263 6f687479     m8....micropytho
   1e648:	0000006e 6f6d0426 00006564 6f6d06bf     n...&.mode....mo
   1e658:	656c7564 00000000 616e04a2 0000656d     dule......name..
   1e668:	616e0591 0073656d 656e0442 00007478     ..names.B.next..
   1e678:	626f0690 7463656a 00000000 636f03fd     ..object......oc
   1e688:	00000074 666f038a 00000066 6e6f0264     t.....off...d.on
   1e698:	00000000 706f0987 656c5f74 006c6576     ......opt_level.
   1e6a8:	726f031c 00000064 65700af3 745f646e     ..ord.....pend_t
   1e6b8:	776f7268 00000000 697003f2 0000006e     hrow......pin...
   1e6c8:	6f70032a 00000070 6f7007bf 65746970     *.pop.....popite
   1e6d8:	0000006d 6f70045c 00007472 6f70032d     m...\.port..-.po
   1e6e8:	00000077 72700554 00746e69 75700480     w...T.print...pu
   1e6f8:	00006c6c 6172051a 0065676e 65720663     ll....range.c.re
   1e708:	65766f6d 00000000 65720749 63616c70     move....I.replac
   1e718:	00000065 657204d0 00007270 65720510     e.....repr....re
   1e728:	00746573 65720bce 5f746573 73756163     set...reset_caus
   1e738:	00000065 65720725 73726576 00000065     e...%.reverse...
   1e748:	667205d2 00646e69 697206e9 7865646e     ..rfind...rindex
   1e758:	00000000 6f7205e7 00646e75 737206a5     ......round...rs
   1e768:	74696c70 00000000 7372063b 70697274     plit....;.rstrip
   1e778:	00000000 657304b9 0000646e 65730323     ......send..#.se
   1e788:	00000070 657307d4 74746174 00000072     p.....setattr...
   1e798:	65730a6c 66656474 746c7561 00000000     l.setdefault....
   1e7a8:	6f730ae1 725f7466 74657365 00000000     ..soft_reset....
   1e7b8:	6f7304bf 00007472 6f73065e 64657472     ..sort..^.sorted
   1e7c8:	00000000 707305b7 0074696c 74730585     ......split...st
   1e7d8:	00747261 74730a74 73747261 68746977     art.t.startswith
   1e7e8:	00000000 74730c62 63697461 6874656d     ....b.staticmeth
   1e7f8:	0000646f 74730457 00007065 7473049d     od..W.step....st
   1e808:	0000706f 74730350 00000072 74730529     op..P.str...).st
   1e818:	00706972 7573032e 0000006d 757305c4     rip...sum.....su
   1e828:	00726570 687405b3 00776f72 69740d89     per...throw...ti
   1e838:	705f656d 65736c75 0073755f 6f7408d8     me_pulse_us...to
   1e848:	7479625f 00007365 757405fd 00656c70     _bytes....tuple.
   1e858:	7974049d 00006570 6d750895 69686361     ..type....umachi
   1e868:	0000656e 6e750904 65757169 0064695f     ne....unique_id.
   1e878:	707506b4 65746164 00000000 70750527     ..update....'.up
   1e888:	00726570 6176054e 0065756c 6176067d     per.N.value.}.va
   1e898:	7365756c 00000000 697a03e6 00000070     lues......zip...

0001e8a8 <mp_qstr_const_pool>:
	...
   1e8b0:	0000000a 00000177 0001d7c4 0001d7c8     ....w...........
   1e8c0:	0001d7cc 0001d7d8 0001d7e4 0001d7f8     ................
   1e8d0:	0001d804 0001d810 0001d820 0001d830     ........ ...0...
   1e8e0:	0001d83c 0001d848 0001d854 0001d860     <...H...T...`...
   1e8f0:	0001d870 0001d880 0001d88c 0001d898     p...............
   1e900:	0001d8a4 0001d8b4 0001d8c0 0001d8cc     ................
   1e910:	0001d8d8 0001d8e4 0001d8f0 0001d8fc     ................
   1e920:	0001d908 0001d918 0001d924 0001d930     ........$...0...
   1e930:	0001d93c 0001d948 0001d958 0001d96c     <...H...X...l...
   1e940:	0001d978 0001d988 0001d994 0001d9a0     x...............
   1e950:	0001d9b0 0001d9b4 0001d9b8 0001d9bc     ................
   1e960:	0001d9c4 0001d9cc 0001d9d4 0001d9d8     ................
   1e970:	0001d9dc 0001da00 0001da0c 0001da18     ................
   1e980:	0001da28 0001da38 0001da44 0001da50     (...8...D...P...
   1e990:	0001da5c 0001da68 0001da70 0001da7c     \...h...p...|...
   1e9a0:	0001da8c 0001da94 0001da9c 0001daa4     ................
   1e9b0:	0001daac 0001dab4 0001dabc 0001dac4     ................
   1e9c0:	0001dacc 0001dad4 0001dadc 0001dae4     ................
   1e9d0:	0001daec 0001daf4 0001dafc 0001db04     ................
   1e9e0:	0001db0c 0001db14 0001db1c 0001db24     ............$...
   1e9f0:	0001db2c 0001db34 0001db3c 0001db44     ,...4...<...D...
   1ea00:	0001db4c 0001db54 0001db5c 0001db64     L...T...\...d...
   1ea10:	0001db6c 0001db74 0001db7c 0001db84     l...t...|.......
   1ea20:	0001db8c 0001db94 0001db9c 0001dba4     ................
   1ea30:	0001dbac 0001dbb4 0001dbbc 0001dbc4     ................
   1ea40:	0001dbcc 0001dbd4 0001dbdc 0001dbe4     ................
   1ea50:	0001dbf0 0001dbfc 0001dc08 0001dc14     ................
   1ea60:	0001dc20 0001dc2c 0001dc38 0001dc44      ...,...8...D...
   1ea70:	0001dc50 0001dc5c 0001dc68 0001dc74     P...\...h...t...
   1ea80:	0001dc80 0001dc8c 0001dc98 0001dca4     ................
   1ea90:	0001dcb0 0001dcbc 0001dcd0 0001dcdc     ................
   1eaa0:	0001dcec 0001dd00 0001dd10 0001dd20     ............ ...
   1eab0:	0001dd30 0001dd40 0001dd50 0001dd60     0...@...P...`...
   1eac0:	0001dd70 0001dd80 0001dd90 0001dda0     p...............
   1ead0:	0001ddb0 0001ddc0 0001ddd0 0001dde0     ................
   1eae0:	0001ddf0 0001de00 0001de10 0001de20     ............ ...
   1eaf0:	0001de28 0001de34 0001de40 0001de4c     (...4...@...L...
   1eb00:	0001de58 0001de64 0001de70 0001de7c     X...d...p...|...
   1eb10:	0001de88 0001de94 0001dea0 0001deac     ................
   1eb20:	0001deb8 0001dec4 0001ded0 0001ded8     ................
   1eb30:	0001dee0 0001deec 0001def8 0001df04     ................
   1eb40:	0001df10 0001df1c 0001df28 0001df34     ........(...4...
   1eb50:	0001df40 0001df50 0001df60 0001df70     @...P...`...p...
   1eb60:	0001df80 0001df90 0001dfa0 0001dfb0     ................
   1eb70:	0001dfc0 0001dfd0 0001dfe0 0001dff0     ................
   1eb80:	0001e000 0001e008 0001e01c 0001e028     ............(...
   1eb90:	0001e03c 0001e050 0001e064 0001e074     <...P...d...t...
   1eba0:	0001e088 0001e094 0001e0a0 0001e0ac     ................
   1ebb0:	0001e0bc 0001e0cc 0001e0d8 0001e0e0     ................
   1ebc0:	0001e0ec 0001e0fc 0001e108 0001e114     ................
   1ebd0:	0001e124 0001e134 0001e148 0001e158     $...4...H...X...
   1ebe0:	0001e164 0001e178 0001e184 0001e194     d...x...........
   1ebf0:	0001e1a0 0001e1b0 0001e1bc 0001e1c8     ................
   1ec00:	0001e1e0 0001e1f0 0001e1fc 0001e204     ................
   1ec10:	0001e214 0001e220 0001e22c 0001e238     .... ...,...8...
   1ec20:	0001e248 0001e250 0001e260 0001e270     H...P...`...p...
   1ec30:	0001e27c 0001e28c 0001e29c 0001e2ac     |...............
   1ec40:	0001e2b8 0001e2c8 0001e2d4 0001e2e8     ................
   1ec50:	0001e2f0 0001e2f8 0001e304 0001e30c     ................
   1ec60:	0001e314 0001e31c 0001e328 0001e330     ........(...0...
   1ec70:	0001e338 0001e340 0001e348 0001e358     8...@...H...X...
   1ec80:	0001e368 0001e374 0001e380 0001e388     h...t...........
   1ec90:	0001e394 0001e39c 0001e3ac 0001e3b4     ................
   1eca0:	0001e3bc 0001e3c8 0001e3d0 0001e3d8     ................
   1ecb0:	0001e3e0 0001e3e8 0001e3f0 0001e3fc     ................
   1ecc0:	0001e404 0001e410 0001e418 0001e420     ............ ...
   1ecd0:	0001e42c 0001e434 0001e43c 0001e448     ,...4...<...H...
   1ece0:	0001e450 0001e45c 0001e464 0001e474     P...\...d...t...
   1ecf0:	0001e480 0001e48c 0001e498 0001e4a0     ................
   1ed00:	0001e4ac 0001e4b8 0001e4c0 0001e4cc     ................
   1ed10:	0001e4d4 0001e4e0 0001e4f0 0001e4f8     ................
   1ed20:	0001e500 0001e508 0001e510 0001e518     ................
   1ed30:	0001e520 0001e52c 0001e534 0001e53c      ...,...4...<...
   1ed40:	0001e548 0001e554 0001e564 0001e570     H...T...d...p...
   1ed50:	0001e57c 0001e58c 0001e598 0001e5a0     |...............
   1ed60:	0001e5a8 0001e5b4 0001e5bc 0001e5c4     ................
   1ed70:	0001e5cc 0001e5d4 0001e5dc 0001e5e8     ................
   1ed80:	0001e5f4 0001e5fc 0001e604 0001e610     ................
   1ed90:	0001e618 0001e624 0001e62c 0001e634     ....$...,...4...
   1eda0:	0001e63c 0001e64c 0001e654 0001e660     <...L...T...`...
   1edb0:	0001e668 0001e670 0001e678 0001e684     h...p...x.......
   1edc0:	0001e68c 0001e694 0001e69c 0001e6a8     ................
   1edd0:	0001e6b0 0001e6c0 0001e6c8 0001e6d0     ................
   1ede0:	0001e6dc 0001e6e4 0001e6ec 0001e6f4     ................
   1edf0:	0001e6fc 0001e704 0001e710 0001e71c     ................
   1ee00:	0001e724 0001e72c 0001e73c 0001e748     $...,...<...H...
   1ee10:	0001e750 0001e75c 0001e764 0001e770     P...\...d...p...
   1ee20:	0001e77c 0001e784 0001e78c 0001e798     |...............
   1ee30:	0001e7a8 0001e7b8 0001e7c0 0001e7cc     ................
   1ee40:	0001e7d4 0001e7dc 0001e7ec 0001e7fc     ................
   1ee50:	0001e804 0001e80c 0001e814 0001e81c     ................
   1ee60:	0001e824 0001e82c 0001e834 0001e844     $...,...4...D...
   1ee70:	0001e850 0001e858 0001e860 0001e86c     P...X...`...l...
   1ee80:	0001e878 0001e884 0001e88c 0001e894     x...............
   1ee90:	0001e8a0 206e656c 3128203c 203c3c20     ....len < (1 << 
   1eea0:	2a203828 43494d20 59504f52 5453515f     (8 * MICROPY_QST
   1eeb0:	59425f52 5f534554 4c5f4e49 29294e45     R_BYTES_IN_LEN))
   1eec0:	00000000 2e2f2e2e 79702f2e 7473712f     ....../../py/qst
   1eed0:	00632e72                                r.c.

0001eed4 <__func__.7555>:
   1eed4:	72747371 6f72665f 74735f6d 00006e72     qstr_from_strn..

0001eee4 <pad_spaces>:
   1eee4:	20202020 20202020 20202020 20202020                     
   1eef4:	00000000                                ....

0001eef8 <pad_zeroes>:
   1eef8:	30303030 30303030 30303030 30303030     0000000000000000
   1ef08:	00000000                                ....

0001ef0c <mp_plat_print>:
   1ef0c:	00000000 00001851 65736162 203d3d20     ....Q...base == 
   1ef1c:	7c7c2032 73616220 3d3d2065 7c203820     2 || base == 8 |
   1ef2c:	6162207c 3d206573 3031203d 207c7c20     | base == 10 || 
   1ef3c:	65736162 203d3d20 00003631 2e2f2e2e     base == 16..../.
   1ef4c:	79702f2e 70706d2f 746e6972 0000632e     ./py/mpprint.c..
   1ef5c:	00000000 65757274 00000000 736c6166     ....true....fals
   1ef6c:	00000065 6c756e28 0000296c 746d662a     e...(null)..*fmt
   1ef7c:	203d3d20 20272527 21207c7c 736e7522      == '%' || !"uns
   1ef8c:	6f707075 64657472 746d6620 61686320     upported fmt cha
   1ef9c:	00002272                                r"..

0001efa0 <__func__.8591>:
   1efa0:	705f706d 746e6972 5f706d5f 00746e69     mp_print_mp_int.

0001efb0 <__func__.8656>:
   1efb0:	765f706d 6e697270 00006674              mp_vprintf..

0001efbc <attr>:
	...
   1efc4:	03030300 00000303 00000000 00000000     ................
	...
   1efdc:	01010103 01010101 01010101 01010101     ................
   1efec:	45454545 45454545 01014545 01010101     EEEEEEEEEE......
   1effc:	59595901 19595959 19191919 19191919     .YYYYYY.........
   1f00c:	19191919 19191919 01191919 01010101     ................
   1f01c:	69696901 29696969 29292929 29292929     .iiiiii)))))))))
   1f02c:	29292929 29292929 01292929 00010101     ))))))))))).....
   1f03c:	5d5b2928 3a2c7d7b 3c7e403b 3c633d65     ()[]{},:;@~<e=c<
   1f04c:	653e3d65 653e633d 3d652a3d 3d652a63     e=>e=c>e=*e=c*e=
   1f05c:	2d3d652b 3e653d65 7c3d6526 652f3d65     +e=-e=e>&e=|e=/e
   1f06c:	652f633d 3d65253d 3d3d655e 2e213d65     =c/e=%e=^e==e=!.
   1f07c:	00000000                                ....

0001f080 <tok_enc>:
   1f080:	0001f03c                                <...

0001f084 <tok_enc_kind>:
   1f084:	45444342 49484746 363d4c4b 3858373e     BCDEFGHIKL=6>7X8
   1f094:	3157393f 2f593250 5a4f304e 553b543a     ?9W1P2Y/N0OZ:T;U
   1f0a4:	52345133 563c5335 0000404d 736c6146     3Q4R5S<VM@..Fals
   1f0b4:	00000065 656e6f4e 00000000 65757254     e...None....True
   1f0c4:	00000000 65645f5f 5f677562 0000005f     ....__debug__...
   1f0d4:	00646e61 00007361 65737361 00007472     and.as..assert..
   1f0e4:	61657262 0000006b 73616c63 00000073     break...class...
   1f0f4:	746e6f63 65756e69 00000000 00666564     continue....def.
   1f104:	006c6564 66696c65 00000000 65736c65     del.elif....else
   1f114:	00000000 65637865 00007470 616e6966     ....except..fina
   1f124:	00796c6c 00726f66 6d6f7266 00000000     lly.for.from....
   1f134:	626f6c67 00006c61 00006669 6f706d69     global..if..impo
   1f144:	00007472 00006e69 00007369 626d616c     rt..in..is..lamb
   1f154:	00006164 6c6e6f6e 6c61636f 00000000     da..nonlocal....
   1f164:	00746f6e 0000726f 73736170 00000000     not.or..pass....
   1f174:	73696172 00000065 75746572 00006e72     raise...return..
   1f184:	00797274 6c696877 00000065 68746977     try.while...with
   1f194:	00000000 6c656979 00000064              ....yield...

0001f1a0 <tok_kw>:
   1f1a0:	0001f0b0 0001f0b8 0001f0c0 0001f0c8     ................
   1f1b0:	0001f0d4 0001f0d8 0001f0dc 0001f0e4     ................
   1f1c0:	0001f0ec 0001f0f4 0001f100 0001f104     ................
   1f1d0:	0001f108 0001f110 0001f118 0001f120     ............ ...
   1f1e0:	0001f128 0001f12c 0001f134 0001f13c     (...,...4...<...
   1f1f0:	0001f140 0001f148 0001f14c 0001f150     @...H...L...P...
   1f200:	0001f158 0001f164 0001f168 0001f16c     X...d...h...l...
   1f210:	0001f174 0001f17c 0001f184 0001f188     t...|...........
   1f220:	0001f190 0001f198 63696e75 2065646f     ........unicode 
   1f230:	656d616e 63736520 73657061 00000000     name escapes....

0001f240 <rule_act_table>:
   1f240:	a8623261 22332233 22212121 24222221     a2b.3"3"!!!"!""$
   1f250:	26232222 24242725 a4a46232 31223131     ""#&%'$$2b..11"1
   1f260:	31313122 62313131 23236262 22232323     "111111bbb#####"
   1f270:	a5233333 12130022 32242162 13336212     33#."...b!$2.b3.
   1f280:	62232263 13332262 62222262 18621261     c"#bb"3.b""ba.b.
   1f290:	62326212 151c1212 12126262 32631362     .b2b....bb..b.c2
   1f2a0:	62622212 31313133 24321862 62246312     ."bb3111b.2$.c$b
   1f2b0:	31632332 64126262 12122412 21222219     2#c1bb.d.$...""!
   1f2c0:	12141212 62321113 1262121c 13336212     ......2b..b..b3.
   1f2d0:	12621233 33633322 62222213 a5126212     3.b."3c3.""b.b..
   1f2e0:	00221223                                #.".

0001f2e4 <rule_arg_combined_table>:
   1f2e4:	20373001 203c203b 10071017 303e1042     .07 ; < ....B.>0
   1f2f4:	303d1043 20761049 104b204f 30502006     C.=0I.v O K.. P0
   1f304:	10482055 20901018 10141028 102a1016     U H.... (.....*.
   1f314:	20343031 30581029 20651021 205b101e     104 ).X0!.e ..[ 
   1f324:	205d1021 2067101f 20671025 20781013     !.] ..g %.g ..x 
   1f334:	10203068 10492078 306a2076 102c3072     h0 .x I.v j0r0,.
   1f344:	10492078 30722076 2090101d 20311022     x I.v r0... ".1 
   1f354:	20761049 102b3072 20761049 102d206c     I.v r0+.I.v l -.
   1f364:	10492073 204d2076 3079201c 30461024     s I.v M . y0$.F0
   1f374:	20781049 30461024 207a1049 1027201d     I.x $.F0I.z . '.
   1f384:	1011207b 207b1026 207c2021 20211031     { ..&.{ ! | 1.! 
   1f394:	103b2022 103c2023 103a2024 20802025     " ;.# <.$ :.% . 
   1f3a4:	20812026 20822083 20832084 30872085     & . . . . . . .0
   1f3b4:	30862088 30891042 10441043 1045308a     . .0B..0C.D..0E.
   1f3c4:	30921046 10421047 10433097 20301044     F..0G.B..0C.D.0 
   1f3d4:	104a1045 20781007 20781048 20781048     E.J...x H.x H.x 
   1f3e4:	20781049 10071015 10493096 102e2076     I.x .....0I.v ..
   1f3f4:	100430a1 2069204e 204d1004 30392031     .0..N i ..M 1 90
   1f404:	104c1004 302d2066 203a1004 20032033     ..L.f -0..: 3 . 
   1f414:	2078105a 1048203f 20412040 10072042     Z.x ? H.@ A B ..
   1f424:	30443043 30451031 10071032 10493043     C0D01.E02...C0I.
   1f434:	104d2078 10072078 20473043 20481048     x M.x ..C0G H.H 
   1f444:	204a2049 304b1007 304c1031 10071032     I J ..K01.L02...
   1f454:	2078104d 20691007 2004204e 20071004     M.x ..i N . ... 
   1f464:	20572008 2010205a 20122011 20512005     . W Z . . . . Q 
   1f474:	20562052 20532054 2054104d 20062034     R V T S M.T 4 . 
   1f484:	20782020 104f104e 10511050 10541053       x N.O.P.Q.S.T.
   1f494:	10561055 10571058 10521059 200a2009     U.V.X.W.Y.R.. . 
   1f4a4:	200d200b 2078200c 101e3059 200e2078     . . . x Y0..x . 
   1f4b4:	2066200f 205f205c 10313066 2064205e     . f \ _ f01.^ d 
   1f4c4:	20641042 20601043 100c104a 30631007     B.d C.` J.....c0
   1f4d4:	30632066 10071012 10482061 10482062     f c0....a H.b H.
   1f4e4:	104a1007 10481007 20781048 20142013     ..J...H.H.x . . 
   1f4f4:	20162015 20032017 20022033 1019206b     . . . . 3 . k ..
   1f504:	10492078 206d2076 20702071 30713072     x I.v m q p r0q0
   1f514:	306f101b 20761049 30632078 101c206e     ..o0I.v x c0n ..
   1f524:	20761049 1049101a 20742076 20781048     I.v ..I.v t H.x 
   1f534:	10123075 20772021 1004204e 20181005     u0..! w N ..... 
   1f544:	201a1006 10202019 101a201c 201b2078     ... .  .. ..x . 
   1f554:	201e201c 1036201f 10401038 103f103e     . . . 6.8.@.>.?.
   1f564:	10221041 207e207d 10221026 307f1023     A.".} ~ &.".#..0
   1f574:	10371026 102f1039 10311030 10351033     &.7.9./.0.1.3.5.
   1f584:	20271034 102f2028 103d1030 208f2029     4.' ( /.0.=.) . 
   1f594:	20831032 10081007 100a1009 100c100b     2.. ............
   1f5a4:	100f100e 202a100d 202c202b 208a2034     ......* + , 4 . 
   1f5b4:	308c208b 20782020 208d209f 308e1048     . .0  x . . H..0
   1f5c4:	1048208b 202e202d 2091202f 20201048     . H.- . / . H.  
   1f5d4:	20322021 209f3093 10482094 20323095     ! 2 .0. . H..02 
   1f5e4:	10421048 10433097 10482098 209a2099     H.B..0C.. H.. . 
   1f5f4:	1031209b 10322078 20782078 209f309c     . 1.x 2.x x .0. 
   1f604:	104d209d 209f2078 101d20a0 10222090     . M.x . . ... ".
   1f614:	309e201c 207a1020 20a2309e 101e2031     . .0 .z .0. 1 ..
   1f624:	00002078                                x ..

0001f628 <rule_arg_offset_table>:
   1f628:	04020100 12100e0c 17161514 1e1c1a19     ................
   1f638:	29262422 3f3b342f 4a464443 5452504e     "$&)/4;?CDFJNPRT
   1f648:	5c5a5856 6462605e 6d6a6866 79767370     VXZ\^`bdfhjmpsvy
   1f658:	827f7d7b 8c890087 9591908e 9c9a9896     {}..............
   1f668:	a7a4a29f afadaba9 b8b6b4b2 bfbdbbba     ................
   1f678:	cccbc9c7 ded2d0ce e9e7e5e3 f3f0edeb     ................
   1f688:	faf8f6f4 0200fefc 0f0e0604 1c181513     ................
   1f698:	25221f1e 2d2b2927 39373331 4846443b     .."%')+-1379;DFH
   1f6a8:	514d4b49 58575653 6a68665a 72706e6c     IKMQSVWXZfhjlnpr
   1f6b8:	7b797775 84817f7d 8d8b8986 9593918f     uwy{}...........
   1f6c8:	009f9d9a                                ....

0001f6cc <FIRST_RULE_WITH_OFFSET_ABOVE_255>:
   1f6cc:	00000066 67726128 52202620 5f454c55     f...(arg & RULE_
   1f6dc:	5f475241 444e494b 53414d5f 3d20294b     ARG_KIND_MASK) =
   1f6ec:	5552203d 415f454c 525f4752 20454c55     = RULE_ARG_RULE 
   1f6fc:	28207c7c 20677261 55522026 415f454c     || (arg & RULE_A
   1f70c:	4b5f4752 5f444e49 4b53414d 3d3d2029     RG_KIND_MASK) ==
   1f71c:	4c555220 52415f45 504f5f47 55525f54      RULE_ARG_OPT_RU
   1f72c:	0000454c 2e2f2e2e 79702f2e 7261702f     LE..../../py/par
   1f73c:	632e6573 00000000 73726170 3e2d7265     se.c....parser->
   1f74c:	75736572 735f746c 6b636174 706f745f     result_stack_top
   1f75c:	30203e20 00000000 73726170 3e2d7265      > 0....parser->
   1f76c:	75736572 735f746c 6b636174 706f745f     result_stack_top
   1f77c:	70203e20 0000736f 206b6f74 4d203d3d      > pos..tok == M
   1f78c:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   1f79c:	00000000 646e696b 203d3d20 454c5552     ....kind == RULE
   1f7ac:	4752415f 4c55525f 00000045 203e2069     _ARG_RULE...i > 
   1f7bc:	00000030 3d3d2069 00006e20 6c757228     0...i == n..(rul
   1f7cc:	63615f65 20262074 454c5552 5443415f     e_act & RULE_ACT
   1f7dc:	4e494b5f 414d5f44 20294b53 52203d3d     _KIND_MASK) == R
   1f7ec:	5f454c55 5f544341 5453494c 00000000     ULE_ACT_LIST....
   1f7fc:	67726128 52202620 5f454c55 5f475241     (arg & RULE_ARG_
   1f80c:	444e494b 53414d5f 3d20294b 5552203d     KIND_MASK) == RU
   1f81c:	415f454c 525f4752 00454c55 3d3e2069     LE_ARG_RULE.i >=
   1f82c:	00003120 78656e75 74636570 69206465      1..unexpected i
   1f83c:	6e65646e 00000074 6e696e75 746e6564     ndent...unindent
   1f84c:	656f6420 6f6e2073 616d2074 20686374      does not match 
   1f85c:	20796e61 6574756f 6e692072 746e6564     any outer indent
   1f86c:	6f697461 656c206e 006c6576 61766e69     ation level.inva
   1f87c:	2064696c 746e7973 00007861 73726170     lid syntax..pars
   1f88c:	722e7265 6c757365 74735f74 5f6b6361     er.result_stack_
   1f89c:	20706f74 31203d3d 00000000              top == 1....

0001f8a8 <__func__.9088>:
   1f8a8:	68737570 6c75725f 72665f65 615f6d6f     push_rule_from_a
   1f8b8:	00006772                                rg..

0001f8bc <__func__.9116>:
   1f8bc:	5f706f70 75736572 0000746c              pop_result..

0001f8c8 <__func__.9121>:
   1f8c8:	6b656570 7365725f 00746c75              peek_result.

0001f8d4 <token_to_op.9187>:
   1f8d4:	ff1c1b1a ff1f1dff 0019ff18              ............

0001f8e0 <__func__.9196>:
   1f8e0:	646c6f66 6e6f635f 6e617473 00007374     fold_constants..

0001f8f0 <__func__.9234>:
   1f8f0:	705f706d 65737261 00000000              mp_parse....

0001f8fc <scope_simple_name_table>:
   1f8fc:	3130002f 00343332 505f504d 45535241     /.01234.MP_PARSE
   1f90c:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   1f91c:	00296e70 2e2f2e2e 79702f2e 6f63732f     pn).../../py/sco
   1f92c:	632e6570 00000000 706f6373 703e2d65     pe.c....scope->p
   1f93c:	6e657261 3d212074 4c554e20 0000004c     arent != NULL...
   1f94c:	703e2d73 6e657261 3d212074 4c554e20     s->parent != NUL
   1f95c:	0000004c 3e2d6469 646e696b 203d3d20     L...id->kind == 
   1f96c:	495f4449 5f4f464e 444e494b 4552465f     ID_INFO_KIND_FRE
   1f97c:	7c7c2045 2d646920 6e696b3e 3d3d2064     E || id->kind ==
   1f98c:	5f444920 4f464e49 4e494b5f 45435f44      ID_INFO_KIND_CE
   1f99c:	00004c4c                                LL..

0001f9a0 <__func__.6876>:
   1f9a0:	706f6373 656e5f65 00000077              scope_new...

0001f9ac <__func__.6905>:
   1f9ac:	706f6373 6c635f65 5f65736f 7265766f     scope_close_over
   1f9bc:	5f6e695f 65726170 0073746e 706d6f63     _in_parents.comp
   1f9cc:	75633e2d 78655f72 74706563 76656c5f     ->cur_except_lev
   1f9dc:	3e206c65 00003020 2e2f2e2e 79702f2e     el > 0..../../py
   1f9ec:	6d6f632f 656c6970 0000632e 505f504d     /compile.c..MP_P
   1f9fc:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1fa0c:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1fa1c:	5b736564 202c5d30 745f4e50 6c747365     des[0], PN_testl
   1fa2c:	5f747369 706d6f63 00000029 505f504d     ist_comp)...MP_P
   1fa3c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1fa4c:	28544355 31736e70 6f6e3e2d 5b736564     UCT(pns1->nodes[
   1fa5c:	202d206e 00295d31 505f504d 45535241     n - 1]).MP_PARSE
   1fa6c:	444f4e5f 53495f45 2844495f 31736e70     _NODE_IS_ID(pns1
   1fa7c:	6f6e3e2d 5b736564 00295d30 276e6163     ->nodes[0]).can'
   1fa8c:	73612074 6e676973 206f7420 72707865     t assign to expr
   1fa9c:	69737365 00006e6f 746c756d 656c7069     ession..multiple
   1faac:	20782a20 61206e69 67697373 6e656d6e      *x in assignmen
   1fabc:	00000074 5f504d21 53524150 4f4e5f45     t...!MP_PARSE_NO
   1facc:	495f4544 554e5f53 70284c4c 0000296e     DE_IS_NULL(pn)..
   1fadc:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1faec:	4c554e5f 6e70284c 3e2d3273 65646f6e     _NULL(pns2->node
   1fafc:	5d305b73 00000029 6f705f6e 65645f73     s[0])...n_pos_de
   1fb0c:	6c756166 3e207374 0030203d 776b5f6e     faults >= 0.n_kw
   1fb1c:	6665645f 746c7561 3d3e2073 00003020     _defaults >= 0..
   1fb2c:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1fb3c:	5254535f 28544355 00296e70 6b5f6e70     _STRUCT(pn).pn_k
   1fb4c:	20646e69 50203d3d 61765f4e 67726172     ind == PN_vararg
   1fb5c:	73696c73 616e5f74 0000656d 2d6e6f6e     slist_name..non-
   1fb6c:	61666564 20746c75 75677261 746e656d     default argument
   1fb7c:	6c6f6620 73776f6c 66656420 746c7561      follows default
   1fb8c:	67726120 6e656d75 00000074 61766e69      argument...inva
   1fb9c:	2064696c 7263696d 7479706f 206e6f68     lid micropython 
   1fbac:	6f636564 6f746172 00000072 505f504d     decorator...MP_P
   1fbbc:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1fbcc:	5f544355 444e494b 646f6e28 695b7365     UCT_KIND(nodes[i
   1fbdc:	50202c5d 65645f4e 61726f63 29726f74     ], PN_decorator)
   1fbec:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   1fbfc:	53495f45 2844495f 656d616e 646f6e5f     E_IS_ID(name_nod
   1fc0c:	6a5b7365 0000295d 505f504d 45535241     es[j])..MP_PARSE
   1fc1c:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1fc2c:	6e702844 6f625f73 20297964 50203d3d     D(pns_body) == P
   1fc3c:	6c635f4e 64737361 00006665 505f504d     N_classdef..MP_P
   1fc4c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1fc5c:	5f544355 444e494b 2c6e7028 5f4e5020     UCT_KIND(pn, PN_
   1fc6c:	74736574 7473696c 6d6f635f 00002970     testlist_comp)..
   1fc7c:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1fc8c:	4c554e5f 6e70284c 3e2d3173 65646f6e     _NULL(pns1->node
   1fc9c:	5d305b73 00000029 276e6163 65642074     s[0])...can't de
   1fcac:	6574656c 70786520 73736572 006e6f69     lete expression.
   1fcbc:	65726227 20276b61 7374756f 20656469     'break' outside 
   1fccc:	706f6f6c 00000000 6e6f6327 756e6974     loop....'continu
   1fcdc:	6f202765 69737475 6c206564 00706f6f     e' outside loop.
   1fcec:	706d6f63 75633e2d 78655f72 74706563     comp->cur_except
   1fcfc:	76656c5f 3e206c65 6f63203d 3e2d706d     _level >= comp->
   1fd0c:	61657262 6f635f6b 6e69746e 655f6575     break_continue_e
   1fd1c:	70656378 656c5f74 006c6576 74657227     xcept_level.'ret
   1fd2c:	276e7275 74756f20 65646973 6e756620     urn' outside fun
   1fd3c:	6f697463 0000006e 505f504d 45535241     ction...MP_PARSE
   1fd4c:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   1fd5c:	444e494b 2c6e7028 5f4e5020 74746f64     KIND(pn, PN_dott
   1fd6c:	6e5f6465 29656d61 00000000 5f504d21     ed_name)....!MP_
   1fd7c:	53524150 4f4e5f45 495f4544 554e5f53     PARSE_NODE_IS_NU
   1fd8c:	70284c4c 6d695f6e 74726f70 756f735f     LL(pn_import_sou
   1fd9c:	29656372 00000000 505f504d 45535241     rce)....MP_PARSE
   1fdac:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   1fdbc:	444e494b 5f6e7028 65646f6e 5d695b73     KIND(pn_nodes[i]
   1fdcc:	4e50202c 706d695f 5f74726f 6e5f7361     , PN_import_as_n
   1fddc:	29656d61 00000000 6e656469 69666974     ame)....identifi
   1fdec:	72207265 66656465 64656e69 20736120     er redefined as 
   1fdfc:	626f6c67 00006c61 62206f6e 69646e69     global..no bindi
   1fe0c:	6620676e 6e20726f 6f6c6e6f 206c6163     ng for nonlocal 
   1fe1c:	6e756f66 00000064 6e656469 69666974     found...identifi
   1fe2c:	72207265 66656465 64656e69 20736120     er redefined as 
   1fe3c:	6c6e6f6e 6c61636f 00000000 276e6163     nonlocal....can'
   1fe4c:	65642074 72616c63 6f6e2065 636f6c6e     t declare nonloc
   1fe5c:	69206c61 756f206e 20726574 65646f63     al in outer code
   1fe6c:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   1fe7c:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   1fe8c:	5f6e7028 66696c65 2c5d695b 5f4e5020     (pn_elif[i], PN_
   1fe9c:	735f6669 5f746d74 66696c65 00000029     if_stmt_elif)...
   1feac:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1febc:	414d535f 495f4c4c 7028544e 74735f6e     _SMALL_INT(pn_st
   1fecc:	00297065 505f504d 45535241 444f4e5f     ep).MP_PARSE_NOD
   1fedc:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   1feec:	5f6e7028 65637865 5b737470 202c5d69     (pn_excepts[i], 
   1fefc:	745f4e50 735f7972 5f746d74 65637865     PN_try_stmt_exce
   1ff0c:	00297470 61666564 20746c75 63786527     pt).default 'exc
   1ff1c:	27747065 73756d20 65622074 73616c20     ept' must be las
   1ff2c:	00000074 505f504d 45535241 444f4e5f     t...MP_PARSE_NOD
   1ff3c:	53495f45 4c554e5f 6e70284c 736c655f     E_IS_NULL(pn_els
   1ff4c:	00002965 505f504d 45535241 444f4e5f     e)..MP_PARSE_NOD
   1ff5c:	53495f45 5254535f 28544355 2d736e70     E_IS_STRUCT(pns-
   1ff6c:	646f6e3e 315b7365 0000295d 203e206e     >nodes[1])..n > 
   1ff7c:	00000030 505f504d 45535241 444f4e5f     0...MP_PARSE_NOD
   1ff8c:	53495f45 4b4f545f 70284e45 2d31736e     E_IS_TOKEN(pns1-
   1ff9c:	646f6e3e 305b7365 0000295d 505f504d     >nodes[0])..MP_P
   1ffac:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1ffbc:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1ffcc:	5b736564 202c5d31 745f4e50 5f747365     des[1], PN_test_
   1ffdc:	655f6669 2965736c 00000000 505f504d     if_else)....MP_P
   1ffec:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1fffc:	28544355 2d736e70 646f6e3e 695b7365     UCT(pns->nodes[i
   2000c:	0000295d 646e696b 203d3d20 635f4e50     ])..kind == PN_c
   2001c:	5f706d6f 695f706f 00000073 6d20782a     omp_op_is...*x m
   2002c:	20747375 61206562 67697373 6e656d6e     ust be assignmen
   2003c:	61742074 74656772 00000000 206b6f74     t target....tok 
   2004c:	4d203d3d 4f545f50 5f4e454b 445f504f     == MP_TOKEN_OP_D
   2005c:	4d5f4c42 0045524f 206b6f74 4d203d3d     BL_MORE.tok == M
   2006c:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   2007c:	00000000 65707573 20292872 276e6163     ....super() can'
   2008c:	69662074 7320646e 00666c65 276e6163     t find self.can'
   2009c:	61682074 6d206576 69746c75 20656c70     t have multiple 
   200ac:	0000782a 276e6163 61682074 6d206576     *x..can't have m
   200bc:	69746c75 20656c70 00782a2a 2053484c     ultiple **x.LHS 
   200cc:	6b20666f 6f777965 61206472 6d206772     of keyword arg m
   200dc:	20747375 61206562 6469206e 00000000     ust be an id....
   200ec:	2d6e6f6e 7779656b 2064726f 20677261     non-keyword arg 
   200fc:	65746661 2f2a2072 00002a2a 2d6e6f6e     after */**..non-
   2010c:	7779656b 2064726f 20677261 65746661     keyword arg afte
   2011c:	656b2072 726f7779 72612064 00000067     r keyword arg...
   2012c:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   2013c:	54435552 4d554e5f 444f4e5f 70285345     RUCT_NUM_NODES(p
   2014c:	2029736e 32203d3d 00000000 505f504d     ns) == 2....MP_P
   2015c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   2016c:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   2017c:	5b736564 202c5d31 635f4e50 5f706d6f     des[1], PN_comp_
   2018c:	29726f66 00000000 5f504d21 53524150     for)....!MP_PARS
   2019c:	4f4e5f45 495f4544 554e5f53 70284c4c     E_NODE_IS_NULL(p
   201ac:	3e2d736e 65646f6e 5d315b73 00000029     ns->nodes[1])...
   201bc:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   201cc:	4c554e5f 6e70284c 3e2d3373 65646f6e     _NULL(pns3->node
   201dc:	5d305b73 00000029 61766e69 2064696c     s[0])...invalid 
   201ec:	746e7973 00007861 505f504d 45535241     syntax..MP_PARSE
   201fc:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   2020c:	6e702844 20293173 50203d3d 6f635f4e     D(pns1) == PN_co
   2021c:	665f706d 0000726f 00000030 65697927     mp_for..0...'yie
   2022c:	2027646c 7374756f 20656469 636e7566     ld' outside func
   2023c:	6e6f6974 00000000                       tion....

00020244 <compile_function>:
   20244:	00004ee5 00004ee5 00005c69 00005e21     .N...N..i\..!^..
   20254:	00004ee5 00007649 0000506b 000060d9     .N..Iv..kP...`..
   20264:	00004ee5 000060fd 000060fd 0000618d     .N...`...`...a..
   20274:	000061e5 0000620d 000064c7 000064ed     .a...b...d...d..
   20284:	0000681d 0000681d 000068e5 00006965     .h...h...h..ei..
   20294:	00006b1d 00006e09 00007401 000075c1     .k...n...t...u..
   202a4:	00004ee5 000078a1 0000795d 0000795d     .N...x..]y..]y..
   202b4:	000079a3 000079a3 00007a1f 00007a49     .y...y...z..Iz..
   202c4:	00007c71 00007c95 00007c95 00007c95     q|...|...|...|..
   202d4:	00007cf7 00007cf7 00007cf7 00007de5     .|...|...|...}..
   202e4:	0000805d 00007e55 00008379 00008485     ]...U~..y.......
   202f4:	000085c9 00008795 000087b5 000087df     ................
   20304:	0000506b 0000506b 00008803 0000882d     kP..kP......-...
   20314:	00008859 0000891d 505f504d 45535241     Y.......MP_PARSE
   20324:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   20334:	6e702844 3c202973 4e50203d 6e6f635f     D(pns) <= PN_con
   20344:	6f5f7473 63656a62 00000074 505f504d     st_object...MP_P
   20354:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   20364:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   20374:	5b736564 202c5d30 745f4e50 65647066     des[0], PN_tfpde
   20384:	00002966 505f504d 45535241 444f4e5f     f)..MP_PARSE_NOD
   20394:	54535f45 54435552 4e494b5f 6e702844     E_STRUCT_KIND(pn
   203a4:	3d202973 6e70203d 6c62645f 6174735f     s) == pn_dbl_sta
   203b4:	00000072 656d616e 75657220 20646573     r...name reused 
   203c4:	20726f66 75677261 746e656d 00000000     for argument....
   203d4:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   203e4:	54435552 4e494b5f 6d282844 61705f70     RUCT_KIND((mp_pa
   203f4:	5f657372 65646f6e 7274735f 5f746375     rse_node_struct_
   20404:	70292a74 74695f6e 20297265 50203d3d     t*)pn_iter) == P
   20414:	6f635f4e 665f706d 0000726f 706f6373     N_comp_for..scop
   20424:	6b3e2d65 20646e69 53203d3d 45504f43     e->kind == SCOPE
   20434:	444f4d5f 00454c55 505f504d 45535241     _MODULE.MP_PARSE
   20444:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   20454:	706f6373 703e2d65 0000296e 505f504d     scope->pn)..MP_P
   20464:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   20474:	4e494b5f 6e702844 3d202973 4e50203d     _KIND(pns) == PN
   20484:	6e75665f 66656463 00000000 505f504d     _funcdef....MP_P
   20494:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   204a4:	4d554e5f 444f4e5f 70285345 2029736e     _NUM_NODES(pns) 
   204b4:	33203d3d 00000000 65646461 00000064     == 3....added...
   204c4:	706f6373 6b3e2d65 20646e69 53203d3d     scope->kind == S
   204d4:	45504f43 414c435f 00005353 505f504d     COPE_CLASS..MP_P
   204e4:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   204f4:	4e494b5f 6e702844 3d202973 4e50203d     _KIND(pns) == PN
   20504:	616c635f 65647373 00000066 21206469     _classdef...id !
   20514:	554e203d 00004c4c 706d6f63 75633e2d     = NULL..comp->cu
   20524:	78655f72 74706563 76656c5f 3d206c65     r_except_level =
   20534:	0030203d 64692821 663e2d32 7367616c     = 0.!(id2->flags
   20544:	49202620 4c465f44 495f4741 41505f53      & ID_FLAG_IS_PA
   20554:	294d4152 00000000                       RAM)....

0002055c <__func__.8729>:
   2055c:	706d6f63 5f656c69 72636564 65736165     compile_decrease
   2056c:	6378655f 5f747065 6576656c 0000006c     _except_level...

0002057c <__func__.8811>:
   2057c:	66695f63 6e6f635f 00000064              c_if_cond...

00020588 <__func__.8832>:
   20588:	73615f63 6e676973 6f74615f 78655f6d     c_assign_atom_ex
   20598:	00007270                                pr..

0002059c <__func__.8854>:
   2059c:	73615f63 6e676973 00000000              c_assign....

000205a8 <__func__.8880>:
   205a8:	736f6c63 766f5f65 765f7265 61697261     close_over_varia
   205b8:	73656c62 6374655f 00000000              bles_etc....

000205c4 <__func__.8897>:
   205c4:	706d6f63 5f656c69 636e7566 5f666564     compile_funcdef_
   205d4:	626d616c 5f666564 61726170 0000006d     lambdef_param...

000205e4 <__func__.8942>:
   205e4:	706d6f63 5f656c69 6f636564 65746172     compile_decorate
   205f4:	00000064                                d...

000205f8 <__func__.8975>:
   205f8:	65645f63 74735f6c 0000746d              c_del_stmt..

00020604 <__func__.8995>:
   20604:	706d6f63 5f656c69 61657262 6f635f6b     compile_break_co
   20614:	735f746e 00746d74                       nt_stmt.

0002061c <__func__.9019>:
   2061c:	695f6f64 726f706d 616e5f74 0000656d     do_import_name..

0002062c <__func__.9057>:
   2062c:	706d6f63 5f656c69 6f706d69 665f7472     compile_import_f
   2063c:	006d6f72                                rom.

00020640 <__func__.9124>:
   20640:	706d6f63 5f656c69 735f6669 00746d74     compile_if_stmt.

00020650 <__func__.9157>:
   20650:	706d6f63 5f656c69 5f726f66 746d7473     compile_for_stmt
   20660:	74706f5f 73696d69 725f6465 65676e61     _optimised_range
   20670:	00000000                                ....

00020674 <__func__.9190>:
   20674:	706d6f63 5f656c69 5f797274 65637865     compile_try_exce
   20684:	00007470                                pt..

00020688 <__func__.9209>:
   20688:	706d6f63 5f656c69 5f797274 616e6966     compile_try_fina
   20698:	00796c6c                                lly.

0002069c <__func__.9214>:
   2069c:	706d6f63 5f656c69 5f797274 746d7473     compile_try_stmt
   206ac:	00000000                                ....

000206b0 <__func__.9234>:
   206b0:	706d6f63 5f656c69 68746977 6d74735f     compile_with_stm
   206c0:	00000074                                t...

000206c4 <__func__.9244>:
   206c4:	706d6f63 5f656c69 72707865 6d74735f     compile_expr_stm
   206d4:	00000074                                t...

000206d8 <__func__.9270>:
   206d8:	706d6f63 5f656c69 74736574 5f66695f     compile_test_if_
   206e8:	72707865 00000000                       expr....

000206f0 <__func__.9313>:
   206f0:	706d6f63 5f656c69 706d6f63 73697261     compile_comparis
   20700:	00006e6f                                on..

00020704 <__func__.9351>:
   20704:	706d6f63 5f656c69 6d726574 00000000     compile_term....

00020714 <__func__.9365>:
   20714:	706d6f63 5f656c69 74636166 325f726f     compile_factor_2
   20724:	00000000                                ....

00020728 <__func__.9414>:
   20728:	706d6f63 5f656c69 706d6f63 65686572     compile_comprehe
   20738:	6f69736e 0000006e                       nsion...

00020740 <__func__.9422>:
   20740:	706d6f63 5f656c69 6d6f7461 7261705f     compile_atom_par
   20750:	00006e65                                en..

00020754 <__func__.9431>:
   20754:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   20764:	74656b63 00000000                       cket....

0002076c <__func__.9438>:
   2076c:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   2077c:	00006563                                ce..

00020780 <__func__.9501>:
   20780:	706d6f63 5f656c69 65646f6e 00000000     compile_node....

00020790 <__func__.9512>:
   20790:	706d6f63 5f656c69 706f6373 75665f65     compile_scope_fu
   207a0:	6c5f636e 64626d61 61705f61 006d6172     nc_lambda_param.

000207b0 <__func__.9535>:
   207b0:	706d6f63 5f656c69 706f6373 6f635f65     compile_scope_co
   207c0:	695f706d 00726574                       mp_iter.

000207c8 <__func__.9546>:
   207c8:	706d6f63 5f656c69 706f6373 00000065     compile_scope...

000207d8 <__func__.9585>:
   207d8:	706f6373 6f635f65 7475706d 68745f65     scope_compute_th
   207e8:	73676e69 00000000 21206469 554e203d     ings....id != NU
   207f8:	00004c4c 2e2f2e2e 79702f2e 696d652f     LL..../../py/emi
   20808:	6d6f6374 2e6e6f6d 00000063 3e2d6469     tcommon.c...id->
   20818:	646e696b 203d3d20 495f4449 5f4f464e     kind == ID_INFO_
   20828:	444e494b 4c45435f 7c7c204c 2d646920     KIND_CELL || id-
   20838:	6e696b3e 3d3d2064 5f444920 4f464e49     >kind == ID_INFO
   20848:	4e494b5f 52465f44 00004545              _KIND_FREE..

00020854 <__func__.7479>:
   20854:	655f706d 5f74696d 6d6d6f63 695f6e6f     mp_emit_common_i
   20864:	706f5f64 00000000 74696d65 6f633e2d     d_op....emit->co
   20874:	695f6564 5f6f666e 7366666f 2b207465     de_info_offset +
   20884:	6d756e20 7479625f 745f7365 72775f6f      num_bytes_to_wr
   20894:	20657469 65203d3c 2d74696d 646f633e     ite <= emit->cod
   208a4:	6e695f65 735f6f66 00657a69 2e2f2e2e     e_info_size.../.
   208b4:	79702f2e 696d652f 2e636274 00000063     ./py/emitbc.c...
   208c4:	74737128 203e3e20 20293631 30203d3d     (qst >> 16) == 0
   208d4:	00000000 74696d65 79623e2d 6f636574     ....emit->byteco
   208e4:	6f5f6564 65736666 202b2074 5f6d756e     de_offset + num_
   208f4:	65747962 6f745f73 6972775f 3c206574     bytes_to_write <
   20904:	6d65203d 3e2d7469 65747962 65646f63     = emit->bytecode
   20914:	7a69735f 00000065 3e2d6469 61636f6c     _size...id->loca
   20924:	756e5f6c 203c206d 00353532 74696d65     l_num < 255.emit
   20934:	74733e2d 5f6b6361 657a6973 203d3d20     ->stack_size == 
   20944:	00000030 74696d65 61703e2d 3c207373     0...emit->pass <
   20954:	504d203d 5341505f 54535f53 5f4b4341     = MP_PASS_STACK_
   20964:	455a4953 207c7c20 696d6528 633e2d74     SIZE || (emit->c
   20974:	756e5f74 626f5f6d 3d3d206a 696d6520     t_num_obj == emi
   20984:	633e2d74 75635f74 626f5f72 0000296a     t->ct_cur_obj)..
   20994:	5f706d28 5f746e69 6d652974 3e2d7469     (mp_int_t)emit->
   209a4:	63617473 69735f6b 2b20657a 6c656420     stack_size + del
   209b4:	3e206174 0030203d 203c206c 74696d65     ta >= 0.l < emit
   209c4:	616d3e2d 756e5f78 616c5f6d 736c6562     ->max_num_labels
   209d4:	00000000 74696d65 616c3e2d 5f6c6562     ....emit->label_
   209e4:	7366666f 5b737465 3d205d6c 6d28203d     offsets[l] == (m
   209f4:	69755f70 745f746e 00312d29 74696d65     p_uint_t)-1.emit
   20a04:	616c3e2d 5f6c6562 7366666f 5b737465     ->label_offsets[
   20a14:	3d205d6c 6d65203d 3e2d7469 65747962     l] == emit->byte
   20a24:	65646f63 66666f5f 00746573 206b6f74     code_offset.tok 
   20a34:	4d203d3d 4f545f50 5f4e454b 494c4c45     == MP_TOKEN_ELLI
   20a44:	53495350 00000000 6c635f6e 6465736f     PSIS....n_closed
   20a54:	65766f5f 3d3c2072 35353220 00000000     _over <= 255....
   20a64:	72615f6e 3c207367 0032203d              n_args <= 2.

00020a70 <mp_emit_bc_method_table_load_id_ops>:
   20a70:	0000a3dd 0000a42b                       ....+...

00020a78 <mp_emit_bc_method_table_store_id_ops>:
   20a78:	0000a559 0000a5a9                       Y.......

00020a80 <mp_emit_bc_method_table_delete_id_ops>:
   20a80:	0000a5d9 0000a601                       ........

00020a88 <__func__.8264>:
   20a88:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   20a98:	74697277 6f635f65 695f6564 006f666e     write_code_info.

00020aa8 <__func__.8278>:
   20aa8:	74696d65 6972775f 635f6574 5f65646f     emit_write_code_
   20ab8:	6f666e69 7473715f 00000072              info_qstr...

00020ac4 <__func__.8284>:
   20ac4:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   20ad4:	74697277 79625f65 6f636574 00006564     write_bytecode..

00020ae4 <__func__.8326>:
   20ae4:	74696d65 6972775f 625f6574 63657479     emit_write_bytec
   20af4:	5f65646f 65747962 7473715f 00000072     ode_byte_qstr...

00020b04 <__func__.8360>:
   20b04:	655f706d 5f74696d 735f6362 74726174     mp_emit_bc_start
   20b14:	7361705f 00000073                       _pass...

00020b1c <__func__.8377>:
   20b1c:	655f706d 5f74696d 655f6362 705f646e     mp_emit_bc_end_p
   20b2c:	00737361                                ass.

00020b30 <__func__.8385>:
   20b30:	655f706d 5f74696d 615f6362 73756a64     mp_emit_bc_adjus
   20b40:	74735f74 5f6b6361 657a6973 00000000     t_stack_size....

00020b50 <__func__.8398>:
   20b50:	655f706d 5f74696d 6c5f6362 6c656261     mp_emit_bc_label
   20b60:	7373615f 006e6769                       _assign.

00020b68 <__func__.8413>:
   20b68:	655f706d 5f74696d 6c5f6362 5f64616f     mp_emit_bc_load_
   20b78:	736e6f63 6f745f74 0000006b              const_tok...

00020b84 <__func__.8592>:
   20b84:	655f706d 5f74696d 6d5f6362 5f656b61     mp_emit_bc_make_
   20b94:	736f6c63 00657275                       closure.

00020b9c <__func__.8620>:
   20b9c:	655f706d 5f74696d 725f6362 65736961     mp_emit_bc_raise
   20bac:	7261765f 73677261 00000000 28746e69     _varargs....int(
   20bbc:	72612029 20322067 7473756d 20656220     ) arg 2 must be 
   20bcc:	32203d3e 646e6120 203d3c20 00003633     >= 2 and <= 36..
   20bdc:	61766e69 2064696c 746e7973 66207861     invalid syntax f
   20bec:	6920726f 6765746e 00007265 69636564     or integer..deci
   20bfc:	206c616d 626d756e 20737265 20746f6e     mal numbers not 
   20c0c:	70707573 6574726f 00000064 21206372     supported...rc !
   20c1c:	554e203d 00004c4c 2e2f2e2e 79702f2e     = NULL..../../py
   20c2c:	696d652f 756c6774 00632e65 5f666564     /emitglue.c.def_
   20c3c:	73677261 203d3d20 4f5f504d 4e5f4a42     args == MP_OBJ_N
   20c4c:	204c4c55 4d207c7c 424f5f50 53495f4a     ULL || MP_OBJ_IS
   20c5c:	5059545f 65642845 72615f66 202c7367     _TYPE(def_args, 
   20c6c:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).
   20c7c:	5f666564 615f776b 20736772 4d203d3d     def_kw_args == M
   20c8c:	424f5f50 554e5f4a 7c204c4c 504d207c     P_OBJ_NULL || MP
   20c9c:	4a424f5f 5f53495f 45505954 66656428     _OBJ_IS_TYPE(def
   20cac:	5f776b5f 73677261 6d26202c 79745f70     _kw_args, &mp_ty
   20cbc:	645f6570 29746369 00000000 3e2d6372     pe_dict)....rc->
   20ccc:	646e696b 203d3d20 435f504d 5f45444f     kind == MP_CODE_
   20cdc:	45545942 45444f43 00000000              BYTECODE....

00020ce8 <__func__.7828>:
   20ce8:	6d5f706d 5f656b61 636e7566 6e6f6974     mp_make_function
   20cf8:	6f72665f 61725f6d 6f635f77 00006564     _from_raw_code..

00020d08 <mp_module___main__>:
   20d08:	00022a38 20001278 656d616e 746f6e20     8*..x.. name not
   20d18:	66656420 64656e69 00000000 3d20706f      defined....op =
   20d28:	504d203d 414e555f 4f5f5952 4e495f50     = MP_UNARY_OP_IN
   20d38:	54524556 00000000 2e2f2e2e 79702f2e     VERT....../../py
   20d48:	6e75722f 656d6974 0000632e 75736e75     /runtime.c..unsu
   20d58:	726f7070 20646574 65707974 726f6620     pported type for
   20d68:	65706f20 6f746172 00000072 6167656e      operator...nega
   20d78:	65766974 69687320 63207466 746e756f     tive shift count
   20d88:	00000000 6167656e 65766974 776f7020     ....negative pow
   20d98:	77207265 20687469 66206f6e 74616f6c     er with no float
   20da8:	70757320 74726f70 00000000 69766964      support....divi
   20db8:	6e6f6973 20796220 6f72657a 00000000     sion by zero....
   20dc8:	656a626f 6e207463 6320746f 616c6c61     object not calla
   20dd8:	00656c62 73677261 656c5f32 202b206e     ble.args2_len + 
   20de8:	202a2032 2d70616d 6573753e 3d3c2064     2 * map->used <=
   20df8:	67726120 615f3273 636f6c6c 00000000      args2_alloc....
   20e08:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   20e18:	756c6176 74207365 6e75206f 6b636170     values to unpack
   20e28:	00000000 65707974 6f6c3e2d 736c6163     ....type->locals
   20e38:	6369645f 623e2d74 2e657361 65707974     _dict->base.type
   20e48:	203d3d20 5f706d26 65707974 6369645f      == &mp_type_dic
   20e58:	00000074 73206f6e 20686375 72747461     t...no such attr
   20e68:	74756269 00000065 6e695f6f 00000000     ibute...o_in....
   20e78:	656a626f 6e207463 6920746f 61726574     object not itera
   20e88:	00656c62 656a626f 6e207463 6120746f     ble.object not a
   20e98:	7469206e 74617265 0000726f 6e657328     n iterator..(sen
   20ea8:	61765f64 2065756c 4d203d21 424f5f50     d_value != MP_OB
   20eb8:	554e5f4a 20294c4c 7428205e 776f7268     J_NULL) ^ (throw
   20ec8:	6c61765f 21206575 504d203d 4a424f5f     _value != MP_OBJ
   20ed8:	4c554e5f 0000294c 6f726874 61765f77     _NULL)..throw_va
   20ee8:	2065756c 4d203d21 424f5f50 554e5f4a     lue != MP_OBJ_NU
   20ef8:	00004c4c 65637865 6f697470 6d20736e     LL..exceptions m
   20f08:	20747375 69726564 66206576 206d6f72     ust derive from 
   20f18:	65736142 65637845 6f697470 0000006e     BaseException...
   20f28:	6e6e6163 6920746f 726f706d 616e2074     cannot import na
   20f38:	2520656d 00000071 6f6d656d 61207972     me %q...memory a
   20f48:	636f6c6c 6f697461 6166206e 64656c69     llocation failed
   20f58:	6568202c 69207061 6f6c2073 64656b63     , heap is locked
   20f68:	00000000 6f6d656d 61207972 636f6c6c     ....memory alloc
   20f78:	6f697461 6166206e 64656c69 6c61202c     ation failed, al
   20f88:	61636f6c 676e6974 20752520 65747962     locating %u byte
   20f98:	00000073                                s...

00020f9c <__func__.8265>:
   20f9c:	755f706d 7972616e 00706f5f              mp_unary_op.

00020fa8 <__func__.8382>:
   20fa8:	635f706d 5f6c6c61 70657270 5f657261     mp_call_prepare_
   20fb8:	73677261 6b5f6e5f 61765f77 00000072     args_n_kw_var...

00020fc8 <__func__.8470>:
   20fc8:	6c5f706d 5f64616f 6874656d 6d5f646f     mp_load_method_m
   20fd8:	65627961 00000000                       aybe....

00020fe0 <__func__.8496>:
   20fe0:	675f706d 74697465 00007265              mp_getiter..

00020fec <__func__.8518>:
   20fec:	725f706d 6d757365 00000065 6c6c6128     mp_resume...(all
   20ffc:	6465776f 2e5d695b 67616c66 20262073     owed[i].flags & 
   2100c:	415f504d 4b5f4752 5f444e49 4b53414d     MP_ARG_KIND_MASK
   2101c:	3d3d2029 5f504d20 5f475241 004a424f     ) == MP_ARG_OBJ.
   2102c:	2e2f2e2e 79702f2e 6772612f 63656863     ../../py/argchec
   2103c:	00632e6b 75677261 746e656d 6d756e20     k.c.argument num
   2104c:	7079742f 6d207365 616d7369 00686374     /types mismatch.

0002105c <__func__.7380>:
   2105c:	615f706d 705f6772 65737261 6c6c615f     mp_arg_parse_all
   2106c:	00000000                                ....

00021070 <mp_const_empty_map>:
   21070:	00000006 00000000 00000000              ............

0002107c <hash_allocation_sizes>:
   2107c:	00020000 00060004 000a0008 0011000c     ................
   2108c:	001d0017 002f0025 0049003b 007f0061     ....%./.;.I.a...
   2109c:	00df00a7 01850125 02b30209 04c70397     ....%...........
   210ac:	0871065b 12df0c9d 2a6d1c4b 5f573f91     [.q.....K.m*.?W_
   210bc:	d67b8eff 70616d21 73693e2d 7869665f     ..{.!map->is_fix
   210cc:	7c206465 6f6c207c 70756b6f 6e696b5f     ed || lookup_kin
   210dc:	3d3d2064 5f504d20 5f50414d 4b4f4f4c     d == MP_MAP_LOOK
   210ec:	00005055 2e2f2e2e 79702f2e 70616d2f     UP..../../py/map
   210fc:	0000632e                                .c..

00021100 <__func__.7485>:
   21100:	6d5f706d 6c5f7061 756b6f6f 00000070     mp_map_lookup...
   21110:	6c696e28 00000029 3e71253c 00000000     (nil)...<%q>....
   21120:	2025206e 3d3d2033 00003020 2e2f2e2e     n % 3 == 0..../.
   21130:	79702f2e 6a626f2f 0000632e 63617254     ./py/obj.c..Trac
   21140:	63616265 6d28206b 2074736f 65636572     eback (most rece
   21150:	6320746e 206c6c61 7473616c 000a3a29     nt call last):..
   21160:	69462020 2220656c 00227125 0000000a       File "%q".....
   21170:	6e69202c 0a712520 00000000 276e6163     , in %q.....can'
   21180:	6f632074 7265766e 6f742074 746e6920     t convert to int
   21190:	00000000 65707865 64657463 70757420     ....expected tup
   211a0:	6c2f656c 00747369 6c707574 696c2f65     le/list.tuple/li
   211b0:	68207473 77207361 676e6f72 6e656c20     st has wrong len
   211c0:	00687467 69646e69 20736563 7473756d     gth.indices must
   211d0:	20656220 65746e69 73726567 00000000      be integers....
   211e0:	65646e69 756f2078 666f2074 6e617220     index out of ran
   211f0:	00006567 656a626f 68207463 6e207361     ge..object has n
   21200:	656c206f 0000006e 656a626f 64207463     o len...object d
   21210:	2073656f 20746f6e 70707573 2074726f     oes not support 
   21220:	6d657469 6c656420 6f697465 0000006e     item deletion...
   21230:	656a626f 69207463 6f6e2073 75732074     object is not su
   21240:	72637362 61747069 00656c62 656a626f     bscriptable.obje
   21250:	64207463 2073656f 20746f6e 70707573     ct does not supp
   21260:	2074726f 6d657469 73736120 6d6e6769     ort item assignm
   21270:	00746e65                                ent.

00021274 <mp_identity_obj>:
   21274:	00022060 0000de91 656a626f 77207463     ` ......object w
   21284:	20687469 66667562 70207265 6f746f72     ith buffer proto
   21294:	206c6f63 75716572 64657269 00000000     col required....

000212a4 <__func__.8010>:
   212a4:	6f5f706d 705f6a62 746e6972 6378655f     mp_obj_print_exc
   212b4:	69747065 00006e6f 65757254 00000000     eption..True....
   212c4:	736c6146 00000065                       False...

000212cc <mp_type_bool>:
   212cc:	00023780 00ef0000 0000df85 0000dfc1     .7..............
   212dc:	00000000 0000e009 0000e03d 00000000     ........=.......
	...

00021308 <mp_const_false_obj>:
   21308:	000212cc 00000000                       ........

00021310 <mp_const_true_obj>:
   21310:	000212cc 00000001                       ........

00021318 <mp_type_bound_meth>:
   21318:	00023780 00f10000 00000000 00000000     .7..............
   21328:	0000e103 00000000 00000000 00000000     ................
	...

00021354 <mp_type_cell>:
   21354:	00023780 00010000 00000000 00000000     .7..............
	...

00021390 <closure_type>:
   21390:	00023780 00fa0000 00000000 00000000     .7..............
   213a0:	0000e1cd 00000000 00000000 00000000     ................
	...
   213cc:	0000007b 0000202c 0000203a 0000007d     {..., ..: ..}...
   213dc:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   213ec:	5f666c65 20296e69 28202626 5f706d28     elf_in) && ((mp_
   213fc:	5f6a626f 65736162 292a745f 6f762828     obj_base_t*)((vo
   2140c:	292a6469 666c6573 296e695f 743e2d29     id*)self_in))->t
   2141c:	2d657079 6b616d3e 656e5f65 3d3d2077     ype->make_new ==
   2142c:	63696420 616d5f74 6e5f656b 00297765      dict_make_new).
   2143c:	2e2f2e2e 79702f2e 6a626f2f 74636964     ../../py/objdict
   2144c:	0000632e                                .c..

00021450 <dict_clear_obj>:
   21450:	00022060 0000e6e9                       ` ......

00021458 <dict_copy_obj>:
   21458:	00022060 0000e749                       ` ..I...

00021460 <dict_fromkeys_fun_obj>:
   21460:	000221a8 00030004 0000e805              .!..........

0002146c <dict_fromkeys_obj>:
   2146c:	000239c8 00021460 5f504d28 5f4a424f     .9..`...(MP_OBJ_
   2147c:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   2148c:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   2149c:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   214ac:	295d305b 743e2d29 2d657079 6b616d3e     [0]))->type->mak
   214bc:	656e5f65 3d3d2077 63696420 616d5f74     e_new == dict_ma
   214cc:	6e5f656b 00297765                       ke_new).

000214d4 <dict_get_obj>:
   214d4:	000221a8 00030004 0000e971              .!......q...

000214e0 <dict_pop_obj>:
   214e0:	000221a8 00030004 0000e98f              .!..........

000214ec <dict_setdefault_obj>:
   214ec:	000221a8 00030004 0000e9ad 69706f70     .!..........popi
   214fc:	286d6574 64203a29 69746369 72616e6f     tem(): dictionar
   2150c:	73692079 706d6520 00007974              y is empty..

00021518 <dict_popitem_obj>:
   21518:	00022060 0000e9cb 74636964 64707520     ` ......dict upd
   21528:	20657461 75716573 65636e65 73616820     ate sequence has
   21538:	6f727720 6c20676e 74676e65 00000068      wrong length...

00021548 <dict_update_obj>:
   21548:	000221a8 ffff0003 0000ea89              .!..........

00021554 <dict_view_type>:
   21554:	00023780 01000000 0000ed41 00000000     .7......A.......
	...
   2156c:	0000ee0d 00000000 00000000 0000ecd1     ................
	...

00021590 <dict_view_it_type>:
   21590:	00023780 012a0000 00000000 00000000     .7....*.........
	...
   215b4:	0000dea7 0000ec39 00000000 00000000     ....9...........
	...
   215cc:	74636964 6574695f 0000736d 74636964     dict_items..dict
   215dc:	79656b5f 00000073 74636964 6c61765f     _keys...dict_val
   215ec:	00736575                                ues.

000215f0 <mp_dict_view_names>:
   215f0:	000215cc 000215d8 000215e4 5f504d28     ............(MP_
   21600:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   21610:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   21620:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   21630:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   21640:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   21650:	745f7469 29657079 00002929 5f504d28     it_type)))..(MP_
   21660:	5f4a424f 4f5f5349 76284a42 5f776569     OBJ_IS_OBJ(view_
   21670:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   21680:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   21690:	65697629 6e695f77 3e2d2929 65707974     )view_in))->type
   216a0:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   216b0:	65707974 00292929 5f504d28 5f4a424f     type))).(MP_OBJ_
   216c0:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   216d0:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   216e0:	2a745f65 76282829 2a64696f 6c657329     e_t*)((void*)sel
   216f0:	6e695f66 3e2d2929 65707974 203d3d20     f_in))->type == 
   21700:	69642628 765f7463 5f776569 65707974     (&dict_view_type
   21710:	00292929 00005b28 0000295d              ))).([..])..

0002171c <dict_items_obj>:
   2171c:	00022060 0000eed1                       ` ......

00021724 <dict_keys_obj>:
   21724:	00022060 0000eeeb                       ` ......

0002172c <dict_values_obj>:
   2172c:	00022060 0000ef05                       ` ......

00021734 <dict_locals_dict_table>:
   21734:	000003e2 00021450 000003f2 00021458     ....P.......X...
   21744:	00000436 0002146c 00000442 000214d4     6...l...B.......
   21754:	000004a2 0002171c 000004b6 00021724     ............$...
   21764:	00000522 000214e0 00000526 00021518     ".......&.......
   21774:	00000576 000214ec 000005ca 00021548     v...........H...
   21784:	000005d6 0002172c 0000003a 00023b74     ....,...:...t;..
   21794:	0000008a 00023b7c 00000022 00023b84     ....|;.."....;..

000217a4 <dict_locals_dict>:
   217a4:	000217b4 00000077 0000000e 00021734     ....w.......4...

000217b4 <mp_type_dict>:
   217b4:	00023780 00ff0000 0000e3d9 0000e475     .7..........u...
   217c4:	00000000 0000e4db 0000e52b 00000000     ........+.......
   217d4:	0000e655 0000ef1f 00000000 00000000     U...............
	...
   217ec:	000217a4                                ....

000217f0 <__func__.7358>:
   217f0:	74636964 656c635f 00007261              dict_clear..

000217fc <__func__.7364>:
   217fc:	74636964 706f635f 00000079              dict_copy...

00021808 <__func__.7389>:
   21808:	74636964 7465675f 6c65685f 00726570     dict_get_helper.

00021818 <__func__.7411>:
   21818:	74636964 706f705f 6d657469 00000000     dict_popitem....

00021828 <__func__.7423>:
   21828:	74636964 6470755f 00657461              dict_update.

00021834 <__func__.7466>:
   21834:	74636964 6569765f 74695f77 6574695f     dict_view_it_ite
   21844:	78656e72 00000074                       rnext...

0002184c <__func__.7479>:
   2184c:	74636964 6569765f 65675f77 65746974     dict_view_getite
   2185c:	00000072                                r...

00021860 <__func__.7487>:
   21860:	74636964 6569765f 72705f77 00746e69     dict_view_print.

00021870 <__func__.7512>:
   21870:	74636964 6569765f 00000077              dict_view...

0002187c <__func__.7529>:
   2187c:	74636964 7465675f 72657469 00000000     dict_getiter....

0002188c <__func__.7551>:
   2188c:	6f5f706d 645f6a62 5f746369 726f7473     mp_obj_dict_stor
   2189c:	00000065                                e...

000218a0 <mp_const_GeneratorExit_obj>:
   218a0:	0002196c 00000000 00000000 000234c4     l............4..
   218b0:	0000203a 00000000                       : ......

000218b8 <mp_type_BaseException>:
   218b8:	00023780 00b80000 0000f0ad 0000f171     .7..........q...
	...
   218d4:	0000f241 00000000 00000000 00000000     A...............
	...

000218f4 <mp_type_SystemExit>:
   218f4:	00023780 00e00000 0000f0ad 0000f171     .7..........q...
	...
   21910:	0000f241 00000000 00000000 00000000     A...............
	...
   21928:	000218b8 00000000                       ........

00021930 <mp_type_KeyboardInterrupt>:
   21930:	00023780 00ca0000 0000f0ad 0000f171     .7..........q...
	...
   2194c:	0000f241 00000000 00000000 00000000     A...............
	...
   21964:	000218b8 00000000                       ........

0002196c <mp_type_GeneratorExit>:
   2196c:	00023780 00bd0000 0000f0ad 0000f171     .7..........q...
	...
   21988:	0000f241 00000000 00000000 00000000     A...............
	...
   219a0:	000218b8 00000000                       ........

000219a8 <mp_type_Exception>:
   219a8:	00023780 00bc0000 0000f0ad 0000f171     .7..........q...
	...
   219c4:	0000f241 00000000 00000000 00000000     A...............
	...
   219dc:	000218b8 00000000                       ........

000219e4 <mp_type_StopIteration>:
   219e4:	00023780 00de0000 0000f0ad 0000f171     .7..........q...
	...
   21a00:	0000f241 00000000 00000000 00000000     A...............
	...
   21a18:	000219a8 00000000                       ........

00021a20 <mp_type_ArithmeticError>:
   21a20:	00023780 00b50000 0000f0ad 0000f171     .7..........q...
	...
   21a3c:	0000f241 00000000 00000000 00000000     A...............
	...
   21a54:	000219a8 00000000                       ........

00021a5c <mp_type_OverflowError>:
   21a5c:	00023780 00d50000 0000f0ad 0000f171     .7..........q...
	...
   21a78:	0000f241 00000000 00000000 00000000     A...............
	...
   21a90:	00021a20 00000000                        .......

00021a98 <mp_type_ZeroDivisionError>:
   21a98:	00023780 00e40000 0000f0ad 0000f171     .7..........q...
	...
   21ab4:	0000f241 00000000 00000000 00000000     A...............
	...
   21acc:	00021a20 00000000                        .......

00021ad4 <mp_type_AssertionError>:
   21ad4:	00023780 00b60000 0000f0ad 0000f171     .7..........q...
	...
   21af0:	0000f241 00000000 00000000 00000000     A...............
	...
   21b08:	000219a8 00000000                       ........

00021b10 <mp_type_AttributeError>:
   21b10:	00023780 00b70000 0000f0ad 0000f171     .7..........q...
	...
   21b2c:	0000f241 00000000 00000000 00000000     A...............
	...
   21b44:	000219a8 00000000                       ........

00021b4c <mp_type_EOFError>:
   21b4c:	00023780 00ba0000 0000f0ad 0000f171     .7..........q...
	...
   21b68:	0000f241 00000000 00000000 00000000     A...............
	...
   21b80:	000219a8 00000000                       ........

00021b88 <mp_type_ImportError>:
   21b88:	00023780 00c60000 0000f0ad 0000f171     .7..........q...
	...
   21ba4:	0000f241 00000000 00000000 00000000     A...............
	...
   21bbc:	000219a8 00000000                       ........

00021bc4 <mp_type_LookupError>:
   21bc4:	00023780 00cc0000 0000f0ad 0000f171     .7..........q...
	...
   21be0:	0000f241 00000000 00000000 00000000     A...............
	...
   21bf8:	000219a8 00000000                       ........

00021c00 <mp_type_IndexError>:
   21c00:	00023780 00c80000 0000f0ad 0000f171     .7..........q...
	...
   21c1c:	0000f241 00000000 00000000 00000000     A...............
	...
   21c34:	00021bc4 00000000                       ........

00021c3c <mp_type_KeyError>:
   21c3c:	00023780 00c90000 0000f0ad 0000f171     .7..........q...
	...
   21c58:	0000f241 00000000 00000000 00000000     A...............
	...
   21c70:	00021bc4 00000000                       ........

00021c78 <mp_type_MemoryError>:
   21c78:	00023780 00ce0000 0000f0ad 0000f171     .7..........q...
	...
   21c94:	0000f241 00000000 00000000 00000000     A...............
	...
   21cac:	000219a8 00000000                       ........

00021cb4 <mp_type_NameError>:
   21cb4:	00023780 00cf0000 0000f0ad 0000f171     .7..........q...
	...
   21cd0:	0000f241 00000000 00000000 00000000     A...............
	...
   21ce8:	000219a8 00000000                       ........

00021cf0 <mp_type_OSError>:
   21cf0:	00023780 00d30000 0000f0ad 0000f171     .7..........q...
	...
   21d0c:	0000f241 00000000 00000000 00000000     A...............
	...
   21d24:	000219a8 00000000                       ........

00021d2c <mp_type_RuntimeError>:
   21d2c:	00023780 00db0000 0000f0ad 0000f171     .7..........q...
	...
   21d48:	0000f241 00000000 00000000 00000000     A...............
	...
   21d60:	000219a8 00000000                       ........

00021d68 <mp_type_NotImplementedError>:
   21d68:	00023780 00d10000 0000f0ad 0000f171     .7..........q...
	...
   21d84:	0000f241 00000000 00000000 00000000     A...............
	...
   21d9c:	00021d2c 00000000                       ,.......

00021da4 <mp_type_SyntaxError>:
   21da4:	00023780 00df0000 0000f0ad 0000f171     .7..........q...
	...
   21dc0:	0000f241 00000000 00000000 00000000     A...............
	...
   21dd8:	000219a8 00000000                       ........

00021de0 <mp_type_IndentationError>:
   21de0:	00023780 00c70000 0000f0ad 0000f171     .7..........q...
	...
   21dfc:	0000f241 00000000 00000000 00000000     A...............
	...
   21e14:	00021da4 00000000                       ........

00021e1c <mp_type_TypeError>:
   21e1c:	00023780 00e10000 0000f0ad 0000f171     .7..........q...
	...
   21e38:	0000f241 00000000 00000000 00000000     A...............
	...
   21e50:	000219a8 00000000                       ........

00021e58 <mp_type_ValueError>:
   21e58:	00023780 00e20000 0000f0ad 0000f171     .7..........q...
	...
   21e74:	0000f241 00000000 00000000 00000000     A...............
	...
   21e8c:	000219a8 00000000 5f637865 65707974     ........exc_type
   21e9c:	616d3e2d 6e5f656b 3d207765 706d203d     ->make_new == mp
   21eac:	6a626f5f 6378655f 69747065 6d5f6e6f     _obj_exception_m
   21ebc:	5f656b61 0077656e 2e2f2e2e 79702f2e     ake_new.../../py
   21ecc:	6a626f2f 65637865 632e7470 00000000     /objexcept.c....
   21edc:	20746d66 4e203d21 004c4c55 6f5f706d     fmt != NULL.mp_o
   21eec:	695f6a62 78655f73 74706563 5f6e6f69     bj_is_exception_
   21efc:	74736e69 65636e61 6c657328 6e695f66     instance(self_in
   21f0c:	00000029                                )...

00021f10 <__func__.7927>:
   21f10:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   21f20:	6e6f6974 6772615f 00000073              tion_args...

00021f2c <__func__.7949>:
   21f2c:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   21f3c:	6e6f6974 67736d5f 7261765f 00000067     tion_msg_varg...

00021f4c <__func__.7972>:
   21f4c:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   21f5c:	656c635f 745f7261 65636172 6b636162     _clear_traceback
   21f6c:	00000000                                ....

00021f70 <__func__.7980>:
   21f70:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   21f80:	6464615f 6172745f 61626563 00006b63     _add_traceback..

00021f90 <__func__.7989>:
   21f90:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   21fa0:	7465675f 6172745f 61626563 00006b63     _get_traceback..
   21fb0:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   21fc0:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   21fd0:	6e75665f 6975625f 6e69746c 0029305f     _fun_builtin_0).
   21fe0:	2e2f2e2e 79702f2e 6a626f2f 2e6e7566     ../../py/objfun.
   21ff0:	00000063                                c...

00021ff4 <mp_type_fun_builtin_0>:
   21ff4:	00023780 010e0000 00000000 00000000     .7..............
   22004:	0000f811 0000df35 00000000 00000000     ....5...........
	...
   22030:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   22040:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   22050:	6e75665f 6975625f 6e69746c 0029315f     _fun_builtin_1).

00022060 <mp_type_fun_builtin_1>:
   22060:	00023780 010e0000 00000000 00000000     .7..............
   22070:	0000f875 0000df35 00000000 00000000     u...5...........
	...
   2209c:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   220ac:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   220bc:	6e75665f 6975625f 6e69746c 0029325f     _fun_builtin_2).

000220cc <mp_type_fun_builtin_2>:
   220cc:	00023780 010e0000 00000000 00000000     .7..............
   220dc:	0000f8e1 0000df35 00000000 00000000     ....5...........
	...
   22108:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   22118:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   22128:	6e75665f 6975625f 6e69746c 0029335f     _fun_builtin_3).

00022138 <mp_type_fun_builtin_3>:
   22138:	00023780 010e0000 00000000 00000000     .7..............
   22148:	0000f951 0000df35 00000000 00000000     Q...5...........
	...
   22174:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   22184:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   22194:	6e75665f 6975625f 6e69746c 7261765f     _fun_builtin_var
   221a4:	00000029                                )...

000221a8 <mp_type_fun_builtin_var>:
   221a8:	00023780 010e0000 00000000 00000000     .7..............
   221b8:	0000f9c5 0000df35 00000000 00000000     ....5...........
	...
   221e4:	725f6d76 72757465 696b5f6e 3d20646e     vm_return_kind =
   221f4:	504d203d 5f4d565f 55544552 455f4e52     = MP_VM_RETURN_E
   22204:	50454358 4e4f4954 00000000              XCEPTION....

00022210 <mp_type_fun_bc>:
   22210:	00023780 010e0000 00000000 00000000     .7..............
   22220:	0000faeb 0000df35 00000000 00000000     ....5...........
	...
   2224c:	4f5f504d 495f4a42 59545f53 64284550     MP_OBJ_IS_TYPE(d
   2225c:	615f6665 5f736772 202c6e69 5f706d26     ef_args_in, &mp_
   2226c:	65707974 7075745f 0029656c              type_tuple).

00022278 <__func__.7237>:
   22278:	5f6e7566 6c697562 5f6e6974 61635f30     fun_builtin_0_ca
   22288:	00006c6c                                ll..

0002228c <__func__.7246>:
   2228c:	5f6e7566 6c697562 5f6e6974 61635f31     fun_builtin_1_ca
   2229c:	00006c6c                                ll..

000222a0 <__func__.7255>:
   222a0:	5f6e7566 6c697562 5f6e6974 61635f32     fun_builtin_2_ca
   222b0:	00006c6c                                ll..

000222b4 <__func__.7264>:
   222b4:	5f6e7566 6c697562 5f6e6974 61635f33     fun_builtin_3_ca
   222c4:	00006c6c                                ll..

000222c8 <__func__.7273>:
   222c8:	5f6e7566 6c697562 5f6e6974 5f726176     fun_builtin_var_
   222d8:	6c6c6163 00000000                       call....

000222e0 <__func__.7298>:
   222e0:	5f6e7566 635f6362 006c6c61              fun_bc_call.

000222ec <__func__.7309>:
   222ec:	6f5f706d 6e5f6a62 665f7765 625f6e75     mp_obj_new_fun_b
   222fc:	00000063                                c...

00022300 <mp_type_gen_wrap>:
   22300:	00023780 010f0000 00000000 00000000     .7..............
   22310:	0000fd3d 0000df35 00000000 00000000     =...5...........
	...
   2233c:	6e65673c 74617265 6f20726f 63656a62     <generator objec
   2234c:	25272074 61202771 70252074 0000003e     t '%q' at %p>...
   2235c:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   2236c:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   2237c:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   2238c:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   2239c:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   223ac:	65675f65 6e695f6e 6e617473 29296563     e_gen_instance))
   223bc:	00000029 2e2f2e2e 79702f2e 6a626f2f     )...../../py/obj
   223cc:	656e6567 6f746172 00632e72 276e6163     generator.c.can'
   223dc:	65732074 6e20646e 4e2d6e6f 20656e6f     t send non-None 
   223ec:	756c6176 6f742065 6a206120 2d747375     value to a just-
   223fc:	72617473 20646574 656e6567 6f746172     started generato
   2240c:	00000072 656e6567 6f746172 6c612072     r...generator al
   2241c:	64616572 78652079 74756365 00676e69     ready executing.

0002242c <gen_instance_send_obj>:
   2242c:	000220cc 0000fffd                       . ......

00022434 <gen_instance_throw_obj>:
   22434:	000221a8 00040004 00010035 656e6567     .!......5...gene
   22444:	6f746172 67692072 65726f6e 65472064     rator ignored Ge
   22454:	6172656e 45726f74 00746978              neratorExit.

00022460 <gen_instance_close_obj>:
   22460:	00022060 00010089 276e6163 65702074     ` ......can't pe
   22470:	7420646e 776f7268 206f7420 7473756a     nd throw to just
   22480:	6174732d 64657472 6e656720 74617265     -started generat
   22490:	0000726f                                or..

00022494 <gen_instance_pend_throw_obj>:
   22494:	000220cc 00010111                       . ......

0002249c <gen_instance_locals_dict_table>:
   2249c:	000003e6 00022460 0000056a 0002242c     ....`$..j...,$..
   224ac:	000005ae 00022434 0000051a 00022494     ....4$.......$..

000224bc <gen_instance_locals_dict>:
   224bc:	000217b4 00000027 00000004 0002249c     ....'........$..

000224cc <mp_type_gen_instance>:
   224cc:	00023780 010f0000 0000fdc1 00000000     .7..............
   224dc:	00000000 0000df35 00000000 00000000     ....5...........
   224ec:	00000000 0000dea7 0000ffdd 00000000     ................
	...
   22504:	000224bc                                .$..

00022508 <__func__.7451>:
   22508:	6f5f706d 675f6a62 725f6e65 6d757365     mp_obj_gen_resum
   22518:	00000065                                e...

0002251c <it_type>:
   2251c:	00023780 012a0000 00000000 00000000     .7....*.........
	...
   22540:	0000dea7 00010151 00000000 00000000     ....Q...........
	...

00022558 <log_base2_floor>:
   22558:	02010100 03020202 03030303 04030303     ................
   22568:	3d3c2032 73616220 26262065 73616220     2 <= base && bas
   22578:	3d3c2065 00363120 2e2f2e2e 79702f2e     e <= 16.../../py
   22588:	6a626f2f 2e746e69 00000063 676e6f6c     /objint.c...long
   22598:	746e6920 746f6e20 70757320 74726f70      int not support
   225a8:	69206465 6874206e 62207369 646c6975     ed in this build
   225b8:	00000000 6c616d73 6e69206c 766f2074     ....small int ov
   225c8:	6c667265 0000776f                       erflow..

000225d0 <int_from_bytes_fun_obj>:
   225d0:	000221a8 00040006 00010801              .!..........

000225dc <int_from_bytes_obj>:
   225dc:	000239c8 000225d0                       .9...%..

000225e4 <int_to_bytes_obj>:
   225e4:	000221a8 00040006 0001087b              .!......{...

000225f0 <int_locals_dict_table>:
   225f0:	00000432 000225dc 000005b6 000225e4     2....%.......%..

00022600 <int_locals_dict>:
   22600:	000217b4 00000017 00000002 000225f0     .............%..

00022610 <mp_type_int>:
   22610:	00023780 011f0000 00010379 00010275     .7......y...u...
   22620:	00000000 00010619 00010631 00000000     ........1.......
	...
   22648:	00022600                                .&..

0002264c <__func__.7954>:
   2264c:	695f706d 665f746e 616d726f 69735f74     mp_int_format_si
   2265c:	0000657a 0000005b 0000202c 0000005d     ze..[..., ..]...
   2266c:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   2267c:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   2268c:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   2269c:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   226ac:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   226bc:	696c5f65 29297473 00000029 2e2f2e2e     e_list)))...../.
   226cc:	79702f2e 6a626f2f 7473696c 0000632e     ./py/objlist.c..
   226dc:	5f504d28 5f4a424f 4f5f5349 61284a42     (MP_OBJ_IS_OBJ(a
   226ec:	5b736772 20295d30 28202626 706d2828     rgs[0]) && (((mp
   226fc:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   2270c:	2a64696f 67726129 5d305b73 3e2d2929     oid*)args[0]))->
   2271c:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   2272c:	696c5f65 29297473 00000029 20706f70     e_list)))...pop 
   2273c:	6d6f7266 706d6520 6c207974 00747369     from empty list.
   2274c:	5f504d28 5f4a424f 4f5f5349 70284a42     (MP_OBJ_IS_OBJ(p
   2275c:	615f736f 5b736772 20295d30 28202626     os_args[0]) && (
   2276c:	706d2828 6a626f5f 7361625f 2a745f65     ((mp_obj_base_t*
   2277c:	76282829 2a64696f 736f7029 6772615f     )((void*)pos_arg
   2278c:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   2279c:	706d2628 7079745f 696c5f65 29297473     (&mp_type_list))
   227ac:	00000029                                )...

000227b0 <list_append_obj>:
   227b0:	000220cc 00010d03                       . ......

000227b8 <list_extend_obj>:
   227b8:	000220cc 00010dbd                       . ......

000227c0 <list_clear_obj>:
   227c0:	00022060 000111c5                       ` ......

000227c8 <list_copy_obj>:
   227c8:	00022060 00011245                       ` ..E...

000227d0 <list_count_obj>:
   227d0:	000220cc 000112a1                       . ......

000227d8 <list_index_obj>:
   227d8:	000221a8 00040004 000112fd              .!..........

000227e4 <list_insert_obj>:
   227e4:	00022138 00011361                       8!..a...

000227ec <list_pop_obj>:
   227ec:	000221a8 00020002 00010ec5              .!..........

000227f8 <list_remove_obj>:
   227f8:	000220cc 00011431                       . ..1...

00022800 <list_reverse_obj>:
   22800:	00022060 000114a1                       ` ......

00022808 <list_sort_obj>:
   22808:	000221a8 ffff0003 00011107              .!..........

00022814 <list_locals_dict_table>:
   22814:	000003ae 000227b0 000003e2 000227c0     .....'.......'..
   22824:	000003f2 000227c8 000003f6 000227d0     .....'.......'..
   22834:	00000422 000227b8 0000046e 000227d8     "....'..n....'..
   22844:	0000047a 000227e4 00000522 000227ec     z....'.."....'..
   22854:	0000053e 000227f8 00000552 00022800     >....'..R....(..
   22864:	0000057e 00022808                       ~....(..

0002286c <list_locals_dict>:
   2286c:	000217b4 0000005f 0000000b 00022814     ...._........(..

0002287c <mp_type_list>:
   2287c:	00023780 012f0000 0001096d 00010a17     .7..../.m.......
   2288c:	00000000 00010a67 00010aaf 00000000     ....g...........
   2289c:	00010c79 00010ce5 00000000 00000000     y...............
	...
   228b4:	0002286c                                l(..

000228b8 <__func__.7263>:
   228b8:	6f5f706d 6c5f6a62 5f747369 65707061     mp_obj_list_appe
   228c8:	0000646e                                nd..

000228cc <__func__.7269>:
   228cc:	7473696c 7478655f 00646e65              list_extend.

000228d8 <__func__.7276>:
   228d8:	7473696c 706f705f 00000000              list_pop....

000228e4 <allowed_args.7305>:
   228e4:	0203012c 00022b54 02010154 00000000     ,...T+..T.......

000228f4 <__func__.7310>:
   228f4:	6f5f706d 6c5f6a62 5f747369 74726f73     mp_obj_list_sort
   22904:	00000000                                ....

00022908 <__func__.7315>:
   22908:	7473696c 656c635f 00007261              list_clear..

00022914 <__func__.7320>:
   22914:	7473696c 706f635f 00000079              list_copy...

00022920 <__func__.7326>:
   22920:	7473696c 756f635f 0000746e              list_count..

0002292c <__func__.7332>:
   2292c:	7473696c 646e695f 00007865              list_index..

00022938 <__func__.7339>:
   22938:	7473696c 736e695f 00747265              list_insert.

00022944 <__func__.7350>:
   22944:	6f5f706d 6c5f6a62 5f747369 6f6d6572     mp_obj_list_remo
   22954:	00006576                                ve..

00022958 <__func__.7355>:
   22958:	7473696c 7665725f 65737265 00000000     list_reverse....
   22968:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   22978:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   22988:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   22998:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   229a8:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   229b8:	616d5f65 29292970 00000000 2e2f2e2e     e_map)))....../.
   229c8:	79702f2e 6a626f2f 2e70616d 00000063     ./py/objmap.c...

000229d8 <mp_type_map>:
   229d8:	00023780 01350000 00000000 00011759     .7....5.....Y...
	...
   229fc:	0000dea7 000117df 00000000 00000000     ................
	...

00022a14 <__func__.7378>:
   22a14:	5f70616d 72657469 7478656e 00000000     map_iternext....
   22a24:	00000000 646f6d3c 20656c75 27732527     ....<module '%s'
   22a34:	0000003e                                >...

00022a38 <mp_type_module>:
   22a38:	00023780 013c0000 000118a3 00000000     .7....<.........
	...
   22a54:	000118f5 00000000 00000000 00000000     ................
	...

00022a74 <mp_builtin_module_table>:
   22a74:	00000066 00020d08 000003ca 00024098     f............@..
   22a84:	000004ea 00024120                       .... A..

00022a8c <mp_builtin_module_map>:
   22a8c:	0000001f 00000003 00022a74              ........t*..

00022a98 <mp_type_object>:
   22a98:	00023780 01400000 00000000 00011a99     .7....@.........
	...

00022ad4 <mp_type_polymorph_iter>:
   22ad4:	00023780 012a0000 00000000 00000000     .7....*.........
	...
   22af8:	0000dea7 00011acf 00000000 00000000     ................
	...
   22b10:	656e6f4e 00000000                       None....

00022b18 <mp_type_NoneType>:
   22b18:	00023780 00d00000 00011aed 00000000     .7..............
   22b28:	00000000 0000df35 00000000 00000000     ....5...........
	...

00022b54 <mp_const_none_obj>:
   22b54:	00022b18                                .+..

00022b58 <range_it_type>:
   22b58:	00023780 012a0000 00000000 00000000     .7....*.........
	...
   22b7c:	0000dea7 00011b35 00000000 00000000     ....5...........
	...
   22b94:	676e6172 64252865 6425202c 00000000     range(%d, %d....
   22ba4:	00000029 6425202c 00000029 6f72657a     )..., %d)...zero
   22bb4:	65747320 00000070                        step...

00022bbc <mp_type_range>:
   22bbc:	00023780 014e0000 00011bd1 00011c25     .7....N.....%...
   22bcc:	00000000 00011d21 00000000 00011deb     ....!...........
   22bdc:	00011d6d 00011dc1 00000000 00000000     m...............
	...
   22bf8:	00007125                                %q..

00022bfc <mp_type_singleton>:
   22bfc:	00023780 00010000 00011e5d 00000000     .7......].......
	...

00022c38 <mp_const_ellipsis_obj>:
   22c38:	00022bfc 000000bb 00006325 0063255c     .+......%c..\%c.
   22c48:	00005c5c 00006e5c 0000725c 0000745c     \\..\n..\r..\t..
   22c58:	3025785c 00007832 732a2e25 00000000     \x%02x..%.*s....
   22c68:	00000062 65747962 61762073 2065756c     b...bytes value 
   22c78:	2074756f 7220666f 65676e61 00000000     out of range....
   22c88:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   22c98:	75677261 746e656d 00000073 5f504d28     arguments...(MP_
   22ca8:	5f4a424f 515f5349 28525453 666c6573     OBJ_IS_QSTR(self
   22cb8:	296e695f 207c7c20 5f504d28 5f4a424f     _in) || (MP_OBJ_
   22cc8:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   22cd8:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   22ce8:	292a745f 6f762828 292a6469 666c6573     _t*)((void*)self
   22cf8:	296e695f 743e2d29 2d657079 6e69623e     _in))->type->bin
   22d08:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   22d18:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   22d28:	00000000 2e2f2e2e 79702f2e 6a626f2f     ....../../py/obj
   22d38:	2e727473 00000063 6e696f6a 70786520     str.c...join exp
   22d48:	73746365 6c206120 20747369 7320666f     ects a list of s
   22d58:	622f7274 73657479 6a626f20 73746365     tr/bytes objects
   22d68:	6e6f6320 74736973 20746e65 68746977      consistent with
   22d78:	6c657320 626f2066 7463656a 00000000      self object....

00022d88 <str_join_obj>:
   22d88:	000220cc 00012901 74706d65 65732079     . ...)..empty se
   22d98:	61726170 00726f74                       parator.

00022da0 <str_split_obj>:
   22da0:	000221a8 00030002 00012b29 6c707372     .!......)+..rspl
   22db0:	4e287469 2c656e6f 0000296e              it(None,n)..

00022dbc <str_rsplit_obj>:
   22dbc:	000221a8 00030002 00012d3d 5f504d28     .!......=-..(MP_
   22dcc:	5f4a424f 515f5349 28525453 73677261     OBJ_IS_QSTR(args
   22ddc:	295d305b 207c7c20 5f504d28 5f4a424f     [0]) || (MP_OBJ_
   22dec:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   22dfc:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   22e0c:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   22e1c:	295d305b 743e2d29 2d657079 6e69623e     [0]))->type->bin
   22e2c:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   22e3c:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   22e4c:	00000000 73627573 6e697274 6f6e2067     ....substring no
   22e5c:	6f662074 00646e75                       t found.

00022e64 <str_find_obj>:
   22e64:	000221a8 00040004 000130bd              .!.......0..

00022e70 <str_rfind_obj>:
   22e70:	000221a8 00040004 000130dd              .!.......0..

00022e7c <str_index_obj>:
   22e7c:	000221a8 00040004 000130ff              .!.......0..

00022e88 <str_rindex_obj>:
   22e88:	000221a8 00040004 0001311f              .!.......1..

00022e94 <str_startswith_obj>:
   22e94:	000221a8 00030004 00013141 72617473     .!......A1..star
   22ea4:	6e652f74 6e692064 65636964 00000073     t/end indices...

00022eb4 <str_endswith_obj>:
   22eb4:	000221a8 00030004 00013205 7473616c     .!.......2..last
   22ec4:	6f6f675f 68635f64 705f7261 3e20736f     _good_char_pos >
   22ed4:	6966203d 5f747372 646f6f67 6168635f     = first_good_cha
   22ee4:	6f705f72 00000073 73726966 6f675f74     r_pos...first_go
   22ef4:	635f646f 5f726168 20736f70 30203d3d     od_char_pos == 0
   22f04:	00000000                                ....

00022f08 <str_strip_obj>:
   22f08:	000221a8 00020002 000134dd              .!.......4..

00022f14 <str_lstrip_obj>:
   22f14:	000221a8 00020002 000134fb              .!.......4..

00022f20 <str_rstrip_obj>:
   22f20:	000221a8 00020002 00013519 5e3d3e3c     .!.......5..<>=^
   22f30:	00000000 65646362 67466645 736f6e47     ....bcdeEfFgGnos
   22f40:	00255878 20646162 6d726f66 73207461     xX%.bad format s
   22f50:	6e697274 00000067 6c707574 6e692065     tring...tuple in
   22f60:	20786564 2074756f 7220666f 65676e61     dex out of range
   22f70:	00000000 72747461 74756269 6e207365     ....attributes n
   22f80:	7320746f 6f707075 64657472 74657920     ot supported yet
   22f90:	00000000 766e6f63 69737265 3d206e6f     ....conversion =
   22fa0:	7227203d 00000027                       = 'r'...

00022fa8 <str_format_obj>:
   22fa8:	000221a8 ffff0003 00014015 5f504d28     .!.......@..(MP_
   22fb8:	5f4a424f 515f5349 28525453 74746170     OBJ_IS_QSTR(patt
   22fc8:	296e7265 207c7c20 5f504d28 5f4a424f     ern) || (MP_OBJ_
   22fd8:	4f5f5349 70284a42 65747461 20296e72     IS_OBJ(pattern) 
   22fe8:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   22ff8:	292a745f 6f762828 292a6469 74746170     _t*)((void*)patt
   23008:	296e7265 743e2d29 2d657079 6e69623e     ern))->type->bin
   23018:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   23028:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   23038:	00000000 6d726f66 72207461 69757165     ....format requi
   23048:	20736572 69642061 00007463 20746f6e     res a dict..not 
   23058:	756f6e65 61206867 6d756772 73746e65     enough arguments
   23068:	726f6620 726f6620 2074616d 69727473      for format stri
   23078:	0000676e 20632525 75716572 73657269     ng..%%c requires
   23088:	746e6920 20726f20 72616863 00000000      int or char....
   23098:	65746e69 20726567 75716572 64657269     integer required
   230a8:	00000000 20746f6e 206c6c61 75677261     ....not all argu
   230b8:	746e656d 6f632073 7265766e 20646574     ments converted 
   230c8:	69727564 7320676e 6e697274 6f662067     during string fo
   230d8:	74616d72 676e6974 00000000 61746164     rmatting....data
   230e8:	203d2120 4c4c554e 00000000               != NULL....

000230f4 <str_replace_obj>:
   230f4:	000221a8 00040006 0001472d              .!......-G..

00023100 <str_count_obj>:
   23100:	000221a8 00040004 00014a05              .!.......J..

0002310c <str_lower_obj>:
   2310c:	00022060 00014c67                       ` ..gL..

00023114 <str_upper_obj>:
   23114:	00022060 00014c85                       ` ...L..

0002311c <str_isspace_obj>:
   2311c:	00022060 00014da5                       ` ...M..

00023124 <str_isalpha_obj>:
   23124:	00022060 00014dc5                       ` ...M..

0002312c <str_isdigit_obj>:
   2312c:	00022060 00014de5                       ` ...M..

00023134 <str_isupper_obj>:
   23134:	00022060 00014e05                       ` ...N..

0002313c <str_islower_obj>:
   2313c:	00022060 00014e25                       ` ..%N..

00023144 <str8_locals_dict_table>:
   23144:	00000426 00022e64 00000556 00022e70     &...d...V...p...
   23154:	0000046e 00022e7c 0000055a 00022e88     n...|...Z.......
   23164:	000004ae 00022d88 00000586 00022da0     .....-.......-..
   23174:	00000562 00022dbc 0000058e 00022e94     b....-..........
   23184:	00000416 00022eb4 000005a2 00022f08     ............./..
   23194:	000004d2 00022f14 00000566 00022f20     ...../..f... /..
   231a4:	0000042a 00022fa8 00000542 000230f4     *..../..B....0..
   231b4:	000003f6 00023100 000004ce 0002310c     .....1.......1..
   231c4:	000005ce 00023114 00000496 0002311c     .....1.......1..
   231d4:	00000486 00023124 0000048a 0002312c     ....$1......,1..
   231e4:	0000049e 00023134 00000492 0002313c     ....41......<1..

000231f4 <str8_locals_dict>:
   231f4:	000217b4 000000b7 00000016 00023144     ............D1..

00023204 <mp_type_str>:
   23204:	00023780 01670000 000120c5 00012179     .7....g.. ..y!..
	...
   2321c:	0001254f 00000000 00012875 000153e3     O%......u(...S..
   2322c:	00000000 00014e45 00000000 00000000     ....EN..........
   2323c:	000231f4                                .1..

00023240 <mp_type_bytes>:
   23240:	00023780 00f40000 000120c5 000122c9     .7....... ..."..
	...
   23258:	0001254f 00000000 00012875 00015497     O%......u(...T..
   23268:	00000000 00014e45 00000000 00000000     ....EN..........
   23278:	000231f4 00000000                       .1......

00023280 <mp_const_empty_bytes_obj>:
   23280:	00023240 00000000 00000000 0002327c     @2..........|2..
   23290:	276e6163 6f632074 7265766e 6f742074     can't convert to
   232a0:	72747320 706d6920 6963696c 00796c74      str implicitly.

000232b0 <__func__.7397>:
   232b0:	5f727473 6e696f6a 00000000              str_join....

000232bc <__func__.7479>:
   232bc:	5f727473 646e6966 00007265              str_finder..

000232c8 <__func__.7537>:
   232c8:	5f727473 5f696e75 69727473 00000070     str_uni_strip...

000232d8 <whitespace.7541>:
   232d8:	0d0a0920 00000c0b                        .......

000232e0 <__func__.7627>:
   232e0:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   232f0:	65685f74 7265706c 00000000              t_helper....

000232fc <__func__.7676>:
   232fc:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   2330c:	00000074                                t...

00023310 <__func__.7688>:
   23310:	5f727473 75646f6d 665f6f6c 616d726f     str_modulo_forma
   23320:	00000074                                t...

00023324 <__func__.7739>:
   23324:	5f727473 6c706572 00656361              str_replace.

00023330 <__func__.7766>:
   23330:	5f727473 6e756f63 00000074 00000028     str_count...(...
   23340:	0000202c 0000002c 00000029 6f5f706d     , ..,...)...mp_o
   23350:	675f6a62 745f7465 28657079 666c6573     bj_get_type(self
   23360:	296e695f 65673e2d 65746974 3d3d2072     _in)->getiter ==
   23370:	5f706d20 5f6a626f 6c707574 65675f65      mp_obj_tuple_ge
   23380:	65746974 00000072 2e2f2e2e 79702f2e     titer...../../py
   23390:	6a626f2f 6c707574 00632e65 5f504d28     /objtuple.c.(MP_
   233a0:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   233b0:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   233c0:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   233d0:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   233e0:	203d3d20 706d2628 7079745f 75745f65      == (&mp_type_tu
   233f0:	29656c70 00002929                       ple)))..

000233f8 <tuple_count_obj>:
   233f8:	000220cc 0001596b 5f504d28 5f4a424f     . ..kY..(MP_OBJ_
   23408:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   23418:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   23428:	2a745f65 76282829 2a64696f 67726129     e_t*)((void*)arg
   23438:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   23448:	706d2628 7079745f 75745f65 29656c70     (&mp_type_tuple)
   23458:	00002929                                ))..

0002345c <tuple_index_obj>:
   2345c:	000221a8 00040004 000159c9              .!.......Y..

00023468 <tuple_locals_dict_table>:
   23468:	000003f6 000233f8 0000046e 0002345c     .....3..n...\4..

00023478 <tuple_locals_dict>:
   23478:	000217b4 00000017 00000002 00023468     ............h4..

00023488 <mp_type_tuple>:
   23488:	00023780 016e0000 00015521 000155a5     .7....n.!U...U..
   23498:	00000000 00015719 000157a9 00000000     .....W...W......
   234a8:	0001592d 00015b8f 00000000 00000000     -Y...[..........
	...
   234c0:	00023478                                x4..

000234c4 <mp_const_empty_tuple_obj>:
   234c4:	00023488 00000000 4f5f504d 495f4a42     .4......MP_OBJ_I
   234d4:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   234e4:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).

000234f4 <__func__.7204>:
   234f4:	6c707574 6d635f65 65685f70 7265706c     tuple_cmp_helper
   23504:	00000000                                ....

00023508 <__func__.7253>:
   23508:	6c707574 6f635f65 00746e75              tuple_count.

00023514 <__func__.7260>:
   23514:	6c707574 6e695f65 00786564              tuple_index.

00023520 <__func__.7281>:
   23520:	6f5f706d 745f6a62 656c7075 7465675f     mp_obj_tuple_get
   23530:	00000000                                ....

00023534 <__func__.7286>:
   23534:	6f5f706d 745f6a62 656c7075 6c65645f     mp_obj_tuple_del
   23544:	00000000 4f5f504d 495f4a42 59545f53     ....MP_OBJ_IS_TY
   23554:	2a284550 6d657469 6d26202c 79745f70     PE(*item, &mp_ty
   23564:	745f6570 29657079 00000000 2e2f2e2e     pe_type)....../.
   23574:	79702f2e 6a626f2f 65707974 0000632e     ./py/objtype.c..

00023584 <native_base_init_wrapper_obj>:
   23584:	000221a8 ffff0002 00015cd1 5f6d756e     .!.......\..num_
   23594:	6974616e 625f6576 73657361 32203c20     native_bases < 2
   235a4:	00000000 6b6f6f6c 3e2d7075 74736564     ....lookup->dest
   235b4:	205d305b 4d203d3d 424f5f50 554e5f4a     [0] == MP_OBJ_NU
   235c4:	00004c4c 6b6f6f6c 3e2d7075 74736564     LL..lookup->dest
   235d4:	205d315b 4d203d3d 424f5f50 554e5f4a     [1] == MP_OBJ_NU
   235e4:	00004c4c 65707974 6f6c3e2d 736c6163     LL..type->locals
   235f4:	6369645f 623e2d74 2e657361 65707974     _dict->base.type
   23604:	203d3d20 5f706d26 65707974 6369645f      == &mp_type_dic
   23614:	00000074 2073253c 656a626f 61207463     t...<%s object a
   23624:	70252074 0000003e 6f5f706d 695f6a62     t %p>...mp_obj_i
   23634:	6e695f73 6e617473 745f6563 28657079     s_instance_type(
   23644:	666c6573 00000029 6e695f5f 5f5f7469     self)...__init__
   23654:	73202928 6c756f68 65722064 6e727574     () should return
   23664:	6e6f4e20 00000065                        None...

0002366c <mp_unary_op_method_name>:
   2366c:	00000000 00101703 00000000              ............

00023678 <mp_binary_op_method_name>:
   23678:	160a0f18 0000000c 00000000 14110000     ................
	...
   23690:	24020000 00000000 00070000 6f5f706d     ...$........mp_o
   236a0:	695f6a62 6e695f73 6e617473 745f6563     bj_is_instance_t
   236b0:	28657079 6f5f706d 675f6a62 745f7465     ype(mp_obj_get_t
   236c0:	28657079 666c6573 296e695f 00000029     ype(self_in))...
   236d0:	656a626f 6e207463 6320746f 616c6c61     object not calla
   236e0:	00656c62 616c633c 27207373 3e277125     ble.<class '%q'>
   236f0:	00000000 65707974 6b617420 31207365     ....type takes 1
   23700:	20726f20 72612033 656d7567 0073746e      or 3 arguments.
   23710:	6e6e6163 6320746f 74616572 6e692065     cannot create in
   23720:	6e617473 00006563 4f5f504d 495f4a42     stance..MP_OBJ_I
   23730:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   23740:	5f706d26 65707974 7079745f 00002965     &mp_type_type)..
   23750:	666c6573 6f6c3e2d 736c6163 6369645f     self->locals_dic
   23760:	623e2d74 2e657361 65707974 203d3d20     t->base.type == 
   23770:	5f706d26 65707974 6369645f 00000074     &mp_type_dict...

00023780 <mp_type_type>:
   23780:	00023780 016f0000 0001687d 000168a9     .7....o.}h...h..
   23790:	00016915 0000df35 00000000 00016955     .i..5.......Ui..
	...
   237bc:	65707974 20736920 20746f6e 61206e61     type is not an a
   237cc:	70656363 6c626174 61622065 74206573     cceptable base t
   237dc:	00657079 746c756d 656c7069 73616220     ype.multiple bas
   237ec:	68207365 20657661 74736e69 65636e61     es have instance
   237fc:	79616c20 74756f2d 6e6f6320 63696c66      lay-out conflic
   2380c:	00000074 7075733c 203a7265 00000000     t...<super: ....
   2381c:	0000202c 0000003e 4f5f504d 495f4a42     , ..>...MP_OBJ_I
   2382c:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   2383c:	5f706d26 65707974 7075735f 00297265     &mp_type_super).
   2384c:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   2385c:	2d666c65 7079743e 26202c65 745f706d     elf->type, &mp_t
   2386c:	5f657079 65707974 00000029 4f5f504d     ype_type)...MP_O
   2387c:	495f4a42 59545f53 69284550 736d6574     BJ_IS_TYPE(items
   2388c:	2c5d695b 706d2620 7079745f 79745f65     [i], &mp_type_ty
   2389c:	00296570                                pe).

000238a0 <mp_type_super>:
   238a0:	00023780 016a0000 00016c51 00016ca9     .7....j.Ql...l..
	...
   238bc:	00016d1d 00000000 00000000 00000000     .m..............
	...
   238dc:	75737369 616c6362 29287373 67726120     issubclass() arg
   238ec:	6d203220 20747375 61206562 616c6320      2 must be a cla
   238fc:	6f207373 20612072 6c707574 666f2065     ss or a tuple of
   2390c:	616c6320 73657373 00000000 75737369      classes....issu
   2391c:	616c6362 29287373 67726120 6d203120     bclass() arg 1 m
   2392c:	20747375 61206562 616c6320 00007373     ust be a class..

0002393c <mp_builtin_issubclass_obj>:
   2393c:	000220cc 00017085                       . ...p..

00023944 <mp_builtin_isinstance_obj>:
   23944:	000220cc 000170cd 666c6573 203d3d20     . ...p..self == 
   23954:	5f706d26 65707974 6174735f 6d636974     &mp_type_staticm
   23964:	6f687465 7c7c2064 6c657320 3d3d2066     ethod || self ==
   23974:	706d2620 7079745f 6c635f65 6d737361      &mp_type_classm
   23984:	6f687465 00000064                       ethod...

0002398c <mp_type_staticmethod>:
   2398c:	00023780 01640000 00000000 0001712b     .7....d.....+q..
	...

000239c8 <mp_type_classmethod>:
   239c8:	00023780 00f70000 00000000 0001712b     .7..........+q..
	...

00023a04 <__func__.7740>:
   23a04:	74736e69 65636e61 756f635f 6e5f746e     instance_count_n
   23a14:	76697461 61625f65 00736573              ative_bases.

00023a20 <__func__.7758>:
   23a20:	6f5f706d 6e5f6a62 695f7765 6174736e     mp_obj_new_insta
   23a30:	0065636e                                nce.

00023a34 <__func__.7770>:
   23a34:	6f5f706d 635f6a62 7373616c 6f6f6c5f     mp_obj_class_loo
   23a44:	0070756b                                kup.

00023a48 <__func__.7801>:
   23a48:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   23a58:	656b616d 77656e5f 00000000              make_new....

00023a64 <__func__.7838>:
   23a64:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   23a74:	64616f6c 7474615f 00000072              load_attr...

00023a80 <__func__.7932>:
   23a80:	65707974 7474615f 00000072              type_attr...

00023a8c <__func__.7981>:
   23a8c:	65707573 74615f72 00007274              super_attr..

00023a98 <__func__.8043>:
   23a98:	74617473 635f6369 7373616c 74656d5f     static_class_met
   23aa8:	5f646f68 656b616d 77656e5f 00000000     hod_make_new....
   23ab8:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   23ac8:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   23ad8:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   23ae8:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   23af8:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   23b08:	697a5f65 29292970 00000000 2e2f2e2e     e_zip)))....../.
   23b18:	79702f2e 6a626f2f 2e70697a 00000063     ./py/objzip.c...

00023b28 <mp_type_zip>:
   23b28:	00023780 01760000 00000000 000171c1     .7....v......q..
	...
   23b4c:	0000dea7 00017237 00000000 00000000     ....7r..........
	...

00023b64 <__func__.7377>:
   23b64:	5f70697a 72657469 7478656e 00000000     zip_iternext....

00023b74 <mp_op_getitem_obj>:
   23b74:	000220cc 000172dd                       . ...r..

00023b7c <mp_op_setitem_obj>:
   23b7c:	00022138 00017305                       8!...s..

00023b84 <mp_op_delitem_obj>:
   23b84:	000220cc 0001732f                       . ../s..

00023b8c <mp_op_contains_obj>:
   23b8c:	000220cc 00017357 656a626f 6e207463     . ..Ws..object n
   23b9c:	6920746f 6573206e 6e657571 00006563     ot in sequence..
   23bac:	20646162 65707974 65646f63 00000000     bad typecode....
   23bbc:	0079702e 73696874 6d616e5f 20715f65     .py.this_name_q 
   23bcc:	4d203d21 424f5f50 554e5f4a 00004c4c     != MP_OBJ_NULL..
   23bdc:	2e2f2e2e 79702f2e 6975622f 6e69746c     ../../py/builtin
   23bec:	6f706d69 632e7472 00000000 6e6e6163     import.c....cann
   23bfc:	7020746f 6f667265 72206d72 74616c65     ot perform relat
   23c0c:	20657669 6f706d69 00007472 75646f6d     ive import..modu
   23c1c:	6e20656c 6620746f 646e756f 00000000     le not found....
   23c2c:	6e695f5f 5f5f7469 0079702e              __init__.py.

00023c38 <mp_builtin___import___obj>:
   23c38:	000221a8 00050002 000183cf              .!..........

00023c44 <__func__.8156>:
   23c44:	625f706d 746c6975 5f5f6e69 706d695f     mp_builtin___imp
   23c54:	5f74726f 0000005f                       ort__...

00023c5c <mp_builtin_eval_obj>:
   23c5c:	000221a8 00030002 000189f9              .!..........

00023c68 <mp_builtin_exec_obj>:
   23c68:	000221a8 00030002 00018a17 3d3c2032     .!..........2 <=
   23c78:	615f6e20 00736772 2e2f2e2e 79702f2e      n_args.../../py
   23c88:	646f6d2f 6c697562 736e6974 0000632e     /modbuiltins.c..

00023c98 <mp_builtin___build_class___obj>:
   23c98:	000221a8 ffff0004 00018b39              .!......9...

00023ca4 <mp_builtin_abs_obj>:
   23ca4:	00022060 00018bf1                       ` ......

00023cac <mp_builtin_all_obj>:
   23cac:	00022060 00018c0b                       ` ......

00023cb4 <mp_builtin_any_obj>:
   23cb4:	00022060 00018c59                       ` ..Y...

00023cbc <mp_builtin_bin_obj>:
   23cbc:	00022060 00018ca1                       ` ......

00023cc4 <mp_builtin_callable_obj>:
   23cc4:	00022060 00018cc9 28726863 72612029     ` ......chr() ar
   23cd4:	6f6e2067 6e692074 6e617220 32286567     g not in range(2
   23ce4:	00293635                                56).

00023ce8 <mp_builtin_chr_obj>:
   23ce8:	00022060 00018cf5                       ` ......

00023cf0 <mp_builtin_dir_obj>:
   23cf0:	000221a8 00010000 00018d39              .!......9...

00023cfc <mp_builtin_divmod_obj>:
   23cfc:	000220cc 00018df1                       . ......

00023d04 <mp_builtin_hash_obj>:
   23d04:	00022060 00018e0f                       ` ......

00023d0c <mp_builtin_hex_obj>:
   23d0c:	00022060 00018e29                       ` ..)...

00023d14 <mp_builtin_iter_obj>:
   23d14:	00022060 00018e45                       ` ..E...

00023d1c <mp_builtin_next_obj>:
   23d1c:	00022060 00018e5f                       ` .._...

00023d24 <mp_builtin_oct_obj>:
   23d24:	00022060 00018e91 2064726f 65707865     ` ......ord expe
   23d34:	20737463 68632061 63617261 00726574     cts a character.

00023d44 <mp_builtin_ord_obj>:
   23d44:	00022060 00018ead 72612d33 6f702067     ` ......3-arg po
   23d54:	20292877 20746f6e 70707573 6574726f     w() not supporte
   23d64:	00000064                                d...

00023d68 <mp_builtin_pow_obj>:
   23d68:	000221a8 00030004 00018ee9              .!..........

00023d74 <mp_builtin_print_obj>:
   23d74:	000221a8 ffff0001 00018f29 0000000a     .!......).......

00023d84 <mp_builtin___repl_print___obj>:
   23d84:	00022060 00018fdd                       ` ......

00023d8c <mp_builtin_repr_obj>:
   23d8c:	00022060 00019015                       ` ......

00023d94 <mp_builtin_round_obj>:
   23d94:	000221a8 00020002 00019055              .!......U...

00023da0 <mp_builtin_sum_obj>:
   23da0:	000221a8 00020002 000190b5 7473756d     .!..........must
   23db0:	65737520 79656b20 64726f77 67726120      use keyword arg
   23dc0:	6e656d75 6f662074 656b2072 75662079     ument for key fu
   23dd0:	6974636e 00006e6f                       nction..

00023dd8 <mp_builtin_sorted_obj>:
   23dd8:	000221a8 ffff0003 0001910b              .!..........

00023de4 <mp_builtin_getattr_obj>:
   23de4:	000221a8 00030004 000191a9              .!..........

00023df0 <mp_builtin_setattr_obj>:
   23df0:	00022138 000191e9                       8!......

00023df8 <mp_builtin_hasattr_obj>:
   23df8:	000220cc 00019215                       . ......

00023e00 <mp_builtin_globals_obj>:
   23e00:	00021ff4 00019251                       ....Q...

00023e08 <mp_builtin_locals_obj>:
   23e08:	00021ff4 0001925f                       ...._...

00023e10 <mp_builtin_id_obj>:
   23e10:	00022060 0000dd19                       ` ......

00023e18 <mp_builtin_len_obj>:
   23e18:	00022060 0000dd63                       ` ..c...

00023e20 <mp_module_builtins_globals_table>:
   23e20:	0000006e 000003ca 00000012 00023c98     n............<..
   23e30:	0000004a 00023c38 00000082 00023d84     J...8<.......=..
   23e40:	000003be 000212cc 000003d2 00023240     ............@2..
   23e50:	000003fe 000217b4 0000047e 00022610     ........~....&..
   23e60:	000004be 0002287c 000004d6 000229d8     ....|(.......)..
   23e70:	00000502 00022a98 0000053a 00022bbc     .....*..:....+..
   23e80:	0000059e 00023204 000005aa 000238a0     .....2.......8..
   23e90:	000005ba 00023488 000005be 00023780     .....4.......7..
   23ea0:	000005da 00023b28 000003de 000239c8     ....(;.......9..
   23eb0:	00000592 0002398c 000002ee 00022c38     .....9......8,..
   23ec0:	00000396 00023ca4 000003a2 00023cac     .....<.......<..
   23ed0:	000003aa 00023cb4 000003b6 00023cbc     .....<.......<..
   23ee0:	000003d6 00023cc4 000003da 00023ce8     .....<.......<..
   23ef0:	00000406 00023cf0 0000040a 00023cfc     .....<.......<..
   23f00:	0000041a 00023c5c 0000041e 00023c68     ....\<......h<..
   23f10:	00000446 00023de4 00000572 00023df0     F....=..r....=..
   23f20:	0000044a 00023e00 00000452 00023df8     J....>..R....=..
   23f30:	00000456 00023d04 00000462 00023d0c     V....=..b....=..
   23f40:	0000046a 00023e10 0000048e 00023944     j....>......D9..
   23f50:	0000049a 0002393c 000004a6 00023d14     ....<9.......=..
   23f60:	000004ba 00023e18 000004c6 00023e08     .....>.......>..
   23f70:	000004fe 00023d1c 00000506 00023d24     .....=......$=..
   23f80:	00000516 00023d44 0000052e 00023d68     ....D=......h=..
   23f90:	00000532 00023d74 00000546 00023d8c     2...t=..F....=..
   23fa0:	0000055e 00023d94 00000582 00023dd8     ^....=.......=..
   23fb0:	000005a6 00023da0 000002e2 000218b8     .....=..........
   23fc0:	000002d6 00021a20 000002da 00021ad4     .... ...........
   23fd0:	000002de 00021b10 000002ea 00021b4c     ............L...
   23fe0:	000002f2 000219a8 000002f6 0002196c     ............l...
   23ff0:	0000031a 00021b88 0000031e 00021de0     ................
   24000:	00000322 00021c00 0000032a 00021930     ".......*...0...
   24010:	00000326 00021c3c 00000332 00021bc4     &...<...2.......
   24020:	0000033a 00021c78 0000033e 00021cb4     :...x...>.......
   24030:	00000346 00021d68 0000034e 00021cf0     F...h...N.......
   24040:	00000356 00021a5c 0000036e 00021d2c     V...\...n...,...
   24050:	0000037a 000219e4 0000037e 00021da4     z.......~.......
   24060:	00000382 000218f4 00000386 00021e1c     ................
   24070:	0000038a 00021e58 00000392 00021a98     ....X...........
   24080:	0000036a 0002470c                       j....G..

00024088 <mp_module_builtins_globals>:
   24088:	000217b4 0000026f 0000004d 00023e20     ....o...M... >..

00024098 <mp_module_builtins>:
   24098:	00022a38 00024088                       8*...@..

000240a0 <__func__.8075>:
   240a0:	625f706d 746c6975 5f5f6e69 6975625f     mp_builtin___bui
   240b0:	635f646c 7373616c 00005f5f              ld_class__..

000240bc <allowed_args.8187>:
   240bc:	0203015b 000000b2 02030104 000000b6     [...............

000240cc <mp_micropython_opt_level_obj>:
   240cc:	000221a8 00010000 0001926d              .!......m...

000240d8 <mp_micropython_heap_lock_obj>:
   240d8:	00021ff4 000192b1                       ........

000240e0 <mp_micropython_heap_unlock_obj>:
   240e0:	00021ff4 000192c5                       ........

000240e8 <mp_module_micropython_globals_table>:
   240e8:	0000006e 000004ea 000003ee 00021274     n...........t...
   240f8:	00000512 000240cc 0000045a 000240d8     .....@..Z....@..
   24108:	0000045e 000240e0                       ^....@..

00024110 <mp_module_micropython_globals>:
   24110:	000217b4 0000002f 00000005 000240e8     ..../........@..

00024120 <mp_module_micropython>:
   24120:	00022a38 00024110                       8*...A..

00024128 <__func__.7939>:
   24128:	655f706d 75636578 625f6574 63657479     mp_execute_bytec
   24138:	0065646f 61636f6c 6176206c 62616972     ode.local variab
   24148:	7220656c 72656665 65636e65 65622064     le referenced be
   24158:	65726f66 73736120 6d6e6769 00746e65     fore assignment.
   24168:	6f5f706d 695f6a62 78655f73 74706563     mp_obj_is_except
   24178:	5f6e6f69 74736e69 65636e61 504f5428     ion_instance(TOP
   24188:	00292928 2e2f2e2e 79702f2e 2e6d762f     ()).../../py/vm.
   24198:	00000063 5f637865 3e207073 7865203d     c...exc_sp >= ex
   241a8:	74735f63 006b6361 72727563 6c746e65     c_stack.currentl
   241b8:	6e695f79 6378655f 5f747065 636f6c62     y_in_except_bloc
   241c8:	0000006b 5f637865 3d207073 7865203d     k...exc_sp == ex
   241d8:	74735f63 206b6361 0031202d 5f746572     c_stack - 1.ret_
   241e8:	646e696b 203d3d20 565f504d 45525f4d     kind == MP_VM_RE
   241f8:	4e525554 4358455f 49545045 00004e4f     TURN_EXCEPTION..
   24208:	65747962 646f6320 6f6e2065 6d692074     byte code not im
   24218:	6d656c70 65746e65 00000064 61206f6e     plemented...no a
   24228:	76697463 78652065 74706563 206e6f69     ctive exception 
   24238:	72206f74 69617265 00006573 636e7566     to reraise..func
   24248:	6e6f6974 746f6720 6c756d20 6c706974     tion got multipl
   24258:	61762065 7365756c 726f6620 67726120     e values for arg
   24268:	6e656d75 25272074 00002771 78656e75     ument '%q'..unex
   24278:	74636570 6b206465 6f777965 61206472     pected keyword a
   24288:	6d756772 00746e65 636e7566 6e6f6974     rgument.function
   24298:	73696d20 676e6973 71657220 65726975      missing require
   242a8:	6f702064 69746973 6c616e6f 67726120     d positional arg
   242b8:	6e656d75 25232074 00000064 636e7566     ument #%d...func
   242c8:	6e6f6974 73696d20 676e6973 71657220     tion missing req
   242d8:	65726975 656b2064 726f7779 72612064     uired keyword ar
   242e8:	656d7567 2720746e 00277125 636e7566     gument '%q'.func
   242f8:	6e6f6974 73696d20 676e6973 79656b20     tion missing key
   24308:	64726f77 6c6e6f2d 72612079 656d7567     word-only argume
   24318:	0000746e 00006669 6c696877 00000065     nt..if..while...
   24328:	00726f66 00797274 68746977 00000000     for.try.with....
   24338:	00666564 73616c63 00000073 00000020     def.class... ...
   24348:	0073250a 0000000a                       .%s.....

00024350 <import_str.7322>:
   24350:	6f706d69 00207472                       import .

00024358 <mp_builtin_open_obj>:
   24358:	000221a8 ffff0003 0001b1b1 65737341     .!..........Asse
   24368:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   24378:	61202c64 69662074 2520656c 64253a73     d, at file %s:%d
   24388:	0000000a 65737341 6f697472 6166206e     ....Assertion fa
   24398:	64656c69 00000000 206e6950 2070616d     iled....Pin map 
   243a8:	73736170 70206465 00206e69 2e6e6950     passed pin .Pin.
   243b8:	7070616d 64207265 276e6469 65722074     mapper didn't re
   243c8:	6e727574 50206120 6f206e69 63656a62     turn a Pin objec
   243d8:	00000074 2e6e6950 7070616d 6d207265     t...Pin.mapper m
   243e8:	20737061 00000000 206f7420 00000000     aps .... to ....
   243f8:	2e6e6950 5f70616d 74636964 70616d20     Pin.map_dict map
   24408:	00002073 2e6e6950 72616f62 616d2064     s ..Pin.board ma
   24418:	00207370 286e6950 20297325 73656f64     ps .Pin(%s) does
   24428:	2074276e 73697865 00000074 286e6950     n't exist...Pin(
   24438:	2e6e6950 2e757063 202c7125 65646f6d     Pin.cpu.%q, mode
   24448:	6e69503d 0000002e 7570202c 503d6c6c     =Pin...., pull=P
   24458:	252e6e69 00000071 6661202c 2964253d     in.%q..., af=%d)
   24468:	00000000 6661202c 6e69503d 2971252e     ...., af=Pin.%q)
   24478:	00000000 00000029                       ....)...

00024480 <pin_mapper_fun_obj>:
   24480:	000221a8 00020002 0001ba11              .!..........

0002448c <pin_mapper_obj>:
   2448c:	000239c8 00024480                       .9...D..

00024494 <pin_map_dict_fun_obj>:
   24494:	000221a8 00020002 0001ba49              .!......I...

000244a0 <pin_map_dict_obj>:
   244a0:	000239c8 00024494                       .9...D..

000244a8 <pin_af_list_obj>:
   244a8:	00022060 0001ba81                       ` ......

000244b0 <pin_debug_fun_obj>:
   244b0:	000221a8 00020002 0001bacf              .!..........

000244bc <pin_debug_obj>:
   244bc:	000239c8 000244b0 61766e69 2064696c     .9...D..invalid 
   244cc:	206e6970 65726964 6f697463 25203a6e     pin direction: %
   244dc:	00000064 61766e69 2064696c 206e6970     d...invalid pin 
   244ec:	65707974 6425203a 00000000 61766e69     type: %d....inva
   244fc:	2064696c 206e6970 76697264 25203a65     lid pin drive: %
   2450c:	00000064 61766e69 2064696c 206e6970     d...invalid pin 
   2451c:	203a6661 00006425                       af: %d..

00024524 <pin_init_obj>:
   24524:	000221a8 ffff0003 0001bcad              .!..........

00024530 <pin_value_obj>:
   24530:	000221a8 00020002 0001bcd5              .!..........

0002453c <pin_off_obj>:
   2453c:	00022060 0001bcfb                       ` ......

00024544 <pin_on_obj>:
   24544:	00022060 0001bd29                       ` ..)...

0002454c <pin_irq_obj>:
   2454c:	000221a8 ffff0003 0001bd59              .!......Y...

00024558 <pin_name_obj>:
   24558:	00022060 0001bd79                       ` ..y...

00024560 <pin_names_obj>:
   24560:	00022060 0001bd9b                       ` ......

00024568 <pin_port_obj>:
   24568:	00022060 0001be15                       ` ......

00024570 <pin_pin_obj>:
   24570:	00022060 0001be37                       ` ..7...

00024578 <pin_gpio_obj>:
   24578:	00022060 0001be5b                       ` ..[...

00024580 <pin_dir_obj>:
   24580:	00022060 0001be7d                       ` ..}...

00024588 <pin_type_obj>:
   24588:	00022060 0001bea7                       ` ......

00024590 <pin_af_obj>:
   24590:	00022060 0001bed7                       ` ......

00024598 <pin_locals_dict_table>:
   24598:	0000006e 0000036a 00000476 00024524     n...j...v...$E..
   245a8:	000005d2 00024530 0000050a 0002453c     ....0E......<E..
   245b8:	0000050e 00024544 00000482 0002454c     ....DE......LE..
   245c8:	000004ca 0002453c 00000466 00024544     ....<E..f...DE..
   245d8:	000004f6 00024558 000004fa 00024560     ....XE......`E..
   245e8:	0000039e 000244a8 0000052a 00024568     .....D..*...hE..
   245f8:	0000051e 00024570 0000044e 00024578     ....pE..N...xE..
   24608:	00000406 00024580 000005be 00024588     .....E.......E..
   24618:	0000039a 00024590 000004da 0002448c     .....E.......D..
   24628:	000003fe 000244a0 000003fa 000244bc     .....D.......D..
   24638:	000003ba 00024750 00000302 00000001     ....PG..........
   24648:	00000352 00000003 0000034a 00000013     R.......J.......
   24658:	000002ca 00000005 000002d2 00000001     ................
   24668:	00000362 00000015 0000035a 00000019     b.......Z.......
   24678:	0000035e 00000011 00000316 00000009     ^...............
   24688:	0000030a 00000001 00000306 00000003     ................
   24698:	0000030e 0000000d 00000312 00000005     ................
   246a8:	0000032e 00000003 00000336 00000005     ........6.......
   246b8:	000002fe 000000cd                       ........

000246c0 <pin_locals_dict>:
   246c0:	000217b4 0000012f 00000025 00024598     ..../...%....E..

000246d0 <pin_mod>:
   246d0:	00023780 00da0000 0001b7ed 0001b929     .7..........)...
   246e0:	0001b991 00000000 00000000 00000000     ................
	...
   24708:	000246c0                                .F..

0002470c <pin_module>:
   2470c:	000246d0 000246c0                       .F...F..

00024714 <allowed_args.8416>:
   24714:	0102013b 00000000 0003014d 00022b54     ;.......M...T+..
   24724:	00030103 00000000 000200e6 ffffffff     ................
   24734:	02030174 00000000 020200e9 ffffffff     t...............
   24744:	6e69503c 3e71252e 00000000              <Pin.%q>....

00024750 <pin_board_pins_obj_type>:
   24750:	00023780 00ee0000 0001bf09 00000000     .7..............
	...
   24788:	00024ed4                                .N..

0002478c <pin_PB6_af>:
   2478c:	0000007c 00000504 00000001 00011804     |...............
   2479c:	00000090 00000707 00000000 00011807     ................

000247ac <pin_PB7_af>:
   247ac:	0000007d 00000504 00000002 00011c04     }...............
   247bc:	00000091 00000707 00000001 00011c07     ................

000247cc <pin_PF4_af>:
   247cc:	00000084 00010505 00000000 00051005     ................
   247dc:	0000008e 00ff0406 00000004 00051006     ................
   247ec:	00000094 00020707 00000000 00051007     ................
   247fc:	000000a2 00000b08 00000000 00051008     ................

0002480c <pin_PE3_af>:
   2480c:	00000065 00ff0000 00000000 ffffffff     e...............

0002481c <pin_PE2_af>:
   2481c:	00000066 00ff0000 00000001 ffffffff     f...............

0002482c <pin_PE1_af>:
   2482c:	00000069 00ff0000 00000002 ffffffff     i...............

0002483c <pin_PE0_af>:
   2483c:	0000006a 00ff0000 00000003 ffffffff     j...............

0002484c <pin_PD7_af>:
   2484c:	000000b1 00050607 00000001 00031c07     ................
   2485c:	0000008d 00ff0908 00000000 00031c08     ................

0002486c <pin_PC7_af>:
   2486c:	000000a9 00010607 00000001 00021c07     ................
   2487c:	000000a4 00000b08 00000001 00021c08     ................

0002488c <pin_PC6_af>:
   2488c:	000000a8 00010607 00000000 00021807     ................
   2489c:	000000a2 00000b08 00000000 00021808     ................

000248ac <pin_PC5_af>:
   248ac:	00000083 00000504 00000008 00021404     ................
   248bc:	000000a7 00000607 00000001 00021407     ................
   248cc:	0000009e 00010108 00000003 00021408     ................

000248dc <pin_PC4_af>:
   248dc:	00000082 00000504 00000007 00021004     ................
   248ec:	0000008f 00ff0406 00000005 00021006     ................
   248fc:	000000a6 00000607 00000000 00021007     ................
   2490c:	0000009f 00010108 00000002 00021008     ................

0002491c <pin_PA6_af>:
   2491c:	00000073 00010303 00000001 00001803     s...............
   2492c:	00000087 00010505 00000003 00001805     ................

0002493c <pin_PA7_af>:
   2493c:	00000074 00010303 00000000 00001c03     t...............
   2494c:	00000088 00010505 00000004 00001c05     ................

0002495c <pin_PF0_af>:
   2495c:	0000009f 00010101 00000002 00050001     ................
   2496c:	00000089 00010505 00000005 00050005     ................
   2497c:	00000090 00000707 00000000 00050007     ................
   2498c:	0000008d 00ff0908 00000000 00050008     ................

0002499c <pin_PF1_af>:
   2499c:	0000009e 00010101 00000003 00050401     ................
   249ac:	0000008a 00010505 00000006 00050405     ................
   249bc:	00000091 00000707 00000001 00050407     ................
   249cc:	0000009d 00ff0d0e 00000002 0005040e     ................

000249dc <pin_PF2_af>:
   249dc:	0000007b 00000504 00000000 00050804     {...............
   249ec:	0000008b 00010505 00000007 00050805     ................
   249fc:	00000092 00010707 00000000 00050807     ................
   24a0c:	0000009c 00ff0d0e 00000001 0005080e     ................

00024a1c <pin_PF3_af>:
   24a1c:	0000008c 00010505 00000008 00050c05     ................
   24a2c:	00000093 00010707 00000001 00050c07     ................

00024a3c <pin_PD4_af>:
   24a3c:	000000a0 00000b00 00000002 ffffffff     ................
   24a4c:	000000ae 00040607 00000000 00031007     ................

00024a5c <pin_PD5_af>:
   24a5c:	000000a1 00000b00 00000003 ffffffff     ................
   24a6c:	000000af 00040607 00000001 00031407     ................

00024a7c <pin_PB0_af>:
   24a7c:	000000a3 00000b00 00000004 ffffffff     ................
   24a8c:	00000094 00020707 00000000 00010007     ................

00024a9c <pin_PB1_af>:
   24a9c:	000000a5 00000b00 00000005 ffffffff     ................
   24aac:	00000095 00020707 00000001 00010407     ................

00024abc <pin_PB2_af>:
   24abc:	00000071 00000303 00000001 00010803     q...............
   24acc:	00000096 00030707 00000000 00010807     ................

00024adc <pin_PB3_af>:
   24adc:	00000072 00000303 00000000 00010c03     r...............
   24aec:	00000097 00030707 00000001 00010c07     ................

00024afc <pin_PC3_af>:
   24afc:	00000079 00ff0801 00000001 00020c01     y...............
   24b0c:	0000009b 00050707 00000001 00020c07     ................

00024b1c <pin_PC2_af>:
   24b1c:	00000078 00ff0801 00000004 00020801     x...............
   24b2c:	0000009a 00050707 00000000 00020807     ................

00024b3c <pin_PC1_af>:
   24b3c:	0000007a 00ff0801 00000005 00020401     z...............
   24b4c:	00000099 00040707 00000001 00020407     ................

00024b5c <pin_PC0_af>:
   24b5c:	00000077 00ff0801 00000003 00020001     w...............
   24b6c:	00000098 00040707 00000000 00020007     ................

00024b7c <pin_PD6_af>:
   24b7c:	0000007b 00000504 00000000 00031804     {...............
   24b8c:	000000b0 00050607 00000000 00031807     ................

00024b9c <pin_PB5_af>:
   24b9c:	00000068 00ff0000 0000000b ffffffff     h...............
   24bac:	0000007f 00000504 00000004 00011404     ................
   24bbc:	00000093 00010707 00000001 00011407     ................

00024bcc <pin_PB4_af>:
   24bcc:	00000067 00ff0000 0000000a ffffffff     g...............
   24bdc:	0000007e 00000504 00000003 00011004     ~...............
   24bec:	00000092 00010707 00000000 00011007     ................

00024bfc <pin_PE4_af>:
   24bfc:	00000070 00ff0000 00000009 ffffffff     p...............
   24c0c:	00000075 00020303 00000001 00041003     u...............
   24c1c:	00000080 00000504 00000005 00041004     ................
   24c2c:	00000087 00010505 00000003 00041005     ................

00024c3c <pin_PE5_af>:
   24c3c:	0000006f 00ff0000 00000008 ffffffff     o...............
   24c4c:	00000081 00000504 00000006 00041404     ................
   24c5c:	00000088 00010505 00000004 00041405     ................

00024c6c <pin_PD0_af>:
   24c6c:	0000006e 00ff0000 00000007 ffffffff     n...............
   24c7c:	00000076 00030303 00000001 00030003     v...............
   24c8c:	00000082 00000504 00000007 00030004     ................
   24c9c:	00000085 00010505 00000001 00030005     ................
   24cac:	000000aa 00020607 00000000 00030007     ................

00024cbc <pin_PD1_af>:
   24cbc:	0000006d 00ff0000 00000006 ffffffff     m...............
   24ccc:	00000083 00000504 00000008 00030404     ................
   24cdc:	00000086 00010505 00000002 00030405     ................
   24cec:	000000ab 00020607 00000001 00030407     ................

00024cfc <pin_PD2_af>:
   24cfc:	0000006c 00ff0000 00000005 ffffffff     l...............
   24d0c:	0000007b 00000504 00000000 00030804     {...............
   24d1c:	000000ac 00030607 00000000 00030807     ................
   24d2c:	000000a2 00000b08 00000000 00030808     ................

00024d3c <pin_PD3_af>:
   24d3c:	0000006b 00ff0000 00000004 ffffffff     k...............
   24d4c:	0000008e 00ff0406 00000004 00030c06     ................
   24d5c:	000000ad 00030607 00000001 00030c07     ................
   24d6c:	000000a4 00000b08 00000001 00030c08     ................

00024d7c <pin_board_pins_locals_dict_table>:
   24d7c:	00000122 20000000 00000126 20000030     "...... &...0.. 
   24d8c:	00000192 20000060 00000176 20000090     ....`.. v...... 
   24d9c:	00000172 200000c0 0000016e 200000f0     r...... n...... 
   24dac:	0000016a 20000120 00000166 20000150     j... .. f...P.. 
   24dbc:	00000146 20000180 00000142 200001b0     F...... B...... 
   24dcc:	0000013e 200001e0 0000013a 20000210     >...... :...... 
   24ddc:	000000ea 20000240 000000ee 20000270     ....@.. ....p.. 
   24dec:	000000f2 200002a0 000000f6 200002d0     ....... ....... 
   24dfc:	000000fa 20000300 000000fe 20000330     ....... ....0.. 
   24e0c:	00000102 20000360 00000106 20000390     ....`.. ....... 
   24e1c:	00000182 200003c0 00000186 200003f0     ....... ....... 
   24e2c:	0000018a 20000420 0000018e 20000450     .... .. ....P.. 
   24e3c:	0000015a 20000480 0000015e 200004b0     Z...... ^...... 
   24e4c:	0000010a 200004e0 0000010e 20000510     ....... ....... 
   24e5c:	00000112 20000540 00000116 20000570     ....@.. ....p.. 
   24e6c:	00000136 200005a0 00000132 200005d0     6...... 2...... 
   24e7c:	0000012e 20000600 0000012a 20000630     ....... *...0.. 
   24e8c:	00000162 20000660 0000011e 20000690     b...`.. ....... 
   24e9c:	0000011a 200006c0 0000017a 200006f0     ....... z...... 
   24eac:	0000017e 20000720 0000014a 20000750     ~... .. J...P.. 
   24ebc:	0000014e 20000780 00000152 200007b0     N...... R...... 
   24ecc:	00000156 200007e0                       V...... 

00024ed4 <pin_board_pins_locals_dict>:
   24ed4:	000217b4 0000015f 0000002b 00024d7c     ...._...+...|M..
   24ee4:	0000000d 00000004 6b6f6f74 20752520     ........took %u 
   24ef4:	000a736d 72747371 20200a3a 6f705f6e     ms..qstr:.  n_po
   24f04:	253d6c6f 20200a75 73715f6e 253d7274     ol=%u.  n_qstr=%
   24f14:	20200a75 74735f6e 61645f72 625f6174     u.  n_str_data_b
   24f24:	73657479 0a75253d 5f6e2020 61746f74     ytes=%u.  n_tota
   24f34:	79625f6c 3d736574 000a7525 20776172     l_bytes=%u..raw 
   24f44:	4c504552 5443203b 422d4c52 206f7420     REPL; CTRL-B to 
   24f54:	74697865 00000a0d 0000003e 00000a0d     exit....>.......
   24f64:	00004b4f 7263694d 7479506f 206e6f68     OK..MicroPython 
   24f74:	392e3176 342d342e 672d3437 66396330     v1.9.4-474-g0c9f
   24f84:	63343131 69642d38 20797472 32206e6f     114c8-dirty on 2
   24f94:	2d383130 302d3231 54203b36 20617669     018-12-06; Tiva 
   24fa4:	6e75614c 50206863 77206461 20687469     Launch Pad with 
   24fb4:	43344d54 47333231 4d504836 00000a0d     TM4C123G6HPM....
   24fc4:	203e3e3e 00000000 61700a0d 20657473     >>> ......paste 
   24fd4:	65646f6d 7443203b 432d6c72 206f7420     mode; Ctrl-C to 
   24fe4:	636e6163 202c6c65 6c727443 7420442d     cancel, Ctrl-D t
   24ff4:	6966206f 6873696e 3d3d0a0d 0000203d     o finish..=== ..
   25004:	3d3d0a0d 0000203d 202e2e2e 00000000     ..=== ..... ....
   25014:	6c756f63 6f6e2064 69662074 6d20646e     could not find m
   25024:	6c75646f 25272065 000a2773              odule '%s'..

00025030 <pyb_set_repl_info_obj>:
   25030:	00022060 0001c531 08080808 00000000     ` ..1...........
   25040:	75255b1b 00000000 004b5b1b 00000a0d     .[%u.....[K.....
   25050:	20202020 00000000 72660dfe 6e657a6f         ......frozen
   25060:	74736574 0079702e 507503f9 00000079     test.py...uPy...
   25070:	006901cc                                ..i.

00025074 <mp_qstr_frozen_const_pool>:
   25074:	0001e8a8 00000177 00000003 00000003     ....w...........
   25084:	00025058 00025068 00025070              XP..hP..pP..

00025090 <bytecode_data_frozentest__lt_module_gt_>:
   25090:	00000003 2f0d0000 2a017700 2b282828     ......./.w.*(((+
   250a0:	ff000028 16014c1b 01640178 014c1b32     (....L..x.d.2.L.
   250b0:	01640017 014c1b32 01640117 014c1b32     ..d.2.L...d.2.L.
   250c0:	01640217 014c1b32 9aefba14 32016415     ..d.2.L......d.2
   250d0:	800f3580 01792430 1b014c1b 01640179     .5..0$y..L..y.d.
   250e0:	30e58132 eb36d784 5b11327f 6f6c2061     2..0..6..2.[a lo
   250f0:	7320676e 6e697274 68742067 69207461     ng string that i
   25100:	6f6e2073 6e692074 6e726574 00006465     s not interned..

00025110 <const_obj_frozentest__lt_module_gt__0>:
   25110:	00023204 000000f6 00000022 000250ec     .2......"....P..
   25120:	74732061 676e6972 61687420 61682074     a string that ha
   25130:	6e752073 646f6369 b1ce2065 b3ceb2ce     s unicode ......
   25140:	61686320 00007372                        chars..

00025148 <const_obj_frozentest__lt_module_gt__1>:
   25148:	00023204 000000c8 00000026 00025120     .2......&... Q..
   25158:	65747962 32312073 00013433              bytes 1234..

00025164 <const_obj_frozentest__lt_module_gt__2>:
   25164:	00023240 00000039 0000000b 00025158     @2..9.......XQ..

00025174 <const_table_data_frozentest__lt_module_gt_>:
   25174:	00025110 00025148 00025164              .Q..HQ..dQ..

00025180 <raw_code_frozentest__lt_module_gt_>:
   25180:	00000002 00025090 00025174 00000000     .....P..tQ......

00025190 <mp_frozen_mpy_names>:
   25190:	7a6f7266 65746e65 702e7473 00000079     frozentest.py...

000251a0 <mp_frozen_mpy_content>:
   251a0:	00025180                                .Q..

000251a4 <g_pui32GPIOBaseAddrs>:
   251a4:	40004000 40058000 40005000 40059000     .@.@...@.P.@...@
   251b4:	40006000 4005a000 40007000 4005b000     .`.@...@.p.@...@
   251c4:	40024000 4005c000 40025000 4005d000     .@.@...@.P.@...@
   251d4:	40026000 4005e000 40027000 4005f000     .`.@...@.p.@...@
   251e4:	4003d000 40060000 40061000 40061000     ...@...@...@...@
   251f4:	40062000 40062000 40063000 40063000     . .@. .@.0.@.0.@
   25204:	40064000 40064000 40065000 40065000     .@.@.@.@.P.@.P.@
   25214:	40066000 40066000 40067000 40067000     .`.@.`.@.p.@.p.@
   25224:	40068000 40068000 40069000 40069000     ...@...@...@...@

00025234 <g_pui32Xtals>:
   25234:	000f4240 001c2000 001e8480 00258000     @B... ........%.
   25244:	00369e99 00384000 003d0900 003e8000     ..6..@8...=...>.
   25254:	004b0000 004c4b40 004e2000 005b8d80     ..K.@KL.. N...[.
   25264:	005dc000 00708000 007a1200 007d0000     ..]...p...z...}.
   25274:	00989680 00b71b00 00bb8000 00cee8c0     ................
   25284:	00da7a64 00f42400 00fa0000 0112a880     dz...$..........
   25294:	01312d00 016e3600 017d7840              .-1..6n.@x}.
