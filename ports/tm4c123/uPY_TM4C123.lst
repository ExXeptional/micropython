
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_text>:
       0:	200012c4 	.word	0x200012c4
       4:	0001b619 	.word	0x0001b619
       8:	0001b67d 	.word	0x0001b67d
       c:	0001b683 	.word	0x0001b683
      10:	0001b689 	.word	0x0001b689
      14:	0001b689 	.word	0x0001b689
      18:	0001b689 	.word	0x0001b689
	...
      2c:	0001b689 	.word	0x0001b689
      30:	0001b689 	.word	0x0001b689
      34:	00000000 	.word	0x00000000
      38:	0001b689 	.word	0x0001b689
      3c:	0001b689 	.word	0x0001b689
      40:	0001b689 	.word	0x0001b689
      44:	0001b689 	.word	0x0001b689
      48:	0001b689 	.word	0x0001b689
      4c:	0001b689 	.word	0x0001b689
      50:	0001b689 	.word	0x0001b689
      54:	0001b689 	.word	0x0001b689
      58:	0001b689 	.word	0x0001b689
      5c:	0001b689 	.word	0x0001b689
      60:	0001b689 	.word	0x0001b689
      64:	0001b689 	.word	0x0001b689
      68:	0001b689 	.word	0x0001b689
      6c:	0001b689 	.word	0x0001b689
      70:	0001b689 	.word	0x0001b689
      74:	0001b689 	.word	0x0001b689
      78:	0001b689 	.word	0x0001b689
      7c:	0001b689 	.word	0x0001b689
      80:	0001b689 	.word	0x0001b689
      84:	0001b689 	.word	0x0001b689
      88:	0001b689 	.word	0x0001b689
      8c:	0001b689 	.word	0x0001b689
      90:	0001b689 	.word	0x0001b689
      94:	0001b689 	.word	0x0001b689
      98:	0001b689 	.word	0x0001b689
      9c:	0001b689 	.word	0x0001b689
      a0:	0001b689 	.word	0x0001b689
      a4:	0001b689 	.word	0x0001b689
      a8:	0001b689 	.word	0x0001b689
      ac:	0001b689 	.word	0x0001b689
      b0:	0001b689 	.word	0x0001b689
      b4:	0001b689 	.word	0x0001b689
      b8:	0001b689 	.word	0x0001b689
      bc:	0001b689 	.word	0x0001b689
      c0:	0001b689 	.word	0x0001b689
      c4:	0001b689 	.word	0x0001b689
      c8:	0001b689 	.word	0x0001b689
      cc:	0001b689 	.word	0x0001b689
      d0:	0001b689 	.word	0x0001b689
      d4:	0001b689 	.word	0x0001b689
      d8:	0001b689 	.word	0x0001b689
      dc:	0001b689 	.word	0x0001b689
      e0:	0001b689 	.word	0x0001b689
	...
      ec:	0001b689 	.word	0x0001b689
      f0:	0001b689 	.word	0x0001b689
      f4:	0001b689 	.word	0x0001b689
      f8:	0001b689 	.word	0x0001b689
      fc:	0001b689 	.word	0x0001b689
     100:	0001b689 	.word	0x0001b689
     104:	0001b689 	.word	0x0001b689
     108:	0001b689 	.word	0x0001b689
     10c:	0001b689 	.word	0x0001b689
	...
     118:	0001b689 	.word	0x0001b689
     11c:	0001b689 	.word	0x0001b689
     120:	0001b689 	.word	0x0001b689
     124:	0001b689 	.word	0x0001b689
     128:	0001b689 	.word	0x0001b689
     12c:	0001b689 	.word	0x0001b689
     130:	0001b689 	.word	0x0001b689
     134:	0001b689 	.word	0x0001b689
     138:	0001b689 	.word	0x0001b689
     13c:	0001b689 	.word	0x0001b689
	...
     150:	0001b689 	.word	0x0001b689
     154:	0001b689 	.word	0x0001b689
     158:	0001b689 	.word	0x0001b689
     15c:	0001b689 	.word	0x0001b689
	...
     1b0:	0001b689 	.word	0x0001b689
     1b4:	0001b689 	.word	0x0001b689
     1b8:	0001b689 	.word	0x0001b689
     1bc:	0001b689 	.word	0x0001b689
     1c0:	0001b689 	.word	0x0001b689
     1c4:	0001b689 	.word	0x0001b689
     1c8:	0001b689 	.word	0x0001b689
     1cc:	0001b689 	.word	0x0001b689
     1d0:	0001b689 	.word	0x0001b689
     1d4:	0001b689 	.word	0x0001b689
     1d8:	0001b689 	.word	0x0001b689
     1dc:	0001b689 	.word	0x0001b689
     1e0:	0001b689 	.word	0x0001b689
     1e4:	0001b689 	.word	0x0001b689
     1e8:	0001b689 	.word	0x0001b689
	...
     1f4:	0001b689 	.word	0x0001b689
     1f8:	0001b689 	.word	0x0001b689
     1fc:	0001b689 	.word	0x0001b689
     200:	0001b689 	.word	0x0001b689
     204:	0001b689 	.word	0x0001b689
	...
     210:	0001b689 	.word	0x0001b689
     214:	0001b689 	.word	0x0001b689
     218:	0001b689 	.word	0x0001b689
     21c:	0001b689 	.word	0x0001b689
     220:	0001b689 	.word	0x0001b689
     224:	0001b689 	.word	0x0001b689
     228:	0001b689 	.word	0x0001b689
     22c:	0001b689 	.word	0x0001b689
     230:	0001b689 	.word	0x0001b689
     234:	0001b689 	.word	0x0001b689
     238:	0001b689 	.word	0x0001b689
     23c:	0001b689 	.word	0x0001b689
     240:	0001b689 	.word	0x0001b689
     244:	0001b689 	.word	0x0001b689
     248:	0001b689 	.word	0x0001b689
     24c:	0001b689 	.word	0x0001b689
     250:	0001b689 	.word	0x0001b689
     254:	0001b689 	.word	0x0001b689
     258:	0001b689 	.word	0x0001b689
     25c:	0001b689 	.word	0x0001b689
     260:	0001b689 	.word	0x0001b689
     264:	0001b689 	.word	0x0001b689
     268:	0001b689 	.word	0x0001b689

0000026c <nlr_push_tail>:
// LTO can't see inside inline asm functions so explicitly mark nlr_push_tail as used
__attribute__((used)) unsigned int nlr_push_tail(nlr_buf_t *nlr);
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
     26c:	b480      	push	{r7}
     26e:	b085      	sub	sp, #20
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <nlr_push_tail+0x28>)
     276:	60fb      	str	r3, [r7, #12]
    nlr->prev = *top;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	601a      	str	r2, [r3, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	687a      	ldr	r2, [r7, #4]
     284:	601a      	str	r2, [r3, #0]
    return 0; // normal return
     286:	2300      	movs	r3, #0
}
     288:	4618      	mov	r0, r3
     28a:	3714      	adds	r7, #20
     28c:	46bd      	mov	sp, r7
     28e:	f85d 7b04 	ldr.w	r7, [sp], #4
     292:	4770      	bx	lr
     294:	200012fc 	.word	0x200012fc

00000298 <nlr_pop>:

void nlr_pop(void) {
     298:	b480      	push	{r7}
     29a:	b083      	sub	sp, #12
     29c:	af00      	add	r7, sp, #0
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <nlr_pop+0x20>)
     2a0:	607b      	str	r3, [r7, #4]
    *top = (*top)->prev;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	601a      	str	r2, [r3, #0]
}
     2ac:	bf00      	nop
     2ae:	370c      	adds	r7, #12
     2b0:	46bd      	mov	sp, r7
     2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2b6:	4770      	bx	lr
     2b8:	200012fc 	.word	0x200012fc

000002bc <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     2bc:	60c4      	str	r4, [r0, #12]
     2be:	6105      	str	r5, [r0, #16]
     2c0:	6146      	str	r6, [r0, #20]
     2c2:	6187      	str	r7, [r0, #24]
     2c4:	f8c0 801c 	str.w	r8, [r0, #28]
     2c8:	f8c0 9020 	str.w	r9, [r0, #32]
     2cc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     2d0:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     2d4:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     2d8:	f8c0 e008 	str.w	lr, [r0, #8]
     2dc:	f7ff bfc6 	b.w	26c <nlr_push_tail>

000002e0 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     2e0:	4a0d      	ldr	r2, [pc, #52]	; (318 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     2e2:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     2e4:	68d3      	ldr	r3, [r2, #12]
     2e6:	b90b      	cbnz	r3, 2ec <nlr_jump+0xc>
     2e8:	f01b f8c0 	bl	1b46c <nlr_jump_fail>
     2ec:	6819      	ldr	r1, [r3, #0]
     2ee:	6058      	str	r0, [r3, #4]
     2f0:	60d1      	str	r1, [r2, #12]

    __asm volatile (
     2f2:	4618      	mov	r0, r3
     2f4:	68c4      	ldr	r4, [r0, #12]
     2f6:	6905      	ldr	r5, [r0, #16]
     2f8:	6946      	ldr	r6, [r0, #20]
     2fa:	6987      	ldr	r7, [r0, #24]
     2fc:	f8d0 801c 	ldr.w	r8, [r0, #28]
     300:	f8d0 9020 	ldr.w	r9, [r0, #32]
     304:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     308:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     30c:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     310:	f8d0 e008 	ldr.w	lr, [r0, #8]
     314:	2001      	movs	r0, #1
     316:	4770      	bx	lr
     318:	200012f0 	.word	0x200012f0

0000031c <m_malloc>:
    }
}

#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     324:	2100      	movs	r1, #0
     326:	6878      	ldr	r0, [r7, #4]
     328:	f000 fac8 	bl	8bc <gc_alloc>
     32c:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	2b00      	cmp	r3, #0
     332:	d105      	bne.n	340 <m_malloc+0x24>
     334:	687b      	ldr	r3, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d002      	beq.n	340 <m_malloc+0x24>
        m_malloc_fail(num_bytes);
     33a:	6878      	ldr	r0, [r7, #4]
     33c:	f00c fd55 	bl	cdea <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     340:	68fb      	ldr	r3, [r7, #12]
}
     342:	4618      	mov	r0, r3
     344:	3710      	adds	r7, #16
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}

0000034a <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     34a:	b580      	push	{r7, lr}
     34c:	b084      	sub	sp, #16
     34e:	af00      	add	r7, sp, #0
     350:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     352:	2100      	movs	r1, #0
     354:	6878      	ldr	r0, [r7, #4]
     356:	f000 fab1 	bl	8bc <gc_alloc>
     35a:	60f8      	str	r0, [r7, #12]
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     35c:	68fb      	ldr	r3, [r7, #12]
}
     35e:	4618      	mov	r0, r3
     360:	3710      	adds	r7, #16
     362:	46bd      	mov	sp, r7
     364:	bd80      	pop	{r7, pc}

00000366 <m_malloc0>:
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
#endif

void *m_malloc0(size_t num_bytes) {
     366:	b580      	push	{r7, lr}
     368:	b084      	sub	sp, #16
     36a:	af00      	add	r7, sp, #0
     36c:	6078      	str	r0, [r7, #4]
    void *ptr = m_malloc(num_bytes);
     36e:	6878      	ldr	r0, [r7, #4]
     370:	f7ff ffd4 	bl	31c <m_malloc>
     374:	60f8      	str	r0, [r7, #12]
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
     376:	68fb      	ldr	r3, [r7, #12]
}
     378:	4618      	mov	r0, r3
     37a:	3710      	adds	r7, #16
     37c:	46bd      	mov	sp, r7
     37e:	bd80      	pop	{r7, pc}

00000380 <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     380:	b580      	push	{r7, lr}
     382:	b084      	sub	sp, #16
     384:	af00      	add	r7, sp, #0
     386:	6078      	str	r0, [r7, #4]
     388:	6039      	str	r1, [r7, #0]
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     38a:	2201      	movs	r2, #1
     38c:	6839      	ldr	r1, [r7, #0]
     38e:	6878      	ldr	r0, [r7, #4]
     390:	f000 fb98 	bl	ac4 <gc_realloc>
     394:	60f8      	str	r0, [r7, #12]
    if (new_ptr == NULL && new_num_bytes != 0) {
     396:	68fb      	ldr	r3, [r7, #12]
     398:	2b00      	cmp	r3, #0
     39a:	d105      	bne.n	3a8 <m_realloc+0x28>
     39c:	683b      	ldr	r3, [r7, #0]
     39e:	2b00      	cmp	r3, #0
     3a0:	d002      	beq.n	3a8 <m_realloc+0x28>
        m_malloc_fail(new_num_bytes);
     3a2:	6838      	ldr	r0, [r7, #0]
     3a4:	f00c fd21 	bl	cdea <m_malloc_fail>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3a8:	68fb      	ldr	r3, [r7, #12]
}
     3aa:	4618      	mov	r0, r3
     3ac:	3710      	adds	r7, #16
     3ae:	46bd      	mov	sp, r7
     3b0:	bd80      	pop	{r7, pc}

000003b2 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     3b2:	b580      	push	{r7, lr}
     3b4:	b086      	sub	sp, #24
     3b6:	af00      	add	r7, sp, #0
     3b8:	60f8      	str	r0, [r7, #12]
     3ba:	60b9      	str	r1, [r7, #8]
     3bc:	4613      	mov	r3, r2
     3be:	71fb      	strb	r3, [r7, #7]
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     3c0:	79fb      	ldrb	r3, [r7, #7]
     3c2:	461a      	mov	r2, r3
     3c4:	68b9      	ldr	r1, [r7, #8]
     3c6:	68f8      	ldr	r0, [r7, #12]
     3c8:	f000 fb7c 	bl	ac4 <gc_realloc>
     3cc:	6178      	str	r0, [r7, #20]
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3ce:	697b      	ldr	r3, [r7, #20]
}
     3d0:	4618      	mov	r0, r3
     3d2:	3718      	adds	r7, #24
     3d4:	46bd      	mov	sp, r7
     3d6:	bd80      	pop	{r7, pc}

000003d8 <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     3d8:	b580      	push	{r7, lr}
     3da:	b082      	sub	sp, #8
     3dc:	af00      	add	r7, sp, #0
     3de:	6078      	str	r0, [r7, #4]
#endif
    free(ptr);
     3e0:	6878      	ldr	r0, [r7, #4]
     3e2:	f000 fb2f 	bl	a44 <gc_free>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
    #endif
}
     3e6:	bf00      	nop
     3e8:	3708      	adds	r7, #8
     3ea:	46bd      	mov	sp, r7
     3ec:	bd80      	pop	{r7, pc}
	...

000003f0 <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     3f4:	4c2a      	ldr	r4, [pc, #168]	; (4a0 <gc_mark_subtree+0xb0>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     3f6:	2500      	movs	r5, #0
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
                    // an unmarked head, mark it, and push it on gc stack
                    TRACE_MARK(childblock, ptr);
                    ATB_HEAD_TO_MARK(childblock);
     3f8:	f04f 0903 	mov.w	r9, #3
     3fc:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
        size_t n_blocks = 0;
     400:	2100      	movs	r1, #0
            n_blocks += 1;
     402:	3101      	adds	r1, #1
     404:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     406:	089a      	lsrs	r2, r3, #2
     408:	f003 0303 	and.w	r3, r3, #3
     40c:	5cba      	ldrb	r2, [r7, r2]
     40e:	005b      	lsls	r3, r3, #1
     410:	fa42 f303 	asr.w	r3, r2, r3
     414:	f003 0303 	and.w	r3, r3, #3
     418:	2b02      	cmp	r3, #2
     41a:	d0f2      	beq.n	402 <gc_mark_subtree+0x12>
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     41c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     420:	0109      	lsls	r1, r1, #4
     422:	088a      	lsrs	r2, r1, #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     424:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     428:	b309      	cbz	r1, 46e <gc_mark_subtree+0x7e>
     42a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
            void *ptr = *ptrs;
     42e:	f850 3b04 	ldr.w	r3, [r0], #4
            if (VERIFY_PTR(ptr)) {
     432:	071a      	lsls	r2, r3, #28
     434:	d119      	bne.n	46a <gc_mark_subtree+0x7a>
     436:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
     43a:	4293      	cmp	r3, r2
     43c:	d315      	bcc.n	46a <gc_mark_subtree+0x7a>
                size_t childblock = BLOCK_FROM_PTR(ptr);
     43e:	1a9a      	subs	r2, r3, r2
            if (VERIFY_PTR(ptr)) {
     440:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     444:	ea4f 1e92 	mov.w	lr, r2, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     448:	0912      	lsrs	r2, r2, #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     44a:	f002 0703 	and.w	r7, r2, #3
            if (VERIFY_PTR(ptr)) {
     44e:	42b3      	cmp	r3, r6
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     450:	ea4f 0747 	mov.w	r7, r7, lsl #1
            if (VERIFY_PTR(ptr)) {
     454:	d209      	bcs.n	46a <gc_mark_subtree+0x7a>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     456:	f8d4 c0b4 	ldr.w	ip, [r4, #180]	; 0xb4
     45a:	f81c 800e 	ldrb.w	r8, [ip, lr]
     45e:	fa48 f307 	asr.w	r3, r8, r7
     462:	f003 0303 	and.w	r3, r3, #3
     466:	2b01      	cmp	r3, #1
     468:	d008      	beq.n	47c <gc_mark_subtree+0x8c>
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     46a:	4281      	cmp	r1, r0
     46c:	d1df      	bne.n	42e <gc_mark_subtree+0x3e>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     46e:	b1ad      	cbz	r5, 49c <gc_mark_subtree+0xac>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     470:	3d01      	subs	r5, #1
     472:	eb04 0385 	add.w	r3, r4, r5, lsl #2
     476:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
    for (;;) {
     47a:	e7bf      	b.n	3fc <gc_mark_subtree+0xc>
                    ATB_HEAD_TO_MARK(childblock);
     47c:	fa09 f707 	lsl.w	r7, r9, r7
     480:	ea47 0708 	orr.w	r7, r7, r8
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     484:	eb04 0885 	add.w	r8, r4, r5, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     488:	2d3f      	cmp	r5, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     48a:	f80c 700e 	strb.w	r7, [ip, lr]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     48e:	bf9a      	itte	ls
     490:	3501      	addls	r5, #1
     492:	f8c8 20c8 	strls.w	r2, [r8, #200]	; 0xc8
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     496:	f8c4 30c4 	strhi.w	r3, [r4, #196]	; 0xc4
     49a:	e7e6      	b.n	46a <gc_mark_subtree+0x7a>
     49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     4a0:	200012f0 	.word	0x200012f0

000004a4 <gc_free.part.0>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (ptr == NULL) {
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     4a6:	0703      	lsls	r3, r0, #28
     4a8:	d134      	bne.n	514 <gc_free.part.0+0x70>
     4aa:	4e21      	ldr	r6, [pc, #132]	; (530 <gc_free.part.0+0x8c>)
     4ac:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
     4b0:	4298      	cmp	r0, r3
     4b2:	d32f      	bcc.n	514 <gc_free.part.0+0x70>
     4b4:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
     4b8:	4290      	cmp	r0, r2
     4ba:	d22b      	bcs.n	514 <gc_free.part.0+0x70>
        size_t block = BLOCK_FROM_PTR(ptr);
     4bc:	1ac0      	subs	r0, r0, r3
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4be:	0981      	lsrs	r1, r0, #6
     4c0:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
        size_t block = BLOCK_FROM_PTR(ptr);
     4c4:	0900      	lsrs	r0, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4c6:	f000 0303 	and.w	r3, r0, #3
     4ca:	5c7a      	ldrb	r2, [r7, r1]
     4cc:	005c      	lsls	r4, r3, #1
     4ce:	4122      	asrs	r2, r4
     4d0:	f002 0203 	and.w	r2, r2, #3
     4d4:	2a01      	cmp	r2, #1
     4d6:	d124      	bne.n	522 <gc_free.part.0+0x7e>
        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     4d8:	f8d6 21d4 	ldr.w	r2, [r6, #468]	; 0x1d4
     4dc:	4291      	cmp	r1, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     4de:	bf38      	it	cc
     4e0:	f8c6 11d4 	strcc.w	r1, [r6, #468]	; 0x1d4
     4e4:	5c79      	ldrb	r1, [r7, r1]
     4e6:	0884      	lsrs	r4, r0, #2
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     4e8:	2503      	movs	r5, #3
     4ea:	005b      	lsls	r3, r3, #1
     4ec:	fa05 f303 	lsl.w	r3, r5, r3
     4f0:	ea21 0103 	bic.w	r1, r1, r3
     4f4:	5539      	strb	r1, [r7, r4]
            block += 1;
     4f6:	3001      	adds	r0, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     4f8:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
     4fc:	0884      	lsrs	r4, r0, #2
     4fe:	f000 0303 	and.w	r3, r0, #3
     502:	5d39      	ldrb	r1, [r7, r4]
     504:	005a      	lsls	r2, r3, #1
     506:	fa41 f202 	asr.w	r2, r1, r2
     50a:	f002 0203 	and.w	r2, r2, #3
     50e:	2a02      	cmp	r2, #2
     510:	d0eb      	beq.n	4ea <gc_free.part.0+0x46>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif
    }
}
     512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     514:	4b07      	ldr	r3, [pc, #28]	; (534 <gc_free.part.0+0x90>)
     516:	4a08      	ldr	r2, [pc, #32]	; (538 <gc_free.part.0+0x94>)
     518:	4808      	ldr	r0, [pc, #32]	; (53c <gc_free.part.0+0x98>)
     51a:	f44f 7112 	mov.w	r1, #584	; 0x248
     51e:	f01a ffaf 	bl	1b480 <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     522:	4b07      	ldr	r3, [pc, #28]	; (540 <gc_free.part.0+0x9c>)
     524:	4a04      	ldr	r2, [pc, #16]	; (538 <gc_free.part.0+0x94>)
     526:	4805      	ldr	r0, [pc, #20]	; (53c <gc_free.part.0+0x98>)
     528:	f240 214a 	movw	r1, #586	; 0x24a
     52c:	f01a ffa8 	bl	1b480 <__assert_func>
     530:	200012f0 	.word	0x200012f0
     534:	0001dc80 	.word	0x0001dc80
     538:	0001dc6c 	.word	0x0001dc6c
     53c:	0001dc90 	.word	0x0001dc90
     540:	0001dca0 	.word	0x0001dca0

00000544 <gc_init>:
void gc_init(void *start, void *end) {
     544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     546:	4a12      	ldr	r2, [pc, #72]	; (590 <gc_init+0x4c>)
     548:	4c12      	ldr	r4, [pc, #72]	; (594 <gc_init+0x50>)
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     54a:	f021 050f 	bic.w	r5, r1, #15
    size_t total_byte_len = (byte*)end - (byte*)start;
     54e:	1a2b      	subs	r3, r5, r0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     550:	fba2 2303 	umull	r2, r3, r2, r3
     554:	099b      	lsrs	r3, r3, #6
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     556:	eba5 1783 	sub.w	r7, r5, r3, lsl #6
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     55a:	461a      	mov	r2, r3
     55c:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     55e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     562:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    MP_STATE_MEM(gc_pool_end) = end;
     566:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     56a:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     56e:	f01c fb4d 	bl	1cc0c <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     572:	2300      	movs	r3, #0
    MP_STATE_MEM(gc_lock_depth) = 0;
     574:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    MP_STATE_MEM(gc_lock_depth) = 0;
     57c:	f8c4 11c8 	str.w	r1, [r4, #456]	; 0x1c8
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     580:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     584:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
    MP_STATE_MEM(gc_alloc_amount) = 0;
     588:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
     58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     58e:	bf00      	nop
     590:	fc0fc0fd 	.word	0xfc0fc0fd
     594:	200012f0 	.word	0x200012f0

00000598 <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     598:	4a03      	ldr	r2, [pc, #12]	; (5a8 <gc_lock+0x10>)
     59a:	f8b2 31c8 	ldrh.w	r3, [r2, #456]	; 0x1c8
     59e:	3301      	adds	r3, #1
     5a0:	f8a2 31c8 	strh.w	r3, [r2, #456]	; 0x1c8
     5a4:	4770      	bx	lr
     5a6:	bf00      	nop
     5a8:	200012f0 	.word	0x200012f0

000005ac <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     5ac:	4a03      	ldr	r2, [pc, #12]	; (5bc <gc_unlock+0x10>)
     5ae:	f8b2 31c8 	ldrh.w	r3, [r2, #456]	; 0x1c8
     5b2:	3b01      	subs	r3, #1
     5b4:	f8a2 31c8 	strh.w	r3, [r2, #456]	; 0x1c8
     5b8:	4770      	bx	lr
     5ba:	bf00      	nop
     5bc:	200012f0 	.word	0x200012f0

000005c0 <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     5c0:	4b03      	ldr	r3, [pc, #12]	; (5d0 <gc_is_locked+0x10>)
     5c2:	f8b3 01c8 	ldrh.w	r0, [r3, #456]	; 0x1c8
}
     5c6:	3000      	adds	r0, #0
     5c8:	bf18      	it	ne
     5ca:	2001      	movne	r0, #1
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop
     5d0:	200012f0 	.word	0x200012f0

000005d4 <gc_collect_start>:
void gc_collect_start(void) {
     5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_lock_depth)++;
     5d6:	4b1d      	ldr	r3, [pc, #116]	; (64c <gc_collect_start+0x78>)
     5d8:	f8b3 21c8 	ldrh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_alloc_amount) = 0;
     5dc:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     5de:	3201      	adds	r2, #1
     5e0:	461d      	mov	r5, r3
     5e2:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
     5e6:	461c      	mov	r4, r3
     5e8:	f103 06a0 	add.w	r6, r3, #160	; 0xa0
    MP_STATE_MEM(gc_alloc_amount) = 0;
     5ec:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5f0:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
                ATB_HEAD_TO_MARK(block);
     5f4:	2703      	movs	r7, #3
        void *ptr = ptrs[i];
     5f6:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     5fa:	071a      	lsls	r2, r3, #28
     5fc:	d119      	bne.n	632 <gc_collect_start+0x5e>
     5fe:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
     602:	4283      	cmp	r3, r0
     604:	d315      	bcc.n	632 <gc_collect_start+0x5e>
            size_t block = BLOCK_FROM_PTR(ptr);
     606:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     608:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
            if (ATB_GET_KIND(block) == AT_HEAD) {
     60c:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     610:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     612:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     616:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     618:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     61c:	d209      	bcs.n	632 <gc_collect_start+0x5e>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     61e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
     622:	f811 c00e 	ldrb.w	ip, [r1, lr]
     626:	fa4c f302 	asr.w	r3, ip, r2
     62a:	f003 0303 	and.w	r3, r3, #3
     62e:	2b01      	cmp	r3, #1
     630:	d002      	beq.n	638 <gc_collect_start+0x64>
    for (size_t i = 0; i < len; i++) {
     632:	42a6      	cmp	r6, r4
     634:	d1df      	bne.n	5f6 <gc_collect_start+0x22>
}
     636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                ATB_HEAD_TO_MARK(block);
     638:	fa07 f202 	lsl.w	r2, r7, r2
     63c:	ea42 030c 	orr.w	r3, r2, ip
     640:	f801 300e 	strb.w	r3, [r1, lr]
                gc_mark_subtree(block);
     644:	f7ff fed4 	bl	3f0 <gc_mark_subtree>
     648:	e7f3      	b.n	632 <gc_collect_start+0x5e>
     64a:	bf00      	nop
     64c:	200012f0 	.word	0x200012f0

00000650 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     650:	b3a1      	cbz	r1, 6bc <gc_collect_root+0x6c>
void gc_collect_root(void **ptrs, size_t len) {
     652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (VERIFY_PTR(ptr)) {
     656:	4f1a      	ldr	r7, [pc, #104]	; (6c0 <gc_collect_root+0x70>)
     658:	460e      	mov	r6, r1
     65a:	1f05      	subs	r5, r0, #4
    for (size_t i = 0; i < len; i++) {
     65c:	2400      	movs	r4, #0
                ATB_HEAD_TO_MARK(block);
     65e:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     662:	f855 3f04 	ldr.w	r3, [r5, #4]!
        if (VERIFY_PTR(ptr)) {
     666:	071a      	lsls	r2, r3, #28
    for (size_t i = 0; i < len; i++) {
     668:	f104 0401 	add.w	r4, r4, #1
        if (VERIFY_PTR(ptr)) {
     66c:	d119      	bne.n	6a2 <gc_collect_root+0x52>
     66e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
     672:	4283      	cmp	r3, r0
     674:	d315      	bcc.n	6a2 <gc_collect_root+0x52>
            size_t block = BLOCK_FROM_PTR(ptr);
     676:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     678:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
            if (ATB_GET_KIND(block) == AT_HEAD) {
     67c:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     680:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     682:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     686:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     688:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     68c:	d209      	bcs.n	6a2 <gc_collect_root+0x52>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     68e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
     692:	f811 c00e 	ldrb.w	ip, [r1, lr]
     696:	fa4c f302 	asr.w	r3, ip, r2
     69a:	f003 0303 	and.w	r3, r3, #3
     69e:	2b01      	cmp	r3, #1
     6a0:	d003      	beq.n	6aa <gc_collect_root+0x5a>
    for (size_t i = 0; i < len; i++) {
     6a2:	42a6      	cmp	r6, r4
     6a4:	d1dd      	bne.n	662 <gc_collect_root+0x12>
     6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     6aa:	fa08 f202 	lsl.w	r2, r8, r2
     6ae:	ea42 030c 	orr.w	r3, r2, ip
     6b2:	f801 300e 	strb.w	r3, [r1, lr]
                gc_mark_subtree(block);
     6b6:	f7ff fe9b 	bl	3f0 <gc_mark_subtree>
     6ba:	e7f2      	b.n	6a2 <gc_collect_root+0x52>
     6bc:	4770      	bx	lr
     6be:	bf00      	nop
     6c0:	200012f0 	.word	0x200012f0

000006c4 <gc_collect_end>:
void gc_collect_end(void) {
     6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6c8:	4e35      	ldr	r6, [pc, #212]	; (7a0 <gc_collect_end+0xdc>)
     6ca:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
     6ce:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
     6d2:	0080      	lsls	r0, r0, #2
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6d4:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     6d6:	b313      	cbz	r3, 71e <gc_collect_end+0x5a>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6d8:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     6dc:	2800      	cmp	r0, #0
     6de:	d04a      	beq.n	776 <gc_collect_end+0xb2>
     6e0:	2400      	movs	r4, #0
     6e2:	e002      	b.n	6ea <gc_collect_end+0x26>
     6e4:	3401      	adds	r4, #1
     6e6:	4284      	cmp	r4, r0
     6e8:	d215      	bcs.n	716 <gc_collect_end+0x52>
            if (ATB_GET_KIND(block) == AT_MARK) {
     6ea:	08a2      	lsrs	r2, r4, #2
     6ec:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
     6f0:	f004 0303 	and.w	r3, r4, #3
     6f4:	5c8a      	ldrb	r2, [r1, r2]
     6f6:	005b      	lsls	r3, r3, #1
     6f8:	fa42 f303 	asr.w	r3, r2, r3
     6fc:	f003 0303 	and.w	r3, r3, #3
     700:	2b03      	cmp	r3, #3
     702:	d1ef      	bne.n	6e4 <gc_collect_end+0x20>
                gc_mark_subtree(block);
     704:	4620      	mov	r0, r4
     706:	f7ff fe73 	bl	3f0 <gc_mark_subtree>
     70a:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     70e:	3401      	adds	r4, #1
     710:	0080      	lsls	r0, r0, #2
     712:	4284      	cmp	r4, r0
     714:	d3e9      	bcc.n	6ea <gc_collect_end+0x26>
     716:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
    while (MP_STATE_MEM(gc_stack_overflow)) {
     71a:	2b00      	cmp	r3, #0
     71c:	d1dc      	bne.n	6d8 <gc_collect_end+0x14>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     71e:	b350      	cbz	r0, 776 <gc_collect_end+0xb2>
     720:	4698      	mov	r8, r3
     722:	4619      	mov	r1, r3
                    ATB_ANY_TO_FREE(block);
     724:	f04f 0e03 	mov.w	lr, #3
                ATB_MARK_TO_HEAD(block);
     728:	2702      	movs	r7, #2
     72a:	e006      	b.n	73a <gc_collect_end+0x76>
        switch (ATB_GET_KIND(block)) {
     72c:	2a03      	cmp	r2, #3
     72e:	d02c      	beq.n	78a <gc_collect_end+0xc6>
     730:	2a01      	cmp	r2, #1
     732:	d013      	beq.n	75c <gc_collect_end+0x98>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     734:	3101      	adds	r1, #1
     736:	4281      	cmp	r1, r0
     738:	d21d      	bcs.n	776 <gc_collect_end+0xb2>
        switch (ATB_GET_KIND(block)) {
     73a:	088c      	lsrs	r4, r1, #2
     73c:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
     740:	f001 0303 	and.w	r3, r1, #3
     744:	f815 c004 	ldrb.w	ip, [r5, r4]
     748:	005b      	lsls	r3, r3, #1
     74a:	fa4c f203 	asr.w	r2, ip, r3
     74e:	f002 0203 	and.w	r2, r2, #3
     752:	2a02      	cmp	r2, #2
     754:	d1ea      	bne.n	72c <gc_collect_end+0x68>
                if (free_tail) {
     756:	f1b8 0f00 	cmp.w	r8, #0
     75a:	d0eb      	beq.n	734 <gc_collect_end+0x70>
                    ATB_ANY_TO_FREE(block);
     75c:	fa0e f303 	lsl.w	r3, lr, r3
     760:	ea2c 0303 	bic.w	r3, ip, r3
     764:	552b      	strb	r3, [r5, r4]
     766:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     76a:	3101      	adds	r1, #1
     76c:	0080      	lsls	r0, r0, #2
     76e:	4281      	cmp	r1, r0
                    ATB_ANY_TO_FREE(block);
     770:	f04f 0801 	mov.w	r8, #1
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     774:	d3e1      	bcc.n	73a <gc_collect_end+0x76>
    MP_STATE_MEM(gc_lock_depth)--;
     776:	f8b6 31c8 	ldrh.w	r3, [r6, #456]	; 0x1c8
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     77a:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     77c:	3b01      	subs	r3, #1
     77e:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     782:	f8c6 21d4 	str.w	r2, [r6, #468]	; 0x1d4
}
     786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_MARK_TO_HEAD(block);
     78a:	fa07 f303 	lsl.w	r3, r7, r3
     78e:	ea2c 0303 	bic.w	r3, ip, r3
     792:	552b      	strb	r3, [r5, r4]
     794:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
                free_tail = 0;
     798:	f04f 0800 	mov.w	r8, #0
     79c:	0080      	lsls	r0, r0, #2
     79e:	e7c9      	b.n	734 <gc_collect_end+0x70>
     7a0:	200012f0 	.word	0x200012f0

000007a4 <gc_sweep_all>:
    MP_STATE_MEM(gc_lock_depth)++;
     7a4:	4b05      	ldr	r3, [pc, #20]	; (7bc <gc_sweep_all+0x18>)
     7a6:	f8b3 21c8 	ldrh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_stack_overflow) = 0;
     7aa:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     7ac:	3201      	adds	r2, #1
     7ae:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
    MP_STATE_MEM(gc_stack_overflow) = 0;
     7b2:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    gc_collect_end();
     7b6:	f7ff bf85 	b.w	6c4 <gc_collect_end>
     7ba:	bf00      	nop
     7bc:	200012f0 	.word	0x200012f0

000007c0 <gc_info>:
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7c0:	4b3d      	ldr	r3, [pc, #244]	; (8b8 <gc_info+0xf8>)
     7c2:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
     7c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
void gc_info(gc_info_t *info) {
     7ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7ce:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
     7d2:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7d6:	1a52      	subs	r2, r2, r1
    info->used = 0;
     7d8:	2300      	movs	r3, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7da:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7dc:	461d      	mov	r5, r3
     7de:	00b6      	lsls	r6, r6, #2
    info->used = 0;
     7e0:	6043      	str	r3, [r0, #4]
    info->free = 0;
     7e2:	6083      	str	r3, [r0, #8]
    info->max_free = 0;
     7e4:	60c3      	str	r3, [r0, #12]
    info->num_1block = 0;
     7e6:	6103      	str	r3, [r0, #16]
    info->num_2block = 0;
     7e8:	6143      	str	r3, [r0, #20]
    info->max_block = 0;
     7ea:	6183      	str	r3, [r0, #24]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7ec:	469c      	mov	ip, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     7ee:	469e      	mov	lr, r3
     7f0:	461c      	mov	r4, r3
     7f2:	461a      	mov	r2, r3
     7f4:	4699      	mov	r9, r3
     7f6:	4619      	mov	r1, r3
     7f8:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     7fa:	f817 3009 	ldrb.w	r3, [r7, r9]
     7fe:	0049      	lsls	r1, r1, #1
     800:	410b      	asrs	r3, r1
     802:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     806:	2b01      	cmp	r3, #1
     808:	d030      	beq.n	86c <gc_info+0xac>
     80a:	d327      	bcc.n	85c <gc_info+0x9c>
     80c:	2b02      	cmp	r3, #2
     80e:	d102      	bne.n	816 <gc_info+0x56>
                info->used += 1;
     810:	3501      	adds	r5, #1
     812:	6045      	str	r5, [r0, #4]
                len += 1;
     814:	3401      	adds	r4, #1
        block++;
     816:	3201      	adds	r2, #1
        if (!finish) {
     818:	42b2      	cmp	r2, r6
     81a:	d00e      	beq.n	83a <gc_info+0x7a>
            kind = ATB_GET_KIND(block);
     81c:	ea4f 0992 	mov.w	r9, r2, lsr #2
     820:	f002 0103 	and.w	r1, r2, #3
     824:	f817 3009 	ldrb.w	r3, [r7, r9]
     828:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     82c:	fa43 f30a 	asr.w	r3, r3, sl
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     830:	f013 0303 	ands.w	r3, r3, #3
     834:	d001      	beq.n	83a <gc_info+0x7a>
     836:	2b01      	cmp	r3, #1
     838:	d1df      	bne.n	7fa <gc_info+0x3a>
            if (len == 1) {
     83a:	2c01      	cmp	r4, #1
     83c:	d01a      	beq.n	874 <gc_info+0xb4>
            } else if (len == 2) {
     83e:	2c02      	cmp	r4, #2
     840:	d02b      	beq.n	89a <gc_info+0xda>
            if (len > info->max_block) {
     842:	6981      	ldr	r1, [r0, #24]
     844:	428c      	cmp	r4, r1
                info->max_block = len;
     846:	bf88      	it	hi
     848:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     84a:	42b2      	cmp	r2, r6
     84c:	d01b      	beq.n	886 <gc_info+0xc6>
     84e:	2b01      	cmp	r3, #1
     850:	d027      	beq.n	8a2 <gc_info+0xe2>
     852:	ea4f 0992 	mov.w	r9, r2, lsr #2
     856:	f002 0103 	and.w	r1, r2, #3
     85a:	e7ce      	b.n	7fa <gc_info+0x3a>
                info->free += 1;
     85c:	f10c 0c01 	add.w	ip, ip, #1
     860:	f8c0 c008 	str.w	ip, [r0, #8]
                len_free += 1;
     864:	f10e 0e01 	add.w	lr, lr, #1
                len = 0;
     868:	461c      	mov	r4, r3
                break;
     86a:	e7d4      	b.n	816 <gc_info+0x56>
                info->used += 1;
     86c:	3501      	adds	r5, #1
     86e:	6045      	str	r5, [r0, #4]
                len = 1;
     870:	461c      	mov	r4, r3
                break;
     872:	e7d0      	b.n	816 <gc_info+0x56>
                info->num_1block += 1;
     874:	6901      	ldr	r1, [r0, #16]
     876:	3101      	adds	r1, #1
     878:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     87a:	6981      	ldr	r1, [r0, #24]
     87c:	428c      	cmp	r4, r1
                info->max_block = len;
     87e:	bf88      	it	hi
     880:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     882:	42b2      	cmp	r2, r6
     884:	d1e3      	bne.n	84e <gc_info+0x8e>
                if (len_free > info->max_free) {
     886:	45c6      	cmp	lr, r8
     888:	d90e      	bls.n	8a8 <gc_info+0xe8>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     88a:	42b2      	cmp	r2, r6
                    info->max_free = len_free;
     88c:	f8c0 e00c 	str.w	lr, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     890:	d00a      	beq.n	8a8 <gc_info+0xe8>
     892:	46f0      	mov	r8, lr
                len_free = 0;
     894:	f04f 0e00 	mov.w	lr, #0
     898:	e7db      	b.n	852 <gc_info+0x92>
                info->num_2block += 1;
     89a:	6941      	ldr	r1, [r0, #20]
     89c:	3101      	adds	r1, #1
     89e:	6141      	str	r1, [r0, #20]
     8a0:	e7cf      	b.n	842 <gc_info+0x82>
                if (len_free > info->max_free) {
     8a2:	45f0      	cmp	r8, lr
     8a4:	d2f6      	bcs.n	894 <gc_info+0xd4>
     8a6:	e7f0      	b.n	88a <gc_info+0xca>
    info->used *= BYTES_PER_BLOCK;
     8a8:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     8aa:	ea4f 130c 	mov.w	r3, ip, lsl #4
    info->used *= BYTES_PER_BLOCK;
     8ae:	6045      	str	r5, [r0, #4]
    info->free *= BYTES_PER_BLOCK;
     8b0:	6083      	str	r3, [r0, #8]
}
     8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8b6:	bf00      	nop
     8b8:	200012f0 	.word	0x200012f0

000008bc <gc_alloc>:
    size_t n_blocks = ((n_bytes + BYTES_PER_BLOCK - 1) & (~(BYTES_PER_BLOCK - 1))) / BYTES_PER_BLOCK;
     8bc:	300f      	adds	r0, #15
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (n_blocks == 0) {
     8c2:	0905      	lsrs	r5, r0, #4
     8c4:	d059      	beq.n	97a <gc_alloc+0xbe>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     8c6:	4c5e      	ldr	r4, [pc, #376]	; (a40 <gc_alloc+0x184>)
     8c8:	f8b4 31c8 	ldrh.w	r3, [r4, #456]	; 0x1c8
     8cc:	2b00      	cmp	r3, #0
     8ce:	d154      	bne.n	97a <gc_alloc+0xbe>
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8d0:	f8b4 31ca 	ldrh.w	r3, [r4, #458]	; 0x1ca
     8d4:	2b00      	cmp	r3, #0
     8d6:	bf0c      	ite	eq
     8d8:	f04f 0e01 	moveq.w	lr, #1
     8dc:	f04f 0e00 	movne.w	lr, #0
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     8e0:	d14f      	bne.n	982 <gc_alloc+0xc6>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8e2:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
     8e6:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
     8ea:	42b1      	cmp	r1, r6
     8ec:	d238      	bcs.n	960 <gc_alloc+0xa4>
     8ee:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
        collected = 1;
     8f2:	2300      	movs	r3, #0
     8f4:	1878      	adds	r0, r7, r1
     8f6:	e01a      	b.n	92e <gc_alloc+0x72>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     8f8:	3301      	adds	r3, #1
     8fa:	429d      	cmp	r5, r3
     8fc:	d953      	bls.n	9a6 <gc_alloc+0xea>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     8fe:	f012 0f0c 	tst.w	r2, #12
     902:	d11e      	bne.n	942 <gc_alloc+0x86>
     904:	3301      	adds	r3, #1
     906:	429d      	cmp	r5, r3
     908:	f240 8091 	bls.w	a2e <gc_alloc+0x172>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     90c:	f012 0f30 	tst.w	r2, #48	; 0x30
     910:	d11c      	bne.n	94c <gc_alloc+0x90>
     912:	3301      	adds	r3, #1
     914:	429d      	cmp	r5, r3
     916:	f240 808d 	bls.w	a34 <gc_alloc+0x178>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     91a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
     91e:	d11a      	bne.n	956 <gc_alloc+0x9a>
     920:	3301      	adds	r3, #1
     922:	429d      	cmp	r5, r3
     924:	f240 8089 	bls.w	a3a <gc_alloc+0x17e>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     928:	3101      	adds	r1, #1
     92a:	42b1      	cmp	r1, r6
     92c:	d218      	bcs.n	960 <gc_alloc+0xa4>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     92e:	f810 2b01 	ldrb.w	r2, [r0], #1
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     932:	f012 0f03 	tst.w	r2, #3
     936:	d0df      	beq.n	8f8 <gc_alloc+0x3c>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     938:	f012 0f0c 	tst.w	r2, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     93c:	f04f 0300 	mov.w	r3, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     940:	d0e0      	beq.n	904 <gc_alloc+0x48>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     942:	f012 0f30 	tst.w	r2, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     946:	f04f 0300 	mov.w	r3, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     94a:	d0e2      	beq.n	912 <gc_alloc+0x56>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     94c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     950:	f04f 0300 	mov.w	r3, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     954:	d0e4      	beq.n	920 <gc_alloc+0x64>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     956:	3101      	adds	r1, #1
     958:	42b1      	cmp	r1, r6
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     95a:	f04f 0300 	mov.w	r3, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     95e:	d3e6      	bcc.n	92e <gc_alloc+0x72>
        if (collected) {
     960:	f1be 0f00 	cmp.w	lr, #0
     964:	d109      	bne.n	97a <gc_alloc+0xbe>
        gc_collect();
     966:	f01a fd45 	bl	1b3f4 <gc_collect>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     96a:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
     96e:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
     972:	428e      	cmp	r6, r1
        collected = 1;
     974:	f04f 0e01 	mov.w	lr, #1
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     978:	d8b9      	bhi.n	8ee <gc_alloc+0x32>
        return NULL;
     97a:	2600      	movs	r6, #0
}
     97c:	4630      	mov	r0, r6
     97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     982:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
     986:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
     98a:	429a      	cmp	r2, r3
     98c:	d3a9      	bcc.n	8e2 <gc_alloc+0x26>
        gc_collect();
     98e:	f01a fd31 	bl	1b3f4 <gc_collect>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     992:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
     996:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
     99a:	428e      	cmp	r6, r1
        collected = 1;
     99c:	bf88      	it	hi
     99e:	f04f 0e01 	movhi.w	lr, #1
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     9a2:	d8a4      	bhi.n	8ee <gc_alloc+0x32>
     9a4:	e7e9      	b.n	97a <gc_alloc+0xbe>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     9a6:	0089      	lsls	r1, r1, #2
    start_block = i - n_free + 1;
     9a8:	1aca      	subs	r2, r1, r3
    if (n_free == 1) {
     9aa:	2b01      	cmp	r3, #1
    start_block = i - n_free + 1;
     9ac:	f102 0001 	add.w	r0, r2, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     9b0:	f101 0c01 	add.w	ip, r1, #1
     9b4:	bf08      	it	eq
     9b6:	ea4f 039c 	moveq.w	r3, ip, lsr #2
    ATB_FREE_TO_HEAD(start_block);
     9ba:	ea4f 0690 	mov.w	r6, r0, lsr #2
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     9be:	bf08      	it	eq
     9c0:	f8c4 31d4 	streq.w	r3, [r4, #468]	; 0x1d4
    ATB_FREE_TO_HEAD(start_block);
     9c4:	f000 0303 	and.w	r3, r0, #3
     9c8:	f817 8006 	ldrb.w	r8, [r7, r6]
     9cc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
     9d0:	2301      	movs	r3, #1
     9d2:	fa03 f30e 	lsl.w	r3, r3, lr
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9d6:	3202      	adds	r2, #2
    ATB_FREE_TO_HEAD(start_block);
     9d8:	ea43 0308 	orr.w	r3, r3, r8
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9dc:	4291      	cmp	r1, r2
    ATB_FREE_TO_HEAD(start_block);
     9de:	55bb      	strb	r3, [r7, r6]
        ATB_FREE_TO_TAIL(bl);
     9e0:	bf28      	it	cs
     9e2:	f04f 0802 	movcs.w	r8, #2
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9e6:	d30f      	bcc.n	a08 <gc_alloc+0x14c>
        ATB_FREE_TO_TAIL(bl);
     9e8:	0896      	lsrs	r6, r2, #2
     9ea:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
     9ee:	f002 0303 	and.w	r3, r2, #3
     9f2:	f817 e006 	ldrb.w	lr, [r7, r6]
     9f6:	005b      	lsls	r3, r3, #1
     9f8:	fa08 f303 	lsl.w	r3, r8, r3
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9fc:	3201      	adds	r2, #1
        ATB_FREE_TO_TAIL(bl);
     9fe:	ea43 030e 	orr.w	r3, r3, lr
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a02:	4291      	cmp	r1, r2
        ATB_FREE_TO_TAIL(bl);
     a04:	55bb      	strb	r3, [r7, r6]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     a06:	d2ef      	bcs.n	9e8 <gc_alloc+0x12c>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     a08:	f8d4 60bc 	ldr.w	r6, [r4, #188]	; 0xbc
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     a0c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     a10:	ebac 0200 	sub.w	r2, ip, r0
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     a14:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     a18:	441d      	add	r5, r3
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     a1a:	0112      	lsls	r2, r2, #4
     a1c:	4630      	mov	r0, r6
     a1e:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     a20:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     a24:	f01c f8f2 	bl	1cc0c <memset>
}
     a28:	4630      	mov	r0, r6
     a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     a2e:	0089      	lsls	r1, r1, #2
     a30:	3101      	adds	r1, #1
     a32:	e7b9      	b.n	9a8 <gc_alloc+0xec>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     a34:	0089      	lsls	r1, r1, #2
     a36:	3102      	adds	r1, #2
     a38:	e7b6      	b.n	9a8 <gc_alloc+0xec>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a3a:	0089      	lsls	r1, r1, #2
     a3c:	3103      	adds	r1, #3
     a3e:	e7b3      	b.n	9a8 <gc_alloc+0xec>
     a40:	200012f0 	.word	0x200012f0

00000a44 <gc_free>:
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     a44:	4b03      	ldr	r3, [pc, #12]	; (a54 <gc_free+0x10>)
     a46:	f8b3 31c8 	ldrh.w	r3, [r3, #456]	; 0x1c8
     a4a:	b90b      	cbnz	r3, a50 <gc_free+0xc>
    if (ptr == NULL) {
     a4c:	b100      	cbz	r0, a50 <gc_free+0xc>
     a4e:	e529      	b.n	4a4 <gc_free.part.0>
     a50:	4770      	bx	lr
     a52:	bf00      	nop
     a54:	200012f0 	.word	0x200012f0

00000a58 <gc_nbytes>:

size_t gc_nbytes(const void *ptr) {
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     a58:	f010 030f 	ands.w	r3, r0, #15
     a5c:	d11b      	bne.n	a96 <gc_nbytes+0x3e>
     a5e:	4a18      	ldr	r2, [pc, #96]	; (ac0 <gc_nbytes+0x68>)
     a60:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
     a64:	4288      	cmp	r0, r1
     a66:	d316      	bcc.n	a96 <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     a68:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     a6a:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
     a6e:	42a0      	cmp	r0, r4
     a70:	d222      	bcs.n	ab8 <gc_nbytes+0x60>
        size_t block = BLOCK_FROM_PTR(ptr);
     a72:	1a40      	subs	r0, r0, r1
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a74:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
     a78:	0982      	lsrs	r2, r0, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     a7a:	0901      	lsrs	r1, r0, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a7c:	5ca2      	ldrb	r2, [r4, r2]
     a7e:	f001 0003 	and.w	r0, r1, #3
     a82:	0040      	lsls	r0, r0, #1
     a84:	4102      	asrs	r2, r0
     a86:	f002 0203 	and.w	r2, r2, #3
     a8a:	2a01      	cmp	r2, #1
     a8c:	4618      	mov	r0, r3
     a8e:	d004      	beq.n	a9a <gc_nbytes+0x42>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     a90:	f85d 4b04 	ldr.w	r4, [sp], #4
     a94:	4770      	bx	lr
    return 0;
     a96:	2000      	movs	r0, #0
     a98:	4770      	bx	lr
                n_blocks += 1;
     a9a:	3001      	adds	r0, #1
     a9c:	180b      	adds	r3, r1, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     a9e:	089a      	lsrs	r2, r3, #2
     aa0:	f003 0303 	and.w	r3, r3, #3
     aa4:	5ca2      	ldrb	r2, [r4, r2]
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	fa42 f303 	asr.w	r3, r2, r3
     aac:	f003 0303 	and.w	r3, r3, #3
     ab0:	2b02      	cmp	r3, #2
     ab2:	d0f2      	beq.n	a9a <gc_nbytes+0x42>
            return n_blocks * BYTES_PER_BLOCK;
     ab4:	0100      	lsls	r0, r0, #4
     ab6:	e7eb      	b.n	a90 <gc_nbytes+0x38>
    return 0;
     ab8:	4618      	mov	r0, r3
}
     aba:	f85d 4b04 	ldr.w	r4, [sp], #4
     abe:	4770      	bx	lr
     ac0:	200012f0 	.word	0x200012f0

00000ac4 <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ac8:	460b      	mov	r3, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     aca:	4606      	mov	r6, r0
     acc:	2800      	cmp	r0, #0
     ace:	f000 80c7 	beq.w	c60 <gc_realloc+0x19c>
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     ad2:	2900      	cmp	r1, #0
     ad4:	d07a      	beq.n	bcc <gc_realloc+0x108>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     ad6:	4d70      	ldr	r5, [pc, #448]	; (c98 <gc_realloc+0x1d4>)
     ad8:	f8b5 31c8 	ldrh.w	r3, [r5, #456]	; 0x1c8
     adc:	2b00      	cmp	r3, #0
     ade:	d17a      	bne.n	bd6 <gc_realloc+0x112>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     ae0:	f010 090f 	ands.w	r9, r0, #15
     ae4:	f040 80c9 	bne.w	c7a <gc_realloc+0x1b6>
     ae8:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
     aec:	4286      	cmp	r6, r0
     aee:	f0c0 80c4 	bcc.w	c7a <gc_realloc+0x1b6>
     af2:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
     af6:	429e      	cmp	r6, r3
     af8:	f080 80bf 	bcs.w	c7a <gc_realloc+0x1b6>
    size_t block = BLOCK_FROM_PTR(ptr);
     afc:	1a30      	subs	r0, r6, r0
    assert(ATB_GET_KIND(block) == AT_HEAD);
     afe:	0984      	lsrs	r4, r0, #6
     b00:	f8d5 70b4 	ldr.w	r7, [r5, #180]	; 0xb4
    size_t block = BLOCK_FROM_PTR(ptr);
     b04:	0900      	lsrs	r0, r0, #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     b06:	f000 0303 	and.w	r3, r0, #3
     b0a:	5d3c      	ldrb	r4, [r7, r4]
     b0c:	005b      	lsls	r3, r3, #1
     b0e:	411c      	asrs	r4, r3
     b10:	f004 0403 	and.w	r4, r4, #3
     b14:	2c01      	cmp	r4, #1
     b16:	f040 80b7 	bne.w	c88 <gc_realloc+0x1c4>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     b1a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     b1e:	f100 0801 	add.w	r8, r0, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     b22:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     b26:	f101 0e0f 	add.w	lr, r1, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     b2a:	45c2      	cmp	sl, r8
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     b2c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     b30:	d913      	bls.n	b5a <gc_realloc+0x96>
        byte block_type = ATB_GET_KIND(bl);
     b32:	ea4f 0c98 	mov.w	ip, r8, lsr #2
     b36:	f008 0303 	and.w	r3, r8, #3
     b3a:	f817 c00c 	ldrb.w	ip, [r7, ip]
     b3e:	005b      	lsls	r3, r3, #1
     b40:	fa4c f303 	asr.w	r3, ip, r3
     b44:	f003 0303 	and.w	r3, r3, #3
        if (block_type == AT_TAIL) {
     b48:	2b02      	cmp	r3, #2
     b4a:	d048      	beq.n	bde <gc_realloc+0x11a>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
     b4c:	b92b      	cbnz	r3, b5a <gc_realloc+0x96>
            n_free++;
     b4e:	f109 0901 	add.w	r9, r9, #1
            if (n_blocks + n_free >= new_blocks) {
     b52:	eb09 0304 	add.w	r3, r9, r4
     b56:	459e      	cmp	lr, r3
     b58:	d842      	bhi.n	be0 <gc_realloc+0x11c>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
     b5a:	45a6      	cmp	lr, r4
     b5c:	d065      	beq.n	c2a <gc_realloc+0x166>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
     b5e:	d344      	bcc.n	bea <gc_realloc+0x126>

        return ptr_in;
    }

    // check if we can expand in place
    if (new_blocks <= n_blocks + n_free) {
     b60:	44a1      	add	r9, r4
     b62:	45ce      	cmp	lr, r9
     b64:	d865      	bhi.n	c32 <gc_realloc+0x16e>
        // mark few more blocks as used tail
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b66:	1901      	adds	r1, r0, r4
     b68:	4470      	add	r0, lr
     b6a:	4288      	cmp	r0, r1
     b6c:	d924      	bls.n	bb8 <gc_realloc+0xf4>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b6e:	088a      	lsrs	r2, r1, #2
     b70:	f001 0303 	and.w	r3, r1, #3
     b74:	f817 c002 	ldrb.w	ip, [r7, r2]
     b78:	005b      	lsls	r3, r3, #1
     b7a:	fa4c f803 	asr.w	r8, ip, r3
     b7e:	f018 0f03 	tst.w	r8, #3
     b82:	443a      	add	r2, r7
            ATB_FREE_TO_TAIL(bl);
     b84:	bf08      	it	eq
     b86:	2702      	moveq	r7, #2
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b88:	d00e      	beq.n	ba8 <gc_realloc+0xe4>
     b8a:	e06f      	b.n	c6c <gc_realloc+0x1a8>
     b8c:	088a      	lsrs	r2, r1, #2
     b8e:	f8d5 80b4 	ldr.w	r8, [r5, #180]	; 0xb4
     b92:	f001 0303 	and.w	r3, r1, #3
     b96:	f818 c002 	ldrb.w	ip, [r8, r2]
     b9a:	005b      	lsls	r3, r3, #1
     b9c:	fa4c f903 	asr.w	r9, ip, r3
     ba0:	f019 0f03 	tst.w	r9, #3
     ba4:	4442      	add	r2, r8
     ba6:	d161      	bne.n	c6c <gc_realloc+0x1a8>
            ATB_FREE_TO_TAIL(bl);
     ba8:	fa07 f303 	lsl.w	r3, r7, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     bac:	3101      	adds	r1, #1
            ATB_FREE_TO_TAIL(bl);
     bae:	ea43 030c 	orr.w	r3, r3, ip
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     bb2:	4288      	cmp	r0, r1
            ATB_FREE_TO_TAIL(bl);
     bb4:	7013      	strb	r3, [r2, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     bb6:	d1e9      	bne.n	b8c <gc_realloc+0xc8>

        GC_EXIT();

        #if MICROPY_GC_CONSERVATIVE_CLEAR
        // be conservative and zero out all the newly allocated blocks
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     bb8:	ebae 0204 	sub.w	r2, lr, r4
     bbc:	0112      	lsls	r2, r2, #4
     bbe:	eb06 1004 	add.w	r0, r6, r4, lsl #4
     bc2:	2100      	movs	r1, #0

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif

        return ptr_in;
     bc4:	4637      	mov	r7, r6
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     bc6:	f01c f821 	bl	1cc0c <memset>
        return ptr_in;
     bca:	e005      	b.n	bd8 <gc_realloc+0x114>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     bcc:	4b32      	ldr	r3, [pc, #200]	; (c98 <gc_realloc+0x1d4>)
     bce:	f8b3 71c8 	ldrh.w	r7, [r3, #456]	; 0x1c8
     bd2:	2f00      	cmp	r7, #0
     bd4:	d03f      	beq.n	c56 <gc_realloc+0x192>
        return NULL;
     bd6:	2700      	movs	r7, #0

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
    gc_free(ptr_in);
    return ptr_out;
}
     bd8:	4638      	mov	r0, r7
     bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n_blocks++;
     bde:	3401      	adds	r4, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     be0:	f108 0801 	add.w	r8, r8, #1
     be4:	45c2      	cmp	sl, r8
     be6:	d1a4      	bne.n	b32 <gc_realloc+0x6e>
     be8:	e7b7      	b.n	b5a <gc_realloc+0x96>
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bea:	4486      	add	lr, r0
            ATB_ANY_TO_FREE(bl);
     bec:	f04f 0803 	mov.w	r8, #3
     bf0:	4420      	add	r0, r4
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bf2:	4674      	mov	r4, lr
     bf4:	e001      	b.n	bfa <gc_realloc+0x136>
     bf6:	f8d5 70b4 	ldr.w	r7, [r5, #180]	; 0xb4
            ATB_ANY_TO_FREE(bl);
     bfa:	ea4f 0c94 	mov.w	ip, r4, lsr #2
     bfe:	f004 0303 	and.w	r3, r4, #3
     c02:	f817 100c 	ldrb.w	r1, [r7, ip]
     c06:	005b      	lsls	r3, r3, #1
     c08:	fa08 f303 	lsl.w	r3, r8, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     c0c:	3401      	adds	r4, #1
            ATB_ANY_TO_FREE(bl);
     c0e:	ea21 0303 	bic.w	r3, r1, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     c12:	4284      	cmp	r4, r0
            ATB_ANY_TO_FREE(bl);
     c14:	f807 300c 	strb.w	r3, [r7, ip]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     c18:	d1ed      	bne.n	bf6 <gc_realloc+0x132>
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     c1a:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
     c1e:	ea4f 029e 	mov.w	r2, lr, lsr #2
     c22:	429a      	cmp	r2, r3
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
     c24:	bf38      	it	cc
     c26:	f8c5 21d4 	strcc.w	r2, [r5, #468]	; 0x1d4
     c2a:	4637      	mov	r7, r6
}
     c2c:	4638      	mov	r0, r7
     c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!allow_move) {
     c32:	2a00      	cmp	r2, #0
     c34:	d0cf      	beq.n	bd6 <gc_realloc+0x112>
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
     c36:	4608      	mov	r0, r1
     c38:	2100      	movs	r1, #0
     c3a:	f7ff fe3f 	bl	8bc <gc_alloc>
    if (ptr_out == NULL) {
     c3e:	4607      	mov	r7, r0
     c40:	2800      	cmp	r0, #0
     c42:	d0c8      	beq.n	bd6 <gc_realloc+0x112>
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
     c44:	0122      	lsls	r2, r4, #4
     c46:	4631      	mov	r1, r6
     c48:	f01b ff46 	bl	1cad8 <memcpy>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     c4c:	f8b5 31c8 	ldrh.w	r3, [r5, #456]	; 0x1c8
     c50:	2b00      	cmp	r3, #0
     c52:	d1c1      	bne.n	bd8 <gc_realloc+0x114>
     c54:	4630      	mov	r0, r6
     c56:	f7ff fc25 	bl	4a4 <gc_free.part.0>
}
     c5a:	4638      	mov	r0, r7
     c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return gc_alloc(n_bytes, false);
     c60:	4601      	mov	r1, r0
}
     c62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return gc_alloc(n_bytes, false);
     c66:	4618      	mov	r0, r3
     c68:	f7ff be28 	b.w	8bc <gc_alloc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     c6c:	4b0b      	ldr	r3, [pc, #44]	; (c9c <gc_realloc+0x1d8>)
     c6e:	4a0c      	ldr	r2, [pc, #48]	; (ca0 <gc_realloc+0x1dc>)
     c70:	480c      	ldr	r0, [pc, #48]	; (ca4 <gc_realloc+0x1e0>)
     c72:	f240 21ea 	movw	r1, #746	; 0x2ea
     c76:	f01a fc03 	bl	1b480 <__assert_func>
    assert(VERIFY_PTR(ptr));
     c7a:	4b0b      	ldr	r3, [pc, #44]	; (ca8 <gc_realloc+0x1e4>)
     c7c:	4a08      	ldr	r2, [pc, #32]	; (ca0 <gc_realloc+0x1dc>)
     c7e:	4809      	ldr	r0, [pc, #36]	; (ca4 <gc_realloc+0x1e0>)
     c80:	f240 21aa 	movw	r1, #682	; 0x2aa
     c84:	f01a fbfc 	bl	1b480 <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c88:	4b08      	ldr	r3, [pc, #32]	; (cac <gc_realloc+0x1e8>)
     c8a:	4a05      	ldr	r2, [pc, #20]	; (ca0 <gc_realloc+0x1dc>)
     c8c:	4805      	ldr	r0, [pc, #20]	; (ca4 <gc_realloc+0x1e0>)
     c8e:	f44f 712b 	mov.w	r1, #684	; 0x2ac
     c92:	f01a fbf5 	bl	1b480 <__assert_func>
     c96:	bf00      	nop
     c98:	200012f0 	.word	0x200012f0
     c9c:	0001dcc0 	.word	0x0001dcc0
     ca0:	0001dc74 	.word	0x0001dc74
     ca4:	0001dc90 	.word	0x0001dc90
     ca8:	0001dc80 	.word	0x0001dc80
     cac:	0001dca0 	.word	0x0001dca0

00000cb0 <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
     cb0:	b510      	push	{r4, lr}
     cb2:	b08a      	sub	sp, #40	; 0x28
    gc_info_t info;
    gc_info(&info);
     cb4:	a803      	add	r0, sp, #12
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     cb6:	4c0b      	ldr	r4, [pc, #44]	; (ce4 <gc_dump_info+0x34>)
    gc_info(&info);
     cb8:	f7ff fd82 	bl	7c0 <gc_info>
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     cbc:	9905      	ldr	r1, [sp, #20]
     cbe:	9b04      	ldr	r3, [sp, #16]
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	9100      	str	r1, [sp, #0]
     cc4:	4620      	mov	r0, r4
     cc6:	4908      	ldr	r1, [pc, #32]	; (ce8 <gc_dump_info+0x38>)
     cc8:	f001 f90e 	bl	1ee8 <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
     ccc:	a806      	add	r0, sp, #24
     cce:	c80d      	ldmia	r0, {r0, r2, r3}
     cd0:	9909      	ldr	r1, [sp, #36]	; 0x24
     cd2:	9001      	str	r0, [sp, #4]
     cd4:	9100      	str	r1, [sp, #0]
     cd6:	4620      	mov	r0, r4
     cd8:	4904      	ldr	r1, [pc, #16]	; (cec <gc_dump_info+0x3c>)
     cda:	f001 f905 	bl	1ee8 <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
     cde:	b00a      	add	sp, #40	; 0x28
     ce0:	bd10      	pop	{r4, pc}
     ce2:	bf00      	nop
     ce4:	0001f4ac 	.word	0x0001f4ac
     ce8:	0001dcdc 	.word	0x0001dcdc
     cec:	0001dd00 	.word	0x0001dd00

00000cf0 <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
     cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
     cf4:	4f4f      	ldr	r7, [pc, #316]	; (e34 <gc_dump_alloc_table+0x144>)
     cf6:	4950      	ldr	r1, [pc, #320]	; (e38 <gc_dump_alloc_table+0x148>)
     cf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
     cfc:	484f      	ldr	r0, [pc, #316]	; (e3c <gc_dump_alloc_table+0x14c>)
     cfe:	f001 f8f3 	bl	1ee8 <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     d02:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     d06:	0089      	lsls	r1, r1, #2
     d08:	d07e      	beq.n	e08 <gc_dump_alloc_table+0x118>
                }
            }
            // print header for new line of blocks
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     d0a:	f8df a15c 	ldr.w	sl, [pc, #348]	; e68 <gc_dump_alloc_table+0x178>
     d0e:	f8df 915c 	ldr.w	r9, [pc, #348]	; e6c <gc_dump_alloc_table+0x17c>
     d12:	f8df 8128 	ldr.w	r8, [pc, #296]	; e3c <gc_dump_alloc_table+0x14c>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     d16:	2500      	movs	r5, #0
     d18:	e01d      	b.n	d56 <gc_dump_alloc_table+0x66>
     d1a:	f005 0603 	and.w	r6, r5, #3
     d1e:	0076      	lsls	r6, r6, #1
     d20:	ea4f 0b95 	mov.w	fp, r5, lsr #2
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
     d24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
     d28:	f813 300b 	ldrb.w	r3, [r3, fp]
     d2c:	fa43 f606 	asr.w	r6, r3, r6
     d30:	f006 0603 	and.w	r6, r6, #3
     d34:	2e02      	cmp	r6, #2
     d36:	d065      	beq.n	e04 <gc_dump_alloc_table+0x114>
     d38:	2e03      	cmp	r6, #3
     d3a:	d061      	beq.n	e00 <gc_dump_alloc_table+0x110>
     d3c:	2e01      	cmp	r6, #1
     d3e:	d043      	beq.n	dc8 <gc_dump_alloc_table+0xd8>
            case AT_FREE: c = '.'; break;
     d40:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
     d42:	493f      	ldr	r1, [pc, #252]	; (e40 <gc_dump_alloc_table+0x150>)
     d44:	4640      	mov	r0, r8
     d46:	f001 f8cf 	bl	1ee8 <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     d4a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     d4e:	3501      	adds	r5, #1
     d50:	0089      	lsls	r1, r1, #2
     d52:	42a9      	cmp	r1, r5
     d54:	d958      	bls.n	e08 <gc_dump_alloc_table+0x118>
        if (bl % DUMP_BYTES_PER_LINE == 0) {
     d56:	06a8      	lsls	r0, r5, #26
     d58:	d1df      	bne.n	d1a <gc_dump_alloc_table+0x2a>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     d5a:	428d      	cmp	r5, r1
     d5c:	d260      	bcs.n	e20 <gc_dump_alloc_table+0x130>
     d5e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
     d62:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     d66:	f005 0603 	and.w	r6, r5, #3
     d6a:	f810 300b 	ldrb.w	r3, [r0, fp]
     d6e:	0076      	lsls	r6, r6, #1
     d70:	4133      	asrs	r3, r6
     d72:	079a      	lsls	r2, r3, #30
     d74:	d121      	bne.n	dba <gc_dump_alloc_table+0xca>
     d76:	462c      	mov	r4, r5
     d78:	e004      	b.n	d84 <gc_dump_alloc_table+0x94>
     d7a:	5c82      	ldrb	r2, [r0, r2]
     d7c:	fa42 f303 	asr.w	r3, r2, r3
     d80:	079b      	lsls	r3, r3, #30
     d82:	d108      	bne.n	d96 <gc_dump_alloc_table+0xa6>
                    bl2++;
     d84:	3401      	adds	r4, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     d86:	f004 0303 	and.w	r3, r4, #3
     d8a:	428c      	cmp	r4, r1
     d8c:	ea4f 0294 	mov.w	r2, r4, lsr #2
     d90:	ea4f 0343 	mov.w	r3, r3, lsl #1
     d94:	d1f1      	bne.n	d7a <gc_dump_alloc_table+0x8a>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
     d96:	1b62      	subs	r2, r4, r5
     d98:	2a7f      	cmp	r2, #127	; 0x7f
     d9a:	d90e      	bls.n	dba <gc_dump_alloc_table+0xca>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
     d9c:	0992      	lsrs	r2, r2, #6
     d9e:	4929      	ldr	r1, [pc, #164]	; (e44 <gc_dump_alloc_table+0x154>)
     da0:	4640      	mov	r0, r8
     da2:	f001 f8a1 	bl	1ee8 <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
     daa:	f024 053f 	bic.w	r5, r4, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     dae:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     db2:	d229      	bcs.n	e08 <gc_dump_alloc_table+0x118>
     db4:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     db8:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     dba:	ea0a 1205 	and.w	r2, sl, r5, lsl #4
     dbe:	4649      	mov	r1, r9
     dc0:	4640      	mov	r0, r8
     dc2:	f001 f891 	bl	1ee8 <mp_printf>
     dc6:	e7ad      	b.n	d24 <gc_dump_alloc_table+0x34>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     dc8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
     dcc:	4b1e      	ldr	r3, [pc, #120]	; (e48 <gc_dump_alloc_table+0x158>)
     dce:	012a      	lsls	r2, r5, #4
     dd0:	588a      	ldr	r2, [r1, r2]
     dd2:	429a      	cmp	r2, r3
     dd4:	d020      	beq.n	e18 <gc_dump_alloc_table+0x128>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     dd6:	4b1d      	ldr	r3, [pc, #116]	; (e4c <gc_dump_alloc_table+0x15c>)
     dd8:	429a      	cmp	r2, r3
     dda:	d01f      	beq.n	e1c <gc_dump_alloc_table+0x12c>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     ddc:	4b1c      	ldr	r3, [pc, #112]	; (e50 <gc_dump_alloc_table+0x160>)
     dde:	429a      	cmp	r2, r3
     de0:	d024      	beq.n	e2c <gc_dump_alloc_table+0x13c>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     de2:	4b1c      	ldr	r3, [pc, #112]	; (e54 <gc_dump_alloc_table+0x164>)
     de4:	429a      	cmp	r2, r3
     de6:	d015      	beq.n	e14 <gc_dump_alloc_table+0x124>
     de8:	4b1b      	ldr	r3, [pc, #108]	; (e58 <gc_dump_alloc_table+0x168>)
     dea:	429a      	cmp	r2, r3
     dec:	d012      	beq.n	e14 <gc_dump_alloc_table+0x124>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     dee:	4b1b      	ldr	r3, [pc, #108]	; (e5c <gc_dump_alloc_table+0x16c>)
     df0:	429a      	cmp	r2, r3
     df2:	d01d      	beq.n	e30 <gc_dump_alloc_table+0x140>
                else if (*ptr == &mp_type_module) { c = 'M'; }
     df4:	4b1a      	ldr	r3, [pc, #104]	; (e60 <gc_dump_alloc_table+0x170>)
     df6:	429a      	cmp	r2, r3
     df8:	bf14      	ite	ne
     dfa:	2268      	movne	r2, #104	; 0x68
     dfc:	224d      	moveq	r2, #77	; 0x4d
     dfe:	e7a0      	b.n	d42 <gc_dump_alloc_table+0x52>
            case AT_MARK: c = 'm'; break;
     e00:	226d      	movs	r2, #109	; 0x6d
     e02:	e79e      	b.n	d42 <gc_dump_alloc_table+0x52>
            case AT_TAIL: c = '='; break;
     e04:	223d      	movs	r2, #61	; 0x3d
     e06:	e79c      	b.n	d42 <gc_dump_alloc_table+0x52>
    }
    mp_print_str(&mp_plat_print, "\n");
     e08:	4916      	ldr	r1, [pc, #88]	; (e64 <gc_dump_alloc_table+0x174>)
     e0a:	480c      	ldr	r0, [pc, #48]	; (e3c <gc_dump_alloc_table+0x14c>)
    GC_EXIT();
}
     e0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mp_print_str(&mp_plat_print, "\n");
     e10:	f000 bd58 	b.w	18c4 <mp_print_str>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     e14:	2253      	movs	r2, #83	; 0x53
     e16:	e794      	b.n	d42 <gc_dump_alloc_table+0x52>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     e18:	2254      	movs	r2, #84	; 0x54
     e1a:	e792      	b.n	d42 <gc_dump_alloc_table+0x52>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     e1c:	224c      	movs	r2, #76	; 0x4c
     e1e:	e790      	b.n	d42 <gc_dump_alloc_table+0x52>
     e20:	f005 0603 	and.w	r6, r5, #3
     e24:	0076      	lsls	r6, r6, #1
     e26:	ea4f 0b95 	mov.w	fp, r5, lsr #2
     e2a:	e7c6      	b.n	dba <gc_dump_alloc_table+0xca>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     e2c:	2244      	movs	r2, #68	; 0x44
     e2e:	e788      	b.n	d42 <gc_dump_alloc_table+0x52>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     e30:	2242      	movs	r2, #66	; 0x42
     e32:	e786      	b.n	d42 <gc_dump_alloc_table+0x52>
     e34:	200012f0 	.word	0x200012f0
     e38:	0001dd48 	.word	0x0001dd48
     e3c:	0001f4ac 	.word	0x0001f4ac
     e40:	0001dd8c 	.word	0x0001dd8c
     e44:	0001dd68 	.word	0x0001dd68
     e48:	00023a20 	.word	0x00023a20
     e4c:	00022e28 	.word	0x00022e28
     e50:	00021d40 	.word	0x00021d40
     e54:	0002379c 	.word	0x0002379c
     e58:	000237d8 	.word	0x000237d8
     e5c:	0002279c 	.word	0x0002279c
     e60:	00022fe4 	.word	0x00022fe4
     e64:	0001dd64 	.word	0x0001dd64
     e68:	000ffff0 	.word	0x000ffff0
     e6c:	0001dd84 	.word	0x0001dd84

00000e70 <qstr_compute_hash>:
#define QSTR_ENTER()
#define QSTR_EXIT()
#endif

// this must match the equivalent function in makeqstrdata.py
mp_uint_t qstr_compute_hash(const byte *data, size_t len) {
     e70:	b480      	push	{r7}
     e72:	b085      	sub	sp, #20
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
     e78:	6039      	str	r1, [r7, #0]
    // djb2 algorithm; see http://www.cse.yorku.ca/~oz/hash.html
    mp_uint_t hash = 5381;
     e7a:	f241 5305 	movw	r3, #5381	; 0x1505
     e7e:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e80:	687a      	ldr	r2, [r7, #4]
     e82:	683b      	ldr	r3, [r7, #0]
     e84:	4413      	add	r3, r2
     e86:	60bb      	str	r3, [r7, #8]
     e88:	e00a      	b.n	ea0 <qstr_compute_hash+0x30>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
     e8a:	68fb      	ldr	r3, [r7, #12]
     e8c:	015a      	lsls	r2, r3, #5
     e8e:	68fb      	ldr	r3, [r7, #12]
     e90:	4413      	add	r3, r2
     e92:	687a      	ldr	r2, [r7, #4]
     e94:	7812      	ldrb	r2, [r2, #0]
     e96:	4053      	eors	r3, r2
     e98:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e9a:	687b      	ldr	r3, [r7, #4]
     e9c:	3301      	adds	r3, #1
     e9e:	607b      	str	r3, [r7, #4]
     ea0:	687a      	ldr	r2, [r7, #4]
     ea2:	68bb      	ldr	r3, [r7, #8]
     ea4:	429a      	cmp	r2, r3
     ea6:	d3f0      	bcc.n	e8a <qstr_compute_hash+0x1a>
    }
    hash &= Q_HASH_MASK;
     ea8:	68fb      	ldr	r3, [r7, #12]
     eaa:	b2db      	uxtb	r3, r3
     eac:	60fb      	str	r3, [r7, #12]
    // Make sure that valid hash is never zero, zero means "hash not computed"
    if (hash == 0) {
     eae:	68fb      	ldr	r3, [r7, #12]
     eb0:	2b00      	cmp	r3, #0
     eb2:	d102      	bne.n	eba <qstr_compute_hash+0x4a>
        hash++;
     eb4:	68fb      	ldr	r3, [r7, #12]
     eb6:	3301      	adds	r3, #1
     eb8:	60fb      	str	r3, [r7, #12]
    }
    return hash;
     eba:	68fb      	ldr	r3, [r7, #12]
}
     ebc:	4618      	mov	r0, r3
     ebe:	3714      	adds	r7, #20
     ec0:	46bd      	mov	sp, r7
     ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
     ec6:	4770      	bx	lr

00000ec8 <qstr_init>:
#define CONST_POOL MICROPY_QSTR_EXTRA_POOL
#else
#define CONST_POOL mp_qstr_const_pool
#endif

void qstr_init(void) {
     ec8:	b480      	push	{r7}
     eca:	af00      	add	r7, sp, #0
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
     ecc:	4b05      	ldr	r3, [pc, #20]	; (ee4 <qstr_init+0x1c>)
     ece:	4a06      	ldr	r2, [pc, #24]	; (ee8 <qstr_init+0x20>)
     ed0:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
     ed2:	4b04      	ldr	r3, [pc, #16]	; (ee4 <qstr_init+0x1c>)
     ed4:	2200      	movs	r2, #0
     ed6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    #if MICROPY_PY_THREAD
    mp_thread_mutex_init(&MP_STATE_VM(qstr_mutex));
    #endif
}
     eda:	bf00      	nop
     edc:	46bd      	mov	sp, r7
     ede:	f85d 7b04 	ldr.w	r7, [sp], #4
     ee2:	4770      	bx	lr
     ee4:	200012f0 	.word	0x200012f0
     ee8:	00025930 	.word	0x00025930

00000eec <find_qstr>:

STATIC const byte *find_qstr(qstr q) {
     eec:	b480      	push	{r7}
     eee:	b085      	sub	sp, #20
     ef0:	af00      	add	r7, sp, #0
     ef2:	6078      	str	r0, [r7, #4]
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
     ef4:	4b0c      	ldr	r3, [pc, #48]	; (f28 <find_qstr+0x3c>)
     ef6:	691b      	ldr	r3, [r3, #16]
     ef8:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     efa:	e002      	b.n	f02 <find_qstr+0x16>
        pool = pool->prev;
     efc:	68fb      	ldr	r3, [r7, #12]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     f02:	68fb      	ldr	r3, [r7, #12]
     f04:	685a      	ldr	r2, [r3, #4]
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	429a      	cmp	r2, r3
     f0a:	d8f7      	bhi.n	efc <find_qstr+0x10>
    }
    return pool->qstrs[q - pool->total_prev_len];
     f0c:	68fb      	ldr	r3, [r7, #12]
     f0e:	685b      	ldr	r3, [r3, #4]
     f10:	687a      	ldr	r2, [r7, #4]
     f12:	1ad2      	subs	r2, r2, r3
     f14:	68fb      	ldr	r3, [r7, #12]
     f16:	3204      	adds	r2, #4
     f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
     f1c:	4618      	mov	r0, r3
     f1e:	3714      	adds	r7, #20
     f20:	46bd      	mov	sp, r7
     f22:	f85d 7b04 	ldr.w	r7, [sp], #4
     f26:	4770      	bx	lr
     f28:	200012f0 	.word	0x200012f0

00000f2c <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
     f2c:	b580      	push	{r7, lr}
     f2e:	b084      	sub	sp, #16
     f30:	af00      	add	r7, sp, #0
     f32:	6078      	str	r0, [r7, #4]
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
     f34:	4b25      	ldr	r3, [pc, #148]	; (fcc <qstr_add+0xa0>)
     f36:	691b      	ldr	r3, [r3, #16]
     f38:	68da      	ldr	r2, [r3, #12]
     f3a:	4b24      	ldr	r3, [pc, #144]	; (fcc <qstr_add+0xa0>)
     f3c:	691b      	ldr	r3, [r3, #16]
     f3e:	689b      	ldr	r3, [r3, #8]
     f40:	429a      	cmp	r2, r3
     f42:	d32b      	bcc.n	f9c <qstr_add+0x70>
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
     f44:	4b21      	ldr	r3, [pc, #132]	; (fcc <qstr_add+0xa0>)
     f46:	691b      	ldr	r3, [r3, #16]
     f48:	689b      	ldr	r3, [r3, #8]
     f4a:	3302      	adds	r3, #2
     f4c:	00db      	lsls	r3, r3, #3
     f4e:	4618      	mov	r0, r3
     f50:	f7ff f9fb 	bl	34a <m_malloc_maybe>
     f54:	60f8      	str	r0, [r7, #12]
        if (pool == NULL) {
     f56:	68fb      	ldr	r3, [r7, #12]
     f58:	2b00      	cmp	r3, #0
     f5a:	d106      	bne.n	f6a <qstr_add+0x3e>
            QSTR_EXIT();
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
     f5c:	4b1b      	ldr	r3, [pc, #108]	; (fcc <qstr_add+0xa0>)
     f5e:	691b      	ldr	r3, [r3, #16]
     f60:	689b      	ldr	r3, [r3, #8]
     f62:	005b      	lsls	r3, r3, #1
     f64:	4618      	mov	r0, r3
     f66:	f00b ff40 	bl	cdea <m_malloc_fail>
        }
        pool->prev = MP_STATE_VM(last_pool);
     f6a:	4b18      	ldr	r3, [pc, #96]	; (fcc <qstr_add+0xa0>)
     f6c:	691a      	ldr	r2, [r3, #16]
     f6e:	68fb      	ldr	r3, [r7, #12]
     f70:	601a      	str	r2, [r3, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
     f72:	4b16      	ldr	r3, [pc, #88]	; (fcc <qstr_add+0xa0>)
     f74:	691b      	ldr	r3, [r3, #16]
     f76:	685a      	ldr	r2, [r3, #4]
     f78:	4b14      	ldr	r3, [pc, #80]	; (fcc <qstr_add+0xa0>)
     f7a:	691b      	ldr	r3, [r3, #16]
     f7c:	68db      	ldr	r3, [r3, #12]
     f7e:	441a      	add	r2, r3
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	605a      	str	r2, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
     f84:	4b11      	ldr	r3, [pc, #68]	; (fcc <qstr_add+0xa0>)
     f86:	691b      	ldr	r3, [r3, #16]
     f88:	689b      	ldr	r3, [r3, #8]
     f8a:	005a      	lsls	r2, r3, #1
     f8c:	68fb      	ldr	r3, [r7, #12]
     f8e:	609a      	str	r2, [r3, #8]
        pool->len = 0;
     f90:	68fb      	ldr	r3, [r7, #12]
     f92:	2200      	movs	r2, #0
     f94:	60da      	str	r2, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
     f96:	4a0d      	ldr	r2, [pc, #52]	; (fcc <qstr_add+0xa0>)
     f98:	68fb      	ldr	r3, [r7, #12]
     f9a:	6113      	str	r3, [r2, #16]
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
     f9c:	4b0b      	ldr	r3, [pc, #44]	; (fcc <qstr_add+0xa0>)
     f9e:	6919      	ldr	r1, [r3, #16]
     fa0:	4b0a      	ldr	r3, [pc, #40]	; (fcc <qstr_add+0xa0>)
     fa2:	691a      	ldr	r2, [r3, #16]
     fa4:	68d3      	ldr	r3, [r2, #12]
     fa6:	1c58      	adds	r0, r3, #1
     fa8:	60d0      	str	r0, [r2, #12]
     faa:	3304      	adds	r3, #4
     fac:	687a      	ldr	r2, [r7, #4]
     fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
     fb2:	4b06      	ldr	r3, [pc, #24]	; (fcc <qstr_add+0xa0>)
     fb4:	691b      	ldr	r3, [r3, #16]
     fb6:	685a      	ldr	r2, [r3, #4]
     fb8:	4b04      	ldr	r3, [pc, #16]	; (fcc <qstr_add+0xa0>)
     fba:	691b      	ldr	r3, [r3, #16]
     fbc:	68db      	ldr	r3, [r3, #12]
     fbe:	4413      	add	r3, r2
     fc0:	3b01      	subs	r3, #1
}
     fc2:	4618      	mov	r0, r3
     fc4:	3710      	adds	r7, #16
     fc6:	46bd      	mov	sp, r7
     fc8:	bd80      	pop	{r7, pc}
     fca:	bf00      	nop
     fcc:	200012f0 	.word	0x200012f0

00000fd0 <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
     fd0:	b580      	push	{r7, lr}
     fd2:	b086      	sub	sp, #24
     fd4:	af00      	add	r7, sp, #0
     fd6:	6078      	str	r0, [r7, #4]
     fd8:	6039      	str	r1, [r7, #0]
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
     fda:	6839      	ldr	r1, [r7, #0]
     fdc:	6878      	ldr	r0, [r7, #4]
     fde:	f7ff ff47 	bl	e70 <qstr_compute_hash>
     fe2:	60f8      	str	r0, [r7, #12]

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
     fe4:	4b22      	ldr	r3, [pc, #136]	; (1070 <qstr_find_strn+0xa0>)
     fe6:	691b      	ldr	r3, [r3, #16]
     fe8:	617b      	str	r3, [r7, #20]
     fea:	e038      	b.n	105e <qstr_find_strn+0x8e>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
     fec:	697b      	ldr	r3, [r7, #20]
     fee:	3310      	adds	r3, #16
     ff0:	613b      	str	r3, [r7, #16]
     ff2:	697b      	ldr	r3, [r7, #20]
     ff4:	f103 0210 	add.w	r2, r3, #16
     ff8:	697b      	ldr	r3, [r7, #20]
     ffa:	68db      	ldr	r3, [r3, #12]
     ffc:	009b      	lsls	r3, r3, #2
     ffe:	4413      	add	r3, r2
    1000:	60bb      	str	r3, [r7, #8]
    1002:	e025      	b.n	1050 <qstr_find_strn+0x80>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
    1004:	693b      	ldr	r3, [r7, #16]
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	781b      	ldrb	r3, [r3, #0]
    100a:	461a      	mov	r2, r3
    100c:	68fb      	ldr	r3, [r7, #12]
    100e:	429a      	cmp	r2, r3
    1010:	d11b      	bne.n	104a <qstr_find_strn+0x7a>
    1012:	693b      	ldr	r3, [r7, #16]
    1014:	681b      	ldr	r3, [r3, #0]
    1016:	3301      	adds	r3, #1
    1018:	781b      	ldrb	r3, [r3, #0]
    101a:	461a      	mov	r2, r3
    101c:	683b      	ldr	r3, [r7, #0]
    101e:	429a      	cmp	r2, r3
    1020:	d113      	bne.n	104a <qstr_find_strn+0x7a>
    1022:	693b      	ldr	r3, [r7, #16]
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	3302      	adds	r3, #2
    1028:	683a      	ldr	r2, [r7, #0]
    102a:	6879      	ldr	r1, [r7, #4]
    102c:	4618      	mov	r0, r3
    102e:	f01b fe38 	bl	1cca2 <memcmp>
    1032:	4603      	mov	r3, r0
    1034:	2b00      	cmp	r3, #0
    1036:	d108      	bne.n	104a <qstr_find_strn+0x7a>
                return pool->total_prev_len + (q - pool->qstrs);
    1038:	697b      	ldr	r3, [r7, #20]
    103a:	685b      	ldr	r3, [r3, #4]
    103c:	693a      	ldr	r2, [r7, #16]
    103e:	6979      	ldr	r1, [r7, #20]
    1040:	3110      	adds	r1, #16
    1042:	1a52      	subs	r2, r2, r1
    1044:	1092      	asrs	r2, r2, #2
    1046:	4413      	add	r3, r2
    1048:	e00d      	b.n	1066 <qstr_find_strn+0x96>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    104a:	693b      	ldr	r3, [r7, #16]
    104c:	3304      	adds	r3, #4
    104e:	613b      	str	r3, [r7, #16]
    1050:	693a      	ldr	r2, [r7, #16]
    1052:	68bb      	ldr	r3, [r7, #8]
    1054:	429a      	cmp	r2, r3
    1056:	d3d5      	bcc.n	1004 <qstr_find_strn+0x34>
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    1058:	697b      	ldr	r3, [r7, #20]
    105a:	681b      	ldr	r3, [r3, #0]
    105c:	617b      	str	r3, [r7, #20]
    105e:	697b      	ldr	r3, [r7, #20]
    1060:	2b00      	cmp	r3, #0
    1062:	d1c3      	bne.n	fec <qstr_find_strn+0x1c>
            }
        }
    }

    // not found; return null qstr
    return 0;
    1064:	2300      	movs	r3, #0
}
    1066:	4618      	mov	r0, r3
    1068:	3718      	adds	r7, #24
    106a:	46bd      	mov	sp, r7
    106c:	bd80      	pop	{r7, pc}
    106e:	bf00      	nop
    1070:	200012f0 	.word	0x200012f0

00001074 <qstr_from_str>:

qstr qstr_from_str(const char *str) {
    1074:	b580      	push	{r7, lr}
    1076:	b082      	sub	sp, #8
    1078:	af00      	add	r7, sp, #0
    107a:	6078      	str	r0, [r7, #4]
    return qstr_from_strn(str, strlen(str));
    107c:	6878      	ldr	r0, [r7, #4]
    107e:	f01b fe61 	bl	1cd44 <strlen>
    1082:	4603      	mov	r3, r0
    1084:	4619      	mov	r1, r3
    1086:	6878      	ldr	r0, [r7, #4]
    1088:	f000 f805 	bl	1096 <qstr_from_strn>
    108c:	4603      	mov	r3, r0
}
    108e:	4618      	mov	r0, r3
    1090:	3708      	adds	r7, #8
    1092:	46bd      	mov	sp, r7
    1094:	bd80      	pop	{r7, pc}

00001096 <qstr_from_strn>:

qstr qstr_from_strn(const char *str, size_t len) {
    1096:	b580      	push	{r7, lr}
    1098:	b088      	sub	sp, #32
    109a:	af00      	add	r7, sp, #0
    109c:	6078      	str	r0, [r7, #4]
    109e:	6039      	str	r1, [r7, #0]
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    10a0:	683b      	ldr	r3, [r7, #0]
    10a2:	2bff      	cmp	r3, #255	; 0xff
    10a4:	d905      	bls.n	10b2 <qstr_from_strn+0x1c>
    10a6:	4b56      	ldr	r3, [pc, #344]	; (1200 <qstr_from_strn+0x16a>)
    10a8:	4a56      	ldr	r2, [pc, #344]	; (1204 <qstr_from_strn+0x16e>)
    10aa:	21ba      	movs	r1, #186	; 0xba
    10ac:	4856      	ldr	r0, [pc, #344]	; (1208 <qstr_from_strn+0x172>)
    10ae:	f01a f9e7 	bl	1b480 <__assert_func>
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    10b2:	6839      	ldr	r1, [r7, #0]
    10b4:	6878      	ldr	r0, [r7, #4]
    10b6:	f7ff ff8b 	bl	fd0 <qstr_find_strn>
    10ba:	61f8      	str	r0, [r7, #28]
    if (q == 0) {
    10bc:	69fb      	ldr	r3, [r7, #28]
    10be:	2b00      	cmp	r3, #0
    10c0:	f040 8099 	bne.w	11f6 <qstr_from_strn+0x160>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    10c4:	683b      	ldr	r3, [r7, #0]
    10c6:	3303      	adds	r3, #3
    10c8:	617b      	str	r3, [r7, #20]

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    10ca:	4b50      	ldr	r3, [pc, #320]	; (120c <qstr_from_strn+0x176>)
    10cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    10d0:	2b00      	cmp	r3, #0
    10d2:	d030      	beq.n	1136 <qstr_from_strn+0xa0>
    10d4:	4b4d      	ldr	r3, [pc, #308]	; (120c <qstr_from_strn+0x176>)
    10d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    10da:	697b      	ldr	r3, [r7, #20]
    10dc:	441a      	add	r2, r3
    10de:	4b4b      	ldr	r3, [pc, #300]	; (120c <qstr_from_strn+0x176>)
    10e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    10e4:	429a      	cmp	r2, r3
    10e6:	d926      	bls.n	1136 <qstr_from_strn+0xa0>
            // not enough room at end of previously interned string so try to grow
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    10e8:	4b48      	ldr	r3, [pc, #288]	; (120c <qstr_from_strn+0x176>)
    10ea:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    10ee:	4b47      	ldr	r3, [pc, #284]	; (120c <qstr_from_strn+0x176>)
    10f0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    10f4:	697b      	ldr	r3, [r7, #20]
    10f6:	4413      	add	r3, r2
    10f8:	2200      	movs	r2, #0
    10fa:	4619      	mov	r1, r3
    10fc:	f7ff f959 	bl	3b2 <m_realloc_maybe>
    1100:	6138      	str	r0, [r7, #16]
            if (new_p == NULL) {
    1102:	693b      	ldr	r3, [r7, #16]
    1104:	2b00      	cmp	r3, #0
    1106:	d10e      	bne.n	1126 <qstr_from_strn+0x90>
                // could not grow existing memory; shrink it to fit previous
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    1108:	4b40      	ldr	r3, [pc, #256]	; (120c <qstr_from_strn+0x176>)
    110a:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    110e:	4b3f      	ldr	r3, [pc, #252]	; (120c <qstr_from_strn+0x176>)
    1110:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    1114:	2200      	movs	r2, #0
    1116:	4619      	mov	r1, r3
    1118:	f7ff f94b 	bl	3b2 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    111c:	4b3b      	ldr	r3, [pc, #236]	; (120c <qstr_from_strn+0x176>)
    111e:	2200      	movs	r2, #0
    1120:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1124:	e007      	b.n	1136 <qstr_from_strn+0xa0>
            } else {
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    1126:	4b39      	ldr	r3, [pc, #228]	; (120c <qstr_from_strn+0x176>)
    1128:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    112c:	697b      	ldr	r3, [r7, #20]
    112e:	4413      	add	r3, r2
    1130:	4a36      	ldr	r2, [pc, #216]	; (120c <qstr_from_strn+0x176>)
    1132:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1136:	4b35      	ldr	r3, [pc, #212]	; (120c <qstr_from_strn+0x176>)
    1138:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    113c:	2b00      	cmp	r3, #0
    113e:	d12b      	bne.n	1198 <qstr_from_strn+0x102>
            // no existing memory for the interned string so allocate a new chunk
            size_t al = n_bytes;
    1140:	697b      	ldr	r3, [r7, #20]
    1142:	61bb      	str	r3, [r7, #24]
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    1144:	69bb      	ldr	r3, [r7, #24]
    1146:	2b7f      	cmp	r3, #127	; 0x7f
    1148:	d801      	bhi.n	114e <qstr_from_strn+0xb8>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    114a:	2380      	movs	r3, #128	; 0x80
    114c:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    114e:	69b8      	ldr	r0, [r7, #24]
    1150:	f7ff f8fb 	bl	34a <m_malloc_maybe>
    1154:	4602      	mov	r2, r0
    1156:	4b2d      	ldr	r3, [pc, #180]	; (120c <qstr_from_strn+0x176>)
    1158:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    115c:	4b2b      	ldr	r3, [pc, #172]	; (120c <qstr_from_strn+0x176>)
    115e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1162:	2b00      	cmp	r3, #0
    1164:	d110      	bne.n	1188 <qstr_from_strn+0xf2>
                // failed to allocate a large chunk so try with exact size
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    1166:	6978      	ldr	r0, [r7, #20]
    1168:	f7ff f8ef 	bl	34a <m_malloc_maybe>
    116c:	4602      	mov	r2, r0
    116e:	4b27      	ldr	r3, [pc, #156]	; (120c <qstr_from_strn+0x176>)
    1170:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1174:	4b25      	ldr	r3, [pc, #148]	; (120c <qstr_from_strn+0x176>)
    1176:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    117a:	2b00      	cmp	r3, #0
    117c:	d102      	bne.n	1184 <qstr_from_strn+0xee>
                    QSTR_EXIT();
                    m_malloc_fail(n_bytes);
    117e:	6978      	ldr	r0, [r7, #20]
    1180:	f00b fe33 	bl	cdea <m_malloc_fail>
                }
                al = n_bytes;
    1184:	697b      	ldr	r3, [r7, #20]
    1186:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_alloc) = al;
    1188:	4a20      	ldr	r2, [pc, #128]	; (120c <qstr_from_strn+0x176>)
    118a:	69bb      	ldr	r3, [r7, #24]
    118c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            MP_STATE_VM(qstr_last_used) = 0;
    1190:	4b1e      	ldr	r3, [pc, #120]	; (120c <qstr_from_strn+0x176>)
    1192:	2200      	movs	r2, #0
    1194:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    1198:	4b1c      	ldr	r3, [pc, #112]	; (120c <qstr_from_strn+0x176>)
    119a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    119e:	4b1b      	ldr	r3, [pc, #108]	; (120c <qstr_from_strn+0x176>)
    11a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    11a4:	4413      	add	r3, r2
    11a6:	60fb      	str	r3, [r7, #12]
        MP_STATE_VM(qstr_last_used) += n_bytes;
    11a8:	4b18      	ldr	r3, [pc, #96]	; (120c <qstr_from_strn+0x176>)
    11aa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    11ae:	697b      	ldr	r3, [r7, #20]
    11b0:	4413      	add	r3, r2
    11b2:	4a16      	ldr	r2, [pc, #88]	; (120c <qstr_from_strn+0x176>)
    11b4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    11b8:	6839      	ldr	r1, [r7, #0]
    11ba:	6878      	ldr	r0, [r7, #4]
    11bc:	f7ff fe58 	bl	e70 <qstr_compute_hash>
    11c0:	60b8      	str	r0, [r7, #8]
        Q_SET_HASH(q_ptr, hash);
    11c2:	68bb      	ldr	r3, [r7, #8]
    11c4:	b2da      	uxtb	r2, r3
    11c6:	68fb      	ldr	r3, [r7, #12]
    11c8:	701a      	strb	r2, [r3, #0]
        Q_SET_LENGTH(q_ptr, len);
    11ca:	68fb      	ldr	r3, [r7, #12]
    11cc:	3301      	adds	r3, #1
    11ce:	683a      	ldr	r2, [r7, #0]
    11d0:	b2d2      	uxtb	r2, r2
    11d2:	701a      	strb	r2, [r3, #0]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    11d4:	68fb      	ldr	r3, [r7, #12]
    11d6:	3302      	adds	r3, #2
    11d8:	683a      	ldr	r2, [r7, #0]
    11da:	6879      	ldr	r1, [r7, #4]
    11dc:	4618      	mov	r0, r3
    11de:	f01b fc7b 	bl	1cad8 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    11e2:	683b      	ldr	r3, [r7, #0]
    11e4:	3302      	adds	r3, #2
    11e6:	68fa      	ldr	r2, [r7, #12]
    11e8:	4413      	add	r3, r2
    11ea:	2200      	movs	r2, #0
    11ec:	701a      	strb	r2, [r3, #0]
        q = qstr_add(q_ptr);
    11ee:	68f8      	ldr	r0, [r7, #12]
    11f0:	f7ff fe9c 	bl	f2c <qstr_add>
    11f4:	61f8      	str	r0, [r7, #28]
    }
    QSTR_EXIT();
    return q;
    11f6:	69fb      	ldr	r3, [r7, #28]
}
    11f8:	4618      	mov	r0, r3
    11fa:	3720      	adds	r7, #32
    11fc:	46bd      	mov	sp, r7
    11fe:	bd80      	pop	{r7, pc}
    1200:	0001f434 	.word	0x0001f434
    1204:	0001f474 	.word	0x0001f474
    1208:	0001f464 	.word	0x0001f464
    120c:	200012f0 	.word	0x200012f0

00001210 <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    1210:	b580      	push	{r7, lr}
    1212:	b082      	sub	sp, #8
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
    return Q_GET_HASH(find_qstr(q));
    1218:	6878      	ldr	r0, [r7, #4]
    121a:	f7ff fe67 	bl	eec <find_qstr>
    121e:	4603      	mov	r3, r0
    1220:	781b      	ldrb	r3, [r3, #0]
}
    1222:	4618      	mov	r0, r3
    1224:	3708      	adds	r7, #8
    1226:	46bd      	mov	sp, r7
    1228:	bd80      	pop	{r7, pc}

0000122a <qstr_len>:

size_t qstr_len(qstr q) {
    122a:	b580      	push	{r7, lr}
    122c:	b084      	sub	sp, #16
    122e:	af00      	add	r7, sp, #0
    1230:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    1232:	6878      	ldr	r0, [r7, #4]
    1234:	f7ff fe5a 	bl	eec <find_qstr>
    1238:	60f8      	str	r0, [r7, #12]
    return Q_GET_LENGTH(qd);
    123a:	68fb      	ldr	r3, [r7, #12]
    123c:	3301      	adds	r3, #1
    123e:	781b      	ldrb	r3, [r3, #0]
}
    1240:	4618      	mov	r0, r3
    1242:	3710      	adds	r7, #16
    1244:	46bd      	mov	sp, r7
    1246:	bd80      	pop	{r7, pc}

00001248 <qstr_str>:

const char *qstr_str(qstr q) {
    1248:	b580      	push	{r7, lr}
    124a:	b084      	sub	sp, #16
    124c:	af00      	add	r7, sp, #0
    124e:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    1250:	6878      	ldr	r0, [r7, #4]
    1252:	f7ff fe4b 	bl	eec <find_qstr>
    1256:	60f8      	str	r0, [r7, #12]
    return (const char*)Q_GET_DATA(qd);
    1258:	68fb      	ldr	r3, [r7, #12]
    125a:	3302      	adds	r3, #2
}
    125c:	4618      	mov	r0, r3
    125e:	3710      	adds	r7, #16
    1260:	46bd      	mov	sp, r7
    1262:	bd80      	pop	{r7, pc}

00001264 <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    1264:	b580      	push	{r7, lr}
    1266:	b084      	sub	sp, #16
    1268:	af00      	add	r7, sp, #0
    126a:	6078      	str	r0, [r7, #4]
    126c:	6039      	str	r1, [r7, #0]
    const byte *qd = find_qstr(q);
    126e:	6878      	ldr	r0, [r7, #4]
    1270:	f7ff fe3c 	bl	eec <find_qstr>
    1274:	60f8      	str	r0, [r7, #12]
    *len = Q_GET_LENGTH(qd);
    1276:	68fb      	ldr	r3, [r7, #12]
    1278:	3301      	adds	r3, #1
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	461a      	mov	r2, r3
    127e:	683b      	ldr	r3, [r7, #0]
    1280:	601a      	str	r2, [r3, #0]
    return Q_GET_DATA(qd);
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	3302      	adds	r3, #2
}
    1286:	4618      	mov	r0, r3
    1288:	3710      	adds	r7, #16
    128a:	46bd      	mov	sp, r7
    128c:	bd80      	pop	{r7, pc}

0000128e <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    128e:	b580      	push	{r7, lr}
    1290:	b088      	sub	sp, #32
    1292:	af00      	add	r7, sp, #0
    1294:	60f8      	str	r0, [r7, #12]
    1296:	60b9      	str	r1, [r7, #8]
    1298:	607a      	str	r2, [r7, #4]
    129a:	603b      	str	r3, [r7, #0]
    QSTR_ENTER();
    *n_pool = 0;
    129c:	68fb      	ldr	r3, [r7, #12]
    129e:	2200      	movs	r2, #0
    12a0:	601a      	str	r2, [r3, #0]
    *n_qstr = 0;
    12a2:	68bb      	ldr	r3, [r7, #8]
    12a4:	2200      	movs	r2, #0
    12a6:	601a      	str	r2, [r3, #0]
    *n_str_data_bytes = 0;
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	2200      	movs	r2, #0
    12ac:	601a      	str	r2, [r3, #0]
    *n_total_bytes = 0;
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	2200      	movs	r2, #0
    12b2:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    12b4:	4b25      	ldr	r3, [pc, #148]	; (134c <qstr_pool_info+0xbe>)
    12b6:	691b      	ldr	r3, [r3, #16]
    12b8:	61fb      	str	r3, [r7, #28]
    12ba:	e034      	b.n	1326 <qstr_pool_info+0x98>
        *n_pool += 1;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	1c5a      	adds	r2, r3, #1
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	601a      	str	r2, [r3, #0]
        *n_qstr += pool->len;
    12c6:	68bb      	ldr	r3, [r7, #8]
    12c8:	681a      	ldr	r2, [r3, #0]
    12ca:	69fb      	ldr	r3, [r7, #28]
    12cc:	68db      	ldr	r3, [r3, #12]
    12ce:	441a      	add	r2, r3
    12d0:	68bb      	ldr	r3, [r7, #8]
    12d2:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    12d4:	69fb      	ldr	r3, [r7, #28]
    12d6:	3310      	adds	r3, #16
    12d8:	61bb      	str	r3, [r7, #24]
    12da:	69fb      	ldr	r3, [r7, #28]
    12dc:	f103 0210 	add.w	r2, r3, #16
    12e0:	69fb      	ldr	r3, [r7, #28]
    12e2:	68db      	ldr	r3, [r3, #12]
    12e4:	009b      	lsls	r3, r3, #2
    12e6:	4413      	add	r3, r2
    12e8:	617b      	str	r3, [r7, #20]
    12ea:	e00c      	b.n	1306 <qstr_pool_info+0x78>
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	69ba      	ldr	r2, [r7, #24]
    12f2:	6812      	ldr	r2, [r2, #0]
    12f4:	3201      	adds	r2, #1
    12f6:	7812      	ldrb	r2, [r2, #0]
    12f8:	4413      	add	r3, r2
    12fa:	1cda      	adds	r2, r3, #3
    12fc:	687b      	ldr	r3, [r7, #4]
    12fe:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1300:	69bb      	ldr	r3, [r7, #24]
    1302:	3304      	adds	r3, #4
    1304:	61bb      	str	r3, [r7, #24]
    1306:	69ba      	ldr	r2, [r7, #24]
    1308:	697b      	ldr	r3, [r7, #20]
    130a:	429a      	cmp	r2, r3
    130c:	d3ee      	bcc.n	12ec <qstr_pool_info+0x5e>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    130e:	69f8      	ldr	r0, [r7, #28]
    1310:	f7ff fba2 	bl	a58 <gc_nbytes>
    1314:	4602      	mov	r2, r0
    1316:	683b      	ldr	r3, [r7, #0]
    1318:	681b      	ldr	r3, [r3, #0]
    131a:	441a      	add	r2, r3
    131c:	683b      	ldr	r3, [r7, #0]
    131e:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    1320:	69fb      	ldr	r3, [r7, #28]
    1322:	681b      	ldr	r3, [r3, #0]
    1324:	61fb      	str	r3, [r7, #28]
    1326:	69fb      	ldr	r3, [r7, #28]
    1328:	2b00      	cmp	r3, #0
    132a:	d003      	beq.n	1334 <qstr_pool_info+0xa6>
    132c:	69fb      	ldr	r3, [r7, #28]
    132e:	4a08      	ldr	r2, [pc, #32]	; (1350 <qstr_pool_info+0xc2>)
    1330:	4293      	cmp	r3, r2
    1332:	d1c3      	bne.n	12bc <qstr_pool_info+0x2e>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    1334:	683b      	ldr	r3, [r7, #0]
    1336:	681a      	ldr	r2, [r3, #0]
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	681b      	ldr	r3, [r3, #0]
    133c:	441a      	add	r2, r3
    133e:	683b      	ldr	r3, [r7, #0]
    1340:	601a      	str	r2, [r3, #0]
    QSTR_EXIT();
}
    1342:	bf00      	nop
    1344:	3720      	adds	r7, #32
    1346:	46bd      	mov	sp, r7
    1348:	bd80      	pop	{r7, pc}
    134a:	bf00      	nop
    134c:	200012f0 	.word	0x200012f0
    1350:	00025930 	.word	0x00025930

00001354 <vstr_init>:

// returned value is always at least 1 greater than argument
#define ROUND_ALLOC(a) (((a) & ((~0U) - 7)) + 8)

// Init the vstr so it allocs exactly given number of bytes.  Set length to zero.
void vstr_init(vstr_t *vstr, size_t alloc) {
    1354:	b580      	push	{r7, lr}
    1356:	b082      	sub	sp, #8
    1358:	af00      	add	r7, sp, #0
    135a:	6078      	str	r0, [r7, #4]
    135c:	6039      	str	r1, [r7, #0]
    if (alloc < 1) {
    135e:	683b      	ldr	r3, [r7, #0]
    1360:	2b00      	cmp	r3, #0
    1362:	d101      	bne.n	1368 <vstr_init+0x14>
        alloc = 1;
    1364:	2301      	movs	r3, #1
    1366:	603b      	str	r3, [r7, #0]
    }
    vstr->alloc = alloc;
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	683a      	ldr	r2, [r7, #0]
    136c:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    136e:	687b      	ldr	r3, [r7, #4]
    1370:	2200      	movs	r2, #0
    1372:	605a      	str	r2, [r3, #4]
    vstr->buf = m_new(char, vstr->alloc);
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	681b      	ldr	r3, [r3, #0]
    1378:	4618      	mov	r0, r3
    137a:	f7fe ffcf 	bl	31c <m_malloc>
    137e:	4602      	mov	r2, r0
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = false;
    1384:	687a      	ldr	r2, [r7, #4]
    1386:	7b13      	ldrb	r3, [r2, #12]
    1388:	f36f 0300 	bfc	r3, #0, #1
    138c:	7313      	strb	r3, [r2, #12]
}
    138e:	bf00      	nop
    1390:	3708      	adds	r7, #8
    1392:	46bd      	mov	sp, r7
    1394:	bd80      	pop	{r7, pc}

00001396 <vstr_init_len>:

// Init the vstr so it allocs exactly enough ram to hold a null-terminated
// string of the given length, and set the length.
void vstr_init_len(vstr_t *vstr, size_t len) {
    1396:	b580      	push	{r7, lr}
    1398:	b082      	sub	sp, #8
    139a:	af00      	add	r7, sp, #0
    139c:	6078      	str	r0, [r7, #4]
    139e:	6039      	str	r1, [r7, #0]
    vstr_init(vstr, len + 1);
    13a0:	683b      	ldr	r3, [r7, #0]
    13a2:	3301      	adds	r3, #1
    13a4:	4619      	mov	r1, r3
    13a6:	6878      	ldr	r0, [r7, #4]
    13a8:	f7ff ffd4 	bl	1354 <vstr_init>
    vstr->len = len;
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	683a      	ldr	r2, [r7, #0]
    13b0:	605a      	str	r2, [r3, #4]
}
    13b2:	bf00      	nop
    13b4:	3708      	adds	r7, #8
    13b6:	46bd      	mov	sp, r7
    13b8:	bd80      	pop	{r7, pc}

000013ba <vstr_init_fixed_buf>:

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    13ba:	b480      	push	{r7}
    13bc:	b085      	sub	sp, #20
    13be:	af00      	add	r7, sp, #0
    13c0:	60f8      	str	r0, [r7, #12]
    13c2:	60b9      	str	r1, [r7, #8]
    13c4:	607a      	str	r2, [r7, #4]
    vstr->alloc = alloc;
    13c6:	68fb      	ldr	r3, [r7, #12]
    13c8:	68ba      	ldr	r2, [r7, #8]
    13ca:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    13cc:	68fb      	ldr	r3, [r7, #12]
    13ce:	2200      	movs	r2, #0
    13d0:	605a      	str	r2, [r3, #4]
    vstr->buf = buf;
    13d2:	68fb      	ldr	r3, [r7, #12]
    13d4:	687a      	ldr	r2, [r7, #4]
    13d6:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = true;
    13d8:	68fa      	ldr	r2, [r7, #12]
    13da:	7b13      	ldrb	r3, [r2, #12]
    13dc:	f043 0301 	orr.w	r3, r3, #1
    13e0:	7313      	strb	r3, [r2, #12]
}
    13e2:	bf00      	nop
    13e4:	3714      	adds	r7, #20
    13e6:	46bd      	mov	sp, r7
    13e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    13ec:	4770      	bx	lr

000013ee <vstr_init_print>:

void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    13ee:	b580      	push	{r7, lr}
    13f0:	b084      	sub	sp, #16
    13f2:	af00      	add	r7, sp, #0
    13f4:	60f8      	str	r0, [r7, #12]
    13f6:	60b9      	str	r1, [r7, #8]
    13f8:	607a      	str	r2, [r7, #4]
    vstr_init(vstr, alloc);
    13fa:	68b9      	ldr	r1, [r7, #8]
    13fc:	68f8      	ldr	r0, [r7, #12]
    13fe:	f7ff ffa9 	bl	1354 <vstr_init>
    print->data = vstr;
    1402:	687b      	ldr	r3, [r7, #4]
    1404:	68fa      	ldr	r2, [r7, #12]
    1406:	601a      	str	r2, [r3, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	4a03      	ldr	r2, [pc, #12]	; (1418 <vstr_init_print+0x2a>)
    140c:	605a      	str	r2, [r3, #4]
}
    140e:	bf00      	nop
    1410:	3710      	adds	r7, #16
    1412:	46bd      	mov	sp, r7
    1414:	bd80      	pop	{r7, pc}
    1416:	bf00      	nop
    1418:	0000165f 	.word	0x0000165f

0000141c <vstr_clear>:

void vstr_clear(vstr_t *vstr) {
    141c:	b580      	push	{r7, lr}
    141e:	b082      	sub	sp, #8
    1420:	af00      	add	r7, sp, #0
    1422:	6078      	str	r0, [r7, #4]
    if (!vstr->fixed_buf) {
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	7b1b      	ldrb	r3, [r3, #12]
    1428:	f3c3 0300 	ubfx	r3, r3, #0, #1
    142c:	b2db      	uxtb	r3, r3
    142e:	f083 0301 	eor.w	r3, r3, #1
    1432:	b2db      	uxtb	r3, r3
    1434:	2b00      	cmp	r3, #0
    1436:	d004      	beq.n	1442 <vstr_clear+0x26>
        m_del(char, vstr->buf, vstr->alloc);
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	689b      	ldr	r3, [r3, #8]
    143c:	4618      	mov	r0, r3
    143e:	f7fe ffcb 	bl	3d8 <m_free>
    }
    vstr->buf = NULL;
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	2200      	movs	r2, #0
    1446:	609a      	str	r2, [r3, #8]
}
    1448:	bf00      	nop
    144a:	3708      	adds	r7, #8
    144c:	46bd      	mov	sp, r7
    144e:	bd80      	pop	{r7, pc}

00001450 <vstr_new>:

vstr_t *vstr_new(size_t alloc) {
    1450:	b580      	push	{r7, lr}
    1452:	b084      	sub	sp, #16
    1454:	af00      	add	r7, sp, #0
    1456:	6078      	str	r0, [r7, #4]
    vstr_t *vstr = m_new_obj(vstr_t);
    1458:	2010      	movs	r0, #16
    145a:	f7fe ff5f 	bl	31c <m_malloc>
    145e:	60f8      	str	r0, [r7, #12]
    vstr_init(vstr, alloc);
    1460:	6879      	ldr	r1, [r7, #4]
    1462:	68f8      	ldr	r0, [r7, #12]
    1464:	f7ff ff76 	bl	1354 <vstr_init>
    return vstr;
    1468:	68fb      	ldr	r3, [r7, #12]
}
    146a:	4618      	mov	r0, r3
    146c:	3710      	adds	r7, #16
    146e:	46bd      	mov	sp, r7
    1470:	bd80      	pop	{r7, pc}

00001472 <vstr_free>:

void vstr_free(vstr_t *vstr) {
    1472:	b580      	push	{r7, lr}
    1474:	b082      	sub	sp, #8
    1476:	af00      	add	r7, sp, #0
    1478:	6078      	str	r0, [r7, #4]
    if (vstr != NULL) {
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	2b00      	cmp	r3, #0
    147e:	d011      	beq.n	14a4 <vstr_free+0x32>
        if (!vstr->fixed_buf) {
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	7b1b      	ldrb	r3, [r3, #12]
    1484:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1488:	b2db      	uxtb	r3, r3
    148a:	f083 0301 	eor.w	r3, r3, #1
    148e:	b2db      	uxtb	r3, r3
    1490:	2b00      	cmp	r3, #0
    1492:	d004      	beq.n	149e <vstr_free+0x2c>
            m_del(char, vstr->buf, vstr->alloc);
    1494:	687b      	ldr	r3, [r7, #4]
    1496:	689b      	ldr	r3, [r3, #8]
    1498:	4618      	mov	r0, r3
    149a:	f7fe ff9d 	bl	3d8 <m_free>
        }
        m_del_obj(vstr_t, vstr);
    149e:	6878      	ldr	r0, [r7, #4]
    14a0:	f7fe ff9a 	bl	3d8 <m_free>
    }
}
    14a4:	bf00      	nop
    14a6:	3708      	adds	r7, #8
    14a8:	46bd      	mov	sp, r7
    14aa:	bd80      	pop	{r7, pc}

000014ac <vstr_extend>:

// Extend vstr strictly by requested size, return pointer to newly added chunk.
char *vstr_extend(vstr_t *vstr, size_t size) {
    14ac:	b580      	push	{r7, lr}
    14ae:	b084      	sub	sp, #16
    14b0:	af00      	add	r7, sp, #0
    14b2:	6078      	str	r0, [r7, #4]
    14b4:	6039      	str	r1, [r7, #0]
    if (vstr->fixed_buf) {
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	7b1b      	ldrb	r3, [r3, #12]
    14ba:	f003 0301 	and.w	r3, r3, #1
    14be:	b2db      	uxtb	r3, r3
    14c0:	2b00      	cmp	r3, #0
    14c2:	d003      	beq.n	14cc <vstr_extend+0x20>
        // We can't reallocate, and the caller is expecting the space to
        // be there, so the only safe option is to raise an exception.
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    14c4:	2100      	movs	r1, #0
    14c6:	4810      	ldr	r0, [pc, #64]	; (1508 <vstr_extend+0x5c>)
    14c8:	f00b fcac 	bl	ce24 <mp_raise_msg>
    }
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    14cc:	687b      	ldr	r3, [r7, #4]
    14ce:	6898      	ldr	r0, [r3, #8]
    14d0:	687b      	ldr	r3, [r7, #4]
    14d2:	681a      	ldr	r2, [r3, #0]
    14d4:	683b      	ldr	r3, [r7, #0]
    14d6:	4413      	add	r3, r2
    14d8:	4619      	mov	r1, r3
    14da:	f7fe ff51 	bl	380 <m_realloc>
    14de:	60f8      	str	r0, [r7, #12]
    char *p = new_buf + vstr->alloc;
    14e0:	687b      	ldr	r3, [r7, #4]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	68fa      	ldr	r2, [r7, #12]
    14e6:	4413      	add	r3, r2
    14e8:	60bb      	str	r3, [r7, #8]
    vstr->alloc += size;
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	681a      	ldr	r2, [r3, #0]
    14ee:	683b      	ldr	r3, [r7, #0]
    14f0:	441a      	add	r2, r3
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	601a      	str	r2, [r3, #0]
    vstr->buf = new_buf;
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	68fa      	ldr	r2, [r7, #12]
    14fa:	609a      	str	r2, [r3, #8]
    return p;
    14fc:	68bb      	ldr	r3, [r7, #8]
}
    14fe:	4618      	mov	r0, r3
    1500:	3710      	adds	r7, #16
    1502:	46bd      	mov	sp, r7
    1504:	bd80      	pop	{r7, pc}
    1506:	bf00      	nop
    1508:	000222b8 	.word	0x000222b8

0000150c <vstr_ensure_extra>:

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    150c:	b580      	push	{r7, lr}
    150e:	b084      	sub	sp, #16
    1510:	af00      	add	r7, sp, #0
    1512:	6078      	str	r0, [r7, #4]
    1514:	6039      	str	r1, [r7, #0]
    if (vstr->len + size > vstr->alloc) {
    1516:	687b      	ldr	r3, [r7, #4]
    1518:	685a      	ldr	r2, [r3, #4]
    151a:	683b      	ldr	r3, [r7, #0]
    151c:	441a      	add	r2, r3
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	681b      	ldr	r3, [r3, #0]
    1522:	429a      	cmp	r2, r3
    1524:	d920      	bls.n	1568 <vstr_ensure_extra+0x5c>
        if (vstr->fixed_buf) {
    1526:	687b      	ldr	r3, [r7, #4]
    1528:	7b1b      	ldrb	r3, [r3, #12]
    152a:	f003 0301 	and.w	r3, r3, #1
    152e:	b2db      	uxtb	r3, r3
    1530:	2b00      	cmp	r3, #0
    1532:	d003      	beq.n	153c <vstr_ensure_extra+0x30>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    1534:	2100      	movs	r1, #0
    1536:	480e      	ldr	r0, [pc, #56]	; (1570 <vstr_ensure_extra+0x64>)
    1538:	f00b fc74 	bl	ce24 <mp_raise_msg>
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    153c:	687b      	ldr	r3, [r7, #4]
    153e:	685a      	ldr	r2, [r3, #4]
    1540:	683b      	ldr	r3, [r7, #0]
    1542:	4413      	add	r3, r2
    1544:	3310      	adds	r3, #16
    1546:	f023 0307 	bic.w	r3, r3, #7
    154a:	3308      	adds	r3, #8
    154c:	60fb      	str	r3, [r7, #12]
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	689b      	ldr	r3, [r3, #8]
    1552:	68f9      	ldr	r1, [r7, #12]
    1554:	4618      	mov	r0, r3
    1556:	f7fe ff13 	bl	380 <m_realloc>
    155a:	60b8      	str	r0, [r7, #8]
        vstr->alloc = new_alloc;
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	68fa      	ldr	r2, [r7, #12]
    1560:	601a      	str	r2, [r3, #0]
        vstr->buf = new_buf;
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	68ba      	ldr	r2, [r7, #8]
    1566:	609a      	str	r2, [r3, #8]
    }
}
    1568:	bf00      	nop
    156a:	3710      	adds	r7, #16
    156c:	46bd      	mov	sp, r7
    156e:	bd80      	pop	{r7, pc}
    1570:	000222b8 	.word	0x000222b8

00001574 <vstr_hint_size>:

void vstr_hint_size(vstr_t *vstr, size_t size) {
    1574:	b580      	push	{r7, lr}
    1576:	b082      	sub	sp, #8
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
    157c:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, size);
    157e:	6839      	ldr	r1, [r7, #0]
    1580:	6878      	ldr	r0, [r7, #4]
    1582:	f7ff ffc3 	bl	150c <vstr_ensure_extra>
}
    1586:	bf00      	nop
    1588:	3708      	adds	r7, #8
    158a:	46bd      	mov	sp, r7
    158c:	bd80      	pop	{r7, pc}

0000158e <vstr_add_len>:

char *vstr_add_len(vstr_t *vstr, size_t len) {
    158e:	b580      	push	{r7, lr}
    1590:	b084      	sub	sp, #16
    1592:	af00      	add	r7, sp, #0
    1594:	6078      	str	r0, [r7, #4]
    1596:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, len);
    1598:	6839      	ldr	r1, [r7, #0]
    159a:	6878      	ldr	r0, [r7, #4]
    159c:	f7ff ffb6 	bl	150c <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    15a0:	687b      	ldr	r3, [r7, #4]
    15a2:	689a      	ldr	r2, [r3, #8]
    15a4:	687b      	ldr	r3, [r7, #4]
    15a6:	685b      	ldr	r3, [r3, #4]
    15a8:	4413      	add	r3, r2
    15aa:	60fb      	str	r3, [r7, #12]
    vstr->len += len;
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	685a      	ldr	r2, [r3, #4]
    15b0:	683b      	ldr	r3, [r7, #0]
    15b2:	441a      	add	r2, r3
    15b4:	687b      	ldr	r3, [r7, #4]
    15b6:	605a      	str	r2, [r3, #4]
    return buf;
    15b8:	68fb      	ldr	r3, [r7, #12]
}
    15ba:	4618      	mov	r0, r3
    15bc:	3710      	adds	r7, #16
    15be:	46bd      	mov	sp, r7
    15c0:	bd80      	pop	{r7, pc}

000015c2 <vstr_null_terminated_str>:

// Doesn't increase len, just makes sure there is a null byte at the end
char *vstr_null_terminated_str(vstr_t *vstr) {
    15c2:	b580      	push	{r7, lr}
    15c4:	b082      	sub	sp, #8
    15c6:	af00      	add	r7, sp, #0
    15c8:	6078      	str	r0, [r7, #4]
    // If there's no more room, add single byte
    if (vstr->alloc == vstr->len) {
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	681a      	ldr	r2, [r3, #0]
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	685b      	ldr	r3, [r3, #4]
    15d2:	429a      	cmp	r2, r3
    15d4:	d103      	bne.n	15de <vstr_null_terminated_str+0x1c>
        vstr_extend(vstr, 1);
    15d6:	2101      	movs	r1, #1
    15d8:	6878      	ldr	r0, [r7, #4]
    15da:	f7ff ff67 	bl	14ac <vstr_extend>
    }
    vstr->buf[vstr->len] = '\0';
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	689a      	ldr	r2, [r3, #8]
    15e2:	687b      	ldr	r3, [r7, #4]
    15e4:	685b      	ldr	r3, [r3, #4]
    15e6:	4413      	add	r3, r2
    15e8:	2200      	movs	r2, #0
    15ea:	701a      	strb	r2, [r3, #0]
    return vstr->buf;
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	689b      	ldr	r3, [r3, #8]
}
    15f0:	4618      	mov	r0, r3
    15f2:	3708      	adds	r7, #8
    15f4:	46bd      	mov	sp, r7
    15f6:	bd80      	pop	{r7, pc}

000015f8 <vstr_add_byte>:

void vstr_add_byte(vstr_t *vstr, byte b) {
    15f8:	b580      	push	{r7, lr}
    15fa:	b084      	sub	sp, #16
    15fc:	af00      	add	r7, sp, #0
    15fe:	6078      	str	r0, [r7, #4]
    1600:	460b      	mov	r3, r1
    1602:	70fb      	strb	r3, [r7, #3]
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    1604:	2101      	movs	r1, #1
    1606:	6878      	ldr	r0, [r7, #4]
    1608:	f7ff ffc1 	bl	158e <vstr_add_len>
    160c:	60f8      	str	r0, [r7, #12]
    buf[0] = b;
    160e:	68fb      	ldr	r3, [r7, #12]
    1610:	78fa      	ldrb	r2, [r7, #3]
    1612:	701a      	strb	r2, [r3, #0]
}
    1614:	bf00      	nop
    1616:	3710      	adds	r7, #16
    1618:	46bd      	mov	sp, r7
    161a:	bd80      	pop	{r7, pc}

0000161c <vstr_add_char>:

void vstr_add_char(vstr_t *vstr, unichar c) {
    161c:	b580      	push	{r7, lr}
    161e:	b082      	sub	sp, #8
    1620:	af00      	add	r7, sp, #0
    1622:	6078      	str	r0, [r7, #4]
    1624:	6039      	str	r1, [r7, #0]
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
#else
    vstr_add_byte(vstr, c);
    1626:	683b      	ldr	r3, [r7, #0]
    1628:	b2db      	uxtb	r3, r3
    162a:	4619      	mov	r1, r3
    162c:	6878      	ldr	r0, [r7, #4]
    162e:	f7ff ffe3 	bl	15f8 <vstr_add_byte>
#endif
}
    1632:	bf00      	nop
    1634:	3708      	adds	r7, #8
    1636:	46bd      	mov	sp, r7
    1638:	bd80      	pop	{r7, pc}

0000163a <vstr_add_str>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    163a:	b580      	push	{r7, lr}
    163c:	b082      	sub	sp, #8
    163e:	af00      	add	r7, sp, #0
    1640:	6078      	str	r0, [r7, #4]
    1642:	6039      	str	r1, [r7, #0]
    vstr_add_strn(vstr, str, strlen(str));
    1644:	6838      	ldr	r0, [r7, #0]
    1646:	f01b fb7d 	bl	1cd44 <strlen>
    164a:	4603      	mov	r3, r0
    164c:	461a      	mov	r2, r3
    164e:	6839      	ldr	r1, [r7, #0]
    1650:	6878      	ldr	r0, [r7, #4]
    1652:	f000 f804 	bl	165e <vstr_add_strn>
}
    1656:	bf00      	nop
    1658:	3708      	adds	r7, #8
    165a:	46bd      	mov	sp, r7
    165c:	bd80      	pop	{r7, pc}

0000165e <vstr_add_strn>:

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    165e:	b580      	push	{r7, lr}
    1660:	b084      	sub	sp, #16
    1662:	af00      	add	r7, sp, #0
    1664:	60f8      	str	r0, [r7, #12]
    1666:	60b9      	str	r1, [r7, #8]
    1668:	607a      	str	r2, [r7, #4]
    vstr_ensure_extra(vstr, len);
    166a:	6879      	ldr	r1, [r7, #4]
    166c:	68f8      	ldr	r0, [r7, #12]
    166e:	f7ff ff4d 	bl	150c <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	689a      	ldr	r2, [r3, #8]
    1676:	68fb      	ldr	r3, [r7, #12]
    1678:	685b      	ldr	r3, [r3, #4]
    167a:	4413      	add	r3, r2
    167c:	687a      	ldr	r2, [r7, #4]
    167e:	68b9      	ldr	r1, [r7, #8]
    1680:	4618      	mov	r0, r3
    1682:	f01b fa8e 	bl	1cba2 <memmove>
    vstr->len += len;
    1686:	68fb      	ldr	r3, [r7, #12]
    1688:	685a      	ldr	r2, [r3, #4]
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	441a      	add	r2, r3
    168e:	68fb      	ldr	r3, [r7, #12]
    1690:	605a      	str	r2, [r3, #4]
}
    1692:	bf00      	nop
    1694:	3710      	adds	r7, #16
    1696:	46bd      	mov	sp, r7
    1698:	bd80      	pop	{r7, pc}

0000169a <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    169a:	b580      	push	{r7, lr}
    169c:	b086      	sub	sp, #24
    169e:	af00      	add	r7, sp, #0
    16a0:	60f8      	str	r0, [r7, #12]
    16a2:	60b9      	str	r1, [r7, #8]
    16a4:	607a      	str	r2, [r7, #4]
    size_t l = vstr->len;
    16a6:	68fb      	ldr	r3, [r7, #12]
    16a8:	685b      	ldr	r3, [r3, #4]
    16aa:	617b      	str	r3, [r7, #20]
    if (byte_pos > l) {
    16ac:	68ba      	ldr	r2, [r7, #8]
    16ae:	697b      	ldr	r3, [r7, #20]
    16b0:	429a      	cmp	r2, r3
    16b2:	d901      	bls.n	16b8 <vstr_ins_blank_bytes+0x1e>
        byte_pos = l;
    16b4:	697b      	ldr	r3, [r7, #20]
    16b6:	60bb      	str	r3, [r7, #8]
    }
    if (byte_len > 0) {
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	2b00      	cmp	r3, #0
    16bc:	d019      	beq.n	16f2 <vstr_ins_blank_bytes+0x58>
        // ensure room for the new bytes
        vstr_ensure_extra(vstr, byte_len);
    16be:	6879      	ldr	r1, [r7, #4]
    16c0:	68f8      	ldr	r0, [r7, #12]
    16c2:	f7ff ff23 	bl	150c <vstr_ensure_extra>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    16c6:	68fb      	ldr	r3, [r7, #12]
    16c8:	689a      	ldr	r2, [r3, #8]
    16ca:	68b9      	ldr	r1, [r7, #8]
    16cc:	687b      	ldr	r3, [r7, #4]
    16ce:	440b      	add	r3, r1
    16d0:	18d0      	adds	r0, r2, r3
    16d2:	68fb      	ldr	r3, [r7, #12]
    16d4:	689a      	ldr	r2, [r3, #8]
    16d6:	68bb      	ldr	r3, [r7, #8]
    16d8:	18d1      	adds	r1, r2, r3
    16da:	697a      	ldr	r2, [r7, #20]
    16dc:	68bb      	ldr	r3, [r7, #8]
    16de:	1ad3      	subs	r3, r2, r3
    16e0:	461a      	mov	r2, r3
    16e2:	f01b fa5e 	bl	1cba2 <memmove>
        // increase the length
        vstr->len += byte_len;
    16e6:	68fb      	ldr	r3, [r7, #12]
    16e8:	685a      	ldr	r2, [r3, #4]
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	441a      	add	r2, r3
    16ee:	68fb      	ldr	r3, [r7, #12]
    16f0:	605a      	str	r2, [r3, #4]
    }
    return vstr->buf + byte_pos;
    16f2:	68fb      	ldr	r3, [r7, #12]
    16f4:	689a      	ldr	r2, [r3, #8]
    16f6:	68bb      	ldr	r3, [r7, #8]
    16f8:	4413      	add	r3, r2
}
    16fa:	4618      	mov	r0, r3
    16fc:	3718      	adds	r7, #24
    16fe:	46bd      	mov	sp, r7
    1700:	bd80      	pop	{r7, pc}

00001702 <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    1702:	b580      	push	{r7, lr}
    1704:	b086      	sub	sp, #24
    1706:	af00      	add	r7, sp, #0
    1708:	60f8      	str	r0, [r7, #12]
    170a:	60b9      	str	r1, [r7, #8]
    170c:	4613      	mov	r3, r2
    170e:	71fb      	strb	r3, [r7, #7]
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    1710:	2201      	movs	r2, #1
    1712:	68b9      	ldr	r1, [r7, #8]
    1714:	68f8      	ldr	r0, [r7, #12]
    1716:	f7ff ffc0 	bl	169a <vstr_ins_blank_bytes>
    171a:	6178      	str	r0, [r7, #20]
    *s = b;
    171c:	697b      	ldr	r3, [r7, #20]
    171e:	79fa      	ldrb	r2, [r7, #7]
    1720:	701a      	strb	r2, [r3, #0]
}
    1722:	bf00      	nop
    1724:	3718      	adds	r7, #24
    1726:	46bd      	mov	sp, r7
    1728:	bd80      	pop	{r7, pc}

0000172a <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    172a:	b580      	push	{r7, lr}
    172c:	b086      	sub	sp, #24
    172e:	af00      	add	r7, sp, #0
    1730:	60f8      	str	r0, [r7, #12]
    1732:	60b9      	str	r1, [r7, #8]
    1734:	607a      	str	r2, [r7, #4]
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    1736:	2201      	movs	r2, #1
    1738:	68b9      	ldr	r1, [r7, #8]
    173a:	68f8      	ldr	r0, [r7, #12]
    173c:	f7ff ffad 	bl	169a <vstr_ins_blank_bytes>
    1740:	6178      	str	r0, [r7, #20]
    *s = chr;
    1742:	687b      	ldr	r3, [r7, #4]
    1744:	b2da      	uxtb	r2, r3
    1746:	697b      	ldr	r3, [r7, #20]
    1748:	701a      	strb	r2, [r3, #0]
}
    174a:	bf00      	nop
    174c:	3718      	adds	r7, #24
    174e:	46bd      	mov	sp, r7
    1750:	bd80      	pop	{r7, pc}

00001752 <vstr_cut_head_bytes>:

void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    1752:	b580      	push	{r7, lr}
    1754:	b082      	sub	sp, #8
    1756:	af00      	add	r7, sp, #0
    1758:	6078      	str	r0, [r7, #4]
    175a:	6039      	str	r1, [r7, #0]
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
    175c:	683a      	ldr	r2, [r7, #0]
    175e:	2100      	movs	r1, #0
    1760:	6878      	ldr	r0, [r7, #4]
    1762:	f000 f81e 	bl	17a2 <vstr_cut_out_bytes>
}
    1766:	bf00      	nop
    1768:	3708      	adds	r7, #8
    176a:	46bd      	mov	sp, r7
    176c:	bd80      	pop	{r7, pc}

0000176e <vstr_cut_tail_bytes>:

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    176e:	b480      	push	{r7}
    1770:	b083      	sub	sp, #12
    1772:	af00      	add	r7, sp, #0
    1774:	6078      	str	r0, [r7, #4]
    1776:	6039      	str	r1, [r7, #0]
    if (len > vstr->len) {
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	685a      	ldr	r2, [r3, #4]
    177c:	683b      	ldr	r3, [r7, #0]
    177e:	429a      	cmp	r2, r3
    1780:	d203      	bcs.n	178a <vstr_cut_tail_bytes+0x1c>
        vstr->len = 0;
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	2200      	movs	r2, #0
    1786:	605a      	str	r2, [r3, #4]
    } else {
        vstr->len -= len;
    }
}
    1788:	e005      	b.n	1796 <vstr_cut_tail_bytes+0x28>
        vstr->len -= len;
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	685a      	ldr	r2, [r3, #4]
    178e:	683b      	ldr	r3, [r7, #0]
    1790:	1ad2      	subs	r2, r2, r3
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	605a      	str	r2, [r3, #4]
}
    1796:	bf00      	nop
    1798:	370c      	adds	r7, #12
    179a:	46bd      	mov	sp, r7
    179c:	f85d 7b04 	ldr.w	r7, [sp], #4
    17a0:	4770      	bx	lr

000017a2 <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    17a2:	b580      	push	{r7, lr}
    17a4:	b084      	sub	sp, #16
    17a6:	af00      	add	r7, sp, #0
    17a8:	60f8      	str	r0, [r7, #12]
    17aa:	60b9      	str	r1, [r7, #8]
    17ac:	607a      	str	r2, [r7, #4]
    if (byte_pos >= vstr->len) {
    17ae:	68fb      	ldr	r3, [r7, #12]
    17b0:	685a      	ldr	r2, [r3, #4]
    17b2:	68bb      	ldr	r3, [r7, #8]
    17b4:	429a      	cmp	r2, r3
    17b6:	d924      	bls.n	1802 <vstr_cut_out_bytes+0x60>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    17b8:	68ba      	ldr	r2, [r7, #8]
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	441a      	add	r2, r3
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	685b      	ldr	r3, [r3, #4]
    17c2:	429a      	cmp	r2, r3
    17c4:	d303      	bcc.n	17ce <vstr_cut_out_bytes+0x2c>
        vstr->len = byte_pos;
    17c6:	68fb      	ldr	r3, [r7, #12]
    17c8:	68ba      	ldr	r2, [r7, #8]
    17ca:	605a      	str	r2, [r3, #4]
    17cc:	e01a      	b.n	1804 <vstr_cut_out_bytes+0x62>
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    17ce:	68fb      	ldr	r3, [r7, #12]
    17d0:	689a      	ldr	r2, [r3, #8]
    17d2:	68bb      	ldr	r3, [r7, #8]
    17d4:	18d0      	adds	r0, r2, r3
    17d6:	68fb      	ldr	r3, [r7, #12]
    17d8:	689a      	ldr	r2, [r3, #8]
    17da:	68b9      	ldr	r1, [r7, #8]
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	440b      	add	r3, r1
    17e0:	18d1      	adds	r1, r2, r3
    17e2:	68fb      	ldr	r3, [r7, #12]
    17e4:	685a      	ldr	r2, [r3, #4]
    17e6:	68bb      	ldr	r3, [r7, #8]
    17e8:	1ad2      	subs	r2, r2, r3
    17ea:	687b      	ldr	r3, [r7, #4]
    17ec:	1ad3      	subs	r3, r2, r3
    17ee:	461a      	mov	r2, r3
    17f0:	f01b f9d7 	bl	1cba2 <memmove>
        vstr->len -= bytes_to_cut;
    17f4:	68fb      	ldr	r3, [r7, #12]
    17f6:	685a      	ldr	r2, [r3, #4]
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	1ad2      	subs	r2, r2, r3
    17fc:	68fb      	ldr	r3, [r7, #12]
    17fe:	605a      	str	r2, [r3, #4]
    1800:	e000      	b.n	1804 <vstr_cut_out_bytes+0x62>
        return;
    1802:	bf00      	nop
    }
}
    1804:	3710      	adds	r7, #16
    1806:	46bd      	mov	sp, r7
    1808:	bd80      	pop	{r7, pc}

0000180a <vstr_printf>:

void vstr_printf(vstr_t *vstr, const char *fmt, ...) {
    180a:	b40e      	push	{r1, r2, r3}
    180c:	b580      	push	{r7, lr}
    180e:	b085      	sub	sp, #20
    1810:	af00      	add	r7, sp, #0
    1812:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    1814:	f107 0320 	add.w	r3, r7, #32
    1818:	60fb      	str	r3, [r7, #12]
    vstr_vprintf(vstr, fmt, ap);
    181a:	68fa      	ldr	r2, [r7, #12]
    181c:	69f9      	ldr	r1, [r7, #28]
    181e:	6878      	ldr	r0, [r7, #4]
    1820:	f000 f807 	bl	1832 <vstr_vprintf>
    va_end(ap);
}
    1824:	bf00      	nop
    1826:	3714      	adds	r7, #20
    1828:	46bd      	mov	sp, r7
    182a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    182e:	b003      	add	sp, #12
    1830:	4770      	bx	lr

00001832 <vstr_vprintf>:

void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap) {
    1832:	b580      	push	{r7, lr}
    1834:	b086      	sub	sp, #24
    1836:	af00      	add	r7, sp, #0
    1838:	60f8      	str	r0, [r7, #12]
    183a:	60b9      	str	r1, [r7, #8]
    183c:	607a      	str	r2, [r7, #4]
    mp_print_t print = {vstr, (mp_print_strn_t)vstr_add_strn};
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	613b      	str	r3, [r7, #16]
    1842:	4b06      	ldr	r3, [pc, #24]	; (185c <vstr_vprintf+0x2a>)
    1844:	617b      	str	r3, [r7, #20]
    mp_vprintf(&print, fmt, ap);
    1846:	f107 0310 	add.w	r3, r7, #16
    184a:	687a      	ldr	r2, [r7, #4]
    184c:	68b9      	ldr	r1, [r7, #8]
    184e:	4618      	mov	r0, r3
    1850:	f000 fb60 	bl	1f14 <mp_vprintf>
}
    1854:	bf00      	nop
    1856:	3718      	adds	r7, #24
    1858:	46bd      	mov	sp, r7
    185a:	bd80      	pop	{r7, pc}
    185c:	0000165f 	.word	0x0000165f

00001860 <MP_OBJ_IS_SMALL_INT>:
// unpack small ints, qstrs and full object pointers.

#if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A

static inline bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }
    1860:	b480      	push	{r7}
    1862:	b083      	sub	sp, #12
    1864:	af00      	add	r7, sp, #0
    1866:	6078      	str	r0, [r7, #4]
    1868:	687b      	ldr	r3, [r7, #4]
    186a:	f003 0301 	and.w	r3, r3, #1
    186e:	2b00      	cmp	r3, #0
    1870:	bf14      	ite	ne
    1872:	2301      	movne	r3, #1
    1874:	2300      	moveq	r3, #0
    1876:	b2db      	uxtb	r3, r3
    1878:	4618      	mov	r0, r3
    187a:	370c      	adds	r7, #12
    187c:	46bd      	mov	sp, r7
    187e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1882:	4770      	bx	lr

00001884 <MP_OBJ_IS_OBJ>:
mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);
#endif

static inline bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
    1884:	b480      	push	{r7}
    1886:	b083      	sub	sp, #12
    1888:	af00      	add	r7, sp, #0
    188a:	6078      	str	r0, [r7, #4]
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	f003 0303 	and.w	r3, r3, #3
    1892:	2b00      	cmp	r3, #0
    1894:	bf0c      	ite	eq
    1896:	2301      	moveq	r3, #1
    1898:	2300      	movne	r3, #0
    189a:	b2db      	uxtb	r3, r3
    189c:	4618      	mov	r0, r3
    189e:	370c      	adds	r7, #12
    18a0:	46bd      	mov	sp, r7
    18a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    18a6:	4770      	bx	lr

000018a8 <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    18a8:	b580      	push	{r7, lr}
    18aa:	b084      	sub	sp, #16
    18ac:	af00      	add	r7, sp, #0
    18ae:	60f8      	str	r0, [r7, #12]
    18b0:	60b9      	str	r1, [r7, #8]
    18b2:	607a      	str	r2, [r7, #4]
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    18b4:	6879      	ldr	r1, [r7, #4]
    18b6:	68b8      	ldr	r0, [r7, #8]
    18b8:	f01a fe60 	bl	1c57c <mp_hal_stdout_tx_strn_cooked>
}
    18bc:	bf00      	nop
    18be:	3710      	adds	r7, #16
    18c0:	46bd      	mov	sp, r7
    18c2:	bd80      	pop	{r7, pc}

000018c4 <mp_print_str>:

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    18c4:	b580      	push	{r7, lr}
    18c6:	b084      	sub	sp, #16
    18c8:	af00      	add	r7, sp, #0
    18ca:	6078      	str	r0, [r7, #4]
    18cc:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
    18ce:	6838      	ldr	r0, [r7, #0]
    18d0:	f01b fa38 	bl	1cd44 <strlen>
    18d4:	60f8      	str	r0, [r7, #12]
    if (len) {
    18d6:	68fb      	ldr	r3, [r7, #12]
    18d8:	2b00      	cmp	r3, #0
    18da:	d006      	beq.n	18ea <mp_print_str+0x26>
        print->print_strn(print->data, str, len);
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	685b      	ldr	r3, [r3, #4]
    18e0:	687a      	ldr	r2, [r7, #4]
    18e2:	6810      	ldr	r0, [r2, #0]
    18e4:	68fa      	ldr	r2, [r7, #12]
    18e6:	6839      	ldr	r1, [r7, #0]
    18e8:	4798      	blx	r3
    }
    return len;
    18ea:	68fb      	ldr	r3, [r7, #12]
}
    18ec:	4618      	mov	r0, r3
    18ee:	3710      	adds	r7, #16
    18f0:	46bd      	mov	sp, r7
    18f2:	bd80      	pop	{r7, pc}

000018f4 <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    18f4:	b580      	push	{r7, lr}
    18f6:	b08c      	sub	sp, #48	; 0x30
    18f8:	af00      	add	r7, sp, #0
    18fa:	60f8      	str	r0, [r7, #12]
    18fc:	60b9      	str	r1, [r7, #8]
    18fe:	607a      	str	r2, [r7, #4]
    1900:	603b      	str	r3, [r7, #0]
    int left_pad = 0;
    1902:	2300      	movs	r3, #0
    1904:	62fb      	str	r3, [r7, #44]	; 0x2c
    int right_pad = 0;
    1906:	2300      	movs	r3, #0
    1908:	62bb      	str	r3, [r7, #40]	; 0x28
    int pad = width - len;
    190a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	1ad3      	subs	r3, r2, r3
    1910:	613b      	str	r3, [r7, #16]
    int pad_size;
    int total_chars_printed = 0;
    1912:	2300      	movs	r3, #0
    1914:	623b      	str	r3, [r7, #32]
    const char *pad_chars;

    if (!fill || fill == ' ') {
    1916:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    191a:	2b00      	cmp	r3, #0
    191c:	d003      	beq.n	1926 <mp_print_strn+0x32>
    191e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1922:	2b20      	cmp	r3, #32
    1924:	d104      	bne.n	1930 <mp_print_strn+0x3c>
        pad_chars = pad_spaces;
    1926:	4b3d      	ldr	r3, [pc, #244]	; (1a1c <mp_print_strn+0x128>)
    1928:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_spaces) - 1;
    192a:	2310      	movs	r3, #16
    192c:	627b      	str	r3, [r7, #36]	; 0x24
    192e:	e00d      	b.n	194c <mp_print_strn+0x58>
    } else if (fill == '0') {
    1930:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1934:	2b30      	cmp	r3, #48	; 0x30
    1936:	d104      	bne.n	1942 <mp_print_strn+0x4e>
        pad_chars = pad_zeroes;
    1938:	4b39      	ldr	r3, [pc, #228]	; (1a20 <mp_print_strn+0x12c>)
    193a:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_zeroes) - 1;
    193c:	2310      	movs	r3, #16
    193e:	627b      	str	r3, [r7, #36]	; 0x24
    1940:	e004      	b.n	194c <mp_print_strn+0x58>
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    1942:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1946:	61fb      	str	r3, [r7, #28]
        pad_size = 1;
    1948:	2301      	movs	r3, #1
    194a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    194c:	683b      	ldr	r3, [r7, #0]
    194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1952:	2b00      	cmp	r3, #0
    1954:	d009      	beq.n	196a <mp_print_strn+0x76>
        left_pad = pad / 2;
    1956:	693b      	ldr	r3, [r7, #16]
    1958:	0fda      	lsrs	r2, r3, #31
    195a:	4413      	add	r3, r2
    195c:	105b      	asrs	r3, r3, #1
    195e:	62fb      	str	r3, [r7, #44]	; 0x2c
        right_pad = pad - left_pad;
    1960:	693a      	ldr	r2, [r7, #16]
    1962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1964:	1ad3      	subs	r3, r2, r3
    1966:	62bb      	str	r3, [r7, #40]	; 0x28
    1968:	e009      	b.n	197e <mp_print_strn+0x8a>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    196a:	683b      	ldr	r3, [r7, #0]
    196c:	f003 0301 	and.w	r3, r3, #1
    1970:	2b00      	cmp	r3, #0
    1972:	d002      	beq.n	197a <mp_print_strn+0x86>
        right_pad = pad;
    1974:	693b      	ldr	r3, [r7, #16]
    1976:	62bb      	str	r3, [r7, #40]	; 0x28
    1978:	e001      	b.n	197e <mp_print_strn+0x8a>
    } else {
        left_pad = pad;
    197a:	693b      	ldr	r3, [r7, #16]
    197c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (left_pad > 0) {
    197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1980:	2b00      	cmp	r3, #0
    1982:	dd1a      	ble.n	19ba <mp_print_strn+0xc6>
        total_chars_printed += left_pad;
    1984:	6a3a      	ldr	r2, [r7, #32]
    1986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1988:	4413      	add	r3, r2
    198a:	623b      	str	r3, [r7, #32]
        while (left_pad > 0) {
    198c:	e012      	b.n	19b4 <mp_print_strn+0xc0>
            int p = left_pad;
    198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1990:	61bb      	str	r3, [r7, #24]
            if (p > pad_size) {
    1992:	69ba      	ldr	r2, [r7, #24]
    1994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1996:	429a      	cmp	r2, r3
    1998:	dd01      	ble.n	199e <mp_print_strn+0xaa>
                p = pad_size;
    199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    199c:	61bb      	str	r3, [r7, #24]
            }
            print->print_strn(print->data, pad_chars, p);
    199e:	68fb      	ldr	r3, [r7, #12]
    19a0:	685b      	ldr	r3, [r3, #4]
    19a2:	68fa      	ldr	r2, [r7, #12]
    19a4:	6810      	ldr	r0, [r2, #0]
    19a6:	69ba      	ldr	r2, [r7, #24]
    19a8:	69f9      	ldr	r1, [r7, #28]
    19aa:	4798      	blx	r3
            left_pad -= p;
    19ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19ae:	69bb      	ldr	r3, [r7, #24]
    19b0:	1ad3      	subs	r3, r2, r3
    19b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (left_pad > 0) {
    19b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19b6:	2b00      	cmp	r3, #0
    19b8:	dce9      	bgt.n	198e <mp_print_strn+0x9a>
        }
    }
    if (len) {
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	2b00      	cmp	r3, #0
    19be:	d00a      	beq.n	19d6 <mp_print_strn+0xe2>
        print->print_strn(print->data, str, len);
    19c0:	68fb      	ldr	r3, [r7, #12]
    19c2:	685b      	ldr	r3, [r3, #4]
    19c4:	68fa      	ldr	r2, [r7, #12]
    19c6:	6810      	ldr	r0, [r2, #0]
    19c8:	687a      	ldr	r2, [r7, #4]
    19ca:	68b9      	ldr	r1, [r7, #8]
    19cc:	4798      	blx	r3
        total_chars_printed += len;
    19ce:	6a3a      	ldr	r2, [r7, #32]
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	4413      	add	r3, r2
    19d4:	623b      	str	r3, [r7, #32]
    }
    if (right_pad > 0) {
    19d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19d8:	2b00      	cmp	r3, #0
    19da:	dd1a      	ble.n	1a12 <mp_print_strn+0x11e>
        total_chars_printed += right_pad;
    19dc:	6a3a      	ldr	r2, [r7, #32]
    19de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19e0:	4413      	add	r3, r2
    19e2:	623b      	str	r3, [r7, #32]
        while (right_pad > 0) {
    19e4:	e012      	b.n	1a0c <mp_print_strn+0x118>
            int p = right_pad;
    19e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19e8:	617b      	str	r3, [r7, #20]
            if (p > pad_size) {
    19ea:	697a      	ldr	r2, [r7, #20]
    19ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19ee:	429a      	cmp	r2, r3
    19f0:	dd01      	ble.n	19f6 <mp_print_strn+0x102>
                p = pad_size;
    19f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19f4:	617b      	str	r3, [r7, #20]
            }
            print->print_strn(print->data, pad_chars, p);
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	685b      	ldr	r3, [r3, #4]
    19fa:	68fa      	ldr	r2, [r7, #12]
    19fc:	6810      	ldr	r0, [r2, #0]
    19fe:	697a      	ldr	r2, [r7, #20]
    1a00:	69f9      	ldr	r1, [r7, #28]
    1a02:	4798      	blx	r3
            right_pad -= p;
    1a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a06:	697b      	ldr	r3, [r7, #20]
    1a08:	1ad3      	subs	r3, r2, r3
    1a0a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (right_pad > 0) {
    1a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a0e:	2b00      	cmp	r3, #0
    1a10:	dce9      	bgt.n	19e6 <mp_print_strn+0xf2>
        }
    }
    return total_chars_printed;
    1a12:	6a3b      	ldr	r3, [r7, #32]
}
    1a14:	4618      	mov	r0, r3
    1a16:	3730      	adds	r7, #48	; 0x30
    1a18:	46bd      	mov	sp, r7
    1a1a:	bd80      	pop	{r7, pc}
    1a1c:	0001f484 	.word	0x0001f484
    1a20:	0001f498 	.word	0x0001f498

00001a24 <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    1a24:	b580      	push	{r7, lr}
    1a26:	b08e      	sub	sp, #56	; 0x38
    1a28:	af02      	add	r7, sp, #8
    1a2a:	60f8      	str	r0, [r7, #12]
    1a2c:	60b9      	str	r1, [r7, #8]
    1a2e:	607a      	str	r2, [r7, #4]
    1a30:	603b      	str	r3, [r7, #0]
    char sign = 0;
    1a32:	2300      	movs	r3, #0
    1a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (sgn) {
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d01a      	beq.n	1a74 <mp_print_int+0x50>
        if ((mp_int_t)x < 0) {
    1a3e:	68bb      	ldr	r3, [r7, #8]
    1a40:	2b00      	cmp	r3, #0
    1a42:	da06      	bge.n	1a52 <mp_print_int+0x2e>
            sign = '-';
    1a44:	232d      	movs	r3, #45	; 0x2d
    1a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            x = -x;
    1a4a:	68bb      	ldr	r3, [r7, #8]
    1a4c:	425b      	negs	r3, r3
    1a4e:	60bb      	str	r3, [r7, #8]
    1a50:	e010      	b.n	1a74 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    1a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a54:	f003 0302 	and.w	r3, r3, #2
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d003      	beq.n	1a64 <mp_print_int+0x40>
            sign = '+';
    1a5c:	232b      	movs	r3, #43	; 0x2b
    1a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1a62:	e007      	b.n	1a74 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a66:	f003 0304 	and.w	r3, r3, #4
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d002      	beq.n	1a74 <mp_print_int+0x50>
            sign = ' ';
    1a6e:	2320      	movs	r3, #32
    1a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
    }

    char buf[INT_BUF_SIZE];
    char *b = buf + INT_BUF_SIZE;
    1a74:	f107 0310 	add.w	r3, r7, #16
    1a78:	3310      	adds	r3, #16
    1a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (x == 0) {
    1a7c:	68bb      	ldr	r3, [r7, #8]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d106      	bne.n	1a90 <mp_print_int+0x6c>
        *(--b) = '0';
    1a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a84:	3b01      	subs	r3, #1
    1a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a8a:	2230      	movs	r2, #48	; 0x30
    1a8c:	701a      	strb	r2, [r3, #0]
    1a8e:	e027      	b.n	1ae0 <mp_print_int+0xbc>
    } else {
        do {
            int c = x % base;
    1a90:	683a      	ldr	r2, [r7, #0]
    1a92:	68bb      	ldr	r3, [r7, #8]
    1a94:	fbb3 f1f2 	udiv	r1, r3, r2
    1a98:	fb02 f201 	mul.w	r2, r2, r1
    1a9c:	1a9b      	subs	r3, r3, r2
    1a9e:	62bb      	str	r3, [r7, #40]	; 0x28
            x /= base;
    1aa0:	683b      	ldr	r3, [r7, #0]
    1aa2:	68ba      	ldr	r2, [r7, #8]
    1aa4:	fbb2 f3f3 	udiv	r3, r2, r3
    1aa8:	60bb      	str	r3, [r7, #8]
            if (c >= 10) {
    1aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1aac:	2b09      	cmp	r3, #9
    1aae:	dd05      	ble.n	1abc <mp_print_int+0x98>
                c += base_char - 10;
    1ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1ab2:	3b0a      	subs	r3, #10
    1ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1ab6:	4413      	add	r3, r2
    1ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    1aba:	e002      	b.n	1ac2 <mp_print_int+0x9e>
            } else {
                c += '0';
    1abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1abe:	3330      	adds	r3, #48	; 0x30
    1ac0:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            *(--b) = c;
    1ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ac4:	3b01      	subs	r3, #1
    1ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    1ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1aca:	b2da      	uxtb	r2, r3
    1acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ace:	701a      	strb	r2, [r3, #0]
        } while (b > buf && x != 0);
    1ad0:	f107 0310 	add.w	r3, r7, #16
    1ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ad6:	429a      	cmp	r2, r3
    1ad8:	d902      	bls.n	1ae0 <mp_print_int+0xbc>
    1ada:	68bb      	ldr	r3, [r7, #8]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d1d7      	bne.n	1a90 <mp_print_int+0x6c>
            prefix_char = base_char + 'x' - 'a';
        }
    }
    #endif

    int len = 0;
    1ae0:	2300      	movs	r3, #0
    1ae2:	627b      	str	r3, [r7, #36]	; 0x24
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1aea:	2b00      	cmp	r3, #0
    1aec:	d017      	beq.n	1b1e <mp_print_int+0xfa>
        if (sign) {
    1aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1af2:	2b00      	cmp	r3, #0
    1af4:	d023      	beq.n	1b3e <mp_print_int+0x11a>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1af6:	f107 0123 	add.w	r1, r7, #35	; 0x23
    1afa:	2301      	movs	r3, #1
    1afc:	9301      	str	r3, [sp, #4]
    1afe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1b02:	9300      	str	r3, [sp, #0]
    1b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b06:	2201      	movs	r2, #1
    1b08:	68f8      	ldr	r0, [r7, #12]
    1b0a:	f7ff fef3 	bl	18f4 <mp_print_strn>
    1b0e:	4602      	mov	r2, r0
    1b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b12:	4413      	add	r3, r2
    1b14:	627b      	str	r3, [r7, #36]	; 0x24
            width--;
    1b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1b18:	3b01      	subs	r3, #1
    1b1a:	647b      	str	r3, [r7, #68]	; 0x44
    1b1c:	e00f      	b.n	1b3e <mp_print_int+0x11a>
        if (prefix_char && b > &buf[1]) {
            *(--b) = prefix_char;
            *(--b) = '0';
        }
        #endif
        if (sign && b > buf) {
    1b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1b22:	2b00      	cmp	r3, #0
    1b24:	d00b      	beq.n	1b3e <mp_print_int+0x11a>
    1b26:	f107 0310 	add.w	r3, r7, #16
    1b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1b2c:	429a      	cmp	r2, r3
    1b2e:	d906      	bls.n	1b3e <mp_print_int+0x11a>
            *(--b) = sign;
    1b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b32:	3b01      	subs	r3, #1
    1b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    1b36:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b3c:	701a      	strb	r2, [r3, #0]
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1b3e:	f107 0310 	add.w	r3, r7, #16
    1b42:	3310      	adds	r3, #16
    1b44:	461a      	mov	r2, r3
    1b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b48:	1ad3      	subs	r3, r2, r3
    1b4a:	461a      	mov	r2, r3
    1b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1b4e:	9301      	str	r3, [sp, #4]
    1b50:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1b54:	9300      	str	r3, [sp, #0]
    1b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1b5a:	68f8      	ldr	r0, [r7, #12]
    1b5c:	f7ff feca 	bl	18f4 <mp_print_strn>
    1b60:	4602      	mov	r2, r0
    1b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b64:	4413      	add	r3, r2
    1b66:	627b      	str	r3, [r7, #36]	; 0x24
    return len;
    1b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1b6a:	4618      	mov	r0, r3
    1b6c:	3730      	adds	r7, #48	; 0x30
    1b6e:	46bd      	mov	sp, r7
    1b70:	bd80      	pop	{r7, pc}

00001b72 <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1b72:	b590      	push	{r4, r7, lr}
    1b74:	b09b      	sub	sp, #108	; 0x6c
    1b76:	af04      	add	r7, sp, #16
    1b78:	60f8      	str	r0, [r7, #12]
    1b7a:	60b9      	str	r1, [r7, #8]
    1b7c:	607a      	str	r2, [r7, #4]
    1b7e:	603b      	str	r3, [r7, #0]
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	2b02      	cmp	r3, #2
    1b84:	d00e      	beq.n	1ba4 <mp_print_mp_int+0x32>
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	2b08      	cmp	r3, #8
    1b8a:	d00b      	beq.n	1ba4 <mp_print_mp_int+0x32>
    1b8c:	687b      	ldr	r3, [r7, #4]
    1b8e:	2b0a      	cmp	r3, #10
    1b90:	d008      	beq.n	1ba4 <mp_print_mp_int+0x32>
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	2b10      	cmp	r3, #16
    1b96:	d005      	beq.n	1ba4 <mp_print_mp_int+0x32>
    1b98:	4b8e      	ldr	r3, [pc, #568]	; (1dd4 <mp_print_mp_int+0x262>)
    1b9a:	4a8f      	ldr	r2, [pc, #572]	; (1dd8 <mp_print_mp_int+0x266>)
    1b9c:	21d0      	movs	r1, #208	; 0xd0
    1b9e:	488f      	ldr	r0, [pc, #572]	; (1ddc <mp_print_mp_int+0x26a>)
    1ba0:	f019 fc6e 	bl	1b480 <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1ba4:	68b8      	ldr	r0, [r7, #8]
    1ba6:	f7ff fe5b 	bl	1860 <MP_OBJ_IS_SMALL_INT>
    1baa:	4603      	mov	r3, r0
    1bac:	f083 0301 	eor.w	r3, r3, #1
    1bb0:	b2db      	uxtb	r3, r3
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d015      	beq.n	1be2 <mp_print_mp_int+0x70>
    1bb6:	68b8      	ldr	r0, [r7, #8]
    1bb8:	f7ff fe64 	bl	1884 <MP_OBJ_IS_OBJ>
    1bbc:	4603      	mov	r3, r0
    1bbe:	f083 0301 	eor.w	r3, r3, #1
    1bc2:	b2db      	uxtb	r3, r3
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d104      	bne.n	1bd2 <mp_print_mp_int+0x60>
    1bc8:	68bb      	ldr	r3, [r7, #8]
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	4a84      	ldr	r2, [pc, #528]	; (1de0 <mp_print_mp_int+0x26e>)
    1bce:	4293      	cmp	r3, r2
    1bd0:	d007      	beq.n	1be2 <mp_print_mp_int+0x70>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1bd2:	68b8      	ldr	r0, [r7, #8]
    1bd4:	f00b ff48 	bl	da68 <mp_obj_get_int>
    1bd8:	4603      	mov	r3, r0
    1bda:	005b      	lsls	r3, r3, #1
    1bdc:	f043 0301 	orr.w	r3, r3, #1
    1be0:	60bb      	str	r3, [r7, #8]
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1be4:	f003 0381 	and.w	r3, r3, #129	; 0x81
    1be8:	2b00      	cmp	r3, #0
    1bea:	d10b      	bne.n	1c04 <mp_print_mp_int+0x92>
    1bec:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1bf0:	2b30      	cmp	r3, #48	; 0x30
    1bf2:	d107      	bne.n	1c04 <mp_print_mp_int+0x92>
        if (prec > width) {
    1bf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1bf8:	429a      	cmp	r2, r3
    1bfa:	dd01      	ble.n	1c00 <mp_print_mp_int+0x8e>
            width = prec;
    1bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1bfe:	673b      	str	r3, [r7, #112]	; 0x70
        }
        prec = 0;
    1c00:	2300      	movs	r3, #0
    1c02:	677b      	str	r3, [r7, #116]	; 0x74
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;
    1c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c08:	657b      	str	r3, [r7, #84]	; 0x54

    if (mp_obj_int_sign(x) >= 0) {
    1c0a:	68b8      	ldr	r0, [r7, #8]
    1c0c:	f00e fd34 	bl	10678 <mp_obj_int_sign>
    1c10:	4603      	mov	r3, r0
    1c12:	2b00      	cmp	r3, #0
    1c14:	db14      	blt.n	1c40 <mp_print_mp_int+0xce>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c18:	f003 0302 	and.w	r3, r3, #2
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d005      	beq.n	1c2c <mp_print_mp_int+0xba>
            *prefix++ = '+';
    1c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c22:	1c5a      	adds	r2, r3, #1
    1c24:	657a      	str	r2, [r7, #84]	; 0x54
    1c26:	222b      	movs	r2, #43	; 0x2b
    1c28:	701a      	strb	r2, [r3, #0]
    1c2a:	e009      	b.n	1c40 <mp_print_mp_int+0xce>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c2e:	f003 0304 	and.w	r3, r3, #4
    1c32:	2b00      	cmp	r3, #0
    1c34:	d004      	beq.n	1c40 <mp_print_mp_int+0xce>
            *prefix++ = ' ';
    1c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c38:	1c5a      	adds	r2, r3, #1
    1c3a:	657a      	str	r2, [r7, #84]	; 0x54
    1c3c:	2220      	movs	r2, #32
    1c3e:	701a      	strb	r2, [r3, #0]
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c42:	f003 0310 	and.w	r3, r3, #16
    1c46:	2b00      	cmp	r3, #0
    1c48:	d036      	beq.n	1cb8 <mp_print_mp_int+0x146>
        if (base == 2) {
    1c4a:	687b      	ldr	r3, [r7, #4]
    1c4c:	2b02      	cmp	r3, #2
    1c4e:	d10d      	bne.n	1c6c <mp_print_mp_int+0xfa>
            *prefix++ = '0';
    1c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c52:	1c5a      	adds	r2, r3, #1
    1c54:	657a      	str	r2, [r7, #84]	; 0x54
    1c56:	2230      	movs	r2, #48	; 0x30
    1c58:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'b' - 'a';
    1c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c5c:	1c5a      	adds	r2, r3, #1
    1c5e:	657a      	str	r2, [r7, #84]	; 0x54
    1c60:	683a      	ldr	r2, [r7, #0]
    1c62:	b2d2      	uxtb	r2, r2
    1c64:	3201      	adds	r2, #1
    1c66:	b2d2      	uxtb	r2, r2
    1c68:	701a      	strb	r2, [r3, #0]
    1c6a:	e025      	b.n	1cb8 <mp_print_mp_int+0x146>
        } else if (base == 8) {
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	2b08      	cmp	r3, #8
    1c70:	d112      	bne.n	1c98 <mp_print_mp_int+0x126>
            *prefix++ = '0';
    1c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c74:	1c5a      	adds	r2, r3, #1
    1c76:	657a      	str	r2, [r7, #84]	; 0x54
    1c78:	2230      	movs	r2, #48	; 0x30
    1c7a:	701a      	strb	r2, [r3, #0]
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1c82:	2b00      	cmp	r3, #0
    1c84:	d018      	beq.n	1cb8 <mp_print_mp_int+0x146>
                *prefix++ = base_char + 'o' - 'a';
    1c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c88:	1c5a      	adds	r2, r3, #1
    1c8a:	657a      	str	r2, [r7, #84]	; 0x54
    1c8c:	683a      	ldr	r2, [r7, #0]
    1c8e:	b2d2      	uxtb	r2, r2
    1c90:	320e      	adds	r2, #14
    1c92:	b2d2      	uxtb	r2, r2
    1c94:	701a      	strb	r2, [r3, #0]
    1c96:	e00f      	b.n	1cb8 <mp_print_mp_int+0x146>
            }
        } else if (base == 16) {
    1c98:	687b      	ldr	r3, [r7, #4]
    1c9a:	2b10      	cmp	r3, #16
    1c9c:	d10c      	bne.n	1cb8 <mp_print_mp_int+0x146>
            *prefix++ = '0';
    1c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1ca0:	1c5a      	adds	r2, r3, #1
    1ca2:	657a      	str	r2, [r7, #84]	; 0x54
    1ca4:	2230      	movs	r2, #48	; 0x30
    1ca6:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'x' - 'a';
    1ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1caa:	1c5a      	adds	r2, r3, #1
    1cac:	657a      	str	r2, [r7, #84]	; 0x54
    1cae:	683a      	ldr	r2, [r7, #0]
    1cb0:	b2d2      	uxtb	r2, r2
    1cb2:	3217      	adds	r2, #23
    1cb4:	b2d2      	uxtb	r2, r2
    1cb6:	701a      	strb	r2, [r3, #0]
        }
    }
    *prefix = '\0';
    1cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cba:	2200      	movs	r2, #0
    1cbc:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1cbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1cc4:	1ad3      	subs	r3, r2, r3
    1cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    prefix = prefix_buf;
    1cc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1ccc:	657b      	str	r3, [r7, #84]	; 0x54

    char comma = '\0';
    1cce:	2300      	movs	r3, #0
    1cd0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (flags & PF_FLAG_SHOW_COMMA) {
    1cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1cd6:	f003 0320 	and.w	r3, r3, #32
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d002      	beq.n	1ce4 <mp_print_mp_int+0x172>
        comma = ',';
    1cde:	232c      	movs	r3, #44	; 0x2c
    1ce0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }

    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(mp_int_t) * 4];
    char *buf = stack_buf;
    1ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1ce8:	623b      	str	r3, [r7, #32]
    size_t buf_size = sizeof(stack_buf);
    1cea:	2310      	movs	r3, #16
    1cec:	61fb      	str	r3, [r7, #28]
    size_t fmt_size = 0;
    1cee:	2300      	movs	r3, #0
    1cf0:	61bb      	str	r3, [r7, #24]
    char *str;

    if (prec > 1) {
    1cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1cf4:	2b01      	cmp	r3, #1
    1cf6:	dd03      	ble.n	1d00 <mp_print_mp_int+0x18e>
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1cfe:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    char sign = '\0';
    1d00:	2300      	movs	r3, #0
    1d02:	75fb      	strb	r3, [r7, #23]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d021      	beq.n	1d52 <mp_print_mp_int+0x1e0>
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1d0e:	683b      	ldr	r3, [r7, #0]
    1d10:	b2db      	uxtb	r3, r3
    1d12:	f107 0418 	add.w	r4, r7, #24
    1d16:	f107 011c 	add.w	r1, r7, #28
    1d1a:	f107 0020 	add.w	r0, r7, #32
    1d1e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1d22:	9203      	str	r2, [sp, #12]
    1d24:	9302      	str	r3, [sp, #8]
    1d26:	2300      	movs	r3, #0
    1d28:	9301      	str	r3, [sp, #4]
    1d2a:	687b      	ldr	r3, [r7, #4]
    1d2c:	9300      	str	r3, [sp, #0]
    1d2e:	68bb      	ldr	r3, [r7, #8]
    1d30:	4622      	mov	r2, r4
    1d32:	f00e fbdd 	bl	104f0 <mp_obj_int_formatted>
    1d36:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1d3a:	781b      	ldrb	r3, [r3, #0]
    1d3c:	2b2d      	cmp	r3, #45	; 0x2d
    1d3e:	d11d      	bne.n	1d7c <mp_print_mp_int+0x20a>
            sign = *str++;
    1d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1d42:	1c5a      	adds	r2, r3, #1
    1d44:	64fa      	str	r2, [r7, #76]	; 0x4c
    1d46:	781b      	ldrb	r3, [r3, #0]
    1d48:	75fb      	strb	r3, [r7, #23]
            fmt_size--;
    1d4a:	69bb      	ldr	r3, [r7, #24]
    1d4c:	3b01      	subs	r3, #1
    1d4e:	61bb      	str	r3, [r7, #24]
    1d50:	e014      	b.n	1d7c <mp_print_mp_int+0x20a>
        }
    } else {
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1d52:	683b      	ldr	r3, [r7, #0]
    1d54:	b2db      	uxtb	r3, r3
    1d56:	f107 0418 	add.w	r4, r7, #24
    1d5a:	f107 011c 	add.w	r1, r7, #28
    1d5e:	f107 0020 	add.w	r0, r7, #32
    1d62:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1d66:	9203      	str	r2, [sp, #12]
    1d68:	9302      	str	r3, [sp, #8]
    1d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d6c:	9301      	str	r3, [sp, #4]
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	9300      	str	r3, [sp, #0]
    1d72:	68bb      	ldr	r3, [r7, #8]
    1d74:	4622      	mov	r2, r4
    1d76:	f00e fbbb 	bl	104f0 <mp_obj_int_formatted>
    1d7a:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, prefix, base_char, comma);
    }

    int spaces_before = 0;
    1d7c:	2300      	movs	r3, #0
    1d7e:	64bb      	str	r3, [r7, #72]	; 0x48
    int spaces_after = 0;
    1d80:	2300      	movs	r3, #0
    1d82:	647b      	str	r3, [r7, #68]	; 0x44

    if (prec > 1) {
    1d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d86:	2b01      	cmp	r3, #1
    1d88:	dd37      	ble.n	1dfa <mp_print_mp_int+0x288>
        // If prec was specified, then prec specifies the width to zero-pad the
        // the number to. This zero-padded number then gets left or right
        // aligned in width characters.

        int prec_width = fmt_size;  // The digits
    1d8a:	69bb      	ldr	r3, [r7, #24]
    1d8c:	643b      	str	r3, [r7, #64]	; 0x40
        if (prec_width < prec) {
    1d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d92:	429a      	cmp	r2, r3
    1d94:	da01      	bge.n	1d9a <mp_print_mp_int+0x228>
            prec_width = prec;
    1d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d98:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1da0:	2b00      	cmp	r3, #0
    1da2:	d009      	beq.n	1db8 <mp_print_mp_int+0x246>
            if (sign) {
    1da4:	7dfb      	ldrb	r3, [r7, #23]
    1da6:	2b00      	cmp	r3, #0
    1da8:	d002      	beq.n	1db0 <mp_print_mp_int+0x23e>
                prec_width++;
    1daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1dac:	3301      	adds	r3, #1
    1dae:	643b      	str	r3, [r7, #64]	; 0x40
            }
            prec_width += prefix_len;
    1db0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1db4:	4413      	add	r3, r2
    1db6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (prec_width < width) {
    1db8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1dbc:	429a      	cmp	r2, r3
    1dbe:	da15      	bge.n	1dec <mp_print_mp_int+0x27a>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dc2:	f003 0301 	and.w	r3, r3, #1
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d00c      	beq.n	1de4 <mp_print_mp_int+0x272>
                spaces_after = width - prec_width;
    1dca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1dce:	1ad3      	subs	r3, r2, r3
    1dd0:	647b      	str	r3, [r7, #68]	; 0x44
    1dd2:	e00b      	b.n	1dec <mp_print_mp_int+0x27a>
    1dd4:	0001f4b4 	.word	0x0001f4b4
    1dd8:	0001f540 	.word	0x0001f540
    1ddc:	0001f4e8 	.word	0x0001f4e8
    1de0:	00022bbc 	.word	0x00022bbc
            } else {
                spaces_before = width - prec_width;
    1de4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1de8:	1ad3      	subs	r3, r2, r3
    1dea:	64bb      	str	r3, [r7, #72]	; 0x48
            }
        }
        fill = '0';
    1dec:	2330      	movs	r3, #48	; 0x30
    1dee:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1df4:	f023 0301 	bic.w	r3, r3, #1
    1df8:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    int len = 0;
    1dfa:	2300      	movs	r3, #0
    1dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (spaces_before) {
    1dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1e00:	2b00      	cmp	r3, #0
    1e02:	d00d      	beq.n	1e20 <mp_print_mp_int+0x2ae>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1e06:	9301      	str	r3, [sp, #4]
    1e08:	2320      	movs	r3, #32
    1e0a:	9300      	str	r3, [sp, #0]
    1e0c:	2300      	movs	r3, #0
    1e0e:	2200      	movs	r2, #0
    1e10:	4934      	ldr	r1, [pc, #208]	; (1ee4 <mp_print_mp_int+0x372>)
    1e12:	68f8      	ldr	r0, [r7, #12]
    1e14:	f7ff fd6e 	bl	18f4 <mp_print_strn>
    1e18:	4602      	mov	r2, r0
    1e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e1c:	4413      	add	r3, r2
    1e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1e26:	2b00      	cmp	r3, #0
    1e28:	d029      	beq.n	1e7e <mp_print_mp_int+0x30c>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1e2a:	7dfb      	ldrb	r3, [r7, #23]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d011      	beq.n	1e54 <mp_print_mp_int+0x2e2>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1e30:	f107 0117 	add.w	r1, r7, #23
    1e34:	2301      	movs	r3, #1
    1e36:	9301      	str	r3, [sp, #4]
    1e38:	2300      	movs	r3, #0
    1e3a:	9300      	str	r3, [sp, #0]
    1e3c:	2300      	movs	r3, #0
    1e3e:	2201      	movs	r2, #1
    1e40:	68f8      	ldr	r0, [r7, #12]
    1e42:	f7ff fd57 	bl	18f4 <mp_print_strn>
    1e46:	4602      	mov	r2, r0
    1e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e4a:	4413      	add	r3, r2
    1e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
            width--;
    1e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1e50:	3b01      	subs	r3, #1
    1e52:	673b      	str	r3, [r7, #112]	; 0x70
        }
        if (prefix_len) {
    1e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1e56:	2b00      	cmp	r3, #0
    1e58:	d011      	beq.n	1e7e <mp_print_mp_int+0x30c>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1e5c:	2301      	movs	r3, #1
    1e5e:	9301      	str	r3, [sp, #4]
    1e60:	2300      	movs	r3, #0
    1e62:	9300      	str	r3, [sp, #0]
    1e64:	2300      	movs	r3, #0
    1e66:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1e68:	68f8      	ldr	r0, [r7, #12]
    1e6a:	f7ff fd43 	bl	18f4 <mp_print_strn>
    1e6e:	4602      	mov	r2, r0
    1e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e72:	4413      	add	r3, r2
    1e74:	63fb      	str	r3, [r7, #60]	; 0x3c
            width -= prefix_len;
    1e76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1e7a:	1ad3      	subs	r3, r2, r3
    1e7c:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }
    if (prec > 1) {
    1e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e80:	2b01      	cmp	r3, #1
    1e82:	dd01      	ble.n	1e88 <mp_print_mp_int+0x316>
        width = prec;
    1e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e86:	673b      	str	r3, [r7, #112]	; 0x70
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1e88:	69ba      	ldr	r2, [r7, #24]
    1e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1e8c:	9301      	str	r3, [sp, #4]
    1e8e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1e92:	9300      	str	r3, [sp, #0]
    1e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e96:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1e98:	68f8      	ldr	r0, [r7, #12]
    1e9a:	f7ff fd2b 	bl	18f4 <mp_print_strn>
    1e9e:	4602      	mov	r2, r0
    1ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ea2:	4413      	add	r3, r2
    1ea4:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (spaces_after) {
    1ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ea8:	2b00      	cmp	r3, #0
    1eaa:	d00d      	beq.n	1ec8 <mp_print_mp_int+0x356>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    1eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1eae:	9301      	str	r3, [sp, #4]
    1eb0:	2320      	movs	r3, #32
    1eb2:	9300      	str	r3, [sp, #0]
    1eb4:	2300      	movs	r3, #0
    1eb6:	2200      	movs	r2, #0
    1eb8:	490a      	ldr	r1, [pc, #40]	; (1ee4 <mp_print_mp_int+0x372>)
    1eba:	68f8      	ldr	r0, [r7, #12]
    1ebc:	f7ff fd1a 	bl	18f4 <mp_print_strn>
    1ec0:	4602      	mov	r2, r0
    1ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ec4:	4413      	add	r3, r2
    1ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (buf != stack_buf) {
    1ec8:	6a3a      	ldr	r2, [r7, #32]
    1eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1ece:	429a      	cmp	r2, r3
    1ed0:	d003      	beq.n	1eda <mp_print_mp_int+0x368>
        m_del(char, buf, buf_size);
    1ed2:	6a3b      	ldr	r3, [r7, #32]
    1ed4:	4618      	mov	r0, r3
    1ed6:	f7fe fa7f 	bl	3d8 <m_free>
    }
    return len;
    1eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1edc:	4618      	mov	r0, r3
    1ede:	375c      	adds	r7, #92	; 0x5c
    1ee0:	46bd      	mov	sp, r7
    1ee2:	bd90      	pop	{r4, r7, pc}
    1ee4:	0001f4fc 	.word	0x0001f4fc

00001ee8 <mp_printf>:

    return chrs;
}
#endif

int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    1ee8:	b40e      	push	{r1, r2, r3}
    1eea:	b580      	push	{r7, lr}
    1eec:	b085      	sub	sp, #20
    1eee:	af00      	add	r7, sp, #0
    1ef0:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    1ef2:	f107 0320 	add.w	r3, r7, #32
    1ef6:	60bb      	str	r3, [r7, #8]
    int ret = mp_vprintf(print, fmt, ap);
    1ef8:	68ba      	ldr	r2, [r7, #8]
    1efa:	69f9      	ldr	r1, [r7, #28]
    1efc:	6878      	ldr	r0, [r7, #4]
    1efe:	f000 f809 	bl	1f14 <mp_vprintf>
    1f02:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
    1f04:	68fb      	ldr	r3, [r7, #12]
}
    1f06:	4618      	mov	r0, r3
    1f08:	3714      	adds	r7, #20
    1f0a:	46bd      	mov	sp, r7
    1f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1f10:	b003      	add	sp, #12
    1f12:	4770      	bx	lr

00001f14 <mp_vprintf>:

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    1f14:	b580      	push	{r7, lr}
    1f16:	b096      	sub	sp, #88	; 0x58
    1f18:	af04      	add	r7, sp, #16
    1f1a:	60f8      	str	r0, [r7, #12]
    1f1c:	60b9      	str	r1, [r7, #8]
    1f1e:	607a      	str	r2, [r7, #4]
    int chrs = 0;
    1f20:	2300      	movs	r3, #0
    1f22:	647b      	str	r3, [r7, #68]	; 0x44
    for (;;) {
        {
            const char *f = fmt;
    1f24:	68bb      	ldr	r3, [r7, #8]
    1f26:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1f28:	e002      	b.n	1f30 <mp_vprintf+0x1c>
                ++f; // XXX UTF8 advance char
    1f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f2c:	3301      	adds	r3, #1
    1f2e:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f32:	781b      	ldrb	r3, [r3, #0]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d003      	beq.n	1f40 <mp_vprintf+0x2c>
    1f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f3a:	781b      	ldrb	r3, [r3, #0]
    1f3c:	2b25      	cmp	r3, #37	; 0x25
    1f3e:	d1f4      	bne.n	1f2a <mp_vprintf+0x16>
            }
            if (f > fmt) {
    1f40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f42:	68bb      	ldr	r3, [r7, #8]
    1f44:	429a      	cmp	r2, r3
    1f46:	d910      	bls.n	1f6a <mp_vprintf+0x56>
                print->print_strn(print->data, fmt, f - fmt);
    1f48:	68fb      	ldr	r3, [r7, #12]
    1f4a:	685b      	ldr	r3, [r3, #4]
    1f4c:	68fa      	ldr	r2, [r7, #12]
    1f4e:	6810      	ldr	r0, [r2, #0]
    1f50:	6c39      	ldr	r1, [r7, #64]	; 0x40
    1f52:	68ba      	ldr	r2, [r7, #8]
    1f54:	1a8a      	subs	r2, r1, r2
    1f56:	68b9      	ldr	r1, [r7, #8]
    1f58:	4798      	blx	r3
                chrs += f - fmt;
    1f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f5c:	68bb      	ldr	r3, [r7, #8]
    1f5e:	1ad3      	subs	r3, r2, r3
    1f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1f62:	4413      	add	r3, r2
    1f64:	647b      	str	r3, [r7, #68]	; 0x44
                fmt = f;
    1f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f68:	60bb      	str	r3, [r7, #8]
            }
        }

        if (*fmt == '\0') {
    1f6a:	68bb      	ldr	r3, [r7, #8]
    1f6c:	781b      	ldrb	r3, [r3, #0]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	f000 8214 	beq.w	239c <mp_vprintf+0x488>
            break;
        }

        // move past % character
        ++fmt;
    1f74:	68bb      	ldr	r3, [r7, #8]
    1f76:	3301      	adds	r3, #1
    1f78:	60bb      	str	r3, [r7, #8]

        // parse flags, if they exist
        int flags = 0;
    1f7a:	2300      	movs	r3, #0
    1f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        char fill = ' ';
    1f7e:	2320      	movs	r3, #32
    1f80:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        while (*fmt != '\0') {
    1f84:	e031      	b.n	1fea <mp_vprintf+0xd6>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    1f86:	68bb      	ldr	r3, [r7, #8]
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	2b2d      	cmp	r3, #45	; 0x2d
    1f8c:	d104      	bne.n	1f98 <mp_vprintf+0x84>
    1f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f90:	f043 0301 	orr.w	r3, r3, #1
    1f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f96:	e025      	b.n	1fe4 <mp_vprintf+0xd0>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    1f98:	68bb      	ldr	r3, [r7, #8]
    1f9a:	781b      	ldrb	r3, [r3, #0]
    1f9c:	2b2b      	cmp	r3, #43	; 0x2b
    1f9e:	d104      	bne.n	1faa <mp_vprintf+0x96>
    1fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fa2:	f043 0302 	orr.w	r3, r3, #2
    1fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    1fa8:	e01c      	b.n	1fe4 <mp_vprintf+0xd0>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    1faa:	68bb      	ldr	r3, [r7, #8]
    1fac:	781b      	ldrb	r3, [r3, #0]
    1fae:	2b20      	cmp	r3, #32
    1fb0:	d104      	bne.n	1fbc <mp_vprintf+0xa8>
    1fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fb4:	f043 0304 	orr.w	r3, r3, #4
    1fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    1fba:	e013      	b.n	1fe4 <mp_vprintf+0xd0>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    1fbc:	68bb      	ldr	r3, [r7, #8]
    1fbe:	781b      	ldrb	r3, [r3, #0]
    1fc0:	2b21      	cmp	r3, #33	; 0x21
    1fc2:	d104      	bne.n	1fce <mp_vprintf+0xba>
    1fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fc6:	f043 0308 	orr.w	r3, r3, #8
    1fca:	63fb      	str	r3, [r7, #60]	; 0x3c
    1fcc:	e00a      	b.n	1fe4 <mp_vprintf+0xd0>
            else if (*fmt == '0') {
    1fce:	68bb      	ldr	r3, [r7, #8]
    1fd0:	781b      	ldrb	r3, [r3, #0]
    1fd2:	2b30      	cmp	r3, #48	; 0x30
    1fd4:	d10e      	bne.n	1ff4 <mp_vprintf+0xe0>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    1fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
                fill = '0';
    1fde:	2330      	movs	r3, #48	; 0x30
    1fe0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            } else break;
            ++fmt;
    1fe4:	68bb      	ldr	r3, [r7, #8]
    1fe6:	3301      	adds	r3, #1
    1fe8:	60bb      	str	r3, [r7, #8]
        while (*fmt != '\0') {
    1fea:	68bb      	ldr	r3, [r7, #8]
    1fec:	781b      	ldrb	r3, [r3, #0]
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d1c9      	bne.n	1f86 <mp_vprintf+0x72>
    1ff2:	e000      	b.n	1ff6 <mp_vprintf+0xe2>
            } else break;
    1ff4:	bf00      	nop
        }

        // parse width, if it exists
        int width = 0;
    1ff6:	2300      	movs	r3, #0
    1ff8:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1ffa:	e00d      	b.n	2018 <mp_vprintf+0x104>
            width = width * 10 + *fmt - '0';
    1ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1ffe:	4613      	mov	r3, r2
    2000:	009b      	lsls	r3, r3, #2
    2002:	4413      	add	r3, r2
    2004:	005b      	lsls	r3, r3, #1
    2006:	461a      	mov	r2, r3
    2008:	68bb      	ldr	r3, [r7, #8]
    200a:	781b      	ldrb	r3, [r3, #0]
    200c:	4413      	add	r3, r2
    200e:	3b30      	subs	r3, #48	; 0x30
    2010:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    2012:	68bb      	ldr	r3, [r7, #8]
    2014:	3301      	adds	r3, #1
    2016:	60bb      	str	r3, [r7, #8]
    2018:	68bb      	ldr	r3, [r7, #8]
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	2b2f      	cmp	r3, #47	; 0x2f
    201e:	d903      	bls.n	2028 <mp_vprintf+0x114>
    2020:	68bb      	ldr	r3, [r7, #8]
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	2b39      	cmp	r3, #57	; 0x39
    2026:	d9e9      	bls.n	1ffc <mp_vprintf+0xe8>
        }

        // parse precision, if it exists
        int prec = -1;
    2028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    202c:	633b      	str	r3, [r7, #48]	; 0x30
        if (*fmt == '.') {
    202e:	68bb      	ldr	r3, [r7, #8]
    2030:	781b      	ldrb	r3, [r3, #0]
    2032:	2b2e      	cmp	r3, #46	; 0x2e
    2034:	d12d      	bne.n	2092 <mp_vprintf+0x17e>
            ++fmt;
    2036:	68bb      	ldr	r3, [r7, #8]
    2038:	3301      	adds	r3, #1
    203a:	60bb      	str	r3, [r7, #8]
            if (*fmt == '*') {
    203c:	68bb      	ldr	r3, [r7, #8]
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	2b2a      	cmp	r3, #42	; 0x2a
    2042:	d108      	bne.n	2056 <mp_vprintf+0x142>
                ++fmt;
    2044:	68bb      	ldr	r3, [r7, #8]
    2046:	3301      	adds	r3, #1
    2048:	60bb      	str	r3, [r7, #8]
                prec = va_arg(args, int);
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	1d1a      	adds	r2, r3, #4
    204e:	607a      	str	r2, [r7, #4]
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	633b      	str	r3, [r7, #48]	; 0x30
    2054:	e018      	b.n	2088 <mp_vprintf+0x174>
            } else {
                prec = 0;
    2056:	2300      	movs	r3, #0
    2058:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    205a:	e00d      	b.n	2078 <mp_vprintf+0x164>
                    prec = prec * 10 + *fmt - '0';
    205c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    205e:	4613      	mov	r3, r2
    2060:	009b      	lsls	r3, r3, #2
    2062:	4413      	add	r3, r2
    2064:	005b      	lsls	r3, r3, #1
    2066:	461a      	mov	r2, r3
    2068:	68bb      	ldr	r3, [r7, #8]
    206a:	781b      	ldrb	r3, [r3, #0]
    206c:	4413      	add	r3, r2
    206e:	3b30      	subs	r3, #48	; 0x30
    2070:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    2072:	68bb      	ldr	r3, [r7, #8]
    2074:	3301      	adds	r3, #1
    2076:	60bb      	str	r3, [r7, #8]
    2078:	68bb      	ldr	r3, [r7, #8]
    207a:	781b      	ldrb	r3, [r3, #0]
    207c:	2b2f      	cmp	r3, #47	; 0x2f
    207e:	d903      	bls.n	2088 <mp_vprintf+0x174>
    2080:	68bb      	ldr	r3, [r7, #8]
    2082:	781b      	ldrb	r3, [r3, #0]
    2084:	2b39      	cmp	r3, #57	; 0x39
    2086:	d9e9      	bls.n	205c <mp_vprintf+0x148>
                }
            }
            if (prec < 0) {
    2088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    208a:	2b00      	cmp	r3, #0
    208c:	da01      	bge.n	2092 <mp_vprintf+0x17e>
                prec = 0;
    208e:	2300      	movs	r3, #0
    2090:	633b      	str	r3, [r7, #48]	; 0x30

        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
    2092:	2300      	movs	r3, #0
    2094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (*fmt == 'l') {
    2098:	68bb      	ldr	r3, [r7, #8]
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	2b6c      	cmp	r3, #108	; 0x6c
    209e:	d102      	bne.n	20a6 <mp_vprintf+0x192>
            ++fmt;
    20a0:	68bb      	ldr	r3, [r7, #8]
    20a2:	3301      	adds	r3, #1
    20a4:	60bb      	str	r3, [r7, #8]
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    20a6:	68bb      	ldr	r3, [r7, #8]
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	2b00      	cmp	r3, #0
    20ac:	f000 8178 	beq.w	23a0 <mp_vprintf+0x48c>
            break;
        }

        switch (*fmt) {
    20b0:	68bb      	ldr	r3, [r7, #8]
    20b2:	781b      	ldrb	r3, [r3, #0]
    20b4:	3b50      	subs	r3, #80	; 0x50
    20b6:	2b28      	cmp	r3, #40	; 0x28
    20b8:	f200 8156 	bhi.w	2368 <mp_vprintf+0x454>
    20bc:	a201      	add	r2, pc, #4	; (adr r2, 20c4 <mp_vprintf+0x1b0>)
    20be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    20c2:	bf00      	nop
    20c4:	0000233b 	.word	0x0000233b
    20c8:	00002369 	.word	0x00002369
    20cc:	00002369 	.word	0x00002369
    20d0:	00002369 	.word	0x00002369
    20d4:	00002369 	.word	0x00002369
    20d8:	00002369 	.word	0x00002369
    20dc:	00002369 	.word	0x00002369
    20e0:	00002369 	.word	0x00002369
    20e4:	000022ed 	.word	0x000022ed
    20e8:	00002369 	.word	0x00002369
    20ec:	00002369 	.word	0x00002369
    20f0:	00002369 	.word	0x00002369
    20f4:	00002369 	.word	0x00002369
    20f8:	00002369 	.word	0x00002369
    20fc:	00002369 	.word	0x00002369
    2100:	00002369 	.word	0x00002369
    2104:	00002369 	.word	0x00002369
    2108:	00002369 	.word	0x00002369
    210c:	00002169 	.word	0x00002169
    2110:	000021b5 	.word	0x000021b5
    2114:	000022bd 	.word	0x000022bd
    2118:	00002369 	.word	0x00002369
    211c:	00002369 	.word	0x00002369
    2120:	00002369 	.word	0x00002369
    2124:	00002369 	.word	0x00002369
    2128:	00002369 	.word	0x00002369
    212c:	00002369 	.word	0x00002369
    2130:	00002369 	.word	0x00002369
    2134:	00002369 	.word	0x00002369
    2138:	00002369 	.word	0x00002369
    213c:	00002369 	.word	0x00002369
    2140:	00002369 	.word	0x00002369
    2144:	0000233b 	.word	0x0000233b
    2148:	000021e5 	.word	0x000021e5
    214c:	00002369 	.word	0x00002369
    2150:	00002229 	.word	0x00002229
    2154:	00002369 	.word	0x00002369
    2158:	0000228f 	.word	0x0000228f
    215c:	00002369 	.word	0x00002369
    2160:	00002369 	.word	0x00002369
    2164:	000022ed 	.word	0x000022ed
            case 'b':
                if (va_arg(args, int)) {
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	1d1a      	adds	r2, r3, #4
    216c:	607a      	str	r2, [r7, #4]
    216e:	681b      	ldr	r3, [r3, #0]
    2170:	2b00      	cmp	r3, #0
    2172:	d00f      	beq.n	2194 <mp_vprintf+0x280>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    2174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2176:	9301      	str	r3, [sp, #4]
    2178:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    217c:	9300      	str	r3, [sp, #0]
    217e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2180:	2204      	movs	r2, #4
    2182:	498a      	ldr	r1, [pc, #552]	; (23ac <mp_vprintf+0x498>)
    2184:	68f8      	ldr	r0, [r7, #12]
    2186:	f7ff fbb5 	bl	18f4 <mp_print_strn>
    218a:	4602      	mov	r2, r0
    218c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    218e:	4413      	add	r3, r2
    2190:	647b      	str	r3, [r7, #68]	; 0x44
                } else {
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
                }
                break;
    2192:	e0ff      	b.n	2394 <mp_vprintf+0x480>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    2194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2196:	9301      	str	r3, [sp, #4]
    2198:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    219c:	9300      	str	r3, [sp, #0]
    219e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21a0:	2205      	movs	r2, #5
    21a2:	4983      	ldr	r1, [pc, #524]	; (23b0 <mp_vprintf+0x49c>)
    21a4:	68f8      	ldr	r0, [r7, #12]
    21a6:	f7ff fba5 	bl	18f4 <mp_print_strn>
    21aa:	4602      	mov	r2, r0
    21ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21ae:	4413      	add	r3, r2
    21b0:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    21b2:	e0ef      	b.n	2394 <mp_vprintf+0x480>
            case 'c':
            {
                char str = va_arg(args, int);
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	1d1a      	adds	r2, r3, #4
    21b8:	607a      	str	r2, [r7, #4]
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	b2db      	uxtb	r3, r3
    21be:	76bb      	strb	r3, [r7, #26]
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    21c0:	f107 011a 	add.w	r1, r7, #26
    21c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21c6:	9301      	str	r3, [sp, #4]
    21c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    21cc:	9300      	str	r3, [sp, #0]
    21ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21d0:	2201      	movs	r2, #1
    21d2:	68f8      	ldr	r0, [r7, #12]
    21d4:	f7ff fb8e 	bl	18f4 <mp_print_strn>
    21d8:	4602      	mov	r2, r0
    21da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21dc:	4413      	add	r3, r2
    21de:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    21e0:	bf00      	nop
    21e2:	e0d7      	b.n	2394 <mp_vprintf+0x480>
            }
            case 'q':
            {
                qstr qst = va_arg(args, qstr);
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	1d1a      	adds	r2, r3, #4
    21e8:	607a      	str	r2, [r7, #4]
    21ea:	681b      	ldr	r3, [r3, #0]
    21ec:	627b      	str	r3, [r7, #36]	; 0x24
                size_t len;
                const char *str = (const char*)qstr_data(qst, &len);
    21ee:	f107 0314 	add.w	r3, r7, #20
    21f2:	4619      	mov	r1, r3
    21f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    21f6:	f7ff f835 	bl	1264 <qstr_data>
    21fa:	6238      	str	r0, [r7, #32]
                if (prec < 0) {
    21fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21fe:	2b00      	cmp	r3, #0
    2200:	da01      	bge.n	2206 <mp_vprintf+0x2f2>
                    prec = len;
    2202:	697b      	ldr	r3, [r7, #20]
    2204:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    2206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    220a:	9301      	str	r3, [sp, #4]
    220c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2210:	9300      	str	r3, [sp, #0]
    2212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2214:	6a39      	ldr	r1, [r7, #32]
    2216:	68f8      	ldr	r0, [r7, #12]
    2218:	f7ff fb6c 	bl	18f4 <mp_print_strn>
    221c:	4602      	mov	r2, r0
    221e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2220:	4413      	add	r3, r2
    2222:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2224:	bf00      	nop
    2226:	e0b5      	b.n	2394 <mp_vprintf+0x480>
            }
            case 's':
            {
                const char *str = va_arg(args, const char*);
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	1d1a      	adds	r2, r3, #4
    222c:	607a      	str	r2, [r7, #4]
    222e:	681b      	ldr	r3, [r3, #0]
    2230:	61fb      	str	r3, [r7, #28]
                #ifndef NDEBUG
                // With debugging enabled, catch printing of null string pointers
                if (prec != 0 && str == NULL) {
    2232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2234:	2b00      	cmp	r3, #0
    2236:	d012      	beq.n	225e <mp_vprintf+0x34a>
    2238:	69fb      	ldr	r3, [r7, #28]
    223a:	2b00      	cmp	r3, #0
    223c:	d10f      	bne.n	225e <mp_vprintf+0x34a>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    223e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2240:	9301      	str	r3, [sp, #4]
    2242:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2246:	9300      	str	r3, [sp, #0]
    2248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    224a:	2206      	movs	r2, #6
    224c:	4959      	ldr	r1, [pc, #356]	; (23b4 <mp_vprintf+0x4a0>)
    224e:	68f8      	ldr	r0, [r7, #12]
    2250:	f7ff fb50 	bl	18f4 <mp_print_strn>
    2254:	4602      	mov	r2, r0
    2256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2258:	4413      	add	r3, r2
    225a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
    225c:	e09a      	b.n	2394 <mp_vprintf+0x480>
                }
                #endif
                if (prec < 0) {
    225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2260:	2b00      	cmp	r3, #0
    2262:	da04      	bge.n	226e <mp_vprintf+0x35a>
                    prec = strlen(str);
    2264:	69f8      	ldr	r0, [r7, #28]
    2266:	f01a fd6d 	bl	1cd44 <strlen>
    226a:	4603      	mov	r3, r0
    226c:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    226e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2272:	9301      	str	r3, [sp, #4]
    2274:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2278:	9300      	str	r3, [sp, #0]
    227a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    227c:	69f9      	ldr	r1, [r7, #28]
    227e:	68f8      	ldr	r0, [r7, #12]
    2280:	f7ff fb38 	bl	18f4 <mp_print_strn>
    2284:	4602      	mov	r2, r0
    2286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2288:	4413      	add	r3, r2
    228a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    228c:	e082      	b.n	2394 <mp_vprintf+0x480>
            }
            case 'u':
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	1d1a      	adds	r2, r3, #4
    2292:	607a      	str	r2, [r7, #4]
    2294:	6819      	ldr	r1, [r3, #0]
    2296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2298:	9303      	str	r3, [sp, #12]
    229a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    229e:	9302      	str	r3, [sp, #8]
    22a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22a2:	9301      	str	r3, [sp, #4]
    22a4:	2361      	movs	r3, #97	; 0x61
    22a6:	9300      	str	r3, [sp, #0]
    22a8:	230a      	movs	r3, #10
    22aa:	2200      	movs	r2, #0
    22ac:	68f8      	ldr	r0, [r7, #12]
    22ae:	f7ff fbb9 	bl	1a24 <mp_print_int>
    22b2:	4602      	mov	r2, r0
    22b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22b6:	4413      	add	r3, r2
    22b8:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22ba:	e06b      	b.n	2394 <mp_vprintf+0x480>
            case 'd':
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    22bc:	687b      	ldr	r3, [r7, #4]
    22be:	1d1a      	adds	r2, r3, #4
    22c0:	607a      	str	r2, [r7, #4]
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	4619      	mov	r1, r3
    22c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22c8:	9303      	str	r3, [sp, #12]
    22ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    22ce:	9302      	str	r3, [sp, #8]
    22d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22d2:	9301      	str	r3, [sp, #4]
    22d4:	2361      	movs	r3, #97	; 0x61
    22d6:	9300      	str	r3, [sp, #0]
    22d8:	230a      	movs	r3, #10
    22da:	2201      	movs	r2, #1
    22dc:	68f8      	ldr	r0, [r7, #12]
    22de:	f7ff fba1 	bl	1a24 <mp_print_int>
    22e2:	4602      	mov	r2, r0
    22e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22e6:	4413      	add	r3, r2
    22e8:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22ea:	e053      	b.n	2394 <mp_vprintf+0x480>
            case 'x':
            case 'X': {
                char fmt_c = *fmt - 'X' + 'A';
    22ec:	68bb      	ldr	r3, [r7, #8]
    22ee:	781b      	ldrb	r3, [r3, #0]
    22f0:	3b17      	subs	r3, #23
    22f2:	76fb      	strb	r3, [r7, #27]
                mp_uint_t val;
                if (long_arg) {
    22f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    22f8:	2b00      	cmp	r3, #0
    22fa:	d005      	beq.n	2308 <mp_vprintf+0x3f4>
                    val = va_arg(args, unsigned long int);
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	1d1a      	adds	r2, r3, #4
    2300:	607a      	str	r2, [r7, #4]
    2302:	681b      	ldr	r3, [r3, #0]
    2304:	62fb      	str	r3, [r7, #44]	; 0x2c
    2306:	e004      	b.n	2312 <mp_vprintf+0x3fe>
                } else {
                    val = va_arg(args, unsigned int);
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	1d1a      	adds	r2, r3, #4
    230c:	607a      	str	r2, [r7, #4]
    230e:	681b      	ldr	r3, [r3, #0]
    2310:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    2312:	7efb      	ldrb	r3, [r7, #27]
    2314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2316:	9203      	str	r2, [sp, #12]
    2318:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    231c:	9202      	str	r2, [sp, #8]
    231e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2320:	9201      	str	r2, [sp, #4]
    2322:	9300      	str	r3, [sp, #0]
    2324:	2310      	movs	r3, #16
    2326:	2200      	movs	r2, #0
    2328:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    232a:	68f8      	ldr	r0, [r7, #12]
    232c:	f7ff fb7a 	bl	1a24 <mp_print_int>
    2330:	4602      	mov	r2, r0
    2332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2334:	4413      	add	r3, r2
    2336:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2338:	e02c      	b.n	2394 <mp_vprintf+0x480>
            }
            case 'p':
            case 'P': // don't bother to handle upcase for 'P'
                // Use unsigned long int to work on both ILP32 and LP64 systems
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	1d1a      	adds	r2, r3, #4
    233e:	607a      	str	r2, [r7, #4]
    2340:	6819      	ldr	r1, [r3, #0]
    2342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2344:	9303      	str	r3, [sp, #12]
    2346:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    234a:	9302      	str	r3, [sp, #8]
    234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    234e:	9301      	str	r3, [sp, #4]
    2350:	2361      	movs	r3, #97	; 0x61
    2352:	9300      	str	r3, [sp, #0]
    2354:	2310      	movs	r3, #16
    2356:	2200      	movs	r2, #0
    2358:	68f8      	ldr	r0, [r7, #12]
    235a:	f7ff fb63 	bl	1a24 <mp_print_int>
    235e:	4602      	mov	r2, r0
    2360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2362:	4413      	add	r3, r2
    2364:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2366:	e015      	b.n	2394 <mp_vprintf+0x480>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    2368:	68bb      	ldr	r3, [r7, #8]
    236a:	781b      	ldrb	r3, [r3, #0]
    236c:	2b25      	cmp	r3, #37	; 0x25
    236e:	d006      	beq.n	237e <mp_vprintf+0x46a>
    2370:	4b11      	ldr	r3, [pc, #68]	; (23b8 <mp_vprintf+0x4a4>)
    2372:	4a12      	ldr	r2, [pc, #72]	; (23bc <mp_vprintf+0x4a8>)
    2374:	f240 2132 	movw	r1, #562	; 0x232
    2378:	4811      	ldr	r0, [pc, #68]	; (23c0 <mp_vprintf+0x4ac>)
    237a:	f019 f881 	bl	1b480 <__assert_func>
                print->print_strn(print->data, fmt, 1);
    237e:	68fb      	ldr	r3, [r7, #12]
    2380:	685b      	ldr	r3, [r3, #4]
    2382:	68fa      	ldr	r2, [r7, #12]
    2384:	6810      	ldr	r0, [r2, #0]
    2386:	2201      	movs	r2, #1
    2388:	68b9      	ldr	r1, [r7, #8]
    238a:	4798      	blx	r3
                chrs += 1;
    238c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    238e:	3301      	adds	r3, #1
    2390:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2392:	bf00      	nop
        }
        ++fmt;
    2394:	68bb      	ldr	r3, [r7, #8]
    2396:	3301      	adds	r3, #1
    2398:	60bb      	str	r3, [r7, #8]
    for (;;) {
    239a:	e5c3      	b.n	1f24 <mp_vprintf+0x10>
            break;
    239c:	bf00      	nop
    239e:	e000      	b.n	23a2 <mp_vprintf+0x48e>
            break;
    23a0:	bf00      	nop
    }
    return chrs;
    23a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    23a4:	4618      	mov	r0, r3
    23a6:	3748      	adds	r7, #72	; 0x48
    23a8:	46bd      	mov	sp, r7
    23aa:	bd80      	pop	{r7, pc}
    23ac:	0001f500 	.word	0x0001f500
    23b0:	0001f508 	.word	0x0001f508
    23b4:	0001f510 	.word	0x0001f510
    23b8:	0001f518 	.word	0x0001f518
    23bc:	0001f550 	.word	0x0001f550
    23c0:	0001f4e8 	.word	0x0001f4e8

000023c4 <unichar_isspace>:
}

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    23c4:	b480      	push	{r7}
    23c6:	b083      	sub	sp, #12
    23c8:	af00      	add	r7, sp, #0
    23ca:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	2b7f      	cmp	r3, #127	; 0x7f
    23d0:	d809      	bhi.n	23e6 <unichar_isspace+0x22>
    23d2:	4a0a      	ldr	r2, [pc, #40]	; (23fc <unichar_isspace+0x38>)
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	4413      	add	r3, r2
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	f003 0302 	and.w	r3, r3, #2
    23de:	2b00      	cmp	r3, #0
    23e0:	d001      	beq.n	23e6 <unichar_isspace+0x22>
    23e2:	2301      	movs	r3, #1
    23e4:	e000      	b.n	23e8 <unichar_isspace+0x24>
    23e6:	2300      	movs	r3, #0
    23e8:	f003 0301 	and.w	r3, r3, #1
    23ec:	b2db      	uxtb	r3, r3
}
    23ee:	4618      	mov	r0, r3
    23f0:	370c      	adds	r7, #12
    23f2:	46bd      	mov	sp, r7
    23f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23f8:	4770      	bx	lr
    23fa:	bf00      	nop
    23fc:	0001f55c 	.word	0x0001f55c

00002400 <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    2400:	b480      	push	{r7}
    2402:	b083      	sub	sp, #12
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	2b7f      	cmp	r3, #127	; 0x7f
    240c:	d809      	bhi.n	2422 <unichar_isalpha+0x22>
    240e:	4a0a      	ldr	r2, [pc, #40]	; (2438 <unichar_isalpha+0x38>)
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	4413      	add	r3, r2
    2414:	781b      	ldrb	r3, [r3, #0]
    2416:	f003 0308 	and.w	r3, r3, #8
    241a:	2b00      	cmp	r3, #0
    241c:	d001      	beq.n	2422 <unichar_isalpha+0x22>
    241e:	2301      	movs	r3, #1
    2420:	e000      	b.n	2424 <unichar_isalpha+0x24>
    2422:	2300      	movs	r3, #0
    2424:	f003 0301 	and.w	r3, r3, #1
    2428:	b2db      	uxtb	r3, r3
}
    242a:	4618      	mov	r0, r3
    242c:	370c      	adds	r7, #12
    242e:	46bd      	mov	sp, r7
    2430:	f85d 7b04 	ldr.w	r7, [sp], #4
    2434:	4770      	bx	lr
    2436:	bf00      	nop
    2438:	0001f55c 	.word	0x0001f55c

0000243c <unichar_isdigit>:
bool unichar_isprint(unichar c) {
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    243c:	b480      	push	{r7}
    243e:	b083      	sub	sp, #12
    2440:	af00      	add	r7, sp, #0
    2442:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	2b7f      	cmp	r3, #127	; 0x7f
    2448:	d809      	bhi.n	245e <unichar_isdigit+0x22>
    244a:	4a0a      	ldr	r2, [pc, #40]	; (2474 <unichar_isdigit+0x38>)
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	4413      	add	r3, r2
    2450:	781b      	ldrb	r3, [r3, #0]
    2452:	f003 0304 	and.w	r3, r3, #4
    2456:	2b00      	cmp	r3, #0
    2458:	d001      	beq.n	245e <unichar_isdigit+0x22>
    245a:	2301      	movs	r3, #1
    245c:	e000      	b.n	2460 <unichar_isdigit+0x24>
    245e:	2300      	movs	r3, #0
    2460:	f003 0301 	and.w	r3, r3, #1
    2464:	b2db      	uxtb	r3, r3
}
    2466:	4618      	mov	r0, r3
    2468:	370c      	adds	r7, #12
    246a:	46bd      	mov	sp, r7
    246c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2470:	4770      	bx	lr
    2472:	bf00      	nop
    2474:	0001f55c 	.word	0x0001f55c

00002478 <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    2478:	b480      	push	{r7}
    247a:	b083      	sub	sp, #12
    247c:	af00      	add	r7, sp, #0
    247e:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	2b7f      	cmp	r3, #127	; 0x7f
    2484:	d809      	bhi.n	249a <unichar_isxdigit+0x22>
    2486:	4a0a      	ldr	r2, [pc, #40]	; (24b0 <unichar_isxdigit+0x38>)
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	4413      	add	r3, r2
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2492:	2b00      	cmp	r3, #0
    2494:	d001      	beq.n	249a <unichar_isxdigit+0x22>
    2496:	2301      	movs	r3, #1
    2498:	e000      	b.n	249c <unichar_isxdigit+0x24>
    249a:	2300      	movs	r3, #0
    249c:	f003 0301 	and.w	r3, r3, #1
    24a0:	b2db      	uxtb	r3, r3
}
    24a2:	4618      	mov	r0, r3
    24a4:	370c      	adds	r7, #12
    24a6:	46bd      	mov	sp, r7
    24a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    24ac:	4770      	bx	lr
    24ae:	bf00      	nop
    24b0:	0001f55c 	.word	0x0001f55c

000024b4 <unichar_isident>:

bool unichar_isident(unichar c) {
    24b4:	b480      	push	{r7}
    24b6:	b083      	sub	sp, #12
    24b8:	af00      	add	r7, sp, #0
    24ba:	6078      	str	r0, [r7, #4]
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    24bc:	687b      	ldr	r3, [r7, #4]
    24be:	2b7f      	cmp	r3, #127	; 0x7f
    24c0:	d80c      	bhi.n	24dc <unichar_isident+0x28>
    24c2:	4a0b      	ldr	r2, [pc, #44]	; (24f0 <unichar_isident+0x3c>)
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	4413      	add	r3, r2
    24c8:	781b      	ldrb	r3, [r3, #0]
    24ca:	f003 030c 	and.w	r3, r3, #12
    24ce:	2b00      	cmp	r3, #0
    24d0:	d102      	bne.n	24d8 <unichar_isident+0x24>
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	2b5f      	cmp	r3, #95	; 0x5f
    24d6:	d101      	bne.n	24dc <unichar_isident+0x28>
    24d8:	2301      	movs	r3, #1
    24da:	e000      	b.n	24de <unichar_isident+0x2a>
    24dc:	2300      	movs	r3, #0
    24de:	f003 0301 	and.w	r3, r3, #1
    24e2:	b2db      	uxtb	r3, r3
}
    24e4:	4618      	mov	r0, r3
    24e6:	370c      	adds	r7, #12
    24e8:	46bd      	mov	sp, r7
    24ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    24ee:	4770      	bx	lr
    24f0:	0001f55c 	.word	0x0001f55c

000024f4 <unichar_isupper>:

bool unichar_isupper(unichar c) {
    24f4:	b480      	push	{r7}
    24f6:	b083      	sub	sp, #12
    24f8:	af00      	add	r7, sp, #0
    24fa:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	2b7f      	cmp	r3, #127	; 0x7f
    2500:	d809      	bhi.n	2516 <unichar_isupper+0x22>
    2502:	4a0a      	ldr	r2, [pc, #40]	; (252c <unichar_isupper+0x38>)
    2504:	687b      	ldr	r3, [r7, #4]
    2506:	4413      	add	r3, r2
    2508:	781b      	ldrb	r3, [r3, #0]
    250a:	f003 0310 	and.w	r3, r3, #16
    250e:	2b00      	cmp	r3, #0
    2510:	d001      	beq.n	2516 <unichar_isupper+0x22>
    2512:	2301      	movs	r3, #1
    2514:	e000      	b.n	2518 <unichar_isupper+0x24>
    2516:	2300      	movs	r3, #0
    2518:	f003 0301 	and.w	r3, r3, #1
    251c:	b2db      	uxtb	r3, r3
}
    251e:	4618      	mov	r0, r3
    2520:	370c      	adds	r7, #12
    2522:	46bd      	mov	sp, r7
    2524:	f85d 7b04 	ldr.w	r7, [sp], #4
    2528:	4770      	bx	lr
    252a:	bf00      	nop
    252c:	0001f55c 	.word	0x0001f55c

00002530 <unichar_islower>:

bool unichar_islower(unichar c) {
    2530:	b480      	push	{r7}
    2532:	b083      	sub	sp, #12
    2534:	af00      	add	r7, sp, #0
    2536:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	2b7f      	cmp	r3, #127	; 0x7f
    253c:	d809      	bhi.n	2552 <unichar_islower+0x22>
    253e:	4a0a      	ldr	r2, [pc, #40]	; (2568 <unichar_islower+0x38>)
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	4413      	add	r3, r2
    2544:	781b      	ldrb	r3, [r3, #0]
    2546:	f003 0320 	and.w	r3, r3, #32
    254a:	2b00      	cmp	r3, #0
    254c:	d001      	beq.n	2552 <unichar_islower+0x22>
    254e:	2301      	movs	r3, #1
    2550:	e000      	b.n	2554 <unichar_islower+0x24>
    2552:	2300      	movs	r3, #0
    2554:	f003 0301 	and.w	r3, r3, #1
    2558:	b2db      	uxtb	r3, r3
}
    255a:	4618      	mov	r0, r3
    255c:	370c      	adds	r7, #12
    255e:	46bd      	mov	sp, r7
    2560:	f85d 7b04 	ldr.w	r7, [sp], #4
    2564:	4770      	bx	lr
    2566:	bf00      	nop
    2568:	0001f55c 	.word	0x0001f55c

0000256c <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    256c:	b580      	push	{r7, lr}
    256e:	b082      	sub	sp, #8
    2570:	af00      	add	r7, sp, #0
    2572:	6078      	str	r0, [r7, #4]
    if (unichar_isupper(c)) {
    2574:	6878      	ldr	r0, [r7, #4]
    2576:	f7ff ffbd 	bl	24f4 <unichar_isupper>
    257a:	4603      	mov	r3, r0
    257c:	2b00      	cmp	r3, #0
    257e:	d002      	beq.n	2586 <unichar_tolower+0x1a>
        return c + 0x20;
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	3320      	adds	r3, #32
    2584:	e000      	b.n	2588 <unichar_tolower+0x1c>
    }
    return c;
    2586:	687b      	ldr	r3, [r7, #4]
}
    2588:	4618      	mov	r0, r3
    258a:	3708      	adds	r7, #8
    258c:	46bd      	mov	sp, r7
    258e:	bd80      	pop	{r7, pc}

00002590 <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    2590:	b580      	push	{r7, lr}
    2592:	b082      	sub	sp, #8
    2594:	af00      	add	r7, sp, #0
    2596:	6078      	str	r0, [r7, #4]
    if (unichar_islower(c)) {
    2598:	6878      	ldr	r0, [r7, #4]
    259a:	f7ff ffc9 	bl	2530 <unichar_islower>
    259e:	4603      	mov	r3, r0
    25a0:	2b00      	cmp	r3, #0
    25a2:	d002      	beq.n	25aa <unichar_toupper+0x1a>
        return c - 0x20;
    25a4:	687b      	ldr	r3, [r7, #4]
    25a6:	3b20      	subs	r3, #32
    25a8:	e000      	b.n	25ac <unichar_toupper+0x1c>
    }
    return c;
    25aa:	687b      	ldr	r3, [r7, #4]
}
    25ac:	4618      	mov	r0, r3
    25ae:	3708      	adds	r7, #8
    25b0:	46bd      	mov	sp, r7
    25b2:	bd80      	pop	{r7, pc}

000025b4 <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    25b4:	b480      	push	{r7}
    25b6:	b085      	sub	sp, #20
    25b8:	af00      	add	r7, sp, #0
    25ba:	6078      	str	r0, [r7, #4]
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	3b30      	subs	r3, #48	; 0x30
    25c0:	60fb      	str	r3, [r7, #12]
    if (n > 9) {
    25c2:	68fb      	ldr	r3, [r7, #12]
    25c4:	2b09      	cmp	r3, #9
    25c6:	d906      	bls.n	25d6 <unichar_xdigit_value+0x22>
        n &= ~('a' - 'A');
    25c8:	68fb      	ldr	r3, [r7, #12]
    25ca:	f023 0320 	bic.w	r3, r3, #32
    25ce:	60fb      	str	r3, [r7, #12]
        n -= ('A' - ('9' + 1));
    25d0:	68fb      	ldr	r3, [r7, #12]
    25d2:	3b07      	subs	r3, #7
    25d4:	60fb      	str	r3, [r7, #12]
    }
    return n;
    25d6:	68fb      	ldr	r3, [r7, #12]
}
    25d8:	4618      	mov	r0, r3
    25da:	3714      	adds	r7, #20
    25dc:	46bd      	mov	sp, r7
    25de:	f85d 7b04 	ldr.w	r7, [sp], #4
    25e2:	4770      	bx	lr

000025e4 <mp_reader_mem_readbyte>:
    const byte *beg;
    const byte *cur;
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    25e4:	b480      	push	{r7}
    25e6:	b085      	sub	sp, #20
    25e8:	af00      	add	r7, sp, #0
    25ea:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	60fb      	str	r3, [r7, #12]
    if (reader->cur < reader->end) {
    25f0:	68fb      	ldr	r3, [r7, #12]
    25f2:	689a      	ldr	r2, [r3, #8]
    25f4:	68fb      	ldr	r3, [r7, #12]
    25f6:	68db      	ldr	r3, [r3, #12]
    25f8:	429a      	cmp	r2, r3
    25fa:	d206      	bcs.n	260a <mp_reader_mem_readbyte+0x26>
        return *reader->cur++;
    25fc:	68fb      	ldr	r3, [r7, #12]
    25fe:	689b      	ldr	r3, [r3, #8]
    2600:	1c59      	adds	r1, r3, #1
    2602:	68fa      	ldr	r2, [r7, #12]
    2604:	6091      	str	r1, [r2, #8]
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	e001      	b.n	260e <mp_reader_mem_readbyte+0x2a>
    } else {
        return MP_READER_EOF;
    260a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
    260e:	4618      	mov	r0, r3
    2610:	3714      	adds	r7, #20
    2612:	46bd      	mov	sp, r7
    2614:	f85d 7b04 	ldr.w	r7, [sp], #4
    2618:	4770      	bx	lr

0000261a <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    261a:	b580      	push	{r7, lr}
    261c:	b084      	sub	sp, #16
    261e:	af00      	add	r7, sp, #0
    2620:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	60fb      	str	r3, [r7, #12]
    if (reader->free_len > 0) {
    2626:	68fb      	ldr	r3, [r7, #12]
    2628:	681b      	ldr	r3, [r3, #0]
    262a:	2b00      	cmp	r3, #0
    262c:	d004      	beq.n	2638 <mp_reader_mem_close+0x1e>
        m_del(char, (char*)reader->beg, reader->free_len);
    262e:	68fb      	ldr	r3, [r7, #12]
    2630:	685b      	ldr	r3, [r3, #4]
    2632:	4618      	mov	r0, r3
    2634:	f7fd fed0 	bl	3d8 <m_free>
    }
    m_del_obj(mp_reader_mem_t, reader);
    2638:	68f8      	ldr	r0, [r7, #12]
    263a:	f7fd fecd 	bl	3d8 <m_free>
}
    263e:	bf00      	nop
    2640:	3710      	adds	r7, #16
    2642:	46bd      	mov	sp, r7
    2644:	bd80      	pop	{r7, pc}

00002646 <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    2646:	b580      	push	{r7, lr}
    2648:	b086      	sub	sp, #24
    264a:	af00      	add	r7, sp, #0
    264c:	60f8      	str	r0, [r7, #12]
    264e:	60b9      	str	r1, [r7, #8]
    2650:	607a      	str	r2, [r7, #4]
    2652:	603b      	str	r3, [r7, #0]
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    2654:	2010      	movs	r0, #16
    2656:	f7fd fe61 	bl	31c <m_malloc>
    265a:	6178      	str	r0, [r7, #20]
    rm->free_len = free_len;
    265c:	697b      	ldr	r3, [r7, #20]
    265e:	683a      	ldr	r2, [r7, #0]
    2660:	601a      	str	r2, [r3, #0]
    rm->beg = buf;
    2662:	697b      	ldr	r3, [r7, #20]
    2664:	68ba      	ldr	r2, [r7, #8]
    2666:	605a      	str	r2, [r3, #4]
    rm->cur = buf;
    2668:	697b      	ldr	r3, [r7, #20]
    266a:	68ba      	ldr	r2, [r7, #8]
    266c:	609a      	str	r2, [r3, #8]
    rm->end = buf + len;
    266e:	68ba      	ldr	r2, [r7, #8]
    2670:	687b      	ldr	r3, [r7, #4]
    2672:	441a      	add	r2, r3
    2674:	697b      	ldr	r3, [r7, #20]
    2676:	60da      	str	r2, [r3, #12]
    reader->data = rm;
    2678:	68fb      	ldr	r3, [r7, #12]
    267a:	697a      	ldr	r2, [r7, #20]
    267c:	601a      	str	r2, [r3, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    267e:	68fb      	ldr	r3, [r7, #12]
    2680:	4a04      	ldr	r2, [pc, #16]	; (2694 <mp_reader_new_mem+0x4e>)
    2682:	605a      	str	r2, [r3, #4]
    reader->close = mp_reader_mem_close;
    2684:	68fb      	ldr	r3, [r7, #12]
    2686:	4a04      	ldr	r2, [pc, #16]	; (2698 <mp_reader_new_mem+0x52>)
    2688:	609a      	str	r2, [r3, #8]
}
    268a:	bf00      	nop
    268c:	3718      	adds	r7, #24
    268e:	46bd      	mov	sp, r7
    2690:	bd80      	pop	{r7, pc}
    2692:	bf00      	nop
    2694:	000025e5 	.word	0x000025e5
    2698:	0000261b 	.word	0x0000261b

0000269c <vstr_reset>:
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    269c:	b480      	push	{r7}
    269e:	b083      	sub	sp, #12
    26a0:	af00      	add	r7, sp, #0
    26a2:	6078      	str	r0, [r7, #4]
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	2200      	movs	r2, #0
    26a8:	605a      	str	r2, [r3, #4]
    26aa:	bf00      	nop
    26ac:	370c      	adds	r7, #12
    26ae:	46bd      	mov	sp, r7
    26b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b4:	4770      	bx	lr

000026b6 <is_end>:
// don't know if that's intentional or not, but we don't allow it

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    26b6:	b480      	push	{r7}
    26b8:	b083      	sub	sp, #12
    26ba:	af00      	add	r7, sp, #0
    26bc:	6078      	str	r0, [r7, #4]
    return lex->chr0 == MP_LEXER_EOF;
    26be:	687b      	ldr	r3, [r7, #4]
    26c0:	691b      	ldr	r3, [r3, #16]
    26c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    26c6:	bf0c      	ite	eq
    26c8:	2301      	moveq	r3, #1
    26ca:	2300      	movne	r3, #0
    26cc:	b2db      	uxtb	r3, r3
}
    26ce:	4618      	mov	r0, r3
    26d0:	370c      	adds	r7, #12
    26d2:	46bd      	mov	sp, r7
    26d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26d8:	4770      	bx	lr

000026da <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    26da:	b480      	push	{r7}
    26dc:	b083      	sub	sp, #12
    26de:	af00      	add	r7, sp, #0
    26e0:	6078      	str	r0, [r7, #4]
    return lex->chr0 == '\n';
    26e2:	687b      	ldr	r3, [r7, #4]
    26e4:	691b      	ldr	r3, [r3, #16]
    26e6:	2b0a      	cmp	r3, #10
    26e8:	bf0c      	ite	eq
    26ea:	2301      	moveq	r3, #1
    26ec:	2300      	movne	r3, #0
    26ee:	b2db      	uxtb	r3, r3
}
    26f0:	4618      	mov	r0, r3
    26f2:	370c      	adds	r7, #12
    26f4:	46bd      	mov	sp, r7
    26f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    26fa:	4770      	bx	lr

000026fc <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    26fc:	b480      	push	{r7}
    26fe:	b083      	sub	sp, #12
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
    2704:	460b      	mov	r3, r1
    2706:	70fb      	strb	r3, [r7, #3]
    return lex->chr0 == c;
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	691a      	ldr	r2, [r3, #16]
    270c:	78fb      	ldrb	r3, [r7, #3]
    270e:	429a      	cmp	r2, r3
    2710:	bf0c      	ite	eq
    2712:	2301      	moveq	r3, #1
    2714:	2300      	movne	r3, #0
    2716:	b2db      	uxtb	r3, r3
}
    2718:	4618      	mov	r0, r3
    271a:	370c      	adds	r7, #12
    271c:	46bd      	mov	sp, r7
    271e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2722:	4770      	bx	lr

00002724 <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    2724:	b480      	push	{r7}
    2726:	b083      	sub	sp, #12
    2728:	af00      	add	r7, sp, #0
    272a:	6078      	str	r0, [r7, #4]
    272c:	460b      	mov	r3, r1
    272e:	70fb      	strb	r3, [r7, #3]
    2730:	4613      	mov	r3, r2
    2732:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 || lex->chr0 == c2;
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	691a      	ldr	r2, [r3, #16]
    2738:	78fb      	ldrb	r3, [r7, #3]
    273a:	429a      	cmp	r2, r3
    273c:	d004      	beq.n	2748 <is_char_or+0x24>
    273e:	687b      	ldr	r3, [r7, #4]
    2740:	691a      	ldr	r2, [r3, #16]
    2742:	78bb      	ldrb	r3, [r7, #2]
    2744:	429a      	cmp	r2, r3
    2746:	d101      	bne.n	274c <is_char_or+0x28>
    2748:	2301      	movs	r3, #1
    274a:	e000      	b.n	274e <is_char_or+0x2a>
    274c:	2300      	movs	r3, #0
    274e:	f003 0301 	and.w	r3, r3, #1
    2752:	b2db      	uxtb	r3, r3
}
    2754:	4618      	mov	r0, r3
    2756:	370c      	adds	r7, #12
    2758:	46bd      	mov	sp, r7
    275a:	f85d 7b04 	ldr.w	r7, [sp], #4
    275e:	4770      	bx	lr

00002760 <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    2760:	b480      	push	{r7}
    2762:	b083      	sub	sp, #12
    2764:	af00      	add	r7, sp, #0
    2766:	6078      	str	r0, [r7, #4]
    2768:	4608      	mov	r0, r1
    276a:	4611      	mov	r1, r2
    276c:	461a      	mov	r2, r3
    276e:	4603      	mov	r3, r0
    2770:	70fb      	strb	r3, [r7, #3]
    2772:	460b      	mov	r3, r1
    2774:	70bb      	strb	r3, [r7, #2]
    2776:	4613      	mov	r3, r2
    2778:	707b      	strb	r3, [r7, #1]
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	691a      	ldr	r2, [r3, #16]
    277e:	78fb      	ldrb	r3, [r7, #3]
    2780:	429a      	cmp	r2, r3
    2782:	d009      	beq.n	2798 <is_char_or3+0x38>
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	691a      	ldr	r2, [r3, #16]
    2788:	78bb      	ldrb	r3, [r7, #2]
    278a:	429a      	cmp	r2, r3
    278c:	d004      	beq.n	2798 <is_char_or3+0x38>
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	691a      	ldr	r2, [r3, #16]
    2792:	787b      	ldrb	r3, [r7, #1]
    2794:	429a      	cmp	r2, r3
    2796:	d101      	bne.n	279c <is_char_or3+0x3c>
    2798:	2301      	movs	r3, #1
    279a:	e000      	b.n	279e <is_char_or3+0x3e>
    279c:	2300      	movs	r3, #0
    279e:	f003 0301 	and.w	r3, r3, #1
    27a2:	b2db      	uxtb	r3, r3
}
    27a4:	4618      	mov	r0, r3
    27a6:	370c      	adds	r7, #12
    27a8:	46bd      	mov	sp, r7
    27aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    27ae:	4770      	bx	lr

000027b0 <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    27b0:	b480      	push	{r7}
    27b2:	b083      	sub	sp, #12
    27b4:	af00      	add	r7, sp, #0
    27b6:	6078      	str	r0, [r7, #4]
    27b8:	460b      	mov	r3, r1
    27ba:	70fb      	strb	r3, [r7, #3]
    return lex->chr1 == c;
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	695a      	ldr	r2, [r3, #20]
    27c0:	78fb      	ldrb	r3, [r7, #3]
    27c2:	429a      	cmp	r2, r3
    27c4:	bf0c      	ite	eq
    27c6:	2301      	moveq	r3, #1
    27c8:	2300      	movne	r3, #0
    27ca:	b2db      	uxtb	r3, r3
}
    27cc:	4618      	mov	r0, r3
    27ce:	370c      	adds	r7, #12
    27d0:	46bd      	mov	sp, r7
    27d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    27d6:	4770      	bx	lr

000027d8 <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    27d8:	b480      	push	{r7}
    27da:	b083      	sub	sp, #12
    27dc:	af00      	add	r7, sp, #0
    27de:	6078      	str	r0, [r7, #4]
    27e0:	460b      	mov	r3, r1
    27e2:	70fb      	strb	r3, [r7, #3]
    27e4:	4613      	mov	r3, r2
    27e6:	70bb      	strb	r3, [r7, #2]
    return lex->chr1 == c1 || lex->chr1 == c2;
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	695a      	ldr	r2, [r3, #20]
    27ec:	78fb      	ldrb	r3, [r7, #3]
    27ee:	429a      	cmp	r2, r3
    27f0:	d004      	beq.n	27fc <is_char_following_or+0x24>
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	695a      	ldr	r2, [r3, #20]
    27f6:	78bb      	ldrb	r3, [r7, #2]
    27f8:	429a      	cmp	r2, r3
    27fa:	d101      	bne.n	2800 <is_char_following_or+0x28>
    27fc:	2301      	movs	r3, #1
    27fe:	e000      	b.n	2802 <is_char_following_or+0x2a>
    2800:	2300      	movs	r3, #0
    2802:	f003 0301 	and.w	r3, r3, #1
    2806:	b2db      	uxtb	r3, r3
}
    2808:	4618      	mov	r0, r3
    280a:	370c      	adds	r7, #12
    280c:	46bd      	mov	sp, r7
    280e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2812:	4770      	bx	lr

00002814 <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    2814:	b480      	push	{r7}
    2816:	b083      	sub	sp, #12
    2818:	af00      	add	r7, sp, #0
    281a:	6078      	str	r0, [r7, #4]
    281c:	460b      	mov	r3, r1
    281e:	70fb      	strb	r3, [r7, #3]
    2820:	4613      	mov	r3, r2
    2822:	70bb      	strb	r3, [r7, #2]
    return lex->chr2 == c1 || lex->chr2 == c2;
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	699a      	ldr	r2, [r3, #24]
    2828:	78fb      	ldrb	r3, [r7, #3]
    282a:	429a      	cmp	r2, r3
    282c:	d004      	beq.n	2838 <is_char_following_following_or+0x24>
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	699a      	ldr	r2, [r3, #24]
    2832:	78bb      	ldrb	r3, [r7, #2]
    2834:	429a      	cmp	r2, r3
    2836:	d101      	bne.n	283c <is_char_following_following_or+0x28>
    2838:	2301      	movs	r3, #1
    283a:	e000      	b.n	283e <is_char_following_following_or+0x2a>
    283c:	2300      	movs	r3, #0
    283e:	f003 0301 	and.w	r3, r3, #1
    2842:	b2db      	uxtb	r3, r3
}
    2844:	4618      	mov	r0, r3
    2846:	370c      	adds	r7, #12
    2848:	46bd      	mov	sp, r7
    284a:	f85d 7b04 	ldr.w	r7, [sp], #4
    284e:	4770      	bx	lr

00002850 <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    2850:	b480      	push	{r7}
    2852:	b083      	sub	sp, #12
    2854:	af00      	add	r7, sp, #0
    2856:	6078      	str	r0, [r7, #4]
    2858:	460b      	mov	r3, r1
    285a:	70fb      	strb	r3, [r7, #3]
    285c:	4613      	mov	r3, r2
    285e:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 && lex->chr1 == c2;
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	691a      	ldr	r2, [r3, #16]
    2864:	78fb      	ldrb	r3, [r7, #3]
    2866:	429a      	cmp	r2, r3
    2868:	d106      	bne.n	2878 <is_char_and+0x28>
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	695a      	ldr	r2, [r3, #20]
    286e:	78bb      	ldrb	r3, [r7, #2]
    2870:	429a      	cmp	r2, r3
    2872:	d101      	bne.n	2878 <is_char_and+0x28>
    2874:	2301      	movs	r3, #1
    2876:	e000      	b.n	287a <is_char_and+0x2a>
    2878:	2300      	movs	r3, #0
    287a:	f003 0301 	and.w	r3, r3, #1
    287e:	b2db      	uxtb	r3, r3
}
    2880:	4618      	mov	r0, r3
    2882:	370c      	adds	r7, #12
    2884:	46bd      	mov	sp, r7
    2886:	f85d 7b04 	ldr.w	r7, [sp], #4
    288a:	4770      	bx	lr

0000288c <is_whitespace>:

STATIC bool is_whitespace(mp_lexer_t *lex) {
    288c:	b580      	push	{r7, lr}
    288e:	b082      	sub	sp, #8
    2890:	af00      	add	r7, sp, #0
    2892:	6078      	str	r0, [r7, #4]
    return unichar_isspace(lex->chr0);
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	691b      	ldr	r3, [r3, #16]
    2898:	4618      	mov	r0, r3
    289a:	f7ff fd93 	bl	23c4 <unichar_isspace>
    289e:	4603      	mov	r3, r0
}
    28a0:	4618      	mov	r0, r3
    28a2:	3708      	adds	r7, #8
    28a4:	46bd      	mov	sp, r7
    28a6:	bd80      	pop	{r7, pc}

000028a8 <is_letter>:

STATIC bool is_letter(mp_lexer_t *lex) {
    28a8:	b580      	push	{r7, lr}
    28aa:	b082      	sub	sp, #8
    28ac:	af00      	add	r7, sp, #0
    28ae:	6078      	str	r0, [r7, #4]
    return unichar_isalpha(lex->chr0);
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	691b      	ldr	r3, [r3, #16]
    28b4:	4618      	mov	r0, r3
    28b6:	f7ff fda3 	bl	2400 <unichar_isalpha>
    28ba:	4603      	mov	r3, r0
}
    28bc:	4618      	mov	r0, r3
    28be:	3708      	adds	r7, #8
    28c0:	46bd      	mov	sp, r7
    28c2:	bd80      	pop	{r7, pc}

000028c4 <is_digit>:

STATIC bool is_digit(mp_lexer_t *lex) {
    28c4:	b580      	push	{r7, lr}
    28c6:	b082      	sub	sp, #8
    28c8:	af00      	add	r7, sp, #0
    28ca:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr0);
    28cc:	687b      	ldr	r3, [r7, #4]
    28ce:	691b      	ldr	r3, [r3, #16]
    28d0:	4618      	mov	r0, r3
    28d2:	f7ff fdb3 	bl	243c <unichar_isdigit>
    28d6:	4603      	mov	r3, r0
}
    28d8:	4618      	mov	r0, r3
    28da:	3708      	adds	r7, #8
    28dc:	46bd      	mov	sp, r7
    28de:	bd80      	pop	{r7, pc}

000028e0 <is_following_digit>:

STATIC bool is_following_digit(mp_lexer_t *lex) {
    28e0:	b580      	push	{r7, lr}
    28e2:	b082      	sub	sp, #8
    28e4:	af00      	add	r7, sp, #0
    28e6:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr1);
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	695b      	ldr	r3, [r3, #20]
    28ec:	4618      	mov	r0, r3
    28ee:	f7ff fda5 	bl	243c <unichar_isdigit>
    28f2:	4603      	mov	r3, r0
}
    28f4:	4618      	mov	r0, r3
    28f6:	3708      	adds	r7, #8
    28f8:	46bd      	mov	sp, r7
    28fa:	bd80      	pop	{r7, pc}

000028fc <is_following_base_char>:

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    28fc:	b480      	push	{r7}
    28fe:	b085      	sub	sp, #20
    2900:	af00      	add	r7, sp, #0
    2902:	6078      	str	r0, [r7, #4]
    const unichar chr1 = lex->chr1 | 0x20;
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	695b      	ldr	r3, [r3, #20]
    2908:	f043 0320 	orr.w	r3, r3, #32
    290c:	60fb      	str	r3, [r7, #12]
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    290e:	68fb      	ldr	r3, [r7, #12]
    2910:	2b62      	cmp	r3, #98	; 0x62
    2912:	d005      	beq.n	2920 <is_following_base_char+0x24>
    2914:	68fb      	ldr	r3, [r7, #12]
    2916:	2b6f      	cmp	r3, #111	; 0x6f
    2918:	d002      	beq.n	2920 <is_following_base_char+0x24>
    291a:	68fb      	ldr	r3, [r7, #12]
    291c:	2b78      	cmp	r3, #120	; 0x78
    291e:	d101      	bne.n	2924 <is_following_base_char+0x28>
    2920:	2301      	movs	r3, #1
    2922:	e000      	b.n	2926 <is_following_base_char+0x2a>
    2924:	2300      	movs	r3, #0
    2926:	f003 0301 	and.w	r3, r3, #1
    292a:	b2db      	uxtb	r3, r3
}
    292c:	4618      	mov	r0, r3
    292e:	3714      	adds	r7, #20
    2930:	46bd      	mov	sp, r7
    2932:	f85d 7b04 	ldr.w	r7, [sp], #4
    2936:	4770      	bx	lr

00002938 <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    2938:	b480      	push	{r7}
    293a:	b083      	sub	sp, #12
    293c:	af00      	add	r7, sp, #0
    293e:	6078      	str	r0, [r7, #4]
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	695b      	ldr	r3, [r3, #20]
    2944:	2b2f      	cmp	r3, #47	; 0x2f
    2946:	d905      	bls.n	2954 <is_following_odigit+0x1c>
    2948:	687b      	ldr	r3, [r7, #4]
    294a:	695b      	ldr	r3, [r3, #20]
    294c:	2b37      	cmp	r3, #55	; 0x37
    294e:	d801      	bhi.n	2954 <is_following_odigit+0x1c>
    2950:	2301      	movs	r3, #1
    2952:	e000      	b.n	2956 <is_following_odigit+0x1e>
    2954:	2300      	movs	r3, #0
    2956:	f003 0301 	and.w	r3, r3, #1
    295a:	b2db      	uxtb	r3, r3
}
    295c:	4618      	mov	r0, r3
    295e:	370c      	adds	r7, #12
    2960:	46bd      	mov	sp, r7
    2962:	f85d 7b04 	ldr.w	r7, [sp], #4
    2966:	4770      	bx	lr

00002968 <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    2968:	b580      	push	{r7, lr}
    296a:	b082      	sub	sp, #8
    296c:	af00      	add	r7, sp, #0
    296e:	6078      	str	r0, [r7, #4]
    return is_char_or(lex, '\'', '\"')
    2970:	2222      	movs	r2, #34	; 0x22
    2972:	2127      	movs	r1, #39	; 0x27
    2974:	6878      	ldr	r0, [r7, #4]
    2976:	f7ff fed5 	bl	2724 <is_char_or>
    297a:	4603      	mov	r3, r0
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    297c:	2b00      	cmp	r3, #0
    297e:	d128      	bne.n	29d2 <is_string_or_bytes+0x6a>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    2980:	2362      	movs	r3, #98	; 0x62
    2982:	2275      	movs	r2, #117	; 0x75
    2984:	2172      	movs	r1, #114	; 0x72
    2986:	6878      	ldr	r0, [r7, #4]
    2988:	f7ff feea 	bl	2760 <is_char_or3>
    298c:	4603      	mov	r3, r0
    298e:	2b00      	cmp	r3, #0
    2990:	d007      	beq.n	29a2 <is_string_or_bytes+0x3a>
    2992:	2222      	movs	r2, #34	; 0x22
    2994:	2127      	movs	r1, #39	; 0x27
    2996:	6878      	ldr	r0, [r7, #4]
    2998:	f7ff ff1e 	bl	27d8 <is_char_following_or>
    299c:	4603      	mov	r3, r0
    299e:	2b00      	cmp	r3, #0
    29a0:	d117      	bne.n	29d2 <is_string_or_bytes+0x6a>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    29a2:	2262      	movs	r2, #98	; 0x62
    29a4:	2172      	movs	r1, #114	; 0x72
    29a6:	6878      	ldr	r0, [r7, #4]
    29a8:	f7ff ff52 	bl	2850 <is_char_and>
    29ac:	4603      	mov	r3, r0
    29ae:	2b00      	cmp	r3, #0
    29b0:	d107      	bne.n	29c2 <is_string_or_bytes+0x5a>
    29b2:	2272      	movs	r2, #114	; 0x72
    29b4:	2162      	movs	r1, #98	; 0x62
    29b6:	6878      	ldr	r0, [r7, #4]
    29b8:	f7ff ff4a 	bl	2850 <is_char_and>
    29bc:	4603      	mov	r3, r0
    29be:	2b00      	cmp	r3, #0
    29c0:	d009      	beq.n	29d6 <is_string_or_bytes+0x6e>
            && is_char_following_following_or(lex, '\'', '\"'));
    29c2:	2222      	movs	r2, #34	; 0x22
    29c4:	2127      	movs	r1, #39	; 0x27
    29c6:	6878      	ldr	r0, [r7, #4]
    29c8:	f7ff ff24 	bl	2814 <is_char_following_following_or>
    29cc:	4603      	mov	r3, r0
    29ce:	2b00      	cmp	r3, #0
    29d0:	d001      	beq.n	29d6 <is_string_or_bytes+0x6e>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    29d2:	2301      	movs	r3, #1
    29d4:	e000      	b.n	29d8 <is_string_or_bytes+0x70>
    29d6:	2300      	movs	r3, #0
    29d8:	f003 0301 	and.w	r3, r3, #1
    29dc:	b2db      	uxtb	r3, r3
}
    29de:	4618      	mov	r0, r3
    29e0:	3708      	adds	r7, #8
    29e2:	46bd      	mov	sp, r7
    29e4:	bd80      	pop	{r7, pc}

000029e6 <is_head_of_identifier>:

// to easily parse utf-8 identifiers we allow any raw byte with high bit set
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    29e6:	b580      	push	{r7, lr}
    29e8:	b082      	sub	sp, #8
    29ea:	af00      	add	r7, sp, #0
    29ec:	6078      	str	r0, [r7, #4]
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    29ee:	6878      	ldr	r0, [r7, #4]
    29f0:	f7ff ff5a 	bl	28a8 <is_letter>
    29f4:	4603      	mov	r3, r0
    29f6:	2b00      	cmp	r3, #0
    29f8:	d107      	bne.n	2a0a <is_head_of_identifier+0x24>
    29fa:	687b      	ldr	r3, [r7, #4]
    29fc:	691b      	ldr	r3, [r3, #16]
    29fe:	2b5f      	cmp	r3, #95	; 0x5f
    2a00:	d003      	beq.n	2a0a <is_head_of_identifier+0x24>
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	691b      	ldr	r3, [r3, #16]
    2a06:	2b7f      	cmp	r3, #127	; 0x7f
    2a08:	d901      	bls.n	2a0e <is_head_of_identifier+0x28>
    2a0a:	2301      	movs	r3, #1
    2a0c:	e000      	b.n	2a10 <is_head_of_identifier+0x2a>
    2a0e:	2300      	movs	r3, #0
    2a10:	f003 0301 	and.w	r3, r3, #1
    2a14:	b2db      	uxtb	r3, r3
}
    2a16:	4618      	mov	r0, r3
    2a18:	3708      	adds	r7, #8
    2a1a:	46bd      	mov	sp, r7
    2a1c:	bd80      	pop	{r7, pc}

00002a1e <is_tail_of_identifier>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    2a1e:	b580      	push	{r7, lr}
    2a20:	b082      	sub	sp, #8
    2a22:	af00      	add	r7, sp, #0
    2a24:	6078      	str	r0, [r7, #4]
    return is_head_of_identifier(lex) || is_digit(lex);
    2a26:	6878      	ldr	r0, [r7, #4]
    2a28:	f7ff ffdd 	bl	29e6 <is_head_of_identifier>
    2a2c:	4603      	mov	r3, r0
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d105      	bne.n	2a3e <is_tail_of_identifier+0x20>
    2a32:	6878      	ldr	r0, [r7, #4]
    2a34:	f7ff ff46 	bl	28c4 <is_digit>
    2a38:	4603      	mov	r3, r0
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d001      	beq.n	2a42 <is_tail_of_identifier+0x24>
    2a3e:	2301      	movs	r3, #1
    2a40:	e000      	b.n	2a44 <is_tail_of_identifier+0x26>
    2a42:	2300      	movs	r3, #0
    2a44:	f003 0301 	and.w	r3, r3, #1
    2a48:	b2db      	uxtb	r3, r3
}
    2a4a:	4618      	mov	r0, r3
    2a4c:	3708      	adds	r7, #8
    2a4e:	46bd      	mov	sp, r7
    2a50:	bd80      	pop	{r7, pc}

00002a52 <next_char>:

STATIC void next_char(mp_lexer_t *lex) {
    2a52:	b580      	push	{r7, lr}
    2a54:	b082      	sub	sp, #8
    2a56:	af00      	add	r7, sp, #0
    2a58:	6078      	str	r0, [r7, #4]
    if (lex->chr0 == '\n') {
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	691b      	ldr	r3, [r3, #16]
    2a5e:	2b0a      	cmp	r3, #10
    2a60:	d108      	bne.n	2a74 <next_char+0x22>
        // a new line
        ++lex->line;
    2a62:	687b      	ldr	r3, [r7, #4]
    2a64:	69db      	ldr	r3, [r3, #28]
    2a66:	1c5a      	adds	r2, r3, #1
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	61da      	str	r2, [r3, #28]
        lex->column = 1;
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	2201      	movs	r2, #1
    2a70:	621a      	str	r2, [r3, #32]
    2a72:	e011      	b.n	2a98 <next_char+0x46>
    } else if (lex->chr0 == '\t') {
    2a74:	687b      	ldr	r3, [r7, #4]
    2a76:	691b      	ldr	r3, [r3, #16]
    2a78:	2b09      	cmp	r3, #9
    2a7a:	d108      	bne.n	2a8e <next_char+0x3c>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	6a1b      	ldr	r3, [r3, #32]
    2a80:	3307      	adds	r3, #7
    2a82:	f023 0307 	bic.w	r3, r3, #7
    2a86:	1c5a      	adds	r2, r3, #1
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	621a      	str	r2, [r3, #32]
    2a8c:	e004      	b.n	2a98 <next_char+0x46>
    } else {
        // a character worth one column
        ++lex->column;
    2a8e:	687b      	ldr	r3, [r7, #4]
    2a90:	6a1b      	ldr	r3, [r3, #32]
    2a92:	1c5a      	adds	r2, r3, #1
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	621a      	str	r2, [r3, #32]
    }

    lex->chr0 = lex->chr1;
    2a98:	687b      	ldr	r3, [r7, #4]
    2a9a:	695a      	ldr	r2, [r3, #20]
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	611a      	str	r2, [r3, #16]
    lex->chr1 = lex->chr2;
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	699a      	ldr	r2, [r3, #24]
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	615a      	str	r2, [r3, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	689b      	ldr	r3, [r3, #8]
    2aac:	687a      	ldr	r2, [r7, #4]
    2aae:	6852      	ldr	r2, [r2, #4]
    2ab0:	4610      	mov	r0, r2
    2ab2:	4798      	blx	r3
    2ab4:	4602      	mov	r2, r0
    2ab6:	687b      	ldr	r3, [r7, #4]
    2ab8:	619a      	str	r2, [r3, #24]

    if (lex->chr1 == '\r') {
    2aba:	687b      	ldr	r3, [r7, #4]
    2abc:	695b      	ldr	r3, [r3, #20]
    2abe:	2b0d      	cmp	r3, #13
    2ac0:	d10f      	bne.n	2ae2 <next_char+0x90>
        // CR is a new line, converted to LF
        lex->chr1 = '\n';
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	220a      	movs	r2, #10
    2ac6:	615a      	str	r2, [r3, #20]
        if (lex->chr2 == '\n') {
    2ac8:	687b      	ldr	r3, [r7, #4]
    2aca:	699b      	ldr	r3, [r3, #24]
    2acc:	2b0a      	cmp	r3, #10
    2ace:	d108      	bne.n	2ae2 <next_char+0x90>
            // CR LF is a single new line, throw out the extra LF
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	689b      	ldr	r3, [r3, #8]
    2ad4:	687a      	ldr	r2, [r7, #4]
    2ad6:	6852      	ldr	r2, [r2, #4]
    2ad8:	4610      	mov	r0, r2
    2ada:	4798      	blx	r3
    2adc:	4602      	mov	r2, r0
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	619a      	str	r2, [r3, #24]
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	699b      	ldr	r3, [r3, #24]
    2ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2aea:	d10b      	bne.n	2b04 <next_char+0xb2>
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	695b      	ldr	r3, [r3, #20]
    2af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2af4:	d006      	beq.n	2b04 <next_char+0xb2>
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	695b      	ldr	r3, [r3, #20]
    2afa:	2b0a      	cmp	r3, #10
    2afc:	d002      	beq.n	2b04 <next_char+0xb2>
        lex->chr2 = '\n';
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	220a      	movs	r2, #10
    2b02:	619a      	str	r2, [r3, #24]
    }
}
    2b04:	bf00      	nop
    2b06:	3708      	adds	r7, #8
    2b08:	46bd      	mov	sp, r7
    2b0a:	bd80      	pop	{r7, pc}

00002b0c <indent_push>:

STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b082      	sub	sp, #8
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    2b14:	6039      	str	r1, [r7, #0]
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    2b16:	687b      	ldr	r3, [r7, #4]
    2b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b1e:	429a      	cmp	r2, r3
    2b20:	d312      	bcc.n	2b48 <indent_push+0x3c>
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    2b22:	687b      	ldr	r3, [r7, #4]
    2b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b26:	687b      	ldr	r3, [r7, #4]
    2b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b2a:	3308      	adds	r3, #8
    2b2c:	005b      	lsls	r3, r3, #1
    2b2e:	4619      	mov	r1, r3
    2b30:	4610      	mov	r0, r2
    2b32:	f7fd fc25 	bl	380 <m_realloc>
    2b36:	4602      	mov	r2, r0
    2b38:	687b      	ldr	r3, [r7, #4]
    2b3a:	635a      	str	r2, [r3, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b40:	f103 0208 	add.w	r2, r3, #8
    2b44:	687b      	ldr	r3, [r7, #4]
    2b46:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    lex->indent_level[lex->num_indent_level++] = indent;
    2b48:	687b      	ldr	r3, [r7, #4]
    2b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b4c:	687b      	ldr	r3, [r7, #4]
    2b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b50:	1c58      	adds	r0, r3, #1
    2b52:	6879      	ldr	r1, [r7, #4]
    2b54:	6308      	str	r0, [r1, #48]	; 0x30
    2b56:	005b      	lsls	r3, r3, #1
    2b58:	4413      	add	r3, r2
    2b5a:	683a      	ldr	r2, [r7, #0]
    2b5c:	b292      	uxth	r2, r2
    2b5e:	801a      	strh	r2, [r3, #0]
}
    2b60:	bf00      	nop
    2b62:	3708      	adds	r7, #8
    2b64:	46bd      	mov	sp, r7
    2b66:	bd80      	pop	{r7, pc}

00002b68 <indent_top>:

STATIC size_t indent_top(mp_lexer_t *lex) {
    2b68:	b480      	push	{r7}
    2b6a:	b083      	sub	sp, #12
    2b6c:	af00      	add	r7, sp, #0
    2b6e:	6078      	str	r0, [r7, #4]
    return lex->indent_level[lex->num_indent_level - 1];
    2b70:	687b      	ldr	r3, [r7, #4]
    2b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2b7c:	3b01      	subs	r3, #1
    2b7e:	005b      	lsls	r3, r3, #1
    2b80:	4413      	add	r3, r2
    2b82:	881b      	ldrh	r3, [r3, #0]
}
    2b84:	4618      	mov	r0, r3
    2b86:	370c      	adds	r7, #12
    2b88:	46bd      	mov	sp, r7
    2b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b8e:	4770      	bx	lr

00002b90 <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    2b90:	b480      	push	{r7}
    2b92:	b083      	sub	sp, #12
    2b94:	af00      	add	r7, sp, #0
    2b96:	6078      	str	r0, [r7, #4]
    lex->num_indent_level -= 1;
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b9c:	1e5a      	subs	r2, r3, #1
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
    2ba2:	bf00      	nop
    2ba4:	370c      	adds	r7, #12
    2ba6:	46bd      	mov	sp, r7
    2ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bac:	4770      	bx	lr

00002bae <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    2bae:	b590      	push	{r4, r7, lr}
    2bb0:	b087      	sub	sp, #28
    2bb2:	af00      	add	r7, sp, #0
    2bb4:	60f8      	str	r0, [r7, #12]
    2bb6:	60b9      	str	r1, [r7, #8]
    2bb8:	607a      	str	r2, [r7, #4]
    mp_uint_t num = 0;
    2bba:	2300      	movs	r3, #0
    2bbc:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2bbe:	e018      	b.n	2bf2 <get_hex+0x44>
        next_char(lex);
    2bc0:	68f8      	ldr	r0, [r7, #12]
    2bc2:	f7ff ff46 	bl	2a52 <next_char>
        unichar c = CUR_CHAR(lex);
    2bc6:	68fb      	ldr	r3, [r7, #12]
    2bc8:	691b      	ldr	r3, [r3, #16]
    2bca:	613b      	str	r3, [r7, #16]
        if (!unichar_isxdigit(c)) {
    2bcc:	6938      	ldr	r0, [r7, #16]
    2bce:	f7ff fc53 	bl	2478 <unichar_isxdigit>
    2bd2:	4603      	mov	r3, r0
    2bd4:	f083 0301 	eor.w	r3, r3, #1
    2bd8:	b2db      	uxtb	r3, r3
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d001      	beq.n	2be2 <get_hex+0x34>
            return false;
    2bde:	2300      	movs	r3, #0
    2be0:	e010      	b.n	2c04 <get_hex+0x56>
        }
        num = (num << 4) + unichar_xdigit_value(c);
    2be2:	697b      	ldr	r3, [r7, #20]
    2be4:	011c      	lsls	r4, r3, #4
    2be6:	6938      	ldr	r0, [r7, #16]
    2be8:	f7ff fce4 	bl	25b4 <unichar_xdigit_value>
    2bec:	4603      	mov	r3, r0
    2bee:	4423      	add	r3, r4
    2bf0:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2bf2:	68bb      	ldr	r3, [r7, #8]
    2bf4:	1e5a      	subs	r2, r3, #1
    2bf6:	60ba      	str	r2, [r7, #8]
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	d1e1      	bne.n	2bc0 <get_hex+0x12>
    }
    *result = num;
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	697a      	ldr	r2, [r7, #20]
    2c00:	601a      	str	r2, [r3, #0]
    return true;
    2c02:	2301      	movs	r3, #1
}
    2c04:	4618      	mov	r0, r3
    2c06:	371c      	adds	r7, #28
    2c08:	46bd      	mov	sp, r7
    2c0a:	bd90      	pop	{r4, r7, pc}

00002c0c <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b08a      	sub	sp, #40	; 0x28
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
    2c14:	460b      	mov	r3, r1
    2c16:	70fb      	strb	r3, [r7, #3]
    // get first quoting character
    char quote_char = '\'';
    2c18:	2327      	movs	r3, #39	; 0x27
    2c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_char(lex, '\"')) {
    2c1e:	2122      	movs	r1, #34	; 0x22
    2c20:	6878      	ldr	r0, [r7, #4]
    2c22:	f7ff fd6b 	bl	26fc <is_char>
    2c26:	4603      	mov	r3, r0
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d002      	beq.n	2c32 <parse_string_literal+0x26>
        quote_char = '\"';
    2c2c:	2322      	movs	r3, #34	; 0x22
    2c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    next_char(lex);
    2c32:	6878      	ldr	r0, [r7, #4]
    2c34:	f7ff ff0d 	bl	2a52 <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    2c38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c40:	4619      	mov	r1, r3
    2c42:	6878      	ldr	r0, [r7, #4]
    2c44:	f7ff fe04 	bl	2850 <is_char_and>
    2c48:	4603      	mov	r3, r0
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d008      	beq.n	2c60 <parse_string_literal+0x54>
        // triple quotes
        next_char(lex);
    2c4e:	6878      	ldr	r0, [r7, #4]
    2c50:	f7ff feff 	bl	2a52 <next_char>
        next_char(lex);
    2c54:	6878      	ldr	r0, [r7, #4]
    2c56:	f7ff fefc 	bl	2a52 <next_char>
        num_quotes = 3;
    2c5a:	2303      	movs	r3, #3
    2c5c:	623b      	str	r3, [r7, #32]
    2c5e:	e001      	b.n	2c64 <parse_string_literal+0x58>
    } else {
        // single quotes
        num_quotes = 1;
    2c60:	2301      	movs	r3, #1
    2c62:	623b      	str	r3, [r7, #32]
    }

    size_t n_closing = 0;
    2c64:	2300      	movs	r3, #0
    2c66:	61fb      	str	r3, [r7, #28]
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2c68:	e1ac      	b.n	2fc4 <parse_string_literal+0x3b8>
        if (is_char(lex, quote_char)) {
    2c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c6e:	4619      	mov	r1, r3
    2c70:	6878      	ldr	r0, [r7, #4]
    2c72:	f7ff fd43 	bl	26fc <is_char>
    2c76:	4603      	mov	r3, r0
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d00c      	beq.n	2c96 <parse_string_literal+0x8a>
            n_closing += 1;
    2c7c:	69fb      	ldr	r3, [r7, #28]
    2c7e:	3301      	adds	r3, #1
    2c80:	61fb      	str	r3, [r7, #28]
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	691b      	ldr	r3, [r3, #16]
    2c8c:	4619      	mov	r1, r3
    2c8e:	4610      	mov	r0, r2
    2c90:	f7fe fcc4 	bl	161c <vstr_add_char>
    2c94:	e193      	b.n	2fbe <parse_string_literal+0x3b2>
        } else {
            n_closing = 0;
    2c96:	2300      	movs	r3, #0
    2c98:	61fb      	str	r3, [r7, #28]
            if (is_char(lex, '\\')) {
    2c9a:	215c      	movs	r1, #92	; 0x5c
    2c9c:	6878      	ldr	r0, [r7, #4]
    2c9e:	f7ff fd2d 	bl	26fc <is_char>
    2ca2:	4603      	mov	r3, r0
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	f000 8180 	beq.w	2faa <parse_string_literal+0x39e>
                next_char(lex);
    2caa:	6878      	ldr	r0, [r7, #4]
    2cac:	f7ff fed1 	bl	2a52 <next_char>
                unichar c = CUR_CHAR(lex);
    2cb0:	687b      	ldr	r3, [r7, #4]
    2cb2:	691b      	ldr	r3, [r3, #16]
    2cb4:	61bb      	str	r3, [r7, #24]
                if (is_raw) {
    2cb6:	78fb      	ldrb	r3, [r7, #3]
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d006      	beq.n	2cca <parse_string_literal+0xbe>
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	3344      	adds	r3, #68	; 0x44
    2cc0:	215c      	movs	r1, #92	; 0x5c
    2cc2:	4618      	mov	r0, r3
    2cc4:	f7fe fcaa 	bl	161c <vstr_add_char>
    2cc8:	e15b      	b.n	2f82 <parse_string_literal+0x376>
                } else {
                    switch (c) {
    2cca:	69bb      	ldr	r3, [r7, #24]
    2ccc:	3b0a      	subs	r3, #10
    2cce:	2b6e      	cmp	r3, #110	; 0x6e
    2cd0:	f200 8129 	bhi.w	2f26 <parse_string_literal+0x31a>
    2cd4:	a201      	add	r2, pc, #4	; (adr r2, 2cdc <parse_string_literal+0xd0>)
    2cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2cda:	bf00      	nop
    2cdc:	00002e99 	.word	0x00002e99
    2ce0:	00002f27 	.word	0x00002f27
    2ce4:	00002f27 	.word	0x00002f27
    2ce8:	00002f27 	.word	0x00002f27
    2cec:	00002f27 	.word	0x00002f27
    2cf0:	00002f27 	.word	0x00002f27
    2cf4:	00002f27 	.word	0x00002f27
    2cf8:	00002f27 	.word	0x00002f27
    2cfc:	00002f27 	.word	0x00002f27
    2d00:	00002f27 	.word	0x00002f27
    2d04:	00002f27 	.word	0x00002f27
    2d08:	00002f27 	.word	0x00002f27
    2d0c:	00002f27 	.word	0x00002f27
    2d10:	00002f27 	.word	0x00002f27
    2d14:	00002f27 	.word	0x00002f27
    2d18:	00002f27 	.word	0x00002f27
    2d1c:	00002f27 	.word	0x00002f27
    2d20:	00002f27 	.word	0x00002f27
    2d24:	00002f27 	.word	0x00002f27
    2d28:	00002f27 	.word	0x00002f27
    2d2c:	00002f27 	.word	0x00002f27
    2d30:	00002f27 	.word	0x00002f27
    2d34:	00002f27 	.word	0x00002f27
    2d38:	00002f27 	.word	0x00002f27
    2d3c:	00002f81 	.word	0x00002f81
    2d40:	00002f27 	.word	0x00002f27
    2d44:	00002f27 	.word	0x00002f27
    2d48:	00002f27 	.word	0x00002f27
    2d4c:	00002f27 	.word	0x00002f27
    2d50:	00002f81 	.word	0x00002f81
    2d54:	00002f27 	.word	0x00002f27
    2d58:	00002f27 	.word	0x00002f27
    2d5c:	00002f27 	.word	0x00002f27
    2d60:	00002f27 	.word	0x00002f27
    2d64:	00002f27 	.word	0x00002f27
    2d68:	00002f27 	.word	0x00002f27
    2d6c:	00002f27 	.word	0x00002f27
    2d70:	00002f27 	.word	0x00002f27
    2d74:	00002f27 	.word	0x00002f27
    2d78:	00002f27 	.word	0x00002f27
    2d7c:	00002f27 	.word	0x00002f27
    2d80:	00002f27 	.word	0x00002f27
    2d84:	00002f27 	.word	0x00002f27
    2d88:	00002f27 	.word	0x00002f27
    2d8c:	00002f27 	.word	0x00002f27
    2d90:	00002f27 	.word	0x00002f27
    2d94:	00002f27 	.word	0x00002f27
    2d98:	00002f27 	.word	0x00002f27
    2d9c:	00002f27 	.word	0x00002f27
    2da0:	00002f27 	.word	0x00002f27
    2da4:	00002f27 	.word	0x00002f27
    2da8:	00002f27 	.word	0x00002f27
    2dac:	00002f27 	.word	0x00002f27
    2db0:	00002f27 	.word	0x00002f27
    2db4:	00002f27 	.word	0x00002f27
    2db8:	00002f27 	.word	0x00002f27
    2dbc:	00002f27 	.word	0x00002f27
    2dc0:	00002f27 	.word	0x00002f27
    2dc4:	00002f27 	.word	0x00002f27
    2dc8:	00002f27 	.word	0x00002f27
    2dcc:	00002f27 	.word	0x00002f27
    2dd0:	00002f27 	.word	0x00002f27
    2dd4:	00002f27 	.word	0x00002f27
    2dd8:	00002f27 	.word	0x00002f27
    2ddc:	00002f27 	.word	0x00002f27
    2de0:	00002f27 	.word	0x00002f27
    2de4:	00002f27 	.word	0x00002f27
    2de8:	00002f27 	.word	0x00002f27
    2dec:	00002f21 	.word	0x00002f21
    2df0:	00002f27 	.word	0x00002f27
    2df4:	00002f27 	.word	0x00002f27
    2df8:	00002f27 	.word	0x00002f27
    2dfc:	00002f27 	.word	0x00002f27
    2e00:	00002f27 	.word	0x00002f27
    2e04:	00002f27 	.word	0x00002f27
    2e08:	00002ecb 	.word	0x00002ecb
    2e0c:	00002f27 	.word	0x00002f27
    2e10:	00002f27 	.word	0x00002f27
    2e14:	00002f27 	.word	0x00002f27
    2e18:	00002f27 	.word	0x00002f27
    2e1c:	00002f27 	.word	0x00002f27
    2e20:	00002f27 	.word	0x00002f27
    2e24:	00002f81 	.word	0x00002f81
    2e28:	00002f27 	.word	0x00002f27
    2e2c:	00002f27 	.word	0x00002f27
    2e30:	00002f27 	.word	0x00002f27
    2e34:	00002f27 	.word	0x00002f27
    2e38:	00002ea1 	.word	0x00002ea1
    2e3c:	00002ea7 	.word	0x00002ea7
    2e40:	00002f27 	.word	0x00002f27
    2e44:	00002f27 	.word	0x00002f27
    2e48:	00002f27 	.word	0x00002f27
    2e4c:	00002ebf 	.word	0x00002ebf
    2e50:	00002f27 	.word	0x00002f27
    2e54:	00002f27 	.word	0x00002f27
    2e58:	00002f27 	.word	0x00002f27
    2e5c:	00002f27 	.word	0x00002f27
    2e60:	00002f27 	.word	0x00002f27
    2e64:	00002f27 	.word	0x00002f27
    2e68:	00002f27 	.word	0x00002f27
    2e6c:	00002eb3 	.word	0x00002eb3
    2e70:	00002f27 	.word	0x00002f27
    2e74:	00002f27 	.word	0x00002f27
    2e78:	00002f27 	.word	0x00002f27
    2e7c:	00002ec5 	.word	0x00002ec5
    2e80:	00002f27 	.word	0x00002f27
    2e84:	00002ead 	.word	0x00002ead
    2e88:	00002ecb 	.word	0x00002ecb
    2e8c:	00002eb9 	.word	0x00002eb9
    2e90:	00002f27 	.word	0x00002f27
    2e94:	00002ee1 	.word	0x00002ee1
                        // note: "c" can never be MP_LEXER_EOF because next_char
                        // always inserts a newline at the end of the input stream
                        case '\n': c = MP_LEXER_EOF; break; // backslash escape the newline, just ignore it
    2e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e9c:	61bb      	str	r3, [r7, #24]
    2e9e:	e070      	b.n	2f82 <parse_string_literal+0x376>
                        case '\\': break;
                        case '\'': break;
                        case '"': break;
                        case 'a': c = 0x07; break;
    2ea0:	2307      	movs	r3, #7
    2ea2:	61bb      	str	r3, [r7, #24]
    2ea4:	e06d      	b.n	2f82 <parse_string_literal+0x376>
                        case 'b': c = 0x08; break;
    2ea6:	2308      	movs	r3, #8
    2ea8:	61bb      	str	r3, [r7, #24]
    2eaa:	e06a      	b.n	2f82 <parse_string_literal+0x376>
                        case 't': c = 0x09; break;
    2eac:	2309      	movs	r3, #9
    2eae:	61bb      	str	r3, [r7, #24]
    2eb0:	e067      	b.n	2f82 <parse_string_literal+0x376>
                        case 'n': c = 0x0a; break;
    2eb2:	230a      	movs	r3, #10
    2eb4:	61bb      	str	r3, [r7, #24]
    2eb6:	e064      	b.n	2f82 <parse_string_literal+0x376>
                        case 'v': c = 0x0b; break;
    2eb8:	230b      	movs	r3, #11
    2eba:	61bb      	str	r3, [r7, #24]
    2ebc:	e061      	b.n	2f82 <parse_string_literal+0x376>
                        case 'f': c = 0x0c; break;
    2ebe:	230c      	movs	r3, #12
    2ec0:	61bb      	str	r3, [r7, #24]
    2ec2:	e05e      	b.n	2f82 <parse_string_literal+0x376>
                        case 'r': c = 0x0d; break;
    2ec4:	230d      	movs	r3, #13
    2ec6:	61bb      	str	r3, [r7, #24]
    2ec8:	e05b      	b.n	2f82 <parse_string_literal+0x376>
                        case 'u':
                        case 'U':
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2ece:	2b0b      	cmp	r3, #11
    2ed0:	d106      	bne.n	2ee0 <parse_string_literal+0x2d4>
                                // b'\u1234' == b'\\u1234'
                                vstr_add_char(&lex->vstr, '\\');
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	3344      	adds	r3, #68	; 0x44
    2ed6:	215c      	movs	r1, #92	; 0x5c
    2ed8:	4618      	mov	r0, r3
    2eda:	f7fe fb9f 	bl	161c <vstr_add_char>
                                break;
    2ede:	e050      	b.n	2f82 <parse_string_literal+0x376>
                            }
                            // Otherwise fall through.
                        case 'x':
                        {
                            mp_uint_t num = 0;
    2ee0:	2300      	movs	r3, #0
    2ee2:	60fb      	str	r3, [r7, #12]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    2ee4:	69bb      	ldr	r3, [r7, #24]
    2ee6:	2b78      	cmp	r3, #120	; 0x78
    2ee8:	d006      	beq.n	2ef8 <parse_string_literal+0x2ec>
    2eea:	69bb      	ldr	r3, [r7, #24]
    2eec:	2b75      	cmp	r3, #117	; 0x75
    2eee:	d101      	bne.n	2ef4 <parse_string_literal+0x2e8>
    2ef0:	2304      	movs	r3, #4
    2ef2:	e002      	b.n	2efa <parse_string_literal+0x2ee>
    2ef4:	2308      	movs	r3, #8
    2ef6:	e000      	b.n	2efa <parse_string_literal+0x2ee>
    2ef8:	2302      	movs	r3, #2
    2efa:	f107 020c 	add.w	r2, r7, #12
    2efe:	4619      	mov	r1, r3
    2f00:	6878      	ldr	r0, [r7, #4]
    2f02:	f7ff fe54 	bl	2bae <get_hex>
    2f06:	4603      	mov	r3, r0
    2f08:	f083 0301 	eor.w	r3, r3, #1
    2f0c:	b2db      	uxtb	r3, r3
    2f0e:	2b00      	cmp	r3, #0
    2f10:	d002      	beq.n	2f18 <parse_string_literal+0x30c>
                                // not enough hex chars for escape sequence
                                lex->tok_kind = MP_TOKEN_INVALID;
    2f12:	687b      	ldr	r3, [r7, #4]
    2f14:	2201      	movs	r2, #1
    2f16:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                            c = num;
    2f18:	68fb      	ldr	r3, [r7, #12]
    2f1a:	61bb      	str	r3, [r7, #24]
                            break;
    2f1c:	bf00      	nop
    2f1e:	e030      	b.n	2f82 <parse_string_literal+0x376>
                            // Supporting '\N{LATIN SMALL LETTER A}' == 'a' would require keeping the
                            // entire Unicode name table in the core. As of Unicode 6.3.0, that's nearly
                            // 3MB of text; even gzip-compressed and with minimal structure, it'll take
                            // roughly half a meg of storage. This form of Unicode escape may be added
                            // later on, but it's definitely not a priority right now. -- CJA 20140607
                            mp_raise_NotImplementedError("unicode name escapes");
    2f20:	483e      	ldr	r0, [pc, #248]	; (301c <parse_string_literal+0x410>)
    2f22:	f009 ffbd 	bl	cea0 <mp_raise_NotImplementedError>
                            break;
                        default:
                            if (c >= '0' && c <= '7') {
    2f26:	69bb      	ldr	r3, [r7, #24]
    2f28:	2b2f      	cmp	r3, #47	; 0x2f
    2f2a:	d922      	bls.n	2f72 <parse_string_literal+0x366>
    2f2c:	69bb      	ldr	r3, [r7, #24]
    2f2e:	2b37      	cmp	r3, #55	; 0x37
    2f30:	d81f      	bhi.n	2f72 <parse_string_literal+0x366>
                                // Octal sequence, 1-3 chars
                                size_t digits = 3;
    2f32:	2303      	movs	r3, #3
    2f34:	617b      	str	r3, [r7, #20]
                                mp_uint_t num = c - '0';
    2f36:	69bb      	ldr	r3, [r7, #24]
    2f38:	3b30      	subs	r3, #48	; 0x30
    2f3a:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2f3c:	e009      	b.n	2f52 <parse_string_literal+0x346>
                                    next_char(lex);
    2f3e:	6878      	ldr	r0, [r7, #4]
    2f40:	f7ff fd87 	bl	2a52 <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    2f44:	693b      	ldr	r3, [r7, #16]
    2f46:	00da      	lsls	r2, r3, #3
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	691b      	ldr	r3, [r3, #16]
    2f4c:	4413      	add	r3, r2
    2f4e:	3b30      	subs	r3, #48	; 0x30
    2f50:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2f52:	6878      	ldr	r0, [r7, #4]
    2f54:	f7ff fcf0 	bl	2938 <is_following_odigit>
    2f58:	4603      	mov	r3, r0
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d005      	beq.n	2f6a <parse_string_literal+0x35e>
    2f5e:	697b      	ldr	r3, [r7, #20]
    2f60:	3b01      	subs	r3, #1
    2f62:	617b      	str	r3, [r7, #20]
    2f64:	697b      	ldr	r3, [r7, #20]
    2f66:	2b00      	cmp	r3, #0
    2f68:	d1e9      	bne.n	2f3e <parse_string_literal+0x332>
                                }
                                c = num;
    2f6a:	693b      	ldr	r3, [r7, #16]
    2f6c:	61bb      	str	r3, [r7, #24]
                            if (c >= '0' && c <= '7') {
    2f6e:	bf00      	nop
                            } else {
                                // unrecognised escape character; CPython lets this through verbatim as '\' and then the character
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
    2f70:	e007      	b.n	2f82 <parse_string_literal+0x376>
                                vstr_add_char(&lex->vstr, '\\');
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	3344      	adds	r3, #68	; 0x44
    2f76:	215c      	movs	r1, #92	; 0x5c
    2f78:	4618      	mov	r0, r3
    2f7a:	f7fe fb4f 	bl	161c <vstr_add_char>
                            break;
    2f7e:	e000      	b.n	2f82 <parse_string_literal+0x376>
                        case '"': break;
    2f80:	bf00      	nop
                    }
                }
                if (c != MP_LEXER_EOF) {
    2f82:	69bb      	ldr	r3, [r7, #24]
    2f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2f88:	d019      	beq.n	2fbe <parse_string_literal+0x3b2>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    2f8a:	69bb      	ldr	r3, [r7, #24]
    2f8c:	2bff      	cmp	r3, #255	; 0xff
    2f8e:	d808      	bhi.n	2fa2 <parse_string_literal+0x396>
                            vstr_add_byte(&lex->vstr, c);
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	3344      	adds	r3, #68	; 0x44
    2f94:	69ba      	ldr	r2, [r7, #24]
    2f96:	b2d2      	uxtb	r2, r2
    2f98:	4611      	mov	r1, r2
    2f9a:	4618      	mov	r0, r3
    2f9c:	f7fe fb2c 	bl	15f8 <vstr_add_byte>
    2fa0:	e00d      	b.n	2fbe <parse_string_literal+0x3b2>
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	2201      	movs	r2, #1
    2fa6:	641a      	str	r2, [r3, #64]	; 0x40
    2fa8:	e009      	b.n	2fbe <parse_string_literal+0x3b2>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2fb0:	687b      	ldr	r3, [r7, #4]
    2fb2:	691b      	ldr	r3, [r3, #16]
    2fb4:	b2db      	uxtb	r3, r3
    2fb6:	4619      	mov	r1, r3
    2fb8:	4610      	mov	r0, r2
    2fba:	f7fe fb1d 	bl	15f8 <vstr_add_byte>
            }
        }
        next_char(lex);
    2fbe:	6878      	ldr	r0, [r7, #4]
    2fc0:	f7ff fd47 	bl	2a52 <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2fc4:	6878      	ldr	r0, [r7, #4]
    2fc6:	f7ff fb76 	bl	26b6 <is_end>
    2fca:	4603      	mov	r3, r0
    2fcc:	f083 0301 	eor.w	r3, r3, #1
    2fd0:	b2db      	uxtb	r3, r3
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d011      	beq.n	2ffa <parse_string_literal+0x3ee>
    2fd6:	6a3b      	ldr	r3, [r7, #32]
    2fd8:	2b01      	cmp	r3, #1
    2fda:	d809      	bhi.n	2ff0 <parse_string_literal+0x3e4>
    2fdc:	210a      	movs	r1, #10
    2fde:	6878      	ldr	r0, [r7, #4]
    2fe0:	f7ff fb8c 	bl	26fc <is_char>
    2fe4:	4603      	mov	r3, r0
    2fe6:	f083 0301 	eor.w	r3, r3, #1
    2fea:	b2db      	uxtb	r3, r3
    2fec:	2b00      	cmp	r3, #0
    2fee:	d004      	beq.n	2ffa <parse_string_literal+0x3ee>
    2ff0:	69fa      	ldr	r2, [r7, #28]
    2ff2:	6a3b      	ldr	r3, [r7, #32]
    2ff4:	429a      	cmp	r2, r3
    2ff6:	f4ff ae38 	bcc.w	2c6a <parse_string_literal+0x5e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    2ffa:	69fa      	ldr	r2, [r7, #28]
    2ffc:	6a3b      	ldr	r3, [r7, #32]
    2ffe:	429a      	cmp	r2, r3
    3000:	d202      	bcs.n	3008 <parse_string_literal+0x3fc>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	2203      	movs	r2, #3
    3006:	641a      	str	r2, [r3, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	3344      	adds	r3, #68	; 0x44
    300c:	69f9      	ldr	r1, [r7, #28]
    300e:	4618      	mov	r0, r3
    3010:	f7fe fbad 	bl	176e <vstr_cut_tail_bytes>
}
    3014:	bf00      	nop
    3016:	3728      	adds	r7, #40	; 0x28
    3018:	46bd      	mov	sp, r7
    301a:	bd80      	pop	{r7, pc}
    301c:	0001f7c8 	.word	0x0001f7c8

00003020 <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    3020:	b580      	push	{r7, lr}
    3022:	b084      	sub	sp, #16
    3024:	af00      	add	r7, sp, #0
    3026:	6078      	str	r0, [r7, #4]
    3028:	460b      	mov	r3, r1
    302a:	70fb      	strb	r3, [r7, #3]
    bool had_physical_newline = false;
    302c:	2300      	movs	r3, #0
    302e:	73fb      	strb	r3, [r7, #15]
    while (!is_end(lex)) {
    3030:	e04b      	b.n	30ca <skip_whitespace+0xaa>
        if (is_physical_newline(lex)) {
    3032:	6878      	ldr	r0, [r7, #4]
    3034:	f7ff fb51 	bl	26da <is_physical_newline>
    3038:	4603      	mov	r3, r0
    303a:	2b00      	cmp	r3, #0
    303c:	d00c      	beq.n	3058 <skip_whitespace+0x38>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    303e:	78fb      	ldrb	r3, [r7, #3]
    3040:	2b00      	cmp	r3, #0
    3042:	d003      	beq.n	304c <skip_whitespace+0x2c>
    3044:	687b      	ldr	r3, [r7, #4]
    3046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3048:	2b00      	cmp	r3, #0
    304a:	d048      	beq.n	30de <skip_whitespace+0xbe>
                break;
            }
            had_physical_newline = true;
    304c:	2301      	movs	r3, #1
    304e:	73fb      	strb	r3, [r7, #15]
            next_char(lex);
    3050:	6878      	ldr	r0, [r7, #4]
    3052:	f7ff fcfe 	bl	2a52 <next_char>
    3056:	e038      	b.n	30ca <skip_whitespace+0xaa>
        } else if (is_whitespace(lex)) {
    3058:	6878      	ldr	r0, [r7, #4]
    305a:	f7ff fc17 	bl	288c <is_whitespace>
    305e:	4603      	mov	r3, r0
    3060:	2b00      	cmp	r3, #0
    3062:	d003      	beq.n	306c <skip_whitespace+0x4c>
            next_char(lex);
    3064:	6878      	ldr	r0, [r7, #4]
    3066:	f7ff fcf4 	bl	2a52 <next_char>
    306a:	e02e      	b.n	30ca <skip_whitespace+0xaa>
        } else if (is_char(lex, '#')) {
    306c:	2123      	movs	r1, #35	; 0x23
    306e:	6878      	ldr	r0, [r7, #4]
    3070:	f7ff fb44 	bl	26fc <is_char>
    3074:	4603      	mov	r3, r0
    3076:	2b00      	cmp	r3, #0
    3078:	d019      	beq.n	30ae <skip_whitespace+0x8e>
            next_char(lex);
    307a:	6878      	ldr	r0, [r7, #4]
    307c:	f7ff fce9 	bl	2a52 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3080:	e002      	b.n	3088 <skip_whitespace+0x68>
                next_char(lex);
    3082:	6878      	ldr	r0, [r7, #4]
    3084:	f7ff fce5 	bl	2a52 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3088:	6878      	ldr	r0, [r7, #4]
    308a:	f7ff fb14 	bl	26b6 <is_end>
    308e:	4603      	mov	r3, r0
    3090:	f083 0301 	eor.w	r3, r3, #1
    3094:	b2db      	uxtb	r3, r3
    3096:	2b00      	cmp	r3, #0
    3098:	d017      	beq.n	30ca <skip_whitespace+0xaa>
    309a:	6878      	ldr	r0, [r7, #4]
    309c:	f7ff fb1d 	bl	26da <is_physical_newline>
    30a0:	4603      	mov	r3, r0
    30a2:	f083 0301 	eor.w	r3, r3, #1
    30a6:	b2db      	uxtb	r3, r3
    30a8:	2b00      	cmp	r3, #0
    30aa:	d1ea      	bne.n	3082 <skip_whitespace+0x62>
    30ac:	e00d      	b.n	30ca <skip_whitespace+0xaa>
            }
            // had_physical_newline will be set on next loop
        } else if (is_char_and(lex, '\\', '\n')) {
    30ae:	220a      	movs	r2, #10
    30b0:	215c      	movs	r1, #92	; 0x5c
    30b2:	6878      	ldr	r0, [r7, #4]
    30b4:	f7ff fbcc 	bl	2850 <is_char_and>
    30b8:	4603      	mov	r3, r0
    30ba:	2b00      	cmp	r3, #0
    30bc:	d011      	beq.n	30e2 <skip_whitespace+0xc2>
            // line-continuation, so don't set had_physical_newline
            next_char(lex);
    30be:	6878      	ldr	r0, [r7, #4]
    30c0:	f7ff fcc7 	bl	2a52 <next_char>
            next_char(lex);
    30c4:	6878      	ldr	r0, [r7, #4]
    30c6:	f7ff fcc4 	bl	2a52 <next_char>
    while (!is_end(lex)) {
    30ca:	6878      	ldr	r0, [r7, #4]
    30cc:	f7ff faf3 	bl	26b6 <is_end>
    30d0:	4603      	mov	r3, r0
    30d2:	f083 0301 	eor.w	r3, r3, #1
    30d6:	b2db      	uxtb	r3, r3
    30d8:	2b00      	cmp	r3, #0
    30da:	d1aa      	bne.n	3032 <skip_whitespace+0x12>
    30dc:	e002      	b.n	30e4 <skip_whitespace+0xc4>
                break;
    30de:	bf00      	nop
    30e0:	e000      	b.n	30e4 <skip_whitespace+0xc4>
        } else {
            break;
    30e2:	bf00      	nop
        }
    }
    return had_physical_newline;
    30e4:	7bfb      	ldrb	r3, [r7, #15]
}
    30e6:	4618      	mov	r0, r3
    30e8:	3710      	adds	r7, #16
    30ea:	46bd      	mov	sp, r7
    30ec:	bd80      	pop	{r7, pc}

000030ee <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    30ee:	b580      	push	{r7, lr}
    30f0:	b08e      	sub	sp, #56	; 0x38
    30f2:	af00      	add	r7, sp, #0
    30f4:	6078      	str	r0, [r7, #4]
    // start new token text
    vstr_reset(&lex->vstr);
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	3344      	adds	r3, #68	; 0x44
    30fa:	4618      	mov	r0, r3
    30fc:	f7ff face 	bl	269c <vstr_reset>

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    3100:	2100      	movs	r1, #0
    3102:	6878      	ldr	r0, [r7, #4]
    3104:	f7ff ff8c 	bl	3020 <skip_whitespace>
    3108:	4603      	mov	r3, r0
    310a:	75fb      	strb	r3, [r7, #23]

    // set token source information
    lex->tok_line = lex->line;
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	69da      	ldr	r2, [r3, #28]
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	639a      	str	r2, [r3, #56]	; 0x38
    lex->tok_column = lex->column;
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	6a1a      	ldr	r2, [r3, #32]
    3118:	687b      	ldr	r3, [r7, #4]
    311a:	63da      	str	r2, [r3, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3120:	2b00      	cmp	r3, #0
    3122:	da08      	bge.n	3136 <mp_lexer_to_next+0x48>
        lex->tok_kind = MP_TOKEN_DEDENT;
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	2206      	movs	r2, #6
    3128:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent += 1;
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    312e:	1c5a      	adds	r2, r3, #1
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	625a      	str	r2, [r3, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    3134:	e2b6      	b.n	36a4 <mp_lexer_to_next+0x5b6>
    } else if (lex->emit_dent > 0) {
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    313a:	2b00      	cmp	r3, #0
    313c:	dd08      	ble.n	3150 <mp_lexer_to_next+0x62>
        lex->tok_kind = MP_TOKEN_INDENT;
    313e:	687b      	ldr	r3, [r7, #4]
    3140:	2205      	movs	r2, #5
    3142:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent -= 1;
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3148:	1e5a      	subs	r2, r3, #1
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	625a      	str	r2, [r3, #36]	; 0x24
}
    314e:	e2a9      	b.n	36a4 <mp_lexer_to_next+0x5b6>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3150:	7dfb      	ldrb	r3, [r7, #23]
    3152:	2b00      	cmp	r3, #0
    3154:	d03e      	beq.n	31d4 <mp_lexer_to_next+0xe6>
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    315a:	2b00      	cmp	r3, #0
    315c:	d13a      	bne.n	31d4 <mp_lexer_to_next+0xe6>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	2204      	movs	r2, #4
    3162:	641a      	str	r2, [r3, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	6a1b      	ldr	r3, [r3, #32]
    3168:	3b01      	subs	r3, #1
    316a:	613b      	str	r3, [r7, #16]
        if (num_spaces == indent_top(lex)) {
    316c:	6878      	ldr	r0, [r7, #4]
    316e:	f7ff fcfb 	bl	2b68 <indent_top>
    3172:	4602      	mov	r2, r0
    3174:	693b      	ldr	r3, [r7, #16]
    3176:	429a      	cmp	r2, r3
    3178:	f000 828d 	beq.w	3696 <mp_lexer_to_next+0x5a8>
        } else if (num_spaces > indent_top(lex)) {
    317c:	6878      	ldr	r0, [r7, #4]
    317e:	f7ff fcf3 	bl	2b68 <indent_top>
    3182:	4602      	mov	r2, r0
    3184:	693b      	ldr	r3, [r7, #16]
    3186:	429a      	cmp	r2, r3
    3188:	d211      	bcs.n	31ae <mp_lexer_to_next+0xc0>
            indent_push(lex, num_spaces);
    318a:	6939      	ldr	r1, [r7, #16]
    318c:	6878      	ldr	r0, [r7, #4]
    318e:	f7ff fcbd 	bl	2b0c <indent_push>
            lex->emit_dent += 1;
    3192:	687b      	ldr	r3, [r7, #4]
    3194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3196:	1c5a      	adds	r2, r3, #1
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	625a      	str	r2, [r3, #36]	; 0x24
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    319c:	e27b      	b.n	3696 <mp_lexer_to_next+0x5a8>
                indent_pop(lex);
    319e:	6878      	ldr	r0, [r7, #4]
    31a0:	f7ff fcf6 	bl	2b90 <indent_pop>
                lex->emit_dent -= 1;
    31a4:	687b      	ldr	r3, [r7, #4]
    31a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31a8:	1e5a      	subs	r2, r3, #1
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	625a      	str	r2, [r3, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    31ae:	6878      	ldr	r0, [r7, #4]
    31b0:	f7ff fcda 	bl	2b68 <indent_top>
    31b4:	4602      	mov	r2, r0
    31b6:	693b      	ldr	r3, [r7, #16]
    31b8:	429a      	cmp	r2, r3
    31ba:	d8f0      	bhi.n	319e <mp_lexer_to_next+0xb0>
            if (num_spaces != indent_top(lex)) {
    31bc:	6878      	ldr	r0, [r7, #4]
    31be:	f7ff fcd3 	bl	2b68 <indent_top>
    31c2:	4602      	mov	r2, r0
    31c4:	693b      	ldr	r3, [r7, #16]
    31c6:	429a      	cmp	r2, r3
    31c8:	f000 8265 	beq.w	3696 <mp_lexer_to_next+0x5a8>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	2202      	movs	r2, #2
    31d0:	641a      	str	r2, [r3, #64]	; 0x40
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    31d2:	e260      	b.n	3696 <mp_lexer_to_next+0x5a8>
    } else if (is_end(lex)) {
    31d4:	6878      	ldr	r0, [r7, #4]
    31d6:	f7ff fa6e 	bl	26b6 <is_end>
    31da:	4603      	mov	r3, r0
    31dc:	2b00      	cmp	r3, #0
    31de:	d003      	beq.n	31e8 <mp_lexer_to_next+0xfa>
        lex->tok_kind = MP_TOKEN_END;
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	2200      	movs	r2, #0
    31e4:	641a      	str	r2, [r3, #64]	; 0x40
}
    31e6:	e25d      	b.n	36a4 <mp_lexer_to_next+0x5b6>
    } else if (is_string_or_bytes(lex)) {
    31e8:	6878      	ldr	r0, [r7, #4]
    31ea:	f7ff fbbd 	bl	2968 <is_string_or_bytes>
    31ee:	4603      	mov	r3, r0
    31f0:	2b00      	cmp	r3, #0
    31f2:	d06d      	beq.n	32d0 <mp_lexer_to_next+0x1e2>
        lex->tok_kind = MP_TOKEN_END;
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	2200      	movs	r2, #0
    31f8:	641a      	str	r2, [r3, #64]	; 0x40
            bool is_raw = false;
    31fa:	2300      	movs	r3, #0
    31fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            mp_token_kind_t kind = MP_TOKEN_STRING;
    3200:	230a      	movs	r3, #10
    3202:	633b      	str	r3, [r7, #48]	; 0x30
            int n_char = 0;
    3204:	2300      	movs	r3, #0
    3206:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (is_char(lex, 'u')) {
    3208:	2175      	movs	r1, #117	; 0x75
    320a:	6878      	ldr	r0, [r7, #4]
    320c:	f7ff fa76 	bl	26fc <is_char>
    3210:	4603      	mov	r3, r0
    3212:	2b00      	cmp	r3, #0
    3214:	d002      	beq.n	321c <mp_lexer_to_next+0x12e>
                n_char = 1;
    3216:	2301      	movs	r3, #1
    3218:	62fb      	str	r3, [r7, #44]	; 0x2c
    321a:	e02e      	b.n	327a <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'b')) {
    321c:	2162      	movs	r1, #98	; 0x62
    321e:	6878      	ldr	r0, [r7, #4]
    3220:	f7ff fa6c 	bl	26fc <is_char>
    3224:	4603      	mov	r3, r0
    3226:	2b00      	cmp	r3, #0
    3228:	d010      	beq.n	324c <mp_lexer_to_next+0x15e>
                kind = MP_TOKEN_BYTES;
    322a:	230b      	movs	r3, #11
    322c:	633b      	str	r3, [r7, #48]	; 0x30
                n_char = 1;
    322e:	2301      	movs	r3, #1
    3230:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'r')) {
    3232:	2172      	movs	r1, #114	; 0x72
    3234:	6878      	ldr	r0, [r7, #4]
    3236:	f7ff fabb 	bl	27b0 <is_char_following>
    323a:	4603      	mov	r3, r0
    323c:	2b00      	cmp	r3, #0
    323e:	d01c      	beq.n	327a <mp_lexer_to_next+0x18c>
                    is_raw = true;
    3240:	2301      	movs	r3, #1
    3242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    n_char = 2;
    3246:	2302      	movs	r3, #2
    3248:	62fb      	str	r3, [r7, #44]	; 0x2c
    324a:	e016      	b.n	327a <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'r')) {
    324c:	2172      	movs	r1, #114	; 0x72
    324e:	6878      	ldr	r0, [r7, #4]
    3250:	f7ff fa54 	bl	26fc <is_char>
    3254:	4603      	mov	r3, r0
    3256:	2b00      	cmp	r3, #0
    3258:	d00f      	beq.n	327a <mp_lexer_to_next+0x18c>
                is_raw = true;
    325a:	2301      	movs	r3, #1
    325c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                n_char = 1;
    3260:	2301      	movs	r3, #1
    3262:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'b')) {
    3264:	2162      	movs	r1, #98	; 0x62
    3266:	6878      	ldr	r0, [r7, #4]
    3268:	f7ff faa2 	bl	27b0 <is_char_following>
    326c:	4603      	mov	r3, r0
    326e:	2b00      	cmp	r3, #0
    3270:	d003      	beq.n	327a <mp_lexer_to_next+0x18c>
                    kind = MP_TOKEN_BYTES;
    3272:	230b      	movs	r3, #11
    3274:	633b      	str	r3, [r7, #48]	; 0x30
                    n_char = 2;
    3276:	2302      	movs	r3, #2
    3278:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (lex->tok_kind == MP_TOKEN_END) {
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    327e:	2b00      	cmp	r3, #0
    3280:	d103      	bne.n	328a <mp_lexer_to_next+0x19c>
                lex->tok_kind = kind;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3286:	641a      	str	r2, [r3, #64]	; 0x40
    3288:	e005      	b.n	3296 <mp_lexer_to_next+0x1a8>
            } else if (lex->tok_kind != kind) {
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3290:	429a      	cmp	r2, r3
    3292:	f040 8202 	bne.w	369a <mp_lexer_to_next+0x5ac>
            if (n_char != 0) {
    3296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3298:	2b00      	cmp	r3, #0
    329a:	d008      	beq.n	32ae <mp_lexer_to_next+0x1c0>
                next_char(lex);
    329c:	6878      	ldr	r0, [r7, #4]
    329e:	f7ff fbd8 	bl	2a52 <next_char>
                if (n_char == 2) {
    32a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32a4:	2b02      	cmp	r3, #2
    32a6:	d102      	bne.n	32ae <mp_lexer_to_next+0x1c0>
                    next_char(lex);
    32a8:	6878      	ldr	r0, [r7, #4]
    32aa:	f7ff fbd2 	bl	2a52 <next_char>
            parse_string_literal(lex, is_raw);
    32ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    32b2:	4619      	mov	r1, r3
    32b4:	6878      	ldr	r0, [r7, #4]
    32b6:	f7ff fca9 	bl	2c0c <parse_string_literal>
            skip_whitespace(lex, true);
    32ba:	2101      	movs	r1, #1
    32bc:	6878      	ldr	r0, [r7, #4]
    32be:	f7ff feaf 	bl	3020 <skip_whitespace>
        } while (is_string_or_bytes(lex));
    32c2:	6878      	ldr	r0, [r7, #4]
    32c4:	f7ff fb50 	bl	2968 <is_string_or_bytes>
    32c8:	4603      	mov	r3, r0
    32ca:	2b00      	cmp	r3, #0
    32cc:	d195      	bne.n	31fa <mp_lexer_to_next+0x10c>
}
    32ce:	e1e9      	b.n	36a4 <mp_lexer_to_next+0x5b6>
    } else if (is_head_of_identifier(lex)) {
    32d0:	6878      	ldr	r0, [r7, #4]
    32d2:	f7ff fb88 	bl	29e6 <is_head_of_identifier>
    32d6:	4603      	mov	r3, r0
    32d8:	2b00      	cmp	r3, #0
    32da:	d061      	beq.n	33a0 <mp_lexer_to_next+0x2b2>
        lex->tok_kind = MP_TOKEN_NAME;
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	2207      	movs	r2, #7
    32e0:	641a      	str	r2, [r3, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    32e2:	687b      	ldr	r3, [r7, #4]
    32e4:	f103 0244 	add.w	r2, r3, #68	; 0x44
    32e8:	687b      	ldr	r3, [r7, #4]
    32ea:	691b      	ldr	r3, [r3, #16]
    32ec:	b2db      	uxtb	r3, r3
    32ee:	4619      	mov	r1, r3
    32f0:	4610      	mov	r0, r2
    32f2:	f7fe f981 	bl	15f8 <vstr_add_byte>
        next_char(lex);
    32f6:	6878      	ldr	r0, [r7, #4]
    32f8:	f7ff fbab 	bl	2a52 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    32fc:	e00c      	b.n	3318 <mp_lexer_to_next+0x22a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    32fe:	687b      	ldr	r3, [r7, #4]
    3300:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3304:	687b      	ldr	r3, [r7, #4]
    3306:	691b      	ldr	r3, [r3, #16]
    3308:	b2db      	uxtb	r3, r3
    330a:	4619      	mov	r1, r3
    330c:	4610      	mov	r0, r2
    330e:	f7fe f973 	bl	15f8 <vstr_add_byte>
            next_char(lex);
    3312:	6878      	ldr	r0, [r7, #4]
    3314:	f7ff fb9d 	bl	2a52 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    3318:	6878      	ldr	r0, [r7, #4]
    331a:	f7ff f9cc 	bl	26b6 <is_end>
    331e:	4603      	mov	r3, r0
    3320:	f083 0301 	eor.w	r3, r3, #1
    3324:	b2db      	uxtb	r3, r3
    3326:	2b00      	cmp	r3, #0
    3328:	d005      	beq.n	3336 <mp_lexer_to_next+0x248>
    332a:	6878      	ldr	r0, [r7, #4]
    332c:	f7ff fb77 	bl	2a1e <is_tail_of_identifier>
    3330:	4603      	mov	r3, r0
    3332:	2b00      	cmp	r3, #0
    3334:	d1e3      	bne.n	32fe <mp_lexer_to_next+0x210>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	3344      	adds	r3, #68	; 0x44
    333a:	4618      	mov	r0, r3
    333c:	f7fe f941 	bl	15c2 <vstr_null_terminated_str>
    3340:	60f8      	str	r0, [r7, #12]
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    3342:	2300      	movs	r3, #0
    3344:	62bb      	str	r3, [r7, #40]	; 0x28
    3346:	e027      	b.n	3398 <mp_lexer_to_next+0x2aa>
            int cmp = strcmp(s, tok_kw[i]);
    3348:	4aa6      	ldr	r2, [pc, #664]	; (35e4 <mp_lexer_to_next+0x4f6>)
    334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3350:	4619      	mov	r1, r3
    3352:	68f8      	ldr	r0, [r7, #12]
    3354:	f019 fd10 	bl	1cd78 <strcmp>
    3358:	60b8      	str	r0, [r7, #8]
            if (cmp == 0) {
    335a:	68bb      	ldr	r3, [r7, #8]
    335c:	2b00      	cmp	r3, #0
    335e:	d114      	bne.n	338a <mp_lexer_to_next+0x29c>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    3360:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3362:	f103 020d 	add.w	r2, r3, #13
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	641a      	str	r2, [r3, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    336e:	2b10      	cmp	r3, #16
    3370:	f040 8195 	bne.w	369e <mp_lexer_to_next+0x5b0>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    3374:	4b9c      	ldr	r3, [pc, #624]	; (35e8 <mp_lexer_to_next+0x4fa>)
    3376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    337a:	2b00      	cmp	r3, #0
    337c:	d101      	bne.n	3382 <mp_lexer_to_next+0x294>
    337e:	220f      	movs	r2, #15
    3380:	e000      	b.n	3384 <mp_lexer_to_next+0x296>
    3382:	220d      	movs	r2, #13
    3384:	687b      	ldr	r3, [r7, #4]
    3386:	641a      	str	r2, [r3, #64]	; 0x40
                break;
    3388:	e189      	b.n	369e <mp_lexer_to_next+0x5b0>
            } else if (cmp < 0) {
    338a:	68bb      	ldr	r3, [r7, #8]
    338c:	2b00      	cmp	r3, #0
    338e:	f2c0 8188 	blt.w	36a2 <mp_lexer_to_next+0x5b4>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    3392:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3394:	3301      	adds	r3, #1
    3396:	62bb      	str	r3, [r7, #40]	; 0x28
    3398:	6abb      	ldr	r3, [r7, #40]	; 0x28
    339a:	2b21      	cmp	r3, #33	; 0x21
    339c:	d9d4      	bls.n	3348 <mp_lexer_to_next+0x25a>
}
    339e:	e181      	b.n	36a4 <mp_lexer_to_next+0x5b6>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    33a0:	6878      	ldr	r0, [r7, #4]
    33a2:	f7ff fa8f 	bl	28c4 <is_digit>
    33a6:	4603      	mov	r3, r0
    33a8:	2b00      	cmp	r3, #0
    33aa:	d10e      	bne.n	33ca <mp_lexer_to_next+0x2dc>
    33ac:	212e      	movs	r1, #46	; 0x2e
    33ae:	6878      	ldr	r0, [r7, #4]
    33b0:	f7ff f9a4 	bl	26fc <is_char>
    33b4:	4603      	mov	r3, r0
    33b6:	2b00      	cmp	r3, #0
    33b8:	f000 80ad 	beq.w	3516 <mp_lexer_to_next+0x428>
    33bc:	6878      	ldr	r0, [r7, #4]
    33be:	f7ff fa8f 	bl	28e0 <is_following_digit>
    33c2:	4603      	mov	r3, r0
    33c4:	2b00      	cmp	r3, #0
    33c6:	f000 80a6 	beq.w	3516 <mp_lexer_to_next+0x428>
        bool forced_integer = false;
    33ca:	2300      	movs	r3, #0
    33cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (is_char(lex, '.')) {
    33d0:	212e      	movs	r1, #46	; 0x2e
    33d2:	6878      	ldr	r0, [r7, #4]
    33d4:	f7ff f992 	bl	26fc <is_char>
    33d8:	4603      	mov	r3, r0
    33da:	2b00      	cmp	r3, #0
    33dc:	d003      	beq.n	33e6 <mp_lexer_to_next+0x2f8>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	2209      	movs	r2, #9
    33e2:	641a      	str	r2, [r3, #64]	; 0x40
    33e4:	e012      	b.n	340c <mp_lexer_to_next+0x31e>
            lex->tok_kind = MP_TOKEN_INTEGER;
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	2208      	movs	r2, #8
    33ea:	641a      	str	r2, [r3, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    33ec:	2130      	movs	r1, #48	; 0x30
    33ee:	6878      	ldr	r0, [r7, #4]
    33f0:	f7ff f984 	bl	26fc <is_char>
    33f4:	4603      	mov	r3, r0
    33f6:	2b00      	cmp	r3, #0
    33f8:	d008      	beq.n	340c <mp_lexer_to_next+0x31e>
    33fa:	6878      	ldr	r0, [r7, #4]
    33fc:	f7ff fa7e 	bl	28fc <is_following_base_char>
    3400:	4603      	mov	r3, r0
    3402:	2b00      	cmp	r3, #0
    3404:	d002      	beq.n	340c <mp_lexer_to_next+0x31e>
                forced_integer = true;
    3406:	2301      	movs	r3, #1
    3408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    340c:	687b      	ldr	r3, [r7, #4]
    340e:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	691b      	ldr	r3, [r3, #16]
    3416:	4619      	mov	r1, r3
    3418:	4610      	mov	r0, r2
    341a:	f7fe f8ff 	bl	161c <vstr_add_char>
        next_char(lex);
    341e:	6878      	ldr	r0, [r7, #4]
    3420:	f7ff fb17 	bl	2a52 <next_char>
        while (!is_end(lex)) {
    3424:	e06b      	b.n	34fe <mp_lexer_to_next+0x410>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    3426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    342a:	f083 0301 	eor.w	r3, r3, #1
    342e:	b2db      	uxtb	r3, r3
    3430:	2b00      	cmp	r3, #0
    3432:	d02e      	beq.n	3492 <mp_lexer_to_next+0x3a4>
    3434:	2245      	movs	r2, #69	; 0x45
    3436:	2165      	movs	r1, #101	; 0x65
    3438:	6878      	ldr	r0, [r7, #4]
    343a:	f7ff f973 	bl	2724 <is_char_or>
    343e:	4603      	mov	r3, r0
    3440:	2b00      	cmp	r3, #0
    3442:	d026      	beq.n	3492 <mp_lexer_to_next+0x3a4>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3444:	687b      	ldr	r3, [r7, #4]
    3446:	2209      	movs	r2, #9
    3448:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    344a:	687b      	ldr	r3, [r7, #4]
    344c:	3344      	adds	r3, #68	; 0x44
    344e:	2165      	movs	r1, #101	; 0x65
    3450:	4618      	mov	r0, r3
    3452:	f7fe f8e3 	bl	161c <vstr_add_char>
                next_char(lex);
    3456:	6878      	ldr	r0, [r7, #4]
    3458:	f7ff fafb 	bl	2a52 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    345c:	212b      	movs	r1, #43	; 0x2b
    345e:	6878      	ldr	r0, [r7, #4]
    3460:	f7ff f94c 	bl	26fc <is_char>
    3464:	4603      	mov	r3, r0
    3466:	2b00      	cmp	r3, #0
    3468:	d106      	bne.n	3478 <mp_lexer_to_next+0x38a>
    346a:	212d      	movs	r1, #45	; 0x2d
    346c:	6878      	ldr	r0, [r7, #4]
    346e:	f7ff f945 	bl	26fc <is_char>
    3472:	4603      	mov	r3, r0
    3474:	2b00      	cmp	r3, #0
    3476:	d042      	beq.n	34fe <mp_lexer_to_next+0x410>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3478:	687b      	ldr	r3, [r7, #4]
    347a:	f103 0244 	add.w	r2, r3, #68	; 0x44
    347e:	687b      	ldr	r3, [r7, #4]
    3480:	691b      	ldr	r3, [r3, #16]
    3482:	4619      	mov	r1, r3
    3484:	4610      	mov	r0, r2
    3486:	f7fe f8c9 	bl	161c <vstr_add_char>
                    next_char(lex);
    348a:	6878      	ldr	r0, [r7, #4]
    348c:	f7ff fae1 	bl	2a52 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    3490:	e035      	b.n	34fe <mp_lexer_to_next+0x410>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    3492:	6878      	ldr	r0, [r7, #4]
    3494:	f7ff fa08 	bl	28a8 <is_letter>
    3498:	4603      	mov	r3, r0
    349a:	2b00      	cmp	r3, #0
    349c:	d10c      	bne.n	34b8 <mp_lexer_to_next+0x3ca>
    349e:	6878      	ldr	r0, [r7, #4]
    34a0:	f7ff fa10 	bl	28c4 <is_digit>
    34a4:	4603      	mov	r3, r0
    34a6:	2b00      	cmp	r3, #0
    34a8:	d106      	bne.n	34b8 <mp_lexer_to_next+0x3ca>
    34aa:	212e      	movs	r1, #46	; 0x2e
    34ac:	6878      	ldr	r0, [r7, #4]
    34ae:	f7ff f925 	bl	26fc <is_char>
    34b2:	4603      	mov	r3, r0
    34b4:	2b00      	cmp	r3, #0
    34b6:	d018      	beq.n	34ea <mp_lexer_to_next+0x3fc>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    34b8:	234a      	movs	r3, #74	; 0x4a
    34ba:	226a      	movs	r2, #106	; 0x6a
    34bc:	212e      	movs	r1, #46	; 0x2e
    34be:	6878      	ldr	r0, [r7, #4]
    34c0:	f7ff f94e 	bl	2760 <is_char_or3>
    34c4:	4603      	mov	r3, r0
    34c6:	2b00      	cmp	r3, #0
    34c8:	d002      	beq.n	34d0 <mp_lexer_to_next+0x3e2>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    34ca:	687b      	ldr	r3, [r7, #4]
    34cc:	2209      	movs	r2, #9
    34ce:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	f103 0244 	add.w	r2, r3, #68	; 0x44
    34d6:	687b      	ldr	r3, [r7, #4]
    34d8:	691b      	ldr	r3, [r3, #16]
    34da:	4619      	mov	r1, r3
    34dc:	4610      	mov	r0, r2
    34de:	f7fe f89d 	bl	161c <vstr_add_char>
                next_char(lex);
    34e2:	6878      	ldr	r0, [r7, #4]
    34e4:	f7ff fab5 	bl	2a52 <next_char>
    34e8:	e009      	b.n	34fe <mp_lexer_to_next+0x410>
            } else if (is_char(lex, '_')) {
    34ea:	215f      	movs	r1, #95	; 0x5f
    34ec:	6878      	ldr	r0, [r7, #4]
    34ee:	f7ff f905 	bl	26fc <is_char>
    34f2:	4603      	mov	r3, r0
    34f4:	2b00      	cmp	r3, #0
    34f6:	d00c      	beq.n	3512 <mp_lexer_to_next+0x424>
                next_char(lex);
    34f8:	6878      	ldr	r0, [r7, #4]
    34fa:	f7ff faaa 	bl	2a52 <next_char>
        while (!is_end(lex)) {
    34fe:	6878      	ldr	r0, [r7, #4]
    3500:	f7ff f8d9 	bl	26b6 <is_end>
    3504:	4603      	mov	r3, r0
    3506:	f083 0301 	eor.w	r3, r3, #1
    350a:	b2db      	uxtb	r3, r3
    350c:	2b00      	cmp	r3, #0
    350e:	d18a      	bne.n	3426 <mp_lexer_to_next+0x338>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3510:	e0c8      	b.n	36a4 <mp_lexer_to_next+0x5b6>
                break;
    3512:	bf00      	nop
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3514:	e0c6      	b.n	36a4 <mp_lexer_to_next+0x5b6>
        const char *t = tok_enc;
    3516:	4b35      	ldr	r3, [pc, #212]	; (35ec <mp_lexer_to_next+0x4fe>)
    3518:	623b      	str	r3, [r7, #32]
        size_t tok_enc_index = 0;
    351a:	2300      	movs	r3, #0
    351c:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    351e:	e010      	b.n	3542 <mp_lexer_to_next+0x454>
            if (*t == 'e' || *t == 'c') {
    3520:	6a3b      	ldr	r3, [r7, #32]
    3522:	781b      	ldrb	r3, [r3, #0]
    3524:	2b65      	cmp	r3, #101	; 0x65
    3526:	d003      	beq.n	3530 <mp_lexer_to_next+0x442>
    3528:	6a3b      	ldr	r3, [r7, #32]
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	2b63      	cmp	r3, #99	; 0x63
    352e:	d102      	bne.n	3536 <mp_lexer_to_next+0x448>
                t += 1;
    3530:	6a3b      	ldr	r3, [r7, #32]
    3532:	3301      	adds	r3, #1
    3534:	623b      	str	r3, [r7, #32]
            tok_enc_index += 1;
    3536:	69fb      	ldr	r3, [r7, #28]
    3538:	3301      	adds	r3, #1
    353a:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    353c:	6a3b      	ldr	r3, [r7, #32]
    353e:	3301      	adds	r3, #1
    3540:	623b      	str	r3, [r7, #32]
    3542:	6a3b      	ldr	r3, [r7, #32]
    3544:	781b      	ldrb	r3, [r3, #0]
    3546:	2b00      	cmp	r3, #0
    3548:	d00b      	beq.n	3562 <mp_lexer_to_next+0x474>
    354a:	6a3b      	ldr	r3, [r7, #32]
    354c:	781b      	ldrb	r3, [r3, #0]
    354e:	4619      	mov	r1, r3
    3550:	6878      	ldr	r0, [r7, #4]
    3552:	f7ff f8d3 	bl	26fc <is_char>
    3556:	4603      	mov	r3, r0
    3558:	f083 0301 	eor.w	r3, r3, #1
    355c:	b2db      	uxtb	r3, r3
    355e:	2b00      	cmp	r3, #0
    3560:	d1de      	bne.n	3520 <mp_lexer_to_next+0x432>
        next_char(lex);
    3562:	6878      	ldr	r0, [r7, #4]
    3564:	f7ff fa75 	bl	2a52 <next_char>
        if (*t == 0) {
    3568:	6a3b      	ldr	r3, [r7, #32]
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	2b00      	cmp	r3, #0
    356e:	d103      	bne.n	3578 <mp_lexer_to_next+0x48a>
            lex->tok_kind = MP_TOKEN_INVALID;
    3570:	687b      	ldr	r3, [r7, #4]
    3572:	2201      	movs	r2, #1
    3574:	641a      	str	r2, [r3, #64]	; 0x40
}
    3576:	e095      	b.n	36a4 <mp_lexer_to_next+0x5b6>
        } else if (*t == '!') {
    3578:	6a3b      	ldr	r3, [r7, #32]
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	2b21      	cmp	r3, #33	; 0x21
    357e:	d111      	bne.n	35a4 <mp_lexer_to_next+0x4b6>
            if (is_char(lex, '=')) {
    3580:	213d      	movs	r1, #61	; 0x3d
    3582:	6878      	ldr	r0, [r7, #4]
    3584:	f7ff f8ba 	bl	26fc <is_char>
    3588:	4603      	mov	r3, r0
    358a:	2b00      	cmp	r3, #0
    358c:	d006      	beq.n	359c <mp_lexer_to_next+0x4ae>
                next_char(lex);
    358e:	6878      	ldr	r0, [r7, #4]
    3590:	f7ff fa5f 	bl	2a52 <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	2241      	movs	r2, #65	; 0x41
    3598:	641a      	str	r2, [r3, #64]	; 0x40
}
    359a:	e083      	b.n	36a4 <mp_lexer_to_next+0x5b6>
                lex->tok_kind = MP_TOKEN_INVALID;
    359c:	687b      	ldr	r3, [r7, #4]
    359e:	2201      	movs	r2, #1
    35a0:	641a      	str	r2, [r3, #64]	; 0x40
}
    35a2:	e07f      	b.n	36a4 <mp_lexer_to_next+0x5b6>
        } else if (*t == '.') {
    35a4:	6a3b      	ldr	r3, [r7, #32]
    35a6:	781b      	ldrb	r3, [r3, #0]
    35a8:	2b2e      	cmp	r3, #46	; 0x2e
    35aa:	d115      	bne.n	35d8 <mp_lexer_to_next+0x4ea>
            if (is_char_and(lex, '.', '.')) {
    35ac:	222e      	movs	r2, #46	; 0x2e
    35ae:	212e      	movs	r1, #46	; 0x2e
    35b0:	6878      	ldr	r0, [r7, #4]
    35b2:	f7ff f94d 	bl	2850 <is_char_and>
    35b6:	4603      	mov	r3, r0
    35b8:	2b00      	cmp	r3, #0
    35ba:	d009      	beq.n	35d0 <mp_lexer_to_next+0x4e2>
                next_char(lex);
    35bc:	6878      	ldr	r0, [r7, #4]
    35be:	f7ff fa48 	bl	2a52 <next_char>
                next_char(lex);
    35c2:	6878      	ldr	r0, [r7, #4]
    35c4:	f7ff fa45 	bl	2a52 <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    35c8:	687b      	ldr	r3, [r7, #4]
    35ca:	220c      	movs	r2, #12
    35cc:	641a      	str	r2, [r3, #64]	; 0x40
}
    35ce:	e069      	b.n	36a4 <mp_lexer_to_next+0x5b6>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	224a      	movs	r2, #74	; 0x4a
    35d4:	641a      	str	r2, [r3, #64]	; 0x40
}
    35d6:	e065      	b.n	36a4 <mp_lexer_to_next+0x5b6>
            t += 1;
    35d8:	6a3b      	ldr	r3, [r7, #32]
    35da:	3301      	adds	r3, #1
    35dc:	623b      	str	r3, [r7, #32]
            size_t t_index = tok_enc_index;
    35de:	69fb      	ldr	r3, [r7, #28]
    35e0:	61bb      	str	r3, [r7, #24]
            while (*t == 'c' || *t == 'e') {
    35e2:	e023      	b.n	362c <mp_lexer_to_next+0x53e>
    35e4:	0001f740 	.word	0x0001f740
    35e8:	200012f0 	.word	0x200012f0
    35ec:	0001f5dc 	.word	0x0001f5dc
                t_index += 1;
    35f0:	69bb      	ldr	r3, [r7, #24]
    35f2:	3301      	adds	r3, #1
    35f4:	61bb      	str	r3, [r7, #24]
                if (is_char(lex, t[1])) {
    35f6:	6a3b      	ldr	r3, [r7, #32]
    35f8:	3301      	adds	r3, #1
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	4619      	mov	r1, r3
    35fe:	6878      	ldr	r0, [r7, #4]
    3600:	f7ff f87c 	bl	26fc <is_char>
    3604:	4603      	mov	r3, r0
    3606:	2b00      	cmp	r3, #0
    3608:	d009      	beq.n	361e <mp_lexer_to_next+0x530>
                    next_char(lex);
    360a:	6878      	ldr	r0, [r7, #4]
    360c:	f7ff fa21 	bl	2a52 <next_char>
                    tok_enc_index = t_index;
    3610:	69bb      	ldr	r3, [r7, #24]
    3612:	61fb      	str	r3, [r7, #28]
                    if (*t == 'e') {
    3614:	6a3b      	ldr	r3, [r7, #32]
    3616:	781b      	ldrb	r3, [r3, #0]
    3618:	2b65      	cmp	r3, #101	; 0x65
    361a:	d104      	bne.n	3626 <mp_lexer_to_next+0x538>
                        break;
    361c:	e010      	b.n	3640 <mp_lexer_to_next+0x552>
                } else if (*t == 'c') {
    361e:	6a3b      	ldr	r3, [r7, #32]
    3620:	781b      	ldrb	r3, [r3, #0]
    3622:	2b63      	cmp	r3, #99	; 0x63
    3624:	d00b      	beq.n	363e <mp_lexer_to_next+0x550>
                t += 2;
    3626:	6a3b      	ldr	r3, [r7, #32]
    3628:	3302      	adds	r3, #2
    362a:	623b      	str	r3, [r7, #32]
            while (*t == 'c' || *t == 'e') {
    362c:	6a3b      	ldr	r3, [r7, #32]
    362e:	781b      	ldrb	r3, [r3, #0]
    3630:	2b63      	cmp	r3, #99	; 0x63
    3632:	d0dd      	beq.n	35f0 <mp_lexer_to_next+0x502>
    3634:	6a3b      	ldr	r3, [r7, #32]
    3636:	781b      	ldrb	r3, [r3, #0]
    3638:	2b65      	cmp	r3, #101	; 0x65
    363a:	d0d9      	beq.n	35f0 <mp_lexer_to_next+0x502>
    363c:	e000      	b.n	3640 <mp_lexer_to_next+0x552>
                    break;
    363e:	bf00      	nop
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    3640:	4a1a      	ldr	r2, [pc, #104]	; (36ac <mp_lexer_to_next+0x5be>)
    3642:	69fb      	ldr	r3, [r7, #28]
    3644:	4413      	add	r3, r2
    3646:	781b      	ldrb	r3, [r3, #0]
    3648:	461a      	mov	r2, r3
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	641a      	str	r2, [r3, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3652:	2b42      	cmp	r3, #66	; 0x42
    3654:	d007      	beq.n	3666 <mp_lexer_to_next+0x578>
    3656:	687b      	ldr	r3, [r7, #4]
    3658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    365a:	2b44      	cmp	r3, #68	; 0x44
    365c:	d003      	beq.n	3666 <mp_lexer_to_next+0x578>
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3662:	2b46      	cmp	r3, #70	; 0x46
    3664:	d105      	bne.n	3672 <mp_lexer_to_next+0x584>
                lex->nested_bracket_level += 1;
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    366a:	1c5a      	adds	r2, r3, #1
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	629a      	str	r2, [r3, #40]	; 0x28
    3670:	e018      	b.n	36a4 <mp_lexer_to_next+0x5b6>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    3672:	687b      	ldr	r3, [r7, #4]
    3674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3676:	2b43      	cmp	r3, #67	; 0x43
    3678:	d007      	beq.n	368a <mp_lexer_to_next+0x59c>
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    367e:	2b45      	cmp	r3, #69	; 0x45
    3680:	d003      	beq.n	368a <mp_lexer_to_next+0x59c>
    3682:	687b      	ldr	r3, [r7, #4]
    3684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3686:	2b47      	cmp	r3, #71	; 0x47
    3688:	d10c      	bne.n	36a4 <mp_lexer_to_next+0x5b6>
                lex->nested_bracket_level -= 1;
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    368e:	1e5a      	subs	r2, r3, #1
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	629a      	str	r2, [r3, #40]	; 0x28
}
    3694:	e006      	b.n	36a4 <mp_lexer_to_next+0x5b6>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3696:	bf00      	nop
    3698:	e004      	b.n	36a4 <mp_lexer_to_next+0x5b6>
                break;
    369a:	bf00      	nop
    369c:	e002      	b.n	36a4 <mp_lexer_to_next+0x5b6>
                break;
    369e:	bf00      	nop
    36a0:	e000      	b.n	36a4 <mp_lexer_to_next+0x5b6>
                break;
    36a2:	bf00      	nop
}
    36a4:	bf00      	nop
    36a6:	3738      	adds	r7, #56	; 0x38
    36a8:	46bd      	mov	sp, r7
    36aa:	bd80      	pop	{r7, pc}
    36ac:	0001f624 	.word	0x0001f624

000036b0 <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    36b0:	b580      	push	{r7, lr}
    36b2:	b086      	sub	sp, #24
    36b4:	af00      	add	r7, sp, #0
    36b6:	60f8      	str	r0, [r7, #12]
    36b8:	4638      	mov	r0, r7
    36ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    36be:	2054      	movs	r0, #84	; 0x54
    36c0:	f7fc fe2c 	bl	31c <m_malloc>
    36c4:	6178      	str	r0, [r7, #20]

    lex->source_name = src_name;
    36c6:	697b      	ldr	r3, [r7, #20]
    36c8:	68fa      	ldr	r2, [r7, #12]
    36ca:	601a      	str	r2, [r3, #0]
    lex->reader = reader;
    36cc:	697b      	ldr	r3, [r7, #20]
    36ce:	3304      	adds	r3, #4
    36d0:	463a      	mov	r2, r7
    36d2:	ca07      	ldmia	r2, {r0, r1, r2}
    36d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    36d8:	697b      	ldr	r3, [r7, #20]
    36da:	2201      	movs	r2, #1
    36dc:	61da      	str	r2, [r3, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    36de:	697b      	ldr	r3, [r7, #20]
    36e0:	f06f 0201 	mvn.w	r2, #1
    36e4:	621a      	str	r2, [r3, #32]
    lex->emit_dent = 0;
    36e6:	697b      	ldr	r3, [r7, #20]
    36e8:	2200      	movs	r2, #0
    36ea:	625a      	str	r2, [r3, #36]	; 0x24
    lex->nested_bracket_level = 0;
    36ec:	697b      	ldr	r3, [r7, #20]
    36ee:	2200      	movs	r2, #0
    36f0:	629a      	str	r2, [r3, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    36f2:	697b      	ldr	r3, [r7, #20]
    36f4:	220a      	movs	r2, #10
    36f6:	62da      	str	r2, [r3, #44]	; 0x2c
    lex->num_indent_level = 1;
    36f8:	697b      	ldr	r3, [r7, #20]
    36fa:	2201      	movs	r2, #1
    36fc:	631a      	str	r2, [r3, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    36fe:	697b      	ldr	r3, [r7, #20]
    3700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3702:	005b      	lsls	r3, r3, #1
    3704:	4618      	mov	r0, r3
    3706:	f7fc fe09 	bl	31c <m_malloc>
    370a:	4602      	mov	r2, r0
    370c:	697b      	ldr	r3, [r7, #20]
    370e:	635a      	str	r2, [r3, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    3710:	697b      	ldr	r3, [r7, #20]
    3712:	3344      	adds	r3, #68	; 0x44
    3714:	2120      	movs	r1, #32
    3716:	4618      	mov	r0, r3
    3718:	f7fd fe1c 	bl	1354 <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    371c:	697b      	ldr	r3, [r7, #20]
    371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3720:	2200      	movs	r2, #0
    3722:	801a      	strh	r2, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    3724:	697b      	ldr	r3, [r7, #20]
    3726:	2200      	movs	r2, #0
    3728:	619a      	str	r2, [r3, #24]
    372a:	697b      	ldr	r3, [r7, #20]
    372c:	699a      	ldr	r2, [r3, #24]
    372e:	697b      	ldr	r3, [r7, #20]
    3730:	615a      	str	r2, [r3, #20]
    3732:	697b      	ldr	r3, [r7, #20]
    3734:	695a      	ldr	r2, [r3, #20]
    3736:	697b      	ldr	r3, [r7, #20]
    3738:	611a      	str	r2, [r3, #16]
    next_char(lex);
    373a:	6978      	ldr	r0, [r7, #20]
    373c:	f7ff f989 	bl	2a52 <next_char>
    next_char(lex);
    3740:	6978      	ldr	r0, [r7, #20]
    3742:	f7ff f986 	bl	2a52 <next_char>
    next_char(lex);
    3746:	6978      	ldr	r0, [r7, #20]
    3748:	f7ff f983 	bl	2a52 <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    374c:	6978      	ldr	r0, [r7, #20]
    374e:	f7ff fcce 	bl	30ee <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    3752:	697b      	ldr	r3, [r7, #20]
    3754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3756:	2b01      	cmp	r3, #1
    3758:	d002      	beq.n	3760 <mp_lexer_new+0xb0>
        lex->tok_kind = MP_TOKEN_INDENT;
    375a:	697b      	ldr	r3, [r7, #20]
    375c:	2205      	movs	r2, #5
    375e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    return lex;
    3760:	697b      	ldr	r3, [r7, #20]
}
    3762:	4618      	mov	r0, r3
    3764:	3718      	adds	r7, #24
    3766:	46bd      	mov	sp, r7
    3768:	bd80      	pop	{r7, pc}

0000376a <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    376a:	b580      	push	{r7, lr}
    376c:	b088      	sub	sp, #32
    376e:	af00      	add	r7, sp, #0
    3770:	60f8      	str	r0, [r7, #12]
    3772:	60b9      	str	r1, [r7, #8]
    3774:	607a      	str	r2, [r7, #4]
    3776:	603b      	str	r3, [r7, #0]
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    3778:	f107 0014 	add.w	r0, r7, #20
    377c:	683b      	ldr	r3, [r7, #0]
    377e:	687a      	ldr	r2, [r7, #4]
    3780:	68b9      	ldr	r1, [r7, #8]
    3782:	f7fe ff60 	bl	2646 <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    3786:	f107 0314 	add.w	r3, r7, #20
    378a:	cb0e      	ldmia	r3, {r1, r2, r3}
    378c:	68f8      	ldr	r0, [r7, #12]
    378e:	f7ff ff8f 	bl	36b0 <mp_lexer_new>
    3792:	4603      	mov	r3, r0
}
    3794:	4618      	mov	r0, r3
    3796:	3720      	adds	r7, #32
    3798:	46bd      	mov	sp, r7
    379a:	bd80      	pop	{r7, pc}

0000379c <mp_lexer_free>:

#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    379c:	b580      	push	{r7, lr}
    379e:	b082      	sub	sp, #8
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
    if (lex) {
    37a4:	687b      	ldr	r3, [r7, #4]
    37a6:	2b00      	cmp	r3, #0
    37a8:	d012      	beq.n	37d0 <mp_lexer_free+0x34>
        lex->reader.close(lex->reader.data);
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	68db      	ldr	r3, [r3, #12]
    37ae:	687a      	ldr	r2, [r7, #4]
    37b0:	6852      	ldr	r2, [r2, #4]
    37b2:	4610      	mov	r0, r2
    37b4:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    37b6:	687b      	ldr	r3, [r7, #4]
    37b8:	3344      	adds	r3, #68	; 0x44
    37ba:	4618      	mov	r0, r3
    37bc:	f7fd fe2e 	bl	141c <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    37c0:	687b      	ldr	r3, [r7, #4]
    37c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    37c4:	4618      	mov	r0, r3
    37c6:	f7fc fe07 	bl	3d8 <m_free>
        m_del_obj(mp_lexer_t, lex);
    37ca:	6878      	ldr	r0, [r7, #4]
    37cc:	f7fc fe04 	bl	3d8 <m_free>
    }
}
    37d0:	bf00      	nop
    37d2:	3708      	adds	r7, #8
    37d4:	46bd      	mov	sp, r7
    37d6:	bd80      	pop	{r7, pc}

000037d8 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    37d8:	b480      	push	{r7}
    37da:	b083      	sub	sp, #12
    37dc:	af00      	add	r7, sp, #0
    37de:	6078      	str	r0, [r7, #4]
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	f003 0301 	and.w	r3, r3, #1
    37e6:	2b00      	cmp	r3, #0
    37e8:	bf14      	ite	ne
    37ea:	2301      	movne	r3, #1
    37ec:	2300      	moveq	r3, #0
    37ee:	b2db      	uxtb	r3, r3
    37f0:	4618      	mov	r0, r3
    37f2:	370c      	adds	r7, #12
    37f4:	46bd      	mov	sp, r7
    37f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37fa:	4770      	bx	lr

000037fc <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    37fc:	b480      	push	{r7}
    37fe:	b083      	sub	sp, #12
    3800:	af00      	add	r7, sp, #0
    3802:	6078      	str	r0, [r7, #4]
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	f003 0303 	and.w	r3, r3, #3
    380a:	2b00      	cmp	r3, #0
    380c:	bf0c      	ite	eq
    380e:	2301      	moveq	r3, #1
    3810:	2300      	movne	r3, #0
    3812:	b2db      	uxtb	r3, r3
    3814:	4618      	mov	r0, r3
    3816:	370c      	adds	r7, #12
    3818:	46bd      	mov	sp, r7
    381a:	f85d 7b04 	ldr.w	r7, [sp], #4
    381e:	4770      	bx	lr

00003820 <mp_parse_node_new_small_int>:
#define MP_PARSE_NODE_LEAF_ARG(pn) (((uintptr_t)(pn)) >> 4)
#define MP_PARSE_NODE_LEAF_SMALL_INT(pn) (((mp_int_t)(intptr_t)(pn)) >> 1)
#define MP_PARSE_NODE_STRUCT_KIND(pns) ((pns)->kind_num_nodes & 0xff)
#define MP_PARSE_NODE_STRUCT_NUM_NODES(pns) ((pns)->kind_num_nodes >> 8)

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    3820:	b480      	push	{r7}
    3822:	b083      	sub	sp, #12
    3824:	af00      	add	r7, sp, #0
    3826:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	005b      	lsls	r3, r3, #1
    382c:	f043 0301 	orr.w	r3, r3, #1
}
    3830:	4618      	mov	r0, r3
    3832:	370c      	adds	r7, #12
    3834:	46bd      	mov	sp, r7
    3836:	f85d 7b04 	ldr.w	r7, [sp], #4
    383a:	4770      	bx	lr

0000383c <mp_parse_node_new_leaf>:
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    383c:	b480      	push	{r7}
    383e:	b083      	sub	sp, #12
    3840:	af00      	add	r7, sp, #0
    3842:	6078      	str	r0, [r7, #4]
    3844:	6039      	str	r1, [r7, #0]
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    3846:	683b      	ldr	r3, [r7, #0]
    3848:	011a      	lsls	r2, r3, #4
    384a:	687b      	ldr	r3, [r7, #4]
    384c:	4313      	orrs	r3, r2
}
    384e:	4618      	mov	r0, r3
    3850:	370c      	adds	r7, #12
    3852:	46bd      	mov	sp, r7
    3854:	f85d 7b04 	ldr.w	r7, [sp], #4
    3858:	4770      	bx	lr

0000385a <get_rule_arg>:
    #if MICROPY_COMP_CONST
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    385a:	b480      	push	{r7}
    385c:	b085      	sub	sp, #20
    385e:	af00      	add	r7, sp, #0
    3860:	4603      	mov	r3, r0
    3862:	71fb      	strb	r3, [r7, #7]
    size_t off = rule_arg_offset_table[r_id];
    3864:	79fb      	ldrb	r3, [r7, #7]
    3866:	4a0a      	ldr	r2, [pc, #40]	; (3890 <get_rule_arg+0x36>)
    3868:	5cd3      	ldrb	r3, [r2, r3]
    386a:	60fb      	str	r3, [r7, #12]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    386c:	79fb      	ldrb	r3, [r7, #7]
    386e:	2266      	movs	r2, #102	; 0x66
    3870:	4293      	cmp	r3, r2
    3872:	d303      	bcc.n	387c <get_rule_arg+0x22>
        off |= 0x100;
    3874:	68fb      	ldr	r3, [r7, #12]
    3876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    387a:	60fb      	str	r3, [r7, #12]
    }
    return &rule_arg_combined_table[off];
    387c:	68fb      	ldr	r3, [r7, #12]
    387e:	005b      	lsls	r3, r3, #1
    3880:	4a04      	ldr	r2, [pc, #16]	; (3894 <get_rule_arg+0x3a>)
    3882:	4413      	add	r3, r2
}
    3884:	4618      	mov	r0, r3
    3886:	3714      	adds	r7, #20
    3888:	46bd      	mov	sp, r7
    388a:	f85d 7b04 	ldr.w	r7, [sp], #4
    388e:	4770      	bx	lr
    3890:	0001fbc8 	.word	0x0001fbc8
    3894:	0001f884 	.word	0x0001f884

00003898 <parser_alloc>:

STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    3898:	b580      	push	{r7, lr}
    389a:	b086      	sub	sp, #24
    389c:	af00      	add	r7, sp, #0
    389e:	6078      	str	r0, [r7, #4]
    38a0:	6039      	str	r1, [r7, #0]
    // use a custom memory allocator to store parse nodes sequentially in large chunks

    mp_parse_chunk_t *chunk = parser->cur_chunk;
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38a6:	617b      	str	r3, [r7, #20]

    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    38a8:	697b      	ldr	r3, [r7, #20]
    38aa:	2b00      	cmp	r3, #0
    38ac:	d031      	beq.n	3912 <parser_alloc+0x7a>
    38ae:	697b      	ldr	r3, [r7, #20]
    38b0:	685a      	ldr	r2, [r3, #4]
    38b2:	683b      	ldr	r3, [r7, #0]
    38b4:	441a      	add	r2, r3
    38b6:	697b      	ldr	r3, [r7, #20]
    38b8:	681b      	ldr	r3, [r3, #0]
    38ba:	429a      	cmp	r2, r3
    38bc:	d929      	bls.n	3912 <parser_alloc+0x7a>
        // not enough room at end of previously allocated chunk so try to grow
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    38be:	697b      	ldr	r3, [r7, #20]
    38c0:	681a      	ldr	r2, [r3, #0]
    38c2:	683b      	ldr	r3, [r7, #0]
    38c4:	4413      	add	r3, r2
    38c6:	3308      	adds	r3, #8
    38c8:	2200      	movs	r2, #0
    38ca:	4619      	mov	r1, r3
    38cc:	6978      	ldr	r0, [r7, #20]
    38ce:	f7fc fd70 	bl	3b2 <m_realloc_maybe>
    38d2:	60f8      	str	r0, [r7, #12]
            sizeof(mp_parse_chunk_t) + chunk->alloc,
            sizeof(mp_parse_chunk_t) + chunk->alloc + num_bytes, false);
        if (new_data == NULL) {
    38d4:	68fb      	ldr	r3, [r7, #12]
    38d6:	2b00      	cmp	r3, #0
    38d8:	d115      	bne.n	3906 <parser_alloc+0x6e>
            // could not grow existing memory; shrink it to fit previous
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    38da:	697b      	ldr	r3, [r7, #20]
    38dc:	685b      	ldr	r3, [r3, #4]
    38de:	3308      	adds	r3, #8
    38e0:	2200      	movs	r2, #0
    38e2:	4619      	mov	r1, r3
    38e4:	6978      	ldr	r0, [r7, #20]
    38e6:	f7fc fd64 	bl	3b2 <m_realloc_maybe>
                sizeof(mp_parse_chunk_t) + chunk->union_.used, false);
            chunk->alloc = chunk->union_.used;
    38ea:	697b      	ldr	r3, [r7, #20]
    38ec:	685a      	ldr	r2, [r3, #4]
    38ee:	697b      	ldr	r3, [r7, #20]
    38f0:	601a      	str	r2, [r3, #0]
            chunk->union_.next = parser->tree.chunk;
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	6a1a      	ldr	r2, [r3, #32]
    38f6:	697b      	ldr	r3, [r7, #20]
    38f8:	605a      	str	r2, [r3, #4]
            parser->tree.chunk = chunk;
    38fa:	687b      	ldr	r3, [r7, #4]
    38fc:	697a      	ldr	r2, [r7, #20]
    38fe:	621a      	str	r2, [r3, #32]
            chunk = NULL;
    3900:	2300      	movs	r3, #0
    3902:	617b      	str	r3, [r7, #20]
    3904:	e005      	b.n	3912 <parser_alloc+0x7a>
        } else {
            // could grow existing memory
            chunk->alloc += num_bytes;
    3906:	697b      	ldr	r3, [r7, #20]
    3908:	681a      	ldr	r2, [r3, #0]
    390a:	683b      	ldr	r3, [r7, #0]
    390c:	441a      	add	r2, r3
    390e:	697b      	ldr	r3, [r7, #20]
    3910:	601a      	str	r2, [r3, #0]
        }
    }

    if (chunk == NULL) {
    3912:	697b      	ldr	r3, [r7, #20]
    3914:	2b00      	cmp	r3, #0
    3916:	d116      	bne.n	3946 <parser_alloc+0xae>
        // no previous chunk, allocate a new chunk
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    3918:	2310      	movs	r3, #16
    391a:	613b      	str	r3, [r7, #16]
        if (alloc < num_bytes) {
    391c:	693a      	ldr	r2, [r7, #16]
    391e:	683b      	ldr	r3, [r7, #0]
    3920:	429a      	cmp	r2, r3
    3922:	d201      	bcs.n	3928 <parser_alloc+0x90>
            alloc = num_bytes;
    3924:	683b      	ldr	r3, [r7, #0]
    3926:	613b      	str	r3, [r7, #16]
        }
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    3928:	693b      	ldr	r3, [r7, #16]
    392a:	3308      	adds	r3, #8
    392c:	4618      	mov	r0, r3
    392e:	f7fc fcf5 	bl	31c <m_malloc>
    3932:	6178      	str	r0, [r7, #20]
        chunk->alloc = alloc;
    3934:	697b      	ldr	r3, [r7, #20]
    3936:	693a      	ldr	r2, [r7, #16]
    3938:	601a      	str	r2, [r3, #0]
        chunk->union_.used = 0;
    393a:	697b      	ldr	r3, [r7, #20]
    393c:	2200      	movs	r2, #0
    393e:	605a      	str	r2, [r3, #4]
        parser->cur_chunk = chunk;
    3940:	687b      	ldr	r3, [r7, #4]
    3942:	697a      	ldr	r2, [r7, #20]
    3944:	625a      	str	r2, [r3, #36]	; 0x24
    }

    byte *ret = chunk->data + chunk->union_.used;
    3946:	697b      	ldr	r3, [r7, #20]
    3948:	f103 0208 	add.w	r2, r3, #8
    394c:	697b      	ldr	r3, [r7, #20]
    394e:	685b      	ldr	r3, [r3, #4]
    3950:	4413      	add	r3, r2
    3952:	60bb      	str	r3, [r7, #8]
    chunk->union_.used += num_bytes;
    3954:	697b      	ldr	r3, [r7, #20]
    3956:	685a      	ldr	r2, [r3, #4]
    3958:	683b      	ldr	r3, [r7, #0]
    395a:	441a      	add	r2, r3
    395c:	697b      	ldr	r3, [r7, #20]
    395e:	605a      	str	r2, [r3, #4]
    return ret;
    3960:	68bb      	ldr	r3, [r7, #8]
}
    3962:	4618      	mov	r0, r3
    3964:	3718      	adds	r7, #24
    3966:	46bd      	mov	sp, r7
    3968:	bd80      	pop	{r7, pc}

0000396a <push_rule>:

STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    396a:	b580      	push	{r7, lr}
    396c:	b086      	sub	sp, #24
    396e:	af00      	add	r7, sp, #0
    3970:	60f8      	str	r0, [r7, #12]
    3972:	60b9      	str	r1, [r7, #8]
    3974:	603b      	str	r3, [r7, #0]
    3976:	4613      	mov	r3, r2
    3978:	71fb      	strb	r3, [r7, #7]
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    397a:	68fb      	ldr	r3, [r7, #12]
    397c:	685a      	ldr	r2, [r3, #4]
    397e:	68fb      	ldr	r3, [r7, #12]
    3980:	681b      	ldr	r3, [r3, #0]
    3982:	429a      	cmp	r2, r3
    3984:	d313      	bcc.n	39ae <push_rule+0x44>
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    3986:	68fb      	ldr	r3, [r7, #12]
    3988:	689a      	ldr	r2, [r3, #8]
    398a:	68fb      	ldr	r3, [r7, #12]
    398c:	681b      	ldr	r3, [r3, #0]
    398e:	3310      	adds	r3, #16
    3990:	00db      	lsls	r3, r3, #3
    3992:	4619      	mov	r1, r3
    3994:	4610      	mov	r0, r2
    3996:	f7fc fcf3 	bl	380 <m_realloc>
    399a:	6178      	str	r0, [r7, #20]
        parser->rule_stack = rs;
    399c:	68fb      	ldr	r3, [r7, #12]
    399e:	697a      	ldr	r2, [r7, #20]
    39a0:	609a      	str	r2, [r3, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    39a2:	68fb      	ldr	r3, [r7, #12]
    39a4:	681b      	ldr	r3, [r3, #0]
    39a6:	f103 0210 	add.w	r2, r3, #16
    39aa:	68fb      	ldr	r3, [r7, #12]
    39ac:	601a      	str	r2, [r3, #0]
    }
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    39ae:	68fb      	ldr	r3, [r7, #12]
    39b0:	689a      	ldr	r2, [r3, #8]
    39b2:	68fb      	ldr	r3, [r7, #12]
    39b4:	685b      	ldr	r3, [r3, #4]
    39b6:	1c58      	adds	r0, r3, #1
    39b8:	68f9      	ldr	r1, [r7, #12]
    39ba:	6048      	str	r0, [r1, #4]
    39bc:	00db      	lsls	r3, r3, #3
    39be:	4413      	add	r3, r2
    39c0:	613b      	str	r3, [r7, #16]
    rs->src_line = src_line;
    39c2:	68bb      	ldr	r3, [r7, #8]
    39c4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    39c8:	693a      	ldr	r2, [r7, #16]
    39ca:	6813      	ldr	r3, [r2, #0]
    39cc:	f361 0317 	bfi	r3, r1, #0, #24
    39d0:	6013      	str	r3, [r2, #0]
    rs->rule_id = rule_id;
    39d2:	693b      	ldr	r3, [r7, #16]
    39d4:	79fa      	ldrb	r2, [r7, #7]
    39d6:	70da      	strb	r2, [r3, #3]
    rs->arg_i = arg_i;
    39d8:	693b      	ldr	r3, [r7, #16]
    39da:	683a      	ldr	r2, [r7, #0]
    39dc:	605a      	str	r2, [r3, #4]
}
    39de:	bf00      	nop
    39e0:	3718      	adds	r7, #24
    39e2:	46bd      	mov	sp, r7
    39e4:	bd80      	pop	{r7, pc}

000039e6 <push_rule_from_arg>:

STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    39e6:	b580      	push	{r7, lr}
    39e8:	b084      	sub	sp, #16
    39ea:	af00      	add	r7, sp, #0
    39ec:	6078      	str	r0, [r7, #4]
    39ee:	6039      	str	r1, [r7, #0]
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    39f0:	683b      	ldr	r3, [r7, #0]
    39f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    39f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    39fa:	d00c      	beq.n	3a16 <push_rule_from_arg+0x30>
    39fc:	683b      	ldr	r3, [r7, #0]
    39fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    3a02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    3a06:	d006      	beq.n	3a16 <push_rule_from_arg+0x30>
    3a08:	4b0b      	ldr	r3, [pc, #44]	; (3a38 <push_rule_from_arg+0x52>)
    3a0a:	4a0c      	ldr	r2, [pc, #48]	; (3a3c <push_rule_from_arg+0x56>)
    3a0c:	f44f 7199 	mov.w	r1, #306	; 0x132
    3a10:	480b      	ldr	r0, [pc, #44]	; (3a40 <push_rule_from_arg+0x5a>)
    3a12:	f017 fd35 	bl	1b480 <__assert_func>
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    3a16:	683b      	ldr	r3, [r7, #0]
    3a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3a1c:	60fb      	str	r3, [r7, #12]
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    3a1e:	687b      	ldr	r3, [r7, #4]
    3a20:	699b      	ldr	r3, [r3, #24]
    3a22:	6b99      	ldr	r1, [r3, #56]	; 0x38
    3a24:	68fb      	ldr	r3, [r7, #12]
    3a26:	b2da      	uxtb	r2, r3
    3a28:	2300      	movs	r3, #0
    3a2a:	6878      	ldr	r0, [r7, #4]
    3a2c:	f7ff ff9d 	bl	396a <push_rule>
}
    3a30:	bf00      	nop
    3a32:	3710      	adds	r7, #16
    3a34:	46bd      	mov	sp, r7
    3a36:	bd80      	pop	{r7, pc}
    3a38:	0001fc70 	.word	0x0001fc70
    3a3c:	0001fe44 	.word	0x0001fe44
    3a40:	0001fcd0 	.word	0x0001fcd0

00003a44 <pop_rule>:

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    3a44:	b480      	push	{r7}
    3a46:	b087      	sub	sp, #28
    3a48:	af00      	add	r7, sp, #0
    3a4a:	60f8      	str	r0, [r7, #12]
    3a4c:	60b9      	str	r1, [r7, #8]
    3a4e:	607a      	str	r2, [r7, #4]
    parser->rule_stack_top -= 1;
    3a50:	68fb      	ldr	r3, [r7, #12]
    3a52:	685b      	ldr	r3, [r3, #4]
    3a54:	1e5a      	subs	r2, r3, #1
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	605a      	str	r2, [r3, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    3a5a:	68fb      	ldr	r3, [r7, #12]
    3a5c:	689a      	ldr	r2, [r3, #8]
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	685b      	ldr	r3, [r3, #4]
    3a62:	00db      	lsls	r3, r3, #3
    3a64:	4413      	add	r3, r2
    3a66:	78db      	ldrb	r3, [r3, #3]
    3a68:	75fb      	strb	r3, [r7, #23]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    3a6a:	68fb      	ldr	r3, [r7, #12]
    3a6c:	689a      	ldr	r2, [r3, #8]
    3a6e:	68fb      	ldr	r3, [r7, #12]
    3a70:	685b      	ldr	r3, [r3, #4]
    3a72:	00db      	lsls	r3, r3, #3
    3a74:	4413      	add	r3, r2
    3a76:	685a      	ldr	r2, [r3, #4]
    3a78:	68bb      	ldr	r3, [r7, #8]
    3a7a:	601a      	str	r2, [r3, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    3a7c:	68fb      	ldr	r3, [r7, #12]
    3a7e:	689a      	ldr	r2, [r3, #8]
    3a80:	68fb      	ldr	r3, [r7, #12]
    3a82:	685b      	ldr	r3, [r3, #4]
    3a84:	00db      	lsls	r3, r3, #3
    3a86:	4413      	add	r3, r2
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	f3c3 0317 	ubfx	r3, r3, #0, #24
    3a8e:	461a      	mov	r2, r3
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	601a      	str	r2, [r3, #0]
    return rule_id;
    3a94:	7dfb      	ldrb	r3, [r7, #23]
}
    3a96:	4618      	mov	r0, r3
    3a98:	371c      	adds	r7, #28
    3a9a:	46bd      	mov	sp, r7
    3a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3aa0:	4770      	bx	lr

00003aa2 <mp_parse_node_is_const_false>:

bool mp_parse_node_is_const_false(mp_parse_node_t pn) {
    3aa2:	b480      	push	{r7}
    3aa4:	b083      	sub	sp, #12
    3aa6:	af00      	add	r7, sp, #0
    3aa8:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    3aaa:	687b      	ldr	r3, [r7, #4]
    3aac:	2bde      	cmp	r3, #222	; 0xde
    3aae:	d008      	beq.n	3ac2 <mp_parse_node_is_const_false+0x20>
    3ab0:	687b      	ldr	r3, [r7, #4]
    3ab2:	f003 0301 	and.w	r3, r3, #1
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d005      	beq.n	3ac6 <mp_parse_node_is_const_false+0x24>
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	105b      	asrs	r3, r3, #1
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d101      	bne.n	3ac6 <mp_parse_node_is_const_false+0x24>
    3ac2:	2301      	movs	r3, #1
    3ac4:	e000      	b.n	3ac8 <mp_parse_node_is_const_false+0x26>
    3ac6:	2300      	movs	r3, #0
    3ac8:	f003 0301 	and.w	r3, r3, #1
    3acc:	b2db      	uxtb	r3, r3
}
    3ace:	4618      	mov	r0, r3
    3ad0:	370c      	adds	r7, #12
    3ad2:	46bd      	mov	sp, r7
    3ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad8:	4770      	bx	lr

00003ada <mp_parse_node_is_const_true>:

bool mp_parse_node_is_const_true(mp_parse_node_t pn) {
    3ada:	b480      	push	{r7}
    3adc:	b083      	sub	sp, #12
    3ade:	af00      	add	r7, sp, #0
    3ae0:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	2bfe      	cmp	r3, #254	; 0xfe
    3ae6:	d008      	beq.n	3afa <mp_parse_node_is_const_true+0x20>
    3ae8:	687b      	ldr	r3, [r7, #4]
    3aea:	f003 0301 	and.w	r3, r3, #1
    3aee:	2b00      	cmp	r3, #0
    3af0:	d005      	beq.n	3afe <mp_parse_node_is_const_true+0x24>
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	105b      	asrs	r3, r3, #1
    3af6:	2b00      	cmp	r3, #0
    3af8:	d001      	beq.n	3afe <mp_parse_node_is_const_true+0x24>
    3afa:	2301      	movs	r3, #1
    3afc:	e000      	b.n	3b00 <mp_parse_node_is_const_true+0x26>
    3afe:	2300      	movs	r3, #0
    3b00:	f003 0301 	and.w	r3, r3, #1
    3b04:	b2db      	uxtb	r3, r3
}
    3b06:	4618      	mov	r0, r3
    3b08:	370c      	adds	r7, #12
    3b0a:	46bd      	mov	sp, r7
    3b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b10:	4770      	bx	lr

00003b12 <mp_parse_node_get_int_maybe>:

bool mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o) {
    3b12:	b580      	push	{r7, lr}
    3b14:	b084      	sub	sp, #16
    3b16:	af00      	add	r7, sp, #0
    3b18:	6078      	str	r0, [r7, #4]
    3b1a:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	f003 0301 	and.w	r3, r3, #1
    3b22:	2b00      	cmp	r3, #0
    3b24:	d009      	beq.n	3b3a <mp_parse_node_get_int_maybe+0x28>
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    3b26:	687b      	ldr	r3, [r7, #4]
    3b28:	105b      	asrs	r3, r3, #1
    3b2a:	005b      	lsls	r3, r3, #1
    3b2c:	f043 0301 	orr.w	r3, r3, #1
    3b30:	461a      	mov	r2, r3
    3b32:	683b      	ldr	r3, [r7, #0]
    3b34:	601a      	str	r2, [r3, #0]
        return true;
    3b36:	2301      	movs	r3, #1
    3b38:	e031      	b.n	3b9e <mp_parse_node_get_int_maybe+0x8c>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    3b3a:	687b      	ldr	r3, [r7, #4]
    3b3c:	2b00      	cmp	r3, #0
    3b3e:	d02d      	beq.n	3b9c <mp_parse_node_get_int_maybe+0x8a>
    3b40:	687b      	ldr	r3, [r7, #4]
    3b42:	f003 0303 	and.w	r3, r3, #3
    3b46:	2b00      	cmp	r3, #0
    3b48:	d128      	bne.n	3b9c <mp_parse_node_get_int_maybe+0x8a>
    3b4a:	687b      	ldr	r3, [r7, #4]
    3b4c:	685b      	ldr	r3, [r3, #4]
    3b4e:	b2db      	uxtb	r3, r3
    3b50:	2b35      	cmp	r3, #53	; 0x35
    3b52:	d123      	bne.n	3b9c <mp_parse_node_get_int_maybe+0x8a>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3b54:	687b      	ldr	r3, [r7, #4]
    3b56:	60fb      	str	r3, [r7, #12]
        #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
        // nodes are 32-bit pointers, but need to extract 64-bit object
        *o = (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
        #else
        *o = (mp_obj_t)pns->nodes[0];
    3b58:	68fb      	ldr	r3, [r7, #12]
    3b5a:	689b      	ldr	r3, [r3, #8]
    3b5c:	461a      	mov	r2, r3
    3b5e:	683b      	ldr	r3, [r7, #0]
    3b60:	601a      	str	r2, [r3, #0]
        #endif
        return MP_OBJ_IS_INT(*o);
    3b62:	683b      	ldr	r3, [r7, #0]
    3b64:	681b      	ldr	r3, [r3, #0]
    3b66:	4618      	mov	r0, r3
    3b68:	f7ff fe36 	bl	37d8 <MP_OBJ_IS_SMALL_INT>
    3b6c:	4603      	mov	r3, r0
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d10d      	bne.n	3b8e <mp_parse_node_get_int_maybe+0x7c>
    3b72:	683b      	ldr	r3, [r7, #0]
    3b74:	681b      	ldr	r3, [r3, #0]
    3b76:	4618      	mov	r0, r3
    3b78:	f7ff fe40 	bl	37fc <MP_OBJ_IS_OBJ>
    3b7c:	4603      	mov	r3, r0
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d007      	beq.n	3b92 <mp_parse_node_get_int_maybe+0x80>
    3b82:	683b      	ldr	r3, [r7, #0]
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	681b      	ldr	r3, [r3, #0]
    3b88:	4a07      	ldr	r2, [pc, #28]	; (3ba8 <mp_parse_node_get_int_maybe+0x96>)
    3b8a:	4293      	cmp	r3, r2
    3b8c:	d101      	bne.n	3b92 <mp_parse_node_get_int_maybe+0x80>
    3b8e:	2301      	movs	r3, #1
    3b90:	e000      	b.n	3b94 <mp_parse_node_get_int_maybe+0x82>
    3b92:	2300      	movs	r3, #0
    3b94:	f003 0301 	and.w	r3, r3, #1
    3b98:	b2db      	uxtb	r3, r3
    3b9a:	e000      	b.n	3b9e <mp_parse_node_get_int_maybe+0x8c>
    } else {
        return false;
    3b9c:	2300      	movs	r3, #0
    }
}
    3b9e:	4618      	mov	r0, r3
    3ba0:	3710      	adds	r7, #16
    3ba2:	46bd      	mov	sp, r7
    3ba4:	bd80      	pop	{r7, pc}
    3ba6:	bf00      	nop
    3ba8:	00022bbc 	.word	0x00022bbc

00003bac <mp_parse_node_extract_list>:

int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    3bac:	b480      	push	{r7}
    3bae:	b087      	sub	sp, #28
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	60f8      	str	r0, [r7, #12]
    3bb4:	60b9      	str	r1, [r7, #8]
    3bb6:	607a      	str	r2, [r7, #4]
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    3bb8:	68fb      	ldr	r3, [r7, #12]
    3bba:	681b      	ldr	r3, [r3, #0]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d104      	bne.n	3bca <mp_parse_node_extract_list+0x1e>
        *nodes = NULL;
    3bc0:	687b      	ldr	r3, [r7, #4]
    3bc2:	2200      	movs	r2, #0
    3bc4:	601a      	str	r2, [r3, #0]
        return 0;
    3bc6:	2300      	movs	r3, #0
    3bc8:	e020      	b.n	3c0c <mp_parse_node_extract_list+0x60>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    3bca:	68fb      	ldr	r3, [r7, #12]
    3bcc:	681b      	ldr	r3, [r3, #0]
    3bce:	f003 0303 	and.w	r3, r3, #3
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d004      	beq.n	3be0 <mp_parse_node_extract_list+0x34>
        *nodes = pn;
    3bd6:	687b      	ldr	r3, [r7, #4]
    3bd8:	68fa      	ldr	r2, [r7, #12]
    3bda:	601a      	str	r2, [r3, #0]
        return 1;
    3bdc:	2301      	movs	r3, #1
    3bde:	e015      	b.n	3c0c <mp_parse_node_extract_list+0x60>
    } else {
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)(*pn);
    3be0:	68fb      	ldr	r3, [r7, #12]
    3be2:	681b      	ldr	r3, [r3, #0]
    3be4:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    3be6:	697b      	ldr	r3, [r7, #20]
    3be8:	685b      	ldr	r3, [r3, #4]
    3bea:	b2da      	uxtb	r2, r3
    3bec:	68bb      	ldr	r3, [r7, #8]
    3bee:	429a      	cmp	r2, r3
    3bf0:	d004      	beq.n	3bfc <mp_parse_node_extract_list+0x50>
            *nodes = pn;
    3bf2:	687b      	ldr	r3, [r7, #4]
    3bf4:	68fa      	ldr	r2, [r7, #12]
    3bf6:	601a      	str	r2, [r3, #0]
            return 1;
    3bf8:	2301      	movs	r3, #1
    3bfa:	e007      	b.n	3c0c <mp_parse_node_extract_list+0x60>
        } else {
            *nodes = pns->nodes;
    3bfc:	697b      	ldr	r3, [r7, #20]
    3bfe:	f103 0208 	add.w	r2, r3, #8
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	601a      	str	r2, [r3, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3c06:	697b      	ldr	r3, [r7, #20]
    3c08:	685b      	ldr	r3, [r3, #4]
    3c0a:	0a1b      	lsrs	r3, r3, #8
        }
    }
}
    3c0c:	4618      	mov	r0, r3
    3c0e:	371c      	adds	r7, #28
    3c10:	46bd      	mov	sp, r7
    3c12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c16:	4770      	bx	lr

00003c18 <pop_result>:
        mp_parse_node_print(parser->result_stack[i], 0);
    }
}
*/

STATIC mp_parse_node_t pop_result(parser_t *parser) {
    3c18:	b580      	push	{r7, lr}
    3c1a:	b082      	sub	sp, #8
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]
    assert(parser->result_stack_top > 0);
    3c20:	687b      	ldr	r3, [r7, #4]
    3c22:	691b      	ldr	r3, [r3, #16]
    3c24:	2b00      	cmp	r3, #0
    3c26:	d106      	bne.n	3c36 <pop_result+0x1e>
    3c28:	4b0b      	ldr	r3, [pc, #44]	; (3c58 <pop_result+0x40>)
    3c2a:	4a0c      	ldr	r2, [pc, #48]	; (3c5c <pop_result+0x44>)
    3c2c:	f240 11a9 	movw	r1, #425	; 0x1a9
    3c30:	480b      	ldr	r0, [pc, #44]	; (3c60 <pop_result+0x48>)
    3c32:	f017 fc25 	bl	1b480 <__assert_func>
    return parser->result_stack[--parser->result_stack_top];
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	695a      	ldr	r2, [r3, #20]
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	691b      	ldr	r3, [r3, #16]
    3c3e:	1e59      	subs	r1, r3, #1
    3c40:	687b      	ldr	r3, [r7, #4]
    3c42:	6119      	str	r1, [r3, #16]
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	691b      	ldr	r3, [r3, #16]
    3c48:	009b      	lsls	r3, r3, #2
    3c4a:	4413      	add	r3, r2
    3c4c:	681b      	ldr	r3, [r3, #0]
}
    3c4e:	4618      	mov	r0, r3
    3c50:	3708      	adds	r7, #8
    3c52:	46bd      	mov	sp, r7
    3c54:	bd80      	pop	{r7, pc}
    3c56:	bf00      	nop
    3c58:	0001fce4 	.word	0x0001fce4
    3c5c:	0001fe58 	.word	0x0001fe58
    3c60:	0001fcd0 	.word	0x0001fcd0

00003c64 <peek_result>:

STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    3c64:	b580      	push	{r7, lr}
    3c66:	b082      	sub	sp, #8
    3c68:	af00      	add	r7, sp, #0
    3c6a:	6078      	str	r0, [r7, #4]
    3c6c:	6039      	str	r1, [r7, #0]
    assert(parser->result_stack_top > pos);
    3c6e:	687b      	ldr	r3, [r7, #4]
    3c70:	691a      	ldr	r2, [r3, #16]
    3c72:	683b      	ldr	r3, [r7, #0]
    3c74:	429a      	cmp	r2, r3
    3c76:	d806      	bhi.n	3c86 <peek_result+0x22>
    3c78:	4b0b      	ldr	r3, [pc, #44]	; (3ca8 <peek_result+0x44>)
    3c7a:	4a0c      	ldr	r2, [pc, #48]	; (3cac <peek_result+0x48>)
    3c7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    3c80:	480b      	ldr	r0, [pc, #44]	; (3cb0 <peek_result+0x4c>)
    3c82:	f017 fbfd 	bl	1b480 <__assert_func>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	695a      	ldr	r2, [r3, #20]
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	6919      	ldr	r1, [r3, #16]
    3c8e:	683b      	ldr	r3, [r7, #0]
    3c90:	1acb      	subs	r3, r1, r3
    3c92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3c96:	3b01      	subs	r3, #1
    3c98:	009b      	lsls	r3, r3, #2
    3c9a:	4413      	add	r3, r2
    3c9c:	681b      	ldr	r3, [r3, #0]
}
    3c9e:	4618      	mov	r0, r3
    3ca0:	3708      	adds	r7, #8
    3ca2:	46bd      	mov	sp, r7
    3ca4:	bd80      	pop	{r7, pc}
    3ca6:	bf00      	nop
    3ca8:	0001fd04 	.word	0x0001fd04
    3cac:	0001fe64 	.word	0x0001fe64
    3cb0:	0001fcd0 	.word	0x0001fcd0

00003cb4 <push_result_node>:

STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    3cb4:	b580      	push	{r7, lr}
    3cb6:	b084      	sub	sp, #16
    3cb8:	af00      	add	r7, sp, #0
    3cba:	6078      	str	r0, [r7, #4]
    3cbc:	6039      	str	r1, [r7, #0]
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	691a      	ldr	r2, [r3, #16]
    3cc2:	687b      	ldr	r3, [r7, #4]
    3cc4:	68db      	ldr	r3, [r3, #12]
    3cc6:	429a      	cmp	r2, r3
    3cc8:	d313      	bcc.n	3cf2 <push_result_node+0x3e>
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	695a      	ldr	r2, [r3, #20]
    3cce:	687b      	ldr	r3, [r7, #4]
    3cd0:	68db      	ldr	r3, [r3, #12]
    3cd2:	3310      	adds	r3, #16
    3cd4:	009b      	lsls	r3, r3, #2
    3cd6:	4619      	mov	r1, r3
    3cd8:	4610      	mov	r0, r2
    3cda:	f7fc fb51 	bl	380 <m_realloc>
    3cde:	60f8      	str	r0, [r7, #12]
        parser->result_stack = stack;
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	68fa      	ldr	r2, [r7, #12]
    3ce4:	615a      	str	r2, [r3, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	68db      	ldr	r3, [r3, #12]
    3cea:	f103 0210 	add.w	r2, r3, #16
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	60da      	str	r2, [r3, #12]
    }
    parser->result_stack[parser->result_stack_top++] = pn;
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	695a      	ldr	r2, [r3, #20]
    3cf6:	687b      	ldr	r3, [r7, #4]
    3cf8:	691b      	ldr	r3, [r3, #16]
    3cfa:	1c58      	adds	r0, r3, #1
    3cfc:	6879      	ldr	r1, [r7, #4]
    3cfe:	6108      	str	r0, [r1, #16]
    3d00:	009b      	lsls	r3, r3, #2
    3d02:	4413      	add	r3, r2
    3d04:	683a      	ldr	r2, [r7, #0]
    3d06:	601a      	str	r2, [r3, #0]
}
    3d08:	bf00      	nop
    3d0a:	3710      	adds	r7, #16
    3d0c:	46bd      	mov	sp, r7
    3d0e:	bd80      	pop	{r7, pc}

00003d10 <make_node_const_object>:

STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    3d10:	b580      	push	{r7, lr}
    3d12:	b086      	sub	sp, #24
    3d14:	af00      	add	r7, sp, #0
    3d16:	60f8      	str	r0, [r7, #12]
    3d18:	60b9      	str	r1, [r7, #8]
    3d1a:	607a      	str	r2, [r7, #4]
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    3d1c:	210c      	movs	r1, #12
    3d1e:	68f8      	ldr	r0, [r7, #12]
    3d20:	f7ff fdba 	bl	3898 <parser_alloc>
    3d24:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    3d26:	697b      	ldr	r3, [r7, #20]
    3d28:	68ba      	ldr	r2, [r7, #8]
    3d2a:	601a      	str	r2, [r3, #0]
    // nodes are 32-bit pointers, but need to store 64-bit object
    pn->kind_num_nodes = RULE_const_object | (2 << 8);
    pn->nodes[0] = (uint64_t)obj;
    pn->nodes[1] = (uint64_t)obj >> 32;
    #else
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    3d2c:	697b      	ldr	r3, [r7, #20]
    3d2e:	f240 1235 	movw	r2, #309	; 0x135
    3d32:	605a      	str	r2, [r3, #4]
    pn->nodes[0] = (uintptr_t)obj;
    3d34:	687a      	ldr	r2, [r7, #4]
    3d36:	697b      	ldr	r3, [r7, #20]
    3d38:	609a      	str	r2, [r3, #8]
    #endif
    return (mp_parse_node_t)pn;
    3d3a:	697b      	ldr	r3, [r7, #20]
}
    3d3c:	4618      	mov	r0, r3
    3d3e:	3718      	adds	r7, #24
    3d40:	46bd      	mov	sp, r7
    3d42:	bd80      	pop	{r7, pc}

00003d44 <mp_parse_node_new_small_int_checked>:

STATIC mp_parse_node_t mp_parse_node_new_small_int_checked(parser_t *parser, mp_obj_t o_val) {
    3d44:	b580      	push	{r7, lr}
    3d46:	b084      	sub	sp, #16
    3d48:	af00      	add	r7, sp, #0
    3d4a:	6078      	str	r0, [r7, #4]
    3d4c:	6039      	str	r1, [r7, #0]
    (void)parser;
    mp_int_t val = MP_OBJ_SMALL_INT_VALUE(o_val);
    3d4e:	683b      	ldr	r3, [r7, #0]
    3d50:	105b      	asrs	r3, r3, #1
    3d52:	60fb      	str	r3, [r7, #12]
    // A parse node is only 32-bits and the small-int value must fit in 31-bits
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
    3d54:	68f8      	ldr	r0, [r7, #12]
    3d56:	f7ff fd63 	bl	3820 <mp_parse_node_new_small_int>
    3d5a:	4603      	mov	r3, r0
}
    3d5c:	4618      	mov	r0, r3
    3d5e:	3710      	adds	r7, #16
    3d60:	46bd      	mov	sp, r7
    3d62:	bd80      	pop	{r7, pc}

00003d64 <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    3d64:	b580      	push	{r7, lr}
    3d66:	b08c      	sub	sp, #48	; 0x30
    3d68:	af02      	add	r7, sp, #8
    3d6a:	6078      	str	r0, [r7, #4]
    3d6c:	460b      	mov	r3, r1
    3d6e:	70fb      	strb	r3, [r7, #3]
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    3d70:	687b      	ldr	r3, [r7, #4]
    3d72:	699b      	ldr	r3, [r3, #24]
    3d74:	61fb      	str	r3, [r7, #28]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    3d76:	69fb      	ldr	r3, [r7, #28]
    3d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d7a:	2b07      	cmp	r3, #7
    3d7c:	d10f      	bne.n	3d9e <push_result_token+0x3a>
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3d7e:	69fb      	ldr	r3, [r7, #28]
    3d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3d82:	69fb      	ldr	r3, [r7, #28]
    3d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d86:	4619      	mov	r1, r3
    3d88:	4610      	mov	r0, r2
    3d8a:	f7fd f984 	bl	1096 <qstr_from_strn>
    3d8e:	61b8      	str	r0, [r7, #24]
        } else {
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
    3d90:	69bb      	ldr	r3, [r7, #24]
    3d92:	4619      	mov	r1, r3
    3d94:	2002      	movs	r0, #2
    3d96:	f7ff fd51 	bl	383c <mp_parse_node_new_leaf>
    3d9a:	6278      	str	r0, [r7, #36]	; 0x24
    3d9c:	e08a      	b.n	3eb4 <push_result_token+0x150>
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    3d9e:	69fb      	ldr	r3, [r7, #28]
    3da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3da2:	2b08      	cmp	r3, #8
    3da4:	d11d      	bne.n	3de2 <push_result_token+0x7e>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    3da6:	69fb      	ldr	r3, [r7, #28]
    3da8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3daa:	69fb      	ldr	r3, [r7, #28]
    3dac:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3dae:	69fb      	ldr	r3, [r7, #28]
    3db0:	2200      	movs	r2, #0
    3db2:	f007 f873 	bl	ae9c <mp_parse_num_integer>
    3db6:	6178      	str	r0, [r7, #20]
        if (MP_OBJ_IS_SMALL_INT(o)) {
    3db8:	6978      	ldr	r0, [r7, #20]
    3dba:	f7ff fd0d 	bl	37d8 <MP_OBJ_IS_SMALL_INT>
    3dbe:	4603      	mov	r3, r0
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d005      	beq.n	3dd0 <push_result_token+0x6c>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    3dc4:	6979      	ldr	r1, [r7, #20]
    3dc6:	6878      	ldr	r0, [r7, #4]
    3dc8:	f7ff ffbc 	bl	3d44 <mp_parse_node_new_small_int_checked>
    3dcc:	6278      	str	r0, [r7, #36]	; 0x24
    3dce:	e071      	b.n	3eb4 <push_result_token+0x150>
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
    3dd0:	69fb      	ldr	r3, [r7, #28]
    3dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3dd4:	697a      	ldr	r2, [r7, #20]
    3dd6:	4619      	mov	r1, r3
    3dd8:	6878      	ldr	r0, [r7, #4]
    3dda:	f7ff ff99 	bl	3d10 <make_node_const_object>
    3dde:	6278      	str	r0, [r7, #36]	; 0x24
    3de0:	e068      	b.n	3eb4 <push_result_token+0x150>
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    3de2:	69fb      	ldr	r3, [r7, #28]
    3de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3de6:	2b09      	cmp	r3, #9
    3de8:	d113      	bne.n	3e12 <push_result_token+0xae>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    3dea:	69fb      	ldr	r3, [r7, #28]
    3dec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3dee:	69fb      	ldr	r3, [r7, #28]
    3df0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3df2:	69fb      	ldr	r3, [r7, #28]
    3df4:	9300      	str	r3, [sp, #0]
    3df6:	2300      	movs	r3, #0
    3df8:	2201      	movs	r2, #1
    3dfa:	f007 f937 	bl	b06c <mp_parse_num_decimal>
    3dfe:	6138      	str	r0, [r7, #16]
        pn = make_node_const_object(parser, lex->tok_line, o);
    3e00:	69fb      	ldr	r3, [r7, #28]
    3e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e04:	693a      	ldr	r2, [r7, #16]
    3e06:	4619      	mov	r1, r3
    3e08:	6878      	ldr	r0, [r7, #4]
    3e0a:	f7ff ff81 	bl	3d10 <make_node_const_object>
    3e0e:	6278      	str	r0, [r7, #36]	; 0x24
    3e10:	e050      	b.n	3eb4 <push_result_token+0x150>
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e12:	69fb      	ldr	r3, [r7, #28]
    3e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e16:	2b0a      	cmp	r3, #10
    3e18:	d003      	beq.n	3e22 <push_result_token+0xbe>
    3e1a:	69fb      	ldr	r3, [r7, #28]
    3e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e1e:	2b0b      	cmp	r3, #11
    3e20:	d141      	bne.n	3ea6 <push_result_token+0x142>
        // Don't automatically intern all strings/bytes.  doc strings (which are usually large)
        // will be discarded by the compiler, and so we shouldn't intern them.
        qstr qst = MP_QSTR_NULL;
    3e22:	2300      	movs	r3, #0
    3e24:	623b      	str	r3, [r7, #32]
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    3e26:	69fb      	ldr	r3, [r7, #28]
    3e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e2a:	2b0a      	cmp	r3, #10
    3e2c:	d809      	bhi.n	3e42 <push_result_token+0xde>
            // intern short strings
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3e2e:	69fb      	ldr	r3, [r7, #28]
    3e30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3e32:	69fb      	ldr	r3, [r7, #28]
    3e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e36:	4619      	mov	r1, r3
    3e38:	4610      	mov	r0, r2
    3e3a:	f7fd f92c 	bl	1096 <qstr_from_strn>
    3e3e:	6238      	str	r0, [r7, #32]
    3e40:	e008      	b.n	3e54 <push_result_token+0xf0>
        } else {
            // check if this string is already interned
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    3e42:	69fb      	ldr	r3, [r7, #28]
    3e44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3e46:	69fb      	ldr	r3, [r7, #28]
    3e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e4a:	4619      	mov	r1, r3
    3e4c:	4610      	mov	r0, r2
    3e4e:	f7fd f8bf 	bl	fd0 <qstr_find_strn>
    3e52:	6238      	str	r0, [r7, #32]
        }
        if (qst != MP_QSTR_NULL) {
    3e54:	6a3b      	ldr	r3, [r7, #32]
    3e56:	2b00      	cmp	r3, #0
    3e58:	d00d      	beq.n	3e76 <push_result_token+0x112>
            // qstr exists, make a leaf node
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    3e5a:	69fb      	ldr	r3, [r7, #28]
    3e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e5e:	2b0a      	cmp	r3, #10
    3e60:	d101      	bne.n	3e66 <push_result_token+0x102>
    3e62:	2306      	movs	r3, #6
    3e64:	e000      	b.n	3e68 <push_result_token+0x104>
    3e66:	230a      	movs	r3, #10
    3e68:	6a3a      	ldr	r2, [r7, #32]
    3e6a:	4611      	mov	r1, r2
    3e6c:	4618      	mov	r0, r3
    3e6e:	f7ff fce5 	bl	383c <mp_parse_node_new_leaf>
    3e72:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e74:	e01e      	b.n	3eb4 <push_result_token+0x150>
        } else {
            // not interned, make a node holding a pointer to the string/bytes object
            mp_obj_t o = mp_obj_new_str_copy(
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    3e76:	69fb      	ldr	r3, [r7, #28]
    3e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    3e7a:	2b0a      	cmp	r3, #10
    3e7c:	d101      	bne.n	3e82 <push_result_token+0x11e>
    3e7e:	4811      	ldr	r0, [pc, #68]	; (3ec4 <push_result_token+0x160>)
    3e80:	e000      	b.n	3e84 <push_result_token+0x120>
    3e82:	4811      	ldr	r0, [pc, #68]	; (3ec8 <push_result_token+0x164>)
                (const byte*)lex->vstr.buf, lex->vstr.len);
    3e84:	69fb      	ldr	r3, [r7, #28]
    3e86:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            mp_obj_t o = mp_obj_new_str_copy(
    3e88:	69fb      	ldr	r3, [r7, #28]
    3e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e8c:	461a      	mov	r2, r3
    3e8e:	f011 f8ea 	bl	15066 <mp_obj_new_str_copy>
    3e92:	60f8      	str	r0, [r7, #12]
            pn = make_node_const_object(parser, lex->tok_line, o);
    3e94:	69fb      	ldr	r3, [r7, #28]
    3e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e98:	68fa      	ldr	r2, [r7, #12]
    3e9a:	4619      	mov	r1, r3
    3e9c:	6878      	ldr	r0, [r7, #4]
    3e9e:	f7ff ff37 	bl	3d10 <make_node_const_object>
    3ea2:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3ea4:	e006      	b.n	3eb4 <push_result_token+0x150>
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    3ea6:	69fb      	ldr	r3, [r7, #28]
    3ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3eaa:	4619      	mov	r1, r3
    3eac:	200e      	movs	r0, #14
    3eae:	f7ff fcc5 	bl	383c <mp_parse_node_new_leaf>
    3eb2:	6278      	str	r0, [r7, #36]	; 0x24
    }
    push_result_node(parser, pn);
    3eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3eb6:	6878      	ldr	r0, [r7, #4]
    3eb8:	f7ff fefc 	bl	3cb4 <push_result_node>
}
    3ebc:	bf00      	nop
    3ebe:	3728      	adds	r7, #40	; 0x28
    3ec0:	46bd      	mov	sp, r7
    3ec2:	bd80      	pop	{r7, pc}
    3ec4:	0002379c 	.word	0x0002379c
    3ec8:	000237d8 	.word	0x000237d8

00003ecc <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    3ecc:	b580      	push	{r7, lr}
    3ece:	b08a      	sub	sp, #40	; 0x28
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	60f8      	str	r0, [r7, #12]
    3ed4:	460b      	mov	r3, r1
    3ed6:	607a      	str	r2, [r7, #4]
    3ed8:	72fb      	strb	r3, [r7, #11]
    if (rule_id == RULE_or_test
    3eda:	7afb      	ldrb	r3, [r7, #11]
    3edc:	2b1c      	cmp	r3, #28
    3ede:	d002      	beq.n	3ee6 <fold_logical_constants+0x1a>
        || rule_id == RULE_and_test) {
    3ee0:	7afb      	ldrb	r3, [r7, #11]
    3ee2:	2b1d      	cmp	r3, #29
    3ee4:	d169      	bne.n	3fba <fold_logical_constants+0xee>
        // folding for binary logical ops: or and
        size_t copy_to = *num_args;
    3ee6:	687b      	ldr	r3, [r7, #4]
    3ee8:	681b      	ldr	r3, [r3, #0]
    3eea:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3eee:	623b      	str	r3, [r7, #32]
    3ef0:	e03c      	b.n	3f6c <fold_logical_constants+0xa0>
            mp_parse_node_t pn = peek_result(parser, --i);
    3ef2:	6a3b      	ldr	r3, [r7, #32]
    3ef4:	3b01      	subs	r3, #1
    3ef6:	623b      	str	r3, [r7, #32]
    3ef8:	6a39      	ldr	r1, [r7, #32]
    3efa:	68f8      	ldr	r0, [r7, #12]
    3efc:	f7ff feb2 	bl	3c64 <peek_result>
    3f00:	6178      	str	r0, [r7, #20]
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    3f02:	68fb      	ldr	r3, [r7, #12]
    3f04:	695a      	ldr	r2, [r3, #20]
    3f06:	68fb      	ldr	r3, [r7, #12]
    3f08:	6919      	ldr	r1, [r3, #16]
    3f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f0c:	1acb      	subs	r3, r1, r3
    3f0e:	009b      	lsls	r3, r3, #2
    3f10:	4413      	add	r3, r2
    3f12:	697a      	ldr	r2, [r7, #20]
    3f14:	601a      	str	r2, [r3, #0]
            if (i == 0) {
    3f16:	6a3b      	ldr	r3, [r7, #32]
    3f18:	2b00      	cmp	r3, #0
    3f1a:	d02b      	beq.n	3f74 <fold_logical_constants+0xa8>
                // always need to keep the last value
                break;
            }
            if (rule_id == RULE_or_test) {
    3f1c:	7afb      	ldrb	r3, [r7, #11]
    3f1e:	2b1c      	cmp	r3, #28
    3f20:	d112      	bne.n	3f48 <fold_logical_constants+0x7c>
                if (mp_parse_node_is_const_true(pn)) {
    3f22:	6978      	ldr	r0, [r7, #20]
    3f24:	f7ff fdd9 	bl	3ada <mp_parse_node_is_const_true>
    3f28:	4603      	mov	r3, r0
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d124      	bne.n	3f78 <fold_logical_constants+0xac>
                    //
                    break;
                } else if (!mp_parse_node_is_const_false(pn)) {
    3f2e:	6978      	ldr	r0, [r7, #20]
    3f30:	f7ff fdb7 	bl	3aa2 <mp_parse_node_is_const_false>
    3f34:	4603      	mov	r3, r0
    3f36:	f083 0301 	eor.w	r3, r3, #1
    3f3a:	b2db      	uxtb	r3, r3
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	d015      	beq.n	3f6c <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f42:	3b01      	subs	r3, #1
    3f44:	627b      	str	r3, [r7, #36]	; 0x24
    3f46:	e011      	b.n	3f6c <fold_logical_constants+0xa0>
                }
            } else {
                // RULE_and_test
                if (mp_parse_node_is_const_false(pn)) {
    3f48:	6978      	ldr	r0, [r7, #20]
    3f4a:	f7ff fdaa 	bl	3aa2 <mp_parse_node_is_const_false>
    3f4e:	4603      	mov	r3, r0
    3f50:	2b00      	cmp	r3, #0
    3f52:	d113      	bne.n	3f7c <fold_logical_constants+0xb0>
                    break;
                } else if (!mp_parse_node_is_const_true(pn)) {
    3f54:	6978      	ldr	r0, [r7, #20]
    3f56:	f7ff fdc0 	bl	3ada <mp_parse_node_is_const_true>
    3f5a:	4603      	mov	r3, r0
    3f5c:	f083 0301 	eor.w	r3, r3, #1
    3f60:	b2db      	uxtb	r3, r3
    3f62:	2b00      	cmp	r3, #0
    3f64:	d002      	beq.n	3f6c <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f68:	3b01      	subs	r3, #1
    3f6a:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3f6c:	6a3b      	ldr	r3, [r7, #32]
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d1bf      	bne.n	3ef2 <fold_logical_constants+0x26>
    3f72:	e004      	b.n	3f7e <fold_logical_constants+0xb2>
                break;
    3f74:	bf00      	nop
    3f76:	e002      	b.n	3f7e <fold_logical_constants+0xb2>
                    break;
    3f78:	bf00      	nop
    3f7a:	e000      	b.n	3f7e <fold_logical_constants+0xb2>
                    break;
    3f7c:	bf00      	nop
                }
            }
        }
        copy_to -= 1; // copy_to now contains number of args to pop
    3f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f80:	3b01      	subs	r3, #1
    3f82:	627b      	str	r3, [r7, #36]	; 0x24

        // pop and discard all the short-circuited expressions
        for (size_t i = 0; i < copy_to; ++i) {
    3f84:	2300      	movs	r3, #0
    3f86:	61fb      	str	r3, [r7, #28]
    3f88:	e005      	b.n	3f96 <fold_logical_constants+0xca>
            pop_result(parser);
    3f8a:	68f8      	ldr	r0, [r7, #12]
    3f8c:	f7ff fe44 	bl	3c18 <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    3f90:	69fb      	ldr	r3, [r7, #28]
    3f92:	3301      	adds	r3, #1
    3f94:	61fb      	str	r3, [r7, #28]
    3f96:	69fa      	ldr	r2, [r7, #28]
    3f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f9a:	429a      	cmp	r2, r3
    3f9c:	d3f5      	bcc.n	3f8a <fold_logical_constants+0xbe>
        }
        *num_args -= copy_to;
    3f9e:	687b      	ldr	r3, [r7, #4]
    3fa0:	681a      	ldr	r2, [r3, #0]
    3fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fa4:	1ad2      	subs	r2, r2, r3
    3fa6:	687b      	ldr	r3, [r7, #4]
    3fa8:	601a      	str	r2, [r3, #0]

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	681b      	ldr	r3, [r3, #0]
    3fae:	2b01      	cmp	r3, #1
    3fb0:	bf0c      	ite	eq
    3fb2:	2301      	moveq	r3, #1
    3fb4:	2300      	movne	r3, #0
    3fb6:	b2db      	uxtb	r3, r3
    3fb8:	e02b      	b.n	4012 <fold_logical_constants+0x146>

    } else if (rule_id == RULE_not_test_2) {
    3fba:	7afb      	ldrb	r3, [r7, #11]
    3fbc:	2b1e      	cmp	r3, #30
    3fbe:	d127      	bne.n	4010 <fold_logical_constants+0x144>
        // folding for unary logical op: not
        mp_parse_node_t pn = peek_result(parser, 0);
    3fc0:	2100      	movs	r1, #0
    3fc2:	68f8      	ldr	r0, [r7, #12]
    3fc4:	f7ff fe4e 	bl	3c64 <peek_result>
    3fc8:	61b8      	str	r0, [r7, #24]
        if (mp_parse_node_is_const_false(pn)) {
    3fca:	69b8      	ldr	r0, [r7, #24]
    3fcc:	f7ff fd69 	bl	3aa2 <mp_parse_node_is_const_false>
    3fd0:	4603      	mov	r3, r0
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d005      	beq.n	3fe2 <fold_logical_constants+0x116>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    3fd6:	210f      	movs	r1, #15
    3fd8:	200e      	movs	r0, #14
    3fda:	f7ff fc2f 	bl	383c <mp_parse_node_new_leaf>
    3fde:	61b8      	str	r0, [r7, #24]
    3fe0:	e00d      	b.n	3ffe <fold_logical_constants+0x132>
        } else if (mp_parse_node_is_const_true(pn)) {
    3fe2:	69b8      	ldr	r0, [r7, #24]
    3fe4:	f7ff fd79 	bl	3ada <mp_parse_node_is_const_true>
    3fe8:	4603      	mov	r3, r0
    3fea:	2b00      	cmp	r3, #0
    3fec:	d005      	beq.n	3ffa <fold_logical_constants+0x12e>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    3fee:	210d      	movs	r1, #13
    3ff0:	200e      	movs	r0, #14
    3ff2:	f7ff fc23 	bl	383c <mp_parse_node_new_leaf>
    3ff6:	61b8      	str	r0, [r7, #24]
    3ff8:	e001      	b.n	3ffe <fold_logical_constants+0x132>
        } else {
            return false;
    3ffa:	2300      	movs	r3, #0
    3ffc:	e009      	b.n	4012 <fold_logical_constants+0x146>
        }
        pop_result(parser);
    3ffe:	68f8      	ldr	r0, [r7, #12]
    4000:	f7ff fe0a 	bl	3c18 <pop_result>
        push_result_node(parser, pn);
    4004:	69b9      	ldr	r1, [r7, #24]
    4006:	68f8      	ldr	r0, [r7, #12]
    4008:	f7ff fe54 	bl	3cb4 <push_result_node>
        return true;
    400c:	2301      	movs	r3, #1
    400e:	e000      	b.n	4012 <fold_logical_constants+0x146>
    }

    return false;
    4010:	2300      	movs	r3, #0
}
    4012:	4618      	mov	r0, r3
    4014:	3728      	adds	r7, #40	; 0x28
    4016:	46bd      	mov	sp, r7
    4018:	bd80      	pop	{r7, pc}

0000401a <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    401a:	b580      	push	{r7, lr}
    401c:	b094      	sub	sp, #80	; 0x50
    401e:	af00      	add	r7, sp, #0
    4020:	60f8      	str	r0, [r7, #12]
    4022:	460b      	mov	r3, r1
    4024:	607a      	str	r2, [r7, #4]
    4026:	72fb      	strb	r3, [r7, #11]
    // this code does folding of arbitrary integer expressions, eg 1 + 2 * 3 + 4
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
    4028:	7afb      	ldrb	r3, [r7, #11]
    402a:	2b21      	cmp	r3, #33	; 0x21
    402c:	d005      	beq.n	403a <fold_constants+0x20>
        || rule_id == RULE_xor_expr
    402e:	7afb      	ldrb	r3, [r7, #11]
    4030:	2b22      	cmp	r3, #34	; 0x22
    4032:	d002      	beq.n	403a <fold_constants+0x20>
        || rule_id == RULE_and_expr) {
    4034:	7afb      	ldrb	r3, [r7, #11]
    4036:	2b23      	cmp	r3, #35	; 0x23
    4038:	d149      	bne.n	40ce <fold_constants+0xb4>
        // folding for binary ops: | ^ &
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	3b01      	subs	r3, #1
    403e:	4619      	mov	r1, r3
    4040:	68f8      	ldr	r0, [r7, #12]
    4042:	f7ff fe0f 	bl	3c64 <peek_result>
    4046:	6238      	str	r0, [r7, #32]
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4048:	f107 031c 	add.w	r3, r7, #28
    404c:	4619      	mov	r1, r3
    404e:	6a38      	ldr	r0, [r7, #32]
    4050:	f7ff fd5f 	bl	3b12 <mp_parse_node_get_int_maybe>
    4054:	4603      	mov	r3, r0
    4056:	f083 0301 	eor.w	r3, r3, #1
    405a:	b2db      	uxtb	r3, r3
    405c:	2b00      	cmp	r3, #0
    405e:	d001      	beq.n	4064 <fold_constants+0x4a>
            return false;
    4060:	2300      	movs	r3, #0
    4062:	e10a      	b.n	427a <fold_constants+0x260>
        }
        mp_binary_op_t op;
        if (rule_id == RULE_expr) {
    4064:	7afb      	ldrb	r3, [r7, #11]
    4066:	2b21      	cmp	r3, #33	; 0x21
    4068:	d102      	bne.n	4070 <fold_constants+0x56>
            op = MP_BINARY_OP_OR;
    406a:	2315      	movs	r3, #21
    406c:	64fb      	str	r3, [r7, #76]	; 0x4c
    406e:	e007      	b.n	4080 <fold_constants+0x66>
        } else if (rule_id == RULE_xor_expr) {
    4070:	7afb      	ldrb	r3, [r7, #11]
    4072:	2b22      	cmp	r3, #34	; 0x22
    4074:	d102      	bne.n	407c <fold_constants+0x62>
            op = MP_BINARY_OP_XOR;
    4076:	2316      	movs	r3, #22
    4078:	64fb      	str	r3, [r7, #76]	; 0x4c
    407a:	e001      	b.n	4080 <fold_constants+0x66>
        } else {
            op = MP_BINARY_OP_AND;
    407c:	2317      	movs	r3, #23
    407e:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	3b02      	subs	r3, #2
    4084:	64bb      	str	r3, [r7, #72]	; 0x48
    4086:	e01e      	b.n	40c6 <fold_constants+0xac>
            pn = peek_result(parser, i);
    4088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    408a:	4619      	mov	r1, r3
    408c:	68f8      	ldr	r0, [r7, #12]
    408e:	f7ff fde9 	bl	3c64 <peek_result>
    4092:	6238      	str	r0, [r7, #32]
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    4094:	f107 0318 	add.w	r3, r7, #24
    4098:	4619      	mov	r1, r3
    409a:	6a38      	ldr	r0, [r7, #32]
    409c:	f7ff fd39 	bl	3b12 <mp_parse_node_get_int_maybe>
    40a0:	4603      	mov	r3, r0
    40a2:	f083 0301 	eor.w	r3, r3, #1
    40a6:	b2db      	uxtb	r3, r3
    40a8:	2b00      	cmp	r3, #0
    40aa:	d001      	beq.n	40b0 <fold_constants+0x96>
                return false;
    40ac:	2300      	movs	r3, #0
    40ae:	e0e4      	b.n	427a <fold_constants+0x260>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    40b0:	69fb      	ldr	r3, [r7, #28]
    40b2:	69ba      	ldr	r2, [r7, #24]
    40b4:	4619      	mov	r1, r3
    40b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    40b8:	f007 fb92 	bl	b7e0 <mp_binary_op>
    40bc:	4603      	mov	r3, r0
    40be:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    40c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    40c2:	3b01      	subs	r3, #1
    40c4:	64bb      	str	r3, [r7, #72]	; 0x48
    40c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    40c8:	2b00      	cmp	r3, #0
    40ca:	dadd      	bge.n	4088 <fold_constants+0x6e>
        || rule_id == RULE_and_expr) {
    40cc:	e0ab      	b.n	4226 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_shift_expr
    40ce:	7afb      	ldrb	r3, [r7, #11]
    40d0:	2b24      	cmp	r3, #36	; 0x24
    40d2:	d005      	beq.n	40e0 <fold_constants+0xc6>
        || rule_id == RULE_arith_expr
    40d4:	7afb      	ldrb	r3, [r7, #11]
    40d6:	2b25      	cmp	r3, #37	; 0x25
    40d8:	d002      	beq.n	40e0 <fold_constants+0xc6>
        || rule_id == RULE_term) {
    40da:	7afb      	ldrb	r3, [r7, #11]
    40dc:	2b26      	cmp	r3, #38	; 0x26
    40de:	d163      	bne.n	41a8 <fold_constants+0x18e>
        // folding for binary ops: << >> + - * / % //
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	3b01      	subs	r3, #1
    40e4:	4619      	mov	r1, r3
    40e6:	68f8      	ldr	r0, [r7, #12]
    40e8:	f7ff fdbc 	bl	3c64 <peek_result>
    40ec:	6338      	str	r0, [r7, #48]	; 0x30
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    40ee:	f107 031c 	add.w	r3, r7, #28
    40f2:	4619      	mov	r1, r3
    40f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
    40f6:	f7ff fd0c 	bl	3b12 <mp_parse_node_get_int_maybe>
    40fa:	4603      	mov	r3, r0
    40fc:	f083 0301 	eor.w	r3, r3, #1
    4100:	b2db      	uxtb	r3, r3
    4102:	2b00      	cmp	r3, #0
    4104:	d001      	beq.n	410a <fold_constants+0xf0>
            return false;
    4106:	2300      	movs	r3, #0
    4108:	e0b7      	b.n	427a <fold_constants+0x260>
        }
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	3b02      	subs	r3, #2
    410e:	647b      	str	r3, [r7, #68]	; 0x44
    4110:	e046      	b.n	41a0 <fold_constants+0x186>
            pn = peek_result(parser, i - 1);
    4112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4114:	3b01      	subs	r3, #1
    4116:	4619      	mov	r1, r3
    4118:	68f8      	ldr	r0, [r7, #12]
    411a:	f7ff fda3 	bl	3c64 <peek_result>
    411e:	6338      	str	r0, [r7, #48]	; 0x30
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    4120:	f107 0314 	add.w	r3, r7, #20
    4124:	4619      	mov	r1, r3
    4126:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4128:	f7ff fcf3 	bl	3b12 <mp_parse_node_get_int_maybe>
    412c:	4603      	mov	r3, r0
    412e:	f083 0301 	eor.w	r3, r3, #1
    4132:	b2db      	uxtb	r3, r3
    4134:	2b00      	cmp	r3, #0
    4136:	d001      	beq.n	413c <fold_constants+0x122>
                return false;
    4138:	2300      	movs	r3, #0
    413a:	e09e      	b.n	427a <fold_constants+0x260>
            }
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    413e:	4619      	mov	r1, r3
    4140:	68f8      	ldr	r0, [r7, #12]
    4142:	f7ff fd8f 	bl	3c64 <peek_result>
    4146:	4603      	mov	r3, r0
    4148:	091b      	lsrs	r3, r3, #4
    414a:	62fb      	str	r3, [r7, #44]	; 0x2c
                255,//MP_BINARY_OP_LESS
                MP_BINARY_OP_LSHIFT,
                255,//MP_BINARY_OP_MORE
                MP_BINARY_OP_RSHIFT,
            };
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    414e:	3b2f      	subs	r3, #47	; 0x2f
    4150:	4a4c      	ldr	r2, [pc, #304]	; (4284 <fold_constants+0x26a>)
    4152:	5cd3      	ldrb	r3, [r2, r3]
    4154:	62bb      	str	r3, [r7, #40]	; 0x28
            if (op == (mp_binary_op_t)255) {
    4156:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4158:	2bff      	cmp	r3, #255	; 0xff
    415a:	d101      	bne.n	4160 <fold_constants+0x146>
                return false;
    415c:	2300      	movs	r3, #0
    415e:	e08c      	b.n	427a <fold_constants+0x260>
            }
            int rhs_sign = mp_obj_int_sign(arg1);
    4160:	697b      	ldr	r3, [r7, #20]
    4162:	4618      	mov	r0, r3
    4164:	f00c fa88 	bl	10678 <mp_obj_int_sign>
    4168:	6278      	str	r0, [r7, #36]	; 0x24
            if (op <= MP_BINARY_OP_RSHIFT) {
    416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    416c:	2b19      	cmp	r3, #25
    416e:	d804      	bhi.n	417a <fold_constants+0x160>
                // << and >> can't have negative rhs
                if (rhs_sign < 0) {
    4170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4172:	2b00      	cmp	r3, #0
    4174:	da09      	bge.n	418a <fold_constants+0x170>
                    return false;
    4176:	2300      	movs	r3, #0
    4178:	e07f      	b.n	427a <fold_constants+0x260>
                }
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    417c:	2b1c      	cmp	r3, #28
    417e:	d904      	bls.n	418a <fold_constants+0x170>
                // % and // can't have zero rhs
                if (rhs_sign == 0) {
    4180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4182:	2b00      	cmp	r3, #0
    4184:	d101      	bne.n	418a <fold_constants+0x170>
                    return false;
    4186:	2300      	movs	r3, #0
    4188:	e077      	b.n	427a <fold_constants+0x260>
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    418a:	69fb      	ldr	r3, [r7, #28]
    418c:	697a      	ldr	r2, [r7, #20]
    418e:	4619      	mov	r1, r3
    4190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4192:	f007 fb25 	bl	b7e0 <mp_binary_op>
    4196:	4603      	mov	r3, r0
    4198:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    419a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    419c:	3b02      	subs	r3, #2
    419e:	647b      	str	r3, [r7, #68]	; 0x44
    41a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    41a2:	2b00      	cmp	r3, #0
    41a4:	dcb5      	bgt.n	4112 <fold_constants+0xf8>
        || rule_id == RULE_term) {
    41a6:	e03e      	b.n	4226 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_factor_2) {
    41a8:	7afb      	ldrb	r3, [r7, #11]
    41aa:	2b27      	cmp	r3, #39	; 0x27
    41ac:	d139      	bne.n	4222 <fold_constants+0x208>
        // folding for unary ops: + - ~
        mp_parse_node_t pn = peek_result(parser, 0);
    41ae:	2100      	movs	r1, #0
    41b0:	68f8      	ldr	r0, [r7, #12]
    41b2:	f7ff fd57 	bl	3c64 <peek_result>
    41b6:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    41b8:	f107 031c 	add.w	r3, r7, #28
    41bc:	4619      	mov	r1, r3
    41be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    41c0:	f7ff fca7 	bl	3b12 <mp_parse_node_get_int_maybe>
    41c4:	4603      	mov	r3, r0
    41c6:	f083 0301 	eor.w	r3, r3, #1
    41ca:	b2db      	uxtb	r3, r3
    41cc:	2b00      	cmp	r3, #0
    41ce:	d001      	beq.n	41d4 <fold_constants+0x1ba>
            return false;
    41d0:	2300      	movs	r3, #0
    41d2:	e052      	b.n	427a <fold_constants+0x260>
        }
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    41d4:	2101      	movs	r1, #1
    41d6:	68f8      	ldr	r0, [r7, #12]
    41d8:	f7ff fd44 	bl	3c64 <peek_result>
    41dc:	4603      	mov	r3, r0
    41de:	091b      	lsrs	r3, r3, #4
    41e0:	637b      	str	r3, [r7, #52]	; 0x34
        mp_unary_op_t op;
        if (tok == MP_TOKEN_OP_PLUS) {
    41e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41e4:	2b2f      	cmp	r3, #47	; 0x2f
    41e6:	d102      	bne.n	41ee <fold_constants+0x1d4>
            op = MP_UNARY_OP_POSITIVE;
    41e8:	2300      	movs	r3, #0
    41ea:	643b      	str	r3, [r7, #64]	; 0x40
    41ec:	e011      	b.n	4212 <fold_constants+0x1f8>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    41ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41f0:	2b30      	cmp	r3, #48	; 0x30
    41f2:	d102      	bne.n	41fa <fold_constants+0x1e0>
            op = MP_UNARY_OP_NEGATIVE;
    41f4:	2301      	movs	r3, #1
    41f6:	643b      	str	r3, [r7, #64]	; 0x40
    41f8:	e00b      	b.n	4212 <fold_constants+0x1f8>
        } else {
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    41fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41fc:	2b3d      	cmp	r3, #61	; 0x3d
    41fe:	d006      	beq.n	420e <fold_constants+0x1f4>
    4200:	4b21      	ldr	r3, [pc, #132]	; (4288 <fold_constants+0x26e>)
    4202:	4a22      	ldr	r2, [pc, #136]	; (428c <fold_constants+0x272>)
    4204:	f240 21b3 	movw	r1, #691	; 0x2b3
    4208:	4821      	ldr	r0, [pc, #132]	; (4290 <fold_constants+0x276>)
    420a:	f017 f939 	bl	1b480 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    420e:	2302      	movs	r3, #2
    4210:	643b      	str	r3, [r7, #64]	; 0x40
        }
        arg0 = mp_unary_op(op, arg0);
    4212:	69fb      	ldr	r3, [r7, #28]
    4214:	4619      	mov	r1, r3
    4216:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4218:	f007 f9f2 	bl	b600 <mp_unary_op>
    421c:	4603      	mov	r3, r0
    421e:	61fb      	str	r3, [r7, #28]
    4220:	e001      	b.n	4226 <fold_constants+0x20c>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    4222:	2300      	movs	r3, #0
    4224:	e029      	b.n	427a <fold_constants+0x260>
    }

    // success folding this rule

    for (size_t i = num_args; i > 0; i--) {
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	63fb      	str	r3, [r7, #60]	; 0x3c
    422a:	e005      	b.n	4238 <fold_constants+0x21e>
        pop_result(parser);
    422c:	68f8      	ldr	r0, [r7, #12]
    422e:	f7ff fcf3 	bl	3c18 <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    4232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4234:	3b01      	subs	r3, #1
    4236:	63fb      	str	r3, [r7, #60]	; 0x3c
    4238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    423a:	2b00      	cmp	r3, #0
    423c:	d1f6      	bne.n	422c <fold_constants+0x212>
    }
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    423e:	69fb      	ldr	r3, [r7, #28]
    4240:	4618      	mov	r0, r3
    4242:	f7ff fac9 	bl	37d8 <MP_OBJ_IS_SMALL_INT>
    4246:	4603      	mov	r3, r0
    4248:	2b00      	cmp	r3, #0
    424a:	d00a      	beq.n	4262 <fold_constants+0x248>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    424c:	69fb      	ldr	r3, [r7, #28]
    424e:	4619      	mov	r1, r3
    4250:	68f8      	ldr	r0, [r7, #12]
    4252:	f7ff fd77 	bl	3d44 <mp_parse_node_new_small_int_checked>
    4256:	4603      	mov	r3, r0
    4258:	4619      	mov	r1, r3
    425a:	68f8      	ldr	r0, [r7, #12]
    425c:	f7ff fd2a 	bl	3cb4 <push_result_node>
    4260:	e00a      	b.n	4278 <fold_constants+0x25e>
    } else {
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    4262:	69fb      	ldr	r3, [r7, #28]
    4264:	461a      	mov	r2, r3
    4266:	2100      	movs	r1, #0
    4268:	68f8      	ldr	r0, [r7, #12]
    426a:	f7ff fd51 	bl	3d10 <make_node_const_object>
    426e:	4603      	mov	r3, r0
    4270:	4619      	mov	r1, r3
    4272:	68f8      	ldr	r0, [r7, #12]
    4274:	f7ff fd1e 	bl	3cb4 <push_result_node>
    }

    return true;
    4278:	2301      	movs	r3, #1
}
    427a:	4618      	mov	r0, r3
    427c:	3750      	adds	r7, #80	; 0x50
    427e:	46bd      	mov	sp, r7
    4280:	bd80      	pop	{r7, pc}
    4282:	bf00      	nop
    4284:	0001fe70 	.word	0x0001fe70
    4288:	0001fd24 	.word	0x0001fd24
    428c:	0001fe7c 	.word	0x0001fe7c
    4290:	0001fcd0 	.word	0x0001fcd0

00004294 <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    4294:	b590      	push	{r4, r7, lr}
    4296:	b089      	sub	sp, #36	; 0x24
    4298:	af00      	add	r7, sp, #0
    429a:	60f8      	str	r0, [r7, #12]
    429c:	60b9      	str	r1, [r7, #8]
    429e:	603b      	str	r3, [r7, #0]
    42a0:	4613      	mov	r3, r2
    42a2:	71fb      	strb	r3, [r7, #7]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    42a4:	79fb      	ldrb	r3, [r7, #7]
    42a6:	2b2a      	cmp	r3, #42	; 0x2a
    42a8:	d114      	bne.n	42d4 <push_result_rule+0x40>
        // there should be just 1 arg for this rule
        mp_parse_node_t pn = peek_result(parser, 0);
    42aa:	2100      	movs	r1, #0
    42ac:	68f8      	ldr	r0, [r7, #12]
    42ae:	f7ff fcd9 	bl	3c64 <peek_result>
    42b2:	61b8      	str	r0, [r7, #24]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    42b4:	69bb      	ldr	r3, [r7, #24]
    42b6:	2b00      	cmp	r3, #0
    42b8:	d00c      	beq.n	42d4 <push_result_rule+0x40>
            // need to keep parenthesis for ()
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    42ba:	69bb      	ldr	r3, [r7, #24]
    42bc:	2b00      	cmp	r3, #0
    42be:	d045      	beq.n	434c <push_result_rule+0xb8>
    42c0:	69bb      	ldr	r3, [r7, #24]
    42c2:	f003 0303 	and.w	r3, r3, #3
    42c6:	2b00      	cmp	r3, #0
    42c8:	d140      	bne.n	434c <push_result_rule+0xb8>
    42ca:	69bb      	ldr	r3, [r7, #24]
    42cc:	685b      	ldr	r3, [r3, #4]
    42ce:	b2db      	uxtb	r3, r3
    42d0:	2b8a      	cmp	r3, #138	; 0x8a
    42d2:	d13b      	bne.n	434c <push_result_rule+0xb8>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    42d4:	463a      	mov	r2, r7
    42d6:	79fb      	ldrb	r3, [r7, #7]
    42d8:	4619      	mov	r1, r3
    42da:	68f8      	ldr	r0, [r7, #12]
    42dc:	f7ff fdf6 	bl	3ecc <fold_logical_constants>
    42e0:	4603      	mov	r3, r0
    42e2:	2b00      	cmp	r3, #0
    42e4:	d134      	bne.n	4350 <push_result_rule+0xbc>
        // we folded this rule so return straight away
        return;
    }
    if (fold_constants(parser, rule_id, num_args)) {
    42e6:	683a      	ldr	r2, [r7, #0]
    42e8:	79fb      	ldrb	r3, [r7, #7]
    42ea:	4619      	mov	r1, r3
    42ec:	68f8      	ldr	r0, [r7, #12]
    42ee:	f7ff fe94 	bl	401a <fold_constants>
    42f2:	4603      	mov	r3, r0
    42f4:	2b00      	cmp	r3, #0
    42f6:	d12d      	bne.n	4354 <push_result_rule+0xc0>
        // we folded this rule so return straight away
        return;
    }
    #endif

    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    42f8:	683b      	ldr	r3, [r7, #0]
    42fa:	3302      	adds	r3, #2
    42fc:	009b      	lsls	r3, r3, #2
    42fe:	4619      	mov	r1, r3
    4300:	68f8      	ldr	r0, [r7, #12]
    4302:	f7ff fac9 	bl	3898 <parser_alloc>
    4306:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    4308:	697b      	ldr	r3, [r7, #20]
    430a:	68ba      	ldr	r2, [r7, #8]
    430c:	601a      	str	r2, [r3, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    430e:	79fa      	ldrb	r2, [r7, #7]
    4310:	683b      	ldr	r3, [r7, #0]
    4312:	021b      	lsls	r3, r3, #8
    4314:	431a      	orrs	r2, r3
    4316:	697b      	ldr	r3, [r7, #20]
    4318:	605a      	str	r2, [r3, #4]
    for (size_t i = num_args; i > 0; i--) {
    431a:	683b      	ldr	r3, [r7, #0]
    431c:	61fb      	str	r3, [r7, #28]
    431e:	e00c      	b.n	433a <push_result_rule+0xa6>
        pn->nodes[i - 1] = pop_result(parser);
    4320:	69fb      	ldr	r3, [r7, #28]
    4322:	1e5c      	subs	r4, r3, #1
    4324:	68f8      	ldr	r0, [r7, #12]
    4326:	f7ff fc77 	bl	3c18 <pop_result>
    432a:	4601      	mov	r1, r0
    432c:	697b      	ldr	r3, [r7, #20]
    432e:	1ca2      	adds	r2, r4, #2
    4330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    4334:	69fb      	ldr	r3, [r7, #28]
    4336:	3b01      	subs	r3, #1
    4338:	61fb      	str	r3, [r7, #28]
    433a:	69fb      	ldr	r3, [r7, #28]
    433c:	2b00      	cmp	r3, #0
    433e:	d1ef      	bne.n	4320 <push_result_rule+0x8c>
    }
    push_result_node(parser, (mp_parse_node_t)pn);
    4340:	697b      	ldr	r3, [r7, #20]
    4342:	4619      	mov	r1, r3
    4344:	68f8      	ldr	r0, [r7, #12]
    4346:	f7ff fcb5 	bl	3cb4 <push_result_node>
    434a:	e004      	b.n	4356 <push_result_rule+0xc2>
            return;
    434c:	bf00      	nop
    434e:	e002      	b.n	4356 <push_result_rule+0xc2>
        return;
    4350:	bf00      	nop
    4352:	e000      	b.n	4356 <push_result_rule+0xc2>
        return;
    4354:	bf00      	nop
}
    4356:	3724      	adds	r7, #36	; 0x24
    4358:	46bd      	mov	sp, r7
    435a:	bd90      	pop	{r4, r7, pc}

0000435c <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    435c:	b580      	push	{r7, lr}
    435e:	b0a2      	sub	sp, #136	; 0x88
    4360:	af00      	add	r7, sp, #0
    4362:	60f8      	str	r0, [r7, #12]
    4364:	60b9      	str	r1, [r7, #8]
    4366:	607a      	str	r2, [r7, #4]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    4368:	2340      	movs	r3, #64	; 0x40
    436a:	61fb      	str	r3, [r7, #28]
    parser.rule_stack_top = 0;
    436c:	2300      	movs	r3, #0
    436e:	623b      	str	r3, [r7, #32]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    4370:	69fb      	ldr	r3, [r7, #28]
    4372:	00db      	lsls	r3, r3, #3
    4374:	4618      	mov	r0, r3
    4376:	f7fb ffd1 	bl	31c <m_malloc>
    437a:	4603      	mov	r3, r0
    437c:	627b      	str	r3, [r7, #36]	; 0x24

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    437e:	2320      	movs	r3, #32
    4380:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.result_stack_top = 0;
    4382:	2300      	movs	r3, #0
    4384:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    4386:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4388:	009b      	lsls	r3, r3, #2
    438a:	4618      	mov	r0, r3
    438c:	f7fb ffc6 	bl	31c <m_malloc>
    4390:	4603      	mov	r3, r0
    4392:	633b      	str	r3, [r7, #48]	; 0x30

    parser.lexer = lex;
    4394:	68bb      	ldr	r3, [r7, #8]
    4396:	637b      	str	r3, [r7, #52]	; 0x34

    parser.tree.chunk = NULL;
    4398:	2300      	movs	r3, #0
    439a:	63fb      	str	r3, [r7, #60]	; 0x3c
    parser.cur_chunk = NULL;
    439c:	2300      	movs	r3, #0
    439e:	643b      	str	r3, [r7, #64]	; 0x40
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    43a0:	687b      	ldr	r3, [r7, #4]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d002      	beq.n	43ac <mp_parse+0x50>
    43a6:	2b02      	cmp	r3, #2
    43a8:	d004      	beq.n	43b4 <mp_parse+0x58>
    43aa:	e007      	b.n	43bc <mp_parse+0x60>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    43ac:	2336      	movs	r3, #54	; 0x36
    43ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    43b2:	e006      	b.n	43c2 <mp_parse+0x66>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    43b4:	2338      	movs	r3, #56	; 0x38
    43b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    43ba:	e002      	b.n	43c2 <mp_parse+0x66>
        default: top_level_rule = RULE_file_input;
    43bc:	2300      	movs	r3, #0
    43be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    43c2:	68bb      	ldr	r3, [r7, #8]
    43c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
    43c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    43ca:	b2da      	uxtb	r2, r3
    43cc:	f107 001c 	add.w	r0, r7, #28
    43d0:	2300      	movs	r3, #0
    43d2:	f7ff faca 	bl	396a <push_rule>

    // parse!

    bool backtrack = false;
    43d6:	2300      	movs	r3, #0
    43d8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

    for (;;) {
        next_rule:
        if (parser.rule_stack_top == 0) {
    43dc:	6a3b      	ldr	r3, [r7, #32]
    43de:	2b00      	cmp	r3, #0
    43e0:	d104      	bne.n	43ec <mp_parse+0x90>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    43e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    43e4:	2b00      	cmp	r3, #0
    43e6:	f040 8292 	bne.w	490e <mp_parse+0x5b2>
    43ea:	e2a1      	b.n	4930 <mp_parse+0x5d4>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    43ec:	f107 0214 	add.w	r2, r7, #20
    43f0:	f107 0118 	add.w	r1, r7, #24
    43f4:	f107 031c 	add.w	r3, r7, #28
    43f8:	4618      	mov	r0, r3
    43fa:	f7ff fb23 	bl	3a44 <pop_rule>
    43fe:	4603      	mov	r3, r0
    4400:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        uint8_t rule_act = rule_act_table[rule_id];
    4404:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4408:	4ab2      	ldr	r2, [pc, #712]	; (46d4 <mp_parse+0x378>)
    440a:	5cd3      	ldrb	r3, [r2, r3]
    440c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    4410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4414:	4618      	mov	r0, r3
    4416:	f7ff fa20 	bl	385a <get_rule_arg>
    441a:	6638      	str	r0, [r7, #96]	; 0x60
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    441c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4420:	f003 030f 	and.w	r3, r3, #15
    4424:	65fb      	str	r3, [r7, #92]	; 0x5c
        switch (rule_act & RULE_ACT_KIND_MASK) {
    4426:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    442a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    442e:	2b10      	cmp	r3, #16
    4430:	d002      	beq.n	4438 <mp_parse+0xdc>
    4432:	2b20      	cmp	r3, #32
    4434:	d067      	beq.n	4506 <mp_parse+0x1aa>
    4436:	e1aa      	b.n	478e <mp_parse+0x432>
                if (i > 0 && !backtrack) {
    4438:	69bb      	ldr	r3, [r7, #24]
    443a:	2b00      	cmp	r3, #0
    443c:	d006      	beq.n	444c <mp_parse+0xf0>
    443e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4442:	f083 0301 	eor.w	r3, r3, #1
    4446:	b2db      	uxtb	r3, r3
    4448:	2b00      	cmp	r3, #0
    444a:	d1c7      	bne.n	43dc <mp_parse+0x80>
                    backtrack = false;
    444c:	2300      	movs	r3, #0
    444e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                for (; i < n; ++i) {
    4452:	e050      	b.n	44f6 <mp_parse+0x19a>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    4454:	69bb      	ldr	r3, [r7, #24]
    4456:	005b      	lsls	r3, r3, #1
    4458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    445a:	4413      	add	r3, r2
    445c:	881b      	ldrh	r3, [r3, #0]
    445e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    4462:	f023 030f 	bic.w	r3, r3, #15
    4466:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    if (kind == RULE_ARG_TOK) {
    446a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4472:	d116      	bne.n	44a2 <mp_parse+0x146>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    4474:	68bb      	ldr	r3, [r7, #8]
    4476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4478:	69bb      	ldr	r3, [r7, #24]
    447a:	005b      	lsls	r3, r3, #1
    447c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    447e:	440b      	add	r3, r1
    4480:	881b      	ldrh	r3, [r3, #0]
    4482:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4486:	429a      	cmp	r2, r3
    4488:	d132      	bne.n	44f0 <mp_parse+0x194>
                            push_result_token(&parser, rule_id);
    448a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    448e:	f107 031c 	add.w	r3, r7, #28
    4492:	4611      	mov	r1, r2
    4494:	4618      	mov	r0, r3
    4496:	f7ff fc65 	bl	3d64 <push_result_token>
                            mp_lexer_to_next(lex);
    449a:	68b8      	ldr	r0, [r7, #8]
    449c:	f7fe fe27 	bl	30ee <mp_lexer_to_next>
                            goto next_rule;
    44a0:	e79c      	b.n	43dc <mp_parse+0x80>
                        assert(kind == RULE_ARG_RULE);
    44a2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    44a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    44aa:	d006      	beq.n	44ba <mp_parse+0x15e>
    44ac:	4b8a      	ldr	r3, [pc, #552]	; (46d8 <mp_parse+0x37c>)
    44ae:	4a8b      	ldr	r2, [pc, #556]	; (46dc <mp_parse+0x380>)
    44b0:	f240 318b 	movw	r1, #907	; 0x38b
    44b4:	488a      	ldr	r0, [pc, #552]	; (46e0 <mp_parse+0x384>)
    44b6:	f016 ffe3 	bl	1b480 <__assert_func>
                        if (i + 1 < n) {
    44ba:	69bb      	ldr	r3, [r7, #24]
    44bc:	1c5a      	adds	r2, r3, #1
    44be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    44c0:	429a      	cmp	r2, r3
    44c2:	d208      	bcs.n	44d6 <mp_parse+0x17a>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    44c4:	6979      	ldr	r1, [r7, #20]
    44c6:	69bb      	ldr	r3, [r7, #24]
    44c8:	3301      	adds	r3, #1
    44ca:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    44ce:	f107 001c 	add.w	r0, r7, #28
    44d2:	f7ff fa4a 	bl	396a <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    44d6:	69bb      	ldr	r3, [r7, #24]
    44d8:	005b      	lsls	r3, r3, #1
    44da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    44dc:	4413      	add	r3, r2
    44de:	881b      	ldrh	r3, [r3, #0]
    44e0:	461a      	mov	r2, r3
    44e2:	f107 031c 	add.w	r3, r7, #28
    44e6:	4611      	mov	r1, r2
    44e8:	4618      	mov	r0, r3
    44ea:	f7ff fa7c 	bl	39e6 <push_rule_from_arg>
                        goto next_rule;
    44ee:	e775      	b.n	43dc <mp_parse+0x80>
                for (; i < n; ++i) {
    44f0:	69bb      	ldr	r3, [r7, #24]
    44f2:	3301      	adds	r3, #1
    44f4:	61bb      	str	r3, [r7, #24]
    44f6:	69ba      	ldr	r2, [r7, #24]
    44f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    44fa:	429a      	cmp	r2, r3
    44fc:	d3aa      	bcc.n	4454 <mp_parse+0xf8>
                backtrack = true;
    44fe:	2301      	movs	r3, #1
    4500:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                break;
    4504:	e202      	b.n	490c <mp_parse+0x5b0>
                if (backtrack) {
    4506:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    450a:	2b00      	cmp	r3, #0
    450c:	d06c      	beq.n	45e8 <mp_parse+0x28c>
                    assert(i > 0);
    450e:	69bb      	ldr	r3, [r7, #24]
    4510:	2b00      	cmp	r3, #0
    4512:	d106      	bne.n	4522 <mp_parse+0x1c6>
    4514:	4b73      	ldr	r3, [pc, #460]	; (46e4 <mp_parse+0x388>)
    4516:	4a71      	ldr	r2, [pc, #452]	; (46dc <mp_parse+0x380>)
    4518:	f240 319a 	movw	r1, #922	; 0x39a
    451c:	4870      	ldr	r0, [pc, #448]	; (46e0 <mp_parse+0x384>)
    451e:	f016 ffaf 	bl	1b480 <__assert_func>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    4522:	69bb      	ldr	r3, [r7, #24]
    4524:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    4528:	3b01      	subs	r3, #1
    452a:	005b      	lsls	r3, r3, #1
    452c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    452e:	4413      	add	r3, r2
    4530:	881b      	ldrh	r3, [r3, #0]
    4532:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4536:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    453a:	d109      	bne.n	4550 <mp_parse+0x1f4>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    453c:	f107 031c 	add.w	r3, r7, #28
    4540:	2100      	movs	r1, #0
    4542:	4618      	mov	r0, r3
    4544:	f7ff fbb6 	bl	3cb4 <push_result_node>
                        backtrack = false;
    4548:	2300      	movs	r3, #0
    454a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    454e:	e04b      	b.n	45e8 <mp_parse+0x28c>
                        if (i > 1) {
    4550:	69bb      	ldr	r3, [r7, #24]
    4552:	2b01      	cmp	r3, #1
    4554:	f200 81f4 	bhi.w	4940 <mp_parse+0x5e4>
                            goto next_rule;
    4558:	e740      	b.n	43dc <mp_parse+0x80>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    455a:	69bb      	ldr	r3, [r7, #24]
    455c:	005b      	lsls	r3, r3, #1
    455e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4560:	4413      	add	r3, r2
    4562:	881b      	ldrh	r3, [r3, #0]
    4564:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    456c:	d123      	bne.n	45b6 <mp_parse+0x25a>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    456e:	69bb      	ldr	r3, [r7, #24]
    4570:	005b      	lsls	r3, r3, #1
    4572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4574:	4413      	add	r3, r2
    4576:	881b      	ldrh	r3, [r3, #0]
    4578:	f3c3 030b 	ubfx	r3, r3, #0, #12
    457c:	657b      	str	r3, [r7, #84]	; 0x54
                        if (lex->tok_kind == tok_kind) {
    457e:	68bb      	ldr	r3, [r7, #8]
    4580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4584:	429a      	cmp	r2, r3
    4586:	d10e      	bne.n	45a6 <mp_parse+0x24a>
                            if (tok_kind == MP_TOKEN_NAME) {
    4588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    458a:	2b07      	cmp	r3, #7
    458c:	d107      	bne.n	459e <mp_parse+0x242>
                                push_result_token(&parser, rule_id);
    458e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4592:	f107 031c 	add.w	r3, r7, #28
    4596:	4611      	mov	r1, r2
    4598:	4618      	mov	r0, r3
    459a:	f7ff fbe3 	bl	3d64 <push_result_token>
                            mp_lexer_to_next(lex);
    459e:	68b8      	ldr	r0, [r7, #8]
    45a0:	f7fe fda5 	bl	30ee <mp_lexer_to_next>
    45a4:	e01d      	b.n	45e2 <mp_parse+0x286>
                            if (i > 0) {
    45a6:	69bb      	ldr	r3, [r7, #24]
    45a8:	2b00      	cmp	r3, #0
    45aa:	f040 81cb 	bne.w	4944 <mp_parse+0x5e8>
                                backtrack = true;
    45ae:	2301      	movs	r3, #1
    45b0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto next_rule;
    45b4:	e712      	b.n	43dc <mp_parse+0x80>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    45b6:	6979      	ldr	r1, [r7, #20]
    45b8:	69bb      	ldr	r3, [r7, #24]
    45ba:	3301      	adds	r3, #1
    45bc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    45c0:	f107 001c 	add.w	r0, r7, #28
    45c4:	f7ff f9d1 	bl	396a <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    45c8:	69bb      	ldr	r3, [r7, #24]
    45ca:	005b      	lsls	r3, r3, #1
    45cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    45ce:	4413      	add	r3, r2
    45d0:	881b      	ldrh	r3, [r3, #0]
    45d2:	461a      	mov	r2, r3
    45d4:	f107 031c 	add.w	r3, r7, #28
    45d8:	4611      	mov	r1, r2
    45da:	4618      	mov	r0, r3
    45dc:	f7ff fa03 	bl	39e6 <push_rule_from_arg>
                        goto next_rule;
    45e0:	e6fc      	b.n	43dc <mp_parse+0x80>
                for (; i < n; ++i) {
    45e2:	69bb      	ldr	r3, [r7, #24]
    45e4:	3301      	adds	r3, #1
    45e6:	61bb      	str	r3, [r7, #24]
    45e8:	69ba      	ldr	r2, [r7, #24]
    45ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    45ec:	429a      	cmp	r2, r3
    45ee:	d3b4      	bcc.n	455a <mp_parse+0x1fe>
                assert(i == n);
    45f0:	69ba      	ldr	r2, [r7, #24]
    45f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    45f4:	429a      	cmp	r2, r3
    45f6:	d006      	beq.n	4606 <mp_parse+0x2aa>
    45f8:	4b3b      	ldr	r3, [pc, #236]	; (46e8 <mp_parse+0x38c>)
    45fa:	4a38      	ldr	r2, [pc, #224]	; (46dc <mp_parse+0x380>)
    45fc:	f240 31c7 	movw	r1, #967	; 0x3c7
    4600:	4837      	ldr	r0, [pc, #220]	; (46e0 <mp_parse+0x384>)
    4602:	f016 ff3d 	bl	1b480 <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    4606:	687b      	ldr	r3, [r7, #4]
    4608:	2b00      	cmp	r3, #0
    460a:	d03c      	beq.n	4686 <mp_parse+0x32a>
    460c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4610:	2b05      	cmp	r3, #5
    4612:	d138      	bne.n	4686 <mp_parse+0x32a>
    4614:	f107 031c 	add.w	r3, r7, #28
    4618:	2100      	movs	r1, #0
    461a:	4618      	mov	r0, r3
    461c:	f7ff fb22 	bl	3c64 <peek_result>
    4620:	4603      	mov	r3, r0
    4622:	2b00      	cmp	r3, #0
    4624:	d12f      	bne.n	4686 <mp_parse+0x32a>
                    mp_parse_node_t p = peek_result(&parser, 1);
    4626:	f107 031c 	add.w	r3, r7, #28
    462a:	2101      	movs	r1, #1
    462c:	4618      	mov	r0, r3
    462e:	f7ff fb19 	bl	3c64 <peek_result>
    4632:	6538      	str	r0, [r7, #80]	; 0x50
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    4634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4636:	f003 0303 	and.w	r3, r3, #3
    463a:	2b00      	cmp	r3, #0
    463c:	d004      	beq.n	4648 <mp_parse+0x2ec>
    463e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4640:	f003 030f 	and.w	r3, r3, #15
    4644:	2b02      	cmp	r3, #2
    4646:	d10c      	bne.n	4662 <mp_parse+0x306>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    4648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    464a:	2b00      	cmp	r3, #0
    464c:	d01b      	beq.n	4686 <mp_parse+0x32a>
    464e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4650:	f003 0303 	and.w	r3, r3, #3
    4654:	2b00      	cmp	r3, #0
    4656:	d116      	bne.n	4686 <mp_parse+0x32a>
    4658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    465a:	685b      	ldr	r3, [r3, #4]
    465c:	b2db      	uxtb	r3, r3
    465e:	2b35      	cmp	r3, #53	; 0x35
    4660:	d111      	bne.n	4686 <mp_parse+0x32a>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    4662:	f107 031c 	add.w	r3, r7, #28
    4666:	4618      	mov	r0, r3
    4668:	f7ff fad6 	bl	3c18 <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    466c:	f107 031c 	add.w	r3, r7, #28
    4670:	4618      	mov	r0, r3
    4672:	f7ff fad1 	bl	3c18 <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    4676:	6979      	ldr	r1, [r7, #20]
    4678:	f107 001c 	add.w	r0, r7, #28
    467c:	2300      	movs	r3, #0
    467e:	2208      	movs	r2, #8
    4680:	f7ff fe08 	bl	4294 <push_result_rule>
                        break;
    4684:	e142      	b.n	490c <mp_parse+0x5b0>
                i = 0;
    4686:	2300      	movs	r3, #0
    4688:	61bb      	str	r3, [r7, #24]
                size_t num_not_nil = 0;
    468a:	2300      	movs	r3, #0
    468c:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (size_t x = n; x > 0;) {
    468e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4690:	67bb      	str	r3, [r7, #120]	; 0x78
    4692:	e03b      	b.n	470c <mp_parse+0x3b0>
                    --x;
    4694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4696:	3b01      	subs	r3, #1
    4698:	67bb      	str	r3, [r7, #120]	; 0x78
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    469a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    469c:	005b      	lsls	r3, r3, #1
    469e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    46a0:	4413      	add	r3, r2
    46a2:	881b      	ldrh	r3, [r3, #0]
    46a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    46a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    46ac:	d11e      	bne.n	46ec <mp_parse+0x390>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    46ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    46b0:	005b      	lsls	r3, r3, #1
    46b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    46b4:	4413      	add	r3, r2
    46b6:	881b      	ldrh	r3, [r3, #0]
    46b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    46bc:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (tok_kind == MP_TOKEN_NAME) {
    46be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    46c0:	2b07      	cmp	r3, #7
    46c2:	d123      	bne.n	470c <mp_parse+0x3b0>
                            i += 1;
    46c4:	69bb      	ldr	r3, [r7, #24]
    46c6:	3301      	adds	r3, #1
    46c8:	61bb      	str	r3, [r7, #24]
                            num_not_nil += 1;
    46ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    46cc:	3301      	adds	r3, #1
    46ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    46d0:	e01c      	b.n	470c <mp_parse+0x3b0>
    46d2:	bf00      	nop
    46d4:	0001f7e0 	.word	0x0001f7e0
    46d8:	0001fd40 	.word	0x0001fd40
    46dc:	0001fe8c 	.word	0x0001fe8c
    46e0:	0001fcd0 	.word	0x0001fcd0
    46e4:	0001fd58 	.word	0x0001fd58
    46e8:	0001fd60 	.word	0x0001fd60
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    46ec:	69ba      	ldr	r2, [r7, #24]
    46ee:	f107 031c 	add.w	r3, r7, #28
    46f2:	4611      	mov	r1, r2
    46f4:	4618      	mov	r0, r3
    46f6:	f7ff fab5 	bl	3c64 <peek_result>
    46fa:	4603      	mov	r3, r0
    46fc:	2b00      	cmp	r3, #0
    46fe:	d002      	beq.n	4706 <mp_parse+0x3aa>
                            num_not_nil += 1;
    4700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4702:	3301      	adds	r3, #1
    4704:	67fb      	str	r3, [r7, #124]	; 0x7c
                        i += 1;
    4706:	69bb      	ldr	r3, [r7, #24]
    4708:	3301      	adds	r3, #1
    470a:	61bb      	str	r3, [r7, #24]
                for (size_t x = n; x > 0;) {
    470c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    470e:	2b00      	cmp	r3, #0
    4710:	d1c0      	bne.n	4694 <mp_parse+0x338>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    4712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4714:	2b01      	cmp	r3, #1
    4716:	d124      	bne.n	4762 <mp_parse+0x406>
    4718:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4720:	2b00      	cmp	r3, #0
    4722:	d01e      	beq.n	4762 <mp_parse+0x406>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    4724:	2300      	movs	r3, #0
    4726:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4728:	2300      	movs	r3, #0
    472a:	673b      	str	r3, [r7, #112]	; 0x70
    472c:	e00d      	b.n	474a <mp_parse+0x3ee>
                        mp_parse_node_t pn2 = pop_result(&parser);
    472e:	f107 031c 	add.w	r3, r7, #28
    4732:	4618      	mov	r0, r3
    4734:	f7ff fa70 	bl	3c18 <pop_result>
    4738:	64b8      	str	r0, [r7, #72]	; 0x48
                        if (pn2 != MP_PARSE_NODE_NULL) {
    473a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    473c:	2b00      	cmp	r3, #0
    473e:	d001      	beq.n	4744 <mp_parse+0x3e8>
                            pn = pn2;
    4740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4742:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4746:	3301      	adds	r3, #1
    4748:	673b      	str	r3, [r7, #112]	; 0x70
    474a:	69bb      	ldr	r3, [r7, #24]
    474c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    474e:	429a      	cmp	r2, r3
    4750:	d3ed      	bcc.n	472e <mp_parse+0x3d2>
                    push_result_node(&parser, pn);
    4752:	f107 031c 	add.w	r3, r7, #28
    4756:	6f79      	ldr	r1, [r7, #116]	; 0x74
    4758:	4618      	mov	r0, r3
    475a:	f7ff faab 	bl	3cb4 <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    475e:	bf00      	nop
                break;
    4760:	e0d4      	b.n	490c <mp_parse+0x5b0>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    4762:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
    4766:	2b00      	cmp	r3, #0
    4768:	da08      	bge.n	477c <mp_parse+0x420>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    476a:	f107 031c 	add.w	r3, r7, #28
    476e:	2100      	movs	r1, #0
    4770:	4618      	mov	r0, r3
    4772:	f7ff fa9f 	bl	3cb4 <push_result_node>
                        i += 1;
    4776:	69bb      	ldr	r3, [r7, #24]
    4778:	3301      	adds	r3, #1
    477a:	61bb      	str	r3, [r7, #24]
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    477c:	6979      	ldr	r1, [r7, #20]
    477e:	69bb      	ldr	r3, [r7, #24]
    4780:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4784:	f107 001c 	add.w	r0, r7, #28
    4788:	f7ff fd84 	bl	4294 <push_result_rule>
                break;
    478c:	e0be      	b.n	490c <mp_parse+0x5b0>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    478e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4792:	f003 0330 	and.w	r3, r3, #48	; 0x30
    4796:	2b30      	cmp	r3, #48	; 0x30
    4798:	d006      	beq.n	47a8 <mp_parse+0x44c>
    479a:	4b90      	ldr	r3, [pc, #576]	; (49dc <mp_parse+0x680>)
    479c:	4a90      	ldr	r2, [pc, #576]	; (49e0 <mp_parse+0x684>)
    479e:	f240 410a 	movw	r1, #1034	; 0x40a
    47a2:	4890      	ldr	r0, [pc, #576]	; (49e4 <mp_parse+0x688>)
    47a4:	f016 fe6c 	bl	1b480 <__assert_func>
                if (backtrack) {
    47a8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    47ac:	2b00      	cmp	r3, #0
    47ae:	d025      	beq.n	47fc <mp_parse+0x4a0>
                    had_trailing_sep = false;
    47b0:	2300      	movs	r3, #0
    47b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    if (n == 2) {
    47b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47b8:	2b02      	cmp	r3, #2
    47ba:	d107      	bne.n	47cc <mp_parse+0x470>
                        if (i == 1) {
    47bc:	69bb      	ldr	r3, [r7, #24]
    47be:	2b01      	cmp	r3, #1
    47c0:	d100      	bne.n	47c4 <mp_parse+0x468>
                            goto next_rule;
    47c2:	e60b      	b.n	43dc <mp_parse+0x80>
                            backtrack = false;
    47c4:	2300      	movs	r3, #0
    47c6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47ca:	e068      	b.n	489e <mp_parse+0x542>
                        if (i == 1) {
    47cc:	69bb      	ldr	r3, [r7, #24]
    47ce:	2b01      	cmp	r3, #1
    47d0:	d100      	bne.n	47d4 <mp_parse+0x478>
                            goto next_rule;
    47d2:	e603      	b.n	43dc <mp_parse+0x80>
                        } else if ((i & 1) == 1) {
    47d4:	69bb      	ldr	r3, [r7, #24]
    47d6:	f003 0301 	and.w	r3, r3, #1
    47da:	2b00      	cmp	r3, #0
    47dc:	d00a      	beq.n	47f4 <mp_parse+0x498>
                            if (n == 3) {
    47de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47e0:	2b03      	cmp	r3, #3
    47e2:	f040 80b1 	bne.w	4948 <mp_parse+0x5ec>
                                had_trailing_sep = true;
    47e6:	2301      	movs	r3, #1
    47e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                backtrack = false;
    47ec:	2300      	movs	r3, #0
    47ee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47f2:	e054      	b.n	489e <mp_parse+0x542>
                            backtrack = false;
    47f4:	2300      	movs	r3, #0
    47f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47fa:	e050      	b.n	489e <mp_parse+0x542>
                        size_t arg = rule_arg[i & 1 & n];
    47fc:	69ba      	ldr	r2, [r7, #24]
    47fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4800:	4013      	ands	r3, r2
    4802:	f003 0301 	and.w	r3, r3, #1
    4806:	005b      	lsls	r3, r3, #1
    4808:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    480a:	4413      	add	r3, r2
    480c:	881b      	ldrh	r3, [r3, #0]
    480e:	647b      	str	r3, [r7, #68]	; 0x44
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4812:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    481a:	d123      	bne.n	4864 <mp_parse+0x508>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    481c:	68bb      	ldr	r3, [r7, #8]
    481e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4822:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4826:	429a      	cmp	r2, r3
    4828:	d115      	bne.n	4856 <mp_parse+0x4fa>
                                if (i & 1 & n) {
    482a:	69ba      	ldr	r2, [r7, #24]
    482c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    482e:	4013      	ands	r3, r2
    4830:	f003 0301 	and.w	r3, r3, #1
    4834:	2b00      	cmp	r3, #0
    4836:	d107      	bne.n	4848 <mp_parse+0x4ec>
                                    push_result_token(&parser, rule_id);
    4838:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    483c:	f107 031c 	add.w	r3, r7, #28
    4840:	4611      	mov	r1, r2
    4842:	4618      	mov	r0, r3
    4844:	f7ff fa8e 	bl	3d64 <push_result_token>
                                mp_lexer_to_next(lex);
    4848:	68b8      	ldr	r0, [r7, #8]
    484a:	f7fe fc50 	bl	30ee <mp_lexer_to_next>
                                i += 1;
    484e:	69bb      	ldr	r3, [r7, #24]
    4850:	3301      	adds	r3, #1
    4852:	61bb      	str	r3, [r7, #24]
    4854:	e7d2      	b.n	47fc <mp_parse+0x4a0>
                                i += 1;
    4856:	69bb      	ldr	r3, [r7, #24]
    4858:	3301      	adds	r3, #1
    485a:	61bb      	str	r3, [r7, #24]
                                backtrack = true;
    485c:	2301      	movs	r3, #1
    485e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto list_backtrack;
    4862:	e7a5      	b.n	47b0 <mp_parse+0x454>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    4864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4866:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    486a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    486e:	d006      	beq.n	487e <mp_parse+0x522>
    4870:	4b5d      	ldr	r3, [pc, #372]	; (49e8 <mp_parse+0x68c>)
    4872:	4a5b      	ldr	r2, [pc, #364]	; (49e0 <mp_parse+0x684>)
    4874:	f240 4142 	movw	r1, #1090	; 0x442
    4878:	485a      	ldr	r0, [pc, #360]	; (49e4 <mp_parse+0x688>)
    487a:	f016 fe01 	bl	1b480 <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    487e:	6979      	ldr	r1, [r7, #20]
    4880:	69bb      	ldr	r3, [r7, #24]
    4882:	3301      	adds	r3, #1
    4884:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4888:	f107 001c 	add.w	r0, r7, #28
    488c:	f7ff f86d 	bl	396a <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    4890:	f107 031c 	add.w	r3, r7, #28
    4894:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4896:	4618      	mov	r0, r3
    4898:	f7ff f8a5 	bl	39e6 <push_rule_from_arg>
                            goto next_rule;
    489c:	e59e      	b.n	43dc <mp_parse+0x80>
                assert(i >= 1);
    489e:	69bb      	ldr	r3, [r7, #24]
    48a0:	2b00      	cmp	r3, #0
    48a2:	d106      	bne.n	48b2 <mp_parse+0x556>
    48a4:	4b51      	ldr	r3, [pc, #324]	; (49ec <mp_parse+0x690>)
    48a6:	4a4e      	ldr	r2, [pc, #312]	; (49e0 <mp_parse+0x684>)
    48a8:	f240 4149 	movw	r1, #1097	; 0x449
    48ac:	484d      	ldr	r0, [pc, #308]	; (49e4 <mp_parse+0x688>)
    48ae:	f016 fde7 	bl	1b480 <__assert_func>
                i -= 1;
    48b2:	69bb      	ldr	r3, [r7, #24]
    48b4:	3b01      	subs	r3, #1
    48b6:	61bb      	str	r3, [r7, #24]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    48b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    48ba:	f003 0301 	and.w	r3, r3, #1
    48be:	2b00      	cmp	r3, #0
    48c0:	d00b      	beq.n	48da <mp_parse+0x57e>
    48c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    48c4:	3302      	adds	r3, #2
    48c6:	881b      	ldrh	r3, [r3, #0]
    48c8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    48cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    48d0:	d103      	bne.n	48da <mp_parse+0x57e>
                    i = (i + 1) / 2;
    48d2:	69bb      	ldr	r3, [r7, #24]
    48d4:	3301      	adds	r3, #1
    48d6:	085b      	lsrs	r3, r3, #1
    48d8:	61bb      	str	r3, [r7, #24]
                if (i == 1) {
    48da:	69bb      	ldr	r3, [r7, #24]
    48dc:	2b01      	cmp	r3, #1
    48de:	d10c      	bne.n	48fa <mp_parse+0x59e>
                    if (had_trailing_sep) {
    48e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    48e4:	2b00      	cmp	r3, #0
    48e6:	d010      	beq.n	490a <mp_parse+0x5ae>
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    48e8:	6979      	ldr	r1, [r7, #20]
    48ea:	69bb      	ldr	r3, [r7, #24]
    48ec:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48f0:	f107 001c 	add.w	r0, r7, #28
    48f4:	f7ff fcce 	bl	4294 <push_result_rule>
                break;
    48f8:	e007      	b.n	490a <mp_parse+0x5ae>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    48fa:	6979      	ldr	r1, [r7, #20]
    48fc:	69bb      	ldr	r3, [r7, #24]
    48fe:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4902:	f107 001c 	add.w	r0, r7, #28
    4906:	f7ff fcc5 	bl	4294 <push_result_rule>
                break;
    490a:	bf00      	nop
    for (;;) {
    490c:	e566      	b.n	43dc <mp_parse+0x80>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    490e:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4912:	685b      	ldr	r3, [r3, #4]
    4914:	3308      	adds	r3, #8
    4916:	2200      	movs	r2, #0
    4918:	4619      	mov	r1, r3
    491a:	f7fb fd4a 	bl	3b2 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4922:	6852      	ldr	r2, [r2, #4]
    4924:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    4926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    492a:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    492e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    4930:	68bb      	ldr	r3, [r7, #8]
    4932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (
    4934:	2b00      	cmp	r3, #0
    4936:	d108      	bne.n	494a <mp_parse+0x5ee>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    4938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    493a:	2b00      	cmp	r3, #0
    493c:	d129      	bne.n	4992 <mp_parse+0x636>
    493e:	e004      	b.n	494a <mp_parse+0x5ee>
                            goto syntax_error;
    4940:	bf00      	nop
    4942:	e002      	b.n	494a <mp_parse+0x5ee>
                                goto syntax_error;
    4944:	bf00      	nop
    4946:	e000      	b.n	494a <mp_parse+0x5ee>
                                goto syntax_error;
    4948:	bf00      	nop
        ) {
    syntax_error:;
        mp_obj_t exc;
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    494a:	68bb      	ldr	r3, [r7, #8]
    494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    494e:	2b05      	cmp	r3, #5
    4950:	d105      	bne.n	495e <mp_parse+0x602>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4952:	4927      	ldr	r1, [pc, #156]	; (49f0 <mp_parse+0x694>)
    4954:	4827      	ldr	r0, [pc, #156]	; (49f4 <mp_parse+0x698>)
    4956:	f00a fd31 	bl	f3bc <mp_obj_new_exception_msg>
    495a:	66b8      	str	r0, [r7, #104]	; 0x68
    495c:	e00e      	b.n	497c <mp_parse+0x620>
                "unexpected indent");
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    495e:	68bb      	ldr	r3, [r7, #8]
    4960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4962:	2b02      	cmp	r3, #2
    4964:	d105      	bne.n	4972 <mp_parse+0x616>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4966:	4924      	ldr	r1, [pc, #144]	; (49f8 <mp_parse+0x69c>)
    4968:	4822      	ldr	r0, [pc, #136]	; (49f4 <mp_parse+0x698>)
    496a:	f00a fd27 	bl	f3bc <mp_obj_new_exception_msg>
    496e:	66b8      	str	r0, [r7, #104]	; 0x68
    4970:	e004      	b.n	497c <mp_parse+0x620>
                "unindent doesn't match any outer indent level");
        } else {
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    4972:	4922      	ldr	r1, [pc, #136]	; (49fc <mp_parse+0x6a0>)
    4974:	4822      	ldr	r0, [pc, #136]	; (4a00 <mp_parse+0x6a4>)
    4976:	f00a fd21 	bl	f3bc <mp_obj_new_exception_msg>
    497a:	66b8      	str	r0, [r7, #104]	; 0x68
                "invalid syntax");
        }
        // add traceback to give info about file name and location
        // we don't have a 'block' name, so just pass the NULL qstr to indicate this
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    497c:	68bb      	ldr	r3, [r7, #8]
    497e:	6819      	ldr	r1, [r3, #0]
    4980:	68bb      	ldr	r3, [r7, #8]
    4982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4984:	2300      	movs	r3, #0
    4986:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4988:	f00a fe94 	bl	f6b4 <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    498c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    498e:	f7fb fca7 	bl	2e0 <nlr_jump>
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    4992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4994:	2b01      	cmp	r3, #1
    4996:	d006      	beq.n	49a6 <mp_parse+0x64a>
    4998:	4b1a      	ldr	r3, [pc, #104]	; (4a04 <mp_parse+0x6a8>)
    499a:	4a11      	ldr	r2, [pc, #68]	; (49e0 <mp_parse+0x684>)
    499c:	f44f 6191 	mov.w	r1, #1160	; 0x488
    49a0:	4810      	ldr	r0, [pc, #64]	; (49e4 <mp_parse+0x688>)
    49a2:	f016 fd6d 	bl	1b480 <__assert_func>
    parser.tree.root = parser.result_stack[0];
    49a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	63bb      	str	r3, [r7, #56]	; 0x38

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    49ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ae:	4618      	mov	r0, r3
    49b0:	f7fb fd12 	bl	3d8 <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    49b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    49b6:	4618      	mov	r0, r3
    49b8:	f7fb fd0e 	bl	3d8 <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    49bc:	68b8      	ldr	r0, [r7, #8]
    49be:	f7fe feed 	bl	379c <mp_lexer_free>

    return parser.tree;
    49c2:	68fb      	ldr	r3, [r7, #12]
    49c4:	461a      	mov	r2, r3
    49c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
    49ca:	e893 0003 	ldmia.w	r3, {r0, r1}
    49ce:	e882 0003 	stmia.w	r2, {r0, r1}
}
    49d2:	68f8      	ldr	r0, [r7, #12]
    49d4:	3788      	adds	r7, #136	; 0x88
    49d6:	46bd      	mov	sp, r7
    49d8:	bd80      	pop	{r7, pc}
    49da:	bf00      	nop
    49dc:	0001fd68 	.word	0x0001fd68
    49e0:	0001fe8c 	.word	0x0001fe8c
    49e4:	0001fcd0 	.word	0x0001fcd0
    49e8:	0001fd9c 	.word	0x0001fd9c
    49ec:	0001fdc8 	.word	0x0001fdc8
    49f0:	0001fdd0 	.word	0x0001fdd0
    49f4:	0002236c 	.word	0x0002236c
    49f8:	0001fde4 	.word	0x0001fde4
    49fc:	0001fe14 	.word	0x0001fe14
    4a00:	00022330 	.word	0x00022330
    4a04:	0001fe24 	.word	0x0001fe24

00004a08 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    4a08:	b580      	push	{r7, lr}
    4a0a:	b084      	sub	sp, #16
    4a0c:	af00      	add	r7, sp, #0
    4a0e:	6078      	str	r0, [r7, #4]
    mp_parse_chunk_t *chunk = tree->chunk;
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	685b      	ldr	r3, [r3, #4]
    4a14:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4a16:	e007      	b.n	4a28 <mp_parse_tree_clear+0x20>
        mp_parse_chunk_t *next = chunk->union_.next;
    4a18:	68fb      	ldr	r3, [r7, #12]
    4a1a:	685b      	ldr	r3, [r3, #4]
    4a1c:	60bb      	str	r3, [r7, #8]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    4a1e:	68f8      	ldr	r0, [r7, #12]
    4a20:	f7fb fcda 	bl	3d8 <m_free>
        chunk = next;
    4a24:	68bb      	ldr	r3, [r7, #8]
    4a26:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4a28:	68fb      	ldr	r3, [r7, #12]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d1f4      	bne.n	4a18 <mp_parse_tree_clear+0x10>
    }
}
    4a2e:	bf00      	nop
    4a30:	3710      	adds	r7, #16
    4a32:	46bd      	mov	sp, r7
    4a34:	bd80      	pop	{r7, pc}
    4a36:	bf00      	nop

00004a38 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    4a38:	b580      	push	{r7, lr}
    4a3a:	b086      	sub	sp, #24
    4a3c:	af00      	add	r7, sp, #0
    4a3e:	60f8      	str	r0, [r7, #12]
    4a40:	60b9      	str	r1, [r7, #8]
    4a42:	607a      	str	r2, [r7, #4]
    4a44:	603b      	str	r3, [r7, #0]
    scope_t *scope = m_new0(scope_t, 1);
    4a46:	2030      	movs	r0, #48	; 0x30
    4a48:	f7fb fc8d 	bl	366 <m_malloc0>
    4a4c:	6178      	str	r0, [r7, #20]
    scope->kind = kind;
    4a4e:	697b      	ldr	r3, [r7, #20]
    4a50:	68fa      	ldr	r2, [r7, #12]
    4a52:	601a      	str	r2, [r3, #0]
    scope->pn = pn;
    4a54:	697b      	ldr	r3, [r7, #20]
    4a56:	68ba      	ldr	r2, [r7, #8]
    4a58:	60da      	str	r2, [r3, #12]
    scope->source_file = source_file;
    4a5a:	687b      	ldr	r3, [r7, #4]
    4a5c:	b29a      	uxth	r2, r3
    4a5e:	697b      	ldr	r3, [r7, #20]
    4a60:	829a      	strh	r2, [r3, #20]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    4a62:	68fb      	ldr	r3, [r7, #12]
    4a64:	2b07      	cmp	r3, #7
    4a66:	d002      	beq.n	4a6e <scope_new+0x36>
    4a68:	68fb      	ldr	r3, [r7, #12]
    4a6a:	2b01      	cmp	r3, #1
    4a6c:	d114      	bne.n	4a98 <scope_new+0x60>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4a6e:	68bb      	ldr	r3, [r7, #8]
    4a70:	2b00      	cmp	r3, #0
    4a72:	d004      	beq.n	4a7e <scope_new+0x46>
    4a74:	68bb      	ldr	r3, [r7, #8]
    4a76:	f003 0303 	and.w	r3, r3, #3
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	d005      	beq.n	4a8a <scope_new+0x52>
    4a7e:	4b17      	ldr	r3, [pc, #92]	; (4adc <scope_new+0xa4>)
    4a80:	4a17      	ldr	r2, [pc, #92]	; (4ae0 <scope_new+0xa8>)
    4a82:	2131      	movs	r1, #49	; 0x31
    4a84:	4817      	ldr	r0, [pc, #92]	; (4ae4 <scope_new+0xac>)
    4a86:	f016 fcfb 	bl	1b480 <__assert_func>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4a8a:	68bb      	ldr	r3, [r7, #8]
    4a8c:	689b      	ldr	r3, [r3, #8]
    4a8e:	091b      	lsrs	r3, r3, #4
    4a90:	b29a      	uxth	r2, r3
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	82da      	strh	r2, [r3, #22]
    4a96:	e006      	b.n	4aa6 <scope_new+0x6e>
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4a98:	4a13      	ldr	r2, [pc, #76]	; (4ae8 <scope_new+0xb0>)
    4a9a:	68fb      	ldr	r3, [r7, #12]
    4a9c:	4413      	add	r3, r2
    4a9e:	781b      	ldrb	r3, [r3, #0]
    4aa0:	b29a      	uxth	r2, r3
    4aa2:	697b      	ldr	r3, [r7, #20]
    4aa4:	82da      	strh	r2, [r3, #22]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4aa6:	f006 fb0b 	bl	b0c0 <mp_emit_glue_new_raw_code>
    4aaa:	4602      	mov	r2, r0
    4aac:	697b      	ldr	r3, [r7, #20]
    4aae:	611a      	str	r2, [r3, #16]
    scope->emit_options = emit_options;
    4ab0:	683b      	ldr	r3, [r7, #0]
    4ab2:	b29a      	uxth	r2, r3
    4ab4:	697b      	ldr	r3, [r7, #20]
    4ab6:	835a      	strh	r2, [r3, #26]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4ab8:	697b      	ldr	r3, [r7, #20]
    4aba:	2204      	movs	r2, #4
    4abc:	851a      	strh	r2, [r3, #40]	; 0x28
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4abe:	697b      	ldr	r3, [r7, #20]
    4ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4ac2:	00db      	lsls	r3, r3, #3
    4ac4:	4618      	mov	r0, r3
    4ac6:	f7fb fc29 	bl	31c <m_malloc>
    4aca:	4602      	mov	r2, r0
    4acc:	697b      	ldr	r3, [r7, #20]
    4ace:	62da      	str	r2, [r3, #44]	; 0x2c

    return scope;
    4ad0:	697b      	ldr	r3, [r7, #20]
}
    4ad2:	4618      	mov	r0, r3
    4ad4:	3718      	adds	r7, #24
    4ad6:	46bd      	mov	sp, r7
    4ad8:	bd80      	pop	{r7, pc}
    4ada:	bf00      	nop
    4adc:	0001fea0 	.word	0x0001fea0
    4ae0:	0001ff3c 	.word	0x0001ff3c
    4ae4:	0001febc 	.word	0x0001febc
    4ae8:	0001fe98 	.word	0x0001fe98

00004aec <scope_free>:

void scope_free(scope_t *scope) {
    4aec:	b580      	push	{r7, lr}
    4aee:	b082      	sub	sp, #8
    4af0:	af00      	add	r7, sp, #0
    4af2:	6078      	str	r0, [r7, #4]
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4af4:	687b      	ldr	r3, [r7, #4]
    4af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4af8:	4618      	mov	r0, r3
    4afa:	f7fb fc6d 	bl	3d8 <m_free>
    m_del(scope_t, scope, 1);
    4afe:	6878      	ldr	r0, [r7, #4]
    4b00:	f7fb fc6a 	bl	3d8 <m_free>
}
    4b04:	bf00      	nop
    4b06:	3708      	adds	r7, #8
    4b08:	46bd      	mov	sp, r7
    4b0a:	bd80      	pop	{r7, pc}

00004b0c <scope_find_or_add_id>:

id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, scope_kind_t kind) {
    4b0c:	b580      	push	{r7, lr}
    4b0e:	b086      	sub	sp, #24
    4b10:	af00      	add	r7, sp, #0
    4b12:	60f8      	str	r0, [r7, #12]
    4b14:	60b9      	str	r1, [r7, #8]
    4b16:	607a      	str	r2, [r7, #4]
    id_info_t *id_info = scope_find(scope, qst);
    4b18:	68b9      	ldr	r1, [r7, #8]
    4b1a:	68f8      	ldr	r0, [r7, #12]
    4b1c:	f000 f83c 	bl	4b98 <scope_find>
    4b20:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    4b22:	697b      	ldr	r3, [r7, #20]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d001      	beq.n	4b2c <scope_find_or_add_id+0x20>
        return id_info;
    4b28:	697b      	ldr	r3, [r7, #20]
    4b2a:	e031      	b.n	4b90 <scope_find_or_add_id+0x84>
    }

    // make sure we have enough memory
    if (scope->id_info_len >= scope->id_info_alloc) {
    4b2c:	68fb      	ldr	r3, [r7, #12]
    4b2e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    4b30:	68fb      	ldr	r3, [r7, #12]
    4b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b34:	429a      	cmp	r2, r3
    4b36:	d312      	bcc.n	4b5e <scope_find_or_add_id+0x52>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4b38:	68fb      	ldr	r3, [r7, #12]
    4b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b3c:	68fb      	ldr	r3, [r7, #12]
    4b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b40:	3306      	adds	r3, #6
    4b42:	00db      	lsls	r3, r3, #3
    4b44:	4619      	mov	r1, r3
    4b46:	4610      	mov	r0, r2
    4b48:	f7fb fc1a 	bl	380 <m_realloc>
    4b4c:	4602      	mov	r2, r0
    4b4e:	68fb      	ldr	r3, [r7, #12]
    4b50:	62da      	str	r2, [r3, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4b52:	68fb      	ldr	r3, [r7, #12]
    4b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b56:	3306      	adds	r3, #6
    4b58:	b29a      	uxth	r2, r3
    4b5a:	68fb      	ldr	r3, [r7, #12]
    4b5c:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    // add new id to end of array of all ids; this seems to match CPython
    // important thing is that function arguments are first, but that is
    // handled by the compiler because it adds arguments before compiling the body
    id_info = &scope->id_info[scope->id_info_len++];
    4b5e:	68fb      	ldr	r3, [r7, #12]
    4b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b62:	68fb      	ldr	r3, [r7, #12]
    4b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4b66:	1c59      	adds	r1, r3, #1
    4b68:	b288      	uxth	r0, r1
    4b6a:	68f9      	ldr	r1, [r7, #12]
    4b6c:	8548      	strh	r0, [r1, #42]	; 0x2a
    4b6e:	00db      	lsls	r3, r3, #3
    4b70:	4413      	add	r3, r2
    4b72:	617b      	str	r3, [r7, #20]

    id_info->kind = kind;
    4b74:	687b      	ldr	r3, [r7, #4]
    4b76:	b2da      	uxtb	r2, r3
    4b78:	697b      	ldr	r3, [r7, #20]
    4b7a:	701a      	strb	r2, [r3, #0]
    id_info->flags = 0;
    4b7c:	697b      	ldr	r3, [r7, #20]
    4b7e:	2200      	movs	r2, #0
    4b80:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4b82:	697b      	ldr	r3, [r7, #20]
    4b84:	2200      	movs	r2, #0
    4b86:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4b88:	697b      	ldr	r3, [r7, #20]
    4b8a:	68ba      	ldr	r2, [r7, #8]
    4b8c:	605a      	str	r2, [r3, #4]
    return id_info;
    4b8e:	697b      	ldr	r3, [r7, #20]
}
    4b90:	4618      	mov	r0, r3
    4b92:	3718      	adds	r7, #24
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}

00004b98 <scope_find>:

id_info_t *scope_find(scope_t *scope, qstr qst) {
    4b98:	b480      	push	{r7}
    4b9a:	b085      	sub	sp, #20
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
    4ba0:	6039      	str	r1, [r7, #0]
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4ba2:	2300      	movs	r3, #0
    4ba4:	60fb      	str	r3, [r7, #12]
    4ba6:	e011      	b.n	4bcc <scope_find+0x34>
        if (scope->id_info[i].qst == qst) {
    4ba8:	687b      	ldr	r3, [r7, #4]
    4baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bac:	68fb      	ldr	r3, [r7, #12]
    4bae:	00db      	lsls	r3, r3, #3
    4bb0:	4413      	add	r3, r2
    4bb2:	685a      	ldr	r2, [r3, #4]
    4bb4:	683b      	ldr	r3, [r7, #0]
    4bb6:	429a      	cmp	r2, r3
    4bb8:	d105      	bne.n	4bc6 <scope_find+0x2e>
            return &scope->id_info[i];
    4bba:	687b      	ldr	r3, [r7, #4]
    4bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bbe:	68fb      	ldr	r3, [r7, #12]
    4bc0:	00db      	lsls	r3, r3, #3
    4bc2:	4413      	add	r3, r2
    4bc4:	e009      	b.n	4bda <scope_find+0x42>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4bc6:	68fb      	ldr	r3, [r7, #12]
    4bc8:	3301      	adds	r3, #1
    4bca:	60fb      	str	r3, [r7, #12]
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4bd0:	461a      	mov	r2, r3
    4bd2:	68fb      	ldr	r3, [r7, #12]
    4bd4:	429a      	cmp	r2, r3
    4bd6:	d8e7      	bhi.n	4ba8 <scope_find+0x10>
        }
    }
    return NULL;
    4bd8:	2300      	movs	r3, #0
}
    4bda:	4618      	mov	r0, r3
    4bdc:	3714      	adds	r7, #20
    4bde:	46bd      	mov	sp, r7
    4be0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be4:	4770      	bx	lr

00004be6 <scope_find_global>:

id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4be6:	b580      	push	{r7, lr}
    4be8:	b082      	sub	sp, #8
    4bea:	af00      	add	r7, sp, #0
    4bec:	6078      	str	r0, [r7, #4]
    4bee:	6039      	str	r1, [r7, #0]
    while (scope->parent != NULL) {
    4bf0:	e002      	b.n	4bf8 <scope_find_global+0x12>
        scope = scope->parent;
    4bf2:	687b      	ldr	r3, [r7, #4]
    4bf4:	685b      	ldr	r3, [r3, #4]
    4bf6:	607b      	str	r3, [r7, #4]
    while (scope->parent != NULL) {
    4bf8:	687b      	ldr	r3, [r7, #4]
    4bfa:	685b      	ldr	r3, [r3, #4]
    4bfc:	2b00      	cmp	r3, #0
    4bfe:	d1f8      	bne.n	4bf2 <scope_find_global+0xc>
    }
    return scope_find(scope, qst);
    4c00:	6839      	ldr	r1, [r7, #0]
    4c02:	6878      	ldr	r0, [r7, #4]
    4c04:	f7ff ffc8 	bl	4b98 <scope_find>
    4c08:	4603      	mov	r3, r0
}
    4c0a:	4618      	mov	r0, r3
    4c0c:	3708      	adds	r7, #8
    4c0e:	46bd      	mov	sp, r7
    4c10:	bd80      	pop	{r7, pc}

00004c12 <scope_close_over_in_parents>:

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4c12:	b580      	push	{r7, lr}
    4c14:	b084      	sub	sp, #16
    4c16:	af00      	add	r7, sp, #0
    4c18:	6078      	str	r0, [r7, #4]
    4c1a:	6039      	str	r1, [r7, #0]
    assert(scope->parent != NULL); // we should have at least 1 parent
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	685b      	ldr	r3, [r3, #4]
    4c20:	2b00      	cmp	r3, #0
    4c22:	d105      	bne.n	4c30 <scope_close_over_in_parents+0x1e>
    4c24:	4b1f      	ldr	r3, [pc, #124]	; (4ca4 <scope_close_over_in_parents+0x92>)
    4c26:	4a20      	ldr	r2, [pc, #128]	; (4ca8 <scope_close_over_in_parents+0x96>)
    4c28:	216c      	movs	r1, #108	; 0x6c
    4c2a:	4820      	ldr	r0, [pc, #128]	; (4cac <scope_close_over_in_parents+0x9a>)
    4c2c:	f016 fc28 	bl	1b480 <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4c30:	687b      	ldr	r3, [r7, #4]
    4c32:	685b      	ldr	r3, [r3, #4]
    4c34:	60fb      	str	r3, [r7, #12]
        assert(s->parent != NULL); // we should not get to the outer scope
    4c36:	68fb      	ldr	r3, [r7, #12]
    4c38:	685b      	ldr	r3, [r3, #4]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d105      	bne.n	4c4a <scope_close_over_in_parents+0x38>
    4c3e:	4b1c      	ldr	r3, [pc, #112]	; (4cb0 <scope_close_over_in_parents+0x9e>)
    4c40:	4a19      	ldr	r2, [pc, #100]	; (4ca8 <scope_close_over_in_parents+0x96>)
    4c42:	216e      	movs	r1, #110	; 0x6e
    4c44:	4819      	ldr	r0, [pc, #100]	; (4cac <scope_close_over_in_parents+0x9a>)
    4c46:	f016 fc1b 	bl	1b480 <__assert_func>
        id_info_t *id = scope_find_or_add_id(s, qst, ID_INFO_KIND_UNDECIDED);
    4c4a:	2200      	movs	r2, #0
    4c4c:	6839      	ldr	r1, [r7, #0]
    4c4e:	68f8      	ldr	r0, [r7, #12]
    4c50:	f7ff ff5c 	bl	4b0c <scope_find_or_add_id>
    4c54:	60b8      	str	r0, [r7, #8]
        if (id->kind == ID_INFO_KIND_UNDECIDED) {
    4c56:	68bb      	ldr	r3, [r7, #8]
    4c58:	781b      	ldrb	r3, [r3, #0]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d103      	bne.n	4c66 <scope_close_over_in_parents+0x54>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4c5e:	68bb      	ldr	r3, [r7, #8]
    4c60:	2205      	movs	r2, #5
    4c62:	701a      	strb	r2, [r3, #0]
    4c64:	e015      	b.n	4c92 <scope_close_over_in_parents+0x80>
        } else {
            // variable is declared in this scope, so finish
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4c66:	68bb      	ldr	r3, [r7, #8]
    4c68:	781b      	ldrb	r3, [r3, #0]
    4c6a:	2b03      	cmp	r3, #3
    4c6c:	d103      	bne.n	4c76 <scope_close_over_in_parents+0x64>
                // variable local to this scope, close it over
                id->kind = ID_INFO_KIND_CELL;
    4c6e:	68bb      	ldr	r3, [r7, #8]
    4c70:	2204      	movs	r2, #4
    4c72:	701a      	strb	r2, [r3, #0]
            } else {
                // ID_INFO_KIND_FREE: variable already closed over in a parent scope
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
            }
            return;
    4c74:	e011      	b.n	4c9a <scope_close_over_in_parents+0x88>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4c76:	68bb      	ldr	r3, [r7, #8]
    4c78:	781b      	ldrb	r3, [r3, #0]
    4c7a:	2b05      	cmp	r3, #5
    4c7c:	d00d      	beq.n	4c9a <scope_close_over_in_parents+0x88>
    4c7e:	68bb      	ldr	r3, [r7, #8]
    4c80:	781b      	ldrb	r3, [r3, #0]
    4c82:	2b04      	cmp	r3, #4
    4c84:	d009      	beq.n	4c9a <scope_close_over_in_parents+0x88>
    4c86:	4b0b      	ldr	r3, [pc, #44]	; (4cb4 <scope_close_over_in_parents+0xa2>)
    4c88:	4a07      	ldr	r2, [pc, #28]	; (4ca8 <scope_close_over_in_parents+0x96>)
    4c8a:	217b      	movs	r1, #123	; 0x7b
    4c8c:	4807      	ldr	r0, [pc, #28]	; (4cac <scope_close_over_in_parents+0x9a>)
    4c8e:	f016 fbf7 	bl	1b480 <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4c92:	68fb      	ldr	r3, [r7, #12]
    4c94:	685b      	ldr	r3, [r3, #4]
    4c96:	60fb      	str	r3, [r7, #12]
    4c98:	e7cd      	b.n	4c36 <scope_close_over_in_parents+0x24>
            return;
    4c9a:	bf00      	nop
        }
    }
}
    4c9c:	3710      	adds	r7, #16
    4c9e:	46bd      	mov	sp, r7
    4ca0:	bd80      	pop	{r7, pc}
    4ca2:	bf00      	nop
    4ca4:	0001fed0 	.word	0x0001fed0
    4ca8:	0001ff48 	.word	0x0001ff48
    4cac:	0001febc 	.word	0x0001febc
    4cb0:	0001fee8 	.word	0x0001fee8
    4cb4:	0001fefc 	.word	0x0001fefc

00004cb8 <scope_check_to_close_over>:

void scope_check_to_close_over(scope_t *scope, id_info_t *id) {
    4cb8:	b580      	push	{r7, lr}
    4cba:	b084      	sub	sp, #16
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	6078      	str	r0, [r7, #4]
    4cc0:	6039      	str	r1, [r7, #0]
    if (scope->parent != NULL) {
    4cc2:	687b      	ldr	r3, [r7, #4]
    4cc4:	685b      	ldr	r3, [r3, #4]
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d02c      	beq.n	4d24 <scope_check_to_close_over+0x6c>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4cca:	687b      	ldr	r3, [r7, #4]
    4ccc:	685b      	ldr	r3, [r3, #4]
    4cce:	60fb      	str	r3, [r7, #12]
    4cd0:	e022      	b.n	4d18 <scope_check_to_close_over+0x60>
            id_info_t *id2 = scope_find(s, id->qst);
    4cd2:	683b      	ldr	r3, [r7, #0]
    4cd4:	685b      	ldr	r3, [r3, #4]
    4cd6:	4619      	mov	r1, r3
    4cd8:	68f8      	ldr	r0, [r7, #12]
    4cda:	f7ff ff5d 	bl	4b98 <scope_find>
    4cde:	60b8      	str	r0, [r7, #8]
            if (id2 != NULL) {
    4ce0:	68bb      	ldr	r3, [r7, #8]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d015      	beq.n	4d12 <scope_check_to_close_over+0x5a>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4ce6:	68bb      	ldr	r3, [r7, #8]
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	2b03      	cmp	r3, #3
    4cec:	d007      	beq.n	4cfe <scope_check_to_close_over+0x46>
    4cee:	68bb      	ldr	r3, [r7, #8]
    4cf0:	781b      	ldrb	r3, [r3, #0]
    4cf2:	2b04      	cmp	r3, #4
    4cf4:	d003      	beq.n	4cfe <scope_check_to_close_over+0x46>
    4cf6:	68bb      	ldr	r3, [r7, #8]
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	2b05      	cmp	r3, #5
    4cfc:	d111      	bne.n	4d22 <scope_check_to_close_over+0x6a>
                    id->kind = ID_INFO_KIND_FREE;
    4cfe:	683b      	ldr	r3, [r7, #0]
    4d00:	2205      	movs	r2, #5
    4d02:	701a      	strb	r2, [r3, #0]
                    scope_close_over_in_parents(scope, id->qst);
    4d04:	683b      	ldr	r3, [r7, #0]
    4d06:	685b      	ldr	r3, [r3, #4]
    4d08:	4619      	mov	r1, r3
    4d0a:	6878      	ldr	r0, [r7, #4]
    4d0c:	f7ff ff81 	bl	4c12 <scope_close_over_in_parents>
                }
                break;
    4d10:	e007      	b.n	4d22 <scope_check_to_close_over+0x6a>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4d12:	68fb      	ldr	r3, [r7, #12]
    4d14:	685b      	ldr	r3, [r3, #4]
    4d16:	60fb      	str	r3, [r7, #12]
    4d18:	68fb      	ldr	r3, [r7, #12]
    4d1a:	685b      	ldr	r3, [r3, #4]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d1d8      	bne.n	4cd2 <scope_check_to_close_over+0x1a>
            }
        }
    }
}
    4d20:	e000      	b.n	4d24 <scope_check_to_close_over+0x6c>
                break;
    4d22:	bf00      	nop
}
    4d24:	bf00      	nop
    4d26:	3710      	adds	r7, #16
    4d28:	46bd      	mov	sp, r7
    4d2a:	bd80      	pop	{r7, pc}

00004d2c <mp_parse_node_new_small_int>:
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    4d2c:	b480      	push	{r7}
    4d2e:	b083      	sub	sp, #12
    4d30:	af00      	add	r7, sp, #0
    4d32:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	005b      	lsls	r3, r3, #1
    4d38:	f043 0301 	orr.w	r3, r3, #1
}
    4d3c:	4618      	mov	r0, r3
    4d3e:	370c      	adds	r7, #12
    4d40:	46bd      	mov	sp, r7
    4d42:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d46:	4770      	bx	lr

00004d48 <mp_emit_common_get_id_for_load>:
    void (*end_except_handler)(emit_t *emit);
} emit_method_table_t;

int mp_native_type_from_qstr(qstr qst);

static inline void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    4d48:	b580      	push	{r7, lr}
    4d4a:	b082      	sub	sp, #8
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
    4d50:	6039      	str	r1, [r7, #0]
    scope_find_or_add_id(scope, qst, ID_INFO_KIND_GLOBAL_IMPLICIT);
    4d52:	2201      	movs	r2, #1
    4d54:	6839      	ldr	r1, [r7, #0]
    4d56:	6878      	ldr	r0, [r7, #4]
    4d58:	f7ff fed8 	bl	4b0c <scope_find_or_add_id>
}
    4d5c:	bf00      	nop
    4d5e:	3708      	adds	r7, #8
    4d60:	46bd      	mov	sp, r7
    4d62:	bd80      	pop	{r7, pc}

00004d64 <mp_local_free>:

#if !MICROPY_ENABLE_PYSTACK

#define mp_local_alloc(n_bytes) alloca(n_bytes)

static inline void mp_local_free(void *ptr) {
    4d64:	b480      	push	{r7}
    4d66:	b083      	sub	sp, #12
    4d68:	af00      	add	r7, sp, #0
    4d6a:	6078      	str	r0, [r7, #4]
    (void)ptr;
}
    4d6c:	bf00      	nop
    4d6e:	370c      	adds	r7, #12
    4d70:	46bd      	mov	sp, r7
    4d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d76:	4770      	bx	lr

00004d78 <compile_error_set_line>:
    emit_inline_asm_t *emit_inline_asm;                                   // current emitter for inline asm
    const emit_inline_asm_method_table_t *emit_inline_asm_method_table;   // current emit method table for inline asm
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    4d78:	b480      	push	{r7}
    4d7a:	b083      	sub	sp, #12
    4d7c:	af00      	add	r7, sp, #0
    4d7e:	6078      	str	r0, [r7, #4]
    4d80:	6039      	str	r1, [r7, #0]
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	68db      	ldr	r3, [r3, #12]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d10b      	bne.n	4da2 <compile_error_set_line+0x2a>
    4d8a:	683b      	ldr	r3, [r7, #0]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d008      	beq.n	4da2 <compile_error_set_line+0x2a>
    4d90:	683b      	ldr	r3, [r7, #0]
    4d92:	f003 0303 	and.w	r3, r3, #3
    4d96:	2b00      	cmp	r3, #0
    4d98:	d103      	bne.n	4da2 <compile_error_set_line+0x2a>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    4d9a:	683b      	ldr	r3, [r7, #0]
    4d9c:	681a      	ldr	r2, [r3, #0]
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	60da      	str	r2, [r3, #12]
    }
}
    4da2:	bf00      	nop
    4da4:	370c      	adds	r7, #12
    4da6:	46bd      	mov	sp, r7
    4da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dac:	4770      	bx	lr

00004dae <compile_syntax_error>:

STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    4dae:	b580      	push	{r7, lr}
    4db0:	b084      	sub	sp, #16
    4db2:	af00      	add	r7, sp, #0
    4db4:	60f8      	str	r0, [r7, #12]
    4db6:	60b9      	str	r1, [r7, #8]
    4db8:	607a      	str	r2, [r7, #4]
    // only register the error if there has been no other error
    if (comp->compile_error == MP_OBJ_NULL) {
    4dba:	68fb      	ldr	r3, [r7, #12]
    4dbc:	689b      	ldr	r3, [r3, #8]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d10a      	bne.n	4dd8 <compile_syntax_error+0x2a>
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    4dc2:	6879      	ldr	r1, [r7, #4]
    4dc4:	4806      	ldr	r0, [pc, #24]	; (4de0 <compile_syntax_error+0x32>)
    4dc6:	f00a faf9 	bl	f3bc <mp_obj_new_exception_msg>
    4dca:	4602      	mov	r2, r0
    4dcc:	68fb      	ldr	r3, [r7, #12]
    4dce:	609a      	str	r2, [r3, #8]
        compile_error_set_line(comp, pn);
    4dd0:	68b9      	ldr	r1, [r7, #8]
    4dd2:	68f8      	ldr	r0, [r7, #12]
    4dd4:	f7ff ffd0 	bl	4d78 <compile_error_set_line>
    }
}
    4dd8:	bf00      	nop
    4dda:	3710      	adds	r7, #16
    4ddc:	46bd      	mov	sp, r7
    4dde:	bd80      	pop	{r7, pc}
    4de0:	00022330 	.word	0x00022330

00004de4 <comp_next_label>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    4de4:	b480      	push	{r7}
    4de6:	b083      	sub	sp, #12
    4de8:	af00      	add	r7, sp, #0
    4dea:	6078      	str	r0, [r7, #4]
    return comp->next_label++;
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	691b      	ldr	r3, [r3, #16]
    4df0:	1c59      	adds	r1, r3, #1
    4df2:	687a      	ldr	r2, [r7, #4]
    4df4:	6111      	str	r1, [r2, #16]
}
    4df6:	4618      	mov	r0, r3
    4df8:	370c      	adds	r7, #12
    4dfa:	46bd      	mov	sp, r7
    4dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e00:	4770      	bx	lr

00004e02 <compile_increase_except_level>:
}
#else
#define reserve_labels_for_native(comp, n)
#endif

STATIC void compile_increase_except_level(compiler_t *comp, uint label, int kind) {
    4e02:	b580      	push	{r7, lr}
    4e04:	b084      	sub	sp, #16
    4e06:	af00      	add	r7, sp, #0
    4e08:	60f8      	str	r0, [r7, #12]
    4e0a:	60b9      	str	r1, [r7, #8]
    4e0c:	607a      	str	r2, [r7, #4]
    EMIT_ARG(setup_block, label, kind);
    4e0e:	68fb      	ldr	r3, [r7, #12]
    4e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e12:	687a      	ldr	r2, [r7, #4]
    4e14:	68b9      	ldr	r1, [r7, #8]
    4e16:	4618      	mov	r0, r3
    4e18:	f005 fcd0 	bl	a7bc <mp_emit_bc_setup_block>
    comp->cur_except_level += 1;
    4e1c:	68fb      	ldr	r3, [r7, #12]
    4e1e:	8b9b      	ldrh	r3, [r3, #28]
    4e20:	3301      	adds	r3, #1
    4e22:	b29a      	uxth	r2, r3
    4e24:	68fb      	ldr	r3, [r7, #12]
    4e26:	839a      	strh	r2, [r3, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    4e28:	68fb      	ldr	r3, [r7, #12]
    4e2a:	8b9a      	ldrh	r2, [r3, #28]
    4e2c:	68fb      	ldr	r3, [r7, #12]
    4e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4e32:	429a      	cmp	r2, r3
    4e34:	d904      	bls.n	4e40 <compile_increase_except_level+0x3e>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    4e36:	68fb      	ldr	r3, [r7, #12]
    4e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e3a:	68fa      	ldr	r2, [r7, #12]
    4e3c:	8b92      	ldrh	r2, [r2, #28]
    4e3e:	84da      	strh	r2, [r3, #38]	; 0x26
    }
}
    4e40:	bf00      	nop
    4e42:	3710      	adds	r7, #16
    4e44:	46bd      	mov	sp, r7
    4e46:	bd80      	pop	{r7, pc}

00004e48 <compile_decrease_except_level>:

STATIC void compile_decrease_except_level(compiler_t *comp) {
    4e48:	b580      	push	{r7, lr}
    4e4a:	b082      	sub	sp, #8
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	6078      	str	r0, [r7, #4]
    assert(comp->cur_except_level > 0);
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	8b9b      	ldrh	r3, [r3, #28]
    4e54:	2b00      	cmp	r3, #0
    4e56:	d105      	bne.n	4e64 <compile_decrease_except_level+0x1c>
    4e58:	4b0a      	ldr	r3, [pc, #40]	; (4e84 <compile_decrease_except_level+0x3c>)
    4e5a:	4a0b      	ldr	r2, [pc, #44]	; (4e88 <compile_decrease_except_level+0x40>)
    4e5c:	21c0      	movs	r1, #192	; 0xc0
    4e5e:	480b      	ldr	r0, [pc, #44]	; (4e8c <compile_decrease_except_level+0x44>)
    4e60:	f016 fb0e 	bl	1b480 <__assert_func>
    comp->cur_except_level -= 1;
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	8b9b      	ldrh	r3, [r3, #28]
    4e68:	3b01      	subs	r3, #1
    4e6a:	b29a      	uxth	r2, r3
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	839a      	strh	r2, [r3, #28]
    EMIT(end_finally);
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e74:	4618      	mov	r0, r3
    4e76:	f005 fce1 	bl	a83c <mp_emit_bc_end_finally>
    reserve_labels_for_native(comp, 1);
}
    4e7a:	bf00      	nop
    4e7c:	3708      	adds	r7, #8
    4e7e:	46bd      	mov	sp, r7
    4e80:	bd80      	pop	{r7, pc}
    4e82:	bf00      	nop
    4e84:	0001ff64 	.word	0x0001ff64
    4e88:	00020aec 	.word	0x00020aec
    4e8c:	0001ff80 	.word	0x0001ff80

00004e90 <scope_new_and_link>:

STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    4e90:	b580      	push	{r7, lr}
    4e92:	b086      	sub	sp, #24
    4e94:	af00      	add	r7, sp, #0
    4e96:	60f8      	str	r0, [r7, #12]
    4e98:	60b9      	str	r1, [r7, #8]
    4e9a:	607a      	str	r2, [r7, #4]
    4e9c:	603b      	str	r3, [r7, #0]
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    4e9e:	68fb      	ldr	r3, [r7, #12]
    4ea0:	681a      	ldr	r2, [r3, #0]
    4ea2:	683b      	ldr	r3, [r7, #0]
    4ea4:	6879      	ldr	r1, [r7, #4]
    4ea6:	68b8      	ldr	r0, [r7, #8]
    4ea8:	f7ff fdc6 	bl	4a38 <scope_new>
    4eac:	6138      	str	r0, [r7, #16]
    scope->parent = comp->scope_cur;
    4eae:	68fb      	ldr	r3, [r7, #12]
    4eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4eb2:	693b      	ldr	r3, [r7, #16]
    4eb4:	605a      	str	r2, [r3, #4]
    scope->next = NULL;
    4eb6:	693b      	ldr	r3, [r7, #16]
    4eb8:	2200      	movs	r2, #0
    4eba:	609a      	str	r2, [r3, #8]
    if (comp->scope_head == NULL) {
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	6a1b      	ldr	r3, [r3, #32]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d103      	bne.n	4ecc <scope_new_and_link+0x3c>
        comp->scope_head = scope;
    4ec4:	68fb      	ldr	r3, [r7, #12]
    4ec6:	693a      	ldr	r2, [r7, #16]
    4ec8:	621a      	str	r2, [r3, #32]
    4eca:	e00d      	b.n	4ee8 <scope_new_and_link+0x58>
    } else {
        scope_t *s = comp->scope_head;
    4ecc:	68fb      	ldr	r3, [r7, #12]
    4ece:	6a1b      	ldr	r3, [r3, #32]
    4ed0:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4ed2:	e002      	b.n	4eda <scope_new_and_link+0x4a>
            s = s->next;
    4ed4:	697b      	ldr	r3, [r7, #20]
    4ed6:	689b      	ldr	r3, [r3, #8]
    4ed8:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4eda:	697b      	ldr	r3, [r7, #20]
    4edc:	689b      	ldr	r3, [r3, #8]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d1f8      	bne.n	4ed4 <scope_new_and_link+0x44>
        }
        s->next = scope;
    4ee2:	697b      	ldr	r3, [r7, #20]
    4ee4:	693a      	ldr	r2, [r7, #16]
    4ee6:	609a      	str	r2, [r3, #8]
    }
    return scope;
    4ee8:	693b      	ldr	r3, [r7, #16]
}
    4eea:	4618      	mov	r0, r3
    4eec:	3718      	adds	r7, #24
    4eee:	46bd      	mov	sp, r7
    4ef0:	bd80      	pop	{r7, pc}

00004ef2 <apply_to_single_or_list>:

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    4ef2:	b580      	push	{r7, lr}
    4ef4:	b088      	sub	sp, #32
    4ef6:	af00      	add	r7, sp, #0
    4ef8:	60f8      	str	r0, [r7, #12]
    4efa:	60b9      	str	r1, [r7, #8]
    4efc:	607a      	str	r2, [r7, #4]
    4efe:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4f00:	68bb      	ldr	r3, [r7, #8]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d024      	beq.n	4f50 <apply_to_single_or_list+0x5e>
    4f06:	68bb      	ldr	r3, [r7, #8]
    4f08:	f003 0303 	and.w	r3, r3, #3
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d11f      	bne.n	4f50 <apply_to_single_or_list+0x5e>
    4f10:	68bb      	ldr	r3, [r7, #8]
    4f12:	685b      	ldr	r3, [r3, #4]
    4f14:	b2da      	uxtb	r2, r3
    4f16:	687b      	ldr	r3, [r7, #4]
    4f18:	429a      	cmp	r2, r3
    4f1a:	d119      	bne.n	4f50 <apply_to_single_or_list+0x5e>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    4f1c:	68bb      	ldr	r3, [r7, #8]
    4f1e:	61bb      	str	r3, [r7, #24]
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4f20:	69bb      	ldr	r3, [r7, #24]
    4f22:	685b      	ldr	r3, [r3, #4]
    4f24:	0a1b      	lsrs	r3, r3, #8
    4f26:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < num_nodes; i++) {
    4f28:	2300      	movs	r3, #0
    4f2a:	61fb      	str	r3, [r7, #28]
    4f2c:	e00b      	b.n	4f46 <apply_to_single_or_list+0x54>
            f(comp, pns->nodes[i]);
    4f2e:	69bb      	ldr	r3, [r7, #24]
    4f30:	69fa      	ldr	r2, [r7, #28]
    4f32:	3202      	adds	r2, #2
    4f34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4f38:	683b      	ldr	r3, [r7, #0]
    4f3a:	4611      	mov	r1, r2
    4f3c:	68f8      	ldr	r0, [r7, #12]
    4f3e:	4798      	blx	r3
        for (int i = 0; i < num_nodes; i++) {
    4f40:	69fb      	ldr	r3, [r7, #28]
    4f42:	3301      	adds	r3, #1
    4f44:	61fb      	str	r3, [r7, #28]
    4f46:	69fa      	ldr	r2, [r7, #28]
    4f48:	697b      	ldr	r3, [r7, #20]
    4f4a:	429a      	cmp	r2, r3
    4f4c:	dbef      	blt.n	4f2e <apply_to_single_or_list+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4f4e:	e007      	b.n	4f60 <apply_to_single_or_list+0x6e>
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    4f50:	68bb      	ldr	r3, [r7, #8]
    4f52:	2b00      	cmp	r3, #0
    4f54:	d004      	beq.n	4f60 <apply_to_single_or_list+0x6e>
        f(comp, pn);
    4f56:	683b      	ldr	r3, [r7, #0]
    4f58:	68b9      	ldr	r1, [r7, #8]
    4f5a:	68f8      	ldr	r0, [r7, #12]
    4f5c:	4798      	blx	r3
    }
}
    4f5e:	e7ff      	b.n	4f60 <apply_to_single_or_list+0x6e>
    4f60:	bf00      	nop
    4f62:	3720      	adds	r7, #32
    4f64:	46bd      	mov	sp, r7
    4f66:	bd80      	pop	{r7, pc}

00004f68 <compile_generic_all_nodes>:

STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    4f68:	b580      	push	{r7, lr}
    4f6a:	b084      	sub	sp, #16
    4f6c:	af00      	add	r7, sp, #0
    4f6e:	6078      	str	r0, [r7, #4]
    4f70:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4f72:	683b      	ldr	r3, [r7, #0]
    4f74:	685b      	ldr	r3, [r3, #4]
    4f76:	0a1b      	lsrs	r3, r3, #8
    4f78:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < num_nodes; i++) {
    4f7a:	2300      	movs	r3, #0
    4f7c:	60fb      	str	r3, [r7, #12]
    4f7e:	e019      	b.n	4fb4 <compile_generic_all_nodes+0x4c>
        compile_node(comp, pns->nodes[i]);
    4f80:	683b      	ldr	r3, [r7, #0]
    4f82:	68fa      	ldr	r2, [r7, #12]
    4f84:	3202      	adds	r2, #2
    4f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f8a:	4619      	mov	r1, r3
    4f8c:	6878      	ldr	r0, [r7, #4]
    4f8e:	f003 fce8 	bl	8962 <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    4f92:	687b      	ldr	r3, [r7, #4]
    4f94:	689b      	ldr	r3, [r3, #8]
    4f96:	2b00      	cmp	r3, #0
    4f98:	d009      	beq.n	4fae <compile_generic_all_nodes+0x46>
            // add line info for the error in case it didn't have a line number
            compile_error_set_line(comp, pns->nodes[i]);
    4f9a:	683b      	ldr	r3, [r7, #0]
    4f9c:	68fa      	ldr	r2, [r7, #12]
    4f9e:	3202      	adds	r2, #2
    4fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4fa4:	4619      	mov	r1, r3
    4fa6:	6878      	ldr	r0, [r7, #4]
    4fa8:	f7ff fee6 	bl	4d78 <compile_error_set_line>
            return;
    4fac:	e006      	b.n	4fbc <compile_generic_all_nodes+0x54>
    for (int i = 0; i < num_nodes; i++) {
    4fae:	68fb      	ldr	r3, [r7, #12]
    4fb0:	3301      	adds	r3, #1
    4fb2:	60fb      	str	r3, [r7, #12]
    4fb4:	68fa      	ldr	r2, [r7, #12]
    4fb6:	68bb      	ldr	r3, [r7, #8]
    4fb8:	429a      	cmp	r2, r3
    4fba:	dbe1      	blt.n	4f80 <compile_generic_all_nodes+0x18>
        }
    }
}
    4fbc:	3710      	adds	r7, #16
    4fbe:	46bd      	mov	sp, r7
    4fc0:	bd80      	pop	{r7, pc}

00004fc2 <compile_load_id>:

STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    4fc2:	b580      	push	{r7, lr}
    4fc4:	b082      	sub	sp, #8
    4fc6:	af00      	add	r7, sp, #0
    4fc8:	6078      	str	r0, [r7, #4]
    4fca:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	795b      	ldrb	r3, [r3, #5]
    4fd0:	2b01      	cmp	r3, #1
    4fd2:	d106      	bne.n	4fe2 <compile_load_id+0x20>
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4fd8:	6839      	ldr	r1, [r7, #0]
    4fda:	4618      	mov	r0, r3
    4fdc:	f7ff feb4 	bl	4d48 <mp_emit_common_get_id_for_load>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->load_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4fe0:	e007      	b.n	4ff2 <compile_load_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    4fe2:	687b      	ldr	r3, [r7, #4]
    4fe4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4fea:	683b      	ldr	r3, [r7, #0]
    4fec:	4903      	ldr	r1, [pc, #12]	; (4ffc <compile_load_id+0x3a>)
    4fee:	f004 fbcf 	bl	9790 <mp_emit_common_id_op>
}
    4ff2:	bf00      	nop
    4ff4:	3708      	adds	r7, #8
    4ff6:	46bd      	mov	sp, r7
    4ff8:	bd80      	pop	{r7, pc}
    4ffa:	bf00      	nop
    4ffc:	00021000 	.word	0x00021000

00005000 <compile_store_id>:

STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    5000:	b580      	push	{r7, lr}
    5002:	b082      	sub	sp, #8
    5004:	af00      	add	r7, sp, #0
    5006:	6078      	str	r0, [r7, #4]
    5008:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    500a:	687b      	ldr	r3, [r7, #4]
    500c:	795b      	ldrb	r3, [r3, #5]
    500e:	2b01      	cmp	r3, #1
    5010:	d106      	bne.n	5020 <compile_store_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    5012:	687b      	ldr	r3, [r7, #4]
    5014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5016:	6839      	ldr	r1, [r7, #0]
    5018:	4618      	mov	r0, r3
    501a:	f004 fb9f 	bl	975c <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->store_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    501e:	e007      	b.n	5030 <compile_store_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    5020:	687b      	ldr	r3, [r7, #4]
    5022:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5024:	687b      	ldr	r3, [r7, #4]
    5026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5028:	683b      	ldr	r3, [r7, #0]
    502a:	4903      	ldr	r1, [pc, #12]	; (5038 <compile_store_id+0x38>)
    502c:	f004 fbb0 	bl	9790 <mp_emit_common_id_op>
}
    5030:	bf00      	nop
    5032:	3708      	adds	r7, #8
    5034:	46bd      	mov	sp, r7
    5036:	bd80      	pop	{r7, pc}
    5038:	00021008 	.word	0x00021008

0000503c <compile_delete_id>:

STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    503c:	b580      	push	{r7, lr}
    503e:	b082      	sub	sp, #8
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
    5044:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	795b      	ldrb	r3, [r3, #5]
    504a:	2b01      	cmp	r3, #1
    504c:	d106      	bne.n	505c <compile_delete_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    504e:	687b      	ldr	r3, [r7, #4]
    5050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5052:	6839      	ldr	r1, [r7, #0]
    5054:	4618      	mov	r0, r3
    5056:	f004 fb81 	bl	975c <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->delete_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    505a:	e007      	b.n	506c <compile_delete_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    505c:	687b      	ldr	r3, [r7, #4]
    505e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5064:	683b      	ldr	r3, [r7, #0]
    5066:	4903      	ldr	r1, [pc, #12]	; (5074 <compile_delete_id+0x38>)
    5068:	f004 fb92 	bl	9790 <mp_emit_common_id_op>
}
    506c:	bf00      	nop
    506e:	3708      	adds	r7, #8
    5070:	46bd      	mov	sp, r7
    5072:	bd80      	pop	{r7, pc}
    5074:	00021010 	.word	0x00021010

00005078 <c_tuple>:

STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    5078:	b580      	push	{r7, lr}
    507a:	b088      	sub	sp, #32
    507c:	af00      	add	r7, sp, #0
    507e:	60f8      	str	r0, [r7, #12]
    5080:	60b9      	str	r1, [r7, #8]
    5082:	607a      	str	r2, [r7, #4]
    int total = 0;
    5084:	2300      	movs	r3, #0
    5086:	61fb      	str	r3, [r7, #28]
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    5088:	68bb      	ldr	r3, [r7, #8]
    508a:	2b00      	cmp	r3, #0
    508c:	d006      	beq.n	509c <c_tuple+0x24>
        compile_node(comp, pn);
    508e:	68b9      	ldr	r1, [r7, #8]
    5090:	68f8      	ldr	r0, [r7, #12]
    5092:	f003 fc66 	bl	8962 <compile_node>
        total += 1;
    5096:	69fb      	ldr	r3, [r7, #28]
    5098:	3301      	adds	r3, #1
    509a:	61fb      	str	r3, [r7, #28]
    }
    if (pns_list != NULL) {
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	2b00      	cmp	r3, #0
    50a0:	d01a      	beq.n	50d8 <c_tuple+0x60>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	685b      	ldr	r3, [r3, #4]
    50a6:	0a1b      	lsrs	r3, r3, #8
    50a8:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < n; i++) {
    50aa:	2300      	movs	r3, #0
    50ac:	61bb      	str	r3, [r7, #24]
    50ae:	e00b      	b.n	50c8 <c_tuple+0x50>
            compile_node(comp, pns_list->nodes[i]);
    50b0:	687b      	ldr	r3, [r7, #4]
    50b2:	69ba      	ldr	r2, [r7, #24]
    50b4:	3202      	adds	r2, #2
    50b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    50ba:	4619      	mov	r1, r3
    50bc:	68f8      	ldr	r0, [r7, #12]
    50be:	f003 fc50 	bl	8962 <compile_node>
        for (int i = 0; i < n; i++) {
    50c2:	69bb      	ldr	r3, [r7, #24]
    50c4:	3301      	adds	r3, #1
    50c6:	61bb      	str	r3, [r7, #24]
    50c8:	69ba      	ldr	r2, [r7, #24]
    50ca:	697b      	ldr	r3, [r7, #20]
    50cc:	429a      	cmp	r2, r3
    50ce:	dbef      	blt.n	50b0 <c_tuple+0x38>
        }
        total += n;
    50d0:	69fa      	ldr	r2, [r7, #28]
    50d2:	697b      	ldr	r3, [r7, #20]
    50d4:	4413      	add	r3, r2
    50d6:	61fb      	str	r3, [r7, #28]
    }
    EMIT_ARG(build, total, MP_EMIT_BUILD_TUPLE);
    50d8:	68fb      	ldr	r3, [r7, #12]
    50da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50dc:	69f9      	ldr	r1, [r7, #28]
    50de:	2200      	movs	r2, #0
    50e0:	4618      	mov	r0, r3
    50e2:	f005 fc60 	bl	a9a6 <mp_emit_bc_build>
}
    50e6:	bf00      	nop
    50e8:	3720      	adds	r7, #32
    50ea:	46bd      	mov	sp, r7
    50ec:	bd80      	pop	{r7, pc}

000050ee <compile_generic_tuple>:

STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    50ee:	b580      	push	{r7, lr}
    50f0:	b082      	sub	sp, #8
    50f2:	af00      	add	r7, sp, #0
    50f4:	6078      	str	r0, [r7, #4]
    50f6:	6039      	str	r1, [r7, #0]
    // a simple tuple expression
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    50f8:	683a      	ldr	r2, [r7, #0]
    50fa:	2100      	movs	r1, #0
    50fc:	6878      	ldr	r0, [r7, #4]
    50fe:	f7ff ffbb 	bl	5078 <c_tuple>
}
    5102:	bf00      	nop
    5104:	3708      	adds	r7, #8
    5106:	46bd      	mov	sp, r7
    5108:	bd80      	pop	{r7, pc}

0000510a <c_if_cond>:

STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    510a:	b580      	push	{r7, lr}
    510c:	b08a      	sub	sp, #40	; 0x28
    510e:	af00      	add	r7, sp, #0
    5110:	60f8      	str	r0, [r7, #12]
    5112:	60b9      	str	r1, [r7, #8]
    5114:	603b      	str	r3, [r7, #0]
    5116:	4613      	mov	r3, r2
    5118:	71fb      	strb	r3, [r7, #7]
    if (mp_parse_node_is_const_false(pn)) {
    511a:	68b8      	ldr	r0, [r7, #8]
    511c:	f7fe fcc1 	bl	3aa2 <mp_parse_node_is_const_false>
    5120:	4603      	mov	r3, r0
    5122:	2b00      	cmp	r3, #0
    5124:	d00e      	beq.n	5144 <c_if_cond+0x3a>
        if (jump_if == false) {
    5126:	79fb      	ldrb	r3, [r7, #7]
    5128:	f083 0301 	eor.w	r3, r3, #1
    512c:	b2db      	uxtb	r3, r3
    512e:	2b00      	cmp	r3, #0
    5130:	f000 80eb 	beq.w	530a <c_if_cond+0x200>
            EMIT_ARG(jump, label);
    5134:	68fb      	ldr	r3, [r7, #12]
    5136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5138:	683a      	ldr	r2, [r7, #0]
    513a:	4611      	mov	r1, r2
    513c:	4618      	mov	r0, r3
    513e:	f005 faa7 	bl	a690 <mp_emit_bc_jump>
        }
        return;
    5142:	e0e2      	b.n	530a <c_if_cond+0x200>
    } else if (mp_parse_node_is_const_true(pn)) {
    5144:	68b8      	ldr	r0, [r7, #8]
    5146:	f7fe fcc8 	bl	3ada <mp_parse_node_is_const_true>
    514a:	4603      	mov	r3, r0
    514c:	2b00      	cmp	r3, #0
    514e:	d00b      	beq.n	5168 <c_if_cond+0x5e>
        if (jump_if == true) {
    5150:	79fb      	ldrb	r3, [r7, #7]
    5152:	2b00      	cmp	r3, #0
    5154:	f000 80db 	beq.w	530e <c_if_cond+0x204>
            EMIT_ARG(jump, label);
    5158:	68fb      	ldr	r3, [r7, #12]
    515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    515c:	683a      	ldr	r2, [r7, #0]
    515e:	4611      	mov	r1, r2
    5160:	4618      	mov	r0, r3
    5162:	f005 fa95 	bl	a690 <mp_emit_bc_jump>
        }
        return;
    5166:	e0d2      	b.n	530e <c_if_cond+0x204>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    5168:	68bb      	ldr	r3, [r7, #8]
    516a:	2b00      	cmp	r3, #0
    516c:	f000 80c1 	beq.w	52f2 <c_if_cond+0x1e8>
    5170:	68bb      	ldr	r3, [r7, #8]
    5172:	f003 0303 	and.w	r3, r3, #3
    5176:	2b00      	cmp	r3, #0
    5178:	f040 80bb 	bne.w	52f2 <c_if_cond+0x1e8>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    517c:	68bb      	ldr	r3, [r7, #8]
    517e:	61fb      	str	r3, [r7, #28]
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5180:	69fb      	ldr	r3, [r7, #28]
    5182:	685b      	ldr	r3, [r3, #4]
    5184:	0a1b      	lsrs	r3, r3, #8
    5186:	61bb      	str	r3, [r7, #24]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    5188:	69fb      	ldr	r3, [r7, #28]
    518a:	685b      	ldr	r3, [r3, #4]
    518c:	b2db      	uxtb	r3, r3
    518e:	2b1c      	cmp	r3, #28
    5190:	d152      	bne.n	5238 <c_if_cond+0x12e>
            if (jump_if == false) {
    5192:	79fb      	ldrb	r3, [r7, #7]
    5194:	f083 0301 	eor.w	r3, r3, #1
    5198:	b2db      	uxtb	r3, r3
    519a:	2b00      	cmp	r3, #0
    519c:	d037      	beq.n	520e <c_if_cond+0x104>
    519e:	e000      	b.n	51a2 <c_if_cond+0x98>
            return;
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
            if (jump_if == false) {
                goto and_or_logic2;
            } else {
                goto and_or_logic1;
    51a0:	bf00      	nop
                uint label2 = comp_next_label(comp);
    51a2:	68f8      	ldr	r0, [r7, #12]
    51a4:	f7ff fe1e 	bl	4de4 <comp_next_label>
    51a8:	6178      	str	r0, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    51aa:	2300      	movs	r3, #0
    51ac:	627b      	str	r3, [r7, #36]	; 0x24
    51ae:	e017      	b.n	51e0 <c_if_cond+0xd6>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    51b0:	69fb      	ldr	r3, [r7, #28]
    51b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    51b4:	3202      	adds	r2, #2
    51b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    51ba:	79fb      	ldrb	r3, [r7, #7]
    51bc:	2b00      	cmp	r3, #0
    51be:	bf14      	ite	ne
    51c0:	2301      	movne	r3, #1
    51c2:	2300      	moveq	r3, #0
    51c4:	b2db      	uxtb	r3, r3
    51c6:	f083 0301 	eor.w	r3, r3, #1
    51ca:	b2db      	uxtb	r3, r3
    51cc:	f003 0301 	and.w	r3, r3, #1
    51d0:	b2da      	uxtb	r2, r3
    51d2:	697b      	ldr	r3, [r7, #20]
    51d4:	68f8      	ldr	r0, [r7, #12]
    51d6:	f7ff ff98 	bl	510a <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    51da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51dc:	3301      	adds	r3, #1
    51de:	627b      	str	r3, [r7, #36]	; 0x24
    51e0:	69bb      	ldr	r3, [r7, #24]
    51e2:	1e5a      	subs	r2, r3, #1
    51e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    51e6:	429a      	cmp	r2, r3
    51e8:	dce2      	bgt.n	51b0 <c_if_cond+0xa6>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    51ea:	69bb      	ldr	r3, [r7, #24]
    51ec:	1e5a      	subs	r2, r3, #1
    51ee:	69fb      	ldr	r3, [r7, #28]
    51f0:	3202      	adds	r2, #2
    51f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    51f6:	79fa      	ldrb	r2, [r7, #7]
    51f8:	683b      	ldr	r3, [r7, #0]
    51fa:	68f8      	ldr	r0, [r7, #12]
    51fc:	f7ff ff85 	bl	510a <c_if_cond>
                EMIT_ARG(label_assign, label2);
    5200:	68fb      	ldr	r3, [r7, #12]
    5202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5204:	6979      	ldr	r1, [r7, #20]
    5206:	4618      	mov	r0, r3
    5208:	f004 ffb8 	bl	a17c <mp_emit_bc_label_assign>
            return;
    520c:	e082      	b.n	5314 <c_if_cond+0x20a>
                for (int i = 0; i < n; i++) {
    520e:	2300      	movs	r3, #0
    5210:	623b      	str	r3, [r7, #32]
    5212:	e00c      	b.n	522e <c_if_cond+0x124>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    5214:	69fb      	ldr	r3, [r7, #28]
    5216:	6a3a      	ldr	r2, [r7, #32]
    5218:	3202      	adds	r2, #2
    521a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    521e:	79fa      	ldrb	r2, [r7, #7]
    5220:	683b      	ldr	r3, [r7, #0]
    5222:	68f8      	ldr	r0, [r7, #12]
    5224:	f7ff ff71 	bl	510a <c_if_cond>
                for (int i = 0; i < n; i++) {
    5228:	6a3b      	ldr	r3, [r7, #32]
    522a:	3301      	adds	r3, #1
    522c:	623b      	str	r3, [r7, #32]
    522e:	6a3a      	ldr	r2, [r7, #32]
    5230:	69bb      	ldr	r3, [r7, #24]
    5232:	429a      	cmp	r2, r3
    5234:	dbee      	blt.n	5214 <c_if_cond+0x10a>
            return;
    5236:	e06d      	b.n	5314 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    5238:	69fb      	ldr	r3, [r7, #28]
    523a:	685b      	ldr	r3, [r3, #4]
    523c:	b2db      	uxtb	r3, r3
    523e:	2b1d      	cmp	r3, #29
    5240:	d106      	bne.n	5250 <c_if_cond+0x146>
            if (jump_if == false) {
    5242:	79fb      	ldrb	r3, [r7, #7]
    5244:	f083 0301 	eor.w	r3, r3, #1
    5248:	b2db      	uxtb	r3, r3
    524a:	2b00      	cmp	r3, #0
    524c:	d0a8      	beq.n	51a0 <c_if_cond+0x96>
                goto and_or_logic2;
    524e:	e7de      	b.n	520e <c_if_cond+0x104>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    5250:	69fb      	ldr	r3, [r7, #28]
    5252:	685b      	ldr	r3, [r3, #4]
    5254:	b2db      	uxtb	r3, r3
    5256:	2b1e      	cmp	r3, #30
    5258:	d112      	bne.n	5280 <c_if_cond+0x176>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    525a:	69fb      	ldr	r3, [r7, #28]
    525c:	6899      	ldr	r1, [r3, #8]
    525e:	79fb      	ldrb	r3, [r7, #7]
    5260:	2b00      	cmp	r3, #0
    5262:	bf14      	ite	ne
    5264:	2301      	movne	r3, #1
    5266:	2300      	moveq	r3, #0
    5268:	b2db      	uxtb	r3, r3
    526a:	f083 0301 	eor.w	r3, r3, #1
    526e:	b2db      	uxtb	r3, r3
    5270:	f003 0301 	and.w	r3, r3, #1
    5274:	b2da      	uxtb	r2, r3
    5276:	683b      	ldr	r3, [r7, #0]
    5278:	68f8      	ldr	r0, [r7, #12]
    527a:	f7ff ff46 	bl	510a <c_if_cond>
            return;
    527e:	e049      	b.n	5314 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    5280:	69fb      	ldr	r3, [r7, #28]
    5282:	685b      	ldr	r3, [r3, #4]
    5284:	b2db      	uxtb	r3, r3
    5286:	2b2a      	cmp	r3, #42	; 0x2a
    5288:	d133      	bne.n	52f2 <c_if_cond+0x1e8>
            // cond is something in parenthesis
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    528a:	69fb      	ldr	r3, [r7, #28]
    528c:	689b      	ldr	r3, [r3, #8]
    528e:	2b00      	cmp	r3, #0
    5290:	d10d      	bne.n	52ae <c_if_cond+0x1a4>
                // empty tuple, acts as false for the condition
                if (jump_if == false) {
    5292:	79fb      	ldrb	r3, [r7, #7]
    5294:	f083 0301 	eor.w	r3, r3, #1
    5298:	b2db      	uxtb	r3, r3
    529a:	2b00      	cmp	r3, #0
    529c:	d039      	beq.n	5312 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    529e:	68fb      	ldr	r3, [r7, #12]
    52a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52a2:	683a      	ldr	r2, [r7, #0]
    52a4:	4611      	mov	r1, r2
    52a6:	4618      	mov	r0, r3
    52a8:	f005 f9f2 	bl	a690 <mp_emit_bc_jump>
                // non-empty tuple, acts as true for the condition
                if (jump_if == true) {
                    EMIT_ARG(jump, label);
                }
            }
            return;
    52ac:	e031      	b.n	5312 <c_if_cond+0x208>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    52ae:	69fb      	ldr	r3, [r7, #28]
    52b0:	689b      	ldr	r3, [r3, #8]
    52b2:	2b00      	cmp	r3, #0
    52b4:	d00b      	beq.n	52ce <c_if_cond+0x1c4>
    52b6:	69fb      	ldr	r3, [r7, #28]
    52b8:	689b      	ldr	r3, [r3, #8]
    52ba:	f003 0303 	and.w	r3, r3, #3
    52be:	2b00      	cmp	r3, #0
    52c0:	d105      	bne.n	52ce <c_if_cond+0x1c4>
    52c2:	69fb      	ldr	r3, [r7, #28]
    52c4:	689b      	ldr	r3, [r3, #8]
    52c6:	685b      	ldr	r3, [r3, #4]
    52c8:	b2db      	uxtb	r3, r3
    52ca:	2b8a      	cmp	r3, #138	; 0x8a
    52cc:	d006      	beq.n	52dc <c_if_cond+0x1d2>
    52ce:	4b13      	ldr	r3, [pc, #76]	; (531c <c_if_cond+0x212>)
    52d0:	4a13      	ldr	r2, [pc, #76]	; (5320 <c_if_cond+0x216>)
    52d2:	f44f 71ac 	mov.w	r1, #344	; 0x158
    52d6:	4813      	ldr	r0, [pc, #76]	; (5324 <c_if_cond+0x21a>)
    52d8:	f016 f8d2 	bl	1b480 <__assert_func>
                if (jump_if == true) {
    52dc:	79fb      	ldrb	r3, [r7, #7]
    52de:	2b00      	cmp	r3, #0
    52e0:	d017      	beq.n	5312 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    52e2:	68fb      	ldr	r3, [r7, #12]
    52e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52e6:	683a      	ldr	r2, [r7, #0]
    52e8:	4611      	mov	r1, r2
    52ea:	4618      	mov	r0, r3
    52ec:	f005 f9d0 	bl	a690 <mp_emit_bc_jump>
            return;
    52f0:	e00f      	b.n	5312 <c_if_cond+0x208>
        }
    }

    // nothing special, fall back to default compiling for node and jump
    compile_node(comp, pn);
    52f2:	68b9      	ldr	r1, [r7, #8]
    52f4:	68f8      	ldr	r0, [r7, #12]
    52f6:	f003 fb34 	bl	8962 <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    52fa:	68fb      	ldr	r3, [r7, #12]
    52fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52fe:	683a      	ldr	r2, [r7, #0]
    5300:	79f9      	ldrb	r1, [r7, #7]
    5302:	4618      	mov	r0, r3
    5304:	f005 f9d6 	bl	a6b4 <mp_emit_bc_pop_jump_if>
    5308:	e004      	b.n	5314 <c_if_cond+0x20a>
        return;
    530a:	bf00      	nop
    530c:	e002      	b.n	5314 <c_if_cond+0x20a>
        return;
    530e:	bf00      	nop
    5310:	e000      	b.n	5314 <c_if_cond+0x20a>
            return;
    5312:	bf00      	nop
}
    5314:	3728      	adds	r7, #40	; 0x28
    5316:	46bd      	mov	sp, r7
    5318:	bd80      	pop	{r7, pc}
    531a:	bf00      	nop
    531c:	0001ff94 	.word	0x0001ff94
    5320:	00020b0c 	.word	0x00020b0c
    5324:	0001ff80 	.word	0x0001ff80

00005328 <c_assign_atom_expr>:

typedef enum { ASSIGN_STORE, ASSIGN_AUG_LOAD, ASSIGN_AUG_STORE } assign_kind_t;
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t kind);

STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    5328:	b580      	push	{r7, lr}
    532a:	b088      	sub	sp, #32
    532c:	af00      	add	r7, sp, #0
    532e:	60f8      	str	r0, [r7, #12]
    5330:	60b9      	str	r1, [r7, #8]
    5332:	607a      	str	r2, [r7, #4]
    if (assign_kind != ASSIGN_AUG_STORE) {
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	2b02      	cmp	r3, #2
    5338:	d005      	beq.n	5346 <c_assign_atom_expr+0x1e>
        compile_node(comp, pns->nodes[0]);
    533a:	68bb      	ldr	r3, [r7, #8]
    533c:	689b      	ldr	r3, [r3, #8]
    533e:	4619      	mov	r1, r3
    5340:	68f8      	ldr	r0, [r7, #12]
    5342:	f003 fb0e 	bl	8962 <compile_node>
    }

    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5346:	68bb      	ldr	r3, [r7, #8]
    5348:	68db      	ldr	r3, [r3, #12]
    534a:	2b00      	cmp	r3, #0
    534c:	f000 80b0 	beq.w	54b0 <c_assign_atom_expr+0x188>
    5350:	68bb      	ldr	r3, [r7, #8]
    5352:	68db      	ldr	r3, [r3, #12]
    5354:	f003 0303 	and.w	r3, r3, #3
    5358:	2b00      	cmp	r3, #0
    535a:	f040 80a9 	bne.w	54b0 <c_assign_atom_expr+0x188>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    535e:	68bb      	ldr	r3, [r7, #8]
    5360:	68db      	ldr	r3, [r3, #12]
    5362:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5364:	69fb      	ldr	r3, [r7, #28]
    5366:	685b      	ldr	r3, [r3, #4]
    5368:	b2db      	uxtb	r3, r3
    536a:	2b86      	cmp	r3, #134	; 0x86
    536c:	d13a      	bne.n	53e4 <c_assign_atom_expr+0xbc>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    536e:	69fb      	ldr	r3, [r7, #28]
    5370:	685b      	ldr	r3, [r3, #4]
    5372:	0a1b      	lsrs	r3, r3, #8
    5374:	617b      	str	r3, [r7, #20]
            if (assign_kind != ASSIGN_AUG_STORE) {
    5376:	687b      	ldr	r3, [r7, #4]
    5378:	2b02      	cmp	r3, #2
    537a:	d013      	beq.n	53a4 <c_assign_atom_expr+0x7c>
                for (int i = 0; i < n - 1; i++) {
    537c:	2300      	movs	r3, #0
    537e:	61bb      	str	r3, [r7, #24]
    5380:	e00b      	b.n	539a <c_assign_atom_expr+0x72>
                    compile_node(comp, pns1->nodes[i]);
    5382:	69fb      	ldr	r3, [r7, #28]
    5384:	69ba      	ldr	r2, [r7, #24]
    5386:	3202      	adds	r2, #2
    5388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    538c:	4619      	mov	r1, r3
    538e:	68f8      	ldr	r0, [r7, #12]
    5390:	f003 fae7 	bl	8962 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5394:	69bb      	ldr	r3, [r7, #24]
    5396:	3301      	adds	r3, #1
    5398:	61bb      	str	r3, [r7, #24]
    539a:	697b      	ldr	r3, [r7, #20]
    539c:	1e5a      	subs	r2, r3, #1
    539e:	69bb      	ldr	r3, [r7, #24]
    53a0:	429a      	cmp	r2, r3
    53a2:	dcee      	bgt.n	5382 <c_assign_atom_expr+0x5a>
                }
            }
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    53a4:	697b      	ldr	r3, [r7, #20]
    53a6:	1e5a      	subs	r2, r3, #1
    53a8:	69fb      	ldr	r3, [r7, #28]
    53aa:	3202      	adds	r2, #2
    53ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    53b0:	2b00      	cmp	r3, #0
    53b2:	d009      	beq.n	53c8 <c_assign_atom_expr+0xa0>
    53b4:	697b      	ldr	r3, [r7, #20]
    53b6:	1e5a      	subs	r2, r3, #1
    53b8:	69fb      	ldr	r3, [r7, #28]
    53ba:	3202      	adds	r2, #2
    53bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    53c0:	f003 0303 	and.w	r3, r3, #3
    53c4:	2b00      	cmp	r3, #0
    53c6:	d006      	beq.n	53d6 <c_assign_atom_expr+0xae>
    53c8:	4b3e      	ldr	r3, [pc, #248]	; (54c4 <c_assign_atom_expr+0x19c>)
    53ca:	4a3f      	ldr	r2, [pc, #252]	; (54c8 <c_assign_atom_expr+0x1a0>)
    53cc:	f44f 71bc 	mov.w	r1, #376	; 0x178
    53d0:	483e      	ldr	r0, [pc, #248]	; (54cc <c_assign_atom_expr+0x1a4>)
    53d2:	f016 f855 	bl	1b480 <__assert_func>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    53d6:	697b      	ldr	r3, [r7, #20]
    53d8:	1e5a      	subs	r2, r3, #1
    53da:	69fb      	ldr	r3, [r7, #28]
    53dc:	3202      	adds	r2, #2
    53de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    53e2:	61fb      	str	r3, [r7, #28]
        }
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    53e4:	69fb      	ldr	r3, [r7, #28]
    53e6:	685b      	ldr	r3, [r3, #4]
    53e8:	b2db      	uxtb	r3, r3
    53ea:	2b2e      	cmp	r3, #46	; 0x2e
    53ec:	d12a      	bne.n	5444 <c_assign_atom_expr+0x11c>
            if (assign_kind == ASSIGN_AUG_STORE) {
    53ee:	687b      	ldr	r3, [r7, #4]
    53f0:	2b02      	cmp	r3, #2
    53f2:	d10b      	bne.n	540c <c_assign_atom_expr+0xe4>
                EMIT(rot_three);
    53f4:	68fb      	ldr	r3, [r7, #12]
    53f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53f8:	4618      	mov	r0, r3
    53fa:	f005 f939 	bl	a670 <mp_emit_bc_rot_three>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    53fe:	68fb      	ldr	r3, [r7, #12]
    5400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5402:	2101      	movs	r1, #1
    5404:	4618      	mov	r0, r3
    5406:	f005 f835 	bl	a474 <mp_emit_bc_subscr>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
                } else {
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
                }
            }
            return;
    540a:	e057      	b.n	54bc <c_assign_atom_expr+0x194>
                compile_node(comp, pns1->nodes[0]);
    540c:	69fb      	ldr	r3, [r7, #28]
    540e:	689b      	ldr	r3, [r3, #8]
    5410:	4619      	mov	r1, r3
    5412:	68f8      	ldr	r0, [r7, #12]
    5414:	f003 faa5 	bl	8962 <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    5418:	687b      	ldr	r3, [r7, #4]
    541a:	2b01      	cmp	r3, #1
    541c:	d10b      	bne.n	5436 <c_assign_atom_expr+0x10e>
                    EMIT(dup_top_two);
    541e:	68fb      	ldr	r3, [r7, #12]
    5420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5422:	4618      	mov	r0, r3
    5424:	f005 f8f3 	bl	a60e <mp_emit_bc_dup_top_two>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    5428:	68fb      	ldr	r3, [r7, #12]
    542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    542c:	2100      	movs	r1, #0
    542e:	4618      	mov	r0, r3
    5430:	f005 f820 	bl	a474 <mp_emit_bc_subscr>
            return;
    5434:	e042      	b.n	54bc <c_assign_atom_expr+0x194>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    5436:	68fb      	ldr	r3, [r7, #12]
    5438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    543a:	2101      	movs	r1, #1
    543c:	4618      	mov	r0, r3
    543e:	f005 f819 	bl	a474 <mp_emit_bc_subscr>
            return;
    5442:	e03b      	b.n	54bc <c_assign_atom_expr+0x194>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5444:	69fb      	ldr	r3, [r7, #28]
    5446:	685b      	ldr	r3, [r3, #4]
    5448:	b2db      	uxtb	r3, r3
    544a:	2b2f      	cmp	r3, #47	; 0x2f
    544c:	d130      	bne.n	54b0 <c_assign_atom_expr+0x188>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    544e:	69fb      	ldr	r3, [r7, #28]
    5450:	689b      	ldr	r3, [r3, #8]
    5452:	f003 030f 	and.w	r3, r3, #15
    5456:	2b02      	cmp	r3, #2
    5458:	d006      	beq.n	5468 <c_assign_atom_expr+0x140>
    545a:	4b1d      	ldr	r3, [pc, #116]	; (54d0 <c_assign_atom_expr+0x1a8>)
    545c:	4a1a      	ldr	r2, [pc, #104]	; (54c8 <c_assign_atom_expr+0x1a0>)
    545e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    5462:	481a      	ldr	r0, [pc, #104]	; (54cc <c_assign_atom_expr+0x1a4>)
    5464:	f016 f80c 	bl	1b480 <__assert_func>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    5468:	687b      	ldr	r3, [r7, #4]
    546a:	2b01      	cmp	r3, #1
    546c:	d10e      	bne.n	548c <c_assign_atom_expr+0x164>
                EMIT(dup_top);
    546e:	68fb      	ldr	r3, [r7, #12]
    5470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5472:	4618      	mov	r0, r3
    5474:	f005 f8bb 	bl	a5ee <mp_emit_bc_dup_top>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_LOAD);
    5478:	68fb      	ldr	r3, [r7, #12]
    547a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    547c:	69fb      	ldr	r3, [r7, #28]
    547e:	689b      	ldr	r3, [r3, #8]
    5480:	091b      	lsrs	r3, r3, #4
    5482:	2200      	movs	r2, #0
    5484:	4619      	mov	r1, r3
    5486:	f005 f81d 	bl	a4c4 <mp_emit_bc_attr>
                if (assign_kind == ASSIGN_AUG_STORE) {
                    EMIT(rot_two);
                }
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
            }
            return;
    548a:	e017      	b.n	54bc <c_assign_atom_expr+0x194>
                if (assign_kind == ASSIGN_AUG_STORE) {
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	2b02      	cmp	r3, #2
    5490:	d104      	bne.n	549c <c_assign_atom_expr+0x174>
                    EMIT(rot_two);
    5492:	68fb      	ldr	r3, [r7, #12]
    5494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5496:	4618      	mov	r0, r3
    5498:	f005 f8da 	bl	a650 <mp_emit_bc_rot_two>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
    549c:	68fb      	ldr	r3, [r7, #12]
    549e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    54a0:	69fb      	ldr	r3, [r7, #28]
    54a2:	689b      	ldr	r3, [r3, #8]
    54a4:	091b      	lsrs	r3, r3, #4
    54a6:	2201      	movs	r2, #1
    54a8:	4619      	mov	r1, r3
    54aa:	f005 f80b 	bl	a4c4 <mp_emit_bc_attr>
            return;
    54ae:	e005      	b.n	54bc <c_assign_atom_expr+0x194>
        }
    }

    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    54b0:	68bb      	ldr	r3, [r7, #8]
    54b2:	4a08      	ldr	r2, [pc, #32]	; (54d4 <c_assign_atom_expr+0x1ac>)
    54b4:	4619      	mov	r1, r3
    54b6:	68f8      	ldr	r0, [r7, #12]
    54b8:	f7ff fc79 	bl	4dae <compile_syntax_error>
}
    54bc:	3720      	adds	r7, #32
    54be:	46bd      	mov	sp, r7
    54c0:	bd80      	pop	{r7, pc}
    54c2:	bf00      	nop
    54c4:	0001ffd4 	.word	0x0001ffd4
    54c8:	00020b18 	.word	0x00020b18
    54cc:	0001ff80 	.word	0x0001ff80
    54d0:	00020000 	.word	0x00020000
    54d4:	00020024 	.word	0x00020024

000054d8 <c_assign_tuple>:

// we need to allow for a caller passing in 1 initial node (node_head) followed by an array of nodes (nodes_tail)
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    54d8:	b580      	push	{r7, lr}
    54da:	b088      	sub	sp, #32
    54dc:	af00      	add	r7, sp, #0
    54de:	60f8      	str	r0, [r7, #12]
    54e0:	60b9      	str	r1, [r7, #8]
    54e2:	607a      	str	r2, [r7, #4]
    54e4:	603b      	str	r3, [r7, #0]
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    54e6:	68bb      	ldr	r3, [r7, #8]
    54e8:	2b00      	cmp	r3, #0
    54ea:	bf14      	ite	ne
    54ec:	2301      	movne	r3, #1
    54ee:	2300      	moveq	r3, #0
    54f0:	b2db      	uxtb	r3, r3
    54f2:	613b      	str	r3, [r7, #16]

    // look for star expression
    uint have_star_index = -1;
    54f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    54f8:	61fb      	str	r3, [r7, #28]
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    54fa:	693b      	ldr	r3, [r7, #16]
    54fc:	2b00      	cmp	r3, #0
    54fe:	d015      	beq.n	552c <c_assign_tuple+0x54>
    5500:	68bb      	ldr	r3, [r7, #8]
    5502:	2b00      	cmp	r3, #0
    5504:	d012      	beq.n	552c <c_assign_tuple+0x54>
    5506:	68bb      	ldr	r3, [r7, #8]
    5508:	f003 0303 	and.w	r3, r3, #3
    550c:	2b00      	cmp	r3, #0
    550e:	d10d      	bne.n	552c <c_assign_tuple+0x54>
    5510:	68bb      	ldr	r3, [r7, #8]
    5512:	685b      	ldr	r3, [r3, #4]
    5514:	b2db      	uxtb	r3, r3
    5516:	2b20      	cmp	r3, #32
    5518:	d108      	bne.n	552c <c_assign_tuple+0x54>
        EMIT_ARG(unpack_ex, 0, num_tail);
    551a:	68fb      	ldr	r3, [r7, #12]
    551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    551e:	687a      	ldr	r2, [r7, #4]
    5520:	2100      	movs	r1, #0
    5522:	4618      	mov	r0, r3
    5524:	f005 faad 	bl	aa82 <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    5528:	2300      	movs	r3, #0
    552a:	61fb      	str	r3, [r7, #28]
    }
    for (uint i = 0; i < num_tail; i++) {
    552c:	2300      	movs	r3, #0
    552e:	61bb      	str	r3, [r7, #24]
    5530:	e03b      	b.n	55aa <c_assign_tuple+0xd2>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    5532:	69bb      	ldr	r3, [r7, #24]
    5534:	009b      	lsls	r3, r3, #2
    5536:	683a      	ldr	r2, [r7, #0]
    5538:	4413      	add	r3, r2
    553a:	681b      	ldr	r3, [r3, #0]
    553c:	2b00      	cmp	r3, #0
    553e:	d031      	beq.n	55a4 <c_assign_tuple+0xcc>
    5540:	69bb      	ldr	r3, [r7, #24]
    5542:	009b      	lsls	r3, r3, #2
    5544:	683a      	ldr	r2, [r7, #0]
    5546:	4413      	add	r3, r2
    5548:	681b      	ldr	r3, [r3, #0]
    554a:	f003 0303 	and.w	r3, r3, #3
    554e:	2b00      	cmp	r3, #0
    5550:	d128      	bne.n	55a4 <c_assign_tuple+0xcc>
    5552:	69bb      	ldr	r3, [r7, #24]
    5554:	009b      	lsls	r3, r3, #2
    5556:	683a      	ldr	r2, [r7, #0]
    5558:	4413      	add	r3, r2
    555a:	681b      	ldr	r3, [r3, #0]
    555c:	685b      	ldr	r3, [r3, #4]
    555e:	b2db      	uxtb	r3, r3
    5560:	2b20      	cmp	r3, #32
    5562:	d11f      	bne.n	55a4 <c_assign_tuple+0xcc>
            if (have_star_index == (uint)-1) {
    5564:	69fb      	ldr	r3, [r7, #28]
    5566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    556a:	d110      	bne.n	558e <c_assign_tuple+0xb6>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    556c:	68fb      	ldr	r3, [r7, #12]
    556e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5570:	693a      	ldr	r2, [r7, #16]
    5572:	69bb      	ldr	r3, [r7, #24]
    5574:	18d1      	adds	r1, r2, r3
    5576:	687a      	ldr	r2, [r7, #4]
    5578:	69bb      	ldr	r3, [r7, #24]
    557a:	1ad3      	subs	r3, r2, r3
    557c:	3b01      	subs	r3, #1
    557e:	461a      	mov	r2, r3
    5580:	f005 fa7f 	bl	aa82 <mp_emit_bc_unpack_ex>
                have_star_index = num_head + i;
    5584:	693a      	ldr	r2, [r7, #16]
    5586:	69bb      	ldr	r3, [r7, #24]
    5588:	4413      	add	r3, r2
    558a:	61fb      	str	r3, [r7, #28]
    558c:	e00a      	b.n	55a4 <c_assign_tuple+0xcc>
            } else {
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    558e:	69bb      	ldr	r3, [r7, #24]
    5590:	009b      	lsls	r3, r3, #2
    5592:	683a      	ldr	r2, [r7, #0]
    5594:	4413      	add	r3, r2
    5596:	681b      	ldr	r3, [r3, #0]
    5598:	4a2a      	ldr	r2, [pc, #168]	; (5644 <c_assign_tuple+0x16c>)
    559a:	4619      	mov	r1, r3
    559c:	68f8      	ldr	r0, [r7, #12]
    559e:	f7ff fc06 	bl	4dae <compile_syntax_error>
                return;
    55a2:	e04b      	b.n	563c <c_assign_tuple+0x164>
    for (uint i = 0; i < num_tail; i++) {
    55a4:	69bb      	ldr	r3, [r7, #24]
    55a6:	3301      	adds	r3, #1
    55a8:	61bb      	str	r3, [r7, #24]
    55aa:	69ba      	ldr	r2, [r7, #24]
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	429a      	cmp	r2, r3
    55b0:	d3bf      	bcc.n	5532 <c_assign_tuple+0x5a>
            }
        }
    }
    if (have_star_index == (uint)-1) {
    55b2:	69fb      	ldr	r3, [r7, #28]
    55b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    55b8:	d107      	bne.n	55ca <c_assign_tuple+0xf2>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    55ba:	68fb      	ldr	r3, [r7, #12]
    55bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    55be:	693a      	ldr	r2, [r7, #16]
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	4413      	add	r3, r2
    55c4:	4619      	mov	r1, r3
    55c6:	f005 fa48 	bl	aa5a <mp_emit_bc_unpack_sequence>
    }
    if (num_head != 0) {
    55ca:	693b      	ldr	r3, [r7, #16]
    55cc:	2b00      	cmp	r3, #0
    55ce:	d00f      	beq.n	55f0 <c_assign_tuple+0x118>
        if (0 == have_star_index) {
    55d0:	69fb      	ldr	r3, [r7, #28]
    55d2:	2b00      	cmp	r3, #0
    55d4:	d107      	bne.n	55e6 <c_assign_tuple+0x10e>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    55d6:	68bb      	ldr	r3, [r7, #8]
    55d8:	689b      	ldr	r3, [r3, #8]
    55da:	2200      	movs	r2, #0
    55dc:	4619      	mov	r1, r3
    55de:	68f8      	ldr	r0, [r7, #12]
    55e0:	f000 f832 	bl	5648 <c_assign>
    55e4:	e004      	b.n	55f0 <c_assign_tuple+0x118>
        } else {
            c_assign(comp, node_head, ASSIGN_STORE);
    55e6:	2200      	movs	r2, #0
    55e8:	68b9      	ldr	r1, [r7, #8]
    55ea:	68f8      	ldr	r0, [r7, #12]
    55ec:	f000 f82c 	bl	5648 <c_assign>
        }
    }
    for (uint i = 0; i < num_tail; i++) {
    55f0:	2300      	movs	r3, #0
    55f2:	617b      	str	r3, [r7, #20]
    55f4:	e01e      	b.n	5634 <c_assign_tuple+0x15c>
        if (num_head + i == have_star_index) {
    55f6:	693a      	ldr	r2, [r7, #16]
    55f8:	697b      	ldr	r3, [r7, #20]
    55fa:	441a      	add	r2, r3
    55fc:	69fb      	ldr	r3, [r7, #28]
    55fe:	429a      	cmp	r2, r3
    5600:	d10b      	bne.n	561a <c_assign_tuple+0x142>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    5602:	697b      	ldr	r3, [r7, #20]
    5604:	009b      	lsls	r3, r3, #2
    5606:	683a      	ldr	r2, [r7, #0]
    5608:	4413      	add	r3, r2
    560a:	681b      	ldr	r3, [r3, #0]
    560c:	689b      	ldr	r3, [r3, #8]
    560e:	2200      	movs	r2, #0
    5610:	4619      	mov	r1, r3
    5612:	68f8      	ldr	r0, [r7, #12]
    5614:	f000 f818 	bl	5648 <c_assign>
    5618:	e009      	b.n	562e <c_assign_tuple+0x156>
        } else {
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    561a:	697b      	ldr	r3, [r7, #20]
    561c:	009b      	lsls	r3, r3, #2
    561e:	683a      	ldr	r2, [r7, #0]
    5620:	4413      	add	r3, r2
    5622:	681b      	ldr	r3, [r3, #0]
    5624:	2200      	movs	r2, #0
    5626:	4619      	mov	r1, r3
    5628:	68f8      	ldr	r0, [r7, #12]
    562a:	f000 f80d 	bl	5648 <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    562e:	697b      	ldr	r3, [r7, #20]
    5630:	3301      	adds	r3, #1
    5632:	617b      	str	r3, [r7, #20]
    5634:	697a      	ldr	r2, [r7, #20]
    5636:	687b      	ldr	r3, [r7, #4]
    5638:	429a      	cmp	r2, r3
    563a:	d3dc      	bcc.n	55f6 <c_assign_tuple+0x11e>
        }
    }
}
    563c:	3720      	adds	r7, #32
    563e:	46bd      	mov	sp, r7
    5640:	bd80      	pop	{r7, pc}
    5642:	bf00      	nop
    5644:	00020040 	.word	0x00020040

00005648 <c_assign>:

// assigns top of stack to pn
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    5648:	b580      	push	{r7, lr}
    564a:	b088      	sub	sp, #32
    564c:	af00      	add	r7, sp, #0
    564e:	60f8      	str	r0, [r7, #12]
    5650:	60b9      	str	r1, [r7, #8]
    5652:	607a      	str	r2, [r7, #4]
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    5654:	68bb      	ldr	r3, [r7, #8]
    5656:	2b00      	cmp	r3, #0
    5658:	d106      	bne.n	5668 <c_assign+0x20>
    565a:	4b7a      	ldr	r3, [pc, #488]	; (5844 <c_assign+0x1fc>)
    565c:	4a7a      	ldr	r2, [pc, #488]	; (5848 <c_assign+0x200>)
    565e:	f240 11c5 	movw	r1, #453	; 0x1c5
    5662:	487a      	ldr	r0, [pc, #488]	; (584c <c_assign+0x204>)
    5664:	f015 ff0c 	bl	1b480 <__assert_func>
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    5668:	68bb      	ldr	r3, [r7, #8]
    566a:	f003 0303 	and.w	r3, r3, #3
    566e:	2b00      	cmp	r3, #0
    5670:	d018      	beq.n	56a4 <c_assign+0x5c>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    5672:	68bb      	ldr	r3, [r7, #8]
    5674:	f003 030f 	and.w	r3, r3, #15
    5678:	2b02      	cmp	r3, #2
    567a:	f040 80cf 	bne.w	581c <c_assign+0x1d4>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    567e:	68bb      	ldr	r3, [r7, #8]
    5680:	091b      	lsrs	r3, r3, #4
    5682:	613b      	str	r3, [r7, #16]
            switch (assign_kind) {
    5684:	687b      	ldr	r3, [r7, #4]
    5686:	2b00      	cmp	r3, #0
    5688:	d001      	beq.n	568e <c_assign+0x46>
    568a:	2b02      	cmp	r3, #2
    568c:	d104      	bne.n	5698 <c_assign+0x50>
                case ASSIGN_STORE:
                case ASSIGN_AUG_STORE:
                    compile_store_id(comp, arg);
    568e:	6939      	ldr	r1, [r7, #16]
    5690:	68f8      	ldr	r0, [r7, #12]
    5692:	f7ff fcb5 	bl	5000 <compile_store_id>
                    break;
    5696:	e0c0      	b.n	581a <c_assign+0x1d2>
                case ASSIGN_AUG_LOAD:
                default:
                    compile_load_id(comp, arg);
    5698:	6939      	ldr	r1, [r7, #16]
    569a:	68f8      	ldr	r0, [r7, #12]
    569c:	f7ff fc91 	bl	4fc2 <compile_load_id>
                    break;
    56a0:	bf00      	nop
    56a2:	e0ba      	b.n	581a <c_assign+0x1d2>
        } else {
            goto cannot_assign;
        }
    } else {
        // pn must be a struct
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    56a4:	68bb      	ldr	r3, [r7, #8]
    56a6:	61fb      	str	r3, [r7, #28]
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    56a8:	69fb      	ldr	r3, [r7, #28]
    56aa:	685b      	ldr	r3, [r3, #4]
    56ac:	b2db      	uxtb	r3, r3
    56ae:	2b2a      	cmp	r3, #42	; 0x2a
    56b0:	d01f      	beq.n	56f2 <c_assign+0xaa>
    56b2:	2b2a      	cmp	r3, #42	; 0x2a
    56b4:	d804      	bhi.n	56c0 <c_assign+0x78>
    56b6:	2b06      	cmp	r3, #6
    56b8:	d00d      	beq.n	56d6 <c_assign+0x8e>
    56ba:	2b29      	cmp	r3, #41	; 0x29
    56bc:	d005      	beq.n	56ca <c_assign+0x82>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
                }
                break;

            default:
                goto cannot_assign;
    56be:	e0b8      	b.n	5832 <c_assign+0x1ea>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    56c0:	2b2b      	cmp	r3, #43	; 0x2b
    56c2:	d039      	beq.n	5738 <c_assign+0xf0>
    56c4:	2b90      	cmp	r3, #144	; 0x90
    56c6:	d006      	beq.n	56d6 <c_assign+0x8e>
                goto cannot_assign;
    56c8:	e0b3      	b.n	5832 <c_assign+0x1ea>
                c_assign_atom_expr(comp, pns, assign_kind);
    56ca:	687a      	ldr	r2, [r7, #4]
    56cc:	69f9      	ldr	r1, [r7, #28]
    56ce:	68f8      	ldr	r0, [r7, #12]
    56d0:	f7ff fe2a 	bl	5328 <c_assign_atom_expr>
                break;
    56d4:	e05a      	b.n	578c <c_assign+0x144>
                if (assign_kind != ASSIGN_STORE) {
    56d6:	687b      	ldr	r3, [r7, #4]
    56d8:	2b00      	cmp	r3, #0
    56da:	f040 80a1 	bne.w	5820 <c_assign+0x1d8>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	685b      	ldr	r3, [r3, #4]
    56e2:	0a1a      	lsrs	r2, r3, #8
    56e4:	69fb      	ldr	r3, [r7, #28]
    56e6:	3308      	adds	r3, #8
    56e8:	2100      	movs	r1, #0
    56ea:	68f8      	ldr	r0, [r7, #12]
    56ec:	f7ff fef4 	bl	54d8 <c_assign_tuple>
                break;
    56f0:	e04c      	b.n	578c <c_assign+0x144>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    56f2:	69fb      	ldr	r3, [r7, #28]
    56f4:	689b      	ldr	r3, [r3, #8]
    56f6:	2b00      	cmp	r3, #0
    56f8:	f000 8094 	beq.w	5824 <c_assign+0x1dc>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    56fc:	69fb      	ldr	r3, [r7, #28]
    56fe:	689b      	ldr	r3, [r3, #8]
    5700:	2b00      	cmp	r3, #0
    5702:	d00b      	beq.n	571c <c_assign+0xd4>
    5704:	69fb      	ldr	r3, [r7, #28]
    5706:	689b      	ldr	r3, [r3, #8]
    5708:	f003 0303 	and.w	r3, r3, #3
    570c:	2b00      	cmp	r3, #0
    570e:	d105      	bne.n	571c <c_assign+0xd4>
    5710:	69fb      	ldr	r3, [r7, #28]
    5712:	689b      	ldr	r3, [r3, #8]
    5714:	685b      	ldr	r3, [r3, #4]
    5716:	b2db      	uxtb	r3, r3
    5718:	2b8a      	cmp	r3, #138	; 0x8a
    571a:	d006      	beq.n	572a <c_assign+0xe2>
    571c:	4b4c      	ldr	r3, [pc, #304]	; (5850 <c_assign+0x208>)
    571e:	4a4a      	ldr	r2, [pc, #296]	; (5848 <c_assign+0x200>)
    5720:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    5724:	4849      	ldr	r0, [pc, #292]	; (584c <c_assign+0x204>)
    5726:	f015 feab 	bl	1b480 <__assert_func>
                    if (assign_kind != ASSIGN_STORE) {
    572a:	687b      	ldr	r3, [r7, #4]
    572c:	2b00      	cmp	r3, #0
    572e:	d17b      	bne.n	5828 <c_assign+0x1e0>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5730:	69fb      	ldr	r3, [r7, #28]
    5732:	689b      	ldr	r3, [r3, #8]
    5734:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    5736:	e02a      	b.n	578e <c_assign+0x146>
                if (assign_kind != ASSIGN_STORE) {
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	2b00      	cmp	r3, #0
    573c:	d176      	bne.n	582c <c_assign+0x1e4>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    573e:	69fb      	ldr	r3, [r7, #28]
    5740:	689b      	ldr	r3, [r3, #8]
    5742:	2b00      	cmp	r3, #0
    5744:	d106      	bne.n	5754 <c_assign+0x10c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    5746:	2300      	movs	r3, #0
    5748:	2200      	movs	r2, #0
    574a:	2100      	movs	r1, #0
    574c:	68f8      	ldr	r0, [r7, #12]
    574e:	f7ff fec3 	bl	54d8 <c_assign_tuple>
                break;
    5752:	e01a      	b.n	578a <c_assign+0x142>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    5754:	69fb      	ldr	r3, [r7, #28]
    5756:	689b      	ldr	r3, [r3, #8]
    5758:	2b00      	cmp	r3, #0
    575a:	d00f      	beq.n	577c <c_assign+0x134>
    575c:	69fb      	ldr	r3, [r7, #28]
    575e:	689b      	ldr	r3, [r3, #8]
    5760:	f003 0303 	and.w	r3, r3, #3
    5764:	2b00      	cmp	r3, #0
    5766:	d109      	bne.n	577c <c_assign+0x134>
    5768:	69fb      	ldr	r3, [r7, #28]
    576a:	689b      	ldr	r3, [r3, #8]
    576c:	685b      	ldr	r3, [r3, #4]
    576e:	b2db      	uxtb	r3, r3
    5770:	2b8a      	cmp	r3, #138	; 0x8a
    5772:	d103      	bne.n	577c <c_assign+0x134>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5774:	69fb      	ldr	r3, [r7, #28]
    5776:	689b      	ldr	r3, [r3, #8]
    5778:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    577a:	e008      	b.n	578e <c_assign+0x146>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    577c:	69fb      	ldr	r3, [r7, #28]
    577e:	6899      	ldr	r1, [r3, #8]
    5780:	2300      	movs	r3, #0
    5782:	2200      	movs	r2, #0
    5784:	68f8      	ldr	r0, [r7, #12]
    5786:	f7ff fea7 	bl	54d8 <c_assign_tuple>
                break;
    578a:	bf00      	nop
        }
        return;
    578c:	e056      	b.n	583c <c_assign+0x1f4>

        testlist_comp:
        // lhs is a sequence
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    578e:	69fb      	ldr	r3, [r7, #28]
    5790:	68db      	ldr	r3, [r3, #12]
    5792:	2b00      	cmp	r3, #0
    5794:	d038      	beq.n	5808 <c_assign+0x1c0>
    5796:	69fb      	ldr	r3, [r7, #28]
    5798:	68db      	ldr	r3, [r3, #12]
    579a:	f003 0303 	and.w	r3, r3, #3
    579e:	2b00      	cmp	r3, #0
    57a0:	d132      	bne.n	5808 <c_assign+0x1c0>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    57a2:	69fb      	ldr	r3, [r7, #28]
    57a4:	68db      	ldr	r3, [r3, #12]
    57a6:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    57a8:	69bb      	ldr	r3, [r7, #24]
    57aa:	685b      	ldr	r3, [r3, #4]
    57ac:	b2db      	uxtb	r3, r3
    57ae:	2b8d      	cmp	r3, #141	; 0x8d
    57b0:	d112      	bne.n	57d8 <c_assign+0x190>
                // sequence of one item, with trailing comma
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    57b2:	69bb      	ldr	r3, [r7, #24]
    57b4:	689b      	ldr	r3, [r3, #8]
    57b6:	2b00      	cmp	r3, #0
    57b8:	d006      	beq.n	57c8 <c_assign+0x180>
    57ba:	4b26      	ldr	r3, [pc, #152]	; (5854 <c_assign+0x20c>)
    57bc:	4a22      	ldr	r2, [pc, #136]	; (5848 <c_assign+0x200>)
    57be:	f240 2113 	movw	r1, #531	; 0x213
    57c2:	4822      	ldr	r0, [pc, #136]	; (584c <c_assign+0x204>)
    57c4:	f015 fe5c 	bl	1b480 <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    57c8:	69fb      	ldr	r3, [r7, #28]
    57ca:	6899      	ldr	r1, [r3, #8]
    57cc:	2300      	movs	r3, #0
    57ce:	2200      	movs	r2, #0
    57d0:	68f8      	ldr	r0, [r7, #12]
    57d2:	f7ff fe81 	bl	54d8 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    57d6:	e01f      	b.n	5818 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    57d8:	69bb      	ldr	r3, [r7, #24]
    57da:	685b      	ldr	r3, [r3, #4]
    57dc:	b2db      	uxtb	r3, r3
    57de:	2b8e      	cmp	r3, #142	; 0x8e
    57e0:	d10c      	bne.n	57fc <c_assign+0x1b4>
                // sequence of many items
                uint n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns2);
    57e2:	69bb      	ldr	r3, [r7, #24]
    57e4:	685b      	ldr	r3, [r3, #4]
    57e6:	0a1b      	lsrs	r3, r3, #8
    57e8:	617b      	str	r3, [r7, #20]
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    57ea:	69fb      	ldr	r3, [r7, #28]
    57ec:	6899      	ldr	r1, [r3, #8]
    57ee:	69bb      	ldr	r3, [r7, #24]
    57f0:	3308      	adds	r3, #8
    57f2:	697a      	ldr	r2, [r7, #20]
    57f4:	68f8      	ldr	r0, [r7, #12]
    57f6:	f7ff fe6f 	bl	54d8 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    57fa:	e00d      	b.n	5818 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    57fc:	69bb      	ldr	r3, [r7, #24]
    57fe:	685b      	ldr	r3, [r3, #4]
    5800:	b2db      	uxtb	r3, r3
    5802:	2b9f      	cmp	r3, #159	; 0x9f
    5804:	d014      	beq.n	5830 <c_assign+0x1e8>
                goto cannot_assign;
            } else {
                // sequence with 2 items
                goto sequence_with_2_items;
    5806:	bf00      	nop
            }
        } else {
            // sequence with 2 items
            sequence_with_2_items:
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    5808:	69fb      	ldr	r3, [r7, #28]
    580a:	3308      	adds	r3, #8
    580c:	2202      	movs	r2, #2
    580e:	2100      	movs	r1, #0
    5810:	68f8      	ldr	r0, [r7, #12]
    5812:	f7ff fe61 	bl	54d8 <c_assign_tuple>
        }
        return;
    5816:	e011      	b.n	583c <c_assign+0x1f4>
    5818:	e010      	b.n	583c <c_assign+0x1f4>
    }
    return;
    581a:	e00f      	b.n	583c <c_assign+0x1f4>
            goto cannot_assign;
    581c:	bf00      	nop
    581e:	e008      	b.n	5832 <c_assign+0x1ea>
                    goto cannot_assign;
    5820:	bf00      	nop
    5822:	e006      	b.n	5832 <c_assign+0x1ea>
                    goto cannot_assign;
    5824:	bf00      	nop
    5826:	e004      	b.n	5832 <c_assign+0x1ea>
                        goto cannot_assign;
    5828:	bf00      	nop
    582a:	e002      	b.n	5832 <c_assign+0x1ea>
                    goto cannot_assign;
    582c:	bf00      	nop
    582e:	e000      	b.n	5832 <c_assign+0x1ea>
                goto cannot_assign;
    5830:	bf00      	nop

    cannot_assign:
    compile_syntax_error(comp, pn, "can't assign to expression");
    5832:	4a09      	ldr	r2, [pc, #36]	; (5858 <c_assign+0x210>)
    5834:	68b9      	ldr	r1, [r7, #8]
    5836:	68f8      	ldr	r0, [r7, #12]
    5838:	f7ff fab9 	bl	4dae <compile_syntax_error>
}
    583c:	3720      	adds	r7, #32
    583e:	46bd      	mov	sp, r7
    5840:	bd80      	pop	{r7, pc}
    5842:	bf00      	nop
    5844:	0002005c 	.word	0x0002005c
    5848:	00020b2c 	.word	0x00020b2c
    584c:	0001ff80 	.word	0x0001ff80
    5850:	0001ff94 	.word	0x0001ff94
    5854:	00020078 	.word	0x00020078
    5858:	00020024 	.word	0x00020024

0000585c <close_over_variables_etc>:

// stuff for lambda and comprehensions and generators:
//  if n_pos_defaults > 0 then there is a tuple on the stack with the positional defaults
//  if n_kw_defaults > 0 then there is a dictionary on the stack with the keyword defaults
//  if both exist, the tuple is above the dictionary (ie the first pop gets the tuple)
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    585c:	b580      	push	{r7, lr}
    585e:	b08c      	sub	sp, #48	; 0x30
    5860:	af02      	add	r7, sp, #8
    5862:	60f8      	str	r0, [r7, #12]
    5864:	60b9      	str	r1, [r7, #8]
    5866:	607a      	str	r2, [r7, #4]
    5868:	603b      	str	r3, [r7, #0]
    assert(n_pos_defaults >= 0);
    586a:	687b      	ldr	r3, [r7, #4]
    586c:	2b00      	cmp	r3, #0
    586e:	da06      	bge.n	587e <close_over_variables_etc+0x22>
    5870:	4b41      	ldr	r3, [pc, #260]	; (5978 <close_over_variables_etc+0x11c>)
    5872:	4a42      	ldr	r2, [pc, #264]	; (597c <close_over_variables_etc+0x120>)
    5874:	f240 2131 	movw	r1, #561	; 0x231
    5878:	4841      	ldr	r0, [pc, #260]	; (5980 <close_over_variables_etc+0x124>)
    587a:	f015 fe01 	bl	1b480 <__assert_func>
    assert(n_kw_defaults >= 0);
    587e:	683b      	ldr	r3, [r7, #0]
    5880:	2b00      	cmp	r3, #0
    5882:	da06      	bge.n	5892 <close_over_variables_etc+0x36>
    5884:	4b3f      	ldr	r3, [pc, #252]	; (5984 <close_over_variables_etc+0x128>)
    5886:	4a3d      	ldr	r2, [pc, #244]	; (597c <close_over_variables_etc+0x120>)
    5888:	f240 2132 	movw	r1, #562	; 0x232
    588c:	483c      	ldr	r0, [pc, #240]	; (5980 <close_over_variables_etc+0x124>)
    588e:	f015 fdf7 	bl	1b480 <__assert_func>

    // set flags
    if (n_kw_defaults > 0) {
    5892:	683b      	ldr	r3, [r7, #0]
    5894:	2b00      	cmp	r3, #0
    5896:	dd06      	ble.n	58a6 <close_over_variables_etc+0x4a>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    5898:	68bb      	ldr	r3, [r7, #8]
    589a:	8b1b      	ldrh	r3, [r3, #24]
    589c:	f043 0308 	orr.w	r3, r3, #8
    58a0:	b29a      	uxth	r2, r3
    58a2:	68bb      	ldr	r3, [r7, #8]
    58a4:	831a      	strh	r2, [r3, #24]
    }
    this_scope->num_def_pos_args = n_pos_defaults;
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	b29a      	uxth	r2, r3
    58aa:	68bb      	ldr	r3, [r7, #8]
    58ac:	841a      	strh	r2, [r3, #32]
    comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_REFGLOBALS | MP_SCOPE_FLAG_HASCONSTS;
    #endif

    // make closed over variables, if any
    // ensure they are closed over in the order defined in the outer scope (mainly to agree with CPython)
    int nfree = 0;
    58ae:	2300      	movs	r3, #0
    58b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    58b2:	68fb      	ldr	r3, [r7, #12]
    58b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58b6:	681b      	ldr	r3, [r3, #0]
    58b8:	2b00      	cmp	r3, #0
    58ba:	d044      	beq.n	5946 <close_over_variables_etc+0xea>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    58bc:	2300      	movs	r3, #0
    58be:	623b      	str	r3, [r7, #32]
    58c0:	e03a      	b.n	5938 <close_over_variables_etc+0xdc>
            id_info_t *id = &comp->scope_cur->id_info[i];
    58c2:	68fb      	ldr	r3, [r7, #12]
    58c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58c8:	6a3b      	ldr	r3, [r7, #32]
    58ca:	00db      	lsls	r3, r3, #3
    58cc:	4413      	add	r3, r2
    58ce:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    58d0:	69bb      	ldr	r3, [r7, #24]
    58d2:	781b      	ldrb	r3, [r3, #0]
    58d4:	2b04      	cmp	r3, #4
    58d6:	d003      	beq.n	58e0 <close_over_variables_etc+0x84>
    58d8:	69bb      	ldr	r3, [r7, #24]
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	2b05      	cmp	r3, #5
    58de:	d128      	bne.n	5932 <close_over_variables_etc+0xd6>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    58e0:	2300      	movs	r3, #0
    58e2:	61fb      	str	r3, [r7, #28]
    58e4:	e01f      	b.n	5926 <close_over_variables_etc+0xca>
                    id_info_t *id2 = &this_scope->id_info[j];
    58e6:	68bb      	ldr	r3, [r7, #8]
    58e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58ea:	69fb      	ldr	r3, [r7, #28]
    58ec:	00db      	lsls	r3, r3, #3
    58ee:	4413      	add	r3, r2
    58f0:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    58f2:	697b      	ldr	r3, [r7, #20]
    58f4:	781b      	ldrb	r3, [r3, #0]
    58f6:	2b05      	cmp	r3, #5
    58f8:	d112      	bne.n	5920 <close_over_variables_etc+0xc4>
    58fa:	69bb      	ldr	r3, [r7, #24]
    58fc:	685a      	ldr	r2, [r3, #4]
    58fe:	697b      	ldr	r3, [r7, #20]
    5900:	685b      	ldr	r3, [r3, #4]
    5902:	429a      	cmp	r2, r3
    5904:	d10c      	bne.n	5920 <close_over_variables_etc+0xc4>
                        // in MicroPython we load closures using LOAD_FAST
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    5906:	68fb      	ldr	r3, [r7, #12]
    5908:	6a98      	ldr	r0, [r3, #40]	; 0x28
    590a:	69bb      	ldr	r3, [r7, #24]
    590c:	6859      	ldr	r1, [r3, #4]
    590e:	69bb      	ldr	r3, [r7, #24]
    5910:	885b      	ldrh	r3, [r3, #2]
    5912:	461a      	mov	r2, r3
    5914:	2300      	movs	r3, #0
    5916:	f004 fd41 	bl	a39c <mp_emit_bc_load_local>
                        nfree += 1;
    591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    591c:	3301      	adds	r3, #1
    591e:	627b      	str	r3, [r7, #36]	; 0x24
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5920:	69fb      	ldr	r3, [r7, #28]
    5922:	3301      	adds	r3, #1
    5924:	61fb      	str	r3, [r7, #28]
    5926:	68bb      	ldr	r3, [r7, #8]
    5928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    592a:	461a      	mov	r2, r3
    592c:	69fb      	ldr	r3, [r7, #28]
    592e:	429a      	cmp	r2, r3
    5930:	dcd9      	bgt.n	58e6 <close_over_variables_etc+0x8a>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5932:	6a3b      	ldr	r3, [r7, #32]
    5934:	3301      	adds	r3, #1
    5936:	623b      	str	r3, [r7, #32]
    5938:	68fb      	ldr	r3, [r7, #12]
    593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    593c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    593e:	461a      	mov	r2, r3
    5940:	6a3b      	ldr	r3, [r7, #32]
    5942:	429a      	cmp	r2, r3
    5944:	dcbd      	bgt.n	58c2 <close_over_variables_etc+0x66>
            }
        }
    }

    // make the function/closure
    if (nfree == 0) {
    5946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5948:	2b00      	cmp	r3, #0
    594a:	d107      	bne.n	595c <close_over_variables_etc+0x100>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    594c:	68fb      	ldr	r3, [r7, #12]
    594e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5950:	687a      	ldr	r2, [r7, #4]
    5952:	683b      	ldr	r3, [r7, #0]
    5954:	68b9      	ldr	r1, [r7, #8]
    5956:	f005 f8ae 	bl	aab6 <mp_emit_bc_make_function>
    } else {
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    }
}
    595a:	e009      	b.n	5970 <close_over_variables_etc+0x114>
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    595c:	68fb      	ldr	r3, [r7, #12]
    595e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5962:	6879      	ldr	r1, [r7, #4]
    5964:	683b      	ldr	r3, [r7, #0]
    5966:	9300      	str	r3, [sp, #0]
    5968:	460b      	mov	r3, r1
    596a:	68b9      	ldr	r1, [r7, #8]
    596c:	f005 f8cc 	bl	ab08 <mp_emit_bc_make_closure>
}
    5970:	bf00      	nop
    5972:	3728      	adds	r7, #40	; 0x28
    5974:	46bd      	mov	sp, r7
    5976:	bd80      	pop	{r7, pc}
    5978:	000200a0 	.word	0x000200a0
    597c:	00020b38 	.word	0x00020b38
    5980:	0001ff80 	.word	0x0001ff80
    5984:	000200b4 	.word	0x000200b4

00005988 <compile_funcdef_lambdef_param>:

STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    5988:	b580      	push	{r7, lr}
    598a:	b088      	sub	sp, #32
    598c:	af00      	add	r7, sp, #0
    598e:	6078      	str	r0, [r7, #4]
    5990:	6039      	str	r1, [r7, #0]
    // For efficiency of the code below we extract the parse-node kind here
    int pn_kind;
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5992:	683b      	ldr	r3, [r7, #0]
    5994:	f003 030f 	and.w	r3, r3, #15
    5998:	2b02      	cmp	r3, #2
    599a:	d103      	bne.n	59a4 <compile_funcdef_lambdef_param+0x1c>
        pn_kind = -1;
    599c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    59a0:	61fb      	str	r3, [r7, #28]
    59a2:	e012      	b.n	59ca <compile_funcdef_lambdef_param+0x42>
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    59a4:	683b      	ldr	r3, [r7, #0]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d004      	beq.n	59b4 <compile_funcdef_lambdef_param+0x2c>
    59aa:	683b      	ldr	r3, [r7, #0]
    59ac:	f003 0303 	and.w	r3, r3, #3
    59b0:	2b00      	cmp	r3, #0
    59b2:	d006      	beq.n	59c2 <compile_funcdef_lambdef_param+0x3a>
    59b4:	4b4c      	ldr	r3, [pc, #304]	; (5ae8 <compile_funcdef_lambdef_param+0x160>)
    59b6:	4a4d      	ldr	r2, [pc, #308]	; (5aec <compile_funcdef_lambdef_param+0x164>)
    59b8:	f44f 7118 	mov.w	r1, #608	; 0x260
    59bc:	484c      	ldr	r0, [pc, #304]	; (5af0 <compile_funcdef_lambdef_param+0x168>)
    59be:	f015 fd5f 	bl	1b480 <__assert_func>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    59c2:	683b      	ldr	r3, [r7, #0]
    59c4:	685b      	ldr	r3, [r3, #4]
    59c6:	b2db      	uxtb	r3, r3
    59c8:	61fb      	str	r3, [r7, #28]
    }

    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    59ca:	69fb      	ldr	r3, [r7, #28]
    59cc:	2b41      	cmp	r3, #65	; 0x41
    59ce:	d002      	beq.n	59d6 <compile_funcdef_lambdef_param+0x4e>
    59d0:	69fb      	ldr	r3, [r7, #28]
    59d2:	2b49      	cmp	r3, #73	; 0x49
    59d4:	d103      	bne.n	59de <compile_funcdef_lambdef_param+0x56>
        comp->have_star = true;
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	2201      	movs	r2, #1
    59da:	719a      	strb	r2, [r3, #6]
    59dc:	e080      	b.n	5ae0 <compile_funcdef_lambdef_param+0x158>
        } else {
            // named star
        }
        */

    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    59de:	69fb      	ldr	r3, [r7, #28]
    59e0:	2b42      	cmp	r3, #66	; 0x42
    59e2:	d07d      	beq.n	5ae0 <compile_funcdef_lambdef_param+0x158>
    59e4:	69fb      	ldr	r3, [r7, #28]
    59e6:	2b4a      	cmp	r3, #74	; 0x4a
    59e8:	d07a      	beq.n	5ae0 <compile_funcdef_lambdef_param+0x158>
        // TODO do we need to do anything with this?

    } else {
        mp_parse_node_t pn_id;
        mp_parse_node_t pn_equal;
        if (pn_kind == -1) {
    59ea:	69fb      	ldr	r3, [r7, #28]
    59ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    59f0:	d104      	bne.n	59fc <compile_funcdef_lambdef_param+0x74>
            // this parameter is just an id

            pn_id = pn;
    59f2:	683b      	ldr	r3, [r7, #0]
    59f4:	61bb      	str	r3, [r7, #24]
            pn_equal = MP_PARSE_NODE_NULL;
    59f6:	2300      	movs	r3, #0
    59f8:	617b      	str	r3, [r7, #20]
    59fa:	e01d      	b.n	5a38 <compile_funcdef_lambdef_param+0xb0>

        } else if (pn_kind == PN_typedargslist_name) {
    59fc:	69fb      	ldr	r3, [r7, #28]
    59fe:	2b40      	cmp	r3, #64	; 0x40
    5a00:	d108      	bne.n	5a14 <compile_funcdef_lambdef_param+0x8c>
            // this parameter has a colon and/or equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5a02:	683b      	ldr	r3, [r7, #0]
    5a04:	613b      	str	r3, [r7, #16]
            pn_id = pns->nodes[0];
    5a06:	693b      	ldr	r3, [r7, #16]
    5a08:	689b      	ldr	r3, [r3, #8]
    5a0a:	61bb      	str	r3, [r7, #24]
            //pn_colon = pns->nodes[1]; // unused
            pn_equal = pns->nodes[2];
    5a0c:	693b      	ldr	r3, [r7, #16]
    5a0e:	691b      	ldr	r3, [r3, #16]
    5a10:	617b      	str	r3, [r7, #20]
    5a12:	e011      	b.n	5a38 <compile_funcdef_lambdef_param+0xb0>

        } else {
            assert(pn_kind == PN_varargslist_name); // should be
    5a14:	69fb      	ldr	r3, [r7, #28]
    5a16:	2b48      	cmp	r3, #72	; 0x48
    5a18:	d006      	beq.n	5a28 <compile_funcdef_lambdef_param+0xa0>
    5a1a:	4b36      	ldr	r3, [pc, #216]	; (5af4 <compile_funcdef_lambdef_param+0x16c>)
    5a1c:	4a33      	ldr	r2, [pc, #204]	; (5aec <compile_funcdef_lambdef_param+0x164>)
    5a1e:	f240 2185 	movw	r1, #645	; 0x285
    5a22:	4833      	ldr	r0, [pc, #204]	; (5af0 <compile_funcdef_lambdef_param+0x168>)
    5a24:	f015 fd2c 	bl	1b480 <__assert_func>
            // this parameter has an equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5a28:	683b      	ldr	r3, [r7, #0]
    5a2a:	60fb      	str	r3, [r7, #12]
            pn_id = pns->nodes[0];
    5a2c:	68fb      	ldr	r3, [r7, #12]
    5a2e:	689b      	ldr	r3, [r3, #8]
    5a30:	61bb      	str	r3, [r7, #24]
            pn_equal = pns->nodes[1];
    5a32:	68fb      	ldr	r3, [r7, #12]
    5a34:	68db      	ldr	r3, [r3, #12]
    5a36:	617b      	str	r3, [r7, #20]
        }

        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    5a38:	697b      	ldr	r3, [r7, #20]
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d10d      	bne.n	5a5a <compile_funcdef_lambdef_param+0xd2>
            // this parameter does not have a default value

            // check for non-default parameters given after default parameters (allowed by parser, but not syntactically valid)
            if (!comp->have_star && comp->num_default_params != 0) {
    5a3e:	687b      	ldr	r3, [r7, #4]
    5a40:	799b      	ldrb	r3, [r3, #6]
    5a42:	2b00      	cmp	r3, #0
    5a44:	d14c      	bne.n	5ae0 <compile_funcdef_lambdef_param+0x158>
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	8adb      	ldrh	r3, [r3, #22]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d048      	beq.n	5ae0 <compile_funcdef_lambdef_param+0x158>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    5a4e:	4a2a      	ldr	r2, [pc, #168]	; (5af8 <compile_funcdef_lambdef_param+0x170>)
    5a50:	6839      	ldr	r1, [r7, #0]
    5a52:	6878      	ldr	r0, [r7, #4]
    5a54:	f7ff f9ab 	bl	4dae <compile_syntax_error>
                return;
    5a58:	e042      	b.n	5ae0 <compile_funcdef_lambdef_param+0x158>

        } else {
            // this parameter has a default value
            // in CPython, None (and True, False?) as default parameters are loaded with LOAD_NAME; don't understandy why

            if (comp->have_star) {
    5a5a:	687b      	ldr	r3, [r7, #4]
    5a5c:	799b      	ldrb	r3, [r3, #6]
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d034      	beq.n	5acc <compile_funcdef_lambdef_param+0x144>
                comp->num_dict_params += 1;
    5a62:	687b      	ldr	r3, [r7, #4]
    5a64:	8a9b      	ldrh	r3, [r3, #20]
    5a66:	3301      	adds	r3, #1
    5a68:	b29a      	uxth	r2, r3
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	829a      	strh	r2, [r3, #20]
                // in MicroPython we put the default dict parameters into a dictionary using the bytecode
                if (comp->num_dict_params == 1) {
    5a6e:	687b      	ldr	r3, [r7, #4]
    5a70:	8a9b      	ldrh	r3, [r3, #20]
    5a72:	2b01      	cmp	r3, #1
    5a74:	d118      	bne.n	5aa8 <compile_funcdef_lambdef_param+0x120>
                    // in MicroPython we put the default positional parameters into a tuple using the bytecode
                    // we need to do this here before we start building the map for the default keywords
                    if (comp->num_default_params > 0) {
    5a76:	687b      	ldr	r3, [r7, #4]
    5a78:	8adb      	ldrh	r3, [r3, #22]
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d008      	beq.n	5a90 <compile_funcdef_lambdef_param+0x108>
                        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5a82:	687b      	ldr	r3, [r7, #4]
    5a84:	8adb      	ldrh	r3, [r3, #22]
    5a86:	2200      	movs	r2, #0
    5a88:	4619      	mov	r1, r3
    5a8a:	f004 ff8c 	bl	a9a6 <mp_emit_bc_build>
    5a8e:	e004      	b.n	5a9a <compile_funcdef_lambdef_param+0x112>
                    } else {
                        EMIT(load_null); // sentinel indicating empty default positional args
    5a90:	687b      	ldr	r3, [r7, #4]
    5a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a94:	4618      	mov	r0, r3
    5a96:	f004 fc71 	bl	a37c <mp_emit_bc_load_null>
                    }
                    // first default dict param, so make the map
                    EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a9e:	2203      	movs	r2, #3
    5aa0:	2100      	movs	r1, #0
    5aa2:	4618      	mov	r0, r3
    5aa4:	f004 ff7f 	bl	a9a6 <mp_emit_bc_build>
                }

                // compile value then key, then store it to the dict
                compile_node(comp, pn_equal);
    5aa8:	6979      	ldr	r1, [r7, #20]
    5aaa:	6878      	ldr	r0, [r7, #4]
    5aac:	f002 ff59 	bl	8962 <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    5ab0:	687b      	ldr	r3, [r7, #4]
    5ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5ab4:	69bb      	ldr	r3, [r7, #24]
    5ab6:	091b      	lsrs	r3, r3, #4
    5ab8:	4619      	mov	r1, r3
    5aba:	4610      	mov	r0, r2
    5abc:	f004 fc3a 	bl	a334 <mp_emit_bc_load_const_str>
                EMIT(store_map);
    5ac0:	687b      	ldr	r3, [r7, #4]
    5ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ac4:	4618      	mov	r0, r3
    5ac6:	f004 ff90 	bl	a9ea <mp_emit_bc_store_map>
    5aca:	e009      	b.n	5ae0 <compile_funcdef_lambdef_param+0x158>
            } else {
                comp->num_default_params += 1;
    5acc:	687b      	ldr	r3, [r7, #4]
    5ace:	8adb      	ldrh	r3, [r3, #22]
    5ad0:	3301      	adds	r3, #1
    5ad2:	b29a      	uxth	r2, r3
    5ad4:	687b      	ldr	r3, [r7, #4]
    5ad6:	82da      	strh	r2, [r3, #22]
                compile_node(comp, pn_equal);
    5ad8:	6979      	ldr	r1, [r7, #20]
    5ada:	6878      	ldr	r0, [r7, #4]
    5adc:	f002 ff41 	bl	8962 <compile_node>
            }
        }
    }
}
    5ae0:	3720      	adds	r7, #32
    5ae2:	46bd      	mov	sp, r7
    5ae4:	bd80      	pop	{r7, pc}
    5ae6:	bf00      	nop
    5ae8:	000200c8 	.word	0x000200c8
    5aec:	00020b54 	.word	0x00020b54
    5af0:	0001ff80 	.word	0x0001ff80
    5af4:	000200e4 	.word	0x000200e4
    5af8:	00020104 	.word	0x00020104

00005afc <compile_funcdef_lambdef>:

STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    5afc:	b580      	push	{r7, lr}
    5afe:	b086      	sub	sp, #24
    5b00:	af00      	add	r7, sp, #0
    5b02:	60f8      	str	r0, [r7, #12]
    5b04:	60b9      	str	r1, [r7, #8]
    5b06:	607a      	str	r2, [r7, #4]
    5b08:	603b      	str	r3, [r7, #0]
    // When we call compile_funcdef_lambdef_param below it can compile an arbitrary
    // expression for default arguments, which may contain a lambda.  The lambda will
    // call here in a nested way, so we must save and restore the relevant state.
    bool orig_have_star = comp->have_star;
    5b0a:	68fb      	ldr	r3, [r7, #12]
    5b0c:	799b      	ldrb	r3, [r3, #6]
    5b0e:	2b00      	cmp	r3, #0
    5b10:	bf14      	ite	ne
    5b12:	2301      	movne	r3, #1
    5b14:	2300      	moveq	r3, #0
    5b16:	75fb      	strb	r3, [r7, #23]
    uint16_t orig_num_dict_params = comp->num_dict_params;
    5b18:	68fb      	ldr	r3, [r7, #12]
    5b1a:	8a9b      	ldrh	r3, [r3, #20]
    5b1c:	82bb      	strh	r3, [r7, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    5b1e:	68fb      	ldr	r3, [r7, #12]
    5b20:	8adb      	ldrh	r3, [r3, #22]
    5b22:	827b      	strh	r3, [r7, #18]

    // compile default parameters
    comp->have_star = false;
    5b24:	68fb      	ldr	r3, [r7, #12]
    5b26:	2200      	movs	r2, #0
    5b28:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = 0;
    5b2a:	68fb      	ldr	r3, [r7, #12]
    5b2c:	2200      	movs	r2, #0
    5b2e:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = 0;
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	2200      	movs	r2, #0
    5b34:	82da      	strh	r2, [r3, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    5b36:	4b1b      	ldr	r3, [pc, #108]	; (5ba4 <compile_funcdef_lambdef+0xa8>)
    5b38:	683a      	ldr	r2, [r7, #0]
    5b3a:	6879      	ldr	r1, [r7, #4]
    5b3c:	68f8      	ldr	r0, [r7, #12]
    5b3e:	f7ff f9d8 	bl	4ef2 <apply_to_single_or_list>

    if (comp->compile_error != MP_OBJ_NULL) {
    5b42:	68fb      	ldr	r3, [r7, #12]
    5b44:	689b      	ldr	r3, [r3, #8]
    5b46:	2b00      	cmp	r3, #0
    5b48:	d127      	bne.n	5b9a <compile_funcdef_lambdef+0x9e>
        return;
    }

    // in MicroPython we put the default positional parameters into a tuple using the bytecode
    // the default keywords args may have already made the tuple; if not, do it now
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    5b4a:	68fb      	ldr	r3, [r7, #12]
    5b4c:	8adb      	ldrh	r3, [r3, #22]
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d010      	beq.n	5b74 <compile_funcdef_lambdef+0x78>
    5b52:	68fb      	ldr	r3, [r7, #12]
    5b54:	8a9b      	ldrh	r3, [r3, #20]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d10c      	bne.n	5b74 <compile_funcdef_lambdef+0x78>
        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5b5a:	68fb      	ldr	r3, [r7, #12]
    5b5c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5b5e:	68fb      	ldr	r3, [r7, #12]
    5b60:	8adb      	ldrh	r3, [r3, #22]
    5b62:	2200      	movs	r2, #0
    5b64:	4619      	mov	r1, r3
    5b66:	f004 ff1e 	bl	a9a6 <mp_emit_bc_build>
        EMIT(load_null); // sentinel indicating empty default keyword args
    5b6a:	68fb      	ldr	r3, [r7, #12]
    5b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b6e:	4618      	mov	r0, r3
    5b70:	f004 fc04 	bl	a37c <mp_emit_bc_load_null>
    }

    // make the function
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    5b74:	68fb      	ldr	r3, [r7, #12]
    5b76:	8adb      	ldrh	r3, [r3, #22]
    5b78:	461a      	mov	r2, r3
    5b7a:	68fb      	ldr	r3, [r7, #12]
    5b7c:	8a9b      	ldrh	r3, [r3, #20]
    5b7e:	68b9      	ldr	r1, [r7, #8]
    5b80:	68f8      	ldr	r0, [r7, #12]
    5b82:	f7ff fe6b 	bl	585c <close_over_variables_etc>

    // restore state
    comp->have_star = orig_have_star;
    5b86:	7dfa      	ldrb	r2, [r7, #23]
    5b88:	68fb      	ldr	r3, [r7, #12]
    5b8a:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = orig_num_dict_params;
    5b8c:	68fb      	ldr	r3, [r7, #12]
    5b8e:	8aba      	ldrh	r2, [r7, #20]
    5b90:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = orig_num_default_params;
    5b92:	68fb      	ldr	r3, [r7, #12]
    5b94:	8a7a      	ldrh	r2, [r7, #18]
    5b96:	82da      	strh	r2, [r3, #22]
    5b98:	e000      	b.n	5b9c <compile_funcdef_lambdef+0xa0>
        return;
    5b9a:	bf00      	nop
}
    5b9c:	3718      	adds	r7, #24
    5b9e:	46bd      	mov	sp, r7
    5ba0:	bd80      	pop	{r7, pc}
    5ba2:	bf00      	nop
    5ba4:	00005989 	.word	0x00005989

00005ba8 <compile_funcdef_helper>:

// leaves function object on stack
// returns function name
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5ba8:	b580      	push	{r7, lr}
    5baa:	b086      	sub	sp, #24
    5bac:	af00      	add	r7, sp, #0
    5bae:	60f8      	str	r0, [r7, #12]
    5bb0:	60b9      	str	r1, [r7, #8]
    5bb2:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5bb4:	68fb      	ldr	r3, [r7, #12]
    5bb6:	795b      	ldrb	r3, [r3, #5]
    5bb8:	2b01      	cmp	r3, #1
    5bba:	d109      	bne.n	5bd0 <compile_funcdef_helper+0x28>
        // create a new scope for this function
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    5bbc:	68ba      	ldr	r2, [r7, #8]
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	2107      	movs	r1, #7
    5bc2:	68f8      	ldr	r0, [r7, #12]
    5bc4:	f7ff f964 	bl	4e90 <scope_new_and_link>
    5bc8:	6178      	str	r0, [r7, #20]
        // store the function scope so the compiling function can use it at each pass
        pns->nodes[4] = (mp_parse_node_t)s;
    5bca:	697a      	ldr	r2, [r7, #20]
    5bcc:	68bb      	ldr	r3, [r7, #8]
    5bce:	619a      	str	r2, [r3, #24]
    }

    // get the scope for this function
    scope_t *fscope = (scope_t*)pns->nodes[4];
    5bd0:	68bb      	ldr	r3, [r7, #8]
    5bd2:	699b      	ldr	r3, [r3, #24]
    5bd4:	613b      	str	r3, [r7, #16]

    // compile the function definition
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    5bd6:	68bb      	ldr	r3, [r7, #8]
    5bd8:	68da      	ldr	r2, [r3, #12]
    5bda:	233e      	movs	r3, #62	; 0x3e
    5bdc:	6939      	ldr	r1, [r7, #16]
    5bde:	68f8      	ldr	r0, [r7, #12]
    5be0:	f7ff ff8c 	bl	5afc <compile_funcdef_lambdef>

    // return its name (the 'f' in "def f(...):")
    return fscope->simple_name;
    5be4:	693b      	ldr	r3, [r7, #16]
    5be6:	8adb      	ldrh	r3, [r3, #22]
}
    5be8:	4618      	mov	r0, r3
    5bea:	3718      	adds	r7, #24
    5bec:	46bd      	mov	sp, r7
    5bee:	bd80      	pop	{r7, pc}

00005bf0 <compile_classdef_helper>:

// leaves class object on stack
// returns class name
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5bf0:	b580      	push	{r7, lr}
    5bf2:	b088      	sub	sp, #32
    5bf4:	af00      	add	r7, sp, #0
    5bf6:	60f8      	str	r0, [r7, #12]
    5bf8:	60b9      	str	r1, [r7, #8]
    5bfa:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5bfc:	68fb      	ldr	r3, [r7, #12]
    5bfe:	795b      	ldrb	r3, [r3, #5]
    5c00:	2b01      	cmp	r3, #1
    5c02:	d109      	bne.n	5c18 <compile_classdef_helper+0x28>
        // create a new scope for this class
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    5c04:	68ba      	ldr	r2, [r7, #8]
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	2101      	movs	r1, #1
    5c0a:	68f8      	ldr	r0, [r7, #12]
    5c0c:	f7ff f940 	bl	4e90 <scope_new_and_link>
    5c10:	61b8      	str	r0, [r7, #24]
        // store the class scope so the compiling function can use it at each pass
        pns->nodes[3] = (mp_parse_node_t)s;
    5c12:	69ba      	ldr	r2, [r7, #24]
    5c14:	68bb      	ldr	r3, [r7, #8]
    5c16:	615a      	str	r2, [r3, #20]
    }

    EMIT(load_build_class);
    5c18:	68fb      	ldr	r3, [r7, #12]
    5c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c1c:	4618      	mov	r0, r3
    5c1e:	f004 fc19 	bl	a454 <mp_emit_bc_load_build_class>

    // scope for this class
    scope_t *cscope = (scope_t*)pns->nodes[3];
    5c22:	68bb      	ldr	r3, [r7, #8]
    5c24:	695b      	ldr	r3, [r3, #20]
    5c26:	617b      	str	r3, [r7, #20]

    // compile the class
    close_over_variables_etc(comp, cscope, 0, 0);
    5c28:	2300      	movs	r3, #0
    5c2a:	2200      	movs	r2, #0
    5c2c:	6979      	ldr	r1, [r7, #20]
    5c2e:	68f8      	ldr	r0, [r7, #12]
    5c30:	f7ff fe14 	bl	585c <close_over_variables_etc>

    // get its name
    EMIT_ARG(load_const_str, cscope->simple_name);
    5c34:	68fb      	ldr	r3, [r7, #12]
    5c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c38:	697b      	ldr	r3, [r7, #20]
    5c3a:	8adb      	ldrh	r3, [r3, #22]
    5c3c:	4619      	mov	r1, r3
    5c3e:	4610      	mov	r0, r2
    5c40:	f004 fb78 	bl	a334 <mp_emit_bc_load_const_str>

    // nodes[1] has parent classes, if any
    // empty parenthesis (eg class C():) gets here as an empty PN_classdef_2 and needs special handling
    mp_parse_node_t parents = pns->nodes[1];
    5c44:	68bb      	ldr	r3, [r7, #8]
    5c46:	68db      	ldr	r3, [r3, #12]
    5c48:	61fb      	str	r3, [r7, #28]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    5c4a:	69fb      	ldr	r3, [r7, #28]
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d00b      	beq.n	5c68 <compile_classdef_helper+0x78>
    5c50:	69fb      	ldr	r3, [r7, #28]
    5c52:	f003 0303 	and.w	r3, r3, #3
    5c56:	2b00      	cmp	r3, #0
    5c58:	d106      	bne.n	5c68 <compile_classdef_helper+0x78>
    5c5a:	69fb      	ldr	r3, [r7, #28]
    5c5c:	685b      	ldr	r3, [r3, #4]
    5c5e:	b2db      	uxtb	r3, r3
    5c60:	2b96      	cmp	r3, #150	; 0x96
    5c62:	d101      	bne.n	5c68 <compile_classdef_helper+0x78>
        parents = MP_PARSE_NODE_NULL;
    5c64:	2300      	movs	r3, #0
    5c66:	61fb      	str	r3, [r7, #28]
    }
    compile_trailer_paren_helper(comp, parents, false, 2);
    5c68:	2302      	movs	r3, #2
    5c6a:	2200      	movs	r2, #0
    5c6c:	69f9      	ldr	r1, [r7, #28]
    5c6e:	68f8      	ldr	r0, [r7, #12]
    5c70:	f002 fa17 	bl	80a2 <compile_trailer_paren_helper>

    // return its name (the 'C' in class C(...):")
    return cscope->simple_name;
    5c74:	697b      	ldr	r3, [r7, #20]
    5c76:	8adb      	ldrh	r3, [r3, #22]
}
    5c78:	4618      	mov	r0, r3
    5c7a:	3720      	adds	r7, #32
    5c7c:	46bd      	mov	sp, r7
    5c7e:	bd80      	pop	{r7, pc}

00005c80 <compile_built_in_decorator>:

// returns true if it was a built-in decorator (even if the built-in had an error)
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5c80:	b580      	push	{r7, lr}
    5c82:	b086      	sub	sp, #24
    5c84:	af00      	add	r7, sp, #0
    5c86:	60f8      	str	r0, [r7, #12]
    5c88:	60b9      	str	r1, [r7, #8]
    5c8a:	607a      	str	r2, [r7, #4]
    5c8c:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	681b      	ldr	r3, [r3, #0]
    5c92:	091b      	lsrs	r3, r3, #4
    5c94:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
    5c98:	d001      	beq.n	5c9e <compile_built_in_decorator+0x1e>
        return false;
    5c9a:	2300      	movs	r3, #0
    5c9c:	e020      	b.n	5ce0 <compile_built_in_decorator+0x60>
    }

    if (name_len != 2) {
    5c9e:	68bb      	ldr	r3, [r7, #8]
    5ca0:	2b02      	cmp	r3, #2
    5ca2:	d008      	beq.n	5cb6 <compile_built_in_decorator+0x36>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5ca4:	687b      	ldr	r3, [r7, #4]
    5ca6:	681b      	ldr	r3, [r3, #0]
    5ca8:	4a0f      	ldr	r2, [pc, #60]	; (5ce8 <compile_built_in_decorator+0x68>)
    5caa:	4619      	mov	r1, r3
    5cac:	68f8      	ldr	r0, [r7, #12]
    5cae:	f7ff f87e 	bl	4dae <compile_syntax_error>
        return true;
    5cb2:	2301      	movs	r3, #1
    5cb4:	e014      	b.n	5ce0 <compile_built_in_decorator+0x60>
    }

    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5cb6:	687b      	ldr	r3, [r7, #4]
    5cb8:	3304      	adds	r3, #4
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	091b      	lsrs	r3, r3, #4
    5cbe:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_bytecode) {
    5cc0:	697b      	ldr	r3, [r7, #20]
    5cc2:	2bf3      	cmp	r3, #243	; 0xf3
    5cc4:	d103      	bne.n	5cce <compile_built_in_decorator+0x4e>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5cc6:	683b      	ldr	r3, [r7, #0]
    5cc8:	2201      	movs	r2, #1
    5cca:	601a      	str	r2, [r3, #0]
    5ccc:	e007      	b.n	5cde <compile_built_in_decorator+0x5e>
    #if MICROPY_EMIT_INLINE_ASM
    } else if (attr == ASM_DECORATOR_QSTR) {
        *emit_options = MP_EMIT_OPT_ASM;
    #endif
    } else {
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	3304      	adds	r3, #4
    5cd2:	681b      	ldr	r3, [r3, #0]
    5cd4:	4a04      	ldr	r2, [pc, #16]	; (5ce8 <compile_built_in_decorator+0x68>)
    5cd6:	4619      	mov	r1, r3
    5cd8:	68f8      	ldr	r0, [r7, #12]
    5cda:	f7ff f868 	bl	4dae <compile_syntax_error>
    }

    return true;
    5cde:	2301      	movs	r3, #1
}
    5ce0:	4618      	mov	r0, r3
    5ce2:	3718      	adds	r7, #24
    5ce4:	46bd      	mov	sp, r7
    5ce6:	bd80      	pop	{r7, pc}
    5ce8:	00020134 	.word	0x00020134

00005cec <compile_decorated>:

STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5cec:	b580      	push	{r7, lr}
    5cee:	b08e      	sub	sp, #56	; 0x38
    5cf0:	af00      	add	r7, sp, #0
    5cf2:	6078      	str	r0, [r7, #4]
    5cf4:	6039      	str	r1, [r7, #0]
    // get the list of decorators
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    5cf6:	683b      	ldr	r3, [r7, #0]
    5cf8:	3308      	adds	r3, #8
    5cfa:	f107 0210 	add.w	r2, r7, #16
    5cfe:	213b      	movs	r1, #59	; 0x3b
    5d00:	4618      	mov	r0, r3
    5d02:	f7fd ff53 	bl	3bac <mp_parse_node_extract_list>
    5d06:	6238      	str	r0, [r7, #32]

    // inherit emit options for this function/class definition
    uint emit_options = comp->scope_cur->emit_options;
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d0c:	8b5b      	ldrh	r3, [r3, #26]
    5d0e:	60fb      	str	r3, [r7, #12]

    // compile each decorator
    int num_built_in_decorators = 0;
    5d10:	2300      	movs	r3, #0
    5d12:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n; i++) {
    5d14:	2300      	movs	r3, #0
    5d16:	633b      	str	r3, [r7, #48]	; 0x30
    5d18:	e075      	b.n	5e06 <compile_decorated+0x11a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    5d1a:	693a      	ldr	r2, [r7, #16]
    5d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d1e:	009b      	lsls	r3, r3, #2
    5d20:	4413      	add	r3, r2
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	2b00      	cmp	r3, #0
    5d26:	d011      	beq.n	5d4c <compile_decorated+0x60>
    5d28:	693a      	ldr	r2, [r7, #16]
    5d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d2c:	009b      	lsls	r3, r3, #2
    5d2e:	4413      	add	r3, r2
    5d30:	681b      	ldr	r3, [r3, #0]
    5d32:	f003 0303 	and.w	r3, r3, #3
    5d36:	2b00      	cmp	r3, #0
    5d38:	d108      	bne.n	5d4c <compile_decorated+0x60>
    5d3a:	693a      	ldr	r2, [r7, #16]
    5d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d3e:	009b      	lsls	r3, r3, #2
    5d40:	4413      	add	r3, r2
    5d42:	681b      	ldr	r3, [r3, #0]
    5d44:	685b      	ldr	r3, [r3, #4]
    5d46:	b2db      	uxtb	r3, r3
    5d48:	2b3a      	cmp	r3, #58	; 0x3a
    5d4a:	d006      	beq.n	5d5a <compile_decorated+0x6e>
    5d4c:	4b50      	ldr	r3, [pc, #320]	; (5e90 <compile_decorated+0x1a4>)
    5d4e:	4a51      	ldr	r2, [pc, #324]	; (5e94 <compile_decorated+0x1a8>)
    5d50:	f240 3136 	movw	r1, #822	; 0x336
    5d54:	4850      	ldr	r0, [pc, #320]	; (5e98 <compile_decorated+0x1ac>)
    5d56:	f015 fb93 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns_decorator = (mp_parse_node_struct_t*)nodes[i];
    5d5a:	693a      	ldr	r2, [r7, #16]
    5d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d5e:	009b      	lsls	r3, r3, #2
    5d60:	4413      	add	r3, r2
    5d62:	681b      	ldr	r3, [r3, #0]
    5d64:	61fb      	str	r3, [r7, #28]

        // nodes[0] contains the decorator function, which is a dotted name
        mp_parse_node_t *name_nodes;
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    5d66:	69fb      	ldr	r3, [r7, #28]
    5d68:	3308      	adds	r3, #8
    5d6a:	f107 0208 	add.w	r2, r7, #8
    5d6e:	2166      	movs	r1, #102	; 0x66
    5d70:	4618      	mov	r0, r3
    5d72:	f7fd ff1b 	bl	3bac <mp_parse_node_extract_list>
    5d76:	61b8      	str	r0, [r7, #24]

        // check for built-in decorators
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    5d78:	68ba      	ldr	r2, [r7, #8]
    5d7a:	f107 030c 	add.w	r3, r7, #12
    5d7e:	69b9      	ldr	r1, [r7, #24]
    5d80:	6878      	ldr	r0, [r7, #4]
    5d82:	f7ff ff7d 	bl	5c80 <compile_built_in_decorator>
    5d86:	4603      	mov	r3, r0
    5d88:	2b00      	cmp	r3, #0
    5d8a:	d003      	beq.n	5d94 <compile_decorated+0xa8>
            // this was a built-in
            num_built_in_decorators += 1;
    5d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d8e:	3301      	adds	r3, #1
    5d90:	637b      	str	r3, [r7, #52]	; 0x34
    5d92:	e035      	b.n	5e00 <compile_decorated+0x114>

        } else {
            // not a built-in, compile normally

            // compile the decorator function
            compile_node(comp, name_nodes[0]);
    5d94:	68bb      	ldr	r3, [r7, #8]
    5d96:	681b      	ldr	r3, [r3, #0]
    5d98:	4619      	mov	r1, r3
    5d9a:	6878      	ldr	r0, [r7, #4]
    5d9c:	f002 fde1 	bl	8962 <compile_node>
            for (int j = 1; j < name_len; j++) {
    5da0:	2301      	movs	r3, #1
    5da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5da4:	e01e      	b.n	5de4 <compile_decorated+0xf8>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    5da6:	68ba      	ldr	r2, [r7, #8]
    5da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5daa:	009b      	lsls	r3, r3, #2
    5dac:	4413      	add	r3, r2
    5dae:	681b      	ldr	r3, [r3, #0]
    5db0:	f003 030f 	and.w	r3, r3, #15
    5db4:	2b02      	cmp	r3, #2
    5db6:	d006      	beq.n	5dc6 <compile_decorated+0xda>
    5db8:	4b38      	ldr	r3, [pc, #224]	; (5e9c <compile_decorated+0x1b0>)
    5dba:	4a36      	ldr	r2, [pc, #216]	; (5e94 <compile_decorated+0x1a8>)
    5dbc:	f44f 7152 	mov.w	r1, #840	; 0x348
    5dc0:	4835      	ldr	r0, [pc, #212]	; (5e98 <compile_decorated+0x1ac>)
    5dc2:	f015 fb5d 	bl	1b480 <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]), MP_EMIT_ATTR_LOAD);
    5dc6:	687b      	ldr	r3, [r7, #4]
    5dc8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5dca:	68ba      	ldr	r2, [r7, #8]
    5dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5dce:	009b      	lsls	r3, r3, #2
    5dd0:	4413      	add	r3, r2
    5dd2:	681b      	ldr	r3, [r3, #0]
    5dd4:	091b      	lsrs	r3, r3, #4
    5dd6:	2200      	movs	r2, #0
    5dd8:	4619      	mov	r1, r3
    5dda:	f004 fb73 	bl	a4c4 <mp_emit_bc_attr>
            for (int j = 1; j < name_len; j++) {
    5dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5de0:	3301      	adds	r3, #1
    5de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5de6:	69bb      	ldr	r3, [r7, #24]
    5de8:	429a      	cmp	r2, r3
    5dea:	dbdc      	blt.n	5da6 <compile_decorated+0xba>
            }

            // nodes[1] contains arguments to the decorator function, if any
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    5dec:	69fb      	ldr	r3, [r7, #28]
    5dee:	68db      	ldr	r3, [r3, #12]
    5df0:	2b00      	cmp	r3, #0
    5df2:	d005      	beq.n	5e00 <compile_decorated+0x114>
                // call the decorator function with the arguments in nodes[1]
                compile_node(comp, pns_decorator->nodes[1]);
    5df4:	69fb      	ldr	r3, [r7, #28]
    5df6:	68db      	ldr	r3, [r3, #12]
    5df8:	4619      	mov	r1, r3
    5dfa:	6878      	ldr	r0, [r7, #4]
    5dfc:	f002 fdb1 	bl	8962 <compile_node>
    for (int i = 0; i < n; i++) {
    5e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5e02:	3301      	adds	r3, #1
    5e04:	633b      	str	r3, [r7, #48]	; 0x30
    5e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5e08:	6a3b      	ldr	r3, [r7, #32]
    5e0a:	429a      	cmp	r2, r3
    5e0c:	db85      	blt.n	5d1a <compile_decorated+0x2e>
            }
        }
    }

    // compile the body (funcdef, async funcdef or classdef) and get its name
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    5e0e:	683b      	ldr	r3, [r7, #0]
    5e10:	68db      	ldr	r3, [r3, #12]
    5e12:	617b      	str	r3, [r7, #20]
    qstr body_name = 0;
    5e14:	2300      	movs	r3, #0
    5e16:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    5e18:	697b      	ldr	r3, [r7, #20]
    5e1a:	685b      	ldr	r3, [r3, #4]
    5e1c:	b2db      	uxtb	r3, r3
    5e1e:	2b03      	cmp	r3, #3
    5e20:	d107      	bne.n	5e32 <compile_decorated+0x146>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    5e22:	68fb      	ldr	r3, [r7, #12]
    5e24:	461a      	mov	r2, r3
    5e26:	6979      	ldr	r1, [r7, #20]
    5e28:	6878      	ldr	r0, [r7, #4]
    5e2a:	f7ff febd 	bl	5ba8 <compile_funcdef_helper>
    5e2e:	62b8      	str	r0, [r7, #40]	; 0x28
    5e30:	e012      	b.n	5e58 <compile_decorated+0x16c>
        body_name = compile_funcdef_helper(comp, pns0, emit_options);
        scope_t *fscope = (scope_t*)pns0->nodes[4];
        fscope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    #endif
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    5e32:	697b      	ldr	r3, [r7, #20]
    5e34:	685b      	ldr	r3, [r3, #4]
    5e36:	b2db      	uxtb	r3, r3
    5e38:	2b33      	cmp	r3, #51	; 0x33
    5e3a:	d006      	beq.n	5e4a <compile_decorated+0x15e>
    5e3c:	4b18      	ldr	r3, [pc, #96]	; (5ea0 <compile_decorated+0x1b4>)
    5e3e:	4a15      	ldr	r2, [pc, #84]	; (5e94 <compile_decorated+0x1a8>)
    5e40:	f240 3162 	movw	r1, #866	; 0x362
    5e44:	4814      	ldr	r0, [pc, #80]	; (5e98 <compile_decorated+0x1ac>)
    5e46:	f015 fb1b 	bl	1b480 <__assert_func>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    5e4a:	68fb      	ldr	r3, [r7, #12]
    5e4c:	461a      	mov	r2, r3
    5e4e:	6979      	ldr	r1, [r7, #20]
    5e50:	6878      	ldr	r0, [r7, #4]
    5e52:	f7ff fecd 	bl	5bf0 <compile_classdef_helper>
    5e56:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    // call each decorator
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5e58:	2300      	movs	r3, #0
    5e5a:	627b      	str	r3, [r7, #36]	; 0x24
    5e5c:	e009      	b.n	5e72 <compile_decorated+0x186>
        EMIT_ARG(call_function, 1, 0, 0);
    5e5e:	687b      	ldr	r3, [r7, #4]
    5e60:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5e62:	2300      	movs	r3, #0
    5e64:	2200      	movs	r2, #0
    5e66:	2101      	movs	r1, #1
    5e68:	f004 fed2 	bl	ac10 <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e6e:	3301      	adds	r3, #1
    5e70:	627b      	str	r3, [r7, #36]	; 0x24
    5e72:	6a3a      	ldr	r2, [r7, #32]
    5e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5e76:	1ad2      	subs	r2, r2, r3
    5e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e7a:	429a      	cmp	r2, r3
    5e7c:	dcef      	bgt.n	5e5e <compile_decorated+0x172>
    }

    // store func/class object into name
    compile_store_id(comp, body_name);
    5e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5e80:	6878      	ldr	r0, [r7, #4]
    5e82:	f7ff f8bd 	bl	5000 <compile_store_id>
}
    5e86:	bf00      	nop
    5e88:	3738      	adds	r7, #56	; 0x38
    5e8a:	46bd      	mov	sp, r7
    5e8c:	bd80      	pop	{r7, pc}
    5e8e:	bf00      	nop
    5e90:	00020154 	.word	0x00020154
    5e94:	00020b74 	.word	0x00020b74
    5e98:	0001ff80 	.word	0x0001ff80
    5e9c:	0002018c 	.word	0x0002018c
    5ea0:	000201b0 	.word	0x000201b0

00005ea4 <compile_funcdef>:

STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5ea4:	b580      	push	{r7, lr}
    5ea6:	b084      	sub	sp, #16
    5ea8:	af00      	add	r7, sp, #0
    5eaa:	6078      	str	r0, [r7, #4]
    5eac:	6039      	str	r1, [r7, #0]
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    5eae:	687b      	ldr	r3, [r7, #4]
    5eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5eb2:	8b5b      	ldrh	r3, [r3, #26]
    5eb4:	461a      	mov	r2, r3
    5eb6:	6839      	ldr	r1, [r7, #0]
    5eb8:	6878      	ldr	r0, [r7, #4]
    5eba:	f7ff fe75 	bl	5ba8 <compile_funcdef_helper>
    5ebe:	60f8      	str	r0, [r7, #12]
    // store function object into function name
    compile_store_id(comp, fname);
    5ec0:	68f9      	ldr	r1, [r7, #12]
    5ec2:	6878      	ldr	r0, [r7, #4]
    5ec4:	f7ff f89c 	bl	5000 <compile_store_id>
}
    5ec8:	bf00      	nop
    5eca:	3710      	adds	r7, #16
    5ecc:	46bd      	mov	sp, r7
    5ece:	bd80      	pop	{r7, pc}

00005ed0 <c_del_stmt>:

STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    5ed0:	b580      	push	{r7, lr}
    5ed2:	b08a      	sub	sp, #40	; 0x28
    5ed4:	af00      	add	r7, sp, #0
    5ed6:	6078      	str	r0, [r7, #4]
    5ed8:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5eda:	683b      	ldr	r3, [r7, #0]
    5edc:	f003 030f 	and.w	r3, r3, #15
    5ee0:	2b02      	cmp	r3, #2
    5ee2:	d106      	bne.n	5ef2 <c_del_stmt+0x22>
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    5ee4:	683b      	ldr	r3, [r7, #0]
    5ee6:	091b      	lsrs	r3, r3, #4
    5ee8:	4619      	mov	r1, r3
    5eea:	6878      	ldr	r0, [r7, #4]
    5eec:	f7ff f8a6 	bl	503c <compile_delete_id>
    } else {
        // some arbitrary statement that we can't delete (eg del 1)
        goto cannot_delete;
    }

    return;
    5ef0:	e122      	b.n	6138 <c_del_stmt+0x268>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5ef2:	683b      	ldr	r3, [r7, #0]
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	f000 808f 	beq.w	6018 <c_del_stmt+0x148>
    5efa:	683b      	ldr	r3, [r7, #0]
    5efc:	f003 0303 	and.w	r3, r3, #3
    5f00:	2b00      	cmp	r3, #0
    5f02:	f040 8089 	bne.w	6018 <c_del_stmt+0x148>
    5f06:	683b      	ldr	r3, [r7, #0]
    5f08:	685b      	ldr	r3, [r3, #4]
    5f0a:	b2db      	uxtb	r3, r3
    5f0c:	2b29      	cmp	r3, #41	; 0x29
    5f0e:	f040 8083 	bne.w	6018 <c_del_stmt+0x148>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5f12:	683b      	ldr	r3, [r7, #0]
    5f14:	61bb      	str	r3, [r7, #24]
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    5f16:	69bb      	ldr	r3, [r7, #24]
    5f18:	689b      	ldr	r3, [r3, #8]
    5f1a:	4619      	mov	r1, r3
    5f1c:	6878      	ldr	r0, [r7, #4]
    5f1e:	f002 fd20 	bl	8962 <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5f22:	69bb      	ldr	r3, [r7, #24]
    5f24:	68db      	ldr	r3, [r3, #12]
    5f26:	2b00      	cmp	r3, #0
    5f28:	f000 8101 	beq.w	612e <c_del_stmt+0x25e>
    5f2c:	69bb      	ldr	r3, [r7, #24]
    5f2e:	68db      	ldr	r3, [r3, #12]
    5f30:	f003 0303 	and.w	r3, r3, #3
    5f34:	2b00      	cmp	r3, #0
    5f36:	f040 80fa 	bne.w	612e <c_del_stmt+0x25e>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    5f3a:	69bb      	ldr	r3, [r7, #24]
    5f3c:	68db      	ldr	r3, [r3, #12]
    5f3e:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f42:	685b      	ldr	r3, [r3, #4]
    5f44:	b2db      	uxtb	r3, r3
    5f46:	2b86      	cmp	r3, #134	; 0x86
    5f48:	d137      	bne.n	5fba <c_del_stmt+0xea>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    5f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f4c:	685b      	ldr	r3, [r3, #4]
    5f4e:	0a1b      	lsrs	r3, r3, #8
    5f50:	617b      	str	r3, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    5f52:	2300      	movs	r3, #0
    5f54:	623b      	str	r3, [r7, #32]
    5f56:	e00b      	b.n	5f70 <c_del_stmt+0xa0>
                    compile_node(comp, pns1->nodes[i]);
    5f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f5a:	6a3a      	ldr	r2, [r7, #32]
    5f5c:	3202      	adds	r2, #2
    5f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f62:	4619      	mov	r1, r3
    5f64:	6878      	ldr	r0, [r7, #4]
    5f66:	f002 fcfc 	bl	8962 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5f6a:	6a3b      	ldr	r3, [r7, #32]
    5f6c:	3301      	adds	r3, #1
    5f6e:	623b      	str	r3, [r7, #32]
    5f70:	697b      	ldr	r3, [r7, #20]
    5f72:	1e5a      	subs	r2, r3, #1
    5f74:	6a3b      	ldr	r3, [r7, #32]
    5f76:	429a      	cmp	r2, r3
    5f78:	dcee      	bgt.n	5f58 <c_del_stmt+0x88>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5f7a:	697b      	ldr	r3, [r7, #20]
    5f7c:	1e5a      	subs	r2, r3, #1
    5f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f80:	3202      	adds	r2, #2
    5f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f86:	2b00      	cmp	r3, #0
    5f88:	d009      	beq.n	5f9e <c_del_stmt+0xce>
    5f8a:	697b      	ldr	r3, [r7, #20]
    5f8c:	1e5a      	subs	r2, r3, #1
    5f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f90:	3202      	adds	r2, #2
    5f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f96:	f003 0303 	and.w	r3, r3, #3
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	d006      	beq.n	5fac <c_del_stmt+0xdc>
    5f9e:	4b68      	ldr	r3, [pc, #416]	; (6140 <c_del_stmt+0x270>)
    5fa0:	4a68      	ldr	r2, [pc, #416]	; (6144 <c_del_stmt+0x274>)
    5fa2:	f44f 7161 	mov.w	r1, #900	; 0x384
    5fa6:	4868      	ldr	r0, [pc, #416]	; (6148 <c_del_stmt+0x278>)
    5fa8:	f015 fa6a 	bl	1b480 <__assert_func>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    5fac:	697b      	ldr	r3, [r7, #20]
    5fae:	1e5a      	subs	r2, r3, #1
    5fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fb2:	3202      	adds	r2, #2
    5fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5fb8:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fbc:	685b      	ldr	r3, [r3, #4]
    5fbe:	b2db      	uxtb	r3, r3
    5fc0:	2b2e      	cmp	r3, #46	; 0x2e
    5fc2:	d10c      	bne.n	5fde <c_del_stmt+0x10e>
                compile_node(comp, pns1->nodes[0]);
    5fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fc6:	689b      	ldr	r3, [r3, #8]
    5fc8:	4619      	mov	r1, r3
    5fca:	6878      	ldr	r0, [r7, #4]
    5fcc:	f002 fcc9 	bl	8962 <compile_node>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_DELETE);
    5fd0:	687b      	ldr	r3, [r7, #4]
    5fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5fd4:	2102      	movs	r1, #2
    5fd6:	4618      	mov	r0, r3
    5fd8:	f004 fa4c 	bl	a474 <mp_emit_bc_subscr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5fdc:	e0a1      	b.n	6122 <c_del_stmt+0x252>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fe0:	685b      	ldr	r3, [r3, #4]
    5fe2:	b2db      	uxtb	r3, r3
    5fe4:	2b2f      	cmp	r3, #47	; 0x2f
    5fe6:	f040 809d 	bne.w	6124 <c_del_stmt+0x254>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    5fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fec:	689b      	ldr	r3, [r3, #8]
    5fee:	f003 030f 	and.w	r3, r3, #15
    5ff2:	2b02      	cmp	r3, #2
    5ff4:	d006      	beq.n	6004 <c_del_stmt+0x134>
    5ff6:	4b55      	ldr	r3, [pc, #340]	; (614c <c_del_stmt+0x27c>)
    5ff8:	4a52      	ldr	r2, [pc, #328]	; (6144 <c_del_stmt+0x274>)
    5ffa:	f240 318b 	movw	r1, #907	; 0x38b
    5ffe:	4852      	ldr	r0, [pc, #328]	; (6148 <c_del_stmt+0x278>)
    6000:	f015 fa3e 	bl	1b480 <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_DELETE);
    6004:	687b      	ldr	r3, [r7, #4]
    6006:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    600a:	689b      	ldr	r3, [r3, #8]
    600c:	091b      	lsrs	r3, r3, #4
    600e:	2202      	movs	r2, #2
    6010:	4619      	mov	r1, r3
    6012:	f004 fa57 	bl	a4c4 <mp_emit_bc_attr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    6016:	e084      	b.n	6122 <c_del_stmt+0x252>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    6018:	683b      	ldr	r3, [r7, #0]
    601a:	2b00      	cmp	r3, #0
    601c:	f000 8087 	beq.w	612e <c_del_stmt+0x25e>
    6020:	683b      	ldr	r3, [r7, #0]
    6022:	f003 0303 	and.w	r3, r3, #3
    6026:	2b00      	cmp	r3, #0
    6028:	f040 8081 	bne.w	612e <c_del_stmt+0x25e>
    602c:	683b      	ldr	r3, [r7, #0]
    602e:	685b      	ldr	r3, [r3, #4]
    6030:	b2db      	uxtb	r3, r3
    6032:	2b2a      	cmp	r3, #42	; 0x2a
    6034:	d17b      	bne.n	612e <c_del_stmt+0x25e>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    6036:	683b      	ldr	r3, [r7, #0]
    6038:	689b      	ldr	r3, [r3, #8]
    603a:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    603c:	683b      	ldr	r3, [r7, #0]
    603e:	2b00      	cmp	r3, #0
    6040:	d072      	beq.n	6128 <c_del_stmt+0x258>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    6042:	683b      	ldr	r3, [r7, #0]
    6044:	2b00      	cmp	r3, #0
    6046:	d009      	beq.n	605c <c_del_stmt+0x18c>
    6048:	683b      	ldr	r3, [r7, #0]
    604a:	f003 0303 	and.w	r3, r3, #3
    604e:	2b00      	cmp	r3, #0
    6050:	d104      	bne.n	605c <c_del_stmt+0x18c>
    6052:	683b      	ldr	r3, [r7, #0]
    6054:	685b      	ldr	r3, [r3, #4]
    6056:	b2db      	uxtb	r3, r3
    6058:	2b8a      	cmp	r3, #138	; 0x8a
    605a:	d006      	beq.n	606a <c_del_stmt+0x19a>
    605c:	4b3c      	ldr	r3, [pc, #240]	; (6150 <c_del_stmt+0x280>)
    605e:	4a39      	ldr	r2, [pc, #228]	; (6144 <c_del_stmt+0x274>)
    6060:	f240 3199 	movw	r1, #921	; 0x399
    6064:	4838      	ldr	r0, [pc, #224]	; (6148 <c_del_stmt+0x278>)
    6066:	f015 fa0b 	bl	1b480 <__assert_func>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    606a:	683b      	ldr	r3, [r7, #0]
    606c:	613b      	str	r3, [r7, #16]
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    606e:	693b      	ldr	r3, [r7, #16]
    6070:	68db      	ldr	r3, [r3, #12]
    6072:	2b00      	cmp	r3, #0
    6074:	d048      	beq.n	6108 <c_del_stmt+0x238>
    6076:	693b      	ldr	r3, [r7, #16]
    6078:	68db      	ldr	r3, [r3, #12]
    607a:	f003 0303 	and.w	r3, r3, #3
    607e:	2b00      	cmp	r3, #0
    6080:	d142      	bne.n	6108 <c_del_stmt+0x238>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    6082:	693b      	ldr	r3, [r7, #16]
    6084:	68db      	ldr	r3, [r3, #12]
    6086:	60fb      	str	r3, [r7, #12]
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    6088:	68fb      	ldr	r3, [r7, #12]
    608a:	685b      	ldr	r3, [r3, #4]
    608c:	b2db      	uxtb	r3, r3
    608e:	2b8d      	cmp	r3, #141	; 0x8d
    6090:	d111      	bne.n	60b6 <c_del_stmt+0x1e6>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    6092:	68fb      	ldr	r3, [r7, #12]
    6094:	689b      	ldr	r3, [r3, #8]
    6096:	2b00      	cmp	r3, #0
    6098:	d006      	beq.n	60a8 <c_del_stmt+0x1d8>
    609a:	4b2e      	ldr	r3, [pc, #184]	; (6154 <c_del_stmt+0x284>)
    609c:	4a29      	ldr	r2, [pc, #164]	; (6144 <c_del_stmt+0x274>)
    609e:	f240 31a1 	movw	r1, #929	; 0x3a1
    60a2:	4829      	ldr	r0, [pc, #164]	; (6148 <c_del_stmt+0x278>)
    60a4:	f015 f9ec 	bl	1b480 <__assert_func>
                    c_del_stmt(comp, pns->nodes[0]);
    60a8:	693b      	ldr	r3, [r7, #16]
    60aa:	689b      	ldr	r3, [r3, #8]
    60ac:	4619      	mov	r1, r3
    60ae:	6878      	ldr	r0, [r7, #4]
    60b0:	f7ff ff0e 	bl	5ed0 <c_del_stmt>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    60b4:	e035      	b.n	6122 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    60b6:	68fb      	ldr	r3, [r7, #12]
    60b8:	685b      	ldr	r3, [r3, #4]
    60ba:	b2db      	uxtb	r3, r3
    60bc:	2b8e      	cmp	r3, #142	; 0x8e
    60be:	d11d      	bne.n	60fc <c_del_stmt+0x22c>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    60c0:	68fb      	ldr	r3, [r7, #12]
    60c2:	685b      	ldr	r3, [r3, #4]
    60c4:	0a1b      	lsrs	r3, r3, #8
    60c6:	60bb      	str	r3, [r7, #8]
                    c_del_stmt(comp, pns->nodes[0]);
    60c8:	693b      	ldr	r3, [r7, #16]
    60ca:	689b      	ldr	r3, [r3, #8]
    60cc:	4619      	mov	r1, r3
    60ce:	6878      	ldr	r0, [r7, #4]
    60d0:	f7ff fefe 	bl	5ed0 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    60d4:	2300      	movs	r3, #0
    60d6:	61fb      	str	r3, [r7, #28]
    60d8:	e00b      	b.n	60f2 <c_del_stmt+0x222>
                        c_del_stmt(comp, pns1->nodes[i]);
    60da:	68fb      	ldr	r3, [r7, #12]
    60dc:	69fa      	ldr	r2, [r7, #28]
    60de:	3202      	adds	r2, #2
    60e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60e4:	4619      	mov	r1, r3
    60e6:	6878      	ldr	r0, [r7, #4]
    60e8:	f7ff fef2 	bl	5ed0 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    60ec:	69fb      	ldr	r3, [r7, #28]
    60ee:	3301      	adds	r3, #1
    60f0:	61fb      	str	r3, [r7, #28]
    60f2:	69fa      	ldr	r2, [r7, #28]
    60f4:	68bb      	ldr	r3, [r7, #8]
    60f6:	429a      	cmp	r2, r3
    60f8:	dbef      	blt.n	60da <c_del_stmt+0x20a>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    60fa:	e012      	b.n	6122 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    60fc:	68fb      	ldr	r3, [r7, #12]
    60fe:	685b      	ldr	r3, [r3, #4]
    6100:	b2db      	uxtb	r3, r3
    6102:	2b9f      	cmp	r3, #159	; 0x9f
    6104:	d012      	beq.n	612c <c_del_stmt+0x25c>
                    goto sequence_with_2_items;
    6106:	bf00      	nop
                c_del_stmt(comp, pns->nodes[0]);
    6108:	693b      	ldr	r3, [r7, #16]
    610a:	689b      	ldr	r3, [r3, #8]
    610c:	4619      	mov	r1, r3
    610e:	6878      	ldr	r0, [r7, #4]
    6110:	f7ff fede 	bl	5ed0 <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    6114:	693b      	ldr	r3, [r7, #16]
    6116:	68db      	ldr	r3, [r3, #12]
    6118:	4619      	mov	r1, r3
    611a:	6878      	ldr	r0, [r7, #4]
    611c:	f7ff fed8 	bl	5ed0 <c_del_stmt>
    return;
    6120:	e00a      	b.n	6138 <c_del_stmt+0x268>
    6122:	e009      	b.n	6138 <c_del_stmt+0x268>
                goto cannot_delete;
    6124:	bf00      	nop
    6126:	e002      	b.n	612e <c_del_stmt+0x25e>
            goto cannot_delete;
    6128:	bf00      	nop
    612a:	e000      	b.n	612e <c_del_stmt+0x25e>
                    goto cannot_delete;
    612c:	bf00      	nop

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    612e:	4a0a      	ldr	r2, [pc, #40]	; (6158 <c_del_stmt+0x288>)
    6130:	6839      	ldr	r1, [r7, #0]
    6132:	6878      	ldr	r0, [r7, #4]
    6134:	f7fe fe3b 	bl	4dae <compile_syntax_error>
}
    6138:	3728      	adds	r7, #40	; 0x28
    613a:	46bd      	mov	sp, r7
    613c:	bd80      	pop	{r7, pc}
    613e:	bf00      	nop
    6140:	0001ffd4 	.word	0x0001ffd4
    6144:	00020b88 	.word	0x00020b88
    6148:	0001ff80 	.word	0x0001ff80
    614c:	00020000 	.word	0x00020000
    6150:	000201e4 	.word	0x000201e4
    6154:	00020218 	.word	0x00020218
    6158:	00020240 	.word	0x00020240

0000615c <compile_del_stmt>:

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    615c:	b580      	push	{r7, lr}
    615e:	b082      	sub	sp, #8
    6160:	af00      	add	r7, sp, #0
    6162:	6078      	str	r0, [r7, #4]
    6164:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    6166:	683b      	ldr	r3, [r7, #0]
    6168:	6899      	ldr	r1, [r3, #8]
    616a:	4b04      	ldr	r3, [pc, #16]	; (617c <compile_del_stmt+0x20>)
    616c:	2290      	movs	r2, #144	; 0x90
    616e:	6878      	ldr	r0, [r7, #4]
    6170:	f7fe febf 	bl	4ef2 <apply_to_single_or_list>
}
    6174:	bf00      	nop
    6176:	3708      	adds	r7, #8
    6178:	46bd      	mov	sp, r7
    617a:	bd80      	pop	{r7, pc}
    617c:	00005ed1 	.word	0x00005ed1

00006180 <compile_break_cont_stmt>:

STATIC void compile_break_cont_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6180:	b580      	push	{r7, lr}
    6182:	b084      	sub	sp, #16
    6184:	af00      	add	r7, sp, #0
    6186:	6078      	str	r0, [r7, #4]
    6188:	6039      	str	r1, [r7, #0]
    uint16_t label;
    const char *error_msg;
    if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_break_stmt) {
    618a:	683b      	ldr	r3, [r7, #0]
    618c:	685b      	ldr	r3, [r3, #4]
    618e:	b2db      	uxtb	r3, r3
    6190:	2b09      	cmp	r3, #9
    6192:	d105      	bne.n	61a0 <compile_break_cont_stmt+0x20>
        label = comp->break_label;
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	8b1b      	ldrh	r3, [r3, #24]
    6198:	81fb      	strh	r3, [r7, #14]
        error_msg = "'break' outside loop";
    619a:	4b18      	ldr	r3, [pc, #96]	; (61fc <compile_break_cont_stmt+0x7c>)
    619c:	60bb      	str	r3, [r7, #8]
    619e:	e004      	b.n	61aa <compile_break_cont_stmt+0x2a>
    } else {
        label = comp->continue_label;
    61a0:	687b      	ldr	r3, [r7, #4]
    61a2:	8b5b      	ldrh	r3, [r3, #26]
    61a4:	81fb      	strh	r3, [r7, #14]
        error_msg = "'continue' outside loop";
    61a6:	4b16      	ldr	r3, [pc, #88]	; (6200 <compile_break_cont_stmt+0x80>)
    61a8:	60bb      	str	r3, [r7, #8]
    }
    if (label == INVALID_LABEL) {
    61aa:	89fb      	ldrh	r3, [r7, #14]
    61ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
    61b0:	4293      	cmp	r3, r2
    61b2:	d105      	bne.n	61c0 <compile_break_cont_stmt+0x40>
        compile_syntax_error(comp, (mp_parse_node_t)pns, error_msg);
    61b4:	683b      	ldr	r3, [r7, #0]
    61b6:	68ba      	ldr	r2, [r7, #8]
    61b8:	4619      	mov	r1, r3
    61ba:	6878      	ldr	r0, [r7, #4]
    61bc:	f7fe fdf7 	bl	4dae <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    61c0:	687b      	ldr	r3, [r7, #4]
    61c2:	8b9a      	ldrh	r2, [r3, #28]
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	8bdb      	ldrh	r3, [r3, #30]
    61c8:	429a      	cmp	r2, r3
    61ca:	d206      	bcs.n	61da <compile_break_cont_stmt+0x5a>
    61cc:	4b0d      	ldr	r3, [pc, #52]	; (6204 <compile_break_cont_stmt+0x84>)
    61ce:	4a0e      	ldr	r2, [pc, #56]	; (6208 <compile_break_cont_stmt+0x88>)
    61d0:	f240 31d3 	movw	r1, #979	; 0x3d3
    61d4:	480d      	ldr	r0, [pc, #52]	; (620c <compile_break_cont_stmt+0x8c>)
    61d6:	f015 f953 	bl	1b480 <__assert_func>
    EMIT_ARG(unwind_jump, label, comp->cur_except_level - comp->break_continue_except_level);
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    61de:	89f9      	ldrh	r1, [r7, #14]
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	8b9b      	ldrh	r3, [r3, #28]
    61e4:	461a      	mov	r2, r3
    61e6:	687b      	ldr	r3, [r7, #4]
    61e8:	8bdb      	ldrh	r3, [r3, #30]
    61ea:	1ad3      	subs	r3, r2, r3
    61ec:	461a      	mov	r2, r3
    61ee:	f004 fa9d 	bl	a72c <mp_emit_bc_unwind_jump>
}
    61f2:	bf00      	nop
    61f4:	3710      	adds	r7, #16
    61f6:	46bd      	mov	sp, r7
    61f8:	bd80      	pop	{r7, pc}
    61fa:	bf00      	nop
    61fc:	00020258 	.word	0x00020258
    6200:	00020270 	.word	0x00020270
    6204:	00020288 	.word	0x00020288
    6208:	00020b94 	.word	0x00020b94
    620c:	0001ff80 	.word	0x0001ff80

00006210 <compile_return_stmt>:

STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6210:	b580      	push	{r7, lr}
    6212:	b082      	sub	sp, #8
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
    6218:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    621a:	687b      	ldr	r3, [r7, #4]
    621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    621e:	681b      	ldr	r3, [r3, #0]
    6220:	2b07      	cmp	r3, #7
    6222:	d006      	beq.n	6232 <compile_return_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    6224:	683b      	ldr	r3, [r7, #0]
    6226:	4a0f      	ldr	r2, [pc, #60]	; (6264 <compile_return_stmt+0x54>)
    6228:	4619      	mov	r1, r3
    622a:	6878      	ldr	r0, [r7, #4]
    622c:	f7fe fdbf 	bl	4dae <compile_syntax_error>
        return;
    6230:	e015      	b.n	625e <compile_return_stmt+0x4e>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    6232:	683b      	ldr	r3, [r7, #0]
    6234:	689b      	ldr	r3, [r3, #8]
    6236:	2b00      	cmp	r3, #0
    6238:	d106      	bne.n	6248 <compile_return_stmt+0x38>
        // no argument to 'return', so return None
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    623a:	687b      	ldr	r3, [r7, #4]
    623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    623e:	210e      	movs	r1, #14
    6240:	4618      	mov	r0, r3
    6242:	f004 f819 	bl	a278 <mp_emit_bc_load_const_tok>
    6246:	e005      	b.n	6254 <compile_return_stmt+0x44>
        compile_node(comp, pns_test_if_expr->nodes[0]); // success value
        EMIT(return_value);
        EMIT_ARG(label_assign, l_fail);
        compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    } else {
        compile_node(comp, pns->nodes[0]);
    6248:	683b      	ldr	r3, [r7, #0]
    624a:	689b      	ldr	r3, [r3, #8]
    624c:	4619      	mov	r1, r3
    624e:	6878      	ldr	r0, [r7, #4]
    6250:	f002 fb87 	bl	8962 <compile_node>
    }
    EMIT(return_value);
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6258:	4618      	mov	r0, r3
    625a:	f004 fd04 	bl	ac66 <mp_emit_bc_return_value>
}
    625e:	3708      	adds	r7, #8
    6260:	46bd      	mov	sp, r7
    6262:	bd80      	pop	{r7, pc}
    6264:	000202c4 	.word	0x000202c4

00006268 <compile_yield_stmt>:

STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6268:	b580      	push	{r7, lr}
    626a:	b082      	sub	sp, #8
    626c:	af00      	add	r7, sp, #0
    626e:	6078      	str	r0, [r7, #4]
    6270:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    6272:	683b      	ldr	r3, [r7, #0]
    6274:	689b      	ldr	r3, [r3, #8]
    6276:	4619      	mov	r1, r3
    6278:	6878      	ldr	r0, [r7, #4]
    627a:	f002 fb72 	bl	8962 <compile_node>
    EMIT(pop_top);
    627e:	687b      	ldr	r3, [r7, #4]
    6280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6282:	4618      	mov	r0, r3
    6284:	f004 f9d3 	bl	a62e <mp_emit_bc_pop_top>
}
    6288:	bf00      	nop
    628a:	3708      	adds	r7, #8
    628c:	46bd      	mov	sp, r7
    628e:	bd80      	pop	{r7, pc}

00006290 <compile_raise_stmt>:

STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6290:	b580      	push	{r7, lr}
    6292:	b082      	sub	sp, #8
    6294:	af00      	add	r7, sp, #0
    6296:	6078      	str	r0, [r7, #4]
    6298:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    629a:	683b      	ldr	r3, [r7, #0]
    629c:	689b      	ldr	r3, [r3, #8]
    629e:	2b00      	cmp	r3, #0
    62a0:	d106      	bne.n	62b0 <compile_raise_stmt+0x20>
        // raise
        EMIT_ARG(raise_varargs, 0);
    62a2:	687b      	ldr	r3, [r7, #4]
    62a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62a6:	2100      	movs	r1, #0
    62a8:	4618      	mov	r0, r3
    62aa:	f004 fcf0 	bl	ac8e <mp_emit_bc_raise_varargs>
    } else {
        // raise x
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(raise_varargs, 1);
    }
}
    62ae:	e031      	b.n	6314 <compile_raise_stmt+0x84>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    62b0:	683b      	ldr	r3, [r7, #0]
    62b2:	689b      	ldr	r3, [r3, #8]
    62b4:	2b00      	cmp	r3, #0
    62b6:	d021      	beq.n	62fc <compile_raise_stmt+0x6c>
    62b8:	683b      	ldr	r3, [r7, #0]
    62ba:	689b      	ldr	r3, [r3, #8]
    62bc:	f003 0303 	and.w	r3, r3, #3
    62c0:	2b00      	cmp	r3, #0
    62c2:	d11b      	bne.n	62fc <compile_raise_stmt+0x6c>
    62c4:	683b      	ldr	r3, [r7, #0]
    62c6:	689b      	ldr	r3, [r3, #8]
    62c8:	685b      	ldr	r3, [r3, #4]
    62ca:	b2db      	uxtb	r3, r3
    62cc:	2b58      	cmp	r3, #88	; 0x58
    62ce:	d115      	bne.n	62fc <compile_raise_stmt+0x6c>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    62d0:	683b      	ldr	r3, [r7, #0]
    62d2:	689b      	ldr	r3, [r3, #8]
    62d4:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    62d6:	683b      	ldr	r3, [r7, #0]
    62d8:	689b      	ldr	r3, [r3, #8]
    62da:	4619      	mov	r1, r3
    62dc:	6878      	ldr	r0, [r7, #4]
    62de:	f002 fb40 	bl	8962 <compile_node>
        compile_node(comp, pns->nodes[1]);
    62e2:	683b      	ldr	r3, [r7, #0]
    62e4:	68db      	ldr	r3, [r3, #12]
    62e6:	4619      	mov	r1, r3
    62e8:	6878      	ldr	r0, [r7, #4]
    62ea:	f002 fb3a 	bl	8962 <compile_node>
        EMIT_ARG(raise_varargs, 2);
    62ee:	687b      	ldr	r3, [r7, #4]
    62f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62f2:	2102      	movs	r1, #2
    62f4:	4618      	mov	r0, r3
    62f6:	f004 fcca 	bl	ac8e <mp_emit_bc_raise_varargs>
}
    62fa:	e00b      	b.n	6314 <compile_raise_stmt+0x84>
        compile_node(comp, pns->nodes[0]);
    62fc:	683b      	ldr	r3, [r7, #0]
    62fe:	689b      	ldr	r3, [r3, #8]
    6300:	4619      	mov	r1, r3
    6302:	6878      	ldr	r0, [r7, #4]
    6304:	f002 fb2d 	bl	8962 <compile_node>
        EMIT_ARG(raise_varargs, 1);
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    630c:	2101      	movs	r1, #1
    630e:	4618      	mov	r0, r3
    6310:	f004 fcbd 	bl	ac8e <mp_emit_bc_raise_varargs>
}
    6314:	bf00      	nop
    6316:	3708      	adds	r7, #8
    6318:	46bd      	mov	sp, r7
    631a:	bd80      	pop	{r7, pc}

0000631c <do_import_name>:

// q_base holds the base of the name
// eg   a -> q_base=a
//      a.b.c -> q_base=a
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    631c:	b580      	push	{r7, lr}
    631e:	b092      	sub	sp, #72	; 0x48
    6320:	af00      	add	r7, sp, #0
    6322:	60f8      	str	r0, [r7, #12]
    6324:	60b9      	str	r1, [r7, #8]
    6326:	607a      	str	r2, [r7, #4]
    bool is_as = false;
    6328:	2300      	movs	r3, #0
    632a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    632e:	68bb      	ldr	r3, [r7, #8]
    6330:	2b00      	cmp	r3, #0
    6332:	d016      	beq.n	6362 <do_import_name+0x46>
    6334:	68bb      	ldr	r3, [r7, #8]
    6336:	f003 0303 	and.w	r3, r3, #3
    633a:	2b00      	cmp	r3, #0
    633c:	d111      	bne.n	6362 <do_import_name+0x46>
    633e:	68bb      	ldr	r3, [r7, #8]
    6340:	685b      	ldr	r3, [r3, #4]
    6342:	b2db      	uxtb	r3, r3
    6344:	2b62      	cmp	r3, #98	; 0x62
    6346:	d10c      	bne.n	6362 <do_import_name+0x46>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    6348:	68bb      	ldr	r3, [r7, #8]
    634a:	62fb      	str	r3, [r7, #44]	; 0x2c
        // a name of the form x as y; unwrap it
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    634e:	68db      	ldr	r3, [r3, #12]
    6350:	091a      	lsrs	r2, r3, #4
    6352:	687b      	ldr	r3, [r7, #4]
    6354:	601a      	str	r2, [r3, #0]
        pn = pns->nodes[0];
    6356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6358:	689b      	ldr	r3, [r3, #8]
    635a:	60bb      	str	r3, [r7, #8]
        is_as = true;
    635c:	2301      	movs	r3, #1
    635e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    6362:	68bb      	ldr	r3, [r7, #8]
    6364:	2b00      	cmp	r3, #0
    6366:	d10a      	bne.n	637e <do_import_name+0x62>
        // empty name (eg, from . import x)
        *q_base = MP_QSTR_;
    6368:	687b      	ldr	r3, [r7, #4]
    636a:	2201      	movs	r2, #1
    636c:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, MP_QSTR_, MP_EMIT_IMPORT_NAME); // import the empty string
    636e:	68fb      	ldr	r3, [r7, #12]
    6370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6372:	2200      	movs	r2, #0
    6374:	2101      	movs	r1, #1
    6376:	4618      	mov	r0, r3
    6378:	f003 ff56 	bl	a228 <mp_emit_bc_import>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
                }
            }
        }
    }
}
    637c:	e0ba      	b.n	64f4 <do_import_name+0x1d8>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    637e:	68bb      	ldr	r3, [r7, #8]
    6380:	f003 030f 	and.w	r3, r3, #15
    6384:	2b02      	cmp	r3, #2
    6386:	d114      	bne.n	63b2 <do_import_name+0x96>
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    6388:	68bb      	ldr	r3, [r7, #8]
    638a:	091b      	lsrs	r3, r3, #4
    638c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (!is_as) {
    638e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6392:	f083 0301 	eor.w	r3, r3, #1
    6396:	b2db      	uxtb	r3, r3
    6398:	2b00      	cmp	r3, #0
    639a:	d002      	beq.n	63a2 <do_import_name+0x86>
            *q_base = q_full;
    639c:	687b      	ldr	r3, [r7, #4]
    639e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    63a0:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    63a2:	68fb      	ldr	r3, [r7, #12]
    63a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63a6:	2200      	movs	r2, #0
    63a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    63aa:	4618      	mov	r0, r3
    63ac:	f003 ff3c 	bl	a228 <mp_emit_bc_import>
}
    63b0:	e0a0      	b.n	64f4 <do_import_name+0x1d8>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    63b2:	68bb      	ldr	r3, [r7, #8]
    63b4:	2b00      	cmp	r3, #0
    63b6:	d009      	beq.n	63cc <do_import_name+0xb0>
    63b8:	68bb      	ldr	r3, [r7, #8]
    63ba:	f003 0303 	and.w	r3, r3, #3
    63be:	2b00      	cmp	r3, #0
    63c0:	d104      	bne.n	63cc <do_import_name+0xb0>
    63c2:	68bb      	ldr	r3, [r7, #8]
    63c4:	685b      	ldr	r3, [r3, #4]
    63c6:	b2db      	uxtb	r3, r3
    63c8:	2b66      	cmp	r3, #102	; 0x66
    63ca:	d006      	beq.n	63da <do_import_name+0xbe>
    63cc:	4b4b      	ldr	r3, [pc, #300]	; (64fc <do_import_name+0x1e0>)
    63ce:	4a4c      	ldr	r2, [pc, #304]	; (6500 <do_import_name+0x1e4>)
    63d0:	f240 411f 	movw	r1, #1055	; 0x41f
    63d4:	484b      	ldr	r0, [pc, #300]	; (6504 <do_import_name+0x1e8>)
    63d6:	f015 f853 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    63da:	68bb      	ldr	r3, [r7, #8]
    63dc:	627b      	str	r3, [r7, #36]	; 0x24
            if (!is_as) {
    63de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    63e2:	f083 0301 	eor.w	r3, r3, #1
    63e6:	b2db      	uxtb	r3, r3
    63e8:	2b00      	cmp	r3, #0
    63ea:	d004      	beq.n	63f6 <do_import_name+0xda>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    63ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63ee:	689b      	ldr	r3, [r3, #8]
    63f0:	091a      	lsrs	r2, r3, #4
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	601a      	str	r2, [r3, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    63f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63f8:	685b      	ldr	r3, [r3, #4]
    63fa:	0a1b      	lsrs	r3, r3, #8
    63fc:	623b      	str	r3, [r7, #32]
            int len = n - 1;
    63fe:	6a3b      	ldr	r3, [r7, #32]
    6400:	3b01      	subs	r3, #1
    6402:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6404:	2300      	movs	r3, #0
    6406:	63fb      	str	r3, [r7, #60]	; 0x3c
    6408:	e00f      	b.n	642a <do_import_name+0x10e>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    640c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    640e:	3202      	adds	r2, #2
    6410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6414:	091b      	lsrs	r3, r3, #4
    6416:	4618      	mov	r0, r3
    6418:	f7fa ff07 	bl	122a <qstr_len>
    641c:	4602      	mov	r2, r0
    641e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6420:	4413      	add	r3, r2
    6422:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6426:	3301      	adds	r3, #1
    6428:	63fb      	str	r3, [r7, #60]	; 0x3c
    642a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    642c:	6a3b      	ldr	r3, [r7, #32]
    642e:	429a      	cmp	r2, r3
    6430:	dbeb      	blt.n	640a <do_import_name+0xee>
            char *q_ptr = mp_local_alloc(len);
    6432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6434:	3307      	adds	r3, #7
    6436:	3307      	adds	r3, #7
    6438:	08db      	lsrs	r3, r3, #3
    643a:	00db      	lsls	r3, r3, #3
    643c:	ebad 0d03 	sub.w	sp, sp, r3
    6440:	466b      	mov	r3, sp
    6442:	3307      	adds	r3, #7
    6444:	08db      	lsrs	r3, r3, #3
    6446:	00db      	lsls	r3, r3, #3
    6448:	61fb      	str	r3, [r7, #28]
            char *str_dest = q_ptr;
    644a:	69fb      	ldr	r3, [r7, #28]
    644c:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    644e:	2300      	movs	r3, #0
    6450:	637b      	str	r3, [r7, #52]	; 0x34
    6452:	e021      	b.n	6498 <do_import_name+0x17c>
                if (i > 0) {
    6454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6456:	2b00      	cmp	r3, #0
    6458:	dd04      	ble.n	6464 <do_import_name+0x148>
                    *str_dest++ = '.';
    645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    645c:	1c5a      	adds	r2, r3, #1
    645e:	63ba      	str	r2, [r7, #56]	; 0x38
    6460:	222e      	movs	r2, #46	; 0x2e
    6462:	701a      	strb	r2, [r3, #0]
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    6464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6468:	3202      	adds	r2, #2
    646a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    646e:	091b      	lsrs	r3, r3, #4
    6470:	f107 0210 	add.w	r2, r7, #16
    6474:	4611      	mov	r1, r2
    6476:	4618      	mov	r0, r3
    6478:	f7fa fef4 	bl	1264 <qstr_data>
    647c:	61b8      	str	r0, [r7, #24]
                memcpy(str_dest, str_src, str_src_len);
    647e:	693b      	ldr	r3, [r7, #16]
    6480:	461a      	mov	r2, r3
    6482:	69b9      	ldr	r1, [r7, #24]
    6484:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6486:	f016 fb27 	bl	1cad8 <memcpy>
                str_dest += str_src_len;
    648a:	693b      	ldr	r3, [r7, #16]
    648c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    648e:	4413      	add	r3, r2
    6490:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    6492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6494:	3301      	adds	r3, #1
    6496:	637b      	str	r3, [r7, #52]	; 0x34
    6498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    649a:	6a3b      	ldr	r3, [r7, #32]
    649c:	429a      	cmp	r2, r3
    649e:	dbd9      	blt.n	6454 <do_import_name+0x138>
            qstr q_full = qstr_from_strn(q_ptr, len);
    64a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    64a2:	4619      	mov	r1, r3
    64a4:	69f8      	ldr	r0, [r7, #28]
    64a6:	f7fa fdf6 	bl	1096 <qstr_from_strn>
    64aa:	6178      	str	r0, [r7, #20]
            mp_local_free(q_ptr);
    64ac:	69f8      	ldr	r0, [r7, #28]
    64ae:	f7fe fc59 	bl	4d64 <mp_local_free>
            EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    64b2:	68fb      	ldr	r3, [r7, #12]
    64b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64b6:	2200      	movs	r2, #0
    64b8:	6979      	ldr	r1, [r7, #20]
    64ba:	4618      	mov	r0, r3
    64bc:	f003 feb4 	bl	a228 <mp_emit_bc_import>
            if (is_as) {
    64c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    64c4:	2b00      	cmp	r3, #0
    64c6:	d015      	beq.n	64f4 <do_import_name+0x1d8>
                for (int i = 1; i < n; i++) {
    64c8:	2301      	movs	r3, #1
    64ca:	633b      	str	r3, [r7, #48]	; 0x30
    64cc:	e00e      	b.n	64ec <do_import_name+0x1d0>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
    64ce:	68fb      	ldr	r3, [r7, #12]
    64d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    64d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    64d6:	3202      	adds	r2, #2
    64d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64dc:	091b      	lsrs	r3, r3, #4
    64de:	2200      	movs	r2, #0
    64e0:	4619      	mov	r1, r3
    64e2:	f003 ffef 	bl	a4c4 <mp_emit_bc_attr>
                for (int i = 1; i < n; i++) {
    64e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    64e8:	3301      	adds	r3, #1
    64ea:	633b      	str	r3, [r7, #48]	; 0x30
    64ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    64ee:	6a3b      	ldr	r3, [r7, #32]
    64f0:	429a      	cmp	r2, r3
    64f2:	dbec      	blt.n	64ce <do_import_name+0x1b2>
}
    64f4:	bf00      	nop
    64f6:	3748      	adds	r7, #72	; 0x48
    64f8:	46bd      	mov	sp, r7
    64fa:	bd80      	pop	{r7, pc}
    64fc:	000202e0 	.word	0x000202e0
    6500:	00020bac 	.word	0x00020bac
    6504:	0001ff80 	.word	0x0001ff80

00006508 <compile_dotted_as_name>:

STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    6508:	b580      	push	{r7, lr}
    650a:	b084      	sub	sp, #16
    650c:	af00      	add	r7, sp, #0
    650e:	6078      	str	r0, [r7, #4]
    6510:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6516:	2100      	movs	r1, #0
    6518:	4618      	mov	r0, r3
    651a:	f003 fee9 	bl	a2f0 <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    651e:	687b      	ldr	r3, [r7, #4]
    6520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6522:	210e      	movs	r1, #14
    6524:	4618      	mov	r0, r3
    6526:	f003 fea7 	bl	a278 <mp_emit_bc_load_const_tok>
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    652a:	f107 030c 	add.w	r3, r7, #12
    652e:	461a      	mov	r2, r3
    6530:	6839      	ldr	r1, [r7, #0]
    6532:	6878      	ldr	r0, [r7, #4]
    6534:	f7ff fef2 	bl	631c <do_import_name>
    compile_store_id(comp, q_base);
    6538:	68fb      	ldr	r3, [r7, #12]
    653a:	4619      	mov	r1, r3
    653c:	6878      	ldr	r0, [r7, #4]
    653e:	f7fe fd5f 	bl	5000 <compile_store_id>
}
    6542:	bf00      	nop
    6544:	3710      	adds	r7, #16
    6546:	46bd      	mov	sp, r7
    6548:	bd80      	pop	{r7, pc}

0000654a <compile_import_name>:

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    654a:	b580      	push	{r7, lr}
    654c:	b082      	sub	sp, #8
    654e:	af00      	add	r7, sp, #0
    6550:	6078      	str	r0, [r7, #4]
    6552:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    6554:	683b      	ldr	r3, [r7, #0]
    6556:	6899      	ldr	r1, [r3, #8]
    6558:	4b04      	ldr	r3, [pc, #16]	; (656c <compile_import_name+0x22>)
    655a:	2265      	movs	r2, #101	; 0x65
    655c:	6878      	ldr	r0, [r7, #4]
    655e:	f7fe fcc8 	bl	4ef2 <apply_to_single_or_list>
}
    6562:	bf00      	nop
    6564:	3708      	adds	r7, #8
    6566:	46bd      	mov	sp, r7
    6568:	bd80      	pop	{r7, pc}
    656a:	bf00      	nop
    656c:	00006509 	.word	0x00006509

00006570 <compile_import_from>:

STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6570:	b580      	push	{r7, lr}
    6572:	b094      	sub	sp, #80	; 0x50
    6574:	af00      	add	r7, sp, #0
    6576:	6078      	str	r0, [r7, #4]
    6578:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn_import_source = pns->nodes[0];
    657a:	683b      	ldr	r3, [r7, #0]
    657c:	689b      	ldr	r3, [r3, #8]
    657e:	64fb      	str	r3, [r7, #76]	; 0x4c

    // extract the preceding .'s (if any) for a relative import, to compute the import level
    uint import_level = 0;
    6580:	2300      	movs	r3, #0
    6582:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
        mp_parse_node_t pn_rel;
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    6584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6586:	f003 030f 	and.w	r3, r3, #15
    658a:	2b0e      	cmp	r3, #14
    658c:	d00c      	beq.n	65a8 <compile_import_from+0x38>
    658e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6590:	2b00      	cmp	r3, #0
    6592:	d00e      	beq.n	65b2 <compile_import_from+0x42>
    6594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6596:	f003 0303 	and.w	r3, r3, #3
    659a:	2b00      	cmp	r3, #0
    659c:	d109      	bne.n	65b2 <compile_import_from+0x42>
    659e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65a0:	685b      	ldr	r3, [r3, #4]
    65a2:	b2db      	uxtb	r3, r3
    65a4:	2b5f      	cmp	r3, #95	; 0x5f
    65a6:	d104      	bne.n	65b2 <compile_import_from+0x42>
            // This covers relative imports with dots only like "from .. import"
            pn_rel = pn_import_source;
    65a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65aa:	61fb      	str	r3, [r7, #28]
            pn_import_source = MP_PARSE_NODE_NULL;
    65ac:	2300      	movs	r3, #0
    65ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    65b0:	e01e      	b.n	65f0 <compile_import_from+0x80>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    65b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65b4:	2b00      	cmp	r3, #0
    65b6:	d03e      	beq.n	6636 <compile_import_from+0xc6>
    65b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65ba:	f003 0303 	and.w	r3, r3, #3
    65be:	2b00      	cmp	r3, #0
    65c0:	d139      	bne.n	6636 <compile_import_from+0xc6>
    65c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65c4:	685b      	ldr	r3, [r3, #4]
    65c6:	b2db      	uxtb	r3, r3
    65c8:	2b5c      	cmp	r3, #92	; 0x5c
    65ca:	d134      	bne.n	6636 <compile_import_from+0xc6>
            // This covers relative imports starting with dot(s) like "from .foo import"
            mp_parse_node_struct_t *pns_2b = (mp_parse_node_struct_t*)pn_import_source;
    65cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65ce:	63bb      	str	r3, [r7, #56]	; 0x38
            pn_rel = pns_2b->nodes[0];
    65d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    65d2:	689b      	ldr	r3, [r3, #8]
    65d4:	61fb      	str	r3, [r7, #28]
            pn_import_source = pns_2b->nodes[1];
    65d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    65d8:	68db      	ldr	r3, [r3, #12]
    65da:	64fb      	str	r3, [r7, #76]	; 0x4c
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    65dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65de:	2b00      	cmp	r3, #0
    65e0:	d106      	bne.n	65f0 <compile_import_from+0x80>
    65e2:	4b7f      	ldr	r3, [pc, #508]	; (67e0 <compile_import_from+0x270>)
    65e4:	4a7f      	ldr	r2, [pc, #508]	; (67e4 <compile_import_from+0x274>)
    65e6:	f240 415e 	movw	r1, #1118	; 0x45e
    65ea:	487f      	ldr	r0, [pc, #508]	; (67e8 <compile_import_from+0x278>)
    65ec:	f014 ff48 	bl	1b480 <__assert_func>
            break;
        }

        // get the list of . and/or ...'s
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    65f0:	f107 0218 	add.w	r2, r7, #24
    65f4:	f107 031c 	add.w	r3, r7, #28
    65f8:	215f      	movs	r1, #95	; 0x5f
    65fa:	4618      	mov	r0, r3
    65fc:	f7fd fad6 	bl	3bac <mp_parse_node_extract_list>
    6600:	6378      	str	r0, [r7, #52]	; 0x34

        // count the total number of .'s
        for (int i = 0; i < n; i++) {
    6602:	2300      	movs	r3, #0
    6604:	647b      	str	r3, [r7, #68]	; 0x44
    6606:	e012      	b.n	662e <compile_import_from+0xbe>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    6608:	69ba      	ldr	r2, [r7, #24]
    660a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    660c:	009b      	lsls	r3, r3, #2
    660e:	4413      	add	r3, r2
    6610:	681b      	ldr	r3, [r3, #0]
    6612:	f240 42ae 	movw	r2, #1198	; 0x4ae
    6616:	4293      	cmp	r3, r2
    6618:	d103      	bne.n	6622 <compile_import_from+0xb2>
                import_level++;
    661a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    661c:	3301      	adds	r3, #1
    661e:	64bb      	str	r3, [r7, #72]	; 0x48
    6620:	e002      	b.n	6628 <compile_import_from+0xb8>
            } else {
                // should be an MP_TOKEN_ELLIPSIS
                import_level += 3;
    6622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6624:	3303      	adds	r3, #3
    6626:	64bb      	str	r3, [r7, #72]	; 0x48
        for (int i = 0; i < n; i++) {
    6628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    662a:	3301      	adds	r3, #1
    662c:	647b      	str	r3, [r7, #68]	; 0x44
    662e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6632:	429a      	cmp	r2, r3
    6634:	dbe8      	blt.n	6608 <compile_import_from+0x98>
            }
        }
    } while (0);

    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    6636:	683b      	ldr	r3, [r7, #0]
    6638:	68db      	ldr	r3, [r3, #12]
    663a:	f240 321e 	movw	r2, #798	; 0x31e
    663e:	4293      	cmp	r3, r2
    6640:	d122      	bne.n	6688 <compile_import_from+0x118>
        EMIT_ARG(load_const_small_int, import_level);
    6642:	687b      	ldr	r3, [r7, #4]
    6644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6646:	6cba      	ldr	r2, [r7, #72]	; 0x48
    6648:	4611      	mov	r1, r2
    664a:	4618      	mov	r0, r3
    664c:	f003 fe50 	bl	a2f0 <mp_emit_bc_load_const_small_int>

        // build the "fromlist" tuple
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    6650:	687b      	ldr	r3, [r7, #4]
    6652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6654:	2127      	movs	r1, #39	; 0x27
    6656:	4618      	mov	r0, r3
    6658:	f003 fe6c 	bl	a334 <mp_emit_bc_load_const_str>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_TUPLE);
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6660:	2200      	movs	r2, #0
    6662:	2101      	movs	r1, #1
    6664:	4618      	mov	r0, r3
    6666:	f004 f99e 	bl	a9a6 <mp_emit_bc_build>

        // do the import
        qstr dummy_q;
        do_import_name(comp, pn_import_source, &dummy_q);
    666a:	f107 0314 	add.w	r3, r7, #20
    666e:	461a      	mov	r2, r3
    6670:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6672:	6878      	ldr	r0, [r7, #4]
    6674:	f7ff fe52 	bl	631c <do_import_name>
        EMIT_ARG(import, MP_QSTR_NULL, MP_EMIT_IMPORT_STAR);
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    667c:	2202      	movs	r2, #2
    667e:	2100      	movs	r1, #0
    6680:	4618      	mov	r0, r3
    6682:	f003 fdd1 	bl	a228 <mp_emit_bc_import>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
            }
        }
        EMIT(pop_top);
    }
}
    6686:	e0a7      	b.n	67d8 <compile_import_from+0x268>
        EMIT_ARG(load_const_small_int, import_level);
    6688:	687b      	ldr	r3, [r7, #4]
    668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    668c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    668e:	4611      	mov	r1, r2
    6690:	4618      	mov	r0, r3
    6692:	f003 fe2d 	bl	a2f0 <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    6696:	683b      	ldr	r3, [r7, #0]
    6698:	330c      	adds	r3, #12
    669a:	f107 0210 	add.w	r2, r7, #16
    669e:	2164      	movs	r1, #100	; 0x64
    66a0:	4618      	mov	r0, r3
    66a2:	f7fd fa83 	bl	3bac <mp_parse_node_extract_list>
    66a6:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < n; i++) {
    66a8:	2300      	movs	r3, #0
    66aa:	643b      	str	r3, [r7, #64]	; 0x40
    66ac:	e032      	b.n	6714 <compile_import_from+0x1a4>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    66ae:	693a      	ldr	r2, [r7, #16]
    66b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66b2:	009b      	lsls	r3, r3, #2
    66b4:	4413      	add	r3, r2
    66b6:	681b      	ldr	r3, [r3, #0]
    66b8:	2b00      	cmp	r3, #0
    66ba:	d011      	beq.n	66e0 <compile_import_from+0x170>
    66bc:	693a      	ldr	r2, [r7, #16]
    66be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66c0:	009b      	lsls	r3, r3, #2
    66c2:	4413      	add	r3, r2
    66c4:	681b      	ldr	r3, [r3, #0]
    66c6:	f003 0303 	and.w	r3, r3, #3
    66ca:	2b00      	cmp	r3, #0
    66cc:	d108      	bne.n	66e0 <compile_import_from+0x170>
    66ce:	693a      	ldr	r2, [r7, #16]
    66d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66d2:	009b      	lsls	r3, r3, #2
    66d4:	4413      	add	r3, r2
    66d6:	681b      	ldr	r3, [r3, #0]
    66d8:	685b      	ldr	r3, [r3, #4]
    66da:	b2db      	uxtb	r3, r3
    66dc:	2b61      	cmp	r3, #97	; 0x61
    66de:	d006      	beq.n	66ee <compile_import_from+0x17e>
    66e0:	4b42      	ldr	r3, [pc, #264]	; (67ec <compile_import_from+0x27c>)
    66e2:	4a40      	ldr	r2, [pc, #256]	; (67e4 <compile_import_from+0x274>)
    66e4:	f240 4186 	movw	r1, #1158	; 0x486
    66e8:	483f      	ldr	r0, [pc, #252]	; (67e8 <compile_import_from+0x278>)
    66ea:	f014 fec9 	bl	1b480 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    66ee:	693a      	ldr	r2, [r7, #16]
    66f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66f2:	009b      	lsls	r3, r3, #2
    66f4:	4413      	add	r3, r2
    66f6:	681b      	ldr	r3, [r3, #0]
    66f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    66fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    66fc:	689b      	ldr	r3, [r3, #8]
    66fe:	091b      	lsrs	r3, r3, #4
    6700:	62bb      	str	r3, [r7, #40]	; 0x28
            EMIT_ARG(load_const_str, id2);
    6702:	687b      	ldr	r3, [r7, #4]
    6704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    6708:	4618      	mov	r0, r3
    670a:	f003 fe13 	bl	a334 <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    670e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6710:	3301      	adds	r3, #1
    6712:	643b      	str	r3, [r7, #64]	; 0x40
    6714:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6718:	429a      	cmp	r2, r3
    671a:	dbc8      	blt.n	66ae <compile_import_from+0x13e>
        EMIT_ARG(build, n, MP_EMIT_BUILD_TUPLE);
    671c:	687b      	ldr	r3, [r7, #4]
    671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6720:	6b39      	ldr	r1, [r7, #48]	; 0x30
    6722:	2200      	movs	r2, #0
    6724:	4618      	mov	r0, r3
    6726:	f004 f93e 	bl	a9a6 <mp_emit_bc_build>
        do_import_name(comp, pn_import_source, &dummy_q);
    672a:	f107 030c 	add.w	r3, r7, #12
    672e:	461a      	mov	r2, r3
    6730:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6732:	6878      	ldr	r0, [r7, #4]
    6734:	f7ff fdf2 	bl	631c <do_import_name>
        for (int i = 0; i < n; i++) {
    6738:	2300      	movs	r3, #0
    673a:	63fb      	str	r3, [r7, #60]	; 0x3c
    673c:	e043      	b.n	67c6 <compile_import_from+0x256>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    673e:	693a      	ldr	r2, [r7, #16]
    6740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6742:	009b      	lsls	r3, r3, #2
    6744:	4413      	add	r3, r2
    6746:	681b      	ldr	r3, [r3, #0]
    6748:	2b00      	cmp	r3, #0
    674a:	d011      	beq.n	6770 <compile_import_from+0x200>
    674c:	693a      	ldr	r2, [r7, #16]
    674e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6750:	009b      	lsls	r3, r3, #2
    6752:	4413      	add	r3, r2
    6754:	681b      	ldr	r3, [r3, #0]
    6756:	f003 0303 	and.w	r3, r3, #3
    675a:	2b00      	cmp	r3, #0
    675c:	d108      	bne.n	6770 <compile_import_from+0x200>
    675e:	693a      	ldr	r2, [r7, #16]
    6760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6762:	009b      	lsls	r3, r3, #2
    6764:	4413      	add	r3, r2
    6766:	681b      	ldr	r3, [r3, #0]
    6768:	685b      	ldr	r3, [r3, #4]
    676a:	b2db      	uxtb	r3, r3
    676c:	2b61      	cmp	r3, #97	; 0x61
    676e:	d006      	beq.n	677e <compile_import_from+0x20e>
    6770:	4b1e      	ldr	r3, [pc, #120]	; (67ec <compile_import_from+0x27c>)
    6772:	4a1c      	ldr	r2, [pc, #112]	; (67e4 <compile_import_from+0x274>)
    6774:	f240 4191 	movw	r1, #1169	; 0x491
    6778:	481b      	ldr	r0, [pc, #108]	; (67e8 <compile_import_from+0x278>)
    677a:	f014 fe81 	bl	1b480 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    677e:	693a      	ldr	r2, [r7, #16]
    6780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6782:	009b      	lsls	r3, r3, #2
    6784:	4413      	add	r3, r2
    6786:	681b      	ldr	r3, [r3, #0]
    6788:	627b      	str	r3, [r7, #36]	; 0x24
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    678c:	689b      	ldr	r3, [r3, #8]
    678e:	091b      	lsrs	r3, r3, #4
    6790:	623b      	str	r3, [r7, #32]
            EMIT_ARG(import, id2, MP_EMIT_IMPORT_FROM);
    6792:	687b      	ldr	r3, [r7, #4]
    6794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6796:	2201      	movs	r2, #1
    6798:	6a39      	ldr	r1, [r7, #32]
    679a:	4618      	mov	r0, r3
    679c:	f003 fd44 	bl	a228 <mp_emit_bc_import>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    67a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67a2:	68db      	ldr	r3, [r3, #12]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d104      	bne.n	67b2 <compile_import_from+0x242>
                compile_store_id(comp, id2);
    67a8:	6a39      	ldr	r1, [r7, #32]
    67aa:	6878      	ldr	r0, [r7, #4]
    67ac:	f7fe fc28 	bl	5000 <compile_store_id>
    67b0:	e006      	b.n	67c0 <compile_import_from+0x250>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    67b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67b4:	68db      	ldr	r3, [r3, #12]
    67b6:	091b      	lsrs	r3, r3, #4
    67b8:	4619      	mov	r1, r3
    67ba:	6878      	ldr	r0, [r7, #4]
    67bc:	f7fe fc20 	bl	5000 <compile_store_id>
        for (int i = 0; i < n; i++) {
    67c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    67c2:	3301      	adds	r3, #1
    67c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    67c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    67c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    67ca:	429a      	cmp	r2, r3
    67cc:	dbb7      	blt.n	673e <compile_import_from+0x1ce>
        EMIT(pop_top);
    67ce:	687b      	ldr	r3, [r7, #4]
    67d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67d2:	4618      	mov	r0, r3
    67d4:	f003 ff2b 	bl	a62e <mp_emit_bc_pop_top>
}
    67d8:	bf00      	nop
    67da:	3750      	adds	r7, #80	; 0x50
    67dc:	46bd      	mov	sp, r7
    67de:	bd80      	pop	{r7, pc}
    67e0:	00020314 	.word	0x00020314
    67e4:	00020bbc 	.word	0x00020bbc
    67e8:	0001ff80 	.word	0x0001ff80
    67ec:	00020340 	.word	0x00020340

000067f0 <compile_declare_global>:

STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, id_info_t *id_info) {
    67f0:	b580      	push	{r7, lr}
    67f2:	b084      	sub	sp, #16
    67f4:	af00      	add	r7, sp, #0
    67f6:	60f8      	str	r0, [r7, #12]
    67f8:	60b9      	str	r1, [r7, #8]
    67fa:	607a      	str	r2, [r7, #4]
    if (id_info->kind != ID_INFO_KIND_UNDECIDED && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	2b00      	cmp	r3, #0
    6802:	d009      	beq.n	6818 <compile_declare_global+0x28>
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	781b      	ldrb	r3, [r3, #0]
    6808:	2b02      	cmp	r3, #2
    680a:	d005      	beq.n	6818 <compile_declare_global+0x28>
        compile_syntax_error(comp, pn, "identifier redefined as global");
    680c:	4a0d      	ldr	r2, [pc, #52]	; (6844 <compile_declare_global+0x54>)
    680e:	68b9      	ldr	r1, [r7, #8]
    6810:	68f8      	ldr	r0, [r7, #12]
    6812:	f7fe facc 	bl	4dae <compile_syntax_error>
        return;
    6816:	e011      	b.n	683c <compile_declare_global+0x4c>
    }
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    6818:	687b      	ldr	r3, [r7, #4]
    681a:	2202      	movs	r2, #2
    681c:	701a      	strb	r2, [r3, #0]

    // if the id exists in the global scope, set its kind to EXPLICIT_GLOBAL
    id_info = scope_find_global(comp->scope_cur, id_info->qst);
    681e:	68fb      	ldr	r3, [r7, #12]
    6820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	685b      	ldr	r3, [r3, #4]
    6826:	4619      	mov	r1, r3
    6828:	4610      	mov	r0, r2
    682a:	f7fe f9dc 	bl	4be6 <scope_find_global>
    682e:	6078      	str	r0, [r7, #4]
    if (id_info != NULL) {
    6830:	687b      	ldr	r3, [r7, #4]
    6832:	2b00      	cmp	r3, #0
    6834:	d002      	beq.n	683c <compile_declare_global+0x4c>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    6836:	687b      	ldr	r3, [r7, #4]
    6838:	2202      	movs	r2, #2
    683a:	701a      	strb	r2, [r3, #0]
    }
}
    683c:	3710      	adds	r7, #16
    683e:	46bd      	mov	sp, r7
    6840:	bd80      	pop	{r7, pc}
    6842:	bf00      	nop
    6844:	00020380 	.word	0x00020380

00006848 <compile_declare_nonlocal>:

STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, id_info_t *id_info) {
    6848:	b580      	push	{r7, lr}
    684a:	b084      	sub	sp, #16
    684c:	af00      	add	r7, sp, #0
    684e:	60f8      	str	r0, [r7, #12]
    6850:	60b9      	str	r1, [r7, #8]
    6852:	607a      	str	r2, [r7, #4]
    if (id_info->kind == ID_INFO_KIND_UNDECIDED) {
    6854:	687b      	ldr	r3, [r7, #4]
    6856:	781b      	ldrb	r3, [r3, #0]
    6858:	2b00      	cmp	r3, #0
    685a:	d112      	bne.n	6882 <compile_declare_nonlocal+0x3a>
        id_info->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	2201      	movs	r2, #1
    6860:	701a      	strb	r2, [r3, #0]
        scope_check_to_close_over(comp->scope_cur, id_info);
    6862:	68fb      	ldr	r3, [r7, #12]
    6864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6866:	6879      	ldr	r1, [r7, #4]
    6868:	4618      	mov	r0, r3
    686a:	f7fe fa25 	bl	4cb8 <scope_check_to_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    686e:	687b      	ldr	r3, [r7, #4]
    6870:	781b      	ldrb	r3, [r3, #0]
    6872:	2b01      	cmp	r3, #1
    6874:	d10e      	bne.n	6894 <compile_declare_nonlocal+0x4c>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    6876:	4a09      	ldr	r2, [pc, #36]	; (689c <compile_declare_nonlocal+0x54>)
    6878:	68b9      	ldr	r1, [r7, #8]
    687a:	68f8      	ldr	r0, [r7, #12]
    687c:	f7fe fa97 	bl	4dae <compile_syntax_error>
        }
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    }
}
    6880:	e008      	b.n	6894 <compile_declare_nonlocal+0x4c>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    6882:	687b      	ldr	r3, [r7, #4]
    6884:	781b      	ldrb	r3, [r3, #0]
    6886:	2b05      	cmp	r3, #5
    6888:	d004      	beq.n	6894 <compile_declare_nonlocal+0x4c>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    688a:	4a05      	ldr	r2, [pc, #20]	; (68a0 <compile_declare_nonlocal+0x58>)
    688c:	68b9      	ldr	r1, [r7, #8]
    688e:	68f8      	ldr	r0, [r7, #12]
    6890:	f7fe fa8d 	bl	4dae <compile_syntax_error>
}
    6894:	bf00      	nop
    6896:	3710      	adds	r7, #16
    6898:	46bd      	mov	sp, r7
    689a:	bd80      	pop	{r7, pc}
    689c:	000203a0 	.word	0x000203a0
    68a0:	000203c0 	.word	0x000203c0

000068a4 <compile_global_nonlocal_stmt>:

STATIC void compile_global_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    68a4:	b580      	push	{r7, lr}
    68a6:	b088      	sub	sp, #32
    68a8:	af00      	add	r7, sp, #0
    68aa:	6078      	str	r0, [r7, #4]
    68ac:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	795b      	ldrb	r3, [r3, #5]
    68b2:	2b01      	cmp	r3, #1
    68b4:	d14b      	bne.n	694e <compile_global_nonlocal_stmt+0xaa>
        bool is_global = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_global_stmt;
    68b6:	683b      	ldr	r3, [r7, #0]
    68b8:	685b      	ldr	r3, [r3, #4]
    68ba:	b2db      	uxtb	r3, r3
    68bc:	2b10      	cmp	r3, #16
    68be:	bf0c      	ite	eq
    68c0:	2301      	moveq	r3, #1
    68c2:	2300      	movne	r3, #0
    68c4:	76fb      	strb	r3, [r7, #27]

        if (!is_global && comp->scope_cur->kind == SCOPE_MODULE) {
    68c6:	7efb      	ldrb	r3, [r7, #27]
    68c8:	f083 0301 	eor.w	r3, r3, #1
    68cc:	b2db      	uxtb	r3, r3
    68ce:	2b00      	cmp	r3, #0
    68d0:	d00b      	beq.n	68ea <compile_global_nonlocal_stmt+0x46>
    68d2:	687b      	ldr	r3, [r7, #4]
    68d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68d6:	681b      	ldr	r3, [r3, #0]
    68d8:	2b00      	cmp	r3, #0
    68da:	d106      	bne.n	68ea <compile_global_nonlocal_stmt+0x46>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    68dc:	683b      	ldr	r3, [r7, #0]
    68de:	4a1d      	ldr	r2, [pc, #116]	; (6954 <compile_global_nonlocal_stmt+0xb0>)
    68e0:	4619      	mov	r1, r3
    68e2:	6878      	ldr	r0, [r7, #4]
    68e4:	f7fe fa63 	bl	4dae <compile_syntax_error>
    68e8:	e031      	b.n	694e <compile_global_nonlocal_stmt+0xaa>
            return;
        }

        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    68ea:	683b      	ldr	r3, [r7, #0]
    68ec:	3308      	adds	r3, #8
    68ee:	f107 0208 	add.w	r2, r7, #8
    68f2:	2167      	movs	r1, #103	; 0x67
    68f4:	4618      	mov	r0, r3
    68f6:	f7fd f959 	bl	3bac <mp_parse_node_extract_list>
    68fa:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < n; i++) {
    68fc:	2300      	movs	r3, #0
    68fe:	61fb      	str	r3, [r7, #28]
    6900:	e021      	b.n	6946 <compile_global_nonlocal_stmt+0xa2>
            qstr qst = MP_PARSE_NODE_LEAF_ARG(nodes[i]);
    6902:	68ba      	ldr	r2, [r7, #8]
    6904:	69fb      	ldr	r3, [r7, #28]
    6906:	009b      	lsls	r3, r3, #2
    6908:	4413      	add	r3, r2
    690a:	681b      	ldr	r3, [r3, #0]
    690c:	091b      	lsrs	r3, r3, #4
    690e:	613b      	str	r3, [r7, #16]
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, ID_INFO_KIND_UNDECIDED);
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6914:	2200      	movs	r2, #0
    6916:	6939      	ldr	r1, [r7, #16]
    6918:	4618      	mov	r0, r3
    691a:	f7fe f8f7 	bl	4b0c <scope_find_or_add_id>
    691e:	60f8      	str	r0, [r7, #12]
            if (is_global) {
    6920:	7efb      	ldrb	r3, [r7, #27]
    6922:	2b00      	cmp	r3, #0
    6924:	d006      	beq.n	6934 <compile_global_nonlocal_stmt+0x90>
                compile_declare_global(comp, (mp_parse_node_t)pns, id_info);
    6926:	683b      	ldr	r3, [r7, #0]
    6928:	68fa      	ldr	r2, [r7, #12]
    692a:	4619      	mov	r1, r3
    692c:	6878      	ldr	r0, [r7, #4]
    692e:	f7ff ff5f 	bl	67f0 <compile_declare_global>
    6932:	e005      	b.n	6940 <compile_global_nonlocal_stmt+0x9c>
            } else {
                compile_declare_nonlocal(comp, (mp_parse_node_t)pns, id_info);
    6934:	683b      	ldr	r3, [r7, #0]
    6936:	68fa      	ldr	r2, [r7, #12]
    6938:	4619      	mov	r1, r3
    693a:	6878      	ldr	r0, [r7, #4]
    693c:	f7ff ff84 	bl	6848 <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    6940:	69fb      	ldr	r3, [r7, #28]
    6942:	3301      	adds	r3, #1
    6944:	61fb      	str	r3, [r7, #28]
    6946:	69fa      	ldr	r2, [r7, #28]
    6948:	697b      	ldr	r3, [r7, #20]
    694a:	429a      	cmp	r2, r3
    694c:	dbd9      	blt.n	6902 <compile_global_nonlocal_stmt+0x5e>
            }
        }
    }
}
    694e:	3720      	adds	r7, #32
    6950:	46bd      	mov	sp, r7
    6952:	bd80      	pop	{r7, pc}
    6954:	000203e4 	.word	0x000203e4

00006958 <compile_assert_stmt>:

STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6958:	b580      	push	{r7, lr}
    695a:	b084      	sub	sp, #16
    695c:	af00      	add	r7, sp, #0
    695e:	6078      	str	r0, [r7, #4]
    6960:	6039      	str	r1, [r7, #0]
    // with optimisations enabled we don't compile assertions
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    6962:	4b1c      	ldr	r3, [pc, #112]	; (69d4 <compile_assert_stmt+0x7c>)
    6964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    6968:	2b00      	cmp	r3, #0
    696a:	d12f      	bne.n	69cc <compile_assert_stmt+0x74>
        return;
    }

    uint l_end = comp_next_label(comp);
    696c:	6878      	ldr	r0, [r7, #4]
    696e:	f7fe fa39 	bl	4de4 <comp_next_label>
    6972:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns->nodes[0], true, l_end);
    6974:	683b      	ldr	r3, [r7, #0]
    6976:	6899      	ldr	r1, [r3, #8]
    6978:	68fb      	ldr	r3, [r7, #12]
    697a:	2201      	movs	r2, #1
    697c:	6878      	ldr	r0, [r7, #4]
    697e:	f7fe fbc4 	bl	510a <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    6982:	687b      	ldr	r3, [r7, #4]
    6984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6986:	2201      	movs	r2, #1
    6988:	21b7      	movs	r1, #183	; 0xb7
    698a:	4618      	mov	r0, r3
    698c:	f003 fd2d 	bl	a3ea <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    6990:	683b      	ldr	r3, [r7, #0]
    6992:	68db      	ldr	r3, [r3, #12]
    6994:	2b00      	cmp	r3, #0
    6996:	d00c      	beq.n	69b2 <compile_assert_stmt+0x5a>
        // assertion message
        compile_node(comp, pns->nodes[1]);
    6998:	683b      	ldr	r3, [r7, #0]
    699a:	68db      	ldr	r3, [r3, #12]
    699c:	4619      	mov	r1, r3
    699e:	6878      	ldr	r0, [r7, #4]
    69a0:	f001 ffdf 	bl	8962 <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    69a8:	2300      	movs	r3, #0
    69aa:	2200      	movs	r2, #0
    69ac:	2101      	movs	r1, #1
    69ae:	f004 f92f 	bl	ac10 <mp_emit_bc_call_function>
    }
    EMIT_ARG(raise_varargs, 1);
    69b2:	687b      	ldr	r3, [r7, #4]
    69b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69b6:	2101      	movs	r1, #1
    69b8:	4618      	mov	r0, r3
    69ba:	f004 f968 	bl	ac8e <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    69be:	687b      	ldr	r3, [r7, #4]
    69c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69c2:	68f9      	ldr	r1, [r7, #12]
    69c4:	4618      	mov	r0, r3
    69c6:	f003 fbd9 	bl	a17c <mp_emit_bc_label_assign>
    69ca:	e000      	b.n	69ce <compile_assert_stmt+0x76>
        return;
    69cc:	bf00      	nop
}
    69ce:	3710      	adds	r7, #16
    69d0:	46bd      	mov	sp, r7
    69d2:	bd80      	pop	{r7, pc}
    69d4:	200012f0 	.word	0x200012f0

000069d8 <compile_if_stmt>:

STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    69d8:	b580      	push	{r7, lr}
    69da:	b08a      	sub	sp, #40	; 0x28
    69dc:	af00      	add	r7, sp, #0
    69de:	6078      	str	r0, [r7, #4]
    69e0:	6039      	str	r1, [r7, #0]
    uint l_end = comp_next_label(comp);
    69e2:	6878      	ldr	r0, [r7, #4]
    69e4:	f7fe f9fe 	bl	4de4 <comp_next_label>
    69e8:	6238      	str	r0, [r7, #32]

    // optimisation: don't emit anything when "if False"
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    69ea:	683b      	ldr	r3, [r7, #0]
    69ec:	689b      	ldr	r3, [r3, #8]
    69ee:	4618      	mov	r0, r3
    69f0:	f7fd f857 	bl	3aa2 <mp_parse_node_is_const_false>
    69f4:	4603      	mov	r3, r0
    69f6:	f083 0301 	eor.w	r3, r3, #1
    69fa:	b2db      	uxtb	r3, r3
    69fc:	2b00      	cmp	r3, #0
    69fe:	d038      	beq.n	6a72 <compile_if_stmt+0x9a>
        uint l_fail = comp_next_label(comp);
    6a00:	6878      	ldr	r0, [r7, #4]
    6a02:	f7fe f9ef 	bl	4de4 <comp_next_label>
    6a06:	61f8      	str	r0, [r7, #28]
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    6a08:	683b      	ldr	r3, [r7, #0]
    6a0a:	6899      	ldr	r1, [r3, #8]
    6a0c:	69fb      	ldr	r3, [r7, #28]
    6a0e:	2200      	movs	r2, #0
    6a10:	6878      	ldr	r0, [r7, #4]
    6a12:	f7fe fb7a 	bl	510a <c_if_cond>

        compile_node(comp, pns->nodes[1]); // if block
    6a16:	683b      	ldr	r3, [r7, #0]
    6a18:	68db      	ldr	r3, [r3, #12]
    6a1a:	4619      	mov	r1, r3
    6a1c:	6878      	ldr	r0, [r7, #4]
    6a1e:	f001 ffa0 	bl	8962 <compile_node>

        // optimisation: skip everything else when "if True"
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    6a22:	683b      	ldr	r3, [r7, #0]
    6a24:	689b      	ldr	r3, [r3, #8]
    6a26:	4618      	mov	r0, r3
    6a28:	f7fd f857 	bl	3ada <mp_parse_node_is_const_true>
    6a2c:	4603      	mov	r3, r0
    6a2e:	2b00      	cmp	r3, #0
    6a30:	f040 809a 	bne.w	6b68 <compile_if_stmt+0x190>
            goto done;
        }

        if (
            // optimisation: don't jump over non-existent elif/else blocks
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6a34:	683b      	ldr	r3, [r7, #0]
    6a36:	691b      	ldr	r3, [r3, #16]
        if (
    6a38:	2b00      	cmp	r3, #0
    6a3a:	d103      	bne.n	6a44 <compile_if_stmt+0x6c>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6a3c:	683b      	ldr	r3, [r7, #0]
    6a3e:	695b      	ldr	r3, [r3, #20]
    6a40:	2b00      	cmp	r3, #0
    6a42:	d010      	beq.n	6a66 <compile_if_stmt+0x8e>
            // optimisation: don't jump if last instruction was return
            && !EMIT(last_emit_was_return_value)
    6a44:	687b      	ldr	r3, [r7, #4]
    6a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a48:	4618      	mov	r0, r3
    6a4a:	f003 fb37 	bl	a0bc <mp_emit_bc_last_emit_was_return_value>
    6a4e:	4603      	mov	r3, r0
    6a50:	f083 0301 	eor.w	r3, r3, #1
    6a54:	b2db      	uxtb	r3, r3
    6a56:	2b00      	cmp	r3, #0
    6a58:	d005      	beq.n	6a66 <compile_if_stmt+0x8e>
            ) {
            // jump over elif/else blocks
            EMIT_ARG(jump, l_end);
    6a5a:	687b      	ldr	r3, [r7, #4]
    6a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a5e:	6a39      	ldr	r1, [r7, #32]
    6a60:	4618      	mov	r0, r3
    6a62:	f003 fe15 	bl	a690 <mp_emit_bc_jump>
        }

        EMIT_ARG(label_assign, l_fail);
    6a66:	687b      	ldr	r3, [r7, #4]
    6a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a6a:	69f9      	ldr	r1, [r7, #28]
    6a6c:	4618      	mov	r0, r3
    6a6e:	f003 fb85 	bl	a17c <mp_emit_bc_label_assign>
    }

    // compile elif blocks (if any)
    mp_parse_node_t *pn_elif;
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    6a72:	683b      	ldr	r3, [r7, #0]
    6a74:	3310      	adds	r3, #16
    6a76:	f107 020c 	add.w	r2, r7, #12
    6a7a:	216a      	movs	r1, #106	; 0x6a
    6a7c:	4618      	mov	r0, r3
    6a7e:	f7fd f895 	bl	3bac <mp_parse_node_extract_list>
    6a82:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < n_elif; i++) {
    6a84:	2300      	movs	r3, #0
    6a86:	627b      	str	r3, [r7, #36]	; 0x24
    6a88:	e063      	b.n	6b52 <compile_if_stmt+0x17a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    6a8a:	68fa      	ldr	r2, [r7, #12]
    6a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a8e:	009b      	lsls	r3, r3, #2
    6a90:	4413      	add	r3, r2
    6a92:	681b      	ldr	r3, [r3, #0]
    6a94:	2b00      	cmp	r3, #0
    6a96:	d011      	beq.n	6abc <compile_if_stmt+0xe4>
    6a98:	68fa      	ldr	r2, [r7, #12]
    6a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6a9c:	009b      	lsls	r3, r3, #2
    6a9e:	4413      	add	r3, r2
    6aa0:	681b      	ldr	r3, [r3, #0]
    6aa2:	f003 0303 	and.w	r3, r3, #3
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d108      	bne.n	6abc <compile_if_stmt+0xe4>
    6aaa:	68fa      	ldr	r2, [r7, #12]
    6aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6aae:	009b      	lsls	r3, r3, #2
    6ab0:	4413      	add	r3, r2
    6ab2:	681b      	ldr	r3, [r3, #0]
    6ab4:	685b      	ldr	r3, [r3, #4]
    6ab6:	b2db      	uxtb	r3, r3
    6ab8:	2b6b      	cmp	r3, #107	; 0x6b
    6aba:	d006      	beq.n	6aca <compile_if_stmt+0xf2>
    6abc:	4b31      	ldr	r3, [pc, #196]	; (6b84 <compile_if_stmt+0x1ac>)
    6abe:	4a32      	ldr	r2, [pc, #200]	; (6b88 <compile_if_stmt+0x1b0>)
    6ac0:	f240 5102 	movw	r1, #1282	; 0x502
    6ac4:	4831      	ldr	r0, [pc, #196]	; (6b8c <compile_if_stmt+0x1b4>)
    6ac6:	f014 fcdb 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns_elif = (mp_parse_node_struct_t*)pn_elif[i];
    6aca:	68fa      	ldr	r2, [r7, #12]
    6acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ace:	009b      	lsls	r3, r3, #2
    6ad0:	4413      	add	r3, r2
    6ad2:	681b      	ldr	r3, [r3, #0]
    6ad4:	617b      	str	r3, [r7, #20]

        // optimisation: don't emit anything when "if False"
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    6ad6:	697b      	ldr	r3, [r7, #20]
    6ad8:	689b      	ldr	r3, [r3, #8]
    6ada:	4618      	mov	r0, r3
    6adc:	f7fc ffe1 	bl	3aa2 <mp_parse_node_is_const_false>
    6ae0:	4603      	mov	r3, r0
    6ae2:	f083 0301 	eor.w	r3, r3, #1
    6ae6:	b2db      	uxtb	r3, r3
    6ae8:	2b00      	cmp	r3, #0
    6aea:	d02f      	beq.n	6b4c <compile_if_stmt+0x174>
            uint l_fail = comp_next_label(comp);
    6aec:	6878      	ldr	r0, [r7, #4]
    6aee:	f7fe f979 	bl	4de4 <comp_next_label>
    6af2:	6138      	str	r0, [r7, #16]
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    6af4:	697b      	ldr	r3, [r7, #20]
    6af6:	6899      	ldr	r1, [r3, #8]
    6af8:	693b      	ldr	r3, [r7, #16]
    6afa:	2200      	movs	r2, #0
    6afc:	6878      	ldr	r0, [r7, #4]
    6afe:	f7fe fb04 	bl	510a <c_if_cond>

            compile_node(comp, pns_elif->nodes[1]); // elif block
    6b02:	697b      	ldr	r3, [r7, #20]
    6b04:	68db      	ldr	r3, [r3, #12]
    6b06:	4619      	mov	r1, r3
    6b08:	6878      	ldr	r0, [r7, #4]
    6b0a:	f001 ff2a 	bl	8962 <compile_node>

            // optimisation: skip everything else when "elif True"
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    6b0e:	697b      	ldr	r3, [r7, #20]
    6b10:	689b      	ldr	r3, [r3, #8]
    6b12:	4618      	mov	r0, r3
    6b14:	f7fc ffe1 	bl	3ada <mp_parse_node_is_const_true>
    6b18:	4603      	mov	r3, r0
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d126      	bne.n	6b6c <compile_if_stmt+0x194>
                goto done;
            }

            // optimisation: don't jump if last instruction was return
            if (!EMIT(last_emit_was_return_value)) {
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b22:	4618      	mov	r0, r3
    6b24:	f003 faca 	bl	a0bc <mp_emit_bc_last_emit_was_return_value>
    6b28:	4603      	mov	r3, r0
    6b2a:	f083 0301 	eor.w	r3, r3, #1
    6b2e:	b2db      	uxtb	r3, r3
    6b30:	2b00      	cmp	r3, #0
    6b32:	d005      	beq.n	6b40 <compile_if_stmt+0x168>
                EMIT_ARG(jump, l_end);
    6b34:	687b      	ldr	r3, [r7, #4]
    6b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b38:	6a39      	ldr	r1, [r7, #32]
    6b3a:	4618      	mov	r0, r3
    6b3c:	f003 fda8 	bl	a690 <mp_emit_bc_jump>
            }
            EMIT_ARG(label_assign, l_fail);
    6b40:	687b      	ldr	r3, [r7, #4]
    6b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b44:	6939      	ldr	r1, [r7, #16]
    6b46:	4618      	mov	r0, r3
    6b48:	f003 fb18 	bl	a17c <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    6b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b4e:	3301      	adds	r3, #1
    6b50:	627b      	str	r3, [r7, #36]	; 0x24
    6b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6b54:	69bb      	ldr	r3, [r7, #24]
    6b56:	429a      	cmp	r2, r3
    6b58:	db97      	blt.n	6a8a <compile_if_stmt+0xb2>
        }
    }

    // compile else block
    compile_node(comp, pns->nodes[3]); // can be null
    6b5a:	683b      	ldr	r3, [r7, #0]
    6b5c:	695b      	ldr	r3, [r3, #20]
    6b5e:	4619      	mov	r1, r3
    6b60:	6878      	ldr	r0, [r7, #4]
    6b62:	f001 fefe 	bl	8962 <compile_node>
    6b66:	e002      	b.n	6b6e <compile_if_stmt+0x196>
            goto done;
    6b68:	bf00      	nop
    6b6a:	e000      	b.n	6b6e <compile_if_stmt+0x196>
                goto done;
    6b6c:	bf00      	nop

done:
    EMIT_ARG(label_assign, l_end);
    6b6e:	687b      	ldr	r3, [r7, #4]
    6b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b72:	6a39      	ldr	r1, [r7, #32]
    6b74:	4618      	mov	r0, r3
    6b76:	f003 fb01 	bl	a17c <mp_emit_bc_label_assign>
}
    6b7a:	bf00      	nop
    6b7c:	3728      	adds	r7, #40	; 0x28
    6b7e:	46bd      	mov	sp, r7
    6b80:	bd80      	pop	{r7, pc}
    6b82:	bf00      	nop
    6b84:	0002040c 	.word	0x0002040c
    6b88:	00020bd0 	.word	0x00020bd0
    6b8c:	0001ff80 	.word	0x0001ff80

00006b90 <compile_while_stmt>:
#define END_BREAK_CONTINUE_BLOCK \
    comp->break_label = old_break_label; \
    comp->continue_label = old_continue_label; \
    comp->break_continue_except_level = old_break_continue_except_level;

STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6b90:	b580      	push	{r7, lr}
    6b92:	b088      	sub	sp, #32
    6b94:	af00      	add	r7, sp, #0
    6b96:	6078      	str	r0, [r7, #4]
    6b98:	6039      	str	r1, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6b9a:	687b      	ldr	r3, [r7, #4]
    6b9c:	8b1b      	ldrh	r3, [r3, #24]
    6b9e:	83fb      	strh	r3, [r7, #30]
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	8b5b      	ldrh	r3, [r3, #26]
    6ba4:	83bb      	strh	r3, [r7, #28]
    6ba6:	687b      	ldr	r3, [r7, #4]
    6ba8:	8bdb      	ldrh	r3, [r3, #30]
    6baa:	837b      	strh	r3, [r7, #26]
    6bac:	6878      	ldr	r0, [r7, #4]
    6bae:	f7fe f919 	bl	4de4 <comp_next_label>
    6bb2:	6178      	str	r0, [r7, #20]
    6bb4:	6878      	ldr	r0, [r7, #4]
    6bb6:	f7fe f915 	bl	4de4 <comp_next_label>
    6bba:	6138      	str	r0, [r7, #16]
    6bbc:	697b      	ldr	r3, [r7, #20]
    6bbe:	b29a      	uxth	r2, r3
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	831a      	strh	r2, [r3, #24]
    6bc4:	693b      	ldr	r3, [r7, #16]
    6bc6:	b29a      	uxth	r2, r3
    6bc8:	687b      	ldr	r3, [r7, #4]
    6bca:	835a      	strh	r2, [r3, #26]
    6bcc:	687b      	ldr	r3, [r7, #4]
    6bce:	8b9a      	ldrh	r2, [r3, #28]
    6bd0:	687b      	ldr	r3, [r7, #4]
    6bd2:	83da      	strh	r2, [r3, #30]

    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    6bd4:	683b      	ldr	r3, [r7, #0]
    6bd6:	689b      	ldr	r3, [r3, #8]
    6bd8:	4618      	mov	r0, r3
    6bda:	f7fc ff62 	bl	3aa2 <mp_parse_node_is_const_false>
    6bde:	4603      	mov	r3, r0
    6be0:	f083 0301 	eor.w	r3, r3, #1
    6be4:	b2db      	uxtb	r3, r3
    6be6:	2b00      	cmp	r3, #0
    6be8:	d02d      	beq.n	6c46 <compile_while_stmt+0xb6>
        uint top_label = comp_next_label(comp);
    6bea:	6878      	ldr	r0, [r7, #4]
    6bec:	f7fe f8fa 	bl	4de4 <comp_next_label>
    6bf0:	60f8      	str	r0, [r7, #12]
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    6bf2:	683b      	ldr	r3, [r7, #0]
    6bf4:	689b      	ldr	r3, [r3, #8]
    6bf6:	4618      	mov	r0, r3
    6bf8:	f7fc ff6f 	bl	3ada <mp_parse_node_is_const_true>
    6bfc:	4603      	mov	r3, r0
    6bfe:	f083 0301 	eor.w	r3, r3, #1
    6c02:	b2db      	uxtb	r3, r3
    6c04:	2b00      	cmp	r3, #0
    6c06:	d005      	beq.n	6c14 <compile_while_stmt+0x84>
            EMIT_ARG(jump, continue_label);
    6c08:	687b      	ldr	r3, [r7, #4]
    6c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c0c:	6939      	ldr	r1, [r7, #16]
    6c0e:	4618      	mov	r0, r3
    6c10:	f003 fd3e 	bl	a690 <mp_emit_bc_jump>
        }
        EMIT_ARG(label_assign, top_label);
    6c14:	687b      	ldr	r3, [r7, #4]
    6c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c18:	68f9      	ldr	r1, [r7, #12]
    6c1a:	4618      	mov	r0, r3
    6c1c:	f003 faae 	bl	a17c <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    6c20:	683b      	ldr	r3, [r7, #0]
    6c22:	68db      	ldr	r3, [r3, #12]
    6c24:	4619      	mov	r1, r3
    6c26:	6878      	ldr	r0, [r7, #4]
    6c28:	f001 fe9b 	bl	8962 <compile_node>
        EMIT_ARG(label_assign, continue_label);
    6c2c:	687b      	ldr	r3, [r7, #4]
    6c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c30:	6939      	ldr	r1, [r7, #16]
    6c32:	4618      	mov	r0, r3
    6c34:	f003 faa2 	bl	a17c <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    6c38:	683b      	ldr	r3, [r7, #0]
    6c3a:	6899      	ldr	r1, [r3, #8]
    6c3c:	68fb      	ldr	r3, [r7, #12]
    6c3e:	2201      	movs	r2, #1
    6c40:	6878      	ldr	r0, [r7, #4]
    6c42:	f7fe fa62 	bl	510a <c_if_cond>
    }

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	8bfa      	ldrh	r2, [r7, #30]
    6c4a:	831a      	strh	r2, [r3, #24]
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	8bba      	ldrh	r2, [r7, #28]
    6c50:	835a      	strh	r2, [r3, #26]
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	8b7a      	ldrh	r2, [r7, #26]
    6c56:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[2]); // else
    6c58:	683b      	ldr	r3, [r7, #0]
    6c5a:	691b      	ldr	r3, [r3, #16]
    6c5c:	4619      	mov	r1, r3
    6c5e:	6878      	ldr	r0, [r7, #4]
    6c60:	f001 fe7f 	bl	8962 <compile_node>

    EMIT_ARG(label_assign, break_label);
    6c64:	687b      	ldr	r3, [r7, #4]
    6c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c68:	6979      	ldr	r1, [r7, #20]
    6c6a:	4618      	mov	r0, r3
    6c6c:	f003 fa86 	bl	a17c <mp_emit_bc_label_assign>
}
    6c70:	bf00      	nop
    6c72:	3720      	adds	r7, #32
    6c74:	46bd      	mov	sp, r7
    6c76:	bd80      	pop	{r7, pc}

00006c78 <compile_for_stmt_optimised_range>:
//    (<step> is a constant for us, so no need to worry about it changing)
//
// If <end> is a small-int, then the stack during the for-loop contains just
// the current value of <var>.  Otherwise, the stack contains <end> then the
// current value of <var>.
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6c78:	b580      	push	{r7, lr}
    6c7a:	b08c      	sub	sp, #48	; 0x30
    6c7c:	af00      	add	r7, sp, #0
    6c7e:	60f8      	str	r0, [r7, #12]
    6c80:	60b9      	str	r1, [r7, #8]
    6c82:	607a      	str	r2, [r7, #4]
    6c84:	603b      	str	r3, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6c86:	68fb      	ldr	r3, [r7, #12]
    6c88:	8b1b      	ldrh	r3, [r3, #24]
    6c8a:	857b      	strh	r3, [r7, #42]	; 0x2a
    6c8c:	68fb      	ldr	r3, [r7, #12]
    6c8e:	8b5b      	ldrh	r3, [r3, #26]
    6c90:	853b      	strh	r3, [r7, #40]	; 0x28
    6c92:	68fb      	ldr	r3, [r7, #12]
    6c94:	8bdb      	ldrh	r3, [r3, #30]
    6c96:	84fb      	strh	r3, [r7, #38]	; 0x26
    6c98:	68f8      	ldr	r0, [r7, #12]
    6c9a:	f7fe f8a3 	bl	4de4 <comp_next_label>
    6c9e:	6238      	str	r0, [r7, #32]
    6ca0:	68f8      	ldr	r0, [r7, #12]
    6ca2:	f7fe f89f 	bl	4de4 <comp_next_label>
    6ca6:	61f8      	str	r0, [r7, #28]
    6ca8:	6a3b      	ldr	r3, [r7, #32]
    6caa:	b29a      	uxth	r2, r3
    6cac:	68fb      	ldr	r3, [r7, #12]
    6cae:	831a      	strh	r2, [r3, #24]
    6cb0:	69fb      	ldr	r3, [r7, #28]
    6cb2:	b29a      	uxth	r2, r3
    6cb4:	68fb      	ldr	r3, [r7, #12]
    6cb6:	835a      	strh	r2, [r3, #26]
    6cb8:	68fb      	ldr	r3, [r7, #12]
    6cba:	8b9a      	ldrh	r2, [r3, #28]
    6cbc:	68fb      	ldr	r3, [r7, #12]
    6cbe:	83da      	strh	r2, [r3, #30]

    uint top_label = comp_next_label(comp);
    6cc0:	68f8      	ldr	r0, [r7, #12]
    6cc2:	f7fe f88f 	bl	4de4 <comp_next_label>
    6cc6:	61b8      	str	r0, [r7, #24]
    uint entry_label = comp_next_label(comp);
    6cc8:	68f8      	ldr	r0, [r7, #12]
    6cca:	f7fe f88b 	bl	4de4 <comp_next_label>
    6cce:	6178      	str	r0, [r7, #20]

    // put the end value on the stack if it's not a small-int constant
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6cd0:	683b      	ldr	r3, [r7, #0]
    6cd2:	f003 0301 	and.w	r3, r3, #1
    6cd6:	2b00      	cmp	r3, #0
    6cd8:	bf0c      	ite	eq
    6cda:	2301      	moveq	r3, #1
    6cdc:	2300      	movne	r3, #0
    6cde:	74fb      	strb	r3, [r7, #19]
    if (end_on_stack) {
    6ce0:	7cfb      	ldrb	r3, [r7, #19]
    6ce2:	2b00      	cmp	r3, #0
    6ce4:	d003      	beq.n	6cee <compile_for_stmt_optimised_range+0x76>
        compile_node(comp, pn_end);
    6ce6:	6839      	ldr	r1, [r7, #0]
    6ce8:	68f8      	ldr	r0, [r7, #12]
    6cea:	f001 fe3a 	bl	8962 <compile_node>
    }

    // compile: start
    compile_node(comp, pn_start);
    6cee:	6879      	ldr	r1, [r7, #4]
    6cf0:	68f8      	ldr	r0, [r7, #12]
    6cf2:	f001 fe36 	bl	8962 <compile_node>

    EMIT_ARG(jump, entry_label);
    6cf6:	68fb      	ldr	r3, [r7, #12]
    6cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cfa:	6979      	ldr	r1, [r7, #20]
    6cfc:	4618      	mov	r0, r3
    6cfe:	f003 fcc7 	bl	a690 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    6d02:	68fb      	ldr	r3, [r7, #12]
    6d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d06:	69b9      	ldr	r1, [r7, #24]
    6d08:	4618      	mov	r0, r3
    6d0a:	f003 fa37 	bl	a17c <mp_emit_bc_label_assign>

    // duplicate next value and store it to var
    EMIT(dup_top);
    6d0e:	68fb      	ldr	r3, [r7, #12]
    6d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d12:	4618      	mov	r0, r3
    6d14:	f003 fc6b 	bl	a5ee <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    6d18:	2200      	movs	r2, #0
    6d1a:	68b9      	ldr	r1, [r7, #8]
    6d1c:	68f8      	ldr	r0, [r7, #12]
    6d1e:	f7fe fc93 	bl	5648 <c_assign>

    // compile body
    compile_node(comp, pn_body);
    6d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6d24:	68f8      	ldr	r0, [r7, #12]
    6d26:	f001 fe1c 	bl	8962 <compile_node>

    EMIT_ARG(label_assign, continue_label);
    6d2a:	68fb      	ldr	r3, [r7, #12]
    6d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d2e:	69f9      	ldr	r1, [r7, #28]
    6d30:	4618      	mov	r0, r3
    6d32:	f003 fa23 	bl	a17c <mp_emit_bc_label_assign>

    // compile: var + step
    compile_node(comp, pn_step);
    6d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    6d38:	68f8      	ldr	r0, [r7, #12]
    6d3a:	f001 fe12 	bl	8962 <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    6d3e:	68fb      	ldr	r3, [r7, #12]
    6d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d42:	210e      	movs	r1, #14
    6d44:	4618      	mov	r0, r3
    6d46:	f003 fdfc 	bl	a942 <mp_emit_bc_binary_op>

    EMIT_ARG(label_assign, entry_label);
    6d4a:	68fb      	ldr	r3, [r7, #12]
    6d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d4e:	6979      	ldr	r1, [r7, #20]
    6d50:	4618      	mov	r0, r3
    6d52:	f003 fa13 	bl	a17c <mp_emit_bc_label_assign>

    // compile: if var <cond> end: goto top
    if (end_on_stack) {
    6d56:	7cfb      	ldrb	r3, [r7, #19]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d00a      	beq.n	6d72 <compile_for_stmt_optimised_range+0xfa>
        EMIT(dup_top_two);
    6d5c:	68fb      	ldr	r3, [r7, #12]
    6d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d60:	4618      	mov	r0, r3
    6d62:	f003 fc54 	bl	a60e <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    6d66:	68fb      	ldr	r3, [r7, #12]
    6d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d6a:	4618      	mov	r0, r3
    6d6c:	f003 fc70 	bl	a650 <mp_emit_bc_rot_two>
    6d70:	e008      	b.n	6d84 <compile_for_stmt_optimised_range+0x10c>
    } else {
        EMIT(dup_top);
    6d72:	68fb      	ldr	r3, [r7, #12]
    6d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d76:	4618      	mov	r0, r3
    6d78:	f003 fc39 	bl	a5ee <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    6d7c:	6839      	ldr	r1, [r7, #0]
    6d7e:	68f8      	ldr	r0, [r7, #12]
    6d80:	f001 fdef 	bl	8962 <compile_node>
    }
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    6d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d86:	f003 0301 	and.w	r3, r3, #1
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d106      	bne.n	6d9c <compile_for_stmt_optimised_range+0x124>
    6d8e:	4b38      	ldr	r3, [pc, #224]	; (6e70 <compile_for_stmt_optimised_range+0x1f8>)
    6d90:	4a38      	ldr	r2, [pc, #224]	; (6e74 <compile_for_stmt_optimised_range+0x1fc>)
    6d92:	f240 517e 	movw	r1, #1406	; 0x57e
    6d96:	4838      	ldr	r0, [pc, #224]	; (6e78 <compile_for_stmt_optimised_range+0x200>)
    6d98:	f014 fb72 	bl	1b480 <__assert_func>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    6d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6d9e:	105b      	asrs	r3, r3, #1
    6da0:	2b00      	cmp	r3, #0
    6da2:	db06      	blt.n	6db2 <compile_for_stmt_optimised_range+0x13a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    6da4:	68fb      	ldr	r3, [r7, #12]
    6da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6da8:	2100      	movs	r1, #0
    6daa:	4618      	mov	r0, r3
    6dac:	f003 fdc9 	bl	a942 <mp_emit_bc_binary_op>
    6db0:	e005      	b.n	6dbe <compile_for_stmt_optimised_range+0x146>
    } else {
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    6db2:	68fb      	ldr	r3, [r7, #12]
    6db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6db6:	2101      	movs	r1, #1
    6db8:	4618      	mov	r0, r3
    6dba:	f003 fdc2 	bl	a942 <mp_emit_bc_binary_op>
    }
    EMIT_ARG(pop_jump_if, true, top_label);
    6dbe:	68fb      	ldr	r3, [r7, #12]
    6dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dc2:	69ba      	ldr	r2, [r7, #24]
    6dc4:	2101      	movs	r1, #1
    6dc6:	4618      	mov	r0, r3
    6dc8:	f003 fc74 	bl	a6b4 <mp_emit_bc_pop_jump_if>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6dcc:	68fb      	ldr	r3, [r7, #12]
    6dce:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    6dd0:	831a      	strh	r2, [r3, #24]
    6dd2:	68fb      	ldr	r3, [r7, #12]
    6dd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6dd6:	835a      	strh	r2, [r3, #26]
    6dd8:	68fb      	ldr	r3, [r7, #12]
    6dda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6ddc:	83da      	strh	r2, [r3, #30]

    // Compile the else block.  We must pop the iterator variables before
    // executing the else code because it may contain break/continue statements.
    uint end_label = 0;
    6dde:	2300      	movs	r3, #0
    6de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6de4:	2b00      	cmp	r3, #0
    6de6:	d022      	beq.n	6e2e <compile_for_stmt_optimised_range+0x1b6>
        // discard final value of "var", and possible "end" value
        EMIT(pop_top);
    6de8:	68fb      	ldr	r3, [r7, #12]
    6dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dec:	4618      	mov	r0, r3
    6dee:	f003 fc1e 	bl	a62e <mp_emit_bc_pop_top>
        if (end_on_stack) {
    6df2:	7cfb      	ldrb	r3, [r7, #19]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d004      	beq.n	6e02 <compile_for_stmt_optimised_range+0x18a>
            EMIT(pop_top);
    6df8:	68fb      	ldr	r3, [r7, #12]
    6dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dfc:	4618      	mov	r0, r3
    6dfe:	f003 fc16 	bl	a62e <mp_emit_bc_pop_top>
        }
        compile_node(comp, pn_else);
    6e02:	6c39      	ldr	r1, [r7, #64]	; 0x40
    6e04:	68f8      	ldr	r0, [r7, #12]
    6e06:	f001 fdac 	bl	8962 <compile_node>
        end_label = comp_next_label(comp);
    6e0a:	68f8      	ldr	r0, [r7, #12]
    6e0c:	f7fd ffea 	bl	4de4 <comp_next_label>
    6e10:	62f8      	str	r0, [r7, #44]	; 0x2c
        EMIT_ARG(jump, end_label);
    6e12:	68fb      	ldr	r3, [r7, #12]
    6e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6e18:	4618      	mov	r0, r3
    6e1a:	f003 fc39 	bl	a690 <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    6e1e:	68fb      	ldr	r3, [r7, #12]
    6e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6e22:	7cfb      	ldrb	r3, [r7, #19]
    6e24:	3301      	adds	r3, #1
    6e26:	4619      	mov	r1, r3
    6e28:	4610      	mov	r0, r2
    6e2a:	f003 f958 	bl	a0de <mp_emit_bc_adjust_stack_size>
    }

    EMIT_ARG(label_assign, break_label);
    6e2e:	68fb      	ldr	r3, [r7, #12]
    6e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e32:	6a39      	ldr	r1, [r7, #32]
    6e34:	4618      	mov	r0, r3
    6e36:	f003 f9a1 	bl	a17c <mp_emit_bc_label_assign>

    // discard final value of var that failed the loop condition
    EMIT(pop_top);
    6e3a:	68fb      	ldr	r3, [r7, #12]
    6e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e3e:	4618      	mov	r0, r3
    6e40:	f003 fbf5 	bl	a62e <mp_emit_bc_pop_top>

    // discard <end> value if it's on the stack
    if (end_on_stack) {
    6e44:	7cfb      	ldrb	r3, [r7, #19]
    6e46:	2b00      	cmp	r3, #0
    6e48:	d004      	beq.n	6e54 <compile_for_stmt_optimised_range+0x1dc>
        EMIT(pop_top);
    6e4a:	68fb      	ldr	r3, [r7, #12]
    6e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e4e:	4618      	mov	r0, r3
    6e50:	f003 fbed 	bl	a62e <mp_emit_bc_pop_top>
    }

    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6e56:	2b00      	cmp	r3, #0
    6e58:	d005      	beq.n	6e66 <compile_for_stmt_optimised_range+0x1ee>
        EMIT_ARG(label_assign, end_label);
    6e5a:	68fb      	ldr	r3, [r7, #12]
    6e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6e60:	4618      	mov	r0, r3
    6e62:	f003 f98b 	bl	a17c <mp_emit_bc_label_assign>
    }
}
    6e66:	bf00      	nop
    6e68:	3730      	adds	r7, #48	; 0x30
    6e6a:	46bd      	mov	sp, r7
    6e6c:	bd80      	pop	{r7, pc}
    6e6e:	bf00      	nop
    6e70:	00020448 	.word	0x00020448
    6e74:	00020be0 	.word	0x00020be0
    6e78:	0001ff80 	.word	0x0001ff80

00006e7c <compile_for_stmt>:

STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6e7c:	b580      	push	{r7, lr}
    6e7e:	b096      	sub	sp, #88	; 0x58
    6e80:	af04      	add	r7, sp, #16
    6e82:	6078      	str	r0, [r7, #4]
    6e84:	6039      	str	r1, [r7, #0]
    // this bit optimises: for <x> in range(...), turning it into an explicitly incremented variable
    // this is actually slower, but uses no heap memory
    // for viper it will be much, much faster
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    6e86:	683b      	ldr	r3, [r7, #0]
    6e88:	689b      	ldr	r3, [r3, #8]
    6e8a:	f003 030f 	and.w	r3, r3, #15
    6e8e:	2b02      	cmp	r3, #2
    6e90:	f040 80c2 	bne.w	7018 <compile_for_stmt+0x19c>
    6e94:	683b      	ldr	r3, [r7, #0]
    6e96:	68db      	ldr	r3, [r3, #12]
    6e98:	2b00      	cmp	r3, #0
    6e9a:	f000 80bd 	beq.w	7018 <compile_for_stmt+0x19c>
    6e9e:	683b      	ldr	r3, [r7, #0]
    6ea0:	68db      	ldr	r3, [r3, #12]
    6ea2:	f003 0303 	and.w	r3, r3, #3
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	f040 80b6 	bne.w	7018 <compile_for_stmt+0x19c>
    6eac:	683b      	ldr	r3, [r7, #0]
    6eae:	68db      	ldr	r3, [r3, #12]
    6eb0:	685b      	ldr	r3, [r3, #4]
    6eb2:	b2db      	uxtb	r3, r3
    6eb4:	2b29      	cmp	r3, #41	; 0x29
    6eb6:	f040 80af 	bne.w	7018 <compile_for_stmt+0x19c>
        mp_parse_node_struct_t *pns_it = (mp_parse_node_struct_t*)pns->nodes[1];
    6eba:	683b      	ldr	r3, [r7, #0]
    6ebc:	68db      	ldr	r3, [r3, #12]
    6ebe:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    6ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ec2:	689b      	ldr	r3, [r3, #8]
    6ec4:	f003 030f 	and.w	r3, r3, #15
    6ec8:	2b02      	cmp	r3, #2
    6eca:	f040 80a5 	bne.w	7018 <compile_for_stmt+0x19c>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    6ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ed0:	689b      	ldr	r3, [r3, #8]
    6ed2:	091b      	lsrs	r3, r3, #4
    6ed4:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
    6ed8:	f040 809e 	bne.w	7018 <compile_for_stmt+0x19c>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    6edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ede:	68db      	ldr	r3, [r3, #12]
    6ee0:	685b      	ldr	r3, [r3, #4]
    6ee2:	b2db      	uxtb	r3, r3
    6ee4:	2b2d      	cmp	r3, #45	; 0x2d
    6ee6:	f040 8097 	bne.w	7018 <compile_for_stmt+0x19c>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    6eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6eec:	68db      	ldr	r3, [r3, #12]
    6eee:	689b      	ldr	r3, [r3, #8]
    6ef0:	613b      	str	r3, [r7, #16]
            mp_parse_node_t *args;
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    6ef2:	f107 020c 	add.w	r2, r7, #12
    6ef6:	f107 0310 	add.w	r3, r7, #16
    6efa:	2197      	movs	r1, #151	; 0x97
    6efc:	4618      	mov	r0, r3
    6efe:	f7fc fe55 	bl	3bac <mp_parse_node_extract_list>
    6f02:	6338      	str	r0, [r7, #48]	; 0x30
            mp_parse_node_t pn_range_start;
            mp_parse_node_t pn_range_end;
            mp_parse_node_t pn_range_step;
            bool optimize = false;
    6f04:	2300      	movs	r3, #0
    6f06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            if (1 <= n_args && n_args <= 3) {
    6f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	dd6f      	ble.n	6ff0 <compile_for_stmt+0x174>
    6f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f12:	2b03      	cmp	r3, #3
    6f14:	dc6c      	bgt.n	6ff0 <compile_for_stmt+0x174>
                optimize = true;
    6f16:	2301      	movs	r3, #1
    6f18:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (n_args == 1) {
    6f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f1e:	2b01      	cmp	r3, #1
    6f20:	d10b      	bne.n	6f3a <compile_for_stmt+0xbe>
                    pn_range_start = mp_parse_node_new_small_int(0);
    6f22:	2000      	movs	r0, #0
    6f24:	f7fd ff02 	bl	4d2c <mp_parse_node_new_small_int>
    6f28:	6478      	str	r0, [r7, #68]	; 0x44
                    pn_range_end = args[0];
    6f2a:	68fb      	ldr	r3, [r7, #12]
    6f2c:	681b      	ldr	r3, [r3, #0]
    6f2e:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6f30:	2001      	movs	r0, #1
    6f32:	f7fd fefb 	bl	4d2c <mp_parse_node_new_small_int>
    6f36:	63f8      	str	r0, [r7, #60]	; 0x3c
    6f38:	e022      	b.n	6f80 <compile_for_stmt+0x104>
                } else if (n_args == 2) {
    6f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f3c:	2b02      	cmp	r3, #2
    6f3e:	d10a      	bne.n	6f56 <compile_for_stmt+0xda>
                    pn_range_start = args[0];
    6f40:	68fb      	ldr	r3, [r7, #12]
    6f42:	681b      	ldr	r3, [r3, #0]
    6f44:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6f46:	68fb      	ldr	r3, [r7, #12]
    6f48:	685b      	ldr	r3, [r3, #4]
    6f4a:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6f4c:	2001      	movs	r0, #1
    6f4e:	f7fd feed 	bl	4d2c <mp_parse_node_new_small_int>
    6f52:	63f8      	str	r0, [r7, #60]	; 0x3c
    6f54:	e014      	b.n	6f80 <compile_for_stmt+0x104>
                } else {
                    pn_range_start = args[0];
    6f56:	68fb      	ldr	r3, [r7, #12]
    6f58:	681b      	ldr	r3, [r3, #0]
    6f5a:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6f5c:	68fb      	ldr	r3, [r7, #12]
    6f5e:	685b      	ldr	r3, [r3, #4]
    6f60:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = args[2];
    6f62:	68fb      	ldr	r3, [r7, #12]
    6f64:	689b      	ldr	r3, [r3, #8]
    6f66:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // the step must be a non-zero constant integer to do the optimisation
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    6f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f6a:	f003 0301 	and.w	r3, r3, #1
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d003      	beq.n	6f7a <compile_for_stmt+0xfe>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    6f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f74:	105b      	asrs	r3, r3, #1
    6f76:	2b00      	cmp	r3, #0
    6f78:	d102      	bne.n	6f80 <compile_for_stmt+0x104>
                        optimize = false;
    6f7a:	2300      	movs	r3, #0
    6f7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                // arguments must be able to be compiled as standard expressions
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    6f80:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6f84:	2b00      	cmp	r3, #0
    6f86:	d017      	beq.n	6fb8 <compile_for_stmt+0x13c>
    6f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d014      	beq.n	6fb8 <compile_for_stmt+0x13c>
    6f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f90:	f003 0303 	and.w	r3, r3, #3
    6f94:	2b00      	cmp	r3, #0
    6f96:	d10f      	bne.n	6fb8 <compile_for_stmt+0x13c>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    6f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6f9a:	685b      	ldr	r3, [r3, #4]
    6f9c:	b2db      	uxtb	r3, r3
    6f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fa2:	2b99      	cmp	r3, #153	; 0x99
    6fa4:	d005      	beq.n	6fb2 <compile_for_stmt+0x136>
    6fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fa8:	2b9a      	cmp	r3, #154	; 0x9a
    6faa:	d002      	beq.n	6fb2 <compile_for_stmt+0x136>
    6fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fae:	2b9b      	cmp	r3, #155	; 0x9b
    6fb0:	d102      	bne.n	6fb8 <compile_for_stmt+0x13c>
                        optimize = false;
    6fb2:	2300      	movs	r3, #0
    6fb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    6fb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	d017      	beq.n	6ff0 <compile_for_stmt+0x174>
    6fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fc2:	2b00      	cmp	r3, #0
    6fc4:	d014      	beq.n	6ff0 <compile_for_stmt+0x174>
    6fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fc8:	f003 0303 	and.w	r3, r3, #3
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d10f      	bne.n	6ff0 <compile_for_stmt+0x174>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    6fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fd2:	685b      	ldr	r3, [r3, #4]
    6fd4:	b2db      	uxtb	r3, r3
    6fd6:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fda:	2b99      	cmp	r3, #153	; 0x99
    6fdc:	d005      	beq.n	6fea <compile_for_stmt+0x16e>
    6fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fe0:	2b9a      	cmp	r3, #154	; 0x9a
    6fe2:	d002      	beq.n	6fea <compile_for_stmt+0x16e>
    6fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fe6:	2b9b      	cmp	r3, #155	; 0x9b
    6fe8:	d102      	bne.n	6ff0 <compile_for_stmt+0x174>
                        optimize = false;
    6fea:	2300      	movs	r3, #0
    6fec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
            }
            if (optimize) {
    6ff0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	d00f      	beq.n	7018 <compile_for_stmt+0x19c>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    6ff8:	683b      	ldr	r3, [r7, #0]
    6ffa:	6899      	ldr	r1, [r3, #8]
    6ffc:	683b      	ldr	r3, [r7, #0]
    6ffe:	691b      	ldr	r3, [r3, #16]
    7000:	683a      	ldr	r2, [r7, #0]
    7002:	6952      	ldr	r2, [r2, #20]
    7004:	9202      	str	r2, [sp, #8]
    7006:	9301      	str	r3, [sp, #4]
    7008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    700a:	9300      	str	r3, [sp, #0]
    700c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    700e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7010:	6878      	ldr	r0, [r7, #4]
    7012:	f7ff fe31 	bl	6c78 <compile_for_stmt_optimised_range>
    7016:	e07f      	b.n	7118 <compile_for_stmt+0x29c>
                return;
            }
        }
    }

    START_BREAK_CONTINUE_BLOCK
    7018:	687b      	ldr	r3, [r7, #4]
    701a:	8b1b      	ldrh	r3, [r3, #24]
    701c:	84fb      	strh	r3, [r7, #38]	; 0x26
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	8b5b      	ldrh	r3, [r3, #26]
    7022:	84bb      	strh	r3, [r7, #36]	; 0x24
    7024:	687b      	ldr	r3, [r7, #4]
    7026:	8bdb      	ldrh	r3, [r3, #30]
    7028:	847b      	strh	r3, [r7, #34]	; 0x22
    702a:	6878      	ldr	r0, [r7, #4]
    702c:	f7fd feda 	bl	4de4 <comp_next_label>
    7030:	61f8      	str	r0, [r7, #28]
    7032:	6878      	ldr	r0, [r7, #4]
    7034:	f7fd fed6 	bl	4de4 <comp_next_label>
    7038:	61b8      	str	r0, [r7, #24]
    703a:	69fb      	ldr	r3, [r7, #28]
    703c:	b29a      	uxth	r2, r3
    703e:	687b      	ldr	r3, [r7, #4]
    7040:	831a      	strh	r2, [r3, #24]
    7042:	69bb      	ldr	r3, [r7, #24]
    7044:	b29a      	uxth	r2, r3
    7046:	687b      	ldr	r3, [r7, #4]
    7048:	835a      	strh	r2, [r3, #26]
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	8b9a      	ldrh	r2, [r3, #28]
    704e:	687b      	ldr	r3, [r7, #4]
    7050:	83da      	strh	r2, [r3, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	8b1b      	ldrh	r3, [r3, #24]
    7056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    705a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    705e:	b29a      	uxth	r2, r3
    7060:	687b      	ldr	r3, [r7, #4]
    7062:	831a      	strh	r2, [r3, #24]

    uint pop_label = comp_next_label(comp);
    7064:	6878      	ldr	r0, [r7, #4]
    7066:	f7fd febd 	bl	4de4 <comp_next_label>
    706a:	6178      	str	r0, [r7, #20]

    compile_node(comp, pns->nodes[1]); // iterator
    706c:	683b      	ldr	r3, [r7, #0]
    706e:	68db      	ldr	r3, [r3, #12]
    7070:	4619      	mov	r1, r3
    7072:	6878      	ldr	r0, [r7, #4]
    7074:	f001 fc75 	bl	8962 <compile_node>
    EMIT_ARG(get_iter, true);
    7078:	687b      	ldr	r3, [r7, #4]
    707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    707c:	2101      	movs	r1, #1
    707e:	4618      	mov	r0, r3
    7080:	f003 fbed 	bl	a85e <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    7084:	687b      	ldr	r3, [r7, #4]
    7086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7088:	69b9      	ldr	r1, [r7, #24]
    708a:	4618      	mov	r0, r3
    708c:	f003 f876 	bl	a17c <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7094:	6979      	ldr	r1, [r7, #20]
    7096:	4618      	mov	r0, r3
    7098:	f003 fbff 	bl	a89a <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    709c:	683b      	ldr	r3, [r7, #0]
    709e:	689b      	ldr	r3, [r3, #8]
    70a0:	2200      	movs	r2, #0
    70a2:	4619      	mov	r1, r3
    70a4:	6878      	ldr	r0, [r7, #4]
    70a6:	f7fe facf 	bl	5648 <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    70aa:	683b      	ldr	r3, [r7, #0]
    70ac:	691b      	ldr	r3, [r3, #16]
    70ae:	4619      	mov	r1, r3
    70b0:	6878      	ldr	r0, [r7, #4]
    70b2:	f001 fc56 	bl	8962 <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    70b6:	687b      	ldr	r3, [r7, #4]
    70b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ba:	4618      	mov	r0, r3
    70bc:	f002 fffe 	bl	a0bc <mp_emit_bc_last_emit_was_return_value>
    70c0:	4603      	mov	r3, r0
    70c2:	f083 0301 	eor.w	r3, r3, #1
    70c6:	b2db      	uxtb	r3, r3
    70c8:	2b00      	cmp	r3, #0
    70ca:	d005      	beq.n	70d8 <compile_for_stmt+0x25c>
        EMIT_ARG(jump, continue_label);
    70cc:	687b      	ldr	r3, [r7, #4]
    70ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70d0:	69b9      	ldr	r1, [r7, #24]
    70d2:	4618      	mov	r0, r3
    70d4:	f003 fadc 	bl	a690 <mp_emit_bc_jump>
    }
    EMIT_ARG(label_assign, pop_label);
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70dc:	6979      	ldr	r1, [r7, #20]
    70de:	4618      	mov	r0, r3
    70e0:	f003 f84c 	bl	a17c <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70e8:	4618      	mov	r0, r3
    70ea:	f003 fbe8 	bl	a8be <mp_emit_bc_for_iter_end>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    70ee:	687b      	ldr	r3, [r7, #4]
    70f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    70f2:	831a      	strh	r2, [r3, #24]
    70f4:	687b      	ldr	r3, [r7, #4]
    70f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    70f8:	835a      	strh	r2, [r3, #26]
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    70fe:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[3]); // else (may be empty)
    7100:	683b      	ldr	r3, [r7, #0]
    7102:	695b      	ldr	r3, [r3, #20]
    7104:	4619      	mov	r1, r3
    7106:	6878      	ldr	r0, [r7, #4]
    7108:	f001 fc2b 	bl	8962 <compile_node>

    EMIT_ARG(label_assign, break_label);
    710c:	687b      	ldr	r3, [r7, #4]
    710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7110:	69f9      	ldr	r1, [r7, #28]
    7112:	4618      	mov	r0, r3
    7114:	f003 f832 	bl	a17c <mp_emit_bc_label_assign>
}
    7118:	3748      	adds	r7, #72	; 0x48
    711a:	46bd      	mov	sp, r7
    711c:	bd80      	pop	{r7, pc}

0000711e <compile_try_except>:

STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    711e:	b580      	push	{r7, lr}
    7120:	b08e      	sub	sp, #56	; 0x38
    7122:	af00      	add	r7, sp, #0
    7124:	60f8      	str	r0, [r7, #12]
    7126:	60b9      	str	r1, [r7, #8]
    7128:	607a      	str	r2, [r7, #4]
    712a:	603b      	str	r3, [r7, #0]
    // setup code
    uint l1 = comp_next_label(comp);
    712c:	68f8      	ldr	r0, [r7, #12]
    712e:	f7fd fe59 	bl	4de4 <comp_next_label>
    7132:	6278      	str	r0, [r7, #36]	; 0x24
    uint success_label = comp_next_label(comp);
    7134:	68f8      	ldr	r0, [r7, #12]
    7136:	f7fd fe55 	bl	4de4 <comp_next_label>
    713a:	6238      	str	r0, [r7, #32]

    compile_increase_except_level(comp, l1, MP_EMIT_SETUP_BLOCK_EXCEPT);
    713c:	2202      	movs	r2, #2
    713e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7140:	68f8      	ldr	r0, [r7, #12]
    7142:	f7fd fe5e 	bl	4e02 <compile_increase_except_level>

    compile_node(comp, pn_body); // body
    7146:	68b9      	ldr	r1, [r7, #8]
    7148:	68f8      	ldr	r0, [r7, #12]
    714a:	f001 fc0a 	bl	8962 <compile_node>
    EMIT(pop_block);
    714e:	68fb      	ldr	r3, [r7, #12]
    7150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7152:	4618      	mov	r0, r3
    7154:	f003 fbc0 	bl	a8d8 <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    7158:	68fb      	ldr	r3, [r7, #12]
    715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    715c:	6a39      	ldr	r1, [r7, #32]
    715e:	4618      	mov	r0, r3
    7160:	f003 fa96 	bl	a690 <mp_emit_bc_jump>

    EMIT_ARG(label_assign, l1); // start of exception handler
    7164:	68fb      	ldr	r3, [r7, #12]
    7166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7168:	6a79      	ldr	r1, [r7, #36]	; 0x24
    716a:	4618      	mov	r0, r3
    716c:	f003 f806 	bl	a17c <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    7170:	68fb      	ldr	r3, [r7, #12]
    7172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7174:	4618      	mov	r0, r3
    7176:	f003 fdd1 	bl	ad1c <mp_emit_bc_start_except_handler>

    // at this point the top of the stack contains the exception instance that was raised

    uint l2 = comp_next_label(comp);
    717a:	68f8      	ldr	r0, [r7, #12]
    717c:	f7fd fe32 	bl	4de4 <comp_next_label>
    7180:	61f8      	str	r0, [r7, #28]

    for (int i = 0; i < n_except; i++) {
    7182:	2300      	movs	r3, #0
    7184:	637b      	str	r3, [r7, #52]	; 0x34
    7186:	e0d4      	b.n	7332 <compile_try_except+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    7188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    718a:	009b      	lsls	r3, r3, #2
    718c:	683a      	ldr	r2, [r7, #0]
    718e:	4413      	add	r3, r2
    7190:	681b      	ldr	r3, [r3, #0]
    7192:	2b00      	cmp	r3, #0
    7194:	d011      	beq.n	71ba <compile_try_except+0x9c>
    7196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7198:	009b      	lsls	r3, r3, #2
    719a:	683a      	ldr	r2, [r7, #0]
    719c:	4413      	add	r3, r2
    719e:	681b      	ldr	r3, [r3, #0]
    71a0:	f003 0303 	and.w	r3, r3, #3
    71a4:	2b00      	cmp	r3, #0
    71a6:	d108      	bne.n	71ba <compile_try_except+0x9c>
    71a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71aa:	009b      	lsls	r3, r3, #2
    71ac:	683a      	ldr	r2, [r7, #0]
    71ae:	4413      	add	r3, r2
    71b0:	681b      	ldr	r3, [r3, #0]
    71b2:	685b      	ldr	r3, [r3, #4]
    71b4:	b2db      	uxtb	r3, r3
    71b6:	2b6e      	cmp	r3, #110	; 0x6e
    71b8:	d006      	beq.n	71c8 <compile_try_except+0xaa>
    71ba:	4b6e      	ldr	r3, [pc, #440]	; (7374 <compile_try_except+0x256>)
    71bc:	4a6e      	ldr	r2, [pc, #440]	; (7378 <compile_try_except+0x25a>)
    71be:	f240 610c 	movw	r1, #1548	; 0x60c
    71c2:	486e      	ldr	r0, [pc, #440]	; (737c <compile_try_except+0x25e>)
    71c4:	f014 f95c 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns_except = (mp_parse_node_struct_t*)pn_excepts[i];
    71c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71ca:	009b      	lsls	r3, r3, #2
    71cc:	683a      	ldr	r2, [r7, #0]
    71ce:	4413      	add	r3, r2
    71d0:	681b      	ldr	r3, [r3, #0]
    71d2:	61bb      	str	r3, [r7, #24]

        qstr qstr_exception_local = 0;
    71d4:	2300      	movs	r3, #0
    71d6:	633b      	str	r3, [r7, #48]	; 0x30
        uint end_finally_label = comp_next_label(comp);
    71d8:	68f8      	ldr	r0, [r7, #12]
    71da:	f7fd fe03 	bl	4de4 <comp_next_label>
    71de:	6178      	str	r0, [r7, #20]

        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    71e0:	69bb      	ldr	r3, [r7, #24]
    71e2:	689b      	ldr	r3, [r3, #8]
    71e4:	2b00      	cmp	r3, #0
    71e6:	d112      	bne.n	720e <compile_try_except+0xf0>
            // this is a catch all exception handler
            if (i + 1 != n_except) {
    71e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71ea:	1c5a      	adds	r2, r3, #1
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	429a      	cmp	r2, r3
    71f0:	d03c      	beq.n	726c <compile_try_except+0x14e>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    71f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71f4:	009b      	lsls	r3, r3, #2
    71f6:	683a      	ldr	r2, [r7, #0]
    71f8:	4413      	add	r3, r2
    71fa:	681b      	ldr	r3, [r3, #0]
    71fc:	4a60      	ldr	r2, [pc, #384]	; (7380 <compile_try_except+0x262>)
    71fe:	4619      	mov	r1, r3
    7200:	68f8      	ldr	r0, [r7, #12]
    7202:	f7fd fdd4 	bl	4dae <compile_syntax_error>
                compile_decrease_except_level(comp);
    7206:	68f8      	ldr	r0, [r7, #12]
    7208:	f7fd fe1e 	bl	4e48 <compile_decrease_except_level>
                return;
    720c:	e0ae      	b.n	736c <compile_try_except+0x24e>
            }
        } else {
            // this exception handler requires a match to a certain type of exception
            mp_parse_node_t pns_exception_expr = pns_except->nodes[0];
    720e:	69bb      	ldr	r3, [r7, #24]
    7210:	689b      	ldr	r3, [r3, #8]
    7212:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    7214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7216:	2b00      	cmp	r3, #0
    7218:	d012      	beq.n	7240 <compile_try_except+0x122>
    721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    721c:	f003 0303 	and.w	r3, r3, #3
    7220:	2b00      	cmp	r3, #0
    7222:	d10d      	bne.n	7240 <compile_try_except+0x122>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    7224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7226:	613b      	str	r3, [r7, #16]
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    7228:	693b      	ldr	r3, [r7, #16]
    722a:	685b      	ldr	r3, [r3, #4]
    722c:	b2db      	uxtb	r3, r3
    722e:	2b6f      	cmp	r3, #111	; 0x6f
    7230:	d106      	bne.n	7240 <compile_try_except+0x122>
                    // handler binds the exception to a local
                    pns_exception_expr = pns3->nodes[0];
    7232:	693b      	ldr	r3, [r7, #16]
    7234:	689b      	ldr	r3, [r3, #8]
    7236:	62fb      	str	r3, [r7, #44]	; 0x2c
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    7238:	693b      	ldr	r3, [r7, #16]
    723a:	68db      	ldr	r3, [r3, #12]
    723c:	091b      	lsrs	r3, r3, #4
    723e:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
            EMIT(dup_top);
    7240:	68fb      	ldr	r3, [r7, #12]
    7242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7244:	4618      	mov	r0, r3
    7246:	f003 f9d2 	bl	a5ee <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    724a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    724c:	68f8      	ldr	r0, [r7, #12]
    724e:	f001 fb88 	bl	8962 <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    7252:	68fb      	ldr	r3, [r7, #12]
    7254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7256:	2108      	movs	r1, #8
    7258:	4618      	mov	r0, r3
    725a:	f003 fb72 	bl	a942 <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    725e:	68fb      	ldr	r3, [r7, #12]
    7260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7262:	697a      	ldr	r2, [r7, #20]
    7264:	2100      	movs	r1, #0
    7266:	4618      	mov	r0, r3
    7268:	f003 fa24 	bl	a6b4 <mp_emit_bc_pop_jump_if>
        }

        // either discard or store the exception instance
        if (qstr_exception_local == 0) {
    726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    726e:	2b00      	cmp	r3, #0
    7270:	d105      	bne.n	727e <compile_try_except+0x160>
            EMIT(pop_top);
    7272:	68fb      	ldr	r3, [r7, #12]
    7274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7276:	4618      	mov	r0, r3
    7278:	f003 f9d9 	bl	a62e <mp_emit_bc_pop_top>
    727c:	e003      	b.n	7286 <compile_try_except+0x168>
        } else {
            compile_store_id(comp, qstr_exception_local);
    727e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7280:	68f8      	ldr	r0, [r7, #12]
    7282:	f7fd febd 	bl	5000 <compile_store_id>
        }

        uint l3 = 0;
    7286:	2300      	movs	r3, #0
    7288:	62bb      	str	r3, [r7, #40]	; 0x28
        if (qstr_exception_local != 0) {
    728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    728c:	2b00      	cmp	r3, #0
    728e:	d008      	beq.n	72a2 <compile_try_except+0x184>
            l3 = comp_next_label(comp);
    7290:	68f8      	ldr	r0, [r7, #12]
    7292:	f7fd fda7 	bl	4de4 <comp_next_label>
    7296:	62b8      	str	r0, [r7, #40]	; 0x28
            compile_increase_except_level(comp, l3, MP_EMIT_SETUP_BLOCK_FINALLY);
    7298:	2203      	movs	r2, #3
    729a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    729c:	68f8      	ldr	r0, [r7, #12]
    729e:	f7fd fdb0 	bl	4e02 <compile_increase_except_level>
        }
        compile_node(comp, pns_except->nodes[1]);
    72a2:	69bb      	ldr	r3, [r7, #24]
    72a4:	68db      	ldr	r3, [r3, #12]
    72a6:	4619      	mov	r1, r3
    72a8:	68f8      	ldr	r0, [r7, #12]
    72aa:	f001 fb5a 	bl	8962 <compile_node>
        if (qstr_exception_local != 0) {
    72ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72b0:	2b00      	cmp	r3, #0
    72b2:	d004      	beq.n	72be <compile_try_except+0x1a0>
            EMIT(pop_block);
    72b4:	68fb      	ldr	r3, [r7, #12]
    72b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72b8:	4618      	mov	r0, r3
    72ba:	f003 fb0d 	bl	a8d8 <mp_emit_bc_pop_block>
        }
        EMIT(pop_except);
    72be:	68fb      	ldr	r3, [r7, #12]
    72c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72c2:	4618      	mov	r0, r3
    72c4:	f003 fb18 	bl	a8f8 <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    72c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72ca:	2b00      	cmp	r3, #0
    72cc:	d01c      	beq.n	7308 <compile_try_except+0x1ea>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    72ce:	68fb      	ldr	r3, [r7, #12]
    72d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72d2:	210e      	movs	r1, #14
    72d4:	4618      	mov	r0, r3
    72d6:	f002 ffcf 	bl	a278 <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    72da:	68fb      	ldr	r3, [r7, #12]
    72dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    72e0:	4618      	mov	r0, r3
    72e2:	f002 ff4b 	bl	a17c <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ea:	210e      	movs	r1, #14
    72ec:	4618      	mov	r0, r3
    72ee:	f002 ffc3 	bl	a278 <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    72f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
    72f4:	68f8      	ldr	r0, [r7, #12]
    72f6:	f7fd fe83 	bl	5000 <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    72fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
    72fc:	68f8      	ldr	r0, [r7, #12]
    72fe:	f7fd fe9d 	bl	503c <compile_delete_id>

            compile_decrease_except_level(comp);
    7302:	68f8      	ldr	r0, [r7, #12]
    7304:	f7fd fda0 	bl	4e48 <compile_decrease_except_level>
        }
        EMIT_ARG(jump, l2);
    7308:	68fb      	ldr	r3, [r7, #12]
    730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    730c:	69f9      	ldr	r1, [r7, #28]
    730e:	4618      	mov	r0, r3
    7310:	f003 f9be 	bl	a690 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    7314:	68fb      	ldr	r3, [r7, #12]
    7316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7318:	6979      	ldr	r1, [r7, #20]
    731a:	4618      	mov	r0, r3
    731c:	f002 ff2e 	bl	a17c <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    7320:	68fb      	ldr	r3, [r7, #12]
    7322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7324:	2101      	movs	r1, #1
    7326:	4618      	mov	r0, r3
    7328:	f002 fed9 	bl	a0de <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    732c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    732e:	3301      	adds	r3, #1
    7330:	637b      	str	r3, [r7, #52]	; 0x34
    7332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	429a      	cmp	r2, r3
    7338:	f6ff af26 	blt.w	7188 <compile_try_except+0x6a>
    }

    compile_decrease_except_level(comp);
    733c:	68f8      	ldr	r0, [r7, #12]
    733e:	f7fd fd83 	bl	4e48 <compile_decrease_except_level>
    EMIT(end_except_handler);
    7342:	68fb      	ldr	r3, [r7, #12]
    7344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7346:	4618      	mov	r0, r3
    7348:	f003 fcf4 	bl	ad34 <mp_emit_bc_end_except_handler>

    EMIT_ARG(label_assign, success_label);
    734c:	68fb      	ldr	r3, [r7, #12]
    734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7350:	6a39      	ldr	r1, [r7, #32]
    7352:	4618      	mov	r0, r3
    7354:	f002 ff12 	bl	a17c <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    7358:	6c39      	ldr	r1, [r7, #64]	; 0x40
    735a:	68f8      	ldr	r0, [r7, #12]
    735c:	f001 fb01 	bl	8962 <compile_node>
    EMIT_ARG(label_assign, l2);
    7360:	68fb      	ldr	r3, [r7, #12]
    7362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7364:	69f9      	ldr	r1, [r7, #28]
    7366:	4618      	mov	r0, r3
    7368:	f002 ff08 	bl	a17c <mp_emit_bc_label_assign>
}
    736c:	3738      	adds	r7, #56	; 0x38
    736e:	46bd      	mov	sp, r7
    7370:	bd80      	pop	{r7, pc}
    7372:	bf00      	nop
    7374:	0002046c 	.word	0x0002046c
    7378:	00020c04 	.word	0x00020c04
    737c:	0001ff80 	.word	0x0001ff80
    7380:	000204ac 	.word	0x000204ac

00007384 <compile_try_finally>:

STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    7384:	b580      	push	{r7, lr}
    7386:	b088      	sub	sp, #32
    7388:	af02      	add	r7, sp, #8
    738a:	60f8      	str	r0, [r7, #12]
    738c:	60b9      	str	r1, [r7, #8]
    738e:	607a      	str	r2, [r7, #4]
    7390:	603b      	str	r3, [r7, #0]
    uint l_finally_block = comp_next_label(comp);
    7392:	68f8      	ldr	r0, [r7, #12]
    7394:	f7fd fd26 	bl	4de4 <comp_next_label>
    7398:	6178      	str	r0, [r7, #20]

    compile_increase_except_level(comp, l_finally_block, MP_EMIT_SETUP_BLOCK_FINALLY);
    739a:	2203      	movs	r2, #3
    739c:	6979      	ldr	r1, [r7, #20]
    739e:	68f8      	ldr	r0, [r7, #12]
    73a0:	f7fd fd2f 	bl	4e02 <compile_increase_except_level>

    if (n_except == 0) {
    73a4:	687b      	ldr	r3, [r7, #4]
    73a6:	2b00      	cmp	r3, #0
    73a8:	d11b      	bne.n	73e2 <compile_try_finally+0x5e>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    73aa:	6a3b      	ldr	r3, [r7, #32]
    73ac:	2b00      	cmp	r3, #0
    73ae:	d006      	beq.n	73be <compile_try_finally+0x3a>
    73b0:	4b1e      	ldr	r3, [pc, #120]	; (742c <compile_try_finally+0xa8>)
    73b2:	4a1f      	ldr	r2, [pc, #124]	; (7430 <compile_try_finally+0xac>)
    73b4:	f240 6157 	movw	r1, #1623	; 0x657
    73b8:	481e      	ldr	r0, [pc, #120]	; (7434 <compile_try_finally+0xb0>)
    73ba:	f014 f861 	bl	1b480 <__assert_func>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    73be:	68fb      	ldr	r3, [r7, #12]
    73c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73c2:	2103      	movs	r1, #3
    73c4:	4618      	mov	r0, r3
    73c6:	f002 fe8a 	bl	a0de <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    73ca:	68b9      	ldr	r1, [r7, #8]
    73cc:	68f8      	ldr	r0, [r7, #12]
    73ce:	f001 fac8 	bl	8962 <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    73d2:	68fb      	ldr	r3, [r7, #12]
    73d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73d6:	f06f 0102 	mvn.w	r1, #2
    73da:	4618      	mov	r0, r3
    73dc:	f002 fe7f 	bl	a0de <mp_emit_bc_adjust_stack_size>
    73e0:	e007      	b.n	73f2 <compile_try_finally+0x6e>
    } else {
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    73e2:	6a3b      	ldr	r3, [r7, #32]
    73e4:	9300      	str	r3, [sp, #0]
    73e6:	683b      	ldr	r3, [r7, #0]
    73e8:	687a      	ldr	r2, [r7, #4]
    73ea:	68b9      	ldr	r1, [r7, #8]
    73ec:	68f8      	ldr	r0, [r7, #12]
    73ee:	f7ff fe96 	bl	711e <compile_try_except>
    }
    EMIT(pop_block);
    73f2:	68fb      	ldr	r3, [r7, #12]
    73f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73f6:	4618      	mov	r0, r3
    73f8:	f003 fa6e 	bl	a8d8 <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    73fc:	68fb      	ldr	r3, [r7, #12]
    73fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7400:	210e      	movs	r1, #14
    7402:	4618      	mov	r0, r3
    7404:	f002 ff38 	bl	a278 <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    7408:	68fb      	ldr	r3, [r7, #12]
    740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    740c:	6979      	ldr	r1, [r7, #20]
    740e:	4618      	mov	r0, r3
    7410:	f002 feb4 	bl	a17c <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    7414:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7416:	68f8      	ldr	r0, [r7, #12]
    7418:	f001 faa3 	bl	8962 <compile_node>

    compile_decrease_except_level(comp);
    741c:	68f8      	ldr	r0, [r7, #12]
    741e:	f7fd fd13 	bl	4e48 <compile_decrease_except_level>
}
    7422:	bf00      	nop
    7424:	3718      	adds	r7, #24
    7426:	46bd      	mov	sp, r7
    7428:	bd80      	pop	{r7, pc}
    742a:	bf00      	nop
    742c:	000204cc 	.word	0x000204cc
    7430:	00020c18 	.word	0x00020c18
    7434:	0001ff80 	.word	0x0001ff80

00007438 <compile_try_stmt>:

STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7438:	b580      	push	{r7, lr}
    743a:	b08a      	sub	sp, #40	; 0x28
    743c:	af02      	add	r7, sp, #8
    743e:	6078      	str	r0, [r7, #4]
    7440:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    7442:	683b      	ldr	r3, [r7, #0]
    7444:	68db      	ldr	r3, [r3, #12]
    7446:	2b00      	cmp	r3, #0
    7448:	d005      	beq.n	7456 <compile_try_stmt+0x1e>
    744a:	683b      	ldr	r3, [r7, #0]
    744c:	68db      	ldr	r3, [r3, #12]
    744e:	f003 0303 	and.w	r3, r3, #3
    7452:	2b00      	cmp	r3, #0
    7454:	d006      	beq.n	7464 <compile_try_stmt+0x2c>
    7456:	4b30      	ldr	r3, [pc, #192]	; (7518 <compile_try_stmt+0xe0>)
    7458:	4a30      	ldr	r2, [pc, #192]	; (751c <compile_try_stmt+0xe4>)
    745a:	f240 6167 	movw	r1, #1639	; 0x667
    745e:	4830      	ldr	r0, [pc, #192]	; (7520 <compile_try_stmt+0xe8>)
    7460:	f014 f80e 	bl	1b480 <__assert_func>
    {
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    7464:	683b      	ldr	r3, [r7, #0]
    7466:	68db      	ldr	r3, [r3, #12]
    7468:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    746a:	69fb      	ldr	r3, [r7, #28]
    746c:	685b      	ldr	r3, [r3, #4]
    746e:	b2db      	uxtb	r3, r3
    7470:	2b71      	cmp	r3, #113	; 0x71
    7472:	d10c      	bne.n	748e <compile_try_stmt+0x56>
            // just try-finally
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    7474:	683b      	ldr	r3, [r7, #0]
    7476:	6899      	ldr	r1, [r3, #8]
    7478:	69fb      	ldr	r3, [r7, #28]
    747a:	689b      	ldr	r3, [r3, #8]
    747c:	9301      	str	r3, [sp, #4]
    747e:	2300      	movs	r3, #0
    7480:	9300      	str	r3, [sp, #0]
    7482:	2300      	movs	r3, #0
    7484:	2200      	movs	r2, #0
    7486:	6878      	ldr	r0, [r7, #4]
    7488:	f7ff ff7c 	bl	7384 <compile_try_finally>
            mp_parse_node_t *pn_excepts;
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
        }
    }
}
    748c:	e040      	b.n	7510 <compile_try_stmt+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    748e:	69fb      	ldr	r3, [r7, #28]
    7490:	685b      	ldr	r3, [r3, #4]
    7492:	b2db      	uxtb	r3, r3
    7494:	2b6d      	cmp	r3, #109	; 0x6d
    7496:	d128      	bne.n	74ea <compile_try_stmt+0xb2>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    7498:	69fb      	ldr	r3, [r7, #28]
    749a:	3308      	adds	r3, #8
    749c:	f107 0210 	add.w	r2, r7, #16
    74a0:	2170      	movs	r1, #112	; 0x70
    74a2:	4618      	mov	r0, r3
    74a4:	f7fc fb82 	bl	3bac <mp_parse_node_extract_list>
    74a8:	61b8      	str	r0, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    74aa:	69fb      	ldr	r3, [r7, #28]
    74ac:	691b      	ldr	r3, [r3, #16]
    74ae:	2b00      	cmp	r3, #0
    74b0:	d10b      	bne.n	74ca <compile_try_stmt+0x92>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    74b2:	683b      	ldr	r3, [r7, #0]
    74b4:	6899      	ldr	r1, [r3, #8]
    74b6:	693a      	ldr	r2, [r7, #16]
    74b8:	69fb      	ldr	r3, [r7, #28]
    74ba:	68db      	ldr	r3, [r3, #12]
    74bc:	9300      	str	r3, [sp, #0]
    74be:	4613      	mov	r3, r2
    74c0:	69ba      	ldr	r2, [r7, #24]
    74c2:	6878      	ldr	r0, [r7, #4]
    74c4:	f7ff fe2b 	bl	711e <compile_try_except>
}
    74c8:	e022      	b.n	7510 <compile_try_stmt+0xd8>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    74ca:	683b      	ldr	r3, [r7, #0]
    74cc:	6899      	ldr	r1, [r3, #8]
    74ce:	6938      	ldr	r0, [r7, #16]
    74d0:	69fb      	ldr	r3, [r7, #28]
    74d2:	68db      	ldr	r3, [r3, #12]
    74d4:	69fa      	ldr	r2, [r7, #28]
    74d6:	6912      	ldr	r2, [r2, #16]
    74d8:	6892      	ldr	r2, [r2, #8]
    74da:	9201      	str	r2, [sp, #4]
    74dc:	9300      	str	r3, [sp, #0]
    74de:	4603      	mov	r3, r0
    74e0:	69ba      	ldr	r2, [r7, #24]
    74e2:	6878      	ldr	r0, [r7, #4]
    74e4:	f7ff ff4e 	bl	7384 <compile_try_finally>
}
    74e8:	e012      	b.n	7510 <compile_try_stmt+0xd8>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    74ea:	683b      	ldr	r3, [r7, #0]
    74ec:	330c      	adds	r3, #12
    74ee:	f107 020c 	add.w	r2, r7, #12
    74f2:	2170      	movs	r1, #112	; 0x70
    74f4:	4618      	mov	r0, r3
    74f6:	f7fc fb59 	bl	3bac <mp_parse_node_extract_list>
    74fa:	6178      	str	r0, [r7, #20]
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    74fc:	683b      	ldr	r3, [r7, #0]
    74fe:	6899      	ldr	r1, [r3, #8]
    7500:	68fa      	ldr	r2, [r7, #12]
    7502:	2300      	movs	r3, #0
    7504:	9300      	str	r3, [sp, #0]
    7506:	4613      	mov	r3, r2
    7508:	697a      	ldr	r2, [r7, #20]
    750a:	6878      	ldr	r0, [r7, #4]
    750c:	f7ff fe07 	bl	711e <compile_try_except>
}
    7510:	bf00      	nop
    7512:	3720      	adds	r7, #32
    7514:	46bd      	mov	sp, r7
    7516:	bd80      	pop	{r7, pc}
    7518:	000204ec 	.word	0x000204ec
    751c:	00020c2c 	.word	0x00020c2c
    7520:	0001ff80 	.word	0x0001ff80

00007524 <compile_with_stmt_helper>:

STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    7524:	b580      	push	{r7, lr}
    7526:	b086      	sub	sp, #24
    7528:	af00      	add	r7, sp, #0
    752a:	60f8      	str	r0, [r7, #12]
    752c:	60b9      	str	r1, [r7, #8]
    752e:	607a      	str	r2, [r7, #4]
    7530:	603b      	str	r3, [r7, #0]
    if (n == 0) {
    7532:	68bb      	ldr	r3, [r7, #8]
    7534:	2b00      	cmp	r3, #0
    7536:	d104      	bne.n	7542 <compile_with_stmt_helper+0x1e>
        // no more pre-bits, compile the body of the with
        compile_node(comp, body);
    7538:	6839      	ldr	r1, [r7, #0]
    753a:	68f8      	ldr	r0, [r7, #12]
    753c:	f001 fa11 	bl	8962 <compile_node>
        // finish this with block
        EMIT_ARG(with_cleanup, l_end);
        reserve_labels_for_native(comp, 3); // used by native's with_cleanup
        compile_decrease_except_level(comp);
    }
}
    7540:	e04a      	b.n	75d8 <compile_with_stmt_helper+0xb4>
        uint l_end = comp_next_label(comp);
    7542:	68f8      	ldr	r0, [r7, #12]
    7544:	f7fd fc4e 	bl	4de4 <comp_next_label>
    7548:	6178      	str	r0, [r7, #20]
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	681b      	ldr	r3, [r3, #0]
    754e:	2b00      	cmp	r3, #0
    7550:	d021      	beq.n	7596 <compile_with_stmt_helper+0x72>
    7552:	687b      	ldr	r3, [r7, #4]
    7554:	681b      	ldr	r3, [r3, #0]
    7556:	f003 0303 	and.w	r3, r3, #3
    755a:	2b00      	cmp	r3, #0
    755c:	d11b      	bne.n	7596 <compile_with_stmt_helper+0x72>
    755e:	687b      	ldr	r3, [r7, #4]
    7560:	681b      	ldr	r3, [r3, #0]
    7562:	685b      	ldr	r3, [r3, #4]
    7564:	b2db      	uxtb	r3, r3
    7566:	2b74      	cmp	r3, #116	; 0x74
    7568:	d115      	bne.n	7596 <compile_with_stmt_helper+0x72>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)nodes[0];
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	681b      	ldr	r3, [r3, #0]
    756e:	613b      	str	r3, [r7, #16]
            compile_node(comp, pns->nodes[0]);
    7570:	693b      	ldr	r3, [r7, #16]
    7572:	689b      	ldr	r3, [r3, #8]
    7574:	4619      	mov	r1, r3
    7576:	68f8      	ldr	r0, [r7, #12]
    7578:	f001 f9f3 	bl	8962 <compile_node>
            compile_increase_except_level(comp, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    757c:	2200      	movs	r2, #0
    757e:	6979      	ldr	r1, [r7, #20]
    7580:	68f8      	ldr	r0, [r7, #12]
    7582:	f7fd fc3e 	bl	4e02 <compile_increase_except_level>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    7586:	693b      	ldr	r3, [r7, #16]
    7588:	68db      	ldr	r3, [r3, #12]
    758a:	2200      	movs	r2, #0
    758c:	4619      	mov	r1, r3
    758e:	68f8      	ldr	r0, [r7, #12]
    7590:	f7fe f85a 	bl	5648 <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    7594:	e00f      	b.n	75b6 <compile_with_stmt_helper+0x92>
            compile_node(comp, nodes[0]);
    7596:	687b      	ldr	r3, [r7, #4]
    7598:	681b      	ldr	r3, [r3, #0]
    759a:	4619      	mov	r1, r3
    759c:	68f8      	ldr	r0, [r7, #12]
    759e:	f001 f9e0 	bl	8962 <compile_node>
            compile_increase_except_level(comp, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    75a2:	2200      	movs	r2, #0
    75a4:	6979      	ldr	r1, [r7, #20]
    75a6:	68f8      	ldr	r0, [r7, #12]
    75a8:	f7fd fc2b 	bl	4e02 <compile_increase_except_level>
            EMIT(pop_top);
    75ac:	68fb      	ldr	r3, [r7, #12]
    75ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75b0:	4618      	mov	r0, r3
    75b2:	f003 f83c 	bl	a62e <mp_emit_bc_pop_top>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    75b6:	68bb      	ldr	r3, [r7, #8]
    75b8:	1e59      	subs	r1, r3, #1
    75ba:	687b      	ldr	r3, [r7, #4]
    75bc:	1d1a      	adds	r2, r3, #4
    75be:	683b      	ldr	r3, [r7, #0]
    75c0:	68f8      	ldr	r0, [r7, #12]
    75c2:	f7ff ffaf 	bl	7524 <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    75c6:	68fb      	ldr	r3, [r7, #12]
    75c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75ca:	6979      	ldr	r1, [r7, #20]
    75cc:	4618      	mov	r0, r3
    75ce:	f003 f914 	bl	a7fa <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    75d2:	68f8      	ldr	r0, [r7, #12]
    75d4:	f7fd fc38 	bl	4e48 <compile_decrease_except_level>
}
    75d8:	bf00      	nop
    75da:	3718      	adds	r7, #24
    75dc:	46bd      	mov	sp, r7
    75de:	bd80      	pop	{r7, pc}

000075e0 <compile_with_stmt>:

STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    75e0:	b580      	push	{r7, lr}
    75e2:	b084      	sub	sp, #16
    75e4:	af00      	add	r7, sp, #0
    75e6:	6078      	str	r0, [r7, #4]
    75e8:	6039      	str	r1, [r7, #0]
    // get the nodes for the pre-bit of the with (the a as b, c as d, ... bit)
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    75ea:	683b      	ldr	r3, [r7, #0]
    75ec:	3308      	adds	r3, #8
    75ee:	f107 0208 	add.w	r2, r7, #8
    75f2:	2173      	movs	r1, #115	; 0x73
    75f4:	4618      	mov	r0, r3
    75f6:	f7fc fad9 	bl	3bac <mp_parse_node_extract_list>
    75fa:	60f8      	str	r0, [r7, #12]
    assert(n > 0);
    75fc:	68fb      	ldr	r3, [r7, #12]
    75fe:	2b00      	cmp	r3, #0
    7600:	dc06      	bgt.n	7610 <compile_with_stmt+0x30>
    7602:	4b09      	ldr	r3, [pc, #36]	; (7628 <compile_with_stmt+0x48>)
    7604:	4a09      	ldr	r2, [pc, #36]	; (762c <compile_with_stmt+0x4c>)
    7606:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
    760a:	4809      	ldr	r0, [pc, #36]	; (7630 <compile_with_stmt+0x50>)
    760c:	f013 ff38 	bl	1b480 <__assert_func>

    // compile in a nested fashion
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    7610:	68ba      	ldr	r2, [r7, #8]
    7612:	683b      	ldr	r3, [r7, #0]
    7614:	68db      	ldr	r3, [r3, #12]
    7616:	68f9      	ldr	r1, [r7, #12]
    7618:	6878      	ldr	r0, [r7, #4]
    761a:	f7ff ff83 	bl	7524 <compile_with_stmt_helper>
}
    761e:	bf00      	nop
    7620:	3710      	adds	r7, #16
    7622:	46bd      	mov	sp, r7
    7624:	bd80      	pop	{r7, pc}
    7626:	bf00      	nop
    7628:	00020514 	.word	0x00020514
    762c:	00020c40 	.word	0x00020c40
    7630:	0001ff80 	.word	0x0001ff80

00007634 <compile_yield_from>:

STATIC void compile_yield_from(compiler_t *comp) {
    7634:	b580      	push	{r7, lr}
    7636:	b082      	sub	sp, #8
    7638:	af00      	add	r7, sp, #0
    763a:	6078      	str	r0, [r7, #4]
    EMIT_ARG(get_iter, false);
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7640:	2100      	movs	r1, #0
    7642:	4618      	mov	r0, r3
    7644:	f003 f90b 	bl	a85e <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7648:	687b      	ldr	r3, [r7, #4]
    764a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    764c:	210e      	movs	r1, #14
    764e:	4618      	mov	r0, r3
    7650:	f002 fe12 	bl	a278 <mp_emit_bc_load_const_tok>
    EMIT_ARG(yield, MP_EMIT_YIELD_FROM);
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7658:	2101      	movs	r1, #1
    765a:	4618      	mov	r0, r3
    765c:	f003 fb3e 	bl	acdc <mp_emit_bc_yield>
    reserve_labels_for_native(comp, 3);
}
    7660:	bf00      	nop
    7662:	3708      	adds	r7, #8
    7664:	46bd      	mov	sp, r7
    7666:	bd80      	pop	{r7, pc}

00007668 <compile_expr_stmt>:
        compile_async_with_stmt(comp, pns0);
    }
}
#endif

STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7668:	b580      	push	{r7, lr}
    766a:	b088      	sub	sp, #32
    766c:	af00      	add	r7, sp, #0
    766e:	6078      	str	r0, [r7, #4]
    7670:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7672:	683b      	ldr	r3, [r7, #0]
    7674:	68db      	ldr	r3, [r3, #12]
    7676:	2b00      	cmp	r3, #0
    7678:	d149      	bne.n	770e <compile_expr_stmt+0xa6>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    767a:	687b      	ldr	r3, [r7, #4]
    767c:	791b      	ldrb	r3, [r3, #4]
    767e:	2b00      	cmp	r3, #0
    7680:	d01b      	beq.n	76ba <compile_expr_stmt+0x52>
    7682:	687b      	ldr	r3, [r7, #4]
    7684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7686:	681b      	ldr	r3, [r3, #0]
    7688:	2b00      	cmp	r3, #0
    768a:	d116      	bne.n	76ba <compile_expr_stmt+0x52>
            // for REPL, evaluate then print the expression
            compile_load_id(comp, MP_QSTR___repl_print__);
    768c:	2121      	movs	r1, #33	; 0x21
    768e:	6878      	ldr	r0, [r7, #4]
    7690:	f7fd fc97 	bl	4fc2 <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    7694:	683b      	ldr	r3, [r7, #0]
    7696:	689b      	ldr	r3, [r3, #8]
    7698:	4619      	mov	r1, r3
    769a:	6878      	ldr	r0, [r7, #4]
    769c:	f001 f961 	bl	8962 <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    76a4:	2300      	movs	r3, #0
    76a6:	2200      	movs	r2, #0
    76a8:	2101      	movs	r1, #1
    76aa:	f003 fab1 	bl	ac10 <mp_emit_bc_call_function>
            EMIT(pop_top);
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76b2:	4618      	mov	r0, r3
    76b4:	f002 ffbb 	bl	a62e <mp_emit_bc_pop_top>
    76b8:	e0f7      	b.n	78aa <compile_expr_stmt+0x242>

        } else {
            // for non-REPL, evaluate then discard the expression
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    76ba:	683b      	ldr	r3, [r7, #0]
    76bc:	689b      	ldr	r3, [r3, #8]
    76be:	f003 0303 	and.w	r3, r3, #3
    76c2:	2b00      	cmp	r3, #0
    76c4:	d006      	beq.n	76d4 <compile_expr_stmt+0x6c>
    76c6:	683b      	ldr	r3, [r7, #0]
    76c8:	689b      	ldr	r3, [r3, #8]
    76ca:	f003 030f 	and.w	r3, r3, #15
    76ce:	2b02      	cmp	r3, #2
    76d0:	f040 80eb 	bne.w	78aa <compile_expr_stmt+0x242>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    76d4:	683b      	ldr	r3, [r7, #0]
    76d6:	689b      	ldr	r3, [r3, #8]
    76d8:	2b00      	cmp	r3, #0
    76da:	d00c      	beq.n	76f6 <compile_expr_stmt+0x8e>
    76dc:	683b      	ldr	r3, [r7, #0]
    76de:	689b      	ldr	r3, [r3, #8]
    76e0:	f003 0303 	and.w	r3, r3, #3
    76e4:	2b00      	cmp	r3, #0
    76e6:	d106      	bne.n	76f6 <compile_expr_stmt+0x8e>
    76e8:	683b      	ldr	r3, [r7, #0]
    76ea:	689b      	ldr	r3, [r3, #8]
    76ec:	685b      	ldr	r3, [r3, #4]
    76ee:	b2db      	uxtb	r3, r3
    76f0:	2b35      	cmp	r3, #53	; 0x35
    76f2:	f000 80da 	beq.w	78aa <compile_expr_stmt+0x242>
                // do nothing with a lonely constant
            } else {
                compile_node(comp, pns->nodes[0]); // just an expression
    76f6:	683b      	ldr	r3, [r7, #0]
    76f8:	689b      	ldr	r3, [r3, #8]
    76fa:	4619      	mov	r1, r3
    76fc:	6878      	ldr	r0, [r7, #4]
    76fe:	f001 f930 	bl	8962 <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    7702:	687b      	ldr	r3, [r7, #4]
    7704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7706:	4618      	mov	r0, r3
    7708:	f002 ff91 	bl	a62e <mp_emit_bc_pop_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
        }
    } else {
        goto plain_assign;
    }
}
    770c:	e0cd      	b.n	78aa <compile_expr_stmt+0x242>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    770e:	683b      	ldr	r3, [r7, #0]
    7710:	68db      	ldr	r3, [r3, #12]
    7712:	2b00      	cmp	r3, #0
    7714:	f000 80bb 	beq.w	788e <compile_expr_stmt+0x226>
    7718:	683b      	ldr	r3, [r7, #0]
    771a:	68db      	ldr	r3, [r3, #12]
    771c:	f003 0303 	and.w	r3, r3, #3
    7720:	2b00      	cmp	r3, #0
    7722:	f040 80b4 	bne.w	788e <compile_expr_stmt+0x226>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    7726:	683b      	ldr	r3, [r7, #0]
    7728:	68db      	ldr	r3, [r3, #12]
    772a:	617b      	str	r3, [r7, #20]
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    772c:	697b      	ldr	r3, [r7, #20]
    772e:	685b      	ldr	r3, [r3, #4]
    7730:	b2db      	uxtb	r3, r3
    7732:	613b      	str	r3, [r7, #16]
        if (kind == PN_expr_stmt_augassign) {
    7734:	693b      	ldr	r3, [r7, #16]
    7736:	2b51      	cmp	r3, #81	; 0x51
    7738:	d16a      	bne.n	7810 <compile_expr_stmt+0x1a8>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    773a:	683b      	ldr	r3, [r7, #0]
    773c:	689b      	ldr	r3, [r3, #8]
    773e:	2201      	movs	r2, #1
    7740:	4619      	mov	r1, r3
    7742:	6878      	ldr	r0, [r7, #4]
    7744:	f7fd ff80 	bl	5648 <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    7748:	697b      	ldr	r3, [r7, #20]
    774a:	68db      	ldr	r3, [r3, #12]
    774c:	4619      	mov	r1, r3
    774e:	6878      	ldr	r0, [r7, #4]
    7750:	f001 f907 	bl	8962 <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    7754:	697b      	ldr	r3, [r7, #20]
    7756:	689b      	ldr	r3, [r3, #8]
    7758:	f003 030f 	and.w	r3, r3, #15
    775c:	2b0e      	cmp	r3, #14
    775e:	d006      	beq.n	776e <compile_expr_stmt+0x106>
    7760:	4b54      	ldr	r3, [pc, #336]	; (78b4 <compile_expr_stmt+0x24c>)
    7762:	4a55      	ldr	r2, [pc, #340]	; (78b8 <compile_expr_stmt+0x250>)
    7764:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    7768:	4854      	ldr	r0, [pc, #336]	; (78bc <compile_expr_stmt+0x254>)
    776a:	f013 fe89 	bl	1b480 <__assert_func>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    776e:	697b      	ldr	r3, [r7, #20]
    7770:	689b      	ldr	r3, [r3, #8]
    7772:	091b      	lsrs	r3, r3, #4
    7774:	3b4e      	subs	r3, #78	; 0x4e
    7776:	2b0a      	cmp	r3, #10
    7778:	d839      	bhi.n	77ee <compile_expr_stmt+0x186>
    777a:	a201      	add	r2, pc, #4	; (adr r2, 7780 <compile_expr_stmt+0x118>)
    777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7780:	000077cb 	.word	0x000077cb
    7784:	000077d1 	.word	0x000077d1
    7788:	000077d7 	.word	0x000077d7
    778c:	000077e3 	.word	0x000077e3
    7790:	000077dd 	.word	0x000077dd
    7794:	000077e9 	.word	0x000077e9
    7798:	000077b9 	.word	0x000077b9
    779c:	000077ad 	.word	0x000077ad
    77a0:	000077b3 	.word	0x000077b3
    77a4:	000077c5 	.word	0x000077c5
    77a8:	000077bf 	.word	0x000077bf
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    77ac:	2309      	movs	r3, #9
    77ae:	61fb      	str	r3, [r7, #28]
    77b0:	e020      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    77b2:	230a      	movs	r3, #10
    77b4:	61fb      	str	r3, [r7, #28]
    77b6:	e01d      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    77b8:	230b      	movs	r3, #11
    77ba:	61fb      	str	r3, [r7, #28]
    77bc:	e01a      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    77be:	230c      	movs	r3, #12
    77c0:	61fb      	str	r3, [r7, #28]
    77c2:	e017      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    77c4:	230d      	movs	r3, #13
    77c6:	61fb      	str	r3, [r7, #28]
    77c8:	e014      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    77ca:	230e      	movs	r3, #14
    77cc:	61fb      	str	r3, [r7, #28]
    77ce:	e011      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    77d0:	230f      	movs	r3, #15
    77d2:	61fb      	str	r3, [r7, #28]
    77d4:	e00e      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    77d6:	2310      	movs	r3, #16
    77d8:	61fb      	str	r3, [r7, #28]
    77da:	e00b      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    77dc:	2311      	movs	r3, #17
    77de:	61fb      	str	r3, [r7, #28]
    77e0:	e008      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    77e2:	2312      	movs	r3, #18
    77e4:	61fb      	str	r3, [r7, #28]
    77e6:	e005      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    77e8:	2313      	movs	r3, #19
    77ea:	61fb      	str	r3, [r7, #28]
    77ec:	e002      	b.n	77f4 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    77ee:	2314      	movs	r3, #20
    77f0:	61fb      	str	r3, [r7, #28]
    77f2:	bf00      	nop
            EMIT_ARG(binary_op, op);
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77f8:	69f9      	ldr	r1, [r7, #28]
    77fa:	4618      	mov	r0, r3
    77fc:	f003 f8a1 	bl	a942 <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    7800:	683b      	ldr	r3, [r7, #0]
    7802:	689b      	ldr	r3, [r3, #8]
    7804:	2202      	movs	r2, #2
    7806:	4619      	mov	r1, r3
    7808:	6878      	ldr	r0, [r7, #4]
    780a:	f7fd ff1d 	bl	5648 <c_assign>
}
    780e:	e04c      	b.n	78aa <compile_expr_stmt+0x242>
        } else if (kind == PN_expr_stmt_assign_list) {
    7810:	693b      	ldr	r3, [r7, #16]
    7812:	2b52      	cmp	r3, #82	; 0x52
    7814:	d13b      	bne.n	788e <compile_expr_stmt+0x226>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    7816:	697b      	ldr	r3, [r7, #20]
    7818:	685b      	ldr	r3, [r3, #4]
    781a:	0a1b      	lsrs	r3, r3, #8
    781c:	3b01      	subs	r3, #1
    781e:	60fb      	str	r3, [r7, #12]
            compile_node(comp, pns1->nodes[rhs]); // rhs
    7820:	697b      	ldr	r3, [r7, #20]
    7822:	68fa      	ldr	r2, [r7, #12]
    7824:	3202      	adds	r2, #2
    7826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    782a:	4619      	mov	r1, r3
    782c:	6878      	ldr	r0, [r7, #4]
    782e:	f001 f898 	bl	8962 <compile_node>
            if (rhs > 0) {
    7832:	68fb      	ldr	r3, [r7, #12]
    7834:	2b00      	cmp	r3, #0
    7836:	dd04      	ble.n	7842 <compile_expr_stmt+0x1da>
                EMIT(dup_top);
    7838:	687b      	ldr	r3, [r7, #4]
    783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    783c:	4618      	mov	r0, r3
    783e:	f002 fed6 	bl	a5ee <mp_emit_bc_dup_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7842:	683b      	ldr	r3, [r7, #0]
    7844:	689b      	ldr	r3, [r3, #8]
    7846:	2200      	movs	r2, #0
    7848:	4619      	mov	r1, r3
    784a:	6878      	ldr	r0, [r7, #4]
    784c:	f7fd fefc 	bl	5648 <c_assign>
            for (int i = 0; i < rhs; i++) {
    7850:	2300      	movs	r3, #0
    7852:	61bb      	str	r3, [r7, #24]
    7854:	e016      	b.n	7884 <compile_expr_stmt+0x21c>
                if (i + 1 < rhs) {
    7856:	69bb      	ldr	r3, [r7, #24]
    7858:	1c5a      	adds	r2, r3, #1
    785a:	68fb      	ldr	r3, [r7, #12]
    785c:	429a      	cmp	r2, r3
    785e:	da04      	bge.n	786a <compile_expr_stmt+0x202>
                    EMIT(dup_top);
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7864:	4618      	mov	r0, r3
    7866:	f002 fec2 	bl	a5ee <mp_emit_bc_dup_top>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    786a:	697b      	ldr	r3, [r7, #20]
    786c:	69ba      	ldr	r2, [r7, #24]
    786e:	3202      	adds	r2, #2
    7870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7874:	2200      	movs	r2, #0
    7876:	4619      	mov	r1, r3
    7878:	6878      	ldr	r0, [r7, #4]
    787a:	f7fd fee5 	bl	5648 <c_assign>
            for (int i = 0; i < rhs; i++) {
    787e:	69bb      	ldr	r3, [r7, #24]
    7880:	3301      	adds	r3, #1
    7882:	61bb      	str	r3, [r7, #24]
    7884:	69ba      	ldr	r2, [r7, #24]
    7886:	68fb      	ldr	r3, [r7, #12]
    7888:	429a      	cmp	r2, r3
    788a:	dbe4      	blt.n	7856 <compile_expr_stmt+0x1ee>
}
    788c:	e00d      	b.n	78aa <compile_expr_stmt+0x242>
            compile_node(comp, pns->nodes[1]); // rhs
    788e:	683b      	ldr	r3, [r7, #0]
    7890:	68db      	ldr	r3, [r3, #12]
    7892:	4619      	mov	r1, r3
    7894:	6878      	ldr	r0, [r7, #4]
    7896:	f001 f864 	bl	8962 <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    789a:	683b      	ldr	r3, [r7, #0]
    789c:	689b      	ldr	r3, [r3, #8]
    789e:	2200      	movs	r2, #0
    78a0:	4619      	mov	r1, r3
    78a2:	6878      	ldr	r0, [r7, #4]
    78a4:	f7fd fed0 	bl	5648 <c_assign>
}
    78a8:	e7ff      	b.n	78aa <compile_expr_stmt+0x242>
    78aa:	bf00      	nop
    78ac:	3720      	adds	r7, #32
    78ae:	46bd      	mov	sp, r7
    78b0:	bd80      	pop	{r7, pc}
    78b2:	bf00      	nop
    78b4:	0002051c 	.word	0x0002051c
    78b8:	00020c54 	.word	0x00020c54
    78bc:	0001ff80 	.word	0x0001ff80

000078c0 <compile_test_if_expr>:

STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    78c0:	b580      	push	{r7, lr}
    78c2:	b086      	sub	sp, #24
    78c4:	af00      	add	r7, sp, #0
    78c6:	6078      	str	r0, [r7, #4]
    78c8:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    78ca:	683b      	ldr	r3, [r7, #0]
    78cc:	68db      	ldr	r3, [r3, #12]
    78ce:	2b00      	cmp	r3, #0
    78d0:	d00b      	beq.n	78ea <compile_test_if_expr+0x2a>
    78d2:	683b      	ldr	r3, [r7, #0]
    78d4:	68db      	ldr	r3, [r3, #12]
    78d6:	f003 0303 	and.w	r3, r3, #3
    78da:	2b00      	cmp	r3, #0
    78dc:	d105      	bne.n	78ea <compile_test_if_expr+0x2a>
    78de:	683b      	ldr	r3, [r7, #0]
    78e0:	68db      	ldr	r3, [r3, #12]
    78e2:	685b      	ldr	r3, [r3, #4]
    78e4:	b2db      	uxtb	r3, r3
    78e6:	2b79      	cmp	r3, #121	; 0x79
    78e8:	d006      	beq.n	78f8 <compile_test_if_expr+0x38>
    78ea:	4b21      	ldr	r3, [pc, #132]	; (7970 <compile_test_if_expr+0xb0>)
    78ec:	4a21      	ldr	r2, [pc, #132]	; (7974 <compile_test_if_expr+0xb4>)
    78ee:	f240 71e7 	movw	r1, #2023	; 0x7e7
    78f2:	4821      	ldr	r0, [pc, #132]	; (7978 <compile_test_if_expr+0xb8>)
    78f4:	f013 fdc4 	bl	1b480 <__assert_func>
    mp_parse_node_struct_t *pns_test_if_else = (mp_parse_node_struct_t*)pns->nodes[1];
    78f8:	683b      	ldr	r3, [r7, #0]
    78fa:	68db      	ldr	r3, [r3, #12]
    78fc:	617b      	str	r3, [r7, #20]

    uint l_fail = comp_next_label(comp);
    78fe:	6878      	ldr	r0, [r7, #4]
    7900:	f7fd fa70 	bl	4de4 <comp_next_label>
    7904:	6138      	str	r0, [r7, #16]
    uint l_end = comp_next_label(comp);
    7906:	6878      	ldr	r0, [r7, #4]
    7908:	f7fd fa6c 	bl	4de4 <comp_next_label>
    790c:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    790e:	697b      	ldr	r3, [r7, #20]
    7910:	6899      	ldr	r1, [r3, #8]
    7912:	693b      	ldr	r3, [r7, #16]
    7914:	2200      	movs	r2, #0
    7916:	6878      	ldr	r0, [r7, #4]
    7918:	f7fd fbf7 	bl	510a <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    791c:	683b      	ldr	r3, [r7, #0]
    791e:	689b      	ldr	r3, [r3, #8]
    7920:	4619      	mov	r1, r3
    7922:	6878      	ldr	r0, [r7, #4]
    7924:	f001 f81d 	bl	8962 <compile_node>
    EMIT_ARG(jump, l_end);
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    792c:	68f9      	ldr	r1, [r7, #12]
    792e:	4618      	mov	r0, r3
    7930:	f002 feae 	bl	a690 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7938:	6939      	ldr	r1, [r7, #16]
    793a:	4618      	mov	r0, r3
    793c:	f002 fc1e 	bl	a17c <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    7940:	687b      	ldr	r3, [r7, #4]
    7942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7948:	4618      	mov	r0, r3
    794a:	f002 fbc8 	bl	a0de <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    794e:	697b      	ldr	r3, [r7, #20]
    7950:	68db      	ldr	r3, [r3, #12]
    7952:	4619      	mov	r1, r3
    7954:	6878      	ldr	r0, [r7, #4]
    7956:	f001 f804 	bl	8962 <compile_node>
    EMIT_ARG(label_assign, l_end);
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    795e:	68f9      	ldr	r1, [r7, #12]
    7960:	4618      	mov	r0, r3
    7962:	f002 fc0b 	bl	a17c <mp_emit_bc_label_assign>
}
    7966:	bf00      	nop
    7968:	3718      	adds	r7, #24
    796a:	46bd      	mov	sp, r7
    796c:	bd80      	pop	{r7, pc}
    796e:	bf00      	nop
    7970:	00020544 	.word	0x00020544
    7974:	00020c68 	.word	0x00020c68
    7978:	0001ff80 	.word	0x0001ff80

0000797c <compile_lambdef>:

STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    797c:	b580      	push	{r7, lr}
    797e:	b084      	sub	sp, #16
    7980:	af00      	add	r7, sp, #0
    7982:	6078      	str	r0, [r7, #4]
    7984:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    7986:	687b      	ldr	r3, [r7, #4]
    7988:	795b      	ldrb	r3, [r3, #5]
    798a:	2b01      	cmp	r3, #1
    798c:	d10b      	bne.n	79a6 <compile_lambdef+0x2a>
        // create a new scope for this lambda
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    798e:	683a      	ldr	r2, [r7, #0]
    7990:	687b      	ldr	r3, [r7, #4]
    7992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7994:	8b5b      	ldrh	r3, [r3, #26]
    7996:	2102      	movs	r1, #2
    7998:	6878      	ldr	r0, [r7, #4]
    799a:	f7fd fa79 	bl	4e90 <scope_new_and_link>
    799e:	60f8      	str	r0, [r7, #12]
        // store the lambda scope so the compiling function (this one) can use it at each pass
        pns->nodes[2] = (mp_parse_node_t)s;
    79a0:	68fa      	ldr	r2, [r7, #12]
    79a2:	683b      	ldr	r3, [r7, #0]
    79a4:	611a      	str	r2, [r3, #16]
    }

    // get the scope for this lambda
    scope_t *this_scope = (scope_t*)pns->nodes[2];
    79a6:	683b      	ldr	r3, [r7, #0]
    79a8:	691b      	ldr	r3, [r3, #16]
    79aa:	60bb      	str	r3, [r7, #8]

    // compile the lambda definition
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    79ac:	683b      	ldr	r3, [r7, #0]
    79ae:	689a      	ldr	r2, [r3, #8]
    79b0:	2346      	movs	r3, #70	; 0x46
    79b2:	68b9      	ldr	r1, [r7, #8]
    79b4:	6878      	ldr	r0, [r7, #4]
    79b6:	f7fe f8a1 	bl	5afc <compile_funcdef_lambdef>
}
    79ba:	bf00      	nop
    79bc:	3710      	adds	r7, #16
    79be:	46bd      	mov	sp, r7
    79c0:	bd80      	pop	{r7, pc}

000079c2 <compile_or_and_test>:

STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    79c2:	b580      	push	{r7, lr}
    79c4:	b086      	sub	sp, #24
    79c6:	af00      	add	r7, sp, #0
    79c8:	6078      	str	r0, [r7, #4]
    79ca:	6039      	str	r1, [r7, #0]
    bool cond = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test;
    79cc:	683b      	ldr	r3, [r7, #0]
    79ce:	685b      	ldr	r3, [r3, #4]
    79d0:	b2db      	uxtb	r3, r3
    79d2:	2b1c      	cmp	r3, #28
    79d4:	bf0c      	ite	eq
    79d6:	2301      	moveq	r3, #1
    79d8:	2300      	movne	r3, #0
    79da:	74fb      	strb	r3, [r7, #19]
    uint l_end = comp_next_label(comp);
    79dc:	6878      	ldr	r0, [r7, #4]
    79de:	f7fd fa01 	bl	4de4 <comp_next_label>
    79e2:	60f8      	str	r0, [r7, #12]
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    79e4:	683b      	ldr	r3, [r7, #0]
    79e6:	685b      	ldr	r3, [r3, #4]
    79e8:	0a1b      	lsrs	r3, r3, #8
    79ea:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < n; i += 1) {
    79ec:	2300      	movs	r3, #0
    79ee:	617b      	str	r3, [r7, #20]
    79f0:	e017      	b.n	7a22 <compile_or_and_test+0x60>
        compile_node(comp, pns->nodes[i]);
    79f2:	683b      	ldr	r3, [r7, #0]
    79f4:	697a      	ldr	r2, [r7, #20]
    79f6:	3202      	adds	r2, #2
    79f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79fc:	4619      	mov	r1, r3
    79fe:	6878      	ldr	r0, [r7, #4]
    7a00:	f000 ffaf 	bl	8962 <compile_node>
        if (i + 1 < n) {
    7a04:	697b      	ldr	r3, [r7, #20]
    7a06:	1c5a      	adds	r2, r3, #1
    7a08:	68bb      	ldr	r3, [r7, #8]
    7a0a:	429a      	cmp	r2, r3
    7a0c:	da06      	bge.n	7a1c <compile_or_and_test+0x5a>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a12:	7cf9      	ldrb	r1, [r7, #19]
    7a14:	68fa      	ldr	r2, [r7, #12]
    7a16:	4618      	mov	r0, r3
    7a18:	f002 fe6a 	bl	a6f0 <mp_emit_bc_jump_if_or_pop>
    for (int i = 0; i < n; i += 1) {
    7a1c:	697b      	ldr	r3, [r7, #20]
    7a1e:	3301      	adds	r3, #1
    7a20:	617b      	str	r3, [r7, #20]
    7a22:	697a      	ldr	r2, [r7, #20]
    7a24:	68bb      	ldr	r3, [r7, #8]
    7a26:	429a      	cmp	r2, r3
    7a28:	dbe3      	blt.n	79f2 <compile_or_and_test+0x30>
        }
    }
    EMIT_ARG(label_assign, l_end);
    7a2a:	687b      	ldr	r3, [r7, #4]
    7a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a2e:	68f9      	ldr	r1, [r7, #12]
    7a30:	4618      	mov	r0, r3
    7a32:	f002 fba3 	bl	a17c <mp_emit_bc_label_assign>
}
    7a36:	bf00      	nop
    7a38:	3718      	adds	r7, #24
    7a3a:	46bd      	mov	sp, r7
    7a3c:	bd80      	pop	{r7, pc}

00007a3e <compile_not_test_2>:

STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a3e:	b580      	push	{r7, lr}
    7a40:	b082      	sub	sp, #8
    7a42:	af00      	add	r7, sp, #0
    7a44:	6078      	str	r0, [r7, #4]
    7a46:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    7a48:	683b      	ldr	r3, [r7, #0]
    7a4a:	689b      	ldr	r3, [r3, #8]
    7a4c:	4619      	mov	r1, r3
    7a4e:	6878      	ldr	r0, [r7, #4]
    7a50:	f000 ff87 	bl	8962 <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    7a54:	687b      	ldr	r3, [r7, #4]
    7a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a58:	2103      	movs	r1, #3
    7a5a:	4618      	mov	r0, r3
    7a5c:	f002 ff5c 	bl	a918 <mp_emit_bc_unary_op>
}
    7a60:	bf00      	nop
    7a62:	3708      	adds	r7, #8
    7a64:	46bd      	mov	sp, r7
    7a66:	bd80      	pop	{r7, pc}

00007a68 <compile_comparison>:

STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a68:	b580      	push	{r7, lr}
    7a6a:	b08a      	sub	sp, #40	; 0x28
    7a6c:	af00      	add	r7, sp, #0
    7a6e:	6078      	str	r0, [r7, #4]
    7a70:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7a72:	683b      	ldr	r3, [r7, #0]
    7a74:	685b      	ldr	r3, [r3, #4]
    7a76:	0a1b      	lsrs	r3, r3, #8
    7a78:	61bb      	str	r3, [r7, #24]
    compile_node(comp, pns->nodes[0]);
    7a7a:	683b      	ldr	r3, [r7, #0]
    7a7c:	689b      	ldr	r3, [r3, #8]
    7a7e:	4619      	mov	r1, r3
    7a80:	6878      	ldr	r0, [r7, #4]
    7a82:	f000 ff6e 	bl	8962 <compile_node>
    bool multi = (num_nodes > 3);
    7a86:	69bb      	ldr	r3, [r7, #24]
    7a88:	2b03      	cmp	r3, #3
    7a8a:	bfcc      	ite	gt
    7a8c:	2301      	movgt	r3, #1
    7a8e:	2300      	movle	r3, #0
    7a90:	75fb      	strb	r3, [r7, #23]
    uint l_fail = 0;
    7a92:	2300      	movs	r3, #0
    7a94:	627b      	str	r3, [r7, #36]	; 0x24
    if (multi) {
    7a96:	7dfb      	ldrb	r3, [r7, #23]
    7a98:	2b00      	cmp	r3, #0
    7a9a:	d003      	beq.n	7aa4 <compile_comparison+0x3c>
        l_fail = comp_next_label(comp);
    7a9c:	6878      	ldr	r0, [r7, #4]
    7a9e:	f7fd f9a1 	bl	4de4 <comp_next_label>
    7aa2:	6278      	str	r0, [r7, #36]	; 0x24
    }
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7aa4:	2301      	movs	r3, #1
    7aa6:	623b      	str	r3, [r7, #32]
    7aa8:	e0b7      	b.n	7c1a <compile_comparison+0x1b2>
        compile_node(comp, pns->nodes[i + 1]);
    7aaa:	6a3b      	ldr	r3, [r7, #32]
    7aac:	1c5a      	adds	r2, r3, #1
    7aae:	683b      	ldr	r3, [r7, #0]
    7ab0:	3202      	adds	r2, #2
    7ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ab6:	4619      	mov	r1, r3
    7ab8:	6878      	ldr	r0, [r7, #4]
    7aba:	f000 ff52 	bl	8962 <compile_node>
        if (i + 2 < num_nodes) {
    7abe:	6a3b      	ldr	r3, [r7, #32]
    7ac0:	1c9a      	adds	r2, r3, #2
    7ac2:	69bb      	ldr	r3, [r7, #24]
    7ac4:	429a      	cmp	r2, r3
    7ac6:	da09      	bge.n	7adc <compile_comparison+0x74>
            EMIT(dup_top);
    7ac8:	687b      	ldr	r3, [r7, #4]
    7aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7acc:	4618      	mov	r0, r3
    7ace:	f002 fd8e 	bl	a5ee <mp_emit_bc_dup_top>
            EMIT(rot_three);
    7ad2:	687b      	ldr	r3, [r7, #4]
    7ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ad6:	4618      	mov	r0, r3
    7ad8:	f002 fdca 	bl	a670 <mp_emit_bc_rot_three>
        }
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    7adc:	683b      	ldr	r3, [r7, #0]
    7ade:	6a3a      	ldr	r2, [r7, #32]
    7ae0:	3202      	adds	r2, #2
    7ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ae6:	f003 030f 	and.w	r3, r3, #15
    7aea:	2b0e      	cmp	r3, #14
    7aec:	d140      	bne.n	7b70 <compile_comparison+0x108>
            mp_binary_op_t op;
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    7aee:	683b      	ldr	r3, [r7, #0]
    7af0:	6a3a      	ldr	r2, [r7, #32]
    7af2:	3202      	adds	r2, #2
    7af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7af8:	091b      	lsrs	r3, r3, #4
    7afa:	3b36      	subs	r3, #54	; 0x36
    7afc:	2b0b      	cmp	r3, #11
    7afe:	d82d      	bhi.n	7b5c <compile_comparison+0xf4>
    7b00:	a201      	add	r2, pc, #4	; (adr r2, 7b08 <compile_comparison+0xa0>)
    7b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7b06:	bf00      	nop
    7b08:	00007b39 	.word	0x00007b39
    7b0c:	00007b5d 	.word	0x00007b5d
    7b10:	00007b3f 	.word	0x00007b3f
    7b14:	00007b5d 	.word	0x00007b5d
    7b18:	00007b5d 	.word	0x00007b5d
    7b1c:	00007b5d 	.word	0x00007b5d
    7b20:	00007b5d 	.word	0x00007b5d
    7b24:	00007b5d 	.word	0x00007b5d
    7b28:	00007b4b 	.word	0x00007b4b
    7b2c:	00007b51 	.word	0x00007b51
    7b30:	00007b45 	.word	0x00007b45
    7b34:	00007b57 	.word	0x00007b57
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    7b38:	2300      	movs	r3, #0
    7b3a:	61fb      	str	r3, [r7, #28]
    7b3c:	e011      	b.n	7b62 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    7b3e:	2301      	movs	r3, #1
    7b40:	61fb      	str	r3, [r7, #28]
    7b42:	e00e      	b.n	7b62 <compile_comparison+0xfa>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    7b44:	2302      	movs	r3, #2
    7b46:	61fb      	str	r3, [r7, #28]
    7b48:	e00b      	b.n	7b62 <compile_comparison+0xfa>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    7b4a:	2303      	movs	r3, #3
    7b4c:	61fb      	str	r3, [r7, #28]
    7b4e:	e008      	b.n	7b62 <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    7b50:	2304      	movs	r3, #4
    7b52:	61fb      	str	r3, [r7, #28]
    7b54:	e005      	b.n	7b62 <compile_comparison+0xfa>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    7b56:	2305      	movs	r3, #5
    7b58:	61fb      	str	r3, [r7, #28]
    7b5a:	e002      	b.n	7b62 <compile_comparison+0xfa>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    7b5c:	2306      	movs	r3, #6
    7b5e:	61fb      	str	r3, [r7, #28]
    7b60:	bf00      	nop
            }
            EMIT_ARG(binary_op, op);
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b66:	69f9      	ldr	r1, [r7, #28]
    7b68:	4618      	mov	r0, r3
    7b6a:	f002 feea 	bl	a942 <mp_emit_bc_binary_op>
    7b6e:	e045      	b.n	7bfc <compile_comparison+0x194>
        } else {
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    7b70:	683b      	ldr	r3, [r7, #0]
    7b72:	6a3a      	ldr	r2, [r7, #32]
    7b74:	3202      	adds	r2, #2
    7b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	d008      	beq.n	7b90 <compile_comparison+0x128>
    7b7e:	683b      	ldr	r3, [r7, #0]
    7b80:	6a3a      	ldr	r2, [r7, #32]
    7b82:	3202      	adds	r2, #2
    7b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b88:	f003 0303 	and.w	r3, r3, #3
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d006      	beq.n	7b9e <compile_comparison+0x136>
    7b90:	4b3b      	ldr	r3, [pc, #236]	; (7c80 <compile_comparison+0x218>)
    7b92:	4a3c      	ldr	r2, [pc, #240]	; (7c84 <compile_comparison+0x21c>)
    7b94:	f640 0131 	movw	r1, #2097	; 0x831
    7b98:	483b      	ldr	r0, [pc, #236]	; (7c88 <compile_comparison+0x220>)
    7b9a:	f013 fc71 	bl	1b480 <__assert_func>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[i];
    7b9e:	683b      	ldr	r3, [r7, #0]
    7ba0:	6a3a      	ldr	r2, [r7, #32]
    7ba2:	3202      	adds	r2, #2
    7ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ba8:	613b      	str	r3, [r7, #16]
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    7baa:	693b      	ldr	r3, [r7, #16]
    7bac:	685b      	ldr	r3, [r3, #4]
    7bae:	b2db      	uxtb	r3, r3
    7bb0:	60fb      	str	r3, [r7, #12]
            if (kind == PN_comp_op_not_in) {
    7bb2:	68fb      	ldr	r3, [r7, #12]
    7bb4:	2b7d      	cmp	r3, #125	; 0x7d
    7bb6:	d106      	bne.n	7bc6 <compile_comparison+0x15e>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bbc:	2124      	movs	r1, #36	; 0x24
    7bbe:	4618      	mov	r0, r3
    7bc0:	f002 febf 	bl	a942 <mp_emit_bc_binary_op>
    7bc4:	e01a      	b.n	7bfc <compile_comparison+0x194>
            } else {
                assert(kind == PN_comp_op_is); // should be
    7bc6:	68fb      	ldr	r3, [r7, #12]
    7bc8:	2b7e      	cmp	r3, #126	; 0x7e
    7bca:	d006      	beq.n	7bda <compile_comparison+0x172>
    7bcc:	4b2f      	ldr	r3, [pc, #188]	; (7c8c <compile_comparison+0x224>)
    7bce:	4a2d      	ldr	r2, [pc, #180]	; (7c84 <compile_comparison+0x21c>)
    7bd0:	f640 0137 	movw	r1, #2103	; 0x837
    7bd4:	482c      	ldr	r0, [pc, #176]	; (7c88 <compile_comparison+0x220>)
    7bd6:	f013 fc53 	bl	1b480 <__assert_func>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    7bda:	693b      	ldr	r3, [r7, #16]
    7bdc:	689b      	ldr	r3, [r3, #8]
    7bde:	2b00      	cmp	r3, #0
    7be0:	d106      	bne.n	7bf0 <compile_comparison+0x188>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    7be2:	687b      	ldr	r3, [r7, #4]
    7be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7be6:	2107      	movs	r1, #7
    7be8:	4618      	mov	r0, r3
    7bea:	f002 feaa 	bl	a942 <mp_emit_bc_binary_op>
    7bee:	e005      	b.n	7bfc <compile_comparison+0x194>
                } else {
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    7bf0:	687b      	ldr	r3, [r7, #4]
    7bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bf4:	2125      	movs	r1, #37	; 0x25
    7bf6:	4618      	mov	r0, r3
    7bf8:	f002 fea3 	bl	a942 <mp_emit_bc_binary_op>
                }
            }
        }
        if (i + 2 < num_nodes) {
    7bfc:	6a3b      	ldr	r3, [r7, #32]
    7bfe:	1c9a      	adds	r2, r3, #2
    7c00:	69bb      	ldr	r3, [r7, #24]
    7c02:	429a      	cmp	r2, r3
    7c04:	da06      	bge.n	7c14 <compile_comparison+0x1ac>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    7c06:	687b      	ldr	r3, [r7, #4]
    7c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7c0c:	2100      	movs	r1, #0
    7c0e:	4618      	mov	r0, r3
    7c10:	f002 fd6e 	bl	a6f0 <mp_emit_bc_jump_if_or_pop>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7c14:	6a3b      	ldr	r3, [r7, #32]
    7c16:	3302      	adds	r3, #2
    7c18:	623b      	str	r3, [r7, #32]
    7c1a:	6a3b      	ldr	r3, [r7, #32]
    7c1c:	1c5a      	adds	r2, r3, #1
    7c1e:	69bb      	ldr	r3, [r7, #24]
    7c20:	429a      	cmp	r2, r3
    7c22:	f6ff af42 	blt.w	7aaa <compile_comparison+0x42>
        }
    }
    if (multi) {
    7c26:	7dfb      	ldrb	r3, [r7, #23]
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d025      	beq.n	7c78 <compile_comparison+0x210>
        uint l_end = comp_next_label(comp);
    7c2c:	6878      	ldr	r0, [r7, #4]
    7c2e:	f7fd f8d9 	bl	4de4 <comp_next_label>
    7c32:	60b8      	str	r0, [r7, #8]
        EMIT_ARG(jump, l_end);
    7c34:	687b      	ldr	r3, [r7, #4]
    7c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c38:	68b9      	ldr	r1, [r7, #8]
    7c3a:	4618      	mov	r0, r3
    7c3c:	f002 fd28 	bl	a690 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    7c40:	687b      	ldr	r3, [r7, #4]
    7c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7c46:	4618      	mov	r0, r3
    7c48:	f002 fa98 	bl	a17c <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c50:	2101      	movs	r1, #1
    7c52:	4618      	mov	r0, r3
    7c54:	f002 fa43 	bl	a0de <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    7c58:	687b      	ldr	r3, [r7, #4]
    7c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c5c:	4618      	mov	r0, r3
    7c5e:	f002 fcf7 	bl	a650 <mp_emit_bc_rot_two>
        EMIT(pop_top);
    7c62:	687b      	ldr	r3, [r7, #4]
    7c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c66:	4618      	mov	r0, r3
    7c68:	f002 fce1 	bl	a62e <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    7c6c:	687b      	ldr	r3, [r7, #4]
    7c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c70:	68b9      	ldr	r1, [r7, #8]
    7c72:	4618      	mov	r0, r3
    7c74:	f002 fa82 	bl	a17c <mp_emit_bc_label_assign>
    }
}
    7c78:	bf00      	nop
    7c7a:	3728      	adds	r7, #40	; 0x28
    7c7c:	46bd      	mov	sp, r7
    7c7e:	bd80      	pop	{r7, pc}
    7c80:	00020584 	.word	0x00020584
    7c84:	00020c80 	.word	0x00020c80
    7c88:	0001ff80 	.word	0x0001ff80
    7c8c:	000205ac 	.word	0x000205ac

00007c90 <compile_star_expr>:

STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7c90:	b580      	push	{r7, lr}
    7c92:	b082      	sub	sp, #8
    7c94:	af00      	add	r7, sp, #0
    7c96:	6078      	str	r0, [r7, #4]
    7c98:	6039      	str	r1, [r7, #0]
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    7c9a:	683b      	ldr	r3, [r7, #0]
    7c9c:	4a04      	ldr	r2, [pc, #16]	; (7cb0 <compile_star_expr+0x20>)
    7c9e:	4619      	mov	r1, r3
    7ca0:	6878      	ldr	r0, [r7, #4]
    7ca2:	f7fd f884 	bl	4dae <compile_syntax_error>
}
    7ca6:	bf00      	nop
    7ca8:	3708      	adds	r7, #8
    7caa:	46bd      	mov	sp, r7
    7cac:	bd80      	pop	{r7, pc}
    7cae:	bf00      	nop
    7cb0:	000205c4 	.word	0x000205c4

00007cb4 <compile_binary_op>:

STATIC void compile_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7cb4:	b580      	push	{r7, lr}
    7cb6:	b086      	sub	sp, #24
    7cb8:	af00      	add	r7, sp, #0
    7cba:	6078      	str	r0, [r7, #4]
    7cbc:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_xor_expr - PN_expr == MP_BINARY_OP_XOR);
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_and_expr - PN_expr == MP_BINARY_OP_AND);
    mp_binary_op_t binary_op = MP_BINARY_OP_OR + MP_PARSE_NODE_STRUCT_KIND(pns) - PN_expr;
    7cbe:	683b      	ldr	r3, [r7, #0]
    7cc0:	685b      	ldr	r3, [r3, #4]
    7cc2:	b2db      	uxtb	r3, r3
    7cc4:	3b0c      	subs	r3, #12
    7cc6:	613b      	str	r3, [r7, #16]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7cc8:	683b      	ldr	r3, [r7, #0]
    7cca:	685b      	ldr	r3, [r3, #4]
    7ccc:	0a1b      	lsrs	r3, r3, #8
    7cce:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7cd0:	683b      	ldr	r3, [r7, #0]
    7cd2:	689b      	ldr	r3, [r3, #8]
    7cd4:	4619      	mov	r1, r3
    7cd6:	6878      	ldr	r0, [r7, #4]
    7cd8:	f000 fe43 	bl	8962 <compile_node>
    for (int i = 1; i < num_nodes; ++i) {
    7cdc:	2301      	movs	r3, #1
    7cde:	617b      	str	r3, [r7, #20]
    7ce0:	e011      	b.n	7d06 <compile_binary_op+0x52>
        compile_node(comp, pns->nodes[i]);
    7ce2:	683b      	ldr	r3, [r7, #0]
    7ce4:	697a      	ldr	r2, [r7, #20]
    7ce6:	3202      	adds	r2, #2
    7ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7cec:	4619      	mov	r1, r3
    7cee:	6878      	ldr	r0, [r7, #4]
    7cf0:	f000 fe37 	bl	8962 <compile_node>
        EMIT_ARG(binary_op, binary_op);
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cf8:	6939      	ldr	r1, [r7, #16]
    7cfa:	4618      	mov	r0, r3
    7cfc:	f002 fe21 	bl	a942 <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; ++i) {
    7d00:	697b      	ldr	r3, [r7, #20]
    7d02:	3301      	adds	r3, #1
    7d04:	617b      	str	r3, [r7, #20]
    7d06:	697a      	ldr	r2, [r7, #20]
    7d08:	68fb      	ldr	r3, [r7, #12]
    7d0a:	429a      	cmp	r2, r3
    7d0c:	dbe9      	blt.n	7ce2 <compile_binary_op+0x2e>
    }
}
    7d0e:	bf00      	nop
    7d10:	3718      	adds	r7, #24
    7d12:	46bd      	mov	sp, r7
    7d14:	bd80      	pop	{r7, pc}

00007d16 <compile_term>:

STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d16:	b580      	push	{r7, lr}
    7d18:	b086      	sub	sp, #24
    7d1a:	af00      	add	r7, sp, #0
    7d1c:	6078      	str	r0, [r7, #4]
    7d1e:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7d20:	683b      	ldr	r3, [r7, #0]
    7d22:	685b      	ldr	r3, [r3, #4]
    7d24:	0a1b      	lsrs	r3, r3, #8
    7d26:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7d28:	683b      	ldr	r3, [r7, #0]
    7d2a:	689b      	ldr	r3, [r3, #8]
    7d2c:	4619      	mov	r1, r3
    7d2e:	6878      	ldr	r0, [r7, #4]
    7d30:	f000 fe17 	bl	8962 <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7d34:	2301      	movs	r3, #1
    7d36:	617b      	str	r3, [r7, #20]
    7d38:	e055      	b.n	7de6 <compile_term+0xd0>
        compile_node(comp, pns->nodes[i + 1]);
    7d3a:	697b      	ldr	r3, [r7, #20]
    7d3c:	1c5a      	adds	r2, r3, #1
    7d3e:	683b      	ldr	r3, [r7, #0]
    7d40:	3202      	adds	r2, #2
    7d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d46:	4619      	mov	r1, r3
    7d48:	6878      	ldr	r0, [r7, #4]
    7d4a:	f000 fe0a 	bl	8962 <compile_node>
        mp_binary_op_t op;
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    7d4e:	683b      	ldr	r3, [r7, #0]
    7d50:	697a      	ldr	r2, [r7, #20]
    7d52:	3202      	adds	r2, #2
    7d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d58:	091b      	lsrs	r3, r3, #4
    7d5a:	60bb      	str	r3, [r7, #8]
        switch (tok) {
    7d5c:	68bb      	ldr	r3, [r7, #8]
    7d5e:	3b2f      	subs	r3, #47	; 0x2f
    7d60:	2b08      	cmp	r3, #8
    7d62:	d82a      	bhi.n	7dba <compile_term+0xa4>
    7d64:	a201      	add	r2, pc, #4	; (adr r2, 7d6c <compile_term+0x56>)
    7d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7d6a:	bf00      	nop
    7d6c:	00007d91 	.word	0x00007d91
    7d70:	00007d97 	.word	0x00007d97
    7d74:	00007d9d 	.word	0x00007d9d
    7d78:	00007dbb 	.word	0x00007dbb
    7d7c:	00007da9 	.word	0x00007da9
    7d80:	00007da3 	.word	0x00007da3
    7d84:	00007daf 	.word	0x00007daf
    7d88:	00007dbb 	.word	0x00007dbb
    7d8c:	00007db5 	.word	0x00007db5
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    7d90:	231a      	movs	r3, #26
    7d92:	613b      	str	r3, [r7, #16]
    7d94:	e01e      	b.n	7dd4 <compile_term+0xbe>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    7d96:	231b      	movs	r3, #27
    7d98:	613b      	str	r3, [r7, #16]
    7d9a:	e01b      	b.n	7dd4 <compile_term+0xbe>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    7d9c:	231c      	movs	r3, #28
    7d9e:	613b      	str	r3, [r7, #16]
    7da0:	e018      	b.n	7dd4 <compile_term+0xbe>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    7da2:	231d      	movs	r3, #29
    7da4:	613b      	str	r3, [r7, #16]
    7da6:	e015      	b.n	7dd4 <compile_term+0xbe>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    7da8:	231e      	movs	r3, #30
    7daa:	613b      	str	r3, [r7, #16]
    7dac:	e012      	b.n	7dd4 <compile_term+0xbe>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    7dae:	231f      	movs	r3, #31
    7db0:	613b      	str	r3, [r7, #16]
    7db2:	e00f      	b.n	7dd4 <compile_term+0xbe>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    7db4:	2318      	movs	r3, #24
    7db6:	613b      	str	r3, [r7, #16]
    7db8:	e00c      	b.n	7dd4 <compile_term+0xbe>
            default:
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    7dba:	68bb      	ldr	r3, [r7, #8]
    7dbc:	2b39      	cmp	r3, #57	; 0x39
    7dbe:	d006      	beq.n	7dce <compile_term+0xb8>
    7dc0:	4b0d      	ldr	r3, [pc, #52]	; (7df8 <compile_term+0xe2>)
    7dc2:	4a0e      	ldr	r2, [pc, #56]	; (7dfc <compile_term+0xe6>)
    7dc4:	f640 016e 	movw	r1, #2158	; 0x86e
    7dc8:	480d      	ldr	r0, [pc, #52]	; (7e00 <compile_term+0xea>)
    7dca:	f013 fb59 	bl	1b480 <__assert_func>
                op = MP_BINARY_OP_RSHIFT;
    7dce:	2319      	movs	r3, #25
    7dd0:	613b      	str	r3, [r7, #16]
                break;
    7dd2:	bf00      	nop
        }
        EMIT_ARG(binary_op, op);
    7dd4:	687b      	ldr	r3, [r7, #4]
    7dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7dd8:	6939      	ldr	r1, [r7, #16]
    7dda:	4618      	mov	r0, r3
    7ddc:	f002 fdb1 	bl	a942 <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7de0:	697b      	ldr	r3, [r7, #20]
    7de2:	3302      	adds	r3, #2
    7de4:	617b      	str	r3, [r7, #20]
    7de6:	697b      	ldr	r3, [r7, #20]
    7de8:	1c5a      	adds	r2, r3, #1
    7dea:	68fb      	ldr	r3, [r7, #12]
    7dec:	429a      	cmp	r2, r3
    7dee:	dba4      	blt.n	7d3a <compile_term+0x24>
    }
}
    7df0:	bf00      	nop
    7df2:	3718      	adds	r7, #24
    7df4:	46bd      	mov	sp, r7
    7df6:	bd80      	pop	{r7, pc}
    7df8:	000205e4 	.word	0x000205e4
    7dfc:	00020c94 	.word	0x00020c94
    7e00:	0001ff80 	.word	0x0001ff80

00007e04 <compile_factor_2>:

STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e04:	b580      	push	{r7, lr}
    7e06:	b084      	sub	sp, #16
    7e08:	af00      	add	r7, sp, #0
    7e0a:	6078      	str	r0, [r7, #4]
    7e0c:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[1]);
    7e0e:	683b      	ldr	r3, [r7, #0]
    7e10:	68db      	ldr	r3, [r3, #12]
    7e12:	4619      	mov	r1, r3
    7e14:	6878      	ldr	r0, [r7, #4]
    7e16:	f000 fda4 	bl	8962 <compile_node>
    mp_unary_op_t op;
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    7e1a:	683b      	ldr	r3, [r7, #0]
    7e1c:	689b      	ldr	r3, [r3, #8]
    7e1e:	091b      	lsrs	r3, r3, #4
    7e20:	60bb      	str	r3, [r7, #8]
    switch (tok) {
    7e22:	68bb      	ldr	r3, [r7, #8]
    7e24:	2b2f      	cmp	r3, #47	; 0x2f
    7e26:	d002      	beq.n	7e2e <compile_factor_2+0x2a>
    7e28:	2b30      	cmp	r3, #48	; 0x30
    7e2a:	d003      	beq.n	7e34 <compile_factor_2+0x30>
    7e2c:	e005      	b.n	7e3a <compile_factor_2+0x36>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    7e2e:	2300      	movs	r3, #0
    7e30:	60fb      	str	r3, [r7, #12]
    7e32:	e00f      	b.n	7e54 <compile_factor_2+0x50>
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    7e34:	2301      	movs	r3, #1
    7e36:	60fb      	str	r3, [r7, #12]
    7e38:	e00c      	b.n	7e54 <compile_factor_2+0x50>
        default:
            assert(tok == MP_TOKEN_OP_TILDE);
    7e3a:	68bb      	ldr	r3, [r7, #8]
    7e3c:	2b3d      	cmp	r3, #61	; 0x3d
    7e3e:	d006      	beq.n	7e4e <compile_factor_2+0x4a>
    7e40:	4b09      	ldr	r3, [pc, #36]	; (7e68 <compile_factor_2+0x64>)
    7e42:	4a0a      	ldr	r2, [pc, #40]	; (7e6c <compile_factor_2+0x68>)
    7e44:	f640 017e 	movw	r1, #2174	; 0x87e
    7e48:	4809      	ldr	r0, [pc, #36]	; (7e70 <compile_factor_2+0x6c>)
    7e4a:	f013 fb19 	bl	1b480 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    7e4e:	2302      	movs	r3, #2
    7e50:	60fb      	str	r3, [r7, #12]
            break;
    7e52:	bf00      	nop
    }
    EMIT_ARG(unary_op, op);
    7e54:	687b      	ldr	r3, [r7, #4]
    7e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e58:	68f9      	ldr	r1, [r7, #12]
    7e5a:	4618      	mov	r0, r3
    7e5c:	f002 fd5c 	bl	a918 <mp_emit_bc_unary_op>
}
    7e60:	bf00      	nop
    7e62:	3710      	adds	r7, #16
    7e64:	46bd      	mov	sp, r7
    7e66:	bd80      	pop	{r7, pc}
    7e68:	00020600 	.word	0x00020600
    7e6c:	00020ca4 	.word	0x00020ca4
    7e70:	0001ff80 	.word	0x0001ff80

00007e74 <compile_atom_expr_normal>:

STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e74:	b580      	push	{r7, lr}
    7e76:	b08c      	sub	sp, #48	; 0x30
    7e78:	af00      	add	r7, sp, #0
    7e7a:	6078      	str	r0, [r7, #4]
    7e7c:	6039      	str	r1, [r7, #0]
    // compile the subject of the expression
    compile_node(comp, pns->nodes[0]);
    7e7e:	683b      	ldr	r3, [r7, #0]
    7e80:	689b      	ldr	r3, [r3, #8]
    7e82:	4619      	mov	r1, r3
    7e84:	6878      	ldr	r0, [r7, #4]
    7e86:	f000 fd6c 	bl	8962 <compile_node>

    // compile_atom_expr_await may call us with a NULL node
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7e8a:	683b      	ldr	r3, [r7, #0]
    7e8c:	68db      	ldr	r3, [r3, #12]
    7e8e:	2b00      	cmp	r3, #0
    7e90:	f000 80ed 	beq.w	806e <compile_atom_expr_normal+0x1fa>
        return;
    }

    // get the array of trailers (known to be an array of PARSE_NODE_STRUCT)
    size_t num_trail = 1;
    7e94:	2301      	movs	r3, #1
    7e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    7e98:	683b      	ldr	r3, [r7, #0]
    7e9a:	330c      	adds	r3, #12
    7e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    7e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ea0:	681b      	ldr	r3, [r3, #0]
    7ea2:	685b      	ldr	r3, [r3, #4]
    7ea4:	b2db      	uxtb	r3, r3
    7ea6:	2b86      	cmp	r3, #134	; 0x86
    7ea8:	d108      	bne.n	7ebc <compile_atom_expr_normal+0x48>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    7eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eac:	681b      	ldr	r3, [r3, #0]
    7eae:	685b      	ldr	r3, [r3, #4]
    7eb0:	0a1b      	lsrs	r3, r3, #8
    7eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    7eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eb6:	681b      	ldr	r3, [r3, #0]
    7eb8:	3308      	adds	r3, #8
    7eba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    // the current index into the array of trailers
    size_t i = 0;
    7ebc:	2300      	movs	r3, #0
    7ebe:	627b      	str	r3, [r7, #36]	; 0x24

    // handle special super() call
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ec4:	681b      	ldr	r3, [r3, #0]
    7ec6:	2b07      	cmp	r3, #7
    7ec8:	f040 80cc 	bne.w	8064 <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    7ecc:	683b      	ldr	r3, [r7, #0]
    7ece:	689b      	ldr	r3, [r3, #8]
    7ed0:	f003 030f 	and.w	r3, r3, #15
    7ed4:	2b02      	cmp	r3, #2
    7ed6:	f040 80c5 	bne.w	8064 <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    7eda:	683b      	ldr	r3, [r7, #0]
    7edc:	689b      	ldr	r3, [r3, #8]
    7ede:	091b      	lsrs	r3, r3, #4
    7ee0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
    7ee4:	f040 80be 	bne.w	8064 <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    7ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7eea:	681b      	ldr	r3, [r3, #0]
    7eec:	685b      	ldr	r3, [r3, #4]
    7eee:	b2db      	uxtb	r3, r3
    7ef0:	2b2d      	cmp	r3, #45	; 0x2d
    7ef2:	f040 80b7 	bne.w	8064 <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    7ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ef8:	681b      	ldr	r3, [r3, #0]
    7efa:	689b      	ldr	r3, [r3, #8]
    7efc:	2b00      	cmp	r3, #0
    7efe:	f040 80b1 	bne.w	8064 <compile_atom_expr_normal+0x1f0>
        // at this point we have matched "super()" within a function

        // load the class for super to search for a parent
        compile_load_id(comp, MP_QSTR___class__);
    7f02:	2106      	movs	r1, #6
    7f04:	6878      	ldr	r0, [r7, #4]
    7f06:	f7fd f85c 	bl	4fc2 <compile_load_id>

        // look for first argument to function (assumes it's "self")
        bool found = false;
    7f0a:	2300      	movs	r3, #0
    7f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        id_info_t *id = &comp->scope_cur->id_info[0];
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f16:	61fb      	str	r3, [r7, #28]
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    7f1e:	61bb      	str	r3, [r7, #24]
    7f20:	e015      	b.n	7f4e <compile_atom_expr_normal+0xda>
            if (id->flags & ID_FLAG_IS_PARAM) {
    7f22:	69fb      	ldr	r3, [r7, #28]
    7f24:	785b      	ldrb	r3, [r3, #1]
    7f26:	f003 0301 	and.w	r3, r3, #1
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	d009      	beq.n	7f42 <compile_atom_expr_normal+0xce>
                // first argument found; load it
                compile_load_id(comp, id->qst);
    7f2e:	69fb      	ldr	r3, [r7, #28]
    7f30:	685b      	ldr	r3, [r3, #4]
    7f32:	4619      	mov	r1, r3
    7f34:	6878      	ldr	r0, [r7, #4]
    7f36:	f7fd f844 	bl	4fc2 <compile_load_id>
                found = true;
    7f3a:	2301      	movs	r3, #1
    7f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                break;
    7f40:	e008      	b.n	7f54 <compile_atom_expr_normal+0xe0>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    7f42:	69bb      	ldr	r3, [r7, #24]
    7f44:	3b01      	subs	r3, #1
    7f46:	61bb      	str	r3, [r7, #24]
    7f48:	69fb      	ldr	r3, [r7, #28]
    7f4a:	3308      	adds	r3, #8
    7f4c:	61fb      	str	r3, [r7, #28]
    7f4e:	69bb      	ldr	r3, [r7, #24]
    7f50:	2b00      	cmp	r3, #0
    7f52:	d1e6      	bne.n	7f22 <compile_atom_expr_normal+0xae>
            }
        }
        if (!found) {
    7f54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7f58:	f083 0301 	eor.w	r3, r3, #1
    7f5c:	b2db      	uxtb	r3, r3
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d007      	beq.n	7f72 <compile_atom_expr_normal+0xfe>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    7f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f64:	681b      	ldr	r3, [r3, #0]
    7f66:	4a44      	ldr	r2, [pc, #272]	; (8078 <compile_atom_expr_normal+0x204>)
    7f68:	4619      	mov	r1, r3
    7f6a:	6878      	ldr	r0, [r7, #4]
    7f6c:	f7fc ff1f 	bl	4dae <compile_syntax_error>
                "super() can't find self"); // really a TypeError
            return;
    7f70:	e07e      	b.n	8070 <compile_atom_expr_normal+0x1fc>
        }

        if (num_trail >= 3
    7f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7f74:	2b02      	cmp	r3, #2
    7f76:	d926      	bls.n	7fc6 <compile_atom_expr_normal+0x152>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    7f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f7a:	3304      	adds	r3, #4
    7f7c:	681b      	ldr	r3, [r3, #0]
    7f7e:	685b      	ldr	r3, [r3, #4]
    7f80:	b2db      	uxtb	r3, r3
    7f82:	2b2f      	cmp	r3, #47	; 0x2f
    7f84:	d11f      	bne.n	7fc6 <compile_atom_expr_normal+0x152>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    7f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f88:	3308      	adds	r3, #8
    7f8a:	681b      	ldr	r3, [r3, #0]
    7f8c:	685b      	ldr	r3, [r3, #4]
    7f8e:	b2db      	uxtb	r3, r3
    7f90:	2b2d      	cmp	r3, #45	; 0x2d
    7f92:	d118      	bne.n	7fc6 <compile_atom_expr_normal+0x152>
            // optimisation for method calls super().f(...), to eliminate heap allocation
            mp_parse_node_struct_t *pns_period = pns_trail[1];
    7f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f96:	685b      	ldr	r3, [r3, #4]
    7f98:	617b      	str	r3, [r7, #20]
            mp_parse_node_struct_t *pns_paren = pns_trail[2];
    7f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f9c:	689b      	ldr	r3, [r3, #8]
    7f9e:	613b      	str	r3, [r7, #16]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    7fa0:	687b      	ldr	r3, [r7, #4]
    7fa2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7fa4:	697b      	ldr	r3, [r7, #20]
    7fa6:	689b      	ldr	r3, [r3, #8]
    7fa8:	091b      	lsrs	r3, r3, #4
    7faa:	2201      	movs	r2, #1
    7fac:	4619      	mov	r1, r3
    7fae:	f002 fa33 	bl	a418 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    7fb2:	693b      	ldr	r3, [r7, #16]
    7fb4:	6899      	ldr	r1, [r3, #8]
    7fb6:	2300      	movs	r3, #0
    7fb8:	2201      	movs	r2, #1
    7fba:	6878      	ldr	r0, [r7, #4]
    7fbc:	f000 f871 	bl	80a2 <compile_trailer_paren_helper>
            i = 3;
    7fc0:	2303      	movs	r3, #3
    7fc2:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    7fc4:	e008      	b.n	7fd8 <compile_atom_expr_normal+0x164>
        } else {
            // a super() call
            EMIT_ARG(call_function, 2, 0, 0);
    7fc6:	687b      	ldr	r3, [r7, #4]
    7fc8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7fca:	2300      	movs	r3, #0
    7fcc:	2200      	movs	r2, #0
    7fce:	2102      	movs	r1, #2
    7fd0:	f002 fe1e 	bl	ac10 <mp_emit_bc_call_function>
            i = 1;
    7fd4:	2301      	movs	r3, #1
    7fd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    // compile the remaining trailers
    for (; i < num_trail; i++) {
    7fd8:	e044      	b.n	8064 <compile_atom_expr_normal+0x1f0>
        if (i + 1 < num_trail
    7fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fdc:	1c5a      	adds	r2, r3, #1
    7fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7fe0:	429a      	cmp	r2, r3
    7fe2:	d233      	bcs.n	804c <compile_atom_expr_normal+0x1d8>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    7fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fe6:	009b      	lsls	r3, r3, #2
    7fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7fea:	4413      	add	r3, r2
    7fec:	681b      	ldr	r3, [r3, #0]
    7fee:	685b      	ldr	r3, [r3, #4]
    7ff0:	b2db      	uxtb	r3, r3
    7ff2:	2b2f      	cmp	r3, #47	; 0x2f
    7ff4:	d12a      	bne.n	804c <compile_atom_expr_normal+0x1d8>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    7ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ff8:	3301      	adds	r3, #1
    7ffa:	009b      	lsls	r3, r3, #2
    7ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7ffe:	4413      	add	r3, r2
    8000:	681b      	ldr	r3, [r3, #0]
    8002:	685b      	ldr	r3, [r3, #4]
    8004:	b2db      	uxtb	r3, r3
    8006:	2b2d      	cmp	r3, #45	; 0x2d
    8008:	d120      	bne.n	804c <compile_atom_expr_normal+0x1d8>
            // optimisation for method calls a.f(...), following PyPy
            mp_parse_node_struct_t *pns_period = pns_trail[i];
    800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    800c:	009b      	lsls	r3, r3, #2
    800e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8010:	4413      	add	r3, r2
    8012:	681b      	ldr	r3, [r3, #0]
    8014:	60fb      	str	r3, [r7, #12]
            mp_parse_node_struct_t *pns_paren = pns_trail[i + 1];
    8016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8018:	3301      	adds	r3, #1
    801a:	009b      	lsls	r3, r3, #2
    801c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    801e:	4413      	add	r3, r2
    8020:	681b      	ldr	r3, [r3, #0]
    8022:	60bb      	str	r3, [r7, #8]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8028:	68fb      	ldr	r3, [r7, #12]
    802a:	689b      	ldr	r3, [r3, #8]
    802c:	091b      	lsrs	r3, r3, #4
    802e:	2200      	movs	r2, #0
    8030:	4619      	mov	r1, r3
    8032:	f002 f9f1 	bl	a418 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    8036:	68bb      	ldr	r3, [r7, #8]
    8038:	6899      	ldr	r1, [r3, #8]
    803a:	2300      	movs	r3, #0
    803c:	2201      	movs	r2, #1
    803e:	6878      	ldr	r0, [r7, #4]
    8040:	f000 f82f 	bl	80a2 <compile_trailer_paren_helper>
            i += 1;
    8044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8046:	3301      	adds	r3, #1
    8048:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    804a:	e008      	b.n	805e <compile_atom_expr_normal+0x1ea>
        } else {
            // node is one of: trailer_paren, trailer_bracket, trailer_period
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    804e:	009b      	lsls	r3, r3, #2
    8050:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8052:	4413      	add	r3, r2
    8054:	681b      	ldr	r3, [r3, #0]
    8056:	4619      	mov	r1, r3
    8058:	6878      	ldr	r0, [r7, #4]
    805a:	f000 fc82 	bl	8962 <compile_node>
    for (; i < num_trail; i++) {
    805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8060:	3301      	adds	r3, #1
    8062:	627b      	str	r3, [r7, #36]	; 0x24
    8064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8068:	429a      	cmp	r2, r3
    806a:	d3b6      	bcc.n	7fda <compile_atom_expr_normal+0x166>
    806c:	e000      	b.n	8070 <compile_atom_expr_normal+0x1fc>
        return;
    806e:	bf00      	nop
        }
    }
}
    8070:	3730      	adds	r7, #48	; 0x30
    8072:	46bd      	mov	sp, r7
    8074:	bd80      	pop	{r7, pc}
    8076:	bf00      	nop
    8078:	0002061c 	.word	0x0002061c

0000807c <compile_power>:

STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    807c:	b580      	push	{r7, lr}
    807e:	b082      	sub	sp, #8
    8080:	af00      	add	r7, sp, #0
    8082:	6078      	str	r0, [r7, #4]
    8084:	6039      	str	r1, [r7, #0]
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    8086:	6839      	ldr	r1, [r7, #0]
    8088:	6878      	ldr	r0, [r7, #4]
    808a:	f7fc ff6d 	bl	4f68 <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    808e:	687b      	ldr	r3, [r7, #4]
    8090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8092:	2120      	movs	r1, #32
    8094:	4618      	mov	r0, r3
    8096:	f002 fc54 	bl	a942 <mp_emit_bc_binary_op>
}
    809a:	bf00      	nop
    809c:	3708      	adds	r7, #8
    809e:	46bd      	mov	sp, r7
    80a0:	bd80      	pop	{r7, pc}

000080a2 <compile_trailer_paren_helper>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    80a2:	b580      	push	{r7, lr}
    80a4:	b08e      	sub	sp, #56	; 0x38
    80a6:	af00      	add	r7, sp, #0
    80a8:	60f8      	str	r0, [r7, #12]
    80aa:	60b9      	str	r1, [r7, #8]
    80ac:	603b      	str	r3, [r7, #0]
    80ae:	4613      	mov	r3, r2
    80b0:	71fb      	strb	r3, [r7, #7]
    // function to call is on top of stack

    // get the list of arguments
    mp_parse_node_t *args;
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    80b2:	f107 0214 	add.w	r2, r7, #20
    80b6:	f107 0308 	add.w	r3, r7, #8
    80ba:	2197      	movs	r1, #151	; 0x97
    80bc:	4618      	mov	r0, r3
    80be:	f7fb fd75 	bl	3bac <mp_parse_node_extract_list>
    80c2:	61f8      	str	r0, [r7, #28]

    // compile the arguments
    // Rather than calling compile_node on the list, we go through the list of args
    // explicitly here so that we can count the number of arguments and give sensible
    // error messages.
    int n_positional = n_positional_extra;
    80c4:	683b      	ldr	r3, [r7, #0]
    80c6:	637b      	str	r3, [r7, #52]	; 0x34
    uint n_keyword = 0;
    80c8:	2300      	movs	r3, #0
    80ca:	633b      	str	r3, [r7, #48]	; 0x30
    uint star_flags = 0;
    80cc:	2300      	movs	r3, #0
    80ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    80d0:	2300      	movs	r3, #0
    80d2:	62bb      	str	r3, [r7, #40]	; 0x28
    80d4:	2300      	movs	r3, #0
    80d6:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < n_args; i++) {
    80d8:	2300      	movs	r3, #0
    80da:	623b      	str	r3, [r7, #32]
    80dc:	e0af      	b.n	823e <compile_trailer_paren_helper+0x19c>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    80de:	697a      	ldr	r2, [r7, #20]
    80e0:	6a3b      	ldr	r3, [r7, #32]
    80e2:	009b      	lsls	r3, r3, #2
    80e4:	4413      	add	r3, r2
    80e6:	681b      	ldr	r3, [r3, #0]
    80e8:	2b00      	cmp	r3, #0
    80ea:	d07d      	beq.n	81e8 <compile_trailer_paren_helper+0x146>
    80ec:	697a      	ldr	r2, [r7, #20]
    80ee:	6a3b      	ldr	r3, [r7, #32]
    80f0:	009b      	lsls	r3, r3, #2
    80f2:	4413      	add	r3, r2
    80f4:	681b      	ldr	r3, [r3, #0]
    80f6:	f003 0303 	and.w	r3, r3, #3
    80fa:	2b00      	cmp	r3, #0
    80fc:	d174      	bne.n	81e8 <compile_trailer_paren_helper+0x146>
            mp_parse_node_struct_t *pns_arg = (mp_parse_node_struct_t*)args[i];
    80fe:	697a      	ldr	r2, [r7, #20]
    8100:	6a3b      	ldr	r3, [r7, #32]
    8102:	009b      	lsls	r3, r3, #2
    8104:	4413      	add	r3, r2
    8106:	681b      	ldr	r3, [r3, #0]
    8108:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    810a:	69bb      	ldr	r3, [r7, #24]
    810c:	685b      	ldr	r3, [r3, #4]
    810e:	b2db      	uxtb	r3, r3
    8110:	2b99      	cmp	r3, #153	; 0x99
    8112:	d112      	bne.n	813a <compile_trailer_paren_helper+0x98>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    8114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8116:	f003 0301 	and.w	r3, r3, #1
    811a:	2b00      	cmp	r3, #0
    811c:	d006      	beq.n	812c <compile_trailer_paren_helper+0x8a>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    811e:	69bb      	ldr	r3, [r7, #24]
    8120:	4a64      	ldr	r2, [pc, #400]	; (82b4 <compile_trailer_paren_helper+0x212>)
    8122:	4619      	mov	r1, r3
    8124:	68f8      	ldr	r0, [r7, #12]
    8126:	f7fc fe42 	bl	4dae <compile_syntax_error>
                    return;
    812a:	e0c0      	b.n	82ae <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    812e:	f043 0301 	orr.w	r3, r3, #1
    8132:	62fb      	str	r3, [r7, #44]	; 0x2c
                star_args_node = pns_arg;
    8134:	69bb      	ldr	r3, [r7, #24]
    8136:	62bb      	str	r3, [r7, #40]	; 0x28
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8138:	e07e      	b.n	8238 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    813a:	69bb      	ldr	r3, [r7, #24]
    813c:	685b      	ldr	r3, [r3, #4]
    813e:	b2db      	uxtb	r3, r3
    8140:	2b9a      	cmp	r3, #154	; 0x9a
    8142:	d112      	bne.n	816a <compile_trailer_paren_helper+0xc8>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    8144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8146:	f003 0302 	and.w	r3, r3, #2
    814a:	2b00      	cmp	r3, #0
    814c:	d006      	beq.n	815c <compile_trailer_paren_helper+0xba>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    814e:	69bb      	ldr	r3, [r7, #24]
    8150:	4a59      	ldr	r2, [pc, #356]	; (82b8 <compile_trailer_paren_helper+0x216>)
    8152:	4619      	mov	r1, r3
    8154:	68f8      	ldr	r0, [r7, #12]
    8156:	f7fc fe2a 	bl	4dae <compile_syntax_error>
                    return;
    815a:	e0a8      	b.n	82ae <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    815e:	f043 0302 	orr.w	r3, r3, #2
    8162:	62fb      	str	r3, [r7, #44]	; 0x2c
                dblstar_args_node = pns_arg;
    8164:	69bb      	ldr	r3, [r7, #24]
    8166:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8168:	e066      	b.n	8238 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    816a:	69bb      	ldr	r3, [r7, #24]
    816c:	685b      	ldr	r3, [r3, #4]
    816e:	b2db      	uxtb	r3, r3
    8170:	2b9b      	cmp	r3, #155	; 0x9b
    8172:	d138      	bne.n	81e6 <compile_trailer_paren_helper+0x144>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    8174:	69bb      	ldr	r3, [r7, #24]
    8176:	68db      	ldr	r3, [r3, #12]
    8178:	2b00      	cmp	r3, #0
    817a:	d00b      	beq.n	8194 <compile_trailer_paren_helper+0xf2>
    817c:	69bb      	ldr	r3, [r7, #24]
    817e:	68db      	ldr	r3, [r3, #12]
    8180:	f003 0303 	and.w	r3, r3, #3
    8184:	2b00      	cmp	r3, #0
    8186:	d105      	bne.n	8194 <compile_trailer_paren_helper+0xf2>
    8188:	69bb      	ldr	r3, [r7, #24]
    818a:	68db      	ldr	r3, [r3, #12]
    818c:	685b      	ldr	r3, [r3, #4]
    818e:	b2db      	uxtb	r3, r3
    8190:	2b9f      	cmp	r3, #159	; 0x9f
    8192:	d01f      	beq.n	81d4 <compile_trailer_paren_helper+0x132>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    8194:	69bb      	ldr	r3, [r7, #24]
    8196:	689b      	ldr	r3, [r3, #8]
    8198:	f003 030f 	and.w	r3, r3, #15
    819c:	2b02      	cmp	r3, #2
    819e:	d006      	beq.n	81ae <compile_trailer_paren_helper+0x10c>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    81a0:	69bb      	ldr	r3, [r7, #24]
    81a2:	4a46      	ldr	r2, [pc, #280]	; (82bc <compile_trailer_paren_helper+0x21a>)
    81a4:	4619      	mov	r1, r3
    81a6:	68f8      	ldr	r0, [r7, #12]
    81a8:	f7fc fe01 	bl	4dae <compile_syntax_error>
                        return;
    81ac:	e07f      	b.n	82ae <compile_trailer_paren_helper+0x20c>
                    }
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    81ae:	68fb      	ldr	r3, [r7, #12]
    81b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    81b2:	69bb      	ldr	r3, [r7, #24]
    81b4:	689b      	ldr	r3, [r3, #8]
    81b6:	091b      	lsrs	r3, r3, #4
    81b8:	4619      	mov	r1, r3
    81ba:	4610      	mov	r0, r2
    81bc:	f002 f8ba 	bl	a334 <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    81c0:	69bb      	ldr	r3, [r7, #24]
    81c2:	68db      	ldr	r3, [r3, #12]
    81c4:	4619      	mov	r1, r3
    81c6:	68f8      	ldr	r0, [r7, #12]
    81c8:	f000 fbcb 	bl	8962 <compile_node>
                    n_keyword += 1;
    81cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    81ce:	3301      	adds	r3, #1
    81d0:	633b      	str	r3, [r7, #48]	; 0x30
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    81d2:	e031      	b.n	8238 <compile_trailer_paren_helper+0x196>
                } else {
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    81d4:	2206      	movs	r2, #6
    81d6:	69b9      	ldr	r1, [r7, #24]
    81d8:	68f8      	ldr	r0, [r7, #12]
    81da:	f000 f875 	bl	82c8 <compile_comprehension>
                    n_positional++;
    81de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    81e0:	3301      	adds	r3, #1
    81e2:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    81e4:	e028      	b.n	8238 <compile_trailer_paren_helper+0x196>
                }
            } else {
                goto normal_argument;
    81e6:	bf00      	nop
            }
        } else {
            normal_argument:
            if (star_flags) {
    81e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81ea:	2b00      	cmp	r3, #0
    81ec:	d00a      	beq.n	8204 <compile_trailer_paren_helper+0x162>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    81ee:	697a      	ldr	r2, [r7, #20]
    81f0:	6a3b      	ldr	r3, [r7, #32]
    81f2:	009b      	lsls	r3, r3, #2
    81f4:	4413      	add	r3, r2
    81f6:	681b      	ldr	r3, [r3, #0]
    81f8:	4a31      	ldr	r2, [pc, #196]	; (82c0 <compile_trailer_paren_helper+0x21e>)
    81fa:	4619      	mov	r1, r3
    81fc:	68f8      	ldr	r0, [r7, #12]
    81fe:	f7fc fdd6 	bl	4dae <compile_syntax_error>
                return;
    8202:	e054      	b.n	82ae <compile_trailer_paren_helper+0x20c>
            }
            if (n_keyword > 0) {
    8204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8206:	2b00      	cmp	r3, #0
    8208:	d00a      	beq.n	8220 <compile_trailer_paren_helper+0x17e>
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    820a:	697a      	ldr	r2, [r7, #20]
    820c:	6a3b      	ldr	r3, [r7, #32]
    820e:	009b      	lsls	r3, r3, #2
    8210:	4413      	add	r3, r2
    8212:	681b      	ldr	r3, [r3, #0]
    8214:	4a2b      	ldr	r2, [pc, #172]	; (82c4 <compile_trailer_paren_helper+0x222>)
    8216:	4619      	mov	r1, r3
    8218:	68f8      	ldr	r0, [r7, #12]
    821a:	f7fc fdc8 	bl	4dae <compile_syntax_error>
                return;
    821e:	e046      	b.n	82ae <compile_trailer_paren_helper+0x20c>
            }
            compile_node(comp, args[i]);
    8220:	697a      	ldr	r2, [r7, #20]
    8222:	6a3b      	ldr	r3, [r7, #32]
    8224:	009b      	lsls	r3, r3, #2
    8226:	4413      	add	r3, r2
    8228:	681b      	ldr	r3, [r3, #0]
    822a:	4619      	mov	r1, r3
    822c:	68f8      	ldr	r0, [r7, #12]
    822e:	f000 fb98 	bl	8962 <compile_node>
            n_positional++;
    8232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8234:	3301      	adds	r3, #1
    8236:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n_args; i++) {
    8238:	6a3b      	ldr	r3, [r7, #32]
    823a:	3301      	adds	r3, #1
    823c:	623b      	str	r3, [r7, #32]
    823e:	6a3a      	ldr	r2, [r7, #32]
    8240:	69fb      	ldr	r3, [r7, #28]
    8242:	429a      	cmp	r2, r3
    8244:	f6ff af4b 	blt.w	80de <compile_trailer_paren_helper+0x3c>
        }
    }

    // compile the star/double-star arguments if we had them
    // if we had one but not the other then we load "null" as a place holder
    if (star_flags != 0) {
    8248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    824a:	2b00      	cmp	r3, #0
    824c:	d01d      	beq.n	828a <compile_trailer_paren_helper+0x1e8>
        if (star_args_node == NULL) {
    824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8250:	2b00      	cmp	r3, #0
    8252:	d105      	bne.n	8260 <compile_trailer_paren_helper+0x1be>
            EMIT(load_null);
    8254:	68fb      	ldr	r3, [r7, #12]
    8256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8258:	4618      	mov	r0, r3
    825a:	f002 f88f 	bl	a37c <mp_emit_bc_load_null>
    825e:	e005      	b.n	826c <compile_trailer_paren_helper+0x1ca>
        } else {
            compile_node(comp, star_args_node->nodes[0]);
    8260:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8262:	689b      	ldr	r3, [r3, #8]
    8264:	4619      	mov	r1, r3
    8266:	68f8      	ldr	r0, [r7, #12]
    8268:	f000 fb7b 	bl	8962 <compile_node>
        }
        if (dblstar_args_node == NULL) {
    826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    826e:	2b00      	cmp	r3, #0
    8270:	d105      	bne.n	827e <compile_trailer_paren_helper+0x1dc>
            EMIT(load_null);
    8272:	68fb      	ldr	r3, [r7, #12]
    8274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8276:	4618      	mov	r0, r3
    8278:	f002 f880 	bl	a37c <mp_emit_bc_load_null>
    827c:	e005      	b.n	828a <compile_trailer_paren_helper+0x1e8>
        } else {
            compile_node(comp, dblstar_args_node->nodes[0]);
    827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8280:	689b      	ldr	r3, [r3, #8]
    8282:	4619      	mov	r1, r3
    8284:	68f8      	ldr	r0, [r7, #12]
    8286:	f000 fb6c 	bl	8962 <compile_node>
        }
    }

    // emit the function/method call
    if (is_method_call) {
    828a:	79fb      	ldrb	r3, [r7, #7]
    828c:	2b00      	cmp	r3, #0
    828e:	d007      	beq.n	82a0 <compile_trailer_paren_helper+0x1fe>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    8290:	68fb      	ldr	r3, [r7, #12]
    8292:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8294:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    829a:	f002 fcce 	bl	ac3a <mp_emit_bc_call_method>
    829e:	e006      	b.n	82ae <compile_trailer_paren_helper+0x20c>
    } else {
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    82a0:	68fb      	ldr	r3, [r7, #12]
    82a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    82a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    82a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    82aa:	f002 fcb1 	bl	ac10 <mp_emit_bc_call_function>
    }
}
    82ae:	3738      	adds	r7, #56	; 0x38
    82b0:	46bd      	mov	sp, r7
    82b2:	bd80      	pop	{r7, pc}
    82b4:	00020634 	.word	0x00020634
    82b8:	0002064c 	.word	0x0002064c
    82bc:	00020664 	.word	0x00020664
    82c0:	00020688 	.word	0x00020688
    82c4:	000206a4 	.word	0x000206a4

000082c8 <compile_comprehension>:

// pns needs to have 2 nodes, first is lhs of comprehension, second is PN_comp_for node
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    82c8:	b580      	push	{r7, lr}
    82ca:	b088      	sub	sp, #32
    82cc:	af00      	add	r7, sp, #0
    82ce:	60f8      	str	r0, [r7, #12]
    82d0:	60b9      	str	r1, [r7, #8]
    82d2:	607a      	str	r2, [r7, #4]
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    82d4:	68bb      	ldr	r3, [r7, #8]
    82d6:	685b      	ldr	r3, [r3, #4]
    82d8:	0a1b      	lsrs	r3, r3, #8
    82da:	2b02      	cmp	r3, #2
    82dc:	d006      	beq.n	82ec <compile_comprehension+0x24>
    82de:	4b2a      	ldr	r3, [pc, #168]	; (8388 <compile_comprehension+0xc0>)
    82e0:	4a2a      	ldr	r2, [pc, #168]	; (838c <compile_comprehension+0xc4>)
    82e2:	f640 1134 	movw	r1, #2356	; 0x934
    82e6:	482a      	ldr	r0, [pc, #168]	; (8390 <compile_comprehension+0xc8>)
    82e8:	f013 f8ca 	bl	1b480 <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    82ec:	68bb      	ldr	r3, [r7, #8]
    82ee:	68db      	ldr	r3, [r3, #12]
    82f0:	2b00      	cmp	r3, #0
    82f2:	d00b      	beq.n	830c <compile_comprehension+0x44>
    82f4:	68bb      	ldr	r3, [r7, #8]
    82f6:	68db      	ldr	r3, [r3, #12]
    82f8:	f003 0303 	and.w	r3, r3, #3
    82fc:	2b00      	cmp	r3, #0
    82fe:	d105      	bne.n	830c <compile_comprehension+0x44>
    8300:	68bb      	ldr	r3, [r7, #8]
    8302:	68db      	ldr	r3, [r3, #12]
    8304:	685b      	ldr	r3, [r3, #4]
    8306:	b2db      	uxtb	r3, r3
    8308:	2b9f      	cmp	r3, #159	; 0x9f
    830a:	d006      	beq.n	831a <compile_comprehension+0x52>
    830c:	4b21      	ldr	r3, [pc, #132]	; (8394 <compile_comprehension+0xcc>)
    830e:	4a1f      	ldr	r2, [pc, #124]	; (838c <compile_comprehension+0xc4>)
    8310:	f640 1135 	movw	r1, #2357	; 0x935
    8314:	481e      	ldr	r0, [pc, #120]	; (8390 <compile_comprehension+0xc8>)
    8316:	f013 f8b3 	bl	1b480 <__assert_func>
    mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    831a:	68bb      	ldr	r3, [r7, #8]
    831c:	68db      	ldr	r3, [r3, #12]
    831e:	61fb      	str	r3, [r7, #28]

    if (comp->pass == MP_PASS_SCOPE) {
    8320:	68fb      	ldr	r3, [r7, #12]
    8322:	795b      	ldrb	r3, [r3, #5]
    8324:	2b01      	cmp	r3, #1
    8326:	d10b      	bne.n	8340 <compile_comprehension+0x78>
        // create a new scope for this comprehension
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    8328:	68ba      	ldr	r2, [r7, #8]
    832a:	68fb      	ldr	r3, [r7, #12]
    832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    832e:	8b5b      	ldrh	r3, [r3, #26]
    8330:	6879      	ldr	r1, [r7, #4]
    8332:	68f8      	ldr	r0, [r7, #12]
    8334:	f7fc fdac 	bl	4e90 <scope_new_and_link>
    8338:	61b8      	str	r0, [r7, #24]
        // store the comprehension scope so the compiling function (this one) can use it at each pass
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    833a:	69ba      	ldr	r2, [r7, #24]
    833c:	69fb      	ldr	r3, [r7, #28]
    833e:	615a      	str	r2, [r3, #20]
    }

    // get the scope for this comprehension
    scope_t *this_scope = (scope_t*)pns_comp_for->nodes[3];
    8340:	69fb      	ldr	r3, [r7, #28]
    8342:	695b      	ldr	r3, [r3, #20]
    8344:	617b      	str	r3, [r7, #20]

    // compile the comprehension
    close_over_variables_etc(comp, this_scope, 0, 0);
    8346:	2300      	movs	r3, #0
    8348:	2200      	movs	r2, #0
    834a:	6979      	ldr	r1, [r7, #20]
    834c:	68f8      	ldr	r0, [r7, #12]
    834e:	f7fd fa85 	bl	585c <close_over_variables_etc>

    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    8352:	69fb      	ldr	r3, [r7, #28]
    8354:	68db      	ldr	r3, [r3, #12]
    8356:	4619      	mov	r1, r3
    8358:	68f8      	ldr	r0, [r7, #12]
    835a:	f000 fb02 	bl	8962 <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    835e:	687b      	ldr	r3, [r7, #4]
    8360:	2b06      	cmp	r3, #6
    8362:	d105      	bne.n	8370 <compile_comprehension+0xa8>
        EMIT_ARG(get_iter, false);
    8364:	68fb      	ldr	r3, [r7, #12]
    8366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8368:	2100      	movs	r1, #0
    836a:	4618      	mov	r0, r3
    836c:	f002 fa77 	bl	a85e <mp_emit_bc_get_iter>
    }
    EMIT_ARG(call_function, 1, 0, 0);
    8370:	68fb      	ldr	r3, [r7, #12]
    8372:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8374:	2300      	movs	r3, #0
    8376:	2200      	movs	r2, #0
    8378:	2101      	movs	r1, #1
    837a:	f002 fc49 	bl	ac10 <mp_emit_bc_call_function>
}
    837e:	bf00      	nop
    8380:	3720      	adds	r7, #32
    8382:	46bd      	mov	sp, r7
    8384:	bd80      	pop	{r7, pc}
    8386:	bf00      	nop
    8388:	000206c8 	.word	0x000206c8
    838c:	00020cb8 	.word	0x00020cb8
    8390:	0001ff80 	.word	0x0001ff80
    8394:	000206f4 	.word	0x000206f4

00008398 <compile_atom_paren>:

STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8398:	b580      	push	{r7, lr}
    839a:	b084      	sub	sp, #16
    839c:	af00      	add	r7, sp, #0
    839e:	6078      	str	r0, [r7, #4]
    83a0:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    83a2:	683b      	ldr	r3, [r7, #0]
    83a4:	689b      	ldr	r3, [r3, #8]
    83a6:	2b00      	cmp	r3, #0
    83a8:	d105      	bne.n	83b6 <compile_atom_paren+0x1e>
        // an empty tuple
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    83aa:	2200      	movs	r2, #0
    83ac:	2100      	movs	r1, #0
    83ae:	6878      	ldr	r0, [r7, #4]
    83b0:	f7fc fe62 	bl	5078 <c_tuple>
            // tuple with 2 items
            tuple_with_2_items:
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
        }
    }
}
    83b4:	e068      	b.n	8488 <compile_atom_paren+0xf0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    83b6:	683b      	ldr	r3, [r7, #0]
    83b8:	689b      	ldr	r3, [r3, #8]
    83ba:	2b00      	cmp	r3, #0
    83bc:	d00b      	beq.n	83d6 <compile_atom_paren+0x3e>
    83be:	683b      	ldr	r3, [r7, #0]
    83c0:	689b      	ldr	r3, [r3, #8]
    83c2:	f003 0303 	and.w	r3, r3, #3
    83c6:	2b00      	cmp	r3, #0
    83c8:	d105      	bne.n	83d6 <compile_atom_paren+0x3e>
    83ca:	683b      	ldr	r3, [r7, #0]
    83cc:	689b      	ldr	r3, [r3, #8]
    83ce:	685b      	ldr	r3, [r3, #4]
    83d0:	b2db      	uxtb	r3, r3
    83d2:	2b8a      	cmp	r3, #138	; 0x8a
    83d4:	d006      	beq.n	83e4 <compile_atom_paren+0x4c>
    83d6:	4b2e      	ldr	r3, [pc, #184]	; (8490 <compile_atom_paren+0xf8>)
    83d8:	4a2e      	ldr	r2, [pc, #184]	; (8494 <compile_atom_paren+0xfc>)
    83da:	f640 1151 	movw	r1, #2385	; 0x951
    83de:	482e      	ldr	r0, [pc, #184]	; (8498 <compile_atom_paren+0x100>)
    83e0:	f013 f84e 	bl	1b480 <__assert_func>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    83e4:	683b      	ldr	r3, [r7, #0]
    83e6:	689b      	ldr	r3, [r3, #8]
    83e8:	603b      	str	r3, [r7, #0]
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    83ea:	683b      	ldr	r3, [r7, #0]
    83ec:	68db      	ldr	r3, [r3, #12]
    83ee:	2b00      	cmp	r3, #0
    83f0:	d106      	bne.n	8400 <compile_atom_paren+0x68>
    83f2:	4b2a      	ldr	r3, [pc, #168]	; (849c <compile_atom_paren+0x104>)
    83f4:	4a27      	ldr	r2, [pc, #156]	; (8494 <compile_atom_paren+0xfc>)
    83f6:	f640 1153 	movw	r1, #2387	; 0x953
    83fa:	4827      	ldr	r0, [pc, #156]	; (8498 <compile_atom_paren+0x100>)
    83fc:	f013 f840 	bl	1b480 <__assert_func>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8400:	683b      	ldr	r3, [r7, #0]
    8402:	68db      	ldr	r3, [r3, #12]
    8404:	2b00      	cmp	r3, #0
    8406:	d039      	beq.n	847c <compile_atom_paren+0xe4>
    8408:	683b      	ldr	r3, [r7, #0]
    840a:	68db      	ldr	r3, [r3, #12]
    840c:	f003 0303 	and.w	r3, r3, #3
    8410:	2b00      	cmp	r3, #0
    8412:	d133      	bne.n	847c <compile_atom_paren+0xe4>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    8414:	683b      	ldr	r3, [r7, #0]
    8416:	68db      	ldr	r3, [r3, #12]
    8418:	60fb      	str	r3, [r7, #12]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    841a:	68fb      	ldr	r3, [r7, #12]
    841c:	685b      	ldr	r3, [r3, #4]
    841e:	b2db      	uxtb	r3, r3
    8420:	2b8d      	cmp	r3, #141	; 0x8d
    8422:	d112      	bne.n	844a <compile_atom_paren+0xb2>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    8424:	68fb      	ldr	r3, [r7, #12]
    8426:	689b      	ldr	r3, [r3, #8]
    8428:	2b00      	cmp	r3, #0
    842a:	d006      	beq.n	843a <compile_atom_paren+0xa2>
    842c:	4b1c      	ldr	r3, [pc, #112]	; (84a0 <compile_atom_paren+0x108>)
    842e:	4a19      	ldr	r2, [pc, #100]	; (8494 <compile_atom_paren+0xfc>)
    8430:	f640 1158 	movw	r1, #2392	; 0x958
    8434:	4818      	ldr	r0, [pc, #96]	; (8498 <compile_atom_paren+0x100>)
    8436:	f013 f823 	bl	1b480 <__assert_func>
                c_tuple(comp, pns->nodes[0], NULL);
    843a:	683b      	ldr	r3, [r7, #0]
    843c:	689b      	ldr	r3, [r3, #8]
    843e:	2200      	movs	r2, #0
    8440:	4619      	mov	r1, r3
    8442:	6878      	ldr	r0, [r7, #4]
    8444:	f7fc fe18 	bl	5078 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8448:	e01e      	b.n	8488 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    844a:	68fb      	ldr	r3, [r7, #12]
    844c:	685b      	ldr	r3, [r3, #4]
    844e:	b2db      	uxtb	r3, r3
    8450:	2b8e      	cmp	r3, #142	; 0x8e
    8452:	d107      	bne.n	8464 <compile_atom_paren+0xcc>
                c_tuple(comp, pns->nodes[0], pns2);
    8454:	683b      	ldr	r3, [r7, #0]
    8456:	689b      	ldr	r3, [r3, #8]
    8458:	68fa      	ldr	r2, [r7, #12]
    845a:	4619      	mov	r1, r3
    845c:	6878      	ldr	r0, [r7, #4]
    845e:	f7fc fe0b 	bl	5078 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8462:	e011      	b.n	8488 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    8464:	68fb      	ldr	r3, [r7, #12]
    8466:	685b      	ldr	r3, [r3, #4]
    8468:	b2db      	uxtb	r3, r3
    846a:	2b9f      	cmp	r3, #159	; 0x9f
    846c:	d105      	bne.n	847a <compile_atom_paren+0xe2>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    846e:	2206      	movs	r2, #6
    8470:	6839      	ldr	r1, [r7, #0]
    8472:	6878      	ldr	r0, [r7, #4]
    8474:	f7ff ff28 	bl	82c8 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8478:	e006      	b.n	8488 <compile_atom_paren+0xf0>
                goto tuple_with_2_items;
    847a:	bf00      	nop
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    847c:	683a      	ldr	r2, [r7, #0]
    847e:	2100      	movs	r1, #0
    8480:	6878      	ldr	r0, [r7, #4]
    8482:	f7fc fdf9 	bl	5078 <c_tuple>
}
    8486:	e7ff      	b.n	8488 <compile_atom_paren+0xf0>
    8488:	bf00      	nop
    848a:	3710      	adds	r7, #16
    848c:	46bd      	mov	sp, r7
    848e:	bd80      	pop	{r7, pc}
    8490:	0001ff94 	.word	0x0001ff94
    8494:	00020cd0 	.word	0x00020cd0
    8498:	0001ff80 	.word	0x0001ff80
    849c:	00020730 	.word	0x00020730
    84a0:	00020078 	.word	0x00020078

000084a4 <compile_atom_bracket>:

STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    84a4:	b580      	push	{r7, lr}
    84a6:	b084      	sub	sp, #16
    84a8:	af00      	add	r7, sp, #0
    84aa:	6078      	str	r0, [r7, #4]
    84ac:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    84ae:	683b      	ldr	r3, [r7, #0]
    84b0:	689b      	ldr	r3, [r3, #8]
    84b2:	2b00      	cmp	r3, #0
    84b4:	d107      	bne.n	84c6 <compile_atom_bracket+0x22>
        // empty list
        EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    84b6:	687b      	ldr	r3, [r7, #4]
    84b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84ba:	2201      	movs	r2, #1
    84bc:	2100      	movs	r1, #0
    84be:	4618      	mov	r0, r3
    84c0:	f002 fa71 	bl	a9a6 <mp_emit_bc_build>
    } else {
        // list with 1 item
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    }
}
    84c4:	e086      	b.n	85d4 <compile_atom_bracket+0x130>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    84c6:	683b      	ldr	r3, [r7, #0]
    84c8:	689b      	ldr	r3, [r3, #8]
    84ca:	2b00      	cmp	r3, #0
    84cc:	d074      	beq.n	85b8 <compile_atom_bracket+0x114>
    84ce:	683b      	ldr	r3, [r7, #0]
    84d0:	689b      	ldr	r3, [r3, #8]
    84d2:	f003 0303 	and.w	r3, r3, #3
    84d6:	2b00      	cmp	r3, #0
    84d8:	d16e      	bne.n	85b8 <compile_atom_bracket+0x114>
    84da:	683b      	ldr	r3, [r7, #0]
    84dc:	689b      	ldr	r3, [r3, #8]
    84de:	685b      	ldr	r3, [r3, #4]
    84e0:	b2db      	uxtb	r3, r3
    84e2:	2b8a      	cmp	r3, #138	; 0x8a
    84e4:	d168      	bne.n	85b8 <compile_atom_bracket+0x114>
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[0];
    84e6:	683b      	ldr	r3, [r7, #0]
    84e8:	689b      	ldr	r3, [r3, #8]
    84ea:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    84ec:	68fb      	ldr	r3, [r7, #12]
    84ee:	68db      	ldr	r3, [r3, #12]
    84f0:	2b00      	cmp	r3, #0
    84f2:	d04c      	beq.n	858e <compile_atom_bracket+0xea>
    84f4:	68fb      	ldr	r3, [r7, #12]
    84f6:	68db      	ldr	r3, [r3, #12]
    84f8:	f003 0303 	and.w	r3, r3, #3
    84fc:	2b00      	cmp	r3, #0
    84fe:	d146      	bne.n	858e <compile_atom_bracket+0xea>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns2->nodes[1];
    8500:	68fb      	ldr	r3, [r7, #12]
    8502:	68db      	ldr	r3, [r3, #12]
    8504:	60bb      	str	r3, [r7, #8]
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    8506:	68bb      	ldr	r3, [r7, #8]
    8508:	685b      	ldr	r3, [r3, #4]
    850a:	b2db      	uxtb	r3, r3
    850c:	2b8d      	cmp	r3, #141	; 0x8d
    850e:	d118      	bne.n	8542 <compile_atom_bracket+0x9e>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    8510:	68bb      	ldr	r3, [r7, #8]
    8512:	689b      	ldr	r3, [r3, #8]
    8514:	2b00      	cmp	r3, #0
    8516:	d006      	beq.n	8526 <compile_atom_bracket+0x82>
    8518:	4b30      	ldr	r3, [pc, #192]	; (85dc <compile_atom_bracket+0x138>)
    851a:	4a31      	ldr	r2, [pc, #196]	; (85e0 <compile_atom_bracket+0x13c>)
    851c:	f640 1176 	movw	r1, #2422	; 0x976
    8520:	4830      	ldr	r0, [pc, #192]	; (85e4 <compile_atom_bracket+0x140>)
    8522:	f012 ffad 	bl	1b480 <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    8526:	68fb      	ldr	r3, [r7, #12]
    8528:	689b      	ldr	r3, [r3, #8]
    852a:	4619      	mov	r1, r3
    852c:	6878      	ldr	r0, [r7, #4]
    852e:	f000 fa18 	bl	8962 <compile_node>
                EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    8532:	687b      	ldr	r3, [r7, #4]
    8534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8536:	2201      	movs	r2, #1
    8538:	2101      	movs	r1, #1
    853a:	4618      	mov	r0, r3
    853c:	f002 fa33 	bl	a9a6 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8540:	e039      	b.n	85b6 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    8542:	68bb      	ldr	r3, [r7, #8]
    8544:	685b      	ldr	r3, [r3, #4]
    8546:	b2db      	uxtb	r3, r3
    8548:	2b8e      	cmp	r3, #142	; 0x8e
    854a:	d114      	bne.n	8576 <compile_atom_bracket+0xd2>
                compile_node(comp, pns2->nodes[0]);
    854c:	68fb      	ldr	r3, [r7, #12]
    854e:	689b      	ldr	r3, [r3, #8]
    8550:	4619      	mov	r1, r3
    8552:	6878      	ldr	r0, [r7, #4]
    8554:	f000 fa05 	bl	8962 <compile_node>
                compile_generic_all_nodes(comp, pns3);
    8558:	68b9      	ldr	r1, [r7, #8]
    855a:	6878      	ldr	r0, [r7, #4]
    855c:	f7fc fd04 	bl	4f68 <compile_generic_all_nodes>
                EMIT_ARG(build, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3), MP_EMIT_BUILD_LIST);
    8560:	687b      	ldr	r3, [r7, #4]
    8562:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8564:	68bb      	ldr	r3, [r7, #8]
    8566:	685b      	ldr	r3, [r3, #4]
    8568:	0a1b      	lsrs	r3, r3, #8
    856a:	3301      	adds	r3, #1
    856c:	2201      	movs	r2, #1
    856e:	4619      	mov	r1, r3
    8570:	f002 fa19 	bl	a9a6 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8574:	e01f      	b.n	85b6 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    8576:	68bb      	ldr	r3, [r7, #8]
    8578:	685b      	ldr	r3, [r3, #4]
    857a:	b2db      	uxtb	r3, r3
    857c:	2b9f      	cmp	r3, #159	; 0x9f
    857e:	d105      	bne.n	858c <compile_atom_bracket+0xe8>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    8580:	2203      	movs	r2, #3
    8582:	68f9      	ldr	r1, [r7, #12]
    8584:	6878      	ldr	r0, [r7, #4]
    8586:	f7ff fe9f 	bl	82c8 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    858a:	e014      	b.n	85b6 <compile_atom_bracket+0x112>
                goto list_with_2_items;
    858c:	bf00      	nop
            compile_node(comp, pns2->nodes[0]);
    858e:	68fb      	ldr	r3, [r7, #12]
    8590:	689b      	ldr	r3, [r3, #8]
    8592:	4619      	mov	r1, r3
    8594:	6878      	ldr	r0, [r7, #4]
    8596:	f000 f9e4 	bl	8962 <compile_node>
            compile_node(comp, pns2->nodes[1]);
    859a:	68fb      	ldr	r3, [r7, #12]
    859c:	68db      	ldr	r3, [r3, #12]
    859e:	4619      	mov	r1, r3
    85a0:	6878      	ldr	r0, [r7, #4]
    85a2:	f000 f9de 	bl	8962 <compile_node>
            EMIT_ARG(build, 2, MP_EMIT_BUILD_LIST);
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85aa:	2201      	movs	r2, #1
    85ac:	2102      	movs	r1, #2
    85ae:	4618      	mov	r0, r3
    85b0:	f002 f9f9 	bl	a9a6 <mp_emit_bc_build>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    85b4:	e00e      	b.n	85d4 <compile_atom_bracket+0x130>
    85b6:	e00d      	b.n	85d4 <compile_atom_bracket+0x130>
        compile_node(comp, pns->nodes[0]);
    85b8:	683b      	ldr	r3, [r7, #0]
    85ba:	689b      	ldr	r3, [r3, #8]
    85bc:	4619      	mov	r1, r3
    85be:	6878      	ldr	r0, [r7, #4]
    85c0:	f000 f9cf 	bl	8962 <compile_node>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85c8:	2201      	movs	r2, #1
    85ca:	2101      	movs	r1, #1
    85cc:	4618      	mov	r0, r3
    85ce:	f002 f9ea 	bl	a9a6 <mp_emit_bc_build>
}
    85d2:	e7ff      	b.n	85d4 <compile_atom_bracket+0x130>
    85d4:	bf00      	nop
    85d6:	3710      	adds	r7, #16
    85d8:	46bd      	mov	sp, r7
    85da:	bd80      	pop	{r7, pc}
    85dc:	00020758 	.word	0x00020758
    85e0:	00020ce4 	.word	0x00020ce4
    85e4:	0001ff80 	.word	0x0001ff80

000085e8 <compile_atom_brace>:

STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    85e8:	b580      	push	{r7, lr}
    85ea:	b08a      	sub	sp, #40	; 0x28
    85ec:	af00      	add	r7, sp, #0
    85ee:	6078      	str	r0, [r7, #4]
    85f0:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn = pns->nodes[0];
    85f2:	683b      	ldr	r3, [r7, #0]
    85f4:	689b      	ldr	r3, [r3, #8]
    85f6:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    85f8:	6a3b      	ldr	r3, [r7, #32]
    85fa:	2b00      	cmp	r3, #0
    85fc:	d107      	bne.n	860e <compile_atom_brace+0x26>
        // empty dict
        EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    85fe:	687b      	ldr	r3, [r7, #4]
    8600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8602:	2203      	movs	r2, #3
    8604:	2100      	movs	r1, #0
    8606:	4618      	mov	r0, r3
    8608:	f002 f9cd 	bl	a9a6 <mp_emit_bc_build>
    860c:	e0c3      	b.n	8796 <compile_atom_brace+0x1ae>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    860e:	6a3b      	ldr	r3, [r7, #32]
    8610:	2b00      	cmp	r3, #0
    8612:	f000 80b9 	beq.w	8788 <compile_atom_brace+0x1a0>
    8616:	6a3b      	ldr	r3, [r7, #32]
    8618:	f003 0303 	and.w	r3, r3, #3
    861c:	2b00      	cmp	r3, #0
    861e:	f040 80b3 	bne.w	8788 <compile_atom_brace+0x1a0>
        pns = (mp_parse_node_struct_t*)pn;
    8622:	6a3b      	ldr	r3, [r7, #32]
    8624:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8626:	683b      	ldr	r3, [r7, #0]
    8628:	685b      	ldr	r3, [r3, #4]
    862a:	b2db      	uxtb	r3, r3
    862c:	2b32      	cmp	r3, #50	; 0x32
    862e:	d110      	bne.n	8652 <compile_atom_brace+0x6a>
            // dict with one element
            EMIT_ARG(build, 1, MP_EMIT_BUILD_MAP);
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8634:	2203      	movs	r2, #3
    8636:	2101      	movs	r1, #1
    8638:	4618      	mov	r0, r3
    863a:	f002 f9b4 	bl	a9a6 <mp_emit_bc_build>
            compile_node(comp, pn);
    863e:	6a39      	ldr	r1, [r7, #32]
    8640:	6878      	ldr	r0, [r7, #4]
    8642:	f000 f98e 	bl	8962 <compile_node>
            EMIT(store_map);
    8646:	687b      	ldr	r3, [r7, #4]
    8648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    864a:	4618      	mov	r0, r3
    864c:	f002 f9cd 	bl	a9ea <mp_emit_bc_store_map>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8650:	e0a1      	b.n	8796 <compile_atom_brace+0x1ae>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    8652:	683b      	ldr	r3, [r7, #0]
    8654:	685b      	ldr	r3, [r3, #4]
    8656:	b2db      	uxtb	r3, r3
    8658:	2b92      	cmp	r3, #146	; 0x92
    865a:	f040 8094 	bne.w	8786 <compile_atom_brace+0x19e>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    865e:	683b      	ldr	r3, [r7, #0]
    8660:	68db      	ldr	r3, [r3, #12]
    8662:	2b00      	cmp	r3, #0
    8664:	d005      	beq.n	8672 <compile_atom_brace+0x8a>
    8666:	683b      	ldr	r3, [r7, #0]
    8668:	68db      	ldr	r3, [r3, #12]
    866a:	f003 0303 	and.w	r3, r3, #3
    866e:	2b00      	cmp	r3, #0
    8670:	d006      	beq.n	8680 <compile_atom_brace+0x98>
    8672:	4b4a      	ldr	r3, [pc, #296]	; (879c <compile_atom_brace+0x1b4>)
    8674:	4a4a      	ldr	r2, [pc, #296]	; (87a0 <compile_atom_brace+0x1b8>)
    8676:	f44f 611a 	mov.w	r1, #2464	; 0x9a0
    867a:	484a      	ldr	r0, [pc, #296]	; (87a4 <compile_atom_brace+0x1bc>)
    867c:	f012 ff00 	bl	1b480 <__assert_func>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    8680:	683b      	ldr	r3, [r7, #0]
    8682:	68db      	ldr	r3, [r3, #12]
    8684:	61fb      	str	r3, [r7, #28]
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    8686:	69fb      	ldr	r3, [r7, #28]
    8688:	685b      	ldr	r3, [r3, #4]
    868a:	b2db      	uxtb	r3, r3
    868c:	2b94      	cmp	r3, #148	; 0x94
    868e:	d168      	bne.n	8762 <compile_atom_brace+0x17a>
                // dict/set with multiple elements

                // get tail elements (2nd, 3rd, ...)
                mp_parse_node_t *nodes;
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    8690:	69fb      	ldr	r3, [r7, #28]
    8692:	3308      	adds	r3, #8
    8694:	f107 0208 	add.w	r2, r7, #8
    8698:	2195      	movs	r1, #149	; 0x95
    869a:	4618      	mov	r0, r3
    869c:	f7fb fa86 	bl	3bac <mp_parse_node_extract_list>
    86a0:	61b8      	str	r0, [r7, #24]

                // first element sets whether it's a dict or set
                bool is_dict;
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_MAP);
    86a2:	687b      	ldr	r3, [r7, #4]
    86a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    86a6:	69bb      	ldr	r3, [r7, #24]
    86a8:	3301      	adds	r3, #1
    86aa:	2203      	movs	r2, #3
    86ac:	4619      	mov	r1, r3
    86ae:	f002 f97a 	bl	a9a6 <mp_emit_bc_build>
                    compile_node(comp, pns->nodes[0]);
    86b2:	683b      	ldr	r3, [r7, #0]
    86b4:	689b      	ldr	r3, [r3, #8]
    86b6:	4619      	mov	r1, r3
    86b8:	6878      	ldr	r0, [r7, #4]
    86ba:	f000 f952 	bl	8962 <compile_node>
                    EMIT(store_map);
    86be:	687b      	ldr	r3, [r7, #4]
    86c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86c2:	4618      	mov	r0, r3
    86c4:	f002 f991 	bl	a9ea <mp_emit_bc_store_map>
                    is_dict = true;
    86c8:	2301      	movs	r3, #1
    86ca:	75fb      	strb	r3, [r7, #23]
                    compile_node(comp, pns->nodes[0]); // 1st value of set
                    is_dict = false;
                }

                // process rest of elements
                for (int i = 0; i < n; i++) {
    86cc:	2300      	movs	r3, #0
    86ce:	627b      	str	r3, [r7, #36]	; 0x24
    86d0:	e042      	b.n	8758 <compile_atom_brace+0x170>
                    mp_parse_node_t pn_i = nodes[i];
    86d2:	68ba      	ldr	r2, [r7, #8]
    86d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86d6:	009b      	lsls	r3, r3, #2
    86d8:	4413      	add	r3, r2
    86da:	681b      	ldr	r3, [r3, #0]
    86dc:	613b      	str	r3, [r7, #16]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    86de:	693b      	ldr	r3, [r7, #16]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d00b      	beq.n	86fc <compile_atom_brace+0x114>
    86e4:	693b      	ldr	r3, [r7, #16]
    86e6:	f003 0303 	and.w	r3, r3, #3
    86ea:	2b00      	cmp	r3, #0
    86ec:	d106      	bne.n	86fc <compile_atom_brace+0x114>
    86ee:	693b      	ldr	r3, [r7, #16]
    86f0:	685b      	ldr	r3, [r3, #4]
    86f2:	b2db      	uxtb	r3, r3
    86f4:	2b32      	cmp	r3, #50	; 0x32
    86f6:	d101      	bne.n	86fc <compile_atom_brace+0x114>
    86f8:	2301      	movs	r3, #1
    86fa:	e000      	b.n	86fe <compile_atom_brace+0x116>
    86fc:	2300      	movs	r3, #0
    86fe:	73fb      	strb	r3, [r7, #15]
    8700:	7bfb      	ldrb	r3, [r7, #15]
    8702:	f003 0301 	and.w	r3, r3, #1
    8706:	73fb      	strb	r3, [r7, #15]
                    compile_node(comp, pn_i);
    8708:	6939      	ldr	r1, [r7, #16]
    870a:	6878      	ldr	r0, [r7, #4]
    870c:	f000 f929 	bl	8962 <compile_node>
                    if (is_dict) {
    8710:	7dfb      	ldrb	r3, [r7, #23]
    8712:	2b00      	cmp	r3, #0
    8714:	d012      	beq.n	873c <compile_atom_brace+0x154>
                        if (!is_key_value) {
    8716:	7bfb      	ldrb	r3, [r7, #15]
    8718:	f083 0301 	eor.w	r3, r3, #1
    871c:	b2db      	uxtb	r3, r3
    871e:	2b00      	cmp	r3, #0
    8720:	d006      	beq.n	8730 <compile_atom_brace+0x148>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8722:	683b      	ldr	r3, [r7, #0]
    8724:	4a20      	ldr	r2, [pc, #128]	; (87a8 <compile_atom_brace+0x1c0>)
    8726:	4619      	mov	r1, r3
    8728:	6878      	ldr	r0, [r7, #4]
    872a:	f7fc fb40 	bl	4dae <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
                            }
                            return;
    872e:	e032      	b.n	8796 <compile_atom_brace+0x1ae>
                        }
                        EMIT(store_map);
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8734:	4618      	mov	r0, r3
    8736:	f002 f958 	bl	a9ea <mp_emit_bc_store_map>
    873a:	e00a      	b.n	8752 <compile_atom_brace+0x16a>
                    } else {
                        if (is_key_value) {
    873c:	7bfb      	ldrb	r3, [r7, #15]
    873e:	2b00      	cmp	r3, #0
    8740:	d007      	beq.n	8752 <compile_atom_brace+0x16a>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    8742:	683b      	ldr	r3, [r7, #0]
    8744:	4a18      	ldr	r2, [pc, #96]	; (87a8 <compile_atom_brace+0x1c0>)
    8746:	4619      	mov	r1, r3
    8748:	6878      	ldr	r0, [r7, #4]
    874a:	f7fc fb30 	bl	4dae <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting just a value for set");
                            }
                            return;
    874e:	bf00      	nop
    8750:	e021      	b.n	8796 <compile_atom_brace+0x1ae>
                for (int i = 0; i < n; i++) {
    8752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8754:	3301      	adds	r3, #1
    8756:	627b      	str	r3, [r7, #36]	; 0x24
    8758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    875a:	69bb      	ldr	r3, [r7, #24]
    875c:	429a      	cmp	r2, r3
    875e:	dbb8      	blt.n	86d2 <compile_atom_brace+0xea>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8760:	e019      	b.n	8796 <compile_atom_brace+0x1ae>
                if (!is_dict) {
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_SET);
                }
                #endif
            } else {
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    8762:	69fb      	ldr	r3, [r7, #28]
    8764:	685b      	ldr	r3, [r3, #4]
    8766:	b2db      	uxtb	r3, r3
    8768:	2b9f      	cmp	r3, #159	; 0x9f
    876a:	d006      	beq.n	877a <compile_atom_brace+0x192>
    876c:	4b0f      	ldr	r3, [pc, #60]	; (87ac <compile_atom_brace+0x1c4>)
    876e:	4a0c      	ldr	r2, [pc, #48]	; (87a0 <compile_atom_brace+0x1b8>)
    8770:	f640 11d9 	movw	r1, #2521	; 0x9d9
    8774:	480b      	ldr	r0, [pc, #44]	; (87a4 <compile_atom_brace+0x1bc>)
    8776:	f012 fe83 	bl	1b480 <__assert_func>
                // dict/set comprehension
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary comprehension
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    877a:	2204      	movs	r2, #4
    877c:	6839      	ldr	r1, [r7, #0]
    877e:	6878      	ldr	r0, [r7, #4]
    8780:	f7ff fda2 	bl	82c8 <compile_comprehension>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8784:	e007      	b.n	8796 <compile_atom_brace+0x1ae>
                    compile_comprehension(comp, pns, SCOPE_SET_COMP);
                }
            }
        } else {
            // set with one element
            goto set_with_one_element;
    8786:	bf00      	nop
        set_with_one_element:
        #if MICROPY_PY_BUILTINS_SET
        compile_node(comp, pn);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_SET);
        #else
        assert(0);
    8788:	4b09      	ldr	r3, [pc, #36]	; (87b0 <compile_atom_brace+0x1c8>)
    878a:	4a05      	ldr	r2, [pc, #20]	; (87a0 <compile_atom_brace+0x1b8>)
    878c:	f640 11ee 	movw	r1, #2542	; 0x9ee
    8790:	4804      	ldr	r0, [pc, #16]	; (87a4 <compile_atom_brace+0x1bc>)
    8792:	f012 fe75 	bl	1b480 <__assert_func>
        #endif
    }
}
    8796:	3728      	adds	r7, #40	; 0x28
    8798:	46bd      	mov	sp, r7
    879a:	bd80      	pop	{r7, pc}
    879c:	000204ec 	.word	0x000204ec
    87a0:	00020cfc 	.word	0x00020cfc
    87a4:	0001ff80 	.word	0x0001ff80
    87a8:	00020780 	.word	0x00020780
    87ac:	00020790 	.word	0x00020790
    87b0:	000207c0 	.word	0x000207c0

000087b4 <compile_trailer_paren>:

STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    87b4:	b580      	push	{r7, lr}
    87b6:	b082      	sub	sp, #8
    87b8:	af00      	add	r7, sp, #0
    87ba:	6078      	str	r0, [r7, #4]
    87bc:	6039      	str	r1, [r7, #0]
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    87be:	683b      	ldr	r3, [r7, #0]
    87c0:	6899      	ldr	r1, [r3, #8]
    87c2:	2300      	movs	r3, #0
    87c4:	2200      	movs	r2, #0
    87c6:	6878      	ldr	r0, [r7, #4]
    87c8:	f7ff fc6b 	bl	80a2 <compile_trailer_paren_helper>
}
    87cc:	bf00      	nop
    87ce:	3708      	adds	r7, #8
    87d0:	46bd      	mov	sp, r7
    87d2:	bd80      	pop	{r7, pc}

000087d4 <compile_trailer_bracket>:

STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	6078      	str	r0, [r7, #4]
    87dc:	6039      	str	r1, [r7, #0]
    // object who's index we want is on top of stack
    compile_node(comp, pns->nodes[0]); // the index
    87de:	683b      	ldr	r3, [r7, #0]
    87e0:	689b      	ldr	r3, [r3, #8]
    87e2:	4619      	mov	r1, r3
    87e4:	6878      	ldr	r0, [r7, #4]
    87e6:	f000 f8bc 	bl	8962 <compile_node>
    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    87ea:	687b      	ldr	r3, [r7, #4]
    87ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87ee:	2100      	movs	r1, #0
    87f0:	4618      	mov	r0, r3
    87f2:	f001 fe3f 	bl	a474 <mp_emit_bc_subscr>
}
    87f6:	bf00      	nop
    87f8:	3708      	adds	r7, #8
    87fa:	46bd      	mov	sp, r7
    87fc:	bd80      	pop	{r7, pc}

000087fe <compile_trailer_period>:

STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    87fe:	b580      	push	{r7, lr}
    8800:	b082      	sub	sp, #8
    8802:	af00      	add	r7, sp, #0
    8804:	6078      	str	r0, [r7, #4]
    8806:	6039      	str	r1, [r7, #0]
    // object who's attribute we want is on top of stack
    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]), MP_EMIT_ATTR_LOAD); // attribute to get
    8808:	687b      	ldr	r3, [r7, #4]
    880a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    880c:	683b      	ldr	r3, [r7, #0]
    880e:	689b      	ldr	r3, [r3, #8]
    8810:	091b      	lsrs	r3, r3, #4
    8812:	2200      	movs	r2, #0
    8814:	4619      	mov	r1, r3
    8816:	f001 fe55 	bl	a4c4 <mp_emit_bc_attr>
}
    881a:	bf00      	nop
    881c:	3708      	adds	r7, #8
    881e:	46bd      	mov	sp, r7
    8820:	bd80      	pop	{r7, pc}

00008822 <compile_dictorsetmaker_item>:
        EMIT_ARG(build, 2, MP_EMIT_BUILD_SLICE);
    }
}
#endif // MICROPY_PY_BUILTINS_SLICE

STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8822:	b580      	push	{r7, lr}
    8824:	b082      	sub	sp, #8
    8826:	af00      	add	r7, sp, #0
    8828:	6078      	str	r0, [r7, #4]
    882a:	6039      	str	r1, [r7, #0]
    // if this is called then we are compiling a dict key:value pair
    compile_node(comp, pns->nodes[1]); // value
    882c:	683b      	ldr	r3, [r7, #0]
    882e:	68db      	ldr	r3, [r3, #12]
    8830:	4619      	mov	r1, r3
    8832:	6878      	ldr	r0, [r7, #4]
    8834:	f000 f895 	bl	8962 <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    8838:	683b      	ldr	r3, [r7, #0]
    883a:	689b      	ldr	r3, [r3, #8]
    883c:	4619      	mov	r1, r3
    883e:	6878      	ldr	r0, [r7, #4]
    8840:	f000 f88f 	bl	8962 <compile_node>
}
    8844:	bf00      	nop
    8846:	3708      	adds	r7, #8
    8848:	46bd      	mov	sp, r7
    884a:	bd80      	pop	{r7, pc}

0000884c <compile_classdef>:

STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    884c:	b580      	push	{r7, lr}
    884e:	b084      	sub	sp, #16
    8850:	af00      	add	r7, sp, #0
    8852:	6078      	str	r0, [r7, #4]
    8854:	6039      	str	r1, [r7, #0]
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    8856:	687b      	ldr	r3, [r7, #4]
    8858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    885a:	8b5b      	ldrh	r3, [r3, #26]
    885c:	461a      	mov	r2, r3
    885e:	6839      	ldr	r1, [r7, #0]
    8860:	6878      	ldr	r0, [r7, #4]
    8862:	f7fd f9c5 	bl	5bf0 <compile_classdef_helper>
    8866:	60f8      	str	r0, [r7, #12]
    // store class object into class name
    compile_store_id(comp, cname);
    8868:	68f9      	ldr	r1, [r7, #12]
    886a:	6878      	ldr	r0, [r7, #4]
    886c:	f7fc fbc8 	bl	5000 <compile_store_id>
}
    8870:	bf00      	nop
    8872:	3710      	adds	r7, #16
    8874:	46bd      	mov	sp, r7
    8876:	bd80      	pop	{r7, pc}

00008878 <compile_yield_expr>:

STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8878:	b580      	push	{r7, lr}
    887a:	b082      	sub	sp, #8
    887c:	af00      	add	r7, sp, #0
    887e:	6078      	str	r0, [r7, #4]
    8880:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8886:	681b      	ldr	r3, [r3, #0]
    8888:	2b07      	cmp	r3, #7
    888a:	d00b      	beq.n	88a4 <compile_yield_expr+0x2c>
    888c:	687b      	ldr	r3, [r7, #4]
    888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8890:	681b      	ldr	r3, [r3, #0]
    8892:	2b02      	cmp	r3, #2
    8894:	d006      	beq.n	88a4 <compile_yield_expr+0x2c>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    8896:	683b      	ldr	r3, [r7, #0]
    8898:	4a21      	ldr	r2, [pc, #132]	; (8920 <compile_yield_expr+0xa8>)
    889a:	4619      	mov	r1, r3
    889c:	6878      	ldr	r0, [r7, #4]
    889e:	f7fc fa86 	bl	4dae <compile_syntax_error>
        return;
    88a2:	e039      	b.n	8918 <compile_yield_expr+0xa0>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    88a4:	683b      	ldr	r3, [r7, #0]
    88a6:	689b      	ldr	r3, [r3, #8]
    88a8:	2b00      	cmp	r3, #0
    88aa:	d10c      	bne.n	88c6 <compile_yield_expr+0x4e>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88b0:	210e      	movs	r1, #14
    88b2:	4618      	mov	r0, r3
    88b4:	f001 fce0 	bl	a278 <mp_emit_bc_load_const_tok>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    88b8:	687b      	ldr	r3, [r7, #4]
    88ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88bc:	2100      	movs	r1, #0
    88be:	4618      	mov	r0, r3
    88c0:	f002 fa0c 	bl	acdc <mp_emit_bc_yield>
    88c4:	e028      	b.n	8918 <compile_yield_expr+0xa0>
        reserve_labels_for_native(comp, 1);
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    88c6:	683b      	ldr	r3, [r7, #0]
    88c8:	689b      	ldr	r3, [r3, #8]
    88ca:	2b00      	cmp	r3, #0
    88cc:	d018      	beq.n	8900 <compile_yield_expr+0x88>
    88ce:	683b      	ldr	r3, [r7, #0]
    88d0:	689b      	ldr	r3, [r3, #8]
    88d2:	f003 0303 	and.w	r3, r3, #3
    88d6:	2b00      	cmp	r3, #0
    88d8:	d112      	bne.n	8900 <compile_yield_expr+0x88>
    88da:	683b      	ldr	r3, [r7, #0]
    88dc:	689b      	ldr	r3, [r3, #8]
    88de:	685b      	ldr	r3, [r3, #4]
    88e0:	b2db      	uxtb	r3, r3
    88e2:	2ba2      	cmp	r3, #162	; 0xa2
    88e4:	d10c      	bne.n	8900 <compile_yield_expr+0x88>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    88e6:	683b      	ldr	r3, [r7, #0]
    88e8:	689b      	ldr	r3, [r3, #8]
    88ea:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    88ec:	683b      	ldr	r3, [r7, #0]
    88ee:	689b      	ldr	r3, [r3, #8]
    88f0:	4619      	mov	r1, r3
    88f2:	6878      	ldr	r0, [r7, #4]
    88f4:	f000 f835 	bl	8962 <compile_node>
        compile_yield_from(comp);
    88f8:	6878      	ldr	r0, [r7, #4]
    88fa:	f7fe fe9b 	bl	7634 <compile_yield_from>
    88fe:	e00b      	b.n	8918 <compile_yield_expr+0xa0>
    } else {
        compile_node(comp, pns->nodes[0]);
    8900:	683b      	ldr	r3, [r7, #0]
    8902:	689b      	ldr	r3, [r3, #8]
    8904:	4619      	mov	r1, r3
    8906:	6878      	ldr	r0, [r7, #4]
    8908:	f000 f82b 	bl	8962 <compile_node>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    890c:	687b      	ldr	r3, [r7, #4]
    890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8910:	2100      	movs	r1, #0
    8912:	4618      	mov	r0, r3
    8914:	f002 f9e2 	bl	acdc <mp_emit_bc_yield>
        reserve_labels_for_native(comp, 1);
    }
}
    8918:	3708      	adds	r7, #8
    891a:	46bd      	mov	sp, r7
    891c:	bd80      	pop	{r7, pc}
    891e:	bf00      	nop
    8920:	000207c4 	.word	0x000207c4

00008924 <get_const_object>:
    compile_atom_expr_normal(comp, pns);
    compile_yield_from(comp);
}
#endif

STATIC mp_obj_t get_const_object(mp_parse_node_struct_t *pns) {
    8924:	b480      	push	{r7}
    8926:	b083      	sub	sp, #12
    8928:	af00      	add	r7, sp, #0
    892a:	6078      	str	r0, [r7, #4]
    #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	689b      	ldr	r3, [r3, #8]
    #endif
}
    8930:	4618      	mov	r0, r3
    8932:	370c      	adds	r7, #12
    8934:	46bd      	mov	sp, r7
    8936:	f85d 7b04 	ldr.w	r7, [sp], #4
    893a:	4770      	bx	lr

0000893c <compile_const_object>:

STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    893c:	b590      	push	{r4, r7, lr}
    893e:	b083      	sub	sp, #12
    8940:	af00      	add	r7, sp, #0
    8942:	6078      	str	r0, [r7, #4]
    8944:	6039      	str	r1, [r7, #0]
    #if MICROPY_EMIT_NATIVE
    comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_HASCONSTS;
    #endif
    EMIT_ARG(load_const_obj, get_const_object(pns));
    8946:	687b      	ldr	r3, [r7, #4]
    8948:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    894a:	6838      	ldr	r0, [r7, #0]
    894c:	f7ff ffea 	bl	8924 <get_const_object>
    8950:	4603      	mov	r3, r0
    8952:	4619      	mov	r1, r3
    8954:	4620      	mov	r0, r4
    8956:	f001 fcff 	bl	a358 <mp_emit_bc_load_const_obj>
}
    895a:	bf00      	nop
    895c:	370c      	adds	r7, #12
    895e:	46bd      	mov	sp, r7
    8960:	bd90      	pop	{r4, r7, pc}

00008962 <compile_node>:
#undef DEF_RULE
#undef DEF_RULE_NC
    compile_const_object,
};

STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    8962:	b590      	push	{r4, r7, lr}
    8964:	b089      	sub	sp, #36	; 0x24
    8966:	af00      	add	r7, sp, #0
    8968:	6078      	str	r0, [r7, #4]
    896a:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    896c:	683b      	ldr	r3, [r7, #0]
    896e:	2b00      	cmp	r3, #0
    8970:	d078      	beq.n	8a64 <compile_node+0x102>
        // pass
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    8972:	683b      	ldr	r3, [r7, #0]
    8974:	f003 0301 	and.w	r3, r3, #1
    8978:	2b00      	cmp	r3, #0
    897a:	d009      	beq.n	8990 <compile_node+0x2e>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    897c:	683b      	ldr	r3, [r7, #0]
    897e:	105b      	asrs	r3, r3, #1
    8980:	61fb      	str	r3, [r7, #28]
            #if MICROPY_EMIT_NATIVE
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_HASCONSTS;
            #endif
        }
        #else
        EMIT_ARG(load_const_small_int, arg);
    8982:	687b      	ldr	r3, [r7, #4]
    8984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8986:	69f9      	ldr	r1, [r7, #28]
    8988:	4618      	mov	r0, r3
    898a:	f001 fcb1 	bl	a2f0 <mp_emit_bc_load_const_small_int>
        EMIT_ARG(set_source_line, pns->source_line);
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
        f(comp, pns);
    }
}
    898e:	e069      	b.n	8a64 <compile_node+0x102>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    8990:	683b      	ldr	r3, [r7, #0]
    8992:	f003 0303 	and.w	r3, r3, #3
    8996:	2b00      	cmp	r3, #0
    8998:	d041      	beq.n	8a1e <compile_node+0xbc>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    899a:	683b      	ldr	r3, [r7, #0]
    899c:	091b      	lsrs	r3, r3, #4
    899e:	61bb      	str	r3, [r7, #24]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    89a0:	683b      	ldr	r3, [r7, #0]
    89a2:	f003 030f 	and.w	r3, r3, #15
    89a6:	2b06      	cmp	r3, #6
    89a8:	d008      	beq.n	89bc <compile_node+0x5a>
    89aa:	2b0a      	cmp	r3, #10
    89ac:	d00d      	beq.n	89ca <compile_node+0x68>
    89ae:	2b02      	cmp	r3, #2
    89b0:	d12a      	bne.n	8a08 <compile_node+0xa6>
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    89b2:	69b9      	ldr	r1, [r7, #24]
    89b4:	6878      	ldr	r0, [r7, #4]
    89b6:	f7fc fb04 	bl	4fc2 <compile_load_id>
    89ba:	e053      	b.n	8a64 <compile_node+0x102>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89c0:	69b9      	ldr	r1, [r7, #24]
    89c2:	4618      	mov	r0, r3
    89c4:	f001 fcb6 	bl	a334 <mp_emit_bc_load_const_str>
    89c8:	e04c      	b.n	8a64 <compile_node+0x102>
                if (comp->pass != MP_PASS_EMIT) {
    89ca:	687b      	ldr	r3, [r7, #4]
    89cc:	795b      	ldrb	r3, [r3, #5]
    89ce:	2b04      	cmp	r3, #4
    89d0:	d006      	beq.n	89e0 <compile_node+0x7e>
                    EMIT_ARG(load_const_obj, mp_const_none);
    89d2:	687b      	ldr	r3, [r7, #4]
    89d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89d6:	4925      	ldr	r1, [pc, #148]	; (8a6c <compile_node+0x10a>)
    89d8:	4618      	mov	r0, r3
    89da:	f001 fcbd 	bl	a358 <mp_emit_bc_load_const_obj>
                break;
    89de:	e041      	b.n	8a64 <compile_node+0x102>
                    const byte *data = qstr_data(arg, &len);
    89e0:	f107 0308 	add.w	r3, r7, #8
    89e4:	4619      	mov	r1, r3
    89e6:	69b8      	ldr	r0, [r7, #24]
    89e8:	f7f8 fc3c 	bl	1264 <qstr_data>
    89ec:	6178      	str	r0, [r7, #20]
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    89f2:	68bb      	ldr	r3, [r7, #8]
    89f4:	4619      	mov	r1, r3
    89f6:	6978      	ldr	r0, [r7, #20]
    89f8:	f00c fc4d 	bl	15296 <mp_obj_new_bytes>
    89fc:	4603      	mov	r3, r0
    89fe:	4619      	mov	r1, r3
    8a00:	4620      	mov	r0, r4
    8a02:	f001 fca9 	bl	a358 <mp_emit_bc_load_const_obj>
                break;
    8a06:	e02d      	b.n	8a64 <compile_node+0x102>
                if (arg == MP_TOKEN_NEWLINE) {
    8a08:	69bb      	ldr	r3, [r7, #24]
    8a0a:	2b04      	cmp	r3, #4
    8a0c:	d029      	beq.n	8a62 <compile_node+0x100>
                  EMIT_ARG(load_const_tok, arg);
    8a0e:	687b      	ldr	r3, [r7, #4]
    8a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a12:	69b9      	ldr	r1, [r7, #24]
    8a14:	4618      	mov	r0, r3
    8a16:	f001 fc2f 	bl	a278 <mp_emit_bc_load_const_tok>
                break;
    8a1a:	bf00      	nop
    8a1c:	e021      	b.n	8a62 <compile_node+0x100>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8a1e:	683b      	ldr	r3, [r7, #0]
    8a20:	613b      	str	r3, [r7, #16]
        EMIT_ARG(set_source_line, pns->source_line);
    8a22:	687b      	ldr	r3, [r7, #4]
    8a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8a26:	693b      	ldr	r3, [r7, #16]
    8a28:	681b      	ldr	r3, [r3, #0]
    8a2a:	4619      	mov	r1, r3
    8a2c:	4610      	mov	r0, r2
    8a2e:	f001 fb9a 	bl	a166 <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    8a32:	693b      	ldr	r3, [r7, #16]
    8a34:	685b      	ldr	r3, [r3, #4]
    8a36:	b2db      	uxtb	r3, r3
    8a38:	2b35      	cmp	r3, #53	; 0x35
    8a3a:	d906      	bls.n	8a4a <compile_node+0xe8>
    8a3c:	4b0c      	ldr	r3, [pc, #48]	; (8a70 <compile_node+0x10e>)
    8a3e:	4a0d      	ldr	r2, [pc, #52]	; (8a74 <compile_node+0x112>)
    8a40:	f640 21ba 	movw	r1, #2746	; 0xaba
    8a44:	480c      	ldr	r0, [pc, #48]	; (8a78 <compile_node+0x116>)
    8a46:	f012 fd1b 	bl	1b480 <__assert_func>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    8a4a:	693b      	ldr	r3, [r7, #16]
    8a4c:	685b      	ldr	r3, [r3, #4]
    8a4e:	b2db      	uxtb	r3, r3
    8a50:	4a0a      	ldr	r2, [pc, #40]	; (8a7c <compile_node+0x11a>)
    8a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a56:	60fb      	str	r3, [r7, #12]
        f(comp, pns);
    8a58:	68fb      	ldr	r3, [r7, #12]
    8a5a:	6939      	ldr	r1, [r7, #16]
    8a5c:	6878      	ldr	r0, [r7, #4]
    8a5e:	4798      	blx	r3
}
    8a60:	e000      	b.n	8a64 <compile_node+0x102>
                break;
    8a62:	bf00      	nop
}
    8a64:	bf00      	nop
    8a66:	3724      	adds	r7, #36	; 0x24
    8a68:	46bd      	mov	sp, r7
    8a6a:	bd90      	pop	{r4, r7, pc}
    8a6c:	00023108 	.word	0x00023108
    8a70:	000208b8 	.word	0x000208b8
    8a74:	00020d10 	.word	0x00020d10
    8a78:	0001ff80 	.word	0x0001ff80
    8a7c:	000207e0 	.word	0x000207e0

00008a80 <compile_scope_func_lambda_param>:
    }
    return native_type;
}
#endif

STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    8a80:	b580      	push	{r7, lr}
    8a82:	b088      	sub	sp, #32
    8a84:	af00      	add	r7, sp, #0
    8a86:	60f8      	str	r0, [r7, #12]
    8a88:	60b9      	str	r1, [r7, #8]
    8a8a:	607a      	str	r2, [r7, #4]
    8a8c:	603b      	str	r3, [r7, #0]
    // check that **kw is last
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    8a8e:	68fb      	ldr	r3, [r7, #12]
    8a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a92:	8b1b      	ldrh	r3, [r3, #24]
    8a94:	f003 0302 	and.w	r3, r3, #2
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d005      	beq.n	8aa8 <compile_scope_func_lambda_param+0x28>
        compile_syntax_error(comp, pn, "invalid syntax");
    8a9c:	4a77      	ldr	r2, [pc, #476]	; (8c7c <compile_scope_func_lambda_param+0x1fc>)
    8a9e:	68b9      	ldr	r1, [r7, #8]
    8aa0:	68f8      	ldr	r0, [r7, #12]
    8aa2:	f7fc f984 	bl	4dae <compile_syntax_error>
        return;
    8aa6:	e0e6      	b.n	8c76 <compile_scope_func_lambda_param+0x1f6>
    }

    qstr param_name = MP_QSTR_NULL;
    8aa8:	2300      	movs	r3, #0
    8aaa:	61fb      	str	r3, [r7, #28]
    uint param_flag = ID_FLAG_IS_PARAM;
    8aac:	2301      	movs	r3, #1
    8aae:	61bb      	str	r3, [r7, #24]
    mp_parse_node_struct_t *pns = NULL;
    8ab0:	2300      	movs	r3, #0
    8ab2:	617b      	str	r3, [r7, #20]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    8ab4:	68bb      	ldr	r3, [r7, #8]
    8ab6:	f003 030f 	and.w	r3, r3, #15
    8aba:	2b02      	cmp	r3, #2
    8abc:	d118      	bne.n	8af0 <compile_scope_func_lambda_param+0x70>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    8abe:	68bb      	ldr	r3, [r7, #8]
    8ac0:	091b      	lsrs	r3, r3, #4
    8ac2:	61fb      	str	r3, [r7, #28]
        if (comp->have_star) {
    8ac4:	68fb      	ldr	r3, [r7, #12]
    8ac6:	799b      	ldrb	r3, [r3, #6]
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d008      	beq.n	8ade <compile_scope_func_lambda_param+0x5e>
            // comes after a star, so counts as a keyword-only parameter
            comp->scope_cur->num_kwonly_args += 1;
    8acc:	68fb      	ldr	r3, [r7, #12]
    8ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ad0:	68fa      	ldr	r2, [r7, #12]
    8ad2:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8ad4:	8bd2      	ldrh	r2, [r2, #30]
    8ad6:	3201      	adds	r2, #1
    8ad8:	b292      	uxth	r2, r2
    8ada:	83da      	strh	r2, [r3, #30]
    8adc:	e0af      	b.n	8c3e <compile_scope_func_lambda_param+0x1be>
        } else {
            // comes before a star, so counts as a positional parameter
            comp->scope_cur->num_pos_args += 1;
    8ade:	68fb      	ldr	r3, [r7, #12]
    8ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ae2:	68fa      	ldr	r2, [r7, #12]
    8ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8ae6:	8b92      	ldrh	r2, [r2, #28]
    8ae8:	3201      	adds	r2, #1
    8aea:	b292      	uxth	r2, r2
    8aec:	839a      	strh	r2, [r3, #28]
    8aee:	e0a6      	b.n	8c3e <compile_scope_func_lambda_param+0x1be>
        }
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    8af0:	68bb      	ldr	r3, [r7, #8]
    8af2:	2b00      	cmp	r3, #0
    8af4:	d004      	beq.n	8b00 <compile_scope_func_lambda_param+0x80>
    8af6:	68bb      	ldr	r3, [r7, #8]
    8af8:	f003 0303 	and.w	r3, r3, #3
    8afc:	2b00      	cmp	r3, #0
    8afe:	d006      	beq.n	8b0e <compile_scope_func_lambda_param+0x8e>
    8b00:	4b5f      	ldr	r3, [pc, #380]	; (8c80 <compile_scope_func_lambda_param+0x200>)
    8b02:	4a60      	ldr	r2, [pc, #384]	; (8c84 <compile_scope_func_lambda_param+0x204>)
    8b04:	f640 21e7 	movw	r1, #2791	; 0xae7
    8b08:	485f      	ldr	r0, [pc, #380]	; (8c88 <compile_scope_func_lambda_param+0x208>)
    8b0a:	f012 fcb9 	bl	1b480 <__assert_func>
        pns = (mp_parse_node_struct_t*)pn;
    8b0e:	68bb      	ldr	r3, [r7, #8]
    8b10:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    8b12:	697b      	ldr	r3, [r7, #20]
    8b14:	685b      	ldr	r3, [r3, #4]
    8b16:	b2da      	uxtb	r2, r3
    8b18:	687b      	ldr	r3, [r7, #4]
    8b1a:	429a      	cmp	r2, r3
    8b1c:	d119      	bne.n	8b52 <compile_scope_func_lambda_param+0xd2>
            // named parameter with possible annotation
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8b1e:	697b      	ldr	r3, [r7, #20]
    8b20:	689b      	ldr	r3, [r3, #8]
    8b22:	091b      	lsrs	r3, r3, #4
    8b24:	61fb      	str	r3, [r7, #28]
            if (comp->have_star) {
    8b26:	68fb      	ldr	r3, [r7, #12]
    8b28:	799b      	ldrb	r3, [r3, #6]
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d008      	beq.n	8b40 <compile_scope_func_lambda_param+0xc0>
                // comes after a star, so counts as a keyword-only parameter
                comp->scope_cur->num_kwonly_args += 1;
    8b2e:	68fb      	ldr	r3, [r7, #12]
    8b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b32:	68fa      	ldr	r2, [r7, #12]
    8b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b36:	8bd2      	ldrh	r2, [r2, #30]
    8b38:	3201      	adds	r2, #1
    8b3a:	b292      	uxth	r2, r2
    8b3c:	83da      	strh	r2, [r3, #30]
    8b3e:	e07e      	b.n	8c3e <compile_scope_func_lambda_param+0x1be>
            } else {
                // comes before a star, so counts as a positional parameter
                comp->scope_cur->num_pos_args += 1;
    8b40:	68fb      	ldr	r3, [r7, #12]
    8b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b44:	68fa      	ldr	r2, [r7, #12]
    8b46:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b48:	8b92      	ldrh	r2, [r2, #28]
    8b4a:	3201      	adds	r2, #1
    8b4c:	b292      	uxth	r2, r2
    8b4e:	839a      	strh	r2, [r3, #28]
    8b50:	e075      	b.n	8c3e <compile_scope_func_lambda_param+0x1be>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    8b52:	697b      	ldr	r3, [r7, #20]
    8b54:	685b      	ldr	r3, [r3, #4]
    8b56:	b2da      	uxtb	r2, r3
    8b58:	683b      	ldr	r3, [r7, #0]
    8b5a:	429a      	cmp	r2, r3
    8b5c:	d153      	bne.n	8c06 <compile_scope_func_lambda_param+0x186>
            if (comp->have_star) {
    8b5e:	68fb      	ldr	r3, [r7, #12]
    8b60:	799b      	ldrb	r3, [r3, #6]
    8b62:	2b00      	cmp	r3, #0
    8b64:	d005      	beq.n	8b72 <compile_scope_func_lambda_param+0xf2>
                // more than one star
                compile_syntax_error(comp, pn, "invalid syntax");
    8b66:	4a45      	ldr	r2, [pc, #276]	; (8c7c <compile_scope_func_lambda_param+0x1fc>)
    8b68:	68b9      	ldr	r1, [r7, #8]
    8b6a:	68f8      	ldr	r0, [r7, #12]
    8b6c:	f7fc f91f 	bl	4dae <compile_syntax_error>
                return;
    8b70:	e081      	b.n	8c76 <compile_scope_func_lambda_param+0x1f6>
            }
            comp->have_star = true;
    8b72:	68fb      	ldr	r3, [r7, #12]
    8b74:	2201      	movs	r2, #1
    8b76:	719a      	strb	r2, [r3, #6]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    8b78:	2303      	movs	r3, #3
    8b7a:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8b7c:	697b      	ldr	r3, [r7, #20]
    8b7e:	689b      	ldr	r3, [r3, #8]
    8b80:	2b00      	cmp	r3, #0
    8b82:	d102      	bne.n	8b8a <compile_scope_func_lambda_param+0x10a>
                // bare star
                // TODO see http://www.python.org/dev/peps/pep-3102/
                //assert(comp->scope_cur->num_dict_params == 0);
                pns = NULL;
    8b84:	2300      	movs	r3, #0
    8b86:	617b      	str	r3, [r7, #20]
    8b88:	e059      	b.n	8c3e <compile_scope_func_lambda_param+0x1be>
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    8b8a:	697b      	ldr	r3, [r7, #20]
    8b8c:	689b      	ldr	r3, [r3, #8]
    8b8e:	f003 030f 	and.w	r3, r3, #15
    8b92:	2b02      	cmp	r3, #2
    8b94:	d10f      	bne.n	8bb6 <compile_scope_func_lambda_param+0x136>
                // named star
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8b96:	68fb      	ldr	r3, [r7, #12]
    8b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b9a:	68fa      	ldr	r2, [r7, #12]
    8b9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8b9e:	8b12      	ldrh	r2, [r2, #24]
    8ba0:	f042 0201 	orr.w	r2, r2, #1
    8ba4:	b292      	uxth	r2, r2
    8ba6:	831a      	strh	r2, [r3, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8ba8:	697b      	ldr	r3, [r7, #20]
    8baa:	689b      	ldr	r3, [r3, #8]
    8bac:	091b      	lsrs	r3, r3, #4
    8bae:	61fb      	str	r3, [r7, #28]
                pns = NULL;
    8bb0:	2300      	movs	r3, #0
    8bb2:	617b      	str	r3, [r7, #20]
    8bb4:	e043      	b.n	8c3e <compile_scope_func_lambda_param+0x1be>
            } else {
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    8bb6:	697b      	ldr	r3, [r7, #20]
    8bb8:	689b      	ldr	r3, [r3, #8]
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d00b      	beq.n	8bd6 <compile_scope_func_lambda_param+0x156>
    8bbe:	697b      	ldr	r3, [r7, #20]
    8bc0:	689b      	ldr	r3, [r3, #8]
    8bc2:	f003 0303 	and.w	r3, r3, #3
    8bc6:	2b00      	cmp	r3, #0
    8bc8:	d105      	bne.n	8bd6 <compile_scope_func_lambda_param+0x156>
    8bca:	697b      	ldr	r3, [r7, #20]
    8bcc:	689b      	ldr	r3, [r3, #8]
    8bce:	685b      	ldr	r3, [r3, #4]
    8bd0:	b2db      	uxtb	r3, r3
    8bd2:	2b45      	cmp	r3, #69	; 0x45
    8bd4:	d006      	beq.n	8be4 <compile_scope_func_lambda_param+0x164>
    8bd6:	4b2d      	ldr	r3, [pc, #180]	; (8c8c <compile_scope_func_lambda_param+0x20c>)
    8bd8:	4a2a      	ldr	r2, [pc, #168]	; (8c84 <compile_scope_func_lambda_param+0x204>)
    8bda:	f640 3106 	movw	r1, #2822	; 0xb06
    8bde:	482a      	ldr	r0, [pc, #168]	; (8c88 <compile_scope_func_lambda_param+0x208>)
    8be0:	f012 fc4e 	bl	1b480 <__assert_func>
                // named star with possible annotation
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8be4:	68fb      	ldr	r3, [r7, #12]
    8be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8be8:	68fa      	ldr	r2, [r7, #12]
    8bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8bec:	8b12      	ldrh	r2, [r2, #24]
    8bee:	f042 0201 	orr.w	r2, r2, #1
    8bf2:	b292      	uxth	r2, r2
    8bf4:	831a      	strh	r2, [r3, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8bf6:	697b      	ldr	r3, [r7, #20]
    8bf8:	689b      	ldr	r3, [r3, #8]
    8bfa:	617b      	str	r3, [r7, #20]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8bfc:	697b      	ldr	r3, [r7, #20]
    8bfe:	689b      	ldr	r3, [r3, #8]
    8c00:	091b      	lsrs	r3, r3, #4
    8c02:	61fb      	str	r3, [r7, #28]
    8c04:	e01b      	b.n	8c3e <compile_scope_func_lambda_param+0x1be>
            }
        } else {
            // double star with possible annotation
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    8c06:	697b      	ldr	r3, [r7, #20]
    8c08:	685b      	ldr	r3, [r3, #4]
    8c0a:	b2da      	uxtb	r2, r3
    8c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8c0e:	429a      	cmp	r2, r3
    8c10:	d006      	beq.n	8c20 <compile_scope_func_lambda_param+0x1a0>
    8c12:	4b1f      	ldr	r3, [pc, #124]	; (8c90 <compile_scope_func_lambda_param+0x210>)
    8c14:	4a1b      	ldr	r2, [pc, #108]	; (8c84 <compile_scope_func_lambda_param+0x204>)
    8c16:	f640 310e 	movw	r1, #2830	; 0xb0e
    8c1a:	481b      	ldr	r0, [pc, #108]	; (8c88 <compile_scope_func_lambda_param+0x208>)
    8c1c:	f012 fc30 	bl	1b480 <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8c20:	697b      	ldr	r3, [r7, #20]
    8c22:	689b      	ldr	r3, [r3, #8]
    8c24:	091b      	lsrs	r3, r3, #4
    8c26:	61fb      	str	r3, [r7, #28]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    8c28:	2305      	movs	r3, #5
    8c2a:	61bb      	str	r3, [r7, #24]
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    8c2c:	68fb      	ldr	r3, [r7, #12]
    8c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c30:	68fa      	ldr	r2, [r7, #12]
    8c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c34:	8b12      	ldrh	r2, [r2, #24]
    8c36:	f042 0202 	orr.w	r2, r2, #2
    8c3a:	b292      	uxth	r2, r2
    8c3c:	831a      	strh	r2, [r3, #24]
        }
    }

    if (param_name != MP_QSTR_NULL) {
    8c3e:	69fb      	ldr	r3, [r7, #28]
    8c40:	2b00      	cmp	r3, #0
    8c42:	d018      	beq.n	8c76 <compile_scope_func_lambda_param+0x1f6>
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, ID_INFO_KIND_UNDECIDED);
    8c44:	68fb      	ldr	r3, [r7, #12]
    8c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c48:	2200      	movs	r2, #0
    8c4a:	69f9      	ldr	r1, [r7, #28]
    8c4c:	4618      	mov	r0, r3
    8c4e:	f7fb ff5d 	bl	4b0c <scope_find_or_add_id>
    8c52:	6138      	str	r0, [r7, #16]
        if (id_info->kind != ID_INFO_KIND_UNDECIDED) {
    8c54:	693b      	ldr	r3, [r7, #16]
    8c56:	781b      	ldrb	r3, [r3, #0]
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d005      	beq.n	8c68 <compile_scope_func_lambda_param+0x1e8>
            compile_syntax_error(comp, pn, "argument name reused");
    8c5c:	4a0d      	ldr	r2, [pc, #52]	; (8c94 <compile_scope_func_lambda_param+0x214>)
    8c5e:	68b9      	ldr	r1, [r7, #8]
    8c60:	68f8      	ldr	r0, [r7, #12]
    8c62:	f7fc f8a4 	bl	4dae <compile_syntax_error>
            return;
    8c66:	e006      	b.n	8c76 <compile_scope_func_lambda_param+0x1f6>
        }
        id_info->kind = ID_INFO_KIND_LOCAL;
    8c68:	693b      	ldr	r3, [r7, #16]
    8c6a:	2203      	movs	r2, #3
    8c6c:	701a      	strb	r2, [r3, #0]
        id_info->flags = param_flag;
    8c6e:	69bb      	ldr	r3, [r7, #24]
    8c70:	b2da      	uxtb	r2, r3
    8c72:	693b      	ldr	r3, [r7, #16]
    8c74:	705a      	strb	r2, [r3, #1]
        }
        #else
        (void)pns;
        #endif
    }
}
    8c76:	3720      	adds	r7, #32
    8c78:	46bd      	mov	sp, r7
    8c7a:	bd80      	pop	{r7, pc}
    8c7c:	00020780 	.word	0x00020780
    8c80:	000200c8 	.word	0x000200c8
    8c84:	00020d20 	.word	0x00020d20
    8c88:	0001ff80 	.word	0x0001ff80
    8c8c:	000208ec 	.word	0x000208ec
    8c90:	00020924 	.word	0x00020924
    8c94:	00020954 	.word	0x00020954

00008c98 <compile_scope_func_param>:

STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    8c98:	b580      	push	{r7, lr}
    8c9a:	b084      	sub	sp, #16
    8c9c:	af02      	add	r7, sp, #8
    8c9e:	6078      	str	r0, [r7, #4]
    8ca0:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    8ca2:	2342      	movs	r3, #66	; 0x42
    8ca4:	9300      	str	r3, [sp, #0]
    8ca6:	2341      	movs	r3, #65	; 0x41
    8ca8:	2240      	movs	r2, #64	; 0x40
    8caa:	6839      	ldr	r1, [r7, #0]
    8cac:	6878      	ldr	r0, [r7, #4]
    8cae:	f7ff fee7 	bl	8a80 <compile_scope_func_lambda_param>
}
    8cb2:	bf00      	nop
    8cb4:	3708      	adds	r7, #8
    8cb6:	46bd      	mov	sp, r7
    8cb8:	bd80      	pop	{r7, pc}

00008cba <compile_scope_lambda_param>:

STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    8cba:	b580      	push	{r7, lr}
    8cbc:	b084      	sub	sp, #16
    8cbe:	af02      	add	r7, sp, #8
    8cc0:	6078      	str	r0, [r7, #4]
    8cc2:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    8cc4:	234a      	movs	r3, #74	; 0x4a
    8cc6:	9300      	str	r3, [sp, #0]
    8cc8:	2349      	movs	r3, #73	; 0x49
    8cca:	2248      	movs	r2, #72	; 0x48
    8ccc:	6839      	ldr	r1, [r7, #0]
    8cce:	6878      	ldr	r0, [r7, #4]
    8cd0:	f7ff fed6 	bl	8a80 <compile_scope_func_lambda_param>
}
    8cd4:	bf00      	nop
    8cd6:	3708      	adds	r7, #8
    8cd8:	46bd      	mov	sp, r7
    8cda:	bd80      	pop	{r7, pc}

00008cdc <compile_scope_comp_iter>:

STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    8cdc:	b580      	push	{r7, lr}
    8cde:	b08a      	sub	sp, #40	; 0x28
    8ce0:	af00      	add	r7, sp, #0
    8ce2:	60f8      	str	r0, [r7, #12]
    8ce4:	60b9      	str	r1, [r7, #8]
    8ce6:	607a      	str	r2, [r7, #4]
    8ce8:	603b      	str	r3, [r7, #0]
    uint l_top = comp_next_label(comp);
    8cea:	68f8      	ldr	r0, [r7, #12]
    8cec:	f7fc f87a 	bl	4de4 <comp_next_label>
    8cf0:	6238      	str	r0, [r7, #32]
    uint l_end = comp_next_label(comp);
    8cf2:	68f8      	ldr	r0, [r7, #12]
    8cf4:	f7fc f876 	bl	4de4 <comp_next_label>
    8cf8:	61f8      	str	r0, [r7, #28]
    EMIT_ARG(label_assign, l_top);
    8cfa:	68fb      	ldr	r3, [r7, #12]
    8cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8cfe:	6a39      	ldr	r1, [r7, #32]
    8d00:	4618      	mov	r0, r3
    8d02:	f001 fa3b 	bl	a17c <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    8d06:	68fb      	ldr	r3, [r7, #12]
    8d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d0a:	69f9      	ldr	r1, [r7, #28]
    8d0c:	4618      	mov	r0, r3
    8d0e:	f001 fdc4 	bl	a89a <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    8d12:	68bb      	ldr	r3, [r7, #8]
    8d14:	689b      	ldr	r3, [r3, #8]
    8d16:	2200      	movs	r2, #0
    8d18:	4619      	mov	r1, r3
    8d1a:	68f8      	ldr	r0, [r7, #12]
    8d1c:	f7fc fc94 	bl	5648 <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    8d20:	68bb      	ldr	r3, [r7, #8]
    8d22:	691b      	ldr	r3, [r3, #16]
    8d24:	627b      	str	r3, [r7, #36]	; 0x24

    tail_recursion:
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    8d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d28:	2b00      	cmp	r3, #0
    8d2a:	d120      	bne.n	8d6e <compile_scope_comp_iter+0x92>
        // no more nested if/for; compile inner expression
        compile_node(comp, pn_inner_expr);
    8d2c:	6879      	ldr	r1, [r7, #4]
    8d2e:	68f8      	ldr	r0, [r7, #12]
    8d30:	f7ff fe17 	bl	8962 <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    8d34:	68fb      	ldr	r3, [r7, #12]
    8d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d38:	681b      	ldr	r3, [r3, #0]
    8d3a:	2b06      	cmp	r3, #6
    8d3c:	d10b      	bne.n	8d56 <compile_scope_comp_iter+0x7a>
            EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8d3e:	68fb      	ldr	r3, [r7, #12]
    8d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d42:	2100      	movs	r1, #0
    8d44:	4618      	mov	r0, r3
    8d46:	f001 ffc9 	bl	acdc <mp_emit_bc_yield>
            reserve_labels_for_native(comp, 1);
            EMIT(pop_top);
    8d4a:	68fb      	ldr	r3, [r7, #12]
    8d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d4e:	4618      	mov	r0, r3
    8d50:	f001 fc6d 	bl	a62e <mp_emit_bc_pop_top>
    8d54:	e03e      	b.n	8dd4 <compile_scope_comp_iter+0xf8>
        } else {
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    8d56:	68fb      	ldr	r3, [r7, #12]
    8d58:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8d5a:	68fb      	ldr	r3, [r7, #12]
    8d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d5e:	6819      	ldr	r1, [r3, #0]
    8d60:	683b      	ldr	r3, [r7, #0]
    8d62:	009b      	lsls	r3, r3, #2
    8d64:	3305      	adds	r3, #5
    8d66:	461a      	mov	r2, r3
    8d68:	f001 fe50 	bl	aa0c <mp_emit_bc_store_comp>
    8d6c:	e032      	b.n	8dd4 <compile_scope_comp_iter+0xf8>
        }
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    8d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d70:	685b      	ldr	r3, [r3, #4]
    8d72:	b2db      	uxtb	r3, r3
    8d74:	2ba0      	cmp	r3, #160	; 0xa0
    8d76:	d10c      	bne.n	8d92 <compile_scope_comp_iter+0xb6>
        // if condition
        mp_parse_node_struct_t *pns_comp_if = (mp_parse_node_struct_t*)pn_iter;
    8d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d7a:	61bb      	str	r3, [r7, #24]
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    8d7c:	69bb      	ldr	r3, [r7, #24]
    8d7e:	6899      	ldr	r1, [r3, #8]
    8d80:	6a3b      	ldr	r3, [r7, #32]
    8d82:	2200      	movs	r2, #0
    8d84:	68f8      	ldr	r0, [r7, #12]
    8d86:	f7fc f9c0 	bl	510a <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    8d8a:	69bb      	ldr	r3, [r7, #24]
    8d8c:	68db      	ldr	r3, [r3, #12]
    8d8e:	627b      	str	r3, [r7, #36]	; 0x24
        goto tail_recursion;
    8d90:	e7c9      	b.n	8d26 <compile_scope_comp_iter+0x4a>
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    8d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d94:	685b      	ldr	r3, [r3, #4]
    8d96:	b2db      	uxtb	r3, r3
    8d98:	2b9f      	cmp	r3, #159	; 0x9f
    8d9a:	d006      	beq.n	8daa <compile_scope_comp_iter+0xce>
    8d9c:	4b18      	ldr	r3, [pc, #96]	; (8e00 <compile_scope_comp_iter+0x124>)
    8d9e:	4a19      	ldr	r2, [pc, #100]	; (8e04 <compile_scope_comp_iter+0x128>)
    8da0:	f640 314a 	movw	r1, #2890	; 0xb4a
    8da4:	4818      	ldr	r0, [pc, #96]	; (8e08 <compile_scope_comp_iter+0x12c>)
    8da6:	f012 fb6b 	bl	1b480 <__assert_func>
        // for loop
        mp_parse_node_struct_t *pns_comp_for2 = (mp_parse_node_struct_t*)pn_iter;
    8daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8dac:	617b      	str	r3, [r7, #20]
        compile_node(comp, pns_comp_for2->nodes[1]);
    8dae:	697b      	ldr	r3, [r7, #20]
    8db0:	68db      	ldr	r3, [r3, #12]
    8db2:	4619      	mov	r1, r3
    8db4:	68f8      	ldr	r0, [r7, #12]
    8db6:	f7ff fdd4 	bl	8962 <compile_node>
        EMIT_ARG(get_iter, true);
    8dba:	68fb      	ldr	r3, [r7, #12]
    8dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8dbe:	2101      	movs	r1, #1
    8dc0:	4618      	mov	r0, r3
    8dc2:	f001 fd4c 	bl	a85e <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    8dc6:	683b      	ldr	r3, [r7, #0]
    8dc8:	3301      	adds	r3, #1
    8dca:	687a      	ldr	r2, [r7, #4]
    8dcc:	6979      	ldr	r1, [r7, #20]
    8dce:	68f8      	ldr	r0, [r7, #12]
    8dd0:	f7ff ff84 	bl	8cdc <compile_scope_comp_iter>
    }

    EMIT_ARG(jump, l_top);
    8dd4:	68fb      	ldr	r3, [r7, #12]
    8dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8dd8:	6a39      	ldr	r1, [r7, #32]
    8dda:	4618      	mov	r0, r3
    8ddc:	f001 fc58 	bl	a690 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    8de0:	68fb      	ldr	r3, [r7, #12]
    8de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8de4:	69f9      	ldr	r1, [r7, #28]
    8de6:	4618      	mov	r0, r3
    8de8:	f001 f9c8 	bl	a17c <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    8dec:	68fb      	ldr	r3, [r7, #12]
    8dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8df0:	4618      	mov	r0, r3
    8df2:	f001 fd64 	bl	a8be <mp_emit_bc_for_iter_end>
}
    8df6:	bf00      	nop
    8df8:	3728      	adds	r7, #40	; 0x28
    8dfa:	46bd      	mov	sp, r7
    8dfc:	bd80      	pop	{r7, pc}
    8dfe:	bf00      	nop
    8e00:	0002096c 	.word	0x0002096c
    8e04:	00020d40 	.word	0x00020d40
    8e08:	0001ff80 	.word	0x0001ff80

00008e0c <check_for_doc_string>:

STATIC void check_for_doc_string(compiler_t *comp, mp_parse_node_t pn) {
    8e0c:	b480      	push	{r7}
    8e0e:	b083      	sub	sp, #12
    8e10:	af00      	add	r7, sp, #0
    8e12:	6078      	str	r0, [r7, #4]
    8e14:	6039      	str	r1, [r7, #0]
    }
#else
    (void)comp;
    (void)pn;
#endif
}
    8e16:	bf00      	nop
    8e18:	370c      	adds	r7, #12
    8e1a:	46bd      	mov	sp, r7
    8e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e20:	4770      	bx	lr

00008e22 <compile_scope>:

STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    8e22:	b580      	push	{r7, lr}
    8e24:	b08c      	sub	sp, #48	; 0x30
    8e26:	af00      	add	r7, sp, #0
    8e28:	60f8      	str	r0, [r7, #12]
    8e2a:	60b9      	str	r1, [r7, #8]
    8e2c:	607a      	str	r2, [r7, #4]
    comp->pass = pass;
    8e2e:	687b      	ldr	r3, [r7, #4]
    8e30:	b2da      	uxtb	r2, r3
    8e32:	68fb      	ldr	r3, [r7, #12]
    8e34:	715a      	strb	r2, [r3, #5]
    comp->scope_cur = scope;
    8e36:	68fb      	ldr	r3, [r7, #12]
    8e38:	68ba      	ldr	r2, [r7, #8]
    8e3a:	625a      	str	r2, [r3, #36]	; 0x24
    comp->next_label = 0;
    8e3c:	68fb      	ldr	r3, [r7, #12]
    8e3e:	2200      	movs	r2, #0
    8e40:	611a      	str	r2, [r3, #16]
    EMIT_ARG(start_pass, pass, scope);
    8e42:	68fb      	ldr	r3, [r7, #12]
    8e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e46:	68ba      	ldr	r2, [r7, #8]
    8e48:	6879      	ldr	r1, [r7, #4]
    8e4a:	4618      	mov	r0, r3
    8e4c:	f000 ffc1 	bl	9dd2 <mp_emit_bc_start_pass>
    reserve_labels_for_native(comp, 6); // used by native's start_pass

    if (comp->pass == MP_PASS_SCOPE) {
    8e50:	68fb      	ldr	r3, [r7, #12]
    8e52:	795b      	ldrb	r3, [r3, #5]
    8e54:	2b01      	cmp	r3, #1
    8e56:	d105      	bne.n	8e64 <compile_scope+0x42>
        // reset maximum stack sizes in scope
        // they will be computed in this first pass
        scope->stack_size = 0;
    8e58:	68bb      	ldr	r3, [r7, #8]
    8e5a:	2200      	movs	r2, #0
    8e5c:	849a      	strh	r2, [r3, #36]	; 0x24
        scope->exc_stack_size = 0;
    8e5e:	68bb      	ldr	r3, [r7, #8]
    8e60:	2200      	movs	r2, #0
    8e62:	84da      	strh	r2, [r3, #38]	; 0x26
    }

    // compile
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8e64:	68bb      	ldr	r3, [r7, #8]
    8e66:	68db      	ldr	r3, [r3, #12]
    8e68:	2b00      	cmp	r3, #0
    8e6a:	d025      	beq.n	8eb8 <compile_scope+0x96>
    8e6c:	68bb      	ldr	r3, [r7, #8]
    8e6e:	68db      	ldr	r3, [r3, #12]
    8e70:	f003 0303 	and.w	r3, r3, #3
    8e74:	2b00      	cmp	r3, #0
    8e76:	d11f      	bne.n	8eb8 <compile_scope+0x96>
    8e78:	68bb      	ldr	r3, [r7, #8]
    8e7a:	68db      	ldr	r3, [r3, #12]
    8e7c:	685b      	ldr	r3, [r3, #4]
    8e7e:	b2db      	uxtb	r3, r3
    8e80:	2b38      	cmp	r3, #56	; 0x38
    8e82:	d119      	bne.n	8eb8 <compile_scope+0x96>
        assert(scope->kind == SCOPE_MODULE);
    8e84:	68bb      	ldr	r3, [r7, #8]
    8e86:	681b      	ldr	r3, [r3, #0]
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d006      	beq.n	8e9a <compile_scope+0x78>
    8e8c:	4b9d      	ldr	r3, [pc, #628]	; (9104 <compile_scope+0x2e2>)
    8e8e:	4a9e      	ldr	r2, [pc, #632]	; (9108 <compile_scope+0x2e6>)
    8e90:	f640 3194 	movw	r1, #2964	; 0xb94
    8e94:	489d      	ldr	r0, [pc, #628]	; (910c <compile_scope+0x2ea>)
    8e96:	f012 faf3 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8e9a:	68bb      	ldr	r3, [r7, #8]
    8e9c:	68db      	ldr	r3, [r3, #12]
    8e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        compile_node(comp, pns->nodes[0]); // compile the expression
    8ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ea2:	689b      	ldr	r3, [r3, #8]
    8ea4:	4619      	mov	r1, r3
    8ea6:	68f8      	ldr	r0, [r7, #12]
    8ea8:	f7ff fd5b 	bl	8962 <compile_node>
        EMIT(return_value);
    8eac:	68fb      	ldr	r3, [r7, #12]
    8eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8eb0:	4618      	mov	r0, r3
    8eb2:	f001 fed8 	bl	ac66 <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8eb6:	e1fa      	b.n	92ae <compile_scope+0x48c>
    } else if (scope->kind == SCOPE_MODULE) {
    8eb8:	68bb      	ldr	r3, [r7, #8]
    8eba:	681b      	ldr	r3, [r3, #0]
    8ebc:	2b00      	cmp	r3, #0
    8ebe:	d11b      	bne.n	8ef8 <compile_scope+0xd6>
        if (!comp->is_repl) {
    8ec0:	68fb      	ldr	r3, [r7, #12]
    8ec2:	791b      	ldrb	r3, [r3, #4]
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d105      	bne.n	8ed4 <compile_scope+0xb2>
            check_for_doc_string(comp, scope->pn);
    8ec8:	68bb      	ldr	r3, [r7, #8]
    8eca:	68db      	ldr	r3, [r3, #12]
    8ecc:	4619      	mov	r1, r3
    8ece:	68f8      	ldr	r0, [r7, #12]
    8ed0:	f7ff ff9c 	bl	8e0c <check_for_doc_string>
        }
        compile_node(comp, scope->pn);
    8ed4:	68bb      	ldr	r3, [r7, #8]
    8ed6:	68db      	ldr	r3, [r3, #12]
    8ed8:	4619      	mov	r1, r3
    8eda:	68f8      	ldr	r0, [r7, #12]
    8edc:	f7ff fd41 	bl	8962 <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8ee0:	68fb      	ldr	r3, [r7, #12]
    8ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ee4:	210e      	movs	r1, #14
    8ee6:	4618      	mov	r0, r3
    8ee8:	f001 f9c6 	bl	a278 <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    8eec:	68fb      	ldr	r3, [r7, #12]
    8eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ef0:	4618      	mov	r0, r3
    8ef2:	f001 feb8 	bl	ac66 <mp_emit_bc_return_value>
    8ef6:	e1da      	b.n	92ae <compile_scope+0x48c>
    } else if (scope->kind == SCOPE_FUNCTION) {
    8ef8:	68bb      	ldr	r3, [r7, #8]
    8efa:	681b      	ldr	r3, [r3, #0]
    8efc:	2b07      	cmp	r3, #7
    8efe:	d14b      	bne.n	8f98 <compile_scope+0x176>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    8f00:	68bb      	ldr	r3, [r7, #8]
    8f02:	68db      	ldr	r3, [r3, #12]
    8f04:	2b00      	cmp	r3, #0
    8f06:	d005      	beq.n	8f14 <compile_scope+0xf2>
    8f08:	68bb      	ldr	r3, [r7, #8]
    8f0a:	68db      	ldr	r3, [r3, #12]
    8f0c:	f003 0303 	and.w	r3, r3, #3
    8f10:	2b00      	cmp	r3, #0
    8f12:	d006      	beq.n	8f22 <compile_scope+0x100>
    8f14:	4b7e      	ldr	r3, [pc, #504]	; (9110 <compile_scope+0x2ee>)
    8f16:	4a7c      	ldr	r2, [pc, #496]	; (9108 <compile_scope+0x2e6>)
    8f18:	f44f 613a 	mov.w	r1, #2976	; 0xba0
    8f1c:	487b      	ldr	r0, [pc, #492]	; (910c <compile_scope+0x2ea>)
    8f1e:	f012 faaf 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8f22:	68bb      	ldr	r3, [r7, #8]
    8f24:	68db      	ldr	r3, [r3, #12]
    8f26:	62bb      	str	r3, [r7, #40]	; 0x28
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    8f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f2a:	685b      	ldr	r3, [r3, #4]
    8f2c:	b2db      	uxtb	r3, r3
    8f2e:	2b03      	cmp	r3, #3
    8f30:	d006      	beq.n	8f40 <compile_scope+0x11e>
    8f32:	4b78      	ldr	r3, [pc, #480]	; (9114 <compile_scope+0x2f2>)
    8f34:	4a74      	ldr	r2, [pc, #464]	; (9108 <compile_scope+0x2e6>)
    8f36:	f640 31a2 	movw	r1, #2978	; 0xba2
    8f3a:	4874      	ldr	r0, [pc, #464]	; (910c <compile_scope+0x2ea>)
    8f3c:	f012 faa0 	bl	1b480 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    8f40:	68fb      	ldr	r3, [r7, #12]
    8f42:	795b      	ldrb	r3, [r3, #5]
    8f44:	2b01      	cmp	r3, #1
    8f46:	d109      	bne.n	8f5c <compile_scope+0x13a>
            comp->have_star = false;
    8f48:	68fb      	ldr	r3, [r7, #12]
    8f4a:	2200      	movs	r2, #0
    8f4c:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    8f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f50:	68d9      	ldr	r1, [r3, #12]
    8f52:	4b71      	ldr	r3, [pc, #452]	; (9118 <compile_scope+0x2f6>)
    8f54:	223e      	movs	r2, #62	; 0x3e
    8f56:	68f8      	ldr	r0, [r7, #12]
    8f58:	f7fb ffcb 	bl	4ef2 <apply_to_single_or_list>
                scope->scope_flags |= compile_viper_type_annotation(comp, pns->nodes[2]) << MP_SCOPE_FLAG_VIPERRET_POS;
            }
            #endif // MICROPY_EMIT_NATIVE
        }

        compile_node(comp, pns->nodes[3]); // 3 is function body
    8f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f5e:	695b      	ldr	r3, [r3, #20]
    8f60:	4619      	mov	r1, r3
    8f62:	68f8      	ldr	r0, [r7, #12]
    8f64:	f7ff fcfd 	bl	8962 <compile_node>
        // emit return if it wasn't the last opcode
        if (!EMIT(last_emit_was_return_value)) {
    8f68:	68fb      	ldr	r3, [r7, #12]
    8f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f6c:	4618      	mov	r0, r3
    8f6e:	f001 f8a5 	bl	a0bc <mp_emit_bc_last_emit_was_return_value>
    8f72:	4603      	mov	r3, r0
    8f74:	f083 0301 	eor.w	r3, r3, #1
    8f78:	b2db      	uxtb	r3, r3
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	f000 8197 	beq.w	92ae <compile_scope+0x48c>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8f80:	68fb      	ldr	r3, [r7, #12]
    8f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f84:	210e      	movs	r1, #14
    8f86:	4618      	mov	r0, r3
    8f88:	f001 f976 	bl	a278 <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    8f8c:	68fb      	ldr	r3, [r7, #12]
    8f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f90:	4618      	mov	r0, r3
    8f92:	f001 fe68 	bl	ac66 <mp_emit_bc_return_value>
    8f96:	e18a      	b.n	92ae <compile_scope+0x48c>
        }
    } else if (scope->kind == SCOPE_LAMBDA) {
    8f98:	68bb      	ldr	r3, [r7, #8]
    8f9a:	681b      	ldr	r3, [r3, #0]
    8f9c:	2b02      	cmp	r3, #2
    8f9e:	d14a      	bne.n	9036 <compile_scope+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    8fa0:	68bb      	ldr	r3, [r7, #8]
    8fa2:	68db      	ldr	r3, [r3, #12]
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d005      	beq.n	8fb4 <compile_scope+0x192>
    8fa8:	68bb      	ldr	r3, [r7, #8]
    8faa:	68db      	ldr	r3, [r3, #12]
    8fac:	f003 0303 	and.w	r3, r3, #3
    8fb0:	2b00      	cmp	r3, #0
    8fb2:	d006      	beq.n	8fc2 <compile_scope+0x1a0>
    8fb4:	4b56      	ldr	r3, [pc, #344]	; (9110 <compile_scope+0x2ee>)
    8fb6:	4a54      	ldr	r2, [pc, #336]	; (9108 <compile_scope+0x2e6>)
    8fb8:	f640 31b9 	movw	r1, #3001	; 0xbb9
    8fbc:	4853      	ldr	r0, [pc, #332]	; (910c <compile_scope+0x2ea>)
    8fbe:	f012 fa5f 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8fc2:	68bb      	ldr	r3, [r7, #8]
    8fc4:	68db      	ldr	r3, [r3, #12]
    8fc6:	627b      	str	r3, [r7, #36]	; 0x24
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    8fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8fca:	685b      	ldr	r3, [r3, #4]
    8fcc:	0a1b      	lsrs	r3, r3, #8
    8fce:	2b03      	cmp	r3, #3
    8fd0:	d006      	beq.n	8fe0 <compile_scope+0x1be>
    8fd2:	4b52      	ldr	r3, [pc, #328]	; (911c <compile_scope+0x2fa>)
    8fd4:	4a4c      	ldr	r2, [pc, #304]	; (9108 <compile_scope+0x2e6>)
    8fd6:	f640 31bb 	movw	r1, #3003	; 0xbbb
    8fda:	484c      	ldr	r0, [pc, #304]	; (910c <compile_scope+0x2ea>)
    8fdc:	f012 fa50 	bl	1b480 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    8fe0:	68fb      	ldr	r3, [r7, #12]
    8fe2:	795b      	ldrb	r3, [r3, #5]
    8fe4:	2b01      	cmp	r3, #1
    8fe6:	d109      	bne.n	8ffc <compile_scope+0x1da>
            comp->have_star = false;
    8fe8:	68fb      	ldr	r3, [r7, #12]
    8fea:	2200      	movs	r2, #0
    8fec:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    8fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ff0:	6899      	ldr	r1, [r3, #8]
    8ff2:	4b4b      	ldr	r3, [pc, #300]	; (9120 <compile_scope+0x2fe>)
    8ff4:	2246      	movs	r2, #70	; 0x46
    8ff6:	68f8      	ldr	r0, [r7, #12]
    8ff8:	f7fb ff7b 	bl	4ef2 <apply_to_single_or_list>
        }

        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    8ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ffe:	68db      	ldr	r3, [r3, #12]
    9000:	4619      	mov	r1, r3
    9002:	68f8      	ldr	r0, [r7, #12]
    9004:	f7ff fcad 	bl	8962 <compile_node>

        // if the lambda is a generator, then we return None, not the result of the expression of the lambda
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    9008:	68bb      	ldr	r3, [r7, #8]
    900a:	8b1b      	ldrh	r3, [r3, #24]
    900c:	f003 0304 	and.w	r3, r3, #4
    9010:	2b00      	cmp	r3, #0
    9012:	d00a      	beq.n	902a <compile_scope+0x208>
            EMIT(pop_top);
    9014:	68fb      	ldr	r3, [r7, #12]
    9016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9018:	4618      	mov	r0, r3
    901a:	f001 fb08 	bl	a62e <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    901e:	68fb      	ldr	r3, [r7, #12]
    9020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9022:	210e      	movs	r1, #14
    9024:	4618      	mov	r0, r3
    9026:	f001 f927 	bl	a278 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    902a:	68fb      	ldr	r3, [r7, #12]
    902c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    902e:	4618      	mov	r0, r3
    9030:	f001 fe19 	bl	ac66 <mp_emit_bc_return_value>
    9034:	e13b      	b.n	92ae <compile_scope+0x48c>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    9036:	68bb      	ldr	r3, [r7, #8]
    9038:	681b      	ldr	r3, [r3, #0]
    903a:	2b03      	cmp	r3, #3
    903c:	d00c      	beq.n	9058 <compile_scope+0x236>
    903e:	68bb      	ldr	r3, [r7, #8]
    9040:	681b      	ldr	r3, [r3, #0]
    9042:	2b04      	cmp	r3, #4
    9044:	d008      	beq.n	9058 <compile_scope+0x236>
    9046:	68bb      	ldr	r3, [r7, #8]
    9048:	681b      	ldr	r3, [r3, #0]
    904a:	2b05      	cmp	r3, #5
    904c:	d004      	beq.n	9058 <compile_scope+0x236>
    904e:	68bb      	ldr	r3, [r7, #8]
    9050:	681b      	ldr	r3, [r3, #0]
    9052:	2b06      	cmp	r3, #6
    9054:	f040 80ae 	bne.w	91b4 <compile_scope+0x392>
        // a bit of a hack at the moment

        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9058:	68bb      	ldr	r3, [r7, #8]
    905a:	68db      	ldr	r3, [r3, #12]
    905c:	2b00      	cmp	r3, #0
    905e:	d005      	beq.n	906c <compile_scope+0x24a>
    9060:	68bb      	ldr	r3, [r7, #8]
    9062:	68db      	ldr	r3, [r3, #12]
    9064:	f003 0303 	and.w	r3, r3, #3
    9068:	2b00      	cmp	r3, #0
    906a:	d006      	beq.n	907a <compile_scope+0x258>
    906c:	4b28      	ldr	r3, [pc, #160]	; (9110 <compile_scope+0x2ee>)
    906e:	4a26      	ldr	r2, [pc, #152]	; (9108 <compile_scope+0x2e6>)
    9070:	f640 31cf 	movw	r1, #3023	; 0xbcf
    9074:	4825      	ldr	r0, [pc, #148]	; (910c <compile_scope+0x2ea>)
    9076:	f012 fa03 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    907a:	68bb      	ldr	r3, [r7, #8]
    907c:	68db      	ldr	r3, [r3, #12]
    907e:	61bb      	str	r3, [r7, #24]
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    9080:	69bb      	ldr	r3, [r7, #24]
    9082:	685b      	ldr	r3, [r3, #4]
    9084:	0a1b      	lsrs	r3, r3, #8
    9086:	2b02      	cmp	r3, #2
    9088:	d006      	beq.n	9098 <compile_scope+0x276>
    908a:	4b26      	ldr	r3, [pc, #152]	; (9124 <compile_scope+0x302>)
    908c:	4a1e      	ldr	r2, [pc, #120]	; (9108 <compile_scope+0x2e6>)
    908e:	f640 31d1 	movw	r1, #3025	; 0xbd1
    9092:	481e      	ldr	r0, [pc, #120]	; (910c <compile_scope+0x2ea>)
    9094:	f012 f9f4 	bl	1b480 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    9098:	69bb      	ldr	r3, [r7, #24]
    909a:	68db      	ldr	r3, [r3, #12]
    909c:	2b00      	cmp	r3, #0
    909e:	d00b      	beq.n	90b8 <compile_scope+0x296>
    90a0:	69bb      	ldr	r3, [r7, #24]
    90a2:	68db      	ldr	r3, [r3, #12]
    90a4:	f003 0303 	and.w	r3, r3, #3
    90a8:	2b00      	cmp	r3, #0
    90aa:	d105      	bne.n	90b8 <compile_scope+0x296>
    90ac:	69bb      	ldr	r3, [r7, #24]
    90ae:	68db      	ldr	r3, [r3, #12]
    90b0:	685b      	ldr	r3, [r3, #4]
    90b2:	b2db      	uxtb	r3, r3
    90b4:	2b9f      	cmp	r3, #159	; 0x9f
    90b6:	d006      	beq.n	90c6 <compile_scope+0x2a4>
    90b8:	4b1b      	ldr	r3, [pc, #108]	; (9128 <compile_scope+0x306>)
    90ba:	4a13      	ldr	r2, [pc, #76]	; (9108 <compile_scope+0x2e6>)
    90bc:	f640 31d2 	movw	r1, #3026	; 0xbd2
    90c0:	4812      	ldr	r0, [pc, #72]	; (910c <compile_scope+0x2ea>)
    90c2:	f012 f9dd 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    90c6:	69bb      	ldr	r3, [r7, #24]
    90c8:	68db      	ldr	r3, [r3, #12]
    90ca:	617b      	str	r3, [r7, #20]

        // We need a unique name for the comprehension argument (the iterator).
        // CPython uses .0, but we should be able to use anything that won't
        // clash with a user defined variable.  Best to use an existing qstr,
        // so we use the blank qstr.
        qstr qstr_arg = MP_QSTR_;
    90cc:	2301      	movs	r3, #1
    90ce:	613b      	str	r3, [r7, #16]
        if (comp->pass == MP_PASS_SCOPE) {
    90d0:	68fb      	ldr	r3, [r7, #12]
    90d2:	795b      	ldrb	r3, [r3, #5]
    90d4:	2b01      	cmp	r3, #1
    90d6:	d109      	bne.n	90ec <compile_scope+0x2ca>
            scope_find_or_add_id(comp->scope_cur, qstr_arg, ID_INFO_KIND_LOCAL);
    90d8:	68fb      	ldr	r3, [r7, #12]
    90da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    90dc:	2203      	movs	r2, #3
    90de:	6939      	ldr	r1, [r7, #16]
    90e0:	4618      	mov	r0, r3
    90e2:	f7fb fd13 	bl	4b0c <scope_find_or_add_id>
            scope->num_pos_args = 1;
    90e6:	68bb      	ldr	r3, [r7, #8]
    90e8:	2201      	movs	r2, #1
    90ea:	839a      	strh	r2, [r3, #28]
        }

        if (scope->kind == SCOPE_LIST_COMP) {
    90ec:	68bb      	ldr	r3, [r7, #8]
    90ee:	681b      	ldr	r3, [r3, #0]
    90f0:	2b03      	cmp	r3, #3
    90f2:	d11b      	bne.n	912c <compile_scope+0x30a>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    90f4:	68fb      	ldr	r3, [r7, #12]
    90f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90f8:	2201      	movs	r2, #1
    90fa:	2100      	movs	r1, #0
    90fc:	4618      	mov	r0, r3
    90fe:	f001 fc52 	bl	a9a6 <mp_emit_bc_build>
    9102:	e01e      	b.n	9142 <compile_scope+0x320>
    9104:	000209b8 	.word	0x000209b8
    9108:	00020d58 	.word	0x00020d58
    910c:	0001ff80 	.word	0x0001ff80
    9110:	000209d4 	.word	0x000209d4
    9114:	000209f8 	.word	0x000209f8
    9118:	00008c99 	.word	0x00008c99
    911c:	00020a28 	.word	0x00020a28
    9120:	00008cbb 	.word	0x00008cbb
    9124:	000206c8 	.word	0x000206c8
    9128:	000206f4 	.word	0x000206f4
        } else if (scope->kind == SCOPE_DICT_COMP) {
    912c:	68bb      	ldr	r3, [r7, #8]
    912e:	681b      	ldr	r3, [r3, #0]
    9130:	2b04      	cmp	r3, #4
    9132:	d106      	bne.n	9142 <compile_scope+0x320>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    9134:	68fb      	ldr	r3, [r7, #12]
    9136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9138:	2203      	movs	r2, #3
    913a:	2100      	movs	r1, #0
    913c:	4618      	mov	r0, r3
    913e:	f001 fc32 	bl	a9a6 <mp_emit_bc_build>
        #endif
        }

        // There are 4 slots on the stack for the iterator, and the first one is
        // NULL to indicate that the second one points to the iterator object.
        if (scope->kind == SCOPE_GEN_EXPR) {
    9142:	68bb      	ldr	r3, [r7, #8]
    9144:	681b      	ldr	r3, [r3, #0]
    9146:	2b06      	cmp	r3, #6
    9148:	d113      	bne.n	9172 <compile_scope+0x350>
            MP_STATIC_ASSERT(MP_OBJ_ITER_BUF_NSLOTS == 4);
            EMIT(load_null);
    914a:	68fb      	ldr	r3, [r7, #12]
    914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    914e:	4618      	mov	r0, r3
    9150:	f001 f914 	bl	a37c <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    9154:	6939      	ldr	r1, [r7, #16]
    9156:	68f8      	ldr	r0, [r7, #12]
    9158:	f7fb ff33 	bl	4fc2 <compile_load_id>
            EMIT(load_null);
    915c:	68fb      	ldr	r3, [r7, #12]
    915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9160:	4618      	mov	r0, r3
    9162:	f001 f90b 	bl	a37c <mp_emit_bc_load_null>
            EMIT(load_null);
    9166:	68fb      	ldr	r3, [r7, #12]
    9168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    916a:	4618      	mov	r0, r3
    916c:	f001 f906 	bl	a37c <mp_emit_bc_load_null>
    9170:	e009      	b.n	9186 <compile_scope+0x364>
        } else {
            compile_load_id(comp, qstr_arg);
    9172:	6939      	ldr	r1, [r7, #16]
    9174:	68f8      	ldr	r0, [r7, #12]
    9176:	f7fb ff24 	bl	4fc2 <compile_load_id>
            EMIT_ARG(get_iter, true);
    917a:	68fb      	ldr	r3, [r7, #12]
    917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    917e:	2101      	movs	r1, #1
    9180:	4618      	mov	r0, r3
    9182:	f001 fb6c 	bl	a85e <mp_emit_bc_get_iter>
        }

        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    9186:	69bb      	ldr	r3, [r7, #24]
    9188:	689a      	ldr	r2, [r3, #8]
    918a:	2300      	movs	r3, #0
    918c:	6979      	ldr	r1, [r7, #20]
    918e:	68f8      	ldr	r0, [r7, #12]
    9190:	f7ff fda4 	bl	8cdc <compile_scope_comp_iter>

        if (scope->kind == SCOPE_GEN_EXPR) {
    9194:	68bb      	ldr	r3, [r7, #8]
    9196:	681b      	ldr	r3, [r3, #0]
    9198:	2b06      	cmp	r3, #6
    919a:	d105      	bne.n	91a8 <compile_scope+0x386>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    919c:	68fb      	ldr	r3, [r7, #12]
    919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91a0:	210e      	movs	r1, #14
    91a2:	4618      	mov	r0, r3
    91a4:	f001 f868 	bl	a278 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    91a8:	68fb      	ldr	r3, [r7, #12]
    91aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91ac:	4618      	mov	r0, r3
    91ae:	f001 fd5a 	bl	ac66 <mp_emit_bc_return_value>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    91b2:	e07c      	b.n	92ae <compile_scope+0x48c>
    } else {
        assert(scope->kind == SCOPE_CLASS);
    91b4:	68bb      	ldr	r3, [r7, #8]
    91b6:	681b      	ldr	r3, [r3, #0]
    91b8:	2b01      	cmp	r3, #1
    91ba:	d006      	beq.n	91ca <compile_scope+0x3a8>
    91bc:	4b46      	ldr	r3, [pc, #280]	; (92d8 <compile_scope+0x4b6>)
    91be:	4a47      	ldr	r2, [pc, #284]	; (92dc <compile_scope+0x4ba>)
    91c0:	f640 31fd 	movw	r1, #3069	; 0xbfd
    91c4:	4846      	ldr	r0, [pc, #280]	; (92e0 <compile_scope+0x4be>)
    91c6:	f012 f95b 	bl	1b480 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    91ca:	68bb      	ldr	r3, [r7, #8]
    91cc:	68db      	ldr	r3, [r3, #12]
    91ce:	2b00      	cmp	r3, #0
    91d0:	d005      	beq.n	91de <compile_scope+0x3bc>
    91d2:	68bb      	ldr	r3, [r7, #8]
    91d4:	68db      	ldr	r3, [r3, #12]
    91d6:	f003 0303 	and.w	r3, r3, #3
    91da:	2b00      	cmp	r3, #0
    91dc:	d006      	beq.n	91ec <compile_scope+0x3ca>
    91de:	4b41      	ldr	r3, [pc, #260]	; (92e4 <compile_scope+0x4c2>)
    91e0:	4a3e      	ldr	r2, [pc, #248]	; (92dc <compile_scope+0x4ba>)
    91e2:	f640 31fe 	movw	r1, #3070	; 0xbfe
    91e6:	483e      	ldr	r0, [pc, #248]	; (92e0 <compile_scope+0x4be>)
    91e8:	f012 f94a 	bl	1b480 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    91ec:	68bb      	ldr	r3, [r7, #8]
    91ee:	68db      	ldr	r3, [r3, #12]
    91f0:	623b      	str	r3, [r7, #32]
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    91f2:	6a3b      	ldr	r3, [r7, #32]
    91f4:	685b      	ldr	r3, [r3, #4]
    91f6:	b2db      	uxtb	r3, r3
    91f8:	2b33      	cmp	r3, #51	; 0x33
    91fa:	d006      	beq.n	920a <compile_scope+0x3e8>
    91fc:	4b3a      	ldr	r3, [pc, #232]	; (92e8 <compile_scope+0x4c6>)
    91fe:	4a37      	ldr	r2, [pc, #220]	; (92dc <compile_scope+0x4ba>)
    9200:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    9204:	4836      	ldr	r0, [pc, #216]	; (92e0 <compile_scope+0x4be>)
    9206:	f012 f93b 	bl	1b480 <__assert_func>

        if (comp->pass == MP_PASS_SCOPE) {
    920a:	68fb      	ldr	r3, [r7, #12]
    920c:	795b      	ldrb	r3, [r3, #5]
    920e:	2b01      	cmp	r3, #1
    9210:	d104      	bne.n	921c <compile_scope+0x3fa>
            scope_find_or_add_id(scope, MP_QSTR___class__, ID_INFO_KIND_LOCAL);
    9212:	2203      	movs	r2, #3
    9214:	2106      	movs	r1, #6
    9216:	68b8      	ldr	r0, [r7, #8]
    9218:	f7fb fc78 	bl	4b0c <scope_find_or_add_id>
        }

        compile_load_id(comp, MP_QSTR___name__);
    921c:	211c      	movs	r1, #28
    921e:	68f8      	ldr	r0, [r7, #12]
    9220:	f7fb fecf 	bl	4fc2 <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    9224:	211b      	movs	r1, #27
    9226:	68f8      	ldr	r0, [r7, #12]
    9228:	f7fb feea 	bl	5000 <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    922c:	68fb      	ldr	r3, [r7, #12]
    922e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9230:	6a3b      	ldr	r3, [r7, #32]
    9232:	689b      	ldr	r3, [r3, #8]
    9234:	091b      	lsrs	r3, r3, #4
    9236:	4619      	mov	r1, r3
    9238:	4610      	mov	r0, r2
    923a:	f001 f87b 	bl	a334 <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    923e:	2120      	movs	r1, #32
    9240:	68f8      	ldr	r0, [r7, #12]
    9242:	f7fb fedd 	bl	5000 <compile_store_id>

        check_for_doc_string(comp, pns->nodes[2]);
    9246:	6a3b      	ldr	r3, [r7, #32]
    9248:	691b      	ldr	r3, [r3, #16]
    924a:	4619      	mov	r1, r3
    924c:	68f8      	ldr	r0, [r7, #12]
    924e:	f7ff fddd 	bl	8e0c <check_for_doc_string>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    9252:	6a3b      	ldr	r3, [r7, #32]
    9254:	691b      	ldr	r3, [r3, #16]
    9256:	4619      	mov	r1, r3
    9258:	68f8      	ldr	r0, [r7, #12]
    925a:	f7ff fb82 	bl	8962 <compile_node>

        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    925e:	2106      	movs	r1, #6
    9260:	68b8      	ldr	r0, [r7, #8]
    9262:	f7fb fc99 	bl	4b98 <scope_find>
    9266:	61f8      	str	r0, [r7, #28]
        assert(id != NULL);
    9268:	69fb      	ldr	r3, [r7, #28]
    926a:	2b00      	cmp	r3, #0
    926c:	d106      	bne.n	927c <compile_scope+0x45a>
    926e:	4b1f      	ldr	r3, [pc, #124]	; (92ec <compile_scope+0x4ca>)
    9270:	4a1a      	ldr	r2, [pc, #104]	; (92dc <compile_scope+0x4ba>)
    9272:	f640 410f 	movw	r1, #3087	; 0xc0f
    9276:	481a      	ldr	r0, [pc, #104]	; (92e0 <compile_scope+0x4be>)
    9278:	f012 f902 	bl	1b480 <__assert_func>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    927c:	69fb      	ldr	r3, [r7, #28]
    927e:	781b      	ldrb	r3, [r3, #0]
    9280:	2b03      	cmp	r3, #3
    9282:	d106      	bne.n	9292 <compile_scope+0x470>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9284:	68fb      	ldr	r3, [r7, #12]
    9286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9288:	210e      	movs	r1, #14
    928a:	4618      	mov	r0, r3
    928c:	f000 fff4 	bl	a278 <mp_emit_bc_load_const_tok>
    9290:	e008      	b.n	92a4 <compile_scope+0x482>
        } else {
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    9292:	68fb      	ldr	r3, [r7, #12]
    9294:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9296:	69fb      	ldr	r3, [r7, #28]
    9298:	885b      	ldrh	r3, [r3, #2]
    929a:	461a      	mov	r2, r3
    929c:	2300      	movs	r3, #0
    929e:	2106      	movs	r1, #6
    92a0:	f001 f87c 	bl	a39c <mp_emit_bc_load_local>
        }
        EMIT(return_value);
    92a4:	68fb      	ldr	r3, [r7, #12]
    92a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92a8:	4618      	mov	r0, r3
    92aa:	f001 fcdc 	bl	ac66 <mp_emit_bc_return_value>
    }

    EMIT(end_pass);
    92ae:	68fb      	ldr	r3, [r7, #12]
    92b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92b2:	4618      	mov	r0, r3
    92b4:	f000 fe8c 	bl	9fd0 <mp_emit_bc_end_pass>

    // make sure we match all the exception levels
    assert(comp->cur_except_level == 0);
    92b8:	68fb      	ldr	r3, [r7, #12]
    92ba:	8b9b      	ldrh	r3, [r3, #28]
    92bc:	2b00      	cmp	r3, #0
    92be:	d006      	beq.n	92ce <compile_scope+0x4ac>
    92c0:	4b0b      	ldr	r3, [pc, #44]	; (92f0 <compile_scope+0x4ce>)
    92c2:	4a06      	ldr	r2, [pc, #24]	; (92dc <compile_scope+0x4ba>)
    92c4:	f640 411b 	movw	r1, #3099	; 0xc1b
    92c8:	4805      	ldr	r0, [pc, #20]	; (92e0 <compile_scope+0x4be>)
    92ca:	f012 f8d9 	bl	1b480 <__assert_func>
}
    92ce:	bf00      	nop
    92d0:	3730      	adds	r7, #48	; 0x30
    92d2:	46bd      	mov	sp, r7
    92d4:	bd80      	pop	{r7, pc}
    92d6:	bf00      	nop
    92d8:	00020a54 	.word	0x00020a54
    92dc:	00020d58 	.word	0x00020d58
    92e0:	0001ff80 	.word	0x0001ff80
    92e4:	000209d4 	.word	0x000209d4
    92e8:	00020a70 	.word	0x00020a70
    92ec:	00020aa0 	.word	0x00020aa0
    92f0:	00020aac 	.word	0x00020aac

000092f4 <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    92f4:	b580      	push	{r7, lr}
    92f6:	b092      	sub	sp, #72	; 0x48
    92f8:	af00      	add	r7, sp, #0
    92fa:	6078      	str	r0, [r7, #4]
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    92fc:	687b      	ldr	r3, [r7, #4]
    92fe:	8b1b      	ldrh	r3, [r3, #24]
    9300:	f003 0301 	and.w	r3, r3, #1
    9304:	2b00      	cmp	r3, #0
    9306:	d03c      	beq.n	9382 <scope_compute_things+0x8e>
        id_info_t *id_param = NULL;
    9308:	2300      	movs	r3, #0
    930a:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9310:	3b01      	subs	r3, #1
    9312:	643b      	str	r3, [r7, #64]	; 0x40
    9314:	e030      	b.n	9378 <scope_compute_things+0x84>
            id_info_t *id = &scope->id_info[i];
    9316:	687b      	ldr	r3, [r7, #4]
    9318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    931a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    931c:	00db      	lsls	r3, r3, #3
    931e:	4413      	add	r3, r2
    9320:	627b      	str	r3, [r7, #36]	; 0x24
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    9322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9324:	785b      	ldrb	r3, [r3, #1]
    9326:	f003 0302 	and.w	r3, r3, #2
    932a:	2b00      	cmp	r3, #0
    932c:	d018      	beq.n	9360 <scope_compute_things+0x6c>
                if (id_param != NULL) {
    932e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9330:	2b00      	cmp	r3, #0
    9332:	d025      	beq.n	9380 <scope_compute_things+0x8c>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    9334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    9336:	f107 0308 	add.w	r3, r7, #8
    933a:	e892 0003 	ldmia.w	r2, {r0, r1}
    933e:	e883 0003 	stmia.w	r3, {r0, r1}
    9342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9346:	e892 0003 	ldmia.w	r2, {r0, r1}
    934a:	e883 0003 	stmia.w	r3, {r0, r1}
    934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9350:	461a      	mov	r2, r3
    9352:	f107 0308 	add.w	r3, r7, #8
    9356:	e893 0003 	ldmia.w	r3, {r0, r1}
    935a:	e882 0003 	stmia.w	r2, {r0, r1}
                }
                break;
    935e:	e00f      	b.n	9380 <scope_compute_things+0x8c>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    9360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9362:	2b00      	cmp	r3, #0
    9364:	d105      	bne.n	9372 <scope_compute_things+0x7e>
    9366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9368:	785b      	ldrb	r3, [r3, #1]
    936a:	2b01      	cmp	r3, #1
    936c:	d101      	bne.n	9372 <scope_compute_things+0x7e>
                id_param = id;
    936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9370:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    9372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9374:	3b01      	subs	r3, #1
    9376:	643b      	str	r3, [r7, #64]	; 0x40
    9378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    937a:	2b00      	cmp	r3, #0
    937c:	dacb      	bge.n	9316 <scope_compute_things+0x22>
    937e:	e000      	b.n	9382 <scope_compute_things+0x8e>
                break;
    9380:	bf00      	nop
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	2200      	movs	r2, #0
    9386:	845a      	strh	r2, [r3, #34]	; 0x22
    for (int i = 0; i < scope->id_info_len; i++) {
    9388:	2300      	movs	r3, #0
    938a:	63fb      	str	r3, [r7, #60]	; 0x3c
    938c:	e02f      	b.n	93ee <scope_compute_things+0xfa>
        id_info_t *id = &scope->id_info[i];
    938e:	687b      	ldr	r3, [r7, #4]
    9390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9394:	00db      	lsls	r3, r3, #3
    9396:	4413      	add	r3, r2
    9398:	623b      	str	r3, [r7, #32]
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	681b      	ldr	r3, [r3, #0]
    939e:	2b01      	cmp	r3, #1
    93a0:	d103      	bne.n	93aa <scope_compute_things+0xb6>
    93a2:	6a3b      	ldr	r3, [r7, #32]
    93a4:	685b      	ldr	r3, [r3, #4]
    93a6:	2b06      	cmp	r3, #6
    93a8:	d01d      	beq.n	93e6 <scope_compute_things+0xf2>
            // __class__ is not counted as a local; if it's used then it becomes a ID_INFO_KIND_CELL
            continue;
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    93aa:	687b      	ldr	r3, [r7, #4]
    93ac:	681b      	ldr	r3, [r3, #0]
    93ae:	2b01      	cmp	r3, #1
    93b0:	d906      	bls.n	93c0 <scope_compute_things+0xcc>
    93b2:	6a3b      	ldr	r3, [r7, #32]
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	2b01      	cmp	r3, #1
    93b8:	d102      	bne.n	93c0 <scope_compute_things+0xcc>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    93ba:	6a3b      	ldr	r3, [r7, #32]
    93bc:	2202      	movs	r2, #2
    93be:	701a      	strb	r2, [r3, #0]
                scope->scope_flags |= MP_SCOPE_FLAG_REFGLOBALS;
            }
        }
        #endif
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    93c0:	6a3b      	ldr	r3, [r7, #32]
    93c2:	781b      	ldrb	r3, [r3, #0]
    93c4:	2b03      	cmp	r3, #3
    93c6:	d005      	beq.n	93d4 <scope_compute_things+0xe0>
    93c8:	6a3b      	ldr	r3, [r7, #32]
    93ca:	785b      	ldrb	r3, [r3, #1]
    93cc:	f003 0301 	and.w	r3, r3, #1
    93d0:	2b00      	cmp	r3, #0
    93d2:	d009      	beq.n	93e8 <scope_compute_things+0xf4>
            id->local_num = scope->num_locals++;
    93d4:	687b      	ldr	r3, [r7, #4]
    93d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    93d8:	1c5a      	adds	r2, r3, #1
    93da:	b291      	uxth	r1, r2
    93dc:	687a      	ldr	r2, [r7, #4]
    93de:	8451      	strh	r1, [r2, #34]	; 0x22
    93e0:	6a3a      	ldr	r2, [r7, #32]
    93e2:	8053      	strh	r3, [r2, #2]
    93e4:	e000      	b.n	93e8 <scope_compute_things+0xf4>
            continue;
    93e6:	bf00      	nop
    for (int i = 0; i < scope->id_info_len; i++) {
    93e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    93ea:	3301      	adds	r3, #1
    93ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    93ee:	687b      	ldr	r3, [r7, #4]
    93f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    93f2:	461a      	mov	r2, r3
    93f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    93f6:	429a      	cmp	r2, r3
    93f8:	dcc9      	bgt.n	938e <scope_compute_things+0x9a>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    93fa:	2300      	movs	r3, #0
    93fc:	63bb      	str	r3, [r7, #56]	; 0x38
    93fe:	e01c      	b.n	943a <scope_compute_things+0x146>
        id_info_t *id = &scope->id_info[i];
    9400:	687b      	ldr	r3, [r7, #4]
    9402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9406:	00db      	lsls	r3, r3, #3
    9408:	4413      	add	r3, r2
    940a:	61fb      	str	r3, [r7, #28]
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    940c:	69fb      	ldr	r3, [r7, #28]
    940e:	781b      	ldrb	r3, [r3, #0]
    9410:	2b04      	cmp	r3, #4
    9412:	d10f      	bne.n	9434 <scope_compute_things+0x140>
    9414:	69fb      	ldr	r3, [r7, #28]
    9416:	785b      	ldrb	r3, [r3, #1]
    9418:	f003 0301 	and.w	r3, r3, #1
    941c:	2b00      	cmp	r3, #0
    941e:	d109      	bne.n	9434 <scope_compute_things+0x140>
            id->local_num = scope->num_locals;
    9420:	687b      	ldr	r3, [r7, #4]
    9422:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    9424:	69fb      	ldr	r3, [r7, #28]
    9426:	805a      	strh	r2, [r3, #2]
            scope->num_locals += 1;
    9428:	687b      	ldr	r3, [r7, #4]
    942a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    942c:	3301      	adds	r3, #1
    942e:	b29a      	uxth	r2, r3
    9430:	687b      	ldr	r3, [r7, #4]
    9432:	845a      	strh	r2, [r3, #34]	; 0x22
    for (int i = 0; i < scope->id_info_len; i++) {
    9434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9436:	3301      	adds	r3, #1
    9438:	63bb      	str	r3, [r7, #56]	; 0x38
    943a:	687b      	ldr	r3, [r7, #4]
    943c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    943e:	461a      	mov	r2, r3
    9440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9442:	429a      	cmp	r2, r3
    9444:	dcdc      	bgt.n	9400 <scope_compute_things+0x10c>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    9446:	687b      	ldr	r3, [r7, #4]
    9448:	685b      	ldr	r3, [r3, #4]
    944a:	2b00      	cmp	r3, #0
    944c:	f000 8085 	beq.w	955a <scope_compute_things+0x266>
        int num_free = 0;
    9450:	2300      	movs	r3, #0
    9452:	637b      	str	r3, [r7, #52]	; 0x34
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    9454:	2300      	movs	r3, #0
    9456:	633b      	str	r3, [r7, #48]	; 0x30
    9458:	e041      	b.n	94de <scope_compute_things+0x1ea>
            id_info_t *id = &scope->parent->id_info[i];
    945a:	687b      	ldr	r3, [r7, #4]
    945c:	685b      	ldr	r3, [r3, #4]
    945e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9462:	00db      	lsls	r3, r3, #3
    9464:	4413      	add	r3, r2
    9466:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    9468:	69bb      	ldr	r3, [r7, #24]
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	2b04      	cmp	r3, #4
    946e:	d003      	beq.n	9478 <scope_compute_things+0x184>
    9470:	69bb      	ldr	r3, [r7, #24]
    9472:	781b      	ldrb	r3, [r3, #0]
    9474:	2b05      	cmp	r3, #5
    9476:	d12f      	bne.n	94d8 <scope_compute_things+0x1e4>
                for (int j = 0; j < scope->id_info_len; j++) {
    9478:	2300      	movs	r3, #0
    947a:	62fb      	str	r3, [r7, #44]	; 0x2c
    947c:	e026      	b.n	94cc <scope_compute_things+0x1d8>
                    id_info_t *id2 = &scope->id_info[j];
    947e:	687b      	ldr	r3, [r7, #4]
    9480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9484:	00db      	lsls	r3, r3, #3
    9486:	4413      	add	r3, r2
    9488:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    948a:	697b      	ldr	r3, [r7, #20]
    948c:	781b      	ldrb	r3, [r3, #0]
    948e:	2b05      	cmp	r3, #5
    9490:	d119      	bne.n	94c6 <scope_compute_things+0x1d2>
    9492:	69bb      	ldr	r3, [r7, #24]
    9494:	685a      	ldr	r2, [r3, #4]
    9496:	697b      	ldr	r3, [r7, #20]
    9498:	685b      	ldr	r3, [r3, #4]
    949a:	429a      	cmp	r2, r3
    949c:	d113      	bne.n	94c6 <scope_compute_things+0x1d2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    949e:	697b      	ldr	r3, [r7, #20]
    94a0:	785b      	ldrb	r3, [r3, #1]
    94a2:	f003 0301 	and.w	r3, r3, #1
    94a6:	2b00      	cmp	r3, #0
    94a8:	d006      	beq.n	94b8 <scope_compute_things+0x1c4>
    94aa:	4b2e      	ldr	r3, [pc, #184]	; (9564 <scope_compute_things+0x270>)
    94ac:	4a2e      	ldr	r2, [pc, #184]	; (9568 <scope_compute_things+0x274>)
    94ae:	f640 5104 	movw	r1, #3332	; 0xd04
    94b2:	482e      	ldr	r0, [pc, #184]	; (956c <scope_compute_things+0x278>)
    94b4:	f011 ffe4 	bl	1b480 <__assert_func>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    94b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94ba:	b29a      	uxth	r2, r3
    94bc:	697b      	ldr	r3, [r7, #20]
    94be:	805a      	strh	r2, [r3, #2]
                        num_free += 1;
    94c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94c2:	3301      	adds	r3, #1
    94c4:	637b      	str	r3, [r7, #52]	; 0x34
                for (int j = 0; j < scope->id_info_len; j++) {
    94c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    94c8:	3301      	adds	r3, #1
    94ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    94cc:	687b      	ldr	r3, [r7, #4]
    94ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    94d0:	461a      	mov	r2, r3
    94d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    94d4:	429a      	cmp	r2, r3
    94d6:	dcd2      	bgt.n	947e <scope_compute_things+0x18a>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    94d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    94da:	3301      	adds	r3, #1
    94dc:	633b      	str	r3, [r7, #48]	; 0x30
    94de:	687b      	ldr	r3, [r7, #4]
    94e0:	685b      	ldr	r3, [r3, #4]
    94e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    94e4:	461a      	mov	r2, r3
    94e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    94e8:	429a      	cmp	r2, r3
    94ea:	dcb6      	bgt.n	945a <scope_compute_things+0x166>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    94ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94ee:	2b00      	cmp	r3, #0
    94f0:	dd33      	ble.n	955a <scope_compute_things+0x266>
            for (int i = 0; i < scope->id_info_len; i++) {
    94f2:	2300      	movs	r3, #0
    94f4:	62bb      	str	r3, [r7, #40]	; 0x28
    94f6:	e01a      	b.n	952e <scope_compute_things+0x23a>
                id_info_t *id = &scope->id_info[i];
    94f8:	687b      	ldr	r3, [r7, #4]
    94fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94fe:	00db      	lsls	r3, r3, #3
    9500:	4413      	add	r3, r2
    9502:	613b      	str	r3, [r7, #16]
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    9504:	693b      	ldr	r3, [r7, #16]
    9506:	781b      	ldrb	r3, [r3, #0]
    9508:	2b05      	cmp	r3, #5
    950a:	d105      	bne.n	9518 <scope_compute_things+0x224>
    950c:	693b      	ldr	r3, [r7, #16]
    950e:	785b      	ldrb	r3, [r3, #1]
    9510:	f003 0301 	and.w	r3, r3, #1
    9514:	2b00      	cmp	r3, #0
    9516:	d007      	beq.n	9528 <scope_compute_things+0x234>
                    id->local_num += num_free;
    9518:	693b      	ldr	r3, [r7, #16]
    951a:	885a      	ldrh	r2, [r3, #2]
    951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    951e:	b29b      	uxth	r3, r3
    9520:	4413      	add	r3, r2
    9522:	b29a      	uxth	r2, r3
    9524:	693b      	ldr	r3, [r7, #16]
    9526:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    9528:	6abb      	ldr	r3, [r7, #40]	; 0x28
    952a:	3301      	adds	r3, #1
    952c:	62bb      	str	r3, [r7, #40]	; 0x28
    952e:	687b      	ldr	r3, [r7, #4]
    9530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9532:	461a      	mov	r2, r3
    9534:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9536:	429a      	cmp	r2, r3
    9538:	dcde      	bgt.n	94f8 <scope_compute_things+0x204>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    953a:	687b      	ldr	r3, [r7, #4]
    953c:	8b9a      	ldrh	r2, [r3, #28]
    953e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9540:	b29b      	uxth	r3, r3
    9542:	4413      	add	r3, r2
    9544:	b29a      	uxth	r2, r3
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	839a      	strh	r2, [r3, #28]
            scope->num_locals += num_free;
    954a:	687b      	ldr	r3, [r7, #4]
    954c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    954e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9550:	b29b      	uxth	r3, r3
    9552:	4413      	add	r3, r2
    9554:	b29a      	uxth	r2, r3
    9556:	687b      	ldr	r3, [r7, #4]
    9558:	845a      	strh	r2, [r3, #34]	; 0x22
        }
    }
}
    955a:	bf00      	nop
    955c:	3748      	adds	r7, #72	; 0x48
    955e:	46bd      	mov	sp, r7
    9560:	bd80      	pop	{r7, pc}
    9562:	bf00      	nop
    9564:	00020ac8 	.word	0x00020ac8
    9568:	00020d68 	.word	0x00020d68
    956c:	0001ff80 	.word	0x0001ff80

00009570 <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9570:	b580      	push	{r7, lr}
    9572:	b09c      	sub	sp, #112	; 0x70
    9574:	af00      	add	r7, sp, #0
    9576:	60f8      	str	r0, [r7, #12]
    9578:	60b9      	str	r1, [r7, #8]
    957a:	607a      	str	r2, [r7, #4]
    957c:	70fb      	strb	r3, [r7, #3]
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    957e:	f107 0314 	add.w	r3, r7, #20
    9582:	222c      	movs	r2, #44	; 0x2c
    9584:	2100      	movs	r1, #0
    9586:	4618      	mov	r0, r3
    9588:	f013 fb40 	bl	1cc0c <memset>
    compiler_t *comp = &comp_state;
    958c:	f107 0314 	add.w	r3, r7, #20
    9590:	657b      	str	r3, [r7, #84]	; 0x54

    comp->source_file = source_file;
    9592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9594:	68ba      	ldr	r2, [r7, #8]
    9596:	601a      	str	r2, [r3, #0]
    comp->is_repl = is_repl;
    9598:	78fa      	ldrb	r2, [r7, #3]
    959a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    959c:	711a      	strb	r2, [r3, #4]
    comp->break_label = INVALID_LABEL;
    959e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    95a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    95a4:	831a      	strh	r2, [r3, #24]
    comp->continue_label = INVALID_LABEL;
    95a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    95a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    95ac:	835a      	strh	r2, [r3, #26]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    95ae:	68fb      	ldr	r3, [r7, #12]
    95b0:	681a      	ldr	r2, [r3, #0]
    95b2:	687b      	ldr	r3, [r7, #4]
    95b4:	2100      	movs	r1, #0
    95b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
    95b8:	f7fb fc6a 	bl	4e90 <scope_new_and_link>
    95bc:	6538      	str	r0, [r7, #80]	; 0x50

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    95be:	f000 f943 	bl	9848 <emit_bc_new>
    95c2:	64f8      	str	r0, [r7, #76]	; 0x4c

    // compile pass 1
    comp->emit = emit_bc;
    95c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    95c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    95c8:	629a      	str	r2, [r3, #40]	; 0x28
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    95ca:	2300      	movs	r3, #0
    95cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    95ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    95d0:	6a1b      	ldr	r3, [r3, #32]
    95d2:	66bb      	str	r3, [r7, #104]	; 0x68
    95d4:	e029      	b.n	962a <mp_compile_to_raw_code+0xba>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    95d6:	2201      	movs	r2, #1
    95d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    95da:	6d78      	ldr	r0, [r7, #84]	; 0x54
    95dc:	f7ff fc21 	bl	8e22 <compile_scope>

            // Check if any implicitly declared variables should be closed over
            for (size_t i = 0; i < s->id_info_len; ++i) {
    95e0:	2300      	movs	r3, #0
    95e2:	667b      	str	r3, [r7, #100]	; 0x64
    95e4:	e010      	b.n	9608 <mp_compile_to_raw_code+0x98>
                id_info_t *id = &s->id_info[i];
    95e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    95e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    95ec:	00db      	lsls	r3, r3, #3
    95ee:	4413      	add	r3, r2
    95f0:	64bb      	str	r3, [r7, #72]	; 0x48
                if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    95f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    95f4:	781b      	ldrb	r3, [r3, #0]
    95f6:	2b01      	cmp	r3, #1
    95f8:	d103      	bne.n	9602 <mp_compile_to_raw_code+0x92>
                    scope_check_to_close_over(s, id);
    95fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    95fc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    95fe:	f7fb fb5b 	bl	4cb8 <scope_check_to_close_over>
            for (size_t i = 0; i < s->id_info_len; ++i) {
    9602:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9604:	3301      	adds	r3, #1
    9606:	667b      	str	r3, [r7, #100]	; 0x64
    9608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    960a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    960c:	461a      	mov	r2, r3
    960e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9610:	429a      	cmp	r2, r3
    9612:	d8e8      	bhi.n	95e6 <mp_compile_to_raw_code+0x76>
                }
            }
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    9614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9616:	691a      	ldr	r2, [r3, #16]
    9618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    961a:	429a      	cmp	r2, r3
    961c:	d902      	bls.n	9624 <mp_compile_to_raw_code+0xb4>
            max_num_labels = comp->next_label;
    961e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9620:	691b      	ldr	r3, [r3, #16]
    9622:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    9626:	689b      	ldr	r3, [r3, #8]
    9628:	66bb      	str	r3, [r7, #104]	; 0x68
    962a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    962c:	2b00      	cmp	r3, #0
    962e:	d003      	beq.n	9638 <mp_compile_to_raw_code+0xc8>
    9630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9632:	689b      	ldr	r3, [r3, #8]
    9634:	2b00      	cmp	r3, #0
    9636:	d0ce      	beq.n	95d6 <mp_compile_to_raw_code+0x66>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    963a:	6a1b      	ldr	r3, [r3, #32]
    963c:	663b      	str	r3, [r7, #96]	; 0x60
    963e:	e005      	b.n	964c <mp_compile_to_raw_code+0xdc>
        scope_compute_things(s);
    9640:	6e38      	ldr	r0, [r7, #96]	; 0x60
    9642:	f7ff fe57 	bl	92f4 <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9648:	689b      	ldr	r3, [r3, #8]
    964a:	663b      	str	r3, [r7, #96]	; 0x60
    964c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    964e:	2b00      	cmp	r3, #0
    9650:	d003      	beq.n	965a <mp_compile_to_raw_code+0xea>
    9652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9654:	689b      	ldr	r3, [r3, #8]
    9656:	2b00      	cmp	r3, #0
    9658:	d0f2      	beq.n	9640 <mp_compile_to_raw_code+0xd0>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    965a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    965c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    965e:	f000 f8ff 	bl	9860 <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9664:	6a1b      	ldr	r3, [r3, #32]
    9666:	65fb      	str	r3, [r7, #92]	; 0x5c
    9668:	e01d      	b.n	96a6 <mp_compile_to_raw_code+0x136>
                    comp->emit = emit_native;
                    break;
#endif // MICROPY_EMIT_NATIVE

                default:
                    comp->emit = emit_bc;
    966a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    966c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    966e:	629a      	str	r2, [r3, #40]	; 0x28
                    #if MICROPY_EMIT_NATIVE
                    comp->emit_method_table = &emit_bc_method_table;
                    #endif
                    break;
    9670:	bf00      	nop
            }

            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    9672:	2202      	movs	r2, #2
    9674:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    9676:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9678:	f7ff fbd3 	bl	8e22 <compile_scope>

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
    967c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    967e:	689b      	ldr	r3, [r3, #8]
    9680:	2b00      	cmp	r3, #0
    9682:	d104      	bne.n	968e <mp_compile_to_raw_code+0x11e>
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    9684:	2203      	movs	r2, #3
    9686:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    9688:	6d78      	ldr	r0, [r7, #84]	; 0x54
    968a:	f7ff fbca 	bl	8e22 <compile_scope>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    968e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9690:	689b      	ldr	r3, [r3, #8]
    9692:	2b00      	cmp	r3, #0
    9694:	d104      	bne.n	96a0 <mp_compile_to_raw_code+0x130>
                compile_scope(comp, s, MP_PASS_EMIT);
    9696:	2204      	movs	r2, #4
    9698:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    969a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    969c:	f7ff fbc1 	bl	8e22 <compile_scope>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    96a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    96a2:	689b      	ldr	r3, [r3, #8]
    96a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    96a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    96a8:	2b00      	cmp	r3, #0
    96aa:	d003      	beq.n	96b4 <mp_compile_to_raw_code+0x144>
    96ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96ae:	689b      	ldr	r3, [r3, #8]
    96b0:	2b00      	cmp	r3, #0
    96b2:	d0da      	beq.n	966a <mp_compile_to_raw_code+0xfa>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    96b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96b6:	689b      	ldr	r3, [r3, #8]
    96b8:	2b00      	cmp	r3, #0
    96ba:	d011      	beq.n	96e0 <mp_compile_to_raw_code+0x170>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    96bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    96c0:	68db      	ldr	r3, [r3, #12]
    96c2:	4619      	mov	r1, r3
    96c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
    96c6:	f7fb fb57 	bl	4d78 <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    96ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96cc:	6898      	ldr	r0, [r3, #8]
    96ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96d0:	6819      	ldr	r1, [r3, #0]
    96d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96d4:	68da      	ldr	r2, [r3, #12]
            comp->compile_error_line, comp->scope_cur->simple_name);
    96d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    96d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    96da:	8adb      	ldrh	r3, [r3, #22]
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    96dc:	f005 ffea 	bl	f6b4 <mp_obj_exception_add_traceback>
    }

    // free the emitters

    emit_bc_free(emit_bc);
    96e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    96e2:	f000 f8d2 	bl	988a <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    96e6:	68f8      	ldr	r0, [r7, #12]
    96e8:	f7fb f98e 	bl	4a08 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    96ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96ee:	691b      	ldr	r3, [r3, #16]
    96f0:	647b      	str	r3, [r7, #68]	; 0x44
    for (scope_t *s = module_scope; s;) {
    96f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96f4:	65bb      	str	r3, [r7, #88]	; 0x58
    96f6:	e007      	b.n	9708 <mp_compile_to_raw_code+0x198>
        scope_t *next = s->next;
    96f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    96fa:	689b      	ldr	r3, [r3, #8]
    96fc:	643b      	str	r3, [r7, #64]	; 0x40
        scope_free(s);
    96fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
    9700:	f7fb f9f4 	bl	4aec <scope_free>
        s = next;
    9704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9706:	65bb      	str	r3, [r7, #88]	; 0x58
    for (scope_t *s = module_scope; s;) {
    9708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    970a:	2b00      	cmp	r3, #0
    970c:	d1f4      	bne.n	96f8 <mp_compile_to_raw_code+0x188>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    970e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9710:	689b      	ldr	r3, [r3, #8]
    9712:	2b00      	cmp	r3, #0
    9714:	d004      	beq.n	9720 <mp_compile_to_raw_code+0x1b0>
        nlr_raise(comp->compile_error);
    9716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9718:	689b      	ldr	r3, [r3, #8]
    971a:	4618      	mov	r0, r3
    971c:	f7f6 fde0 	bl	2e0 <nlr_jump>
    } else {
        return outer_raw_code;
    9720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
    9722:	4618      	mov	r0, r3
    9724:	3770      	adds	r7, #112	; 0x70
    9726:	46bd      	mov	sp, r7
    9728:	bd80      	pop	{r7, pc}

0000972a <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    972a:	b580      	push	{r7, lr}
    972c:	b086      	sub	sp, #24
    972e:	af00      	add	r7, sp, #0
    9730:	60f8      	str	r0, [r7, #12]
    9732:	60b9      	str	r1, [r7, #8]
    9734:	607a      	str	r2, [r7, #4]
    9736:	70fb      	strb	r3, [r7, #3]
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    9738:	78fb      	ldrb	r3, [r7, #3]
    973a:	687a      	ldr	r2, [r7, #4]
    973c:	68b9      	ldr	r1, [r7, #8]
    973e:	68f8      	ldr	r0, [r7, #12]
    9740:	f7ff ff16 	bl	9570 <mp_compile_to_raw_code>
    9744:	6178      	str	r0, [r7, #20]
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    9746:	2200      	movs	r2, #0
    9748:	2100      	movs	r1, #0
    974a:	6978      	ldr	r0, [r7, #20]
    974c:	f001 fced 	bl	b12a <mp_make_function_from_raw_code>
    9750:	4603      	mov	r3, r0
}
    9752:	4618      	mov	r0, r3
    9754:	3718      	adds	r7, #24
    9756:	46bd      	mov	sp, r7
    9758:	bd80      	pop	{r7, pc}
    975a:	bf00      	nop

0000975c <mp_emit_common_get_id_for_modification>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    975c:	b580      	push	{r7, lr}
    975e:	b084      	sub	sp, #16
    9760:	af00      	add	r7, sp, #0
    9762:	6078      	str	r0, [r7, #4]
    9764:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    id_info_t *id = scope_find_or_add_id(scope, qst, ID_INFO_KIND_GLOBAL_IMPLICIT);
    9766:	2201      	movs	r2, #1
    9768:	6839      	ldr	r1, [r7, #0]
    976a:	6878      	ldr	r0, [r7, #4]
    976c:	f7fb f9ce 	bl	4b0c <scope_find_or_add_id>
    9770:	60f8      	str	r0, [r7, #12]
    if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9772:	687b      	ldr	r3, [r7, #4]
    9774:	681b      	ldr	r3, [r3, #0]
    9776:	2b01      	cmp	r3, #1
    9778:	d906      	bls.n	9788 <mp_emit_common_get_id_for_modification+0x2c>
    977a:	68fb      	ldr	r3, [r7, #12]
    977c:	781b      	ldrb	r3, [r3, #0]
    977e:	2b01      	cmp	r3, #1
    9780:	d102      	bne.n	9788 <mp_emit_common_get_id_for_modification+0x2c>
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    9782:	68fb      	ldr	r3, [r7, #12]
    9784:	2203      	movs	r2, #3
    9786:	701a      	strb	r2, [r3, #0]
    }
}
    9788:	bf00      	nop
    978a:	3710      	adds	r7, #16
    978c:	46bd      	mov	sp, r7
    978e:	bd80      	pop	{r7, pc}

00009790 <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    9790:	b590      	push	{r4, r7, lr}
    9792:	b087      	sub	sp, #28
    9794:	af00      	add	r7, sp, #0
    9796:	60f8      	str	r0, [r7, #12]
    9798:	60b9      	str	r1, [r7, #8]
    979a:	607a      	str	r2, [r7, #4]
    979c:	603b      	str	r3, [r7, #0]
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    979e:	6839      	ldr	r1, [r7, #0]
    97a0:	6878      	ldr	r0, [r7, #4]
    97a2:	f7fb f9f9 	bl	4b98 <scope_find>
    97a6:	6178      	str	r0, [r7, #20]
    assert(id != NULL);
    97a8:	697b      	ldr	r3, [r7, #20]
    97aa:	2b00      	cmp	r3, #0
    97ac:	d105      	bne.n	97ba <mp_emit_common_id_op+0x2a>
    97ae:	4b22      	ldr	r3, [pc, #136]	; (9838 <mp_emit_common_id_op+0xa8>)
    97b0:	4a22      	ldr	r2, [pc, #136]	; (983c <mp_emit_common_id_op+0xac>)
    97b2:	212e      	movs	r1, #46	; 0x2e
    97b4:	4822      	ldr	r0, [pc, #136]	; (9840 <mp_emit_common_id_op+0xb0>)
    97b6:	f011 fe63 	bl	1b480 <__assert_func>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    97ba:	697b      	ldr	r3, [r7, #20]
    97bc:	781b      	ldrb	r3, [r3, #0]
    97be:	2b01      	cmp	r3, #1
    97c0:	d106      	bne.n	97d0 <mp_emit_common_id_op+0x40>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_NAME);
    97c2:	68bb      	ldr	r3, [r7, #8]
    97c4:	685b      	ldr	r3, [r3, #4]
    97c6:	2200      	movs	r2, #0
    97c8:	6839      	ldr	r1, [r7, #0]
    97ca:	68f8      	ldr	r0, [r7, #12]
    97cc:	4798      	blx	r3
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    }
}
    97ce:	e02f      	b.n	9830 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    97d0:	697b      	ldr	r3, [r7, #20]
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	2b02      	cmp	r3, #2
    97d6:	d106      	bne.n	97e6 <mp_emit_common_id_op+0x56>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_GLOBAL);
    97d8:	68bb      	ldr	r3, [r7, #8]
    97da:	685b      	ldr	r3, [r3, #4]
    97dc:	2201      	movs	r2, #1
    97de:	6839      	ldr	r1, [r7, #0]
    97e0:	68f8      	ldr	r0, [r7, #12]
    97e2:	4798      	blx	r3
}
    97e4:	e024      	b.n	9830 <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    97e6:	697b      	ldr	r3, [r7, #20]
    97e8:	781b      	ldrb	r3, [r3, #0]
    97ea:	2b03      	cmp	r3, #3
    97ec:	d109      	bne.n	9802 <mp_emit_common_id_op+0x72>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    97ee:	68bb      	ldr	r3, [r7, #8]
    97f0:	681c      	ldr	r4, [r3, #0]
    97f2:	697b      	ldr	r3, [r7, #20]
    97f4:	885b      	ldrh	r3, [r3, #2]
    97f6:	461a      	mov	r2, r3
    97f8:	2300      	movs	r3, #0
    97fa:	6839      	ldr	r1, [r7, #0]
    97fc:	68f8      	ldr	r0, [r7, #12]
    97fe:	47a0      	blx	r4
}
    9800:	e016      	b.n	9830 <mp_emit_common_id_op+0xa0>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    9802:	697b      	ldr	r3, [r7, #20]
    9804:	781b      	ldrb	r3, [r3, #0]
    9806:	2b04      	cmp	r3, #4
    9808:	d009      	beq.n	981e <mp_emit_common_id_op+0x8e>
    980a:	697b      	ldr	r3, [r7, #20]
    980c:	781b      	ldrb	r3, [r3, #0]
    980e:	2b05      	cmp	r3, #5
    9810:	d005      	beq.n	981e <mp_emit_common_id_op+0x8e>
    9812:	4b0c      	ldr	r3, [pc, #48]	; (9844 <mp_emit_common_id_op+0xb4>)
    9814:	4a09      	ldr	r2, [pc, #36]	; (983c <mp_emit_common_id_op+0xac>)
    9816:	2138      	movs	r1, #56	; 0x38
    9818:	4809      	ldr	r0, [pc, #36]	; (9840 <mp_emit_common_id_op+0xb0>)
    981a:	f011 fe31 	bl	1b480 <__assert_func>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    981e:	68bb      	ldr	r3, [r7, #8]
    9820:	681c      	ldr	r4, [r3, #0]
    9822:	697b      	ldr	r3, [r7, #20]
    9824:	885b      	ldrh	r3, [r3, #2]
    9826:	461a      	mov	r2, r3
    9828:	2301      	movs	r3, #1
    982a:	6839      	ldr	r1, [r7, #0]
    982c:	68f8      	ldr	r0, [r7, #12]
    982e:	47a0      	blx	r4
}
    9830:	bf00      	nop
    9832:	371c      	adds	r7, #28
    9834:	46bd      	mov	sp, r7
    9836:	bd90      	pop	{r4, r7, pc}
    9838:	00020d80 	.word	0x00020d80
    983c:	00020de4 	.word	0x00020de4
    9840:	00020d8c 	.word	0x00020d8c
    9844:	00020da4 	.word	0x00020da4

00009848 <emit_bc_new>:
    uint16_t ct_cur_raw_code;
    #endif
    mp_uint_t *const_table;
};

emit_t *emit_bc_new(void) {
    9848:	b580      	push	{r7, lr}
    984a:	b082      	sub	sp, #8
    984c:	af00      	add	r7, sp, #0
    emit_t *emit = m_new0(emit_t, 1);
    984e:	2040      	movs	r0, #64	; 0x40
    9850:	f7f6 fd89 	bl	366 <m_malloc0>
    9854:	6078      	str	r0, [r7, #4]
    return emit;
    9856:	687b      	ldr	r3, [r7, #4]
}
    9858:	4618      	mov	r0, r3
    985a:	3708      	adds	r7, #8
    985c:	46bd      	mov	sp, r7
    985e:	bd80      	pop	{r7, pc}

00009860 <emit_bc_set_max_num_labels>:

void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    9860:	b580      	push	{r7, lr}
    9862:	b082      	sub	sp, #8
    9864:	af00      	add	r7, sp, #0
    9866:	6078      	str	r0, [r7, #4]
    9868:	6039      	str	r1, [r7, #0]
    emit->max_num_labels = max_num_labels;
    986a:	687b      	ldr	r3, [r7, #4]
    986c:	683a      	ldr	r2, [r7, #0]
    986e:	619a      	str	r2, [r3, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    9870:	687b      	ldr	r3, [r7, #4]
    9872:	699b      	ldr	r3, [r3, #24]
    9874:	009b      	lsls	r3, r3, #2
    9876:	4618      	mov	r0, r3
    9878:	f7f6 fd50 	bl	31c <m_malloc>
    987c:	4602      	mov	r2, r0
    987e:	687b      	ldr	r3, [r7, #4]
    9880:	61da      	str	r2, [r3, #28]
}
    9882:	bf00      	nop
    9884:	3708      	adds	r7, #8
    9886:	46bd      	mov	sp, r7
    9888:	bd80      	pop	{r7, pc}

0000988a <emit_bc_free>:

void emit_bc_free(emit_t *emit) {
    988a:	b580      	push	{r7, lr}
    988c:	b082      	sub	sp, #8
    988e:	af00      	add	r7, sp, #0
    9890:	6078      	str	r0, [r7, #4]
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    9892:	687b      	ldr	r3, [r7, #4]
    9894:	69db      	ldr	r3, [r3, #28]
    9896:	4618      	mov	r0, r3
    9898:	f7f6 fd9e 	bl	3d8 <m_free>
    m_del_obj(emit_t, emit);
    989c:	6878      	ldr	r0, [r7, #4]
    989e:	f7f6 fd9b 	bl	3d8 <m_free>
}
    98a2:	bf00      	nop
    98a4:	3708      	adds	r7, #8
    98a6:	46bd      	mov	sp, r7
    98a8:	bd80      	pop	{r7, pc}

000098aa <emit_write_uint>:

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    98aa:	b580      	push	{r7, lr}
    98ac:	b088      	sub	sp, #32
    98ae:	af00      	add	r7, sp, #0
    98b0:	60f8      	str	r0, [r7, #12]
    98b2:	60b9      	str	r1, [r7, #8]
    98b4:	607a      	str	r2, [r7, #4]
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    98b6:	f107 0310 	add.w	r3, r7, #16
    98ba:	3305      	adds	r3, #5
    98bc:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    98be:	69fb      	ldr	r3, [r7, #28]
    98c0:	3b01      	subs	r3, #1
    98c2:	61fb      	str	r3, [r7, #28]
    98c4:	687b      	ldr	r3, [r7, #4]
    98c6:	b2db      	uxtb	r3, r3
    98c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    98cc:	b2da      	uxtb	r2, r3
    98ce:	69fb      	ldr	r3, [r7, #28]
    98d0:	701a      	strb	r2, [r3, #0]
        val >>= 7;
    98d2:	687b      	ldr	r3, [r7, #4]
    98d4:	09db      	lsrs	r3, r3, #7
    98d6:	607b      	str	r3, [r7, #4]
    } while (val != 0);
    98d8:	687b      	ldr	r3, [r7, #4]
    98da:	2b00      	cmp	r3, #0
    98dc:	d1ef      	bne.n	98be <emit_write_uint+0x14>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    98de:	f107 0310 	add.w	r3, r7, #16
    98e2:	3305      	adds	r3, #5
    98e4:	461a      	mov	r2, r3
    98e6:	69fb      	ldr	r3, [r7, #28]
    98e8:	1ad2      	subs	r2, r2, r3
    98ea:	68bb      	ldr	r3, [r7, #8]
    98ec:	4611      	mov	r1, r2
    98ee:	68f8      	ldr	r0, [r7, #12]
    98f0:	4798      	blx	r3
    98f2:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    98f4:	e00a      	b.n	990c <emit_write_uint+0x62>
        *c++ = *p++ | 0x80;
    98f6:	69bb      	ldr	r3, [r7, #24]
    98f8:	1c5a      	adds	r2, r3, #1
    98fa:	61ba      	str	r2, [r7, #24]
    98fc:	69fa      	ldr	r2, [r7, #28]
    98fe:	1c51      	adds	r1, r2, #1
    9900:	61f9      	str	r1, [r7, #28]
    9902:	7812      	ldrb	r2, [r2, #0]
    9904:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9908:	b2d2      	uxtb	r2, r2
    990a:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    990c:	f107 0310 	add.w	r3, r7, #16
    9910:	3304      	adds	r3, #4
    9912:	69fa      	ldr	r2, [r7, #28]
    9914:	4293      	cmp	r3, r2
    9916:	d1ee      	bne.n	98f6 <emit_write_uint+0x4c>
    }
    *c = *p;
    9918:	69fb      	ldr	r3, [r7, #28]
    991a:	781a      	ldrb	r2, [r3, #0]
    991c:	69bb      	ldr	r3, [r7, #24]
    991e:	701a      	strb	r2, [r3, #0]
}
    9920:	bf00      	nop
    9922:	3720      	adds	r7, #32
    9924:	46bd      	mov	sp, r7
    9926:	bd80      	pop	{r7, pc}

00009928 <emit_get_cur_to_write_code_info>:

// all functions must go through this one to emit code info
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    9928:	b580      	push	{r7, lr}
    992a:	b084      	sub	sp, #16
    992c:	af00      	add	r7, sp, #0
    992e:	6078      	str	r0, [r7, #4]
    9930:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9932:	687b      	ldr	r3, [r7, #4]
    9934:	795b      	ldrb	r3, [r3, #5]
    9936:	2b03      	cmp	r3, #3
    9938:	d807      	bhi.n	994a <emit_get_cur_to_write_code_info+0x22>
        emit->code_info_offset += num_bytes_to_write;
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	6a1a      	ldr	r2, [r3, #32]
    993e:	683b      	ldr	r3, [r7, #0]
    9940:	441a      	add	r2, r3
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	621a      	str	r2, [r3, #32]
        return emit->dummy_data;
    9946:	687b      	ldr	r3, [r7, #4]
    9948:	e01a      	b.n	9980 <emit_get_cur_to_write_code_info+0x58>
    } else {
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    994a:	687b      	ldr	r3, [r7, #4]
    994c:	6a1a      	ldr	r2, [r3, #32]
    994e:	683b      	ldr	r3, [r7, #0]
    9950:	441a      	add	r2, r3
    9952:	687b      	ldr	r3, [r7, #4]
    9954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9956:	429a      	cmp	r2, r3
    9958:	d905      	bls.n	9966 <emit_get_cur_to_write_code_info+0x3e>
    995a:	4b0b      	ldr	r3, [pc, #44]	; (9988 <emit_get_cur_to_write_code_info+0x60>)
    995c:	4a0b      	ldr	r2, [pc, #44]	; (998c <emit_get_cur_to_write_code_info+0x64>)
    995e:	2173      	movs	r1, #115	; 0x73
    9960:	480b      	ldr	r0, [pc, #44]	; (9990 <emit_get_cur_to_write_code_info+0x68>)
    9962:	f011 fd8d 	bl	1b480 <__assert_func>
        byte *c = emit->code_base + emit->code_info_offset;
    9966:	687b      	ldr	r3, [r7, #4]
    9968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    996a:	687b      	ldr	r3, [r7, #4]
    996c:	6a1b      	ldr	r3, [r3, #32]
    996e:	4413      	add	r3, r2
    9970:	60fb      	str	r3, [r7, #12]
        emit->code_info_offset += num_bytes_to_write;
    9972:	687b      	ldr	r3, [r7, #4]
    9974:	6a1a      	ldr	r2, [r3, #32]
    9976:	683b      	ldr	r3, [r7, #0]
    9978:	441a      	add	r2, r3
    997a:	687b      	ldr	r3, [r7, #4]
    997c:	621a      	str	r2, [r3, #32]
        return c;
    997e:	68fb      	ldr	r3, [r7, #12]
    }
}
    9980:	4618      	mov	r0, r3
    9982:	3710      	adds	r7, #16
    9984:	46bd      	mov	sp, r7
    9986:	bd80      	pop	{r7, pc}
    9988:	00020dfc 	.word	0x00020dfc
    998c:	00021018 	.word	0x00021018
    9990:	00020e40 	.word	0x00020e40

00009994 <emit_write_code_info_byte>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    9994:	b580      	push	{r7, lr}
    9996:	b082      	sub	sp, #8
    9998:	af00      	add	r7, sp, #0
    999a:	6078      	str	r0, [r7, #4]
    999c:	460b      	mov	r3, r1
    999e:	70fb      	strb	r3, [r7, #3]
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    99a0:	2101      	movs	r1, #1
    99a2:	6878      	ldr	r0, [r7, #4]
    99a4:	f7ff ffc0 	bl	9928 <emit_get_cur_to_write_code_info>
    99a8:	4602      	mov	r2, r0
    99aa:	78fb      	ldrb	r3, [r7, #3]
    99ac:	7013      	strb	r3, [r2, #0]
}
    99ae:	bf00      	nop
    99b0:	3708      	adds	r7, #8
    99b2:	46bd      	mov	sp, r7
    99b4:	bd80      	pop	{r7, pc}

000099b6 <emit_write_code_info_uint>:

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    99b6:	b580      	push	{r7, lr}
    99b8:	b082      	sub	sp, #8
    99ba:	af00      	add	r7, sp, #0
    99bc:	6078      	str	r0, [r7, #4]
    99be:	6039      	str	r1, [r7, #0]
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    99c0:	683a      	ldr	r2, [r7, #0]
    99c2:	4904      	ldr	r1, [pc, #16]	; (99d4 <emit_write_code_info_uint+0x1e>)
    99c4:	6878      	ldr	r0, [r7, #4]
    99c6:	f7ff ff70 	bl	98aa <emit_write_uint>
}
    99ca:	bf00      	nop
    99cc:	3708      	adds	r7, #8
    99ce:	46bd      	mov	sp, r7
    99d0:	bd80      	pop	{r7, pc}
    99d2:	bf00      	nop
    99d4:	00009929 	.word	0x00009929

000099d8 <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    99d8:	b580      	push	{r7, lr}
    99da:	b084      	sub	sp, #16
    99dc:	af00      	add	r7, sp, #0
    99de:	6078      	str	r0, [r7, #4]
    99e0:	6039      	str	r1, [r7, #0]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    99e2:	683b      	ldr	r3, [r7, #0]
    99e4:	0c1b      	lsrs	r3, r3, #16
    99e6:	2b00      	cmp	r3, #0
    99e8:	d005      	beq.n	99f6 <emit_write_code_info_qstr+0x1e>
    99ea:	4b0c      	ldr	r3, [pc, #48]	; (9a1c <emit_write_code_info_qstr+0x44>)
    99ec:	4a0c      	ldr	r2, [pc, #48]	; (9a20 <emit_write_code_info_qstr+0x48>)
    99ee:	2184      	movs	r1, #132	; 0x84
    99f0:	480c      	ldr	r0, [pc, #48]	; (9a24 <emit_write_code_info_qstr+0x4c>)
    99f2:	f011 fd45 	bl	1b480 <__assert_func>
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    99f6:	2102      	movs	r1, #2
    99f8:	6878      	ldr	r0, [r7, #4]
    99fa:	f7ff ff95 	bl	9928 <emit_get_cur_to_write_code_info>
    99fe:	60f8      	str	r0, [r7, #12]
    c[0] = qst;
    9a00:	683b      	ldr	r3, [r7, #0]
    9a02:	b2da      	uxtb	r2, r3
    9a04:	68fb      	ldr	r3, [r7, #12]
    9a06:	701a      	strb	r2, [r3, #0]
    c[1] = qst >> 8;
    9a08:	68fb      	ldr	r3, [r7, #12]
    9a0a:	3301      	adds	r3, #1
    9a0c:	683a      	ldr	r2, [r7, #0]
    9a0e:	0a12      	lsrs	r2, r2, #8
    9a10:	b2d2      	uxtb	r2, r2
    9a12:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    #endif
}
    9a14:	bf00      	nop
    9a16:	3710      	adds	r7, #16
    9a18:	46bd      	mov	sp, r7
    9a1a:	bd80      	pop	{r7, pc}
    9a1c:	00020e54 	.word	0x00020e54
    9a20:	00021038 	.word	0x00021038
    9a24:	00020e40 	.word	0x00020e40

00009a28 <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    9a28:	b580      	push	{r7, lr}
    9a2a:	b084      	sub	sp, #16
    9a2c:	af00      	add	r7, sp, #0
    9a2e:	6078      	str	r0, [r7, #4]
    9a30:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9a32:	687b      	ldr	r3, [r7, #4]
    9a34:	795b      	ldrb	r3, [r3, #5]
    9a36:	2b03      	cmp	r3, #3
    9a38:	d807      	bhi.n	9a4a <emit_get_cur_to_write_bytecode+0x22>
        emit->bytecode_offset += num_bytes_to_write;
    9a3a:	687b      	ldr	r3, [r7, #4]
    9a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9a3e:	683b      	ldr	r3, [r7, #0]
    9a40:	441a      	add	r2, r3
    9a42:	687b      	ldr	r3, [r7, #4]
    9a44:	629a      	str	r2, [r3, #40]	; 0x28
        return emit->dummy_data;
    9a46:	687b      	ldr	r3, [r7, #4]
    9a48:	e01d      	b.n	9a86 <emit_get_cur_to_write_bytecode+0x5e>
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    9a4a:	687b      	ldr	r3, [r7, #4]
    9a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9a4e:	683b      	ldr	r3, [r7, #0]
    9a50:	441a      	add	r2, r3
    9a52:	687b      	ldr	r3, [r7, #4]
    9a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9a56:	429a      	cmp	r2, r3
    9a58:	d905      	bls.n	9a66 <emit_get_cur_to_write_bytecode+0x3e>
    9a5a:	4b0d      	ldr	r3, [pc, #52]	; (9a90 <emit_get_cur_to_write_bytecode+0x68>)
    9a5c:	4a0d      	ldr	r2, [pc, #52]	; (9a94 <emit_get_cur_to_write_bytecode+0x6c>)
    9a5e:	21b2      	movs	r1, #178	; 0xb2
    9a60:	480d      	ldr	r0, [pc, #52]	; (9a98 <emit_get_cur_to_write_bytecode+0x70>)
    9a62:	f011 fd0d 	bl	1b480 <__assert_func>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    9a66:	687b      	ldr	r3, [r7, #4]
    9a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9a6a:	687b      	ldr	r3, [r7, #4]
    9a6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    9a6e:	687b      	ldr	r3, [r7, #4]
    9a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9a72:	440b      	add	r3, r1
    9a74:	4413      	add	r3, r2
    9a76:	60fb      	str	r3, [r7, #12]
        emit->bytecode_offset += num_bytes_to_write;
    9a78:	687b      	ldr	r3, [r7, #4]
    9a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9a7c:	683b      	ldr	r3, [r7, #0]
    9a7e:	441a      	add	r2, r3
    9a80:	687b      	ldr	r3, [r7, #4]
    9a82:	629a      	str	r2, [r3, #40]	; 0x28
        return c;
    9a84:	68fb      	ldr	r3, [r7, #12]
    }
}
    9a86:	4618      	mov	r0, r3
    9a88:	3710      	adds	r7, #16
    9a8a:	46bd      	mov	sp, r7
    9a8c:	bd80      	pop	{r7, pc}
    9a8e:	bf00      	nop
    9a90:	00020e68 	.word	0x00020e68
    9a94:	00021054 	.word	0x00021054
    9a98:	00020e40 	.word	0x00020e40

00009a9c <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    9a9c:	b580      	push	{r7, lr}
    9a9e:	b084      	sub	sp, #16
    9aa0:	af00      	add	r7, sp, #0
    9aa2:	6078      	str	r0, [r7, #4]
    9aa4:	460b      	mov	r3, r1
    9aa6:	70fb      	strb	r3, [r7, #3]
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    9aa8:	2101      	movs	r1, #1
    9aaa:	6878      	ldr	r0, [r7, #4]
    9aac:	f7ff ffbc 	bl	9a28 <emit_get_cur_to_write_bytecode>
    9ab0:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9ab2:	68fb      	ldr	r3, [r7, #12]
    9ab4:	78fa      	ldrb	r2, [r7, #3]
    9ab6:	701a      	strb	r2, [r3, #0]
}
    9ab8:	bf00      	nop
    9aba:	3710      	adds	r7, #16
    9abc:	46bd      	mov	sp, r7
    9abe:	bd80      	pop	{r7, pc}

00009ac0 <emit_write_bytecode_byte_byte>:

STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    9ac0:	b580      	push	{r7, lr}
    9ac2:	b084      	sub	sp, #16
    9ac4:	af00      	add	r7, sp, #0
    9ac6:	6078      	str	r0, [r7, #4]
    9ac8:	460b      	mov	r3, r1
    9aca:	70fb      	strb	r3, [r7, #3]
    9acc:	4613      	mov	r3, r2
    9ace:	70bb      	strb	r3, [r7, #2]
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    9ad0:	2102      	movs	r1, #2
    9ad2:	6878      	ldr	r0, [r7, #4]
    9ad4:	f7ff ffa8 	bl	9a28 <emit_get_cur_to_write_bytecode>
    9ad8:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9ada:	68fb      	ldr	r3, [r7, #12]
    9adc:	78fa      	ldrb	r2, [r7, #3]
    9ade:	701a      	strb	r2, [r3, #0]
    c[1] = b2;
    9ae0:	68fb      	ldr	r3, [r7, #12]
    9ae2:	3301      	adds	r3, #1
    9ae4:	78ba      	ldrb	r2, [r7, #2]
    9ae6:	701a      	strb	r2, [r3, #0]
}
    9ae8:	bf00      	nop
    9aea:	3710      	adds	r7, #16
    9aec:	46bd      	mov	sp, r7
    9aee:	bd80      	pop	{r7, pc}

00009af0 <emit_write_bytecode_byte_int>:

// Similar to emit_write_bytecode_uint(), just some extra handling to encode sign
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    9af0:	b580      	push	{r7, lr}
    9af2:	b088      	sub	sp, #32
    9af4:	af00      	add	r7, sp, #0
    9af6:	60f8      	str	r0, [r7, #12]
    9af8:	460b      	mov	r3, r1
    9afa:	607a      	str	r2, [r7, #4]
    9afc:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b1);
    9afe:	7afb      	ldrb	r3, [r7, #11]
    9b00:	4619      	mov	r1, r3
    9b02:	68f8      	ldr	r0, [r7, #12]
    9b04:	f7ff ffca 	bl	9a9c <emit_write_bytecode_byte>

    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9b08:	f107 0310 	add.w	r3, r7, #16
    9b0c:	3305      	adds	r3, #5
    9b0e:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = num & 0x7f;
    9b10:	69fb      	ldr	r3, [r7, #28]
    9b12:	3b01      	subs	r3, #1
    9b14:	61fb      	str	r3, [r7, #28]
    9b16:	687b      	ldr	r3, [r7, #4]
    9b18:	b2db      	uxtb	r3, r3
    9b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9b1e:	b2da      	uxtb	r2, r3
    9b20:	69fb      	ldr	r3, [r7, #28]
    9b22:	701a      	strb	r2, [r3, #0]
        num >>= 7;
    9b24:	687b      	ldr	r3, [r7, #4]
    9b26:	11db      	asrs	r3, r3, #7
    9b28:	607b      	str	r3, [r7, #4]
    } while (num != 0 && num != -1);
    9b2a:	687b      	ldr	r3, [r7, #4]
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d003      	beq.n	9b38 <emit_write_bytecode_byte_int+0x48>
    9b30:	687b      	ldr	r3, [r7, #4]
    9b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9b36:	d1eb      	bne.n	9b10 <emit_write_bytecode_byte_int+0x20>
    // Make sure that highest bit we stored (mask 0x40) matches sign
    // of the number. If not, store extra byte just to encode sign
    if (num == -1 && (*p & 0x40) == 0) {
    9b38:	687b      	ldr	r3, [r7, #4]
    9b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9b3e:	d10c      	bne.n	9b5a <emit_write_bytecode_byte_int+0x6a>
    9b40:	69fb      	ldr	r3, [r7, #28]
    9b42:	781b      	ldrb	r3, [r3, #0]
    9b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b48:	2b00      	cmp	r3, #0
    9b4a:	d106      	bne.n	9b5a <emit_write_bytecode_byte_int+0x6a>
        *--p = 0x7f;
    9b4c:	69fb      	ldr	r3, [r7, #28]
    9b4e:	3b01      	subs	r3, #1
    9b50:	61fb      	str	r3, [r7, #28]
    9b52:	69fb      	ldr	r3, [r7, #28]
    9b54:	227f      	movs	r2, #127	; 0x7f
    9b56:	701a      	strb	r2, [r3, #0]
    9b58:	e00e      	b.n	9b78 <emit_write_bytecode_byte_int+0x88>
    } else if (num == 0 && (*p & 0x40) != 0) {
    9b5a:	687b      	ldr	r3, [r7, #4]
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	d10b      	bne.n	9b78 <emit_write_bytecode_byte_int+0x88>
    9b60:	69fb      	ldr	r3, [r7, #28]
    9b62:	781b      	ldrb	r3, [r3, #0]
    9b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b68:	2b00      	cmp	r3, #0
    9b6a:	d005      	beq.n	9b78 <emit_write_bytecode_byte_int+0x88>
        *--p = 0;
    9b6c:	69fb      	ldr	r3, [r7, #28]
    9b6e:	3b01      	subs	r3, #1
    9b70:	61fb      	str	r3, [r7, #28]
    9b72:	69fb      	ldr	r3, [r7, #28]
    9b74:	2200      	movs	r2, #0
    9b76:	701a      	strb	r2, [r3, #0]
    }

    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    9b78:	f107 0310 	add.w	r3, r7, #16
    9b7c:	3305      	adds	r3, #5
    9b7e:	461a      	mov	r2, r3
    9b80:	69fb      	ldr	r3, [r7, #28]
    9b82:	1ad3      	subs	r3, r2, r3
    9b84:	4619      	mov	r1, r3
    9b86:	68f8      	ldr	r0, [r7, #12]
    9b88:	f7ff ff4e 	bl	9a28 <emit_get_cur_to_write_bytecode>
    9b8c:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9b8e:	e00a      	b.n	9ba6 <emit_write_bytecode_byte_int+0xb6>
        *c++ = *p++ | 0x80;
    9b90:	69bb      	ldr	r3, [r7, #24]
    9b92:	1c5a      	adds	r2, r3, #1
    9b94:	61ba      	str	r2, [r7, #24]
    9b96:	69fa      	ldr	r2, [r7, #28]
    9b98:	1c51      	adds	r1, r2, #1
    9b9a:	61f9      	str	r1, [r7, #28]
    9b9c:	7812      	ldrb	r2, [r2, #0]
    9b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9ba2:	b2d2      	uxtb	r2, r2
    9ba4:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9ba6:	f107 0310 	add.w	r3, r7, #16
    9baa:	3304      	adds	r3, #4
    9bac:	69fa      	ldr	r2, [r7, #28]
    9bae:	4293      	cmp	r3, r2
    9bb0:	d1ee      	bne.n	9b90 <emit_write_bytecode_byte_int+0xa0>
    }
    *c = *p;
    9bb2:	69fb      	ldr	r3, [r7, #28]
    9bb4:	781a      	ldrb	r2, [r3, #0]
    9bb6:	69bb      	ldr	r3, [r7, #24]
    9bb8:	701a      	strb	r2, [r3, #0]
}
    9bba:	bf00      	nop
    9bbc:	3720      	adds	r7, #32
    9bbe:	46bd      	mov	sp, r7
    9bc0:	bd80      	pop	{r7, pc}

00009bc2 <emit_write_bytecode_byte_uint>:

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    9bc2:	b580      	push	{r7, lr}
    9bc4:	b084      	sub	sp, #16
    9bc6:	af00      	add	r7, sp, #0
    9bc8:	60f8      	str	r0, [r7, #12]
    9bca:	460b      	mov	r3, r1
    9bcc:	607a      	str	r2, [r7, #4]
    9bce:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b);
    9bd0:	7afb      	ldrb	r3, [r7, #11]
    9bd2:	4619      	mov	r1, r3
    9bd4:	68f8      	ldr	r0, [r7, #12]
    9bd6:	f7ff ff61 	bl	9a9c <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    9bda:	687a      	ldr	r2, [r7, #4]
    9bdc:	4903      	ldr	r1, [pc, #12]	; (9bec <emit_write_bytecode_byte_uint+0x2a>)
    9bde:	68f8      	ldr	r0, [r7, #12]
    9be0:	f7ff fe63 	bl	98aa <emit_write_uint>
}
    9be4:	bf00      	nop
    9be6:	3710      	adds	r7, #16
    9be8:	46bd      	mov	sp, r7
    9bea:	bd80      	pop	{r7, pc}
    9bec:	00009a29 	.word	0x00009a29

00009bf0 <emit_write_bytecode_byte_const>:

#if MICROPY_PERSISTENT_CODE
STATIC void emit_write_bytecode_byte_const(emit_t *emit, byte b, mp_uint_t n, mp_uint_t c) {
    9bf0:	b580      	push	{r7, lr}
    9bf2:	b084      	sub	sp, #16
    9bf4:	af00      	add	r7, sp, #0
    9bf6:	60f8      	str	r0, [r7, #12]
    9bf8:	607a      	str	r2, [r7, #4]
    9bfa:	603b      	str	r3, [r7, #0]
    9bfc:	460b      	mov	r3, r1
    9bfe:	72fb      	strb	r3, [r7, #11]
    if (emit->pass == MP_PASS_EMIT) {
    9c00:	68fb      	ldr	r3, [r7, #12]
    9c02:	795b      	ldrb	r3, [r3, #5]
    9c04:	2b04      	cmp	r3, #4
    9c06:	d106      	bne.n	9c16 <emit_write_bytecode_byte_const+0x26>
        emit->const_table[n] = c;
    9c08:	68fb      	ldr	r3, [r7, #12]
    9c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9c0c:	687b      	ldr	r3, [r7, #4]
    9c0e:	009b      	lsls	r3, r3, #2
    9c10:	4413      	add	r3, r2
    9c12:	683a      	ldr	r2, [r7, #0]
    9c14:	601a      	str	r2, [r3, #0]
    }
    emit_write_bytecode_byte_uint(emit, b, n);
    9c16:	7afb      	ldrb	r3, [r7, #11]
    9c18:	687a      	ldr	r2, [r7, #4]
    9c1a:	4619      	mov	r1, r3
    9c1c:	68f8      	ldr	r0, [r7, #12]
    9c1e:	f7ff ffd0 	bl	9bc2 <emit_write_bytecode_byte_uint>
}
    9c22:	bf00      	nop
    9c24:	3710      	adds	r7, #16
    9c26:	46bd      	mov	sp, r7
    9c28:	bd80      	pop	{r7, pc}

00009c2a <emit_write_bytecode_byte_qstr>:
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    9c2a:	b580      	push	{r7, lr}
    9c2c:	b086      	sub	sp, #24
    9c2e:	af00      	add	r7, sp, #0
    9c30:	60f8      	str	r0, [r7, #12]
    9c32:	460b      	mov	r3, r1
    9c34:	607a      	str	r2, [r7, #4]
    9c36:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9c38:	687b      	ldr	r3, [r7, #4]
    9c3a:	0c1b      	lsrs	r3, r3, #16
    9c3c:	2b00      	cmp	r3, #0
    9c3e:	d005      	beq.n	9c4c <emit_write_bytecode_byte_qstr+0x22>
    9c40:	4b0e      	ldr	r3, [pc, #56]	; (9c7c <emit_write_bytecode_byte_qstr+0x52>)
    9c42:	4a0f      	ldr	r2, [pc, #60]	; (9c80 <emit_write_bytecode_byte_qstr+0x56>)
    9c44:	21ef      	movs	r1, #239	; 0xef
    9c46:	480f      	ldr	r0, [pc, #60]	; (9c84 <emit_write_bytecode_byte_qstr+0x5a>)
    9c48:	f011 fc1a 	bl	1b480 <__assert_func>
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9c4c:	2103      	movs	r1, #3
    9c4e:	68f8      	ldr	r0, [r7, #12]
    9c50:	f7ff feea 	bl	9a28 <emit_get_cur_to_write_bytecode>
    9c54:	6178      	str	r0, [r7, #20]
    c[0] = b;
    9c56:	697b      	ldr	r3, [r7, #20]
    9c58:	7afa      	ldrb	r2, [r7, #11]
    9c5a:	701a      	strb	r2, [r3, #0]
    c[1] = qst;
    9c5c:	697b      	ldr	r3, [r7, #20]
    9c5e:	3301      	adds	r3, #1
    9c60:	687a      	ldr	r2, [r7, #4]
    9c62:	b2d2      	uxtb	r2, r2
    9c64:	701a      	strb	r2, [r3, #0]
    c[2] = qst >> 8;
    9c66:	697b      	ldr	r3, [r7, #20]
    9c68:	3302      	adds	r3, #2
    9c6a:	687a      	ldr	r2, [r7, #4]
    9c6c:	0a12      	lsrs	r2, r2, #8
    9c6e:	b2d2      	uxtb	r2, r2
    9c70:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    #endif
}
    9c72:	bf00      	nop
    9c74:	3718      	adds	r7, #24
    9c76:	46bd      	mov	sp, r7
    9c78:	bd80      	pop	{r7, pc}
    9c7a:	bf00      	nop
    9c7c:	00020e54 	.word	0x00020e54
    9c80:	00021074 	.word	0x00021074
    9c84:	00020e40 	.word	0x00020e40

00009c88 <emit_write_bytecode_byte_obj>:

STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    9c88:	b580      	push	{r7, lr}
    9c8a:	b084      	sub	sp, #16
    9c8c:	af00      	add	r7, sp, #0
    9c8e:	60f8      	str	r0, [r7, #12]
    9c90:	460b      	mov	r3, r1
    9c92:	607a      	str	r2, [r7, #4]
    9c94:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9c96:	68fb      	ldr	r3, [r7, #12]
    9c98:	68db      	ldr	r3, [r3, #12]
    9c9a:	8b9b      	ldrh	r3, [r3, #28]
    9c9c:	461a      	mov	r2, r3
    9c9e:	68fb      	ldr	r3, [r7, #12]
    9ca0:	68db      	ldr	r3, [r3, #12]
    9ca2:	8bdb      	ldrh	r3, [r3, #30]
    9ca4:	441a      	add	r2, r3
        + emit->ct_cur_obj++, (mp_uint_t)obj);
    9ca6:	68fb      	ldr	r3, [r7, #12]
    9ca8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9caa:	1c59      	adds	r1, r3, #1
    9cac:	b288      	uxth	r0, r1
    9cae:	68f9      	ldr	r1, [r7, #12]
    9cb0:	8688      	strh	r0, [r1, #52]	; 0x34
    9cb2:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9cb4:	461a      	mov	r2, r3
    9cb6:	687b      	ldr	r3, [r7, #4]
    9cb8:	7af9      	ldrb	r1, [r7, #11]
    9cba:	68f8      	ldr	r0, [r7, #12]
    9cbc:	f7ff ff98 	bl	9bf0 <emit_write_bytecode_byte_const>
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    *c = obj;
    #endif
}
    9cc0:	bf00      	nop
    9cc2:	3710      	adds	r7, #16
    9cc4:	46bd      	mov	sp, r7
    9cc6:	bd80      	pop	{r7, pc}

00009cc8 <emit_write_bytecode_byte_raw_code>:

STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    9cc8:	b580      	push	{r7, lr}
    9cca:	b084      	sub	sp, #16
    9ccc:	af00      	add	r7, sp, #0
    9cce:	60f8      	str	r0, [r7, #12]
    9cd0:	460b      	mov	r3, r1
    9cd2:	607a      	str	r2, [r7, #4]
    9cd4:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9cd6:	68fb      	ldr	r3, [r7, #12]
    9cd8:	68db      	ldr	r3, [r3, #12]
    9cda:	8b9b      	ldrh	r3, [r3, #28]
    9cdc:	461a      	mov	r2, r3
    9cde:	68fb      	ldr	r3, [r7, #12]
    9ce0:	68db      	ldr	r3, [r3, #12]
    9ce2:	8bdb      	ldrh	r3, [r3, #30]
    9ce4:	4413      	add	r3, r2
        + emit->ct_num_obj + emit->ct_cur_raw_code++, (mp_uint_t)(uintptr_t)rc);
    9ce6:	68fa      	ldr	r2, [r7, #12]
    9ce8:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    9cea:	441a      	add	r2, r3
    9cec:	68fb      	ldr	r3, [r7, #12]
    9cee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    9cf0:	1c59      	adds	r1, r3, #1
    9cf2:	b288      	uxth	r0, r1
    9cf4:	68f9      	ldr	r1, [r7, #12]
    9cf6:	8708      	strh	r0, [r1, #56]	; 0x38
    9cf8:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9cfa:	461a      	mov	r2, r3
    9cfc:	687b      	ldr	r3, [r7, #4]
    9cfe:	7af9      	ldrb	r1, [r7, #11]
    9d00:	68f8      	ldr	r0, [r7, #12]
    9d02:	f7ff ff75 	bl	9bf0 <emit_write_bytecode_byte_const>
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(void*)));
    *c = rc;
    #endif
}
    9d06:	bf00      	nop
    9d08:	3710      	adds	r7, #16
    9d0a:	46bd      	mov	sp, r7
    9d0c:	bd80      	pop	{r7, pc}

00009d0e <emit_write_bytecode_byte_unsigned_label>:

// unsigned labels are relative to ip following this instruction, stored as 16 bits
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    9d0e:	b580      	push	{r7, lr}
    9d10:	b086      	sub	sp, #24
    9d12:	af00      	add	r7, sp, #0
    9d14:	60f8      	str	r0, [r7, #12]
    9d16:	460b      	mov	r3, r1
    9d18:	607a      	str	r2, [r7, #4]
    9d1a:	72fb      	strb	r3, [r7, #11]
    mp_uint_t bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9d1c:	68fb      	ldr	r3, [r7, #12]
    9d1e:	795b      	ldrb	r3, [r3, #5]
    9d20:	2b03      	cmp	r3, #3
    9d22:	d802      	bhi.n	9d2a <emit_write_bytecode_byte_unsigned_label+0x1c>
        bytecode_offset = 0;
    9d24:	2300      	movs	r3, #0
    9d26:	617b      	str	r3, [r7, #20]
    9d28:	e00a      	b.n	9d40 <emit_write_bytecode_byte_unsigned_label+0x32>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    9d2a:	68fb      	ldr	r3, [r7, #12]
    9d2c:	69da      	ldr	r2, [r3, #28]
    9d2e:	687b      	ldr	r3, [r7, #4]
    9d30:	009b      	lsls	r3, r3, #2
    9d32:	4413      	add	r3, r2
    9d34:	681a      	ldr	r2, [r3, #0]
    9d36:	68fb      	ldr	r3, [r7, #12]
    9d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9d3a:	1ad3      	subs	r3, r2, r3
    9d3c:	3b03      	subs	r3, #3
    9d3e:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9d40:	2103      	movs	r1, #3
    9d42:	68f8      	ldr	r0, [r7, #12]
    9d44:	f7ff fe70 	bl	9a28 <emit_get_cur_to_write_bytecode>
    9d48:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9d4a:	693b      	ldr	r3, [r7, #16]
    9d4c:	7afa      	ldrb	r2, [r7, #11]
    9d4e:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9d50:	693b      	ldr	r3, [r7, #16]
    9d52:	3301      	adds	r3, #1
    9d54:	697a      	ldr	r2, [r7, #20]
    9d56:	b2d2      	uxtb	r2, r2
    9d58:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9d5a:	693b      	ldr	r3, [r7, #16]
    9d5c:	3302      	adds	r3, #2
    9d5e:	697a      	ldr	r2, [r7, #20]
    9d60:	0a12      	lsrs	r2, r2, #8
    9d62:	b2d2      	uxtb	r2, r2
    9d64:	701a      	strb	r2, [r3, #0]
}
    9d66:	bf00      	nop
    9d68:	3718      	adds	r7, #24
    9d6a:	46bd      	mov	sp, r7
    9d6c:	bd80      	pop	{r7, pc}

00009d6e <emit_write_bytecode_byte_signed_label>:

// signed labels are relative to ip following this instruction, stored as 16 bits, in excess
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    9d6e:	b580      	push	{r7, lr}
    9d70:	b086      	sub	sp, #24
    9d72:	af00      	add	r7, sp, #0
    9d74:	60f8      	str	r0, [r7, #12]
    9d76:	460b      	mov	r3, r1
    9d78:	607a      	str	r2, [r7, #4]
    9d7a:	72fb      	strb	r3, [r7, #11]
    int bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9d7c:	68fb      	ldr	r3, [r7, #12]
    9d7e:	795b      	ldrb	r3, [r3, #5]
    9d80:	2b03      	cmp	r3, #3
    9d82:	d802      	bhi.n	9d8a <emit_write_bytecode_byte_signed_label+0x1c>
        bytecode_offset = 0;
    9d84:	2300      	movs	r3, #0
    9d86:	617b      	str	r3, [r7, #20]
    9d88:	e00c      	b.n	9da4 <emit_write_bytecode_byte_signed_label+0x36>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    9d8a:	68fb      	ldr	r3, [r7, #12]
    9d8c:	69da      	ldr	r2, [r3, #28]
    9d8e:	687b      	ldr	r3, [r7, #4]
    9d90:	009b      	lsls	r3, r3, #2
    9d92:	4413      	add	r3, r2
    9d94:	681a      	ldr	r2, [r3, #0]
    9d96:	68fb      	ldr	r3, [r7, #12]
    9d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9d9a:	1ad3      	subs	r3, r2, r3
    9d9c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    9da0:	337d      	adds	r3, #125	; 0x7d
    9da2:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9da4:	2103      	movs	r1, #3
    9da6:	68f8      	ldr	r0, [r7, #12]
    9da8:	f7ff fe3e 	bl	9a28 <emit_get_cur_to_write_bytecode>
    9dac:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9dae:	693b      	ldr	r3, [r7, #16]
    9db0:	7afa      	ldrb	r2, [r7, #11]
    9db2:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9db4:	693b      	ldr	r3, [r7, #16]
    9db6:	3301      	adds	r3, #1
    9db8:	697a      	ldr	r2, [r7, #20]
    9dba:	b2d2      	uxtb	r2, r2
    9dbc:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9dbe:	693b      	ldr	r3, [r7, #16]
    9dc0:	3302      	adds	r3, #2
    9dc2:	697a      	ldr	r2, [r7, #20]
    9dc4:	1212      	asrs	r2, r2, #8
    9dc6:	b2d2      	uxtb	r2, r2
    9dc8:	701a      	strb	r2, [r3, #0]
}
    9dca:	bf00      	nop
    9dcc:	3718      	adds	r7, #24
    9dce:	46bd      	mov	sp, r7
    9dd0:	bd80      	pop	{r7, pc}

00009dd2 <mp_emit_bc_start_pass>:

void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    9dd2:	b580      	push	{r7, lr}
    9dd4:	b08c      	sub	sp, #48	; 0x30
    9dd6:	af00      	add	r7, sp, #0
    9dd8:	60f8      	str	r0, [r7, #12]
    9dda:	60b9      	str	r1, [r7, #8]
    9ddc:	607a      	str	r2, [r7, #4]
    emit->pass = pass;
    9dde:	68bb      	ldr	r3, [r7, #8]
    9de0:	b2da      	uxtb	r2, r3
    9de2:	68fb      	ldr	r3, [r7, #12]
    9de4:	715a      	strb	r2, [r3, #5]
    emit->stack_size = 0;
    9de6:	68fb      	ldr	r3, [r7, #12]
    9de8:	2200      	movs	r2, #0
    9dea:	609a      	str	r2, [r3, #8]
    emit->last_emit_was_return_value = false;
    9dec:	68fb      	ldr	r3, [r7, #12]
    9dee:	2200      	movs	r2, #0
    9df0:	719a      	strb	r2, [r3, #6]
    emit->scope = scope;
    9df2:	68fb      	ldr	r3, [r7, #12]
    9df4:	687a      	ldr	r2, [r7, #4]
    9df6:	60da      	str	r2, [r3, #12]
    emit->last_source_line_offset = 0;
    9df8:	68fb      	ldr	r3, [r7, #12]
    9dfa:	2200      	movs	r2, #0
    9dfc:	611a      	str	r2, [r3, #16]
    emit->last_source_line = 1;
    9dfe:	68fb      	ldr	r3, [r7, #12]
    9e00:	2201      	movs	r2, #1
    9e02:	615a      	str	r2, [r3, #20]
    #ifndef NDEBUG
    // With debugging enabled labels are checked for unique assignment
    if (pass < MP_PASS_EMIT && emit->label_offsets != NULL) {
    9e04:	68bb      	ldr	r3, [r7, #8]
    9e06:	2b03      	cmp	r3, #3
    9e08:	d80d      	bhi.n	9e26 <mp_emit_bc_start_pass+0x54>
    9e0a:	68fb      	ldr	r3, [r7, #12]
    9e0c:	69db      	ldr	r3, [r3, #28]
    9e0e:	2b00      	cmp	r3, #0
    9e10:	d009      	beq.n	9e26 <mp_emit_bc_start_pass+0x54>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    9e12:	68fb      	ldr	r3, [r7, #12]
    9e14:	69d8      	ldr	r0, [r3, #28]
    9e16:	68fb      	ldr	r3, [r7, #12]
    9e18:	699b      	ldr	r3, [r3, #24]
    9e1a:	009b      	lsls	r3, r3, #2
    9e1c:	461a      	mov	r2, r3
    9e1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9e22:	f012 fef3 	bl	1cc0c <memset>
    }
    #endif
    emit->bytecode_offset = 0;
    9e26:	68fb      	ldr	r3, [r7, #12]
    9e28:	2200      	movs	r2, #0
    9e2a:	629a      	str	r2, [r3, #40]	; 0x28
    emit->code_info_offset = 0;
    9e2c:	68fb      	ldr	r3, [r7, #12]
    9e2e:	2200      	movs	r2, #0
    9e30:	621a      	str	r2, [r3, #32]

    // Write local state size and exception stack size.
    {
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    9e32:	687b      	ldr	r3, [r7, #4]
    9e34:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9e36:	461a      	mov	r2, r3
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9e3c:	4413      	add	r3, r2
    9e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (n_state == 0) {
    9e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9e42:	2b00      	cmp	r3, #0
    9e44:	d101      	bne.n	9e4a <mp_emit_bc_start_pass+0x78>
            // Need at least 1 entry in the state, in the case an exception is
            // propagated through this function, the exception is returned in
            // the highest slot in the state (fastn[0], see vm.c).
            n_state = 1;
    9e46:	2301      	movs	r3, #1
    9e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        emit_write_code_info_uint(emit, n_state);
    9e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9e4c:	68f8      	ldr	r0, [r7, #12]
    9e4e:	f7ff fdb2 	bl	99b6 <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    9e52:	687b      	ldr	r3, [r7, #4]
    9e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    9e56:	4619      	mov	r1, r3
    9e58:	68f8      	ldr	r0, [r7, #12]
    9e5a:	f7ff fdac 	bl	99b6 <emit_write_code_info_uint>
    }

    // Write scope flags and number of arguments.
    // TODO check that num args all fit in a byte
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    9e5e:	68fb      	ldr	r3, [r7, #12]
    9e60:	68db      	ldr	r3, [r3, #12]
    9e62:	8b1b      	ldrh	r3, [r3, #24]
    9e64:	b2db      	uxtb	r3, r3
    9e66:	4619      	mov	r1, r3
    9e68:	68f8      	ldr	r0, [r7, #12]
    9e6a:	f7ff fd93 	bl	9994 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    9e6e:	68fb      	ldr	r3, [r7, #12]
    9e70:	68db      	ldr	r3, [r3, #12]
    9e72:	8b9b      	ldrh	r3, [r3, #28]
    9e74:	b2db      	uxtb	r3, r3
    9e76:	4619      	mov	r1, r3
    9e78:	68f8      	ldr	r0, [r7, #12]
    9e7a:	f7ff fd8b 	bl	9994 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    9e7e:	68fb      	ldr	r3, [r7, #12]
    9e80:	68db      	ldr	r3, [r3, #12]
    9e82:	8bdb      	ldrh	r3, [r3, #30]
    9e84:	b2db      	uxtb	r3, r3
    9e86:	4619      	mov	r1, r3
    9e88:	68f8      	ldr	r0, [r7, #12]
    9e8a:	f7ff fd83 	bl	9994 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    9e8e:	68fb      	ldr	r3, [r7, #12]
    9e90:	68db      	ldr	r3, [r3, #12]
    9e92:	8c1b      	ldrh	r3, [r3, #32]
    9e94:	b2db      	uxtb	r3, r3
    9e96:	4619      	mov	r1, r3
    9e98:	68f8      	ldr	r0, [r7, #12]
    9e9a:	f7ff fd7b 	bl	9994 <emit_write_code_info_byte>

    // Write size of the rest of the code info.  We don't know how big this
    // variable uint will be on the MP_PASS_CODE_SIZE pass so we reserve 2 bytes
    // for it and hope that is enough!  TODO assert this or something.
    if (pass == MP_PASS_EMIT) {
    9e9e:	68bb      	ldr	r3, [r7, #8]
    9ea0:	2b04      	cmp	r3, #4
    9ea2:	d109      	bne.n	9eb8 <mp_emit_bc_start_pass+0xe6>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    9ea4:	68fb      	ldr	r3, [r7, #12]
    9ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9ea8:	68fb      	ldr	r3, [r7, #12]
    9eaa:	6a1b      	ldr	r3, [r3, #32]
    9eac:	1ad3      	subs	r3, r2, r3
    9eae:	4619      	mov	r1, r3
    9eb0:	68f8      	ldr	r0, [r7, #12]
    9eb2:	f7ff fd80 	bl	99b6 <emit_write_code_info_uint>
    9eb6:	e003      	b.n	9ec0 <mp_emit_bc_start_pass+0xee>
    } else  {
        emit_get_cur_to_write_code_info(emit, 2);
    9eb8:	2102      	movs	r1, #2
    9eba:	68f8      	ldr	r0, [r7, #12]
    9ebc:	f7ff fd34 	bl	9928 <emit_get_cur_to_write_code_info>
    }

    // Write the name and source file of this function.
    emit_write_code_info_qstr(emit, scope->simple_name);
    9ec0:	687b      	ldr	r3, [r7, #4]
    9ec2:	8adb      	ldrh	r3, [r3, #22]
    9ec4:	4619      	mov	r1, r3
    9ec6:	68f8      	ldr	r0, [r7, #12]
    9ec8:	f7ff fd86 	bl	99d8 <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    9ecc:	687b      	ldr	r3, [r7, #4]
    9ece:	8a9b      	ldrh	r3, [r3, #20]
    9ed0:	4619      	mov	r1, r3
    9ed2:	68f8      	ldr	r0, [r7, #12]
    9ed4:	f7ff fd80 	bl	99d8 <emit_write_code_info_qstr>

    // bytecode prelude: initialise closed over variables
    for (int i = 0; i < scope->id_info_len; i++) {
    9ed8:	2300      	movs	r3, #0
    9eda:	62bb      	str	r3, [r7, #40]	; 0x28
    9edc:	e01e      	b.n	9f1c <mp_emit_bc_start_pass+0x14a>
        id_info_t *id = &scope->id_info[i];
    9ede:	687b      	ldr	r3, [r7, #4]
    9ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ee4:	00db      	lsls	r3, r3, #3
    9ee6:	4413      	add	r3, r2
    9ee8:	61bb      	str	r3, [r7, #24]
        if (id->kind == ID_INFO_KIND_CELL) {
    9eea:	69bb      	ldr	r3, [r7, #24]
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	2b04      	cmp	r3, #4
    9ef0:	d111      	bne.n	9f16 <mp_emit_bc_start_pass+0x144>
            assert(id->local_num < 255);
    9ef2:	69bb      	ldr	r3, [r7, #24]
    9ef4:	885b      	ldrh	r3, [r3, #2]
    9ef6:	2bfe      	cmp	r3, #254	; 0xfe
    9ef8:	d906      	bls.n	9f08 <mp_emit_bc_start_pass+0x136>
    9efa:	4b32      	ldr	r3, [pc, #200]	; (9fc4 <mp_emit_bc_start_pass+0x1f2>)
    9efc:	4a32      	ldr	r2, [pc, #200]	; (9fc8 <mp_emit_bc_start_pass+0x1f6>)
    9efe:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    9f02:	4832      	ldr	r0, [pc, #200]	; (9fcc <mp_emit_bc_start_pass+0x1fa>)
    9f04:	f011 fabc 	bl	1b480 <__assert_func>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    9f08:	69bb      	ldr	r3, [r7, #24]
    9f0a:	885b      	ldrh	r3, [r3, #2]
    9f0c:	b2db      	uxtb	r3, r3
    9f0e:	4619      	mov	r1, r3
    9f10:	68f8      	ldr	r0, [r7, #12]
    9f12:	f7ff fdc3 	bl	9a9c <emit_write_bytecode_byte>
    for (int i = 0; i < scope->id_info_len; i++) {
    9f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f18:	3301      	adds	r3, #1
    9f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    9f1c:	687b      	ldr	r3, [r7, #4]
    9f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9f20:	461a      	mov	r2, r3
    9f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9f24:	429a      	cmp	r2, r3
    9f26:	dcda      	bgt.n	9ede <mp_emit_bc_start_pass+0x10c>
        }
    }
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    9f28:	21ff      	movs	r1, #255	; 0xff
    9f2a:	68f8      	ldr	r0, [r7, #12]
    9f2c:	f7ff fdb6 	bl	9a9c <emit_write_bytecode_byte>

    #if MICROPY_PERSISTENT_CODE
    emit->ct_cur_obj = 0;
    9f30:	68fb      	ldr	r3, [r7, #12]
    9f32:	2200      	movs	r2, #0
    9f34:	869a      	strh	r2, [r3, #52]	; 0x34
    emit->ct_cur_raw_code = 0;
    9f36:	68fb      	ldr	r3, [r7, #12]
    9f38:	2200      	movs	r2, #0
    9f3a:	871a      	strh	r2, [r3, #56]	; 0x38
    #endif

    if (pass == MP_PASS_EMIT) {
    9f3c:	68bb      	ldr	r3, [r7, #8]
    9f3e:	2b04      	cmp	r3, #4
    9f40:	d13c      	bne.n	9fbc <mp_emit_bc_start_pass+0x1ea>
        // parameter we use "*" as its name (since no argument can ever be named
        // "*").  We could use a blank qstr but "*" is better for debugging.
        // Note: there is some wasted RAM here for the case of storing a qstr
        // for each closed-over variable, and maybe there is a better way to do
        // it, but that would require changes to mp_setup_code_state.
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    9f42:	2300      	movs	r3, #0
    9f44:	627b      	str	r3, [r7, #36]	; 0x24
    9f46:	e030      	b.n	9faa <mp_emit_bc_start_pass+0x1d8>
            qstr qst = MP_QSTR__star_;
    9f48:	2327      	movs	r3, #39	; 0x27
    9f4a:	623b      	str	r3, [r7, #32]
            for (int j = 0; j < scope->id_info_len; ++j) {
    9f4c:	2300      	movs	r3, #0
    9f4e:	61fb      	str	r3, [r7, #28]
    9f50:	e018      	b.n	9f84 <mp_emit_bc_start_pass+0x1b2>
                id_info_t *id = &scope->id_info[j];
    9f52:	687b      	ldr	r3, [r7, #4]
    9f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f56:	69fb      	ldr	r3, [r7, #28]
    9f58:	00db      	lsls	r3, r3, #3
    9f5a:	4413      	add	r3, r2
    9f5c:	617b      	str	r3, [r7, #20]
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    9f5e:	697b      	ldr	r3, [r7, #20]
    9f60:	785b      	ldrb	r3, [r3, #1]
    9f62:	f003 0301 	and.w	r3, r3, #1
    9f66:	2b00      	cmp	r3, #0
    9f68:	d009      	beq.n	9f7e <mp_emit_bc_start_pass+0x1ac>
    9f6a:	697b      	ldr	r3, [r7, #20]
    9f6c:	885b      	ldrh	r3, [r3, #2]
    9f6e:	461a      	mov	r2, r3
    9f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f72:	429a      	cmp	r2, r3
    9f74:	d103      	bne.n	9f7e <mp_emit_bc_start_pass+0x1ac>
                    qst = id->qst;
    9f76:	697b      	ldr	r3, [r7, #20]
    9f78:	685b      	ldr	r3, [r3, #4]
    9f7a:	623b      	str	r3, [r7, #32]
                    break;
    9f7c:	e008      	b.n	9f90 <mp_emit_bc_start_pass+0x1be>
            for (int j = 0; j < scope->id_info_len; ++j) {
    9f7e:	69fb      	ldr	r3, [r7, #28]
    9f80:	3301      	adds	r3, #1
    9f82:	61fb      	str	r3, [r7, #28]
    9f84:	687b      	ldr	r3, [r7, #4]
    9f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9f88:	461a      	mov	r2, r3
    9f8a:	69fb      	ldr	r3, [r7, #28]
    9f8c:	429a      	cmp	r2, r3
    9f8e:	dce0      	bgt.n	9f52 <mp_emit_bc_start_pass+0x180>
                }
            }
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    9f90:	68fb      	ldr	r3, [r7, #12]
    9f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f96:	009b      	lsls	r3, r3, #2
    9f98:	4413      	add	r3, r2
    9f9a:	6a3a      	ldr	r2, [r7, #32]
    9f9c:	0092      	lsls	r2, r2, #2
    9f9e:	f042 0202 	orr.w	r2, r2, #2
    9fa2:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    9fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9fa6:	3301      	adds	r3, #1
    9fa8:	627b      	str	r3, [r7, #36]	; 0x24
    9faa:	687b      	ldr	r3, [r7, #4]
    9fac:	8b9b      	ldrh	r3, [r3, #28]
    9fae:	461a      	mov	r2, r3
    9fb0:	687b      	ldr	r3, [r7, #4]
    9fb2:	8bdb      	ldrh	r3, [r3, #30]
    9fb4:	441a      	add	r2, r3
    9fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9fb8:	429a      	cmp	r2, r3
    9fba:	dcc5      	bgt.n	9f48 <mp_emit_bc_start_pass+0x176>
        }
    }
}
    9fbc:	bf00      	nop
    9fbe:	3730      	adds	r7, #48	; 0x30
    9fc0:	46bd      	mov	sp, r7
    9fc2:	bd80      	pop	{r7, pc}
    9fc4:	00020eac 	.word	0x00020eac
    9fc8:	00021094 	.word	0x00021094
    9fcc:	00020e40 	.word	0x00020e40

00009fd0 <mp_emit_bc_end_pass>:

void mp_emit_bc_end_pass(emit_t *emit) {
    9fd0:	b580      	push	{r7, lr}
    9fd2:	b082      	sub	sp, #8
    9fd4:	af00      	add	r7, sp, #0
    9fd6:	6078      	str	r0, [r7, #4]
    if (emit->pass == MP_PASS_SCOPE) {
    9fd8:	687b      	ldr	r3, [r7, #4]
    9fda:	795b      	ldrb	r3, [r3, #5]
    9fdc:	2b01      	cmp	r3, #1
    9fde:	d061      	beq.n	a0a4 <mp_emit_bc_end_pass+0xd4>
        return;
    }

    // check stack is back to zero size
    assert(emit->stack_size == 0);
    9fe0:	687b      	ldr	r3, [r7, #4]
    9fe2:	689b      	ldr	r3, [r3, #8]
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d006      	beq.n	9ff6 <mp_emit_bc_end_pass+0x26>
    9fe8:	4b30      	ldr	r3, [pc, #192]	; (a0ac <mp_emit_bc_end_pass+0xdc>)
    9fea:	4a31      	ldr	r2, [pc, #196]	; (a0b0 <mp_emit_bc_end_pass+0xe0>)
    9fec:	f240 1199 	movw	r1, #409	; 0x199
    9ff0:	4830      	ldr	r0, [pc, #192]	; (a0b4 <mp_emit_bc_end_pass+0xe4>)
    9ff2:	f011 fa45 	bl	1b480 <__assert_func>

    emit_write_code_info_byte(emit, 0); // end of line number info
    9ff6:	2100      	movs	r1, #0
    9ff8:	6878      	ldr	r0, [r7, #4]
    9ffa:	f7ff fccb 	bl	9994 <emit_write_code_info_byte>

    #if MICROPY_PERSISTENT_CODE
    assert(emit->pass <= MP_PASS_STACK_SIZE || (emit->ct_num_obj == emit->ct_cur_obj));
    9ffe:	687b      	ldr	r3, [r7, #4]
    a000:	795b      	ldrb	r3, [r3, #5]
    a002:	2b02      	cmp	r3, #2
    a004:	d90c      	bls.n	a020 <mp_emit_bc_end_pass+0x50>
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    a00a:	687b      	ldr	r3, [r7, #4]
    a00c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a00e:	429a      	cmp	r2, r3
    a010:	d006      	beq.n	a020 <mp_emit_bc_end_pass+0x50>
    a012:	4b29      	ldr	r3, [pc, #164]	; (a0b8 <mp_emit_bc_end_pass+0xe8>)
    a014:	4a26      	ldr	r2, [pc, #152]	; (a0b0 <mp_emit_bc_end_pass+0xe0>)
    a016:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    a01a:	4826      	ldr	r0, [pc, #152]	; (a0b4 <mp_emit_bc_end_pass+0xe4>)
    a01c:	f011 fa30 	bl	1b480 <__assert_func>
    emit->ct_num_obj = emit->ct_cur_obj;
    a020:	687b      	ldr	r3, [r7, #4]
    a022:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    a024:	687b      	ldr	r3, [r7, #4]
    a026:	86da      	strh	r2, [r3, #54]	; 0x36
    #endif

    if (emit->pass == MP_PASS_CODE_SIZE) {
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	795b      	ldrb	r3, [r3, #5]
    a02c:	2b03      	cmp	r3, #3
    a02e:	d128      	bne.n	a082 <mp_emit_bc_end_pass+0xb2>
        // so bytecode is aligned
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
        #endif

        // calculate size of total code-info + bytecode, in bytes
        emit->code_info_size = emit->code_info_offset;
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	6a1a      	ldr	r2, [r3, #32]
    a034:	687b      	ldr	r3, [r7, #4]
    a036:	625a      	str	r2, [r3, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    a038:	687b      	ldr	r3, [r7, #4]
    a03a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a03c:	687b      	ldr	r3, [r7, #4]
    a03e:	62da      	str	r2, [r3, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    a040:	687b      	ldr	r3, [r7, #4]
    a042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a044:	687b      	ldr	r3, [r7, #4]
    a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a048:	4413      	add	r3, r2
    a04a:	4618      	mov	r0, r3
    a04c:	f7f6 f98b 	bl	366 <m_malloc0>
    a050:	4602      	mov	r2, r0
    a052:	687b      	ldr	r3, [r7, #4]
    a054:	631a      	str	r2, [r3, #48]	; 0x30

        #if MICROPY_PERSISTENT_CODE
        emit->const_table = m_new0(mp_uint_t,
    a056:	687b      	ldr	r3, [r7, #4]
    a058:	68db      	ldr	r3, [r3, #12]
    a05a:	8b9b      	ldrh	r3, [r3, #28]
    a05c:	461a      	mov	r2, r3
    a05e:	687b      	ldr	r3, [r7, #4]
    a060:	68db      	ldr	r3, [r3, #12]
    a062:	8bdb      	ldrh	r3, [r3, #30]
    a064:	4413      	add	r3, r2
    a066:	687a      	ldr	r2, [r7, #4]
    a068:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    a06a:	4413      	add	r3, r2
    a06c:	687a      	ldr	r2, [r7, #4]
    a06e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    a070:	4413      	add	r3, r2
    a072:	009b      	lsls	r3, r3, #2
    a074:	4618      	mov	r0, r3
    a076:	f7f6 f976 	bl	366 <m_malloc0>
    a07a:	4602      	mov	r2, r0
    a07c:	687b      	ldr	r3, [r7, #4]
    a07e:	63da      	str	r2, [r3, #60]	; 0x3c
    a080:	e011      	b.n	a0a6 <mp_emit_bc_end_pass+0xd6>
        #else
        emit->const_table = m_new0(mp_uint_t,
            emit->scope->num_pos_args + emit->scope->num_kwonly_args);
        #endif

    } else if (emit->pass == MP_PASS_EMIT) {
    a082:	687b      	ldr	r3, [r7, #4]
    a084:	795b      	ldrb	r3, [r3, #5]
    a086:	2b04      	cmp	r3, #4
    a088:	d10d      	bne.n	a0a6 <mp_emit_bc_end_pass+0xd6>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a08a:	687b      	ldr	r3, [r7, #4]
    a08c:	68db      	ldr	r3, [r3, #12]
    a08e:	6918      	ldr	r0, [r3, #16]
    a090:	687b      	ldr	r3, [r7, #4]
    a092:	6b19      	ldr	r1, [r3, #48]	; 0x30
            #if MICROPY_PERSISTENT_CODE_SAVE || MICROPY_DEBUG_PRINTERS
            emit->code_info_size + emit->bytecode_size,
            #endif
            emit->const_table,
    a094:	687b      	ldr	r3, [r7, #4]
    a096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            #if MICROPY_PERSISTENT_CODE_SAVE
            emit->ct_cur_obj, emit->ct_cur_raw_code,
            #endif
            emit->scope->scope_flags);
    a098:	687b      	ldr	r3, [r7, #4]
    a09a:	68db      	ldr	r3, [r3, #12]
    a09c:	8b1b      	ldrh	r3, [r3, #24]
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a09e:	f001 f821 	bl	b0e4 <mp_emit_glue_assign_bytecode>
    a0a2:	e000      	b.n	a0a6 <mp_emit_bc_end_pass+0xd6>
        return;
    a0a4:	bf00      	nop
    }
}
    a0a6:	3708      	adds	r7, #8
    a0a8:	46bd      	mov	sp, r7
    a0aa:	bd80      	pop	{r7, pc}
    a0ac:	00020ec0 	.word	0x00020ec0
    a0b0:	000210ac 	.word	0x000210ac
    a0b4:	00020e40 	.word	0x00020e40
    a0b8:	00020ed8 	.word	0x00020ed8

0000a0bc <mp_emit_bc_last_emit_was_return_value>:

bool mp_emit_bc_last_emit_was_return_value(emit_t *emit) {
    a0bc:	b480      	push	{r7}
    a0be:	b083      	sub	sp, #12
    a0c0:	af00      	add	r7, sp, #0
    a0c2:	6078      	str	r0, [r7, #4]
    return emit->last_emit_was_return_value;
    a0c4:	687b      	ldr	r3, [r7, #4]
    a0c6:	799b      	ldrb	r3, [r3, #6]
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	bf14      	ite	ne
    a0cc:	2301      	movne	r3, #1
    a0ce:	2300      	moveq	r3, #0
    a0d0:	b2db      	uxtb	r3, r3
}
    a0d2:	4618      	mov	r0, r3
    a0d4:	370c      	adds	r7, #12
    a0d6:	46bd      	mov	sp, r7
    a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0dc:	4770      	bx	lr

0000a0de <mp_emit_bc_adjust_stack_size>:

void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    a0de:	b580      	push	{r7, lr}
    a0e0:	b082      	sub	sp, #8
    a0e2:	af00      	add	r7, sp, #0
    a0e4:	6078      	str	r0, [r7, #4]
    a0e6:	6039      	str	r1, [r7, #0]
    if (emit->pass == MP_PASS_SCOPE) {
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	795b      	ldrb	r3, [r3, #5]
    a0ec:	2b01      	cmp	r3, #1
    a0ee:	d023      	beq.n	a138 <mp_emit_bc_adjust_stack_size+0x5a>
        return;
    }
    assert((mp_int_t)emit->stack_size + delta >= 0);
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	689a      	ldr	r2, [r3, #8]
    a0f4:	683b      	ldr	r3, [r7, #0]
    a0f6:	4413      	add	r3, r2
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	da06      	bge.n	a10a <mp_emit_bc_adjust_stack_size+0x2c>
    a0fc:	4b10      	ldr	r3, [pc, #64]	; (a140 <mp_emit_bc_adjust_stack_size+0x62>)
    a0fe:	4a11      	ldr	r2, [pc, #68]	; (a144 <mp_emit_bc_adjust_stack_size+0x66>)
    a100:	f240 11cb 	movw	r1, #459	; 0x1cb
    a104:	4810      	ldr	r0, [pc, #64]	; (a148 <mp_emit_bc_adjust_stack_size+0x6a>)
    a106:	f011 f9bb 	bl	1b480 <__assert_func>
    emit->stack_size += delta;
    a10a:	687b      	ldr	r3, [r7, #4]
    a10c:	689a      	ldr	r2, [r3, #8]
    a10e:	683b      	ldr	r3, [r7, #0]
    a110:	441a      	add	r2, r3
    a112:	687b      	ldr	r3, [r7, #4]
    a114:	609a      	str	r2, [r3, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    a116:	687b      	ldr	r3, [r7, #4]
    a118:	689b      	ldr	r3, [r3, #8]
    a11a:	687a      	ldr	r2, [r7, #4]
    a11c:	68d2      	ldr	r2, [r2, #12]
    a11e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    a120:	4293      	cmp	r3, r2
    a122:	dd05      	ble.n	a130 <mp_emit_bc_adjust_stack_size+0x52>
        emit->scope->stack_size = emit->stack_size;
    a124:	687b      	ldr	r3, [r7, #4]
    a126:	68db      	ldr	r3, [r3, #12]
    a128:	687a      	ldr	r2, [r7, #4]
    a12a:	6892      	ldr	r2, [r2, #8]
    a12c:	b292      	uxth	r2, r2
    a12e:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    emit->last_emit_was_return_value = false;
    a130:	687b      	ldr	r3, [r7, #4]
    a132:	2200      	movs	r2, #0
    a134:	719a      	strb	r2, [r3, #6]
    a136:	e000      	b.n	a13a <mp_emit_bc_adjust_stack_size+0x5c>
        return;
    a138:	bf00      	nop
}
    a13a:	3708      	adds	r7, #8
    a13c:	46bd      	mov	sp, r7
    a13e:	bd80      	pop	{r7, pc}
    a140:	00020f24 	.word	0x00020f24
    a144:	000210c0 	.word	0x000210c0
    a148:	00020e40 	.word	0x00020e40

0000a14c <emit_bc_pre>:

static inline void emit_bc_pre(emit_t *emit, mp_int_t stack_size_delta) {
    a14c:	b580      	push	{r7, lr}
    a14e:	b082      	sub	sp, #8
    a150:	af00      	add	r7, sp, #0
    a152:	6078      	str	r0, [r7, #4]
    a154:	6039      	str	r1, [r7, #0]
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    a156:	6839      	ldr	r1, [r7, #0]
    a158:	6878      	ldr	r0, [r7, #4]
    a15a:	f7ff ffc0 	bl	a0de <mp_emit_bc_adjust_stack_size>
}
    a15e:	bf00      	nop
    a160:	3708      	adds	r7, #8
    a162:	46bd      	mov	sp, r7
    a164:	bd80      	pop	{r7, pc}

0000a166 <mp_emit_bc_set_source_line>:

void mp_emit_bc_set_source_line(emit_t *emit, mp_uint_t source_line) {
    a166:	b480      	push	{r7}
    a168:	b083      	sub	sp, #12
    a16a:	af00      	add	r7, sp, #0
    a16c:	6078      	str	r0, [r7, #4]
    a16e:	6039      	str	r1, [r7, #0]
    }
#else
    (void)emit;
    (void)source_line;
#endif
}
    a170:	bf00      	nop
    a172:	370c      	adds	r7, #12
    a174:	46bd      	mov	sp, r7
    a176:	f85d 7b04 	ldr.w	r7, [sp], #4
    a17a:	4770      	bx	lr

0000a17c <mp_emit_bc_label_assign>:

void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    a17c:	b580      	push	{r7, lr}
    a17e:	b082      	sub	sp, #8
    a180:	af00      	add	r7, sp, #0
    a182:	6078      	str	r0, [r7, #4]
    a184:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a186:	2100      	movs	r1, #0
    a188:	6878      	ldr	r0, [r7, #4]
    a18a:	f7ff ffdf 	bl	a14c <emit_bc_pre>
    if (emit->pass == MP_PASS_SCOPE) {
    a18e:	687b      	ldr	r3, [r7, #4]
    a190:	795b      	ldrb	r3, [r3, #5]
    a192:	2b01      	cmp	r3, #1
    a194:	d039      	beq.n	a20a <mp_emit_bc_label_assign+0x8e>
        return;
    }
    assert(l < emit->max_num_labels);
    a196:	687b      	ldr	r3, [r7, #4]
    a198:	699a      	ldr	r2, [r3, #24]
    a19a:	683b      	ldr	r3, [r7, #0]
    a19c:	429a      	cmp	r2, r3
    a19e:	d806      	bhi.n	a1ae <mp_emit_bc_label_assign+0x32>
    a1a0:	4b1c      	ldr	r3, [pc, #112]	; (a214 <mp_emit_bc_label_assign+0x98>)
    a1a2:	4a1d      	ldr	r2, [pc, #116]	; (a218 <mp_emit_bc_label_assign+0x9c>)
    a1a4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    a1a8:	481c      	ldr	r0, [pc, #112]	; (a21c <mp_emit_bc_label_assign+0xa0>)
    a1aa:	f011 f969 	bl	1b480 <__assert_func>
    if (emit->pass < MP_PASS_EMIT) {
    a1ae:	687b      	ldr	r3, [r7, #4]
    a1b0:	795b      	ldrb	r3, [r3, #5]
    a1b2:	2b03      	cmp	r3, #3
    a1b4:	d818      	bhi.n	a1e8 <mp_emit_bc_label_assign+0x6c>
        // assign label offset
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    a1b6:	687b      	ldr	r3, [r7, #4]
    a1b8:	69da      	ldr	r2, [r3, #28]
    a1ba:	683b      	ldr	r3, [r7, #0]
    a1bc:	009b      	lsls	r3, r3, #2
    a1be:	4413      	add	r3, r2
    a1c0:	681b      	ldr	r3, [r3, #0]
    a1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a1c6:	d006      	beq.n	a1d6 <mp_emit_bc_label_assign+0x5a>
    a1c8:	4b15      	ldr	r3, [pc, #84]	; (a220 <mp_emit_bc_label_assign+0xa4>)
    a1ca:	4a13      	ldr	r2, [pc, #76]	; (a218 <mp_emit_bc_label_assign+0x9c>)
    a1cc:	f240 11f3 	movw	r1, #499	; 0x1f3
    a1d0:	4812      	ldr	r0, [pc, #72]	; (a21c <mp_emit_bc_label_assign+0xa0>)
    a1d2:	f011 f955 	bl	1b480 <__assert_func>
        emit->label_offsets[l] = emit->bytecode_offset;
    a1d6:	687b      	ldr	r3, [r7, #4]
    a1d8:	69da      	ldr	r2, [r3, #28]
    a1da:	683b      	ldr	r3, [r7, #0]
    a1dc:	009b      	lsls	r3, r3, #2
    a1de:	4413      	add	r3, r2
    a1e0:	687a      	ldr	r2, [r7, #4]
    a1e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    a1e4:	601a      	str	r2, [r3, #0]
    a1e6:	e011      	b.n	a20c <mp_emit_bc_label_assign+0x90>
    } else {
        // ensure label offset has not changed from MP_PASS_CODE_SIZE to MP_PASS_EMIT
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    a1e8:	687b      	ldr	r3, [r7, #4]
    a1ea:	69da      	ldr	r2, [r3, #28]
    a1ec:	683b      	ldr	r3, [r7, #0]
    a1ee:	009b      	lsls	r3, r3, #2
    a1f0:	4413      	add	r3, r2
    a1f2:	681a      	ldr	r2, [r3, #0]
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a1f8:	429a      	cmp	r2, r3
    a1fa:	d007      	beq.n	a20c <mp_emit_bc_label_assign+0x90>
    a1fc:	4b09      	ldr	r3, [pc, #36]	; (a224 <mp_emit_bc_label_assign+0xa8>)
    a1fe:	4a06      	ldr	r2, [pc, #24]	; (a218 <mp_emit_bc_label_assign+0x9c>)
    a200:	f240 11f7 	movw	r1, #503	; 0x1f7
    a204:	4805      	ldr	r0, [pc, #20]	; (a21c <mp_emit_bc_label_assign+0xa0>)
    a206:	f011 f93b 	bl	1b480 <__assert_func>
        return;
    a20a:	bf00      	nop
    }
}
    a20c:	3708      	adds	r7, #8
    a20e:	46bd      	mov	sp, r7
    a210:	bd80      	pop	{r7, pc}
    a212:	bf00      	nop
    a214:	00020f4c 	.word	0x00020f4c
    a218:	000210e0 	.word	0x000210e0
    a21c:	00020e40 	.word	0x00020e40
    a220:	00020f68 	.word	0x00020f68
    a224:	00020f90 	.word	0x00020f90

0000a228 <mp_emit_bc_import>:

void mp_emit_bc_import(emit_t *emit, qstr qst, int kind) {
    a228:	b580      	push	{r7, lr}
    a22a:	b084      	sub	sp, #16
    a22c:	af00      	add	r7, sp, #0
    a22e:	60f8      	str	r0, [r7, #12]
    a230:	60b9      	str	r1, [r7, #8]
    a232:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_NAME == MP_BC_IMPORT_NAME);
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_FROM == MP_BC_IMPORT_FROM);
    if (kind == MP_EMIT_IMPORT_FROM) {
    a234:	687b      	ldr	r3, [r7, #4]
    a236:	2b01      	cmp	r3, #1
    a238:	d104      	bne.n	a244 <mp_emit_bc_import+0x1c>
        emit_bc_pre(emit, 1);
    a23a:	2101      	movs	r1, #1
    a23c:	68f8      	ldr	r0, [r7, #12]
    a23e:	f7ff ff85 	bl	a14c <emit_bc_pre>
    a242:	e004      	b.n	a24e <mp_emit_bc_import+0x26>
    } else {
        emit_bc_pre(emit, -1);
    a244:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a248:	68f8      	ldr	r0, [r7, #12]
    a24a:	f7ff ff7f 	bl	a14c <emit_bc_pre>
    }
    if (kind == MP_EMIT_IMPORT_STAR) {
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	2b02      	cmp	r3, #2
    a252:	d104      	bne.n	a25e <mp_emit_bc_import+0x36>
        emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    a254:	216a      	movs	r1, #106	; 0x6a
    a256:	68f8      	ldr	r0, [r7, #12]
    a258:	f7ff fc20 	bl	9a9c <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    }
}
    a25c:	e008      	b.n	a270 <mp_emit_bc_import+0x48>
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	b2db      	uxtb	r3, r3
    a262:	3368      	adds	r3, #104	; 0x68
    a264:	b2db      	uxtb	r3, r3
    a266:	68ba      	ldr	r2, [r7, #8]
    a268:	4619      	mov	r1, r3
    a26a:	68f8      	ldr	r0, [r7, #12]
    a26c:	f7ff fcdd 	bl	9c2a <emit_write_bytecode_byte_qstr>
}
    a270:	bf00      	nop
    a272:	3710      	adds	r7, #16
    a274:	46bd      	mov	sp, r7
    a276:	bd80      	pop	{r7, pc}

0000a278 <mp_emit_bc_load_const_tok>:

void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    a278:	b580      	push	{r7, lr}
    a27a:	b082      	sub	sp, #8
    a27c:	af00      	add	r7, sp, #0
    a27e:	6078      	str	r0, [r7, #4]
    a280:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a282:	2101      	movs	r1, #1
    a284:	6878      	ldr	r0, [r7, #4]
    a286:	f7ff ff61 	bl	a14c <emit_bc_pre>
    switch (tok) {
    a28a:	683b      	ldr	r3, [r7, #0]
    a28c:	2b0e      	cmp	r3, #14
    a28e:	d008      	beq.n	a2a2 <mp_emit_bc_load_const_tok+0x2a>
    a290:	2b0f      	cmp	r3, #15
    a292:	d00b      	beq.n	a2ac <mp_emit_bc_load_const_tok+0x34>
    a294:	2b0d      	cmp	r3, #13
    a296:	d10e      	bne.n	a2b6 <mp_emit_bc_load_const_tok+0x3e>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    a298:	2110      	movs	r1, #16
    a29a:	6878      	ldr	r0, [r7, #4]
    a29c:	f7ff fbfe 	bl	9a9c <emit_write_bytecode_byte>
    a2a0:	e019      	b.n	a2d6 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    a2a2:	2111      	movs	r1, #17
    a2a4:	6878      	ldr	r0, [r7, #4]
    a2a6:	f7ff fbf9 	bl	9a9c <emit_write_bytecode_byte>
    a2aa:	e014      	b.n	a2d6 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    a2ac:	2112      	movs	r1, #18
    a2ae:	6878      	ldr	r0, [r7, #4]
    a2b0:	f7ff fbf4 	bl	9a9c <emit_write_bytecode_byte>
    a2b4:	e00f      	b.n	a2d6 <mp_emit_bc_load_const_tok+0x5e>
        default:
            assert(tok == MP_TOKEN_ELLIPSIS);
    a2b6:	683b      	ldr	r3, [r7, #0]
    a2b8:	2b0c      	cmp	r3, #12
    a2ba:	d006      	beq.n	a2ca <mp_emit_bc_load_const_tok+0x52>
    a2bc:	4b08      	ldr	r3, [pc, #32]	; (a2e0 <mp_emit_bc_load_const_tok+0x68>)
    a2be:	4a09      	ldr	r2, [pc, #36]	; (a2e4 <mp_emit_bc_load_const_tok+0x6c>)
    a2c0:	f240 2111 	movw	r1, #529	; 0x211
    a2c4:	4808      	ldr	r0, [pc, #32]	; (a2e8 <mp_emit_bc_load_const_tok+0x70>)
    a2c6:	f011 f8db 	bl	1b480 <__assert_func>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    a2ca:	4a08      	ldr	r2, [pc, #32]	; (a2ec <mp_emit_bc_load_const_tok+0x74>)
    a2cc:	2117      	movs	r1, #23
    a2ce:	6878      	ldr	r0, [r7, #4]
    a2d0:	f7ff fcda 	bl	9c88 <emit_write_bytecode_byte_obj>
            break;
    a2d4:	bf00      	nop
    }
}
    a2d6:	bf00      	nop
    a2d8:	3708      	adds	r7, #8
    a2da:	46bd      	mov	sp, r7
    a2dc:	bd80      	pop	{r7, pc}
    a2de:	bf00      	nop
    a2e0:	00020fc0 	.word	0x00020fc0
    a2e4:	000210f8 	.word	0x000210f8
    a2e8:	00020e40 	.word	0x00020e40
    a2ec:	000231ec 	.word	0x000231ec

0000a2f0 <mp_emit_bc_load_const_small_int>:

void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    a2f0:	b580      	push	{r7, lr}
    a2f2:	b082      	sub	sp, #8
    a2f4:	af00      	add	r7, sp, #0
    a2f6:	6078      	str	r0, [r7, #4]
    a2f8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a2fa:	2101      	movs	r1, #1
    a2fc:	6878      	ldr	r0, [r7, #4]
    a2fe:	f7ff ff25 	bl	a14c <emit_bc_pre>
    if (-16 <= arg && arg <= 47) {
    a302:	683b      	ldr	r3, [r7, #0]
    a304:	f113 0f10 	cmn.w	r3, #16
    a308:	db0b      	blt.n	a322 <mp_emit_bc_load_const_small_int+0x32>
    a30a:	683b      	ldr	r3, [r7, #0]
    a30c:	2b2f      	cmp	r3, #47	; 0x2f
    a30e:	dc08      	bgt.n	a322 <mp_emit_bc_load_const_small_int+0x32>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    a310:	683b      	ldr	r3, [r7, #0]
    a312:	b2db      	uxtb	r3, r3
    a314:	3b80      	subs	r3, #128	; 0x80
    a316:	b2db      	uxtb	r3, r3
    a318:	4619      	mov	r1, r3
    a31a:	6878      	ldr	r0, [r7, #4]
    a31c:	f7ff fbbe 	bl	9a9c <emit_write_bytecode_byte>
    a320:	e004      	b.n	a32c <mp_emit_bc_load_const_small_int+0x3c>
    } else {
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    a322:	683a      	ldr	r2, [r7, #0]
    a324:	2114      	movs	r1, #20
    a326:	6878      	ldr	r0, [r7, #4]
    a328:	f7ff fbe2 	bl	9af0 <emit_write_bytecode_byte_int>
    }
}
    a32c:	bf00      	nop
    a32e:	3708      	adds	r7, #8
    a330:	46bd      	mov	sp, r7
    a332:	bd80      	pop	{r7, pc}

0000a334 <mp_emit_bc_load_const_str>:

void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    a334:	b580      	push	{r7, lr}
    a336:	b082      	sub	sp, #8
    a338:	af00      	add	r7, sp, #0
    a33a:	6078      	str	r0, [r7, #4]
    a33c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a33e:	2101      	movs	r1, #1
    a340:	6878      	ldr	r0, [r7, #4]
    a342:	f7ff ff03 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    a346:	683a      	ldr	r2, [r7, #0]
    a348:	2116      	movs	r1, #22
    a34a:	6878      	ldr	r0, [r7, #4]
    a34c:	f7ff fc6d 	bl	9c2a <emit_write_bytecode_byte_qstr>
}
    a350:	bf00      	nop
    a352:	3708      	adds	r7, #8
    a354:	46bd      	mov	sp, r7
    a356:	bd80      	pop	{r7, pc}

0000a358 <mp_emit_bc_load_const_obj>:

void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    a358:	b580      	push	{r7, lr}
    a35a:	b082      	sub	sp, #8
    a35c:	af00      	add	r7, sp, #0
    a35e:	6078      	str	r0, [r7, #4]
    a360:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a362:	2101      	movs	r1, #1
    a364:	6878      	ldr	r0, [r7, #4]
    a366:	f7ff fef1 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    a36a:	683a      	ldr	r2, [r7, #0]
    a36c:	2117      	movs	r1, #23
    a36e:	6878      	ldr	r0, [r7, #4]
    a370:	f7ff fc8a 	bl	9c88 <emit_write_bytecode_byte_obj>
}
    a374:	bf00      	nop
    a376:	3708      	adds	r7, #8
    a378:	46bd      	mov	sp, r7
    a37a:	bd80      	pop	{r7, pc}

0000a37c <mp_emit_bc_load_null>:

void mp_emit_bc_load_null(emit_t *emit) {
    a37c:	b580      	push	{r7, lr}
    a37e:	b082      	sub	sp, #8
    a380:	af00      	add	r7, sp, #0
    a382:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a384:	2101      	movs	r1, #1
    a386:	6878      	ldr	r0, [r7, #4]
    a388:	f7ff fee0 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    a38c:	2118      	movs	r1, #24
    a38e:	6878      	ldr	r0, [r7, #4]
    a390:	f7ff fb84 	bl	9a9c <emit_write_bytecode_byte>
}
    a394:	bf00      	nop
    a396:	3708      	adds	r7, #8
    a398:	46bd      	mov	sp, r7
    a39a:	bd80      	pop	{r7, pc}

0000a39c <mp_emit_bc_load_local>:

void mp_emit_bc_load_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a39c:	b580      	push	{r7, lr}
    a39e:	b084      	sub	sp, #16
    a3a0:	af00      	add	r7, sp, #0
    a3a2:	60f8      	str	r0, [r7, #12]
    a3a4:	60b9      	str	r1, [r7, #8]
    a3a6:	607a      	str	r2, [r7, #4]
    a3a8:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_LOAD_FAST_N);
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_LOAD_DEREF);
    (void)qst;
    emit_bc_pre(emit, 1);
    a3aa:	2101      	movs	r1, #1
    a3ac:	68f8      	ldr	r0, [r7, #12]
    a3ae:	f7ff fecd 	bl	a14c <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a3b2:	683b      	ldr	r3, [r7, #0]
    a3b4:	2b00      	cmp	r3, #0
    a3b6:	d10b      	bne.n	a3d0 <mp_emit_bc_load_local+0x34>
    a3b8:	687b      	ldr	r3, [r7, #4]
    a3ba:	2b0f      	cmp	r3, #15
    a3bc:	d808      	bhi.n	a3d0 <mp_emit_bc_load_local+0x34>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	b2db      	uxtb	r3, r3
    a3c2:	3b50      	subs	r3, #80	; 0x50
    a3c4:	b2db      	uxtb	r3, r3
    a3c6:	4619      	mov	r1, r3
    a3c8:	68f8      	ldr	r0, [r7, #12]
    a3ca:	f7ff fb67 	bl	9a9c <emit_write_bytecode_byte>
    a3ce:	e008      	b.n	a3e2 <mp_emit_bc_load_local+0x46>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N + kind, local_num);
    a3d0:	683b      	ldr	r3, [r7, #0]
    a3d2:	b2db      	uxtb	r3, r3
    a3d4:	3319      	adds	r3, #25
    a3d6:	b2db      	uxtb	r3, r3
    a3d8:	687a      	ldr	r2, [r7, #4]
    a3da:	4619      	mov	r1, r3
    a3dc:	68f8      	ldr	r0, [r7, #12]
    a3de:	f7ff fbf0 	bl	9bc2 <emit_write_bytecode_byte_uint>
    }
}
    a3e2:	bf00      	nop
    a3e4:	3710      	adds	r7, #16
    a3e6:	46bd      	mov	sp, r7
    a3e8:	bd80      	pop	{r7, pc}

0000a3ea <mp_emit_bc_load_global>:

void mp_emit_bc_load_global(emit_t *emit, qstr qst, int kind) {
    a3ea:	b580      	push	{r7, lr}
    a3ec:	b084      	sub	sp, #16
    a3ee:	af00      	add	r7, sp, #0
    a3f0:	60f8      	str	r0, [r7, #12]
    a3f2:	60b9      	str	r1, [r7, #8]
    a3f4:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_LOAD_NAME);
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_LOAD_GLOBAL);
    (void)qst;
    emit_bc_pre(emit, 1);
    a3f6:	2101      	movs	r1, #1
    a3f8:	68f8      	ldr	r0, [r7, #12]
    a3fa:	f7ff fea7 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME + kind, qst);
    a3fe:	687b      	ldr	r3, [r7, #4]
    a400:	b2db      	uxtb	r3, r3
    a402:	331b      	adds	r3, #27
    a404:	b2db      	uxtb	r3, r3
    a406:	68ba      	ldr	r2, [r7, #8]
    a408:	4619      	mov	r1, r3
    a40a:	68f8      	ldr	r0, [r7, #12]
    a40c:	f7ff fc0d 	bl	9c2a <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a410:	bf00      	nop
    a412:	3710      	adds	r7, #16
    a414:	46bd      	mov	sp, r7
    a416:	bd80      	pop	{r7, pc}

0000a418 <mp_emit_bc_load_method>:

void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    a418:	b580      	push	{r7, lr}
    a41a:	b084      	sub	sp, #16
    a41c:	af00      	add	r7, sp, #0
    a41e:	60f8      	str	r0, [r7, #12]
    a420:	60b9      	str	r1, [r7, #8]
    a422:	4613      	mov	r3, r2
    a424:	71fb      	strb	r3, [r7, #7]
    emit_bc_pre(emit, 1 - 2 * is_super);
    a426:	79fb      	ldrb	r3, [r7, #7]
    a428:	005b      	lsls	r3, r3, #1
    a42a:	f1c3 0301 	rsb	r3, r3, #1
    a42e:	4619      	mov	r1, r3
    a430:	68f8      	ldr	r0, [r7, #12]
    a432:	f7ff fe8b 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    a436:	79fb      	ldrb	r3, [r7, #7]
    a438:	2b00      	cmp	r3, #0
    a43a:	d001      	beq.n	a440 <mp_emit_bc_load_method+0x28>
    a43c:	231f      	movs	r3, #31
    a43e:	e000      	b.n	a442 <mp_emit_bc_load_method+0x2a>
    a440:	231e      	movs	r3, #30
    a442:	68ba      	ldr	r2, [r7, #8]
    a444:	4619      	mov	r1, r3
    a446:	68f8      	ldr	r0, [r7, #12]
    a448:	f7ff fbef 	bl	9c2a <emit_write_bytecode_byte_qstr>
}
    a44c:	bf00      	nop
    a44e:	3710      	adds	r7, #16
    a450:	46bd      	mov	sp, r7
    a452:	bd80      	pop	{r7, pc}

0000a454 <mp_emit_bc_load_build_class>:

void mp_emit_bc_load_build_class(emit_t *emit) {
    a454:	b580      	push	{r7, lr}
    a456:	b082      	sub	sp, #8
    a458:	af00      	add	r7, sp, #0
    a45a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a45c:	2101      	movs	r1, #1
    a45e:	6878      	ldr	r0, [r7, #4]
    a460:	f7ff fe74 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    a464:	2120      	movs	r1, #32
    a466:	6878      	ldr	r0, [r7, #4]
    a468:	f7ff fb18 	bl	9a9c <emit_write_bytecode_byte>
}
    a46c:	bf00      	nop
    a46e:	3708      	adds	r7, #8
    a470:	46bd      	mov	sp, r7
    a472:	bd80      	pop	{r7, pc}

0000a474 <mp_emit_bc_subscr>:

void mp_emit_bc_subscr(emit_t *emit, int kind) {
    a474:	b580      	push	{r7, lr}
    a476:	b082      	sub	sp, #8
    a478:	af00      	add	r7, sp, #0
    a47a:	6078      	str	r0, [r7, #4]
    a47c:	6039      	str	r1, [r7, #0]
    if (kind == MP_EMIT_SUBSCR_LOAD) {
    a47e:	683b      	ldr	r3, [r7, #0]
    a480:	2b00      	cmp	r3, #0
    a482:	d109      	bne.n	a498 <mp_emit_bc_subscr+0x24>
        emit_bc_pre(emit, -1);
    a484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a488:	6878      	ldr	r0, [r7, #4]
    a48a:	f7ff fe5f 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    a48e:	2121      	movs	r1, #33	; 0x21
    a490:	6878      	ldr	r0, [r7, #4]
    a492:	f7ff fb03 	bl	9a9c <emit_write_bytecode_byte>
            mp_emit_bc_rot_three(emit);
        }
        emit_bc_pre(emit, -3);
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    }
}
    a496:	e011      	b.n	a4bc <mp_emit_bc_subscr+0x48>
        if (kind == MP_EMIT_SUBSCR_DELETE) {
    a498:	683b      	ldr	r3, [r7, #0]
    a49a:	2b02      	cmp	r3, #2
    a49c:	d105      	bne.n	a4aa <mp_emit_bc_subscr+0x36>
            mp_emit_bc_load_null(emit);
    a49e:	6878      	ldr	r0, [r7, #4]
    a4a0:	f7ff ff6c 	bl	a37c <mp_emit_bc_load_null>
            mp_emit_bc_rot_three(emit);
    a4a4:	6878      	ldr	r0, [r7, #4]
    a4a6:	f000 f8e3 	bl	a670 <mp_emit_bc_rot_three>
        emit_bc_pre(emit, -3);
    a4aa:	f06f 0102 	mvn.w	r1, #2
    a4ae:	6878      	ldr	r0, [r7, #4]
    a4b0:	f7ff fe4c 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    a4b4:	2127      	movs	r1, #39	; 0x27
    a4b6:	6878      	ldr	r0, [r7, #4]
    a4b8:	f7ff faf0 	bl	9a9c <emit_write_bytecode_byte>
}
    a4bc:	bf00      	nop
    a4be:	3708      	adds	r7, #8
    a4c0:	46bd      	mov	sp, r7
    a4c2:	bd80      	pop	{r7, pc}

0000a4c4 <mp_emit_bc_attr>:

void mp_emit_bc_attr(emit_t *emit, qstr qst, int kind) {
    a4c4:	b580      	push	{r7, lr}
    a4c6:	b084      	sub	sp, #16
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	60f8      	str	r0, [r7, #12]
    a4cc:	60b9      	str	r1, [r7, #8]
    a4ce:	607a      	str	r2, [r7, #4]
    if (kind == MP_EMIT_ATTR_LOAD) {
    a4d0:	687b      	ldr	r3, [r7, #4]
    a4d2:	2b00      	cmp	r3, #0
    a4d4:	d109      	bne.n	a4ea <mp_emit_bc_attr+0x26>
        emit_bc_pre(emit, 0);
    a4d6:	2100      	movs	r1, #0
    a4d8:	68f8      	ldr	r0, [r7, #12]
    a4da:	f7ff fe37 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    a4de:	68ba      	ldr	r2, [r7, #8]
    a4e0:	211d      	movs	r1, #29
    a4e2:	68f8      	ldr	r0, [r7, #12]
    a4e4:	f7ff fba1 	bl	9c2a <emit_write_bytecode_byte_qstr>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    }
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a4e8:	e012      	b.n	a510 <mp_emit_bc_attr+0x4c>
        if (kind == MP_EMIT_ATTR_DELETE) {
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	2b02      	cmp	r3, #2
    a4ee:	d105      	bne.n	a4fc <mp_emit_bc_attr+0x38>
            mp_emit_bc_load_null(emit);
    a4f0:	68f8      	ldr	r0, [r7, #12]
    a4f2:	f7ff ff43 	bl	a37c <mp_emit_bc_load_null>
            mp_emit_bc_rot_two(emit);
    a4f6:	68f8      	ldr	r0, [r7, #12]
    a4f8:	f000 f8aa 	bl	a650 <mp_emit_bc_rot_two>
        emit_bc_pre(emit, -2);
    a4fc:	f06f 0101 	mvn.w	r1, #1
    a500:	68f8      	ldr	r0, [r7, #12]
    a502:	f7ff fe23 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    a506:	68ba      	ldr	r2, [r7, #8]
    a508:	2126      	movs	r1, #38	; 0x26
    a50a:	68f8      	ldr	r0, [r7, #12]
    a50c:	f7ff fb8d 	bl	9c2a <emit_write_bytecode_byte_qstr>
}
    a510:	bf00      	nop
    a512:	3710      	adds	r7, #16
    a514:	46bd      	mov	sp, r7
    a516:	bd80      	pop	{r7, pc}

0000a518 <mp_emit_bc_store_local>:

void mp_emit_bc_store_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a518:	b580      	push	{r7, lr}
    a51a:	b084      	sub	sp, #16
    a51c:	af00      	add	r7, sp, #0
    a51e:	60f8      	str	r0, [r7, #12]
    a520:	60b9      	str	r1, [r7, #8]
    a522:	607a      	str	r2, [r7, #4]
    a524:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_STORE_FAST_N);
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_STORE_DEREF);
    (void)qst;
    emit_bc_pre(emit, -1);
    a526:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a52a:	68f8      	ldr	r0, [r7, #12]
    a52c:	f7ff fe0e 	bl	a14c <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a530:	683b      	ldr	r3, [r7, #0]
    a532:	2b00      	cmp	r3, #0
    a534:	d10b      	bne.n	a54e <mp_emit_bc_store_local+0x36>
    a536:	687b      	ldr	r3, [r7, #4]
    a538:	2b0f      	cmp	r3, #15
    a53a:	d808      	bhi.n	a54e <mp_emit_bc_store_local+0x36>
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	b2db      	uxtb	r3, r3
    a540:	3b40      	subs	r3, #64	; 0x40
    a542:	b2db      	uxtb	r3, r3
    a544:	4619      	mov	r1, r3
    a546:	68f8      	ldr	r0, [r7, #12]
    a548:	f7ff faa8 	bl	9a9c <emit_write_bytecode_byte>
    a54c:	e008      	b.n	a560 <mp_emit_bc_store_local+0x48>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N + kind, local_num);
    a54e:	683b      	ldr	r3, [r7, #0]
    a550:	b2db      	uxtb	r3, r3
    a552:	3322      	adds	r3, #34	; 0x22
    a554:	b2db      	uxtb	r3, r3
    a556:	687a      	ldr	r2, [r7, #4]
    a558:	4619      	mov	r1, r3
    a55a:	68f8      	ldr	r0, [r7, #12]
    a55c:	f7ff fb31 	bl	9bc2 <emit_write_bytecode_byte_uint>
    }
}
    a560:	bf00      	nop
    a562:	3710      	adds	r7, #16
    a564:	46bd      	mov	sp, r7
    a566:	bd80      	pop	{r7, pc}

0000a568 <mp_emit_bc_store_global>:

void mp_emit_bc_store_global(emit_t *emit, qstr qst, int kind) {
    a568:	b580      	push	{r7, lr}
    a56a:	b084      	sub	sp, #16
    a56c:	af00      	add	r7, sp, #0
    a56e:	60f8      	str	r0, [r7, #12]
    a570:	60b9      	str	r1, [r7, #8]
    a572:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_STORE_NAME);
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_STORE_GLOBAL);
    emit_bc_pre(emit, -1);
    a574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a578:	68f8      	ldr	r0, [r7, #12]
    a57a:	f7ff fde7 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME + kind, qst);
    a57e:	687b      	ldr	r3, [r7, #4]
    a580:	b2db      	uxtb	r3, r3
    a582:	3324      	adds	r3, #36	; 0x24
    a584:	b2db      	uxtb	r3, r3
    a586:	68ba      	ldr	r2, [r7, #8]
    a588:	4619      	mov	r1, r3
    a58a:	68f8      	ldr	r0, [r7, #12]
    a58c:	f7ff fb4d 	bl	9c2a <emit_write_bytecode_byte_qstr>
}
    a590:	bf00      	nop
    a592:	3710      	adds	r7, #16
    a594:	46bd      	mov	sp, r7
    a596:	bd80      	pop	{r7, pc}

0000a598 <mp_emit_bc_delete_local>:

void mp_emit_bc_delete_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a598:	b580      	push	{r7, lr}
    a59a:	b084      	sub	sp, #16
    a59c:	af00      	add	r7, sp, #0
    a59e:	60f8      	str	r0, [r7, #12]
    a5a0:	60b9      	str	r1, [r7, #8]
    a5a2:	607a      	str	r2, [r7, #4]
    a5a4:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_DELETE_FAST);
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_DELETE_DEREF);
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST + kind, local_num);
    a5a6:	683b      	ldr	r3, [r7, #0]
    a5a8:	b2db      	uxtb	r3, r3
    a5aa:	3328      	adds	r3, #40	; 0x28
    a5ac:	b2db      	uxtb	r3, r3
    a5ae:	687a      	ldr	r2, [r7, #4]
    a5b0:	4619      	mov	r1, r3
    a5b2:	68f8      	ldr	r0, [r7, #12]
    a5b4:	f7ff fb05 	bl	9bc2 <emit_write_bytecode_byte_uint>
}
    a5b8:	bf00      	nop
    a5ba:	3710      	adds	r7, #16
    a5bc:	46bd      	mov	sp, r7
    a5be:	bd80      	pop	{r7, pc}

0000a5c0 <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst, int kind) {
    a5c0:	b580      	push	{r7, lr}
    a5c2:	b084      	sub	sp, #16
    a5c4:	af00      	add	r7, sp, #0
    a5c6:	60f8      	str	r0, [r7, #12]
    a5c8:	60b9      	str	r1, [r7, #8]
    a5ca:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_DELETE_NAME);
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_DELETE_GLOBAL);
    emit_bc_pre(emit, 0);
    a5cc:	2100      	movs	r1, #0
    a5ce:	68f8      	ldr	r0, [r7, #12]
    a5d0:	f7ff fdbc 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME + kind, qst);
    a5d4:	687b      	ldr	r3, [r7, #4]
    a5d6:	b2db      	uxtb	r3, r3
    a5d8:	332a      	adds	r3, #42	; 0x2a
    a5da:	b2db      	uxtb	r3, r3
    a5dc:	68ba      	ldr	r2, [r7, #8]
    a5de:	4619      	mov	r1, r3
    a5e0:	68f8      	ldr	r0, [r7, #12]
    a5e2:	f7ff fb22 	bl	9c2a <emit_write_bytecode_byte_qstr>
}
    a5e6:	bf00      	nop
    a5e8:	3710      	adds	r7, #16
    a5ea:	46bd      	mov	sp, r7
    a5ec:	bd80      	pop	{r7, pc}

0000a5ee <mp_emit_bc_dup_top>:

void mp_emit_bc_dup_top(emit_t *emit) {
    a5ee:	b580      	push	{r7, lr}
    a5f0:	b082      	sub	sp, #8
    a5f2:	af00      	add	r7, sp, #0
    a5f4:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a5f6:	2101      	movs	r1, #1
    a5f8:	6878      	ldr	r0, [r7, #4]
    a5fa:	f7ff fda7 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    a5fe:	2130      	movs	r1, #48	; 0x30
    a600:	6878      	ldr	r0, [r7, #4]
    a602:	f7ff fa4b 	bl	9a9c <emit_write_bytecode_byte>
}
    a606:	bf00      	nop
    a608:	3708      	adds	r7, #8
    a60a:	46bd      	mov	sp, r7
    a60c:	bd80      	pop	{r7, pc}

0000a60e <mp_emit_bc_dup_top_two>:

void mp_emit_bc_dup_top_two(emit_t *emit) {
    a60e:	b580      	push	{r7, lr}
    a610:	b082      	sub	sp, #8
    a612:	af00      	add	r7, sp, #0
    a614:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 2);
    a616:	2102      	movs	r1, #2
    a618:	6878      	ldr	r0, [r7, #4]
    a61a:	f7ff fd97 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    a61e:	2131      	movs	r1, #49	; 0x31
    a620:	6878      	ldr	r0, [r7, #4]
    a622:	f7ff fa3b 	bl	9a9c <emit_write_bytecode_byte>
}
    a626:	bf00      	nop
    a628:	3708      	adds	r7, #8
    a62a:	46bd      	mov	sp, r7
    a62c:	bd80      	pop	{r7, pc}

0000a62e <mp_emit_bc_pop_top>:

void mp_emit_bc_pop_top(emit_t *emit) {
    a62e:	b580      	push	{r7, lr}
    a630:	b082      	sub	sp, #8
    a632:	af00      	add	r7, sp, #0
    a634:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a636:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a63a:	6878      	ldr	r0, [r7, #4]
    a63c:	f7ff fd86 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a640:	2132      	movs	r1, #50	; 0x32
    a642:	6878      	ldr	r0, [r7, #4]
    a644:	f7ff fa2a 	bl	9a9c <emit_write_bytecode_byte>
}
    a648:	bf00      	nop
    a64a:	3708      	adds	r7, #8
    a64c:	46bd      	mov	sp, r7
    a64e:	bd80      	pop	{r7, pc}

0000a650 <mp_emit_bc_rot_two>:

void mp_emit_bc_rot_two(emit_t *emit) {
    a650:	b580      	push	{r7, lr}
    a652:	b082      	sub	sp, #8
    a654:	af00      	add	r7, sp, #0
    a656:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a658:	2100      	movs	r1, #0
    a65a:	6878      	ldr	r0, [r7, #4]
    a65c:	f7ff fd76 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    a660:	2133      	movs	r1, #51	; 0x33
    a662:	6878      	ldr	r0, [r7, #4]
    a664:	f7ff fa1a 	bl	9a9c <emit_write_bytecode_byte>
}
    a668:	bf00      	nop
    a66a:	3708      	adds	r7, #8
    a66c:	46bd      	mov	sp, r7
    a66e:	bd80      	pop	{r7, pc}

0000a670 <mp_emit_bc_rot_three>:

void mp_emit_bc_rot_three(emit_t *emit) {
    a670:	b580      	push	{r7, lr}
    a672:	b082      	sub	sp, #8
    a674:	af00      	add	r7, sp, #0
    a676:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a678:	2100      	movs	r1, #0
    a67a:	6878      	ldr	r0, [r7, #4]
    a67c:	f7ff fd66 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    a680:	2134      	movs	r1, #52	; 0x34
    a682:	6878      	ldr	r0, [r7, #4]
    a684:	f7ff fa0a 	bl	9a9c <emit_write_bytecode_byte>
}
    a688:	bf00      	nop
    a68a:	3708      	adds	r7, #8
    a68c:	46bd      	mov	sp, r7
    a68e:	bd80      	pop	{r7, pc}

0000a690 <mp_emit_bc_jump>:

void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    a690:	b580      	push	{r7, lr}
    a692:	b082      	sub	sp, #8
    a694:	af00      	add	r7, sp, #0
    a696:	6078      	str	r0, [r7, #4]
    a698:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a69a:	2100      	movs	r1, #0
    a69c:	6878      	ldr	r0, [r7, #4]
    a69e:	f7ff fd55 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    a6a2:	683a      	ldr	r2, [r7, #0]
    a6a4:	2135      	movs	r1, #53	; 0x35
    a6a6:	6878      	ldr	r0, [r7, #4]
    a6a8:	f7ff fb61 	bl	9d6e <emit_write_bytecode_byte_signed_label>
}
    a6ac:	bf00      	nop
    a6ae:	3708      	adds	r7, #8
    a6b0:	46bd      	mov	sp, r7
    a6b2:	bd80      	pop	{r7, pc}

0000a6b4 <mp_emit_bc_pop_jump_if>:

void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    a6b4:	b580      	push	{r7, lr}
    a6b6:	b084      	sub	sp, #16
    a6b8:	af00      	add	r7, sp, #0
    a6ba:	60f8      	str	r0, [r7, #12]
    a6bc:	460b      	mov	r3, r1
    a6be:	607a      	str	r2, [r7, #4]
    a6c0:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a6c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a6c6:	68f8      	ldr	r0, [r7, #12]
    a6c8:	f7ff fd40 	bl	a14c <emit_bc_pre>
    if (cond) {
    a6cc:	7afb      	ldrb	r3, [r7, #11]
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d005      	beq.n	a6de <mp_emit_bc_pop_jump_if+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    a6d2:	687a      	ldr	r2, [r7, #4]
    a6d4:	2136      	movs	r1, #54	; 0x36
    a6d6:	68f8      	ldr	r0, [r7, #12]
    a6d8:	f7ff fb49 	bl	9d6e <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    }
}
    a6dc:	e004      	b.n	a6e8 <mp_emit_bc_pop_jump_if+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    a6de:	687a      	ldr	r2, [r7, #4]
    a6e0:	2137      	movs	r1, #55	; 0x37
    a6e2:	68f8      	ldr	r0, [r7, #12]
    a6e4:	f7ff fb43 	bl	9d6e <emit_write_bytecode_byte_signed_label>
}
    a6e8:	bf00      	nop
    a6ea:	3710      	adds	r7, #16
    a6ec:	46bd      	mov	sp, r7
    a6ee:	bd80      	pop	{r7, pc}

0000a6f0 <mp_emit_bc_jump_if_or_pop>:

void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    a6f0:	b580      	push	{r7, lr}
    a6f2:	b084      	sub	sp, #16
    a6f4:	af00      	add	r7, sp, #0
    a6f6:	60f8      	str	r0, [r7, #12]
    a6f8:	460b      	mov	r3, r1
    a6fa:	607a      	str	r2, [r7, #4]
    a6fc:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a6fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a702:	68f8      	ldr	r0, [r7, #12]
    a704:	f7ff fd22 	bl	a14c <emit_bc_pre>
    if (cond) {
    a708:	7afb      	ldrb	r3, [r7, #11]
    a70a:	2b00      	cmp	r3, #0
    a70c:	d005      	beq.n	a71a <mp_emit_bc_jump_if_or_pop+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    a70e:	687a      	ldr	r2, [r7, #4]
    a710:	2138      	movs	r1, #56	; 0x38
    a712:	68f8      	ldr	r0, [r7, #12]
    a714:	f7ff fb2b 	bl	9d6e <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    }
}
    a718:	e004      	b.n	a724 <mp_emit_bc_jump_if_or_pop+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    a71a:	687a      	ldr	r2, [r7, #4]
    a71c:	2139      	movs	r1, #57	; 0x39
    a71e:	68f8      	ldr	r0, [r7, #12]
    a720:	f7ff fb25 	bl	9d6e <emit_write_bytecode_byte_signed_label>
}
    a724:	bf00      	nop
    a726:	3710      	adds	r7, #16
    a728:	46bd      	mov	sp, r7
    a72a:	bd80      	pop	{r7, pc}

0000a72c <mp_emit_bc_unwind_jump>:

void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    a72c:	b580      	push	{r7, lr}
    a72e:	b086      	sub	sp, #24
    a730:	af00      	add	r7, sp, #0
    a732:	60f8      	str	r0, [r7, #12]
    a734:	60b9      	str	r1, [r7, #8]
    a736:	607a      	str	r2, [r7, #4]
    if (except_depth == 0) {
    a738:	687b      	ldr	r3, [r7, #4]
    a73a:	2b00      	cmp	r3, #0
    a73c:	d122      	bne.n	a784 <mp_emit_bc_unwind_jump+0x58>
        emit_bc_pre(emit, 0);
    a73e:	2100      	movs	r1, #0
    a740:	68f8      	ldr	r0, [r7, #12]
    a742:	f7ff fd03 	bl	a14c <emit_bc_pre>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    a746:	68bb      	ldr	r3, [r7, #8]
    a748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a74c:	2b00      	cmp	r3, #0
    a74e:	d010      	beq.n	a772 <mp_emit_bc_unwind_jump+0x46>
            // need to pop the iterator if we are breaking out of a for loop
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a750:	2132      	movs	r1, #50	; 0x32
    a752:	68f8      	ldr	r0, [r7, #12]
    a754:	f7ff f9a2 	bl	9a9c <emit_write_bytecode_byte>
            // also pop the iter_buf
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a758:	2300      	movs	r3, #0
    a75a:	617b      	str	r3, [r7, #20]
    a75c:	e006      	b.n	a76c <mp_emit_bc_unwind_jump+0x40>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a75e:	2132      	movs	r1, #50	; 0x32
    a760:	68f8      	ldr	r0, [r7, #12]
    a762:	f7ff f99b 	bl	9a9c <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a766:	697b      	ldr	r3, [r7, #20]
    a768:	3301      	adds	r3, #1
    a76a:	617b      	str	r3, [r7, #20]
    a76c:	697b      	ldr	r3, [r7, #20]
    a76e:	2b02      	cmp	r3, #2
    a770:	d9f5      	bls.n	a75e <mp_emit_bc_unwind_jump+0x32>
            }
        }
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a772:	68bb      	ldr	r3, [r7, #8]
    a774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a778:	461a      	mov	r2, r3
    a77a:	2135      	movs	r1, #53	; 0x35
    a77c:	68f8      	ldr	r0, [r7, #12]
    a77e:	f7ff faf6 	bl	9d6e <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    }
}
    a782:	e017      	b.n	a7b4 <mp_emit_bc_unwind_jump+0x88>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a784:	68bb      	ldr	r3, [r7, #8]
    a786:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a78a:	461a      	mov	r2, r3
    a78c:	2146      	movs	r1, #70	; 0x46
    a78e:	68f8      	ldr	r0, [r7, #12]
    a790:	f7ff faed 	bl	9d6e <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    a794:	68bb      	ldr	r3, [r7, #8]
    a796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a79a:	2b00      	cmp	r3, #0
    a79c:	d001      	beq.n	a7a2 <mp_emit_bc_unwind_jump+0x76>
    a79e:	2280      	movs	r2, #128	; 0x80
    a7a0:	e000      	b.n	a7a4 <mp_emit_bc_unwind_jump+0x78>
    a7a2:	2200      	movs	r2, #0
    a7a4:	687b      	ldr	r3, [r7, #4]
    a7a6:	b2db      	uxtb	r3, r3
    a7a8:	4313      	orrs	r3, r2
    a7aa:	b2db      	uxtb	r3, r3
    a7ac:	4619      	mov	r1, r3
    a7ae:	68f8      	ldr	r0, [r7, #12]
    a7b0:	f7ff f974 	bl	9a9c <emit_write_bytecode_byte>
}
    a7b4:	bf00      	nop
    a7b6:	3718      	adds	r7, #24
    a7b8:	46bd      	mov	sp, r7
    a7ba:	bd80      	pop	{r7, pc}

0000a7bc <mp_emit_bc_setup_block>:

void mp_emit_bc_setup_block(emit_t *emit, mp_uint_t label, int kind) {
    a7bc:	b580      	push	{r7, lr}
    a7be:	b084      	sub	sp, #16
    a7c0:	af00      	add	r7, sp, #0
    a7c2:	60f8      	str	r0, [r7, #12]
    a7c4:	60b9      	str	r1, [r7, #8]
    a7c6:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_WITH == MP_BC_SETUP_WITH);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_EXCEPT == MP_BC_SETUP_EXCEPT);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_FINALLY == MP_BC_SETUP_FINALLY);
    if (kind == MP_EMIT_SETUP_BLOCK_WITH) {
    a7c8:	687b      	ldr	r3, [r7, #4]
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	d104      	bne.n	a7d8 <mp_emit_bc_setup_block+0x1c>
    // The SETUP_WITH opcode pops ctx_mgr from the top of the stack
    // and then pushes 3 entries: __exit__, ctx_mgr, as_value.
        emit_bc_pre(emit, 2);
    a7ce:	2102      	movs	r1, #2
    a7d0:	68f8      	ldr	r0, [r7, #12]
    a7d2:	f7ff fcbb 	bl	a14c <emit_bc_pre>
    a7d6:	e003      	b.n	a7e0 <mp_emit_bc_setup_block+0x24>
    } else {
        emit_bc_pre(emit, 0);
    a7d8:	2100      	movs	r1, #0
    a7da:	68f8      	ldr	r0, [r7, #12]
    a7dc:	f7ff fcb6 	bl	a14c <emit_bc_pre>
    }
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH + kind, label);
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	b2db      	uxtb	r3, r3
    a7e4:	333d      	adds	r3, #61	; 0x3d
    a7e6:	b2db      	uxtb	r3, r3
    a7e8:	68ba      	ldr	r2, [r7, #8]
    a7ea:	4619      	mov	r1, r3
    a7ec:	68f8      	ldr	r0, [r7, #12]
    a7ee:	f7ff fa8e 	bl	9d0e <emit_write_bytecode_byte_unsigned_label>
}
    a7f2:	bf00      	nop
    a7f4:	3710      	adds	r7, #16
    a7f6:	46bd      	mov	sp, r7
    a7f8:	bd80      	pop	{r7, pc}

0000a7fa <mp_emit_bc_with_cleanup>:

void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    a7fa:	b580      	push	{r7, lr}
    a7fc:	b082      	sub	sp, #8
    a7fe:	af00      	add	r7, sp, #0
    a800:	6078      	str	r0, [r7, #4]
    a802:	6039      	str	r1, [r7, #0]
    mp_emit_bc_pop_block(emit);
    a804:	6878      	ldr	r0, [r7, #4]
    a806:	f000 f867 	bl	a8d8 <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    a80a:	210e      	movs	r1, #14
    a80c:	6878      	ldr	r0, [r7, #4]
    a80e:	f7ff fd33 	bl	a278 <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    a812:	6839      	ldr	r1, [r7, #0]
    a814:	6878      	ldr	r0, [r7, #4]
    a816:	f7ff fcb1 	bl	a17c <mp_emit_bc_label_assign>
    emit_bc_pre(emit, 2); // ensure we have enough stack space to call the __exit__ method
    a81a:	2102      	movs	r1, #2
    a81c:	6878      	ldr	r0, [r7, #4]
    a81e:	f7ff fc95 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    a822:	213e      	movs	r1, #62	; 0x3e
    a824:	6878      	ldr	r0, [r7, #4]
    a826:	f7ff f939 	bl	9a9c <emit_write_bytecode_byte>
    emit_bc_pre(emit, -4); // cancel the 2 above, plus the 2 from mp_emit_bc_setup_block(MP_EMIT_SETUP_BLOCK_WITH)
    a82a:	f06f 0103 	mvn.w	r1, #3
    a82e:	6878      	ldr	r0, [r7, #4]
    a830:	f7ff fc8c 	bl	a14c <emit_bc_pre>
}
    a834:	bf00      	nop
    a836:	3708      	adds	r7, #8
    a838:	46bd      	mov	sp, r7
    a83a:	bd80      	pop	{r7, pc}

0000a83c <mp_emit_bc_end_finally>:

void mp_emit_bc_end_finally(emit_t *emit) {
    a83c:	b580      	push	{r7, lr}
    a83e:	b082      	sub	sp, #8
    a840:	af00      	add	r7, sp, #0
    a842:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a848:	6878      	ldr	r0, [r7, #4]
    a84a:	f7ff fc7f 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    a84e:	2141      	movs	r1, #65	; 0x41
    a850:	6878      	ldr	r0, [r7, #4]
    a852:	f7ff f923 	bl	9a9c <emit_write_bytecode_byte>
}
    a856:	bf00      	nop
    a858:	3708      	adds	r7, #8
    a85a:	46bd      	mov	sp, r7
    a85c:	bd80      	pop	{r7, pc}

0000a85e <mp_emit_bc_get_iter>:

void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    a85e:	b580      	push	{r7, lr}
    a860:	b082      	sub	sp, #8
    a862:	af00      	add	r7, sp, #0
    a864:	6078      	str	r0, [r7, #4]
    a866:	460b      	mov	r3, r1
    a868:	70fb      	strb	r3, [r7, #3]
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    a86a:	78fb      	ldrb	r3, [r7, #3]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d001      	beq.n	a874 <mp_emit_bc_get_iter+0x16>
    a870:	2303      	movs	r3, #3
    a872:	e000      	b.n	a876 <mp_emit_bc_get_iter+0x18>
    a874:	2300      	movs	r3, #0
    a876:	4619      	mov	r1, r3
    a878:	6878      	ldr	r0, [r7, #4]
    a87a:	f7ff fc67 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    a87e:	78fb      	ldrb	r3, [r7, #3]
    a880:	2b00      	cmp	r3, #0
    a882:	d001      	beq.n	a888 <mp_emit_bc_get_iter+0x2a>
    a884:	2347      	movs	r3, #71	; 0x47
    a886:	e000      	b.n	a88a <mp_emit_bc_get_iter+0x2c>
    a888:	2342      	movs	r3, #66	; 0x42
    a88a:	4619      	mov	r1, r3
    a88c:	6878      	ldr	r0, [r7, #4]
    a88e:	f7ff f905 	bl	9a9c <emit_write_bytecode_byte>
}
    a892:	bf00      	nop
    a894:	3708      	adds	r7, #8
    a896:	46bd      	mov	sp, r7
    a898:	bd80      	pop	{r7, pc}

0000a89a <mp_emit_bc_for_iter>:

void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    a89a:	b580      	push	{r7, lr}
    a89c:	b082      	sub	sp, #8
    a89e:	af00      	add	r7, sp, #0
    a8a0:	6078      	str	r0, [r7, #4]
    a8a2:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a8a4:	2101      	movs	r1, #1
    a8a6:	6878      	ldr	r0, [r7, #4]
    a8a8:	f7ff fc50 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    a8ac:	683a      	ldr	r2, [r7, #0]
    a8ae:	2143      	movs	r1, #67	; 0x43
    a8b0:	6878      	ldr	r0, [r7, #4]
    a8b2:	f7ff fa2c 	bl	9d0e <emit_write_bytecode_byte_unsigned_label>
}
    a8b6:	bf00      	nop
    a8b8:	3708      	adds	r7, #8
    a8ba:	46bd      	mov	sp, r7
    a8bc:	bd80      	pop	{r7, pc}

0000a8be <mp_emit_bc_for_iter_end>:

void mp_emit_bc_for_iter_end(emit_t *emit) {
    a8be:	b580      	push	{r7, lr}
    a8c0:	b082      	sub	sp, #8
    a8c2:	af00      	add	r7, sp, #0
    a8c4:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -MP_OBJ_ITER_BUF_NSLOTS);
    a8c6:	f06f 0103 	mvn.w	r1, #3
    a8ca:	6878      	ldr	r0, [r7, #4]
    a8cc:	f7ff fc3e 	bl	a14c <emit_bc_pre>
}
    a8d0:	bf00      	nop
    a8d2:	3708      	adds	r7, #8
    a8d4:	46bd      	mov	sp, r7
    a8d6:	bd80      	pop	{r7, pc}

0000a8d8 <mp_emit_bc_pop_block>:

void mp_emit_bc_pop_block(emit_t *emit) {
    a8d8:	b580      	push	{r7, lr}
    a8da:	b082      	sub	sp, #8
    a8dc:	af00      	add	r7, sp, #0
    a8de:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a8e0:	2100      	movs	r1, #0
    a8e2:	6878      	ldr	r0, [r7, #4]
    a8e4:	f7ff fc32 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    a8e8:	2144      	movs	r1, #68	; 0x44
    a8ea:	6878      	ldr	r0, [r7, #4]
    a8ec:	f7ff f8d6 	bl	9a9c <emit_write_bytecode_byte>
}
    a8f0:	bf00      	nop
    a8f2:	3708      	adds	r7, #8
    a8f4:	46bd      	mov	sp, r7
    a8f6:	bd80      	pop	{r7, pc}

0000a8f8 <mp_emit_bc_pop_except>:

void mp_emit_bc_pop_except(emit_t *emit) {
    a8f8:	b580      	push	{r7, lr}
    a8fa:	b082      	sub	sp, #8
    a8fc:	af00      	add	r7, sp, #0
    a8fe:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a900:	2100      	movs	r1, #0
    a902:	6878      	ldr	r0, [r7, #4]
    a904:	f7ff fc22 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    a908:	2145      	movs	r1, #69	; 0x45
    a90a:	6878      	ldr	r0, [r7, #4]
    a90c:	f7ff f8c6 	bl	9a9c <emit_write_bytecode_byte>
}
    a910:	bf00      	nop
    a912:	3708      	adds	r7, #8
    a914:	46bd      	mov	sp, r7
    a916:	bd80      	pop	{r7, pc}

0000a918 <mp_emit_bc_unary_op>:

void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    a918:	b580      	push	{r7, lr}
    a91a:	b082      	sub	sp, #8
    a91c:	af00      	add	r7, sp, #0
    a91e:	6078      	str	r0, [r7, #4]
    a920:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a922:	2100      	movs	r1, #0
    a924:	6878      	ldr	r0, [r7, #4]
    a926:	f7ff fc11 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    a92a:	683b      	ldr	r3, [r7, #0]
    a92c:	b2db      	uxtb	r3, r3
    a92e:	3b30      	subs	r3, #48	; 0x30
    a930:	b2db      	uxtb	r3, r3
    a932:	4619      	mov	r1, r3
    a934:	6878      	ldr	r0, [r7, #4]
    a936:	f7ff f8b1 	bl	9a9c <emit_write_bytecode_byte>
}
    a93a:	bf00      	nop
    a93c:	3708      	adds	r7, #8
    a93e:	46bd      	mov	sp, r7
    a940:	bd80      	pop	{r7, pc}

0000a942 <mp_emit_bc_binary_op>:

void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    a942:	b580      	push	{r7, lr}
    a944:	b084      	sub	sp, #16
    a946:	af00      	add	r7, sp, #0
    a948:	6078      	str	r0, [r7, #4]
    a94a:	6039      	str	r1, [r7, #0]
    bool invert = false;
    a94c:	2300      	movs	r3, #0
    a94e:	73fb      	strb	r3, [r7, #15]
    if (op == MP_BINARY_OP_NOT_IN) {
    a950:	683b      	ldr	r3, [r7, #0]
    a952:	2b24      	cmp	r3, #36	; 0x24
    a954:	d104      	bne.n	a960 <mp_emit_bc_binary_op+0x1e>
        invert = true;
    a956:	2301      	movs	r3, #1
    a958:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IN;
    a95a:	2306      	movs	r3, #6
    a95c:	603b      	str	r3, [r7, #0]
    a95e:	e006      	b.n	a96e <mp_emit_bc_binary_op+0x2c>
    } else if (op == MP_BINARY_OP_IS_NOT) {
    a960:	683b      	ldr	r3, [r7, #0]
    a962:	2b25      	cmp	r3, #37	; 0x25
    a964:	d103      	bne.n	a96e <mp_emit_bc_binary_op+0x2c>
        invert = true;
    a966:	2301      	movs	r3, #1
    a968:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IS;
    a96a:	2307      	movs	r3, #7
    a96c:	603b      	str	r3, [r7, #0]
    }
    emit_bc_pre(emit, -1);
    a96e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a972:	6878      	ldr	r0, [r7, #4]
    a974:	f7ff fbea 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    a978:	683b      	ldr	r3, [r7, #0]
    a97a:	b2db      	uxtb	r3, r3
    a97c:	3b29      	subs	r3, #41	; 0x29
    a97e:	b2db      	uxtb	r3, r3
    a980:	4619      	mov	r1, r3
    a982:	6878      	ldr	r0, [r7, #4]
    a984:	f7ff f88a 	bl	9a9c <emit_write_bytecode_byte>
    if (invert) {
    a988:	7bfb      	ldrb	r3, [r7, #15]
    a98a:	2b00      	cmp	r3, #0
    a98c:	d007      	beq.n	a99e <mp_emit_bc_binary_op+0x5c>
        emit_bc_pre(emit, 0);
    a98e:	2100      	movs	r1, #0
    a990:	6878      	ldr	r0, [r7, #4]
    a992:	f7ff fbdb 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    a996:	21d3      	movs	r1, #211	; 0xd3
    a998:	6878      	ldr	r0, [r7, #4]
    a99a:	f7ff f87f 	bl	9a9c <emit_write_bytecode_byte>
    }
}
    a99e:	bf00      	nop
    a9a0:	3710      	adds	r7, #16
    a9a2:	46bd      	mov	sp, r7
    a9a4:	bd80      	pop	{r7, pc}

0000a9a6 <mp_emit_bc_build>:

void mp_emit_bc_build(emit_t *emit, mp_uint_t n_args, int kind) {
    a9a6:	b580      	push	{r7, lr}
    a9a8:	b084      	sub	sp, #16
    a9aa:	af00      	add	r7, sp, #0
    a9ac:	60f8      	str	r0, [r7, #12]
    a9ae:	60b9      	str	r1, [r7, #8]
    a9b0:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_TUPLE == MP_BC_BUILD_TUPLE);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_LIST == MP_BC_BUILD_LIST);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_MAP == MP_BC_BUILD_MAP);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SET == MP_BC_BUILD_SET);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SLICE == MP_BC_BUILD_SLICE);
    if (kind == MP_EMIT_BUILD_MAP) {
    a9b2:	687b      	ldr	r3, [r7, #4]
    a9b4:	2b03      	cmp	r3, #3
    a9b6:	d104      	bne.n	a9c2 <mp_emit_bc_build+0x1c>
        emit_bc_pre(emit, 1);
    a9b8:	2101      	movs	r1, #1
    a9ba:	68f8      	ldr	r0, [r7, #12]
    a9bc:	f7ff fbc6 	bl	a14c <emit_bc_pre>
    a9c0:	e006      	b.n	a9d0 <mp_emit_bc_build+0x2a>
    } else {
        emit_bc_pre(emit, 1 - n_args);
    a9c2:	68bb      	ldr	r3, [r7, #8]
    a9c4:	f1c3 0301 	rsb	r3, r3, #1
    a9c8:	4619      	mov	r1, r3
    a9ca:	68f8      	ldr	r0, [r7, #12]
    a9cc:	f7ff fbbe 	bl	a14c <emit_bc_pre>
    }
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE + kind, n_args);
    a9d0:	687b      	ldr	r3, [r7, #4]
    a9d2:	b2db      	uxtb	r3, r3
    a9d4:	3350      	adds	r3, #80	; 0x50
    a9d6:	b2db      	uxtb	r3, r3
    a9d8:	68ba      	ldr	r2, [r7, #8]
    a9da:	4619      	mov	r1, r3
    a9dc:	68f8      	ldr	r0, [r7, #12]
    a9de:	f7ff f8f0 	bl	9bc2 <emit_write_bytecode_byte_uint>
}
    a9e2:	bf00      	nop
    a9e4:	3710      	adds	r7, #16
    a9e6:	46bd      	mov	sp, r7
    a9e8:	bd80      	pop	{r7, pc}

0000a9ea <mp_emit_bc_store_map>:

void mp_emit_bc_store_map(emit_t *emit) {
    a9ea:	b580      	push	{r7, lr}
    a9ec:	b082      	sub	sp, #8
    a9ee:	af00      	add	r7, sp, #0
    a9f0:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -2);
    a9f2:	f06f 0101 	mvn.w	r1, #1
    a9f6:	6878      	ldr	r0, [r7, #4]
    a9f8:	f7ff fba8 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    a9fc:	2154      	movs	r1, #84	; 0x54
    a9fe:	6878      	ldr	r0, [r7, #4]
    aa00:	f7ff f84c 	bl	9a9c <emit_write_bytecode_byte>
}
    aa04:	bf00      	nop
    aa06:	3708      	adds	r7, #8
    aa08:	46bd      	mov	sp, r7
    aa0a:	bd80      	pop	{r7, pc}

0000aa0c <mp_emit_bc_store_comp>:

void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    aa0c:	b580      	push	{r7, lr}
    aa0e:	b086      	sub	sp, #24
    aa10:	af00      	add	r7, sp, #0
    aa12:	60f8      	str	r0, [r7, #12]
    aa14:	60b9      	str	r1, [r7, #8]
    aa16:	607a      	str	r2, [r7, #4]
    int t;
    int n;
    if (kind == SCOPE_LIST_COMP) {
    aa18:	68bb      	ldr	r3, [r7, #8]
    aa1a:	2b03      	cmp	r3, #3
    aa1c:	d104      	bne.n	aa28 <mp_emit_bc_store_comp+0x1c>
        n = 0;
    aa1e:	2300      	movs	r3, #0
    aa20:	613b      	str	r3, [r7, #16]
        t = 0;
    aa22:	2300      	movs	r3, #0
    aa24:	617b      	str	r3, [r7, #20]
    aa26:	e003      	b.n	aa30 <mp_emit_bc_store_comp+0x24>
    } else if (!MICROPY_PY_BUILTINS_SET || kind == SCOPE_DICT_COMP) {
        n = 1;
    aa28:	2301      	movs	r3, #1
    aa2a:	613b      	str	r3, [r7, #16]
        t = 1;
    aa2c:	2301      	movs	r3, #1
    aa2e:	617b      	str	r3, [r7, #20]
    } else if (MICROPY_PY_BUILTINS_SET) {
        n = 0;
        t = 2;
    }
    emit_bc_pre(emit, -1 - n);
    aa30:	693b      	ldr	r3, [r7, #16]
    aa32:	43db      	mvns	r3, r3
    aa34:	4619      	mov	r1, r3
    aa36:	68f8      	ldr	r0, [r7, #12]
    aa38:	f7ff fb88 	bl	a14c <emit_bc_pre>
    // the lower 2 bits of the opcode argument indicate the collection type
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    aa3c:	693a      	ldr	r2, [r7, #16]
    aa3e:	687b      	ldr	r3, [r7, #4]
    aa40:	4413      	add	r3, r2
    aa42:	009a      	lsls	r2, r3, #2
    aa44:	697b      	ldr	r3, [r7, #20]
    aa46:	4313      	orrs	r3, r2
    aa48:	461a      	mov	r2, r3
    aa4a:	2157      	movs	r1, #87	; 0x57
    aa4c:	68f8      	ldr	r0, [r7, #12]
    aa4e:	f7ff f8b8 	bl	9bc2 <emit_write_bytecode_byte_uint>
}
    aa52:	bf00      	nop
    aa54:	3718      	adds	r7, #24
    aa56:	46bd      	mov	sp, r7
    aa58:	bd80      	pop	{r7, pc}

0000aa5a <mp_emit_bc_unpack_sequence>:

void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    aa5a:	b580      	push	{r7, lr}
    aa5c:	b082      	sub	sp, #8
    aa5e:	af00      	add	r7, sp, #0
    aa60:	6078      	str	r0, [r7, #4]
    aa62:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1 + n_args);
    aa64:	683b      	ldr	r3, [r7, #0]
    aa66:	3b01      	subs	r3, #1
    aa68:	4619      	mov	r1, r3
    aa6a:	6878      	ldr	r0, [r7, #4]
    aa6c:	f7ff fb6e 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    aa70:	683a      	ldr	r2, [r7, #0]
    aa72:	2159      	movs	r1, #89	; 0x59
    aa74:	6878      	ldr	r0, [r7, #4]
    aa76:	f7ff f8a4 	bl	9bc2 <emit_write_bytecode_byte_uint>
}
    aa7a:	bf00      	nop
    aa7c:	3708      	adds	r7, #8
    aa7e:	46bd      	mov	sp, r7
    aa80:	bd80      	pop	{r7, pc}

0000aa82 <mp_emit_bc_unpack_ex>:

void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    aa82:	b580      	push	{r7, lr}
    aa84:	b084      	sub	sp, #16
    aa86:	af00      	add	r7, sp, #0
    aa88:	60f8      	str	r0, [r7, #12]
    aa8a:	60b9      	str	r1, [r7, #8]
    aa8c:	607a      	str	r2, [r7, #4]
    emit_bc_pre(emit, -1 + n_left + n_right + 1);
    aa8e:	68ba      	ldr	r2, [r7, #8]
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	4413      	add	r3, r2
    aa94:	4619      	mov	r1, r3
    aa96:	68f8      	ldr	r0, [r7, #12]
    aa98:	f7ff fb58 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    aa9c:	687b      	ldr	r3, [r7, #4]
    aa9e:	021a      	lsls	r2, r3, #8
    aaa0:	68bb      	ldr	r3, [r7, #8]
    aaa2:	4313      	orrs	r3, r2
    aaa4:	461a      	mov	r2, r3
    aaa6:	215a      	movs	r1, #90	; 0x5a
    aaa8:	68f8      	ldr	r0, [r7, #12]
    aaaa:	f7ff f88a 	bl	9bc2 <emit_write_bytecode_byte_uint>
}
    aaae:	bf00      	nop
    aab0:	3710      	adds	r7, #16
    aab2:	46bd      	mov	sp, r7
    aab4:	bd80      	pop	{r7, pc}

0000aab6 <mp_emit_bc_make_function>:

void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    aab6:	b580      	push	{r7, lr}
    aab8:	b084      	sub	sp, #16
    aaba:	af00      	add	r7, sp, #0
    aabc:	60f8      	str	r0, [r7, #12]
    aabe:	60b9      	str	r1, [r7, #8]
    aac0:	607a      	str	r2, [r7, #4]
    aac2:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	2b00      	cmp	r3, #0
    aac8:	d10e      	bne.n	aae8 <mp_emit_bc_make_function+0x32>
    aaca:	683b      	ldr	r3, [r7, #0]
    aacc:	2b00      	cmp	r3, #0
    aace:	d10b      	bne.n	aae8 <mp_emit_bc_make_function+0x32>
        emit_bc_pre(emit, 1);
    aad0:	2101      	movs	r1, #1
    aad2:	68f8      	ldr	r0, [r7, #12]
    aad4:	f7ff fb3a 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    aad8:	68bb      	ldr	r3, [r7, #8]
    aada:	691b      	ldr	r3, [r3, #16]
    aadc:	461a      	mov	r2, r3
    aade:	2160      	movs	r1, #96	; 0x60
    aae0:	68f8      	ldr	r0, [r7, #12]
    aae2:	f7ff f8f1 	bl	9cc8 <emit_write_bytecode_byte_raw_code>
    aae6:	e00b      	b.n	ab00 <mp_emit_bc_make_function+0x4a>
    } else {
        emit_bc_pre(emit, -1);
    aae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aaec:	68f8      	ldr	r0, [r7, #12]
    aaee:	f7ff fb2d 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    aaf2:	68bb      	ldr	r3, [r7, #8]
    aaf4:	691b      	ldr	r3, [r3, #16]
    aaf6:	461a      	mov	r2, r3
    aaf8:	2161      	movs	r1, #97	; 0x61
    aafa:	68f8      	ldr	r0, [r7, #12]
    aafc:	f7ff f8e4 	bl	9cc8 <emit_write_bytecode_byte_raw_code>
    }
}
    ab00:	bf00      	nop
    ab02:	3710      	adds	r7, #16
    ab04:	46bd      	mov	sp, r7
    ab06:	bd80      	pop	{r7, pc}

0000ab08 <mp_emit_bc_make_closure>:

void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ab08:	b580      	push	{r7, lr}
    ab0a:	b084      	sub	sp, #16
    ab0c:	af00      	add	r7, sp, #0
    ab0e:	60f8      	str	r0, [r7, #12]
    ab10:	60b9      	str	r1, [r7, #8]
    ab12:	607a      	str	r2, [r7, #4]
    ab14:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ab16:	683b      	ldr	r3, [r7, #0]
    ab18:	2b00      	cmp	r3, #0
    ab1a:	d117      	bne.n	ab4c <mp_emit_bc_make_closure+0x44>
    ab1c:	69bb      	ldr	r3, [r7, #24]
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d114      	bne.n	ab4c <mp_emit_bc_make_closure+0x44>
        emit_bc_pre(emit, -n_closed_over + 1);
    ab22:	687b      	ldr	r3, [r7, #4]
    ab24:	f1c3 0301 	rsb	r3, r3, #1
    ab28:	4619      	mov	r1, r3
    ab2a:	68f8      	ldr	r0, [r7, #12]
    ab2c:	f7ff fb0e 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    ab30:	68bb      	ldr	r3, [r7, #8]
    ab32:	691b      	ldr	r3, [r3, #16]
    ab34:	461a      	mov	r2, r3
    ab36:	2162      	movs	r1, #98	; 0x62
    ab38:	68f8      	ldr	r0, [r7, #12]
    ab3a:	f7ff f8c5 	bl	9cc8 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ab3e:	687b      	ldr	r3, [r7, #4]
    ab40:	b2db      	uxtb	r3, r3
    ab42:	4619      	mov	r1, r3
    ab44:	68f8      	ldr	r0, [r7, #12]
    ab46:	f7fe ffa9 	bl	9a9c <emit_write_bytecode_byte>
    ab4a:	e01c      	b.n	ab86 <mp_emit_bc_make_closure+0x7e>
    } else {
        assert(n_closed_over <= 255);
    ab4c:	687b      	ldr	r3, [r7, #4]
    ab4e:	2bff      	cmp	r3, #255	; 0xff
    ab50:	d906      	bls.n	ab60 <mp_emit_bc_make_closure+0x58>
    ab52:	4b0f      	ldr	r3, [pc, #60]	; (ab90 <mp_emit_bc_make_closure+0x88>)
    ab54:	4a0f      	ldr	r2, [pc, #60]	; (ab94 <mp_emit_bc_make_closure+0x8c>)
    ab56:	f240 315b 	movw	r1, #859	; 0x35b
    ab5a:	480f      	ldr	r0, [pc, #60]	; (ab98 <mp_emit_bc_make_closure+0x90>)
    ab5c:	f010 fc90 	bl	1b480 <__assert_func>
        emit_bc_pre(emit, -2 - (mp_int_t)n_closed_over + 1);
    ab60:	687b      	ldr	r3, [r7, #4]
    ab62:	43db      	mvns	r3, r3
    ab64:	4619      	mov	r1, r3
    ab66:	68f8      	ldr	r0, [r7, #12]
    ab68:	f7ff faf0 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    ab6c:	68bb      	ldr	r3, [r7, #8]
    ab6e:	691b      	ldr	r3, [r3, #16]
    ab70:	461a      	mov	r2, r3
    ab72:	2163      	movs	r1, #99	; 0x63
    ab74:	68f8      	ldr	r0, [r7, #12]
    ab76:	f7ff f8a7 	bl	9cc8 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ab7a:	687b      	ldr	r3, [r7, #4]
    ab7c:	b2db      	uxtb	r3, r3
    ab7e:	4619      	mov	r1, r3
    ab80:	68f8      	ldr	r0, [r7, #12]
    ab82:	f7fe ff8b 	bl	9a9c <emit_write_bytecode_byte>
    }
}
    ab86:	bf00      	nop
    ab88:	3710      	adds	r7, #16
    ab8a:	46bd      	mov	sp, r7
    ab8c:	bd80      	pop	{r7, pc}
    ab8e:	bf00      	nop
    ab90:	00020fdc 	.word	0x00020fdc
    ab94:	00021114 	.word	0x00021114
    ab98:	00020e40 	.word	0x00020e40

0000ab9c <emit_bc_call_function_method_helper>:

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ab9c:	b580      	push	{r7, lr}
    ab9e:	b084      	sub	sp, #16
    aba0:	af00      	add	r7, sp, #0
    aba2:	60f8      	str	r0, [r7, #12]
    aba4:	60b9      	str	r1, [r7, #8]
    aba6:	607a      	str	r2, [r7, #4]
    aba8:	603b      	str	r3, [r7, #0]
    if (star_flags) {
    abaa:	69fb      	ldr	r3, [r7, #28]
    abac:	2b00      	cmp	r3, #0
    abae:	d017      	beq.n	abe0 <emit_bc_call_function_method_helper+0x44>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    abb0:	683b      	ldr	r3, [r7, #0]
    abb2:	68ba      	ldr	r2, [r7, #8]
    abb4:	1ad2      	subs	r2, r2, r3
    abb6:	69bb      	ldr	r3, [r7, #24]
    abb8:	005b      	lsls	r3, r3, #1
    abba:	1ad3      	subs	r3, r2, r3
    abbc:	3b02      	subs	r3, #2
    abbe:	4619      	mov	r1, r3
    abc0:	68f8      	ldr	r0, [r7, #12]
    abc2:	f7ff fac3 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    abc6:	687b      	ldr	r3, [r7, #4]
    abc8:	b2db      	uxtb	r3, r3
    abca:	3301      	adds	r3, #1
    abcc:	b2d9      	uxtb	r1, r3
    abce:	69bb      	ldr	r3, [r7, #24]
    abd0:	021a      	lsls	r2, r3, #8
    abd2:	683b      	ldr	r3, [r7, #0]
    abd4:	4313      	orrs	r3, r2
    abd6:	461a      	mov	r2, r3
    abd8:	68f8      	ldr	r0, [r7, #12]
    abda:	f7fe fff2 	bl	9bc2 <emit_write_bytecode_byte_uint>
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    }
}
    abde:	e013      	b.n	ac08 <emit_bc_call_function_method_helper+0x6c>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    abe0:	683b      	ldr	r3, [r7, #0]
    abe2:	68ba      	ldr	r2, [r7, #8]
    abe4:	1ad2      	subs	r2, r2, r3
    abe6:	69bb      	ldr	r3, [r7, #24]
    abe8:	005b      	lsls	r3, r3, #1
    abea:	1ad3      	subs	r3, r2, r3
    abec:	4619      	mov	r1, r3
    abee:	68f8      	ldr	r0, [r7, #12]
    abf0:	f7ff faac 	bl	a14c <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    abf4:	687b      	ldr	r3, [r7, #4]
    abf6:	b2d9      	uxtb	r1, r3
    abf8:	69bb      	ldr	r3, [r7, #24]
    abfa:	021a      	lsls	r2, r3, #8
    abfc:	683b      	ldr	r3, [r7, #0]
    abfe:	4313      	orrs	r3, r2
    ac00:	461a      	mov	r2, r3
    ac02:	68f8      	ldr	r0, [r7, #12]
    ac04:	f7fe ffdd 	bl	9bc2 <emit_write_bytecode_byte_uint>
}
    ac08:	bf00      	nop
    ac0a:	3710      	adds	r7, #16
    ac0c:	46bd      	mov	sp, r7
    ac0e:	bd80      	pop	{r7, pc}

0000ac10 <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ac10:	b580      	push	{r7, lr}
    ac12:	b086      	sub	sp, #24
    ac14:	af02      	add	r7, sp, #8
    ac16:	60f8      	str	r0, [r7, #12]
    ac18:	60b9      	str	r1, [r7, #8]
    ac1a:	607a      	str	r2, [r7, #4]
    ac1c:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    ac1e:	683b      	ldr	r3, [r7, #0]
    ac20:	9301      	str	r3, [sp, #4]
    ac22:	687b      	ldr	r3, [r7, #4]
    ac24:	9300      	str	r3, [sp, #0]
    ac26:	68bb      	ldr	r3, [r7, #8]
    ac28:	2264      	movs	r2, #100	; 0x64
    ac2a:	2100      	movs	r1, #0
    ac2c:	68f8      	ldr	r0, [r7, #12]
    ac2e:	f7ff ffb5 	bl	ab9c <emit_bc_call_function_method_helper>
}
    ac32:	bf00      	nop
    ac34:	3710      	adds	r7, #16
    ac36:	46bd      	mov	sp, r7
    ac38:	bd80      	pop	{r7, pc}

0000ac3a <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ac3a:	b580      	push	{r7, lr}
    ac3c:	b086      	sub	sp, #24
    ac3e:	af02      	add	r7, sp, #8
    ac40:	60f8      	str	r0, [r7, #12]
    ac42:	60b9      	str	r1, [r7, #8]
    ac44:	607a      	str	r2, [r7, #4]
    ac46:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    ac48:	683b      	ldr	r3, [r7, #0]
    ac4a:	9301      	str	r3, [sp, #4]
    ac4c:	687b      	ldr	r3, [r7, #4]
    ac4e:	9300      	str	r3, [sp, #0]
    ac50:	68bb      	ldr	r3, [r7, #8]
    ac52:	2266      	movs	r2, #102	; 0x66
    ac54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac58:	68f8      	ldr	r0, [r7, #12]
    ac5a:	f7ff ff9f 	bl	ab9c <emit_bc_call_function_method_helper>
}
    ac5e:	bf00      	nop
    ac60:	3710      	adds	r7, #16
    ac62:	46bd      	mov	sp, r7
    ac64:	bd80      	pop	{r7, pc}

0000ac66 <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    ac66:	b580      	push	{r7, lr}
    ac68:	b082      	sub	sp, #8
    ac6a:	af00      	add	r7, sp, #0
    ac6c:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    ac6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac72:	6878      	ldr	r0, [r7, #4]
    ac74:	f7ff fa6a 	bl	a14c <emit_bc_pre>
    emit->last_emit_was_return_value = true;
    ac78:	687b      	ldr	r3, [r7, #4]
    ac7a:	2201      	movs	r2, #1
    ac7c:	719a      	strb	r2, [r3, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    ac7e:	215b      	movs	r1, #91	; 0x5b
    ac80:	6878      	ldr	r0, [r7, #4]
    ac82:	f7fe ff0b 	bl	9a9c <emit_write_bytecode_byte>
}
    ac86:	bf00      	nop
    ac88:	3708      	adds	r7, #8
    ac8a:	46bd      	mov	sp, r7
    ac8c:	bd80      	pop	{r7, pc}

0000ac8e <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    ac8e:	b580      	push	{r7, lr}
    ac90:	b082      	sub	sp, #8
    ac92:	af00      	add	r7, sp, #0
    ac94:	6078      	str	r0, [r7, #4]
    ac96:	6039      	str	r1, [r7, #0]
    assert(n_args <= 2);
    ac98:	683b      	ldr	r3, [r7, #0]
    ac9a:	2b02      	cmp	r3, #2
    ac9c:	d906      	bls.n	acac <mp_emit_bc_raise_varargs+0x1e>
    ac9e:	4b0c      	ldr	r3, [pc, #48]	; (acd0 <mp_emit_bc_raise_varargs+0x42>)
    aca0:	4a0c      	ldr	r2, [pc, #48]	; (acd4 <mp_emit_bc_raise_varargs+0x46>)
    aca2:	f240 317b 	movw	r1, #891	; 0x37b
    aca6:	480c      	ldr	r0, [pc, #48]	; (acd8 <mp_emit_bc_raise_varargs+0x4a>)
    aca8:	f010 fbea 	bl	1b480 <__assert_func>
    emit_bc_pre(emit, -n_args);
    acac:	683b      	ldr	r3, [r7, #0]
    acae:	425b      	negs	r3, r3
    acb0:	4619      	mov	r1, r3
    acb2:	6878      	ldr	r0, [r7, #4]
    acb4:	f7ff fa4a 	bl	a14c <emit_bc_pre>
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    acb8:	683b      	ldr	r3, [r7, #0]
    acba:	b2db      	uxtb	r3, r3
    acbc:	461a      	mov	r2, r3
    acbe:	215c      	movs	r1, #92	; 0x5c
    acc0:	6878      	ldr	r0, [r7, #4]
    acc2:	f7fe fefd 	bl	9ac0 <emit_write_bytecode_byte_byte>
}
    acc6:	bf00      	nop
    acc8:	3708      	adds	r7, #8
    acca:	46bd      	mov	sp, r7
    accc:	bd80      	pop	{r7, pc}
    acce:	bf00      	nop
    acd0:	00020ff4 	.word	0x00020ff4
    acd4:	0002112c 	.word	0x0002112c
    acd8:	00020e40 	.word	0x00020e40

0000acdc <mp_emit_bc_yield>:

void mp_emit_bc_yield(emit_t *emit, int kind) {
    acdc:	b580      	push	{r7, lr}
    acde:	b082      	sub	sp, #8
    ace0:	af00      	add	r7, sp, #0
    ace2:	6078      	str	r0, [r7, #4]
    ace4:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_YIELD_VALUE + 1 == MP_BC_YIELD_FROM);
    emit_bc_pre(emit, -kind);
    ace6:	683b      	ldr	r3, [r7, #0]
    ace8:	425b      	negs	r3, r3
    acea:	4619      	mov	r1, r3
    acec:	6878      	ldr	r0, [r7, #4]
    acee:	f7ff fa2d 	bl	a14c <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    acf2:	687b      	ldr	r3, [r7, #4]
    acf4:	68db      	ldr	r3, [r3, #12]
    acf6:	687a      	ldr	r2, [r7, #4]
    acf8:	68d2      	ldr	r2, [r2, #12]
    acfa:	8b12      	ldrh	r2, [r2, #24]
    acfc:	f042 0204 	orr.w	r2, r2, #4
    ad00:	b292      	uxth	r2, r2
    ad02:	831a      	strh	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE + kind);
    ad04:	683b      	ldr	r3, [r7, #0]
    ad06:	b2db      	uxtb	r3, r3
    ad08:	335d      	adds	r3, #93	; 0x5d
    ad0a:	b2db      	uxtb	r3, r3
    ad0c:	4619      	mov	r1, r3
    ad0e:	6878      	ldr	r0, [r7, #4]
    ad10:	f7fe fec4 	bl	9a9c <emit_write_bytecode_byte>
}
    ad14:	bf00      	nop
    ad16:	3708      	adds	r7, #8
    ad18:	46bd      	mov	sp, r7
    ad1a:	bd80      	pop	{r7, pc}

0000ad1c <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    ad1c:	b580      	push	{r7, lr}
    ad1e:	b082      	sub	sp, #8
    ad20:	af00      	add	r7, sp, #0
    ad22:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    ad24:	2104      	movs	r1, #4
    ad26:	6878      	ldr	r0, [r7, #4]
    ad28:	f7ff f9d9 	bl	a0de <mp_emit_bc_adjust_stack_size>
}
    ad2c:	bf00      	nop
    ad2e:	3708      	adds	r7, #8
    ad30:	46bd      	mov	sp, r7
    ad32:	bd80      	pop	{r7, pc}

0000ad34 <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    ad34:	b580      	push	{r7, lr}
    ad36:	b082      	sub	sp, #8
    ad38:	af00      	add	r7, sp, #0
    ad3a:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    ad3c:	f06f 0102 	mvn.w	r1, #2
    ad40:	6878      	ldr	r0, [r7, #4]
    ad42:	f7ff f9cc 	bl	a0de <mp_emit_bc_adjust_stack_size>
}
    ad46:	bf00      	nop
    ad48:	3708      	adds	r7, #8
    ad4a:	46bd      	mov	sp, r7
    ad4c:	bd80      	pop	{r7, pc}
    ad4e:	bf00      	nop

0000ad50 <mp_parse_num_base>:
#include "py/misc.h"
#include "py/parsenumbase.h"

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    ad50:	b480      	push	{r7}
    ad52:	b087      	sub	sp, #28
    ad54:	af00      	add	r7, sp, #0
    ad56:	60f8      	str	r0, [r7, #12]
    ad58:	60b9      	str	r1, [r7, #8]
    ad5a:	607a      	str	r2, [r7, #4]
    const byte *p = (const byte*)str;
    ad5c:	68fb      	ldr	r3, [r7, #12]
    ad5e:	617b      	str	r3, [r7, #20]
    if (len <= 1) {
    ad60:	68bb      	ldr	r3, [r7, #8]
    ad62:	2b01      	cmp	r3, #1
    ad64:	d971      	bls.n	ae4a <mp_parse_num_base+0xfa>
        goto no_prefix;
    }
    unichar c = *(p++);
    ad66:	697b      	ldr	r3, [r7, #20]
    ad68:	1c5a      	adds	r2, r3, #1
    ad6a:	617a      	str	r2, [r7, #20]
    ad6c:	781b      	ldrb	r3, [r3, #0]
    ad6e:	613b      	str	r3, [r7, #16]
    if ((*base == 0 || *base == 16) && c == '0') {
    ad70:	687b      	ldr	r3, [r7, #4]
    ad72:	681b      	ldr	r3, [r3, #0]
    ad74:	2b00      	cmp	r3, #0
    ad76:	d003      	beq.n	ad80 <mp_parse_num_base+0x30>
    ad78:	687b      	ldr	r3, [r7, #4]
    ad7a:	681b      	ldr	r3, [r3, #0]
    ad7c:	2b10      	cmp	r3, #16
    ad7e:	d136      	bne.n	adee <mp_parse_num_base+0x9e>
    ad80:	693b      	ldr	r3, [r7, #16]
    ad82:	2b30      	cmp	r3, #48	; 0x30
    ad84:	d133      	bne.n	adee <mp_parse_num_base+0x9e>
        c = *(p++);
    ad86:	697b      	ldr	r3, [r7, #20]
    ad88:	1c5a      	adds	r2, r3, #1
    ad8a:	617a      	str	r2, [r7, #20]
    ad8c:	781b      	ldrb	r3, [r3, #0]
    ad8e:	613b      	str	r3, [r7, #16]
        if ((c | 32) == 'x') {
    ad90:	693b      	ldr	r3, [r7, #16]
    ad92:	f043 0320 	orr.w	r3, r3, #32
    ad96:	2b78      	cmp	r3, #120	; 0x78
    ad98:	d103      	bne.n	ada2 <mp_parse_num_base+0x52>
            *base = 16;
    ad9a:	687b      	ldr	r3, [r7, #4]
    ad9c:	2210      	movs	r2, #16
    ad9e:	601a      	str	r2, [r3, #0]
        if ((c | 32) == 'x') {
    ada0:	e05b      	b.n	ae5a <mp_parse_num_base+0x10a>
        } else if (*base == 0 && (c | 32) == 'o') {
    ada2:	687b      	ldr	r3, [r7, #4]
    ada4:	681b      	ldr	r3, [r3, #0]
    ada6:	2b00      	cmp	r3, #0
    ada8:	d108      	bne.n	adbc <mp_parse_num_base+0x6c>
    adaa:	693b      	ldr	r3, [r7, #16]
    adac:	f043 0320 	orr.w	r3, r3, #32
    adb0:	2b6f      	cmp	r3, #111	; 0x6f
    adb2:	d103      	bne.n	adbc <mp_parse_num_base+0x6c>
            *base = 8;
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	2208      	movs	r2, #8
    adb8:	601a      	str	r2, [r3, #0]
    adba:	e017      	b.n	adec <mp_parse_num_base+0x9c>
        } else if (*base == 0 && (c | 32) == 'b') {
    adbc:	687b      	ldr	r3, [r7, #4]
    adbe:	681b      	ldr	r3, [r3, #0]
    adc0:	2b00      	cmp	r3, #0
    adc2:	d108      	bne.n	add6 <mp_parse_num_base+0x86>
    adc4:	693b      	ldr	r3, [r7, #16]
    adc6:	f043 0320 	orr.w	r3, r3, #32
    adca:	2b62      	cmp	r3, #98	; 0x62
    adcc:	d103      	bne.n	add6 <mp_parse_num_base+0x86>
            *base = 2;
    adce:	687b      	ldr	r3, [r7, #4]
    add0:	2202      	movs	r2, #2
    add2:	601a      	str	r2, [r3, #0]
    add4:	e00a      	b.n	adec <mp_parse_num_base+0x9c>
        } else {
            if (*base == 0) {
    add6:	687b      	ldr	r3, [r7, #4]
    add8:	681b      	ldr	r3, [r3, #0]
    adda:	2b00      	cmp	r3, #0
    addc:	d102      	bne.n	ade4 <mp_parse_num_base+0x94>
                *base = 10;
    adde:	687b      	ldr	r3, [r7, #4]
    ade0:	220a      	movs	r2, #10
    ade2:	601a      	str	r2, [r3, #0]
            }
            p -= 2;
    ade4:	697b      	ldr	r3, [r7, #20]
    ade6:	3b02      	subs	r3, #2
    ade8:	617b      	str	r3, [r7, #20]
        if ((c | 32) == 'x') {
    adea:	e036      	b.n	ae5a <mp_parse_num_base+0x10a>
    adec:	e035      	b.n	ae5a <mp_parse_num_base+0x10a>
        }
    } else if (*base == 8 && c == '0') {
    adee:	687b      	ldr	r3, [r7, #4]
    adf0:	681b      	ldr	r3, [r3, #0]
    adf2:	2b08      	cmp	r3, #8
    adf4:	d110      	bne.n	ae18 <mp_parse_num_base+0xc8>
    adf6:	693b      	ldr	r3, [r7, #16]
    adf8:	2b30      	cmp	r3, #48	; 0x30
    adfa:	d10d      	bne.n	ae18 <mp_parse_num_base+0xc8>
        c = *(p++);
    adfc:	697b      	ldr	r3, [r7, #20]
    adfe:	1c5a      	adds	r2, r3, #1
    ae00:	617a      	str	r2, [r7, #20]
    ae02:	781b      	ldrb	r3, [r3, #0]
    ae04:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'o') {
    ae06:	693b      	ldr	r3, [r7, #16]
    ae08:	f043 0320 	orr.w	r3, r3, #32
    ae0c:	2b6f      	cmp	r3, #111	; 0x6f
    ae0e:	d024      	beq.n	ae5a <mp_parse_num_base+0x10a>
            p -= 2;
    ae10:	697b      	ldr	r3, [r7, #20]
    ae12:	3b02      	subs	r3, #2
    ae14:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'o') {
    ae16:	e020      	b.n	ae5a <mp_parse_num_base+0x10a>
        }
    } else if (*base == 2 && c == '0') {
    ae18:	687b      	ldr	r3, [r7, #4]
    ae1a:	681b      	ldr	r3, [r3, #0]
    ae1c:	2b02      	cmp	r3, #2
    ae1e:	d110      	bne.n	ae42 <mp_parse_num_base+0xf2>
    ae20:	693b      	ldr	r3, [r7, #16]
    ae22:	2b30      	cmp	r3, #48	; 0x30
    ae24:	d10d      	bne.n	ae42 <mp_parse_num_base+0xf2>
        c = *(p++);
    ae26:	697b      	ldr	r3, [r7, #20]
    ae28:	1c5a      	adds	r2, r3, #1
    ae2a:	617a      	str	r2, [r7, #20]
    ae2c:	781b      	ldrb	r3, [r3, #0]
    ae2e:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'b') {
    ae30:	693b      	ldr	r3, [r7, #16]
    ae32:	f043 0320 	orr.w	r3, r3, #32
    ae36:	2b62      	cmp	r3, #98	; 0x62
    ae38:	d00f      	beq.n	ae5a <mp_parse_num_base+0x10a>
            p -= 2;
    ae3a:	697b      	ldr	r3, [r7, #20]
    ae3c:	3b02      	subs	r3, #2
    ae3e:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'b') {
    ae40:	e00b      	b.n	ae5a <mp_parse_num_base+0x10a>
        }
    } else {
        p--;
    ae42:	697b      	ldr	r3, [r7, #20]
    ae44:	3b01      	subs	r3, #1
    ae46:	617b      	str	r3, [r7, #20]
    ae48:	e000      	b.n	ae4c <mp_parse_num_base+0xfc>
        goto no_prefix;
    ae4a:	bf00      	nop
    no_prefix:
        if (*base == 0) {
    ae4c:	687b      	ldr	r3, [r7, #4]
    ae4e:	681b      	ldr	r3, [r3, #0]
    ae50:	2b00      	cmp	r3, #0
    ae52:	d102      	bne.n	ae5a <mp_parse_num_base+0x10a>
            *base = 10;
    ae54:	687b      	ldr	r3, [r7, #4]
    ae56:	220a      	movs	r2, #10
    ae58:	601a      	str	r2, [r3, #0]
        }
    }
    return p - (const byte*)str;
    ae5a:	697a      	ldr	r2, [r7, #20]
    ae5c:	68fb      	ldr	r3, [r7, #12]
    ae5e:	1ad3      	subs	r3, r2, r3
}
    ae60:	4618      	mov	r0, r3
    ae62:	371c      	adds	r7, #28
    ae64:	46bd      	mov	sp, r7
    ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae6a:	4770      	bx	lr

0000ae6c <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    ae6c:	b580      	push	{r7, lr}
    ae6e:	b082      	sub	sp, #8
    ae70:	af00      	add	r7, sp, #0
    ae72:	6078      	str	r0, [r7, #4]
    ae74:	6039      	str	r1, [r7, #0]
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    ae76:	683b      	ldr	r3, [r7, #0]
    ae78:	2b00      	cmp	r3, #0
    ae7a:	d00a      	beq.n	ae92 <raise_exc+0x26>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    ae7c:	687b      	ldr	r3, [r7, #4]
    ae7e:	4a06      	ldr	r2, [pc, #24]	; (ae98 <raise_exc+0x2c>)
    ae80:	601a      	str	r2, [r3, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    ae82:	683b      	ldr	r3, [r7, #0]
    ae84:	6819      	ldr	r1, [r3, #0]
    ae86:	683b      	ldr	r3, [r7, #0]
    ae88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ae8a:	2300      	movs	r3, #0
    ae8c:	6878      	ldr	r0, [r7, #4]
    ae8e:	f004 fc11 	bl	f6b4 <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    ae92:	6878      	ldr	r0, [r7, #4]
    ae94:	f7f5 fa24 	bl	2e0 <nlr_jump>
    ae98:	00022330 	.word	0x00022330

0000ae9c <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    ae9c:	b580      	push	{r7, lr}
    ae9e:	b094      	sub	sp, #80	; 0x50
    aea0:	af00      	add	r7, sp, #0
    aea2:	60f8      	str	r0, [r7, #12]
    aea4:	60b9      	str	r1, [r7, #8]
    aea6:	607a      	str	r2, [r7, #4]
    aea8:	603b      	str	r3, [r7, #0]
    const byte *restrict str = (const byte *)str_;
    aeaa:	68fb      	ldr	r3, [r7, #12]
    aeac:	64fb      	str	r3, [r7, #76]	; 0x4c
    const byte *restrict top = str + len;
    aeae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    aeb0:	68bb      	ldr	r3, [r7, #8]
    aeb2:	4413      	add	r3, r2
    aeb4:	63bb      	str	r3, [r7, #56]	; 0x38
    bool neg = false;
    aeb6:	2300      	movs	r3, #0
    aeb8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	2b00      	cmp	r3, #0
    aec0:	d002      	beq.n	aec8 <mp_parse_num_integer+0x2c>
    aec2:	687b      	ldr	r3, [r7, #4]
    aec4:	2b01      	cmp	r3, #1
    aec6:	dd02      	ble.n	aece <mp_parse_num_integer+0x32>
    aec8:	687b      	ldr	r3, [r7, #4]
    aeca:	2b24      	cmp	r3, #36	; 0x24
    aecc:	dd05      	ble.n	aeda <mp_parse_num_integer+0x3e>
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    aece:	4864      	ldr	r0, [pc, #400]	; (b060 <mp_parse_num_integer+0x1c4>)
    aed0:	f001 ffbf 	bl	ce52 <mp_raise_ValueError>
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    aed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aed6:	3301      	adds	r3, #1
    aed8:	64fb      	str	r3, [r7, #76]	; 0x4c
    aeda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aede:	429a      	cmp	r2, r3
    aee0:	d207      	bcs.n	aef2 <mp_parse_num_integer+0x56>
    aee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aee4:	781b      	ldrb	r3, [r3, #0]
    aee6:	4618      	mov	r0, r3
    aee8:	f7f7 fa6c 	bl	23c4 <unichar_isspace>
    aeec:	4603      	mov	r3, r0
    aeee:	2b00      	cmp	r3, #0
    aef0:	d1f0      	bne.n	aed4 <mp_parse_num_integer+0x38>
    }

    // parse optional sign
    if (str < top) {
    aef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    aef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aef6:	429a      	cmp	r2, r3
    aef8:	d211      	bcs.n	af1e <mp_parse_num_integer+0x82>
        if (*str == '+') {
    aefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aefc:	781b      	ldrb	r3, [r3, #0]
    aefe:	2b2b      	cmp	r3, #43	; 0x2b
    af00:	d103      	bne.n	af0a <mp_parse_num_integer+0x6e>
            str++;
    af02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af04:	3301      	adds	r3, #1
    af06:	64fb      	str	r3, [r7, #76]	; 0x4c
    af08:	e009      	b.n	af1e <mp_parse_num_integer+0x82>
        } else if (*str == '-') {
    af0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af0c:	781b      	ldrb	r3, [r3, #0]
    af0e:	2b2d      	cmp	r3, #45	; 0x2d
    af10:	d105      	bne.n	af1e <mp_parse_num_integer+0x82>
            str++;
    af12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af14:	3301      	adds	r3, #1
    af16:	64fb      	str	r3, [r7, #76]	; 0x4c
            neg = true;
    af18:	2301      	movs	r3, #1
    af1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    af1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    af20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af22:	1ad3      	subs	r3, r2, r3
    af24:	4619      	mov	r1, r3
    af26:	1d3b      	adds	r3, r7, #4
    af28:	461a      	mov	r2, r3
    af2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    af2c:	f7ff ff10 	bl	ad50 <mp_parse_num_base>
    af30:	4602      	mov	r2, r0
    af32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af34:	4413      	add	r3, r2
    af36:	64fb      	str	r3, [r7, #76]	; 0x4c

    // string should be an integer number
    mp_int_t int_val = 0;
    af38:	2300      	movs	r3, #0
    af3a:	643b      	str	r3, [r7, #64]	; 0x40
    const byte *restrict str_val_start = str;
    af3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af3e:	637b      	str	r3, [r7, #52]	; 0x34
    for (; str < top; str++) {
    af40:	e03c      	b.n	afbc <mp_parse_num_integer+0x120>
        // get next digit as a value
        mp_uint_t dig = *str;
    af42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    af44:	781b      	ldrb	r3, [r3, #0]
    af46:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ('0' <= dig && dig <= '9') {
    af48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af4a:	2b2f      	cmp	r3, #47	; 0x2f
    af4c:	d906      	bls.n	af5c <mp_parse_num_integer+0xc0>
    af4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af50:	2b39      	cmp	r3, #57	; 0x39
    af52:	d803      	bhi.n	af5c <mp_parse_num_integer+0xc0>
            dig -= '0';
    af54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af56:	3b30      	subs	r3, #48	; 0x30
    af58:	63fb      	str	r3, [r7, #60]	; 0x3c
    af5a:	e00f      	b.n	af7c <mp_parse_num_integer+0xe0>
        } else if (dig == '_') {
    af5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af5e:	2b5f      	cmp	r3, #95	; 0x5f
    af60:	d028      	beq.n	afb4 <mp_parse_num_integer+0x118>
            continue;
        } else {
            dig |= 0x20; // make digit lower-case
    af62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af64:	f043 0320 	orr.w	r3, r3, #32
    af68:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ('a' <= dig && dig <= 'z') {
    af6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af6c:	2b60      	cmp	r3, #96	; 0x60
    af6e:	d92b      	bls.n	afc8 <mp_parse_num_integer+0x12c>
    af70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af72:	2b7a      	cmp	r3, #122	; 0x7a
    af74:	d828      	bhi.n	afc8 <mp_parse_num_integer+0x12c>
                dig -= 'a' - 10;
    af76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af78:	3b57      	subs	r3, #87	; 0x57
    af7a:	63fb      	str	r3, [r7, #60]	; 0x3c
            } else {
                // unknown character
                break;
            }
        }
        if (dig >= (mp_uint_t)base) {
    af7c:	687b      	ldr	r3, [r7, #4]
    af7e:	461a      	mov	r2, r3
    af80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    af82:	4293      	cmp	r3, r2
    af84:	d21f      	bcs.n	afc6 <mp_parse_num_integer+0x12a>
            break;
        }

        // add next digi and check for overflow
        if (mp_small_int_mul_overflow(int_val, base)) {
    af86:	687b      	ldr	r3, [r7, #4]
    af88:	4619      	mov	r1, r3
    af8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
    af8c:	f00f ffee 	bl	1af6c <mp_small_int_mul_overflow>
    af90:	4603      	mov	r3, r0
    af92:	2b00      	cmp	r3, #0
    af94:	d13e      	bne.n	b014 <mp_parse_num_integer+0x178>
            goto overflow;
        }
        int_val = int_val * base + dig;
    af96:	687b      	ldr	r3, [r7, #4]
    af98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    af9a:	fb02 f303 	mul.w	r3, r2, r3
    af9e:	461a      	mov	r2, r3
    afa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    afa2:	4413      	add	r3, r2
    afa4:	643b      	str	r3, [r7, #64]	; 0x40
        if (!MP_SMALL_INT_FITS(int_val)) {
    afa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    afa8:	005a      	lsls	r2, r3, #1
    afaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    afac:	4053      	eors	r3, r2
    afae:	2b00      	cmp	r3, #0
    afb0:	db32      	blt.n	b018 <mp_parse_num_integer+0x17c>
    afb2:	e000      	b.n	afb6 <mp_parse_num_integer+0x11a>
            continue;
    afb4:	bf00      	nop
    for (; str < top; str++) {
    afb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afb8:	3301      	adds	r3, #1
    afba:	64fb      	str	r3, [r7, #76]	; 0x4c
    afbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    afc0:	429a      	cmp	r2, r3
    afc2:	d3be      	bcc.n	af42 <mp_parse_num_integer+0xa6>
    afc4:	e000      	b.n	afc8 <mp_parse_num_integer+0x12c>
            break;
    afc6:	bf00      	nop
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    afc8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    afcc:	2b00      	cmp	r3, #0
    afce:	d002      	beq.n	afd6 <mp_parse_num_integer+0x13a>
        int_val = -int_val;
    afd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    afd2:	425b      	negs	r3, r3
    afd4:	643b      	str	r3, [r7, #64]	; 0x40
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    afd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    afd8:	005b      	lsls	r3, r3, #1
    afda:	f043 0301 	orr.w	r3, r3, #1
    afde:	647b      	str	r3, [r7, #68]	; 0x44

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    afe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    afe4:	429a      	cmp	r2, r3
    afe6:	d02a      	beq.n	b03e <mp_parse_num_integer+0x1a2>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    afe8:	e002      	b.n	aff0 <mp_parse_num_integer+0x154>
    afea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    afec:	3301      	adds	r3, #1
    afee:	64fb      	str	r3, [r7, #76]	; 0x4c
    aff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    aff4:	429a      	cmp	r2, r3
    aff6:	d207      	bcs.n	b008 <mp_parse_num_integer+0x16c>
    aff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    affa:	781b      	ldrb	r3, [r3, #0]
    affc:	4618      	mov	r0, r3
    affe:	f7f7 f9e1 	bl	23c4 <unichar_isspace>
    b002:	4603      	mov	r3, r0
    b004:	2b00      	cmp	r3, #0
    b006:	d1f0      	bne.n	afea <mp_parse_num_integer+0x14e>
    }

    // check we reached the end of the string
    if (str != top) {
    b008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b00c:	429a      	cmp	r2, r3
    b00e:	d118      	bne.n	b042 <mp_parse_num_integer+0x1a6>
        goto value_error;
    }

    // return the object
    return ret_val;
    b010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b012:	e020      	b.n	b056 <mp_parse_num_integer+0x1ba>
            goto overflow;
    b014:	bf00      	nop
    b016:	e000      	b.n	b01a <mp_parse_num_integer+0x17e>
            goto overflow;
    b018:	bf00      	nop

overflow:
    // reparse using long int
    {
        const char *s2 = (const char*)str_val_start;
    b01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b01c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    b01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b022:	1ad3      	subs	r3, r2, r3
    b024:	4619      	mov	r1, r3
    b026:	687b      	ldr	r3, [r7, #4]
    b028:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
    b02c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    b030:	f005 fb56 	bl	106e0 <mp_obj_new_int_from_str_len>
    b034:	6478      	str	r0, [r7, #68]	; 0x44
        str = (const byte*)s2;
    b036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b038:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto have_ret_val;
    b03a:	bf00      	nop
    b03c:	e7d0      	b.n	afe0 <mp_parse_num_integer+0x144>
        goto value_error;
    b03e:	bf00      	nop
    b040:	e000      	b.n	b044 <mp_parse_num_integer+0x1a8>
        goto value_error;
    b042:	bf00      	nop
    }

value_error:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
    b044:	4907      	ldr	r1, [pc, #28]	; (b064 <mp_parse_num_integer+0x1c8>)
    b046:	4808      	ldr	r0, [pc, #32]	; (b068 <mp_parse_num_integer+0x1cc>)
    b048:	f004 f9b8 	bl	f3bc <mp_obj_new_exception_msg>
    b04c:	6338      	str	r0, [r7, #48]	; 0x30
            "invalid syntax for integer");
        raise_exc(exc, lex);
    b04e:	6839      	ldr	r1, [r7, #0]
    b050:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b052:	f7ff ff0b 	bl	ae6c <raise_exc>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    b056:	4618      	mov	r0, r3
    b058:	3750      	adds	r7, #80	; 0x50
    b05a:	46bd      	mov	sp, r7
    b05c:	bd80      	pop	{r7, pc}
    b05e:	bf00      	nop
    b060:	00021148 	.word	0x00021148
    b064:	0002116c 	.word	0x0002116c
    b068:	000223e4 	.word	0x000223e4

0000b06c <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    b06c:	b580      	push	{r7, lr}
    b06e:	b084      	sub	sp, #16
    b070:	af00      	add	r7, sp, #0
    b072:	60f8      	str	r0, [r7, #12]
    b074:	60b9      	str	r1, [r7, #8]
    b076:	4611      	mov	r1, r2
    b078:	461a      	mov	r2, r3
    b07a:	460b      	mov	r3, r1
    b07c:	71fb      	strb	r3, [r7, #7]
    b07e:	4613      	mov	r3, r2
    b080:	71bb      	strb	r3, [r7, #6]

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
    b082:	4904      	ldr	r1, [pc, #16]	; (b094 <mp_parse_num_decimal+0x28>)
    b084:	4804      	ldr	r0, [pc, #16]	; (b098 <mp_parse_num_decimal+0x2c>)
    b086:	f004 f999 	bl	f3bc <mp_obj_new_exception_msg>
    b08a:	4603      	mov	r3, r0
    b08c:	69b9      	ldr	r1, [r7, #24]
    b08e:	4618      	mov	r0, r3
    b090:	f7ff feec 	bl	ae6c <raise_exc>
    b094:	00021188 	.word	0x00021188
    b098:	000223e4 	.word	0x000223e4

0000b09c <MP_OBJ_IS_OBJ>:
    b09c:	b480      	push	{r7}
    b09e:	b083      	sub	sp, #12
    b0a0:	af00      	add	r7, sp, #0
    b0a2:	6078      	str	r0, [r7, #4]
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	f003 0303 	and.w	r3, r3, #3
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	bf0c      	ite	eq
    b0ae:	2301      	moveq	r3, #1
    b0b0:	2300      	movne	r3, #0
    b0b2:	b2db      	uxtb	r3, r3
    b0b4:	4618      	mov	r0, r3
    b0b6:	370c      	adds	r7, #12
    b0b8:	46bd      	mov	sp, r7
    b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0be:	4770      	bx	lr

0000b0c0 <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    b0c0:	b580      	push	{r7, lr}
    b0c2:	b082      	sub	sp, #8
    b0c4:	af00      	add	r7, sp, #0
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    b0c6:	2010      	movs	r0, #16
    b0c8:	f7f5 f94d 	bl	366 <m_malloc0>
    b0cc:	6078      	str	r0, [r7, #4]
    rc->kind = MP_CODE_RESERVED;
    b0ce:	687a      	ldr	r2, [r7, #4]
    b0d0:	7813      	ldrb	r3, [r2, #0]
    b0d2:	2101      	movs	r1, #1
    b0d4:	f361 0302 	bfi	r3, r1, #0, #3
    b0d8:	7013      	strb	r3, [r2, #0]
    return rc;
    b0da:	687b      	ldr	r3, [r7, #4]
}
    b0dc:	4618      	mov	r0, r3
    b0de:	3708      	adds	r7, #8
    b0e0:	46bd      	mov	sp, r7
    b0e2:	bd80      	pop	{r7, pc}

0000b0e4 <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    b0e4:	b480      	push	{r7}
    b0e6:	b085      	sub	sp, #20
    b0e8:	af00      	add	r7, sp, #0
    b0ea:	60f8      	str	r0, [r7, #12]
    b0ec:	60b9      	str	r1, [r7, #8]
    b0ee:	607a      	str	r2, [r7, #4]
    b0f0:	603b      	str	r3, [r7, #0]

    rc->kind = MP_CODE_BYTECODE;
    b0f2:	68fa      	ldr	r2, [r7, #12]
    b0f4:	7813      	ldrb	r3, [r2, #0]
    b0f6:	2102      	movs	r1, #2
    b0f8:	f361 0302 	bfi	r3, r1, #0, #3
    b0fc:	7013      	strb	r3, [r2, #0]
    rc->scope_flags = scope_flags;
    b0fe:	683b      	ldr	r3, [r7, #0]
    b100:	b2db      	uxtb	r3, r3
    b102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b106:	b2d9      	uxtb	r1, r3
    b108:	68fa      	ldr	r2, [r7, #12]
    b10a:	8813      	ldrh	r3, [r2, #0]
    b10c:	f361 03c9 	bfi	r3, r1, #3, #7
    b110:	8013      	strh	r3, [r2, #0]
    rc->data.u_byte.bytecode = code;
    b112:	68fb      	ldr	r3, [r7, #12]
    b114:	68ba      	ldr	r2, [r7, #8]
    b116:	605a      	str	r2, [r3, #4]
    rc->data.u_byte.const_table = const_table;
    b118:	68fb      	ldr	r3, [r7, #12]
    b11a:	687a      	ldr	r2, [r7, #4]
    b11c:	609a      	str	r2, [r3, #8]
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
        mp_bytecode_print(rc, code, len, const_table);
    }
#endif
}
    b11e:	bf00      	nop
    b120:	3714      	adds	r7, #20
    b122:	46bd      	mov	sp, r7
    b124:	f85d 7b04 	ldr.w	r7, [sp], #4
    b128:	4770      	bx	lr

0000b12a <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    b12a:	b580      	push	{r7, lr}
    b12c:	b086      	sub	sp, #24
    b12e:	af00      	add	r7, sp, #0
    b130:	60f8      	str	r0, [r7, #12]
    b132:	60b9      	str	r1, [r7, #8]
    b134:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    assert(rc != NULL);
    b136:	68fb      	ldr	r3, [r7, #12]
    b138:	2b00      	cmp	r3, #0
    b13a:	d105      	bne.n	b148 <mp_make_function_from_raw_code+0x1e>
    b13c:	4b2c      	ldr	r3, [pc, #176]	; (b1f0 <mp_make_function_from_raw_code+0xc6>)
    b13e:	4a2d      	ldr	r2, [pc, #180]	; (b1f4 <mp_make_function_from_raw_code+0xca>)
    b140:	217c      	movs	r1, #124	; 0x7c
    b142:	482d      	ldr	r0, [pc, #180]	; (b1f8 <mp_make_function_from_raw_code+0xce>)
    b144:	f010 f99c 	bl	1b480 <__assert_func>

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    b148:	68bb      	ldr	r3, [r7, #8]
    b14a:	2b00      	cmp	r3, #0
    b14c:	d010      	beq.n	b170 <mp_make_function_from_raw_code+0x46>
    b14e:	68b8      	ldr	r0, [r7, #8]
    b150:	f7ff ffa4 	bl	b09c <MP_OBJ_IS_OBJ>
    b154:	4603      	mov	r3, r0
    b156:	2b00      	cmp	r3, #0
    b158:	d004      	beq.n	b164 <mp_make_function_from_raw_code+0x3a>
    b15a:	68bb      	ldr	r3, [r7, #8]
    b15c:	681b      	ldr	r3, [r3, #0]
    b15e:	4a27      	ldr	r2, [pc, #156]	; (b1fc <mp_make_function_from_raw_code+0xd2>)
    b160:	4293      	cmp	r3, r2
    b162:	d005      	beq.n	b170 <mp_make_function_from_raw_code+0x46>
    b164:	4b26      	ldr	r3, [pc, #152]	; (b200 <mp_make_function_from_raw_code+0xd6>)
    b166:	4a23      	ldr	r2, [pc, #140]	; (b1f4 <mp_make_function_from_raw_code+0xca>)
    b168:	217f      	movs	r1, #127	; 0x7f
    b16a:	4823      	ldr	r0, [pc, #140]	; (b1f8 <mp_make_function_from_raw_code+0xce>)
    b16c:	f010 f988 	bl	1b480 <__assert_func>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    b170:	687b      	ldr	r3, [r7, #4]
    b172:	2b00      	cmp	r3, #0
    b174:	d010      	beq.n	b198 <mp_make_function_from_raw_code+0x6e>
    b176:	6878      	ldr	r0, [r7, #4]
    b178:	f7ff ff90 	bl	b09c <MP_OBJ_IS_OBJ>
    b17c:	4603      	mov	r3, r0
    b17e:	2b00      	cmp	r3, #0
    b180:	d004      	beq.n	b18c <mp_make_function_from_raw_code+0x62>
    b182:	687b      	ldr	r3, [r7, #4]
    b184:	681b      	ldr	r3, [r3, #0]
    b186:	4a1f      	ldr	r2, [pc, #124]	; (b204 <mp_make_function_from_raw_code+0xda>)
    b188:	4293      	cmp	r3, r2
    b18a:	d005      	beq.n	b198 <mp_make_function_from_raw_code+0x6e>
    b18c:	4b1e      	ldr	r3, [pc, #120]	; (b208 <mp_make_function_from_raw_code+0xde>)
    b18e:	4a19      	ldr	r2, [pc, #100]	; (b1f4 <mp_make_function_from_raw_code+0xca>)
    b190:	2182      	movs	r1, #130	; 0x82
    b192:	4819      	ldr	r0, [pc, #100]	; (b1f8 <mp_make_function_from_raw_code+0xce>)
    b194:	f010 f974 	bl	1b480 <__assert_func>

    // make the function, depending on the raw code kind
    mp_obj_t fun;
    switch (rc->kind) {
    b198:	68fb      	ldr	r3, [r7, #12]
    b19a:	781b      	ldrb	r3, [r3, #0]
    b19c:	f3c3 0302 	ubfx	r3, r3, #0, #3
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    b1a0:	68fb      	ldr	r3, [r7, #12]
    b1a2:	781b      	ldrb	r3, [r3, #0]
    b1a4:	f003 0307 	and.w	r3, r3, #7
    b1a8:	b2db      	uxtb	r3, r3
    b1aa:	2b02      	cmp	r3, #2
    b1ac:	d005      	beq.n	b1ba <mp_make_function_from_raw_code+0x90>
    b1ae:	4b17      	ldr	r3, [pc, #92]	; (b20c <mp_make_function_from_raw_code+0xe2>)
    b1b0:	4a10      	ldr	r2, [pc, #64]	; (b1f4 <mp_make_function_from_raw_code+0xca>)
    b1b2:	2198      	movs	r1, #152	; 0x98
    b1b4:	4810      	ldr	r0, [pc, #64]	; (b1f8 <mp_make_function_from_raw_code+0xce>)
    b1b6:	f010 f963 	bl	1b480 <__assert_func>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    b1ba:	68fb      	ldr	r3, [r7, #12]
    b1bc:	685a      	ldr	r2, [r3, #4]
    b1be:	68fb      	ldr	r3, [r7, #12]
    b1c0:	689b      	ldr	r3, [r3, #8]
    b1c2:	6879      	ldr	r1, [r7, #4]
    b1c4:	68b8      	ldr	r0, [r7, #8]
    b1c6:	f004 fd67 	bl	fc98 <mp_obj_new_fun_bc>
    b1ca:	6178      	str	r0, [r7, #20]
            // check for generator functions and if so change the type of the object
            if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    b1cc:	68fb      	ldr	r3, [r7, #12]
    b1ce:	881b      	ldrh	r3, [r3, #0]
    b1d0:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    b1d4:	b2db      	uxtb	r3, r3
    b1d6:	f003 0304 	and.w	r3, r3, #4
    b1da:	2b00      	cmp	r3, #0
    b1dc:	d002      	beq.n	b1e4 <mp_make_function_from_raw_code+0xba>
                ((mp_obj_base_t*)MP_OBJ_TO_PTR(fun))->type = &mp_type_gen_wrap;
    b1de:	697b      	ldr	r3, [r7, #20]
    b1e0:	4a0b      	ldr	r2, [pc, #44]	; (b210 <mp_make_function_from_raw_code+0xe6>)
    b1e2:	601a      	str	r2, [r3, #0]
            }
            break;
    b1e4:	bf00      	nop
    }

    return fun;
    b1e6:	697b      	ldr	r3, [r7, #20]
}
    b1e8:	4618      	mov	r0, r3
    b1ea:	3718      	adds	r7, #24
    b1ec:	46bd      	mov	sp, r7
    b1ee:	bd80      	pop	{r7, pc}
    b1f0:	000211a8 	.word	0x000211a8
    b1f4:	00021278 	.word	0x00021278
    b1f8:	000211b4 	.word	0x000211b4
    b1fc:	00023a20 	.word	0x00023a20
    b200:	000211c8 	.word	0x000211c8
    b204:	00021d40 	.word	0x00021d40
    b208:	0002120c 	.word	0x0002120c
    b20c:	00021258 	.word	0x00021258
    b210:	0002288c 	.word	0x0002288c

0000b214 <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    b214:	b580      	push	{r7, lr}
    b216:	b086      	sub	sp, #24
    b218:	af00      	add	r7, sp, #0
    b21a:	60f8      	str	r0, [r7, #12]
    b21c:	60b9      	str	r1, [r7, #8]
    b21e:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    b220:	68bb      	ldr	r3, [r7, #8]
    b222:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b226:	2b00      	cmp	r3, #0
    b228:	d00a      	beq.n	b240 <mp_make_closure_from_raw_code+0x2c>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    b22a:	687b      	ldr	r3, [r7, #4]
    b22c:	6819      	ldr	r1, [r3, #0]
    b22e:	687b      	ldr	r3, [r7, #4]
    b230:	3304      	adds	r3, #4
    b232:	681b      	ldr	r3, [r3, #0]
    b234:	461a      	mov	r2, r3
    b236:	68f8      	ldr	r0, [r7, #12]
    b238:	f7ff ff77 	bl	b12a <mp_make_function_from_raw_code>
    b23c:	6178      	str	r0, [r7, #20]
    b23e:	e005      	b.n	b24c <mp_make_closure_from_raw_code+0x38>
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    b240:	2200      	movs	r2, #0
    b242:	2100      	movs	r1, #0
    b244:	68f8      	ldr	r0, [r7, #12]
    b246:	f7ff ff70 	bl	b12a <mp_make_function_from_raw_code>
    b24a:	6178      	str	r0, [r7, #20]
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    b24c:	68bb      	ldr	r3, [r7, #8]
    b24e:	b2d9      	uxtb	r1, r3
    b250:	68bb      	ldr	r3, [r7, #8]
    b252:	09db      	lsrs	r3, r3, #7
    b254:	f003 0302 	and.w	r3, r3, #2
    b258:	009b      	lsls	r3, r3, #2
    b25a:	687a      	ldr	r2, [r7, #4]
    b25c:	4413      	add	r3, r2
    b25e:	461a      	mov	r2, r3
    b260:	6978      	ldr	r0, [r7, #20]
    b262:	f003 f823 	bl	e2ac <mp_obj_new_closure>
    b266:	4603      	mov	r3, r0
}
    b268:	4618      	mov	r0, r3
    b26a:	3718      	adds	r7, #24
    b26c:	46bd      	mov	sp, r7
    b26e:	bd80      	pop	{r7, pc}

0000b270 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    b270:	b480      	push	{r7}
    b272:	b083      	sub	sp, #12
    b274:	af00      	add	r7, sp, #0
    b276:	6078      	str	r0, [r7, #4]
    b278:	687b      	ldr	r3, [r7, #4]
    b27a:	f003 0301 	and.w	r3, r3, #1
    b27e:	2b00      	cmp	r3, #0
    b280:	bf14      	ite	ne
    b282:	2301      	movne	r3, #1
    b284:	2300      	moveq	r3, #0
    b286:	b2db      	uxtb	r3, r3
    b288:	4618      	mov	r0, r3
    b28a:	370c      	adds	r7, #12
    b28c:	46bd      	mov	sp, r7
    b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b292:	4770      	bx	lr

0000b294 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    b294:	b480      	push	{r7}
    b296:	b083      	sub	sp, #12
    b298:	af00      	add	r7, sp, #0
    b29a:	6078      	str	r0, [r7, #4]
    b29c:	687b      	ldr	r3, [r7, #4]
    b29e:	f003 0303 	and.w	r3, r3, #3
    b2a2:	2b02      	cmp	r3, #2
    b2a4:	bf0c      	ite	eq
    b2a6:	2301      	moveq	r3, #1
    b2a8:	2300      	movne	r3, #0
    b2aa:	b2db      	uxtb	r3, r3
    b2ac:	4618      	mov	r0, r3
    b2ae:	370c      	adds	r7, #12
    b2b0:	46bd      	mov	sp, r7
    b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2b6:	4770      	bx	lr

0000b2b8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    b2b8:	b480      	push	{r7}
    b2ba:	b083      	sub	sp, #12
    b2bc:	af00      	add	r7, sp, #0
    b2be:	6078      	str	r0, [r7, #4]
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	f003 0303 	and.w	r3, r3, #3
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	bf0c      	ite	eq
    b2ca:	2301      	moveq	r3, #1
    b2cc:	2300      	movne	r3, #0
    b2ce:	b2db      	uxtb	r3, r3
    b2d0:	4618      	mov	r0, r3
    b2d2:	370c      	adds	r7, #12
    b2d4:	46bd      	mov	sp, r7
    b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2da:	4770      	bx	lr

0000b2dc <MP_MAP_SLOT_IS_FILLED>:
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3, // only valid for mp_set_lookup
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    b2dc:	b480      	push	{r7}
    b2de:	b083      	sub	sp, #12
    b2e0:	af00      	add	r7, sp, #0
    b2e2:	6078      	str	r0, [r7, #4]
    b2e4:	6039      	str	r1, [r7, #0]
    b2e6:	687b      	ldr	r3, [r7, #4]
    b2e8:	689a      	ldr	r2, [r3, #8]
    b2ea:	683b      	ldr	r3, [r7, #0]
    b2ec:	00db      	lsls	r3, r3, #3
    b2ee:	4413      	add	r3, r2
    b2f0:	681b      	ldr	r3, [r3, #0]
    b2f2:	2b00      	cmp	r3, #0
    b2f4:	d009      	beq.n	b30a <MP_MAP_SLOT_IS_FILLED+0x2e>
    b2f6:	687b      	ldr	r3, [r7, #4]
    b2f8:	689a      	ldr	r2, [r3, #8]
    b2fa:	683b      	ldr	r3, [r7, #0]
    b2fc:	00db      	lsls	r3, r3, #3
    b2fe:	4413      	add	r3, r2
    b300:	681b      	ldr	r3, [r3, #0]
    b302:	2b08      	cmp	r3, #8
    b304:	d001      	beq.n	b30a <MP_MAP_SLOT_IS_FILLED+0x2e>
    b306:	2301      	movs	r3, #1
    b308:	e000      	b.n	b30c <MP_MAP_SLOT_IS_FILLED+0x30>
    b30a:	2300      	movs	r3, #0
    b30c:	f003 0301 	and.w	r3, r3, #1
    b310:	b2db      	uxtb	r3, r3
    b312:	4618      	mov	r0, r3
    b314:	370c      	adds	r7, #12
    b316:	46bd      	mov	sp, r7
    b318:	f85d 7b04 	ldr.w	r7, [sp], #4
    b31c:	4770      	bx	lr

0000b31e <mp_obj_new_bool>:
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b31e:	b480      	push	{r7}
    b320:	b083      	sub	sp, #12
    b322:	af00      	add	r7, sp, #0
    b324:	6078      	str	r0, [r7, #4]
    b326:	687b      	ldr	r3, [r7, #4]
    b328:	2b00      	cmp	r3, #0
    b32a:	d001      	beq.n	b330 <mp_obj_new_bool+0x12>
    b32c:	4b04      	ldr	r3, [pc, #16]	; (b340 <mp_obj_new_bool+0x22>)
    b32e:	e000      	b.n	b332 <mp_obj_new_bool+0x14>
    b330:	4b04      	ldr	r3, [pc, #16]	; (b344 <mp_obj_new_bool+0x26>)
    b332:	4618      	mov	r0, r3
    b334:	370c      	adds	r7, #12
    b336:	46bd      	mov	sp, r7
    b338:	f85d 7b04 	ldr.w	r7, [sp], #4
    b33c:	4770      	bx	lr
    b33e:	bf00      	nop
    b340:	0002189c 	.word	0x0002189c
    b344:	00021894 	.word	0x00021894

0000b348 <mp_obj_dict_get_map>:
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
    b348:	b480      	push	{r7}
    b34a:	b083      	sub	sp, #12
    b34c:	af00      	add	r7, sp, #0
    b34e:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
    b350:	687b      	ldr	r3, [r7, #4]
    b352:	3304      	adds	r3, #4
}
    b354:	4618      	mov	r0, r3
    b356:	370c      	adds	r7, #12
    b358:	46bd      	mov	sp, r7
    b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b35e:	4770      	bx	lr

0000b360 <mp_obj_module_get_globals>:
// module
typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
    b360:	b480      	push	{r7}
    b362:	b083      	sub	sp, #12
    b364:	af00      	add	r7, sp, #0
    b366:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
    b368:	687b      	ldr	r3, [r7, #4]
    b36a:	685b      	ldr	r3, [r3, #4]
}
    b36c:	4618      	mov	r0, r3
    b36e:	370c      	adds	r7, #12
    b370:	46bd      	mov	sp, r7
    b372:	f85d 7b04 	ldr.w	r7, [sp], #4
    b376:	4770      	bx	lr

0000b378 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
    b378:	b480      	push	{r7}
    b37a:	b083      	sub	sp, #12
    b37c:	af00      	add	r7, sp, #0
    b37e:	6078      	str	r0, [r7, #4]
}
    b380:	bf00      	nop
    b382:	370c      	adds	r7, #12
    b384:	46bd      	mov	sp, r7
    b386:	f85d 7b04 	ldr.w	r7, [sp], #4
    b38a:	4770      	bx	lr

0000b38c <mp_nonlocal_alloc>:

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    b38c:	b580      	push	{r7, lr}
    b38e:	b082      	sub	sp, #8
    b390:	af00      	add	r7, sp, #0
    b392:	6078      	str	r0, [r7, #4]
    return m_new(uint8_t, n_bytes);
    b394:	6878      	ldr	r0, [r7, #4]
    b396:	f7f4 ffc1 	bl	31c <m_malloc>
    b39a:	4603      	mov	r3, r0
}
    b39c:	4618      	mov	r0, r3
    b39e:	3708      	adds	r7, #8
    b3a0:	46bd      	mov	sp, r7
    b3a2:	bd80      	pop	{r7, pc}

0000b3a4 <mp_nonlocal_realloc>:

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    b3a4:	b580      	push	{r7, lr}
    b3a6:	b084      	sub	sp, #16
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	60f8      	str	r0, [r7, #12]
    b3ac:	60b9      	str	r1, [r7, #8]
    b3ae:	607a      	str	r2, [r7, #4]
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    b3b0:	6879      	ldr	r1, [r7, #4]
    b3b2:	68f8      	ldr	r0, [r7, #12]
    b3b4:	f7f4 ffe4 	bl	380 <m_realloc>
    b3b8:	4603      	mov	r3, r0
}
    b3ba:	4618      	mov	r0, r3
    b3bc:	3710      	adds	r7, #16
    b3be:	46bd      	mov	sp, r7
    b3c0:	bd80      	pop	{r7, pc}

0000b3c2 <mp_nonlocal_free>:

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    b3c2:	b580      	push	{r7, lr}
    b3c4:	b082      	sub	sp, #8
    b3c6:	af00      	add	r7, sp, #0
    b3c8:	6078      	str	r0, [r7, #4]
    b3ca:	6039      	str	r1, [r7, #0]
    m_del(uint8_t, ptr, n_bytes);
    b3cc:	6878      	ldr	r0, [r7, #4]
    b3ce:	f7f5 f803 	bl	3d8 <m_free>
}
    b3d2:	bf00      	nop
    b3d4:	3708      	adds	r7, #8
    b3d6:	46bd      	mov	sp, r7
    b3d8:	bd80      	pop	{r7, pc}

0000b3da <mp_locals_get>:
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    b3da:	b480      	push	{r7}
    b3dc:	af00      	add	r7, sp, #0
    b3de:	4b03      	ldr	r3, [pc, #12]	; (b3ec <mp_locals_get+0x12>)
    b3e0:	685b      	ldr	r3, [r3, #4]
    b3e2:	4618      	mov	r0, r3
    b3e4:	46bd      	mov	sp, r7
    b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3ea:	4770      	bx	lr
    b3ec:	200012f0 	.word	0x200012f0

0000b3f0 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    b3f0:	b480      	push	{r7}
    b3f2:	b083      	sub	sp, #12
    b3f4:	af00      	add	r7, sp, #0
    b3f6:	6078      	str	r0, [r7, #4]
    b3f8:	4a04      	ldr	r2, [pc, #16]	; (b40c <mp_locals_set+0x1c>)
    b3fa:	687b      	ldr	r3, [r7, #4]
    b3fc:	6053      	str	r3, [r2, #4]
    b3fe:	bf00      	nop
    b400:	370c      	adds	r7, #12
    b402:	46bd      	mov	sp, r7
    b404:	f85d 7b04 	ldr.w	r7, [sp], #4
    b408:	4770      	bx	lr
    b40a:	bf00      	nop
    b40c:	200012f0 	.word	0x200012f0

0000b410 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    b410:	b480      	push	{r7}
    b412:	af00      	add	r7, sp, #0
    b414:	4b03      	ldr	r3, [pc, #12]	; (b424 <mp_globals_get+0x14>)
    b416:	689b      	ldr	r3, [r3, #8]
    b418:	4618      	mov	r0, r3
    b41a:	46bd      	mov	sp, r7
    b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b420:	4770      	bx	lr
    b422:	bf00      	nop
    b424:	200012f0 	.word	0x200012f0

0000b428 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    b428:	b480      	push	{r7}
    b42a:	b083      	sub	sp, #12
    b42c:	af00      	add	r7, sp, #0
    b42e:	6078      	str	r0, [r7, #4]
    b430:	4a04      	ldr	r2, [pc, #16]	; (b444 <mp_globals_set+0x1c>)
    b432:	687b      	ldr	r3, [r7, #4]
    b434:	6093      	str	r3, [r2, #8]
    b436:	bf00      	nop
    b438:	370c      	adds	r7, #12
    b43a:	46bd      	mov	sp, r7
    b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b440:	4770      	bx	lr
    b442:	bf00      	nop
    b444:	200012f0 	.word	0x200012f0

0000b448 <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    b448:	b580      	push	{r7, lr}
    b44a:	af00      	add	r7, sp, #0
    qstr_init();
    b44c:	f7f5 fd3c 	bl	ec8 <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    b450:	4b0d      	ldr	r3, [pc, #52]	; (b488 <mp_init+0x40>)
    b452:	2200      	movs	r2, #0
    b454:	635a      	str	r2, [r3, #52]	; 0x34
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    b456:	4b0c      	ldr	r3, [pc, #48]	; (b488 <mp_init+0x40>)
    b458:	2200      	movs	r2, #0
    b45a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    b45e:	2103      	movs	r1, #3
    b460:	480a      	ldr	r0, [pc, #40]	; (b48c <mp_init+0x44>)
    b462:	f003 fdb1 	bl	efc8 <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    b466:	2101      	movs	r1, #1
    b468:	4809      	ldr	r0, [pc, #36]	; (b490 <mp_init+0x48>)
    b46a:	f003 fdad 	bl	efc8 <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    b46e:	226a      	movs	r2, #106	; 0x6a
    b470:	2172      	movs	r1, #114	; 0x72
    b472:	4807      	ldr	r0, [pc, #28]	; (b490 <mp_init+0x48>)
    b474:	f003 fddd 	bl	f032 <mp_obj_dict_store>

    // locals = globals for outer module (see Objects/frameobject.c/PyFrame_New())
    mp_locals_set(&MP_STATE_VM(dict_main));
    b478:	4805      	ldr	r0, [pc, #20]	; (b490 <mp_init+0x48>)
    b47a:	f7ff ffb9 	bl	b3f0 <mp_locals_set>
    mp_globals_set(&MP_STATE_VM(dict_main));
    b47e:	4804      	ldr	r0, [pc, #16]	; (b490 <mp_init+0x48>)
    b480:	f7ff ffd2 	bl	b428 <mp_globals_set>
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    b484:	bf00      	nop
    b486:	bd80      	pop	{r7, pc}
    b488:	200012f0 	.word	0x200012f0
    b48c:	20001314 	.word	0x20001314
    b490:	20001328 	.word	0x20001328

0000b494 <mp_deinit>:

void mp_deinit(void) {
    b494:	b480      	push	{r7}
    b496:	af00      	add	r7, sp, #0

    // call port specific deinitialization if any
#ifdef MICROPY_PORT_DEINIT_FUNC
    MICROPY_PORT_DEINIT_FUNC;
#endif
}
    b498:	bf00      	nop
    b49a:	46bd      	mov	sp, r7
    b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4a0:	4770      	bx	lr

0000b4a2 <mp_load_name>:

mp_obj_t mp_load_name(qstr qst) {
    b4a2:	b590      	push	{r4, r7, lr}
    b4a4:	b085      	sub	sp, #20
    b4a6:	af00      	add	r7, sp, #0
    b4a8:	6078      	str	r0, [r7, #4]
    // logic: search locals, globals, builtins
    DEBUG_OP_printf("load name %s\n", qstr_str(qst));
    // If we're at the outer scope (locals == globals), dispatch to load_global right away
    if (mp_locals_get() != mp_globals_get()) {
    b4aa:	f7ff ff96 	bl	b3da <mp_locals_get>
    b4ae:	4604      	mov	r4, r0
    b4b0:	f7ff ffae 	bl	b410 <mp_globals_get>
    b4b4:	4603      	mov	r3, r0
    b4b6:	429c      	cmp	r4, r3
    b4b8:	d012      	beq.n	b4e0 <mp_load_name+0x3e>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b4ba:	f7ff ff8e 	bl	b3da <mp_locals_get>
    b4be:	4603      	mov	r3, r0
    b4c0:	1d18      	adds	r0, r3, #4
    b4c2:	687b      	ldr	r3, [r7, #4]
    b4c4:	009b      	lsls	r3, r3, #2
    b4c6:	f043 0302 	orr.w	r3, r3, #2
    b4ca:	2200      	movs	r2, #0
    b4cc:	4619      	mov	r1, r3
    b4ce:	f001 ff45 	bl	d35c <mp_map_lookup>
    b4d2:	60f8      	str	r0, [r7, #12]
        if (elem != NULL) {
    b4d4:	68fb      	ldr	r3, [r7, #12]
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	d002      	beq.n	b4e0 <mp_load_name+0x3e>
            return elem->value;
    b4da:	68fb      	ldr	r3, [r7, #12]
    b4dc:	685b      	ldr	r3, [r3, #4]
    b4de:	e003      	b.n	b4e8 <mp_load_name+0x46>
        }
    }
    return mp_load_global(qst);
    b4e0:	6878      	ldr	r0, [r7, #4]
    b4e2:	f000 f805 	bl	b4f0 <mp_load_global>
    b4e6:	4603      	mov	r3, r0
}
    b4e8:	4618      	mov	r0, r3
    b4ea:	3714      	adds	r7, #20
    b4ec:	46bd      	mov	sp, r7
    b4ee:	bd90      	pop	{r4, r7, pc}

0000b4f0 <mp_load_global>:

mp_obj_t mp_load_global(qstr qst) {
    b4f0:	b580      	push	{r7, lr}
    b4f2:	b084      	sub	sp, #16
    b4f4:	af00      	add	r7, sp, #0
    b4f6:	6078      	str	r0, [r7, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b4f8:	f7ff ff8a 	bl	b410 <mp_globals_get>
    b4fc:	4603      	mov	r3, r0
    b4fe:	1d18      	adds	r0, r3, #4
    b500:	687b      	ldr	r3, [r7, #4]
    b502:	009b      	lsls	r3, r3, #2
    b504:	f043 0302 	orr.w	r3, r3, #2
    b508:	2200      	movs	r2, #0
    b50a:	4619      	mov	r1, r3
    b50c:	f001 ff26 	bl	d35c <mp_map_lookup>
    b510:	60f8      	str	r0, [r7, #12]
    if (elem == NULL) {
    b512:	68fb      	ldr	r3, [r7, #12]
    b514:	2b00      	cmp	r3, #0
    b516:	d110      	bne.n	b53a <mp_load_global+0x4a>
            if (elem != NULL) {
                return elem->value;
            }
        }
        #endif
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b518:	687b      	ldr	r3, [r7, #4]
    b51a:	009b      	lsls	r3, r3, #2
    b51c:	f043 0302 	orr.w	r3, r3, #2
    b520:	2200      	movs	r2, #0
    b522:	4619      	mov	r1, r3
    b524:	4808      	ldr	r0, [pc, #32]	; (b548 <mp_load_global+0x58>)
    b526:	f001 ff19 	bl	d35c <mp_map_lookup>
    b52a:	60f8      	str	r0, [r7, #12]
        if (elem == NULL) {
    b52c:	68fb      	ldr	r3, [r7, #12]
    b52e:	2b00      	cmp	r3, #0
    b530:	d103      	bne.n	b53a <mp_load_global+0x4a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_NameError, "name not defined");
    b532:	4906      	ldr	r1, [pc, #24]	; (b54c <mp_load_global+0x5c>)
    b534:	4806      	ldr	r0, [pc, #24]	; (b550 <mp_load_global+0x60>)
    b536:	f001 fc75 	bl	ce24 <mp_raise_msg>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
                    "name '%q' isn't defined", qst));
            }
        }
    }
    return elem->value;
    b53a:	68fb      	ldr	r3, [r7, #12]
    b53c:	685b      	ldr	r3, [r3, #4]
}
    b53e:	4618      	mov	r0, r3
    b540:	3710      	adds	r7, #16
    b542:	46bd      	mov	sp, r7
    b544:	bd80      	pop	{r7, pc}
    b546:	bf00      	nop
    b548:	0002461c 	.word	0x0002461c
    b54c:	000212a0 	.word	0x000212a0
    b550:	00022240 	.word	0x00022240

0000b554 <mp_load_build_class>:

mp_obj_t mp_load_build_class(void) {
    b554:	b480      	push	{r7}
    b556:	af00      	add	r7, sp, #0
        if (elem != NULL) {
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
    b558:	4b02      	ldr	r3, [pc, #8]	; (b564 <mp_load_build_class+0x10>)
}
    b55a:	4618      	mov	r0, r3
    b55c:	46bd      	mov	sp, r7
    b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b562:	4770      	bx	lr
    b564:	00024230 	.word	0x00024230

0000b568 <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    b568:	b580      	push	{r7, lr}
    b56a:	b082      	sub	sp, #8
    b56c:	af00      	add	r7, sp, #0
    b56e:	6078      	str	r0, [r7, #4]
    b570:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b572:	f7ff ff32 	bl	b3da <mp_locals_get>
    b576:	687b      	ldr	r3, [r7, #4]
    b578:	009b      	lsls	r3, r3, #2
    b57a:	f043 0302 	orr.w	r3, r3, #2
    b57e:	683a      	ldr	r2, [r7, #0]
    b580:	4619      	mov	r1, r3
    b582:	f003 fd56 	bl	f032 <mp_obj_dict_store>
}
    b586:	bf00      	nop
    b588:	3708      	adds	r7, #8
    b58a:	46bd      	mov	sp, r7
    b58c:	bd80      	pop	{r7, pc}

0000b58e <mp_delete_name>:

void mp_delete_name(qstr qst) {
    b58e:	b580      	push	{r7, lr}
    b590:	b082      	sub	sp, #8
    b592:	af00      	add	r7, sp, #0
    b594:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    b596:	f7ff ff20 	bl	b3da <mp_locals_get>
    b59a:	4602      	mov	r2, r0
    b59c:	687b      	ldr	r3, [r7, #4]
    b59e:	009b      	lsls	r3, r3, #2
    b5a0:	f043 0302 	orr.w	r3, r3, #2
    b5a4:	4619      	mov	r1, r3
    b5a6:	4610      	mov	r0, r2
    b5a8:	f003 fd78 	bl	f09c <mp_obj_dict_delete>
}
    b5ac:	bf00      	nop
    b5ae:	3708      	adds	r7, #8
    b5b0:	46bd      	mov	sp, r7
    b5b2:	bd80      	pop	{r7, pc}

0000b5b4 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    b5b4:	b580      	push	{r7, lr}
    b5b6:	b082      	sub	sp, #8
    b5b8:	af00      	add	r7, sp, #0
    b5ba:	6078      	str	r0, [r7, #4]
    b5bc:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b5be:	f7ff ff27 	bl	b410 <mp_globals_get>
    b5c2:	687b      	ldr	r3, [r7, #4]
    b5c4:	009b      	lsls	r3, r3, #2
    b5c6:	f043 0302 	orr.w	r3, r3, #2
    b5ca:	683a      	ldr	r2, [r7, #0]
    b5cc:	4619      	mov	r1, r3
    b5ce:	f003 fd30 	bl	f032 <mp_obj_dict_store>
}
    b5d2:	bf00      	nop
    b5d4:	3708      	adds	r7, #8
    b5d6:	46bd      	mov	sp, r7
    b5d8:	bd80      	pop	{r7, pc}

0000b5da <mp_delete_global>:

void mp_delete_global(qstr qst) {
    b5da:	b580      	push	{r7, lr}
    b5dc:	b082      	sub	sp, #8
    b5de:	af00      	add	r7, sp, #0
    b5e0:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    b5e2:	f7ff ff15 	bl	b410 <mp_globals_get>
    b5e6:	4602      	mov	r2, r0
    b5e8:	687b      	ldr	r3, [r7, #4]
    b5ea:	009b      	lsls	r3, r3, #2
    b5ec:	f043 0302 	orr.w	r3, r3, #2
    b5f0:	4619      	mov	r1, r3
    b5f2:	4610      	mov	r0, r2
    b5f4:	f003 fd52 	bl	f09c <mp_obj_dict_delete>
}
    b5f8:	bf00      	nop
    b5fa:	3708      	adds	r7, #8
    b5fc:	46bd      	mov	sp, r7
    b5fe:	bd80      	pop	{r7, pc}

0000b600 <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    b600:	b580      	push	{r7, lr}
    b602:	b088      	sub	sp, #32
    b604:	af00      	add	r7, sp, #0
    b606:	6078      	str	r0, [r7, #4]
    b608:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);

    if (op == MP_UNARY_OP_NOT) {
    b60a:	687b      	ldr	r3, [r7, #4]
    b60c:	2b03      	cmp	r3, #3
    b60e:	d10b      	bne.n	b628 <mp_unary_op+0x28>
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    b610:	6838      	ldr	r0, [r7, #0]
    b612:	f002 f929 	bl	d868 <mp_obj_is_true>
    b616:	4603      	mov	r3, r0
    b618:	f083 0301 	eor.w	r3, r3, #1
    b61c:	b2db      	uxtb	r3, r3
    b61e:	4618      	mov	r0, r3
    b620:	f7ff fe7d 	bl	b31e <mp_obj_new_bool>
    b624:	4603      	mov	r3, r0
    b626:	e0cb      	b.n	b7c0 <mp_unary_op+0x1c0>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    b628:	6838      	ldr	r0, [r7, #0]
    b62a:	f7ff fe21 	bl	b270 <MP_OBJ_IS_SMALL_INT>
    b62e:	4603      	mov	r3, r0
    b630:	2b00      	cmp	r3, #0
    b632:	d060      	beq.n	b6f6 <mp_unary_op+0xf6>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    b634:	683b      	ldr	r3, [r7, #0]
    b636:	105b      	asrs	r3, r3, #1
    b638:	617b      	str	r3, [r7, #20]
        switch (op) {
    b63a:	687b      	ldr	r3, [r7, #4]
    b63c:	2b08      	cmp	r3, #8
    b63e:	d84b      	bhi.n	b6d8 <mp_unary_op+0xd8>
    b640:	a201      	add	r2, pc, #4	; (adr r2, b648 <mp_unary_op+0x48>)
    b642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b646:	bf00      	nop
    b648:	0000b687 	.word	0x0000b687
    b64c:	0000b68b 	.word	0x0000b68b
    b650:	0000b6d9 	.word	0x0000b6d9
    b654:	0000b6d9 	.word	0x0000b6d9
    b658:	0000b66d 	.word	0x0000b66d
    b65c:	0000b6d9 	.word	0x0000b6d9
    b660:	0000b683 	.word	0x0000b683
    b664:	0000b6ad 	.word	0x0000b6ad
    b668:	0000b687 	.word	0x0000b687
            case MP_UNARY_OP_BOOL:
                return mp_obj_new_bool(val != 0);
    b66c:	697b      	ldr	r3, [r7, #20]
    b66e:	2b00      	cmp	r3, #0
    b670:	bf14      	ite	ne
    b672:	2301      	movne	r3, #1
    b674:	2300      	moveq	r3, #0
    b676:	b2db      	uxtb	r3, r3
    b678:	4618      	mov	r0, r3
    b67a:	f7ff fe50 	bl	b31e <mp_obj_new_bool>
    b67e:	4603      	mov	r3, r0
    b680:	e09e      	b.n	b7c0 <mp_unary_op+0x1c0>
            case MP_UNARY_OP_HASH:
                return arg;
    b682:	683b      	ldr	r3, [r7, #0]
    b684:	e09c      	b.n	b7c0 <mp_unary_op+0x1c0>
            case MP_UNARY_OP_POSITIVE:
            case MP_UNARY_OP_INT:
                return arg;
    b686:	683b      	ldr	r3, [r7, #0]
    b688:	e09a      	b.n	b7c0 <mp_unary_op+0x1c0>
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    b68a:	697b      	ldr	r3, [r7, #20]
    b68c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b690:	d106      	bne.n	b6a0 <mp_unary_op+0xa0>
                    return mp_obj_new_int(-val);
    b692:	697b      	ldr	r3, [r7, #20]
    b694:	425b      	negs	r3, r3
    b696:	4618      	mov	r0, r3
    b698:	f005 f868 	bl	1076c <mp_obj_new_int>
    b69c:	4603      	mov	r3, r0
    b69e:	e08f      	b.n	b7c0 <mp_unary_op+0x1c0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b6a0:	697b      	ldr	r3, [r7, #20]
    b6a2:	425b      	negs	r3, r3
    b6a4:	005b      	lsls	r3, r3, #1
    b6a6:	f043 0301 	orr.w	r3, r3, #1
    b6aa:	e089      	b.n	b7c0 <mp_unary_op+0x1c0>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    b6ac:	697b      	ldr	r3, [r7, #20]
    b6ae:	2b00      	cmp	r3, #0
    b6b0:	db01      	blt.n	b6b6 <mp_unary_op+0xb6>
                    return arg;
    b6b2:	683b      	ldr	r3, [r7, #0]
    b6b4:	e084      	b.n	b7c0 <mp_unary_op+0x1c0>
                } else if (val == MP_SMALL_INT_MIN) {
    b6b6:	697b      	ldr	r3, [r7, #20]
    b6b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b6bc:	d106      	bne.n	b6cc <mp_unary_op+0xcc>
                    // check for overflow
                    return mp_obj_new_int(-val);
    b6be:	697b      	ldr	r3, [r7, #20]
    b6c0:	425b      	negs	r3, r3
    b6c2:	4618      	mov	r0, r3
    b6c4:	f005 f852 	bl	1076c <mp_obj_new_int>
    b6c8:	4603      	mov	r3, r0
    b6ca:	e079      	b.n	b7c0 <mp_unary_op+0x1c0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b6cc:	697b      	ldr	r3, [r7, #20]
    b6ce:	425b      	negs	r3, r3
    b6d0:	005b      	lsls	r3, r3, #1
    b6d2:	f043 0301 	orr.w	r3, r3, #1
    b6d6:	e073      	b.n	b7c0 <mp_unary_op+0x1c0>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    b6d8:	687b      	ldr	r3, [r7, #4]
    b6da:	2b02      	cmp	r3, #2
    b6dc:	d005      	beq.n	b6ea <mp_unary_op+0xea>
    b6de:	4b3a      	ldr	r3, [pc, #232]	; (b7c8 <mp_unary_op+0x1c8>)
    b6e0:	4a3a      	ldr	r2, [pc, #232]	; (b7cc <mp_unary_op+0x1cc>)
    b6e2:	21fa      	movs	r1, #250	; 0xfa
    b6e4:	483a      	ldr	r0, [pc, #232]	; (b7d0 <mp_unary_op+0x1d0>)
    b6e6:	f00f fecb 	bl	1b480 <__assert_func>
                return MP_OBJ_NEW_SMALL_INT(~val);
    b6ea:	697b      	ldr	r3, [r7, #20]
    b6ec:	43db      	mvns	r3, r3
    b6ee:	005b      	lsls	r3, r3, #1
    b6f0:	f043 0301 	orr.w	r3, r3, #1
    b6f4:	e064      	b.n	b7c0 <mp_unary_op+0x1c0>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    b6f6:	687b      	ldr	r3, [r7, #4]
    b6f8:	2b06      	cmp	r3, #6
    b6fa:	d145      	bne.n	b788 <mp_unary_op+0x188>
    b6fc:	6838      	ldr	r0, [r7, #0]
    b6fe:	f7ff fdc9 	bl	b294 <MP_OBJ_IS_QSTR>
    b702:	4603      	mov	r3, r0
    b704:	2b00      	cmp	r3, #0
    b706:	d10b      	bne.n	b720 <mp_unary_op+0x120>
    b708:	6838      	ldr	r0, [r7, #0]
    b70a:	f7ff fdd5 	bl	b2b8 <MP_OBJ_IS_OBJ>
    b70e:	4603      	mov	r3, r0
    b710:	2b00      	cmp	r3, #0
    b712:	d039      	beq.n	b788 <mp_unary_op+0x188>
    b714:	683b      	ldr	r3, [r7, #0]
    b716:	681b      	ldr	r3, [r3, #0]
    b718:	699b      	ldr	r3, [r3, #24]
    b71a:	4a2e      	ldr	r2, [pc, #184]	; (b7d4 <mp_unary_op+0x1d4>)
    b71c:	4293      	cmp	r3, r2
    b71e:	d133      	bne.n	b788 <mp_unary_op+0x188>
        // fast path for hashing str/bytes
        GET_STR_HASH(arg, h);
    b720:	6838      	ldr	r0, [r7, #0]
    b722:	f7ff fdb7 	bl	b294 <MP_OBJ_IS_QSTR>
    b726:	4603      	mov	r3, r0
    b728:	2b00      	cmp	r3, #0
    b72a:	d006      	beq.n	b73a <mp_unary_op+0x13a>
    b72c:	683b      	ldr	r3, [r7, #0]
    b72e:	089b      	lsrs	r3, r3, #2
    b730:	4618      	mov	r0, r3
    b732:	f7f5 fd6d 	bl	1210 <qstr_hash>
    b736:	61f8      	str	r0, [r7, #28]
    b738:	e002      	b.n	b740 <mp_unary_op+0x140>
    b73a:	683b      	ldr	r3, [r7, #0]
    b73c:	685b      	ldr	r3, [r3, #4]
    b73e:	61fb      	str	r3, [r7, #28]
        if (h == 0) {
    b740:	69fb      	ldr	r3, [r7, #28]
    b742:	2b00      	cmp	r3, #0
    b744:	d11b      	bne.n	b77e <mp_unary_op+0x17e>
            GET_STR_DATA_LEN(arg, data, len);
    b746:	6838      	ldr	r0, [r7, #0]
    b748:	f7ff fda4 	bl	b294 <MP_OBJ_IS_QSTR>
    b74c:	4603      	mov	r3, r0
    b74e:	2b00      	cmp	r3, #0
    b750:	d009      	beq.n	b766 <mp_unary_op+0x166>
    b752:	683b      	ldr	r3, [r7, #0]
    b754:	089b      	lsrs	r3, r3, #2
    b756:	f107 0208 	add.w	r2, r7, #8
    b75a:	4611      	mov	r1, r2
    b75c:	4618      	mov	r0, r3
    b75e:	f7f5 fd81 	bl	1264 <qstr_data>
    b762:	61b8      	str	r0, [r7, #24]
    b764:	e005      	b.n	b772 <mp_unary_op+0x172>
    b766:	683b      	ldr	r3, [r7, #0]
    b768:	689b      	ldr	r3, [r3, #8]
    b76a:	60bb      	str	r3, [r7, #8]
    b76c:	683b      	ldr	r3, [r7, #0]
    b76e:	68db      	ldr	r3, [r3, #12]
    b770:	61bb      	str	r3, [r7, #24]
            h = qstr_compute_hash(data, len);
    b772:	68bb      	ldr	r3, [r7, #8]
    b774:	4619      	mov	r1, r3
    b776:	69b8      	ldr	r0, [r7, #24]
    b778:	f7f5 fb7a 	bl	e70 <qstr_compute_hash>
    b77c:	61f8      	str	r0, [r7, #28]
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    b77e:	69fb      	ldr	r3, [r7, #28]
    b780:	005b      	lsls	r3, r3, #1
    b782:	f043 0301 	orr.w	r3, r3, #1
    b786:	e01b      	b.n	b7c0 <mp_unary_op+0x1c0>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    b788:	6838      	ldr	r0, [r7, #0]
    b78a:	f001 ff91 	bl	d6b0 <mp_obj_get_type>
    b78e:	6138      	str	r0, [r7, #16]
        if (type->unary_op != NULL) {
    b790:	693b      	ldr	r3, [r7, #16]
    b792:	695b      	ldr	r3, [r3, #20]
    b794:	2b00      	cmp	r3, #0
    b796:	d00a      	beq.n	b7ae <mp_unary_op+0x1ae>
            mp_obj_t result = type->unary_op(op, arg);
    b798:	693b      	ldr	r3, [r7, #16]
    b79a:	695b      	ldr	r3, [r3, #20]
    b79c:	6839      	ldr	r1, [r7, #0]
    b79e:	6878      	ldr	r0, [r7, #4]
    b7a0:	4798      	blx	r3
    b7a2:	60f8      	str	r0, [r7, #12]
            if (result != MP_OBJ_NULL) {
    b7a4:	68fb      	ldr	r3, [r7, #12]
    b7a6:	2b00      	cmp	r3, #0
    b7a8:	d001      	beq.n	b7ae <mp_unary_op+0x1ae>
                return result;
    b7aa:	68fb      	ldr	r3, [r7, #12]
    b7ac:	e008      	b.n	b7c0 <mp_unary_op+0x1c0>
            }
        }
        // With MP_UNARY_OP_INT, mp_unary_op() becomes a fallback for mp_obj_get_int().
        // In this case provide a more focused error message to not confuse, e.g. chr(1.0)
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            if (op == MP_UNARY_OP_INT) {
    b7ae:	687b      	ldr	r3, [r7, #4]
    b7b0:	2b08      	cmp	r3, #8
    b7b2:	d102      	bne.n	b7ba <mp_unary_op+0x1ba>
                mp_raise_TypeError("can't convert to int");
    b7b4:	4808      	ldr	r0, [pc, #32]	; (b7d8 <mp_unary_op+0x1d8>)
    b7b6:	f001 fb57 	bl	ce68 <mp_raise_TypeError>
            } else {
                mp_raise_TypeError("unsupported type for operator");
    b7ba:	4808      	ldr	r0, [pc, #32]	; (b7dc <mp_unary_op+0x1dc>)
    b7bc:	f001 fb54 	bl	ce68 <mp_raise_TypeError>
                    "unsupported type for %q: '%s'",
                    mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
            }
        }
    }
}
    b7c0:	4618      	mov	r0, r3
    b7c2:	3720      	adds	r7, #32
    b7c4:	46bd      	mov	sp, r7
    b7c6:	bd80      	pop	{r7, pc}
    b7c8:	000212b4 	.word	0x000212b4
    b7cc:	00021540 	.word	0x00021540
    b7d0:	000212d0 	.word	0x000212d0
    b7d4:	000126f7 	.word	0x000126f7
    b7d8:	000212e4 	.word	0x000212e4
    b7dc:	000212fc 	.word	0x000212fc

0000b7e0 <mp_binary_op>:

mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    b7e0:	b590      	push	{r4, r7, lr}
    b7e2:	b095      	sub	sp, #84	; 0x54
    b7e4:	af00      	add	r7, sp, #0
    b7e6:	60f8      	str	r0, [r7, #12]
    b7e8:	60b9      	str	r1, [r7, #8]
    b7ea:	607a      	str	r2, [r7, #4]
    //   then check for implemented seq.concat
    //   then fail
    // note that list does not implement + or +=, so that inplace_concat is reached first for +=

    // deal with is
    if (op == MP_BINARY_OP_IS) {
    b7ec:	68fb      	ldr	r3, [r7, #12]
    b7ee:	2b07      	cmp	r3, #7
    b7f0:	d10b      	bne.n	b80a <mp_binary_op+0x2a>
        return mp_obj_new_bool(lhs == rhs);
    b7f2:	68ba      	ldr	r2, [r7, #8]
    b7f4:	687b      	ldr	r3, [r7, #4]
    b7f6:	429a      	cmp	r2, r3
    b7f8:	bf0c      	ite	eq
    b7fa:	2301      	moveq	r3, #1
    b7fc:	2300      	movne	r3, #0
    b7fe:	b2db      	uxtb	r3, r3
    b800:	4618      	mov	r0, r3
    b802:	f7ff fd8c 	bl	b31e <mp_obj_new_bool>
    b806:	4603      	mov	r3, r0
    b808:	e23d      	b.n	bc86 <mp_binary_op+0x4a6>
    }

    // deal with == and != for all types
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    b80a:	68fb      	ldr	r3, [r7, #12]
    b80c:	2b02      	cmp	r3, #2
    b80e:	d002      	beq.n	b816 <mp_binary_op+0x36>
    b810:	68fb      	ldr	r3, [r7, #12]
    b812:	2b05      	cmp	r3, #5
    b814:	d114      	bne.n	b840 <mp_binary_op+0x60>
        if (mp_obj_equal(lhs, rhs)) {
    b816:	6879      	ldr	r1, [r7, #4]
    b818:	68b8      	ldr	r0, [r7, #8]
    b81a:	f002 f89b 	bl	d954 <mp_obj_equal>
    b81e:	4603      	mov	r3, r0
    b820:	2b00      	cmp	r3, #0
    b822:	d006      	beq.n	b832 <mp_binary_op+0x52>
            if (op == MP_BINARY_OP_EQUAL) {
    b824:	68fb      	ldr	r3, [r7, #12]
    b826:	2b02      	cmp	r3, #2
    b828:	d101      	bne.n	b82e <mp_binary_op+0x4e>
                return mp_const_true;
    b82a:	4bb0      	ldr	r3, [pc, #704]	; (baec <mp_binary_op+0x30c>)
    b82c:	e22b      	b.n	bc86 <mp_binary_op+0x4a6>
            } else {
                return mp_const_false;
    b82e:	4bb0      	ldr	r3, [pc, #704]	; (baf0 <mp_binary_op+0x310>)
    b830:	e229      	b.n	bc86 <mp_binary_op+0x4a6>
            }
        } else {
            if (op == MP_BINARY_OP_EQUAL) {
    b832:	68fb      	ldr	r3, [r7, #12]
    b834:	2b02      	cmp	r3, #2
    b836:	d101      	bne.n	b83c <mp_binary_op+0x5c>
                return mp_const_false;
    b838:	4bad      	ldr	r3, [pc, #692]	; (baf0 <mp_binary_op+0x310>)
    b83a:	e224      	b.n	bc86 <mp_binary_op+0x4a6>
            } else {
                return mp_const_true;
    b83c:	4bab      	ldr	r3, [pc, #684]	; (baec <mp_binary_op+0x30c>)
    b83e:	e222      	b.n	bc86 <mp_binary_op+0x4a6>
            }
        }
    }

    // deal with exception_match for all types
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    b840:	68fb      	ldr	r3, [r7, #12]
    b842:	2b08      	cmp	r3, #8
    b844:	d145      	bne.n	b8d2 <mp_binary_op+0xf2>
        // rhs must be issubclass(rhs, BaseException)
        if (mp_obj_is_exception_type(rhs)) {
    b846:	6878      	ldr	r0, [r7, #4]
    b848:	f003 feb6 	bl	f5b8 <mp_obj_is_exception_type>
    b84c:	4603      	mov	r3, r0
    b84e:	2b00      	cmp	r3, #0
    b850:	d00a      	beq.n	b868 <mp_binary_op+0x88>
            if (mp_obj_exception_match(lhs, rhs)) {
    b852:	6879      	ldr	r1, [r7, #4]
    b854:	68b8      	ldr	r0, [r7, #8]
    b856:	f003 fee7 	bl	f628 <mp_obj_exception_match>
    b85a:	4603      	mov	r3, r0
    b85c:	2b00      	cmp	r3, #0
    b85e:	d001      	beq.n	b864 <mp_binary_op+0x84>
                return mp_const_true;
    b860:	4ba2      	ldr	r3, [pc, #648]	; (baec <mp_binary_op+0x30c>)
    b862:	e210      	b.n	bc86 <mp_binary_op+0x4a6>
            } else {
                return mp_const_false;
    b864:	4ba2      	ldr	r3, [pc, #648]	; (baf0 <mp_binary_op+0x310>)
    b866:	e20e      	b.n	bc86 <mp_binary_op+0x4a6>
            }
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    b868:	6878      	ldr	r0, [r7, #4]
    b86a:	f7ff fd25 	bl	b2b8 <MP_OBJ_IS_OBJ>
    b86e:	4603      	mov	r3, r0
    b870:	2b00      	cmp	r3, #0
    b872:	f000 81f7 	beq.w	bc64 <mp_binary_op+0x484>
    b876:	687b      	ldr	r3, [r7, #4]
    b878:	681b      	ldr	r3, [r3, #0]
    b87a:	4a9e      	ldr	r2, [pc, #632]	; (baf4 <mp_binary_op+0x314>)
    b87c:	4293      	cmp	r3, r2
    b87e:	f040 81f1 	bne.w	bc64 <mp_binary_op+0x484>
            mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(rhs);
    b882:	687b      	ldr	r3, [r7, #4]
    b884:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (size_t i = 0; i < tuple->len; i++) {
    b886:	2300      	movs	r3, #0
    b888:	64fb      	str	r3, [r7, #76]	; 0x4c
    b88a:	e01b      	b.n	b8c4 <mp_binary_op+0xe4>
                rhs = tuple->items[i];
    b88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b88e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b890:	3202      	adds	r2, #2
    b892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b896:	607b      	str	r3, [r7, #4]
                if (!mp_obj_is_exception_type(rhs)) {
    b898:	6878      	ldr	r0, [r7, #4]
    b89a:	f003 fe8d 	bl	f5b8 <mp_obj_is_exception_type>
    b89e:	4603      	mov	r3, r0
    b8a0:	f083 0301 	eor.w	r3, r3, #1
    b8a4:	b2db      	uxtb	r3, r3
    b8a6:	2b00      	cmp	r3, #0
    b8a8:	f040 81de 	bne.w	bc68 <mp_binary_op+0x488>
                    goto unsupported_op;
                }
                if (mp_obj_exception_match(lhs, rhs)) {
    b8ac:	6879      	ldr	r1, [r7, #4]
    b8ae:	68b8      	ldr	r0, [r7, #8]
    b8b0:	f003 feba 	bl	f628 <mp_obj_exception_match>
    b8b4:	4603      	mov	r3, r0
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d001      	beq.n	b8be <mp_binary_op+0xde>
                    return mp_const_true;
    b8ba:	4b8c      	ldr	r3, [pc, #560]	; (baec <mp_binary_op+0x30c>)
    b8bc:	e1e3      	b.n	bc86 <mp_binary_op+0x4a6>
            for (size_t i = 0; i < tuple->len; i++) {
    b8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b8c0:	3301      	adds	r3, #1
    b8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    b8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b8c6:	685a      	ldr	r2, [r3, #4]
    b8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b8ca:	429a      	cmp	r2, r3
    b8cc:	d8de      	bhi.n	b88c <mp_binary_op+0xac>
                }
            }
            return mp_const_false;
    b8ce:	4b88      	ldr	r3, [pc, #544]	; (baf0 <mp_binary_op+0x310>)
    b8d0:	e1d9      	b.n	bc86 <mp_binary_op+0x4a6>
        }
        goto unsupported_op;
    }

    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    b8d2:	68b8      	ldr	r0, [r7, #8]
    b8d4:	f7ff fccc 	bl	b270 <MP_OBJ_IS_SMALL_INT>
    b8d8:	4603      	mov	r3, r0
    b8da:	2b00      	cmp	r3, #0
    b8dc:	f000 8186 	beq.w	bbec <mp_binary_op+0x40c>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    b8e0:	68bb      	ldr	r3, [r7, #8]
    b8e2:	105b      	asrs	r3, r3, #1
    b8e4:	64bb      	str	r3, [r7, #72]	; 0x48
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    b8e6:	6878      	ldr	r0, [r7, #4]
    b8e8:	f7ff fcc2 	bl	b270 <MP_OBJ_IS_SMALL_INT>
    b8ec:	4603      	mov	r3, r0
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	f000 817c 	beq.w	bbec <mp_binary_op+0x40c>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    b8f4:	687b      	ldr	r3, [r7, #4]
    b8f6:	105b      	asrs	r3, r3, #1
    b8f8:	647b      	str	r3, [r7, #68]	; 0x44
            //      -       result always fits in mp_int_t, then handled by SMALL_INT check
            //      *       checked explicitly
            //      /       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      %       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      <<      checked explicitly
            switch (op) {
    b8fa:	68fb      	ldr	r3, [r7, #12]
    b8fc:	2b21      	cmp	r3, #33	; 0x21
    b8fe:	f200 81b5 	bhi.w	bc6c <mp_binary_op+0x48c>
    b902:	a201      	add	r2, pc, #4	; (adr r2, b908 <mp_binary_op+0x128>)
    b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b908:	0000bb65 	.word	0x0000bb65
    b90c:	0000bb7d 	.word	0x0000bb7d
    b910:	0000bc6d 	.word	0x0000bc6d
    b914:	0000bb95 	.word	0x0000bb95
    b918:	0000bbad 	.word	0x0000bbad
    b91c:	0000bc6d 	.word	0x0000bc6d
    b920:	0000bc6d 	.word	0x0000bc6d
    b924:	0000bc6d 	.word	0x0000bc6d
    b928:	0000bc6d 	.word	0x0000bc6d
    b92c:	0000b991 	.word	0x0000b991
    b930:	0000b99b 	.word	0x0000b99b
    b934:	0000b9a5 	.word	0x0000b9a5
    b938:	0000b9af 	.word	0x0000b9af
    b93c:	0000b9fb 	.word	0x0000b9fb
    b940:	0000ba1d 	.word	0x0000ba1d
    b944:	0000ba27 	.word	0x0000ba27
    b948:	0000ba31 	.word	0x0000ba31
    b94c:	0000ba61 	.word	0x0000ba61
    b950:	0000bc6d 	.word	0x0000bc6d
    b954:	0000ba75 	.word	0x0000ba75
    b958:	0000ba89 	.word	0x0000ba89
    b95c:	0000b991 	.word	0x0000b991
    b960:	0000b99b 	.word	0x0000b99b
    b964:	0000b9a5 	.word	0x0000b9a5
    b968:	0000b9af 	.word	0x0000b9af
    b96c:	0000b9fb 	.word	0x0000b9fb
    b970:	0000ba1d 	.word	0x0000ba1d
    b974:	0000ba27 	.word	0x0000ba27
    b978:	0000ba31 	.word	0x0000ba31
    b97c:	0000ba61 	.word	0x0000ba61
    b980:	0000bc6d 	.word	0x0000bc6d
    b984:	0000ba75 	.word	0x0000ba75
    b988:	0000ba89 	.word	0x0000ba89
    b98c:	0000bb23 	.word	0x0000bb23
                case MP_BINARY_OP_OR:
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    b990:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b994:	4313      	orrs	r3, r2
    b996:	64bb      	str	r3, [r7, #72]	; 0x48
    b998:	e114      	b.n	bbc4 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_XOR:
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    b99a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b99e:	4053      	eors	r3, r2
    b9a0:	64bb      	str	r3, [r7, #72]	; 0x48
    b9a2:	e10f      	b.n	bbc4 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_AND:
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    b9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b9a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9a8:	4013      	ands	r3, r2
    b9aa:	64bb      	str	r3, [r7, #72]	; 0x48
    b9ac:	e10a      	b.n	bbc4 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_LSHIFT:
                case MP_BINARY_OP_INPLACE_LSHIFT: {
                    if (rhs_val < 0) {
    b9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9b0:	2b00      	cmp	r3, #0
    b9b2:	da02      	bge.n	b9ba <mp_binary_op+0x1da>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    b9b4:	4850      	ldr	r0, [pc, #320]	; (baf8 <mp_binary_op+0x318>)
    b9b6:	f001 fa4c 	bl	ce52 <mp_raise_ValueError>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    b9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9bc:	2b1f      	cmp	r3, #31
    b9be:	dc0d      	bgt.n	b9dc <mp_binary_op+0x1fc>
    b9c0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    b9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9c6:	411a      	asrs	r2, r3
    b9c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b9ca:	429a      	cmp	r2, r3
    b9cc:	db06      	blt.n	b9dc <mp_binary_op+0x1fc>
    b9ce:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    b9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9d4:	411a      	asrs	r2, r3
    b9d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b9d8:	429a      	cmp	r2, r3
    b9da:	dd08      	ble.n	b9ee <mp_binary_op+0x20e>
                        // left-shift will overflow, so use higher precision integer
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    b9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b9de:	ea4f 74e3 	mov.w	r4, r3, asr #31
    b9e2:	4618      	mov	r0, r3
    b9e4:	4621      	mov	r1, r4
    b9e6:	f004 fe8b 	bl	10700 <mp_obj_new_int_from_ll>
    b9ea:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    b9ec:	e109      	b.n	bc02 <mp_binary_op+0x422>
                    } else {
                        // use standard precision
                        lhs_val <<= rhs_val;
    b9ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
    b9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9f2:	fa02 f303 	lsl.w	r3, r2, r3
    b9f6:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    b9f8:	e0e4      	b.n	bbc4 <mp_binary_op+0x3e4>
                }
                case MP_BINARY_OP_RSHIFT:
                case MP_BINARY_OP_INPLACE_RSHIFT:
                    if (rhs_val < 0) {
    b9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b9fc:	2b00      	cmp	r3, #0
    b9fe:	da02      	bge.n	ba06 <mp_binary_op+0x226>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    ba00:	483d      	ldr	r0, [pc, #244]	; (baf8 <mp_binary_op+0x318>)
    ba02:	f001 fa26 	bl	ce52 <mp_raise_ValueError>
                    } else {
                        // standard precision is enough for right-shift
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    ba06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba08:	2b1f      	cmp	r3, #31
    ba0a:	dd01      	ble.n	ba10 <mp_binary_op+0x230>
                            // Shifting to big amounts is underfined behavior
                            // in C and is CPU-dependent; propagate sign bit.
                            rhs_val = BITS_PER_WORD - 1;
    ba0c:	231f      	movs	r3, #31
    ba0e:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        lhs_val >>= rhs_val;
    ba10:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba14:	fa42 f303 	asr.w	r3, r2, r3
    ba18:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    ba1a:	e0d3      	b.n	bbc4 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_ADD:
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    ba1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba20:	4413      	add	r3, r2
    ba22:	64bb      	str	r3, [r7, #72]	; 0x48
    ba24:	e0ce      	b.n	bbc4 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_SUBTRACT:
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    ba26:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ba28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba2a:	1ad3      	subs	r3, r2, r3
    ba2c:	64bb      	str	r3, [r7, #72]	; 0x48
    ba2e:	e0c9      	b.n	bbc4 <mp_binary_op+0x3e4>
                        // use standard precision
                        lhs_val = (mp_int_t)res;
                    }
                    #endif

                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    ba30:	6c79      	ldr	r1, [r7, #68]	; 0x44
    ba32:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ba34:	f00f fa9a 	bl	1af6c <mp_small_int_mul_overflow>
    ba38:	4603      	mov	r3, r0
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	d008      	beq.n	ba50 <mp_binary_op+0x270>
                        // use higher precision
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    ba3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba40:	ea4f 74e3 	mov.w	r4, r3, asr #31
    ba44:	4618      	mov	r0, r3
    ba46:	4621      	mov	r1, r4
    ba48:	f004 fe5a 	bl	10700 <mp_obj_new_int_from_ll>
    ba4c:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    ba4e:	e0d8      	b.n	bc02 <mp_binary_op+0x422>
                    } else {
                        // use standard precision
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    ba50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ba52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ba54:	fb02 f303 	mul.w	r3, r2, r3
    ba58:	005b      	lsls	r3, r3, #1
    ba5a:	f043 0301 	orr.w	r3, r3, #1
    ba5e:	e112      	b.n	bc86 <mp_binary_op+0x4a6>
                    }
                }
                case MP_BINARY_OP_FLOOR_DIVIDE:
                case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
                    if (rhs_val == 0) {
    ba60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba62:	2b00      	cmp	r3, #0
    ba64:	f000 8106 	beq.w	bc74 <mp_binary_op+0x494>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    ba68:	6c79      	ldr	r1, [r7, #68]	; 0x44
    ba6a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ba6c:	f00f fae3 	bl	1b036 <mp_small_int_floor_divide>
    ba70:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    ba72:	e0a7      	b.n	bbc4 <mp_binary_op+0x3e4>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
                #endif

                case MP_BINARY_OP_MODULO:
                case MP_BINARY_OP_INPLACE_MODULO: {
                    if (rhs_val == 0) {
    ba74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba76:	2b00      	cmp	r3, #0
    ba78:	f000 80fe 	beq.w	bc78 <mp_binary_op+0x498>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    ba7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    ba7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ba80:	f00f fab4 	bl	1afec <mp_small_int_modulo>
    ba84:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    ba86:	e09d      	b.n	bbc4 <mp_binary_op+0x3e4>
                }

                case MP_BINARY_OP_POWER:
                case MP_BINARY_OP_INPLACE_POWER:
                    if (rhs_val < 0) {
    ba88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	da02      	bge.n	ba94 <mp_binary_op+0x2b4>
                        #if MICROPY_PY_BUILTINS_FLOAT
                        lhs = mp_obj_new_float(lhs_val);
                        goto generic_binary_op;
                        #else
                        mp_raise_ValueError("negative power with no float support");
    ba8e:	481b      	ldr	r0, [pc, #108]	; (bafc <mp_binary_op+0x31c>)
    ba90:	f001 f9df 	bl	ce52 <mp_raise_ValueError>
                        #endif
                    } else {
                        mp_int_t ans = 1;
    ba94:	2301      	movs	r3, #1
    ba96:	643b      	str	r3, [r7, #64]	; 0x40
                        while (rhs_val > 0) {
    ba98:	e024      	b.n	bae4 <mp_binary_op+0x304>
                            if (rhs_val & 1) {
    ba9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ba9c:	f003 0301 	and.w	r3, r3, #1
    baa0:	2b00      	cmp	r3, #0
    baa2:	d00b      	beq.n	babc <mp_binary_op+0x2dc>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    baa4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    baa6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    baa8:	f00f fa60 	bl	1af6c <mp_small_int_mul_overflow>
    baac:	4603      	mov	r3, r0
    baae:	2b00      	cmp	r3, #0
    bab0:	d12a      	bne.n	bb08 <mp_binary_op+0x328>
                                    goto power_overflow;
                                }
                                ans *= lhs_val;
    bab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bab6:	fb02 f303 	mul.w	r3, r2, r3
    baba:	643b      	str	r3, [r7, #64]	; 0x40
                            }
                            if (rhs_val == 1) {
    babc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    babe:	2b01      	cmp	r3, #1
    bac0:	d01e      	beq.n	bb00 <mp_binary_op+0x320>
                                break;
                            }
                            rhs_val /= 2;
    bac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bac4:	0fda      	lsrs	r2, r3, #31
    bac6:	4413      	add	r3, r2
    bac8:	105b      	asrs	r3, r3, #1
    baca:	647b      	str	r3, [r7, #68]	; 0x44
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    bacc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bace:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bad0:	f00f fa4c 	bl	1af6c <mp_small_int_mul_overflow>
    bad4:	4603      	mov	r3, r0
    bad6:	2b00      	cmp	r3, #0
    bad8:	d118      	bne.n	bb0c <mp_binary_op+0x32c>
                                goto power_overflow;
                            }
                            lhs_val *= lhs_val;
    bada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    badc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bade:	fb02 f303 	mul.w	r3, r2, r3
    bae2:	64bb      	str	r3, [r7, #72]	; 0x48
                        while (rhs_val > 0) {
    bae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bae6:	2b00      	cmp	r3, #0
    bae8:	dcd7      	bgt.n	ba9a <mp_binary_op+0x2ba>
    baea:	e00a      	b.n	bb02 <mp_binary_op+0x322>
    baec:	0002189c 	.word	0x0002189c
    baf0:	00021894 	.word	0x00021894
    baf4:	00023a20 	.word	0x00023a20
    baf8:	0002131c 	.word	0x0002131c
    bafc:	00021334 	.word	0x00021334
                                break;
    bb00:	bf00      	nop
                        }
                        lhs_val = ans;
    bb02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bb04:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bb06:	e05d      	b.n	bbc4 <mp_binary_op+0x3e4>
                                    goto power_overflow;
    bb08:	bf00      	nop
    bb0a:	e000      	b.n	bb0e <mp_binary_op+0x32e>
                                goto power_overflow;
    bb0c:	bf00      	nop

                power_overflow:
                    // use higher precision
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    bb0e:	68bb      	ldr	r3, [r7, #8]
    bb10:	105b      	asrs	r3, r3, #1
    bb12:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bb16:	4618      	mov	r0, r3
    bb18:	4621      	mov	r1, r4
    bb1a:	f004 fdf1 	bl	10700 <mp_obj_new_int_from_ll>
    bb1e:	60b8      	str	r0, [r7, #8]
                    goto generic_binary_op;
    bb20:	e06f      	b.n	bc02 <mp_binary_op+0x422>

                case MP_BINARY_OP_DIVMOD: {
                    if (rhs_val == 0) {
    bb22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb24:	2b00      	cmp	r3, #0
    bb26:	f000 80a9 	beq.w	bc7c <mp_binary_op+0x49c>
                        goto zero_division;
                    }
                    // to reduce stack usage we don't pass a temp array of the 2 items
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    bb2a:	2100      	movs	r1, #0
    bb2c:	2002      	movs	r0, #2
    bb2e:	f00a f871 	bl	15c14 <mp_obj_new_tuple>
    bb32:	63b8      	str	r0, [r7, #56]	; 0x38
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    bb34:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb38:	f00f fa7d 	bl	1b036 <mp_small_int_floor_divide>
    bb3c:	4603      	mov	r3, r0
    bb3e:	005b      	lsls	r3, r3, #1
    bb40:	f043 0301 	orr.w	r3, r3, #1
    bb44:	461a      	mov	r2, r3
    bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb48:	609a      	str	r2, [r3, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    bb4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb4e:	f00f fa4d 	bl	1afec <mp_small_int_modulo>
    bb52:	4603      	mov	r3, r0
    bb54:	005b      	lsls	r3, r3, #1
    bb56:	f043 0301 	orr.w	r3, r3, #1
    bb5a:	461a      	mov	r2, r3
    bb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb5e:	60da      	str	r2, [r3, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bb62:	e090      	b.n	bc86 <mp_binary_op+0x4a6>
                }

                case MP_BINARY_OP_LESS: return mp_obj_new_bool(lhs_val < rhs_val);
    bb64:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb68:	429a      	cmp	r2, r3
    bb6a:	bfb4      	ite	lt
    bb6c:	2301      	movlt	r3, #1
    bb6e:	2300      	movge	r3, #0
    bb70:	b2db      	uxtb	r3, r3
    bb72:	4618      	mov	r0, r3
    bb74:	f7ff fbd3 	bl	b31e <mp_obj_new_bool>
    bb78:	4603      	mov	r3, r0
    bb7a:	e084      	b.n	bc86 <mp_binary_op+0x4a6>
                case MP_BINARY_OP_MORE: return mp_obj_new_bool(lhs_val > rhs_val);
    bb7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb80:	429a      	cmp	r2, r3
    bb82:	bfcc      	ite	gt
    bb84:	2301      	movgt	r3, #1
    bb86:	2300      	movle	r3, #0
    bb88:	b2db      	uxtb	r3, r3
    bb8a:	4618      	mov	r0, r3
    bb8c:	f7ff fbc7 	bl	b31e <mp_obj_new_bool>
    bb90:	4603      	mov	r3, r0
    bb92:	e078      	b.n	bc86 <mp_binary_op+0x4a6>
                case MP_BINARY_OP_LESS_EQUAL: return mp_obj_new_bool(lhs_val <= rhs_val);
    bb94:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb98:	429a      	cmp	r2, r3
    bb9a:	bfd4      	ite	le
    bb9c:	2301      	movle	r3, #1
    bb9e:	2300      	movgt	r3, #0
    bba0:	b2db      	uxtb	r3, r3
    bba2:	4618      	mov	r0, r3
    bba4:	f7ff fbbb 	bl	b31e <mp_obj_new_bool>
    bba8:	4603      	mov	r3, r0
    bbaa:	e06c      	b.n	bc86 <mp_binary_op+0x4a6>
                case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);
    bbac:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbb0:	429a      	cmp	r2, r3
    bbb2:	bfac      	ite	ge
    bbb4:	2301      	movge	r3, #1
    bbb6:	2300      	movlt	r3, #0
    bbb8:	b2db      	uxtb	r3, r3
    bbba:	4618      	mov	r0, r3
    bbbc:	f7ff fbaf 	bl	b31e <mp_obj_new_bool>
    bbc0:	4603      	mov	r3, r0
    bbc2:	e060      	b.n	bc86 <mp_binary_op+0x4a6>

                default:
                    goto unsupported_op;
            }
            // This is an inlined version of mp_obj_new_int, for speed
            if (MP_SMALL_INT_FITS(lhs_val)) {
    bbc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbc6:	005a      	lsls	r2, r3, #1
    bbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbca:	4053      	eors	r3, r2
    bbcc:	2b00      	cmp	r3, #0
    bbce:	db04      	blt.n	bbda <mp_binary_op+0x3fa>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    bbd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbd2:	005b      	lsls	r3, r3, #1
    bbd4:	f043 0301 	orr.w	r3, r3, #1
    bbd8:	e055      	b.n	bc86 <mp_binary_op+0x4a6>
            } else {
                return mp_obj_new_int_from_ll(lhs_val);
    bbda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bbdc:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bbe0:	4618      	mov	r0, r3
    bbe2:	4621      	mov	r1, r4
    bbe4:	f004 fd8c 	bl	10700 <mp_obj_new_int_from_ll>
    bbe8:	4603      	mov	r3, r0
    bbea:	e04c      	b.n	bc86 <mp_binary_op+0x4a6>
#endif
        }
    }

    // Convert MP_BINARY_OP_IN to MP_BINARY_OP_CONTAINS with swapped args.
    if (op == MP_BINARY_OP_IN) {
    bbec:	68fb      	ldr	r3, [r7, #12]
    bbee:	2b06      	cmp	r3, #6
    bbf0:	d107      	bne.n	bc02 <mp_binary_op+0x422>
        op = MP_BINARY_OP_CONTAINS;
    bbf2:	2322      	movs	r3, #34	; 0x22
    bbf4:	60fb      	str	r3, [r7, #12]
        mp_obj_t temp = lhs;
    bbf6:	68bb      	ldr	r3, [r7, #8]
    bbf8:	637b      	str	r3, [r7, #52]	; 0x34
        lhs = rhs;
    bbfa:	687b      	ldr	r3, [r7, #4]
    bbfc:	60bb      	str	r3, [r7, #8]
        rhs = temp;
    bbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bc00:	607b      	str	r3, [r7, #4]
    }

    // generic binary_op supplied by type
    mp_obj_type_t *type;
generic_binary_op:
    type = mp_obj_get_type(lhs);
    bc02:	68b8      	ldr	r0, [r7, #8]
    bc04:	f001 fd54 	bl	d6b0 <mp_obj_get_type>
    bc08:	6338      	str	r0, [r7, #48]	; 0x30
    if (type->binary_op != NULL) {
    bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc0c:	699b      	ldr	r3, [r3, #24]
    bc0e:	2b00      	cmp	r3, #0
    bc10:	d00b      	beq.n	bc2a <mp_binary_op+0x44a>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    bc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc14:	699b      	ldr	r3, [r3, #24]
    bc16:	687a      	ldr	r2, [r7, #4]
    bc18:	68b9      	ldr	r1, [r7, #8]
    bc1a:	68f8      	ldr	r0, [r7, #12]
    bc1c:	4798      	blx	r3
    bc1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result != MP_OBJ_NULL) {
    bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc22:	2b00      	cmp	r3, #0
    bc24:	d001      	beq.n	bc2a <mp_binary_op+0x44a>
            return result;
    bc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc28:	e02d      	b.n	bc86 <mp_binary_op+0x4a6>
        // Convert __rop__ back to __op__ for error message
        op -= MP_BINARY_OP_REVERSE_OR - MP_BINARY_OP_OR;
    }
#endif

    if (op == MP_BINARY_OP_CONTAINS) {
    bc2a:	68fb      	ldr	r3, [r7, #12]
    bc2c:	2b22      	cmp	r3, #34	; 0x22
    bc2e:	d11e      	bne.n	bc6e <mp_binary_op+0x48e>
        // If type didn't support containment then explicitly walk the iterator.
        // mp_getiter will raise the appropriate exception if lhs is not iterable.
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    bc30:	f107 0314 	add.w	r3, r7, #20
    bc34:	4619      	mov	r1, r3
    bc36:	68b8      	ldr	r0, [r7, #8]
    bc38:	f000 fddc 	bl	c7f4 <mp_getiter>
    bc3c:	62b8      	str	r0, [r7, #40]	; 0x28
        mp_obj_t next;
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bc3e:	e008      	b.n	bc52 <mp_binary_op+0x472>
            if (mp_obj_equal(next, rhs)) {
    bc40:	6879      	ldr	r1, [r7, #4]
    bc42:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bc44:	f001 fe86 	bl	d954 <mp_obj_equal>
    bc48:	4603      	mov	r3, r0
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	d001      	beq.n	bc52 <mp_binary_op+0x472>
                return mp_const_true;
    bc4e:	4b10      	ldr	r3, [pc, #64]	; (bc90 <mp_binary_op+0x4b0>)
    bc50:	e019      	b.n	bc86 <mp_binary_op+0x4a6>
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bc52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bc54:	f000 fe50 	bl	c8f8 <mp_iternext>
    bc58:	6278      	str	r0, [r7, #36]	; 0x24
    bc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bc5c:	2b04      	cmp	r3, #4
    bc5e:	d1ef      	bne.n	bc40 <mp_binary_op+0x460>
            }
        }
        return mp_const_false;
    bc60:	4b0c      	ldr	r3, [pc, #48]	; (bc94 <mp_binary_op+0x4b4>)
    bc62:	e010      	b.n	bc86 <mp_binary_op+0x4a6>
        goto unsupported_op;
    bc64:	bf00      	nop
    bc66:	e002      	b.n	bc6e <mp_binary_op+0x48e>
                    goto unsupported_op;
    bc68:	bf00      	nop
    bc6a:	e000      	b.n	bc6e <mp_binary_op+0x48e>
                    goto unsupported_op;
    bc6c:	bf00      	nop
    }

unsupported_op:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("unsupported type for operator");
    bc6e:	480a      	ldr	r0, [pc, #40]	; (bc98 <mp_binary_op+0x4b8>)
    bc70:	f001 f8fa 	bl	ce68 <mp_raise_TypeError>
                        goto zero_division;
    bc74:	bf00      	nop
    bc76:	e002      	b.n	bc7e <mp_binary_op+0x49e>
                        goto zero_division;
    bc78:	bf00      	nop
    bc7a:	e000      	b.n	bc7e <mp_binary_op+0x49e>
                        goto zero_division;
    bc7c:	bf00      	nop
            "unsupported types for %q: '%s', '%s'",
            mp_binary_op_method_name[op], mp_obj_get_type_str(lhs), mp_obj_get_type_str(rhs)));
    }

zero_division:
    mp_raise_msg(&mp_type_ZeroDivisionError, "divide by zero");
    bc7e:	4907      	ldr	r1, [pc, #28]	; (bc9c <mp_binary_op+0x4bc>)
    bc80:	4807      	ldr	r0, [pc, #28]	; (bca0 <mp_binary_op+0x4c0>)
    bc82:	f001 f8cf 	bl	ce24 <mp_raise_msg>
}
    bc86:	4618      	mov	r0, r3
    bc88:	3754      	adds	r7, #84	; 0x54
    bc8a:	46bd      	mov	sp, r7
    bc8c:	bd90      	pop	{r4, r7, pc}
    bc8e:	bf00      	nop
    bc90:	0002189c 	.word	0x0002189c
    bc94:	00021894 	.word	0x00021894
    bc98:	000212fc 	.word	0x000212fc
    bc9c:	0002135c 	.word	0x0002135c
    bca0:	00022024 	.word	0x00022024

0000bca4 <mp_call_function_0>:

mp_obj_t mp_call_function_0(mp_obj_t fun) {
    bca4:	b580      	push	{r7, lr}
    bca6:	b082      	sub	sp, #8
    bca8:	af00      	add	r7, sp, #0
    bcaa:	6078      	str	r0, [r7, #4]
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    bcac:	2300      	movs	r3, #0
    bcae:	2200      	movs	r2, #0
    bcb0:	2100      	movs	r1, #0
    bcb2:	6878      	ldr	r0, [r7, #4]
    bcb4:	f000 f82b 	bl	bd0e <mp_call_function_n_kw>
    bcb8:	4603      	mov	r3, r0
}
    bcba:	4618      	mov	r0, r3
    bcbc:	3708      	adds	r7, #8
    bcbe:	46bd      	mov	sp, r7
    bcc0:	bd80      	pop	{r7, pc}

0000bcc2 <mp_call_function_1>:

mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    bcc2:	b580      	push	{r7, lr}
    bcc4:	b082      	sub	sp, #8
    bcc6:	af00      	add	r7, sp, #0
    bcc8:	6078      	str	r0, [r7, #4]
    bcca:	6039      	str	r1, [r7, #0]
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    bccc:	463b      	mov	r3, r7
    bcce:	2200      	movs	r2, #0
    bcd0:	2101      	movs	r1, #1
    bcd2:	6878      	ldr	r0, [r7, #4]
    bcd4:	f000 f81b 	bl	bd0e <mp_call_function_n_kw>
    bcd8:	4603      	mov	r3, r0
}
    bcda:	4618      	mov	r0, r3
    bcdc:	3708      	adds	r7, #8
    bcde:	46bd      	mov	sp, r7
    bce0:	bd80      	pop	{r7, pc}

0000bce2 <mp_call_function_2>:

mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    bce2:	b580      	push	{r7, lr}
    bce4:	b086      	sub	sp, #24
    bce6:	af00      	add	r7, sp, #0
    bce8:	60f8      	str	r0, [r7, #12]
    bcea:	60b9      	str	r1, [r7, #8]
    bcec:	607a      	str	r2, [r7, #4]
    mp_obj_t args[2];
    args[0] = arg1;
    bcee:	68bb      	ldr	r3, [r7, #8]
    bcf0:	613b      	str	r3, [r7, #16]
    args[1] = arg2;
    bcf2:	687b      	ldr	r3, [r7, #4]
    bcf4:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(fun, 2, 0, args);
    bcf6:	f107 0310 	add.w	r3, r7, #16
    bcfa:	2200      	movs	r2, #0
    bcfc:	2102      	movs	r1, #2
    bcfe:	68f8      	ldr	r0, [r7, #12]
    bd00:	f000 f805 	bl	bd0e <mp_call_function_n_kw>
    bd04:	4603      	mov	r3, r0
}
    bd06:	4618      	mov	r0, r3
    bd08:	3718      	adds	r7, #24
    bd0a:	46bd      	mov	sp, r7
    bd0c:	bd80      	pop	{r7, pc}

0000bd0e <mp_call_function_n_kw>:

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    bd0e:	b590      	push	{r4, r7, lr}
    bd10:	b087      	sub	sp, #28
    bd12:	af00      	add	r7, sp, #0
    bd14:	60f8      	str	r0, [r7, #12]
    bd16:	60b9      	str	r1, [r7, #8]
    bd18:	607a      	str	r2, [r7, #4]
    bd1a:	603b      	str	r3, [r7, #0]
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    bd1c:	68f8      	ldr	r0, [r7, #12]
    bd1e:	f001 fcc7 	bl	d6b0 <mp_obj_get_type>
    bd22:	6178      	str	r0, [r7, #20]

    // do the call
    if (type->call != NULL) {
    bd24:	697b      	ldr	r3, [r7, #20]
    bd26:	691b      	ldr	r3, [r3, #16]
    bd28:	2b00      	cmp	r3, #0
    bd2a:	d008      	beq.n	bd3e <mp_call_function_n_kw+0x30>
        return type->call(fun_in, n_args, n_kw, args);
    bd2c:	697b      	ldr	r3, [r7, #20]
    bd2e:	691c      	ldr	r4, [r3, #16]
    bd30:	683b      	ldr	r3, [r7, #0]
    bd32:	687a      	ldr	r2, [r7, #4]
    bd34:	68b9      	ldr	r1, [r7, #8]
    bd36:	68f8      	ldr	r0, [r7, #12]
    bd38:	47a0      	blx	r4
    bd3a:	4603      	mov	r3, r0
    bd3c:	e002      	b.n	bd44 <mp_call_function_n_kw+0x36>
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not callable");
    bd3e:	4803      	ldr	r0, [pc, #12]	; (bd4c <mp_call_function_n_kw+0x3e>)
    bd40:	f001 f892 	bl	ce68 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object isn't callable", mp_obj_get_type_str(fun_in)));
    }
}
    bd44:	4618      	mov	r0, r3
    bd46:	371c      	adds	r7, #28
    bd48:	46bd      	mov	sp, r7
    bd4a:	bd90      	pop	{r4, r7, pc}
    bd4c:	0002136c 	.word	0x0002136c

0000bd50 <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    bd50:	b580      	push	{r7, lr}
    bd52:	b086      	sub	sp, #24
    bd54:	af00      	add	r7, sp, #0
    bd56:	60f8      	str	r0, [r7, #12]
    bd58:	60b9      	str	r1, [r7, #8]
    bd5a:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    bd5c:	687b      	ldr	r3, [r7, #4]
    bd5e:	3304      	adds	r3, #4
    bd60:	681b      	ldr	r3, [r3, #0]
    bd62:	2b00      	cmp	r3, #0
    bd64:	bf14      	ite	ne
    bd66:	2301      	movne	r3, #1
    bd68:	2300      	moveq	r3, #0
    bd6a:	b2db      	uxtb	r3, r3
    bd6c:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    bd6e:	687b      	ldr	r3, [r7, #4]
    bd70:	6818      	ldr	r0, [r3, #0]
    bd72:	697a      	ldr	r2, [r7, #20]
    bd74:	68fb      	ldr	r3, [r7, #12]
    bd76:	18d1      	adds	r1, r2, r3
    bd78:	697a      	ldr	r2, [r7, #20]
    bd7a:	4613      	mov	r3, r2
    bd7c:	079b      	lsls	r3, r3, #30
    bd7e:	1a9b      	subs	r3, r3, r2
    bd80:	009b      	lsls	r3, r3, #2
    bd82:	3308      	adds	r3, #8
    bd84:	687a      	ldr	r2, [r7, #4]
    bd86:	4413      	add	r3, r2
    bd88:	68ba      	ldr	r2, [r7, #8]
    bd8a:	f7ff ffc0 	bl	bd0e <mp_call_function_n_kw>
    bd8e:	4603      	mov	r3, r0
}
    bd90:	4618      	mov	r0, r3
    bd92:	3718      	adds	r7, #24
    bd94:	46bd      	mov	sp, r7
    bd96:	bd80      	pop	{r7, pc}

0000bd98 <mp_call_prepare_args_n_kw_var>:

// This function only needs to be exposed externally when in stackless mode.
#if !MICROPY_STACKLESS
STATIC
#endif
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    bd98:	b580      	push	{r7, lr}
    bd9a:	b0a2      	sub	sp, #136	; 0x88
    bd9c:	af00      	add	r7, sp, #0
    bd9e:	60b9      	str	r1, [r7, #8]
    bda0:	607a      	str	r2, [r7, #4]
    bda2:	603b      	str	r3, [r7, #0]
    bda4:	4603      	mov	r3, r0
    bda6:	73fb      	strb	r3, [r7, #15]
    mp_obj_t fun = *args++;
    bda8:	687b      	ldr	r3, [r7, #4]
    bdaa:	1d1a      	adds	r2, r3, #4
    bdac:	607a      	str	r2, [r7, #4]
    bdae:	681b      	ldr	r3, [r3, #0]
    bdb0:	663b      	str	r3, [r7, #96]	; 0x60
    mp_obj_t self = MP_OBJ_NULL;
    bdb2:	2300      	movs	r3, #0
    bdb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (have_self) {
    bdb8:	7bfb      	ldrb	r3, [r7, #15]
    bdba:	2b00      	cmp	r3, #0
    bdbc:	d005      	beq.n	bdca <mp_call_prepare_args_n_kw_var+0x32>
        self = *args++; // may be MP_OBJ_NULL
    bdbe:	687b      	ldr	r3, [r7, #4]
    bdc0:	1d1a      	adds	r2, r3, #4
    bdc2:	607a      	str	r2, [r7, #4]
    bdc4:	681b      	ldr	r3, [r3, #0]
    bdc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    uint n_args = n_args_n_kw & 0xff;
    bdca:	68bb      	ldr	r3, [r7, #8]
    bdcc:	b2db      	uxtb	r3, r3
    bdce:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    bdd0:	68bb      	ldr	r3, [r7, #8]
    bdd2:	0a1b      	lsrs	r3, r3, #8
    bdd4:	b2db      	uxtb	r3, r3
    bdd6:	65bb      	str	r3, [r7, #88]	; 0x58
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    bdd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bdda:	005a      	lsls	r2, r3, #1
    bddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bdde:	4413      	add	r3, r2
    bde0:	009b      	lsls	r3, r3, #2
    bde2:	687a      	ldr	r2, [r7, #4]
    bde4:	4413      	add	r3, r2
    bde6:	681b      	ldr	r3, [r3, #0]
    bde8:	657b      	str	r3, [r7, #84]	; 0x54
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    bdea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bdec:	005a      	lsls	r2, r3, #1
    bdee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bdf0:	4413      	add	r3, r2
    bdf2:	3301      	adds	r3, #1
    bdf4:	009b      	lsls	r3, r3, #2
    bdf6:	687a      	ldr	r2, [r7, #4]
    bdf8:	4413      	add	r3, r2
    bdfa:	681b      	ldr	r3, [r3, #0]
    bdfc:	653b      	str	r3, [r7, #80]	; 0x50
    // TODO: optimize one day to avoid constructing new arg array? Will be hard.

    // The new args array
    mp_obj_t *args2;
    uint args2_alloc;
    uint args2_len = 0;
    bdfe:	2300      	movs	r3, #0
    be00:	67bb      	str	r3, [r7, #120]	; 0x78

    // Try to get a hint for the size of the kw_dict
    uint kw_dict_len = 0;
    be02:	2300      	movs	r3, #0
    be04:	677b      	str	r3, [r7, #116]	; 0x74
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    be06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    be08:	2b00      	cmp	r3, #0
    be0a:	d00e      	beq.n	be2a <mp_call_prepare_args_n_kw_var+0x92>
    be0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    be0e:	f7ff fa53 	bl	b2b8 <MP_OBJ_IS_OBJ>
    be12:	4603      	mov	r3, r0
    be14:	2b00      	cmp	r3, #0
    be16:	d008      	beq.n	be2a <mp_call_prepare_args_n_kw_var+0x92>
    be18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    be1a:	681b      	ldr	r3, [r3, #0]
    be1c:	4ab0      	ldr	r2, [pc, #704]	; (c0e0 <mp_call_prepare_args_n_kw_var+0x348>)
    be1e:	4293      	cmp	r3, r2
    be20:	d103      	bne.n	be2a <mp_call_prepare_args_n_kw_var+0x92>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    be22:	6d38      	ldr	r0, [r7, #80]	; 0x50
    be24:	f003 f8f5 	bl	f012 <mp_obj_dict_len>
    be28:	6778      	str	r0, [r7, #116]	; 0x74
    }

    // Extract the pos_seq sequence to the new args array.
    // Note that it can be arbitrary iterator.
    if (pos_seq == MP_OBJ_NULL) {
    be2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    be2c:	2b00      	cmp	r3, #0
    be2e:	d12c      	bne.n	be8a <mp_call_prepare_args_n_kw_var+0xf2>
        // no sequence

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    be30:	6dba      	ldr	r2, [r7, #88]	; 0x58
    be32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    be34:	4413      	add	r3, r2
    be36:	005a      	lsls	r2, r3, #1
    be38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be3a:	4413      	add	r3, r2
    be3c:	3301      	adds	r3, #1
    be3e:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    be40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    be42:	009b      	lsls	r3, r3, #2
    be44:	4618      	mov	r0, r3
    be46:	f7ff faa1 	bl	b38c <mp_nonlocal_alloc>
    be4a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    be4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    be52:	2b00      	cmp	r3, #0
    be54:	d009      	beq.n	be6a <mp_call_prepare_args_n_kw_var+0xd2>
            args2[args2_len++] = self;
    be56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    be58:	1c5a      	adds	r2, r3, #1
    be5a:	67ba      	str	r2, [r7, #120]	; 0x78
    be5c:	009b      	lsls	r3, r3, #2
    be5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    be62:	4413      	add	r3, r2
    be64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    be68:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed pos args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    be6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    be6c:	009b      	lsls	r3, r3, #2
    be6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    be72:	18d0      	adds	r0, r2, r3
    be74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be76:	009b      	lsls	r3, r3, #2
    be78:	461a      	mov	r2, r3
    be7a:	6879      	ldr	r1, [r7, #4]
    be7c:	f010 fe2c 	bl	1cad8 <memcpy>
        args2_len += n_args;
    be80:	6fba      	ldr	r2, [r7, #120]	; 0x78
    be82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    be84:	4413      	add	r3, r2
    be86:	67bb      	str	r3, [r7, #120]	; 0x78
    be88:	e0b1      	b.n	bfee <mp_call_prepare_args_n_kw_var+0x256>

    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    be8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
    be8c:	f7ff fa14 	bl	b2b8 <MP_OBJ_IS_OBJ>
    be90:	4603      	mov	r3, r0
    be92:	2b00      	cmp	r3, #0
    be94:	d004      	beq.n	bea0 <mp_call_prepare_args_n_kw_var+0x108>
    be96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    be98:	681b      	ldr	r3, [r3, #0]
    be9a:	4a92      	ldr	r2, [pc, #584]	; (c0e4 <mp_call_prepare_args_n_kw_var+0x34c>)
    be9c:	4293      	cmp	r3, r2
    be9e:	d00a      	beq.n	beb6 <mp_call_prepare_args_n_kw_var+0x11e>
    bea0:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bea2:	f7ff fa09 	bl	b2b8 <MP_OBJ_IS_OBJ>
    bea6:	4603      	mov	r3, r0
    bea8:	2b00      	cmp	r3, #0
    beaa:	d04a      	beq.n	bf42 <mp_call_prepare_args_n_kw_var+0x1aa>
    beac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    beae:	681b      	ldr	r3, [r3, #0]
    beb0:	4a8d      	ldr	r2, [pc, #564]	; (c0e8 <mp_call_prepare_args_n_kw_var+0x350>)
    beb2:	4293      	cmp	r3, r2
    beb4:	d145      	bne.n	bf42 <mp_call_prepare_args_n_kw_var+0x1aa>
        // optimise the case of a tuple and list

        // get the items
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(pos_seq, &len, &items);
    beb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    beba:	f107 0334 	add.w	r3, r7, #52	; 0x34
    bebe:	4619      	mov	r1, r3
    bec0:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bec2:	f001 fe71 	bl	dba8 <mp_obj_get_array>

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    bec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    beca:	441a      	add	r2, r3
    becc:	6db9      	ldr	r1, [r7, #88]	; 0x58
    bece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bed0:	440b      	add	r3, r1
    bed2:	005b      	lsls	r3, r3, #1
    bed4:	4413      	add	r3, r2
    bed6:	3301      	adds	r3, #1
    bed8:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    beda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bedc:	009b      	lsls	r3, r3, #2
    bede:	4618      	mov	r0, r3
    bee0:	f7ff fa54 	bl	b38c <mp_nonlocal_alloc>
    bee4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    beec:	2b00      	cmp	r3, #0
    beee:	d009      	beq.n	bf04 <mp_call_prepare_args_n_kw_var+0x16c>
            args2[args2_len++] = self;
    bef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bef2:	1c5a      	adds	r2, r3, #1
    bef4:	67ba      	str	r2, [r7, #120]	; 0x78
    bef6:	009b      	lsls	r3, r3, #2
    bef8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    befc:	4413      	add	r3, r2
    befe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bf02:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed and variable position args
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    bf04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf06:	009b      	lsls	r3, r3, #2
    bf08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf0c:	18d0      	adds	r0, r2, r3
    bf0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf10:	009b      	lsls	r3, r3, #2
    bf12:	461a      	mov	r2, r3
    bf14:	6879      	ldr	r1, [r7, #4]
    bf16:	f010 fddf 	bl	1cad8 <memcpy>
    bf1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bf1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf1e:	4413      	add	r3, r2
    bf20:	009b      	lsls	r3, r3, #2
    bf22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf26:	18d0      	adds	r0, r2, r3
    bf28:	6b39      	ldr	r1, [r7, #48]	; 0x30
    bf2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bf2c:	009b      	lsls	r3, r3, #2
    bf2e:	461a      	mov	r2, r3
    bf30:	f010 fdd2 	bl	1cad8 <memcpy>
        args2_len += n_args + len;
    bf34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bf36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf38:	4413      	add	r3, r2
    bf3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bf3c:	4413      	add	r3, r2
    bf3e:	67bb      	str	r3, [r7, #120]	; 0x78
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    bf40:	e055      	b.n	bfee <mp_call_prepare_args_n_kw_var+0x256>

    } else {
        // generic iterator

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    bf42:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bf44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bf46:	4413      	add	r3, r2
    bf48:	005a      	lsls	r2, r3, #1
    bf4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf4c:	4413      	add	r3, r2
    bf4e:	3304      	adds	r3, #4
    bf50:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bf52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bf54:	009b      	lsls	r3, r3, #2
    bf56:	4618      	mov	r0, r3
    bf58:	f7ff fa18 	bl	b38c <mp_nonlocal_alloc>
    bf5c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bf60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bf64:	2b00      	cmp	r3, #0
    bf66:	d009      	beq.n	bf7c <mp_call_prepare_args_n_kw_var+0x1e4>
            args2[args2_len++] = self;
    bf68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf6a:	1c5a      	adds	r2, r3, #1
    bf6c:	67ba      	str	r2, [r7, #120]	; 0x78
    bf6e:	009b      	lsls	r3, r3, #2
    bf70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf74:	4413      	add	r3, r2
    bf76:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bf7a:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed position args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    bf7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bf7e:	009b      	lsls	r3, r3, #2
    bf80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bf84:	18d0      	adds	r0, r2, r3
    bf86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf88:	009b      	lsls	r3, r3, #2
    bf8a:	461a      	mov	r2, r3
    bf8c:	6879      	ldr	r1, [r7, #4]
    bf8e:	f010 fda3 	bl	1cad8 <memcpy>
        args2_len += n_args;
    bf92:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bf94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf96:	4413      	add	r3, r2
    bf98:	67bb      	str	r3, [r7, #120]	; 0x78

        // extract the variable position args from the iterator
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    bf9a:	f107 0320 	add.w	r3, r7, #32
    bf9e:	4619      	mov	r1, r3
    bfa0:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bfa2:	f000 fc27 	bl	c7f4 <mp_getiter>
    bfa6:	64f8      	str	r0, [r7, #76]	; 0x4c
        mp_obj_t item;
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    bfa8:	e01a      	b.n	bfe0 <mp_call_prepare_args_n_kw_var+0x248>
            if (args2_len >= args2_alloc) {
    bfaa:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bfac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfae:	429a      	cmp	r2, r3
    bfb0:	d30d      	bcc.n	bfce <mp_call_prepare_args_n_kw_var+0x236>
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), args2_alloc * 2 * sizeof(mp_obj_t));
    bfb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfb4:	0099      	lsls	r1, r3, #2
    bfb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfb8:	00db      	lsls	r3, r3, #3
    bfba:	461a      	mov	r2, r3
    bfbc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    bfc0:	f7ff f9f0 	bl	b3a4 <mp_nonlocal_realloc>
    bfc4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc *= 2;
    bfc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bfca:	005b      	lsls	r3, r3, #1
    bfcc:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            args2[args2_len++] = item;
    bfce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bfd0:	1c5a      	adds	r2, r3, #1
    bfd2:	67ba      	str	r2, [r7, #120]	; 0x78
    bfd4:	009b      	lsls	r3, r3, #2
    bfd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfda:	4413      	add	r3, r2
    bfdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bfde:	601a      	str	r2, [r3, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    bfe0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    bfe2:	f000 fc89 	bl	c8f8 <mp_iternext>
    bfe6:	64b8      	str	r0, [r7, #72]	; 0x48
    bfe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bfea:	2b04      	cmp	r3, #4
    bfec:	d1dd      	bne.n	bfaa <mp_call_prepare_args_n_kw_var+0x212>
        }
    }

    // The size of the args2 array now is the number of positional args.
    uint pos_args_len = args2_len;
    bfee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bff0:	647b      	str	r3, [r7, #68]	; 0x44

    // Copy the fixed kw args.
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    bff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bff4:	009b      	lsls	r3, r3, #2
    bff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bffa:	18d0      	adds	r0, r2, r3
    bffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bffe:	009b      	lsls	r3, r3, #2
    c000:	687a      	ldr	r2, [r7, #4]
    c002:	18d1      	adds	r1, r2, r3
    c004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c006:	00db      	lsls	r3, r3, #3
    c008:	461a      	mov	r2, r3
    c00a:	f010 fd65 	bl	1cad8 <memcpy>
    args2_len += 2 * n_kw;
    c00e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c010:	005b      	lsls	r3, r3, #1
    c012:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c014:	4413      	add	r3, r2
    c016:	67bb      	str	r3, [r7, #120]	; 0x78

    // Extract (key,value) pairs from kw_dict dictionary and append to args2.
    // Note that it can be arbitrary iterator.
    if (kw_dict == MP_OBJ_NULL) {
    c018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c01a:	2b00      	cmp	r3, #0
    c01c:	f000 80d3 	beq.w	c1c6 <mp_call_prepare_args_n_kw_var+0x42e>
        // pass
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c020:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c022:	f7ff f949 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c026:	4603      	mov	r3, r0
    c028:	2b00      	cmp	r3, #0
    c02a:	d065      	beq.n	c0f8 <mp_call_prepare_args_n_kw_var+0x360>
    c02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c02e:	681b      	ldr	r3, [r3, #0]
    c030:	4a2b      	ldr	r2, [pc, #172]	; (c0e0 <mp_call_prepare_args_n_kw_var+0x348>)
    c032:	4293      	cmp	r3, r2
    c034:	d160      	bne.n	c0f8 <mp_call_prepare_args_n_kw_var+0x360>
        // dictionary
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    c036:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c038:	f7ff f986 	bl	b348 <mp_obj_dict_get_map>
    c03c:	6438      	str	r0, [r7, #64]	; 0x40
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    c03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c040:	681b      	ldr	r3, [r3, #0]
    c042:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c046:	005b      	lsls	r3, r3, #1
    c048:	461a      	mov	r2, r3
    c04a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c04c:	441a      	add	r2, r3
    c04e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c050:	429a      	cmp	r2, r3
    c052:	d906      	bls.n	c062 <mp_call_prepare_args_n_kw_var+0x2ca>
    c054:	4b25      	ldr	r3, [pc, #148]	; (c0ec <mp_call_prepare_args_n_kw_var+0x354>)
    c056:	4a26      	ldr	r2, [pc, #152]	; (c0f0 <mp_call_prepare_args_n_kw_var+0x358>)
    c058:	f240 21f7 	movw	r1, #759	; 0x2f7
    c05c:	4825      	ldr	r0, [pc, #148]	; (c0f4 <mp_call_prepare_args_n_kw_var+0x35c>)
    c05e:	f00f fa0f 	bl	1b480 <__assert_func>
        for (size_t i = 0; i < map->alloc; i++) {
    c062:	2300      	movs	r3, #0
    c064:	673b      	str	r3, [r7, #112]	; 0x70
    c066:	e034      	b.n	c0d2 <mp_call_prepare_args_n_kw_var+0x33a>
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c068:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c06a:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c06c:	f7ff f936 	bl	b2dc <MP_MAP_SLOT_IS_FILLED>
    c070:	4603      	mov	r3, r0
    c072:	2b00      	cmp	r3, #0
    c074:	d02a      	beq.n	c0cc <mp_call_prepare_args_n_kw_var+0x334>
                // the key must be a qstr, so intern it if it's a string
                mp_obj_t key = map->table[i].key;
    c076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c078:	689a      	ldr	r2, [r3, #8]
    c07a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c07c:	00db      	lsls	r3, r3, #3
    c07e:	4413      	add	r3, r2
    c080:	681b      	ldr	r3, [r3, #0]
    c082:	66fb      	str	r3, [r7, #108]	; 0x6c
                if (!MP_OBJ_IS_QSTR(key)) {
    c084:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c086:	f7ff f905 	bl	b294 <MP_OBJ_IS_QSTR>
    c08a:	4603      	mov	r3, r0
    c08c:	f083 0301 	eor.w	r3, r3, #1
    c090:	b2db      	uxtb	r3, r3
    c092:	2b00      	cmp	r3, #0
    c094:	d003      	beq.n	c09e <mp_call_prepare_args_n_kw_var+0x306>
                    key = mp_obj_str_intern_checked(key);
    c096:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c098:	f009 f8e8 	bl	1526c <mp_obj_str_intern_checked>
    c09c:	66f8      	str	r0, [r7, #108]	; 0x6c
                }
                args2[args2_len++] = key;
    c09e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0a0:	1c5a      	adds	r2, r3, #1
    c0a2:	67ba      	str	r2, [r7, #120]	; 0x78
    c0a4:	009b      	lsls	r3, r3, #2
    c0a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0aa:	4413      	add	r3, r2
    c0ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    c0ae:	601a      	str	r2, [r3, #0]
                args2[args2_len++] = map->table[i].value;
    c0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0b2:	1c5a      	adds	r2, r3, #1
    c0b4:	67ba      	str	r2, [r7, #120]	; 0x78
    c0b6:	009b      	lsls	r3, r3, #2
    c0b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0bc:	4413      	add	r3, r2
    c0be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c0c0:	6891      	ldr	r1, [r2, #8]
    c0c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c0c4:	00d2      	lsls	r2, r2, #3
    c0c6:	440a      	add	r2, r1
    c0c8:	6852      	ldr	r2, [r2, #4]
    c0ca:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < map->alloc; i++) {
    c0cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c0ce:	3301      	adds	r3, #1
    c0d0:	673b      	str	r3, [r7, #112]	; 0x70
    c0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c0d4:	685a      	ldr	r2, [r3, #4]
    c0d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c0d8:	429a      	cmp	r2, r3
    c0da:	d8c5      	bhi.n	c068 <mp_call_prepare_args_n_kw_var+0x2d0>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c0dc:	e073      	b.n	c1c6 <mp_call_prepare_args_n_kw_var+0x42e>
    c0de:	bf00      	nop
    c0e0:	00021d40 	.word	0x00021d40
    c0e4:	00023a20 	.word	0x00023a20
    c0e8:	00022e28 	.word	0x00022e28
    c0ec:	00021380 	.word	0x00021380
    c0f0:	0002154c 	.word	0x0002154c
    c0f4:	000212d0 	.word	0x000212d0
        // - call keys() to get an iterable of all keys in the mapping
        // - call __getitem__ for each key to get the corresponding value

        // get the keys iterable
        mp_obj_t dest[3];
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    c0f8:	f107 0314 	add.w	r3, r7, #20
    c0fc:	461a      	mov	r2, r3
    c0fe:	f44f 7197 	mov.w	r1, #302	; 0x12e
    c102:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c104:	f000 fafe 	bl	c704 <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    c108:	f107 0314 	add.w	r3, r7, #20
    c10c:	461a      	mov	r2, r3
    c10e:	2100      	movs	r1, #0
    c110:	2000      	movs	r0, #0
    c112:	f7ff fe1d 	bl	bd50 <mp_call_method_n_kw>
    c116:	4603      	mov	r3, r0
    c118:	2100      	movs	r1, #0
    c11a:	4618      	mov	r0, r3
    c11c:	f000 fb6a 	bl	c7f4 <mp_getiter>
    c120:	63f8      	str	r0, [r7, #60]	; 0x3c

        mp_obj_t key;
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c122:	e049      	b.n	c1b8 <mp_call_prepare_args_n_kw_var+0x420>
            // expand size of args array if needed
            if (args2_len + 1 >= args2_alloc) {
    c124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c126:	1c5a      	adds	r2, r3, #1
    c128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c12a:	429a      	cmp	r2, r3
    c12c:	d314      	bcc.n	c158 <mp_call_prepare_args_n_kw_var+0x3c0>
                uint new_alloc = args2_alloc * 2;
    c12e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c130:	005b      	lsls	r3, r3, #1
    c132:	667b      	str	r3, [r7, #100]	; 0x64
                if (new_alloc < 4) {
    c134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c136:	2b03      	cmp	r3, #3
    c138:	d801      	bhi.n	c13e <mp_call_prepare_args_n_kw_var+0x3a6>
                    new_alloc = 4;
    c13a:	2304      	movs	r3, #4
    c13c:	667b      	str	r3, [r7, #100]	; 0x64
                }
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), new_alloc * sizeof(mp_obj_t));
    c13e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c140:	0099      	lsls	r1, r3, #2
    c142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c144:	009b      	lsls	r3, r3, #2
    c146:	461a      	mov	r2, r3
    c148:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c14c:	f7ff f92a 	bl	b3a4 <mp_nonlocal_realloc>
    c150:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc = new_alloc;
    c154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c156:	67fb      	str	r3, [r7, #124]	; 0x7c
            }

            // the key must be a qstr, so intern it if it's a string
            if (!MP_OBJ_IS_QSTR(key)) {
    c158:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c15a:	f7ff f89b 	bl	b294 <MP_OBJ_IS_QSTR>
    c15e:	4603      	mov	r3, r0
    c160:	f083 0301 	eor.w	r3, r3, #1
    c164:	b2db      	uxtb	r3, r3
    c166:	2b00      	cmp	r3, #0
    c168:	d003      	beq.n	c172 <mp_call_prepare_args_n_kw_var+0x3da>
                key = mp_obj_str_intern_checked(key);
    c16a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c16c:	f009 f87e 	bl	1526c <mp_obj_str_intern_checked>
    c170:	66b8      	str	r0, [r7, #104]	; 0x68
            }

            // get the value corresponding to the key
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    c172:	f107 0314 	add.w	r3, r7, #20
    c176:	461a      	mov	r2, r3
    c178:	210e      	movs	r1, #14
    c17a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c17c:	f000 fac2 	bl	c704 <mp_load_method>
            dest[2] = key;
    c180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c182:	61fb      	str	r3, [r7, #28]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    c184:	f107 0314 	add.w	r3, r7, #20
    c188:	461a      	mov	r2, r3
    c18a:	2100      	movs	r1, #0
    c18c:	2001      	movs	r0, #1
    c18e:	f7ff fddf 	bl	bd50 <mp_call_method_n_kw>
    c192:	63b8      	str	r0, [r7, #56]	; 0x38

            // store the key/value pair in the argument array
            args2[args2_len++] = key;
    c194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c196:	1c5a      	adds	r2, r3, #1
    c198:	67ba      	str	r2, [r7, #120]	; 0x78
    c19a:	009b      	lsls	r3, r3, #2
    c19c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1a0:	4413      	add	r3, r2
    c1a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c1a4:	601a      	str	r2, [r3, #0]
            args2[args2_len++] = value;
    c1a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1a8:	1c5a      	adds	r2, r3, #1
    c1aa:	67ba      	str	r2, [r7, #120]	; 0x78
    c1ac:	009b      	lsls	r3, r3, #2
    c1ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1b2:	4413      	add	r3, r2
    c1b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c1b6:	601a      	str	r2, [r3, #0]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c1b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c1ba:	f000 fb9d 	bl	c8f8 <mp_iternext>
    c1be:	66b8      	str	r0, [r7, #104]	; 0x68
    c1c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c1c2:	2b04      	cmp	r3, #4
    c1c4:	d1ae      	bne.n	c124 <mp_call_prepare_args_n_kw_var+0x38c>
        }
    }

    out_args->fun = fun;
    c1c6:	683b      	ldr	r3, [r7, #0]
    c1c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c1ca:	601a      	str	r2, [r3, #0]
    out_args->args = args2;
    c1cc:	683b      	ldr	r3, [r7, #0]
    c1ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1d2:	611a      	str	r2, [r3, #16]
    out_args->n_args = pos_args_len;
    c1d4:	683b      	ldr	r3, [r7, #0]
    c1d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c1d8:	605a      	str	r2, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    c1da:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c1de:	1ad3      	subs	r3, r2, r3
    c1e0:	085a      	lsrs	r2, r3, #1
    c1e2:	683b      	ldr	r3, [r7, #0]
    c1e4:	609a      	str	r2, [r3, #8]
    out_args->n_alloc = args2_alloc;
    c1e6:	683b      	ldr	r3, [r7, #0]
    c1e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    c1ea:	60da      	str	r2, [r3, #12]
}
    c1ec:	bf00      	nop
    c1ee:	3788      	adds	r7, #136	; 0x88
    c1f0:	46bd      	mov	sp, r7
    c1f2:	bd80      	pop	{r7, pc}

0000c1f4 <mp_call_method_n_kw_var>:

mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    c1f4:	b580      	push	{r7, lr}
    c1f6:	b08a      	sub	sp, #40	; 0x28
    c1f8:	af00      	add	r7, sp, #0
    c1fa:	4603      	mov	r3, r0
    c1fc:	60b9      	str	r1, [r7, #8]
    c1fe:	607a      	str	r2, [r7, #4]
    c200:	73fb      	strb	r3, [r7, #15]
    mp_call_args_t out_args;
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    c202:	f107 0310 	add.w	r3, r7, #16
    c206:	7bf8      	ldrb	r0, [r7, #15]
    c208:	687a      	ldr	r2, [r7, #4]
    c20a:	68b9      	ldr	r1, [r7, #8]
    c20c:	f7ff fdc4 	bl	bd98 <mp_call_prepare_args_n_kw_var>

    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    c210:	6938      	ldr	r0, [r7, #16]
    c212:	6979      	ldr	r1, [r7, #20]
    c214:	69ba      	ldr	r2, [r7, #24]
    c216:	6a3b      	ldr	r3, [r7, #32]
    c218:	f7ff fd79 	bl	bd0e <mp_call_function_n_kw>
    c21c:	6278      	str	r0, [r7, #36]	; 0x24
    mp_nonlocal_free(out_args.args, out_args.n_alloc * sizeof(mp_obj_t));
    c21e:	6a3a      	ldr	r2, [r7, #32]
    c220:	69fb      	ldr	r3, [r7, #28]
    c222:	009b      	lsls	r3, r3, #2
    c224:	4619      	mov	r1, r3
    c226:	4610      	mov	r0, r2
    c228:	f7ff f8cb 	bl	b3c2 <mp_nonlocal_free>

    return res;
    c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c22e:	4618      	mov	r0, r3
    c230:	3728      	adds	r7, #40	; 0x28
    c232:	46bd      	mov	sp, r7
    c234:	bd80      	pop	{r7, pc}

0000c236 <mp_unpack_sequence>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    c236:	b580      	push	{r7, lr}
    c238:	b08e      	sub	sp, #56	; 0x38
    c23a:	af00      	add	r7, sp, #0
    c23c:	60f8      	str	r0, [r7, #12]
    c23e:	60b9      	str	r1, [r7, #8]
    c240:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c242:	68f8      	ldr	r0, [r7, #12]
    c244:	f7ff f838 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c248:	4603      	mov	r3, r0
    c24a:	2b00      	cmp	r3, #0
    c24c:	d004      	beq.n	c258 <mp_unpack_sequence+0x22>
    c24e:	68fb      	ldr	r3, [r7, #12]
    c250:	681b      	ldr	r3, [r3, #0]
    c252:	4a38      	ldr	r2, [pc, #224]	; (c334 <mp_unpack_sequence+0xfe>)
    c254:	4293      	cmp	r3, r2
    c256:	d00a      	beq.n	c26e <mp_unpack_sequence+0x38>
    c258:	68f8      	ldr	r0, [r7, #12]
    c25a:	f7ff f82d 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c25e:	4603      	mov	r3, r0
    c260:	2b00      	cmp	r3, #0
    c262:	d02e      	beq.n	c2c2 <mp_unpack_sequence+0x8c>
    c264:	68fb      	ldr	r3, [r7, #12]
    c266:	681b      	ldr	r3, [r3, #0]
    c268:	4a33      	ldr	r2, [pc, #204]	; (c338 <mp_unpack_sequence+0x102>)
    c26a:	4293      	cmp	r3, r2
    c26c:	d129      	bne.n	c2c2 <mp_unpack_sequence+0x8c>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c26e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c272:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c276:	4619      	mov	r1, r3
    c278:	68f8      	ldr	r0, [r7, #12]
    c27a:	f001 fc95 	bl	dba8 <mp_obj_get_array>
        if (seq_len < num) {
    c27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c280:	68bb      	ldr	r3, [r7, #8]
    c282:	429a      	cmp	r2, r3
    c284:	d348      	bcc.n	c318 <mp_unpack_sequence+0xe2>
            goto too_short;
        } else if (seq_len > num) {
    c286:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c288:	68bb      	ldr	r3, [r7, #8]
    c28a:	429a      	cmp	r2, r3
    c28c:	d84a      	bhi.n	c324 <mp_unpack_sequence+0xee>
            goto too_long;
        }
        for (size_t i = 0; i < num; i++) {
    c28e:	2300      	movs	r3, #0
    c290:	637b      	str	r3, [r7, #52]	; 0x34
    c292:	e011      	b.n	c2b8 <mp_unpack_sequence+0x82>
            items[i] = seq_items[num - 1 - i];
    c294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c296:	009b      	lsls	r3, r3, #2
    c298:	687a      	ldr	r2, [r7, #4]
    c29a:	441a      	add	r2, r3
    c29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c29e:	68b8      	ldr	r0, [r7, #8]
    c2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c2a2:	1ac3      	subs	r3, r0, r3
    c2a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c2a8:	3b01      	subs	r3, #1
    c2aa:	009b      	lsls	r3, r3, #2
    c2ac:	440b      	add	r3, r1
    c2ae:	681b      	ldr	r3, [r3, #0]
    c2b0:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num; i++) {
    c2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c2b4:	3301      	adds	r3, #1
    c2b6:	637b      	str	r3, [r7, #52]	; 0x34
    c2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c2ba:	68bb      	ldr	r3, [r7, #8]
    c2bc:	429a      	cmp	r2, r3
    c2be:	d3e9      	bcc.n	c294 <mp_unpack_sequence+0x5e>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c2c0:	e029      	b.n	c316 <mp_unpack_sequence+0xe0>
        }
    } else {
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    c2c2:	f107 0314 	add.w	r3, r7, #20
    c2c6:	4619      	mov	r1, r3
    c2c8:	68f8      	ldr	r0, [r7, #12]
    c2ca:	f000 fa93 	bl	c7f4 <mp_getiter>
    c2ce:	6338      	str	r0, [r7, #48]	; 0x30

        for (seq_len = 0; seq_len < num; seq_len++) {
    c2d0:	2300      	movs	r3, #0
    c2d2:	62bb      	str	r3, [r7, #40]	; 0x28
    c2d4:	e014      	b.n	c300 <mp_unpack_sequence+0xca>
            mp_obj_t el = mp_iternext(iterable);
    c2d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c2d8:	f000 fb0e 	bl	c8f8 <mp_iternext>
    c2dc:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (el == MP_OBJ_STOP_ITERATION) {
    c2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2e0:	2b04      	cmp	r3, #4
    c2e2:	d01b      	beq.n	c31c <mp_unpack_sequence+0xe6>
                goto too_short;
            }
            items[num - 1 - seq_len] = el;
    c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2e6:	68ba      	ldr	r2, [r7, #8]
    c2e8:	1ad3      	subs	r3, r2, r3
    c2ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c2ee:	3b01      	subs	r3, #1
    c2f0:	009b      	lsls	r3, r3, #2
    c2f2:	687a      	ldr	r2, [r7, #4]
    c2f4:	4413      	add	r3, r2
    c2f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c2f8:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num; seq_len++) {
    c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2fc:	3301      	adds	r3, #1
    c2fe:	62bb      	str	r3, [r7, #40]	; 0x28
    c300:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c302:	68bb      	ldr	r3, [r7, #8]
    c304:	429a      	cmp	r2, r3
    c306:	d3e6      	bcc.n	c2d6 <mp_unpack_sequence+0xa0>
        }
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    c308:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c30a:	f000 faf5 	bl	c8f8 <mp_iternext>
    c30e:	4603      	mov	r3, r0
    c310:	2b04      	cmp	r3, #4
    c312:	d00b      	beq.n	c32c <mp_unpack_sequence+0xf6>
            goto too_long;
    c314:	e007      	b.n	c326 <mp_unpack_sequence+0xf0>
        }
    }
    return;
    c316:	e009      	b.n	c32c <mp_unpack_sequence+0xf6>
            goto too_short;
    c318:	bf00      	nop
    c31a:	e000      	b.n	c31e <mp_unpack_sequence+0xe8>
                goto too_short;
    c31c:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c31e:	4807      	ldr	r0, [pc, #28]	; (c33c <mp_unpack_sequence+0x106>)
    c320:	f000 fd97 	bl	ce52 <mp_raise_ValueError>
            goto too_long;
    c324:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
too_long:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c326:	4805      	ldr	r0, [pc, #20]	; (c33c <mp_unpack_sequence+0x106>)
    c328:	f000 fd93 	bl	ce52 <mp_raise_ValueError>
    return;
    c32c:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "too many values to unpack (expected %d)", (int)num));
    }
}
    c32e:	3738      	adds	r7, #56	; 0x38
    c330:	46bd      	mov	sp, r7
    c332:	bd80      	pop	{r7, pc}
    c334:	00023a20 	.word	0x00023a20
    c338:	00022e28 	.word	0x00022e28
    c33c:	000213ac 	.word	0x000213ac

0000c340 <mp_unpack_ex>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    c340:	b590      	push	{r4, r7, lr}
    c342:	b08f      	sub	sp, #60	; 0x3c
    c344:	af00      	add	r7, sp, #0
    c346:	60f8      	str	r0, [r7, #12]
    c348:	60b9      	str	r1, [r7, #8]
    c34a:	607a      	str	r2, [r7, #4]
    size_t num_left = num_in & 0xff;
    c34c:	68bb      	ldr	r3, [r7, #8]
    c34e:	b2db      	uxtb	r3, r3
    c350:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t num_right = (num_in >> 8) & 0xff;
    c352:	68bb      	ldr	r3, [r7, #8]
    c354:	0a1b      	lsrs	r3, r3, #8
    c356:	b2db      	uxtb	r3, r3
    c358:	627b      	str	r3, [r7, #36]	; 0x24
    DEBUG_OP_printf("unpack ex " UINT_FMT " " UINT_FMT "\n", num_left, num_right);
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c35a:	68f8      	ldr	r0, [r7, #12]
    c35c:	f7fe ffac 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c360:	4603      	mov	r3, r0
    c362:	2b00      	cmp	r3, #0
    c364:	d004      	beq.n	c370 <mp_unpack_ex+0x30>
    c366:	68fb      	ldr	r3, [r7, #12]
    c368:	681b      	ldr	r3, [r3, #0]
    c36a:	4a6a      	ldr	r2, [pc, #424]	; (c514 <mp_unpack_ex+0x1d4>)
    c36c:	4293      	cmp	r3, r2
    c36e:	d00a      	beq.n	c386 <mp_unpack_ex+0x46>
    c370:	68f8      	ldr	r0, [r7, #12]
    c372:	f7fe ffa1 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c376:	4603      	mov	r3, r0
    c378:	2b00      	cmp	r3, #0
    c37a:	d05b      	beq.n	c434 <mp_unpack_ex+0xf4>
    c37c:	68fb      	ldr	r3, [r7, #12]
    c37e:	681b      	ldr	r3, [r3, #0]
    c380:	4a65      	ldr	r2, [pc, #404]	; (c518 <mp_unpack_ex+0x1d8>)
    c382:	4293      	cmp	r3, r2
    c384:	d156      	bne.n	c434 <mp_unpack_ex+0xf4>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c386:	f107 0210 	add.w	r2, r7, #16
    c38a:	f107 0314 	add.w	r3, r7, #20
    c38e:	4619      	mov	r1, r3
    c390:	68f8      	ldr	r0, [r7, #12]
    c392:	f001 fc09 	bl	dba8 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    c396:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c39a:	441a      	add	r2, r3
    c39c:	697b      	ldr	r3, [r7, #20]
    c39e:	429a      	cmp	r2, r3
    c3a0:	f200 80ad 	bhi.w	c4fe <mp_unpack_ex+0x1be>
            goto too_short;
        }
        for (size_t i = 0; i < num_right; i++) {
    c3a4:	2300      	movs	r3, #0
    c3a6:	637b      	str	r3, [r7, #52]	; 0x34
    c3a8:	e011      	b.n	c3ce <mp_unpack_ex+0x8e>
            items[i] = seq_items[seq_len - 1 - i];
    c3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3ac:	009b      	lsls	r3, r3, #2
    c3ae:	687a      	ldr	r2, [r7, #4]
    c3b0:	441a      	add	r2, r3
    c3b2:	6939      	ldr	r1, [r7, #16]
    c3b4:	6978      	ldr	r0, [r7, #20]
    c3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3b8:	1ac3      	subs	r3, r0, r3
    c3ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c3be:	3b01      	subs	r3, #1
    c3c0:	009b      	lsls	r3, r3, #2
    c3c2:	440b      	add	r3, r1
    c3c4:	681b      	ldr	r3, [r3, #0]
    c3c6:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_right; i++) {
    c3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3ca:	3301      	adds	r3, #1
    c3cc:	637b      	str	r3, [r7, #52]	; 0x34
    c3ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3d2:	429a      	cmp	r2, r3
    c3d4:	d3e9      	bcc.n	c3aa <mp_unpack_ex+0x6a>
        }
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    c3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3d8:	009b      	lsls	r3, r3, #2
    c3da:	687a      	ldr	r2, [r7, #4]
    c3dc:	18d4      	adds	r4, r2, r3
    c3de:	697a      	ldr	r2, [r7, #20]
    c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3e2:	1ad2      	subs	r2, r2, r3
    c3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c3e6:	1ad0      	subs	r0, r2, r3
    c3e8:	693a      	ldr	r2, [r7, #16]
    c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3ec:	009b      	lsls	r3, r3, #2
    c3ee:	4413      	add	r3, r2
    c3f0:	4619      	mov	r1, r3
    c3f2:	f005 f956 	bl	116a2 <mp_obj_new_list>
    c3f6:	4603      	mov	r3, r0
    c3f8:	6023      	str	r3, [r4, #0]
        for (size_t i = 0; i < num_left; i++) {
    c3fa:	2300      	movs	r3, #0
    c3fc:	633b      	str	r3, [r7, #48]	; 0x30
    c3fe:	e014      	b.n	c42a <mp_unpack_ex+0xea>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    c400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c404:	4413      	add	r3, r2
    c406:	3301      	adds	r3, #1
    c408:	009b      	lsls	r3, r3, #2
    c40a:	687a      	ldr	r2, [r7, #4]
    c40c:	441a      	add	r2, r3
    c40e:	6939      	ldr	r1, [r7, #16]
    c410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c414:	1ac3      	subs	r3, r0, r3
    c416:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c41a:	3b01      	subs	r3, #1
    c41c:	009b      	lsls	r3, r3, #2
    c41e:	440b      	add	r3, r1
    c420:	681b      	ldr	r3, [r3, #0]
    c422:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_left; i++) {
    c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c426:	3301      	adds	r3, #1
    c428:	633b      	str	r3, [r7, #48]	; 0x30
    c42a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c42e:	429a      	cmp	r2, r3
    c430:	d3e6      	bcc.n	c400 <mp_unpack_ex+0xc0>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c432:	e063      	b.n	c4fc <mp_unpack_ex+0x1bc>
    } else {
        // Generic iterable; this gets a bit messy: we unpack known left length to the
        // items destination array, then the rest to a dynamically created list.  Once the
        // iterable is exhausted, we take from this list for the right part of the items.
        // TODO Improve to waste less memory in the dynamically created list.
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    c434:	2100      	movs	r1, #0
    c436:	68f8      	ldr	r0, [r7, #12]
    c438:	f000 f9dc 	bl	c7f4 <mp_getiter>
    c43c:	6238      	str	r0, [r7, #32]
        mp_obj_t item;
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c43e:	2300      	movs	r3, #0
    c440:	617b      	str	r3, [r7, #20]
    c442:	e013      	b.n	c46c <mp_unpack_ex+0x12c>
            item = mp_iternext(iterable);
    c444:	6a38      	ldr	r0, [r7, #32]
    c446:	f000 fa57 	bl	c8f8 <mp_iternext>
    c44a:	61f8      	str	r0, [r7, #28]
            if (item == MP_OBJ_STOP_ITERATION) {
    c44c:	69fb      	ldr	r3, [r7, #28]
    c44e:	2b04      	cmp	r3, #4
    c450:	d057      	beq.n	c502 <mp_unpack_ex+0x1c2>
                goto too_short;
            }
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    c452:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c456:	441a      	add	r2, r3
    c458:	697b      	ldr	r3, [r7, #20]
    c45a:	1ad3      	subs	r3, r2, r3
    c45c:	009b      	lsls	r3, r3, #2
    c45e:	687a      	ldr	r2, [r7, #4]
    c460:	4413      	add	r3, r2
    c462:	69fa      	ldr	r2, [r7, #28]
    c464:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c466:	697b      	ldr	r3, [r7, #20]
    c468:	3301      	adds	r3, #1
    c46a:	617b      	str	r3, [r7, #20]
    c46c:	697a      	ldr	r2, [r7, #20]
    c46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c470:	429a      	cmp	r2, r3
    c472:	d3e7      	bcc.n	c444 <mp_unpack_ex+0x104>
        }
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    c474:	2100      	movs	r1, #0
    c476:	2000      	movs	r0, #0
    c478:	f005 f913 	bl	116a2 <mp_obj_new_list>
    c47c:	61b8      	str	r0, [r7, #24]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c47e:	e003      	b.n	c488 <mp_unpack_ex+0x148>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    c480:	69f9      	ldr	r1, [r7, #28]
    c482:	69b8      	ldr	r0, [r7, #24]
    c484:	f004 fca1 	bl	10dca <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c488:	6a38      	ldr	r0, [r7, #32]
    c48a:	f000 fa35 	bl	c8f8 <mp_iternext>
    c48e:	61f8      	str	r0, [r7, #28]
    c490:	69fb      	ldr	r3, [r7, #28]
    c492:	2b04      	cmp	r3, #4
    c494:	d1f4      	bne.n	c480 <mp_unpack_ex+0x140>
        }
        if (rest->len < num_right) {
    c496:	69bb      	ldr	r3, [r7, #24]
    c498:	689a      	ldr	r2, [r3, #8]
    c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c49c:	429a      	cmp	r2, r3
    c49e:	d332      	bcc.n	c506 <mp_unpack_ex+0x1c6>
            goto too_short;
        }
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4a2:	009b      	lsls	r3, r3, #2
    c4a4:	687a      	ldr	r2, [r7, #4]
    c4a6:	4413      	add	r3, r2
    c4a8:	69ba      	ldr	r2, [r7, #24]
    c4aa:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c4ac:	2300      	movs	r3, #0
    c4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    c4b0:	e017      	b.n	c4e2 <mp_unpack_ex+0x1a2>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    c4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4b6:	1ad3      	subs	r3, r2, r3
    c4b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c4bc:	3b01      	subs	r3, #1
    c4be:	009b      	lsls	r3, r3, #2
    c4c0:	687a      	ldr	r2, [r7, #4]
    c4c2:	4413      	add	r3, r2
    c4c4:	69ba      	ldr	r2, [r7, #24]
    c4c6:	68d1      	ldr	r1, [r2, #12]
    c4c8:	69ba      	ldr	r2, [r7, #24]
    c4ca:	6890      	ldr	r0, [r2, #8]
    c4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c4ce:	1a80      	subs	r0, r0, r2
    c4d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c4d2:	4402      	add	r2, r0
    c4d4:	0092      	lsls	r2, r2, #2
    c4d6:	440a      	add	r2, r1
    c4d8:	6812      	ldr	r2, [r2, #0]
    c4da:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4de:	3301      	adds	r3, #1
    c4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    c4e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4e6:	429a      	cmp	r2, r3
    c4e8:	d3e3      	bcc.n	c4b2 <mp_unpack_ex+0x172>
        }
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    c4ea:	69bb      	ldr	r3, [r7, #24]
    c4ec:	689a      	ldr	r2, [r3, #8]
    c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4f0:	1ad3      	subs	r3, r2, r3
    c4f2:	4619      	mov	r1, r3
    c4f4:	69b8      	ldr	r0, [r7, #24]
    c4f6:	f005 f910 	bl	1171a <mp_obj_list_set_len>
    }
    return;
    c4fa:	e008      	b.n	c50e <mp_unpack_ex+0x1ce>
    c4fc:	e007      	b.n	c50e <mp_unpack_ex+0x1ce>
            goto too_short;
    c4fe:	bf00      	nop
    c500:	e002      	b.n	c508 <mp_unpack_ex+0x1c8>
                goto too_short;
    c502:	bf00      	nop
    c504:	e000      	b.n	c508 <mp_unpack_ex+0x1c8>
            goto too_short;
    c506:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c508:	4804      	ldr	r0, [pc, #16]	; (c51c <mp_unpack_ex+0x1dc>)
    c50a:	f000 fca2 	bl	ce52 <mp_raise_ValueError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
}
    c50e:	373c      	adds	r7, #60	; 0x3c
    c510:	46bd      	mov	sp, r7
    c512:	bd90      	pop	{r4, r7, pc}
    c514:	00023a20 	.word	0x00023a20
    c518:	00022e28 	.word	0x00022e28
    c51c:	000213ac 	.word	0x000213ac

0000c520 <mp_load_attr>:

mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    c520:	b580      	push	{r7, lr}
    c522:	b084      	sub	sp, #16
    c524:	af00      	add	r7, sp, #0
    c526:	6078      	str	r0, [r7, #4]
    c528:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("load attr %p.%s\n", base, qstr_str(attr));
    // use load_method
    mp_obj_t dest[2];
    mp_load_method(base, attr, dest);
    c52a:	f107 0308 	add.w	r3, r7, #8
    c52e:	461a      	mov	r2, r3
    c530:	6839      	ldr	r1, [r7, #0]
    c532:	6878      	ldr	r0, [r7, #4]
    c534:	f000 f8e6 	bl	c704 <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    c538:	68fb      	ldr	r3, [r7, #12]
    c53a:	2b00      	cmp	r3, #0
    c53c:	d101      	bne.n	c542 <mp_load_attr+0x22>
        // load_method returned just a normal attribute
        return dest[0];
    c53e:	68bb      	ldr	r3, [r7, #8]
    c540:	e006      	b.n	c550 <mp_load_attr+0x30>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    c542:	68bb      	ldr	r3, [r7, #8]
    c544:	68fa      	ldr	r2, [r7, #12]
    c546:	4611      	mov	r1, r2
    c548:	4618      	mov	r0, r3
    c54a:	f001 fdf6 	bl	e13a <mp_obj_new_bound_meth>
    c54e:	4603      	mov	r3, r0
    }
}
    c550:	4618      	mov	r0, r3
    c552:	3710      	adds	r7, #16
    c554:	46bd      	mov	sp, r7
    c556:	bd80      	pop	{r7, pc}

0000c558 <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    c558:	b580      	push	{r7, lr}
    c55a:	b084      	sub	sp, #16
    c55c:	af00      	add	r7, sp, #0
    c55e:	60f8      	str	r0, [r7, #12]
    c560:	60b9      	str	r1, [r7, #8]
    c562:	607a      	str	r2, [r7, #4]
    c564:	603b      	str	r3, [r7, #0]
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    c566:	6878      	ldr	r0, [r7, #4]
    c568:	f7fe fea6 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c56c:	4603      	mov	r3, r0
    c56e:	2b00      	cmp	r3, #0
    c570:	d009      	beq.n	c586 <mp_convert_member_lookup+0x2e>
    c572:	687b      	ldr	r3, [r7, #4]
    c574:	681b      	ldr	r3, [r3, #0]
    c576:	4a2f      	ldr	r2, [pc, #188]	; (c634 <mp_convert_member_lookup+0xdc>)
    c578:	4293      	cmp	r3, r2
    c57a:	d104      	bne.n	c586 <mp_convert_member_lookup+0x2e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c57c:	687b      	ldr	r3, [r7, #4]
    c57e:	685a      	ldr	r2, [r3, #4]
    c580:	683b      	ldr	r3, [r7, #0]
    c582:	601a      	str	r2, [r3, #0]
    c584:	e052      	b.n	c62c <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    c586:	6878      	ldr	r0, [r7, #4]
    c588:	f7fe fe96 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c58c:	4603      	mov	r3, r0
    c58e:	2b00      	cmp	r3, #0
    c590:	d014      	beq.n	c5bc <mp_convert_member_lookup+0x64>
    c592:	687b      	ldr	r3, [r7, #4]
    c594:	681b      	ldr	r3, [r3, #0]
    c596:	4a28      	ldr	r2, [pc, #160]	; (c638 <mp_convert_member_lookup+0xe0>)
    c598:	4293      	cmp	r3, r2
    c59a:	d10f      	bne.n	c5bc <mp_convert_member_lookup+0x64>
        // return a bound method, with self being the type of this object
        // this type should be the type of the original instance, not the base
        // type (which is what is passed in the 'type' argument to this function)
        if (self != MP_OBJ_NULL) {
    c59c:	68fb      	ldr	r3, [r7, #12]
    c59e:	2b00      	cmp	r3, #0
    c5a0:	d003      	beq.n	c5aa <mp_convert_member_lookup+0x52>
            type = mp_obj_get_type(self);
    c5a2:	68f8      	ldr	r0, [r7, #12]
    c5a4:	f001 f884 	bl	d6b0 <mp_obj_get_type>
    c5a8:	60b8      	str	r0, [r7, #8]
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c5aa:	687b      	ldr	r3, [r7, #4]
    c5ac:	685a      	ldr	r2, [r3, #4]
    c5ae:	683b      	ldr	r3, [r7, #0]
    c5b0:	601a      	str	r2, [r3, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    c5b2:	683b      	ldr	r3, [r7, #0]
    c5b4:	3304      	adds	r3, #4
    c5b6:	68ba      	ldr	r2, [r7, #8]
    c5b8:	601a      	str	r2, [r3, #0]
    c5ba:	e037      	b.n	c62c <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    c5bc:	6878      	ldr	r0, [r7, #4]
    c5be:	f7fe fe7b 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c5c2:	4603      	mov	r3, r0
    c5c4:	2b00      	cmp	r3, #0
    c5c6:	d008      	beq.n	c5da <mp_convert_member_lookup+0x82>
    c5c8:	687b      	ldr	r3, [r7, #4]
    c5ca:	681b      	ldr	r3, [r3, #0]
    c5cc:	4a1b      	ldr	r2, [pc, #108]	; (c63c <mp_convert_member_lookup+0xe4>)
    c5ce:	4293      	cmp	r3, r2
    c5d0:	d103      	bne.n	c5da <mp_convert_member_lookup+0x82>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    c5d2:	683b      	ldr	r3, [r7, #0]
    c5d4:	687a      	ldr	r2, [r7, #4]
    c5d6:	601a      	str	r2, [r3, #0]
    c5d8:	e028      	b.n	c62c <mp_convert_member_lookup+0xd4>
    } else if (MP_OBJ_IS_FUN(member)
    c5da:	6878      	ldr	r0, [r7, #4]
    c5dc:	f7fe fe6c 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c5e0:	4603      	mov	r3, r0
    c5e2:	2b00      	cmp	r3, #0
    c5e4:	d006      	beq.n	c5f4 <mp_convert_member_lookup+0x9c>
    c5e6:	687b      	ldr	r3, [r7, #4]
    c5e8:	681b      	ldr	r3, [r3, #0]
    c5ea:	88db      	ldrh	r3, [r3, #6]
    c5ec:	f240 120f 	movw	r2, #271	; 0x10f
    c5f0:	4293      	cmp	r3, r2
    c5f2:	d010      	beq.n	c616 <mp_convert_member_lookup+0xbe>
        || (MP_OBJ_IS_OBJ(member)
    c5f4:	6878      	ldr	r0, [r7, #4]
    c5f6:	f7fe fe5f 	bl	b2b8 <MP_OBJ_IS_OBJ>
    c5fa:	4603      	mov	r3, r0
    c5fc:	2b00      	cmp	r3, #0
    c5fe:	d012      	beq.n	c626 <mp_convert_member_lookup+0xce>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    c600:	687b      	ldr	r3, [r7, #4]
    c602:	681b      	ldr	r3, [r3, #0]
    c604:	88db      	ldrh	r3, [r3, #6]
    c606:	2bfa      	cmp	r3, #250	; 0xfa
    c608:	d005      	beq.n	c616 <mp_convert_member_lookup+0xbe>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	681b      	ldr	r3, [r3, #0]
    c60e:	88db      	ldrh	r3, [r3, #6]
    c610:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
    c614:	d107      	bne.n	c626 <mp_convert_member_lookup+0xce>
            dest[0] = mp_obj_new_checked_fun(type, member);
        } else
        #endif
        {
            // return a bound method, with self being this object
            dest[0] = member;
    c616:	683b      	ldr	r3, [r7, #0]
    c618:	687a      	ldr	r2, [r7, #4]
    c61a:	601a      	str	r2, [r3, #0]
            dest[1] = self;
    c61c:	683b      	ldr	r3, [r7, #0]
    c61e:	3304      	adds	r3, #4
    c620:	68fa      	ldr	r2, [r7, #12]
    c622:	601a      	str	r2, [r3, #0]
    c624:	e002      	b.n	c62c <mp_convert_member_lookup+0xd4>
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    c626:	683b      	ldr	r3, [r7, #0]
    c628:	687a      	ldr	r2, [r7, #4]
    c62a:	601a      	str	r2, [r3, #0]
    }
}
    c62c:	bf00      	nop
    c62e:	3710      	adds	r7, #16
    c630:	46bd      	mov	sp, r7
    c632:	bd80      	pop	{r7, pc}
    c634:	00023f24 	.word	0x00023f24
    c638:	00023f60 	.word	0x00023f60
    c63c:	00023d18 	.word	0x00023d18

0000c640 <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    c640:	b580      	push	{r7, lr}
    c642:	b088      	sub	sp, #32
    c644:	af00      	add	r7, sp, #0
    c646:	60f8      	str	r0, [r7, #12]
    c648:	60b9      	str	r1, [r7, #8]
    c64a:	607a      	str	r2, [r7, #4]
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    c64c:	687b      	ldr	r3, [r7, #4]
    c64e:	2200      	movs	r2, #0
    c650:	601a      	str	r2, [r3, #0]
    dest[1] = MP_OBJ_NULL;
    c652:	687b      	ldr	r3, [r7, #4]
    c654:	3304      	adds	r3, #4
    c656:	2200      	movs	r2, #0
    c658:	601a      	str	r2, [r3, #0]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    c65a:	68f8      	ldr	r0, [r7, #12]
    c65c:	f001 f828 	bl	d6b0 <mp_obj_get_type>
    c660:	61f8      	str	r0, [r7, #28]
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    c662:	68bb      	ldr	r3, [r7, #8]
    c664:	2b1e      	cmp	r3, #30
    c666:	d10b      	bne.n	c680 <mp_load_method_maybe+0x40>
    c668:	69fb      	ldr	r3, [r7, #28]
    c66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c66c:	2b00      	cmp	r3, #0
    c66e:	d007      	beq.n	c680 <mp_load_method_maybe+0x40>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    c670:	687b      	ldr	r3, [r7, #4]
    c672:	4a1f      	ldr	r2, [pc, #124]	; (c6f0 <mp_load_method_maybe+0xb0>)
    c674:	601a      	str	r2, [r3, #0]
        dest[1] = obj;
    c676:	687b      	ldr	r3, [r7, #4]
    c678:	3304      	adds	r3, #4
    c67a:	68fa      	ldr	r2, [r7, #12]
    c67c:	601a      	str	r2, [r3, #0]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    c67e:	e033      	b.n	c6e8 <mp_load_method_maybe+0xa8>
    } else if (type->attr != NULL) {
    c680:	69fb      	ldr	r3, [r7, #28]
    c682:	69db      	ldr	r3, [r3, #28]
    c684:	2b00      	cmp	r3, #0
    c686:	d006      	beq.n	c696 <mp_load_method_maybe+0x56>
        type->attr(obj, attr, dest);
    c688:	69fb      	ldr	r3, [r7, #28]
    c68a:	69db      	ldr	r3, [r3, #28]
    c68c:	687a      	ldr	r2, [r7, #4]
    c68e:	68b9      	ldr	r1, [r7, #8]
    c690:	68f8      	ldr	r0, [r7, #12]
    c692:	4798      	blx	r3
}
    c694:	e028      	b.n	c6e8 <mp_load_method_maybe+0xa8>
    } else if (type->locals_dict != NULL) {
    c696:	69fb      	ldr	r3, [r7, #28]
    c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c69a:	2b00      	cmp	r3, #0
    c69c:	d024      	beq.n	c6e8 <mp_load_method_maybe+0xa8>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    c69e:	69fb      	ldr	r3, [r7, #28]
    c6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c6a2:	681b      	ldr	r3, [r3, #0]
    c6a4:	4a13      	ldr	r2, [pc, #76]	; (c6f4 <mp_load_method_maybe+0xb4>)
    c6a6:	4293      	cmp	r3, r2
    c6a8:	d006      	beq.n	c6b8 <mp_load_method_maybe+0x78>
    c6aa:	4b13      	ldr	r3, [pc, #76]	; (c6f8 <mp_load_method_maybe+0xb8>)
    c6ac:	4a13      	ldr	r2, [pc, #76]	; (c6fc <mp_load_method_maybe+0xbc>)
    c6ae:	f240 412b 	movw	r1, #1067	; 0x42b
    c6b2:	4813      	ldr	r0, [pc, #76]	; (c700 <mp_load_method_maybe+0xc0>)
    c6b4:	f00e fee4 	bl	1b480 <__assert_func>
        mp_map_t *locals_map = &type->locals_dict->map;
    c6b8:	69fb      	ldr	r3, [r7, #28]
    c6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c6bc:	3304      	adds	r3, #4
    c6be:	61bb      	str	r3, [r7, #24]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    c6c0:	68bb      	ldr	r3, [r7, #8]
    c6c2:	009b      	lsls	r3, r3, #2
    c6c4:	f043 0302 	orr.w	r3, r3, #2
    c6c8:	2200      	movs	r2, #0
    c6ca:	4619      	mov	r1, r3
    c6cc:	69b8      	ldr	r0, [r7, #24]
    c6ce:	f000 fe45 	bl	d35c <mp_map_lookup>
    c6d2:	6178      	str	r0, [r7, #20]
        if (elem != NULL) {
    c6d4:	697b      	ldr	r3, [r7, #20]
    c6d6:	2b00      	cmp	r3, #0
    c6d8:	d006      	beq.n	c6e8 <mp_load_method_maybe+0xa8>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    c6da:	697b      	ldr	r3, [r7, #20]
    c6dc:	685a      	ldr	r2, [r3, #4]
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	69f9      	ldr	r1, [r7, #28]
    c6e2:	68f8      	ldr	r0, [r7, #12]
    c6e4:	f7ff ff38 	bl	c558 <mp_convert_member_lookup>
}
    c6e8:	bf00      	nop
    c6ea:	3720      	adds	r7, #32
    c6ec:	46bd      	mov	sp, r7
    c6ee:	bd80      	pop	{r7, pc}
    c6f0:	000242b4 	.word	0x000242b4
    c6f4:	00021d40 	.word	0x00021d40
    c6f8:	000213d0 	.word	0x000213d0
    c6fc:	0002156c 	.word	0x0002156c
    c700:	000212d0 	.word	0x000212d0

0000c704 <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    c704:	b580      	push	{r7, lr}
    c706:	b084      	sub	sp, #16
    c708:	af00      	add	r7, sp, #0
    c70a:	60f8      	str	r0, [r7, #12]
    c70c:	60b9      	str	r1, [r7, #8]
    c70e:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));

    mp_load_method_maybe(base, attr, dest);
    c710:	687a      	ldr	r2, [r7, #4]
    c712:	68b9      	ldr	r1, [r7, #8]
    c714:	68f8      	ldr	r0, [r7, #12]
    c716:	f7ff ff93 	bl	c640 <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	681b      	ldr	r3, [r3, #0]
    c71e:	2b00      	cmp	r3, #0
    c720:	d103      	bne.n	c72a <mp_load_method+0x26>
        // no attribute/method called attr
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c722:	4904      	ldr	r1, [pc, #16]	; (c734 <mp_load_method+0x30>)
    c724:	4804      	ldr	r0, [pc, #16]	; (c738 <mp_load_method+0x34>)
    c726:	f000 fb7d 	bl	ce24 <mp_raise_msg>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    c72a:	bf00      	nop
    c72c:	3710      	adds	r7, #16
    c72e:	46bd      	mov	sp, r7
    c730:	bd80      	pop	{r7, pc}
    c732:	bf00      	nop
    c734:	00021400 	.word	0x00021400
    c738:	0002209c 	.word	0x0002209c

0000c73c <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    c73c:	b580      	push	{r7, lr}
    c73e:	b090      	sub	sp, #64	; 0x40
    c740:	af00      	add	r7, sp, #0
    c742:	60f8      	str	r0, [r7, #12]
    c744:	60b9      	str	r1, [r7, #8]
    c746:	607a      	str	r2, [r7, #4]
    c748:	70fb      	strb	r3, [r7, #3]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    c74a:	f107 0310 	add.w	r3, r7, #16
    c74e:	4618      	mov	r0, r3
    c750:	f7f3 fdb4 	bl	2bc <nlr_push>
    c754:	4603      	mov	r3, r0
    c756:	2b00      	cmp	r3, #0
    c758:	d107      	bne.n	c76a <mp_load_method_protected+0x2e>
        mp_load_method_maybe(obj, attr, dest);
    c75a:	687a      	ldr	r2, [r7, #4]
    c75c:	68b9      	ldr	r1, [r7, #8]
    c75e:	68f8      	ldr	r0, [r7, #12]
    c760:	f7ff ff6e 	bl	c640 <mp_load_method_maybe>
        nlr_pop();
    c764:	f7f3 fd98 	bl	298 <nlr_pop>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    c768:	e015      	b.n	c796 <mp_load_method_protected+0x5a>
        if (!catch_all_exc
    c76a:	78fb      	ldrb	r3, [r7, #3]
    c76c:	f083 0301 	eor.w	r3, r3, #1
    c770:	b2db      	uxtb	r3, r3
    c772:	2b00      	cmp	r3, #0
    c774:	d00f      	beq.n	c796 <mp_load_method_protected+0x5a>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    c776:	697b      	ldr	r3, [r7, #20]
    c778:	681b      	ldr	r3, [r3, #0]
    c77a:	4909      	ldr	r1, [pc, #36]	; (c7a0 <mp_load_method_protected+0x64>)
    c77c:	4618      	mov	r0, r3
    c77e:	f00a fcf9 	bl	17174 <mp_obj_is_subclass_fast>
    c782:	4603      	mov	r3, r0
    c784:	f083 0301 	eor.w	r3, r3, #1
    c788:	b2db      	uxtb	r3, r3
    c78a:	2b00      	cmp	r3, #0
    c78c:	d003      	beq.n	c796 <mp_load_method_protected+0x5a>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    c78e:	697b      	ldr	r3, [r7, #20]
    c790:	4618      	mov	r0, r3
    c792:	f7f3 fda5 	bl	2e0 <nlr_jump>
}
    c796:	bf00      	nop
    c798:	3740      	adds	r7, #64	; 0x40
    c79a:	46bd      	mov	sp, r7
    c79c:	bd80      	pop	{r7, pc}
    c79e:	bf00      	nop
    c7a0:	0002209c 	.word	0x0002209c

0000c7a4 <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    c7a4:	b580      	push	{r7, lr}
    c7a6:	b088      	sub	sp, #32
    c7a8:	af00      	add	r7, sp, #0
    c7aa:	60f8      	str	r0, [r7, #12]
    c7ac:	60b9      	str	r1, [r7, #8]
    c7ae:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    mp_obj_type_t *type = mp_obj_get_type(base);
    c7b0:	68f8      	ldr	r0, [r7, #12]
    c7b2:	f000 ff7d 	bl	d6b0 <mp_obj_get_type>
    c7b6:	61f8      	str	r0, [r7, #28]
    if (type->attr != NULL) {
    c7b8:	69fb      	ldr	r3, [r7, #28]
    c7ba:	69db      	ldr	r3, [r3, #28]
    c7bc:	2b00      	cmp	r3, #0
    c7be:	d00d      	beq.n	c7dc <mp_store_attr+0x38>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    c7c0:	2308      	movs	r3, #8
    c7c2:	617b      	str	r3, [r7, #20]
    c7c4:	687b      	ldr	r3, [r7, #4]
    c7c6:	61bb      	str	r3, [r7, #24]
        type->attr(base, attr, dest);
    c7c8:	69fb      	ldr	r3, [r7, #28]
    c7ca:	69db      	ldr	r3, [r3, #28]
    c7cc:	f107 0214 	add.w	r2, r7, #20
    c7d0:	68b9      	ldr	r1, [r7, #8]
    c7d2:	68f8      	ldr	r0, [r7, #12]
    c7d4:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    c7d6:	697b      	ldr	r3, [r7, #20]
    c7d8:	2b00      	cmp	r3, #0
    c7da:	d003      	beq.n	c7e4 <mp_store_attr+0x40>
            // success
            return;
        }
    }
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c7dc:	4903      	ldr	r1, [pc, #12]	; (c7ec <mp_store_attr+0x48>)
    c7de:	4804      	ldr	r0, [pc, #16]	; (c7f0 <mp_store_attr+0x4c>)
    c7e0:	f000 fb20 	bl	ce24 <mp_raise_msg>
            return;
    c7e4:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    c7e6:	3720      	adds	r7, #32
    c7e8:	46bd      	mov	sp, r7
    c7ea:	bd80      	pop	{r7, pc}
    c7ec:	00021400 	.word	0x00021400
    c7f0:	0002209c 	.word	0x0002209c

0000c7f4 <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    c7f4:	b580      	push	{r7, lr}
    c7f6:	b086      	sub	sp, #24
    c7f8:	af00      	add	r7, sp, #0
    c7fa:	6078      	str	r0, [r7, #4]
    c7fc:	6039      	str	r1, [r7, #0]
    assert(o_in);
    c7fe:	687b      	ldr	r3, [r7, #4]
    c800:	2b00      	cmp	r3, #0
    c802:	d106      	bne.n	c812 <mp_getiter+0x1e>
    c804:	4b20      	ldr	r3, [pc, #128]	; (c888 <mp_getiter+0x94>)
    c806:	4a21      	ldr	r2, [pc, #132]	; (c88c <mp_getiter+0x98>)
    c808:	f240 4171 	movw	r1, #1137	; 0x471
    c80c:	4820      	ldr	r0, [pc, #128]	; (c890 <mp_getiter+0x9c>)
    c80e:	f00e fe37 	bl	1b480 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c812:	6878      	ldr	r0, [r7, #4]
    c814:	f000 ff4c 	bl	d6b0 <mp_obj_get_type>
    c818:	6178      	str	r0, [r7, #20]

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    c81a:	697b      	ldr	r3, [r7, #20]
    c81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c81e:	4a1d      	ldr	r2, [pc, #116]	; (c894 <mp_getiter+0xa0>)
    c820:	4293      	cmp	r3, r2
    c822:	d101      	bne.n	c828 <mp_getiter+0x34>
        return o_in;
    c824:	687b      	ldr	r3, [r7, #4]
    c826:	e02a      	b.n	c87e <mp_getiter+0x8a>
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    c828:	683b      	ldr	r3, [r7, #0]
    c82a:	2b00      	cmp	r3, #0
    c82c:	d103      	bne.n	c836 <mp_getiter+0x42>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    c82e:	2010      	movs	r0, #16
    c830:	f7f3 fd74 	bl	31c <m_malloc>
    c834:	6038      	str	r0, [r7, #0]
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    c836:	697b      	ldr	r3, [r7, #20]
    c838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c83a:	2b00      	cmp	r3, #0
    c83c:	d00a      	beq.n	c854 <mp_getiter+0x60>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    c83e:	697b      	ldr	r3, [r7, #20]
    c840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c842:	6839      	ldr	r1, [r7, #0]
    c844:	6878      	ldr	r0, [r7, #4]
    c846:	4798      	blx	r3
    c848:	6138      	str	r0, [r7, #16]
        if (iter != MP_OBJ_NULL) {
    c84a:	693b      	ldr	r3, [r7, #16]
    c84c:	2b00      	cmp	r3, #0
    c84e:	d001      	beq.n	c854 <mp_getiter+0x60>
            return iter;
    c850:	693b      	ldr	r3, [r7, #16]
    c852:	e014      	b.n	c87e <mp_getiter+0x8a>
        }
    }

    // check for __getitem__
    mp_obj_t dest[2];
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    c854:	f107 0308 	add.w	r3, r7, #8
    c858:	461a      	mov	r2, r3
    c85a:	210e      	movs	r1, #14
    c85c:	6878      	ldr	r0, [r7, #4]
    c85e:	f7ff feef 	bl	c640 <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    c862:	68bb      	ldr	r3, [r7, #8]
    c864:	2b00      	cmp	r3, #0
    c866:	d007      	beq.n	c878 <mp_getiter+0x84>
        // __getitem__ exists, create and return an iterator
        return mp_obj_new_getitem_iter(dest, iter_buf);
    c868:	f107 0308 	add.w	r3, r7, #8
    c86c:	6839      	ldr	r1, [r7, #0]
    c86e:	4618      	mov	r0, r3
    c870:	f003 fcda 	bl	10228 <mp_obj_new_getitem_iter>
    c874:	4603      	mov	r3, r0
    c876:	e002      	b.n	c87e <mp_getiter+0x8a>
    }

    // object not iterable
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not iterable");
    c878:	4807      	ldr	r0, [pc, #28]	; (c898 <mp_getiter+0xa4>)
    c87a:	f000 faf5 	bl	ce68 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object isn't iterable", mp_obj_get_type_str(o_in)));
    }
}
    c87e:	4618      	mov	r0, r3
    c880:	3718      	adds	r7, #24
    c882:	46bd      	mov	sp, r7
    c884:	bd80      	pop	{r7, pc}
    c886:	bf00      	nop
    c888:	00021414 	.word	0x00021414
    c88c:	00021584 	.word	0x00021584
    c890:	000212d0 	.word	0x000212d0
    c894:	0000de77 	.word	0x0000de77
    c898:	0002141c 	.word	0x0002141c

0000c89c <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    c89c:	b580      	push	{r7, lr}
    c89e:	b086      	sub	sp, #24
    c8a0:	af00      	add	r7, sp, #0
    c8a2:	6078      	str	r0, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c8a4:	6878      	ldr	r0, [r7, #4]
    c8a6:	f000 ff03 	bl	d6b0 <mp_obj_get_type>
    c8aa:	6178      	str	r0, [r7, #20]
    if (type->iternext != NULL) {
    c8ac:	697b      	ldr	r3, [r7, #20]
    c8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d005      	beq.n	c8c0 <mp_iternext_allow_raise+0x24>
        return type->iternext(o_in);
    c8b4:	697b      	ldr	r3, [r7, #20]
    c8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c8b8:	6878      	ldr	r0, [r7, #4]
    c8ba:	4798      	blx	r3
    c8bc:	4603      	mov	r3, r0
    c8be:	e015      	b.n	c8ec <mp_iternext_allow_raise+0x50>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    c8c0:	f107 030c 	add.w	r3, r7, #12
    c8c4:	461a      	mov	r2, r3
    c8c6:	211e      	movs	r1, #30
    c8c8:	6878      	ldr	r0, [r7, #4]
    c8ca:	f7ff feb9 	bl	c640 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    c8ce:	68fb      	ldr	r3, [r7, #12]
    c8d0:	2b00      	cmp	r3, #0
    c8d2:	d008      	beq.n	c8e6 <mp_iternext_allow_raise+0x4a>
            // __next__ exists, call it and return its result
            return mp_call_method_n_kw(0, 0, dest);
    c8d4:	f107 030c 	add.w	r3, r7, #12
    c8d8:	461a      	mov	r2, r3
    c8da:	2100      	movs	r1, #0
    c8dc:	2000      	movs	r0, #0
    c8de:	f7ff fa37 	bl	bd50 <mp_call_method_n_kw>
    c8e2:	4603      	mov	r3, r0
    c8e4:	e002      	b.n	c8ec <mp_iternext_allow_raise+0x50>
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    c8e6:	4803      	ldr	r0, [pc, #12]	; (c8f4 <mp_iternext_allow_raise+0x58>)
    c8e8:	f000 fabe 	bl	ce68 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object isn't an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    c8ec:	4618      	mov	r0, r3
    c8ee:	3718      	adds	r7, #24
    c8f0:	46bd      	mov	sp, r7
    c8f2:	bd80      	pop	{r7, pc}
    c8f4:	00021430 	.word	0x00021430

0000c8f8 <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    c8f8:	b580      	push	{r7, lr}
    c8fa:	b092      	sub	sp, #72	; 0x48
    c8fc:	af00      	add	r7, sp, #0
    c8fe:	6078      	str	r0, [r7, #4]
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c900:	6878      	ldr	r0, [r7, #4]
    c902:	f000 fed5 	bl	d6b0 <mp_obj_get_type>
    c906:	6478      	str	r0, [r7, #68]	; 0x44
    if (type->iternext != NULL) {
    c908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c90c:	2b00      	cmp	r3, #0
    c90e:	d005      	beq.n	c91c <mp_iternext+0x24>
        return type->iternext(o_in);
    c910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c914:	6878      	ldr	r0, [r7, #4]
    c916:	4798      	blx	r3
    c918:	4603      	mov	r3, r0
    c91a:	e02f      	b.n	c97c <mp_iternext+0x84>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    c91c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c920:	461a      	mov	r2, r3
    c922:	211e      	movs	r1, #30
    c924:	6878      	ldr	r0, [r7, #4]
    c926:	f7ff fe8b 	bl	c640 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c92c:	2b00      	cmp	r3, #0
    c92e:	d022      	beq.n	c976 <mp_iternext+0x7e>
            // __next__ exists, call it and return its result
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    c930:	f107 0308 	add.w	r3, r7, #8
    c934:	4618      	mov	r0, r3
    c936:	f7f3 fcc1 	bl	2bc <nlr_push>
    c93a:	4603      	mov	r3, r0
    c93c:	2b00      	cmp	r3, #0
    c93e:	d10b      	bne.n	c958 <mp_iternext+0x60>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    c940:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c944:	461a      	mov	r2, r3
    c946:	2100      	movs	r1, #0
    c948:	2000      	movs	r0, #0
    c94a:	f7ff fa01 	bl	bd50 <mp_call_method_n_kw>
    c94e:	6438      	str	r0, [r7, #64]	; 0x40
                nlr_pop();
    c950:	f7f3 fca2 	bl	298 <nlr_pop>
                return ret;
    c954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c956:	e011      	b.n	c97c <mp_iternext+0x84>
            } else {
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    c958:	68fb      	ldr	r3, [r7, #12]
    c95a:	681b      	ldr	r3, [r3, #0]
    c95c:	4909      	ldr	r1, [pc, #36]	; (c984 <mp_iternext+0x8c>)
    c95e:	4618      	mov	r0, r3
    c960:	f00a fc08 	bl	17174 <mp_obj_is_subclass_fast>
    c964:	4603      	mov	r3, r0
    c966:	2b00      	cmp	r3, #0
    c968:	d001      	beq.n	c96e <mp_iternext+0x76>
                    return MP_OBJ_STOP_ITERATION;
    c96a:	2304      	movs	r3, #4
    c96c:	e006      	b.n	c97c <mp_iternext+0x84>
                } else {
                    nlr_jump(nlr.ret_val);
    c96e:	68fb      	ldr	r3, [r7, #12]
    c970:	4618      	mov	r0, r3
    c972:	f7f3 fcb5 	bl	2e0 <nlr_jump>
                }
            }
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    c976:	4804      	ldr	r0, [pc, #16]	; (c988 <mp_iternext+0x90>)
    c978:	f000 fa76 	bl	ce68 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object isn't an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    c97c:	4618      	mov	r0, r3
    c97e:	3748      	adds	r7, #72	; 0x48
    c980:	46bd      	mov	sp, r7
    c982:	bd80      	pop	{r7, pc}
    c984:	00021f70 	.word	0x00021f70
    c988:	00021430 	.word	0x00021430

0000c98c <mp_resume>:

// TODO: Unclear what to do with StopIterarion exception here.
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    c98c:	b580      	push	{r7, lr}
    c98e:	b08a      	sub	sp, #40	; 0x28
    c990:	af00      	add	r7, sp, #0
    c992:	60f8      	str	r0, [r7, #12]
    c994:	60b9      	str	r1, [r7, #8]
    c996:	607a      	str	r2, [r7, #4]
    c998:	603b      	str	r3, [r7, #0]
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    c99a:	68bb      	ldr	r3, [r7, #8]
    c99c:	2b00      	cmp	r3, #0
    c99e:	bf14      	ite	ne
    c9a0:	2301      	movne	r3, #1
    c9a2:	2300      	moveq	r3, #0
    c9a4:	b2da      	uxtb	r2, r3
    c9a6:	687b      	ldr	r3, [r7, #4]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	bf14      	ite	ne
    c9ac:	2301      	movne	r3, #1
    c9ae:	2300      	moveq	r3, #0
    c9b0:	b2db      	uxtb	r3, r3
    c9b2:	4053      	eors	r3, r2
    c9b4:	b2db      	uxtb	r3, r3
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d106      	bne.n	c9c8 <mp_resume+0x3c>
    c9ba:	4b58      	ldr	r3, [pc, #352]	; (cb1c <mp_resume+0x190>)
    c9bc:	4a58      	ldr	r2, [pc, #352]	; (cb20 <mp_resume+0x194>)
    c9be:	f240 41d6 	movw	r1, #1238	; 0x4d6
    c9c2:	4858      	ldr	r0, [pc, #352]	; (cb24 <mp_resume+0x198>)
    c9c4:	f00e fd5c 	bl	1b480 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    c9c8:	68f8      	ldr	r0, [r7, #12]
    c9ca:	f000 fe71 	bl	d6b0 <mp_obj_get_type>
    c9ce:	6278      	str	r0, [r7, #36]	; 0x24

    if (type == &mp_type_gen_instance) {
    c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c9d2:	4a55      	ldr	r2, [pc, #340]	; (cb28 <mp_resume+0x19c>)
    c9d4:	4293      	cmp	r3, r2
    c9d6:	d107      	bne.n	c9e8 <mp_resume+0x5c>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    c9d8:	683b      	ldr	r3, [r7, #0]
    c9da:	687a      	ldr	r2, [r7, #4]
    c9dc:	68b9      	ldr	r1, [r7, #8]
    c9de:	68f8      	ldr	r0, [r7, #12]
    c9e0:	f003 fa4e 	bl	fe80 <mp_obj_gen_resume>
    c9e4:	4603      	mov	r3, r0
    c9e6:	e094      	b.n	cb12 <mp_resume+0x186>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
    c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d012      	beq.n	ca16 <mp_resume+0x8a>
    c9f0:	68bb      	ldr	r3, [r7, #8]
    c9f2:	4a4e      	ldr	r2, [pc, #312]	; (cb2c <mp_resume+0x1a0>)
    c9f4:	4293      	cmp	r3, r2
    c9f6:	d10e      	bne.n	ca16 <mp_resume+0x8a>
        mp_obj_t ret = type->iternext(self_in);
    c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9fc:	68f8      	ldr	r0, [r7, #12]
    c9fe:	4798      	blx	r3
    ca00:	6238      	str	r0, [r7, #32]
        *ret_val = ret;
    ca02:	683b      	ldr	r3, [r7, #0]
    ca04:	6a3a      	ldr	r2, [r7, #32]
    ca06:	601a      	str	r2, [r3, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    ca08:	6a3b      	ldr	r3, [r7, #32]
    ca0a:	2b04      	cmp	r3, #4
    ca0c:	d001      	beq.n	ca12 <mp_resume+0x86>
            return MP_VM_RETURN_YIELD;
    ca0e:	2301      	movs	r3, #1
    ca10:	e07f      	b.n	cb12 <mp_resume+0x186>
        } else {
            // Emulate raise StopIteration()
            // Special case, handled in vm.c
            return MP_VM_RETURN_NORMAL;
    ca12:	2300      	movs	r3, #0
    ca14:	e07d      	b.n	cb12 <mp_resume+0x186>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
    ca16:	68bb      	ldr	r3, [r7, #8]
    ca18:	4a44      	ldr	r2, [pc, #272]	; (cb2c <mp_resume+0x1a0>)
    ca1a:	4293      	cmp	r3, r2
    ca1c:	d115      	bne.n	ca4a <mp_resume+0xbe>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    ca1e:	f107 0314 	add.w	r3, r7, #20
    ca22:	461a      	mov	r2, r3
    ca24:	211e      	movs	r1, #30
    ca26:	68f8      	ldr	r0, [r7, #12]
    ca28:	f7ff fe0a 	bl	c640 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    ca2c:	697b      	ldr	r3, [r7, #20]
    ca2e:	2b00      	cmp	r3, #0
    ca30:	d00b      	beq.n	ca4a <mp_resume+0xbe>
            *ret_val = mp_call_method_n_kw(0, 0, dest);
    ca32:	f107 0314 	add.w	r3, r7, #20
    ca36:	461a      	mov	r2, r3
    ca38:	2100      	movs	r1, #0
    ca3a:	2000      	movs	r0, #0
    ca3c:	f7ff f988 	bl	bd50 <mp_call_method_n_kw>
    ca40:	4602      	mov	r2, r0
    ca42:	683b      	ldr	r3, [r7, #0]
    ca44:	601a      	str	r2, [r3, #0]
            return MP_VM_RETURN_YIELD;
    ca46:	2301      	movs	r3, #1
    ca48:	e063      	b.n	cb12 <mp_resume+0x186>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
    ca4a:	68bb      	ldr	r3, [r7, #8]
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	d015      	beq.n	ca7c <mp_resume+0xf0>
        mp_load_method(self_in, MP_QSTR_send, dest);
    ca50:	f107 0314 	add.w	r3, r7, #20
    ca54:	461a      	mov	r2, r3
    ca56:	f44f 71ac 	mov.w	r1, #344	; 0x158
    ca5a:	68f8      	ldr	r0, [r7, #12]
    ca5c:	f7ff fe52 	bl	c704 <mp_load_method>
        dest[2] = send_value;
    ca60:	68bb      	ldr	r3, [r7, #8]
    ca62:	61fb      	str	r3, [r7, #28]
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    ca64:	f107 0314 	add.w	r3, r7, #20
    ca68:	461a      	mov	r2, r3
    ca6a:	2100      	movs	r1, #0
    ca6c:	2001      	movs	r0, #1
    ca6e:	f7ff f96f 	bl	bd50 <mp_call_method_n_kw>
    ca72:	4602      	mov	r2, r0
    ca74:	683b      	ldr	r3, [r7, #0]
    ca76:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_YIELD;
    ca78:	2301      	movs	r3, #1
    ca7a:	e04a      	b.n	cb12 <mp_resume+0x186>
    }

    assert(throw_value != MP_OBJ_NULL);
    ca7c:	687b      	ldr	r3, [r7, #4]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	d106      	bne.n	ca90 <mp_resume+0x104>
    ca82:	4b2b      	ldr	r3, [pc, #172]	; (cb30 <mp_resume+0x1a4>)
    ca84:	4a26      	ldr	r2, [pc, #152]	; (cb20 <mp_resume+0x194>)
    ca86:	f240 41fd 	movw	r1, #1277	; 0x4fd
    ca8a:	4826      	ldr	r0, [pc, #152]	; (cb24 <mp_resume+0x198>)
    ca8c:	f00e fcf8 	bl	1b480 <__assert_func>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    ca90:	6878      	ldr	r0, [r7, #4]
    ca92:	f000 fe0d 	bl	d6b0 <mp_obj_get_type>
    ca96:	4603      	mov	r3, r0
    ca98:	4926      	ldr	r1, [pc, #152]	; (cb34 <mp_resume+0x1a8>)
    ca9a:	4618      	mov	r0, r3
    ca9c:	f00a fb6a 	bl	17174 <mp_obj_is_subclass_fast>
    caa0:	4603      	mov	r3, r0
    caa2:	2b00      	cmp	r3, #0
    caa4:	d015      	beq.n	cad2 <mp_resume+0x146>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    caa6:	f107 0314 	add.w	r3, r7, #20
    caaa:	461a      	mov	r2, r3
    caac:	21f9      	movs	r1, #249	; 0xf9
    caae:	68f8      	ldr	r0, [r7, #12]
    cab0:	f7ff fdc6 	bl	c640 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cab4:	697b      	ldr	r3, [r7, #20]
    cab6:	2b00      	cmp	r3, #0
    cab8:	d024      	beq.n	cb04 <mp_resume+0x178>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    caba:	f107 0314 	add.w	r3, r7, #20
    cabe:	461a      	mov	r2, r3
    cac0:	2100      	movs	r1, #0
    cac2:	2000      	movs	r0, #0
    cac4:	f7ff f944 	bl	bd50 <mp_call_method_n_kw>
    cac8:	4602      	mov	r2, r0
    caca:	683b      	ldr	r3, [r7, #0]
    cacc:	601a      	str	r2, [r3, #0]
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
    cace:	2300      	movs	r3, #0
    cad0:	e01f      	b.n	cb12 <mp_resume+0x186>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    cad2:	f107 0314 	add.w	r3, r7, #20
    cad6:	461a      	mov	r2, r3
    cad8:	f240 1169 	movw	r1, #361	; 0x169
    cadc:	68f8      	ldr	r0, [r7, #12]
    cade:	f7ff fdaf 	bl	c640 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cae2:	697b      	ldr	r3, [r7, #20]
    cae4:	2b00      	cmp	r3, #0
    cae6:	d00d      	beq.n	cb04 <mp_resume+0x178>
                dest[2] = throw_value;
    cae8:	687b      	ldr	r3, [r7, #4]
    caea:	61fb      	str	r3, [r7, #28]
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    caec:	f107 0314 	add.w	r3, r7, #20
    caf0:	461a      	mov	r2, r3
    caf2:	2100      	movs	r1, #0
    caf4:	2001      	movs	r0, #1
    caf6:	f7ff f92b 	bl	bd50 <mp_call_method_n_kw>
    cafa:	4602      	mov	r2, r0
    cafc:	683b      	ldr	r3, [r7, #0]
    cafe:	601a      	str	r2, [r3, #0]
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
    cb00:	2301      	movs	r3, #1
    cb02:	e006      	b.n	cb12 <mp_resume+0x186>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        *ret_val = mp_make_raise_obj(throw_value);
    cb04:	6878      	ldr	r0, [r7, #4]
    cb06:	f000 f817 	bl	cb38 <mp_make_raise_obj>
    cb0a:	4602      	mov	r2, r0
    cb0c:	683b      	ldr	r3, [r7, #0]
    cb0e:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_EXCEPTION;
    cb10:	2302      	movs	r3, #2
    }
}
    cb12:	4618      	mov	r0, r3
    cb14:	3728      	adds	r7, #40	; 0x28
    cb16:	46bd      	mov	sp, r7
    cb18:	bd80      	pop	{r7, pc}
    cb1a:	bf00      	nop
    cb1c:	00021448 	.word	0x00021448
    cb20:	00021590 	.word	0x00021590
    cb24:	000212d0 	.word	0x000212d0
    cb28:	00022a78 	.word	0x00022a78
    cb2c:	00023108 	.word	0x00023108
    cb30:	00021484 	.word	0x00021484
    cb34:	00021ef8 	.word	0x00021ef8

0000cb38 <mp_make_raise_obj>:

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    cb38:	b580      	push	{r7, lr}
    cb3a:	b082      	sub	sp, #8
    cb3c:	af00      	add	r7, sp, #0
    cb3e:	6078      	str	r0, [r7, #4]
    DEBUG_printf("raise %p\n", o);
    if (mp_obj_is_exception_type(o)) {
    cb40:	6878      	ldr	r0, [r7, #4]
    cb42:	f002 fd39 	bl	f5b8 <mp_obj_is_exception_type>
    cb46:	4603      	mov	r3, r0
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d007      	beq.n	cb5c <mp_make_raise_obj+0x24>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    cb4c:	2300      	movs	r3, #0
    cb4e:	2200      	movs	r2, #0
    cb50:	2100      	movs	r1, #0
    cb52:	6878      	ldr	r0, [r7, #4]
    cb54:	f7ff f8db 	bl	bd0e <mp_call_function_n_kw>
    cb58:	4603      	mov	r3, r0
    cb5a:	e00c      	b.n	cb76 <mp_make_raise_obj+0x3e>
    } else if (mp_obj_is_exception_instance(o)) {
    cb5c:	6878      	ldr	r0, [r7, #4]
    cb5e:	f002 fd53 	bl	f608 <mp_obj_is_exception_instance>
    cb62:	4603      	mov	r3, r0
    cb64:	2b00      	cmp	r3, #0
    cb66:	d001      	beq.n	cb6c <mp_make_raise_obj+0x34>
        // o is an instance of an exception, so use it as the exception
        return o;
    cb68:	687b      	ldr	r3, [r7, #4]
    cb6a:	e004      	b.n	cb76 <mp_make_raise_obj+0x3e>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    cb6c:	4904      	ldr	r1, [pc, #16]	; (cb80 <mp_make_raise_obj+0x48>)
    cb6e:	4805      	ldr	r0, [pc, #20]	; (cb84 <mp_make_raise_obj+0x4c>)
    cb70:	f002 fc24 	bl	f3bc <mp_obj_new_exception_msg>
    cb74:	4603      	mov	r3, r0
    }
}
    cb76:	4618      	mov	r0, r3
    cb78:	3708      	adds	r7, #8
    cb7a:	46bd      	mov	sp, r7
    cb7c:	bd80      	pop	{r7, pc}
    cb7e:	bf00      	nop
    cb80:	000214a0 	.word	0x000214a0
    cb84:	000223a8 	.word	0x000223a8

0000cb88 <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    cb88:	b580      	push	{r7, lr}
    cb8a:	b08a      	sub	sp, #40	; 0x28
    cb8c:	af00      	add	r7, sp, #0
    cb8e:	60f8      	str	r0, [r7, #12]
    cb90:	60b9      	str	r1, [r7, #8]
    cb92:	607a      	str	r2, [r7, #4]
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    cb94:	68fb      	ldr	r3, [r7, #12]
    cb96:	009b      	lsls	r3, r3, #2
    cb98:	f043 0302 	orr.w	r3, r3, #2
    cb9c:	617b      	str	r3, [r7, #20]
    args[1] = mp_const_none; // TODO should be globals
    cb9e:	4b09      	ldr	r3, [pc, #36]	; (cbc4 <mp_import_name+0x3c>)
    cba0:	61bb      	str	r3, [r7, #24]
    args[2] = mp_const_none; // TODO should be locals
    cba2:	4b08      	ldr	r3, [pc, #32]	; (cbc4 <mp_import_name+0x3c>)
    cba4:	61fb      	str	r3, [r7, #28]
    args[3] = fromlist;
    cba6:	68bb      	ldr	r3, [r7, #8]
    cba8:	623b      	str	r3, [r7, #32]
    args[4] = level;
    cbaa:	687b      	ldr	r3, [r7, #4]
    cbac:	627b      	str	r3, [r7, #36]	; 0x24

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    cbae:	f107 0314 	add.w	r3, r7, #20
    cbb2:	4619      	mov	r1, r3
    cbb4:	2005      	movs	r0, #5
    cbb6:	f00b fd5a 	bl	1866e <mp_builtin___import__>
    cbba:	4603      	mov	r3, r0
}
    cbbc:	4618      	mov	r0, r3
    cbbe:	3728      	adds	r7, #40	; 0x28
    cbc0:	46bd      	mov	sp, r7
    cbc2:	bd80      	pop	{r7, pc}
    cbc4:	00023108 	.word	0x00023108

0000cbc8 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    cbc8:	b5b0      	push	{r4, r5, r7, lr}
    cbca:	b08a      	sub	sp, #40	; 0x28
    cbcc:	af00      	add	r7, sp, #0
    cbce:	6078      	str	r0, [r7, #4]
    cbd0:	6039      	str	r1, [r7, #0]
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    cbd2:	f107 0310 	add.w	r3, r7, #16
    cbd6:	461a      	mov	r2, r3
    cbd8:	6839      	ldr	r1, [r7, #0]
    cbda:	6878      	ldr	r0, [r7, #4]
    cbdc:	f7ff fd30 	bl	c640 <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    cbe0:	697b      	ldr	r3, [r7, #20]
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d00a      	beq.n	cbfc <mp_import_from+0x34>
    cbe6:	e000      	b.n	cbea <mp_import_from+0x22>

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
        goto import_error;
    cbe8:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    cbea:	683a      	ldr	r2, [r7, #0]
    cbec:	4933      	ldr	r1, [pc, #204]	; (ccbc <mp_import_from+0xf4>)
    cbee:	4834      	ldr	r0, [pc, #208]	; (ccc0 <mp_import_from+0xf8>)
    cbf0:	f002 fc44 	bl	f47c <mp_obj_new_exception_msg_varg>
    cbf4:	4603      	mov	r3, r0
    cbf6:	4618      	mov	r0, r3
    cbf8:	f7f3 fb72 	bl	2e0 <nlr_jump>
    if (dest[0] != MP_OBJ_NULL) {
    cbfc:	693b      	ldr	r3, [r7, #16]
    cbfe:	2b00      	cmp	r3, #0
    cc00:	d001      	beq.n	cc06 <mp_import_from+0x3e>
        return dest[0];
    cc02:	693b      	ldr	r3, [r7, #16]
    cc04:	e055      	b.n	ccb2 <mp_import_from+0xea>
    if (!mp_obj_is_package(module)) {
    cc06:	6878      	ldr	r0, [r7, #4]
    cc08:	f00b fc22 	bl	18450 <mp_obj_is_package>
    cc0c:	4603      	mov	r3, r0
    cc0e:	f083 0301 	eor.w	r3, r3, #1
    cc12:	b2db      	uxtb	r3, r3
    cc14:	2b00      	cmp	r3, #0
    cc16:	d1e7      	bne.n	cbe8 <mp_import_from+0x20>
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    cc18:	f107 0310 	add.w	r3, r7, #16
    cc1c:	461a      	mov	r2, r3
    cc1e:	211c      	movs	r1, #28
    cc20:	6878      	ldr	r0, [r7, #4]
    cc22:	f7ff fd0d 	bl	c640 <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    cc26:	693b      	ldr	r3, [r7, #16]
    cc28:	f107 020c 	add.w	r2, r7, #12
    cc2c:	4611      	mov	r1, r2
    cc2e:	4618      	mov	r0, r3
    cc30:	f008 fc38 	bl	154a4 <mp_obj_str_get_data>
    cc34:	6278      	str	r0, [r7, #36]	; 0x24

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    cc36:	6838      	ldr	r0, [r7, #0]
    cc38:	f7f4 faf7 	bl	122a <qstr_len>
    cc3c:	4602      	mov	r2, r0
    cc3e:	68fb      	ldr	r3, [r7, #12]
    cc40:	4413      	add	r3, r2
    cc42:	3301      	adds	r3, #1
    cc44:	623b      	str	r3, [r7, #32]
    char *dot_name = mp_local_alloc(dot_name_len);
    cc46:	6a3b      	ldr	r3, [r7, #32]
    cc48:	3307      	adds	r3, #7
    cc4a:	3307      	adds	r3, #7
    cc4c:	08db      	lsrs	r3, r3, #3
    cc4e:	00db      	lsls	r3, r3, #3
    cc50:	ebad 0d03 	sub.w	sp, sp, r3
    cc54:	466b      	mov	r3, sp
    cc56:	3307      	adds	r3, #7
    cc58:	08db      	lsrs	r3, r3, #3
    cc5a:	00db      	lsls	r3, r3, #3
    cc5c:	61fb      	str	r3, [r7, #28]
    memcpy(dot_name, pkg_name, pkg_name_len);
    cc5e:	68fb      	ldr	r3, [r7, #12]
    cc60:	461a      	mov	r2, r3
    cc62:	6a79      	ldr	r1, [r7, #36]	; 0x24
    cc64:	69f8      	ldr	r0, [r7, #28]
    cc66:	f00f ff37 	bl	1cad8 <memcpy>
    dot_name[pkg_name_len] = '.';
    cc6a:	68fb      	ldr	r3, [r7, #12]
    cc6c:	69fa      	ldr	r2, [r7, #28]
    cc6e:	4413      	add	r3, r2
    cc70:	222e      	movs	r2, #46	; 0x2e
    cc72:	701a      	strb	r2, [r3, #0]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    cc74:	68fb      	ldr	r3, [r7, #12]
    cc76:	3301      	adds	r3, #1
    cc78:	69fa      	ldr	r2, [r7, #28]
    cc7a:	18d4      	adds	r4, r2, r3
    cc7c:	6838      	ldr	r0, [r7, #0]
    cc7e:	f7f4 fae3 	bl	1248 <qstr_str>
    cc82:	4605      	mov	r5, r0
    cc84:	6838      	ldr	r0, [r7, #0]
    cc86:	f7f4 fad0 	bl	122a <qstr_len>
    cc8a:	4603      	mov	r3, r0
    cc8c:	461a      	mov	r2, r3
    cc8e:	4629      	mov	r1, r5
    cc90:	4620      	mov	r0, r4
    cc92:	f00f ff21 	bl	1cad8 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    cc96:	6a39      	ldr	r1, [r7, #32]
    cc98:	69f8      	ldr	r0, [r7, #28]
    cc9a:	f7f4 f9fc 	bl	1096 <qstr_from_strn>
    cc9e:	61b8      	str	r0, [r7, #24]
    mp_local_free(dot_name);
    cca0:	69f8      	ldr	r0, [r7, #28]
    cca2:	f7fe fb69 	bl	b378 <mp_local_free>

    // For fromlist, pass sentinel "non empty" value to force returning of leaf module
    return mp_import_name(dot_name_q, mp_const_true, MP_OBJ_NEW_SMALL_INT(0));
    cca6:	2201      	movs	r2, #1
    cca8:	4906      	ldr	r1, [pc, #24]	; (ccc4 <mp_import_from+0xfc>)
    ccaa:	69b8      	ldr	r0, [r7, #24]
    ccac:	f7ff ff6c 	bl	cb88 <mp_import_name>
    ccb0:	4603      	mov	r3, r0

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    ccb2:	4618      	mov	r0, r3
    ccb4:	3728      	adds	r7, #40	; 0x28
    ccb6:	46bd      	mov	sp, r7
    ccb8:	bdb0      	pop	{r4, r5, r7, pc}
    ccba:	bf00      	nop
    ccbc:	000214cc 	.word	0x000214cc
    ccc0:	00022114 	.word	0x00022114
    ccc4:	0002189c 	.word	0x0002189c

0000ccc8 <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    ccc8:	b580      	push	{r7, lr}
    ccca:	b086      	sub	sp, #24
    cccc:	af00      	add	r7, sp, #0
    ccce:	6078      	str	r0, [r7, #4]
    DEBUG_printf("import all %p\n", module);

    // TODO: Support __all__
    mp_map_t *map = &mp_obj_module_get_globals(module)->map;
    ccd0:	6878      	ldr	r0, [r7, #4]
    ccd2:	f7fe fb45 	bl	b360 <mp_obj_module_get_globals>
    ccd6:	4603      	mov	r3, r0
    ccd8:	3304      	adds	r3, #4
    ccda:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < map->alloc; i++) {
    ccdc:	2300      	movs	r3, #0
    ccde:	617b      	str	r3, [r7, #20]
    cce0:	e02b      	b.n	cd3a <mp_import_all+0x72>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    cce2:	6979      	ldr	r1, [r7, #20]
    cce4:	6938      	ldr	r0, [r7, #16]
    cce6:	f7fe faf9 	bl	b2dc <MP_MAP_SLOT_IS_FILLED>
    ccea:	4603      	mov	r3, r0
    ccec:	2b00      	cmp	r3, #0
    ccee:	d021      	beq.n	cd34 <mp_import_all+0x6c>
            // Entry in module global scope may be generated programmatically
            // (and thus be not a qstr for longer names). Avoid turning it in
            // qstr if it has '_' and was used exactly to save memory.
            const char *name = mp_obj_str_get_str(map->table[i].key);
    ccf0:	693b      	ldr	r3, [r7, #16]
    ccf2:	689a      	ldr	r2, [r3, #8]
    ccf4:	697b      	ldr	r3, [r7, #20]
    ccf6:	00db      	lsls	r3, r3, #3
    ccf8:	4413      	add	r3, r2
    ccfa:	681b      	ldr	r3, [r3, #0]
    ccfc:	4618      	mov	r0, r3
    ccfe:	f008 fb99 	bl	15434 <mp_obj_str_get_str>
    cd02:	60f8      	str	r0, [r7, #12]
            if (*name != '_') {
    cd04:	68fb      	ldr	r3, [r7, #12]
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	2b5f      	cmp	r3, #95	; 0x5f
    cd0a:	d013      	beq.n	cd34 <mp_import_all+0x6c>
                qstr qname = mp_obj_str_get_qstr(map->table[i].key);
    cd0c:	693b      	ldr	r3, [r7, #16]
    cd0e:	689a      	ldr	r2, [r3, #8]
    cd10:	697b      	ldr	r3, [r7, #20]
    cd12:	00db      	lsls	r3, r3, #3
    cd14:	4413      	add	r3, r2
    cd16:	681b      	ldr	r3, [r3, #0]
    cd18:	4618      	mov	r0, r3
    cd1a:	f008 fb5d 	bl	153d8 <mp_obj_str_get_qstr>
    cd1e:	60b8      	str	r0, [r7, #8]
                mp_store_name(qname, map->table[i].value);
    cd20:	693b      	ldr	r3, [r7, #16]
    cd22:	689a      	ldr	r2, [r3, #8]
    cd24:	697b      	ldr	r3, [r7, #20]
    cd26:	00db      	lsls	r3, r3, #3
    cd28:	4413      	add	r3, r2
    cd2a:	685b      	ldr	r3, [r3, #4]
    cd2c:	4619      	mov	r1, r3
    cd2e:	68b8      	ldr	r0, [r7, #8]
    cd30:	f7fe fc1a 	bl	b568 <mp_store_name>
    for (size_t i = 0; i < map->alloc; i++) {
    cd34:	697b      	ldr	r3, [r7, #20]
    cd36:	3301      	adds	r3, #1
    cd38:	617b      	str	r3, [r7, #20]
    cd3a:	693b      	ldr	r3, [r7, #16]
    cd3c:	685a      	ldr	r2, [r3, #4]
    cd3e:	697b      	ldr	r3, [r7, #20]
    cd40:	429a      	cmp	r2, r3
    cd42:	d8ce      	bhi.n	cce2 <mp_import_all+0x1a>
            }
        }
    }
}
    cd44:	bf00      	nop
    cd46:	3718      	adds	r7, #24
    cd48:	46bd      	mov	sp, r7
    cd4a:	bd80      	pop	{r7, pc}

0000cd4c <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    cd4c:	b580      	push	{r7, lr}
    cd4e:	b098      	sub	sp, #96	; 0x60
    cd50:	af00      	add	r7, sp, #0
    cd52:	60f8      	str	r0, [r7, #12]
    cd54:	60b9      	str	r1, [r7, #8]
    cd56:	607a      	str	r2, [r7, #4]
    cd58:	603b      	str	r3, [r7, #0]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    cd5a:	f7fe fb59 	bl	b410 <mp_globals_get>
    cd5e:	4603      	mov	r3, r0
    cd60:	653b      	str	r3, [r7, #80]	; 0x50
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    cd62:	f7fe fb3a 	bl	b3da <mp_locals_get>
    cd66:	4603      	mov	r3, r0
    cd68:	64fb      	str	r3, [r7, #76]	; 0x4c

    // set new context
    mp_globals_set(globals);
    cd6a:	6878      	ldr	r0, [r7, #4]
    cd6c:	f7fe fb5c 	bl	b428 <mp_globals_set>
    mp_locals_set(locals);
    cd70:	6838      	ldr	r0, [r7, #0]
    cd72:	f7fe fb3d 	bl	b3f0 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    cd76:	f107 031c 	add.w	r3, r7, #28
    cd7a:	4618      	mov	r0, r3
    cd7c:	f7f3 fa9e 	bl	2bc <nlr_push>
    cd80:	4603      	mov	r3, r0
    cd82:	2b00      	cmp	r3, #0
    cd84:	d121      	bne.n	cdca <mp_parse_compile_execute+0x7e>
        qstr source_name = lex->source_name;
    cd86:	68fb      	ldr	r3, [r7, #12]
    cd88:	681b      	ldr	r3, [r3, #0]
    cd8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    cd8c:	f107 0314 	add.w	r3, r7, #20
    cd90:	68ba      	ldr	r2, [r7, #8]
    cd92:	68f9      	ldr	r1, [r7, #12]
    cd94:	4618      	mov	r0, r3
    cd96:	f7f7 fae1 	bl	435c <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    cd9a:	f107 0014 	add.w	r0, r7, #20
    cd9e:	2300      	movs	r3, #0
    cda0:	2200      	movs	r2, #0
    cda2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    cda4:	f7fc fcc1 	bl	972a <mp_compile>
    cda8:	65b8      	str	r0, [r7, #88]	; 0x58
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    cdaa:	6db8      	ldr	r0, [r7, #88]	; 0x58
    cdac:	f7fe ff7a 	bl	bca4 <mp_call_function_0>
    cdb0:	6578      	str	r0, [r7, #84]	; 0x54
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    cdb2:	f7f3 fa71 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
    cdb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cdb8:	4618      	mov	r0, r3
    cdba:	f7fe fb35 	bl	b428 <mp_globals_set>
        mp_locals_set(old_locals);
    cdbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdc0:	4618      	mov	r0, r3
    cdc2:	f7fe fb15 	bl	b3f0 <mp_locals_set>
        return ret;
    cdc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cdc8:	e00b      	b.n	cde2 <mp_parse_compile_execute+0x96>
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
    cdca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cdcc:	4618      	mov	r0, r3
    cdce:	f7fe fb2b 	bl	b428 <mp_globals_set>
        mp_locals_set(old_locals);
    cdd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cdd4:	4618      	mov	r0, r3
    cdd6:	f7fe fb0b 	bl	b3f0 <mp_locals_set>
        nlr_jump(nlr.ret_val);
    cdda:	6a3b      	ldr	r3, [r7, #32]
    cddc:	4618      	mov	r0, r3
    cdde:	f7f3 fa7f 	bl	2e0 <nlr_jump>
    }
}
    cde2:	4618      	mov	r0, r3
    cde4:	3760      	adds	r7, #96	; 0x60
    cde6:	46bd      	mov	sp, r7
    cde8:	bd80      	pop	{r7, pc}

0000cdea <m_malloc_fail>:

#endif // MICROPY_ENABLE_COMPILER

NORETURN void m_malloc_fail(size_t num_bytes) {
    cdea:	b580      	push	{r7, lr}
    cdec:	b082      	sub	sp, #8
    cdee:	af00      	add	r7, sp, #0
    cdf0:	6078      	str	r0, [r7, #4]
    DEBUG_printf("memory allocation failed, allocating %u bytes\n", (uint)num_bytes);
    #if MICROPY_ENABLE_GC
    if (gc_is_locked()) {
    cdf2:	f7f3 fbe5 	bl	5c0 <gc_is_locked>
    cdf6:	4603      	mov	r3, r0
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d003      	beq.n	ce04 <m_malloc_fail+0x1a>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    cdfc:	4906      	ldr	r1, [pc, #24]	; (ce18 <m_malloc_fail+0x2e>)
    cdfe:	4807      	ldr	r0, [pc, #28]	; (ce1c <m_malloc_fail+0x32>)
    ce00:	f000 f810 	bl	ce24 <mp_raise_msg>
    }
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    ce04:	687a      	ldr	r2, [r7, #4]
    ce06:	4906      	ldr	r1, [pc, #24]	; (ce20 <m_malloc_fail+0x36>)
    ce08:	4804      	ldr	r0, [pc, #16]	; (ce1c <m_malloc_fail+0x32>)
    ce0a:	f002 fb37 	bl	f47c <mp_obj_new_exception_msg_varg>
    ce0e:	4603      	mov	r3, r0
    ce10:	4618      	mov	r0, r3
    ce12:	f7f3 fa65 	bl	2e0 <nlr_jump>
    ce16:	bf00      	nop
    ce18:	000214e4 	.word	0x000214e4
    ce1c:	00022204 	.word	0x00022204
    ce20:	00021510 	.word	0x00021510

0000ce24 <mp_raise_msg>:
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    ce24:	b580      	push	{r7, lr}
    ce26:	b082      	sub	sp, #8
    ce28:	af00      	add	r7, sp, #0
    ce2a:	6078      	str	r0, [r7, #4]
    ce2c:	6039      	str	r1, [r7, #0]
    if (msg == NULL) {
    ce2e:	683b      	ldr	r3, [r7, #0]
    ce30:	2b00      	cmp	r3, #0
    ce32:	d106      	bne.n	ce42 <mp_raise_msg+0x1e>
        nlr_raise(mp_obj_new_exception(exc_type));
    ce34:	6878      	ldr	r0, [r7, #4]
    ce36:	f002 fa7d 	bl	f334 <mp_obj_new_exception>
    ce3a:	4603      	mov	r3, r0
    ce3c:	4618      	mov	r0, r3
    ce3e:	f7f3 fa4f 	bl	2e0 <nlr_jump>
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    ce42:	6839      	ldr	r1, [r7, #0]
    ce44:	6878      	ldr	r0, [r7, #4]
    ce46:	f002 fab9 	bl	f3bc <mp_obj_new_exception_msg>
    ce4a:	4603      	mov	r3, r0
    ce4c:	4618      	mov	r0, r3
    ce4e:	f7f3 fa47 	bl	2e0 <nlr_jump>

0000ce52 <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    ce52:	b580      	push	{r7, lr}
    ce54:	b082      	sub	sp, #8
    ce56:	af00      	add	r7, sp, #0
    ce58:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_ValueError, msg);
    ce5a:	6879      	ldr	r1, [r7, #4]
    ce5c:	4801      	ldr	r0, [pc, #4]	; (ce64 <mp_raise_ValueError+0x12>)
    ce5e:	f7ff ffe1 	bl	ce24 <mp_raise_msg>
    ce62:	bf00      	nop
    ce64:	000223e4 	.word	0x000223e4

0000ce68 <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    ce68:	b580      	push	{r7, lr}
    ce6a:	b082      	sub	sp, #8
    ce6c:	af00      	add	r7, sp, #0
    ce6e:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_TypeError, msg);
    ce70:	6879      	ldr	r1, [r7, #4]
    ce72:	4801      	ldr	r0, [pc, #4]	; (ce78 <mp_raise_TypeError+0x10>)
    ce74:	f7ff ffd6 	bl	ce24 <mp_raise_msg>
    ce78:	000223a8 	.word	0x000223a8

0000ce7c <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    ce7c:	b580      	push	{r7, lr}
    ce7e:	b082      	sub	sp, #8
    ce80:	af00      	add	r7, sp, #0
    ce82:	6078      	str	r0, [r7, #4]
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    ce84:	687b      	ldr	r3, [r7, #4]
    ce86:	005b      	lsls	r3, r3, #1
    ce88:	f043 0301 	orr.w	r3, r3, #1
    ce8c:	4619      	mov	r1, r3
    ce8e:	4803      	ldr	r0, [pc, #12]	; (ce9c <mp_raise_OSError+0x20>)
    ce90:	f002 fa5e 	bl	f350 <mp_obj_new_exception_arg1>
    ce94:	4603      	mov	r3, r0
    ce96:	4618      	mov	r0, r3
    ce98:	f7f3 fa22 	bl	2e0 <nlr_jump>
    ce9c:	0002227c 	.word	0x0002227c

0000cea0 <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    cea0:	b580      	push	{r7, lr}
    cea2:	b082      	sub	sp, #8
    cea4:	af00      	add	r7, sp, #0
    cea6:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    cea8:	6879      	ldr	r1, [r7, #4]
    ceaa:	4801      	ldr	r0, [pc, #4]	; (ceb0 <mp_raise_NotImplementedError+0x10>)
    ceac:	f7ff ffba 	bl	ce24 <mp_raise_msg>
    ceb0:	000222f4 	.word	0x000222f4

0000ceb4 <mp_arg_check_num_sig>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num_sig(size_t n_args, size_t n_kw, uint32_t sig) {
    ceb4:	b580      	push	{r7, lr}
    ceb6:	b088      	sub	sp, #32
    ceb8:	af00      	add	r7, sp, #0
    ceba:	60f8      	str	r0, [r7, #12]
    cebc:	60b9      	str	r1, [r7, #8]
    cebe:	607a      	str	r2, [r7, #4]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    // The reverse of MP_OBJ_FUN_MAKE_SIG
    bool takes_kw = sig & 1;
    cec0:	687b      	ldr	r3, [r7, #4]
    cec2:	f003 0301 	and.w	r3, r3, #1
    cec6:	2b00      	cmp	r3, #0
    cec8:	bf14      	ite	ne
    ceca:	2301      	movne	r3, #1
    cecc:	2300      	moveq	r3, #0
    cece:	77fb      	strb	r3, [r7, #31]
    size_t n_args_min = sig >> 17;
    ced0:	687b      	ldr	r3, [r7, #4]
    ced2:	0c5b      	lsrs	r3, r3, #17
    ced4:	61bb      	str	r3, [r7, #24]
    size_t n_args_max = (sig >> 1) & 0xffff;
    ced6:	687b      	ldr	r3, [r7, #4]
    ced8:	085b      	lsrs	r3, r3, #1
    ceda:	b29b      	uxth	r3, r3
    cedc:	617b      	str	r3, [r7, #20]

    if (n_kw && !takes_kw) {
    cede:	68bb      	ldr	r3, [r7, #8]
    cee0:	2b00      	cmp	r3, #0
    cee2:	d007      	beq.n	cef4 <mp_arg_check_num_sig+0x40>
    cee4:	7ffb      	ldrb	r3, [r7, #31]
    cee6:	f083 0301 	eor.w	r3, r3, #1
    ceea:	b2db      	uxtb	r3, r3
    ceec:	2b00      	cmp	r3, #0
    ceee:	d001      	beq.n	cef4 <mp_arg_check_num_sig+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    cef0:	f000 f8e8 	bl	d0c4 <mp_arg_error_terse_mismatch>
        } else {
            mp_raise_TypeError("function doesn't take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    cef4:	69ba      	ldr	r2, [r7, #24]
    cef6:	697b      	ldr	r3, [r7, #20]
    cef8:	429a      	cmp	r2, r3
    cefa:	d105      	bne.n	cf08 <mp_arg_check_num_sig+0x54>
        if (n_args != n_args_min) {
    cefc:	68fa      	ldr	r2, [r7, #12]
    cefe:	69bb      	ldr	r3, [r7, #24]
    cf00:	429a      	cmp	r2, r3
    cf02:	d00d      	beq.n	cf20 <mp_arg_check_num_sig+0x6c>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cf04:	f000 f8de 	bl	d0c4 <mp_arg_error_terse_mismatch>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    cf08:	68fa      	ldr	r2, [r7, #12]
    cf0a:	69bb      	ldr	r3, [r7, #24]
    cf0c:	429a      	cmp	r2, r3
    cf0e:	d201      	bcs.n	cf14 <mp_arg_check_num_sig+0x60>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cf10:	f000 f8d8 	bl	d0c4 <mp_arg_error_terse_mismatch>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    cf14:	68fa      	ldr	r2, [r7, #12]
    cf16:	697b      	ldr	r3, [r7, #20]
    cf18:	429a      	cmp	r2, r3
    cf1a:	d901      	bls.n	cf20 <mp_arg_check_num_sig+0x6c>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    cf1c:	f000 f8d2 	bl	d0c4 <mp_arg_error_terse_mismatch>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    cf20:	bf00      	nop
    cf22:	3720      	adds	r7, #32
    cf24:	46bd      	mov	sp, r7
    cf26:	bd80      	pop	{r7, pc}

0000cf28 <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    cf28:	b590      	push	{r4, r7, lr}
    cf2a:	b08b      	sub	sp, #44	; 0x2c
    cf2c:	af00      	add	r7, sp, #0
    cf2e:	60f8      	str	r0, [r7, #12]
    cf30:	60b9      	str	r1, [r7, #8]
    cf32:	607a      	str	r2, [r7, #4]
    cf34:	603b      	str	r3, [r7, #0]
    size_t pos_found = 0, kws_found = 0;
    cf36:	2300      	movs	r3, #0
    cf38:	627b      	str	r3, [r7, #36]	; 0x24
    cf3a:	2300      	movs	r3, #0
    cf3c:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < n_allowed; i++) {
    cf3e:	2300      	movs	r3, #0
    cf40:	61fb      	str	r3, [r7, #28]
    cf42:	e07e      	b.n	d042 <mp_arg_parse_all+0x11a>
        mp_obj_t given_arg;
        if (i < n_pos) {
    cf44:	69fa      	ldr	r2, [r7, #28]
    cf46:	68fb      	ldr	r3, [r7, #12]
    cf48:	429a      	cmp	r2, r3
    cf4a:	d212      	bcs.n	cf72 <mp_arg_parse_all+0x4a>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    cf4c:	69fb      	ldr	r3, [r7, #28]
    cf4e:	00db      	lsls	r3, r3, #3
    cf50:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf52:	4413      	add	r3, r2
    cf54:	885b      	ldrh	r3, [r3, #2]
    cf56:	f403 7300 	and.w	r3, r3, #512	; 0x200
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d17b      	bne.n	d056 <mp_arg_parse_all+0x12e>
                goto extra_positional;
            }
            pos_found++;
    cf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf60:	3301      	adds	r3, #1
    cf62:	627b      	str	r3, [r7, #36]	; 0x24
            given_arg = pos[i];
    cf64:	69fb      	ldr	r3, [r7, #28]
    cf66:	009b      	lsls	r3, r3, #2
    cf68:	68ba      	ldr	r2, [r7, #8]
    cf6a:	4413      	add	r3, r2
    cf6c:	681b      	ldr	r3, [r3, #0]
    cf6e:	61bb      	str	r3, [r7, #24]
    cf70:	e02c      	b.n	cfcc <mp_arg_parse_all+0xa4>
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    cf72:	69fb      	ldr	r3, [r7, #28]
    cf74:	00db      	lsls	r3, r3, #3
    cf76:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf78:	4413      	add	r3, r2
    cf7a:	881b      	ldrh	r3, [r3, #0]
    cf7c:	009b      	lsls	r3, r3, #2
    cf7e:	f043 0302 	orr.w	r3, r3, #2
    cf82:	2200      	movs	r2, #0
    cf84:	4619      	mov	r1, r3
    cf86:	6878      	ldr	r0, [r7, #4]
    cf88:	f000 f9e8 	bl	d35c <mp_map_lookup>
    cf8c:	6178      	str	r0, [r7, #20]
            if (kw == NULL) {
    cf8e:	697b      	ldr	r3, [r7, #20]
    cf90:	2b00      	cmp	r3, #0
    cf92:	d115      	bne.n	cfc0 <mp_arg_parse_all+0x98>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    cf94:	69fb      	ldr	r3, [r7, #28]
    cf96:	00db      	lsls	r3, r3, #3
    cf98:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf9a:	4413      	add	r3, r2
    cf9c:	885b      	ldrh	r3, [r3, #2]
    cf9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    cfa2:	2b00      	cmp	r3, #0
    cfa4:	d001      	beq.n	cfaa <mp_arg_parse_all+0x82>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_arg_error_terse_mismatch();
    cfa6:	f000 f88d 	bl	d0c4 <mp_arg_error_terse_mismatch>
                    } else {
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "'%q' argument required", allowed[i].qst));
                    }
                }
                out_vals[i] = allowed[i].defval;
    cfaa:	69fb      	ldr	r3, [r7, #28]
    cfac:	009b      	lsls	r3, r3, #2
    cfae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfb0:	4413      	add	r3, r2
    cfb2:	69fa      	ldr	r2, [r7, #28]
    cfb4:	00d2      	lsls	r2, r2, #3
    cfb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    cfb8:	440a      	add	r2, r1
    cfba:	6852      	ldr	r2, [r2, #4]
    cfbc:	601a      	str	r2, [r3, #0]
                continue;
    cfbe:	e03d      	b.n	d03c <mp_arg_parse_all+0x114>
            } else {
                kws_found++;
    cfc0:	6a3b      	ldr	r3, [r7, #32]
    cfc2:	3301      	adds	r3, #1
    cfc4:	623b      	str	r3, [r7, #32]
                given_arg = kw->value;
    cfc6:	697b      	ldr	r3, [r7, #20]
    cfc8:	685b      	ldr	r3, [r3, #4]
    cfca:	61bb      	str	r3, [r7, #24]
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    cfcc:	69fb      	ldr	r3, [r7, #28]
    cfce:	00db      	lsls	r3, r3, #3
    cfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfd2:	4413      	add	r3, r2
    cfd4:	885b      	ldrh	r3, [r3, #2]
    cfd6:	b2db      	uxtb	r3, r3
    cfd8:	2b01      	cmp	r3, #1
    cfda:	d109      	bne.n	cff0 <mp_arg_parse_all+0xc8>
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    cfdc:	69fb      	ldr	r3, [r7, #28]
    cfde:	009b      	lsls	r3, r3, #2
    cfe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfe2:	18d4      	adds	r4, r2, r3
    cfe4:	69b8      	ldr	r0, [r7, #24]
    cfe6:	f000 fc3f 	bl	d868 <mp_obj_is_true>
    cfea:	4603      	mov	r3, r0
    cfec:	7023      	strb	r3, [r4, #0]
    cfee:	e025      	b.n	d03c <mp_arg_parse_all+0x114>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    cff0:	69fb      	ldr	r3, [r7, #28]
    cff2:	00db      	lsls	r3, r3, #3
    cff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cff6:	4413      	add	r3, r2
    cff8:	885b      	ldrh	r3, [r3, #2]
    cffa:	b2db      	uxtb	r3, r3
    cffc:	2b02      	cmp	r3, #2
    cffe:	d109      	bne.n	d014 <mp_arg_parse_all+0xec>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    d000:	69fb      	ldr	r3, [r7, #28]
    d002:	009b      	lsls	r3, r3, #2
    d004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d006:	18d4      	adds	r4, r2, r3
    d008:	69b8      	ldr	r0, [r7, #24]
    d00a:	f000 fd2d 	bl	da68 <mp_obj_get_int>
    d00e:	4603      	mov	r3, r0
    d010:	6023      	str	r3, [r4, #0]
    d012:	e013      	b.n	d03c <mp_arg_parse_all+0x114>
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    d014:	69fb      	ldr	r3, [r7, #28]
    d016:	00db      	lsls	r3, r3, #3
    d018:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d01a:	4413      	add	r3, r2
    d01c:	885b      	ldrh	r3, [r3, #2]
    d01e:	b2db      	uxtb	r3, r3
    d020:	2b03      	cmp	r3, #3
    d022:	d005      	beq.n	d030 <mp_arg_parse_all+0x108>
    d024:	4b14      	ldr	r3, [pc, #80]	; (d078 <mp_arg_parse_all+0x150>)
    d026:	4a15      	ldr	r2, [pc, #84]	; (d07c <mp_arg_parse_all+0x154>)
    d028:	2170      	movs	r1, #112	; 0x70
    d02a:	4815      	ldr	r0, [pc, #84]	; (d080 <mp_arg_parse_all+0x158>)
    d02c:	f00e fa28 	bl	1b480 <__assert_func>
            out_vals[i].u_obj = given_arg;
    d030:	69fb      	ldr	r3, [r7, #28]
    d032:	009b      	lsls	r3, r3, #2
    d034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d036:	4413      	add	r3, r2
    d038:	69ba      	ldr	r2, [r7, #24]
    d03a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n_allowed; i++) {
    d03c:	69fb      	ldr	r3, [r7, #28]
    d03e:	3301      	adds	r3, #1
    d040:	61fb      	str	r3, [r7, #28]
    d042:	69fa      	ldr	r2, [r7, #28]
    d044:	683b      	ldr	r3, [r7, #0]
    d046:	429a      	cmp	r2, r3
    d048:	f4ff af7c 	bcc.w	cf44 <mp_arg_parse_all+0x1c>
        }
    }
    if (pos_found < n_pos) {
    d04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d04e:	68fb      	ldr	r3, [r7, #12]
    d050:	429a      	cmp	r2, r3
    d052:	d203      	bcs.n	d05c <mp_arg_parse_all+0x134>
    d054:	e000      	b.n	d058 <mp_arg_parse_all+0x130>
                goto extra_positional;
    d056:	bf00      	nop
        extra_positional:
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d058:	f000 f834 	bl	d0c4 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    d05c:	687b      	ldr	r3, [r7, #4]
    d05e:	681b      	ldr	r3, [r3, #0]
    d060:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d064:	461a      	mov	r2, r3
    d066:	6a3b      	ldr	r3, [r7, #32]
    d068:	429a      	cmp	r2, r3
    d06a:	d901      	bls.n	d070 <mp_arg_parse_all+0x148>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d06c:	f000 f82a 	bl	d0c4 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    d070:	bf00      	nop
    d072:	372c      	adds	r7, #44	; 0x2c
    d074:	46bd      	mov	sp, r7
    d076:	bd90      	pop	{r4, r7, pc}
    d078:	0002159c 	.word	0x0002159c
    d07c:	00021600 	.word	0x00021600
    d080:	000215d0 	.word	0x000215d0

0000d084 <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d084:	b580      	push	{r7, lr}
    d086:	b08a      	sub	sp, #40	; 0x28
    d088:	af02      	add	r7, sp, #8
    d08a:	60f8      	str	r0, [r7, #12]
    d08c:	60b9      	str	r1, [r7, #8]
    d08e:	607a      	str	r2, [r7, #4]
    d090:	603b      	str	r3, [r7, #0]
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    d092:	68fb      	ldr	r3, [r7, #12]
    d094:	009b      	lsls	r3, r3, #2
    d096:	687a      	ldr	r2, [r7, #4]
    d098:	441a      	add	r2, r3
    d09a:	f107 0314 	add.w	r3, r7, #20
    d09e:	68b9      	ldr	r1, [r7, #8]
    d0a0:	4618      	mov	r0, r3
    d0a2:	f000 f896 	bl	d1d2 <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    d0a6:	f107 0214 	add.w	r2, r7, #20
    d0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0ac:	9301      	str	r3, [sp, #4]
    d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d0b0:	9300      	str	r3, [sp, #0]
    d0b2:	683b      	ldr	r3, [r7, #0]
    d0b4:	6879      	ldr	r1, [r7, #4]
    d0b6:	68f8      	ldr	r0, [r7, #12]
    d0b8:	f7ff ff36 	bl	cf28 <mp_arg_parse_all>
}
    d0bc:	bf00      	nop
    d0be:	3720      	adds	r7, #32
    d0c0:	46bd      	mov	sp, r7
    d0c2:	bd80      	pop	{r7, pc}

0000d0c4 <mp_arg_error_terse_mismatch>:

NORETURN void mp_arg_error_terse_mismatch(void) {
    d0c4:	b580      	push	{r7, lr}
    d0c6:	af00      	add	r7, sp, #0
    mp_raise_TypeError("argument num/types mismatch");
    d0c8:	4801      	ldr	r0, [pc, #4]	; (d0d0 <mp_arg_error_terse_mismatch+0xc>)
    d0ca:	f7ff fecd 	bl	ce68 <mp_raise_TypeError>
    d0ce:	bf00      	nop
    d0d0:	000215e4 	.word	0x000215e4

0000d0d4 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d0d4:	b480      	push	{r7}
    d0d6:	b083      	sub	sp, #12
    d0d8:	af00      	add	r7, sp, #0
    d0da:	6078      	str	r0, [r7, #4]
    d0dc:	687b      	ldr	r3, [r7, #4]
    d0de:	f003 0303 	and.w	r3, r3, #3
    d0e2:	2b02      	cmp	r3, #2
    d0e4:	bf0c      	ite	eq
    d0e6:	2301      	moveq	r3, #1
    d0e8:	2300      	movne	r3, #0
    d0ea:	b2db      	uxtb	r3, r3
    d0ec:	4618      	mov	r0, r3
    d0ee:	370c      	adds	r7, #12
    d0f0:	46bd      	mov	sp, r7
    d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0f6:	4770      	bx	lr

0000d0f8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d0f8:	b480      	push	{r7}
    d0fa:	b083      	sub	sp, #12
    d0fc:	af00      	add	r7, sp, #0
    d0fe:	6078      	str	r0, [r7, #4]
    d100:	687b      	ldr	r3, [r7, #4]
    d102:	f003 0303 	and.w	r3, r3, #3
    d106:	2b00      	cmp	r3, #0
    d108:	bf0c      	ite	eq
    d10a:	2301      	moveq	r3, #1
    d10c:	2300      	movne	r3, #0
    d10e:	b2db      	uxtb	r3, r3
    d110:	4618      	mov	r0, r3
    d112:	370c      	adds	r7, #12
    d114:	46bd      	mov	sp, r7
    d116:	f85d 7b04 	ldr.w	r7, [sp], #4
    d11a:	4770      	bx	lr

0000d11c <get_hash_alloc_greater_or_equal_to>:
    17, 23, 29, 37, 47, 59, 73, // *1.25
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    d11c:	b480      	push	{r7}
    d11e:	b085      	sub	sp, #20
    d120:	af00      	add	r7, sp, #0
    d122:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d124:	2300      	movs	r3, #0
    d126:	60fb      	str	r3, [r7, #12]
    d128:	e00f      	b.n	d14a <get_hash_alloc_greater_or_equal_to+0x2e>
        if (hash_allocation_sizes[i] >= x) {
    d12a:	4a0f      	ldr	r2, [pc, #60]	; (d168 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d12c:	68fb      	ldr	r3, [r7, #12]
    d12e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d132:	461a      	mov	r2, r3
    d134:	687b      	ldr	r3, [r7, #4]
    d136:	429a      	cmp	r2, r3
    d138:	d304      	bcc.n	d144 <get_hash_alloc_greater_or_equal_to+0x28>
            return hash_allocation_sizes[i];
    d13a:	4a0b      	ldr	r2, [pc, #44]	; (d168 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d13c:	68fb      	ldr	r3, [r7, #12]
    d13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d142:	e00b      	b.n	d15c <get_hash_alloc_greater_or_equal_to+0x40>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d144:	68fb      	ldr	r3, [r7, #12]
    d146:	3301      	adds	r3, #1
    d148:	60fb      	str	r3, [r7, #12]
    d14a:	68fb      	ldr	r3, [r7, #12]
    d14c:	2b21      	cmp	r3, #33	; 0x21
    d14e:	d9ec      	bls.n	d12a <get_hash_alloc_greater_or_equal_to+0xe>
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    d150:	687b      	ldr	r3, [r7, #4]
    d152:	085a      	lsrs	r2, r3, #1
    d154:	687b      	ldr	r3, [r7, #4]
    d156:	4413      	add	r3, r2
    d158:	f043 0301 	orr.w	r3, r3, #1
}
    d15c:	4618      	mov	r0, r3
    d15e:	3714      	adds	r7, #20
    d160:	46bd      	mov	sp, r7
    d162:	f85d 7b04 	ldr.w	r7, [sp], #4
    d166:	4770      	bx	lr
    d168:	00021620 	.word	0x00021620

0000d16c <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    d16c:	b580      	push	{r7, lr}
    d16e:	b082      	sub	sp, #8
    d170:	af00      	add	r7, sp, #0
    d172:	6078      	str	r0, [r7, #4]
    d174:	6039      	str	r1, [r7, #0]
    if (n == 0) {
    d176:	683b      	ldr	r3, [r7, #0]
    d178:	2b00      	cmp	r3, #0
    d17a:	d106      	bne.n	d18a <mp_map_init+0x1e>
        map->alloc = 0;
    d17c:	687b      	ldr	r3, [r7, #4]
    d17e:	2200      	movs	r2, #0
    d180:	605a      	str	r2, [r3, #4]
        map->table = NULL;
    d182:	687b      	ldr	r3, [r7, #4]
    d184:	2200      	movs	r2, #0
    d186:	609a      	str	r2, [r3, #8]
    d188:	e00b      	b.n	d1a2 <mp_map_init+0x36>
    } else {
        map->alloc = n;
    d18a:	687b      	ldr	r3, [r7, #4]
    d18c:	683a      	ldr	r2, [r7, #0]
    d18e:	605a      	str	r2, [r3, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    d190:	687b      	ldr	r3, [r7, #4]
    d192:	685b      	ldr	r3, [r3, #4]
    d194:	00db      	lsls	r3, r3, #3
    d196:	4618      	mov	r0, r3
    d198:	f7f3 f8e5 	bl	366 <m_malloc0>
    d19c:	4602      	mov	r2, r0
    d19e:	687b      	ldr	r3, [r7, #4]
    d1a0:	609a      	str	r2, [r3, #8]
    }
    map->used = 0;
    d1a2:	687a      	ldr	r2, [r7, #4]
    d1a4:	6813      	ldr	r3, [r2, #0]
    d1a6:	f36f 03df 	bfc	r3, #3, #29
    d1aa:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d1ac:	687a      	ldr	r2, [r7, #4]
    d1ae:	7813      	ldrb	r3, [r2, #0]
    d1b0:	f043 0301 	orr.w	r3, r3, #1
    d1b4:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d1b6:	687a      	ldr	r2, [r7, #4]
    d1b8:	7813      	ldrb	r3, [r2, #0]
    d1ba:	f36f 0341 	bfc	r3, #1, #1
    d1be:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 0;
    d1c0:	687a      	ldr	r2, [r7, #4]
    d1c2:	7813      	ldrb	r3, [r2, #0]
    d1c4:	f36f 0382 	bfc	r3, #2, #1
    d1c8:	7013      	strb	r3, [r2, #0]
}
    d1ca:	bf00      	nop
    d1cc:	3708      	adds	r7, #8
    d1ce:	46bd      	mov	sp, r7
    d1d0:	bd80      	pop	{r7, pc}

0000d1d2 <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    d1d2:	b480      	push	{r7}
    d1d4:	b085      	sub	sp, #20
    d1d6:	af00      	add	r7, sp, #0
    d1d8:	60f8      	str	r0, [r7, #12]
    d1da:	60b9      	str	r1, [r7, #8]
    d1dc:	607a      	str	r2, [r7, #4]
    map->alloc = n;
    d1de:	68fb      	ldr	r3, [r7, #12]
    d1e0:	68ba      	ldr	r2, [r7, #8]
    d1e2:	605a      	str	r2, [r3, #4]
    map->used = n;
    d1e4:	68bb      	ldr	r3, [r7, #8]
    d1e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d1ea:	68fa      	ldr	r2, [r7, #12]
    d1ec:	6813      	ldr	r3, [r2, #0]
    d1ee:	f361 03df 	bfi	r3, r1, #3, #29
    d1f2:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d1f4:	68fa      	ldr	r2, [r7, #12]
    d1f6:	7813      	ldrb	r3, [r2, #0]
    d1f8:	f043 0301 	orr.w	r3, r3, #1
    d1fc:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 1;
    d1fe:	68fa      	ldr	r2, [r7, #12]
    d200:	7813      	ldrb	r3, [r2, #0]
    d202:	f043 0302 	orr.w	r3, r3, #2
    d206:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 1;
    d208:	68fa      	ldr	r2, [r7, #12]
    d20a:	7813      	ldrb	r3, [r2, #0]
    d20c:	f043 0304 	orr.w	r3, r3, #4
    d210:	7013      	strb	r3, [r2, #0]
    map->table = (mp_map_elem_t*)table;
    d212:	68fb      	ldr	r3, [r7, #12]
    d214:	687a      	ldr	r2, [r7, #4]
    d216:	609a      	str	r2, [r3, #8]
}
    d218:	bf00      	nop
    d21a:	3714      	adds	r7, #20
    d21c:	46bd      	mov	sp, r7
    d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d222:	4770      	bx	lr

0000d224 <mp_map_deinit>:

// Differentiate from mp_map_clear() - semantics is different
void mp_map_deinit(mp_map_t *map) {
    d224:	b580      	push	{r7, lr}
    d226:	b082      	sub	sp, #8
    d228:	af00      	add	r7, sp, #0
    d22a:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d22c:	687b      	ldr	r3, [r7, #4]
    d22e:	781b      	ldrb	r3, [r3, #0]
    d230:	f003 0302 	and.w	r3, r3, #2
    d234:	b2db      	uxtb	r3, r3
    d236:	2b00      	cmp	r3, #0
    d238:	d104      	bne.n	d244 <mp_map_deinit+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d23a:	687b      	ldr	r3, [r7, #4]
    d23c:	689b      	ldr	r3, [r3, #8]
    d23e:	4618      	mov	r0, r3
    d240:	f7f3 f8ca 	bl	3d8 <m_free>
    }
    map->used = map->alloc = 0;
    d244:	687b      	ldr	r3, [r7, #4]
    d246:	2200      	movs	r2, #0
    d248:	605a      	str	r2, [r3, #4]
    d24a:	687a      	ldr	r2, [r7, #4]
    d24c:	6813      	ldr	r3, [r2, #0]
    d24e:	f36f 03df 	bfc	r3, #3, #29
    d252:	6013      	str	r3, [r2, #0]
}
    d254:	bf00      	nop
    d256:	3708      	adds	r7, #8
    d258:	46bd      	mov	sp, r7
    d25a:	bd80      	pop	{r7, pc}

0000d25c <mp_map_clear>:

void mp_map_clear(mp_map_t *map) {
    d25c:	b580      	push	{r7, lr}
    d25e:	b082      	sub	sp, #8
    d260:	af00      	add	r7, sp, #0
    d262:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d264:	687b      	ldr	r3, [r7, #4]
    d266:	781b      	ldrb	r3, [r3, #0]
    d268:	f003 0302 	and.w	r3, r3, #2
    d26c:	b2db      	uxtb	r3, r3
    d26e:	2b00      	cmp	r3, #0
    d270:	d104      	bne.n	d27c <mp_map_clear+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d272:	687b      	ldr	r3, [r7, #4]
    d274:	689b      	ldr	r3, [r3, #8]
    d276:	4618      	mov	r0, r3
    d278:	f7f3 f8ae 	bl	3d8 <m_free>
    }
    map->alloc = 0;
    d27c:	687b      	ldr	r3, [r7, #4]
    d27e:	2200      	movs	r2, #0
    d280:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d282:	687a      	ldr	r2, [r7, #4]
    d284:	6813      	ldr	r3, [r2, #0]
    d286:	f36f 03df 	bfc	r3, #3, #29
    d28a:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d28c:	687a      	ldr	r2, [r7, #4]
    d28e:	7813      	ldrb	r3, [r2, #0]
    d290:	f043 0301 	orr.w	r3, r3, #1
    d294:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d296:	687a      	ldr	r2, [r7, #4]
    d298:	7813      	ldrb	r3, [r2, #0]
    d29a:	f36f 0341 	bfc	r3, #1, #1
    d29e:	7013      	strb	r3, [r2, #0]
    map->table = NULL;
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	2200      	movs	r2, #0
    d2a4:	609a      	str	r2, [r3, #8]
}
    d2a6:	bf00      	nop
    d2a8:	3708      	adds	r7, #8
    d2aa:	46bd      	mov	sp, r7
    d2ac:	bd80      	pop	{r7, pc}

0000d2ae <mp_map_rehash>:

STATIC void mp_map_rehash(mp_map_t *map) {
    d2ae:	b580      	push	{r7, lr}
    d2b0:	b088      	sub	sp, #32
    d2b2:	af00      	add	r7, sp, #0
    d2b4:	6078      	str	r0, [r7, #4]
    size_t old_alloc = map->alloc;
    d2b6:	687b      	ldr	r3, [r7, #4]
    d2b8:	685b      	ldr	r3, [r3, #4]
    d2ba:	61bb      	str	r3, [r7, #24]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    d2bc:	687b      	ldr	r3, [r7, #4]
    d2be:	685b      	ldr	r3, [r3, #4]
    d2c0:	3301      	adds	r3, #1
    d2c2:	4618      	mov	r0, r3
    d2c4:	f7ff ff2a 	bl	d11c <get_hash_alloc_greater_or_equal_to>
    d2c8:	6178      	str	r0, [r7, #20]
    DEBUG_printf("mp_map_rehash(%p): " UINT_FMT " -> " UINT_FMT "\n", map, old_alloc, new_alloc);
    mp_map_elem_t *old_table = map->table;
    d2ca:	687b      	ldr	r3, [r7, #4]
    d2cc:	689b      	ldr	r3, [r3, #8]
    d2ce:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    d2d0:	697b      	ldr	r3, [r7, #20]
    d2d2:	00db      	lsls	r3, r3, #3
    d2d4:	4618      	mov	r0, r3
    d2d6:	f7f3 f846 	bl	366 <m_malloc0>
    d2da:	60f8      	str	r0, [r7, #12]
    // If we reach this point, table resizing succeeded, now we can edit the old map.
    map->alloc = new_alloc;
    d2dc:	687b      	ldr	r3, [r7, #4]
    d2de:	697a      	ldr	r2, [r7, #20]
    d2e0:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d2e2:	687a      	ldr	r2, [r7, #4]
    d2e4:	6813      	ldr	r3, [r2, #0]
    d2e6:	f36f 03df 	bfc	r3, #3, #29
    d2ea:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d2ec:	687a      	ldr	r2, [r7, #4]
    d2ee:	7813      	ldrb	r3, [r2, #0]
    d2f0:	f043 0301 	orr.w	r3, r3, #1
    d2f4:	7013      	strb	r3, [r2, #0]
    map->table = new_table;
    d2f6:	687b      	ldr	r3, [r7, #4]
    d2f8:	68fa      	ldr	r2, [r7, #12]
    d2fa:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    d2fc:	2300      	movs	r3, #0
    d2fe:	61fb      	str	r3, [r7, #28]
    d300:	e021      	b.n	d346 <mp_map_rehash+0x98>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    d302:	69fb      	ldr	r3, [r7, #28]
    d304:	00db      	lsls	r3, r3, #3
    d306:	693a      	ldr	r2, [r7, #16]
    d308:	4413      	add	r3, r2
    d30a:	681b      	ldr	r3, [r3, #0]
    d30c:	2b00      	cmp	r3, #0
    d30e:	d017      	beq.n	d340 <mp_map_rehash+0x92>
    d310:	69fb      	ldr	r3, [r7, #28]
    d312:	00db      	lsls	r3, r3, #3
    d314:	693a      	ldr	r2, [r7, #16]
    d316:	4413      	add	r3, r2
    d318:	681b      	ldr	r3, [r3, #0]
    d31a:	2b08      	cmp	r3, #8
    d31c:	d010      	beq.n	d340 <mp_map_rehash+0x92>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    d31e:	69fb      	ldr	r3, [r7, #28]
    d320:	00db      	lsls	r3, r3, #3
    d322:	693a      	ldr	r2, [r7, #16]
    d324:	4413      	add	r3, r2
    d326:	681b      	ldr	r3, [r3, #0]
    d328:	2201      	movs	r2, #1
    d32a:	4619      	mov	r1, r3
    d32c:	6878      	ldr	r0, [r7, #4]
    d32e:	f000 f815 	bl	d35c <mp_map_lookup>
    d332:	4601      	mov	r1, r0
    d334:	69fb      	ldr	r3, [r7, #28]
    d336:	00db      	lsls	r3, r3, #3
    d338:	693a      	ldr	r2, [r7, #16]
    d33a:	4413      	add	r3, r2
    d33c:	685b      	ldr	r3, [r3, #4]
    d33e:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < old_alloc; i++) {
    d340:	69fb      	ldr	r3, [r7, #28]
    d342:	3301      	adds	r3, #1
    d344:	61fb      	str	r3, [r7, #28]
    d346:	69fa      	ldr	r2, [r7, #28]
    d348:	69bb      	ldr	r3, [r7, #24]
    d34a:	429a      	cmp	r2, r3
    d34c:	d3d9      	bcc.n	d302 <mp_map_rehash+0x54>
        }
    }
    m_del(mp_map_elem_t, old_table, old_alloc);
    d34e:	6938      	ldr	r0, [r7, #16]
    d350:	f7f3 f842 	bl	3d8 <m_free>
}
    d354:	bf00      	nop
    d356:	3720      	adds	r7, #32
    d358:	46bd      	mov	sp, r7
    d35a:	bd80      	pop	{r7, pc}

0000d35c <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    d35c:	b580      	push	{r7, lr}
    d35e:	b08c      	sub	sp, #48	; 0x30
    d360:	af00      	add	r7, sp, #0
    d362:	60f8      	str	r0, [r7, #12]
    d364:	60b9      	str	r1, [r7, #8]
    d366:	607a      	str	r2, [r7, #4]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    d368:	68fb      	ldr	r3, [r7, #12]
    d36a:	781b      	ldrb	r3, [r3, #0]
    d36c:	f003 0302 	and.w	r3, r3, #2
    d370:	b2db      	uxtb	r3, r3
    d372:	2b00      	cmp	r3, #0
    d374:	d008      	beq.n	d388 <mp_map_lookup+0x2c>
    d376:	687b      	ldr	r3, [r7, #4]
    d378:	2b00      	cmp	r3, #0
    d37a:	d005      	beq.n	d388 <mp_map_lookup+0x2c>
    d37c:	4ba3      	ldr	r3, [pc, #652]	; (d60c <mp_map_lookup+0x2b0>)
    d37e:	4aa4      	ldr	r2, [pc, #656]	; (d610 <mp_map_lookup+0x2b4>)
    d380:	2194      	movs	r1, #148	; 0x94
    d382:	48a4      	ldr	r0, [pc, #656]	; (d614 <mp_map_lookup+0x2b8>)
    d384:	f00e f87c 	bl	1b480 <__assert_func>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    d388:	68fb      	ldr	r3, [r7, #12]
    d38a:	781b      	ldrb	r3, [r3, #0]
    d38c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    d390:	b2db      	uxtb	r3, r3
    d392:	2b00      	cmp	r3, #0
    d394:	bf14      	ite	ne
    d396:	2301      	movne	r3, #1
    d398:	2300      	moveq	r3, #0
    d39a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (compare_only_ptrs) {
    d39e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	d019      	beq.n	d3da <mp_map_lookup+0x7e>
        if (MP_OBJ_IS_QSTR(index)) {
    d3a6:	68b8      	ldr	r0, [r7, #8]
    d3a8:	f7ff fe94 	bl	d0d4 <MP_OBJ_IS_QSTR>
    d3ac:	4603      	mov	r3, r0
    d3ae:	2b00      	cmp	r3, #0
    d3b0:	d113      	bne.n	d3da <mp_map_lookup+0x7e>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    d3b2:	68b8      	ldr	r0, [r7, #8]
    d3b4:	f7ff fea0 	bl	d0f8 <MP_OBJ_IS_OBJ>
    d3b8:	4603      	mov	r3, r0
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	d008      	beq.n	d3d0 <mp_map_lookup+0x74>
    d3be:	68bb      	ldr	r3, [r7, #8]
    d3c0:	681b      	ldr	r3, [r3, #0]
    d3c2:	4a95      	ldr	r2, [pc, #596]	; (d618 <mp_map_lookup+0x2bc>)
    d3c4:	4293      	cmp	r3, r2
    d3c6:	d103      	bne.n	d3d0 <mp_map_lookup+0x74>
            // Index is a non-interned string.
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
    d3c8:	2300      	movs	r3, #0
    d3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d3ce:	e004      	b.n	d3da <mp_map_lookup+0x7e>
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d3d0:	687b      	ldr	r3, [r7, #4]
    d3d2:	2b01      	cmp	r3, #1
    d3d4:	d001      	beq.n	d3da <mp_map_lookup+0x7e>
            // If we are not adding, then we can return straight away a failed
            // lookup because we know that the index will never be found.
            return NULL;
    d3d6:	2300      	movs	r3, #0
    d3d8:	e130      	b.n	d63c <mp_map_lookup+0x2e0>
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    d3da:	68fb      	ldr	r3, [r7, #12]
    d3dc:	781b      	ldrb	r3, [r3, #0]
    d3de:	f003 0304 	and.w	r3, r3, #4
    d3e2:	b2db      	uxtb	r3, r3
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	d02c      	beq.n	d442 <mp_map_lookup+0xe6>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d3e8:	68fb      	ldr	r3, [r7, #12]
    d3ea:	689b      	ldr	r3, [r3, #8]
    d3ec:	62bb      	str	r3, [r7, #40]	; 0x28
    d3ee:	68fb      	ldr	r3, [r7, #12]
    d3f0:	689a      	ldr	r2, [r3, #8]
    d3f2:	68fb      	ldr	r3, [r7, #12]
    d3f4:	681b      	ldr	r3, [r3, #0]
    d3f6:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d3fa:	00db      	lsls	r3, r3, #3
    d3fc:	4413      	add	r3, r2
    d3fe:	617b      	str	r3, [r7, #20]
    d400:	e019      	b.n	d436 <mp_map_lookup+0xda>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d404:	681a      	ldr	r2, [r3, #0]
    d406:	68bb      	ldr	r3, [r7, #8]
    d408:	429a      	cmp	r2, r3
    d40a:	d00f      	beq.n	d42c <mp_map_lookup+0xd0>
    d40c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d410:	f083 0301 	eor.w	r3, r3, #1
    d414:	b2db      	uxtb	r3, r3
    d416:	2b00      	cmp	r3, #0
    d418:	d00a      	beq.n	d430 <mp_map_lookup+0xd4>
    d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d41c:	681b      	ldr	r3, [r3, #0]
    d41e:	68b9      	ldr	r1, [r7, #8]
    d420:	4618      	mov	r0, r3
    d422:	f000 fa97 	bl	d954 <mp_obj_equal>
    d426:	4603      	mov	r3, r0
    d428:	2b00      	cmp	r3, #0
    d42a:	d001      	beq.n	d430 <mp_map_lookup+0xd4>
                    elem = &map->table[map->used];
                    elem->key = MP_OBJ_NULL;
                    elem->value = value;
                }
                #endif
                return elem;
    d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d42e:	e105      	b.n	d63c <mp_map_lookup+0x2e0>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d432:	3308      	adds	r3, #8
    d434:	62bb      	str	r3, [r7, #40]	; 0x28
    d436:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d438:	697b      	ldr	r3, [r7, #20]
    d43a:	429a      	cmp	r2, r3
    d43c:	d3e1      	bcc.n	d402 <mp_map_lookup+0xa6>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    d43e:	2300      	movs	r3, #0
    d440:	e0fc      	b.n	d63c <mp_map_lookup+0x2e0>
        #endif
    }

    // map is a hash table (not an ordered array), so do a hash lookup

    if (map->alloc == 0) {
    d442:	68fb      	ldr	r3, [r7, #12]
    d444:	685b      	ldr	r3, [r3, #4]
    d446:	2b00      	cmp	r3, #0
    d448:	d108      	bne.n	d45c <mp_map_lookup+0x100>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d44a:	687b      	ldr	r3, [r7, #4]
    d44c:	2b01      	cmp	r3, #1
    d44e:	d103      	bne.n	d458 <mp_map_lookup+0xfc>
            mp_map_rehash(map);
    d450:	68f8      	ldr	r0, [r7, #12]
    d452:	f7ff ff2c 	bl	d2ae <mp_map_rehash>
    d456:	e001      	b.n	d45c <mp_map_lookup+0x100>
        } else {
            return NULL;
    d458:	2300      	movs	r3, #0
    d45a:	e0ef      	b.n	d63c <mp_map_lookup+0x2e0>
        }
    }

    // get hash of index, with fast path for common case of qstr
    mp_uint_t hash;
    if (MP_OBJ_IS_QSTR(index)) {
    d45c:	68b8      	ldr	r0, [r7, #8]
    d45e:	f7ff fe39 	bl	d0d4 <MP_OBJ_IS_QSTR>
    d462:	4603      	mov	r3, r0
    d464:	2b00      	cmp	r3, #0
    d466:	d006      	beq.n	d476 <mp_map_lookup+0x11a>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    d468:	68bb      	ldr	r3, [r7, #8]
    d46a:	089b      	lsrs	r3, r3, #2
    d46c:	4618      	mov	r0, r3
    d46e:	f7f3 fecf 	bl	1210 <qstr_hash>
    d472:	6278      	str	r0, [r7, #36]	; 0x24
    d474:	e006      	b.n	d484 <mp_map_lookup+0x128>
    } else {
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    d476:	68b9      	ldr	r1, [r7, #8]
    d478:	2006      	movs	r0, #6
    d47a:	f7fe f8c1 	bl	b600 <mp_unary_op>
    d47e:	4603      	mov	r3, r0
    d480:	105b      	asrs	r3, r3, #1
    d482:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_t pos = hash % map->alloc;
    d484:	68fb      	ldr	r3, [r7, #12]
    d486:	685a      	ldr	r2, [r3, #4]
    d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d48a:	fbb3 f1f2 	udiv	r1, r3, r2
    d48e:	fb02 f201 	mul.w	r2, r2, r1
    d492:	1a9b      	subs	r3, r3, r2
    d494:	623b      	str	r3, [r7, #32]
    size_t start_pos = pos;
    d496:	6a3b      	ldr	r3, [r7, #32]
    d498:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *avail_slot = NULL;
    d49a:	2300      	movs	r3, #0
    d49c:	61bb      	str	r3, [r7, #24]
    for (;;) {
        mp_map_elem_t *slot = &map->table[pos];
    d49e:	68fb      	ldr	r3, [r7, #12]
    d4a0:	689a      	ldr	r2, [r3, #8]
    d4a2:	6a3b      	ldr	r3, [r7, #32]
    d4a4:	00db      	lsls	r3, r3, #3
    d4a6:	4413      	add	r3, r2
    d4a8:	613b      	str	r3, [r7, #16]
        if (slot->key == MP_OBJ_NULL) {
    d4aa:	693b      	ldr	r3, [r7, #16]
    d4ac:	681b      	ldr	r3, [r3, #0]
    d4ae:	2b00      	cmp	r3, #0
    d4b0:	d12b      	bne.n	d50a <mp_map_lookup+0x1ae>
            // found NULL slot, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d4b2:	687b      	ldr	r3, [r7, #4]
    d4b4:	2b01      	cmp	r3, #1
    d4b6:	d126      	bne.n	d506 <mp_map_lookup+0x1aa>
                map->used += 1;
    d4b8:	68fb      	ldr	r3, [r7, #12]
    d4ba:	681b      	ldr	r3, [r3, #0]
    d4bc:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d4c0:	3301      	adds	r3, #1
    d4c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d4c6:	68fa      	ldr	r2, [r7, #12]
    d4c8:	6813      	ldr	r3, [r2, #0]
    d4ca:	f361 03df 	bfi	r3, r1, #3, #29
    d4ce:	6013      	str	r3, [r2, #0]
                if (avail_slot == NULL) {
    d4d0:	69bb      	ldr	r3, [r7, #24]
    d4d2:	2b00      	cmp	r3, #0
    d4d4:	d101      	bne.n	d4da <mp_map_lookup+0x17e>
                    avail_slot = slot;
    d4d6:	693b      	ldr	r3, [r7, #16]
    d4d8:	61bb      	str	r3, [r7, #24]
                }
                avail_slot->key = index;
    d4da:	69bb      	ldr	r3, [r7, #24]
    d4dc:	68ba      	ldr	r2, [r7, #8]
    d4de:	601a      	str	r2, [r3, #0]
                avail_slot->value = MP_OBJ_NULL;
    d4e0:	69bb      	ldr	r3, [r7, #24]
    d4e2:	2200      	movs	r2, #0
    d4e4:	605a      	str	r2, [r3, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    d4e6:	68b8      	ldr	r0, [r7, #8]
    d4e8:	f7ff fdf4 	bl	d0d4 <MP_OBJ_IS_QSTR>
    d4ec:	4603      	mov	r3, r0
    d4ee:	f083 0301 	eor.w	r3, r3, #1
    d4f2:	b2db      	uxtb	r3, r3
    d4f4:	2b00      	cmp	r3, #0
    d4f6:	d004      	beq.n	d502 <mp_map_lookup+0x1a6>
                    map->all_keys_are_qstrs = 0;
    d4f8:	68fa      	ldr	r2, [r7, #12]
    d4fa:	7813      	ldrb	r3, [r2, #0]
    d4fc:	f36f 0300 	bfc	r3, #0, #1
    d500:	7013      	strb	r3, [r2, #0]
                }
                return avail_slot;
    d502:	69bb      	ldr	r3, [r7, #24]
    d504:	e09a      	b.n	d63c <mp_map_lookup+0x2e0>
            } else {
                return NULL;
    d506:	2300      	movs	r3, #0
    d508:	e098      	b.n	d63c <mp_map_lookup+0x2e0>
            }
        } else if (slot->key == MP_OBJ_SENTINEL) {
    d50a:	693b      	ldr	r3, [r7, #16]
    d50c:	681b      	ldr	r3, [r3, #0]
    d50e:	2b08      	cmp	r3, #8
    d510:	d105      	bne.n	d51e <mp_map_lookup+0x1c2>
            // found deleted slot, remember for later
            if (avail_slot == NULL) {
    d512:	69bb      	ldr	r3, [r7, #24]
    d514:	2b00      	cmp	r3, #0
    d516:	d141      	bne.n	d59c <mp_map_lookup+0x240>
                avail_slot = slot;
    d518:	693b      	ldr	r3, [r7, #16]
    d51a:	61bb      	str	r3, [r7, #24]
    d51c:	e03e      	b.n	d59c <mp_map_lookup+0x240>
            }
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    d51e:	693b      	ldr	r3, [r7, #16]
    d520:	681a      	ldr	r2, [r3, #0]
    d522:	68bb      	ldr	r3, [r7, #8]
    d524:	429a      	cmp	r2, r3
    d526:	d00f      	beq.n	d548 <mp_map_lookup+0x1ec>
    d528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d52c:	f083 0301 	eor.w	r3, r3, #1
    d530:	b2db      	uxtb	r3, r3
    d532:	2b00      	cmp	r3, #0
    d534:	d032      	beq.n	d59c <mp_map_lookup+0x240>
    d536:	693b      	ldr	r3, [r7, #16]
    d538:	681b      	ldr	r3, [r3, #0]
    d53a:	68b9      	ldr	r1, [r7, #8]
    d53c:	4618      	mov	r0, r3
    d53e:	f000 fa09 	bl	d954 <mp_obj_equal>
    d542:	4603      	mov	r3, r0
    d544:	2b00      	cmp	r3, #0
    d546:	d029      	beq.n	d59c <mp_map_lookup+0x240>
            // found index
            // Note: CPython does not replace the index; try x={True:'true'};x[1]='one';x
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    d548:	687b      	ldr	r3, [r7, #4]
    d54a:	2b02      	cmp	r3, #2
    d54c:	d124      	bne.n	d598 <mp_map_lookup+0x23c>
                // delete element in this slot
                map->used--;
    d54e:	68fb      	ldr	r3, [r7, #12]
    d550:	681b      	ldr	r3, [r3, #0]
    d552:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d556:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d55a:	3b01      	subs	r3, #1
    d55c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    d560:	68f9      	ldr	r1, [r7, #12]
    d562:	680a      	ldr	r2, [r1, #0]
    d564:	f363 02df 	bfi	r2, r3, #3, #29
    d568:	600a      	str	r2, [r1, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    d56a:	68fb      	ldr	r3, [r7, #12]
    d56c:	6899      	ldr	r1, [r3, #8]
    d56e:	6a3b      	ldr	r3, [r7, #32]
    d570:	3301      	adds	r3, #1
    d572:	68fa      	ldr	r2, [r7, #12]
    d574:	6852      	ldr	r2, [r2, #4]
    d576:	fbb3 f0f2 	udiv	r0, r3, r2
    d57a:	fb02 f200 	mul.w	r2, r2, r0
    d57e:	1a9b      	subs	r3, r3, r2
    d580:	00db      	lsls	r3, r3, #3
    d582:	440b      	add	r3, r1
    d584:	681b      	ldr	r3, [r3, #0]
    d586:	2b00      	cmp	r3, #0
    d588:	d103      	bne.n	d592 <mp_map_lookup+0x236>
                    // optimisation if next slot is empty
                    slot->key = MP_OBJ_NULL;
    d58a:	693b      	ldr	r3, [r7, #16]
    d58c:	2200      	movs	r2, #0
    d58e:	601a      	str	r2, [r3, #0]
    d590:	e002      	b.n	d598 <mp_map_lookup+0x23c>
                } else {
                    slot->key = MP_OBJ_SENTINEL;
    d592:	693b      	ldr	r3, [r7, #16]
    d594:	2208      	movs	r2, #8
    d596:	601a      	str	r2, [r3, #0]
                }
                // keep slot->value so that caller can access it if needed
            }
            return slot;
    d598:	693b      	ldr	r3, [r7, #16]
    d59a:	e04f      	b.n	d63c <mp_map_lookup+0x2e0>
        }

        // not yet found, keep searching in this table
        pos = (pos + 1) % map->alloc;
    d59c:	6a3b      	ldr	r3, [r7, #32]
    d59e:	3301      	adds	r3, #1
    d5a0:	68fa      	ldr	r2, [r7, #12]
    d5a2:	6852      	ldr	r2, [r2, #4]
    d5a4:	fbb3 f1f2 	udiv	r1, r3, r2
    d5a8:	fb02 f201 	mul.w	r2, r2, r1
    d5ac:	1a9b      	subs	r3, r3, r2
    d5ae:	623b      	str	r3, [r7, #32]

        if (pos == start_pos) {
    d5b0:	6a3a      	ldr	r2, [r7, #32]
    d5b2:	69fb      	ldr	r3, [r7, #28]
    d5b4:	429a      	cmp	r2, r3
    d5b6:	f47f af72 	bne.w	d49e <mp_map_lookup+0x142>
            // search got back to starting position, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d5ba:	687b      	ldr	r3, [r7, #4]
    d5bc:	2b01      	cmp	r3, #1
    d5be:	d13c      	bne.n	d63a <mp_map_lookup+0x2de>
                if (avail_slot != NULL) {
    d5c0:	69bb      	ldr	r3, [r7, #24]
    d5c2:	2b00      	cmp	r3, #0
    d5c4:	d02a      	beq.n	d61c <mp_map_lookup+0x2c0>
                    // there was an available slot, so use that
                    map->used++;
    d5c6:	68fb      	ldr	r3, [r7, #12]
    d5c8:	681b      	ldr	r3, [r3, #0]
    d5ca:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d5ce:	1c5a      	adds	r2, r3, #1
    d5d0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    d5d4:	68f9      	ldr	r1, [r7, #12]
    d5d6:	680b      	ldr	r3, [r1, #0]
    d5d8:	f362 03df 	bfi	r3, r2, #3, #29
    d5dc:	600b      	str	r3, [r1, #0]
                    avail_slot->key = index;
    d5de:	69bb      	ldr	r3, [r7, #24]
    d5e0:	68ba      	ldr	r2, [r7, #8]
    d5e2:	601a      	str	r2, [r3, #0]
                    avail_slot->value = MP_OBJ_NULL;
    d5e4:	69bb      	ldr	r3, [r7, #24]
    d5e6:	2200      	movs	r2, #0
    d5e8:	605a      	str	r2, [r3, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    d5ea:	68b8      	ldr	r0, [r7, #8]
    d5ec:	f7ff fd72 	bl	d0d4 <MP_OBJ_IS_QSTR>
    d5f0:	4603      	mov	r3, r0
    d5f2:	f083 0301 	eor.w	r3, r3, #1
    d5f6:	b2db      	uxtb	r3, r3
    d5f8:	2b00      	cmp	r3, #0
    d5fa:	d004      	beq.n	d606 <mp_map_lookup+0x2aa>
                        map->all_keys_are_qstrs = 0;
    d5fc:	68fa      	ldr	r2, [r7, #12]
    d5fe:	7813      	ldrb	r3, [r2, #0]
    d600:	f36f 0300 	bfc	r3, #0, #1
    d604:	7013      	strb	r3, [r2, #0]
                    }
                    return avail_slot;
    d606:	69bb      	ldr	r3, [r7, #24]
    d608:	e018      	b.n	d63c <mp_map_lookup+0x2e0>
    d60a:	bf00      	nop
    d60c:	00021664 	.word	0x00021664
    d610:	000216a4 	.word	0x000216a4
    d614:	00021694 	.word	0x00021694
    d618:	0002379c 	.word	0x0002379c
                } else {
                    // not enough room in table, rehash it
                    mp_map_rehash(map);
    d61c:	68f8      	ldr	r0, [r7, #12]
    d61e:	f7ff fe46 	bl	d2ae <mp_map_rehash>
                    // restart the search for the new element
                    start_pos = pos = hash % map->alloc;
    d622:	68fb      	ldr	r3, [r7, #12]
    d624:	685a      	ldr	r2, [r3, #4]
    d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d628:	fbb3 f1f2 	udiv	r1, r3, r2
    d62c:	fb02 f201 	mul.w	r2, r2, r1
    d630:	1a9b      	subs	r3, r3, r2
    d632:	623b      	str	r3, [r7, #32]
    d634:	6a3b      	ldr	r3, [r7, #32]
    d636:	61fb      	str	r3, [r7, #28]
    d638:	e731      	b.n	d49e <mp_map_lookup+0x142>
                }
            } else {
                return NULL;
    d63a:	2300      	movs	r3, #0
            }
        }
    }
}
    d63c:	4618      	mov	r0, r3
    d63e:	3730      	adds	r7, #48	; 0x30
    d640:	46bd      	mov	sp, r7
    d642:	bd80      	pop	{r7, pc}

0000d644 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    d644:	b480      	push	{r7}
    d646:	b083      	sub	sp, #12
    d648:	af00      	add	r7, sp, #0
    d64a:	6078      	str	r0, [r7, #4]
    d64c:	687b      	ldr	r3, [r7, #4]
    d64e:	f003 0301 	and.w	r3, r3, #1
    d652:	2b00      	cmp	r3, #0
    d654:	bf14      	ite	ne
    d656:	2301      	movne	r3, #1
    d658:	2300      	moveq	r3, #0
    d65a:	b2db      	uxtb	r3, r3
    d65c:	4618      	mov	r0, r3
    d65e:	370c      	adds	r7, #12
    d660:	46bd      	mov	sp, r7
    d662:	f85d 7b04 	ldr.w	r7, [sp], #4
    d666:	4770      	bx	lr

0000d668 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d668:	b480      	push	{r7}
    d66a:	b083      	sub	sp, #12
    d66c:	af00      	add	r7, sp, #0
    d66e:	6078      	str	r0, [r7, #4]
    d670:	687b      	ldr	r3, [r7, #4]
    d672:	f003 0303 	and.w	r3, r3, #3
    d676:	2b02      	cmp	r3, #2
    d678:	bf0c      	ite	eq
    d67a:	2301      	moveq	r3, #1
    d67c:	2300      	movne	r3, #0
    d67e:	b2db      	uxtb	r3, r3
    d680:	4618      	mov	r0, r3
    d682:	370c      	adds	r7, #12
    d684:	46bd      	mov	sp, r7
    d686:	f85d 7b04 	ldr.w	r7, [sp], #4
    d68a:	4770      	bx	lr

0000d68c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d68c:	b480      	push	{r7}
    d68e:	b083      	sub	sp, #12
    d690:	af00      	add	r7, sp, #0
    d692:	6078      	str	r0, [r7, #4]
    d694:	687b      	ldr	r3, [r7, #4]
    d696:	f003 0303 	and.w	r3, r3, #3
    d69a:	2b00      	cmp	r3, #0
    d69c:	bf0c      	ite	eq
    d69e:	2301      	moveq	r3, #1
    d6a0:	2300      	movne	r3, #0
    d6a2:	b2db      	uxtb	r3, r3
    d6a4:	4618      	mov	r0, r3
    d6a6:	370c      	adds	r7, #12
    d6a8:	46bd      	mov	sp, r7
    d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    d6ae:	4770      	bx	lr

0000d6b0 <mp_obj_get_type>:
#include "py/objstr.h"
#include "py/runtime.h"
#include "py/stackctrl.h"
#include "py/stream.h" // for mp_obj_print

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in) {
    d6b0:	b580      	push	{r7, lr}
    d6b2:	b084      	sub	sp, #16
    d6b4:	af00      	add	r7, sp, #0
    d6b6:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    d6b8:	6878      	ldr	r0, [r7, #4]
    d6ba:	f7ff ffc3 	bl	d644 <MP_OBJ_IS_SMALL_INT>
    d6be:	4603      	mov	r3, r0
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	d001      	beq.n	d6c8 <mp_obj_get_type+0x18>
        return (mp_obj_type_t*)&mp_type_int;
    d6c4:	4b08      	ldr	r3, [pc, #32]	; (d6e8 <mp_obj_get_type+0x38>)
    d6c6:	e00b      	b.n	d6e0 <mp_obj_get_type+0x30>
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    d6c8:	6878      	ldr	r0, [r7, #4]
    d6ca:	f7ff ffcd 	bl	d668 <MP_OBJ_IS_QSTR>
    d6ce:	4603      	mov	r3, r0
    d6d0:	2b00      	cmp	r3, #0
    d6d2:	d001      	beq.n	d6d8 <mp_obj_get_type+0x28>
        return (mp_obj_type_t*)&mp_type_str;
    d6d4:	4b05      	ldr	r3, [pc, #20]	; (d6ec <mp_obj_get_type+0x3c>)
    d6d6:	e003      	b.n	d6e0 <mp_obj_get_type+0x30>
    #if MICROPY_PY_BUILTINS_FLOAT
    } else if (mp_obj_is_float(o_in)) {
        return (mp_obj_type_t*)&mp_type_float;
    #endif
    } else {
        const mp_obj_base_t *o = MP_OBJ_TO_PTR(o_in);
    d6d8:	687b      	ldr	r3, [r7, #4]
    d6da:	60fb      	str	r3, [r7, #12]
        return (mp_obj_type_t*)o->type;
    d6dc:	68fb      	ldr	r3, [r7, #12]
    d6de:	681b      	ldr	r3, [r3, #0]
    }
}
    d6e0:	4618      	mov	r0, r3
    d6e2:	3710      	adds	r7, #16
    d6e4:	46bd      	mov	sp, r7
    d6e6:	bd80      	pop	{r7, pc}
    d6e8:	00022bbc 	.word	0x00022bbc
    d6ec:	0002379c 	.word	0x0002379c

0000d6f0 <mp_obj_get_type_str>:

const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    d6f0:	b580      	push	{r7, lr}
    d6f2:	b082      	sub	sp, #8
    d6f4:	af00      	add	r7, sp, #0
    d6f6:	6078      	str	r0, [r7, #4]
    return qstr_str(mp_obj_get_type(o_in)->name);
    d6f8:	6878      	ldr	r0, [r7, #4]
    d6fa:	f7ff ffd9 	bl	d6b0 <mp_obj_get_type>
    d6fe:	4603      	mov	r3, r0
    d700:	88db      	ldrh	r3, [r3, #6]
    d702:	4618      	mov	r0, r3
    d704:	f7f3 fda0 	bl	1248 <qstr_str>
    d708:	4603      	mov	r3, r0
}
    d70a:	4618      	mov	r0, r3
    d70c:	3708      	adds	r7, #8
    d70e:	46bd      	mov	sp, r7
    d710:	bd80      	pop	{r7, pc}

0000d712 <mp_obj_print_helper>:

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    d712:	b580      	push	{r7, lr}
    d714:	b086      	sub	sp, #24
    d716:	af00      	add	r7, sp, #0
    d718:	60f8      	str	r0, [r7, #12]
    d71a:	60b9      	str	r1, [r7, #8]
    d71c:	607a      	str	r2, [r7, #4]
    // There can be data structures nested too deep, or just recursive
    MP_STACK_CHECK();
#ifndef NDEBUG
    if (o_in == MP_OBJ_NULL) {
    d71e:	68bb      	ldr	r3, [r7, #8]
    d720:	2b00      	cmp	r3, #0
    d722:	d104      	bne.n	d72e <mp_obj_print_helper+0x1c>
        mp_print_str(print, "(nil)");
    d724:	490e      	ldr	r1, [pc, #56]	; (d760 <mp_obj_print_helper+0x4e>)
    d726:	68f8      	ldr	r0, [r7, #12]
    d728:	f7f4 f8cc 	bl	18c4 <mp_print_str>
        return;
    d72c:	e015      	b.n	d75a <mp_obj_print_helper+0x48>
    }
#endif
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    d72e:	68b8      	ldr	r0, [r7, #8]
    d730:	f7ff ffbe 	bl	d6b0 <mp_obj_get_type>
    d734:	6178      	str	r0, [r7, #20]
    if (type->print != NULL) {
    d736:	697b      	ldr	r3, [r7, #20]
    d738:	689b      	ldr	r3, [r3, #8]
    d73a:	2b00      	cmp	r3, #0
    d73c:	d006      	beq.n	d74c <mp_obj_print_helper+0x3a>
        type->print((mp_print_t*)print, o_in, kind);
    d73e:	697b      	ldr	r3, [r7, #20]
    d740:	689b      	ldr	r3, [r3, #8]
    d742:	687a      	ldr	r2, [r7, #4]
    d744:	68b9      	ldr	r1, [r7, #8]
    d746:	68f8      	ldr	r0, [r7, #12]
    d748:	4798      	blx	r3
    d74a:	e006      	b.n	d75a <mp_obj_print_helper+0x48>
    } else {
        mp_printf(print, "<%q>", type->name);
    d74c:	697b      	ldr	r3, [r7, #20]
    d74e:	88db      	ldrh	r3, [r3, #6]
    d750:	461a      	mov	r2, r3
    d752:	4904      	ldr	r1, [pc, #16]	; (d764 <mp_obj_print_helper+0x52>)
    d754:	68f8      	ldr	r0, [r7, #12]
    d756:	f7f4 fbc7 	bl	1ee8 <mp_printf>
    }
}
    d75a:	3718      	adds	r7, #24
    d75c:	46bd      	mov	sp, r7
    d75e:	bd80      	pop	{r7, pc}
    d760:	000216b4 	.word	0x000216b4
    d764:	000216bc 	.word	0x000216bc

0000d768 <mp_obj_print>:

void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    d768:	b580      	push	{r7, lr}
    d76a:	b082      	sub	sp, #8
    d76c:	af00      	add	r7, sp, #0
    d76e:	6078      	str	r0, [r7, #4]
    d770:	6039      	str	r1, [r7, #0]
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    d772:	683a      	ldr	r2, [r7, #0]
    d774:	6879      	ldr	r1, [r7, #4]
    d776:	4803      	ldr	r0, [pc, #12]	; (d784 <mp_obj_print+0x1c>)
    d778:	f7ff ffcb 	bl	d712 <mp_obj_print_helper>
}
    d77c:	bf00      	nop
    d77e:	3708      	adds	r7, #8
    d780:	46bd      	mov	sp, r7
    d782:	bd80      	pop	{r7, pc}
    d784:	0001f4ac 	.word	0x0001f4ac

0000d788 <mp_obj_print_exception>:

// helper function to print an exception with traceback
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    d788:	b580      	push	{r7, lr}
    d78a:	b086      	sub	sp, #24
    d78c:	af00      	add	r7, sp, #0
    d78e:	6078      	str	r0, [r7, #4]
    d790:	6039      	str	r1, [r7, #0]
    if (mp_obj_is_exception_instance(exc)) {
    d792:	6838      	ldr	r0, [r7, #0]
    d794:	f001 ff38 	bl	f608 <mp_obj_is_exception_instance>
    d798:	4603      	mov	r3, r0
    d79a:	2b00      	cmp	r3, #0
    d79c:	d047      	beq.n	d82e <mp_obj_print_exception+0xa6>
        size_t n, *values;
        mp_obj_exception_get_traceback(exc, &n, &values);
    d79e:	f107 0208 	add.w	r2, r7, #8
    d7a2:	f107 030c 	add.w	r3, r7, #12
    d7a6:	4619      	mov	r1, r3
    d7a8:	6838      	ldr	r0, [r7, #0]
    d7aa:	f001 ffff 	bl	f7ac <mp_obj_exception_get_traceback>
        if (n > 0) {
    d7ae:	68fb      	ldr	r3, [r7, #12]
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	d03c      	beq.n	d82e <mp_obj_print_exception+0xa6>
            assert(n % 3 == 0);
    d7b4:	68f9      	ldr	r1, [r7, #12]
    d7b6:	4b24      	ldr	r3, [pc, #144]	; (d848 <mp_obj_print_exception+0xc0>)
    d7b8:	fba3 2301 	umull	r2, r3, r3, r1
    d7bc:	085a      	lsrs	r2, r3, #1
    d7be:	4613      	mov	r3, r2
    d7c0:	005b      	lsls	r3, r3, #1
    d7c2:	4413      	add	r3, r2
    d7c4:	1aca      	subs	r2, r1, r3
    d7c6:	2a00      	cmp	r2, #0
    d7c8:	d005      	beq.n	d7d6 <mp_obj_print_exception+0x4e>
    d7ca:	4b20      	ldr	r3, [pc, #128]	; (d84c <mp_obj_print_exception+0xc4>)
    d7cc:	4a20      	ldr	r2, [pc, #128]	; (d850 <mp_obj_print_exception+0xc8>)
    d7ce:	2156      	movs	r1, #86	; 0x56
    d7d0:	4820      	ldr	r0, [pc, #128]	; (d854 <mp_obj_print_exception+0xcc>)
    d7d2:	f00d fe55 	bl	1b480 <__assert_func>
            mp_print_str(print, "Traceback (most recent call last):\n");
    d7d6:	4920      	ldr	r1, [pc, #128]	; (d858 <mp_obj_print_exception+0xd0>)
    d7d8:	6878      	ldr	r0, [r7, #4]
    d7da:	f7f4 f873 	bl	18c4 <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    d7de:	68fb      	ldr	r3, [r7, #12]
    d7e0:	3b03      	subs	r3, #3
    d7e2:	617b      	str	r3, [r7, #20]
    d7e4:	e020      	b.n	d828 <mp_obj_print_exception+0xa0>
#if MICROPY_ENABLE_SOURCE_LINE
                mp_printf(print, "  File \"%q\", line %d", values[i], (int)values[i + 1]);
#else
                mp_printf(print, "  File \"%q\"", values[i]);
    d7e6:	68ba      	ldr	r2, [r7, #8]
    d7e8:	697b      	ldr	r3, [r7, #20]
    d7ea:	009b      	lsls	r3, r3, #2
    d7ec:	4413      	add	r3, r2
    d7ee:	681b      	ldr	r3, [r3, #0]
    d7f0:	461a      	mov	r2, r3
    d7f2:	491a      	ldr	r1, [pc, #104]	; (d85c <mp_obj_print_exception+0xd4>)
    d7f4:	6878      	ldr	r0, [r7, #4]
    d7f6:	f7f4 fb77 	bl	1ee8 <mp_printf>
#endif
                // the block name can be NULL if it's unknown
                qstr block = values[i + 2];
    d7fa:	68ba      	ldr	r2, [r7, #8]
    d7fc:	697b      	ldr	r3, [r7, #20]
    d7fe:	3302      	adds	r3, #2
    d800:	009b      	lsls	r3, r3, #2
    d802:	4413      	add	r3, r2
    d804:	681b      	ldr	r3, [r3, #0]
    d806:	613b      	str	r3, [r7, #16]
                if (block == MP_QSTR_NULL) {
    d808:	693b      	ldr	r3, [r7, #16]
    d80a:	2b00      	cmp	r3, #0
    d80c:	d104      	bne.n	d818 <mp_obj_print_exception+0x90>
                    mp_print_str(print, "\n");
    d80e:	4914      	ldr	r1, [pc, #80]	; (d860 <mp_obj_print_exception+0xd8>)
    d810:	6878      	ldr	r0, [r7, #4]
    d812:	f7f4 f857 	bl	18c4 <mp_print_str>
    d816:	e004      	b.n	d822 <mp_obj_print_exception+0x9a>
                } else {
                    mp_printf(print, ", in %q\n", block);
    d818:	693a      	ldr	r2, [r7, #16]
    d81a:	4912      	ldr	r1, [pc, #72]	; (d864 <mp_obj_print_exception+0xdc>)
    d81c:	6878      	ldr	r0, [r7, #4]
    d81e:	f7f4 fb63 	bl	1ee8 <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    d822:	697b      	ldr	r3, [r7, #20]
    d824:	3b03      	subs	r3, #3
    d826:	617b      	str	r3, [r7, #20]
    d828:	697b      	ldr	r3, [r7, #20]
    d82a:	2b00      	cmp	r3, #0
    d82c:	dadb      	bge.n	d7e6 <mp_obj_print_exception+0x5e>
                }
            }
        }
    }
    mp_obj_print_helper(print, exc, PRINT_EXC);
    d82e:	2202      	movs	r2, #2
    d830:	6839      	ldr	r1, [r7, #0]
    d832:	6878      	ldr	r0, [r7, #4]
    d834:	f7ff ff6d 	bl	d712 <mp_obj_print_helper>
    mp_print_str(print, "\n");
    d838:	4909      	ldr	r1, [pc, #36]	; (d860 <mp_obj_print_exception+0xd8>)
    d83a:	6878      	ldr	r0, [r7, #4]
    d83c:	f7f4 f842 	bl	18c4 <mp_print_str>
}
    d840:	bf00      	nop
    d842:	3718      	adds	r7, #24
    d844:	46bd      	mov	sp, r7
    d846:	bd80      	pop	{r7, pc}
    d848:	aaaaaaab 	.word	0xaaaaaaab
    d84c:	000216c4 	.word	0x000216c4
    d850:	00021830 	.word	0x00021830
    d854:	000216d0 	.word	0x000216d0
    d858:	000216e0 	.word	0x000216e0
    d85c:	00021704 	.word	0x00021704
    d860:	00021710 	.word	0x00021710
    d864:	00021714 	.word	0x00021714

0000d868 <mp_obj_is_true>:

bool mp_obj_is_true(mp_obj_t arg) {
    d868:	b580      	push	{r7, lr}
    d86a:	b086      	sub	sp, #24
    d86c:	af00      	add	r7, sp, #0
    d86e:	6078      	str	r0, [r7, #4]
    if (arg == mp_const_false) {
    d870:	687b      	ldr	r3, [r7, #4]
    d872:	4a25      	ldr	r2, [pc, #148]	; (d908 <mp_obj_is_true+0xa0>)
    d874:	4293      	cmp	r3, r2
    d876:	d101      	bne.n	d87c <mp_obj_is_true+0x14>
        return 0;
    d878:	2300      	movs	r3, #0
    d87a:	e041      	b.n	d900 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_true) {
    d87c:	687b      	ldr	r3, [r7, #4]
    d87e:	4a23      	ldr	r2, [pc, #140]	; (d90c <mp_obj_is_true+0xa4>)
    d880:	4293      	cmp	r3, r2
    d882:	d101      	bne.n	d888 <mp_obj_is_true+0x20>
        return 1;
    d884:	2301      	movs	r3, #1
    d886:	e03b      	b.n	d900 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_none) {
    d888:	687b      	ldr	r3, [r7, #4]
    d88a:	4a21      	ldr	r2, [pc, #132]	; (d910 <mp_obj_is_true+0xa8>)
    d88c:	4293      	cmp	r3, r2
    d88e:	d101      	bne.n	d894 <mp_obj_is_true+0x2c>
        return 0;
    d890:	2300      	movs	r3, #0
    d892:	e035      	b.n	d900 <mp_obj_is_true+0x98>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    d894:	6878      	ldr	r0, [r7, #4]
    d896:	f7ff fed5 	bl	d644 <MP_OBJ_IS_SMALL_INT>
    d89a:	4603      	mov	r3, r0
    d89c:	2b00      	cmp	r3, #0
    d89e:	d007      	beq.n	d8b0 <mp_obj_is_true+0x48>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    d8a0:	687b      	ldr	r3, [r7, #4]
    d8a2:	105b      	asrs	r3, r3, #1
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d101      	bne.n	d8ac <mp_obj_is_true+0x44>
            return 0;
    d8a8:	2300      	movs	r3, #0
    d8aa:	e029      	b.n	d900 <mp_obj_is_true+0x98>
        } else {
            return 1;
    d8ac:	2301      	movs	r3, #1
    d8ae:	e027      	b.n	d900 <mp_obj_is_true+0x98>
        }
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    d8b0:	6878      	ldr	r0, [r7, #4]
    d8b2:	f7ff fefd 	bl	d6b0 <mp_obj_get_type>
    d8b6:	6178      	str	r0, [r7, #20]
        if (type->unary_op != NULL) {
    d8b8:	697b      	ldr	r3, [r7, #20]
    d8ba:	695b      	ldr	r3, [r3, #20]
    d8bc:	2b00      	cmp	r3, #0
    d8be:	d010      	beq.n	d8e2 <mp_obj_is_true+0x7a>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    d8c0:	697b      	ldr	r3, [r7, #20]
    d8c2:	695b      	ldr	r3, [r3, #20]
    d8c4:	6879      	ldr	r1, [r7, #4]
    d8c6:	2004      	movs	r0, #4
    d8c8:	4798      	blx	r3
    d8ca:	6138      	str	r0, [r7, #16]
            if (result != MP_OBJ_NULL) {
    d8cc:	693b      	ldr	r3, [r7, #16]
    d8ce:	2b00      	cmp	r3, #0
    d8d0:	d007      	beq.n	d8e2 <mp_obj_is_true+0x7a>
                return result == mp_const_true;
    d8d2:	693b      	ldr	r3, [r7, #16]
    d8d4:	4a0d      	ldr	r2, [pc, #52]	; (d90c <mp_obj_is_true+0xa4>)
    d8d6:	4293      	cmp	r3, r2
    d8d8:	bf0c      	ite	eq
    d8da:	2301      	moveq	r3, #1
    d8dc:	2300      	movne	r3, #0
    d8de:	b2db      	uxtb	r3, r3
    d8e0:	e00e      	b.n	d900 <mp_obj_is_true+0x98>
            }
        }

        mp_obj_t len = mp_obj_len_maybe(arg);
    d8e2:	6878      	ldr	r0, [r7, #4]
    d8e4:	f000 fa3a 	bl	dd5c <mp_obj_len_maybe>
    d8e8:	60f8      	str	r0, [r7, #12]
        if (len != MP_OBJ_NULL) {
    d8ea:	68fb      	ldr	r3, [r7, #12]
    d8ec:	2b00      	cmp	r3, #0
    d8ee:	d006      	beq.n	d8fe <mp_obj_is_true+0x96>
            // obj has a length, truth determined if len != 0
            return len != MP_OBJ_NEW_SMALL_INT(0);
    d8f0:	68fb      	ldr	r3, [r7, #12]
    d8f2:	2b01      	cmp	r3, #1
    d8f4:	bf14      	ite	ne
    d8f6:	2301      	movne	r3, #1
    d8f8:	2300      	moveq	r3, #0
    d8fa:	b2db      	uxtb	r3, r3
    d8fc:	e000      	b.n	d900 <mp_obj_is_true+0x98>
        } else {
            // any other obj is true per Python semantics
            return 1;
    d8fe:	2301      	movs	r3, #1
        }
    }
}
    d900:	4618      	mov	r0, r3
    d902:	3718      	adds	r7, #24
    d904:	46bd      	mov	sp, r7
    d906:	bd80      	pop	{r7, pc}
    d908:	00021894 	.word	0x00021894
    d90c:	0002189c 	.word	0x0002189c
    d910:	00023108 	.word	0x00023108

0000d914 <mp_obj_is_callable>:

bool mp_obj_is_callable(mp_obj_t o_in) {
    d914:	b580      	push	{r7, lr}
    d916:	b084      	sub	sp, #16
    d918:	af00      	add	r7, sp, #0
    d91a:	6078      	str	r0, [r7, #4]
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    d91c:	6878      	ldr	r0, [r7, #4]
    d91e:	f7ff fec7 	bl	d6b0 <mp_obj_get_type>
    d922:	4603      	mov	r3, r0
    d924:	691b      	ldr	r3, [r3, #16]
    d926:	60fb      	str	r3, [r7, #12]
    if (call != mp_obj_instance_call) {
    d928:	68fb      	ldr	r3, [r7, #12]
    d92a:	4a09      	ldr	r2, [pc, #36]	; (d950 <mp_obj_is_callable+0x3c>)
    d92c:	4293      	cmp	r3, r2
    d92e:	d006      	beq.n	d93e <mp_obj_is_callable+0x2a>
        return call != NULL;
    d930:	68fb      	ldr	r3, [r7, #12]
    d932:	2b00      	cmp	r3, #0
    d934:	bf14      	ite	ne
    d936:	2301      	movne	r3, #1
    d938:	2300      	moveq	r3, #0
    d93a:	b2db      	uxtb	r3, r3
    d93c:	e003      	b.n	d946 <mp_obj_is_callable+0x32>
    }
    return mp_obj_instance_is_callable(o_in);
    d93e:	6878      	ldr	r0, [r7, #4]
    d940:	f009 f809 	bl	16956 <mp_obj_instance_is_callable>
    d944:	4603      	mov	r3, r0
}
    d946:	4618      	mov	r0, r3
    d948:	3710      	adds	r7, #16
    d94a:	46bd      	mov	sp, r7
    d94c:	bd80      	pop	{r7, pc}
    d94e:	bf00      	nop
    d950:	00016987 	.word	0x00016987

0000d954 <mp_obj_equal>:
// This means that False==0 and True==1 are true expressions.
//
// Furthermore, from the v3.4.2 code for object.c: "Practical amendments: If rich
// comparison returns NotImplemented, == and != are decided by comparing the object
// pointer."
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    d954:	b580      	push	{r7, lr}
    d956:	b086      	sub	sp, #24
    d958:	af00      	add	r7, sp, #0
    d95a:	6078      	str	r0, [r7, #4]
    d95c:	6039      	str	r1, [r7, #0]
    // Float (and complex) NaN is never equal to anything, not even itself,
    // so we must have a special check here to cover those cases.
    if (o1 == o2
    d95e:	687a      	ldr	r2, [r7, #4]
    d960:	683b      	ldr	r3, [r7, #0]
    d962:	429a      	cmp	r2, r3
    d964:	d101      	bne.n	d96a <mp_obj_equal+0x16>
        #endif
        #if MICROPY_PY_BUILTINS_COMPLEX
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
        #endif
        ) {
        return true;
    d966:	2301      	movs	r3, #1
    d968:	e073      	b.n	da52 <mp_obj_equal+0xfe>
    }
    if (o1 == mp_const_none || o2 == mp_const_none) {
    d96a:	687b      	ldr	r3, [r7, #4]
    d96c:	4a3b      	ldr	r2, [pc, #236]	; (da5c <mp_obj_equal+0x108>)
    d96e:	4293      	cmp	r3, r2
    d970:	d003      	beq.n	d97a <mp_obj_equal+0x26>
    d972:	683b      	ldr	r3, [r7, #0]
    d974:	4a39      	ldr	r2, [pc, #228]	; (da5c <mp_obj_equal+0x108>)
    d976:	4293      	cmp	r3, r2
    d978:	d101      	bne.n	d97e <mp_obj_equal+0x2a>
        return false;
    d97a:	2300      	movs	r3, #0
    d97c:	e069      	b.n	da52 <mp_obj_equal+0xfe>
    }

    // fast path for small ints
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    d97e:	6878      	ldr	r0, [r7, #4]
    d980:	f7ff fe60 	bl	d644 <MP_OBJ_IS_SMALL_INT>
    d984:	4603      	mov	r3, r0
    d986:	2b00      	cmp	r3, #0
    d988:	d00d      	beq.n	d9a6 <mp_obj_equal+0x52>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    d98a:	6838      	ldr	r0, [r7, #0]
    d98c:	f7ff fe5a 	bl	d644 <MP_OBJ_IS_SMALL_INT>
    d990:	4603      	mov	r3, r0
    d992:	2b00      	cmp	r3, #0
    d994:	d001      	beq.n	d99a <mp_obj_equal+0x46>
            // both SMALL_INT, and not equal if we get here
            return false;
    d996:	2300      	movs	r3, #0
    d998:	e05b      	b.n	da52 <mp_obj_equal+0xfe>
        } else {
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    d99a:	683b      	ldr	r3, [r7, #0]
    d99c:	617b      	str	r3, [r7, #20]
    d99e:	687b      	ldr	r3, [r7, #4]
    d9a0:	603b      	str	r3, [r7, #0]
    d9a2:	697b      	ldr	r3, [r7, #20]
    d9a4:	607b      	str	r3, [r7, #4]
            // fall through to generic op
        }
    }

    // fast path for strings
    if (MP_OBJ_IS_STR(o1)) {
    d9a6:	6878      	ldr	r0, [r7, #4]
    d9a8:	f7ff fe5e 	bl	d668 <MP_OBJ_IS_QSTR>
    d9ac:	4603      	mov	r3, r0
    d9ae:	2b00      	cmp	r3, #0
    d9b0:	d10a      	bne.n	d9c8 <mp_obj_equal+0x74>
    d9b2:	6878      	ldr	r0, [r7, #4]
    d9b4:	f7ff fe6a 	bl	d68c <MP_OBJ_IS_OBJ>
    d9b8:	4603      	mov	r3, r0
    d9ba:	2b00      	cmp	r3, #0
    d9bc:	d01b      	beq.n	d9f6 <mp_obj_equal+0xa2>
    d9be:	687b      	ldr	r3, [r7, #4]
    d9c0:	681b      	ldr	r3, [r3, #0]
    d9c2:	4a27      	ldr	r2, [pc, #156]	; (da60 <mp_obj_equal+0x10c>)
    d9c4:	4293      	cmp	r3, r2
    d9c6:	d116      	bne.n	d9f6 <mp_obj_equal+0xa2>
        if (MP_OBJ_IS_STR(o2)) {
    d9c8:	6838      	ldr	r0, [r7, #0]
    d9ca:	f7ff fe4d 	bl	d668 <MP_OBJ_IS_QSTR>
    d9ce:	4603      	mov	r3, r0
    d9d0:	2b00      	cmp	r3, #0
    d9d2:	d10a      	bne.n	d9ea <mp_obj_equal+0x96>
    d9d4:	6838      	ldr	r0, [r7, #0]
    d9d6:	f7ff fe59 	bl	d68c <MP_OBJ_IS_OBJ>
    d9da:	4603      	mov	r3, r0
    d9dc:	2b00      	cmp	r3, #0
    d9de:	d01b      	beq.n	da18 <mp_obj_equal+0xc4>
    d9e0:	683b      	ldr	r3, [r7, #0]
    d9e2:	681b      	ldr	r3, [r3, #0]
    d9e4:	4a1e      	ldr	r2, [pc, #120]	; (da60 <mp_obj_equal+0x10c>)
    d9e6:	4293      	cmp	r3, r2
    d9e8:	d116      	bne.n	da18 <mp_obj_equal+0xc4>
            // both strings, use special function
            return mp_obj_str_equal(o1, o2);
    d9ea:	6839      	ldr	r1, [r7, #0]
    d9ec:	6878      	ldr	r0, [r7, #4]
    d9ee:	f007 fc63 	bl	152b8 <mp_obj_str_equal>
    d9f2:	4603      	mov	r3, r0
    d9f4:	e02d      	b.n	da52 <mp_obj_equal+0xfe>
        } else {
            // a string is never equal to anything else
            goto str_cmp_err;
        }
    } else if (MP_OBJ_IS_STR(o2)) {
    d9f6:	6838      	ldr	r0, [r7, #0]
    d9f8:	f7ff fe36 	bl	d668 <MP_OBJ_IS_QSTR>
    d9fc:	4603      	mov	r3, r0
    d9fe:	2b00      	cmp	r3, #0
    da00:	d10a      	bne.n	da18 <mp_obj_equal+0xc4>
    da02:	6838      	ldr	r0, [r7, #0]
    da04:	f7ff fe42 	bl	d68c <MP_OBJ_IS_OBJ>
    da08:	4603      	mov	r3, r0
    da0a:	2b00      	cmp	r3, #0
    da0c:	d006      	beq.n	da1c <mp_obj_equal+0xc8>
    da0e:	683b      	ldr	r3, [r7, #0]
    da10:	681b      	ldr	r3, [r3, #0]
    da12:	4a13      	ldr	r2, [pc, #76]	; (da60 <mp_obj_equal+0x10c>)
    da14:	4293      	cmp	r3, r2
    da16:	d101      	bne.n	da1c <mp_obj_equal+0xc8>
        #if MICROPY_PY_STR_BYTES_CMP_WARN
        if (MP_OBJ_IS_TYPE(o1, &mp_type_bytes) || MP_OBJ_IS_TYPE(o2, &mp_type_bytes)) {
            mp_warning("Comparison between bytes and str");
        }
        #endif
        return false;
    da18:	2300      	movs	r3, #0
    da1a:	e01a      	b.n	da52 <mp_obj_equal+0xfe>
    }

    // generic type, call binary_op(MP_BINARY_OP_EQUAL)
    mp_obj_type_t *type = mp_obj_get_type(o1);
    da1c:	6878      	ldr	r0, [r7, #4]
    da1e:	f7ff fe47 	bl	d6b0 <mp_obj_get_type>
    da22:	6138      	str	r0, [r7, #16]
    if (type->binary_op != NULL) {
    da24:	693b      	ldr	r3, [r7, #16]
    da26:	699b      	ldr	r3, [r3, #24]
    da28:	2b00      	cmp	r3, #0
    da2a:	d011      	beq.n	da50 <mp_obj_equal+0xfc>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    da2c:	693b      	ldr	r3, [r7, #16]
    da2e:	699b      	ldr	r3, [r3, #24]
    da30:	683a      	ldr	r2, [r7, #0]
    da32:	6879      	ldr	r1, [r7, #4]
    da34:	2002      	movs	r0, #2
    da36:	4798      	blx	r3
    da38:	60f8      	str	r0, [r7, #12]
        if (r != MP_OBJ_NULL) {
    da3a:	68fb      	ldr	r3, [r7, #12]
    da3c:	2b00      	cmp	r3, #0
    da3e:	d007      	beq.n	da50 <mp_obj_equal+0xfc>
            return r == mp_const_true ? true : false;
    da40:	68fb      	ldr	r3, [r7, #12]
    da42:	4a08      	ldr	r2, [pc, #32]	; (da64 <mp_obj_equal+0x110>)
    da44:	4293      	cmp	r3, r2
    da46:	bf0c      	ite	eq
    da48:	2301      	moveq	r3, #1
    da4a:	2300      	movne	r3, #0
    da4c:	b2db      	uxtb	r3, r3
    da4e:	e000      	b.n	da52 <mp_obj_equal+0xfe>
        }
    }

    // equality not implemented, and objects are not the same object, so
    // they are defined as not equal
    return false;
    da50:	2300      	movs	r3, #0
}
    da52:	4618      	mov	r0, r3
    da54:	3718      	adds	r7, #24
    da56:	46bd      	mov	sp, r7
    da58:	bd80      	pop	{r7, pc}
    da5a:	bf00      	nop
    da5c:	00023108 	.word	0x00023108
    da60:	0002379c 	.word	0x0002379c
    da64:	0002189c 	.word	0x0002189c

0000da68 <mp_obj_get_int>:

mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    da68:	b580      	push	{r7, lr}
    da6a:	b084      	sub	sp, #16
    da6c:	af00      	add	r7, sp, #0
    da6e:	6078      	str	r0, [r7, #4]
    // This function essentially performs implicit type conversion to int
    // Note that Python does NOT provide implicit type conversion from
    // float to int in the core expression language, try some_list[1.0].
    if (arg == mp_const_false) {
    da70:	687b      	ldr	r3, [r7, #4]
    da72:	4a18      	ldr	r2, [pc, #96]	; (dad4 <mp_obj_get_int+0x6c>)
    da74:	4293      	cmp	r3, r2
    da76:	d101      	bne.n	da7c <mp_obj_get_int+0x14>
        return 0;
    da78:	2300      	movs	r3, #0
    da7a:	e027      	b.n	dacc <mp_obj_get_int+0x64>
    } else if (arg == mp_const_true) {
    da7c:	687b      	ldr	r3, [r7, #4]
    da7e:	4a16      	ldr	r2, [pc, #88]	; (dad8 <mp_obj_get_int+0x70>)
    da80:	4293      	cmp	r3, r2
    da82:	d101      	bne.n	da88 <mp_obj_get_int+0x20>
        return 1;
    da84:	2301      	movs	r3, #1
    da86:	e021      	b.n	dacc <mp_obj_get_int+0x64>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    da88:	6878      	ldr	r0, [r7, #4]
    da8a:	f7ff fddb 	bl	d644 <MP_OBJ_IS_SMALL_INT>
    da8e:	4603      	mov	r3, r0
    da90:	2b00      	cmp	r3, #0
    da92:	d002      	beq.n	da9a <mp_obj_get_int+0x32>
        return MP_OBJ_SMALL_INT_VALUE(arg);
    da94:	687b      	ldr	r3, [r7, #4]
    da96:	105b      	asrs	r3, r3, #1
    da98:	e018      	b.n	dacc <mp_obj_get_int+0x64>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    da9a:	6878      	ldr	r0, [r7, #4]
    da9c:	f7ff fdf6 	bl	d68c <MP_OBJ_IS_OBJ>
    daa0:	4603      	mov	r3, r0
    daa2:	2b00      	cmp	r3, #0
    daa4:	d009      	beq.n	daba <mp_obj_get_int+0x52>
    daa6:	687b      	ldr	r3, [r7, #4]
    daa8:	681b      	ldr	r3, [r3, #0]
    daaa:	4a0c      	ldr	r2, [pc, #48]	; (dadc <mp_obj_get_int+0x74>)
    daac:	4293      	cmp	r3, r2
    daae:	d104      	bne.n	daba <mp_obj_get_int+0x52>
        return mp_obj_int_get_checked(arg);
    dab0:	6878      	ldr	r0, [r7, #4]
    dab2:	f002 fe83 	bl	107bc <mp_obj_int_get_checked>
    dab6:	4603      	mov	r3, r0
    dab8:	e008      	b.n	dacc <mp_obj_get_int+0x64>
    } else {
        mp_obj_t res = mp_unary_op(MP_UNARY_OP_INT, (mp_obj_t)arg);
    daba:	6879      	ldr	r1, [r7, #4]
    dabc:	2008      	movs	r0, #8
    dabe:	f7fd fd9f 	bl	b600 <mp_unary_op>
    dac2:	60f8      	str	r0, [r7, #12]
        return mp_obj_int_get_checked(res);
    dac4:	68f8      	ldr	r0, [r7, #12]
    dac6:	f002 fe79 	bl	107bc <mp_obj_int_get_checked>
    daca:	4603      	mov	r3, r0
    }
}
    dacc:	4618      	mov	r0, r3
    dace:	3710      	adds	r7, #16
    dad0:	46bd      	mov	sp, r7
    dad2:	bd80      	pop	{r7, pc}
    dad4:	00021894 	.word	0x00021894
    dad8:	0002189c 	.word	0x0002189c
    dadc:	00022bbc 	.word	0x00022bbc

0000dae0 <mp_obj_get_int_truncated>:

mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    dae0:	b580      	push	{r7, lr}
    dae2:	b082      	sub	sp, #8
    dae4:	af00      	add	r7, sp, #0
    dae6:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_INT(arg)) {
    dae8:	6878      	ldr	r0, [r7, #4]
    daea:	f7ff fdab 	bl	d644 <MP_OBJ_IS_SMALL_INT>
    daee:	4603      	mov	r3, r0
    daf0:	2b00      	cmp	r3, #0
    daf2:	d10a      	bne.n	db0a <mp_obj_get_int_truncated+0x2a>
    daf4:	6878      	ldr	r0, [r7, #4]
    daf6:	f7ff fdc9 	bl	d68c <MP_OBJ_IS_OBJ>
    dafa:	4603      	mov	r3, r0
    dafc:	2b00      	cmp	r3, #0
    dafe:	d009      	beq.n	db14 <mp_obj_get_int_truncated+0x34>
    db00:	687b      	ldr	r3, [r7, #4]
    db02:	681b      	ldr	r3, [r3, #0]
    db04:	4a07      	ldr	r2, [pc, #28]	; (db24 <mp_obj_get_int_truncated+0x44>)
    db06:	4293      	cmp	r3, r2
    db08:	d104      	bne.n	db14 <mp_obj_get_int_truncated+0x34>
        return mp_obj_int_get_truncated(arg);
    db0a:	6878      	ldr	r0, [r7, #4]
    db0c:	f002 fe4a 	bl	107a4 <mp_obj_int_get_truncated>
    db10:	4603      	mov	r3, r0
    db12:	e003      	b.n	db1c <mp_obj_get_int_truncated+0x3c>
    } else {
        return mp_obj_get_int(arg);
    db14:	6878      	ldr	r0, [r7, #4]
    db16:	f7ff ffa7 	bl	da68 <mp_obj_get_int>
    db1a:	4603      	mov	r3, r0
    }
}
    db1c:	4618      	mov	r0, r3
    db1e:	3708      	adds	r7, #8
    db20:	46bd      	mov	sp, r7
    db22:	bd80      	pop	{r7, pc}
    db24:	00022bbc 	.word	0x00022bbc

0000db28 <mp_obj_get_int_maybe>:

// returns false if arg is not of integral type
// returns true and sets *value if it is of integral type
// can throw OverflowError if arg is of integral type, but doesn't fit in a mp_int_t
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    db28:	b580      	push	{r7, lr}
    db2a:	b082      	sub	sp, #8
    db2c:	af00      	add	r7, sp, #0
    db2e:	6078      	str	r0, [r7, #4]
    db30:	6039      	str	r1, [r7, #0]
    if (arg == mp_const_false) {
    db32:	687b      	ldr	r3, [r7, #4]
    db34:	4a19      	ldr	r2, [pc, #100]	; (db9c <mp_obj_get_int_maybe+0x74>)
    db36:	4293      	cmp	r3, r2
    db38:	d103      	bne.n	db42 <mp_obj_get_int_maybe+0x1a>
        *value = 0;
    db3a:	683b      	ldr	r3, [r7, #0]
    db3c:	2200      	movs	r2, #0
    db3e:	601a      	str	r2, [r3, #0]
    db40:	e026      	b.n	db90 <mp_obj_get_int_maybe+0x68>
    } else if (arg == mp_const_true) {
    db42:	687b      	ldr	r3, [r7, #4]
    db44:	4a16      	ldr	r2, [pc, #88]	; (dba0 <mp_obj_get_int_maybe+0x78>)
    db46:	4293      	cmp	r3, r2
    db48:	d103      	bne.n	db52 <mp_obj_get_int_maybe+0x2a>
        *value = 1;
    db4a:	683b      	ldr	r3, [r7, #0]
    db4c:	2201      	movs	r2, #1
    db4e:	601a      	str	r2, [r3, #0]
    db50:	e01e      	b.n	db90 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    db52:	6878      	ldr	r0, [r7, #4]
    db54:	f7ff fd76 	bl	d644 <MP_OBJ_IS_SMALL_INT>
    db58:	4603      	mov	r3, r0
    db5a:	2b00      	cmp	r3, #0
    db5c:	d004      	beq.n	db68 <mp_obj_get_int_maybe+0x40>
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    db5e:	687b      	ldr	r3, [r7, #4]
    db60:	105a      	asrs	r2, r3, #1
    db62:	683b      	ldr	r3, [r7, #0]
    db64:	601a      	str	r2, [r3, #0]
    db66:	e013      	b.n	db90 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    db68:	6878      	ldr	r0, [r7, #4]
    db6a:	f7ff fd8f 	bl	d68c <MP_OBJ_IS_OBJ>
    db6e:	4603      	mov	r3, r0
    db70:	2b00      	cmp	r3, #0
    db72:	d00b      	beq.n	db8c <mp_obj_get_int_maybe+0x64>
    db74:	687b      	ldr	r3, [r7, #4]
    db76:	681b      	ldr	r3, [r3, #0]
    db78:	4a0a      	ldr	r2, [pc, #40]	; (dba4 <mp_obj_get_int_maybe+0x7c>)
    db7a:	4293      	cmp	r3, r2
    db7c:	d106      	bne.n	db8c <mp_obj_get_int_maybe+0x64>
        *value = mp_obj_int_get_checked(arg);
    db7e:	6878      	ldr	r0, [r7, #4]
    db80:	f002 fe1c 	bl	107bc <mp_obj_int_get_checked>
    db84:	4602      	mov	r2, r0
    db86:	683b      	ldr	r3, [r7, #0]
    db88:	601a      	str	r2, [r3, #0]
    db8a:	e001      	b.n	db90 <mp_obj_get_int_maybe+0x68>
    } else {
        return false;
    db8c:	2300      	movs	r3, #0
    db8e:	e000      	b.n	db92 <mp_obj_get_int_maybe+0x6a>
    }
    return true;
    db90:	2301      	movs	r3, #1
}
    db92:	4618      	mov	r0, r3
    db94:	3708      	adds	r7, #8
    db96:	46bd      	mov	sp, r7
    db98:	bd80      	pop	{r7, pc}
    db9a:	bf00      	nop
    db9c:	00021894 	.word	0x00021894
    dba0:	0002189c 	.word	0x0002189c
    dba4:	00022bbc 	.word	0x00022bbc

0000dba8 <mp_obj_get_array>:
}
#endif
#endif

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    dba8:	b580      	push	{r7, lr}
    dbaa:	b084      	sub	sp, #16
    dbac:	af00      	add	r7, sp, #0
    dbae:	60f8      	str	r0, [r7, #12]
    dbb0:	60b9      	str	r1, [r7, #8]
    dbb2:	607a      	str	r2, [r7, #4]
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    dbb4:	68f8      	ldr	r0, [r7, #12]
    dbb6:	f7ff fd69 	bl	d68c <MP_OBJ_IS_OBJ>
    dbba:	4603      	mov	r3, r0
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d00a      	beq.n	dbd6 <mp_obj_get_array+0x2e>
    dbc0:	68fb      	ldr	r3, [r7, #12]
    dbc2:	681b      	ldr	r3, [r3, #0]
    dbc4:	4a10      	ldr	r2, [pc, #64]	; (dc08 <mp_obj_get_array+0x60>)
    dbc6:	4293      	cmp	r3, r2
    dbc8:	d105      	bne.n	dbd6 <mp_obj_get_array+0x2e>
        mp_obj_tuple_get(o, len, items);
    dbca:	687a      	ldr	r2, [r7, #4]
    dbcc:	68b9      	ldr	r1, [r7, #8]
    dbce:	68f8      	ldr	r0, [r7, #12]
    dbd0:	f008 f858 	bl	15c84 <mp_obj_tuple_get>
    dbd4:	e013      	b.n	dbfe <mp_obj_get_array+0x56>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    dbd6:	68f8      	ldr	r0, [r7, #12]
    dbd8:	f7ff fd58 	bl	d68c <MP_OBJ_IS_OBJ>
    dbdc:	4603      	mov	r3, r0
    dbde:	2b00      	cmp	r3, #0
    dbe0:	d00a      	beq.n	dbf8 <mp_obj_get_array+0x50>
    dbe2:	68fb      	ldr	r3, [r7, #12]
    dbe4:	681b      	ldr	r3, [r3, #0]
    dbe6:	4a09      	ldr	r2, [pc, #36]	; (dc0c <mp_obj_get_array+0x64>)
    dbe8:	4293      	cmp	r3, r2
    dbea:	d105      	bne.n	dbf8 <mp_obj_get_array+0x50>
        mp_obj_list_get(o, len, items);
    dbec:	687a      	ldr	r2, [r7, #4]
    dbee:	68b9      	ldr	r1, [r7, #8]
    dbf0:	68f8      	ldr	r0, [r7, #12]
    dbf2:	f003 fd7c 	bl	116ee <mp_obj_list_get>
    dbf6:	e002      	b.n	dbfe <mp_obj_get_array+0x56>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("expected tuple/list");
    dbf8:	4805      	ldr	r0, [pc, #20]	; (dc10 <mp_obj_get_array+0x68>)
    dbfa:	f7ff f935 	bl	ce68 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object '%s' isn't a tuple or list", mp_obj_get_type_str(o)));
        }
    }
}
    dbfe:	bf00      	nop
    dc00:	3710      	adds	r7, #16
    dc02:	46bd      	mov	sp, r7
    dc04:	bd80      	pop	{r7, pc}
    dc06:	bf00      	nop
    dc08:	00023a20 	.word	0x00023a20
    dc0c:	00022e28 	.word	0x00022e28
    dc10:	00021720 	.word	0x00021720

0000dc14 <mp_obj_get_array_fixed_n>:

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    dc14:	b580      	push	{r7, lr}
    dc16:	b086      	sub	sp, #24
    dc18:	af00      	add	r7, sp, #0
    dc1a:	60f8      	str	r0, [r7, #12]
    dc1c:	60b9      	str	r1, [r7, #8]
    dc1e:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    mp_obj_get_array(o, &seq_len, items);
    dc20:	f107 0314 	add.w	r3, r7, #20
    dc24:	687a      	ldr	r2, [r7, #4]
    dc26:	4619      	mov	r1, r3
    dc28:	68f8      	ldr	r0, [r7, #12]
    dc2a:	f7ff ffbd 	bl	dba8 <mp_obj_get_array>
    if (seq_len != len) {
    dc2e:	697a      	ldr	r2, [r7, #20]
    dc30:	68bb      	ldr	r3, [r7, #8]
    dc32:	429a      	cmp	r2, r3
    dc34:	d002      	beq.n	dc3c <mp_obj_get_array_fixed_n+0x28>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_ValueError("tuple/list has wrong length");
    dc36:	4803      	ldr	r0, [pc, #12]	; (dc44 <mp_obj_get_array_fixed_n+0x30>)
    dc38:	f7ff f90b 	bl	ce52 <mp_raise_ValueError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
                "requested length %d but object has length %d", (int)len, (int)seq_len));
        }
    }
}
    dc3c:	bf00      	nop
    dc3e:	3718      	adds	r7, #24
    dc40:	46bd      	mov	sp, r7
    dc42:	bd80      	pop	{r7, pc}
    dc44:	00021734 	.word	0x00021734

0000dc48 <mp_get_index>:

// is_slice determines whether the index is a slice index
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    dc48:	b580      	push	{r7, lr}
    dc4a:	b086      	sub	sp, #24
    dc4c:	af00      	add	r7, sp, #0
    dc4e:	60f8      	str	r0, [r7, #12]
    dc50:	60b9      	str	r1, [r7, #8]
    dc52:	607a      	str	r2, [r7, #4]
    dc54:	70fb      	strb	r3, [r7, #3]
    mp_int_t i;
    if (MP_OBJ_IS_SMALL_INT(index)) {
    dc56:	6878      	ldr	r0, [r7, #4]
    dc58:	f7ff fcf4 	bl	d644 <MP_OBJ_IS_SMALL_INT>
    dc5c:	4603      	mov	r3, r0
    dc5e:	2b00      	cmp	r3, #0
    dc60:	d003      	beq.n	dc6a <mp_get_index+0x22>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	105b      	asrs	r3, r3, #1
    dc66:	617b      	str	r3, [r7, #20]
    dc68:	e00e      	b.n	dc88 <mp_get_index+0x40>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    dc6a:	f107 0314 	add.w	r3, r7, #20
    dc6e:	4619      	mov	r1, r3
    dc70:	6878      	ldr	r0, [r7, #4]
    dc72:	f7ff ff59 	bl	db28 <mp_obj_get_int_maybe>
    dc76:	4603      	mov	r3, r0
    dc78:	f083 0301 	eor.w	r3, r3, #1
    dc7c:	b2db      	uxtb	r3, r3
    dc7e:	2b00      	cmp	r3, #0
    dc80:	d002      	beq.n	dc88 <mp_get_index+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("indices must be integers");
    dc82:	4816      	ldr	r0, [pc, #88]	; (dcdc <mp_get_index+0x94>)
    dc84:	f7ff f8f0 	bl	ce68 <mp_raise_TypeError>
                "%q indices must be integers, not %s",
                type->name, mp_obj_get_type_str(index)));
        }
    }

    if (i < 0) {
    dc88:	697b      	ldr	r3, [r7, #20]
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	da04      	bge.n	dc98 <mp_get_index+0x50>
        i += len;
    dc8e:	697b      	ldr	r3, [r7, #20]
    dc90:	461a      	mov	r2, r3
    dc92:	68bb      	ldr	r3, [r7, #8]
    dc94:	4413      	add	r3, r2
    dc96:	617b      	str	r3, [r7, #20]
    }
    if (is_slice) {
    dc98:	78fb      	ldrb	r3, [r7, #3]
    dc9a:	2b00      	cmp	r3, #0
    dc9c:	d00d      	beq.n	dcba <mp_get_index+0x72>
        if (i < 0) {
    dc9e:	697b      	ldr	r3, [r7, #20]
    dca0:	2b00      	cmp	r3, #0
    dca2:	da02      	bge.n	dcaa <mp_get_index+0x62>
            i = 0;
    dca4:	2300      	movs	r3, #0
    dca6:	617b      	str	r3, [r7, #20]
    dca8:	e013      	b.n	dcd2 <mp_get_index+0x8a>
        } else if ((mp_uint_t)i > len) {
    dcaa:	697b      	ldr	r3, [r7, #20]
    dcac:	461a      	mov	r2, r3
    dcae:	68bb      	ldr	r3, [r7, #8]
    dcb0:	429a      	cmp	r2, r3
    dcb2:	d90e      	bls.n	dcd2 <mp_get_index+0x8a>
            i = len;
    dcb4:	68bb      	ldr	r3, [r7, #8]
    dcb6:	617b      	str	r3, [r7, #20]
    dcb8:	e00b      	b.n	dcd2 <mp_get_index+0x8a>
        }
    } else {
        if (i < 0 || (mp_uint_t)i >= len) {
    dcba:	697b      	ldr	r3, [r7, #20]
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	db04      	blt.n	dcca <mp_get_index+0x82>
    dcc0:	697b      	ldr	r3, [r7, #20]
    dcc2:	461a      	mov	r2, r3
    dcc4:	68bb      	ldr	r3, [r7, #8]
    dcc6:	429a      	cmp	r2, r3
    dcc8:	d303      	bcc.n	dcd2 <mp_get_index+0x8a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_IndexError, "index out of range");
    dcca:	4905      	ldr	r1, [pc, #20]	; (dce0 <mp_get_index+0x98>)
    dccc:	4805      	ldr	r0, [pc, #20]	; (dce4 <mp_get_index+0x9c>)
    dcce:	f7ff f8a9 	bl	ce24 <mp_raise_msg>
            }
        }
    }

    // By this point 0 <= i <= len and so fits in a size_t
    return (size_t)i;
    dcd2:	697b      	ldr	r3, [r7, #20]
}
    dcd4:	4618      	mov	r0, r3
    dcd6:	3718      	adds	r7, #24
    dcd8:	46bd      	mov	sp, r7
    dcda:	bd80      	pop	{r7, pc}
    dcdc:	00021750 	.word	0x00021750
    dce0:	0002176c 	.word	0x0002176c
    dce4:	0002218c 	.word	0x0002218c

0000dce8 <mp_obj_id>:

mp_obj_t mp_obj_id(mp_obj_t o_in) {
    dce8:	b580      	push	{r7, lr}
    dcea:	b084      	sub	sp, #16
    dcec:	af00      	add	r7, sp, #0
    dcee:	6078      	str	r0, [r7, #4]
    mp_int_t id = (mp_int_t)o_in;
    dcf0:	687b      	ldr	r3, [r7, #4]
    dcf2:	60fb      	str	r3, [r7, #12]
    if (!MP_OBJ_IS_OBJ(o_in)) {
    dcf4:	6878      	ldr	r0, [r7, #4]
    dcf6:	f7ff fcc9 	bl	d68c <MP_OBJ_IS_OBJ>
    dcfa:	4603      	mov	r3, r0
    dcfc:	f083 0301 	eor.w	r3, r3, #1
    dd00:	b2db      	uxtb	r3, r3
    dd02:	2b00      	cmp	r3, #0
    dd04:	d004      	beq.n	dd10 <mp_obj_id+0x28>
        return mp_obj_new_int(id);
    dd06:	68f8      	ldr	r0, [r7, #12]
    dd08:	f002 fd30 	bl	1076c <mp_obj_new_int>
    dd0c:	4603      	mov	r3, r0
    dd0e:	e00c      	b.n	dd2a <mp_obj_id+0x42>
    } else if (id >= 0) {
    dd10:	68fb      	ldr	r3, [r7, #12]
    dd12:	2b00      	cmp	r3, #0
    dd14:	db04      	blt.n	dd20 <mp_obj_id+0x38>
        // Many OSes and CPUs have affinity for putting "user" memories
        // into low half of address space, and "system" into upper half.
        // We're going to take advantage of that and return small int
        // (signed) for such "user" addresses.
        return MP_OBJ_NEW_SMALL_INT(id);
    dd16:	68fb      	ldr	r3, [r7, #12]
    dd18:	005b      	lsls	r3, r3, #1
    dd1a:	f043 0301 	orr.w	r3, r3, #1
    dd1e:	e004      	b.n	dd2a <mp_obj_id+0x42>
    } else {
        // If that didn't work, well, let's return long int, just as
        // a (big) positive value, so it will never clash with the range
        // of small int returned in previous case.
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    dd20:	68fb      	ldr	r3, [r7, #12]
    dd22:	4618      	mov	r0, r3
    dd24:	f002 fd08 	bl	10738 <mp_obj_new_int_from_uint>
    dd28:	4603      	mov	r3, r0
    }
}
    dd2a:	4618      	mov	r0, r3
    dd2c:	3710      	adds	r7, #16
    dd2e:	46bd      	mov	sp, r7
    dd30:	bd80      	pop	{r7, pc}

0000dd32 <mp_obj_len>:

// will raise a TypeError if object has no length
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    dd32:	b580      	push	{r7, lr}
    dd34:	b084      	sub	sp, #16
    dd36:	af00      	add	r7, sp, #0
    dd38:	6078      	str	r0, [r7, #4]
    mp_obj_t len = mp_obj_len_maybe(o_in);
    dd3a:	6878      	ldr	r0, [r7, #4]
    dd3c:	f000 f80e 	bl	dd5c <mp_obj_len_maybe>
    dd40:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    dd42:	68fb      	ldr	r3, [r7, #12]
    dd44:	2b00      	cmp	r3, #0
    dd46:	d102      	bne.n	dd4e <mp_obj_len+0x1c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object has no len");
    dd48:	4803      	ldr	r0, [pc, #12]	; (dd58 <mp_obj_len+0x26>)
    dd4a:	f7ff f88d 	bl	ce68 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object of type '%s' has no len()", mp_obj_get_type_str(o_in)));
        }
    } else {
        return len;
    dd4e:	68fb      	ldr	r3, [r7, #12]
    }
}
    dd50:	4618      	mov	r0, r3
    dd52:	3710      	adds	r7, #16
    dd54:	46bd      	mov	sp, r7
    dd56:	bd80      	pop	{r7, pc}
    dd58:	00021780 	.word	0x00021780

0000dd5c <mp_obj_len_maybe>:

// may return MP_OBJ_NULL
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    dd5c:	b580      	push	{r7, lr}
    dd5e:	b084      	sub	sp, #16
    dd60:	af00      	add	r7, sp, #0
    dd62:	6078      	str	r0, [r7, #4]
    if (
#if !MICROPY_PY_BUILTINS_STR_UNICODE
        // It's simple - unicode is slow, non-unicode is fast
        MP_OBJ_IS_STR(o_in) ||
    dd64:	6878      	ldr	r0, [r7, #4]
    dd66:	f7ff fc7f 	bl	d668 <MP_OBJ_IS_QSTR>
    dd6a:	4603      	mov	r3, r0
    if (
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d115      	bne.n	dd9c <mp_obj_len_maybe+0x40>
        MP_OBJ_IS_STR(o_in) ||
    dd70:	6878      	ldr	r0, [r7, #4]
    dd72:	f7ff fc8b 	bl	d68c <MP_OBJ_IS_OBJ>
    dd76:	4603      	mov	r3, r0
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d004      	beq.n	dd86 <mp_obj_len_maybe+0x2a>
    dd7c:	687b      	ldr	r3, [r7, #4]
    dd7e:	681b      	ldr	r3, [r3, #0]
    dd80:	4a1b      	ldr	r2, [pc, #108]	; (ddf0 <mp_obj_len_maybe+0x94>)
    dd82:	4293      	cmp	r3, r2
    dd84:	d00a      	beq.n	dd9c <mp_obj_len_maybe+0x40>
#endif
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    dd86:	6878      	ldr	r0, [r7, #4]
    dd88:	f7ff fc80 	bl	d68c <MP_OBJ_IS_OBJ>
    dd8c:	4603      	mov	r3, r0
        MP_OBJ_IS_STR(o_in) ||
    dd8e:	2b00      	cmp	r3, #0
    dd90:	d019      	beq.n	ddc6 <mp_obj_len_maybe+0x6a>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    dd92:	687b      	ldr	r3, [r7, #4]
    dd94:	681b      	ldr	r3, [r3, #0]
    dd96:	4a17      	ldr	r2, [pc, #92]	; (ddf4 <mp_obj_len_maybe+0x98>)
    dd98:	4293      	cmp	r3, r2
    dd9a:	d114      	bne.n	ddc6 <mp_obj_len_maybe+0x6a>
        GET_STR_LEN(o_in, l);
    dd9c:	6878      	ldr	r0, [r7, #4]
    dd9e:	f7ff fc63 	bl	d668 <MP_OBJ_IS_QSTR>
    dda2:	4603      	mov	r3, r0
    dda4:	2b00      	cmp	r3, #0
    dda6:	d006      	beq.n	ddb6 <mp_obj_len_maybe+0x5a>
    dda8:	687b      	ldr	r3, [r7, #4]
    ddaa:	089b      	lsrs	r3, r3, #2
    ddac:	4618      	mov	r0, r3
    ddae:	f7f3 fa3c 	bl	122a <qstr_len>
    ddb2:	60f8      	str	r0, [r7, #12]
    ddb4:	e002      	b.n	ddbc <mp_obj_len_maybe+0x60>
    ddb6:	687b      	ldr	r3, [r7, #4]
    ddb8:	689b      	ldr	r3, [r3, #8]
    ddba:	60fb      	str	r3, [r7, #12]
        return MP_OBJ_NEW_SMALL_INT(l);
    ddbc:	68fb      	ldr	r3, [r7, #12]
    ddbe:	005b      	lsls	r3, r3, #1
    ddc0:	f043 0301 	orr.w	r3, r3, #1
    ddc4:	e00f      	b.n	dde6 <mp_obj_len_maybe+0x8a>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    ddc6:	6878      	ldr	r0, [r7, #4]
    ddc8:	f7ff fc72 	bl	d6b0 <mp_obj_get_type>
    ddcc:	60b8      	str	r0, [r7, #8]
        if (type->unary_op != NULL) {
    ddce:	68bb      	ldr	r3, [r7, #8]
    ddd0:	695b      	ldr	r3, [r3, #20]
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d006      	beq.n	dde4 <mp_obj_len_maybe+0x88>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    ddd6:	68bb      	ldr	r3, [r7, #8]
    ddd8:	695b      	ldr	r3, [r3, #20]
    ddda:	6879      	ldr	r1, [r7, #4]
    dddc:	2005      	movs	r0, #5
    ddde:	4798      	blx	r3
    dde0:	4603      	mov	r3, r0
    dde2:	e000      	b.n	dde6 <mp_obj_len_maybe+0x8a>
        } else {
            return MP_OBJ_NULL;
    dde4:	2300      	movs	r3, #0
        }
    }
}
    dde6:	4618      	mov	r0, r3
    dde8:	3710      	adds	r7, #16
    ddea:	46bd      	mov	sp, r7
    ddec:	bd80      	pop	{r7, pc}
    ddee:	bf00      	nop
    ddf0:	0002379c 	.word	0x0002379c
    ddf4:	000237d8 	.word	0x000237d8

0000ddf8 <mp_obj_subscr>:

mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    ddf8:	b580      	push	{r7, lr}
    ddfa:	b086      	sub	sp, #24
    ddfc:	af00      	add	r7, sp, #0
    ddfe:	60f8      	str	r0, [r7, #12]
    de00:	60b9      	str	r1, [r7, #8]
    de02:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(base);
    de04:	68f8      	ldr	r0, [r7, #12]
    de06:	f7ff fc53 	bl	d6b0 <mp_obj_get_type>
    de0a:	6178      	str	r0, [r7, #20]
    if (type->subscr != NULL) {
    de0c:	697b      	ldr	r3, [r7, #20]
    de0e:	6a1b      	ldr	r3, [r3, #32]
    de10:	2b00      	cmp	r3, #0
    de12:	d00b      	beq.n	de2c <mp_obj_subscr+0x34>
        mp_obj_t ret = type->subscr(base, index, value);
    de14:	697b      	ldr	r3, [r7, #20]
    de16:	6a1b      	ldr	r3, [r3, #32]
    de18:	687a      	ldr	r2, [r7, #4]
    de1a:	68b9      	ldr	r1, [r7, #8]
    de1c:	68f8      	ldr	r0, [r7, #12]
    de1e:	4798      	blx	r3
    de20:	6138      	str	r0, [r7, #16]
        if (ret != MP_OBJ_NULL) {
    de22:	693b      	ldr	r3, [r7, #16]
    de24:	2b00      	cmp	r3, #0
    de26:	d001      	beq.n	de2c <mp_obj_subscr+0x34>
            return ret;
    de28:	693b      	ldr	r3, [r7, #16]
    de2a:	e00e      	b.n	de4a <mp_obj_subscr+0x52>
        }
        // TODO: call base classes here?
    }
    if (value == MP_OBJ_NULL) {
    de2c:	687b      	ldr	r3, [r7, #4]
    de2e:	2b00      	cmp	r3, #0
    de30:	d102      	bne.n	de38 <mp_obj_subscr+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object doesn't support item deletion");
    de32:	4808      	ldr	r0, [pc, #32]	; (de54 <mp_obj_subscr+0x5c>)
    de34:	f7ff f818 	bl	ce68 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object doesn't support item deletion", mp_obj_get_type_str(base)));
        }
    } else if (value == MP_OBJ_SENTINEL) {
    de38:	687b      	ldr	r3, [r7, #4]
    de3a:	2b08      	cmp	r3, #8
    de3c:	d102      	bne.n	de44 <mp_obj_subscr+0x4c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object isn't subscriptable");
    de3e:	4806      	ldr	r0, [pc, #24]	; (de58 <mp_obj_subscr+0x60>)
    de40:	f7ff f812 	bl	ce68 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object isn't subscriptable", mp_obj_get_type_str(base)));
        }
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object doesn't support item assignment");
    de44:	4805      	ldr	r0, [pc, #20]	; (de5c <mp_obj_subscr+0x64>)
    de46:	f7ff f80f 	bl	ce68 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object doesn't support item assignment", mp_obj_get_type_str(base)));
        }
    }
}
    de4a:	4618      	mov	r0, r3
    de4c:	3718      	adds	r7, #24
    de4e:	46bd      	mov	sp, r7
    de50:	bd80      	pop	{r7, pc}
    de52:	bf00      	nop
    de54:	00021794 	.word	0x00021794
    de58:	000217bc 	.word	0x000217bc
    de5c:	000217d8 	.word	0x000217d8

0000de60 <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    de60:	b480      	push	{r7}
    de62:	b083      	sub	sp, #12
    de64:	af00      	add	r7, sp, #0
    de66:	6078      	str	r0, [r7, #4]
    return self;
    de68:	687b      	ldr	r3, [r7, #4]
}
    de6a:	4618      	mov	r0, r3
    de6c:	370c      	adds	r7, #12
    de6e:	46bd      	mov	sp, r7
    de70:	f85d 7b04 	ldr.w	r7, [sp], #4
    de74:	4770      	bx	lr

0000de76 <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    de76:	b480      	push	{r7}
    de78:	b083      	sub	sp, #12
    de7a:	af00      	add	r7, sp, #0
    de7c:	6078      	str	r0, [r7, #4]
    de7e:	6039      	str	r1, [r7, #0]
    (void)iter_buf;
    return self;
    de80:	687b      	ldr	r3, [r7, #4]
}
    de82:	4618      	mov	r0, r3
    de84:	370c      	adds	r7, #12
    de86:	46bd      	mov	sp, r7
    de88:	f85d 7b04 	ldr.w	r7, [sp], #4
    de8c:	4770      	bx	lr

0000de8e <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    de8e:	b580      	push	{r7, lr}
    de90:	b086      	sub	sp, #24
    de92:	af00      	add	r7, sp, #0
    de94:	60f8      	str	r0, [r7, #12]
    de96:	60b9      	str	r1, [r7, #8]
    de98:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(obj);
    de9a:	68f8      	ldr	r0, [r7, #12]
    de9c:	f7ff fc08 	bl	d6b0 <mp_obj_get_type>
    dea0:	6178      	str	r0, [r7, #20]
    if (type->buffer_p.get_buffer == NULL) {
    dea2:	697b      	ldr	r3, [r7, #20]
    dea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dea6:	2b00      	cmp	r3, #0
    dea8:	d101      	bne.n	deae <mp_get_buffer+0x20>
        return false;
    deaa:	2300      	movs	r3, #0
    deac:	e00c      	b.n	dec8 <mp_get_buffer+0x3a>
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    deae:	697b      	ldr	r3, [r7, #20]
    deb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    deb2:	687a      	ldr	r2, [r7, #4]
    deb4:	68b9      	ldr	r1, [r7, #8]
    deb6:	68f8      	ldr	r0, [r7, #12]
    deb8:	4798      	blx	r3
    deba:	6138      	str	r0, [r7, #16]
    if (ret != 0) {
    debc:	693b      	ldr	r3, [r7, #16]
    debe:	2b00      	cmp	r3, #0
    dec0:	d001      	beq.n	dec6 <mp_get_buffer+0x38>
        return false;
    dec2:	2300      	movs	r3, #0
    dec4:	e000      	b.n	dec8 <mp_get_buffer+0x3a>
    }
    return true;
    dec6:	2301      	movs	r3, #1
}
    dec8:	4618      	mov	r0, r3
    deca:	3718      	adds	r7, #24
    decc:	46bd      	mov	sp, r7
    dece:	bd80      	pop	{r7, pc}

0000ded0 <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    ded0:	b580      	push	{r7, lr}
    ded2:	b084      	sub	sp, #16
    ded4:	af00      	add	r7, sp, #0
    ded6:	60f8      	str	r0, [r7, #12]
    ded8:	60b9      	str	r1, [r7, #8]
    deda:	607a      	str	r2, [r7, #4]
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    dedc:	687a      	ldr	r2, [r7, #4]
    dede:	68b9      	ldr	r1, [r7, #8]
    dee0:	68f8      	ldr	r0, [r7, #12]
    dee2:	f7ff ffd4 	bl	de8e <mp_get_buffer>
    dee6:	4603      	mov	r3, r0
    dee8:	f083 0301 	eor.w	r3, r3, #1
    deec:	b2db      	uxtb	r3, r3
    deee:	2b00      	cmp	r3, #0
    def0:	d002      	beq.n	def8 <mp_get_buffer_raise+0x28>
        mp_raise_TypeError("object with buffer protocol required");
    def2:	4803      	ldr	r0, [pc, #12]	; (df00 <mp_get_buffer_raise+0x30>)
    def4:	f7fe ffb8 	bl	ce68 <mp_raise_TypeError>
    }
}
    def8:	bf00      	nop
    defa:	3710      	adds	r7, #16
    defc:	46bd      	mov	sp, r7
    defe:	bd80      	pop	{r7, pc}
    df00:	00021808 	.word	0x00021808

0000df04 <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    df04:	b480      	push	{r7}
    df06:	b083      	sub	sp, #12
    df08:	af00      	add	r7, sp, #0
    df0a:	6078      	str	r0, [r7, #4]
    df0c:	6039      	str	r1, [r7, #0]
    switch (op) {
    df0e:	687b      	ldr	r3, [r7, #4]
    df10:	2b06      	cmp	r3, #6
    df12:	d104      	bne.n	df1e <mp_generic_unary_op+0x1a>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    df14:	683b      	ldr	r3, [r7, #0]
    df16:	005b      	lsls	r3, r3, #1
    df18:	f043 0301 	orr.w	r3, r3, #1
    df1c:	e000      	b.n	df20 <mp_generic_unary_op+0x1c>
        default: return MP_OBJ_NULL; // op not supported
    df1e:	2300      	movs	r3, #0
    }
}
    df20:	4618      	mov	r0, r3
    df22:	370c      	adds	r7, #12
    df24:	46bd      	mov	sp, r7
    df26:	f85d 7b04 	ldr.w	r7, [sp], #4
    df2a:	4770      	bx	lr

0000df2c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    df2c:	b480      	push	{r7}
    df2e:	b083      	sub	sp, #12
    df30:	af00      	add	r7, sp, #0
    df32:	6078      	str	r0, [r7, #4]
    df34:	687b      	ldr	r3, [r7, #4]
    df36:	2b00      	cmp	r3, #0
    df38:	d001      	beq.n	df3e <mp_obj_new_bool+0x12>
    df3a:	4b04      	ldr	r3, [pc, #16]	; (df4c <mp_obj_new_bool+0x20>)
    df3c:	e000      	b.n	df40 <mp_obj_new_bool+0x14>
    df3e:	4b04      	ldr	r3, [pc, #16]	; (df50 <mp_obj_new_bool+0x24>)
    df40:	4618      	mov	r0, r3
    df42:	370c      	adds	r7, #12
    df44:	46bd      	mov	sp, r7
    df46:	f85d 7b04 	ldr.w	r7, [sp], #4
    df4a:	4770      	bx	lr
    df4c:	0002189c 	.word	0x0002189c
    df50:	00021894 	.word	0x00021894

0000df54 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    df54:	b580      	push	{r7, lr}
    df56:	b084      	sub	sp, #16
    df58:	af00      	add	r7, sp, #0
    df5a:	60f8      	str	r0, [r7, #12]
    df5c:	60b9      	str	r1, [r7, #8]
    df5e:	607a      	str	r2, [r7, #4]
    df60:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    df62:	687b      	ldr	r3, [r7, #4]
    df64:	045a      	lsls	r2, r3, #17
    df66:	683b      	ldr	r3, [r7, #0]
    df68:	005b      	lsls	r3, r3, #1
    df6a:	431a      	orrs	r2, r3
    df6c:	7e3b      	ldrb	r3, [r7, #24]
    df6e:	2b00      	cmp	r3, #0
    df70:	d001      	beq.n	df76 <mp_arg_check_num+0x22>
    df72:	2301      	movs	r3, #1
    df74:	e000      	b.n	df78 <mp_arg_check_num+0x24>
    df76:	2300      	movs	r3, #0
    df78:	4313      	orrs	r3, r2
    df7a:	461a      	mov	r2, r3
    df7c:	68b9      	ldr	r1, [r7, #8]
    df7e:	68f8      	ldr	r0, [r7, #12]
    df80:	f7fe ff98 	bl	ceb4 <mp_arg_check_num_sig>
}
    df84:	bf00      	nop
    df86:	3710      	adds	r7, #16
    df88:	46bd      	mov	sp, r7
    df8a:	bd80      	pop	{r7, pc}

0000df8c <bool_print>:
typedef struct _mp_obj_bool_t {
    mp_obj_base_t base;
    bool value;
} mp_obj_bool_t;

STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    df8c:	b580      	push	{r7, lr}
    df8e:	b086      	sub	sp, #24
    df90:	af00      	add	r7, sp, #0
    df92:	60f8      	str	r0, [r7, #12]
    df94:	60b9      	str	r1, [r7, #8]
    df96:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(self_in);
    df98:	68bb      	ldr	r3, [r7, #8]
    df9a:	617b      	str	r3, [r7, #20]
            mp_print_str(print, "true");
        } else {
            mp_print_str(print, "false");
        }
    } else {
        if (self->value) {
    df9c:	697b      	ldr	r3, [r7, #20]
    df9e:	791b      	ldrb	r3, [r3, #4]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d004      	beq.n	dfae <bool_print+0x22>
            mp_print_str(print, "True");
    dfa4:	4906      	ldr	r1, [pc, #24]	; (dfc0 <bool_print+0x34>)
    dfa6:	68f8      	ldr	r0, [r7, #12]
    dfa8:	f7f3 fc8c 	bl	18c4 <mp_print_str>
        } else {
            mp_print_str(print, "False");
        }
    }
}
    dfac:	e003      	b.n	dfb6 <bool_print+0x2a>
            mp_print_str(print, "False");
    dfae:	4905      	ldr	r1, [pc, #20]	; (dfc4 <bool_print+0x38>)
    dfb0:	68f8      	ldr	r0, [r7, #12]
    dfb2:	f7f3 fc87 	bl	18c4 <mp_print_str>
}
    dfb6:	bf00      	nop
    dfb8:	3718      	adds	r7, #24
    dfba:	46bd      	mov	sp, r7
    dfbc:	bd80      	pop	{r7, pc}
    dfbe:	bf00      	nop
    dfc0:	00021848 	.word	0x00021848
    dfc4:	00021850 	.word	0x00021850

0000dfc8 <bool_make_new>:

STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    dfc8:	b580      	push	{r7, lr}
    dfca:	b086      	sub	sp, #24
    dfcc:	af02      	add	r7, sp, #8
    dfce:	60f8      	str	r0, [r7, #12]
    dfd0:	60b9      	str	r1, [r7, #8]
    dfd2:	607a      	str	r2, [r7, #4]
    dfd4:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    dfd6:	2300      	movs	r3, #0
    dfd8:	9300      	str	r3, [sp, #0]
    dfda:	2301      	movs	r3, #1
    dfdc:	2200      	movs	r2, #0
    dfde:	6879      	ldr	r1, [r7, #4]
    dfe0:	68b8      	ldr	r0, [r7, #8]
    dfe2:	f7ff ffb7 	bl	df54 <mp_arg_check_num>

    if (n_args == 0) {
    dfe6:	68bb      	ldr	r3, [r7, #8]
    dfe8:	2b00      	cmp	r3, #0
    dfea:	d101      	bne.n	dff0 <bool_make_new+0x28>
        return mp_const_false;
    dfec:	4b07      	ldr	r3, [pc, #28]	; (e00c <bool_make_new+0x44>)
    dfee:	e009      	b.n	e004 <bool_make_new+0x3c>
    } else {
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    dff0:	683b      	ldr	r3, [r7, #0]
    dff2:	681b      	ldr	r3, [r3, #0]
    dff4:	4618      	mov	r0, r3
    dff6:	f7ff fc37 	bl	d868 <mp_obj_is_true>
    dffa:	4603      	mov	r3, r0
    dffc:	4618      	mov	r0, r3
    dffe:	f7ff ff95 	bl	df2c <mp_obj_new_bool>
    e002:	4603      	mov	r3, r0
    }
}
    e004:	4618      	mov	r0, r3
    e006:	3710      	adds	r7, #16
    e008:	46bd      	mov	sp, r7
    e00a:	bd80      	pop	{r7, pc}
    e00c:	00021894 	.word	0x00021894

0000e010 <bool_unary_op>:

STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e010:	b580      	push	{r7, lr}
    e012:	b084      	sub	sp, #16
    e014:	af00      	add	r7, sp, #0
    e016:	6078      	str	r0, [r7, #4]
    e018:	6039      	str	r1, [r7, #0]
    if (op == MP_UNARY_OP_LEN) {
    e01a:	687b      	ldr	r3, [r7, #4]
    e01c:	2b05      	cmp	r3, #5
    e01e:	d101      	bne.n	e024 <bool_unary_op+0x14>
        return MP_OBJ_NULL;
    e020:	2300      	movs	r3, #0
    e022:	e00b      	b.n	e03c <bool_unary_op+0x2c>
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    e024:	683b      	ldr	r3, [r7, #0]
    e026:	60fb      	str	r3, [r7, #12]
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    e028:	68fb      	ldr	r3, [r7, #12]
    e02a:	791b      	ldrb	r3, [r3, #4]
    e02c:	005b      	lsls	r3, r3, #1
    e02e:	f043 0301 	orr.w	r3, r3, #1
    e032:	4619      	mov	r1, r3
    e034:	6878      	ldr	r0, [r7, #4]
    e036:	f7fd fae3 	bl	b600 <mp_unary_op>
    e03a:	4603      	mov	r3, r0
}
    e03c:	4618      	mov	r0, r3
    e03e:	3710      	adds	r7, #16
    e040:	46bd      	mov	sp, r7
    e042:	bd80      	pop	{r7, pc}

0000e044 <bool_binary_op>:

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e044:	b580      	push	{r7, lr}
    e046:	b086      	sub	sp, #24
    e048:	af00      	add	r7, sp, #0
    e04a:	60f8      	str	r0, [r7, #12]
    e04c:	60b9      	str	r1, [r7, #8]
    e04e:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    e050:	68bb      	ldr	r3, [r7, #8]
    e052:	617b      	str	r3, [r7, #20]
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    e054:	697b      	ldr	r3, [r7, #20]
    e056:	791b      	ldrb	r3, [r3, #4]
    e058:	005b      	lsls	r3, r3, #1
    e05a:	f043 0301 	orr.w	r3, r3, #1
    e05e:	687a      	ldr	r2, [r7, #4]
    e060:	4619      	mov	r1, r3
    e062:	68f8      	ldr	r0, [r7, #12]
    e064:	f7fd fbbc 	bl	b7e0 <mp_binary_op>
    e068:	4603      	mov	r3, r0
}
    e06a:	4618      	mov	r0, r3
    e06c:	3718      	adds	r7, #24
    e06e:	46bd      	mov	sp, r7
    e070:	bd80      	pop	{r7, pc}
    e072:	bf00      	nop

0000e074 <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e074:	b580      	push	{r7, lr}
    e076:	b088      	sub	sp, #32
    e078:	af00      	add	r7, sp, #0
    e07a:	60f8      	str	r0, [r7, #12]
    e07c:	60b9      	str	r1, [r7, #8]
    e07e:	607a      	str	r2, [r7, #4]
    e080:	603b      	str	r3, [r7, #0]
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    e082:	683b      	ldr	r3, [r7, #0]
    e084:	005a      	lsls	r2, r3, #1
    e086:	687b      	ldr	r3, [r7, #4]
    e088:	4413      	add	r3, r2
    e08a:	617b      	str	r3, [r7, #20]
    mp_obj_t *args2 = NULL;
    e08c:	2300      	movs	r3, #0
    e08e:	61fb      	str	r3, [r7, #28]
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    e090:	2300      	movs	r3, #0
    e092:	61bb      	str	r3, [r7, #24]
    if (n_total > 4) {
    e094:	697b      	ldr	r3, [r7, #20]
    e096:	2b04      	cmp	r3, #4
    e098:	d908      	bls.n	e0ac <mp_call_method_self_n_kw+0x38>
        // try to use heap to allocate temporary args array
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    e09a:	697b      	ldr	r3, [r7, #20]
    e09c:	3301      	adds	r3, #1
    e09e:	009b      	lsls	r3, r3, #2
    e0a0:	4618      	mov	r0, r3
    e0a2:	f7f2 f952 	bl	34a <m_malloc_maybe>
    e0a6:	61f8      	str	r0, [r7, #28]
        free_args2 = args2;
    e0a8:	69fb      	ldr	r3, [r7, #28]
    e0aa:	61bb      	str	r3, [r7, #24]
    }
    if (args2 == NULL) {
    e0ac:	69fb      	ldr	r3, [r7, #28]
    e0ae:	2b00      	cmp	r3, #0
    e0b0:	d10d      	bne.n	e0ce <mp_call_method_self_n_kw+0x5a>
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    e0b2:	697b      	ldr	r3, [r7, #20]
    e0b4:	3301      	adds	r3, #1
    e0b6:	009b      	lsls	r3, r3, #2
    e0b8:	3307      	adds	r3, #7
    e0ba:	3307      	adds	r3, #7
    e0bc:	08db      	lsrs	r3, r3, #3
    e0be:	00db      	lsls	r3, r3, #3
    e0c0:	ebad 0d03 	sub.w	sp, sp, r3
    e0c4:	466b      	mov	r3, sp
    e0c6:	3307      	adds	r3, #7
    e0c8:	08db      	lsrs	r3, r3, #3
    e0ca:	00db      	lsls	r3, r3, #3
    e0cc:	61fb      	str	r3, [r7, #28]
    }
    #endif
    args2[0] = self;
    e0ce:	69fb      	ldr	r3, [r7, #28]
    e0d0:	68ba      	ldr	r2, [r7, #8]
    e0d2:	601a      	str	r2, [r3, #0]
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    e0d4:	69fb      	ldr	r3, [r7, #28]
    e0d6:	1d18      	adds	r0, r3, #4
    e0d8:	697b      	ldr	r3, [r7, #20]
    e0da:	009b      	lsls	r3, r3, #2
    e0dc:	461a      	mov	r2, r3
    e0de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e0e0:	f00e fcfa 	bl	1cad8 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    e0e4:	687b      	ldr	r3, [r7, #4]
    e0e6:	1c59      	adds	r1, r3, #1
    e0e8:	69fb      	ldr	r3, [r7, #28]
    e0ea:	683a      	ldr	r2, [r7, #0]
    e0ec:	68f8      	ldr	r0, [r7, #12]
    e0ee:	f7fd fe0e 	bl	bd0e <mp_call_function_n_kw>
    e0f2:	6138      	str	r0, [r7, #16]
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    e0f4:	69bb      	ldr	r3, [r7, #24]
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d002      	beq.n	e100 <mp_call_method_self_n_kw+0x8c>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    e0fa:	69b8      	ldr	r0, [r7, #24]
    e0fc:	f7f2 f96c 	bl	3d8 <m_free>
    }
    #endif
    return res;
    e100:	693b      	ldr	r3, [r7, #16]
}
    e102:	4618      	mov	r0, r3
    e104:	3720      	adds	r7, #32
    e106:	46bd      	mov	sp, r7
    e108:	bd80      	pop	{r7, pc}

0000e10a <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e10a:	b580      	push	{r7, lr}
    e10c:	b088      	sub	sp, #32
    e10e:	af02      	add	r7, sp, #8
    e110:	60f8      	str	r0, [r7, #12]
    e112:	60b9      	str	r1, [r7, #8]
    e114:	607a      	str	r2, [r7, #4]
    e116:	603b      	str	r3, [r7, #0]
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    e118:	68fb      	ldr	r3, [r7, #12]
    e11a:	617b      	str	r3, [r7, #20]
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    e11c:	697b      	ldr	r3, [r7, #20]
    e11e:	6858      	ldr	r0, [r3, #4]
    e120:	697b      	ldr	r3, [r7, #20]
    e122:	6899      	ldr	r1, [r3, #8]
    e124:	683b      	ldr	r3, [r7, #0]
    e126:	9300      	str	r3, [sp, #0]
    e128:	687b      	ldr	r3, [r7, #4]
    e12a:	68ba      	ldr	r2, [r7, #8]
    e12c:	f7ff ffa2 	bl	e074 <mp_call_method_self_n_kw>
    e130:	4603      	mov	r3, r0
}
    e132:	4618      	mov	r0, r3
    e134:	3718      	adds	r7, #24
    e136:	46bd      	mov	sp, r7
    e138:	bd80      	pop	{r7, pc}

0000e13a <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    e13a:	b580      	push	{r7, lr}
    e13c:	b084      	sub	sp, #16
    e13e:	af00      	add	r7, sp, #0
    e140:	6078      	str	r0, [r7, #4]
    e142:	6039      	str	r1, [r7, #0]
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    e144:	200c      	movs	r0, #12
    e146:	f7f2 f8e9 	bl	31c <m_malloc>
    e14a:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_bound_meth;
    e14c:	68fb      	ldr	r3, [r7, #12]
    e14e:	4a06      	ldr	r2, [pc, #24]	; (e168 <mp_obj_new_bound_meth+0x2e>)
    e150:	601a      	str	r2, [r3, #0]
    o->meth = meth;
    e152:	68fb      	ldr	r3, [r7, #12]
    e154:	687a      	ldr	r2, [r7, #4]
    e156:	605a      	str	r2, [r3, #4]
    o->self = self;
    e158:	68fb      	ldr	r3, [r7, #12]
    e15a:	683a      	ldr	r2, [r7, #0]
    e15c:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    e15e:	68fb      	ldr	r3, [r7, #12]
}
    e160:	4618      	mov	r0, r3
    e162:	3710      	adds	r7, #16
    e164:	46bd      	mov	sp, r7
    e166:	bd80      	pop	{r7, pc}
    e168:	000218a4 	.word	0x000218a4

0000e16c <mp_obj_cell_get>:
typedef struct _mp_obj_cell_t {
    mp_obj_base_t base;
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    e16c:	b480      	push	{r7}
    e16e:	b085      	sub	sp, #20
    e170:	af00      	add	r7, sp, #0
    e172:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e174:	687b      	ldr	r3, [r7, #4]
    e176:	60fb      	str	r3, [r7, #12]
    return self->obj;
    e178:	68fb      	ldr	r3, [r7, #12]
    e17a:	685b      	ldr	r3, [r3, #4]
}
    e17c:	4618      	mov	r0, r3
    e17e:	3714      	adds	r7, #20
    e180:	46bd      	mov	sp, r7
    e182:	f85d 7b04 	ldr.w	r7, [sp], #4
    e186:	4770      	bx	lr

0000e188 <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    e188:	b480      	push	{r7}
    e18a:	b085      	sub	sp, #20
    e18c:	af00      	add	r7, sp, #0
    e18e:	6078      	str	r0, [r7, #4]
    e190:	6039      	str	r1, [r7, #0]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e192:	687b      	ldr	r3, [r7, #4]
    e194:	60fb      	str	r3, [r7, #12]
    self->obj = obj;
    e196:	68fb      	ldr	r3, [r7, #12]
    e198:	683a      	ldr	r2, [r7, #0]
    e19a:	605a      	str	r2, [r3, #4]
}
    e19c:	bf00      	nop
    e19e:	3714      	adds	r7, #20
    e1a0:	46bd      	mov	sp, r7
    e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    e1a6:	4770      	bx	lr

0000e1a8 <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    e1a8:	b580      	push	{r7, lr}
    e1aa:	b084      	sub	sp, #16
    e1ac:	af00      	add	r7, sp, #0
    e1ae:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    e1b0:	2008      	movs	r0, #8
    e1b2:	f7f2 f8b3 	bl	31c <m_malloc>
    e1b6:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_cell;
    e1b8:	68fb      	ldr	r3, [r7, #12]
    e1ba:	4a05      	ldr	r2, [pc, #20]	; (e1d0 <mp_obj_new_cell+0x28>)
    e1bc:	601a      	str	r2, [r3, #0]
    o->obj = obj;
    e1be:	68fb      	ldr	r3, [r7, #12]
    e1c0:	687a      	ldr	r2, [r7, #4]
    e1c2:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    e1c4:	68fb      	ldr	r3, [r7, #12]
}
    e1c6:	4618      	mov	r0, r3
    e1c8:	3710      	adds	r7, #16
    e1ca:	46bd      	mov	sp, r7
    e1cc:	bd80      	pop	{r7, pc}
    e1ce:	bf00      	nop
    e1d0:	000218e0 	.word	0x000218e0

0000e1d4 <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e1d4:	b580      	push	{r7, lr}
    e1d6:	b08e      	sub	sp, #56	; 0x38
    e1d8:	af00      	add	r7, sp, #0
    e1da:	60f8      	str	r0, [r7, #12]
    e1dc:	60b9      	str	r1, [r7, #8]
    e1de:	607a      	str	r2, [r7, #4]
    e1e0:	603b      	str	r3, [r7, #0]
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);
    e1e2:	68fb      	ldr	r3, [r7, #12]
    e1e4:	637b      	str	r3, [r7, #52]	; 0x34

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    e1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e1e8:	689a      	ldr	r2, [r3, #8]
    e1ea:	68bb      	ldr	r3, [r7, #8]
    e1ec:	441a      	add	r2, r3
    e1ee:	687b      	ldr	r3, [r7, #4]
    e1f0:	005b      	lsls	r3, r3, #1
    e1f2:	4413      	add	r3, r2
    e1f4:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_total <= 5) {
    e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e1f8:	2b05      	cmp	r3, #5
    e1fa:	d826      	bhi.n	e24a <closure_call+0x76>
        // use stack to allocate temporary args array
        mp_obj_t args2[5];
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e1fe:	f103 010c 	add.w	r1, r3, #12
    e202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e204:	689b      	ldr	r3, [r3, #8]
    e206:	009a      	lsls	r2, r3, #2
    e208:	f107 0314 	add.w	r3, r7, #20
    e20c:	4618      	mov	r0, r3
    e20e:	f00e fc63 	bl	1cad8 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e214:	689b      	ldr	r3, [r3, #8]
    e216:	009b      	lsls	r3, r3, #2
    e218:	f107 0214 	add.w	r2, r7, #20
    e21c:	18d0      	adds	r0, r2, r3
    e21e:	687b      	ldr	r3, [r7, #4]
    e220:	005a      	lsls	r2, r3, #1
    e222:	68bb      	ldr	r3, [r7, #8]
    e224:	4413      	add	r3, r2
    e226:	009b      	lsls	r3, r3, #2
    e228:	461a      	mov	r2, r3
    e22a:	6839      	ldr	r1, [r7, #0]
    e22c:	f00e fc54 	bl	1cad8 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e232:	6858      	ldr	r0, [r3, #4]
    e234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e236:	689a      	ldr	r2, [r3, #8]
    e238:	68bb      	ldr	r3, [r7, #8]
    e23a:	18d1      	adds	r1, r2, r3
    e23c:	f107 0314 	add.w	r3, r7, #20
    e240:	687a      	ldr	r2, [r7, #4]
    e242:	f7fd fd64 	bl	bd0e <mp_call_function_n_kw>
    e246:	4603      	mov	r3, r0
    e248:	e02c      	b.n	e2a4 <closure_call+0xd0>
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e24c:	009b      	lsls	r3, r3, #2
    e24e:	4618      	mov	r0, r3
    e250:	f7f2 f864 	bl	31c <m_malloc>
    e254:	62f8      	str	r0, [r7, #44]	; 0x2c
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e258:	f103 010c 	add.w	r1, r3, #12
    e25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e25e:	689b      	ldr	r3, [r3, #8]
    e260:	009b      	lsls	r3, r3, #2
    e262:	461a      	mov	r2, r3
    e264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e266:	f00e fc37 	bl	1cad8 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e26c:	689b      	ldr	r3, [r3, #8]
    e26e:	009b      	lsls	r3, r3, #2
    e270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e272:	18d0      	adds	r0, r2, r3
    e274:	687b      	ldr	r3, [r7, #4]
    e276:	005a      	lsls	r2, r3, #1
    e278:	68bb      	ldr	r3, [r7, #8]
    e27a:	4413      	add	r3, r2
    e27c:	009b      	lsls	r3, r3, #2
    e27e:	461a      	mov	r2, r3
    e280:	6839      	ldr	r1, [r7, #0]
    e282:	f00e fc29 	bl	1cad8 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e288:	6858      	ldr	r0, [r3, #4]
    e28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e28c:	689a      	ldr	r2, [r3, #8]
    e28e:	68bb      	ldr	r3, [r7, #8]
    e290:	18d1      	adds	r1, r2, r3
    e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e294:	687a      	ldr	r2, [r7, #4]
    e296:	f7fd fd3a 	bl	bd0e <mp_call_function_n_kw>
    e29a:	62b8      	str	r0, [r7, #40]	; 0x28
        m_del(mp_obj_t, args2, n_total);
    e29c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e29e:	f7f2 f89b 	bl	3d8 <m_free>
        return res;
    e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
}
    e2a4:	4618      	mov	r0, r3
    e2a6:	3738      	adds	r7, #56	; 0x38
    e2a8:	46bd      	mov	sp, r7
    e2aa:	bd80      	pop	{r7, pc}

0000e2ac <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    e2ac:	b580      	push	{r7, lr}
    e2ae:	b086      	sub	sp, #24
    e2b0:	af00      	add	r7, sp, #0
    e2b2:	60f8      	str	r0, [r7, #12]
    e2b4:	60b9      	str	r1, [r7, #8]
    e2b6:	607a      	str	r2, [r7, #4]
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    e2b8:	68bb      	ldr	r3, [r7, #8]
    e2ba:	3303      	adds	r3, #3
    e2bc:	009b      	lsls	r3, r3, #2
    e2be:	4618      	mov	r0, r3
    e2c0:	f7f2 f82c 	bl	31c <m_malloc>
    e2c4:	6178      	str	r0, [r7, #20]
    o->base.type = &closure_type;
    e2c6:	697b      	ldr	r3, [r7, #20]
    e2c8:	4a0a      	ldr	r2, [pc, #40]	; (e2f4 <mp_obj_new_closure+0x48>)
    e2ca:	601a      	str	r2, [r3, #0]
    o->fun = fun;
    e2cc:	697b      	ldr	r3, [r7, #20]
    e2ce:	68fa      	ldr	r2, [r7, #12]
    e2d0:	605a      	str	r2, [r3, #4]
    o->n_closed = n_closed_over;
    e2d2:	697b      	ldr	r3, [r7, #20]
    e2d4:	68ba      	ldr	r2, [r7, #8]
    e2d6:	609a      	str	r2, [r3, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    e2d8:	697b      	ldr	r3, [r7, #20]
    e2da:	f103 000c 	add.w	r0, r3, #12
    e2de:	68bb      	ldr	r3, [r7, #8]
    e2e0:	009b      	lsls	r3, r3, #2
    e2e2:	461a      	mov	r2, r3
    e2e4:	6879      	ldr	r1, [r7, #4]
    e2e6:	f00e fbf7 	bl	1cad8 <memcpy>
    return MP_OBJ_FROM_PTR(o);
    e2ea:	697b      	ldr	r3, [r7, #20]
}
    e2ec:	4618      	mov	r0, r3
    e2ee:	3718      	adds	r7, #24
    e2f0:	46bd      	mov	sp, r7
    e2f2:	bd80      	pop	{r7, pc}
    e2f4:	0002191c 	.word	0x0002191c

0000e2f8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    e2f8:	b480      	push	{r7}
    e2fa:	b083      	sub	sp, #12
    e2fc:	af00      	add	r7, sp, #0
    e2fe:	6078      	str	r0, [r7, #4]
    e300:	687b      	ldr	r3, [r7, #4]
    e302:	f003 0303 	and.w	r3, r3, #3
    e306:	2b00      	cmp	r3, #0
    e308:	bf0c      	ite	eq
    e30a:	2301      	moveq	r3, #1
    e30c:	2300      	movne	r3, #0
    e30e:	b2db      	uxtb	r3, r3
    e310:	4618      	mov	r0, r3
    e312:	370c      	adds	r7, #12
    e314:	46bd      	mov	sp, r7
    e316:	f85d 7b04 	ldr.w	r7, [sp], #4
    e31a:	4770      	bx	lr

0000e31c <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    e31c:	b480      	push	{r7}
    e31e:	b083      	sub	sp, #12
    e320:	af00      	add	r7, sp, #0
    e322:	6078      	str	r0, [r7, #4]
    e324:	6039      	str	r1, [r7, #0]
    e326:	687b      	ldr	r3, [r7, #4]
    e328:	689a      	ldr	r2, [r3, #8]
    e32a:	683b      	ldr	r3, [r7, #0]
    e32c:	00db      	lsls	r3, r3, #3
    e32e:	4413      	add	r3, r2
    e330:	681b      	ldr	r3, [r3, #0]
    e332:	2b00      	cmp	r3, #0
    e334:	d009      	beq.n	e34a <MP_MAP_SLOT_IS_FILLED+0x2e>
    e336:	687b      	ldr	r3, [r7, #4]
    e338:	689a      	ldr	r2, [r3, #8]
    e33a:	683b      	ldr	r3, [r7, #0]
    e33c:	00db      	lsls	r3, r3, #3
    e33e:	4413      	add	r3, r2
    e340:	681b      	ldr	r3, [r3, #0]
    e342:	2b08      	cmp	r3, #8
    e344:	d001      	beq.n	e34a <MP_MAP_SLOT_IS_FILLED+0x2e>
    e346:	2301      	movs	r3, #1
    e348:	e000      	b.n	e34c <MP_MAP_SLOT_IS_FILLED+0x30>
    e34a:	2300      	movs	r3, #0
    e34c:	f003 0301 	and.w	r3, r3, #1
    e350:	b2db      	uxtb	r3, r3
    e352:	4618      	mov	r0, r3
    e354:	370c      	adds	r7, #12
    e356:	46bd      	mov	sp, r7
    e358:	f85d 7b04 	ldr.w	r7, [sp], #4
    e35c:	4770      	bx	lr

0000e35e <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e35e:	b480      	push	{r7}
    e360:	b083      	sub	sp, #12
    e362:	af00      	add	r7, sp, #0
    e364:	6078      	str	r0, [r7, #4]
    e366:	687b      	ldr	r3, [r7, #4]
    e368:	2b00      	cmp	r3, #0
    e36a:	d001      	beq.n	e370 <mp_obj_new_bool+0x12>
    e36c:	4b04      	ldr	r3, [pc, #16]	; (e380 <mp_obj_new_bool+0x22>)
    e36e:	e000      	b.n	e372 <mp_obj_new_bool+0x14>
    e370:	4b04      	ldr	r3, [pc, #16]	; (e384 <mp_obj_new_bool+0x26>)
    e372:	4618      	mov	r0, r3
    e374:	370c      	adds	r7, #12
    e376:	46bd      	mov	sp, r7
    e378:	f85d 7b04 	ldr.w	r7, [sp], #4
    e37c:	4770      	bx	lr
    e37e:	bf00      	nop
    e380:	0002189c 	.word	0x0002189c
    e384:	00021894 	.word	0x00021894

0000e388 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    e388:	b580      	push	{r7, lr}
    e38a:	b084      	sub	sp, #16
    e38c:	af00      	add	r7, sp, #0
    e38e:	60f8      	str	r0, [r7, #12]
    e390:	60b9      	str	r1, [r7, #8]
    e392:	607a      	str	r2, [r7, #4]
    e394:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    e396:	687b      	ldr	r3, [r7, #4]
    e398:	045a      	lsls	r2, r3, #17
    e39a:	683b      	ldr	r3, [r7, #0]
    e39c:	005b      	lsls	r3, r3, #1
    e39e:	431a      	orrs	r2, r3
    e3a0:	7e3b      	ldrb	r3, [r7, #24]
    e3a2:	2b00      	cmp	r3, #0
    e3a4:	d001      	beq.n	e3aa <mp_arg_check_num+0x22>
    e3a6:	2301      	movs	r3, #1
    e3a8:	e000      	b.n	e3ac <mp_arg_check_num+0x24>
    e3aa:	2300      	movs	r3, #0
    e3ac:	4313      	orrs	r3, r2
    e3ae:	461a      	mov	r2, r3
    e3b0:	68b9      	ldr	r1, [r7, #8]
    e3b2:	68f8      	ldr	r0, [r7, #12]
    e3b4:	f7fe fd7e 	bl	ceb4 <mp_arg_check_num_sig>
}
    e3b8:	bf00      	nop
    e3ba:	3710      	adds	r7, #16
    e3bc:	46bd      	mov	sp, r7
    e3be:	bd80      	pop	{r7, pc}

0000e3c0 <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b086      	sub	sp, #24
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	6078      	str	r0, [r7, #4]
    e3c8:	6039      	str	r1, [r7, #0]
    size_t max = dict->map.alloc;
    e3ca:	687b      	ldr	r3, [r7, #4]
    e3cc:	689b      	ldr	r3, [r3, #8]
    e3ce:	613b      	str	r3, [r7, #16]
    mp_map_t *map = &dict->map;
    e3d0:	687b      	ldr	r3, [r7, #4]
    e3d2:	3304      	adds	r3, #4
    e3d4:	60fb      	str	r3, [r7, #12]

    for (size_t i = *cur; i < max; i++) {
    e3d6:	683b      	ldr	r3, [r7, #0]
    e3d8:	681b      	ldr	r3, [r3, #0]
    e3da:	617b      	str	r3, [r7, #20]
    e3dc:	e013      	b.n	e406 <dict_iter_next+0x46>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    e3de:	6979      	ldr	r1, [r7, #20]
    e3e0:	68f8      	ldr	r0, [r7, #12]
    e3e2:	f7ff ff9b 	bl	e31c <MP_MAP_SLOT_IS_FILLED>
    e3e6:	4603      	mov	r3, r0
    e3e8:	2b00      	cmp	r3, #0
    e3ea:	d009      	beq.n	e400 <dict_iter_next+0x40>
            *cur = i + 1;
    e3ec:	697b      	ldr	r3, [r7, #20]
    e3ee:	1c5a      	adds	r2, r3, #1
    e3f0:	683b      	ldr	r3, [r7, #0]
    e3f2:	601a      	str	r2, [r3, #0]
            return &(map->table[i]);
    e3f4:	68fb      	ldr	r3, [r7, #12]
    e3f6:	689a      	ldr	r2, [r3, #8]
    e3f8:	697b      	ldr	r3, [r7, #20]
    e3fa:	00db      	lsls	r3, r3, #3
    e3fc:	4413      	add	r3, r2
    e3fe:	e007      	b.n	e410 <dict_iter_next+0x50>
    for (size_t i = *cur; i < max; i++) {
    e400:	697b      	ldr	r3, [r7, #20]
    e402:	3301      	adds	r3, #1
    e404:	617b      	str	r3, [r7, #20]
    e406:	697a      	ldr	r2, [r7, #20]
    e408:	693b      	ldr	r3, [r7, #16]
    e40a:	429a      	cmp	r2, r3
    e40c:	d3e7      	bcc.n	e3de <dict_iter_next+0x1e>
        }
    }

    return NULL;
    e40e:	2300      	movs	r3, #0
}
    e410:	4618      	mov	r0, r3
    e412:	3718      	adds	r7, #24
    e414:	46bd      	mov	sp, r7
    e416:	bd80      	pop	{r7, pc}

0000e418 <dict_print>:

STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e418:	b580      	push	{r7, lr}
    e41a:	b088      	sub	sp, #32
    e41c:	af00      	add	r7, sp, #0
    e41e:	60f8      	str	r0, [r7, #12]
    e420:	60b9      	str	r1, [r7, #8]
    e422:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e424:	68bb      	ldr	r3, [r7, #8]
    e426:	61bb      	str	r3, [r7, #24]
    bool first = true;
    e428:	2301      	movs	r3, #1
    e42a:	77fb      	strb	r3, [r7, #31]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
    e42c:	2301      	movs	r3, #1
    e42e:	607b      	str	r3, [r7, #4]
    }
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_printf(print, "%q(", self->base.type->name);
    }
    mp_print_str(print, "{");
    e430:	491c      	ldr	r1, [pc, #112]	; (e4a4 <dict_print+0x8c>)
    e432:	68f8      	ldr	r0, [r7, #12]
    e434:	f7f3 fa46 	bl	18c4 <mp_print_str>
    size_t cur = 0;
    e438:	2300      	movs	r3, #0
    e43a:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = NULL;
    e43c:	2300      	movs	r3, #0
    e43e:	617b      	str	r3, [r7, #20]
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e440:	e01d      	b.n	e47e <dict_print+0x66>
        if (!first) {
    e442:	7ffb      	ldrb	r3, [r7, #31]
    e444:	f083 0301 	eor.w	r3, r3, #1
    e448:	b2db      	uxtb	r3, r3
    e44a:	2b00      	cmp	r3, #0
    e44c:	d003      	beq.n	e456 <dict_print+0x3e>
            mp_print_str(print, ", ");
    e44e:	4916      	ldr	r1, [pc, #88]	; (e4a8 <dict_print+0x90>)
    e450:	68f8      	ldr	r0, [r7, #12]
    e452:	f7f3 fa37 	bl	18c4 <mp_print_str>
        }
        first = false;
    e456:	2300      	movs	r3, #0
    e458:	77fb      	strb	r3, [r7, #31]
        mp_obj_print_helper(print, next->key, kind);
    e45a:	697b      	ldr	r3, [r7, #20]
    e45c:	681b      	ldr	r3, [r3, #0]
    e45e:	687a      	ldr	r2, [r7, #4]
    e460:	4619      	mov	r1, r3
    e462:	68f8      	ldr	r0, [r7, #12]
    e464:	f7ff f955 	bl	d712 <mp_obj_print_helper>
        mp_print_str(print, ": ");
    e468:	4910      	ldr	r1, [pc, #64]	; (e4ac <dict_print+0x94>)
    e46a:	68f8      	ldr	r0, [r7, #12]
    e46c:	f7f3 fa2a 	bl	18c4 <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    e470:	697b      	ldr	r3, [r7, #20]
    e472:	685b      	ldr	r3, [r3, #4]
    e474:	687a      	ldr	r2, [r7, #4]
    e476:	4619      	mov	r1, r3
    e478:	68f8      	ldr	r0, [r7, #12]
    e47a:	f7ff f94a 	bl	d712 <mp_obj_print_helper>
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e47e:	f107 0310 	add.w	r3, r7, #16
    e482:	4619      	mov	r1, r3
    e484:	69b8      	ldr	r0, [r7, #24]
    e486:	f7ff ff9b 	bl	e3c0 <dict_iter_next>
    e48a:	6178      	str	r0, [r7, #20]
    e48c:	697b      	ldr	r3, [r7, #20]
    e48e:	2b00      	cmp	r3, #0
    e490:	d1d7      	bne.n	e442 <dict_print+0x2a>
    }
    mp_print_str(print, "}");
    e492:	4907      	ldr	r1, [pc, #28]	; (e4b0 <dict_print+0x98>)
    e494:	68f8      	ldr	r0, [r7, #12]
    e496:	f7f3 fa15 	bl	18c4 <mp_print_str>
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_print_str(print, ")");
    }
}
    e49a:	bf00      	nop
    e49c:	3720      	adds	r7, #32
    e49e:	46bd      	mov	sp, r7
    e4a0:	bd80      	pop	{r7, pc}
    e4a2:	bf00      	nop
    e4a4:	00021958 	.word	0x00021958
    e4a8:	0002195c 	.word	0x0002195c
    e4ac:	00021960 	.word	0x00021960
    e4b0:	00021964 	.word	0x00021964

0000e4b4 <dict_make_new>:

STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e4b4:	b580      	push	{r7, lr}
    e4b6:	b08c      	sub	sp, #48	; 0x30
    e4b8:	af00      	add	r7, sp, #0
    e4ba:	60f8      	str	r0, [r7, #12]
    e4bc:	60b9      	str	r1, [r7, #8]
    e4be:	607a      	str	r2, [r7, #4]
    e4c0:	603b      	str	r3, [r7, #0]
    mp_obj_t dict_out = mp_obj_new_dict(0);
    e4c2:	2000      	movs	r0, #0
    e4c4:	f000 fd94 	bl	eff0 <mp_obj_new_dict>
    e4c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_dict_t *dict = MP_OBJ_TO_PTR(dict_out);
    e4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4cc:	62bb      	str	r3, [r7, #40]	; 0x28
    dict->base.type = type;
    e4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e4d0:	68fa      	ldr	r2, [r7, #12]
    e4d2:	601a      	str	r2, [r3, #0]
    #if MICROPY_PY_COLLECTIONS_ORDEREDDICT
    if (type == &mp_type_ordereddict) {
        dict->map.is_ordered = 1;
    }
    #endif
    if (n_args > 0 || n_kw > 0) {
    e4d4:	68bb      	ldr	r3, [r7, #8]
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	d102      	bne.n	e4e0 <dict_make_new+0x2c>
    e4da:	687b      	ldr	r3, [r7, #4]
    e4dc:	2b00      	cmp	r3, #0
    e4de:	d017      	beq.n	e510 <dict_make_new+0x5c>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4e2:	623b      	str	r3, [r7, #32]
    e4e4:	683b      	ldr	r3, [r7, #0]
    e4e6:	681b      	ldr	r3, [r3, #0]
    e4e8:	627b      	str	r3, [r7, #36]	; 0x24
        mp_map_t kwargs;
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    e4ea:	68bb      	ldr	r3, [r7, #8]
    e4ec:	009b      	lsls	r3, r3, #2
    e4ee:	683a      	ldr	r2, [r7, #0]
    e4f0:	441a      	add	r2, r3
    e4f2:	f107 0314 	add.w	r3, r7, #20
    e4f6:	6879      	ldr	r1, [r7, #4]
    e4f8:	4618      	mov	r0, r3
    e4fa:	f7fe fe6a 	bl	d1d2 <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    e4fe:	68bb      	ldr	r3, [r7, #8]
    e500:	3301      	adds	r3, #1
    e502:	f107 0214 	add.w	r2, r7, #20
    e506:	f107 0120 	add.w	r1, r7, #32
    e50a:	4618      	mov	r0, r3
    e50c:	f000 fadc 	bl	eac8 <dict_update>
    }
    return dict_out;
    e510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e512:	4618      	mov	r0, r3
    e514:	3730      	adds	r7, #48	; 0x30
    e516:	46bd      	mov	sp, r7
    e518:	bd80      	pop	{r7, pc}

0000e51a <dict_unary_op>:

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    e51a:	b580      	push	{r7, lr}
    e51c:	b084      	sub	sp, #16
    e51e:	af00      	add	r7, sp, #0
    e520:	6078      	str	r0, [r7, #4]
    e522:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e524:	683b      	ldr	r3, [r7, #0]
    e526:	60fb      	str	r3, [r7, #12]
    switch (op) {
    e528:	687b      	ldr	r3, [r7, #4]
    e52a:	2b04      	cmp	r3, #4
    e52c:	d002      	beq.n	e534 <dict_unary_op+0x1a>
    e52e:	2b05      	cmp	r3, #5
    e530:	d00e      	beq.n	e550 <dict_unary_op+0x36>
    e532:	e015      	b.n	e560 <dict_unary_op+0x46>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    e534:	68fb      	ldr	r3, [r7, #12]
    e536:	685b      	ldr	r3, [r3, #4]
    e538:	f023 0307 	bic.w	r3, r3, #7
    e53c:	2b00      	cmp	r3, #0
    e53e:	bf14      	ite	ne
    e540:	2301      	movne	r3, #1
    e542:	2300      	moveq	r3, #0
    e544:	b2db      	uxtb	r3, r3
    e546:	4618      	mov	r0, r3
    e548:	f7ff ff09 	bl	e35e <mp_obj_new_bool>
    e54c:	4603      	mov	r3, r0
    e54e:	e008      	b.n	e562 <dict_unary_op+0x48>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    e550:	68fb      	ldr	r3, [r7, #12]
    e552:	685b      	ldr	r3, [r3, #4]
    e554:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e558:	005b      	lsls	r3, r3, #1
    e55a:	f043 0301 	orr.w	r3, r3, #1
    e55e:	e000      	b.n	e562 <dict_unary_op+0x48>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    e560:	2300      	movs	r3, #0
    }
}
    e562:	4618      	mov	r0, r3
    e564:	3710      	adds	r7, #16
    e566:	46bd      	mov	sp, r7
    e568:	bd80      	pop	{r7, pc}

0000e56a <dict_binary_op>:

STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e56a:	b580      	push	{r7, lr}
    e56c:	b08a      	sub	sp, #40	; 0x28
    e56e:	af00      	add	r7, sp, #0
    e570:	60f8      	str	r0, [r7, #12]
    e572:	60b9      	str	r1, [r7, #8]
    e574:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *o = MP_OBJ_TO_PTR(lhs_in);
    e576:	68bb      	ldr	r3, [r7, #8]
    e578:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
    e57a:	68fb      	ldr	r3, [r7, #12]
    e57c:	2b02      	cmp	r3, #2
    e57e:	d014      	beq.n	e5aa <dict_binary_op+0x40>
    e580:	2b22      	cmp	r3, #34	; 0x22
    e582:	d15a      	bne.n	e63a <dict_binary_op+0xd0>
        case MP_BINARY_OP_CONTAINS: {
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e586:	3304      	adds	r3, #4
    e588:	2200      	movs	r2, #0
    e58a:	6879      	ldr	r1, [r7, #4]
    e58c:	4618      	mov	r0, r3
    e58e:	f7fe fee5 	bl	d35c <mp_map_lookup>
    e592:	6238      	str	r0, [r7, #32]
            return mp_obj_new_bool(elem != NULL);
    e594:	6a3b      	ldr	r3, [r7, #32]
    e596:	2b00      	cmp	r3, #0
    e598:	bf14      	ite	ne
    e59a:	2301      	movne	r3, #1
    e59c:	2300      	moveq	r3, #0
    e59e:	b2db      	uxtb	r3, r3
    e5a0:	4618      	mov	r0, r3
    e5a2:	f7ff fedc 	bl	e35e <mp_obj_new_bool>
    e5a6:	4603      	mov	r3, r0
    e5a8:	e048      	b.n	e63c <dict_binary_op+0xd2>
                    }
                }
                return e1 == NULL && e2 == NULL ? mp_const_true : mp_const_false;
            } else
            #endif
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    e5aa:	6878      	ldr	r0, [r7, #4]
    e5ac:	f7ff fea4 	bl	e2f8 <MP_OBJ_IS_OBJ>
    e5b0:	4603      	mov	r3, r0
    e5b2:	2b00      	cmp	r3, #0
    e5b4:	d03f      	beq.n	e636 <dict_binary_op+0xcc>
    e5b6:	687b      	ldr	r3, [r7, #4]
    e5b8:	681b      	ldr	r3, [r3, #0]
    e5ba:	4a22      	ldr	r2, [pc, #136]	; (e644 <dict_binary_op+0xda>)
    e5bc:	4293      	cmp	r3, r2
    e5be:	d13a      	bne.n	e636 <dict_binary_op+0xcc>
                mp_obj_dict_t *rhs = MP_OBJ_TO_PTR(rhs_in);
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	61fb      	str	r3, [r7, #28]
                if (o->map.used != rhs->map.used) {
    e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5c6:	685b      	ldr	r3, [r3, #4]
    e5c8:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    e5cc:	69fb      	ldr	r3, [r7, #28]
    e5ce:	685b      	ldr	r3, [r3, #4]
    e5d0:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e5d4:	429a      	cmp	r2, r3
    e5d6:	d001      	beq.n	e5dc <dict_binary_op+0x72>
                    return mp_const_false;
    e5d8:	4b1b      	ldr	r3, [pc, #108]	; (e648 <dict_binary_op+0xde>)
    e5da:	e02f      	b.n	e63c <dict_binary_op+0xd2>
                }

                size_t cur = 0;
    e5dc:	2300      	movs	r3, #0
    e5de:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *next = NULL;
    e5e0:	2300      	movs	r3, #0
    e5e2:	61bb      	str	r3, [r7, #24]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e5e4:	e01b      	b.n	e61e <dict_binary_op+0xb4>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    e5e6:	69fb      	ldr	r3, [r7, #28]
    e5e8:	1d18      	adds	r0, r3, #4
    e5ea:	69bb      	ldr	r3, [r7, #24]
    e5ec:	681b      	ldr	r3, [r3, #0]
    e5ee:	2200      	movs	r2, #0
    e5f0:	4619      	mov	r1, r3
    e5f2:	f7fe feb3 	bl	d35c <mp_map_lookup>
    e5f6:	6178      	str	r0, [r7, #20]
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    e5f8:	697b      	ldr	r3, [r7, #20]
    e5fa:	2b00      	cmp	r3, #0
    e5fc:	d00d      	beq.n	e61a <dict_binary_op+0xb0>
    e5fe:	69bb      	ldr	r3, [r7, #24]
    e600:	685a      	ldr	r2, [r3, #4]
    e602:	697b      	ldr	r3, [r7, #20]
    e604:	685b      	ldr	r3, [r3, #4]
    e606:	4619      	mov	r1, r3
    e608:	4610      	mov	r0, r2
    e60a:	f7ff f9a3 	bl	d954 <mp_obj_equal>
    e60e:	4603      	mov	r3, r0
    e610:	f083 0301 	eor.w	r3, r3, #1
    e614:	b2db      	uxtb	r3, r3
    e616:	2b00      	cmp	r3, #0
    e618:	d001      	beq.n	e61e <dict_binary_op+0xb4>
                        return mp_const_false;
    e61a:	4b0b      	ldr	r3, [pc, #44]	; (e648 <dict_binary_op+0xde>)
    e61c:	e00e      	b.n	e63c <dict_binary_op+0xd2>
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e61e:	f107 0310 	add.w	r3, r7, #16
    e622:	4619      	mov	r1, r3
    e624:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e626:	f7ff fecb 	bl	e3c0 <dict_iter_next>
    e62a:	61b8      	str	r0, [r7, #24]
    e62c:	69bb      	ldr	r3, [r7, #24]
    e62e:	2b00      	cmp	r3, #0
    e630:	d1d9      	bne.n	e5e6 <dict_binary_op+0x7c>
                    }
                }
                return mp_const_true;
    e632:	4b06      	ldr	r3, [pc, #24]	; (e64c <dict_binary_op+0xe2>)
    e634:	e002      	b.n	e63c <dict_binary_op+0xd2>
            } else {
                // dict is not equal to instance of any other type
                return mp_const_false;
    e636:	4b04      	ldr	r3, [pc, #16]	; (e648 <dict_binary_op+0xde>)
    e638:	e000      	b.n	e63c <dict_binary_op+0xd2>
            }
        }
        default:
            // op not supported
            return MP_OBJ_NULL;
    e63a:	2300      	movs	r3, #0
    }
}
    e63c:	4618      	mov	r0, r3
    e63e:	3728      	adds	r7, #40	; 0x28
    e640:	46bd      	mov	sp, r7
    e642:	bd80      	pop	{r7, pc}
    e644:	00021d40 	.word	0x00021d40
    e648:	00021894 	.word	0x00021894
    e64c:	0002189c 	.word	0x0002189c

0000e650 <mp_obj_dict_get>:

// Note: Make sure this is inlined in load part of dict_subscr() below.
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    e650:	b580      	push	{r7, lr}
    e652:	b084      	sub	sp, #16
    e654:	af00      	add	r7, sp, #0
    e656:	6078      	str	r0, [r7, #4]
    e658:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e65a:	687b      	ldr	r3, [r7, #4]
    e65c:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e65e:	68fb      	ldr	r3, [r7, #12]
    e660:	3304      	adds	r3, #4
    e662:	2200      	movs	r2, #0
    e664:	6839      	ldr	r1, [r7, #0]
    e666:	4618      	mov	r0, r3
    e668:	f7fe fe78 	bl	d35c <mp_map_lookup>
    e66c:	60b8      	str	r0, [r7, #8]
    if (elem == NULL) {
    e66e:	68bb      	ldr	r3, [r7, #8]
    e670:	2b00      	cmp	r3, #0
    e672:	d107      	bne.n	e684 <mp_obj_dict_get+0x34>
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e674:	6839      	ldr	r1, [r7, #0]
    e676:	4806      	ldr	r0, [pc, #24]	; (e690 <mp_obj_dict_get+0x40>)
    e678:	f000 fe6a 	bl	f350 <mp_obj_new_exception_arg1>
    e67c:	4603      	mov	r3, r0
    e67e:	4618      	mov	r0, r3
    e680:	f7f1 fe2e 	bl	2e0 <nlr_jump>
    } else {
        return elem->value;
    e684:	68bb      	ldr	r3, [r7, #8]
    e686:	685b      	ldr	r3, [r3, #4]
    }
}
    e688:	4618      	mov	r0, r3
    e68a:	3710      	adds	r7, #16
    e68c:	46bd      	mov	sp, r7
    e68e:	bd80      	pop	{r7, pc}
    e690:	000221c8 	.word	0x000221c8

0000e694 <dict_subscr>:

STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    e694:	b580      	push	{r7, lr}
    e696:	b086      	sub	sp, #24
    e698:	af00      	add	r7, sp, #0
    e69a:	60f8      	str	r0, [r7, #12]
    e69c:	60b9      	str	r1, [r7, #8]
    e69e:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
    e6a0:	687b      	ldr	r3, [r7, #4]
    e6a2:	2b00      	cmp	r3, #0
    e6a4:	d105      	bne.n	e6b2 <dict_subscr+0x1e>
        // delete
        mp_obj_dict_delete(self_in, index);
    e6a6:	68b9      	ldr	r1, [r7, #8]
    e6a8:	68f8      	ldr	r0, [r7, #12]
    e6aa:	f000 fcf7 	bl	f09c <mp_obj_dict_delete>
        return mp_const_none;
    e6ae:	4b13      	ldr	r3, [pc, #76]	; (e6fc <dict_subscr+0x68>)
    e6b0:	e020      	b.n	e6f4 <dict_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	2b08      	cmp	r3, #8
    e6b6:	d117      	bne.n	e6e8 <dict_subscr+0x54>
        // load
        mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e6b8:	68fb      	ldr	r3, [r7, #12]
    e6ba:	617b      	str	r3, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e6bc:	697b      	ldr	r3, [r7, #20]
    e6be:	3304      	adds	r3, #4
    e6c0:	2200      	movs	r2, #0
    e6c2:	68b9      	ldr	r1, [r7, #8]
    e6c4:	4618      	mov	r0, r3
    e6c6:	f7fe fe49 	bl	d35c <mp_map_lookup>
    e6ca:	6138      	str	r0, [r7, #16]
        if (elem == NULL) {
    e6cc:	693b      	ldr	r3, [r7, #16]
    e6ce:	2b00      	cmp	r3, #0
    e6d0:	d107      	bne.n	e6e2 <dict_subscr+0x4e>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e6d2:	68b9      	ldr	r1, [r7, #8]
    e6d4:	480a      	ldr	r0, [pc, #40]	; (e700 <dict_subscr+0x6c>)
    e6d6:	f000 fe3b 	bl	f350 <mp_obj_new_exception_arg1>
    e6da:	4603      	mov	r3, r0
    e6dc:	4618      	mov	r0, r3
    e6de:	f7f1 fdff 	bl	2e0 <nlr_jump>
        } else {
            return elem->value;
    e6e2:	693b      	ldr	r3, [r7, #16]
    e6e4:	685b      	ldr	r3, [r3, #4]
    e6e6:	e005      	b.n	e6f4 <dict_subscr+0x60>
        }
    } else {
        // store
        mp_obj_dict_store(self_in, index, value);
    e6e8:	687a      	ldr	r2, [r7, #4]
    e6ea:	68b9      	ldr	r1, [r7, #8]
    e6ec:	68f8      	ldr	r0, [r7, #12]
    e6ee:	f000 fca0 	bl	f032 <mp_obj_dict_store>
        return mp_const_none;
    e6f2:	4b02      	ldr	r3, [pc, #8]	; (e6fc <dict_subscr+0x68>)
    }
}
    e6f4:	4618      	mov	r0, r3
    e6f6:	3718      	adds	r7, #24
    e6f8:	46bd      	mov	sp, r7
    e6fa:	bd80      	pop	{r7, pc}
    e6fc:	00023108 	.word	0x00023108
    e700:	000221c8 	.word	0x000221c8

0000e704 <mp_ensure_not_fixed>:

/******************************************************************************/
/* dict methods                                                               */

STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    e704:	b580      	push	{r7, lr}
    e706:	b082      	sub	sp, #8
    e708:	af00      	add	r7, sp, #0
    e70a:	6078      	str	r0, [r7, #4]
    if (dict->map.is_fixed) {
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	791b      	ldrb	r3, [r3, #4]
    e710:	f003 0302 	and.w	r3, r3, #2
    e714:	b2db      	uxtb	r3, r3
    e716:	2b00      	cmp	r3, #0
    e718:	d002      	beq.n	e720 <mp_ensure_not_fixed+0x1c>
        mp_raise_TypeError(NULL);
    e71a:	2000      	movs	r0, #0
    e71c:	f7fe fba4 	bl	ce68 <mp_raise_TypeError>
    }
}
    e720:	bf00      	nop
    e722:	3708      	adds	r7, #8
    e724:	46bd      	mov	sp, r7
    e726:	bd80      	pop	{r7, pc}

0000e728 <dict_clear>:

STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    e728:	b580      	push	{r7, lr}
    e72a:	b084      	sub	sp, #16
    e72c:	af00      	add	r7, sp, #0
    e72e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e730:	6878      	ldr	r0, [r7, #4]
    e732:	f7ff fde1 	bl	e2f8 <MP_OBJ_IS_OBJ>
    e736:	4603      	mov	r3, r0
    e738:	2b00      	cmp	r3, #0
    e73a:	d005      	beq.n	e748 <dict_clear+0x20>
    e73c:	687b      	ldr	r3, [r7, #4]
    e73e:	681b      	ldr	r3, [r3, #0]
    e740:	68db      	ldr	r3, [r3, #12]
    e742:	4a0c      	ldr	r2, [pc, #48]	; (e774 <dict_clear+0x4c>)
    e744:	4293      	cmp	r3, r2
    e746:	d005      	beq.n	e754 <dict_clear+0x2c>
    e748:	4b0b      	ldr	r3, [pc, #44]	; (e778 <dict_clear+0x50>)
    e74a:	4a0c      	ldr	r2, [pc, #48]	; (e77c <dict_clear+0x54>)
    e74c:	21cd      	movs	r1, #205	; 0xcd
    e74e:	480c      	ldr	r0, [pc, #48]	; (e780 <dict_clear+0x58>)
    e750:	f00c fe96 	bl	1b480 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e754:	687b      	ldr	r3, [r7, #4]
    e756:	60fb      	str	r3, [r7, #12]
    mp_ensure_not_fixed(self);
    e758:	68f8      	ldr	r0, [r7, #12]
    e75a:	f7ff ffd3 	bl	e704 <mp_ensure_not_fixed>

    mp_map_clear(&self->map);
    e75e:	68fb      	ldr	r3, [r7, #12]
    e760:	3304      	adds	r3, #4
    e762:	4618      	mov	r0, r3
    e764:	f7fe fd7a 	bl	d25c <mp_map_clear>

    return mp_const_none;
    e768:	4b06      	ldr	r3, [pc, #24]	; (e784 <dict_clear+0x5c>)
}
    e76a:	4618      	mov	r0, r3
    e76c:	3710      	adds	r7, #16
    e76e:	46bd      	mov	sp, r7
    e770:	bd80      	pop	{r7, pc}
    e772:	bf00      	nop
    e774:	0000e4b5 	.word	0x0000e4b5
    e778:	00021968 	.word	0x00021968
    e77c:	00021d7c 	.word	0x00021d7c
    e780:	000219c8 	.word	0x000219c8
    e784:	00023108 	.word	0x00023108

0000e788 <dict_copy>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_clear_obj, dict_clear);

STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    e788:	b580      	push	{r7, lr}
    e78a:	b086      	sub	sp, #24
    e78c:	af00      	add	r7, sp, #0
    e78e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e790:	6878      	ldr	r0, [r7, #4]
    e792:	f7ff fdb1 	bl	e2f8 <MP_OBJ_IS_OBJ>
    e796:	4603      	mov	r3, r0
    e798:	2b00      	cmp	r3, #0
    e79a:	d005      	beq.n	e7a8 <dict_copy+0x20>
    e79c:	687b      	ldr	r3, [r7, #4]
    e79e:	681b      	ldr	r3, [r3, #0]
    e7a0:	68db      	ldr	r3, [r3, #12]
    e7a2:	4a24      	ldr	r2, [pc, #144]	; (e834 <dict_copy+0xac>)
    e7a4:	4293      	cmp	r3, r2
    e7a6:	d005      	beq.n	e7b4 <dict_copy+0x2c>
    e7a8:	4b23      	ldr	r3, [pc, #140]	; (e838 <dict_copy+0xb0>)
    e7aa:	4a24      	ldr	r2, [pc, #144]	; (e83c <dict_copy+0xb4>)
    e7ac:	21d8      	movs	r1, #216	; 0xd8
    e7ae:	4824      	ldr	r0, [pc, #144]	; (e840 <dict_copy+0xb8>)
    e7b0:	f00c fe66 	bl	1b480 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e7b4:	687b      	ldr	r3, [r7, #4]
    e7b6:	617b      	str	r3, [r7, #20]
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    e7b8:	697b      	ldr	r3, [r7, #20]
    e7ba:	689b      	ldr	r3, [r3, #8]
    e7bc:	4618      	mov	r0, r3
    e7be:	f000 fc17 	bl	eff0 <mp_obj_new_dict>
    e7c2:	6138      	str	r0, [r7, #16]
    mp_obj_dict_t *other = MP_OBJ_TO_PTR(other_out);
    e7c4:	693b      	ldr	r3, [r7, #16]
    e7c6:	60fb      	str	r3, [r7, #12]
    other->base.type = self->base.type;
    e7c8:	697b      	ldr	r3, [r7, #20]
    e7ca:	681a      	ldr	r2, [r3, #0]
    e7cc:	68fb      	ldr	r3, [r7, #12]
    e7ce:	601a      	str	r2, [r3, #0]
    other->map.used = self->map.used;
    e7d0:	697b      	ldr	r3, [r7, #20]
    e7d2:	685b      	ldr	r3, [r3, #4]
    e7d4:	f3c3 01dc 	ubfx	r1, r3, #3, #29
    e7d8:	68fa      	ldr	r2, [r7, #12]
    e7da:	6853      	ldr	r3, [r2, #4]
    e7dc:	f361 03df 	bfi	r3, r1, #3, #29
    e7e0:	6053      	str	r3, [r2, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    e7e2:	697b      	ldr	r3, [r7, #20]
    e7e4:	791b      	ldrb	r3, [r3, #4]
    e7e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
    e7ea:	b2d9      	uxtb	r1, r3
    e7ec:	68fa      	ldr	r2, [r7, #12]
    e7ee:	7913      	ldrb	r3, [r2, #4]
    e7f0:	f361 0300 	bfi	r3, r1, #0, #1
    e7f4:	7113      	strb	r3, [r2, #4]
    other->map.is_fixed = 0;
    e7f6:	68fa      	ldr	r2, [r7, #12]
    e7f8:	7913      	ldrb	r3, [r2, #4]
    e7fa:	f36f 0341 	bfc	r3, #1, #1
    e7fe:	7113      	strb	r3, [r2, #4]
    other->map.is_ordered = self->map.is_ordered;
    e800:	697b      	ldr	r3, [r7, #20]
    e802:	791b      	ldrb	r3, [r3, #4]
    e804:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e808:	b2d9      	uxtb	r1, r3
    e80a:	68fa      	ldr	r2, [r7, #12]
    e80c:	7913      	ldrb	r3, [r2, #4]
    e80e:	f361 0382 	bfi	r3, r1, #2, #1
    e812:	7113      	strb	r3, [r2, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    e814:	68fb      	ldr	r3, [r7, #12]
    e816:	68d8      	ldr	r0, [r3, #12]
    e818:	697b      	ldr	r3, [r7, #20]
    e81a:	68d9      	ldr	r1, [r3, #12]
    e81c:	697b      	ldr	r3, [r7, #20]
    e81e:	689b      	ldr	r3, [r3, #8]
    e820:	00db      	lsls	r3, r3, #3
    e822:	461a      	mov	r2, r3
    e824:	f00e f958 	bl	1cad8 <memcpy>
    return other_out;
    e828:	693b      	ldr	r3, [r7, #16]
}
    e82a:	4618      	mov	r0, r3
    e82c:	3718      	adds	r7, #24
    e82e:	46bd      	mov	sp, r7
    e830:	bd80      	pop	{r7, pc}
    e832:	bf00      	nop
    e834:	0000e4b5 	.word	0x0000e4b5
    e838:	00021968 	.word	0x00021968
    e83c:	00021d88 	.word	0x00021d88
    e840:	000219c8 	.word	0x000219c8

0000e844 <dict_fromkeys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_copy_obj, dict_copy);

// this is a classmethod
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    e844:	b580      	push	{r7, lr}
    e846:	b088      	sub	sp, #32
    e848:	af00      	add	r7, sp, #0
    e84a:	6078      	str	r0, [r7, #4]
    e84c:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(args[1], NULL);
    e84e:	683b      	ldr	r3, [r7, #0]
    e850:	3304      	adds	r3, #4
    e852:	681b      	ldr	r3, [r3, #0]
    e854:	2100      	movs	r1, #0
    e856:	4618      	mov	r0, r3
    e858:	f7fd ffcc 	bl	c7f4 <mp_getiter>
    e85c:	6178      	str	r0, [r7, #20]
    mp_obj_t value = mp_const_none;
    e85e:	4b1c      	ldr	r3, [pc, #112]	; (e8d0 <dict_fromkeys+0x8c>)
    e860:	61fb      	str	r3, [r7, #28]
    mp_obj_t next = MP_OBJ_NULL;
    e862:	2300      	movs	r3, #0
    e864:	613b      	str	r3, [r7, #16]

    if (n_args > 2) {
    e866:	687b      	ldr	r3, [r7, #4]
    e868:	2b02      	cmp	r3, #2
    e86a:	d902      	bls.n	e872 <dict_fromkeys+0x2e>
        value = args[2];
    e86c:	683b      	ldr	r3, [r7, #0]
    e86e:	689b      	ldr	r3, [r3, #8]
    e870:	61fb      	str	r3, [r7, #28]
    }

    // optimisation to allocate result based on len of argument
    mp_obj_t self_out;
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    e872:	683b      	ldr	r3, [r7, #0]
    e874:	3304      	adds	r3, #4
    e876:	681b      	ldr	r3, [r3, #0]
    e878:	4618      	mov	r0, r3
    e87a:	f7ff fa6f 	bl	dd5c <mp_obj_len_maybe>
    e87e:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    e880:	68fb      	ldr	r3, [r7, #12]
    e882:	2b00      	cmp	r3, #0
    e884:	d104      	bne.n	e890 <dict_fromkeys+0x4c>
        /* object's type doesn't have a __len__ slot */
        self_out = mp_obj_new_dict(0);
    e886:	2000      	movs	r0, #0
    e888:	f000 fbb2 	bl	eff0 <mp_obj_new_dict>
    e88c:	61b8      	str	r0, [r7, #24]
    e88e:	e005      	b.n	e89c <dict_fromkeys+0x58>
    } else {
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    e890:	68fb      	ldr	r3, [r7, #12]
    e892:	105b      	asrs	r3, r3, #1
    e894:	4618      	mov	r0, r3
    e896:	f000 fbab 	bl	eff0 <mp_obj_new_dict>
    e89a:	61b8      	str	r0, [r7, #24]
    }

    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_out);
    e89c:	69bb      	ldr	r3, [r7, #24]
    e89e:	60bb      	str	r3, [r7, #8]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e8a0:	e009      	b.n	e8b6 <dict_fromkeys+0x72>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    e8a2:	68bb      	ldr	r3, [r7, #8]
    e8a4:	3304      	adds	r3, #4
    e8a6:	2201      	movs	r2, #1
    e8a8:	6939      	ldr	r1, [r7, #16]
    e8aa:	4618      	mov	r0, r3
    e8ac:	f7fe fd56 	bl	d35c <mp_map_lookup>
    e8b0:	4602      	mov	r2, r0
    e8b2:	69fb      	ldr	r3, [r7, #28]
    e8b4:	6053      	str	r3, [r2, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e8b6:	6978      	ldr	r0, [r7, #20]
    e8b8:	f7fe f81e 	bl	c8f8 <mp_iternext>
    e8bc:	6138      	str	r0, [r7, #16]
    e8be:	693b      	ldr	r3, [r7, #16]
    e8c0:	2b04      	cmp	r3, #4
    e8c2:	d1ee      	bne.n	e8a2 <dict_fromkeys+0x5e>
    }

    return self_out;
    e8c4:	69bb      	ldr	r3, [r7, #24]
}
    e8c6:	4618      	mov	r0, r3
    e8c8:	3720      	adds	r7, #32
    e8ca:	46bd      	mov	sp, r7
    e8cc:	bd80      	pop	{r7, pc}
    e8ce:	bf00      	nop
    e8d0:	00023108 	.word	0x00023108

0000e8d4 <dict_get_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_fromkeys_fun_obj, 2, 3, dict_fromkeys);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(dict_fromkeys_obj, MP_ROM_PTR(&dict_fromkeys_fun_obj));

STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    e8d4:	b580      	push	{r7, lr}
    e8d6:	b088      	sub	sp, #32
    e8d8:	af00      	add	r7, sp, #0
    e8da:	60f8      	str	r0, [r7, #12]
    e8dc:	60b9      	str	r1, [r7, #8]
    e8de:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    e8e0:	68bb      	ldr	r3, [r7, #8]
    e8e2:	681b      	ldr	r3, [r3, #0]
    e8e4:	4618      	mov	r0, r3
    e8e6:	f7ff fd07 	bl	e2f8 <MP_OBJ_IS_OBJ>
    e8ea:	4603      	mov	r3, r0
    e8ec:	2b00      	cmp	r3, #0
    e8ee:	d006      	beq.n	e8fe <dict_get_helper+0x2a>
    e8f0:	68bb      	ldr	r3, [r7, #8]
    e8f2:	681b      	ldr	r3, [r3, #0]
    e8f4:	681b      	ldr	r3, [r3, #0]
    e8f6:	68db      	ldr	r3, [r3, #12]
    e8f8:	4a27      	ldr	r2, [pc, #156]	; (e998 <dict_get_helper+0xc4>)
    e8fa:	4293      	cmp	r3, r2
    e8fc:	d006      	beq.n	e90c <dict_get_helper+0x38>
    e8fe:	4b27      	ldr	r3, [pc, #156]	; (e99c <dict_get_helper+0xc8>)
    e900:	4a27      	ldr	r2, [pc, #156]	; (e9a0 <dict_get_helper+0xcc>)
    e902:	f240 1105 	movw	r1, #261	; 0x105
    e906:	4827      	ldr	r0, [pc, #156]	; (e9a4 <dict_get_helper+0xd0>)
    e908:	f00c fdba 	bl	1b480 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    e90c:	68bb      	ldr	r3, [r7, #8]
    e90e:	681b      	ldr	r3, [r3, #0]
    e910:	61bb      	str	r3, [r7, #24]
    if (lookup_kind != MP_MAP_LOOKUP) {
    e912:	687b      	ldr	r3, [r7, #4]
    e914:	2b00      	cmp	r3, #0
    e916:	d002      	beq.n	e91e <dict_get_helper+0x4a>
        mp_ensure_not_fixed(self);
    e918:	69b8      	ldr	r0, [r7, #24]
    e91a:	f7ff fef3 	bl	e704 <mp_ensure_not_fixed>
    }
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    e91e:	69bb      	ldr	r3, [r7, #24]
    e920:	1d18      	adds	r0, r3, #4
    e922:	68bb      	ldr	r3, [r7, #8]
    e924:	3304      	adds	r3, #4
    e926:	681b      	ldr	r3, [r3, #0]
    e928:	687a      	ldr	r2, [r7, #4]
    e92a:	4619      	mov	r1, r3
    e92c:	f7fe fd16 	bl	d35c <mp_map_lookup>
    e930:	6178      	str	r0, [r7, #20]
    mp_obj_t value;
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    e932:	697b      	ldr	r3, [r7, #20]
    e934:	2b00      	cmp	r3, #0
    e936:	d003      	beq.n	e940 <dict_get_helper+0x6c>
    e938:	697b      	ldr	r3, [r7, #20]
    e93a:	685b      	ldr	r3, [r3, #4]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d11d      	bne.n	e97c <dict_get_helper+0xa8>
        if (n_args == 2) {
    e940:	68fb      	ldr	r3, [r7, #12]
    e942:	2b02      	cmp	r3, #2
    e944:	d110      	bne.n	e968 <dict_get_helper+0x94>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    e946:	687b      	ldr	r3, [r7, #4]
    e948:	2b02      	cmp	r3, #2
    e94a:	d10a      	bne.n	e962 <dict_get_helper+0x8e>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    e94c:	68bb      	ldr	r3, [r7, #8]
    e94e:	3304      	adds	r3, #4
    e950:	681b      	ldr	r3, [r3, #0]
    e952:	4619      	mov	r1, r3
    e954:	4814      	ldr	r0, [pc, #80]	; (e9a8 <dict_get_helper+0xd4>)
    e956:	f000 fcfb 	bl	f350 <mp_obj_new_exception_arg1>
    e95a:	4603      	mov	r3, r0
    e95c:	4618      	mov	r0, r3
    e95e:	f7f1 fcbf 	bl	2e0 <nlr_jump>
            } else {
                value = mp_const_none;
    e962:	4b12      	ldr	r3, [pc, #72]	; (e9ac <dict_get_helper+0xd8>)
    e964:	61fb      	str	r3, [r7, #28]
    e966:	e002      	b.n	e96e <dict_get_helper+0x9a>
            }
        } else {
            value = args[2];
    e968:	68bb      	ldr	r3, [r7, #8]
    e96a:	689b      	ldr	r3, [r3, #8]
    e96c:	61fb      	str	r3, [r7, #28]
        }
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	2b01      	cmp	r3, #1
    e972:	d10c      	bne.n	e98e <dict_get_helper+0xba>
            elem->value = value;
    e974:	697b      	ldr	r3, [r7, #20]
    e976:	69fa      	ldr	r2, [r7, #28]
    e978:	605a      	str	r2, [r3, #4]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    e97a:	e008      	b.n	e98e <dict_get_helper+0xba>
        }
    } else {
        value = elem->value;
    e97c:	697b      	ldr	r3, [r7, #20]
    e97e:	685b      	ldr	r3, [r3, #4]
    e980:	61fb      	str	r3, [r7, #28]
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    e982:	687b      	ldr	r3, [r7, #4]
    e984:	2b02      	cmp	r3, #2
    e986:	d102      	bne.n	e98e <dict_get_helper+0xba>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    e988:	697b      	ldr	r3, [r7, #20]
    e98a:	2200      	movs	r2, #0
    e98c:	605a      	str	r2, [r3, #4]
        }
    }
    return value;
    e98e:	69fb      	ldr	r3, [r7, #28]
}
    e990:	4618      	mov	r0, r3
    e992:	3720      	adds	r7, #32
    e994:	46bd      	mov	sp, r7
    e996:	bd80      	pop	{r7, pc}
    e998:	0000e4b5 	.word	0x0000e4b5
    e99c:	00021a00 	.word	0x00021a00
    e9a0:	00021d94 	.word	0x00021d94
    e9a4:	000219c8 	.word	0x000219c8
    e9a8:	000221c8 	.word	0x000221c8
    e9ac:	00023108 	.word	0x00023108

0000e9b0 <dict_get>:

STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b082      	sub	sp, #8
    e9b4:	af00      	add	r7, sp, #0
    e9b6:	6078      	str	r0, [r7, #4]
    e9b8:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    e9ba:	2200      	movs	r2, #0
    e9bc:	6839      	ldr	r1, [r7, #0]
    e9be:	6878      	ldr	r0, [r7, #4]
    e9c0:	f7ff ff88 	bl	e8d4 <dict_get_helper>
    e9c4:	4603      	mov	r3, r0
}
    e9c6:	4618      	mov	r0, r3
    e9c8:	3708      	adds	r7, #8
    e9ca:	46bd      	mov	sp, r7
    e9cc:	bd80      	pop	{r7, pc}

0000e9ce <dict_pop>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_get_obj, 2, 3, dict_get);

STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    e9ce:	b580      	push	{r7, lr}
    e9d0:	b082      	sub	sp, #8
    e9d2:	af00      	add	r7, sp, #0
    e9d4:	6078      	str	r0, [r7, #4]
    e9d6:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    e9d8:	2202      	movs	r2, #2
    e9da:	6839      	ldr	r1, [r7, #0]
    e9dc:	6878      	ldr	r0, [r7, #4]
    e9de:	f7ff ff79 	bl	e8d4 <dict_get_helper>
    e9e2:	4603      	mov	r3, r0
}
    e9e4:	4618      	mov	r0, r3
    e9e6:	3708      	adds	r7, #8
    e9e8:	46bd      	mov	sp, r7
    e9ea:	bd80      	pop	{r7, pc}

0000e9ec <dict_setdefault>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_pop_obj, 2, 3, dict_pop);

STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    e9ec:	b580      	push	{r7, lr}
    e9ee:	b082      	sub	sp, #8
    e9f0:	af00      	add	r7, sp, #0
    e9f2:	6078      	str	r0, [r7, #4]
    e9f4:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    e9f6:	2201      	movs	r2, #1
    e9f8:	6839      	ldr	r1, [r7, #0]
    e9fa:	6878      	ldr	r0, [r7, #4]
    e9fc:	f7ff ff6a 	bl	e8d4 <dict_get_helper>
    ea00:	4603      	mov	r3, r0
}
    ea02:	4618      	mov	r0, r3
    ea04:	3708      	adds	r7, #8
    ea06:	46bd      	mov	sp, r7
    ea08:	bd80      	pop	{r7, pc}

0000ea0a <dict_popitem>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_setdefault_obj, 2, 3, dict_setdefault);

STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    ea0a:	b580      	push	{r7, lr}
    ea0c:	b088      	sub	sp, #32
    ea0e:	af00      	add	r7, sp, #0
    ea10:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ea12:	6878      	ldr	r0, [r7, #4]
    ea14:	f7ff fc70 	bl	e2f8 <MP_OBJ_IS_OBJ>
    ea18:	4603      	mov	r3, r0
    ea1a:	2b00      	cmp	r3, #0
    ea1c:	d005      	beq.n	ea2a <dict_popitem+0x20>
    ea1e:	687b      	ldr	r3, [r7, #4]
    ea20:	681b      	ldr	r3, [r3, #0]
    ea22:	68db      	ldr	r3, [r3, #12]
    ea24:	4a22      	ldr	r2, [pc, #136]	; (eab0 <dict_popitem+0xa6>)
    ea26:	4293      	cmp	r3, r2
    ea28:	d006      	beq.n	ea38 <dict_popitem+0x2e>
    ea2a:	4b22      	ldr	r3, [pc, #136]	; (eab4 <dict_popitem+0xaa>)
    ea2c:	4a22      	ldr	r2, [pc, #136]	; (eab8 <dict_popitem+0xae>)
    ea2e:	f44f 7199 	mov.w	r1, #306	; 0x132
    ea32:	4822      	ldr	r0, [pc, #136]	; (eabc <dict_popitem+0xb2>)
    ea34:	f00c fd24 	bl	1b480 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ea38:	687b      	ldr	r3, [r7, #4]
    ea3a:	61fb      	str	r3, [r7, #28]
    mp_ensure_not_fixed(self);
    ea3c:	69f8      	ldr	r0, [r7, #28]
    ea3e:	f7ff fe61 	bl	e704 <mp_ensure_not_fixed>
    size_t cur = 0;
    ea42:	2300      	movs	r3, #0
    ea44:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    ea46:	f107 0310 	add.w	r3, r7, #16
    ea4a:	4619      	mov	r1, r3
    ea4c:	69f8      	ldr	r0, [r7, #28]
    ea4e:	f7ff fcb7 	bl	e3c0 <dict_iter_next>
    ea52:	61b8      	str	r0, [r7, #24]
    if (next == NULL) {
    ea54:	69bb      	ldr	r3, [r7, #24]
    ea56:	2b00      	cmp	r3, #0
    ea58:	d103      	bne.n	ea62 <dict_popitem+0x58>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    ea5a:	4919      	ldr	r1, [pc, #100]	; (eac0 <dict_popitem+0xb6>)
    ea5c:	4819      	ldr	r0, [pc, #100]	; (eac4 <dict_popitem+0xba>)
    ea5e:	f7fe f9e1 	bl	ce24 <mp_raise_msg>
    }
    self->map.used--;
    ea62:	69fb      	ldr	r3, [r7, #28]
    ea64:	685b      	ldr	r3, [r3, #4]
    ea66:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ea6a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    ea6e:	3b01      	subs	r3, #1
    ea70:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    ea74:	69f9      	ldr	r1, [r7, #28]
    ea76:	684a      	ldr	r2, [r1, #4]
    ea78:	f363 02df 	bfi	r2, r3, #3, #29
    ea7c:	604a      	str	r2, [r1, #4]
    mp_obj_t items[] = {next->key, next->value};
    ea7e:	69bb      	ldr	r3, [r7, #24]
    ea80:	681b      	ldr	r3, [r3, #0]
    ea82:	60bb      	str	r3, [r7, #8]
    ea84:	69bb      	ldr	r3, [r7, #24]
    ea86:	685b      	ldr	r3, [r3, #4]
    ea88:	60fb      	str	r3, [r7, #12]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    ea8a:	69bb      	ldr	r3, [r7, #24]
    ea8c:	2208      	movs	r2, #8
    ea8e:	601a      	str	r2, [r3, #0]
    next->value = MP_OBJ_NULL;
    ea90:	69bb      	ldr	r3, [r7, #24]
    ea92:	2200      	movs	r2, #0
    ea94:	605a      	str	r2, [r3, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    ea96:	f107 0308 	add.w	r3, r7, #8
    ea9a:	4619      	mov	r1, r3
    ea9c:	2002      	movs	r0, #2
    ea9e:	f007 f8b9 	bl	15c14 <mp_obj_new_tuple>
    eaa2:	6178      	str	r0, [r7, #20]

    return tuple;
    eaa4:	697b      	ldr	r3, [r7, #20]
}
    eaa6:	4618      	mov	r0, r3
    eaa8:	3720      	adds	r7, #32
    eaaa:	46bd      	mov	sp, r7
    eaac:	bd80      	pop	{r7, pc}
    eaae:	bf00      	nop
    eab0:	0000e4b5 	.word	0x0000e4b5
    eab4:	00021968 	.word	0x00021968
    eab8:	00021da4 	.word	0x00021da4
    eabc:	000219c8 	.word	0x000219c8
    eac0:	00021a84 	.word	0x00021a84
    eac4:	000221c8 	.word	0x000221c8

0000eac8 <dict_update>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_popitem_obj, dict_popitem);

STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    eac8:	b580      	push	{r7, lr}
    eaca:	b090      	sub	sp, #64	; 0x40
    eacc:	af02      	add	r7, sp, #8
    eace:	60f8      	str	r0, [r7, #12]
    ead0:	60b9      	str	r1, [r7, #8]
    ead2:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    ead4:	68bb      	ldr	r3, [r7, #8]
    ead6:	681b      	ldr	r3, [r3, #0]
    ead8:	4618      	mov	r0, r3
    eada:	f7ff fc0d 	bl	e2f8 <MP_OBJ_IS_OBJ>
    eade:	4603      	mov	r3, r0
    eae0:	2b00      	cmp	r3, #0
    eae2:	d006      	beq.n	eaf2 <dict_update+0x2a>
    eae4:	68bb      	ldr	r3, [r7, #8]
    eae6:	681b      	ldr	r3, [r3, #0]
    eae8:	681b      	ldr	r3, [r3, #0]
    eaea:	68db      	ldr	r3, [r3, #12]
    eaec:	4a5c      	ldr	r2, [pc, #368]	; (ec60 <dict_update+0x198>)
    eaee:	4293      	cmp	r3, r2
    eaf0:	d006      	beq.n	eb00 <dict_update+0x38>
    eaf2:	4b5c      	ldr	r3, [pc, #368]	; (ec64 <dict_update+0x19c>)
    eaf4:	4a5c      	ldr	r2, [pc, #368]	; (ec68 <dict_update+0x1a0>)
    eaf6:	f240 1145 	movw	r1, #325	; 0x145
    eafa:	485c      	ldr	r0, [pc, #368]	; (ec6c <dict_update+0x1a4>)
    eafc:	f00c fcc0 	bl	1b480 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    eb00:	68bb      	ldr	r3, [r7, #8]
    eb02:	681b      	ldr	r3, [r3, #0]
    eb04:	633b      	str	r3, [r7, #48]	; 0x30
    mp_ensure_not_fixed(self);
    eb06:	6b38      	ldr	r0, [r7, #48]	; 0x30
    eb08:	f7ff fdfc 	bl	e704 <mp_ensure_not_fixed>

    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    eb0c:	687b      	ldr	r3, [r7, #4]
    eb0e:	681b      	ldr	r3, [r3, #0]
    eb10:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    eb14:	4619      	mov	r1, r3
    eb16:	2301      	movs	r3, #1
    eb18:	9300      	str	r3, [sp, #0]
    eb1a:	2302      	movs	r3, #2
    eb1c:	2201      	movs	r2, #1
    eb1e:	68f8      	ldr	r0, [r7, #12]
    eb20:	f7ff fc32 	bl	e388 <mp_arg_check_num>

    if (n_args == 2) {
    eb24:	68fb      	ldr	r3, [r7, #12]
    eb26:	2b02      	cmp	r3, #2
    eb28:	d16f      	bne.n	ec0a <dict_update+0x142>
        // given a positional argument

        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    eb2a:	68bb      	ldr	r3, [r7, #8]
    eb2c:	3304      	adds	r3, #4
    eb2e:	681b      	ldr	r3, [r3, #0]
    eb30:	4618      	mov	r0, r3
    eb32:	f7ff fbe1 	bl	e2f8 <MP_OBJ_IS_OBJ>
    eb36:	4603      	mov	r3, r0
    eb38:	2b00      	cmp	r3, #0
    eb3a:	d02d      	beq.n	eb98 <dict_update+0xd0>
    eb3c:	68bb      	ldr	r3, [r7, #8]
    eb3e:	3304      	adds	r3, #4
    eb40:	681b      	ldr	r3, [r3, #0]
    eb42:	681b      	ldr	r3, [r3, #0]
    eb44:	68db      	ldr	r3, [r3, #12]
    eb46:	4a46      	ldr	r2, [pc, #280]	; (ec60 <dict_update+0x198>)
    eb48:	4293      	cmp	r3, r2
    eb4a:	d125      	bne.n	eb98 <dict_update+0xd0>
            // update from other dictionary (make sure other is not self)
            if (args[1] != args[0]) {
    eb4c:	68bb      	ldr	r3, [r7, #8]
    eb4e:	3304      	adds	r3, #4
    eb50:	681a      	ldr	r2, [r3, #0]
    eb52:	68bb      	ldr	r3, [r7, #8]
    eb54:	681b      	ldr	r3, [r3, #0]
    eb56:	429a      	cmp	r2, r3
    eb58:	d057      	beq.n	ec0a <dict_update+0x142>
                size_t cur = 0;
    eb5a:	2300      	movs	r3, #0
    eb5c:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *elem = NULL;
    eb5e:	2300      	movs	r3, #0
    eb60:	62fb      	str	r3, [r7, #44]	; 0x2c
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    eb62:	e00b      	b.n	eb7c <dict_update+0xb4>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    eb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eb66:	1d18      	adds	r0, r3, #4
    eb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb6a:	681b      	ldr	r3, [r3, #0]
    eb6c:	2201      	movs	r2, #1
    eb6e:	4619      	mov	r1, r3
    eb70:	f7fe fbf4 	bl	d35c <mp_map_lookup>
    eb74:	4602      	mov	r2, r0
    eb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb78:	685b      	ldr	r3, [r3, #4]
    eb7a:	6053      	str	r3, [r2, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    eb7c:	68bb      	ldr	r3, [r7, #8]
    eb7e:	3304      	adds	r3, #4
    eb80:	681b      	ldr	r3, [r3, #0]
    eb82:	f107 0210 	add.w	r2, r7, #16
    eb86:	4611      	mov	r1, r2
    eb88:	4618      	mov	r0, r3
    eb8a:	f7ff fc19 	bl	e3c0 <dict_iter_next>
    eb8e:	62f8      	str	r0, [r7, #44]	; 0x2c
    eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb92:	2b00      	cmp	r3, #0
    eb94:	d1e6      	bne.n	eb64 <dict_update+0x9c>
            if (args[1] != args[0]) {
    eb96:	e038      	b.n	ec0a <dict_update+0x142>
                }
            }
        } else {
            // update from a generic iterable of pairs
            mp_obj_t iter = mp_getiter(args[1], NULL);
    eb98:	68bb      	ldr	r3, [r7, #8]
    eb9a:	3304      	adds	r3, #4
    eb9c:	681b      	ldr	r3, [r3, #0]
    eb9e:	2100      	movs	r1, #0
    eba0:	4618      	mov	r0, r3
    eba2:	f7fd fe27 	bl	c7f4 <mp_getiter>
    eba6:	62b8      	str	r0, [r7, #40]	; 0x28
            mp_obj_t next = MP_OBJ_NULL;
    eba8:	2300      	movs	r3, #0
    ebaa:	627b      	str	r3, [r7, #36]	; 0x24
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ebac:	e026      	b.n	ebfc <dict_update+0x134>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    ebae:	2100      	movs	r1, #0
    ebb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ebb2:	f7fd fe1f 	bl	c7f4 <mp_getiter>
    ebb6:	6238      	str	r0, [r7, #32]
                mp_obj_t key = mp_iternext(inneriter);
    ebb8:	6a38      	ldr	r0, [r7, #32]
    ebba:	f7fd fe9d 	bl	c8f8 <mp_iternext>
    ebbe:	61f8      	str	r0, [r7, #28]
                mp_obj_t value = mp_iternext(inneriter);
    ebc0:	6a38      	ldr	r0, [r7, #32]
    ebc2:	f7fd fe99 	bl	c8f8 <mp_iternext>
    ebc6:	61b8      	str	r0, [r7, #24]
                mp_obj_t stop = mp_iternext(inneriter);
    ebc8:	6a38      	ldr	r0, [r7, #32]
    ebca:	f7fd fe95 	bl	c8f8 <mp_iternext>
    ebce:	6178      	str	r0, [r7, #20]
                if (key == MP_OBJ_STOP_ITERATION
    ebd0:	69fb      	ldr	r3, [r7, #28]
    ebd2:	2b04      	cmp	r3, #4
    ebd4:	d005      	beq.n	ebe2 <dict_update+0x11a>
                    || value == MP_OBJ_STOP_ITERATION
    ebd6:	69bb      	ldr	r3, [r7, #24]
    ebd8:	2b04      	cmp	r3, #4
    ebda:	d002      	beq.n	ebe2 <dict_update+0x11a>
                    || stop != MP_OBJ_STOP_ITERATION) {
    ebdc:	697b      	ldr	r3, [r7, #20]
    ebde:	2b04      	cmp	r3, #4
    ebe0:	d002      	beq.n	ebe8 <dict_update+0x120>
                    mp_raise_ValueError("dict update sequence has wrong length");
    ebe2:	4823      	ldr	r0, [pc, #140]	; (ec70 <dict_update+0x1a8>)
    ebe4:	f7fe f935 	bl	ce52 <mp_raise_ValueError>
                } else {
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ebea:	3304      	adds	r3, #4
    ebec:	2201      	movs	r2, #1
    ebee:	69f9      	ldr	r1, [r7, #28]
    ebf0:	4618      	mov	r0, r3
    ebf2:	f7fe fbb3 	bl	d35c <mp_map_lookup>
    ebf6:	4602      	mov	r2, r0
    ebf8:	69bb      	ldr	r3, [r7, #24]
    ebfa:	6053      	str	r3, [r2, #4]
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ebfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ebfe:	f7fd fe7b 	bl	c8f8 <mp_iternext>
    ec02:	6278      	str	r0, [r7, #36]	; 0x24
    ec04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ec06:	2b04      	cmp	r3, #4
    ec08:	d1d1      	bne.n	ebae <dict_update+0xe6>
            }
        }
    }

    // update the dict with any keyword args
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ec0a:	2300      	movs	r3, #0
    ec0c:	637b      	str	r3, [r7, #52]	; 0x34
    ec0e:	e01d      	b.n	ec4c <dict_update+0x184>
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    ec10:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ec12:	6878      	ldr	r0, [r7, #4]
    ec14:	f7ff fb82 	bl	e31c <MP_MAP_SLOT_IS_FILLED>
    ec18:	4603      	mov	r3, r0
    ec1a:	2b00      	cmp	r3, #0
    ec1c:	d013      	beq.n	ec46 <dict_update+0x17e>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    ec1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec20:	1d18      	adds	r0, r3, #4
    ec22:	687b      	ldr	r3, [r7, #4]
    ec24:	689a      	ldr	r2, [r3, #8]
    ec26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec28:	00db      	lsls	r3, r3, #3
    ec2a:	4413      	add	r3, r2
    ec2c:	681b      	ldr	r3, [r3, #0]
    ec2e:	2201      	movs	r2, #1
    ec30:	4619      	mov	r1, r3
    ec32:	f7fe fb93 	bl	d35c <mp_map_lookup>
    ec36:	4601      	mov	r1, r0
    ec38:	687b      	ldr	r3, [r7, #4]
    ec3a:	689a      	ldr	r2, [r3, #8]
    ec3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec3e:	00db      	lsls	r3, r3, #3
    ec40:	4413      	add	r3, r2
    ec42:	685b      	ldr	r3, [r3, #4]
    ec44:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ec46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec48:	3301      	adds	r3, #1
    ec4a:	637b      	str	r3, [r7, #52]	; 0x34
    ec4c:	687b      	ldr	r3, [r7, #4]
    ec4e:	685a      	ldr	r2, [r3, #4]
    ec50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ec52:	429a      	cmp	r2, r3
    ec54:	d8dc      	bhi.n	ec10 <dict_update+0x148>
        }
    }

    return mp_const_none;
    ec56:	4b07      	ldr	r3, [pc, #28]	; (ec74 <dict_update+0x1ac>)
}
    ec58:	4618      	mov	r0, r3
    ec5a:	3738      	adds	r7, #56	; 0x38
    ec5c:	46bd      	mov	sp, r7
    ec5e:	bd80      	pop	{r7, pc}
    ec60:	0000e4b5 	.word	0x0000e4b5
    ec64:	00021a00 	.word	0x00021a00
    ec68:	00021db4 	.word	0x00021db4
    ec6c:	000219c8 	.word	0x000219c8
    ec70:	00021aac 	.word	0x00021aac
    ec74:	00023108 	.word	0x00023108

0000ec78 <dict_view_it_iternext>:
    mp_obj_base_t base;
    mp_obj_t dict;
    mp_dict_view_kind_t kind;
} mp_obj_dict_view_t;

STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    ec78:	b580      	push	{r7, lr}
    ec7a:	b086      	sub	sp, #24
    ec7c:	af00      	add	r7, sp, #0
    ec7e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    ec80:	6878      	ldr	r0, [r7, #4]
    ec82:	f7ff fb39 	bl	e2f8 <MP_OBJ_IS_OBJ>
    ec86:	4603      	mov	r3, r0
    ec88:	2b00      	cmp	r3, #0
    ec8a:	d004      	beq.n	ec96 <dict_view_it_iternext+0x1e>
    ec8c:	687b      	ldr	r3, [r7, #4]
    ec8e:	681b      	ldr	r3, [r3, #0]
    ec90:	4a1b      	ldr	r2, [pc, #108]	; (ed00 <dict_view_it_iternext+0x88>)
    ec92:	4293      	cmp	r3, r2
    ec94:	d006      	beq.n	eca4 <dict_view_it_iternext+0x2c>
    ec96:	4b1b      	ldr	r3, [pc, #108]	; (ed04 <dict_view_it_iternext+0x8c>)
    ec98:	4a1b      	ldr	r2, [pc, #108]	; (ed08 <dict_view_it_iternext+0x90>)
    ec9a:	f240 1193 	movw	r1, #403	; 0x193
    ec9e:	481b      	ldr	r0, [pc, #108]	; (ed0c <dict_view_it_iternext+0x94>)
    eca0:	f00c fbee 	bl	1b480 <__assert_func>
    mp_obj_dict_view_it_t *self = MP_OBJ_TO_PTR(self_in);
    eca4:	687b      	ldr	r3, [r7, #4]
    eca6:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    eca8:	697b      	ldr	r3, [r7, #20]
    ecaa:	689a      	ldr	r2, [r3, #8]
    ecac:	697b      	ldr	r3, [r7, #20]
    ecae:	330c      	adds	r3, #12
    ecb0:	4619      	mov	r1, r3
    ecb2:	4610      	mov	r0, r2
    ecb4:	f7ff fb84 	bl	e3c0 <dict_iter_next>
    ecb8:	6138      	str	r0, [r7, #16]

    if (next == NULL) {
    ecba:	693b      	ldr	r3, [r7, #16]
    ecbc:	2b00      	cmp	r3, #0
    ecbe:	d101      	bne.n	ecc4 <dict_view_it_iternext+0x4c>
        return MP_OBJ_STOP_ITERATION;
    ecc0:	2304      	movs	r3, #4
    ecc2:	e018      	b.n	ecf6 <dict_view_it_iternext+0x7e>
    } else {
        switch (self->kind) {
    ecc4:	697b      	ldr	r3, [r7, #20]
    ecc6:	685b      	ldr	r3, [r3, #4]
    ecc8:	2b01      	cmp	r3, #1
    ecca:	d00f      	beq.n	ecec <dict_view_it_iternext+0x74>
    eccc:	2b02      	cmp	r3, #2
    ecce:	d010      	beq.n	ecf2 <dict_view_it_iternext+0x7a>
            case MP_DICT_VIEW_ITEMS:
            default: {
                mp_obj_t items[] = {next->key, next->value};
    ecd0:	693b      	ldr	r3, [r7, #16]
    ecd2:	681b      	ldr	r3, [r3, #0]
    ecd4:	60bb      	str	r3, [r7, #8]
    ecd6:	693b      	ldr	r3, [r7, #16]
    ecd8:	685b      	ldr	r3, [r3, #4]
    ecda:	60fb      	str	r3, [r7, #12]
                return mp_obj_new_tuple(2, items);
    ecdc:	f107 0308 	add.w	r3, r7, #8
    ece0:	4619      	mov	r1, r3
    ece2:	2002      	movs	r0, #2
    ece4:	f006 ff96 	bl	15c14 <mp_obj_new_tuple>
    ece8:	4603      	mov	r3, r0
    ecea:	e004      	b.n	ecf6 <dict_view_it_iternext+0x7e>
            }
            case MP_DICT_VIEW_KEYS:
                return next->key;
    ecec:	693b      	ldr	r3, [r7, #16]
    ecee:	681b      	ldr	r3, [r3, #0]
    ecf0:	e001      	b.n	ecf6 <dict_view_it_iternext+0x7e>
            case MP_DICT_VIEW_VALUES:
                return next->value;
    ecf2:	693b      	ldr	r3, [r7, #16]
    ecf4:	685b      	ldr	r3, [r3, #4]
        }
    }
}
    ecf6:	4618      	mov	r0, r3
    ecf8:	3718      	adds	r7, #24
    ecfa:	46bd      	mov	sp, r7
    ecfc:	bd80      	pop	{r7, pc}
    ecfe:	bf00      	nop
    ed00:	00021b1c 	.word	0x00021b1c
    ed04:	00021b88 	.word	0x00021b88
    ed08:	00021dc0 	.word	0x00021dc0
    ed0c:	000219c8 	.word	0x000219c8

0000ed10 <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    ed10:	b580      	push	{r7, lr}
    ed12:	b084      	sub	sp, #16
    ed14:	af00      	add	r7, sp, #0
    ed16:	6078      	str	r0, [r7, #4]
    ed18:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    ed1a:	6878      	ldr	r0, [r7, #4]
    ed1c:	f7ff faec 	bl	e2f8 <MP_OBJ_IS_OBJ>
    ed20:	4603      	mov	r3, r0
    ed22:	2b00      	cmp	r3, #0
    ed24:	d004      	beq.n	ed30 <dict_view_getiter+0x20>
    ed26:	687b      	ldr	r3, [r7, #4]
    ed28:	681b      	ldr	r3, [r3, #0]
    ed2a:	4a10      	ldr	r2, [pc, #64]	; (ed6c <dict_view_getiter+0x5c>)
    ed2c:	4293      	cmp	r3, r2
    ed2e:	d006      	beq.n	ed3e <dict_view_getiter+0x2e>
    ed30:	4b0f      	ldr	r3, [pc, #60]	; (ed70 <dict_view_getiter+0x60>)
    ed32:	4a10      	ldr	r2, [pc, #64]	; (ed74 <dict_view_getiter+0x64>)
    ed34:	f240 11b1 	movw	r1, #433	; 0x1b1
    ed38:	480f      	ldr	r0, [pc, #60]	; (ed78 <dict_view_getiter+0x68>)
    ed3a:	f00c fba1 	bl	1b480 <__assert_func>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    ed3e:	687b      	ldr	r3, [r7, #4]
    ed40:	60fb      	str	r3, [r7, #12]
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    ed42:	683b      	ldr	r3, [r7, #0]
    ed44:	60bb      	str	r3, [r7, #8]
    o->base.type = &dict_view_it_type;
    ed46:	68bb      	ldr	r3, [r7, #8]
    ed48:	4a0c      	ldr	r2, [pc, #48]	; (ed7c <dict_view_getiter+0x6c>)
    ed4a:	601a      	str	r2, [r3, #0]
    o->kind = view->kind;
    ed4c:	68fb      	ldr	r3, [r7, #12]
    ed4e:	689a      	ldr	r2, [r3, #8]
    ed50:	68bb      	ldr	r3, [r7, #8]
    ed52:	605a      	str	r2, [r3, #4]
    o->dict = view->dict;
    ed54:	68fb      	ldr	r3, [r7, #12]
    ed56:	685a      	ldr	r2, [r3, #4]
    ed58:	68bb      	ldr	r3, [r7, #8]
    ed5a:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    ed5c:	68bb      	ldr	r3, [r7, #8]
    ed5e:	2200      	movs	r2, #0
    ed60:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    ed62:	68bb      	ldr	r3, [r7, #8]
}
    ed64:	4618      	mov	r0, r3
    ed66:	3710      	adds	r7, #16
    ed68:	46bd      	mov	sp, r7
    ed6a:	bd80      	pop	{r7, pc}
    ed6c:	00021ae0 	.word	0x00021ae0
    ed70:	00021be8 	.word	0x00021be8
    ed74:	00021dd8 	.word	0x00021dd8
    ed78:	000219c8 	.word	0x000219c8
    ed7c:	00021b1c 	.word	0x00021b1c

0000ed80 <dict_view_print>:

STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    ed80:	b580      	push	{r7, lr}
    ed82:	b08c      	sub	sp, #48	; 0x30
    ed84:	af00      	add	r7, sp, #0
    ed86:	60f8      	str	r0, [r7, #12]
    ed88:	60b9      	str	r1, [r7, #8]
    ed8a:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    ed8c:	68b8      	ldr	r0, [r7, #8]
    ed8e:	f7ff fab3 	bl	e2f8 <MP_OBJ_IS_OBJ>
    ed92:	4603      	mov	r3, r0
    ed94:	2b00      	cmp	r3, #0
    ed96:	d004      	beq.n	eda2 <dict_view_print+0x22>
    ed98:	68bb      	ldr	r3, [r7, #8]
    ed9a:	681b      	ldr	r3, [r3, #0]
    ed9c:	4a23      	ldr	r2, [pc, #140]	; (ee2c <dict_view_print+0xac>)
    ed9e:	4293      	cmp	r3, r2
    eda0:	d006      	beq.n	edb0 <dict_view_print+0x30>
    eda2:	4b23      	ldr	r3, [pc, #140]	; (ee30 <dict_view_print+0xb0>)
    eda4:	4a23      	ldr	r2, [pc, #140]	; (ee34 <dict_view_print+0xb4>)
    eda6:	f240 11bd 	movw	r1, #445	; 0x1bd
    edaa:	4823      	ldr	r0, [pc, #140]	; (ee38 <dict_view_print+0xb8>)
    edac:	f00c fb68 	bl	1b480 <__assert_func>
    mp_obj_dict_view_t *self = MP_OBJ_TO_PTR(self_in);
    edb0:	68bb      	ldr	r3, [r7, #8]
    edb2:	62bb      	str	r3, [r7, #40]	; 0x28
    bool first = true;
    edb4:	2301      	movs	r3, #1
    edb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    mp_print_str(print, mp_dict_view_names[self->kind]);
    edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edbc:	689b      	ldr	r3, [r3, #8]
    edbe:	4a1f      	ldr	r2, [pc, #124]	; (ee3c <dict_view_print+0xbc>)
    edc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edc4:	4619      	mov	r1, r3
    edc6:	68f8      	ldr	r0, [r7, #12]
    edc8:	f7f2 fd7c 	bl	18c4 <mp_print_str>
    mp_print_str(print, "([");
    edcc:	491c      	ldr	r1, [pc, #112]	; (ee40 <dict_view_print+0xc0>)
    edce:	68f8      	ldr	r0, [r7, #12]
    edd0:	f7f2 fd78 	bl	18c4 <mp_print_str>
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    edd4:	f107 0310 	add.w	r3, r7, #16
    edd8:	4619      	mov	r1, r3
    edda:	68b8      	ldr	r0, [r7, #8]
    eddc:	f7ff ff98 	bl	ed10 <dict_view_getiter>
    ede0:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_t next = MP_OBJ_NULL;
    ede2:	2300      	movs	r3, #0
    ede4:	623b      	str	r3, [r7, #32]
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    ede6:	e012      	b.n	ee0e <dict_view_print+0x8e>
        if (!first) {
    ede8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    edec:	f083 0301 	eor.w	r3, r3, #1
    edf0:	b2db      	uxtb	r3, r3
    edf2:	2b00      	cmp	r3, #0
    edf4:	d003      	beq.n	edfe <dict_view_print+0x7e>
            mp_print_str(print, ", ");
    edf6:	4913      	ldr	r1, [pc, #76]	; (ee44 <dict_view_print+0xc4>)
    edf8:	68f8      	ldr	r0, [r7, #12]
    edfa:	f7f2 fd63 	bl	18c4 <mp_print_str>
        }
        first = false;
    edfe:	2300      	movs	r3, #0
    ee00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        mp_obj_print_helper(print, next, PRINT_REPR);
    ee04:	2201      	movs	r2, #1
    ee06:	6a39      	ldr	r1, [r7, #32]
    ee08:	68f8      	ldr	r0, [r7, #12]
    ee0a:	f7fe fc82 	bl	d712 <mp_obj_print_helper>
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    ee0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ee10:	f7ff ff32 	bl	ec78 <dict_view_it_iternext>
    ee14:	6238      	str	r0, [r7, #32]
    ee16:	6a3b      	ldr	r3, [r7, #32]
    ee18:	2b04      	cmp	r3, #4
    ee1a:	d1e5      	bne.n	ede8 <dict_view_print+0x68>
    }
    mp_print_str(print, "])");
    ee1c:	490a      	ldr	r1, [pc, #40]	; (ee48 <dict_view_print+0xc8>)
    ee1e:	68f8      	ldr	r0, [r7, #12]
    ee20:	f7f2 fd50 	bl	18c4 <mp_print_str>
}
    ee24:	bf00      	nop
    ee26:	3730      	adds	r7, #48	; 0x30
    ee28:	46bd      	mov	sp, r7
    ee2a:	bd80      	pop	{r7, pc}
    ee2c:	00021ae0 	.word	0x00021ae0
    ee30:	00021c44 	.word	0x00021c44
    ee34:	00021dec 	.word	0x00021dec
    ee38:	000219c8 	.word	0x000219c8
    ee3c:	00021b7c 	.word	0x00021b7c
    ee40:	00021ca0 	.word	0x00021ca0
    ee44:	0002195c 	.word	0x0002195c
    ee48:	00021ca4 	.word	0x00021ca4

0000ee4c <dict_view_binary_op>:

STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    ee4c:	b580      	push	{r7, lr}
    ee4e:	b086      	sub	sp, #24
    ee50:	af00      	add	r7, sp, #0
    ee52:	60f8      	str	r0, [r7, #12]
    ee54:	60b9      	str	r1, [r7, #8]
    ee56:	607a      	str	r2, [r7, #4]
    // only supported for the 'keys' kind until sets and dicts are refactored
    mp_obj_dict_view_t *o = MP_OBJ_TO_PTR(lhs_in);
    ee58:	68bb      	ldr	r3, [r7, #8]
    ee5a:	617b      	str	r3, [r7, #20]
    if (o->kind != MP_DICT_VIEW_KEYS) {
    ee5c:	697b      	ldr	r3, [r7, #20]
    ee5e:	689b      	ldr	r3, [r3, #8]
    ee60:	2b01      	cmp	r3, #1
    ee62:	d001      	beq.n	ee68 <dict_view_binary_op+0x1c>
        return MP_OBJ_NULL; // op not supported
    ee64:	2300      	movs	r3, #0
    ee66:	e00c      	b.n	ee82 <dict_view_binary_op+0x36>
    }
    if (op != MP_BINARY_OP_CONTAINS) {
    ee68:	68fb      	ldr	r3, [r7, #12]
    ee6a:	2b22      	cmp	r3, #34	; 0x22
    ee6c:	d001      	beq.n	ee72 <dict_view_binary_op+0x26>
        return MP_OBJ_NULL; // op not supported
    ee6e:	2300      	movs	r3, #0
    ee70:	e007      	b.n	ee82 <dict_view_binary_op+0x36>
    }
    return dict_binary_op(op, o->dict, rhs_in);
    ee72:	697b      	ldr	r3, [r7, #20]
    ee74:	685b      	ldr	r3, [r3, #4]
    ee76:	687a      	ldr	r2, [r7, #4]
    ee78:	4619      	mov	r1, r3
    ee7a:	68f8      	ldr	r0, [r7, #12]
    ee7c:	f7ff fb75 	bl	e56a <dict_binary_op>
    ee80:	4603      	mov	r3, r0
}
    ee82:	4618      	mov	r0, r3
    ee84:	3718      	adds	r7, #24
    ee86:	46bd      	mov	sp, r7
    ee88:	bd80      	pop	{r7, pc}

0000ee8a <mp_obj_new_dict_view>:
    .print = dict_view_print,
    .binary_op = dict_view_binary_op,
    .getiter = dict_view_getiter,
};

STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    ee8a:	b580      	push	{r7, lr}
    ee8c:	b084      	sub	sp, #16
    ee8e:	af00      	add	r7, sp, #0
    ee90:	6078      	str	r0, [r7, #4]
    ee92:	6039      	str	r1, [r7, #0]
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    ee94:	200c      	movs	r0, #12
    ee96:	f7f1 fa41 	bl	31c <m_malloc>
    ee9a:	60f8      	str	r0, [r7, #12]
    o->base.type = &dict_view_type;
    ee9c:	68fb      	ldr	r3, [r7, #12]
    ee9e:	4a06      	ldr	r2, [pc, #24]	; (eeb8 <mp_obj_new_dict_view+0x2e>)
    eea0:	601a      	str	r2, [r3, #0]
    o->dict = dict;
    eea2:	68fb      	ldr	r3, [r7, #12]
    eea4:	687a      	ldr	r2, [r7, #4]
    eea6:	605a      	str	r2, [r3, #4]
    o->kind = kind;
    eea8:	68fb      	ldr	r3, [r7, #12]
    eeaa:	683a      	ldr	r2, [r7, #0]
    eeac:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    eeae:	68fb      	ldr	r3, [r7, #12]
}
    eeb0:	4618      	mov	r0, r3
    eeb2:	3710      	adds	r7, #16
    eeb4:	46bd      	mov	sp, r7
    eeb6:	bd80      	pop	{r7, pc}
    eeb8:	00021ae0 	.word	0x00021ae0

0000eebc <dict_view>:

STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    eebc:	b580      	push	{r7, lr}
    eebe:	b082      	sub	sp, #8
    eec0:	af00      	add	r7, sp, #0
    eec2:	6078      	str	r0, [r7, #4]
    eec4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    eec6:	6878      	ldr	r0, [r7, #4]
    eec8:	f7ff fa16 	bl	e2f8 <MP_OBJ_IS_OBJ>
    eecc:	4603      	mov	r3, r0
    eece:	2b00      	cmp	r3, #0
    eed0:	d005      	beq.n	eede <dict_view+0x22>
    eed2:	687b      	ldr	r3, [r7, #4]
    eed4:	681b      	ldr	r3, [r3, #0]
    eed6:	68db      	ldr	r3, [r3, #12]
    eed8:	4a09      	ldr	r2, [pc, #36]	; (ef00 <dict_view+0x44>)
    eeda:	4293      	cmp	r3, r2
    eedc:	d006      	beq.n	eeec <dict_view+0x30>
    eede:	4b09      	ldr	r3, [pc, #36]	; (ef04 <dict_view+0x48>)
    eee0:	4a09      	ldr	r2, [pc, #36]	; (ef08 <dict_view+0x4c>)
    eee2:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    eee6:	4809      	ldr	r0, [pc, #36]	; (ef0c <dict_view+0x50>)
    eee8:	f00c faca 	bl	1b480 <__assert_func>
    return mp_obj_new_dict_view(self_in, kind);
    eeec:	6839      	ldr	r1, [r7, #0]
    eeee:	6878      	ldr	r0, [r7, #4]
    eef0:	f7ff ffcb 	bl	ee8a <mp_obj_new_dict_view>
    eef4:	4603      	mov	r3, r0
}
    eef6:	4618      	mov	r0, r3
    eef8:	3708      	adds	r7, #8
    eefa:	46bd      	mov	sp, r7
    eefc:	bd80      	pop	{r7, pc}
    eefe:	bf00      	nop
    ef00:	0000e4b5 	.word	0x0000e4b5
    ef04:	00021968 	.word	0x00021968
    ef08:	00021dfc 	.word	0x00021dfc
    ef0c:	000219c8 	.word	0x000219c8

0000ef10 <dict_items>:

STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    ef10:	b580      	push	{r7, lr}
    ef12:	b082      	sub	sp, #8
    ef14:	af00      	add	r7, sp, #0
    ef16:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    ef18:	2100      	movs	r1, #0
    ef1a:	6878      	ldr	r0, [r7, #4]
    ef1c:	f7ff ffce 	bl	eebc <dict_view>
    ef20:	4603      	mov	r3, r0
}
    ef22:	4618      	mov	r0, r3
    ef24:	3708      	adds	r7, #8
    ef26:	46bd      	mov	sp, r7
    ef28:	bd80      	pop	{r7, pc}

0000ef2a <dict_keys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_items_obj, dict_items);

STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    ef2a:	b580      	push	{r7, lr}
    ef2c:	b082      	sub	sp, #8
    ef2e:	af00      	add	r7, sp, #0
    ef30:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    ef32:	2101      	movs	r1, #1
    ef34:	6878      	ldr	r0, [r7, #4]
    ef36:	f7ff ffc1 	bl	eebc <dict_view>
    ef3a:	4603      	mov	r3, r0
}
    ef3c:	4618      	mov	r0, r3
    ef3e:	3708      	adds	r7, #8
    ef40:	46bd      	mov	sp, r7
    ef42:	bd80      	pop	{r7, pc}

0000ef44 <dict_values>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_keys_obj, dict_keys);

STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    ef44:	b580      	push	{r7, lr}
    ef46:	b082      	sub	sp, #8
    ef48:	af00      	add	r7, sp, #0
    ef4a:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    ef4c:	2102      	movs	r1, #2
    ef4e:	6878      	ldr	r0, [r7, #4]
    ef50:	f7ff ffb4 	bl	eebc <dict_view>
    ef54:	4603      	mov	r3, r0
}
    ef56:	4618      	mov	r0, r3
    ef58:	3708      	adds	r7, #8
    ef5a:	46bd      	mov	sp, r7
    ef5c:	bd80      	pop	{r7, pc}

0000ef5e <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    ef5e:	b580      	push	{r7, lr}
    ef60:	b084      	sub	sp, #16
    ef62:	af00      	add	r7, sp, #0
    ef64:	6078      	str	r0, [r7, #4]
    ef66:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ef68:	6878      	ldr	r0, [r7, #4]
    ef6a:	f7ff f9c5 	bl	e2f8 <MP_OBJ_IS_OBJ>
    ef6e:	4603      	mov	r3, r0
    ef70:	2b00      	cmp	r3, #0
    ef72:	d005      	beq.n	ef80 <dict_getiter+0x22>
    ef74:	687b      	ldr	r3, [r7, #4]
    ef76:	681b      	ldr	r3, [r3, #0]
    ef78:	68db      	ldr	r3, [r3, #12]
    ef7a:	4a0e      	ldr	r2, [pc, #56]	; (efb4 <dict_getiter+0x56>)
    ef7c:	4293      	cmp	r3, r2
    ef7e:	d006      	beq.n	ef8e <dict_getiter+0x30>
    ef80:	4b0d      	ldr	r3, [pc, #52]	; (efb8 <dict_getiter+0x5a>)
    ef82:	4a0e      	ldr	r2, [pc, #56]	; (efbc <dict_getiter+0x5e>)
    ef84:	f44f 7101 	mov.w	r1, #516	; 0x204
    ef88:	480d      	ldr	r0, [pc, #52]	; (efc0 <dict_getiter+0x62>)
    ef8a:	f00c fa79 	bl	1b480 <__assert_func>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    ef8e:	683b      	ldr	r3, [r7, #0]
    ef90:	60fb      	str	r3, [r7, #12]
    o->base.type = &dict_view_it_type;
    ef92:	68fb      	ldr	r3, [r7, #12]
    ef94:	4a0b      	ldr	r2, [pc, #44]	; (efc4 <dict_getiter+0x66>)
    ef96:	601a      	str	r2, [r3, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    ef98:	68fb      	ldr	r3, [r7, #12]
    ef9a:	2201      	movs	r2, #1
    ef9c:	605a      	str	r2, [r3, #4]
    o->dict = self_in;
    ef9e:	68fb      	ldr	r3, [r7, #12]
    efa0:	687a      	ldr	r2, [r7, #4]
    efa2:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    efa4:	68fb      	ldr	r3, [r7, #12]
    efa6:	2200      	movs	r2, #0
    efa8:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    efaa:	68fb      	ldr	r3, [r7, #12]
}
    efac:	4618      	mov	r0, r3
    efae:	3710      	adds	r7, #16
    efb0:	46bd      	mov	sp, r7
    efb2:	bd80      	pop	{r7, pc}
    efb4:	0000e4b5 	.word	0x0000e4b5
    efb8:	00021968 	.word	0x00021968
    efbc:	00021e08 	.word	0x00021e08
    efc0:	000219c8 	.word	0x000219c8
    efc4:	00021b1c 	.word	0x00021b1c

0000efc8 <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    efc8:	b580      	push	{r7, lr}
    efca:	b082      	sub	sp, #8
    efcc:	af00      	add	r7, sp, #0
    efce:	6078      	str	r0, [r7, #4]
    efd0:	6039      	str	r1, [r7, #0]
    dict->base.type = &mp_type_dict;
    efd2:	687b      	ldr	r3, [r7, #4]
    efd4:	4a05      	ldr	r2, [pc, #20]	; (efec <mp_obj_dict_init+0x24>)
    efd6:	601a      	str	r2, [r3, #0]
    mp_map_init(&dict->map, n_args);
    efd8:	687b      	ldr	r3, [r7, #4]
    efda:	3304      	adds	r3, #4
    efdc:	6839      	ldr	r1, [r7, #0]
    efde:	4618      	mov	r0, r3
    efe0:	f7fe f8c4 	bl	d16c <mp_map_init>
}
    efe4:	bf00      	nop
    efe6:	3708      	adds	r7, #8
    efe8:	46bd      	mov	sp, r7
    efea:	bd80      	pop	{r7, pc}
    efec:	00021d40 	.word	0x00021d40

0000eff0 <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    eff0:	b580      	push	{r7, lr}
    eff2:	b084      	sub	sp, #16
    eff4:	af00      	add	r7, sp, #0
    eff6:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    eff8:	2010      	movs	r0, #16
    effa:	f7f1 f98f 	bl	31c <m_malloc>
    effe:	60f8      	str	r0, [r7, #12]
    mp_obj_dict_init(o, n_args);
    f000:	6879      	ldr	r1, [r7, #4]
    f002:	68f8      	ldr	r0, [r7, #12]
    f004:	f7ff ffe0 	bl	efc8 <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
    f008:	68fb      	ldr	r3, [r7, #12]
}
    f00a:	4618      	mov	r0, r3
    f00c:	3710      	adds	r7, #16
    f00e:	46bd      	mov	sp, r7
    f010:	bd80      	pop	{r7, pc}

0000f012 <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    f012:	b480      	push	{r7}
    f014:	b085      	sub	sp, #20
    f016:	af00      	add	r7, sp, #0
    f018:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f01a:	687b      	ldr	r3, [r7, #4]
    f01c:	60fb      	str	r3, [r7, #12]
    return self->map.used;
    f01e:	68fb      	ldr	r3, [r7, #12]
    f020:	685b      	ldr	r3, [r3, #4]
    f022:	f3c3 03dc 	ubfx	r3, r3, #3, #29
}
    f026:	4618      	mov	r0, r3
    f028:	3714      	adds	r7, #20
    f02a:	46bd      	mov	sp, r7
    f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
    f030:	4770      	bx	lr

0000f032 <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    f032:	b580      	push	{r7, lr}
    f034:	b086      	sub	sp, #24
    f036:	af00      	add	r7, sp, #0
    f038:	60f8      	str	r0, [r7, #12]
    f03a:	60b9      	str	r1, [r7, #8]
    f03c:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f03e:	68f8      	ldr	r0, [r7, #12]
    f040:	f7ff f95a 	bl	e2f8 <MP_OBJ_IS_OBJ>
    f044:	4603      	mov	r3, r0
    f046:	2b00      	cmp	r3, #0
    f048:	d005      	beq.n	f056 <mp_obj_dict_store+0x24>
    f04a:	68fb      	ldr	r3, [r7, #12]
    f04c:	681b      	ldr	r3, [r3, #0]
    f04e:	68db      	ldr	r3, [r3, #12]
    f050:	4a0e      	ldr	r2, [pc, #56]	; (f08c <mp_obj_dict_store+0x5a>)
    f052:	4293      	cmp	r3, r2
    f054:	d006      	beq.n	f064 <mp_obj_dict_store+0x32>
    f056:	4b0e      	ldr	r3, [pc, #56]	; (f090 <mp_obj_dict_store+0x5e>)
    f058:	4a0e      	ldr	r2, [pc, #56]	; (f094 <mp_obj_dict_store+0x62>)
    f05a:	f240 214f 	movw	r1, #591	; 0x24f
    f05e:	480e      	ldr	r0, [pc, #56]	; (f098 <mp_obj_dict_store+0x66>)
    f060:	f00c fa0e 	bl	1b480 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f064:	68fb      	ldr	r3, [r7, #12]
    f066:	617b      	str	r3, [r7, #20]
    mp_ensure_not_fixed(self);
    f068:	6978      	ldr	r0, [r7, #20]
    f06a:	f7ff fb4b 	bl	e704 <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f06e:	697b      	ldr	r3, [r7, #20]
    f070:	3304      	adds	r3, #4
    f072:	2201      	movs	r2, #1
    f074:	68b9      	ldr	r1, [r7, #8]
    f076:	4618      	mov	r0, r3
    f078:	f7fe f970 	bl	d35c <mp_map_lookup>
    f07c:	4602      	mov	r2, r0
    f07e:	687b      	ldr	r3, [r7, #4]
    f080:	6053      	str	r3, [r2, #4]
    return self_in;
    f082:	68fb      	ldr	r3, [r7, #12]
}
    f084:	4618      	mov	r0, r3
    f086:	3718      	adds	r7, #24
    f088:	46bd      	mov	sp, r7
    f08a:	bd80      	pop	{r7, pc}
    f08c:	0000e4b5 	.word	0x0000e4b5
    f090:	00021968 	.word	0x00021968
    f094:	00021e18 	.word	0x00021e18
    f098:	000219c8 	.word	0x000219c8

0000f09c <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    f09c:	b580      	push	{r7, lr}
    f09e:	b084      	sub	sp, #16
    f0a0:	af00      	add	r7, sp, #0
    f0a2:	6078      	str	r0, [r7, #4]
    f0a4:	6039      	str	r1, [r7, #0]
    mp_obj_t args[2] = {self_in, key};
    f0a6:	687b      	ldr	r3, [r7, #4]
    f0a8:	60bb      	str	r3, [r7, #8]
    f0aa:	683b      	ldr	r3, [r7, #0]
    f0ac:	60fb      	str	r3, [r7, #12]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    f0ae:	f107 0308 	add.w	r3, r7, #8
    f0b2:	2202      	movs	r2, #2
    f0b4:	4619      	mov	r1, r3
    f0b6:	2002      	movs	r0, #2
    f0b8:	f7ff fc0c 	bl	e8d4 <dict_get_helper>
    return self_in;
    f0bc:	687b      	ldr	r3, [r7, #4]
}
    f0be:	4618      	mov	r0, r3
    f0c0:	3710      	adds	r7, #16
    f0c2:	46bd      	mov	sp, r7
    f0c4:	bd80      	pop	{r7, pc}
    f0c6:	bf00      	nop

0000f0c8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    f0c8:	b480      	push	{r7}
    f0ca:	b083      	sub	sp, #12
    f0cc:	af00      	add	r7, sp, #0
    f0ce:	6078      	str	r0, [r7, #4]
    f0d0:	687b      	ldr	r3, [r7, #4]
    f0d2:	f003 0303 	and.w	r3, r3, #3
    f0d6:	2b00      	cmp	r3, #0
    f0d8:	bf0c      	ite	eq
    f0da:	2301      	moveq	r3, #1
    f0dc:	2300      	movne	r3, #0
    f0de:	b2db      	uxtb	r3, r3
    f0e0:	4618      	mov	r0, r3
    f0e2:	370c      	adds	r7, #12
    f0e4:	46bd      	mov	sp, r7
    f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    f0ea:	4770      	bx	lr

0000f0ec <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    f0ec:	b580      	push	{r7, lr}
    f0ee:	b084      	sub	sp, #16
    f0f0:	af00      	add	r7, sp, #0
    f0f2:	60f8      	str	r0, [r7, #12]
    f0f4:	60b9      	str	r1, [r7, #8]
    f0f6:	607a      	str	r2, [r7, #4]
    f0f8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    f0fa:	687b      	ldr	r3, [r7, #4]
    f0fc:	045a      	lsls	r2, r3, #17
    f0fe:	683b      	ldr	r3, [r7, #0]
    f100:	005b      	lsls	r3, r3, #1
    f102:	431a      	orrs	r2, r3
    f104:	7e3b      	ldrb	r3, [r7, #24]
    f106:	2b00      	cmp	r3, #0
    f108:	d001      	beq.n	f10e <mp_arg_check_num+0x22>
    f10a:	2301      	movs	r3, #1
    f10c:	e000      	b.n	f110 <mp_arg_check_num+0x24>
    f10e:	2300      	movs	r3, #0
    f110:	4313      	orrs	r3, r2
    f112:	461a      	mov	r2, r3
    f114:	68b9      	ldr	r1, [r7, #8]
    f116:	68f8      	ldr	r0, [r7, #12]
    f118:	f7fd fecc 	bl	ceb4 <mp_arg_check_num_sig>
}
    f11c:	bf00      	nop
    f11e:	3710      	adds	r7, #16
    f120:	46bd      	mov	sp, r7
    f122:	bd80      	pop	{r7, pc}

0000f124 <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    f124:	b580      	push	{r7, lr}
    f126:	b088      	sub	sp, #32
    f128:	af00      	add	r7, sp, #0
    f12a:	60f8      	str	r0, [r7, #12]
    f12c:	60b9      	str	r1, [r7, #8]
    f12e:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    f130:	68bb      	ldr	r3, [r7, #8]
    f132:	61fb      	str	r3, [r7, #28]
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    f134:	687b      	ldr	r3, [r7, #4]
    f136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f13a:	61bb      	str	r3, [r7, #24]
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    f13c:	687b      	ldr	r3, [r7, #4]
    f13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f142:	2b00      	cmp	r3, #0
    f144:	bf14      	ite	ne
    f146:	2301      	movne	r3, #1
    f148:	2300      	moveq	r3, #0
    f14a:	75fb      	strb	r3, [r7, #23]
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    f14c:	7dfb      	ldrb	r3, [r7, #23]
    f14e:	f083 0301 	eor.w	r3, r3, #1
    f152:	b2db      	uxtb	r3, r3
    f154:	2b00      	cmp	r3, #0
    f156:	d010      	beq.n	f17a <mp_obj_exception_print+0x56>
    f158:	69bb      	ldr	r3, [r7, #24]
    f15a:	2b01      	cmp	r3, #1
    f15c:	d002      	beq.n	f164 <mp_obj_exception_print+0x40>
    f15e:	69bb      	ldr	r3, [r7, #24]
    f160:	2b02      	cmp	r3, #2
    f162:	d10a      	bne.n	f17a <mp_obj_exception_print+0x56>
        mp_print_str(print, qstr_str(o->base.type->name));
    f164:	69fb      	ldr	r3, [r7, #28]
    f166:	681b      	ldr	r3, [r3, #0]
    f168:	88db      	ldrh	r3, [r3, #6]
    f16a:	4618      	mov	r0, r3
    f16c:	f7f2 f86c 	bl	1248 <qstr_str>
    f170:	4603      	mov	r3, r0
    f172:	4619      	mov	r1, r3
    f174:	68f8      	ldr	r0, [r7, #12]
    f176:	f7f2 fba5 	bl	18c4 <mp_print_str>
    }

    if (k == PRINT_EXC) {
    f17a:	69bb      	ldr	r3, [r7, #24]
    f17c:	2b02      	cmp	r3, #2
    f17e:	d103      	bne.n	f188 <mp_obj_exception_print+0x64>
        mp_print_str(print, ": ");
    f180:	4917      	ldr	r1, [pc, #92]	; (f1e0 <mp_obj_exception_print+0xbc>)
    f182:	68f8      	ldr	r0, [r7, #12]
    f184:	f7f2 fb9e 	bl	18c4 <mp_print_str>
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    f188:	69bb      	ldr	r3, [r7, #24]
    f18a:	2b00      	cmp	r3, #0
    f18c:	d002      	beq.n	f194 <mp_obj_exception_print+0x70>
    f18e:	69bb      	ldr	r3, [r7, #24]
    f190:	2b02      	cmp	r3, #2
    f192:	d11b      	bne.n	f1cc <mp_obj_exception_print+0xa8>
        if (o->args == NULL || o->args->len == 0) {
    f194:	69fb      	ldr	r3, [r7, #28]
    f196:	68db      	ldr	r3, [r3, #12]
    f198:	2b00      	cmp	r3, #0
    f19a:	d004      	beq.n	f1a6 <mp_obj_exception_print+0x82>
    f19c:	69fb      	ldr	r3, [r7, #28]
    f19e:	68db      	ldr	r3, [r3, #12]
    f1a0:	685b      	ldr	r3, [r3, #4]
    f1a2:	2b00      	cmp	r3, #0
    f1a4:	d104      	bne.n	f1b0 <mp_obj_exception_print+0x8c>
            mp_print_str(print, "");
    f1a6:	490f      	ldr	r1, [pc, #60]	; (f1e4 <mp_obj_exception_print+0xc0>)
    f1a8:	68f8      	ldr	r0, [r7, #12]
    f1aa:	f7f2 fb8b 	bl	18c4 <mp_print_str>
            return;
    f1ae:	e014      	b.n	f1da <mp_obj_exception_print+0xb6>
        } else if (o->args->len == 1) {
    f1b0:	69fb      	ldr	r3, [r7, #28]
    f1b2:	68db      	ldr	r3, [r3, #12]
    f1b4:	685b      	ldr	r3, [r3, #4]
    f1b6:	2b01      	cmp	r3, #1
    f1b8:	d108      	bne.n	f1cc <mp_obj_exception_print+0xa8>
                    mp_printf(print, "[Errno " INT_FMT "] %q", MP_OBJ_SMALL_INT_VALUE(o->args->items[0]), qst);
                    return;
                }
            }
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    f1ba:	69fb      	ldr	r3, [r7, #28]
    f1bc:	68db      	ldr	r3, [r3, #12]
    f1be:	689b      	ldr	r3, [r3, #8]
    f1c0:	2200      	movs	r2, #0
    f1c2:	4619      	mov	r1, r3
    f1c4:	68f8      	ldr	r0, [r7, #12]
    f1c6:	f7fe faa4 	bl	d712 <mp_obj_print_helper>
            return;
    f1ca:	e006      	b.n	f1da <mp_obj_exception_print+0xb6>
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    f1cc:	69fb      	ldr	r3, [r7, #28]
    f1ce:	68db      	ldr	r3, [r3, #12]
    f1d0:	687a      	ldr	r2, [r7, #4]
    f1d2:	4619      	mov	r1, r3
    f1d4:	68f8      	ldr	r0, [r7, #12]
    f1d6:	f006 fa97 	bl	15708 <mp_obj_tuple_print>
}
    f1da:	3720      	adds	r7, #32
    f1dc:	46bd      	mov	sp, r7
    f1de:	bd80      	pop	{r7, pc}
    f1e0:	00021e3c 	.word	0x00021e3c
    f1e4:	00021e40 	.word	0x00021e40

0000f1e8 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f1e8:	b580      	push	{r7, lr}
    f1ea:	b088      	sub	sp, #32
    f1ec:	af02      	add	r7, sp, #8
    f1ee:	60f8      	str	r0, [r7, #12]
    f1f0:	60b9      	str	r1, [r7, #8]
    f1f2:	607a      	str	r2, [r7, #4]
    f1f4:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    f1f6:	2300      	movs	r3, #0
    f1f8:	9300      	str	r3, [sp, #0]
    f1fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f1fe:	2200      	movs	r2, #0
    f200:	6879      	ldr	r1, [r7, #4]
    f202:	68b8      	ldr	r0, [r7, #8]
    f204:	f7ff ff72 	bl	f0ec <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    f208:	2010      	movs	r0, #16
    f20a:	f7f1 f89e 	bl	34a <m_malloc_maybe>
    f20e:	6178      	str	r0, [r7, #20]
    if (o_exc == NULL) {
    f210:	697b      	ldr	r3, [r7, #20]
    f212:	2b00      	cmp	r3, #0
    f214:	d101      	bne.n	f21a <mp_obj_exception_make_new+0x32>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    f216:	4b19      	ldr	r3, [pc, #100]	; (f27c <mp_obj_exception_make_new+0x94>)
    f218:	617b      	str	r3, [r7, #20]
    }

    // Populate the exception object
    o_exc->base.type = type;
    f21a:	697b      	ldr	r3, [r7, #20]
    f21c:	68fa      	ldr	r2, [r7, #12]
    f21e:	601a      	str	r2, [r3, #0]
    o_exc->traceback_data = NULL;
    f220:	697b      	ldr	r3, [r7, #20]
    f222:	2200      	movs	r2, #0
    f224:	609a      	str	r2, [r3, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    f226:	68bb      	ldr	r3, [r7, #8]
    f228:	2b00      	cmp	r3, #0
    f22a:	d102      	bne.n	f232 <mp_obj_exception_make_new+0x4a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f22c:	4b14      	ldr	r3, [pc, #80]	; (f280 <mp_obj_exception_make_new+0x98>)
    f22e:	613b      	str	r3, [r7, #16]
    f230:	e01b      	b.n	f26a <mp_obj_exception_make_new+0x82>
    } else {
        // Try to allocate memory for the tuple containing the args
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    f232:	68bb      	ldr	r3, [r7, #8]
    f234:	3302      	adds	r3, #2
    f236:	009b      	lsls	r3, r3, #2
    f238:	4618      	mov	r0, r3
    f23a:	f7f1 f886 	bl	34a <m_malloc_maybe>
    f23e:	6138      	str	r0, [r7, #16]
            o_tuple = (mp_obj_tuple_t*)
                ((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf) + EMG_TRACEBACK_ALLOC * sizeof(size_t));
        }
        #endif

        if (o_tuple == NULL) {
    f240:	693b      	ldr	r3, [r7, #16]
    f242:	2b00      	cmp	r3, #0
    f244:	d102      	bne.n	f24c <mp_obj_exception_make_new+0x64>
            // No memory for a tuple, fallback to an empty tuple
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f246:	4b0e      	ldr	r3, [pc, #56]	; (f280 <mp_obj_exception_make_new+0x98>)
    f248:	613b      	str	r3, [r7, #16]
    f24a:	e00e      	b.n	f26a <mp_obj_exception_make_new+0x82>
        } else {
            // Have memory for a tuple so populate it
            o_tuple->base.type = &mp_type_tuple;
    f24c:	693b      	ldr	r3, [r7, #16]
    f24e:	4a0d      	ldr	r2, [pc, #52]	; (f284 <mp_obj_exception_make_new+0x9c>)
    f250:	601a      	str	r2, [r3, #0]
            o_tuple->len = n_args;
    f252:	693b      	ldr	r3, [r7, #16]
    f254:	68ba      	ldr	r2, [r7, #8]
    f256:	605a      	str	r2, [r3, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    f258:	693b      	ldr	r3, [r7, #16]
    f25a:	f103 0008 	add.w	r0, r3, #8
    f25e:	68bb      	ldr	r3, [r7, #8]
    f260:	009b      	lsls	r3, r3, #2
    f262:	461a      	mov	r2, r3
    f264:	6839      	ldr	r1, [r7, #0]
    f266:	f00d fc37 	bl	1cad8 <memcpy>
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    f26a:	697b      	ldr	r3, [r7, #20]
    f26c:	693a      	ldr	r2, [r7, #16]
    f26e:	60da      	str	r2, [r3, #12]

    return MP_OBJ_FROM_PTR(o_exc);
    f270:	697b      	ldr	r3, [r7, #20]
}
    f272:	4618      	mov	r0, r3
    f274:	3718      	adds	r7, #24
    f276:	46bd      	mov	sp, r7
    f278:	bd80      	pop	{r7, pc}
    f27a:	bf00      	nop
    f27c:	20001304 	.word	0x20001304
    f280:	00023a5c 	.word	0x00023a5c
    f284:	00023a20 	.word	0x00023a20

0000f288 <mp_obj_exception_get_value>:

// Get exception "value" - that is, first argument, or None
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in) {
    f288:	b480      	push	{r7}
    f28a:	b085      	sub	sp, #20
    f28c:	af00      	add	r7, sp, #0
    f28e:	6078      	str	r0, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f290:	687b      	ldr	r3, [r7, #4]
    f292:	60fb      	str	r3, [r7, #12]
    if (self->args->len == 0) {
    f294:	68fb      	ldr	r3, [r7, #12]
    f296:	68db      	ldr	r3, [r3, #12]
    f298:	685b      	ldr	r3, [r3, #4]
    f29a:	2b00      	cmp	r3, #0
    f29c:	d101      	bne.n	f2a2 <mp_obj_exception_get_value+0x1a>
        return mp_const_none;
    f29e:	4b05      	ldr	r3, [pc, #20]	; (f2b4 <mp_obj_exception_get_value+0x2c>)
    f2a0:	e002      	b.n	f2a8 <mp_obj_exception_get_value+0x20>
    } else {
        return self->args->items[0];
    f2a2:	68fb      	ldr	r3, [r7, #12]
    f2a4:	68db      	ldr	r3, [r3, #12]
    f2a6:	689b      	ldr	r3, [r3, #8]
    }
}
    f2a8:	4618      	mov	r0, r3
    f2aa:	3714      	adds	r7, #20
    f2ac:	46bd      	mov	sp, r7
    f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    f2b2:	4770      	bx	lr
    f2b4:	00023108 	.word	0x00023108

0000f2b8 <mp_obj_exception_attr>:

void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    f2b8:	b580      	push	{r7, lr}
    f2ba:	b086      	sub	sp, #24
    f2bc:	af00      	add	r7, sp, #0
    f2be:	60f8      	str	r0, [r7, #12]
    f2c0:	60b9      	str	r1, [r7, #8]
    f2c2:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f2c4:	68fb      	ldr	r3, [r7, #12]
    f2c6:	617b      	str	r3, [r7, #20]
    if (dest[0] != MP_OBJ_NULL) {
    f2c8:	687b      	ldr	r3, [r7, #4]
    f2ca:	681b      	ldr	r3, [r3, #0]
    f2cc:	2b00      	cmp	r3, #0
    f2ce:	d00f      	beq.n	f2f0 <mp_obj_exception_attr+0x38>
        // store/delete attribute
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    f2d0:	68bb      	ldr	r3, [r7, #8]
    f2d2:	2b26      	cmp	r3, #38	; 0x26
    f2d4:	d125      	bne.n	f322 <mp_obj_exception_attr+0x6a>
    f2d6:	687b      	ldr	r3, [r7, #4]
    f2d8:	3304      	adds	r3, #4
    f2da:	681b      	ldr	r3, [r3, #0]
    f2dc:	4a13      	ldr	r2, [pc, #76]	; (f32c <mp_obj_exception_attr+0x74>)
    f2de:	4293      	cmp	r3, r2
    f2e0:	d11f      	bne.n	f322 <mp_obj_exception_attr+0x6a>
            // optimization of pre-allocating exception instance and raising
            // it repeatedly - this avoids memory allocation during raise.
            // However, uPy will keep adding traceback entries to such
            // exception instance, so before throwing it, traceback should
            // be cleared like above.
            self->traceback_len = 0;
    f2e2:	697b      	ldr	r3, [r7, #20]
    f2e4:	2200      	movs	r2, #0
    f2e6:	80da      	strh	r2, [r3, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    f2e8:	687b      	ldr	r3, [r7, #4]
    f2ea:	2200      	movs	r2, #0
    f2ec:	601a      	str	r2, [r3, #0]
        }
        return;
    f2ee:	e018      	b.n	f322 <mp_obj_exception_attr+0x6a>
    }
    if (attr == MP_QSTR_args) {
    f2f0:	68bb      	ldr	r3, [r7, #8]
    f2f2:	2bec      	cmp	r3, #236	; 0xec
    f2f4:	d104      	bne.n	f300 <mp_obj_exception_attr+0x48>
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    f2f6:	697b      	ldr	r3, [r7, #20]
    f2f8:	68da      	ldr	r2, [r3, #12]
    f2fa:	687b      	ldr	r3, [r7, #4]
    f2fc:	601a      	str	r2, [r3, #0]
    f2fe:	e011      	b.n	f324 <mp_obj_exception_attr+0x6c>
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    f300:	697b      	ldr	r3, [r7, #20]
    f302:	681b      	ldr	r3, [r3, #0]
    f304:	4a0a      	ldr	r2, [pc, #40]	; (f330 <mp_obj_exception_attr+0x78>)
    f306:	4293      	cmp	r3, r2
    f308:	d10c      	bne.n	f324 <mp_obj_exception_attr+0x6c>
    f30a:	68bb      	ldr	r3, [r7, #8]
    f30c:	f240 1271 	movw	r2, #369	; 0x171
    f310:	4293      	cmp	r3, r2
    f312:	d107      	bne.n	f324 <mp_obj_exception_attr+0x6c>
        dest[0] = mp_obj_exception_get_value(self_in);
    f314:	68f8      	ldr	r0, [r7, #12]
    f316:	f7ff ffb7 	bl	f288 <mp_obj_exception_get_value>
    f31a:	4602      	mov	r2, r0
    f31c:	687b      	ldr	r3, [r7, #4]
    f31e:	601a      	str	r2, [r3, #0]
    f320:	e000      	b.n	f324 <mp_obj_exception_attr+0x6c>
        return;
    f322:	bf00      	nop
    }
}
    f324:	3718      	adds	r7, #24
    f326:	46bd      	mov	sp, r7
    f328:	bd80      	pop	{r7, pc}
    f32a:	bf00      	nop
    f32c:	00023108 	.word	0x00023108
    f330:	00021f70 	.word	0x00021f70

0000f334 <mp_obj_new_exception>:
    MP_DEFINE_EXCEPTION(UnicodeWarning, Warning)
    MP_DEFINE_EXCEPTION(BytesWarning, Warning)
    MP_DEFINE_EXCEPTION(ResourceWarning, Warning)
    */

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    f334:	b580      	push	{r7, lr}
    f336:	b082      	sub	sp, #8
    f338:	af00      	add	r7, sp, #0
    f33a:	6078      	str	r0, [r7, #4]
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    f33c:	2200      	movs	r2, #0
    f33e:	2100      	movs	r1, #0
    f340:	6878      	ldr	r0, [r7, #4]
    f342:	f000 f815 	bl	f370 <mp_obj_new_exception_args>
    f346:	4603      	mov	r3, r0
}
    f348:	4618      	mov	r0, r3
    f34a:	3708      	adds	r7, #8
    f34c:	46bd      	mov	sp, r7
    f34e:	bd80      	pop	{r7, pc}

0000f350 <mp_obj_new_exception_arg1>:

// "Optimized" version for common(?) case of having 1 exception arg
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    f350:	b580      	push	{r7, lr}
    f352:	b082      	sub	sp, #8
    f354:	af00      	add	r7, sp, #0
    f356:	6078      	str	r0, [r7, #4]
    f358:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    f35a:	463b      	mov	r3, r7
    f35c:	461a      	mov	r2, r3
    f35e:	2101      	movs	r1, #1
    f360:	6878      	ldr	r0, [r7, #4]
    f362:	f000 f805 	bl	f370 <mp_obj_new_exception_args>
    f366:	4603      	mov	r3, r0
}
    f368:	4618      	mov	r0, r3
    f36a:	3708      	adds	r7, #8
    f36c:	46bd      	mov	sp, r7
    f36e:	bd80      	pop	{r7, pc}

0000f370 <mp_obj_new_exception_args>:

mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    f370:	b590      	push	{r4, r7, lr}
    f372:	b085      	sub	sp, #20
    f374:	af00      	add	r7, sp, #0
    f376:	60f8      	str	r0, [r7, #12]
    f378:	60b9      	str	r1, [r7, #8]
    f37a:	607a      	str	r2, [r7, #4]
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f37c:	68fb      	ldr	r3, [r7, #12]
    f37e:	68db      	ldr	r3, [r3, #12]
    f380:	4a0a      	ldr	r2, [pc, #40]	; (f3ac <mp_obj_new_exception_args+0x3c>)
    f382:	4293      	cmp	r3, r2
    f384:	d006      	beq.n	f394 <mp_obj_new_exception_args+0x24>
    f386:	4b0a      	ldr	r3, [pc, #40]	; (f3b0 <mp_obj_new_exception_args+0x40>)
    f388:	4a0a      	ldr	r2, [pc, #40]	; (f3b4 <mp_obj_new_exception_args+0x44>)
    f38a:	f240 1137 	movw	r1, #311	; 0x137
    f38e:	480a      	ldr	r0, [pc, #40]	; (f3b8 <mp_obj_new_exception_args+0x48>)
    f390:	f00c f876 	bl	1b480 <__assert_func>
    return exc_type->make_new(exc_type, n_args, 0, args);
    f394:	68fb      	ldr	r3, [r7, #12]
    f396:	68dc      	ldr	r4, [r3, #12]
    f398:	687b      	ldr	r3, [r7, #4]
    f39a:	2200      	movs	r2, #0
    f39c:	68b9      	ldr	r1, [r7, #8]
    f39e:	68f8      	ldr	r0, [r7, #12]
    f3a0:	47a0      	blx	r4
    f3a2:	4603      	mov	r3, r0
}
    f3a4:	4618      	mov	r0, r3
    f3a6:	3714      	adds	r7, #20
    f3a8:	46bd      	mov	sp, r7
    f3aa:	bd90      	pop	{r4, r7, pc}
    f3ac:	0000f1e9 	.word	0x0000f1e9
    f3b0:	00022420 	.word	0x00022420
    f3b4:	0002249c 	.word	0x0002249c
    f3b8:	00022450 	.word	0x00022450

0000f3bc <mp_obj_new_exception_msg>:

mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    f3bc:	b580      	push	{r7, lr}
    f3be:	b082      	sub	sp, #8
    f3c0:	af00      	add	r7, sp, #0
    f3c2:	6078      	str	r0, [r7, #4]
    f3c4:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    f3c6:	6839      	ldr	r1, [r7, #0]
    f3c8:	6878      	ldr	r0, [r7, #4]
    f3ca:	f000 f857 	bl	f47c <mp_obj_new_exception_msg_varg>
    f3ce:	4603      	mov	r3, r0
}
    f3d0:	4618      	mov	r0, r3
    f3d2:	3708      	adds	r7, #8
    f3d4:	46bd      	mov	sp, r7
    f3d6:	bd80      	pop	{r7, pc}

0000f3d8 <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    f3d8:	b580      	push	{r7, lr}
    f3da:	b088      	sub	sp, #32
    f3dc:	af00      	add	r7, sp, #0
    f3de:	60f8      	str	r0, [r7, #12]
    f3e0:	60b9      	str	r1, [r7, #8]
    f3e2:	607a      	str	r2, [r7, #4]
    struct _exc_printer_t *pr = data;
    f3e4:	68fb      	ldr	r3, [r7, #12]
    f3e6:	61fb      	str	r3, [r7, #28]
    if (pr->len + len >= pr->alloc) {
    f3e8:	69fb      	ldr	r3, [r7, #28]
    f3ea:	689a      	ldr	r2, [r3, #8]
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	441a      	add	r2, r3
    f3f0:	69fb      	ldr	r3, [r7, #28]
    f3f2:	685b      	ldr	r3, [r3, #4]
    f3f4:	429a      	cmp	r2, r3
    f3f6:	d32d      	bcc.n	f454 <exc_add_strn+0x7c>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    f3f8:	69fb      	ldr	r3, [r7, #28]
    f3fa:	781b      	ldrb	r3, [r3, #0]
    f3fc:	2b00      	cmp	r3, #0
    f3fe:	d022      	beq.n	f446 <exc_add_strn+0x6e>
            size_t new_alloc = pr->alloc + len + 16;
    f400:	69fb      	ldr	r3, [r7, #28]
    f402:	685a      	ldr	r2, [r3, #4]
    f404:	687b      	ldr	r3, [r7, #4]
    f406:	4413      	add	r3, r2
    f408:	3310      	adds	r3, #16
    f40a:	61bb      	str	r3, [r7, #24]
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    f40c:	69fb      	ldr	r3, [r7, #28]
    f40e:	68db      	ldr	r3, [r3, #12]
    f410:	2201      	movs	r2, #1
    f412:	69b9      	ldr	r1, [r7, #24]
    f414:	4618      	mov	r0, r3
    f416:	f7f0 ffcc 	bl	3b2 <m_realloc_maybe>
    f41a:	6178      	str	r0, [r7, #20]
            if (new_buf == NULL) {
    f41c:	697b      	ldr	r3, [r7, #20]
    f41e:	2b00      	cmp	r3, #0
    f420:	d10a      	bne.n	f438 <exc_add_strn+0x60>
                pr->allow_realloc = false;
    f422:	69fb      	ldr	r3, [r7, #28]
    f424:	2200      	movs	r2, #0
    f426:	701a      	strb	r2, [r3, #0]
                len = pr->alloc - pr->len - 1;
    f428:	69fb      	ldr	r3, [r7, #28]
    f42a:	685a      	ldr	r2, [r3, #4]
    f42c:	69fb      	ldr	r3, [r7, #28]
    f42e:	689b      	ldr	r3, [r3, #8]
    f430:	1ad3      	subs	r3, r2, r3
    f432:	3b01      	subs	r3, #1
    f434:	607b      	str	r3, [r7, #4]
    f436:	e00d      	b.n	f454 <exc_add_strn+0x7c>
            } else {
                pr->alloc = new_alloc;
    f438:	69fb      	ldr	r3, [r7, #28]
    f43a:	69ba      	ldr	r2, [r7, #24]
    f43c:	605a      	str	r2, [r3, #4]
                pr->buf = new_buf;
    f43e:	69fb      	ldr	r3, [r7, #28]
    f440:	697a      	ldr	r2, [r7, #20]
    f442:	60da      	str	r2, [r3, #12]
    f444:	e006      	b.n	f454 <exc_add_strn+0x7c>
            }
        } else {
            len = pr->alloc - pr->len - 1;
    f446:	69fb      	ldr	r3, [r7, #28]
    f448:	685a      	ldr	r2, [r3, #4]
    f44a:	69fb      	ldr	r3, [r7, #28]
    f44c:	689b      	ldr	r3, [r3, #8]
    f44e:	1ad3      	subs	r3, r2, r3
    f450:	3b01      	subs	r3, #1
    f452:	607b      	str	r3, [r7, #4]
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    f454:	69fb      	ldr	r3, [r7, #28]
    f456:	68da      	ldr	r2, [r3, #12]
    f458:	69fb      	ldr	r3, [r7, #28]
    f45a:	689b      	ldr	r3, [r3, #8]
    f45c:	4413      	add	r3, r2
    f45e:	687a      	ldr	r2, [r7, #4]
    f460:	68b9      	ldr	r1, [r7, #8]
    f462:	4618      	mov	r0, r3
    f464:	f00d fb38 	bl	1cad8 <memcpy>
    pr->len += len;
    f468:	69fb      	ldr	r3, [r7, #28]
    f46a:	689a      	ldr	r2, [r3, #8]
    f46c:	687b      	ldr	r3, [r7, #4]
    f46e:	441a      	add	r2, r3
    f470:	69fb      	ldr	r3, [r7, #28]
    f472:	609a      	str	r2, [r3, #8]
}
    f474:	bf00      	nop
    f476:	3720      	adds	r7, #32
    f478:	46bd      	mov	sp, r7
    f47a:	bd80      	pop	{r7, pc}

0000f47c <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    f47c:	b40e      	push	{r1, r2, r3}
    f47e:	b580      	push	{r7, lr}
    f480:	b08f      	sub	sp, #60	; 0x3c
    f482:	af00      	add	r7, sp, #0
    f484:	6078      	str	r0, [r7, #4]
    assert(fmt != NULL);
    f486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f488:	2b00      	cmp	r3, #0
    f48a:	d106      	bne.n	f49a <mp_obj_new_exception_msg_varg+0x1e>
    f48c:	4b43      	ldr	r3, [pc, #268]	; (f59c <mp_obj_new_exception_msg_varg+0x120>)
    f48e:	4a44      	ldr	r2, [pc, #272]	; (f5a0 <mp_obj_new_exception_msg_varg+0x124>)
    f490:	f240 1161 	movw	r1, #353	; 0x161
    f494:	4843      	ldr	r0, [pc, #268]	; (f5a4 <mp_obj_new_exception_msg_varg+0x128>)
    f496:	f00b fff3 	bl	1b480 <__assert_func>

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f49a:	687b      	ldr	r3, [r7, #4]
    f49c:	68db      	ldr	r3, [r3, #12]
    f49e:	4a42      	ldr	r2, [pc, #264]	; (f5a8 <mp_obj_new_exception_msg_varg+0x12c>)
    f4a0:	4293      	cmp	r3, r2
    f4a2:	d006      	beq.n	f4b2 <mp_obj_new_exception_msg_varg+0x36>
    f4a4:	4b41      	ldr	r3, [pc, #260]	; (f5ac <mp_obj_new_exception_msg_varg+0x130>)
    f4a6:	4a3e      	ldr	r2, [pc, #248]	; (f5a0 <mp_obj_new_exception_msg_varg+0x124>)
    f4a8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f4ac:	483d      	ldr	r0, [pc, #244]	; (f5a4 <mp_obj_new_exception_msg_varg+0x128>)
    f4ae:	f00b ffe7 	bl	1b480 <__assert_func>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    f4b2:	2010      	movs	r0, #16
    f4b4:	f7f0 ff49 	bl	34a <m_malloc_maybe>
    f4b8:	6378      	str	r0, [r7, #52]	; 0x34
    size_t o_str_alloc = strlen(fmt) + 1;
    f4ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f4bc:	f00d fc42 	bl	1cd44 <strlen>
    f4c0:	4603      	mov	r3, r0
    f4c2:	3301      	adds	r3, #1
    f4c4:	633b      	str	r3, [r7, #48]	; 0x30
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    f4c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f4c8:	f7f0 ff3f 	bl	34a <m_malloc_maybe>
    f4cc:	62f8      	str	r0, [r7, #44]	; 0x2c

    bool used_emg_buf = false;
    f4ce:	2300      	movs	r3, #0
    f4d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
            + mp_emergency_exception_buf_size - o_str_buf;
    }
    #endif

    if (o_str == NULL) {
    f4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d107      	bne.n	f4ea <mp_obj_new_exception_msg_varg+0x6e>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    f4da:	2300      	movs	r3, #0
    f4dc:	2200      	movs	r2, #0
    f4de:	2100      	movs	r1, #0
    f4e0:	6878      	ldr	r0, [r7, #4]
    f4e2:	f7ff fe81 	bl	f1e8 <mp_obj_exception_make_new>
    f4e6:	4603      	mov	r3, r0
    f4e8:	e050      	b.n	f58c <mp_obj_new_exception_msg_varg+0x110>
    }

    if (o_str_buf == NULL) {
    f4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f4ec:	2b00      	cmp	r3, #0
    f4ee:	d107      	bne.n	f500 <mp_obj_new_exception_msg_varg+0x84>
        // No memory for the string buffer: assume that the fmt string is in ROM
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f4f2:	1e5a      	subs	r2, r3, #1
    f4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4f6:	609a      	str	r2, [r3, #8]
        o_str->data = (const byte*)fmt;
    f4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f4fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f4fc:	60da      	str	r2, [r3, #12]
    f4fe:	e02d      	b.n	f55c <mp_obj_new_exception_msg_varg+0xe0>
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    f500:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    f504:	2b00      	cmp	r3, #0
    f506:	bf14      	ite	ne
    f508:	2301      	movne	r3, #1
    f50a:	2300      	moveq	r3, #0
    f50c:	b2db      	uxtb	r3, r3
    f50e:	f083 0301 	eor.w	r3, r3, #1
    f512:	b2db      	uxtb	r3, r3
    f514:	f003 0301 	and.w	r3, r3, #1
    f518:	b2db      	uxtb	r3, r3
    f51a:	753b      	strb	r3, [r7, #20]
    f51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f51e:	61bb      	str	r3, [r7, #24]
    f520:	2300      	movs	r3, #0
    f522:	61fb      	str	r3, [r7, #28]
    f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f526:	623b      	str	r3, [r7, #32]
        mp_print_t print = {&exc_pr, exc_add_strn};
    f528:	f107 0314 	add.w	r3, r7, #20
    f52c:	60fb      	str	r3, [r7, #12]
    f52e:	4b20      	ldr	r3, [pc, #128]	; (f5b0 <mp_obj_new_exception_msg_varg+0x134>)
    f530:	613b      	str	r3, [r7, #16]
        va_list ap;
        va_start(ap, fmt);
    f532:	f107 0348 	add.w	r3, r7, #72	; 0x48
    f536:	60bb      	str	r3, [r7, #8]
        mp_vprintf(&print, fmt, ap);
    f538:	f107 030c 	add.w	r3, r7, #12
    f53c:	68ba      	ldr	r2, [r7, #8]
    f53e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    f540:	4618      	mov	r0, r3
    f542:	f7f2 fce7 	bl	1f14 <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    f546:	6a3a      	ldr	r2, [r7, #32]
    f548:	69fb      	ldr	r3, [r7, #28]
    f54a:	4413      	add	r3, r2
    f54c:	2200      	movs	r2, #0
    f54e:	701a      	strb	r2, [r3, #0]
        o_str->len = exc_pr.len;
    f550:	69fa      	ldr	r2, [r7, #28]
    f552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f554:	609a      	str	r2, [r3, #8]
        o_str->data = exc_pr.buf;
    f556:	6a3a      	ldr	r2, [r7, #32]
    f558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f55a:	60da      	str	r2, [r3, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    f55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f55e:	4a15      	ldr	r2, [pc, #84]	; (f5b4 <mp_obj_new_exception_msg_varg+0x138>)
    f560:	601a      	str	r2, [r3, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    f562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f564:	68da      	ldr	r2, [r3, #12]
    f566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f568:	689b      	ldr	r3, [r3, #8]
    f56a:	4619      	mov	r1, r3
    f56c:	4610      	mov	r0, r2
    f56e:	f7f1 fc7f 	bl	e70 <qstr_compute_hash>
    f572:	4602      	mov	r2, r0
    f574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f576:	605a      	str	r2, [r3, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    f578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f57a:	627b      	str	r3, [r7, #36]	; 0x24
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    f57c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f580:	2200      	movs	r2, #0
    f582:	2101      	movs	r1, #1
    f584:	6878      	ldr	r0, [r7, #4]
    f586:	f7ff fe2f 	bl	f1e8 <mp_obj_exception_make_new>
    f58a:	4603      	mov	r3, r0
}
    f58c:	4618      	mov	r0, r3
    f58e:	373c      	adds	r7, #60	; 0x3c
    f590:	46bd      	mov	sp, r7
    f592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f596:	b003      	add	sp, #12
    f598:	4770      	bx	lr
    f59a:	bf00      	nop
    f59c:	00022468 	.word	0x00022468
    f5a0:	000224b8 	.word	0x000224b8
    f5a4:	00022450 	.word	0x00022450
    f5a8:	0000f1e9 	.word	0x0000f1e9
    f5ac:	00022420 	.word	0x00022420
    f5b0:	0000f3d9 	.word	0x0000f3d9
    f5b4:	0002379c 	.word	0x0002379c

0000f5b8 <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    f5b8:	b580      	push	{r7, lr}
    f5ba:	b084      	sub	sp, #16
    f5bc:	af00      	add	r7, sp, #0
    f5be:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    f5c0:	6878      	ldr	r0, [r7, #4]
    f5c2:	f7ff fd81 	bl	f0c8 <MP_OBJ_IS_OBJ>
    f5c6:	4603      	mov	r3, r0
    f5c8:	2b00      	cmp	r3, #0
    f5ca:	d00d      	beq.n	f5e8 <mp_obj_is_exception_type+0x30>
    f5cc:	687b      	ldr	r3, [r7, #4]
    f5ce:	681b      	ldr	r3, [r3, #0]
    f5d0:	4a0a      	ldr	r2, [pc, #40]	; (f5fc <mp_obj_is_exception_type+0x44>)
    f5d2:	4293      	cmp	r3, r2
    f5d4:	d108      	bne.n	f5e8 <mp_obj_is_exception_type+0x30>
        // optimisation when self_in is a builtin exception
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
    f5d6:	687b      	ldr	r3, [r7, #4]
    f5d8:	60fb      	str	r3, [r7, #12]
        if (self->make_new == mp_obj_exception_make_new) {
    f5da:	68fb      	ldr	r3, [r7, #12]
    f5dc:	68db      	ldr	r3, [r3, #12]
    f5de:	4a08      	ldr	r2, [pc, #32]	; (f600 <mp_obj_is_exception_type+0x48>)
    f5e0:	4293      	cmp	r3, r2
    f5e2:	d101      	bne.n	f5e8 <mp_obj_is_exception_type+0x30>
            return true;
    f5e4:	2301      	movs	r3, #1
    f5e6:	e004      	b.n	f5f2 <mp_obj_is_exception_type+0x3a>
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    f5e8:	4906      	ldr	r1, [pc, #24]	; (f604 <mp_obj_is_exception_type+0x4c>)
    f5ea:	6878      	ldr	r0, [r7, #4]
    f5ec:	f007 fdc2 	bl	17174 <mp_obj_is_subclass_fast>
    f5f0:	4603      	mov	r3, r0
}
    f5f2:	4618      	mov	r0, r3
    f5f4:	3710      	adds	r7, #16
    f5f6:	46bd      	mov	sp, r7
    f5f8:	bd80      	pop	{r7, pc}
    f5fa:	bf00      	nop
    f5fc:	00023d18 	.word	0x00023d18
    f600:	0000f1e9 	.word	0x0000f1e9
    f604:	00021e44 	.word	0x00021e44

0000f608 <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    f608:	b580      	push	{r7, lr}
    f60a:	b082      	sub	sp, #8
    f60c:	af00      	add	r7, sp, #0
    f60e:	6078      	str	r0, [r7, #4]
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    f610:	6878      	ldr	r0, [r7, #4]
    f612:	f7fe f84d 	bl	d6b0 <mp_obj_get_type>
    f616:	4603      	mov	r3, r0
    f618:	4618      	mov	r0, r3
    f61a:	f7ff ffcd 	bl	f5b8 <mp_obj_is_exception_type>
    f61e:	4603      	mov	r3, r0
}
    f620:	4618      	mov	r0, r3
    f622:	3708      	adds	r7, #8
    f624:	46bd      	mov	sp, r7
    f626:	bd80      	pop	{r7, pc}

0000f628 <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    f628:	b580      	push	{r7, lr}
    f62a:	b082      	sub	sp, #8
    f62c:	af00      	add	r7, sp, #0
    f62e:	6078      	str	r0, [r7, #4]
    f630:	6039      	str	r1, [r7, #0]
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    f632:	6878      	ldr	r0, [r7, #4]
    f634:	f7ff ffe8 	bl	f608 <mp_obj_is_exception_instance>
    f638:	4603      	mov	r3, r0
    f63a:	2b00      	cmp	r3, #0
    f63c:	d003      	beq.n	f646 <mp_obj_exception_match+0x1e>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    f63e:	6878      	ldr	r0, [r7, #4]
    f640:	f7fe f836 	bl	d6b0 <mp_obj_get_type>
    f644:	6078      	str	r0, [r7, #4]
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    f646:	6839      	ldr	r1, [r7, #0]
    f648:	6878      	ldr	r0, [r7, #4]
    f64a:	f007 fd93 	bl	17174 <mp_obj_is_subclass_fast>
    f64e:	4603      	mov	r3, r0
}
    f650:	4618      	mov	r0, r3
    f652:	3708      	adds	r7, #8
    f654:	46bd      	mov	sp, r7
    f656:	bd80      	pop	{r7, pc}

0000f658 <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    f658:	b580      	push	{r7, lr}
    f65a:	b084      	sub	sp, #16
    f65c:	af00      	add	r7, sp, #0
    f65e:	6078      	str	r0, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f660:	6878      	ldr	r0, [r7, #4]
    f662:	f7ff ffd1 	bl	f608 <mp_obj_is_exception_instance>
    f666:	4603      	mov	r3, r0
    f668:	2b00      	cmp	r3, #0
    f66a:	d106      	bne.n	f67a <mp_obj_exception_clear_traceback+0x22>
    f66c:	4b0d      	ldr	r3, [pc, #52]	; (f6a4 <mp_obj_exception_clear_traceback+0x4c>)
    f66e:	4a0e      	ldr	r2, [pc, #56]	; (f6a8 <mp_obj_exception_clear_traceback+0x50>)
    f670:	f240 11c3 	movw	r1, #451	; 0x1c3
    f674:	480d      	ldr	r0, [pc, #52]	; (f6ac <mp_obj_exception_clear_traceback+0x54>)
    f676:	f00b ff03 	bl	1b480 <__assert_func>
    f67a:	6878      	ldr	r0, [r7, #4]
    f67c:	f7fe f818 	bl	d6b0 <mp_obj_get_type>
    f680:	4603      	mov	r3, r0
    f682:	68db      	ldr	r3, [r3, #12]
    f684:	4a0a      	ldr	r2, [pc, #40]	; (f6b0 <mp_obj_exception_clear_traceback+0x58>)
    f686:	4293      	cmp	r3, r2
    f688:	d102      	bne.n	f690 <mp_obj_exception_clear_traceback+0x38>
    f68a:	687b      	ldr	r3, [r7, #4]
    f68c:	60fb      	str	r3, [r7, #12]
    f68e:	e002      	b.n	f696 <mp_obj_exception_clear_traceback+0x3e>
    f690:	687b      	ldr	r3, [r7, #4]
    f692:	691b      	ldr	r3, [r3, #16]
    f694:	60fb      	str	r3, [r7, #12]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    f696:	68fb      	ldr	r3, [r7, #12]
    f698:	2200      	movs	r2, #0
    f69a:	609a      	str	r2, [r3, #8]
}
    f69c:	bf00      	nop
    f69e:	3710      	adds	r7, #16
    f6a0:	46bd      	mov	sp, r7
    f6a2:	bd80      	pop	{r7, pc}
    f6a4:	00022474 	.word	0x00022474
    f6a8:	000224d8 	.word	0x000224d8
    f6ac:	00022450 	.word	0x00022450
    f6b0:	0000f1e9 	.word	0x0000f1e9

0000f6b4 <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    f6b4:	b580      	push	{r7, lr}
    f6b6:	b088      	sub	sp, #32
    f6b8:	af00      	add	r7, sp, #0
    f6ba:	60f8      	str	r0, [r7, #12]
    f6bc:	60b9      	str	r1, [r7, #8]
    f6be:	607a      	str	r2, [r7, #4]
    f6c0:	603b      	str	r3, [r7, #0]
    GET_NATIVE_EXCEPTION(self, self_in);
    f6c2:	68f8      	ldr	r0, [r7, #12]
    f6c4:	f7ff ffa0 	bl	f608 <mp_obj_is_exception_instance>
    f6c8:	4603      	mov	r3, r0
    f6ca:	2b00      	cmp	r3, #0
    f6cc:	d106      	bne.n	f6dc <mp_obj_exception_add_traceback+0x28>
    f6ce:	4b33      	ldr	r3, [pc, #204]	; (f79c <mp_obj_exception_add_traceback+0xe8>)
    f6d0:	4a33      	ldr	r2, [pc, #204]	; (f7a0 <mp_obj_exception_add_traceback+0xec>)
    f6d2:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    f6d6:	4833      	ldr	r0, [pc, #204]	; (f7a4 <mp_obj_exception_add_traceback+0xf0>)
    f6d8:	f00b fed2 	bl	1b480 <__assert_func>
    f6dc:	68f8      	ldr	r0, [r7, #12]
    f6de:	f7fd ffe7 	bl	d6b0 <mp_obj_get_type>
    f6e2:	4603      	mov	r3, r0
    f6e4:	68db      	ldr	r3, [r3, #12]
    f6e6:	4a30      	ldr	r2, [pc, #192]	; (f7a8 <mp_obj_exception_add_traceback+0xf4>)
    f6e8:	4293      	cmp	r3, r2
    f6ea:	d102      	bne.n	f6f2 <mp_obj_exception_add_traceback+0x3e>
    f6ec:	68fb      	ldr	r3, [r7, #12]
    f6ee:	61fb      	str	r3, [r7, #28]
    f6f0:	e002      	b.n	f6f8 <mp_obj_exception_add_traceback+0x44>
    f6f2:	68fb      	ldr	r3, [r7, #12]
    f6f4:	691b      	ldr	r3, [r3, #16]
    f6f6:	61fb      	str	r3, [r7, #28]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    f6f8:	69fb      	ldr	r3, [r7, #28]
    f6fa:	689b      	ldr	r3, [r3, #8]
    f6fc:	2b00      	cmp	r3, #0
    f6fe:	d110      	bne.n	f722 <mp_obj_exception_add_traceback+0x6e>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    f700:	200c      	movs	r0, #12
    f702:	f7f0 fe22 	bl	34a <m_malloc_maybe>
    f706:	4602      	mov	r2, r0
    f708:	69fb      	ldr	r3, [r7, #28]
    f70a:	609a      	str	r2, [r3, #8]
        if (self->traceback_data == NULL) {
    f70c:	69fb      	ldr	r3, [r7, #28]
    f70e:	689b      	ldr	r3, [r3, #8]
    f710:	2b00      	cmp	r3, #0
    f712:	d03d      	beq.n	f790 <mp_obj_exception_add_traceback+0xdc>
            // Can't allocate
            return;
            #endif
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    f714:	69fb      	ldr	r3, [r7, #28]
    f716:	2203      	movs	r2, #3
    f718:	809a      	strh	r2, [r3, #4]
        }
        self->traceback_len = 0;
    f71a:	69fb      	ldr	r3, [r7, #28]
    f71c:	2200      	movs	r2, #0
    f71e:	80da      	strh	r2, [r3, #6]
    f720:	e01d      	b.n	f75e <mp_obj_exception_add_traceback+0xaa>
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    f722:	69fb      	ldr	r3, [r7, #28]
    f724:	88db      	ldrh	r3, [r3, #6]
    f726:	3303      	adds	r3, #3
    f728:	69fa      	ldr	r2, [r7, #28]
    f72a:	8892      	ldrh	r2, [r2, #4]
    f72c:	4293      	cmp	r3, r2
    f72e:	dd16      	ble.n	f75e <mp_obj_exception_add_traceback+0xaa>
            // Can't resize the emergency buffer
            return;
        }
        #endif
        // be conservative with growing traceback data
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    f730:	69fb      	ldr	r3, [r7, #28]
    f732:	6898      	ldr	r0, [r3, #8]
    f734:	69fb      	ldr	r3, [r7, #28]
    f736:	889b      	ldrh	r3, [r3, #4]
    f738:	3303      	adds	r3, #3
    f73a:	009b      	lsls	r3, r3, #2
    f73c:	2201      	movs	r2, #1
    f73e:	4619      	mov	r1, r3
    f740:	f7f0 fe37 	bl	3b2 <m_realloc_maybe>
    f744:	61b8      	str	r0, [r7, #24]
            self->traceback_alloc + TRACEBACK_ENTRY_LEN, true);
        if (tb_data == NULL) {
    f746:	69bb      	ldr	r3, [r7, #24]
    f748:	2b00      	cmp	r3, #0
    f74a:	d023      	beq.n	f794 <mp_obj_exception_add_traceback+0xe0>
            return;
        }
        self->traceback_data = tb_data;
    f74c:	69fb      	ldr	r3, [r7, #28]
    f74e:	69ba      	ldr	r2, [r7, #24]
    f750:	609a      	str	r2, [r3, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    f752:	69fb      	ldr	r3, [r7, #28]
    f754:	889b      	ldrh	r3, [r3, #4]
    f756:	3303      	adds	r3, #3
    f758:	b29a      	uxth	r2, r3
    f75a:	69fb      	ldr	r3, [r7, #28]
    f75c:	809a      	strh	r2, [r3, #4]
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    f75e:	69fb      	ldr	r3, [r7, #28]
    f760:	689a      	ldr	r2, [r3, #8]
    f762:	69fb      	ldr	r3, [r7, #28]
    f764:	88db      	ldrh	r3, [r3, #6]
    f766:	009b      	lsls	r3, r3, #2
    f768:	4413      	add	r3, r2
    f76a:	617b      	str	r3, [r7, #20]
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    f76c:	69fb      	ldr	r3, [r7, #28]
    f76e:	88db      	ldrh	r3, [r3, #6]
    f770:	3303      	adds	r3, #3
    f772:	b29a      	uxth	r2, r3
    f774:	69fb      	ldr	r3, [r7, #28]
    f776:	80da      	strh	r2, [r3, #6]
    tb_data[0] = file;
    f778:	697b      	ldr	r3, [r7, #20]
    f77a:	68ba      	ldr	r2, [r7, #8]
    f77c:	601a      	str	r2, [r3, #0]
    tb_data[1] = line;
    f77e:	697b      	ldr	r3, [r7, #20]
    f780:	3304      	adds	r3, #4
    f782:	687a      	ldr	r2, [r7, #4]
    f784:	601a      	str	r2, [r3, #0]
    tb_data[2] = block;
    f786:	697b      	ldr	r3, [r7, #20]
    f788:	3308      	adds	r3, #8
    f78a:	683a      	ldr	r2, [r7, #0]
    f78c:	601a      	str	r2, [r3, #0]
    f78e:	e002      	b.n	f796 <mp_obj_exception_add_traceback+0xe2>
            return;
    f790:	bf00      	nop
    f792:	e000      	b.n	f796 <mp_obj_exception_add_traceback+0xe2>
            return;
    f794:	bf00      	nop
}
    f796:	3720      	adds	r7, #32
    f798:	46bd      	mov	sp, r7
    f79a:	bd80      	pop	{r7, pc}
    f79c:	00022474 	.word	0x00022474
    f7a0:	000224fc 	.word	0x000224fc
    f7a4:	00022450 	.word	0x00022450
    f7a8:	0000f1e9 	.word	0x0000f1e9

0000f7ac <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    f7ac:	b580      	push	{r7, lr}
    f7ae:	b086      	sub	sp, #24
    f7b0:	af00      	add	r7, sp, #0
    f7b2:	60f8      	str	r0, [r7, #12]
    f7b4:	60b9      	str	r1, [r7, #8]
    f7b6:	607a      	str	r2, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f7b8:	68f8      	ldr	r0, [r7, #12]
    f7ba:	f7ff ff25 	bl	f608 <mp_obj_is_exception_instance>
    f7be:	4603      	mov	r3, r0
    f7c0:	2b00      	cmp	r3, #0
    f7c2:	d106      	bne.n	f7d2 <mp_obj_exception_get_traceback+0x26>
    f7c4:	4b16      	ldr	r3, [pc, #88]	; (f820 <mp_obj_exception_get_traceback+0x74>)
    f7c6:	4a17      	ldr	r2, [pc, #92]	; (f824 <mp_obj_exception_get_traceback+0x78>)
    f7c8:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    f7cc:	4816      	ldr	r0, [pc, #88]	; (f828 <mp_obj_exception_get_traceback+0x7c>)
    f7ce:	f00b fe57 	bl	1b480 <__assert_func>
    f7d2:	68f8      	ldr	r0, [r7, #12]
    f7d4:	f7fd ff6c 	bl	d6b0 <mp_obj_get_type>
    f7d8:	4603      	mov	r3, r0
    f7da:	68db      	ldr	r3, [r3, #12]
    f7dc:	4a13      	ldr	r2, [pc, #76]	; (f82c <mp_obj_exception_get_traceback+0x80>)
    f7de:	4293      	cmp	r3, r2
    f7e0:	d102      	bne.n	f7e8 <mp_obj_exception_get_traceback+0x3c>
    f7e2:	68fb      	ldr	r3, [r7, #12]
    f7e4:	617b      	str	r3, [r7, #20]
    f7e6:	e002      	b.n	f7ee <mp_obj_exception_get_traceback+0x42>
    f7e8:	68fb      	ldr	r3, [r7, #12]
    f7ea:	691b      	ldr	r3, [r3, #16]
    f7ec:	617b      	str	r3, [r7, #20]

    if (self->traceback_data == NULL) {
    f7ee:	697b      	ldr	r3, [r7, #20]
    f7f0:	689b      	ldr	r3, [r3, #8]
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	d106      	bne.n	f804 <mp_obj_exception_get_traceback+0x58>
        *n = 0;
    f7f6:	68bb      	ldr	r3, [r7, #8]
    f7f8:	2200      	movs	r2, #0
    f7fa:	601a      	str	r2, [r3, #0]
        *values = NULL;
    f7fc:	687b      	ldr	r3, [r7, #4]
    f7fe:	2200      	movs	r2, #0
    f800:	601a      	str	r2, [r3, #0]
    } else {
        *n = self->traceback_len;
        *values = self->traceback_data;
    }
}
    f802:	e008      	b.n	f816 <mp_obj_exception_get_traceback+0x6a>
        *n = self->traceback_len;
    f804:	697b      	ldr	r3, [r7, #20]
    f806:	88db      	ldrh	r3, [r3, #6]
    f808:	461a      	mov	r2, r3
    f80a:	68bb      	ldr	r3, [r7, #8]
    f80c:	601a      	str	r2, [r3, #0]
        *values = self->traceback_data;
    f80e:	697b      	ldr	r3, [r7, #20]
    f810:	689a      	ldr	r2, [r3, #8]
    f812:	687b      	ldr	r3, [r7, #4]
    f814:	601a      	str	r2, [r3, #0]
}
    f816:	bf00      	nop
    f818:	3718      	adds	r7, #24
    f81a:	46bd      	mov	sp, r7
    f81c:	bd80      	pop	{r7, pc}
    f81e:	bf00      	nop
    f820:	00022474 	.word	0x00022474
    f824:	0002251c 	.word	0x0002251c
    f828:	00022450 	.word	0x00022450
    f82c:	0000f1e9 	.word	0x0000f1e9

0000f830 <MP_OBJ_IS_OBJ>:
    f830:	b480      	push	{r7}
    f832:	b083      	sub	sp, #12
    f834:	af00      	add	r7, sp, #0
    f836:	6078      	str	r0, [r7, #4]
    f838:	687b      	ldr	r3, [r7, #4]
    f83a:	f003 0303 	and.w	r3, r3, #3
    f83e:	2b00      	cmp	r3, #0
    f840:	bf0c      	ite	eq
    f842:	2301      	moveq	r3, #1
    f844:	2300      	movne	r3, #0
    f846:	b2db      	uxtb	r3, r3
    f848:	4618      	mov	r0, r3
    f84a:	370c      	adds	r7, #12
    f84c:	46bd      	mov	sp, r7
    f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f852:	4770      	bx	lr

0000f854 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    f854:	b580      	push	{r7, lr}
    f856:	b084      	sub	sp, #16
    f858:	af00      	add	r7, sp, #0
    f85a:	60f8      	str	r0, [r7, #12]
    f85c:	60b9      	str	r1, [r7, #8]
    f85e:	607a      	str	r2, [r7, #4]
    f860:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    f862:	687b      	ldr	r3, [r7, #4]
    f864:	045a      	lsls	r2, r3, #17
    f866:	683b      	ldr	r3, [r7, #0]
    f868:	005b      	lsls	r3, r3, #1
    f86a:	431a      	orrs	r2, r3
    f86c:	7e3b      	ldrb	r3, [r7, #24]
    f86e:	2b00      	cmp	r3, #0
    f870:	d001      	beq.n	f876 <mp_arg_check_num+0x22>
    f872:	2301      	movs	r3, #1
    f874:	e000      	b.n	f878 <mp_arg_check_num+0x24>
    f876:	2300      	movs	r3, #0
    f878:	4313      	orrs	r3, r2
    f87a:	461a      	mov	r2, r3
    f87c:	68b9      	ldr	r1, [r7, #8]
    f87e:	68f8      	ldr	r0, [r7, #12]
    f880:	f7fd fb18 	bl	ceb4 <mp_arg_check_num_sig>
}
    f884:	bf00      	nop
    f886:	3710      	adds	r7, #16
    f888:	46bd      	mov	sp, r7
    f88a:	bd80      	pop	{r7, pc}

0000f88c <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    f88c:	b480      	push	{r7}
    f88e:	af00      	add	r7, sp, #0
    f890:	4b03      	ldr	r3, [pc, #12]	; (f8a0 <mp_globals_get+0x14>)
    f892:	689b      	ldr	r3, [r3, #8]
    f894:	4618      	mov	r0, r3
    f896:	46bd      	mov	sp, r7
    f898:	f85d 7b04 	ldr.w	r7, [sp], #4
    f89c:	4770      	bx	lr
    f89e:	bf00      	nop
    f8a0:	200012f0 	.word	0x200012f0

0000f8a4 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    f8a4:	b480      	push	{r7}
    f8a6:	b083      	sub	sp, #12
    f8a8:	af00      	add	r7, sp, #0
    f8aa:	6078      	str	r0, [r7, #4]
    f8ac:	4a04      	ldr	r2, [pc, #16]	; (f8c0 <mp_globals_set+0x1c>)
    f8ae:	687b      	ldr	r3, [r7, #4]
    f8b0:	6093      	str	r3, [r2, #8]
    f8b2:	bf00      	nop
    f8b4:	370c      	adds	r7, #12
    f8b6:	46bd      	mov	sp, r7
    f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    f8bc:	4770      	bx	lr
    f8be:	bf00      	nop
    f8c0:	200012f0 	.word	0x200012f0

0000f8c4 <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f8c4:	b580      	push	{r7, lr}
    f8c6:	b088      	sub	sp, #32
    f8c8:	af02      	add	r7, sp, #8
    f8ca:	60f8      	str	r0, [r7, #12]
    f8cc:	60b9      	str	r1, [r7, #8]
    f8ce:	607a      	str	r2, [r7, #4]
    f8d0:	603b      	str	r3, [r7, #0]
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    f8d2:	68f8      	ldr	r0, [r7, #12]
    f8d4:	f7ff ffac 	bl	f830 <MP_OBJ_IS_OBJ>
    f8d8:	4603      	mov	r3, r0
    f8da:	2b00      	cmp	r3, #0
    f8dc:	d004      	beq.n	f8e8 <fun_builtin_0_call+0x24>
    f8de:	68fb      	ldr	r3, [r7, #12]
    f8e0:	681b      	ldr	r3, [r3, #0]
    f8e2:	4a0d      	ldr	r2, [pc, #52]	; (f918 <fun_builtin_0_call+0x54>)
    f8e4:	4293      	cmp	r3, r2
    f8e6:	d005      	beq.n	f8f4 <fun_builtin_0_call+0x30>
    f8e8:	4b0c      	ldr	r3, [pc, #48]	; (f91c <fun_builtin_0_call+0x58>)
    f8ea:	4a0d      	ldr	r2, [pc, #52]	; (f920 <fun_builtin_0_call+0x5c>)
    f8ec:	2135      	movs	r1, #53	; 0x35
    f8ee:	480d      	ldr	r0, [pc, #52]	; (f924 <fun_builtin_0_call+0x60>)
    f8f0:	f00b fdc6 	bl	1b480 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f8f4:	68fb      	ldr	r3, [r7, #12]
    f8f6:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    f8f8:	2300      	movs	r3, #0
    f8fa:	9300      	str	r3, [sp, #0]
    f8fc:	2300      	movs	r3, #0
    f8fe:	2200      	movs	r2, #0
    f900:	6879      	ldr	r1, [r7, #4]
    f902:	68b8      	ldr	r0, [r7, #8]
    f904:	f7ff ffa6 	bl	f854 <mp_arg_check_num>
    return self->fun._0();
    f908:	697b      	ldr	r3, [r7, #20]
    f90a:	685b      	ldr	r3, [r3, #4]
    f90c:	4798      	blx	r3
    f90e:	4603      	mov	r3, r0
}
    f910:	4618      	mov	r0, r3
    f912:	3718      	adds	r7, #24
    f914:	46bd      	mov	sp, r7
    f916:	bd80      	pop	{r7, pc}
    f918:	00022580 	.word	0x00022580
    f91c:	0002253c 	.word	0x0002253c
    f920:	00022804 	.word	0x00022804
    f924:	0002256c 	.word	0x0002256c

0000f928 <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f928:	b580      	push	{r7, lr}
    f92a:	b088      	sub	sp, #32
    f92c:	af02      	add	r7, sp, #8
    f92e:	60f8      	str	r0, [r7, #12]
    f930:	60b9      	str	r1, [r7, #8]
    f932:	607a      	str	r2, [r7, #4]
    f934:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    f936:	68f8      	ldr	r0, [r7, #12]
    f938:	f7ff ff7a 	bl	f830 <MP_OBJ_IS_OBJ>
    f93c:	4603      	mov	r3, r0
    f93e:	2b00      	cmp	r3, #0
    f940:	d004      	beq.n	f94c <fun_builtin_1_call+0x24>
    f942:	68fb      	ldr	r3, [r7, #12]
    f944:	681b      	ldr	r3, [r3, #0]
    f946:	4a0f      	ldr	r2, [pc, #60]	; (f984 <fun_builtin_1_call+0x5c>)
    f948:	4293      	cmp	r3, r2
    f94a:	d005      	beq.n	f958 <fun_builtin_1_call+0x30>
    f94c:	4b0e      	ldr	r3, [pc, #56]	; (f988 <fun_builtin_1_call+0x60>)
    f94e:	4a0f      	ldr	r2, [pc, #60]	; (f98c <fun_builtin_1_call+0x64>)
    f950:	2143      	movs	r1, #67	; 0x43
    f952:	480f      	ldr	r0, [pc, #60]	; (f990 <fun_builtin_1_call+0x68>)
    f954:	f00b fd94 	bl	1b480 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f958:	68fb      	ldr	r3, [r7, #12]
    f95a:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    f95c:	2300      	movs	r3, #0
    f95e:	9300      	str	r3, [sp, #0]
    f960:	2301      	movs	r3, #1
    f962:	2201      	movs	r2, #1
    f964:	6879      	ldr	r1, [r7, #4]
    f966:	68b8      	ldr	r0, [r7, #8]
    f968:	f7ff ff74 	bl	f854 <mp_arg_check_num>
    return self->fun._1(args[0]);
    f96c:	697b      	ldr	r3, [r7, #20]
    f96e:	685b      	ldr	r3, [r3, #4]
    f970:	683a      	ldr	r2, [r7, #0]
    f972:	6812      	ldr	r2, [r2, #0]
    f974:	4610      	mov	r0, r2
    f976:	4798      	blx	r3
    f978:	4603      	mov	r3, r0
}
    f97a:	4618      	mov	r0, r3
    f97c:	3718      	adds	r7, #24
    f97e:	46bd      	mov	sp, r7
    f980:	bd80      	pop	{r7, pc}
    f982:	bf00      	nop
    f984:	000225ec 	.word	0x000225ec
    f988:	000225bc 	.word	0x000225bc
    f98c:	00022818 	.word	0x00022818
    f990:	0002256c 	.word	0x0002256c

0000f994 <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f994:	b580      	push	{r7, lr}
    f996:	b088      	sub	sp, #32
    f998:	af02      	add	r7, sp, #8
    f99a:	60f8      	str	r0, [r7, #12]
    f99c:	60b9      	str	r1, [r7, #8]
    f99e:	607a      	str	r2, [r7, #4]
    f9a0:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    f9a2:	68f8      	ldr	r0, [r7, #12]
    f9a4:	f7ff ff44 	bl	f830 <MP_OBJ_IS_OBJ>
    f9a8:	4603      	mov	r3, r0
    f9aa:	2b00      	cmp	r3, #0
    f9ac:	d004      	beq.n	f9b8 <fun_builtin_2_call+0x24>
    f9ae:	68fb      	ldr	r3, [r7, #12]
    f9b0:	681b      	ldr	r3, [r3, #0]
    f9b2:	4a10      	ldr	r2, [pc, #64]	; (f9f4 <fun_builtin_2_call+0x60>)
    f9b4:	4293      	cmp	r3, r2
    f9b6:	d005      	beq.n	f9c4 <fun_builtin_2_call+0x30>
    f9b8:	4b0f      	ldr	r3, [pc, #60]	; (f9f8 <fun_builtin_2_call+0x64>)
    f9ba:	4a10      	ldr	r2, [pc, #64]	; (f9fc <fun_builtin_2_call+0x68>)
    f9bc:	2151      	movs	r1, #81	; 0x51
    f9be:	4810      	ldr	r0, [pc, #64]	; (fa00 <fun_builtin_2_call+0x6c>)
    f9c0:	f00b fd5e 	bl	1b480 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    f9c4:	68fb      	ldr	r3, [r7, #12]
    f9c6:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    f9c8:	2300      	movs	r3, #0
    f9ca:	9300      	str	r3, [sp, #0]
    f9cc:	2302      	movs	r3, #2
    f9ce:	2202      	movs	r2, #2
    f9d0:	6879      	ldr	r1, [r7, #4]
    f9d2:	68b8      	ldr	r0, [r7, #8]
    f9d4:	f7ff ff3e 	bl	f854 <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    f9d8:	697b      	ldr	r3, [r7, #20]
    f9da:	685b      	ldr	r3, [r3, #4]
    f9dc:	683a      	ldr	r2, [r7, #0]
    f9de:	6810      	ldr	r0, [r2, #0]
    f9e0:	683a      	ldr	r2, [r7, #0]
    f9e2:	3204      	adds	r2, #4
    f9e4:	6812      	ldr	r2, [r2, #0]
    f9e6:	4611      	mov	r1, r2
    f9e8:	4798      	blx	r3
    f9ea:	4603      	mov	r3, r0
}
    f9ec:	4618      	mov	r0, r3
    f9ee:	3718      	adds	r7, #24
    f9f0:	46bd      	mov	sp, r7
    f9f2:	bd80      	pop	{r7, pc}
    f9f4:	00022658 	.word	0x00022658
    f9f8:	00022628 	.word	0x00022628
    f9fc:	0002282c 	.word	0x0002282c
    fa00:	0002256c 	.word	0x0002256c

0000fa04 <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fa04:	b580      	push	{r7, lr}
    fa06:	b088      	sub	sp, #32
    fa08:	af02      	add	r7, sp, #8
    fa0a:	60f8      	str	r0, [r7, #12]
    fa0c:	60b9      	str	r1, [r7, #8]
    fa0e:	607a      	str	r2, [r7, #4]
    fa10:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    fa12:	68f8      	ldr	r0, [r7, #12]
    fa14:	f7ff ff0c 	bl	f830 <MP_OBJ_IS_OBJ>
    fa18:	4603      	mov	r3, r0
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d004      	beq.n	fa28 <fun_builtin_3_call+0x24>
    fa1e:	68fb      	ldr	r3, [r7, #12]
    fa20:	681b      	ldr	r3, [r3, #0]
    fa22:	4a11      	ldr	r2, [pc, #68]	; (fa68 <fun_builtin_3_call+0x64>)
    fa24:	4293      	cmp	r3, r2
    fa26:	d005      	beq.n	fa34 <fun_builtin_3_call+0x30>
    fa28:	4b10      	ldr	r3, [pc, #64]	; (fa6c <fun_builtin_3_call+0x68>)
    fa2a:	4a11      	ldr	r2, [pc, #68]	; (fa70 <fun_builtin_3_call+0x6c>)
    fa2c:	215f      	movs	r1, #95	; 0x5f
    fa2e:	4811      	ldr	r0, [pc, #68]	; (fa74 <fun_builtin_3_call+0x70>)
    fa30:	f00b fd26 	bl	1b480 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fa34:	68fb      	ldr	r3, [r7, #12]
    fa36:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    fa38:	2300      	movs	r3, #0
    fa3a:	9300      	str	r3, [sp, #0]
    fa3c:	2303      	movs	r3, #3
    fa3e:	2203      	movs	r2, #3
    fa40:	6879      	ldr	r1, [r7, #4]
    fa42:	68b8      	ldr	r0, [r7, #8]
    fa44:	f7ff ff06 	bl	f854 <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    fa48:	697b      	ldr	r3, [r7, #20]
    fa4a:	685b      	ldr	r3, [r3, #4]
    fa4c:	683a      	ldr	r2, [r7, #0]
    fa4e:	6810      	ldr	r0, [r2, #0]
    fa50:	683a      	ldr	r2, [r7, #0]
    fa52:	3204      	adds	r2, #4
    fa54:	6811      	ldr	r1, [r2, #0]
    fa56:	683a      	ldr	r2, [r7, #0]
    fa58:	3208      	adds	r2, #8
    fa5a:	6812      	ldr	r2, [r2, #0]
    fa5c:	4798      	blx	r3
    fa5e:	4603      	mov	r3, r0
}
    fa60:	4618      	mov	r0, r3
    fa62:	3718      	adds	r7, #24
    fa64:	46bd      	mov	sp, r7
    fa66:	bd80      	pop	{r7, pc}
    fa68:	000226c4 	.word	0x000226c4
    fa6c:	00022694 	.word	0x00022694
    fa70:	00022840 	.word	0x00022840
    fa74:	0002256c 	.word	0x0002256c

0000fa78 <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fa78:	b580      	push	{r7, lr}
    fa7a:	b088      	sub	sp, #32
    fa7c:	af00      	add	r7, sp, #0
    fa7e:	60f8      	str	r0, [r7, #12]
    fa80:	60b9      	str	r1, [r7, #8]
    fa82:	607a      	str	r2, [r7, #4]
    fa84:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    fa86:	68f8      	ldr	r0, [r7, #12]
    fa88:	f7ff fed2 	bl	f830 <MP_OBJ_IS_OBJ>
    fa8c:	4603      	mov	r3, r0
    fa8e:	2b00      	cmp	r3, #0
    fa90:	d004      	beq.n	fa9c <fun_builtin_var_call+0x24>
    fa92:	68fb      	ldr	r3, [r7, #12]
    fa94:	681b      	ldr	r3, [r3, #0]
    fa96:	4a1a      	ldr	r2, [pc, #104]	; (fb00 <fun_builtin_var_call+0x88>)
    fa98:	4293      	cmp	r3, r2
    fa9a:	d005      	beq.n	faa8 <fun_builtin_var_call+0x30>
    fa9c:	4b19      	ldr	r3, [pc, #100]	; (fb04 <fun_builtin_var_call+0x8c>)
    fa9e:	4a1a      	ldr	r2, [pc, #104]	; (fb08 <fun_builtin_var_call+0x90>)
    faa0:	216d      	movs	r1, #109	; 0x6d
    faa2:	481a      	ldr	r0, [pc, #104]	; (fb0c <fun_builtin_var_call+0x94>)
    faa4:	f00b fcec 	bl	1b480 <__assert_func>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);
    faa8:	68fb      	ldr	r3, [r7, #12]
    faaa:	61fb      	str	r3, [r7, #28]

    // check number of arguments
    mp_arg_check_num_sig(n_args, n_kw, self->sig);
    faac:	69fb      	ldr	r3, [r7, #28]
    faae:	685b      	ldr	r3, [r3, #4]
    fab0:	461a      	mov	r2, r3
    fab2:	6879      	ldr	r1, [r7, #4]
    fab4:	68b8      	ldr	r0, [r7, #8]
    fab6:	f7fd f9fd 	bl	ceb4 <mp_arg_check_num_sig>

    if (self->sig & 1) {
    faba:	69fb      	ldr	r3, [r7, #28]
    fabc:	685b      	ldr	r3, [r3, #4]
    fabe:	f003 0301 	and.w	r3, r3, #1
    fac2:	2b00      	cmp	r3, #0
    fac4:	d012      	beq.n	faec <fun_builtin_var_call+0x74>
        // function allows keywords

        // we create a map directly from the given args array
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
    fac6:	68bb      	ldr	r3, [r7, #8]
    fac8:	009b      	lsls	r3, r3, #2
    faca:	683a      	ldr	r2, [r7, #0]
    facc:	441a      	add	r2, r3
    face:	f107 0310 	add.w	r3, r7, #16
    fad2:	6879      	ldr	r1, [r7, #4]
    fad4:	4618      	mov	r0, r3
    fad6:	f7fd fb7c 	bl	d1d2 <mp_map_init_fixed_table>

        return self->fun.kw(n_args, args, &kw_args);
    fada:	69fb      	ldr	r3, [r7, #28]
    fadc:	689b      	ldr	r3, [r3, #8]
    fade:	f107 0210 	add.w	r2, r7, #16
    fae2:	6839      	ldr	r1, [r7, #0]
    fae4:	68b8      	ldr	r0, [r7, #8]
    fae6:	4798      	blx	r3
    fae8:	4603      	mov	r3, r0
    faea:	e005      	b.n	faf8 <fun_builtin_var_call+0x80>

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
    faec:	69fb      	ldr	r3, [r7, #28]
    faee:	689b      	ldr	r3, [r3, #8]
    faf0:	6839      	ldr	r1, [r7, #0]
    faf2:	68b8      	ldr	r0, [r7, #8]
    faf4:	4798      	blx	r3
    faf6:	4603      	mov	r3, r0
    }
}
    faf8:	4618      	mov	r0, r3
    fafa:	3720      	adds	r7, #32
    fafc:	46bd      	mov	sp, r7
    fafe:	bd80      	pop	{r7, pc}
    fb00:	00022734 	.word	0x00022734
    fb04:	00022700 	.word	0x00022700
    fb08:	00022854 	.word	0x00022854
    fb0c:	0002256c 	.word	0x0002256c

0000fb10 <mp_obj_code_get_name>:
};

/******************************************************************************/
/* byte code functions                                                        */

qstr mp_obj_code_get_name(const byte *code_info) {
    fb10:	b580      	push	{r7, lr}
    fb12:	b082      	sub	sp, #8
    fb14:	af00      	add	r7, sp, #0
    fb16:	6078      	str	r0, [r7, #4]
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
    fb18:	6878      	ldr	r0, [r7, #4]
    fb1a:	f00a fce7 	bl	1a4ec <mp_decode_uint_skip>
    fb1e:	6078      	str	r0, [r7, #4]
    #if MICROPY_PERSISTENT_CODE
    return code_info[0] | (code_info[1] << 8);
    fb20:	687b      	ldr	r3, [r7, #4]
    fb22:	781b      	ldrb	r3, [r3, #0]
    fb24:	461a      	mov	r2, r3
    fb26:	687b      	ldr	r3, [r7, #4]
    fb28:	3301      	adds	r3, #1
    fb2a:	781b      	ldrb	r3, [r3, #0]
    fb2c:	021b      	lsls	r3, r3, #8
    fb2e:	4313      	orrs	r3, r2
    #else
    return mp_decode_uint_value(code_info);
    #endif
}
    fb30:	4618      	mov	r0, r3
    fb32:	3708      	adds	r7, #8
    fb34:	46bd      	mov	sp, r7
    fb36:	bd80      	pop	{r7, pc}

0000fb38 <mp_obj_fun_get_name>:

#if MICROPY_EMIT_NATIVE
STATIC const mp_obj_type_t mp_type_fun_native;
#endif

qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
    fb38:	b580      	push	{r7, lr}
    fb3a:	b084      	sub	sp, #16
    fb3c:	af00      	add	r7, sp, #0
    fb3e:	6078      	str	r0, [r7, #4]
    const mp_obj_fun_bc_t *fun = MP_OBJ_TO_PTR(fun_in);
    fb40:	687b      	ldr	r3, [r7, #4]
    fb42:	60fb      	str	r3, [r7, #12]
        // TODO native functions don't have name stored
        return MP_QSTR_;
    }
    #endif

    const byte *bc = fun->bytecode;
    fb44:	68fb      	ldr	r3, [r7, #12]
    fb46:	689b      	ldr	r3, [r3, #8]
    fb48:	60bb      	str	r3, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_state
    fb4a:	68b8      	ldr	r0, [r7, #8]
    fb4c:	f00a fcce 	bl	1a4ec <mp_decode_uint_skip>
    fb50:	60b8      	str	r0, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
    fb52:	68b8      	ldr	r0, [r7, #8]
    fb54:	f00a fcca 	bl	1a4ec <mp_decode_uint_skip>
    fb58:	60b8      	str	r0, [r7, #8]
    bc++; // skip scope_params
    fb5a:	68bb      	ldr	r3, [r7, #8]
    fb5c:	3301      	adds	r3, #1
    fb5e:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_pos_args
    fb60:	68bb      	ldr	r3, [r7, #8]
    fb62:	3301      	adds	r3, #1
    fb64:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_kwonly_args
    fb66:	68bb      	ldr	r3, [r7, #8]
    fb68:	3301      	adds	r3, #1
    fb6a:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_def_pos_args
    fb6c:	68bb      	ldr	r3, [r7, #8]
    fb6e:	3301      	adds	r3, #1
    fb70:	60bb      	str	r3, [r7, #8]
    return mp_obj_code_get_name(bc);
    fb72:	68b8      	ldr	r0, [r7, #8]
    fb74:	f7ff ffcc 	bl	fb10 <mp_obj_code_get_name>
    fb78:	4603      	mov	r3, r0
}
    fb7a:	4618      	mov	r0, r3
    fb7c:	3710      	adds	r7, #16
    fb7e:	46bd      	mov	sp, r7
    fb80:	bd80      	pop	{r7, pc}

0000fb82 <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fb82:	b580      	push	{r7, lr}
    fb84:	b08c      	sub	sp, #48	; 0x30
    fb86:	af00      	add	r7, sp, #0
    fb88:	60f8      	str	r0, [r7, #12]
    fb8a:	60b9      	str	r1, [r7, #8]
    fb8c:	607a      	str	r2, [r7, #4]
    fb8e:	603b      	str	r3, [r7, #0]
    DEBUG_printf("Input pos args: ");
    dump_args(args, n_args);
    DEBUG_printf("Input kw args: ");
    dump_args(args + n_args, n_kw * 2);

    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
    fb90:	68fb      	ldr	r3, [r7, #12]
    fb92:	623b      	str	r3, [r7, #32]

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
    fb94:	6a3b      	ldr	r3, [r7, #32]
    fb96:	689b      	ldr	r3, [r3, #8]
    fb98:	4618      	mov	r0, r3
    fb9a:	f00a fc9a 	bl	1a4d2 <mp_decode_uint_value>
    fb9e:	61f8      	str	r0, [r7, #28]
    fba0:	6a3b      	ldr	r3, [r7, #32]
    fba2:	689b      	ldr	r3, [r3, #8]
    fba4:	4618      	mov	r0, r3
    fba6:	f00a fca1 	bl	1a4ec <mp_decode_uint_skip>
    fbaa:	4603      	mov	r3, r0
    fbac:	4618      	mov	r0, r3
    fbae:	f00a fc90 	bl	1a4d2 <mp_decode_uint_value>
    fbb2:	61b8      	str	r0, [r7, #24]
    fbb4:	69ba      	ldr	r2, [r7, #24]
    fbb6:	4613      	mov	r3, r2
    fbb8:	005b      	lsls	r3, r3, #1
    fbba:	441a      	add	r2, r3
    fbbc:	69fb      	ldr	r3, [r7, #28]
    fbbe:	4413      	add	r3, r2
    fbc0:	009b      	lsls	r3, r3, #2
    fbc2:	62fb      	str	r3, [r7, #44]	; 0x2c

    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    fbc4:	2300      	movs	r3, #0
    fbc6:	62bb      	str	r3, [r7, #40]	; 0x28
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
    fbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fbca:	2b2c      	cmp	r3, #44	; 0x2c
    fbcc:	d905      	bls.n	fbda <fun_bc_call+0x58>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    fbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fbd0:	3314      	adds	r3, #20
    fbd2:	4618      	mov	r0, r3
    fbd4:	f7f0 fbb9 	bl	34a <m_malloc_maybe>
    fbd8:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (code_state == NULL) {
    fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbdc:	2b00      	cmp	r3, #0
    fbde:	d10e      	bne.n	fbfe <fun_bc_call+0x7c>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
    fbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fbe2:	3314      	adds	r3, #20
    fbe4:	3307      	adds	r3, #7
    fbe6:	3307      	adds	r3, #7
    fbe8:	08db      	lsrs	r3, r3, #3
    fbea:	00db      	lsls	r3, r3, #3
    fbec:	ebad 0d03 	sub.w	sp, sp, r3
    fbf0:	466b      	mov	r3, sp
    fbf2:	3307      	adds	r3, #7
    fbf4:	08db      	lsrs	r3, r3, #3
    fbf6:	00db      	lsls	r3, r3, #3
    fbf8:	62bb      	str	r3, [r7, #40]	; 0x28
        state_size = 0; // indicate that we allocated using alloca
    fbfa:	2300      	movs	r3, #0
    fbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
    fbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc00:	6a3a      	ldr	r2, [r7, #32]
    fc02:	601a      	str	r2, [r3, #0]
    fc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc06:	2200      	movs	r2, #0
    fc08:	605a      	str	r2, [r3, #4]
    fc0a:	683b      	ldr	r3, [r7, #0]
    fc0c:	687a      	ldr	r2, [r7, #4]
    fc0e:	68b9      	ldr	r1, [r7, #8]
    fc10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fc12:	f00a fc86 	bl	1a522 <mp_setup_code_state>
    fc16:	f7ff fe39 	bl	f88c <mp_globals_get>
    fc1a:	4602      	mov	r2, r0
    fc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc1e:	611a      	str	r2, [r3, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
    fc20:	6a3b      	ldr	r3, [r7, #32]
    fc22:	685b      	ldr	r3, [r3, #4]
    fc24:	4618      	mov	r0, r3
    fc26:	f7ff fe3d 	bl	f8a4 <mp_globals_set>
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
    fc2a:	2100      	movs	r1, #0
    fc2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fc2e:	f009 fca3 	bl	19578 <mp_execute_bytecode>
    fc32:	6178      	str	r0, [r7, #20]
    mp_globals_set(code_state->old_globals);
    fc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc36:	691b      	ldr	r3, [r3, #16]
    fc38:	4618      	mov	r0, r3
    fc3a:	f7ff fe33 	bl	f8a4 <mp_globals_set>
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fc3e:	697b      	ldr	r3, [r7, #20]
    fc40:	2b00      	cmp	r3, #0
    fc42:	d104      	bne.n	fc4e <fun_bc_call+0xcc>
        // return value is in *sp
        result = *code_state->sp;
    fc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc46:	689b      	ldr	r3, [r3, #8]
    fc48:	681b      	ldr	r3, [r3, #0]
    fc4a:	627b      	str	r3, [r7, #36]	; 0x24
    fc4c:	e00c      	b.n	fc68 <fun_bc_call+0xe6>
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
    fc4e:	697b      	ldr	r3, [r7, #20]
    fc50:	2b02      	cmp	r3, #2
    fc52:	d006      	beq.n	fc62 <fun_bc_call+0xe0>
    fc54:	4b0d      	ldr	r3, [pc, #52]	; (fc8c <fun_bc_call+0x10a>)
    fc56:	4a0e      	ldr	r2, [pc, #56]	; (fc90 <fun_bc_call+0x10e>)
    fc58:	f240 113f 	movw	r1, #319	; 0x13f
    fc5c:	480d      	ldr	r0, [pc, #52]	; (fc94 <fun_bc_call+0x112>)
    fc5e:	f00b fc0f 	bl	1b480 <__assert_func>
        // return value is in fastn[0]==state[n_state - 1]
        result = code_state->state[0];
    fc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc64:	695b      	ldr	r3, [r3, #20]
    fc66:	627b      	str	r3, [r7, #36]	; 0x24

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
    fc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fc6a:	2b00      	cmp	r3, #0
    fc6c:	d002      	beq.n	fc74 <fun_bc_call+0xf2>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    fc6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fc70:	f7f0 fbb2 	bl	3d8 <m_free>
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fc74:	697b      	ldr	r3, [r7, #20]
    fc76:	2b00      	cmp	r3, #0
    fc78:	d101      	bne.n	fc7e <fun_bc_call+0xfc>
        return result;
    fc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fc7c:	e002      	b.n	fc84 <fun_bc_call+0x102>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    fc7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    fc80:	f7f0 fb2e 	bl	2e0 <nlr_jump>
    }
}
    fc84:	4618      	mov	r0, r3
    fc86:	3730      	adds	r7, #48	; 0x30
    fc88:	46bd      	mov	sp, r7
    fc8a:	bd80      	pop	{r7, pc}
    fc8c:	00022770 	.word	0x00022770
    fc90:	0002286c 	.word	0x0002286c
    fc94:	0002256c 	.word	0x0002256c

0000fc98 <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = mp_obj_fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
    fc98:	b580      	push	{r7, lr}
    fc9a:	b088      	sub	sp, #32
    fc9c:	af00      	add	r7, sp, #0
    fc9e:	60f8      	str	r0, [r7, #12]
    fca0:	60b9      	str	r1, [r7, #8]
    fca2:	607a      	str	r2, [r7, #4]
    fca4:	603b      	str	r3, [r7, #0]
    size_t n_def_args = 0;
    fca6:	2300      	movs	r3, #0
    fca8:	61fb      	str	r3, [r7, #28]
    size_t n_extra_args = 0;
    fcaa:	2300      	movs	r3, #0
    fcac:	61bb      	str	r3, [r7, #24]
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
    fcae:	68fb      	ldr	r3, [r7, #12]
    fcb0:	617b      	str	r3, [r7, #20]
    if (def_args_in != MP_OBJ_NULL) {
    fcb2:	68fb      	ldr	r3, [r7, #12]
    fcb4:	2b00      	cmp	r3, #0
    fcb6:	d017      	beq.n	fce8 <mp_obj_new_fun_bc+0x50>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
    fcb8:	68f8      	ldr	r0, [r7, #12]
    fcba:	f7ff fdb9 	bl	f830 <MP_OBJ_IS_OBJ>
    fcbe:	4603      	mov	r3, r0
    fcc0:	2b00      	cmp	r3, #0
    fcc2:	d004      	beq.n	fcce <mp_obj_new_fun_bc+0x36>
    fcc4:	68fb      	ldr	r3, [r7, #12]
    fcc6:	681b      	ldr	r3, [r3, #0]
    fcc8:	4a23      	ldr	r2, [pc, #140]	; (fd58 <mp_obj_new_fun_bc+0xc0>)
    fcca:	4293      	cmp	r3, r2
    fccc:	d006      	beq.n	fcdc <mp_obj_new_fun_bc+0x44>
    fcce:	4b23      	ldr	r3, [pc, #140]	; (fd5c <mp_obj_new_fun_bc+0xc4>)
    fcd0:	4a23      	ldr	r2, [pc, #140]	; (fd60 <mp_obj_new_fun_bc+0xc8>)
    fcd2:	f44f 71b9 	mov.w	r1, #370	; 0x172
    fcd6:	4823      	ldr	r0, [pc, #140]	; (fd64 <mp_obj_new_fun_bc+0xcc>)
    fcd8:	f00b fbd2 	bl	1b480 <__assert_func>
        n_def_args = def_args->len;
    fcdc:	697b      	ldr	r3, [r7, #20]
    fcde:	685b      	ldr	r3, [r3, #4]
    fce0:	61fb      	str	r3, [r7, #28]
        n_extra_args = def_args->len;
    fce2:	697b      	ldr	r3, [r7, #20]
    fce4:	685b      	ldr	r3, [r3, #4]
    fce6:	61bb      	str	r3, [r7, #24]
    }
    if (def_kw_args != MP_OBJ_NULL) {
    fce8:	68bb      	ldr	r3, [r7, #8]
    fcea:	2b00      	cmp	r3, #0
    fcec:	d002      	beq.n	fcf4 <mp_obj_new_fun_bc+0x5c>
        n_extra_args += 1;
    fcee:	69bb      	ldr	r3, [r7, #24]
    fcf0:	3301      	adds	r3, #1
    fcf2:	61bb      	str	r3, [r7, #24]
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
    fcf4:	69bb      	ldr	r3, [r7, #24]
    fcf6:	3304      	adds	r3, #4
    fcf8:	009b      	lsls	r3, r3, #2
    fcfa:	4618      	mov	r0, r3
    fcfc:	f7f0 fb0e 	bl	31c <m_malloc>
    fd00:	6138      	str	r0, [r7, #16]
    o->base.type = &mp_type_fun_bc;
    fd02:	693b      	ldr	r3, [r7, #16]
    fd04:	4a18      	ldr	r2, [pc, #96]	; (fd68 <mp_obj_new_fun_bc+0xd0>)
    fd06:	601a      	str	r2, [r3, #0]
    o->globals = mp_globals_get();
    fd08:	f7ff fdc0 	bl	f88c <mp_globals_get>
    fd0c:	4602      	mov	r2, r0
    fd0e:	693b      	ldr	r3, [r7, #16]
    fd10:	605a      	str	r2, [r3, #4]
    o->bytecode = code;
    fd12:	693b      	ldr	r3, [r7, #16]
    fd14:	687a      	ldr	r2, [r7, #4]
    fd16:	609a      	str	r2, [r3, #8]
    o->const_table = const_table;
    fd18:	693b      	ldr	r3, [r7, #16]
    fd1a:	683a      	ldr	r2, [r7, #0]
    fd1c:	60da      	str	r2, [r3, #12]
    if (def_args != NULL) {
    fd1e:	697b      	ldr	r3, [r7, #20]
    fd20:	2b00      	cmp	r3, #0
    fd22:	d00a      	beq.n	fd3a <mp_obj_new_fun_bc+0xa2>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
    fd24:	693b      	ldr	r3, [r7, #16]
    fd26:	f103 0010 	add.w	r0, r3, #16
    fd2a:	697b      	ldr	r3, [r7, #20]
    fd2c:	f103 0108 	add.w	r1, r3, #8
    fd30:	69fb      	ldr	r3, [r7, #28]
    fd32:	009b      	lsls	r3, r3, #2
    fd34:	461a      	mov	r2, r3
    fd36:	f00c fecf 	bl	1cad8 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
    fd3a:	68bb      	ldr	r3, [r7, #8]
    fd3c:	2b00      	cmp	r3, #0
    fd3e:	d005      	beq.n	fd4c <mp_obj_new_fun_bc+0xb4>
        o->extra_args[n_def_args] = def_kw_args;
    fd40:	693b      	ldr	r3, [r7, #16]
    fd42:	69fa      	ldr	r2, [r7, #28]
    fd44:	3204      	adds	r2, #4
    fd46:	68b9      	ldr	r1, [r7, #8]
    fd48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
    fd4c:	693b      	ldr	r3, [r7, #16]
}
    fd4e:	4618      	mov	r0, r3
    fd50:	3720      	adds	r7, #32
    fd52:	46bd      	mov	sp, r7
    fd54:	bd80      	pop	{r7, pc}
    fd56:	bf00      	nop
    fd58:	00023a20 	.word	0x00023a20
    fd5c:	000227d8 	.word	0x000227d8
    fd60:	00022878 	.word	0x00022878
    fd64:	0002256c 	.word	0x0002256c
    fd68:	0002279c 	.word	0x0002279c

0000fd6c <MP_OBJ_IS_OBJ>:
    fd6c:	b480      	push	{r7}
    fd6e:	b083      	sub	sp, #12
    fd70:	af00      	add	r7, sp, #0
    fd72:	6078      	str	r0, [r7, #4]
    fd74:	687b      	ldr	r3, [r7, #4]
    fd76:	f003 0303 	and.w	r3, r3, #3
    fd7a:	2b00      	cmp	r3, #0
    fd7c:	bf0c      	ite	eq
    fd7e:	2301      	moveq	r3, #1
    fd80:	2300      	movne	r3, #0
    fd82:	b2db      	uxtb	r3, r3
    fd84:	4618      	mov	r0, r3
    fd86:	370c      	adds	r7, #12
    fd88:	46bd      	mov	sp, r7
    fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    fd8e:	4770      	bx	lr

0000fd90 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    fd90:	b480      	push	{r7}
    fd92:	af00      	add	r7, sp, #0
    fd94:	4b03      	ldr	r3, [pc, #12]	; (fda4 <mp_globals_get+0x14>)
    fd96:	689b      	ldr	r3, [r3, #8]
    fd98:	4618      	mov	r0, r3
    fd9a:	46bd      	mov	sp, r7
    fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    fda0:	4770      	bx	lr
    fda2:	bf00      	nop
    fda4:	200012f0 	.word	0x200012f0

0000fda8 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    fda8:	b480      	push	{r7}
    fdaa:	b083      	sub	sp, #12
    fdac:	af00      	add	r7, sp, #0
    fdae:	6078      	str	r0, [r7, #4]
    fdb0:	4a04      	ldr	r2, [pc, #16]	; (fdc4 <mp_globals_set+0x1c>)
    fdb2:	687b      	ldr	r3, [r7, #4]
    fdb4:	6093      	str	r3, [r2, #8]
    fdb6:	bf00      	nop
    fdb8:	370c      	adds	r7, #12
    fdba:	46bd      	mov	sp, r7
    fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    fdc0:	4770      	bx	lr
    fdc2:	bf00      	nop
    fdc4:	200012f0 	.word	0x200012f0

0000fdc8 <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fdc8:	b580      	push	{r7, lr}
    fdca:	b088      	sub	sp, #32
    fdcc:	af00      	add	r7, sp, #0
    fdce:	60f8      	str	r0, [r7, #12]
    fdd0:	60b9      	str	r1, [r7, #8]
    fdd2:	607a      	str	r2, [r7, #4]
    fdd4:	603b      	str	r3, [r7, #0]
    // A generating function is just a bytecode function with type mp_type_gen_wrap
    mp_obj_fun_bc_t *self_fun = MP_OBJ_TO_PTR(self_in);
    fdd6:	68fb      	ldr	r3, [r7, #12]
    fdd8:	61fb      	str	r3, [r7, #28]

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
    fdda:	69fb      	ldr	r3, [r7, #28]
    fddc:	689b      	ldr	r3, [r3, #8]
    fdde:	4618      	mov	r0, r3
    fde0:	f00a fb77 	bl	1a4d2 <mp_decode_uint_value>
    fde4:	61b8      	str	r0, [r7, #24]
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
    fde6:	69fb      	ldr	r3, [r7, #28]
    fde8:	689b      	ldr	r3, [r3, #8]
    fdea:	4618      	mov	r0, r3
    fdec:	f00a fb7e 	bl	1a4ec <mp_decode_uint_skip>
    fdf0:	4603      	mov	r3, r0
    fdf2:	4618      	mov	r0, r3
    fdf4:	f00a fb6d 	bl	1a4d2 <mp_decode_uint_value>
    fdf8:	6178      	str	r0, [r7, #20]

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
    fdfa:	697a      	ldr	r2, [r7, #20]
    fdfc:	4613      	mov	r3, r2
    fdfe:	005b      	lsls	r3, r3, #1
    fe00:	441a      	add	r2, r3
    fe02:	69bb      	ldr	r3, [r7, #24]
    fe04:	4413      	add	r3, r2
    fe06:	3307      	adds	r3, #7
    fe08:	009b      	lsls	r3, r3, #2
    fe0a:	4618      	mov	r0, r3
    fe0c:	f7f0 fa86 	bl	31c <m_malloc>
    fe10:	6138      	str	r0, [r7, #16]
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
    fe12:	693b      	ldr	r3, [r7, #16]
    fe14:	4a0c      	ldr	r2, [pc, #48]	; (fe48 <gen_wrap_call+0x80>)
    fe16:	601a      	str	r2, [r3, #0]

    o->globals = self_fun->globals;
    fe18:	69fb      	ldr	r3, [r7, #28]
    fe1a:	685a      	ldr	r2, [r3, #4]
    fe1c:	693b      	ldr	r3, [r7, #16]
    fe1e:	605a      	str	r2, [r3, #4]
    o->code_state.fun_bc = self_fun;
    fe20:	693b      	ldr	r3, [r7, #16]
    fe22:	69fa      	ldr	r2, [r7, #28]
    fe24:	609a      	str	r2, [r3, #8]
    o->code_state.ip = 0;
    fe26:	693b      	ldr	r3, [r7, #16]
    fe28:	2200      	movs	r2, #0
    fe2a:	60da      	str	r2, [r3, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
    fe2c:	693b      	ldr	r3, [r7, #16]
    fe2e:	f103 0008 	add.w	r0, r3, #8
    fe32:	683b      	ldr	r3, [r7, #0]
    fe34:	687a      	ldr	r2, [r7, #4]
    fe36:	68b9      	ldr	r1, [r7, #8]
    fe38:	f00a fb73 	bl	1a522 <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
    fe3c:	693b      	ldr	r3, [r7, #16]
}
    fe3e:	4618      	mov	r0, r3
    fe40:	3720      	adds	r7, #32
    fe42:	46bd      	mov	sp, r7
    fe44:	bd80      	pop	{r7, pc}
    fe46:	bf00      	nop
    fe48:	00022a78 	.word	0x00022a78

0000fe4c <gen_instance_print>:
#endif // MICROPY_EMIT_NATIVE

/******************************************************************************/
/* generator instance                                                         */

STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    fe4c:	b580      	push	{r7, lr}
    fe4e:	b086      	sub	sp, #24
    fe50:	af00      	add	r7, sp, #0
    fe52:	60f8      	str	r0, [r7, #12]
    fe54:	60b9      	str	r1, [r7, #8]
    fe56:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    fe58:	68bb      	ldr	r3, [r7, #8]
    fe5a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
    fe5c:	697b      	ldr	r3, [r7, #20]
    fe5e:	689b      	ldr	r3, [r3, #8]
    fe60:	4618      	mov	r0, r3
    fe62:	f7ff fe69 	bl	fb38 <mp_obj_fun_get_name>
    fe66:	4602      	mov	r2, r0
    fe68:	697b      	ldr	r3, [r7, #20]
    fe6a:	4904      	ldr	r1, [pc, #16]	; (fe7c <gen_instance_print+0x30>)
    fe6c:	68f8      	ldr	r0, [r7, #12]
    fe6e:	f7f2 f83b 	bl	1ee8 <mp_printf>
}
    fe72:	bf00      	nop
    fe74:	3718      	adds	r7, #24
    fe76:	46bd      	mov	sp, r7
    fe78:	bd80      	pop	{r7, pc}
    fe7a:	bf00      	nop
    fe7c:	000228c8 	.word	0x000228c8

0000fe80 <mp_obj_gen_resume>:

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    fe80:	b580      	push	{r7, lr}
    fe82:	b086      	sub	sp, #24
    fe84:	af00      	add	r7, sp, #0
    fe86:	60f8      	str	r0, [r7, #12]
    fe88:	60b9      	str	r1, [r7, #8]
    fe8a:	607a      	str	r2, [r7, #4]
    fe8c:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
    fe8e:	68f8      	ldr	r0, [r7, #12]
    fe90:	f7ff ff6c 	bl	fd6c <MP_OBJ_IS_OBJ>
    fe94:	4603      	mov	r3, r0
    fe96:	2b00      	cmp	r3, #0
    fe98:	d004      	beq.n	fea4 <mp_obj_gen_resume+0x24>
    fe9a:	68fb      	ldr	r3, [r7, #12]
    fe9c:	681b      	ldr	r3, [r3, #0]
    fe9e:	4a49      	ldr	r2, [pc, #292]	; (ffc4 <mp_obj_gen_resume+0x144>)
    fea0:	4293      	cmp	r3, r2
    fea2:	d005      	beq.n	feb0 <mp_obj_gen_resume+0x30>
    fea4:	4b48      	ldr	r3, [pc, #288]	; (ffc8 <mp_obj_gen_resume+0x148>)
    fea6:	4a49      	ldr	r2, [pc, #292]	; (ffcc <mp_obj_gen_resume+0x14c>)
    fea8:	2186      	movs	r1, #134	; 0x86
    feaa:	4849      	ldr	r0, [pc, #292]	; (ffd0 <mp_obj_gen_resume+0x150>)
    feac:	f00b fae8 	bl	1b480 <__assert_func>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    feb0:	68fb      	ldr	r3, [r7, #12]
    feb2:	617b      	str	r3, [r7, #20]
    if (self->code_state.ip == 0) {
    feb4:	697b      	ldr	r3, [r7, #20]
    feb6:	68db      	ldr	r3, [r3, #12]
    feb8:	2b00      	cmp	r3, #0
    feba:	d104      	bne.n	fec6 <mp_obj_gen_resume+0x46>
        // Trying to resume already stopped generator
        *ret_val = MP_OBJ_STOP_ITERATION;
    febc:	683b      	ldr	r3, [r7, #0]
    febe:	2204      	movs	r2, #4
    fec0:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_NORMAL;
    fec2:	2300      	movs	r3, #0
    fec4:	e07a      	b.n	ffbc <mp_obj_gen_resume+0x13c>
    }
    if (self->code_state.sp == self->code_state.state - 1) {
    fec6:	697b      	ldr	r3, [r7, #20]
    fec8:	691a      	ldr	r2, [r3, #16]
    feca:	697b      	ldr	r3, [r7, #20]
    fecc:	331c      	adds	r3, #28
    fece:	3b04      	subs	r3, #4
    fed0:	429a      	cmp	r2, r3
    fed2:	d106      	bne.n	fee2 <mp_obj_gen_resume+0x62>
        if (send_value != mp_const_none) {
    fed4:	68bb      	ldr	r3, [r7, #8]
    fed6:	4a3f      	ldr	r2, [pc, #252]	; (ffd4 <mp_obj_gen_resume+0x154>)
    fed8:	4293      	cmp	r3, r2
    feda:	d015      	beq.n	ff08 <mp_obj_gen_resume+0x88>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
    fedc:	483e      	ldr	r0, [pc, #248]	; (ffd8 <mp_obj_gen_resume+0x158>)
    fede:	f7fc ffc3 	bl	ce68 <mp_raise_TypeError>
        }
    } else {
        #if MICROPY_PY_GENERATOR_PEND_THROW
        // If exception is pending (set using .pend_throw()), process it now.
        if (*self->code_state.sp != mp_const_none) {
    fee2:	697b      	ldr	r3, [r7, #20]
    fee4:	691b      	ldr	r3, [r3, #16]
    fee6:	681b      	ldr	r3, [r3, #0]
    fee8:	4a3a      	ldr	r2, [pc, #232]	; (ffd4 <mp_obj_gen_resume+0x154>)
    feea:	4293      	cmp	r3, r2
    feec:	d008      	beq.n	ff00 <mp_obj_gen_resume+0x80>
            throw_value = *self->code_state.sp;
    feee:	697b      	ldr	r3, [r7, #20]
    fef0:	691b      	ldr	r3, [r3, #16]
    fef2:	681b      	ldr	r3, [r3, #0]
    fef4:	607b      	str	r3, [r7, #4]
            *self->code_state.sp = MP_OBJ_NULL;
    fef6:	697b      	ldr	r3, [r7, #20]
    fef8:	691b      	ldr	r3, [r3, #16]
    fefa:	2200      	movs	r2, #0
    fefc:	601a      	str	r2, [r3, #0]
    fefe:	e003      	b.n	ff08 <mp_obj_gen_resume+0x88>
        } else
        #endif
        {
            *self->code_state.sp = send_value;
    ff00:	697b      	ldr	r3, [r7, #20]
    ff02:	691b      	ldr	r3, [r3, #16]
    ff04:	68ba      	ldr	r2, [r7, #8]
    ff06:	601a      	str	r2, [r3, #0]
        }
    }

    // We set self->globals=NULL while executing, for a sentinel to ensure the generator
    // cannot be reentered during execution
    if (self->globals == NULL) {
    ff08:	697b      	ldr	r3, [r7, #20]
    ff0a:	685b      	ldr	r3, [r3, #4]
    ff0c:	2b00      	cmp	r3, #0
    ff0e:	d102      	bne.n	ff16 <mp_obj_gen_resume+0x96>
        mp_raise_ValueError("generator already executing");
    ff10:	4832      	ldr	r0, [pc, #200]	; (ffdc <mp_obj_gen_resume+0x15c>)
    ff12:	f7fc ff9e 	bl	ce52 <mp_raise_ValueError>
    }

    // Set up the correct globals context for the generator and execute it
    self->code_state.old_globals = mp_globals_get();
    ff16:	f7ff ff3b 	bl	fd90 <mp_globals_get>
    ff1a:	4602      	mov	r2, r0
    ff1c:	697b      	ldr	r3, [r7, #20]
    ff1e:	619a      	str	r2, [r3, #24]
    mp_globals_set(self->globals);
    ff20:	697b      	ldr	r3, [r7, #20]
    ff22:	685b      	ldr	r3, [r3, #4]
    ff24:	4618      	mov	r0, r3
    ff26:	f7ff ff3f 	bl	fda8 <mp_globals_set>
    self->globals = NULL;
    ff2a:	697b      	ldr	r3, [r7, #20]
    ff2c:	2200      	movs	r2, #0
    ff2e:	605a      	str	r2, [r3, #4]
        ret_kind = fun((void*)&self->code_state, throw_value);
    } else
    #endif
    {
        // A bytecode generator
        ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
    ff30:	697b      	ldr	r3, [r7, #20]
    ff32:	3308      	adds	r3, #8
    ff34:	6879      	ldr	r1, [r7, #4]
    ff36:	4618      	mov	r0, r3
    ff38:	f009 fb1e 	bl	19578 <mp_execute_bytecode>
    ff3c:	6138      	str	r0, [r7, #16]
    }

    self->globals = mp_globals_get();
    ff3e:	f7ff ff27 	bl	fd90 <mp_globals_get>
    ff42:	4602      	mov	r2, r0
    ff44:	697b      	ldr	r3, [r7, #20]
    ff46:	605a      	str	r2, [r3, #4]
    mp_globals_set(self->code_state.old_globals);
    ff48:	697b      	ldr	r3, [r7, #20]
    ff4a:	699b      	ldr	r3, [r3, #24]
    ff4c:	4618      	mov	r0, r3
    ff4e:	f7ff ff2b 	bl	fda8 <mp_globals_set>

    switch (ret_kind) {
    ff52:	693b      	ldr	r3, [r7, #16]
    ff54:	2b01      	cmp	r3, #1
    ff56:	d00a      	beq.n	ff6e <mp_obj_gen_resume+0xee>
    ff58:	2b02      	cmp	r3, #2
    ff5a:	d012      	beq.n	ff82 <mp_obj_gen_resume+0x102>
        case MP_VM_RETURN_NORMAL:
        default:
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            self->code_state.ip = 0;
    ff5c:	697b      	ldr	r3, [r7, #20]
    ff5e:	2200      	movs	r2, #0
    ff60:	60da      	str	r2, [r3, #12]
            *ret_val = *self->code_state.sp;
    ff62:	697b      	ldr	r3, [r7, #20]
    ff64:	691b      	ldr	r3, [r3, #16]
    ff66:	681a      	ldr	r2, [r3, #0]
    ff68:	683b      	ldr	r3, [r7, #0]
    ff6a:	601a      	str	r2, [r3, #0]
            break;
    ff6c:	e025      	b.n	ffba <mp_obj_gen_resume+0x13a>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
    ff6e:	697b      	ldr	r3, [r7, #20]
    ff70:	691b      	ldr	r3, [r3, #16]
    ff72:	681a      	ldr	r2, [r3, #0]
    ff74:	683b      	ldr	r3, [r7, #0]
    ff76:	601a      	str	r2, [r3, #0]
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
    ff78:	697b      	ldr	r3, [r7, #20]
    ff7a:	691b      	ldr	r3, [r3, #16]
    ff7c:	4a15      	ldr	r2, [pc, #84]	; (ffd4 <mp_obj_gen_resume+0x154>)
    ff7e:	601a      	str	r2, [r3, #0]
            #endif
            break;
    ff80:	e01b      	b.n	ffba <mp_obj_gen_resume+0x13a>

        case MP_VM_RETURN_EXCEPTION: {
            self->code_state.ip = 0;
    ff82:	697b      	ldr	r3, [r7, #20]
    ff84:	2200      	movs	r2, #0
    ff86:	60da      	str	r2, [r3, #12]
            *ret_val = self->code_state.state[0];
    ff88:	697b      	ldr	r3, [r7, #20]
    ff8a:	69da      	ldr	r2, [r3, #28]
    ff8c:	683b      	ldr	r3, [r7, #0]
    ff8e:	601a      	str	r2, [r3, #0]
            // PEP479: if StopIteration is raised inside a generator it is replaced with RuntimeError
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(*ret_val)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    ff90:	683b      	ldr	r3, [r7, #0]
    ff92:	681b      	ldr	r3, [r3, #0]
    ff94:	4618      	mov	r0, r3
    ff96:	f7fd fb8b 	bl	d6b0 <mp_obj_get_type>
    ff9a:	4603      	mov	r3, r0
    ff9c:	4910      	ldr	r1, [pc, #64]	; (ffe0 <mp_obj_gen_resume+0x160>)
    ff9e:	4618      	mov	r0, r3
    ffa0:	f007 f8e8 	bl	17174 <mp_obj_is_subclass_fast>
    ffa4:	4603      	mov	r3, r0
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	d006      	beq.n	ffb8 <mp_obj_gen_resume+0x138>
                *ret_val = mp_obj_new_exception_msg(&mp_type_RuntimeError, "generator raised StopIteration");
    ffaa:	490e      	ldr	r1, [pc, #56]	; (ffe4 <mp_obj_gen_resume+0x164>)
    ffac:	480e      	ldr	r0, [pc, #56]	; (ffe8 <mp_obj_gen_resume+0x168>)
    ffae:	f7ff fa05 	bl	f3bc <mp_obj_new_exception_msg>
    ffb2:	4602      	mov	r2, r0
    ffb4:	683b      	ldr	r3, [r7, #0]
    ffb6:	601a      	str	r2, [r3, #0]
            }
            break;
    ffb8:	bf00      	nop
        }
    }

    return ret_kind;
    ffba:	693b      	ldr	r3, [r7, #16]
}
    ffbc:	4618      	mov	r0, r3
    ffbe:	3718      	adds	r7, #24
    ffc0:	46bd      	mov	sp, r7
    ffc2:	bd80      	pop	{r7, pc}
    ffc4:	00022a78 	.word	0x00022a78
    ffc8:	000228e8 	.word	0x000228e8
    ffcc:	00022ab4 	.word	0x00022ab4
    ffd0:	0002294c 	.word	0x0002294c
    ffd4:	00023108 	.word	0x00023108
    ffd8:	00022964 	.word	0x00022964
    ffdc:	0002299c 	.word	0x0002299c
    ffe0:	00021f70 	.word	0x00021f70
    ffe4:	000229b8 	.word	0x000229b8
    ffe8:	000222b8 	.word	0x000222b8

0000ffec <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
    ffec:	b580      	push	{r7, lr}
    ffee:	b086      	sub	sp, #24
    fff0:	af00      	add	r7, sp, #0
    fff2:	60f8      	str	r0, [r7, #12]
    fff4:	60b9      	str	r1, [r7, #8]
    fff6:	607a      	str	r2, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
    fff8:	f107 0314 	add.w	r3, r7, #20
    fffc:	687a      	ldr	r2, [r7, #4]
    fffe:	68b9      	ldr	r1, [r7, #8]
   10000:	68f8      	ldr	r0, [r7, #12]
   10002:	f7ff ff3d 	bl	fe80 <mp_obj_gen_resume>
   10006:	4603      	mov	r3, r0
   10008:	2b01      	cmp	r3, #1
   1000a:	d015      	beq.n	10038 <gen_resume_and_raise+0x4c>
   1000c:	2b02      	cmp	r3, #2
   1000e:	d015      	beq.n	1003c <gen_resume_and_raise+0x50>
        case MP_VM_RETURN_NORMAL:
        default:
            // Optimize return w/o value in case generator is used in for loop
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
   10010:	697b      	ldr	r3, [r7, #20]
   10012:	4a0e      	ldr	r2, [pc, #56]	; (1004c <gen_resume_and_raise+0x60>)
   10014:	4293      	cmp	r3, r2
   10016:	d002      	beq.n	1001e <gen_resume_and_raise+0x32>
   10018:	697b      	ldr	r3, [r7, #20]
   1001a:	2b04      	cmp	r3, #4
   1001c:	d101      	bne.n	10022 <gen_resume_and_raise+0x36>
                return MP_OBJ_STOP_ITERATION;
   1001e:	2304      	movs	r3, #4
   10020:	e010      	b.n	10044 <gen_resume_and_raise+0x58>
            } else {
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
   10022:	f107 0314 	add.w	r3, r7, #20
   10026:	461a      	mov	r2, r3
   10028:	2101      	movs	r1, #1
   1002a:	4809      	ldr	r0, [pc, #36]	; (10050 <gen_resume_and_raise+0x64>)
   1002c:	f7ff f9a0 	bl	f370 <mp_obj_new_exception_args>
   10030:	4603      	mov	r3, r0
   10032:	4618      	mov	r0, r3
   10034:	f7f0 f954 	bl	2e0 <nlr_jump>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
   10038:	697b      	ldr	r3, [r7, #20]
   1003a:	e003      	b.n	10044 <gen_resume_and_raise+0x58>

        case MP_VM_RETURN_EXCEPTION:
            nlr_raise(ret);
   1003c:	697b      	ldr	r3, [r7, #20]
   1003e:	4618      	mov	r0, r3
   10040:	f7f0 f94e 	bl	2e0 <nlr_jump>
    }
}
   10044:	4618      	mov	r0, r3
   10046:	3718      	adds	r7, #24
   10048:	46bd      	mov	sp, r7
   1004a:	bd80      	pop	{r7, pc}
   1004c:	00023108 	.word	0x00023108
   10050:	00021f70 	.word	0x00021f70

00010054 <gen_instance_iternext>:

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
   10054:	b580      	push	{r7, lr}
   10056:	b082      	sub	sp, #8
   10058:	af00      	add	r7, sp, #0
   1005a:	6078      	str	r0, [r7, #4]
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
   1005c:	2200      	movs	r2, #0
   1005e:	4904      	ldr	r1, [pc, #16]	; (10070 <gen_instance_iternext+0x1c>)
   10060:	6878      	ldr	r0, [r7, #4]
   10062:	f7ff ffc3 	bl	ffec <gen_resume_and_raise>
   10066:	4603      	mov	r3, r0
}
   10068:	4618      	mov	r0, r3
   1006a:	3708      	adds	r7, #8
   1006c:	46bd      	mov	sp, r7
   1006e:	bd80      	pop	{r7, pc}
   10070:	00023108 	.word	0x00023108

00010074 <gen_instance_send>:

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
   10074:	b580      	push	{r7, lr}
   10076:	b084      	sub	sp, #16
   10078:	af00      	add	r7, sp, #0
   1007a:	6078      	str	r0, [r7, #4]
   1007c:	6039      	str	r1, [r7, #0]
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
   1007e:	2200      	movs	r2, #0
   10080:	6839      	ldr	r1, [r7, #0]
   10082:	6878      	ldr	r0, [r7, #4]
   10084:	f7ff ffb2 	bl	ffec <gen_resume_and_raise>
   10088:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   1008a:	68fb      	ldr	r3, [r7, #12]
   1008c:	2b04      	cmp	r3, #4
   1008e:	d106      	bne.n	1009e <gen_instance_send+0x2a>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10090:	4805      	ldr	r0, [pc, #20]	; (100a8 <gen_instance_send+0x34>)
   10092:	f7ff f94f 	bl	f334 <mp_obj_new_exception>
   10096:	4603      	mov	r3, r0
   10098:	4618      	mov	r0, r3
   1009a:	f7f0 f921 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   1009e:	68fb      	ldr	r3, [r7, #12]
    }
}
   100a0:	4618      	mov	r0, r3
   100a2:	3710      	adds	r7, #16
   100a4:	46bd      	mov	sp, r7
   100a6:	bd80      	pop	{r7, pc}
   100a8:	00021f70 	.word	0x00021f70

000100ac <gen_instance_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in);
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   100ac:	b580      	push	{r7, lr}
   100ae:	b084      	sub	sp, #16
   100b0:	af00      	add	r7, sp, #0
   100b2:	6078      	str	r0, [r7, #4]
   100b4:	6039      	str	r1, [r7, #0]
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
   100b6:	687b      	ldr	r3, [r7, #4]
   100b8:	2b02      	cmp	r3, #2
   100ba:	d102      	bne.n	100c2 <gen_instance_throw+0x16>
   100bc:	683b      	ldr	r3, [r7, #0]
   100be:	685b      	ldr	r3, [r3, #4]
   100c0:	e001      	b.n	100c6 <gen_instance_throw+0x1a>
   100c2:	683b      	ldr	r3, [r7, #0]
   100c4:	689b      	ldr	r3, [r3, #8]
   100c6:	60fb      	str	r3, [r7, #12]

    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
   100c8:	683b      	ldr	r3, [r7, #0]
   100ca:	681b      	ldr	r3, [r3, #0]
   100cc:	68fa      	ldr	r2, [r7, #12]
   100ce:	490a      	ldr	r1, [pc, #40]	; (100f8 <gen_instance_throw+0x4c>)
   100d0:	4618      	mov	r0, r3
   100d2:	f7ff ff8b 	bl	ffec <gen_resume_and_raise>
   100d6:	60b8      	str	r0, [r7, #8]
    if (ret == MP_OBJ_STOP_ITERATION) {
   100d8:	68bb      	ldr	r3, [r7, #8]
   100da:	2b04      	cmp	r3, #4
   100dc:	d106      	bne.n	100ec <gen_instance_throw+0x40>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   100de:	4807      	ldr	r0, [pc, #28]	; (100fc <gen_instance_throw+0x50>)
   100e0:	f7ff f928 	bl	f334 <mp_obj_new_exception>
   100e4:	4603      	mov	r3, r0
   100e6:	4618      	mov	r0, r3
   100e8:	f7f0 f8fa 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   100ec:	68bb      	ldr	r3, [r7, #8]
    }
}
   100ee:	4618      	mov	r0, r3
   100f0:	3710      	adds	r7, #16
   100f2:	46bd      	mov	sp, r7
   100f4:	bd80      	pop	{r7, pc}
   100f6:	bf00      	nop
   100f8:	00023108 	.word	0x00023108
   100fc:	00021f70 	.word	0x00021f70

00010100 <gen_instance_close>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   10100:	b580      	push	{r7, lr}
   10102:	b084      	sub	sp, #16
   10104:	af00      	add	r7, sp, #0
   10106:	6078      	str	r0, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   10108:	f107 030c 	add.w	r3, r7, #12
   1010c:	4a12      	ldr	r2, [pc, #72]	; (10158 <gen_instance_close+0x58>)
   1010e:	4913      	ldr	r1, [pc, #76]	; (1015c <gen_instance_close+0x5c>)
   10110:	6878      	ldr	r0, [r7, #4]
   10112:	f7ff feb5 	bl	fe80 <mp_obj_gen_resume>
   10116:	4603      	mov	r3, r0
   10118:	2b01      	cmp	r3, #1
   1011a:	d002      	beq.n	10122 <gen_instance_close+0x22>
   1011c:	2b02      	cmp	r3, #2
   1011e:	d004      	beq.n	1012a <gen_instance_close+0x2a>
   10120:	e015      	b.n	1014e <gen_instance_close+0x4e>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
   10122:	490f      	ldr	r1, [pc, #60]	; (10160 <gen_instance_close+0x60>)
   10124:	480f      	ldr	r0, [pc, #60]	; (10164 <gen_instance_close+0x64>)
   10126:	f7fc fe7d 	bl	ce24 <mp_raise_msg>

        // Swallow GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
   1012a:	68fb      	ldr	r3, [r7, #12]
   1012c:	4618      	mov	r0, r3
   1012e:	f7fd fabf 	bl	d6b0 <mp_obj_get_type>
   10132:	4603      	mov	r3, r0
   10134:	490c      	ldr	r1, [pc, #48]	; (10168 <gen_instance_close+0x68>)
   10136:	4618      	mov	r0, r3
   10138:	f007 f81c 	bl	17174 <mp_obj_is_subclass_fast>
   1013c:	4603      	mov	r3, r0
   1013e:	2b00      	cmp	r3, #0
   10140:	d001      	beq.n	10146 <gen_instance_close+0x46>
                return mp_const_none;
   10142:	4b06      	ldr	r3, [pc, #24]	; (1015c <gen_instance_close+0x5c>)
   10144:	e004      	b.n	10150 <gen_instance_close+0x50>
            }
            nlr_raise(ret);
   10146:	68fb      	ldr	r3, [r7, #12]
   10148:	4618      	mov	r0, r3
   1014a:	f7f0 f8c9 	bl	2e0 <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
   1014e:	4b03      	ldr	r3, [pc, #12]	; (1015c <gen_instance_close+0x5c>)
    }
}
   10150:	4618      	mov	r0, r3
   10152:	3710      	adds	r7, #16
   10154:	46bd      	mov	sp, r7
   10156:	bd80      	pop	{r7, pc}
   10158:	00021e2c 	.word	0x00021e2c
   1015c:	00023108 	.word	0x00023108
   10160:	000229ec 	.word	0x000229ec
   10164:	000222b8 	.word	0x000222b8
   10168:	00021ef8 	.word	0x00021ef8

0001016c <gen_instance_pend_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
   1016c:	b580      	push	{r7, lr}
   1016e:	b084      	sub	sp, #16
   10170:	af00      	add	r7, sp, #0
   10172:	6078      	str	r0, [r7, #4]
   10174:	6039      	str	r1, [r7, #0]
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   10176:	687b      	ldr	r3, [r7, #4]
   10178:	60fb      	str	r3, [r7, #12]
    if (self->code_state.sp == self->code_state.state - 1) {
   1017a:	68fb      	ldr	r3, [r7, #12]
   1017c:	691a      	ldr	r2, [r3, #16]
   1017e:	68fb      	ldr	r3, [r7, #12]
   10180:	331c      	adds	r3, #28
   10182:	3b04      	subs	r3, #4
   10184:	429a      	cmp	r2, r3
   10186:	d102      	bne.n	1018e <gen_instance_pend_throw+0x22>
        mp_raise_TypeError("can't pend throw to just-started generator");
   10188:	4807      	ldr	r0, [pc, #28]	; (101a8 <gen_instance_pend_throw+0x3c>)
   1018a:	f7fc fe6d 	bl	ce68 <mp_raise_TypeError>
    }
    mp_obj_t prev = *self->code_state.sp;
   1018e:	68fb      	ldr	r3, [r7, #12]
   10190:	691b      	ldr	r3, [r3, #16]
   10192:	681b      	ldr	r3, [r3, #0]
   10194:	60bb      	str	r3, [r7, #8]
    *self->code_state.sp = exc_in;
   10196:	68fb      	ldr	r3, [r7, #12]
   10198:	691b      	ldr	r3, [r3, #16]
   1019a:	683a      	ldr	r2, [r7, #0]
   1019c:	601a      	str	r2, [r3, #0]
    return prev;
   1019e:	68bb      	ldr	r3, [r7, #8]
}
   101a0:	4618      	mov	r0, r3
   101a2:	3710      	adds	r7, #16
   101a4:	46bd      	mov	sp, r7
   101a6:	bd80      	pop	{r7, pc}
   101a8:	00022a14 	.word	0x00022a14

000101ac <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   101ac:	b580      	push	{r7, lr}
   101ae:	b092      	sub	sp, #72	; 0x48
   101b0:	af00      	add	r7, sp, #0
   101b2:	6078      	str	r0, [r7, #4]
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
   101b4:	687b      	ldr	r3, [r7, #4]
   101b6:	647b      	str	r3, [r7, #68]	; 0x44
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   101b8:	f107 030c 	add.w	r3, r7, #12
   101bc:	4618      	mov	r0, r3
   101be:	f7f0 f87d 	bl	2bc <nlr_push>
   101c2:	4603      	mov	r3, r0
   101c4:	2b00      	cmp	r3, #0
   101c6:	d115      	bne.n	101f4 <it_iternext+0x48>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   101c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   101ca:	3304      	adds	r3, #4
   101cc:	461a      	mov	r2, r3
   101ce:	2100      	movs	r1, #0
   101d0:	2001      	movs	r0, #1
   101d2:	f7fb fdbd 	bl	bd50 <mp_call_method_n_kw>
   101d6:	6438      	str	r0, [r7, #64]	; 0x40
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   101d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   101da:	68db      	ldr	r3, [r3, #12]
   101dc:	105b      	asrs	r3, r3, #1
   101de:	3301      	adds	r3, #1
   101e0:	005b      	lsls	r3, r3, #1
   101e2:	f043 0301 	orr.w	r3, r3, #1
   101e6:	461a      	mov	r2, r3
   101e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   101ea:	60da      	str	r2, [r3, #12]
        nlr_pop();
   101ec:	f7f0 f854 	bl	298 <nlr_pop>
        return value;
   101f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   101f2:	e010      	b.n	10216 <it_iternext+0x6a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
   101f4:	693b      	ldr	r3, [r7, #16]
   101f6:	681b      	ldr	r3, [r3, #0]
   101f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   101fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   101fc:	4a08      	ldr	r2, [pc, #32]	; (10220 <it_iternext+0x74>)
   101fe:	4293      	cmp	r3, r2
   10200:	d003      	beq.n	1020a <it_iternext+0x5e>
   10202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10204:	4a07      	ldr	r2, [pc, #28]	; (10224 <it_iternext+0x78>)
   10206:	4293      	cmp	r3, r2
   10208:	d101      	bne.n	1020e <it_iternext+0x62>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
   1020a:	2304      	movs	r3, #4
   1020c:	e003      	b.n	10216 <it_iternext+0x6a>
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   1020e:	693b      	ldr	r3, [r7, #16]
   10210:	4618      	mov	r0, r3
   10212:	f7f0 f865 	bl	2e0 <nlr_jump>
        }
    }
}
   10216:	4618      	mov	r0, r3
   10218:	3748      	adds	r7, #72	; 0x48
   1021a:	46bd      	mov	sp, r7
   1021c:	bd80      	pop	{r7, pc}
   1021e:	bf00      	nop
   10220:	00021f70 	.word	0x00021f70
   10224:	0002218c 	.word	0x0002218c

00010228 <mp_obj_new_getitem_iter>:
    .getiter = mp_identity_getiter,
    .iternext = it_iternext,
};

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
   10228:	b480      	push	{r7}
   1022a:	b085      	sub	sp, #20
   1022c:	af00      	add	r7, sp, #0
   1022e:	6078      	str	r0, [r7, #4]
   10230:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
   10232:	683b      	ldr	r3, [r7, #0]
   10234:	60fb      	str	r3, [r7, #12]
    o->base.type = &it_type;
   10236:	68fb      	ldr	r3, [r7, #12]
   10238:	4a09      	ldr	r2, [pc, #36]	; (10260 <mp_obj_new_getitem_iter+0x38>)
   1023a:	601a      	str	r2, [r3, #0]
    o->args[0] = args[0];
   1023c:	687b      	ldr	r3, [r7, #4]
   1023e:	681a      	ldr	r2, [r3, #0]
   10240:	68fb      	ldr	r3, [r7, #12]
   10242:	605a      	str	r2, [r3, #4]
    o->args[1] = args[1];
   10244:	687b      	ldr	r3, [r7, #4]
   10246:	685a      	ldr	r2, [r3, #4]
   10248:	68fb      	ldr	r3, [r7, #12]
   1024a:	609a      	str	r2, [r3, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
   1024c:	68fb      	ldr	r3, [r7, #12]
   1024e:	2201      	movs	r2, #1
   10250:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   10252:	68fb      	ldr	r3, [r7, #12]
}
   10254:	4618      	mov	r0, r3
   10256:	3714      	adds	r7, #20
   10258:	46bd      	mov	sp, r7
   1025a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1025e:	4770      	bx	lr
   10260:	00022ac8 	.word	0x00022ac8

00010264 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   10264:	b480      	push	{r7}
   10266:	b083      	sub	sp, #12
   10268:	af00      	add	r7, sp, #0
   1026a:	6078      	str	r0, [r7, #4]
   1026c:	687b      	ldr	r3, [r7, #4]
   1026e:	f003 0301 	and.w	r3, r3, #1
   10272:	2b00      	cmp	r3, #0
   10274:	bf14      	ite	ne
   10276:	2301      	movne	r3, #1
   10278:	2300      	moveq	r3, #0
   1027a:	b2db      	uxtb	r3, r3
   1027c:	4618      	mov	r0, r3
   1027e:	370c      	adds	r7, #12
   10280:	46bd      	mov	sp, r7
   10282:	f85d 7b04 	ldr.w	r7, [sp], #4
   10286:	4770      	bx	lr

00010288 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   10288:	b480      	push	{r7}
   1028a:	b083      	sub	sp, #12
   1028c:	af00      	add	r7, sp, #0
   1028e:	6078      	str	r0, [r7, #4]
   10290:	687b      	ldr	r3, [r7, #4]
   10292:	f003 0303 	and.w	r3, r3, #3
   10296:	2b02      	cmp	r3, #2
   10298:	bf0c      	ite	eq
   1029a:	2301      	moveq	r3, #1
   1029c:	2300      	movne	r3, #0
   1029e:	b2db      	uxtb	r3, r3
   102a0:	4618      	mov	r0, r3
   102a2:	370c      	adds	r7, #12
   102a4:	46bd      	mov	sp, r7
   102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   102aa:	4770      	bx	lr

000102ac <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   102ac:	b480      	push	{r7}
   102ae:	b083      	sub	sp, #12
   102b0:	af00      	add	r7, sp, #0
   102b2:	6078      	str	r0, [r7, #4]
   102b4:	687b      	ldr	r3, [r7, #4]
   102b6:	f003 0303 	and.w	r3, r3, #3
   102ba:	2b00      	cmp	r3, #0
   102bc:	bf0c      	ite	eq
   102be:	2301      	moveq	r3, #1
   102c0:	2300      	movne	r3, #0
   102c2:	b2db      	uxtb	r3, r3
   102c4:	4618      	mov	r0, r3
   102c6:	370c      	adds	r7, #12
   102c8:	46bd      	mov	sp, r7
   102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   102ce:	4770      	bx	lr

000102d0 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   102d0:	b580      	push	{r7, lr}
   102d2:	b084      	sub	sp, #16
   102d4:	af00      	add	r7, sp, #0
   102d6:	60f8      	str	r0, [r7, #12]
   102d8:	60b9      	str	r1, [r7, #8]
   102da:	607a      	str	r2, [r7, #4]
   102dc:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   102de:	687b      	ldr	r3, [r7, #4]
   102e0:	045a      	lsls	r2, r3, #17
   102e2:	683b      	ldr	r3, [r7, #0]
   102e4:	005b      	lsls	r3, r3, #1
   102e6:	431a      	orrs	r2, r3
   102e8:	7e3b      	ldrb	r3, [r7, #24]
   102ea:	2b00      	cmp	r3, #0
   102ec:	d001      	beq.n	102f2 <mp_arg_check_num+0x22>
   102ee:	2301      	movs	r3, #1
   102f0:	e000      	b.n	102f4 <mp_arg_check_num+0x24>
   102f2:	2300      	movs	r3, #0
   102f4:	4313      	orrs	r3, r2
   102f6:	461a      	mov	r2, r3
   102f8:	68b9      	ldr	r1, [r7, #8]
   102fa:	68f8      	ldr	r0, [r7, #12]
   102fc:	f7fc fdda 	bl	ceb4 <mp_arg_check_num_sig>
}
   10300:	bf00      	nop
   10302:	3710      	adds	r7, #16
   10304:	46bd      	mov	sp, r7
   10306:	bd80      	pop	{r7, pc}

00010308 <mp_obj_int_make_new>:
#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

// This dispatcher function is expected to be independent of the implementation of long int
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10308:	b590      	push	{r4, r7, lr}
   1030a:	b08b      	sub	sp, #44	; 0x2c
   1030c:	af02      	add	r7, sp, #8
   1030e:	60f8      	str	r0, [r7, #12]
   10310:	60b9      	str	r1, [r7, #8]
   10312:	607a      	str	r2, [r7, #4]
   10314:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
   10316:	2300      	movs	r3, #0
   10318:	9300      	str	r3, [sp, #0]
   1031a:	2302      	movs	r3, #2
   1031c:	2200      	movs	r2, #0
   1031e:	6879      	ldr	r1, [r7, #4]
   10320:	68b8      	ldr	r0, [r7, #8]
   10322:	f7ff ffd5 	bl	102d0 <mp_arg_check_num>

    switch (n_args) {
   10326:	68bb      	ldr	r3, [r7, #8]
   10328:	2b00      	cmp	r3, #0
   1032a:	d002      	beq.n	10332 <mp_obj_int_make_new+0x2a>
   1032c:	2b01      	cmp	r3, #1
   1032e:	d002      	beq.n	10336 <mp_obj_int_make_new+0x2e>
   10330:	e04a      	b.n	103c8 <mp_obj_int_make_new+0xc0>
        case 0:
            return MP_OBJ_NEW_SMALL_INT(0);
   10332:	2301      	movs	r3, #1
   10334:	e05f      	b.n	103f6 <mp_obj_int_make_new+0xee>

        case 1:
            if (MP_OBJ_IS_INT(args[0])) {
   10336:	683b      	ldr	r3, [r7, #0]
   10338:	681b      	ldr	r3, [r3, #0]
   1033a:	4618      	mov	r0, r3
   1033c:	f7ff ff92 	bl	10264 <MP_OBJ_IS_SMALL_INT>
   10340:	4603      	mov	r3, r0
   10342:	2b00      	cmp	r3, #0
   10344:	d10d      	bne.n	10362 <mp_obj_int_make_new+0x5a>
   10346:	683b      	ldr	r3, [r7, #0]
   10348:	681b      	ldr	r3, [r3, #0]
   1034a:	4618      	mov	r0, r3
   1034c:	f7ff ffae 	bl	102ac <MP_OBJ_IS_OBJ>
   10350:	4603      	mov	r3, r0
   10352:	2b00      	cmp	r3, #0
   10354:	d008      	beq.n	10368 <mp_obj_int_make_new+0x60>
   10356:	683b      	ldr	r3, [r7, #0]
   10358:	681b      	ldr	r3, [r3, #0]
   1035a:	681b      	ldr	r3, [r3, #0]
   1035c:	4a28      	ldr	r2, [pc, #160]	; (10400 <mp_obj_int_make_new+0xf8>)
   1035e:	4293      	cmp	r3, r2
   10360:	d102      	bne.n	10368 <mp_obj_int_make_new+0x60>
                // already an int (small or long), just return it
                return args[0];
   10362:	683b      	ldr	r3, [r7, #0]
   10364:	681b      	ldr	r3, [r3, #0]
   10366:	e046      	b.n	103f6 <mp_obj_int_make_new+0xee>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   10368:	683b      	ldr	r3, [r7, #0]
   1036a:	681b      	ldr	r3, [r3, #0]
   1036c:	4618      	mov	r0, r3
   1036e:	f7ff ff8b 	bl	10288 <MP_OBJ_IS_QSTR>
   10372:	4603      	mov	r3, r0
   10374:	2b00      	cmp	r3, #0
   10376:	d10e      	bne.n	10396 <mp_obj_int_make_new+0x8e>
   10378:	683b      	ldr	r3, [r7, #0]
   1037a:	681b      	ldr	r3, [r3, #0]
   1037c:	4618      	mov	r0, r3
   1037e:	f7ff ff95 	bl	102ac <MP_OBJ_IS_OBJ>
   10382:	4603      	mov	r3, r0
   10384:	2b00      	cmp	r3, #0
   10386:	d017      	beq.n	103b8 <mp_obj_int_make_new+0xb0>
   10388:	683b      	ldr	r3, [r7, #0]
   1038a:	681b      	ldr	r3, [r3, #0]
   1038c:	681b      	ldr	r3, [r3, #0]
   1038e:	699b      	ldr	r3, [r3, #24]
   10390:	4a1c      	ldr	r2, [pc, #112]	; (10404 <mp_obj_int_make_new+0xfc>)
   10392:	4293      	cmp	r3, r2
   10394:	d110      	bne.n	103b8 <mp_obj_int_make_new+0xb0>
                // a string, parse it
                size_t l;
                const char *s = mp_obj_str_get_data(args[0], &l);
   10396:	683b      	ldr	r3, [r7, #0]
   10398:	681b      	ldr	r3, [r3, #0]
   1039a:	f107 0214 	add.w	r2, r7, #20
   1039e:	4611      	mov	r1, r2
   103a0:	4618      	mov	r0, r3
   103a2:	f005 f87f 	bl	154a4 <mp_obj_str_get_data>
   103a6:	61f8      	str	r0, [r7, #28]
                return mp_parse_num_integer(s, l, 0, NULL);
   103a8:	6979      	ldr	r1, [r7, #20]
   103aa:	2300      	movs	r3, #0
   103ac:	2200      	movs	r2, #0
   103ae:	69f8      	ldr	r0, [r7, #28]
   103b0:	f7fa fd74 	bl	ae9c <mp_parse_num_integer>
   103b4:	4603      	mov	r3, r0
   103b6:	e01e      	b.n	103f6 <mp_obj_int_make_new+0xee>
#if MICROPY_PY_BUILTINS_FLOAT
            } else if (mp_obj_is_float(args[0])) {
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
#endif
            } else {
                return mp_unary_op(MP_UNARY_OP_INT, args[0]);
   103b8:	683b      	ldr	r3, [r7, #0]
   103ba:	681b      	ldr	r3, [r3, #0]
   103bc:	4619      	mov	r1, r3
   103be:	2008      	movs	r0, #8
   103c0:	f7fb f91e 	bl	b600 <mp_unary_op>
   103c4:	4603      	mov	r3, r0
   103c6:	e016      	b.n	103f6 <mp_obj_int_make_new+0xee>

        case 2:
        default: {
            // should be a string, parse it
            size_t l;
            const char *s = mp_obj_str_get_data(args[0], &l);
   103c8:	683b      	ldr	r3, [r7, #0]
   103ca:	681b      	ldr	r3, [r3, #0]
   103cc:	f107 0210 	add.w	r2, r7, #16
   103d0:	4611      	mov	r1, r2
   103d2:	4618      	mov	r0, r3
   103d4:	f005 f866 	bl	154a4 <mp_obj_str_get_data>
   103d8:	61b8      	str	r0, [r7, #24]
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
   103da:	693c      	ldr	r4, [r7, #16]
   103dc:	683b      	ldr	r3, [r7, #0]
   103de:	3304      	adds	r3, #4
   103e0:	681b      	ldr	r3, [r3, #0]
   103e2:	4618      	mov	r0, r3
   103e4:	f7fd fb40 	bl	da68 <mp_obj_get_int>
   103e8:	4602      	mov	r2, r0
   103ea:	2300      	movs	r3, #0
   103ec:	4621      	mov	r1, r4
   103ee:	69b8      	ldr	r0, [r7, #24]
   103f0:	f7fa fd54 	bl	ae9c <mp_parse_num_integer>
   103f4:	4603      	mov	r3, r0
        }
    }
}
   103f6:	4618      	mov	r0, r3
   103f8:	3724      	adds	r7, #36	; 0x24
   103fa:	46bd      	mov	sp, r7
   103fc:	bd90      	pop	{r4, r7, pc}
   103fe:	bf00      	nop
   10400:	00022bbc 	.word	0x00022bbc
   10404:	000126f7 	.word	0x000126f7

00010408 <mp_obj_int_print>:
#else
typedef mp_int_t fmt_int_t;
typedef mp_uint_t fmt_uint_t;
#endif

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10408:	b580      	push	{r7, lr}
   1040a:	b090      	sub	sp, #64	; 0x40
   1040c:	af04      	add	r7, sp, #16
   1040e:	60f8      	str	r0, [r7, #12]
   10410:	60b9      	str	r1, [r7, #8]
   10412:	607a      	str	r2, [r7, #4]
    (void)kind;
    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(fmt_int_t) * 4];
    char *buf = stack_buf;
   10414:	f107 031c 	add.w	r3, r7, #28
   10418:	61bb      	str	r3, [r7, #24]
    size_t buf_size = sizeof(stack_buf);
   1041a:	2310      	movs	r3, #16
   1041c:	617b      	str	r3, [r7, #20]
    size_t fmt_size;

    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
   1041e:	f107 0210 	add.w	r2, r7, #16
   10422:	f107 0114 	add.w	r1, r7, #20
   10426:	f107 0018 	add.w	r0, r7, #24
   1042a:	2300      	movs	r3, #0
   1042c:	9303      	str	r3, [sp, #12]
   1042e:	2300      	movs	r3, #0
   10430:	9302      	str	r3, [sp, #8]
   10432:	2300      	movs	r3, #0
   10434:	9301      	str	r3, [sp, #4]
   10436:	230a      	movs	r3, #10
   10438:	9300      	str	r3, [sp, #0]
   1043a:	68bb      	ldr	r3, [r7, #8]
   1043c:	f000 f858 	bl	104f0 <mp_obj_int_formatted>
   10440:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_print_str(print, str);
   10442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10444:	68f8      	ldr	r0, [r7, #12]
   10446:	f7f1 fa3d 	bl	18c4 <mp_print_str>

    if (buf != stack_buf) {
   1044a:	69ba      	ldr	r2, [r7, #24]
   1044c:	f107 031c 	add.w	r3, r7, #28
   10450:	429a      	cmp	r2, r3
   10452:	d003      	beq.n	1045c <mp_obj_int_print+0x54>
        m_del(char, buf, buf_size);
   10454:	69bb      	ldr	r3, [r7, #24]
   10456:	4618      	mov	r0, r3
   10458:	f7ef ffbe 	bl	3d8 <m_free>
    }
}
   1045c:	bf00      	nop
   1045e:	3730      	adds	r7, #48	; 0x30
   10460:	46bd      	mov	sp, r7
   10462:	bd80      	pop	{r7, pc}

00010464 <mp_int_format_size>:
    4, 4, 4, 4,
    4, 4, 4, 5
    */
};

size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
   10464:	b580      	push	{r7, lr}
   10466:	b088      	sub	sp, #32
   10468:	af00      	add	r7, sp, #0
   1046a:	60f8      	str	r0, [r7, #12]
   1046c:	60b9      	str	r1, [r7, #8]
   1046e:	607a      	str	r2, [r7, #4]
   10470:	70fb      	strb	r3, [r7, #3]
    assert(2 <= base && base <= 16);
   10472:	68bb      	ldr	r3, [r7, #8]
   10474:	2b01      	cmp	r3, #1
   10476:	dd02      	ble.n	1047e <mp_int_format_size+0x1a>
   10478:	68bb      	ldr	r3, [r7, #8]
   1047a:	2b10      	cmp	r3, #16
   1047c:	dd05      	ble.n	1048a <mp_int_format_size+0x26>
   1047e:	4b17      	ldr	r3, [pc, #92]	; (104dc <mp_int_format_size+0x78>)
   10480:	4a17      	ldr	r2, [pc, #92]	; (104e0 <mp_int_format_size+0x7c>)
   10482:	21ce      	movs	r1, #206	; 0xce
   10484:	4817      	ldr	r0, [pc, #92]	; (104e4 <mp_int_format_size+0x80>)
   10486:	f00a fffb 	bl	1b480 <__assert_func>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
   1048a:	68bb      	ldr	r3, [r7, #8]
   1048c:	3b01      	subs	r3, #1
   1048e:	4a16      	ldr	r2, [pc, #88]	; (104e8 <mp_int_format_size+0x84>)
   10490:	5cd3      	ldrb	r3, [r2, r3]
   10492:	461a      	mov	r2, r3
   10494:	68fb      	ldr	r3, [r7, #12]
   10496:	fbb3 f3f2 	udiv	r3, r3, r2
   1049a:	3301      	adds	r3, #1
   1049c:	61fb      	str	r3, [r7, #28]
    size_t num_commas = comma ? num_digits / 3 : 0;
   1049e:	78fb      	ldrb	r3, [r7, #3]
   104a0:	2b00      	cmp	r3, #0
   104a2:	d005      	beq.n	104b0 <mp_int_format_size+0x4c>
   104a4:	69fb      	ldr	r3, [r7, #28]
   104a6:	4a11      	ldr	r2, [pc, #68]	; (104ec <mp_int_format_size+0x88>)
   104a8:	fba2 2303 	umull	r2, r3, r2, r3
   104ac:	085b      	lsrs	r3, r3, #1
   104ae:	e000      	b.n	104b2 <mp_int_format_size+0x4e>
   104b0:	2300      	movs	r3, #0
   104b2:	61bb      	str	r3, [r7, #24]
    size_t prefix_len = prefix ? strlen(prefix) : 0;
   104b4:	687b      	ldr	r3, [r7, #4]
   104b6:	2b00      	cmp	r3, #0
   104b8:	d004      	beq.n	104c4 <mp_int_format_size+0x60>
   104ba:	6878      	ldr	r0, [r7, #4]
   104bc:	f00c fc42 	bl	1cd44 <strlen>
   104c0:	4603      	mov	r3, r0
   104c2:	e000      	b.n	104c6 <mp_int_format_size+0x62>
   104c4:	2300      	movs	r3, #0
   104c6:	617b      	str	r3, [r7, #20]
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
   104c8:	69fa      	ldr	r2, [r7, #28]
   104ca:	69bb      	ldr	r3, [r7, #24]
   104cc:	441a      	add	r2, r3
   104ce:	697b      	ldr	r3, [r7, #20]
   104d0:	4413      	add	r3, r2
   104d2:	3302      	adds	r3, #2
}
   104d4:	4618      	mov	r0, r3
   104d6:	3720      	adds	r7, #32
   104d8:	46bd      	mov	sp, r7
   104da:	bd80      	pop	{r7, pc}
   104dc:	00022b14 	.word	0x00022b14
   104e0:	00022bf8 	.word	0x00022bf8
   104e4:	00022b2c 	.word	0x00022b2c
   104e8:	00022b04 	.word	0x00022b04
   104ec:	aaaaaaab 	.word	0xaaaaaaab

000104f0 <mp_obj_int_formatted>:
// is the callers responsibility to free this allocated buffer.
//
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma) {
   104f0:	b580      	push	{r7, lr}
   104f2:	b08e      	sub	sp, #56	; 0x38
   104f4:	af00      	add	r7, sp, #0
   104f6:	60f8      	str	r0, [r7, #12]
   104f8:	60b9      	str	r1, [r7, #8]
   104fa:	607a      	str	r2, [r7, #4]
   104fc:	603b      	str	r3, [r7, #0]
    fmt_int_t num;
    #if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE
    // Only have small ints; get the integer value to format.
    num = MP_OBJ_SMALL_INT_VALUE(self_in);
   104fe:	683b      	ldr	r3, [r7, #0]
   10500:	105b      	asrs	r3, r3, #1
   10502:	637b      	str	r3, [r7, #52]	; 0x34
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
        #endif
    }
    #endif

    char sign = '\0';
   10504:	2300      	movs	r3, #0
   10506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (num < 0) {
   1050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1050c:	2b00      	cmp	r3, #0
   1050e:	da05      	bge.n	1051c <mp_obj_int_formatted+0x2c>
        num = -num;
   10510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10512:	425b      	negs	r3, r3
   10514:	637b      	str	r3, [r7, #52]	; 0x34
        sign = '-';
   10516:	232d      	movs	r3, #45	; 0x2d
   10518:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
   1051c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10522:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10524:	2020      	movs	r0, #32
   10526:	f7ff ff9d 	bl	10464 <mp_int_format_size>
   1052a:	61f8      	str	r0, [r7, #28]
    if (needed_size > *buf_size) {
   1052c:	68bb      	ldr	r3, [r7, #8]
   1052e:	681a      	ldr	r2, [r3, #0]
   10530:	69fb      	ldr	r3, [r7, #28]
   10532:	429a      	cmp	r2, r3
   10534:	d208      	bcs.n	10548 <mp_obj_int_formatted+0x58>
        *buf = m_new(char, needed_size);
   10536:	69f8      	ldr	r0, [r7, #28]
   10538:	f7ef fef0 	bl	31c <m_malloc>
   1053c:	4602      	mov	r2, r0
   1053e:	68fb      	ldr	r3, [r7, #12]
   10540:	601a      	str	r2, [r3, #0]
        *buf_size = needed_size;
   10542:	68bb      	ldr	r3, [r7, #8]
   10544:	69fa      	ldr	r2, [r7, #28]
   10546:	601a      	str	r2, [r3, #0]
    }
    char *str = *buf;
   10548:	68fb      	ldr	r3, [r7, #12]
   1054a:	681b      	ldr	r3, [r3, #0]
   1054c:	61bb      	str	r3, [r7, #24]

    char *b = str + needed_size;
   1054e:	69ba      	ldr	r2, [r7, #24]
   10550:	69fb      	ldr	r3, [r7, #28]
   10552:	4413      	add	r3, r2
   10554:	62fb      	str	r3, [r7, #44]	; 0x2c
    *(--b) = '\0';
   10556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10558:	3b01      	subs	r3, #1
   1055a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1055e:	2200      	movs	r2, #0
   10560:	701a      	strb	r2, [r3, #0]
    char *last_comma = b;
   10562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10564:	62bb      	str	r3, [r7, #40]	; 0x28

    if (num == 0) {
   10566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10568:	2b00      	cmp	r3, #0
   1056a:	d106      	bne.n	1057a <mp_obj_int_formatted+0x8a>
        *(--b) = '0';
   1056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1056e:	3b01      	subs	r3, #1
   10570:	62fb      	str	r3, [r7, #44]	; 0x2c
   10572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10574:	2230      	movs	r2, #48	; 0x30
   10576:	701a      	strb	r2, [r3, #0]
   10578:	e040      	b.n	105fc <mp_obj_int_formatted+0x10c>
    } else {
        do {
            // The cast to fmt_uint_t is because num is positive and we want unsigned arithmetic
            int c = (fmt_uint_t)num % base;
   1057a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1057c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1057e:	fbb3 f1f2 	udiv	r1, r3, r2
   10582:	fb02 f201 	mul.w	r2, r2, r1
   10586:	1a9b      	subs	r3, r3, r2
   10588:	627b      	str	r3, [r7, #36]	; 0x24
            num = (fmt_uint_t)num / base;
   1058a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1058c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1058e:	fbb2 f3f3 	udiv	r3, r2, r3
   10592:	637b      	str	r3, [r7, #52]	; 0x34
            if (c >= 10) {
   10594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10596:	2b09      	cmp	r3, #9
   10598:	dd06      	ble.n	105a8 <mp_obj_int_formatted+0xb8>
                c += base_char - 10;
   1059a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   1059e:	3b0a      	subs	r3, #10
   105a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   105a2:	4413      	add	r3, r2
   105a4:	627b      	str	r3, [r7, #36]	; 0x24
   105a6:	e002      	b.n	105ae <mp_obj_int_formatted+0xbe>
            } else {
                c += '0';
   105a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105aa:	3330      	adds	r3, #48	; 0x30
   105ac:	627b      	str	r3, [r7, #36]	; 0x24
            }
            *(--b) = c;
   105ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105b0:	3b01      	subs	r3, #1
   105b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   105b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105b6:	b2da      	uxtb	r2, r3
   105b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105ba:	701a      	strb	r2, [r3, #0]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
   105bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   105c0:	2b00      	cmp	r3, #0
   105c2:	d014      	beq.n	105ee <mp_obj_int_formatted+0xfe>
   105c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105c6:	2b00      	cmp	r3, #0
   105c8:	d011      	beq.n	105ee <mp_obj_int_formatted+0xfe>
   105ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   105cc:	69bb      	ldr	r3, [r7, #24]
   105ce:	429a      	cmp	r2, r3
   105d0:	d90d      	bls.n	105ee <mp_obj_int_formatted+0xfe>
   105d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105d6:	1ad3      	subs	r3, r2, r3
   105d8:	2b03      	cmp	r3, #3
   105da:	d108      	bne.n	105ee <mp_obj_int_formatted+0xfe>
                *(--b) = comma;
   105dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105de:	3b01      	subs	r3, #1
   105e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   105e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105e4:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   105e8:	701a      	strb	r2, [r3, #0]
                last_comma = b;
   105ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   105ec:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        while (b > str && num != 0);
   105ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   105f0:	69bb      	ldr	r3, [r7, #24]
   105f2:	429a      	cmp	r2, r3
   105f4:	d902      	bls.n	105fc <mp_obj_int_formatted+0x10c>
   105f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   105f8:	2b00      	cmp	r3, #0
   105fa:	d1be      	bne.n	1057a <mp_obj_int_formatted+0x8a>
    }
    if (prefix) {
   105fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   105fe:	2b00      	cmp	r3, #0
   10600:	d01b      	beq.n	1063a <mp_obj_int_formatted+0x14a>
        size_t prefix_len = strlen(prefix);
   10602:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10604:	f00c fb9e 	bl	1cd44 <strlen>
   10608:	6178      	str	r0, [r7, #20]
        char *p = b - prefix_len;
   1060a:	697b      	ldr	r3, [r7, #20]
   1060c:	425b      	negs	r3, r3
   1060e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10610:	4413      	add	r3, r2
   10612:	623b      	str	r3, [r7, #32]
        if (p > str) {
   10614:	6a3a      	ldr	r2, [r7, #32]
   10616:	69bb      	ldr	r3, [r7, #24]
   10618:	429a      	cmp	r2, r3
   1061a:	d90e      	bls.n	1063a <mp_obj_int_formatted+0x14a>
            b = p;
   1061c:	6a3b      	ldr	r3, [r7, #32]
   1061e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (*prefix) {
   10620:	e007      	b.n	10632 <mp_obj_int_formatted+0x142>
                *p++ = *prefix++;
   10622:	6a3b      	ldr	r3, [r7, #32]
   10624:	1c5a      	adds	r2, r3, #1
   10626:	623a      	str	r2, [r7, #32]
   10628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1062a:	1c51      	adds	r1, r2, #1
   1062c:	6479      	str	r1, [r7, #68]	; 0x44
   1062e:	7812      	ldrb	r2, [r2, #0]
   10630:	701a      	strb	r2, [r3, #0]
            while (*prefix) {
   10632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10634:	781b      	ldrb	r3, [r3, #0]
   10636:	2b00      	cmp	r3, #0
   10638:	d1f3      	bne.n	10622 <mp_obj_int_formatted+0x132>
            }
        }
    }
    if (sign && b > str) {
   1063a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1063e:	2b00      	cmp	r3, #0
   10640:	d00a      	beq.n	10658 <mp_obj_int_formatted+0x168>
   10642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10644:	69bb      	ldr	r3, [r7, #24]
   10646:	429a      	cmp	r2, r3
   10648:	d906      	bls.n	10658 <mp_obj_int_formatted+0x168>
        *(--b) = sign;
   1064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1064c:	3b01      	subs	r3, #1
   1064e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10652:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   10656:	701a      	strb	r2, [r3, #0]
    }
    *fmt_size = *buf + needed_size - b - 1;
   10658:	68fb      	ldr	r3, [r7, #12]
   1065a:	681a      	ldr	r2, [r3, #0]
   1065c:	69fb      	ldr	r3, [r7, #28]
   1065e:	4413      	add	r3, r2
   10660:	461a      	mov	r2, r3
   10662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10664:	1ad3      	subs	r3, r2, r3
   10666:	3b01      	subs	r3, #1
   10668:	461a      	mov	r2, r3
   1066a:	687b      	ldr	r3, [r7, #4]
   1066c:	601a      	str	r2, [r3, #0]

    return b;
   1066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   10670:	4618      	mov	r0, r3
   10672:	3738      	adds	r7, #56	; 0x38
   10674:	46bd      	mov	sp, r7
   10676:	bd80      	pop	{r7, pc}

00010678 <mp_obj_int_sign>:

#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

int mp_obj_int_sign(mp_obj_t self_in) {
   10678:	b580      	push	{r7, lr}
   1067a:	b084      	sub	sp, #16
   1067c:	af00      	add	r7, sp, #0
   1067e:	6078      	str	r0, [r7, #4]
    mp_int_t val = mp_obj_get_int(self_in);
   10680:	6878      	ldr	r0, [r7, #4]
   10682:	f7fd f9f1 	bl	da68 <mp_obj_get_int>
   10686:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   10688:	68fb      	ldr	r3, [r7, #12]
   1068a:	2b00      	cmp	r3, #0
   1068c:	da02      	bge.n	10694 <mp_obj_int_sign+0x1c>
        return -1;
   1068e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10692:	e005      	b.n	106a0 <mp_obj_int_sign+0x28>
    } else if (val > 0) {
   10694:	68fb      	ldr	r3, [r7, #12]
   10696:	2b00      	cmp	r3, #0
   10698:	dd01      	ble.n	1069e <mp_obj_int_sign+0x26>
        return 1;
   1069a:	2301      	movs	r3, #1
   1069c:	e000      	b.n	106a0 <mp_obj_int_sign+0x28>
    } else {
        return 0;
   1069e:	2300      	movs	r3, #0
    }
}
   106a0:	4618      	mov	r0, r3
   106a2:	3710      	adds	r7, #16
   106a4:	46bd      	mov	sp, r7
   106a6:	bd80      	pop	{r7, pc}

000106a8 <mp_obj_int_unary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_unary_op
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
   106a8:	b480      	push	{r7}
   106aa:	b083      	sub	sp, #12
   106ac:	af00      	add	r7, sp, #0
   106ae:	6078      	str	r0, [r7, #4]
   106b0:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NULL; // op not supported
   106b2:	2300      	movs	r3, #0
}
   106b4:	4618      	mov	r0, r3
   106b6:	370c      	adds	r7, #12
   106b8:	46bd      	mov	sp, r7
   106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   106be:	4770      	bx	lr

000106c0 <mp_obj_int_binary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_binary_op
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   106c0:	b580      	push	{r7, lr}
   106c2:	b084      	sub	sp, #16
   106c4:	af00      	add	r7, sp, #0
   106c6:	60f8      	str	r0, [r7, #12]
   106c8:	60b9      	str	r1, [r7, #8]
   106ca:	607a      	str	r2, [r7, #4]
    return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
   106cc:	687a      	ldr	r2, [r7, #4]
   106ce:	68b9      	ldr	r1, [r7, #8]
   106d0:	68f8      	ldr	r0, [r7, #12]
   106d2:	f000 f87f 	bl	107d4 <mp_obj_int_binary_op_extra_cases>
   106d6:	4603      	mov	r3, r0
}
   106d8:	4618      	mov	r0, r3
   106da:	3710      	adds	r7, #16
   106dc:	46bd      	mov	sp, r7
   106de:	bd80      	pop	{r7, pc}

000106e0 <mp_obj_new_int_from_str_len>:

// This is called only with strings whose value doesn't fit in SMALL_INT
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
   106e0:	b580      	push	{r7, lr}
   106e2:	b084      	sub	sp, #16
   106e4:	af00      	add	r7, sp, #0
   106e6:	60f8      	str	r0, [r7, #12]
   106e8:	60b9      	str	r1, [r7, #8]
   106ea:	603b      	str	r3, [r7, #0]
   106ec:	4613      	mov	r3, r2
   106ee:	71fb      	strb	r3, [r7, #7]
    mp_raise_msg(&mp_type_OverflowError, "long int not supported in this build");
   106f0:	4901      	ldr	r1, [pc, #4]	; (106f8 <mp_obj_new_int_from_str_len+0x18>)
   106f2:	4802      	ldr	r0, [pc, #8]	; (106fc <mp_obj_new_int_from_str_len+0x1c>)
   106f4:	f7fc fb96 	bl	ce24 <mp_raise_msg>
   106f8:	00022b40 	.word	0x00022b40
   106fc:	00021fe8 	.word	0x00021fe8

00010700 <mp_obj_new_int_from_ll>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ll(long long val) {
   10700:	b580      	push	{r7, lr}
   10702:	b082      	sub	sp, #8
   10704:	af00      	add	r7, sp, #0
   10706:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   1070a:	4902      	ldr	r1, [pc, #8]	; (10714 <mp_obj_new_int_from_ll+0x14>)
   1070c:	4802      	ldr	r0, [pc, #8]	; (10718 <mp_obj_new_int_from_ll+0x18>)
   1070e:	f7fc fb89 	bl	ce24 <mp_raise_msg>
   10712:	bf00      	nop
   10714:	00022b68 	.word	0x00022b68
   10718:	00021fe8 	.word	0x00021fe8

0001071c <mp_obj_new_int_from_ull>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
   1071c:	b580      	push	{r7, lr}
   1071e:	b082      	sub	sp, #8
   10720:	af00      	add	r7, sp, #0
   10722:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10726:	4902      	ldr	r1, [pc, #8]	; (10730 <mp_obj_new_int_from_ull+0x14>)
   10728:	4802      	ldr	r0, [pc, #8]	; (10734 <mp_obj_new_int_from_ull+0x18>)
   1072a:	f7fc fb7b 	bl	ce24 <mp_raise_msg>
   1072e:	bf00      	nop
   10730:	00022b68 	.word	0x00022b68
   10734:	00021fe8 	.word	0x00021fe8

00010738 <mp_obj_new_int_from_uint>:
    return mp_const_none;
}

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
   10738:	b580      	push	{r7, lr}
   1073a:	b082      	sub	sp, #8
   1073c:	af00      	add	r7, sp, #0
   1073e:	6078      	str	r0, [r7, #4]
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
   10740:	687b      	ldr	r3, [r7, #4]
   10742:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
   10746:	2b00      	cmp	r3, #0
   10748:	d104      	bne.n	10754 <mp_obj_new_int_from_uint+0x1c>
        return MP_OBJ_NEW_SMALL_INT(value);
   1074a:	687b      	ldr	r3, [r7, #4]
   1074c:	005b      	lsls	r3, r3, #1
   1074e:	f043 0301 	orr.w	r3, r3, #1
   10752:	e003      	b.n	1075c <mp_obj_new_int_from_uint+0x24>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10754:	4903      	ldr	r1, [pc, #12]	; (10764 <mp_obj_new_int_from_uint+0x2c>)
   10756:	4804      	ldr	r0, [pc, #16]	; (10768 <mp_obj_new_int_from_uint+0x30>)
   10758:	f7fc fb64 	bl	ce24 <mp_raise_msg>
    return mp_const_none;
}
   1075c:	4618      	mov	r0, r3
   1075e:	3708      	adds	r7, #8
   10760:	46bd      	mov	sp, r7
   10762:	bd80      	pop	{r7, pc}
   10764:	00022b68 	.word	0x00022b68
   10768:	00021fe8 	.word	0x00021fe8

0001076c <mp_obj_new_int>:

mp_obj_t mp_obj_new_int(mp_int_t value) {
   1076c:	b580      	push	{r7, lr}
   1076e:	b082      	sub	sp, #8
   10770:	af00      	add	r7, sp, #0
   10772:	6078      	str	r0, [r7, #4]
    if (MP_SMALL_INT_FITS(value)) {
   10774:	687b      	ldr	r3, [r7, #4]
   10776:	005a      	lsls	r2, r3, #1
   10778:	687b      	ldr	r3, [r7, #4]
   1077a:	4053      	eors	r3, r2
   1077c:	2b00      	cmp	r3, #0
   1077e:	db04      	blt.n	1078a <mp_obj_new_int+0x1e>
        return MP_OBJ_NEW_SMALL_INT(value);
   10780:	687b      	ldr	r3, [r7, #4]
   10782:	005b      	lsls	r3, r3, #1
   10784:	f043 0301 	orr.w	r3, r3, #1
   10788:	e003      	b.n	10792 <mp_obj_new_int+0x26>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   1078a:	4904      	ldr	r1, [pc, #16]	; (1079c <mp_obj_new_int+0x30>)
   1078c:	4804      	ldr	r0, [pc, #16]	; (107a0 <mp_obj_new_int+0x34>)
   1078e:	f7fc fb49 	bl	ce24 <mp_raise_msg>
    return mp_const_none;
}
   10792:	4618      	mov	r0, r3
   10794:	3708      	adds	r7, #8
   10796:	46bd      	mov	sp, r7
   10798:	bd80      	pop	{r7, pc}
   1079a:	bf00      	nop
   1079c:	00022b68 	.word	0x00022b68
   107a0:	00021fe8 	.word	0x00021fe8

000107a4 <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
   107a4:	b480      	push	{r7}
   107a6:	b083      	sub	sp, #12
   107a8:	af00      	add	r7, sp, #0
   107aa:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   107ac:	687b      	ldr	r3, [r7, #4]
   107ae:	105b      	asrs	r3, r3, #1
}
   107b0:	4618      	mov	r0, r3
   107b2:	370c      	adds	r7, #12
   107b4:	46bd      	mov	sp, r7
   107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   107ba:	4770      	bx	lr

000107bc <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
   107bc:	b480      	push	{r7}
   107be:	b083      	sub	sp, #12
   107c0:	af00      	add	r7, sp, #0
   107c2:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   107c4:	687b      	ldr	r3, [r7, #4]
   107c6:	105b      	asrs	r3, r3, #1
}
   107c8:	4618      	mov	r0, r3
   107ca:	370c      	adds	r7, #12
   107cc:	46bd      	mov	sp, r7
   107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   107d2:	4770      	bx	lr

000107d4 <mp_obj_int_binary_op_extra_cases>:

#endif // MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

// This dispatcher function is expected to be independent of the implementation of long int
// It handles the extra cases for integer-like arithmetic
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   107d4:	b580      	push	{r7, lr}
   107d6:	b084      	sub	sp, #16
   107d8:	af00      	add	r7, sp, #0
   107da:	60f8      	str	r0, [r7, #12]
   107dc:	60b9      	str	r1, [r7, #8]
   107de:	607a      	str	r2, [r7, #4]
    if (rhs_in == mp_const_false) {
   107e0:	687b      	ldr	r3, [r7, #4]
   107e2:	4a26      	ldr	r2, [pc, #152]	; (1087c <mp_obj_int_binary_op_extra_cases+0xa8>)
   107e4:	4293      	cmp	r3, r2
   107e6:	d106      	bne.n	107f6 <mp_obj_int_binary_op_extra_cases+0x22>
        // false acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
   107e8:	2201      	movs	r2, #1
   107ea:	68b9      	ldr	r1, [r7, #8]
   107ec:	68f8      	ldr	r0, [r7, #12]
   107ee:	f7fa fff7 	bl	b7e0 <mp_binary_op>
   107f2:	4603      	mov	r3, r0
   107f4:	e03d      	b.n	10872 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (rhs_in == mp_const_true) {
   107f6:	687b      	ldr	r3, [r7, #4]
   107f8:	4a21      	ldr	r2, [pc, #132]	; (10880 <mp_obj_int_binary_op_extra_cases+0xac>)
   107fa:	4293      	cmp	r3, r2
   107fc:	d106      	bne.n	1080c <mp_obj_int_binary_op_extra_cases+0x38>
        // true acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
   107fe:	2203      	movs	r2, #3
   10800:	68b9      	ldr	r1, [r7, #8]
   10802:	68f8      	ldr	r0, [r7, #12]
   10804:	f7fa ffec 	bl	b7e0 <mp_binary_op>
   10808:	4603      	mov	r3, r0
   1080a:	e032      	b.n	10872 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
   1080c:	68fb      	ldr	r3, [r7, #12]
   1080e:	2b1c      	cmp	r3, #28
   10810:	d12e      	bne.n	10870 <mp_obj_int_binary_op_extra_cases+0x9c>
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
   10812:	6878      	ldr	r0, [r7, #4]
   10814:	f7ff fd38 	bl	10288 <MP_OBJ_IS_QSTR>
   10818:	4603      	mov	r3, r0
   1081a:	2b00      	cmp	r3, #0
   1081c:	d121      	bne.n	10862 <mp_obj_int_binary_op_extra_cases+0x8e>
   1081e:	6878      	ldr	r0, [r7, #4]
   10820:	f7ff fd44 	bl	102ac <MP_OBJ_IS_OBJ>
   10824:	4603      	mov	r3, r0
   10826:	2b00      	cmp	r3, #0
   10828:	d005      	beq.n	10836 <mp_obj_int_binary_op_extra_cases+0x62>
   1082a:	687b      	ldr	r3, [r7, #4]
   1082c:	681b      	ldr	r3, [r3, #0]
   1082e:	699b      	ldr	r3, [r3, #24]
   10830:	4a14      	ldr	r2, [pc, #80]	; (10884 <mp_obj_int_binary_op_extra_cases+0xb0>)
   10832:	4293      	cmp	r3, r2
   10834:	d015      	beq.n	10862 <mp_obj_int_binary_op_extra_cases+0x8e>
   10836:	6878      	ldr	r0, [r7, #4]
   10838:	f7ff fd38 	bl	102ac <MP_OBJ_IS_OBJ>
   1083c:	4603      	mov	r3, r0
   1083e:	2b00      	cmp	r3, #0
   10840:	d004      	beq.n	1084c <mp_obj_int_binary_op_extra_cases+0x78>
   10842:	687b      	ldr	r3, [r7, #4]
   10844:	681b      	ldr	r3, [r3, #0]
   10846:	4a10      	ldr	r2, [pc, #64]	; (10888 <mp_obj_int_binary_op_extra_cases+0xb4>)
   10848:	4293      	cmp	r3, r2
   1084a:	d00a      	beq.n	10862 <mp_obj_int_binary_op_extra_cases+0x8e>
   1084c:	6878      	ldr	r0, [r7, #4]
   1084e:	f7ff fd2d 	bl	102ac <MP_OBJ_IS_OBJ>
   10852:	4603      	mov	r3, r0
   10854:	2b00      	cmp	r3, #0
   10856:	d00b      	beq.n	10870 <mp_obj_int_binary_op_extra_cases+0x9c>
   10858:	687b      	ldr	r3, [r7, #4]
   1085a:	681b      	ldr	r3, [r3, #0]
   1085c:	4a0b      	ldr	r2, [pc, #44]	; (1088c <mp_obj_int_binary_op_extra_cases+0xb8>)
   1085e:	4293      	cmp	r3, r2
   10860:	d106      	bne.n	10870 <mp_obj_int_binary_op_extra_cases+0x9c>
            // multiply is commutative for these types, so delegate to them
            return mp_binary_op(op, rhs_in, lhs_in);
   10862:	68ba      	ldr	r2, [r7, #8]
   10864:	6879      	ldr	r1, [r7, #4]
   10866:	68f8      	ldr	r0, [r7, #12]
   10868:	f7fa ffba 	bl	b7e0 <mp_binary_op>
   1086c:	4603      	mov	r3, r0
   1086e:	e000      	b.n	10872 <mp_obj_int_binary_op_extra_cases+0x9e>
        }
    }
    return MP_OBJ_NULL; // op not supported
   10870:	2300      	movs	r3, #0
}
   10872:	4618      	mov	r0, r3
   10874:	3710      	adds	r7, #16
   10876:	46bd      	mov	sp, r7
   10878:	bd80      	pop	{r7, pc}
   1087a:	bf00      	nop
   1087c:	00021894 	.word	0x00021894
   10880:	0002189c 	.word	0x0002189c
   10884:	000126f7 	.word	0x000126f7
   10888:	00023a20 	.word	0x00023a20
   1088c:	00022e28 	.word	0x00022e28

00010890 <int_from_bytes>:

// this is a classmethod
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
   10890:	b580      	push	{r7, lr}
   10892:	b08a      	sub	sp, #40	; 0x28
   10894:	af00      	add	r7, sp, #0
   10896:	6078      	str	r0, [r7, #4]
   10898:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False at the moment)
    (void)n_args;

    // get the buffer info
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   1089a:	683b      	ldr	r3, [r7, #0]
   1089c:	3304      	adds	r3, #4
   1089e:	681b      	ldr	r3, [r3, #0]
   108a0:	f107 010c 	add.w	r1, r7, #12
   108a4:	2201      	movs	r2, #1
   108a6:	4618      	mov	r0, r3
   108a8:	f7fd fb12 	bl	ded0 <mp_get_buffer_raise>

    const byte* buf = (const byte*)bufinfo.buf;
   108ac:	68fb      	ldr	r3, [r7, #12]
   108ae:	627b      	str	r3, [r7, #36]	; 0x24
    int delta = 1;
   108b0:	2301      	movs	r3, #1
   108b2:	623b      	str	r3, [r7, #32]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
   108b4:	683b      	ldr	r3, [r7, #0]
   108b6:	3308      	adds	r3, #8
   108b8:	681b      	ldr	r3, [r3, #0]
   108ba:	f240 42c6 	movw	r2, #1222	; 0x4c6
   108be:	4293      	cmp	r3, r2
   108c0:	d107      	bne.n	108d2 <int_from_bytes+0x42>
        buf += bufinfo.len - 1;
   108c2:	693b      	ldr	r3, [r7, #16]
   108c4:	3b01      	subs	r3, #1
   108c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108c8:	4413      	add	r3, r2
   108ca:	627b      	str	r3, [r7, #36]	; 0x24
        delta = -1;
   108cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   108d0:	623b      	str	r3, [r7, #32]
    }

    mp_uint_t value = 0;
   108d2:	2300      	movs	r3, #0
   108d4:	61fb      	str	r3, [r7, #28]
    size_t len = bufinfo.len;
   108d6:	693b      	ldr	r3, [r7, #16]
   108d8:	61bb      	str	r3, [r7, #24]
    for (; len--; buf += delta) {
   108da:	e009      	b.n	108f0 <int_from_bytes+0x60>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
            // Result will overflow a small-int so construct a big-int
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
        }
        #endif
        value = (value << 8) | *buf;
   108dc:	69fb      	ldr	r3, [r7, #28]
   108de:	021b      	lsls	r3, r3, #8
   108e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108e2:	7812      	ldrb	r2, [r2, #0]
   108e4:	4313      	orrs	r3, r2
   108e6:	61fb      	str	r3, [r7, #28]
    for (; len--; buf += delta) {
   108e8:	6a3b      	ldr	r3, [r7, #32]
   108ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108ec:	4413      	add	r3, r2
   108ee:	627b      	str	r3, [r7, #36]	; 0x24
   108f0:	69bb      	ldr	r3, [r7, #24]
   108f2:	1e5a      	subs	r2, r3, #1
   108f4:	61ba      	str	r2, [r7, #24]
   108f6:	2b00      	cmp	r3, #0
   108f8:	d1f0      	bne.n	108dc <int_from_bytes+0x4c>
    }
    return mp_obj_new_int_from_uint(value);
   108fa:	69f8      	ldr	r0, [r7, #28]
   108fc:	f7ff ff1c 	bl	10738 <mp_obj_new_int_from_uint>
   10900:	4603      	mov	r3, r0
}
   10902:	4618      	mov	r0, r3
   10904:	3728      	adds	r7, #40	; 0x28
   10906:	46bd      	mov	sp, r7
   10908:	bd80      	pop	{r7, pc}

0001090a <int_to_bytes>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
   1090a:	b580      	push	{r7, lr}
   1090c:	b08c      	sub	sp, #48	; 0x30
   1090e:	af00      	add	r7, sp, #0
   10910:	6078      	str	r0, [r7, #4]
   10912:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
   10914:	683b      	ldr	r3, [r7, #0]
   10916:	3304      	adds	r3, #4
   10918:	681b      	ldr	r3, [r3, #0]
   1091a:	4618      	mov	r0, r3
   1091c:	f7fd f8a4 	bl	da68 <mp_obj_get_int>
   10920:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len < 0) {
   10922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10924:	2b00      	cmp	r3, #0
   10926:	da02      	bge.n	1092e <int_to_bytes+0x24>
        mp_raise_ValueError(NULL);
   10928:	2000      	movs	r0, #0
   1092a:	f7fc fa92 	bl	ce52 <mp_raise_ValueError>
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
   1092e:	683b      	ldr	r3, [r7, #0]
   10930:	3308      	adds	r3, #8
   10932:	681b      	ldr	r3, [r3, #0]
   10934:	f240 42c6 	movw	r2, #1222	; 0x4c6
   10938:	4293      	cmp	r3, r2
   1093a:	bf14      	ite	ne
   1093c:	2301      	movne	r3, #1
   1093e:	2300      	moveq	r3, #0
   10940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    vstr_t vstr;
    vstr_init_len(&vstr, len);
   10944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10946:	f107 030c 	add.w	r3, r7, #12
   1094a:	4611      	mov	r1, r2
   1094c:	4618      	mov	r0, r3
   1094e:	f7f0 fd22 	bl	1396 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   10952:	697b      	ldr	r3, [r7, #20]
   10954:	627b      	str	r3, [r7, #36]	; 0x24
    memset(data, 0, len);
   10956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10958:	461a      	mov	r2, r3
   1095a:	2100      	movs	r1, #0
   1095c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1095e:	f00c f955 	bl	1cc0c <memset>
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
   10962:	683b      	ldr	r3, [r7, #0]
   10964:	681b      	ldr	r3, [r3, #0]
   10966:	105b      	asrs	r3, r3, #1
   10968:	623b      	str	r3, [r7, #32]
        size_t l = MIN((size_t)len, sizeof(val));
   1096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1096c:	2b04      	cmp	r3, #4
   1096e:	bf28      	it	cs
   10970:	2304      	movcs	r3, #4
   10972:	61fb      	str	r3, [r7, #28]
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
   10974:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10978:	2b00      	cmp	r3, #0
   1097a:	d003      	beq.n	10984 <int_to_bytes+0x7a>
   1097c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1097e:	69fb      	ldr	r3, [r7, #28]
   10980:	1ad3      	subs	r3, r2, r3
   10982:	e000      	b.n	10986 <int_to_bytes+0x7c>
   10984:	2300      	movs	r3, #0
   10986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10988:	441a      	add	r2, r3
   1098a:	6a3b      	ldr	r3, [r7, #32]
   1098c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
   10990:	69f8      	ldr	r0, [r7, #28]
   10992:	f007 fbe0 	bl	18156 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   10996:	f107 030c 	add.w	r3, r7, #12
   1099a:	4619      	mov	r1, r3
   1099c:	4803      	ldr	r0, [pc, #12]	; (109ac <int_to_bytes+0xa2>)
   1099e:	f004 fbc0 	bl	15122 <mp_obj_new_str_from_vstr>
   109a2:	4603      	mov	r3, r0
}
   109a4:	4618      	mov	r0, r3
   109a6:	3730      	adds	r7, #48	; 0x30
   109a8:	46bd      	mov	sp, r7
   109aa:	bd80      	pop	{r7, pc}
   109ac:	000237d8 	.word	0x000237d8

000109b0 <MP_OBJ_IS_OBJ>:
   109b0:	b480      	push	{r7}
   109b2:	b083      	sub	sp, #12
   109b4:	af00      	add	r7, sp, #0
   109b6:	6078      	str	r0, [r7, #4]
   109b8:	687b      	ldr	r3, [r7, #4]
   109ba:	f003 0303 	and.w	r3, r3, #3
   109be:	2b00      	cmp	r3, #0
   109c0:	bf0c      	ite	eq
   109c2:	2301      	moveq	r3, #1
   109c4:	2300      	movne	r3, #0
   109c6:	b2db      	uxtb	r3, r3
   109c8:	4618      	mov	r0, r3
   109ca:	370c      	adds	r7, #12
   109cc:	46bd      	mov	sp, r7
   109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   109d2:	4770      	bx	lr

000109d4 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   109d4:	b480      	push	{r7}
   109d6:	b083      	sub	sp, #12
   109d8:	af00      	add	r7, sp, #0
   109da:	6078      	str	r0, [r7, #4]
   109dc:	687b      	ldr	r3, [r7, #4]
   109de:	2b00      	cmp	r3, #0
   109e0:	d001      	beq.n	109e6 <mp_obj_new_bool+0x12>
   109e2:	4b04      	ldr	r3, [pc, #16]	; (109f4 <mp_obj_new_bool+0x20>)
   109e4:	e000      	b.n	109e8 <mp_obj_new_bool+0x14>
   109e6:	4b04      	ldr	r3, [pc, #16]	; (109f8 <mp_obj_new_bool+0x24>)
   109e8:	4618      	mov	r0, r3
   109ea:	370c      	adds	r7, #12
   109ec:	46bd      	mov	sp, r7
   109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   109f2:	4770      	bx	lr
   109f4:	0002189c 	.word	0x0002189c
   109f8:	00021894 	.word	0x00021894

000109fc <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   109fc:	b580      	push	{r7, lr}
   109fe:	b084      	sub	sp, #16
   10a00:	af00      	add	r7, sp, #0
   10a02:	60f8      	str	r0, [r7, #12]
   10a04:	60b9      	str	r1, [r7, #8]
   10a06:	607a      	str	r2, [r7, #4]
   10a08:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   10a0a:	687b      	ldr	r3, [r7, #4]
   10a0c:	045a      	lsls	r2, r3, #17
   10a0e:	683b      	ldr	r3, [r7, #0]
   10a10:	005b      	lsls	r3, r3, #1
   10a12:	431a      	orrs	r2, r3
   10a14:	7e3b      	ldrb	r3, [r7, #24]
   10a16:	2b00      	cmp	r3, #0
   10a18:	d001      	beq.n	10a1e <mp_arg_check_num+0x22>
   10a1a:	2301      	movs	r3, #1
   10a1c:	e000      	b.n	10a20 <mp_arg_check_num+0x24>
   10a1e:	2300      	movs	r3, #0
   10a20:	4313      	orrs	r3, r2
   10a22:	461a      	mov	r2, r3
   10a24:	68b9      	ldr	r1, [r7, #8]
   10a26:	68f8      	ldr	r0, [r7, #12]
   10a28:	f7fc fa44 	bl	ceb4 <mp_arg_check_num_sig>
}
   10a2c:	bf00      	nop
   10a2e:	3710      	adds	r7, #16
   10a30:	46bd      	mov	sp, r7
   10a32:	bd80      	pop	{r7, pc}

00010a34 <list_print>:
#define LIST_MIN_ALLOC 4

/******************************************************************************/
/* list                                                                       */

STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   10a34:	b580      	push	{r7, lr}
   10a36:	b086      	sub	sp, #24
   10a38:	af00      	add	r7, sp, #0
   10a3a:	60f8      	str	r0, [r7, #12]
   10a3c:	60b9      	str	r1, [r7, #8]
   10a3e:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(o_in);
   10a40:	68bb      	ldr	r3, [r7, #8]
   10a42:	613b      	str	r3, [r7, #16]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
   10a44:	2301      	movs	r3, #1
   10a46:	607b      	str	r3, [r7, #4]
    }
    mp_print_str(print, "[");
   10a48:	4914      	ldr	r1, [pc, #80]	; (10a9c <list_print+0x68>)
   10a4a:	68f8      	ldr	r0, [r7, #12]
   10a4c:	f7f0 ff3a 	bl	18c4 <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   10a50:	2300      	movs	r3, #0
   10a52:	617b      	str	r3, [r7, #20]
   10a54:	e014      	b.n	10a80 <list_print+0x4c>
        if (i > 0) {
   10a56:	697b      	ldr	r3, [r7, #20]
   10a58:	2b00      	cmp	r3, #0
   10a5a:	d003      	beq.n	10a64 <list_print+0x30>
            mp_print_str(print, ", ");
   10a5c:	4910      	ldr	r1, [pc, #64]	; (10aa0 <list_print+0x6c>)
   10a5e:	68f8      	ldr	r0, [r7, #12]
   10a60:	f7f0 ff30 	bl	18c4 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   10a64:	693b      	ldr	r3, [r7, #16]
   10a66:	68da      	ldr	r2, [r3, #12]
   10a68:	697b      	ldr	r3, [r7, #20]
   10a6a:	009b      	lsls	r3, r3, #2
   10a6c:	4413      	add	r3, r2
   10a6e:	681b      	ldr	r3, [r3, #0]
   10a70:	687a      	ldr	r2, [r7, #4]
   10a72:	4619      	mov	r1, r3
   10a74:	68f8      	ldr	r0, [r7, #12]
   10a76:	f7fc fe4c 	bl	d712 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   10a7a:	697b      	ldr	r3, [r7, #20]
   10a7c:	3301      	adds	r3, #1
   10a7e:	617b      	str	r3, [r7, #20]
   10a80:	693b      	ldr	r3, [r7, #16]
   10a82:	689a      	ldr	r2, [r3, #8]
   10a84:	697b      	ldr	r3, [r7, #20]
   10a86:	429a      	cmp	r2, r3
   10a88:	d8e5      	bhi.n	10a56 <list_print+0x22>
    }
    mp_print_str(print, "]");
   10a8a:	4906      	ldr	r1, [pc, #24]	; (10aa4 <list_print+0x70>)
   10a8c:	68f8      	ldr	r0, [r7, #12]
   10a8e:	f7f0 ff19 	bl	18c4 <mp_print_str>
}
   10a92:	bf00      	nop
   10a94:	3718      	adds	r7, #24
   10a96:	46bd      	mov	sp, r7
   10a98:	bd80      	pop	{r7, pc}
   10a9a:	bf00      	nop
   10a9c:	00022c0c 	.word	0x00022c0c
   10aa0:	00022c10 	.word	0x00022c10
   10aa4:	00022c14 	.word	0x00022c14

00010aa8 <list_extend_from_iter>:

STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
   10aa8:	b580      	push	{r7, lr}
   10aaa:	b084      	sub	sp, #16
   10aac:	af00      	add	r7, sp, #0
   10aae:	6078      	str	r0, [r7, #4]
   10ab0:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(iterable, NULL);
   10ab2:	2100      	movs	r1, #0
   10ab4:	6838      	ldr	r0, [r7, #0]
   10ab6:	f7fb fe9d 	bl	c7f4 <mp_getiter>
   10aba:	60f8      	str	r0, [r7, #12]
    mp_obj_t item;
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10abc:	e003      	b.n	10ac6 <list_extend_from_iter+0x1e>
        mp_obj_list_append(list, item);
   10abe:	68b9      	ldr	r1, [r7, #8]
   10ac0:	6878      	ldr	r0, [r7, #4]
   10ac2:	f000 f982 	bl	10dca <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10ac6:	68f8      	ldr	r0, [r7, #12]
   10ac8:	f7fb ff16 	bl	c8f8 <mp_iternext>
   10acc:	60b8      	str	r0, [r7, #8]
   10ace:	68bb      	ldr	r3, [r7, #8]
   10ad0:	2b04      	cmp	r3, #4
   10ad2:	d1f4      	bne.n	10abe <list_extend_from_iter+0x16>
    }
    return list;
   10ad4:	687b      	ldr	r3, [r7, #4]
}
   10ad6:	4618      	mov	r0, r3
   10ad8:	3710      	adds	r7, #16
   10ada:	46bd      	mov	sp, r7
   10adc:	bd80      	pop	{r7, pc}

00010ade <list_make_new>:

STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10ade:	b580      	push	{r7, lr}
   10ae0:	b088      	sub	sp, #32
   10ae2:	af02      	add	r7, sp, #8
   10ae4:	60f8      	str	r0, [r7, #12]
   10ae6:	60b9      	str	r1, [r7, #8]
   10ae8:	607a      	str	r2, [r7, #4]
   10aea:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   10aec:	2300      	movs	r3, #0
   10aee:	9300      	str	r3, [sp, #0]
   10af0:	2301      	movs	r3, #1
   10af2:	2200      	movs	r2, #0
   10af4:	6879      	ldr	r1, [r7, #4]
   10af6:	68b8      	ldr	r0, [r7, #8]
   10af8:	f7ff ff80 	bl	109fc <mp_arg_check_num>

    switch (n_args) {
   10afc:	68bb      	ldr	r3, [r7, #8]
   10afe:	2b00      	cmp	r3, #0
   10b00:	d105      	bne.n	10b0e <list_make_new+0x30>
        case 0:
            // return a new, empty list
            return mp_obj_new_list(0, NULL);
   10b02:	2100      	movs	r1, #0
   10b04:	2000      	movs	r0, #0
   10b06:	f000 fdcc 	bl	116a2 <mp_obj_new_list>
   10b0a:	4603      	mov	r3, r0
   10b0c:	e00b      	b.n	10b26 <list_make_new+0x48>

        case 1:
        default: {
            // make list from iterable
            // TODO: optimize list/tuple
            mp_obj_t list = mp_obj_new_list(0, NULL);
   10b0e:	2100      	movs	r1, #0
   10b10:	2000      	movs	r0, #0
   10b12:	f000 fdc6 	bl	116a2 <mp_obj_new_list>
   10b16:	6178      	str	r0, [r7, #20]
            return list_extend_from_iter(list, args[0]);
   10b18:	683b      	ldr	r3, [r7, #0]
   10b1a:	681b      	ldr	r3, [r3, #0]
   10b1c:	4619      	mov	r1, r3
   10b1e:	6978      	ldr	r0, [r7, #20]
   10b20:	f7ff ffc2 	bl	10aa8 <list_extend_from_iter>
   10b24:	4603      	mov	r3, r0
        }
    }
}
   10b26:	4618      	mov	r0, r3
   10b28:	3718      	adds	r7, #24
   10b2a:	46bd      	mov	sp, r7
   10b2c:	bd80      	pop	{r7, pc}

00010b2e <list_unary_op>:

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   10b2e:	b580      	push	{r7, lr}
   10b30:	b084      	sub	sp, #16
   10b32:	af00      	add	r7, sp, #0
   10b34:	6078      	str	r0, [r7, #4]
   10b36:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10b38:	683b      	ldr	r3, [r7, #0]
   10b3a:	60fb      	str	r3, [r7, #12]
    switch (op) {
   10b3c:	687b      	ldr	r3, [r7, #4]
   10b3e:	2b04      	cmp	r3, #4
   10b40:	d002      	beq.n	10b48 <list_unary_op+0x1a>
   10b42:	2b05      	cmp	r3, #5
   10b44:	d00c      	beq.n	10b60 <list_unary_op+0x32>
   10b46:	e011      	b.n	10b6c <list_unary_op+0x3e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   10b48:	68fb      	ldr	r3, [r7, #12]
   10b4a:	689b      	ldr	r3, [r3, #8]
   10b4c:	2b00      	cmp	r3, #0
   10b4e:	bf14      	ite	ne
   10b50:	2301      	movne	r3, #1
   10b52:	2300      	moveq	r3, #0
   10b54:	b2db      	uxtb	r3, r3
   10b56:	4618      	mov	r0, r3
   10b58:	f7ff ff3c 	bl	109d4 <mp_obj_new_bool>
   10b5c:	4603      	mov	r3, r0
   10b5e:	e006      	b.n	10b6e <list_unary_op+0x40>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   10b60:	68fb      	ldr	r3, [r7, #12]
   10b62:	689b      	ldr	r3, [r3, #8]
   10b64:	005b      	lsls	r3, r3, #1
   10b66:	f043 0301 	orr.w	r3, r3, #1
   10b6a:	e000      	b.n	10b6e <list_unary_op+0x40>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
   10b6c:	2300      	movs	r3, #0
    }
}
   10b6e:	4618      	mov	r0, r3
   10b70:	3710      	adds	r7, #16
   10b72:	46bd      	mov	sp, r7
   10b74:	bd80      	pop	{r7, pc}

00010b76 <list_binary_op>:

STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   10b76:	b580      	push	{r7, lr}
   10b78:	b08e      	sub	sp, #56	; 0x38
   10b7a:	af02      	add	r7, sp, #8
   10b7c:	60f8      	str	r0, [r7, #12]
   10b7e:	60b9      	str	r1, [r7, #8]
   10b80:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(lhs);
   10b82:	68bb      	ldr	r3, [r7, #8]
   10b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (op) {
   10b86:	68fb      	ldr	r3, [r7, #12]
   10b88:	2b1c      	cmp	r3, #28
   10b8a:	f200 80cf 	bhi.w	10d2c <list_binary_op+0x1b6>
   10b8e:	a201      	add	r2, pc, #4	; (adr r2, 10b94 <list_binary_op+0x1e>)
   10b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10b94:	00010cd5 	.word	0x00010cd5
   10b98:	00010cd5 	.word	0x00010cd5
   10b9c:	00010cd5 	.word	0x00010cd5
   10ba0:	00010cd5 	.word	0x00010cd5
   10ba4:	00010cd5 	.word	0x00010cd5
   10ba8:	00010d2d 	.word	0x00010d2d
   10bac:	00010d2d 	.word	0x00010d2d
   10bb0:	00010d2d 	.word	0x00010d2d
   10bb4:	00010d2d 	.word	0x00010d2d
   10bb8:	00010d2d 	.word	0x00010d2d
   10bbc:	00010d2d 	.word	0x00010d2d
   10bc0:	00010d2d 	.word	0x00010d2d
   10bc4:	00010d2d 	.word	0x00010d2d
   10bc8:	00010d2d 	.word	0x00010d2d
   10bcc:	00010c73 	.word	0x00010c73
   10bd0:	00010d2d 	.word	0x00010d2d
   10bd4:	00010d2d 	.word	0x00010d2d
   10bd8:	00010d2d 	.word	0x00010d2d
   10bdc:	00010d2d 	.word	0x00010d2d
   10be0:	00010d2d 	.word	0x00010d2d
   10be4:	00010d2d 	.word	0x00010d2d
   10be8:	00010d2d 	.word	0x00010d2d
   10bec:	00010d2d 	.word	0x00010d2d
   10bf0:	00010d2d 	.word	0x00010d2d
   10bf4:	00010d2d 	.word	0x00010d2d
   10bf8:	00010d2d 	.word	0x00010d2d
   10bfc:	00010c09 	.word	0x00010c09
   10c00:	00010d2d 	.word	0x00010d2d
   10c04:	00010c7f 	.word	0x00010c7f
        case MP_BINARY_OP_ADD: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10c08:	6878      	ldr	r0, [r7, #4]
   10c0a:	f7ff fed1 	bl	109b0 <MP_OBJ_IS_OBJ>
   10c0e:	4603      	mov	r3, r0
   10c10:	f083 0301 	eor.w	r3, r3, #1
   10c14:	b2db      	uxtb	r3, r3
   10c16:	2b00      	cmp	r3, #0
   10c18:	d104      	bne.n	10c24 <list_binary_op+0xae>
   10c1a:	687b      	ldr	r3, [r7, #4]
   10c1c:	681b      	ldr	r3, [r3, #0]
   10c1e:	4a46      	ldr	r2, [pc, #280]	; (10d38 <list_binary_op+0x1c2>)
   10c20:	4293      	cmp	r3, r2
   10c22:	d001      	beq.n	10c28 <list_binary_op+0xb2>
                return MP_OBJ_NULL; // op not supported
   10c24:	2300      	movs	r3, #0
   10c26:	e082      	b.n	10d2e <list_binary_op+0x1b8>
            }
            mp_obj_list_t *p = MP_OBJ_TO_PTR(rhs);
   10c28:	687b      	ldr	r3, [r7, #4]
   10c2a:	62bb      	str	r3, [r7, #40]	; 0x28
            mp_obj_list_t *s = list_new(o->len + p->len);
   10c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c2e:	689a      	ldr	r2, [r3, #8]
   10c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10c32:	689b      	ldr	r3, [r3, #8]
   10c34:	4413      	add	r3, r2
   10c36:	4618      	mov	r0, r3
   10c38:	f000 fd22 	bl	11680 <list_new>
   10c3c:	6278      	str	r0, [r7, #36]	; 0x24
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   10c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10c40:	68d8      	ldr	r0, [r3, #12]
   10c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c44:	68d9      	ldr	r1, [r3, #12]
   10c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c48:	689b      	ldr	r3, [r3, #8]
   10c4a:	009b      	lsls	r3, r3, #2
   10c4c:	461a      	mov	r2, r3
   10c4e:	f00b ff43 	bl	1cad8 <memcpy>
   10c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10c54:	68da      	ldr	r2, [r3, #12]
   10c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10c58:	689b      	ldr	r3, [r3, #8]
   10c5a:	009b      	lsls	r3, r3, #2
   10c5c:	18d0      	adds	r0, r2, r3
   10c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10c60:	68d9      	ldr	r1, [r3, #12]
   10c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10c64:	689b      	ldr	r3, [r3, #8]
   10c66:	009b      	lsls	r3, r3, #2
   10c68:	461a      	mov	r2, r3
   10c6a:	f00b ff35 	bl	1cad8 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   10c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10c70:	e05d      	b.n	10d2e <list_binary_op+0x1b8>
        }
        case MP_BINARY_OP_INPLACE_ADD: {
            list_extend(lhs, rhs);
   10c72:	6879      	ldr	r1, [r7, #4]
   10c74:	68b8      	ldr	r0, [r7, #8]
   10c76:	f000 f905 	bl	10e84 <list_extend>
            return lhs;
   10c7a:	68bb      	ldr	r3, [r7, #8]
   10c7c:	e057      	b.n	10d2e <list_binary_op+0x1b8>
        }
        case MP_BINARY_OP_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   10c7e:	f107 0314 	add.w	r3, r7, #20
   10c82:	4619      	mov	r1, r3
   10c84:	6878      	ldr	r0, [r7, #4]
   10c86:	f7fc ff4f 	bl	db28 <mp_obj_get_int_maybe>
   10c8a:	4603      	mov	r3, r0
   10c8c:	f083 0301 	eor.w	r3, r3, #1
   10c90:	b2db      	uxtb	r3, r3
   10c92:	2b00      	cmp	r3, #0
   10c94:	d001      	beq.n	10c9a <list_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   10c96:	2300      	movs	r3, #0
   10c98:	e049      	b.n	10d2e <list_binary_op+0x1b8>
            }
            if (n < 0) {
   10c9a:	697b      	ldr	r3, [r7, #20]
   10c9c:	2b00      	cmp	r3, #0
   10c9e:	da01      	bge.n	10ca4 <list_binary_op+0x12e>
                n = 0;
   10ca0:	2300      	movs	r3, #0
   10ca2:	617b      	str	r3, [r7, #20]
            }
            mp_obj_list_t *s = list_new(o->len * n);
   10ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ca6:	689b      	ldr	r3, [r3, #8]
   10ca8:	697a      	ldr	r2, [r7, #20]
   10caa:	fb02 f303 	mul.w	r3, r2, r3
   10cae:	4618      	mov	r0, r3
   10cb0:	f000 fce6 	bl	11680 <list_new>
   10cb4:	6238      	str	r0, [r7, #32]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   10cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10cb8:	68d8      	ldr	r0, [r3, #12]
   10cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10cbc:	689a      	ldr	r2, [r3, #8]
   10cbe:	697b      	ldr	r3, [r7, #20]
   10cc0:	4619      	mov	r1, r3
   10cc2:	6a3b      	ldr	r3, [r7, #32]
   10cc4:	68db      	ldr	r3, [r3, #12]
   10cc6:	9300      	str	r3, [sp, #0]
   10cc8:	460b      	mov	r3, r1
   10cca:	2104      	movs	r1, #4
   10ccc:	f006 fca8 	bl	17620 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   10cd0:	6a3b      	ldr	r3, [r7, #32]
   10cd2:	e02c      	b.n	10d2e <list_binary_op+0x1b8>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10cd4:	6878      	ldr	r0, [r7, #4]
   10cd6:	f7ff fe6b 	bl	109b0 <MP_OBJ_IS_OBJ>
   10cda:	4603      	mov	r3, r0
   10cdc:	f083 0301 	eor.w	r3, r3, #1
   10ce0:	b2db      	uxtb	r3, r3
   10ce2:	2b00      	cmp	r3, #0
   10ce4:	d104      	bne.n	10cf0 <list_binary_op+0x17a>
   10ce6:	687b      	ldr	r3, [r7, #4]
   10ce8:	681b      	ldr	r3, [r3, #0]
   10cea:	4a13      	ldr	r2, [pc, #76]	; (10d38 <list_binary_op+0x1c2>)
   10cec:	4293      	cmp	r3, r2
   10cee:	d006      	beq.n	10cfe <list_binary_op+0x188>
                if (op == MP_BINARY_OP_EQUAL) {
   10cf0:	68fb      	ldr	r3, [r7, #12]
   10cf2:	2b02      	cmp	r3, #2
   10cf4:	d101      	bne.n	10cfa <list_binary_op+0x184>
                    return mp_const_false;
   10cf6:	4b11      	ldr	r3, [pc, #68]	; (10d3c <list_binary_op+0x1c6>)
   10cf8:	e019      	b.n	10d2e <list_binary_op+0x1b8>
                }
                return MP_OBJ_NULL; // op not supported
   10cfa:	2300      	movs	r3, #0
   10cfc:	e017      	b.n	10d2e <list_binary_op+0x1b8>
            }

            mp_obj_list_t *another = MP_OBJ_TO_PTR(rhs);
   10cfe:	687b      	ldr	r3, [r7, #4]
   10d00:	61fb      	str	r3, [r7, #28]
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
   10d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d04:	68d9      	ldr	r1, [r3, #12]
   10d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d08:	689a      	ldr	r2, [r3, #8]
   10d0a:	69fb      	ldr	r3, [r7, #28]
   10d0c:	68d8      	ldr	r0, [r3, #12]
   10d0e:	69fb      	ldr	r3, [r7, #28]
   10d10:	689b      	ldr	r3, [r3, #8]
   10d12:	9300      	str	r3, [sp, #0]
   10d14:	4603      	mov	r3, r0
   10d16:	68f8      	ldr	r0, [r7, #12]
   10d18:	f006 fd43 	bl	177a2 <mp_seq_cmp_objs>
   10d1c:	4603      	mov	r3, r0
   10d1e:	76fb      	strb	r3, [r7, #27]
            return mp_obj_new_bool(res);
   10d20:	7efb      	ldrb	r3, [r7, #27]
   10d22:	4618      	mov	r0, r3
   10d24:	f7ff fe56 	bl	109d4 <mp_obj_new_bool>
   10d28:	4603      	mov	r3, r0
   10d2a:	e000      	b.n	10d2e <list_binary_op+0x1b8>
        }

        default:
            return MP_OBJ_NULL; // op not supported
   10d2c:	2300      	movs	r3, #0
    }
}
   10d2e:	4618      	mov	r0, r3
   10d30:	3730      	adds	r7, #48	; 0x30
   10d32:	46bd      	mov	sp, r7
   10d34:	bd80      	pop	{r7, pc}
   10d36:	bf00      	nop
   10d38:	00022e28 	.word	0x00022e28
   10d3c:	00021894 	.word	0x00021894

00010d40 <list_subscr>:

STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   10d40:	b580      	push	{r7, lr}
   10d42:	b088      	sub	sp, #32
   10d44:	af00      	add	r7, sp, #0
   10d46:	60f8      	str	r0, [r7, #12]
   10d48:	60b9      	str	r1, [r7, #8]
   10d4a:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
   10d4c:	687b      	ldr	r3, [r7, #4]
   10d4e:	2b00      	cmp	r3, #0
   10d50:	d10b      	bne.n	10d6a <list_subscr+0x2a>
            mp_seq_clear(self->items, self->len + len_adj, self->len, sizeof(*self->items));
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_t args[2] = {self_in, index};
   10d52:	68fb      	ldr	r3, [r7, #12]
   10d54:	613b      	str	r3, [r7, #16]
   10d56:	68bb      	ldr	r3, [r7, #8]
   10d58:	617b      	str	r3, [r7, #20]
        list_pop(2, args);
   10d5a:	f107 0310 	add.w	r3, r7, #16
   10d5e:	4619      	mov	r1, r3
   10d60:	2002      	movs	r0, #2
   10d62:	f000 f913 	bl	10f8c <list_pop>
        return mp_const_none;
   10d66:	4b10      	ldr	r3, [pc, #64]	; (10da8 <list_subscr+0x68>)
   10d68:	e01a      	b.n	10da0 <list_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
   10d6a:	687b      	ldr	r3, [r7, #4]
   10d6c:	2b08      	cmp	r3, #8
   10d6e:	d111      	bne.n	10d94 <list_subscr+0x54>
        // load
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10d70:	68fb      	ldr	r3, [r7, #12]
   10d72:	61fb      	str	r3, [r7, #28]
            mp_obj_list_t *res = list_new(slice.stop - slice.start);
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
   10d74:	69fb      	ldr	r3, [r7, #28]
   10d76:	6818      	ldr	r0, [r3, #0]
   10d78:	69fb      	ldr	r3, [r7, #28]
   10d7a:	6899      	ldr	r1, [r3, #8]
   10d7c:	2300      	movs	r3, #0
   10d7e:	68ba      	ldr	r2, [r7, #8]
   10d80:	f7fc ff62 	bl	dc48 <mp_get_index>
   10d84:	61b8      	str	r0, [r7, #24]
        return self->items[index_val];
   10d86:	69fb      	ldr	r3, [r7, #28]
   10d88:	68da      	ldr	r2, [r3, #12]
   10d8a:	69bb      	ldr	r3, [r7, #24]
   10d8c:	009b      	lsls	r3, r3, #2
   10d8e:	4413      	add	r3, r2
   10d90:	681b      	ldr	r3, [r3, #0]
   10d92:	e005      	b.n	10da0 <list_subscr+0x60>
            }
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_list_store(self_in, index, value);
   10d94:	687a      	ldr	r2, [r7, #4]
   10d96:	68b9      	ldr	r1, [r7, #8]
   10d98:	68f8      	ldr	r0, [r7, #12]
   10d9a:	f000 fcce 	bl	1173a <mp_obj_list_store>
        return mp_const_none;
   10d9e:	4b02      	ldr	r3, [pc, #8]	; (10da8 <list_subscr+0x68>)
    }
}
   10da0:	4618      	mov	r0, r3
   10da2:	3720      	adds	r7, #32
   10da4:	46bd      	mov	sp, r7
   10da6:	bd80      	pop	{r7, pc}
   10da8:	00023108 	.word	0x00023108

00010dac <list_getiter>:

STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   10dac:	b580      	push	{r7, lr}
   10dae:	b082      	sub	sp, #8
   10db0:	af00      	add	r7, sp, #0
   10db2:	6078      	str	r0, [r7, #4]
   10db4:	6039      	str	r1, [r7, #0]
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
   10db6:	683a      	ldr	r2, [r7, #0]
   10db8:	2100      	movs	r1, #0
   10dba:	6878      	ldr	r0, [r7, #4]
   10dbc:	f000 fcfe 	bl	117bc <mp_obj_new_list_iterator>
   10dc0:	4603      	mov	r3, r0
}
   10dc2:	4618      	mov	r0, r3
   10dc4:	3708      	adds	r7, #8
   10dc6:	46bd      	mov	sp, r7
   10dc8:	bd80      	pop	{r7, pc}

00010dca <mp_obj_list_append>:

mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
   10dca:	b580      	push	{r7, lr}
   10dcc:	b084      	sub	sp, #16
   10dce:	af00      	add	r7, sp, #0
   10dd0:	6078      	str	r0, [r7, #4]
   10dd2:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   10dd4:	6878      	ldr	r0, [r7, #4]
   10dd6:	f7ff fdeb 	bl	109b0 <MP_OBJ_IS_OBJ>
   10dda:	4603      	mov	r3, r0
   10ddc:	2b00      	cmp	r3, #0
   10dde:	d004      	beq.n	10dea <mp_obj_list_append+0x20>
   10de0:	687b      	ldr	r3, [r7, #4]
   10de2:	681b      	ldr	r3, [r3, #0]
   10de4:	4a22      	ldr	r2, [pc, #136]	; (10e70 <mp_obj_list_append+0xa6>)
   10de6:	4293      	cmp	r3, r2
   10de8:	d005      	beq.n	10df6 <mp_obj_list_append+0x2c>
   10dea:	4b22      	ldr	r3, [pc, #136]	; (10e74 <mp_obj_list_append+0xaa>)
   10dec:	4a22      	ldr	r2, [pc, #136]	; (10e78 <mp_obj_list_append+0xae>)
   10dee:	21eb      	movs	r1, #235	; 0xeb
   10df0:	4822      	ldr	r0, [pc, #136]	; (10e7c <mp_obj_list_append+0xb2>)
   10df2:	f00a fb45 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10df6:	687b      	ldr	r3, [r7, #4]
   10df8:	60fb      	str	r3, [r7, #12]
    if (self->len >= self->alloc) {
   10dfa:	68fb      	ldr	r3, [r7, #12]
   10dfc:	689a      	ldr	r2, [r3, #8]
   10dfe:	68fb      	ldr	r3, [r7, #12]
   10e00:	685b      	ldr	r3, [r3, #4]
   10e02:	429a      	cmp	r2, r3
   10e04:	d324      	bcc.n	10e50 <mp_obj_list_append+0x86>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
   10e06:	68fb      	ldr	r3, [r7, #12]
   10e08:	68da      	ldr	r2, [r3, #12]
   10e0a:	68fb      	ldr	r3, [r7, #12]
   10e0c:	685b      	ldr	r3, [r3, #4]
   10e0e:	00db      	lsls	r3, r3, #3
   10e10:	4619      	mov	r1, r3
   10e12:	4610      	mov	r0, r2
   10e14:	f7ef fab4 	bl	380 <m_realloc>
   10e18:	4602      	mov	r2, r0
   10e1a:	68fb      	ldr	r3, [r7, #12]
   10e1c:	60da      	str	r2, [r3, #12]
        self->alloc *= 2;
   10e1e:	68fb      	ldr	r3, [r7, #12]
   10e20:	685b      	ldr	r3, [r3, #4]
   10e22:	005a      	lsls	r2, r3, #1
   10e24:	68fb      	ldr	r3, [r7, #12]
   10e26:	605a      	str	r2, [r3, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
   10e28:	68fb      	ldr	r3, [r7, #12]
   10e2a:	68da      	ldr	r2, [r3, #12]
   10e2c:	68fb      	ldr	r3, [r7, #12]
   10e2e:	689b      	ldr	r3, [r3, #8]
   10e30:	3301      	adds	r3, #1
   10e32:	009b      	lsls	r3, r3, #2
   10e34:	18d0      	adds	r0, r2, r3
   10e36:	68fb      	ldr	r3, [r7, #12]
   10e38:	685a      	ldr	r2, [r3, #4]
   10e3a:	68fb      	ldr	r3, [r7, #12]
   10e3c:	689b      	ldr	r3, [r3, #8]
   10e3e:	1ad3      	subs	r3, r2, r3
   10e40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10e44:	3b01      	subs	r3, #1
   10e46:	009b      	lsls	r3, r3, #2
   10e48:	461a      	mov	r2, r3
   10e4a:	2100      	movs	r1, #0
   10e4c:	f00b fede 	bl	1cc0c <memset>
    }
    self->items[self->len++] = arg;
   10e50:	68fb      	ldr	r3, [r7, #12]
   10e52:	68da      	ldr	r2, [r3, #12]
   10e54:	68fb      	ldr	r3, [r7, #12]
   10e56:	689b      	ldr	r3, [r3, #8]
   10e58:	1c58      	adds	r0, r3, #1
   10e5a:	68f9      	ldr	r1, [r7, #12]
   10e5c:	6088      	str	r0, [r1, #8]
   10e5e:	009b      	lsls	r3, r3, #2
   10e60:	4413      	add	r3, r2
   10e62:	683a      	ldr	r2, [r7, #0]
   10e64:	601a      	str	r2, [r3, #0]
    return mp_const_none; // return None, as per CPython
   10e66:	4b06      	ldr	r3, [pc, #24]	; (10e80 <mp_obj_list_append+0xb6>)
}
   10e68:	4618      	mov	r0, r3
   10e6a:	3710      	adds	r7, #16
   10e6c:	46bd      	mov	sp, r7
   10e6e:	bd80      	pop	{r7, pc}
   10e70:	00022e28 	.word	0x00022e28
   10e74:	00022c18 	.word	0x00022c18
   10e78:	00022e64 	.word	0x00022e64
   10e7c:	00022c74 	.word	0x00022c74
   10e80:	00023108 	.word	0x00023108

00010e84 <list_extend>:

STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
   10e84:	b580      	push	{r7, lr}
   10e86:	b084      	sub	sp, #16
   10e88:	af00      	add	r7, sp, #0
   10e8a:	6078      	str	r0, [r7, #4]
   10e8c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   10e8e:	6878      	ldr	r0, [r7, #4]
   10e90:	f7ff fd8e 	bl	109b0 <MP_OBJ_IS_OBJ>
   10e94:	4603      	mov	r3, r0
   10e96:	2b00      	cmp	r3, #0
   10e98:	d004      	beq.n	10ea4 <list_extend+0x20>
   10e9a:	687b      	ldr	r3, [r7, #4]
   10e9c:	681b      	ldr	r3, [r3, #0]
   10e9e:	4a36      	ldr	r2, [pc, #216]	; (10f78 <list_extend+0xf4>)
   10ea0:	4293      	cmp	r3, r2
   10ea2:	d005      	beq.n	10eb0 <list_extend+0x2c>
   10ea4:	4b35      	ldr	r3, [pc, #212]	; (10f7c <list_extend+0xf8>)
   10ea6:	4a36      	ldr	r2, [pc, #216]	; (10f80 <list_extend+0xfc>)
   10ea8:	21f7      	movs	r1, #247	; 0xf7
   10eaa:	4836      	ldr	r0, [pc, #216]	; (10f84 <list_extend+0x100>)
   10eac:	f00a fae8 	bl	1b480 <__assert_func>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   10eb0:	6838      	ldr	r0, [r7, #0]
   10eb2:	f7ff fd7d 	bl	109b0 <MP_OBJ_IS_OBJ>
   10eb6:	4603      	mov	r3, r0
   10eb8:	2b00      	cmp	r3, #0
   10eba:	d054      	beq.n	10f66 <list_extend+0xe2>
   10ebc:	683b      	ldr	r3, [r7, #0]
   10ebe:	681b      	ldr	r3, [r3, #0]
   10ec0:	4a2d      	ldr	r2, [pc, #180]	; (10f78 <list_extend+0xf4>)
   10ec2:	4293      	cmp	r3, r2
   10ec4:	d14f      	bne.n	10f66 <list_extend+0xe2>
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10ec6:	687b      	ldr	r3, [r7, #4]
   10ec8:	60fb      	str	r3, [r7, #12]
        mp_obj_list_t *arg = MP_OBJ_TO_PTR(arg_in);
   10eca:	683b      	ldr	r3, [r7, #0]
   10ecc:	60bb      	str	r3, [r7, #8]

        if (self->len + arg->len > self->alloc) {
   10ece:	68fb      	ldr	r3, [r7, #12]
   10ed0:	689a      	ldr	r2, [r3, #8]
   10ed2:	68bb      	ldr	r3, [r7, #8]
   10ed4:	689b      	ldr	r3, [r3, #8]
   10ed6:	441a      	add	r2, r3
   10ed8:	68fb      	ldr	r3, [r7, #12]
   10eda:	685b      	ldr	r3, [r3, #4]
   10edc:	429a      	cmp	r2, r3
   10ede:	d92c      	bls.n	10f3a <list_extend+0xb6>
            // TODO: use alloc policy for "4"
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
   10ee0:	68fb      	ldr	r3, [r7, #12]
   10ee2:	68d8      	ldr	r0, [r3, #12]
   10ee4:	68fb      	ldr	r3, [r7, #12]
   10ee6:	689a      	ldr	r2, [r3, #8]
   10ee8:	68bb      	ldr	r3, [r7, #8]
   10eea:	689b      	ldr	r3, [r3, #8]
   10eec:	4413      	add	r3, r2
   10eee:	3304      	adds	r3, #4
   10ef0:	009b      	lsls	r3, r3, #2
   10ef2:	4619      	mov	r1, r3
   10ef4:	f7ef fa44 	bl	380 <m_realloc>
   10ef8:	4602      	mov	r2, r0
   10efa:	68fb      	ldr	r3, [r7, #12]
   10efc:	60da      	str	r2, [r3, #12]
            self->alloc = self->len + arg->len + 4;
   10efe:	68fb      	ldr	r3, [r7, #12]
   10f00:	689a      	ldr	r2, [r3, #8]
   10f02:	68bb      	ldr	r3, [r7, #8]
   10f04:	689b      	ldr	r3, [r3, #8]
   10f06:	4413      	add	r3, r2
   10f08:	1d1a      	adds	r2, r3, #4
   10f0a:	68fb      	ldr	r3, [r7, #12]
   10f0c:	605a      	str	r2, [r3, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
   10f0e:	68fb      	ldr	r3, [r7, #12]
   10f10:	68da      	ldr	r2, [r3, #12]
   10f12:	68fb      	ldr	r3, [r7, #12]
   10f14:	6899      	ldr	r1, [r3, #8]
   10f16:	68bb      	ldr	r3, [r7, #8]
   10f18:	689b      	ldr	r3, [r3, #8]
   10f1a:	440b      	add	r3, r1
   10f1c:	009b      	lsls	r3, r3, #2
   10f1e:	18d0      	adds	r0, r2, r3
   10f20:	68fb      	ldr	r3, [r7, #12]
   10f22:	685a      	ldr	r2, [r3, #4]
   10f24:	68fb      	ldr	r3, [r7, #12]
   10f26:	6899      	ldr	r1, [r3, #8]
   10f28:	68bb      	ldr	r3, [r7, #8]
   10f2a:	689b      	ldr	r3, [r3, #8]
   10f2c:	440b      	add	r3, r1
   10f2e:	1ad3      	subs	r3, r2, r3
   10f30:	009b      	lsls	r3, r3, #2
   10f32:	461a      	mov	r2, r3
   10f34:	2100      	movs	r1, #0
   10f36:	f00b fe69 	bl	1cc0c <memset>
        }

        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
   10f3a:	68fb      	ldr	r3, [r7, #12]
   10f3c:	68da      	ldr	r2, [r3, #12]
   10f3e:	68fb      	ldr	r3, [r7, #12]
   10f40:	689b      	ldr	r3, [r3, #8]
   10f42:	009b      	lsls	r3, r3, #2
   10f44:	18d0      	adds	r0, r2, r3
   10f46:	68bb      	ldr	r3, [r7, #8]
   10f48:	68d9      	ldr	r1, [r3, #12]
   10f4a:	68bb      	ldr	r3, [r7, #8]
   10f4c:	689b      	ldr	r3, [r3, #8]
   10f4e:	009b      	lsls	r3, r3, #2
   10f50:	461a      	mov	r2, r3
   10f52:	f00b fdc1 	bl	1cad8 <memcpy>
        self->len += arg->len;
   10f56:	68fb      	ldr	r3, [r7, #12]
   10f58:	689a      	ldr	r2, [r3, #8]
   10f5a:	68bb      	ldr	r3, [r7, #8]
   10f5c:	689b      	ldr	r3, [r3, #8]
   10f5e:	441a      	add	r2, r3
   10f60:	68fb      	ldr	r3, [r7, #12]
   10f62:	609a      	str	r2, [r3, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   10f64:	e003      	b.n	10f6e <list_extend+0xea>
    } else {
        list_extend_from_iter(self_in, arg_in);
   10f66:	6839      	ldr	r1, [r7, #0]
   10f68:	6878      	ldr	r0, [r7, #4]
   10f6a:	f7ff fd9d 	bl	10aa8 <list_extend_from_iter>
    }
    return mp_const_none; // return None, as per CPython
   10f6e:	4b06      	ldr	r3, [pc, #24]	; (10f88 <list_extend+0x104>)
}
   10f70:	4618      	mov	r0, r3
   10f72:	3710      	adds	r7, #16
   10f74:	46bd      	mov	sp, r7
   10f76:	bd80      	pop	{r7, pc}
   10f78:	00022e28 	.word	0x00022e28
   10f7c:	00022c18 	.word	0x00022c18
   10f80:	00022e78 	.word	0x00022e78
   10f84:	00022c74 	.word	0x00022c74
   10f88:	00023108 	.word	0x00023108

00010f8c <list_pop>:

STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
   10f8c:	b580      	push	{r7, lr}
   10f8e:	b086      	sub	sp, #24
   10f90:	af00      	add	r7, sp, #0
   10f92:	6078      	str	r0, [r7, #4]
   10f94:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   10f96:	683b      	ldr	r3, [r7, #0]
   10f98:	681b      	ldr	r3, [r3, #0]
   10f9a:	4618      	mov	r0, r3
   10f9c:	f7ff fd08 	bl	109b0 <MP_OBJ_IS_OBJ>
   10fa0:	4603      	mov	r3, r0
   10fa2:	2b00      	cmp	r3, #0
   10fa4:	d005      	beq.n	10fb2 <list_pop+0x26>
   10fa6:	683b      	ldr	r3, [r7, #0]
   10fa8:	681b      	ldr	r3, [r3, #0]
   10faa:	681b      	ldr	r3, [r3, #0]
   10fac:	4a36      	ldr	r2, [pc, #216]	; (11088 <list_pop+0xfc>)
   10fae:	4293      	cmp	r3, r2
   10fb0:	d006      	beq.n	10fc0 <list_pop+0x34>
   10fb2:	4b36      	ldr	r3, [pc, #216]	; (1108c <list_pop+0x100>)
   10fb4:	4a36      	ldr	r2, [pc, #216]	; (11090 <list_pop+0x104>)
   10fb6:	f44f 7186 	mov.w	r1, #268	; 0x10c
   10fba:	4836      	ldr	r0, [pc, #216]	; (11094 <list_pop+0x108>)
   10fbc:	f00a fa60 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   10fc0:	683b      	ldr	r3, [r7, #0]
   10fc2:	681b      	ldr	r3, [r3, #0]
   10fc4:	617b      	str	r3, [r7, #20]
    if (self->len == 0) {
   10fc6:	697b      	ldr	r3, [r7, #20]
   10fc8:	689b      	ldr	r3, [r3, #8]
   10fca:	2b00      	cmp	r3, #0
   10fcc:	d103      	bne.n	10fd6 <list_pop+0x4a>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
   10fce:	4932      	ldr	r1, [pc, #200]	; (11098 <list_pop+0x10c>)
   10fd0:	4832      	ldr	r0, [pc, #200]	; (1109c <list_pop+0x110>)
   10fd2:	f7fb ff27 	bl	ce24 <mp_raise_msg>
    }
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
   10fd6:	697b      	ldr	r3, [r7, #20]
   10fd8:	6818      	ldr	r0, [r3, #0]
   10fda:	697b      	ldr	r3, [r7, #20]
   10fdc:	6899      	ldr	r1, [r3, #8]
   10fde:	687b      	ldr	r3, [r7, #4]
   10fe0:	2b01      	cmp	r3, #1
   10fe2:	d002      	beq.n	10fea <list_pop+0x5e>
   10fe4:	683b      	ldr	r3, [r7, #0]
   10fe6:	685a      	ldr	r2, [r3, #4]
   10fe8:	e001      	b.n	10fee <list_pop+0x62>
   10fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10fee:	2300      	movs	r3, #0
   10ff0:	f7fc fe2a 	bl	dc48 <mp_get_index>
   10ff4:	6138      	str	r0, [r7, #16]
    mp_obj_t ret = self->items[index];
   10ff6:	697b      	ldr	r3, [r7, #20]
   10ff8:	68da      	ldr	r2, [r3, #12]
   10ffa:	693b      	ldr	r3, [r7, #16]
   10ffc:	009b      	lsls	r3, r3, #2
   10ffe:	4413      	add	r3, r2
   11000:	681b      	ldr	r3, [r3, #0]
   11002:	60fb      	str	r3, [r7, #12]
    self->len -= 1;
   11004:	697b      	ldr	r3, [r7, #20]
   11006:	689b      	ldr	r3, [r3, #8]
   11008:	1e5a      	subs	r2, r3, #1
   1100a:	697b      	ldr	r3, [r7, #20]
   1100c:	609a      	str	r2, [r3, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
   1100e:	697b      	ldr	r3, [r7, #20]
   11010:	68da      	ldr	r2, [r3, #12]
   11012:	693b      	ldr	r3, [r7, #16]
   11014:	009b      	lsls	r3, r3, #2
   11016:	18d0      	adds	r0, r2, r3
   11018:	697b      	ldr	r3, [r7, #20]
   1101a:	68da      	ldr	r2, [r3, #12]
   1101c:	693b      	ldr	r3, [r7, #16]
   1101e:	3301      	adds	r3, #1
   11020:	009b      	lsls	r3, r3, #2
   11022:	18d1      	adds	r1, r2, r3
   11024:	697b      	ldr	r3, [r7, #20]
   11026:	689a      	ldr	r2, [r3, #8]
   11028:	693b      	ldr	r3, [r7, #16]
   1102a:	1ad3      	subs	r3, r2, r3
   1102c:	009b      	lsls	r3, r3, #2
   1102e:	461a      	mov	r2, r3
   11030:	f00b fdb7 	bl	1cba2 <memmove>
    // Clear stale pointer from slot which just got freed to prevent GC issues
    self->items[self->len] = MP_OBJ_NULL;
   11034:	697b      	ldr	r3, [r7, #20]
   11036:	68da      	ldr	r2, [r3, #12]
   11038:	697b      	ldr	r3, [r7, #20]
   1103a:	689b      	ldr	r3, [r3, #8]
   1103c:	009b      	lsls	r3, r3, #2
   1103e:	4413      	add	r3, r2
   11040:	2200      	movs	r2, #0
   11042:	601a      	str	r2, [r3, #0]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
   11044:	697b      	ldr	r3, [r7, #20]
   11046:	685b      	ldr	r3, [r3, #4]
   11048:	2b04      	cmp	r3, #4
   1104a:	d918      	bls.n	1107e <list_pop+0xf2>
   1104c:	697b      	ldr	r3, [r7, #20]
   1104e:	685a      	ldr	r2, [r3, #4]
   11050:	697b      	ldr	r3, [r7, #20]
   11052:	689b      	ldr	r3, [r3, #8]
   11054:	005b      	lsls	r3, r3, #1
   11056:	429a      	cmp	r2, r3
   11058:	d911      	bls.n	1107e <list_pop+0xf2>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
   1105a:	697b      	ldr	r3, [r7, #20]
   1105c:	68da      	ldr	r2, [r3, #12]
   1105e:	697b      	ldr	r3, [r7, #20]
   11060:	685b      	ldr	r3, [r3, #4]
   11062:	085b      	lsrs	r3, r3, #1
   11064:	009b      	lsls	r3, r3, #2
   11066:	4619      	mov	r1, r3
   11068:	4610      	mov	r0, r2
   1106a:	f7ef f989 	bl	380 <m_realloc>
   1106e:	4602      	mov	r2, r0
   11070:	697b      	ldr	r3, [r7, #20]
   11072:	60da      	str	r2, [r3, #12]
        self->alloc /= 2;
   11074:	697b      	ldr	r3, [r7, #20]
   11076:	685b      	ldr	r3, [r3, #4]
   11078:	085a      	lsrs	r2, r3, #1
   1107a:	697b      	ldr	r3, [r7, #20]
   1107c:	605a      	str	r2, [r3, #4]
    }
    return ret;
   1107e:	68fb      	ldr	r3, [r7, #12]
}
   11080:	4618      	mov	r0, r3
   11082:	3718      	adds	r7, #24
   11084:	46bd      	mov	sp, r7
   11086:	bd80      	pop	{r7, pc}
   11088:	00022e28 	.word	0x00022e28
   1108c:	00022c88 	.word	0x00022c88
   11090:	00022e84 	.word	0x00022e84
   11094:	00022c74 	.word	0x00022c74
   11098:	00022ce4 	.word	0x00022ce4
   1109c:	0002218c 	.word	0x0002218c

000110a0 <mp_quicksort>:

STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
   110a0:	b580      	push	{r7, lr}
   110a2:	b08a      	sub	sp, #40	; 0x28
   110a4:	af00      	add	r7, sp, #0
   110a6:	60f8      	str	r0, [r7, #12]
   110a8:	60b9      	str	r1, [r7, #8]
   110aa:	607a      	str	r2, [r7, #4]
   110ac:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    while (head < tail) {
   110ae:	e085      	b.n	111bc <mp_quicksort+0x11c>
        mp_obj_t *h = head - 1;
   110b0:	68fb      	ldr	r3, [r7, #12]
   110b2:	3b04      	subs	r3, #4
   110b4:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_t *t = tail;
   110b6:	68bb      	ldr	r3, [r7, #8]
   110b8:	623b      	str	r3, [r7, #32]
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
   110ba:	687b      	ldr	r3, [r7, #4]
   110bc:	2b00      	cmp	r3, #0
   110be:	d102      	bne.n	110c6 <mp_quicksort+0x26>
   110c0:	68bb      	ldr	r3, [r7, #8]
   110c2:	681b      	ldr	r3, [r3, #0]
   110c4:	e006      	b.n	110d4 <mp_quicksort+0x34>
   110c6:	68bb      	ldr	r3, [r7, #8]
   110c8:	681b      	ldr	r3, [r3, #0]
   110ca:	4619      	mov	r1, r3
   110cc:	6878      	ldr	r0, [r7, #4]
   110ce:	f7fa fdf8 	bl	bcc2 <mp_call_function_1>
   110d2:	4603      	mov	r3, r0
   110d4:	61fb      	str	r3, [r7, #28]
        for (;;) {
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
   110d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110d8:	3304      	adds	r3, #4
   110da:	627b      	str	r3, [r7, #36]	; 0x24
   110dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   110de:	6a3b      	ldr	r3, [r7, #32]
   110e0:	429a      	cmp	r2, r3
   110e2:	d215      	bcs.n	11110 <mp_quicksort+0x70>
   110e4:	687b      	ldr	r3, [r7, #4]
   110e6:	2b00      	cmp	r3, #0
   110e8:	d102      	bne.n	110f0 <mp_quicksort+0x50>
   110ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110ec:	681b      	ldr	r3, [r3, #0]
   110ee:	e006      	b.n	110fe <mp_quicksort+0x5e>
   110f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110f2:	681b      	ldr	r3, [r3, #0]
   110f4:	4619      	mov	r1, r3
   110f6:	6878      	ldr	r0, [r7, #4]
   110f8:	f7fa fde3 	bl	bcc2 <mp_call_function_1>
   110fc:	4603      	mov	r3, r0
   110fe:	69fa      	ldr	r2, [r7, #28]
   11100:	4619      	mov	r1, r3
   11102:	2000      	movs	r0, #0
   11104:	f7fa fb6c 	bl	b7e0 <mp_binary_op>
   11108:	4602      	mov	r2, r0
   1110a:	683b      	ldr	r3, [r7, #0]
   1110c:	429a      	cmp	r2, r3
   1110e:	d0e2      	beq.n	110d6 <mp_quicksort+0x36>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
   11110:	6a3b      	ldr	r3, [r7, #32]
   11112:	3b04      	subs	r3, #4
   11114:	623b      	str	r3, [r7, #32]
   11116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11118:	6a3b      	ldr	r3, [r7, #32]
   1111a:	429a      	cmp	r2, r3
   1111c:	d215      	bcs.n	1114a <mp_quicksort+0xaa>
   1111e:	687b      	ldr	r3, [r7, #4]
   11120:	2b00      	cmp	r3, #0
   11122:	d102      	bne.n	1112a <mp_quicksort+0x8a>
   11124:	6a3b      	ldr	r3, [r7, #32]
   11126:	681b      	ldr	r3, [r3, #0]
   11128:	e006      	b.n	11138 <mp_quicksort+0x98>
   1112a:	6a3b      	ldr	r3, [r7, #32]
   1112c:	681b      	ldr	r3, [r3, #0]
   1112e:	4619      	mov	r1, r3
   11130:	6878      	ldr	r0, [r7, #4]
   11132:	f7fa fdc6 	bl	bcc2 <mp_call_function_1>
   11136:	4603      	mov	r3, r0
   11138:	461a      	mov	r2, r3
   1113a:	69f9      	ldr	r1, [r7, #28]
   1113c:	2000      	movs	r0, #0
   1113e:	f7fa fb4f 	bl	b7e0 <mp_binary_op>
   11142:	4602      	mov	r2, r0
   11144:	683b      	ldr	r3, [r7, #0]
   11146:	429a      	cmp	r2, r3
   11148:	d0e2      	beq.n	11110 <mp_quicksort+0x70>
            if (h >= t) break;
   1114a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1114c:	6a3b      	ldr	r3, [r7, #32]
   1114e:	429a      	cmp	r2, r3
   11150:	d20a      	bcs.n	11168 <mp_quicksort+0xc8>
            mp_obj_t x = h[0];
   11152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11154:	681b      	ldr	r3, [r3, #0]
   11156:	61bb      	str	r3, [r7, #24]
            h[0] = t[0];
   11158:	6a3b      	ldr	r3, [r7, #32]
   1115a:	681a      	ldr	r2, [r3, #0]
   1115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1115e:	601a      	str	r2, [r3, #0]
            t[0] = x;
   11160:	6a3b      	ldr	r3, [r7, #32]
   11162:	69ba      	ldr	r2, [r7, #24]
   11164:	601a      	str	r2, [r3, #0]
        for (;;) {
   11166:	e7b6      	b.n	110d6 <mp_quicksort+0x36>
            if (h >= t) break;
   11168:	bf00      	nop
        }
        mp_obj_t x = h[0];
   1116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1116c:	681b      	ldr	r3, [r3, #0]
   1116e:	617b      	str	r3, [r7, #20]
        h[0] = tail[0];
   11170:	68bb      	ldr	r3, [r7, #8]
   11172:	681a      	ldr	r2, [r3, #0]
   11174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11176:	601a      	str	r2, [r3, #0]
        tail[0] = x;
   11178:	68bb      	ldr	r3, [r7, #8]
   1117a:	697a      	ldr	r2, [r7, #20]
   1117c:	601a      	str	r2, [r3, #0]
        // do the smaller recursive call first, to keep stack within O(log(N))
        if (t - head < tail - h - 1) {
   1117e:	6a3a      	ldr	r2, [r7, #32]
   11180:	68fb      	ldr	r3, [r7, #12]
   11182:	1ad3      	subs	r3, r2, r3
   11184:	109b      	asrs	r3, r3, #2
   11186:	4619      	mov	r1, r3
   11188:	68ba      	ldr	r2, [r7, #8]
   1118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1118c:	1ad3      	subs	r3, r2, r3
   1118e:	109b      	asrs	r3, r3, #2
   11190:	3b01      	subs	r3, #1
   11192:	4299      	cmp	r1, r3
   11194:	da09      	bge.n	111aa <mp_quicksort+0x10a>
            mp_quicksort(head, t, key_fn, binop_less_result);
   11196:	683b      	ldr	r3, [r7, #0]
   11198:	687a      	ldr	r2, [r7, #4]
   1119a:	6a39      	ldr	r1, [r7, #32]
   1119c:	68f8      	ldr	r0, [r7, #12]
   1119e:	f7ff ff7f 	bl	110a0 <mp_quicksort>
            head = h + 1;
   111a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111a4:	3304      	adds	r3, #4
   111a6:	60fb      	str	r3, [r7, #12]
   111a8:	e008      	b.n	111bc <mp_quicksort+0x11c>
        } else {
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
   111aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111ac:	1d18      	adds	r0, r3, #4
   111ae:	683b      	ldr	r3, [r7, #0]
   111b0:	687a      	ldr	r2, [r7, #4]
   111b2:	68b9      	ldr	r1, [r7, #8]
   111b4:	f7ff ff74 	bl	110a0 <mp_quicksort>
            tail = t;
   111b8:	6a3b      	ldr	r3, [r7, #32]
   111ba:	60bb      	str	r3, [r7, #8]
    while (head < tail) {
   111bc:	68fa      	ldr	r2, [r7, #12]
   111be:	68bb      	ldr	r3, [r7, #8]
   111c0:	429a      	cmp	r2, r3
   111c2:	f4ff af75 	bcc.w	110b0 <mp_quicksort+0x10>
        }
    }
}
   111c6:	bf00      	nop
   111c8:	3728      	adds	r7, #40	; 0x28
   111ca:	46bd      	mov	sp, r7
   111cc:	bd80      	pop	{r7, pc}

000111ce <mp_obj_list_sort>:

// TODO Python defines sort to be stable but ours is not
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   111ce:	b580      	push	{r7, lr}
   111d0:	b08a      	sub	sp, #40	; 0x28
   111d2:	af02      	add	r7, sp, #8
   111d4:	60f8      	str	r0, [r7, #12]
   111d6:	60b9      	str	r1, [r7, #8]
   111d8:	607a      	str	r2, [r7, #4]

    // parse args
    struct {
        mp_arg_val_t key, reverse;
    } args;
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
   111da:	68fb      	ldr	r3, [r7, #12]
   111dc:	1e58      	subs	r0, r3, #1
   111de:	68bb      	ldr	r3, [r7, #8]
   111e0:	1d19      	adds	r1, r3, #4
   111e2:	f107 0314 	add.w	r3, r7, #20
   111e6:	9301      	str	r3, [sp, #4]
   111e8:	4b20      	ldr	r3, [pc, #128]	; (1126c <mp_obj_list_sort+0x9e>)
   111ea:	9300      	str	r3, [sp, #0]
   111ec:	2302      	movs	r3, #2
   111ee:	687a      	ldr	r2, [r7, #4]
   111f0:	f7fb fe9a 	bl	cf28 <mp_arg_parse_all>
        MP_ARRAY_SIZE(allowed_args), allowed_args, (mp_arg_val_t*)&args);

    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
   111f4:	68bb      	ldr	r3, [r7, #8]
   111f6:	681b      	ldr	r3, [r3, #0]
   111f8:	4618      	mov	r0, r3
   111fa:	f7ff fbd9 	bl	109b0 <MP_OBJ_IS_OBJ>
   111fe:	4603      	mov	r3, r0
   11200:	2b00      	cmp	r3, #0
   11202:	d005      	beq.n	11210 <mp_obj_list_sort+0x42>
   11204:	68bb      	ldr	r3, [r7, #8]
   11206:	681b      	ldr	r3, [r3, #0]
   11208:	681b      	ldr	r3, [r3, #0]
   1120a:	4a19      	ldr	r2, [pc, #100]	; (11270 <mp_obj_list_sort+0xa2>)
   1120c:	4293      	cmp	r3, r2
   1120e:	d006      	beq.n	1121e <mp_obj_list_sort+0x50>
   11210:	4b18      	ldr	r3, [pc, #96]	; (11274 <mp_obj_list_sort+0xa6>)
   11212:	4a19      	ldr	r2, [pc, #100]	; (11278 <mp_obj_list_sort+0xaa>)
   11214:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11218:	4818      	ldr	r0, [pc, #96]	; (1127c <mp_obj_list_sort+0xae>)
   1121a:	f00a f931 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(pos_args[0]);
   1121e:	68bb      	ldr	r3, [r7, #8]
   11220:	681b      	ldr	r3, [r3, #0]
   11222:	61fb      	str	r3, [r7, #28]

    if (self->len > 1) {
   11224:	69fb      	ldr	r3, [r7, #28]
   11226:	689b      	ldr	r3, [r3, #8]
   11228:	2b01      	cmp	r3, #1
   1122a:	d919      	bls.n	11260 <mp_obj_list_sort+0x92>
        mp_quicksort(self->items, self->items + self->len - 1,
   1122c:	69fb      	ldr	r3, [r7, #28]
   1122e:	68d8      	ldr	r0, [r3, #12]
   11230:	69fb      	ldr	r3, [r7, #28]
   11232:	68da      	ldr	r2, [r3, #12]
   11234:	69fb      	ldr	r3, [r7, #28]
   11236:	689b      	ldr	r3, [r3, #8]
   11238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1123c:	3b01      	subs	r3, #1
   1123e:	009b      	lsls	r3, r3, #2
   11240:	18d1      	adds	r1, r2, r3
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
   11242:	697b      	ldr	r3, [r7, #20]
        mp_quicksort(self->items, self->items + self->len - 1,
   11244:	4a0e      	ldr	r2, [pc, #56]	; (11280 <mp_obj_list_sort+0xb2>)
   11246:	4293      	cmp	r3, r2
   11248:	d001      	beq.n	1124e <mp_obj_list_sort+0x80>
   1124a:	697a      	ldr	r2, [r7, #20]
   1124c:	e000      	b.n	11250 <mp_obj_list_sort+0x82>
   1124e:	2200      	movs	r2, #0
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
   11250:	7e3b      	ldrb	r3, [r7, #24]
        mp_quicksort(self->items, self->items + self->len - 1,
   11252:	2b00      	cmp	r3, #0
   11254:	d001      	beq.n	1125a <mp_obj_list_sort+0x8c>
   11256:	4b0b      	ldr	r3, [pc, #44]	; (11284 <mp_obj_list_sort+0xb6>)
   11258:	e000      	b.n	1125c <mp_obj_list_sort+0x8e>
   1125a:	4b0b      	ldr	r3, [pc, #44]	; (11288 <mp_obj_list_sort+0xba>)
   1125c:	f7ff ff20 	bl	110a0 <mp_quicksort>
    }

    return mp_const_none;
   11260:	4b07      	ldr	r3, [pc, #28]	; (11280 <mp_obj_list_sort+0xb2>)
}
   11262:	4618      	mov	r0, r3
   11264:	3720      	adds	r7, #32
   11266:	46bd      	mov	sp, r7
   11268:	bd80      	pop	{r7, pc}
   1126a:	bf00      	nop
   1126c:	00022e90 	.word	0x00022e90
   11270:	00022e28 	.word	0x00022e28
   11274:	00022cf8 	.word	0x00022cf8
   11278:	00022ea0 	.word	0x00022ea0
   1127c:	00022c74 	.word	0x00022c74
   11280:	00023108 	.word	0x00023108
   11284:	00021894 	.word	0x00021894
   11288:	0002189c 	.word	0x0002189c

0001128c <list_clear>:

STATIC mp_obj_t list_clear(mp_obj_t self_in) {
   1128c:	b580      	push	{r7, lr}
   1128e:	b084      	sub	sp, #16
   11290:	af00      	add	r7, sp, #0
   11292:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11294:	6878      	ldr	r0, [r7, #4]
   11296:	f7ff fb8b 	bl	109b0 <MP_OBJ_IS_OBJ>
   1129a:	4603      	mov	r3, r0
   1129c:	2b00      	cmp	r3, #0
   1129e:	d004      	beq.n	112aa <list_clear+0x1e>
   112a0:	687b      	ldr	r3, [r7, #4]
   112a2:	681b      	ldr	r3, [r3, #0]
   112a4:	4a14      	ldr	r2, [pc, #80]	; (112f8 <list_clear+0x6c>)
   112a6:	4293      	cmp	r3, r2
   112a8:	d006      	beq.n	112b8 <list_clear+0x2c>
   112aa:	4b14      	ldr	r3, [pc, #80]	; (112fc <list_clear+0x70>)
   112ac:	4a14      	ldr	r2, [pc, #80]	; (11300 <list_clear+0x74>)
   112ae:	f240 1155 	movw	r1, #341	; 0x155
   112b2:	4814      	ldr	r0, [pc, #80]	; (11304 <list_clear+0x78>)
   112b4:	f00a f8e4 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   112b8:	687b      	ldr	r3, [r7, #4]
   112ba:	60fb      	str	r3, [r7, #12]
    self->len = 0;
   112bc:	68fb      	ldr	r3, [r7, #12]
   112be:	2200      	movs	r2, #0
   112c0:	609a      	str	r2, [r3, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
   112c2:	68fb      	ldr	r3, [r7, #12]
   112c4:	68db      	ldr	r3, [r3, #12]
   112c6:	2110      	movs	r1, #16
   112c8:	4618      	mov	r0, r3
   112ca:	f7ef f859 	bl	380 <m_realloc>
   112ce:	4602      	mov	r2, r0
   112d0:	68fb      	ldr	r3, [r7, #12]
   112d2:	60da      	str	r2, [r3, #12]
    self->alloc = LIST_MIN_ALLOC;
   112d4:	68fb      	ldr	r3, [r7, #12]
   112d6:	2204      	movs	r2, #4
   112d8:	605a      	str	r2, [r3, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
   112da:	68fb      	ldr	r3, [r7, #12]
   112dc:	68d8      	ldr	r0, [r3, #12]
   112de:	68fb      	ldr	r3, [r7, #12]
   112e0:	685b      	ldr	r3, [r3, #4]
   112e2:	009b      	lsls	r3, r3, #2
   112e4:	461a      	mov	r2, r3
   112e6:	2100      	movs	r1, #0
   112e8:	f00b fc90 	bl	1cc0c <memset>
    return mp_const_none;
   112ec:	4b06      	ldr	r3, [pc, #24]	; (11308 <list_clear+0x7c>)
}
   112ee:	4618      	mov	r0, r3
   112f0:	3710      	adds	r7, #16
   112f2:	46bd      	mov	sp, r7
   112f4:	bd80      	pop	{r7, pc}
   112f6:	bf00      	nop
   112f8:	00022e28 	.word	0x00022e28
   112fc:	00022c18 	.word	0x00022c18
   11300:	00022eb4 	.word	0x00022eb4
   11304:	00022c74 	.word	0x00022c74
   11308:	00023108 	.word	0x00023108

0001130c <list_copy>:

STATIC mp_obj_t list_copy(mp_obj_t self_in) {
   1130c:	b580      	push	{r7, lr}
   1130e:	b084      	sub	sp, #16
   11310:	af00      	add	r7, sp, #0
   11312:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11314:	6878      	ldr	r0, [r7, #4]
   11316:	f7ff fb4b 	bl	109b0 <MP_OBJ_IS_OBJ>
   1131a:	4603      	mov	r3, r0
   1131c:	2b00      	cmp	r3, #0
   1131e:	d004      	beq.n	1132a <list_copy+0x1e>
   11320:	687b      	ldr	r3, [r7, #4]
   11322:	681b      	ldr	r3, [r3, #0]
   11324:	4a0c      	ldr	r2, [pc, #48]	; (11358 <list_copy+0x4c>)
   11326:	4293      	cmp	r3, r2
   11328:	d006      	beq.n	11338 <list_copy+0x2c>
   1132a:	4b0c      	ldr	r3, [pc, #48]	; (1135c <list_copy+0x50>)
   1132c:	4a0c      	ldr	r2, [pc, #48]	; (11360 <list_copy+0x54>)
   1132e:	f240 115f 	movw	r1, #351	; 0x15f
   11332:	480c      	ldr	r0, [pc, #48]	; (11364 <list_copy+0x58>)
   11334:	f00a f8a4 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11338:	687b      	ldr	r3, [r7, #4]
   1133a:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_list(self->len, self->items);
   1133c:	68fb      	ldr	r3, [r7, #12]
   1133e:	689a      	ldr	r2, [r3, #8]
   11340:	68fb      	ldr	r3, [r7, #12]
   11342:	68db      	ldr	r3, [r3, #12]
   11344:	4619      	mov	r1, r3
   11346:	4610      	mov	r0, r2
   11348:	f000 f9ab 	bl	116a2 <mp_obj_new_list>
   1134c:	4603      	mov	r3, r0
}
   1134e:	4618      	mov	r0, r3
   11350:	3710      	adds	r7, #16
   11352:	46bd      	mov	sp, r7
   11354:	bd80      	pop	{r7, pc}
   11356:	bf00      	nop
   11358:	00022e28 	.word	0x00022e28
   1135c:	00022c18 	.word	0x00022c18
   11360:	00022ec0 	.word	0x00022ec0
   11364:	00022c74 	.word	0x00022c74

00011368 <list_count>:

STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
   11368:	b580      	push	{r7, lr}
   1136a:	b084      	sub	sp, #16
   1136c:	af00      	add	r7, sp, #0
   1136e:	6078      	str	r0, [r7, #4]
   11370:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11372:	6878      	ldr	r0, [r7, #4]
   11374:	f7ff fb1c 	bl	109b0 <MP_OBJ_IS_OBJ>
   11378:	4603      	mov	r3, r0
   1137a:	2b00      	cmp	r3, #0
   1137c:	d004      	beq.n	11388 <list_count+0x20>
   1137e:	687b      	ldr	r3, [r7, #4]
   11380:	681b      	ldr	r3, [r3, #0]
   11382:	4a0c      	ldr	r2, [pc, #48]	; (113b4 <list_count+0x4c>)
   11384:	4293      	cmp	r3, r2
   11386:	d006      	beq.n	11396 <list_count+0x2e>
   11388:	4b0b      	ldr	r3, [pc, #44]	; (113b8 <list_count+0x50>)
   1138a:	4a0c      	ldr	r2, [pc, #48]	; (113bc <list_count+0x54>)
   1138c:	f240 1165 	movw	r1, #357	; 0x165
   11390:	480b      	ldr	r0, [pc, #44]	; (113c0 <list_count+0x58>)
   11392:	f00a f875 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11396:	687b      	ldr	r3, [r7, #4]
   11398:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   1139a:	68fb      	ldr	r3, [r7, #12]
   1139c:	68d8      	ldr	r0, [r3, #12]
   1139e:	68fb      	ldr	r3, [r7, #12]
   113a0:	689b      	ldr	r3, [r3, #8]
   113a2:	683a      	ldr	r2, [r7, #0]
   113a4:	4619      	mov	r1, r3
   113a6:	f006 fac9 	bl	1793c <mp_seq_count_obj>
   113aa:	4603      	mov	r3, r0
}
   113ac:	4618      	mov	r0, r3
   113ae:	3710      	adds	r7, #16
   113b0:	46bd      	mov	sp, r7
   113b2:	bd80      	pop	{r7, pc}
   113b4:	00022e28 	.word	0x00022e28
   113b8:	00022c18 	.word	0x00022c18
   113bc:	00022ecc 	.word	0x00022ecc
   113c0:	00022c74 	.word	0x00022c74

000113c4 <list_index>:

STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
   113c4:	b580      	push	{r7, lr}
   113c6:	b084      	sub	sp, #16
   113c8:	af00      	add	r7, sp, #0
   113ca:	6078      	str	r0, [r7, #4]
   113cc:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   113ce:	683b      	ldr	r3, [r7, #0]
   113d0:	681b      	ldr	r3, [r3, #0]
   113d2:	4618      	mov	r0, r3
   113d4:	f7ff faec 	bl	109b0 <MP_OBJ_IS_OBJ>
   113d8:	4603      	mov	r3, r0
   113da:	2b00      	cmp	r3, #0
   113dc:	d005      	beq.n	113ea <list_index+0x26>
   113de:	683b      	ldr	r3, [r7, #0]
   113e0:	681b      	ldr	r3, [r3, #0]
   113e2:	681b      	ldr	r3, [r3, #0]
   113e4:	4a0c      	ldr	r2, [pc, #48]	; (11418 <list_index+0x54>)
   113e6:	4293      	cmp	r3, r2
   113e8:	d006      	beq.n	113f8 <list_index+0x34>
   113ea:	4b0c      	ldr	r3, [pc, #48]	; (1141c <list_index+0x58>)
   113ec:	4a0c      	ldr	r2, [pc, #48]	; (11420 <list_index+0x5c>)
   113ee:	f240 116b 	movw	r1, #363	; 0x16b
   113f2:	480c      	ldr	r0, [pc, #48]	; (11424 <list_index+0x60>)
   113f4:	f00a f844 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   113f8:	683b      	ldr	r3, [r7, #0]
   113fa:	681b      	ldr	r3, [r3, #0]
   113fc:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   113fe:	68fb      	ldr	r3, [r7, #12]
   11400:	68d8      	ldr	r0, [r3, #12]
   11402:	68fb      	ldr	r3, [r7, #12]
   11404:	6899      	ldr	r1, [r3, #8]
   11406:	683b      	ldr	r3, [r7, #0]
   11408:	687a      	ldr	r2, [r7, #4]
   1140a:	f006 fa47 	bl	1789c <mp_seq_index_obj>
   1140e:	4603      	mov	r3, r0
}
   11410:	4618      	mov	r0, r3
   11412:	3710      	adds	r7, #16
   11414:	46bd      	mov	sp, r7
   11416:	bd80      	pop	{r7, pc}
   11418:	00022e28 	.word	0x00022e28
   1141c:	00022c88 	.word	0x00022c88
   11420:	00022ed8 	.word	0x00022ed8
   11424:	00022c74 	.word	0x00022c74

00011428 <list_insert>:

STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
   11428:	b580      	push	{r7, lr}
   1142a:	b088      	sub	sp, #32
   1142c:	af00      	add	r7, sp, #0
   1142e:	60f8      	str	r0, [r7, #12]
   11430:	60b9      	str	r1, [r7, #8]
   11432:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11434:	68f8      	ldr	r0, [r7, #12]
   11436:	f7ff fabb 	bl	109b0 <MP_OBJ_IS_OBJ>
   1143a:	4603      	mov	r3, r0
   1143c:	2b00      	cmp	r3, #0
   1143e:	d004      	beq.n	1144a <list_insert+0x22>
   11440:	68fb      	ldr	r3, [r7, #12]
   11442:	681b      	ldr	r3, [r3, #0]
   11444:	4a27      	ldr	r2, [pc, #156]	; (114e4 <list_insert+0xbc>)
   11446:	4293      	cmp	r3, r2
   11448:	d006      	beq.n	11458 <list_insert+0x30>
   1144a:	4b27      	ldr	r3, [pc, #156]	; (114e8 <list_insert+0xc0>)
   1144c:	4a27      	ldr	r2, [pc, #156]	; (114ec <list_insert+0xc4>)
   1144e:	f240 1171 	movw	r1, #369	; 0x171
   11452:	4827      	ldr	r0, [pc, #156]	; (114f0 <list_insert+0xc8>)
   11454:	f00a f814 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11458:	68fb      	ldr	r3, [r7, #12]
   1145a:	617b      	str	r3, [r7, #20]
    // insert has its own strange index logic
    mp_int_t index = MP_OBJ_SMALL_INT_VALUE(idx);
   1145c:	68bb      	ldr	r3, [r7, #8]
   1145e:	105b      	asrs	r3, r3, #1
   11460:	61fb      	str	r3, [r7, #28]
    if (index < 0) {
   11462:	69fb      	ldr	r3, [r7, #28]
   11464:	2b00      	cmp	r3, #0
   11466:	da04      	bge.n	11472 <list_insert+0x4a>
         index += self->len;
   11468:	697b      	ldr	r3, [r7, #20]
   1146a:	689a      	ldr	r2, [r3, #8]
   1146c:	69fb      	ldr	r3, [r7, #28]
   1146e:	4413      	add	r3, r2
   11470:	61fb      	str	r3, [r7, #28]
    }
    if (index < 0) {
   11472:	69fb      	ldr	r3, [r7, #28]
   11474:	2b00      	cmp	r3, #0
   11476:	da01      	bge.n	1147c <list_insert+0x54>
         index = 0;
   11478:	2300      	movs	r3, #0
   1147a:	61fb      	str	r3, [r7, #28]
    }
    if ((size_t)index > self->len) {
   1147c:	697b      	ldr	r3, [r7, #20]
   1147e:	689a      	ldr	r2, [r3, #8]
   11480:	69fb      	ldr	r3, [r7, #28]
   11482:	429a      	cmp	r2, r3
   11484:	d202      	bcs.n	1148c <list_insert+0x64>
         index = self->len;
   11486:	697b      	ldr	r3, [r7, #20]
   11488:	689b      	ldr	r3, [r3, #8]
   1148a:	61fb      	str	r3, [r7, #28]
    }

    mp_obj_list_append(self_in, mp_const_none);
   1148c:	4919      	ldr	r1, [pc, #100]	; (114f4 <list_insert+0xcc>)
   1148e:	68f8      	ldr	r0, [r7, #12]
   11490:	f7ff fc9b 	bl	10dca <mp_obj_list_append>

    for (mp_int_t i = self->len-1; i > index; i--) {
   11494:	697b      	ldr	r3, [r7, #20]
   11496:	689b      	ldr	r3, [r3, #8]
   11498:	3b01      	subs	r3, #1
   1149a:	61bb      	str	r3, [r7, #24]
   1149c:	e011      	b.n	114c2 <list_insert+0x9a>
         self->items[i] = self->items[i-1];
   1149e:	697b      	ldr	r3, [r7, #20]
   114a0:	68da      	ldr	r2, [r3, #12]
   114a2:	69bb      	ldr	r3, [r7, #24]
   114a4:	009b      	lsls	r3, r3, #2
   114a6:	441a      	add	r2, r3
   114a8:	697b      	ldr	r3, [r7, #20]
   114aa:	68d9      	ldr	r1, [r3, #12]
   114ac:	69bb      	ldr	r3, [r7, #24]
   114ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   114b2:	3b01      	subs	r3, #1
   114b4:	009b      	lsls	r3, r3, #2
   114b6:	440b      	add	r3, r1
   114b8:	681b      	ldr	r3, [r3, #0]
   114ba:	6013      	str	r3, [r2, #0]
    for (mp_int_t i = self->len-1; i > index; i--) {
   114bc:	69bb      	ldr	r3, [r7, #24]
   114be:	3b01      	subs	r3, #1
   114c0:	61bb      	str	r3, [r7, #24]
   114c2:	69ba      	ldr	r2, [r7, #24]
   114c4:	69fb      	ldr	r3, [r7, #28]
   114c6:	429a      	cmp	r2, r3
   114c8:	dce9      	bgt.n	1149e <list_insert+0x76>
    }
    self->items[index] = obj;
   114ca:	697b      	ldr	r3, [r7, #20]
   114cc:	68da      	ldr	r2, [r3, #12]
   114ce:	69fb      	ldr	r3, [r7, #28]
   114d0:	009b      	lsls	r3, r3, #2
   114d2:	4413      	add	r3, r2
   114d4:	687a      	ldr	r2, [r7, #4]
   114d6:	601a      	str	r2, [r3, #0]

    return mp_const_none;
   114d8:	4b06      	ldr	r3, [pc, #24]	; (114f4 <list_insert+0xcc>)
}
   114da:	4618      	mov	r0, r3
   114dc:	3720      	adds	r7, #32
   114de:	46bd      	mov	sp, r7
   114e0:	bd80      	pop	{r7, pc}
   114e2:	bf00      	nop
   114e4:	00022e28 	.word	0x00022e28
   114e8:	00022c18 	.word	0x00022c18
   114ec:	00022ee4 	.word	0x00022ee4
   114f0:	00022c74 	.word	0x00022c74
   114f4:	00023108 	.word	0x00023108

000114f8 <mp_obj_list_remove>:

mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
   114f8:	b580      	push	{r7, lr}
   114fa:	b084      	sub	sp, #16
   114fc:	af00      	add	r7, sp, #0
   114fe:	6078      	str	r0, [r7, #4]
   11500:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11502:	6878      	ldr	r0, [r7, #4]
   11504:	f7ff fa54 	bl	109b0 <MP_OBJ_IS_OBJ>
   11508:	4603      	mov	r3, r0
   1150a:	2b00      	cmp	r3, #0
   1150c:	d004      	beq.n	11518 <mp_obj_list_remove+0x20>
   1150e:	687b      	ldr	r3, [r7, #4]
   11510:	681b      	ldr	r3, [r3, #0]
   11512:	4a10      	ldr	r2, [pc, #64]	; (11554 <mp_obj_list_remove+0x5c>)
   11514:	4293      	cmp	r3, r2
   11516:	d006      	beq.n	11526 <mp_obj_list_remove+0x2e>
   11518:	4b0f      	ldr	r3, [pc, #60]	; (11558 <mp_obj_list_remove+0x60>)
   1151a:	4a10      	ldr	r2, [pc, #64]	; (1155c <mp_obj_list_remove+0x64>)
   1151c:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   11520:	480f      	ldr	r0, [pc, #60]	; (11560 <mp_obj_list_remove+0x68>)
   11522:	f009 ffad 	bl	1b480 <__assert_func>
    mp_obj_t args[] = {self_in, value};
   11526:	687b      	ldr	r3, [r7, #4]
   11528:	60bb      	str	r3, [r7, #8]
   1152a:	683b      	ldr	r3, [r7, #0]
   1152c:	60fb      	str	r3, [r7, #12]
    args[1] = list_index(2, args);
   1152e:	f107 0308 	add.w	r3, r7, #8
   11532:	4619      	mov	r1, r3
   11534:	2002      	movs	r0, #2
   11536:	f7ff ff45 	bl	113c4 <list_index>
   1153a:	4603      	mov	r3, r0
   1153c:	60fb      	str	r3, [r7, #12]
    list_pop(2, args);
   1153e:	f107 0308 	add.w	r3, r7, #8
   11542:	4619      	mov	r1, r3
   11544:	2002      	movs	r0, #2
   11546:	f7ff fd21 	bl	10f8c <list_pop>

    return mp_const_none;
   1154a:	4b06      	ldr	r3, [pc, #24]	; (11564 <mp_obj_list_remove+0x6c>)
}
   1154c:	4618      	mov	r0, r3
   1154e:	3710      	adds	r7, #16
   11550:	46bd      	mov	sp, r7
   11552:	bd80      	pop	{r7, pc}
   11554:	00022e28 	.word	0x00022e28
   11558:	00022c18 	.word	0x00022c18
   1155c:	00022ef0 	.word	0x00022ef0
   11560:	00022c74 	.word	0x00022c74
   11564:	00023108 	.word	0x00023108

00011568 <list_reverse>:

STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
   11568:	b580      	push	{r7, lr}
   1156a:	b086      	sub	sp, #24
   1156c:	af00      	add	r7, sp, #0
   1156e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11570:	6878      	ldr	r0, [r7, #4]
   11572:	f7ff fa1d 	bl	109b0 <MP_OBJ_IS_OBJ>
   11576:	4603      	mov	r3, r0
   11578:	2b00      	cmp	r3, #0
   1157a:	d004      	beq.n	11586 <list_reverse+0x1e>
   1157c:	687b      	ldr	r3, [r7, #4]
   1157e:	681b      	ldr	r3, [r3, #0]
   11580:	4a22      	ldr	r2, [pc, #136]	; (1160c <list_reverse+0xa4>)
   11582:	4293      	cmp	r3, r2
   11584:	d006      	beq.n	11594 <list_reverse+0x2c>
   11586:	4b22      	ldr	r3, [pc, #136]	; (11610 <list_reverse+0xa8>)
   11588:	4a22      	ldr	r2, [pc, #136]	; (11614 <list_reverse+0xac>)
   1158a:	f240 1193 	movw	r1, #403	; 0x193
   1158e:	4822      	ldr	r0, [pc, #136]	; (11618 <list_reverse+0xb0>)
   11590:	f009 ff76 	bl	1b480 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11594:	687b      	ldr	r3, [r7, #4]
   11596:	613b      	str	r3, [r7, #16]

    mp_int_t len = self->len;
   11598:	693b      	ldr	r3, [r7, #16]
   1159a:	689b      	ldr	r3, [r3, #8]
   1159c:	60fb      	str	r3, [r7, #12]
    for (mp_int_t i = 0; i < len/2; i++) {
   1159e:	2300      	movs	r3, #0
   115a0:	617b      	str	r3, [r7, #20]
   115a2:	e026      	b.n	115f2 <list_reverse+0x8a>
         mp_obj_t a = self->items[i];
   115a4:	693b      	ldr	r3, [r7, #16]
   115a6:	68da      	ldr	r2, [r3, #12]
   115a8:	697b      	ldr	r3, [r7, #20]
   115aa:	009b      	lsls	r3, r3, #2
   115ac:	4413      	add	r3, r2
   115ae:	681b      	ldr	r3, [r3, #0]
   115b0:	60bb      	str	r3, [r7, #8]
         self->items[i] = self->items[len-i-1];
   115b2:	693b      	ldr	r3, [r7, #16]
   115b4:	68da      	ldr	r2, [r3, #12]
   115b6:	697b      	ldr	r3, [r7, #20]
   115b8:	009b      	lsls	r3, r3, #2
   115ba:	441a      	add	r2, r3
   115bc:	693b      	ldr	r3, [r7, #16]
   115be:	68d9      	ldr	r1, [r3, #12]
   115c0:	68f8      	ldr	r0, [r7, #12]
   115c2:	697b      	ldr	r3, [r7, #20]
   115c4:	1ac3      	subs	r3, r0, r3
   115c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   115ca:	3b01      	subs	r3, #1
   115cc:	009b      	lsls	r3, r3, #2
   115ce:	440b      	add	r3, r1
   115d0:	681b      	ldr	r3, [r3, #0]
   115d2:	6013      	str	r3, [r2, #0]
         self->items[len-i-1] = a;
   115d4:	693b      	ldr	r3, [r7, #16]
   115d6:	68da      	ldr	r2, [r3, #12]
   115d8:	68f9      	ldr	r1, [r7, #12]
   115da:	697b      	ldr	r3, [r7, #20]
   115dc:	1acb      	subs	r3, r1, r3
   115de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   115e2:	3b01      	subs	r3, #1
   115e4:	009b      	lsls	r3, r3, #2
   115e6:	4413      	add	r3, r2
   115e8:	68ba      	ldr	r2, [r7, #8]
   115ea:	601a      	str	r2, [r3, #0]
    for (mp_int_t i = 0; i < len/2; i++) {
   115ec:	697b      	ldr	r3, [r7, #20]
   115ee:	3301      	adds	r3, #1
   115f0:	617b      	str	r3, [r7, #20]
   115f2:	68fb      	ldr	r3, [r7, #12]
   115f4:	0fda      	lsrs	r2, r3, #31
   115f6:	4413      	add	r3, r2
   115f8:	105b      	asrs	r3, r3, #1
   115fa:	461a      	mov	r2, r3
   115fc:	697b      	ldr	r3, [r7, #20]
   115fe:	429a      	cmp	r2, r3
   11600:	dcd0      	bgt.n	115a4 <list_reverse+0x3c>
    }

    return mp_const_none;
   11602:	4b06      	ldr	r3, [pc, #24]	; (1161c <list_reverse+0xb4>)
}
   11604:	4618      	mov	r0, r3
   11606:	3718      	adds	r7, #24
   11608:	46bd      	mov	sp, r7
   1160a:	bd80      	pop	{r7, pc}
   1160c:	00022e28 	.word	0x00022e28
   11610:	00022c18 	.word	0x00022c18
   11614:	00022f04 	.word	0x00022f04
   11618:	00022c74 	.word	0x00022c74
   1161c:	00023108 	.word	0x00023108

00011620 <mp_obj_list_init>:
    .subscr = list_subscr,
    .getiter = list_getiter,
    .locals_dict = (mp_obj_dict_t*)&list_locals_dict,
};

void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
   11620:	b580      	push	{r7, lr}
   11622:	b082      	sub	sp, #8
   11624:	af00      	add	r7, sp, #0
   11626:	6078      	str	r0, [r7, #4]
   11628:	6039      	str	r1, [r7, #0]
    o->base.type = &mp_type_list;
   1162a:	687b      	ldr	r3, [r7, #4]
   1162c:	4a13      	ldr	r2, [pc, #76]	; (1167c <mp_obj_list_init+0x5c>)
   1162e:	601a      	str	r2, [r3, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
   11630:	683b      	ldr	r3, [r7, #0]
   11632:	2b04      	cmp	r3, #4
   11634:	bf38      	it	cc
   11636:	2304      	movcc	r3, #4
   11638:	461a      	mov	r2, r3
   1163a:	687b      	ldr	r3, [r7, #4]
   1163c:	605a      	str	r2, [r3, #4]
    o->len = n;
   1163e:	687b      	ldr	r3, [r7, #4]
   11640:	683a      	ldr	r2, [r7, #0]
   11642:	609a      	str	r2, [r3, #8]
    o->items = m_new(mp_obj_t, o->alloc);
   11644:	687b      	ldr	r3, [r7, #4]
   11646:	685b      	ldr	r3, [r3, #4]
   11648:	009b      	lsls	r3, r3, #2
   1164a:	4618      	mov	r0, r3
   1164c:	f7ee fe66 	bl	31c <m_malloc>
   11650:	4602      	mov	r2, r0
   11652:	687b      	ldr	r3, [r7, #4]
   11654:	60da      	str	r2, [r3, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
   11656:	687b      	ldr	r3, [r7, #4]
   11658:	68da      	ldr	r2, [r3, #12]
   1165a:	683b      	ldr	r3, [r7, #0]
   1165c:	009b      	lsls	r3, r3, #2
   1165e:	18d0      	adds	r0, r2, r3
   11660:	687b      	ldr	r3, [r7, #4]
   11662:	685a      	ldr	r2, [r3, #4]
   11664:	683b      	ldr	r3, [r7, #0]
   11666:	1ad3      	subs	r3, r2, r3
   11668:	009b      	lsls	r3, r3, #2
   1166a:	461a      	mov	r2, r3
   1166c:	2100      	movs	r1, #0
   1166e:	f00b facd 	bl	1cc0c <memset>
}
   11672:	bf00      	nop
   11674:	3708      	adds	r7, #8
   11676:	46bd      	mov	sp, r7
   11678:	bd80      	pop	{r7, pc}
   1167a:	bf00      	nop
   1167c:	00022e28 	.word	0x00022e28

00011680 <list_new>:

STATIC mp_obj_list_t *list_new(size_t n) {
   11680:	b580      	push	{r7, lr}
   11682:	b084      	sub	sp, #16
   11684:	af00      	add	r7, sp, #0
   11686:	6078      	str	r0, [r7, #4]
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
   11688:	2010      	movs	r0, #16
   1168a:	f7ee fe47 	bl	31c <m_malloc>
   1168e:	60f8      	str	r0, [r7, #12]
    mp_obj_list_init(o, n);
   11690:	6879      	ldr	r1, [r7, #4]
   11692:	68f8      	ldr	r0, [r7, #12]
   11694:	f7ff ffc4 	bl	11620 <mp_obj_list_init>
    return o;
   11698:	68fb      	ldr	r3, [r7, #12]
}
   1169a:	4618      	mov	r0, r3
   1169c:	3710      	adds	r7, #16
   1169e:	46bd      	mov	sp, r7
   116a0:	bd80      	pop	{r7, pc}

000116a2 <mp_obj_new_list>:

mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
   116a2:	b580      	push	{r7, lr}
   116a4:	b084      	sub	sp, #16
   116a6:	af00      	add	r7, sp, #0
   116a8:	6078      	str	r0, [r7, #4]
   116aa:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *o = list_new(n);
   116ac:	6878      	ldr	r0, [r7, #4]
   116ae:	f7ff ffe7 	bl	11680 <list_new>
   116b2:	60b8      	str	r0, [r7, #8]
    if (items != NULL) {
   116b4:	683b      	ldr	r3, [r7, #0]
   116b6:	2b00      	cmp	r3, #0
   116b8:	d014      	beq.n	116e4 <mp_obj_new_list+0x42>
        for (size_t i = 0; i < n; i++) {
   116ba:	2300      	movs	r3, #0
   116bc:	60fb      	str	r3, [r7, #12]
   116be:	e00d      	b.n	116dc <mp_obj_new_list+0x3a>
            o->items[i] = items[i];
   116c0:	68bb      	ldr	r3, [r7, #8]
   116c2:	68da      	ldr	r2, [r3, #12]
   116c4:	68fb      	ldr	r3, [r7, #12]
   116c6:	009b      	lsls	r3, r3, #2
   116c8:	4413      	add	r3, r2
   116ca:	68fa      	ldr	r2, [r7, #12]
   116cc:	0092      	lsls	r2, r2, #2
   116ce:	6839      	ldr	r1, [r7, #0]
   116d0:	440a      	add	r2, r1
   116d2:	6812      	ldr	r2, [r2, #0]
   116d4:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < n; i++) {
   116d6:	68fb      	ldr	r3, [r7, #12]
   116d8:	3301      	adds	r3, #1
   116da:	60fb      	str	r3, [r7, #12]
   116dc:	68fa      	ldr	r2, [r7, #12]
   116de:	687b      	ldr	r3, [r7, #4]
   116e0:	429a      	cmp	r2, r3
   116e2:	d3ed      	bcc.n	116c0 <mp_obj_new_list+0x1e>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   116e4:	68bb      	ldr	r3, [r7, #8]
}
   116e6:	4618      	mov	r0, r3
   116e8:	3710      	adds	r7, #16
   116ea:	46bd      	mov	sp, r7
   116ec:	bd80      	pop	{r7, pc}

000116ee <mp_obj_list_get>:

void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   116ee:	b480      	push	{r7}
   116f0:	b087      	sub	sp, #28
   116f2:	af00      	add	r7, sp, #0
   116f4:	60f8      	str	r0, [r7, #12]
   116f6:	60b9      	str	r1, [r7, #8]
   116f8:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   116fa:	68fb      	ldr	r3, [r7, #12]
   116fc:	617b      	str	r3, [r7, #20]
    *len = self->len;
   116fe:	697b      	ldr	r3, [r7, #20]
   11700:	689a      	ldr	r2, [r3, #8]
   11702:	68bb      	ldr	r3, [r7, #8]
   11704:	601a      	str	r2, [r3, #0]
    *items = self->items;
   11706:	697b      	ldr	r3, [r7, #20]
   11708:	68da      	ldr	r2, [r3, #12]
   1170a:	687b      	ldr	r3, [r7, #4]
   1170c:	601a      	str	r2, [r3, #0]
}
   1170e:	bf00      	nop
   11710:	371c      	adds	r7, #28
   11712:	46bd      	mov	sp, r7
   11714:	f85d 7b04 	ldr.w	r7, [sp], #4
   11718:	4770      	bx	lr

0001171a <mp_obj_list_set_len>:

void mp_obj_list_set_len(mp_obj_t self_in, size_t len) {
   1171a:	b480      	push	{r7}
   1171c:	b085      	sub	sp, #20
   1171e:	af00      	add	r7, sp, #0
   11720:	6078      	str	r0, [r7, #4]
   11722:	6039      	str	r1, [r7, #0]
    // trust that the caller knows what it's doing
    // TODO realloc if len got much smaller than alloc
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11724:	687b      	ldr	r3, [r7, #4]
   11726:	60fb      	str	r3, [r7, #12]
    self->len = len;
   11728:	68fb      	ldr	r3, [r7, #12]
   1172a:	683a      	ldr	r2, [r7, #0]
   1172c:	609a      	str	r2, [r3, #8]
}
   1172e:	bf00      	nop
   11730:	3714      	adds	r7, #20
   11732:	46bd      	mov	sp, r7
   11734:	f85d 7b04 	ldr.w	r7, [sp], #4
   11738:	4770      	bx	lr

0001173a <mp_obj_list_store>:

void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   1173a:	b580      	push	{r7, lr}
   1173c:	b086      	sub	sp, #24
   1173e:	af00      	add	r7, sp, #0
   11740:	60f8      	str	r0, [r7, #12]
   11742:	60b9      	str	r1, [r7, #8]
   11744:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11746:	68fb      	ldr	r3, [r7, #12]
   11748:	617b      	str	r3, [r7, #20]
    size_t i = mp_get_index(self->base.type, self->len, index, false);
   1174a:	697b      	ldr	r3, [r7, #20]
   1174c:	6818      	ldr	r0, [r3, #0]
   1174e:	697b      	ldr	r3, [r7, #20]
   11750:	6899      	ldr	r1, [r3, #8]
   11752:	2300      	movs	r3, #0
   11754:	68ba      	ldr	r2, [r7, #8]
   11756:	f7fc fa77 	bl	dc48 <mp_get_index>
   1175a:	6138      	str	r0, [r7, #16]
    self->items[i] = value;
   1175c:	697b      	ldr	r3, [r7, #20]
   1175e:	68da      	ldr	r2, [r3, #12]
   11760:	693b      	ldr	r3, [r7, #16]
   11762:	009b      	lsls	r3, r3, #2
   11764:	4413      	add	r3, r2
   11766:	687a      	ldr	r2, [r7, #4]
   11768:	601a      	str	r2, [r3, #0]
}
   1176a:	bf00      	nop
   1176c:	3718      	adds	r7, #24
   1176e:	46bd      	mov	sp, r7
   11770:	bd80      	pop	{r7, pc}

00011772 <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
   11772:	b480      	push	{r7}
   11774:	b087      	sub	sp, #28
   11776:	af00      	add	r7, sp, #0
   11778:	6078      	str	r0, [r7, #4]
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
   1177a:	687b      	ldr	r3, [r7, #4]
   1177c:	617b      	str	r3, [r7, #20]
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
   1177e:	697b      	ldr	r3, [r7, #20]
   11780:	689b      	ldr	r3, [r3, #8]
   11782:	613b      	str	r3, [r7, #16]
    if (self->cur < list->len) {
   11784:	697b      	ldr	r3, [r7, #20]
   11786:	68da      	ldr	r2, [r3, #12]
   11788:	693b      	ldr	r3, [r7, #16]
   1178a:	689b      	ldr	r3, [r3, #8]
   1178c:	429a      	cmp	r2, r3
   1178e:	d20e      	bcs.n	117ae <list_it_iternext+0x3c>
        mp_obj_t o_out = list->items[self->cur];
   11790:	693b      	ldr	r3, [r7, #16]
   11792:	68da      	ldr	r2, [r3, #12]
   11794:	697b      	ldr	r3, [r7, #20]
   11796:	68db      	ldr	r3, [r3, #12]
   11798:	009b      	lsls	r3, r3, #2
   1179a:	4413      	add	r3, r2
   1179c:	681b      	ldr	r3, [r3, #0]
   1179e:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   117a0:	697b      	ldr	r3, [r7, #20]
   117a2:	68db      	ldr	r3, [r3, #12]
   117a4:	1c5a      	adds	r2, r3, #1
   117a6:	697b      	ldr	r3, [r7, #20]
   117a8:	60da      	str	r2, [r3, #12]
        return o_out;
   117aa:	68fb      	ldr	r3, [r7, #12]
   117ac:	e000      	b.n	117b0 <list_it_iternext+0x3e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   117ae:	2304      	movs	r3, #4
    }
}
   117b0:	4618      	mov	r0, r3
   117b2:	371c      	adds	r7, #28
   117b4:	46bd      	mov	sp, r7
   117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   117ba:	4770      	bx	lr

000117bc <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
   117bc:	b480      	push	{r7}
   117be:	b087      	sub	sp, #28
   117c0:	af00      	add	r7, sp, #0
   117c2:	60f8      	str	r0, [r7, #12]
   117c4:	60b9      	str	r1, [r7, #8]
   117c6:	607a      	str	r2, [r7, #4]
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
   117c8:	687b      	ldr	r3, [r7, #4]
   117ca:	617b      	str	r3, [r7, #20]
    o->base.type = &mp_type_polymorph_iter;
   117cc:	697b      	ldr	r3, [r7, #20]
   117ce:	4a09      	ldr	r2, [pc, #36]	; (117f4 <mp_obj_new_list_iterator+0x38>)
   117d0:	601a      	str	r2, [r3, #0]
    o->iternext = list_it_iternext;
   117d2:	697b      	ldr	r3, [r7, #20]
   117d4:	4a08      	ldr	r2, [pc, #32]	; (117f8 <mp_obj_new_list_iterator+0x3c>)
   117d6:	605a      	str	r2, [r3, #4]
    o->list = list;
   117d8:	697b      	ldr	r3, [r7, #20]
   117da:	68fa      	ldr	r2, [r7, #12]
   117dc:	609a      	str	r2, [r3, #8]
    o->cur = cur;
   117de:	697b      	ldr	r3, [r7, #20]
   117e0:	68ba      	ldr	r2, [r7, #8]
   117e2:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   117e4:	697b      	ldr	r3, [r7, #20]
}
   117e6:	4618      	mov	r0, r3
   117e8:	371c      	adds	r7, #28
   117ea:	46bd      	mov	sp, r7
   117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   117f0:	4770      	bx	lr
   117f2:	bf00      	nop
   117f4:	00023088 	.word	0x00023088
   117f8:	00011773 	.word	0x00011773

000117fc <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   117fc:	b480      	push	{r7}
   117fe:	b083      	sub	sp, #12
   11800:	af00      	add	r7, sp, #0
   11802:	6078      	str	r0, [r7, #4]
   11804:	687b      	ldr	r3, [r7, #4]
   11806:	f003 0303 	and.w	r3, r3, #3
   1180a:	2b00      	cmp	r3, #0
   1180c:	bf0c      	ite	eq
   1180e:	2301      	moveq	r3, #1
   11810:	2300      	movne	r3, #0
   11812:	b2db      	uxtb	r3, r3
   11814:	4618      	mov	r0, r3
   11816:	370c      	adds	r7, #12
   11818:	46bd      	mov	sp, r7
   1181a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1181e:	4770      	bx	lr

00011820 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   11820:	b580      	push	{r7, lr}
   11822:	b084      	sub	sp, #16
   11824:	af00      	add	r7, sp, #0
   11826:	60f8      	str	r0, [r7, #12]
   11828:	60b9      	str	r1, [r7, #8]
   1182a:	607a      	str	r2, [r7, #4]
   1182c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   1182e:	687b      	ldr	r3, [r7, #4]
   11830:	045a      	lsls	r2, r3, #17
   11832:	683b      	ldr	r3, [r7, #0]
   11834:	005b      	lsls	r3, r3, #1
   11836:	431a      	orrs	r2, r3
   11838:	7e3b      	ldrb	r3, [r7, #24]
   1183a:	2b00      	cmp	r3, #0
   1183c:	d001      	beq.n	11842 <mp_arg_check_num+0x22>
   1183e:	2301      	movs	r3, #1
   11840:	e000      	b.n	11844 <mp_arg_check_num+0x24>
   11842:	2300      	movs	r3, #0
   11844:	4313      	orrs	r3, r2
   11846:	461a      	mov	r2, r3
   11848:	68b9      	ldr	r1, [r7, #8]
   1184a:	68f8      	ldr	r0, [r7, #12]
   1184c:	f7fb fb32 	bl	ceb4 <mp_arg_check_num_sig>
}
   11850:	bf00      	nop
   11852:	3710      	adds	r7, #16
   11854:	46bd      	mov	sp, r7
   11856:	bd80      	pop	{r7, pc}

00011858 <map_make_new>:
    size_t n_iters;
    mp_obj_t fun;
    mp_obj_t iters[];
} mp_obj_map_t;

STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11858:	b580      	push	{r7, lr}
   1185a:	b088      	sub	sp, #32
   1185c:	af02      	add	r7, sp, #8
   1185e:	60f8      	str	r0, [r7, #12]
   11860:	60b9      	str	r1, [r7, #8]
   11862:	607a      	str	r2, [r7, #4]
   11864:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
   11866:	2300      	movs	r3, #0
   11868:	9300      	str	r3, [sp, #0]
   1186a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1186e:	2202      	movs	r2, #2
   11870:	6879      	ldr	r1, [r7, #4]
   11872:	68b8      	ldr	r0, [r7, #8]
   11874:	f7ff ffd4 	bl	11820 <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
   11878:	68bb      	ldr	r3, [r7, #8]
   1187a:	3302      	adds	r3, #2
   1187c:	009b      	lsls	r3, r3, #2
   1187e:	4618      	mov	r0, r3
   11880:	f7ee fd4c 	bl	31c <m_malloc>
   11884:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   11886:	693b      	ldr	r3, [r7, #16]
   11888:	68fa      	ldr	r2, [r7, #12]
   1188a:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args - 1;
   1188c:	68bb      	ldr	r3, [r7, #8]
   1188e:	1e5a      	subs	r2, r3, #1
   11890:	693b      	ldr	r3, [r7, #16]
   11892:	605a      	str	r2, [r3, #4]
    o->fun = args[0];
   11894:	683b      	ldr	r3, [r7, #0]
   11896:	681a      	ldr	r2, [r3, #0]
   11898:	693b      	ldr	r3, [r7, #16]
   1189a:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
   1189c:	2300      	movs	r3, #0
   1189e:	617b      	str	r3, [r7, #20]
   118a0:	e013      	b.n	118ca <map_make_new+0x72>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
   118a2:	697b      	ldr	r3, [r7, #20]
   118a4:	3301      	adds	r3, #1
   118a6:	009b      	lsls	r3, r3, #2
   118a8:	683a      	ldr	r2, [r7, #0]
   118aa:	4413      	add	r3, r2
   118ac:	681b      	ldr	r3, [r3, #0]
   118ae:	2100      	movs	r1, #0
   118b0:	4618      	mov	r0, r3
   118b2:	f7fa ff9f 	bl	c7f4 <mp_getiter>
   118b6:	4601      	mov	r1, r0
   118b8:	693a      	ldr	r2, [r7, #16]
   118ba:	697b      	ldr	r3, [r7, #20]
   118bc:	3302      	adds	r3, #2
   118be:	009b      	lsls	r3, r3, #2
   118c0:	4413      	add	r3, r2
   118c2:	6059      	str	r1, [r3, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
   118c4:	697b      	ldr	r3, [r7, #20]
   118c6:	3301      	adds	r3, #1
   118c8:	617b      	str	r3, [r7, #20]
   118ca:	68bb      	ldr	r3, [r7, #8]
   118cc:	1e5a      	subs	r2, r3, #1
   118ce:	697b      	ldr	r3, [r7, #20]
   118d0:	429a      	cmp	r2, r3
   118d2:	d8e6      	bhi.n	118a2 <map_make_new+0x4a>
    }
    return MP_OBJ_FROM_PTR(o);
   118d4:	693b      	ldr	r3, [r7, #16]
}
   118d6:	4618      	mov	r0, r3
   118d8:	3718      	adds	r7, #24
   118da:	46bd      	mov	sp, r7
   118dc:	bd80      	pop	{r7, pc}

000118de <map_iternext>:

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
   118de:	b580      	push	{r7, lr}
   118e0:	b086      	sub	sp, #24
   118e2:	af00      	add	r7, sp, #0
   118e4:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
   118e6:	6878      	ldr	r0, [r7, #4]
   118e8:	f7ff ff88 	bl	117fc <MP_OBJ_IS_OBJ>
   118ec:	4603      	mov	r3, r0
   118ee:	2b00      	cmp	r3, #0
   118f0:	d004      	beq.n	118fc <map_iternext+0x1e>
   118f2:	687b      	ldr	r3, [r7, #4]
   118f4:	681b      	ldr	r3, [r3, #0]
   118f6:	4a21      	ldr	r2, [pc, #132]	; (1197c <map_iternext+0x9e>)
   118f8:	4293      	cmp	r3, r2
   118fa:	d005      	beq.n	11908 <map_iternext+0x2a>
   118fc:	4b20      	ldr	r3, [pc, #128]	; (11980 <map_iternext+0xa2>)
   118fe:	4a21      	ldr	r2, [pc, #132]	; (11984 <map_iternext+0xa6>)
   11900:	2134      	movs	r1, #52	; 0x34
   11902:	4821      	ldr	r0, [pc, #132]	; (11988 <map_iternext+0xaa>)
   11904:	f009 fdbc 	bl	1b480 <__assert_func>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
   11908:	687b      	ldr	r3, [r7, #4]
   1190a:	613b      	str	r3, [r7, #16]
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
   1190c:	693b      	ldr	r3, [r7, #16]
   1190e:	685b      	ldr	r3, [r3, #4]
   11910:	009b      	lsls	r3, r3, #2
   11912:	4618      	mov	r0, r3
   11914:	f7ee fd02 	bl	31c <m_malloc>
   11918:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   1191a:	2300      	movs	r3, #0
   1191c:	617b      	str	r3, [r7, #20]
   1191e:	e01a      	b.n	11956 <map_iternext+0x78>
        mp_obj_t next = mp_iternext(self->iters[i]);
   11920:	693a      	ldr	r2, [r7, #16]
   11922:	697b      	ldr	r3, [r7, #20]
   11924:	3302      	adds	r3, #2
   11926:	009b      	lsls	r3, r3, #2
   11928:	4413      	add	r3, r2
   1192a:	685b      	ldr	r3, [r3, #4]
   1192c:	4618      	mov	r0, r3
   1192e:	f7fa ffe3 	bl	c8f8 <mp_iternext>
   11932:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   11934:	68bb      	ldr	r3, [r7, #8]
   11936:	2b04      	cmp	r3, #4
   11938:	d104      	bne.n	11944 <map_iternext+0x66>
            m_del(mp_obj_t, nextses, self->n_iters);
   1193a:	68f8      	ldr	r0, [r7, #12]
   1193c:	f7ee fd4c 	bl	3d8 <m_free>
            return MP_OBJ_STOP_ITERATION;
   11940:	2304      	movs	r3, #4
   11942:	e016      	b.n	11972 <map_iternext+0x94>
        }
        nextses[i] = next;
   11944:	697b      	ldr	r3, [r7, #20]
   11946:	009b      	lsls	r3, r3, #2
   11948:	68fa      	ldr	r2, [r7, #12]
   1194a:	4413      	add	r3, r2
   1194c:	68ba      	ldr	r2, [r7, #8]
   1194e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < self->n_iters; i++) {
   11950:	697b      	ldr	r3, [r7, #20]
   11952:	3301      	adds	r3, #1
   11954:	617b      	str	r3, [r7, #20]
   11956:	693b      	ldr	r3, [r7, #16]
   11958:	685a      	ldr	r2, [r3, #4]
   1195a:	697b      	ldr	r3, [r7, #20]
   1195c:	429a      	cmp	r2, r3
   1195e:	d8df      	bhi.n	11920 <map_iternext+0x42>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
   11960:	693b      	ldr	r3, [r7, #16]
   11962:	6898      	ldr	r0, [r3, #8]
   11964:	693b      	ldr	r3, [r7, #16]
   11966:	6859      	ldr	r1, [r3, #4]
   11968:	68fb      	ldr	r3, [r7, #12]
   1196a:	2200      	movs	r2, #0
   1196c:	f7fa f9cf 	bl	bd0e <mp_call_function_n_kw>
   11970:	4603      	mov	r3, r0
}
   11972:	4618      	mov	r0, r3
   11974:	3718      	adds	r7, #24
   11976:	46bd      	mov	sp, r7
   11978:	bd80      	pop	{r7, pc}
   1197a:	bf00      	nop
   1197c:	00022f84 	.word	0x00022f84
   11980:	00022f14 	.word	0x00022f14
   11984:	00022fc0 	.word	0x00022fc0
   11988:	00022f70 	.word	0x00022f70

0001198c <mp_module_call_init>:
void mp_module_register(qstr qstr, mp_obj_t module);

#if MICROPY_MODULE_BUILTIN_INIT
void mp_module_call_init(qstr module_name, mp_obj_t module_obj);
#else
static inline void mp_module_call_init(qstr module_name, mp_obj_t module_obj) {
   1198c:	b480      	push	{r7}
   1198e:	b083      	sub	sp, #12
   11990:	af00      	add	r7, sp, #0
   11992:	6078      	str	r0, [r7, #4]
   11994:	6039      	str	r1, [r7, #0]
    (void)module_name;
    (void)module_obj;
}
   11996:	bf00      	nop
   11998:	370c      	adds	r7, #12
   1199a:	46bd      	mov	sp, r7
   1199c:	f85d 7b04 	ldr.w	r7, [sp], #4
   119a0:	4770      	bx	lr

000119a2 <module_print>:

#include "py/objmodule.h"
#include "py/runtime.h"
#include "py/builtin.h"

STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   119a2:	b580      	push	{r7, lr}
   119a4:	b088      	sub	sp, #32
   119a6:	af00      	add	r7, sp, #0
   119a8:	60f8      	str	r0, [r7, #12]
   119aa:	60b9      	str	r1, [r7, #8]
   119ac:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   119ae:	68bb      	ldr	r3, [r7, #8]
   119b0:	61bb      	str	r3, [r7, #24]

    const char *module_name = "";
   119b2:	4b0e      	ldr	r3, [pc, #56]	; (119ec <module_print+0x4a>)
   119b4:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
   119b6:	69bb      	ldr	r3, [r7, #24]
   119b8:	685b      	ldr	r3, [r3, #4]
   119ba:	3304      	adds	r3, #4
   119bc:	2200      	movs	r2, #0
   119be:	2172      	movs	r1, #114	; 0x72
   119c0:	4618      	mov	r0, r3
   119c2:	f7fb fccb 	bl	d35c <mp_map_lookup>
   119c6:	6178      	str	r0, [r7, #20]
    if (elem != NULL) {
   119c8:	697b      	ldr	r3, [r7, #20]
   119ca:	2b00      	cmp	r3, #0
   119cc:	d005      	beq.n	119da <module_print+0x38>
        module_name = mp_obj_str_get_str(elem->value);
   119ce:	697b      	ldr	r3, [r7, #20]
   119d0:	685b      	ldr	r3, [r3, #4]
   119d2:	4618      	mov	r0, r3
   119d4:	f003 fd2e 	bl	15434 <mp_obj_str_get_str>
   119d8:	61f8      	str	r0, [r7, #28]
        mp_printf(print, "<module '%s' from '%s'>", module_name, mp_obj_str_get_str(elem->value));
        return;
    }
#endif

    mp_printf(print, "<module '%s'>", module_name);
   119da:	69fa      	ldr	r2, [r7, #28]
   119dc:	4904      	ldr	r1, [pc, #16]	; (119f0 <module_print+0x4e>)
   119de:	68f8      	ldr	r0, [r7, #12]
   119e0:	f7f0 fa82 	bl	1ee8 <mp_printf>
}
   119e4:	bf00      	nop
   119e6:	3720      	adds	r7, #32
   119e8:	46bd      	mov	sp, r7
   119ea:	bd80      	pop	{r7, pc}
   119ec:	00022fd0 	.word	0x00022fd0
   119f0:	00022fd4 	.word	0x00022fd4

000119f4 <module_attr>:

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   119f4:	b580      	push	{r7, lr}
   119f6:	b088      	sub	sp, #32
   119f8:	af00      	add	r7, sp, #0
   119fa:	60f8      	str	r0, [r7, #12]
   119fc:	60b9      	str	r1, [r7, #8]
   119fe:	607a      	str	r2, [r7, #4]
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11a00:	68fb      	ldr	r3, [r7, #12]
   11a02:	61fb      	str	r3, [r7, #28]
    if (dest[0] == MP_OBJ_NULL) {
   11a04:	687b      	ldr	r3, [r7, #4]
   11a06:	681b      	ldr	r3, [r3, #0]
   11a08:	2b00      	cmp	r3, #0
   11a0a:	d113      	bne.n	11a34 <module_attr+0x40>
        // load attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   11a0c:	69fb      	ldr	r3, [r7, #28]
   11a0e:	685b      	ldr	r3, [r3, #4]
   11a10:	1d18      	adds	r0, r3, #4
   11a12:	68bb      	ldr	r3, [r7, #8]
   11a14:	009b      	lsls	r3, r3, #2
   11a16:	f043 0302 	orr.w	r3, r3, #2
   11a1a:	2200      	movs	r2, #0
   11a1c:	4619      	mov	r1, r3
   11a1e:	f7fb fc9d 	bl	d35c <mp_map_lookup>
   11a22:	61b8      	str	r0, [r7, #24]
        if (elem != NULL) {
   11a24:	69bb      	ldr	r3, [r7, #24]
   11a26:	2b00      	cmp	r3, #0
   11a28:	d02d      	beq.n	11a86 <module_attr+0x92>
            dest[0] = elem->value;
   11a2a:	69bb      	ldr	r3, [r7, #24]
   11a2c:	685a      	ldr	r2, [r3, #4]
   11a2e:	687b      	ldr	r3, [r7, #4]
   11a30:	601a      	str	r2, [r3, #0]
   11a32:	e028      	b.n	11a86 <module_attr+0x92>
            }
        #endif
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
   11a34:	69fb      	ldr	r3, [r7, #28]
   11a36:	685b      	ldr	r3, [r3, #4]
   11a38:	617b      	str	r3, [r7, #20]
        if (dict->map.is_fixed) {
   11a3a:	697b      	ldr	r3, [r7, #20]
   11a3c:	791b      	ldrb	r3, [r3, #4]
   11a3e:	f003 0302 	and.w	r3, r3, #2
   11a42:	b2db      	uxtb	r3, r3
   11a44:	2b00      	cmp	r3, #0
   11a46:	d11d      	bne.n	11a84 <module_attr+0x90>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
   11a48:	687b      	ldr	r3, [r7, #4]
   11a4a:	3304      	adds	r3, #4
   11a4c:	681b      	ldr	r3, [r3, #0]
   11a4e:	2b00      	cmp	r3, #0
   11a50:	d108      	bne.n	11a64 <module_attr+0x70>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
   11a52:	68bb      	ldr	r3, [r7, #8]
   11a54:	009b      	lsls	r3, r3, #2
   11a56:	f043 0302 	orr.w	r3, r3, #2
   11a5a:	4619      	mov	r1, r3
   11a5c:	6978      	ldr	r0, [r7, #20]
   11a5e:	f7fd fb1d 	bl	f09c <mp_obj_dict_delete>
   11a62:	e00b      	b.n	11a7c <module_attr+0x88>
        } else {
            // store attribute
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
   11a64:	68bb      	ldr	r3, [r7, #8]
   11a66:	009b      	lsls	r3, r3, #2
   11a68:	f043 0302 	orr.w	r3, r3, #2
   11a6c:	4619      	mov	r1, r3
   11a6e:	687b      	ldr	r3, [r7, #4]
   11a70:	3304      	adds	r3, #4
   11a72:	681b      	ldr	r3, [r3, #0]
   11a74:	461a      	mov	r2, r3
   11a76:	6978      	ldr	r0, [r7, #20]
   11a78:	f7fd fadb 	bl	f032 <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
   11a7c:	687b      	ldr	r3, [r7, #4]
   11a7e:	2200      	movs	r2, #0
   11a80:	601a      	str	r2, [r3, #0]
   11a82:	e000      	b.n	11a86 <module_attr+0x92>
                return;
   11a84:	bf00      	nop
    }
}
   11a86:	3720      	adds	r7, #32
   11a88:	46bd      	mov	sp, r7
   11a8a:	bd80      	pop	{r7, pc}

00011a8c <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
   11a8c:	b580      	push	{r7, lr}
   11a8e:	b086      	sub	sp, #24
   11a90:	af00      	add	r7, sp, #0
   11a92:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11a94:	4b18      	ldr	r3, [pc, #96]	; (11af8 <mp_obj_new_module+0x6c>)
   11a96:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   11a98:	687b      	ldr	r3, [r7, #4]
   11a9a:	009b      	lsls	r3, r3, #2
   11a9c:	f043 0302 	orr.w	r3, r3, #2
   11aa0:	2201      	movs	r2, #1
   11aa2:	4619      	mov	r1, r3
   11aa4:	6978      	ldr	r0, [r7, #20]
   11aa6:	f7fb fc59 	bl	d35c <mp_map_lookup>
   11aaa:	6138      	str	r0, [r7, #16]
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
   11aac:	693b      	ldr	r3, [r7, #16]
   11aae:	685b      	ldr	r3, [r3, #4]
   11ab0:	2b00      	cmp	r3, #0
   11ab2:	d002      	beq.n	11aba <mp_obj_new_module+0x2e>
        return el->value;
   11ab4:	693b      	ldr	r3, [r7, #16]
   11ab6:	685b      	ldr	r3, [r3, #4]
   11ab8:	e01a      	b.n	11af0 <mp_obj_new_module+0x64>
    }

    // create new module object
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
   11aba:	2008      	movs	r0, #8
   11abc:	f7ee fc2e 	bl	31c <m_malloc>
   11ac0:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_module;
   11ac2:	68fb      	ldr	r3, [r7, #12]
   11ac4:	4a0d      	ldr	r2, [pc, #52]	; (11afc <mp_obj_new_module+0x70>)
   11ac6:	601a      	str	r2, [r3, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
   11ac8:	2001      	movs	r0, #1
   11aca:	f7fd fa91 	bl	eff0 <mp_obj_new_dict>
   11ace:	4602      	mov	r2, r0
   11ad0:	68fb      	ldr	r3, [r7, #12]
   11ad2:	605a      	str	r2, [r3, #4]

    // store __name__ entry in the module
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
   11ad4:	68fb      	ldr	r3, [r7, #12]
   11ad6:	6858      	ldr	r0, [r3, #4]
   11ad8:	687b      	ldr	r3, [r7, #4]
   11ada:	009b      	lsls	r3, r3, #2
   11adc:	f043 0302 	orr.w	r3, r3, #2
   11ae0:	461a      	mov	r2, r3
   11ae2:	2172      	movs	r1, #114	; 0x72
   11ae4:	f7fd faa5 	bl	f032 <mp_obj_dict_store>

    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);
   11ae8:	693b      	ldr	r3, [r7, #16]
   11aea:	68fa      	ldr	r2, [r7, #12]
   11aec:	605a      	str	r2, [r3, #4]

    // return the new module
    return MP_OBJ_FROM_PTR(o);
   11aee:	68fb      	ldr	r3, [r7, #12]
}
   11af0:	4618      	mov	r0, r3
   11af2:	3718      	adds	r7, #24
   11af4:	46bd      	mov	sp, r7
   11af6:	bd80      	pop	{r7, pc}
   11af8:	20001318 	.word	0x20001318
   11afc:	00022fe4 	.word	0x00022fe4

00011b00 <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
   11b00:	b580      	push	{r7, lr}
   11b02:	b084      	sub	sp, #16
   11b04:	af00      	add	r7, sp, #0
   11b06:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11b08:	4b14      	ldr	r3, [pc, #80]	; (11b5c <mp_module_get+0x5c>)
   11b0a:	60bb      	str	r3, [r7, #8]
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11b0c:	687b      	ldr	r3, [r7, #4]
   11b0e:	009b      	lsls	r3, r3, #2
   11b10:	f043 0302 	orr.w	r3, r3, #2
   11b14:	2200      	movs	r2, #0
   11b16:	4619      	mov	r1, r3
   11b18:	68b8      	ldr	r0, [r7, #8]
   11b1a:	f7fb fc1f 	bl	d35c <mp_map_lookup>
   11b1e:	60f8      	str	r0, [r7, #12]

    if (el == NULL) {
   11b20:	68fb      	ldr	r3, [r7, #12]
   11b22:	2b00      	cmp	r3, #0
   11b24:	d114      	bne.n	11b50 <mp_module_get+0x50>
        // module not found, look for builtin module names
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11b26:	687b      	ldr	r3, [r7, #4]
   11b28:	009b      	lsls	r3, r3, #2
   11b2a:	f043 0302 	orr.w	r3, r3, #2
   11b2e:	2200      	movs	r2, #0
   11b30:	4619      	mov	r1, r3
   11b32:	480b      	ldr	r0, [pc, #44]	; (11b60 <mp_module_get+0x60>)
   11b34:	f7fb fc12 	bl	d35c <mp_map_lookup>
   11b38:	60f8      	str	r0, [r7, #12]
        if (el == NULL) {
   11b3a:	68fb      	ldr	r3, [r7, #12]
   11b3c:	2b00      	cmp	r3, #0
   11b3e:	d101      	bne.n	11b44 <mp_module_get+0x44>
            return MP_OBJ_NULL;
   11b40:	2300      	movs	r3, #0
   11b42:	e007      	b.n	11b54 <mp_module_get+0x54>
        }
        mp_module_call_init(module_name, el->value);
   11b44:	68fb      	ldr	r3, [r7, #12]
   11b46:	685b      	ldr	r3, [r3, #4]
   11b48:	4619      	mov	r1, r3
   11b4a:	6878      	ldr	r0, [r7, #4]
   11b4c:	f7ff ff1e 	bl	1198c <mp_module_call_init>
    }

    // module found, return it
    return el->value;
   11b50:	68fb      	ldr	r3, [r7, #12]
   11b52:	685b      	ldr	r3, [r3, #4]
}
   11b54:	4618      	mov	r0, r3
   11b56:	3710      	adds	r7, #16
   11b58:	46bd      	mov	sp, r7
   11b5a:	bd80      	pop	{r7, pc}
   11b5c:	20001318 	.word	0x20001318
   11b60:	00023040 	.word	0x00023040

00011b64 <mp_module_register>:

void mp_module_register(qstr qst, mp_obj_t module) {
   11b64:	b580      	push	{r7, lr}
   11b66:	b084      	sub	sp, #16
   11b68:	af00      	add	r7, sp, #0
   11b6a:	6078      	str	r0, [r7, #4]
   11b6c:	6039      	str	r1, [r7, #0]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11b6e:	4b09      	ldr	r3, [pc, #36]	; (11b94 <mp_module_register+0x30>)
   11b70:	60fb      	str	r3, [r7, #12]
    mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = module;
   11b72:	687b      	ldr	r3, [r7, #4]
   11b74:	009b      	lsls	r3, r3, #2
   11b76:	f043 0302 	orr.w	r3, r3, #2
   11b7a:	2201      	movs	r2, #1
   11b7c:	4619      	mov	r1, r3
   11b7e:	68f8      	ldr	r0, [r7, #12]
   11b80:	f7fb fbec 	bl	d35c <mp_map_lookup>
   11b84:	4602      	mov	r2, r0
   11b86:	683b      	ldr	r3, [r7, #0]
   11b88:	6053      	str	r3, [r2, #4]
}
   11b8a:	bf00      	nop
   11b8c:	3710      	adds	r7, #16
   11b8e:	46bd      	mov	sp, r7
   11b90:	bd80      	pop	{r7, pc}
   11b92:	bf00      	nop
   11b94:	20001318 	.word	0x20001318

00011b98 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   11b98:	b580      	push	{r7, lr}
   11b9a:	b084      	sub	sp, #16
   11b9c:	af00      	add	r7, sp, #0
   11b9e:	60f8      	str	r0, [r7, #12]
   11ba0:	60b9      	str	r1, [r7, #8]
   11ba2:	607a      	str	r2, [r7, #4]
   11ba4:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   11ba6:	687b      	ldr	r3, [r7, #4]
   11ba8:	045a      	lsls	r2, r3, #17
   11baa:	683b      	ldr	r3, [r7, #0]
   11bac:	005b      	lsls	r3, r3, #1
   11bae:	431a      	orrs	r2, r3
   11bb0:	7e3b      	ldrb	r3, [r7, #24]
   11bb2:	2b00      	cmp	r3, #0
   11bb4:	d001      	beq.n	11bba <mp_arg_check_num+0x22>
   11bb6:	2301      	movs	r3, #1
   11bb8:	e000      	b.n	11bbc <mp_arg_check_num+0x24>
   11bba:	2300      	movs	r3, #0
   11bbc:	4313      	orrs	r3, r2
   11bbe:	461a      	mov	r2, r3
   11bc0:	68b9      	ldr	r1, [r7, #8]
   11bc2:	68f8      	ldr	r0, [r7, #12]
   11bc4:	f7fb f976 	bl	ceb4 <mp_arg_check_num_sig>
}
   11bc8:	bf00      	nop
   11bca:	3710      	adds	r7, #16
   11bcc:	46bd      	mov	sp, r7
   11bce:	bd80      	pop	{r7, pc}

00011bd0 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11bd0:	b580      	push	{r7, lr}
   11bd2:	b088      	sub	sp, #32
   11bd4:	af02      	add	r7, sp, #8
   11bd6:	60f8      	str	r0, [r7, #12]
   11bd8:	60b9      	str	r1, [r7, #8]
   11bda:	607a      	str	r2, [r7, #4]
   11bdc:	603b      	str	r3, [r7, #0]
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   11bde:	2300      	movs	r3, #0
   11be0:	9300      	str	r3, [sp, #0]
   11be2:	2300      	movs	r3, #0
   11be4:	2200      	movs	r2, #0
   11be6:	6879      	ldr	r1, [r7, #4]
   11be8:	68b8      	ldr	r0, [r7, #8]
   11bea:	f7ff ffd5 	bl	11b98 <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
   11bee:	2004      	movs	r0, #4
   11bf0:	f7ee fb94 	bl	31c <m_malloc>
   11bf4:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11bf6:	697b      	ldr	r3, [r7, #20]
   11bf8:	68fa      	ldr	r2, [r7, #12]
   11bfa:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   11bfc:	697b      	ldr	r3, [r7, #20]
}
   11bfe:	4618      	mov	r0, r3
   11c00:	3718      	adds	r7, #24
   11c02:	46bd      	mov	sp, r7
   11c04:	bd80      	pop	{r7, pc}

00011c06 <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
   11c06:	b580      	push	{r7, lr}
   11c08:	b084      	sub	sp, #16
   11c0a:	af00      	add	r7, sp, #0
   11c0c:	6078      	str	r0, [r7, #4]
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
   11c0e:	687b      	ldr	r3, [r7, #4]
   11c10:	60fb      	str	r3, [r7, #12]
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
   11c12:	68fb      	ldr	r3, [r7, #12]
   11c14:	685b      	ldr	r3, [r3, #4]
   11c16:	6878      	ldr	r0, [r7, #4]
   11c18:	4798      	blx	r3
   11c1a:	4603      	mov	r3, r0
}
   11c1c:	4618      	mov	r0, r3
   11c1e:	3710      	adds	r7, #16
   11c20:	46bd      	mov	sp, r7
   11c22:	bd80      	pop	{r7, pc}

00011c24 <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11c24:	b580      	push	{r7, lr}
   11c26:	b084      	sub	sp, #16
   11c28:	af00      	add	r7, sp, #0
   11c2a:	60f8      	str	r0, [r7, #12]
   11c2c:	60b9      	str	r1, [r7, #8]
   11c2e:	607a      	str	r2, [r7, #4]
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
   11c30:	4903      	ldr	r1, [pc, #12]	; (11c40 <none_print+0x1c>)
   11c32:	68f8      	ldr	r0, [r7, #12]
   11c34:	f7ef fe46 	bl	18c4 <mp_print_str>
    }
}
   11c38:	bf00      	nop
   11c3a:	3710      	adds	r7, #16
   11c3c:	46bd      	mov	sp, r7
   11c3e:	bd80      	pop	{r7, pc}
   11c40:	000230c4 	.word	0x000230c4

00011c44 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   11c44:	b480      	push	{r7}
   11c46:	b083      	sub	sp, #12
   11c48:	af00      	add	r7, sp, #0
   11c4a:	6078      	str	r0, [r7, #4]
   11c4c:	687b      	ldr	r3, [r7, #4]
   11c4e:	2b00      	cmp	r3, #0
   11c50:	d001      	beq.n	11c56 <mp_obj_new_bool+0x12>
   11c52:	4b04      	ldr	r3, [pc, #16]	; (11c64 <mp_obj_new_bool+0x20>)
   11c54:	e000      	b.n	11c58 <mp_obj_new_bool+0x14>
   11c56:	4b04      	ldr	r3, [pc, #16]	; (11c68 <mp_obj_new_bool+0x24>)
   11c58:	4618      	mov	r0, r3
   11c5a:	370c      	adds	r7, #12
   11c5c:	46bd      	mov	sp, r7
   11c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c62:	4770      	bx	lr
   11c64:	0002189c 	.word	0x0002189c
   11c68:	00021894 	.word	0x00021894

00011c6c <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   11c6c:	b580      	push	{r7, lr}
   11c6e:	b084      	sub	sp, #16
   11c70:	af00      	add	r7, sp, #0
   11c72:	60f8      	str	r0, [r7, #12]
   11c74:	60b9      	str	r1, [r7, #8]
   11c76:	607a      	str	r2, [r7, #4]
   11c78:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   11c7a:	687b      	ldr	r3, [r7, #4]
   11c7c:	045a      	lsls	r2, r3, #17
   11c7e:	683b      	ldr	r3, [r7, #0]
   11c80:	005b      	lsls	r3, r3, #1
   11c82:	431a      	orrs	r2, r3
   11c84:	7e3b      	ldrb	r3, [r7, #24]
   11c86:	2b00      	cmp	r3, #0
   11c88:	d001      	beq.n	11c8e <mp_arg_check_num+0x22>
   11c8a:	2301      	movs	r3, #1
   11c8c:	e000      	b.n	11c90 <mp_arg_check_num+0x24>
   11c8e:	2300      	movs	r3, #0
   11c90:	4313      	orrs	r3, r2
   11c92:	461a      	mov	r2, r3
   11c94:	68b9      	ldr	r1, [r7, #8]
   11c96:	68f8      	ldr	r0, [r7, #12]
   11c98:	f7fb f90c 	bl	ceb4 <mp_arg_check_num_sig>
}
   11c9c:	bf00      	nop
   11c9e:	3710      	adds	r7, #16
   11ca0:	46bd      	mov	sp, r7
   11ca2:	bd80      	pop	{r7, pc}

00011ca4 <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
   11ca4:	b480      	push	{r7}
   11ca6:	b085      	sub	sp, #20
   11ca8:	af00      	add	r7, sp, #0
   11caa:	6078      	str	r0, [r7, #4]
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
   11cac:	687b      	ldr	r3, [r7, #4]
   11cae:	60fb      	str	r3, [r7, #12]
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
   11cb0:	68fb      	ldr	r3, [r7, #12]
   11cb2:	68db      	ldr	r3, [r3, #12]
   11cb4:	2b00      	cmp	r3, #0
   11cb6:	dd05      	ble.n	11cc4 <range_it_iternext+0x20>
   11cb8:	68fb      	ldr	r3, [r7, #12]
   11cba:	685a      	ldr	r2, [r3, #4]
   11cbc:	68fb      	ldr	r3, [r7, #12]
   11cbe:	689b      	ldr	r3, [r3, #8]
   11cc0:	429a      	cmp	r2, r3
   11cc2:	db09      	blt.n	11cd8 <range_it_iternext+0x34>
   11cc4:	68fb      	ldr	r3, [r7, #12]
   11cc6:	68db      	ldr	r3, [r3, #12]
   11cc8:	2b00      	cmp	r3, #0
   11cca:	da14      	bge.n	11cf6 <range_it_iternext+0x52>
   11ccc:	68fb      	ldr	r3, [r7, #12]
   11cce:	685a      	ldr	r2, [r3, #4]
   11cd0:	68fb      	ldr	r3, [r7, #12]
   11cd2:	689b      	ldr	r3, [r3, #8]
   11cd4:	429a      	cmp	r2, r3
   11cd6:	dd0e      	ble.n	11cf6 <range_it_iternext+0x52>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
   11cd8:	68fb      	ldr	r3, [r7, #12]
   11cda:	685b      	ldr	r3, [r3, #4]
   11cdc:	005b      	lsls	r3, r3, #1
   11cde:	f043 0301 	orr.w	r3, r3, #1
   11ce2:	60bb      	str	r3, [r7, #8]
        o->cur += o->step;
   11ce4:	68fb      	ldr	r3, [r7, #12]
   11ce6:	685a      	ldr	r2, [r3, #4]
   11ce8:	68fb      	ldr	r3, [r7, #12]
   11cea:	68db      	ldr	r3, [r3, #12]
   11cec:	441a      	add	r2, r3
   11cee:	68fb      	ldr	r3, [r7, #12]
   11cf0:	605a      	str	r2, [r3, #4]
        return o_out;
   11cf2:	68bb      	ldr	r3, [r7, #8]
   11cf4:	e000      	b.n	11cf8 <range_it_iternext+0x54>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11cf6:	2304      	movs	r3, #4
    }
}
   11cf8:	4618      	mov	r0, r3
   11cfa:	3714      	adds	r7, #20
   11cfc:	46bd      	mov	sp, r7
   11cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d02:	4770      	bx	lr

00011d04 <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
   11d04:	b480      	push	{r7}
   11d06:	b087      	sub	sp, #28
   11d08:	af00      	add	r7, sp, #0
   11d0a:	60f8      	str	r0, [r7, #12]
   11d0c:	60b9      	str	r1, [r7, #8]
   11d0e:	607a      	str	r2, [r7, #4]
   11d10:	603b      	str	r3, [r7, #0]
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
   11d12:	683b      	ldr	r3, [r7, #0]
   11d14:	617b      	str	r3, [r7, #20]
    o->base.type = &range_it_type;
   11d16:	697b      	ldr	r3, [r7, #20]
   11d18:	4a08      	ldr	r2, [pc, #32]	; (11d3c <mp_obj_new_range_iterator+0x38>)
   11d1a:	601a      	str	r2, [r3, #0]
    o->cur = cur;
   11d1c:	697b      	ldr	r3, [r7, #20]
   11d1e:	68fa      	ldr	r2, [r7, #12]
   11d20:	605a      	str	r2, [r3, #4]
    o->stop = stop;
   11d22:	697b      	ldr	r3, [r7, #20]
   11d24:	68ba      	ldr	r2, [r7, #8]
   11d26:	609a      	str	r2, [r3, #8]
    o->step = step;
   11d28:	697b      	ldr	r3, [r7, #20]
   11d2a:	687a      	ldr	r2, [r7, #4]
   11d2c:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11d2e:	697b      	ldr	r3, [r7, #20]
}
   11d30:	4618      	mov	r0, r3
   11d32:	371c      	adds	r7, #28
   11d34:	46bd      	mov	sp, r7
   11d36:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d3a:	4770      	bx	lr
   11d3c:	0002310c 	.word	0x0002310c

00011d40 <range_print>:
    mp_int_t start;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_t;

STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11d40:	b580      	push	{r7, lr}
   11d42:	b086      	sub	sp, #24
   11d44:	af00      	add	r7, sp, #0
   11d46:	60f8      	str	r0, [r7, #12]
   11d48:	60b9      	str	r1, [r7, #8]
   11d4a:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11d4c:	68bb      	ldr	r3, [r7, #8]
   11d4e:	617b      	str	r3, [r7, #20]
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
   11d50:	697b      	ldr	r3, [r7, #20]
   11d52:	685a      	ldr	r2, [r3, #4]
   11d54:	697b      	ldr	r3, [r7, #20]
   11d56:	689b      	ldr	r3, [r3, #8]
   11d58:	490b      	ldr	r1, [pc, #44]	; (11d88 <range_print+0x48>)
   11d5a:	68f8      	ldr	r0, [r7, #12]
   11d5c:	f7f0 f8c4 	bl	1ee8 <mp_printf>
    if (self->step == 1) {
   11d60:	697b      	ldr	r3, [r7, #20]
   11d62:	68db      	ldr	r3, [r3, #12]
   11d64:	2b01      	cmp	r3, #1
   11d66:	d104      	bne.n	11d72 <range_print+0x32>
        mp_print_str(print, ")");
   11d68:	4908      	ldr	r1, [pc, #32]	; (11d8c <range_print+0x4c>)
   11d6a:	68f8      	ldr	r0, [r7, #12]
   11d6c:	f7ef fdaa 	bl	18c4 <mp_print_str>
    } else {
        mp_printf(print, ", " INT_FMT ")", self->step);
    }
}
   11d70:	e006      	b.n	11d80 <range_print+0x40>
        mp_printf(print, ", " INT_FMT ")", self->step);
   11d72:	697b      	ldr	r3, [r7, #20]
   11d74:	68db      	ldr	r3, [r3, #12]
   11d76:	461a      	mov	r2, r3
   11d78:	4905      	ldr	r1, [pc, #20]	; (11d90 <range_print+0x50>)
   11d7a:	68f8      	ldr	r0, [r7, #12]
   11d7c:	f7f0 f8b4 	bl	1ee8 <mp_printf>
}
   11d80:	bf00      	nop
   11d82:	3718      	adds	r7, #24
   11d84:	46bd      	mov	sp, r7
   11d86:	bd80      	pop	{r7, pc}
   11d88:	00023148 	.word	0x00023148
   11d8c:	00023158 	.word	0x00023158
   11d90:	0002315c 	.word	0x0002315c

00011d94 <range_make_new>:

STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11d94:	b580      	push	{r7, lr}
   11d96:	b088      	sub	sp, #32
   11d98:	af02      	add	r7, sp, #8
   11d9a:	60f8      	str	r0, [r7, #12]
   11d9c:	60b9      	str	r1, [r7, #8]
   11d9e:	607a      	str	r2, [r7, #4]
   11da0:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   11da2:	2300      	movs	r3, #0
   11da4:	9300      	str	r3, [sp, #0]
   11da6:	2303      	movs	r3, #3
   11da8:	2201      	movs	r2, #1
   11daa:	6879      	ldr	r1, [r7, #4]
   11dac:	68b8      	ldr	r0, [r7, #8]
   11dae:	f7ff ff5d 	bl	11c6c <mp_arg_check_num>

    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
   11db2:	2010      	movs	r0, #16
   11db4:	f7ee fab2 	bl	31c <m_malloc>
   11db8:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11dba:	697b      	ldr	r3, [r7, #20]
   11dbc:	68fa      	ldr	r2, [r7, #12]
   11dbe:	601a      	str	r2, [r3, #0]
    o->start = 0;
   11dc0:	697b      	ldr	r3, [r7, #20]
   11dc2:	2200      	movs	r2, #0
   11dc4:	605a      	str	r2, [r3, #4]
    o->step = 1;
   11dc6:	697b      	ldr	r3, [r7, #20]
   11dc8:	2201      	movs	r2, #1
   11dca:	60da      	str	r2, [r3, #12]

    if (n_args == 1) {
   11dcc:	68bb      	ldr	r3, [r7, #8]
   11dce:	2b01      	cmp	r3, #1
   11dd0:	d108      	bne.n	11de4 <range_make_new+0x50>
        o->stop = mp_obj_get_int(args[0]);
   11dd2:	683b      	ldr	r3, [r7, #0]
   11dd4:	681b      	ldr	r3, [r3, #0]
   11dd6:	4618      	mov	r0, r3
   11dd8:	f7fb fe46 	bl	da68 <mp_obj_get_int>
   11ddc:	4602      	mov	r2, r0
   11dde:	697b      	ldr	r3, [r7, #20]
   11de0:	609a      	str	r2, [r3, #8]
   11de2:	e023      	b.n	11e2c <range_make_new+0x98>
    } else {
        o->start = mp_obj_get_int(args[0]);
   11de4:	683b      	ldr	r3, [r7, #0]
   11de6:	681b      	ldr	r3, [r3, #0]
   11de8:	4618      	mov	r0, r3
   11dea:	f7fb fe3d 	bl	da68 <mp_obj_get_int>
   11dee:	4602      	mov	r2, r0
   11df0:	697b      	ldr	r3, [r7, #20]
   11df2:	605a      	str	r2, [r3, #4]
        o->stop = mp_obj_get_int(args[1]);
   11df4:	683b      	ldr	r3, [r7, #0]
   11df6:	3304      	adds	r3, #4
   11df8:	681b      	ldr	r3, [r3, #0]
   11dfa:	4618      	mov	r0, r3
   11dfc:	f7fb fe34 	bl	da68 <mp_obj_get_int>
   11e00:	4602      	mov	r2, r0
   11e02:	697b      	ldr	r3, [r7, #20]
   11e04:	609a      	str	r2, [r3, #8]
        if (n_args == 3) {
   11e06:	68bb      	ldr	r3, [r7, #8]
   11e08:	2b03      	cmp	r3, #3
   11e0a:	d10f      	bne.n	11e2c <range_make_new+0x98>
            o->step = mp_obj_get_int(args[2]);
   11e0c:	683b      	ldr	r3, [r7, #0]
   11e0e:	3308      	adds	r3, #8
   11e10:	681b      	ldr	r3, [r3, #0]
   11e12:	4618      	mov	r0, r3
   11e14:	f7fb fe28 	bl	da68 <mp_obj_get_int>
   11e18:	4602      	mov	r2, r0
   11e1a:	697b      	ldr	r3, [r7, #20]
   11e1c:	60da      	str	r2, [r3, #12]
            if (o->step == 0) {
   11e1e:	697b      	ldr	r3, [r7, #20]
   11e20:	68db      	ldr	r3, [r3, #12]
   11e22:	2b00      	cmp	r3, #0
   11e24:	d102      	bne.n	11e2c <range_make_new+0x98>
                mp_raise_ValueError("zero step");
   11e26:	4804      	ldr	r0, [pc, #16]	; (11e38 <range_make_new+0xa4>)
   11e28:	f7fb f813 	bl	ce52 <mp_raise_ValueError>
            }
        }
    }

    return MP_OBJ_FROM_PTR(o);
   11e2c:	697b      	ldr	r3, [r7, #20]
}
   11e2e:	4618      	mov	r0, r3
   11e30:	3718      	adds	r7, #24
   11e32:	46bd      	mov	sp, r7
   11e34:	bd80      	pop	{r7, pc}
   11e36:	bf00      	nop
   11e38:	00023164 	.word	0x00023164

00011e3c <range_len>:

STATIC mp_int_t range_len(mp_obj_range_t *self) {
   11e3c:	b480      	push	{r7}
   11e3e:	b085      	sub	sp, #20
   11e40:	af00      	add	r7, sp, #0
   11e42:	6078      	str	r0, [r7, #4]
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
   11e44:	687b      	ldr	r3, [r7, #4]
   11e46:	689a      	ldr	r2, [r3, #8]
   11e48:	687b      	ldr	r3, [r7, #4]
   11e4a:	685b      	ldr	r3, [r3, #4]
   11e4c:	1ad2      	subs	r2, r2, r3
   11e4e:	687b      	ldr	r3, [r7, #4]
   11e50:	68db      	ldr	r3, [r3, #12]
   11e52:	4413      	add	r3, r2
   11e54:	60fb      	str	r3, [r7, #12]
    if (self->step > 0) {
   11e56:	687b      	ldr	r3, [r7, #4]
   11e58:	68db      	ldr	r3, [r3, #12]
   11e5a:	2b00      	cmp	r3, #0
   11e5c:	dd03      	ble.n	11e66 <range_len+0x2a>
        len -= 1;
   11e5e:	68fb      	ldr	r3, [r7, #12]
   11e60:	3b01      	subs	r3, #1
   11e62:	60fb      	str	r3, [r7, #12]
   11e64:	e002      	b.n	11e6c <range_len+0x30>
    } else {
        len += 1;
   11e66:	68fb      	ldr	r3, [r7, #12]
   11e68:	3301      	adds	r3, #1
   11e6a:	60fb      	str	r3, [r7, #12]
    }
    len = len / self->step;
   11e6c:	687b      	ldr	r3, [r7, #4]
   11e6e:	68db      	ldr	r3, [r3, #12]
   11e70:	68fa      	ldr	r2, [r7, #12]
   11e72:	fb92 f3f3 	sdiv	r3, r2, r3
   11e76:	60fb      	str	r3, [r7, #12]
    if (len < 0) {
   11e78:	68fb      	ldr	r3, [r7, #12]
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	da01      	bge.n	11e82 <range_len+0x46>
        len = 0;
   11e7e:	2300      	movs	r3, #0
   11e80:	60fb      	str	r3, [r7, #12]
    }
    return len;
   11e82:	68fb      	ldr	r3, [r7, #12]
}
   11e84:	4618      	mov	r0, r3
   11e86:	3714      	adds	r7, #20
   11e88:	46bd      	mov	sp, r7
   11e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e8e:	4770      	bx	lr

00011e90 <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   11e90:	b580      	push	{r7, lr}
   11e92:	b084      	sub	sp, #16
   11e94:	af00      	add	r7, sp, #0
   11e96:	6078      	str	r0, [r7, #4]
   11e98:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11e9a:	683b      	ldr	r3, [r7, #0]
   11e9c:	60fb      	str	r3, [r7, #12]
    mp_int_t len = range_len(self);
   11e9e:	68f8      	ldr	r0, [r7, #12]
   11ea0:	f7ff ffcc 	bl	11e3c <range_len>
   11ea4:	60b8      	str	r0, [r7, #8]
    switch (op) {
   11ea6:	687b      	ldr	r3, [r7, #4]
   11ea8:	2b04      	cmp	r3, #4
   11eaa:	d002      	beq.n	11eb2 <range_unary_op+0x22>
   11eac:	2b05      	cmp	r3, #5
   11eae:	d00b      	beq.n	11ec8 <range_unary_op+0x38>
   11eb0:	e00f      	b.n	11ed2 <range_unary_op+0x42>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
   11eb2:	68bb      	ldr	r3, [r7, #8]
   11eb4:	2b00      	cmp	r3, #0
   11eb6:	bfcc      	ite	gt
   11eb8:	2301      	movgt	r3, #1
   11eba:	2300      	movle	r3, #0
   11ebc:	b2db      	uxtb	r3, r3
   11ebe:	4618      	mov	r0, r3
   11ec0:	f7ff fec0 	bl	11c44 <mp_obj_new_bool>
   11ec4:	4603      	mov	r3, r0
   11ec6:	e005      	b.n	11ed4 <range_unary_op+0x44>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
   11ec8:	68bb      	ldr	r3, [r7, #8]
   11eca:	005b      	lsls	r3, r3, #1
   11ecc:	f043 0301 	orr.w	r3, r3, #1
   11ed0:	e000      	b.n	11ed4 <range_unary_op+0x44>
        default: return MP_OBJ_NULL; // op not supported
   11ed2:	2300      	movs	r3, #0
    }
}
   11ed4:	4618      	mov	r0, r3
   11ed6:	3710      	adds	r7, #16
   11ed8:	46bd      	mov	sp, r7
   11eda:	bd80      	pop	{r7, pc}

00011edc <range_subscr>:
                && (lhs_len == 1 || lhs->step == rhs->step)))
    );
}
#endif

STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11edc:	b580      	push	{r7, lr}
   11ede:	b088      	sub	sp, #32
   11ee0:	af00      	add	r7, sp, #0
   11ee2:	60f8      	str	r0, [r7, #12]
   11ee4:	60b9      	str	r1, [r7, #8]
   11ee6:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   11ee8:	687b      	ldr	r3, [r7, #4]
   11eea:	2b08      	cmp	r3, #8
   11eec:	d11b      	bne.n	11f26 <range_subscr+0x4a>
        // load
        mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11eee:	68fb      	ldr	r3, [r7, #12]
   11ef0:	61fb      	str	r3, [r7, #28]
        mp_int_t len = range_len(self);
   11ef2:	69f8      	ldr	r0, [r7, #28]
   11ef4:	f7ff ffa2 	bl	11e3c <range_len>
   11ef8:	61b8      	str	r0, [r7, #24]
                o->stop -= self->step;
            }
            return MP_OBJ_FROM_PTR(o);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, len, index, false);
   11efa:	69fb      	ldr	r3, [r7, #28]
   11efc:	6818      	ldr	r0, [r3, #0]
   11efe:	69b9      	ldr	r1, [r7, #24]
   11f00:	2300      	movs	r3, #0
   11f02:	68ba      	ldr	r2, [r7, #8]
   11f04:	f7fb fea0 	bl	dc48 <mp_get_index>
   11f08:	6178      	str	r0, [r7, #20]
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
   11f0a:	69fb      	ldr	r3, [r7, #28]
   11f0c:	685b      	ldr	r3, [r3, #4]
   11f0e:	461a      	mov	r2, r3
   11f10:	69fb      	ldr	r3, [r7, #28]
   11f12:	68db      	ldr	r3, [r3, #12]
   11f14:	4619      	mov	r1, r3
   11f16:	697b      	ldr	r3, [r7, #20]
   11f18:	fb03 f301 	mul.w	r3, r3, r1
   11f1c:	4413      	add	r3, r2
   11f1e:	005b      	lsls	r3, r3, #1
   11f20:	f043 0301 	orr.w	r3, r3, #1
   11f24:	e000      	b.n	11f28 <range_subscr+0x4c>
    } else {
        return MP_OBJ_NULL; // op not supported
   11f26:	2300      	movs	r3, #0
    }
}
   11f28:	4618      	mov	r0, r3
   11f2a:	3720      	adds	r7, #32
   11f2c:	46bd      	mov	sp, r7
   11f2e:	bd80      	pop	{r7, pc}

00011f30 <range_getiter>:

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   11f30:	b580      	push	{r7, lr}
   11f32:	b084      	sub	sp, #16
   11f34:	af00      	add	r7, sp, #0
   11f36:	6078      	str	r0, [r7, #4]
   11f38:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   11f3a:	687b      	ldr	r3, [r7, #4]
   11f3c:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
   11f3e:	68fb      	ldr	r3, [r7, #12]
   11f40:	6858      	ldr	r0, [r3, #4]
   11f42:	68fb      	ldr	r3, [r7, #12]
   11f44:	6899      	ldr	r1, [r3, #8]
   11f46:	68fb      	ldr	r3, [r7, #12]
   11f48:	68da      	ldr	r2, [r3, #12]
   11f4a:	683b      	ldr	r3, [r7, #0]
   11f4c:	f7ff feda 	bl	11d04 <mp_obj_new_range_iterator>
   11f50:	4603      	mov	r3, r0
}
   11f52:	4618      	mov	r0, r3
   11f54:	3710      	adds	r7, #16
   11f56:	46bd      	mov	sp, r7
   11f58:	bd80      	pop	{r7, pc}

00011f5a <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
   11f5a:	b580      	push	{r7, lr}
   11f5c:	b086      	sub	sp, #24
   11f5e:	af00      	add	r7, sp, #0
   11f60:	60f8      	str	r0, [r7, #12]
   11f62:	60b9      	str	r1, [r7, #8]
   11f64:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   11f66:	687b      	ldr	r3, [r7, #4]
   11f68:	681b      	ldr	r3, [r3, #0]
   11f6a:	2b00      	cmp	r3, #0
   11f6c:	d129      	bne.n	11fc2 <range_attr+0x68>
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   11f6e:	68fb      	ldr	r3, [r7, #12]
   11f70:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_start) {
   11f72:	68bb      	ldr	r3, [r7, #8]
   11f74:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
   11f78:	d108      	bne.n	11f8c <range_attr+0x32>
        dest[0] = mp_obj_new_int(o->start);
   11f7a:	697b      	ldr	r3, [r7, #20]
   11f7c:	685b      	ldr	r3, [r3, #4]
   11f7e:	4618      	mov	r0, r3
   11f80:	f7fe fbf4 	bl	1076c <mp_obj_new_int>
   11f84:	4602      	mov	r2, r0
   11f86:	687b      	ldr	r3, [r7, #4]
   11f88:	601a      	str	r2, [r3, #0]
   11f8a:	e01b      	b.n	11fc4 <range_attr+0x6a>
    } else if (attr == MP_QSTR_stop) {
   11f8c:	68bb      	ldr	r3, [r7, #8]
   11f8e:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
   11f92:	d108      	bne.n	11fa6 <range_attr+0x4c>
        dest[0] = mp_obj_new_int(o->stop);
   11f94:	697b      	ldr	r3, [r7, #20]
   11f96:	689b      	ldr	r3, [r3, #8]
   11f98:	4618      	mov	r0, r3
   11f9a:	f7fe fbe7 	bl	1076c <mp_obj_new_int>
   11f9e:	4602      	mov	r2, r0
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	601a      	str	r2, [r3, #0]
   11fa4:	e00e      	b.n	11fc4 <range_attr+0x6a>
    } else if (attr == MP_QSTR_step) {
   11fa6:	68bb      	ldr	r3, [r7, #8]
   11fa8:	f240 1263 	movw	r2, #355	; 0x163
   11fac:	4293      	cmp	r3, r2
   11fae:	d109      	bne.n	11fc4 <range_attr+0x6a>
        dest[0] = mp_obj_new_int(o->step);
   11fb0:	697b      	ldr	r3, [r7, #20]
   11fb2:	68db      	ldr	r3, [r3, #12]
   11fb4:	4618      	mov	r0, r3
   11fb6:	f7fe fbd9 	bl	1076c <mp_obj_new_int>
   11fba:	4602      	mov	r2, r0
   11fbc:	687b      	ldr	r3, [r7, #4]
   11fbe:	601a      	str	r2, [r3, #0]
   11fc0:	e000      	b.n	11fc4 <range_attr+0x6a>
        return;
   11fc2:	bf00      	nop
    }
}
   11fc4:	3718      	adds	r7, #24
   11fc6:	46bd      	mov	sp, r7
   11fc8:	bd80      	pop	{r7, pc}
   11fca:	bf00      	nop

00011fcc <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11fcc:	b580      	push	{r7, lr}
   11fce:	b086      	sub	sp, #24
   11fd0:	af00      	add	r7, sp, #0
   11fd2:	60f8      	str	r0, [r7, #12]
   11fd4:	60b9      	str	r1, [r7, #8]
   11fd6:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
   11fd8:	68bb      	ldr	r3, [r7, #8]
   11fda:	617b      	str	r3, [r7, #20]
    mp_printf(print, "%q", self->name);
   11fdc:	697b      	ldr	r3, [r7, #20]
   11fde:	685b      	ldr	r3, [r3, #4]
   11fe0:	461a      	mov	r2, r3
   11fe2:	4904      	ldr	r1, [pc, #16]	; (11ff4 <singleton_print+0x28>)
   11fe4:	68f8      	ldr	r0, [r7, #12]
   11fe6:	f7ef ff7f 	bl	1ee8 <mp_printf>
}
   11fea:	bf00      	nop
   11fec:	3718      	adds	r7, #24
   11fee:	46bd      	mov	sp, r7
   11ff0:	bd80      	pop	{r7, pc}
   11ff2:	bf00      	nop
   11ff4:	000231ac 	.word	0x000231ac

00011ff8 <utf8_next_char>:
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
   11ff8:	b480      	push	{r7}
   11ffa:	b083      	sub	sp, #12
   11ffc:	af00      	add	r7, sp, #0
   11ffe:	6078      	str	r0, [r7, #4]
   12000:	687b      	ldr	r3, [r7, #4]
   12002:	3301      	adds	r3, #1
   12004:	4618      	mov	r0, r3
   12006:	370c      	adds	r7, #12
   12008:	46bd      	mov	sp, r7
   1200a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1200e:	4770      	bx	lr

00012010 <utf8_charlen>:
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }
   12010:	b480      	push	{r7}
   12012:	b083      	sub	sp, #12
   12014:	af00      	add	r7, sp, #0
   12016:	6078      	str	r0, [r7, #4]
   12018:	6039      	str	r1, [r7, #0]
   1201a:	683b      	ldr	r3, [r7, #0]
   1201c:	4618      	mov	r0, r3
   1201e:	370c      	adds	r7, #12
   12020:	46bd      	mov	sp, r7
   12022:	f85d 7b04 	ldr.w	r7, [sp], #4
   12026:	4770      	bx	lr

00012028 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   12028:	b480      	push	{r7}
   1202a:	b083      	sub	sp, #12
   1202c:	af00      	add	r7, sp, #0
   1202e:	6078      	str	r0, [r7, #4]
   12030:	687b      	ldr	r3, [r7, #4]
   12032:	f003 0301 	and.w	r3, r3, #1
   12036:	2b00      	cmp	r3, #0
   12038:	bf14      	ite	ne
   1203a:	2301      	movne	r3, #1
   1203c:	2300      	moveq	r3, #0
   1203e:	b2db      	uxtb	r3, r3
   12040:	4618      	mov	r0, r3
   12042:	370c      	adds	r7, #12
   12044:	46bd      	mov	sp, r7
   12046:	f85d 7b04 	ldr.w	r7, [sp], #4
   1204a:	4770      	bx	lr

0001204c <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   1204c:	b480      	push	{r7}
   1204e:	b083      	sub	sp, #12
   12050:	af00      	add	r7, sp, #0
   12052:	6078      	str	r0, [r7, #4]
   12054:	687b      	ldr	r3, [r7, #4]
   12056:	f003 0303 	and.w	r3, r3, #3
   1205a:	2b02      	cmp	r3, #2
   1205c:	bf0c      	ite	eq
   1205e:	2301      	moveq	r3, #1
   12060:	2300      	movne	r3, #0
   12062:	b2db      	uxtb	r3, r3
   12064:	4618      	mov	r0, r3
   12066:	370c      	adds	r7, #12
   12068:	46bd      	mov	sp, r7
   1206a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1206e:	4770      	bx	lr

00012070 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   12070:	b480      	push	{r7}
   12072:	b083      	sub	sp, #12
   12074:	af00      	add	r7, sp, #0
   12076:	6078      	str	r0, [r7, #4]
   12078:	687b      	ldr	r3, [r7, #4]
   1207a:	f003 0303 	and.w	r3, r3, #3
   1207e:	2b00      	cmp	r3, #0
   12080:	bf0c      	ite	eq
   12082:	2301      	moveq	r3, #1
   12084:	2300      	movne	r3, #0
   12086:	b2db      	uxtb	r3, r3
   12088:	4618      	mov	r0, r3
   1208a:	370c      	adds	r7, #12
   1208c:	46bd      	mov	sp, r7
   1208e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12092:	4770      	bx	lr

00012094 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   12094:	b480      	push	{r7}
   12096:	b083      	sub	sp, #12
   12098:	af00      	add	r7, sp, #0
   1209a:	6078      	str	r0, [r7, #4]
   1209c:	687b      	ldr	r3, [r7, #4]
   1209e:	2b00      	cmp	r3, #0
   120a0:	d001      	beq.n	120a6 <mp_obj_new_bool+0x12>
   120a2:	4b04      	ldr	r3, [pc, #16]	; (120b4 <mp_obj_new_bool+0x20>)
   120a4:	e000      	b.n	120a8 <mp_obj_new_bool+0x14>
   120a6:	4b04      	ldr	r3, [pc, #16]	; (120b8 <mp_obj_new_bool+0x24>)
   120a8:	4618      	mov	r0, r3
   120aa:	370c      	adds	r7, #12
   120ac:	46bd      	mov	sp, r7
   120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   120b2:	4770      	bx	lr
   120b4:	0002189c 	.word	0x0002189c
   120b8:	00021894 	.word	0x00021894

000120bc <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   120bc:	b580      	push	{r7, lr}
   120be:	b084      	sub	sp, #16
   120c0:	af00      	add	r7, sp, #0
   120c2:	60f8      	str	r0, [r7, #12]
   120c4:	60b9      	str	r1, [r7, #8]
   120c6:	607a      	str	r2, [r7, #4]
   120c8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   120ca:	687b      	ldr	r3, [r7, #4]
   120cc:	045a      	lsls	r2, r3, #17
   120ce:	683b      	ldr	r3, [r7, #0]
   120d0:	005b      	lsls	r3, r3, #1
   120d2:	431a      	orrs	r2, r3
   120d4:	7e3b      	ldrb	r3, [r7, #24]
   120d6:	2b00      	cmp	r3, #0
   120d8:	d001      	beq.n	120de <mp_arg_check_num+0x22>
   120da:	2301      	movs	r3, #1
   120dc:	e000      	b.n	120e0 <mp_arg_check_num+0x24>
   120de:	2300      	movs	r3, #0
   120e0:	4313      	orrs	r3, r2
   120e2:	461a      	mov	r2, r3
   120e4:	68b9      	ldr	r1, [r7, #8]
   120e6:	68f8      	ldr	r0, [r7, #12]
   120e8:	f7fa fee4 	bl	ceb4 <mp_arg_check_num_sig>
}
   120ec:	bf00      	nop
   120ee:	3710      	adds	r7, #16
   120f0:	46bd      	mov	sp, r7
   120f2:	bd80      	pop	{r7, pc}

000120f4 <mp_str_print_quoted>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in);

/******************************************************************************/
/* str                                                                        */

void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
   120f4:	b580      	push	{r7, lr}
   120f6:	b08a      	sub	sp, #40	; 0x28
   120f8:	af00      	add	r7, sp, #0
   120fa:	60f8      	str	r0, [r7, #12]
   120fc:	60b9      	str	r1, [r7, #8]
   120fe:	607a      	str	r2, [r7, #4]
   12100:	70fb      	strb	r3, [r7, #3]
    // this escapes characters, but it will be very slow to print (calling print many times)
    bool has_single_quote = false;
   12102:	2300      	movs	r3, #0
   12104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool has_double_quote = false;
   12108:	2300      	movs	r3, #0
   1210a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   1210e:	68bb      	ldr	r3, [r7, #8]
   12110:	623b      	str	r3, [r7, #32]
   12112:	68ba      	ldr	r2, [r7, #8]
   12114:	687b      	ldr	r3, [r7, #4]
   12116:	4413      	add	r3, r2
   12118:	617b      	str	r3, [r7, #20]
   1211a:	e011      	b.n	12140 <mp_str_print_quoted+0x4c>
        if (*s == '\'') {
   1211c:	6a3b      	ldr	r3, [r7, #32]
   1211e:	781b      	ldrb	r3, [r3, #0]
   12120:	2b27      	cmp	r3, #39	; 0x27
   12122:	d103      	bne.n	1212c <mp_str_print_quoted+0x38>
            has_single_quote = true;
   12124:	2301      	movs	r3, #1
   12126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1212a:	e006      	b.n	1213a <mp_str_print_quoted+0x46>
        } else if (*s == '"') {
   1212c:	6a3b      	ldr	r3, [r7, #32]
   1212e:	781b      	ldrb	r3, [r3, #0]
   12130:	2b22      	cmp	r3, #34	; 0x22
   12132:	d102      	bne.n	1213a <mp_str_print_quoted+0x46>
            has_double_quote = true;
   12134:	2301      	movs	r3, #1
   12136:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   1213a:	6a3b      	ldr	r3, [r7, #32]
   1213c:	3301      	adds	r3, #1
   1213e:	623b      	str	r3, [r7, #32]
   12140:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12144:	f083 0301 	eor.w	r3, r3, #1
   12148:	b2db      	uxtb	r3, r3
   1214a:	2b00      	cmp	r3, #0
   1214c:	d003      	beq.n	12156 <mp_str_print_quoted+0x62>
   1214e:	6a3a      	ldr	r2, [r7, #32]
   12150:	697b      	ldr	r3, [r7, #20]
   12152:	429a      	cmp	r2, r3
   12154:	d3e2      	bcc.n	1211c <mp_str_print_quoted+0x28>
        }
    }
    int quote_char = '\'';
   12156:	2327      	movs	r3, #39	; 0x27
   12158:	61fb      	str	r3, [r7, #28]
    if (has_single_quote && !has_double_quote) {
   1215a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1215e:	2b00      	cmp	r3, #0
   12160:	d008      	beq.n	12174 <mp_str_print_quoted+0x80>
   12162:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12166:	f083 0301 	eor.w	r3, r3, #1
   1216a:	b2db      	uxtb	r3, r3
   1216c:	2b00      	cmp	r3, #0
   1216e:	d001      	beq.n	12174 <mp_str_print_quoted+0x80>
        quote_char = '"';
   12170:	2322      	movs	r3, #34	; 0x22
   12172:	61fb      	str	r3, [r7, #28]
    }
    mp_printf(print, "%c", quote_char);
   12174:	69fa      	ldr	r2, [r7, #28]
   12176:	4936      	ldr	r1, [pc, #216]	; (12250 <mp_str_print_quoted+0x15c>)
   12178:	68f8      	ldr	r0, [r7, #12]
   1217a:	f7ef feb5 	bl	1ee8 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   1217e:	68bb      	ldr	r3, [r7, #8]
   12180:	61bb      	str	r3, [r7, #24]
   12182:	68ba      	ldr	r2, [r7, #8]
   12184:	687b      	ldr	r3, [r7, #4]
   12186:	4413      	add	r3, r2
   12188:	613b      	str	r3, [r7, #16]
   1218a:	e054      	b.n	12236 <mp_str_print_quoted+0x142>
        if (*s == quote_char) {
   1218c:	69bb      	ldr	r3, [r7, #24]
   1218e:	781b      	ldrb	r3, [r3, #0]
   12190:	461a      	mov	r2, r3
   12192:	69fb      	ldr	r3, [r7, #28]
   12194:	429a      	cmp	r2, r3
   12196:	d105      	bne.n	121a4 <mp_str_print_quoted+0xb0>
            mp_printf(print, "\\%c", quote_char);
   12198:	69fa      	ldr	r2, [r7, #28]
   1219a:	492e      	ldr	r1, [pc, #184]	; (12254 <mp_str_print_quoted+0x160>)
   1219c:	68f8      	ldr	r0, [r7, #12]
   1219e:	f7ef fea3 	bl	1ee8 <mp_printf>
   121a2:	e045      	b.n	12230 <mp_str_print_quoted+0x13c>
        } else if (*s == '\\') {
   121a4:	69bb      	ldr	r3, [r7, #24]
   121a6:	781b      	ldrb	r3, [r3, #0]
   121a8:	2b5c      	cmp	r3, #92	; 0x5c
   121aa:	d104      	bne.n	121b6 <mp_str_print_quoted+0xc2>
            mp_print_str(print, "\\\\");
   121ac:	492a      	ldr	r1, [pc, #168]	; (12258 <mp_str_print_quoted+0x164>)
   121ae:	68f8      	ldr	r0, [r7, #12]
   121b0:	f7ef fb88 	bl	18c4 <mp_print_str>
   121b4:	e03c      	b.n	12230 <mp_str_print_quoted+0x13c>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
   121b6:	69bb      	ldr	r3, [r7, #24]
   121b8:	781b      	ldrb	r3, [r3, #0]
   121ba:	2b1f      	cmp	r3, #31
   121bc:	d916      	bls.n	121ec <mp_str_print_quoted+0xf8>
   121be:	69bb      	ldr	r3, [r7, #24]
   121c0:	781b      	ldrb	r3, [r3, #0]
   121c2:	2b7f      	cmp	r3, #127	; 0x7f
   121c4:	d012      	beq.n	121ec <mp_str_print_quoted+0xf8>
   121c6:	78fb      	ldrb	r3, [r7, #3]
   121c8:	f083 0301 	eor.w	r3, r3, #1
   121cc:	b2db      	uxtb	r3, r3
   121ce:	2b00      	cmp	r3, #0
   121d0:	d104      	bne.n	121dc <mp_str_print_quoted+0xe8>
   121d2:	69bb      	ldr	r3, [r7, #24]
   121d4:	781b      	ldrb	r3, [r3, #0]
   121d6:	b25b      	sxtb	r3, r3
   121d8:	2b00      	cmp	r3, #0
   121da:	db07      	blt.n	121ec <mp_str_print_quoted+0xf8>
            // In strings, anything which is not ascii control character
            // is printed as is, this includes characters in range 0x80-0xff
            // (which can be non-Latin letters, etc.)
            mp_printf(print, "%c", *s);
   121dc:	69bb      	ldr	r3, [r7, #24]
   121de:	781b      	ldrb	r3, [r3, #0]
   121e0:	461a      	mov	r2, r3
   121e2:	491b      	ldr	r1, [pc, #108]	; (12250 <mp_str_print_quoted+0x15c>)
   121e4:	68f8      	ldr	r0, [r7, #12]
   121e6:	f7ef fe7f 	bl	1ee8 <mp_printf>
   121ea:	e021      	b.n	12230 <mp_str_print_quoted+0x13c>
        } else if (*s == '\n') {
   121ec:	69bb      	ldr	r3, [r7, #24]
   121ee:	781b      	ldrb	r3, [r3, #0]
   121f0:	2b0a      	cmp	r3, #10
   121f2:	d104      	bne.n	121fe <mp_str_print_quoted+0x10a>
            mp_print_str(print, "\\n");
   121f4:	4919      	ldr	r1, [pc, #100]	; (1225c <mp_str_print_quoted+0x168>)
   121f6:	68f8      	ldr	r0, [r7, #12]
   121f8:	f7ef fb64 	bl	18c4 <mp_print_str>
   121fc:	e018      	b.n	12230 <mp_str_print_quoted+0x13c>
        } else if (*s == '\r') {
   121fe:	69bb      	ldr	r3, [r7, #24]
   12200:	781b      	ldrb	r3, [r3, #0]
   12202:	2b0d      	cmp	r3, #13
   12204:	d104      	bne.n	12210 <mp_str_print_quoted+0x11c>
            mp_print_str(print, "\\r");
   12206:	4916      	ldr	r1, [pc, #88]	; (12260 <mp_str_print_quoted+0x16c>)
   12208:	68f8      	ldr	r0, [r7, #12]
   1220a:	f7ef fb5b 	bl	18c4 <mp_print_str>
   1220e:	e00f      	b.n	12230 <mp_str_print_quoted+0x13c>
        } else if (*s == '\t') {
   12210:	69bb      	ldr	r3, [r7, #24]
   12212:	781b      	ldrb	r3, [r3, #0]
   12214:	2b09      	cmp	r3, #9
   12216:	d104      	bne.n	12222 <mp_str_print_quoted+0x12e>
            mp_print_str(print, "\\t");
   12218:	4912      	ldr	r1, [pc, #72]	; (12264 <mp_str_print_quoted+0x170>)
   1221a:	68f8      	ldr	r0, [r7, #12]
   1221c:	f7ef fb52 	bl	18c4 <mp_print_str>
   12220:	e006      	b.n	12230 <mp_str_print_quoted+0x13c>
        } else {
            mp_printf(print, "\\x%02x", *s);
   12222:	69bb      	ldr	r3, [r7, #24]
   12224:	781b      	ldrb	r3, [r3, #0]
   12226:	461a      	mov	r2, r3
   12228:	490f      	ldr	r1, [pc, #60]	; (12268 <mp_str_print_quoted+0x174>)
   1222a:	68f8      	ldr	r0, [r7, #12]
   1222c:	f7ef fe5c 	bl	1ee8 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   12230:	69bb      	ldr	r3, [r7, #24]
   12232:	3301      	adds	r3, #1
   12234:	61bb      	str	r3, [r7, #24]
   12236:	69ba      	ldr	r2, [r7, #24]
   12238:	693b      	ldr	r3, [r7, #16]
   1223a:	429a      	cmp	r2, r3
   1223c:	d3a6      	bcc.n	1218c <mp_str_print_quoted+0x98>
        }
    }
    mp_printf(print, "%c", quote_char);
   1223e:	69fa      	ldr	r2, [r7, #28]
   12240:	4903      	ldr	r1, [pc, #12]	; (12250 <mp_str_print_quoted+0x15c>)
   12242:	68f8      	ldr	r0, [r7, #12]
   12244:	f7ef fe50 	bl	1ee8 <mp_printf>
}
   12248:	bf00      	nop
   1224a:	3728      	adds	r7, #40	; 0x28
   1224c:	46bd      	mov	sp, r7
   1224e:	bd80      	pop	{r7, pc}
   12250:	000231f4 	.word	0x000231f4
   12254:	000231f8 	.word	0x000231f8
   12258:	000231fc 	.word	0x000231fc
   1225c:	00023200 	.word	0x00023200
   12260:	00023204 	.word	0x00023204
   12264:	00023208 	.word	0x00023208
   12268:	0002320c 	.word	0x0002320c

0001226c <str_print>:
    }
    mp_print_str(print, "\"");
}
#endif

STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1226c:	b580      	push	{r7, lr}
   1226e:	b088      	sub	sp, #32
   12270:	af00      	add	r7, sp, #0
   12272:	60f8      	str	r0, [r7, #12]
   12274:	60b9      	str	r1, [r7, #8]
   12276:	607a      	str	r2, [r7, #4]
    GET_STR_DATA_LEN(self_in, str_data, str_len);
   12278:	68b8      	ldr	r0, [r7, #8]
   1227a:	f7ff fee7 	bl	1204c <MP_OBJ_IS_QSTR>
   1227e:	4603      	mov	r3, r0
   12280:	2b00      	cmp	r3, #0
   12282:	d009      	beq.n	12298 <str_print+0x2c>
   12284:	68bb      	ldr	r3, [r7, #8]
   12286:	089b      	lsrs	r3, r3, #2
   12288:	f107 0214 	add.w	r2, r7, #20
   1228c:	4611      	mov	r1, r2
   1228e:	4618      	mov	r0, r3
   12290:	f7ee ffe8 	bl	1264 <qstr_data>
   12294:	61f8      	str	r0, [r7, #28]
   12296:	e005      	b.n	122a4 <str_print+0x38>
   12298:	68bb      	ldr	r3, [r7, #8]
   1229a:	689b      	ldr	r3, [r3, #8]
   1229c:	617b      	str	r3, [r7, #20]
   1229e:	68bb      	ldr	r3, [r7, #8]
   122a0:	68db      	ldr	r3, [r3, #12]
   122a2:	61fb      	str	r3, [r7, #28]
        mp_str_print_json(print, str_data, str_len);
        return;
    }
    #endif
    #if !MICROPY_PY_BUILTINS_STR_UNICODE
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
   122a4:	68b8      	ldr	r0, [r7, #8]
   122a6:	f7ff fee3 	bl	12070 <MP_OBJ_IS_OBJ>
   122aa:	4603      	mov	r3, r0
   122ac:	2b00      	cmp	r3, #0
   122ae:	d006      	beq.n	122be <str_print+0x52>
   122b0:	68bb      	ldr	r3, [r7, #8]
   122b2:	681b      	ldr	r3, [r3, #0]
   122b4:	4a17      	ldr	r2, [pc, #92]	; (12314 <str_print+0xa8>)
   122b6:	4293      	cmp	r3, r2
   122b8:	d101      	bne.n	122be <str_print+0x52>
   122ba:	2301      	movs	r3, #1
   122bc:	e000      	b.n	122c0 <str_print+0x54>
   122be:	2300      	movs	r3, #0
   122c0:	76fb      	strb	r3, [r7, #27]
   122c2:	7efb      	ldrb	r3, [r7, #27]
   122c4:	f003 0301 	and.w	r3, r3, #1
   122c8:	76fb      	strb	r3, [r7, #27]
    #else
    bool is_bytes = true;
    #endif
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
   122ca:	687b      	ldr	r3, [r7, #4]
   122cc:	2b04      	cmp	r3, #4
   122ce:	d008      	beq.n	122e2 <str_print+0x76>
   122d0:	687b      	ldr	r3, [r7, #4]
   122d2:	2b00      	cmp	r3, #0
   122d4:	d10c      	bne.n	122f0 <str_print+0x84>
   122d6:	7efb      	ldrb	r3, [r7, #27]
   122d8:	f083 0301 	eor.w	r3, r3, #1
   122dc:	b2db      	uxtb	r3, r3
   122de:	2b00      	cmp	r3, #0
   122e0:	d006      	beq.n	122f0 <str_print+0x84>
        mp_printf(print, "%.*s", str_len, str_data);
   122e2:	697a      	ldr	r2, [r7, #20]
   122e4:	69fb      	ldr	r3, [r7, #28]
   122e6:	490c      	ldr	r1, [pc, #48]	; (12318 <str_print+0xac>)
   122e8:	68f8      	ldr	r0, [r7, #12]
   122ea:	f7ef fdfd 	bl	1ee8 <mp_printf>
   122ee:	e00c      	b.n	1230a <str_print+0x9e>
    } else {
        if (is_bytes) {
   122f0:	7efb      	ldrb	r3, [r7, #27]
   122f2:	2b00      	cmp	r3, #0
   122f4:	d003      	beq.n	122fe <str_print+0x92>
            mp_print_str(print, "b");
   122f6:	4909      	ldr	r1, [pc, #36]	; (1231c <str_print+0xb0>)
   122f8:	68f8      	ldr	r0, [r7, #12]
   122fa:	f7ef fae3 	bl	18c4 <mp_print_str>
        }
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
   122fe:	697a      	ldr	r2, [r7, #20]
   12300:	7efb      	ldrb	r3, [r7, #27]
   12302:	69f9      	ldr	r1, [r7, #28]
   12304:	68f8      	ldr	r0, [r7, #12]
   12306:	f7ff fef5 	bl	120f4 <mp_str_print_quoted>
    }
}
   1230a:	bf00      	nop
   1230c:	3720      	adds	r7, #32
   1230e:	46bd      	mov	sp, r7
   12310:	bd80      	pop	{r7, pc}
   12312:	bf00      	nop
   12314:	000237d8 	.word	0x000237d8
   12318:	00023214 	.word	0x00023214
   1231c:	0002321c 	.word	0x0002321c

00012320 <mp_obj_str_make_new>:

mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12320:	b580      	push	{r7, lr}
   12322:	b094      	sub	sp, #80	; 0x50
   12324:	af02      	add	r7, sp, #8
   12326:	60f8      	str	r0, [r7, #12]
   12328:	60b9      	str	r1, [r7, #8]
   1232a:	607a      	str	r2, [r7, #4]
   1232c:	603b      	str	r3, [r7, #0]
    if (n_kw != 0) {
        mp_arg_error_unimpl_kw();
    }
#endif

    mp_arg_check_num(n_args, n_kw, 0, 3, false);
   1232e:	2300      	movs	r3, #0
   12330:	9300      	str	r3, [sp, #0]
   12332:	2303      	movs	r3, #3
   12334:	2200      	movs	r2, #0
   12336:	6879      	ldr	r1, [r7, #4]
   12338:	68b8      	ldr	r0, [r7, #8]
   1233a:	f7ff febf 	bl	120bc <mp_arg_check_num>

    switch (n_args) {
   1233e:	68bb      	ldr	r3, [r7, #8]
   12340:	2b00      	cmp	r3, #0
   12342:	d002      	beq.n	1234a <mp_obj_str_make_new+0x2a>
   12344:	2b01      	cmp	r3, #1
   12346:	d002      	beq.n	1234e <mp_obj_str_make_new+0x2e>
   12348:	e019      	b.n	1237e <mp_obj_str_make_new+0x5e>
        case 0:
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   1234a:	2306      	movs	r3, #6
   1234c:	e089      	b.n	12462 <mp_obj_str_make_new+0x142>

        case 1: {
            vstr_t vstr;
            mp_print_t print;
            vstr_init_print(&vstr, 16, &print);
   1234e:	f107 0220 	add.w	r2, r7, #32
   12352:	f107 0328 	add.w	r3, r7, #40	; 0x28
   12356:	2110      	movs	r1, #16
   12358:	4618      	mov	r0, r3
   1235a:	f7ef f848 	bl	13ee <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
   1235e:	683b      	ldr	r3, [r7, #0]
   12360:	6819      	ldr	r1, [r3, #0]
   12362:	f107 0320 	add.w	r3, r7, #32
   12366:	2200      	movs	r2, #0
   12368:	4618      	mov	r0, r3
   1236a:	f7fb f9d2 	bl	d712 <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
   1236e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   12372:	4619      	mov	r1, r3
   12374:	68f8      	ldr	r0, [r7, #12]
   12376:	f002 fed4 	bl	15122 <mp_obj_new_str_from_vstr>
   1237a:	4603      	mov	r3, r0
   1237c:	e071      	b.n	12462 <mp_obj_str_make_new+0x142>
        }

        default: // 2 or 3 args
            // TODO: validate 2nd/3rd args
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
   1237e:	683b      	ldr	r3, [r7, #0]
   12380:	681b      	ldr	r3, [r3, #0]
   12382:	4618      	mov	r0, r3
   12384:	f7ff fe74 	bl	12070 <MP_OBJ_IS_OBJ>
   12388:	4603      	mov	r3, r0
   1238a:	2b00      	cmp	r3, #0
   1238c:	d05a      	beq.n	12444 <mp_obj_str_make_new+0x124>
   1238e:	683b      	ldr	r3, [r7, #0]
   12390:	681b      	ldr	r3, [r3, #0]
   12392:	681b      	ldr	r3, [r3, #0]
   12394:	4a35      	ldr	r2, [pc, #212]	; (1246c <mp_obj_str_make_new+0x14c>)
   12396:	4293      	cmp	r3, r2
   12398:	d154      	bne.n	12444 <mp_obj_str_make_new+0x124>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
   1239a:	683b      	ldr	r3, [r7, #0]
   1239c:	681b      	ldr	r3, [r3, #0]
   1239e:	4618      	mov	r0, r3
   123a0:	f7ff fe54 	bl	1204c <MP_OBJ_IS_QSTR>
   123a4:	4603      	mov	r3, r0
   123a6:	2b00      	cmp	r3, #0
   123a8:	d00a      	beq.n	123c0 <mp_obj_str_make_new+0xa0>
   123aa:	683b      	ldr	r3, [r7, #0]
   123ac:	681b      	ldr	r3, [r3, #0]
   123ae:	089b      	lsrs	r3, r3, #2
   123b0:	f107 021c 	add.w	r2, r7, #28
   123b4:	4611      	mov	r1, r2
   123b6:	4618      	mov	r0, r3
   123b8:	f7ee ff54 	bl	1264 <qstr_data>
   123bc:	6478      	str	r0, [r7, #68]	; 0x44
   123be:	e007      	b.n	123d0 <mp_obj_str_make_new+0xb0>
   123c0:	683b      	ldr	r3, [r7, #0]
   123c2:	681b      	ldr	r3, [r3, #0]
   123c4:	689b      	ldr	r3, [r3, #8]
   123c6:	61fb      	str	r3, [r7, #28]
   123c8:	683b      	ldr	r3, [r7, #0]
   123ca:	681b      	ldr	r3, [r3, #0]
   123cc:	68db      	ldr	r3, [r3, #12]
   123ce:	647b      	str	r3, [r7, #68]	; 0x44
                GET_STR_HASH(args[0], str_hash);
   123d0:	683b      	ldr	r3, [r7, #0]
   123d2:	681b      	ldr	r3, [r3, #0]
   123d4:	4618      	mov	r0, r3
   123d6:	f7ff fe39 	bl	1204c <MP_OBJ_IS_QSTR>
   123da:	4603      	mov	r3, r0
   123dc:	2b00      	cmp	r3, #0
   123de:	d007      	beq.n	123f0 <mp_obj_str_make_new+0xd0>
   123e0:	683b      	ldr	r3, [r7, #0]
   123e2:	681b      	ldr	r3, [r3, #0]
   123e4:	089b      	lsrs	r3, r3, #2
   123e6:	4618      	mov	r0, r3
   123e8:	f7ee ff12 	bl	1210 <qstr_hash>
   123ec:	6438      	str	r0, [r7, #64]	; 0x40
   123ee:	e003      	b.n	123f8 <mp_obj_str_make_new+0xd8>
   123f0:	683b      	ldr	r3, [r7, #0]
   123f2:	681b      	ldr	r3, [r3, #0]
   123f4:	685b      	ldr	r3, [r3, #4]
   123f6:	643b      	str	r3, [r7, #64]	; 0x40
                if (str_hash == 0) {
   123f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   123fa:	2b00      	cmp	r3, #0
   123fc:	d105      	bne.n	1240a <mp_obj_str_make_new+0xea>
                    str_hash = qstr_compute_hash(str_data, str_len);
   123fe:	69fb      	ldr	r3, [r7, #28]
   12400:	4619      	mov	r1, r3
   12402:	6c78      	ldr	r0, [r7, #68]	; 0x44
   12404:	f7ee fd34 	bl	e70 <qstr_compute_hash>
   12408:	6438      	str	r0, [r7, #64]	; 0x40
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif

                // Check if a qstr with this data already exists
                qstr q = qstr_find_strn((const char*)str_data, str_len);
   1240a:	69fb      	ldr	r3, [r7, #28]
   1240c:	4619      	mov	r1, r3
   1240e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   12410:	f7ee fdde 	bl	fd0 <qstr_find_strn>
   12414:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (q != MP_QSTR_NULL) {
   12416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12418:	2b00      	cmp	r3, #0
   1241a:	d004      	beq.n	12426 <mp_obj_str_make_new+0x106>
                    return MP_OBJ_NEW_QSTR(q);
   1241c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1241e:	009b      	lsls	r3, r3, #2
   12420:	f043 0302 	orr.w	r3, r3, #2
   12424:	e01d      	b.n	12462 <mp_obj_str_make_new+0x142>
                }

                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
   12426:	69fb      	ldr	r3, [r7, #28]
   12428:	461a      	mov	r2, r3
   1242a:	2100      	movs	r1, #0
   1242c:	68f8      	ldr	r0, [r7, #12]
   1242e:	f002 fe1a 	bl	15066 <mp_obj_new_str_copy>
   12432:	63b8      	str	r0, [r7, #56]	; 0x38
                o->data = str_data;
   12434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12438:	60da      	str	r2, [r3, #12]
                o->hash = str_hash;
   1243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1243c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1243e:	605a      	str	r2, [r3, #4]
                return MP_OBJ_FROM_PTR(o);
   12440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12442:	e00e      	b.n	12462 <mp_obj_str_make_new+0x142>
            } else {
                mp_buffer_info_t bufinfo;
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   12444:	683b      	ldr	r3, [r7, #0]
   12446:	681b      	ldr	r3, [r3, #0]
   12448:	f107 0110 	add.w	r1, r7, #16
   1244c:	2201      	movs	r2, #1
   1244e:	4618      	mov	r0, r3
   12450:	f7fb fd3e 	bl	ded0 <mp_get_buffer_raise>
                #if MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
                if (!utf8_check(bufinfo.buf, bufinfo.len)) {
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
   12454:	693b      	ldr	r3, [r7, #16]
   12456:	697a      	ldr	r2, [r7, #20]
   12458:	4611      	mov	r1, r2
   1245a:	4618      	mov	r0, r3
   1245c:	f002 fec4 	bl	151e8 <mp_obj_new_str>
   12460:	4603      	mov	r3, r0
            }
    }
}
   12462:	4618      	mov	r0, r3
   12464:	3748      	adds	r7, #72	; 0x48
   12466:	46bd      	mov	sp, r7
   12468:	bd80      	pop	{r7, pc}
   1246a:	bf00      	nop
   1246c:	000237d8 	.word	0x000237d8

00012470 <bytes_make_new>:

STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12470:	b580      	push	{r7, lr}
   12472:	b09e      	sub	sp, #120	; 0x78
   12474:	af00      	add	r7, sp, #0
   12476:	60f8      	str	r0, [r7, #12]
   12478:	60b9      	str	r1, [r7, #8]
   1247a:	607a      	str	r2, [r7, #4]
   1247c:	603b      	str	r3, [r7, #0]
    }
    #else
    (void)n_kw;
    #endif

    if (n_args == 0) {
   1247e:	68bb      	ldr	r3, [r7, #8]
   12480:	2b00      	cmp	r3, #0
   12482:	d101      	bne.n	12488 <bytes_make_new+0x18>
        return mp_const_empty_bytes;
   12484:	4b7a      	ldr	r3, [pc, #488]	; (12670 <bytes_make_new+0x200>)
   12486:	e0ee      	b.n	12666 <bytes_make_new+0x1f6>
    }

    if (MP_OBJ_IS_STR(args[0])) {
   12488:	683b      	ldr	r3, [r7, #0]
   1248a:	681b      	ldr	r3, [r3, #0]
   1248c:	4618      	mov	r0, r3
   1248e:	f7ff fddd 	bl	1204c <MP_OBJ_IS_QSTR>
   12492:	4603      	mov	r3, r0
   12494:	2b00      	cmp	r3, #0
   12496:	d10d      	bne.n	124b4 <bytes_make_new+0x44>
   12498:	683b      	ldr	r3, [r7, #0]
   1249a:	681b      	ldr	r3, [r3, #0]
   1249c:	4618      	mov	r0, r3
   1249e:	f7ff fde7 	bl	12070 <MP_OBJ_IS_OBJ>
   124a2:	4603      	mov	r3, r0
   124a4:	2b00      	cmp	r3, #0
   124a6:	d054      	beq.n	12552 <bytes_make_new+0xe2>
   124a8:	683b      	ldr	r3, [r7, #0]
   124aa:	681b      	ldr	r3, [r3, #0]
   124ac:	681b      	ldr	r3, [r3, #0]
   124ae:	4a71      	ldr	r2, [pc, #452]	; (12674 <bytes_make_new+0x204>)
   124b0:	4293      	cmp	r3, r2
   124b2:	d14e      	bne.n	12552 <bytes_make_new+0xe2>
        if (n_args < 2 || n_args > 3) {
   124b4:	68bb      	ldr	r3, [r7, #8]
   124b6:	2b01      	cmp	r3, #1
   124b8:	f240 80d2 	bls.w	12660 <bytes_make_new+0x1f0>
   124bc:	68bb      	ldr	r3, [r7, #8]
   124be:	2b03      	cmp	r3, #3
   124c0:	f200 80ce 	bhi.w	12660 <bytes_make_new+0x1f0>
            goto wrong_args;
        }
        GET_STR_DATA_LEN(args[0], str_data, str_len);
   124c4:	683b      	ldr	r3, [r7, #0]
   124c6:	681b      	ldr	r3, [r3, #0]
   124c8:	4618      	mov	r0, r3
   124ca:	f7ff fdbf 	bl	1204c <MP_OBJ_IS_QSTR>
   124ce:	4603      	mov	r3, r0
   124d0:	2b00      	cmp	r3, #0
   124d2:	d00a      	beq.n	124ea <bytes_make_new+0x7a>
   124d4:	683b      	ldr	r3, [r7, #0]
   124d6:	681b      	ldr	r3, [r3, #0]
   124d8:	089b      	lsrs	r3, r3, #2
   124da:	f107 0224 	add.w	r2, r7, #36	; 0x24
   124de:	4611      	mov	r1, r2
   124e0:	4618      	mov	r0, r3
   124e2:	f7ee febf 	bl	1264 <qstr_data>
   124e6:	6778      	str	r0, [r7, #116]	; 0x74
   124e8:	e007      	b.n	124fa <bytes_make_new+0x8a>
   124ea:	683b      	ldr	r3, [r7, #0]
   124ec:	681b      	ldr	r3, [r3, #0]
   124ee:	689b      	ldr	r3, [r3, #8]
   124f0:	627b      	str	r3, [r7, #36]	; 0x24
   124f2:	683b      	ldr	r3, [r7, #0]
   124f4:	681b      	ldr	r3, [r3, #0]
   124f6:	68db      	ldr	r3, [r3, #12]
   124f8:	677b      	str	r3, [r7, #116]	; 0x74
        GET_STR_HASH(args[0], str_hash);
   124fa:	683b      	ldr	r3, [r7, #0]
   124fc:	681b      	ldr	r3, [r3, #0]
   124fe:	4618      	mov	r0, r3
   12500:	f7ff fda4 	bl	1204c <MP_OBJ_IS_QSTR>
   12504:	4603      	mov	r3, r0
   12506:	2b00      	cmp	r3, #0
   12508:	d007      	beq.n	1251a <bytes_make_new+0xaa>
   1250a:	683b      	ldr	r3, [r7, #0]
   1250c:	681b      	ldr	r3, [r3, #0]
   1250e:	089b      	lsrs	r3, r3, #2
   12510:	4618      	mov	r0, r3
   12512:	f7ee fe7d 	bl	1210 <qstr_hash>
   12516:	6738      	str	r0, [r7, #112]	; 0x70
   12518:	e003      	b.n	12522 <bytes_make_new+0xb2>
   1251a:	683b      	ldr	r3, [r7, #0]
   1251c:	681b      	ldr	r3, [r3, #0]
   1251e:	685b      	ldr	r3, [r3, #4]
   12520:	673b      	str	r3, [r7, #112]	; 0x70
        if (str_hash == 0) {
   12522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12524:	2b00      	cmp	r3, #0
   12526:	d105      	bne.n	12534 <bytes_make_new+0xc4>
            str_hash = qstr_compute_hash(str_data, str_len);
   12528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1252a:	4619      	mov	r1, r3
   1252c:	6f78      	ldr	r0, [r7, #116]	; 0x74
   1252e:	f7ee fc9f 	bl	e70 <qstr_compute_hash>
   12532:	6738      	str	r0, [r7, #112]	; 0x70
        }
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
   12534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12536:	461a      	mov	r2, r3
   12538:	2100      	movs	r1, #0
   1253a:	484f      	ldr	r0, [pc, #316]	; (12678 <bytes_make_new+0x208>)
   1253c:	f002 fd93 	bl	15066 <mp_obj_new_str_copy>
   12540:	6578      	str	r0, [r7, #84]	; 0x54
        o->data = str_data;
   12542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12544:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   12546:	60da      	str	r2, [r3, #12]
        o->hash = str_hash;
   12548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1254a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1254c:	605a      	str	r2, [r3, #4]
        return MP_OBJ_FROM_PTR(o);
   1254e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12550:	e089      	b.n	12666 <bytes_make_new+0x1f6>
    }

    if (n_args > 1) {
   12552:	68bb      	ldr	r3, [r7, #8]
   12554:	2b01      	cmp	r3, #1
   12556:	f200 8082 	bhi.w	1265e <bytes_make_new+0x1ee>
        goto wrong_args;
    }

    if (MP_OBJ_IS_SMALL_INT(args[0])) {
   1255a:	683b      	ldr	r3, [r7, #0]
   1255c:	681b      	ldr	r3, [r3, #0]
   1255e:	4618      	mov	r0, r3
   12560:	f7ff fd62 	bl	12028 <MP_OBJ_IS_SMALL_INT>
   12564:	4603      	mov	r3, r0
   12566:	2b00      	cmp	r3, #0
   12568:	d01e      	beq.n	125a8 <bytes_make_new+0x138>
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(args[0]);
   1256a:	683b      	ldr	r3, [r7, #0]
   1256c:	681b      	ldr	r3, [r3, #0]
   1256e:	105b      	asrs	r3, r3, #1
   12570:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (len < 0) {
   12572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12574:	2b00      	cmp	r3, #0
   12576:	da02      	bge.n	1257e <bytes_make_new+0x10e>
            mp_raise_ValueError(NULL);
   12578:	2000      	movs	r0, #0
   1257a:	f7fa fc6a 	bl	ce52 <mp_raise_ValueError>
        }
        vstr_t vstr;
        vstr_init_len(&vstr, len);
   1257e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   12580:	f107 0314 	add.w	r3, r7, #20
   12584:	4611      	mov	r1, r2
   12586:	4618      	mov	r0, r3
   12588:	f7ee ff05 	bl	1396 <vstr_init_len>
        memset(vstr.buf, 0, len);
   1258c:	69fb      	ldr	r3, [r7, #28]
   1258e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   12590:	2100      	movs	r1, #0
   12592:	4618      	mov	r0, r3
   12594:	f00a fb3a 	bl	1cc0c <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   12598:	f107 0314 	add.w	r3, r7, #20
   1259c:	4619      	mov	r1, r3
   1259e:	4836      	ldr	r0, [pc, #216]	; (12678 <bytes_make_new+0x208>)
   125a0:	f002 fdbf 	bl	15122 <mp_obj_new_str_from_vstr>
   125a4:	4603      	mov	r3, r0
   125a6:	e05e      	b.n	12666 <bytes_make_new+0x1f6>
    }

    // check if argument has the buffer protocol
    mp_buffer_info_t bufinfo;
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
   125a8:	683b      	ldr	r3, [r7, #0]
   125aa:	681b      	ldr	r3, [r3, #0]
   125ac:	f107 0148 	add.w	r1, r7, #72	; 0x48
   125b0:	2201      	movs	r2, #1
   125b2:	4618      	mov	r0, r3
   125b4:	f7fb fc6b 	bl	de8e <mp_get_buffer>
   125b8:	4603      	mov	r3, r0
   125ba:	2b00      	cmp	r3, #0
   125bc:	d007      	beq.n	125ce <bytes_make_new+0x15e>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
   125be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   125c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   125c2:	4611      	mov	r1, r2
   125c4:	4618      	mov	r0, r3
   125c6:	f002 fe66 	bl	15296 <mp_obj_new_bytes>
   125ca:	4603      	mov	r3, r0
   125cc:	e04b      	b.n	12666 <bytes_make_new+0x1f6>
    }

    vstr_t vstr;
    // Try to create array of exact len if initializer len is known
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
   125ce:	683b      	ldr	r3, [r7, #0]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	4618      	mov	r0, r3
   125d4:	f7fb fbc2 	bl	dd5c <mp_obj_len_maybe>
   125d8:	66b8      	str	r0, [r7, #104]	; 0x68
    if (len_in == MP_OBJ_NULL) {
   125da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   125dc:	2b00      	cmp	r3, #0
   125de:	d106      	bne.n	125ee <bytes_make_new+0x17e>
        vstr_init(&vstr, 16);
   125e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
   125e4:	2110      	movs	r1, #16
   125e6:	4618      	mov	r0, r3
   125e8:	f7ee feb4 	bl	1354 <vstr_init>
   125ec:	e009      	b.n	12602 <bytes_make_new+0x192>
    } else {
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(len_in);
   125ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   125f0:	105b      	asrs	r3, r3, #1
   125f2:	667b      	str	r3, [r7, #100]	; 0x64
        vstr_init(&vstr, len);
   125f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   125f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
   125fa:	4611      	mov	r1, r2
   125fc:	4618      	mov	r0, r3
   125fe:	f7ee fea9 	bl	1354 <vstr_init>
    }

    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   12602:	683b      	ldr	r3, [r7, #0]
   12604:	681b      	ldr	r3, [r3, #0]
   12606:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1260a:	4611      	mov	r1, r2
   1260c:	4618      	mov	r0, r3
   1260e:	f7fa f8f1 	bl	c7f4 <mp_getiter>
   12612:	6638      	str	r0, [r7, #96]	; 0x60
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12614:	e014      	b.n	12640 <bytes_make_new+0x1d0>
        mp_int_t val = mp_obj_get_int(item);
   12616:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   12618:	f7fb fa26 	bl	da68 <mp_obj_get_int>
   1261c:	65b8      	str	r0, [r7, #88]	; 0x58
        #if MICROPY_FULL_CHECKS
        if (val < 0 || val > 255) {
   1261e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12620:	2b00      	cmp	r3, #0
   12622:	db02      	blt.n	1262a <bytes_make_new+0x1ba>
   12624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12626:	2bff      	cmp	r3, #255	; 0xff
   12628:	dd02      	ble.n	12630 <bytes_make_new+0x1c0>
            mp_raise_ValueError("bytes value out of range");
   1262a:	4814      	ldr	r0, [pc, #80]	; (1267c <bytes_make_new+0x20c>)
   1262c:	f7fa fc11 	bl	ce52 <mp_raise_ValueError>
        }
        #endif
        vstr_add_byte(&vstr, val);
   12630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12632:	b2da      	uxtb	r2, r3
   12634:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12638:	4611      	mov	r1, r2
   1263a:	4618      	mov	r0, r3
   1263c:	f7ee ffdc 	bl	15f8 <vstr_add_byte>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   12640:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12642:	f7fa f959 	bl	c8f8 <mp_iternext>
   12646:	65f8      	str	r0, [r7, #92]	; 0x5c
   12648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1264a:	2b04      	cmp	r3, #4
   1264c:	d1e3      	bne.n	12616 <bytes_make_new+0x1a6>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   1264e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12652:	4619      	mov	r1, r3
   12654:	4808      	ldr	r0, [pc, #32]	; (12678 <bytes_make_new+0x208>)
   12656:	f002 fd64 	bl	15122 <mp_obj_new_str_from_vstr>
   1265a:	4603      	mov	r3, r0
   1265c:	e003      	b.n	12666 <bytes_make_new+0x1f6>
        goto wrong_args;
   1265e:	bf00      	nop

wrong_args:
    mp_raise_TypeError("wrong number of arguments");
   12660:	4807      	ldr	r0, [pc, #28]	; (12680 <bytes_make_new+0x210>)
   12662:	f7fa fc01 	bl	ce68 <mp_raise_TypeError>
}
   12666:	4618      	mov	r0, r3
   12668:	3778      	adds	r7, #120	; 0x78
   1266a:	46bd      	mov	sp, r7
   1266c:	bd80      	pop	{r7, pc}
   1266e:	bf00      	nop
   12670:	00023818 	.word	0x00023818
   12674:	0002379c 	.word	0x0002379c
   12678:	000237d8 	.word	0x000237d8
   1267c:	00023220 	.word	0x00023220
   12680:	0002323c 	.word	0x0002323c

00012684 <find_subbytes>:

// like strstr but with specified length and allows \0 bytes
// TODO replace with something more efficient/standard
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
   12684:	b580      	push	{r7, lr}
   12686:	b086      	sub	sp, #24
   12688:	af00      	add	r7, sp, #0
   1268a:	60f8      	str	r0, [r7, #12]
   1268c:	60b9      	str	r1, [r7, #8]
   1268e:	607a      	str	r2, [r7, #4]
   12690:	603b      	str	r3, [r7, #0]
    if (hlen >= nlen) {
   12692:	68ba      	ldr	r2, [r7, #8]
   12694:	683b      	ldr	r3, [r7, #0]
   12696:	429a      	cmp	r2, r3
   12698:	d328      	bcc.n	126ec <find_subbytes+0x68>
        size_t str_index, str_index_end;
        if (direction > 0) {
   1269a:	6a3b      	ldr	r3, [r7, #32]
   1269c:	2b00      	cmp	r3, #0
   1269e:	dd06      	ble.n	126ae <find_subbytes+0x2a>
            str_index = 0;
   126a0:	2300      	movs	r3, #0
   126a2:	617b      	str	r3, [r7, #20]
            str_index_end = hlen - nlen;
   126a4:	68ba      	ldr	r2, [r7, #8]
   126a6:	683b      	ldr	r3, [r7, #0]
   126a8:	1ad3      	subs	r3, r2, r3
   126aa:	613b      	str	r3, [r7, #16]
   126ac:	e005      	b.n	126ba <find_subbytes+0x36>
        } else {
            str_index = hlen - nlen;
   126ae:	68ba      	ldr	r2, [r7, #8]
   126b0:	683b      	ldr	r3, [r7, #0]
   126b2:	1ad3      	subs	r3, r2, r3
   126b4:	617b      	str	r3, [r7, #20]
            str_index_end = 0;
   126b6:	2300      	movs	r3, #0
   126b8:	613b      	str	r3, [r7, #16]
        }
        for (;;) {
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   126ba:	68fa      	ldr	r2, [r7, #12]
   126bc:	697b      	ldr	r3, [r7, #20]
   126be:	4413      	add	r3, r2
   126c0:	683a      	ldr	r2, [r7, #0]
   126c2:	6879      	ldr	r1, [r7, #4]
   126c4:	4618      	mov	r0, r3
   126c6:	f00a faec 	bl	1cca2 <memcmp>
   126ca:	4603      	mov	r3, r0
   126cc:	2b00      	cmp	r3, #0
   126ce:	d103      	bne.n	126d8 <find_subbytes+0x54>
                //found
                return haystack + str_index;
   126d0:	68fa      	ldr	r2, [r7, #12]
   126d2:	697b      	ldr	r3, [r7, #20]
   126d4:	4413      	add	r3, r2
   126d6:	e00a      	b.n	126ee <find_subbytes+0x6a>
            }
            if (str_index == str_index_end) {
   126d8:	697a      	ldr	r2, [r7, #20]
   126da:	693b      	ldr	r3, [r7, #16]
   126dc:	429a      	cmp	r2, r3
   126de:	d004      	beq.n	126ea <find_subbytes+0x66>
                //not found
                break;
            }
            str_index += direction;
   126e0:	6a3b      	ldr	r3, [r7, #32]
   126e2:	697a      	ldr	r2, [r7, #20]
   126e4:	4413      	add	r3, r2
   126e6:	617b      	str	r3, [r7, #20]
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   126e8:	e7e7      	b.n	126ba <find_subbytes+0x36>
                break;
   126ea:	bf00      	nop
        }
    }
    return NULL;
   126ec:	2300      	movs	r3, #0
}
   126ee:	4618      	mov	r0, r3
   126f0:	3718      	adds	r7, #24
   126f2:	46bd      	mov	sp, r7
   126f4:	bd80      	pop	{r7, pc}

000126f6 <mp_obj_str_binary_op>:

// Note: this function is used to check if an object is a str or bytes, which
// works because both those types use it as their binary_op method.  Revisit
// MP_OBJ_IS_STR_OR_BYTES if this fact changes.
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   126f6:	b580      	push	{r7, lr}
   126f8:	b09c      	sub	sp, #112	; 0x70
   126fa:	af02      	add	r7, sp, #8
   126fc:	60f8      	str	r0, [r7, #12]
   126fe:	60b9      	str	r1, [r7, #8]
   12700:	607a      	str	r2, [r7, #4]
    // check for modulo
    if (op == MP_BINARY_OP_MODULO) {
   12702:	68fb      	ldr	r3, [r7, #12]
   12704:	2b1f      	cmp	r3, #31
   12706:	d130      	bne.n	1276a <mp_obj_str_binary_op+0x74>
        #if MICROPY_PY_BUILTINS_STR_OP_MODULO
        mp_obj_t *args = &rhs_in;
   12708:	1d3b      	adds	r3, r7, #4
   1270a:	64bb      	str	r3, [r7, #72]	; 0x48
        size_t n_args = 1;
   1270c:	2301      	movs	r3, #1
   1270e:	647b      	str	r3, [r7, #68]	; 0x44
        mp_obj_t dict = MP_OBJ_NULL;
   12710:	2300      	movs	r3, #0
   12712:	667b      	str	r3, [r7, #100]	; 0x64
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   12714:	687b      	ldr	r3, [r7, #4]
   12716:	4618      	mov	r0, r3
   12718:	f7ff fcaa 	bl	12070 <MP_OBJ_IS_OBJ>
   1271c:	4603      	mov	r3, r0
   1271e:	2b00      	cmp	r3, #0
   12720:	d00d      	beq.n	1273e <mp_obj_str_binary_op+0x48>
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	681b      	ldr	r3, [r3, #0]
   12726:	4aad      	ldr	r2, [pc, #692]	; (129dc <mp_obj_str_binary_op+0x2e6>)
   12728:	4293      	cmp	r3, r2
   1272a:	d108      	bne.n	1273e <mp_obj_str_binary_op+0x48>
            // TODO: Support tuple subclasses?
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	f107 0248 	add.w	r2, r7, #72	; 0x48
   12732:	f107 0144 	add.w	r1, r7, #68	; 0x44
   12736:	4618      	mov	r0, r3
   12738:	f003 faa4 	bl	15c84 <mp_obj_tuple_get>
   1273c:	e00d      	b.n	1275a <mp_obj_str_binary_op+0x64>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   1273e:	687b      	ldr	r3, [r7, #4]
   12740:	4618      	mov	r0, r3
   12742:	f7ff fc95 	bl	12070 <MP_OBJ_IS_OBJ>
   12746:	4603      	mov	r3, r0
   12748:	2b00      	cmp	r3, #0
   1274a:	d006      	beq.n	1275a <mp_obj_str_binary_op+0x64>
   1274c:	687b      	ldr	r3, [r7, #4]
   1274e:	681b      	ldr	r3, [r3, #0]
   12750:	4aa3      	ldr	r2, [pc, #652]	; (129e0 <mp_obj_str_binary_op+0x2ea>)
   12752:	4293      	cmp	r3, r2
   12754:	d101      	bne.n	1275a <mp_obj_str_binary_op+0x64>
            dict = rhs_in;
   12756:	687b      	ldr	r3, [r7, #4]
   12758:	667b      	str	r3, [r7, #100]	; 0x64
        }
        return str_modulo_format(lhs_in, n_args, args, dict);
   1275a:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1275c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1275e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12760:	68b8      	ldr	r0, [r7, #8]
   12762:	f001 fd97 	bl	14294 <str_modulo_format>
   12766:	4603      	mov	r3, r0
   12768:	e133      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
        return MP_OBJ_NULL;
        #endif
    }

    // from now on we need lhs type and data, so extract them
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   1276a:	68b8      	ldr	r0, [r7, #8]
   1276c:	f7fa ffa0 	bl	d6b0 <mp_obj_get_type>
   12770:	6538      	str	r0, [r7, #80]	; 0x50
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   12772:	68b8      	ldr	r0, [r7, #8]
   12774:	f7ff fc6a 	bl	1204c <MP_OBJ_IS_QSTR>
   12778:	4603      	mov	r3, r0
   1277a:	2b00      	cmp	r3, #0
   1277c:	d009      	beq.n	12792 <mp_obj_str_binary_op+0x9c>
   1277e:	68bb      	ldr	r3, [r7, #8]
   12780:	089b      	lsrs	r3, r3, #2
   12782:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   12786:	4611      	mov	r1, r2
   12788:	4618      	mov	r0, r3
   1278a:	f7ee fd6b 	bl	1264 <qstr_data>
   1278e:	6638      	str	r0, [r7, #96]	; 0x60
   12790:	e005      	b.n	1279e <mp_obj_str_binary_op+0xa8>
   12792:	68bb      	ldr	r3, [r7, #8]
   12794:	689b      	ldr	r3, [r3, #8]
   12796:	64fb      	str	r3, [r7, #76]	; 0x4c
   12798:	68bb      	ldr	r3, [r7, #8]
   1279a:	68db      	ldr	r3, [r3, #12]
   1279c:	663b      	str	r3, [r7, #96]	; 0x60

    // check for multiply
    if (op == MP_BINARY_OP_MULTIPLY) {
   1279e:	68fb      	ldr	r3, [r7, #12]
   127a0:	2b1c      	cmp	r3, #28
   127a2:	d135      	bne.n	12810 <mp_obj_str_binary_op+0x11a>
        mp_int_t n;
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
   127aa:	4611      	mov	r1, r2
   127ac:	4618      	mov	r0, r3
   127ae:	f7fb f9bb 	bl	db28 <mp_obj_get_int_maybe>
   127b2:	4603      	mov	r3, r0
   127b4:	f083 0301 	eor.w	r3, r3, #1
   127b8:	b2db      	uxtb	r3, r3
   127ba:	2b00      	cmp	r3, #0
   127bc:	d001      	beq.n	127c2 <mp_obj_str_binary_op+0xcc>
            return MP_OBJ_NULL; // op not supported
   127be:	2300      	movs	r3, #0
   127c0:	e107      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
        }
        if (n <= 0) {
   127c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   127c4:	2b00      	cmp	r3, #0
   127c6:	dc07      	bgt.n	127d8 <mp_obj_str_binary_op+0xe2>
            if (lhs_type == &mp_type_str) {
   127c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   127ca:	4a86      	ldr	r2, [pc, #536]	; (129e4 <mp_obj_str_binary_op+0x2ee>)
   127cc:	4293      	cmp	r3, r2
   127ce:	d101      	bne.n	127d4 <mp_obj_str_binary_op+0xde>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   127d0:	2306      	movs	r3, #6
   127d2:	e0fe      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
            } else {
                return mp_const_empty_bytes;
   127d4:	4b84      	ldr	r3, [pc, #528]	; (129e8 <mp_obj_str_binary_op+0x2f2>)
   127d6:	e0fc      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
            }
        }
        vstr_t vstr;
        vstr_init_len(&vstr, lhs_len * n);
   127d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   127da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   127dc:	fb02 f203 	mul.w	r2, r2, r3
   127e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
   127e4:	4611      	mov	r1, r2
   127e6:	4618      	mov	r0, r3
   127e8:	f7ee fdd5 	bl	1396 <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   127ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   127ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   127f0:	4619      	mov	r1, r3
   127f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   127f4:	9300      	str	r3, [sp, #0]
   127f6:	460b      	mov	r3, r1
   127f8:	2101      	movs	r1, #1
   127fa:	6e38      	ldr	r0, [r7, #96]	; 0x60
   127fc:	f004 ff10 	bl	17620 <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12800:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12804:	4619      	mov	r1, r3
   12806:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12808:	f002 fc8b 	bl	15122 <mp_obj_new_str_from_vstr>
   1280c:	4603      	mov	r3, r0
   1280e:	e0e0      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
    // easy to "fix" this with a bit of extra logic below, but it costs code
    // size and execution time so we don't.

    const byte *rhs_data;
    size_t rhs_len;
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   12810:	687b      	ldr	r3, [r7, #4]
   12812:	4618      	mov	r0, r3
   12814:	f7fa ff4c 	bl	d6b0 <mp_obj_get_type>
   12818:	4602      	mov	r2, r0
   1281a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1281c:	429a      	cmp	r2, r3
   1281e:	d11b      	bne.n	12858 <mp_obj_str_binary_op+0x162>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   12820:	687b      	ldr	r3, [r7, #4]
   12822:	4618      	mov	r0, r3
   12824:	f7ff fc12 	bl	1204c <MP_OBJ_IS_QSTR>
   12828:	4603      	mov	r3, r0
   1282a:	2b00      	cmp	r3, #0
   1282c:	d009      	beq.n	12842 <mp_obj_str_binary_op+0x14c>
   1282e:	687b      	ldr	r3, [r7, #4]
   12830:	089b      	lsrs	r3, r3, #2
   12832:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   12836:	4611      	mov	r1, r2
   12838:	4618      	mov	r0, r3
   1283a:	f7ee fd13 	bl	1264 <qstr_data>
   1283e:	6578      	str	r0, [r7, #84]	; 0x54
   12840:	e005      	b.n	1284e <mp_obj_str_binary_op+0x158>
   12842:	687b      	ldr	r3, [r7, #4]
   12844:	689b      	ldr	r3, [r3, #8]
   12846:	62fb      	str	r3, [r7, #44]	; 0x2c
   12848:	687b      	ldr	r3, [r7, #4]
   1284a:	68db      	ldr	r3, [r3, #12]
   1284c:	657b      	str	r3, [r7, #84]	; 0x54
        rhs_data = rhs_data_;
   1284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12850:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = rhs_len_;
   12852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12854:	65bb      	str	r3, [r7, #88]	; 0x58
   12856:	e01b      	b.n	12890 <mp_obj_str_binary_op+0x19a>
    } else if (lhs_type == &mp_type_bytes) {
   12858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1285a:	4a64      	ldr	r2, [pc, #400]	; (129ec <mp_obj_str_binary_op+0x2f6>)
   1285c:	4293      	cmp	r3, r2
   1285e:	d113      	bne.n	12888 <mp_obj_str_binary_op+0x192>
        mp_buffer_info_t bufinfo;
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   12860:	687b      	ldr	r3, [r7, #4]
   12862:	f107 0120 	add.w	r1, r7, #32
   12866:	2201      	movs	r2, #1
   12868:	4618      	mov	r0, r3
   1286a:	f7fb fb10 	bl	de8e <mp_get_buffer>
   1286e:	4603      	mov	r3, r0
   12870:	f083 0301 	eor.w	r3, r3, #1
   12874:	b2db      	uxtb	r3, r3
   12876:	2b00      	cmp	r3, #0
   12878:	d001      	beq.n	1287e <mp_obj_str_binary_op+0x188>
            return MP_OBJ_NULL; // op not supported
   1287a:	2300      	movs	r3, #0
   1287c:	e0a9      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
        }
        rhs_data = bufinfo.buf;
   1287e:	6a3b      	ldr	r3, [r7, #32]
   12880:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = bufinfo.len;
   12882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12884:	65bb      	str	r3, [r7, #88]	; 0x58
   12886:	e003      	b.n	12890 <mp_obj_str_binary_op+0x19a>
    } else {
        // LHS is str and RHS has an incompatible type
        // (except if operation is EQUAL, but that's handled by mp_obj_equal)
        bad_implicit_conversion(rhs_in);
   12888:	687b      	ldr	r3, [r7, #4]
   1288a:	4618      	mov	r0, r3
   1288c:	f002 fd9b 	bl	153c6 <bad_implicit_conversion>
    }

    switch (op) {
   12890:	68fb      	ldr	r3, [r7, #12]
   12892:	2b22      	cmp	r3, #34	; 0x22
   12894:	f200 809c 	bhi.w	129d0 <mp_obj_str_binary_op+0x2da>
   12898:	a201      	add	r2, pc, #4	; (adr r2, 128a0 <mp_obj_str_binary_op+0x1aa>)
   1289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1289e:	bf00      	nop
   128a0:	000129b5 	.word	0x000129b5
   128a4:	000129b5 	.word	0x000129b5
   128a8:	000129b5 	.word	0x000129b5
   128ac:	000129b5 	.word	0x000129b5
   128b0:	000129b5 	.word	0x000129b5
   128b4:	000129d1 	.word	0x000129d1
   128b8:	000129d1 	.word	0x000129d1
   128bc:	000129d1 	.word	0x000129d1
   128c0:	000129d1 	.word	0x000129d1
   128c4:	000129d1 	.word	0x000129d1
   128c8:	000129d1 	.word	0x000129d1
   128cc:	000129d1 	.word	0x000129d1
   128d0:	000129d1 	.word	0x000129d1
   128d4:	000129d1 	.word	0x000129d1
   128d8:	0001292d 	.word	0x0001292d
   128dc:	000129d1 	.word	0x000129d1
   128e0:	000129d1 	.word	0x000129d1
   128e4:	000129d1 	.word	0x000129d1
   128e8:	000129d1 	.word	0x000129d1
   128ec:	000129d1 	.word	0x000129d1
   128f0:	000129d1 	.word	0x000129d1
   128f4:	000129d1 	.word	0x000129d1
   128f8:	000129d1 	.word	0x000129d1
   128fc:	000129d1 	.word	0x000129d1
   12900:	000129d1 	.word	0x000129d1
   12904:	000129d1 	.word	0x000129d1
   12908:	0001292d 	.word	0x0001292d
   1290c:	000129d1 	.word	0x000129d1
   12910:	000129d1 	.word	0x000129d1
   12914:	000129d1 	.word	0x000129d1
   12918:	000129d1 	.word	0x000129d1
   1291c:	000129d1 	.word	0x000129d1
   12920:	000129d1 	.word	0x000129d1
   12924:	000129d1 	.word	0x000129d1
   12928:	0001298f 	.word	0x0001298f
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   1292c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1292e:	2b00      	cmp	r3, #0
   12930:	d109      	bne.n	12946 <mp_obj_str_binary_op+0x250>
   12932:	687b      	ldr	r3, [r7, #4]
   12934:	4618      	mov	r0, r3
   12936:	f7fa febb 	bl	d6b0 <mp_obj_get_type>
   1293a:	4602      	mov	r2, r0
   1293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1293e:	429a      	cmp	r2, r3
   12940:	d101      	bne.n	12946 <mp_obj_str_binary_op+0x250>
                return rhs_in;
   12942:	687b      	ldr	r3, [r7, #4]
   12944:	e045      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
            }
            if (rhs_len == 0) {
   12946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12948:	2b00      	cmp	r3, #0
   1294a:	d101      	bne.n	12950 <mp_obj_str_binary_op+0x25a>
                return lhs_in;
   1294c:	68bb      	ldr	r3, [r7, #8]
   1294e:	e040      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
            }

            vstr_t vstr;
            vstr_init_len(&vstr, lhs_len + rhs_len);
   12950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12954:	441a      	add	r2, r3
   12956:	f107 0310 	add.w	r3, r7, #16
   1295a:	4611      	mov	r1, r2
   1295c:	4618      	mov	r0, r3
   1295e:	f7ee fd1a 	bl	1396 <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   12962:	69bb      	ldr	r3, [r7, #24]
   12964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12966:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12968:	4618      	mov	r0, r3
   1296a:	f00a f8b5 	bl	1cad8 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   1296e:	69ba      	ldr	r2, [r7, #24]
   12970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12972:	4413      	add	r3, r2
   12974:	6dba      	ldr	r2, [r7, #88]	; 0x58
   12976:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12978:	4618      	mov	r0, r3
   1297a:	f00a f8ad 	bl	1cad8 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   1297e:	f107 0310 	add.w	r3, r7, #16
   12982:	4619      	mov	r1, r3
   12984:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12986:	f002 fbcc 	bl	15122 <mp_obj_new_str_from_vstr>
   1298a:	4603      	mov	r3, r0
   1298c:	e021      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
        }

        case MP_BINARY_OP_CONTAINS:
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   1298e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   12990:	2301      	movs	r3, #1
   12992:	9300      	str	r3, [sp, #0]
   12994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12996:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   12998:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1299a:	f7ff fe73 	bl	12684 <find_subbytes>
   1299e:	4603      	mov	r3, r0
   129a0:	2b00      	cmp	r3, #0
   129a2:	bf14      	ite	ne
   129a4:	2301      	movne	r3, #1
   129a6:	2300      	moveq	r3, #0
   129a8:	b2db      	uxtb	r3, r3
   129aa:	4618      	mov	r0, r3
   129ac:	f7ff fb72 	bl	12094 <mp_obj_new_bool>
   129b0:	4603      	mov	r3, r0
   129b2:	e00e      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>
        case MP_BINARY_OP_EQUAL: // This will be passed only for bytes, str is dealt with in mp_obj_equal()
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   129b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   129b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   129b8:	9300      	str	r3, [sp, #0]
   129ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   129bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
   129be:	68f8      	ldr	r0, [r7, #12]
   129c0:	f004 fe91 	bl	176e6 <mp_seq_cmp_bytes>
   129c4:	4603      	mov	r3, r0
   129c6:	4618      	mov	r0, r3
   129c8:	f7ff fb64 	bl	12094 <mp_obj_new_bool>
   129cc:	4603      	mov	r3, r0
   129ce:	e000      	b.n	129d2 <mp_obj_str_binary_op+0x2dc>

        default:
            return MP_OBJ_NULL; // op not supported
   129d0:	2300      	movs	r3, #0
    }
}
   129d2:	4618      	mov	r0, r3
   129d4:	3768      	adds	r7, #104	; 0x68
   129d6:	46bd      	mov	sp, r7
   129d8:	bd80      	pop	{r7, pc}
   129da:	bf00      	nop
   129dc:	00023a20 	.word	0x00023a20
   129e0:	00021d40 	.word	0x00021d40
   129e4:	0002379c 	.word	0x0002379c
   129e8:	00023818 	.word	0x00023818
   129ec:	000237d8 	.word	0x000237d8

000129f0 <str_index_to_ptr>:

#if !MICROPY_PY_BUILTINS_STR_UNICODE
// objstrunicode defines own version
const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, bool is_slice) {
   129f0:	b580      	push	{r7, lr}
   129f2:	b086      	sub	sp, #24
   129f4:	af00      	add	r7, sp, #0
   129f6:	60f8      	str	r0, [r7, #12]
   129f8:	60b9      	str	r1, [r7, #8]
   129fa:	607a      	str	r2, [r7, #4]
   129fc:	603b      	str	r3, [r7, #0]
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
   129fe:	f897 3020 	ldrb.w	r3, [r7, #32]
   12a02:	683a      	ldr	r2, [r7, #0]
   12a04:	6879      	ldr	r1, [r7, #4]
   12a06:	68f8      	ldr	r0, [r7, #12]
   12a08:	f7fb f91e 	bl	dc48 <mp_get_index>
   12a0c:	6178      	str	r0, [r7, #20]
    return self_data + index_val;
   12a0e:	68ba      	ldr	r2, [r7, #8]
   12a10:	697b      	ldr	r3, [r7, #20]
   12a12:	4413      	add	r3, r2
}
   12a14:	4618      	mov	r0, r3
   12a16:	3718      	adds	r7, #24
   12a18:	46bd      	mov	sp, r7
   12a1a:	bd80      	pop	{r7, pc}

00012a1c <bytes_subscr>:
#endif

// This is used for both bytes and 8-bit strings. This is not used for unicode strings.
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   12a1c:	b580      	push	{r7, lr}
   12a1e:	b088      	sub	sp, #32
   12a20:	af00      	add	r7, sp, #0
   12a22:	60f8      	str	r0, [r7, #12]
   12a24:	60b9      	str	r1, [r7, #8]
   12a26:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   12a28:	68f8      	ldr	r0, [r7, #12]
   12a2a:	f7fa fe41 	bl	d6b0 <mp_obj_get_type>
   12a2e:	61b8      	str	r0, [r7, #24]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   12a30:	68f8      	ldr	r0, [r7, #12]
   12a32:	f7ff fb0b 	bl	1204c <MP_OBJ_IS_QSTR>
   12a36:	4603      	mov	r3, r0
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d009      	beq.n	12a50 <bytes_subscr+0x34>
   12a3c:	68fb      	ldr	r3, [r7, #12]
   12a3e:	089b      	lsrs	r3, r3, #2
   12a40:	f107 0210 	add.w	r2, r7, #16
   12a44:	4611      	mov	r1, r2
   12a46:	4618      	mov	r0, r3
   12a48:	f7ee fc0c 	bl	1264 <qstr_data>
   12a4c:	61f8      	str	r0, [r7, #28]
   12a4e:	e005      	b.n	12a5c <bytes_subscr+0x40>
   12a50:	68fb      	ldr	r3, [r7, #12]
   12a52:	689b      	ldr	r3, [r3, #8]
   12a54:	613b      	str	r3, [r7, #16]
   12a56:	68fb      	ldr	r3, [r7, #12]
   12a58:	68db      	ldr	r3, [r3, #12]
   12a5a:	61fb      	str	r3, [r7, #28]
    if (value == MP_OBJ_SENTINEL) {
   12a5c:	687b      	ldr	r3, [r7, #4]
   12a5e:	2b08      	cmp	r3, #8
   12a60:	d11b      	bne.n	12a9a <bytes_subscr+0x7e>
                mp_raise_NotImplementedError("only slices with step=1 (aka None) are supported");
            }
            return mp_obj_new_str_of_type(type, self_data + slice.start, slice.stop - slice.start);
        }
#endif
        size_t index_val = mp_get_index(type, self_len, index, false);
   12a62:	6939      	ldr	r1, [r7, #16]
   12a64:	2300      	movs	r3, #0
   12a66:	68ba      	ldr	r2, [r7, #8]
   12a68:	69b8      	ldr	r0, [r7, #24]
   12a6a:	f7fb f8ed 	bl	dc48 <mp_get_index>
   12a6e:	6178      	str	r0, [r7, #20]
        // If we have unicode enabled the type will always be bytes, so take the short cut.
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
   12a70:	69bb      	ldr	r3, [r7, #24]
   12a72:	4a0c      	ldr	r2, [pc, #48]	; (12aa4 <bytes_subscr+0x88>)
   12a74:	4293      	cmp	r3, r2
   12a76:	d107      	bne.n	12a88 <bytes_subscr+0x6c>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
   12a78:	69fa      	ldr	r2, [r7, #28]
   12a7a:	697b      	ldr	r3, [r7, #20]
   12a7c:	4413      	add	r3, r2
   12a7e:	781b      	ldrb	r3, [r3, #0]
   12a80:	005b      	lsls	r3, r3, #1
   12a82:	f043 0301 	orr.w	r3, r3, #1
   12a86:	e009      	b.n	12a9c <bytes_subscr+0x80>
        } else {
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
   12a88:	69fa      	ldr	r2, [r7, #28]
   12a8a:	697b      	ldr	r3, [r7, #20]
   12a8c:	4413      	add	r3, r2
   12a8e:	2101      	movs	r1, #1
   12a90:	4618      	mov	r0, r3
   12a92:	f002 fb35 	bl	15100 <mp_obj_new_str_via_qstr>
   12a96:	4603      	mov	r3, r0
   12a98:	e000      	b.n	12a9c <bytes_subscr+0x80>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   12a9a:	2300      	movs	r3, #0
    }
}
   12a9c:	4618      	mov	r0, r3
   12a9e:	3720      	adds	r7, #32
   12aa0:	46bd      	mov	sp, r7
   12aa2:	bd80      	pop	{r7, pc}
   12aa4:	000237d8 	.word	0x000237d8

00012aa8 <str_join>:

STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
   12aa8:	b590      	push	{r4, r7, lr}
   12aaa:	b093      	sub	sp, #76	; 0x4c
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
   12ab2:	6878      	ldr	r0, [r7, #4]
   12ab4:	f7ff faca 	bl	1204c <MP_OBJ_IS_QSTR>
   12ab8:	4603      	mov	r3, r0
   12aba:	2b00      	cmp	r3, #0
   12abc:	d112      	bne.n	12ae4 <str_join+0x3c>
   12abe:	6878      	ldr	r0, [r7, #4]
   12ac0:	f7ff fad6 	bl	12070 <MP_OBJ_IS_OBJ>
   12ac4:	4603      	mov	r3, r0
   12ac6:	2b00      	cmp	r3, #0
   12ac8:	d005      	beq.n	12ad6 <str_join+0x2e>
   12aca:	687b      	ldr	r3, [r7, #4]
   12acc:	681b      	ldr	r3, [r3, #0]
   12ace:	699b      	ldr	r3, [r3, #24]
   12ad0:	4a78      	ldr	r2, [pc, #480]	; (12cb4 <str_join+0x20c>)
   12ad2:	4293      	cmp	r3, r2
   12ad4:	d006      	beq.n	12ae4 <str_join+0x3c>
   12ad6:	4b78      	ldr	r3, [pc, #480]	; (12cb8 <str_join+0x210>)
   12ad8:	4a78      	ldr	r2, [pc, #480]	; (12cbc <str_join+0x214>)
   12ada:	f240 11c1 	movw	r1, #449	; 0x1c1
   12ade:	4878      	ldr	r0, [pc, #480]	; (12cc0 <str_join+0x218>)
   12ae0:	f008 fcce 	bl	1b480 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   12ae4:	6878      	ldr	r0, [r7, #4]
   12ae6:	f7fa fde3 	bl	d6b0 <mp_obj_get_type>
   12aea:	62b8      	str	r0, [r7, #40]	; 0x28

    // get separation string
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
   12aec:	6878      	ldr	r0, [r7, #4]
   12aee:	f7ff faad 	bl	1204c <MP_OBJ_IS_QSTR>
   12af2:	4603      	mov	r3, r0
   12af4:	2b00      	cmp	r3, #0
   12af6:	d009      	beq.n	12b0c <str_join+0x64>
   12af8:	687b      	ldr	r3, [r7, #4]
   12afa:	089b      	lsrs	r3, r3, #2
   12afc:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12b00:	4611      	mov	r1, r2
   12b02:	4618      	mov	r0, r3
   12b04:	f7ee fbae 	bl	1264 <qstr_data>
   12b08:	6478      	str	r0, [r7, #68]	; 0x44
   12b0a:	e005      	b.n	12b18 <str_join+0x70>
   12b0c:	687b      	ldr	r3, [r7, #4]
   12b0e:	689b      	ldr	r3, [r3, #8]
   12b10:	627b      	str	r3, [r7, #36]	; 0x24
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	68db      	ldr	r3, [r3, #12]
   12b16:	647b      	str	r3, [r7, #68]	; 0x44

    // process args
    size_t seq_len;
    mp_obj_t *seq_items;

    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
   12b18:	683b      	ldr	r3, [r7, #0]
   12b1a:	4618      	mov	r0, r3
   12b1c:	f7ff faa8 	bl	12070 <MP_OBJ_IS_OBJ>
   12b20:	4603      	mov	r3, r0
   12b22:	f083 0301 	eor.w	r3, r3, #1
   12b26:	b2db      	uxtb	r3, r3
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d104      	bne.n	12b36 <str_join+0x8e>
   12b2c:	683b      	ldr	r3, [r7, #0]
   12b2e:	681b      	ldr	r3, [r3, #0]
   12b30:	4a64      	ldr	r2, [pc, #400]	; (12cc4 <str_join+0x21c>)
   12b32:	4293      	cmp	r3, r2
   12b34:	d017      	beq.n	12b66 <str_join+0xbe>
   12b36:	683b      	ldr	r3, [r7, #0]
   12b38:	4618      	mov	r0, r3
   12b3a:	f7ff fa99 	bl	12070 <MP_OBJ_IS_OBJ>
   12b3e:	4603      	mov	r3, r0
   12b40:	f083 0301 	eor.w	r3, r3, #1
   12b44:	b2db      	uxtb	r3, r3
   12b46:	2b00      	cmp	r3, #0
   12b48:	d104      	bne.n	12b54 <str_join+0xac>
   12b4a:	683b      	ldr	r3, [r7, #0]
   12b4c:	681b      	ldr	r3, [r3, #0]
   12b4e:	4a5e      	ldr	r2, [pc, #376]	; (12cc8 <str_join+0x220>)
   12b50:	4293      	cmp	r3, r2
   12b52:	d008      	beq.n	12b66 <str_join+0xbe>
        // arg is not a list nor a tuple, try to convert it to a list
        // TODO: Try to optimize?
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
   12b54:	4b5b      	ldr	r3, [pc, #364]	; (12cc4 <str_join+0x21c>)
   12b56:	68dc      	ldr	r4, [r3, #12]
   12b58:	463b      	mov	r3, r7
   12b5a:	2200      	movs	r2, #0
   12b5c:	2101      	movs	r1, #1
   12b5e:	4859      	ldr	r0, [pc, #356]	; (12cc4 <str_join+0x21c>)
   12b60:	47a0      	blx	r4
   12b62:	4603      	mov	r3, r0
   12b64:	603b      	str	r3, [r7, #0]
    }
    mp_obj_get_array(arg, &seq_len, &seq_items);
   12b66:	683b      	ldr	r3, [r7, #0]
   12b68:	f107 021c 	add.w	r2, r7, #28
   12b6c:	f107 0120 	add.w	r1, r7, #32
   12b70:	4618      	mov	r0, r3
   12b72:	f7fb f819 	bl	dba8 <mp_obj_get_array>

    // count required length
    size_t required_len = 0;
   12b76:	2300      	movs	r3, #0
   12b78:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12b7a:	2300      	movs	r3, #0
   12b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   12b7e:	e039      	b.n	12bf4 <str_join+0x14c>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
   12b80:	69fa      	ldr	r2, [r7, #28]
   12b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12b84:	009b      	lsls	r3, r3, #2
   12b86:	4413      	add	r3, r2
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	4618      	mov	r0, r3
   12b8c:	f7fa fd90 	bl	d6b0 <mp_obj_get_type>
   12b90:	4602      	mov	r2, r0
   12b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12b94:	429a      	cmp	r2, r3
   12b96:	d002      	beq.n	12b9e <str_join+0xf6>
            mp_raise_TypeError(
   12b98:	484c      	ldr	r0, [pc, #304]	; (12ccc <str_join+0x224>)
   12b9a:	f7fa f965 	bl	ce68 <mp_raise_TypeError>
                "join expects a list of str/bytes objects consistent with self object");
        }
        if (i > 0) {
   12b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ba0:	2b00      	cmp	r3, #0
   12ba2:	d003      	beq.n	12bac <str_join+0x104>
            required_len += sep_len;
   12ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12ba8:	4413      	add	r3, r2
   12baa:	643b      	str	r3, [r7, #64]	; 0x40
        }
        GET_STR_LEN(seq_items[i], l);
   12bac:	69fa      	ldr	r2, [r7, #28]
   12bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12bb0:	009b      	lsls	r3, r3, #2
   12bb2:	4413      	add	r3, r2
   12bb4:	681b      	ldr	r3, [r3, #0]
   12bb6:	4618      	mov	r0, r3
   12bb8:	f7ff fa48 	bl	1204c <MP_OBJ_IS_QSTR>
   12bbc:	4603      	mov	r3, r0
   12bbe:	2b00      	cmp	r3, #0
   12bc0:	d00a      	beq.n	12bd8 <str_join+0x130>
   12bc2:	69fa      	ldr	r2, [r7, #28]
   12bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12bc6:	009b      	lsls	r3, r3, #2
   12bc8:	4413      	add	r3, r2
   12bca:	681b      	ldr	r3, [r3, #0]
   12bcc:	089b      	lsrs	r3, r3, #2
   12bce:	4618      	mov	r0, r3
   12bd0:	f7ee fb2b 	bl	122a <qstr_len>
   12bd4:	63b8      	str	r0, [r7, #56]	; 0x38
   12bd6:	e006      	b.n	12be6 <str_join+0x13e>
   12bd8:	69fa      	ldr	r2, [r7, #28]
   12bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12bdc:	009b      	lsls	r3, r3, #2
   12bde:	4413      	add	r3, r2
   12be0:	681b      	ldr	r3, [r3, #0]
   12be2:	689b      	ldr	r3, [r3, #8]
   12be4:	63bb      	str	r3, [r7, #56]	; 0x38
        required_len += l;
   12be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12bea:	4413      	add	r3, r2
   12bec:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12bf0:	3301      	adds	r3, #1
   12bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   12bf4:	6a3b      	ldr	r3, [r7, #32]
   12bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12bf8:	429a      	cmp	r2, r3
   12bfa:	d3c1      	bcc.n	12b80 <str_join+0xd8>
    }

    // make joined string
    vstr_t vstr;
    vstr_init_len(&vstr, required_len);
   12bfc:	f107 030c 	add.w	r3, r7, #12
   12c00:	6c39      	ldr	r1, [r7, #64]	; 0x40
   12c02:	4618      	mov	r0, r3
   12c04:	f7ee fbc7 	bl	1396 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   12c08:	697b      	ldr	r3, [r7, #20]
   12c0a:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12c0c:	2300      	movs	r3, #0
   12c0e:	633b      	str	r3, [r7, #48]	; 0x30
   12c10:	e040      	b.n	12c94 <str_join+0x1ec>
        if (i > 0) {
   12c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c14:	2b00      	cmp	r3, #0
   12c16:	d009      	beq.n	12c2c <str_join+0x184>
            memcpy(data, sep_str, sep_len);
   12c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12c1a:	461a      	mov	r2, r3
   12c1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12c1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12c20:	f009 ff5a 	bl	1cad8 <memcpy>
            data += sep_len;
   12c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12c28:	4413      	add	r3, r2
   12c2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        GET_STR_DATA_LEN(seq_items[i], s, l);
   12c2c:	69fa      	ldr	r2, [r7, #28]
   12c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c30:	009b      	lsls	r3, r3, #2
   12c32:	4413      	add	r3, r2
   12c34:	681b      	ldr	r3, [r3, #0]
   12c36:	4618      	mov	r0, r3
   12c38:	f7ff fa08 	bl	1204c <MP_OBJ_IS_QSTR>
   12c3c:	4603      	mov	r3, r0
   12c3e:	2b00      	cmp	r3, #0
   12c40:	d00d      	beq.n	12c5e <str_join+0x1b6>
   12c42:	69fa      	ldr	r2, [r7, #28]
   12c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c46:	009b      	lsls	r3, r3, #2
   12c48:	4413      	add	r3, r2
   12c4a:	681b      	ldr	r3, [r3, #0]
   12c4c:	089b      	lsrs	r3, r3, #2
   12c4e:	f107 0208 	add.w	r2, r7, #8
   12c52:	4611      	mov	r1, r2
   12c54:	4618      	mov	r0, r3
   12c56:	f7ee fb05 	bl	1264 <qstr_data>
   12c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
   12c5c:	e00d      	b.n	12c7a <str_join+0x1d2>
   12c5e:	69fa      	ldr	r2, [r7, #28]
   12c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c62:	009b      	lsls	r3, r3, #2
   12c64:	4413      	add	r3, r2
   12c66:	681b      	ldr	r3, [r3, #0]
   12c68:	689b      	ldr	r3, [r3, #8]
   12c6a:	60bb      	str	r3, [r7, #8]
   12c6c:	69fa      	ldr	r2, [r7, #28]
   12c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c70:	009b      	lsls	r3, r3, #2
   12c72:	4413      	add	r3, r2
   12c74:	681b      	ldr	r3, [r3, #0]
   12c76:	68db      	ldr	r3, [r3, #12]
   12c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        memcpy(data, s, l);
   12c7a:	68bb      	ldr	r3, [r7, #8]
   12c7c:	461a      	mov	r2, r3
   12c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12c80:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12c82:	f009 ff29 	bl	1cad8 <memcpy>
        data += l;
   12c86:	68bb      	ldr	r3, [r7, #8]
   12c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12c8a:	4413      	add	r3, r2
   12c8c:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c90:	3301      	adds	r3, #1
   12c92:	633b      	str	r3, [r7, #48]	; 0x30
   12c94:	6a3b      	ldr	r3, [r7, #32]
   12c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12c98:	429a      	cmp	r2, r3
   12c9a:	d3ba      	bcc.n	12c12 <str_join+0x16a>
    }

    // return joined string
    return mp_obj_new_str_from_vstr(self_type, &vstr);
   12c9c:	f107 030c 	add.w	r3, r7, #12
   12ca0:	4619      	mov	r1, r3
   12ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12ca4:	f002 fa3d 	bl	15122 <mp_obj_new_str_from_vstr>
   12ca8:	4603      	mov	r3, r0
}
   12caa:	4618      	mov	r0, r3
   12cac:	374c      	adds	r7, #76	; 0x4c
   12cae:	46bd      	mov	sp, r7
   12cb0:	bd90      	pop	{r4, r7, pc}
   12cb2:	bf00      	nop
   12cb4:	000126f7 	.word	0x000126f7
   12cb8:	00023258 	.word	0x00023258
   12cbc:	00023848 	.word	0x00023848
   12cc0:	000232e0 	.word	0x000232e0
   12cc4:	00022e28 	.word	0x00022e28
   12cc8:	00023a20 	.word	0x00023a20
   12ccc:	000232f4 	.word	0x000232f4

00012cd0 <mp_obj_str_split>:
MP_DEFINE_CONST_FUN_OBJ_2(str_join_obj, str_join);

mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   12cd0:	b580      	push	{r7, lr}
   12cd2:	b08e      	sub	sp, #56	; 0x38
   12cd4:	af00      	add	r7, sp, #0
   12cd6:	6078      	str	r0, [r7, #4]
   12cd8:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12cda:	683b      	ldr	r3, [r7, #0]
   12cdc:	681b      	ldr	r3, [r3, #0]
   12cde:	4618      	mov	r0, r3
   12ce0:	f7fa fce6 	bl	d6b0 <mp_obj_get_type>
   12ce4:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_int_t splits = -1;
   12ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12cea:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t sep = mp_const_none;
   12cec:	4b7b      	ldr	r3, [pc, #492]	; (12edc <mp_obj_str_split+0x20c>)
   12cee:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_args > 1) {
   12cf0:	687b      	ldr	r3, [r7, #4]
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d90c      	bls.n	12d10 <mp_obj_str_split+0x40>
        sep = args[1];
   12cf6:	683b      	ldr	r3, [r7, #0]
   12cf8:	685b      	ldr	r3, [r3, #4]
   12cfa:	633b      	str	r3, [r7, #48]	; 0x30
        if (n_args > 2) {
   12cfc:	687b      	ldr	r3, [r7, #4]
   12cfe:	2b02      	cmp	r3, #2
   12d00:	d906      	bls.n	12d10 <mp_obj_str_split+0x40>
            splits = mp_obj_get_int(args[2]);
   12d02:	683b      	ldr	r3, [r7, #0]
   12d04:	3308      	adds	r3, #8
   12d06:	681b      	ldr	r3, [r3, #0]
   12d08:	4618      	mov	r0, r3
   12d0a:	f7fa fead 	bl	da68 <mp_obj_get_int>
   12d0e:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    mp_obj_t res = mp_obj_new_list(0, NULL);
   12d10:	2100      	movs	r1, #0
   12d12:	2000      	movs	r0, #0
   12d14:	f7fe fcc5 	bl	116a2 <mp_obj_new_list>
   12d18:	6278      	str	r0, [r7, #36]	; 0x24
    GET_STR_DATA_LEN(args[0], s, len);
   12d1a:	683b      	ldr	r3, [r7, #0]
   12d1c:	681b      	ldr	r3, [r3, #0]
   12d1e:	4618      	mov	r0, r3
   12d20:	f7ff f994 	bl	1204c <MP_OBJ_IS_QSTR>
   12d24:	4603      	mov	r3, r0
   12d26:	2b00      	cmp	r3, #0
   12d28:	d00a      	beq.n	12d40 <mp_obj_str_split+0x70>
   12d2a:	683b      	ldr	r3, [r7, #0]
   12d2c:	681b      	ldr	r3, [r3, #0]
   12d2e:	089b      	lsrs	r3, r3, #2
   12d30:	f107 0210 	add.w	r2, r7, #16
   12d34:	4611      	mov	r1, r2
   12d36:	4618      	mov	r0, r3
   12d38:	f7ee fa94 	bl	1264 <qstr_data>
   12d3c:	62f8      	str	r0, [r7, #44]	; 0x2c
   12d3e:	e007      	b.n	12d50 <mp_obj_str_split+0x80>
   12d40:	683b      	ldr	r3, [r7, #0]
   12d42:	681b      	ldr	r3, [r3, #0]
   12d44:	689b      	ldr	r3, [r3, #8]
   12d46:	613b      	str	r3, [r7, #16]
   12d48:	683b      	ldr	r3, [r7, #0]
   12d4a:	681b      	ldr	r3, [r3, #0]
   12d4c:	68db      	ldr	r3, [r3, #12]
   12d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte *top = s + len;
   12d50:	693b      	ldr	r3, [r7, #16]
   12d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d54:	4413      	add	r3, r2
   12d56:	623b      	str	r3, [r7, #32]

    if (sep == mp_const_none) {
   12d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12d5a:	4a60      	ldr	r2, [pc, #384]	; (12edc <mp_obj_str_split+0x20c>)
   12d5c:	4293      	cmp	r3, r2
   12d5e:	d167      	bne.n	12e30 <mp_obj_str_split+0x160>
        // sep not given, so separate on whitespace

        // Initial whitespace is not counted as split, so we pre-do it
        while (s < top && unichar_isspace(*s)) s++;
   12d60:	e002      	b.n	12d68 <mp_obj_str_split+0x98>
   12d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d64:	3301      	adds	r3, #1
   12d66:	62fb      	str	r3, [r7, #44]	; 0x2c
   12d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d6a:	6a3b      	ldr	r3, [r7, #32]
   12d6c:	429a      	cmp	r2, r3
   12d6e:	d244      	bcs.n	12dfa <mp_obj_str_split+0x12a>
   12d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d72:	781b      	ldrb	r3, [r3, #0]
   12d74:	4618      	mov	r0, r3
   12d76:	f7ef fb25 	bl	23c4 <unichar_isspace>
   12d7a:	4603      	mov	r3, r0
   12d7c:	2b00      	cmp	r3, #0
   12d7e:	d1f0      	bne.n	12d62 <mp_obj_str_split+0x92>
        while (s < top && splits != 0) {
   12d80:	e03b      	b.n	12dfa <mp_obj_str_split+0x12a>
            const byte *start = s;
   12d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d84:	61fb      	str	r3, [r7, #28]
            while (s < top && !unichar_isspace(*s)) s++;
   12d86:	e002      	b.n	12d8e <mp_obj_str_split+0xbe>
   12d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d8a:	3301      	adds	r3, #1
   12d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   12d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12d90:	6a3b      	ldr	r3, [r7, #32]
   12d92:	429a      	cmp	r2, r3
   12d94:	d20a      	bcs.n	12dac <mp_obj_str_split+0xdc>
   12d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d98:	781b      	ldrb	r3, [r3, #0]
   12d9a:	4618      	mov	r0, r3
   12d9c:	f7ef fb12 	bl	23c4 <unichar_isspace>
   12da0:	4603      	mov	r3, r0
   12da2:	f083 0301 	eor.w	r3, r3, #1
   12da6:	b2db      	uxtb	r3, r3
   12da8:	2b00      	cmp	r3, #0
   12daa:	d1ed      	bne.n	12d88 <mp_obj_str_split+0xb8>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12dae:	69fb      	ldr	r3, [r7, #28]
   12db0:	1ad3      	subs	r3, r2, r3
   12db2:	461a      	mov	r2, r3
   12db4:	69f9      	ldr	r1, [r7, #28]
   12db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12db8:	f002 f987 	bl	150ca <mp_obj_new_str_of_type>
   12dbc:	4603      	mov	r3, r0
   12dbe:	4619      	mov	r1, r3
   12dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12dc2:	f7fe f802 	bl	10dca <mp_obj_list_append>
            if (s >= top) {
   12dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12dc8:	6a3b      	ldr	r3, [r7, #32]
   12dca:	429a      	cmp	r2, r3
   12dcc:	d21d      	bcs.n	12e0a <mp_obj_str_split+0x13a>
                break;
            }
            while (s < top && unichar_isspace(*s)) s++;
   12dce:	e002      	b.n	12dd6 <mp_obj_str_split+0x106>
   12dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12dd2:	3301      	adds	r3, #1
   12dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   12dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12dd8:	6a3b      	ldr	r3, [r7, #32]
   12dda:	429a      	cmp	r2, r3
   12ddc:	d207      	bcs.n	12dee <mp_obj_str_split+0x11e>
   12dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12de0:	781b      	ldrb	r3, [r3, #0]
   12de2:	4618      	mov	r0, r3
   12de4:	f7ef faee 	bl	23c4 <unichar_isspace>
   12de8:	4603      	mov	r3, r0
   12dea:	2b00      	cmp	r3, #0
   12dec:	d1f0      	bne.n	12dd0 <mp_obj_str_split+0x100>
            if (splits > 0) {
   12dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12df0:	2b00      	cmp	r3, #0
   12df2:	dd02      	ble.n	12dfa <mp_obj_str_split+0x12a>
                splits--;
   12df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12df6:	3b01      	subs	r3, #1
   12df8:	637b      	str	r3, [r7, #52]	; 0x34
        while (s < top && splits != 0) {
   12dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12dfc:	6a3b      	ldr	r3, [r7, #32]
   12dfe:	429a      	cmp	r2, r3
   12e00:	d204      	bcs.n	12e0c <mp_obj_str_split+0x13c>
   12e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12e04:	2b00      	cmp	r3, #0
   12e06:	d1bc      	bne.n	12d82 <mp_obj_str_split+0xb2>
   12e08:	e000      	b.n	12e0c <mp_obj_str_split+0x13c>
                break;
   12e0a:	bf00      	nop
            }
        }

        if (s < top) {
   12e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12e0e:	6a3b      	ldr	r3, [r7, #32]
   12e10:	429a      	cmp	r2, r3
   12e12:	d25d      	bcs.n	12ed0 <mp_obj_str_split+0x200>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   12e14:	6a3a      	ldr	r2, [r7, #32]
   12e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e18:	1ad3      	subs	r3, r2, r3
   12e1a:	461a      	mov	r2, r3
   12e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12e20:	f002 f953 	bl	150ca <mp_obj_new_str_of_type>
   12e24:	4603      	mov	r3, r0
   12e26:	4619      	mov	r1, r3
   12e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12e2a:	f7fd ffce 	bl	10dca <mp_obj_list_append>
   12e2e:	e04f      	b.n	12ed0 <mp_obj_str_split+0x200>
        }

    } else {
        // sep given
        if (mp_obj_get_type(sep) != self_type) {
   12e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12e32:	f7fa fc3d 	bl	d6b0 <mp_obj_get_type>
   12e36:	4602      	mov	r2, r0
   12e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e3a:	429a      	cmp	r2, r3
   12e3c:	d002      	beq.n	12e44 <mp_obj_str_split+0x174>
            bad_implicit_conversion(sep);
   12e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12e40:	f002 fac1 	bl	153c6 <bad_implicit_conversion>
        }

        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   12e44:	f107 030c 	add.w	r3, r7, #12
   12e48:	4619      	mov	r1, r3
   12e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12e4c:	f002 fb2a 	bl	154a4 <mp_obj_str_get_data>
   12e50:	61b8      	str	r0, [r7, #24]

        if (sep_len == 0) {
   12e52:	68fb      	ldr	r3, [r7, #12]
   12e54:	2b00      	cmp	r3, #0
   12e56:	d102      	bne.n	12e5e <mp_obj_str_split+0x18e>
            mp_raise_ValueError("empty separator");
   12e58:	4821      	ldr	r0, [pc, #132]	; (12ee0 <mp_obj_str_split+0x210>)
   12e5a:	f7f9 fffa 	bl	ce52 <mp_raise_ValueError>
        }

        for (;;) {
            const byte *start = s;
   12e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e60:	617b      	str	r3, [r7, #20]
            for (;;) {
                if (splits == 0 || s + sep_len > top) {
   12e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12e64:	2b00      	cmp	r3, #0
   12e66:	d005      	beq.n	12e74 <mp_obj_str_split+0x1a4>
   12e68:	68fb      	ldr	r3, [r7, #12]
   12e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12e6c:	441a      	add	r2, r3
   12e6e:	6a3b      	ldr	r3, [r7, #32]
   12e70:	429a      	cmp	r2, r3
   12e72:	d902      	bls.n	12e7a <mp_obj_str_split+0x1aa>
                    s = top;
   12e74:	6a3b      	ldr	r3, [r7, #32]
   12e76:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   12e78:	e00d      	b.n	12e96 <mp_obj_str_split+0x1c6>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   12e7a:	68fb      	ldr	r3, [r7, #12]
   12e7c:	461a      	mov	r2, r3
   12e7e:	69b9      	ldr	r1, [r7, #24]
   12e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   12e82:	f009 ff0e 	bl	1cca2 <memcmp>
   12e86:	4603      	mov	r3, r0
   12e88:	2b00      	cmp	r3, #0
   12e8a:	d003      	beq.n	12e94 <mp_obj_str_split+0x1c4>
                    break;
                }
                s++;
   12e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e8e:	3301      	adds	r3, #1
   12e90:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (splits == 0 || s + sep_len > top) {
   12e92:	e7e6      	b.n	12e62 <mp_obj_str_split+0x192>
                    break;
   12e94:	bf00      	nop
            }
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12e98:	697b      	ldr	r3, [r7, #20]
   12e9a:	1ad3      	subs	r3, r2, r3
   12e9c:	461a      	mov	r2, r3
   12e9e:	6979      	ldr	r1, [r7, #20]
   12ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12ea2:	f002 f912 	bl	150ca <mp_obj_new_str_of_type>
   12ea6:	4603      	mov	r3, r0
   12ea8:	4619      	mov	r1, r3
   12eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12eac:	f7fd ff8d 	bl	10dca <mp_obj_list_append>
            if (s >= top) {
   12eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12eb2:	6a3b      	ldr	r3, [r7, #32]
   12eb4:	429a      	cmp	r2, r3
   12eb6:	d20a      	bcs.n	12ece <mp_obj_str_split+0x1fe>
                break;
            }
            s += sep_len;
   12eb8:	68fb      	ldr	r3, [r7, #12]
   12eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12ebc:	4413      	add	r3, r2
   12ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (splits > 0) {
   12ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ec2:	2b00      	cmp	r3, #0
   12ec4:	ddcb      	ble.n	12e5e <mp_obj_str_split+0x18e>
                splits--;
   12ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ec8:	3b01      	subs	r3, #1
   12eca:	637b      	str	r3, [r7, #52]	; 0x34
        for (;;) {
   12ecc:	e7c7      	b.n	12e5e <mp_obj_str_split+0x18e>
                break;
   12ece:	bf00      	nop
            }
        }
    }

    return res;
   12ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   12ed2:	4618      	mov	r0, r3
   12ed4:	3738      	adds	r7, #56	; 0x38
   12ed6:	46bd      	mov	sp, r7
   12ed8:	bd80      	pop	{r7, pc}
   12eda:	bf00      	nop
   12edc:	00023108 	.word	0x00023108
   12ee0:	00023344 	.word	0x00023344

00012ee4 <str_rsplit>:
    return res;
}
MP_DEFINE_CONST_FUN_OBJ_KW(str_splitlines_obj, 1, str_splitlines);
#endif

STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   12ee4:	b590      	push	{r4, r7, lr}
   12ee6:	b091      	sub	sp, #68	; 0x44
   12ee8:	af00      	add	r7, sp, #0
   12eea:	6078      	str	r0, [r7, #4]
   12eec:	6039      	str	r1, [r7, #0]
    if (n_args < 3) {
   12eee:	687b      	ldr	r3, [r7, #4]
   12ef0:	2b02      	cmp	r3, #2
   12ef2:	d805      	bhi.n	12f00 <str_rsplit+0x1c>
        // If we don't have split limit, it doesn't matter from which side
        // we split.
        return mp_obj_str_split(n_args, args);
   12ef4:	6839      	ldr	r1, [r7, #0]
   12ef6:	6878      	ldr	r0, [r7, #4]
   12ef8:	f7ff feea 	bl	12cd0 <mp_obj_str_split>
   12efc:	4603      	mov	r3, r0
   12efe:	e0cc      	b.n	1309a <str_rsplit+0x1b6>
    }
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12f00:	683b      	ldr	r3, [r7, #0]
   12f02:	681b      	ldr	r3, [r3, #0]
   12f04:	4618      	mov	r0, r3
   12f06:	f7fa fbd3 	bl	d6b0 <mp_obj_get_type>
   12f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_t sep = args[1];
   12f0c:	683b      	ldr	r3, [r7, #0]
   12f0e:	685b      	ldr	r3, [r3, #4]
   12f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_STR_DATA_LEN(args[0], s, len);
   12f12:	683b      	ldr	r3, [r7, #0]
   12f14:	681b      	ldr	r3, [r3, #0]
   12f16:	4618      	mov	r0, r3
   12f18:	f7ff f898 	bl	1204c <MP_OBJ_IS_QSTR>
   12f1c:	4603      	mov	r3, r0
   12f1e:	2b00      	cmp	r3, #0
   12f20:	d00a      	beq.n	12f38 <str_rsplit+0x54>
   12f22:	683b      	ldr	r3, [r7, #0]
   12f24:	681b      	ldr	r3, [r3, #0]
   12f26:	089b      	lsrs	r3, r3, #2
   12f28:	f107 0210 	add.w	r2, r7, #16
   12f2c:	4611      	mov	r1, r2
   12f2e:	4618      	mov	r0, r3
   12f30:	f7ee f998 	bl	1264 <qstr_data>
   12f34:	63f8      	str	r0, [r7, #60]	; 0x3c
   12f36:	e007      	b.n	12f48 <str_rsplit+0x64>
   12f38:	683b      	ldr	r3, [r7, #0]
   12f3a:	681b      	ldr	r3, [r3, #0]
   12f3c:	689b      	ldr	r3, [r3, #8]
   12f3e:	613b      	str	r3, [r7, #16]
   12f40:	683b      	ldr	r3, [r7, #0]
   12f42:	681b      	ldr	r3, [r3, #0]
   12f44:	68db      	ldr	r3, [r3, #12]
   12f46:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_int_t splits = mp_obj_get_int(args[2]);
   12f48:	683b      	ldr	r3, [r7, #0]
   12f4a:	3308      	adds	r3, #8
   12f4c:	681b      	ldr	r3, [r3, #0]
   12f4e:	4618      	mov	r0, r3
   12f50:	f7fa fd8a 	bl	da68 <mp_obj_get_int>
   12f54:	63b8      	str	r0, [r7, #56]	; 0x38
    if (splits < 0) {
   12f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f58:	2b00      	cmp	r3, #0
   12f5a:	da05      	bge.n	12f68 <str_rsplit+0x84>
        // Negative limit means no limit, so delegate to split().
        return mp_obj_str_split(n_args, args);
   12f5c:	6839      	ldr	r1, [r7, #0]
   12f5e:	6878      	ldr	r0, [r7, #4]
   12f60:	f7ff feb6 	bl	12cd0 <mp_obj_str_split>
   12f64:	4603      	mov	r3, r0
   12f66:	e098      	b.n	1309a <str_rsplit+0x1b6>
    }

    mp_int_t org_splits = splits;
   12f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f6a:	627b      	str	r3, [r7, #36]	; 0x24
    // Preallocate list to the max expected # of elements, as we
    // will fill it from the end.
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   12f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f6e:	3301      	adds	r3, #1
   12f70:	2100      	movs	r1, #0
   12f72:	4618      	mov	r0, r3
   12f74:	f7fe fb95 	bl	116a2 <mp_obj_new_list>
   12f78:	6238      	str	r0, [r7, #32]
    mp_int_t idx = splits;
   12f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12f7c:	637b      	str	r3, [r7, #52]	; 0x34

    if (sep == mp_const_none) {
   12f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12f80:	4a48      	ldr	r2, [pc, #288]	; (130a4 <str_rsplit+0x1c0>)
   12f82:	4293      	cmp	r3, r2
   12f84:	d102      	bne.n	12f8c <str_rsplit+0xa8>
        mp_raise_NotImplementedError("rsplit(None,n)");
   12f86:	4848      	ldr	r0, [pc, #288]	; (130a8 <str_rsplit+0x1c4>)
   12f88:	f7f9 ff8a 	bl	cea0 <mp_raise_NotImplementedError>
    } else {
        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   12f8c:	f107 030c 	add.w	r3, r7, #12
   12f90:	4619      	mov	r1, r3
   12f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12f94:	f002 fa86 	bl	154a4 <mp_obj_str_get_data>
   12f98:	61f8      	str	r0, [r7, #28]

        if (sep_len == 0) {
   12f9a:	68fb      	ldr	r3, [r7, #12]
   12f9c:	2b00      	cmp	r3, #0
   12f9e:	d102      	bne.n	12fa6 <str_rsplit+0xc2>
            mp_raise_ValueError("empty separator");
   12fa0:	4842      	ldr	r0, [pc, #264]	; (130ac <str_rsplit+0x1c8>)
   12fa2:	f7f9 ff56 	bl	ce52 <mp_raise_ValueError>
        }

        const byte *beg = s;
   12fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12fa8:	61bb      	str	r3, [r7, #24]
        const byte *last = s + len;
   12faa:	693b      	ldr	r3, [r7, #16]
   12fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12fae:	4413      	add	r3, r2
   12fb0:	633b      	str	r3, [r7, #48]	; 0x30
        for (;;) {
            s = last - sep_len;
   12fb2:	68fb      	ldr	r3, [r7, #12]
   12fb4:	425b      	negs	r3, r3
   12fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12fb8:	4413      	add	r3, r2
   12fba:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (;;) {
                if (splits == 0 || s < beg) {
   12fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12fbe:	2b00      	cmp	r3, #0
   12fc0:	d011      	beq.n	12fe6 <str_rsplit+0x102>
   12fc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12fc4:	69bb      	ldr	r3, [r7, #24]
   12fc6:	429a      	cmp	r2, r3
   12fc8:	d30d      	bcc.n	12fe6 <str_rsplit+0x102>
                    break;
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   12fca:	68fb      	ldr	r3, [r7, #12]
   12fcc:	461a      	mov	r2, r3
   12fce:	69f9      	ldr	r1, [r7, #28]
   12fd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   12fd2:	f009 fe66 	bl	1cca2 <memcmp>
   12fd6:	4603      	mov	r3, r0
   12fd8:	2b00      	cmp	r3, #0
   12fda:	d003      	beq.n	12fe4 <str_rsplit+0x100>
                    break;
                }
                s--;
   12fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12fde:	3b01      	subs	r3, #1
   12fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (splits == 0 || s < beg) {
   12fe2:	e7eb      	b.n	12fbc <str_rsplit+0xd8>
                    break;
   12fe4:	bf00      	nop
            }
            if (s < beg || splits == 0) {
   12fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12fe8:	69bb      	ldr	r3, [r7, #24]
   12fea:	429a      	cmp	r2, r3
   12fec:	d302      	bcc.n	12ff4 <str_rsplit+0x110>
   12fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12ff0:	2b00      	cmp	r3, #0
   12ff2:	d113      	bne.n	1301c <str_rsplit+0x138>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   12ff4:	6a3b      	ldr	r3, [r7, #32]
   12ff6:	68da      	ldr	r2, [r3, #12]
   12ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ffa:	009b      	lsls	r3, r3, #2
   12ffc:	18d4      	adds	r4, r2, r3
   12ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13000:	69bb      	ldr	r3, [r7, #24]
   13002:	1ad3      	subs	r3, r2, r3
   13004:	461a      	mov	r2, r3
   13006:	69b9      	ldr	r1, [r7, #24]
   13008:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1300a:	f002 f85e 	bl	150ca <mp_obj_new_str_of_type>
   1300e:	4603      	mov	r3, r0
   13010:	6023      	str	r3, [r4, #0]
                break;
   13012:	bf00      	nop
            }
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
            last = s;
            splits--;
        }
        if (idx != 0) {
   13014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13016:	2b00      	cmp	r3, #0
   13018:	d03e      	beq.n	13098 <str_rsplit+0x1b4>
   1301a:	e01b      	b.n	13054 <str_rsplit+0x170>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   1301c:	6a3b      	ldr	r3, [r7, #32]
   1301e:	68da      	ldr	r2, [r3, #12]
   13020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13022:	1e59      	subs	r1, r3, #1
   13024:	6379      	str	r1, [r7, #52]	; 0x34
   13026:	009b      	lsls	r3, r3, #2
   13028:	18d4      	adds	r4, r2, r3
   1302a:	68fb      	ldr	r3, [r7, #12]
   1302c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1302e:	18d1      	adds	r1, r2, r3
   13030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13034:	1ad3      	subs	r3, r2, r3
   13036:	461a      	mov	r2, r3
   13038:	68fb      	ldr	r3, [r7, #12]
   1303a:	1ad3      	subs	r3, r2, r3
   1303c:	461a      	mov	r2, r3
   1303e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13040:	f002 f843 	bl	150ca <mp_obj_new_str_of_type>
   13044:	4603      	mov	r3, r0
   13046:	6023      	str	r3, [r4, #0]
            last = s;
   13048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1304a:	633b      	str	r3, [r7, #48]	; 0x30
            splits--;
   1304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1304e:	3b01      	subs	r3, #1
   13050:	63bb      	str	r3, [r7, #56]	; 0x38
            s = last - sep_len;
   13052:	e7ae      	b.n	12fb2 <str_rsplit+0xce>
            // We split less parts than split limit, now go cleanup surplus
            size_t used = org_splits + 1 - idx;
   13054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13056:	1c5a      	adds	r2, r3, #1
   13058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1305a:	1ad3      	subs	r3, r2, r3
   1305c:	617b      	str	r3, [r7, #20]
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   1305e:	6a3b      	ldr	r3, [r7, #32]
   13060:	68d8      	ldr	r0, [r3, #12]
   13062:	6a3b      	ldr	r3, [r7, #32]
   13064:	68da      	ldr	r2, [r3, #12]
   13066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13068:	009b      	lsls	r3, r3, #2
   1306a:	18d1      	adds	r1, r2, r3
   1306c:	697b      	ldr	r3, [r7, #20]
   1306e:	009b      	lsls	r3, r3, #2
   13070:	461a      	mov	r2, r3
   13072:	f009 fd96 	bl	1cba2 <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   13076:	6a3b      	ldr	r3, [r7, #32]
   13078:	68da      	ldr	r2, [r3, #12]
   1307a:	697b      	ldr	r3, [r7, #20]
   1307c:	009b      	lsls	r3, r3, #2
   1307e:	18d0      	adds	r0, r2, r3
   13080:	6a3b      	ldr	r3, [r7, #32]
   13082:	685a      	ldr	r2, [r3, #4]
   13084:	697b      	ldr	r3, [r7, #20]
   13086:	1ad3      	subs	r3, r2, r3
   13088:	009b      	lsls	r3, r3, #2
   1308a:	461a      	mov	r2, r3
   1308c:	2100      	movs	r1, #0
   1308e:	f009 fdbd 	bl	1cc0c <memset>
            res->len = used;
   13092:	6a3b      	ldr	r3, [r7, #32]
   13094:	697a      	ldr	r2, [r7, #20]
   13096:	609a      	str	r2, [r3, #8]
        }
    }

    return MP_OBJ_FROM_PTR(res);
   13098:	6a3b      	ldr	r3, [r7, #32]
}
   1309a:	4618      	mov	r0, r3
   1309c:	3744      	adds	r7, #68	; 0x44
   1309e:	46bd      	mov	sp, r7
   130a0:	bd90      	pop	{r4, r7, pc}
   130a2:	bf00      	nop
   130a4:	00023108 	.word	0x00023108
   130a8:	00023360 	.word	0x00023360
   130ac:	00023344 	.word	0x00023344

000130b0 <str_finder>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rsplit_obj, 1, 3, str_rsplit);

STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
   130b0:	b580      	push	{r7, lr}
   130b2:	b08e      	sub	sp, #56	; 0x38
   130b4:	af02      	add	r7, sp, #8
   130b6:	60f8      	str	r0, [r7, #12]
   130b8:	60b9      	str	r1, [r7, #8]
   130ba:	607a      	str	r2, [r7, #4]
   130bc:	70fb      	strb	r3, [r7, #3]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   130be:	68bb      	ldr	r3, [r7, #8]
   130c0:	681b      	ldr	r3, [r3, #0]
   130c2:	4618      	mov	r0, r3
   130c4:	f7fa faf4 	bl	d6b0 <mp_obj_get_type>
   130c8:	61f8      	str	r0, [r7, #28]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   130ca:	68bb      	ldr	r3, [r7, #8]
   130cc:	681b      	ldr	r3, [r3, #0]
   130ce:	4618      	mov	r0, r3
   130d0:	f7fe ffbc 	bl	1204c <MP_OBJ_IS_QSTR>
   130d4:	4603      	mov	r3, r0
   130d6:	2b00      	cmp	r3, #0
   130d8:	d115      	bne.n	13106 <str_finder+0x56>
   130da:	68bb      	ldr	r3, [r7, #8]
   130dc:	681b      	ldr	r3, [r3, #0]
   130de:	4618      	mov	r0, r3
   130e0:	f7fe ffc6 	bl	12070 <MP_OBJ_IS_OBJ>
   130e4:	4603      	mov	r3, r0
   130e6:	2b00      	cmp	r3, #0
   130e8:	d006      	beq.n	130f8 <str_finder+0x48>
   130ea:	68bb      	ldr	r3, [r7, #8]
   130ec:	681b      	ldr	r3, [r3, #0]
   130ee:	681b      	ldr	r3, [r3, #0]
   130f0:	699b      	ldr	r3, [r3, #24]
   130f2:	4a56      	ldr	r2, [pc, #344]	; (1324c <str_finder+0x19c>)
   130f4:	4293      	cmp	r3, r2
   130f6:	d006      	beq.n	13106 <str_finder+0x56>
   130f8:	4b55      	ldr	r3, [pc, #340]	; (13250 <str_finder+0x1a0>)
   130fa:	4a56      	ldr	r2, [pc, #344]	; (13254 <str_finder+0x1a4>)
   130fc:	f240 21b1 	movw	r1, #689	; 0x2b1
   13100:	4855      	ldr	r0, [pc, #340]	; (13258 <str_finder+0x1a8>)
   13102:	f008 f9bd 	bl	1b480 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   13106:	68bb      	ldr	r3, [r7, #8]
   13108:	3304      	adds	r3, #4
   1310a:	681b      	ldr	r3, [r3, #0]
   1310c:	4618      	mov	r0, r3
   1310e:	f7fa facf 	bl	d6b0 <mp_obj_get_type>
   13112:	4602      	mov	r2, r0
   13114:	69fb      	ldr	r3, [r7, #28]
   13116:	429a      	cmp	r2, r3
   13118:	d005      	beq.n	13126 <str_finder+0x76>
        bad_implicit_conversion(args[1]);
   1311a:	68bb      	ldr	r3, [r7, #8]
   1311c:	3304      	adds	r3, #4
   1311e:	681b      	ldr	r3, [r3, #0]
   13120:	4618      	mov	r0, r3
   13122:	f002 f950 	bl	153c6 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   13126:	68bb      	ldr	r3, [r7, #8]
   13128:	681b      	ldr	r3, [r3, #0]
   1312a:	4618      	mov	r0, r3
   1312c:	f7fe ff8e 	bl	1204c <MP_OBJ_IS_QSTR>
   13130:	4603      	mov	r3, r0
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <str_finder+0x9c>
   13136:	68bb      	ldr	r3, [r7, #8]
   13138:	681b      	ldr	r3, [r3, #0]
   1313a:	089b      	lsrs	r3, r3, #2
   1313c:	f107 0214 	add.w	r2, r7, #20
   13140:	4611      	mov	r1, r2
   13142:	4618      	mov	r0, r3
   13144:	f7ee f88e 	bl	1264 <qstr_data>
   13148:	62f8      	str	r0, [r7, #44]	; 0x2c
   1314a:	e007      	b.n	1315c <str_finder+0xac>
   1314c:	68bb      	ldr	r3, [r7, #8]
   1314e:	681b      	ldr	r3, [r3, #0]
   13150:	689b      	ldr	r3, [r3, #8]
   13152:	617b      	str	r3, [r7, #20]
   13154:	68bb      	ldr	r3, [r7, #8]
   13156:	681b      	ldr	r3, [r3, #0]
   13158:	68db      	ldr	r3, [r3, #12]
   1315a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   1315c:	68bb      	ldr	r3, [r7, #8]
   1315e:	3304      	adds	r3, #4
   13160:	681b      	ldr	r3, [r3, #0]
   13162:	4618      	mov	r0, r3
   13164:	f7fe ff72 	bl	1204c <MP_OBJ_IS_QSTR>
   13168:	4603      	mov	r3, r0
   1316a:	2b00      	cmp	r3, #0
   1316c:	d00b      	beq.n	13186 <str_finder+0xd6>
   1316e:	68bb      	ldr	r3, [r7, #8]
   13170:	3304      	adds	r3, #4
   13172:	681b      	ldr	r3, [r3, #0]
   13174:	089b      	lsrs	r3, r3, #2
   13176:	f107 0210 	add.w	r2, r7, #16
   1317a:	4611      	mov	r1, r2
   1317c:	4618      	mov	r0, r3
   1317e:	f7ee f871 	bl	1264 <qstr_data>
   13182:	62b8      	str	r0, [r7, #40]	; 0x28
   13184:	e009      	b.n	1319a <str_finder+0xea>
   13186:	68bb      	ldr	r3, [r7, #8]
   13188:	3304      	adds	r3, #4
   1318a:	681b      	ldr	r3, [r3, #0]
   1318c:	689b      	ldr	r3, [r3, #8]
   1318e:	613b      	str	r3, [r7, #16]
   13190:	68bb      	ldr	r3, [r7, #8]
   13192:	3304      	adds	r3, #4
   13194:	681b      	ldr	r3, [r3, #0]
   13196:	68db      	ldr	r3, [r3, #12]
   13198:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   1319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1319c:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   1319e:	697b      	ldr	r3, [r7, #20]
   131a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   131a2:	4413      	add	r3, r2
   131a4:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   131a6:	68fb      	ldr	r3, [r7, #12]
   131a8:	2b02      	cmp	r3, #2
   131aa:	d911      	bls.n	131d0 <str_finder+0x120>
   131ac:	68bb      	ldr	r3, [r7, #8]
   131ae:	3308      	adds	r3, #8
   131b0:	681b      	ldr	r3, [r3, #0]
   131b2:	4a2a      	ldr	r2, [pc, #168]	; (1325c <str_finder+0x1ac>)
   131b4:	4293      	cmp	r3, r2
   131b6:	d00b      	beq.n	131d0 <str_finder+0x120>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   131b8:	697a      	ldr	r2, [r7, #20]
   131ba:	68bb      	ldr	r3, [r7, #8]
   131bc:	3308      	adds	r3, #8
   131be:	6819      	ldr	r1, [r3, #0]
   131c0:	2301      	movs	r3, #1
   131c2:	9300      	str	r3, [sp, #0]
   131c4:	460b      	mov	r3, r1
   131c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   131c8:	69f8      	ldr	r0, [r7, #28]
   131ca:	f7ff fc11 	bl	129f0 <str_index_to_ptr>
   131ce:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   131d0:	68fb      	ldr	r3, [r7, #12]
   131d2:	2b03      	cmp	r3, #3
   131d4:	d911      	bls.n	131fa <str_finder+0x14a>
   131d6:	68bb      	ldr	r3, [r7, #8]
   131d8:	330c      	adds	r3, #12
   131da:	681b      	ldr	r3, [r3, #0]
   131dc:	4a1f      	ldr	r2, [pc, #124]	; (1325c <str_finder+0x1ac>)
   131de:	4293      	cmp	r3, r2
   131e0:	d00b      	beq.n	131fa <str_finder+0x14a>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   131e2:	697a      	ldr	r2, [r7, #20]
   131e4:	68bb      	ldr	r3, [r7, #8]
   131e6:	330c      	adds	r3, #12
   131e8:	6819      	ldr	r1, [r3, #0]
   131ea:	2301      	movs	r3, #1
   131ec:	9300      	str	r3, [sp, #0]
   131ee:	460b      	mov	r3, r1
   131f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   131f2:	69f8      	ldr	r0, [r7, #28]
   131f4:	f7ff fbfc 	bl	129f0 <str_index_to_ptr>
   131f8:	6238      	str	r0, [r7, #32]
    }

    if (end < start) {
   131fa:	6a3a      	ldr	r2, [r7, #32]
   131fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131fe:	429a      	cmp	r2, r3
   13200:	d310      	bcc.n	13224 <str_finder+0x174>
        goto out_error;
    }

    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
   13202:	6a3a      	ldr	r2, [r7, #32]
   13204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13206:	1ad3      	subs	r3, r2, r3
   13208:	4619      	mov	r1, r3
   1320a:	693a      	ldr	r2, [r7, #16]
   1320c:	687b      	ldr	r3, [r7, #4]
   1320e:	9300      	str	r3, [sp, #0]
   13210:	4613      	mov	r3, r2
   13212:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13214:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13216:	f7ff fa35 	bl	12684 <find_subbytes>
   1321a:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
   1321c:	69bb      	ldr	r3, [r7, #24]
   1321e:	2b00      	cmp	r3, #0
   13220:	d10a      	bne.n	13238 <str_finder+0x188>
   13222:	e000      	b.n	13226 <str_finder+0x176>
        goto out_error;
   13224:	bf00      	nop
    out_error:
        // not found
        if (is_index) {
   13226:	78fb      	ldrb	r3, [r7, #3]
   13228:	2b00      	cmp	r3, #0
   1322a:	d002      	beq.n	13232 <str_finder+0x182>
            mp_raise_ValueError("substring not found");
   1322c:	480c      	ldr	r0, [pc, #48]	; (13260 <str_finder+0x1b0>)
   1322e:	f7f9 fe10 	bl	ce52 <mp_raise_ValueError>
        } else {
            return MP_OBJ_NEW_SMALL_INT(-1);
   13232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13236:	e005      	b.n	13244 <str_finder+0x194>
        #if MICROPY_PY_BUILTINS_STR_UNICODE
        if (self_type == &mp_type_str) {
            return MP_OBJ_NEW_SMALL_INT(utf8_ptr_to_index(haystack, p));
        }
        #endif
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
   13238:	69ba      	ldr	r2, [r7, #24]
   1323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1323c:	1ad3      	subs	r3, r2, r3
   1323e:	005b      	lsls	r3, r3, #1
   13240:	f043 0301 	orr.w	r3, r3, #1
    }
}
   13244:	4618      	mov	r0, r3
   13246:	3730      	adds	r7, #48	; 0x30
   13248:	46bd      	mov	sp, r7
   1324a:	bd80      	pop	{r7, pc}
   1324c:	000126f7 	.word	0x000126f7
   13250:	0002337c 	.word	0x0002337c
   13254:	00023854 	.word	0x00023854
   13258:	000232e0 	.word	0x000232e0
   1325c:	00023108 	.word	0x00023108
   13260:	00023404 	.word	0x00023404

00013264 <str_find>:

STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
   13264:	b580      	push	{r7, lr}
   13266:	b082      	sub	sp, #8
   13268:	af00      	add	r7, sp, #0
   1326a:	6078      	str	r0, [r7, #4]
   1326c:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, false);
   1326e:	2300      	movs	r3, #0
   13270:	2201      	movs	r2, #1
   13272:	6839      	ldr	r1, [r7, #0]
   13274:	6878      	ldr	r0, [r7, #4]
   13276:	f7ff ff1b 	bl	130b0 <str_finder>
   1327a:	4603      	mov	r3, r0
}
   1327c:	4618      	mov	r0, r3
   1327e:	3708      	adds	r7, #8
   13280:	46bd      	mov	sp, r7
   13282:	bd80      	pop	{r7, pc}

00013284 <str_rfind>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_find_obj, 2, 4, str_find);

STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
   13284:	b580      	push	{r7, lr}
   13286:	b082      	sub	sp, #8
   13288:	af00      	add	r7, sp, #0
   1328a:	6078      	str	r0, [r7, #4]
   1328c:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, false);
   1328e:	2300      	movs	r3, #0
   13290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13294:	6839      	ldr	r1, [r7, #0]
   13296:	6878      	ldr	r0, [r7, #4]
   13298:	f7ff ff0a 	bl	130b0 <str_finder>
   1329c:	4603      	mov	r3, r0
}
   1329e:	4618      	mov	r0, r3
   132a0:	3708      	adds	r7, #8
   132a2:	46bd      	mov	sp, r7
   132a4:	bd80      	pop	{r7, pc}

000132a6 <str_index>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rfind_obj, 2, 4, str_rfind);

STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
   132a6:	b580      	push	{r7, lr}
   132a8:	b082      	sub	sp, #8
   132aa:	af00      	add	r7, sp, #0
   132ac:	6078      	str	r0, [r7, #4]
   132ae:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, true);
   132b0:	2301      	movs	r3, #1
   132b2:	2201      	movs	r2, #1
   132b4:	6839      	ldr	r1, [r7, #0]
   132b6:	6878      	ldr	r0, [r7, #4]
   132b8:	f7ff fefa 	bl	130b0 <str_finder>
   132bc:	4603      	mov	r3, r0
}
   132be:	4618      	mov	r0, r3
   132c0:	3708      	adds	r7, #8
   132c2:	46bd      	mov	sp, r7
   132c4:	bd80      	pop	{r7, pc}

000132c6 <str_rindex>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_index_obj, 2, 4, str_index);

STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
   132c6:	b580      	push	{r7, lr}
   132c8:	b082      	sub	sp, #8
   132ca:	af00      	add	r7, sp, #0
   132cc:	6078      	str	r0, [r7, #4]
   132ce:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, true);
   132d0:	2301      	movs	r3, #1
   132d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132d6:	6839      	ldr	r1, [r7, #0]
   132d8:	6878      	ldr	r0, [r7, #4]
   132da:	f7ff fee9 	bl	130b0 <str_finder>
   132de:	4603      	mov	r3, r0
}
   132e0:	4618      	mov	r0, r3
   132e2:	3708      	adds	r7, #8
   132e4:	46bd      	mov	sp, r7
   132e6:	bd80      	pop	{r7, pc}

000132e8 <str_startswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rindex_obj, 2, 4, str_rindex);

// TODO: (Much) more variety in args
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   132e8:	b580      	push	{r7, lr}
   132ea:	b08a      	sub	sp, #40	; 0x28
   132ec:	af02      	add	r7, sp, #8
   132ee:	6078      	str	r0, [r7, #4]
   132f0:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   132f2:	683b      	ldr	r3, [r7, #0]
   132f4:	681b      	ldr	r3, [r3, #0]
   132f6:	4618      	mov	r0, r3
   132f8:	f7fa f9da 	bl	d6b0 <mp_obj_get_type>
   132fc:	6178      	str	r0, [r7, #20]
    GET_STR_DATA_LEN(args[0], str, str_len);
   132fe:	683b      	ldr	r3, [r7, #0]
   13300:	681b      	ldr	r3, [r3, #0]
   13302:	4618      	mov	r0, r3
   13304:	f7fe fea2 	bl	1204c <MP_OBJ_IS_QSTR>
   13308:	4603      	mov	r3, r0
   1330a:	2b00      	cmp	r3, #0
   1330c:	d00a      	beq.n	13324 <str_startswith+0x3c>
   1330e:	683b      	ldr	r3, [r7, #0]
   13310:	681b      	ldr	r3, [r3, #0]
   13312:	089b      	lsrs	r3, r3, #2
   13314:	f107 020c 	add.w	r2, r7, #12
   13318:	4611      	mov	r1, r2
   1331a:	4618      	mov	r0, r3
   1331c:	f7ed ffa2 	bl	1264 <qstr_data>
   13320:	61f8      	str	r0, [r7, #28]
   13322:	e007      	b.n	13334 <str_startswith+0x4c>
   13324:	683b      	ldr	r3, [r7, #0]
   13326:	681b      	ldr	r3, [r3, #0]
   13328:	689b      	ldr	r3, [r3, #8]
   1332a:	60fb      	str	r3, [r7, #12]
   1332c:	683b      	ldr	r3, [r7, #0]
   1332e:	681b      	ldr	r3, [r3, #0]
   13330:	68db      	ldr	r3, [r3, #12]
   13332:	61fb      	str	r3, [r7, #28]
    size_t prefix_len;
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   13334:	683b      	ldr	r3, [r7, #0]
   13336:	3304      	adds	r3, #4
   13338:	681b      	ldr	r3, [r3, #0]
   1333a:	f107 0208 	add.w	r2, r7, #8
   1333e:	4611      	mov	r1, r2
   13340:	4618      	mov	r0, r3
   13342:	f002 f8af 	bl	154a4 <mp_obj_str_get_data>
   13346:	6138      	str	r0, [r7, #16]
    const byte *start = str;
   13348:	69fb      	ldr	r3, [r7, #28]
   1334a:	61bb      	str	r3, [r7, #24]
    if (n_args > 2) {
   1334c:	687b      	ldr	r3, [r7, #4]
   1334e:	2b02      	cmp	r3, #2
   13350:	d90b      	bls.n	1336a <str_startswith+0x82>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   13352:	68fa      	ldr	r2, [r7, #12]
   13354:	683b      	ldr	r3, [r7, #0]
   13356:	3308      	adds	r3, #8
   13358:	6819      	ldr	r1, [r3, #0]
   1335a:	2301      	movs	r3, #1
   1335c:	9300      	str	r3, [sp, #0]
   1335e:	460b      	mov	r3, r1
   13360:	69f9      	ldr	r1, [r7, #28]
   13362:	6978      	ldr	r0, [r7, #20]
   13364:	f7ff fb44 	bl	129f0 <str_index_to_ptr>
   13368:	61b8      	str	r0, [r7, #24]
    }
    if (prefix_len + (start - str) > str_len) {
   1336a:	69ba      	ldr	r2, [r7, #24]
   1336c:	69fb      	ldr	r3, [r7, #28]
   1336e:	1ad3      	subs	r3, r2, r3
   13370:	461a      	mov	r2, r3
   13372:	68bb      	ldr	r3, [r7, #8]
   13374:	441a      	add	r2, r3
   13376:	68fb      	ldr	r3, [r7, #12]
   13378:	429a      	cmp	r2, r3
   1337a:	d901      	bls.n	13380 <str_startswith+0x98>
        return mp_const_false;
   1337c:	4b0a      	ldr	r3, [pc, #40]	; (133a8 <str_startswith+0xc0>)
   1337e:	e00f      	b.n	133a0 <str_startswith+0xb8>
    }
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   13380:	68bb      	ldr	r3, [r7, #8]
   13382:	461a      	mov	r2, r3
   13384:	6939      	ldr	r1, [r7, #16]
   13386:	69b8      	ldr	r0, [r7, #24]
   13388:	f009 fc8b 	bl	1cca2 <memcmp>
   1338c:	4603      	mov	r3, r0
   1338e:	2b00      	cmp	r3, #0
   13390:	bf0c      	ite	eq
   13392:	2301      	moveq	r3, #1
   13394:	2300      	movne	r3, #0
   13396:	b2db      	uxtb	r3, r3
   13398:	4618      	mov	r0, r3
   1339a:	f7fe fe7b 	bl	12094 <mp_obj_new_bool>
   1339e:	4603      	mov	r3, r0
}
   133a0:	4618      	mov	r0, r3
   133a2:	3720      	adds	r7, #32
   133a4:	46bd      	mov	sp, r7
   133a6:	bd80      	pop	{r7, pc}
   133a8:	00021894 	.word	0x00021894

000133ac <str_endswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_startswith_obj, 2, 3, str_startswith);

STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   133ac:	b580      	push	{r7, lr}
   133ae:	b086      	sub	sp, #24
   133b0:	af00      	add	r7, sp, #0
   133b2:	6078      	str	r0, [r7, #4]
   133b4:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(args[0], str, str_len);
   133b6:	683b      	ldr	r3, [r7, #0]
   133b8:	681b      	ldr	r3, [r3, #0]
   133ba:	4618      	mov	r0, r3
   133bc:	f7fe fe46 	bl	1204c <MP_OBJ_IS_QSTR>
   133c0:	4603      	mov	r3, r0
   133c2:	2b00      	cmp	r3, #0
   133c4:	d00a      	beq.n	133dc <str_endswith+0x30>
   133c6:	683b      	ldr	r3, [r7, #0]
   133c8:	681b      	ldr	r3, [r3, #0]
   133ca:	089b      	lsrs	r3, r3, #2
   133cc:	f107 020c 	add.w	r2, r7, #12
   133d0:	4611      	mov	r1, r2
   133d2:	4618      	mov	r0, r3
   133d4:	f7ed ff46 	bl	1264 <qstr_data>
   133d8:	6178      	str	r0, [r7, #20]
   133da:	e007      	b.n	133ec <str_endswith+0x40>
   133dc:	683b      	ldr	r3, [r7, #0]
   133de:	681b      	ldr	r3, [r3, #0]
   133e0:	689b      	ldr	r3, [r3, #8]
   133e2:	60fb      	str	r3, [r7, #12]
   133e4:	683b      	ldr	r3, [r7, #0]
   133e6:	681b      	ldr	r3, [r3, #0]
   133e8:	68db      	ldr	r3, [r3, #12]
   133ea:	617b      	str	r3, [r7, #20]
    size_t suffix_len;
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   133ec:	683b      	ldr	r3, [r7, #0]
   133ee:	3304      	adds	r3, #4
   133f0:	681b      	ldr	r3, [r3, #0]
   133f2:	f107 0208 	add.w	r2, r7, #8
   133f6:	4611      	mov	r1, r2
   133f8:	4618      	mov	r0, r3
   133fa:	f002 f853 	bl	154a4 <mp_obj_str_get_data>
   133fe:	6138      	str	r0, [r7, #16]
    if (n_args > 2) {
   13400:	687b      	ldr	r3, [r7, #4]
   13402:	2b02      	cmp	r3, #2
   13404:	d902      	bls.n	1340c <str_endswith+0x60>
        mp_raise_NotImplementedError("start/end indices");
   13406:	4810      	ldr	r0, [pc, #64]	; (13448 <str_endswith+0x9c>)
   13408:	f7f9 fd4a 	bl	cea0 <mp_raise_NotImplementedError>
    }

    if (suffix_len > str_len) {
   1340c:	68ba      	ldr	r2, [r7, #8]
   1340e:	68fb      	ldr	r3, [r7, #12]
   13410:	429a      	cmp	r2, r3
   13412:	d901      	bls.n	13418 <str_endswith+0x6c>
        return mp_const_false;
   13414:	4b0d      	ldr	r3, [pc, #52]	; (1344c <str_endswith+0xa0>)
   13416:	e013      	b.n	13440 <str_endswith+0x94>
    }
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   13418:	68fa      	ldr	r2, [r7, #12]
   1341a:	68bb      	ldr	r3, [r7, #8]
   1341c:	1ad3      	subs	r3, r2, r3
   1341e:	697a      	ldr	r2, [r7, #20]
   13420:	4413      	add	r3, r2
   13422:	68ba      	ldr	r2, [r7, #8]
   13424:	6939      	ldr	r1, [r7, #16]
   13426:	4618      	mov	r0, r3
   13428:	f009 fc3b 	bl	1cca2 <memcmp>
   1342c:	4603      	mov	r3, r0
   1342e:	2b00      	cmp	r3, #0
   13430:	bf0c      	ite	eq
   13432:	2301      	moveq	r3, #1
   13434:	2300      	movne	r3, #0
   13436:	b2db      	uxtb	r3, r3
   13438:	4618      	mov	r0, r3
   1343a:	f7fe fe2b 	bl	12094 <mp_obj_new_bool>
   1343e:	4603      	mov	r3, r0
}
   13440:	4618      	mov	r0, r3
   13442:	3718      	adds	r7, #24
   13444:	46bd      	mov	sp, r7
   13446:	bd80      	pop	{r7, pc}
   13448:	00023454 	.word	0x00023454
   1344c:	00021894 	.word	0x00021894

00013450 <str_uni_strip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_endswith_obj, 2, 3, str_endswith);

enum { LSTRIP, RSTRIP, STRIP };

STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
   13450:	b580      	push	{r7, lr}
   13452:	b094      	sub	sp, #80	; 0x50
   13454:	af02      	add	r7, sp, #8
   13456:	60f8      	str	r0, [r7, #12]
   13458:	60b9      	str	r1, [r7, #8]
   1345a:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   1345c:	687b      	ldr	r3, [r7, #4]
   1345e:	681b      	ldr	r3, [r3, #0]
   13460:	4618      	mov	r0, r3
   13462:	f7fe fdf3 	bl	1204c <MP_OBJ_IS_QSTR>
   13466:	4603      	mov	r3, r0
   13468:	2b00      	cmp	r3, #0
   1346a:	d115      	bne.n	13498 <str_uni_strip+0x48>
   1346c:	687b      	ldr	r3, [r7, #4]
   1346e:	681b      	ldr	r3, [r3, #0]
   13470:	4618      	mov	r0, r3
   13472:	f7fe fdfd 	bl	12070 <MP_OBJ_IS_OBJ>
   13476:	4603      	mov	r3, r0
   13478:	2b00      	cmp	r3, #0
   1347a:	d006      	beq.n	1348a <str_uni_strip+0x3a>
   1347c:	687b      	ldr	r3, [r7, #4]
   1347e:	681b      	ldr	r3, [r3, #0]
   13480:	681b      	ldr	r3, [r3, #0]
   13482:	699b      	ldr	r3, [r3, #24]
   13484:	4a76      	ldr	r2, [pc, #472]	; (13660 <str_uni_strip+0x210>)
   13486:	4293      	cmp	r3, r2
   13488:	d006      	beq.n	13498 <str_uni_strip+0x48>
   1348a:	4b76      	ldr	r3, [pc, #472]	; (13664 <str_uni_strip+0x214>)
   1348c:	4a76      	ldr	r2, [pc, #472]	; (13668 <str_uni_strip+0x218>)
   1348e:	f240 3113 	movw	r1, #787	; 0x313
   13492:	4876      	ldr	r0, [pc, #472]	; (1366c <str_uni_strip+0x21c>)
   13494:	f007 fff4 	bl	1b480 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13498:	687b      	ldr	r3, [r7, #4]
   1349a:	681b      	ldr	r3, [r3, #0]
   1349c:	4618      	mov	r0, r3
   1349e:	f7fa f907 	bl	d6b0 <mp_obj_get_type>
   134a2:	61f8      	str	r0, [r7, #28]

    const byte *chars_to_del;
    uint chars_to_del_len;
    static const byte whitespace[] = " \t\n\r\v\f";

    if (n_args == 1) {
   134a4:	68bb      	ldr	r3, [r7, #8]
   134a6:	2b01      	cmp	r3, #1
   134a8:	d104      	bne.n	134b4 <str_uni_strip+0x64>
        chars_to_del = whitespace;
   134aa:	4b71      	ldr	r3, [pc, #452]	; (13670 <str_uni_strip+0x220>)
   134ac:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = sizeof(whitespace) - 1;
   134ae:	2306      	movs	r3, #6
   134b0:	643b      	str	r3, [r7, #64]	; 0x40
   134b2:	e032      	b.n	1351a <str_uni_strip+0xca>
    } else {
        if (mp_obj_get_type(args[1]) != self_type) {
   134b4:	687b      	ldr	r3, [r7, #4]
   134b6:	3304      	adds	r3, #4
   134b8:	681b      	ldr	r3, [r3, #0]
   134ba:	4618      	mov	r0, r3
   134bc:	f7fa f8f8 	bl	d6b0 <mp_obj_get_type>
   134c0:	4602      	mov	r2, r0
   134c2:	69fb      	ldr	r3, [r7, #28]
   134c4:	429a      	cmp	r2, r3
   134c6:	d005      	beq.n	134d4 <str_uni_strip+0x84>
            bad_implicit_conversion(args[1]);
   134c8:	687b      	ldr	r3, [r7, #4]
   134ca:	3304      	adds	r3, #4
   134cc:	681b      	ldr	r3, [r3, #0]
   134ce:	4618      	mov	r0, r3
   134d0:	f001 ff79 	bl	153c6 <bad_implicit_conversion>
        }
        GET_STR_DATA_LEN(args[1], s, l);
   134d4:	687b      	ldr	r3, [r7, #4]
   134d6:	3304      	adds	r3, #4
   134d8:	681b      	ldr	r3, [r3, #0]
   134da:	4618      	mov	r0, r3
   134dc:	f7fe fdb6 	bl	1204c <MP_OBJ_IS_QSTR>
   134e0:	4603      	mov	r3, r0
   134e2:	2b00      	cmp	r3, #0
   134e4:	d00b      	beq.n	134fe <str_uni_strip+0xae>
   134e6:	687b      	ldr	r3, [r7, #4]
   134e8:	3304      	adds	r3, #4
   134ea:	681b      	ldr	r3, [r3, #0]
   134ec:	089b      	lsrs	r3, r3, #2
   134ee:	f107 0210 	add.w	r2, r7, #16
   134f2:	4611      	mov	r1, r2
   134f4:	4618      	mov	r0, r3
   134f6:	f7ed feb5 	bl	1264 <qstr_data>
   134fa:	63f8      	str	r0, [r7, #60]	; 0x3c
   134fc:	e009      	b.n	13512 <str_uni_strip+0xc2>
   134fe:	687b      	ldr	r3, [r7, #4]
   13500:	3304      	adds	r3, #4
   13502:	681b      	ldr	r3, [r3, #0]
   13504:	689b      	ldr	r3, [r3, #8]
   13506:	613b      	str	r3, [r7, #16]
   13508:	687b      	ldr	r3, [r7, #4]
   1350a:	3304      	adds	r3, #4
   1350c:	681b      	ldr	r3, [r3, #0]
   1350e:	68db      	ldr	r3, [r3, #12]
   13510:	63fb      	str	r3, [r7, #60]	; 0x3c
        chars_to_del = s;
   13512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13514:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = l;
   13516:	693b      	ldr	r3, [r7, #16]
   13518:	643b      	str	r3, [r7, #64]	; 0x40
    }

    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   1351a:	687b      	ldr	r3, [r7, #4]
   1351c:	681b      	ldr	r3, [r3, #0]
   1351e:	4618      	mov	r0, r3
   13520:	f7fe fd94 	bl	1204c <MP_OBJ_IS_QSTR>
   13524:	4603      	mov	r3, r0
   13526:	2b00      	cmp	r3, #0
   13528:	d00a      	beq.n	13540 <str_uni_strip+0xf0>
   1352a:	687b      	ldr	r3, [r7, #4]
   1352c:	681b      	ldr	r3, [r3, #0]
   1352e:	089b      	lsrs	r3, r3, #2
   13530:	f107 0214 	add.w	r2, r7, #20
   13534:	4611      	mov	r1, r2
   13536:	4618      	mov	r0, r3
   13538:	f7ed fe94 	bl	1264 <qstr_data>
   1353c:	63b8      	str	r0, [r7, #56]	; 0x38
   1353e:	e007      	b.n	13550 <str_uni_strip+0x100>
   13540:	687b      	ldr	r3, [r7, #4]
   13542:	681b      	ldr	r3, [r3, #0]
   13544:	689b      	ldr	r3, [r3, #8]
   13546:	617b      	str	r3, [r7, #20]
   13548:	687b      	ldr	r3, [r7, #4]
   1354a:	681b      	ldr	r3, [r3, #0]
   1354c:	68db      	ldr	r3, [r3, #12]
   1354e:	63bb      	str	r3, [r7, #56]	; 0x38

    size_t first_good_char_pos = 0;
   13550:	2300      	movs	r3, #0
   13552:	637b      	str	r3, [r7, #52]	; 0x34
    bool first_good_char_pos_set = false;
   13554:	2300      	movs	r3, #0
   13556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    size_t last_good_char_pos = 0;
   1355a:	2300      	movs	r3, #0
   1355c:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = 0;
   1355e:	2300      	movs	r3, #0
   13560:	62bb      	str	r3, [r7, #40]	; 0x28
    int delta = 1;
   13562:	2301      	movs	r3, #1
   13564:	627b      	str	r3, [r7, #36]	; 0x24
    if (type == RSTRIP) {
   13566:	68fb      	ldr	r3, [r7, #12]
   13568:	2b01      	cmp	r3, #1
   1356a:	d105      	bne.n	13578 <str_uni_strip+0x128>
        i = orig_str_len - 1;
   1356c:	697b      	ldr	r3, [r7, #20]
   1356e:	3b01      	subs	r3, #1
   13570:	62bb      	str	r3, [r7, #40]	; 0x28
        delta = -1;
   13572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13576:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (size_t len = orig_str_len; len > 0; len--) {
   13578:	697b      	ldr	r3, [r7, #20]
   1357a:	623b      	str	r3, [r7, #32]
   1357c:	e030      	b.n	135e0 <str_uni_strip+0x190>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   1357e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13580:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13582:	441a      	add	r2, r3
   13584:	2301      	movs	r3, #1
   13586:	9300      	str	r3, [sp, #0]
   13588:	2301      	movs	r3, #1
   1358a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1358c:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1358e:	f7ff f879 	bl	12684 <find_subbytes>
   13592:	4603      	mov	r3, r0
   13594:	2b00      	cmp	r3, #0
   13596:	d11c      	bne.n	135d2 <str_uni_strip+0x182>
            if (!first_good_char_pos_set) {
   13598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1359c:	f083 0301 	eor.w	r3, r3, #1
   135a0:	b2db      	uxtb	r3, r3
   135a2:	2b00      	cmp	r3, #0
   135a4:	d013      	beq.n	135ce <str_uni_strip+0x17e>
                first_good_char_pos_set = true;
   135a6:	2301      	movs	r3, #1
   135a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                first_good_char_pos = i;
   135ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135ae:	637b      	str	r3, [r7, #52]	; 0x34
                if (type == LSTRIP) {
   135b0:	68fb      	ldr	r3, [r7, #12]
   135b2:	2b00      	cmp	r3, #0
   135b4:	d103      	bne.n	135be <str_uni_strip+0x16e>
                    last_good_char_pos = orig_str_len - 1;
   135b6:	697b      	ldr	r3, [r7, #20]
   135b8:	3b01      	subs	r3, #1
   135ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   135bc:	e013      	b.n	135e6 <str_uni_strip+0x196>
                } else if (type == RSTRIP) {
   135be:	68fb      	ldr	r3, [r7, #12]
   135c0:	2b01      	cmp	r3, #1
   135c2:	d104      	bne.n	135ce <str_uni_strip+0x17e>
                    first_good_char_pos = 0;
   135c4:	2300      	movs	r3, #0
   135c6:	637b      	str	r3, [r7, #52]	; 0x34
                    last_good_char_pos = i;
   135c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   135cc:	e00b      	b.n	135e6 <str_uni_strip+0x196>
                }
            }
            last_good_char_pos = i;
   135ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        i += delta;
   135d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   135d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   135d6:	4413      	add	r3, r2
   135d8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t len = orig_str_len; len > 0; len--) {
   135da:	6a3b      	ldr	r3, [r7, #32]
   135dc:	3b01      	subs	r3, #1
   135de:	623b      	str	r3, [r7, #32]
   135e0:	6a3b      	ldr	r3, [r7, #32]
   135e2:	2b00      	cmp	r3, #0
   135e4:	d1cb      	bne.n	1357e <str_uni_strip+0x12e>
    }

    if (!first_good_char_pos_set) {
   135e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   135ea:	f083 0301 	eor.w	r3, r3, #1
   135ee:	b2db      	uxtb	r3, r3
   135f0:	2b00      	cmp	r3, #0
   135f2:	d007      	beq.n	13604 <str_uni_strip+0x1b4>
        // string is all whitespace, return ''
        if (self_type == &mp_type_str) {
   135f4:	69fb      	ldr	r3, [r7, #28]
   135f6:	4a1f      	ldr	r2, [pc, #124]	; (13674 <str_uni_strip+0x224>)
   135f8:	4293      	cmp	r3, r2
   135fa:	d101      	bne.n	13600 <str_uni_strip+0x1b0>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   135fc:	2306      	movs	r3, #6
   135fe:	e02b      	b.n	13658 <str_uni_strip+0x208>
        } else {
            return mp_const_empty_bytes;
   13600:	4b1d      	ldr	r3, [pc, #116]	; (13678 <str_uni_strip+0x228>)
   13602:	e029      	b.n	13658 <str_uni_strip+0x208>
        }
    }

    assert(last_good_char_pos >= first_good_char_pos);
   13604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13608:	429a      	cmp	r2, r3
   1360a:	d206      	bcs.n	1361a <str_uni_strip+0x1ca>
   1360c:	4b1b      	ldr	r3, [pc, #108]	; (1367c <str_uni_strip+0x22c>)
   1360e:	4a16      	ldr	r2, [pc, #88]	; (13668 <str_uni_strip+0x218>)
   13610:	f240 314d 	movw	r1, #845	; 0x34d
   13614:	4815      	ldr	r0, [pc, #84]	; (1366c <str_uni_strip+0x21c>)
   13616:	f007 ff33 	bl	1b480 <__assert_func>
    //+1 to accommodate the last character
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   1361a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1361e:	1ad3      	subs	r3, r2, r3
   13620:	3301      	adds	r3, #1
   13622:	61bb      	str	r3, [r7, #24]
    if (stripped_len == orig_str_len) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	69ba      	ldr	r2, [r7, #24]
   13628:	429a      	cmp	r2, r3
   1362a:	d10c      	bne.n	13646 <str_uni_strip+0x1f6>
        // If nothing was stripped, don't bother to dup original string
        // TODO: watch out for this case when we'll get to bytearray.strip()
        assert(first_good_char_pos == 0);
   1362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1362e:	2b00      	cmp	r3, #0
   13630:	d006      	beq.n	13640 <str_uni_strip+0x1f0>
   13632:	4b13      	ldr	r3, [pc, #76]	; (13680 <str_uni_strip+0x230>)
   13634:	4a0c      	ldr	r2, [pc, #48]	; (13668 <str_uni_strip+0x218>)
   13636:	f240 3153 	movw	r1, #851	; 0x353
   1363a:	480c      	ldr	r0, [pc, #48]	; (1366c <str_uni_strip+0x21c>)
   1363c:	f007 ff20 	bl	1b480 <__assert_func>
        return args[0];
   13640:	687b      	ldr	r3, [r7, #4]
   13642:	681b      	ldr	r3, [r3, #0]
   13644:	e008      	b.n	13658 <str_uni_strip+0x208>
    }
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   13646:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1364a:	4413      	add	r3, r2
   1364c:	69ba      	ldr	r2, [r7, #24]
   1364e:	4619      	mov	r1, r3
   13650:	69f8      	ldr	r0, [r7, #28]
   13652:	f001 fd3a 	bl	150ca <mp_obj_new_str_of_type>
   13656:	4603      	mov	r3, r0
}
   13658:	4618      	mov	r0, r3
   1365a:	3748      	adds	r7, #72	; 0x48
   1365c:	46bd      	mov	sp, r7
   1365e:	bd80      	pop	{r7, pc}
   13660:	000126f7 	.word	0x000126f7
   13664:	0002337c 	.word	0x0002337c
   13668:	00023860 	.word	0x00023860
   1366c:	000232e0 	.word	0x000232e0
   13670:	00023870 	.word	0x00023870
   13674:	0002379c 	.word	0x0002379c
   13678:	00023818 	.word	0x00023818
   1367c:	00023474 	.word	0x00023474
   13680:	000234a0 	.word	0x000234a0

00013684 <str_strip>:

STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   13684:	b580      	push	{r7, lr}
   13686:	b082      	sub	sp, #8
   13688:	af00      	add	r7, sp, #0
   1368a:	6078      	str	r0, [r7, #4]
   1368c:	6039      	str	r1, [r7, #0]
    return str_uni_strip(STRIP, n_args, args);
   1368e:	683a      	ldr	r2, [r7, #0]
   13690:	6879      	ldr	r1, [r7, #4]
   13692:	2002      	movs	r0, #2
   13694:	f7ff fedc 	bl	13450 <str_uni_strip>
   13698:	4603      	mov	r3, r0
}
   1369a:	4618      	mov	r0, r3
   1369c:	3708      	adds	r7, #8
   1369e:	46bd      	mov	sp, r7
   136a0:	bd80      	pop	{r7, pc}

000136a2 <str_lstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_strip_obj, 1, 2, str_strip);

STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   136a2:	b580      	push	{r7, lr}
   136a4:	b082      	sub	sp, #8
   136a6:	af00      	add	r7, sp, #0
   136a8:	6078      	str	r0, [r7, #4]
   136aa:	6039      	str	r1, [r7, #0]
    return str_uni_strip(LSTRIP, n_args, args);
   136ac:	683a      	ldr	r2, [r7, #0]
   136ae:	6879      	ldr	r1, [r7, #4]
   136b0:	2000      	movs	r0, #0
   136b2:	f7ff fecd 	bl	13450 <str_uni_strip>
   136b6:	4603      	mov	r3, r0
}
   136b8:	4618      	mov	r0, r3
   136ba:	3708      	adds	r7, #8
   136bc:	46bd      	mov	sp, r7
   136be:	bd80      	pop	{r7, pc}

000136c0 <str_rstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_lstrip_obj, 1, 2, str_lstrip);

STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   136c0:	b580      	push	{r7, lr}
   136c2:	b082      	sub	sp, #8
   136c4:	af00      	add	r7, sp, #0
   136c6:	6078      	str	r0, [r7, #4]
   136c8:	6039      	str	r1, [r7, #0]
    return str_uni_strip(RSTRIP, n_args, args);
   136ca:	683a      	ldr	r2, [r7, #0]
   136cc:	6879      	ldr	r1, [r7, #4]
   136ce:	2001      	movs	r0, #1
   136d0:	f7ff febe 	bl	13450 <str_uni_strip>
   136d4:	4603      	mov	r3, r0
}
   136d6:	4618      	mov	r0, r3
   136d8:	3708      	adds	r7, #8
   136da:	46bd      	mov	sp, r7
   136dc:	bd80      	pop	{r7, pc}

000136de <str_to_int>:
MP_DEFINE_CONST_FUN_OBJ_2(str_center_obj, str_center);
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
   136de:	b480      	push	{r7}
   136e0:	b085      	sub	sp, #20
   136e2:	af00      	add	r7, sp, #0
   136e4:	60f8      	str	r0, [r7, #12]
   136e6:	60b9      	str	r1, [r7, #8]
   136e8:	607a      	str	r2, [r7, #4]
    if (str < top && '0' <= *str && *str <= '9') {
   136ea:	68fa      	ldr	r2, [r7, #12]
   136ec:	68bb      	ldr	r3, [r7, #8]
   136ee:	429a      	cmp	r2, r3
   136f0:	d226      	bcs.n	13740 <str_to_int+0x62>
   136f2:	68fb      	ldr	r3, [r7, #12]
   136f4:	781b      	ldrb	r3, [r3, #0]
   136f6:	2b2f      	cmp	r3, #47	; 0x2f
   136f8:	d922      	bls.n	13740 <str_to_int+0x62>
   136fa:	68fb      	ldr	r3, [r7, #12]
   136fc:	781b      	ldrb	r3, [r3, #0]
   136fe:	2b39      	cmp	r3, #57	; 0x39
   13700:	d81e      	bhi.n	13740 <str_to_int+0x62>
        *num = 0;
   13702:	687b      	ldr	r3, [r7, #4]
   13704:	2200      	movs	r2, #0
   13706:	601a      	str	r2, [r3, #0]
        do {
            *num = *num * 10 + (*str - '0');
   13708:	687b      	ldr	r3, [r7, #4]
   1370a:	681a      	ldr	r2, [r3, #0]
   1370c:	4613      	mov	r3, r2
   1370e:	009b      	lsls	r3, r3, #2
   13710:	4413      	add	r3, r2
   13712:	005b      	lsls	r3, r3, #1
   13714:	461a      	mov	r2, r3
   13716:	68fb      	ldr	r3, [r7, #12]
   13718:	781b      	ldrb	r3, [r3, #0]
   1371a:	3b30      	subs	r3, #48	; 0x30
   1371c:	441a      	add	r2, r3
   1371e:	687b      	ldr	r3, [r7, #4]
   13720:	601a      	str	r2, [r3, #0]
            str++;
   13722:	68fb      	ldr	r3, [r7, #12]
   13724:	3301      	adds	r3, #1
   13726:	60fb      	str	r3, [r7, #12]
        }
        while (str < top && '0' <= *str && *str <= '9');
   13728:	68fa      	ldr	r2, [r7, #12]
   1372a:	68bb      	ldr	r3, [r7, #8]
   1372c:	429a      	cmp	r2, r3
   1372e:	d207      	bcs.n	13740 <str_to_int+0x62>
   13730:	68fb      	ldr	r3, [r7, #12]
   13732:	781b      	ldrb	r3, [r3, #0]
   13734:	2b2f      	cmp	r3, #47	; 0x2f
   13736:	d903      	bls.n	13740 <str_to_int+0x62>
   13738:	68fb      	ldr	r3, [r7, #12]
   1373a:	781b      	ldrb	r3, [r3, #0]
   1373c:	2b39      	cmp	r3, #57	; 0x39
   1373e:	d9e3      	bls.n	13708 <str_to_int+0x2a>
    }
    return str;
   13740:	68fb      	ldr	r3, [r7, #12]
}
   13742:	4618      	mov	r0, r3
   13744:	3714      	adds	r7, #20
   13746:	46bd      	mov	sp, r7
   13748:	f85d 7b04 	ldr.w	r7, [sp], #4
   1374c:	4770      	bx	lr

0001374e <isalignment>:

STATIC bool isalignment(char ch) {
   1374e:	b580      	push	{r7, lr}
   13750:	b082      	sub	sp, #8
   13752:	af00      	add	r7, sp, #0
   13754:	4603      	mov	r3, r0
   13756:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("<>=^", ch) != NULL;
   13758:	79fb      	ldrb	r3, [r7, #7]
   1375a:	2b00      	cmp	r3, #0
   1375c:	d009      	beq.n	13772 <isalignment+0x24>
   1375e:	79fb      	ldrb	r3, [r7, #7]
   13760:	4619      	mov	r1, r3
   13762:	4808      	ldr	r0, [pc, #32]	; (13784 <isalignment+0x36>)
   13764:	f009 fbe6 	bl	1cf34 <strchr>
   13768:	4603      	mov	r3, r0
   1376a:	2b00      	cmp	r3, #0
   1376c:	d001      	beq.n	13772 <isalignment+0x24>
   1376e:	2301      	movs	r3, #1
   13770:	e000      	b.n	13774 <isalignment+0x26>
   13772:	2300      	movs	r3, #0
   13774:	f003 0301 	and.w	r3, r3, #1
   13778:	b2db      	uxtb	r3, r3
}
   1377a:	4618      	mov	r0, r3
   1377c:	3708      	adds	r7, #8
   1377e:	46bd      	mov	sp, r7
   13780:	bd80      	pop	{r7, pc}
   13782:	bf00      	nop
   13784:	000234e0 	.word	0x000234e0

00013788 <istype>:

STATIC bool istype(char ch) {
   13788:	b580      	push	{r7, lr}
   1378a:	b082      	sub	sp, #8
   1378c:	af00      	add	r7, sp, #0
   1378e:	4603      	mov	r3, r0
   13790:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
   13792:	79fb      	ldrb	r3, [r7, #7]
   13794:	2b00      	cmp	r3, #0
   13796:	d009      	beq.n	137ac <istype+0x24>
   13798:	79fb      	ldrb	r3, [r7, #7]
   1379a:	4619      	mov	r1, r3
   1379c:	4807      	ldr	r0, [pc, #28]	; (137bc <istype+0x34>)
   1379e:	f009 fbc9 	bl	1cf34 <strchr>
   137a2:	4603      	mov	r3, r0
   137a4:	2b00      	cmp	r3, #0
   137a6:	d001      	beq.n	137ac <istype+0x24>
   137a8:	2301      	movs	r3, #1
   137aa:	e000      	b.n	137ae <istype+0x26>
   137ac:	2300      	movs	r3, #0
   137ae:	f003 0301 	and.w	r3, r3, #1
   137b2:	b2db      	uxtb	r3, r3
}
   137b4:	4618      	mov	r0, r3
   137b6:	3708      	adds	r7, #8
   137b8:	46bd      	mov	sp, r7
   137ba:	bd80      	pop	{r7, pc}
   137bc:	000234e8 	.word	0x000234e8

000137c0 <arg_looks_integer>:

STATIC bool arg_looks_integer(mp_obj_t arg) {
   137c0:	b580      	push	{r7, lr}
   137c2:	b082      	sub	sp, #8
   137c4:	af00      	add	r7, sp, #0
   137c6:	6078      	str	r0, [r7, #4]
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
   137c8:	6878      	ldr	r0, [r7, #4]
   137ca:	f7fe fc51 	bl	12070 <MP_OBJ_IS_OBJ>
   137ce:	4603      	mov	r3, r0
   137d0:	2b00      	cmp	r3, #0
   137d2:	d004      	beq.n	137de <arg_looks_integer+0x1e>
   137d4:	687b      	ldr	r3, [r7, #4]
   137d6:	681b      	ldr	r3, [r3, #0]
   137d8:	4a0e      	ldr	r2, [pc, #56]	; (13814 <arg_looks_integer+0x54>)
   137da:	4293      	cmp	r3, r2
   137dc:	d010      	beq.n	13800 <arg_looks_integer+0x40>
   137de:	6878      	ldr	r0, [r7, #4]
   137e0:	f7fe fc22 	bl	12028 <MP_OBJ_IS_SMALL_INT>
   137e4:	4603      	mov	r3, r0
   137e6:	2b00      	cmp	r3, #0
   137e8:	d10a      	bne.n	13800 <arg_looks_integer+0x40>
   137ea:	6878      	ldr	r0, [r7, #4]
   137ec:	f7fe fc40 	bl	12070 <MP_OBJ_IS_OBJ>
   137f0:	4603      	mov	r3, r0
   137f2:	2b00      	cmp	r3, #0
   137f4:	d006      	beq.n	13804 <arg_looks_integer+0x44>
   137f6:	687b      	ldr	r3, [r7, #4]
   137f8:	681b      	ldr	r3, [r3, #0]
   137fa:	4a07      	ldr	r2, [pc, #28]	; (13818 <arg_looks_integer+0x58>)
   137fc:	4293      	cmp	r3, r2
   137fe:	d101      	bne.n	13804 <arg_looks_integer+0x44>
   13800:	2301      	movs	r3, #1
   13802:	e000      	b.n	13806 <arg_looks_integer+0x46>
   13804:	2300      	movs	r3, #0
   13806:	f003 0301 	and.w	r3, r3, #1
   1380a:	b2db      	uxtb	r3, r3
}
   1380c:	4618      	mov	r0, r3
   1380e:	3708      	adds	r7, #8
   13810:	46bd      	mov	sp, r7
   13812:	bd80      	pop	{r7, pc}
   13814:	00021858 	.word	0x00021858
   13818:	00022bbc 	.word	0x00022bbc

0001381c <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
   1381c:	b580      	push	{r7, lr}
   1381e:	b082      	sub	sp, #8
   13820:	af00      	add	r7, sp, #0
   13822:	6078      	str	r0, [r7, #4]
    return arg_looks_integer(arg)
   13824:	6878      	ldr	r0, [r7, #4]
   13826:	f7ff ffcb 	bl	137c0 <arg_looks_integer>
   1382a:	4603      	mov	r3, r0
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
#endif
    ;
}
   1382c:	4618      	mov	r0, r3
   1382e:	3708      	adds	r7, #8
   13830:	46bd      	mov	sp, r7
   13832:	bd80      	pop	{r7, pc}

00013834 <arg_as_int>:

#if MICROPY_PY_BUILTINS_STR_OP_MODULO
STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
   13834:	b480      	push	{r7}
   13836:	b083      	sub	sp, #12
   13838:	af00      	add	r7, sp, #0
   1383a:	6078      	str	r0, [r7, #4]
#if MICROPY_PY_BUILTINS_FLOAT
    if (mp_obj_is_float(arg)) {
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    }
#endif
    return arg;
   1383c:	687b      	ldr	r3, [r7, #4]
}
   1383e:	4618      	mov	r0, r3
   13840:	370c      	adds	r7, #12
   13842:	46bd      	mov	sp, r7
   13844:	f85d 7b04 	ldr.w	r7, [sp], #4
   13848:	4770      	bx	lr

0001384a <terse_str_format_value_error>:
#endif

#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
STATIC NORETURN void terse_str_format_value_error(void) {
   1384a:	b580      	push	{r7, lr}
   1384c:	af00      	add	r7, sp, #0
    mp_raise_ValueError("bad format string");
   1384e:	4801      	ldr	r0, [pc, #4]	; (13854 <terse_str_format_value_error+0xa>)
   13850:	f7f9 faff 	bl	ce52 <mp_raise_ValueError>
   13854:	000234f8 	.word	0x000234f8

00013858 <mp_obj_str_format_helper>:
#else
// define to nothing to improve coverage
#define terse_str_format_value_error()
#endif

STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   13858:	b590      	push	{r4, r7, lr}
   1385a:	b0ad      	sub	sp, #180	; 0xb4
   1385c:	af04      	add	r7, sp, #16
   1385e:	60f8      	str	r0, [r7, #12]
   13860:	60b9      	str	r1, [r7, #8]
   13862:	607a      	str	r2, [r7, #4]
   13864:	603b      	str	r3, [r7, #0]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   13866:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1386a:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1386e:	2110      	movs	r1, #16
   13870:	4618      	mov	r0, r3
   13872:	f7ed fdbc 	bl	13ee <vstr_init_print>

    for (; str < top; str++) {
   13876:	f000 bc91 	b.w	1419c <mp_obj_str_format_helper+0x944>
        if (*str == '}') {
   1387a:	68bb      	ldr	r3, [r7, #8]
   1387c:	781b      	ldrb	r3, [r3, #0]
   1387e:	2b7d      	cmp	r3, #125	; 0x7d
   13880:	d114      	bne.n	138ac <mp_obj_str_format_helper+0x54>
            str++;
   13882:	68bb      	ldr	r3, [r7, #8]
   13884:	3301      	adds	r3, #1
   13886:	60bb      	str	r3, [r7, #8]
            if (str < top && *str == '}') {
   13888:	68ba      	ldr	r2, [r7, #8]
   1388a:	687b      	ldr	r3, [r7, #4]
   1388c:	429a      	cmp	r2, r3
   1388e:	d20b      	bcs.n	138a8 <mp_obj_str_format_helper+0x50>
   13890:	68bb      	ldr	r3, [r7, #8]
   13892:	781b      	ldrb	r3, [r3, #0]
   13894:	2b7d      	cmp	r3, #125	; 0x7d
   13896:	d107      	bne.n	138a8 <mp_obj_str_format_helper+0x50>
                vstr_add_byte(&vstr, '}');
   13898:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1389c:	217d      	movs	r1, #125	; 0x7d
   1389e:	4618      	mov	r0, r3
   138a0:	f7ed feaa 	bl	15f8 <vstr_add_byte>
                continue;
   138a4:	f000 bc77 	b.w	14196 <mp_obj_str_format_helper+0x93e>
            }
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   138a8:	f7ff ffcf 	bl	1384a <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("single '}' encountered in format string");
            }
        }
        if (*str != '{') {
   138ac:	68bb      	ldr	r3, [r7, #8]
   138ae:	781b      	ldrb	r3, [r3, #0]
   138b0:	2b7b      	cmp	r3, #123	; 0x7b
   138b2:	d009      	beq.n	138c8 <mp_obj_str_format_helper+0x70>
            vstr_add_byte(&vstr, *str);
   138b4:	68bb      	ldr	r3, [r7, #8]
   138b6:	781a      	ldrb	r2, [r3, #0]
   138b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
   138bc:	4611      	mov	r1, r2
   138be:	4618      	mov	r0, r3
   138c0:	f7ed fe9a 	bl	15f8 <vstr_add_byte>
            continue;
   138c4:	f000 bc67 	b.w	14196 <mp_obj_str_format_helper+0x93e>
        }

        str++;
   138c8:	68bb      	ldr	r3, [r7, #8]
   138ca:	3301      	adds	r3, #1
   138cc:	60bb      	str	r3, [r7, #8]
        if (str < top && *str == '{') {
   138ce:	68ba      	ldr	r2, [r7, #8]
   138d0:	687b      	ldr	r3, [r7, #4]
   138d2:	429a      	cmp	r2, r3
   138d4:	d20b      	bcs.n	138ee <mp_obj_str_format_helper+0x96>
   138d6:	68bb      	ldr	r3, [r7, #8]
   138d8:	781b      	ldrb	r3, [r3, #0]
   138da:	2b7b      	cmp	r3, #123	; 0x7b
   138dc:	d107      	bne.n	138ee <mp_obj_str_format_helper+0x96>
            vstr_add_byte(&vstr, '{');
   138de:	f107 0354 	add.w	r3, r7, #84	; 0x54
   138e2:	217b      	movs	r1, #123	; 0x7b
   138e4:	4618      	mov	r0, r3
   138e6:	f7ed fe87 	bl	15f8 <vstr_add_byte>
            continue;
   138ea:	f000 bc54 	b.w	14196 <mp_obj_str_format_helper+0x93e>
        }

        // replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"

        const char *field_name = NULL;
   138ee:	2300      	movs	r3, #0
   138f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const char *field_name_top = NULL;
   138f4:	2300      	movs	r3, #0
   138f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char conversion = '\0';
   138fa:	2300      	movs	r3, #0
   138fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        const char *format_spec = NULL;
   13900:	2300      	movs	r3, #0
   13902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   13906:	68ba      	ldr	r2, [r7, #8]
   13908:	687b      	ldr	r3, [r7, #4]
   1390a:	429a      	cmp	r2, r3
   1390c:	d225      	bcs.n	1395a <mp_obj_str_format_helper+0x102>
   1390e:	68bb      	ldr	r3, [r7, #8]
   13910:	781b      	ldrb	r3, [r3, #0]
   13912:	2b7d      	cmp	r3, #125	; 0x7d
   13914:	d021      	beq.n	1395a <mp_obj_str_format_helper+0x102>
   13916:	68bb      	ldr	r3, [r7, #8]
   13918:	781b      	ldrb	r3, [r3, #0]
   1391a:	2b21      	cmp	r3, #33	; 0x21
   1391c:	d01d      	beq.n	1395a <mp_obj_str_format_helper+0x102>
   1391e:	68bb      	ldr	r3, [r7, #8]
   13920:	781b      	ldrb	r3, [r3, #0]
   13922:	2b3a      	cmp	r3, #58	; 0x3a
   13924:	d019      	beq.n	1395a <mp_obj_str_format_helper+0x102>
            field_name = (const char *)str;
   13926:	68bb      	ldr	r3, [r7, #8]
   13928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   1392c:	e002      	b.n	13934 <mp_obj_str_format_helper+0xdc>
                ++str;
   1392e:	68bb      	ldr	r3, [r7, #8]
   13930:	3301      	adds	r3, #1
   13932:	60bb      	str	r3, [r7, #8]
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13934:	68ba      	ldr	r2, [r7, #8]
   13936:	687b      	ldr	r3, [r7, #4]
   13938:	429a      	cmp	r2, r3
   1393a:	d20b      	bcs.n	13954 <mp_obj_str_format_helper+0xfc>
   1393c:	68bb      	ldr	r3, [r7, #8]
   1393e:	781b      	ldrb	r3, [r3, #0]
   13940:	2b7d      	cmp	r3, #125	; 0x7d
   13942:	d007      	beq.n	13954 <mp_obj_str_format_helper+0xfc>
   13944:	68bb      	ldr	r3, [r7, #8]
   13946:	781b      	ldrb	r3, [r3, #0]
   13948:	2b21      	cmp	r3, #33	; 0x21
   1394a:	d003      	beq.n	13954 <mp_obj_str_format_helper+0xfc>
   1394c:	68bb      	ldr	r3, [r7, #8]
   1394e:	781b      	ldrb	r3, [r3, #0]
   13950:	2b3a      	cmp	r3, #58	; 0x3a
   13952:	d1ec      	bne.n	1392e <mp_obj_str_format_helper+0xd6>
            }
            field_name_top = (const char *)str;
   13954:	68bb      	ldr	r3, [r7, #8]
   13956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // conversion ::=  "r" | "s"

        if (str < top && *str == '!') {
   1395a:	68ba      	ldr	r2, [r7, #8]
   1395c:	687b      	ldr	r3, [r7, #4]
   1395e:	429a      	cmp	r2, r3
   13960:	d21b      	bcs.n	1399a <mp_obj_str_format_helper+0x142>
   13962:	68bb      	ldr	r3, [r7, #8]
   13964:	781b      	ldrb	r3, [r3, #0]
   13966:	2b21      	cmp	r3, #33	; 0x21
   13968:	d117      	bne.n	1399a <mp_obj_str_format_helper+0x142>
            str++;
   1396a:	68bb      	ldr	r3, [r7, #8]
   1396c:	3301      	adds	r3, #1
   1396e:	60bb      	str	r3, [r7, #8]
            if (str < top && (*str == 'r' || *str == 's')) {
   13970:	68ba      	ldr	r2, [r7, #8]
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	429a      	cmp	r2, r3
   13976:	d20e      	bcs.n	13996 <mp_obj_str_format_helper+0x13e>
   13978:	68bb      	ldr	r3, [r7, #8]
   1397a:	781b      	ldrb	r3, [r3, #0]
   1397c:	2b72      	cmp	r3, #114	; 0x72
   1397e:	d003      	beq.n	13988 <mp_obj_str_format_helper+0x130>
   13980:	68bb      	ldr	r3, [r7, #8]
   13982:	781b      	ldrb	r3, [r3, #0]
   13984:	2b73      	cmp	r3, #115	; 0x73
   13986:	d106      	bne.n	13996 <mp_obj_str_format_helper+0x13e>
                conversion = *str++;
   13988:	68bb      	ldr	r3, [r7, #8]
   1398a:	1c5a      	adds	r2, r3, #1
   1398c:	60ba      	str	r2, [r7, #8]
   1398e:	781b      	ldrb	r3, [r3, #0]
   13990:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   13994:	e001      	b.n	1399a <mp_obj_str_format_helper+0x142>
            } else {
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13996:	f7ff ff58 	bl	1384a <terse_str_format_value_error>
                    }
                }
            }
        }

        if (str < top && *str == ':') {
   1399a:	68ba      	ldr	r2, [r7, #8]
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	429a      	cmp	r2, r3
   139a0:	d231      	bcs.n	13a06 <mp_obj_str_format_helper+0x1ae>
   139a2:	68bb      	ldr	r3, [r7, #8]
   139a4:	781b      	ldrb	r3, [r3, #0]
   139a6:	2b3a      	cmp	r3, #58	; 0x3a
   139a8:	d12d      	bne.n	13a06 <mp_obj_str_format_helper+0x1ae>
            str++;
   139aa:	68bb      	ldr	r3, [r7, #8]
   139ac:	3301      	adds	r3, #1
   139ae:	60bb      	str	r3, [r7, #8]
            // {:} is the same as {}, which is the same as {!s}
            // This makes a difference when passing in a True or False
            // '{}'.format(True) returns 'True'
            // '{:d}'.format(True) returns '1'
            // So we treat {:} as {} and this later gets treated to be {!s}
            if (*str != '}') {
   139b0:	68bb      	ldr	r3, [r7, #8]
   139b2:	781b      	ldrb	r3, [r3, #0]
   139b4:	2b7d      	cmp	r3, #125	; 0x7d
   139b6:	d026      	beq.n	13a06 <mp_obj_str_format_helper+0x1ae>
                format_spec = str;
   139b8:	68bb      	ldr	r3, [r7, #8]
   139ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                for (int nest = 1; str < top;) {
   139be:	2301      	movs	r3, #1
   139c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   139c4:	e019      	b.n	139fa <mp_obj_str_format_helper+0x1a2>
                    if (*str == '{') {
   139c6:	68bb      	ldr	r3, [r7, #8]
   139c8:	781b      	ldrb	r3, [r3, #0]
   139ca:	2b7b      	cmp	r3, #123	; 0x7b
   139cc:	d105      	bne.n	139da <mp_obj_str_format_helper+0x182>
                        ++nest;
   139ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   139d2:	3301      	adds	r3, #1
   139d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   139d8:	e00c      	b.n	139f4 <mp_obj_str_format_helper+0x19c>
                    } else if (*str == '}') {
   139da:	68bb      	ldr	r3, [r7, #8]
   139dc:	781b      	ldrb	r3, [r3, #0]
   139de:	2b7d      	cmp	r3, #125	; 0x7d
   139e0:	d108      	bne.n	139f4 <mp_obj_str_format_helper+0x19c>
                        if (--nest == 0) {
   139e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   139e6:	3b01      	subs	r3, #1
   139e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   139ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   139f0:	2b00      	cmp	r3, #0
   139f2:	d007      	beq.n	13a04 <mp_obj_str_format_helper+0x1ac>
                            break;
                        }
                    }
                    ++str;
   139f4:	68bb      	ldr	r3, [r7, #8]
   139f6:	3301      	adds	r3, #1
   139f8:	60bb      	str	r3, [r7, #8]
                for (int nest = 1; str < top;) {
   139fa:	68ba      	ldr	r2, [r7, #8]
   139fc:	687b      	ldr	r3, [r7, #4]
   139fe:	429a      	cmp	r2, r3
   13a00:	d3e1      	bcc.n	139c6 <mp_obj_str_format_helper+0x16e>
   13a02:	e000      	b.n	13a06 <mp_obj_str_format_helper+0x1ae>
                            break;
   13a04:	bf00      	nop
                }
            }
        }
        if (str >= top) {
   13a06:	68ba      	ldr	r2, [r7, #8]
   13a08:	687b      	ldr	r3, [r7, #4]
   13a0a:	429a      	cmp	r2, r3
   13a0c:	d301      	bcc.n	13a12 <mp_obj_str_format_helper+0x1ba>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13a0e:	f7ff ff1c 	bl	1384a <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("unmatched '{' in format");
            }
        }
        if (*str != '}') {
   13a12:	68bb      	ldr	r3, [r7, #8]
   13a14:	781b      	ldrb	r3, [r3, #0]
   13a16:	2b7d      	cmp	r3, #125	; 0x7d
   13a18:	d001      	beq.n	13a1e <mp_obj_str_format_helper+0x1c6>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13a1a:	f7ff ff16 	bl	1384a <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("expected ':' after format specifier");
            }
        }

        mp_obj_t arg = mp_const_none;
   13a1e:	4ba8      	ldr	r3, [pc, #672]	; (13cc0 <mp_obj_str_format_helper+0x468>)
   13a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        if (field_name) {
   13a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13a28:	2b00      	cmp	r3, #0
   13a2a:	d07b      	beq.n	13b24 <mp_obj_str_format_helper+0x2cc>
            int index = 0;
   13a2c:	2300      	movs	r3, #0
   13a2e:	643b      	str	r3, [r7, #64]	; 0x40
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   13a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13a34:	781b      	ldrb	r3, [r3, #0]
   13a36:	4618      	mov	r0, r3
   13a38:	f7ee fd00 	bl	243c <unichar_isdigit>
   13a3c:	4603      	mov	r3, r0
   13a3e:	2b00      	cmp	r3, #0
   13a40:	d028      	beq.n	13a94 <mp_obj_str_format_helper+0x23c>
                if (*arg_i > 0) {
   13a42:	683b      	ldr	r3, [r7, #0]
   13a44:	681b      	ldr	r3, [r3, #0]
   13a46:	2b00      	cmp	r3, #0
   13a48:	dd01      	ble.n	13a4e <mp_obj_str_format_helper+0x1f6>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13a4a:	f7ff fefe 	bl	1384a <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError(
                            "can't switch from automatic field numbering to manual field specification");
                    }
                }
                field_name = str_to_int(field_name, field_name_top, &index);
   13a4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
   13a52:	461a      	mov	r2, r3
   13a54:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   13a58:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13a5c:	f7ff fe3f 	bl	136de <str_to_int>
   13a60:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                if ((uint)index >= n_args - 1) {
   13a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13a68:	3b01      	subs	r3, #1
   13a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13a6c:	4293      	cmp	r3, r2
   13a6e:	d803      	bhi.n	13a78 <mp_obj_str_format_helper+0x220>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13a70:	4994      	ldr	r1, [pc, #592]	; (13cc4 <mp_obj_str_format_helper+0x46c>)
   13a72:	4895      	ldr	r0, [pc, #596]	; (13cc8 <mp_obj_str_format_helper+0x470>)
   13a74:	f7f9 f9d6 	bl	ce24 <mp_raise_msg>
                }
                arg = args[index + 1];
   13a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13a7a:	3301      	adds	r3, #1
   13a7c:	009b      	lsls	r3, r3, #2
   13a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13a82:	4413      	add	r3, r2
   13a84:	681b      	ldr	r3, [r3, #0]
   13a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                *arg_i = -1;
   13a8a:	683b      	ldr	r3, [r7, #0]
   13a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13a90:	601a      	str	r2, [r3, #0]
   13a92:	e03e      	b.n	13b12 <mp_obj_str_format_helper+0x2ba>
            } else {
                const char *lookup;
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   13a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13a9c:	e004      	b.n	13aa8 <mp_obj_str_format_helper+0x250>
   13a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13aa2:	3301      	adds	r3, #1
   13aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13aa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13ab0:	429a      	cmp	r2, r3
   13ab2:	d209      	bcs.n	13ac8 <mp_obj_str_format_helper+0x270>
   13ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13ab8:	781b      	ldrb	r3, [r3, #0]
   13aba:	2b2e      	cmp	r3, #46	; 0x2e
   13abc:	d004      	beq.n	13ac8 <mp_obj_str_format_helper+0x270>
   13abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13ac2:	781b      	ldrb	r3, [r3, #0]
   13ac4:	2b5b      	cmp	r3, #91	; 0x5b
   13ac6:	d1ea      	bne.n	13a9e <mp_obj_str_format_helper+0x246>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   13ac8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13ad0:	1ad3      	subs	r3, r2, r3
   13ad2:	4619      	mov	r1, r3
   13ad4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13ad8:	f001 fb12 	bl	15100 <mp_obj_new_str_via_qstr>
   13adc:	6738      	str	r0, [r7, #112]	; 0x70
                field_name = lookup;
   13ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   13ae6:	2200      	movs	r2, #0
   13ae8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13aea:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   13aee:	f7f9 fc35 	bl	d35c <mp_map_lookup>
   13af2:	66f8      	str	r0, [r7, #108]	; 0x6c
                if (key_elem == NULL) {
   13af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13af6:	2b00      	cmp	r3, #0
   13af8:	d107      	bne.n	13b0a <mp_obj_str_format_helper+0x2b2>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   13afa:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13afc:	4873      	ldr	r0, [pc, #460]	; (13ccc <mp_obj_str_format_helper+0x474>)
   13afe:	f7fb fc27 	bl	f350 <mp_obj_new_exception_arg1>
   13b02:	4603      	mov	r3, r0
   13b04:	4618      	mov	r0, r3
   13b06:	f7ec fbeb 	bl	2e0 <nlr_jump>
                }
                arg = key_elem->value;
   13b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13b0c:	685b      	ldr	r3, [r3, #4]
   13b0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
            if (field_name < field_name_top) {
   13b12:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   13b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13b1a:	429a      	cmp	r2, r3
   13b1c:	d223      	bcs.n	13b66 <mp_obj_str_format_helper+0x30e>
                mp_raise_NotImplementedError("attributes not supported yet");
   13b1e:	486c      	ldr	r0, [pc, #432]	; (13cd0 <mp_obj_str_format_helper+0x478>)
   13b20:	f7f9 f9be 	bl	cea0 <mp_raise_NotImplementedError>
            }
        } else {
            if (*arg_i < 0) {
   13b24:	683b      	ldr	r3, [r7, #0]
   13b26:	681b      	ldr	r3, [r3, #0]
   13b28:	2b00      	cmp	r3, #0
   13b2a:	da01      	bge.n	13b30 <mp_obj_str_format_helper+0x2d8>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13b2c:	f7ff fe8d 	bl	1384a <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError(
                        "can't switch from manual field specification to automatic field numbering");
                }
            }
            if ((uint)*arg_i >= n_args - 1) {
   13b30:	683b      	ldr	r3, [r7, #0]
   13b32:	681b      	ldr	r3, [r3, #0]
   13b34:	461a      	mov	r2, r3
   13b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13b3a:	3b01      	subs	r3, #1
   13b3c:	429a      	cmp	r2, r3
   13b3e:	d303      	bcc.n	13b48 <mp_obj_str_format_helper+0x2f0>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13b40:	4960      	ldr	r1, [pc, #384]	; (13cc4 <mp_obj_str_format_helper+0x46c>)
   13b42:	4861      	ldr	r0, [pc, #388]	; (13cc8 <mp_obj_str_format_helper+0x470>)
   13b44:	f7f9 f96e 	bl	ce24 <mp_raise_msg>
            }
            arg = args[(*arg_i) + 1];
   13b48:	683b      	ldr	r3, [r7, #0]
   13b4a:	681b      	ldr	r3, [r3, #0]
   13b4c:	3301      	adds	r3, #1
   13b4e:	009b      	lsls	r3, r3, #2
   13b50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13b54:	4413      	add	r3, r2
   13b56:	681b      	ldr	r3, [r3, #0]
   13b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*arg_i)++;
   13b5c:	683b      	ldr	r3, [r7, #0]
   13b5e:	681b      	ldr	r3, [r3, #0]
   13b60:	1c5a      	adds	r2, r3, #1
   13b62:	683b      	ldr	r3, [r7, #0]
   13b64:	601a      	str	r2, [r3, #0]
        }
        if (!format_spec && !conversion) {
   13b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13b6a:	2b00      	cmp	r3, #0
   13b6c:	d106      	bne.n	13b7c <mp_obj_str_format_helper+0x324>
   13b6e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13b72:	2b00      	cmp	r3, #0
   13b74:	d102      	bne.n	13b7c <mp_obj_str_format_helper+0x324>
            conversion = 's';
   13b76:	2373      	movs	r3, #115	; 0x73
   13b78:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        }
        if (conversion) {
   13b7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13b80:	2b00      	cmp	r3, #0
   13b82:	d02e      	beq.n	13be2 <mp_obj_str_format_helper+0x38a>
            mp_print_kind_t print_kind;
            if (conversion == 's') {
   13b84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13b88:	2b73      	cmp	r3, #115	; 0x73
   13b8a:	d103      	bne.n	13b94 <mp_obj_str_format_helper+0x33c>
                print_kind = PRINT_STR;
   13b8c:	2300      	movs	r3, #0
   13b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   13b92:	e00d      	b.n	13bb0 <mp_obj_str_format_helper+0x358>
            } else {
                assert(conversion == 'r');
   13b94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13b98:	2b72      	cmp	r3, #114	; 0x72
   13b9a:	d006      	beq.n	13baa <mp_obj_str_format_helper+0x352>
   13b9c:	4b4d      	ldr	r3, [pc, #308]	; (13cd4 <mp_obj_str_format_helper+0x47c>)
   13b9e:	4a4e      	ldr	r2, [pc, #312]	; (13cd8 <mp_obj_str_format_helper+0x480>)
   13ba0:	f240 414f 	movw	r1, #1103	; 0x44f
   13ba4:	484d      	ldr	r0, [pc, #308]	; (13cdc <mp_obj_str_format_helper+0x484>)
   13ba6:	f007 fc6b 	bl	1b480 <__assert_func>
                print_kind = PRINT_REPR;
   13baa:	2301      	movs	r3, #1
   13bac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            vstr_t arg_vstr;
            mp_print_t arg_print;
            vstr_init_print(&arg_vstr, 16, &arg_print);
   13bb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13bb8:	2110      	movs	r1, #16
   13bba:	4618      	mov	r0, r3
   13bbc:	f7ed fc17 	bl	13ee <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   13bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   13bc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13bc8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13bcc:	4618      	mov	r0, r3
   13bce:	f7f9 fda0 	bl	d712 <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   13bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13bd6:	4619      	mov	r1, r3
   13bd8:	4841      	ldr	r0, [pc, #260]	; (13ce0 <mp_obj_str_format_helper+0x488>)
   13bda:	f001 faa2 	bl	15122 <mp_obj_new_str_from_vstr>
   13bde:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        }

        char fill = '\0';
   13be2:	2300      	movs	r3, #0
   13be4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        char align = '\0';
   13be8:	2300      	movs	r3, #0
   13bea:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        int width = -1;
   13bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bf2:	64bb      	str	r3, [r7, #72]	; 0x48
        int precision = -1;
   13bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bf8:	647b      	str	r3, [r7, #68]	; 0x44
        char type = '\0';
   13bfa:	2300      	movs	r3, #0
   13bfc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        int flags = 0;
   13c00:	2300      	movs	r3, #0
   13c02:	67bb      	str	r3, [r7, #120]	; 0x78

        if (format_spec) {
   13c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13c08:	2b00      	cmp	r3, #0
   13c0a:	f000 80ce 	beq.w	13daa <mp_obj_str_format_helper+0x552>
            // precision   ::=  integer
            // type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

            // recursively call the formatter to format any nested specifiers
            MP_STACK_CHECK();
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   13c0e:	f107 0018 	add.w	r0, r7, #24
   13c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   13c16:	9302      	str	r3, [sp, #8]
   13c18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   13c1c:	9301      	str	r3, [sp, #4]
   13c1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13c22:	9300      	str	r3, [sp, #0]
   13c24:	683b      	ldr	r3, [r7, #0]
   13c26:	68ba      	ldr	r2, [r7, #8]
   13c28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   13c2c:	f7ff fe14 	bl	13858 <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   13c30:	f107 0318 	add.w	r3, r7, #24
   13c34:	4618      	mov	r0, r3
   13c36:	f7ed fcc4 	bl	15c2 <vstr_null_terminated_str>
   13c3a:	6778      	str	r0, [r7, #116]	; 0x74
            const char *stop = s + format_spec_vstr.len;
   13c3c:	69fb      	ldr	r3, [r7, #28]
   13c3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13c40:	4413      	add	r3, r2
   13c42:	66bb      	str	r3, [r7, #104]	; 0x68
            if (isalignment(*s)) {
   13c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c46:	781b      	ldrb	r3, [r3, #0]
   13c48:	4618      	mov	r0, r3
   13c4a:	f7ff fd80 	bl	1374e <isalignment>
   13c4e:	4603      	mov	r3, r0
   13c50:	2b00      	cmp	r3, #0
   13c52:	d006      	beq.n	13c62 <mp_obj_str_format_helper+0x40a>
                align = *s++;
   13c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c56:	1c5a      	adds	r2, r3, #1
   13c58:	677a      	str	r2, [r7, #116]	; 0x74
   13c5a:	781b      	ldrb	r3, [r3, #0]
   13c5c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13c60:	e018      	b.n	13c94 <mp_obj_str_format_helper+0x43c>
            } else if (*s && isalignment(s[1])) {
   13c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c64:	781b      	ldrb	r3, [r3, #0]
   13c66:	2b00      	cmp	r3, #0
   13c68:	d014      	beq.n	13c94 <mp_obj_str_format_helper+0x43c>
   13c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c6c:	3301      	adds	r3, #1
   13c6e:	781b      	ldrb	r3, [r3, #0]
   13c70:	4618      	mov	r0, r3
   13c72:	f7ff fd6c 	bl	1374e <isalignment>
   13c76:	4603      	mov	r3, r0
   13c78:	2b00      	cmp	r3, #0
   13c7a:	d00b      	beq.n	13c94 <mp_obj_str_format_helper+0x43c>
                fill = *s++;
   13c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c7e:	1c5a      	adds	r2, r3, #1
   13c80:	677a      	str	r2, [r7, #116]	; 0x74
   13c82:	781b      	ldrb	r3, [r3, #0]
   13c84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                align = *s++;
   13c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c8a:	1c5a      	adds	r2, r3, #1
   13c8c:	677a      	str	r2, [r7, #116]	; 0x74
   13c8e:	781b      	ldrb	r3, [r3, #0]
   13c90:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
            if (*s == '+' || *s == '-' || *s == ' ') {
   13c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c96:	781b      	ldrb	r3, [r3, #0]
   13c98:	2b2b      	cmp	r3, #43	; 0x2b
   13c9a:	d007      	beq.n	13cac <mp_obj_str_format_helper+0x454>
   13c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13c9e:	781b      	ldrb	r3, [r3, #0]
   13ca0:	2b2d      	cmp	r3, #45	; 0x2d
   13ca2:	d003      	beq.n	13cac <mp_obj_str_format_helper+0x454>
   13ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ca6:	781b      	ldrb	r3, [r3, #0]
   13ca8:	2b20      	cmp	r3, #32
   13caa:	d126      	bne.n	13cfa <mp_obj_str_format_helper+0x4a2>
                if (*s == '+') {
   13cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13cae:	781b      	ldrb	r3, [r3, #0]
   13cb0:	2b2b      	cmp	r3, #43	; 0x2b
   13cb2:	d117      	bne.n	13ce4 <mp_obj_str_format_helper+0x48c>
                    flags |= PF_FLAG_SHOW_SIGN;
   13cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13cb6:	f043 0302 	orr.w	r3, r3, #2
   13cba:	67bb      	str	r3, [r7, #120]	; 0x78
   13cbc:	e01a      	b.n	13cf4 <mp_obj_str_format_helper+0x49c>
   13cbe:	bf00      	nop
   13cc0:	00023108 	.word	0x00023108
   13cc4:	0002350c 	.word	0x0002350c
   13cc8:	0002218c 	.word	0x0002218c
   13ccc:	000221c8 	.word	0x000221c8
   13cd0:	00023528 	.word	0x00023528
   13cd4:	00023548 	.word	0x00023548
   13cd8:	00023878 	.word	0x00023878
   13cdc:	000232e0 	.word	0x000232e0
   13ce0:	0002379c 	.word	0x0002379c
                } else if (*s == ' ') {
   13ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ce6:	781b      	ldrb	r3, [r3, #0]
   13ce8:	2b20      	cmp	r3, #32
   13cea:	d103      	bne.n	13cf4 <mp_obj_str_format_helper+0x49c>
                    flags |= PF_FLAG_SPACE_SIGN;
   13cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13cee:	f043 0304 	orr.w	r3, r3, #4
   13cf2:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                s++;
   13cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13cf6:	3301      	adds	r3, #1
   13cf8:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '#') {
   13cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13cfc:	781b      	ldrb	r3, [r3, #0]
   13cfe:	2b23      	cmp	r3, #35	; 0x23
   13d00:	d106      	bne.n	13d10 <mp_obj_str_format_helper+0x4b8>
                flags |= PF_FLAG_SHOW_PREFIX;
   13d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13d04:	f043 0310 	orr.w	r3, r3, #16
   13d08:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d0c:	3301      	adds	r3, #1
   13d0e:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '0') {
   13d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d12:	781b      	ldrb	r3, [r3, #0]
   13d14:	2b30      	cmp	r3, #48	; 0x30
   13d16:	d10d      	bne.n	13d34 <mp_obj_str_format_helper+0x4dc>
                if (!align) {
   13d18:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13d1c:	2b00      	cmp	r3, #0
   13d1e:	d102      	bne.n	13d26 <mp_obj_str_format_helper+0x4ce>
                    align = '=';
   13d20:	233d      	movs	r3, #61	; 0x3d
   13d22:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
                }
                if (!fill) {
   13d26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	d102      	bne.n	13d34 <mp_obj_str_format_helper+0x4dc>
                    fill = '0';
   13d2e:	2330      	movs	r3, #48	; 0x30
   13d30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                }
            }
            s = str_to_int(s, stop, &width);
   13d34:	f107 0348 	add.w	r3, r7, #72	; 0x48
   13d38:	461a      	mov	r2, r3
   13d3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13d3c:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13d3e:	f7ff fcce 	bl	136de <str_to_int>
   13d42:	6778      	str	r0, [r7, #116]	; 0x74
            if (*s == ',') {
   13d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d46:	781b      	ldrb	r3, [r3, #0]
   13d48:	2b2c      	cmp	r3, #44	; 0x2c
   13d4a:	d106      	bne.n	13d5a <mp_obj_str_format_helper+0x502>
                flags |= PF_FLAG_SHOW_COMMA;
   13d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13d4e:	f043 0320 	orr.w	r3, r3, #32
   13d52:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d56:	3301      	adds	r3, #1
   13d58:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '.') {
   13d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d5c:	781b      	ldrb	r3, [r3, #0]
   13d5e:	2b2e      	cmp	r3, #46	; 0x2e
   13d60:	d10a      	bne.n	13d78 <mp_obj_str_format_helper+0x520>
                s++;
   13d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d64:	3301      	adds	r3, #1
   13d66:	677b      	str	r3, [r7, #116]	; 0x74
                s = str_to_int(s, stop, &precision);
   13d68:	f107 0344 	add.w	r3, r7, #68	; 0x44
   13d6c:	461a      	mov	r2, r3
   13d6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13d70:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13d72:	f7ff fcb4 	bl	136de <str_to_int>
   13d76:	6778      	str	r0, [r7, #116]	; 0x74
            }
            if (istype(*s)) {
   13d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d7a:	781b      	ldrb	r3, [r3, #0]
   13d7c:	4618      	mov	r0, r3
   13d7e:	f7ff fd03 	bl	13788 <istype>
   13d82:	4603      	mov	r3, r0
   13d84:	2b00      	cmp	r3, #0
   13d86:	d005      	beq.n	13d94 <mp_obj_str_format_helper+0x53c>
                type = *s++;
   13d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d8a:	1c5a      	adds	r2, r3, #1
   13d8c:	677a      	str	r2, [r7, #116]	; 0x74
   13d8e:	781b      	ldrb	r3, [r3, #0]
   13d90:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (*s) {
   13d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13d96:	781b      	ldrb	r3, [r3, #0]
   13d98:	2b00      	cmp	r3, #0
   13d9a:	d001      	beq.n	13da0 <mp_obj_str_format_helper+0x548>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13d9c:	f7ff fd55 	bl	1384a <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("invalid format specifier");
                }
            }
            vstr_clear(&format_spec_vstr);
   13da0:	f107 0318 	add.w	r3, r7, #24
   13da4:	4618      	mov	r0, r3
   13da6:	f7ed fb39 	bl	141c <vstr_clear>
        }
        if (!align) {
   13daa:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13dae:	2b00      	cmp	r3, #0
   13db0:	d10d      	bne.n	13dce <mp_obj_str_format_helper+0x576>
            if (arg_looks_numeric(arg)) {
   13db2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13db6:	f7ff fd31 	bl	1381c <arg_looks_numeric>
   13dba:	4603      	mov	r3, r0
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d003      	beq.n	13dc8 <mp_obj_str_format_helper+0x570>
                align = '>';
   13dc0:	233e      	movs	r3, #62	; 0x3e
   13dc2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13dc6:	e002      	b.n	13dce <mp_obj_str_format_helper+0x576>
            } else {
                align = '<';
   13dc8:	233c      	movs	r3, #60	; 0x3c
   13dca:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
        }
        if (!fill) {
   13dce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13dd2:	2b00      	cmp	r3, #0
   13dd4:	d102      	bne.n	13ddc <mp_obj_str_format_helper+0x584>
            fill = ' ';
   13dd6:	2320      	movs	r3, #32
   13dd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        }

        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   13ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13dde:	f003 0306 	and.w	r3, r3, #6
   13de2:	2b00      	cmp	r3, #0
   13de4:	d00b      	beq.n	13dfe <mp_obj_str_format_helper+0x5a6>
            if (type == 's') {
   13de6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13dea:	2b73      	cmp	r3, #115	; 0x73
   13dec:	d101      	bne.n	13df2 <mp_obj_str_format_helper+0x59a>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13dee:	f7ff fd2c 	bl	1384a <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("sign not allowed in string format specifier");
                }
            }
            if (type == 'c') {
   13df2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13df6:	2b63      	cmp	r3, #99	; 0x63
   13df8:	d101      	bne.n	13dfe <mp_obj_str_format_helper+0x5a6>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13dfa:	f7ff fd26 	bl	1384a <terse_str_format_value_error>
                        "sign not allowed with integer format specifier 'c'");
                }
            }
        }

        switch (align) {
   13dfe:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13e02:	2b3d      	cmp	r3, #61	; 0x3d
   13e04:	d008      	beq.n	13e18 <mp_obj_str_format_helper+0x5c0>
   13e06:	2b5e      	cmp	r3, #94	; 0x5e
   13e08:	d00b      	beq.n	13e22 <mp_obj_str_format_helper+0x5ca>
   13e0a:	2b3c      	cmp	r3, #60	; 0x3c
   13e0c:	d10e      	bne.n	13e2c <mp_obj_str_format_helper+0x5d4>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   13e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13e10:	f043 0301 	orr.w	r3, r3, #1
   13e14:	67bb      	str	r3, [r7, #120]	; 0x78
   13e16:	e009      	b.n	13e2c <mp_obj_str_format_helper+0x5d4>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   13e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13e1e:	67bb      	str	r3, [r7, #120]	; 0x78
   13e20:	e004      	b.n	13e2c <mp_obj_str_format_helper+0x5d4>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   13e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13e28:	67bb      	str	r3, [r7, #120]	; 0x78
   13e2a:	bf00      	nop
        }

        if (arg_looks_integer(arg)) {
   13e2c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13e30:	f7ff fcc6 	bl	137c0 <arg_looks_integer>
   13e34:	4603      	mov	r3, r0
   13e36:	2b00      	cmp	r3, #0
   13e38:	f000 8167 	beq.w	1410a <mp_obj_str_format_helper+0x8b2>
            switch (type) {
   13e3c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13e40:	2b78      	cmp	r3, #120	; 0x78
   13e42:	f200 815f 	bhi.w	14104 <mp_obj_str_format_helper+0x8ac>
   13e46:	a201      	add	r2, pc, #4	; (adr r2, 13e4c <mp_obj_str_format_helper+0x5f4>)
   13e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13e4c:	0001407f 	.word	0x0001407f
   13e50:	00014105 	.word	0x00014105
   13e54:	00014105 	.word	0x00014105
   13e58:	00014105 	.word	0x00014105
   13e5c:	00014105 	.word	0x00014105
   13e60:	00014105 	.word	0x00014105
   13e64:	00014105 	.word	0x00014105
   13e68:	00014105 	.word	0x00014105
   13e6c:	00014105 	.word	0x00014105
   13e70:	00014105 	.word	0x00014105
   13e74:	00014105 	.word	0x00014105
   13e78:	00014105 	.word	0x00014105
   13e7c:	00014105 	.word	0x00014105
   13e80:	00014105 	.word	0x00014105
   13e84:	00014105 	.word	0x00014105
   13e88:	00014105 	.word	0x00014105
   13e8c:	00014105 	.word	0x00014105
   13e90:	00014105 	.word	0x00014105
   13e94:	00014105 	.word	0x00014105
   13e98:	00014105 	.word	0x00014105
   13e9c:	00014105 	.word	0x00014105
   13ea0:	00014105 	.word	0x00014105
   13ea4:	00014105 	.word	0x00014105
   13ea8:	00014105 	.word	0x00014105
   13eac:	00014105 	.word	0x00014105
   13eb0:	00014105 	.word	0x00014105
   13eb4:	00014105 	.word	0x00014105
   13eb8:	00014105 	.word	0x00014105
   13ebc:	00014105 	.word	0x00014105
   13ec0:	00014105 	.word	0x00014105
   13ec4:	00014105 	.word	0x00014105
   13ec8:	00014105 	.word	0x00014105
   13ecc:	00014105 	.word	0x00014105
   13ed0:	00014105 	.word	0x00014105
   13ed4:	00014105 	.word	0x00014105
   13ed8:	00014105 	.word	0x00014105
   13edc:	00014105 	.word	0x00014105
   13ee0:	00014109 	.word	0x00014109
   13ee4:	00014105 	.word	0x00014105
   13ee8:	00014105 	.word	0x00014105
   13eec:	00014105 	.word	0x00014105
   13ef0:	00014105 	.word	0x00014105
   13ef4:	00014105 	.word	0x00014105
   13ef8:	00014105 	.word	0x00014105
   13efc:	00014105 	.word	0x00014105
   13f00:	00014105 	.word	0x00014105
   13f04:	00014105 	.word	0x00014105
   13f08:	00014105 	.word	0x00014105
   13f0c:	00014105 	.word	0x00014105
   13f10:	00014105 	.word	0x00014105
   13f14:	00014105 	.word	0x00014105
   13f18:	00014105 	.word	0x00014105
   13f1c:	00014105 	.word	0x00014105
   13f20:	00014105 	.word	0x00014105
   13f24:	00014105 	.word	0x00014105
   13f28:	00014105 	.word	0x00014105
   13f2c:	00014105 	.word	0x00014105
   13f30:	00014105 	.word	0x00014105
   13f34:	00014105 	.word	0x00014105
   13f38:	00014105 	.word	0x00014105
   13f3c:	00014105 	.word	0x00014105
   13f40:	00014105 	.word	0x00014105
   13f44:	00014105 	.word	0x00014105
   13f48:	00014105 	.word	0x00014105
   13f4c:	00014105 	.word	0x00014105
   13f50:	00014105 	.word	0x00014105
   13f54:	00014105 	.word	0x00014105
   13f58:	00014105 	.word	0x00014105
   13f5c:	00014105 	.word	0x00014105
   13f60:	00014109 	.word	0x00014109
   13f64:	00014109 	.word	0x00014109
   13f68:	00014109 	.word	0x00014109
   13f6c:	00014105 	.word	0x00014105
   13f70:	00014105 	.word	0x00014105
   13f74:	00014105 	.word	0x00014105
   13f78:	00014105 	.word	0x00014105
   13f7c:	00014105 	.word	0x00014105
   13f80:	00014105 	.word	0x00014105
   13f84:	00014105 	.word	0x00014105
   13f88:	00014105 	.word	0x00014105
   13f8c:	00014105 	.word	0x00014105
   13f90:	00014105 	.word	0x00014105
   13f94:	00014105 	.word	0x00014105
   13f98:	00014105 	.word	0x00014105
   13f9c:	00014105 	.word	0x00014105
   13fa0:	00014105 	.word	0x00014105
   13fa4:	00014105 	.word	0x00014105
   13fa8:	00014105 	.word	0x00014105
   13fac:	000140d9 	.word	0x000140d9
   13fb0:	00014105 	.word	0x00014105
   13fb4:	00014105 	.word	0x00014105
   13fb8:	00014105 	.word	0x00014105
   13fbc:	00014105 	.word	0x00014105
   13fc0:	00014105 	.word	0x00014105
   13fc4:	00014105 	.word	0x00014105
   13fc8:	00014105 	.word	0x00014105
   13fcc:	00014105 	.word	0x00014105
   13fd0:	00014105 	.word	0x00014105
   13fd4:	00014031 	.word	0x00014031
   13fd8:	00014055 	.word	0x00014055
   13fdc:	0001407f 	.word	0x0001407f
   13fe0:	00014109 	.word	0x00014109
   13fe4:	00014109 	.word	0x00014109
   13fe8:	00014109 	.word	0x00014109
   13fec:	00014105 	.word	0x00014105
   13ff0:	00014105 	.word	0x00014105
   13ff4:	00014105 	.word	0x00014105
   13ff8:	00014105 	.word	0x00014105
   13ffc:	00014105 	.word	0x00014105
   14000:	00014105 	.word	0x00014105
   14004:	0001407f 	.word	0x0001407f
   14008:	000140a3 	.word	0x000140a3
   1400c:	00014105 	.word	0x00014105
   14010:	00014105 	.word	0x00014105
   14014:	00014105 	.word	0x00014105
   14018:	00014105 	.word	0x00014105
   1401c:	00014105 	.word	0x00014105
   14020:	00014105 	.word	0x00014105
   14024:	00014105 	.word	0x00014105
   14028:	00014105 	.word	0x00014105
   1402c:	000140d9 	.word	0x000140d9
                case 'b':
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   14030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14032:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14036:	2200      	movs	r2, #0
   14038:	9203      	str	r2, [sp, #12]
   1403a:	9302      	str	r3, [sp, #8]
   1403c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14040:	9301      	str	r3, [sp, #4]
   14042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14044:	9300      	str	r3, [sp, #0]
   14046:	2361      	movs	r3, #97	; 0x61
   14048:	2202      	movs	r2, #2
   1404a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1404e:	f7ed fd90 	bl	1b72 <mp_print_mp_int>
                    continue;
   14052:	e0a0      	b.n	14196 <mp_obj_str_format_helper+0x93e>

                case 'c':
                {
                    char ch = mp_obj_get_int(arg);
   14054:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14058:	f7f9 fd06 	bl	da68 <mp_obj_get_int>
   1405c:	4603      	mov	r3, r0
   1405e:	b2db      	uxtb	r3, r3
   14060:	75fb      	strb	r3, [r7, #23]
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   14062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14064:	f107 0117 	add.w	r1, r7, #23
   14068:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1406c:	9301      	str	r3, [sp, #4]
   1406e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14072:	9300      	str	r3, [sp, #0]
   14074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14076:	2201      	movs	r2, #1
   14078:	f7ed fc3c 	bl	18f4 <mp_print_strn>
   1407c:	e08b      	b.n	14196 <mp_obj_str_format_helper+0x93e>
                }

                case '\0':  // No explicit format type implies 'd'
                case 'n':   // I don't think we support locales in uPy so use 'd'
                case 'd':
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   1407e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14080:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14084:	2200      	movs	r2, #0
   14086:	9203      	str	r2, [sp, #12]
   14088:	9302      	str	r3, [sp, #8]
   1408a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1408e:	9301      	str	r3, [sp, #4]
   14090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14092:	9300      	str	r3, [sp, #0]
   14094:	2361      	movs	r3, #97	; 0x61
   14096:	220a      	movs	r2, #10
   14098:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1409c:	f7ed fd69 	bl	1b72 <mp_print_mp_int>
                    continue;
   140a0:	e079      	b.n	14196 <mp_obj_str_format_helper+0x93e>

                case 'o':
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   140a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   140a4:	f003 0310 	and.w	r3, r3, #16
   140a8:	2b00      	cmp	r3, #0
   140aa:	d003      	beq.n	140b4 <mp_obj_str_format_helper+0x85c>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   140ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   140ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   140b2:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   140b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   140b6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   140ba:	2200      	movs	r2, #0
   140bc:	9203      	str	r2, [sp, #12]
   140be:	9302      	str	r3, [sp, #8]
   140c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   140c4:	9301      	str	r3, [sp, #4]
   140c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   140c8:	9300      	str	r3, [sp, #0]
   140ca:	2361      	movs	r3, #97	; 0x61
   140cc:	2208      	movs	r2, #8
   140ce:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   140d2:	f7ed fd4e 	bl	1b72 <mp_print_mp_int>
                    continue;
   140d6:	e05e      	b.n	14196 <mp_obj_str_format_helper+0x93e>

                case 'X':
                case 'x':
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   140d8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   140dc:	f1a3 0117 	sub.w	r1, r3, #23
   140e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   140e2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   140e6:	2200      	movs	r2, #0
   140e8:	9203      	str	r2, [sp, #12]
   140ea:	9302      	str	r3, [sp, #8]
   140ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   140f0:	9301      	str	r3, [sp, #4]
   140f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   140f4:	9300      	str	r3, [sp, #0]
   140f6:	460b      	mov	r3, r1
   140f8:	2210      	movs	r2, #16
   140fa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   140fe:	f7ed fd38 	bl	1b72 <mp_print_mp_int>
                    continue;
   14102:	e048      	b.n	14196 <mp_obj_str_format_helper+0x93e>
                    // looks like an integer
                    break;

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14104:	f7ff fba1 	bl	1384a <terse_str_format_value_error>
                    break;
   14108:	bf00      	nop
            }
        }

        // NOTE: no else here. We need the e, f, g etc formats for integer
        //       arguments (from above if) to take this if.
        if (arg_looks_numeric(arg)) {
   1410a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   1410e:	f7ff fb85 	bl	1381c <arg_looks_numeric>
   14112:	4603      	mov	r3, r0
   14114:	2b00      	cmp	r3, #0
   14116:	d00f      	beq.n	14138 <mp_obj_str_format_helper+0x8e0>
            if (!type) {
   14118:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   1411c:	2b00      	cmp	r3, #0
   1411e:	d102      	bne.n	14126 <mp_obj_str_format_helper+0x8ce>
                // CPython sources say:
                //   Omitted type specifier.  Behaves in the same way as repr(x)
                //   and str(x) if no precision is given, else like 'g', but with
                //   at least one digit after the decimal point. */

                type = 'g';
   14120:	2367      	movs	r3, #103	; 0x67
   14122:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (type == 'n') {
   14126:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   1412a:	2b6e      	cmp	r3, #110	; 0x6e
   1412c:	d102      	bne.n	14134 <mp_obj_str_format_helper+0x8dc>
                type = 'g';
   1412e:	2367      	movs	r3, #103	; 0x67
   14130:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                    break;
#endif

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14134:	f7ff fb89 	bl	1384a <terse_str_format_value_error>
                    }
            }
        } else {
            // arg doesn't look like a number

            if (align == '=') {
   14138:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   1413c:	2b3d      	cmp	r3, #61	; 0x3d
   1413e:	d101      	bne.n	14144 <mp_obj_str_format_helper+0x8ec>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14140:	f7ff fb83 	bl	1384a <terse_str_format_value_error>
                    mp_raise_ValueError(
                        "'=' alignment not allowed in string format specifier");
                }
            }

            switch (type) {
   14144:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14148:	2b00      	cmp	r3, #0
   1414a:	d001      	beq.n	14150 <mp_obj_str_format_helper+0x8f8>
   1414c:	2b73      	cmp	r3, #115	; 0x73
   1414e:	d120      	bne.n	14192 <mp_obj_str_format_helper+0x93a>
                case '\0': // no explicit format type implies 's'
                case 's': {
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   14150:	f107 0310 	add.w	r3, r7, #16
   14154:	4619      	mov	r1, r3
   14156:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   1415a:	f001 f9a3 	bl	154a4 <mp_obj_str_get_data>
   1415e:	6678      	str	r0, [r7, #100]	; 0x64
                    if (precision < 0) {
   14160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14162:	2b00      	cmp	r3, #0
   14164:	da01      	bge.n	1416a <mp_obj_str_format_helper+0x912>
                        precision = slen;
   14166:	693b      	ldr	r3, [r7, #16]
   14168:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    if (slen > (size_t)precision) {
   1416a:	693b      	ldr	r3, [r7, #16]
   1416c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1416e:	4293      	cmp	r3, r2
   14170:	d901      	bls.n	14176 <mp_obj_str_format_helper+0x91e>
                        slen = precision;
   14172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14174:	613b      	str	r3, [r7, #16]
                    }
                    mp_print_strn(&print, s, slen, flags, fill, width);
   14176:	693a      	ldr	r2, [r7, #16]
   14178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1417a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1417e:	9301      	str	r3, [sp, #4]
   14180:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14184:	9300      	str	r3, [sp, #0]
   14186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14188:	6e79      	ldr	r1, [r7, #100]	; 0x64
   1418a:	f7ed fbb3 	bl	18f4 <mp_print_strn>
                    break;
   1418e:	bf00      	nop
   14190:	e001      	b.n	14196 <mp_obj_str_format_helper+0x93e>
                }

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14192:	f7ff fb5a 	bl	1384a <terse_str_format_value_error>
    for (; str < top; str++) {
   14196:	68bb      	ldr	r3, [r7, #8]
   14198:	3301      	adds	r3, #1
   1419a:	60bb      	str	r3, [r7, #8]
   1419c:	68ba      	ldr	r2, [r7, #8]
   1419e:	687b      	ldr	r3, [r7, #4]
   141a0:	429a      	cmp	r2, r3
   141a2:	f4ff ab6a 	bcc.w	1387a <mp_obj_str_format_helper+0x22>
                    }
            }
        }
    }

    return vstr;
   141a6:	68fb      	ldr	r3, [r7, #12]
   141a8:	461c      	mov	r4, r3
   141aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
   141ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   141b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   141b4:	68f8      	ldr	r0, [r7, #12]
   141b6:	37a4      	adds	r7, #164	; 0xa4
   141b8:	46bd      	mov	sp, r7
   141ba:	bd90      	pop	{r4, r7, pc}

000141bc <mp_obj_str_format>:

mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   141bc:	b580      	push	{r7, lr}
   141be:	b090      	sub	sp, #64	; 0x40
   141c0:	af04      	add	r7, sp, #16
   141c2:	60f8      	str	r0, [r7, #12]
   141c4:	60b9      	str	r1, [r7, #8]
   141c6:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   141c8:	68bb      	ldr	r3, [r7, #8]
   141ca:	681b      	ldr	r3, [r3, #0]
   141cc:	4618      	mov	r0, r3
   141ce:	f7fd ff3d 	bl	1204c <MP_OBJ_IS_QSTR>
   141d2:	4603      	mov	r3, r0
   141d4:	2b00      	cmp	r3, #0
   141d6:	d115      	bne.n	14204 <mp_obj_str_format+0x48>
   141d8:	68bb      	ldr	r3, [r7, #8]
   141da:	681b      	ldr	r3, [r3, #0]
   141dc:	4618      	mov	r0, r3
   141de:	f7fd ff47 	bl	12070 <MP_OBJ_IS_OBJ>
   141e2:	4603      	mov	r3, r0
   141e4:	2b00      	cmp	r3, #0
   141e6:	d006      	beq.n	141f6 <mp_obj_str_format+0x3a>
   141e8:	68bb      	ldr	r3, [r7, #8]
   141ea:	681b      	ldr	r3, [r3, #0]
   141ec:	681b      	ldr	r3, [r3, #0]
   141ee:	699b      	ldr	r3, [r3, #24]
   141f0:	4a24      	ldr	r2, [pc, #144]	; (14284 <mp_obj_str_format+0xc8>)
   141f2:	4293      	cmp	r3, r2
   141f4:	d006      	beq.n	14204 <mp_obj_str_format+0x48>
   141f6:	4b24      	ldr	r3, [pc, #144]	; (14288 <mp_obj_str_format+0xcc>)
   141f8:	4a24      	ldr	r2, [pc, #144]	; (1428c <mp_obj_str_format+0xd0>)
   141fa:	f240 5169 	movw	r1, #1385	; 0x569
   141fe:	4824      	ldr	r0, [pc, #144]	; (14290 <mp_obj_str_format+0xd4>)
   14200:	f007 f93e 	bl	1b480 <__assert_func>

    GET_STR_DATA_LEN(args[0], str, len);
   14204:	68bb      	ldr	r3, [r7, #8]
   14206:	681b      	ldr	r3, [r3, #0]
   14208:	4618      	mov	r0, r3
   1420a:	f7fd ff1f 	bl	1204c <MP_OBJ_IS_QSTR>
   1420e:	4603      	mov	r3, r0
   14210:	2b00      	cmp	r3, #0
   14212:	d00a      	beq.n	1422a <mp_obj_str_format+0x6e>
   14214:	68bb      	ldr	r3, [r7, #8]
   14216:	681b      	ldr	r3, [r3, #0]
   14218:	089b      	lsrs	r3, r3, #2
   1421a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1421e:	4611      	mov	r1, r2
   14220:	4618      	mov	r0, r3
   14222:	f7ed f81f 	bl	1264 <qstr_data>
   14226:	62f8      	str	r0, [r7, #44]	; 0x2c
   14228:	e007      	b.n	1423a <mp_obj_str_format+0x7e>
   1422a:	68bb      	ldr	r3, [r7, #8]
   1422c:	681b      	ldr	r3, [r3, #0]
   1422e:	689b      	ldr	r3, [r3, #8]
   14230:	62bb      	str	r3, [r7, #40]	; 0x28
   14232:	68bb      	ldr	r3, [r7, #8]
   14234:	681b      	ldr	r3, [r3, #0]
   14236:	68db      	ldr	r3, [r3, #12]
   14238:	62fb      	str	r3, [r7, #44]	; 0x2c
    int arg_i = 0;
   1423a:	2300      	movs	r3, #0
   1423c:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   1423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14242:	441a      	add	r2, r3
   14244:	f107 0014 	add.w	r0, r7, #20
   14248:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1424c:	687b      	ldr	r3, [r7, #4]
   1424e:	9302      	str	r3, [sp, #8]
   14250:	68bb      	ldr	r3, [r7, #8]
   14252:	9301      	str	r3, [sp, #4]
   14254:	68fb      	ldr	r3, [r7, #12]
   14256:	9300      	str	r3, [sp, #0]
   14258:	460b      	mov	r3, r1
   1425a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1425c:	f7ff fafc 	bl	13858 <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(mp_obj_get_type(args[0]), &vstr);
   14260:	68bb      	ldr	r3, [r7, #8]
   14262:	681b      	ldr	r3, [r3, #0]
   14264:	4618      	mov	r0, r3
   14266:	f7f9 fa23 	bl	d6b0 <mp_obj_get_type>
   1426a:	4602      	mov	r2, r0
   1426c:	f107 0314 	add.w	r3, r7, #20
   14270:	4619      	mov	r1, r3
   14272:	4610      	mov	r0, r2
   14274:	f000 ff55 	bl	15122 <mp_obj_new_str_from_vstr>
   14278:	4603      	mov	r3, r0
}
   1427a:	4618      	mov	r0, r3
   1427c:	3730      	adds	r7, #48	; 0x30
   1427e:	46bd      	mov	sp, r7
   14280:	bd80      	pop	{r7, pc}
   14282:	bf00      	nop
   14284:	000126f7 	.word	0x000126f7
   14288:	0002337c 	.word	0x0002337c
   1428c:	00023894 	.word	0x00023894
   14290:	000232e0 	.word	0x000232e0

00014294 <str_modulo_format>:
MP_DEFINE_CONST_FUN_OBJ_KW(str_format_obj, 1, mp_obj_str_format);

#if MICROPY_PY_BUILTINS_STR_OP_MODULO
STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   14294:	b590      	push	{r4, r7, lr}
   14296:	b0a9      	sub	sp, #164	; 0xa4
   14298:	af04      	add	r7, sp, #16
   1429a:	60f8      	str	r0, [r7, #12]
   1429c:	60b9      	str	r1, [r7, #8]
   1429e:	607a      	str	r2, [r7, #4]
   142a0:	603b      	str	r3, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   142a2:	68f8      	ldr	r0, [r7, #12]
   142a4:	f7fd fed2 	bl	1204c <MP_OBJ_IS_QSTR>
   142a8:	4603      	mov	r3, r0
   142aa:	2b00      	cmp	r3, #0
   142ac:	d112      	bne.n	142d4 <str_modulo_format+0x40>
   142ae:	68f8      	ldr	r0, [r7, #12]
   142b0:	f7fd fede 	bl	12070 <MP_OBJ_IS_OBJ>
   142b4:	4603      	mov	r3, r0
   142b6:	2b00      	cmp	r3, #0
   142b8:	d005      	beq.n	142c6 <str_modulo_format+0x32>
   142ba:	68fb      	ldr	r3, [r7, #12]
   142bc:	681b      	ldr	r3, [r3, #0]
   142be:	699b      	ldr	r3, [r3, #24]
   142c0:	4ac4      	ldr	r2, [pc, #784]	; (145d4 <str_modulo_format+0x340>)
   142c2:	4293      	cmp	r3, r2
   142c4:	d006      	beq.n	142d4 <str_modulo_format+0x40>
   142c6:	4bc4      	ldr	r3, [pc, #784]	; (145d8 <str_modulo_format+0x344>)
   142c8:	4ac4      	ldr	r2, [pc, #784]	; (145dc <str_modulo_format+0x348>)
   142ca:	f240 5174 	movw	r1, #1396	; 0x574
   142ce:	48c4      	ldr	r0, [pc, #784]	; (145e0 <str_modulo_format+0x34c>)
   142d0:	f007 f8d6 	bl	1b480 <__assert_func>

    GET_STR_DATA_LEN(pattern, str, len);
   142d4:	68f8      	ldr	r0, [r7, #12]
   142d6:	f7fd feb9 	bl	1204c <MP_OBJ_IS_QSTR>
   142da:	4603      	mov	r3, r0
   142dc:	2b00      	cmp	r3, #0
   142de:	d00a      	beq.n	142f6 <str_modulo_format+0x62>
   142e0:	68fb      	ldr	r3, [r7, #12]
   142e2:	089b      	lsrs	r3, r3, #2
   142e4:	f107 0254 	add.w	r2, r7, #84	; 0x54
   142e8:	4611      	mov	r1, r2
   142ea:	4618      	mov	r0, r3
   142ec:	f7ec ffba 	bl	1264 <qstr_data>
   142f0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   142f4:	e006      	b.n	14304 <str_modulo_format+0x70>
   142f6:	68fb      	ldr	r3, [r7, #12]
   142f8:	689b      	ldr	r3, [r3, #8]
   142fa:	657b      	str	r3, [r7, #84]	; 0x54
   142fc:	68fb      	ldr	r3, [r7, #12]
   142fe:	68db      	ldr	r3, [r3, #12]
   14300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const byte *start_str = str;
   14304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14308:	66fb      	str	r3, [r7, #108]	; 0x6c
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   1430a:	68f8      	ldr	r0, [r7, #12]
   1430c:	f7fd feb0 	bl	12070 <MP_OBJ_IS_OBJ>
   14310:	4603      	mov	r3, r0
   14312:	2b00      	cmp	r3, #0
   14314:	d006      	beq.n	14324 <str_modulo_format+0x90>
   14316:	68fb      	ldr	r3, [r7, #12]
   14318:	681b      	ldr	r3, [r3, #0]
   1431a:	4ab2      	ldr	r2, [pc, #712]	; (145e4 <str_modulo_format+0x350>)
   1431c:	4293      	cmp	r3, r2
   1431e:	d101      	bne.n	14324 <str_modulo_format+0x90>
   14320:	2301      	movs	r3, #1
   14322:	e000      	b.n	14326 <str_modulo_format+0x92>
   14324:	2300      	movs	r3, #0
   14326:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   1432a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   1432e:	f003 0301 	and.w	r3, r3, #1
   14332:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    size_t arg_i = 0;
   14336:	2300      	movs	r3, #0
   14338:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   1433c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   14340:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14344:	2110      	movs	r1, #16
   14346:	4618      	mov	r0, r3
   14348:	f7ed f851 	bl	13ee <vstr_init_print>

    for (const byte *top = str + len; str < top; str++) {
   1434c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1434e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14352:	4413      	add	r3, r2
   14354:	667b      	str	r3, [r7, #100]	; 0x64
   14356:	e296      	b.n	14886 <str_modulo_format+0x5f2>
        mp_obj_t arg = MP_OBJ_NULL;
   14358:	2300      	movs	r3, #0
   1435a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (*str != '%') {
   1435e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14362:	781b      	ldrb	r3, [r3, #0]
   14364:	2b25      	cmp	r3, #37	; 0x25
   14366:	d009      	beq.n	1437c <str_modulo_format+0xe8>
            vstr_add_byte(&vstr, *str);
   14368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1436c:	781a      	ldrb	r2, [r3, #0]
   1436e:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14372:	4611      	mov	r1, r2
   14374:	4618      	mov	r0, r3
   14376:	f7ed f93f 	bl	15f8 <vstr_add_byte>
            continue;
   1437a:	e27f      	b.n	1487c <str_modulo_format+0x5e8>
        }
        if (++str >= top) {
   1437c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14380:	3301      	adds	r3, #1
   14382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14386:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1438a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1438c:	429a      	cmp	r2, r3
   1438e:	f080 810d 	bcs.w	145ac <str_modulo_format+0x318>
            goto incomplete_format;
        }
        if (*str == '%') {
   14392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14396:	781b      	ldrb	r3, [r3, #0]
   14398:	2b25      	cmp	r3, #37	; 0x25
   1439a:	d106      	bne.n	143aa <str_modulo_format+0x116>
            vstr_add_byte(&vstr, '%');
   1439c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   143a0:	2125      	movs	r1, #37	; 0x25
   143a2:	4618      	mov	r0, r3
   143a4:	f7ed f928 	bl	15f8 <vstr_add_byte>
            continue;
   143a8:	e268      	b.n	1487c <str_modulo_format+0x5e8>
        }

        // Dictionary value lookup
        if (*str == '(') {
   143aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143ae:	781b      	ldrb	r3, [r3, #0]
   143b0:	2b28      	cmp	r3, #40	; 0x28
   143b2:	d136      	bne.n	14422 <str_modulo_format+0x18e>
            if (dict == MP_OBJ_NULL) {
   143b4:	683b      	ldr	r3, [r7, #0]
   143b6:	2b00      	cmp	r3, #0
   143b8:	d102      	bne.n	143c0 <str_modulo_format+0x12c>
                mp_raise_TypeError("format needs a dict");
   143ba:	488b      	ldr	r0, [pc, #556]	; (145e8 <str_modulo_format+0x354>)
   143bc:	f7f8 fd54 	bl	ce68 <mp_raise_TypeError>
            }
            arg_i = 1; // we used up the single dict argument
   143c0:	2301      	movs	r3, #1
   143c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            const byte *key = ++str;
   143c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143ca:	3301      	adds	r3, #1
   143cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   143d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143d4:	663b      	str	r3, [r7, #96]	; 0x60
            while (*str != ')') {
   143d6:	e00b      	b.n	143f0 <str_modulo_format+0x15c>
                if (str >= top) {
   143d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   143dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   143de:	429a      	cmp	r2, r3
   143e0:	d301      	bcc.n	143e6 <str_modulo_format+0x152>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   143e2:	f7ff fa32 	bl	1384a <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError("incomplete format key");
                    }
                }
                ++str;
   143e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143ea:	3301      	adds	r3, #1
   143ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            while (*str != ')') {
   143f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   143f4:	781b      	ldrb	r3, [r3, #0]
   143f6:	2b29      	cmp	r3, #41	; 0x29
   143f8:	d1ee      	bne.n	143d8 <str_modulo_format+0x144>
            }
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   143fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   143fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   14400:	1ad3      	subs	r3, r2, r3
   14402:	4619      	mov	r1, r3
   14404:	6e38      	ldr	r0, [r7, #96]	; 0x60
   14406:	f000 fe7b 	bl	15100 <mp_obj_new_str_via_qstr>
   1440a:	65f8      	str	r0, [r7, #92]	; 0x5c
            arg = mp_obj_dict_get(dict, k_obj);
   1440c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1440e:	6838      	ldr	r0, [r7, #0]
   14410:	f7fa f91e 	bl	e650 <mp_obj_dict_get>
   14414:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            str++;
   14418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1441c:	3301      	adds	r3, #1
   1441e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        int flags = 0;
   14422:	2300      	movs	r3, #0
   14424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        char fill = ' ';
   14428:	2320      	movs	r3, #32
   1442a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        int alt = 0;
   1442e:	2300      	movs	r3, #0
   14430:	67bb      	str	r3, [r7, #120]	; 0x78
        while (str < top) {
   14432:	e03e      	b.n	144b2 <str_modulo_format+0x21e>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   14434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14438:	781b      	ldrb	r3, [r3, #0]
   1443a:	2b2d      	cmp	r3, #45	; 0x2d
   1443c:	d106      	bne.n	1444c <str_modulo_format+0x1b8>
   1443e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14442:	f043 0301 	orr.w	r3, r3, #1
   14446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1444a:	e02d      	b.n	144a8 <str_modulo_format+0x214>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   1444c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14450:	781b      	ldrb	r3, [r3, #0]
   14452:	2b2b      	cmp	r3, #43	; 0x2b
   14454:	d106      	bne.n	14464 <str_modulo_format+0x1d0>
   14456:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1445a:	f043 0302 	orr.w	r3, r3, #2
   1445e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   14462:	e021      	b.n	144a8 <str_modulo_format+0x214>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   14464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14468:	781b      	ldrb	r3, [r3, #0]
   1446a:	2b20      	cmp	r3, #32
   1446c:	d106      	bne.n	1447c <str_modulo_format+0x1e8>
   1446e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14472:	f043 0304 	orr.w	r3, r3, #4
   14476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1447a:	e015      	b.n	144a8 <str_modulo_format+0x214>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   1447c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14480:	781b      	ldrb	r3, [r3, #0]
   14482:	2b23      	cmp	r3, #35	; 0x23
   14484:	d102      	bne.n	1448c <str_modulo_format+0x1f8>
   14486:	2310      	movs	r3, #16
   14488:	67bb      	str	r3, [r7, #120]	; 0x78
   1448a:	e00d      	b.n	144a8 <str_modulo_format+0x214>
            else if (*str == '0') {
   1448c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14490:	781b      	ldrb	r3, [r3, #0]
   14492:	2b30      	cmp	r3, #48	; 0x30
   14494:	d113      	bne.n	144be <str_modulo_format+0x22a>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   14496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1449a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1449e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                fill = '0';
   144a2:	2330      	movs	r3, #48	; 0x30
   144a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            } else break;
            str++;
   144a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   144ac:	3301      	adds	r3, #1
   144ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (str < top) {
   144b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   144b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   144b8:	429a      	cmp	r2, r3
   144ba:	d3bb      	bcc.n	14434 <str_modulo_format+0x1a0>
   144bc:	e000      	b.n	144c0 <str_modulo_format+0x22c>
            } else break;
   144be:	bf00      	nop
        }
        // parse width, if it exists
        int width = 0;
   144c0:	2300      	movs	r3, #0
   144c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if (str < top) {
   144c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   144c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   144ca:	429a      	cmp	r2, r3
   144cc:	d227      	bcs.n	1451e <str_modulo_format+0x28a>
            if (*str == '*') {
   144ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   144d2:	781b      	ldrb	r3, [r3, #0]
   144d4:	2b2a      	cmp	r3, #42	; 0x2a
   144d6:	d118      	bne.n	1450a <str_modulo_format+0x276>
                if (arg_i >= n_args) {
   144d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   144dc:	68bb      	ldr	r3, [r7, #8]
   144de:	429a      	cmp	r2, r3
   144e0:	d271      	bcs.n	145c6 <str_modulo_format+0x332>
                    goto not_enough_args;
                }
                width = mp_obj_get_int(args[arg_i++]);
   144e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   144e6:	1c5a      	adds	r2, r3, #1
   144e8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   144ec:	009b      	lsls	r3, r3, #2
   144ee:	687a      	ldr	r2, [r7, #4]
   144f0:	4413      	add	r3, r2
   144f2:	681b      	ldr	r3, [r3, #0]
   144f4:	4618      	mov	r0, r3
   144f6:	f7f9 fab7 	bl	da68 <mp_obj_get_int>
   144fa:	4603      	mov	r3, r0
   144fc:	63bb      	str	r3, [r7, #56]	; 0x38
                str++;
   144fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14502:	3301      	adds	r3, #1
   14504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14508:	e009      	b.n	1451e <str_modulo_format+0x28a>
            } else {
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   1450a:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1450e:	461a      	mov	r2, r3
   14510:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14512:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   14516:	f7ff f8e2 	bl	136de <str_to_int>
   1451a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            }
        }
        int prec = -1;
   1451e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14522:	637b      	str	r3, [r7, #52]	; 0x34
        if (str < top && *str == '.') {
   14524:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1452a:	429a      	cmp	r2, r3
   1452c:	d238      	bcs.n	145a0 <str_modulo_format+0x30c>
   1452e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14532:	781b      	ldrb	r3, [r3, #0]
   14534:	2b2e      	cmp	r3, #46	; 0x2e
   14536:	d133      	bne.n	145a0 <str_modulo_format+0x30c>
            if (++str < top) {
   14538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1453c:	3301      	adds	r3, #1
   1453e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14542:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14548:	429a      	cmp	r2, r3
   1454a:	d229      	bcs.n	145a0 <str_modulo_format+0x30c>
                if (*str == '*') {
   1454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14550:	781b      	ldrb	r3, [r3, #0]
   14552:	2b2a      	cmp	r3, #42	; 0x2a
   14554:	d118      	bne.n	14588 <str_modulo_format+0x2f4>
                    if (arg_i >= n_args) {
   14556:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1455a:	68bb      	ldr	r3, [r7, #8]
   1455c:	429a      	cmp	r2, r3
   1455e:	d234      	bcs.n	145ca <str_modulo_format+0x336>
                        goto not_enough_args;
                    }
                    prec = mp_obj_get_int(args[arg_i++]);
   14560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14564:	1c5a      	adds	r2, r3, #1
   14566:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1456a:	009b      	lsls	r3, r3, #2
   1456c:	687a      	ldr	r2, [r7, #4]
   1456e:	4413      	add	r3, r2
   14570:	681b      	ldr	r3, [r3, #0]
   14572:	4618      	mov	r0, r3
   14574:	f7f9 fa78 	bl	da68 <mp_obj_get_int>
   14578:	4603      	mov	r3, r0
   1457a:	637b      	str	r3, [r7, #52]	; 0x34
                    str++;
   1457c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14580:	3301      	adds	r3, #1
   14582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14586:	e00b      	b.n	145a0 <str_modulo_format+0x30c>
                } else {
                    prec = 0;
   14588:	2300      	movs	r3, #0
   1458a:	637b      	str	r3, [r7, #52]	; 0x34
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   1458c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   14590:	461a      	mov	r2, r3
   14592:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14594:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   14598:	f7ff f8a1 	bl	136de <str_to_int>
   1459c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                }
            }
        }

        if (str >= top) {
   145a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   145a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   145a6:	429a      	cmp	r2, r3
   145a8:	d303      	bcc.n	145b2 <str_modulo_format+0x31e>
   145aa:	e000      	b.n	145ae <str_modulo_format+0x31a>
            goto incomplete_format;
   145ac:	bf00      	nop
incomplete_format:
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   145ae:	f7ff f94c 	bl	1384a <terse_str_format_value_error>
                mp_raise_ValueError("incomplete format");
            }
        }

        // Tuple value lookup
        if (arg == MP_OBJ_NULL) {
   145b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   145b6:	2b00      	cmp	r3, #0
   145b8:	d125      	bne.n	14606 <str_modulo_format+0x372>
            if (arg_i >= n_args) {
   145ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   145be:	68bb      	ldr	r3, [r7, #8]
   145c0:	429a      	cmp	r2, r3
   145c2:	d315      	bcc.n	145f0 <str_modulo_format+0x35c>
   145c4:	e002      	b.n	145cc <str_modulo_format+0x338>
                    goto not_enough_args;
   145c6:	bf00      	nop
   145c8:	e000      	b.n	145cc <str_modulo_format+0x338>
                        goto not_enough_args;
   145ca:	bf00      	nop
not_enough_args:
                mp_raise_TypeError("format string needs more arguments");
   145cc:	4807      	ldr	r0, [pc, #28]	; (145ec <str_modulo_format+0x358>)
   145ce:	f7f8 fc4b 	bl	ce68 <mp_raise_TypeError>
   145d2:	bf00      	nop
   145d4:	000126f7 	.word	0x000126f7
   145d8:	00023568 	.word	0x00023568
   145dc:	000238a8 	.word	0x000238a8
   145e0:	000232e0 	.word	0x000232e0
   145e4:	000237d8 	.word	0x000237d8
   145e8:	000235f0 	.word	0x000235f0
   145ec:	00023604 	.word	0x00023604
            }
            arg = args[arg_i++];
   145f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   145f4:	1c5a      	adds	r2, r3, #1
   145f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   145fa:	009b      	lsls	r3, r3, #2
   145fc:	687a      	ldr	r2, [r7, #4]
   145fe:	4413      	add	r3, r2
   14600:	681b      	ldr	r3, [r3, #0]
   14602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }
        switch (*str) {
   14606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1460a:	781b      	ldrb	r3, [r3, #0]
   1460c:	3b58      	subs	r3, #88	; 0x58
   1460e:	2b20      	cmp	r3, #32
   14610:	f200 8132 	bhi.w	14878 <str_modulo_format+0x5e4>
   14614:	a201      	add	r2, pc, #4	; (adr r2, 1461c <str_modulo_format+0x388>)
   14616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1461a:	bf00      	nop
   1461c:	00014845 	.word	0x00014845
   14620:	00014879 	.word	0x00014879
   14624:	00014879 	.word	0x00014879
   14628:	00014879 	.word	0x00014879
   1462c:	00014879 	.word	0x00014879
   14630:	00014879 	.word	0x00014879
   14634:	00014879 	.word	0x00014879
   14638:	00014879 	.word	0x00014879
   1463c:	00014879 	.word	0x00014879
   14640:	00014879 	.word	0x00014879
   14644:	00014879 	.word	0x00014879
   14648:	000146a1 	.word	0x000146a1
   1464c:	00014741 	.word	0x00014741
   14650:	00014879 	.word	0x00014879
   14654:	00014879 	.word	0x00014879
   14658:	00014879 	.word	0x00014879
   1465c:	00014879 	.word	0x00014879
   14660:	00014741 	.word	0x00014741
   14664:	00014879 	.word	0x00014879
   14668:	00014879 	.word	0x00014879
   1466c:	00014879 	.word	0x00014879
   14670:	00014879 	.word	0x00014879
   14674:	00014879 	.word	0x00014879
   14678:	0001476d 	.word	0x0001476d
   1467c:	00014879 	.word	0x00014879
   14680:	00014879 	.word	0x00014879
   14684:	000147a5 	.word	0x000147a5
   14688:	000147a5 	.word	0x000147a5
   1468c:	00014879 	.word	0x00014879
   14690:	00014741 	.word	0x00014741
   14694:	00014879 	.word	0x00014879
   14698:	00014879 	.word	0x00014879
   1469c:	00014845 	.word	0x00014845
            case 'c':
                if (MP_OBJ_IS_STR(arg)) {
   146a0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   146a4:	f7fd fcd2 	bl	1204c <MP_OBJ_IS_QSTR>
   146a8:	4603      	mov	r3, r0
   146aa:	2b00      	cmp	r3, #0
   146ac:	d10c      	bne.n	146c8 <str_modulo_format+0x434>
   146ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   146b2:	f7fd fcdd 	bl	12070 <MP_OBJ_IS_OBJ>
   146b6:	4603      	mov	r3, r0
   146b8:	2b00      	cmp	r3, #0
   146ba:	d021      	beq.n	14700 <str_modulo_format+0x46c>
   146bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   146c0:	681b      	ldr	r3, [r3, #0]
   146c2:	4a81      	ldr	r2, [pc, #516]	; (148c8 <str_modulo_format+0x634>)
   146c4:	4293      	cmp	r3, r2
   146c6:	d11b      	bne.n	14700 <str_modulo_format+0x46c>
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   146c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   146cc:	4619      	mov	r1, r3
   146ce:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   146d2:	f000 fee7 	bl	154a4 <mp_obj_str_get_data>
   146d6:	65b8      	str	r0, [r7, #88]	; 0x58
                    if (slen != 1) {
   146d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   146da:	2b01      	cmp	r3, #1
   146dc:	d002      	beq.n	146e4 <str_modulo_format+0x450>
                        mp_raise_TypeError("%%c needs int or char");
   146de:	487b      	ldr	r0, [pc, #492]	; (148cc <str_modulo_format+0x638>)
   146e0:	f7f8 fbc2 	bl	ce68 <mp_raise_TypeError>
                    }
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   146e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   146e6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   146ea:	9301      	str	r3, [sp, #4]
   146ec:	2320      	movs	r3, #32
   146ee:	9300      	str	r3, [sp, #0]
   146f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   146f4:	2201      	movs	r2, #1
   146f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
   146f8:	f7ed f8fc 	bl	18f4 <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   146fc:	bf00      	nop
                    char ch = mp_obj_get_int(arg);
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
                } else {
                    mp_raise_TypeError("integer needed");
                }
                break;
   146fe:	e0bd      	b.n	1487c <str_modulo_format+0x5e8>
                } else if (arg_looks_integer(arg)) {
   14700:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14704:	f7ff f85c 	bl	137c0 <arg_looks_integer>
   14708:	4603      	mov	r3, r0
   1470a:	2b00      	cmp	r3, #0
   1470c:	d015      	beq.n	1473a <str_modulo_format+0x4a6>
                    char ch = mp_obj_get_int(arg);
   1470e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14712:	f7f9 f9a9 	bl	da68 <mp_obj_get_int>
   14716:	4603      	mov	r3, r0
   14718:	b2db      	uxtb	r3, r3
   1471a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   1471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14720:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   14724:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14728:	9301      	str	r3, [sp, #4]
   1472a:	2320      	movs	r3, #32
   1472c:	9300      	str	r3, [sp, #0]
   1472e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14732:	2201      	movs	r2, #1
   14734:	f7ed f8de 	bl	18f4 <mp_print_strn>
                break;
   14738:	e0a0      	b.n	1487c <str_modulo_format+0x5e8>
                    mp_raise_TypeError("integer needed");
   1473a:	4865      	ldr	r0, [pc, #404]	; (148d0 <str_modulo_format+0x63c>)
   1473c:	f7f8 fb94 	bl	ce68 <mp_raise_TypeError>

            case 'd':
            case 'i':
            case 'u':
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   14740:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14744:	f7ff f876 	bl	13834 <arg_as_int>
   14748:	4601      	mov	r1, r0
   1474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1474c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1474e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14752:	9203      	str	r2, [sp, #12]
   14754:	9302      	str	r3, [sp, #8]
   14756:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1475a:	9301      	str	r3, [sp, #4]
   1475c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14760:	9300      	str	r3, [sp, #0]
   14762:	2361      	movs	r3, #97	; 0x61
   14764:	220a      	movs	r2, #10
   14766:	f7ed fa04 	bl	1b72 <mp_print_mp_int>
                break;
   1476a:	e087      	b.n	1487c <str_modulo_format+0x5e8>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
                break;
#endif

            case 'o':
                if (alt) {
   1476c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1476e:	2b00      	cmp	r3, #0
   14770:	d005      	beq.n	1477e <str_modulo_format+0x4ea>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   14772:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14776:	f443 7304 	orr.w	r3, r3, #528	; 0x210
   1477a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   1477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14782:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14786:	9203      	str	r2, [sp, #12]
   14788:	9302      	str	r3, [sp, #8]
   1478a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1478e:	9301      	str	r3, [sp, #4]
   14790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14794:	9300      	str	r3, [sp, #0]
   14796:	2361      	movs	r3, #97	; 0x61
   14798:	2208      	movs	r2, #8
   1479a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   1479e:	f7ed f9e8 	bl	1b72 <mp_print_mp_int>
                break;
   147a2:	e06b      	b.n	1487c <str_modulo_format+0x5e8>
            case 'r':
            case 's':
            {
                vstr_t arg_vstr;
                mp_print_t arg_print;
                vstr_init_print(&arg_vstr, 16, &arg_print);
   147a4:	f107 0214 	add.w	r2, r7, #20
   147a8:	f107 031c 	add.w	r3, r7, #28
   147ac:	2110      	movs	r1, #16
   147ae:	4618      	mov	r0, r3
   147b0:	f7ec fe1d 	bl	13ee <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   147b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147b8:	781b      	ldrb	r3, [r3, #0]
   147ba:	2b72      	cmp	r3, #114	; 0x72
   147bc:	bf0c      	ite	eq
   147be:	2301      	moveq	r3, #1
   147c0:	2300      	movne	r3, #0
   147c2:	b2db      	uxtb	r3, r3
   147c4:	677b      	str	r3, [r7, #116]	; 0x74
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   147c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   147c8:	2b00      	cmp	r3, #0
   147ca:	d112      	bne.n	147f2 <str_modulo_format+0x55e>
   147cc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   147d0:	2b00      	cmp	r3, #0
   147d2:	d00e      	beq.n	147f2 <str_modulo_format+0x55e>
   147d4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   147d8:	f7fd fc4a 	bl	12070 <MP_OBJ_IS_OBJ>
   147dc:	4603      	mov	r3, r0
   147de:	2b00      	cmp	r3, #0
   147e0:	d007      	beq.n	147f2 <str_modulo_format+0x55e>
   147e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   147e6:	681b      	ldr	r3, [r3, #0]
   147e8:	4a3a      	ldr	r2, [pc, #232]	; (148d4 <str_modulo_format+0x640>)
   147ea:	4293      	cmp	r3, r2
   147ec:	d101      	bne.n	147f2 <str_modulo_format+0x55e>
                    // If we have something like b"%s" % b"1", bytes arg should be
                    // printed undecorated.
                    print_kind = PRINT_RAW;
   147ee:	2304      	movs	r3, #4
   147f0:	677b      	str	r3, [r7, #116]	; 0x74
                }
                mp_obj_print_helper(&arg_print, arg, print_kind);
   147f2:	f107 0314 	add.w	r3, r7, #20
   147f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   147f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   147fc:	4618      	mov	r0, r3
   147fe:	f7f8 ff88 	bl	d712 <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   14802:	6a3b      	ldr	r3, [r7, #32]
   14804:	673b      	str	r3, [r7, #112]	; 0x70
                if (prec < 0) {
   14806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14808:	2b00      	cmp	r3, #0
   1480a:	da01      	bge.n	14810 <str_modulo_format+0x57c>
                    prec = vlen;
   1480c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1480e:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (vlen > (uint)prec) {
   14810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14812:	461a      	mov	r2, r3
   14814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14816:	4293      	cmp	r3, r2
   14818:	d901      	bls.n	1481e <str_modulo_format+0x58a>
                    vlen = prec;
   1481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1481c:	673b      	str	r3, [r7, #112]	; 0x70
                }
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   1481e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14822:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14826:	9301      	str	r3, [sp, #4]
   14828:	2320      	movs	r3, #32
   1482a:	9300      	str	r3, [sp, #0]
   1482c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14830:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14832:	f7ed f85f 	bl	18f4 <mp_print_strn>
                vstr_clear(&arg_vstr);
   14836:	f107 031c 	add.w	r3, r7, #28
   1483a:	4618      	mov	r0, r3
   1483c:	f7ec fdee 	bl	141c <vstr_clear>
                break;
   14840:	bf00      	nop
   14842:	e01b      	b.n	1487c <str_modulo_format+0x5e8>
            }

            case 'X':
            case 'x':
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   14844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14848:	781b      	ldrb	r3, [r3, #0]
   1484a:	f1a3 0417 	sub.w	r4, r3, #23
   1484e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14854:	4313      	orrs	r3, r2
   14856:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14858:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1485a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   1485e:	9103      	str	r1, [sp, #12]
   14860:	9202      	str	r2, [sp, #8]
   14862:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
   14866:	9201      	str	r2, [sp, #4]
   14868:	9300      	str	r3, [sp, #0]
   1486a:	4623      	mov	r3, r4
   1486c:	2210      	movs	r2, #16
   1486e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14872:	f7ed f97e 	bl	1b72 <mp_print_mp_int>
                break;
   14876:	e001      	b.n	1487c <str_modulo_format+0x5e8>

            default:
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14878:	f7fe ffe7 	bl	1384a <terse_str_format_value_error>
    for (const byte *top = str + len; str < top; str++) {
   1487c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14880:	3301      	adds	r3, #1
   14882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14886:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1488a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1488c:	429a      	cmp	r2, r3
   1488e:	f4ff ad63 	bcc.w	14358 <str_modulo_format+0xc4>
                        *str, *str, str - start_str));
                }
        }
    }

    if (arg_i != n_args) {
   14892:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14896:	68bb      	ldr	r3, [r7, #8]
   14898:	429a      	cmp	r2, r3
   1489a:	d002      	beq.n	148a2 <str_modulo_format+0x60e>
        mp_raise_TypeError("format string didn't convert all arguments");
   1489c:	480e      	ldr	r0, [pc, #56]	; (148d8 <str_modulo_format+0x644>)
   1489e:	f7f8 fae3 	bl	ce68 <mp_raise_TypeError>
    }

    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   148a2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   148a6:	2b00      	cmp	r3, #0
   148a8:	d001      	beq.n	148ae <str_modulo_format+0x61a>
   148aa:	4b0a      	ldr	r3, [pc, #40]	; (148d4 <str_modulo_format+0x640>)
   148ac:	e000      	b.n	148b0 <str_modulo_format+0x61c>
   148ae:	4b06      	ldr	r3, [pc, #24]	; (148c8 <str_modulo_format+0x634>)
   148b0:	f107 0244 	add.w	r2, r7, #68	; 0x44
   148b4:	4611      	mov	r1, r2
   148b6:	4618      	mov	r0, r3
   148b8:	f000 fc33 	bl	15122 <mp_obj_new_str_from_vstr>
   148bc:	4603      	mov	r3, r0
}
   148be:	4618      	mov	r0, r3
   148c0:	3794      	adds	r7, #148	; 0x94
   148c2:	46bd      	mov	sp, r7
   148c4:	bd90      	pop	{r4, r7, pc}
   148c6:	bf00      	nop
   148c8:	0002379c 	.word	0x0002379c
   148cc:	00023628 	.word	0x00023628
   148d0:	00023640 	.word	0x00023640
   148d4:	000237d8 	.word	0x000237d8
   148d8:	00023650 	.word	0x00023650

000148dc <str_replace>:
#endif

// The implementation is optimized, returning the original string if there's
// nothing to replace.
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
   148dc:	b580      	push	{r7, lr}
   148de:	b096      	sub	sp, #88	; 0x58
   148e0:	af02      	add	r7, sp, #8
   148e2:	6078      	str	r0, [r7, #4]
   148e4:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   148e6:	683b      	ldr	r3, [r7, #0]
   148e8:	681b      	ldr	r3, [r3, #0]
   148ea:	4618      	mov	r0, r3
   148ec:	f7fd fbae 	bl	1204c <MP_OBJ_IS_QSTR>
   148f0:	4603      	mov	r3, r0
   148f2:	2b00      	cmp	r3, #0
   148f4:	d115      	bne.n	14922 <str_replace+0x46>
   148f6:	683b      	ldr	r3, [r7, #0]
   148f8:	681b      	ldr	r3, [r3, #0]
   148fa:	4618      	mov	r0, r3
   148fc:	f7fd fbb8 	bl	12070 <MP_OBJ_IS_OBJ>
   14900:	4603      	mov	r3, r0
   14902:	2b00      	cmp	r3, #0
   14904:	d006      	beq.n	14914 <str_replace+0x38>
   14906:	683b      	ldr	r3, [r7, #0]
   14908:	681b      	ldr	r3, [r3, #0]
   1490a:	681b      	ldr	r3, [r3, #0]
   1490c:	699b      	ldr	r3, [r3, #24]
   1490e:	4aa4      	ldr	r2, [pc, #656]	; (14ba0 <str_replace+0x2c4>)
   14910:	4293      	cmp	r3, r2
   14912:	d006      	beq.n	14922 <str_replace+0x46>
   14914:	4ba3      	ldr	r3, [pc, #652]	; (14ba4 <str_replace+0x2c8>)
   14916:	4aa4      	ldr	r2, [pc, #656]	; (14ba8 <str_replace+0x2cc>)
   14918:	f240 613b 	movw	r1, #1595	; 0x63b
   1491c:	48a3      	ldr	r0, [pc, #652]	; (14bac <str_replace+0x2d0>)
   1491e:	f006 fdaf 	bl	1b480 <__assert_func>

    mp_int_t max_rep = -1;
   14922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14926:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (n_args == 4) {
   14928:	687b      	ldr	r3, [r7, #4]
   1492a:	2b04      	cmp	r3, #4
   1492c:	d112      	bne.n	14954 <str_replace+0x78>
        max_rep = mp_obj_get_int(args[3]);
   1492e:	683b      	ldr	r3, [r7, #0]
   14930:	330c      	adds	r3, #12
   14932:	681b      	ldr	r3, [r3, #0]
   14934:	4618      	mov	r0, r3
   14936:	f7f9 f897 	bl	da68 <mp_obj_get_int>
   1493a:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (max_rep == 0) {
   1493c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1493e:	2b00      	cmp	r3, #0
   14940:	d102      	bne.n	14948 <str_replace+0x6c>
            return args[0];
   14942:	683b      	ldr	r3, [r7, #0]
   14944:	681b      	ldr	r3, [r3, #0]
   14946:	e127      	b.n	14b98 <str_replace+0x2bc>
        } else if (max_rep < 0) {
   14948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1494a:	2b00      	cmp	r3, #0
   1494c:	da02      	bge.n	14954 <str_replace+0x78>
            max_rep = -1;
   1494e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14952:	64fb      	str	r3, [r7, #76]	; 0x4c

    // if max_rep is still -1 by this point we will need to do all possible replacements

    // check argument types

    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14954:	683b      	ldr	r3, [r7, #0]
   14956:	681b      	ldr	r3, [r3, #0]
   14958:	4618      	mov	r0, r3
   1495a:	f7f8 fea9 	bl	d6b0 <mp_obj_get_type>
   1495e:	6278      	str	r0, [r7, #36]	; 0x24

    if (mp_obj_get_type(args[1]) != self_type) {
   14960:	683b      	ldr	r3, [r7, #0]
   14962:	3304      	adds	r3, #4
   14964:	681b      	ldr	r3, [r3, #0]
   14966:	4618      	mov	r0, r3
   14968:	f7f8 fea2 	bl	d6b0 <mp_obj_get_type>
   1496c:	4602      	mov	r2, r0
   1496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14970:	429a      	cmp	r2, r3
   14972:	d005      	beq.n	14980 <str_replace+0xa4>
        bad_implicit_conversion(args[1]);
   14974:	683b      	ldr	r3, [r7, #0]
   14976:	3304      	adds	r3, #4
   14978:	681b      	ldr	r3, [r3, #0]
   1497a:	4618      	mov	r0, r3
   1497c:	f000 fd23 	bl	153c6 <bad_implicit_conversion>
    }

    if (mp_obj_get_type(args[2]) != self_type) {
   14980:	683b      	ldr	r3, [r7, #0]
   14982:	3308      	adds	r3, #8
   14984:	681b      	ldr	r3, [r3, #0]
   14986:	4618      	mov	r0, r3
   14988:	f7f8 fe92 	bl	d6b0 <mp_obj_get_type>
   1498c:	4602      	mov	r2, r0
   1498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14990:	429a      	cmp	r2, r3
   14992:	d005      	beq.n	149a0 <str_replace+0xc4>
        bad_implicit_conversion(args[2]);
   14994:	683b      	ldr	r3, [r7, #0]
   14996:	3308      	adds	r3, #8
   14998:	681b      	ldr	r3, [r3, #0]
   1499a:	4618      	mov	r0, r3
   1499c:	f000 fd13 	bl	153c6 <bad_implicit_conversion>
    }

    // extract string data

    GET_STR_DATA_LEN(args[0], str, str_len);
   149a0:	683b      	ldr	r3, [r7, #0]
   149a2:	681b      	ldr	r3, [r3, #0]
   149a4:	4618      	mov	r0, r3
   149a6:	f7fd fb51 	bl	1204c <MP_OBJ_IS_QSTR>
   149aa:	4603      	mov	r3, r0
   149ac:	2b00      	cmp	r3, #0
   149ae:	d00a      	beq.n	149c6 <str_replace+0xea>
   149b0:	683b      	ldr	r3, [r7, #0]
   149b2:	681b      	ldr	r3, [r3, #0]
   149b4:	089b      	lsrs	r3, r3, #2
   149b6:	f107 0220 	add.w	r2, r7, #32
   149ba:	4611      	mov	r1, r2
   149bc:	4618      	mov	r0, r3
   149be:	f7ec fc51 	bl	1264 <qstr_data>
   149c2:	64b8      	str	r0, [r7, #72]	; 0x48
   149c4:	e007      	b.n	149d6 <str_replace+0xfa>
   149c6:	683b      	ldr	r3, [r7, #0]
   149c8:	681b      	ldr	r3, [r3, #0]
   149ca:	689b      	ldr	r3, [r3, #8]
   149cc:	623b      	str	r3, [r7, #32]
   149ce:	683b      	ldr	r3, [r7, #0]
   149d0:	681b      	ldr	r3, [r3, #0]
   149d2:	68db      	ldr	r3, [r3, #12]
   149d4:	64bb      	str	r3, [r7, #72]	; 0x48
    GET_STR_DATA_LEN(args[1], old, old_len);
   149d6:	683b      	ldr	r3, [r7, #0]
   149d8:	3304      	adds	r3, #4
   149da:	681b      	ldr	r3, [r3, #0]
   149dc:	4618      	mov	r0, r3
   149de:	f7fd fb35 	bl	1204c <MP_OBJ_IS_QSTR>
   149e2:	4603      	mov	r3, r0
   149e4:	2b00      	cmp	r3, #0
   149e6:	d00b      	beq.n	14a00 <str_replace+0x124>
   149e8:	683b      	ldr	r3, [r7, #0]
   149ea:	3304      	adds	r3, #4
   149ec:	681b      	ldr	r3, [r3, #0]
   149ee:	089b      	lsrs	r3, r3, #2
   149f0:	f107 021c 	add.w	r2, r7, #28
   149f4:	4611      	mov	r1, r2
   149f6:	4618      	mov	r0, r3
   149f8:	f7ec fc34 	bl	1264 <qstr_data>
   149fc:	6478      	str	r0, [r7, #68]	; 0x44
   149fe:	e009      	b.n	14a14 <str_replace+0x138>
   14a00:	683b      	ldr	r3, [r7, #0]
   14a02:	3304      	adds	r3, #4
   14a04:	681b      	ldr	r3, [r3, #0]
   14a06:	689b      	ldr	r3, [r3, #8]
   14a08:	61fb      	str	r3, [r7, #28]
   14a0a:	683b      	ldr	r3, [r7, #0]
   14a0c:	3304      	adds	r3, #4
   14a0e:	681b      	ldr	r3, [r3, #0]
   14a10:	68db      	ldr	r3, [r3, #12]
   14a12:	647b      	str	r3, [r7, #68]	; 0x44
    GET_STR_DATA_LEN(args[2], new, new_len);
   14a14:	683b      	ldr	r3, [r7, #0]
   14a16:	3308      	adds	r3, #8
   14a18:	681b      	ldr	r3, [r3, #0]
   14a1a:	4618      	mov	r0, r3
   14a1c:	f7fd fb16 	bl	1204c <MP_OBJ_IS_QSTR>
   14a20:	4603      	mov	r3, r0
   14a22:	2b00      	cmp	r3, #0
   14a24:	d00b      	beq.n	14a3e <str_replace+0x162>
   14a26:	683b      	ldr	r3, [r7, #0]
   14a28:	3308      	adds	r3, #8
   14a2a:	681b      	ldr	r3, [r3, #0]
   14a2c:	089b      	lsrs	r3, r3, #2
   14a2e:	f107 0218 	add.w	r2, r7, #24
   14a32:	4611      	mov	r1, r2
   14a34:	4618      	mov	r0, r3
   14a36:	f7ec fc15 	bl	1264 <qstr_data>
   14a3a:	6438      	str	r0, [r7, #64]	; 0x40
   14a3c:	e009      	b.n	14a52 <str_replace+0x176>
   14a3e:	683b      	ldr	r3, [r7, #0]
   14a40:	3308      	adds	r3, #8
   14a42:	681b      	ldr	r3, [r3, #0]
   14a44:	689b      	ldr	r3, [r3, #8]
   14a46:	61bb      	str	r3, [r7, #24]
   14a48:	683b      	ldr	r3, [r7, #0]
   14a4a:	3308      	adds	r3, #8
   14a4c:	681b      	ldr	r3, [r3, #0]
   14a4e:	68db      	ldr	r3, [r3, #12]
   14a50:	643b      	str	r3, [r7, #64]	; 0x40

    // old won't exist in str if it's longer, so nothing to replace
    if (old_len > str_len) {
   14a52:	69fa      	ldr	r2, [r7, #28]
   14a54:	6a3b      	ldr	r3, [r7, #32]
   14a56:	429a      	cmp	r2, r3
   14a58:	d902      	bls.n	14a60 <str_replace+0x184>
        return args[0];
   14a5a:	683b      	ldr	r3, [r7, #0]
   14a5c:	681b      	ldr	r3, [r3, #0]
   14a5e:	e09b      	b.n	14b98 <str_replace+0x2bc>
    }

    // data for the replaced string
    byte *data = NULL;
   14a60:	2300      	movs	r3, #0
   14a62:	63fb      	str	r3, [r7, #60]	; 0x3c

    // do 2 passes over the string:
    //   first pass computes the required length of the replaced string
    //   second pass does the replacements
    for (;;) {
        size_t replaced_str_index = 0;
   14a64:	2300      	movs	r3, #0
   14a66:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t num_replacements_done = 0;
   14a68:	2300      	movs	r3, #0
   14a6a:	637b      	str	r3, [r7, #52]	; 0x34
        const byte *old_occurrence;
        const byte *offset_ptr = str;
   14a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        size_t str_len_remain = str_len;
   14a70:	6a3b      	ldr	r3, [r7, #32]
   14a72:	62bb      	str	r3, [r7, #40]	; 0x28
        if (old_len == 0) {
   14a74:	69fb      	ldr	r3, [r7, #28]
   14a76:	2b00      	cmp	r3, #0
   14a78:	d147      	bne.n	14b0a <str_replace+0x22e>
            // if old_str is empty, copy new_str to start of replaced string
            // copy the replacement string
            if (data != NULL) {
   14a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14a7c:	2b00      	cmp	r3, #0
   14a7e:	d005      	beq.n	14a8c <str_replace+0x1b0>
                memcpy(data, new, new_len);
   14a80:	69bb      	ldr	r3, [r7, #24]
   14a82:	461a      	mov	r2, r3
   14a84:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14a86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14a88:	f008 f826 	bl	1cad8 <memcpy>
            }
            replaced_str_index += new_len;
   14a8c:	69bb      	ldr	r3, [r7, #24]
   14a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14a90:	4413      	add	r3, r2
   14a92:	63bb      	str	r3, [r7, #56]	; 0x38
            num_replacements_done++;
   14a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14a96:	3301      	adds	r3, #1
   14a98:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14a9a:	e036      	b.n	14b0a <str_replace+0x22e>
            if (old_len == 0) {
   14a9c:	69fb      	ldr	r3, [r7, #28]
   14a9e:	2b00      	cmp	r3, #0
   14aa0:	d102      	bne.n	14aa8 <str_replace+0x1cc>
                old_occurrence += 1;
   14aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14aa4:	3301      	adds	r3, #1
   14aa6:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // copy from just after end of last occurrence of to-be-replaced string to right before start of next occurrence
            if (data != NULL) {
   14aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14aaa:	2b00      	cmp	r3, #0
   14aac:	d009      	beq.n	14ac2 <str_replace+0x1e6>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
   14aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14ab2:	18d0      	adds	r0, r2, r3
   14ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14ab8:	1ad3      	subs	r3, r2, r3
   14aba:	461a      	mov	r2, r3
   14abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14abe:	f008 f80b 	bl	1cad8 <memcpy>
            }
            replaced_str_index += old_occurrence - offset_ptr;
   14ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14ac6:	1ad3      	subs	r3, r2, r3
   14ac8:	461a      	mov	r2, r3
   14aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14acc:	4413      	add	r3, r2
   14ace:	63bb      	str	r3, [r7, #56]	; 0x38
            // copy the replacement string
            if (data != NULL) {
   14ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14ad2:	2b00      	cmp	r3, #0
   14ad4:	d007      	beq.n	14ae6 <str_replace+0x20a>
                memcpy(data + replaced_str_index, new, new_len);
   14ad6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14ada:	4413      	add	r3, r2
   14adc:	69ba      	ldr	r2, [r7, #24]
   14ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14ae0:	4618      	mov	r0, r3
   14ae2:	f007 fff9 	bl	1cad8 <memcpy>
            }
            replaced_str_index += new_len;
   14ae6:	69bb      	ldr	r3, [r7, #24]
   14ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14aea:	4413      	add	r3, r2
   14aec:	63bb      	str	r3, [r7, #56]	; 0x38
            offset_ptr = old_occurrence + old_len;
   14aee:	69fb      	ldr	r3, [r7, #28]
   14af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14af2:	4413      	add	r3, r2
   14af4:	62fb      	str	r3, [r7, #44]	; 0x2c
            str_len_remain = str + str_len - offset_ptr;
   14af6:	6a3b      	ldr	r3, [r7, #32]
   14af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14afa:	4413      	add	r3, r2
   14afc:	461a      	mov	r2, r3
   14afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14b00:	1ad3      	subs	r3, r2, r3
   14b02:	62bb      	str	r3, [r7, #40]	; 0x28
            num_replacements_done++;
   14b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b06:	3301      	adds	r3, #1
   14b08:	637b      	str	r3, [r7, #52]	; 0x34
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14b0e:	429a      	cmp	r2, r3
   14b10:	d00f      	beq.n	14b32 <str_replace+0x256>
   14b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14b14:	2b00      	cmp	r3, #0
   14b16:	d00c      	beq.n	14b32 <str_replace+0x256>
   14b18:	69fa      	ldr	r2, [r7, #28]
   14b1a:	2301      	movs	r3, #1
   14b1c:	9300      	str	r3, [sp, #0]
   14b1e:	4613      	mov	r3, r2
   14b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14b26:	f7fd fdad 	bl	12684 <find_subbytes>
   14b2a:	6338      	str	r0, [r7, #48]	; 0x30
   14b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14b2e:	2b00      	cmp	r3, #0
   14b30:	d1b4      	bne.n	14a9c <str_replace+0x1c0>
        }

        // copy from just after end of last occurrence of to-be-replaced string to end of old string
        if (data != NULL) {
   14b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b34:	2b00      	cmp	r3, #0
   14b36:	d007      	beq.n	14b48 <str_replace+0x26c>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
   14b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b3c:	4413      	add	r3, r2
   14b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14b42:	4618      	mov	r0, r3
   14b44:	f007 ffc8 	bl	1cad8 <memcpy>
        }
        replaced_str_index += str_len_remain;
   14b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14b4c:	4413      	add	r3, r2
   14b4e:	63bb      	str	r3, [r7, #56]	; 0x38

        if (data == NULL) {
   14b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b52:	2b00      	cmp	r3, #0
   14b54:	d118      	bne.n	14b88 <str_replace+0x2ac>
            // first pass
            if (num_replacements_done == 0) {
   14b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b58:	2b00      	cmp	r3, #0
   14b5a:	d102      	bne.n	14b62 <str_replace+0x286>
                // no substr found, return original string
                return args[0];
   14b5c:	683b      	ldr	r3, [r7, #0]
   14b5e:	681b      	ldr	r3, [r3, #0]
   14b60:	e01a      	b.n	14b98 <str_replace+0x2bc>
            } else {
                // substr found, allocate new string
                vstr_init_len(&vstr, replaced_str_index);
   14b62:	f107 0308 	add.w	r3, r7, #8
   14b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   14b68:	4618      	mov	r0, r3
   14b6a:	f7ec fc14 	bl	1396 <vstr_init_len>
                data = (byte*)vstr.buf;
   14b6e:	693b      	ldr	r3, [r7, #16]
   14b70:	63fb      	str	r3, [r7, #60]	; 0x3c
                assert(data != NULL);
   14b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b74:	2b00      	cmp	r3, #0
   14b76:	f47f af75 	bne.w	14a64 <str_replace+0x188>
   14b7a:	4b0d      	ldr	r3, [pc, #52]	; (14bb0 <str_replace+0x2d4>)
   14b7c:	4a0a      	ldr	r2, [pc, #40]	; (14ba8 <str_replace+0x2cc>)
   14b7e:	f44f 61d3 	mov.w	r1, #1688	; 0x698
   14b82:	480a      	ldr	r0, [pc, #40]	; (14bac <str_replace+0x2d0>)
   14b84:	f006 fc7c 	bl	1b480 <__assert_func>
            }
        } else {
            // second pass, we are done
            break;
   14b88:	bf00      	nop
        }
    }

    return mp_obj_new_str_from_vstr(self_type, &vstr);
   14b8a:	f107 0308 	add.w	r3, r7, #8
   14b8e:	4619      	mov	r1, r3
   14b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14b92:	f000 fac6 	bl	15122 <mp_obj_new_str_from_vstr>
   14b96:	4603      	mov	r3, r0
}
   14b98:	4618      	mov	r0, r3
   14b9a:	3750      	adds	r7, #80	; 0x50
   14b9c:	46bd      	mov	sp, r7
   14b9e:	bd80      	pop	{r7, pc}
   14ba0:	000126f7 	.word	0x000126f7
   14ba4:	0002337c 	.word	0x0002337c
   14ba8:	000238bc 	.word	0x000238bc
   14bac:	000232e0 	.word	0x000232e0
   14bb0:	0002367c 	.word	0x0002367c

00014bb4 <str_count>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_replace_obj, 3, 4, str_replace);

#if MICROPY_PY_BUILTINS_STR_COUNT
STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
   14bb4:	b580      	push	{r7, lr}
   14bb6:	b08e      	sub	sp, #56	; 0x38
   14bb8:	af02      	add	r7, sp, #8
   14bba:	6078      	str	r0, [r7, #4]
   14bbc:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14bbe:	683b      	ldr	r3, [r7, #0]
   14bc0:	681b      	ldr	r3, [r3, #0]
   14bc2:	4618      	mov	r0, r3
   14bc4:	f7f8 fd74 	bl	d6b0 <mp_obj_get_type>
   14bc8:	6178      	str	r0, [r7, #20]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14bca:	683b      	ldr	r3, [r7, #0]
   14bcc:	681b      	ldr	r3, [r3, #0]
   14bce:	4618      	mov	r0, r3
   14bd0:	f7fd fa3c 	bl	1204c <MP_OBJ_IS_QSTR>
   14bd4:	4603      	mov	r3, r0
   14bd6:	2b00      	cmp	r3, #0
   14bd8:	d115      	bne.n	14c06 <str_count+0x52>
   14bda:	683b      	ldr	r3, [r7, #0]
   14bdc:	681b      	ldr	r3, [r3, #0]
   14bde:	4618      	mov	r0, r3
   14be0:	f7fd fa46 	bl	12070 <MP_OBJ_IS_OBJ>
   14be4:	4603      	mov	r3, r0
   14be6:	2b00      	cmp	r3, #0
   14be8:	d006      	beq.n	14bf8 <str_count+0x44>
   14bea:	683b      	ldr	r3, [r7, #0]
   14bec:	681b      	ldr	r3, [r3, #0]
   14bee:	681b      	ldr	r3, [r3, #0]
   14bf0:	699b      	ldr	r3, [r3, #24]
   14bf2:	4a5e      	ldr	r2, [pc, #376]	; (14d6c <str_count+0x1b8>)
   14bf4:	4293      	cmp	r3, r2
   14bf6:	d006      	beq.n	14c06 <str_count+0x52>
   14bf8:	4b5d      	ldr	r3, [pc, #372]	; (14d70 <str_count+0x1bc>)
   14bfa:	4a5e      	ldr	r2, [pc, #376]	; (14d74 <str_count+0x1c0>)
   14bfc:	f240 61a7 	movw	r1, #1703	; 0x6a7
   14c00:	485d      	ldr	r0, [pc, #372]	; (14d78 <str_count+0x1c4>)
   14c02:	f006 fc3d 	bl	1b480 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   14c06:	683b      	ldr	r3, [r7, #0]
   14c08:	3304      	adds	r3, #4
   14c0a:	681b      	ldr	r3, [r3, #0]
   14c0c:	4618      	mov	r0, r3
   14c0e:	f7f8 fd4f 	bl	d6b0 <mp_obj_get_type>
   14c12:	4602      	mov	r2, r0
   14c14:	697b      	ldr	r3, [r7, #20]
   14c16:	429a      	cmp	r2, r3
   14c18:	d005      	beq.n	14c26 <str_count+0x72>
        bad_implicit_conversion(args[1]);
   14c1a:	683b      	ldr	r3, [r7, #0]
   14c1c:	3304      	adds	r3, #4
   14c1e:	681b      	ldr	r3, [r3, #0]
   14c20:	4618      	mov	r0, r3
   14c22:	f000 fbd0 	bl	153c6 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   14c26:	683b      	ldr	r3, [r7, #0]
   14c28:	681b      	ldr	r3, [r3, #0]
   14c2a:	4618      	mov	r0, r3
   14c2c:	f7fd fa0e 	bl	1204c <MP_OBJ_IS_QSTR>
   14c30:	4603      	mov	r3, r0
   14c32:	2b00      	cmp	r3, #0
   14c34:	d00a      	beq.n	14c4c <str_count+0x98>
   14c36:	683b      	ldr	r3, [r7, #0]
   14c38:	681b      	ldr	r3, [r3, #0]
   14c3a:	089b      	lsrs	r3, r3, #2
   14c3c:	f107 0210 	add.w	r2, r7, #16
   14c40:	4611      	mov	r1, r2
   14c42:	4618      	mov	r0, r3
   14c44:	f7ec fb0e 	bl	1264 <qstr_data>
   14c48:	62f8      	str	r0, [r7, #44]	; 0x2c
   14c4a:	e007      	b.n	14c5c <str_count+0xa8>
   14c4c:	683b      	ldr	r3, [r7, #0]
   14c4e:	681b      	ldr	r3, [r3, #0]
   14c50:	689b      	ldr	r3, [r3, #8]
   14c52:	613b      	str	r3, [r7, #16]
   14c54:	683b      	ldr	r3, [r7, #0]
   14c56:	681b      	ldr	r3, [r3, #0]
   14c58:	68db      	ldr	r3, [r3, #12]
   14c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   14c5c:	683b      	ldr	r3, [r7, #0]
   14c5e:	3304      	adds	r3, #4
   14c60:	681b      	ldr	r3, [r3, #0]
   14c62:	4618      	mov	r0, r3
   14c64:	f7fd f9f2 	bl	1204c <MP_OBJ_IS_QSTR>
   14c68:	4603      	mov	r3, r0
   14c6a:	2b00      	cmp	r3, #0
   14c6c:	d00b      	beq.n	14c86 <str_count+0xd2>
   14c6e:	683b      	ldr	r3, [r7, #0]
   14c70:	3304      	adds	r3, #4
   14c72:	681b      	ldr	r3, [r3, #0]
   14c74:	089b      	lsrs	r3, r3, #2
   14c76:	f107 020c 	add.w	r2, r7, #12
   14c7a:	4611      	mov	r1, r2
   14c7c:	4618      	mov	r0, r3
   14c7e:	f7ec faf1 	bl	1264 <qstr_data>
   14c82:	62b8      	str	r0, [r7, #40]	; 0x28
   14c84:	e009      	b.n	14c9a <str_count+0xe6>
   14c86:	683b      	ldr	r3, [r7, #0]
   14c88:	3304      	adds	r3, #4
   14c8a:	681b      	ldr	r3, [r3, #0]
   14c8c:	689b      	ldr	r3, [r3, #8]
   14c8e:	60fb      	str	r3, [r7, #12]
   14c90:	683b      	ldr	r3, [r7, #0]
   14c92:	3304      	adds	r3, #4
   14c94:	681b      	ldr	r3, [r3, #0]
   14c96:	68db      	ldr	r3, [r3, #12]
   14c98:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   14c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c9c:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   14c9e:	693b      	ldr	r3, [r7, #16]
   14ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14ca2:	4413      	add	r3, r2
   14ca4:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   14ca6:	687b      	ldr	r3, [r7, #4]
   14ca8:	2b02      	cmp	r3, #2
   14caa:	d911      	bls.n	14cd0 <str_count+0x11c>
   14cac:	683b      	ldr	r3, [r7, #0]
   14cae:	3308      	adds	r3, #8
   14cb0:	681b      	ldr	r3, [r3, #0]
   14cb2:	4a32      	ldr	r2, [pc, #200]	; (14d7c <str_count+0x1c8>)
   14cb4:	4293      	cmp	r3, r2
   14cb6:	d00b      	beq.n	14cd0 <str_count+0x11c>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   14cb8:	693a      	ldr	r2, [r7, #16]
   14cba:	683b      	ldr	r3, [r7, #0]
   14cbc:	3308      	adds	r3, #8
   14cbe:	6819      	ldr	r1, [r3, #0]
   14cc0:	2301      	movs	r3, #1
   14cc2:	9300      	str	r3, [sp, #0]
   14cc4:	460b      	mov	r3, r1
   14cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14cc8:	6978      	ldr	r0, [r7, #20]
   14cca:	f7fd fe91 	bl	129f0 <str_index_to_ptr>
   14cce:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   14cd0:	687b      	ldr	r3, [r7, #4]
   14cd2:	2b03      	cmp	r3, #3
   14cd4:	d911      	bls.n	14cfa <str_count+0x146>
   14cd6:	683b      	ldr	r3, [r7, #0]
   14cd8:	330c      	adds	r3, #12
   14cda:	681b      	ldr	r3, [r3, #0]
   14cdc:	4a27      	ldr	r2, [pc, #156]	; (14d7c <str_count+0x1c8>)
   14cde:	4293      	cmp	r3, r2
   14ce0:	d00b      	beq.n	14cfa <str_count+0x146>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   14ce2:	693a      	ldr	r2, [r7, #16]
   14ce4:	683b      	ldr	r3, [r7, #0]
   14ce6:	330c      	adds	r3, #12
   14ce8:	6819      	ldr	r1, [r3, #0]
   14cea:	2301      	movs	r3, #1
   14cec:	9300      	str	r3, [sp, #0]
   14cee:	460b      	mov	r3, r1
   14cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14cf2:	6978      	ldr	r0, [r7, #20]
   14cf4:	f7fd fe7c 	bl	129f0 <str_index_to_ptr>
   14cf8:	6238      	str	r0, [r7, #32]
    }

    // if needle_len is zero then we count each gap between characters as an occurrence
    if (needle_len == 0) {
   14cfa:	68fb      	ldr	r3, [r7, #12]
   14cfc:	2b00      	cmp	r3, #0
   14cfe:	d10c      	bne.n	14d1a <str_count+0x166>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
   14d00:	6a3a      	ldr	r2, [r7, #32]
   14d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14d04:	1ad3      	subs	r3, r2, r3
   14d06:	4619      	mov	r1, r3
   14d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14d0a:	f7fd f981 	bl	12010 <utf8_charlen>
   14d0e:	4603      	mov	r3, r0
   14d10:	3301      	adds	r3, #1
   14d12:	005b      	lsls	r3, r3, #1
   14d14:	f043 0301 	orr.w	r3, r3, #1
   14d18:	e023      	b.n	14d62 <str_count+0x1ae>
    }

    // count the occurrences
    mp_int_t num_occurrences = 0;
   14d1a:	2300      	movs	r3, #0
   14d1c:	61fb      	str	r3, [r7, #28]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14d20:	61bb      	str	r3, [r7, #24]
   14d22:	e014      	b.n	14d4e <str_count+0x19a>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
   14d24:	68fb      	ldr	r3, [r7, #12]
   14d26:	461a      	mov	r2, r3
   14d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14d2a:	69b8      	ldr	r0, [r7, #24]
   14d2c:	f007 ffb9 	bl	1cca2 <memcmp>
   14d30:	4603      	mov	r3, r0
   14d32:	2b00      	cmp	r3, #0
   14d34:	d107      	bne.n	14d46 <str_count+0x192>
            num_occurrences++;
   14d36:	69fb      	ldr	r3, [r7, #28]
   14d38:	3301      	adds	r3, #1
   14d3a:	61fb      	str	r3, [r7, #28]
            haystack_ptr += needle_len;
   14d3c:	68fb      	ldr	r3, [r7, #12]
   14d3e:	69ba      	ldr	r2, [r7, #24]
   14d40:	4413      	add	r3, r2
   14d42:	61bb      	str	r3, [r7, #24]
   14d44:	e003      	b.n	14d4e <str_count+0x19a>
        } else {
            haystack_ptr = utf8_next_char(haystack_ptr);
   14d46:	69b8      	ldr	r0, [r7, #24]
   14d48:	f7fd f956 	bl	11ff8 <utf8_next_char>
   14d4c:	61b8      	str	r0, [r7, #24]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14d4e:	68fb      	ldr	r3, [r7, #12]
   14d50:	69ba      	ldr	r2, [r7, #24]
   14d52:	441a      	add	r2, r3
   14d54:	6a3b      	ldr	r3, [r7, #32]
   14d56:	429a      	cmp	r2, r3
   14d58:	d9e4      	bls.n	14d24 <str_count+0x170>
        }
    }

    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
   14d5a:	69fb      	ldr	r3, [r7, #28]
   14d5c:	005b      	lsls	r3, r3, #1
   14d5e:	f043 0301 	orr.w	r3, r3, #1
}
   14d62:	4618      	mov	r0, r3
   14d64:	3730      	adds	r7, #48	; 0x30
   14d66:	46bd      	mov	sp, r7
   14d68:	bd80      	pop	{r7, pc}
   14d6a:	bf00      	nop
   14d6c:	000126f7 	.word	0x000126f7
   14d70:	0002337c 	.word	0x0002337c
   14d74:	000238c8 	.word	0x000238c8
   14d78:	000232e0 	.word	0x000232e0
   14d7c:	00023108 	.word	0x00023108

00014d80 <str_caseconv>:
}
MP_DEFINE_CONST_FUN_OBJ_2(str_rpartition_obj, str_rpartition);
#endif

// Supposedly not too critical operations, so optimize for code size
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
   14d80:	b590      	push	{r4, r7, lr}
   14d82:	b08b      	sub	sp, #44	; 0x2c
   14d84:	af00      	add	r7, sp, #0
   14d86:	6078      	str	r0, [r7, #4]
   14d88:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   14d8a:	6838      	ldr	r0, [r7, #0]
   14d8c:	f7fd f95e 	bl	1204c <MP_OBJ_IS_QSTR>
   14d90:	4603      	mov	r3, r0
   14d92:	2b00      	cmp	r3, #0
   14d94:	d009      	beq.n	14daa <str_caseconv+0x2a>
   14d96:	683b      	ldr	r3, [r7, #0]
   14d98:	089b      	lsrs	r3, r3, #2
   14d9a:	f107 0218 	add.w	r2, r7, #24
   14d9e:	4611      	mov	r1, r2
   14da0:	4618      	mov	r0, r3
   14da2:	f7ec fa5f 	bl	1264 <qstr_data>
   14da6:	6278      	str	r0, [r7, #36]	; 0x24
   14da8:	e005      	b.n	14db6 <str_caseconv+0x36>
   14daa:	683b      	ldr	r3, [r7, #0]
   14dac:	689b      	ldr	r3, [r3, #8]
   14dae:	61bb      	str	r3, [r7, #24]
   14db0:	683b      	ldr	r3, [r7, #0]
   14db2:	68db      	ldr	r3, [r3, #12]
   14db4:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr;
    vstr_init_len(&vstr, self_len);
   14db6:	69ba      	ldr	r2, [r7, #24]
   14db8:	f107 0308 	add.w	r3, r7, #8
   14dbc:	4611      	mov	r1, r2
   14dbe:	4618      	mov	r0, r3
   14dc0:	f7ec fae9 	bl	1396 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   14dc4:	693b      	ldr	r3, [r7, #16]
   14dc6:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < self_len; i++) {
   14dc8:	2300      	movs	r3, #0
   14dca:	61fb      	str	r3, [r7, #28]
   14dcc:	e010      	b.n	14df0 <str_caseconv+0x70>
        *data++ = op(*self_data++);
   14dce:	6a3c      	ldr	r4, [r7, #32]
   14dd0:	1c63      	adds	r3, r4, #1
   14dd2:	623b      	str	r3, [r7, #32]
   14dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14dd6:	1c5a      	adds	r2, r3, #1
   14dd8:	627a      	str	r2, [r7, #36]	; 0x24
   14dda:	781b      	ldrb	r3, [r3, #0]
   14ddc:	461a      	mov	r2, r3
   14dde:	687b      	ldr	r3, [r7, #4]
   14de0:	4610      	mov	r0, r2
   14de2:	4798      	blx	r3
   14de4:	4603      	mov	r3, r0
   14de6:	b2db      	uxtb	r3, r3
   14de8:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < self_len; i++) {
   14dea:	69fb      	ldr	r3, [r7, #28]
   14dec:	3301      	adds	r3, #1
   14dee:	61fb      	str	r3, [r7, #28]
   14df0:	69bb      	ldr	r3, [r7, #24]
   14df2:	69fa      	ldr	r2, [r7, #28]
   14df4:	429a      	cmp	r2, r3
   14df6:	d3ea      	bcc.n	14dce <str_caseconv+0x4e>
    }
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
   14df8:	6838      	ldr	r0, [r7, #0]
   14dfa:	f7f8 fc59 	bl	d6b0 <mp_obj_get_type>
   14dfe:	4602      	mov	r2, r0
   14e00:	f107 0308 	add.w	r3, r7, #8
   14e04:	4619      	mov	r1, r3
   14e06:	4610      	mov	r0, r2
   14e08:	f000 f98b 	bl	15122 <mp_obj_new_str_from_vstr>
   14e0c:	4603      	mov	r3, r0
}
   14e0e:	4618      	mov	r0, r3
   14e10:	372c      	adds	r7, #44	; 0x2c
   14e12:	46bd      	mov	sp, r7
   14e14:	bd90      	pop	{r4, r7, pc}

00014e16 <str_lower>:

STATIC mp_obj_t str_lower(mp_obj_t self_in) {
   14e16:	b580      	push	{r7, lr}
   14e18:	b082      	sub	sp, #8
   14e1a:	af00      	add	r7, sp, #0
   14e1c:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_tolower, self_in);
   14e1e:	6879      	ldr	r1, [r7, #4]
   14e20:	4803      	ldr	r0, [pc, #12]	; (14e30 <str_lower+0x1a>)
   14e22:	f7ff ffad 	bl	14d80 <str_caseconv>
   14e26:	4603      	mov	r3, r0
}
   14e28:	4618      	mov	r0, r3
   14e2a:	3708      	adds	r7, #8
   14e2c:	46bd      	mov	sp, r7
   14e2e:	bd80      	pop	{r7, pc}
   14e30:	0000256d 	.word	0x0000256d

00014e34 <str_upper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_lower_obj, str_lower);

STATIC mp_obj_t str_upper(mp_obj_t self_in) {
   14e34:	b580      	push	{r7, lr}
   14e36:	b082      	sub	sp, #8
   14e38:	af00      	add	r7, sp, #0
   14e3a:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_toupper, self_in);
   14e3c:	6879      	ldr	r1, [r7, #4]
   14e3e:	4804      	ldr	r0, [pc, #16]	; (14e50 <str_upper+0x1c>)
   14e40:	f7ff ff9e 	bl	14d80 <str_caseconv>
   14e44:	4603      	mov	r3, r0
}
   14e46:	4618      	mov	r0, r3
   14e48:	3708      	adds	r7, #8
   14e4a:	46bd      	mov	sp, r7
   14e4c:	bd80      	pop	{r7, pc}
   14e4e:	bf00      	nop
   14e50:	00002591 	.word	0x00002591

00014e54 <str_uni_istype>:
MP_DEFINE_CONST_FUN_OBJ_1(str_upper_obj, str_upper);

STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
   14e54:	b580      	push	{r7, lr}
   14e56:	b088      	sub	sp, #32
   14e58:	af00      	add	r7, sp, #0
   14e5a:	6078      	str	r0, [r7, #4]
   14e5c:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   14e5e:	6838      	ldr	r0, [r7, #0]
   14e60:	f7fd f8f4 	bl	1204c <MP_OBJ_IS_QSTR>
   14e64:	4603      	mov	r3, r0
   14e66:	2b00      	cmp	r3, #0
   14e68:	d009      	beq.n	14e7e <str_uni_istype+0x2a>
   14e6a:	683b      	ldr	r3, [r7, #0]
   14e6c:	089b      	lsrs	r3, r3, #2
   14e6e:	f107 020c 	add.w	r2, r7, #12
   14e72:	4611      	mov	r1, r2
   14e74:	4618      	mov	r0, r3
   14e76:	f7ec f9f5 	bl	1264 <qstr_data>
   14e7a:	61f8      	str	r0, [r7, #28]
   14e7c:	e005      	b.n	14e8a <str_uni_istype+0x36>
   14e7e:	683b      	ldr	r3, [r7, #0]
   14e80:	689b      	ldr	r3, [r3, #8]
   14e82:	60fb      	str	r3, [r7, #12]
   14e84:	683b      	ldr	r3, [r7, #0]
   14e86:	68db      	ldr	r3, [r3, #12]
   14e88:	61fb      	str	r3, [r7, #28]

    if (self_len == 0) {
   14e8a:	68fb      	ldr	r3, [r7, #12]
   14e8c:	2b00      	cmp	r3, #0
   14e8e:	d101      	bne.n	14e94 <str_uni_istype+0x40>
        return mp_const_false; // default to False for empty str
   14e90:	4b2c      	ldr	r3, [pc, #176]	; (14f44 <str_uni_istype+0xf0>)
   14e92:	e052      	b.n	14f3a <str_uni_istype+0xe6>
    }

    if (f != unichar_isupper && f != unichar_islower) {
   14e94:	687b      	ldr	r3, [r7, #4]
   14e96:	4a2c      	ldr	r2, [pc, #176]	; (14f48 <str_uni_istype+0xf4>)
   14e98:	4293      	cmp	r3, r2
   14e9a:	d01e      	beq.n	14eda <str_uni_istype+0x86>
   14e9c:	687b      	ldr	r3, [r7, #4]
   14e9e:	4a2b      	ldr	r2, [pc, #172]	; (14f4c <str_uni_istype+0xf8>)
   14ea0:	4293      	cmp	r3, r2
   14ea2:	d01a      	beq.n	14eda <str_uni_istype+0x86>
        for (size_t i = 0; i < self_len; i++) {
   14ea4:	2300      	movs	r3, #0
   14ea6:	61bb      	str	r3, [r7, #24]
   14ea8:	e012      	b.n	14ed0 <str_uni_istype+0x7c>
            if (!f(*self_data++)) {
   14eaa:	69fb      	ldr	r3, [r7, #28]
   14eac:	1c5a      	adds	r2, r3, #1
   14eae:	61fa      	str	r2, [r7, #28]
   14eb0:	781b      	ldrb	r3, [r3, #0]
   14eb2:	461a      	mov	r2, r3
   14eb4:	687b      	ldr	r3, [r7, #4]
   14eb6:	4610      	mov	r0, r2
   14eb8:	4798      	blx	r3
   14eba:	4603      	mov	r3, r0
   14ebc:	f083 0301 	eor.w	r3, r3, #1
   14ec0:	b2db      	uxtb	r3, r3
   14ec2:	2b00      	cmp	r3, #0
   14ec4:	d001      	beq.n	14eca <str_uni_istype+0x76>
                return mp_const_false;
   14ec6:	4b1f      	ldr	r3, [pc, #124]	; (14f44 <str_uni_istype+0xf0>)
   14ec8:	e037      	b.n	14f3a <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) {
   14eca:	69bb      	ldr	r3, [r7, #24]
   14ecc:	3301      	adds	r3, #1
   14ece:	61bb      	str	r3, [r7, #24]
   14ed0:	68fb      	ldr	r3, [r7, #12]
   14ed2:	69ba      	ldr	r2, [r7, #24]
   14ed4:	429a      	cmp	r2, r3
   14ed6:	d3e8      	bcc.n	14eaa <str_uni_istype+0x56>
   14ed8:	e02e      	b.n	14f38 <str_uni_istype+0xe4>
            }
        }
    } else {
        bool contains_alpha = false;
   14eda:	2300      	movs	r3, #0
   14edc:	75fb      	strb	r3, [r7, #23]

        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   14ede:	2300      	movs	r3, #0
   14ee0:	613b      	str	r3, [r7, #16]
   14ee2:	e01d      	b.n	14f20 <str_uni_istype+0xcc>
            if (unichar_isalpha(*self_data++)) {
   14ee4:	69fb      	ldr	r3, [r7, #28]
   14ee6:	1c5a      	adds	r2, r3, #1
   14ee8:	61fa      	str	r2, [r7, #28]
   14eea:	781b      	ldrb	r3, [r3, #0]
   14eec:	4618      	mov	r0, r3
   14eee:	f7ed fa87 	bl	2400 <unichar_isalpha>
   14ef2:	4603      	mov	r3, r0
   14ef4:	2b00      	cmp	r3, #0
   14ef6:	d010      	beq.n	14f1a <str_uni_istype+0xc6>
                contains_alpha = true;
   14ef8:	2301      	movs	r3, #1
   14efa:	75fb      	strb	r3, [r7, #23]
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
   14efc:	69fb      	ldr	r3, [r7, #28]
   14efe:	3b01      	subs	r3, #1
   14f00:	781b      	ldrb	r3, [r3, #0]
   14f02:	461a      	mov	r2, r3
   14f04:	687b      	ldr	r3, [r7, #4]
   14f06:	4610      	mov	r0, r2
   14f08:	4798      	blx	r3
   14f0a:	4603      	mov	r3, r0
   14f0c:	f083 0301 	eor.w	r3, r3, #1
   14f10:	b2db      	uxtb	r3, r3
   14f12:	2b00      	cmp	r3, #0
   14f14:	d001      	beq.n	14f1a <str_uni_istype+0xc6>
                    return mp_const_false;
   14f16:	4b0b      	ldr	r3, [pc, #44]	; (14f44 <str_uni_istype+0xf0>)
   14f18:	e00f      	b.n	14f3a <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   14f1a:	693b      	ldr	r3, [r7, #16]
   14f1c:	3301      	adds	r3, #1
   14f1e:	613b      	str	r3, [r7, #16]
   14f20:	68fb      	ldr	r3, [r7, #12]
   14f22:	693a      	ldr	r2, [r7, #16]
   14f24:	429a      	cmp	r2, r3
   14f26:	d3dd      	bcc.n	14ee4 <str_uni_istype+0x90>
                }
            }
        }

        if (!contains_alpha) {
   14f28:	7dfb      	ldrb	r3, [r7, #23]
   14f2a:	f083 0301 	eor.w	r3, r3, #1
   14f2e:	b2db      	uxtb	r3, r3
   14f30:	2b00      	cmp	r3, #0
   14f32:	d001      	beq.n	14f38 <str_uni_istype+0xe4>
            return mp_const_false;
   14f34:	4b03      	ldr	r3, [pc, #12]	; (14f44 <str_uni_istype+0xf0>)
   14f36:	e000      	b.n	14f3a <str_uni_istype+0xe6>
        }
    }

    return mp_const_true;
   14f38:	4b05      	ldr	r3, [pc, #20]	; (14f50 <str_uni_istype+0xfc>)
}
   14f3a:	4618      	mov	r0, r3
   14f3c:	3720      	adds	r7, #32
   14f3e:	46bd      	mov	sp, r7
   14f40:	bd80      	pop	{r7, pc}
   14f42:	bf00      	nop
   14f44:	00021894 	.word	0x00021894
   14f48:	000024f5 	.word	0x000024f5
   14f4c:	00002531 	.word	0x00002531
   14f50:	0002189c 	.word	0x0002189c

00014f54 <str_isspace>:

STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
   14f54:	b580      	push	{r7, lr}
   14f56:	b082      	sub	sp, #8
   14f58:	af00      	add	r7, sp, #0
   14f5a:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isspace, self_in);
   14f5c:	6879      	ldr	r1, [r7, #4]
   14f5e:	4804      	ldr	r0, [pc, #16]	; (14f70 <str_isspace+0x1c>)
   14f60:	f7ff ff78 	bl	14e54 <str_uni_istype>
   14f64:	4603      	mov	r3, r0
}
   14f66:	4618      	mov	r0, r3
   14f68:	3708      	adds	r7, #8
   14f6a:	46bd      	mov	sp, r7
   14f6c:	bd80      	pop	{r7, pc}
   14f6e:	bf00      	nop
   14f70:	000023c5 	.word	0x000023c5

00014f74 <str_isalpha>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isspace_obj, str_isspace);

STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
   14f74:	b580      	push	{r7, lr}
   14f76:	b082      	sub	sp, #8
   14f78:	af00      	add	r7, sp, #0
   14f7a:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isalpha, self_in);
   14f7c:	6879      	ldr	r1, [r7, #4]
   14f7e:	4804      	ldr	r0, [pc, #16]	; (14f90 <str_isalpha+0x1c>)
   14f80:	f7ff ff68 	bl	14e54 <str_uni_istype>
   14f84:	4603      	mov	r3, r0
}
   14f86:	4618      	mov	r0, r3
   14f88:	3708      	adds	r7, #8
   14f8a:	46bd      	mov	sp, r7
   14f8c:	bd80      	pop	{r7, pc}
   14f8e:	bf00      	nop
   14f90:	00002401 	.word	0x00002401

00014f94 <str_isdigit>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isalpha_obj, str_isalpha);

STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
   14f94:	b580      	push	{r7, lr}
   14f96:	b082      	sub	sp, #8
   14f98:	af00      	add	r7, sp, #0
   14f9a:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isdigit, self_in);
   14f9c:	6879      	ldr	r1, [r7, #4]
   14f9e:	4804      	ldr	r0, [pc, #16]	; (14fb0 <str_isdigit+0x1c>)
   14fa0:	f7ff ff58 	bl	14e54 <str_uni_istype>
   14fa4:	4603      	mov	r3, r0
}
   14fa6:	4618      	mov	r0, r3
   14fa8:	3708      	adds	r7, #8
   14faa:	46bd      	mov	sp, r7
   14fac:	bd80      	pop	{r7, pc}
   14fae:	bf00      	nop
   14fb0:	0000243d 	.word	0x0000243d

00014fb4 <str_isupper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isdigit_obj, str_isdigit);

STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
   14fb4:	b580      	push	{r7, lr}
   14fb6:	b082      	sub	sp, #8
   14fb8:	af00      	add	r7, sp, #0
   14fba:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isupper, self_in);
   14fbc:	6879      	ldr	r1, [r7, #4]
   14fbe:	4804      	ldr	r0, [pc, #16]	; (14fd0 <str_isupper+0x1c>)
   14fc0:	f7ff ff48 	bl	14e54 <str_uni_istype>
   14fc4:	4603      	mov	r3, r0
}
   14fc6:	4618      	mov	r0, r3
   14fc8:	3708      	adds	r7, #8
   14fca:	46bd      	mov	sp, r7
   14fcc:	bd80      	pop	{r7, pc}
   14fce:	bf00      	nop
   14fd0:	000024f5 	.word	0x000024f5

00014fd4 <str_islower>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isupper_obj, str_isupper);

STATIC mp_obj_t str_islower(mp_obj_t self_in) {
   14fd4:	b580      	push	{r7, lr}
   14fd6:	b082      	sub	sp, #8
   14fd8:	af00      	add	r7, sp, #0
   14fda:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_islower, self_in);
   14fdc:	6879      	ldr	r1, [r7, #4]
   14fde:	4804      	ldr	r0, [pc, #16]	; (14ff0 <str_islower+0x1c>)
   14fe0:	f7ff ff38 	bl	14e54 <str_uni_istype>
   14fe4:	4603      	mov	r3, r0
}
   14fe6:	4618      	mov	r0, r3
   14fe8:	3708      	adds	r7, #8
   14fea:	46bd      	mov	sp, r7
   14fec:	bd80      	pop	{r7, pc}
   14fee:	bf00      	nop
   14ff0:	00002531 	.word	0x00002531

00014ff4 <mp_obj_str_get_buffer>:
    return bytes_make_new(NULL, n_args, 0, args);
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_encode_obj, 1, 3, str_encode);
#endif

mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   14ff4:	b580      	push	{r7, lr}
   14ff6:	b086      	sub	sp, #24
   14ff8:	af00      	add	r7, sp, #0
   14ffa:	60f8      	str	r0, [r7, #12]
   14ffc:	60b9      	str	r1, [r7, #8]
   14ffe:	607a      	str	r2, [r7, #4]
    if (flags == MP_BUFFER_READ) {
   15000:	687b      	ldr	r3, [r7, #4]
   15002:	2b01      	cmp	r3, #1
   15004:	d120      	bne.n	15048 <mp_obj_str_get_buffer+0x54>
        GET_STR_DATA_LEN(self_in, str_data, str_len);
   15006:	68f8      	ldr	r0, [r7, #12]
   15008:	f7fd f820 	bl	1204c <MP_OBJ_IS_QSTR>
   1500c:	4603      	mov	r3, r0
   1500e:	2b00      	cmp	r3, #0
   15010:	d009      	beq.n	15026 <mp_obj_str_get_buffer+0x32>
   15012:	68fb      	ldr	r3, [r7, #12]
   15014:	089b      	lsrs	r3, r3, #2
   15016:	f107 0210 	add.w	r2, r7, #16
   1501a:	4611      	mov	r1, r2
   1501c:	4618      	mov	r0, r3
   1501e:	f7ec f921 	bl	1264 <qstr_data>
   15022:	6178      	str	r0, [r7, #20]
   15024:	e005      	b.n	15032 <mp_obj_str_get_buffer+0x3e>
   15026:	68fb      	ldr	r3, [r7, #12]
   15028:	689b      	ldr	r3, [r3, #8]
   1502a:	613b      	str	r3, [r7, #16]
   1502c:	68fb      	ldr	r3, [r7, #12]
   1502e:	68db      	ldr	r3, [r3, #12]
   15030:	617b      	str	r3, [r7, #20]
        bufinfo->buf = (void*)str_data;
   15032:	68bb      	ldr	r3, [r7, #8]
   15034:	697a      	ldr	r2, [r7, #20]
   15036:	601a      	str	r2, [r3, #0]
        bufinfo->len = str_len;
   15038:	693a      	ldr	r2, [r7, #16]
   1503a:	68bb      	ldr	r3, [r7, #8]
   1503c:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
   1503e:	68bb      	ldr	r3, [r7, #8]
   15040:	2242      	movs	r2, #66	; 0x42
   15042:	609a      	str	r2, [r3, #8]
        return 0;
   15044:	2300      	movs	r3, #0
   15046:	e00a      	b.n	1505e <mp_obj_str_get_buffer+0x6a>
    } else {
        // can't write to a string
        bufinfo->buf = NULL;
   15048:	68bb      	ldr	r3, [r7, #8]
   1504a:	2200      	movs	r2, #0
   1504c:	601a      	str	r2, [r3, #0]
        bufinfo->len = 0;
   1504e:	68bb      	ldr	r3, [r7, #8]
   15050:	2200      	movs	r2, #0
   15052:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = -1;
   15054:	68bb      	ldr	r3, [r7, #8]
   15056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1505a:	609a      	str	r2, [r3, #8]
        return 1;
   1505c:	2301      	movs	r3, #1
    }
}
   1505e:	4618      	mov	r0, r3
   15060:	3718      	adds	r7, #24
   15062:	46bd      	mov	sp, r7
   15064:	bd80      	pop	{r7, pc}

00015066 <mp_obj_new_str_copy>:
const mp_obj_str_t mp_const_empty_bytes_obj = {{&mp_type_bytes}, 0, 0, (const byte*)""};

// Create a str/bytes object using the given data.  New memory is allocated and
// the data is copied across.  This function should only be used if the type is bytes,
// or if the type is str and the string data is known to be not interned.
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
   15066:	b580      	push	{r7, lr}
   15068:	b086      	sub	sp, #24
   1506a:	af00      	add	r7, sp, #0
   1506c:	60f8      	str	r0, [r7, #12]
   1506e:	60b9      	str	r1, [r7, #8]
   15070:	607a      	str	r2, [r7, #4]
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   15072:	2010      	movs	r0, #16
   15074:	f7eb f952 	bl	31c <m_malloc>
   15078:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   1507a:	697b      	ldr	r3, [r7, #20]
   1507c:	68fa      	ldr	r2, [r7, #12]
   1507e:	601a      	str	r2, [r3, #0]
    o->len = len;
   15080:	697b      	ldr	r3, [r7, #20]
   15082:	687a      	ldr	r2, [r7, #4]
   15084:	609a      	str	r2, [r3, #8]
    if (data) {
   15086:	68bb      	ldr	r3, [r7, #8]
   15088:	2b00      	cmp	r3, #0
   1508a:	d019      	beq.n	150c0 <mp_obj_new_str_copy+0x5a>
        o->hash = qstr_compute_hash(data, len);
   1508c:	6879      	ldr	r1, [r7, #4]
   1508e:	68b8      	ldr	r0, [r7, #8]
   15090:	f7eb feee 	bl	e70 <qstr_compute_hash>
   15094:	4602      	mov	r2, r0
   15096:	697b      	ldr	r3, [r7, #20]
   15098:	605a      	str	r2, [r3, #4]
        byte *p = m_new(byte, len + 1);
   1509a:	687b      	ldr	r3, [r7, #4]
   1509c:	3301      	adds	r3, #1
   1509e:	4618      	mov	r0, r3
   150a0:	f7eb f93c 	bl	31c <m_malloc>
   150a4:	6138      	str	r0, [r7, #16]
        o->data = p;
   150a6:	697b      	ldr	r3, [r7, #20]
   150a8:	693a      	ldr	r2, [r7, #16]
   150aa:	60da      	str	r2, [r3, #12]
        memcpy(p, data, len * sizeof(byte));
   150ac:	687a      	ldr	r2, [r7, #4]
   150ae:	68b9      	ldr	r1, [r7, #8]
   150b0:	6938      	ldr	r0, [r7, #16]
   150b2:	f007 fd11 	bl	1cad8 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
   150b6:	693a      	ldr	r2, [r7, #16]
   150b8:	687b      	ldr	r3, [r7, #4]
   150ba:	4413      	add	r3, r2
   150bc:	2200      	movs	r2, #0
   150be:	701a      	strb	r2, [r3, #0]
    }
    return MP_OBJ_FROM_PTR(o);
   150c0:	697b      	ldr	r3, [r7, #20]
}
   150c2:	4618      	mov	r0, r3
   150c4:	3718      	adds	r7, #24
   150c6:	46bd      	mov	sp, r7
   150c8:	bd80      	pop	{r7, pc}

000150ca <mp_obj_new_str_of_type>:

// Create a str/bytes object using the given data.  If the type is str and the string
// data is already interned, then a qstr object is returned.  Otherwise new memory is
// allocated for the object and the data is copied across.
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
   150ca:	b580      	push	{r7, lr}
   150cc:	b084      	sub	sp, #16
   150ce:	af00      	add	r7, sp, #0
   150d0:	60f8      	str	r0, [r7, #12]
   150d2:	60b9      	str	r1, [r7, #8]
   150d4:	607a      	str	r2, [r7, #4]
    if (type == &mp_type_str) {
   150d6:	68fb      	ldr	r3, [r7, #12]
   150d8:	4a08      	ldr	r2, [pc, #32]	; (150fc <mp_obj_new_str_of_type+0x32>)
   150da:	4293      	cmp	r3, r2
   150dc:	d105      	bne.n	150ea <mp_obj_new_str_of_type+0x20>
        return mp_obj_new_str((const char*)data, len);
   150de:	6879      	ldr	r1, [r7, #4]
   150e0:	68b8      	ldr	r0, [r7, #8]
   150e2:	f000 f881 	bl	151e8 <mp_obj_new_str>
   150e6:	4603      	mov	r3, r0
   150e8:	e004      	b.n	150f4 <mp_obj_new_str_of_type+0x2a>
    } else {
        return mp_obj_new_bytes(data, len);
   150ea:	6879      	ldr	r1, [r7, #4]
   150ec:	68b8      	ldr	r0, [r7, #8]
   150ee:	f000 f8d2 	bl	15296 <mp_obj_new_bytes>
   150f2:	4603      	mov	r3, r0
    }
}
   150f4:	4618      	mov	r0, r3
   150f6:	3710      	adds	r7, #16
   150f8:	46bd      	mov	sp, r7
   150fa:	bd80      	pop	{r7, pc}
   150fc:	0002379c 	.word	0x0002379c

00015100 <mp_obj_new_str_via_qstr>:

// Create a str using a qstr to store the data; may use existing or new qstr.
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
   15100:	b580      	push	{r7, lr}
   15102:	b082      	sub	sp, #8
   15104:	af00      	add	r7, sp, #0
   15106:	6078      	str	r0, [r7, #4]
   15108:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
   1510a:	6839      	ldr	r1, [r7, #0]
   1510c:	6878      	ldr	r0, [r7, #4]
   1510e:	f7eb ffc2 	bl	1096 <qstr_from_strn>
   15112:	4603      	mov	r3, r0
   15114:	009b      	lsls	r3, r3, #2
   15116:	f043 0302 	orr.w	r3, r3, #2
}
   1511a:	4618      	mov	r0, r3
   1511c:	3708      	adds	r7, #8
   1511e:	46bd      	mov	sp, r7
   15120:	bd80      	pop	{r7, pc}

00015122 <mp_obj_new_str_from_vstr>:

// Create a str/bytes object from the given vstr.  The vstr buffer is resized to
// the exact length required and then reused for the str/bytes object.  The vstr
// is cleared and can safely be passed to vstr_free if it was heap allocated.
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
   15122:	b580      	push	{r7, lr}
   15124:	b084      	sub	sp, #16
   15126:	af00      	add	r7, sp, #0
   15128:	6078      	str	r0, [r7, #4]
   1512a:	6039      	str	r1, [r7, #0]
    // if not a bytes object, look if a qstr with this data already exists
    if (type == &mp_type_str) {
   1512c:	687b      	ldr	r3, [r7, #4]
   1512e:	4a2d      	ldr	r2, [pc, #180]	; (151e4 <mp_obj_new_str_from_vstr+0xc2>)
   15130:	4293      	cmp	r3, r2
   15132:	d116      	bne.n	15162 <mp_obj_new_str_from_vstr+0x40>
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
   15134:	683b      	ldr	r3, [r7, #0]
   15136:	689a      	ldr	r2, [r3, #8]
   15138:	683b      	ldr	r3, [r7, #0]
   1513a:	685b      	ldr	r3, [r3, #4]
   1513c:	4619      	mov	r1, r3
   1513e:	4610      	mov	r0, r2
   15140:	f7eb ff46 	bl	fd0 <qstr_find_strn>
   15144:	60f8      	str	r0, [r7, #12]
        if (q != MP_QSTR_NULL) {
   15146:	68fb      	ldr	r3, [r7, #12]
   15148:	2b00      	cmp	r3, #0
   1514a:	d00a      	beq.n	15162 <mp_obj_new_str_from_vstr+0x40>
            vstr_clear(vstr);
   1514c:	6838      	ldr	r0, [r7, #0]
   1514e:	f7ec f965 	bl	141c <vstr_clear>
            vstr->alloc = 0;
   15152:	683b      	ldr	r3, [r7, #0]
   15154:	2200      	movs	r2, #0
   15156:	601a      	str	r2, [r3, #0]
            return MP_OBJ_NEW_QSTR(q);
   15158:	68fb      	ldr	r3, [r7, #12]
   1515a:	009b      	lsls	r3, r3, #2
   1515c:	f043 0302 	orr.w	r3, r3, #2
   15160:	e03b      	b.n	151da <mp_obj_new_str_from_vstr+0xb8>
        }
    }

    // make a new str/bytes object
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   15162:	2010      	movs	r0, #16
   15164:	f7eb f8da 	bl	31c <m_malloc>
   15168:	60b8      	str	r0, [r7, #8]
    o->base.type = type;
   1516a:	68bb      	ldr	r3, [r7, #8]
   1516c:	687a      	ldr	r2, [r7, #4]
   1516e:	601a      	str	r2, [r3, #0]
    o->len = vstr->len;
   15170:	683b      	ldr	r3, [r7, #0]
   15172:	685a      	ldr	r2, [r3, #4]
   15174:	68bb      	ldr	r3, [r7, #8]
   15176:	609a      	str	r2, [r3, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
   15178:	683b      	ldr	r3, [r7, #0]
   1517a:	689a      	ldr	r2, [r3, #8]
   1517c:	683b      	ldr	r3, [r7, #0]
   1517e:	685b      	ldr	r3, [r3, #4]
   15180:	4619      	mov	r1, r3
   15182:	4610      	mov	r0, r2
   15184:	f7eb fe74 	bl	e70 <qstr_compute_hash>
   15188:	4602      	mov	r2, r0
   1518a:	68bb      	ldr	r3, [r7, #8]
   1518c:	605a      	str	r2, [r3, #4]
    if (vstr->len + 1 == vstr->alloc) {
   1518e:	683b      	ldr	r3, [r7, #0]
   15190:	685b      	ldr	r3, [r3, #4]
   15192:	1c5a      	adds	r2, r3, #1
   15194:	683b      	ldr	r3, [r7, #0]
   15196:	681b      	ldr	r3, [r3, #0]
   15198:	429a      	cmp	r2, r3
   1519a:	d104      	bne.n	151a6 <mp_obj_new_str_from_vstr+0x84>
        o->data = (byte*)vstr->buf;
   1519c:	683b      	ldr	r3, [r7, #0]
   1519e:	689a      	ldr	r2, [r3, #8]
   151a0:	68bb      	ldr	r3, [r7, #8]
   151a2:	60da      	str	r2, [r3, #12]
   151a4:	e00b      	b.n	151be <mp_obj_new_str_from_vstr+0x9c>
    } else {
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
   151a6:	683b      	ldr	r3, [r7, #0]
   151a8:	689a      	ldr	r2, [r3, #8]
   151aa:	683b      	ldr	r3, [r7, #0]
   151ac:	685b      	ldr	r3, [r3, #4]
   151ae:	3301      	adds	r3, #1
   151b0:	4619      	mov	r1, r3
   151b2:	4610      	mov	r0, r2
   151b4:	f7eb f8e4 	bl	380 <m_realloc>
   151b8:	4602      	mov	r2, r0
   151ba:	68bb      	ldr	r3, [r7, #8]
   151bc:	60da      	str	r2, [r3, #12]
    }
    ((byte*)o->data)[o->len] = '\0'; // add null byte
   151be:	68bb      	ldr	r3, [r7, #8]
   151c0:	68da      	ldr	r2, [r3, #12]
   151c2:	68bb      	ldr	r3, [r7, #8]
   151c4:	689b      	ldr	r3, [r3, #8]
   151c6:	4413      	add	r3, r2
   151c8:	2200      	movs	r2, #0
   151ca:	701a      	strb	r2, [r3, #0]
    vstr->buf = NULL;
   151cc:	683b      	ldr	r3, [r7, #0]
   151ce:	2200      	movs	r2, #0
   151d0:	609a      	str	r2, [r3, #8]
    vstr->alloc = 0;
   151d2:	683b      	ldr	r3, [r7, #0]
   151d4:	2200      	movs	r2, #0
   151d6:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   151d8:	68bb      	ldr	r3, [r7, #8]
}
   151da:	4618      	mov	r0, r3
   151dc:	3710      	adds	r7, #16
   151de:	46bd      	mov	sp, r7
   151e0:	bd80      	pop	{r7, pc}
   151e2:	bf00      	nop
   151e4:	0002379c 	.word	0x0002379c

000151e8 <mp_obj_new_str>:

mp_obj_t mp_obj_new_str(const char* data, size_t len) {
   151e8:	b580      	push	{r7, lr}
   151ea:	b084      	sub	sp, #16
   151ec:	af00      	add	r7, sp, #0
   151ee:	6078      	str	r0, [r7, #4]
   151f0:	6039      	str	r1, [r7, #0]
    qstr q = qstr_find_strn(data, len);
   151f2:	6839      	ldr	r1, [r7, #0]
   151f4:	6878      	ldr	r0, [r7, #4]
   151f6:	f7eb feeb 	bl	fd0 <qstr_find_strn>
   151fa:	60f8      	str	r0, [r7, #12]
    if (q != MP_QSTR_NULL) {
   151fc:	68fb      	ldr	r3, [r7, #12]
   151fe:	2b00      	cmp	r3, #0
   15200:	d004      	beq.n	1520c <mp_obj_new_str+0x24>
        // qstr with this data already exists
        return MP_OBJ_NEW_QSTR(q);
   15202:	68fb      	ldr	r3, [r7, #12]
   15204:	009b      	lsls	r3, r3, #2
   15206:	f043 0302 	orr.w	r3, r3, #2
   1520a:	e005      	b.n	15218 <mp_obj_new_str+0x30>
    } else {
        // no existing qstr, don't make one
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
   1520c:	683a      	ldr	r2, [r7, #0]
   1520e:	6879      	ldr	r1, [r7, #4]
   15210:	4803      	ldr	r0, [pc, #12]	; (15220 <mp_obj_new_str+0x38>)
   15212:	f7ff ff28 	bl	15066 <mp_obj_new_str_copy>
   15216:	4603      	mov	r3, r0
    }
}
   15218:	4618      	mov	r0, r3
   1521a:	3710      	adds	r7, #16
   1521c:	46bd      	mov	sp, r7
   1521e:	bd80      	pop	{r7, pc}
   15220:	0002379c 	.word	0x0002379c

00015224 <mp_obj_str_intern>:

mp_obj_t mp_obj_str_intern(mp_obj_t str) {
   15224:	b580      	push	{r7, lr}
   15226:	b084      	sub	sp, #16
   15228:	af00      	add	r7, sp, #0
   1522a:	6078      	str	r0, [r7, #4]
    GET_STR_DATA_LEN(str, data, len);
   1522c:	6878      	ldr	r0, [r7, #4]
   1522e:	f7fc ff0d 	bl	1204c <MP_OBJ_IS_QSTR>
   15232:	4603      	mov	r3, r0
   15234:	2b00      	cmp	r3, #0
   15236:	d009      	beq.n	1524c <mp_obj_str_intern+0x28>
   15238:	687b      	ldr	r3, [r7, #4]
   1523a:	089b      	lsrs	r3, r3, #2
   1523c:	f107 0208 	add.w	r2, r7, #8
   15240:	4611      	mov	r1, r2
   15242:	4618      	mov	r0, r3
   15244:	f7ec f80e 	bl	1264 <qstr_data>
   15248:	60f8      	str	r0, [r7, #12]
   1524a:	e005      	b.n	15258 <mp_obj_str_intern+0x34>
   1524c:	687b      	ldr	r3, [r7, #4]
   1524e:	689b      	ldr	r3, [r3, #8]
   15250:	60bb      	str	r3, [r7, #8]
   15252:	687b      	ldr	r3, [r7, #4]
   15254:	68db      	ldr	r3, [r3, #12]
   15256:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   15258:	68bb      	ldr	r3, [r7, #8]
   1525a:	4619      	mov	r1, r3
   1525c:	68f8      	ldr	r0, [r7, #12]
   1525e:	f7ff ff4f 	bl	15100 <mp_obj_new_str_via_qstr>
   15262:	4603      	mov	r3, r0
}
   15264:	4618      	mov	r0, r3
   15266:	3710      	adds	r7, #16
   15268:	46bd      	mov	sp, r7
   1526a:	bd80      	pop	{r7, pc}

0001526c <mp_obj_str_intern_checked>:

mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   1526c:	b580      	push	{r7, lr}
   1526e:	b084      	sub	sp, #16
   15270:	af00      	add	r7, sp, #0
   15272:	6078      	str	r0, [r7, #4]
    size_t len;
    const char *data = mp_obj_str_get_data(obj, &len);
   15274:	f107 0308 	add.w	r3, r7, #8
   15278:	4619      	mov	r1, r3
   1527a:	6878      	ldr	r0, [r7, #4]
   1527c:	f000 f912 	bl	154a4 <mp_obj_str_get_data>
   15280:	60f8      	str	r0, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   15282:	68bb      	ldr	r3, [r7, #8]
   15284:	4619      	mov	r1, r3
   15286:	68f8      	ldr	r0, [r7, #12]
   15288:	f7ff ff3a 	bl	15100 <mp_obj_new_str_via_qstr>
   1528c:	4603      	mov	r3, r0
}
   1528e:	4618      	mov	r0, r3
   15290:	3710      	adds	r7, #16
   15292:	46bd      	mov	sp, r7
   15294:	bd80      	pop	{r7, pc}

00015296 <mp_obj_new_bytes>:

mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
   15296:	b580      	push	{r7, lr}
   15298:	b082      	sub	sp, #8
   1529a:	af00      	add	r7, sp, #0
   1529c:	6078      	str	r0, [r7, #4]
   1529e:	6039      	str	r1, [r7, #0]
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
   152a0:	683a      	ldr	r2, [r7, #0]
   152a2:	6879      	ldr	r1, [r7, #4]
   152a4:	4803      	ldr	r0, [pc, #12]	; (152b4 <mp_obj_new_bytes+0x1e>)
   152a6:	f7ff fede 	bl	15066 <mp_obj_new_str_copy>
   152aa:	4603      	mov	r3, r0
}
   152ac:	4618      	mov	r0, r3
   152ae:	3708      	adds	r7, #8
   152b0:	46bd      	mov	sp, r7
   152b2:	bd80      	pop	{r7, pc}
   152b4:	000237d8 	.word	0x000237d8

000152b8 <mp_obj_str_equal>:

bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   152b8:	b580      	push	{r7, lr}
   152ba:	b088      	sub	sp, #32
   152bc:	af00      	add	r7, sp, #0
   152be:	6078      	str	r0, [r7, #4]
   152c0:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   152c2:	6878      	ldr	r0, [r7, #4]
   152c4:	f7fc fec2 	bl	1204c <MP_OBJ_IS_QSTR>
   152c8:	4603      	mov	r3, r0
   152ca:	2b00      	cmp	r3, #0
   152cc:	d00d      	beq.n	152ea <mp_obj_str_equal+0x32>
   152ce:	6838      	ldr	r0, [r7, #0]
   152d0:	f7fc febc 	bl	1204c <MP_OBJ_IS_QSTR>
   152d4:	4603      	mov	r3, r0
   152d6:	2b00      	cmp	r3, #0
   152d8:	d007      	beq.n	152ea <mp_obj_str_equal+0x32>
        return s1 == s2;
   152da:	687a      	ldr	r2, [r7, #4]
   152dc:	683b      	ldr	r3, [r7, #0]
   152de:	429a      	cmp	r2, r3
   152e0:	bf0c      	ite	eq
   152e2:	2301      	moveq	r3, #1
   152e4:	2300      	movne	r3, #0
   152e6:	b2db      	uxtb	r3, r3
   152e8:	e069      	b.n	153be <mp_obj_str_equal+0x106>
    } else {
        GET_STR_HASH(s1, h1);
   152ea:	6878      	ldr	r0, [r7, #4]
   152ec:	f7fc feae 	bl	1204c <MP_OBJ_IS_QSTR>
   152f0:	4603      	mov	r3, r0
   152f2:	2b00      	cmp	r3, #0
   152f4:	d006      	beq.n	15304 <mp_obj_str_equal+0x4c>
   152f6:	687b      	ldr	r3, [r7, #4]
   152f8:	089b      	lsrs	r3, r3, #2
   152fa:	4618      	mov	r0, r3
   152fc:	f7eb ff88 	bl	1210 <qstr_hash>
   15300:	61f8      	str	r0, [r7, #28]
   15302:	e002      	b.n	1530a <mp_obj_str_equal+0x52>
   15304:	687b      	ldr	r3, [r7, #4]
   15306:	685b      	ldr	r3, [r3, #4]
   15308:	61fb      	str	r3, [r7, #28]
        GET_STR_HASH(s2, h2);
   1530a:	6838      	ldr	r0, [r7, #0]
   1530c:	f7fc fe9e 	bl	1204c <MP_OBJ_IS_QSTR>
   15310:	4603      	mov	r3, r0
   15312:	2b00      	cmp	r3, #0
   15314:	d006      	beq.n	15324 <mp_obj_str_equal+0x6c>
   15316:	683b      	ldr	r3, [r7, #0]
   15318:	089b      	lsrs	r3, r3, #2
   1531a:	4618      	mov	r0, r3
   1531c:	f7eb ff78 	bl	1210 <qstr_hash>
   15320:	61b8      	str	r0, [r7, #24]
   15322:	e002      	b.n	1532a <mp_obj_str_equal+0x72>
   15324:	683b      	ldr	r3, [r7, #0]
   15326:	685b      	ldr	r3, [r3, #4]
   15328:	61bb      	str	r3, [r7, #24]
        // If any of hashes is 0, it means it's not valid
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   1532a:	69fb      	ldr	r3, [r7, #28]
   1532c:	2b00      	cmp	r3, #0
   1532e:	d008      	beq.n	15342 <mp_obj_str_equal+0x8a>
   15330:	69bb      	ldr	r3, [r7, #24]
   15332:	2b00      	cmp	r3, #0
   15334:	d005      	beq.n	15342 <mp_obj_str_equal+0x8a>
   15336:	69fa      	ldr	r2, [r7, #28]
   15338:	69bb      	ldr	r3, [r7, #24]
   1533a:	429a      	cmp	r2, r3
   1533c:	d001      	beq.n	15342 <mp_obj_str_equal+0x8a>
            return false;
   1533e:	2300      	movs	r3, #0
   15340:	e03d      	b.n	153be <mp_obj_str_equal+0x106>
        }
        GET_STR_DATA_LEN(s1, d1, l1);
   15342:	6878      	ldr	r0, [r7, #4]
   15344:	f7fc fe82 	bl	1204c <MP_OBJ_IS_QSTR>
   15348:	4603      	mov	r3, r0
   1534a:	2b00      	cmp	r3, #0
   1534c:	d009      	beq.n	15362 <mp_obj_str_equal+0xaa>
   1534e:	687b      	ldr	r3, [r7, #4]
   15350:	089b      	lsrs	r3, r3, #2
   15352:	f107 020c 	add.w	r2, r7, #12
   15356:	4611      	mov	r1, r2
   15358:	4618      	mov	r0, r3
   1535a:	f7eb ff83 	bl	1264 <qstr_data>
   1535e:	6178      	str	r0, [r7, #20]
   15360:	e005      	b.n	1536e <mp_obj_str_equal+0xb6>
   15362:	687b      	ldr	r3, [r7, #4]
   15364:	689b      	ldr	r3, [r3, #8]
   15366:	60fb      	str	r3, [r7, #12]
   15368:	687b      	ldr	r3, [r7, #4]
   1536a:	68db      	ldr	r3, [r3, #12]
   1536c:	617b      	str	r3, [r7, #20]
        GET_STR_DATA_LEN(s2, d2, l2);
   1536e:	6838      	ldr	r0, [r7, #0]
   15370:	f7fc fe6c 	bl	1204c <MP_OBJ_IS_QSTR>
   15374:	4603      	mov	r3, r0
   15376:	2b00      	cmp	r3, #0
   15378:	d009      	beq.n	1538e <mp_obj_str_equal+0xd6>
   1537a:	683b      	ldr	r3, [r7, #0]
   1537c:	089b      	lsrs	r3, r3, #2
   1537e:	f107 0208 	add.w	r2, r7, #8
   15382:	4611      	mov	r1, r2
   15384:	4618      	mov	r0, r3
   15386:	f7eb ff6d 	bl	1264 <qstr_data>
   1538a:	6138      	str	r0, [r7, #16]
   1538c:	e005      	b.n	1539a <mp_obj_str_equal+0xe2>
   1538e:	683b      	ldr	r3, [r7, #0]
   15390:	689b      	ldr	r3, [r3, #8]
   15392:	60bb      	str	r3, [r7, #8]
   15394:	683b      	ldr	r3, [r7, #0]
   15396:	68db      	ldr	r3, [r3, #12]
   15398:	613b      	str	r3, [r7, #16]
        if (l1 != l2) {
   1539a:	68fa      	ldr	r2, [r7, #12]
   1539c:	68bb      	ldr	r3, [r7, #8]
   1539e:	429a      	cmp	r2, r3
   153a0:	d001      	beq.n	153a6 <mp_obj_str_equal+0xee>
            return false;
   153a2:	2300      	movs	r3, #0
   153a4:	e00b      	b.n	153be <mp_obj_str_equal+0x106>
        }
        return memcmp(d1, d2, l1) == 0;
   153a6:	68fb      	ldr	r3, [r7, #12]
   153a8:	461a      	mov	r2, r3
   153aa:	6939      	ldr	r1, [r7, #16]
   153ac:	6978      	ldr	r0, [r7, #20]
   153ae:	f007 fc78 	bl	1cca2 <memcmp>
   153b2:	4603      	mov	r3, r0
   153b4:	2b00      	cmp	r3, #0
   153b6:	bf0c      	ite	eq
   153b8:	2301      	moveq	r3, #1
   153ba:	2300      	movne	r3, #0
   153bc:	b2db      	uxtb	r3, r3
    }
}
   153be:	4618      	mov	r0, r3
   153c0:	3720      	adds	r7, #32
   153c2:	46bd      	mov	sp, r7
   153c4:	bd80      	pop	{r7, pc}

000153c6 <bad_implicit_conversion>:

STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
   153c6:	b580      	push	{r7, lr}
   153c8:	b082      	sub	sp, #8
   153ca:	af00      	add	r7, sp, #0
   153cc:	6078      	str	r0, [r7, #4]
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("can't convert to str implicitly");
   153ce:	4801      	ldr	r0, [pc, #4]	; (153d4 <bad_implicit_conversion+0xe>)
   153d0:	f7f7 fd4a 	bl	ce68 <mp_raise_TypeError>
   153d4:	00023828 	.word	0x00023828

000153d8 <mp_obj_str_get_qstr>:
    }
}

// use this if you will anyway convert the string to a qstr
// will be more efficient for the case where it's already a qstr
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   153d8:	b580      	push	{r7, lr}
   153da:	b084      	sub	sp, #16
   153dc:	af00      	add	r7, sp, #0
   153de:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_QSTR(self_in)) {
   153e0:	6878      	ldr	r0, [r7, #4]
   153e2:	f7fc fe33 	bl	1204c <MP_OBJ_IS_QSTR>
   153e6:	4603      	mov	r3, r0
   153e8:	2b00      	cmp	r3, #0
   153ea:	d002      	beq.n	153f2 <mp_obj_str_get_qstr+0x1a>
        return MP_OBJ_QSTR_VALUE(self_in);
   153ec:	687b      	ldr	r3, [r7, #4]
   153ee:	089b      	lsrs	r3, r3, #2
   153f0:	e019      	b.n	15426 <mp_obj_str_get_qstr+0x4e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   153f2:	6878      	ldr	r0, [r7, #4]
   153f4:	f7fc fe3c 	bl	12070 <MP_OBJ_IS_OBJ>
   153f8:	4603      	mov	r3, r0
   153fa:	2b00      	cmp	r3, #0
   153fc:	d010      	beq.n	15420 <mp_obj_str_get_qstr+0x48>
   153fe:	687b      	ldr	r3, [r7, #4]
   15400:	681b      	ldr	r3, [r3, #0]
   15402:	4a0b      	ldr	r2, [pc, #44]	; (15430 <mp_obj_str_get_qstr+0x58>)
   15404:	4293      	cmp	r3, r2
   15406:	d10b      	bne.n	15420 <mp_obj_str_get_qstr+0x48>
        mp_obj_str_t *self = MP_OBJ_TO_PTR(self_in);
   15408:	687b      	ldr	r3, [r7, #4]
   1540a:	60fb      	str	r3, [r7, #12]
        return qstr_from_strn((char*)self->data, self->len);
   1540c:	68fb      	ldr	r3, [r7, #12]
   1540e:	68da      	ldr	r2, [r3, #12]
   15410:	68fb      	ldr	r3, [r7, #12]
   15412:	689b      	ldr	r3, [r3, #8]
   15414:	4619      	mov	r1, r3
   15416:	4610      	mov	r0, r2
   15418:	f7eb fe3d 	bl	1096 <qstr_from_strn>
   1541c:	4603      	mov	r3, r0
   1541e:	e002      	b.n	15426 <mp_obj_str_get_qstr+0x4e>
    } else {
        bad_implicit_conversion(self_in);
   15420:	6878      	ldr	r0, [r7, #4]
   15422:	f7ff ffd0 	bl	153c6 <bad_implicit_conversion>
    }
}
   15426:	4618      	mov	r0, r3
   15428:	3710      	adds	r7, #16
   1542a:	46bd      	mov	sp, r7
   1542c:	bd80      	pop	{r7, pc}
   1542e:	bf00      	nop
   15430:	0002379c 	.word	0x0002379c

00015434 <mp_obj_str_get_str>:

// only use this function if you need the str data to be zero terminated
// at the moment all strings are zero terminated to help with C ASCIIZ compatibility
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   15434:	b580      	push	{r7, lr}
   15436:	b084      	sub	sp, #16
   15438:	af00      	add	r7, sp, #0
   1543a:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   1543c:	6878      	ldr	r0, [r7, #4]
   1543e:	f7fc fe05 	bl	1204c <MP_OBJ_IS_QSTR>
   15442:	4603      	mov	r3, r0
   15444:	2b00      	cmp	r3, #0
   15446:	d10b      	bne.n	15460 <mp_obj_str_get_str+0x2c>
   15448:	6878      	ldr	r0, [r7, #4]
   1544a:	f7fc fe11 	bl	12070 <MP_OBJ_IS_OBJ>
   1544e:	4603      	mov	r3, r0
   15450:	2b00      	cmp	r3, #0
   15452:	d01d      	beq.n	15490 <mp_obj_str_get_str+0x5c>
   15454:	687b      	ldr	r3, [r7, #4]
   15456:	681b      	ldr	r3, [r3, #0]
   15458:	699b      	ldr	r3, [r3, #24]
   1545a:	4a11      	ldr	r2, [pc, #68]	; (154a0 <mp_obj_str_get_str+0x6c>)
   1545c:	4293      	cmp	r3, r2
   1545e:	d117      	bne.n	15490 <mp_obj_str_get_str+0x5c>
        GET_STR_DATA_LEN(self_in, s, l);
   15460:	6878      	ldr	r0, [r7, #4]
   15462:	f7fc fdf3 	bl	1204c <MP_OBJ_IS_QSTR>
   15466:	4603      	mov	r3, r0
   15468:	2b00      	cmp	r3, #0
   1546a:	d009      	beq.n	15480 <mp_obj_str_get_str+0x4c>
   1546c:	687b      	ldr	r3, [r7, #4]
   1546e:	089b      	lsrs	r3, r3, #2
   15470:	f107 0208 	add.w	r2, r7, #8
   15474:	4611      	mov	r1, r2
   15476:	4618      	mov	r0, r3
   15478:	f7eb fef4 	bl	1264 <qstr_data>
   1547c:	60f8      	str	r0, [r7, #12]
   1547e:	e005      	b.n	1548c <mp_obj_str_get_str+0x58>
   15480:	687b      	ldr	r3, [r7, #4]
   15482:	689b      	ldr	r3, [r3, #8]
   15484:	60bb      	str	r3, [r7, #8]
   15486:	687b      	ldr	r3, [r7, #4]
   15488:	68db      	ldr	r3, [r3, #12]
   1548a:	60fb      	str	r3, [r7, #12]
        (void)l; // len unused
        return (const char*)s;
   1548c:	68fb      	ldr	r3, [r7, #12]
   1548e:	e002      	b.n	15496 <mp_obj_str_get_str+0x62>
    } else {
        bad_implicit_conversion(self_in);
   15490:	6878      	ldr	r0, [r7, #4]
   15492:	f7ff ff98 	bl	153c6 <bad_implicit_conversion>
    }
}
   15496:	4618      	mov	r0, r3
   15498:	3710      	adds	r7, #16
   1549a:	46bd      	mov	sp, r7
   1549c:	bd80      	pop	{r7, pc}
   1549e:	bf00      	nop
   154a0:	000126f7 	.word	0x000126f7

000154a4 <mp_obj_str_get_data>:

const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   154a4:	b580      	push	{r7, lr}
   154a6:	b084      	sub	sp, #16
   154a8:	af00      	add	r7, sp, #0
   154aa:	6078      	str	r0, [r7, #4]
   154ac:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   154ae:	6878      	ldr	r0, [r7, #4]
   154b0:	f7fc fdcc 	bl	1204c <MP_OBJ_IS_QSTR>
   154b4:	4603      	mov	r3, r0
   154b6:	2b00      	cmp	r3, #0
   154b8:	d10b      	bne.n	154d2 <mp_obj_str_get_data+0x2e>
   154ba:	6878      	ldr	r0, [r7, #4]
   154bc:	f7fc fdd8 	bl	12070 <MP_OBJ_IS_OBJ>
   154c0:	4603      	mov	r3, r0
   154c2:	2b00      	cmp	r3, #0
   154c4:	d020      	beq.n	15508 <mp_obj_str_get_data+0x64>
   154c6:	687b      	ldr	r3, [r7, #4]
   154c8:	681b      	ldr	r3, [r3, #0]
   154ca:	699b      	ldr	r3, [r3, #24]
   154cc:	4a12      	ldr	r2, [pc, #72]	; (15518 <mp_obj_str_get_data+0x74>)
   154ce:	4293      	cmp	r3, r2
   154d0:	d11a      	bne.n	15508 <mp_obj_str_get_data+0x64>
        GET_STR_DATA_LEN(self_in, s, l);
   154d2:	6878      	ldr	r0, [r7, #4]
   154d4:	f7fc fdba 	bl	1204c <MP_OBJ_IS_QSTR>
   154d8:	4603      	mov	r3, r0
   154da:	2b00      	cmp	r3, #0
   154dc:	d009      	beq.n	154f2 <mp_obj_str_get_data+0x4e>
   154de:	687b      	ldr	r3, [r7, #4]
   154e0:	089b      	lsrs	r3, r3, #2
   154e2:	f107 0208 	add.w	r2, r7, #8
   154e6:	4611      	mov	r1, r2
   154e8:	4618      	mov	r0, r3
   154ea:	f7eb febb 	bl	1264 <qstr_data>
   154ee:	60f8      	str	r0, [r7, #12]
   154f0:	e005      	b.n	154fe <mp_obj_str_get_data+0x5a>
   154f2:	687b      	ldr	r3, [r7, #4]
   154f4:	689b      	ldr	r3, [r3, #8]
   154f6:	60bb      	str	r3, [r7, #8]
   154f8:	687b      	ldr	r3, [r7, #4]
   154fa:	68db      	ldr	r3, [r3, #12]
   154fc:	60fb      	str	r3, [r7, #12]
        *len = l;
   154fe:	68ba      	ldr	r2, [r7, #8]
   15500:	683b      	ldr	r3, [r7, #0]
   15502:	601a      	str	r2, [r3, #0]
        return (const char*)s;
   15504:	68fb      	ldr	r3, [r7, #12]
   15506:	e002      	b.n	1550e <mp_obj_str_get_data+0x6a>
    } else {
        bad_implicit_conversion(self_in);
   15508:	6878      	ldr	r0, [r7, #4]
   1550a:	f7ff ff5c 	bl	153c6 <bad_implicit_conversion>
    }
}
   1550e:	4618      	mov	r0, r3
   15510:	3710      	adds	r7, #16
   15512:	46bd      	mov	sp, r7
   15514:	bd80      	pop	{r7, pc}
   15516:	bf00      	nop
   15518:	000126f7 	.word	0x000126f7

0001551c <str_it_iternext>:
    mp_obj_t str;
    size_t cur;
} mp_obj_str8_it_t;

#if !MICROPY_PY_BUILTINS_STR_UNICODE
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
   1551c:	b580      	push	{r7, lr}
   1551e:	b086      	sub	sp, #24
   15520:	af00      	add	r7, sp, #0
   15522:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15524:	687b      	ldr	r3, [r7, #4]
   15526:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   15528:	693b      	ldr	r3, [r7, #16]
   1552a:	689b      	ldr	r3, [r3, #8]
   1552c:	4618      	mov	r0, r3
   1552e:	f7fc fd8d 	bl	1204c <MP_OBJ_IS_QSTR>
   15532:	4603      	mov	r3, r0
   15534:	2b00      	cmp	r3, #0
   15536:	d00a      	beq.n	1554e <str_it_iternext+0x32>
   15538:	693b      	ldr	r3, [r7, #16]
   1553a:	689b      	ldr	r3, [r3, #8]
   1553c:	089b      	lsrs	r3, r3, #2
   1553e:	f107 0208 	add.w	r2, r7, #8
   15542:	4611      	mov	r1, r2
   15544:	4618      	mov	r0, r3
   15546:	f7eb fe8d 	bl	1264 <qstr_data>
   1554a:	6178      	str	r0, [r7, #20]
   1554c:	e007      	b.n	1555e <str_it_iternext+0x42>
   1554e:	693b      	ldr	r3, [r7, #16]
   15550:	689b      	ldr	r3, [r3, #8]
   15552:	689b      	ldr	r3, [r3, #8]
   15554:	60bb      	str	r3, [r7, #8]
   15556:	693b      	ldr	r3, [r7, #16]
   15558:	689b      	ldr	r3, [r3, #8]
   1555a:	68db      	ldr	r3, [r3, #12]
   1555c:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   1555e:	693b      	ldr	r3, [r7, #16]
   15560:	68da      	ldr	r2, [r3, #12]
   15562:	68bb      	ldr	r3, [r7, #8]
   15564:	429a      	cmp	r2, r3
   15566:	d20f      	bcs.n	15588 <str_it_iternext+0x6c>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
   15568:	693b      	ldr	r3, [r7, #16]
   1556a:	68db      	ldr	r3, [r3, #12]
   1556c:	697a      	ldr	r2, [r7, #20]
   1556e:	4413      	add	r3, r2
   15570:	2101      	movs	r1, #1
   15572:	4618      	mov	r0, r3
   15574:	f7ff fdc4 	bl	15100 <mp_obj_new_str_via_qstr>
   15578:	60f8      	str	r0, [r7, #12]
        self->cur += 1;
   1557a:	693b      	ldr	r3, [r7, #16]
   1557c:	68db      	ldr	r3, [r3, #12]
   1557e:	1c5a      	adds	r2, r3, #1
   15580:	693b      	ldr	r3, [r7, #16]
   15582:	60da      	str	r2, [r3, #12]
        return o_out;
   15584:	68fb      	ldr	r3, [r7, #12]
   15586:	e000      	b.n	1558a <str_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15588:	2304      	movs	r3, #4
    }
}
   1558a:	4618      	mov	r0, r3
   1558c:	3718      	adds	r7, #24
   1558e:	46bd      	mov	sp, r7
   15590:	bd80      	pop	{r7, pc}

00015592 <mp_obj_new_str_iterator>:

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15592:	b480      	push	{r7}
   15594:	b085      	sub	sp, #20
   15596:	af00      	add	r7, sp, #0
   15598:	6078      	str	r0, [r7, #4]
   1559a:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   1559c:	683b      	ldr	r3, [r7, #0]
   1559e:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   155a0:	68fb      	ldr	r3, [r7, #12]
   155a2:	4a09      	ldr	r2, [pc, #36]	; (155c8 <mp_obj_new_str_iterator+0x36>)
   155a4:	601a      	str	r2, [r3, #0]
    o->iternext = str_it_iternext;
   155a6:	68fb      	ldr	r3, [r7, #12]
   155a8:	4a08      	ldr	r2, [pc, #32]	; (155cc <mp_obj_new_str_iterator+0x3a>)
   155aa:	605a      	str	r2, [r3, #4]
    o->str = str;
   155ac:	68fb      	ldr	r3, [r7, #12]
   155ae:	687a      	ldr	r2, [r7, #4]
   155b0:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   155b2:	68fb      	ldr	r3, [r7, #12]
   155b4:	2200      	movs	r2, #0
   155b6:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   155b8:	68fb      	ldr	r3, [r7, #12]
}
   155ba:	4618      	mov	r0, r3
   155bc:	3714      	adds	r7, #20
   155be:	46bd      	mov	sp, r7
   155c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   155c4:	4770      	bx	lr
   155c6:	bf00      	nop
   155c8:	00023088 	.word	0x00023088
   155cc:	0001551d 	.word	0x0001551d

000155d0 <bytes_it_iternext>:
#endif

STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
   155d0:	b580      	push	{r7, lr}
   155d2:	b086      	sub	sp, #24
   155d4:	af00      	add	r7, sp, #0
   155d6:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   155d8:	687b      	ldr	r3, [r7, #4]
   155da:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   155dc:	693b      	ldr	r3, [r7, #16]
   155de:	689b      	ldr	r3, [r3, #8]
   155e0:	4618      	mov	r0, r3
   155e2:	f7fc fd33 	bl	1204c <MP_OBJ_IS_QSTR>
   155e6:	4603      	mov	r3, r0
   155e8:	2b00      	cmp	r3, #0
   155ea:	d00a      	beq.n	15602 <bytes_it_iternext+0x32>
   155ec:	693b      	ldr	r3, [r7, #16]
   155ee:	689b      	ldr	r3, [r3, #8]
   155f0:	089b      	lsrs	r3, r3, #2
   155f2:	f107 0208 	add.w	r2, r7, #8
   155f6:	4611      	mov	r1, r2
   155f8:	4618      	mov	r0, r3
   155fa:	f7eb fe33 	bl	1264 <qstr_data>
   155fe:	6178      	str	r0, [r7, #20]
   15600:	e007      	b.n	15612 <bytes_it_iternext+0x42>
   15602:	693b      	ldr	r3, [r7, #16]
   15604:	689b      	ldr	r3, [r3, #8]
   15606:	689b      	ldr	r3, [r3, #8]
   15608:	60bb      	str	r3, [r7, #8]
   1560a:	693b      	ldr	r3, [r7, #16]
   1560c:	689b      	ldr	r3, [r3, #8]
   1560e:	68db      	ldr	r3, [r3, #12]
   15610:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15612:	693b      	ldr	r3, [r7, #16]
   15614:	68da      	ldr	r2, [r3, #12]
   15616:	68bb      	ldr	r3, [r7, #8]
   15618:	429a      	cmp	r2, r3
   1561a:	d20f      	bcs.n	1563c <bytes_it_iternext+0x6c>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
   1561c:	693b      	ldr	r3, [r7, #16]
   1561e:	68db      	ldr	r3, [r3, #12]
   15620:	697a      	ldr	r2, [r7, #20]
   15622:	4413      	add	r3, r2
   15624:	781b      	ldrb	r3, [r3, #0]
   15626:	005b      	lsls	r3, r3, #1
   15628:	f043 0301 	orr.w	r3, r3, #1
   1562c:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   1562e:	693b      	ldr	r3, [r7, #16]
   15630:	68db      	ldr	r3, [r3, #12]
   15632:	1c5a      	adds	r2, r3, #1
   15634:	693b      	ldr	r3, [r7, #16]
   15636:	60da      	str	r2, [r3, #12]
        return o_out;
   15638:	68fb      	ldr	r3, [r7, #12]
   1563a:	e000      	b.n	1563e <bytes_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   1563c:	2304      	movs	r3, #4
    }
}
   1563e:	4618      	mov	r0, r3
   15640:	3718      	adds	r7, #24
   15642:	46bd      	mov	sp, r7
   15644:	bd80      	pop	{r7, pc}

00015646 <mp_obj_new_bytes_iterator>:

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15646:	b480      	push	{r7}
   15648:	b085      	sub	sp, #20
   1564a:	af00      	add	r7, sp, #0
   1564c:	6078      	str	r0, [r7, #4]
   1564e:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15650:	683b      	ldr	r3, [r7, #0]
   15652:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15654:	68fb      	ldr	r3, [r7, #12]
   15656:	4a09      	ldr	r2, [pc, #36]	; (1567c <mp_obj_new_bytes_iterator+0x36>)
   15658:	601a      	str	r2, [r3, #0]
    o->iternext = bytes_it_iternext;
   1565a:	68fb      	ldr	r3, [r7, #12]
   1565c:	4a08      	ldr	r2, [pc, #32]	; (15680 <mp_obj_new_bytes_iterator+0x3a>)
   1565e:	605a      	str	r2, [r3, #4]
    o->str = str;
   15660:	68fb      	ldr	r3, [r7, #12]
   15662:	687a      	ldr	r2, [r7, #4]
   15664:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15666:	68fb      	ldr	r3, [r7, #12]
   15668:	2200      	movs	r2, #0
   1566a:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   1566c:	68fb      	ldr	r3, [r7, #12]
}
   1566e:	4618      	mov	r0, r3
   15670:	3714      	adds	r7, #20
   15672:	46bd      	mov	sp, r7
   15674:	f85d 7b04 	ldr.w	r7, [sp], #4
   15678:	4770      	bx	lr
   1567a:	bf00      	nop
   1567c:	00023088 	.word	0x00023088
   15680:	000155d1 	.word	0x000155d1

00015684 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15684:	b480      	push	{r7}
   15686:	b083      	sub	sp, #12
   15688:	af00      	add	r7, sp, #0
   1568a:	6078      	str	r0, [r7, #4]
   1568c:	687b      	ldr	r3, [r7, #4]
   1568e:	f003 0303 	and.w	r3, r3, #3
   15692:	2b00      	cmp	r3, #0
   15694:	bf0c      	ite	eq
   15696:	2301      	moveq	r3, #1
   15698:	2300      	movne	r3, #0
   1569a:	b2db      	uxtb	r3, r3
   1569c:	4618      	mov	r0, r3
   1569e:	370c      	adds	r7, #12
   156a0:	46bd      	mov	sp, r7
   156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   156a6:	4770      	bx	lr

000156a8 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   156a8:	b480      	push	{r7}
   156aa:	b083      	sub	sp, #12
   156ac:	af00      	add	r7, sp, #0
   156ae:	6078      	str	r0, [r7, #4]
   156b0:	687b      	ldr	r3, [r7, #4]
   156b2:	2b00      	cmp	r3, #0
   156b4:	d001      	beq.n	156ba <mp_obj_new_bool+0x12>
   156b6:	4b04      	ldr	r3, [pc, #16]	; (156c8 <mp_obj_new_bool+0x20>)
   156b8:	e000      	b.n	156bc <mp_obj_new_bool+0x14>
   156ba:	4b04      	ldr	r3, [pc, #16]	; (156cc <mp_obj_new_bool+0x24>)
   156bc:	4618      	mov	r0, r3
   156be:	370c      	adds	r7, #12
   156c0:	46bd      	mov	sp, r7
   156c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   156c6:	4770      	bx	lr
   156c8:	0002189c 	.word	0x0002189c
   156cc:	00021894 	.word	0x00021894

000156d0 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   156d0:	b580      	push	{r7, lr}
   156d2:	b084      	sub	sp, #16
   156d4:	af00      	add	r7, sp, #0
   156d6:	60f8      	str	r0, [r7, #12]
   156d8:	60b9      	str	r1, [r7, #8]
   156da:	607a      	str	r2, [r7, #4]
   156dc:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   156de:	687b      	ldr	r3, [r7, #4]
   156e0:	045a      	lsls	r2, r3, #17
   156e2:	683b      	ldr	r3, [r7, #0]
   156e4:	005b      	lsls	r3, r3, #1
   156e6:	431a      	orrs	r2, r3
   156e8:	7e3b      	ldrb	r3, [r7, #24]
   156ea:	2b00      	cmp	r3, #0
   156ec:	d001      	beq.n	156f2 <mp_arg_check_num+0x22>
   156ee:	2301      	movs	r3, #1
   156f0:	e000      	b.n	156f4 <mp_arg_check_num+0x24>
   156f2:	2300      	movs	r3, #0
   156f4:	4313      	orrs	r3, r2
   156f6:	461a      	mov	r2, r3
   156f8:	68b9      	ldr	r1, [r7, #8]
   156fa:	68f8      	ldr	r0, [r7, #12]
   156fc:	f7f7 fbda 	bl	ceb4 <mp_arg_check_num_sig>
}
   15700:	bf00      	nop
   15702:	3710      	adds	r7, #16
   15704:	46bd      	mov	sp, r7
   15706:	bd80      	pop	{r7, pc}

00015708 <mp_obj_tuple_print>:
#include "py/runtime.h"

/******************************************************************************/
/* tuple                                                                      */

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   15708:	b580      	push	{r7, lr}
   1570a:	b086      	sub	sp, #24
   1570c:	af00      	add	r7, sp, #0
   1570e:	60f8      	str	r0, [r7, #12]
   15710:	60b9      	str	r1, [r7, #8]
   15712:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(o_in);
   15714:	68bb      	ldr	r3, [r7, #8]
   15716:	613b      	str	r3, [r7, #16]
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "[");
    } else {
        mp_print_str(print, "(");
   15718:	4918      	ldr	r1, [pc, #96]	; (1577c <mp_obj_tuple_print+0x74>)
   1571a:	68f8      	ldr	r0, [r7, #12]
   1571c:	f7ec f8d2 	bl	18c4 <mp_print_str>
        kind = PRINT_REPR;
   15720:	2301      	movs	r3, #1
   15722:	607b      	str	r3, [r7, #4]
    }
    for (size_t i = 0; i < o->len; i++) {
   15724:	2300      	movs	r3, #0
   15726:	617b      	str	r3, [r7, #20]
   15728:	e013      	b.n	15752 <mp_obj_tuple_print+0x4a>
        if (i > 0) {
   1572a:	697b      	ldr	r3, [r7, #20]
   1572c:	2b00      	cmp	r3, #0
   1572e:	d003      	beq.n	15738 <mp_obj_tuple_print+0x30>
            mp_print_str(print, ", ");
   15730:	4913      	ldr	r1, [pc, #76]	; (15780 <mp_obj_tuple_print+0x78>)
   15732:	68f8      	ldr	r0, [r7, #12]
   15734:	f7ec f8c6 	bl	18c4 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   15738:	693b      	ldr	r3, [r7, #16]
   1573a:	697a      	ldr	r2, [r7, #20]
   1573c:	3202      	adds	r2, #2
   1573e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15742:	687a      	ldr	r2, [r7, #4]
   15744:	4619      	mov	r1, r3
   15746:	68f8      	ldr	r0, [r7, #12]
   15748:	f7f7 ffe3 	bl	d712 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   1574c:	697b      	ldr	r3, [r7, #20]
   1574e:	3301      	adds	r3, #1
   15750:	617b      	str	r3, [r7, #20]
   15752:	693b      	ldr	r3, [r7, #16]
   15754:	685a      	ldr	r2, [r3, #4]
   15756:	697b      	ldr	r3, [r7, #20]
   15758:	429a      	cmp	r2, r3
   1575a:	d8e6      	bhi.n	1572a <mp_obj_tuple_print+0x22>
    }
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "]");
    } else {
        if (o->len == 1) {
   1575c:	693b      	ldr	r3, [r7, #16]
   1575e:	685b      	ldr	r3, [r3, #4]
   15760:	2b01      	cmp	r3, #1
   15762:	d103      	bne.n	1576c <mp_obj_tuple_print+0x64>
            mp_print_str(print, ",");
   15764:	4907      	ldr	r1, [pc, #28]	; (15784 <mp_obj_tuple_print+0x7c>)
   15766:	68f8      	ldr	r0, [r7, #12]
   15768:	f7ec f8ac 	bl	18c4 <mp_print_str>
        }
        mp_print_str(print, ")");
   1576c:	4906      	ldr	r1, [pc, #24]	; (15788 <mp_obj_tuple_print+0x80>)
   1576e:	68f8      	ldr	r0, [r7, #12]
   15770:	f7ec f8a8 	bl	18c4 <mp_print_str>
    }
}
   15774:	bf00      	nop
   15776:	3718      	adds	r7, #24
   15778:	46bd      	mov	sp, r7
   1577a:	bd80      	pop	{r7, pc}
   1577c:	000238d4 	.word	0x000238d4
   15780:	000238d8 	.word	0x000238d8
   15784:	000238dc 	.word	0x000238dc
   15788:	000238e0 	.word	0x000238e0

0001578c <mp_obj_tuple_make_new>:

STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1578c:	b580      	push	{r7, lr}
   1578e:	b08c      	sub	sp, #48	; 0x30
   15790:	af02      	add	r7, sp, #8
   15792:	60f8      	str	r0, [r7, #12]
   15794:	60b9      	str	r1, [r7, #8]
   15796:	607a      	str	r2, [r7, #4]
   15798:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   1579a:	2300      	movs	r3, #0
   1579c:	9300      	str	r3, [sp, #0]
   1579e:	2301      	movs	r3, #1
   157a0:	2200      	movs	r2, #0
   157a2:	6879      	ldr	r1, [r7, #4]
   157a4:	68b8      	ldr	r0, [r7, #8]
   157a6:	f7ff ff93 	bl	156d0 <mp_arg_check_num>

    switch (n_args) {
   157aa:	68bb      	ldr	r3, [r7, #8]
   157ac:	2b00      	cmp	r3, #0
   157ae:	d101      	bne.n	157b4 <mp_obj_tuple_make_new+0x28>
        case 0:
            // return a empty tuple
            return mp_const_empty_tuple;
   157b0:	4b27      	ldr	r3, [pc, #156]	; (15850 <mp_obj_tuple_make_new+0xc4>)
   157b2:	e048      	b.n	15846 <mp_obj_tuple_make_new+0xba>

        case 1:
        default: {
            // 1 argument, an iterable from which we make a new tuple
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   157b4:	683b      	ldr	r3, [r7, #0]
   157b6:	681b      	ldr	r3, [r3, #0]
   157b8:	4618      	mov	r0, r3
   157ba:	f7ff ff63 	bl	15684 <MP_OBJ_IS_OBJ>
   157be:	4603      	mov	r3, r0
   157c0:	2b00      	cmp	r3, #0
   157c2:	d008      	beq.n	157d6 <mp_obj_tuple_make_new+0x4a>
   157c4:	683b      	ldr	r3, [r7, #0]
   157c6:	681b      	ldr	r3, [r3, #0]
   157c8:	681b      	ldr	r3, [r3, #0]
   157ca:	4a22      	ldr	r2, [pc, #136]	; (15854 <mp_obj_tuple_make_new+0xc8>)
   157cc:	4293      	cmp	r3, r2
   157ce:	d102      	bne.n	157d6 <mp_obj_tuple_make_new+0x4a>
                return args[0];
   157d0:	683b      	ldr	r3, [r7, #0]
   157d2:	681b      	ldr	r3, [r3, #0]
   157d4:	e037      	b.n	15846 <mp_obj_tuple_make_new+0xba>
            }

            // TODO optimise for cases where we know the length of the iterator

            size_t alloc = 4;
   157d6:	2304      	movs	r3, #4
   157d8:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len = 0;
   157da:	2300      	movs	r3, #0
   157dc:	623b      	str	r3, [r7, #32]
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   157de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157e0:	009b      	lsls	r3, r3, #2
   157e2:	4618      	mov	r0, r3
   157e4:	f7ea fd9a 	bl	31c <m_malloc>
   157e8:	61f8      	str	r0, [r7, #28]

            mp_obj_t iterable = mp_getiter(args[0], NULL);
   157ea:	683b      	ldr	r3, [r7, #0]
   157ec:	681b      	ldr	r3, [r3, #0]
   157ee:	2100      	movs	r1, #0
   157f0:	4618      	mov	r0, r3
   157f2:	f7f6 ffff 	bl	c7f4 <mp_getiter>
   157f6:	61b8      	str	r0, [r7, #24]
            mp_obj_t item;
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   157f8:	e015      	b.n	15826 <mp_obj_tuple_make_new+0x9a>
                if (len >= alloc) {
   157fa:	6a3a      	ldr	r2, [r7, #32]
   157fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157fe:	429a      	cmp	r2, r3
   15800:	d309      	bcc.n	15816 <mp_obj_tuple_make_new+0x8a>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   15802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15804:	00db      	lsls	r3, r3, #3
   15806:	4619      	mov	r1, r3
   15808:	69f8      	ldr	r0, [r7, #28]
   1580a:	f7ea fdb9 	bl	380 <m_realloc>
   1580e:	61f8      	str	r0, [r7, #28]
                    alloc *= 2;
   15810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15812:	005b      	lsls	r3, r3, #1
   15814:	627b      	str	r3, [r7, #36]	; 0x24
                }
                items[len++] = item;
   15816:	6a3b      	ldr	r3, [r7, #32]
   15818:	1c5a      	adds	r2, r3, #1
   1581a:	623a      	str	r2, [r7, #32]
   1581c:	009b      	lsls	r3, r3, #2
   1581e:	69fa      	ldr	r2, [r7, #28]
   15820:	4413      	add	r3, r2
   15822:	697a      	ldr	r2, [r7, #20]
   15824:	601a      	str	r2, [r3, #0]
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15826:	69b8      	ldr	r0, [r7, #24]
   15828:	f7f7 f866 	bl	c8f8 <mp_iternext>
   1582c:	6178      	str	r0, [r7, #20]
   1582e:	697b      	ldr	r3, [r7, #20]
   15830:	2b04      	cmp	r3, #4
   15832:	d1e2      	bne.n	157fa <mp_obj_tuple_make_new+0x6e>
            }

            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   15834:	69f9      	ldr	r1, [r7, #28]
   15836:	6a38      	ldr	r0, [r7, #32]
   15838:	f000 f9ec 	bl	15c14 <mp_obj_new_tuple>
   1583c:	6138      	str	r0, [r7, #16]
            m_del(mp_obj_t, items, alloc);
   1583e:	69f8      	ldr	r0, [r7, #28]
   15840:	f7ea fdca 	bl	3d8 <m_free>

            return tuple;
   15844:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   15846:	4618      	mov	r0, r3
   15848:	3728      	adds	r7, #40	; 0x28
   1584a:	46bd      	mov	sp, r7
   1584c:	bd80      	pop	{r7, pc}
   1584e:	bf00      	nop
   15850:	00023a5c 	.word	0x00023a5c
   15854:	00023a20 	.word	0x00023a20

00015858 <tuple_cmp_helper>:

// Don't pass MP_BINARY_OP_NOT_EQUAL here
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   15858:	b580      	push	{r7, lr}
   1585a:	b08a      	sub	sp, #40	; 0x28
   1585c:	af02      	add	r7, sp, #8
   1585e:	60f8      	str	r0, [r7, #12]
   15860:	60b9      	str	r1, [r7, #8]
   15862:	607a      	str	r2, [r7, #4]
    // type check is done on getiter method to allow tuple, namedtuple, attrtuple
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   15864:	68b8      	ldr	r0, [r7, #8]
   15866:	f7f7 ff23 	bl	d6b0 <mp_obj_get_type>
   1586a:	4603      	mov	r3, r0
   1586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1586e:	4a1e      	ldr	r2, [pc, #120]	; (158e8 <tuple_cmp_helper+0x90>)
   15870:	4293      	cmp	r3, r2
   15872:	d005      	beq.n	15880 <tuple_cmp_helper+0x28>
   15874:	4b1d      	ldr	r3, [pc, #116]	; (158ec <tuple_cmp_helper+0x94>)
   15876:	4a1e      	ldr	r2, [pc, #120]	; (158f0 <tuple_cmp_helper+0x98>)
   15878:	2168      	movs	r1, #104	; 0x68
   1587a:	481e      	ldr	r0, [pc, #120]	; (158f4 <tuple_cmp_helper+0x9c>)
   1587c:	f005 fe00 	bl	1b480 <__assert_func>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   15880:	6878      	ldr	r0, [r7, #4]
   15882:	f7f7 ff15 	bl	d6b0 <mp_obj_get_type>
   15886:	61f8      	str	r0, [r7, #28]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15888:	68bb      	ldr	r3, [r7, #8]
   1588a:	61bb      	str	r3, [r7, #24]
    if (another_type->getiter != mp_obj_tuple_getiter) {
   1588c:	69fb      	ldr	r3, [r7, #28]
   1588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15890:	4a15      	ldr	r2, [pc, #84]	; (158e8 <tuple_cmp_helper+0x90>)
   15892:	4293      	cmp	r3, r2
   15894:	d00e      	beq.n	158b4 <tuple_cmp_helper+0x5c>
        // Slow path for user subclasses
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   15896:	4918      	ldr	r1, [pc, #96]	; (158f8 <tuple_cmp_helper+0xa0>)
   15898:	6878      	ldr	r0, [r7, #4]
   1589a:	f001 fd5d 	bl	17358 <mp_instance_cast_to_native_base>
   1589e:	6078      	str	r0, [r7, #4]
        if (another_in == MP_OBJ_NULL) {
   158a0:	687b      	ldr	r3, [r7, #4]
   158a2:	2b00      	cmp	r3, #0
   158a4:	d106      	bne.n	158b4 <tuple_cmp_helper+0x5c>
            if (op == MP_BINARY_OP_EQUAL) {
   158a6:	68fb      	ldr	r3, [r7, #12]
   158a8:	2b02      	cmp	r3, #2
   158aa:	d101      	bne.n	158b0 <tuple_cmp_helper+0x58>
                return mp_const_false;
   158ac:	4b13      	ldr	r3, [pc, #76]	; (158fc <tuple_cmp_helper+0xa4>)
   158ae:	e017      	b.n	158e0 <tuple_cmp_helper+0x88>
            }
            return MP_OBJ_NULL;
   158b0:	2300      	movs	r3, #0
   158b2:	e015      	b.n	158e0 <tuple_cmp_helper+0x88>
        }
    }
    mp_obj_tuple_t *another = MP_OBJ_TO_PTR(another_in);
   158b4:	687b      	ldr	r3, [r7, #4]
   158b6:	617b      	str	r3, [r7, #20]

    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   158b8:	69bb      	ldr	r3, [r7, #24]
   158ba:	f103 0108 	add.w	r1, r3, #8
   158be:	69bb      	ldr	r3, [r7, #24]
   158c0:	685a      	ldr	r2, [r3, #4]
   158c2:	697b      	ldr	r3, [r7, #20]
   158c4:	f103 0008 	add.w	r0, r3, #8
   158c8:	697b      	ldr	r3, [r7, #20]
   158ca:	685b      	ldr	r3, [r3, #4]
   158cc:	9300      	str	r3, [sp, #0]
   158ce:	4603      	mov	r3, r0
   158d0:	68f8      	ldr	r0, [r7, #12]
   158d2:	f001 ff66 	bl	177a2 <mp_seq_cmp_objs>
   158d6:	4603      	mov	r3, r0
   158d8:	4618      	mov	r0, r3
   158da:	f7ff fee5 	bl	156a8 <mp_obj_new_bool>
   158de:	4603      	mov	r3, r0
}
   158e0:	4618      	mov	r0, r3
   158e2:	3720      	adds	r7, #32
   158e4:	46bd      	mov	sp, r7
   158e6:	bd80      	pop	{r7, pc}
   158e8:	00015d77 	.word	0x00015d77
   158ec:	000238e4 	.word	0x000238e4
   158f0:	00023a8c 	.word	0x00023a8c
   158f4:	00023920 	.word	0x00023920
   158f8:	00023a20 	.word	0x00023a20
   158fc:	00021894 	.word	0x00021894

00015900 <mp_obj_tuple_unary_op>:

mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   15900:	b580      	push	{r7, lr}
   15902:	b086      	sub	sp, #24
   15904:	af00      	add	r7, sp, #0
   15906:	6078      	str	r0, [r7, #4]
   15908:	6039      	str	r1, [r7, #0]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   1590a:	683b      	ldr	r3, [r7, #0]
   1590c:	60fb      	str	r3, [r7, #12]
    switch (op) {
   1590e:	687b      	ldr	r3, [r7, #4]
   15910:	2b05      	cmp	r3, #5
   15912:	d02f      	beq.n	15974 <mp_obj_tuple_unary_op+0x74>
   15914:	2b06      	cmp	r3, #6
   15916:	d00d      	beq.n	15934 <mp_obj_tuple_unary_op+0x34>
   15918:	2b04      	cmp	r3, #4
   1591a:	d131      	bne.n	15980 <mp_obj_tuple_unary_op+0x80>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   1591c:	68fb      	ldr	r3, [r7, #12]
   1591e:	685b      	ldr	r3, [r3, #4]
   15920:	2b00      	cmp	r3, #0
   15922:	bf14      	ite	ne
   15924:	2301      	movne	r3, #1
   15926:	2300      	moveq	r3, #0
   15928:	b2db      	uxtb	r3, r3
   1592a:	4618      	mov	r0, r3
   1592c:	f7ff febc 	bl	156a8 <mp_obj_new_bool>
   15930:	4603      	mov	r3, r0
   15932:	e026      	b.n	15982 <mp_obj_tuple_unary_op+0x82>
        case MP_UNARY_OP_HASH: {
            // start hash with pointer to empty tuple, to make it fairly unique
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   15934:	4b15      	ldr	r3, [pc, #84]	; (1598c <mp_obj_tuple_unary_op+0x8c>)
   15936:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15938:	2300      	movs	r3, #0
   1593a:	613b      	str	r3, [r7, #16]
   1593c:	e010      	b.n	15960 <mp_obj_tuple_unary_op+0x60>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   1593e:	68fb      	ldr	r3, [r7, #12]
   15940:	693a      	ldr	r2, [r7, #16]
   15942:	3202      	adds	r2, #2
   15944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15948:	4619      	mov	r1, r3
   1594a:	2006      	movs	r0, #6
   1594c:	f7f5 fe58 	bl	b600 <mp_unary_op>
   15950:	4603      	mov	r3, r0
   15952:	105b      	asrs	r3, r3, #1
   15954:	697a      	ldr	r2, [r7, #20]
   15956:	4413      	add	r3, r2
   15958:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   1595a:	693b      	ldr	r3, [r7, #16]
   1595c:	3301      	adds	r3, #1
   1595e:	613b      	str	r3, [r7, #16]
   15960:	68fb      	ldr	r3, [r7, #12]
   15962:	685a      	ldr	r2, [r3, #4]
   15964:	693b      	ldr	r3, [r7, #16]
   15966:	429a      	cmp	r2, r3
   15968:	d8e9      	bhi.n	1593e <mp_obj_tuple_unary_op+0x3e>
            }
            return MP_OBJ_NEW_SMALL_INT(hash);
   1596a:	697b      	ldr	r3, [r7, #20]
   1596c:	005b      	lsls	r3, r3, #1
   1596e:	f043 0301 	orr.w	r3, r3, #1
   15972:	e006      	b.n	15982 <mp_obj_tuple_unary_op+0x82>
        }
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   15974:	68fb      	ldr	r3, [r7, #12]
   15976:	685b      	ldr	r3, [r3, #4]
   15978:	005b      	lsls	r3, r3, #1
   1597a:	f043 0301 	orr.w	r3, r3, #1
   1597e:	e000      	b.n	15982 <mp_obj_tuple_unary_op+0x82>
        default: return MP_OBJ_NULL; // op not supported
   15980:	2300      	movs	r3, #0
    }
}
   15982:	4618      	mov	r0, r3
   15984:	3718      	adds	r7, #24
   15986:	46bd      	mov	sp, r7
   15988:	bd80      	pop	{r7, pc}
   1598a:	bf00      	nop
   1598c:	00023a5c 	.word	0x00023a5c

00015990 <mp_obj_tuple_binary_op>:

mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   15990:	b580      	push	{r7, lr}
   15992:	b08c      	sub	sp, #48	; 0x30
   15994:	af02      	add	r7, sp, #8
   15996:	60f8      	str	r0, [r7, #12]
   15998:	60b9      	str	r1, [r7, #8]
   1599a:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(lhs);
   1599c:	68bb      	ldr	r3, [r7, #8]
   1599e:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
   159a0:	68fb      	ldr	r3, [r7, #12]
   159a2:	2b1c      	cmp	r3, #28
   159a4:	f200 80ac 	bhi.w	15b00 <mp_obj_tuple_binary_op+0x170>
   159a8:	a201      	add	r2, pc, #4	; (adr r2, 159b0 <mp_obj_tuple_binary_op+0x20>)
   159aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   159ae:	bf00      	nop
   159b0:	00015af3 	.word	0x00015af3
   159b4:	00015af3 	.word	0x00015af3
   159b8:	00015af3 	.word	0x00015af3
   159bc:	00015af3 	.word	0x00015af3
   159c0:	00015af3 	.word	0x00015af3
   159c4:	00015b01 	.word	0x00015b01
   159c8:	00015b01 	.word	0x00015b01
   159cc:	00015b01 	.word	0x00015b01
   159d0:	00015b01 	.word	0x00015b01
   159d4:	00015b01 	.word	0x00015b01
   159d8:	00015b01 	.word	0x00015b01
   159dc:	00015b01 	.word	0x00015b01
   159e0:	00015b01 	.word	0x00015b01
   159e4:	00015b01 	.word	0x00015b01
   159e8:	00015a25 	.word	0x00015a25
   159ec:	00015b01 	.word	0x00015b01
   159f0:	00015a99 	.word	0x00015a99
   159f4:	00015b01 	.word	0x00015b01
   159f8:	00015b01 	.word	0x00015b01
   159fc:	00015b01 	.word	0x00015b01
   15a00:	00015b01 	.word	0x00015b01
   15a04:	00015b01 	.word	0x00015b01
   15a08:	00015b01 	.word	0x00015b01
   15a0c:	00015b01 	.word	0x00015b01
   15a10:	00015b01 	.word	0x00015b01
   15a14:	00015b01 	.word	0x00015b01
   15a18:	00015a25 	.word	0x00015a25
   15a1c:	00015b01 	.word	0x00015b01
   15a20:	00015a99 	.word	0x00015a99
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   15a24:	6878      	ldr	r0, [r7, #4]
   15a26:	f7f7 fe43 	bl	d6b0 <mp_obj_get_type>
   15a2a:	4603      	mov	r3, r0
   15a2c:	4937      	ldr	r1, [pc, #220]	; (15b0c <mp_obj_tuple_binary_op+0x17c>)
   15a2e:	4618      	mov	r0, r3
   15a30:	f001 fba0 	bl	17174 <mp_obj_is_subclass_fast>
   15a34:	4603      	mov	r3, r0
   15a36:	f083 0301 	eor.w	r3, r3, #1
   15a3a:	b2db      	uxtb	r3, r3
   15a3c:	2b00      	cmp	r3, #0
   15a3e:	d001      	beq.n	15a44 <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   15a40:	2300      	movs	r3, #0
   15a42:	e05e      	b.n	15b02 <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *p = MP_OBJ_TO_PTR(rhs);
   15a44:	687b      	ldr	r3, [r7, #4]
   15a46:	623b      	str	r3, [r7, #32]
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   15a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a4a:	685a      	ldr	r2, [r3, #4]
   15a4c:	6a3b      	ldr	r3, [r7, #32]
   15a4e:	685b      	ldr	r3, [r3, #4]
   15a50:	4413      	add	r3, r2
   15a52:	2100      	movs	r1, #0
   15a54:	4618      	mov	r0, r3
   15a56:	f000 f8dd 	bl	15c14 <mp_obj_new_tuple>
   15a5a:	61f8      	str	r0, [r7, #28]
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   15a5c:	69fb      	ldr	r3, [r7, #28]
   15a5e:	f103 0008 	add.w	r0, r3, #8
   15a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a64:	f103 0108 	add.w	r1, r3, #8
   15a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a6a:	685b      	ldr	r3, [r3, #4]
   15a6c:	009b      	lsls	r3, r3, #2
   15a6e:	461a      	mov	r2, r3
   15a70:	f007 f832 	bl	1cad8 <memcpy>
   15a74:	69fb      	ldr	r3, [r7, #28]
   15a76:	f103 0208 	add.w	r2, r3, #8
   15a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a7c:	685b      	ldr	r3, [r3, #4]
   15a7e:	009b      	lsls	r3, r3, #2
   15a80:	18d0      	adds	r0, r2, r3
   15a82:	6a3b      	ldr	r3, [r7, #32]
   15a84:	f103 0108 	add.w	r1, r3, #8
   15a88:	6a3b      	ldr	r3, [r7, #32]
   15a8a:	685b      	ldr	r3, [r3, #4]
   15a8c:	009b      	lsls	r3, r3, #2
   15a8e:	461a      	mov	r2, r3
   15a90:	f007 f822 	bl	1cad8 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   15a94:	69fb      	ldr	r3, [r7, #28]
   15a96:	e034      	b.n	15b02 <mp_obj_tuple_binary_op+0x172>
        }
        case MP_BINARY_OP_MULTIPLY:
        case MP_BINARY_OP_INPLACE_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   15a98:	f107 0314 	add.w	r3, r7, #20
   15a9c:	4619      	mov	r1, r3
   15a9e:	6878      	ldr	r0, [r7, #4]
   15aa0:	f7f8 f842 	bl	db28 <mp_obj_get_int_maybe>
   15aa4:	4603      	mov	r3, r0
   15aa6:	f083 0301 	eor.w	r3, r3, #1
   15aaa:	b2db      	uxtb	r3, r3
   15aac:	2b00      	cmp	r3, #0
   15aae:	d001      	beq.n	15ab4 <mp_obj_tuple_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   15ab0:	2300      	movs	r3, #0
   15ab2:	e026      	b.n	15b02 <mp_obj_tuple_binary_op+0x172>
            }
            if (n <= 0) {
   15ab4:	697b      	ldr	r3, [r7, #20]
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	dc01      	bgt.n	15abe <mp_obj_tuple_binary_op+0x12e>
                return mp_const_empty_tuple;
   15aba:	4b15      	ldr	r3, [pc, #84]	; (15b10 <mp_obj_tuple_binary_op+0x180>)
   15abc:	e021      	b.n	15b02 <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   15abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ac0:	685b      	ldr	r3, [r3, #4]
   15ac2:	697a      	ldr	r2, [r7, #20]
   15ac4:	fb02 f303 	mul.w	r3, r2, r3
   15ac8:	2100      	movs	r1, #0
   15aca:	4618      	mov	r0, r3
   15acc:	f000 f8a2 	bl	15c14 <mp_obj_new_tuple>
   15ad0:	61b8      	str	r0, [r7, #24]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   15ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ad4:	f103 0008 	add.w	r0, r3, #8
   15ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ada:	685a      	ldr	r2, [r3, #4]
   15adc:	697b      	ldr	r3, [r7, #20]
   15ade:	4619      	mov	r1, r3
   15ae0:	69bb      	ldr	r3, [r7, #24]
   15ae2:	3308      	adds	r3, #8
   15ae4:	9300      	str	r3, [sp, #0]
   15ae6:	460b      	mov	r3, r1
   15ae8:	2104      	movs	r1, #4
   15aea:	f001 fd99 	bl	17620 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   15aee:	69bb      	ldr	r3, [r7, #24]
   15af0:	e007      	b.n	15b02 <mp_obj_tuple_binary_op+0x172>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return tuple_cmp_helper(op, lhs, rhs);
   15af2:	687a      	ldr	r2, [r7, #4]
   15af4:	68b9      	ldr	r1, [r7, #8]
   15af6:	68f8      	ldr	r0, [r7, #12]
   15af8:	f7ff feae 	bl	15858 <tuple_cmp_helper>
   15afc:	4603      	mov	r3, r0
   15afe:	e000      	b.n	15b02 <mp_obj_tuple_binary_op+0x172>

        default:
            return MP_OBJ_NULL; // op not supported
   15b00:	2300      	movs	r3, #0
    }
}
   15b02:	4618      	mov	r0, r3
   15b04:	3728      	adds	r7, #40	; 0x28
   15b06:	46bd      	mov	sp, r7
   15b08:	bd80      	pop	{r7, pc}
   15b0a:	bf00      	nop
   15b0c:	00023a20 	.word	0x00023a20
   15b10:	00023a5c 	.word	0x00023a5c

00015b14 <mp_obj_tuple_subscr>:

mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   15b14:	b580      	push	{r7, lr}
   15b16:	b086      	sub	sp, #24
   15b18:	af00      	add	r7, sp, #0
   15b1a:	60f8      	str	r0, [r7, #12]
   15b1c:	60b9      	str	r1, [r7, #8]
   15b1e:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   15b20:	687b      	ldr	r3, [r7, #4]
   15b22:	2b08      	cmp	r3, #8
   15b24:	d110      	bne.n	15b48 <mp_obj_tuple_subscr+0x34>
        // load
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15b26:	68fb      	ldr	r3, [r7, #12]
   15b28:	617b      	str	r3, [r7, #20]
            mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(slice.stop - slice.start, NULL));
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   15b2a:	697b      	ldr	r3, [r7, #20]
   15b2c:	6818      	ldr	r0, [r3, #0]
   15b2e:	697b      	ldr	r3, [r7, #20]
   15b30:	6859      	ldr	r1, [r3, #4]
   15b32:	2300      	movs	r3, #0
   15b34:	68ba      	ldr	r2, [r7, #8]
   15b36:	f7f8 f887 	bl	dc48 <mp_get_index>
   15b3a:	6138      	str	r0, [r7, #16]
        return self->items[index_value];
   15b3c:	697b      	ldr	r3, [r7, #20]
   15b3e:	693a      	ldr	r2, [r7, #16]
   15b40:	3202      	adds	r2, #2
   15b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15b46:	e000      	b.n	15b4a <mp_obj_tuple_subscr+0x36>
    } else {
        return MP_OBJ_NULL; // op not supported
   15b48:	2300      	movs	r3, #0
    }
}
   15b4a:	4618      	mov	r0, r3
   15b4c:	3718      	adds	r7, #24
   15b4e:	46bd      	mov	sp, r7
   15b50:	bd80      	pop	{r7, pc}

00015b52 <tuple_count>:

STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   15b52:	b580      	push	{r7, lr}
   15b54:	b084      	sub	sp, #16
   15b56:	af00      	add	r7, sp, #0
   15b58:	6078      	str	r0, [r7, #4]
   15b5a:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15b5c:	6878      	ldr	r0, [r7, #4]
   15b5e:	f7ff fd91 	bl	15684 <MP_OBJ_IS_OBJ>
   15b62:	4603      	mov	r3, r0
   15b64:	2b00      	cmp	r3, #0
   15b66:	d004      	beq.n	15b72 <tuple_count+0x20>
   15b68:	687b      	ldr	r3, [r7, #4]
   15b6a:	681b      	ldr	r3, [r3, #0]
   15b6c:	4a0c      	ldr	r2, [pc, #48]	; (15ba0 <tuple_count+0x4e>)
   15b6e:	4293      	cmp	r3, r2
   15b70:	d005      	beq.n	15b7e <tuple_count+0x2c>
   15b72:	4b0c      	ldr	r3, [pc, #48]	; (15ba4 <tuple_count+0x52>)
   15b74:	4a0c      	ldr	r2, [pc, #48]	; (15ba8 <tuple_count+0x56>)
   15b76:	21c8      	movs	r1, #200	; 0xc8
   15b78:	480c      	ldr	r0, [pc, #48]	; (15bac <tuple_count+0x5a>)
   15b7a:	f005 fc81 	bl	1b480 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15b7e:	687b      	ldr	r3, [r7, #4]
   15b80:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   15b82:	68fb      	ldr	r3, [r7, #12]
   15b84:	f103 0008 	add.w	r0, r3, #8
   15b88:	68fb      	ldr	r3, [r7, #12]
   15b8a:	685b      	ldr	r3, [r3, #4]
   15b8c:	683a      	ldr	r2, [r7, #0]
   15b8e:	4619      	mov	r1, r3
   15b90:	f001 fed4 	bl	1793c <mp_seq_count_obj>
   15b94:	4603      	mov	r3, r0
}
   15b96:	4618      	mov	r0, r3
   15b98:	3710      	adds	r7, #16
   15b9a:	46bd      	mov	sp, r7
   15b9c:	bd80      	pop	{r7, pc}
   15b9e:	bf00      	nop
   15ba0:	00023a20 	.word	0x00023a20
   15ba4:	00023934 	.word	0x00023934
   15ba8:	00023aa0 	.word	0x00023aa0
   15bac:	00023920 	.word	0x00023920

00015bb0 <tuple_index>:
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tuple_count_obj, tuple_count);

STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   15bb0:	b580      	push	{r7, lr}
   15bb2:	b084      	sub	sp, #16
   15bb4:	af00      	add	r7, sp, #0
   15bb6:	6078      	str	r0, [r7, #4]
   15bb8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   15bba:	683b      	ldr	r3, [r7, #0]
   15bbc:	681b      	ldr	r3, [r3, #0]
   15bbe:	4618      	mov	r0, r3
   15bc0:	f7ff fd60 	bl	15684 <MP_OBJ_IS_OBJ>
   15bc4:	4603      	mov	r3, r0
   15bc6:	2b00      	cmp	r3, #0
   15bc8:	d005      	beq.n	15bd6 <tuple_index+0x26>
   15bca:	683b      	ldr	r3, [r7, #0]
   15bcc:	681b      	ldr	r3, [r3, #0]
   15bce:	681b      	ldr	r3, [r3, #0]
   15bd0:	4a0c      	ldr	r2, [pc, #48]	; (15c04 <tuple_index+0x54>)
   15bd2:	4293      	cmp	r3, r2
   15bd4:	d005      	beq.n	15be2 <tuple_index+0x32>
   15bd6:	4b0c      	ldr	r3, [pc, #48]	; (15c08 <tuple_index+0x58>)
   15bd8:	4a0c      	ldr	r2, [pc, #48]	; (15c0c <tuple_index+0x5c>)
   15bda:	21cf      	movs	r1, #207	; 0xcf
   15bdc:	480c      	ldr	r0, [pc, #48]	; (15c10 <tuple_index+0x60>)
   15bde:	f005 fc4f 	bl	1b480 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(args[0]);
   15be2:	683b      	ldr	r3, [r7, #0]
   15be4:	681b      	ldr	r3, [r3, #0]
   15be6:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   15be8:	68fb      	ldr	r3, [r7, #12]
   15bea:	f103 0008 	add.w	r0, r3, #8
   15bee:	68fb      	ldr	r3, [r7, #12]
   15bf0:	6859      	ldr	r1, [r3, #4]
   15bf2:	683b      	ldr	r3, [r7, #0]
   15bf4:	687a      	ldr	r2, [r7, #4]
   15bf6:	f001 fe51 	bl	1789c <mp_seq_index_obj>
   15bfa:	4603      	mov	r3, r0
}
   15bfc:	4618      	mov	r0, r3
   15bfe:	3710      	adds	r7, #16
   15c00:	46bd      	mov	sp, r7
   15c02:	bd80      	pop	{r7, pc}
   15c04:	00023a20 	.word	0x00023a20
   15c08:	00023998 	.word	0x00023998
   15c0c:	00023aac 	.word	0x00023aac
   15c10:	00023920 	.word	0x00023920

00015c14 <mp_obj_new_tuple>:
};

// the zero-length tuple
const mp_obj_tuple_t mp_const_empty_tuple_obj = {{&mp_type_tuple}, 0};

mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   15c14:	b580      	push	{r7, lr}
   15c16:	b084      	sub	sp, #16
   15c18:	af00      	add	r7, sp, #0
   15c1a:	6078      	str	r0, [r7, #4]
   15c1c:	6039      	str	r1, [r7, #0]
    if (n == 0) {
   15c1e:	687b      	ldr	r3, [r7, #4]
   15c20:	2b00      	cmp	r3, #0
   15c22:	d101      	bne.n	15c28 <mp_obj_new_tuple+0x14>
        return mp_const_empty_tuple;
   15c24:	4b15      	ldr	r3, [pc, #84]	; (15c7c <mp_obj_new_tuple+0x68>)
   15c26:	e024      	b.n	15c72 <mp_obj_new_tuple+0x5e>
    }
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   15c28:	687b      	ldr	r3, [r7, #4]
   15c2a:	3302      	adds	r3, #2
   15c2c:	009b      	lsls	r3, r3, #2
   15c2e:	4618      	mov	r0, r3
   15c30:	f7ea fb74 	bl	31c <m_malloc>
   15c34:	60b8      	str	r0, [r7, #8]
    o->base.type = &mp_type_tuple;
   15c36:	68bb      	ldr	r3, [r7, #8]
   15c38:	4a11      	ldr	r2, [pc, #68]	; (15c80 <mp_obj_new_tuple+0x6c>)
   15c3a:	601a      	str	r2, [r3, #0]
    o->len = n;
   15c3c:	68bb      	ldr	r3, [r7, #8]
   15c3e:	687a      	ldr	r2, [r7, #4]
   15c40:	605a      	str	r2, [r3, #4]
    if (items) {
   15c42:	683b      	ldr	r3, [r7, #0]
   15c44:	2b00      	cmp	r3, #0
   15c46:	d013      	beq.n	15c70 <mp_obj_new_tuple+0x5c>
        for (size_t i = 0; i < n; i++) {
   15c48:	2300      	movs	r3, #0
   15c4a:	60fb      	str	r3, [r7, #12]
   15c4c:	e00c      	b.n	15c68 <mp_obj_new_tuple+0x54>
            o->items[i] = items[i];
   15c4e:	68fb      	ldr	r3, [r7, #12]
   15c50:	009b      	lsls	r3, r3, #2
   15c52:	683a      	ldr	r2, [r7, #0]
   15c54:	4413      	add	r3, r2
   15c56:	6819      	ldr	r1, [r3, #0]
   15c58:	68bb      	ldr	r3, [r7, #8]
   15c5a:	68fa      	ldr	r2, [r7, #12]
   15c5c:	3202      	adds	r2, #2
   15c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   15c62:	68fb      	ldr	r3, [r7, #12]
   15c64:	3301      	adds	r3, #1
   15c66:	60fb      	str	r3, [r7, #12]
   15c68:	68fa      	ldr	r2, [r7, #12]
   15c6a:	687b      	ldr	r3, [r7, #4]
   15c6c:	429a      	cmp	r2, r3
   15c6e:	d3ee      	bcc.n	15c4e <mp_obj_new_tuple+0x3a>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   15c70:	68bb      	ldr	r3, [r7, #8]
}
   15c72:	4618      	mov	r0, r3
   15c74:	3710      	adds	r7, #16
   15c76:	46bd      	mov	sp, r7
   15c78:	bd80      	pop	{r7, pc}
   15c7a:	bf00      	nop
   15c7c:	00023a5c 	.word	0x00023a5c
   15c80:	00023a20 	.word	0x00023a20

00015c84 <mp_obj_tuple_get>:

void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   15c84:	b580      	push	{r7, lr}
   15c86:	b086      	sub	sp, #24
   15c88:	af00      	add	r7, sp, #0
   15c8a:	60f8      	str	r0, [r7, #12]
   15c8c:	60b9      	str	r1, [r7, #8]
   15c8e:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15c90:	68f8      	ldr	r0, [r7, #12]
   15c92:	f7ff fcf7 	bl	15684 <MP_OBJ_IS_OBJ>
   15c96:	4603      	mov	r3, r0
   15c98:	2b00      	cmp	r3, #0
   15c9a:	d004      	beq.n	15ca6 <mp_obj_tuple_get+0x22>
   15c9c:	68fb      	ldr	r3, [r7, #12]
   15c9e:	681b      	ldr	r3, [r3, #0]
   15ca0:	4a0b      	ldr	r2, [pc, #44]	; (15cd0 <mp_obj_tuple_get+0x4c>)
   15ca2:	4293      	cmp	r3, r2
   15ca4:	d005      	beq.n	15cb2 <mp_obj_tuple_get+0x2e>
   15ca6:	4b0b      	ldr	r3, [pc, #44]	; (15cd4 <mp_obj_tuple_get+0x50>)
   15ca8:	4a0b      	ldr	r2, [pc, #44]	; (15cd8 <mp_obj_tuple_get+0x54>)
   15caa:	21fb      	movs	r1, #251	; 0xfb
   15cac:	480b      	ldr	r0, [pc, #44]	; (15cdc <mp_obj_tuple_get+0x58>)
   15cae:	f005 fbe7 	bl	1b480 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15cb2:	68fb      	ldr	r3, [r7, #12]
   15cb4:	617b      	str	r3, [r7, #20]
    *len = self->len;
   15cb6:	697b      	ldr	r3, [r7, #20]
   15cb8:	685a      	ldr	r2, [r3, #4]
   15cba:	68bb      	ldr	r3, [r7, #8]
   15cbc:	601a      	str	r2, [r3, #0]
    *items = &self->items[0];
   15cbe:	697b      	ldr	r3, [r7, #20]
   15cc0:	f103 0208 	add.w	r2, r3, #8
   15cc4:	687b      	ldr	r3, [r7, #4]
   15cc6:	601a      	str	r2, [r3, #0]
}
   15cc8:	bf00      	nop
   15cca:	3718      	adds	r7, #24
   15ccc:	46bd      	mov	sp, r7
   15cce:	bd80      	pop	{r7, pc}
   15cd0:	00023a20 	.word	0x00023a20
   15cd4:	00023a64 	.word	0x00023a64
   15cd8:	00023ab8 	.word	0x00023ab8
   15cdc:	00023920 	.word	0x00023920

00015ce0 <mp_obj_tuple_del>:

void mp_obj_tuple_del(mp_obj_t self_in) {
   15ce0:	b580      	push	{r7, lr}
   15ce2:	b084      	sub	sp, #16
   15ce4:	af00      	add	r7, sp, #0
   15ce6:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15ce8:	6878      	ldr	r0, [r7, #4]
   15cea:	f7ff fccb 	bl	15684 <MP_OBJ_IS_OBJ>
   15cee:	4603      	mov	r3, r0
   15cf0:	2b00      	cmp	r3, #0
   15cf2:	d004      	beq.n	15cfe <mp_obj_tuple_del+0x1e>
   15cf4:	687b      	ldr	r3, [r7, #4]
   15cf6:	681b      	ldr	r3, [r3, #0]
   15cf8:	4a09      	ldr	r2, [pc, #36]	; (15d20 <mp_obj_tuple_del+0x40>)
   15cfa:	4293      	cmp	r3, r2
   15cfc:	d006      	beq.n	15d0c <mp_obj_tuple_del+0x2c>
   15cfe:	4b09      	ldr	r3, [pc, #36]	; (15d24 <mp_obj_tuple_del+0x44>)
   15d00:	4a09      	ldr	r2, [pc, #36]	; (15d28 <mp_obj_tuple_del+0x48>)
   15d02:	f44f 7181 	mov.w	r1, #258	; 0x102
   15d06:	4809      	ldr	r0, [pc, #36]	; (15d2c <mp_obj_tuple_del+0x4c>)
   15d08:	f005 fbba 	bl	1b480 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15d0c:	687b      	ldr	r3, [r7, #4]
   15d0e:	60fb      	str	r3, [r7, #12]
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   15d10:	68f8      	ldr	r0, [r7, #12]
   15d12:	f7ea fb61 	bl	3d8 <m_free>
}
   15d16:	bf00      	nop
   15d18:	3710      	adds	r7, #16
   15d1a:	46bd      	mov	sp, r7
   15d1c:	bd80      	pop	{r7, pc}
   15d1e:	bf00      	nop
   15d20:	00023a20 	.word	0x00023a20
   15d24:	00023a64 	.word	0x00023a64
   15d28:	00023acc 	.word	0x00023acc
   15d2c:	00023920 	.word	0x00023920

00015d30 <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   15d30:	b480      	push	{r7}
   15d32:	b085      	sub	sp, #20
   15d34:	af00      	add	r7, sp, #0
   15d36:	6078      	str	r0, [r7, #4]
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
   15d38:	687b      	ldr	r3, [r7, #4]
   15d3a:	60fb      	str	r3, [r7, #12]
    if (self->cur < self->tuple->len) {
   15d3c:	68fb      	ldr	r3, [r7, #12]
   15d3e:	68da      	ldr	r2, [r3, #12]
   15d40:	68fb      	ldr	r3, [r7, #12]
   15d42:	689b      	ldr	r3, [r3, #8]
   15d44:	685b      	ldr	r3, [r3, #4]
   15d46:	429a      	cmp	r2, r3
   15d48:	d20e      	bcs.n	15d68 <tuple_it_iternext+0x38>
        mp_obj_t o_out = self->tuple->items[self->cur];
   15d4a:	68fb      	ldr	r3, [r7, #12]
   15d4c:	689b      	ldr	r3, [r3, #8]
   15d4e:	68fa      	ldr	r2, [r7, #12]
   15d50:	68d2      	ldr	r2, [r2, #12]
   15d52:	3202      	adds	r2, #2
   15d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15d58:	60bb      	str	r3, [r7, #8]
        self->cur += 1;
   15d5a:	68fb      	ldr	r3, [r7, #12]
   15d5c:	68db      	ldr	r3, [r3, #12]
   15d5e:	1c5a      	adds	r2, r3, #1
   15d60:	68fb      	ldr	r3, [r7, #12]
   15d62:	60da      	str	r2, [r3, #12]
        return o_out;
   15d64:	68bb      	ldr	r3, [r7, #8]
   15d66:	e000      	b.n	15d6a <tuple_it_iternext+0x3a>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15d68:	2304      	movs	r3, #4
    }
}
   15d6a:	4618      	mov	r0, r3
   15d6c:	3714      	adds	r7, #20
   15d6e:	46bd      	mov	sp, r7
   15d70:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d74:	4770      	bx	lr

00015d76 <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   15d76:	b480      	push	{r7}
   15d78:	b085      	sub	sp, #20
   15d7a:	af00      	add	r7, sp, #0
   15d7c:	6078      	str	r0, [r7, #4]
   15d7e:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
   15d80:	683b      	ldr	r3, [r7, #0]
   15d82:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15d84:	68fb      	ldr	r3, [r7, #12]
   15d86:	4a09      	ldr	r2, [pc, #36]	; (15dac <mp_obj_tuple_getiter+0x36>)
   15d88:	601a      	str	r2, [r3, #0]
    o->iternext = tuple_it_iternext;
   15d8a:	68fb      	ldr	r3, [r7, #12]
   15d8c:	4a08      	ldr	r2, [pc, #32]	; (15db0 <mp_obj_tuple_getiter+0x3a>)
   15d8e:	605a      	str	r2, [r3, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   15d90:	68fb      	ldr	r3, [r7, #12]
   15d92:	687a      	ldr	r2, [r7, #4]
   15d94:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15d96:	68fb      	ldr	r3, [r7, #12]
   15d98:	2200      	movs	r2, #0
   15d9a:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15d9c:	68fb      	ldr	r3, [r7, #12]
}
   15d9e:	4618      	mov	r0, r3
   15da0:	3714      	adds	r7, #20
   15da2:	46bd      	mov	sp, r7
   15da4:	f85d 7b04 	ldr.w	r7, [sp], #4
   15da8:	4770      	bx	lr
   15daa:	bf00      	nop
   15dac:	00023088 	.word	0x00023088
   15db0:	00015d31 	.word	0x00015d31

00015db4 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   15db4:	b480      	push	{r7}
   15db6:	b083      	sub	sp, #12
   15db8:	af00      	add	r7, sp, #0
   15dba:	6078      	str	r0, [r7, #4]
   15dbc:	687b      	ldr	r3, [r7, #4]
   15dbe:	f003 0301 	and.w	r3, r3, #1
   15dc2:	2b00      	cmp	r3, #0
   15dc4:	bf14      	ite	ne
   15dc6:	2301      	movne	r3, #1
   15dc8:	2300      	moveq	r3, #0
   15dca:	b2db      	uxtb	r3, r3
   15dcc:	4618      	mov	r0, r3
   15dce:	370c      	adds	r7, #12
   15dd0:	46bd      	mov	sp, r7
   15dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15dd6:	4770      	bx	lr

00015dd8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15dd8:	b480      	push	{r7}
   15dda:	b083      	sub	sp, #12
   15ddc:	af00      	add	r7, sp, #0
   15dde:	6078      	str	r0, [r7, #4]
   15de0:	687b      	ldr	r3, [r7, #4]
   15de2:	f003 0303 	and.w	r3, r3, #3
   15de6:	2b00      	cmp	r3, #0
   15de8:	bf0c      	ite	eq
   15dea:	2301      	moveq	r3, #1
   15dec:	2300      	movne	r3, #0
   15dee:	b2db      	uxtb	r3, r3
   15df0:	4618      	mov	r0, r3
   15df2:	370c      	adds	r7, #12
   15df4:	46bd      	mov	sp, r7
   15df6:	f85d 7b04 	ldr.w	r7, [sp], #4
   15dfa:	4770      	bx	lr

00015dfc <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   15dfc:	b580      	push	{r7, lr}
   15dfe:	b084      	sub	sp, #16
   15e00:	af00      	add	r7, sp, #0
   15e02:	60f8      	str	r0, [r7, #12]
   15e04:	60b9      	str	r1, [r7, #8]
   15e06:	607a      	str	r2, [r7, #4]
   15e08:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   15e0a:	687b      	ldr	r3, [r7, #4]
   15e0c:	045a      	lsls	r2, r3, #17
   15e0e:	683b      	ldr	r3, [r7, #0]
   15e10:	005b      	lsls	r3, r3, #1
   15e12:	431a      	orrs	r2, r3
   15e14:	7e3b      	ldrb	r3, [r7, #24]
   15e16:	2b00      	cmp	r3, #0
   15e18:	d001      	beq.n	15e1e <mp_arg_check_num+0x22>
   15e1a:	2301      	movs	r3, #1
   15e1c:	e000      	b.n	15e20 <mp_arg_check_num+0x24>
   15e1e:	2300      	movs	r3, #0
   15e20:	4313      	orrs	r3, r2
   15e22:	461a      	mov	r2, r3
   15e24:	68b9      	ldr	r1, [r7, #8]
   15e26:	68f8      	ldr	r0, [r7, #12]
   15e28:	f7f7 f844 	bl	ceb4 <mp_arg_check_num_sig>
}
   15e2c:	bf00      	nop
   15e2e:	3710      	adds	r7, #16
   15e30:	46bd      	mov	sp, r7
   15e32:	bd80      	pop	{r7, pc}

00015e34 <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   15e34:	b580      	push	{r7, lr}
   15e36:	b088      	sub	sp, #32
   15e38:	af00      	add	r7, sp, #0
   15e3a:	6078      	str	r0, [r7, #4]
   15e3c:	6039      	str	r1, [r7, #0]
    int count = 0;
   15e3e:	2300      	movs	r3, #0
   15e40:	61fb      	str	r3, [r7, #28]
    for (;;) {
        if (type == &mp_type_object) {
   15e42:	687b      	ldr	r3, [r7, #4]
   15e44:	4a2c      	ldr	r2, [pc, #176]	; (15ef8 <instance_count_native_bases+0xc4>)
   15e46:	4293      	cmp	r3, r2
   15e48:	d101      	bne.n	15e4e <instance_count_native_bases+0x1a>
            // Not a "real" type, end search here.
            return count;
   15e4a:	69fb      	ldr	r3, [r7, #28]
   15e4c:	e04f      	b.n	15eee <instance_count_native_bases+0xba>
        } else if (mp_obj_is_native_type(type)) {
   15e4e:	687b      	ldr	r3, [r7, #4]
   15e50:	68db      	ldr	r3, [r3, #12]
   15e52:	4a2a      	ldr	r2, [pc, #168]	; (15efc <instance_count_native_bases+0xc8>)
   15e54:	4293      	cmp	r3, r2
   15e56:	d005      	beq.n	15e64 <instance_count_native_bases+0x30>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
   15e58:	683b      	ldr	r3, [r7, #0]
   15e5a:	687a      	ldr	r2, [r7, #4]
   15e5c:	601a      	str	r2, [r3, #0]
            return count + 1;
   15e5e:	69fb      	ldr	r3, [r7, #28]
   15e60:	3301      	adds	r3, #1
   15e62:	e044      	b.n	15eee <instance_count_native_bases+0xba>
        } else if (type->parent == NULL) {
   15e64:	687b      	ldr	r3, [r7, #4]
   15e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15e68:	2b00      	cmp	r3, #0
   15e6a:	d101      	bne.n	15e70 <instance_count_native_bases+0x3c>
            // No parents so end search here.
            return count;
   15e6c:	69fb      	ldr	r3, [r7, #28]
   15e6e:	e03e      	b.n	15eee <instance_count_native_bases+0xba>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   15e70:	687b      	ldr	r3, [r7, #4]
   15e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15e74:	681b      	ldr	r3, [r3, #0]
   15e76:	4a22      	ldr	r2, [pc, #136]	; (15f00 <instance_count_native_bases+0xcc>)
   15e78:	4293      	cmp	r3, r2
   15e7a:	d134      	bne.n	15ee6 <instance_count_native_bases+0xb2>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
   15e7c:	687b      	ldr	r3, [r7, #4]
   15e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15e80:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   15e82:	697b      	ldr	r3, [r7, #20]
   15e84:	3308      	adds	r3, #8
   15e86:	61bb      	str	r3, [r7, #24]
            const mp_obj_t *top = item + parent_tuple->len;
   15e88:	697b      	ldr	r3, [r7, #20]
   15e8a:	685b      	ldr	r3, [r3, #4]
   15e8c:	009b      	lsls	r3, r3, #2
   15e8e:	69ba      	ldr	r2, [r7, #24]
   15e90:	4413      	add	r3, r2
   15e92:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   15e94:	e021      	b.n	15eda <instance_count_native_bases+0xa6>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   15e96:	69bb      	ldr	r3, [r7, #24]
   15e98:	681b      	ldr	r3, [r3, #0]
   15e9a:	4618      	mov	r0, r3
   15e9c:	f7ff ff9c 	bl	15dd8 <MP_OBJ_IS_OBJ>
   15ea0:	4603      	mov	r3, r0
   15ea2:	2b00      	cmp	r3, #0
   15ea4:	d005      	beq.n	15eb2 <instance_count_native_bases+0x7e>
   15ea6:	69bb      	ldr	r3, [r7, #24]
   15ea8:	681b      	ldr	r3, [r3, #0]
   15eaa:	681b      	ldr	r3, [r3, #0]
   15eac:	4a15      	ldr	r2, [pc, #84]	; (15f04 <instance_count_native_bases+0xd0>)
   15eae:	4293      	cmp	r3, r2
   15eb0:	d005      	beq.n	15ebe <instance_count_native_bases+0x8a>
   15eb2:	4b15      	ldr	r3, [pc, #84]	; (15f08 <instance_count_native_bases+0xd4>)
   15eb4:	4a15      	ldr	r2, [pc, #84]	; (15f0c <instance_count_native_bases+0xd8>)
   15eb6:	214b      	movs	r1, #75	; 0x4b
   15eb8:	4815      	ldr	r0, [pc, #84]	; (15f10 <instance_count_native_bases+0xdc>)
   15eba:	f005 fae1 	bl	1b480 <__assert_func>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
   15ebe:	69bb      	ldr	r3, [r7, #24]
   15ec0:	681b      	ldr	r3, [r3, #0]
   15ec2:	60fb      	str	r3, [r7, #12]
                count += instance_count_native_bases(bt, last_native_base);
   15ec4:	6839      	ldr	r1, [r7, #0]
   15ec6:	68f8      	ldr	r0, [r7, #12]
   15ec8:	f7ff ffb4 	bl	15e34 <instance_count_native_bases>
   15ecc:	4602      	mov	r2, r0
   15ece:	69fb      	ldr	r3, [r7, #28]
   15ed0:	4413      	add	r3, r2
   15ed2:	61fb      	str	r3, [r7, #28]
            for (; item < top; ++item) {
   15ed4:	69bb      	ldr	r3, [r7, #24]
   15ed6:	3304      	adds	r3, #4
   15ed8:	61bb      	str	r3, [r7, #24]
   15eda:	69ba      	ldr	r2, [r7, #24]
   15edc:	693b      	ldr	r3, [r7, #16]
   15ede:	429a      	cmp	r2, r3
   15ee0:	d3d9      	bcc.n	15e96 <instance_count_native_bases+0x62>
            }
            return count;
   15ee2:	69fb      	ldr	r3, [r7, #28]
   15ee4:	e003      	b.n	15eee <instance_count_native_bases+0xba>
        #endif
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
   15ee6:	687b      	ldr	r3, [r7, #4]
   15ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15eea:	607b      	str	r3, [r7, #4]
        if (type == &mp_type_object) {
   15eec:	e7a9      	b.n	15e42 <instance_count_native_bases+0xe>
        }
    }
}
   15eee:	4618      	mov	r0, r3
   15ef0:	3720      	adds	r7, #32
   15ef2:	46bd      	mov	sp, r7
   15ef4:	bd80      	pop	{r7, pc}
   15ef6:	bf00      	nop
   15ef8:	0002304c 	.word	0x0002304c
   15efc:	00016335 	.word	0x00016335
   15f00:	00023a20 	.word	0x00023a20
   15f04:	00023d18 	.word	0x00023d18
   15f08:	00023ae0 	.word	0x00023ae0
   15f0c:	00023f9c 	.word	0x00023f9c
   15f10:	00023b08 	.word	0x00023b08

00015f14 <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   15f14:	b590      	push	{r4, r7, lr}
   15f16:	b085      	sub	sp, #20
   15f18:	af00      	add	r7, sp, #0
   15f1a:	6078      	str	r0, [r7, #4]
   15f1c:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   15f1e:	683b      	ldr	r3, [r7, #0]
   15f20:	681b      	ldr	r3, [r3, #0]
   15f22:	60fb      	str	r3, [r7, #12]
    const mp_obj_type_t *native_base = NULL;
   15f24:	2300      	movs	r3, #0
   15f26:	60bb      	str	r3, [r7, #8]
    instance_count_native_bases(self->base.type, &native_base);
   15f28:	68fb      	ldr	r3, [r7, #12]
   15f2a:	681b      	ldr	r3, [r3, #0]
   15f2c:	f107 0208 	add.w	r2, r7, #8
   15f30:	4611      	mov	r1, r2
   15f32:	4618      	mov	r0, r3
   15f34:	f7ff ff7e 	bl	15e34 <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   15f38:	68bb      	ldr	r3, [r7, #8]
   15f3a:	68dc      	ldr	r4, [r3, #12]
   15f3c:	68b8      	ldr	r0, [r7, #8]
   15f3e:	687b      	ldr	r3, [r7, #4]
   15f40:	1e59      	subs	r1, r3, #1
   15f42:	683b      	ldr	r3, [r7, #0]
   15f44:	3304      	adds	r3, #4
   15f46:	2200      	movs	r2, #0
   15f48:	47a0      	blx	r4
   15f4a:	4602      	mov	r2, r0
   15f4c:	68fb      	ldr	r3, [r7, #12]
   15f4e:	611a      	str	r2, [r3, #16]
    return mp_const_none;
   15f50:	4b02      	ldr	r3, [pc, #8]	; (15f5c <native_base_init_wrapper+0x48>)
}
   15f52:	4618      	mov	r0, r3
   15f54:	3714      	adds	r7, #20
   15f56:	46bd      	mov	sp, r7
   15f58:	bd90      	pop	{r4, r7, pc}
   15f5a:	bf00      	nop
   15f5c:	00023108 	.word	0x00023108

00015f60 <mp_obj_new_instance>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(native_base_init_wrapper_obj, 1, MP_OBJ_FUN_ARGS_MAX, native_base_init_wrapper);

#if !MICROPY_CPYTHON_COMPAT
STATIC
#endif
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   15f60:	b580      	push	{r7, lr}
   15f62:	b084      	sub	sp, #16
   15f64:	af00      	add	r7, sp, #0
   15f66:	6078      	str	r0, [r7, #4]
   15f68:	6039      	str	r1, [r7, #0]
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   15f6a:	6839      	ldr	r1, [r7, #0]
   15f6c:	6878      	ldr	r0, [r7, #4]
   15f6e:	f7ff ff61 	bl	15e34 <instance_count_native_bases>
   15f72:	4603      	mov	r3, r0
   15f74:	60fb      	str	r3, [r7, #12]
    assert(num_native_bases < 2);
   15f76:	68fb      	ldr	r3, [r7, #12]
   15f78:	2b01      	cmp	r3, #1
   15f7a:	d905      	bls.n	15f88 <mp_obj_new_instance+0x28>
   15f7c:	4b10      	ldr	r3, [pc, #64]	; (15fc0 <mp_obj_new_instance+0x60>)
   15f7e:	4a11      	ldr	r2, [pc, #68]	; (15fc4 <mp_obj_new_instance+0x64>)
   15f80:	2168      	movs	r1, #104	; 0x68
   15f82:	4811      	ldr	r0, [pc, #68]	; (15fc8 <mp_obj_new_instance+0x68>)
   15f84:	f005 fa7c 	bl	1b480 <__assert_func>
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   15f88:	68fb      	ldr	r3, [r7, #12]
   15f8a:	3304      	adds	r3, #4
   15f8c:	009b      	lsls	r3, r3, #2
   15f8e:	4618      	mov	r0, r3
   15f90:	f7ea f9c4 	bl	31c <m_malloc>
   15f94:	60b8      	str	r0, [r7, #8]
    o->base.type = class;
   15f96:	68bb      	ldr	r3, [r7, #8]
   15f98:	687a      	ldr	r2, [r7, #4]
   15f9a:	601a      	str	r2, [r3, #0]
    mp_map_init(&o->members, 0);
   15f9c:	68bb      	ldr	r3, [r7, #8]
   15f9e:	3304      	adds	r3, #4
   15fa0:	2100      	movs	r1, #0
   15fa2:	4618      	mov	r0, r3
   15fa4:	f7f7 f8e2 	bl	d16c <mp_map_init>
    // Initialise the native base-class slot (should be 1 at most) with a valid
    // object.  It doesn't matter which object, so long as it can be uniquely
    // distinguished from a native class that is initialised.
    if (num_native_bases != 0) {
   15fa8:	68fb      	ldr	r3, [r7, #12]
   15faa:	2b00      	cmp	r3, #0
   15fac:	d002      	beq.n	15fb4 <mp_obj_new_instance+0x54>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   15fae:	68bb      	ldr	r3, [r7, #8]
   15fb0:	4a06      	ldr	r2, [pc, #24]	; (15fcc <mp_obj_new_instance+0x6c>)
   15fb2:	611a      	str	r2, [r3, #16]
    }
    return o;
   15fb4:	68bb      	ldr	r3, [r7, #8]
}
   15fb6:	4618      	mov	r0, r3
   15fb8:	3710      	adds	r7, #16
   15fba:	46bd      	mov	sp, r7
   15fbc:	bd80      	pop	{r7, pc}
   15fbe:	bf00      	nop
   15fc0:	00023b28 	.word	0x00023b28
   15fc4:	00023fb8 	.word	0x00023fb8
   15fc8:	00023b08 	.word	0x00023b08
   15fcc:	00023b1c 	.word	0x00023b1c

00015fd0 <mp_obj_class_lookup>:
    size_t meth_offset;
    mp_obj_t *dest;
    bool is_type;
};

STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   15fd0:	b580      	push	{r7, lr}
   15fd2:	b08c      	sub	sp, #48	; 0x30
   15fd4:	af00      	add	r7, sp, #0
   15fd6:	6078      	str	r0, [r7, #4]
   15fd8:	6039      	str	r1, [r7, #0]
    assert(lookup->dest[0] == MP_OBJ_NULL);
   15fda:	687b      	ldr	r3, [r7, #4]
   15fdc:	68db      	ldr	r3, [r3, #12]
   15fde:	681b      	ldr	r3, [r3, #0]
   15fe0:	2b00      	cmp	r3, #0
   15fe2:	d005      	beq.n	15ff0 <mp_obj_class_lookup+0x20>
   15fe4:	4b85      	ldr	r3, [pc, #532]	; (161fc <mp_obj_class_lookup+0x22c>)
   15fe6:	4a86      	ldr	r2, [pc, #536]	; (16200 <mp_obj_class_lookup+0x230>)
   15fe8:	218c      	movs	r1, #140	; 0x8c
   15fea:	4886      	ldr	r0, [pc, #536]	; (16204 <mp_obj_class_lookup+0x234>)
   15fec:	f005 fa48 	bl	1b480 <__assert_func>
    assert(lookup->dest[1] == MP_OBJ_NULL);
   15ff0:	687b      	ldr	r3, [r7, #4]
   15ff2:	68db      	ldr	r3, [r3, #12]
   15ff4:	3304      	adds	r3, #4
   15ff6:	681b      	ldr	r3, [r3, #0]
   15ff8:	2b00      	cmp	r3, #0
   15ffa:	d005      	beq.n	16008 <mp_obj_class_lookup+0x38>
   15ffc:	4b82      	ldr	r3, [pc, #520]	; (16208 <mp_obj_class_lookup+0x238>)
   15ffe:	4a80      	ldr	r2, [pc, #512]	; (16200 <mp_obj_class_lookup+0x230>)
   16000:	218d      	movs	r1, #141	; 0x8d
   16002:	4880      	ldr	r0, [pc, #512]	; (16204 <mp_obj_class_lookup+0x234>)
   16004:	f005 fa3c 	bl	1b480 <__assert_func>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
        // Optimize special method lookup for native types
        // This avoids extra method_name => slot lookup. On the other hand,
        // this should not be applied to class types, as will result in extra
        // lookup either.
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   16008:	687b      	ldr	r3, [r7, #4]
   1600a:	689b      	ldr	r3, [r3, #8]
   1600c:	2b00      	cmp	r3, #0
   1600e:	d010      	beq.n	16032 <mp_obj_class_lookup+0x62>
   16010:	683b      	ldr	r3, [r7, #0]
   16012:	68db      	ldr	r3, [r3, #12]
   16014:	4a7d      	ldr	r2, [pc, #500]	; (1620c <mp_obj_class_lookup+0x23c>)
   16016:	4293      	cmp	r3, r2
   16018:	d00b      	beq.n	16032 <mp_obj_class_lookup+0x62>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   1601a:	687b      	ldr	r3, [r7, #4]
   1601c:	689b      	ldr	r3, [r3, #8]
   1601e:	683a      	ldr	r2, [r7, #0]
   16020:	4413      	add	r3, r2
   16022:	681b      	ldr	r3, [r3, #0]
   16024:	2b00      	cmp	r3, #0
   16026:	d004      	beq.n	16032 <mp_obj_class_lookup+0x62>
                DEBUG_printf("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",
                    lookup->meth_offset, qstr_str(lookup->attr));
                lookup->dest[0] = MP_OBJ_SENTINEL;
   16028:	687b      	ldr	r3, [r7, #4]
   1602a:	68db      	ldr	r3, [r3, #12]
   1602c:	2208      	movs	r2, #8
   1602e:	601a      	str	r2, [r3, #0]
                return;
   16030:	e0e0      	b.n	161f4 <mp_obj_class_lookup+0x224>
            }
        }

        if (type->locals_dict != NULL) {
   16032:	683b      	ldr	r3, [r7, #0]
   16034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16036:	2b00      	cmp	r3, #0
   16038:	d04b      	beq.n	160d2 <mp_obj_class_lookup+0x102>
            // search locals_dict (the set of methods/attributes)
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   1603a:	683b      	ldr	r3, [r7, #0]
   1603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1603e:	681b      	ldr	r3, [r3, #0]
   16040:	4a73      	ldr	r2, [pc, #460]	; (16210 <mp_obj_class_lookup+0x240>)
   16042:	4293      	cmp	r3, r2
   16044:	d005      	beq.n	16052 <mp_obj_class_lookup+0x82>
   16046:	4b73      	ldr	r3, [pc, #460]	; (16214 <mp_obj_class_lookup+0x244>)
   16048:	4a6d      	ldr	r2, [pc, #436]	; (16200 <mp_obj_class_lookup+0x230>)
   1604a:	219f      	movs	r1, #159	; 0x9f
   1604c:	486d      	ldr	r0, [pc, #436]	; (16204 <mp_obj_class_lookup+0x234>)
   1604e:	f005 fa17 	bl	1b480 <__assert_func>
            mp_map_t *locals_map = &type->locals_dict->map;
   16052:	683b      	ldr	r3, [r7, #0]
   16054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16056:	3304      	adds	r3, #4
   16058:	627b      	str	r3, [r7, #36]	; 0x24
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   1605a:	687b      	ldr	r3, [r7, #4]
   1605c:	685b      	ldr	r3, [r3, #4]
   1605e:	009b      	lsls	r3, r3, #2
   16060:	f043 0302 	orr.w	r3, r3, #2
   16064:	2200      	movs	r2, #0
   16066:	4619      	mov	r1, r3
   16068:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1606a:	f7f7 f977 	bl	d35c <mp_map_lookup>
   1606e:	6238      	str	r0, [r7, #32]
            if (elem != NULL) {
   16070:	6a3b      	ldr	r3, [r7, #32]
   16072:	2b00      	cmp	r3, #0
   16074:	d02d      	beq.n	160d2 <mp_obj_class_lookup+0x102>
                if (lookup->is_type) {
   16076:	687b      	ldr	r3, [r7, #4]
   16078:	7c1b      	ldrb	r3, [r3, #16]
   1607a:	2b00      	cmp	r3, #0
   1607c:	d00b      	beq.n	16096 <mp_obj_class_lookup+0xc6>
                    // If we look up a class method, we need to return original type for which we
                    // do a lookup, not a (base) type in which we found the class method.
                    const mp_obj_type_t *org_type = (const mp_obj_type_t*)lookup->obj;
   1607e:	687b      	ldr	r3, [r7, #4]
   16080:	681b      	ldr	r3, [r3, #0]
   16082:	61fb      	str	r3, [r7, #28]
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   16084:	6a3b      	ldr	r3, [r7, #32]
   16086:	685a      	ldr	r2, [r3, #4]
   16088:	687b      	ldr	r3, [r7, #4]
   1608a:	68db      	ldr	r3, [r3, #12]
   1608c:	69f9      	ldr	r1, [r7, #28]
   1608e:	2000      	movs	r0, #0
   16090:	f7f6 fa62 	bl	c558 <mp_convert_member_lookup>
                    // Don't try to repr() lookup->dest[1], as we can be called recursively
                    DEBUG_printf(" <%s @%p>", mp_obj_get_type_str(lookup->dest[1]), MP_OBJ_TO_PTR(lookup->dest[1]));
                }
                DEBUG_printf("\n");
#endif
                return;
   16094:	e0ae      	b.n	161f4 <mp_obj_class_lookup+0x224>
                    mp_obj_instance_t *obj = lookup->obj;
   16096:	687b      	ldr	r3, [r7, #4]
   16098:	681b      	ldr	r3, [r3, #0]
   1609a:	61bb      	str	r3, [r7, #24]
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   1609c:	69bb      	ldr	r3, [r7, #24]
   1609e:	2b00      	cmp	r3, #0
   160a0:	d00c      	beq.n	160bc <mp_obj_class_lookup+0xec>
   160a2:	683b      	ldr	r3, [r7, #0]
   160a4:	68db      	ldr	r3, [r3, #12]
   160a6:	4a59      	ldr	r2, [pc, #356]	; (1620c <mp_obj_class_lookup+0x23c>)
   160a8:	4293      	cmp	r3, r2
   160aa:	d007      	beq.n	160bc <mp_obj_class_lookup+0xec>
   160ac:	683b      	ldr	r3, [r7, #0]
   160ae:	4a5a      	ldr	r2, [pc, #360]	; (16218 <mp_obj_class_lookup+0x248>)
   160b0:	4293      	cmp	r3, r2
   160b2:	d003      	beq.n	160bc <mp_obj_class_lookup+0xec>
                        obj_obj = obj->subobj[0];
   160b4:	69bb      	ldr	r3, [r7, #24]
   160b6:	691b      	ldr	r3, [r3, #16]
   160b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   160ba:	e001      	b.n	160c0 <mp_obj_class_lookup+0xf0>
                        obj_obj = MP_OBJ_FROM_PTR(obj);
   160bc:	69bb      	ldr	r3, [r7, #24]
   160be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   160c0:	6a3b      	ldr	r3, [r7, #32]
   160c2:	685a      	ldr	r2, [r3, #4]
   160c4:	687b      	ldr	r3, [r7, #4]
   160c6:	68db      	ldr	r3, [r3, #12]
   160c8:	6839      	ldr	r1, [r7, #0]
   160ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   160cc:	f7f6 fa44 	bl	c558 <mp_convert_member_lookup>
                return;
   160d0:	e090      	b.n	161f4 <mp_obj_class_lookup+0x224>
        }

        // Previous code block takes care about attributes defined in .locals_dict,
        // but some attributes of native types may be handled using .load_attr method,
        // so make sure we try to lookup those too.
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   160d2:	687b      	ldr	r3, [r7, #4]
   160d4:	681b      	ldr	r3, [r3, #0]
   160d6:	2b00      	cmp	r3, #0
   160d8:	d01e      	beq.n	16118 <mp_obj_class_lookup+0x148>
   160da:	687b      	ldr	r3, [r7, #4]
   160dc:	7c1b      	ldrb	r3, [r3, #16]
   160de:	f083 0301 	eor.w	r3, r3, #1
   160e2:	b2db      	uxtb	r3, r3
   160e4:	2b00      	cmp	r3, #0
   160e6:	d017      	beq.n	16118 <mp_obj_class_lookup+0x148>
   160e8:	683b      	ldr	r3, [r7, #0]
   160ea:	68db      	ldr	r3, [r3, #12]
   160ec:	4a47      	ldr	r2, [pc, #284]	; (1620c <mp_obj_class_lookup+0x23c>)
   160ee:	4293      	cmp	r3, r2
   160f0:	d012      	beq.n	16118 <mp_obj_class_lookup+0x148>
   160f2:	683b      	ldr	r3, [r7, #0]
   160f4:	4a48      	ldr	r2, [pc, #288]	; (16218 <mp_obj_class_lookup+0x248>)
   160f6:	4293      	cmp	r3, r2
   160f8:	d00e      	beq.n	16118 <mp_obj_class_lookup+0x148>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   160fa:	687b      	ldr	r3, [r7, #4]
   160fc:	681b      	ldr	r3, [r3, #0]
   160fe:	6918      	ldr	r0, [r3, #16]
   16100:	687b      	ldr	r3, [r7, #4]
   16102:	6859      	ldr	r1, [r3, #4]
   16104:	687b      	ldr	r3, [r7, #4]
   16106:	68db      	ldr	r3, [r3, #12]
   16108:	461a      	mov	r2, r3
   1610a:	f7f6 fa99 	bl	c640 <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   1610e:	687b      	ldr	r3, [r7, #4]
   16110:	68db      	ldr	r3, [r3, #12]
   16112:	681b      	ldr	r3, [r3, #0]
   16114:	2b00      	cmp	r3, #0
   16116:	d166      	bne.n	161e6 <mp_obj_class_lookup+0x216>
            }
        }

        // attribute not found, keep searching base classes

        if (type->parent == NULL) {
   16118:	683b      	ldr	r3, [r7, #0]
   1611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1611c:	2b00      	cmp	r3, #0
   1611e:	d064      	beq.n	161ea <mp_obj_class_lookup+0x21a>
            DEBUG_printf("mp_obj_class_lookup: No more parents\n");
            return;
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   16120:	683b      	ldr	r3, [r7, #0]
   16122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16124:	681b      	ldr	r3, [r3, #0]
   16126:	4a3d      	ldr	r2, [pc, #244]	; (1621c <mp_obj_class_lookup+0x24c>)
   16128:	4293      	cmp	r3, r2
   1612a:	d154      	bne.n	161d6 <mp_obj_class_lookup+0x206>
            const mp_obj_tuple_t *parent_tuple = type->parent;
   1612c:	683b      	ldr	r3, [r7, #0]
   1612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16130:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   16132:	697b      	ldr	r3, [r7, #20]
   16134:	3308      	adds	r3, #8
   16136:	62bb      	str	r3, [r7, #40]	; 0x28
            const mp_obj_t *top = item + parent_tuple->len - 1;
   16138:	697b      	ldr	r3, [r7, #20]
   1613a:	685b      	ldr	r3, [r3, #4]
   1613c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16140:	3b01      	subs	r3, #1
   16142:	009b      	lsls	r3, r3, #2
   16144:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16146:	4413      	add	r3, r2
   16148:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   1614a:	e028      	b.n	1619e <mp_obj_class_lookup+0x1ce>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   1614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1614e:	681b      	ldr	r3, [r3, #0]
   16150:	4618      	mov	r0, r3
   16152:	f7ff fe41 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16156:	4603      	mov	r3, r0
   16158:	2b00      	cmp	r3, #0
   1615a:	d005      	beq.n	16168 <mp_obj_class_lookup+0x198>
   1615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1615e:	681b      	ldr	r3, [r3, #0]
   16160:	681b      	ldr	r3, [r3, #0]
   16162:	4a2f      	ldr	r2, [pc, #188]	; (16220 <mp_obj_class_lookup+0x250>)
   16164:	4293      	cmp	r3, r2
   16166:	d005      	beq.n	16174 <mp_obj_class_lookup+0x1a4>
   16168:	4b2e      	ldr	r3, [pc, #184]	; (16224 <mp_obj_class_lookup+0x254>)
   1616a:	4a25      	ldr	r2, [pc, #148]	; (16200 <mp_obj_class_lookup+0x230>)
   1616c:	21d5      	movs	r1, #213	; 0xd5
   1616e:	4825      	ldr	r0, [pc, #148]	; (16204 <mp_obj_class_lookup+0x234>)
   16170:	f005 f986 	bl	1b480 <__assert_func>
                mp_obj_type_t *bt = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   16174:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16176:	681b      	ldr	r3, [r3, #0]
   16178:	60fb      	str	r3, [r7, #12]
                if (bt == &mp_type_object) {
   1617a:	68fb      	ldr	r3, [r7, #12]
   1617c:	4a26      	ldr	r2, [pc, #152]	; (16218 <mp_obj_class_lookup+0x248>)
   1617e:	4293      	cmp	r3, r2
   16180:	d009      	beq.n	16196 <mp_obj_class_lookup+0x1c6>
                    // Not a "real" type
                    continue;
                }
                mp_obj_class_lookup(lookup, bt);
   16182:	68f9      	ldr	r1, [r7, #12]
   16184:	6878      	ldr	r0, [r7, #4]
   16186:	f7ff ff23 	bl	15fd0 <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   1618a:	687b      	ldr	r3, [r7, #4]
   1618c:	68db      	ldr	r3, [r3, #12]
   1618e:	681b      	ldr	r3, [r3, #0]
   16190:	2b00      	cmp	r3, #0
   16192:	d12c      	bne.n	161ee <mp_obj_class_lookup+0x21e>
   16194:	e000      	b.n	16198 <mp_obj_class_lookup+0x1c8>
                    continue;
   16196:	bf00      	nop
            for (; item < top; ++item) {
   16198:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1619a:	3304      	adds	r3, #4
   1619c:	62bb      	str	r3, [r7, #40]	; 0x28
   1619e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   161a0:	693b      	ldr	r3, [r7, #16]
   161a2:	429a      	cmp	r2, r3
   161a4:	d3d2      	bcc.n	1614c <mp_obj_class_lookup+0x17c>
                    return;
                }
            }

            // search last base (simple tail recursion elimination)
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   161a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   161a8:	681b      	ldr	r3, [r3, #0]
   161aa:	4618      	mov	r0, r3
   161ac:	f7ff fe14 	bl	15dd8 <MP_OBJ_IS_OBJ>
   161b0:	4603      	mov	r3, r0
   161b2:	2b00      	cmp	r3, #0
   161b4:	d005      	beq.n	161c2 <mp_obj_class_lookup+0x1f2>
   161b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   161b8:	681b      	ldr	r3, [r3, #0]
   161ba:	681b      	ldr	r3, [r3, #0]
   161bc:	4a18      	ldr	r2, [pc, #96]	; (16220 <mp_obj_class_lookup+0x250>)
   161be:	4293      	cmp	r3, r2
   161c0:	d005      	beq.n	161ce <mp_obj_class_lookup+0x1fe>
   161c2:	4b18      	ldr	r3, [pc, #96]	; (16224 <mp_obj_class_lookup+0x254>)
   161c4:	4a0e      	ldr	r2, [pc, #56]	; (16200 <mp_obj_class_lookup+0x230>)
   161c6:	21e2      	movs	r1, #226	; 0xe2
   161c8:	480e      	ldr	r0, [pc, #56]	; (16204 <mp_obj_class_lookup+0x234>)
   161ca:	f005 f959 	bl	1b480 <__assert_func>
            type = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   161ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   161d0:	681b      	ldr	r3, [r3, #0]
   161d2:	603b      	str	r3, [r7, #0]
   161d4:	e002      	b.n	161dc <mp_obj_class_lookup+0x20c>
        #endif
        } else {
            type = type->parent;
   161d6:	683b      	ldr	r3, [r7, #0]
   161d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   161da:	603b      	str	r3, [r7, #0]
        }
        if (type == &mp_type_object) {
   161dc:	683b      	ldr	r3, [r7, #0]
   161de:	4a0e      	ldr	r2, [pc, #56]	; (16218 <mp_obj_class_lookup+0x248>)
   161e0:	4293      	cmp	r3, r2
   161e2:	d006      	beq.n	161f2 <mp_obj_class_lookup+0x222>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
   161e4:	e710      	b.n	16008 <mp_obj_class_lookup+0x38>
                return;
   161e6:	bf00      	nop
   161e8:	e004      	b.n	161f4 <mp_obj_class_lookup+0x224>
            return;
   161ea:	bf00      	nop
   161ec:	e002      	b.n	161f4 <mp_obj_class_lookup+0x224>
                    return;
   161ee:	bf00      	nop
   161f0:	e000      	b.n	161f4 <mp_obj_class_lookup+0x224>
            // Not a "real" type
            return;
   161f2:	bf00      	nop
        }
    }
}
   161f4:	3730      	adds	r7, #48	; 0x30
   161f6:	46bd      	mov	sp, r7
   161f8:	bd80      	pop	{r7, pc}
   161fa:	bf00      	nop
   161fc:	00023b40 	.word	0x00023b40
   16200:	00023fcc 	.word	0x00023fcc
   16204:	00023b08 	.word	0x00023b08
   16208:	00023b60 	.word	0x00023b60
   1620c:	00016335 	.word	0x00016335
   16210:	00021d40 	.word	0x00021d40
   16214:	00023b80 	.word	0x00023b80
   16218:	0002304c 	.word	0x0002304c
   1621c:	00023a20 	.word	0x00023a20
   16220:	00023d18 	.word	0x00023d18
   16224:	00023ae0 	.word	0x00023ae0

00016228 <instance_print>:

STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16228:	b580      	push	{r7, lr}
   1622a:	b08e      	sub	sp, #56	; 0x38
   1622c:	af00      	add	r7, sp, #0
   1622e:	60f8      	str	r0, [r7, #12]
   16230:	60b9      	str	r1, [r7, #8]
   16232:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16234:	68bb      	ldr	r3, [r7, #8]
   16236:	637b      	str	r3, [r7, #52]	; 0x34
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   16238:	687b      	ldr	r3, [r7, #4]
   1623a:	2b00      	cmp	r3, #0
   1623c:	d101      	bne.n	16242 <instance_print+0x1a>
   1623e:	2324      	movs	r3, #36	; 0x24
   16240:	e000      	b.n	16244 <instance_print+0x1c>
   16242:	2322      	movs	r3, #34	; 0x22
   16244:	633b      	str	r3, [r7, #48]	; 0x30
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16246:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1624a:	2200      	movs	r2, #0
   1624c:	601a      	str	r2, [r3, #0]
   1624e:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16252:	613b      	str	r3, [r7, #16]
   16254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16256:	617b      	str	r3, [r7, #20]
   16258:	2308      	movs	r3, #8
   1625a:	61bb      	str	r3, [r7, #24]
   1625c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16260:	61fb      	str	r3, [r7, #28]
   16262:	2300      	movs	r3, #0
   16264:	f887 3020 	strb.w	r3, [r7, #32]
        .attr = meth,
        .meth_offset = offsetof(mp_obj_type_t, print),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1626a:	681a      	ldr	r2, [r3, #0]
   1626c:	f107 0310 	add.w	r3, r7, #16
   16270:	4611      	mov	r1, r2
   16272:	4618      	mov	r0, r3
   16274:	f7ff feac 	bl	15fd0 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   16278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1627a:	2b00      	cmp	r3, #0
   1627c:	d10e      	bne.n	1629c <instance_print+0x74>
   1627e:	687b      	ldr	r3, [r7, #4]
   16280:	2b00      	cmp	r3, #0
   16282:	d10b      	bne.n	1629c <instance_print+0x74>
        // If there's no __str__, fall back to __repr__
        lookup.attr = MP_QSTR___repr__;
   16284:	2322      	movs	r3, #34	; 0x22
   16286:	617b      	str	r3, [r7, #20]
        lookup.meth_offset = 0;
   16288:	2300      	movs	r3, #0
   1628a:	61bb      	str	r3, [r7, #24]
        mp_obj_class_lookup(&lookup, self->base.type);
   1628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1628e:	681a      	ldr	r2, [r3, #0]
   16290:	f107 0310 	add.w	r3, r7, #16
   16294:	4611      	mov	r1, r2
   16296:	4618      	mov	r0, r3
   16298:	f7ff fe9a 	bl	15fd0 <mp_obj_class_lookup>
    }

    if (member[0] == MP_OBJ_SENTINEL) {
   1629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1629e:	2b08      	cmp	r3, #8
   162a0:	d129      	bne.n	162f6 <instance_print+0xce>
        // Handle Exception subclasses specially
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   162a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   162a4:	691b      	ldr	r3, [r3, #16]
   162a6:	4618      	mov	r0, r3
   162a8:	f7f7 fa02 	bl	d6b0 <mp_obj_get_type>
   162ac:	4603      	mov	r3, r0
   162ae:	68db      	ldr	r3, [r3, #12]
   162b0:	4a1e      	ldr	r2, [pc, #120]	; (1632c <instance_print+0x104>)
   162b2:	4293      	cmp	r3, r2
   162b4:	d117      	bne.n	162e6 <instance_print+0xbe>
            if (kind != PRINT_STR) {
   162b6:	687b      	ldr	r3, [r7, #4]
   162b8:	2b00      	cmp	r3, #0
   162ba:	d00a      	beq.n	162d2 <instance_print+0xaa>
                mp_print_str(print, qstr_str(self->base.type->name));
   162bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   162be:	681b      	ldr	r3, [r3, #0]
   162c0:	88db      	ldrh	r3, [r3, #6]
   162c2:	4618      	mov	r0, r3
   162c4:	f7ea ffc0 	bl	1248 <qstr_str>
   162c8:	4603      	mov	r3, r0
   162ca:	4619      	mov	r1, r3
   162cc:	68f8      	ldr	r0, [r7, #12]
   162ce:	f7eb faf9 	bl	18c4 <mp_print_str>
            }
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   162d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   162d4:	6919      	ldr	r1, [r3, #16]
   162d6:	687b      	ldr	r3, [r7, #4]
   162d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   162dc:	461a      	mov	r2, r3
   162de:	68f8      	ldr	r0, [r7, #12]
   162e0:	f7f7 fa17 	bl	d712 <mp_obj_print_helper>
        } else {
            mp_obj_print_helper(print, self->subobj[0], kind);
        }
        return;
   162e4:	e01f      	b.n	16326 <instance_print+0xfe>
            mp_obj_print_helper(print, self->subobj[0], kind);
   162e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   162e8:	691b      	ldr	r3, [r3, #16]
   162ea:	687a      	ldr	r2, [r7, #4]
   162ec:	4619      	mov	r1, r3
   162ee:	68f8      	ldr	r0, [r7, #12]
   162f0:	f7f7 fa0f 	bl	d712 <mp_obj_print_helper>
        return;
   162f4:	e017      	b.n	16326 <instance_print+0xfe>
    }

    if (member[0] != MP_OBJ_NULL) {
   162f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   162f8:	2b00      	cmp	r3, #0
   162fa:	d00b      	beq.n	16314 <instance_print+0xec>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   162fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   162fe:	68b9      	ldr	r1, [r7, #8]
   16300:	4618      	mov	r0, r3
   16302:	f7f5 fcde 	bl	bcc2 <mp_call_function_1>
   16306:	62f8      	str	r0, [r7, #44]	; 0x2c
        mp_obj_print_helper(print, r, PRINT_STR);
   16308:	2200      	movs	r2, #0
   1630a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1630c:	68f8      	ldr	r0, [r7, #12]
   1630e:	f7f7 fa00 	bl	d712 <mp_obj_print_helper>
        return;
   16312:	e008      	b.n	16326 <instance_print+0xfe>
    }

    // TODO: CPython prints fully-qualified type name
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   16314:	68b8      	ldr	r0, [r7, #8]
   16316:	f7f7 f9eb 	bl	d6f0 <mp_obj_get_type_str>
   1631a:	4602      	mov	r2, r0
   1631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1631e:	4904      	ldr	r1, [pc, #16]	; (16330 <instance_print+0x108>)
   16320:	68f8      	ldr	r0, [r7, #12]
   16322:	f7eb fde1 	bl	1ee8 <mp_printf>
}
   16326:	3738      	adds	r7, #56	; 0x38
   16328:	46bd      	mov	sp, r7
   1632a:	bd80      	pop	{r7, pc}
   1632c:	0000f1e9 	.word	0x0000f1e9
   16330:	00023bb0 	.word	0x00023bb0

00016334 <mp_obj_instance_make_new>:

mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16334:	b590      	push	{r4, r7, lr}
   16336:	b093      	sub	sp, #76	; 0x4c
   16338:	af00      	add	r7, sp, #0
   1633a:	60f8      	str	r0, [r7, #12]
   1633c:	60b9      	str	r1, [r7, #8]
   1633e:	607a      	str	r2, [r7, #4]
   16340:	603b      	str	r3, [r7, #0]
    assert(mp_obj_is_instance_type(self));
   16342:	68fb      	ldr	r3, [r7, #12]
   16344:	68db      	ldr	r3, [r3, #12]
   16346:	4a6b      	ldr	r2, [pc, #428]	; (164f4 <mp_obj_instance_make_new+0x1c0>)
   16348:	4293      	cmp	r3, r2
   1634a:	d006      	beq.n	1635a <mp_obj_instance_make_new+0x26>
   1634c:	4b6a      	ldr	r3, [pc, #424]	; (164f8 <mp_obj_instance_make_new+0x1c4>)
   1634e:	4a6b      	ldr	r2, [pc, #428]	; (164fc <mp_obj_instance_make_new+0x1c8>)
   16350:	f44f 718d 	mov.w	r1, #282	; 0x11a
   16354:	486a      	ldr	r0, [pc, #424]	; (16500 <mp_obj_instance_make_new+0x1cc>)
   16356:	f005 f893 	bl	1b480 <__assert_func>

    // look for __new__ function
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   1635a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1635e:	2200      	movs	r2, #0
   16360:	601a      	str	r2, [r3, #0]
   16362:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16364:	2300      	movs	r3, #0
   16366:	61bb      	str	r3, [r7, #24]
   16368:	231d      	movs	r3, #29
   1636a:	61fb      	str	r3, [r7, #28]
   1636c:	230c      	movs	r3, #12
   1636e:	623b      	str	r3, [r7, #32]
   16370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16374:	627b      	str	r3, [r7, #36]	; 0x24
   16376:	2300      	movs	r3, #0
   16378:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        .attr = MP_QSTR___new__,
        .meth_offset = offsetof(mp_obj_type_t, make_new),
        .dest = init_fn,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self);
   1637c:	f107 0318 	add.w	r3, r7, #24
   16380:	68f9      	ldr	r1, [r7, #12]
   16382:	4618      	mov	r0, r3
   16384:	f7ff fe24 	bl	15fd0 <mp_obj_class_lookup>

    const mp_obj_type_t *native_base = NULL;
   16388:	2300      	movs	r3, #0
   1638a:	617b      	str	r3, [r7, #20]
    mp_obj_instance_t *o;
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   1638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1638e:	2b00      	cmp	r3, #0
   16390:	d002      	beq.n	16398 <mp_obj_instance_make_new+0x64>
   16392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16394:	2b08      	cmp	r3, #8
   16396:	d107      	bne.n	163a8 <mp_obj_instance_make_new+0x74>
        // Either there is no __new__() method defined or there is a native
        // constructor.  In both cases create a blank instance.
        o = mp_obj_new_instance(self, &native_base);
   16398:	f107 0314 	add.w	r3, r7, #20
   1639c:	4619      	mov	r1, r3
   1639e:	68f8      	ldr	r0, [r7, #12]
   163a0:	f7ff fdde 	bl	15f60 <mp_obj_new_instance>
   163a4:	6478      	str	r0, [r7, #68]	; 0x44
   163a6:	e03e      	b.n	16426 <mp_obj_instance_make_new+0xf2>
        // said native constructor.

    } else {
        // Call Python class __new__ function with all args to create an instance
        mp_obj_t new_ret;
        if (n_args == 0 && n_kw == 0) {
   163a8:	68bb      	ldr	r3, [r7, #8]
   163aa:	2b00      	cmp	r3, #0
   163ac:	d10d      	bne.n	163ca <mp_obj_instance_make_new+0x96>
   163ae:	687b      	ldr	r3, [r7, #4]
   163b0:	2b00      	cmp	r3, #0
   163b2:	d10a      	bne.n	163ca <mp_obj_instance_make_new+0x96>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   163b4:	68fb      	ldr	r3, [r7, #12]
   163b6:	613b      	str	r3, [r7, #16]
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   163b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   163ba:	f107 0310 	add.w	r3, r7, #16
   163be:	2200      	movs	r2, #0
   163c0:	2101      	movs	r1, #1
   163c2:	f7f5 fca4 	bl	bd0e <mp_call_function_n_kw>
   163c6:	6438      	str	r0, [r7, #64]	; 0x40
        if (n_args == 0 && n_kw == 0) {
   163c8:	e022      	b.n	16410 <mp_obj_instance_make_new+0xdc>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   163ca:	687b      	ldr	r3, [r7, #4]
   163cc:	005a      	lsls	r2, r3, #1
   163ce:	68bb      	ldr	r3, [r7, #8]
   163d0:	4413      	add	r3, r2
   163d2:	3301      	adds	r3, #1
   163d4:	009b      	lsls	r3, r3, #2
   163d6:	4618      	mov	r0, r3
   163d8:	f7e9 ffa0 	bl	31c <m_malloc>
   163dc:	63b8      	str	r0, [r7, #56]	; 0x38
            args2[0] = MP_OBJ_FROM_PTR(self);
   163de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   163e0:	68fa      	ldr	r2, [r7, #12]
   163e2:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   163e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   163e6:	1d18      	adds	r0, r3, #4
   163e8:	687b      	ldr	r3, [r7, #4]
   163ea:	005a      	lsls	r2, r3, #1
   163ec:	68bb      	ldr	r3, [r7, #8]
   163ee:	4413      	add	r3, r2
   163f0:	009b      	lsls	r3, r3, #2
   163f2:	461a      	mov	r2, r3
   163f4:	6839      	ldr	r1, [r7, #0]
   163f6:	f006 fb6f 	bl	1cad8 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   163fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   163fc:	68bb      	ldr	r3, [r7, #8]
   163fe:	1c59      	adds	r1, r3, #1
   16400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16402:	687a      	ldr	r2, [r7, #4]
   16404:	f7f5 fc83 	bl	bd0e <mp_call_function_n_kw>
   16408:	6438      	str	r0, [r7, #64]	; 0x40
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   1640a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1640c:	f7e9 ffe4 	bl	3d8 <m_free>
        }

        // https://docs.python.org/3.4/reference/datamodel.html#object.__new__
        // "If __new__() does not return an instance of cls, then the new
        // instance's __init__() method will not be invoked."
        if (mp_obj_get_type(new_ret) != self) {
   16410:	6c38      	ldr	r0, [r7, #64]	; 0x40
   16412:	f7f7 f94d 	bl	d6b0 <mp_obj_get_type>
   16416:	4602      	mov	r2, r0
   16418:	68fb      	ldr	r3, [r7, #12]
   1641a:	429a      	cmp	r2, r3
   1641c:	d001      	beq.n	16422 <mp_obj_instance_make_new+0xee>
            return new_ret;
   1641e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16420:	e063      	b.n	164ea <mp_obj_instance_make_new+0x1b6>
        }

        // The instance returned by __new__() becomes the new object
        o = MP_OBJ_TO_PTR(new_ret);
   16422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16424:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // now call Python class __init__ function with all args
    // This method has a chance to call super().__init__() to construct a
    // possible native base class.
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   16426:	2300      	movs	r3, #0
   16428:	633b      	str	r3, [r7, #48]	; 0x30
   1642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1642c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lookup.obj = o;
   1642e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16430:	61bb      	str	r3, [r7, #24]
    lookup.attr = MP_QSTR___init__;
   16432:	2313      	movs	r3, #19
   16434:	61fb      	str	r3, [r7, #28]
    lookup.meth_offset = 0;
   16436:	2300      	movs	r3, #0
   16438:	623b      	str	r3, [r7, #32]
    mp_obj_class_lookup(&lookup, self);
   1643a:	f107 0318 	add.w	r3, r7, #24
   1643e:	68f9      	ldr	r1, [r7, #12]
   16440:	4618      	mov	r0, r3
   16442:	f7ff fdc5 	bl	15fd0 <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   16446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16448:	2b00      	cmp	r3, #0
   1644a:	d03b      	beq.n	164c4 <mp_obj_instance_make_new+0x190>
        mp_obj_t init_ret;
        if (n_args == 0 && n_kw == 0) {
   1644c:	68bb      	ldr	r3, [r7, #8]
   1644e:	2b00      	cmp	r3, #0
   16450:	d10b      	bne.n	1646a <mp_obj_instance_make_new+0x136>
   16452:	687b      	ldr	r3, [r7, #4]
   16454:	2b00      	cmp	r3, #0
   16456:	d108      	bne.n	1646a <mp_obj_instance_make_new+0x136>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   16458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1645c:	461a      	mov	r2, r3
   1645e:	2100      	movs	r1, #0
   16460:	2000      	movs	r0, #0
   16462:	f7f5 fc75 	bl	bd50 <mp_call_method_n_kw>
   16466:	63f8      	str	r0, [r7, #60]	; 0x3c
   16468:	e025      	b.n	164b6 <mp_obj_instance_make_new+0x182>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   1646a:	687b      	ldr	r3, [r7, #4]
   1646c:	005a      	lsls	r2, r3, #1
   1646e:	68bb      	ldr	r3, [r7, #8]
   16470:	4413      	add	r3, r2
   16472:	3302      	adds	r3, #2
   16474:	009b      	lsls	r3, r3, #2
   16476:	4618      	mov	r0, r3
   16478:	f7e9 ff50 	bl	31c <m_malloc>
   1647c:	6378      	str	r0, [r7, #52]	; 0x34
            args2[0] = init_fn[0];
   1647e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16482:	601a      	str	r2, [r3, #0]
            args2[1] = init_fn[1];
   16484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16486:	3304      	adds	r3, #4
   16488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1648a:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   1648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1648e:	f103 0008 	add.w	r0, r3, #8
   16492:	687b      	ldr	r3, [r7, #4]
   16494:	005a      	lsls	r2, r3, #1
   16496:	68bb      	ldr	r3, [r7, #8]
   16498:	4413      	add	r3, r2
   1649a:	009b      	lsls	r3, r3, #2
   1649c:	461a      	mov	r2, r3
   1649e:	6839      	ldr	r1, [r7, #0]
   164a0:	f006 fb1a 	bl	1cad8 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   164a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   164a6:	6879      	ldr	r1, [r7, #4]
   164a8:	68b8      	ldr	r0, [r7, #8]
   164aa:	f7f5 fc51 	bl	bd50 <mp_call_method_n_kw>
   164ae:	63f8      	str	r0, [r7, #60]	; 0x3c
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   164b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   164b2:	f7e9 ff91 	bl	3d8 <m_free>
        }
        if (init_ret != mp_const_none) {
   164b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   164b8:	4a12      	ldr	r2, [pc, #72]	; (16504 <mp_obj_instance_make_new+0x1d0>)
   164ba:	4293      	cmp	r3, r2
   164bc:	d002      	beq.n	164c4 <mp_obj_instance_make_new+0x190>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("__init__() should return None");
   164be:	4812      	ldr	r0, [pc, #72]	; (16508 <mp_obj_instance_make_new+0x1d4>)
   164c0:	f7f6 fcd2 	bl	ce68 <mp_raise_TypeError>

    }

    // If the type had a native base that was not explicitly initialised
    // (constructed) by the Python __init__() method then construct it now.
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   164c4:	697b      	ldr	r3, [r7, #20]
   164c6:	2b00      	cmp	r3, #0
   164c8:	d00e      	beq.n	164e8 <mp_obj_instance_make_new+0x1b4>
   164ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   164cc:	691b      	ldr	r3, [r3, #16]
   164ce:	4a0f      	ldr	r2, [pc, #60]	; (1650c <mp_obj_instance_make_new+0x1d8>)
   164d0:	4293      	cmp	r3, r2
   164d2:	d109      	bne.n	164e8 <mp_obj_instance_make_new+0x1b4>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   164d4:	697b      	ldr	r3, [r7, #20]
   164d6:	68dc      	ldr	r4, [r3, #12]
   164d8:	6978      	ldr	r0, [r7, #20]
   164da:	683b      	ldr	r3, [r7, #0]
   164dc:	687a      	ldr	r2, [r7, #4]
   164de:	68b9      	ldr	r1, [r7, #8]
   164e0:	47a0      	blx	r4
   164e2:	4602      	mov	r2, r0
   164e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   164e6:	611a      	str	r2, [r3, #16]
    }

    return MP_OBJ_FROM_PTR(o);
   164e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   164ea:	4618      	mov	r0, r3
   164ec:	374c      	adds	r7, #76	; 0x4c
   164ee:	46bd      	mov	sp, r7
   164f0:	bd90      	pop	{r4, r7, pc}
   164f2:	bf00      	nop
   164f4:	00016335 	.word	0x00016335
   164f8:	00023bc4 	.word	0x00023bc4
   164fc:	00023fe0 	.word	0x00023fe0
   16500:	00023b08 	.word	0x00023b08
   16504:	00023108 	.word	0x00023108
   16508:	00023be4 	.word	0x00023be4
   1650c:	00023b1c 	.word	0x00023b1c

00016510 <instance_unary_op>:
    #if MICROPY_PY_SYS_GETSIZEOF
    [MP_UNARY_OP_SIZEOF] = MP_QSTR___sizeof__,
    #endif
};

STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   16510:	b580      	push	{r7, lr}
   16512:	b08c      	sub	sp, #48	; 0x30
   16514:	af00      	add	r7, sp, #0
   16516:	6078      	str	r0, [r7, #4]
   16518:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1651a:	683b      	ldr	r3, [r7, #0]
   1651c:	62bb      	str	r3, [r7, #40]	; 0x28
            + sizeof(*self->members.table) * self->members.alloc;
        return MP_OBJ_NEW_SMALL_INT(sz);
    }
    #endif

    qstr op_name = mp_unary_op_method_name[op];
   1651e:	4a3b      	ldr	r2, [pc, #236]	; (1660c <instance_unary_op+0xfc>)
   16520:	687b      	ldr	r3, [r7, #4]
   16522:	4413      	add	r3, r2
   16524:	781b      	ldrb	r3, [r3, #0]
   16526:	627b      	str	r3, [r7, #36]	; 0x24
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16528:	f107 031c 	add.w	r3, r7, #28
   1652c:	2200      	movs	r2, #0
   1652e:	601a      	str	r2, [r3, #0]
   16530:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16532:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16534:	60bb      	str	r3, [r7, #8]
   16536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16538:	60fb      	str	r3, [r7, #12]
   1653a:	2314      	movs	r3, #20
   1653c:	613b      	str	r3, [r7, #16]
   1653e:	f107 031c 	add.w	r3, r7, #28
   16542:	617b      	str	r3, [r7, #20]
   16544:	2300      	movs	r3, #0
   16546:	763b      	strb	r3, [r7, #24]
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, unary_op),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16548:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1654a:	681a      	ldr	r2, [r3, #0]
   1654c:	f107 0308 	add.w	r3, r7, #8
   16550:	4611      	mov	r1, r2
   16552:	4618      	mov	r0, r3
   16554:	f7ff fd3c 	bl	15fd0 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16558:	69fb      	ldr	r3, [r7, #28]
   1655a:	2b08      	cmp	r3, #8
   1655c:	d107      	bne.n	1656e <instance_unary_op+0x5e>
        return mp_unary_op(op, self->subobj[0]);
   1655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16560:	691b      	ldr	r3, [r3, #16]
   16562:	4619      	mov	r1, r3
   16564:	6878      	ldr	r0, [r7, #4]
   16566:	f7f5 f84b 	bl	b600 <mp_unary_op>
   1656a:	4603      	mov	r3, r0
   1656c:	e04a      	b.n	16604 <instance_unary_op+0xf4>
    } else if (member[0] != MP_OBJ_NULL) {
   1656e:	69fb      	ldr	r3, [r7, #28]
   16570:	2b00      	cmp	r3, #0
   16572:	d031      	beq.n	165d8 <instance_unary_op+0xc8>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   16574:	69fb      	ldr	r3, [r7, #28]
   16576:	6839      	ldr	r1, [r7, #0]
   16578:	4618      	mov	r0, r3
   1657a:	f7f5 fba2 	bl	bcc2 <mp_call_function_1>
   1657e:	62f8      	str	r0, [r7, #44]	; 0x2c

        switch (op) {
   16580:	687b      	ldr	r3, [r7, #4]
   16582:	2b06      	cmp	r3, #6
   16584:	d002      	beq.n	1658c <instance_unary_op+0x7c>
   16586:	2b08      	cmp	r3, #8
   16588:	d009      	beq.n	1659e <instance_unary_op+0x8e>
   1658a:	e023      	b.n	165d4 <instance_unary_op+0xc4>
            case MP_UNARY_OP_HASH:
                // __hash__ must return a small int
                val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   1658c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1658e:	f7f7 faa7 	bl	dae0 <mp_obj_get_int_truncated>
   16592:	4603      	mov	r3, r0
   16594:	005b      	lsls	r3, r3, #1
   16596:	f043 0301 	orr.w	r3, r3, #1
   1659a:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
   1659c:	e01a      	b.n	165d4 <instance_unary_op+0xc4>
            case MP_UNARY_OP_INT:
                // Must return int
                if (!MP_OBJ_IS_INT(val)) {
   1659e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   165a0:	f7ff fc08 	bl	15db4 <MP_OBJ_IS_SMALL_INT>
   165a4:	4603      	mov	r3, r0
   165a6:	f083 0301 	eor.w	r3, r3, #1
   165aa:	b2db      	uxtb	r3, r3
   165ac:	2b00      	cmp	r3, #0
   165ae:	d010      	beq.n	165d2 <instance_unary_op+0xc2>
   165b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   165b2:	f7ff fc11 	bl	15dd8 <MP_OBJ_IS_OBJ>
   165b6:	4603      	mov	r3, r0
   165b8:	f083 0301 	eor.w	r3, r3, #1
   165bc:	b2db      	uxtb	r3, r3
   165be:	2b00      	cmp	r3, #0
   165c0:	d104      	bne.n	165cc <instance_unary_op+0xbc>
   165c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   165c4:	681b      	ldr	r3, [r3, #0]
   165c6:	4a12      	ldr	r2, [pc, #72]	; (16610 <instance_unary_op+0x100>)
   165c8:	4293      	cmp	r3, r2
   165ca:	d002      	beq.n	165d2 <instance_unary_op+0xc2>
                    mp_raise_TypeError(NULL);
   165cc:	2000      	movs	r0, #0
   165ce:	f7f6 fc4b 	bl	ce68 <mp_raise_TypeError>
                }
                break;
   165d2:	bf00      	nop
            default:
                // No need to do anything
                ;
        }
        return val;
   165d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   165d6:	e015      	b.n	16604 <instance_unary_op+0xf4>
    } else {
        if (op == MP_UNARY_OP_HASH) {
   165d8:	687b      	ldr	r3, [r7, #4]
   165da:	2b06      	cmp	r3, #6
   165dc:	d111      	bne.n	16602 <instance_unary_op+0xf2>
            lookup.attr = MP_QSTR___eq__;
   165de:	230a      	movs	r3, #10
   165e0:	60fb      	str	r3, [r7, #12]
            mp_obj_class_lookup(&lookup, self->base.type);
   165e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   165e4:	681a      	ldr	r2, [r3, #0]
   165e6:	f107 0308 	add.w	r3, r7, #8
   165ea:	4611      	mov	r1, r2
   165ec:	4618      	mov	r0, r3
   165ee:	f7ff fcef 	bl	15fd0 <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   165f2:	69fb      	ldr	r3, [r7, #28]
   165f4:	2b00      	cmp	r3, #0
   165f6:	d104      	bne.n	16602 <instance_unary_op+0xf2>
                // https://docs.python.org/3/reference/datamodel.html#object.__hash__
                // "User-defined classes have __eq__() and __hash__() methods by default;
                // with them, all objects compare unequal (except with themselves) and
                // x.__hash__() returns an appropriate value such that x == y implies
                // both that x is y and hash(x) == hash(y)."
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   165f8:	683b      	ldr	r3, [r7, #0]
   165fa:	005b      	lsls	r3, r3, #1
   165fc:	f043 0301 	orr.w	r3, r3, #1
   16600:	e000      	b.n	16604 <instance_unary_op+0xf4>
            }
            // "A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None.
            // When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError"
        }

        return MP_OBJ_NULL; // op not supported
   16602:	2300      	movs	r3, #0
    }
}
   16604:	4618      	mov	r0, r3
   16606:	3730      	adds	r7, #48	; 0x30
   16608:	46bd      	mov	sp, r7
   1660a:	bd80      	pop	{r7, pc}
   1660c:	00023c04 	.word	0x00023c04
   16610:	00022bbc 	.word	0x00022bbc

00016614 <instance_binary_op>:
    [MP_BINARY_OP_REVERSE_RSHIFT] = MP_QSTR___rrshift__,
    #endif
    #endif
};

STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   16614:	b580      	push	{r7, lr}
   16616:	b090      	sub	sp, #64	; 0x40
   16618:	af00      	add	r7, sp, #0
   1661a:	60f8      	str	r0, [r7, #12]
   1661c:	60b9      	str	r1, [r7, #8]
   1661e:	607a      	str	r2, [r7, #4]
    // Note: For ducktyping, CPython does not look in the instance members or use
    // __getattr__ or __getattribute__.  It only looks in the class dictionary.
    mp_obj_instance_t *lhs = MP_OBJ_TO_PTR(lhs_in);
   16620:	68bb      	ldr	r3, [r7, #8]
   16622:	63bb      	str	r3, [r7, #56]	; 0x38
retry:;
    qstr op_name = mp_binary_op_method_name[op];
   16624:	4a24      	ldr	r2, [pc, #144]	; (166b8 <instance_binary_op+0xa4>)
   16626:	68fb      	ldr	r3, [r7, #12]
   16628:	4413      	add	r3, r2
   1662a:	781b      	ldrb	r3, [r3, #0]
   1662c:	637b      	str	r3, [r7, #52]	; 0x34
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   1662e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16632:	2200      	movs	r2, #0
   16634:	601a      	str	r2, [r3, #0]
   16636:	605a      	str	r2, [r3, #4]
   16638:	609a      	str	r2, [r3, #8]
    struct class_lookup_data lookup = {
   1663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1663c:	617b      	str	r3, [r7, #20]
   1663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16640:	61bb      	str	r3, [r7, #24]
   16642:	2318      	movs	r3, #24
   16644:	61fb      	str	r3, [r7, #28]
   16646:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1664a:	623b      	str	r3, [r7, #32]
   1664c:	2300      	movs	r3, #0
   1664e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, binary_op),
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, lhs->base.type);
   16652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16654:	681a      	ldr	r2, [r3, #0]
   16656:	f107 0314 	add.w	r3, r7, #20
   1665a:	4611      	mov	r1, r2
   1665c:	4618      	mov	r0, r3
   1665e:	f7ff fcb7 	bl	15fd0 <mp_obj_class_lookup>

    mp_obj_t res;
    if (dest[0] == MP_OBJ_SENTINEL) {
   16662:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16664:	2b08      	cmp	r3, #8
   16666:	d108      	bne.n	1667a <instance_binary_op+0x66>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   16668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1666a:	691b      	ldr	r3, [r3, #16]
   1666c:	687a      	ldr	r2, [r7, #4]
   1666e:	4619      	mov	r1, r3
   16670:	68f8      	ldr	r0, [r7, #12]
   16672:	f7f5 f8b5 	bl	b7e0 <mp_binary_op>
   16676:	63f8      	str	r0, [r7, #60]	; 0x3c
   16678:	e019      	b.n	166ae <instance_binary_op+0x9a>
    } else if (dest[0] != MP_OBJ_NULL) {
   1667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1667c:	2b00      	cmp	r3, #0
   1667e:	d00a      	beq.n	16696 <instance_binary_op+0x82>
        dest[2] = rhs_in;
   16680:	687b      	ldr	r3, [r7, #4]
   16682:	633b      	str	r3, [r7, #48]	; 0x30
        res = mp_call_method_n_kw(1, 0, dest);
   16684:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16688:	461a      	mov	r2, r3
   1668a:	2100      	movs	r1, #0
   1668c:	2001      	movs	r0, #1
   1668e:	f7f5 fb5f 	bl	bd50 <mp_call_method_n_kw>
   16692:	63f8      	str	r0, [r7, #60]	; 0x3c
   16694:	e00b      	b.n	166ae <instance_binary_op+0x9a>
    } else {
        // If this was an inplace method, fallback to normal method
        // https://docs.python.org/3/reference/datamodel.html#object.__iadd__ :
        // "If a specific method is not defined, the augmented assignment
        // falls back to the normal methods."
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   16696:	68fb      	ldr	r3, [r7, #12]
   16698:	2b08      	cmp	r3, #8
   1669a:	d906      	bls.n	166aa <instance_binary_op+0x96>
   1669c:	68fb      	ldr	r3, [r7, #12]
   1669e:	2b14      	cmp	r3, #20
   166a0:	d803      	bhi.n	166aa <instance_binary_op+0x96>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   166a2:	68fb      	ldr	r3, [r7, #12]
   166a4:	330c      	adds	r3, #12
   166a6:	60fb      	str	r3, [r7, #12]
            goto retry;
   166a8:	e7bc      	b.n	16624 <instance_binary_op+0x10>
        }
        return MP_OBJ_NULL; // op not supported
   166aa:	2300      	movs	r3, #0
   166ac:	e000      	b.n	166b0 <instance_binary_op+0x9c>
    if (res == mp_const_notimplemented) {
        return MP_OBJ_NULL; // op not supported
    }
    #endif

    return res;
   166ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   166b0:	4618      	mov	r0, r3
   166b2:	3740      	adds	r7, #64	; 0x40
   166b4:	46bd      	mov	sp, r7
   166b6:	bd80      	pop	{r7, pc}
   166b8:	00023c10 	.word	0x00023c10

000166bc <mp_obj_instance_load_attr>:

STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   166bc:	b580      	push	{r7, lr}
   166be:	b090      	sub	sp, #64	; 0x40
   166c0:	af00      	add	r7, sp, #0
   166c2:	60f8      	str	r0, [r7, #12]
   166c4:	60b9      	str	r1, [r7, #8]
   166c6:	607a      	str	r2, [r7, #4]
    // logic: look in instance members then class locals
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   166c8:	68f8      	ldr	r0, [r7, #12]
   166ca:	f7f6 fff1 	bl	d6b0 <mp_obj_get_type>
   166ce:	4603      	mov	r3, r0
   166d0:	68db      	ldr	r3, [r3, #12]
   166d2:	4a2f      	ldr	r2, [pc, #188]	; (16790 <mp_obj_instance_load_attr+0xd4>)
   166d4:	4293      	cmp	r3, r2
   166d6:	d006      	beq.n	166e6 <mp_obj_instance_load_attr+0x2a>
   166d8:	4b2e      	ldr	r3, [pc, #184]	; (16794 <mp_obj_instance_load_attr+0xd8>)
   166da:	4a2f      	ldr	r2, [pc, #188]	; (16798 <mp_obj_instance_load_attr+0xdc>)
   166dc:	f44f 7111 	mov.w	r1, #580	; 0x244
   166e0:	482e      	ldr	r0, [pc, #184]	; (1679c <mp_obj_instance_load_attr+0xe0>)
   166e2:	f004 fecd 	bl	1b480 <__assert_func>
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   166e6:	68fb      	ldr	r3, [r7, #12]
   166e8:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   166ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   166ec:	1d18      	adds	r0, r3, #4
   166ee:	68bb      	ldr	r3, [r7, #8]
   166f0:	009b      	lsls	r3, r3, #2
   166f2:	f043 0302 	orr.w	r3, r3, #2
   166f6:	2200      	movs	r2, #0
   166f8:	4619      	mov	r1, r3
   166fa:	f7f6 fe2f 	bl	d35c <mp_map_lookup>
   166fe:	63b8      	str	r0, [r7, #56]	; 0x38
    if (elem != NULL) {
   16700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16702:	2b00      	cmp	r3, #0
   16704:	d004      	beq.n	16710 <mp_obj_instance_load_attr+0x54>
        // object member, always treated as a value
        dest[0] = elem->value;
   16706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16708:	685a      	ldr	r2, [r3, #4]
   1670a:	687b      	ldr	r3, [r7, #4]
   1670c:	601a      	str	r2, [r3, #0]
        return;
   1670e:	e03b      	b.n	16788 <mp_obj_instance_load_attr+0xcc>
        }
        dest[0] = attr_dict;
        return;
    }
#endif
    struct class_lookup_data lookup = {
   16710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16712:	623b      	str	r3, [r7, #32]
   16714:	68bb      	ldr	r3, [r7, #8]
   16716:	627b      	str	r3, [r7, #36]	; 0x24
   16718:	2300      	movs	r3, #0
   1671a:	62bb      	str	r3, [r7, #40]	; 0x28
   1671c:	687b      	ldr	r3, [r7, #4]
   1671e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16720:	2300      	movs	r3, #0
   16722:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        .attr = attr,
        .meth_offset = 0,
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16728:	681a      	ldr	r2, [r3, #0]
   1672a:	f107 0320 	add.w	r3, r7, #32
   1672e:	4611      	mov	r1, r2
   16730:	4618      	mov	r0, r3
   16732:	f7ff fc4d 	bl	15fd0 <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   16736:	687b      	ldr	r3, [r7, #4]
   16738:	681b      	ldr	r3, [r3, #0]
   1673a:	637b      	str	r3, [r7, #52]	; 0x34
    if (member != MP_OBJ_NULL) {
   1673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1673e:	2b00      	cmp	r3, #0
   16740:	d006      	beq.n	16750 <mp_obj_instance_load_attr+0x94>
        if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   16742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16744:	681b      	ldr	r3, [r3, #0]
   16746:	889b      	ldrh	r3, [r3, #4]
   16748:	f003 0302 	and.w	r3, r3, #2
   1674c:	2b00      	cmp	r3, #0
            attr_get_method[2] = self_in;
            attr_get_method[3] = MP_OBJ_FROM_PTR(mp_obj_get_type(self_in));
            dest[0] = mp_call_method_n_kw(2, 0, attr_get_method);
        }
        #endif
        return;
   1674e:	e01b      	b.n	16788 <mp_obj_instance_load_attr+0xcc>
    }

    // try __getattr__
    if (attr != MP_QSTR___getattr__) {
   16750:	68bb      	ldr	r3, [r7, #8]
   16752:	2b0d      	cmp	r3, #13
   16754:	d018      	beq.n	16788 <mp_obj_instance_load_attr+0xcc>
            return;
        }
        #endif

        mp_obj_t dest2[3];
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   16756:	f107 0314 	add.w	r3, r7, #20
   1675a:	461a      	mov	r2, r3
   1675c:	210d      	movs	r1, #13
   1675e:	68f8      	ldr	r0, [r7, #12]
   16760:	f7f5 ff6e 	bl	c640 <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   16764:	697b      	ldr	r3, [r7, #20]
   16766:	2b00      	cmp	r3, #0
   16768:	d00e      	beq.n	16788 <mp_obj_instance_load_attr+0xcc>
            // __getattr__ exists, call it and return its result
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   1676a:	68bb      	ldr	r3, [r7, #8]
   1676c:	009b      	lsls	r3, r3, #2
   1676e:	f043 0302 	orr.w	r3, r3, #2
   16772:	61fb      	str	r3, [r7, #28]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   16774:	f107 0314 	add.w	r3, r7, #20
   16778:	461a      	mov	r2, r3
   1677a:	2100      	movs	r1, #0
   1677c:	2001      	movs	r0, #1
   1677e:	f7f5 fae7 	bl	bd50 <mp_call_method_n_kw>
   16782:	4602      	mov	r2, r0
   16784:	687b      	ldr	r3, [r7, #4]
   16786:	601a      	str	r2, [r3, #0]
            return;
        }
    }
}
   16788:	3740      	adds	r7, #64	; 0x40
   1678a:	46bd      	mov	sp, r7
   1678c:	bd80      	pop	{r7, pc}
   1678e:	bf00      	nop
   16790:	00016335 	.word	0x00016335
   16794:	00023c34 	.word	0x00023c34
   16798:	00023ffc 	.word	0x00023ffc
   1679c:	00023b08 	.word	0x00023b08

000167a0 <mp_obj_instance_store_attr>:

STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   167a0:	b580      	push	{r7, lr}
   167a2:	b086      	sub	sp, #24
   167a4:	af00      	add	r7, sp, #0
   167a6:	60f8      	str	r0, [r7, #12]
   167a8:	60b9      	str	r1, [r7, #8]
   167aa:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   167ac:	68fb      	ldr	r3, [r7, #12]
   167ae:	617b      	str	r3, [r7, #20]

    if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   167b0:	697b      	ldr	r3, [r7, #20]
   167b2:	681b      	ldr	r3, [r3, #0]
   167b4:	889b      	ldrh	r3, [r3, #4]
   167b6:	f003 0302 	and.w	r3, r3, #2
   167ba:	2b00      	cmp	r3, #0
    }
    #endif

skip_special_accessors:

    if (value == MP_OBJ_NULL) {
   167bc:	687b      	ldr	r3, [r7, #4]
   167be:	2b00      	cmp	r3, #0
   167c0:	d111      	bne.n	167e6 <mp_obj_instance_store_attr+0x46>
        // delete attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   167c2:	697b      	ldr	r3, [r7, #20]
   167c4:	1d18      	adds	r0, r3, #4
   167c6:	68bb      	ldr	r3, [r7, #8]
   167c8:	009b      	lsls	r3, r3, #2
   167ca:	f043 0302 	orr.w	r3, r3, #2
   167ce:	2202      	movs	r2, #2
   167d0:	4619      	mov	r1, r3
   167d2:	f7f6 fdc3 	bl	d35c <mp_map_lookup>
   167d6:	6138      	str	r0, [r7, #16]
        return elem != NULL;
   167d8:	693b      	ldr	r3, [r7, #16]
   167da:	2b00      	cmp	r3, #0
   167dc:	bf14      	ite	ne
   167de:	2301      	movne	r3, #1
   167e0:	2300      	moveq	r3, #0
   167e2:	b2db      	uxtb	r3, r3
   167e4:	e00d      	b.n	16802 <mp_obj_instance_store_attr+0x62>
    } else {
        // store attribute
        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   167e6:	697b      	ldr	r3, [r7, #20]
   167e8:	1d18      	adds	r0, r3, #4
   167ea:	68bb      	ldr	r3, [r7, #8]
   167ec:	009b      	lsls	r3, r3, #2
   167ee:	f043 0302 	orr.w	r3, r3, #2
   167f2:	2201      	movs	r2, #1
   167f4:	4619      	mov	r1, r3
   167f6:	f7f6 fdb1 	bl	d35c <mp_map_lookup>
   167fa:	4602      	mov	r2, r0
   167fc:	687b      	ldr	r3, [r7, #4]
   167fe:	6053      	str	r3, [r2, #4]
        return true;
   16800:	2301      	movs	r3, #1
    }
}
   16802:	4618      	mov	r0, r3
   16804:	3718      	adds	r7, #24
   16806:	46bd      	mov	sp, r7
   16808:	bd80      	pop	{r7, pc}

0001680a <mp_obj_instance_attr>:

STATIC void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   1680a:	b580      	push	{r7, lr}
   1680c:	b084      	sub	sp, #16
   1680e:	af00      	add	r7, sp, #0
   16810:	60f8      	str	r0, [r7, #12]
   16812:	60b9      	str	r1, [r7, #8]
   16814:	607a      	str	r2, [r7, #4]
    if (dest[0] == MP_OBJ_NULL) {
   16816:	687b      	ldr	r3, [r7, #4]
   16818:	681b      	ldr	r3, [r3, #0]
   1681a:	2b00      	cmp	r3, #0
   1681c:	d105      	bne.n	1682a <mp_obj_instance_attr+0x20>
        mp_obj_instance_load_attr(self_in, attr, dest);
   1681e:	687a      	ldr	r2, [r7, #4]
   16820:	68b9      	ldr	r1, [r7, #8]
   16822:	68f8      	ldr	r0, [r7, #12]
   16824:	f7ff ff4a 	bl	166bc <mp_obj_instance_load_attr>
    } else {
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
            dest[0] = MP_OBJ_NULL; // indicate success
        }
    }
}
   16828:	e00d      	b.n	16846 <mp_obj_instance_attr+0x3c>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   1682a:	687b      	ldr	r3, [r7, #4]
   1682c:	3304      	adds	r3, #4
   1682e:	681b      	ldr	r3, [r3, #0]
   16830:	461a      	mov	r2, r3
   16832:	68b9      	ldr	r1, [r7, #8]
   16834:	68f8      	ldr	r0, [r7, #12]
   16836:	f7ff ffb3 	bl	167a0 <mp_obj_instance_store_attr>
   1683a:	4603      	mov	r3, r0
   1683c:	2b00      	cmp	r3, #0
   1683e:	d002      	beq.n	16846 <mp_obj_instance_attr+0x3c>
            dest[0] = MP_OBJ_NULL; // indicate success
   16840:	687b      	ldr	r3, [r7, #4]
   16842:	2200      	movs	r2, #0
   16844:	601a      	str	r2, [r3, #0]
}
   16846:	bf00      	nop
   16848:	3710      	adds	r7, #16
   1684a:	46bd      	mov	sp, r7
   1684c:	bd80      	pop	{r7, pc}

0001684e <instance_subscr>:

STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   1684e:	b580      	push	{r7, lr}
   16850:	b090      	sub	sp, #64	; 0x40
   16852:	af00      	add	r7, sp, #0
   16854:	60f8      	str	r0, [r7, #12]
   16856:	60b9      	str	r1, [r7, #8]
   16858:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1685a:	68fb      	ldr	r3, [r7, #12]
   1685c:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_t member[4] = {MP_OBJ_NULL, MP_OBJ_NULL, index, value};
   1685e:	2300      	movs	r3, #0
   16860:	627b      	str	r3, [r7, #36]	; 0x24
   16862:	2300      	movs	r3, #0
   16864:	62bb      	str	r3, [r7, #40]	; 0x28
   16866:	68bb      	ldr	r3, [r7, #8]
   16868:	62fb      	str	r3, [r7, #44]	; 0x2c
   1686a:	687b      	ldr	r3, [r7, #4]
   1686c:	633b      	str	r3, [r7, #48]	; 0x30
    struct class_lookup_data lookup = {
   1686e:	f107 0310 	add.w	r3, r7, #16
   16872:	2200      	movs	r2, #0
   16874:	601a      	str	r2, [r3, #0]
   16876:	605a      	str	r2, [r3, #4]
   16878:	609a      	str	r2, [r3, #8]
   1687a:	60da      	str	r2, [r3, #12]
   1687c:	611a      	str	r2, [r3, #16]
   1687e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16880:	613b      	str	r3, [r7, #16]
   16882:	2320      	movs	r3, #32
   16884:	61bb      	str	r3, [r7, #24]
   16886:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1688a:	61fb      	str	r3, [r7, #28]
        .obj = self,
        .meth_offset = offsetof(mp_obj_type_t, subscr),
        .dest = member,
        .is_type = false,
    };
    if (value == MP_OBJ_NULL) {
   1688c:	687b      	ldr	r3, [r7, #4]
   1688e:	2b00      	cmp	r3, #0
   16890:	d102      	bne.n	16898 <instance_subscr+0x4a>
        // delete item
        lookup.attr = MP_QSTR___delitem__;
   16892:	2308      	movs	r3, #8
   16894:	617b      	str	r3, [r7, #20]
   16896:	e007      	b.n	168a8 <instance_subscr+0x5a>
    } else if (value == MP_OBJ_SENTINEL) {
   16898:	687b      	ldr	r3, [r7, #4]
   1689a:	2b08      	cmp	r3, #8
   1689c:	d102      	bne.n	168a4 <instance_subscr+0x56>
        // load item
        lookup.attr = MP_QSTR___getitem__;
   1689e:	230e      	movs	r3, #14
   168a0:	617b      	str	r3, [r7, #20]
   168a2:	e001      	b.n	168a8 <instance_subscr+0x5a>
    } else {
        // store item
        lookup.attr = MP_QSTR___setitem__;
   168a4:	2323      	movs	r3, #35	; 0x23
   168a6:	617b      	str	r3, [r7, #20]
    }
    mp_obj_class_lookup(&lookup, self->base.type);
   168a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168aa:	681a      	ldr	r2, [r3, #0]
   168ac:	f107 0310 	add.w	r3, r7, #16
   168b0:	4611      	mov	r1, r2
   168b2:	4618      	mov	r0, r3
   168b4:	f7ff fb8c 	bl	15fd0 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   168b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   168ba:	2b08      	cmp	r3, #8
   168bc:	d108      	bne.n	168d0 <instance_subscr+0x82>
        return mp_obj_subscr(self->subobj[0], index, value);
   168be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168c0:	691b      	ldr	r3, [r3, #16]
   168c2:	687a      	ldr	r2, [r7, #4]
   168c4:	68b9      	ldr	r1, [r7, #8]
   168c6:	4618      	mov	r0, r3
   168c8:	f7f7 fa96 	bl	ddf8 <mp_obj_subscr>
   168cc:	4603      	mov	r3, r0
   168ce:	e01c      	b.n	1690a <instance_subscr+0xbc>
    } else if (member[0] != MP_OBJ_NULL) {
   168d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   168d2:	2b00      	cmp	r3, #0
   168d4:	d018      	beq.n	16908 <instance_subscr+0xba>
        size_t n_args = value == MP_OBJ_NULL || value == MP_OBJ_SENTINEL ? 1 : 2;
   168d6:	687b      	ldr	r3, [r7, #4]
   168d8:	2b00      	cmp	r3, #0
   168da:	d002      	beq.n	168e2 <instance_subscr+0x94>
   168dc:	687b      	ldr	r3, [r7, #4]
   168de:	2b08      	cmp	r3, #8
   168e0:	d101      	bne.n	168e6 <instance_subscr+0x98>
   168e2:	2301      	movs	r3, #1
   168e4:	e000      	b.n	168e8 <instance_subscr+0x9a>
   168e6:	2302      	movs	r3, #2
   168e8:	63bb      	str	r3, [r7, #56]	; 0x38
        mp_obj_t ret = mp_call_method_n_kw(n_args, 0, member);
   168ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
   168ee:	461a      	mov	r2, r3
   168f0:	2100      	movs	r1, #0
   168f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   168f4:	f7f5 fa2c 	bl	bd50 <mp_call_method_n_kw>
   168f8:	6378      	str	r0, [r7, #52]	; 0x34
        if (value == MP_OBJ_SENTINEL) {
   168fa:	687b      	ldr	r3, [r7, #4]
   168fc:	2b08      	cmp	r3, #8
   168fe:	d101      	bne.n	16904 <instance_subscr+0xb6>
            return ret;
   16900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16902:	e002      	b.n	1690a <instance_subscr+0xbc>
        } else {
            return mp_const_none;
   16904:	4b03      	ldr	r3, [pc, #12]	; (16914 <instance_subscr+0xc6>)
   16906:	e000      	b.n	1690a <instance_subscr+0xbc>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   16908:	2300      	movs	r3, #0
    }
}
   1690a:	4618      	mov	r0, r3
   1690c:	3740      	adds	r7, #64	; 0x40
   1690e:	46bd      	mov	sp, r7
   16910:	bd80      	pop	{r7, pc}
   16912:	bf00      	nop
   16914:	00023108 	.word	0x00023108

00016918 <mp_obj_instance_get_call>:

STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   16918:	b580      	push	{r7, lr}
   1691a:	b088      	sub	sp, #32
   1691c:	af00      	add	r7, sp, #0
   1691e:	6078      	str	r0, [r7, #4]
   16920:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16922:	687b      	ldr	r3, [r7, #4]
   16924:	61fb      	str	r3, [r7, #28]
    struct class_lookup_data lookup = {
   16926:	69fb      	ldr	r3, [r7, #28]
   16928:	60bb      	str	r3, [r7, #8]
   1692a:	2305      	movs	r3, #5
   1692c:	60fb      	str	r3, [r7, #12]
   1692e:	2310      	movs	r3, #16
   16930:	613b      	str	r3, [r7, #16]
   16932:	683b      	ldr	r3, [r7, #0]
   16934:	617b      	str	r3, [r7, #20]
   16936:	2300      	movs	r3, #0
   16938:	763b      	strb	r3, [r7, #24]
        .attr = MP_QSTR___call__,
        .meth_offset = offsetof(mp_obj_type_t, call),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   1693a:	69fb      	ldr	r3, [r7, #28]
   1693c:	681a      	ldr	r2, [r3, #0]
   1693e:	f107 0308 	add.w	r3, r7, #8
   16942:	4611      	mov	r1, r2
   16944:	4618      	mov	r0, r3
   16946:	f7ff fb43 	bl	15fd0 <mp_obj_class_lookup>
    return member[0];
   1694a:	683b      	ldr	r3, [r7, #0]
   1694c:	681b      	ldr	r3, [r3, #0]
}
   1694e:	4618      	mov	r0, r3
   16950:	3720      	adds	r7, #32
   16952:	46bd      	mov	sp, r7
   16954:	bd80      	pop	{r7, pc}

00016956 <mp_obj_instance_is_callable>:

bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   16956:	b580      	push	{r7, lr}
   16958:	b084      	sub	sp, #16
   1695a:	af00      	add	r7, sp, #0
   1695c:	6078      	str	r0, [r7, #4]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   1695e:	2300      	movs	r3, #0
   16960:	60bb      	str	r3, [r7, #8]
   16962:	2300      	movs	r3, #0
   16964:	60fb      	str	r3, [r7, #12]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   16966:	f107 0308 	add.w	r3, r7, #8
   1696a:	4619      	mov	r1, r3
   1696c:	6878      	ldr	r0, [r7, #4]
   1696e:	f7ff ffd3 	bl	16918 <mp_obj_instance_get_call>
   16972:	4603      	mov	r3, r0
   16974:	2b00      	cmp	r3, #0
   16976:	bf14      	ite	ne
   16978:	2301      	movne	r3, #1
   1697a:	2300      	moveq	r3, #0
   1697c:	b2db      	uxtb	r3, r3
}
   1697e:	4618      	mov	r0, r3
   16980:	3710      	adds	r7, #16
   16982:	46bd      	mov	sp, r7
   16984:	bd80      	pop	{r7, pc}

00016986 <mp_obj_instance_call>:

mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16986:	b580      	push	{r7, lr}
   16988:	b08a      	sub	sp, #40	; 0x28
   1698a:	af02      	add	r7, sp, #8
   1698c:	60f8      	str	r0, [r7, #12]
   1698e:	60b9      	str	r1, [r7, #8]
   16990:	607a      	str	r2, [r7, #4]
   16992:	603b      	str	r3, [r7, #0]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16994:	2300      	movs	r3, #0
   16996:	613b      	str	r3, [r7, #16]
   16998:	2300      	movs	r3, #0
   1699a:	617b      	str	r3, [r7, #20]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   1699c:	f107 0310 	add.w	r3, r7, #16
   169a0:	4619      	mov	r1, r3
   169a2:	68f8      	ldr	r0, [r7, #12]
   169a4:	f7ff ffb8 	bl	16918 <mp_obj_instance_get_call>
   169a8:	61f8      	str	r0, [r7, #28]
    if (call == MP_OBJ_NULL) {
   169aa:	69fb      	ldr	r3, [r7, #28]
   169ac:	2b00      	cmp	r3, #0
   169ae:	d102      	bne.n	169b6 <mp_obj_instance_call+0x30>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object not callable");
   169b0:	480e      	ldr	r0, [pc, #56]	; (169ec <mp_obj_instance_call+0x66>)
   169b2:	f7f6 fa59 	bl	ce68 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object isn't callable", mp_obj_get_type_str(self_in)));
        }
    }
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   169b6:	68fb      	ldr	r3, [r7, #12]
   169b8:	61bb      	str	r3, [r7, #24]
    if (call == MP_OBJ_SENTINEL) {
   169ba:	69fb      	ldr	r3, [r7, #28]
   169bc:	2b08      	cmp	r3, #8
   169be:	d108      	bne.n	169d2 <mp_obj_instance_call+0x4c>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   169c0:	69bb      	ldr	r3, [r7, #24]
   169c2:	6918      	ldr	r0, [r3, #16]
   169c4:	683b      	ldr	r3, [r7, #0]
   169c6:	687a      	ldr	r2, [r7, #4]
   169c8:	68b9      	ldr	r1, [r7, #8]
   169ca:	f7f5 f9a0 	bl	bd0e <mp_call_function_n_kw>
   169ce:	4603      	mov	r3, r0
   169d0:	e008      	b.n	169e4 <mp_obj_instance_call+0x5e>
    }

    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   169d2:	6938      	ldr	r0, [r7, #16]
   169d4:	6979      	ldr	r1, [r7, #20]
   169d6:	683b      	ldr	r3, [r7, #0]
   169d8:	9300      	str	r3, [sp, #0]
   169da:	687b      	ldr	r3, [r7, #4]
   169dc:	68ba      	ldr	r2, [r7, #8]
   169de:	f7f7 fb49 	bl	e074 <mp_call_method_self_n_kw>
   169e2:	4603      	mov	r3, r0
}
   169e4:	4618      	mov	r0, r3
   169e6:	3720      	adds	r7, #32
   169e8:	46bd      	mov	sp, r7
   169ea:	bd80      	pop	{r7, pc}
   169ec:	00023c68 	.word	0x00023c68

000169f0 <instance_getiter>:

STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   169f0:	b580      	push	{r7, lr}
   169f2:	b08c      	sub	sp, #48	; 0x30
   169f4:	af00      	add	r7, sp, #0
   169f6:	6078      	str	r0, [r7, #4]
   169f8:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   169fa:	687b      	ldr	r3, [r7, #4]
   169fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_obj_t member[2] = {MP_OBJ_NULL};
   169fe:	f107 0320 	add.w	r3, r7, #32
   16a02:	2200      	movs	r2, #0
   16a04:	601a      	str	r2, [r3, #0]
   16a06:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a0a:	60fb      	str	r3, [r7, #12]
   16a0c:	2316      	movs	r3, #22
   16a0e:	613b      	str	r3, [r7, #16]
   16a10:	2324      	movs	r3, #36	; 0x24
   16a12:	617b      	str	r3, [r7, #20]
   16a14:	f107 0320 	add.w	r3, r7, #32
   16a18:	61bb      	str	r3, [r7, #24]
   16a1a:	2300      	movs	r3, #0
   16a1c:	773b      	strb	r3, [r7, #28]
        .attr = MP_QSTR___iter__,
        .meth_offset = offsetof(mp_obj_type_t, getiter),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a20:	681a      	ldr	r2, [r3, #0]
   16a22:	f107 030c 	add.w	r3, r7, #12
   16a26:	4611      	mov	r1, r2
   16a28:	4618      	mov	r0, r3
   16a2a:	f7ff fad1 	bl	15fd0 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   16a2e:	6a3b      	ldr	r3, [r7, #32]
   16a30:	2b00      	cmp	r3, #0
   16a32:	d101      	bne.n	16a38 <instance_getiter+0x48>
        return MP_OBJ_NULL;
   16a34:	2300      	movs	r3, #0
   16a36:	e019      	b.n	16a6c <instance_getiter+0x7c>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   16a38:	6a3b      	ldr	r3, [r7, #32]
   16a3a:	2b08      	cmp	r3, #8
   16a3c:	d10e      	bne.n	16a5c <instance_getiter+0x6c>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a40:	691b      	ldr	r3, [r3, #16]
   16a42:	4618      	mov	r0, r3
   16a44:	f7f6 fe34 	bl	d6b0 <mp_obj_get_type>
   16a48:	62b8      	str	r0, [r7, #40]	; 0x28
        return type->getiter(self->subobj[0], iter_buf);
   16a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16a50:	6912      	ldr	r2, [r2, #16]
   16a52:	6839      	ldr	r1, [r7, #0]
   16a54:	4610      	mov	r0, r2
   16a56:	4798      	blx	r3
   16a58:	4603      	mov	r3, r0
   16a5a:	e007      	b.n	16a6c <instance_getiter+0x7c>
    } else {
        return mp_call_method_n_kw(0, 0, member);
   16a5c:	f107 0320 	add.w	r3, r7, #32
   16a60:	461a      	mov	r2, r3
   16a62:	2100      	movs	r1, #0
   16a64:	2000      	movs	r0, #0
   16a66:	f7f5 f973 	bl	bd50 <mp_call_method_n_kw>
   16a6a:	4603      	mov	r3, r0
    }
}
   16a6c:	4618      	mov	r0, r3
   16a6e:	3730      	adds	r7, #48	; 0x30
   16a70:	46bd      	mov	sp, r7
   16a72:	bd80      	pop	{r7, pc}

00016a74 <instance_get_buffer>:

STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   16a74:	b580      	push	{r7, lr}
   16a76:	b08e      	sub	sp, #56	; 0x38
   16a78:	af00      	add	r7, sp, #0
   16a7a:	60f8      	str	r0, [r7, #12]
   16a7c:	60b9      	str	r1, [r7, #8]
   16a7e:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16a80:	68fb      	ldr	r3, [r7, #12]
   16a82:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16a88:	2200      	movs	r2, #0
   16a8a:	601a      	str	r2, [r3, #0]
   16a8c:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a90:	617b      	str	r3, [r7, #20]
   16a92:	2301      	movs	r3, #1
   16a94:	61bb      	str	r3, [r7, #24]
   16a96:	232c      	movs	r3, #44	; 0x2c
   16a98:	61fb      	str	r3, [r7, #28]
   16a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16a9e:	623b      	str	r3, [r7, #32]
   16aa0:	2300      	movs	r3, #0
   16aa2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = MP_QSTR_, // don't actually look for a method
        .meth_offset = offsetof(mp_obj_type_t, buffer_p.get_buffer),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16aa8:	681a      	ldr	r2, [r3, #0]
   16aaa:	f107 0314 	add.w	r3, r7, #20
   16aae:	4611      	mov	r1, r2
   16ab0:	4618      	mov	r0, r3
   16ab2:	f7ff fa8d 	bl	15fd0 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ab8:	2b08      	cmp	r3, #8
   16aba:	d10e      	bne.n	16ada <instance_get_buffer+0x66>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16abe:	691b      	ldr	r3, [r3, #16]
   16ac0:	4618      	mov	r0, r3
   16ac2:	f7f6 fdf5 	bl	d6b0 <mp_obj_get_type>
   16ac6:	6338      	str	r0, [r7, #48]	; 0x30
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   16ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16ace:	6910      	ldr	r0, [r2, #16]
   16ad0:	687a      	ldr	r2, [r7, #4]
   16ad2:	68b9      	ldr	r1, [r7, #8]
   16ad4:	4798      	blx	r3
   16ad6:	4603      	mov	r3, r0
   16ad8:	e000      	b.n	16adc <instance_get_buffer+0x68>
    } else {
        return 1; // object does not support buffer protocol
   16ada:	2301      	movs	r3, #1
    }
}
   16adc:	4618      	mov	r0, r3
   16ade:	3738      	adds	r7, #56	; 0x38
   16ae0:	46bd      	mov	sp, r7
   16ae2:	bd80      	pop	{r7, pc}

00016ae4 <type_print>:
    #endif
    return false;
}
#endif

STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16ae4:	b580      	push	{r7, lr}
   16ae6:	b086      	sub	sp, #24
   16ae8:	af00      	add	r7, sp, #0
   16aea:	60f8      	str	r0, [r7, #12]
   16aec:	60b9      	str	r1, [r7, #8]
   16aee:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16af0:	68bb      	ldr	r3, [r7, #8]
   16af2:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<class '%q'>", self->name);
   16af4:	697b      	ldr	r3, [r7, #20]
   16af6:	88db      	ldrh	r3, [r3, #6]
   16af8:	461a      	mov	r2, r3
   16afa:	4904      	ldr	r1, [pc, #16]	; (16b0c <type_print+0x28>)
   16afc:	68f8      	ldr	r0, [r7, #12]
   16afe:	f7eb f9f3 	bl	1ee8 <mp_printf>
}
   16b02:	bf00      	nop
   16b04:	3718      	adds	r7, #24
   16b06:	46bd      	mov	sp, r7
   16b08:	bd80      	pop	{r7, pc}
   16b0a:	bf00      	nop
   16b0c:	00023c7c 	.word	0x00023c7c

00016b10 <type_make_new>:

STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16b10:	b580      	push	{r7, lr}
   16b12:	b086      	sub	sp, #24
   16b14:	af02      	add	r7, sp, #8
   16b16:	60f8      	str	r0, [r7, #12]
   16b18:	60b9      	str	r1, [r7, #8]
   16b1a:	607a      	str	r2, [r7, #4]
   16b1c:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   16b1e:	2300      	movs	r3, #0
   16b20:	9300      	str	r3, [sp, #0]
   16b22:	2303      	movs	r3, #3
   16b24:	2201      	movs	r2, #1
   16b26:	6879      	ldr	r1, [r7, #4]
   16b28:	68b8      	ldr	r0, [r7, #8]
   16b2a:	f7ff f967 	bl	15dfc <mp_arg_check_num>

    switch (n_args) {
   16b2e:	68bb      	ldr	r3, [r7, #8]
   16b30:	2b01      	cmp	r3, #1
   16b32:	d002      	beq.n	16b3a <type_make_new+0x2a>
   16b34:	2b03      	cmp	r3, #3
   16b36:	d007      	beq.n	16b48 <type_make_new+0x38>
   16b38:	e016      	b.n	16b68 <type_make_new+0x58>
        case 1:
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   16b3a:	683b      	ldr	r3, [r7, #0]
   16b3c:	681b      	ldr	r3, [r3, #0]
   16b3e:	4618      	mov	r0, r3
   16b40:	f7f6 fdb6 	bl	d6b0 <mp_obj_get_type>
   16b44:	4603      	mov	r3, r0
   16b46:	e012      	b.n	16b6e <type_make_new+0x5e>

        case 3:
            // args[0] = name
            // args[1] = bases tuple
            // args[2] = locals dict
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   16b48:	683b      	ldr	r3, [r7, #0]
   16b4a:	681b      	ldr	r3, [r3, #0]
   16b4c:	4618      	mov	r0, r3
   16b4e:	f7fe fc43 	bl	153d8 <mp_obj_str_get_qstr>
   16b52:	683b      	ldr	r3, [r7, #0]
   16b54:	3304      	adds	r3, #4
   16b56:	6819      	ldr	r1, [r3, #0]
   16b58:	683b      	ldr	r3, [r7, #0]
   16b5a:	3308      	adds	r3, #8
   16b5c:	681b      	ldr	r3, [r3, #0]
   16b5e:	461a      	mov	r2, r3
   16b60:	f000 f8b0 	bl	16cc4 <mp_obj_new_type>
   16b64:	4603      	mov	r3, r0
   16b66:	e002      	b.n	16b6e <type_make_new+0x5e>

        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
   16b68:	4803      	ldr	r0, [pc, #12]	; (16b78 <type_make_new+0x68>)
   16b6a:	f7f6 f97d 	bl	ce68 <mp_raise_TypeError>
    }
}
   16b6e:	4618      	mov	r0, r3
   16b70:	3710      	adds	r7, #16
   16b72:	46bd      	mov	sp, r7
   16b74:	bd80      	pop	{r7, pc}
   16b76:	bf00      	nop
   16b78:	00023c8c 	.word	0x00023c8c

00016b7c <type_call>:

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16b7c:	b590      	push	{r4, r7, lr}
   16b7e:	b087      	sub	sp, #28
   16b80:	af00      	add	r7, sp, #0
   16b82:	60f8      	str	r0, [r7, #12]
   16b84:	60b9      	str	r1, [r7, #8]
   16b86:	607a      	str	r2, [r7, #4]
   16b88:	603b      	str	r3, [r7, #0]
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16b8a:	68fb      	ldr	r3, [r7, #12]
   16b8c:	617b      	str	r3, [r7, #20]

    if (self->make_new == NULL) {
   16b8e:	697b      	ldr	r3, [r7, #20]
   16b90:	68db      	ldr	r3, [r3, #12]
   16b92:	2b00      	cmp	r3, #0
   16b94:	d102      	bne.n	16b9c <type_call+0x20>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("cannot create instance");
   16b96:	4808      	ldr	r0, [pc, #32]	; (16bb8 <type_call+0x3c>)
   16b98:	f7f6 f966 	bl	ce68 <mp_raise_TypeError>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   16b9c:	697b      	ldr	r3, [r7, #20]
   16b9e:	68dc      	ldr	r4, [r3, #12]
   16ba0:	683b      	ldr	r3, [r7, #0]
   16ba2:	687a      	ldr	r2, [r7, #4]
   16ba4:	68b9      	ldr	r1, [r7, #8]
   16ba6:	6978      	ldr	r0, [r7, #20]
   16ba8:	47a0      	blx	r4
   16baa:	6138      	str	r0, [r7, #16]

    // return new instance
    return o;
   16bac:	693b      	ldr	r3, [r7, #16]
}
   16bae:	4618      	mov	r0, r3
   16bb0:	371c      	adds	r7, #28
   16bb2:	46bd      	mov	sp, r7
   16bb4:	bd90      	pop	{r4, r7, pc}
   16bb6:	bf00      	nop
   16bb8:	00023ca8 	.word	0x00023ca8

00016bbc <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16bbc:	b580      	push	{r7, lr}
   16bbe:	b08e      	sub	sp, #56	; 0x38
   16bc0:	af00      	add	r7, sp, #0
   16bc2:	60f8      	str	r0, [r7, #12]
   16bc4:	60b9      	str	r1, [r7, #8]
   16bc6:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   16bc8:	68f8      	ldr	r0, [r7, #12]
   16bca:	f7ff f905 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16bce:	4603      	mov	r3, r0
   16bd0:	2b00      	cmp	r3, #0
   16bd2:	d004      	beq.n	16bde <type_attr+0x22>
   16bd4:	68fb      	ldr	r3, [r7, #12]
   16bd6:	681b      	ldr	r3, [r3, #0]
   16bd8:	4a34      	ldr	r2, [pc, #208]	; (16cac <type_attr+0xf0>)
   16bda:	4293      	cmp	r3, r2
   16bdc:	d006      	beq.n	16bec <type_attr+0x30>
   16bde:	4b34      	ldr	r3, [pc, #208]	; (16cb0 <type_attr+0xf4>)
   16be0:	4a34      	ldr	r2, [pc, #208]	; (16cb4 <type_attr+0xf8>)
   16be2:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
   16be6:	4834      	ldr	r0, [pc, #208]	; (16cb8 <type_attr+0xfc>)
   16be8:	f004 fc4a 	bl	1b480 <__assert_func>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16bec:	68fb      	ldr	r3, [r7, #12]
   16bee:	637b      	str	r3, [r7, #52]	; 0x34

    if (dest[0] == MP_OBJ_NULL) {
   16bf0:	687b      	ldr	r3, [r7, #4]
   16bf2:	681b      	ldr	r3, [r3, #0]
   16bf4:	2b00      	cmp	r3, #0
   16bf6:	d111      	bne.n	16c1c <type_attr+0x60>
        if (attr == MP_QSTR___name__) {
            dest[0] = MP_OBJ_NEW_QSTR(self->name);
            return;
        }
        #endif
        struct class_lookup_data lookup = {
   16bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16bfa:	617b      	str	r3, [r7, #20]
   16bfc:	68bb      	ldr	r3, [r7, #8]
   16bfe:	61bb      	str	r3, [r7, #24]
   16c00:	2300      	movs	r3, #0
   16c02:	61fb      	str	r3, [r7, #28]
   16c04:	687b      	ldr	r3, [r7, #4]
   16c06:	623b      	str	r3, [r7, #32]
   16c08:	2301      	movs	r3, #1
   16c0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            .attr = attr,
            .meth_offset = 0,
            .dest = dest,
            .is_type = true,
        };
        mp_obj_class_lookup(&lookup, self);
   16c0e:	f107 0314 	add.w	r3, r7, #20
   16c12:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16c14:	4618      	mov	r0, r3
   16c16:	f7ff f9db 	bl	15fd0 <mp_obj_class_lookup>
   16c1a:	e044      	b.n	16ca6 <type_attr+0xea>
    } else {
        // delete/store attribute

        if (self->locals_dict != NULL) {
   16c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16c20:	2b00      	cmp	r3, #0
   16c22:	d040      	beq.n	16ca6 <type_attr+0xea>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   16c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16c28:	681b      	ldr	r3, [r3, #0]
   16c2a:	4a24      	ldr	r2, [pc, #144]	; (16cbc <type_attr+0x100>)
   16c2c:	4293      	cmp	r3, r2
   16c2e:	d006      	beq.n	16c3e <type_attr+0x82>
   16c30:	4b23      	ldr	r3, [pc, #140]	; (16cc0 <type_attr+0x104>)
   16c32:	4a20      	ldr	r2, [pc, #128]	; (16cb4 <type_attr+0xf8>)
   16c34:	f240 4103 	movw	r1, #1027	; 0x403
   16c38:	481f      	ldr	r0, [pc, #124]	; (16cb8 <type_attr+0xfc>)
   16c3a:	f004 fc21 	bl	1b480 <__assert_func>
            mp_map_t *locals_map = &self->locals_dict->map;
   16c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16c42:	3304      	adds	r3, #4
   16c44:	633b      	str	r3, [r7, #48]	; 0x30
            if (locals_map->is_fixed) {
   16c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16c48:	781b      	ldrb	r3, [r3, #0]
   16c4a:	f003 0302 	and.w	r3, r3, #2
   16c4e:	b2db      	uxtb	r3, r3
   16c50:	2b00      	cmp	r3, #0
   16c52:	d127      	bne.n	16ca4 <type_attr+0xe8>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   16c54:	687b      	ldr	r3, [r7, #4]
   16c56:	3304      	adds	r3, #4
   16c58:	681b      	ldr	r3, [r3, #0]
   16c5a:	2b00      	cmp	r3, #0
   16c5c:	d110      	bne.n	16c80 <type_attr+0xc4>
                // delete attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16c5e:	68bb      	ldr	r3, [r7, #8]
   16c60:	009b      	lsls	r3, r3, #2
   16c62:	f043 0302 	orr.w	r3, r3, #2
   16c66:	2202      	movs	r2, #2
   16c68:	4619      	mov	r1, r3
   16c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16c6c:	f7f6 fb76 	bl	d35c <mp_map_lookup>
   16c70:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (elem != NULL) {
   16c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c74:	2b00      	cmp	r3, #0
   16c76:	d016      	beq.n	16ca6 <type_attr+0xea>
                    dest[0] = MP_OBJ_NULL; // indicate success
   16c78:	687b      	ldr	r3, [r7, #4]
   16c7a:	2200      	movs	r2, #0
   16c7c:	601a      	str	r2, [r3, #0]
   16c7e:	e012      	b.n	16ca6 <type_attr+0xea>
                    }
                }
                #endif

                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   16c80:	68bb      	ldr	r3, [r7, #8]
   16c82:	009b      	lsls	r3, r3, #2
   16c84:	f043 0302 	orr.w	r3, r3, #2
   16c88:	2201      	movs	r2, #1
   16c8a:	4619      	mov	r1, r3
   16c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16c8e:	f7f6 fb65 	bl	d35c <mp_map_lookup>
   16c92:	62b8      	str	r0, [r7, #40]	; 0x28
                elem->value = dest[1];
   16c94:	687b      	ldr	r3, [r7, #4]
   16c96:	685a      	ldr	r2, [r3, #4]
   16c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16c9a:	605a      	str	r2, [r3, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   16c9c:	687b      	ldr	r3, [r7, #4]
   16c9e:	2200      	movs	r2, #0
   16ca0:	601a      	str	r2, [r3, #0]
   16ca2:	e000      	b.n	16ca6 <type_attr+0xea>
                return;
   16ca4:	bf00      	nop
            }
        }
    }
}
   16ca6:	3738      	adds	r7, #56	; 0x38
   16ca8:	46bd      	mov	sp, r7
   16caa:	bd80      	pop	{r7, pc}
   16cac:	00023d18 	.word	0x00023d18
   16cb0:	00023cc0 	.word	0x00023cc0
   16cb4:	00024018 	.word	0x00024018
   16cb8:	00023b08 	.word	0x00023b08
   16cbc:	00021d40 	.word	0x00021d40
   16cc0:	00023ce8 	.word	0x00023ce8

00016cc4 <mp_obj_new_type>:
    .call = type_call,
    .unary_op = mp_generic_unary_op,
    .attr = type_attr,
};

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   16cc4:	b580      	push	{r7, lr}
   16cc6:	b08e      	sub	sp, #56	; 0x38
   16cc8:	af00      	add	r7, sp, #0
   16cca:	60f8      	str	r0, [r7, #12]
   16ccc:	60b9      	str	r1, [r7, #8]
   16cce:	607a      	str	r2, [r7, #4]
    // Verify input objects have expected type
    if (!MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)) {
   16cd0:	68b8      	ldr	r0, [r7, #8]
   16cd2:	f7ff f881 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16cd6:	4603      	mov	r3, r0
   16cd8:	f083 0301 	eor.w	r3, r3, #1
   16cdc:	b2db      	uxtb	r3, r3
   16cde:	2b00      	cmp	r3, #0
   16ce0:	d104      	bne.n	16cec <mp_obj_new_type+0x28>
   16ce2:	68bb      	ldr	r3, [r7, #8]
   16ce4:	681b      	ldr	r3, [r3, #0]
   16ce6:	4a65      	ldr	r2, [pc, #404]	; (16e7c <mp_obj_new_type+0x1b8>)
   16ce8:	4293      	cmp	r3, r2
   16cea:	d002      	beq.n	16cf2 <mp_obj_new_type+0x2e>
        mp_raise_TypeError(NULL);
   16cec:	2000      	movs	r0, #0
   16cee:	f7f6 f8bb 	bl	ce68 <mp_raise_TypeError>
    }
    if (!MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)) {
   16cf2:	6878      	ldr	r0, [r7, #4]
   16cf4:	f7ff f870 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16cf8:	4603      	mov	r3, r0
   16cfa:	f083 0301 	eor.w	r3, r3, #1
   16cfe:	b2db      	uxtb	r3, r3
   16d00:	2b00      	cmp	r3, #0
   16d02:	d104      	bne.n	16d0e <mp_obj_new_type+0x4a>
   16d04:	687b      	ldr	r3, [r7, #4]
   16d06:	681b      	ldr	r3, [r3, #0]
   16d08:	4a5d      	ldr	r2, [pc, #372]	; (16e80 <mp_obj_new_type+0x1bc>)
   16d0a:	4293      	cmp	r3, r2
   16d0c:	d002      	beq.n	16d14 <mp_obj_new_type+0x50>
        mp_raise_TypeError(NULL);
   16d0e:	2000      	movs	r0, #0
   16d10:	f7f6 f8aa 	bl	ce68 <mp_raise_TypeError>
    }

    // TODO might need to make a copy of locals_dict; at least that's how CPython does it

    // Basic validation of base classes
    uint16_t base_flags = 0;
   16d14:	2300      	movs	r3, #0
   16d16:	867b      	strh	r3, [r7, #50]	; 0x32
    size_t bases_len;
    mp_obj_t *bases_items;
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   16d18:	f107 0214 	add.w	r2, r7, #20
   16d1c:	f107 0318 	add.w	r3, r7, #24
   16d20:	4619      	mov	r1, r3
   16d22:	68b8      	ldr	r0, [r7, #8]
   16d24:	f7fe ffae 	bl	15c84 <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   16d28:	2300      	movs	r3, #0
   16d2a:	637b      	str	r3, [r7, #52]	; 0x34
   16d2c:	e029      	b.n	16d82 <mp_obj_new_type+0xbe>
        if (!MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type)) {
   16d2e:	697a      	ldr	r2, [r7, #20]
   16d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d32:	009b      	lsls	r3, r3, #2
   16d34:	4413      	add	r3, r2
   16d36:	681b      	ldr	r3, [r3, #0]
   16d38:	4618      	mov	r0, r3
   16d3a:	f7ff f84d 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16d3e:	4603      	mov	r3, r0
   16d40:	f083 0301 	eor.w	r3, r3, #1
   16d44:	b2db      	uxtb	r3, r3
   16d46:	2b00      	cmp	r3, #0
   16d48:	d108      	bne.n	16d5c <mp_obj_new_type+0x98>
   16d4a:	697a      	ldr	r2, [r7, #20]
   16d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d4e:	009b      	lsls	r3, r3, #2
   16d50:	4413      	add	r3, r2
   16d52:	681b      	ldr	r3, [r3, #0]
   16d54:	681b      	ldr	r3, [r3, #0]
   16d56:	4a4b      	ldr	r2, [pc, #300]	; (16e84 <mp_obj_new_type+0x1c0>)
   16d58:	4293      	cmp	r3, r2
   16d5a:	d002      	beq.n	16d62 <mp_obj_new_type+0x9e>
            mp_raise_TypeError(NULL);
   16d5c:	2000      	movs	r0, #0
   16d5e:	f7f6 f883 	bl	ce68 <mp_raise_TypeError>
        }
        mp_obj_type_t *t = MP_OBJ_TO_PTR(bases_items[i]);
   16d62:	697a      	ldr	r2, [r7, #20]
   16d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d66:	009b      	lsls	r3, r3, #2
   16d68:	4413      	add	r3, r2
   16d6a:	681b      	ldr	r3, [r3, #0]
   16d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        // TODO: Verify with CPy, tested on function type
        if (t->make_new == NULL) {
   16d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16d70:	68db      	ldr	r3, [r3, #12]
   16d72:	2b00      	cmp	r3, #0
   16d74:	d102      	bne.n	16d7c <mp_obj_new_type+0xb8>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("type isn't an acceptable base type");
   16d76:	4844      	ldr	r0, [pc, #272]	; (16e88 <mp_obj_new_type+0x1c4>)
   16d78:	f7f6 f876 	bl	ce68 <mp_raise_TypeError>
    for (size_t i = 0; i < bases_len; i++) {
   16d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d7e:	3301      	adds	r3, #1
   16d80:	637b      	str	r3, [r7, #52]	; 0x34
   16d82:	69bb      	ldr	r3, [r7, #24]
   16d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16d86:	429a      	cmp	r2, r3
   16d88:	d3d1      	bcc.n	16d2e <mp_obj_new_type+0x6a>
            base_flags |= t->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS;
        }
        #endif
    }

    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   16d8a:	203c      	movs	r0, #60	; 0x3c
   16d8c:	f7e9 faeb 	bl	366 <m_malloc0>
   16d90:	62b8      	str	r0, [r7, #40]	; 0x28
    o->base.type = &mp_type_type;
   16d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d94:	4a3b      	ldr	r2, [pc, #236]	; (16e84 <mp_obj_new_type+0x1c0>)
   16d96:	601a      	str	r2, [r3, #0]
    o->flags = base_flags;
   16d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d9a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   16d9c:	809a      	strh	r2, [r3, #4]
    o->name = name;
   16d9e:	68fb      	ldr	r3, [r7, #12]
   16da0:	b29a      	uxth	r2, r3
   16da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16da4:	80da      	strh	r2, [r3, #6]
    o->print = instance_print;
   16da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16da8:	4a38      	ldr	r2, [pc, #224]	; (16e8c <mp_obj_new_type+0x1c8>)
   16daa:	609a      	str	r2, [r3, #8]
    o->make_new = mp_obj_instance_make_new;
   16dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dae:	4a38      	ldr	r2, [pc, #224]	; (16e90 <mp_obj_new_type+0x1cc>)
   16db0:	60da      	str	r2, [r3, #12]
    o->call = mp_obj_instance_call;
   16db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16db4:	4a37      	ldr	r2, [pc, #220]	; (16e94 <mp_obj_new_type+0x1d0>)
   16db6:	611a      	str	r2, [r3, #16]
    o->unary_op = instance_unary_op;
   16db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dba:	4a37      	ldr	r2, [pc, #220]	; (16e98 <mp_obj_new_type+0x1d4>)
   16dbc:	615a      	str	r2, [r3, #20]
    o->binary_op = instance_binary_op;
   16dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dc0:	4a36      	ldr	r2, [pc, #216]	; (16e9c <mp_obj_new_type+0x1d8>)
   16dc2:	619a      	str	r2, [r3, #24]
    o->attr = mp_obj_instance_attr;
   16dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dc6:	4a36      	ldr	r2, [pc, #216]	; (16ea0 <mp_obj_new_type+0x1dc>)
   16dc8:	61da      	str	r2, [r3, #28]
    o->subscr = instance_subscr;
   16dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dcc:	4a35      	ldr	r2, [pc, #212]	; (16ea4 <mp_obj_new_type+0x1e0>)
   16dce:	621a      	str	r2, [r3, #32]
    o->getiter = instance_getiter;
   16dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dd2:	4a35      	ldr	r2, [pc, #212]	; (16ea8 <mp_obj_new_type+0x1e4>)
   16dd4:	625a      	str	r2, [r3, #36]	; 0x24
    //o->iternext = ; not implemented
    o->buffer_p.get_buffer = instance_get_buffer;
   16dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dd8:	4a34      	ldr	r2, [pc, #208]	; (16eac <mp_obj_new_type+0x1e8>)
   16dda:	62da      	str	r2, [r3, #44]	; 0x2c

    if (bases_len > 0) {
   16ddc:	69bb      	ldr	r3, [r7, #24]
   16dde:	2b00      	cmp	r3, #0
   16de0:	d00f      	beq.n	16e02 <mp_obj_new_type+0x13e>
        // Inherit protocol from a base class. This allows to define an
        // abstract base class which would translate C-level protocol to
        // Python method calls, and any subclass inheriting from it will
        // support this feature.
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   16de2:	697b      	ldr	r3, [r7, #20]
   16de4:	681b      	ldr	r3, [r3, #0]
   16de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dea:	631a      	str	r2, [r3, #48]	; 0x30

        if (bases_len >= 2) {
   16dec:	69bb      	ldr	r3, [r7, #24]
   16dee:	2b01      	cmp	r3, #1
   16df0:	d903      	bls.n	16dfa <mp_obj_new_type+0x136>
            #if MICROPY_MULTIPLE_INHERITANCE
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   16df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16df4:	68ba      	ldr	r2, [r7, #8]
   16df6:	635a      	str	r2, [r3, #52]	; 0x34
   16df8:	e003      	b.n	16e02 <mp_obj_new_type+0x13e>
            #else
            mp_raise_NotImplementedError("multiple inheritance not supported");
            #endif
        } else {
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   16dfa:	697b      	ldr	r3, [r7, #20]
   16dfc:	681a      	ldr	r2, [r3, #0]
   16dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e00:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   16e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e04:	687a      	ldr	r2, [r7, #4]
   16e06:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }
    #endif

    const mp_obj_type_t *native_base;
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   16e08:	f107 0310 	add.w	r3, r7, #16
   16e0c:	4619      	mov	r1, r3
   16e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16e10:	f7ff f810 	bl	15e34 <instance_count_native_bases>
   16e14:	4603      	mov	r3, r0
   16e16:	627b      	str	r3, [r7, #36]	; 0x24
    if (num_native_bases > 1) {
   16e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16e1a:	2b01      	cmp	r3, #1
   16e1c:	d902      	bls.n	16e24 <mp_obj_new_type+0x160>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   16e1e:	4824      	ldr	r0, [pc, #144]	; (16eb0 <mp_obj_new_type+0x1ec>)
   16e20:	f7f6 f822 	bl	ce68 <mp_raise_TypeError>
    }

    mp_map_t *locals_map = &o->locals_dict->map;
   16e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16e28:	3304      	adds	r3, #4
   16e2a:	623b      	str	r3, [r7, #32]
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   16e2c:	2200      	movs	r2, #0
   16e2e:	2176      	movs	r1, #118	; 0x76
   16e30:	6a38      	ldr	r0, [r7, #32]
   16e32:	f7f6 fa93 	bl	d35c <mp_map_lookup>
   16e36:	61f8      	str	r0, [r7, #28]
    if (elem != NULL) {
   16e38:	69fb      	ldr	r3, [r7, #28]
   16e3a:	2b00      	cmp	r3, #0
   16e3c:	d019      	beq.n	16e72 <mp_obj_new_type+0x1ae>
        // __new__ slot exists; check if it is a function
        if (MP_OBJ_IS_FUN(elem->value)) {
   16e3e:	69fb      	ldr	r3, [r7, #28]
   16e40:	685b      	ldr	r3, [r3, #4]
   16e42:	4618      	mov	r0, r3
   16e44:	f7fe ffc8 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16e48:	4603      	mov	r3, r0
   16e4a:	2b00      	cmp	r3, #0
   16e4c:	d011      	beq.n	16e72 <mp_obj_new_type+0x1ae>
   16e4e:	69fb      	ldr	r3, [r7, #28]
   16e50:	685b      	ldr	r3, [r3, #4]
   16e52:	681b      	ldr	r3, [r3, #0]
   16e54:	88db      	ldrh	r3, [r3, #6]
   16e56:	f240 120f 	movw	r2, #271	; 0x10f
   16e5a:	4293      	cmp	r3, r2
   16e5c:	d109      	bne.n	16e72 <mp_obj_new_type+0x1ae>
            // __new__ is a function, wrap it in a staticmethod decorator
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   16e5e:	69fb      	ldr	r3, [r7, #28]
   16e60:	3304      	adds	r3, #4
   16e62:	2200      	movs	r2, #0
   16e64:	2101      	movs	r1, #1
   16e66:	4813      	ldr	r0, [pc, #76]	; (16eb4 <mp_obj_new_type+0x1f0>)
   16e68:	f000 fa93 	bl	17392 <static_class_method_make_new>
   16e6c:	4602      	mov	r2, r0
   16e6e:	69fb      	ldr	r3, [r7, #28]
   16e70:	605a      	str	r2, [r3, #4]
        }
    }

    return MP_OBJ_FROM_PTR(o);
   16e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   16e74:	4618      	mov	r0, r3
   16e76:	3738      	adds	r7, #56	; 0x38
   16e78:	46bd      	mov	sp, r7
   16e7a:	bd80      	pop	{r7, pc}
   16e7c:	00023a20 	.word	0x00023a20
   16e80:	00021d40 	.word	0x00021d40
   16e84:	00023d18 	.word	0x00023d18
   16e88:	00023d54 	.word	0x00023d54
   16e8c:	00016229 	.word	0x00016229
   16e90:	00016335 	.word	0x00016335
   16e94:	00016987 	.word	0x00016987
   16e98:	00016511 	.word	0x00016511
   16e9c:	00016615 	.word	0x00016615
   16ea0:	0001680b 	.word	0x0001680b
   16ea4:	0001684f 	.word	0x0001684f
   16ea8:	000169f1 	.word	0x000169f1
   16eac:	00016a75 	.word	0x00016a75
   16eb0:	00023d78 	.word	0x00023d78
   16eb4:	00023f24 	.word	0x00023f24

00016eb8 <super_print>:
    mp_obj_base_t base;
    mp_obj_t type;
    mp_obj_t obj;
} mp_obj_super_t;

STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16eb8:	b580      	push	{r7, lr}
   16eba:	b086      	sub	sp, #24
   16ebc:	af00      	add	r7, sp, #0
   16ebe:	60f8      	str	r0, [r7, #12]
   16ec0:	60b9      	str	r1, [r7, #8]
   16ec2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   16ec4:	68bb      	ldr	r3, [r7, #8]
   16ec6:	617b      	str	r3, [r7, #20]
    mp_print_str(print, "<super: ");
   16ec8:	490e      	ldr	r1, [pc, #56]	; (16f04 <super_print+0x4c>)
   16eca:	68f8      	ldr	r0, [r7, #12]
   16ecc:	f7ea fcfa 	bl	18c4 <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   16ed0:	697b      	ldr	r3, [r7, #20]
   16ed2:	685b      	ldr	r3, [r3, #4]
   16ed4:	2200      	movs	r2, #0
   16ed6:	4619      	mov	r1, r3
   16ed8:	68f8      	ldr	r0, [r7, #12]
   16eda:	f7f6 fc1a 	bl	d712 <mp_obj_print_helper>
    mp_print_str(print, ", ");
   16ede:	490a      	ldr	r1, [pc, #40]	; (16f08 <super_print+0x50>)
   16ee0:	68f8      	ldr	r0, [r7, #12]
   16ee2:	f7ea fcef 	bl	18c4 <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   16ee6:	697b      	ldr	r3, [r7, #20]
   16ee8:	689b      	ldr	r3, [r3, #8]
   16eea:	2200      	movs	r2, #0
   16eec:	4619      	mov	r1, r3
   16eee:	68f8      	ldr	r0, [r7, #12]
   16ef0:	f7f6 fc0f 	bl	d712 <mp_obj_print_helper>
    mp_print_str(print, ">");
   16ef4:	4905      	ldr	r1, [pc, #20]	; (16f0c <super_print+0x54>)
   16ef6:	68f8      	ldr	r0, [r7, #12]
   16ef8:	f7ea fce4 	bl	18c4 <mp_print_str>
}
   16efc:	bf00      	nop
   16efe:	3718      	adds	r7, #24
   16f00:	46bd      	mov	sp, r7
   16f02:	bd80      	pop	{r7, pc}
   16f04:	00023da8 	.word	0x00023da8
   16f08:	00023db4 	.word	0x00023db4
   16f0c:	00023db8 	.word	0x00023db8

00016f10 <super_make_new>:

STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16f10:	b580      	push	{r7, lr}
   16f12:	b088      	sub	sp, #32
   16f14:	af02      	add	r7, sp, #8
   16f16:	60f8      	str	r0, [r7, #12]
   16f18:	60b9      	str	r1, [r7, #8]
   16f1a:	607a      	str	r2, [r7, #4]
   16f1c:	603b      	str	r3, [r7, #0]
    (void)type_in;
    // 0 arguments are turned into 2 in the compiler
    // 1 argument is not yet implemented
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   16f1e:	2300      	movs	r3, #0
   16f20:	9300      	str	r3, [sp, #0]
   16f22:	2302      	movs	r3, #2
   16f24:	2202      	movs	r2, #2
   16f26:	6879      	ldr	r1, [r7, #4]
   16f28:	68b8      	ldr	r0, [r7, #8]
   16f2a:	f7fe ff67 	bl	15dfc <mp_arg_check_num>
    if (!MP_OBJ_IS_TYPE(args[0], &mp_type_type)) {
   16f2e:	683b      	ldr	r3, [r7, #0]
   16f30:	681b      	ldr	r3, [r3, #0]
   16f32:	4618      	mov	r0, r3
   16f34:	f7fe ff50 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16f38:	4603      	mov	r3, r0
   16f3a:	f083 0301 	eor.w	r3, r3, #1
   16f3e:	b2db      	uxtb	r3, r3
   16f40:	2b00      	cmp	r3, #0
   16f42:	d105      	bne.n	16f50 <super_make_new+0x40>
   16f44:	683b      	ldr	r3, [r7, #0]
   16f46:	681b      	ldr	r3, [r3, #0]
   16f48:	681b      	ldr	r3, [r3, #0]
   16f4a:	4a0d      	ldr	r2, [pc, #52]	; (16f80 <super_make_new+0x70>)
   16f4c:	4293      	cmp	r3, r2
   16f4e:	d002      	beq.n	16f56 <super_make_new+0x46>
        mp_raise_TypeError(NULL);
   16f50:	2000      	movs	r0, #0
   16f52:	f7f5 ff89 	bl	ce68 <mp_raise_TypeError>
    }
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   16f56:	200c      	movs	r0, #12
   16f58:	f7e9 f9e0 	bl	31c <m_malloc>
   16f5c:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   16f5e:	683b      	ldr	r3, [r7, #0]
   16f60:	6819      	ldr	r1, [r3, #0]
   16f62:	683b      	ldr	r3, [r7, #0]
   16f64:	3304      	adds	r3, #4
   16f66:	681a      	ldr	r2, [r3, #0]
   16f68:	697b      	ldr	r3, [r7, #20]
   16f6a:	68f8      	ldr	r0, [r7, #12]
   16f6c:	6018      	str	r0, [r3, #0]
   16f6e:	697b      	ldr	r3, [r7, #20]
   16f70:	6059      	str	r1, [r3, #4]
   16f72:	697b      	ldr	r3, [r7, #20]
   16f74:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
   16f76:	697b      	ldr	r3, [r7, #20]
}
   16f78:	4618      	mov	r0, r3
   16f7a:	3718      	adds	r7, #24
   16f7c:	46bd      	mov	sp, r7
   16f7e:	bd80      	pop	{r7, pc}
   16f80:	00023d18 	.word	0x00023d18

00016f84 <super_attr>:

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16f84:	b580      	push	{r7, lr}
   16f86:	b090      	sub	sp, #64	; 0x40
   16f88:	af00      	add	r7, sp, #0
   16f8a:	60f8      	str	r0, [r7, #12]
   16f8c:	60b9      	str	r1, [r7, #8]
   16f8e:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   16f90:	687b      	ldr	r3, [r7, #4]
   16f92:	681b      	ldr	r3, [r3, #0]
   16f94:	2b00      	cmp	r3, #0
   16f96:	f040 80b8 	bne.w	1710a <super_attr+0x186>
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   16f9a:	68f8      	ldr	r0, [r7, #12]
   16f9c:	f7fe ff1c 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16fa0:	4603      	mov	r3, r0
   16fa2:	2b00      	cmp	r3, #0
   16fa4:	d004      	beq.n	16fb0 <super_attr+0x2c>
   16fa6:	68fb      	ldr	r3, [r7, #12]
   16fa8:	681b      	ldr	r3, [r3, #0]
   16faa:	4a5b      	ldr	r2, [pc, #364]	; (17118 <super_attr+0x194>)
   16fac:	4293      	cmp	r3, r2
   16fae:	d006      	beq.n	16fbe <super_attr+0x3a>
   16fb0:	4b5a      	ldr	r3, [pc, #360]	; (1711c <super_attr+0x198>)
   16fb2:	4a5b      	ldr	r2, [pc, #364]	; (17120 <super_attr+0x19c>)
   16fb4:	f240 41c1 	movw	r1, #1217	; 0x4c1
   16fb8:	485a      	ldr	r0, [pc, #360]	; (17124 <super_attr+0x1a0>)
   16fba:	f004 fa61 	bl	1b480 <__assert_func>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   16fbe:	68fb      	ldr	r3, [r7, #12]
   16fc0:	63bb      	str	r3, [r7, #56]	; 0x38

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   16fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16fc4:	685b      	ldr	r3, [r3, #4]
   16fc6:	4618      	mov	r0, r3
   16fc8:	f7fe ff06 	bl	15dd8 <MP_OBJ_IS_OBJ>
   16fcc:	4603      	mov	r3, r0
   16fce:	2b00      	cmp	r3, #0
   16fd0:	d005      	beq.n	16fde <super_attr+0x5a>
   16fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16fd4:	685b      	ldr	r3, [r3, #4]
   16fd6:	681b      	ldr	r3, [r3, #0]
   16fd8:	4a53      	ldr	r2, [pc, #332]	; (17128 <super_attr+0x1a4>)
   16fda:	4293      	cmp	r3, r2
   16fdc:	d006      	beq.n	16fec <super_attr+0x68>
   16fde:	4b53      	ldr	r3, [pc, #332]	; (1712c <super_attr+0x1a8>)
   16fe0:	4a4f      	ldr	r2, [pc, #316]	; (17120 <super_attr+0x19c>)
   16fe2:	f240 41c4 	movw	r1, #1220	; 0x4c4
   16fe6:	484f      	ldr	r0, [pc, #316]	; (17124 <super_attr+0x1a0>)
   16fe8:	f004 fa4a 	bl	1b480 <__assert_func>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);
   16fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16fee:	685b      	ldr	r3, [r3, #4]
   16ff0:	637b      	str	r3, [r7, #52]	; 0x34

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   16ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ff4:	689b      	ldr	r3, [r3, #8]
    struct class_lookup_data lookup = {
   16ff6:	617b      	str	r3, [r7, #20]
   16ff8:	68bb      	ldr	r3, [r7, #8]
   16ffa:	61bb      	str	r3, [r7, #24]
   16ffc:	2300      	movs	r3, #0
   16ffe:	61fb      	str	r3, [r7, #28]
   17000:	687b      	ldr	r3, [r7, #4]
   17002:	623b      	str	r3, [r7, #32]
   17004:	2300      	movs	r3, #0
   17006:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   1700a:	68bb      	ldr	r3, [r7, #8]
   1700c:	2b13      	cmp	r3, #19
   1700e:	d101      	bne.n	17014 <super_attr+0x90>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   17010:	230c      	movs	r3, #12
   17012:	61fb      	str	r3, [r7, #28]
    }

    if (type->parent == NULL) {
   17014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17018:	2b00      	cmp	r3, #0
   1701a:	d05c      	beq.n	170d6 <super_attr+0x152>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   1701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1701e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17020:	681b      	ldr	r3, [r3, #0]
   17022:	4a43      	ldr	r2, [pc, #268]	; (17130 <super_attr+0x1ac>)
   17024:	4293      	cmp	r3, r2
   17026:	d147      	bne.n	170b8 <super_attr+0x134>
        const mp_obj_tuple_t *parent_tuple = type->parent;
   17028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1702a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1702c:	633b      	str	r3, [r7, #48]	; 0x30
        size_t len = parent_tuple->len;
   1702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17030:	685b      	ldr	r3, [r3, #4]
   17032:	62fb      	str	r3, [r7, #44]	; 0x2c
        const mp_obj_t *items = parent_tuple->items;
   17034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17036:	3308      	adds	r3, #8
   17038:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < len; i++) {
   1703a:	2300      	movs	r3, #0
   1703c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1703e:	e036      	b.n	170ae <super_attr+0x12a>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   17040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17042:	009b      	lsls	r3, r3, #2
   17044:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17046:	4413      	add	r3, r2
   17048:	681b      	ldr	r3, [r3, #0]
   1704a:	4618      	mov	r0, r3
   1704c:	f7fe fec4 	bl	15dd8 <MP_OBJ_IS_OBJ>
   17050:	4603      	mov	r3, r0
   17052:	2b00      	cmp	r3, #0
   17054:	d008      	beq.n	17068 <super_attr+0xe4>
   17056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17058:	009b      	lsls	r3, r3, #2
   1705a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1705c:	4413      	add	r3, r2
   1705e:	681b      	ldr	r3, [r3, #0]
   17060:	681b      	ldr	r3, [r3, #0]
   17062:	4a31      	ldr	r2, [pc, #196]	; (17128 <super_attr+0x1a4>)
   17064:	4293      	cmp	r3, r2
   17066:	d006      	beq.n	17076 <super_attr+0xf2>
   17068:	4b32      	ldr	r3, [pc, #200]	; (17134 <super_attr+0x1b0>)
   1706a:	4a2d      	ldr	r2, [pc, #180]	; (17120 <super_attr+0x19c>)
   1706c:	f240 41dd 	movw	r1, #1245	; 0x4dd
   17070:	482c      	ldr	r0, [pc, #176]	; (17124 <super_attr+0x1a0>)
   17072:	f004 fa05 	bl	1b480 <__assert_func>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   17076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17078:	009b      	lsls	r3, r3, #2
   1707a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1707c:	4413      	add	r3, r2
   1707e:	681b      	ldr	r3, [r3, #0]
   17080:	4a2d      	ldr	r2, [pc, #180]	; (17138 <super_attr+0x1b4>)
   17082:	4293      	cmp	r3, r2
   17084:	d00f      	beq.n	170a6 <super_attr+0x122>
                // The "object" type will be searched at the end of this function,
                // and we don't want to lookup native methods in object.
                continue;
            }
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   17086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17088:	009b      	lsls	r3, r3, #2
   1708a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1708c:	4413      	add	r3, r2
   1708e:	681a      	ldr	r2, [r3, #0]
   17090:	f107 0314 	add.w	r3, r7, #20
   17094:	4611      	mov	r1, r2
   17096:	4618      	mov	r0, r3
   17098:	f7fe ff9a 	bl	15fd0 <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   1709c:	687b      	ldr	r3, [r7, #4]
   1709e:	681b      	ldr	r3, [r3, #0]
   170a0:	2b00      	cmp	r3, #0
   170a2:	d117      	bne.n	170d4 <super_attr+0x150>
   170a4:	e000      	b.n	170a8 <super_attr+0x124>
                continue;
   170a6:	bf00      	nop
        for (size_t i = 0; i < len; i++) {
   170a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   170aa:	3301      	adds	r3, #1
   170ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   170ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   170b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170b2:	429a      	cmp	r2, r3
   170b4:	d3c4      	bcc.n	17040 <super_attr+0xbc>
   170b6:	e00e      	b.n	170d6 <super_attr+0x152>
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   170b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   170bc:	4a1e      	ldr	r2, [pc, #120]	; (17138 <super_attr+0x1b4>)
   170be:	4293      	cmp	r3, r2
   170c0:	d009      	beq.n	170d6 <super_attr+0x152>
        mp_obj_class_lookup(&lookup, type->parent);
   170c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   170c6:	f107 0314 	add.w	r3, r7, #20
   170ca:	4611      	mov	r1, r2
   170cc:	4618      	mov	r0, r3
   170ce:	f7fe ff7f 	bl	15fd0 <mp_obj_class_lookup>
   170d2:	e000      	b.n	170d6 <super_attr+0x152>
                break;
   170d4:	bf00      	nop
    }

    if (dest[0] != MP_OBJ_NULL) {
   170d6:	687b      	ldr	r3, [r7, #4]
   170d8:	681b      	ldr	r3, [r3, #0]
   170da:	2b00      	cmp	r3, #0
   170dc:	d00c      	beq.n	170f8 <super_attr+0x174>
        if (dest[0] == MP_OBJ_SENTINEL) {
   170de:	687b      	ldr	r3, [r7, #4]
   170e0:	681b      	ldr	r3, [r3, #0]
   170e2:	2b08      	cmp	r3, #8
   170e4:	d113      	bne.n	1710e <super_attr+0x18a>
            // Looked up native __init__ so defer to it
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   170e6:	687b      	ldr	r3, [r7, #4]
   170e8:	4a14      	ldr	r2, [pc, #80]	; (1713c <super_attr+0x1b8>)
   170ea:	601a      	str	r2, [r3, #0]
            dest[1] = self->obj;
   170ec:	687b      	ldr	r3, [r7, #4]
   170ee:	3304      	adds	r3, #4
   170f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   170f2:	6892      	ldr	r2, [r2, #8]
   170f4:	601a      	str	r2, [r3, #0]
        }
        return;
   170f6:	e00a      	b.n	1710e <super_attr+0x18a>
    }

    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;
   170f8:	2300      	movs	r3, #0
   170fa:	61fb      	str	r3, [r7, #28]

    mp_obj_class_lookup(&lookup, &mp_type_object);
   170fc:	f107 0314 	add.w	r3, r7, #20
   17100:	490d      	ldr	r1, [pc, #52]	; (17138 <super_attr+0x1b4>)
   17102:	4618      	mov	r0, r3
   17104:	f7fe ff64 	bl	15fd0 <mp_obj_class_lookup>
   17108:	e002      	b.n	17110 <super_attr+0x18c>
        return;
   1710a:	bf00      	nop
   1710c:	e000      	b.n	17110 <super_attr+0x18c>
        return;
   1710e:	bf00      	nop
}
   17110:	3740      	adds	r7, #64	; 0x40
   17112:	46bd      	mov	sp, r7
   17114:	bd80      	pop	{r7, pc}
   17116:	bf00      	nop
   17118:	00023e38 	.word	0x00023e38
   1711c:	00023dbc 	.word	0x00023dbc
   17120:	00024024 	.word	0x00024024
   17124:	00023b08 	.word	0x00023b08
   17128:	00023d18 	.word	0x00023d18
   1712c:	00023de4 	.word	0x00023de4
   17130:	00023a20 	.word	0x00023a20
   17134:	00023e10 	.word	0x00023e10
   17138:	0002304c 	.word	0x0002304c
   1713c:	00023b1c 	.word	0x00023b1c

00017140 <mp_load_super_method>:
    .print = super_print,
    .make_new = super_make_new,
    .attr = super_attr,
};

void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   17140:	b580      	push	{r7, lr}
   17142:	b086      	sub	sp, #24
   17144:	af00      	add	r7, sp, #0
   17146:	6078      	str	r0, [r7, #4]
   17148:	6039      	str	r1, [r7, #0]
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   1714a:	4b09      	ldr	r3, [pc, #36]	; (17170 <mp_load_super_method+0x30>)
   1714c:	60fb      	str	r3, [r7, #12]
   1714e:	683b      	ldr	r3, [r7, #0]
   17150:	685b      	ldr	r3, [r3, #4]
   17152:	613b      	str	r3, [r7, #16]
   17154:	683b      	ldr	r3, [r7, #0]
   17156:	689b      	ldr	r3, [r3, #8]
   17158:	617b      	str	r3, [r7, #20]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   1715a:	f107 030c 	add.w	r3, r7, #12
   1715e:	683a      	ldr	r2, [r7, #0]
   17160:	6879      	ldr	r1, [r7, #4]
   17162:	4618      	mov	r0, r3
   17164:	f7f5 face 	bl	c704 <mp_load_method>
}
   17168:	bf00      	nop
   1716a:	3718      	adds	r7, #24
   1716c:	46bd      	mov	sp, r7
   1716e:	bd80      	pop	{r7, pc}
   17170:	00023e38 	.word	0x00023e38

00017174 <mp_obj_is_subclass_fast>:
/******************************************************************************/
// subclassing and built-ins specific to types

// object and classinfo should be type objects
// (but the function will fail gracefully if they are not)
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   17174:	b580      	push	{r7, lr}
   17176:	b086      	sub	sp, #24
   17178:	af00      	add	r7, sp, #0
   1717a:	6078      	str	r0, [r7, #4]
   1717c:	6039      	str	r1, [r7, #0]
    for (;;) {
        if (object == classinfo) {
   1717e:	687a      	ldr	r2, [r7, #4]
   17180:	683b      	ldr	r3, [r7, #0]
   17182:	429a      	cmp	r2, r3
   17184:	d101      	bne.n	1718a <mp_obj_is_subclass_fast+0x16>
            return true;
   17186:	2301      	movs	r3, #1
   17188:	e047      	b.n	1721a <mp_obj_is_subclass_fast+0xa6>
        }

        // not equivalent classes, keep searching base classes

        // object should always be a type object, but just return false if it's not
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   1718a:	6878      	ldr	r0, [r7, #4]
   1718c:	f7fe fe24 	bl	15dd8 <MP_OBJ_IS_OBJ>
   17190:	4603      	mov	r3, r0
   17192:	f083 0301 	eor.w	r3, r3, #1
   17196:	b2db      	uxtb	r3, r3
   17198:	2b00      	cmp	r3, #0
   1719a:	d104      	bne.n	171a6 <mp_obj_is_subclass_fast+0x32>
   1719c:	687b      	ldr	r3, [r7, #4]
   1719e:	681b      	ldr	r3, [r3, #0]
   171a0:	4a20      	ldr	r2, [pc, #128]	; (17224 <mp_obj_is_subclass_fast+0xb0>)
   171a2:	4293      	cmp	r3, r2
   171a4:	d001      	beq.n	171aa <mp_obj_is_subclass_fast+0x36>
            return false;
   171a6:	2300      	movs	r3, #0
   171a8:	e037      	b.n	1721a <mp_obj_is_subclass_fast+0xa6>
        }

        const mp_obj_type_t *self = MP_OBJ_TO_PTR(object);
   171aa:	687b      	ldr	r3, [r7, #4]
   171ac:	613b      	str	r3, [r7, #16]

        if (self->parent == NULL) {
   171ae:	693b      	ldr	r3, [r7, #16]
   171b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   171b2:	2b00      	cmp	r3, #0
   171b4:	d101      	bne.n	171ba <mp_obj_is_subclass_fast+0x46>
            // type has no parents
            return false;
   171b6:	2300      	movs	r3, #0
   171b8:	e02f      	b.n	1721a <mp_obj_is_subclass_fast+0xa6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   171ba:	693b      	ldr	r3, [r7, #16]
   171bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   171be:	681b      	ldr	r3, [r3, #0]
   171c0:	4a19      	ldr	r2, [pc, #100]	; (17228 <mp_obj_is_subclass_fast+0xb4>)
   171c2:	4293      	cmp	r3, r2
   171c4:	d125      	bne.n	17212 <mp_obj_is_subclass_fast+0x9e>
            // get the base objects (they should be type objects)
            const mp_obj_tuple_t *parent_tuple = self->parent;
   171c6:	693b      	ldr	r3, [r7, #16]
   171c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   171ca:	60fb      	str	r3, [r7, #12]
            const mp_obj_t *item = parent_tuple->items;
   171cc:	68fb      	ldr	r3, [r7, #12]
   171ce:	3308      	adds	r3, #8
   171d0:	617b      	str	r3, [r7, #20]
            const mp_obj_t *top = item + parent_tuple->len - 1;
   171d2:	68fb      	ldr	r3, [r7, #12]
   171d4:	685b      	ldr	r3, [r3, #4]
   171d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   171da:	3b01      	subs	r3, #1
   171dc:	009b      	lsls	r3, r3, #2
   171de:	697a      	ldr	r2, [r7, #20]
   171e0:	4413      	add	r3, r2
   171e2:	60bb      	str	r3, [r7, #8]

            // iterate through the base objects
            for (; item < top; ++item) {
   171e4:	e00d      	b.n	17202 <mp_obj_is_subclass_fast+0x8e>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   171e6:	697b      	ldr	r3, [r7, #20]
   171e8:	681b      	ldr	r3, [r3, #0]
   171ea:	6839      	ldr	r1, [r7, #0]
   171ec:	4618      	mov	r0, r3
   171ee:	f7ff ffc1 	bl	17174 <mp_obj_is_subclass_fast>
   171f2:	4603      	mov	r3, r0
   171f4:	2b00      	cmp	r3, #0
   171f6:	d001      	beq.n	171fc <mp_obj_is_subclass_fast+0x88>
                    return true;
   171f8:	2301      	movs	r3, #1
   171fa:	e00e      	b.n	1721a <mp_obj_is_subclass_fast+0xa6>
            for (; item < top; ++item) {
   171fc:	697b      	ldr	r3, [r7, #20]
   171fe:	3304      	adds	r3, #4
   17200:	617b      	str	r3, [r7, #20]
   17202:	697a      	ldr	r2, [r7, #20]
   17204:	68bb      	ldr	r3, [r7, #8]
   17206:	429a      	cmp	r2, r3
   17208:	d3ed      	bcc.n	171e6 <mp_obj_is_subclass_fast+0x72>
                }
            }

            // search last base (simple tail recursion elimination)
            object = *item;
   1720a:	697b      	ldr	r3, [r7, #20]
   1720c:	681b      	ldr	r3, [r3, #0]
   1720e:	607b      	str	r3, [r7, #4]
   17210:	e7b5      	b.n	1717e <mp_obj_is_subclass_fast+0xa>
        #endif
        } else {
            // type has 1 parent
            object = MP_OBJ_FROM_PTR(self->parent);
   17212:	693b      	ldr	r3, [r7, #16]
   17214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17216:	607b      	str	r3, [r7, #4]
    for (;;) {
   17218:	e7b1      	b.n	1717e <mp_obj_is_subclass_fast+0xa>
        }
    }
}
   1721a:	4618      	mov	r0, r3
   1721c:	3718      	adds	r7, #24
   1721e:	46bd      	mov	sp, r7
   17220:	bd80      	pop	{r7, pc}
   17222:	bf00      	nop
   17224:	00023d18 	.word	0x00023d18
   17228:	00023a20 	.word	0x00023a20

0001722c <mp_obj_is_subclass>:

STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   1722c:	b580      	push	{r7, lr}
   1722e:	b086      	sub	sp, #24
   17230:	af00      	add	r7, sp, #0
   17232:	6078      	str	r0, [r7, #4]
   17234:	6039      	str	r1, [r7, #0]
    size_t len;
    mp_obj_t *items;
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   17236:	683b      	ldr	r3, [r7, #0]
   17238:	4618      	mov	r0, r3
   1723a:	f7fe fdcd 	bl	15dd8 <MP_OBJ_IS_OBJ>
   1723e:	4603      	mov	r3, r0
   17240:	2b00      	cmp	r3, #0
   17242:	d009      	beq.n	17258 <mp_obj_is_subclass+0x2c>
   17244:	683b      	ldr	r3, [r7, #0]
   17246:	681b      	ldr	r3, [r3, #0]
   17248:	4a22      	ldr	r2, [pc, #136]	; (172d4 <mp_obj_is_subclass+0xa8>)
   1724a:	4293      	cmp	r3, r2
   1724c:	d104      	bne.n	17258 <mp_obj_is_subclass+0x2c>
        len = 1;
   1724e:	2301      	movs	r3, #1
   17250:	613b      	str	r3, [r7, #16]
        items = &classinfo;
   17252:	463b      	mov	r3, r7
   17254:	60fb      	str	r3, [r7, #12]
   17256:	e017      	b.n	17288 <mp_obj_is_subclass+0x5c>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   17258:	683b      	ldr	r3, [r7, #0]
   1725a:	4618      	mov	r0, r3
   1725c:	f7fe fdbc 	bl	15dd8 <MP_OBJ_IS_OBJ>
   17260:	4603      	mov	r3, r0
   17262:	2b00      	cmp	r3, #0
   17264:	d00d      	beq.n	17282 <mp_obj_is_subclass+0x56>
   17266:	683b      	ldr	r3, [r7, #0]
   17268:	681b      	ldr	r3, [r3, #0]
   1726a:	4a1b      	ldr	r2, [pc, #108]	; (172d8 <mp_obj_is_subclass+0xac>)
   1726c:	4293      	cmp	r3, r2
   1726e:	d108      	bne.n	17282 <mp_obj_is_subclass+0x56>
        mp_obj_tuple_get(classinfo, &len, &items);
   17270:	683b      	ldr	r3, [r7, #0]
   17272:	f107 020c 	add.w	r2, r7, #12
   17276:	f107 0110 	add.w	r1, r7, #16
   1727a:	4618      	mov	r0, r3
   1727c:	f7fe fd02 	bl	15c84 <mp_obj_tuple_get>
   17280:	e002      	b.n	17288 <mp_obj_is_subclass+0x5c>
    } else {
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   17282:	4816      	ldr	r0, [pc, #88]	; (172dc <mp_obj_is_subclass+0xb0>)
   17284:	f7f5 fdf0 	bl	ce68 <mp_raise_TypeError>
    }

    for (size_t i = 0; i < len; i++) {
   17288:	2300      	movs	r3, #0
   1728a:	617b      	str	r3, [r7, #20]
   1728c:	e018      	b.n	172c0 <mp_obj_is_subclass+0x94>
        // We explicitly check for 'object' here since no-one explicitly derives from it
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   1728e:	68fa      	ldr	r2, [r7, #12]
   17290:	697b      	ldr	r3, [r7, #20]
   17292:	009b      	lsls	r3, r3, #2
   17294:	4413      	add	r3, r2
   17296:	681b      	ldr	r3, [r3, #0]
   17298:	4a11      	ldr	r2, [pc, #68]	; (172e0 <mp_obj_is_subclass+0xb4>)
   1729a:	4293      	cmp	r3, r2
   1729c:	d00b      	beq.n	172b6 <mp_obj_is_subclass+0x8a>
   1729e:	68fa      	ldr	r2, [r7, #12]
   172a0:	697b      	ldr	r3, [r7, #20]
   172a2:	009b      	lsls	r3, r3, #2
   172a4:	4413      	add	r3, r2
   172a6:	681b      	ldr	r3, [r3, #0]
   172a8:	4619      	mov	r1, r3
   172aa:	6878      	ldr	r0, [r7, #4]
   172ac:	f7ff ff62 	bl	17174 <mp_obj_is_subclass_fast>
   172b0:	4603      	mov	r3, r0
   172b2:	2b00      	cmp	r3, #0
   172b4:	d001      	beq.n	172ba <mp_obj_is_subclass+0x8e>
            return mp_const_true;
   172b6:	4b0b      	ldr	r3, [pc, #44]	; (172e4 <mp_obj_is_subclass+0xb8>)
   172b8:	e007      	b.n	172ca <mp_obj_is_subclass+0x9e>
    for (size_t i = 0; i < len; i++) {
   172ba:	697b      	ldr	r3, [r7, #20]
   172bc:	3301      	adds	r3, #1
   172be:	617b      	str	r3, [r7, #20]
   172c0:	693b      	ldr	r3, [r7, #16]
   172c2:	697a      	ldr	r2, [r7, #20]
   172c4:	429a      	cmp	r2, r3
   172c6:	d3e2      	bcc.n	1728e <mp_obj_is_subclass+0x62>
        }
    }
    return mp_const_false;
   172c8:	4b07      	ldr	r3, [pc, #28]	; (172e8 <mp_obj_is_subclass+0xbc>)
}
   172ca:	4618      	mov	r0, r3
   172cc:	3718      	adds	r7, #24
   172ce:	46bd      	mov	sp, r7
   172d0:	bd80      	pop	{r7, pc}
   172d2:	bf00      	nop
   172d4:	00023d18 	.word	0x00023d18
   172d8:	00023a20 	.word	0x00023a20
   172dc:	00023e74 	.word	0x00023e74
   172e0:	0002304c 	.word	0x0002304c
   172e4:	0002189c 	.word	0x0002189c
   172e8:	00021894 	.word	0x00021894

000172ec <mp_builtin_issubclass>:

STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   172ec:	b580      	push	{r7, lr}
   172ee:	b082      	sub	sp, #8
   172f0:	af00      	add	r7, sp, #0
   172f2:	6078      	str	r0, [r7, #4]
   172f4:	6039      	str	r1, [r7, #0]
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   172f6:	6878      	ldr	r0, [r7, #4]
   172f8:	f7fe fd6e 	bl	15dd8 <MP_OBJ_IS_OBJ>
   172fc:	4603      	mov	r3, r0
   172fe:	f083 0301 	eor.w	r3, r3, #1
   17302:	b2db      	uxtb	r3, r3
   17304:	2b00      	cmp	r3, #0
   17306:	d104      	bne.n	17312 <mp_builtin_issubclass+0x26>
   17308:	687b      	ldr	r3, [r7, #4]
   1730a:	681b      	ldr	r3, [r3, #0]
   1730c:	4a07      	ldr	r2, [pc, #28]	; (1732c <mp_builtin_issubclass+0x40>)
   1730e:	4293      	cmp	r3, r2
   17310:	d002      	beq.n	17318 <mp_builtin_issubclass+0x2c>
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   17312:	4807      	ldr	r0, [pc, #28]	; (17330 <mp_builtin_issubclass+0x44>)
   17314:	f7f5 fda8 	bl	ce68 <mp_raise_TypeError>
    }
    return mp_obj_is_subclass(object, classinfo);
   17318:	6839      	ldr	r1, [r7, #0]
   1731a:	6878      	ldr	r0, [r7, #4]
   1731c:	f7ff ff86 	bl	1722c <mp_obj_is_subclass>
   17320:	4603      	mov	r3, r0
}
   17322:	4618      	mov	r0, r3
   17324:	3708      	adds	r7, #8
   17326:	46bd      	mov	sp, r7
   17328:	bd80      	pop	{r7, pc}
   1732a:	bf00      	nop
   1732c:	00023d18 	.word	0x00023d18
   17330:	00023eb0 	.word	0x00023eb0

00017334 <mp_builtin_isinstance>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_issubclass_obj, mp_builtin_issubclass);

STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   17334:	b580      	push	{r7, lr}
   17336:	b082      	sub	sp, #8
   17338:	af00      	add	r7, sp, #0
   1733a:	6078      	str	r0, [r7, #4]
   1733c:	6039      	str	r1, [r7, #0]
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   1733e:	6878      	ldr	r0, [r7, #4]
   17340:	f7f6 f9b6 	bl	d6b0 <mp_obj_get_type>
   17344:	4603      	mov	r3, r0
   17346:	6839      	ldr	r1, [r7, #0]
   17348:	4618      	mov	r0, r3
   1734a:	f7ff ff6f 	bl	1722c <mp_obj_is_subclass>
   1734e:	4603      	mov	r3, r0
}
   17350:	4618      	mov	r0, r3
   17352:	3708      	adds	r7, #8
   17354:	46bd      	mov	sp, r7
   17356:	bd80      	pop	{r7, pc}

00017358 <mp_instance_cast_to_native_base>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_isinstance_obj, mp_builtin_isinstance);

mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   17358:	b580      	push	{r7, lr}
   1735a:	b084      	sub	sp, #16
   1735c:	af00      	add	r7, sp, #0
   1735e:	6078      	str	r0, [r7, #4]
   17360:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   17362:	6878      	ldr	r0, [r7, #4]
   17364:	f7f6 f9a4 	bl	d6b0 <mp_obj_get_type>
   17368:	60f8      	str	r0, [r7, #12]
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   1736a:	6839      	ldr	r1, [r7, #0]
   1736c:	68f8      	ldr	r0, [r7, #12]
   1736e:	f7ff ff01 	bl	17174 <mp_obj_is_subclass_fast>
   17372:	4603      	mov	r3, r0
   17374:	f083 0301 	eor.w	r3, r3, #1
   17378:	b2db      	uxtb	r3, r3
   1737a:	2b00      	cmp	r3, #0
   1737c:	d001      	beq.n	17382 <mp_instance_cast_to_native_base+0x2a>
        return MP_OBJ_NULL;
   1737e:	2300      	movs	r3, #0
   17380:	e003      	b.n	1738a <mp_instance_cast_to_native_base+0x32>
    }
    mp_obj_instance_t *self = (mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in);
   17382:	687b      	ldr	r3, [r7, #4]
   17384:	60bb      	str	r3, [r7, #8]
    return self->subobj[0];
   17386:	68bb      	ldr	r3, [r7, #8]
   17388:	691b      	ldr	r3, [r3, #16]
}
   1738a:	4618      	mov	r0, r3
   1738c:	3710      	adds	r7, #16
   1738e:	46bd      	mov	sp, r7
   17390:	bd80      	pop	{r7, pc}

00017392 <static_class_method_make_new>:

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17392:	b580      	push	{r7, lr}
   17394:	b088      	sub	sp, #32
   17396:	af02      	add	r7, sp, #8
   17398:	60f8      	str	r0, [r7, #12]
   1739a:	60b9      	str	r1, [r7, #8]
   1739c:	607a      	str	r2, [r7, #4]
   1739e:	603b      	str	r3, [r7, #0]
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   173a0:	68fb      	ldr	r3, [r7, #12]
   173a2:	4a13      	ldr	r2, [pc, #76]	; (173f0 <static_class_method_make_new+0x5e>)
   173a4:	4293      	cmp	r3, r2
   173a6:	d00a      	beq.n	173be <static_class_method_make_new+0x2c>
   173a8:	68fb      	ldr	r3, [r7, #12]
   173aa:	4a12      	ldr	r2, [pc, #72]	; (173f4 <static_class_method_make_new+0x62>)
   173ac:	4293      	cmp	r3, r2
   173ae:	d006      	beq.n	173be <static_class_method_make_new+0x2c>
   173b0:	4b11      	ldr	r3, [pc, #68]	; (173f8 <static_class_method_make_new+0x66>)
   173b2:	4a12      	ldr	r2, [pc, #72]	; (173fc <static_class_method_make_new+0x6a>)
   173b4:	f240 516a 	movw	r1, #1386	; 0x56a
   173b8:	4811      	ldr	r0, [pc, #68]	; (17400 <static_class_method_make_new+0x6e>)
   173ba:	f004 f861 	bl	1b480 <__assert_func>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   173be:	2300      	movs	r3, #0
   173c0:	9300      	str	r3, [sp, #0]
   173c2:	2301      	movs	r3, #1
   173c4:	2201      	movs	r2, #1
   173c6:	6879      	ldr	r1, [r7, #4]
   173c8:	68b8      	ldr	r0, [r7, #8]
   173ca:	f7fe fd17 	bl	15dfc <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   173ce:	2008      	movs	r0, #8
   173d0:	f7e8 ffa4 	bl	31c <m_malloc>
   173d4:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   173d6:	683b      	ldr	r3, [r7, #0]
   173d8:	681a      	ldr	r2, [r3, #0]
   173da:	697b      	ldr	r3, [r7, #20]
   173dc:	68f9      	ldr	r1, [r7, #12]
   173de:	6019      	str	r1, [r3, #0]
   173e0:	697b      	ldr	r3, [r7, #20]
   173e2:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   173e4:	697b      	ldr	r3, [r7, #20]
}
   173e6:	4618      	mov	r0, r3
   173e8:	3718      	adds	r7, #24
   173ea:	46bd      	mov	sp, r7
   173ec:	bd80      	pop	{r7, pc}
   173ee:	bf00      	nop
   173f0:	00023f24 	.word	0x00023f24
   173f4:	00023f60 	.word	0x00023f60
   173f8:	00023ee4 	.word	0x00023ee4
   173fc:	00024030 	.word	0x00024030
   17400:	00023b08 	.word	0x00023b08

00017404 <MP_OBJ_IS_OBJ>:
   17404:	b480      	push	{r7}
   17406:	b083      	sub	sp, #12
   17408:	af00      	add	r7, sp, #0
   1740a:	6078      	str	r0, [r7, #4]
   1740c:	687b      	ldr	r3, [r7, #4]
   1740e:	f003 0303 	and.w	r3, r3, #3
   17412:	2b00      	cmp	r3, #0
   17414:	bf0c      	ite	eq
   17416:	2301      	moveq	r3, #1
   17418:	2300      	movne	r3, #0
   1741a:	b2db      	uxtb	r3, r3
   1741c:	4618      	mov	r0, r3
   1741e:	370c      	adds	r7, #12
   17420:	46bd      	mov	sp, r7
   17422:	f85d 7b04 	ldr.w	r7, [sp], #4
   17426:	4770      	bx	lr

00017428 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   17428:	b580      	push	{r7, lr}
   1742a:	b084      	sub	sp, #16
   1742c:	af00      	add	r7, sp, #0
   1742e:	60f8      	str	r0, [r7, #12]
   17430:	60b9      	str	r1, [r7, #8]
   17432:	607a      	str	r2, [r7, #4]
   17434:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   17436:	687b      	ldr	r3, [r7, #4]
   17438:	045a      	lsls	r2, r3, #17
   1743a:	683b      	ldr	r3, [r7, #0]
   1743c:	005b      	lsls	r3, r3, #1
   1743e:	431a      	orrs	r2, r3
   17440:	7e3b      	ldrb	r3, [r7, #24]
   17442:	2b00      	cmp	r3, #0
   17444:	d001      	beq.n	1744a <mp_arg_check_num+0x22>
   17446:	2301      	movs	r3, #1
   17448:	e000      	b.n	1744c <mp_arg_check_num+0x24>
   1744a:	2300      	movs	r3, #0
   1744c:	4313      	orrs	r3, r2
   1744e:	461a      	mov	r2, r3
   17450:	68b9      	ldr	r1, [r7, #8]
   17452:	68f8      	ldr	r0, [r7, #12]
   17454:	f7f5 fd2e 	bl	ceb4 <mp_arg_check_num_sig>
}
   17458:	bf00      	nop
   1745a:	3710      	adds	r7, #16
   1745c:	46bd      	mov	sp, r7
   1745e:	bd80      	pop	{r7, pc}

00017460 <zip_make_new>:
    mp_obj_base_t base;
    size_t n_iters;
    mp_obj_t iters[];
} mp_obj_zip_t;

STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17460:	b580      	push	{r7, lr}
   17462:	b088      	sub	sp, #32
   17464:	af02      	add	r7, sp, #8
   17466:	60f8      	str	r0, [r7, #12]
   17468:	60b9      	str	r1, [r7, #8]
   1746a:	607a      	str	r2, [r7, #4]
   1746c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   1746e:	2300      	movs	r3, #0
   17470:	9300      	str	r3, [sp, #0]
   17472:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17476:	2200      	movs	r2, #0
   17478:	6879      	ldr	r1, [r7, #4]
   1747a:	68b8      	ldr	r0, [r7, #8]
   1747c:	f7ff ffd4 	bl	17428 <mp_arg_check_num>

    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   17480:	68bb      	ldr	r3, [r7, #8]
   17482:	3302      	adds	r3, #2
   17484:	009b      	lsls	r3, r3, #2
   17486:	4618      	mov	r0, r3
   17488:	f7e8 ff48 	bl	31c <m_malloc>
   1748c:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   1748e:	693b      	ldr	r3, [r7, #16]
   17490:	68fa      	ldr	r2, [r7, #12]
   17492:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args;
   17494:	693b      	ldr	r3, [r7, #16]
   17496:	68ba      	ldr	r2, [r7, #8]
   17498:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1749a:	2300      	movs	r3, #0
   1749c:	617b      	str	r3, [r7, #20]
   1749e:	e011      	b.n	174c4 <zip_make_new+0x64>
        o->iters[i] = mp_getiter(args[i], NULL);
   174a0:	697b      	ldr	r3, [r7, #20]
   174a2:	009b      	lsls	r3, r3, #2
   174a4:	683a      	ldr	r2, [r7, #0]
   174a6:	4413      	add	r3, r2
   174a8:	681b      	ldr	r3, [r3, #0]
   174aa:	2100      	movs	r1, #0
   174ac:	4618      	mov	r0, r3
   174ae:	f7f5 f9a1 	bl	c7f4 <mp_getiter>
   174b2:	4601      	mov	r1, r0
   174b4:	693b      	ldr	r3, [r7, #16]
   174b6:	697a      	ldr	r2, [r7, #20]
   174b8:	3202      	adds	r2, #2
   174ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   174be:	697b      	ldr	r3, [r7, #20]
   174c0:	3301      	adds	r3, #1
   174c2:	617b      	str	r3, [r7, #20]
   174c4:	697a      	ldr	r2, [r7, #20]
   174c6:	68bb      	ldr	r3, [r7, #8]
   174c8:	429a      	cmp	r2, r3
   174ca:	d3e9      	bcc.n	174a0 <zip_make_new+0x40>
    }
    return MP_OBJ_FROM_PTR(o);
   174cc:	693b      	ldr	r3, [r7, #16]
}
   174ce:	4618      	mov	r0, r3
   174d0:	3718      	adds	r7, #24
   174d2:	46bd      	mov	sp, r7
   174d4:	bd80      	pop	{r7, pc}

000174d6 <zip_iternext>:

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   174d6:	b580      	push	{r7, lr}
   174d8:	b086      	sub	sp, #24
   174da:	af00      	add	r7, sp, #0
   174dc:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   174de:	6878      	ldr	r0, [r7, #4]
   174e0:	f7ff ff90 	bl	17404 <MP_OBJ_IS_OBJ>
   174e4:	4603      	mov	r3, r0
   174e6:	2b00      	cmp	r3, #0
   174e8:	d004      	beq.n	174f4 <zip_iternext+0x1e>
   174ea:	687b      	ldr	r3, [r7, #4]
   174ec:	681b      	ldr	r3, [r3, #0]
   174ee:	4a1f      	ldr	r2, [pc, #124]	; (1756c <zip_iternext+0x96>)
   174f0:	4293      	cmp	r3, r2
   174f2:	d005      	beq.n	17500 <zip_iternext+0x2a>
   174f4:	4b1e      	ldr	r3, [pc, #120]	; (17570 <zip_iternext+0x9a>)
   174f6:	4a1f      	ldr	r2, [pc, #124]	; (17574 <zip_iternext+0x9e>)
   174f8:	2134      	movs	r1, #52	; 0x34
   174fa:	481f      	ldr	r0, [pc, #124]	; (17578 <zip_iternext+0xa2>)
   174fc:	f003 ffc0 	bl	1b480 <__assert_func>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
   17500:	687b      	ldr	r3, [r7, #4]
   17502:	613b      	str	r3, [r7, #16]
    if (self->n_iters == 0) {
   17504:	693b      	ldr	r3, [r7, #16]
   17506:	685b      	ldr	r3, [r3, #4]
   17508:	2b00      	cmp	r3, #0
   1750a:	d101      	bne.n	17510 <zip_iternext+0x3a>
        return MP_OBJ_STOP_ITERATION;
   1750c:	2304      	movs	r3, #4
   1750e:	e029      	b.n	17564 <zip_iternext+0x8e>
    }
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   17510:	693b      	ldr	r3, [r7, #16]
   17512:	685b      	ldr	r3, [r3, #4]
   17514:	2100      	movs	r1, #0
   17516:	4618      	mov	r0, r3
   17518:	f7fe fb7c 	bl	15c14 <mp_obj_new_tuple>
   1751c:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   1751e:	2300      	movs	r3, #0
   17520:	617b      	str	r3, [r7, #20]
   17522:	e019      	b.n	17558 <zip_iternext+0x82>
        mp_obj_t next = mp_iternext(self->iters[i]);
   17524:	693b      	ldr	r3, [r7, #16]
   17526:	697a      	ldr	r2, [r7, #20]
   17528:	3202      	adds	r2, #2
   1752a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1752e:	4618      	mov	r0, r3
   17530:	f7f5 f9e2 	bl	c8f8 <mp_iternext>
   17534:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   17536:	68bb      	ldr	r3, [r7, #8]
   17538:	2b04      	cmp	r3, #4
   1753a:	d104      	bne.n	17546 <zip_iternext+0x70>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   1753c:	68f8      	ldr	r0, [r7, #12]
   1753e:	f7fe fbcf 	bl	15ce0 <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   17542:	2304      	movs	r3, #4
   17544:	e00e      	b.n	17564 <zip_iternext+0x8e>
        }
        tuple->items[i] = next;
   17546:	68fb      	ldr	r3, [r7, #12]
   17548:	697a      	ldr	r2, [r7, #20]
   1754a:	3202      	adds	r2, #2
   1754c:	68b9      	ldr	r1, [r7, #8]
   1754e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   17552:	697b      	ldr	r3, [r7, #20]
   17554:	3301      	adds	r3, #1
   17556:	617b      	str	r3, [r7, #20]
   17558:	693b      	ldr	r3, [r7, #16]
   1755a:	685a      	ldr	r2, [r3, #4]
   1755c:	697b      	ldr	r3, [r7, #20]
   1755e:	429a      	cmp	r2, r3
   17560:	d8e0      	bhi.n	17524 <zip_iternext+0x4e>
    }
    return MP_OBJ_FROM_PTR(tuple);
   17562:	68fb      	ldr	r3, [r7, #12]
}
   17564:	4618      	mov	r0, r3
   17566:	3718      	adds	r7, #24
   17568:	46bd      	mov	sp, r7
   1756a:	bd80      	pop	{r7, pc}
   1756c:	000240c0 	.word	0x000240c0
   17570:	00024050 	.word	0x00024050
   17574:	000240fc 	.word	0x000240fc
   17578:	000240ac 	.word	0x000240ac

0001757c <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   1757c:	b580      	push	{r7, lr}
   1757e:	b084      	sub	sp, #16
   17580:	af00      	add	r7, sp, #0
   17582:	6078      	str	r0, [r7, #4]
   17584:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17586:	6878      	ldr	r0, [r7, #4]
   17588:	f7f6 f892 	bl	d6b0 <mp_obj_get_type>
   1758c:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   1758e:	68fb      	ldr	r3, [r7, #12]
   17590:	6a1b      	ldr	r3, [r3, #32]
   17592:	2208      	movs	r2, #8
   17594:	6839      	ldr	r1, [r7, #0]
   17596:	6878      	ldr	r0, [r7, #4]
   17598:	4798      	blx	r3
   1759a:	4603      	mov	r3, r0
}
   1759c:	4618      	mov	r0, r3
   1759e:	3710      	adds	r7, #16
   175a0:	46bd      	mov	sp, r7
   175a2:	bd80      	pop	{r7, pc}

000175a4 <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   175a4:	b580      	push	{r7, lr}
   175a6:	b086      	sub	sp, #24
   175a8:	af00      	add	r7, sp, #0
   175aa:	60f8      	str	r0, [r7, #12]
   175ac:	60b9      	str	r1, [r7, #8]
   175ae:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   175b0:	68f8      	ldr	r0, [r7, #12]
   175b2:	f7f6 f87d 	bl	d6b0 <mp_obj_get_type>
   175b6:	6178      	str	r0, [r7, #20]
    return type->subscr(self_in, key_in, value_in);
   175b8:	697b      	ldr	r3, [r7, #20]
   175ba:	6a1b      	ldr	r3, [r3, #32]
   175bc:	687a      	ldr	r2, [r7, #4]
   175be:	68b9      	ldr	r1, [r7, #8]
   175c0:	68f8      	ldr	r0, [r7, #12]
   175c2:	4798      	blx	r3
   175c4:	4603      	mov	r3, r0
}
   175c6:	4618      	mov	r0, r3
   175c8:	3718      	adds	r7, #24
   175ca:	46bd      	mov	sp, r7
   175cc:	bd80      	pop	{r7, pc}

000175ce <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   175ce:	b580      	push	{r7, lr}
   175d0:	b084      	sub	sp, #16
   175d2:	af00      	add	r7, sp, #0
   175d4:	6078      	str	r0, [r7, #4]
   175d6:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   175d8:	6878      	ldr	r0, [r7, #4]
   175da:	f7f6 f869 	bl	d6b0 <mp_obj_get_type>
   175de:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   175e0:	68fb      	ldr	r3, [r7, #12]
   175e2:	6a1b      	ldr	r3, [r3, #32]
   175e4:	2200      	movs	r2, #0
   175e6:	6839      	ldr	r1, [r7, #0]
   175e8:	6878      	ldr	r0, [r7, #4]
   175ea:	4798      	blx	r3
   175ec:	4603      	mov	r3, r0
}
   175ee:	4618      	mov	r0, r3
   175f0:	3710      	adds	r7, #16
   175f2:	46bd      	mov	sp, r7
   175f4:	bd80      	pop	{r7, pc}

000175f6 <op_contains>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_delitem_obj, op_delitem);

STATIC mp_obj_t op_contains(mp_obj_t lhs_in, mp_obj_t rhs_in) {
   175f6:	b580      	push	{r7, lr}
   175f8:	b084      	sub	sp, #16
   175fa:	af00      	add	r7, sp, #0
   175fc:	6078      	str	r0, [r7, #4]
   175fe:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(lhs_in);
   17600:	6878      	ldr	r0, [r7, #4]
   17602:	f7f6 f855 	bl	d6b0 <mp_obj_get_type>
   17606:	60f8      	str	r0, [r7, #12]
    return type->binary_op(MP_BINARY_OP_CONTAINS, lhs_in, rhs_in);
   17608:	68fb      	ldr	r3, [r7, #12]
   1760a:	699b      	ldr	r3, [r3, #24]
   1760c:	683a      	ldr	r2, [r7, #0]
   1760e:	6879      	ldr	r1, [r7, #4]
   17610:	2022      	movs	r0, #34	; 0x22
   17612:	4798      	blx	r3
   17614:	4603      	mov	r3, r0
}
   17616:	4618      	mov	r0, r3
   17618:	3710      	adds	r7, #16
   1761a:	46bd      	mov	sp, r7
   1761c:	bd80      	pop	{r7, pc}
	...

00017620 <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   17620:	b580      	push	{r7, lr}
   17622:	b086      	sub	sp, #24
   17624:	af00      	add	r7, sp, #0
   17626:	60f8      	str	r0, [r7, #12]
   17628:	60b9      	str	r1, [r7, #8]
   1762a:	607a      	str	r2, [r7, #4]
   1762c:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < times; i++) {
   1762e:	2300      	movs	r3, #0
   17630:	617b      	str	r3, [r7, #20]
   17632:	e010      	b.n	17656 <mp_seq_multiply+0x36>
        size_t copy_sz = item_sz * len;
   17634:	68bb      	ldr	r3, [r7, #8]
   17636:	687a      	ldr	r2, [r7, #4]
   17638:	fb02 f303 	mul.w	r3, r2, r3
   1763c:	613b      	str	r3, [r7, #16]
        memcpy(dest, items, copy_sz);
   1763e:	693a      	ldr	r2, [r7, #16]
   17640:	68f9      	ldr	r1, [r7, #12]
   17642:	6a38      	ldr	r0, [r7, #32]
   17644:	f005 fa48 	bl	1cad8 <memcpy>
        dest = (char*)dest + copy_sz;
   17648:	6a3a      	ldr	r2, [r7, #32]
   1764a:	693b      	ldr	r3, [r7, #16]
   1764c:	4413      	add	r3, r2
   1764e:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < times; i++) {
   17650:	697b      	ldr	r3, [r7, #20]
   17652:	3301      	adds	r3, #1
   17654:	617b      	str	r3, [r7, #20]
   17656:	697a      	ldr	r2, [r7, #20]
   17658:	683b      	ldr	r3, [r7, #0]
   1765a:	429a      	cmp	r2, r3
   1765c:	d3ea      	bcc.n	17634 <mp_seq_multiply+0x14>
    }
}
   1765e:	bf00      	nop
   17660:	3718      	adds	r7, #24
   17662:	46bd      	mov	sp, r7
   17664:	bd80      	pop	{r7, pc}

00017666 <mp_seq_extract_slice>:
    return indexes->step == 1;
}

#endif

mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes) {
   17666:	b580      	push	{r7, lr}
   17668:	b088      	sub	sp, #32
   1766a:	af00      	add	r7, sp, #0
   1766c:	60f8      	str	r0, [r7, #12]
   1766e:	60b9      	str	r1, [r7, #8]
   17670:	607a      	str	r2, [r7, #4]
    (void)len; // TODO can we remove len from the arg list?

    mp_int_t start = indexes->start, stop = indexes->stop;
   17672:	687b      	ldr	r3, [r7, #4]
   17674:	681b      	ldr	r3, [r3, #0]
   17676:	61fb      	str	r3, [r7, #28]
   17678:	687b      	ldr	r3, [r7, #4]
   1767a:	685b      	ldr	r3, [r3, #4]
   1767c:	61bb      	str	r3, [r7, #24]
    mp_int_t step = indexes->step;
   1767e:	687b      	ldr	r3, [r7, #4]
   17680:	689b      	ldr	r3, [r3, #8]
   17682:	617b      	str	r3, [r7, #20]

    mp_obj_t res = mp_obj_new_list(0, NULL);
   17684:	2100      	movs	r1, #0
   17686:	2000      	movs	r0, #0
   17688:	f7fa f80b 	bl	116a2 <mp_obj_new_list>
   1768c:	6138      	str	r0, [r7, #16]

    if (step < 0) {
   1768e:	697b      	ldr	r3, [r7, #20]
   17690:	2b00      	cmp	r3, #0
   17692:	da1f      	bge.n	176d4 <mp_seq_extract_slice+0x6e>
        while (start >= stop) {
   17694:	e00c      	b.n	176b0 <mp_seq_extract_slice+0x4a>
            mp_obj_list_append(res, seq[start]);
   17696:	69fb      	ldr	r3, [r7, #28]
   17698:	009b      	lsls	r3, r3, #2
   1769a:	68ba      	ldr	r2, [r7, #8]
   1769c:	4413      	add	r3, r2
   1769e:	681b      	ldr	r3, [r3, #0]
   176a0:	4619      	mov	r1, r3
   176a2:	6938      	ldr	r0, [r7, #16]
   176a4:	f7f9 fb91 	bl	10dca <mp_obj_list_append>
            start += step;
   176a8:	69fa      	ldr	r2, [r7, #28]
   176aa:	697b      	ldr	r3, [r7, #20]
   176ac:	4413      	add	r3, r2
   176ae:	61fb      	str	r3, [r7, #28]
        while (start >= stop) {
   176b0:	69fa      	ldr	r2, [r7, #28]
   176b2:	69bb      	ldr	r3, [r7, #24]
   176b4:	429a      	cmp	r2, r3
   176b6:	daee      	bge.n	17696 <mp_seq_extract_slice+0x30>
   176b8:	e010      	b.n	176dc <mp_seq_extract_slice+0x76>
        }
    } else {
        while (start < stop) {
            mp_obj_list_append(res, seq[start]);
   176ba:	69fb      	ldr	r3, [r7, #28]
   176bc:	009b      	lsls	r3, r3, #2
   176be:	68ba      	ldr	r2, [r7, #8]
   176c0:	4413      	add	r3, r2
   176c2:	681b      	ldr	r3, [r3, #0]
   176c4:	4619      	mov	r1, r3
   176c6:	6938      	ldr	r0, [r7, #16]
   176c8:	f7f9 fb7f 	bl	10dca <mp_obj_list_append>
            start += step;
   176cc:	69fa      	ldr	r2, [r7, #28]
   176ce:	697b      	ldr	r3, [r7, #20]
   176d0:	4413      	add	r3, r2
   176d2:	61fb      	str	r3, [r7, #28]
        while (start < stop) {
   176d4:	69fa      	ldr	r2, [r7, #28]
   176d6:	69bb      	ldr	r3, [r7, #24]
   176d8:	429a      	cmp	r2, r3
   176da:	dbee      	blt.n	176ba <mp_seq_extract_slice+0x54>
        }
    }
    return res;
   176dc:	693b      	ldr	r3, [r7, #16]
}
   176de:	4618      	mov	r0, r3
   176e0:	3720      	adds	r7, #32
   176e2:	46bd      	mov	sp, r7
   176e4:	bd80      	pop	{r7, pc}

000176e6 <mp_seq_cmp_bytes>:

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   176e6:	b580      	push	{r7, lr}
   176e8:	b088      	sub	sp, #32
   176ea:	af00      	add	r7, sp, #0
   176ec:	60f8      	str	r0, [r7, #12]
   176ee:	60b9      	str	r1, [r7, #8]
   176f0:	607a      	str	r2, [r7, #4]
   176f2:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   176f4:	68fb      	ldr	r3, [r7, #12]
   176f6:	2b02      	cmp	r3, #2
   176f8:	d105      	bne.n	17706 <mp_seq_cmp_bytes+0x20>
   176fa:	687a      	ldr	r2, [r7, #4]
   176fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   176fe:	429a      	cmp	r2, r3
   17700:	d001      	beq.n	17706 <mp_seq_cmp_bytes+0x20>
        return false;
   17702:	2300      	movs	r3, #0
   17704:	e049      	b.n	1779a <mp_seq_cmp_bytes+0xb4>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17706:	68fb      	ldr	r3, [r7, #12]
   17708:	2b00      	cmp	r3, #0
   1770a:	d002      	beq.n	17712 <mp_seq_cmp_bytes+0x2c>
   1770c:	68fb      	ldr	r3, [r7, #12]
   1770e:	2b03      	cmp	r3, #3
   17710:	d113      	bne.n	1773a <mp_seq_cmp_bytes+0x54>
        SWAP(const byte*, data1, data2);
   17712:	683b      	ldr	r3, [r7, #0]
   17714:	61fb      	str	r3, [r7, #28]
   17716:	68bb      	ldr	r3, [r7, #8]
   17718:	603b      	str	r3, [r7, #0]
   1771a:	69fb      	ldr	r3, [r7, #28]
   1771c:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   1771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17720:	61bb      	str	r3, [r7, #24]
   17722:	687b      	ldr	r3, [r7, #4]
   17724:	62bb      	str	r3, [r7, #40]	; 0x28
   17726:	69bb      	ldr	r3, [r7, #24]
   17728:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   1772a:	68fb      	ldr	r3, [r7, #12]
   1772c:	2b00      	cmp	r3, #0
   1772e:	d102      	bne.n	17736 <mp_seq_cmp_bytes+0x50>
            op = MP_BINARY_OP_MORE;
   17730:	2301      	movs	r3, #1
   17732:	60fb      	str	r3, [r7, #12]
   17734:	e001      	b.n	1773a <mp_seq_cmp_bytes+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17736:	2304      	movs	r3, #4
   17738:	60fb      	str	r3, [r7, #12]
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
   1773a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1773c:	687b      	ldr	r3, [r7, #4]
   1773e:	4293      	cmp	r3, r2
   17740:	bf28      	it	cs
   17742:	4613      	movcs	r3, r2
   17744:	617b      	str	r3, [r7, #20]
    int res = memcmp(data1, data2, min_len);
   17746:	697a      	ldr	r2, [r7, #20]
   17748:	6839      	ldr	r1, [r7, #0]
   1774a:	68b8      	ldr	r0, [r7, #8]
   1774c:	f005 faa9 	bl	1cca2 <memcmp>
   17750:	6138      	str	r0, [r7, #16]
    if (op == MP_BINARY_OP_EQUAL) {
   17752:	68fb      	ldr	r3, [r7, #12]
   17754:	2b02      	cmp	r3, #2
   17756:	d106      	bne.n	17766 <mp_seq_cmp_bytes+0x80>
        // If we are checking for equality, here're the answer
        return res == 0;
   17758:	693b      	ldr	r3, [r7, #16]
   1775a:	2b00      	cmp	r3, #0
   1775c:	bf0c      	ite	eq
   1775e:	2301      	moveq	r3, #1
   17760:	2300      	movne	r3, #0
   17762:	b2db      	uxtb	r3, r3
   17764:	e019      	b.n	1779a <mp_seq_cmp_bytes+0xb4>
    }
    if (res < 0) {
   17766:	693b      	ldr	r3, [r7, #16]
   17768:	2b00      	cmp	r3, #0
   1776a:	da01      	bge.n	17770 <mp_seq_cmp_bytes+0x8a>
        return false;
   1776c:	2300      	movs	r3, #0
   1776e:	e014      	b.n	1779a <mp_seq_cmp_bytes+0xb4>
    }
    if (res > 0) {
   17770:	693b      	ldr	r3, [r7, #16]
   17772:	2b00      	cmp	r3, #0
   17774:	dd01      	ble.n	1777a <mp_seq_cmp_bytes+0x94>
        return true;
   17776:	2301      	movs	r3, #1
   17778:	e00f      	b.n	1779a <mp_seq_cmp_bytes+0xb4>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   1777a:	687a      	ldr	r2, [r7, #4]
   1777c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1777e:	429a      	cmp	r2, r3
   17780:	d005      	beq.n	1778e <mp_seq_cmp_bytes+0xa8>
        if (len1 < len2) {
   17782:	687a      	ldr	r2, [r7, #4]
   17784:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17786:	429a      	cmp	r2, r3
   17788:	d206      	bcs.n	17798 <mp_seq_cmp_bytes+0xb2>
            // ... then longer list length wins (we deal only with >)
            return false;
   1778a:	2300      	movs	r3, #0
   1778c:	e005      	b.n	1779a <mp_seq_cmp_bytes+0xb4>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   1778e:	68fb      	ldr	r3, [r7, #12]
   17790:	2b01      	cmp	r3, #1
   17792:	d101      	bne.n	17798 <mp_seq_cmp_bytes+0xb2>
        // Otherwise, if we have strict relation, equality means failure
        return false;
   17794:	2300      	movs	r3, #0
   17796:	e000      	b.n	1779a <mp_seq_cmp_bytes+0xb4>
    }
    return true;
   17798:	2301      	movs	r3, #1
}
   1779a:	4618      	mov	r0, r3
   1779c:	3720      	adds	r7, #32
   1779e:	46bd      	mov	sp, r7
   177a0:	bd80      	pop	{r7, pc}

000177a2 <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   177a2:	b580      	push	{r7, lr}
   177a4:	b088      	sub	sp, #32
   177a6:	af00      	add	r7, sp, #0
   177a8:	60f8      	str	r0, [r7, #12]
   177aa:	60b9      	str	r1, [r7, #8]
   177ac:	607a      	str	r2, [r7, #4]
   177ae:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   177b0:	68fb      	ldr	r3, [r7, #12]
   177b2:	2b02      	cmp	r3, #2
   177b4:	d105      	bne.n	177c2 <mp_seq_cmp_objs+0x20>
   177b6:	687a      	ldr	r2, [r7, #4]
   177b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   177ba:	429a      	cmp	r2, r3
   177bc:	d001      	beq.n	177c2 <mp_seq_cmp_objs+0x20>
        return false;
   177be:	2300      	movs	r3, #0
   177c0:	e065      	b.n	1788e <mp_seq_cmp_objs+0xec>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   177c2:	68fb      	ldr	r3, [r7, #12]
   177c4:	2b00      	cmp	r3, #0
   177c6:	d002      	beq.n	177ce <mp_seq_cmp_objs+0x2c>
   177c8:	68fb      	ldr	r3, [r7, #12]
   177ca:	2b03      	cmp	r3, #3
   177cc:	d113      	bne.n	177f6 <mp_seq_cmp_objs+0x54>
        SWAP(const mp_obj_t *, items1, items2);
   177ce:	683b      	ldr	r3, [r7, #0]
   177d0:	61bb      	str	r3, [r7, #24]
   177d2:	68bb      	ldr	r3, [r7, #8]
   177d4:	603b      	str	r3, [r7, #0]
   177d6:	69bb      	ldr	r3, [r7, #24]
   177d8:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   177da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   177dc:	617b      	str	r3, [r7, #20]
   177de:	687b      	ldr	r3, [r7, #4]
   177e0:	62bb      	str	r3, [r7, #40]	; 0x28
   177e2:	697b      	ldr	r3, [r7, #20]
   177e4:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   177e6:	68fb      	ldr	r3, [r7, #12]
   177e8:	2b00      	cmp	r3, #0
   177ea:	d102      	bne.n	177f2 <mp_seq_cmp_objs+0x50>
            op = MP_BINARY_OP_MORE;
   177ec:	2301      	movs	r3, #1
   177ee:	60fb      	str	r3, [r7, #12]
   177f0:	e001      	b.n	177f6 <mp_seq_cmp_objs+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   177f2:	2304      	movs	r3, #4
   177f4:	60fb      	str	r3, [r7, #12]
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   177f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   177f8:	687b      	ldr	r3, [r7, #4]
   177fa:	4293      	cmp	r3, r2
   177fc:	bf28      	it	cs
   177fe:	4613      	movcs	r3, r2
   17800:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < len; i++) {
   17802:	2300      	movs	r3, #0
   17804:	61fb      	str	r3, [r7, #28]
   17806:	e02e      	b.n	17866 <mp_seq_cmp_objs+0xc4>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   17808:	69fb      	ldr	r3, [r7, #28]
   1780a:	009b      	lsls	r3, r3, #2
   1780c:	68ba      	ldr	r2, [r7, #8]
   1780e:	4413      	add	r3, r2
   17810:	6818      	ldr	r0, [r3, #0]
   17812:	69fb      	ldr	r3, [r7, #28]
   17814:	009b      	lsls	r3, r3, #2
   17816:	683a      	ldr	r2, [r7, #0]
   17818:	4413      	add	r3, r2
   1781a:	681b      	ldr	r3, [r3, #0]
   1781c:	4619      	mov	r1, r3
   1781e:	f7f6 f899 	bl	d954 <mp_obj_equal>
   17822:	4603      	mov	r3, r0
   17824:	2b00      	cmp	r3, #0
   17826:	d003      	beq.n	17830 <mp_seq_cmp_objs+0x8e>
    for (size_t i = 0; i < len; i++) {
   17828:	69fb      	ldr	r3, [r7, #28]
   1782a:	3301      	adds	r3, #1
   1782c:	61fb      	str	r3, [r7, #28]
   1782e:	e01a      	b.n	17866 <mp_seq_cmp_objs+0xc4>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   17830:	68fb      	ldr	r3, [r7, #12]
   17832:	2b02      	cmp	r3, #2
   17834:	d101      	bne.n	1783a <mp_seq_cmp_objs+0x98>
            // In particular, if we are checking for equality, here're the answer
            return false;
   17836:	2300      	movs	r3, #0
   17838:	e029      	b.n	1788e <mp_seq_cmp_objs+0xec>
        }

        // Otherwise, application of relation op gives the answer
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   1783a:	69fb      	ldr	r3, [r7, #28]
   1783c:	009b      	lsls	r3, r3, #2
   1783e:	68ba      	ldr	r2, [r7, #8]
   17840:	4413      	add	r3, r2
   17842:	6819      	ldr	r1, [r3, #0]
   17844:	69fb      	ldr	r3, [r7, #28]
   17846:	009b      	lsls	r3, r3, #2
   17848:	683a      	ldr	r2, [r7, #0]
   1784a:	4413      	add	r3, r2
   1784c:	681b      	ldr	r3, [r3, #0]
   1784e:	461a      	mov	r2, r3
   17850:	68f8      	ldr	r0, [r7, #12]
   17852:	f7f3 ffc5 	bl	b7e0 <mp_binary_op>
   17856:	4602      	mov	r2, r0
   17858:	4b0f      	ldr	r3, [pc, #60]	; (17898 <mp_seq_cmp_objs+0xf6>)
   1785a:	429a      	cmp	r2, r3
   1785c:	bf0c      	ite	eq
   1785e:	2301      	moveq	r3, #1
   17860:	2300      	movne	r3, #0
   17862:	b2db      	uxtb	r3, r3
   17864:	e013      	b.n	1788e <mp_seq_cmp_objs+0xec>
    for (size_t i = 0; i < len; i++) {
   17866:	69fa      	ldr	r2, [r7, #28]
   17868:	693b      	ldr	r3, [r7, #16]
   1786a:	429a      	cmp	r2, r3
   1786c:	d3cc      	bcc.n	17808 <mp_seq_cmp_objs+0x66>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   1786e:	687a      	ldr	r2, [r7, #4]
   17870:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17872:	429a      	cmp	r2, r3
   17874:	d005      	beq.n	17882 <mp_seq_cmp_objs+0xe0>
        if (len1 < len2) {
   17876:	687a      	ldr	r2, [r7, #4]
   17878:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1787a:	429a      	cmp	r2, r3
   1787c:	d206      	bcs.n	1788c <mp_seq_cmp_objs+0xea>
            // ... then longer list length wins (we deal only with >)
            return false;
   1787e:	2300      	movs	r3, #0
   17880:	e005      	b.n	1788e <mp_seq_cmp_objs+0xec>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   17882:	68fb      	ldr	r3, [r7, #12]
   17884:	2b01      	cmp	r3, #1
   17886:	d101      	bne.n	1788c <mp_seq_cmp_objs+0xea>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
   17888:	2300      	movs	r3, #0
   1788a:	e000      	b.n	1788e <mp_seq_cmp_objs+0xec>
    }

    return true;
   1788c:	2301      	movs	r3, #1
}
   1788e:	4618      	mov	r0, r3
   17890:	3720      	adds	r7, #32
   17892:	46bd      	mov	sp, r7
   17894:	bd80      	pop	{r7, pc}
   17896:	bf00      	nop
   17898:	0002189c 	.word	0x0002189c

0001789c <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   1789c:	b580      	push	{r7, lr}
   1789e:	b08a      	sub	sp, #40	; 0x28
   178a0:	af00      	add	r7, sp, #0
   178a2:	60f8      	str	r0, [r7, #12]
   178a4:	60b9      	str	r1, [r7, #8]
   178a6:	607a      	str	r2, [r7, #4]
   178a8:	603b      	str	r3, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   178aa:	683b      	ldr	r3, [r7, #0]
   178ac:	681b      	ldr	r3, [r3, #0]
   178ae:	4618      	mov	r0, r3
   178b0:	f7f5 fefe 	bl	d6b0 <mp_obj_get_type>
   178b4:	61b8      	str	r0, [r7, #24]
    mp_obj_t value = args[1];
   178b6:	683b      	ldr	r3, [r7, #0]
   178b8:	685b      	ldr	r3, [r3, #4]
   178ba:	617b      	str	r3, [r7, #20]
    size_t start = 0;
   178bc:	2300      	movs	r3, #0
   178be:	627b      	str	r3, [r7, #36]	; 0x24
    size_t stop = len;
   178c0:	68bb      	ldr	r3, [r7, #8]
   178c2:	623b      	str	r3, [r7, #32]

    if (n_args >= 3) {
   178c4:	687b      	ldr	r3, [r7, #4]
   178c6:	2b02      	cmp	r3, #2
   178c8:	d914      	bls.n	178f4 <mp_seq_index_obj+0x58>
        start = mp_get_index(type, len, args[2], true);
   178ca:	683b      	ldr	r3, [r7, #0]
   178cc:	3308      	adds	r3, #8
   178ce:	681a      	ldr	r2, [r3, #0]
   178d0:	2301      	movs	r3, #1
   178d2:	68b9      	ldr	r1, [r7, #8]
   178d4:	69b8      	ldr	r0, [r7, #24]
   178d6:	f7f6 f9b7 	bl	dc48 <mp_get_index>
   178da:	6278      	str	r0, [r7, #36]	; 0x24
        if (n_args >= 4) {
   178dc:	687b      	ldr	r3, [r7, #4]
   178de:	2b03      	cmp	r3, #3
   178e0:	d908      	bls.n	178f4 <mp_seq_index_obj+0x58>
            stop = mp_get_index(type, len, args[3], true);
   178e2:	683b      	ldr	r3, [r7, #0]
   178e4:	330c      	adds	r3, #12
   178e6:	681a      	ldr	r2, [r3, #0]
   178e8:	2301      	movs	r3, #1
   178ea:	68b9      	ldr	r1, [r7, #8]
   178ec:	69b8      	ldr	r0, [r7, #24]
   178ee:	f7f6 f9ab 	bl	dc48 <mp_get_index>
   178f2:	6238      	str	r0, [r7, #32]
        }
    }

    for (size_t i = start; i < stop; i++) {
   178f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   178f6:	61fb      	str	r3, [r7, #28]
   178f8:	e013      	b.n	17922 <mp_seq_index_obj+0x86>
        if (mp_obj_equal(items[i], value)) {
   178fa:	69fb      	ldr	r3, [r7, #28]
   178fc:	009b      	lsls	r3, r3, #2
   178fe:	68fa      	ldr	r2, [r7, #12]
   17900:	4413      	add	r3, r2
   17902:	681b      	ldr	r3, [r3, #0]
   17904:	6979      	ldr	r1, [r7, #20]
   17906:	4618      	mov	r0, r3
   17908:	f7f6 f824 	bl	d954 <mp_obj_equal>
   1790c:	4603      	mov	r3, r0
   1790e:	2b00      	cmp	r3, #0
   17910:	d004      	beq.n	1791c <mp_seq_index_obj+0x80>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
   17912:	69fb      	ldr	r3, [r7, #28]
   17914:	005b      	lsls	r3, r3, #1
   17916:	f043 0301 	orr.w	r3, r3, #1
   1791a:	e009      	b.n	17930 <mp_seq_index_obj+0x94>
    for (size_t i = start; i < stop; i++) {
   1791c:	69fb      	ldr	r3, [r7, #28]
   1791e:	3301      	adds	r3, #1
   17920:	61fb      	str	r3, [r7, #28]
   17922:	69fa      	ldr	r2, [r7, #28]
   17924:	6a3b      	ldr	r3, [r7, #32]
   17926:	429a      	cmp	r2, r3
   17928:	d3e7      	bcc.n	178fa <mp_seq_index_obj+0x5e>
        }
    }

    mp_raise_ValueError("object not in sequence");
   1792a:	4803      	ldr	r0, [pc, #12]	; (17938 <mp_seq_index_obj+0x9c>)
   1792c:	f7f5 fa91 	bl	ce52 <mp_raise_ValueError>
}
   17930:	4618      	mov	r0, r3
   17932:	3728      	adds	r7, #40	; 0x28
   17934:	46bd      	mov	sp, r7
   17936:	bd80      	pop	{r7, pc}
   17938:	0002412c 	.word	0x0002412c

0001793c <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   1793c:	b580      	push	{r7, lr}
   1793e:	b086      	sub	sp, #24
   17940:	af00      	add	r7, sp, #0
   17942:	60f8      	str	r0, [r7, #12]
   17944:	60b9      	str	r1, [r7, #8]
   17946:	607a      	str	r2, [r7, #4]
    size_t count = 0;
   17948:	2300      	movs	r3, #0
   1794a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   1794c:	2300      	movs	r3, #0
   1794e:	613b      	str	r3, [r7, #16]
   17950:	e011      	b.n	17976 <mp_seq_count_obj+0x3a>
         if (mp_obj_equal(items[i], value)) {
   17952:	693b      	ldr	r3, [r7, #16]
   17954:	009b      	lsls	r3, r3, #2
   17956:	68fa      	ldr	r2, [r7, #12]
   17958:	4413      	add	r3, r2
   1795a:	681b      	ldr	r3, [r3, #0]
   1795c:	6879      	ldr	r1, [r7, #4]
   1795e:	4618      	mov	r0, r3
   17960:	f7f5 fff8 	bl	d954 <mp_obj_equal>
   17964:	4603      	mov	r3, r0
   17966:	2b00      	cmp	r3, #0
   17968:	d002      	beq.n	17970 <mp_seq_count_obj+0x34>
              count++;
   1796a:	697b      	ldr	r3, [r7, #20]
   1796c:	3301      	adds	r3, #1
   1796e:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17970:	693b      	ldr	r3, [r7, #16]
   17972:	3301      	adds	r3, #1
   17974:	613b      	str	r3, [r7, #16]
   17976:	693a      	ldr	r2, [r7, #16]
   17978:	68bb      	ldr	r3, [r7, #8]
   1797a:	429a      	cmp	r2, r3
   1797c:	d3e9      	bcc.n	17952 <mp_seq_count_obj+0x16>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   1797e:	697b      	ldr	r3, [r7, #20]
   17980:	005b      	lsls	r3, r3, #1
   17982:	f043 0301 	orr.w	r3, r3, #1
}
   17986:	4618      	mov	r0, r3
   17988:	3718      	adds	r7, #24
   1798a:	46bd      	mov	sp, r7
   1798c:	bd80      	pop	{r7, pc}
   1798e:	bf00      	nop

00017990 <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   17990:	b580      	push	{r7, lr}
   17992:	b084      	sub	sp, #16
   17994:	af00      	add	r7, sp, #0
   17996:	4603      	mov	r3, r0
   17998:	603a      	str	r2, [r7, #0]
   1799a:	71fb      	strb	r3, [r7, #7]
   1799c:	460b      	mov	r3, r1
   1799e:	71bb      	strb	r3, [r7, #6]
    size_t size = 0;
   179a0:	2300      	movs	r3, #0
   179a2:	60fb      	str	r3, [r7, #12]
    int align = 1;
   179a4:	2301      	movs	r3, #1
   179a6:	60bb      	str	r3, [r7, #8]
    switch (struct_type) {
   179a8:	79fb      	ldrb	r3, [r7, #7]
   179aa:	2b3e      	cmp	r3, #62	; 0x3e
   179ac:	d005      	beq.n	179ba <mp_binary_get_size+0x2a>
   179ae:	2b40      	cmp	r3, #64	; 0x40
   179b0:	f000 8085 	beq.w	17abe <mp_binary_get_size+0x12e>
   179b4:	2b3c      	cmp	r3, #60	; 0x3c
   179b6:	f040 8196 	bne.w	17ce6 <mp_binary_get_size+0x356>
        case '<': case '>':
            switch (val_type) {
   179ba:	79bb      	ldrb	r3, [r7, #6]
   179bc:	3b42      	subs	r3, #66	; 0x42
   179be:	2b2f      	cmp	r3, #47	; 0x2f
   179c0:	f200 8190 	bhi.w	17ce4 <mp_binary_get_size+0x354>
   179c4:	a201      	add	r2, pc, #4	; (adr r2, 179cc <mp_binary_get_size+0x3c>)
   179c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   179ca:	bf00      	nop
   179cc:	00017a8d 	.word	0x00017a8d
   179d0:	00017ce5 	.word	0x00017ce5
   179d4:	00017ce5 	.word	0x00017ce5
   179d8:	00017ce5 	.word	0x00017ce5
   179dc:	00017ce5 	.word	0x00017ce5
   179e0:	00017ce5 	.word	0x00017ce5
   179e4:	00017a93 	.word	0x00017a93
   179e8:	00017a99 	.word	0x00017a99
   179ec:	00017ce5 	.word	0x00017ce5
   179f0:	00017ce5 	.word	0x00017ce5
   179f4:	00017a9f 	.word	0x00017a9f
   179f8:	00017ce5 	.word	0x00017ce5
   179fc:	00017ce5 	.word	0x00017ce5
   17a00:	00017aab 	.word	0x00017aab
   17a04:	00017aab 	.word	0x00017aab
   17a08:	00017aa5 	.word	0x00017aa5
   17a0c:	00017ce5 	.word	0x00017ce5
   17a10:	00017aab 	.word	0x00017aab
   17a14:	00017ce5 	.word	0x00017ce5
   17a18:	00017ce5 	.word	0x00017ce5
   17a1c:	00017ce5 	.word	0x00017ce5
   17a20:	00017ce5 	.word	0x00017ce5
   17a24:	00017ce5 	.word	0x00017ce5
   17a28:	00017ce5 	.word	0x00017ce5
   17a2c:	00017ce5 	.word	0x00017ce5
   17a30:	00017ce5 	.word	0x00017ce5
   17a34:	00017ce5 	.word	0x00017ce5
   17a38:	00017ce5 	.word	0x00017ce5
   17a3c:	00017ce5 	.word	0x00017ce5
   17a40:	00017ce5 	.word	0x00017ce5
   17a44:	00017ce5 	.word	0x00017ce5
   17a48:	00017ce5 	.word	0x00017ce5
   17a4c:	00017a8d 	.word	0x00017a8d
   17a50:	00017ce5 	.word	0x00017ce5
   17a54:	00017ab7 	.word	0x00017ab7
   17a58:	00017ce5 	.word	0x00017ce5
   17a5c:	00017ab1 	.word	0x00017ab1
   17a60:	00017ce5 	.word	0x00017ce5
   17a64:	00017a93 	.word	0x00017a93
   17a68:	00017a99 	.word	0x00017a99
   17a6c:	00017ce5 	.word	0x00017ce5
   17a70:	00017ce5 	.word	0x00017ce5
   17a74:	00017a9f 	.word	0x00017a9f
   17a78:	00017ce5 	.word	0x00017ce5
   17a7c:	00017ce5 	.word	0x00017ce5
   17a80:	00017ce5 	.word	0x00017ce5
   17a84:	00017ce5 	.word	0x00017ce5
   17a88:	00017aa5 	.word	0x00017aa5
                case 'b': case 'B':
                    size = 1; break;
   17a8c:	2301      	movs	r3, #1
   17a8e:	60fb      	str	r3, [r7, #12]
   17a90:	e014      	b.n	17abc <mp_binary_get_size+0x12c>
                case 'h': case 'H':
                    size = 2; break;
   17a92:	2302      	movs	r3, #2
   17a94:	60fb      	str	r3, [r7, #12]
   17a96:	e011      	b.n	17abc <mp_binary_get_size+0x12c>
                case 'i': case 'I':
                    size = 4; break;
   17a98:	2304      	movs	r3, #4
   17a9a:	60fb      	str	r3, [r7, #12]
   17a9c:	e00e      	b.n	17abc <mp_binary_get_size+0x12c>
                case 'l': case 'L':
                    size = 4; break;
   17a9e:	2304      	movs	r3, #4
   17aa0:	60fb      	str	r3, [r7, #12]
   17aa2:	e00b      	b.n	17abc <mp_binary_get_size+0x12c>
                case 'q': case 'Q':
                    size = 8; break;
   17aa4:	2308      	movs	r3, #8
   17aa6:	60fb      	str	r3, [r7, #12]
   17aa8:	e008      	b.n	17abc <mp_binary_get_size+0x12c>
                case 'P': case 'O': case 'S':
                    size = sizeof(void*); break;
   17aaa:	2304      	movs	r3, #4
   17aac:	60fb      	str	r3, [r7, #12]
   17aae:	e005      	b.n	17abc <mp_binary_get_size+0x12c>
                case 'f':
                    size = sizeof(float); break;
   17ab0:	2304      	movs	r3, #4
   17ab2:	60fb      	str	r3, [r7, #12]
   17ab4:	e002      	b.n	17abc <mp_binary_get_size+0x12c>
                case 'd':
                    size = sizeof(double); break;
   17ab6:	2308      	movs	r3, #8
   17ab8:	60fb      	str	r3, [r7, #12]
   17aba:	bf00      	nop
            }
            break;
   17abc:	e112      	b.n	17ce4 <mp_binary_get_size+0x354>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   17abe:	79bb      	ldrb	r3, [r7, #6]
   17ac0:	3b01      	subs	r3, #1
   17ac2:	2b70      	cmp	r3, #112	; 0x70
   17ac4:	f200 810f 	bhi.w	17ce6 <mp_binary_get_size+0x356>
   17ac8:	a201      	add	r2, pc, #4	; (adr r2, 17ad0 <mp_binary_get_size+0x140>)
   17aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17ace:	bf00      	nop
   17ad0:	00017c95 	.word	0x00017c95
   17ad4:	00017ce7 	.word	0x00017ce7
   17ad8:	00017ce7 	.word	0x00017ce7
   17adc:	00017ce7 	.word	0x00017ce7
   17ae0:	00017ce7 	.word	0x00017ce7
   17ae4:	00017ce7 	.word	0x00017ce7
   17ae8:	00017ce7 	.word	0x00017ce7
   17aec:	00017ce7 	.word	0x00017ce7
   17af0:	00017ce7 	.word	0x00017ce7
   17af4:	00017ce7 	.word	0x00017ce7
   17af8:	00017ce7 	.word	0x00017ce7
   17afc:	00017ce7 	.word	0x00017ce7
   17b00:	00017ce7 	.word	0x00017ce7
   17b04:	00017ce7 	.word	0x00017ce7
   17b08:	00017ce7 	.word	0x00017ce7
   17b0c:	00017ce7 	.word	0x00017ce7
   17b10:	00017ce7 	.word	0x00017ce7
   17b14:	00017ce7 	.word	0x00017ce7
   17b18:	00017ce7 	.word	0x00017ce7
   17b1c:	00017ce7 	.word	0x00017ce7
   17b20:	00017ce7 	.word	0x00017ce7
   17b24:	00017ce7 	.word	0x00017ce7
   17b28:	00017ce7 	.word	0x00017ce7
   17b2c:	00017ce7 	.word	0x00017ce7
   17b30:	00017ce7 	.word	0x00017ce7
   17b34:	00017ce7 	.word	0x00017ce7
   17b38:	00017ce7 	.word	0x00017ce7
   17b3c:	00017ce7 	.word	0x00017ce7
   17b40:	00017ce7 	.word	0x00017ce7
   17b44:	00017ce7 	.word	0x00017ce7
   17b48:	00017ce7 	.word	0x00017ce7
   17b4c:	00017ce7 	.word	0x00017ce7
   17b50:	00017ce7 	.word	0x00017ce7
   17b54:	00017ce7 	.word	0x00017ce7
   17b58:	00017ce7 	.word	0x00017ce7
   17b5c:	00017ce7 	.word	0x00017ce7
   17b60:	00017ce7 	.word	0x00017ce7
   17b64:	00017ce7 	.word	0x00017ce7
   17b68:	00017ce7 	.word	0x00017ce7
   17b6c:	00017ce7 	.word	0x00017ce7
   17b70:	00017ce7 	.word	0x00017ce7
   17b74:	00017ce7 	.word	0x00017ce7
   17b78:	00017ce7 	.word	0x00017ce7
   17b7c:	00017ce7 	.word	0x00017ce7
   17b80:	00017ce7 	.word	0x00017ce7
   17b84:	00017ce7 	.word	0x00017ce7
   17b88:	00017ce7 	.word	0x00017ce7
   17b8c:	00017ce7 	.word	0x00017ce7
   17b90:	00017ce7 	.word	0x00017ce7
   17b94:	00017ce7 	.word	0x00017ce7
   17b98:	00017ce7 	.word	0x00017ce7
   17b9c:	00017ce7 	.word	0x00017ce7
   17ba0:	00017ce7 	.word	0x00017ce7
   17ba4:	00017ce7 	.word	0x00017ce7
   17ba8:	00017ce7 	.word	0x00017ce7
   17bac:	00017ce7 	.word	0x00017ce7
   17bb0:	00017ce7 	.word	0x00017ce7
   17bb4:	00017ce7 	.word	0x00017ce7
   17bb8:	00017ce7 	.word	0x00017ce7
   17bbc:	00017ce7 	.word	0x00017ce7
   17bc0:	00017ce7 	.word	0x00017ce7
   17bc4:	00017ce7 	.word	0x00017ce7
   17bc8:	00017ce7 	.word	0x00017ce7
   17bcc:	00017ce7 	.word	0x00017ce7
   17bd0:	00017ce7 	.word	0x00017ce7
   17bd4:	00017c95 	.word	0x00017c95
   17bd8:	00017ce7 	.word	0x00017ce7
   17bdc:	00017ce7 	.word	0x00017ce7
   17be0:	00017ce7 	.word	0x00017ce7
   17be4:	00017ce7 	.word	0x00017ce7
   17be8:	00017ce7 	.word	0x00017ce7
   17bec:	00017c9f 	.word	0x00017c9f
   17bf0:	00017ca9 	.word	0x00017ca9
   17bf4:	00017ce7 	.word	0x00017ce7
   17bf8:	00017ce7 	.word	0x00017ce7
   17bfc:	00017cb3 	.word	0x00017cb3
   17c00:	00017ce7 	.word	0x00017ce7
   17c04:	00017ce7 	.word	0x00017ce7
   17c08:	00017cc7 	.word	0x00017cc7
   17c0c:	00017cc7 	.word	0x00017cc7
   17c10:	00017cbd 	.word	0x00017cbd
   17c14:	00017ce7 	.word	0x00017ce7
   17c18:	00017cc7 	.word	0x00017cc7
   17c1c:	00017ce7 	.word	0x00017ce7
   17c20:	00017ce7 	.word	0x00017ce7
   17c24:	00017ce7 	.word	0x00017ce7
   17c28:	00017ce7 	.word	0x00017ce7
   17c2c:	00017ce7 	.word	0x00017ce7
   17c30:	00017ce7 	.word	0x00017ce7
   17c34:	00017ce7 	.word	0x00017ce7
   17c38:	00017ce7 	.word	0x00017ce7
   17c3c:	00017ce7 	.word	0x00017ce7
   17c40:	00017ce7 	.word	0x00017ce7
   17c44:	00017ce7 	.word	0x00017ce7
   17c48:	00017ce7 	.word	0x00017ce7
   17c4c:	00017ce7 	.word	0x00017ce7
   17c50:	00017ce7 	.word	0x00017ce7
   17c54:	00017c95 	.word	0x00017c95
   17c58:	00017ce7 	.word	0x00017ce7
   17c5c:	00017cdb 	.word	0x00017cdb
   17c60:	00017ce7 	.word	0x00017ce7
   17c64:	00017cd1 	.word	0x00017cd1
   17c68:	00017ce7 	.word	0x00017ce7
   17c6c:	00017c9f 	.word	0x00017c9f
   17c70:	00017ca9 	.word	0x00017ca9
   17c74:	00017ce7 	.word	0x00017ce7
   17c78:	00017ce7 	.word	0x00017ce7
   17c7c:	00017cb3 	.word	0x00017cb3
   17c80:	00017ce7 	.word	0x00017ce7
   17c84:	00017ce7 	.word	0x00017ce7
   17c88:	00017ce7 	.word	0x00017ce7
   17c8c:	00017ce7 	.word	0x00017ce7
   17c90:	00017cbd 	.word	0x00017cbd
                case BYTEARRAY_TYPECODE:
                case 'b': case 'B':
                    align = size = 1; break;
   17c94:	2301      	movs	r3, #1
   17c96:	60fb      	str	r3, [r7, #12]
   17c98:	2301      	movs	r3, #1
   17c9a:	60bb      	str	r3, [r7, #8]
   17c9c:	e023      	b.n	17ce6 <mp_binary_get_size+0x356>
                case 'h': case 'H':
                    align = alignof(short);
   17c9e:	2302      	movs	r3, #2
   17ca0:	60bb      	str	r3, [r7, #8]
                    size = sizeof(short); break;
   17ca2:	2302      	movs	r3, #2
   17ca4:	60fb      	str	r3, [r7, #12]
   17ca6:	e01e      	b.n	17ce6 <mp_binary_get_size+0x356>
                case 'i': case 'I':
                    align = alignof(int);
   17ca8:	2304      	movs	r3, #4
   17caa:	60bb      	str	r3, [r7, #8]
                    size = sizeof(int); break;
   17cac:	2304      	movs	r3, #4
   17cae:	60fb      	str	r3, [r7, #12]
   17cb0:	e019      	b.n	17ce6 <mp_binary_get_size+0x356>
                case 'l': case 'L':
                    align = alignof(long);
   17cb2:	2304      	movs	r3, #4
   17cb4:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long); break;
   17cb6:	2304      	movs	r3, #4
   17cb8:	60fb      	str	r3, [r7, #12]
   17cba:	e014      	b.n	17ce6 <mp_binary_get_size+0x356>
                case 'q': case 'Q':
                    align = alignof(long long);
   17cbc:	2308      	movs	r3, #8
   17cbe:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long long); break;
   17cc0:	2308      	movs	r3, #8
   17cc2:	60fb      	str	r3, [r7, #12]
   17cc4:	e00f      	b.n	17ce6 <mp_binary_get_size+0x356>
                case 'P': case 'O': case 'S':
                    align = alignof(void*);
   17cc6:	2304      	movs	r3, #4
   17cc8:	60bb      	str	r3, [r7, #8]
                    size = sizeof(void*); break;
   17cca:	2304      	movs	r3, #4
   17ccc:	60fb      	str	r3, [r7, #12]
   17cce:	e00a      	b.n	17ce6 <mp_binary_get_size+0x356>
                case 'f':
                    align = alignof(float);
   17cd0:	2304      	movs	r3, #4
   17cd2:	60bb      	str	r3, [r7, #8]
                    size = sizeof(float); break;
   17cd4:	2304      	movs	r3, #4
   17cd6:	60fb      	str	r3, [r7, #12]
   17cd8:	e005      	b.n	17ce6 <mp_binary_get_size+0x356>
                case 'd':
                    align = alignof(double);
   17cda:	2308      	movs	r3, #8
   17cdc:	60bb      	str	r3, [r7, #8]
                    size = sizeof(double); break;
   17cde:	2308      	movs	r3, #8
   17ce0:	60fb      	str	r3, [r7, #12]
   17ce2:	e000      	b.n	17ce6 <mp_binary_get_size+0x356>
            break;
   17ce4:	bf00      	nop
            }
        }
    }

    if (size == 0) {
   17ce6:	68fb      	ldr	r3, [r7, #12]
   17ce8:	2b00      	cmp	r3, #0
   17cea:	d102      	bne.n	17cf2 <mp_binary_get_size+0x362>
        mp_raise_ValueError("bad typecode");
   17cec:	4806      	ldr	r0, [pc, #24]	; (17d08 <mp_binary_get_size+0x378>)
   17cee:	f7f5 f8b0 	bl	ce52 <mp_raise_ValueError>
    }

    if (palign != NULL) {
   17cf2:	683b      	ldr	r3, [r7, #0]
   17cf4:	2b00      	cmp	r3, #0
   17cf6:	d002      	beq.n	17cfe <mp_binary_get_size+0x36e>
        *palign = align;
   17cf8:	68ba      	ldr	r2, [r7, #8]
   17cfa:	683b      	ldr	r3, [r7, #0]
   17cfc:	601a      	str	r2, [r3, #0]
    }
    return size;
   17cfe:	68fb      	ldr	r3, [r7, #12]
}
   17d00:	4618      	mov	r0, r3
   17d02:	3710      	adds	r7, #16
   17d04:	46bd      	mov	sp, r7
   17d06:	bd80      	pop	{r7, pc}
   17d08:	00024144 	.word	0x00024144

00017d0c <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   17d0c:	b580      	push	{r7, lr}
   17d0e:	b086      	sub	sp, #24
   17d10:	af00      	add	r7, sp, #0
   17d12:	4603      	mov	r3, r0
   17d14:	60b9      	str	r1, [r7, #8]
   17d16:	607a      	str	r2, [r7, #4]
   17d18:	73fb      	strb	r3, [r7, #15]
    mp_int_t val = 0;
   17d1a:	2300      	movs	r3, #0
   17d1c:	617b      	str	r3, [r7, #20]
    switch (typecode) {
   17d1e:	7bfb      	ldrb	r3, [r7, #15]
   17d20:	3b01      	subs	r3, #1
   17d22:	2b6b      	cmp	r3, #107	; 0x6b
   17d24:	f200 8130 	bhi.w	17f88 <mp_binary_get_val_array+0x27c>
   17d28:	a201      	add	r2, pc, #4	; (adr r2, 17d30 <mp_binary_get_val_array+0x24>)
   17d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17d2e:	bf00      	nop
   17d30:	00017eef 	.word	0x00017eef
   17d34:	00017f89 	.word	0x00017f89
   17d38:	00017f89 	.word	0x00017f89
   17d3c:	00017f89 	.word	0x00017f89
   17d40:	00017f89 	.word	0x00017f89
   17d44:	00017f89 	.word	0x00017f89
   17d48:	00017f89 	.word	0x00017f89
   17d4c:	00017f89 	.word	0x00017f89
   17d50:	00017f89 	.word	0x00017f89
   17d54:	00017f89 	.word	0x00017f89
   17d58:	00017f89 	.word	0x00017f89
   17d5c:	00017f89 	.word	0x00017f89
   17d60:	00017f89 	.word	0x00017f89
   17d64:	00017f89 	.word	0x00017f89
   17d68:	00017f89 	.word	0x00017f89
   17d6c:	00017f89 	.word	0x00017f89
   17d70:	00017f89 	.word	0x00017f89
   17d74:	00017f89 	.word	0x00017f89
   17d78:	00017f89 	.word	0x00017f89
   17d7c:	00017f89 	.word	0x00017f89
   17d80:	00017f89 	.word	0x00017f89
   17d84:	00017f89 	.word	0x00017f89
   17d88:	00017f89 	.word	0x00017f89
   17d8c:	00017f89 	.word	0x00017f89
   17d90:	00017f89 	.word	0x00017f89
   17d94:	00017f89 	.word	0x00017f89
   17d98:	00017f89 	.word	0x00017f89
   17d9c:	00017f89 	.word	0x00017f89
   17da0:	00017f89 	.word	0x00017f89
   17da4:	00017f89 	.word	0x00017f89
   17da8:	00017f89 	.word	0x00017f89
   17dac:	00017f89 	.word	0x00017f89
   17db0:	00017f89 	.word	0x00017f89
   17db4:	00017f89 	.word	0x00017f89
   17db8:	00017f89 	.word	0x00017f89
   17dbc:	00017f89 	.word	0x00017f89
   17dc0:	00017f89 	.word	0x00017f89
   17dc4:	00017f89 	.word	0x00017f89
   17dc8:	00017f89 	.word	0x00017f89
   17dcc:	00017f89 	.word	0x00017f89
   17dd0:	00017f89 	.word	0x00017f89
   17dd4:	00017f89 	.word	0x00017f89
   17dd8:	00017f89 	.word	0x00017f89
   17ddc:	00017f89 	.word	0x00017f89
   17de0:	00017f89 	.word	0x00017f89
   17de4:	00017f89 	.word	0x00017f89
   17de8:	00017f89 	.word	0x00017f89
   17dec:	00017f89 	.word	0x00017f89
   17df0:	00017f89 	.word	0x00017f89
   17df4:	00017f89 	.word	0x00017f89
   17df8:	00017f89 	.word	0x00017f89
   17dfc:	00017f89 	.word	0x00017f89
   17e00:	00017f89 	.word	0x00017f89
   17e04:	00017f89 	.word	0x00017f89
   17e08:	00017f89 	.word	0x00017f89
   17e0c:	00017f89 	.word	0x00017f89
   17e10:	00017f89 	.word	0x00017f89
   17e14:	00017f89 	.word	0x00017f89
   17e18:	00017f89 	.word	0x00017f89
   17e1c:	00017f89 	.word	0x00017f89
   17e20:	00017f89 	.word	0x00017f89
   17e24:	00017f89 	.word	0x00017f89
   17e28:	00017f89 	.word	0x00017f89
   17e2c:	00017f89 	.word	0x00017f89
   17e30:	00017f89 	.word	0x00017f89
   17e34:	00017eef 	.word	0x00017eef
   17e38:	00017f89 	.word	0x00017f89
   17e3c:	00017f89 	.word	0x00017f89
   17e40:	00017f89 	.word	0x00017f89
   17e44:	00017f89 	.word	0x00017f89
   17e48:	00017f89 	.word	0x00017f89
   17e4c:	00017f0b 	.word	0x00017f0b
   17e50:	00017f2d 	.word	0x00017f2d
   17e54:	00017f89 	.word	0x00017f89
   17e58:	00017f89 	.word	0x00017f89
   17e5c:	00017f55 	.word	0x00017f55
   17e60:	00017f89 	.word	0x00017f89
   17e64:	00017f89 	.word	0x00017f89
   17e68:	00017f69 	.word	0x00017f69
   17e6c:	00017f75 	.word	0x00017f75
   17e70:	00017f89 	.word	0x00017f89
   17e74:	00017f89 	.word	0x00017f89
   17e78:	00017f89 	.word	0x00017f89
   17e7c:	00017f89 	.word	0x00017f89
   17e80:	00017f89 	.word	0x00017f89
   17e84:	00017f89 	.word	0x00017f89
   17e88:	00017f89 	.word	0x00017f89
   17e8c:	00017f89 	.word	0x00017f89
   17e90:	00017f89 	.word	0x00017f89
   17e94:	00017f89 	.word	0x00017f89
   17e98:	00017f89 	.word	0x00017f89
   17e9c:	00017f89 	.word	0x00017f89
   17ea0:	00017f89 	.word	0x00017f89
   17ea4:	00017f89 	.word	0x00017f89
   17ea8:	00017f89 	.word	0x00017f89
   17eac:	00017f89 	.word	0x00017f89
   17eb0:	00017f89 	.word	0x00017f89
   17eb4:	00017ee1 	.word	0x00017ee1
   17eb8:	00017f89 	.word	0x00017f89
   17ebc:	00017f89 	.word	0x00017f89
   17ec0:	00017f89 	.word	0x00017f89
   17ec4:	00017f89 	.word	0x00017f89
   17ec8:	00017f89 	.word	0x00017f89
   17ecc:	00017efb 	.word	0x00017efb
   17ed0:	00017f19 	.word	0x00017f19
   17ed4:	00017f89 	.word	0x00017f89
   17ed8:	00017f89 	.word	0x00017f89
   17edc:	00017f41 	.word	0x00017f41
        case 'b':
            val = ((signed char*)p)[index];
   17ee0:	68ba      	ldr	r2, [r7, #8]
   17ee2:	687b      	ldr	r3, [r7, #4]
   17ee4:	4413      	add	r3, r2
   17ee6:	f993 3000 	ldrsb.w	r3, [r3]
   17eea:	617b      	str	r3, [r7, #20]
            break;
   17eec:	e04c      	b.n	17f88 <mp_binary_get_val_array+0x27c>
        case BYTEARRAY_TYPECODE:
        case 'B':
            val = ((unsigned char*)p)[index];
   17eee:	68ba      	ldr	r2, [r7, #8]
   17ef0:	687b      	ldr	r3, [r7, #4]
   17ef2:	4413      	add	r3, r2
   17ef4:	781b      	ldrb	r3, [r3, #0]
   17ef6:	617b      	str	r3, [r7, #20]
            break;
   17ef8:	e046      	b.n	17f88 <mp_binary_get_val_array+0x27c>
        case 'h':
            val = ((short*)p)[index];
   17efa:	687b      	ldr	r3, [r7, #4]
   17efc:	005b      	lsls	r3, r3, #1
   17efe:	68ba      	ldr	r2, [r7, #8]
   17f00:	4413      	add	r3, r2
   17f02:	f9b3 3000 	ldrsh.w	r3, [r3]
   17f06:	617b      	str	r3, [r7, #20]
            break;
   17f08:	e03e      	b.n	17f88 <mp_binary_get_val_array+0x27c>
        case 'H':
            val = ((unsigned short*)p)[index];
   17f0a:	687b      	ldr	r3, [r7, #4]
   17f0c:	005b      	lsls	r3, r3, #1
   17f0e:	68ba      	ldr	r2, [r7, #8]
   17f10:	4413      	add	r3, r2
   17f12:	881b      	ldrh	r3, [r3, #0]
   17f14:	617b      	str	r3, [r7, #20]
            break;
   17f16:	e037      	b.n	17f88 <mp_binary_get_val_array+0x27c>
        case 'i':
            return mp_obj_new_int(((int*)p)[index]);
   17f18:	687b      	ldr	r3, [r7, #4]
   17f1a:	009b      	lsls	r3, r3, #2
   17f1c:	68ba      	ldr	r2, [r7, #8]
   17f1e:	4413      	add	r3, r2
   17f20:	681b      	ldr	r3, [r3, #0]
   17f22:	4618      	mov	r0, r3
   17f24:	f7f8 fc22 	bl	1076c <mp_obj_new_int>
   17f28:	4603      	mov	r3, r0
   17f2a:	e031      	b.n	17f90 <mp_binary_get_val_array+0x284>
        case 'I':
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   17f2c:	687b      	ldr	r3, [r7, #4]
   17f2e:	009b      	lsls	r3, r3, #2
   17f30:	68ba      	ldr	r2, [r7, #8]
   17f32:	4413      	add	r3, r2
   17f34:	681b      	ldr	r3, [r3, #0]
   17f36:	4618      	mov	r0, r3
   17f38:	f7f8 fbfe 	bl	10738 <mp_obj_new_int_from_uint>
   17f3c:	4603      	mov	r3, r0
   17f3e:	e027      	b.n	17f90 <mp_binary_get_val_array+0x284>
        case 'l':
            return mp_obj_new_int(((long*)p)[index]);
   17f40:	687b      	ldr	r3, [r7, #4]
   17f42:	009b      	lsls	r3, r3, #2
   17f44:	68ba      	ldr	r2, [r7, #8]
   17f46:	4413      	add	r3, r2
   17f48:	681b      	ldr	r3, [r3, #0]
   17f4a:	4618      	mov	r0, r3
   17f4c:	f7f8 fc0e 	bl	1076c <mp_obj_new_int>
   17f50:	4603      	mov	r3, r0
   17f52:	e01d      	b.n	17f90 <mp_binary_get_val_array+0x284>
        case 'L':
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   17f54:	687b      	ldr	r3, [r7, #4]
   17f56:	009b      	lsls	r3, r3, #2
   17f58:	68ba      	ldr	r2, [r7, #8]
   17f5a:	4413      	add	r3, r2
   17f5c:	681b      	ldr	r3, [r3, #0]
   17f5e:	4618      	mov	r0, r3
   17f60:	f7f8 fbea 	bl	10738 <mp_obj_new_int_from_uint>
   17f64:	4603      	mov	r3, r0
   17f66:	e013      	b.n	17f90 <mp_binary_get_val_array+0x284>
        case 'd':
            return mp_obj_new_float(((double*)p)[index]);
#endif
        // Extension to CPython: array of objects
        case 'O':
            return ((mp_obj_t*)p)[index];
   17f68:	687b      	ldr	r3, [r7, #4]
   17f6a:	009b      	lsls	r3, r3, #2
   17f6c:	68ba      	ldr	r2, [r7, #8]
   17f6e:	4413      	add	r3, r2
   17f70:	681b      	ldr	r3, [r3, #0]
   17f72:	e00d      	b.n	17f90 <mp_binary_get_val_array+0x284>
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   17f74:	687b      	ldr	r3, [r7, #4]
   17f76:	009b      	lsls	r3, r3, #2
   17f78:	68ba      	ldr	r2, [r7, #8]
   17f7a:	4413      	add	r3, r2
   17f7c:	681b      	ldr	r3, [r3, #0]
   17f7e:	4618      	mov	r0, r3
   17f80:	f7f8 fbf4 	bl	1076c <mp_obj_new_int>
   17f84:	4603      	mov	r3, r0
   17f86:	e003      	b.n	17f90 <mp_binary_get_val_array+0x284>
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   17f88:	697b      	ldr	r3, [r7, #20]
   17f8a:	005b      	lsls	r3, r3, #1
   17f8c:	f043 0301 	orr.w	r3, r3, #1
}
   17f90:	4618      	mov	r0, r3
   17f92:	3718      	adds	r7, #24
   17f94:	46bd      	mov	sp, r7
   17f96:	bd80      	pop	{r7, pc}

00017f98 <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   17f98:	b4b0      	push	{r4, r5, r7}
   17f9a:	b08b      	sub	sp, #44	; 0x2c
   17f9c:	af00      	add	r7, sp, #0
   17f9e:	60f8      	str	r0, [r7, #12]
   17fa0:	607b      	str	r3, [r7, #4]
   17fa2:	460b      	mov	r3, r1
   17fa4:	72fb      	strb	r3, [r7, #11]
   17fa6:	4613      	mov	r3, r2
   17fa8:	72bb      	strb	r3, [r7, #10]
    int delta;
    if (!big_endian) {
   17faa:	7abb      	ldrb	r3, [r7, #10]
   17fac:	f083 0301 	eor.w	r3, r3, #1
   17fb0:	b2db      	uxtb	r3, r3
   17fb2:	2b00      	cmp	r3, #0
   17fb4:	d008      	beq.n	17fc8 <mp_binary_get_int+0x30>
        delta = -1;
   17fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17fba:	627b      	str	r3, [r7, #36]	; 0x24
        src += size - 1;
   17fbc:	68fb      	ldr	r3, [r7, #12]
   17fbe:	3b01      	subs	r3, #1
   17fc0:	687a      	ldr	r2, [r7, #4]
   17fc2:	4413      	add	r3, r2
   17fc4:	607b      	str	r3, [r7, #4]
   17fc6:	e001      	b.n	17fcc <mp_binary_get_int+0x34>
    } else {
        delta = 1;
   17fc8:	2301      	movs	r3, #1
   17fca:	627b      	str	r3, [r7, #36]	; 0x24
    }

    long long val = 0;
   17fcc:	f04f 0200 	mov.w	r2, #0
   17fd0:	f04f 0300 	mov.w	r3, #0
   17fd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (is_signed && *src & 0x80) {
   17fd8:	7afb      	ldrb	r3, [r7, #11]
   17fda:	2b00      	cmp	r3, #0
   17fdc:	d00a      	beq.n	17ff4 <mp_binary_get_int+0x5c>
   17fde:	687b      	ldr	r3, [r7, #4]
   17fe0:	781b      	ldrb	r3, [r3, #0]
   17fe2:	b25b      	sxtb	r3, r3
   17fe4:	2b00      	cmp	r3, #0
   17fe6:	da05      	bge.n	17ff4 <mp_binary_get_int+0x5c>
        val = -1;
   17fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ff0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    for (uint i = 0; i < size; i++) {
   17ff4:	2300      	movs	r3, #0
   17ff6:	617b      	str	r3, [r7, #20]
   17ff8:	e01b      	b.n	18032 <mp_binary_get_int+0x9a>
        val <<= 8;
   17ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   17ffe:	021d      	lsls	r5, r3, #8
   18000:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
   18004:	0214      	lsls	r4, r2, #8
   18006:	e9c7 4506 	strd	r4, r5, [r7, #24]
        val |= *src;
   1800a:	687b      	ldr	r3, [r7, #4]
   1800c:	781b      	ldrb	r3, [r3, #0]
   1800e:	b2da      	uxtb	r2, r3
   18010:	f04f 0300 	mov.w	r3, #0
   18014:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   18018:	ea42 0200 	orr.w	r2, r2, r0
   1801c:	ea43 0301 	orr.w	r3, r3, r1
   18020:	e9c7 2306 	strd	r2, r3, [r7, #24]
        src += delta;
   18024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18026:	687a      	ldr	r2, [r7, #4]
   18028:	4413      	add	r3, r2
   1802a:	607b      	str	r3, [r7, #4]
    for (uint i = 0; i < size; i++) {
   1802c:	697b      	ldr	r3, [r7, #20]
   1802e:	3301      	adds	r3, #1
   18030:	617b      	str	r3, [r7, #20]
   18032:	697a      	ldr	r2, [r7, #20]
   18034:	68fb      	ldr	r3, [r7, #12]
   18036:	429a      	cmp	r2, r3
   18038:	d3df      	bcc.n	17ffa <mp_binary_get_int+0x62>
    }

    return val;
   1803a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
   1803e:	4618      	mov	r0, r3
   18040:	4621      	mov	r1, r4
   18042:	372c      	adds	r7, #44	; 0x2c
   18044:	46bd      	mov	sp, r7
   18046:	bcb0      	pop	{r4, r5, r7}
   18048:	4770      	bx	lr

0001804a <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   1804a:	b590      	push	{r4, r7, lr}
   1804c:	b089      	sub	sp, #36	; 0x24
   1804e:	af00      	add	r7, sp, #0
   18050:	4603      	mov	r3, r0
   18052:	603a      	str	r2, [r7, #0]
   18054:	71fb      	strb	r3, [r7, #7]
   18056:	460b      	mov	r3, r1
   18058:	71bb      	strb	r3, [r7, #6]
    byte *p = *ptr;
   1805a:	683b      	ldr	r3, [r7, #0]
   1805c:	681b      	ldr	r3, [r3, #0]
   1805e:	61fb      	str	r3, [r7, #28]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   18060:	f107 0208 	add.w	r2, r7, #8
   18064:	79b9      	ldrb	r1, [r7, #6]
   18066:	79fb      	ldrb	r3, [r7, #7]
   18068:	4618      	mov	r0, r3
   1806a:	f7ff fc91 	bl	17990 <mp_binary_get_size>
   1806e:	61b8      	str	r0, [r7, #24]
    if (struct_type == '@') {
   18070:	79fb      	ldrb	r3, [r7, #7]
   18072:	2b40      	cmp	r3, #64	; 0x40
   18074:	d109      	bne.n	1808a <mp_binary_get_val+0x40>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   18076:	68ba      	ldr	r2, [r7, #8]
   18078:	69fb      	ldr	r3, [r7, #28]
   1807a:	4413      	add	r3, r2
   1807c:	1e5a      	subs	r2, r3, #1
   1807e:	68bb      	ldr	r3, [r7, #8]
   18080:	425b      	negs	r3, r3
   18082:	4013      	ands	r3, r2
   18084:	61fb      	str	r3, [r7, #28]
        #if MP_ENDIANNESS_LITTLE
        struct_type = '<';
   18086:	233c      	movs	r3, #60	; 0x3c
   18088:	71fb      	strb	r3, [r7, #7]
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   1808a:	69fa      	ldr	r2, [r7, #28]
   1808c:	69bb      	ldr	r3, [r7, #24]
   1808e:	441a      	add	r2, r3
   18090:	683b      	ldr	r3, [r7, #0]
   18092:	601a      	str	r2, [r3, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   18094:	79bb      	ldrb	r3, [r7, #6]
   18096:	2b5a      	cmp	r3, #90	; 0x5a
   18098:	bf8c      	ite	hi
   1809a:	2301      	movhi	r3, #1
   1809c:	2300      	movls	r3, #0
   1809e:	b2d9      	uxtb	r1, r3
   180a0:	79fb      	ldrb	r3, [r7, #7]
   180a2:	2b3e      	cmp	r3, #62	; 0x3e
   180a4:	bf0c      	ite	eq
   180a6:	2301      	moveq	r3, #1
   180a8:	2300      	movne	r3, #0
   180aa:	b2da      	uxtb	r2, r3
   180ac:	69fb      	ldr	r3, [r7, #28]
   180ae:	69b8      	ldr	r0, [r7, #24]
   180b0:	f7ff ff72 	bl	17f98 <mp_binary_get_int>
   180b4:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (val_type == 'O') {
   180b8:	79bb      	ldrb	r3, [r7, #6]
   180ba:	2b4f      	cmp	r3, #79	; 0x4f
   180bc:	d101      	bne.n	180c2 <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
   180be:	693b      	ldr	r3, [r7, #16]
   180c0:	e045      	b.n	1814e <mp_binary_get_val+0x104>
    } else if (val_type == 'S') {
   180c2:	79bb      	ldrb	r3, [r7, #6]
   180c4:	2b53      	cmp	r3, #83	; 0x53
   180c6:	d10b      	bne.n	180e0 <mp_binary_get_val+0x96>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
   180c8:	693b      	ldr	r3, [r7, #16]
   180ca:	60fb      	str	r3, [r7, #12]
        return mp_obj_new_str(s_val, strlen(s_val));
   180cc:	68f8      	ldr	r0, [r7, #12]
   180ce:	f004 fe39 	bl	1cd44 <strlen>
   180d2:	4603      	mov	r3, r0
   180d4:	4619      	mov	r1, r3
   180d6:	68f8      	ldr	r0, [r7, #12]
   180d8:	f7fd f886 	bl	151e8 <mp_obj_new_str>
   180dc:	4603      	mov	r3, r0
   180de:	e036      	b.n	1814e <mp_binary_get_val+0x104>
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   180e0:	79bb      	ldrb	r3, [r7, #6]
   180e2:	2b5a      	cmp	r3, #90	; 0x5a
   180e4:	d91c      	bls.n	18120 <mp_binary_get_val+0xd6>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   180e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   180ea:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   180ee:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   180f2:	db0f      	blt.n	18114 <mp_binary_get_val+0xca>
   180f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   180f8:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   180fc:	f04f 0200 	mov.w	r2, #0
   18100:	4299      	cmp	r1, r3
   18102:	eb72 0304 	sbcs.w	r3, r2, r4
   18106:	db05      	blt.n	18114 <mp_binary_get_val+0xca>
            return mp_obj_new_int((mp_int_t)val);
   18108:	693b      	ldr	r3, [r7, #16]
   1810a:	4618      	mov	r0, r3
   1810c:	f7f8 fb2e 	bl	1076c <mp_obj_new_int>
   18110:	4603      	mov	r3, r0
   18112:	e01c      	b.n	1814e <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ll(val);
   18114:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   18118:	f7f8 faf2 	bl	10700 <mp_obj_new_int_from_ll>
   1811c:	4603      	mov	r3, r0
   1811e:	e016      	b.n	1814e <mp_binary_get_val+0x104>
        }
    } else {
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   18120:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18124:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   18128:	f04f 0200 	mov.w	r2, #0
   1812c:	42a2      	cmp	r2, r4
   1812e:	bf08      	it	eq
   18130:	4299      	cmpeq	r1, r3
   18132:	d305      	bcc.n	18140 <mp_binary_get_val+0xf6>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   18134:	693b      	ldr	r3, [r7, #16]
   18136:	4618      	mov	r0, r3
   18138:	f7f8 fafe 	bl	10738 <mp_obj_new_int_from_uint>
   1813c:	4603      	mov	r3, r0
   1813e:	e006      	b.n	1814e <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ull(val);
   18140:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18144:	4618      	mov	r0, r3
   18146:	4621      	mov	r1, r4
   18148:	f7f8 fae8 	bl	1071c <mp_obj_new_int_from_ull>
   1814c:	4603      	mov	r3, r0
        }
    }
}
   1814e:	4618      	mov	r0, r3
   18150:	3724      	adds	r7, #36	; 0x24
   18152:	46bd      	mov	sp, r7
   18154:	bd90      	pop	{r4, r7, pc}

00018156 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   18156:	b580      	push	{r7, lr}
   18158:	b086      	sub	sp, #24
   1815a:	af00      	add	r7, sp, #0
   1815c:	60f8      	str	r0, [r7, #12]
   1815e:	607a      	str	r2, [r7, #4]
   18160:	603b      	str	r3, [r7, #0]
   18162:	460b      	mov	r3, r1
   18164:	72fb      	strb	r3, [r7, #11]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   18166:	7afb      	ldrb	r3, [r7, #11]
   18168:	f083 0301 	eor.w	r3, r3, #1
   1816c:	b2db      	uxtb	r3, r3
   1816e:	2b00      	cmp	r3, #0
   18170:	d006      	beq.n	18180 <mp_binary_set_int+0x2a>
        memcpy(dest, &val, val_sz);
   18172:	463b      	mov	r3, r7
   18174:	68fa      	ldr	r2, [r7, #12]
   18176:	4619      	mov	r1, r3
   18178:	6878      	ldr	r0, [r7, #4]
   1817a:	f004 fcad 	bl	1cad8 <memcpy>
        }
        while (val_sz--) {
            *dest++ = *--src;
        }
    }
}
   1817e:	e012      	b.n	181a6 <mp_binary_set_int+0x50>
            src = (const byte*)&val + val_sz;
   18180:	463a      	mov	r2, r7
   18182:	68fb      	ldr	r3, [r7, #12]
   18184:	4413      	add	r3, r2
   18186:	617b      	str	r3, [r7, #20]
        while (val_sz--) {
   18188:	e008      	b.n	1819c <mp_binary_set_int+0x46>
            *dest++ = *--src;
   1818a:	687b      	ldr	r3, [r7, #4]
   1818c:	1c5a      	adds	r2, r3, #1
   1818e:	607a      	str	r2, [r7, #4]
   18190:	697a      	ldr	r2, [r7, #20]
   18192:	3a01      	subs	r2, #1
   18194:	617a      	str	r2, [r7, #20]
   18196:	697a      	ldr	r2, [r7, #20]
   18198:	7812      	ldrb	r2, [r2, #0]
   1819a:	701a      	strb	r2, [r3, #0]
        while (val_sz--) {
   1819c:	68fb      	ldr	r3, [r7, #12]
   1819e:	1e5a      	subs	r2, r3, #1
   181a0:	60fa      	str	r2, [r7, #12]
   181a2:	2b00      	cmp	r3, #0
   181a4:	d1f1      	bne.n	1818a <mp_binary_set_int+0x34>
}
   181a6:	bf00      	nop
   181a8:	3718      	adds	r7, #24
   181aa:	46bd      	mov	sp, r7
   181ac:	bd80      	pop	{r7, pc}

000181ae <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   181ae:	b580      	push	{r7, lr}
   181b0:	b08a      	sub	sp, #40	; 0x28
   181b2:	af00      	add	r7, sp, #0
   181b4:	60ba      	str	r2, [r7, #8]
   181b6:	607b      	str	r3, [r7, #4]
   181b8:	4603      	mov	r3, r0
   181ba:	73fb      	strb	r3, [r7, #15]
   181bc:	460b      	mov	r3, r1
   181be:	73bb      	strb	r3, [r7, #14]
    byte *p = *ptr;
   181c0:	687b      	ldr	r3, [r7, #4]
   181c2:	681b      	ldr	r3, [r3, #0]
   181c4:	627b      	str	r3, [r7, #36]	; 0x24
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   181c6:	f107 0214 	add.w	r2, r7, #20
   181ca:	7bb9      	ldrb	r1, [r7, #14]
   181cc:	7bfb      	ldrb	r3, [r7, #15]
   181ce:	4618      	mov	r0, r3
   181d0:	f7ff fbde 	bl	17990 <mp_binary_get_size>
   181d4:	61f8      	str	r0, [r7, #28]
    if (struct_type == '@') {
   181d6:	7bfb      	ldrb	r3, [r7, #15]
   181d8:	2b40      	cmp	r3, #64	; 0x40
   181da:	d109      	bne.n	181f0 <mp_binary_set_val+0x42>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   181dc:	697a      	ldr	r2, [r7, #20]
   181de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   181e0:	4413      	add	r3, r2
   181e2:	1e5a      	subs	r2, r3, #1
   181e4:	697b      	ldr	r3, [r7, #20]
   181e6:	425b      	negs	r3, r3
   181e8:	4013      	ands	r3, r2
   181ea:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_ENDIANNESS_LITTLE) {
            struct_type = '<';
   181ec:	233c      	movs	r3, #60	; 0x3c
   181ee:	73fb      	strb	r3, [r7, #15]
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   181f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   181f2:	69fb      	ldr	r3, [r7, #28]
   181f4:	441a      	add	r2, r3
   181f6:	687b      	ldr	r3, [r7, #4]
   181f8:	601a      	str	r2, [r3, #0]

    mp_uint_t val;
    switch (val_type) {
   181fa:	7bbb      	ldrb	r3, [r7, #14]
   181fc:	2b4f      	cmp	r3, #79	; 0x4f
   181fe:	d102      	bne.n	18206 <mp_binary_set_val+0x58>
        case 'O':
            val = (mp_uint_t)val_in;
   18200:	68bb      	ldr	r3, [r7, #8]
   18202:	623b      	str	r3, [r7, #32]
            break;
   18204:	e01e      	b.n	18244 <mp_binary_set_val+0x96>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   18206:	68b8      	ldr	r0, [r7, #8]
   18208:	f7f5 fc2e 	bl	da68 <mp_obj_get_int>
   1820c:	4603      	mov	r3, r0
   1820e:	623b      	str	r3, [r7, #32]
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   18210:	69fb      	ldr	r3, [r7, #28]
   18212:	2b04      	cmp	r3, #4
   18214:	d916      	bls.n	18244 <mp_binary_set_val+0x96>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   18216:	7bbb      	ldrb	r3, [r7, #14]
   18218:	2b5a      	cmp	r3, #90	; 0x5a
   1821a:	d904      	bls.n	18226 <mp_binary_set_val+0x78>
   1821c:	6a3b      	ldr	r3, [r7, #32]
   1821e:	2b00      	cmp	r3, #0
   18220:	da01      	bge.n	18226 <mp_binary_set_val+0x78>
   18222:	23ff      	movs	r3, #255	; 0xff
   18224:	e000      	b.n	18228 <mp_binary_set_val+0x7a>
   18226:	2300      	movs	r3, #0
   18228:	61bb      	str	r3, [r7, #24]
                    memset(p, c, size);
   1822a:	69fa      	ldr	r2, [r7, #28]
   1822c:	69b9      	ldr	r1, [r7, #24]
   1822e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18230:	f004 fcec 	bl	1cc0c <memset>
                    if (struct_type == '>') {
   18234:	7bfb      	ldrb	r3, [r7, #15]
   18236:	2b3e      	cmp	r3, #62	; 0x3e
   18238:	d104      	bne.n	18244 <mp_binary_set_val+0x96>
                        p += size - sizeof(val);
   1823a:	69fb      	ldr	r3, [r7, #28]
   1823c:	3b04      	subs	r3, #4
   1823e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18240:	4413      	add	r3, r2
   18242:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   18244:	69fb      	ldr	r3, [r7, #28]
   18246:	2b04      	cmp	r3, #4
   18248:	bf28      	it	cs
   1824a:	2304      	movcs	r3, #4
   1824c:	4618      	mov	r0, r3
   1824e:	7bfb      	ldrb	r3, [r7, #15]
   18250:	2b3e      	cmp	r3, #62	; 0x3e
   18252:	bf0c      	ite	eq
   18254:	2301      	moveq	r3, #1
   18256:	2300      	movne	r3, #0
   18258:	b2d9      	uxtb	r1, r3
   1825a:	6a3b      	ldr	r3, [r7, #32]
   1825c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1825e:	f7ff ff7a 	bl	18156 <mp_binary_set_int>
}
   18262:	bf00      	nop
   18264:	3728      	adds	r7, #40	; 0x28
   18266:	46bd      	mov	sp, r7
   18268:	bd80      	pop	{r7, pc}

0001826a <mp_binary_set_val_array>:

void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   1826a:	b580      	push	{r7, lr}
   1826c:	b084      	sub	sp, #16
   1826e:	af00      	add	r7, sp, #0
   18270:	60b9      	str	r1, [r7, #8]
   18272:	607a      	str	r2, [r7, #4]
   18274:	603b      	str	r3, [r7, #0]
   18276:	4603      	mov	r3, r0
   18278:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   1827a:	7bfb      	ldrb	r3, [r7, #15]
   1827c:	2b4f      	cmp	r3, #79	; 0x4f
   1827e:	d106      	bne.n	1828e <mp_binary_set_val_array+0x24>
            ((double*)p)[index] = mp_obj_get_float(val_in);
            break;
#endif
        // Extension to CPython: array of objects
        case 'O':
            ((mp_obj_t*)p)[index] = val_in;
   18280:	687b      	ldr	r3, [r7, #4]
   18282:	009b      	lsls	r3, r3, #2
   18284:	68ba      	ldr	r2, [r7, #8]
   18286:	4413      	add	r3, r2
   18288:	683a      	ldr	r2, [r7, #0]
   1828a:	601a      	str	r2, [r3, #0]
            break;
   1828c:	e008      	b.n	182a0 <mp_binary_set_val_array+0x36>
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
                    size, (uint8_t*)p + index * size);
                return;
            }
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   1828e:	6838      	ldr	r0, [r7, #0]
   18290:	f7f5 fbea 	bl	da68 <mp_obj_get_int>
   18294:	4603      	mov	r3, r0
   18296:	7bf8      	ldrb	r0, [r7, #15]
   18298:	687a      	ldr	r2, [r7, #4]
   1829a:	68b9      	ldr	r1, [r7, #8]
   1829c:	f000 f804 	bl	182a8 <mp_binary_set_val_array_from_int>
    }
}
   182a0:	bf00      	nop
   182a2:	3710      	adds	r7, #16
   182a4:	46bd      	mov	sp, r7
   182a6:	bd80      	pop	{r7, pc}

000182a8 <mp_binary_set_val_array_from_int>:

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   182a8:	b480      	push	{r7}
   182aa:	b085      	sub	sp, #20
   182ac:	af00      	add	r7, sp, #0
   182ae:	60b9      	str	r1, [r7, #8]
   182b0:	607a      	str	r2, [r7, #4]
   182b2:	603b      	str	r3, [r7, #0]
   182b4:	4603      	mov	r3, r0
   182b6:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   182b8:	7bfb      	ldrb	r3, [r7, #15]
   182ba:	2b4c      	cmp	r3, #76	; 0x4c
   182bc:	d04e      	beq.n	1835c <mp_binary_set_val_array_from_int+0xb4>
   182be:	2b4c      	cmp	r3, #76	; 0x4c
   182c0:	dc0b      	bgt.n	182da <mp_binary_set_val_array_from_int+0x32>
   182c2:	2b42      	cmp	r3, #66	; 0x42
   182c4:	d01e      	beq.n	18304 <mp_binary_set_val_array_from_int+0x5c>
   182c6:	2b42      	cmp	r3, #66	; 0x42
   182c8:	dc02      	bgt.n	182d0 <mp_binary_set_val_array_from_int+0x28>
   182ca:	2b01      	cmp	r3, #1
   182cc:	d01a      	beq.n	18304 <mp_binary_set_val_array_from_int+0x5c>
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   182ce:	e053      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   182d0:	2b48      	cmp	r3, #72	; 0x48
   182d2:	d026      	beq.n	18322 <mp_binary_set_val_array_from_int+0x7a>
   182d4:	2b49      	cmp	r3, #73	; 0x49
   182d6:	d033      	beq.n	18340 <mp_binary_set_val_array_from_int+0x98>
}
   182d8:	e04e      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   182da:	2b68      	cmp	r3, #104	; 0x68
   182dc:	d019      	beq.n	18312 <mp_binary_set_val_array_from_int+0x6a>
   182de:	2b68      	cmp	r3, #104	; 0x68
   182e0:	dc04      	bgt.n	182ec <mp_binary_set_val_array_from_int+0x44>
   182e2:	2b50      	cmp	r3, #80	; 0x50
   182e4:	d041      	beq.n	1836a <mp_binary_set_val_array_from_int+0xc2>
   182e6:	2b62      	cmp	r3, #98	; 0x62
   182e8:	d005      	beq.n	182f6 <mp_binary_set_val_array_from_int+0x4e>
}
   182ea:	e045      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   182ec:	2b69      	cmp	r3, #105	; 0x69
   182ee:	d020      	beq.n	18332 <mp_binary_set_val_array_from_int+0x8a>
   182f0:	2b6c      	cmp	r3, #108	; 0x6c
   182f2:	d02c      	beq.n	1834e <mp_binary_set_val_array_from_int+0xa6>
}
   182f4:	e040      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((signed char*)p)[index] = val;
   182f6:	68ba      	ldr	r2, [r7, #8]
   182f8:	687b      	ldr	r3, [r7, #4]
   182fa:	4413      	add	r3, r2
   182fc:	683a      	ldr	r2, [r7, #0]
   182fe:	b252      	sxtb	r2, r2
   18300:	701a      	strb	r2, [r3, #0]
            break;
   18302:	e039      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned char*)p)[index] = val;
   18304:	68ba      	ldr	r2, [r7, #8]
   18306:	687b      	ldr	r3, [r7, #4]
   18308:	4413      	add	r3, r2
   1830a:	683a      	ldr	r2, [r7, #0]
   1830c:	b2d2      	uxtb	r2, r2
   1830e:	701a      	strb	r2, [r3, #0]
            break;
   18310:	e032      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((short*)p)[index] = val;
   18312:	687b      	ldr	r3, [r7, #4]
   18314:	005b      	lsls	r3, r3, #1
   18316:	68ba      	ldr	r2, [r7, #8]
   18318:	4413      	add	r3, r2
   1831a:	683a      	ldr	r2, [r7, #0]
   1831c:	b212      	sxth	r2, r2
   1831e:	801a      	strh	r2, [r3, #0]
            break;
   18320:	e02a      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned short*)p)[index] = val;
   18322:	687b      	ldr	r3, [r7, #4]
   18324:	005b      	lsls	r3, r3, #1
   18326:	68ba      	ldr	r2, [r7, #8]
   18328:	4413      	add	r3, r2
   1832a:	683a      	ldr	r2, [r7, #0]
   1832c:	b292      	uxth	r2, r2
   1832e:	801a      	strh	r2, [r3, #0]
            break;
   18330:	e022      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((int*)p)[index] = val;
   18332:	687b      	ldr	r3, [r7, #4]
   18334:	009b      	lsls	r3, r3, #2
   18336:	68ba      	ldr	r2, [r7, #8]
   18338:	4413      	add	r3, r2
   1833a:	683a      	ldr	r2, [r7, #0]
   1833c:	601a      	str	r2, [r3, #0]
            break;
   1833e:	e01b      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned int*)p)[index] = val;
   18340:	687b      	ldr	r3, [r7, #4]
   18342:	009b      	lsls	r3, r3, #2
   18344:	68ba      	ldr	r2, [r7, #8]
   18346:	4413      	add	r3, r2
   18348:	683a      	ldr	r2, [r7, #0]
   1834a:	601a      	str	r2, [r3, #0]
            break;
   1834c:	e014      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((long*)p)[index] = val;
   1834e:	687b      	ldr	r3, [r7, #4]
   18350:	009b      	lsls	r3, r3, #2
   18352:	68ba      	ldr	r2, [r7, #8]
   18354:	4413      	add	r3, r2
   18356:	683a      	ldr	r2, [r7, #0]
   18358:	601a      	str	r2, [r3, #0]
            break;
   1835a:	e00d      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned long*)p)[index] = val;
   1835c:	687b      	ldr	r3, [r7, #4]
   1835e:	009b      	lsls	r3, r3, #2
   18360:	68ba      	ldr	r2, [r7, #8]
   18362:	4413      	add	r3, r2
   18364:	683a      	ldr	r2, [r7, #0]
   18366:	601a      	str	r2, [r3, #0]
            break;
   18368:	e006      	b.n	18378 <mp_binary_set_val_array_from_int+0xd0>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   1836a:	687b      	ldr	r3, [r7, #4]
   1836c:	009b      	lsls	r3, r3, #2
   1836e:	68ba      	ldr	r2, [r7, #8]
   18370:	4413      	add	r3, r2
   18372:	683a      	ldr	r2, [r7, #0]
   18374:	601a      	str	r2, [r3, #0]
            break;
   18376:	bf00      	nop
}
   18378:	bf00      	nop
   1837a:	3714      	adds	r7, #20
   1837c:	46bd      	mov	sp, r7
   1837e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18382:	4770      	bx	lr

00018384 <vstr_str>:
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
   18384:	b480      	push	{r7}
   18386:	b083      	sub	sp, #12
   18388:	af00      	add	r7, sp, #0
   1838a:	6078      	str	r0, [r7, #4]
   1838c:	687b      	ldr	r3, [r7, #4]
   1838e:	689b      	ldr	r3, [r3, #8]
   18390:	4618      	mov	r0, r3
   18392:	370c      	adds	r7, #12
   18394:	46bd      	mov	sp, r7
   18396:	f85d 7b04 	ldr.w	r7, [sp], #4
   1839a:	4770      	bx	lr

0001839c <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1839c:	b480      	push	{r7}
   1839e:	b083      	sub	sp, #12
   183a0:	af00      	add	r7, sp, #0
   183a2:	6078      	str	r0, [r7, #4]
   183a4:	687b      	ldr	r3, [r7, #4]
   183a6:	685b      	ldr	r3, [r3, #4]
   183a8:	4618      	mov	r0, r3
   183aa:	370c      	adds	r7, #12
   183ac:	46bd      	mov	sp, r7
   183ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   183b2:	4770      	bx	lr

000183b4 <mp_obj_module_get_globals>:
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
   183b4:	b480      	push	{r7}
   183b6:	b083      	sub	sp, #12
   183b8:	af00      	add	r7, sp, #0
   183ba:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
   183bc:	687b      	ldr	r3, [r7, #4]
   183be:	685b      	ldr	r3, [r3, #4]
}
   183c0:	4618      	mov	r0, r3
   183c2:	370c      	adds	r7, #12
   183c4:	46bd      	mov	sp, r7
   183c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   183ca:	4770      	bx	lr

000183cc <mp_local_free>:
static inline void mp_local_free(void *ptr) {
   183cc:	b480      	push	{r7}
   183ce:	b083      	sub	sp, #12
   183d0:	af00      	add	r7, sp, #0
   183d2:	6078      	str	r0, [r7, #4]
}
   183d4:	bf00      	nop
   183d6:	370c      	adds	r7, #12
   183d8:	46bd      	mov	sp, r7
   183da:	f85d 7b04 	ldr.w	r7, [sp], #4
   183de:	4770      	bx	lr

000183e0 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   183e0:	b480      	push	{r7}
   183e2:	af00      	add	r7, sp, #0
   183e4:	4b03      	ldr	r3, [pc, #12]	; (183f4 <mp_locals_get+0x14>)
   183e6:	685b      	ldr	r3, [r3, #4]
   183e8:	4618      	mov	r0, r3
   183ea:	46bd      	mov	sp, r7
   183ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   183f0:	4770      	bx	lr
   183f2:	bf00      	nop
   183f4:	200012f0 	.word	0x200012f0

000183f8 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   183f8:	b480      	push	{r7}
   183fa:	b083      	sub	sp, #12
   183fc:	af00      	add	r7, sp, #0
   183fe:	6078      	str	r0, [r7, #4]
   18400:	4a04      	ldr	r2, [pc, #16]	; (18414 <mp_locals_set+0x1c>)
   18402:	687b      	ldr	r3, [r7, #4]
   18404:	6053      	str	r3, [r2, #4]
   18406:	bf00      	nop
   18408:	370c      	adds	r7, #12
   1840a:	46bd      	mov	sp, r7
   1840c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18410:	4770      	bx	lr
   18412:	bf00      	nop
   18414:	200012f0 	.word	0x200012f0

00018418 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18418:	b480      	push	{r7}
   1841a:	af00      	add	r7, sp, #0
   1841c:	4b03      	ldr	r3, [pc, #12]	; (1842c <mp_globals_get+0x14>)
   1841e:	689b      	ldr	r3, [r3, #8]
   18420:	4618      	mov	r0, r3
   18422:	46bd      	mov	sp, r7
   18424:	f85d 7b04 	ldr.w	r7, [sp], #4
   18428:	4770      	bx	lr
   1842a:	bf00      	nop
   1842c:	200012f0 	.word	0x200012f0

00018430 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   18430:	b480      	push	{r7}
   18432:	b083      	sub	sp, #12
   18434:	af00      	add	r7, sp, #0
   18436:	6078      	str	r0, [r7, #4]
   18438:	4a04      	ldr	r2, [pc, #16]	; (1844c <mp_globals_set+0x1c>)
   1843a:	687b      	ldr	r3, [r7, #4]
   1843c:	6093      	str	r3, [r2, #8]
   1843e:	bf00      	nop
   18440:	370c      	adds	r7, #12
   18442:	46bd      	mov	sp, r7
   18444:	f85d 7b04 	ldr.w	r7, [sp], #4
   18448:	4770      	bx	lr
   1844a:	bf00      	nop
   1844c:	200012f0 	.word	0x200012f0

00018450 <mp_obj_is_package>:

#if MICROPY_ENABLE_EXTERNAL_IMPORT

#define PATH_SEP_CHAR '/'

bool mp_obj_is_package(mp_obj_t module) {
   18450:	b580      	push	{r7, lr}
   18452:	b084      	sub	sp, #16
   18454:	af00      	add	r7, sp, #0
   18456:	6078      	str	r0, [r7, #4]
    mp_obj_t dest[2];
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   18458:	f107 0308 	add.w	r3, r7, #8
   1845c:	461a      	mov	r2, r3
   1845e:	211f      	movs	r1, #31
   18460:	6878      	ldr	r0, [r7, #4]
   18462:	f7f4 f8ed 	bl	c640 <mp_load_method_maybe>
    return dest[0] != MP_OBJ_NULL;
   18466:	68bb      	ldr	r3, [r7, #8]
   18468:	2b00      	cmp	r3, #0
   1846a:	bf14      	ite	ne
   1846c:	2301      	movne	r3, #1
   1846e:	2300      	moveq	r3, #0
   18470:	b2db      	uxtb	r3, r3
}
   18472:	4618      	mov	r0, r3
   18474:	3710      	adds	r7, #16
   18476:	46bd      	mov	sp, r7
   18478:	bd80      	pop	{r7, pc}

0001847a <mp_import_stat_any>:

// Stat either frozen or normal module by a given path
// (whatever is available, if at all).
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   1847a:	b580      	push	{r7, lr}
   1847c:	b084      	sub	sp, #16
   1847e:	af00      	add	r7, sp, #0
   18480:	6078      	str	r0, [r7, #4]
    #if MICROPY_MODULE_FROZEN
    mp_import_stat_t st = mp_frozen_stat(path);
   18482:	6878      	ldr	r0, [r7, #4]
   18484:	f002 fe6d 	bl	1b162 <mp_frozen_stat>
   18488:	60f8      	str	r0, [r7, #12]
    if (st != MP_IMPORT_STAT_NO_EXIST) {
   1848a:	68fb      	ldr	r3, [r7, #12]
   1848c:	2b00      	cmp	r3, #0
   1848e:	d001      	beq.n	18494 <mp_import_stat_any+0x1a>
        return st;
   18490:	68fb      	ldr	r3, [r7, #12]
   18492:	e003      	b.n	1849c <mp_import_stat_any+0x22>
    }
    #endif
    return mp_import_stat(path);
   18494:	6878      	ldr	r0, [r7, #4]
   18496:	f002 ffce 	bl	1b436 <mp_import_stat>
   1849a:	4603      	mov	r3, r0
}
   1849c:	4618      	mov	r0, r3
   1849e:	3710      	adds	r7, #16
   184a0:	46bd      	mov	sp, r7
   184a2:	bd80      	pop	{r7, pc}

000184a4 <stat_file_py_or_mpy>:

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   184a4:	b580      	push	{r7, lr}
   184a6:	b084      	sub	sp, #16
   184a8:	af00      	add	r7, sp, #0
   184aa:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   184ac:	6878      	ldr	r0, [r7, #4]
   184ae:	f7e9 f888 	bl	15c2 <vstr_null_terminated_str>
   184b2:	4603      	mov	r3, r0
   184b4:	4618      	mov	r0, r3
   184b6:	f7ff ffe0 	bl	1847a <mp_import_stat_any>
   184ba:	60f8      	str	r0, [r7, #12]
    if (stat == MP_IMPORT_STAT_FILE) {
   184bc:	68fb      	ldr	r3, [r7, #12]
   184be:	2b02      	cmp	r3, #2
   184c0:	d101      	bne.n	184c6 <stat_file_py_or_mpy+0x22>
        return stat;
   184c2:	68fb      	ldr	r3, [r7, #12]
   184c4:	e000      	b.n	184c8 <stat_file_py_or_mpy+0x24>
    if (stat == MP_IMPORT_STAT_FILE) {
        return stat;
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   184c6:	2300      	movs	r3, #0
}
   184c8:	4618      	mov	r0, r3
   184ca:	3710      	adds	r7, #16
   184cc:	46bd      	mov	sp, r7
   184ce:	bd80      	pop	{r7, pc}

000184d0 <stat_dir_or_file>:

STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   184d0:	b580      	push	{r7, lr}
   184d2:	b084      	sub	sp, #16
   184d4:	af00      	add	r7, sp, #0
   184d6:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   184d8:	6878      	ldr	r0, [r7, #4]
   184da:	f7e9 f872 	bl	15c2 <vstr_null_terminated_str>
   184de:	4603      	mov	r3, r0
   184e0:	4618      	mov	r0, r3
   184e2:	f7ff ffca 	bl	1847a <mp_import_stat_any>
   184e6:	60f8      	str	r0, [r7, #12]
    DEBUG_printf("stat %s: %d\n", vstr_str(path), stat);
    if (stat == MP_IMPORT_STAT_DIR) {
   184e8:	68fb      	ldr	r3, [r7, #12]
   184ea:	2b01      	cmp	r3, #1
   184ec:	d101      	bne.n	184f2 <stat_dir_or_file+0x22>
        return stat;
   184ee:	68fb      	ldr	r3, [r7, #12]
   184f0:	e007      	b.n	18502 <stat_dir_or_file+0x32>
    }

    // not a directory, add .py and try as a file
    vstr_add_str(path, ".py");
   184f2:	4906      	ldr	r1, [pc, #24]	; (1850c <stat_dir_or_file+0x3c>)
   184f4:	6878      	ldr	r0, [r7, #4]
   184f6:	f7e9 f8a0 	bl	163a <vstr_add_str>
    return stat_file_py_or_mpy(path);
   184fa:	6878      	ldr	r0, [r7, #4]
   184fc:	f7ff ffd2 	bl	184a4 <stat_file_py_or_mpy>
   18500:	4603      	mov	r3, r0
}
   18502:	4618      	mov	r0, r3
   18504:	3710      	adds	r7, #16
   18506:	46bd      	mov	sp, r7
   18508:	bd80      	pop	{r7, pc}
   1850a:	bf00      	nop
   1850c:	00024154 	.word	0x00024154

00018510 <find_file>:

STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   18510:	b580      	push	{r7, lr}
   18512:	b084      	sub	sp, #16
   18514:	af00      	add	r7, sp, #0
   18516:	60f8      	str	r0, [r7, #12]
   18518:	60b9      	str	r1, [r7, #8]
   1851a:	607a      	str	r2, [r7, #4]
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);

    if (path_num == 0) {
#endif
        // mp_sys_path is empty, so just use the given file name
        vstr_add_strn(dest, file_str, file_len);
   1851c:	68ba      	ldr	r2, [r7, #8]
   1851e:	68f9      	ldr	r1, [r7, #12]
   18520:	6878      	ldr	r0, [r7, #4]
   18522:	f7e9 f89c 	bl	165e <vstr_add_strn>
        return stat_dir_or_file(dest);
   18526:	6878      	ldr	r0, [r7, #4]
   18528:	f7ff ffd2 	bl	184d0 <stat_dir_or_file>
   1852c:	4603      	mov	r3, r0

        // could not find a directory or file
        return MP_IMPORT_STAT_NO_EXIST;
    }
#endif
}
   1852e:	4618      	mov	r0, r3
   18530:	3710      	adds	r7, #16
   18532:	46bd      	mov	sp, r7
   18534:	bd80      	pop	{r7, pc}

00018536 <do_load_from_lexer>:

#if MICROPY_ENABLE_COMPILER
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   18536:	b580      	push	{r7, lr}
   18538:	b084      	sub	sp, #16
   1853a:	af00      	add	r7, sp, #0
   1853c:	6078      	str	r0, [r7, #4]
   1853e:	6039      	str	r1, [r7, #0]
    qstr source_name = lex->source_name;
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   18540:	6878      	ldr	r0, [r7, #4]
   18542:	f7ff ff37 	bl	183b4 <mp_obj_module_get_globals>
   18546:	60f8      	str	r0, [r7, #12]
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   18548:	68fb      	ldr	r3, [r7, #12]
   1854a:	68fa      	ldr	r2, [r7, #12]
   1854c:	2101      	movs	r1, #1
   1854e:	6838      	ldr	r0, [r7, #0]
   18550:	f7f4 fbfc 	bl	cd4c <mp_parse_compile_execute>
}
   18554:	bf00      	nop
   18556:	3710      	adds	r7, #16
   18558:	46bd      	mov	sp, r7
   1855a:	bd80      	pop	{r7, pc}

0001855c <do_execute_raw_code>:
#endif

#if MICROPY_PERSISTENT_CODE_LOAD || MICROPY_MODULE_FROZEN_MPY
STATIC void do_execute_raw_code(mp_obj_t module_obj, mp_raw_code_t *raw_code) {
   1855c:	b580      	push	{r7, lr}
   1855e:	b092      	sub	sp, #72	; 0x48
   18560:	af00      	add	r7, sp, #0
   18562:	6078      	str	r0, [r7, #4]
   18564:	6039      	str	r1, [r7, #0]
    //qstr source_name = lex->source_name;
    //mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   18566:	6878      	ldr	r0, [r7, #4]
   18568:	f7ff ff24 	bl	183b4 <mp_obj_module_get_globals>
   1856c:	6478      	str	r0, [r7, #68]	; 0x44

    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
   1856e:	f7ff ff53 	bl	18418 <mp_globals_get>
   18572:	4603      	mov	r3, r0
   18574:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
   18576:	f7ff ff33 	bl	183e0 <mp_locals_get>
   1857a:	4603      	mov	r3, r0
   1857c:	63bb      	str	r3, [r7, #56]	; 0x38

    // set new context
    mp_globals_set(mod_globals);
   1857e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   18580:	f7ff ff56 	bl	18430 <mp_globals_set>
    mp_locals_set(mod_globals);
   18584:	6c78      	ldr	r0, [r7, #68]	; 0x44
   18586:	f7ff ff37 	bl	183f8 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1858a:	f107 0308 	add.w	r3, r7, #8
   1858e:	4618      	mov	r0, r3
   18590:	f7e7 fe94 	bl	2bc <nlr_push>
   18594:	4603      	mov	r3, r0
   18596:	2b00      	cmp	r3, #0
   18598:	d113      	bne.n	185c2 <do_execute_raw_code+0x66>
        mp_obj_t module_fun = mp_make_function_from_raw_code(raw_code, MP_OBJ_NULL, MP_OBJ_NULL);
   1859a:	2200      	movs	r2, #0
   1859c:	2100      	movs	r1, #0
   1859e:	6838      	ldr	r0, [r7, #0]
   185a0:	f7f2 fdc3 	bl	b12a <mp_make_function_from_raw_code>
   185a4:	6438      	str	r0, [r7, #64]	; 0x40
        mp_call_function_0(module_fun);
   185a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
   185a8:	f7f3 fb7c 	bl	bca4 <mp_call_function_0>

        // finish nlr block, restore context
        nlr_pop();
   185ac:	f7e7 fe74 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
   185b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185b2:	4618      	mov	r0, r3
   185b4:	f7ff ff3c 	bl	18430 <mp_globals_set>
        mp_locals_set(old_locals);
   185b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   185ba:	4618      	mov	r0, r3
   185bc:	f7ff ff1c 	bl	183f8 <mp_locals_set>
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
        nlr_jump(nlr.ret_val);
    }
}
   185c0:	e00b      	b.n	185da <do_execute_raw_code+0x7e>
        mp_globals_set(old_globals);
   185c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185c4:	4618      	mov	r0, r3
   185c6:	f7ff ff33 	bl	18430 <mp_globals_set>
        mp_locals_set(old_locals);
   185ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   185cc:	4618      	mov	r0, r3
   185ce:	f7ff ff13 	bl	183f8 <mp_locals_set>
        nlr_jump(nlr.ret_val);
   185d2:	68fb      	ldr	r3, [r7, #12]
   185d4:	4618      	mov	r0, r3
   185d6:	f7e7 fe83 	bl	2e0 <nlr_jump>
}
   185da:	3748      	adds	r7, #72	; 0x48
   185dc:	46bd      	mov	sp, r7
   185de:	bd80      	pop	{r7, pc}

000185e0 <do_load>:
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   185e0:	b580      	push	{r7, lr}
   185e2:	b086      	sub	sp, #24
   185e4:	af00      	add	r7, sp, #0
   185e6:	6078      	str	r0, [r7, #4]
   185e8:	6039      	str	r1, [r7, #0]
    #if MICROPY_MODULE_FROZEN || MICROPY_PERSISTENT_CODE_LOAD || MICROPY_ENABLE_COMPILER
    char *file_str = vstr_null_terminated_str(file);
   185ea:	6838      	ldr	r0, [r7, #0]
   185ec:	f7e8 ffe9 	bl	15c2 <vstr_null_terminated_str>
   185f0:	6178      	str	r0, [r7, #20]

    // If we support frozen modules (either as str or mpy) then try to find the
    // requested filename in the list of frozen module filenames.
    #if MICROPY_MODULE_FROZEN
    void *modref;
    int frozen_type = mp_find_frozen_module(file_str, file->len, &modref);
   185f2:	683b      	ldr	r3, [r7, #0]
   185f4:	685b      	ldr	r3, [r3, #4]
   185f6:	f107 0208 	add.w	r2, r7, #8
   185fa:	4619      	mov	r1, r3
   185fc:	6978      	ldr	r0, [r7, #20]
   185fe:	f002 fdc5 	bl	1b18c <mp_find_frozen_module>
   18602:	6138      	str	r0, [r7, #16]
    #endif

    // If we support frozen mpy modules and we found a corresponding file (and
    // its data) in the list of frozen files, execute it.
    #if MICROPY_MODULE_FROZEN_MPY
    if (frozen_type == MP_FROZEN_MPY) {
   18604:	693b      	ldr	r3, [r7, #16]
   18606:	2b02      	cmp	r3, #2
   18608:	d105      	bne.n	18616 <do_load+0x36>
        do_execute_raw_code(module_obj, modref);
   1860a:	68bb      	ldr	r3, [r7, #8]
   1860c:	4619      	mov	r1, r3
   1860e:	6878      	ldr	r0, [r7, #4]
   18610:	f7ff ffa4 	bl	1855c <do_execute_raw_code>
        return;
   18614:	e008      	b.n	18628 <do_load+0x48>
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   18616:	6978      	ldr	r0, [r7, #20]
   18618:	f002 ff06 	bl	1b428 <mp_lexer_new_from_file>
   1861c:	60f8      	str	r0, [r7, #12]
        do_load_from_lexer(module_obj, lex);
   1861e:	68f9      	ldr	r1, [r7, #12]
   18620:	6878      	ldr	r0, [r7, #4]
   18622:	f7ff ff88 	bl	18536 <do_load_from_lexer>
        return;
   18626:	bf00      	nop
    #else

    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}
   18628:	3718      	adds	r7, #24
   1862a:	46bd      	mov	sp, r7
   1862c:	bd80      	pop	{r7, pc}

0001862e <chop_component>:

STATIC void chop_component(const char *start, const char **end) {
   1862e:	b480      	push	{r7}
   18630:	b085      	sub	sp, #20
   18632:	af00      	add	r7, sp, #0
   18634:	6078      	str	r0, [r7, #4]
   18636:	6039      	str	r1, [r7, #0]
    const char *p = *end;
   18638:	683b      	ldr	r3, [r7, #0]
   1863a:	681b      	ldr	r3, [r3, #0]
   1863c:	60fb      	str	r3, [r7, #12]
    while (p > start) {
   1863e:	e00a      	b.n	18656 <chop_component+0x28>
        if (*--p == '.') {
   18640:	68fb      	ldr	r3, [r7, #12]
   18642:	3b01      	subs	r3, #1
   18644:	60fb      	str	r3, [r7, #12]
   18646:	68fb      	ldr	r3, [r7, #12]
   18648:	781b      	ldrb	r3, [r3, #0]
   1864a:	2b2e      	cmp	r3, #46	; 0x2e
   1864c:	d103      	bne.n	18656 <chop_component+0x28>
            *end = p;
   1864e:	683b      	ldr	r3, [r7, #0]
   18650:	68fa      	ldr	r2, [r7, #12]
   18652:	601a      	str	r2, [r3, #0]
            return;
   18654:	e006      	b.n	18664 <chop_component+0x36>
    while (p > start) {
   18656:	68fa      	ldr	r2, [r7, #12]
   18658:	687b      	ldr	r3, [r7, #4]
   1865a:	429a      	cmp	r2, r3
   1865c:	d8f0      	bhi.n	18640 <chop_component+0x12>
        }
    }
    *end = p;
   1865e:	683b      	ldr	r3, [r7, #0]
   18660:	68fa      	ldr	r2, [r7, #12]
   18662:	601a      	str	r2, [r3, #0]
}
   18664:	3714      	adds	r7, #20
   18666:	46bd      	mov	sp, r7
   18668:	f85d 7b04 	ldr.w	r7, [sp], #4
   1866c:	4770      	bx	lr

0001866e <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   1866e:	b590      	push	{r4, r7, lr}
   18670:	b0e3      	sub	sp, #396	; 0x18c
   18672:	af00      	add	r7, sp, #0
   18674:	1d3b      	adds	r3, r7, #4
   18676:	6018      	str	r0, [r3, #0]
   18678:	463b      	mov	r3, r7
   1867a:	6019      	str	r1, [r3, #0]
        mp_obj_print(args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
#endif

    mp_obj_t module_name = args[0];
   1867c:	463b      	mov	r3, r7
   1867e:	681b      	ldr	r3, [r3, #0]
   18680:	681b      	ldr	r3, [r3, #0]
   18682:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    mp_obj_t fromtuple = mp_const_none;
   18686:	4bd6      	ldr	r3, [pc, #856]	; (189e0 <mp_builtin___import__+0x372>)
   18688:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    mp_int_t level = 0;
   1868c:	2300      	movs	r3, #0
   1868e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    if (n_args >= 4) {
   18692:	1d3b      	adds	r3, r7, #4
   18694:	681b      	ldr	r3, [r3, #0]
   18696:	2b03      	cmp	r3, #3
   18698:	d916      	bls.n	186c8 <mp_builtin___import__+0x5a>
        fromtuple = args[3];
   1869a:	463b      	mov	r3, r7
   1869c:	681b      	ldr	r3, [r3, #0]
   1869e:	68db      	ldr	r3, [r3, #12]
   186a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        if (n_args >= 5) {
   186a4:	1d3b      	adds	r3, r7, #4
   186a6:	681b      	ldr	r3, [r3, #0]
   186a8:	2b04      	cmp	r3, #4
   186aa:	d90d      	bls.n	186c8 <mp_builtin___import__+0x5a>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   186ac:	463b      	mov	r3, r7
   186ae:	681b      	ldr	r3, [r3, #0]
   186b0:	3310      	adds	r3, #16
   186b2:	681b      	ldr	r3, [r3, #0]
   186b4:	105b      	asrs	r3, r3, #1
   186b6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            if (level < 0) {
   186ba:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   186be:	2b00      	cmp	r3, #0
   186c0:	da02      	bge.n	186c8 <mp_builtin___import__+0x5a>
                mp_raise_ValueError(NULL);
   186c2:	2000      	movs	r0, #0
   186c4:	f7f4 fbc5 	bl	ce52 <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   186c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
   186cc:	4619      	mov	r1, r3
   186ce:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   186d2:	f7fc fee7 	bl	154a4 <mp_obj_str_get_data>
   186d6:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    if (level != 0) {
   186da:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   186de:	2b00      	cmp	r3, #0
   186e0:	f000 80de 	beq.w	188a0 <mp_builtin___import__+0x232>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   186e4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   186e8:	3b01      	subs	r3, #1
   186ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   186ee:	f7ff fe93 	bl	18418 <mp_globals_get>
   186f2:	4603      	mov	r3, r0
   186f4:	2172      	movs	r1, #114	; 0x72
   186f6:	4618      	mov	r0, r3
   186f8:	f7f5 ffaa 	bl	e650 <mp_obj_dict_get>
   186fc:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        assert(this_name_q != MP_OBJ_NULL);
   18700:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   18704:	2b00      	cmp	r3, #0
   18706:	d106      	bne.n	18716 <mp_builtin___import__+0xa8>
   18708:	4bb6      	ldr	r3, [pc, #728]	; (189e4 <mp_builtin___import__+0x376>)
   1870a:	4ab7      	ldr	r2, [pc, #732]	; (189e8 <mp_builtin___import__+0x37a>)
   1870c:	f240 111d 	movw	r1, #285	; 0x11d
   18710:	48b6      	ldr	r0, [pc, #728]	; (189ec <mp_builtin___import__+0x37e>)
   18712:	f002 feb5 	bl	1b480 <__assert_func>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   18716:	f7ff fe7f 	bl	18418 <mp_globals_get>
   1871a:	4603      	mov	r3, r0
   1871c:	3304      	adds	r3, #4
   1871e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   18722:	2200      	movs	r2, #0
   18724:	217e      	movs	r1, #126	; 0x7e
   18726:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
   1872a:	f7f4 fe17 	bl	d35c <mp_map_lookup>
   1872e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        bool is_pkg = (elem != NULL);
   18732:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   18736:	2b00      	cmp	r3, #0
   18738:	bf14      	ite	ne
   1873a:	2301      	movne	r3, #1
   1873c:	2300      	moveq	r3, #0
   1873e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   18742:	f107 030c 	add.w	r3, r7, #12
   18746:	4619      	mov	r1, r3
   18748:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
   1874c:	f7fc feaa 	bl	154a4 <mp_obj_str_get_data>
   18750:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        const char *p = this_name + this_name_l;
   18754:	f107 030c 	add.w	r3, r7, #12
   18758:	681b      	ldr	r3, [r3, #0]
   1875a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   1875e:	441a      	add	r2, r3
   18760:	f107 0308 	add.w	r3, r7, #8
   18764:	601a      	str	r2, [r3, #0]
        if (!is_pkg) {
   18766:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   1876a:	f083 0301 	eor.w	r3, r3, #1
   1876e:	b2db      	uxtb	r3, r3
   18770:	2b00      	cmp	r3, #0
   18772:	d00e      	beq.n	18792 <mp_builtin___import__+0x124>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   18774:	f107 0308 	add.w	r3, r7, #8
   18778:	4619      	mov	r1, r3
   1877a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   1877e:	f7ff ff56 	bl	1862e <chop_component>
        }

        while (level--) {
   18782:	e006      	b.n	18792 <mp_builtin___import__+0x124>
            chop_component(this_name, &p);
   18784:	f107 0308 	add.w	r3, r7, #8
   18788:	4619      	mov	r1, r3
   1878a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   1878e:	f7ff ff4e 	bl	1862e <chop_component>
        while (level--) {
   18792:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18796:	1e5a      	subs	r2, r3, #1
   18798:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
   1879c:	2b00      	cmp	r3, #0
   1879e:	d1f1      	bne.n	18784 <mp_builtin___import__+0x116>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   187a0:	f107 0308 	add.w	r3, r7, #8
   187a4:	681a      	ldr	r2, [r3, #0]
   187a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   187aa:	429a      	cmp	r2, r3
   187ac:	d102      	bne.n	187b4 <mp_builtin___import__+0x146>
            mp_raise_ValueError("cannot perform relative import");
   187ae:	4890      	ldr	r0, [pc, #576]	; (189f0 <mp_builtin___import__+0x382>)
   187b0:	f7f4 fb4f 	bl	ce52 <mp_raise_ValueError>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   187b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   187b8:	2b00      	cmp	r3, #0
   187ba:	d107      	bne.n	187cc <mp_builtin___import__+0x15e>
   187bc:	f107 0308 	add.w	r3, r7, #8
   187c0:	681b      	ldr	r3, [r3, #0]
   187c2:	461a      	mov	r2, r3
   187c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   187c8:	1ad3      	subs	r3, r2, r3
   187ca:	e00b      	b.n	187e4 <mp_builtin___import__+0x176>
   187cc:	f107 0308 	add.w	r3, r7, #8
   187d0:	681b      	ldr	r3, [r3, #0]
   187d2:	461a      	mov	r2, r3
   187d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   187d8:	1ad3      	subs	r3, r2, r3
   187da:	461a      	mov	r2, r3
   187dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   187e0:	4413      	add	r3, r2
   187e2:	3301      	adds	r3, #1
   187e4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        char *new_mod = mp_local_alloc(new_mod_l);
   187e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   187ec:	3307      	adds	r3, #7
   187ee:	3307      	adds	r3, #7
   187f0:	08db      	lsrs	r3, r3, #3
   187f2:	00db      	lsls	r3, r3, #3
   187f4:	ebad 0d03 	sub.w	sp, sp, r3
   187f8:	466b      	mov	r3, sp
   187fa:	3307      	adds	r3, #7
   187fc:	08db      	lsrs	r3, r3, #3
   187fe:	00db      	lsls	r3, r3, #3
   18800:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        memcpy(new_mod, this_name, p - this_name);
   18804:	f107 0308 	add.w	r3, r7, #8
   18808:	681b      	ldr	r3, [r3, #0]
   1880a:	461a      	mov	r2, r3
   1880c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18810:	1ad3      	subs	r3, r2, r3
   18812:	461a      	mov	r2, r3
   18814:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
   18818:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   1881c:	f004 f95c 	bl	1cad8 <memcpy>
        if (mod_len != 0) {
   18820:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18824:	2b00      	cmp	r3, #0
   18826:	d01e      	beq.n	18866 <mp_builtin___import__+0x1f8>
            new_mod[p - this_name] = '.';
   18828:	f107 0308 	add.w	r3, r7, #8
   1882c:	681b      	ldr	r3, [r3, #0]
   1882e:	461a      	mov	r2, r3
   18830:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18834:	1ad3      	subs	r3, r2, r3
   18836:	461a      	mov	r2, r3
   18838:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   1883c:	4413      	add	r3, r2
   1883e:	222e      	movs	r2, #46	; 0x2e
   18840:	701a      	strb	r2, [r3, #0]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   18842:	f107 0308 	add.w	r3, r7, #8
   18846:	681b      	ldr	r3, [r3, #0]
   18848:	461a      	mov	r2, r3
   1884a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1884e:	1ad3      	subs	r3, r2, r3
   18850:	3301      	adds	r3, #1
   18852:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
   18856:	4413      	add	r3, r2
   18858:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
   1885c:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
   18860:	4618      	mov	r0, r3
   18862:	f004 f939 	bl	1cad8 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   18866:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
   1886a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   1886e:	f7e8 fc12 	bl	1096 <qstr_from_strn>
   18872:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
        mp_local_free(new_mod);
   18876:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   1887a:	f7ff fda7 	bl	183cc <mp_local_free>
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   1887e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   18882:	009b      	lsls	r3, r3, #2
   18884:	f043 0302 	orr.w	r3, r3, #2
   18888:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        mod_str = qstr_str(new_mod_q);
   1888c:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   18890:	f7e8 fcda 	bl	1248 <qstr_str>
   18894:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
        mod_len = new_mod_l;
   18898:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   1889c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   188a0:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   188a4:	f7fc fd98 	bl	153d8 <mp_obj_str_get_qstr>
   188a8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   188ac:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   188b0:	f7f9 f926 	bl	11b00 <mp_module_get>
   188b4:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (module_obj != MP_OBJ_NULL) {
   188b8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   188bc:	2b00      	cmp	r3, #0
   188be:	d027      	beq.n	18910 <mp_builtin___import__+0x2a2>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   188c0:	212e      	movs	r1, #46	; 0x2e
   188c2:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   188c6:	f004 fb35 	bl	1cf34 <strchr>
   188ca:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        if (p == NULL) {
   188ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   188d2:	2b00      	cmp	r3, #0
   188d4:	d102      	bne.n	188dc <mp_builtin___import__+0x26e>
            return module_obj;
   188d6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   188da:	e142      	b.n	18b62 <mp_builtin___import__+0x4f4>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   188dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   188e0:	4a3f      	ldr	r2, [pc, #252]	; (189e0 <mp_builtin___import__+0x372>)
   188e2:	4293      	cmp	r3, r2
   188e4:	d002      	beq.n	188ec <mp_builtin___import__+0x27e>
            return module_obj;
   188e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   188ea:	e13a      	b.n	18b62 <mp_builtin___import__+0x4f4>
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   188ec:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
   188f0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   188f4:	1ad3      	subs	r3, r2, r3
   188f6:	4619      	mov	r1, r3
   188f8:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   188fc:	f7e8 fbcb 	bl	1096 <qstr_from_strn>
   18900:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
        return mp_module_get(pkg_name);
   18904:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   18908:	f7f9 f8fa 	bl	11b00 <mp_module_get>
   1890c:	4603      	mov	r3, r0
   1890e:	e128      	b.n	18b62 <mp_builtin___import__+0x4f4>
    }
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
   18910:	2300      	movs	r3, #0
   18912:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   18916:	f107 0210 	add.w	r2, r7, #16
   1891a:	f507 7388 	add.w	r3, r7, #272	; 0x110
   1891e:	f44f 7180 	mov.w	r1, #256	; 0x100
   18922:	4618      	mov	r0, r3
   18924:	f7e8 fd49 	bl	13ba <vstr_init_fixed_buf>
    module_obj = MP_OBJ_NULL;
   18928:	2300      	movs	r3, #0
   1892a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   1892e:	2300      	movs	r3, #0
   18930:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
   18934:	2300      	movs	r3, #0
   18936:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint i;
    for (i = 1; i <= mod_len; i++) {
   1893a:	2301      	movs	r3, #1
   1893c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18940:	e0fe      	b.n	18b40 <mp_builtin___import__+0x4d2>
        if (i == mod_len || mod_str[i] == '.') {
   18942:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18946:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   1894a:	429a      	cmp	r2, r3
   1894c:	d008      	beq.n	18960 <mp_builtin___import__+0x2f2>
   1894e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18952:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18956:	4413      	add	r3, r2
   18958:	781b      	ldrb	r3, [r3, #0]
   1895a:	2b2e      	cmp	r3, #46	; 0x2e
   1895c:	f040 80eb 	bne.w	18b36 <mp_builtin___import__+0x4c8>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   18960:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18964:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18968:	f7e8 fb95 	bl	1096 <qstr_from_strn>
   1896c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   18970:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18974:	4618      	mov	r0, r3
   18976:	f7ff fd11 	bl	1839c <vstr_len>
   1897a:	4603      	mov	r3, r0
   1897c:	2b00      	cmp	r3, #0
   1897e:	d10b      	bne.n	18998 <mp_builtin___import__+0x32a>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
   18980:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18984:	461a      	mov	r2, r3
   18986:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   1898a:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   1898e:	f7ff fdbf 	bl	18510 <find_file>
   18992:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
   18996:	e01b      	b.n	189d0 <mp_builtin___import__+0x362>
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
   18998:	f507 7388 	add.w	r3, r7, #272	; 0x110
   1899c:	212f      	movs	r1, #47	; 0x2f
   1899e:	4618      	mov	r0, r3
   189a0:	f7e8 fe3c 	bl	161c <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   189a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   189a8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   189ac:	18d1      	adds	r1, r2, r3
   189ae:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   189b2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   189b6:	1ad2      	subs	r2, r2, r3
   189b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   189bc:	4618      	mov	r0, r3
   189be:	f7e8 fe4e 	bl	165e <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   189c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
   189c6:	4618      	mov	r0, r3
   189c8:	f7ff fd82 	bl	184d0 <stat_dir_or_file>
   189cc:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   189d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   189d4:	2b00      	cmp	r3, #0
   189d6:	d111      	bne.n	189fc <mp_builtin___import__+0x38e>
                #else
                {
                #endif
                    // couldn't find the file, so fail
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_raise_msg(&mp_type_ImportError, "module not found");
   189d8:	4906      	ldr	r1, [pc, #24]	; (189f4 <mp_builtin___import__+0x386>)
   189da:	4807      	ldr	r0, [pc, #28]	; (189f8 <mp_builtin___import__+0x38a>)
   189dc:	f7f4 fa22 	bl	ce24 <mp_raise_msg>
   189e0:	00023108 	.word	0x00023108
   189e4:	00024158 	.word	0x00024158
   189e8:	000241dc 	.word	0x000241dc
   189ec:	00024174 	.word	0x00024174
   189f0:	00024190 	.word	0x00024190
   189f4:	000241b0 	.word	0x000241b0
   189f8:	00022114 	.word	0x00022114
                            "no module named '%q'", mod_name));
                    }
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   189fc:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18a00:	f7f9 f87e 	bl	11b00 <mp_module_get>
   18a04:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
            }

            if (module_obj == MP_OBJ_NULL) {
   18a08:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18a0c:	2b00      	cmp	r3, #0
   18a0e:	d166      	bne.n	18ade <mp_builtin___import__+0x470>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   18a10:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18a14:	f7f9 f83a 	bl	11a8c <mp_obj_new_module>
   18a18:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   18a1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18a20:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18a24:	429a      	cmp	r2, r3
   18a26:	d114      	bne.n	18a52 <mp_builtin___import__+0x3e4>
   18a28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18a2c:	4a4f      	ldr	r2, [pc, #316]	; (18b6c <mp_builtin___import__+0x4fe>)
   18a2e:	4293      	cmp	r3, r2
   18a30:	d10f      	bne.n	18a52 <mp_builtin___import__+0x3e4>
   18a32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18a36:	2b01      	cmp	r3, #1
   18a38:	d00b      	beq.n	18a52 <mp_builtin___import__+0x3e4>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
   18a3a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18a3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   18a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   18a46:	685b      	ldr	r3, [r3, #4]
   18a48:	226a      	movs	r2, #106	; 0x6a
   18a4a:	2172      	movs	r1, #114	; 0x72
   18a4c:	4618      	mov	r0, r3
   18a4e:	f7f6 faf0 	bl	f032 <mp_obj_dict_store>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   18a52:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18a56:	2b01      	cmp	r3, #1
   18a58:	d13a      	bne.n	18ad0 <mp_builtin___import__+0x462>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   18a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18a5e:	4618      	mov	r0, r3
   18a60:	f7ff fc90 	bl	18384 <vstr_str>
   18a64:	4604      	mov	r4, r0
   18a66:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18a6a:	4618      	mov	r0, r3
   18a6c:	f7ff fc96 	bl	1839c <vstr_len>
   18a70:	4603      	mov	r3, r0
   18a72:	4619      	mov	r1, r3
   18a74:	4620      	mov	r0, r4
   18a76:	f7fc fbb7 	bl	151e8 <mp_obj_new_str>
   18a7a:	4603      	mov	r3, r0
   18a7c:	461a      	mov	r2, r3
   18a7e:	211f      	movs	r1, #31
   18a80:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18a84:	f7f3 fe8e 	bl	c7a4 <mp_store_attr>
                    size_t orig_path_len = path.len;
   18a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   18a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    vstr_add_char(&path, PATH_SEP_CHAR);
   18a90:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18a94:	212f      	movs	r1, #47	; 0x2f
   18a96:	4618      	mov	r0, r3
   18a98:	f7e8 fdc0 	bl	161c <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   18a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18aa0:	4933      	ldr	r1, [pc, #204]	; (18b70 <mp_builtin___import__+0x502>)
   18aa2:	4618      	mov	r0, r3
   18aa4:	f7e8 fdc9 	bl	163a <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   18aa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18aac:	4618      	mov	r0, r3
   18aae:	f7ff fcf9 	bl	184a4 <stat_file_py_or_mpy>
   18ab2:	4603      	mov	r3, r0
   18ab4:	2b02      	cmp	r3, #2
   18ab6:	d106      	bne.n	18ac6 <mp_builtin___import__+0x458>
                        //mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   18ab8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18abc:	4619      	mov	r1, r3
   18abe:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18ac2:	f7ff fd8d 	bl	185e0 <do_load>
                    }
                    path.len = orig_path_len;
   18ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
   18aca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   18ace:	e006      	b.n	18ade <mp_builtin___import__+0x470>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   18ad0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18ad4:	4619      	mov	r1, r3
   18ad6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18ada:	f7ff fd81 	bl	185e0 <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   18ade:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   18ae2:	2b00      	cmp	r3, #0
   18ae4:	d016      	beq.n	18b14 <mp_builtin___import__+0x4a6>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   18ae6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18aea:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18aee:	18d0      	adds	r0, r2, r3
   18af0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18af4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18af8:	1ad3      	subs	r3, r2, r3
   18afa:	4619      	mov	r1, r3
   18afc:	f7e8 facb 	bl	1096 <qstr_from_strn>
   18b00:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
                mp_store_attr(outer_module_obj, s, module_obj);
   18b04:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   18b08:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
   18b0c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   18b10:	f7f3 fe48 	bl	c7a4 <mp_store_attr>
            }
            outer_module_obj = module_obj;
   18b14:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b18:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            if (top_module_obj == MP_OBJ_NULL) {
   18b1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   18b20:	2b00      	cmp	r3, #0
   18b22:	d103      	bne.n	18b2c <mp_builtin___import__+0x4be>
                top_module_obj = module_obj;
   18b24:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b28:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            }
            last = i + 1;
   18b2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18b30:	3301      	adds	r3, #1
   18b32:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    for (i = 1; i <= mod_len; i++) {
   18b36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18b3a:	3301      	adds	r3, #1
   18b3c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18b40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18b44:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18b48:	429a      	cmp	r2, r3
   18b4a:	f67f aefa 	bls.w	18942 <mp_builtin___import__+0x2d4>
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   18b4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18b52:	4a08      	ldr	r2, [pc, #32]	; (18b74 <mp_builtin___import__+0x506>)
   18b54:	4293      	cmp	r3, r2
   18b56:	d002      	beq.n	18b5e <mp_builtin___import__+0x4f0>
        return module_obj;
   18b58:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b5c:	e001      	b.n	18b62 <mp_builtin___import__+0x4f4>
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
   18b5e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
}
   18b62:	4618      	mov	r0, r3
   18b64:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
   18b68:	46bd      	mov	sp, r7
   18b6a:	bd90      	pop	{r4, r7, pc}
   18b6c:	00021894 	.word	0x00021894
   18b70:	000241c4 	.word	0x000241c4
   18b74:	00023108 	.word	0x00023108

00018b78 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18b78:	b480      	push	{r7}
   18b7a:	b083      	sub	sp, #12
   18b7c:	af00      	add	r7, sp, #0
   18b7e:	6078      	str	r0, [r7, #4]
   18b80:	687b      	ldr	r3, [r7, #4]
   18b82:	f003 0303 	and.w	r3, r3, #3
   18b86:	2b00      	cmp	r3, #0
   18b88:	bf0c      	ite	eq
   18b8a:	2301      	moveq	r3, #1
   18b8c:	2300      	movne	r3, #0
   18b8e:	b2db      	uxtb	r3, r3
   18b90:	4618      	mov	r0, r3
   18b92:	370c      	adds	r7, #12
   18b94:	46bd      	mov	sp, r7
   18b96:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b9a:	4770      	bx	lr

00018b9c <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18b9c:	b480      	push	{r7}
   18b9e:	af00      	add	r7, sp, #0
   18ba0:	4b03      	ldr	r3, [pc, #12]	; (18bb0 <mp_locals_get+0x14>)
   18ba2:	685b      	ldr	r3, [r3, #4]
   18ba4:	4618      	mov	r0, r3
   18ba6:	46bd      	mov	sp, r7
   18ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
   18bac:	4770      	bx	lr
   18bae:	bf00      	nop
   18bb0:	200012f0 	.word	0x200012f0

00018bb4 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18bb4:	b480      	push	{r7}
   18bb6:	af00      	add	r7, sp, #0
   18bb8:	4b03      	ldr	r3, [pc, #12]	; (18bc8 <mp_globals_get+0x14>)
   18bba:	689b      	ldr	r3, [r3, #8]
   18bbc:	4618      	mov	r0, r3
   18bbe:	46bd      	mov	sp, r7
   18bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   18bc4:	4770      	bx	lr
   18bc6:	bf00      	nop
   18bc8:	200012f0 	.word	0x200012f0

00018bcc <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   18bcc:	b580      	push	{r7, lr}
   18bce:	b08a      	sub	sp, #40	; 0x28
   18bd0:	af00      	add	r7, sp, #0
   18bd2:	60f8      	str	r0, [r7, #12]
   18bd4:	60b9      	str	r1, [r7, #8]
   18bd6:	607a      	str	r2, [r7, #4]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
   18bd8:	f7ff ffec 	bl	18bb4 <mp_globals_get>
   18bdc:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_dict_t *locals = mp_locals_get();
   18bde:	f7ff ffdd 	bl	18b9c <mp_locals_get>
   18be2:	6238      	str	r0, [r7, #32]
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18be4:	2301      	movs	r3, #1
   18be6:	61fb      	str	r3, [r7, #28]
   18be8:	e02f      	b.n	18c4a <eval_exec_helper+0x7e>
        if (args[i] != mp_const_none) {
   18bea:	69fb      	ldr	r3, [r7, #28]
   18bec:	009b      	lsls	r3, r3, #2
   18bee:	68ba      	ldr	r2, [r7, #8]
   18bf0:	4413      	add	r3, r2
   18bf2:	681b      	ldr	r3, [r3, #0]
   18bf4:	4a26      	ldr	r2, [pc, #152]	; (18c90 <eval_exec_helper+0xc4>)
   18bf6:	4293      	cmp	r3, r2
   18bf8:	d024      	beq.n	18c44 <eval_exec_helper+0x78>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   18bfa:	69fb      	ldr	r3, [r7, #28]
   18bfc:	009b      	lsls	r3, r3, #2
   18bfe:	68ba      	ldr	r2, [r7, #8]
   18c00:	4413      	add	r3, r2
   18c02:	681b      	ldr	r3, [r3, #0]
   18c04:	4618      	mov	r0, r3
   18c06:	f7ff ffb7 	bl	18b78 <MP_OBJ_IS_OBJ>
   18c0a:	4603      	mov	r3, r0
   18c0c:	f083 0301 	eor.w	r3, r3, #1
   18c10:	b2db      	uxtb	r3, r3
   18c12:	2b00      	cmp	r3, #0
   18c14:	d108      	bne.n	18c28 <eval_exec_helper+0x5c>
   18c16:	69fb      	ldr	r3, [r7, #28]
   18c18:	009b      	lsls	r3, r3, #2
   18c1a:	68ba      	ldr	r2, [r7, #8]
   18c1c:	4413      	add	r3, r2
   18c1e:	681b      	ldr	r3, [r3, #0]
   18c20:	681b      	ldr	r3, [r3, #0]
   18c22:	4a1c      	ldr	r2, [pc, #112]	; (18c94 <eval_exec_helper+0xc8>)
   18c24:	4293      	cmp	r3, r2
   18c26:	d002      	beq.n	18c2e <eval_exec_helper+0x62>
                mp_raise_TypeError(NULL);
   18c28:	2000      	movs	r0, #0
   18c2a:	f7f4 f91d 	bl	ce68 <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   18c2e:	69fb      	ldr	r3, [r7, #28]
   18c30:	009b      	lsls	r3, r3, #2
   18c32:	68ba      	ldr	r2, [r7, #8]
   18c34:	4413      	add	r3, r2
   18c36:	681b      	ldr	r3, [r3, #0]
   18c38:	623b      	str	r3, [r7, #32]
            if (i == 1) {
   18c3a:	69fb      	ldr	r3, [r7, #28]
   18c3c:	2b01      	cmp	r3, #1
   18c3e:	d101      	bne.n	18c44 <eval_exec_helper+0x78>
                globals = locals;
   18c40:	6a3b      	ldr	r3, [r7, #32]
   18c42:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18c44:	69fb      	ldr	r3, [r7, #28]
   18c46:	3301      	adds	r3, #1
   18c48:	61fb      	str	r3, [r7, #28]
   18c4a:	69fb      	ldr	r3, [r7, #28]
   18c4c:	2b02      	cmp	r3, #2
   18c4e:	d803      	bhi.n	18c58 <eval_exec_helper+0x8c>
   18c50:	69fa      	ldr	r2, [r7, #28]
   18c52:	68fb      	ldr	r3, [r7, #12]
   18c54:	429a      	cmp	r2, r3
   18c56:	d3c8      	bcc.n	18bea <eval_exec_helper+0x1e>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   18c58:	68bb      	ldr	r3, [r7, #8]
   18c5a:	681b      	ldr	r3, [r3, #0]
   18c5c:	f107 0210 	add.w	r2, r7, #16
   18c60:	4611      	mov	r1, r2
   18c62:	4618      	mov	r0, r3
   18c64:	f7fc fc1e 	bl	154a4 <mp_obj_str_get_data>
   18c68:	61b8      	str	r0, [r7, #24]
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   18c6a:	693a      	ldr	r2, [r7, #16]
   18c6c:	2300      	movs	r3, #0
   18c6e:	69b9      	ldr	r1, [r7, #24]
   18c70:	2036      	movs	r0, #54	; 0x36
   18c72:	f7ea fd7a 	bl	376a <mp_lexer_new_from_str_len>
   18c76:	6178      	str	r0, [r7, #20]
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   18c78:	6a3b      	ldr	r3, [r7, #32]
   18c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18c7c:	6879      	ldr	r1, [r7, #4]
   18c7e:	6978      	ldr	r0, [r7, #20]
   18c80:	f7f4 f864 	bl	cd4c <mp_parse_compile_execute>
   18c84:	4603      	mov	r3, r0
}
   18c86:	4618      	mov	r0, r3
   18c88:	3728      	adds	r7, #40	; 0x28
   18c8a:	46bd      	mov	sp, r7
   18c8c:	bd80      	pop	{r7, pc}
   18c8e:	bf00      	nop
   18c90:	00023108 	.word	0x00023108
   18c94:	00021d40 	.word	0x00021d40

00018c98 <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   18c98:	b580      	push	{r7, lr}
   18c9a:	b082      	sub	sp, #8
   18c9c:	af00      	add	r7, sp, #0
   18c9e:	6078      	str	r0, [r7, #4]
   18ca0:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   18ca2:	2202      	movs	r2, #2
   18ca4:	6839      	ldr	r1, [r7, #0]
   18ca6:	6878      	ldr	r0, [r7, #4]
   18ca8:	f7ff ff90 	bl	18bcc <eval_exec_helper>
   18cac:	4603      	mov	r3, r0
}
   18cae:	4618      	mov	r0, r3
   18cb0:	3708      	adds	r7, #8
   18cb2:	46bd      	mov	sp, r7
   18cb4:	bd80      	pop	{r7, pc}

00018cb6 <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   18cb6:	b580      	push	{r7, lr}
   18cb8:	b082      	sub	sp, #8
   18cba:	af00      	add	r7, sp, #0
   18cbc:	6078      	str	r0, [r7, #4]
   18cbe:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   18cc0:	2201      	movs	r2, #1
   18cc2:	6839      	ldr	r1, [r7, #0]
   18cc4:	6878      	ldr	r0, [r7, #4]
   18cc6:	f7ff ff81 	bl	18bcc <eval_exec_helper>
   18cca:	4603      	mov	r3, r0
}
   18ccc:	4618      	mov	r0, r3
   18cce:	3708      	adds	r7, #8
   18cd0:	46bd      	mov	sp, r7
   18cd2:	bd80      	pop	{r7, pc}

00018cd4 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   18cd4:	b480      	push	{r7}
   18cd6:	b083      	sub	sp, #12
   18cd8:	af00      	add	r7, sp, #0
   18cda:	6078      	str	r0, [r7, #4]
   18cdc:	687b      	ldr	r3, [r7, #4]
   18cde:	f003 0301 	and.w	r3, r3, #1
   18ce2:	2b00      	cmp	r3, #0
   18ce4:	bf14      	ite	ne
   18ce6:	2301      	movne	r3, #1
   18ce8:	2300      	moveq	r3, #0
   18cea:	b2db      	uxtb	r3, r3
   18cec:	4618      	mov	r0, r3
   18cee:	370c      	adds	r7, #12
   18cf0:	46bd      	mov	sp, r7
   18cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cf6:	4770      	bx	lr

00018cf8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18cf8:	b480      	push	{r7}
   18cfa:	b083      	sub	sp, #12
   18cfc:	af00      	add	r7, sp, #0
   18cfe:	6078      	str	r0, [r7, #4]
   18d00:	687b      	ldr	r3, [r7, #4]
   18d02:	f003 0303 	and.w	r3, r3, #3
   18d06:	2b00      	cmp	r3, #0
   18d08:	bf0c      	ite	eq
   18d0a:	2301      	moveq	r3, #1
   18d0c:	2300      	movne	r3, #0
   18d0e:	b2db      	uxtb	r3, r3
   18d10:	4618      	mov	r0, r3
   18d12:	370c      	adds	r7, #12
   18d14:	46bd      	mov	sp, r7
   18d16:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d1a:	4770      	bx	lr

00018d1c <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   18d1c:	b480      	push	{r7}
   18d1e:	b083      	sub	sp, #12
   18d20:	af00      	add	r7, sp, #0
   18d22:	6078      	str	r0, [r7, #4]
   18d24:	6039      	str	r1, [r7, #0]
   18d26:	687b      	ldr	r3, [r7, #4]
   18d28:	689a      	ldr	r2, [r3, #8]
   18d2a:	683b      	ldr	r3, [r7, #0]
   18d2c:	00db      	lsls	r3, r3, #3
   18d2e:	4413      	add	r3, r2
   18d30:	681b      	ldr	r3, [r3, #0]
   18d32:	2b00      	cmp	r3, #0
   18d34:	d009      	beq.n	18d4a <MP_MAP_SLOT_IS_FILLED+0x2e>
   18d36:	687b      	ldr	r3, [r7, #4]
   18d38:	689a      	ldr	r2, [r3, #8]
   18d3a:	683b      	ldr	r3, [r7, #0]
   18d3c:	00db      	lsls	r3, r3, #3
   18d3e:	4413      	add	r3, r2
   18d40:	681b      	ldr	r3, [r3, #0]
   18d42:	2b08      	cmp	r3, #8
   18d44:	d001      	beq.n	18d4a <MP_MAP_SLOT_IS_FILLED+0x2e>
   18d46:	2301      	movs	r3, #1
   18d48:	e000      	b.n	18d4c <MP_MAP_SLOT_IS_FILLED+0x30>
   18d4a:	2300      	movs	r3, #0
   18d4c:	f003 0301 	and.w	r3, r3, #1
   18d50:	b2db      	uxtb	r3, r3
   18d52:	4618      	mov	r0, r3
   18d54:	370c      	adds	r7, #12
   18d56:	46bd      	mov	sp, r7
   18d58:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d5c:	4770      	bx	lr

00018d5e <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   18d5e:	b480      	push	{r7}
   18d60:	b083      	sub	sp, #12
   18d62:	af00      	add	r7, sp, #0
   18d64:	6078      	str	r0, [r7, #4]
   18d66:	687b      	ldr	r3, [r7, #4]
   18d68:	2b00      	cmp	r3, #0
   18d6a:	d001      	beq.n	18d70 <mp_obj_new_bool+0x12>
   18d6c:	4b04      	ldr	r3, [pc, #16]	; (18d80 <mp_obj_new_bool+0x22>)
   18d6e:	e000      	b.n	18d72 <mp_obj_new_bool+0x14>
   18d70:	4b04      	ldr	r3, [pc, #16]	; (18d84 <mp_obj_new_bool+0x26>)
   18d72:	4618      	mov	r0, r3
   18d74:	370c      	adds	r7, #12
   18d76:	46bd      	mov	sp, r7
   18d78:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d7c:	4770      	bx	lr
   18d7e:	bf00      	nop
   18d80:	0002189c 	.word	0x0002189c
   18d84:	00021894 	.word	0x00021894

00018d88 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18d88:	b480      	push	{r7}
   18d8a:	af00      	add	r7, sp, #0
   18d8c:	4b03      	ldr	r3, [pc, #12]	; (18d9c <mp_locals_get+0x14>)
   18d8e:	685b      	ldr	r3, [r3, #4]
   18d90:	4618      	mov	r0, r3
   18d92:	46bd      	mov	sp, r7
   18d94:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d98:	4770      	bx	lr
   18d9a:	bf00      	nop
   18d9c:	200012f0 	.word	0x200012f0

00018da0 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18da0:	b480      	push	{r7}
   18da2:	b083      	sub	sp, #12
   18da4:	af00      	add	r7, sp, #0
   18da6:	6078      	str	r0, [r7, #4]
   18da8:	4a04      	ldr	r2, [pc, #16]	; (18dbc <mp_locals_set+0x1c>)
   18daa:	687b      	ldr	r3, [r7, #4]
   18dac:	6053      	str	r3, [r2, #4]
   18dae:	bf00      	nop
   18db0:	370c      	adds	r7, #12
   18db2:	46bd      	mov	sp, r7
   18db4:	f85d 7b04 	ldr.w	r7, [sp], #4
   18db8:	4770      	bx	lr
   18dba:	bf00      	nop
   18dbc:	200012f0 	.word	0x200012f0

00018dc0 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18dc0:	b480      	push	{r7}
   18dc2:	af00      	add	r7, sp, #0
   18dc4:	4b03      	ldr	r3, [pc, #12]	; (18dd4 <mp_globals_get+0x14>)
   18dc6:	689b      	ldr	r3, [r3, #8]
   18dc8:	4618      	mov	r0, r3
   18dca:	46bd      	mov	sp, r7
   18dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
   18dd0:	4770      	bx	lr
   18dd2:	bf00      	nop
   18dd4:	200012f0 	.word	0x200012f0

00018dd8 <mp_builtin___build_class__>:
#endif

// args[0] is function from class body
// args[1] is class name
// args[2:] are base objects
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   18dd8:	b580      	push	{r7, lr}
   18dda:	b08a      	sub	sp, #40	; 0x28
   18ddc:	af00      	add	r7, sp, #0
   18dde:	6078      	str	r0, [r7, #4]
   18de0:	6039      	str	r1, [r7, #0]
    assert(2 <= n_args);
   18de2:	687b      	ldr	r3, [r7, #4]
   18de4:	2b01      	cmp	r3, #1
   18de6:	d805      	bhi.n	18df4 <mp_builtin___build_class__+0x1c>
   18de8:	4b24      	ldr	r3, [pc, #144]	; (18e7c <mp_builtin___build_class__+0xa4>)
   18dea:	4a25      	ldr	r2, [pc, #148]	; (18e80 <mp_builtin___build_class__+0xa8>)
   18dec:	2132      	movs	r1, #50	; 0x32
   18dee:	4825      	ldr	r0, [pc, #148]	; (18e84 <mp_builtin___build_class__+0xac>)
   18df0:	f002 fb46 	bl	1b480 <__assert_func>

    // set the new classes __locals__ object
    mp_obj_dict_t *old_locals = mp_locals_get();
   18df4:	f7ff ffc8 	bl	18d88 <mp_locals_get>
   18df8:	6238      	str	r0, [r7, #32]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   18dfa:	2000      	movs	r0, #0
   18dfc:	f7f6 f8f8 	bl	eff0 <mp_obj_new_dict>
   18e00:	61f8      	str	r0, [r7, #28]
    mp_locals_set(MP_OBJ_TO_PTR(class_locals));
   18e02:	69f8      	ldr	r0, [r7, #28]
   18e04:	f7ff ffcc 	bl	18da0 <mp_locals_set>

    // call the class code
    mp_obj_t cell = mp_call_function_0(args[0]);
   18e08:	683b      	ldr	r3, [r7, #0]
   18e0a:	681b      	ldr	r3, [r3, #0]
   18e0c:	4618      	mov	r0, r3
   18e0e:	f7f2 ff49 	bl	bca4 <mp_call_function_0>
   18e12:	61b8      	str	r0, [r7, #24]

    // restore old __locals__ object
    mp_locals_set(old_locals);
   18e14:	6a38      	ldr	r0, [r7, #32]
   18e16:	f7ff ffc3 	bl	18da0 <mp_locals_set>

    // get the class type (meta object) from the base objects
    mp_obj_t meta;
    if (n_args == 2) {
   18e1a:	687b      	ldr	r3, [r7, #4]
   18e1c:	2b02      	cmp	r3, #2
   18e1e:	d102      	bne.n	18e26 <mp_builtin___build_class__+0x4e>
        // no explicit bases, so use 'type'
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   18e20:	4b19      	ldr	r3, [pc, #100]	; (18e88 <mp_builtin___build_class__+0xb0>)
   18e22:	627b      	str	r3, [r7, #36]	; 0x24
   18e24:	e006      	b.n	18e34 <mp_builtin___build_class__+0x5c>
    } else {
        // use type of first base object
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   18e26:	683b      	ldr	r3, [r7, #0]
   18e28:	3308      	adds	r3, #8
   18e2a:	681b      	ldr	r3, [r3, #0]
   18e2c:	4618      	mov	r0, r3
   18e2e:	f7f4 fc3f 	bl	d6b0 <mp_obj_get_type>
   18e32:	6278      	str	r0, [r7, #36]	; 0x24

    // TODO do proper metaclass resolution for multiple base objects

    // create the new class using a call to the meta object
    mp_obj_t meta_args[3];
    meta_args[0] = args[1]; // class name
   18e34:	683b      	ldr	r3, [r7, #0]
   18e36:	685b      	ldr	r3, [r3, #4]
   18e38:	60bb      	str	r3, [r7, #8]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   18e3a:	687b      	ldr	r3, [r7, #4]
   18e3c:	1e9a      	subs	r2, r3, #2
   18e3e:	683b      	ldr	r3, [r7, #0]
   18e40:	3308      	adds	r3, #8
   18e42:	4619      	mov	r1, r3
   18e44:	4610      	mov	r0, r2
   18e46:	f7fc fee5 	bl	15c14 <mp_obj_new_tuple>
   18e4a:	4603      	mov	r3, r0
   18e4c:	60fb      	str	r3, [r7, #12]
    meta_args[2] = class_locals; // dict of members
   18e4e:	69fb      	ldr	r3, [r7, #28]
   18e50:	613b      	str	r3, [r7, #16]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   18e52:	f107 0308 	add.w	r3, r7, #8
   18e56:	2200      	movs	r2, #0
   18e58:	2103      	movs	r1, #3
   18e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18e5c:	f7f2 ff57 	bl	bd0e <mp_call_function_n_kw>
   18e60:	6178      	str	r0, [r7, #20]

    // store into cell if neede
    if (cell != mp_const_none) {
   18e62:	69bb      	ldr	r3, [r7, #24]
   18e64:	4a09      	ldr	r2, [pc, #36]	; (18e8c <mp_builtin___build_class__+0xb4>)
   18e66:	4293      	cmp	r3, r2
   18e68:	d003      	beq.n	18e72 <mp_builtin___build_class__+0x9a>
        mp_obj_cell_set(cell, new_class);
   18e6a:	6979      	ldr	r1, [r7, #20]
   18e6c:	69b8      	ldr	r0, [r7, #24]
   18e6e:	f7f5 f98b 	bl	e188 <mp_obj_cell_set>
    }

    return new_class;
   18e72:	697b      	ldr	r3, [r7, #20]
}
   18e74:	4618      	mov	r0, r3
   18e76:	3728      	adds	r7, #40	; 0x28
   18e78:	46bd      	mov	sp, r7
   18e7a:	bd80      	pop	{r7, pc}
   18e7c:	0002420c 	.word	0x0002420c
   18e80:	00024630 	.word	0x00024630
   18e84:	00024218 	.word	0x00024218
   18e88:	00023d18 	.word	0x00023d18
   18e8c:	00023108 	.word	0x00023108

00018e90 <mp_builtin_abs>:
MP_DEFINE_CONST_FUN_OBJ_VAR(mp_builtin___build_class___obj, 2, mp_builtin___build_class__);

STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   18e90:	b580      	push	{r7, lr}
   18e92:	b082      	sub	sp, #8
   18e94:	af00      	add	r7, sp, #0
   18e96:	6078      	str	r0, [r7, #4]
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   18e98:	6879      	ldr	r1, [r7, #4]
   18e9a:	2007      	movs	r0, #7
   18e9c:	f7f2 fbb0 	bl	b600 <mp_unary_op>
   18ea0:	4603      	mov	r3, r0
}
   18ea2:	4618      	mov	r0, r3
   18ea4:	3708      	adds	r7, #8
   18ea6:	46bd      	mov	sp, r7
   18ea8:	bd80      	pop	{r7, pc}

00018eaa <mp_builtin_all>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_abs_obj, mp_builtin_abs);

STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   18eaa:	b580      	push	{r7, lr}
   18eac:	b088      	sub	sp, #32
   18eae:	af00      	add	r7, sp, #0
   18eb0:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   18eb2:	f107 0308 	add.w	r3, r7, #8
   18eb6:	4619      	mov	r1, r3
   18eb8:	6878      	ldr	r0, [r7, #4]
   18eba:	f7f3 fc9b 	bl	c7f4 <mp_getiter>
   18ebe:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18ec0:	e00a      	b.n	18ed8 <mp_builtin_all+0x2e>
        if (!mp_obj_is_true(item)) {
   18ec2:	69b8      	ldr	r0, [r7, #24]
   18ec4:	f7f4 fcd0 	bl	d868 <mp_obj_is_true>
   18ec8:	4603      	mov	r3, r0
   18eca:	f083 0301 	eor.w	r3, r3, #1
   18ece:	b2db      	uxtb	r3, r3
   18ed0:	2b00      	cmp	r3, #0
   18ed2:	d001      	beq.n	18ed8 <mp_builtin_all+0x2e>
            return mp_const_false;
   18ed4:	4b06      	ldr	r3, [pc, #24]	; (18ef0 <mp_builtin_all+0x46>)
   18ed6:	e007      	b.n	18ee8 <mp_builtin_all+0x3e>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18ed8:	69f8      	ldr	r0, [r7, #28]
   18eda:	f7f3 fd0d 	bl	c8f8 <mp_iternext>
   18ede:	61b8      	str	r0, [r7, #24]
   18ee0:	69bb      	ldr	r3, [r7, #24]
   18ee2:	2b04      	cmp	r3, #4
   18ee4:	d1ed      	bne.n	18ec2 <mp_builtin_all+0x18>
        }
    }
    return mp_const_true;
   18ee6:	4b03      	ldr	r3, [pc, #12]	; (18ef4 <mp_builtin_all+0x4a>)
}
   18ee8:	4618      	mov	r0, r3
   18eea:	3720      	adds	r7, #32
   18eec:	46bd      	mov	sp, r7
   18eee:	bd80      	pop	{r7, pc}
   18ef0:	00021894 	.word	0x00021894
   18ef4:	0002189c 	.word	0x0002189c

00018ef8 <mp_builtin_any>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_all_obj, mp_builtin_all);

STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   18ef8:	b580      	push	{r7, lr}
   18efa:	b088      	sub	sp, #32
   18efc:	af00      	add	r7, sp, #0
   18efe:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   18f00:	f107 0308 	add.w	r3, r7, #8
   18f04:	4619      	mov	r1, r3
   18f06:	6878      	ldr	r0, [r7, #4]
   18f08:	f7f3 fc74 	bl	c7f4 <mp_getiter>
   18f0c:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18f0e:	e007      	b.n	18f20 <mp_builtin_any+0x28>
        if (mp_obj_is_true(item)) {
   18f10:	69b8      	ldr	r0, [r7, #24]
   18f12:	f7f4 fca9 	bl	d868 <mp_obj_is_true>
   18f16:	4603      	mov	r3, r0
   18f18:	2b00      	cmp	r3, #0
   18f1a:	d001      	beq.n	18f20 <mp_builtin_any+0x28>
            return mp_const_true;
   18f1c:	4b06      	ldr	r3, [pc, #24]	; (18f38 <mp_builtin_any+0x40>)
   18f1e:	e007      	b.n	18f30 <mp_builtin_any+0x38>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18f20:	69f8      	ldr	r0, [r7, #28]
   18f22:	f7f3 fce9 	bl	c8f8 <mp_iternext>
   18f26:	61b8      	str	r0, [r7, #24]
   18f28:	69bb      	ldr	r3, [r7, #24]
   18f2a:	2b04      	cmp	r3, #4
   18f2c:	d1f0      	bne.n	18f10 <mp_builtin_any+0x18>
        }
    }
    return mp_const_false;
   18f2e:	4b03      	ldr	r3, [pc, #12]	; (18f3c <mp_builtin_any+0x44>)
}
   18f30:	4618      	mov	r0, r3
   18f32:	3720      	adds	r7, #32
   18f34:	46bd      	mov	sp, r7
   18f36:	bd80      	pop	{r7, pc}
   18f38:	0002189c 	.word	0x0002189c
   18f3c:	00021894 	.word	0x00021894

00018f40 <mp_builtin_bin>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_any_obj, mp_builtin_any);

STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   18f40:	b580      	push	{r7, lr}
   18f42:	b084      	sub	sp, #16
   18f44:	af00      	add	r7, sp, #0
   18f46:	6078      	str	r0, [r7, #4]
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   18f48:	23b2      	movs	r3, #178	; 0xb2
   18f4a:	60bb      	str	r3, [r7, #8]
   18f4c:	687b      	ldr	r3, [r7, #4]
   18f4e:	60fb      	str	r3, [r7, #12]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   18f50:	f107 0308 	add.w	r3, r7, #8
   18f54:	2200      	movs	r2, #0
   18f56:	4619      	mov	r1, r3
   18f58:	2002      	movs	r0, #2
   18f5a:	f7fb f92f 	bl	141bc <mp_obj_str_format>
   18f5e:	4603      	mov	r3, r0
}
   18f60:	4618      	mov	r0, r3
   18f62:	3710      	adds	r7, #16
   18f64:	46bd      	mov	sp, r7
   18f66:	bd80      	pop	{r7, pc}

00018f68 <mp_builtin_callable>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_bin_obj, mp_builtin_bin);

STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   18f68:	b580      	push	{r7, lr}
   18f6a:	b082      	sub	sp, #8
   18f6c:	af00      	add	r7, sp, #0
   18f6e:	6078      	str	r0, [r7, #4]
    if (mp_obj_is_callable(o_in)) {
   18f70:	6878      	ldr	r0, [r7, #4]
   18f72:	f7f4 fccf 	bl	d914 <mp_obj_is_callable>
   18f76:	4603      	mov	r3, r0
   18f78:	2b00      	cmp	r3, #0
   18f7a:	d001      	beq.n	18f80 <mp_builtin_callable+0x18>
        return mp_const_true;
   18f7c:	4b03      	ldr	r3, [pc, #12]	; (18f8c <mp_builtin_callable+0x24>)
   18f7e:	e000      	b.n	18f82 <mp_builtin_callable+0x1a>
    } else {
        return mp_const_false;
   18f80:	4b03      	ldr	r3, [pc, #12]	; (18f90 <mp_builtin_callable+0x28>)
    }
}
   18f82:	4618      	mov	r0, r3
   18f84:	3708      	adds	r7, #8
   18f86:	46bd      	mov	sp, r7
   18f88:	bd80      	pop	{r7, pc}
   18f8a:	bf00      	nop
   18f8c:	0002189c 	.word	0x0002189c
   18f90:	00021894 	.word	0x00021894

00018f94 <mp_builtin_chr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_callable_obj, mp_builtin_callable);

STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   18f94:	b580      	push	{r7, lr}
   18f96:	b084      	sub	sp, #16
   18f98:	af00      	add	r7, sp, #0
   18f9a:	6078      	str	r0, [r7, #4]
    } else {
        mp_raise_ValueError("chr() arg not in range(0x110000)");
    }
    return mp_obj_new_str_via_qstr((char*)str, len);
    #else
    mp_int_t ord = mp_obj_get_int(o_in);
   18f9c:	6878      	ldr	r0, [r7, #4]
   18f9e:	f7f4 fd63 	bl	da68 <mp_obj_get_int>
   18fa2:	60f8      	str	r0, [r7, #12]
    if (0 <= ord && ord <= 0xff) {
   18fa4:	68fb      	ldr	r3, [r7, #12]
   18fa6:	2b00      	cmp	r3, #0
   18fa8:	db0d      	blt.n	18fc6 <mp_builtin_chr+0x32>
   18faa:	68fb      	ldr	r3, [r7, #12]
   18fac:	2bff      	cmp	r3, #255	; 0xff
   18fae:	dc0a      	bgt.n	18fc6 <mp_builtin_chr+0x32>
        uint8_t str[1] = {ord};
   18fb0:	68fb      	ldr	r3, [r7, #12]
   18fb2:	b2db      	uxtb	r3, r3
   18fb4:	723b      	strb	r3, [r7, #8]
        return mp_obj_new_str_via_qstr((char*)str, 1);
   18fb6:	f107 0308 	add.w	r3, r7, #8
   18fba:	2101      	movs	r1, #1
   18fbc:	4618      	mov	r0, r3
   18fbe:	f7fc f89f 	bl	15100 <mp_obj_new_str_via_qstr>
   18fc2:	4603      	mov	r3, r0
   18fc4:	e002      	b.n	18fcc <mp_builtin_chr+0x38>
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
   18fc6:	4803      	ldr	r0, [pc, #12]	; (18fd4 <mp_builtin_chr+0x40>)
   18fc8:	f7f3 ff43 	bl	ce52 <mp_raise_ValueError>
    }
    #endif
}
   18fcc:	4618      	mov	r0, r3
   18fce:	3710      	adds	r7, #16
   18fd0:	46bd      	mov	sp, r7
   18fd2:	bd80      	pop	{r7, pc}
   18fd4:	00024264 	.word	0x00024264

00018fd8 <mp_builtin_dir>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_chr_obj, mp_builtin_chr);

STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   18fd8:	b580      	push	{r7, lr}
   18fda:	b08a      	sub	sp, #40	; 0x28
   18fdc:	af00      	add	r7, sp, #0
   18fde:	6078      	str	r0, [r7, #4]
   18fe0:	6039      	str	r1, [r7, #0]
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   18fe2:	2100      	movs	r1, #0
   18fe4:	2000      	movs	r0, #0
   18fe6:	f7f8 fb5c 	bl	116a2 <mp_obj_new_list>
   18fea:	61f8      	str	r0, [r7, #28]
    if (n_args == 0) {
   18fec:	687b      	ldr	r3, [r7, #4]
   18fee:	2b00      	cmp	r3, #0
   18ff0:	d121      	bne.n	19036 <mp_builtin_dir+0x5e>
        // Make a list of names in the local namespace
        mp_obj_dict_t *dict = mp_locals_get();
   18ff2:	f7ff fec9 	bl	18d88 <mp_locals_get>
   18ff6:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   18ff8:	2300      	movs	r3, #0
   18ffa:	627b      	str	r3, [r7, #36]	; 0x24
   18ffc:	e015      	b.n	1902a <mp_builtin_dir+0x52>
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   18ffe:	69bb      	ldr	r3, [r7, #24]
   19000:	3304      	adds	r3, #4
   19002:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19004:	4618      	mov	r0, r3
   19006:	f7ff fe89 	bl	18d1c <MP_MAP_SLOT_IS_FILLED>
   1900a:	4603      	mov	r3, r0
   1900c:	2b00      	cmp	r3, #0
   1900e:	d009      	beq.n	19024 <mp_builtin_dir+0x4c>
                mp_obj_list_append(dir, dict->map.table[i].key);
   19010:	69bb      	ldr	r3, [r7, #24]
   19012:	68da      	ldr	r2, [r3, #12]
   19014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19016:	00db      	lsls	r3, r3, #3
   19018:	4413      	add	r3, r2
   1901a:	681b      	ldr	r3, [r3, #0]
   1901c:	4619      	mov	r1, r3
   1901e:	69f8      	ldr	r0, [r7, #28]
   19020:	f7f7 fed3 	bl	10dca <mp_obj_list_append>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   19024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19026:	3301      	adds	r3, #1
   19028:	627b      	str	r3, [r7, #36]	; 0x24
   1902a:	69bb      	ldr	r3, [r7, #24]
   1902c:	689a      	ldr	r2, [r3, #8]
   1902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19030:	429a      	cmp	r2, r3
   19032:	d8e4      	bhi.n	18ffe <mp_builtin_dir+0x26>
   19034:	e024      	b.n	19080 <mp_builtin_dir+0xa8>
            }
        }
    } else { // n_args == 1
        // Make a list of names in the given object
        // Implemented by probing all possible qstrs with mp_load_method_maybe
        size_t nqstr = QSTR_TOTAL();
   19036:	4b15      	ldr	r3, [pc, #84]	; (1908c <mp_builtin_dir+0xb4>)
   19038:	691b      	ldr	r3, [r3, #16]
   1903a:	685a      	ldr	r2, [r3, #4]
   1903c:	4b13      	ldr	r3, [pc, #76]	; (1908c <mp_builtin_dir+0xb4>)
   1903e:	691b      	ldr	r3, [r3, #16]
   19040:	68db      	ldr	r3, [r3, #12]
   19042:	4413      	add	r3, r2
   19044:	617b      	str	r3, [r7, #20]
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   19046:	2302      	movs	r3, #2
   19048:	623b      	str	r3, [r7, #32]
   1904a:	e015      	b.n	19078 <mp_builtin_dir+0xa0>
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, false);
   1904c:	683b      	ldr	r3, [r7, #0]
   1904e:	6818      	ldr	r0, [r3, #0]
   19050:	f107 020c 	add.w	r2, r7, #12
   19054:	2300      	movs	r3, #0
   19056:	6a39      	ldr	r1, [r7, #32]
   19058:	f7f3 fb70 	bl	c73c <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   1905c:	68fb      	ldr	r3, [r7, #12]
   1905e:	2b00      	cmp	r3, #0
   19060:	d007      	beq.n	19072 <mp_builtin_dir+0x9a>
                // This relies on MP_QSTR__dir__ being first after MP_QSTR_
                if (i == MP_QSTR___dir__ && dest[1] != MP_OBJ_NULL) {
                    return mp_call_method_n_kw(0, 0, dest);
                }
                #endif
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   19062:	6a3b      	ldr	r3, [r7, #32]
   19064:	009b      	lsls	r3, r3, #2
   19066:	f043 0302 	orr.w	r3, r3, #2
   1906a:	4619      	mov	r1, r3
   1906c:	69f8      	ldr	r0, [r7, #28]
   1906e:	f7f7 feac 	bl	10dca <mp_obj_list_append>
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   19072:	6a3b      	ldr	r3, [r7, #32]
   19074:	3301      	adds	r3, #1
   19076:	623b      	str	r3, [r7, #32]
   19078:	6a3a      	ldr	r2, [r7, #32]
   1907a:	697b      	ldr	r3, [r7, #20]
   1907c:	429a      	cmp	r2, r3
   1907e:	d3e5      	bcc.n	1904c <mp_builtin_dir+0x74>
            }
        }
    }
    return dir;
   19080:	69fb      	ldr	r3, [r7, #28]
}
   19082:	4618      	mov	r0, r3
   19084:	3728      	adds	r7, #40	; 0x28
   19086:	46bd      	mov	sp, r7
   19088:	bd80      	pop	{r7, pc}
   1908a:	bf00      	nop
   1908c:	200012f0 	.word	0x200012f0

00019090 <mp_builtin_divmod>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_dir_obj, 0, 1, mp_builtin_dir);

STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   19090:	b580      	push	{r7, lr}
   19092:	b082      	sub	sp, #8
   19094:	af00      	add	r7, sp, #0
   19096:	6078      	str	r0, [r7, #4]
   19098:	6039      	str	r1, [r7, #0]
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   1909a:	683a      	ldr	r2, [r7, #0]
   1909c:	6879      	ldr	r1, [r7, #4]
   1909e:	2021      	movs	r0, #33	; 0x21
   190a0:	f7f2 fb9e 	bl	b7e0 <mp_binary_op>
   190a4:	4603      	mov	r3, r0
}
   190a6:	4618      	mov	r0, r3
   190a8:	3708      	adds	r7, #8
   190aa:	46bd      	mov	sp, r7
   190ac:	bd80      	pop	{r7, pc}

000190ae <mp_builtin_hash>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_divmod_obj, mp_builtin_divmod);

STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   190ae:	b580      	push	{r7, lr}
   190b0:	b082      	sub	sp, #8
   190b2:	af00      	add	r7, sp, #0
   190b4:	6078      	str	r0, [r7, #4]
    // result is guaranteed to be a (small) int
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   190b6:	6879      	ldr	r1, [r7, #4]
   190b8:	2006      	movs	r0, #6
   190ba:	f7f2 faa1 	bl	b600 <mp_unary_op>
   190be:	4603      	mov	r3, r0
}
   190c0:	4618      	mov	r0, r3
   190c2:	3708      	adds	r7, #8
   190c4:	46bd      	mov	sp, r7
   190c6:	bd80      	pop	{r7, pc}

000190c8 <mp_builtin_hex>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_hash_obj, mp_builtin_hash);

STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   190c8:	b580      	push	{r7, lr}
   190ca:	b082      	sub	sp, #8
   190cc:	af00      	add	r7, sp, #0
   190ce:	6078      	str	r0, [r7, #4]
    #if MICROPY_PY_BUILTINS_STR_OP_MODULO
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   190d0:	687a      	ldr	r2, [r7, #4]
   190d2:	21ae      	movs	r1, #174	; 0xae
   190d4:	201f      	movs	r0, #31
   190d6:	f7f2 fb83 	bl	b7e0 <mp_binary_op>
   190da:	4603      	mov	r3, r0
    #else
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_x_brace_close_), o_in };
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
    #endif
}
   190dc:	4618      	mov	r0, r3
   190de:	3708      	adds	r7, #8
   190e0:	46bd      	mov	sp, r7
   190e2:	bd80      	pop	{r7, pc}

000190e4 <mp_builtin_iter>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_input_obj, 0, 1, mp_builtin_input);

#endif

STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   190e4:	b580      	push	{r7, lr}
   190e6:	b082      	sub	sp, #8
   190e8:	af00      	add	r7, sp, #0
   190ea:	6078      	str	r0, [r7, #4]
    return mp_getiter(o_in, NULL);
   190ec:	2100      	movs	r1, #0
   190ee:	6878      	ldr	r0, [r7, #4]
   190f0:	f7f3 fb80 	bl	c7f4 <mp_getiter>
   190f4:	4603      	mov	r3, r0
}
   190f6:	4618      	mov	r0, r3
   190f8:	3708      	adds	r7, #8
   190fa:	46bd      	mov	sp, r7
   190fc:	bd80      	pop	{r7, pc}

000190fe <mp_builtin_next>:
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_min_obj, 1, mp_builtin_min);

#endif

STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   190fe:	b580      	push	{r7, lr}
   19100:	b084      	sub	sp, #16
   19102:	af00      	add	r7, sp, #0
   19104:	6078      	str	r0, [r7, #4]
    mp_obj_t ret = mp_iternext_allow_raise(o);
   19106:	6878      	ldr	r0, [r7, #4]
   19108:	f7f3 fbc8 	bl	c89c <mp_iternext_allow_raise>
   1910c:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   1910e:	68fb      	ldr	r3, [r7, #12]
   19110:	2b04      	cmp	r3, #4
   19112:	d106      	bne.n	19122 <mp_builtin_next+0x24>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   19114:	4805      	ldr	r0, [pc, #20]	; (1912c <mp_builtin_next+0x2e>)
   19116:	f7f6 f90d 	bl	f334 <mp_obj_new_exception>
   1911a:	4603      	mov	r3, r0
   1911c:	4618      	mov	r0, r3
   1911e:	f7e7 f8df 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   19122:	68fb      	ldr	r3, [r7, #12]
    }
}
   19124:	4618      	mov	r0, r3
   19126:	3710      	adds	r7, #16
   19128:	46bd      	mov	sp, r7
   1912a:	bd80      	pop	{r7, pc}
   1912c:	00021f70 	.word	0x00021f70

00019130 <mp_builtin_oct>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_next_obj, mp_builtin_next);

STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   19130:	b580      	push	{r7, lr}
   19132:	b082      	sub	sp, #8
   19134:	af00      	add	r7, sp, #0
   19136:	6078      	str	r0, [r7, #4]
    #if MICROPY_PY_BUILTINS_STR_OP_MODULO
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   19138:	687a      	ldr	r2, [r7, #4]
   1913a:	21aa      	movs	r1, #170	; 0xaa
   1913c:	201f      	movs	r0, #31
   1913e:	f7f2 fb4f 	bl	b7e0 <mp_binary_op>
   19142:	4603      	mov	r3, r0
    #else
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_o_brace_close_), o_in };
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
    #endif
}
   19144:	4618      	mov	r0, r3
   19146:	3708      	adds	r7, #8
   19148:	46bd      	mov	sp, r7
   1914a:	bd80      	pop	{r7, pc}

0001914c <mp_builtin_ord>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_oct_obj, mp_builtin_oct);

STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   1914c:	b580      	push	{r7, lr}
   1914e:	b084      	sub	sp, #16
   19150:	af00      	add	r7, sp, #0
   19152:	6078      	str	r0, [r7, #4]
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   19154:	f107 0308 	add.w	r3, r7, #8
   19158:	4619      	mov	r1, r3
   1915a:	6878      	ldr	r0, [r7, #4]
   1915c:	f7fc f9a2 	bl	154a4 <mp_obj_str_get_data>
   19160:	60f8      	str	r0, [r7, #12]
        }
    } else
    #endif
    {
        // a bytes object, or a str without unicode support (don't sign extend the char)
        if (len == 1) {
   19162:	68bb      	ldr	r3, [r7, #8]
   19164:	2b01      	cmp	r3, #1
   19166:	d105      	bne.n	19174 <mp_builtin_ord+0x28>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   19168:	68fb      	ldr	r3, [r7, #12]
   1916a:	781b      	ldrb	r3, [r3, #0]
   1916c:	005b      	lsls	r3, r3, #1
   1916e:	f043 0301 	orr.w	r3, r3, #1
   19172:	e002      	b.n	1917a <mp_builtin_ord+0x2e>
        }
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("ord expects a character");
   19174:	4803      	ldr	r0, [pc, #12]	; (19184 <mp_builtin_ord+0x38>)
   19176:	f7f3 fe77 	bl	ce68 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "ord() expected a character, but string of length %d found", (int)len));
    }
}
   1917a:	4618      	mov	r0, r3
   1917c:	3710      	adds	r7, #16
   1917e:	46bd      	mov	sp, r7
   19180:	bd80      	pop	{r7, pc}
   19182:	bf00      	nop
   19184:	000242c4 	.word	0x000242c4

00019188 <mp_builtin_pow>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_ord_obj, mp_builtin_ord);

STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   19188:	b580      	push	{r7, lr}
   1918a:	b082      	sub	sp, #8
   1918c:	af00      	add	r7, sp, #0
   1918e:	6078      	str	r0, [r7, #4]
   19190:	6039      	str	r1, [r7, #0]
    switch (n_args) {
   19192:	687b      	ldr	r3, [r7, #4]
   19194:	2b02      	cmp	r3, #2
   19196:	d10a      	bne.n	191ae <mp_builtin_pow+0x26>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   19198:	683b      	ldr	r3, [r7, #0]
   1919a:	6819      	ldr	r1, [r3, #0]
   1919c:	683b      	ldr	r3, [r7, #0]
   1919e:	3304      	adds	r3, #4
   191a0:	681b      	ldr	r3, [r3, #0]
   191a2:	461a      	mov	r2, r3
   191a4:	2020      	movs	r0, #32
   191a6:	f7f2 fb1b 	bl	b7e0 <mp_binary_op>
   191aa:	4603      	mov	r3, r0
   191ac:	e003      	b.n	191b6 <mp_builtin_pow+0x2e>
        default:
#if !MICROPY_PY_BUILTINS_POW3
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   191ae:	4904      	ldr	r1, [pc, #16]	; (191c0 <mp_builtin_pow+0x38>)
   191b0:	4804      	ldr	r0, [pc, #16]	; (191c4 <mp_builtin_pow+0x3c>)
   191b2:	f7f3 fe37 	bl	ce24 <mp_raise_msg>
            return mp_binary_op(MP_BINARY_OP_MODULO, mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]), args[2]);
#else
            return mp_obj_int_pow3(args[0], args[1], args[2]);
#endif
    }
}
   191b6:	4618      	mov	r0, r3
   191b8:	3708      	adds	r7, #8
   191ba:	46bd      	mov	sp, r7
   191bc:	bd80      	pop	{r7, pc}
   191be:	bf00      	nop
   191c0:	000242e4 	.word	0x000242e4
   191c4:	000222f4 	.word	0x000222f4

000191c8 <mp_builtin_print>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_pow_obj, 2, 3, mp_builtin_pow);

STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   191c8:	b580      	push	{r7, lr}
   191ca:	b08e      	sub	sp, #56	; 0x38
   191cc:	af02      	add	r7, sp, #8
   191ce:	60f8      	str	r0, [r7, #12]
   191d0:	60b9      	str	r1, [r7, #8]
   191d2:	607a      	str	r2, [r7, #4]
    // parse args (a union is used to reduce the amount of C stack that is needed)
    union {
        mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   191d4:	f107 0314 	add.w	r3, r7, #20
   191d8:	9301      	str	r3, [sp, #4]
   191da:	4b25      	ldr	r3, [pc, #148]	; (19270 <mp_builtin_print+0xa8>)
   191dc:	9300      	str	r3, [sp, #0]
   191de:	2302      	movs	r3, #2
   191e0:	687a      	ldr	r2, [r7, #4]
   191e2:	2100      	movs	r1, #0
   191e4:	2000      	movs	r0, #0
   191e6:	f7f3 fe9f 	bl	cf28 <mp_arg_parse_all>
    mp_get_stream_raise(u.args[ARG_file].u_obj, MP_STREAM_OP_WRITE);
    mp_print_t print = {MP_OBJ_TO_PTR(u.args[ARG_file].u_obj), mp_stream_write_adaptor};
    #endif

    // extract the objects first because we are going to use the other part of the union
    mp_obj_t sep = u.args[ARG_sep].u_obj;
   191ea:	697b      	ldr	r3, [r7, #20]
   191ec:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_obj_t end = u.args[ARG_end].u_obj;
   191ee:	69bb      	ldr	r3, [r7, #24]
   191f0:	627b      	str	r3, [r7, #36]	; 0x24
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   191f2:	f107 0314 	add.w	r3, r7, #20
   191f6:	4619      	mov	r1, r3
   191f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   191fa:	f7fc f953 	bl	154a4 <mp_obj_str_get_data>
   191fe:	6238      	str	r0, [r7, #32]
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   19200:	f107 0314 	add.w	r3, r7, #20
   19204:	3304      	adds	r3, #4
   19206:	4619      	mov	r1, r3
   19208:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1920a:	f7fc f94b 	bl	154a4 <mp_obj_str_get_data>
   1920e:	61f8      	str	r0, [r7, #28]

    for (size_t i = 0; i < n_args; i++) {
   19210:	2300      	movs	r3, #0
   19212:	62fb      	str	r3, [r7, #44]	; 0x2c
   19214:	e019      	b.n	1924a <mp_builtin_print+0x82>
        if (i > 0) {
   19216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19218:	2b00      	cmp	r3, #0
   1921a:	d009      	beq.n	19230 <mp_builtin_print+0x68>
            #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
            mp_stream_write_adaptor(print.data, sep_data, u.len[0]);
            #else
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   1921c:	697a      	ldr	r2, [r7, #20]
   1921e:	2300      	movs	r3, #0
   19220:	9301      	str	r3, [sp, #4]
   19222:	2300      	movs	r3, #0
   19224:	9300      	str	r3, [sp, #0]
   19226:	2300      	movs	r3, #0
   19228:	6a39      	ldr	r1, [r7, #32]
   1922a:	4812      	ldr	r0, [pc, #72]	; (19274 <mp_builtin_print+0xac>)
   1922c:	f7e8 fb62 	bl	18f4 <mp_print_strn>
            #endif
        }
        #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
        mp_obj_print_helper(&print, pos_args[i], PRINT_STR);
        #else
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   19230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19232:	009b      	lsls	r3, r3, #2
   19234:	68ba      	ldr	r2, [r7, #8]
   19236:	4413      	add	r3, r2
   19238:	681b      	ldr	r3, [r3, #0]
   1923a:	2200      	movs	r2, #0
   1923c:	4619      	mov	r1, r3
   1923e:	480d      	ldr	r0, [pc, #52]	; (19274 <mp_builtin_print+0xac>)
   19240:	f7f4 fa67 	bl	d712 <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   19244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19246:	3301      	adds	r3, #1
   19248:	62fb      	str	r3, [r7, #44]	; 0x2c
   1924a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1924c:	68fb      	ldr	r3, [r7, #12]
   1924e:	429a      	cmp	r2, r3
   19250:	d3e1      	bcc.n	19216 <mp_builtin_print+0x4e>
        #endif
    }
    #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
    mp_stream_write_adaptor(print.data, end_data, u.len[1]);
    #else
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   19252:	69ba      	ldr	r2, [r7, #24]
   19254:	2300      	movs	r3, #0
   19256:	9301      	str	r3, [sp, #4]
   19258:	2300      	movs	r3, #0
   1925a:	9300      	str	r3, [sp, #0]
   1925c:	2300      	movs	r3, #0
   1925e:	69f9      	ldr	r1, [r7, #28]
   19260:	4804      	ldr	r0, [pc, #16]	; (19274 <mp_builtin_print+0xac>)
   19262:	f7e8 fb47 	bl	18f4 <mp_print_strn>
    #endif
    return mp_const_none;
   19266:	4b04      	ldr	r3, [pc, #16]	; (19278 <mp_builtin_print+0xb0>)
}
   19268:	4618      	mov	r0, r3
   1926a:	3730      	adds	r7, #48	; 0x30
   1926c:	46bd      	mov	sp, r7
   1926e:	bd80      	pop	{r7, pc}
   19270:	0002464c 	.word	0x0002464c
   19274:	0001f4ac 	.word	0x0001f4ac
   19278:	00023108 	.word	0x00023108

0001927c <mp_builtin___repl_print__>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_print_obj, 0, mp_builtin_print);

STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   1927c:	b580      	push	{r7, lr}
   1927e:	b082      	sub	sp, #8
   19280:	af00      	add	r7, sp, #0
   19282:	6078      	str	r0, [r7, #4]
    if (o != mp_const_none) {
   19284:	687b      	ldr	r3, [r7, #4]
   19286:	4a08      	ldr	r2, [pc, #32]	; (192a8 <mp_builtin___repl_print__+0x2c>)
   19288:	4293      	cmp	r3, r2
   1928a:	d008      	beq.n	1929e <mp_builtin___repl_print__+0x22>
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   1928c:	2201      	movs	r2, #1
   1928e:	6879      	ldr	r1, [r7, #4]
   19290:	4806      	ldr	r0, [pc, #24]	; (192ac <mp_builtin___repl_print__+0x30>)
   19292:	f7f4 fa3e 	bl	d712 <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   19296:	4906      	ldr	r1, [pc, #24]	; (192b0 <mp_builtin___repl_print__+0x34>)
   19298:	4804      	ldr	r0, [pc, #16]	; (192ac <mp_builtin___repl_print__+0x30>)
   1929a:	f7e8 fb13 	bl	18c4 <mp_print_str>
        // Set "_" special variable
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, o};
        mp_type_module.attr(MP_OBJ_FROM_PTR(&mp_module_builtins), MP_QSTR__, dest);
        #endif
    }
    return mp_const_none;
   1929e:	4b02      	ldr	r3, [pc, #8]	; (192a8 <mp_builtin___repl_print__+0x2c>)
}
   192a0:	4618      	mov	r0, r3
   192a2:	3708      	adds	r7, #8
   192a4:	46bd      	mov	sp, r7
   192a6:	bd80      	pop	{r7, pc}
   192a8:	00023108 	.word	0x00023108
   192ac:	0001f4ac 	.word	0x0001f4ac
   192b0:	00024318 	.word	0x00024318

000192b4 <mp_builtin_repr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin___repl_print___obj, mp_builtin___repl_print__);

STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   192b4:	b580      	push	{r7, lr}
   192b6:	b088      	sub	sp, #32
   192b8:	af00      	add	r7, sp, #0
   192ba:	6078      	str	r0, [r7, #4]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   192bc:	f107 0208 	add.w	r2, r7, #8
   192c0:	f107 0310 	add.w	r3, r7, #16
   192c4:	2110      	movs	r1, #16
   192c6:	4618      	mov	r0, r3
   192c8:	f7e8 f891 	bl	13ee <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   192cc:	f107 0308 	add.w	r3, r7, #8
   192d0:	2201      	movs	r2, #1
   192d2:	6879      	ldr	r1, [r7, #4]
   192d4:	4618      	mov	r0, r3
   192d6:	f7f4 fa1c 	bl	d712 <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   192da:	f107 0310 	add.w	r3, r7, #16
   192de:	4619      	mov	r1, r3
   192e0:	4803      	ldr	r0, [pc, #12]	; (192f0 <mp_builtin_repr+0x3c>)
   192e2:	f7fb ff1e 	bl	15122 <mp_obj_new_str_from_vstr>
   192e6:	4603      	mov	r3, r0
}
   192e8:	4618      	mov	r0, r3
   192ea:	3720      	adds	r7, #32
   192ec:	46bd      	mov	sp, r7
   192ee:	bd80      	pop	{r7, pc}
   192f0:	0002379c 	.word	0x0002379c

000192f4 <mp_builtin_round>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_repr_obj, mp_builtin_repr);

STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   192f4:	b580      	push	{r7, lr}
   192f6:	b084      	sub	sp, #16
   192f8:	af00      	add	r7, sp, #0
   192fa:	6078      	str	r0, [r7, #4]
   192fc:	6039      	str	r1, [r7, #0]
    mp_obj_t o_in = args[0];
   192fe:	683b      	ldr	r3, [r7, #0]
   19300:	681b      	ldr	r3, [r3, #0]
   19302:	60fb      	str	r3, [r7, #12]
    if (MP_OBJ_IS_INT(o_in)) {
   19304:	68f8      	ldr	r0, [r7, #12]
   19306:	f7ff fce5 	bl	18cd4 <MP_OBJ_IS_SMALL_INT>
   1930a:	4603      	mov	r3, r0
   1930c:	2b00      	cmp	r3, #0
   1930e:	d10a      	bne.n	19326 <mp_builtin_round+0x32>
   19310:	68f8      	ldr	r0, [r7, #12]
   19312:	f7ff fcf1 	bl	18cf8 <MP_OBJ_IS_OBJ>
   19316:	4603      	mov	r3, r0
   19318:	2b00      	cmp	r3, #0
   1931a:	d00c      	beq.n	19336 <mp_builtin_round+0x42>
   1931c:	68fb      	ldr	r3, [r7, #12]
   1931e:	681b      	ldr	r3, [r3, #0]
   19320:	4a0b      	ldr	r2, [pc, #44]	; (19350 <mp_builtin_round+0x5c>)
   19322:	4293      	cmp	r3, r2
   19324:	d107      	bne.n	19336 <mp_builtin_round+0x42>
        if (n_args <= 1) {
   19326:	687b      	ldr	r3, [r7, #4]
   19328:	2b01      	cmp	r3, #1
   1932a:	d801      	bhi.n	19330 <mp_builtin_round+0x3c>
            return o_in;
   1932c:	68fb      	ldr	r3, [r7, #12]
   1932e:	e00a      	b.n	19346 <mp_builtin_round+0x52>
        }

        #if !MICROPY_PY_BUILTINS_ROUND_INT
        mp_raise_NotImplementedError(NULL);
   19330:	2000      	movs	r0, #0
   19332:	f7f3 fdb5 	bl	cea0 <mp_raise_NotImplementedError>
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
    return mp_obj_new_int_from_float(rounded);
#else
    mp_int_t r = mp_obj_get_int(o_in);
   19336:	68f8      	ldr	r0, [r7, #12]
   19338:	f7f4 fb96 	bl	da68 <mp_obj_get_int>
   1933c:	60b8      	str	r0, [r7, #8]
    return mp_obj_new_int(r);
   1933e:	68b8      	ldr	r0, [r7, #8]
   19340:	f7f7 fa14 	bl	1076c <mp_obj_new_int>
   19344:	4603      	mov	r3, r0
#endif
}
   19346:	4618      	mov	r0, r3
   19348:	3710      	adds	r7, #16
   1934a:	46bd      	mov	sp, r7
   1934c:	bd80      	pop	{r7, pc}
   1934e:	bf00      	nop
   19350:	00022bbc 	.word	0x00022bbc

00019354 <mp_builtin_sum>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_round_obj, 1, 2, mp_builtin_round);

STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   19354:	b580      	push	{r7, lr}
   19356:	b08a      	sub	sp, #40	; 0x28
   19358:	af00      	add	r7, sp, #0
   1935a:	6078      	str	r0, [r7, #4]
   1935c:	6039      	str	r1, [r7, #0]
    mp_obj_t value;
    switch (n_args) {
   1935e:	687b      	ldr	r3, [r7, #4]
   19360:	2b01      	cmp	r3, #1
   19362:	d102      	bne.n	1936a <mp_builtin_sum+0x16>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   19364:	2301      	movs	r3, #1
   19366:	627b      	str	r3, [r7, #36]	; 0x24
   19368:	e003      	b.n	19372 <mp_builtin_sum+0x1e>
        default: value = args[1]; break;
   1936a:	683b      	ldr	r3, [r7, #0]
   1936c:	685b      	ldr	r3, [r3, #4]
   1936e:	627b      	str	r3, [r7, #36]	; 0x24
   19370:	bf00      	nop
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   19372:	683b      	ldr	r3, [r7, #0]
   19374:	681b      	ldr	r3, [r3, #0]
   19376:	f107 020c 	add.w	r2, r7, #12
   1937a:	4611      	mov	r1, r2
   1937c:	4618      	mov	r0, r3
   1937e:	f7f3 fa39 	bl	c7f4 <mp_getiter>
   19382:	6238      	str	r0, [r7, #32]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19384:	e005      	b.n	19392 <mp_builtin_sum+0x3e>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   19386:	69fa      	ldr	r2, [r7, #28]
   19388:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1938a:	201a      	movs	r0, #26
   1938c:	f7f2 fa28 	bl	b7e0 <mp_binary_op>
   19390:	6278      	str	r0, [r7, #36]	; 0x24
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19392:	6a38      	ldr	r0, [r7, #32]
   19394:	f7f3 fab0 	bl	c8f8 <mp_iternext>
   19398:	61f8      	str	r0, [r7, #28]
   1939a:	69fb      	ldr	r3, [r7, #28]
   1939c:	2b04      	cmp	r3, #4
   1939e:	d1f2      	bne.n	19386 <mp_builtin_sum+0x32>
    }
    return value;
   193a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   193a2:	4618      	mov	r0, r3
   193a4:	3728      	adds	r7, #40	; 0x28
   193a6:	46bd      	mov	sp, r7
   193a8:	bd80      	pop	{r7, pc}

000193aa <mp_builtin_sorted>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_sum_obj, 1, 2, mp_builtin_sum);

STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   193aa:	b590      	push	{r4, r7, lr}
   193ac:	b087      	sub	sp, #28
   193ae:	af00      	add	r7, sp, #0
   193b0:	60f8      	str	r0, [r7, #12]
   193b2:	60b9      	str	r1, [r7, #8]
   193b4:	607a      	str	r2, [r7, #4]
    if (n_args > 1) {
   193b6:	68fb      	ldr	r3, [r7, #12]
   193b8:	2b01      	cmp	r3, #1
   193ba:	d902      	bls.n	193c2 <mp_builtin_sorted+0x18>
        mp_raise_TypeError("must use keyword argument for key function");
   193bc:	480b      	ldr	r0, [pc, #44]	; (193ec <mp_builtin_sorted+0x42>)
   193be:	f7f3 fd53 	bl	ce68 <mp_raise_TypeError>
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   193c2:	4b0b      	ldr	r3, [pc, #44]	; (193f0 <mp_builtin_sorted+0x46>)
   193c4:	68dc      	ldr	r4, [r3, #12]
   193c6:	68bb      	ldr	r3, [r7, #8]
   193c8:	2200      	movs	r2, #0
   193ca:	2101      	movs	r1, #1
   193cc:	4808      	ldr	r0, [pc, #32]	; (193f0 <mp_builtin_sorted+0x46>)
   193ce:	47a0      	blx	r4
   193d0:	4603      	mov	r3, r0
   193d2:	617b      	str	r3, [r7, #20]
    mp_obj_list_sort(1, &self, kwargs);
   193d4:	f107 0314 	add.w	r3, r7, #20
   193d8:	687a      	ldr	r2, [r7, #4]
   193da:	4619      	mov	r1, r3
   193dc:	2001      	movs	r0, #1
   193de:	f7f7 fef6 	bl	111ce <mp_obj_list_sort>

    return self;
   193e2:	697b      	ldr	r3, [r7, #20]
}
   193e4:	4618      	mov	r0, r3
   193e6:	371c      	adds	r7, #28
   193e8:	46bd      	mov	sp, r7
   193ea:	bd90      	pop	{r4, r7, pc}
   193ec:	00024344 	.word	0x00024344
   193f0:	00022e28 	.word	0x00022e28

000193f4 <mp_load_attr_default>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_sorted_obj, 1, mp_builtin_sorted);

// See mp_load_attr() if making any changes
static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
   193f4:	b580      	push	{r7, lr}
   193f6:	b086      	sub	sp, #24
   193f8:	af00      	add	r7, sp, #0
   193fa:	60f8      	str	r0, [r7, #12]
   193fc:	60b9      	str	r1, [r7, #8]
   193fe:	607a      	str	r2, [r7, #4]
    mp_obj_t dest[2];
    // use load_method, raising or not raising exception
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   19400:	687b      	ldr	r3, [r7, #4]
   19402:	2b00      	cmp	r3, #0
   19404:	d101      	bne.n	1940a <mp_load_attr_default+0x16>
   19406:	4b0e      	ldr	r3, [pc, #56]	; (19440 <mp_load_attr_default+0x4c>)
   19408:	e000      	b.n	1940c <mp_load_attr_default+0x18>
   1940a:	4b0e      	ldr	r3, [pc, #56]	; (19444 <mp_load_attr_default+0x50>)
   1940c:	f107 0210 	add.w	r2, r7, #16
   19410:	68b9      	ldr	r1, [r7, #8]
   19412:	68f8      	ldr	r0, [r7, #12]
   19414:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   19416:	693b      	ldr	r3, [r7, #16]
   19418:	2b00      	cmp	r3, #0
   1941a:	d101      	bne.n	19420 <mp_load_attr_default+0x2c>
        return defval;
   1941c:	687b      	ldr	r3, [r7, #4]
   1941e:	e00b      	b.n	19438 <mp_load_attr_default+0x44>
    } else if (dest[1] == MP_OBJ_NULL) {
   19420:	697b      	ldr	r3, [r7, #20]
   19422:	2b00      	cmp	r3, #0
   19424:	d101      	bne.n	1942a <mp_load_attr_default+0x36>
        // load_method returned just a normal attribute
        return dest[0];
   19426:	693b      	ldr	r3, [r7, #16]
   19428:	e006      	b.n	19438 <mp_load_attr_default+0x44>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   1942a:	693b      	ldr	r3, [r7, #16]
   1942c:	697a      	ldr	r2, [r7, #20]
   1942e:	4611      	mov	r1, r2
   19430:	4618      	mov	r0, r3
   19432:	f7f4 fe82 	bl	e13a <mp_obj_new_bound_meth>
   19436:	4603      	mov	r3, r0
    }
}
   19438:	4618      	mov	r0, r3
   1943a:	3718      	adds	r7, #24
   1943c:	46bd      	mov	sp, r7
   1943e:	bd80      	pop	{r7, pc}
   19440:	0000c705 	.word	0x0000c705
   19444:	0000c641 	.word	0x0000c641

00019448 <mp_builtin_getattr>:

STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   19448:	b590      	push	{r4, r7, lr}
   1944a:	b085      	sub	sp, #20
   1944c:	af00      	add	r7, sp, #0
   1944e:	6078      	str	r0, [r7, #4]
   19450:	6039      	str	r1, [r7, #0]
    mp_obj_t defval = MP_OBJ_NULL;
   19452:	2300      	movs	r3, #0
   19454:	60fb      	str	r3, [r7, #12]
    if (n_args > 2) {
   19456:	687b      	ldr	r3, [r7, #4]
   19458:	2b02      	cmp	r3, #2
   1945a:	d902      	bls.n	19462 <mp_builtin_getattr+0x1a>
        defval = args[2];
   1945c:	683b      	ldr	r3, [r7, #0]
   1945e:	689b      	ldr	r3, [r3, #8]
   19460:	60fb      	str	r3, [r7, #12]
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   19462:	683b      	ldr	r3, [r7, #0]
   19464:	681c      	ldr	r4, [r3, #0]
   19466:	683b      	ldr	r3, [r7, #0]
   19468:	3304      	adds	r3, #4
   1946a:	681b      	ldr	r3, [r3, #0]
   1946c:	4618      	mov	r0, r3
   1946e:	f7fb ffb3 	bl	153d8 <mp_obj_str_get_qstr>
   19472:	4603      	mov	r3, r0
   19474:	68fa      	ldr	r2, [r7, #12]
   19476:	4619      	mov	r1, r3
   19478:	4620      	mov	r0, r4
   1947a:	f7ff ffbb 	bl	193f4 <mp_load_attr_default>
   1947e:	4603      	mov	r3, r0
}
   19480:	4618      	mov	r0, r3
   19482:	3714      	adds	r7, #20
   19484:	46bd      	mov	sp, r7
   19486:	bd90      	pop	{r4, r7, pc}

00019488 <mp_builtin_setattr>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_getattr_obj, 2, 3, mp_builtin_getattr);

STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   19488:	b580      	push	{r7, lr}
   1948a:	b084      	sub	sp, #16
   1948c:	af00      	add	r7, sp, #0
   1948e:	60f8      	str	r0, [r7, #12]
   19490:	60b9      	str	r1, [r7, #8]
   19492:	607a      	str	r2, [r7, #4]
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   19494:	68b8      	ldr	r0, [r7, #8]
   19496:	f7fb ff9f 	bl	153d8 <mp_obj_str_get_qstr>
   1949a:	4603      	mov	r3, r0
   1949c:	687a      	ldr	r2, [r7, #4]
   1949e:	4619      	mov	r1, r3
   194a0:	68f8      	ldr	r0, [r7, #12]
   194a2:	f7f3 f97f 	bl	c7a4 <mp_store_attr>
    return mp_const_none;
   194a6:	4b02      	ldr	r3, [pc, #8]	; (194b0 <mp_builtin_setattr+0x28>)
}
   194a8:	4618      	mov	r0, r3
   194aa:	3710      	adds	r7, #16
   194ac:	46bd      	mov	sp, r7
   194ae:	bd80      	pop	{r7, pc}
   194b0:	00023108 	.word	0x00023108

000194b4 <mp_builtin_hasattr>:
    return mp_builtin_setattr(base, attr, MP_OBJ_NULL);
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_delattr_obj, mp_builtin_delattr);
#endif

STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   194b4:	b580      	push	{r7, lr}
   194b6:	b086      	sub	sp, #24
   194b8:	af00      	add	r7, sp, #0
   194ba:	6078      	str	r0, [r7, #4]
   194bc:	6039      	str	r1, [r7, #0]
    qstr attr = mp_obj_str_get_qstr(attr_in);
   194be:	6838      	ldr	r0, [r7, #0]
   194c0:	f7fb ff8a 	bl	153d8 <mp_obj_str_get_qstr>
   194c4:	6178      	str	r0, [r7, #20]
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, false);
   194c6:	f107 020c 	add.w	r2, r7, #12
   194ca:	2300      	movs	r3, #0
   194cc:	6979      	ldr	r1, [r7, #20]
   194ce:	6878      	ldr	r0, [r7, #4]
   194d0:	f7f3 f934 	bl	c73c <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   194d4:	68fb      	ldr	r3, [r7, #12]
   194d6:	2b00      	cmp	r3, #0
   194d8:	bf14      	ite	ne
   194da:	2301      	movne	r3, #1
   194dc:	2300      	moveq	r3, #0
   194de:	b2db      	uxtb	r3, r3
   194e0:	4618      	mov	r0, r3
   194e2:	f7ff fc3c 	bl	18d5e <mp_obj_new_bool>
   194e6:	4603      	mov	r3, r0
}
   194e8:	4618      	mov	r0, r3
   194ea:	3718      	adds	r7, #24
   194ec:	46bd      	mov	sp, r7
   194ee:	bd80      	pop	{r7, pc}

000194f0 <mp_builtin_globals>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
   194f0:	b580      	push	{r7, lr}
   194f2:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_globals_get());
   194f4:	f7ff fc64 	bl	18dc0 <mp_globals_get>
   194f8:	4603      	mov	r3, r0
}
   194fa:	4618      	mov	r0, r3
   194fc:	bd80      	pop	{r7, pc}

000194fe <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
   194fe:	b580      	push	{r7, lr}
   19500:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_locals_get());
   19502:	f7ff fc41 	bl	18d88 <mp_locals_get>
   19506:	4603      	mov	r3, r0
}
   19508:	4618      	mov	r0, r3
   1950a:	bd80      	pop	{r7, pc}

0001950c <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   1950c:	b580      	push	{r7, lr}
   1950e:	b082      	sub	sp, #8
   19510:	af00      	add	r7, sp, #0
   19512:	6078      	str	r0, [r7, #4]
   19514:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   19516:	687b      	ldr	r3, [r7, #4]
   19518:	2b00      	cmp	r3, #0
   1951a:	d106      	bne.n	1952a <mp_micropython_opt_level+0x1e>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   1951c:	4b0a      	ldr	r3, [pc, #40]	; (19548 <mp_micropython_opt_level+0x3c>)
   1951e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   19522:	005b      	lsls	r3, r3, #1
   19524:	f043 0301 	orr.w	r3, r3, #1
   19528:	e00a      	b.n	19540 <mp_micropython_opt_level+0x34>
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   1952a:	683b      	ldr	r3, [r7, #0]
   1952c:	681b      	ldr	r3, [r3, #0]
   1952e:	4618      	mov	r0, r3
   19530:	f7f4 fa9a 	bl	da68 <mp_obj_get_int>
   19534:	4603      	mov	r3, r0
   19536:	461a      	mov	r2, r3
   19538:	4b03      	ldr	r3, [pc, #12]	; (19548 <mp_micropython_opt_level+0x3c>)
   1953a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        return mp_const_none;
   1953e:	4b03      	ldr	r3, [pc, #12]	; (1954c <mp_micropython_opt_level+0x40>)
    }
}
   19540:	4618      	mov	r0, r3
   19542:	3708      	adds	r7, #8
   19544:	46bd      	mov	sp, r7
   19546:	bd80      	pop	{r7, pc}
   19548:	200012f0 	.word	0x200012f0
   1954c:	00023108 	.word	0x00023108

00019550 <mp_micropython_heap_lock>:
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_pystack_use_obj, mp_micropython_pystack_use);
#endif

#if MICROPY_ENABLE_GC
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   19550:	b580      	push	{r7, lr}
   19552:	af00      	add	r7, sp, #0
    gc_lock();
   19554:	f7e7 f820 	bl	598 <gc_lock>
    return mp_const_none;
   19558:	4b01      	ldr	r3, [pc, #4]	; (19560 <mp_micropython_heap_lock+0x10>)
}
   1955a:	4618      	mov	r0, r3
   1955c:	bd80      	pop	{r7, pc}
   1955e:	bf00      	nop
   19560:	00023108 	.word	0x00023108

00019564 <mp_micropython_heap_unlock>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_heap_lock_obj, mp_micropython_heap_lock);

STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   19564:	b580      	push	{r7, lr}
   19566:	af00      	add	r7, sp, #0
    gc_unlock();
   19568:	f7e7 f820 	bl	5ac <gc_unlock>
    return mp_const_none;
   1956c:	4b01      	ldr	r3, [pc, #4]	; (19574 <mp_micropython_heap_unlock+0x10>)
}
   1956e:	4618      	mov	r0, r3
   19570:	bd80      	pop	{r7, pc}
   19572:	bf00      	nop
   19574:	00023108 	.word	0x00023108

00019578 <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1957c:	6803      	ldr	r3, [r0, #0]
                        DISPATCH();
                    } else {
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
                        // Pop exhausted gen
                        sp--;
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1957e:	f8df b3c8 	ldr.w	fp, [pc, #968]	; 19948 <mp_execute_bytecode+0x3d0>
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19582:	b095      	sub	sp, #84	; 0x54
   19584:	4680      	mov	r8, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19586:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19588:	9103      	str	r1, [sp, #12]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1958a:	f000 ffa2 	bl	1a4d2 <mp_decode_uint_value>
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   1958e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   19592:	1d02      	adds	r2, r0, #4
   19594:	0092      	lsls	r2, r2, #2
   19596:	f003 0101 	and.w	r1, r3, #1
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   1959a:	eb08 0702 	add.w	r7, r8, r2
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   1959e:	f023 0303 	bic.w	r3, r3, #3
        fastn = &code_state->state[n_state - 1];
   195a2:	3801      	subs	r0, #1
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   195a4:	f88d 1017 	strb.w	r1, [sp, #23]
        fastn = &code_state->state[n_state - 1];
   195a8:	9001      	str	r0, [sp, #4]
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   195aa:	3704      	adds	r7, #4
        fastn = &code_state->state[n_state - 1];
   195ac:	eb08 0a02 	add.w	sl, r8, r2
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   195b0:	9306      	str	r3, [sp, #24]
        if (nlr_push(&nlr) == 0) {
   195b2:	a808      	add	r0, sp, #32
   195b4:	f7e6 fe82 	bl	2bc <nlr_push>
   195b8:	2800      	cmp	r0, #0
   195ba:	f040 8092 	bne.w	196e2 <mp_execute_bytecode+0x16a>
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   195be:	9b03      	ldr	r3, [sp, #12]
            const byte *ip = code_state->ip;
   195c0:	f8d8 4004 	ldr.w	r4, [r8, #4]
            mp_obj_t *sp = code_state->sp;
   195c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   195c8:	2b00      	cmp	r3, #0
   195ca:	f000 809f 	beq.w	1970c <mp_execute_bytecode+0x194>
   195ce:	7823      	ldrb	r3, [r4, #0]
   195d0:	2b5e      	cmp	r3, #94	; 0x5e
   195d2:	f000 809b 	beq.w	1970c <mp_execute_bytecode+0x194>
                mp_obj_t exc = inject_exc;
   195d6:	9b03      	ldr	r3, [sp, #12]
                inject_exc = MP_OBJ_NULL;
   195d8:	9003      	str	r0, [sp, #12]
                exc = mp_make_raise_obj(exc);
   195da:	4618      	mov	r0, r3
   195dc:	f7f3 faac 	bl	cb38 <mp_make_raise_obj>
   195e0:	4604      	mov	r4, r0
                RAISE(exc);
   195e2:	f7e6 fe59 	bl	298 <nlr_pop>
   195e6:	9409      	str	r4, [sp, #36]	; 0x24
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   195e8:	6820      	ldr	r0, [r4, #0]
   195ea:	4659      	mov	r1, fp
   195ec:	f7fd fdc2 	bl	17174 <mp_obj_is_subclass_fast>
   195f0:	b148      	cbz	r0, 19606 <mp_execute_bytecode+0x8e>
                if (code_state->ip) {
   195f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   195f6:	b133      	cbz	r3, 19606 <mp_execute_bytecode+0x8e>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   195f8:	781a      	ldrb	r2, [r3, #0]
   195fa:	2a43      	cmp	r2, #67	; 0x43
   195fc:	f000 85de 	beq.w	1a1bc <mp_execute_bytecode+0xc44>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   19600:	2a5e      	cmp	r2, #94	; 0x5e
   19602:	f000 867a 	beq.w	1a2fa <mp_execute_bytecode+0xd82>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   19606:	4bce      	ldr	r3, [pc, #824]	; (19940 <mp_execute_bytecode+0x3c8>)
   19608:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1960a:	429a      	cmp	r2, r3
   1960c:	d049      	beq.n	196a2 <mp_execute_bytecode+0x12a>
                const byte *ip = code_state->fun_bc->bytecode;
   1960e:	f8d8 3000 	ldr.w	r3, [r8]
                ip = mp_decode_uint_skip(ip); // skip n_state
   19612:	6898      	ldr	r0, [r3, #8]
   19614:	f000 ff6a 	bl	1a4ec <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   19618:	f000 ff68 	bl	1a4ec <mp_decode_uint_skip>
                ip++; // skip scope_params
                ip++; // skip n_pos_args
                ip++; // skip n_kwonly_args
                ip++; // skip n_def_pos_args
                size_t bc = code_state->ip - ip;
   1961c:	f8d8 3004 	ldr.w	r3, [r8, #4]
                ip++; // skip n_def_pos_args
   19620:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   19622:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   19624:	1b5c      	subs	r4, r3, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   19626:	f000 ff54 	bl	1a4d2 <mp_decode_uint_value>
   1962a:	4606      	mov	r6, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   1962c:	4628      	mov	r0, r5
   1962e:	f000 ff5d 	bl	1a4ec <mp_decode_uint_skip>
                bc -= code_info_size;
   19632:	eba4 0e06 	sub.w	lr, r4, r6
                qstr source_file = mp_decode_uint_value(ip);
                ip = mp_decode_uint_skip(ip);
                #endif
                size_t source_line = 1;
                size_t c;
                while ((c = *ip)) {
   19636:	7904      	ldrb	r4, [r0, #4]
                qstr block_name = ip[0] | (ip[1] << 8);
   19638:	8803      	ldrh	r3, [r0, #0]
                qstr source_file = ip[2] | (ip[3] << 8);
   1963a:	8841      	ldrh	r1, [r0, #2]
                while ((c = *ip)) {
   1963c:	2201      	movs	r2, #1
                ip += 4;
   1963e:	3004      	adds	r0, #4
                while ((c = *ip)) {
   19640:	b96c      	cbnz	r4, 1965e <mp_execute_bytecode+0xe6>
   19642:	e01b      	b.n	1967c <mp_execute_bytecode+0x104>
                    size_t b, l;
                    if ((c & 0x80) == 0) {
                        // 0b0LLBBBBB encoding
                        b = c & 0x1f;
   19644:	f004 061f 	and.w	r6, r4, #31
                        // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                        b = c & 0xf;
                        l = ((c << 4) & 0x700) | ip[1];
                        ip += 2;
                    }
                    if (bc >= b) {
   19648:	4576      	cmp	r6, lr
                        ip += 1;
   1964a:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   1964e:	ea4f 1554 	mov.w	r5, r4, lsr #5
                    if (bc >= b) {
   19652:	d813      	bhi.n	1967c <mp_execute_bytecode+0x104>
                while ((c = *ip)) {
   19654:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   19656:	ebae 0e06 	sub.w	lr, lr, r6
                        source_line += l;
   1965a:	442a      	add	r2, r5
                while ((c = *ip)) {
   1965c:	b174      	cbz	r4, 1967c <mp_execute_bytecode+0x104>
                    if ((c & 0x80) == 0) {
   1965e:	0625      	lsls	r5, r4, #24
   19660:	d5f0      	bpl.n	19644 <mp_execute_bytecode+0xcc>
                        l = ((c << 4) & 0x700) | ip[1];
   19662:	f890 c001 	ldrb.w	ip, [r0, #1]
   19666:	0125      	lsls	r5, r4, #4
                        b = c & 0xf;
   19668:	f004 060f 	and.w	r6, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   1966c:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
                    if (bc >= b) {
   19670:	4576      	cmp	r6, lr
                        l = ((c << 4) & 0x700) | ip[1];
   19672:	ea45 050c 	orr.w	r5, r5, ip
                        ip += 2;
   19676:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   1967a:	d9eb      	bls.n	19654 <mp_execute_bytecode+0xdc>
                    } else {
                        // found source line corresponding to bytecode offset
                        break;
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   1967c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1967e:	f7f6 f819 	bl	f6b4 <mp_obj_exception_add_traceback>
            }

            while (currently_in_except_block) {
   19682:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19686:	b183      	cbz	r3, 196aa <mp_execute_bytecode+0x132>
                // nested exception

                assert(exc_sp >= exc_stack);
   19688:	9b06      	ldr	r3, [sp, #24]
   1968a:	429f      	cmp	r7, r3
   1968c:	f200 867a 	bhi.w	1a384 <mp_execute_bytecode+0xe0c>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   19690:	9b06      	ldr	r3, [sp, #24]
   19692:	685b      	ldr	r3, [r3, #4]
   19694:	f003 0301 	and.w	r3, r3, #1
   19698:	f88d 3017 	strb.w	r3, [sp, #23]
   1969c:	9b06      	ldr	r3, [sp, #24]
   1969e:	3b0c      	subs	r3, #12
   196a0:	9306      	str	r3, [sp, #24]
            while (currently_in_except_block) {
   196a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   196a6:	2b00      	cmp	r3, #0
   196a8:	d1ee      	bne.n	19688 <mp_execute_bytecode+0x110>
            }

            if (exc_sp >= exc_stack) {
   196aa:	9b06      	ldr	r3, [sp, #24]
   196ac:	429f      	cmp	r7, r3
   196ae:	f200 8646 	bhi.w	1a33e <mp_execute_bytecode+0xdc6>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   196b2:	2301      	movs	r3, #1
   196b4:	f88d 3017 	strb.w	r3, [sp, #23]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   196b8:	9a06      	ldr	r2, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   196ba:	9b06      	ldr	r3, [sp, #24]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   196bc:	9906      	ldr	r1, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   196be:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   196c0:	6810      	ldr	r0, [r2, #0]
                exc_sp->prev_exc = nlr.ret_val;
   196c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
                code_state->ip = exc_sp->handler;
   196c4:	f8c8 0004 	str.w	r0, [r8, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   196c8:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   196cc:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   196ce:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   196d2:	a808      	add	r0, sp, #32
                code_state->sp = sp;
   196d4:	f8c8 3008 	str.w	r3, [r8, #8]
        if (nlr_push(&nlr) == 0) {
   196d8:	f7e6 fdf0 	bl	2bc <nlr_push>
   196dc:	2800      	cmp	r0, #0
   196de:	f43f af6e 	beq.w	195be <mp_execute_bytecode+0x46>
   196e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   196e4:	e780      	b.n	195e8 <mp_execute_bytecode+0x70>
                    assert(exc_sp >= exc_stack);
   196e6:	9b06      	ldr	r3, [sp, #24]
   196e8:	429f      	cmp	r7, r3
   196ea:	f200 8683 	bhi.w	1a3f4 <mp_execute_bytecode+0xe7c>
                    assert(currently_in_except_block);
   196ee:	f89d 3017 	ldrb.w	r3, [sp, #23]
   196f2:	2b00      	cmp	r3, #0
   196f4:	f000 8685 	beq.w	1a402 <mp_execute_bytecode+0xe8a>
                    POP_EXC_BLOCK();
   196f8:	9b06      	ldr	r3, [sp, #24]
   196fa:	685b      	ldr	r3, [r3, #4]
   196fc:	f003 0301 	and.w	r3, r3, #1
   19700:	f88d 3017 	strb.w	r3, [sp, #23]
   19704:	9b06      	ldr	r3, [sp, #24]
   19706:	3b0c      	subs	r3, #12
                switch (*ip++) {
   19708:	4634      	mov	r4, r6
                    POP_EXC_BLOCK();
   1970a:	9306      	str	r3, [sp, #24]
                MARK_EXC_IP_GLOBAL();
   1970c:	f8c8 4004 	str.w	r4, [r8, #4]
                switch (*ip++) {
   19710:	7820      	ldrb	r0, [r4, #0]
   19712:	f1a0 0310 	sub.w	r3, r0, #16
   19716:	1c66      	adds	r6, r4, #1
   19718:	2b5a      	cmp	r3, #90	; 0x5a
   1971a:	f200 8518 	bhi.w	1a14e <mp_execute_bytecode+0xbd6>
   1971e:	a201      	add	r2, pc, #4	; (adr r2, 19724 <mp_execute_bytecode+0x1ac>)
   19720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19724:	00019d61 	.word	0x00019d61
   19728:	00019d57 	.word	0x00019d57
   1972c:	00019d4d 	.word	0x00019d4d
   19730:	0001a14f 	.word	0x0001a14f
   19734:	00019d29 	.word	0x00019d29
   19738:	0001a14f 	.word	0x0001a14f
   1973c:	00019d17 	.word	0x00019d17
   19740:	00019cf3 	.word	0x00019cf3
   19744:	00019ce9 	.word	0x00019ce9
   19748:	00019ccb 	.word	0x00019ccb
   1974c:	00019c9f 	.word	0x00019c9f
   19750:	00019c8d 	.word	0x00019c8d
   19754:	00019c7b 	.word	0x00019c7b
   19758:	00019c6b 	.word	0x00019c6b
   1975c:	00019c59 	.word	0x00019c59
   19760:	00019c47 	.word	0x00019c47
   19764:	00019f0b 	.word	0x00019f0b
   19768:	00019ef3 	.word	0x00019ef3
   1976c:	00019ed1 	.word	0x00019ed1
   19770:	00019eab 	.word	0x00019eab
   19774:	00019e9b 	.word	0x00019e9b
   19778:	00019e8b 	.word	0x00019e8b
   1977c:	00019e77 	.word	0x00019e77
   19780:	00019e63 	.word	0x00019e63
   19784:	00019e39 	.word	0x00019e39
   19788:	00019e07 	.word	0x00019e07
   1978c:	00019dfb 	.word	0x00019dfb
   19790:	00019def 	.word	0x00019def
   19794:	0001a14f 	.word	0x0001a14f
   19798:	0001a14f 	.word	0x0001a14f
   1979c:	0001a14f 	.word	0x0001a14f
   197a0:	0001a14f 	.word	0x0001a14f
   197a4:	00019de5 	.word	0x00019de5
   197a8:	00019dd5 	.word	0x00019dd5
   197ac:	000198dd 	.word	0x000198dd
   197b0:	0001999d 	.word	0x0001999d
   197b4:	0001a139 	.word	0x0001a139
   197b8:	0001a10f 	.word	0x0001a10f
   197bc:	0001a0f7 	.word	0x0001a0f7
   197c0:	0001a0df 	.word	0x0001a0df
   197c4:	0001a0c7 	.word	0x0001a0c7
   197c8:	0001a0b5 	.word	0x0001a0b5
   197cc:	0001a14f 	.word	0x0001a14f
   197d0:	0001a14f 	.word	0x0001a14f
   197d4:	0001a14f 	.word	0x0001a14f
   197d8:	0001a053 	.word	0x0001a053
   197dc:	0001a013 	.word	0x0001a013
   197e0:	00019fdb 	.word	0x00019fdb
   197e4:	00019fdb 	.word	0x00019fdb
   197e8:	000198d3 	.word	0x000198d3
   197ec:	00019fcb 	.word	0x00019fcb
   197f0:	00019fa1 	.word	0x00019fa1
   197f4:	00019f8b 	.word	0x00019f8b
   197f8:	000196e7 	.word	0x000196e7
   197fc:	00019f3b 	.word	0x00019f3b
   19800:	00019f1b 	.word	0x00019f1b
   19804:	0001a14f 	.word	0x0001a14f
   19808:	0001a14f 	.word	0x0001a14f
   1980c:	0001a14f 	.word	0x0001a14f
   19810:	0001a14f 	.word	0x0001a14f
   19814:	0001a14f 	.word	0x0001a14f
   19818:	0001a14f 	.word	0x0001a14f
   1981c:	0001a14f 	.word	0x0001a14f
   19820:	0001a14f 	.word	0x0001a14f
   19824:	00019975 	.word	0x00019975
   19828:	0001994d 	.word	0x0001994d
   1982c:	0001a14f 	.word	0x0001a14f
   19830:	00019921 	.word	0x00019921
   19834:	00019909 	.word	0x00019909
   19838:	0001a14f 	.word	0x0001a14f
   1983c:	0001a14f 	.word	0x0001a14f
   19840:	00019da7 	.word	0x00019da7
   19844:	0001a14f 	.word	0x0001a14f
   19848:	00019d7d 	.word	0x00019d7d
   1984c:	00019b3d 	.word	0x00019b3d
   19850:	000198b3 	.word	0x000198b3
   19854:	000199ad 	.word	0x000199ad
   19858:	000198e9 	.word	0x000198e9
   1985c:	00019a0f 	.word	0x00019a0f
   19860:	0001a14f 	.word	0x0001a14f
   19864:	000199e1 	.word	0x000199e1
   19868:	00019b0b 	.word	0x00019b0b
   1986c:	00019adf 	.word	0x00019adf
   19870:	00019aa5 	.word	0x00019aa5
   19874:	00019a73 	.word	0x00019a73
   19878:	00019c13 	.word	0x00019c13
   1987c:	00019bdd 	.word	0x00019bdd
   19880:	00019ba9 	.word	0x00019ba9
   19884:	00019b8f 	.word	0x00019b8f
   19888:	00019b79 	.word	0x00019b79
   1988c:	00019b69 	.word	0x00019b69
                        if (!currently_in_except_block && MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19890:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19894:	b923      	cbnz	r3, 198a0 <mp_execute_bytecode+0x328>
   19896:	9b06      	ldr	r3, [sp, #24]
   19898:	685b      	ldr	r3, [r3, #4]
   1989a:	079e      	lsls	r6, r3, #30
   1989c:	f100 84e5 	bmi.w	1a26a <mp_execute_bytecode+0xcf2>
                        POP_EXC_BLOCK();
   198a0:	9b06      	ldr	r3, [sp, #24]
   198a2:	685b      	ldr	r3, [r3, #4]
   198a4:	f003 0301 	and.w	r3, r3, #1
   198a8:	f88d 3017 	strb.w	r3, [sp, #23]
   198ac:	9b06      	ldr	r3, [sp, #24]
   198ae:	3b0c      	subs	r3, #12
   198b0:	9306      	str	r3, [sp, #24]
                    while (exc_sp >= exc_stack) {
   198b2:	9b06      	ldr	r3, [sp, #24]
   198b4:	429f      	cmp	r7, r3
   198b6:	d9eb      	bls.n	19890 <mp_execute_bytecode+0x318>
                    nlr_pop();
   198b8:	f7e6 fcee 	bl	298 <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   198bc:	9b06      	ldr	r3, [sp, #24]
                    code_state->sp = sp;
   198be:	f8c8 5008 	str.w	r5, [r8, #8]
                    assert(exc_sp == exc_stack - 1);
   198c2:	3f0c      	subs	r7, #12
   198c4:	42bb      	cmp	r3, r7
   198c6:	f040 85aa 	bne.w	1a41e <mp_execute_bytecode+0xea6>
                    return MP_VM_RETURN_NORMAL;
   198ca:	2000      	movs	r0, #0
                code_state->state[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   198cc:	b015      	add	sp, #84	; 0x54
   198ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (TOP() == mp_const_none) {
   198d2:	682a      	ldr	r2, [r5, #0]
   198d4:	4b1b      	ldr	r3, [pc, #108]	; (19944 <mp_execute_bytecode+0x3cc>)
   198d6:	429a      	cmp	r2, r3
   198d8:	f040 8445 	bne.w	1a166 <mp_execute_bytecode+0xbee>
                        sp--;
   198dc:	3d04      	subs	r5, #4
                switch (*ip++) {
   198de:	4634      	mov	r4, r6
                    DISPATCH();
   198e0:	e714      	b.n	1970c <mp_execute_bytecode+0x194>
                        PUSH(ret_value);
   198e2:	9b07      	ldr	r3, [sp, #28]
   198e4:	602b      	str	r3, [r5, #0]
                        goto yield;
   198e6:	4626      	mov	r6, r4
                    nlr_pop();
   198e8:	f7e6 fcd6 	bl	298 <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   198ec:	f89d 2017 	ldrb.w	r2, [sp, #23]
   198f0:	9b06      	ldr	r3, [sp, #24]
                    code_state->ip = ip;
   198f2:	f8c8 6004 	str.w	r6, [r8, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   198f6:	4313      	orrs	r3, r2
                    code_state->sp = sp;
   198f8:	f8c8 5008 	str.w	r5, [r8, #8]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   198fc:	f8c8 300c 	str.w	r3, [r8, #12]
                    return MP_VM_RETURN_YIELD;
   19900:	2001      	movs	r0, #1
}
   19902:	b015      	add	sp, #84	; 0x54
   19904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    sp -= 2;
   19908:	f1a5 0308 	sub.w	r3, r5, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   1990c:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19910:	6829      	ldr	r1, [r5, #0]
   19912:	f855 0c08 	ldr.w	r0, [r5, #-8]
                switch (*ip++) {
   19916:	4634      	mov	r4, r6
                    sp -= 2;
   19918:	461d      	mov	r5, r3
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   1991a:	f7f5 fb8a 	bl	f032 <mp_obj_dict_store>
                    DISPATCH();
   1991e:	e6f5      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19920:	4634      	mov	r4, r6
   19922:	2000      	movs	r0, #0
                    DECODE_UINT;
   19924:	f814 3b01 	ldrb.w	r3, [r4], #1
   19928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1992c:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19930:	061a      	lsls	r2, r3, #24
   19932:	d4f7      	bmi.n	19924 <mp_execute_bytecode+0x3ac>
                    PUSH(mp_obj_new_dict(unum));
   19934:	f7f5 fb5c 	bl	eff0 <mp_obj_new_dict>
   19938:	1d2b      	adds	r3, r5, #4
   1993a:	6068      	str	r0, [r5, #4]
   1993c:	461d      	mov	r5, r3
                    DISPATCH();
   1993e:	e6e5      	b.n	1970c <mp_execute_bytecode+0x194>
   19940:	00021e2c 	.word	0x00021e2c
   19944:	00023108 	.word	0x00023108
   19948:	00021f70 	.word	0x00021f70
                switch (*ip++) {
   1994c:	4634      	mov	r4, r6
   1994e:	2000      	movs	r0, #0
                    DECODE_UINT;
   19950:	f814 3b01 	ldrb.w	r3, [r4], #1
   19954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19958:	0619      	lsls	r1, r3, #24
   1995a:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1995e:	d4f7      	bmi.n	19950 <mp_execute_bytecode+0x3d8>
                    sp -= unum - 1;
   19960:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   19964:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19968:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_list(unum, sp));
   1996a:	4629      	mov	r1, r5
   1996c:	f7f7 fe99 	bl	116a2 <mp_obj_new_list>
   19970:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19972:	e6cb      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19974:	4634      	mov	r4, r6
   19976:	2000      	movs	r0, #0
                    DECODE_UINT;
   19978:	f814 3b01 	ldrb.w	r3, [r4], #1
   1997c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19980:	061e      	lsls	r6, r3, #24
   19982:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19986:	d4f7      	bmi.n	19978 <mp_execute_bytecode+0x400>
                    sp -= unum - 1;
   19988:	ebc0 7380 	rsb	r3, r0, r0, lsl #30
   1998c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19990:	3504      	adds	r5, #4
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19992:	4629      	mov	r1, r5
   19994:	f7fc f93e 	bl	15c14 <mp_obj_new_tuple>
   19998:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   1999a:	e6b7      	b.n	1970c <mp_execute_bytecode+0x194>
                    mp_obj_t top = sp[0];
   1999c:	682b      	ldr	r3, [r5, #0]
                    sp[0] = sp[-1];
   1999e:	f855 2c04 	ldr.w	r2, [r5, #-4]
   199a2:	602a      	str	r2, [r5, #0]
                switch (*ip++) {
   199a4:	4634      	mov	r4, r6
                    sp[-1] = top;
   199a6:	f845 3c04 	str.w	r3, [r5, #-4]
                    DISPATCH();
   199aa:	e6af      	b.n	1970c <mp_execute_bytecode+0x194>
                    mp_uint_t unum = *ip;
   199ac:	7863      	ldrb	r3, [r4, #1]
                    if (unum == 2) {
   199ae:	2b02      	cmp	r3, #2
   199b0:	f000 8411 	beq.w	1a1d6 <mp_execute_bytecode+0xc5e>
                    if (unum == 0) {
   199b4:	2b00      	cmp	r3, #0
   199b6:	f040 840f 	bne.w	1a1d8 <mp_execute_bytecode+0xc60>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   199ba:	9b06      	ldr	r3, [sp, #24]
   199bc:	429f      	cmp	r7, r3
   199be:	d905      	bls.n	199cc <mp_execute_bytecode+0x454>
   199c0:	f000 bc91 	b.w	1a2e6 <mp_execute_bytecode+0xd6e>
   199c4:	3b0c      	subs	r3, #12
   199c6:	429f      	cmp	r7, r3
   199c8:	f200 848d 	bhi.w	1a2e6 <mp_execute_bytecode+0xd6e>
                            if (e->prev_exc != NULL) {
   199cc:	6898      	ldr	r0, [r3, #8]
   199ce:	2800      	cmp	r0, #0
   199d0:	d0f8      	beq.n	199c4 <mp_execute_bytecode+0x44c>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   199d2:	f7f3 f8b1 	bl	cb38 <mp_make_raise_obj>
   199d6:	4604      	mov	r4, r0
   199d8:	f7e6 fc5e 	bl	298 <nlr_pop>
   199dc:	9409      	str	r4, [sp, #36]	; 0x24
   199de:	e603      	b.n	195e8 <mp_execute_bytecode+0x70>
                switch (*ip++) {
   199e0:	4634      	mov	r4, r6
   199e2:	2100      	movs	r1, #0
                    DECODE_PTR;
   199e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   199e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   199ec:	061b      	lsls	r3, r3, #24
   199ee:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   199f2:	d4f7      	bmi.n	199e4 <mp_execute_bytecode+0x46c>
   199f4:	f8d8 3000 	ldr.w	r3, [r8]
   199f8:	68db      	ldr	r3, [r3, #12]
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   199fa:	2200      	movs	r2, #0
   199fc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   19a00:	4611      	mov	r1, r2
   19a02:	f7f1 fb92 	bl	b12a <mp_make_function_from_raw_code>
   19a06:	1d2b      	adds	r3, r5, #4
   19a08:	6068      	str	r0, [r5, #4]
   19a0a:	461d      	mov	r5, r3
                    DISPATCH();
   19a0c:	e67e      	b.n	1970c <mp_execute_bytecode+0x194>
                    if (inject_exc != MP_OBJ_NULL) {
   19a0e:	f8dd 900c 	ldr.w	r9, [sp, #12]
                    mp_obj_t send_value = POP();
   19a12:	6829      	ldr	r1, [r5, #0]
   19a14:	1f2b      	subs	r3, r5, #4
   19a16:	9302      	str	r3, [sp, #8]
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   19a18:	f8c8 3008 	str.w	r3, [r8, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   19a1c:	f1b9 0f00 	cmp.w	r9, #0
   19a20:	f000 8459 	beq.w	1a2d6 <mp_execute_bytecode+0xd5e>
                        t_exc = inject_exc;
   19a24:	f8dd 900c 	ldr.w	r9, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19a28:	f855 0c04 	ldr.w	r0, [r5, #-4]
                        inject_exc = MP_OBJ_NULL;
   19a2c:	f04f 0e00 	mov.w	lr, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19a30:	464a      	mov	r2, r9
   19a32:	4671      	mov	r1, lr
   19a34:	ab07      	add	r3, sp, #28
                        inject_exc = MP_OBJ_NULL;
   19a36:	f8cd e00c 	str.w	lr, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19a3a:	f7f2 ffa7 	bl	c98c <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   19a3e:	2801      	cmp	r0, #1
   19a40:	f43f af4f 	beq.w	198e2 <mp_execute_bytecode+0x36a>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   19a44:	2800      	cmp	r0, #0
   19a46:	f040 83d0 	bne.w	1a1ea <mp_execute_bytecode+0xc72>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   19a4a:	9b07      	ldr	r3, [sp, #28]
                            PUSH(mp_const_none);
   19a4c:	4ac7      	ldr	r2, [pc, #796]	; (19d6c <mp_execute_bytecode+0x7f4>)
   19a4e:	2b04      	cmp	r3, #4
   19a50:	bf08      	it	eq
   19a52:	4613      	moveq	r3, r2
   19a54:	f845 3c04 	str.w	r3, [r5, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   19a58:	f1b9 0f00 	cmp.w	r9, #0
   19a5c:	d006      	beq.n	19a6c <mp_execute_bytecode+0x4f4>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   19a5e:	49c4      	ldr	r1, [pc, #784]	; (19d70 <mp_execute_bytecode+0x7f8>)
   19a60:	4648      	mov	r0, r9
   19a62:	f7f5 fde1 	bl	f628 <mp_obj_exception_match>
   19a66:	2800      	cmp	r0, #0
   19a68:	f040 849b 	bne.w	1a3a2 <mp_execute_bytecode+0xe2a>
                        DISPATCH();
   19a6c:	9d02      	ldr	r5, [sp, #8]
                switch (*ip++) {
   19a6e:	4634      	mov	r4, r6
   19a70:	e64c      	b.n	1970c <mp_execute_bytecode+0x194>
   19a72:	4634      	mov	r4, r6
   19a74:	2200      	movs	r2, #0
                    DECODE_UINT;
   19a76:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a7a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19a7e:	061e      	lsls	r6, r3, #24
   19a80:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19a84:	d4f7      	bmi.n	19a76 <mp_execute_bytecode+0x4fe>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   19a86:	09d3      	lsrs	r3, r2, #7
   19a88:	b2d1      	uxtb	r1, r2
   19a8a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19a8e:	440b      	add	r3, r1
   19a90:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   19a94:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19a98:	1d2b      	adds	r3, r5, #4
   19a9a:	6828      	ldr	r0, [r5, #0]
   19a9c:	f7f2 f937 	bl	bd0e <mp_call_function_n_kw>
   19aa0:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19aa2:	e633      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19aa4:	2000      	movs	r0, #0
   19aa6:	e000      	b.n	19aaa <mp_execute_bytecode+0x532>
                    DECODE_PTR;
   19aa8:	461e      	mov	r6, r3
   19aaa:	4633      	mov	r3, r6
   19aac:	f813 2b01 	ldrb.w	r2, [r3], #1
   19ab0:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   19ab4:	0612      	lsls	r2, r2, #24
   19ab6:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   19aba:	d4f5      	bmi.n	19aa8 <mp_execute_bytecode+0x530>
                    size_t n_closed_over = *ip++;
   19abc:	7819      	ldrb	r1, [r3, #0]
                    DECODE_PTR;
   19abe:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= 2 + n_closed_over - 1;
   19ac2:	43ca      	mvns	r2, r1
                    DECODE_PTR;
   19ac4:	68db      	ldr	r3, [r3, #12]
                    sp -= 2 + n_closed_over - 1;
   19ac6:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19aca:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   19ace:	462a      	mov	r2, r5
   19ad0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19ad4:	f7f1 fb9e 	bl	b214 <mp_make_closure_from_raw_code>
                    size_t n_closed_over = *ip++;
   19ad8:	1cb4      	adds	r4, r6, #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19ada:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19adc:	e616      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19ade:	2000      	movs	r0, #0
   19ae0:	e000      	b.n	19ae4 <mp_execute_bytecode+0x56c>
                    DECODE_PTR;
   19ae2:	461e      	mov	r6, r3
   19ae4:	4633      	mov	r3, r6
   19ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
   19aea:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   19aee:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   19af2:	0611      	lsls	r1, r2, #24
   19af4:	d4f5      	bmi.n	19ae2 <mp_execute_bytecode+0x56a>
                    size_t n_closed_over = *ip++;
   19af6:	7819      	ldrb	r1, [r3, #0]
                    DECODE_PTR;
   19af8:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= n_closed_over - 1;
   19afc:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
   19b00:	eb05 0582 	add.w	r5, r5, r2, lsl #2
                    DECODE_PTR;
   19b04:	68db      	ldr	r3, [r3, #12]
                    sp -= n_closed_over - 1;
   19b06:	3504      	adds	r5, #4
   19b08:	e7e1      	b.n	19ace <mp_execute_bytecode+0x556>
                switch (*ip++) {
   19b0a:	4634      	mov	r4, r6
   19b0c:	2000      	movs	r0, #0
                    DECODE_PTR;
   19b0e:	f814 3b01 	ldrb.w	r3, [r4], #1
   19b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19b16:	061e      	lsls	r6, r3, #24
   19b18:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19b1c:	d4f7      	bmi.n	19b0e <mp_execute_bytecode+0x596>
   19b1e:	f8d8 3000 	ldr.w	r3, [r8]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19b22:	682a      	ldr	r2, [r5, #0]
                    DECODE_PTR;
   19b24:	68db      	ldr	r3, [r3, #12]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19b26:	f855 1c04 	ldr.w	r1, [r5, #-4]
   19b2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19b2e:	f7f1 fafc 	bl	b12a <mp_make_function_from_raw_code>
                    mp_obj_t def_dict = POP();
   19b32:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19b34:	f845 0c04 	str.w	r0, [r5, #-4]
                    mp_obj_t def_dict = POP();
   19b38:	461d      	mov	r5, r3
                    DISPATCH();
   19b3a:	e5e7      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19b3c:	4634      	mov	r4, r6
   19b3e:	2600      	movs	r6, #0
                    DECODE_UINT;
   19b40:	f814 3b01 	ldrb.w	r3, [r4], #1
   19b44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19b48:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   19b4c:	061a      	lsls	r2, r3, #24
   19b4e:	d4f7      	bmi.n	19b40 <mp_execute_bytecode+0x5c8>
                    mp_unpack_ex(sp[0], unum, sp);
   19b50:	462a      	mov	r2, r5
   19b52:	4631      	mov	r1, r6
   19b54:	6828      	ldr	r0, [r5, #0]
   19b56:	f7f2 fbf3 	bl	c340 <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   19b5a:	f3c6 2307 	ubfx	r3, r6, #8, #8
   19b5e:	fa53 f686 	uxtab	r6, r3, r6
   19b62:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   19b66:	e5d1      	b.n	1970c <mp_execute_bytecode+0x194>
                    mp_import_all(POP());
   19b68:	6828      	ldr	r0, [r5, #0]
   19b6a:	f1a5 0904 	sub.w	r9, r5, #4
                switch (*ip++) {
   19b6e:	4634      	mov	r4, r6
                    mp_import_all(POP());
   19b70:	f7f3 f8aa 	bl	ccc8 <mp_import_all>
   19b74:	464d      	mov	r5, r9
                    DISPATCH();
   19b76:	e5c9      	b.n	1970c <mp_execute_bytecode+0x194>
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   19b78:	462e      	mov	r6, r5
                    DECODE_QSTR;
   19b7a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   19b7e:	f856 0b04 	ldr.w	r0, [r6], #4
   19b82:	f7f3 f821 	bl	cbc8 <mp_import_from>
                    DECODE_QSTR;
   19b86:	3403      	adds	r4, #3
                    PUSH(obj);
   19b88:	6068      	str	r0, [r5, #4]
   19b8a:	4635      	mov	r5, r6
                    DISPATCH();
   19b8c:	e5be      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19b8e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   19b92:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19b96:	6829      	ldr	r1, [r5, #0]
   19b98:	f7f2 fff6 	bl	cb88 <mp_import_name>
                    mp_obj_t obj = POP();
   19b9c:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   19b9e:	f845 0c04 	str.w	r0, [r5, #-4]
                    DECODE_QSTR;
   19ba2:	3403      	adds	r4, #3
                    mp_obj_t obj = POP();
   19ba4:	461d      	mov	r5, r3
                    DISPATCH();
   19ba6:	e5b1      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19ba8:	4634      	mov	r4, r6
   19baa:	2100      	movs	r1, #0
                    DECODE_UINT;
   19bac:	f814 3b01 	ldrb.w	r3, [r4], #1
   19bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19bb4:	061b      	lsls	r3, r3, #24
   19bb6:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19bba:	d4f7      	bmi.n	19bac <mp_execute_bytecode+0x634>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   19bbc:	09cb      	lsrs	r3, r1, #7
   19bbe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19bc2:	fa53 f381 	uxtab	r3, r3, r1
   19bc6:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   19bca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19bce:	3d0c      	subs	r5, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   19bd0:	462a      	mov	r2, r5
   19bd2:	2001      	movs	r0, #1
   19bd4:	f7f2 fb0e 	bl	c1f4 <mp_call_method_n_kw_var>
   19bd8:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19bda:	e597      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19bdc:	4634      	mov	r4, r6
   19bde:	2100      	movs	r1, #0
                    DECODE_UINT;
   19be0:	f814 3b01 	ldrb.w	r3, [r4], #1
   19be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19be8:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19bec:	061a      	lsls	r2, r3, #24
   19bee:	d4f7      	bmi.n	19be0 <mp_execute_bytecode+0x668>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   19bf0:	b2c8      	uxtb	r0, r1
   19bf2:	09cb      	lsrs	r3, r1, #7
   19bf4:	1c42      	adds	r2, r0, #1
   19bf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19bfa:	4413      	add	r3, r2
   19bfc:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   19c00:	eb05 0583 	add.w	r5, r5, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   19c04:	f3c1 2107 	ubfx	r1, r1, #8, #8
   19c08:	462a      	mov	r2, r5
   19c0a:	f7f2 f8a1 	bl	bd50 <mp_call_method_n_kw>
   19c0e:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19c10:	e57c      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19c12:	4634      	mov	r4, r6
   19c14:	2100      	movs	r1, #0
                    DECODE_UINT;
   19c16:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19c1e:	0618      	lsls	r0, r3, #24
   19c20:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19c24:	d4f7      	bmi.n	19c16 <mp_execute_bytecode+0x69e>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   19c26:	09cb      	lsrs	r3, r1, #7
   19c28:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19c2c:	fa53 f381 	uxtab	r3, r3, r1
   19c30:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
   19c34:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19c38:	3d08      	subs	r5, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   19c3a:	462a      	mov	r2, r5
   19c3c:	2000      	movs	r0, #0
   19c3e:	f7f2 fad9 	bl	c1f4 <mp_call_method_n_kw_var>
   19c42:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19c44:	e562      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19c46:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_load_super_method(qst, sp - 1);
   19c4a:	f1a5 0108 	sub.w	r1, r5, #8
                    DECODE_QSTR;
   19c4e:	3403      	adds	r4, #3
                    sp -= 1;
   19c50:	3d04      	subs	r5, #4
                    mp_load_super_method(qst, sp - 1);
   19c52:	f7fd fa75 	bl	17140 <mp_load_super_method>
                    DISPATCH();
   19c56:	e559      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19c58:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_load_method(*sp, qst, sp);
   19c5c:	6828      	ldr	r0, [r5, #0]
   19c5e:	462a      	mov	r2, r5
                    DECODE_QSTR;
   19c60:	3403      	adds	r4, #3
                    mp_load_method(*sp, qst, sp);
   19c62:	f7f2 fd4f 	bl	c704 <mp_load_method>
                    sp += 1;
   19c66:	3504      	adds	r5, #4
                    DISPATCH();
   19c68:	e550      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19c6a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    SET_TOP(mp_load_attr(TOP(), qst));
   19c6e:	6828      	ldr	r0, [r5, #0]
   19c70:	f7f2 fc56 	bl	c520 <mp_load_attr>
                    DECODE_QSTR;
   19c74:	3403      	adds	r4, #3
                    SET_TOP(mp_load_attr(TOP(), qst));
   19c76:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19c78:	e548      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19c7a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    PUSH(mp_load_global(qst));
   19c7e:	f7f1 fc37 	bl	b4f0 <mp_load_global>
   19c82:	1d2b      	adds	r3, r5, #4
   19c84:	6068      	str	r0, [r5, #4]
                    DECODE_QSTR;
   19c86:	3403      	adds	r4, #3
                    PUSH(mp_load_global(qst));
   19c88:	461d      	mov	r5, r3
                    DISPATCH();
   19c8a:	e53f      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19c8c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    PUSH(mp_load_name(qst));
   19c90:	f7f1 fc07 	bl	b4a2 <mp_load_name>
   19c94:	1d2b      	adds	r3, r5, #4
   19c96:	6068      	str	r0, [r5, #4]
                    DECODE_QSTR;
   19c98:	3403      	adds	r4, #3
                    PUSH(mp_load_name(qst));
   19c9a:	461d      	mov	r5, r3
                    DISPATCH();
   19c9c:	e536      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19c9e:	4634      	mov	r4, r6
   19ca0:	2200      	movs	r2, #0
                    DECODE_UINT;
   19ca2:	f814 3b01 	ldrb.w	r3, [r4], #1
   19ca6:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19caa:	061e      	lsls	r6, r3, #24
   19cac:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19cb0:	d4f7      	bmi.n	19ca2 <mp_execute_bytecode+0x72a>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   19cb2:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19cb6:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19cba:	f7f4 fa57 	bl	e16c <mp_obj_cell_get>
                    if (obj_shared == MP_OBJ_NULL) {
   19cbe:	2800      	cmp	r0, #0
   19cc0:	f000 8356 	beq.w	1a370 <mp_execute_bytecode+0xdf8>
                        PUSH(value); // push the next iteration value
   19cc4:	6068      	str	r0, [r5, #4]
   19cc6:	3504      	adds	r5, #4
   19cc8:	e520      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19cca:	4634      	mov	r4, r6
   19ccc:	2200      	movs	r2, #0
                    DECODE_UINT;
   19cce:	f814 3b01 	ldrb.w	r3, [r4], #1
   19cd2:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19cd6:	061b      	lsls	r3, r3, #24
   19cd8:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19cdc:	d4f7      	bmi.n	19cce <mp_execute_bytecode+0x756>
                    obj_shared = fastn[-unum];
   19cde:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19ce2:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19ce6:	e7ea      	b.n	19cbe <mp_execute_bytecode+0x746>
                    PUSH(MP_OBJ_NULL);
   19ce8:	2300      	movs	r3, #0
   19cea:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19cec:	4634      	mov	r4, r6
                    PUSH(MP_OBJ_NULL);
   19cee:	3504      	adds	r5, #4
                    DISPATCH();
   19cf0:	e50c      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19cf2:	4634      	mov	r4, r6
   19cf4:	2200      	movs	r2, #0
                    DECODE_OBJ;
   19cf6:	f814 3b01 	ldrb.w	r3, [r4], #1
   19cfa:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19cfe:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19d02:	0619      	lsls	r1, r3, #24
   19d04:	d4f7      	bmi.n	19cf6 <mp_execute_bytecode+0x77e>
   19d06:	f8d8 3000 	ldr.w	r3, [r8]
   19d0a:	68db      	ldr	r3, [r3, #12]
                    PUSH(obj);
   19d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19d10:	606b      	str	r3, [r5, #4]
   19d12:	3504      	adds	r5, #4
                    DISPATCH();
   19d14:	e4fa      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19d16:	f8b4 3001 	ldrh.w	r3, [r4, #1]
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   19d1a:	009b      	lsls	r3, r3, #2
   19d1c:	f043 0302 	orr.w	r3, r3, #2
   19d20:	606b      	str	r3, [r5, #4]
                    DECODE_QSTR;
   19d22:	3403      	adds	r4, #3
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   19d24:	3504      	adds	r5, #4
                    DISPATCH();
   19d26:	e4f1      	b.n	1970c <mp_execute_bytecode+0x194>
                    if ((ip[0] & 0x40) != 0) {
   19d28:	7862      	ldrb	r2, [r4, #1]
                switch (*ip++) {
   19d2a:	4634      	mov	r4, r6
                    if ((ip[0] & 0x40) != 0) {
   19d2c:	f342 1280 	sbfx	r2, r2, #6, #1
                        num = (num << 7) | (*ip & 0x7f);
   19d30:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d34:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   19d38:	0618      	lsls	r0, r3, #24
                        num = (num << 7) | (*ip & 0x7f);
   19d3a:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   19d3e:	d4f7      	bmi.n	19d30 <mp_execute_bytecode+0x7b8>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   19d40:	0053      	lsls	r3, r2, #1
   19d42:	f043 0301 	orr.w	r3, r3, #1
   19d46:	606b      	str	r3, [r5, #4]
   19d48:	3504      	adds	r5, #4
                    DISPATCH();
   19d4a:	e4df      	b.n	1970c <mp_execute_bytecode+0x194>
                    PUSH(mp_const_true);
   19d4c:	4b09      	ldr	r3, [pc, #36]	; (19d74 <mp_execute_bytecode+0x7fc>)
   19d4e:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19d50:	4634      	mov	r4, r6
                    PUSH(mp_const_true);
   19d52:	3504      	adds	r5, #4
                    DISPATCH();
   19d54:	e4da      	b.n	1970c <mp_execute_bytecode+0x194>
                    PUSH(mp_const_none);
   19d56:	4b05      	ldr	r3, [pc, #20]	; (19d6c <mp_execute_bytecode+0x7f4>)
   19d58:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19d5a:	4634      	mov	r4, r6
                    PUSH(mp_const_none);
   19d5c:	3504      	adds	r5, #4
                    DISPATCH();
   19d5e:	e4d5      	b.n	1970c <mp_execute_bytecode+0x194>
                    PUSH(mp_const_false);
   19d60:	4b05      	ldr	r3, [pc, #20]	; (19d78 <mp_execute_bytecode+0x800>)
   19d62:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19d64:	4634      	mov	r4, r6
                    PUSH(mp_const_false);
   19d66:	3504      	adds	r5, #4
                    DISPATCH();
   19d68:	e4d0      	b.n	1970c <mp_execute_bytecode+0x194>
   19d6a:	bf00      	nop
   19d6c:	00023108 	.word	0x00023108
   19d70:	00021ef8 	.word	0x00021ef8
   19d74:	0002189c 	.word	0x0002189c
   19d78:	00021894 	.word	0x00021894
                switch (*ip++) {
   19d7c:	4634      	mov	r4, r6
   19d7e:	2600      	movs	r6, #0
                    DECODE_UINT;
   19d80:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19d88:	0619      	lsls	r1, r3, #24
   19d8a:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
   19d8e:	d4f7      	bmi.n	19d80 <mp_execute_bytecode+0x808>
                    mp_unpack_sequence(sp[0], unum, sp);
   19d90:	4631      	mov	r1, r6
                    sp += unum - 1;
   19d92:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
                    mp_unpack_sequence(sp[0], unum, sp);
   19d96:	462a      	mov	r2, r5
   19d98:	6828      	ldr	r0, [r5, #0]
                    sp += unum - 1;
   19d9a:	3e01      	subs	r6, #1
                    mp_unpack_sequence(sp[0], unum, sp);
   19d9c:	f7f2 fa4b 	bl	c236 <mp_unpack_sequence>
                    sp += unum - 1;
   19da0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
                    DISPATCH();
   19da4:	e4b2      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19da6:	2200      	movs	r2, #0
                    DECODE_UINT;
   19da8:	f816 3b01 	ldrb.w	r3, [r6], #1
   19dac:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19db0:	061b      	lsls	r3, r3, #24
   19db2:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19db6:	d4f7      	bmi.n	19da8 <mp_execute_bytecode+0x830>
                    mp_obj_t obj = sp[-(unum >> 2)];
   19db8:	0893      	lsrs	r3, r2, #2
   19dba:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   19dbe:	0794      	lsls	r4, r2, #30
                    mp_obj_t obj = sp[-(unum >> 2)];
   19dc0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
                    if ((unum & 3) == 0) {
   19dc4:	f040 81d7 	bne.w	1a176 <mp_execute_bytecode+0xbfe>
                        mp_obj_list_append(obj, sp[0]);
   19dc8:	f855 1904 	ldr.w	r1, [r5], #-4
                    DECODE_UINT;
   19dcc:	4634      	mov	r4, r6
                        mp_obj_list_append(obj, sp[0]);
   19dce:	f7f6 fffc 	bl	10dca <mp_obj_list_append>
   19dd2:	e49b      	b.n	1970c <mp_execute_bytecode+0x194>
                    sp[0] = sp[-2];
   19dd4:	682a      	ldr	r2, [r5, #0]
                    sp[-1] = sp[-3];
   19dd6:	f855 3c04 	ldr.w	r3, [r5, #-4]
                    sp[0] = sp[-2];
   19dda:	60aa      	str	r2, [r5, #8]
                    sp[-1] = sp[-3];
   19ddc:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19dde:	4634      	mov	r4, r6
                    sp += 2;
   19de0:	3508      	adds	r5, #8
                    DISPATCH();
   19de2:	e493      	b.n	1970c <mp_execute_bytecode+0x194>
                    PUSH(top);
   19de4:	682b      	ldr	r3, [r5, #0]
   19de6:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   19de8:	4634      	mov	r4, r6
                    PUSH(top);
   19dea:	3504      	adds	r5, #4
                    DISPATCH();
   19dec:	e48e      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19dee:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   19df2:	3403      	adds	r4, #3
                    mp_delete_global(qst);
   19df4:	f7f1 fbf1 	bl	b5da <mp_delete_global>
                    DISPATCH();
   19df8:	e488      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19dfa:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   19dfe:	3403      	adds	r4, #3
                    mp_delete_name(qst);
   19e00:	f7f1 fbc5 	bl	b58e <mp_delete_name>
                    DISPATCH();
   19e04:	e482      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19e06:	2200      	movs	r2, #0
                    DECODE_UINT;
   19e08:	f816 3b01 	ldrb.w	r3, [r6], #1
   19e0c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19e10:	061c      	lsls	r4, r3, #24
   19e12:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19e16:	d4f7      	bmi.n	19e08 <mp_execute_bytecode+0x890>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   19e18:	ebc2 7482 	rsb	r4, r2, r2, lsl #30
   19e1c:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   19e20:	f7f4 f9a4 	bl	e16c <mp_obj_cell_get>
   19e24:	2800      	cmp	r0, #0
   19e26:	f000 82a3 	beq.w	1a370 <mp_execute_bytecode+0xdf8>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   19e2a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
   19e2e:	2100      	movs	r1, #0
                    DECODE_UINT;
   19e30:	4634      	mov	r4, r6
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   19e32:	f7f4 f9a9 	bl	e188 <mp_obj_cell_set>
                    DISPATCH();
   19e36:	e469      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19e38:	2200      	movs	r2, #0
                    DECODE_UINT;
   19e3a:	f816 3b01 	ldrb.w	r3, [r6], #1
   19e3e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19e42:	061b      	lsls	r3, r3, #24
   19e44:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19e48:	d4f7      	bmi.n	19e3a <mp_execute_bytecode+0x8c2>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   19e4a:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19e4e:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   19e52:	2b00      	cmp	r3, #0
   19e54:	f000 828c 	beq.w	1a370 <mp_execute_bytecode+0xdf8>
                    fastn[-unum] = MP_OBJ_NULL;
   19e58:	2300      	movs	r3, #0
                    DECODE_UINT;
   19e5a:	4634      	mov	r4, r6
                    fastn[-unum] = MP_OBJ_NULL;
   19e5c:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
                    DISPATCH();
   19e60:	e454      	b.n	1970c <mp_execute_bytecode+0x194>
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   19e62:	f855 2c08 	ldr.w	r2, [r5, #-8]
   19e66:	6829      	ldr	r1, [r5, #0]
   19e68:	f855 0c04 	ldr.w	r0, [r5, #-4]
                switch (*ip++) {
   19e6c:	4634      	mov	r4, r6
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   19e6e:	f7f3 ffc3 	bl	ddf8 <mp_obj_subscr>
                    sp -= 3;
   19e72:	3d0c      	subs	r5, #12
                    DISPATCH();
   19e74:	e44a      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19e76:	f8b4 1001 	ldrh.w	r1, [r4, #1]
                    mp_store_attr(sp[0], qst, sp[-1]);
   19e7a:	f855 2c04 	ldr.w	r2, [r5, #-4]
   19e7e:	f855 0908 	ldr.w	r0, [r5], #-8
                    DECODE_QSTR;
   19e82:	3403      	adds	r4, #3
                    mp_store_attr(sp[0], qst, sp[-1]);
   19e84:	f7f2 fc8e 	bl	c7a4 <mp_store_attr>
                    DISPATCH();
   19e88:	e440      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19e8a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_store_global(qst, POP());
   19e8e:	6829      	ldr	r1, [r5, #0]
                    DECODE_QSTR;
   19e90:	3403      	adds	r4, #3
                    mp_store_global(qst, POP());
   19e92:	3d04      	subs	r5, #4
   19e94:	f7f1 fb8e 	bl	b5b4 <mp_store_global>
                    DISPATCH();
   19e98:	e438      	b.n	1970c <mp_execute_bytecode+0x194>
                    DECODE_QSTR;
   19e9a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
                    mp_store_name(qst, POP());
   19e9e:	6829      	ldr	r1, [r5, #0]
                    DECODE_QSTR;
   19ea0:	3403      	adds	r4, #3
                    mp_store_name(qst, POP());
   19ea2:	3d04      	subs	r5, #4
   19ea4:	f7f1 fb60 	bl	b568 <mp_store_name>
                    DISPATCH();
   19ea8:	e430      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19eaa:	4634      	mov	r4, r6
   19eac:	2200      	movs	r2, #0
                    DECODE_UINT;
   19eae:	f814 3b01 	ldrb.w	r3, [r4], #1
   19eb2:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19eb6:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19eba:	0619      	lsls	r1, r3, #24
   19ebc:	d4f7      	bmi.n	19eae <mp_execute_bytecode+0x936>
                    mp_obj_cell_set(fastn[-unum], POP());
   19ebe:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19ec2:	6829      	ldr	r1, [r5, #0]
   19ec4:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19ec8:	3d04      	subs	r5, #4
   19eca:	f7f4 f95d 	bl	e188 <mp_obj_cell_set>
                    DISPATCH();
   19ece:	e41d      	b.n	1970c <mp_execute_bytecode+0x194>
                switch (*ip++) {
   19ed0:	4634      	mov	r4, r6
   19ed2:	2200      	movs	r2, #0
                    DECODE_UINT;
   19ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
   19ed8:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19edc:	0618      	lsls	r0, r3, #24
   19ede:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19ee2:	d4f7      	bmi.n	19ed4 <mp_execute_bytecode+0x95c>
                    fastn[-unum] = POP();
   19ee4:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19ee8:	682b      	ldr	r3, [r5, #0]
   19eea:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
   19eee:	3d04      	subs	r5, #4
                    DISPATCH();
   19ef0:	e40c      	b.n	1970c <mp_execute_bytecode+0x194>
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19ef2:	6829      	ldr	r1, [r5, #0]
   19ef4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   19ef8:	2208      	movs	r2, #8
   19efa:	f7f3 ff7d 	bl	ddf8 <mp_obj_subscr>
                    mp_obj_t index = POP();
   19efe:	1f2b      	subs	r3, r5, #4
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19f00:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   19f04:	4634      	mov	r4, r6
                    mp_obj_t index = POP();
   19f06:	461d      	mov	r5, r3
                    DISPATCH();
   19f08:	e400      	b.n	1970c <mp_execute_bytecode+0x194>
                    PUSH(mp_load_build_class());
   19f0a:	f7f1 fb23 	bl	b554 <mp_load_build_class>
   19f0e:	1d2b      	adds	r3, r5, #4
   19f10:	6068      	str	r0, [r5, #4]
                switch (*ip++) {
   19f12:	4634      	mov	r4, r6
                    PUSH(mp_load_build_class());
   19f14:	461d      	mov	r5, r3
                    DISPATCH();
   19f16:	f7ff bbf9 	b.w	1970c <mp_execute_bytecode+0x194>
                    mp_obj_t obj = TOP();
   19f1a:	46a9      	mov	r9, r5
                    obj = mp_getiter(obj, iter_buf);
   19f1c:	4629      	mov	r1, r5
   19f1e:	f859 0b0c 	ldr.w	r0, [r9], #12
   19f22:	f7f2 fc67 	bl	c7f4 <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   19f26:	4285      	cmp	r5, r0
   19f28:	f000 81c3 	beq.w	1a2b2 <mp_execute_bytecode+0xd3a>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19f2c:	2300      	movs	r3, #0
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   19f2e:	6068      	str	r0, [r5, #4]
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19f30:	602b      	str	r3, [r5, #0]
                switch (*ip++) {
   19f32:	4634      	mov	r4, r6
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   19f34:	464d      	mov	r5, r9
   19f36:	f7ff bbe9 	b.w	1970c <mp_execute_bytecode+0x194>
                    DECODE_SLABEL;
   19f3a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   19f3e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   19f42:	3b7d      	subs	r3, #125	; 0x7d
   19f44:	4423      	add	r3, r4
   19f46:	606b      	str	r3, [r5, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   19f48:	78e2      	ldrb	r2, [r4, #3]
   19f4a:	60aa      	str	r2, [r5, #8]
   19f4c:	3508      	adds	r5, #8
   19f4e:	e013      	b.n	19f78 <mp_execute_bytecode+0xa00>
                        assert(exc_sp >= exc_stack);
   19f50:	9b06      	ldr	r3, [sp, #24]
   19f52:	429f      	cmp	r7, r3
                        unum -= 1;
   19f54:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   19f58:	f200 8237 	bhi.w	1a3ca <mp_execute_bytecode+0xe52>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19f5c:	9b06      	ldr	r3, [sp, #24]
   19f5e:	685b      	ldr	r3, [r3, #4]
   19f60:	0798      	lsls	r0, r3, #30
   19f62:	f100 8120 	bmi.w	1a1a6 <mp_execute_bytecode+0xc2e>
                        POP_EXC_BLOCK();
   19f66:	9b06      	ldr	r3, [sp, #24]
   19f68:	685b      	ldr	r3, [r3, #4]
   19f6a:	f003 0301 	and.w	r3, r3, #1
   19f6e:	f88d 3017 	strb.w	r3, [sp, #23]
   19f72:	9b06      	ldr	r3, [sp, #24]
   19f74:	3b0c      	subs	r3, #12
   19f76:	9306      	str	r3, [sp, #24]
                    while ((unum & 0x7f) > 0) {
   19f78:	0651      	lsls	r1, r2, #25
   19f7a:	d1e9      	bne.n	19f50 <mp_execute_bytecode+0x9d8>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19f7c:	f855 4c04 	ldr.w	r4, [r5, #-4]
                    if (unum != 0) {
   19f80:	2a00      	cmp	r2, #0
   19f82:	f040 8170 	bne.w	1a266 <mp_execute_bytecode+0xcee>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19f86:	3d08      	subs	r5, #8
   19f88:	e0c7      	b.n	1a11a <mp_execute_bytecode+0xba2>
                    assert(exc_sp >= exc_stack);
   19f8a:	9b06      	ldr	r3, [sp, #24]
   19f8c:	429f      	cmp	r7, r3
   19f8e:	f67f abb3 	bls.w	196f8 <mp_execute_bytecode+0x180>
   19f92:	4bca      	ldr	r3, [pc, #808]	; (1a2bc <mp_execute_bytecode+0xd44>)
   19f94:	4aca      	ldr	r2, [pc, #808]	; (1a2c0 <mp_execute_bytecode+0xd48>)
   19f96:	48cb      	ldr	r0, [pc, #812]	; (1a2c4 <mp_execute_bytecode+0xd4c>)
   19f98:	f240 21ff 	movw	r1, #767	; 0x2ff
   19f9c:	f001 fa70 	bl	1b480 <__assert_func>
   19fa0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    code_state->sp = sp;
   19fa4:	f8c8 5008 	str.w	r5, [r8, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19fa8:	f855 3c0c 	ldr.w	r3, [r5, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   19fac:	3403      	adds	r4, #3
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19fae:	2b00      	cmp	r3, #0
   19fb0:	f000 818e 	beq.w	1a2d0 <mp_execute_bytecode+0xd58>
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   19fb4:	f1a5 000c 	sub.w	r0, r5, #12
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   19fb8:	f7f2 fc70 	bl	c89c <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   19fbc:	2804      	cmp	r0, #4
   19fbe:	f47f ae81 	bne.w	19cc4 <mp_execute_bytecode+0x74c>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   19fc2:	3d10      	subs	r5, #16
                        ip += ulab; // jump to after for-block
   19fc4:	4434      	add	r4, r6
   19fc6:	f7ff bba1 	b.w	1970c <mp_execute_bytecode+0x194>
                    SET_TOP(mp_getiter(TOP(), NULL));
   19fca:	2100      	movs	r1, #0
   19fcc:	6828      	ldr	r0, [r5, #0]
   19fce:	f7f2 fc11 	bl	c7f4 <mp_getiter>
                switch (*ip++) {
   19fd2:	4634      	mov	r4, r6
                    SET_TOP(mp_getiter(TOP(), NULL));
   19fd4:	6028      	str	r0, [r5, #0]
                    DISPATCH();
   19fd6:	f7ff bb99 	b.w	1970c <mp_execute_bytecode+0x194>
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   19fda:	9a06      	ldr	r2, [sp, #24]
   19fdc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   19fe0:	320c      	adds	r2, #12
   19fe2:	9206      	str	r2, [sp, #24]
   19fe4:	9a06      	ldr	r2, [sp, #24]
   19fe6:	9806      	ldr	r0, [sp, #24]
   19fe8:	1ce1      	adds	r1, r4, #3
   19fea:	440b      	add	r3, r1
   19fec:	6013      	str	r3, [r2, #0]
   19fee:	7822      	ldrb	r2, [r4, #0]
   19ff0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19ff4:	9e06      	ldr	r6, [sp, #24]
   19ff6:	2a40      	cmp	r2, #64	; 0x40
   19ff8:	bf14      	ite	ne
   19ffa:	2200      	movne	r2, #0
   19ffc:	2202      	moveq	r2, #2
   19ffe:	4313      	orrs	r3, r2
   1a000:	432b      	orrs	r3, r5
   1a002:	2200      	movs	r2, #0
   1a004:	6043      	str	r3, [r0, #4]
   1a006:	460c      	mov	r4, r1
   1a008:	f88d 2017 	strb.w	r2, [sp, #23]
   1a00c:	60b2      	str	r2, [r6, #8]
                    DISPATCH();
   1a00e:	f7ff bb7d 	b.w	1970c <mp_execute_bytecode+0x194>
                    if (TOP() == mp_const_none) {
   1a012:	f8d5 9000 	ldr.w	r9, [r5]
   1a016:	4cac      	ldr	r4, [pc, #688]	; (1a2c8 <mp_execute_bytecode+0xd50>)
   1a018:	45a1      	cmp	r9, r4
   1a01a:	f000 8196 	beq.w	1a34a <mp_execute_bytecode+0xdd2>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a01e:	f019 0301 	ands.w	r3, r9, #1
   1a022:	9302      	str	r3, [sp, #8]
   1a024:	f000 80f5 	beq.w	1a212 <mp_execute_bytecode+0xc9a>
                        mp_obj_t data = sp[-1];
   1a028:	f855 3c04 	ldr.w	r3, [r5, #-4]
                        sp[0] = mp_const_none;
   1a02c:	602c      	str	r4, [r5, #0]
                        sp[1] = mp_const_none;
   1a02e:	606c      	str	r4, [r5, #4]
                        sp[-1] = mp_const_none;
   1a030:	f845 4c04 	str.w	r4, [r5, #-4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a034:	f1a5 020c 	sub.w	r2, r5, #12
   1a038:	2100      	movs	r1, #0
   1a03a:	2003      	movs	r0, #3
                        mp_obj_t data = sp[-1];
   1a03c:	9302      	str	r3, [sp, #8]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a03e:	f7f1 fe87 	bl	bd50 <mp_call_method_n_kw>
                        sp[-3] = data;
   1a042:	9b02      	ldr	r3, [sp, #8]
   1a044:	f845 3c0c 	str.w	r3, [r5, #-12]
                switch (*ip++) {
   1a048:	4634      	mov	r4, r6
                        sp[-2] = cause;
   1a04a:	f845 9d08 	str.w	r9, [r5, #-8]!
   1a04e:	f7ff bb5d 	b.w	1970c <mp_execute_bytecode+0x194>
                    mp_obj_t obj = TOP();
   1a052:	f8d5 9000 	ldr.w	r9, [r5]
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   1a056:	462a      	mov	r2, r5
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   1a058:	f105 0608 	add.w	r6, r5, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   1a05c:	4648      	mov	r0, r9
   1a05e:	210b      	movs	r1, #11
   1a060:	f7f2 fb50 	bl	c704 <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   1a064:	4648      	mov	r0, r9
   1a066:	4632      	mov	r2, r6
   1a068:	2109      	movs	r1, #9
   1a06a:	f7f2 fb4b 	bl	c704 <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   1a06e:	2100      	movs	r1, #0
   1a070:	4632      	mov	r2, r6
   1a072:	4608      	mov	r0, r1
   1a074:	f7f1 fe6c 	bl	bd50 <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   1a078:	9b06      	ldr	r3, [sp, #24]
   1a07a:	f8b4 2001 	ldrh.w	r2, [r4, #1]
   1a07e:	330c      	adds	r3, #12
   1a080:	9306      	str	r3, [sp, #24]
   1a082:	f8dd c018 	ldr.w	ip, [sp, #24]
   1a086:	f8dd e018 	ldr.w	lr, [sp, #24]
   1a08a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a08e:	9906      	ldr	r1, [sp, #24]
   1a090:	3403      	adds	r4, #3
   1a092:	4422      	add	r2, r4
   1a094:	f8cc 2000 	str.w	r2, [ip]
   1a098:	f043 0302 	orr.w	r3, r3, #2
                    sp += 1;
   1a09c:	1d2a      	adds	r2, r5, #4
                    PUSH_EXC_BLOCK(1);
   1a09e:	4313      	orrs	r3, r2
   1a0a0:	2200      	movs	r2, #0
   1a0a2:	f8ce 3004 	str.w	r3, [lr, #4]
   1a0a6:	f88d 2017 	strb.w	r2, [sp, #23]
   1a0aa:	608a      	str	r2, [r1, #8]
                    PUSH(ret);
   1a0ac:	60a8      	str	r0, [r5, #8]
   1a0ae:	4635      	mov	r5, r6
                    DISPATCH();
   1a0b0:	f7ff bb2c 	b.w	1970c <mp_execute_bytecode+0x194>
                    if (mp_obj_is_true(TOP())) {
   1a0b4:	6828      	ldr	r0, [r5, #0]
   1a0b6:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   1a0ba:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   1a0bc:	f7f3 fbd4 	bl	d868 <mp_obj_is_true>
   1a0c0:	b148      	cbz	r0, 1a0d6 <mp_execute_bytecode+0xb5e>
                        sp--;
   1a0c2:	3d04      	subs	r5, #4
   1a0c4:	e029      	b.n	1a11a <mp_execute_bytecode+0xba2>
                    if (mp_obj_is_true(TOP())) {
   1a0c6:	6828      	ldr	r0, [r5, #0]
   1a0c8:	f8b4 6001 	ldrh.w	r6, [r4, #1]
                    DECODE_SLABEL;
   1a0cc:	3403      	adds	r4, #3
                    if (mp_obj_is_true(TOP())) {
   1a0ce:	f7f3 fbcb 	bl	d868 <mp_obj_is_true>
   1a0d2:	2800      	cmp	r0, #0
   1a0d4:	d0f5      	beq.n	1a0c2 <mp_execute_bytecode+0xb4a>
                    DECODE_SLABEL;
   1a0d6:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   1a0da:	4434      	add	r4, r6
   1a0dc:	e01d      	b.n	1a11a <mp_execute_bytecode+0xba2>
                    if (!mp_obj_is_true(POP())) {
   1a0de:	6828      	ldr	r0, [r5, #0]
   1a0e0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1a0e4:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   1a0e6:	3403      	adds	r4, #3
                    if (!mp_obj_is_true(POP())) {
   1a0e8:	f7f3 fbbe 	bl	d868 <mp_obj_is_true>
   1a0ec:	b9a8      	cbnz	r0, 1a11a <mp_execute_bytecode+0xba2>
                    DECODE_SLABEL;
   1a0ee:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   1a0f2:	4434      	add	r4, r6
   1a0f4:	e011      	b.n	1a11a <mp_execute_bytecode+0xba2>
                    if (mp_obj_is_true(POP())) {
   1a0f6:	6828      	ldr	r0, [r5, #0]
   1a0f8:	f8b4 6001 	ldrh.w	r6, [r4, #1]
   1a0fc:	3d04      	subs	r5, #4
                    DECODE_SLABEL;
   1a0fe:	3403      	adds	r4, #3
                    if (mp_obj_is_true(POP())) {
   1a100:	f7f3 fbb2 	bl	d868 <mp_obj_is_true>
   1a104:	b148      	cbz	r0, 1a11a <mp_execute_bytecode+0xba2>
                    DECODE_SLABEL;
   1a106:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
                        ip += slab;
   1a10a:	4434      	add	r4, r6
   1a10c:	e005      	b.n	1a11a <mp_execute_bytecode+0xba2>
                    DECODE_SLABEL;
   1a10e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   1a112:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   1a116:	3b7d      	subs	r3, #125	; 0x7d
                    ip += slab;
   1a118:	441c      	add	r4, r3
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   1a11a:	4b6c      	ldr	r3, [pc, #432]	; (1a2cc <mp_execute_bytecode+0xd54>)
   1a11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a11e:	2b00      	cmp	r3, #0
   1a120:	f43f aaf4 	beq.w	1970c <mp_execute_bytecode+0x194>
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   1a124:	4b69      	ldr	r3, [pc, #420]	; (1a2cc <mp_execute_bytecode+0xd54>)
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   1a126:	4a69      	ldr	r2, [pc, #420]	; (1a2cc <mp_execute_bytecode+0xd54>)
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   1a128:	6b5c      	ldr	r4, [r3, #52]	; 0x34
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   1a12a:	2300      	movs	r3, #0
   1a12c:	6353      	str	r3, [r2, #52]	; 0x34
                    RAISE(obj);
   1a12e:	f7e6 f8b3 	bl	298 <nlr_pop>
   1a132:	9409      	str	r4, [sp, #36]	; 0x24
   1a134:	f7ff ba58 	b.w	195e8 <mp_execute_bytecode+0x70>
                    sp[0] = sp[-1];
   1a138:	e915 000c 	ldmdb	r5, {r2, r3}
                    mp_obj_t top = sp[0];
   1a13c:	6829      	ldr	r1, [r5, #0]
                    sp[-2] = top;
   1a13e:	f845 1c08 	str.w	r1, [r5, #-8]
                switch (*ip++) {
   1a142:	4634      	mov	r4, r6
                    sp[-1] = sp[-2];
   1a144:	f845 2c04 	str.w	r2, [r5, #-4]
                    sp[0] = sp[-1];
   1a148:	602b      	str	r3, [r5, #0]
                    DISPATCH();
   1a14a:	f7ff badf 	b.w	1970c <mp_execute_bytecode+0x194>
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   1a14e:	28af      	cmp	r0, #175	; 0xaf
   1a150:	d81a      	bhi.n	1a188 <mp_execute_bytecode+0xc10>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a152:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1a156:	005b      	lsls	r3, r3, #1
   1a158:	f043 0301 	orr.w	r3, r3, #1
   1a15c:	606b      	str	r3, [r5, #4]
                switch (*ip++) {
   1a15e:	4634      	mov	r4, r6
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a160:	3504      	adds	r5, #4
                        DISPATCH();
   1a162:	f7ff bad3 	b.w	1970c <mp_execute_bytecode+0x194>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a166:	07d3      	lsls	r3, r2, #31
   1a168:	f140 811e 	bpl.w	1a3a8 <mp_execute_bytecode+0xe30>
                        if (cause < 0) {
   1a16c:	1052      	asrs	r2, r2, #1
   1a16e:	f100 80d1 	bmi.w	1a314 <mp_execute_bytecode+0xd9c>
                            PUSH((mp_obj_t)cause);
   1a172:	602a      	str	r2, [r5, #0]
                            goto unwind_jump;
   1a174:	e700      	b.n	19f78 <mp_execute_bytecode+0xa00>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a176:	f855 2c04 	ldr.w	r2, [r5, #-4]
   1a17a:	f855 1908 	ldr.w	r1, [r5], #-8
                    DECODE_UINT;
   1a17e:	4634      	mov	r4, r6
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a180:	f7f4 ff57 	bl	f032 <mp_obj_dict_store>
   1a184:	f7ff bac2 	b.w	1970c <mp_execute_bytecode+0x194>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   1a188:	28bf      	cmp	r0, #191	; 0xbf
   1a18a:	f240 8085 	bls.w	1a298 <mp_execute_bytecode+0xd20>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   1a18e:	28cf      	cmp	r0, #207	; 0xcf
   1a190:	f200 80c3 	bhi.w	1a31a <mp_execute_bytecode+0xda2>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a194:	f1c0 00c0 	rsb	r0, r0, #192	; 0xc0
   1a198:	682b      	ldr	r3, [r5, #0]
   1a19a:	f84a 3020 	str.w	r3, [sl, r0, lsl #2]
                switch (*ip++) {
   1a19e:	4634      	mov	r4, r6
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a1a0:	3d04      	subs	r5, #4
                        DISPATCH();
   1a1a2:	f7ff bab3 	b.w	1970c <mp_execute_bytecode+0x194>
                            ip = exc_sp->handler; // get exception handler byte code address
   1a1a6:	9906      	ldr	r1, [sp, #24]
                            exc_sp--; // pop exception handler
   1a1a8:	9b06      	ldr	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   1a1aa:	0052      	lsls	r2, r2, #1
   1a1ac:	f042 0201 	orr.w	r2, r2, #1
   1a1b0:	602a      	str	r2, [r5, #0]
                            exc_sp--; // pop exception handler
   1a1b2:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   1a1b4:	680c      	ldr	r4, [r1, #0]
                            exc_sp--; // pop exception handler
   1a1b6:	9306      	str	r3, [sp, #24]
                            goto dispatch_loop; // run the exception handler
   1a1b8:	f7ff baa8 	b.w	1970c <mp_execute_bytecode+0x194>
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a1bc:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a1c0:	f8d8 2008 	ldr.w	r2, [r8, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a1c4:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   1a1c6:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a1c8:	3a10      	subs	r2, #16
                        code_state->ip = ip + ulab; // jump to after for-block
   1a1ca:	f8c8 3004 	str.w	r3, [r8, #4]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a1ce:	f8c8 2008 	str.w	r2, [r8, #8]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a1d2:	f7ff b9ee 	b.w	195b2 <mp_execute_bytecode+0x3a>
                        sp--;
   1a1d6:	3d04      	subs	r5, #4
                        obj = TOP();
   1a1d8:	6828      	ldr	r0, [r5, #0]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a1da:	f7f2 fcad 	bl	cb38 <mp_make_raise_obj>
   1a1de:	4604      	mov	r4, r0
   1a1e0:	f7e6 f85a 	bl	298 <nlr_pop>
   1a1e4:	9409      	str	r4, [sp, #36]	; 0x24
   1a1e6:	f7ff b9ff 	b.w	195e8 <mp_execute_bytecode+0x70>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a1ea:	2802      	cmp	r0, #2
   1a1ec:	f040 8110 	bne.w	1a410 <mp_execute_bytecode+0xe98>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1a1f0:	4659      	mov	r1, fp
   1a1f2:	9807      	ldr	r0, [sp, #28]
   1a1f4:	f7f5 fa18 	bl	f628 <mp_obj_exception_match>
   1a1f8:	2800      	cmp	r0, #0
   1a1fa:	f000 80e0 	beq.w	1a3be <mp_execute_bytecode+0xe46>
                            PUSH(mp_obj_exception_get_value(ret_value));
   1a1fe:	9807      	ldr	r0, [sp, #28]
   1a200:	f7f5 f842 	bl	f288 <mp_obj_exception_get_value>
   1a204:	f845 0c04 	str.w	r0, [r5, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a208:	f1b9 0f00 	cmp.w	r9, #0
   1a20c:	f47f ac27 	bne.w	19a5e <mp_execute_bytecode+0x4e6>
   1a210:	e42c      	b.n	19a6c <mp_execute_bytecode+0x4f4>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a212:	4648      	mov	r0, r9
   1a214:	f7f5 f9f8 	bl	f608 <mp_obj_is_exception_instance>
   1a218:	2800      	cmp	r0, #0
   1a21a:	f000 80e4 	beq.w	1a3e6 <mp_execute_bytecode+0xe6e>
                        sp[1] = sp[0];
   1a21e:	6828      	ldr	r0, [r5, #0]
   1a220:	6068      	str	r0, [r5, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1a222:	f7f3 fa45 	bl	d6b0 <mp_obj_get_type>
                        sp -= 2;
   1a226:	f1a5 0908 	sub.w	r9, r5, #8
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1a22a:	6028      	str	r0, [r5, #0]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   1a22c:	9902      	ldr	r1, [sp, #8]
                        sp[2] = mp_const_none;
   1a22e:	60ac      	str	r4, [r5, #8]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   1a230:	464a      	mov	r2, r9
   1a232:	2003      	movs	r0, #3
   1a234:	f7f1 fd8c 	bl	bd50 <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   1a238:	f7f3 fb16 	bl	d868 <mp_obj_is_true>
   1a23c:	2800      	cmp	r0, #0
   1a23e:	d031      	beq.n	1a2a4 <mp_execute_bytecode+0xd2c>
                            assert(exc_sp >= exc_stack);
   1a240:	9a06      	ldr	r2, [sp, #24]
                            SET_TOP(mp_const_none);
   1a242:	f845 4c08 	str.w	r4, [r5, #-8]
                            assert(exc_sp >= exc_stack);
   1a246:	4297      	cmp	r7, r2
   1a248:	f200 80c6 	bhi.w	1a3d8 <mp_execute_bytecode+0xe60>
                            POP_EXC_BLOCK();
   1a24c:	9b06      	ldr	r3, [sp, #24]
   1a24e:	685b      	ldr	r3, [r3, #4]
   1a250:	f003 0301 	and.w	r3, r3, #1
   1a254:	f88d 3017 	strb.w	r3, [sp, #23]
   1a258:	9b06      	ldr	r3, [sp, #24]
   1a25a:	3b0c      	subs	r3, #12
                        sp -= 2;
   1a25c:	464d      	mov	r5, r9
                switch (*ip++) {
   1a25e:	4634      	mov	r4, r6
                            POP_EXC_BLOCK();
   1a260:	9306      	str	r3, [sp, #24]
   1a262:	f7ff ba53 	b.w	1970c <mp_execute_bytecode+0x194>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   1a266:	3d18      	subs	r5, #24
   1a268:	e757      	b.n	1a11a <mp_execute_bytecode+0xba2>
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a26a:	9b06      	ldr	r3, [sp, #24]
                            finally_sp[1] = sp[0];
   1a26c:	6828      	ldr	r0, [r5, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a26e:	685d      	ldr	r5, [r3, #4]
                            ip = exc_sp->handler;
   1a270:	9a06      	ldr	r2, [sp, #24]
                            POP_EXC_BLOCK();
   1a272:	9b06      	ldr	r3, [sp, #24]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a274:	f025 0503 	bic.w	r5, r5, #3
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   1a27c:	6068      	str	r0, [r5, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a27e:	60a9      	str	r1, [r5, #8]
                            POP_EXC_BLOCK();
   1a280:	685b      	ldr	r3, [r3, #4]
                            ip = exc_sp->handler;
   1a282:	6814      	ldr	r4, [r2, #0]
                            POP_EXC_BLOCK();
   1a284:	f003 0301 	and.w	r3, r3, #1
   1a288:	f88d 3017 	strb.w	r3, [sp, #23]
   1a28c:	9b06      	ldr	r3, [sp, #24]
   1a28e:	3b0c      	subs	r3, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a290:	3508      	adds	r5, #8
                            POP_EXC_BLOCK();
   1a292:	9306      	str	r3, [sp, #24]
                            goto dispatch_loop;
   1a294:	f7ff ba3a 	b.w	1970c <mp_execute_bytecode+0x194>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a298:	f1c0 00b0 	rsb	r0, r0, #176	; 0xb0
                switch (*ip++) {
   1a29c:	4634      	mov	r4, r6
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a29e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
                        goto load_check;
   1a2a2:	e50c      	b.n	19cbe <mp_execute_bytecode+0x746>
                            sp[0] = sp[3];
   1a2a4:	686b      	ldr	r3, [r5, #4]
   1a2a6:	f845 3c08 	str.w	r3, [r5, #-8]
                switch (*ip++) {
   1a2aa:	4634      	mov	r4, r6
                        sp -= 2;
   1a2ac:	464d      	mov	r5, r9
   1a2ae:	f7ff ba2d 	b.w	1970c <mp_execute_bytecode+0x194>
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   1a2b2:	464d      	mov	r5, r9
                switch (*ip++) {
   1a2b4:	4634      	mov	r4, r6
   1a2b6:	f7ff ba29 	b.w	1970c <mp_execute_bytecode+0x194>
   1a2ba:	bf00      	nop
   1a2bc:	0002472c 	.word	0x0002472c
   1a2c0:	000246b8 	.word	0x000246b8
   1a2c4:	0002471c 	.word	0x0002471c
   1a2c8:	00023108 	.word	0x00023108
   1a2cc:	200012f0 	.word	0x200012f0
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   1a2d0:	f855 0c08 	ldr.w	r0, [r5, #-8]
   1a2d4:	e670      	b.n	19fb8 <mp_execute_bytecode+0xa40>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a2d6:	ab07      	add	r3, sp, #28
   1a2d8:	464a      	mov	r2, r9
   1a2da:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1a2de:	f7f2 fb55 	bl	c98c <mp_resume>
   1a2e2:	f7ff bbac 	b.w	19a3e <mp_execute_bytecode+0x4c6>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   1a2e6:	495c      	ldr	r1, [pc, #368]	; (1a458 <mp_execute_bytecode+0xee0>)
   1a2e8:	485c      	ldr	r0, [pc, #368]	; (1a45c <mp_execute_bytecode+0xee4>)
   1a2ea:	f7f5 f867 	bl	f3bc <mp_obj_new_exception_msg>
   1a2ee:	4604      	mov	r4, r0
                            RAISE(obj);
   1a2f0:	f7e5 ffd2 	bl	298 <nlr_pop>
   1a2f4:	9409      	str	r4, [sp, #36]	; 0x24
   1a2f6:	f7ff b977 	b.w	195e8 <mp_execute_bytecode+0x70>
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   1a2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a2fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a300:	f7f4 ffc2 	bl	f288 <mp_obj_exception_get_value>
   1a304:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1a306:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a30a:	3301      	adds	r3, #1
   1a30c:	f8c8 3004 	str.w	r3, [r8, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a310:	f7ff b94f 	b.w	195b2 <mp_execute_bytecode+0x3a>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1a314:	3d04      	subs	r5, #4
   1a316:	f7ff bacc 	b.w	198b2 <mp_execute_bytecode+0x33a>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NUM_BYTECODE) {
   1a31a:	28d3      	cmp	r0, #211	; 0xd3
   1a31c:	d939      	bls.n	1a392 <mp_execute_bytecode+0xe1a>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BINARY_OP_NUM_BYTECODE) {
   1a31e:	28f7      	cmp	r0, #247	; 0xf7
   1a320:	f200 8084 	bhi.w	1a42c <mp_execute_bytecode+0xeb4>
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a324:	682a      	ldr	r2, [r5, #0]
   1a326:	f855 1c04 	ldr.w	r1, [r5, #-4]
   1a32a:	38d7      	subs	r0, #215	; 0xd7
   1a32c:	f7f1 fa58 	bl	b7e0 <mp_binary_op>
                        mp_obj_t rhs = POP();
   1a330:	1f2b      	subs	r3, r5, #4
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a332:	f845 0c04 	str.w	r0, [r5, #-4]
                switch (*ip++) {
   1a336:	4634      	mov	r4, r6
                        mp_obj_t rhs = POP();
   1a338:	461d      	mov	r5, r3
                        DISPATCH();
   1a33a:	f7ff b9e7 	b.w	1970c <mp_execute_bytecode+0x194>
                code_state->state[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // put exception here because sp is invalid
   1a33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a340:	f8c8 3014 	str.w	r3, [r8, #20]
                return MP_VM_RETURN_EXCEPTION;
   1a344:	2002      	movs	r0, #2
   1a346:	f7ff badc 	b.w	19902 <mp_execute_bytecode+0x38a>
                        sp -= 2;
   1a34a:	f1a5 0308 	sub.w	r3, r5, #8
                        sp[1] = mp_const_none;
   1a34e:	f8c5 9004 	str.w	r9, [r5, #4]
                        sp[2] = mp_const_none;
   1a352:	f8c5 9008 	str.w	r9, [r5, #8]
                        mp_call_method_n_kw(3, 0, sp);
   1a356:	461a      	mov	r2, r3
   1a358:	2100      	movs	r1, #0
   1a35a:	2003      	movs	r0, #3
   1a35c:	9302      	str	r3, [sp, #8]
   1a35e:	f7f1 fcf7 	bl	bd50 <mp_call_method_n_kw>
                        sp -= 2;
   1a362:	9b02      	ldr	r3, [sp, #8]
                        SET_TOP(mp_const_none);
   1a364:	f845 9c08 	str.w	r9, [r5, #-8]
                switch (*ip++) {
   1a368:	4634      	mov	r4, r6
                        sp -= 2;
   1a36a:	461d      	mov	r5, r3
   1a36c:	f7ff b9ce 	b.w	1970c <mp_execute_bytecode+0x194>
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   1a370:	493b      	ldr	r1, [pc, #236]	; (1a460 <mp_execute_bytecode+0xee8>)
   1a372:	483c      	ldr	r0, [pc, #240]	; (1a464 <mp_execute_bytecode+0xeec>)
   1a374:	f7f5 f822 	bl	f3bc <mp_obj_new_exception_msg>
   1a378:	4604      	mov	r4, r0
                            RAISE(obj);
   1a37a:	f7e5 ff8d 	bl	298 <nlr_pop>
   1a37e:	9409      	str	r4, [sp, #36]	; 0x24
   1a380:	f7ff b932 	b.w	195e8 <mp_execute_bytecode+0x70>
                assert(exc_sp >= exc_stack);
   1a384:	4b38      	ldr	r3, [pc, #224]	; (1a468 <mp_execute_bytecode+0xef0>)
   1a386:	4a39      	ldr	r2, [pc, #228]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a388:	4839      	ldr	r0, [pc, #228]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a38a:	f240 5191 	movw	r1, #1425	; 0x591
   1a38e:	f001 f877 	bl	1b480 <__assert_func>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a392:	38d0      	subs	r0, #208	; 0xd0
   1a394:	6829      	ldr	r1, [r5, #0]
   1a396:	f7f1 f933 	bl	b600 <mp_unary_op>
                switch (*ip++) {
   1a39a:	4634      	mov	r4, r6
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a39c:	6028      	str	r0, [r5, #0]
                        DISPATCH();
   1a39e:	f7ff b9b5 	b.w	1970c <mp_execute_bytecode+0x194>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a3a2:	4648      	mov	r0, r9
   1a3a4:	f7ff bb15 	b.w	199d2 <mp_execute_bytecode+0x45a>
   1a3a8:	4610      	mov	r0, r2
                        assert(mp_obj_is_exception_instance(TOP()));
   1a3aa:	f7f5 f92d 	bl	f608 <mp_obj_is_exception_instance>
   1a3ae:	2800      	cmp	r0, #0
   1a3b0:	d04b      	beq.n	1a44a <mp_execute_bytecode+0xed2>
                        RAISE(TOP());
   1a3b2:	f7e5 ff71 	bl	298 <nlr_pop>
   1a3b6:	682c      	ldr	r4, [r5, #0]
   1a3b8:	9409      	str	r4, [sp, #36]	; 0x24
   1a3ba:	f7ff b915 	b.w	195e8 <mp_execute_bytecode+0x70>
                            RAISE(ret_value);
   1a3be:	f7e5 ff6b 	bl	298 <nlr_pop>
   1a3c2:	9c07      	ldr	r4, [sp, #28]
   1a3c4:	9409      	str	r4, [sp, #36]	; 0x24
   1a3c6:	f7ff b90f 	b.w	195e8 <mp_execute_bytecode+0x70>
                        assert(exc_sp >= exc_stack);
   1a3ca:	4b27      	ldr	r3, [pc, #156]	; (1a468 <mp_execute_bytecode+0xef0>)
   1a3cc:	4a27      	ldr	r2, [pc, #156]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a3ce:	4828      	ldr	r0, [pc, #160]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a3d0:	f44f 7124 	mov.w	r1, #656	; 0x290
   1a3d4:	f001 f854 	bl	1b480 <__assert_func>
                            assert(exc_sp >= exc_stack);
   1a3d8:	4b23      	ldr	r3, [pc, #140]	; (1a468 <mp_execute_bytecode+0xef0>)
   1a3da:	4a24      	ldr	r2, [pc, #144]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a3dc:	4824      	ldr	r0, [pc, #144]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a3de:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1a3e2:	f001 f84d 	bl	1b480 <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a3e6:	4b23      	ldr	r3, [pc, #140]	; (1a474 <mp_execute_bytecode+0xefc>)
   1a3e8:	4a20      	ldr	r2, [pc, #128]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a3ea:	4821      	ldr	r0, [pc, #132]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a3ec:	f240 216e 	movw	r1, #622	; 0x26e
   1a3f0:	f001 f846 	bl	1b480 <__assert_func>
                    assert(exc_sp >= exc_stack);
   1a3f4:	4b1c      	ldr	r3, [pc, #112]	; (1a468 <mp_execute_bytecode+0xef0>)
   1a3f6:	4a1d      	ldr	r2, [pc, #116]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a3f8:	481d      	ldr	r0, [pc, #116]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a3fa:	f240 3105 	movw	r1, #773	; 0x305
   1a3fe:	f001 f83f 	bl	1b480 <__assert_func>
                    assert(currently_in_except_block);
   1a402:	4b1d      	ldr	r3, [pc, #116]	; (1a478 <mp_execute_bytecode+0xf00>)
   1a404:	4a19      	ldr	r2, [pc, #100]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a406:	481a      	ldr	r0, [pc, #104]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a408:	f240 3106 	movw	r1, #774	; 0x306
   1a40c:	f001 f838 	bl	1b480 <__assert_func>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a410:	4b1a      	ldr	r3, [pc, #104]	; (1a47c <mp_execute_bytecode+0xf04>)
   1a412:	4a16      	ldr	r2, [pc, #88]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a414:	4816      	ldr	r0, [pc, #88]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a416:	f240 41a5 	movw	r1, #1189	; 0x4a5
   1a41a:	f001 f831 	bl	1b480 <__assert_func>
                    assert(exc_sp == exc_stack - 1);
   1a41e:	4b18      	ldr	r3, [pc, #96]	; (1a480 <mp_execute_bytecode+0xf08>)
   1a420:	4a12      	ldr	r2, [pc, #72]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a422:	4813      	ldr	r0, [pc, #76]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a424:	f240 4145 	movw	r1, #1093	; 0x445
   1a428:	f001 f82a 	bl	1b480 <__assert_func>
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   1a42c:	4915      	ldr	r1, [pc, #84]	; (1a484 <mp_execute_bytecode+0xf0c>)
   1a42e:	4816      	ldr	r0, [pc, #88]	; (1a488 <mp_execute_bytecode+0xf10>)
   1a430:	f7f4 ffc4 	bl	f3bc <mp_obj_new_exception_msg>
   1a434:	4604      	mov	r4, r0
                    nlr_pop();
   1a436:	f7e5 ff2f 	bl	298 <nlr_pop>
                    fastn[0] = obj;
   1a43a:	9b01      	ldr	r3, [sp, #4]
   1a43c:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   1a440:	2002      	movs	r0, #2
                    fastn[0] = obj;
   1a442:	f8c8 4014 	str.w	r4, [r8, #20]
                    return MP_VM_RETURN_EXCEPTION;
   1a446:	f7ff ba5c 	b.w	19902 <mp_execute_bytecode+0x38a>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a44a:	4b0a      	ldr	r3, [pc, #40]	; (1a474 <mp_execute_bytecode+0xefc>)
   1a44c:	4a07      	ldr	r2, [pc, #28]	; (1a46c <mp_execute_bytecode+0xef4>)
   1a44e:	4808      	ldr	r0, [pc, #32]	; (1a470 <mp_execute_bytecode+0xef8>)
   1a450:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1a454:	f001 f814 	bl	1b480 <__assert_func>
   1a458:	000247b4 	.word	0x000247b4
   1a45c:	000222b8 	.word	0x000222b8
   1a460:	000246cc 	.word	0x000246cc
   1a464:	00022240 	.word	0x00022240
   1a468:	0002472c 	.word	0x0002472c
   1a46c:	000246b8 	.word	0x000246b8
   1a470:	0002471c 	.word	0x0002471c
   1a474:	000246f8 	.word	0x000246f8
   1a478:	00024740 	.word	0x00024740
   1a47c:	00024774 	.word	0x00024774
   1a480:	0002475c 	.word	0x0002475c
   1a484:	00024798 	.word	0x00024798
   1a488:	000222f4 	.word	0x000222f4

0001a48c <mp_decode_uint>:
#else // don't print debugging info
#define DEBUG_PRINT (0)
#define DEBUG_printf(...) (void)0
#endif

mp_uint_t mp_decode_uint(const byte **ptr) {
   1a48c:	b480      	push	{r7}
   1a48e:	b087      	sub	sp, #28
   1a490:	af00      	add	r7, sp, #0
   1a492:	6078      	str	r0, [r7, #4]
    mp_uint_t unum = 0;
   1a494:	2300      	movs	r3, #0
   1a496:	617b      	str	r3, [r7, #20]
    byte val;
    const byte *p = *ptr;
   1a498:	687b      	ldr	r3, [r7, #4]
   1a49a:	681b      	ldr	r3, [r3, #0]
   1a49c:	613b      	str	r3, [r7, #16]
    do {
        val = *p++;
   1a49e:	693b      	ldr	r3, [r7, #16]
   1a4a0:	1c5a      	adds	r2, r3, #1
   1a4a2:	613a      	str	r2, [r7, #16]
   1a4a4:	781b      	ldrb	r3, [r3, #0]
   1a4a6:	73fb      	strb	r3, [r7, #15]
        unum = (unum << 7) | (val & 0x7f);
   1a4a8:	697b      	ldr	r3, [r7, #20]
   1a4aa:	01da      	lsls	r2, r3, #7
   1a4ac:	7bfb      	ldrb	r3, [r7, #15]
   1a4ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a4b2:	4313      	orrs	r3, r2
   1a4b4:	617b      	str	r3, [r7, #20]
    } while ((val & 0x80) != 0);
   1a4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1a4ba:	2b00      	cmp	r3, #0
   1a4bc:	dbef      	blt.n	1a49e <mp_decode_uint+0x12>
    *ptr = p;
   1a4be:	687b      	ldr	r3, [r7, #4]
   1a4c0:	693a      	ldr	r2, [r7, #16]
   1a4c2:	601a      	str	r2, [r3, #0]
    return unum;
   1a4c4:	697b      	ldr	r3, [r7, #20]
}
   1a4c6:	4618      	mov	r0, r3
   1a4c8:	371c      	adds	r7, #28
   1a4ca:	46bd      	mov	sp, r7
   1a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a4d0:	4770      	bx	lr

0001a4d2 <mp_decode_uint_value>:
// the caller doesn't need to increase the ptr argument.  If ptr is a local variable
// and the caller uses mp_decode_uint(&ptr) instead of this function, then the compiler
// must allocate a slot on the stack for ptr, and this slot cannot be reused for
// anything else in the function because the pointer may have been stored in a global
// and reused later in the function.
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1a4d2:	b580      	push	{r7, lr}
   1a4d4:	b082      	sub	sp, #8
   1a4d6:	af00      	add	r7, sp, #0
   1a4d8:	6078      	str	r0, [r7, #4]
    return mp_decode_uint(&ptr);
   1a4da:	1d3b      	adds	r3, r7, #4
   1a4dc:	4618      	mov	r0, r3
   1a4de:	f7ff ffd5 	bl	1a48c <mp_decode_uint>
   1a4e2:	4603      	mov	r3, r0
}
   1a4e4:	4618      	mov	r0, r3
   1a4e6:	3708      	adds	r7, #8
   1a4e8:	46bd      	mov	sp, r7
   1a4ea:	bd80      	pop	{r7, pc}

0001a4ec <mp_decode_uint_skip>:

// This function is used to help reduce stack usage at the caller, for the case when
// the caller doesn't need the actual value and just wants to skip over it.
const byte *mp_decode_uint_skip(const byte *ptr) {
   1a4ec:	b480      	push	{r7}
   1a4ee:	b083      	sub	sp, #12
   1a4f0:	af00      	add	r7, sp, #0
   1a4f2:	6078      	str	r0, [r7, #4]
    while ((*ptr++) & 0x80) {
   1a4f4:	bf00      	nop
   1a4f6:	687b      	ldr	r3, [r7, #4]
   1a4f8:	1c5a      	adds	r2, r3, #1
   1a4fa:	607a      	str	r2, [r7, #4]
   1a4fc:	781b      	ldrb	r3, [r3, #0]
   1a4fe:	b25b      	sxtb	r3, r3
   1a500:	2b00      	cmp	r3, #0
   1a502:	dbf8      	blt.n	1a4f6 <mp_decode_uint_skip+0xa>
    }
    return ptr;
   1a504:	687b      	ldr	r3, [r7, #4]
}
   1a506:	4618      	mov	r0, r3
   1a508:	370c      	adds	r7, #12
   1a50a:	46bd      	mov	sp, r7
   1a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a510:	4770      	bx	lr

0001a512 <fun_pos_args_mismatch>:

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1a512:	b580      	push	{r7, lr}
   1a514:	b084      	sub	sp, #16
   1a516:	af00      	add	r7, sp, #0
   1a518:	60f8      	str	r0, [r7, #12]
   1a51a:	60b9      	str	r1, [r7, #8]
   1a51c:	607a      	str	r2, [r7, #4]
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
    // generic message, used also for other argument issues
    (void)f;
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
   1a51e:	f7f2 fdd1 	bl	d0c4 <mp_arg_error_terse_mismatch>

0001a522 <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1a522:	b590      	push	{r4, r7, lr}
   1a524:	b09b      	sub	sp, #108	; 0x6c
   1a526:	af00      	add	r7, sp, #0
   1a528:	60f8      	str	r0, [r7, #12]
   1a52a:	60b9      	str	r1, [r7, #8]
   1a52c:	607a      	str	r2, [r7, #4]
   1a52e:	603b      	str	r3, [r7, #0]
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   1a530:	68fb      	ldr	r3, [r7, #12]
   1a532:	681b      	ldr	r3, [r3, #0]
   1a534:	637b      	str	r3, [r7, #52]	; 0x34

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   1a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a538:	689b      	ldr	r3, [r3, #8]
   1a53a:	68fa      	ldr	r2, [r7, #12]
   1a53c:	6852      	ldr	r2, [r2, #4]
   1a53e:	441a      	add	r2, r3
   1a540:	68fb      	ldr	r3, [r7, #12]
   1a542:	605a      	str	r2, [r3, #4]
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   1a544:	68fb      	ldr	r3, [r7, #12]
   1a546:	3304      	adds	r3, #4
   1a548:	4618      	mov	r0, r3
   1a54a:	f7ff ff9f 	bl	1a48c <mp_decode_uint>
   1a54e:	6338      	str	r0, [r7, #48]	; 0x30
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   1a550:	68fb      	ldr	r3, [r7, #12]
   1a552:	685b      	ldr	r3, [r3, #4]
   1a554:	4618      	mov	r0, r3
   1a556:	f7ff ffc9 	bl	1a4ec <mp_decode_uint_skip>
   1a55a:	4602      	mov	r2, r0
   1a55c:	68fb      	ldr	r3, [r7, #12]
   1a55e:	605a      	str	r2, [r3, #4]
    size_t scope_flags = *code_state->ip++;
   1a560:	68fb      	ldr	r3, [r7, #12]
   1a562:	685b      	ldr	r3, [r3, #4]
   1a564:	1c59      	adds	r1, r3, #1
   1a566:	68fa      	ldr	r2, [r7, #12]
   1a568:	6051      	str	r1, [r2, #4]
   1a56a:	781b      	ldrb	r3, [r3, #0]
   1a56c:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t n_pos_args = *code_state->ip++;
   1a56e:	68fb      	ldr	r3, [r7, #12]
   1a570:	685b      	ldr	r3, [r3, #4]
   1a572:	1c59      	adds	r1, r3, #1
   1a574:	68fa      	ldr	r2, [r7, #12]
   1a576:	6051      	str	r1, [r2, #4]
   1a578:	781b      	ldrb	r3, [r3, #0]
   1a57a:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t n_kwonly_args = *code_state->ip++;
   1a57c:	68fb      	ldr	r3, [r7, #12]
   1a57e:	685b      	ldr	r3, [r3, #4]
   1a580:	1c59      	adds	r1, r3, #1
   1a582:	68fa      	ldr	r2, [r7, #12]
   1a584:	6051      	str	r1, [r2, #4]
   1a586:	781b      	ldrb	r3, [r3, #0]
   1a588:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_def_pos_args = *code_state->ip++;
   1a58a:	68fb      	ldr	r3, [r7, #12]
   1a58c:	685b      	ldr	r3, [r3, #4]
   1a58e:	1c59      	adds	r1, r3, #1
   1a590:	68fa      	ldr	r2, [r7, #12]
   1a592:	6051      	str	r1, [r2, #4]
   1a594:	781b      	ldrb	r3, [r3, #0]
   1a596:	623b      	str	r3, [r7, #32]

    code_state->sp = &code_state->state[0] - 1;
   1a598:	68fb      	ldr	r3, [r7, #12]
   1a59a:	3314      	adds	r3, #20
   1a59c:	1f1a      	subs	r2, r3, #4
   1a59e:	68fb      	ldr	r3, [r7, #12]
   1a5a0:	609a      	str	r2, [r3, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   1a5a2:	68fb      	ldr	r3, [r7, #12]
   1a5a4:	f103 0214 	add.w	r2, r3, #20
   1a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a5ae:	3b03      	subs	r3, #3
   1a5b0:	009b      	lsls	r3, r3, #2
   1a5b2:	441a      	add	r2, r3
   1a5b4:	68fb      	ldr	r3, [r7, #12]
   1a5b6:	60da      	str	r2, [r3, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   1a5b8:	68fb      	ldr	r3, [r7, #12]
   1a5ba:	f103 0014 	add.w	r0, r3, #20
   1a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5c0:	009b      	lsls	r3, r3, #2
   1a5c2:	461a      	mov	r2, r3
   1a5c4:	2100      	movs	r1, #0
   1a5c6:	f002 fb21 	bl	1cc0c <memset>

    const mp_obj_t *kwargs = args + n_args;
   1a5ca:	68bb      	ldr	r3, [r7, #8]
   1a5cc:	009b      	lsls	r3, r3, #2
   1a5ce:	683a      	ldr	r2, [r7, #0]
   1a5d0:	4413      	add	r3, r2
   1a5d2:	61fb      	str	r3, [r7, #28]

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   1a5d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5d8:	1ad2      	subs	r2, r2, r3
   1a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a5dc:	1ad3      	subs	r3, r2, r3
   1a5de:	3b01      	subs	r3, #1
   1a5e0:	3304      	adds	r3, #4
   1a5e2:	009b      	lsls	r3, r3, #2
   1a5e4:	68fa      	ldr	r2, [r7, #12]
   1a5e6:	4413      	add	r3, r2
   1a5e8:	3304      	adds	r3, #4
   1a5ea:	667b      	str	r3, [r7, #100]	; 0x64

    // check positional arguments

    if (n_args > n_pos_args) {
   1a5ec:	68ba      	ldr	r2, [r7, #8]
   1a5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5f0:	429a      	cmp	r2, r3
   1a5f2:	d91b      	bls.n	1a62c <mp_setup_code_state+0x10a>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   1a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a5f6:	f003 0301 	and.w	r3, r3, #1
   1a5fa:	2b00      	cmp	r3, #0
   1a5fc:	d104      	bne.n	1a608 <mp_setup_code_state+0xe6>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   1a5fe:	68ba      	ldr	r2, [r7, #8]
   1a600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a602:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a604:	f7ff ff85 	bl	1a512 <fun_pos_args_mismatch>
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   1a608:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1a60a:	1f23      	subs	r3, r4, #4
   1a60c:	667b      	str	r3, [r7, #100]	; 0x64
   1a60e:	68ba      	ldr	r2, [r7, #8]
   1a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a612:	1ad0      	subs	r0, r2, r3
   1a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a616:	009b      	lsls	r3, r3, #2
   1a618:	683a      	ldr	r2, [r7, #0]
   1a61a:	4413      	add	r3, r2
   1a61c:	4619      	mov	r1, r3
   1a61e:	f7fb faf9 	bl	15c14 <mp_obj_new_tuple>
   1a622:	4603      	mov	r3, r0
   1a624:	6023      	str	r3, [r4, #0]
        n_args = n_pos_args;
   1a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a628:	60bb      	str	r3, [r7, #8]
   1a62a:	e03c      	b.n	1a6a6 <mp_setup_code_state+0x184>
    } else {
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   1a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a62e:	f003 0301 	and.w	r3, r3, #1
   1a632:	2b00      	cmp	r3, #0
   1a634:	d004      	beq.n	1a640 <mp_setup_code_state+0x11e>
            DEBUG_printf("passing empty tuple as *args\n");
            *var_pos_kw_args-- = mp_const_empty_tuple;
   1a636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a638:	1f1a      	subs	r2, r3, #4
   1a63a:	667a      	str	r2, [r7, #100]	; 0x64
   1a63c:	4aa5      	ldr	r2, [pc, #660]	; (1a8d4 <mp_setup_code_state+0x3b2>)
   1a63e:	601a      	str	r2, [r3, #0]
        }
        // Apply processing and check below only if we don't have kwargs,
        // otherwise, kw handling code below has own extensive checks.
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   1a640:	687b      	ldr	r3, [r7, #4]
   1a642:	2b00      	cmp	r3, #0
   1a644:	d12f      	bne.n	1a6a6 <mp_setup_code_state+0x184>
   1a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a648:	f003 0308 	and.w	r3, r3, #8
   1a64c:	2b00      	cmp	r3, #0
   1a64e:	d12a      	bne.n	1a6a6 <mp_setup_code_state+0x184>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   1a650:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a652:	6a3b      	ldr	r3, [r7, #32]
   1a654:	1ad2      	subs	r2, r2, r3
   1a656:	68bb      	ldr	r3, [r7, #8]
   1a658:	429a      	cmp	r2, r3
   1a65a:	d81c      	bhi.n	1a696 <mp_setup_code_state+0x174>
                // given enough arguments, but may need to use some default arguments
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a65c:	68bb      	ldr	r3, [r7, #8]
   1a65e:	663b      	str	r3, [r7, #96]	; 0x60
   1a660:	e014      	b.n	1a68c <mp_setup_code_state+0x16a>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   1a662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a666:	1ad3      	subs	r3, r2, r3
   1a668:	3b01      	subs	r3, #1
   1a66a:	6a39      	ldr	r1, [r7, #32]
   1a66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a66e:	1a89      	subs	r1, r1, r2
   1a670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a672:	4411      	add	r1, r2
   1a674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a676:	3104      	adds	r1, #4
   1a678:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a67c:	68f9      	ldr	r1, [r7, #12]
   1a67e:	3304      	adds	r3, #4
   1a680:	009b      	lsls	r3, r3, #2
   1a682:	440b      	add	r3, r1
   1a684:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a688:	3301      	adds	r3, #1
   1a68a:	663b      	str	r3, [r7, #96]	; 0x60
   1a68c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a690:	429a      	cmp	r2, r3
   1a692:	d3e6      	bcc.n	1a662 <mp_setup_code_state+0x140>
   1a694:	e007      	b.n	1a6a6 <mp_setup_code_state+0x184>
                }
            } else {
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   1a696:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a698:	6a3b      	ldr	r3, [r7, #32]
   1a69a:	1ad3      	subs	r3, r2, r3
   1a69c:	68ba      	ldr	r2, [r7, #8]
   1a69e:	4619      	mov	r1, r3
   1a6a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a6a2:	f7ff ff36 	bl	1a512 <fun_pos_args_mismatch>
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   1a6a6:	2300      	movs	r3, #0
   1a6a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a6aa:	e010      	b.n	1a6ce <mp_setup_code_state+0x1ac>
        code_state->state[n_state - 1 - i] = args[i];
   1a6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a6ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a6b0:	1ad3      	subs	r3, r2, r3
   1a6b2:	3b01      	subs	r3, #1
   1a6b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a6b6:	0092      	lsls	r2, r2, #2
   1a6b8:	6839      	ldr	r1, [r7, #0]
   1a6ba:	440a      	add	r2, r1
   1a6bc:	6812      	ldr	r2, [r2, #0]
   1a6be:	68f9      	ldr	r1, [r7, #12]
   1a6c0:	3304      	adds	r3, #4
   1a6c2:	009b      	lsls	r3, r3, #2
   1a6c4:	440b      	add	r3, r1
   1a6c6:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1a6c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a6ca:	3301      	adds	r3, #1
   1a6cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a6ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a6d0:	68bb      	ldr	r3, [r7, #8]
   1a6d2:	429a      	cmp	r2, r3
   1a6d4:	d3ea      	bcc.n	1a6ac <mp_setup_code_state+0x18a>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a6d6:	687b      	ldr	r3, [r7, #4]
   1a6d8:	2b00      	cmp	r3, #0
   1a6da:	d105      	bne.n	1a6e8 <mp_setup_code_state+0x1c6>
   1a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a6de:	f003 0308 	and.w	r3, r3, #8
   1a6e2:	2b00      	cmp	r3, #0
   1a6e4:	f000 8119 	beq.w	1a91a <mp_setup_code_state+0x3f8>
        DEBUG_printf("Initial args: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        mp_obj_t dict = MP_OBJ_NULL;
   1a6e8:	2300      	movs	r3, #0
   1a6ea:	65bb      	str	r3, [r7, #88]	; 0x58
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a6ee:	f003 0302 	and.w	r3, r3, #2
   1a6f2:	2b00      	cmp	r3, #0
   1a6f4:	d006      	beq.n	1a704 <mp_setup_code_state+0x1e2>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   1a6f6:	6878      	ldr	r0, [r7, #4]
   1a6f8:	f7f4 fc7a 	bl	eff0 <mp_obj_new_dict>
   1a6fc:	65b8      	str	r0, [r7, #88]	; 0x58
            *var_pos_kw_args = dict;
   1a6fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a700:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1a702:	601a      	str	r2, [r3, #0]
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   1a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a706:	68db      	ldr	r3, [r3, #12]
   1a708:	61bb      	str	r3, [r7, #24]

        for (size_t i = 0; i < n_kw; i++) {
   1a70a:	2300      	movs	r3, #0
   1a70c:	657b      	str	r3, [r7, #84]	; 0x54
   1a70e:	e059      	b.n	1a7c4 <mp_setup_code_state+0x2a2>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   1a710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a712:	00db      	lsls	r3, r3, #3
   1a714:	69fa      	ldr	r2, [r7, #28]
   1a716:	4413      	add	r3, r2
   1a718:	681b      	ldr	r3, [r3, #0]
   1a71a:	617b      	str	r3, [r7, #20]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a71c:	2300      	movs	r3, #0
   1a71e:	653b      	str	r3, [r7, #80]	; 0x50
   1a720:	e030      	b.n	1a784 <mp_setup_code_state+0x262>
                if (wanted_arg_name == arg_names[j]) {
   1a722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a724:	009b      	lsls	r3, r3, #2
   1a726:	69ba      	ldr	r2, [r7, #24]
   1a728:	4413      	add	r3, r2
   1a72a:	681a      	ldr	r2, [r3, #0]
   1a72c:	697b      	ldr	r3, [r7, #20]
   1a72e:	429a      	cmp	r2, r3
   1a730:	d125      	bne.n	1a77e <mp_setup_code_state+0x25c>
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   1a732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a736:	1ad3      	subs	r3, r2, r3
   1a738:	3b01      	subs	r3, #1
   1a73a:	68fa      	ldr	r2, [r7, #12]
   1a73c:	3304      	adds	r3, #4
   1a73e:	009b      	lsls	r3, r3, #2
   1a740:	4413      	add	r3, r2
   1a742:	685b      	ldr	r3, [r3, #4]
   1a744:	2b00      	cmp	r3, #0
   1a746:	d00a      	beq.n	1a75e <mp_setup_code_state+0x23c>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a748:	697b      	ldr	r3, [r7, #20]
   1a74a:	089b      	lsrs	r3, r3, #2
   1a74c:	461a      	mov	r2, r3
   1a74e:	4962      	ldr	r1, [pc, #392]	; (1a8d8 <mp_setup_code_state+0x3b6>)
   1a750:	4862      	ldr	r0, [pc, #392]	; (1a8dc <mp_setup_code_state+0x3ba>)
   1a752:	f7f4 fe93 	bl	f47c <mp_obj_new_exception_msg_varg>
   1a756:	4603      	mov	r3, r0
   1a758:	4618      	mov	r0, r3
   1a75a:	f7e5 fdc1 	bl	2e0 <nlr_jump>
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   1a75e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a762:	1ad3      	subs	r3, r2, r3
   1a764:	3b01      	subs	r3, #1
   1a766:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a768:	00d2      	lsls	r2, r2, #3
   1a76a:	3204      	adds	r2, #4
   1a76c:	69f9      	ldr	r1, [r7, #28]
   1a76e:	440a      	add	r2, r1
   1a770:	6812      	ldr	r2, [r2, #0]
   1a772:	68f9      	ldr	r1, [r7, #12]
   1a774:	3304      	adds	r3, #4
   1a776:	009b      	lsls	r3, r3, #2
   1a778:	440b      	add	r3, r1
   1a77a:	605a      	str	r2, [r3, #4]
                    goto continue2;
   1a77c:	e01f      	b.n	1a7be <mp_setup_code_state+0x29c>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a780:	3301      	adds	r3, #1
   1a782:	653b      	str	r3, [r7, #80]	; 0x50
   1a784:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a788:	441a      	add	r2, r3
   1a78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a78c:	429a      	cmp	r2, r3
   1a78e:	d8c8      	bhi.n	1a722 <mp_setup_code_state+0x200>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   1a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a792:	f003 0302 	and.w	r3, r3, #2
   1a796:	2b00      	cmp	r3, #0
   1a798:	d102      	bne.n	1a7a0 <mp_setup_code_state+0x27e>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    mp_raise_TypeError("unexpected keyword argument");
   1a79a:	4851      	ldr	r0, [pc, #324]	; (1a8e0 <mp_setup_code_state+0x3be>)
   1a79c:	f7f2 fb64 	bl	ce68 <mp_raise_TypeError>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   1a7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a7a2:	00db      	lsls	r3, r3, #3
   1a7a4:	69fa      	ldr	r2, [r7, #28]
   1a7a6:	4413      	add	r3, r2
   1a7a8:	6819      	ldr	r1, [r3, #0]
   1a7aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a7ac:	00db      	lsls	r3, r3, #3
   1a7ae:	3304      	adds	r3, #4
   1a7b0:	69fa      	ldr	r2, [r7, #28]
   1a7b2:	4413      	add	r3, r2
   1a7b4:	681b      	ldr	r3, [r3, #0]
   1a7b6:	461a      	mov	r2, r3
   1a7b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1a7ba:	f7f4 fc3a 	bl	f032 <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   1a7be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a7c0:	3301      	adds	r3, #1
   1a7c2:	657b      	str	r3, [r7, #84]	; 0x54
   1a7c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a7c6:	687b      	ldr	r3, [r7, #4]
   1a7c8:	429a      	cmp	r2, r3
   1a7ca:	d3a1      	bcc.n	1a710 <mp_setup_code_state+0x1ee>

        DEBUG_printf("Args with kws flattened: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   1a7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a7d0:	1ad3      	subs	r3, r2, r3
   1a7d2:	3304      	adds	r3, #4
   1a7d4:	009b      	lsls	r3, r3, #2
   1a7d6:	68fa      	ldr	r2, [r7, #12]
   1a7d8:	4413      	add	r3, r2
   1a7da:	3304      	adds	r3, #4
   1a7dc:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   1a7de:	6a3b      	ldr	r3, [r7, #32]
   1a7e0:	3b01      	subs	r3, #1
   1a7e2:	3304      	adds	r3, #4
   1a7e4:	009b      	lsls	r3, r3, #2
   1a7e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a7e8:	4413      	add	r3, r2
   1a7ea:	64bb      	str	r3, [r7, #72]	; 0x48
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a7ec:	6a3b      	ldr	r3, [r7, #32]
   1a7ee:	647b      	str	r3, [r7, #68]	; 0x44
   1a7f0:	e010      	b.n	1a814 <mp_setup_code_state+0x2f2>
            if (*d == MP_OBJ_NULL) {
   1a7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a7f4:	681b      	ldr	r3, [r3, #0]
   1a7f6:	2b00      	cmp	r3, #0
   1a7f8:	d103      	bne.n	1a802 <mp_setup_code_state+0x2e0>
                *d = *s;
   1a7fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a7fc:	681a      	ldr	r2, [r3, #0]
   1a7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a800:	601a      	str	r2, [r3, #0]
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a804:	3b01      	subs	r3, #1
   1a806:	647b      	str	r3, [r7, #68]	; 0x44
   1a808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a80a:	3304      	adds	r3, #4
   1a80c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a810:	3b04      	subs	r3, #4
   1a812:	64bb      	str	r3, [r7, #72]	; 0x48
   1a814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a816:	2b00      	cmp	r3, #0
   1a818:	d1eb      	bne.n	1a7f2 <mp_setup_code_state+0x2d0>

        DEBUG_printf("Args after filling default positional: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
   1a81a:	e018      	b.n	1a84e <mp_setup_code_state+0x32c>
            if (*d++ == MP_OBJ_NULL) {
   1a81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a81e:	1d1a      	adds	r2, r3, #4
   1a820:	64fa      	str	r2, [r7, #76]	; 0x4c
   1a822:	681b      	ldr	r3, [r3, #0]
   1a824:	2b00      	cmp	r3, #0
   1a826:	d112      	bne.n	1a84e <mp_setup_code_state+0x32c>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a82a:	3304      	adds	r3, #4
   1a82c:	009b      	lsls	r3, r3, #2
   1a82e:	68fa      	ldr	r2, [r7, #12]
   1a830:	4413      	add	r3, r2
   1a832:	3304      	adds	r3, #4
   1a834:	461a      	mov	r2, r3
   1a836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a838:	1ad3      	subs	r3, r2, r3
   1a83a:	109b      	asrs	r3, r3, #2
   1a83c:	461a      	mov	r2, r3
   1a83e:	4929      	ldr	r1, [pc, #164]	; (1a8e4 <mp_setup_code_state+0x3c2>)
   1a840:	4826      	ldr	r0, [pc, #152]	; (1a8dc <mp_setup_code_state+0x3ba>)
   1a842:	f7f4 fe1b 	bl	f47c <mp_obj_new_exception_msg_varg>
   1a846:	4603      	mov	r3, r0
   1a848:	4618      	mov	r0, r3
   1a84a:	f7e5 fd49 	bl	2e0 <nlr_jump>
        while (d < &code_state->state[n_state]) {
   1a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a850:	3304      	adds	r3, #4
   1a852:	009b      	lsls	r3, r3, #2
   1a854:	68fa      	ldr	r2, [r7, #12]
   1a856:	4413      	add	r3, r2
   1a858:	1d1a      	adds	r2, r3, #4
   1a85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a85c:	429a      	cmp	r2, r3
   1a85e:	d8dd      	bhi.n	1a81c <mp_setup_code_state+0x2fa>
            }
        }

        // Check that all mandatory keyword args are specified
        // Fill in default kw args if we have them
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a860:	2300      	movs	r3, #0
   1a862:	643b      	str	r3, [r7, #64]	; 0x40
   1a864:	e054      	b.n	1a910 <mp_setup_code_state+0x3ee>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   1a866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a86a:	1ad2      	subs	r2, r2, r3
   1a86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a86e:	1ad3      	subs	r3, r2, r3
   1a870:	3b01      	subs	r3, #1
   1a872:	68fa      	ldr	r2, [r7, #12]
   1a874:	3304      	adds	r3, #4
   1a876:	009b      	lsls	r3, r3, #2
   1a878:	4413      	add	r3, r2
   1a87a:	685b      	ldr	r3, [r3, #4]
   1a87c:	2b00      	cmp	r3, #0
   1a87e:	d144      	bne.n	1a90a <mp_setup_code_state+0x3e8>
                mp_map_elem_t *elem = NULL;
   1a880:	2300      	movs	r3, #0
   1a882:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a886:	f003 0308 	and.w	r3, r3, #8
   1a88a:	2b00      	cmp	r3, #0
   1a88c:	d011      	beq.n	1a8b2 <mp_setup_code_state+0x390>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   1a88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a890:	6a3a      	ldr	r2, [r7, #32]
   1a892:	3204      	adds	r2, #4
   1a894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a898:	1d18      	adds	r0, r3, #4
   1a89a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a89e:	4413      	add	r3, r2
   1a8a0:	009b      	lsls	r3, r3, #2
   1a8a2:	69ba      	ldr	r2, [r7, #24]
   1a8a4:	4413      	add	r3, r2
   1a8a6:	681b      	ldr	r3, [r3, #0]
   1a8a8:	2200      	movs	r2, #0
   1a8aa:	4619      	mov	r1, r3
   1a8ac:	f7f2 fd56 	bl	d35c <mp_map_lookup>
   1a8b0:	63f8      	str	r0, [r7, #60]	; 0x3c
                }
                if (elem != NULL) {
   1a8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a8b4:	2b00      	cmp	r3, #0
   1a8b6:	d017      	beq.n	1a8e8 <mp_setup_code_state+0x3c6>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   1a8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a8bc:	1ad2      	subs	r2, r2, r3
   1a8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a8c0:	1ad3      	subs	r3, r2, r3
   1a8c2:	3b01      	subs	r3, #1
   1a8c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a8c6:	6852      	ldr	r2, [r2, #4]
   1a8c8:	68f9      	ldr	r1, [r7, #12]
   1a8ca:	3304      	adds	r3, #4
   1a8cc:	009b      	lsls	r3, r3, #2
   1a8ce:	440b      	add	r3, r1
   1a8d0:	605a      	str	r2, [r3, #4]
   1a8d2:	e01a      	b.n	1a90a <mp_setup_code_state+0x3e8>
   1a8d4:	00023a5c 	.word	0x00023a5c
   1a8d8:	000247d4 	.word	0x000247d4
   1a8dc:	000223a8 	.word	0x000223a8
   1a8e0:	00024804 	.word	0x00024804
   1a8e4:	00024820 	.word	0x00024820
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a8ec:	4413      	add	r3, r2
   1a8ee:	009b      	lsls	r3, r3, #2
   1a8f0:	69ba      	ldr	r2, [r7, #24]
   1a8f2:	4413      	add	r3, r2
   1a8f4:	681b      	ldr	r3, [r3, #0]
   1a8f6:	089b      	lsrs	r3, r3, #2
   1a8f8:	461a      	mov	r2, r3
   1a8fa:	4928      	ldr	r1, [pc, #160]	; (1a99c <mp_setup_code_state+0x47a>)
   1a8fc:	4828      	ldr	r0, [pc, #160]	; (1a9a0 <mp_setup_code_state+0x47e>)
   1a8fe:	f7f4 fdbd 	bl	f47c <mp_obj_new_exception_msg_varg>
   1a902:	4603      	mov	r3, r0
   1a904:	4618      	mov	r0, r3
   1a906:	f7e5 fceb 	bl	2e0 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a90c:	3301      	adds	r3, #1
   1a90e:	643b      	str	r3, [r7, #64]	; 0x40
   1a910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a914:	429a      	cmp	r2, r3
   1a916:	d3a6      	bcc.n	1a866 <mp_setup_code_state+0x344>
    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a918:	e010      	b.n	1a93c <mp_setup_code_state+0x41a>
            }
        }

    } else {
        // no keyword arguments given
        if (n_kwonly_args != 0) {
   1a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a91c:	2b00      	cmp	r3, #0
   1a91e:	d002      	beq.n	1a926 <mp_setup_code_state+0x404>
            mp_raise_TypeError("function missing keyword-only argument");
   1a920:	4820      	ldr	r0, [pc, #128]	; (1a9a4 <mp_setup_code_state+0x482>)
   1a922:	f7f2 faa1 	bl	ce68 <mp_raise_TypeError>
        }
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a928:	f003 0302 	and.w	r3, r3, #2
   1a92c:	2b00      	cmp	r3, #0
   1a92e:	d005      	beq.n	1a93c <mp_setup_code_state+0x41a>
            *var_pos_kw_args = mp_obj_new_dict(0);
   1a930:	2000      	movs	r0, #0
   1a932:	f7f4 fb5d 	bl	eff0 <mp_obj_new_dict>
   1a936:	4602      	mov	r2, r0
   1a938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a93a:	601a      	str	r2, [r3, #0]
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   1a93c:	68fb      	ldr	r3, [r7, #12]
   1a93e:	685b      	ldr	r3, [r3, #4]
   1a940:	63bb      	str	r3, [r7, #56]	; 0x38

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   1a942:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a944:	f7ff fdc5 	bl	1a4d2 <mp_decode_uint_value>
   1a948:	4602      	mov	r2, r0
   1a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a94c:	4413      	add	r3, r2
   1a94e:	63bb      	str	r3, [r7, #56]	; 0x38

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   1a950:	e015      	b.n	1a97e <mp_setup_code_state+0x45c>
        code_state->state[n_state - 1 - local_num] =
   1a952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a954:	693b      	ldr	r3, [r7, #16]
   1a956:	1ad3      	subs	r3, r2, r3
   1a958:	1e5c      	subs	r4, r3, #1
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   1a95a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a95c:	693b      	ldr	r3, [r7, #16]
   1a95e:	1ad3      	subs	r3, r2, r3
   1a960:	3b01      	subs	r3, #1
   1a962:	68fa      	ldr	r2, [r7, #12]
   1a964:	3304      	adds	r3, #4
   1a966:	009b      	lsls	r3, r3, #2
   1a968:	4413      	add	r3, r2
   1a96a:	685b      	ldr	r3, [r3, #4]
   1a96c:	4618      	mov	r0, r3
   1a96e:	f7f3 fc1b 	bl	e1a8 <mp_obj_new_cell>
   1a972:	4601      	mov	r1, r0
        code_state->state[n_state - 1 - local_num] =
   1a974:	68fa      	ldr	r2, [r7, #12]
   1a976:	1d23      	adds	r3, r4, #4
   1a978:	009b      	lsls	r3, r3, #2
   1a97a:	4413      	add	r3, r2
   1a97c:	6059      	str	r1, [r3, #4]
    while ((local_num = *ip++) != 255) {
   1a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a980:	1c5a      	adds	r2, r3, #1
   1a982:	63ba      	str	r2, [r7, #56]	; 0x38
   1a984:	781b      	ldrb	r3, [r3, #0]
   1a986:	613b      	str	r3, [r7, #16]
   1a988:	693b      	ldr	r3, [r7, #16]
   1a98a:	2bff      	cmp	r3, #255	; 0xff
   1a98c:	d1e1      	bne.n	1a952 <mp_setup_code_state+0x430>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   1a98e:	68fb      	ldr	r3, [r7, #12]
   1a990:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1a992:	605a      	str	r2, [r3, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
    dump_args(code_state->state, n_state);
}
   1a994:	bf00      	nop
   1a996:	376c      	adds	r7, #108	; 0x6c
   1a998:	46bd      	mov	sp, r7
   1a99a:	bd90      	pop	{r4, r7, pc}
   1a99c:	00024854 	.word	0x00024854
   1a9a0:	000223a8 	.word	0x000223a8
   1a9a4:	00024884 	.word	0x00024884

0001a9a8 <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   1a9a8:	b580      	push	{r7, lr}
   1a9aa:	b084      	sub	sp, #16
   1a9ac:	af00      	add	r7, sp, #0
   1a9ae:	6078      	str	r0, [r7, #4]
   1a9b0:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   1a9b2:	2300      	movs	r3, #0
   1a9b4:	60fb      	str	r3, [r7, #12]
   1a9b6:	e00e      	b.n	1a9d6 <str_startswith_word+0x2e>
        if (str[i] != head[i]) {
   1a9b8:	687a      	ldr	r2, [r7, #4]
   1a9ba:	68fb      	ldr	r3, [r7, #12]
   1a9bc:	4413      	add	r3, r2
   1a9be:	781a      	ldrb	r2, [r3, #0]
   1a9c0:	6839      	ldr	r1, [r7, #0]
   1a9c2:	68fb      	ldr	r3, [r7, #12]
   1a9c4:	440b      	add	r3, r1
   1a9c6:	781b      	ldrb	r3, [r3, #0]
   1a9c8:	429a      	cmp	r2, r3
   1a9ca:	d001      	beq.n	1a9d0 <str_startswith_word+0x28>
            return false;
   1a9cc:	2300      	movs	r3, #0
   1a9ce:	e02d      	b.n	1aa2c <str_startswith_word+0x84>
    for (i = 0; str[i] && head[i]; i++) {
   1a9d0:	68fb      	ldr	r3, [r7, #12]
   1a9d2:	3301      	adds	r3, #1
   1a9d4:	60fb      	str	r3, [r7, #12]
   1a9d6:	687a      	ldr	r2, [r7, #4]
   1a9d8:	68fb      	ldr	r3, [r7, #12]
   1a9da:	4413      	add	r3, r2
   1a9dc:	781b      	ldrb	r3, [r3, #0]
   1a9de:	2b00      	cmp	r3, #0
   1a9e0:	d005      	beq.n	1a9ee <str_startswith_word+0x46>
   1a9e2:	683a      	ldr	r2, [r7, #0]
   1a9e4:	68fb      	ldr	r3, [r7, #12]
   1a9e6:	4413      	add	r3, r2
   1a9e8:	781b      	ldrb	r3, [r3, #0]
   1a9ea:	2b00      	cmp	r3, #0
   1a9ec:	d1e4      	bne.n	1a9b8 <str_startswith_word+0x10>
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   1a9ee:	683a      	ldr	r2, [r7, #0]
   1a9f0:	68fb      	ldr	r3, [r7, #12]
   1a9f2:	4413      	add	r3, r2
   1a9f4:	781b      	ldrb	r3, [r3, #0]
   1a9f6:	2b00      	cmp	r3, #0
   1a9f8:	d114      	bne.n	1aa24 <str_startswith_word+0x7c>
   1a9fa:	687a      	ldr	r2, [r7, #4]
   1a9fc:	68fb      	ldr	r3, [r7, #12]
   1a9fe:	4413      	add	r3, r2
   1aa00:	781b      	ldrb	r3, [r3, #0]
   1aa02:	2b00      	cmp	r3, #0
   1aa04:	d00c      	beq.n	1aa20 <str_startswith_word+0x78>
   1aa06:	687a      	ldr	r2, [r7, #4]
   1aa08:	68fb      	ldr	r3, [r7, #12]
   1aa0a:	4413      	add	r3, r2
   1aa0c:	781b      	ldrb	r3, [r3, #0]
   1aa0e:	4618      	mov	r0, r3
   1aa10:	f7e7 fd50 	bl	24b4 <unichar_isident>
   1aa14:	4603      	mov	r3, r0
   1aa16:	f083 0301 	eor.w	r3, r3, #1
   1aa1a:	b2db      	uxtb	r3, r3
   1aa1c:	2b00      	cmp	r3, #0
   1aa1e:	d001      	beq.n	1aa24 <str_startswith_word+0x7c>
   1aa20:	2301      	movs	r3, #1
   1aa22:	e000      	b.n	1aa26 <str_startswith_word+0x7e>
   1aa24:	2300      	movs	r3, #0
   1aa26:	f003 0301 	and.w	r3, r3, #1
   1aa2a:	b2db      	uxtb	r3, r3
}
   1aa2c:	4618      	mov	r0, r3
   1aa2e:	3710      	adds	r7, #16
   1aa30:	46bd      	mov	sp, r7
   1aa32:	bd80      	pop	{r7, pc}

0001aa34 <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   1aa34:	b580      	push	{r7, lr}
   1aa36:	b088      	sub	sp, #32
   1aa38:	af00      	add	r7, sp, #0
   1aa3a:	6078      	str	r0, [r7, #4]
    // check for blank input
    if (input[0] == '\0') {
   1aa3c:	687b      	ldr	r3, [r7, #4]
   1aa3e:	781b      	ldrb	r3, [r3, #0]
   1aa40:	2b00      	cmp	r3, #0
   1aa42:	d101      	bne.n	1aa48 <mp_repl_continue_with_input+0x14>
        return false;
   1aa44:	2300      	movs	r3, #0
   1aa46:	e10c      	b.n	1ac62 <mp_repl_continue_with_input+0x22e>
    }

    // check if input starts with a certain keyword
    bool starts_with_compound_keyword =
           input[0] == '@'
   1aa48:	687b      	ldr	r3, [r7, #4]
   1aa4a:	781b      	ldrb	r3, [r3, #0]
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   1aa4c:	2b40      	cmp	r3, #64	; 0x40
   1aa4e:	d030      	beq.n	1aab2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "if")
   1aa50:	4986      	ldr	r1, [pc, #536]	; (1ac6c <mp_repl_continue_with_input+0x238>)
   1aa52:	6878      	ldr	r0, [r7, #4]
   1aa54:	f7ff ffa8 	bl	1a9a8 <str_startswith_word>
   1aa58:	4603      	mov	r3, r0
   1aa5a:	2b00      	cmp	r3, #0
   1aa5c:	d129      	bne.n	1aab2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "while")
   1aa5e:	4984      	ldr	r1, [pc, #528]	; (1ac70 <mp_repl_continue_with_input+0x23c>)
   1aa60:	6878      	ldr	r0, [r7, #4]
   1aa62:	f7ff ffa1 	bl	1a9a8 <str_startswith_word>
   1aa66:	4603      	mov	r3, r0
   1aa68:	2b00      	cmp	r3, #0
   1aa6a:	d122      	bne.n	1aab2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "for")
   1aa6c:	4981      	ldr	r1, [pc, #516]	; (1ac74 <mp_repl_continue_with_input+0x240>)
   1aa6e:	6878      	ldr	r0, [r7, #4]
   1aa70:	f7ff ff9a 	bl	1a9a8 <str_startswith_word>
   1aa74:	4603      	mov	r3, r0
   1aa76:	2b00      	cmp	r3, #0
   1aa78:	d11b      	bne.n	1aab2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "try")
   1aa7a:	497f      	ldr	r1, [pc, #508]	; (1ac78 <mp_repl_continue_with_input+0x244>)
   1aa7c:	6878      	ldr	r0, [r7, #4]
   1aa7e:	f7ff ff93 	bl	1a9a8 <str_startswith_word>
   1aa82:	4603      	mov	r3, r0
   1aa84:	2b00      	cmp	r3, #0
   1aa86:	d114      	bne.n	1aab2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "with")
   1aa88:	497c      	ldr	r1, [pc, #496]	; (1ac7c <mp_repl_continue_with_input+0x248>)
   1aa8a:	6878      	ldr	r0, [r7, #4]
   1aa8c:	f7ff ff8c 	bl	1a9a8 <str_startswith_word>
   1aa90:	4603      	mov	r3, r0
   1aa92:	2b00      	cmp	r3, #0
   1aa94:	d10d      	bne.n	1aab2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "def")
   1aa96:	497a      	ldr	r1, [pc, #488]	; (1ac80 <mp_repl_continue_with_input+0x24c>)
   1aa98:	6878      	ldr	r0, [r7, #4]
   1aa9a:	f7ff ff85 	bl	1a9a8 <str_startswith_word>
   1aa9e:	4603      	mov	r3, r0
   1aaa0:	2b00      	cmp	r3, #0
   1aaa2:	d106      	bne.n	1aab2 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "class")
   1aaa4:	4977      	ldr	r1, [pc, #476]	; (1ac84 <mp_repl_continue_with_input+0x250>)
   1aaa6:	6878      	ldr	r0, [r7, #4]
   1aaa8:	f7ff ff7e 	bl	1a9a8 <str_startswith_word>
   1aaac:	4603      	mov	r3, r0
   1aaae:	2b00      	cmp	r3, #0
   1aab0:	d001      	beq.n	1aab6 <mp_repl_continue_with_input+0x82>
   1aab2:	2301      	movs	r3, #1
   1aab4:	e000      	b.n	1aab8 <mp_repl_continue_with_input+0x84>
   1aab6:	2300      	movs	r3, #0
    bool starts_with_compound_keyword =
   1aab8:	72fb      	strb	r3, [r7, #11]
   1aaba:	7afb      	ldrb	r3, [r7, #11]
   1aabc:	f003 0301 	and.w	r3, r3, #1
   1aac0:	72fb      	strb	r3, [r7, #11]
    #define Q_NONE (0)
    #define Q_1_SINGLE (1)
    #define Q_1_DOUBLE (2)
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
   1aac2:	2300      	movs	r3, #0
   1aac4:	61fb      	str	r3, [r7, #28]
    int n_brack = 0;
   1aac6:	2300      	movs	r3, #0
   1aac8:	61bb      	str	r3, [r7, #24]
    int n_brace = 0;
   1aaca:	2300      	movs	r3, #0
   1aacc:	617b      	str	r3, [r7, #20]
    int in_quote = Q_NONE;
   1aace:	2300      	movs	r3, #0
   1aad0:	613b      	str	r3, [r7, #16]
    const char *i;
    for (i = input; *i; i++) {
   1aad2:	687b      	ldr	r3, [r7, #4]
   1aad4:	60fb      	str	r3, [r7, #12]
   1aad6:	e097      	b.n	1ac08 <mp_repl_continue_with_input+0x1d4>
        if (*i == '\'') {
   1aad8:	68fb      	ldr	r3, [r7, #12]
   1aada:	781b      	ldrb	r3, [r3, #0]
   1aadc:	2b27      	cmp	r3, #39	; 0x27
   1aade:	d122      	bne.n	1ab26 <mp_repl_continue_with_input+0xf2>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   1aae0:	693b      	ldr	r3, [r7, #16]
   1aae2:	2b00      	cmp	r3, #0
   1aae4:	d002      	beq.n	1aaec <mp_repl_continue_with_input+0xb8>
   1aae6:	693b      	ldr	r3, [r7, #16]
   1aae8:	2b03      	cmp	r3, #3
   1aaea:	d111      	bne.n	1ab10 <mp_repl_continue_with_input+0xdc>
   1aaec:	68fb      	ldr	r3, [r7, #12]
   1aaee:	3301      	adds	r3, #1
   1aaf0:	781b      	ldrb	r3, [r3, #0]
   1aaf2:	2b27      	cmp	r3, #39	; 0x27
   1aaf4:	d10c      	bne.n	1ab10 <mp_repl_continue_with_input+0xdc>
   1aaf6:	68fb      	ldr	r3, [r7, #12]
   1aaf8:	3302      	adds	r3, #2
   1aafa:	781b      	ldrb	r3, [r3, #0]
   1aafc:	2b27      	cmp	r3, #39	; 0x27
   1aafe:	d107      	bne.n	1ab10 <mp_repl_continue_with_input+0xdc>
                i += 2;
   1ab00:	68fb      	ldr	r3, [r7, #12]
   1ab02:	3302      	adds	r3, #2
   1ab04:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_SINGLE - in_quote;
   1ab06:	693b      	ldr	r3, [r7, #16]
   1ab08:	f1c3 0303 	rsb	r3, r3, #3
   1ab0c:	613b      	str	r3, [r7, #16]
   1ab0e:	e078      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   1ab10:	693b      	ldr	r3, [r7, #16]
   1ab12:	2b00      	cmp	r3, #0
   1ab14:	d002      	beq.n	1ab1c <mp_repl_continue_with_input+0xe8>
   1ab16:	693b      	ldr	r3, [r7, #16]
   1ab18:	2b01      	cmp	r3, #1
   1ab1a:	d172      	bne.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_SINGLE - in_quote;
   1ab1c:	693b      	ldr	r3, [r7, #16]
   1ab1e:	f1c3 0301 	rsb	r3, r3, #1
   1ab22:	613b      	str	r3, [r7, #16]
   1ab24:	e06d      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '"') {
   1ab26:	68fb      	ldr	r3, [r7, #12]
   1ab28:	781b      	ldrb	r3, [r3, #0]
   1ab2a:	2b22      	cmp	r3, #34	; 0x22
   1ab2c:	d122      	bne.n	1ab74 <mp_repl_continue_with_input+0x140>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   1ab2e:	693b      	ldr	r3, [r7, #16]
   1ab30:	2b00      	cmp	r3, #0
   1ab32:	d002      	beq.n	1ab3a <mp_repl_continue_with_input+0x106>
   1ab34:	693b      	ldr	r3, [r7, #16]
   1ab36:	2b04      	cmp	r3, #4
   1ab38:	d111      	bne.n	1ab5e <mp_repl_continue_with_input+0x12a>
   1ab3a:	68fb      	ldr	r3, [r7, #12]
   1ab3c:	3301      	adds	r3, #1
   1ab3e:	781b      	ldrb	r3, [r3, #0]
   1ab40:	2b22      	cmp	r3, #34	; 0x22
   1ab42:	d10c      	bne.n	1ab5e <mp_repl_continue_with_input+0x12a>
   1ab44:	68fb      	ldr	r3, [r7, #12]
   1ab46:	3302      	adds	r3, #2
   1ab48:	781b      	ldrb	r3, [r3, #0]
   1ab4a:	2b22      	cmp	r3, #34	; 0x22
   1ab4c:	d107      	bne.n	1ab5e <mp_repl_continue_with_input+0x12a>
                i += 2;
   1ab4e:	68fb      	ldr	r3, [r7, #12]
   1ab50:	3302      	adds	r3, #2
   1ab52:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_DOUBLE - in_quote;
   1ab54:	693b      	ldr	r3, [r7, #16]
   1ab56:	f1c3 0304 	rsb	r3, r3, #4
   1ab5a:	613b      	str	r3, [r7, #16]
   1ab5c:	e051      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   1ab5e:	693b      	ldr	r3, [r7, #16]
   1ab60:	2b00      	cmp	r3, #0
   1ab62:	d002      	beq.n	1ab6a <mp_repl_continue_with_input+0x136>
   1ab64:	693b      	ldr	r3, [r7, #16]
   1ab66:	2b02      	cmp	r3, #2
   1ab68:	d14b      	bne.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_DOUBLE - in_quote;
   1ab6a:	693b      	ldr	r3, [r7, #16]
   1ab6c:	f1c3 0302 	rsb	r3, r3, #2
   1ab70:	613b      	str	r3, [r7, #16]
   1ab72:	e046      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   1ab74:	68fb      	ldr	r3, [r7, #12]
   1ab76:	781b      	ldrb	r3, [r3, #0]
   1ab78:	2b5c      	cmp	r3, #92	; 0x5c
   1ab7a:	d115      	bne.n	1aba8 <mp_repl_continue_with_input+0x174>
   1ab7c:	68fb      	ldr	r3, [r7, #12]
   1ab7e:	3301      	adds	r3, #1
   1ab80:	781b      	ldrb	r3, [r3, #0]
   1ab82:	2b27      	cmp	r3, #39	; 0x27
   1ab84:	d009      	beq.n	1ab9a <mp_repl_continue_with_input+0x166>
   1ab86:	68fb      	ldr	r3, [r7, #12]
   1ab88:	3301      	adds	r3, #1
   1ab8a:	781b      	ldrb	r3, [r3, #0]
   1ab8c:	2b22      	cmp	r3, #34	; 0x22
   1ab8e:	d004      	beq.n	1ab9a <mp_repl_continue_with_input+0x166>
   1ab90:	68fb      	ldr	r3, [r7, #12]
   1ab92:	3301      	adds	r3, #1
   1ab94:	781b      	ldrb	r3, [r3, #0]
   1ab96:	2b5c      	cmp	r3, #92	; 0x5c
   1ab98:	d106      	bne.n	1aba8 <mp_repl_continue_with_input+0x174>
            if (in_quote != Q_NONE) {
   1ab9a:	693b      	ldr	r3, [r7, #16]
   1ab9c:	2b00      	cmp	r3, #0
   1ab9e:	d030      	beq.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                i++;
   1aba0:	68fb      	ldr	r3, [r7, #12]
   1aba2:	3301      	adds	r3, #1
   1aba4:	60fb      	str	r3, [r7, #12]
            if (in_quote != Q_NONE) {
   1aba6:	e02c      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (in_quote == Q_NONE) {
   1aba8:	693b      	ldr	r3, [r7, #16]
   1abaa:	2b00      	cmp	r3, #0
   1abac:	d129      	bne.n	1ac02 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1abae:	68fb      	ldr	r3, [r7, #12]
   1abb0:	781b      	ldrb	r3, [r3, #0]
   1abb2:	2b5b      	cmp	r3, #91	; 0x5b
   1abb4:	d015      	beq.n	1abe2 <mp_repl_continue_with_input+0x1ae>
   1abb6:	2b5b      	cmp	r3, #91	; 0x5b
   1abb8:	dc04      	bgt.n	1abc4 <mp_repl_continue_with_input+0x190>
   1abba:	2b28      	cmp	r3, #40	; 0x28
   1abbc:	d009      	beq.n	1abd2 <mp_repl_continue_with_input+0x19e>
   1abbe:	2b29      	cmp	r3, #41	; 0x29
   1abc0:	d00b      	beq.n	1abda <mp_repl_continue_with_input+0x1a6>
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
                case '{': n_brace += 1; break;
                case '}': n_brace -= 1; break;
                default: break;
   1abc2:	e01e      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1abc4:	2b7b      	cmp	r3, #123	; 0x7b
   1abc6:	d014      	beq.n	1abf2 <mp_repl_continue_with_input+0x1be>
   1abc8:	2b7d      	cmp	r3, #125	; 0x7d
   1abca:	d016      	beq.n	1abfa <mp_repl_continue_with_input+0x1c6>
   1abcc:	2b5d      	cmp	r3, #93	; 0x5d
   1abce:	d00c      	beq.n	1abea <mp_repl_continue_with_input+0x1b6>
                default: break;
   1abd0:	e017      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                case '(': n_paren += 1; break;
   1abd2:	69fb      	ldr	r3, [r7, #28]
   1abd4:	3301      	adds	r3, #1
   1abd6:	61fb      	str	r3, [r7, #28]
   1abd8:	e013      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                case ')': n_paren -= 1; break;
   1abda:	69fb      	ldr	r3, [r7, #28]
   1abdc:	3b01      	subs	r3, #1
   1abde:	61fb      	str	r3, [r7, #28]
   1abe0:	e00f      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                case '[': n_brack += 1; break;
   1abe2:	69bb      	ldr	r3, [r7, #24]
   1abe4:	3301      	adds	r3, #1
   1abe6:	61bb      	str	r3, [r7, #24]
   1abe8:	e00b      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                case ']': n_brack -= 1; break;
   1abea:	69bb      	ldr	r3, [r7, #24]
   1abec:	3b01      	subs	r3, #1
   1abee:	61bb      	str	r3, [r7, #24]
   1abf0:	e007      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                case '{': n_brace += 1; break;
   1abf2:	697b      	ldr	r3, [r7, #20]
   1abf4:	3301      	adds	r3, #1
   1abf6:	617b      	str	r3, [r7, #20]
   1abf8:	e003      	b.n	1ac02 <mp_repl_continue_with_input+0x1ce>
                case '}': n_brace -= 1; break;
   1abfa:	697b      	ldr	r3, [r7, #20]
   1abfc:	3b01      	subs	r3, #1
   1abfe:	617b      	str	r3, [r7, #20]
   1ac00:	bf00      	nop
    for (i = input; *i; i++) {
   1ac02:	68fb      	ldr	r3, [r7, #12]
   1ac04:	3301      	adds	r3, #1
   1ac06:	60fb      	str	r3, [r7, #12]
   1ac08:	68fb      	ldr	r3, [r7, #12]
   1ac0a:	781b      	ldrb	r3, [r3, #0]
   1ac0c:	2b00      	cmp	r3, #0
   1ac0e:	f47f af63 	bne.w	1aad8 <mp_repl_continue_with_input+0xa4>
            }
        }
    }

    // continue if unmatched 3-quotes
    if (in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   1ac12:	693b      	ldr	r3, [r7, #16]
   1ac14:	2b03      	cmp	r3, #3
   1ac16:	d002      	beq.n	1ac1e <mp_repl_continue_with_input+0x1ea>
   1ac18:	693b      	ldr	r3, [r7, #16]
   1ac1a:	2b04      	cmp	r3, #4
   1ac1c:	d101      	bne.n	1ac22 <mp_repl_continue_with_input+0x1ee>
        return true;
   1ac1e:	2301      	movs	r3, #1
   1ac20:	e01f      	b.n	1ac62 <mp_repl_continue_with_input+0x22e>
    }

    // continue if unmatched brackets, but only if not in a 1-quote
    if ((n_paren > 0 || n_brack > 0 || n_brace > 0) && in_quote == Q_NONE) {
   1ac22:	69fb      	ldr	r3, [r7, #28]
   1ac24:	2b00      	cmp	r3, #0
   1ac26:	dc05      	bgt.n	1ac34 <mp_repl_continue_with_input+0x200>
   1ac28:	69bb      	ldr	r3, [r7, #24]
   1ac2a:	2b00      	cmp	r3, #0
   1ac2c:	dc02      	bgt.n	1ac34 <mp_repl_continue_with_input+0x200>
   1ac2e:	697b      	ldr	r3, [r7, #20]
   1ac30:	2b00      	cmp	r3, #0
   1ac32:	dd04      	ble.n	1ac3e <mp_repl_continue_with_input+0x20a>
   1ac34:	693b      	ldr	r3, [r7, #16]
   1ac36:	2b00      	cmp	r3, #0
   1ac38:	d101      	bne.n	1ac3e <mp_repl_continue_with_input+0x20a>
        return true;
   1ac3a:	2301      	movs	r3, #1
   1ac3c:	e011      	b.n	1ac62 <mp_repl_continue_with_input+0x22e>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   1ac3e:	68fb      	ldr	r3, [r7, #12]
   1ac40:	3b01      	subs	r3, #1
   1ac42:	781b      	ldrb	r3, [r3, #0]
   1ac44:	2b5c      	cmp	r3, #92	; 0x5c
   1ac46:	d101      	bne.n	1ac4c <mp_repl_continue_with_input+0x218>
        return true;
   1ac48:	2301      	movs	r3, #1
   1ac4a:	e00a      	b.n	1ac62 <mp_repl_continue_with_input+0x22e>
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   1ac4c:	7afb      	ldrb	r3, [r7, #11]
   1ac4e:	2b00      	cmp	r3, #0
   1ac50:	d006      	beq.n	1ac60 <mp_repl_continue_with_input+0x22c>
   1ac52:	68fb      	ldr	r3, [r7, #12]
   1ac54:	3b01      	subs	r3, #1
   1ac56:	781b      	ldrb	r3, [r3, #0]
   1ac58:	2b0a      	cmp	r3, #10
   1ac5a:	d001      	beq.n	1ac60 <mp_repl_continue_with_input+0x22c>
        return true;
   1ac5c:	2301      	movs	r3, #1
   1ac5e:	e000      	b.n	1ac62 <mp_repl_continue_with_input+0x22e>
    }

    // otherwise, don't continue
    return false;
   1ac60:	2300      	movs	r3, #0
}
   1ac62:	4618      	mov	r0, r3
   1ac64:	3720      	adds	r7, #32
   1ac66:	46bd      	mov	sp, r7
   1ac68:	bd80      	pop	{r7, pc}
   1ac6a:	bf00      	nop
   1ac6c:	000248ac 	.word	0x000248ac
   1ac70:	000248b0 	.word	0x000248b0
   1ac74:	000248b8 	.word	0x000248b8
   1ac78:	000248bc 	.word	0x000248bc
   1ac7c:	000248c0 	.word	0x000248c0
   1ac80:	000248c8 	.word	0x000248c8
   1ac84:	000248cc 	.word	0x000248cc

0001ac88 <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   1ac88:	b580      	push	{r7, lr}
   1ac8a:	b09c      	sub	sp, #112	; 0x70
   1ac8c:	af00      	add	r7, sp, #0
   1ac8e:	60f8      	str	r0, [r7, #12]
   1ac90:	60b9      	str	r1, [r7, #8]
   1ac92:	607a      	str	r2, [r7, #4]
   1ac94:	603b      	str	r3, [r7, #0]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
   1ac96:	68fb      	ldr	r3, [r7, #12]
   1ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
    const char *top = str + len;
   1ac9a:	68fa      	ldr	r2, [r7, #12]
   1ac9c:	68bb      	ldr	r3, [r7, #8]
   1ac9e:	4413      	add	r3, r2
   1aca0:	63bb      	str	r3, [r7, #56]	; 0x38
    for (const char *s = top; --s >= str;) {
   1aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aca4:	66fb      	str	r3, [r7, #108]	; 0x6c
   1aca6:	e023      	b.n	1acf0 <mp_repl_autocomplete+0x68>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   1aca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1acaa:	781b      	ldrb	r3, [r3, #0]
   1acac:	4618      	mov	r0, r3
   1acae:	f7e7 fba7 	bl	2400 <unichar_isalpha>
   1acb2:	4603      	mov	r3, r0
   1acb4:	f083 0301 	eor.w	r3, r3, #1
   1acb8:	b2db      	uxtb	r3, r3
   1acba:	2b00      	cmp	r3, #0
   1acbc:	d018      	beq.n	1acf0 <mp_repl_autocomplete+0x68>
   1acbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1acc0:	781b      	ldrb	r3, [r3, #0]
   1acc2:	4618      	mov	r0, r3
   1acc4:	f7e7 fbba 	bl	243c <unichar_isdigit>
   1acc8:	4603      	mov	r3, r0
   1acca:	f083 0301 	eor.w	r3, r3, #1
   1acce:	b2db      	uxtb	r3, r3
   1acd0:	2b00      	cmp	r3, #0
   1acd2:	d00d      	beq.n	1acf0 <mp_repl_autocomplete+0x68>
   1acd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1acd6:	781b      	ldrb	r3, [r3, #0]
   1acd8:	2b5f      	cmp	r3, #95	; 0x5f
   1acda:	d009      	beq.n	1acf0 <mp_repl_autocomplete+0x68>
   1acdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1acde:	781b      	ldrb	r3, [r3, #0]
   1ace0:	2b2e      	cmp	r3, #46	; 0x2e
   1ace2:	d005      	beq.n	1acf0 <mp_repl_autocomplete+0x68>
            ++s;
   1ace4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ace6:	3301      	adds	r3, #1
   1ace8:	66fb      	str	r3, [r7, #108]	; 0x6c
            str = s;
   1acea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1acec:	60fb      	str	r3, [r7, #12]
            break;
   1acee:	e006      	b.n	1acfe <mp_repl_autocomplete+0x76>
    for (const char *s = top; --s >= str;) {
   1acf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1acf2:	3b01      	subs	r3, #1
   1acf4:	66fb      	str	r3, [r7, #108]	; 0x6c
   1acf6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1acf8:	68fb      	ldr	r3, [r7, #12]
   1acfa:	429a      	cmp	r2, r3
   1acfc:	d2d4      	bcs.n	1aca8 <mp_repl_autocomplete+0x20>
        }
    }

    size_t nqstr = QSTR_TOTAL();
   1acfe:	4b95      	ldr	r3, [pc, #596]	; (1af54 <mp_repl_autocomplete+0x2cc>)
   1ad00:	691b      	ldr	r3, [r3, #16]
   1ad02:	685a      	ldr	r2, [r3, #4]
   1ad04:	4b93      	ldr	r3, [pc, #588]	; (1af54 <mp_repl_autocomplete+0x2cc>)
   1ad06:	691b      	ldr	r3, [r3, #16]
   1ad08:	68db      	ldr	r3, [r3, #12]
   1ad0a:	4413      	add	r3, r2
   1ad0c:	637b      	str	r3, [r7, #52]	; 0x34

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   1ad0e:	4b92      	ldr	r3, [pc, #584]	; (1af58 <mp_repl_autocomplete+0x2d0>)
   1ad10:	66bb      	str	r3, [r7, #104]	; 0x68
    mp_obj_t dest[2];

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
   1ad12:	68fb      	ldr	r3, [r7, #12]
   1ad14:	633b      	str	r3, [r7, #48]	; 0x30
        while (str < top && *str != '.') {
   1ad16:	e002      	b.n	1ad1e <mp_repl_autocomplete+0x96>
            ++str;
   1ad18:	68fb      	ldr	r3, [r7, #12]
   1ad1a:	3301      	adds	r3, #1
   1ad1c:	60fb      	str	r3, [r7, #12]
        while (str < top && *str != '.') {
   1ad1e:	68fa      	ldr	r2, [r7, #12]
   1ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad22:	429a      	cmp	r2, r3
   1ad24:	d203      	bcs.n	1ad2e <mp_repl_autocomplete+0xa6>
   1ad26:	68fb      	ldr	r3, [r7, #12]
   1ad28:	781b      	ldrb	r3, [r3, #0]
   1ad2a:	2b2e      	cmp	r3, #46	; 0x2e
   1ad2c:	d1f4      	bne.n	1ad18 <mp_repl_autocomplete+0x90>
        }
        size_t s_len = str - s_start;
   1ad2e:	68fa      	ldr	r2, [r7, #12]
   1ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ad32:	1ad3      	subs	r3, r2, r3
   1ad34:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (str < top) {
   1ad36:	68fa      	ldr	r2, [r7, #12]
   1ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad3a:	429a      	cmp	r2, r3
   1ad3c:	d21b      	bcs.n	1ad76 <mp_repl_autocomplete+0xee>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   1ad3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1ad40:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ad42:	f7e6 f945 	bl	fd0 <qstr_find_strn>
   1ad46:	62b8      	str	r0, [r7, #40]	; 0x28
            if (q == MP_QSTR_NULL) {
   1ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ad4a:	2b00      	cmp	r3, #0
   1ad4c:	d101      	bne.n	1ad52 <mp_repl_autocomplete+0xca>
                // lookup will fail
                return 0;
   1ad4e:	2300      	movs	r3, #0
   1ad50:	e0fc      	b.n	1af4c <mp_repl_autocomplete+0x2c4>
            }
            mp_load_method_protected(obj, q, dest, true);
   1ad52:	f107 0218 	add.w	r2, r7, #24
   1ad56:	2301      	movs	r3, #1
   1ad58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1ad5a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1ad5c:	f7f1 fcee 	bl	c73c <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   1ad60:	69bb      	ldr	r3, [r7, #24]
   1ad62:	66bb      	str	r3, [r7, #104]	; 0x68

            if (obj == MP_OBJ_NULL) {
   1ad64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1ad66:	2b00      	cmp	r3, #0
   1ad68:	d101      	bne.n	1ad6e <mp_repl_autocomplete+0xe6>
                // lookup failed
                return 0;
   1ad6a:	2300      	movs	r3, #0
   1ad6c:	e0ee      	b.n	1af4c <mp_repl_autocomplete+0x2c4>
            }

            // skip '.' to move to next word
            ++str;
   1ad6e:	68fb      	ldr	r3, [r7, #12]
   1ad70:	3301      	adds	r3, #1
   1ad72:	60fb      	str	r3, [r7, #12]
   1ad74:	e7cd      	b.n	1ad12 <mp_repl_autocomplete+0x8a>

        } else {
            // end of string, do completion on this partial name

            // look for matches
            const char *match_str = NULL;
   1ad76:	2300      	movs	r3, #0
   1ad78:	667b      	str	r3, [r7, #100]	; 0x64
            size_t match_len = 0;
   1ad7a:	2300      	movs	r3, #0
   1ad7c:	663b      	str	r3, [r7, #96]	; 0x60
            qstr q_first = 0, q_last = 0;
   1ad7e:	2300      	movs	r3, #0
   1ad80:	65fb      	str	r3, [r7, #92]	; 0x5c
   1ad82:	2300      	movs	r3, #0
   1ad84:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1ad86:	2302      	movs	r3, #2
   1ad88:	657b      	str	r3, [r7, #84]	; 0x54
   1ad8a:	e049      	b.n	1ae20 <mp_repl_autocomplete+0x198>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1ad8c:	f107 0314 	add.w	r3, r7, #20
   1ad90:	4619      	mov	r1, r3
   1ad92:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1ad94:	f7e6 fa66 	bl	1264 <qstr_data>
   1ad98:	6278      	str	r0, [r7, #36]	; 0x24
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1ad9a:	697b      	ldr	r3, [r7, #20]
   1ad9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ad9e:	429a      	cmp	r2, r3
   1ada0:	d83b      	bhi.n	1ae1a <mp_repl_autocomplete+0x192>
   1ada2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ada4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ada6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ada8:	f002 f81f 	bl	1cdea <strncmp>
   1adac:	4603      	mov	r3, r0
   1adae:	2b00      	cmp	r3, #0
   1adb0:	d133      	bne.n	1ae1a <mp_repl_autocomplete+0x192>
                    mp_load_method_protected(obj, q, dest, true);
   1adb2:	f107 0218 	add.w	r2, r7, #24
   1adb6:	2301      	movs	r3, #1
   1adb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1adba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1adbc:	f7f1 fcbe 	bl	c73c <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1adc0:	69bb      	ldr	r3, [r7, #24]
   1adc2:	2b00      	cmp	r3, #0
   1adc4:	d029      	beq.n	1ae1a <mp_repl_autocomplete+0x192>
                        if (match_str == NULL) {
   1adc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1adc8:	2b00      	cmp	r3, #0
   1adca:	d104      	bne.n	1add6 <mp_repl_autocomplete+0x14e>
                            match_str = d_str;
   1adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1adce:	667b      	str	r3, [r7, #100]	; 0x64
                            match_len = d_len;
   1add0:	697b      	ldr	r3, [r7, #20]
   1add2:	663b      	str	r3, [r7, #96]	; 0x60
   1add4:	e01a      	b.n	1ae0c <mp_repl_autocomplete+0x184>
                        } else {
                            // search for longest common prefix of match_str and d_str
                            // (assumes these strings are null-terminated)
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1add6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1add8:	653b      	str	r3, [r7, #80]	; 0x50
   1adda:	e00f      	b.n	1adfc <mp_repl_autocomplete+0x174>
                                if (match_str[j] != d_str[j]) {
   1addc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1adde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ade0:	4413      	add	r3, r2
   1ade2:	781a      	ldrb	r2, [r3, #0]
   1ade4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ade6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ade8:	440b      	add	r3, r1
   1adea:	781b      	ldrb	r3, [r3, #0]
   1adec:	429a      	cmp	r2, r3
   1adee:	d002      	beq.n	1adf6 <mp_repl_autocomplete+0x16e>
                                    match_len = j;
   1adf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1adf2:	663b      	str	r3, [r7, #96]	; 0x60
                                    break;
   1adf4:	e00a      	b.n	1ae0c <mp_repl_autocomplete+0x184>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1adf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1adf8:	3301      	adds	r3, #1
   1adfa:	653b      	str	r3, [r7, #80]	; 0x50
   1adfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1adfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ae00:	429a      	cmp	r2, r3
   1ae02:	d803      	bhi.n	1ae0c <mp_repl_autocomplete+0x184>
   1ae04:	697b      	ldr	r3, [r7, #20]
   1ae06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ae08:	429a      	cmp	r2, r3
   1ae0a:	d9e7      	bls.n	1addc <mp_repl_autocomplete+0x154>
                                }
                            }
                        }
                        if (q_first == 0) {
   1ae0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ae0e:	2b00      	cmp	r3, #0
   1ae10:	d101      	bne.n	1ae16 <mp_repl_autocomplete+0x18e>
                            q_first = q;
   1ae12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ae14:	65fb      	str	r3, [r7, #92]	; 0x5c
                        }
                        q_last = q;
   1ae16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ae18:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1ae1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ae1c:	3301      	adds	r3, #1
   1ae1e:	657b      	str	r3, [r7, #84]	; 0x54
   1ae20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1ae22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae24:	429a      	cmp	r2, r3
   1ae26:	d3b1      	bcc.n	1ad8c <mp_repl_autocomplete+0x104>
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   1ae28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ae2a:	2b00      	cmp	r3, #0
   1ae2c:	d116      	bne.n	1ae5c <mp_repl_autocomplete+0x1d4>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   1ae2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ae30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ae32:	429a      	cmp	r2, r3
   1ae34:	d110      	bne.n	1ae58 <mp_repl_autocomplete+0x1d0>
                    static const char import_str[] = "import ";
                    if (memcmp(s_start, import_str, s_len) == 0) {
   1ae36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ae38:	4948      	ldr	r1, [pc, #288]	; (1af5c <mp_repl_autocomplete+0x2d4>)
   1ae3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ae3c:	f001 ff31 	bl	1cca2 <memcmp>
   1ae40:	4603      	mov	r3, r0
   1ae42:	2b00      	cmp	r3, #0
   1ae44:	d108      	bne.n	1ae58 <mp_repl_autocomplete+0x1d0>
                        *compl_str = import_str + s_len;
   1ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae48:	4a44      	ldr	r2, [pc, #272]	; (1af5c <mp_repl_autocomplete+0x2d4>)
   1ae4a:	441a      	add	r2, r3
   1ae4c:	683b      	ldr	r3, [r7, #0]
   1ae4e:	601a      	str	r2, [r3, #0]
                        return sizeof(import_str) - 1 - s_len;
   1ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae52:	f1c3 0307 	rsb	r3, r3, #7
   1ae56:	e079      	b.n	1af4c <mp_repl_autocomplete+0x2c4>
                    }
                }

                return 0;
   1ae58:	2300      	movs	r3, #0
   1ae5a:	e077      	b.n	1af4c <mp_repl_autocomplete+0x2c4>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   1ae5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1ae5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1ae60:	429a      	cmp	r2, r3
   1ae62:	d003      	beq.n	1ae6c <mp_repl_autocomplete+0x1e4>
   1ae64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae68:	429a      	cmp	r2, r3
   1ae6a:	d908      	bls.n	1ae7e <mp_repl_autocomplete+0x1f6>
                *compl_str = match_str + s_len;
   1ae6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae70:	441a      	add	r2, r3
   1ae72:	683b      	ldr	r3, [r7, #0]
   1ae74:	601a      	str	r2, [r3, #0]
                return match_len - s_len;
   1ae76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae7a:	1ad3      	subs	r3, r2, r3
   1ae7c:	e066      	b.n	1af4c <mp_repl_autocomplete+0x2c4>
            // multiple matches found, print them out

            #define WORD_SLOT_LEN (16)
            #define MAX_LINE_LEN  (4 * WORD_SLOT_LEN)

            int line_len = MAX_LINE_LEN; // force a newline for first word
   1ae7e:	2340      	movs	r3, #64	; 0x40
   1ae80:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1ae82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ae84:	64bb      	str	r3, [r7, #72]	; 0x48
   1ae86:	e057      	b.n	1af38 <mp_repl_autocomplete+0x2b0>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1ae88:	f107 0310 	add.w	r3, r7, #16
   1ae8c:	4619      	mov	r1, r3
   1ae8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1ae90:	f7e6 f9e8 	bl	1264 <qstr_data>
   1ae94:	6238      	str	r0, [r7, #32]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1ae96:	693b      	ldr	r3, [r7, #16]
   1ae98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ae9a:	429a      	cmp	r2, r3
   1ae9c:	d849      	bhi.n	1af32 <mp_repl_autocomplete+0x2aa>
   1ae9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1aea0:	6a39      	ldr	r1, [r7, #32]
   1aea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1aea4:	f001 ffa1 	bl	1cdea <strncmp>
   1aea8:	4603      	mov	r3, r0
   1aeaa:	2b00      	cmp	r3, #0
   1aeac:	d141      	bne.n	1af32 <mp_repl_autocomplete+0x2aa>
                    mp_load_method_protected(obj, q, dest, true);
   1aeae:	f107 0218 	add.w	r2, r7, #24
   1aeb2:	2301      	movs	r3, #1
   1aeb4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1aeb6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1aeb8:	f7f1 fc40 	bl	c73c <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1aebc:	69bb      	ldr	r3, [r7, #24]
   1aebe:	2b00      	cmp	r3, #0
   1aec0:	d037      	beq.n	1af32 <mp_repl_autocomplete+0x2aa>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   1aec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1aec4:	330f      	adds	r3, #15
   1aec6:	2b00      	cmp	r3, #0
   1aec8:	da00      	bge.n	1aecc <mp_repl_autocomplete+0x244>
   1aeca:	330f      	adds	r3, #15
   1aecc:	111b      	asrs	r3, r3, #4
   1aece:	011a      	lsls	r2, r3, #4
   1aed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1aed2:	1ad3      	subs	r3, r2, r3
   1aed4:	647b      	str	r3, [r7, #68]	; 0x44
                        if (gap < 2) {
   1aed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1aed8:	2b01      	cmp	r3, #1
   1aeda:	dc02      	bgt.n	1aee2 <mp_repl_autocomplete+0x25a>
                            gap += WORD_SLOT_LEN;
   1aedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1aede:	3310      	adds	r3, #16
   1aee0:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   1aee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1aee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1aee6:	4413      	add	r3, r2
   1aee8:	461a      	mov	r2, r3
   1aeea:	693b      	ldr	r3, [r7, #16]
   1aeec:	4413      	add	r3, r2
   1aeee:	2b40      	cmp	r3, #64	; 0x40
   1aef0:	d818      	bhi.n	1af24 <mp_repl_autocomplete+0x29c>
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
   1aef2:	2300      	movs	r3, #0
   1aef4:	643b      	str	r3, [r7, #64]	; 0x40
   1aef6:	e006      	b.n	1af06 <mp_repl_autocomplete+0x27e>
                                mp_print_str(print, " ");
   1aef8:	4919      	ldr	r1, [pc, #100]	; (1af60 <mp_repl_autocomplete+0x2d8>)
   1aefa:	6878      	ldr	r0, [r7, #4]
   1aefc:	f7e6 fce2 	bl	18c4 <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   1af00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1af02:	3301      	adds	r3, #1
   1af04:	643b      	str	r3, [r7, #64]	; 0x40
   1af06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1af08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af0a:	429a      	cmp	r2, r3
   1af0c:	dbf4      	blt.n	1aef8 <mp_repl_autocomplete+0x270>
                            }
                            mp_print_str(print, d_str);
   1af0e:	6a39      	ldr	r1, [r7, #32]
   1af10:	6878      	ldr	r0, [r7, #4]
   1af12:	f7e6 fcd7 	bl	18c4 <mp_print_str>
                            line_len += gap + d_len;
   1af16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1af18:	693b      	ldr	r3, [r7, #16]
   1af1a:	441a      	add	r2, r3
   1af1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1af1e:	4413      	add	r3, r2
   1af20:	64fb      	str	r3, [r7, #76]	; 0x4c
   1af22:	e006      	b.n	1af32 <mp_repl_autocomplete+0x2aa>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   1af24:	6a3a      	ldr	r2, [r7, #32]
   1af26:	490f      	ldr	r1, [pc, #60]	; (1af64 <mp_repl_autocomplete+0x2dc>)
   1af28:	6878      	ldr	r0, [r7, #4]
   1af2a:	f7e6 ffdd 	bl	1ee8 <mp_printf>
                            line_len = d_len;
   1af2e:	693b      	ldr	r3, [r7, #16]
   1af30:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1af32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1af34:	3301      	adds	r3, #1
   1af36:	64bb      	str	r3, [r7, #72]	; 0x48
   1af38:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1af3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1af3c:	429a      	cmp	r2, r3
   1af3e:	d9a3      	bls.n	1ae88 <mp_repl_autocomplete+0x200>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1af40:	4909      	ldr	r1, [pc, #36]	; (1af68 <mp_repl_autocomplete+0x2e0>)
   1af42:	6878      	ldr	r0, [r7, #4]
   1af44:	f7e6 fcbe 	bl	18c4 <mp_print_str>

            return (size_t)(-1); // indicate many matches
   1af48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
   1af4c:	4618      	mov	r0, r3
   1af4e:	3770      	adds	r7, #112	; 0x70
   1af50:	46bd      	mov	sp, r7
   1af52:	bd80      	pop	{r7, pc}
   1af54:	200012f0 	.word	0x200012f0
   1af58:	00021298 	.word	0x00021298
   1af5c:	000248e0 	.word	0x000248e0
   1af60:	000248d4 	.word	0x000248d4
   1af64:	000248d8 	.word	0x000248d8
   1af68:	000248dc 	.word	0x000248dc

0001af6c <mp_small_int_mul_overflow>:
 * THE SOFTWARE.
 */

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
   1af6c:	b480      	push	{r7}
   1af6e:	b083      	sub	sp, #12
   1af70:	af00      	add	r7, sp, #0
   1af72:	6078      	str	r0, [r7, #4]
   1af74:	6039      	str	r1, [r7, #0]
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   1af76:	687b      	ldr	r3, [r7, #4]
   1af78:	2b00      	cmp	r3, #0
   1af7a:	dd16      	ble.n	1afaa <mp_small_int_mul_overflow+0x3e>
        if (y > 0) { // x and y are positive
   1af7c:	683b      	ldr	r3, [r7, #0]
   1af7e:	2b00      	cmp	r3, #0
   1af80:	dd09      	ble.n	1af96 <mp_small_int_mul_overflow+0x2a>
            if (x > (MP_SMALL_INT_MAX / y)) {
   1af82:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1af86:	683b      	ldr	r3, [r7, #0]
   1af88:	fb92 f2f3 	sdiv	r2, r2, r3
   1af8c:	687b      	ldr	r3, [r7, #4]
   1af8e:	429a      	cmp	r2, r3
   1af90:	da25      	bge.n	1afde <mp_small_int_mul_overflow+0x72>
                return true;
   1af92:	2301      	movs	r3, #1
   1af94:	e024      	b.n	1afe0 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x positive, y nonpositive
            if (y < (MP_SMALL_INT_MIN / x)) {
   1af96:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1af9a:	687b      	ldr	r3, [r7, #4]
   1af9c:	fb92 f2f3 	sdiv	r2, r2, r3
   1afa0:	683b      	ldr	r3, [r7, #0]
   1afa2:	429a      	cmp	r2, r3
   1afa4:	dd1b      	ble.n	1afde <mp_small_int_mul_overflow+0x72>
                return true;
   1afa6:	2301      	movs	r3, #1
   1afa8:	e01a      	b.n	1afe0 <mp_small_int_mul_overflow+0x74>
            }
        } // x positive, y nonpositive
    } else { // x is nonpositive
        if (y > 0) { // x is nonpositive, y is positive
   1afaa:	683b      	ldr	r3, [r7, #0]
   1afac:	2b00      	cmp	r3, #0
   1afae:	dd09      	ble.n	1afc4 <mp_small_int_mul_overflow+0x58>
            if (x < (MP_SMALL_INT_MIN / y)) {
   1afb0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1afb4:	683b      	ldr	r3, [r7, #0]
   1afb6:	fb92 f2f3 	sdiv	r2, r2, r3
   1afba:	687b      	ldr	r3, [r7, #4]
   1afbc:	429a      	cmp	r2, r3
   1afbe:	dd0e      	ble.n	1afde <mp_small_int_mul_overflow+0x72>
                return true;
   1afc0:	2301      	movs	r3, #1
   1afc2:	e00d      	b.n	1afe0 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x and y are nonpositive
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   1afc4:	687b      	ldr	r3, [r7, #4]
   1afc6:	2b00      	cmp	r3, #0
   1afc8:	d009      	beq.n	1afde <mp_small_int_mul_overflow+0x72>
   1afca:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1afce:	687b      	ldr	r3, [r7, #4]
   1afd0:	fb92 f2f3 	sdiv	r2, r2, r3
   1afd4:	683b      	ldr	r3, [r7, #0]
   1afd6:	429a      	cmp	r2, r3
   1afd8:	dd01      	ble.n	1afde <mp_small_int_mul_overflow+0x72>
                return true;
   1afda:	2301      	movs	r3, #1
   1afdc:	e000      	b.n	1afe0 <mp_small_int_mul_overflow+0x74>
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   1afde:	2300      	movs	r3, #0
}
   1afe0:	4618      	mov	r0, r3
   1afe2:	370c      	adds	r7, #12
   1afe4:	46bd      	mov	sp, r7
   1afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1afea:	4770      	bx	lr

0001afec <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
   1afec:	b480      	push	{r7}
   1afee:	b083      	sub	sp, #12
   1aff0:	af00      	add	r7, sp, #0
   1aff2:	6078      	str	r0, [r7, #4]
   1aff4:	6039      	str	r1, [r7, #0]
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   1aff6:	687b      	ldr	r3, [r7, #4]
   1aff8:	683a      	ldr	r2, [r7, #0]
   1affa:	fb93 f2f2 	sdiv	r2, r3, r2
   1affe:	6839      	ldr	r1, [r7, #0]
   1b000:	fb01 f202 	mul.w	r2, r1, r2
   1b004:	1a9b      	subs	r3, r3, r2
   1b006:	607b      	str	r3, [r7, #4]
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1b008:	687b      	ldr	r3, [r7, #4]
   1b00a:	2b00      	cmp	r3, #0
   1b00c:	da02      	bge.n	1b014 <mp_small_int_modulo+0x28>
   1b00e:	683b      	ldr	r3, [r7, #0]
   1b010:	2b00      	cmp	r3, #0
   1b012:	dc05      	bgt.n	1b020 <mp_small_int_modulo+0x34>
   1b014:	687b      	ldr	r3, [r7, #4]
   1b016:	2b00      	cmp	r3, #0
   1b018:	dd06      	ble.n	1b028 <mp_small_int_modulo+0x3c>
   1b01a:	683b      	ldr	r3, [r7, #0]
   1b01c:	2b00      	cmp	r3, #0
   1b01e:	da03      	bge.n	1b028 <mp_small_int_modulo+0x3c>
        dividend += divisor;
   1b020:	687a      	ldr	r2, [r7, #4]
   1b022:	683b      	ldr	r3, [r7, #0]
   1b024:	4413      	add	r3, r2
   1b026:	607b      	str	r3, [r7, #4]
    }
    return dividend;
   1b028:	687b      	ldr	r3, [r7, #4]
}
   1b02a:	4618      	mov	r0, r3
   1b02c:	370c      	adds	r7, #12
   1b02e:	46bd      	mov	sp, r7
   1b030:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b034:	4770      	bx	lr

0001b036 <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
   1b036:	b480      	push	{r7}
   1b038:	b083      	sub	sp, #12
   1b03a:	af00      	add	r7, sp, #0
   1b03c:	6078      	str	r0, [r7, #4]
   1b03e:	6039      	str	r1, [r7, #0]
    if (num >= 0) {
   1b040:	687b      	ldr	r3, [r7, #4]
   1b042:	2b00      	cmp	r3, #0
   1b044:	db08      	blt.n	1b058 <mp_small_int_floor_divide+0x22>
        if (denom < 0) {
   1b046:	683b      	ldr	r3, [r7, #0]
   1b048:	2b00      	cmp	r3, #0
   1b04a:	da0e      	bge.n	1b06a <mp_small_int_floor_divide+0x34>
            num += -denom - 1;
   1b04c:	683b      	ldr	r3, [r7, #0]
   1b04e:	43db      	mvns	r3, r3
   1b050:	687a      	ldr	r2, [r7, #4]
   1b052:	4413      	add	r3, r2
   1b054:	607b      	str	r3, [r7, #4]
   1b056:	e008      	b.n	1b06a <mp_small_int_floor_divide+0x34>
        }
    } else {
        if (denom >= 0) {
   1b058:	683b      	ldr	r3, [r7, #0]
   1b05a:	2b00      	cmp	r3, #0
   1b05c:	db05      	blt.n	1b06a <mp_small_int_floor_divide+0x34>
            num += -denom + 1;
   1b05e:	683b      	ldr	r3, [r7, #0]
   1b060:	f1c3 0301 	rsb	r3, r3, #1
   1b064:	687a      	ldr	r2, [r7, #4]
   1b066:	4413      	add	r3, r2
   1b068:	607b      	str	r3, [r7, #4]
        }
    }
    return num / denom;
   1b06a:	687a      	ldr	r2, [r7, #4]
   1b06c:	683b      	ldr	r3, [r7, #0]
   1b06e:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1b072:	4618      	mov	r0, r3
   1b074:	370c      	adds	r7, #12
   1b076:	46bd      	mov	sp, r7
   1b078:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b07c:	4770      	bx	lr
	...

0001b080 <mp_find_frozen_mpy>:
#include "py/emitglue.h"

extern const char mp_frozen_mpy_names[];
extern const mp_raw_code_t *const mp_frozen_mpy_content[];

STATIC const mp_raw_code_t *mp_find_frozen_mpy(const char *str, size_t len) {
   1b080:	b580      	push	{r7, lr}
   1b082:	b086      	sub	sp, #24
   1b084:	af00      	add	r7, sp, #0
   1b086:	6078      	str	r0, [r7, #4]
   1b088:	6039      	str	r1, [r7, #0]
    const char *name = mp_frozen_mpy_names;
   1b08a:	4b15      	ldr	r3, [pc, #84]	; (1b0e0 <mp_find_frozen_mpy+0x60>)
   1b08c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1b08e:	2300      	movs	r3, #0
   1b090:	613b      	str	r3, [r7, #16]
   1b092:	e01c      	b.n	1b0ce <mp_find_frozen_mpy+0x4e>
        size_t l = strlen(name);
   1b094:	6978      	ldr	r0, [r7, #20]
   1b096:	f001 fe55 	bl	1cd44 <strlen>
   1b09a:	60f8      	str	r0, [r7, #12]
        if (l == len && !memcmp(str, name, l)) {
   1b09c:	68fa      	ldr	r2, [r7, #12]
   1b09e:	683b      	ldr	r3, [r7, #0]
   1b0a0:	429a      	cmp	r2, r3
   1b0a2:	d10c      	bne.n	1b0be <mp_find_frozen_mpy+0x3e>
   1b0a4:	68fa      	ldr	r2, [r7, #12]
   1b0a6:	6979      	ldr	r1, [r7, #20]
   1b0a8:	6878      	ldr	r0, [r7, #4]
   1b0aa:	f001 fdfa 	bl	1cca2 <memcmp>
   1b0ae:	4603      	mov	r3, r0
   1b0b0:	2b00      	cmp	r3, #0
   1b0b2:	d104      	bne.n	1b0be <mp_find_frozen_mpy+0x3e>
            return mp_frozen_mpy_content[i];
   1b0b4:	4a0b      	ldr	r2, [pc, #44]	; (1b0e4 <mp_find_frozen_mpy+0x64>)
   1b0b6:	693b      	ldr	r3, [r7, #16]
   1b0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b0bc:	e00c      	b.n	1b0d8 <mp_find_frozen_mpy+0x58>
        }
        name += l + 1;
   1b0be:	68fb      	ldr	r3, [r7, #12]
   1b0c0:	3301      	adds	r3, #1
   1b0c2:	697a      	ldr	r2, [r7, #20]
   1b0c4:	4413      	add	r3, r2
   1b0c6:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1b0c8:	693b      	ldr	r3, [r7, #16]
   1b0ca:	3301      	adds	r3, #1
   1b0cc:	613b      	str	r3, [r7, #16]
   1b0ce:	697b      	ldr	r3, [r7, #20]
   1b0d0:	781b      	ldrb	r3, [r3, #0]
   1b0d2:	2b00      	cmp	r3, #0
   1b0d4:	d1de      	bne.n	1b094 <mp_find_frozen_mpy+0x14>
    }
    return NULL;
   1b0d6:	2300      	movs	r3, #0
}
   1b0d8:	4618      	mov	r0, r3
   1b0da:	3718      	adds	r7, #24
   1b0dc:	46bd      	mov	sp, r7
   1b0de:	bd80      	pop	{r7, pc}
   1b0e0:	00025a4c 	.word	0x00025a4c
   1b0e4:	00025a5c 	.word	0x00025a5c

0001b0e8 <mp_frozen_stat_helper>:

#endif

#if MICROPY_MODULE_FROZEN

STATIC mp_import_stat_t mp_frozen_stat_helper(const char *name, const char *str) {
   1b0e8:	b580      	push	{r7, lr}
   1b0ea:	b086      	sub	sp, #24
   1b0ec:	af00      	add	r7, sp, #0
   1b0ee:	6078      	str	r0, [r7, #4]
   1b0f0:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
   1b0f2:	6838      	ldr	r0, [r7, #0]
   1b0f4:	f001 fe26 	bl	1cd44 <strlen>
   1b0f8:	6138      	str	r0, [r7, #16]

    for (int i = 0; *name != 0; i++) {
   1b0fa:	2300      	movs	r3, #0
   1b0fc:	617b      	str	r3, [r7, #20]
   1b0fe:	e027      	b.n	1b150 <mp_frozen_stat_helper+0x68>
        size_t l = strlen(name);
   1b100:	6878      	ldr	r0, [r7, #4]
   1b102:	f001 fe1f 	bl	1cd44 <strlen>
   1b106:	60f8      	str	r0, [r7, #12]
        if (l >= len && !memcmp(str, name, len)) {
   1b108:	68fa      	ldr	r2, [r7, #12]
   1b10a:	693b      	ldr	r3, [r7, #16]
   1b10c:	429a      	cmp	r2, r3
   1b10e:	d317      	bcc.n	1b140 <mp_frozen_stat_helper+0x58>
   1b110:	693a      	ldr	r2, [r7, #16]
   1b112:	6879      	ldr	r1, [r7, #4]
   1b114:	6838      	ldr	r0, [r7, #0]
   1b116:	f001 fdc4 	bl	1cca2 <memcmp>
   1b11a:	4603      	mov	r3, r0
   1b11c:	2b00      	cmp	r3, #0
   1b11e:	d10f      	bne.n	1b140 <mp_frozen_stat_helper+0x58>
            if (name[len] == 0) {
   1b120:	687a      	ldr	r2, [r7, #4]
   1b122:	693b      	ldr	r3, [r7, #16]
   1b124:	4413      	add	r3, r2
   1b126:	781b      	ldrb	r3, [r3, #0]
   1b128:	2b00      	cmp	r3, #0
   1b12a:	d101      	bne.n	1b130 <mp_frozen_stat_helper+0x48>
                return MP_IMPORT_STAT_FILE;
   1b12c:	2302      	movs	r3, #2
   1b12e:	e014      	b.n	1b15a <mp_frozen_stat_helper+0x72>
            } else if (name[len] == '/') {
   1b130:	687a      	ldr	r2, [r7, #4]
   1b132:	693b      	ldr	r3, [r7, #16]
   1b134:	4413      	add	r3, r2
   1b136:	781b      	ldrb	r3, [r3, #0]
   1b138:	2b2f      	cmp	r3, #47	; 0x2f
   1b13a:	d101      	bne.n	1b140 <mp_frozen_stat_helper+0x58>
                return MP_IMPORT_STAT_DIR;
   1b13c:	2301      	movs	r3, #1
   1b13e:	e00c      	b.n	1b15a <mp_frozen_stat_helper+0x72>
            }
        }
        name += l + 1;
   1b140:	68fb      	ldr	r3, [r7, #12]
   1b142:	3301      	adds	r3, #1
   1b144:	687a      	ldr	r2, [r7, #4]
   1b146:	4413      	add	r3, r2
   1b148:	607b      	str	r3, [r7, #4]
    for (int i = 0; *name != 0; i++) {
   1b14a:	697b      	ldr	r3, [r7, #20]
   1b14c:	3301      	adds	r3, #1
   1b14e:	617b      	str	r3, [r7, #20]
   1b150:	687b      	ldr	r3, [r7, #4]
   1b152:	781b      	ldrb	r3, [r3, #0]
   1b154:	2b00      	cmp	r3, #0
   1b156:	d1d3      	bne.n	1b100 <mp_frozen_stat_helper+0x18>
    }
    return MP_IMPORT_STAT_NO_EXIST;
   1b158:	2300      	movs	r3, #0
}
   1b15a:	4618      	mov	r0, r3
   1b15c:	3718      	adds	r7, #24
   1b15e:	46bd      	mov	sp, r7
   1b160:	bd80      	pop	{r7, pc}

0001b162 <mp_frozen_stat>:

mp_import_stat_t mp_frozen_stat(const char *str) {
   1b162:	b580      	push	{r7, lr}
   1b164:	b084      	sub	sp, #16
   1b166:	af00      	add	r7, sp, #0
   1b168:	6078      	str	r0, [r7, #4]
        return stat;
    }
    #endif

    #if MICROPY_MODULE_FROZEN_MPY
    stat = mp_frozen_stat_helper(mp_frozen_mpy_names, str);
   1b16a:	6879      	ldr	r1, [r7, #4]
   1b16c:	4806      	ldr	r0, [pc, #24]	; (1b188 <mp_frozen_stat+0x26>)
   1b16e:	f7ff ffbb 	bl	1b0e8 <mp_frozen_stat_helper>
   1b172:	60f8      	str	r0, [r7, #12]
    if (stat != MP_IMPORT_STAT_NO_EXIST) {
   1b174:	68fb      	ldr	r3, [r7, #12]
   1b176:	2b00      	cmp	r3, #0
   1b178:	d001      	beq.n	1b17e <mp_frozen_stat+0x1c>
        return stat;
   1b17a:	68fb      	ldr	r3, [r7, #12]
   1b17c:	e000      	b.n	1b180 <mp_frozen_stat+0x1e>
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   1b17e:	2300      	movs	r3, #0
}
   1b180:	4618      	mov	r0, r3
   1b182:	3710      	adds	r7, #16
   1b184:	46bd      	mov	sp, r7
   1b186:	bd80      	pop	{r7, pc}
   1b188:	00025a4c 	.word	0x00025a4c

0001b18c <mp_find_frozen_module>:

int mp_find_frozen_module(const char *str, size_t len, void **data) {
   1b18c:	b580      	push	{r7, lr}
   1b18e:	b086      	sub	sp, #24
   1b190:	af00      	add	r7, sp, #0
   1b192:	60f8      	str	r0, [r7, #12]
   1b194:	60b9      	str	r1, [r7, #8]
   1b196:	607a      	str	r2, [r7, #4]
        *data = lex;
        return MP_FROZEN_STR;
    }
    #endif
    #if MICROPY_MODULE_FROZEN_MPY
    const mp_raw_code_t *rc = mp_find_frozen_mpy(str, len);
   1b198:	68b9      	ldr	r1, [r7, #8]
   1b19a:	68f8      	ldr	r0, [r7, #12]
   1b19c:	f7ff ff70 	bl	1b080 <mp_find_frozen_mpy>
   1b1a0:	6178      	str	r0, [r7, #20]
    if (rc != NULL) {
   1b1a2:	697b      	ldr	r3, [r7, #20]
   1b1a4:	2b00      	cmp	r3, #0
   1b1a6:	d004      	beq.n	1b1b2 <mp_find_frozen_module+0x26>
        *data = (void*)rc;
   1b1a8:	687b      	ldr	r3, [r7, #4]
   1b1aa:	697a      	ldr	r2, [r7, #20]
   1b1ac:	601a      	str	r2, [r3, #0]
        return MP_FROZEN_MPY;
   1b1ae:	2302      	movs	r3, #2
   1b1b0:	e000      	b.n	1b1b4 <mp_find_frozen_module+0x28>
    }
    #endif
    return MP_FROZEN_NONE;
   1b1b2:	2300      	movs	r3, #0
}
   1b1b4:	4618      	mov	r0, r3
   1b1b6:	3718      	adds	r7, #24
   1b1b8:	46bd      	mov	sp, r7
   1b1ba:	bd80      	pop	{r7, pc}

0001b1bc <printf>:
int putchar(int c);
int puts(const char *s);
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap);
int snprintf(char *str, size_t size, const char *fmt, ...);

int printf(const char *fmt, ...) {
   1b1bc:	b40f      	push	{r0, r1, r2, r3}
   1b1be:	b580      	push	{r7, lr}
   1b1c0:	b082      	sub	sp, #8
   1b1c2:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1b1c4:	f107 0314 	add.w	r3, r7, #20
   1b1c8:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   1b1ca:	683a      	ldr	r2, [r7, #0]
   1b1cc:	6939      	ldr	r1, [r7, #16]
   1b1ce:	4806      	ldr	r0, [pc, #24]	; (1b1e8 <printf+0x2c>)
   1b1d0:	f7e6 fea0 	bl	1f14 <mp_vprintf>
   1b1d4:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1b1d6:	687b      	ldr	r3, [r7, #4]
}
   1b1d8:	4618      	mov	r0, r3
   1b1da:	3708      	adds	r7, #8
   1b1dc:	46bd      	mov	sp, r7
   1b1de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b1e2:	b004      	add	sp, #16
   1b1e4:	4770      	bx	lr
   1b1e6:	bf00      	nop
   1b1e8:	0001f4ac 	.word	0x0001f4ac

0001b1ec <vprintf>:

int vprintf(const char *fmt, va_list ap) {
   1b1ec:	b580      	push	{r7, lr}
   1b1ee:	b082      	sub	sp, #8
   1b1f0:	af00      	add	r7, sp, #0
   1b1f2:	6078      	str	r0, [r7, #4]
   1b1f4:	6039      	str	r1, [r7, #0]
    return mp_vprintf(&mp_plat_print, fmt, ap);
   1b1f6:	683a      	ldr	r2, [r7, #0]
   1b1f8:	6879      	ldr	r1, [r7, #4]
   1b1fa:	4804      	ldr	r0, [pc, #16]	; (1b20c <vprintf+0x20>)
   1b1fc:	f7e6 fe8a 	bl	1f14 <mp_vprintf>
   1b200:	4603      	mov	r3, r0
}
   1b202:	4618      	mov	r0, r3
   1b204:	3708      	adds	r7, #8
   1b206:	46bd      	mov	sp, r7
   1b208:	bd80      	pop	{r7, pc}
   1b20a:	bf00      	nop
   1b20c:	0001f4ac 	.word	0x0001f4ac

0001b210 <putchar>:

// need this because gcc optimises printf("%c", c) -> putchar(c), and printf("a") -> putchar('a')
int putchar(int c) {
   1b210:	b580      	push	{r7, lr}
   1b212:	b084      	sub	sp, #16
   1b214:	af00      	add	r7, sp, #0
   1b216:	6078      	str	r0, [r7, #4]
    char chr = c;
   1b218:	687b      	ldr	r3, [r7, #4]
   1b21a:	b2db      	uxtb	r3, r3
   1b21c:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b21e:	f107 030f 	add.w	r3, r7, #15
   1b222:	2101      	movs	r1, #1
   1b224:	4618      	mov	r0, r3
   1b226:	f001 f9a9 	bl	1c57c <mp_hal_stdout_tx_strn_cooked>
    return chr;
   1b22a:	7bfb      	ldrb	r3, [r7, #15]
}
   1b22c:	4618      	mov	r0, r3
   1b22e:	3710      	adds	r7, #16
   1b230:	46bd      	mov	sp, r7
   1b232:	bd80      	pop	{r7, pc}

0001b234 <puts>:

// need this because gcc optimises printf("string\n") -> puts("string")
int puts(const char *s) {
   1b234:	b580      	push	{r7, lr}
   1b236:	b084      	sub	sp, #16
   1b238:	af00      	add	r7, sp, #0
   1b23a:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   1b23c:	6878      	ldr	r0, [r7, #4]
   1b23e:	f001 fd81 	bl	1cd44 <strlen>
   1b242:	4603      	mov	r3, r0
   1b244:	4619      	mov	r1, r3
   1b246:	6878      	ldr	r0, [r7, #4]
   1b248:	f001 f998 	bl	1c57c <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1b24c:	230a      	movs	r3, #10
   1b24e:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b250:	f107 030f 	add.w	r3, r7, #15
   1b254:	2101      	movs	r1, #1
   1b256:	4618      	mov	r0, r3
   1b258:	f001 f990 	bl	1c57c <mp_hal_stdout_tx_strn_cooked>
    return 1;
   1b25c:	2301      	movs	r3, #1
}
   1b25e:	4618      	mov	r0, r3
   1b260:	3710      	adds	r7, #16
   1b262:	46bd      	mov	sp, r7
   1b264:	bd80      	pop	{r7, pc}

0001b266 <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   1b266:	b580      	push	{r7, lr}
   1b268:	b086      	sub	sp, #24
   1b26a:	af00      	add	r7, sp, #0
   1b26c:	60f8      	str	r0, [r7, #12]
   1b26e:	60b9      	str	r1, [r7, #8]
   1b270:	607a      	str	r2, [r7, #4]
    strn_print_env_t *strn_print_env = data;
   1b272:	68fb      	ldr	r3, [r7, #12]
   1b274:	617b      	str	r3, [r7, #20]
    if (len > strn_print_env->remain) {
   1b276:	697b      	ldr	r3, [r7, #20]
   1b278:	685a      	ldr	r2, [r3, #4]
   1b27a:	687b      	ldr	r3, [r7, #4]
   1b27c:	429a      	cmp	r2, r3
   1b27e:	d202      	bcs.n	1b286 <strn_print_strn+0x20>
        len = strn_print_env->remain;
   1b280:	697b      	ldr	r3, [r7, #20]
   1b282:	685b      	ldr	r3, [r3, #4]
   1b284:	607b      	str	r3, [r7, #4]
    }
    memcpy(strn_print_env->cur, str, len);
   1b286:	697b      	ldr	r3, [r7, #20]
   1b288:	681b      	ldr	r3, [r3, #0]
   1b28a:	687a      	ldr	r2, [r7, #4]
   1b28c:	68b9      	ldr	r1, [r7, #8]
   1b28e:	4618      	mov	r0, r3
   1b290:	f001 fc22 	bl	1cad8 <memcpy>
    strn_print_env->cur += len;
   1b294:	697b      	ldr	r3, [r7, #20]
   1b296:	681a      	ldr	r2, [r3, #0]
   1b298:	687b      	ldr	r3, [r7, #4]
   1b29a:	441a      	add	r2, r3
   1b29c:	697b      	ldr	r3, [r7, #20]
   1b29e:	601a      	str	r2, [r3, #0]
    strn_print_env->remain -= len;
   1b2a0:	697b      	ldr	r3, [r7, #20]
   1b2a2:	685a      	ldr	r2, [r3, #4]
   1b2a4:	687b      	ldr	r3, [r7, #4]
   1b2a6:	1ad2      	subs	r2, r2, r3
   1b2a8:	697b      	ldr	r3, [r7, #20]
   1b2aa:	605a      	str	r2, [r3, #4]
}
   1b2ac:	bf00      	nop
   1b2ae:	3718      	adds	r7, #24
   1b2b0:	46bd      	mov	sp, r7
   1b2b2:	bd80      	pop	{r7, pc}

0001b2b4 <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   1b2b4:	b580      	push	{r7, lr}
   1b2b6:	b08a      	sub	sp, #40	; 0x28
   1b2b8:	af00      	add	r7, sp, #0
   1b2ba:	60f8      	str	r0, [r7, #12]
   1b2bc:	60b9      	str	r1, [r7, #8]
   1b2be:	607a      	str	r2, [r7, #4]
   1b2c0:	603b      	str	r3, [r7, #0]
    strn_print_env_t strn_print_env = {str, size};
   1b2c2:	68fb      	ldr	r3, [r7, #12]
   1b2c4:	61fb      	str	r3, [r7, #28]
   1b2c6:	68bb      	ldr	r3, [r7, #8]
   1b2c8:	623b      	str	r3, [r7, #32]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1b2ca:	f107 031c 	add.w	r3, r7, #28
   1b2ce:	617b      	str	r3, [r7, #20]
   1b2d0:	4b0e      	ldr	r3, [pc, #56]	; (1b30c <vsnprintf+0x58>)
   1b2d2:	61bb      	str	r3, [r7, #24]
    int len = mp_vprintf(&print, fmt, ap);
   1b2d4:	f107 0314 	add.w	r3, r7, #20
   1b2d8:	683a      	ldr	r2, [r7, #0]
   1b2da:	6879      	ldr	r1, [r7, #4]
   1b2dc:	4618      	mov	r0, r3
   1b2de:	f7e6 fe19 	bl	1f14 <mp_vprintf>
   1b2e2:	6278      	str	r0, [r7, #36]	; 0x24
    // add terminating null byte
    if (size > 0) {
   1b2e4:	68bb      	ldr	r3, [r7, #8]
   1b2e6:	2b00      	cmp	r3, #0
   1b2e8:	d00a      	beq.n	1b300 <vsnprintf+0x4c>
        if (strn_print_env.remain == 0) {
   1b2ea:	6a3b      	ldr	r3, [r7, #32]
   1b2ec:	2b00      	cmp	r3, #0
   1b2ee:	d104      	bne.n	1b2fa <vsnprintf+0x46>
            strn_print_env.cur[-1] = 0;
   1b2f0:	69fb      	ldr	r3, [r7, #28]
   1b2f2:	3b01      	subs	r3, #1
   1b2f4:	2200      	movs	r2, #0
   1b2f6:	701a      	strb	r2, [r3, #0]
   1b2f8:	e002      	b.n	1b300 <vsnprintf+0x4c>
        } else {
            strn_print_env.cur[0] = 0;
   1b2fa:	69fb      	ldr	r3, [r7, #28]
   1b2fc:	2200      	movs	r2, #0
   1b2fe:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
   1b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b302:	4618      	mov	r0, r3
   1b304:	3728      	adds	r7, #40	; 0x28
   1b306:	46bd      	mov	sp, r7
   1b308:	bd80      	pop	{r7, pc}
   1b30a:	bf00      	nop
   1b30c:	0001b267 	.word	0x0001b267

0001b310 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1b310:	b40c      	push	{r2, r3}
   1b312:	b580      	push	{r7, lr}
   1b314:	b084      	sub	sp, #16
   1b316:	af00      	add	r7, sp, #0
   1b318:	6078      	str	r0, [r7, #4]
   1b31a:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start(ap, fmt);
   1b31c:	f107 031c 	add.w	r3, r7, #28
   1b320:	60bb      	str	r3, [r7, #8]
    int ret = vsnprintf(str, size, fmt, ap);
   1b322:	68bb      	ldr	r3, [r7, #8]
   1b324:	69ba      	ldr	r2, [r7, #24]
   1b326:	6839      	ldr	r1, [r7, #0]
   1b328:	6878      	ldr	r0, [r7, #4]
   1b32a:	f7ff ffc3 	bl	1b2b4 <vsnprintf>
   1b32e:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
   1b330:	68fb      	ldr	r3, [r7, #12]
}
   1b332:	4618      	mov	r0, r3
   1b334:	3710      	adds	r7, #16
   1b336:	46bd      	mov	sp, r7
   1b338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b33c:	b002      	add	sp, #8
   1b33e:	4770      	bx	lr

0001b340 <do_str>:
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"

#if MICROPY_ENABLE_COMPILER
void do_str(const char *src, mp_parse_input_kind_t input_kind) {
   1b340:	b580      	push	{r7, lr}
   1b342:	b094      	sub	sp, #80	; 0x50
   1b344:	af00      	add	r7, sp, #0
   1b346:	6078      	str	r0, [r7, #4]
   1b348:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b34a:	f107 0314 	add.w	r3, r7, #20
   1b34e:	4618      	mov	r0, r3
   1b350:	f7e4 ffb4 	bl	2bc <nlr_push>
   1b354:	4603      	mov	r3, r0
   1b356:	2b00      	cmp	r3, #0
   1b358:	d121      	bne.n	1b39e <do_str+0x5e>
        mp_lexer_t *lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, src, strlen(src), 0);
   1b35a:	6878      	ldr	r0, [r7, #4]
   1b35c:	f001 fcf2 	bl	1cd44 <strlen>
   1b360:	4602      	mov	r2, r0
   1b362:	2300      	movs	r3, #0
   1b364:	6879      	ldr	r1, [r7, #4]
   1b366:	2037      	movs	r0, #55	; 0x37
   1b368:	f7e8 f9ff 	bl	376a <mp_lexer_new_from_str_len>
   1b36c:	64f8      	str	r0, [r7, #76]	; 0x4c
        qstr source_name = lex->source_name;
   1b36e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b370:	681b      	ldr	r3, [r3, #0]
   1b372:	64bb      	str	r3, [r7, #72]	; 0x48
        mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b374:	f107 030c 	add.w	r3, r7, #12
   1b378:	683a      	ldr	r2, [r7, #0]
   1b37a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1b37c:	4618      	mov	r0, r3
   1b37e:	f7e8 ffed 	bl	435c <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, true);
   1b382:	f107 000c 	add.w	r0, r7, #12
   1b386:	2301      	movs	r3, #1
   1b388:	2200      	movs	r2, #0
   1b38a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b38c:	f7ee f9cd 	bl	972a <mp_compile>
   1b390:	6478      	str	r0, [r7, #68]	; 0x44
        mp_call_function_0(module_fun);
   1b392:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1b394:	f7f0 fc86 	bl	bca4 <mp_call_function_0>
        nlr_pop();
   1b398:	f7e4 ff7e 	bl	298 <nlr_pop>
    } else {
        // uncaught exception
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
    }
}
   1b39c:	e004      	b.n	1b3a8 <do_str+0x68>
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1b39e:	69bb      	ldr	r3, [r7, #24]
   1b3a0:	4619      	mov	r1, r3
   1b3a2:	4803      	ldr	r0, [pc, #12]	; (1b3b0 <do_str+0x70>)
   1b3a4:	f7f2 f9f0 	bl	d788 <mp_obj_print_exception>
}
   1b3a8:	bf00      	nop
   1b3aa:	3750      	adds	r7, #80	; 0x50
   1b3ac:	46bd      	mov	sp, r7
   1b3ae:	bd80      	pop	{r7, pc}
   1b3b0:	0001f4ac 	.word	0x0001f4ac

0001b3b4 <main>:
static char *stack_top;
#if MICROPY_ENABLE_GC
static char heap[2048];
#endif

int main(int argc, char **argv) {
   1b3b4:	b580      	push	{r7, lr}
   1b3b6:	b084      	sub	sp, #16
   1b3b8:	af00      	add	r7, sp, #0
   1b3ba:	6078      	str	r0, [r7, #4]
   1b3bc:	6039      	str	r1, [r7, #0]
    int stack_dummy;
    stack_top = (char*)&stack_dummy;
   1b3be:	4a0a      	ldr	r2, [pc, #40]	; (1b3e8 <main+0x34>)
   1b3c0:	f107 030c 	add.w	r3, r7, #12
   1b3c4:	6013      	str	r3, [r2, #0]

    #if MICROPY_ENABLE_GC
    gc_init(heap, heap + sizeof(heap));
   1b3c6:	4b09      	ldr	r3, [pc, #36]	; (1b3ec <main+0x38>)
   1b3c8:	4619      	mov	r1, r3
   1b3ca:	4809      	ldr	r0, [pc, #36]	; (1b3f0 <main+0x3c>)
   1b3cc:	f7e5 f8ba 	bl	544 <gc_init>
    #endif
    mp_init();
   1b3d0:	f7f0 f83a 	bl	b448 <mp_init>
        if (pyexec_event_repl_process_char(c)) {
            break;
        }
    }
    #else
    pyexec_friendly_repl();
   1b3d4:	f001 fa5c 	bl	1c890 <pyexec_friendly_repl>
    //do_str("print('hello world!', list(x+1 for x in range(10)), end='eol\\n')", MP_PARSE_SINGLE_INPUT);
    //do_str("for i in range(10):\r\n  print(i)", MP_PARSE_FILE_INPUT);
    #else
    pyexec_frozen_module("frozentest.py");
    #endif
    mp_deinit();
   1b3d8:	f7f0 f85c 	bl	b494 <mp_deinit>
    return 0;
   1b3dc:	2300      	movs	r3, #0
}
   1b3de:	4618      	mov	r0, r3
   1b3e0:	3710      	adds	r7, #16
   1b3e2:	46bd      	mov	sp, r7
   1b3e4:	bd80      	pop	{r7, pc}
   1b3e6:	bf00      	nop
   1b3e8:	200008c0 	.word	0x200008c0
   1b3ec:	200010c4 	.word	0x200010c4
   1b3f0:	200008c4 	.word	0x200008c4

0001b3f4 <gc_collect>:

void gc_collect(void) {
   1b3f4:	b580      	push	{r7, lr}
   1b3f6:	b082      	sub	sp, #8
   1b3f8:	af00      	add	r7, sp, #0
    // WARNING: This gc_collect implementation doesn't try to get root
    // pointers from CPU registers, and thus may function incorrectly.
    void *dummy;
    gc_collect_start();
   1b3fa:	f7e5 f8eb 	bl	5d4 <gc_collect_start>
    gc_collect_root(&dummy, ((mp_uint_t)stack_top - (mp_uint_t)&dummy) / sizeof(mp_uint_t));
   1b3fe:	4b09      	ldr	r3, [pc, #36]	; (1b424 <gc_collect+0x30>)
   1b400:	681b      	ldr	r3, [r3, #0]
   1b402:	461a      	mov	r2, r3
   1b404:	1d3b      	adds	r3, r7, #4
   1b406:	1ad3      	subs	r3, r2, r3
   1b408:	089a      	lsrs	r2, r3, #2
   1b40a:	1d3b      	adds	r3, r7, #4
   1b40c:	4611      	mov	r1, r2
   1b40e:	4618      	mov	r0, r3
   1b410:	f7e5 f91e 	bl	650 <gc_collect_root>
    gc_collect_end();
   1b414:	f7e5 f956 	bl	6c4 <gc_collect_end>
    gc_dump_info();
   1b418:	f7e5 fc4a 	bl	cb0 <gc_dump_info>
}
   1b41c:	bf00      	nop
   1b41e:	3708      	adds	r7, #8
   1b420:	46bd      	mov	sp, r7
   1b422:	bd80      	pop	{r7, pc}
   1b424:	200008c0 	.word	0x200008c0

0001b428 <mp_lexer_new_from_file>:

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
   1b428:	b580      	push	{r7, lr}
   1b42a:	b082      	sub	sp, #8
   1b42c:	af00      	add	r7, sp, #0
   1b42e:	6078      	str	r0, [r7, #4]
    mp_raise_OSError(MP_ENOENT);
   1b430:	2002      	movs	r0, #2
   1b432:	f7f1 fd23 	bl	ce7c <mp_raise_OSError>

0001b436 <mp_import_stat>:
}

mp_import_stat_t mp_import_stat(const char *path) { // @suppress("Type cannot be resolved")
   1b436:	b480      	push	{r7}
   1b438:	b083      	sub	sp, #12
   1b43a:	af00      	add	r7, sp, #0
   1b43c:	6078      	str	r0, [r7, #4]
    return MP_IMPORT_STAT_NO_EXIST;
   1b43e:	2300      	movs	r3, #0
}
   1b440:	4618      	mov	r0, r3
   1b442:	370c      	adds	r7, #12
   1b444:	46bd      	mov	sp, r7
   1b446:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b44a:	4770      	bx	lr

0001b44c <mp_builtin_open>:

mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1b44c:	b480      	push	{r7}
   1b44e:	b085      	sub	sp, #20
   1b450:	af00      	add	r7, sp, #0
   1b452:	60f8      	str	r0, [r7, #12]
   1b454:	60b9      	str	r1, [r7, #8]
   1b456:	607a      	str	r2, [r7, #4]
    return mp_const_none;
   1b458:	4b03      	ldr	r3, [pc, #12]	; (1b468 <mp_builtin_open+0x1c>)
}
   1b45a:	4618      	mov	r0, r3
   1b45c:	3714      	adds	r7, #20
   1b45e:	46bd      	mov	sp, r7
   1b460:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b464:	4770      	bx	lr
   1b466:	bf00      	nop
   1b468:	00023108 	.word	0x00023108

0001b46c <nlr_jump_fail>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_open_obj, 1, mp_builtin_open);

void nlr_jump_fail(void *val) {
   1b46c:	b480      	push	{r7}
   1b46e:	b083      	sub	sp, #12
   1b470:	af00      	add	r7, sp, #0
   1b472:	6078      	str	r0, [r7, #4]
    while (1);
   1b474:	e7fe      	b.n	1b474 <nlr_jump_fail+0x8>

0001b476 <__fatal_error>:
}

void NORETURN __fatal_error(const char *msg) {
   1b476:	b480      	push	{r7}
   1b478:	b083      	sub	sp, #12
   1b47a:	af00      	add	r7, sp, #0
   1b47c:	6078      	str	r0, [r7, #4]
    while (1);
   1b47e:	e7fe      	b.n	1b47e <__fatal_error+0x8>

0001b480 <__assert_func>:
}

#ifndef NDEBUG
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1b480:	b580      	push	{r7, lr}
   1b482:	b084      	sub	sp, #16
   1b484:	af00      	add	r7, sp, #0
   1b486:	60f8      	str	r0, [r7, #12]
   1b488:	60b9      	str	r1, [r7, #8]
   1b48a:	607a      	str	r2, [r7, #4]
   1b48c:	603b      	str	r3, [r7, #0]
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   1b48e:	68bb      	ldr	r3, [r7, #8]
   1b490:	68fa      	ldr	r2, [r7, #12]
   1b492:	6839      	ldr	r1, [r7, #0]
   1b494:	4802      	ldr	r0, [pc, #8]	; (1b4a0 <__assert_func+0x20>)
   1b496:	f7ff fe91 	bl	1b1bc <printf>
    __fatal_error("Assertion failed");
   1b49a:	4802      	ldr	r0, [pc, #8]	; (1b4a4 <__assert_func+0x24>)
   1b49c:	f7ff ffeb 	bl	1b476 <__fatal_error>
   1b4a0:	000248f4 	.word	0x000248f4
   1b4a4:	0002491c 	.word	0x0002491c

0001b4a8 <_start>:
//    0,
//    (uint32_t)&Default_Handler, // PendSV_Handler
//    (uint32_t)&Default_Handler, // SysTick_Handler
//};

void _start(void) {
   1b4a8:	b580      	push	{r7, lr}
   1b4aa:	af00      	add	r7, sp, #0
    // when we get here: stack is initialised, bss is clear, data is copied

    // SCB->CCR: enable 8-byte stack alignment for IRQ handlers, in accord with EABI
    *((volatile uint32_t*)0xe000ed14) |= 1 << 9;
   1b4ac:	4a06      	ldr	r2, [pc, #24]	; (1b4c8 <_start+0x20>)
   1b4ae:	4b06      	ldr	r3, [pc, #24]	; (1b4c8 <_start+0x20>)
   1b4b0:	681b      	ldr	r3, [r3, #0]
   1b4b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b4b6:	6013      	str	r3, [r2, #0]

    // initialise the cpu and peripherals
    #if MICROPY_MIN_USE_TM4C123_MCU
    void tm4c123_init(void);
    tm4c123_init();
   1b4b8:	f000 f808 	bl	1b4cc <tm4c123_init>
    #endif

    // now that we have a basic system up and running we can call main
    main(0, NULL);
   1b4bc:	2100      	movs	r1, #0
   1b4be:	2000      	movs	r0, #0
   1b4c0:	f7ff ff78 	bl	1b3b4 <main>

    // we must not return
    for (;;) {
   1b4c4:	e7fe      	b.n	1b4c4 <_start+0x1c>
   1b4c6:	bf00      	nop
   1b4c8:	e000ed14 	.word	0xe000ed14

0001b4cc <tm4c123_init>:

//#define SYSCTL ((periph_sysctl_t*)  0x400FE000)



void tm4c123_init(void) {
   1b4cc:	b580      	push	{r7, lr}
   1b4ce:	af00      	add	r7, sp, #0
    // basic MCU config

    // set system clock to 80MHz
    SYSCTL->RCC |= (uint32_t)0x00000800;   // set BYPASS bit
   1b4d0:	4a4d      	ldr	r2, [pc, #308]	; (1b608 <tm4c123_init+0x13c>)
   1b4d2:	4b4d      	ldr	r3, [pc, #308]	; (1b608 <tm4c123_init+0x13c>)
   1b4d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b4d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b4da:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC2 |= (uint32_t)0xC0000800;  // set BYPASS2 bit, DIV400 and USERCC2
   1b4dc:	4a4a      	ldr	r2, [pc, #296]	; (1b608 <tm4c123_init+0x13c>)
   1b4de:	4b4a      	ldr	r3, [pc, #296]	; (1b608 <tm4c123_init+0x13c>)
   1b4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b4e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1b4e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b4ea:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC &= (uint32_t)0xFFBFFFFF;   // clear USESYSDIV bit
   1b4ec:	4a46      	ldr	r2, [pc, #280]	; (1b608 <tm4c123_init+0x13c>)
   1b4ee:	4b46      	ldr	r3, [pc, #280]	; (1b608 <tm4c123_init+0x13c>)
   1b4f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b4f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1b4f6:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC = (SYSCTL->RCC & (uint32_t)0xFFFFF83F) | (uint32_t)0x00000B70;    // XTAL to 16 MHz
   1b4f8:	4a43      	ldr	r2, [pc, #268]	; (1b608 <tm4c123_init+0x13c>)
   1b4fa:	4b43      	ldr	r3, [pc, #268]	; (1b608 <tm4c123_init+0x13c>)
   1b4fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b4fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1b502:	f443 6337 	orr.w	r3, r3, #2928	; 0xb70
   1b506:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->MISC &= 0xFFFFFFBF;            // clear PLLLRIS bit
   1b508:	4a3f      	ldr	r2, [pc, #252]	; (1b608 <tm4c123_init+0x13c>)
   1b50a:	4b3f      	ldr	r3, [pc, #252]	; (1b608 <tm4c123_init+0x13c>)
   1b50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b50e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b512:	6593      	str	r3, [r2, #88]	; 0x58
    SYSCTL->RCC2 &= (uint32_t)0xFFFFDFFF;  // clear PWRDN2 Bit to enable PLL
   1b514:	4a3c      	ldr	r2, [pc, #240]	; (1b608 <tm4c123_init+0x13c>)
   1b516:	4b3c      	ldr	r3, [pc, #240]	; (1b608 <tm4c123_init+0x13c>)
   1b518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b51a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1b51e:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC2 = (SYSCTL->RCC2 & (uint32_t)0xE03FFFFF) | (uint32_t)0x01000000;  // Set SYSDIV2 to 0x2 for 80MHz
   1b520:	4a39      	ldr	r2, [pc, #228]	; (1b608 <tm4c123_init+0x13c>)
   1b522:	4b39      	ldr	r3, [pc, #228]	; (1b608 <tm4c123_init+0x13c>)
   1b524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b526:	f023 53fe 	bic.w	r3, r3, #532676608	; 0x1fc00000
   1b52a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1b52e:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC |= (uint32_t)0x00400000;   // set USESYSDIV bit
   1b530:	4a35      	ldr	r2, [pc, #212]	; (1b608 <tm4c123_init+0x13c>)
   1b532:	4b35      	ldr	r3, [pc, #212]	; (1b608 <tm4c123_init+0x13c>)
   1b534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b536:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1b53a:	6613      	str	r3, [r2, #96]	; 0x60
    while(!(SYSCTL->RIS & 0x00000040)){};  // wait for Pll to lock, PLLLRIS bit
   1b53c:	bf00      	nop
   1b53e:	4b32      	ldr	r3, [pc, #200]	; (1b608 <tm4c123_init+0x13c>)
   1b540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b542:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1b546:	2b00      	cmp	r3, #0
   1b548:	d0f9      	beq.n	1b53e <tm4c123_init+0x72>
    SYSCTL->RCC2 &= 0xFFFFF7FF;            // clear BYPASS2 bit, clears BYPASS as well
   1b54a:	4a2f      	ldr	r2, [pc, #188]	; (1b608 <tm4c123_init+0x13c>)
   1b54c:	4b2e      	ldr	r3, [pc, #184]	; (1b608 <tm4c123_init+0x13c>)
   1b54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b554:	6713      	str	r3, [r2, #112]	; 0x70
    // write final configuration
    SYSCTL->RCC = (uint32_t)(0x07C00550);  // 0b0000 0 1111 1 0 0 000 000 0 0 0 10101 01 000 0
   1b556:	4b2c      	ldr	r3, [pc, #176]	; (1b608 <tm4c123_init+0x13c>)
   1b558:	4a2c      	ldr	r2, [pc, #176]	; (1b60c <tm4c123_init+0x140>)
   1b55a:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 = (uint32_t)(0xC1000000); // 0b 1100 0001 0000 0000 0000 0000 0000 0000
   1b55c:	4b2a      	ldr	r3, [pc, #168]	; (1b608 <tm4c123_init+0x13c>)
   1b55e:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
   1b562:	671a      	str	r2, [r3, #112]	; 0x70

    // enable high performance GPIO BUS Ctl
    SYSCTL->GPIOHBCTL = 0x0000003F;
   1b564:	4b28      	ldr	r3, [pc, #160]	; (1b608 <tm4c123_init+0x13c>)
   1b566:	223f      	movs	r2, #63	; 0x3f
   1b568:	66da      	str	r2, [r3, #108]	; 0x6c

    // enable GPIO Port F
        SYSCTL->RCGCGPIO |= 0x00000020;
   1b56a:	4a27      	ldr	r2, [pc, #156]	; (1b608 <tm4c123_init+0x13c>)
   1b56c:	4b26      	ldr	r3, [pc, #152]	; (1b608 <tm4c123_init+0x13c>)
   1b56e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b572:	f043 0320 	orr.w	r3, r3, #32
   1b576:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    //*((volatile uint32_t*)0x400FE608) = 0x00000021;
    while( !(SYSCTL->PRGPIO & 0x00000020)){};
   1b57a:	bf00      	nop
   1b57c:	4b22      	ldr	r3, [pc, #136]	; (1b608 <tm4c123_init+0x13c>)
   1b57e:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b582:	f003 0320 	and.w	r3, r3, #32
   1b586:	2b00      	cmp	r3, #0
   1b588:	d0f8      	beq.n	1b57c <tm4c123_init+0xb0>
//    gpio_high(GPIOF, 3);
//    //*((volatile uint32_t*)0x4005D3FC) = 0x00000007;

    // enable UART0 at 9600 baud (TX=A1, RX=A0)
    // enable UART0
    SYSCTL->RCGCUART = 0x00000001;
   1b58a:	4b1f      	ldr	r3, [pc, #124]	; (1b608 <tm4c123_init+0x13c>)
   1b58c:	2201      	movs	r2, #1
   1b58e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    //*((volatile uint32_t*)0x400FE618) = 0x00000001;
    while(SYSCTL->PRUART != 0x00000001){};
   1b592:	bf00      	nop
   1b594:	4b1c      	ldr	r3, [pc, #112]	; (1b608 <tm4c123_init+0x13c>)
   1b596:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
   1b59a:	2b01      	cmp	r3, #1
   1b59c:	d1fa      	bne.n	1b594 <tm4c123_init+0xc8>
    //while( *((volatile uint32_t*)0x400FEA18) != 0x00000001){};

    // enable GPIO Port A
    SYSCTL->RCGCGPIO |= 0x00000001;
   1b59e:	4a1a      	ldr	r2, [pc, #104]	; (1b608 <tm4c123_init+0x13c>)
   1b5a0:	4b19      	ldr	r3, [pc, #100]	; (1b608 <tm4c123_init+0x13c>)
   1b5a2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b5a6:	f043 0301 	orr.w	r3, r3, #1
   1b5aa:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    while( !(SYSCTL->PRGPIO & 0x00000001)){};
   1b5ae:	bf00      	nop
   1b5b0:	4b15      	ldr	r3, [pc, #84]	; (1b608 <tm4c123_init+0x13c>)
   1b5b2:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b5b6:	f003 0301 	and.w	r3, r3, #1
   1b5ba:	2b00      	cmp	r3, #0
   1b5bc:	d0f8      	beq.n	1b5b0 <tm4c123_init+0xe4>

//    // GPIOA already configured for UART0 after reset
//    gpio_init(GPIOA, 0, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);
//    gpio_init(GPIOA, 1, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);

    MAP_GPIOPinTypeUART(GPIO_PORTA_AHB_BASE, GPIO_PIN_0 | GPIO_PIN_1);
   1b5be:	2103      	movs	r1, #3
   1b5c0:	4813      	ldr	r0, [pc, #76]	; (1b610 <tm4c123_init+0x144>)
   1b5c2:	f002 fa33 	bl	1da2c <GPIOPinTypeUART>

    // BRD = IBRD + FRAC = UARTSysClk / (ClkDiv * BaudRate)
    // 520.8333 = 104  + 0.166 = 80MHz      / (16     * 9600    )
    // FBRD = (0.833333 * 64 + 0.5) ~ 53
    UART0->CTL &= ~0x00000001;
   1b5c6:	4a13      	ldr	r2, [pc, #76]	; (1b614 <tm4c123_init+0x148>)
   1b5c8:	4b12      	ldr	r3, [pc, #72]	; (1b614 <tm4c123_init+0x148>)
   1b5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b5cc:	f023 0301 	bic.w	r3, r3, #1
   1b5d0:	6313      	str	r3, [r2, #48]	; 0x30
    UART0->IBRD = 0x00000208;
   1b5d2:	4b10      	ldr	r3, [pc, #64]	; (1b614 <tm4c123_init+0x148>)
   1b5d4:	f44f 7202 	mov.w	r2, #520	; 0x208
   1b5d8:	625a      	str	r2, [r3, #36]	; 0x24
    UART0->FBRD = 0x00000035;
   1b5da:	4b0e      	ldr	r3, [pc, #56]	; (1b614 <tm4c123_init+0x148>)
   1b5dc:	2235      	movs	r2, #53	; 0x35
   1b5de:	629a      	str	r2, [r3, #40]	; 0x28
    UART0->LCRH = 0x00000060; // no stick parity, word length 8bit, FIFO enable, one STOP bit, odd parity, no parity check, no break
   1b5e0:	4b0c      	ldr	r3, [pc, #48]	; (1b614 <tm4c123_init+0x148>)
   1b5e2:	2260      	movs	r2, #96	; 0x60
   1b5e4:	62da      	str	r2, [r3, #44]	; 0x2c
    UART0->CC = 0x00000000;   // use SysClock
   1b5e6:	4b0b      	ldr	r3, [pc, #44]	; (1b614 <tm4c123_init+0x148>)
   1b5e8:	2200      	movs	r2, #0
   1b5ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    UART0->CTL = 0x00000300; // disable cts & rts, RXE, TXE, no loopback, 16x oversampling, TXRIS on IFLS match, no smart card, no low power, no SIR, UART enabled
   1b5ee:	4b09      	ldr	r3, [pc, #36]	; (1b614 <tm4c123_init+0x148>)
   1b5f0:	f44f 7240 	mov.w	r2, #768	; 0x300
   1b5f4:	631a      	str	r2, [r3, #48]	; 0x30
    UART0->CTL |= 0x00000001;
   1b5f6:	4a07      	ldr	r2, [pc, #28]	; (1b614 <tm4c123_init+0x148>)
   1b5f8:	4b06      	ldr	r3, [pc, #24]	; (1b614 <tm4c123_init+0x148>)
   1b5fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b5fc:	f043 0301 	orr.w	r3, r3, #1
   1b600:	6313      	str	r3, [r2, #48]	; 0x30
    // to change settings in active mode: page 918 of reference
}
   1b602:	bf00      	nop
   1b604:	bd80      	pop	{r7, pc}
   1b606:	bf00      	nop
   1b608:	400fe000 	.word	0x400fe000
   1b60c:	07c00550 	.word	0x07c00550
   1b610:	40058000 	.word	0x40058000
   1b614:	4000c000 	.word	0x4000c000

0001b618 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
   1b618:	b580      	push	{r7, lr}
   1b61a:	b082      	sub	sp, #8
   1b61c:	af00      	add	r7, sp, #0
    uint32_t *pui32Src, *pui32Dest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_ldata;
   1b61e:	4b13      	ldr	r3, [pc, #76]	; (1b66c <zero_loop+0x24>)
   1b620:	607b      	str	r3, [r7, #4]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b622:	4b13      	ldr	r3, [pc, #76]	; (1b670 <zero_loop+0x28>)
   1b624:	603b      	str	r3, [r7, #0]
   1b626:	e007      	b.n	1b638 <ResetISR+0x20>
    {
        *pui32Dest++ = *pui32Src++;
   1b628:	683b      	ldr	r3, [r7, #0]
   1b62a:	1d1a      	adds	r2, r3, #4
   1b62c:	603a      	str	r2, [r7, #0]
   1b62e:	687a      	ldr	r2, [r7, #4]
   1b630:	1d11      	adds	r1, r2, #4
   1b632:	6079      	str	r1, [r7, #4]
   1b634:	6812      	ldr	r2, [r2, #0]
   1b636:	601a      	str	r2, [r3, #0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b638:	683b      	ldr	r3, [r7, #0]
   1b63a:	4a0e      	ldr	r2, [pc, #56]	; (1b674 <zero_loop+0x2c>)
   1b63c:	4293      	cmp	r3, r2
   1b63e:	d3f3      	bcc.n	1b628 <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
   1b640:	4813      	ldr	r0, [pc, #76]	; (1b690 <IntDefaultHandler+0x8>)
   1b642:	4914      	ldr	r1, [pc, #80]	; (1b694 <IntDefaultHandler+0xc>)
   1b644:	f04f 0200 	mov.w	r2, #0

0001b648 <zero_loop>:
   1b648:	4288      	cmp	r0, r1
   1b64a:	bfb8      	it	lt
   1b64c:	f840 2b04 	strlt.w	r2, [r0], #4
   1b650:	dbfa      	blt.n	1b648 <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b652:	4a09      	ldr	r2, [pc, #36]	; (1b678 <zero_loop+0x30>)
   1b654:	4b08      	ldr	r3, [pc, #32]	; (1b678 <zero_loop+0x30>)
   1b656:	681b      	ldr	r3, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
   1b658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b65c:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    _start();
   1b65e:	f7ff ff23 	bl	1b4a8 <_start>
}
   1b662:	bf00      	nop
   1b664:	3708      	adds	r7, #8
   1b666:	46bd      	mov	sp, r7
   1b668:	bd80      	pop	{r7, pc}
   1b66a:	bf00      	nop
   1b66c:	00025b5c 	.word	0x00025b5c
   1b670:	20000000 	.word	0x20000000
   1b674:	200008c0 	.word	0x200008c0
   1b678:	e000ed88 	.word	0xe000ed88

0001b67c <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
   1b67c:	b480      	push	{r7}
   1b67e:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
   1b680:	e7fe      	b.n	1b680 <NmiSR+0x4>

0001b682 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
   1b682:	b480      	push	{r7}
   1b684:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
   1b686:	e7fe      	b.n	1b686 <FaultISR+0x4>

0001b688 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
   1b688:	b480      	push	{r7}
   1b68a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1b68c:	e7fe      	b.n	1b68c <IntDefaultHandler+0x4>
   1b68e:	0000      	.short	0x0000
   1b690:	200008c0 	.word	0x200008c0
   1b694:	200014c8 	.word	0x200014c8

0001b698 <mp_hal_stdin_rx_chr>:
} periph_uart_t;
#define UART0 ((periph_uart_t*)0x4000C000)
#endif

// Receive single character
int mp_hal_stdin_rx_chr(void) {
   1b698:	b480      	push	{r7}
   1b69a:	b083      	sub	sp, #12
   1b69c:	af00      	add	r7, sp, #0
    unsigned char c = 0;
   1b69e:	2300      	movs	r3, #0
   1b6a0:	71fb      	strb	r3, [r7, #7]
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    // wait for RXFE to clear
    while (UART0->FR & (1 << 4)) {
   1b6a2:	bf00      	nop
   1b6a4:	4b07      	ldr	r3, [pc, #28]	; (1b6c4 <mp_hal_stdin_rx_chr+0x2c>)
   1b6a6:	699b      	ldr	r3, [r3, #24]
   1b6a8:	f003 0310 	and.w	r3, r3, #16
   1b6ac:	2b00      	cmp	r3, #0
   1b6ae:	d1f9      	bne.n	1b6a4 <mp_hal_stdin_rx_chr+0xc>
    }
    c = UART0->DR & 0xFF;
   1b6b0:	4b04      	ldr	r3, [pc, #16]	; (1b6c4 <mp_hal_stdin_rx_chr+0x2c>)
   1b6b2:	681b      	ldr	r3, [r3, #0]
   1b6b4:	71fb      	strb	r3, [r7, #7]
#endif
    return c;
   1b6b6:	79fb      	ldrb	r3, [r7, #7]
}
   1b6b8:	4618      	mov	r0, r3
   1b6ba:	370c      	adds	r7, #12
   1b6bc:	46bd      	mov	sp, r7
   1b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b6c2:	4770      	bx	lr
   1b6c4:	4000c000 	.word	0x4000c000

0001b6c8 <mp_hal_stdout_tx_strn>:

// Send string of given length
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
   1b6c8:	b480      	push	{r7}
   1b6ca:	b083      	sub	sp, #12
   1b6cc:	af00      	add	r7, sp, #0
   1b6ce:	6078      	str	r0, [r7, #4]
   1b6d0:	6039      	str	r1, [r7, #0]
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    while (len--) {
   1b6d2:	e00c      	b.n	1b6ee <mp_hal_stdout_tx_strn+0x26>
        // wait for TXFF to clear
        while (UART0->FR & (1 << 5)) {
   1b6d4:	bf00      	nop
   1b6d6:	4b0b      	ldr	r3, [pc, #44]	; (1b704 <mp_hal_stdout_tx_strn+0x3c>)
   1b6d8:	699b      	ldr	r3, [r3, #24]
   1b6da:	f003 0320 	and.w	r3, r3, #32
   1b6de:	2b00      	cmp	r3, #0
   1b6e0:	d1f9      	bne.n	1b6d6 <mp_hal_stdout_tx_strn+0xe>
        }
        UART0->DR = *str++;
   1b6e2:	4908      	ldr	r1, [pc, #32]	; (1b704 <mp_hal_stdout_tx_strn+0x3c>)
   1b6e4:	687b      	ldr	r3, [r7, #4]
   1b6e6:	1c5a      	adds	r2, r3, #1
   1b6e8:	607a      	str	r2, [r7, #4]
   1b6ea:	781b      	ldrb	r3, [r3, #0]
   1b6ec:	600b      	str	r3, [r1, #0]
    while (len--) {
   1b6ee:	683b      	ldr	r3, [r7, #0]
   1b6f0:	1e5a      	subs	r2, r3, #1
   1b6f2:	603a      	str	r2, [r7, #0]
   1b6f4:	2b00      	cmp	r3, #0
   1b6f6:	d1ed      	bne.n	1b6d4 <mp_hal_stdout_tx_strn+0xc>
    }
#endif
}
   1b6f8:	bf00      	nop
   1b6fa:	370c      	adds	r7, #12
   1b6fc:	46bd      	mov	sp, r7
   1b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b702:	4770      	bx	lr
   1b704:	4000c000 	.word	0x4000c000

0001b708 <mp_hal_ticks_cpu_enable>:

//NORETURN void mp_hal_raise(HAL_StatusTypeDef status) {
//    mp_raise_OSError(mp_hal_status_to_errno_table[status]);
//}

void mp_hal_ticks_cpu_enable(void) {
   1b708:	b480      	push	{r7}
   1b70a:	af00      	add	r7, sp, #0
//        DWT->LAR = 0xc5acce55;
//        #endif
//        DWT->CYCCNT = 0;
//        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
//    }
}
   1b70c:	bf00      	nop
   1b70e:	46bd      	mov	sp, r7
   1b710:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b714:	4770      	bx	lr

0001b716 <mp_hal_ticks_cpu>:

mp_uint_t mp_hal_ticks_cpu(void) {
   1b716:	b480      	push	{r7}
   1b718:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018));
   1b71a:	4b03      	ldr	r3, [pc, #12]	; (1b728 <mp_hal_ticks_cpu+0x12>)
   1b71c:	681b      	ldr	r3, [r3, #0]
}
   1b71e:	4618      	mov	r0, r3
   1b720:	46bd      	mov	sp, r7
   1b722:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b726:	4770      	bx	lr
   1b728:	e000e018 	.word	0xe000e018

0001b72c <mp_hal_ticks_ms>:

mp_uint_t mp_hal_ticks_ms(void) {
   1b72c:	b598      	push	{r3, r4, r7, lr}
   1b72e:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000);
   1b730:	4b06      	ldr	r3, [pc, #24]	; (1b74c <mp_hal_ticks_ms+0x20>)
   1b732:	681c      	ldr	r4, [r3, #0]
   1b734:	f002 f9f0 	bl	1db18 <SysCtlClockGet>
   1b738:	4602      	mov	r2, r0
   1b73a:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1b73e:	fb03 f302 	mul.w	r3, r3, r2
   1b742:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1b746:	4618      	mov	r0, r3
   1b748:	bd98      	pop	{r3, r4, r7, pc}
   1b74a:	bf00      	nop
   1b74c:	e000e018 	.word	0xe000e018

0001b750 <mp_hal_ticks_us>:

mp_uint_t mp_hal_ticks_us(void) {
   1b750:	b598      	push	{r3, r4, r7, lr}
   1b752:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000000);
   1b754:	4b05      	ldr	r3, [pc, #20]	; (1b76c <mp_hal_ticks_us+0x1c>)
   1b756:	681c      	ldr	r4, [r3, #0]
   1b758:	f002 f9de 	bl	1db18 <SysCtlClockGet>
   1b75c:	4602      	mov	r2, r0
   1b75e:	4b04      	ldr	r3, [pc, #16]	; (1b770 <mp_hal_ticks_us+0x20>)
   1b760:	fb03 f302 	mul.w	r3, r3, r2
   1b764:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1b768:	4618      	mov	r0, r3
   1b76a:	bd98      	pop	{r3, r4, r7, pc}
   1b76c:	e000e018 	.word	0xe000e018
   1b770:	002dc6c0 	.word	0x002dc6c0

0001b774 <mp_hal_gpio_clock_enable>:

void mp_hal_gpio_clock_enable(const uint32_t periph) {
   1b774:	b580      	push	{r7, lr}
   1b776:	b082      	sub	sp, #8
   1b778:	af00      	add	r7, sp, #0
   1b77a:	6078      	str	r0, [r7, #4]
    if (MAP_SysCtlPeripheralReady(periph)) {
   1b77c:	6878      	ldr	r0, [r7, #4]
   1b77e:	f002 f979 	bl	1da74 <SysCtlPeripheralReady>
   1b782:	4603      	mov	r3, r0
   1b784:	2b00      	cmp	r3, #0
   1b786:	d10d      	bne.n	1b7a4 <mp_hal_gpio_clock_enable+0x30>
        //Already acive
        return;
    }
    MAP_SysCtlPeripheralEnable(periph);
   1b788:	6878      	ldr	r0, [r7, #4]
   1b78a:	f002 f989 	bl	1daa0 <SysCtlPeripheralEnable>
    while(!MAP_SysCtlPeripheralReady(periph)){};
   1b78e:	bf00      	nop
   1b790:	6878      	ldr	r0, [r7, #4]
   1b792:	f002 f96f 	bl	1da74 <SysCtlPeripheralReady>
   1b796:	4603      	mov	r3, r0
   1b798:	f083 0301 	eor.w	r3, r3, #1
   1b79c:	b2db      	uxtb	r3, r3
   1b79e:	2b00      	cmp	r3, #0
   1b7a0:	d1f6      	bne.n	1b790 <mp_hal_gpio_clock_enable+0x1c>
   1b7a2:	e000      	b.n	1b7a6 <mp_hal_gpio_clock_enable+0x32>
        return;
   1b7a4:	bf00      	nop
}
   1b7a6:	3708      	adds	r7, #8
   1b7a8:	46bd      	mov	sp, r7
   1b7aa:	bd80      	pop	{r7, pc}

0001b7ac <mp_hal_pin_config>:

void mp_hal_pin_config(mp_hal_pin_obj_t pin_obj, uint32_t dir, uint32_t type, uint32_t drive) {
   1b7ac:	b580      	push	{r7, lr}
   1b7ae:	b084      	sub	sp, #16
   1b7b0:	af00      	add	r7, sp, #0
   1b7b2:	60f8      	str	r0, [r7, #12]
   1b7b4:	60b9      	str	r1, [r7, #8]
   1b7b6:	607a      	str	r2, [r7, #4]
   1b7b8:	603b      	str	r3, [r7, #0]
    mp_hal_gpio_clock_enable(pin_obj->periph);
   1b7ba:	68fb      	ldr	r3, [r7, #12]
   1b7bc:	68db      	ldr	r3, [r3, #12]
   1b7be:	4618      	mov	r0, r3
   1b7c0:	f7ff ffd8 	bl	1b774 <mp_hal_gpio_clock_enable>

    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, dir);
   1b7c4:	68fb      	ldr	r3, [r7, #12]
   1b7c6:	6898      	ldr	r0, [r3, #8]
   1b7c8:	68fb      	ldr	r3, [r7, #12]
   1b7ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b7ce:	68ba      	ldr	r2, [r7, #8]
   1b7d0:	4619      	mov	r1, r3
   1b7d2:	f002 f809 	bl	1d7e8 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, drive, type);
   1b7d6:	68fb      	ldr	r3, [r7, #12]
   1b7d8:	6898      	ldr	r0, [r3, #8]
   1b7da:	68fb      	ldr	r3, [r7, #12]
   1b7dc:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1b7e0:	687b      	ldr	r3, [r7, #4]
   1b7e2:	683a      	ldr	r2, [r7, #0]
   1b7e4:	f002 f825 	bl	1d832 <GPIOPadConfigSet>
}
   1b7e8:	bf00      	nop
   1b7ea:	3710      	adds	r7, #16
   1b7ec:	46bd      	mov	sp, r7
   1b7ee:	bd80      	pop	{r7, pc}

0001b7f0 <mp_hal_pin_set_af>:

void mp_hal_pin_set_af(mp_hal_pin_obj_t pin_obj, uint8_t af_id) {
   1b7f0:	b580      	push	{r7, lr}
   1b7f2:	b082      	sub	sp, #8
   1b7f4:	af00      	add	r7, sp, #0
   1b7f6:	6078      	str	r0, [r7, #4]
   1b7f8:	460b      	mov	r3, r1
   1b7fa:	70fb      	strb	r3, [r7, #3]
    if (af_id == 0xFF) return;
   1b7fc:	78fb      	ldrb	r3, [r7, #3]
   1b7fe:	2bff      	cmp	r3, #255	; 0xff
   1b800:	d01b      	beq.n	1b83a <mp_hal_pin_set_af+0x4a>
    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, GPIO_DIR_MODE_HW);
   1b802:	687b      	ldr	r3, [r7, #4]
   1b804:	6898      	ldr	r0, [r3, #8]
   1b806:	687b      	ldr	r3, [r7, #4]
   1b808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b80c:	2202      	movs	r2, #2
   1b80e:	4619      	mov	r1, r3
   1b810:	f001 ffea 	bl	1d7e8 <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
   1b814:	687b      	ldr	r3, [r7, #4]
   1b816:	6898      	ldr	r0, [r3, #8]
   1b818:	687b      	ldr	r3, [r7, #4]
   1b81a:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1b81e:	2308      	movs	r3, #8
   1b820:	2201      	movs	r2, #1
   1b822:	f002 f806 	bl	1d832 <GPIOPadConfigSet>
    MAP_GPIOPinConfigure((pin_obj->af_list)[af_id].conf);
   1b826:	687b      	ldr	r3, [r7, #4]
   1b828:	695a      	ldr	r2, [r3, #20]
   1b82a:	78fb      	ldrb	r3, [r7, #3]
   1b82c:	011b      	lsls	r3, r3, #4
   1b82e:	4413      	add	r3, r2
   1b830:	68db      	ldr	r3, [r3, #12]
   1b832:	4618      	mov	r0, r3
   1b834:	f002 f8fc 	bl	1da30 <GPIOPinConfigure>
   1b838:	e000      	b.n	1b83c <mp_hal_pin_set_af+0x4c>
    if (af_id == 0xFF) return;
   1b83a:	bf00      	nop
}
   1b83c:	3708      	adds	r7, #8
   1b83e:	46bd      	mov	sp, r7
   1b840:	bd80      	pop	{r7, pc}

0001b842 <mp_hal_set_interrupt_char>:

void mp_hal_set_interrupt_char(int c) {
   1b842:	b480      	push	{r7}
   1b844:	b083      	sub	sp, #12
   1b846:	af00      	add	r7, sp, #0
   1b848:	6078      	str	r0, [r7, #4]

}
   1b84a:	bf00      	nop
   1b84c:	370c      	adds	r7, #12
   1b84e:	46bd      	mov	sp, r7
   1b850:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b854:	4770      	bx	lr
   1b856:	bf00      	nop

0001b858 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1b858:	b480      	push	{r7}
   1b85a:	b083      	sub	sp, #12
   1b85c:	af00      	add	r7, sp, #0
   1b85e:	6078      	str	r0, [r7, #4]
   1b860:	687b      	ldr	r3, [r7, #4]
   1b862:	f003 0303 	and.w	r3, r3, #3
   1b866:	2b00      	cmp	r3, #0
   1b868:	bf0c      	ite	eq
   1b86a:	2301      	moveq	r3, #1
   1b86c:	2300      	movne	r3, #0
   1b86e:	b2db      	uxtb	r3, r3
   1b870:	4618      	mov	r0, r3
   1b872:	370c      	adds	r7, #12
   1b874:	46bd      	mov	sp, r7
   1b876:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b87a:	4770      	bx	lr

0001b87c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1b87c:	b480      	push	{r7}
   1b87e:	b083      	sub	sp, #12
   1b880:	af00      	add	r7, sp, #0
   1b882:	6078      	str	r0, [r7, #4]
   1b884:	687b      	ldr	r3, [r7, #4]
   1b886:	2b00      	cmp	r3, #0
   1b888:	d001      	beq.n	1b88e <mp_obj_new_bool+0x12>
   1b88a:	4b04      	ldr	r3, [pc, #16]	; (1b89c <mp_obj_new_bool+0x20>)
   1b88c:	e000      	b.n	1b890 <mp_obj_new_bool+0x14>
   1b88e:	4b04      	ldr	r3, [pc, #16]	; (1b8a0 <mp_obj_new_bool+0x24>)
   1b890:	4618      	mov	r0, r3
   1b892:	370c      	adds	r7, #12
   1b894:	46bd      	mov	sp, r7
   1b896:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b89a:	4770      	bx	lr
   1b89c:	0002189c 	.word	0x0002189c
   1b8a0:	00021894 	.word	0x00021894

0001b8a4 <mp_obj_dict_get_map>:
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
   1b8a4:	b480      	push	{r7}
   1b8a6:	b083      	sub	sp, #12
   1b8a8:	af00      	add	r7, sp, #0
   1b8aa:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
   1b8ac:	687b      	ldr	r3, [r7, #4]
   1b8ae:	3304      	adds	r3, #4
}
   1b8b0:	4618      	mov	r0, r3
   1b8b2:	370c      	adds	r7, #12
   1b8b4:	46bd      	mov	sp, r7
   1b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b8ba:	4770      	bx	lr

0001b8bc <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   1b8bc:	b580      	push	{r7, lr}
   1b8be:	b084      	sub	sp, #16
   1b8c0:	af00      	add	r7, sp, #0
   1b8c2:	60f8      	str	r0, [r7, #12]
   1b8c4:	60b9      	str	r1, [r7, #8]
   1b8c6:	607a      	str	r2, [r7, #4]
   1b8c8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   1b8ca:	687b      	ldr	r3, [r7, #4]
   1b8cc:	045a      	lsls	r2, r3, #17
   1b8ce:	683b      	ldr	r3, [r7, #0]
   1b8d0:	005b      	lsls	r3, r3, #1
   1b8d2:	431a      	orrs	r2, r3
   1b8d4:	7e3b      	ldrb	r3, [r7, #24]
   1b8d6:	2b00      	cmp	r3, #0
   1b8d8:	d001      	beq.n	1b8de <mp_arg_check_num+0x22>
   1b8da:	2301      	movs	r3, #1
   1b8dc:	e000      	b.n	1b8e0 <mp_arg_check_num+0x24>
   1b8de:	2300      	movs	r3, #0
   1b8e0:	4313      	orrs	r3, r2
   1b8e2:	461a      	mov	r2, r3
   1b8e4:	68b9      	ldr	r1, [r7, #8]
   1b8e6:	68f8      	ldr	r0, [r7, #12]
   1b8e8:	f7f1 fae4 	bl	ceb4 <mp_arg_check_num_sig>
}
   1b8ec:	bf00      	nop
   1b8ee:	3710      	adds	r7, #16
   1b8f0:	46bd      	mov	sp, r7
   1b8f2:	bd80      	pop	{r7, pc}

0001b8f4 <pin_init0>:
/// how a particular object gets mapped to a pin.

// Pin class variables
STATIC bool pin_class_debug;

void pin_init0(void) {
   1b8f4:	b480      	push	{r7}
   1b8f6:	af00      	add	r7, sp, #0
    MP_STATE_PORT(pin_class_mapper) = mp_const_none;
   1b8f8:	4b07      	ldr	r3, [pc, #28]	; (1b918 <pin_init0+0x24>)
   1b8fa:	4a08      	ldr	r2, [pc, #32]	; (1b91c <pin_init0+0x28>)
   1b8fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MP_STATE_PORT(pin_class_map_dict) = mp_const_none;
   1b900:	4b05      	ldr	r3, [pc, #20]	; (1b918 <pin_init0+0x24>)
   1b902:	4a06      	ldr	r2, [pc, #24]	; (1b91c <pin_init0+0x28>)
   1b904:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pin_class_debug = false;
   1b908:	4b05      	ldr	r3, [pc, #20]	; (1b920 <pin_init0+0x2c>)
   1b90a:	2200      	movs	r2, #0
   1b90c:	701a      	strb	r2, [r3, #0]
}
   1b90e:	bf00      	nop
   1b910:	46bd      	mov	sp, r7
   1b912:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b916:	4770      	bx	lr
   1b918:	200012f0 	.word	0x200012f0
   1b91c:	00023108 	.word	0x00023108
   1b920:	200012c4 	.word	0x200012c4

0001b924 <pin_find>:



// C API used to convert a user-supplied pin name into an ordinal pin number.
const pin_obj_t *pin_find(mp_obj_t user_obj) {
   1b924:	b580      	push	{r7, lr}
   1b926:	b088      	sub	sp, #32
   1b928:	af00      	add	r7, sp, #0
   1b92a:	6078      	str	r0, [r7, #4]
    const pin_obj_t *pin_obj;

    // If a pin was provided, then use it
    if (MP_OBJ_IS_TYPE(user_obj, &pin_mod)) {
   1b92c:	6878      	ldr	r0, [r7, #4]
   1b92e:	f7ff ff93 	bl	1b858 <MP_OBJ_IS_OBJ>
   1b932:	4603      	mov	r3, r0
   1b934:	2b00      	cmp	r3, #0
   1b936:	d016      	beq.n	1b966 <pin_find+0x42>
   1b938:	687b      	ldr	r3, [r7, #4]
   1b93a:	681b      	ldr	r3, [r3, #0]
   1b93c:	4a59      	ldr	r2, [pc, #356]	; (1baa4 <pin_find+0x180>)
   1b93e:	4293      	cmp	r3, r2
   1b940:	d111      	bne.n	1b966 <pin_find+0x42>
        pin_obj = MP_OBJ_TO_PTR(user_obj);
   1b942:	687b      	ldr	r3, [r7, #4]
   1b944:	61fb      	str	r3, [r7, #28]
        if (pin_class_debug) {
   1b946:	4b58      	ldr	r3, [pc, #352]	; (1baa8 <pin_find+0x184>)
   1b948:	781b      	ldrb	r3, [r3, #0]
   1b94a:	2b00      	cmp	r3, #0
   1b94c:	d009      	beq.n	1b962 <pin_find+0x3e>
            printf("Pin map passed pin ");
   1b94e:	4857      	ldr	r0, [pc, #348]	; (1baac <pin_find+0x188>)
   1b950:	f7ff fc34 	bl	1b1bc <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1b954:	2100      	movs	r1, #0
   1b956:	69f8      	ldr	r0, [r7, #28]
   1b958:	f7f1 ff06 	bl	d768 <mp_obj_print>
            printf("\n");
   1b95c:	200a      	movs	r0, #10
   1b95e:	f7ff fc57 	bl	1b210 <putchar>
        }
        return pin_obj;
   1b962:	69fb      	ldr	r3, [r7, #28]
   1b964:	e099      	b.n	1ba9a <pin_find+0x176>
    }


    if (MP_STATE_PORT(pin_class_mapper) != mp_const_none) {
   1b966:	4b52      	ldr	r3, [pc, #328]	; (1bab0 <pin_find+0x18c>)
   1b968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1b96c:	4a51      	ldr	r2, [pc, #324]	; (1bab4 <pin_find+0x190>)
   1b96e:	4293      	cmp	r3, r2
   1b970:	d033      	beq.n	1b9da <pin_find+0xb6>
        mp_obj_t o = mp_call_function_1(MP_STATE_PORT(pin_class_mapper), user_obj);
   1b972:	4b4f      	ldr	r3, [pc, #316]	; (1bab0 <pin_find+0x18c>)
   1b974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1b978:	6879      	ldr	r1, [r7, #4]
   1b97a:	4618      	mov	r0, r3
   1b97c:	f7f0 f9a1 	bl	bcc2 <mp_call_function_1>
   1b980:	61b8      	str	r0, [r7, #24]
        if (o != mp_const_none) {
   1b982:	69bb      	ldr	r3, [r7, #24]
   1b984:	4a4b      	ldr	r2, [pc, #300]	; (1bab4 <pin_find+0x190>)
   1b986:	4293      	cmp	r3, r2
   1b988:	d027      	beq.n	1b9da <pin_find+0xb6>
            if (!MP_OBJ_IS_TYPE(o, &pin_mod)) {
   1b98a:	69b8      	ldr	r0, [r7, #24]
   1b98c:	f7ff ff64 	bl	1b858 <MP_OBJ_IS_OBJ>
   1b990:	4603      	mov	r3, r0
   1b992:	f083 0301 	eor.w	r3, r3, #1
   1b996:	b2db      	uxtb	r3, r3
   1b998:	2b00      	cmp	r3, #0
   1b99a:	d104      	bne.n	1b9a6 <pin_find+0x82>
   1b99c:	69bb      	ldr	r3, [r7, #24]
   1b99e:	681b      	ldr	r3, [r3, #0]
   1b9a0:	4a40      	ldr	r2, [pc, #256]	; (1baa4 <pin_find+0x180>)
   1b9a2:	4293      	cmp	r3, r2
   1b9a4:	d002      	beq.n	1b9ac <pin_find+0x88>
                mp_raise_ValueError("Pin.mapper didn't return a Pin object");
   1b9a6:	4844      	ldr	r0, [pc, #272]	; (1bab8 <pin_find+0x194>)
   1b9a8:	f7f1 fa53 	bl	ce52 <mp_raise_ValueError>
            }
            if (pin_class_debug) {
   1b9ac:	4b3e      	ldr	r3, [pc, #248]	; (1baa8 <pin_find+0x184>)
   1b9ae:	781b      	ldrb	r3, [r3, #0]
   1b9b0:	2b00      	cmp	r3, #0
   1b9b2:	d010      	beq.n	1b9d6 <pin_find+0xb2>
                printf("Pin.mapper maps ");
   1b9b4:	4841      	ldr	r0, [pc, #260]	; (1babc <pin_find+0x198>)
   1b9b6:	f7ff fc01 	bl	1b1bc <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1b9ba:	2101      	movs	r1, #1
   1b9bc:	6878      	ldr	r0, [r7, #4]
   1b9be:	f7f1 fed3 	bl	d768 <mp_obj_print>
                printf(" to ");
   1b9c2:	483f      	ldr	r0, [pc, #252]	; (1bac0 <pin_find+0x19c>)
   1b9c4:	f7ff fbfa 	bl	1b1bc <printf>
                mp_obj_print(o, PRINT_STR);
   1b9c8:	2100      	movs	r1, #0
   1b9ca:	69b8      	ldr	r0, [r7, #24]
   1b9cc:	f7f1 fecc 	bl	d768 <mp_obj_print>
                printf("\n");
   1b9d0:	200a      	movs	r0, #10
   1b9d2:	f7ff fc1d 	bl	1b210 <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1b9d6:	69bb      	ldr	r3, [r7, #24]
   1b9d8:	e05f      	b.n	1ba9a <pin_find+0x176>
        }
        // The pin mapping function returned mp_const_none, fall through to
        // other lookup methods.
    }

    if (MP_STATE_PORT(pin_class_map_dict) != mp_const_none) {
   1b9da:	4b35      	ldr	r3, [pc, #212]	; (1bab0 <pin_find+0x18c>)
   1b9dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1b9e0:	4a34      	ldr	r2, [pc, #208]	; (1bab4 <pin_find+0x190>)
   1b9e2:	4293      	cmp	r3, r2
   1b9e4:	d02d      	beq.n	1ba42 <pin_find+0x11e>
        mp_map_t *pin_map_map = mp_obj_dict_get_map(MP_STATE_PORT(pin_class_map_dict));
   1b9e6:	4b32      	ldr	r3, [pc, #200]	; (1bab0 <pin_find+0x18c>)
   1b9e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1b9ec:	4618      	mov	r0, r3
   1b9ee:	f7ff ff59 	bl	1b8a4 <mp_obj_dict_get_map>
   1b9f2:	6178      	str	r0, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(pin_map_map, user_obj, MP_MAP_LOOKUP);
   1b9f4:	2200      	movs	r2, #0
   1b9f6:	6879      	ldr	r1, [r7, #4]
   1b9f8:	6978      	ldr	r0, [r7, #20]
   1b9fa:	f7f1 fcaf 	bl	d35c <mp_map_lookup>
   1b9fe:	6138      	str	r0, [r7, #16]
        if (elem != NULL && elem->value != MP_OBJ_NULL) {
   1ba00:	693b      	ldr	r3, [r7, #16]
   1ba02:	2b00      	cmp	r3, #0
   1ba04:	d01d      	beq.n	1ba42 <pin_find+0x11e>
   1ba06:	693b      	ldr	r3, [r7, #16]
   1ba08:	685b      	ldr	r3, [r3, #4]
   1ba0a:	2b00      	cmp	r3, #0
   1ba0c:	d019      	beq.n	1ba42 <pin_find+0x11e>
            mp_obj_t o = elem->value;
   1ba0e:	693b      	ldr	r3, [r7, #16]
   1ba10:	685b      	ldr	r3, [r3, #4]
   1ba12:	60fb      	str	r3, [r7, #12]
            if (pin_class_debug) {
   1ba14:	4b24      	ldr	r3, [pc, #144]	; (1baa8 <pin_find+0x184>)
   1ba16:	781b      	ldrb	r3, [r3, #0]
   1ba18:	2b00      	cmp	r3, #0
   1ba1a:	d010      	beq.n	1ba3e <pin_find+0x11a>
                printf("Pin.map_dict maps ");
   1ba1c:	4829      	ldr	r0, [pc, #164]	; (1bac4 <pin_find+0x1a0>)
   1ba1e:	f7ff fbcd 	bl	1b1bc <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1ba22:	2101      	movs	r1, #1
   1ba24:	6878      	ldr	r0, [r7, #4]
   1ba26:	f7f1 fe9f 	bl	d768 <mp_obj_print>
                printf(" to ");
   1ba2a:	4825      	ldr	r0, [pc, #148]	; (1bac0 <pin_find+0x19c>)
   1ba2c:	f7ff fbc6 	bl	1b1bc <printf>
                mp_obj_print(o, PRINT_STR);
   1ba30:	2100      	movs	r1, #0
   1ba32:	68f8      	ldr	r0, [r7, #12]
   1ba34:	f7f1 fe98 	bl	d768 <mp_obj_print>
                printf("\n");
   1ba38:	200a      	movs	r0, #10
   1ba3a:	f7ff fbe9 	bl	1b210 <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1ba3e:	68fb      	ldr	r3, [r7, #12]
   1ba40:	e02b      	b.n	1ba9a <pin_find+0x176>
        }
    }

    // See if the pin name matches a board pin
    pin_obj = pin_find_named_pin(&pin_board_pins_locals_dict, user_obj);
   1ba42:	6879      	ldr	r1, [r7, #4]
   1ba44:	4820      	ldr	r0, [pc, #128]	; (1bac8 <pin_find+0x1a4>)
   1ba46:	f000 fbf7 	bl	1c238 <pin_find_named_pin>
   1ba4a:	61f8      	str	r0, [r7, #28]
    if (pin_obj) {
   1ba4c:	69fb      	ldr	r3, [r7, #28]
   1ba4e:	2b00      	cmp	r3, #0
   1ba50:	d016      	beq.n	1ba80 <pin_find+0x15c>
        if (pin_class_debug) {
   1ba52:	4b15      	ldr	r3, [pc, #84]	; (1baa8 <pin_find+0x184>)
   1ba54:	781b      	ldrb	r3, [r3, #0]
   1ba56:	2b00      	cmp	r3, #0
   1ba58:	d010      	beq.n	1ba7c <pin_find+0x158>
            printf("Pin.board maps ");
   1ba5a:	481c      	ldr	r0, [pc, #112]	; (1bacc <pin_find+0x1a8>)
   1ba5c:	f7ff fbae 	bl	1b1bc <printf>
            mp_obj_print(user_obj, PRINT_REPR);
   1ba60:	2101      	movs	r1, #1
   1ba62:	6878      	ldr	r0, [r7, #4]
   1ba64:	f7f1 fe80 	bl	d768 <mp_obj_print>
            printf(" to ");
   1ba68:	4815      	ldr	r0, [pc, #84]	; (1bac0 <pin_find+0x19c>)
   1ba6a:	f7ff fba7 	bl	1b1bc <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1ba6e:	2100      	movs	r1, #0
   1ba70:	69f8      	ldr	r0, [r7, #28]
   1ba72:	f7f1 fe79 	bl	d768 <mp_obj_print>
            printf("\n");
   1ba76:	200a      	movs	r0, #10
   1ba78:	f7ff fbca 	bl	1b210 <putchar>
        }
        return pin_obj;
   1ba7c:	69fb      	ldr	r3, [r7, #28]
   1ba7e:	e00c      	b.n	1ba9a <pin_find+0x176>
//            printf("\n");
//        }
//        return pin_obj;
//    }

    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "Pin(%s) doesn't exist", mp_obj_str_get_str(user_obj)));
   1ba80:	6878      	ldr	r0, [r7, #4]
   1ba82:	f7f9 fcd7 	bl	15434 <mp_obj_str_get_str>
   1ba86:	4603      	mov	r3, r0
   1ba88:	461a      	mov	r2, r3
   1ba8a:	4911      	ldr	r1, [pc, #68]	; (1bad0 <pin_find+0x1ac>)
   1ba8c:	4811      	ldr	r0, [pc, #68]	; (1bad4 <pin_find+0x1b0>)
   1ba8e:	f7f3 fcf5 	bl	f47c <mp_obj_new_exception_msg_varg>
   1ba92:	4603      	mov	r3, r0
   1ba94:	4618      	mov	r0, r3
   1ba96:	f7e4 fc23 	bl	2e0 <nlr_jump>
}
   1ba9a:	4618      	mov	r0, r3
   1ba9c:	3720      	adds	r7, #32
   1ba9e:	46bd      	mov	sp, r7
   1baa0:	bd80      	pop	{r7, pc}
   1baa2:	bf00      	nop
   1baa4:	00024c60 	.word	0x00024c60
   1baa8:	200012c4 	.word	0x200012c4
   1baac:	00024930 	.word	0x00024930
   1bab0:	200012f0 	.word	0x200012f0
   1bab4:	00023108 	.word	0x00023108
   1bab8:	00024944 	.word	0x00024944
   1babc:	0002496c 	.word	0x0002496c
   1bac0:	00024980 	.word	0x00024980
   1bac4:	00024988 	.word	0x00024988
   1bac8:	00025628 	.word	0x00025628
   1bacc:	0002499c 	.word	0x0002499c
   1bad0:	000249ac 	.word	0x000249ac
   1bad4:	000223e4 	.word	0x000223e4

0001bad8 <pin_print>:

/// \method __str__()
/// Return a string describing the pin object.
STATIC void pin_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1bad8:	b580      	push	{r7, lr}
   1bada:	b08e      	sub	sp, #56	; 0x38
   1badc:	af00      	add	r7, sp, #0
   1bade:	60f8      	str	r0, [r7, #12]
   1bae0:	60b9      	str	r1, [r7, #8]
   1bae2:	607a      	str	r2, [r7, #4]

    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bae4:	68bb      	ldr	r3, [r7, #8]
   1bae6:	62bb      	str	r3, [r7, #40]	; 0x28

    // pin name
    mp_printf(print, "Pin(Pin.cpu.%q, mode=Pin.", self->name);
   1bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1baea:	685b      	ldr	r3, [r3, #4]
   1baec:	461a      	mov	r2, r3
   1baee:	4949      	ldr	r1, [pc, #292]	; (1bc14 <pin_print+0x13c>)
   1baf0:	68f8      	ldr	r0, [r7, #12]
   1baf2:	f7e6 f9f9 	bl	1ee8 <mp_printf>

    uint32_t dir = MAP_GPIODirModeGet(self->port, self->pin_mask);
   1baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1baf8:	689a      	ldr	r2, [r3, #8]
   1bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bafc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bb00:	4619      	mov	r1, r3
   1bb02:	4610      	mov	r0, r2
   1bb04:	f001 fe83 	bl	1d80e <GPIODirModeGet>
   1bb08:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t type;
    uint32_t strength;
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, &strength, &type);
   1bb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb0c:	6898      	ldr	r0, [r3, #8]
   1bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb10:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1bb14:	f107 0318 	add.w	r3, r7, #24
   1bb18:	f107 0214 	add.w	r2, r7, #20
   1bb1c:	f001 ff0c 	bl	1d938 <GPIOPadConfigGet>


    if (dir == GPIO_DIR_MODE_HW && type == GPIO_PIN_TYPE_ANALOG) {
   1bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb22:	2b02      	cmp	r3, #2
   1bb24:	d107      	bne.n	1bb36 <pin_print+0x5e>
   1bb26:	69bb      	ldr	r3, [r7, #24]
   1bb28:	2b00      	cmp	r3, #0
   1bb2a:	d104      	bne.n	1bb36 <pin_print+0x5e>
        // analog
        mp_print_str(print, "ANALOG)");
   1bb2c:	493a      	ldr	r1, [pc, #232]	; (1bc18 <pin_print+0x140>)
   1bb2e:	68f8      	ldr	r0, [r7, #12]
   1bb30:	f7e5 fec8 	bl	18c4 <mp_print_str>
            }
        } else {
            mp_print_str(print, ")");
        }
    }
}
   1bb34:	e06a      	b.n	1bc0c <pin_print+0x134>
        bool af = false;
   1bb36:	2300      	movs	r3, #0
   1bb38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (dir == GPIO_DIR_MODE_IN) {
   1bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d102      	bne.n	1bb48 <pin_print+0x70>
            mode_qst = MP_QSTR_IN;
   1bb42:	23c1      	movs	r3, #193	; 0xc1
   1bb44:	633b      	str	r3, [r7, #48]	; 0x30
   1bb46:	e019      	b.n	1bb7c <pin_print+0xa4>
        } else if (dir == GPIO_DIR_MODE_OUT) {
   1bb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb4a:	2b01      	cmp	r3, #1
   1bb4c:	d108      	bne.n	1bb60 <pin_print+0x88>
            if (type == GPIO_PIN_TYPE_OD){
   1bb4e:	69bb      	ldr	r3, [r7, #24]
   1bb50:	2b09      	cmp	r3, #9
   1bb52:	d102      	bne.n	1bb5a <pin_print+0x82>
                mode_qst = MP_QSTR_OPEN_DRAIN;
   1bb54:	23d3      	movs	r3, #211	; 0xd3
   1bb56:	633b      	str	r3, [r7, #48]	; 0x30
   1bb58:	e010      	b.n	1bb7c <pin_print+0xa4>
                mode_qst = MP_QSTR_OUT;
   1bb5a:	23d5      	movs	r3, #213	; 0xd5
   1bb5c:	633b      	str	r3, [r7, #48]	; 0x30
   1bb5e:	e00d      	b.n	1bb7c <pin_print+0xa4>
            af = true;
   1bb60:	2301      	movs	r3, #1
   1bb62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (dir == GPIO_DIR_MODE_HW) {
   1bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb68:	2b02      	cmp	r3, #2
   1bb6a:	d107      	bne.n	1bb7c <pin_print+0xa4>
                if (type == GPIO_PIN_TYPE_OD){
   1bb6c:	69bb      	ldr	r3, [r7, #24]
   1bb6e:	2b09      	cmp	r3, #9
   1bb70:	d102      	bne.n	1bb78 <pin_print+0xa0>
                   mode_qst = MP_QSTR_ALT_OPEN_DRAIN;
   1bb72:	23b4      	movs	r3, #180	; 0xb4
   1bb74:	633b      	str	r3, [r7, #48]	; 0x30
   1bb76:	e001      	b.n	1bb7c <pin_print+0xa4>
                    mode_qst = MP_QSTR_ALT;
   1bb78:	23b3      	movs	r3, #179	; 0xb3
   1bb7a:	633b      	str	r3, [r7, #48]	; 0x30
        mp_print_str(print, qstr_str(mode_qst));
   1bb7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bb7e:	f7e5 fb63 	bl	1248 <qstr_str>
   1bb82:	4603      	mov	r3, r0
   1bb84:	4619      	mov	r1, r3
   1bb86:	68f8      	ldr	r0, [r7, #12]
   1bb88:	f7e5 fe9c 	bl	18c4 <mp_print_str>
        qstr pull_qst = MP_QSTR_NULL;
   1bb8c:	2300      	movs	r3, #0
   1bb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (type == GPIO_PIN_TYPE_STD_WPU) {
   1bb90:	69bb      	ldr	r3, [r7, #24]
   1bb92:	2b0a      	cmp	r3, #10
   1bb94:	d102      	bne.n	1bb9c <pin_print+0xc4>
            pull_qst = MP_QSTR_PULL_UP;
   1bb96:	23d9      	movs	r3, #217	; 0xd9
   1bb98:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bb9a:	e004      	b.n	1bba6 <pin_print+0xce>
        } else if (type == GPIO_PIN_TYPE_STD_WPD) {
   1bb9c:	69bb      	ldr	r3, [r7, #24]
   1bb9e:	2b0c      	cmp	r3, #12
   1bba0:	d101      	bne.n	1bba6 <pin_print+0xce>
            pull_qst = MP_QSTR_PULL_DOWN;
   1bba2:	23d7      	movs	r3, #215	; 0xd7
   1bba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (pull_qst != MP_QSTR_NULL) {
   1bba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bba8:	2b00      	cmp	r3, #0
   1bbaa:	d004      	beq.n	1bbb6 <pin_print+0xde>
            mp_printf(print, ", pull=Pin.%q", pull_qst);
   1bbac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bbae:	491b      	ldr	r1, [pc, #108]	; (1bc1c <pin_print+0x144>)
   1bbb0:	68f8      	ldr	r0, [r7, #12]
   1bbb2:	f7e6 f999 	bl	1ee8 <mp_printf>
        if (af) {
   1bbb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1bbba:	2b00      	cmp	r3, #0
   1bbbc:	d022      	beq.n	1bc04 <pin_print+0x12c>
            mp_uint_t af_idx = mp_hal_pin_get_af(self);
   1bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbc0:	691b      	ldr	r3, [r3, #16]
   1bbc2:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bbc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1bbcc:	009b      	lsls	r3, r3, #2
   1bbce:	fa22 f303 	lsr.w	r3, r2, r3
   1bbd2:	f003 030f 	and.w	r3, r3, #15
   1bbd6:	623b      	str	r3, [r7, #32]
            const pin_af_obj_t *af_obj = pin_find_af_by_index(self, af_idx);
   1bbd8:	6a39      	ldr	r1, [r7, #32]
   1bbda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1bbdc:	f000 fb77 	bl	1c2ce <pin_find_af_by_index>
   1bbe0:	61f8      	str	r0, [r7, #28]
            if (af_obj == NULL) {
   1bbe2:	69fb      	ldr	r3, [r7, #28]
   1bbe4:	2b00      	cmp	r3, #0
   1bbe6:	d105      	bne.n	1bbf4 <pin_print+0x11c>
                mp_printf(print, ", af=%d)", af_idx);
   1bbe8:	6a3a      	ldr	r2, [r7, #32]
   1bbea:	490d      	ldr	r1, [pc, #52]	; (1bc20 <pin_print+0x148>)
   1bbec:	68f8      	ldr	r0, [r7, #12]
   1bbee:	f7e6 f97b 	bl	1ee8 <mp_printf>
}
   1bbf2:	e00b      	b.n	1bc0c <pin_print+0x134>
                mp_printf(print, ", af=Pin.%q)", af_obj->name);
   1bbf4:	69fb      	ldr	r3, [r7, #28]
   1bbf6:	681b      	ldr	r3, [r3, #0]
   1bbf8:	461a      	mov	r2, r3
   1bbfa:	490a      	ldr	r1, [pc, #40]	; (1bc24 <pin_print+0x14c>)
   1bbfc:	68f8      	ldr	r0, [r7, #12]
   1bbfe:	f7e6 f973 	bl	1ee8 <mp_printf>
}
   1bc02:	e003      	b.n	1bc0c <pin_print+0x134>
            mp_print_str(print, ")");
   1bc04:	4908      	ldr	r1, [pc, #32]	; (1bc28 <pin_print+0x150>)
   1bc06:	68f8      	ldr	r0, [r7, #12]
   1bc08:	f7e5 fe5c 	bl	18c4 <mp_print_str>
}
   1bc0c:	bf00      	nop
   1bc0e:	3738      	adds	r7, #56	; 0x38
   1bc10:	46bd      	mov	sp, r7
   1bc12:	bd80      	pop	{r7, pc}
   1bc14:	000249c4 	.word	0x000249c4
   1bc18:	000249e0 	.word	0x000249e0
   1bc1c:	000249e8 	.word	0x000249e8
   1bc20:	000249f8 	.word	0x000249f8
   1bc24:	00024a04 	.word	0x00024a04
   1bc28:	00024a14 	.word	0x00024a14

0001bc2c <pin_make_new>:
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *pin, size_t n_args, const mp_obj_t *args, mp_map_t *kw_args);

/// \classmethod \constructor(id, ...)
/// Create a new Pin object associated with the id.  If additional arguments are given,
/// they are used to initialise the pin.  See `init`.
mp_obj_t pin_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1bc2c:	b580      	push	{r7, lr}
   1bc2e:	b08a      	sub	sp, #40	; 0x28
   1bc30:	af02      	add	r7, sp, #8
   1bc32:	60f8      	str	r0, [r7, #12]
   1bc34:	60b9      	str	r1, [r7, #8]
   1bc36:	607a      	str	r2, [r7, #4]
   1bc38:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, MP_OBJ_FUN_ARGS_MAX, true);
   1bc3a:	2301      	movs	r3, #1
   1bc3c:	9300      	str	r3, [sp, #0]
   1bc3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bc42:	2201      	movs	r2, #1
   1bc44:	6879      	ldr	r1, [r7, #4]
   1bc46:	68b8      	ldr	r0, [r7, #8]
   1bc48:	f7ff fe38 	bl	1b8bc <mp_arg_check_num>

    // Run an argument through the mapper and return the result.
    const pin_obj_t *pin = pin_find(args[0]);
   1bc4c:	683b      	ldr	r3, [r7, #0]
   1bc4e:	681b      	ldr	r3, [r3, #0]
   1bc50:	4618      	mov	r0, r3
   1bc52:	f7ff fe67 	bl	1b924 <pin_find>
   1bc56:	61f8      	str	r0, [r7, #28]

    if (n_args > 1 || n_kw > 0) {
   1bc58:	68bb      	ldr	r3, [r7, #8]
   1bc5a:	2b01      	cmp	r3, #1
   1bc5c:	d802      	bhi.n	1bc64 <pin_make_new+0x38>
   1bc5e:	687b      	ldr	r3, [r7, #4]
   1bc60:	2b00      	cmp	r3, #0
   1bc62:	d012      	beq.n	1bc8a <pin_make_new+0x5e>
        // pin mode given, so configure this GPIO
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
   1bc64:	68bb      	ldr	r3, [r7, #8]
   1bc66:	009b      	lsls	r3, r3, #2
   1bc68:	683a      	ldr	r2, [r7, #0]
   1bc6a:	441a      	add	r2, r3
   1bc6c:	f107 0310 	add.w	r3, r7, #16
   1bc70:	6879      	ldr	r1, [r7, #4]
   1bc72:	4618      	mov	r0, r3
   1bc74:	f7f1 faad 	bl	d1d2 <mp_map_init_fixed_table>
        pin_obj_init_helper(pin, n_args - 1, args + 1, &kw_args);
   1bc78:	68bb      	ldr	r3, [r7, #8]
   1bc7a:	1e59      	subs	r1, r3, #1
   1bc7c:	683b      	ldr	r3, [r7, #0]
   1bc7e:	1d1a      	adds	r2, r3, #4
   1bc80:	f107 0310 	add.w	r3, r7, #16
   1bc84:	69f8      	ldr	r0, [r7, #28]
   1bc86:	f000 f8c7 	bl	1be18 <pin_obj_init_helper>
    }

    return MP_OBJ_FROM_PTR(pin);
   1bc8a:	69fb      	ldr	r3, [r7, #28]
}
   1bc8c:	4618      	mov	r0, r3
   1bc8e:	3720      	adds	r7, #32
   1bc90:	46bd      	mov	sp, r7
   1bc92:	bd80      	pop	{r7, pc}

0001bc94 <pin_call>:

// fast method for getting/setting pin value
STATIC mp_obj_t pin_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1bc94:	b5b0      	push	{r4, r5, r7, lr}
   1bc96:	b088      	sub	sp, #32
   1bc98:	af02      	add	r7, sp, #8
   1bc9a:	60f8      	str	r0, [r7, #12]
   1bc9c:	60b9      	str	r1, [r7, #8]
   1bc9e:	607a      	str	r2, [r7, #4]
   1bca0:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   1bca2:	2300      	movs	r3, #0
   1bca4:	9300      	str	r3, [sp, #0]
   1bca6:	2301      	movs	r3, #1
   1bca8:	2200      	movs	r2, #0
   1bcaa:	6879      	ldr	r1, [r7, #4]
   1bcac:	68b8      	ldr	r0, [r7, #8]
   1bcae:	f7ff fe05 	bl	1b8bc <mp_arg_check_num>
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bcb2:	68fb      	ldr	r3, [r7, #12]
   1bcb4:	617b      	str	r3, [r7, #20]
    if (n_args == 0) {
   1bcb6:	68bb      	ldr	r3, [r7, #8]
   1bcb8:	2b00      	cmp	r3, #0
   1bcba:	d10d      	bne.n	1bcd8 <pin_call+0x44>
        // get pin
        return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_read(self));
   1bcbc:	697b      	ldr	r3, [r7, #20]
   1bcbe:	689a      	ldr	r2, [r3, #8]
   1bcc0:	697b      	ldr	r3, [r7, #20]
   1bcc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bcc6:	4619      	mov	r1, r3
   1bcc8:	4610      	mov	r0, r2
   1bcca:	f001 fe9d 	bl	1da08 <GPIOPinRead>
   1bcce:	4603      	mov	r3, r0
   1bcd0:	005b      	lsls	r3, r3, #1
   1bcd2:	f043 0301 	orr.w	r3, r3, #1
   1bcd6:	e017      	b.n	1bd08 <pin_call+0x74>
    } else {
        // set pin
        mp_hal_pin_write(self, mp_obj_is_true(args[0]));
   1bcd8:	697b      	ldr	r3, [r7, #20]
   1bcda:	689c      	ldr	r4, [r3, #8]
   1bcdc:	697b      	ldr	r3, [r7, #20]
   1bcde:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
   1bce2:	683b      	ldr	r3, [r7, #0]
   1bce4:	681b      	ldr	r3, [r3, #0]
   1bce6:	4618      	mov	r0, r3
   1bce8:	f7f1 fdbe 	bl	d868 <mp_obj_is_true>
   1bcec:	4603      	mov	r3, r0
   1bcee:	2b00      	cmp	r3, #0
   1bcf0:	d003      	beq.n	1bcfa <pin_call+0x66>
   1bcf2:	697b      	ldr	r3, [r7, #20]
   1bcf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bcf8:	e000      	b.n	1bcfc <pin_call+0x68>
   1bcfa:	2300      	movs	r3, #0
   1bcfc:	461a      	mov	r2, r3
   1bcfe:	4629      	mov	r1, r5
   1bd00:	4620      	mov	r0, r4
   1bd02:	f001 fe84 	bl	1da0e <GPIOPinWrite>
        return mp_const_none;
   1bd06:	4b02      	ldr	r3, [pc, #8]	; (1bd10 <pin_call+0x7c>)
    }
}
   1bd08:	4618      	mov	r0, r3
   1bd0a:	3718      	adds	r7, #24
   1bd0c:	46bd      	mov	sp, r7
   1bd0e:	bdb0      	pop	{r4, r5, r7, pc}
   1bd10:	00023108 	.word	0x00023108

0001bd14 <pin_mapper>:

/// \classmethod mapper([fun])
/// Get or set the pin mapper function.
STATIC mp_obj_t pin_mapper(size_t n_args, const mp_obj_t *args) {
   1bd14:	b480      	push	{r7}
   1bd16:	b083      	sub	sp, #12
   1bd18:	af00      	add	r7, sp, #0
   1bd1a:	6078      	str	r0, [r7, #4]
   1bd1c:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1bd1e:	687b      	ldr	r3, [r7, #4]
   1bd20:	2b01      	cmp	r3, #1
   1bd22:	d906      	bls.n	1bd32 <pin_mapper+0x1e>
        MP_STATE_PORT(pin_class_mapper) = args[1];
   1bd24:	683b      	ldr	r3, [r7, #0]
   1bd26:	685b      	ldr	r3, [r3, #4]
   1bd28:	4a06      	ldr	r2, [pc, #24]	; (1bd44 <pin_mapper+0x30>)
   1bd2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        return mp_const_none;
   1bd2e:	4b06      	ldr	r3, [pc, #24]	; (1bd48 <pin_mapper+0x34>)
   1bd30:	e002      	b.n	1bd38 <pin_mapper+0x24>
    }
    return MP_STATE_PORT(pin_class_mapper);
   1bd32:	4b04      	ldr	r3, [pc, #16]	; (1bd44 <pin_mapper+0x30>)
   1bd34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
   1bd38:	4618      	mov	r0, r3
   1bd3a:	370c      	adds	r7, #12
   1bd3c:	46bd      	mov	sp, r7
   1bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd42:	4770      	bx	lr
   1bd44:	200012f0 	.word	0x200012f0
   1bd48:	00023108 	.word	0x00023108

0001bd4c <pin_map_dict>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_mapper_fun_obj, 1, 2, pin_mapper);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_mapper_obj, MP_ROM_PTR(&pin_mapper_fun_obj));

/// \classmethod dict([dict])
/// Get or set the pin mapper dictionary.
STATIC mp_obj_t pin_map_dict(size_t n_args, const mp_obj_t *args) {
   1bd4c:	b480      	push	{r7}
   1bd4e:	b083      	sub	sp, #12
   1bd50:	af00      	add	r7, sp, #0
   1bd52:	6078      	str	r0, [r7, #4]
   1bd54:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1bd56:	687b      	ldr	r3, [r7, #4]
   1bd58:	2b01      	cmp	r3, #1
   1bd5a:	d906      	bls.n	1bd6a <pin_map_dict+0x1e>
        MP_STATE_PORT(pin_class_map_dict) = args[1];
   1bd5c:	683b      	ldr	r3, [r7, #0]
   1bd5e:	685b      	ldr	r3, [r3, #4]
   1bd60:	4a06      	ldr	r2, [pc, #24]	; (1bd7c <pin_map_dict+0x30>)
   1bd62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        return mp_const_none;
   1bd66:	4b06      	ldr	r3, [pc, #24]	; (1bd80 <pin_map_dict+0x34>)
   1bd68:	e002      	b.n	1bd70 <pin_map_dict+0x24>
    }
    return MP_STATE_PORT(pin_class_map_dict);
   1bd6a:	4b04      	ldr	r3, [pc, #16]	; (1bd7c <pin_map_dict+0x30>)
   1bd6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
   1bd70:	4618      	mov	r0, r3
   1bd72:	370c      	adds	r7, #12
   1bd74:	46bd      	mov	sp, r7
   1bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd7a:	4770      	bx	lr
   1bd7c:	200012f0 	.word	0x200012f0
   1bd80:	00023108 	.word	0x00023108

0001bd84 <pin_af_list>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_map_dict_fun_obj, 1, 2, pin_map_dict);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_map_dict_obj, MP_ROM_PTR(&pin_map_dict_fun_obj));

/// \classmethod af_list()
/// Returns an array of alternate functions available for this pin.
STATIC mp_obj_t pin_af_list(mp_obj_t self_in) {
   1bd84:	b580      	push	{r7, lr}
   1bd86:	b086      	sub	sp, #24
   1bd88:	af00      	add	r7, sp, #0
   1bd8a:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bd8c:	687b      	ldr	r3, [r7, #4]
   1bd8e:	60fb      	str	r3, [r7, #12]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1bd90:	2100      	movs	r1, #0
   1bd92:	2000      	movs	r0, #0
   1bd94:	f7f5 fc85 	bl	116a2 <mp_obj_new_list>
   1bd98:	60b8      	str	r0, [r7, #8]

    const pin_af_obj_t *af = self->af_list;
   1bd9a:	68fb      	ldr	r3, [r7, #12]
   1bd9c:	695b      	ldr	r3, [r3, #20]
   1bd9e:	617b      	str	r3, [r7, #20]
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1bda0:	2300      	movs	r3, #0
   1bda2:	613b      	str	r3, [r7, #16]
   1bda4:	e009      	b.n	1bdba <pin_af_list+0x36>
        mp_obj_list_append(result, MP_OBJ_FROM_PTR(af));
   1bda6:	6979      	ldr	r1, [r7, #20]
   1bda8:	68b8      	ldr	r0, [r7, #8]
   1bdaa:	f7f5 f80e 	bl	10dca <mp_obj_list_append>
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1bdae:	693b      	ldr	r3, [r7, #16]
   1bdb0:	3301      	adds	r3, #1
   1bdb2:	613b      	str	r3, [r7, #16]
   1bdb4:	697b      	ldr	r3, [r7, #20]
   1bdb6:	3310      	adds	r3, #16
   1bdb8:	617b      	str	r3, [r7, #20]
   1bdba:	68fb      	ldr	r3, [r7, #12]
   1bdbc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1bdc0:	461a      	mov	r2, r3
   1bdc2:	693b      	ldr	r3, [r7, #16]
   1bdc4:	429a      	cmp	r2, r3
   1bdc6:	d8ee      	bhi.n	1bda6 <pin_af_list+0x22>
    }
    return result;
   1bdc8:	68bb      	ldr	r3, [r7, #8]
}
   1bdca:	4618      	mov	r0, r3
   1bdcc:	3718      	adds	r7, #24
   1bdce:	46bd      	mov	sp, r7
   1bdd0:	bd80      	pop	{r7, pc}

0001bdd2 <pin_debug>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_af_list_obj, pin_af_list);

/// \classmethod debug([state])
/// Get or set the debugging state (`True` or `False` for on or off).
STATIC mp_obj_t pin_debug(size_t n_args, const mp_obj_t *args) {
   1bdd2:	b580      	push	{r7, lr}
   1bdd4:	b082      	sub	sp, #8
   1bdd6:	af00      	add	r7, sp, #0
   1bdd8:	6078      	str	r0, [r7, #4]
   1bdda:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1bddc:	687b      	ldr	r3, [r7, #4]
   1bdde:	2b01      	cmp	r3, #1
   1bde0:	d90b      	bls.n	1bdfa <pin_debug+0x28>
        pin_class_debug = mp_obj_is_true(args[1]);
   1bde2:	683b      	ldr	r3, [r7, #0]
   1bde4:	3304      	adds	r3, #4
   1bde6:	681b      	ldr	r3, [r3, #0]
   1bde8:	4618      	mov	r0, r3
   1bdea:	f7f1 fd3d 	bl	d868 <mp_obj_is_true>
   1bdee:	4603      	mov	r3, r0
   1bdf0:	461a      	mov	r2, r3
   1bdf2:	4b07      	ldr	r3, [pc, #28]	; (1be10 <pin_debug+0x3e>)
   1bdf4:	701a      	strb	r2, [r3, #0]
        return mp_const_none;
   1bdf6:	4b07      	ldr	r3, [pc, #28]	; (1be14 <pin_debug+0x42>)
   1bdf8:	e005      	b.n	1be06 <pin_debug+0x34>
    }
    return mp_obj_new_bool(pin_class_debug);
   1bdfa:	4b05      	ldr	r3, [pc, #20]	; (1be10 <pin_debug+0x3e>)
   1bdfc:	781b      	ldrb	r3, [r3, #0]
   1bdfe:	4618      	mov	r0, r3
   1be00:	f7ff fd3c 	bl	1b87c <mp_obj_new_bool>
   1be04:	4603      	mov	r3, r0
}
   1be06:	4618      	mov	r0, r3
   1be08:	3708      	adds	r7, #8
   1be0a:	46bd      	mov	sp, r7
   1be0c:	bd80      	pop	{r7, pc}
   1be0e:	bf00      	nop
   1be10:	200012c4 	.word	0x200012c4
   1be14:	00023108 	.word	0x00023108

0001be18 <pin_obj_init_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_debug_fun_obj, 1, 2, pin_debug);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_debug_obj, MP_ROM_PTR(&pin_debug_fun_obj));

// init(dir, pull=None, af=-1, *, value, alt)
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *self, size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1be18:	b5b0      	push	{r4, r5, r7, lr}
   1be1a:	b090      	sub	sp, #64	; 0x40
   1be1c:	af02      	add	r7, sp, #8
   1be1e:	60f8      	str	r0, [r7, #12]
   1be20:	60b9      	str	r1, [r7, #8]
   1be22:	607a      	str	r2, [r7, #4]
   1be24:	603b      	str	r3, [r7, #0]
        { MP_QSTR_alt, MP_ARG_KW_ONLY | MP_ARG_INT, {.u_int = -1}},
    };

    // parse args
    mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
    mp_arg_parse_all(n_args, pos_args, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   1be26:	f107 0310 	add.w	r3, r7, #16
   1be2a:	9301      	str	r3, [sp, #4]
   1be2c:	4b59      	ldr	r3, [pc, #356]	; (1bf94 <pin_obj_init_helper+0x17c>)
   1be2e:	9300      	str	r3, [sp, #0]
   1be30:	2306      	movs	r3, #6
   1be32:	683a      	ldr	r2, [r7, #0]
   1be34:	6879      	ldr	r1, [r7, #4]
   1be36:	68b8      	ldr	r0, [r7, #8]
   1be38:	f7f1 f876 	bl	cf28 <mp_arg_parse_all>

    // get io dir
    uint32_t dir = args[0].u_int;
   1be3c:	693b      	ldr	r3, [r7, #16]
   1be3e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (!IS_GPIO_DIR(dir)) {
   1be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be42:	2b00      	cmp	r3, #0
   1be44:	d00e      	beq.n	1be64 <pin_obj_init_helper+0x4c>
   1be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be48:	2b01      	cmp	r3, #1
   1be4a:	d00b      	beq.n	1be64 <pin_obj_init_helper+0x4c>
   1be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be4e:	2b02      	cmp	r3, #2
   1be50:	d008      	beq.n	1be64 <pin_obj_init_helper+0x4c>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin direction: %d", dir));
   1be52:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1be54:	4950      	ldr	r1, [pc, #320]	; (1bf98 <pin_obj_init_helper+0x180>)
   1be56:	4851      	ldr	r0, [pc, #324]	; (1bf9c <pin_obj_init_helper+0x184>)
   1be58:	f7f3 fb10 	bl	f47c <mp_obj_new_exception_msg_varg>
   1be5c:	4603      	mov	r3, r0
   1be5e:	4618      	mov	r0, r3
   1be60:	f7e4 fa3e 	bl	2e0 <nlr_jump>
    }

    // get pull dir
    uint type = GPIO_PIN_TYPE_STD;
   1be64:	2308      	movs	r3, #8
   1be66:	637b      	str	r3, [r7, #52]	; 0x34
    if (args[1].u_obj != mp_const_none) {
   1be68:	697b      	ldr	r3, [r7, #20]
   1be6a:	4a4d      	ldr	r2, [pc, #308]	; (1bfa0 <pin_obj_init_helper+0x188>)
   1be6c:	4293      	cmp	r3, r2
   1be6e:	d005      	beq.n	1be7c <pin_obj_init_helper+0x64>
        type = mp_obj_get_int(args[1].u_obj);
   1be70:	697b      	ldr	r3, [r7, #20]
   1be72:	4618      	mov	r0, r3
   1be74:	f7f1 fdf8 	bl	da68 <mp_obj_get_int>
   1be78:	4603      	mov	r3, r0
   1be7a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (!IS_GPIO_TYPE(type)) {
   1be7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be7e:	2b08      	cmp	r3, #8
   1be80:	d01c      	beq.n	1bebc <pin_obj_init_helper+0xa4>
   1be82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be84:	2b0a      	cmp	r3, #10
   1be86:	d019      	beq.n	1bebc <pin_obj_init_helper+0xa4>
   1be88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be8a:	2b0c      	cmp	r3, #12
   1be8c:	d016      	beq.n	1bebc <pin_obj_init_helper+0xa4>
   1be8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be90:	2b09      	cmp	r3, #9
   1be92:	d013      	beq.n	1bebc <pin_obj_init_helper+0xa4>
   1be94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be96:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
   1be9a:	d00f      	beq.n	1bebc <pin_obj_init_helper+0xa4>
   1be9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be9e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
   1bea2:	d00b      	beq.n	1bebc <pin_obj_init_helper+0xa4>
   1bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bea6:	2b00      	cmp	r3, #0
   1bea8:	d008      	beq.n	1bebc <pin_obj_init_helper+0xa4>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin type: %d", type));
   1beaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1beac:	493d      	ldr	r1, [pc, #244]	; (1bfa4 <pin_obj_init_helper+0x18c>)
   1beae:	483b      	ldr	r0, [pc, #236]	; (1bf9c <pin_obj_init_helper+0x184>)
   1beb0:	f7f3 fae4 	bl	f47c <mp_obj_new_exception_msg_varg>
   1beb4:	4603      	mov	r3, r0
   1beb6:	4618      	mov	r0, r3
   1beb8:	f7e4 fa12 	bl	2e0 <nlr_jump>
    }

    uint drive = GPIO_STRENGTH_2MA;
   1bebc:	2301      	movs	r3, #1
   1bebe:	633b      	str	r3, [r7, #48]	; 0x30
    if (args[2].u_obj != MP_OBJ_NULL) {
   1bec0:	69bb      	ldr	r3, [r7, #24]
   1bec2:	2b00      	cmp	r3, #0
   1bec4:	d005      	beq.n	1bed2 <pin_obj_init_helper+0xba>
        drive = mp_obj_get_int(args[2].u_obj);
   1bec6:	69bb      	ldr	r3, [r7, #24]
   1bec8:	4618      	mov	r0, r3
   1beca:	f7f1 fdcd 	bl	da68 <mp_obj_get_int>
   1bece:	4603      	mov	r3, r0
   1bed0:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (!IS_GPIO_STRENGTH(drive)) {
   1bed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bed4:	2b01      	cmp	r3, #1
   1bed6:	d00e      	beq.n	1bef6 <pin_obj_init_helper+0xde>
   1bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1beda:	2b02      	cmp	r3, #2
   1bedc:	d00b      	beq.n	1bef6 <pin_obj_init_helper+0xde>
   1bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bee0:	2b66      	cmp	r3, #102	; 0x66
   1bee2:	d008      	beq.n	1bef6 <pin_obj_init_helper+0xde>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin drive: %d", drive));
   1bee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1bee6:	4930      	ldr	r1, [pc, #192]	; (1bfa8 <pin_obj_init_helper+0x190>)
   1bee8:	482c      	ldr	r0, [pc, #176]	; (1bf9c <pin_obj_init_helper+0x184>)
   1beea:	f7f3 fac7 	bl	f47c <mp_obj_new_exception_msg_varg>
   1beee:	4603      	mov	r3, r0
   1bef0:	4618      	mov	r0, r3
   1bef2:	f7e4 f9f5 	bl	2e0 <nlr_jump>
    }

    // get af (alternate function); alt-arg overrides af-arg
    mp_int_t af = args[5].u_int;
   1bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (af == -1) {
   1befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1befc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bf00:	d101      	bne.n	1bf06 <pin_obj_init_helper+0xee>
        af = args[3].u_int;
   1bf02:	69fb      	ldr	r3, [r7, #28]
   1bf04:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if ((dir == GPIO_DIR_MODE_HW) && !IS_GPIO_AF(af)) {
   1bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bf08:	2b02      	cmp	r3, #2
   1bf0a:	d119      	bne.n	1bf40 <pin_obj_init_helper+0x128>
   1bf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bf0e:	2b01      	cmp	r3, #1
   1bf10:	dd04      	ble.n	1bf1c <pin_obj_init_helper+0x104>
   1bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bf14:	2b0c      	cmp	r3, #12
   1bf16:	dc01      	bgt.n	1bf1c <pin_obj_init_helper+0x104>
   1bf18:	2301      	movs	r3, #1
   1bf1a:	e000      	b.n	1bf1e <pin_obj_init_helper+0x106>
   1bf1c:	2300      	movs	r3, #0
   1bf1e:	f003 0301 	and.w	r3, r3, #1
   1bf22:	b2db      	uxtb	r3, r3
   1bf24:	f083 0301 	eor.w	r3, r3, #1
   1bf28:	b2db      	uxtb	r3, r3
   1bf2a:	2b00      	cmp	r3, #0
   1bf2c:	d008      	beq.n	1bf40 <pin_obj_init_helper+0x128>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin af: %d", af));
   1bf2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bf30:	491e      	ldr	r1, [pc, #120]	; (1bfac <pin_obj_init_helper+0x194>)
   1bf32:	481a      	ldr	r0, [pc, #104]	; (1bf9c <pin_obj_init_helper+0x184>)
   1bf34:	f7f3 faa2 	bl	f47c <mp_obj_new_exception_msg_varg>
   1bf38:	4603      	mov	r3, r0
   1bf3a:	4618      	mov	r0, r3
   1bf3c:	f7e4 f9d0 	bl	2e0 <nlr_jump>

    // if given, set the pin value before initialising to prevent glitches
//    if (args[4].u_obj != MP_OBJ_NULL) {
//        mp_hal_pin_write(self, mp_obj_is_true(args[3].u_obj));
//    }
    mp_hal_pin_config(self, dir, type, drive);
   1bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bf42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1bf44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1bf46:	68f8      	ldr	r0, [r7, #12]
   1bf48:	f7ff fc30 	bl	1b7ac <mp_hal_pin_config>
    mp_hal_pin_set_af(self, af);
   1bf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bf4e:	b2db      	uxtb	r3, r3
   1bf50:	4619      	mov	r1, r3
   1bf52:	68f8      	ldr	r0, [r7, #12]
   1bf54:	f7ff fc4c 	bl	1b7f0 <mp_hal_pin_set_af>

    if (args[4].u_obj != MP_OBJ_NULL) {
   1bf58:	6a3b      	ldr	r3, [r7, #32]
   1bf5a:	2b00      	cmp	r3, #0
   1bf5c:	d015      	beq.n	1bf8a <pin_obj_init_helper+0x172>
        mp_hal_pin_write(self, mp_obj_is_true(args[4].u_obj));
   1bf5e:	68fb      	ldr	r3, [r7, #12]
   1bf60:	689c      	ldr	r4, [r3, #8]
   1bf62:	68fb      	ldr	r3, [r7, #12]
   1bf64:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
   1bf68:	6a3b      	ldr	r3, [r7, #32]
   1bf6a:	4618      	mov	r0, r3
   1bf6c:	f7f1 fc7c 	bl	d868 <mp_obj_is_true>
   1bf70:	4603      	mov	r3, r0
   1bf72:	2b00      	cmp	r3, #0
   1bf74:	d003      	beq.n	1bf7e <pin_obj_init_helper+0x166>
   1bf76:	68fb      	ldr	r3, [r7, #12]
   1bf78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bf7c:	e000      	b.n	1bf80 <pin_obj_init_helper+0x168>
   1bf7e:	2300      	movs	r3, #0
   1bf80:	461a      	mov	r2, r3
   1bf82:	4629      	mov	r1, r5
   1bf84:	4620      	mov	r0, r4
   1bf86:	f001 fd42 	bl	1da0e <GPIOPinWrite>
    }

    return mp_const_none;
   1bf8a:	4b05      	ldr	r3, [pc, #20]	; (1bfa0 <pin_obj_init_helper+0x188>)
}
   1bf8c:	4618      	mov	r0, r3
   1bf8e:	3738      	adds	r7, #56	; 0x38
   1bf90:	46bd      	mov	sp, r7
   1bf92:	bdb0      	pop	{r4, r5, r7, pc}
   1bf94:	00024c9c 	.word	0x00024c9c
   1bf98:	00024a5c 	.word	0x00024a5c
   1bf9c:	000223e4 	.word	0x000223e4
   1bfa0:	00023108 	.word	0x00023108
   1bfa4:	00024a78 	.word	0x00024a78
   1bfa8:	00024a90 	.word	0x00024a90
   1bfac:	00024aa8 	.word	0x00024aa8

0001bfb0 <pin_obj_init>:

STATIC mp_obj_t pin_obj_init(size_t n_args, const mp_obj_t *args, mp_map_t *kw_args) {
   1bfb0:	b580      	push	{r7, lr}
   1bfb2:	b084      	sub	sp, #16
   1bfb4:	af00      	add	r7, sp, #0
   1bfb6:	60f8      	str	r0, [r7, #12]
   1bfb8:	60b9      	str	r1, [r7, #8]
   1bfba:	607a      	str	r2, [r7, #4]
    return pin_obj_init_helper(MP_OBJ_TO_PTR(args[0]), n_args - 1, args + 1, kw_args);
   1bfbc:	68bb      	ldr	r3, [r7, #8]
   1bfbe:	6818      	ldr	r0, [r3, #0]
   1bfc0:	68fb      	ldr	r3, [r7, #12]
   1bfc2:	1e59      	subs	r1, r3, #1
   1bfc4:	68bb      	ldr	r3, [r7, #8]
   1bfc6:	1d1a      	adds	r2, r3, #4
   1bfc8:	687b      	ldr	r3, [r7, #4]
   1bfca:	f7ff ff25 	bl	1be18 <pin_obj_init_helper>
   1bfce:	4603      	mov	r3, r0
}
   1bfd0:	4618      	mov	r0, r3
   1bfd2:	3710      	adds	r7, #16
   1bfd4:	46bd      	mov	sp, r7
   1bfd6:	bd80      	pop	{r7, pc}

0001bfd8 <pin_value>:
///
///   - With no argument, return 0 or 1 depending on the logic level of the pin.
///   - With `value` given, set the logic level of the pin.  `value` can be
///   anything that converts to a boolean.  If it converts to `True`, the pin
///   is set high, otherwise it is set low.
STATIC mp_obj_t pin_value(size_t n_args, const mp_obj_t *args) {
   1bfd8:	b580      	push	{r7, lr}
   1bfda:	b082      	sub	sp, #8
   1bfdc:	af00      	add	r7, sp, #0
   1bfde:	6078      	str	r0, [r7, #4]
   1bfe0:	6039      	str	r1, [r7, #0]
    return pin_call(args[0], n_args - 1, 0, args + 1);
   1bfe2:	683b      	ldr	r3, [r7, #0]
   1bfe4:	6818      	ldr	r0, [r3, #0]
   1bfe6:	687b      	ldr	r3, [r7, #4]
   1bfe8:	1e59      	subs	r1, r3, #1
   1bfea:	683b      	ldr	r3, [r7, #0]
   1bfec:	3304      	adds	r3, #4
   1bfee:	2200      	movs	r2, #0
   1bff0:	f7ff fe50 	bl	1bc94 <pin_call>
   1bff4:	4603      	mov	r3, r0
}
   1bff6:	4618      	mov	r0, r3
   1bff8:	3708      	adds	r7, #8
   1bffa:	46bd      	mov	sp, r7
   1bffc:	bd80      	pop	{r7, pc}

0001bffe <pin_off>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_value_obj, 1, 2, pin_value);

STATIC mp_obj_t pin_off(mp_obj_t self_in) {
   1bffe:	b580      	push	{r7, lr}
   1c000:	b084      	sub	sp, #16
   1c002:	af00      	add	r7, sp, #0
   1c004:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c006:	687b      	ldr	r3, [r7, #4]
   1c008:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_low(self);
   1c00a:	68fb      	ldr	r3, [r7, #12]
   1c00c:	6898      	ldr	r0, [r3, #8]
   1c00e:	68fb      	ldr	r3, [r7, #12]
   1c010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c014:	2200      	movs	r2, #0
   1c016:	4619      	mov	r1, r3
   1c018:	f001 fcf9 	bl	1da0e <GPIOPinWrite>
    return mp_const_none;
   1c01c:	4b02      	ldr	r3, [pc, #8]	; (1c028 <pin_off+0x2a>)
}
   1c01e:	4618      	mov	r0, r3
   1c020:	3710      	adds	r7, #16
   1c022:	46bd      	mov	sp, r7
   1c024:	bd80      	pop	{r7, pc}
   1c026:	bf00      	nop
   1c028:	00023108 	.word	0x00023108

0001c02c <pin_on>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_off_obj, pin_off);

STATIC mp_obj_t pin_on(mp_obj_t self_in) {
   1c02c:	b580      	push	{r7, lr}
   1c02e:	b084      	sub	sp, #16
   1c030:	af00      	add	r7, sp, #0
   1c032:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c034:	687b      	ldr	r3, [r7, #4]
   1c036:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_high(self);
   1c038:	68fb      	ldr	r3, [r7, #12]
   1c03a:	6898      	ldr	r0, [r3, #8]
   1c03c:	68fb      	ldr	r3, [r7, #12]
   1c03e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1c042:	68fb      	ldr	r3, [r7, #12]
   1c044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c048:	461a      	mov	r2, r3
   1c04a:	f001 fce0 	bl	1da0e <GPIOPinWrite>
    return mp_const_none;
   1c04e:	4b02      	ldr	r3, [pc, #8]	; (1c058 <pin_on+0x2c>)
}
   1c050:	4618      	mov	r0, r3
   1c052:	3710      	adds	r7, #16
   1c054:	46bd      	mov	sp, r7
   1c056:	bd80      	pop	{r7, pc}
   1c058:	00023108 	.word	0x00023108

0001c05c <pin_irq>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_on_obj, pin_on);

// pin.irq(handler=None, trigger=IRQ_RISING, hard=False)
STATIC mp_obj_t pin_irq(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1c05c:	b480      	push	{r7}
   1c05e:	b085      	sub	sp, #20
   1c060:	af00      	add	r7, sp, #0
   1c062:	60f8      	str	r0, [r7, #12]
   1c064:	60b9      	str	r1, [r7, #8]
   1c066:	607a      	str	r2, [r7, #4]
//        extint_register_pin(self, args[ARG_trigger].u_int,
//            args[ARG_hard].u_bool, args[ARG_handler].u_obj);
//    }
//
//    // TODO should return an IRQ object
    return mp_const_none;
   1c068:	4b03      	ldr	r3, [pc, #12]	; (1c078 <pin_irq+0x1c>)
}
   1c06a:	4618      	mov	r0, r3
   1c06c:	3714      	adds	r7, #20
   1c06e:	46bd      	mov	sp, r7
   1c070:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c074:	4770      	bx	lr
   1c076:	bf00      	nop
   1c078:	00023108 	.word	0x00023108

0001c07c <pin_name>:
STATIC MP_DEFINE_CONST_FUN_OBJ_KW(pin_irq_obj, 1, pin_irq);

/// \method name()
/// Get the pin name.
STATIC mp_obj_t pin_name(mp_obj_t self_in) {
   1c07c:	b480      	push	{r7}
   1c07e:	b085      	sub	sp, #20
   1c080:	af00      	add	r7, sp, #0
   1c082:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c084:	687b      	ldr	r3, [r7, #4]
   1c086:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_QSTR(self->name);
   1c088:	68fb      	ldr	r3, [r7, #12]
   1c08a:	685b      	ldr	r3, [r3, #4]
   1c08c:	009b      	lsls	r3, r3, #2
   1c08e:	f043 0302 	orr.w	r3, r3, #2
}
   1c092:	4618      	mov	r0, r3
   1c094:	3714      	adds	r7, #20
   1c096:	46bd      	mov	sp, r7
   1c098:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c09c:	4770      	bx	lr

0001c09e <pin_names>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_name_obj, pin_name);

/// \method names()
/// Returns the cpu and board names for this pin.
STATIC mp_obj_t pin_names(mp_obj_t self_in) {
   1c09e:	b580      	push	{r7, lr}
   1c0a0:	b088      	sub	sp, #32
   1c0a2:	af00      	add	r7, sp, #0
   1c0a4:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c0a6:	687b      	ldr	r3, [r7, #4]
   1c0a8:	617b      	str	r3, [r7, #20]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1c0aa:	2100      	movs	r1, #0
   1c0ac:	2000      	movs	r0, #0
   1c0ae:	f7f5 faf8 	bl	116a2 <mp_obj_new_list>
   1c0b2:	6138      	str	r0, [r7, #16]
    mp_obj_list_append(result, MP_OBJ_NEW_QSTR(self->name));
   1c0b4:	697b      	ldr	r3, [r7, #20]
   1c0b6:	685b      	ldr	r3, [r3, #4]
   1c0b8:	009b      	lsls	r3, r3, #2
   1c0ba:	f043 0302 	orr.w	r3, r3, #2
   1c0be:	4619      	mov	r1, r3
   1c0c0:	6938      	ldr	r0, [r7, #16]
   1c0c2:	f7f4 fe82 	bl	10dca <mp_obj_list_append>

    const mp_map_t *map = &pin_board_pins_locals_dict.map;
   1c0c6:	4b13      	ldr	r3, [pc, #76]	; (1c114 <pin_names+0x76>)
   1c0c8:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = map->table;
   1c0ca:	68fb      	ldr	r3, [r7, #12]
   1c0cc:	689b      	ldr	r3, [r3, #8]
   1c0ce:	61fb      	str	r3, [r7, #28]

    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1c0d0:	2300      	movs	r3, #0
   1c0d2:	61bb      	str	r3, [r7, #24]
   1c0d4:	e010      	b.n	1c0f8 <pin_names+0x5a>
        if (elem->value == self_in) {
   1c0d6:	69fb      	ldr	r3, [r7, #28]
   1c0d8:	685a      	ldr	r2, [r3, #4]
   1c0da:	687b      	ldr	r3, [r7, #4]
   1c0dc:	429a      	cmp	r2, r3
   1c0de:	d105      	bne.n	1c0ec <pin_names+0x4e>
            mp_obj_list_append(result, elem->key);
   1c0e0:	69fb      	ldr	r3, [r7, #28]
   1c0e2:	681b      	ldr	r3, [r3, #0]
   1c0e4:	4619      	mov	r1, r3
   1c0e6:	6938      	ldr	r0, [r7, #16]
   1c0e8:	f7f4 fe6f 	bl	10dca <mp_obj_list_append>
    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1c0ec:	69bb      	ldr	r3, [r7, #24]
   1c0ee:	3301      	adds	r3, #1
   1c0f0:	61bb      	str	r3, [r7, #24]
   1c0f2:	69fb      	ldr	r3, [r7, #28]
   1c0f4:	3308      	adds	r3, #8
   1c0f6:	61fb      	str	r3, [r7, #28]
   1c0f8:	68fb      	ldr	r3, [r7, #12]
   1c0fa:	681b      	ldr	r3, [r3, #0]
   1c0fc:	f3c3 03dc 	ubfx	r3, r3, #3, #29
   1c100:	461a      	mov	r2, r3
   1c102:	69bb      	ldr	r3, [r7, #24]
   1c104:	429a      	cmp	r2, r3
   1c106:	d8e6      	bhi.n	1c0d6 <pin_names+0x38>
        }
    }
    return result;
   1c108:	693b      	ldr	r3, [r7, #16]
}
   1c10a:	4618      	mov	r0, r3
   1c10c:	3720      	adds	r7, #32
   1c10e:	46bd      	mov	sp, r7
   1c110:	bd80      	pop	{r7, pc}
   1c112:	bf00      	nop
   1c114:	0002562c 	.word	0x0002562c

0001c118 <pin_port>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_names_obj, pin_names);

/// \method port()
/// Get the pin port.
STATIC mp_obj_t pin_port(mp_obj_t self_in) {
   1c118:	b480      	push	{r7}
   1c11a:	b085      	sub	sp, #20
   1c11c:	af00      	add	r7, sp, #0
   1c11e:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c120:	687b      	ldr	r3, [r7, #4]
   1c122:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->port);
   1c124:	68fb      	ldr	r3, [r7, #12]
   1c126:	689b      	ldr	r3, [r3, #8]
   1c128:	005b      	lsls	r3, r3, #1
   1c12a:	f043 0301 	orr.w	r3, r3, #1
}
   1c12e:	4618      	mov	r0, r3
   1c130:	3714      	adds	r7, #20
   1c132:	46bd      	mov	sp, r7
   1c134:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c138:	4770      	bx	lr

0001c13a <pin_pin>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_port_obj, pin_port);

/// \method pin()
/// Get the pin number.
STATIC mp_obj_t pin_pin(mp_obj_t self_in) {
   1c13a:	b480      	push	{r7}
   1c13c:	b085      	sub	sp, #20
   1c13e:	af00      	add	r7, sp, #0
   1c140:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c142:	687b      	ldr	r3, [r7, #4]
   1c144:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->pin_num);
   1c146:	68fb      	ldr	r3, [r7, #12]
   1c148:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1c14c:	005b      	lsls	r3, r3, #1
   1c14e:	f043 0301 	orr.w	r3, r3, #1
}
   1c152:	4618      	mov	r0, r3
   1c154:	3714      	adds	r7, #20
   1c156:	46bd      	mov	sp, r7
   1c158:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c15c:	4770      	bx	lr

0001c15e <pin_gpio>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_pin_obj, pin_pin);

/// \method gpio()
/// Returns the base address of the GPIO block associated with this pin.
STATIC mp_obj_t pin_gpio(mp_obj_t self_in) {
   1c15e:	b480      	push	{r7}
   1c160:	b085      	sub	sp, #20
   1c162:	af00      	add	r7, sp, #0
   1c164:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c166:	687b      	ldr	r3, [r7, #4]
   1c168:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT((intptr_t)self->port);
   1c16a:	68fb      	ldr	r3, [r7, #12]
   1c16c:	689b      	ldr	r3, [r3, #8]
   1c16e:	005b      	lsls	r3, r3, #1
   1c170:	f043 0301 	orr.w	r3, r3, #1
}
   1c174:	4618      	mov	r0, r3
   1c176:	3714      	adds	r7, #20
   1c178:	46bd      	mov	sp, r7
   1c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c17e:	4770      	bx	lr

0001c180 <pin_dir>:

/// \method dir()
/// Returns the currently configured mode of the pin. The integer returned
/// will match one of the allowed constants for the mode argument to the init
/// function.
STATIC mp_obj_t pin_dir(mp_obj_t self_in) {
   1c180:	b580      	push	{r7, lr}
   1c182:	b082      	sub	sp, #8
   1c184:	af00      	add	r7, sp, #0
   1c186:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_dir((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1c188:	687b      	ldr	r3, [r7, #4]
   1c18a:	689a      	ldr	r2, [r3, #8]
   1c18c:	687b      	ldr	r3, [r7, #4]
   1c18e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c192:	4619      	mov	r1, r3
   1c194:	4610      	mov	r0, r2
   1c196:	f001 fb3a 	bl	1d80e <GPIODirModeGet>
   1c19a:	4603      	mov	r3, r0
   1c19c:	005b      	lsls	r3, r3, #1
   1c19e:	f043 0301 	orr.w	r3, r3, #1
}
   1c1a2:	4618      	mov	r0, r3
   1c1a4:	3708      	adds	r7, #8
   1c1a6:	46bd      	mov	sp, r7
   1c1a8:	bd80      	pop	{r7, pc}

0001c1aa <pin_type>:

/// \method pull()
/// Returns the currently configured pull of the pin. The integer returned
/// will match one of the allowed constants for the pull argument to the init
/// function.
STATIC mp_obj_t pin_type(mp_obj_t self_in) {
   1c1aa:	b580      	push	{r7, lr}
   1c1ac:	b084      	sub	sp, #16
   1c1ae:	af00      	add	r7, sp, #0
   1c1b0:	6078      	str	r0, [r7, #4]
    uint32_t type;
    pin_obj_t* self = MP_OBJ_TO_PTR(self_in);
   1c1b2:	687b      	ldr	r3, [r7, #4]
   1c1b4:	60fb      	str	r3, [r7, #12]
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, NULL, &type);
   1c1b6:	68fb      	ldr	r3, [r7, #12]
   1c1b8:	6898      	ldr	r0, [r3, #8]
   1c1ba:	68fb      	ldr	r3, [r7, #12]
   1c1bc:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1c1c0:	f107 0308 	add.w	r3, r7, #8
   1c1c4:	2200      	movs	r2, #0
   1c1c6:	f001 fbb7 	bl	1d938 <GPIOPadConfigGet>

    return MP_OBJ_NEW_SMALL_INT(type);
   1c1ca:	68bb      	ldr	r3, [r7, #8]
   1c1cc:	005b      	lsls	r3, r3, #1
   1c1ce:	f043 0301 	orr.w	r3, r3, #1
}
   1c1d2:	4618      	mov	r0, r3
   1c1d4:	3710      	adds	r7, #16
   1c1d6:	46bd      	mov	sp, r7
   1c1d8:	bd80      	pop	{r7, pc}

0001c1da <pin_af>:

/// \method af()
/// Returns the currently configured alternate-function of the pin. The
/// integer returned will match one of the allowed constants for the af
/// argument to the init function.
STATIC mp_obj_t pin_af(mp_obj_t self_in) {
   1c1da:	b480      	push	{r7}
   1c1dc:	b083      	sub	sp, #12
   1c1de:	af00      	add	r7, sp, #0
   1c1e0:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_af((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1c1e2:	687b      	ldr	r3, [r7, #4]
   1c1e4:	691b      	ldr	r3, [r3, #16]
   1c1e6:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1c1ea:	687b      	ldr	r3, [r7, #4]
   1c1ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1c1f0:	009b      	lsls	r3, r3, #2
   1c1f2:	fa22 f303 	lsr.w	r3, r2, r3
   1c1f6:	005b      	lsls	r3, r3, #1
   1c1f8:	f003 031e 	and.w	r3, r3, #30
   1c1fc:	f043 0301 	orr.w	r3, r3, #1
}
   1c200:	4618      	mov	r0, r3
   1c202:	370c      	adds	r7, #12
   1c204:	46bd      	mov	sp, r7
   1c206:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c20a:	4770      	bx	lr

0001c20c <pin_named_pins_obj_print>:
#include "py/mphal.h"
#include "pin.h"



STATIC void pin_named_pins_obj_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1c20c:	b580      	push	{r7, lr}
   1c20e:	b086      	sub	sp, #24
   1c210:	af00      	add	r7, sp, #0
   1c212:	60f8      	str	r0, [r7, #12]
   1c214:	60b9      	str	r1, [r7, #8]
   1c216:	607a      	str	r2, [r7, #4]
    pin_named_pins_obj_t *self = self_in;
   1c218:	68bb      	ldr	r3, [r7, #8]
   1c21a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<Pin.%q>", self->name);
   1c21c:	697b      	ldr	r3, [r7, #20]
   1c21e:	685b      	ldr	r3, [r3, #4]
   1c220:	461a      	mov	r2, r3
   1c222:	4904      	ldr	r1, [pc, #16]	; (1c234 <pin_named_pins_obj_print+0x28>)
   1c224:	68f8      	ldr	r0, [r7, #12]
   1c226:	f7e5 fe5f 	bl	1ee8 <mp_printf>
}
   1c22a:	bf00      	nop
   1c22c:	3718      	adds	r7, #24
   1c22e:	46bd      	mov	sp, r7
   1c230:	bd80      	pop	{r7, pc}
   1c232:	bf00      	nop
   1c234:	00024ccc 	.word	0x00024ccc

0001c238 <pin_find_named_pin>:
    .name = MP_QSTR_board,
    .print = pin_named_pins_obj_print,
    .locals_dict = (mp_obj_t)&pin_board_pins_locals_dict,
};

const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name) {
   1c238:	b580      	push	{r7, lr}
   1c23a:	b084      	sub	sp, #16
   1c23c:	af00      	add	r7, sp, #0
   1c23e:	6078      	str	r0, [r7, #4]
   1c240:	6039      	str	r1, [r7, #0]
    const mp_map_t *named_map = &named_pins->map;
   1c242:	687b      	ldr	r3, [r7, #4]
   1c244:	3304      	adds	r3, #4
   1c246:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *named_elem = mp_map_lookup((mp_map_t*)named_map, name, MP_MAP_LOOKUP);
   1c248:	2200      	movs	r2, #0
   1c24a:	6839      	ldr	r1, [r7, #0]
   1c24c:	68f8      	ldr	r0, [r7, #12]
   1c24e:	f7f1 f885 	bl	d35c <mp_map_lookup>
   1c252:	60b8      	str	r0, [r7, #8]
    if (named_elem != NULL && named_elem->value != MP_OBJ_NULL) {
   1c254:	68bb      	ldr	r3, [r7, #8]
   1c256:	2b00      	cmp	r3, #0
   1c258:	d006      	beq.n	1c268 <pin_find_named_pin+0x30>
   1c25a:	68bb      	ldr	r3, [r7, #8]
   1c25c:	685b      	ldr	r3, [r3, #4]
   1c25e:	2b00      	cmp	r3, #0
   1c260:	d002      	beq.n	1c268 <pin_find_named_pin+0x30>
        return MP_OBJ_TO_PTR(named_elem->value);
   1c262:	68bb      	ldr	r3, [r7, #8]
   1c264:	685b      	ldr	r3, [r3, #4]
   1c266:	e000      	b.n	1c26a <pin_find_named_pin+0x32>
    }
    return NULL;
   1c268:	2300      	movs	r3, #0
}
   1c26a:	4618      	mov	r0, r3
   1c26c:	3710      	adds	r7, #16
   1c26e:	46bd      	mov	sp, r7
   1c270:	bd80      	pop	{r7, pc}

0001c272 <pin_find_af>:

const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn, uint8_t unit) {
   1c272:	b480      	push	{r7}
   1c274:	b085      	sub	sp, #20
   1c276:	af00      	add	r7, sp, #0
   1c278:	6078      	str	r0, [r7, #4]
   1c27a:	460b      	mov	r3, r1
   1c27c:	70fb      	strb	r3, [r7, #3]
   1c27e:	4613      	mov	r3, r2
   1c280:	70bb      	strb	r3, [r7, #2]
    const pin_af_obj_t *af = pin->af_list;
   1c282:	687b      	ldr	r3, [r7, #4]
   1c284:	695b      	ldr	r3, [r3, #20]
   1c286:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c288:	2300      	movs	r3, #0
   1c28a:	60bb      	str	r3, [r7, #8]
   1c28c:	e011      	b.n	1c2b2 <pin_find_af+0x40>
        if (af->fn == fn && af->unit == unit) {
   1c28e:	68fb      	ldr	r3, [r7, #12]
   1c290:	795b      	ldrb	r3, [r3, #5]
   1c292:	78fa      	ldrb	r2, [r7, #3]
   1c294:	429a      	cmp	r2, r3
   1c296:	d106      	bne.n	1c2a6 <pin_find_af+0x34>
   1c298:	68fb      	ldr	r3, [r7, #12]
   1c29a:	799b      	ldrb	r3, [r3, #6]
   1c29c:	78ba      	ldrb	r2, [r7, #2]
   1c29e:	429a      	cmp	r2, r3
   1c2a0:	d101      	bne.n	1c2a6 <pin_find_af+0x34>
            return af;
   1c2a2:	68fb      	ldr	r3, [r7, #12]
   1c2a4:	e00d      	b.n	1c2c2 <pin_find_af+0x50>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c2a6:	68bb      	ldr	r3, [r7, #8]
   1c2a8:	3301      	adds	r3, #1
   1c2aa:	60bb      	str	r3, [r7, #8]
   1c2ac:	68fb      	ldr	r3, [r7, #12]
   1c2ae:	3310      	adds	r3, #16
   1c2b0:	60fb      	str	r3, [r7, #12]
   1c2b2:	687b      	ldr	r3, [r7, #4]
   1c2b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1c2b8:	461a      	mov	r2, r3
   1c2ba:	68bb      	ldr	r3, [r7, #8]
   1c2bc:	429a      	cmp	r2, r3
   1c2be:	d8e6      	bhi.n	1c28e <pin_find_af+0x1c>
        }
    }
    return NULL;
   1c2c0:	2300      	movs	r3, #0
}
   1c2c2:	4618      	mov	r0, r3
   1c2c4:	3714      	adds	r7, #20
   1c2c6:	46bd      	mov	sp, r7
   1c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c2cc:	4770      	bx	lr

0001c2ce <pin_find_af_by_index>:

const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx) {
   1c2ce:	b480      	push	{r7}
   1c2d0:	b085      	sub	sp, #20
   1c2d2:	af00      	add	r7, sp, #0
   1c2d4:	6078      	str	r0, [r7, #4]
   1c2d6:	6039      	str	r1, [r7, #0]
    const pin_af_obj_t *af = pin->af_list;
   1c2d8:	687b      	ldr	r3, [r7, #4]
   1c2da:	695b      	ldr	r3, [r3, #20]
   1c2dc:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c2de:	2300      	movs	r3, #0
   1c2e0:	60bb      	str	r3, [r7, #8]
   1c2e2:	e00e      	b.n	1c302 <pin_find_af_by_index+0x34>
        if (af->idx == af_idx) {
   1c2e4:	68fb      	ldr	r3, [r7, #12]
   1c2e6:	f993 3004 	ldrsb.w	r3, [r3, #4]
   1c2ea:	461a      	mov	r2, r3
   1c2ec:	683b      	ldr	r3, [r7, #0]
   1c2ee:	429a      	cmp	r2, r3
   1c2f0:	d101      	bne.n	1c2f6 <pin_find_af_by_index+0x28>
            return af;
   1c2f2:	68fb      	ldr	r3, [r7, #12]
   1c2f4:	e00d      	b.n	1c312 <pin_find_af_by_index+0x44>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c2f6:	68bb      	ldr	r3, [r7, #8]
   1c2f8:	3301      	adds	r3, #1
   1c2fa:	60bb      	str	r3, [r7, #8]
   1c2fc:	68fb      	ldr	r3, [r7, #12]
   1c2fe:	3310      	adds	r3, #16
   1c300:	60fb      	str	r3, [r7, #12]
   1c302:	687b      	ldr	r3, [r7, #4]
   1c304:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1c308:	461a      	mov	r2, r3
   1c30a:	68bb      	ldr	r3, [r7, #8]
   1c30c:	429a      	cmp	r2, r3
   1c30e:	d8e9      	bhi.n	1c2e4 <pin_find_af_by_index+0x16>
        }
    }
    return NULL;
   1c310:	2300      	movs	r3, #0
}
   1c312:	4618      	mov	r0, r3
   1c314:	3714      	adds	r7, #20
   1c316:	46bd      	mov	sp, r7
   1c318:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c31c:	4770      	bx	lr
   1c31e:	bf00      	nop

0001c320 <machine_init>:
#define PYB_RESET_BROWNOUT  (5)
#define PYB_RESET_OTHER     (6)

STATIC uint32_t reset_cause;

void machine_init(void) {
   1c320:	b580      	push	{r7, lr}
   1c322:	b082      	sub	sp, #8
   1c324:	af00      	add	r7, sp, #0

    // get reset cause from RCC flags
    uint32_t state = MAP_SysCtlResetCauseGet();
   1c326:	f001 fbe9 	bl	1dafc <SysCtlResetCauseGet>
   1c32a:	6078      	str	r0, [r7, #4]
    if ((state & SYSCTL_CAUSE_WDOG0) || (state & SYSCTL_CAUSE_WDOG1)) {
   1c32c:	687b      	ldr	r3, [r7, #4]
   1c32e:	f003 0308 	and.w	r3, r3, #8
   1c332:	2b00      	cmp	r3, #0
   1c334:	d104      	bne.n	1c340 <machine_init+0x20>
   1c336:	687b      	ldr	r3, [r7, #4]
   1c338:	f003 0320 	and.w	r3, r3, #32
   1c33c:	2b00      	cmp	r3, #0
   1c33e:	d003      	beq.n	1c348 <machine_init+0x28>
        reset_cause = PYB_RESET_WDT;
   1c340:	4b1b      	ldr	r3, [pc, #108]	; (1c3b0 <machine_init+0x90>)
   1c342:	2203      	movs	r2, #3
   1c344:	601a      	str	r2, [r3, #0]
   1c346:	e02b      	b.n	1c3a0 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_POR)  {
   1c348:	687b      	ldr	r3, [r7, #4]
   1c34a:	f003 0302 	and.w	r3, r3, #2
   1c34e:	2b00      	cmp	r3, #0
   1c350:	d003      	beq.n	1c35a <machine_init+0x3a>
        reset_cause = PYB_RESET_POWER_ON;
   1c352:	4b17      	ldr	r3, [pc, #92]	; (1c3b0 <machine_init+0x90>)
   1c354:	2201      	movs	r2, #1
   1c356:	601a      	str	r2, [r3, #0]
   1c358:	e022      	b.n	1c3a0 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_BOR) {
   1c35a:	687b      	ldr	r3, [r7, #4]
   1c35c:	f003 0304 	and.w	r3, r3, #4
   1c360:	2b00      	cmp	r3, #0
   1c362:	d003      	beq.n	1c36c <machine_init+0x4c>
        reset_cause = PYB_RESET_BROWNOUT;
   1c364:	4b12      	ldr	r3, [pc, #72]	; (1c3b0 <machine_init+0x90>)
   1c366:	2205      	movs	r2, #5
   1c368:	601a      	str	r2, [r3, #0]
   1c36a:	e019      	b.n	1c3a0 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_EXT) {
   1c36c:	687b      	ldr	r3, [r7, #4]
   1c36e:	f003 0301 	and.w	r3, r3, #1
   1c372:	2b00      	cmp	r3, #0
   1c374:	d003      	beq.n	1c37e <machine_init+0x5e>
        reset_cause = PYB_RESET_HARD;
   1c376:	4b0e      	ldr	r3, [pc, #56]	; (1c3b0 <machine_init+0x90>)
   1c378:	2202      	movs	r2, #2
   1c37a:	601a      	str	r2, [r3, #0]
   1c37c:	e010      	b.n	1c3a0 <machine_init+0x80>
    } else if ((state & SYSCTL_CAUSE_HSRVREQ) || (state & SYSCTL_CAUSE_HIB)){
   1c37e:	687b      	ldr	r3, [r7, #4]
   1c380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   1c384:	2b00      	cmp	r3, #0
   1c386:	d104      	bne.n	1c392 <machine_init+0x72>
   1c388:	687b      	ldr	r3, [r7, #4]
   1c38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1c38e:	2b00      	cmp	r3, #0
   1c390:	d003      	beq.n	1c39a <machine_init+0x7a>
        reset_cause = PYB_RESET_OTHER;
   1c392:	4b07      	ldr	r3, [pc, #28]	; (1c3b0 <machine_init+0x90>)
   1c394:	2206      	movs	r2, #6
   1c396:	601a      	str	r2, [r3, #0]
   1c398:	e002      	b.n	1c3a0 <machine_init+0x80>
    } else {
        // default is soft reset
        reset_cause = PYB_RESET_SOFT;
   1c39a:	4b05      	ldr	r3, [pc, #20]	; (1c3b0 <machine_init+0x90>)
   1c39c:	2200      	movs	r2, #0
   1c39e:	601a      	str	r2, [r3, #0]
    }
    // clear RCC reset flags
    MAP_SysCtlResetCauseClear(state);
   1c3a0:	6878      	ldr	r0, [r7, #4]
   1c3a2:	f001 fbb1 	bl	1db08 <SysCtlResetCauseClear>
}
   1c3a6:	bf00      	nop
   1c3a8:	3708      	adds	r7, #8
   1c3aa:	46bd      	mov	sp, r7
   1c3ac:	bd80      	pop	{r7, pc}
   1c3ae:	bf00      	nop
   1c3b0:	200012c8 	.word	0x200012c8

0001c3b4 <machine_deinit>:

void machine_deinit(void) {
   1c3b4:	b480      	push	{r7}
   1c3b6:	af00      	add	r7, sp, #0
    // we are doing a soft-reset so change the reset_cause
    reset_cause = PYB_RESET_SOFT;
   1c3b8:	4b03      	ldr	r3, [pc, #12]	; (1c3c8 <machine_deinit+0x14>)
   1c3ba:	2200      	movs	r2, #0
   1c3bc:	601a      	str	r2, [r3, #0]
}
   1c3be:	bf00      	nop
   1c3c0:	46bd      	mov	sp, r7
   1c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c3c6:	4770      	bx	lr
   1c3c8:	200012c8 	.word	0x200012c8

0001c3cc <machine_info>:

// machine.info([dump_alloc_table])
// Print out lots of information about the board.
STATIC mp_obj_t machine_info(size_t n_args, const mp_obj_t *args) {
   1c3cc:	b580      	push	{r7, lr}
   1c3ce:	b090      	sub	sp, #64	; 0x40
   1c3d0:	af02      	add	r7, sp, #8
   1c3d2:	6078      	str	r0, [r7, #4]
   1c3d4:	6039      	str	r1, [r7, #0]
    // get and print unique id; 96 bits
    {
        uint32_t id = SYSCTL->DID0;
   1c3d6:	4b26      	ldr	r3, [pc, #152]	; (1c470 <machine_info+0xa4>)
   1c3d8:	681b      	ldr	r3, [r3, #0]
   1c3da:	637b      	str	r3, [r7, #52]	; 0x34

        printf("ID: CLASS=%02x, v%02u.%02u", (uint8_t)((id >> 16) & 0xff), (uint8_t)((id >> 8) & 0xff), (uint8_t)(id & 0xff));
   1c3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c3de:	0c1b      	lsrs	r3, r3, #16
   1c3e0:	b2db      	uxtb	r3, r3
   1c3e2:	4619      	mov	r1, r3
   1c3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c3e6:	0a1b      	lsrs	r3, r3, #8
   1c3e8:	b2db      	uxtb	r3, r3
   1c3ea:	461a      	mov	r2, r3
   1c3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c3ee:	b2db      	uxtb	r3, r3
   1c3f0:	4820      	ldr	r0, [pc, #128]	; (1c474 <machine_info+0xa8>)
   1c3f2:	f7fe fee3 	bl	1b1bc <printf>
    }

    // get and print clock speeds
    // SYSCLK=168MHz, HCLK=168MHz, PCLK1=42MHz, PCLK2=84MHz
    {
        printf("%u Hz", (unsigned int)SysCtlClockGet());
   1c3f6:	f001 fb8f 	bl	1db18 <SysCtlClockGet>
   1c3fa:	4603      	mov	r3, r0
   1c3fc:	4619      	mov	r1, r3
   1c3fe:	481e      	ldr	r0, [pc, #120]	; (1c478 <machine_info+0xac>)
   1c400:	f7fe fedc 	bl	1b1bc <printf>
//    }

    // qstr info
    {
        size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
        qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1c404:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1c408:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c40c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1c410:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1c414:	f7e4 ff3b 	bl	128e <qstr_pool_info>
        printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  n_str_data_bytes=%u\n  n_total_bytes=%u\n", n_pool, n_qstr, n_str_data_bytes, n_total_bytes);
   1c418:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1c41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c41c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c420:	9300      	str	r3, [sp, #0]
   1c422:	4603      	mov	r3, r0
   1c424:	4815      	ldr	r0, [pc, #84]	; (1c47c <machine_info+0xb0>)
   1c426:	f7fe fec9 	bl	1b1bc <printf>
    }

    // GC info
    {
        gc_info_t info;
        gc_info(&info);
   1c42a:	f107 0308 	add.w	r3, r7, #8
   1c42e:	4618      	mov	r0, r3
   1c430:	f7e4 f9c6 	bl	7c0 <gc_info>
        printf("GC:\n");
   1c434:	4812      	ldr	r0, [pc, #72]	; (1c480 <machine_info+0xb4>)
   1c436:	f7fe fefd 	bl	1b234 <puts>
        printf("  %u total\n", info.total);
   1c43a:	68bb      	ldr	r3, [r7, #8]
   1c43c:	4619      	mov	r1, r3
   1c43e:	4811      	ldr	r0, [pc, #68]	; (1c484 <machine_info+0xb8>)
   1c440:	f7fe febc 	bl	1b1bc <printf>
        printf("  %u : %u\n", info.used, info.free);
   1c444:	68fb      	ldr	r3, [r7, #12]
   1c446:	693a      	ldr	r2, [r7, #16]
   1c448:	4619      	mov	r1, r3
   1c44a:	480f      	ldr	r0, [pc, #60]	; (1c488 <machine_info+0xbc>)
   1c44c:	f7fe feb6 	bl	1b1bc <printf>
        printf("  1=%u 2=%u m=%u\n", info.num_1block, info.num_2block, info.max_block);
   1c450:	69b9      	ldr	r1, [r7, #24]
   1c452:	69fa      	ldr	r2, [r7, #28]
   1c454:	6a3b      	ldr	r3, [r7, #32]
   1c456:	480d      	ldr	r0, [pc, #52]	; (1c48c <machine_info+0xc0>)
   1c458:	f7fe feb0 	bl	1b1bc <printf>

    #if MICROPY_PY_THREAD
    pyb_thread_dump();
    #endif

    if (n_args == 1) {
   1c45c:	687b      	ldr	r3, [r7, #4]
   1c45e:	2b01      	cmp	r3, #1
   1c460:	d101      	bne.n	1c466 <machine_info+0x9a>
        // arg given means dump gc allocation table
        gc_dump_alloc_table();
   1c462:	f7e4 fc45 	bl	cf0 <gc_dump_alloc_table>
    }

    return mp_const_none;
   1c466:	4b0a      	ldr	r3, [pc, #40]	; (1c490 <machine_info+0xc4>)
}
   1c468:	4618      	mov	r0, r3
   1c46a:	3738      	adds	r7, #56	; 0x38
   1c46c:	46bd      	mov	sp, r7
   1c46e:	bd80      	pop	{r7, pc}
   1c470:	400fe000 	.word	0x400fe000
   1c474:	00024d50 	.word	0x00024d50
   1c478:	00024d6c 	.word	0x00024d6c
   1c47c:	00024d74 	.word	0x00024d74
   1c480:	00024dbc 	.word	0x00024dbc
   1c484:	00024dc0 	.word	0x00024dc0
   1c488:	00024dcc 	.word	0x00024dcc
   1c48c:	00024dd8 	.word	0x00024dd8
   1c490:	00023108 	.word	0x00023108

0001c494 <machine_unique_id>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(machine_info_obj, 0, 1, machine_info);

// Returns a string of 12 bytes (96 bits), which is the unique ID for the MCU.
STATIC mp_obj_t machine_unique_id(void) {
   1c494:	b580      	push	{r7, lr}
   1c496:	b082      	sub	sp, #8
   1c498:	af00      	add	r7, sp, #0
    byte *id = (byte*)(SYSCTL->DID1 + 2);
   1c49a:	4b06      	ldr	r3, [pc, #24]	; (1c4b4 <machine_unique_id+0x20>)
   1c49c:	685b      	ldr	r3, [r3, #4]
   1c49e:	3302      	adds	r3, #2
   1c4a0:	607b      	str	r3, [r7, #4]
    return mp_obj_new_bytes(id, 12);
   1c4a2:	210c      	movs	r1, #12
   1c4a4:	6878      	ldr	r0, [r7, #4]
   1c4a6:	f7f8 fef6 	bl	15296 <mp_obj_new_bytes>
   1c4aa:	4603      	mov	r3, r0
}
   1c4ac:	4618      	mov	r0, r3
   1c4ae:	3708      	adds	r7, #8
   1c4b0:	46bd      	mov	sp, r7
   1c4b2:	bd80      	pop	{r7, pc}
   1c4b4:	400fe000 	.word	0x400fe000

0001c4b8 <machine_reset>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_unique_id_obj, machine_unique_id);

// Resets the pyboard in a manner similar to pushing the external RESET button.
STATIC mp_obj_t machine_reset(void) {
   1c4b8:	b580      	push	{r7, lr}
   1c4ba:	af00      	add	r7, sp, #0
    MAP_SysCtlReset();
   1c4bc:	f001 fb04 	bl	1dac8 <SysCtlReset>
    return mp_const_none;
   1c4c0:	4b01      	ldr	r3, [pc, #4]	; (1c4c8 <machine_reset+0x10>)
}
   1c4c2:	4618      	mov	r0, r3
   1c4c4:	bd80      	pop	{r7, pc}
   1c4c6:	bf00      	nop
   1c4c8:	00023108 	.word	0x00023108

0001c4cc <machine_soft_reset>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_reset_obj, machine_reset);

STATIC mp_obj_t machine_soft_reset(void) {
   1c4cc:	b580      	push	{r7, lr}
   1c4ce:	af00      	add	r7, sp, #0
    pyexec_system_exit = PYEXEC_FORCED_EXIT;
   1c4d0:	4b05      	ldr	r3, [pc, #20]	; (1c4e8 <machine_soft_reset+0x1c>)
   1c4d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c4d6:	601a      	str	r2, [r3, #0]
    nlr_raise(mp_obj_new_exception(&mp_type_SystemExit));
   1c4d8:	4804      	ldr	r0, [pc, #16]	; (1c4ec <machine_soft_reset+0x20>)
   1c4da:	f7f2 ff2b 	bl	f334 <mp_obj_new_exception>
   1c4de:	4603      	mov	r3, r0
   1c4e0:	4618      	mov	r0, r3
   1c4e2:	f7e3 fefd 	bl	2e0 <nlr_jump>
   1c4e6:	bf00      	nop
   1c4e8:	200012cc 	.word	0x200012cc
   1c4ec:	00021e80 	.word	0x00021e80

0001c4f0 <machine_bootloader>:
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_soft_reset_obj, machine_soft_reset);

// Activate the bootloader without BOOT* pins.
STATIC NORETURN mp_obj_t machine_bootloader(void) {
   1c4f0:	b480      	push	{r7}
   1c4f2:	af00      	add	r7, sp, #0
//    //__set_MSP(*((uint32_t*) 0x00000000));
//    __ASM volatile ("movs r3, #0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");
//
//    ((void (*)(void)) *((uint32_t*) 0x00000004))();
//
    while (1);
   1c4f4:	e7fe      	b.n	1c4f4 <machine_bootloader+0x4>

0001c4f6 <machine_freq>:
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_bootloader_obj, machine_bootloader);


STATIC mp_obj_t machine_freq(size_t n_args, const mp_obj_t *args) {
   1c4f6:	b580      	push	{r7, lr}
   1c4f8:	b084      	sub	sp, #16
   1c4fa:	af00      	add	r7, sp, #0
   1c4fc:	6078      	str	r0, [r7, #4]
   1c4fe:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1c500:	687b      	ldr	r3, [r7, #4]
   1c502:	2b00      	cmp	r3, #0
   1c504:	d10f      	bne.n	1c526 <machine_freq+0x30>
        // get
        mp_obj_t tuple[] = {
           mp_obj_new_int(MAP_SysCtlClockGet()),
   1c506:	f001 fb07 	bl	1db18 <SysCtlClockGet>
   1c50a:	4603      	mov	r3, r0
   1c50c:	4618      	mov	r0, r3
   1c50e:	f7f4 f92d 	bl	1076c <mp_obj_new_int>
   1c512:	4603      	mov	r3, r0
        mp_obj_t tuple[] = {
   1c514:	60fb      	str	r3, [r7, #12]
        };
        return mp_obj_new_tuple(MP_ARRAY_SIZE(tuple), tuple);
   1c516:	f107 030c 	add.w	r3, r7, #12
   1c51a:	4619      	mov	r1, r3
   1c51c:	2001      	movs	r0, #1
   1c51e:	f7f9 fb79 	bl	15c14 <mp_obj_new_tuple>
   1c522:	4603      	mov	r3, r0
   1c524:	e002      	b.n	1c52c <machine_freq+0x36>
        } else {
            mp_raise_ValueError("freq change not supported");
   1c526:	4803      	ldr	r0, [pc, #12]	; (1c534 <machine_freq+0x3e>)
   1c528:	f7f0 fc93 	bl	ce52 <mp_raise_ValueError>
//        void NORETURN __fatal_error(const char *msg);
//        __fatal_error("can't change freq");
//
//        #endif
    }
}
   1c52c:	4618      	mov	r0, r3
   1c52e:	3710      	adds	r7, #16
   1c530:	46bd      	mov	sp, r7
   1c532:	bd80      	pop	{r7, pc}
   1c534:	00024e18 	.word	0x00024e18

0001c538 <machine_sleep>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(machine_freq_obj, 0, 4, machine_freq);

STATIC mp_obj_t machine_sleep(void) {
   1c538:	b580      	push	{r7, lr}
   1c53a:	af00      	add	r7, sp, #0
    //send system to sleep
    MAP_SysCtlSleep();
   1c53c:	f001 facc 	bl	1dad8 <SysCtlSleep>
    return mp_const_none;
   1c540:	4b01      	ldr	r3, [pc, #4]	; (1c548 <machine_sleep+0x10>)
}
   1c542:	4618      	mov	r0, r3
   1c544:	bd80      	pop	{r7, pc}
   1c546:	bf00      	nop
   1c548:	00023108 	.word	0x00023108

0001c54c <machine_deepsleep>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_sleep_obj, machine_sleep);

STATIC mp_obj_t machine_deepsleep(void) {
   1c54c:	b580      	push	{r7, lr}
   1c54e:	af00      	add	r7, sp, #0
    MAP_SysCtlDeepSleep();
   1c550:	f001 fac4 	bl	1dadc <SysCtlDeepSleep>
    return mp_const_none;
   1c554:	4b01      	ldr	r3, [pc, #4]	; (1c55c <machine_deepsleep+0x10>)
}
   1c556:	4618      	mov	r0, r3
   1c558:	bd80      	pop	{r7, pc}
   1c55a:	bf00      	nop
   1c55c:	00023108 	.word	0x00023108

0001c560 <machine_reset_cause>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_deepsleep_obj, machine_deepsleep);

STATIC mp_obj_t machine_reset_cause(void) {
   1c560:	b480      	push	{r7}
   1c562:	af00      	add	r7, sp, #0
    return MP_OBJ_NEW_SMALL_INT(reset_cause);
   1c564:	4b04      	ldr	r3, [pc, #16]	; (1c578 <machine_reset_cause+0x18>)
   1c566:	681b      	ldr	r3, [r3, #0]
   1c568:	005b      	lsls	r3, r3, #1
   1c56a:	f043 0301 	orr.w	r3, r3, #1
}
   1c56e:	4618      	mov	r0, r3
   1c570:	46bd      	mov	sp, r7
   1c572:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c576:	4770      	bx	lr
   1c578:	200012c8 	.word	0x200012c8

0001c57c <mp_hal_stdout_tx_strn_cooked>:
 * implementation below can be used.
 */

// Send "cooked" string of given length, where every occurrence of
// LF character is replaced with CR LF.
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   1c57c:	b580      	push	{r7, lr}
   1c57e:	b082      	sub	sp, #8
   1c580:	af00      	add	r7, sp, #0
   1c582:	6078      	str	r0, [r7, #4]
   1c584:	6039      	str	r1, [r7, #0]
    while (len--) {
   1c586:	e00e      	b.n	1c5a6 <mp_hal_stdout_tx_strn_cooked+0x2a>
        if (*str == '\n') {
   1c588:	687b      	ldr	r3, [r7, #4]
   1c58a:	781b      	ldrb	r3, [r3, #0]
   1c58c:	2b0a      	cmp	r3, #10
   1c58e:	d103      	bne.n	1c598 <mp_hal_stdout_tx_strn_cooked+0x1c>
            mp_hal_stdout_tx_strn("\r", 1);
   1c590:	2101      	movs	r1, #1
   1c592:	4809      	ldr	r0, [pc, #36]	; (1c5b8 <mp_hal_stdout_tx_strn_cooked+0x3c>)
   1c594:	f7ff f898 	bl	1b6c8 <mp_hal_stdout_tx_strn>
        }
        mp_hal_stdout_tx_strn(str++, 1);
   1c598:	687b      	ldr	r3, [r7, #4]
   1c59a:	1c5a      	adds	r2, r3, #1
   1c59c:	607a      	str	r2, [r7, #4]
   1c59e:	2101      	movs	r1, #1
   1c5a0:	4618      	mov	r0, r3
   1c5a2:	f7ff f891 	bl	1b6c8 <mp_hal_stdout_tx_strn>
    while (len--) {
   1c5a6:	683b      	ldr	r3, [r7, #0]
   1c5a8:	1e5a      	subs	r2, r3, #1
   1c5aa:	603a      	str	r2, [r7, #0]
   1c5ac:	2b00      	cmp	r3, #0
   1c5ae:	d1eb      	bne.n	1c588 <mp_hal_stdout_tx_strn_cooked+0xc>
    }
}
   1c5b0:	bf00      	nop
   1c5b2:	3708      	adds	r7, #8
   1c5b4:	46bd      	mov	sp, r7
   1c5b6:	bd80      	pop	{r7, pc}
   1c5b8:	000257a0 	.word	0x000257a0

0001c5bc <mp_hal_stdout_tx_str>:

// Send zero-terminated string
void mp_hal_stdout_tx_str(const char *str) {
   1c5bc:	b580      	push	{r7, lr}
   1c5be:	b082      	sub	sp, #8
   1c5c0:	af00      	add	r7, sp, #0
   1c5c2:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn(str, strlen(str));
   1c5c4:	6878      	ldr	r0, [r7, #4]
   1c5c6:	f000 fbbd 	bl	1cd44 <strlen>
   1c5ca:	4603      	mov	r3, r0
   1c5cc:	4619      	mov	r1, r3
   1c5ce:	6878      	ldr	r0, [r7, #4]
   1c5d0:	f7ff f87a 	bl	1b6c8 <mp_hal_stdout_tx_strn>
}
   1c5d4:	bf00      	nop
   1c5d6:	3708      	adds	r7, #8
   1c5d8:	46bd      	mov	sp, r7
   1c5da:	bd80      	pop	{r7, pc}

0001c5dc <vstr_reset>:
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1c5dc:	b480      	push	{r7}
   1c5de:	b083      	sub	sp, #12
   1c5e0:	af00      	add	r7, sp, #0
   1c5e2:	6078      	str	r0, [r7, #4]
   1c5e4:	687b      	ldr	r3, [r7, #4]
   1c5e6:	2200      	movs	r2, #0
   1c5e8:	605a      	str	r2, [r3, #4]
   1c5ea:	bf00      	nop
   1c5ec:	370c      	adds	r7, #12
   1c5ee:	46bd      	mov	sp, r7
   1c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c5f4:	4770      	bx	lr

0001c5f6 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1c5f6:	b480      	push	{r7}
   1c5f8:	b083      	sub	sp, #12
   1c5fa:	af00      	add	r7, sp, #0
   1c5fc:	6078      	str	r0, [r7, #4]
   1c5fe:	687b      	ldr	r3, [r7, #4]
   1c600:	685b      	ldr	r3, [r3, #4]
   1c602:	4618      	mov	r0, r3
   1c604:	370c      	adds	r7, #12
   1c606:	46bd      	mov	sp, r7
   1c608:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c60c:	4770      	bx	lr

0001c60e <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1c60e:	b580      	push	{r7, lr}
   1c610:	b0a0      	sub	sp, #128	; 0x80
   1c612:	af02      	add	r7, sp, #8
   1c614:	60f8      	str	r0, [r7, #12]
   1c616:	60b9      	str	r1, [r7, #8]
   1c618:	607a      	str	r2, [r7, #4]
    int ret = 0;
   1c61a:	2300      	movs	r3, #0
   1c61c:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t start = 0;
   1c61e:	2300      	movs	r3, #0
   1c620:	673b      	str	r3, [r7, #112]	; 0x70

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1c622:	4b60      	ldr	r3, [pc, #384]	; (1c7a4 <parse_compile_execute+0x196>)
   1c624:	2200      	movs	r2, #0
   1c626:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1c628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1c62c:	4618      	mov	r0, r3
   1c62e:	f7e3 fe45 	bl	2bc <nlr_push>
   1c632:	4603      	mov	r3, r0
   1c634:	2b00      	cmp	r3, #0
   1c636:	d15c      	bne.n	1c6f2 <parse_compile_execute+0xe4>
        mp_obj_t module_fun;
        #if MICROPY_MODULE_FROZEN_MPY
        if (exec_flags & EXEC_FLAG_SOURCE_IS_RAW_CODE) {
   1c638:	687b      	ldr	r3, [r7, #4]
   1c63a:	f003 0308 	and.w	r3, r3, #8
   1c63e:	2b00      	cmp	r3, #0
   1c640:	d006      	beq.n	1c650 <parse_compile_execute+0x42>
            // source is a raw_code object, create the function
            module_fun = mp_make_function_from_raw_code(source, MP_OBJ_NULL, MP_OBJ_NULL);
   1c642:	2200      	movs	r2, #0
   1c644:	2100      	movs	r1, #0
   1c646:	68f8      	ldr	r0, [r7, #12]
   1c648:	f7ee fd6f 	bl	b12a <mp_make_function_from_raw_code>
   1c64c:	66f8      	str	r0, [r7, #108]	; 0x6c
   1c64e:	e035      	b.n	1c6bc <parse_compile_execute+0xae>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1c650:	687b      	ldr	r3, [r7, #4]
   1c652:	f003 0310 	and.w	r3, r3, #16
   1c656:	2b00      	cmp	r3, #0
   1c658:	d00b      	beq.n	1c672 <parse_compile_execute+0x64>
                const vstr_t *vstr = source;
   1c65a:	68fb      	ldr	r3, [r7, #12]
   1c65c:	667b      	str	r3, [r7, #100]	; 0x64
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1c65e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1c660:	6899      	ldr	r1, [r3, #8]
   1c662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1c664:	685a      	ldr	r2, [r3, #4]
   1c666:	2300      	movs	r3, #0
   1c668:	2037      	movs	r0, #55	; 0x37
   1c66a:	f7e7 f87e 	bl	376a <mp_lexer_new_from_str_len>
   1c66e:	66b8      	str	r0, [r7, #104]	; 0x68
   1c670:	e00b      	b.n	1c68a <parse_compile_execute+0x7c>
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1c672:	687b      	ldr	r3, [r7, #4]
   1c674:	f003 0320 	and.w	r3, r3, #32
   1c678:	2b00      	cmp	r3, #0
   1c67a:	d004      	beq.n	1c686 <parse_compile_execute+0x78>
                lex = mp_lexer_new_from_file(source);
   1c67c:	68f8      	ldr	r0, [r7, #12]
   1c67e:	f7fe fed3 	bl	1b428 <mp_lexer_new_from_file>
   1c682:	66b8      	str	r0, [r7, #104]	; 0x68
   1c684:	e001      	b.n	1c68a <parse_compile_execute+0x7c>
            } else {
                lex = (mp_lexer_t*)source;
   1c686:	68fb      	ldr	r3, [r7, #12]
   1c688:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1c68a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c68c:	681b      	ldr	r3, [r3, #0]
   1c68e:	663b      	str	r3, [r7, #96]	; 0x60
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1c690:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1c694:	68ba      	ldr	r2, [r7, #8]
   1c696:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1c698:	4618      	mov	r0, r3
   1c69a:	f7e7 fe5f 	bl	435c <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1c69e:	687b      	ldr	r3, [r7, #4]
   1c6a0:	f003 0304 	and.w	r3, r3, #4
   1c6a4:	2b00      	cmp	r3, #0
   1c6a6:	bf14      	ite	ne
   1c6a8:	2301      	movne	r3, #1
   1c6aa:	2300      	moveq	r3, #0
   1c6ac:	b2db      	uxtb	r3, r3
   1c6ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1c6b2:	2200      	movs	r2, #0
   1c6b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1c6b6:	f7ed f838 	bl	972a <mp_compile>
   1c6ba:	66f8      	str	r0, [r7, #108]	; 0x6c
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1c6bc:	2003      	movs	r0, #3
   1c6be:	f7ff f8c0 	bl	1b842 <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1c6c2:	f7ff f833 	bl	1b72c <mp_hal_ticks_ms>
   1c6c6:	6738      	str	r0, [r7, #112]	; 0x70
        mp_call_function_0(module_fun);
   1c6c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   1c6ca:	f7ef faeb 	bl	bca4 <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c6ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6d2:	f7ff f8b6 	bl	1b842 <mp_hal_set_interrupt_char>
        nlr_pop();
   1c6d6:	f7e3 fddf 	bl	298 <nlr_pop>
        ret = 1;
   1c6da:	2301      	movs	r3, #1
   1c6dc:	677b      	str	r3, [r7, #116]	; 0x74
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c6de:	687b      	ldr	r3, [r7, #4]
   1c6e0:	f003 0301 	and.w	r3, r3, #1
   1c6e4:	2b00      	cmp	r3, #0
   1c6e6:	d025      	beq.n	1c734 <parse_compile_execute+0x126>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c6e8:	2101      	movs	r1, #1
   1c6ea:	482f      	ldr	r0, [pc, #188]	; (1c7a8 <parse_compile_execute+0x19a>)
   1c6ec:	f7fe ffec 	bl	1b6c8 <mp_hal_stdout_tx_strn>
   1c6f0:	e020      	b.n	1c734 <parse_compile_execute+0x126>
        }
    } else {
        // uncaught exception
        // FIXME it could be that an interrupt happens just before we disable it here
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c6f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c6f6:	f7ff f8a4 	bl	1b842 <mp_hal_set_interrupt_char>
        // print EOF after normal output
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c6fa:	687b      	ldr	r3, [r7, #4]
   1c6fc:	f003 0301 	and.w	r3, r3, #1
   1c700:	2b00      	cmp	r3, #0
   1c702:	d003      	beq.n	1c70c <parse_compile_execute+0xfe>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c704:	2101      	movs	r1, #1
   1c706:	4828      	ldr	r0, [pc, #160]	; (1c7a8 <parse_compile_execute+0x19a>)
   1c708:	f7fe ffde 	bl	1b6c8 <mp_hal_stdout_tx_strn>
        }
        // check for SystemExit
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_SystemExit))) {
   1c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c70e:	681b      	ldr	r3, [r3, #0]
   1c710:	4926      	ldr	r1, [pc, #152]	; (1c7ac <parse_compile_execute+0x19e>)
   1c712:	4618      	mov	r0, r3
   1c714:	f7fa fd2e 	bl	17174 <mp_obj_is_subclass_fast>
   1c718:	4603      	mov	r3, r0
   1c71a:	2b00      	cmp	r3, #0
   1c71c:	d003      	beq.n	1c726 <parse_compile_execute+0x118>
            // at the moment, the value of SystemExit is unused
            ret = pyexec_system_exit;
   1c71e:	4b21      	ldr	r3, [pc, #132]	; (1c7a4 <parse_compile_execute+0x196>)
   1c720:	681b      	ldr	r3, [r3, #0]
   1c722:	677b      	str	r3, [r7, #116]	; 0x74
   1c724:	e006      	b.n	1c734 <parse_compile_execute+0x126>
        } else {
            mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
   1c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c728:	4619      	mov	r1, r3
   1c72a:	4821      	ldr	r0, [pc, #132]	; (1c7b0 <parse_compile_execute+0x1a2>)
   1c72c:	f7f1 f82c 	bl	d788 <mp_obj_print_exception>
            ret = 0;
   1c730:	2300      	movs	r3, #0
   1c732:	677b      	str	r3, [r7, #116]	; 0x74
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1c734:	687b      	ldr	r3, [r7, #4]
   1c736:	f003 0302 	and.w	r3, r3, #2
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	d024      	beq.n	1c788 <parse_compile_execute+0x17a>
   1c73e:	4b1d      	ldr	r3, [pc, #116]	; (1c7b4 <parse_compile_execute+0x1a6>)
   1c740:	781b      	ldrb	r3, [r3, #0]
   1c742:	2b00      	cmp	r3, #0
   1c744:	d020      	beq.n	1c788 <parse_compile_execute+0x17a>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1c746:	f7fe fff1 	bl	1b72c <mp_hal_ticks_ms>
   1c74a:	4602      	mov	r2, r0
   1c74c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1c74e:	1ad3      	subs	r3, r2, r3
   1c750:	65fb      	str	r3, [r7, #92]	; 0x5c
        printf("took " UINT_FMT " ms\n", ticks);
   1c752:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1c754:	4818      	ldr	r0, [pc, #96]	; (1c7b8 <parse_compile_execute+0x1aa>)
   1c756:	f7fe fd31 	bl	1b1bc <printf>
        // qstr info
        {
            size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1c75a:	f107 0314 	add.w	r3, r7, #20
   1c75e:	f107 0218 	add.w	r2, r7, #24
   1c762:	f107 011c 	add.w	r1, r7, #28
   1c766:	f107 0020 	add.w	r0, r7, #32
   1c76a:	f7e4 fd90 	bl	128e <qstr_pool_info>
            printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  "
   1c76e:	6a39      	ldr	r1, [r7, #32]
   1c770:	69fa      	ldr	r2, [r7, #28]
   1c772:	69b8      	ldr	r0, [r7, #24]
   1c774:	697b      	ldr	r3, [r7, #20]
   1c776:	9300      	str	r3, [sp, #0]
   1c778:	4603      	mov	r3, r0
   1c77a:	4810      	ldr	r0, [pc, #64]	; (1c7bc <parse_compile_execute+0x1ae>)
   1c77c:	f7fe fd1e 	bl	1b1bc <printf>
                   (unsigned)n_pool, (unsigned)n_qstr, (unsigned)n_str_data_bytes, (unsigned)n_total_bytes);
        }

        #if MICROPY_ENABLE_GC
        // run collection and print GC info
        gc_collect();
   1c780:	f7fe fe38 	bl	1b3f4 <gc_collect>
        gc_dump_info();
   1c784:	f7e4 fa94 	bl	cb0 <gc_dump_info>
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c788:	687b      	ldr	r3, [r7, #4]
   1c78a:	f003 0301 	and.w	r3, r3, #1
   1c78e:	2b00      	cmp	r3, #0
   1c790:	d003      	beq.n	1c79a <parse_compile_execute+0x18c>
        mp_hal_stdout_tx_strn("\x04", 1);
   1c792:	2101      	movs	r1, #1
   1c794:	4804      	ldr	r0, [pc, #16]	; (1c7a8 <parse_compile_execute+0x19a>)
   1c796:	f7fe ff97 	bl	1b6c8 <mp_hal_stdout_tx_strn>
    }

    return ret;
   1c79a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1c79c:	4618      	mov	r0, r3
   1c79e:	3778      	adds	r7, #120	; 0x78
   1c7a0:	46bd      	mov	sp, r7
   1c7a2:	bd80      	pop	{r7, pc}
   1c7a4:	200012cc 	.word	0x200012cc
   1c7a8:	000257a4 	.word	0x000257a4
   1c7ac:	00021e80 	.word	0x00021e80
   1c7b0:	0001f4ac 	.word	0x0001f4ac
   1c7b4:	200012d0 	.word	0x200012d0
   1c7b8:	000257a8 	.word	0x000257a8
   1c7bc:	000257b4 	.word	0x000257b4

0001c7c0 <pyexec_raw_repl>:
    return res;
}

#else // MICROPY_REPL_EVENT_DRIVEN

int pyexec_raw_repl(void) {
   1c7c0:	b580      	push	{r7, lr}
   1c7c2:	b086      	sub	sp, #24
   1c7c4:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1c7c6:	463b      	mov	r3, r7
   1c7c8:	2120      	movs	r1, #32
   1c7ca:	4618      	mov	r0, r3
   1c7cc:	f7e4 fdc2 	bl	1354 <vstr_init>

raw_repl_reset:
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1c7d0:	482a      	ldr	r0, [pc, #168]	; (1c87c <pyexec_raw_repl+0xbc>)
   1c7d2:	f7ff fef3 	bl	1c5bc <mp_hal_stdout_tx_str>

    for (;;) {
        vstr_reset(&line);
   1c7d6:	463b      	mov	r3, r7
   1c7d8:	4618      	mov	r0, r3
   1c7da:	f7ff feff 	bl	1c5dc <vstr_reset>
        mp_hal_stdout_tx_str(">");
   1c7de:	4828      	ldr	r0, [pc, #160]	; (1c880 <pyexec_raw_repl+0xc0>)
   1c7e0:	f7ff feec 	bl	1c5bc <mp_hal_stdout_tx_str>
        for (;;) {
            int c = mp_hal_stdin_rx_chr();
   1c7e4:	f7fe ff58 	bl	1b698 <mp_hal_stdin_rx_chr>
   1c7e8:	6178      	str	r0, [r7, #20]
            if (c == CHAR_CTRL_A) {
   1c7ea:	697b      	ldr	r3, [r7, #20]
   1c7ec:	2b01      	cmp	r3, #1
   1c7ee:	d100      	bne.n	1c7f2 <pyexec_raw_repl+0x32>
                // reset raw REPL
                goto raw_repl_reset;
   1c7f0:	e7ee      	b.n	1c7d0 <pyexec_raw_repl+0x10>
            } else if (c == CHAR_CTRL_B) {
   1c7f2:	697b      	ldr	r3, [r7, #20]
   1c7f4:	2b02      	cmp	r3, #2
   1c7f6:	d10b      	bne.n	1c810 <pyexec_raw_repl+0x50>
                // change to friendly REPL
                mp_hal_stdout_tx_str("\r\n");
   1c7f8:	4822      	ldr	r0, [pc, #136]	; (1c884 <pyexec_raw_repl+0xc4>)
   1c7fa:	f7ff fedf 	bl	1c5bc <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1c7fe:	463b      	mov	r3, r7
   1c800:	4618      	mov	r0, r3
   1c802:	f7e4 fe0b 	bl	141c <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1c806:	4b20      	ldr	r3, [pc, #128]	; (1c888 <pyexec_raw_repl+0xc8>)
   1c808:	2201      	movs	r2, #1
   1c80a:	601a      	str	r2, [r3, #0]
                return 0;
   1c80c:	2300      	movs	r3, #0
   1c80e:	e030      	b.n	1c872 <pyexec_raw_repl+0xb2>
            } else if (c == CHAR_CTRL_C) {
   1c810:	697b      	ldr	r3, [r7, #20]
   1c812:	2b03      	cmp	r3, #3
   1c814:	d104      	bne.n	1c820 <pyexec_raw_repl+0x60>
                // clear line
                vstr_reset(&line);
   1c816:	463b      	mov	r3, r7
   1c818:	4618      	mov	r0, r3
   1c81a:	f7ff fedf 	bl	1c5dc <vstr_reset>
   1c81e:	e7e1      	b.n	1c7e4 <pyexec_raw_repl+0x24>
            } else if (c == CHAR_CTRL_D) {
   1c820:	697b      	ldr	r3, [r7, #20]
   1c822:	2b04      	cmp	r3, #4
   1c824:	d007      	beq.n	1c836 <pyexec_raw_repl+0x76>
                // input finished
                break;
            } else {
                // let through any other raw 8-bit value
                vstr_add_byte(&line, c);
   1c826:	697b      	ldr	r3, [r7, #20]
   1c828:	b2da      	uxtb	r2, r3
   1c82a:	463b      	mov	r3, r7
   1c82c:	4611      	mov	r1, r2
   1c82e:	4618      	mov	r0, r3
   1c830:	f7e4 fee2 	bl	15f8 <vstr_add_byte>
        for (;;) {
   1c834:	e7d6      	b.n	1c7e4 <pyexec_raw_repl+0x24>
                break;
   1c836:	bf00      	nop
            }
        }

        // indicate reception of command
        mp_hal_stdout_tx_str("OK");
   1c838:	4814      	ldr	r0, [pc, #80]	; (1c88c <pyexec_raw_repl+0xcc>)
   1c83a:	f7ff febf 	bl	1c5bc <mp_hal_stdout_tx_str>

        if (line.len == 0) {
   1c83e:	687b      	ldr	r3, [r7, #4]
   1c840:	2b00      	cmp	r3, #0
   1c842:	d109      	bne.n	1c858 <pyexec_raw_repl+0x98>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1c844:	480f      	ldr	r0, [pc, #60]	; (1c884 <pyexec_raw_repl+0xc4>)
   1c846:	f7ff feb9 	bl	1c5bc <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c84a:	463b      	mov	r3, r7
   1c84c:	4618      	mov	r0, r3
   1c84e:	f7e4 fde5 	bl	141c <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1c852:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c856:	e00c      	b.n	1c872 <pyexec_raw_repl+0xb2>
        }

        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1c858:	463b      	mov	r3, r7
   1c85a:	2211      	movs	r2, #17
   1c85c:	2101      	movs	r1, #1
   1c85e:	4618      	mov	r0, r3
   1c860:	f7ff fed5 	bl	1c60e <parse_compile_execute>
   1c864:	6138      	str	r0, [r7, #16]
        if (ret & PYEXEC_FORCED_EXIT) {
   1c866:	693b      	ldr	r3, [r7, #16]
   1c868:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1c86c:	2b00      	cmp	r3, #0
   1c86e:	d0b2      	beq.n	1c7d6 <pyexec_raw_repl+0x16>
            return ret;
   1c870:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1c872:	4618      	mov	r0, r3
   1c874:	3718      	adds	r7, #24
   1c876:	46bd      	mov	sp, r7
   1c878:	bd80      	pop	{r7, pc}
   1c87a:	bf00      	nop
   1c87c:	000257fc 	.word	0x000257fc
   1c880:	00025818 	.word	0x00025818
   1c884:	0002581c 	.word	0x0002581c
   1c888:	200008bc 	.word	0x200008bc
   1c88c:	00025820 	.word	0x00025820

0001c890 <pyexec_friendly_repl>:

int pyexec_friendly_repl(void) {
   1c890:	b580      	push	{r7, lr}
   1c892:	b088      	sub	sp, #32
   1c894:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1c896:	f107 0308 	add.w	r3, r7, #8
   1c89a:	2120      	movs	r1, #32
   1c89c:	4618      	mov	r0, r3
   1c89e:	f7e4 fd59 	bl	1354 <vstr_init>
    mp_obj_t lcd_o = mp_call_function_0(mp_load_name(qstr_from_str("LCD")));
    mp_call_function_1(mp_load_attr(lcd_o, qstr_from_str("light")), mp_const_true);
#endif

friendly_repl_reset:
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1c8a2:	485f      	ldr	r0, [pc, #380]	; (1ca20 <pyexec_friendly_repl+0x190>)
   1c8a4:	f7ff fe8a 	bl	1c5bc <mp_hal_stdout_tx_str>
        }
        #endif

        // If the GC is locked at this point there is no way out except a reset,
        // so force the GC to be unlocked to help the user debug what went wrong.
        if (MP_STATE_MEM(gc_lock_depth) != 0) {
   1c8a8:	4b5e      	ldr	r3, [pc, #376]	; (1ca24 <pyexec_friendly_repl+0x194>)
   1c8aa:	f8b3 31c8 	ldrh.w	r3, [r3, #456]	; 0x1c8
   1c8ae:	2b00      	cmp	r3, #0
   1c8b0:	d003      	beq.n	1c8ba <pyexec_friendly_repl+0x2a>
            MP_STATE_MEM(gc_lock_depth) = 0;
   1c8b2:	4b5c      	ldr	r3, [pc, #368]	; (1ca24 <pyexec_friendly_repl+0x194>)
   1c8b4:	2200      	movs	r2, #0
   1c8b6:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
        }

        vstr_reset(&line);
   1c8ba:	f107 0308 	add.w	r3, r7, #8
   1c8be:	4618      	mov	r0, r3
   1c8c0:	f7ff fe8c 	bl	1c5dc <vstr_reset>
        int ret = readline(&line, ">>> ");
   1c8c4:	f107 0308 	add.w	r3, r7, #8
   1c8c8:	4957      	ldr	r1, [pc, #348]	; (1ca28 <pyexec_friendly_repl+0x198>)
   1c8ca:	4618      	mov	r0, r3
   1c8cc:	f000 ff3a 	bl	1d744 <readline>
   1c8d0:	61b8      	str	r0, [r7, #24]
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1c8d2:	2300      	movs	r3, #0
   1c8d4:	61fb      	str	r3, [r7, #28]

        if (ret == CHAR_CTRL_A) {
   1c8d6:	69bb      	ldr	r3, [r7, #24]
   1c8d8:	2b01      	cmp	r3, #1
   1c8da:	d10c      	bne.n	1c8f6 <pyexec_friendly_repl+0x66>
            // change to raw REPL
            mp_hal_stdout_tx_str("\r\n");
   1c8dc:	4853      	ldr	r0, [pc, #332]	; (1ca2c <pyexec_friendly_repl+0x19c>)
   1c8de:	f7ff fe6d 	bl	1c5bc <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c8e2:	f107 0308 	add.w	r3, r7, #8
   1c8e6:	4618      	mov	r0, r3
   1c8e8:	f7e4 fd98 	bl	141c <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1c8ec:	4b50      	ldr	r3, [pc, #320]	; (1ca30 <pyexec_friendly_repl+0x1a0>)
   1c8ee:	2200      	movs	r2, #0
   1c8f0:	601a      	str	r2, [r3, #0]
            return 0;
   1c8f2:	2300      	movs	r3, #0
   1c8f4:	e08f      	b.n	1ca16 <pyexec_friendly_repl+0x186>
        } else if (ret == CHAR_CTRL_B) {
   1c8f6:	69bb      	ldr	r3, [r7, #24]
   1c8f8:	2b02      	cmp	r3, #2
   1c8fa:	d103      	bne.n	1c904 <pyexec_friendly_repl+0x74>
            // reset friendly REPL
            mp_hal_stdout_tx_str("\r\n");
   1c8fc:	484b      	ldr	r0, [pc, #300]	; (1ca2c <pyexec_friendly_repl+0x19c>)
   1c8fe:	f7ff fe5d 	bl	1c5bc <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1c902:	e7ce      	b.n	1c8a2 <pyexec_friendly_repl+0x12>
        } else if (ret == CHAR_CTRL_C) {
   1c904:	69bb      	ldr	r3, [r7, #24]
   1c906:	2b03      	cmp	r3, #3
   1c908:	d103      	bne.n	1c912 <pyexec_friendly_repl+0x82>
            // break
            mp_hal_stdout_tx_str("\r\n");
   1c90a:	4848      	ldr	r0, [pc, #288]	; (1ca2c <pyexec_friendly_repl+0x19c>)
   1c90c:	f7ff fe56 	bl	1c5bc <mp_hal_stdout_tx_str>
            continue;
   1c910:	e080      	b.n	1ca14 <pyexec_friendly_repl+0x184>
        } else if (ret == CHAR_CTRL_D) {
   1c912:	69bb      	ldr	r3, [r7, #24]
   1c914:	2b04      	cmp	r3, #4
   1c916:	d10a      	bne.n	1c92e <pyexec_friendly_repl+0x9e>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1c918:	4844      	ldr	r0, [pc, #272]	; (1ca2c <pyexec_friendly_repl+0x19c>)
   1c91a:	f7ff fe4f 	bl	1c5bc <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1c91e:	f107 0308 	add.w	r3, r7, #8
   1c922:	4618      	mov	r0, r3
   1c924:	f7e4 fd7a 	bl	141c <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1c928:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c92c:	e073      	b.n	1ca16 <pyexec_friendly_repl+0x186>
        } else if (ret == CHAR_CTRL_E) {
   1c92e:	69bb      	ldr	r3, [r7, #24]
   1c930:	2b05      	cmp	r3, #5
   1c932:	d130      	bne.n	1c996 <pyexec_friendly_repl+0x106>
            // paste mode
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1c934:	483f      	ldr	r0, [pc, #252]	; (1ca34 <pyexec_friendly_repl+0x1a4>)
   1c936:	f7ff fe41 	bl	1c5bc <mp_hal_stdout_tx_str>
            vstr_reset(&line);
   1c93a:	f107 0308 	add.w	r3, r7, #8
   1c93e:	4618      	mov	r0, r3
   1c940:	f7ff fe4c 	bl	1c5dc <vstr_reset>
            for (;;) {
                char c = mp_hal_stdin_rx_chr();
   1c944:	f7fe fea8 	bl	1b698 <mp_hal_stdin_rx_chr>
   1c948:	4603      	mov	r3, r0
   1c94a:	b2db      	uxtb	r3, r3
   1c94c:	71fb      	strb	r3, [r7, #7]
                if (c == CHAR_CTRL_C) {
   1c94e:	79fb      	ldrb	r3, [r7, #7]
   1c950:	2b03      	cmp	r3, #3
   1c952:	d103      	bne.n	1c95c <pyexec_friendly_repl+0xcc>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1c954:	4835      	ldr	r0, [pc, #212]	; (1ca2c <pyexec_friendly_repl+0x19c>)
   1c956:	f7ff fe31 	bl	1c5bc <mp_hal_stdout_tx_str>
   1c95a:	e7a5      	b.n	1c8a8 <pyexec_friendly_repl+0x18>
                    goto input_restart;
                } else if (c == CHAR_CTRL_D) {
   1c95c:	79fb      	ldrb	r3, [r7, #7]
   1c95e:	2b04      	cmp	r3, #4
   1c960:	d105      	bne.n	1c96e <pyexec_friendly_repl+0xde>
                    // end of input
                    mp_hal_stdout_tx_str("\r\n");
   1c962:	4832      	ldr	r0, [pc, #200]	; (1ca2c <pyexec_friendly_repl+0x19c>)
   1c964:	f7ff fe2a 	bl	1c5bc <mp_hal_stdout_tx_str>
                    } else {
                        mp_hal_stdout_tx_strn(&c, 1);
                    }
                }
            }
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1c968:	2301      	movs	r3, #1
   1c96a:	61fb      	str	r3, [r7, #28]
   1c96c:	e041      	b.n	1c9f2 <pyexec_friendly_repl+0x162>
                    vstr_add_byte(&line, c);
   1c96e:	79fa      	ldrb	r2, [r7, #7]
   1c970:	f107 0308 	add.w	r3, r7, #8
   1c974:	4611      	mov	r1, r2
   1c976:	4618      	mov	r0, r3
   1c978:	f7e4 fe3e 	bl	15f8 <vstr_add_byte>
                    if (c == '\r') {
   1c97c:	79fb      	ldrb	r3, [r7, #7]
   1c97e:	2b0d      	cmp	r3, #13
   1c980:	d103      	bne.n	1c98a <pyexec_friendly_repl+0xfa>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1c982:	482d      	ldr	r0, [pc, #180]	; (1ca38 <pyexec_friendly_repl+0x1a8>)
   1c984:	f7ff fe1a 	bl	1c5bc <mp_hal_stdout_tx_str>
   1c988:	e7dc      	b.n	1c944 <pyexec_friendly_repl+0xb4>
                        mp_hal_stdout_tx_strn(&c, 1);
   1c98a:	1dfb      	adds	r3, r7, #7
   1c98c:	2101      	movs	r1, #1
   1c98e:	4618      	mov	r0, r3
   1c990:	f7fe fe9a 	bl	1b6c8 <mp_hal_stdout_tx_strn>
            for (;;) {
   1c994:	e7d6      	b.n	1c944 <pyexec_friendly_repl+0xb4>
        } else if (vstr_len(&line) == 0) {
   1c996:	f107 0308 	add.w	r3, r7, #8
   1c99a:	4618      	mov	r0, r3
   1c99c:	f7ff fe2b 	bl	1c5f6 <vstr_len>
   1c9a0:	4603      	mov	r3, r0
   1c9a2:	2b00      	cmp	r3, #0
   1c9a4:	d035      	beq.n	1ca12 <pyexec_friendly_repl+0x182>
            continue;
        } else {
            // got a line with non-zero length, see if it needs continuing
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1c9a6:	e016      	b.n	1c9d6 <pyexec_friendly_repl+0x146>
                vstr_add_byte(&line, '\n');
   1c9a8:	f107 0308 	add.w	r3, r7, #8
   1c9ac:	210a      	movs	r1, #10
   1c9ae:	4618      	mov	r0, r3
   1c9b0:	f7e4 fe22 	bl	15f8 <vstr_add_byte>
                ret = readline(&line, "... ");
   1c9b4:	f107 0308 	add.w	r3, r7, #8
   1c9b8:	4920      	ldr	r1, [pc, #128]	; (1ca3c <pyexec_friendly_repl+0x1ac>)
   1c9ba:	4618      	mov	r0, r3
   1c9bc:	f000 fec2 	bl	1d744 <readline>
   1c9c0:	61b8      	str	r0, [r7, #24]
                if (ret == CHAR_CTRL_C) {
   1c9c2:	69bb      	ldr	r3, [r7, #24]
   1c9c4:	2b03      	cmp	r3, #3
   1c9c6:	d103      	bne.n	1c9d0 <pyexec_friendly_repl+0x140>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1c9c8:	4818      	ldr	r0, [pc, #96]	; (1ca2c <pyexec_friendly_repl+0x19c>)
   1c9ca:	f7ff fdf7 	bl	1c5bc <mp_hal_stdout_tx_str>
                    goto input_restart;
   1c9ce:	e76b      	b.n	1c8a8 <pyexec_friendly_repl+0x18>
                } else if (ret == CHAR_CTRL_D) {
   1c9d0:	69bb      	ldr	r3, [r7, #24]
   1c9d2:	2b04      	cmp	r3, #4
   1c9d4:	d00c      	beq.n	1c9f0 <pyexec_friendly_repl+0x160>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1c9d6:	f107 0308 	add.w	r3, r7, #8
   1c9da:	4618      	mov	r0, r3
   1c9dc:	f7e4 fdf1 	bl	15c2 <vstr_null_terminated_str>
   1c9e0:	4603      	mov	r3, r0
   1c9e2:	4618      	mov	r0, r3
   1c9e4:	f7fe f826 	bl	1aa34 <mp_repl_continue_with_input>
   1c9e8:	4603      	mov	r3, r0
   1c9ea:	2b00      	cmp	r3, #0
   1c9ec:	d1dc      	bne.n	1c9a8 <pyexec_friendly_repl+0x118>
   1c9ee:	e000      	b.n	1c9f2 <pyexec_friendly_repl+0x162>
                    // stop entering compound statement
                    break;
   1c9f0:	bf00      	nop
                }
            }
        }

        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1c9f2:	f107 0308 	add.w	r3, r7, #8
   1c9f6:	2216      	movs	r2, #22
   1c9f8:	69f9      	ldr	r1, [r7, #28]
   1c9fa:	4618      	mov	r0, r3
   1c9fc:	f7ff fe07 	bl	1c60e <parse_compile_execute>
   1ca00:	61b8      	str	r0, [r7, #24]
        if (ret & PYEXEC_FORCED_EXIT) {
   1ca02:	69bb      	ldr	r3, [r7, #24]
   1ca04:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1ca08:	2b00      	cmp	r3, #0
   1ca0a:	f43f af4d 	beq.w	1c8a8 <pyexec_friendly_repl+0x18>
            return ret;
   1ca0e:	69bb      	ldr	r3, [r7, #24]
   1ca10:	e001      	b.n	1ca16 <pyexec_friendly_repl+0x186>
            continue;
   1ca12:	bf00      	nop
    for (;;) {
   1ca14:	e748      	b.n	1c8a8 <pyexec_friendly_repl+0x18>
        }
    }
}
   1ca16:	4618      	mov	r0, r3
   1ca18:	3720      	adds	r7, #32
   1ca1a:	46bd      	mov	sp, r7
   1ca1c:	bd80      	pop	{r7, pc}
   1ca1e:	bf00      	nop
   1ca20:	00025824 	.word	0x00025824
   1ca24:	200012f0 	.word	0x200012f0
   1ca28:	00025880 	.word	0x00025880
   1ca2c:	0002581c 	.word	0x0002581c
   1ca30:	200008bc 	.word	0x200008bc
   1ca34:	00025888 	.word	0x00025888
   1ca38:	000258c0 	.word	0x000258c0
   1ca3c:	000258c8 	.word	0x000258c8

0001ca40 <pyexec_file>:

#endif // MICROPY_REPL_EVENT_DRIVEN
#endif // MICROPY_ENABLE_COMPILER

int pyexec_file(const char *filename) {
   1ca40:	b580      	push	{r7, lr}
   1ca42:	b082      	sub	sp, #8
   1ca44:	af00      	add	r7, sp, #0
   1ca46:	6078      	str	r0, [r7, #4]
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1ca48:	2220      	movs	r2, #32
   1ca4a:	2101      	movs	r1, #1
   1ca4c:	6878      	ldr	r0, [r7, #4]
   1ca4e:	f7ff fdde 	bl	1c60e <parse_compile_execute>
   1ca52:	4603      	mov	r3, r0
}
   1ca54:	4618      	mov	r0, r3
   1ca56:	3708      	adds	r7, #8
   1ca58:	46bd      	mov	sp, r7
   1ca5a:	bd80      	pop	{r7, pc}

0001ca5c <pyexec_frozen_module>:

#if MICROPY_MODULE_FROZEN
int pyexec_frozen_module(const char *name) {
   1ca5c:	b580      	push	{r7, lr}
   1ca5e:	b084      	sub	sp, #16
   1ca60:	af00      	add	r7, sp, #0
   1ca62:	6078      	str	r0, [r7, #4]
    void *frozen_data;
    int frozen_type = mp_find_frozen_module(name, strlen(name), &frozen_data);
   1ca64:	6878      	ldr	r0, [r7, #4]
   1ca66:	f000 f96d 	bl	1cd44 <strlen>
   1ca6a:	4601      	mov	r1, r0
   1ca6c:	f107 0308 	add.w	r3, r7, #8
   1ca70:	461a      	mov	r2, r3
   1ca72:	6878      	ldr	r0, [r7, #4]
   1ca74:	f7fe fb8a 	bl	1b18c <mp_find_frozen_module>
   1ca78:	60f8      	str	r0, [r7, #12]

    switch (frozen_type) {
   1ca7a:	68fb      	ldr	r3, [r7, #12]
   1ca7c:	2b02      	cmp	r3, #2
   1ca7e:	d107      	bne.n	1ca90 <pyexec_frozen_module+0x34>
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, 0);
        #endif

        #if MICROPY_MODULE_FROZEN_MPY
        case MP_FROZEN_MPY:
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_RAW_CODE);
   1ca80:	68bb      	ldr	r3, [r7, #8]
   1ca82:	2208      	movs	r2, #8
   1ca84:	2101      	movs	r1, #1
   1ca86:	4618      	mov	r0, r3
   1ca88:	f7ff fdc1 	bl	1c60e <parse_compile_execute>
   1ca8c:	4603      	mov	r3, r0
   1ca8e:	e004      	b.n	1ca9a <pyexec_frozen_module+0x3e>
        #endif

        default:
            printf("could not find module '%s'\n", name);
   1ca90:	6879      	ldr	r1, [r7, #4]
   1ca92:	4804      	ldr	r0, [pc, #16]	; (1caa4 <pyexec_frozen_module+0x48>)
   1ca94:	f7fe fb92 	bl	1b1bc <printf>
            return false;
   1ca98:	2300      	movs	r3, #0
    }
}
   1ca9a:	4618      	mov	r0, r3
   1ca9c:	3710      	adds	r7, #16
   1ca9e:	46bd      	mov	sp, r7
   1caa0:	bd80      	pop	{r7, pc}
   1caa2:	bf00      	nop
   1caa4:	000258d0 	.word	0x000258d0

0001caa8 <pyb_set_repl_info>:
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1caa8:	b580      	push	{r7, lr}
   1caaa:	b082      	sub	sp, #8
   1caac:	af00      	add	r7, sp, #0
   1caae:	6078      	str	r0, [r7, #4]
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1cab0:	6878      	ldr	r0, [r7, #4]
   1cab2:	f7f0 ffd9 	bl	da68 <mp_obj_get_int>
   1cab6:	4603      	mov	r3, r0
   1cab8:	2b00      	cmp	r3, #0
   1caba:	bf14      	ite	ne
   1cabc:	2301      	movne	r3, #1
   1cabe:	2300      	moveq	r3, #0
   1cac0:	b2da      	uxtb	r2, r3
   1cac2:	4b03      	ldr	r3, [pc, #12]	; (1cad0 <pyb_set_repl_info+0x28>)
   1cac4:	701a      	strb	r2, [r3, #0]
    return mp_const_none;
   1cac6:	4b03      	ldr	r3, [pc, #12]	; (1cad4 <pyb_set_repl_info+0x2c>)
}
   1cac8:	4618      	mov	r0, r3
   1caca:	3708      	adds	r7, #8
   1cacc:	46bd      	mov	sp, r7
   1cace:	bd80      	pop	{r7, pc}
   1cad0:	200012d0 	.word	0x200012d0
   1cad4:	00023108 	.word	0x00023108

0001cad8 <memcpy>:
#include <stdint.h>
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
   1cad8:	b480      	push	{r7}
   1cada:	b08b      	sub	sp, #44	; 0x2c
   1cadc:	af00      	add	r7, sp, #0
   1cade:	60f8      	str	r0, [r7, #12]
   1cae0:	60b9      	str	r1, [r7, #8]
   1cae2:	607a      	str	r2, [r7, #4]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1cae4:	68fb      	ldr	r3, [r7, #12]
   1cae6:	f003 0303 	and.w	r3, r3, #3
   1caea:	2b00      	cmp	r3, #0
   1caec:	bf0c      	ite	eq
   1caee:	2301      	moveq	r3, #1
   1caf0:	2300      	movne	r3, #0
   1caf2:	b2db      	uxtb	r3, r3
   1caf4:	2b00      	cmp	r3, #0
   1caf6:	d038      	beq.n	1cb6a <memcpy+0x92>
   1caf8:	68bb      	ldr	r3, [r7, #8]
   1cafa:	f003 0303 	and.w	r3, r3, #3
   1cafe:	2b00      	cmp	r3, #0
   1cb00:	bf0c      	ite	eq
   1cb02:	2301      	moveq	r3, #1
   1cb04:	2300      	movne	r3, #0
   1cb06:	b2db      	uxtb	r3, r3
   1cb08:	2b00      	cmp	r3, #0
   1cb0a:	d02e      	beq.n	1cb6a <memcpy+0x92>
        // pointers aligned
        uint32_t *d = dst;
   1cb0c:	68fb      	ldr	r3, [r7, #12]
   1cb0e:	627b      	str	r3, [r7, #36]	; 0x24
        const uint32_t *s = src;
   1cb10:	68bb      	ldr	r3, [r7, #8]
   1cb12:	623b      	str	r3, [r7, #32]

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1cb14:	687b      	ldr	r3, [r7, #4]
   1cb16:	089b      	lsrs	r3, r3, #2
   1cb18:	61fb      	str	r3, [r7, #28]
   1cb1a:	e00a      	b.n	1cb32 <memcpy+0x5a>
            *d++ = *s++;
   1cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cb1e:	1d1a      	adds	r2, r3, #4
   1cb20:	627a      	str	r2, [r7, #36]	; 0x24
   1cb22:	6a3a      	ldr	r2, [r7, #32]
   1cb24:	1d11      	adds	r1, r2, #4
   1cb26:	6239      	str	r1, [r7, #32]
   1cb28:	6812      	ldr	r2, [r2, #0]
   1cb2a:	601a      	str	r2, [r3, #0]
        for (size_t i = (n >> 2); i; i--) {
   1cb2c:	69fb      	ldr	r3, [r7, #28]
   1cb2e:	3b01      	subs	r3, #1
   1cb30:	61fb      	str	r3, [r7, #28]
   1cb32:	69fb      	ldr	r3, [r7, #28]
   1cb34:	2b00      	cmp	r3, #0
   1cb36:	d1f1      	bne.n	1cb1c <memcpy+0x44>
        }

        if (n & 2) {
   1cb38:	687b      	ldr	r3, [r7, #4]
   1cb3a:	f003 0302 	and.w	r3, r3, #2
   1cb3e:	2b00      	cmp	r3, #0
   1cb40:	d009      	beq.n	1cb56 <memcpy+0x7e>
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1cb42:	6a3b      	ldr	r3, [r7, #32]
   1cb44:	881a      	ldrh	r2, [r3, #0]
   1cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cb48:	801a      	strh	r2, [r3, #0]
            d = (uint32_t*)((uint16_t*)d + 1);
   1cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cb4c:	3302      	adds	r3, #2
   1cb4e:	627b      	str	r3, [r7, #36]	; 0x24
            s = (const uint32_t*)((const uint16_t*)s + 1);
   1cb50:	6a3b      	ldr	r3, [r7, #32]
   1cb52:	3302      	adds	r3, #2
   1cb54:	623b      	str	r3, [r7, #32]
        }

        if (n & 1) {
   1cb56:	687b      	ldr	r3, [r7, #4]
   1cb58:	f003 0301 	and.w	r3, r3, #1
   1cb5c:	2b00      	cmp	r3, #0
   1cb5e:	d018      	beq.n	1cb92 <memcpy+0xba>
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1cb60:	6a3b      	ldr	r3, [r7, #32]
   1cb62:	781a      	ldrb	r2, [r3, #0]
   1cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cb66:	701a      	strb	r2, [r3, #0]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1cb68:	e013      	b.n	1cb92 <memcpy+0xba>
        }
    } else {
        // unaligned access, copy bytes
        uint8_t *d = dst;
   1cb6a:	68fb      	ldr	r3, [r7, #12]
   1cb6c:	61bb      	str	r3, [r7, #24]
        const uint8_t *s = src;
   1cb6e:	68bb      	ldr	r3, [r7, #8]
   1cb70:	617b      	str	r3, [r7, #20]

        for (; n; n--) {
   1cb72:	e00a      	b.n	1cb8a <memcpy+0xb2>
            *d++ = *s++;
   1cb74:	69bb      	ldr	r3, [r7, #24]
   1cb76:	1c5a      	adds	r2, r3, #1
   1cb78:	61ba      	str	r2, [r7, #24]
   1cb7a:	697a      	ldr	r2, [r7, #20]
   1cb7c:	1c51      	adds	r1, r2, #1
   1cb7e:	6179      	str	r1, [r7, #20]
   1cb80:	7812      	ldrb	r2, [r2, #0]
   1cb82:	701a      	strb	r2, [r3, #0]
        for (; n; n--) {
   1cb84:	687b      	ldr	r3, [r7, #4]
   1cb86:	3b01      	subs	r3, #1
   1cb88:	607b      	str	r3, [r7, #4]
   1cb8a:	687b      	ldr	r3, [r7, #4]
   1cb8c:	2b00      	cmp	r3, #0
   1cb8e:	d1f1      	bne.n	1cb74 <memcpy+0x9c>
   1cb90:	e000      	b.n	1cb94 <memcpy+0xbc>
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1cb92:	bf00      	nop
        }
    }

    return dst;
   1cb94:	68fb      	ldr	r3, [r7, #12]
}
   1cb96:	4618      	mov	r0, r3
   1cb98:	372c      	adds	r7, #44	; 0x2c
   1cb9a:	46bd      	mov	sp, r7
   1cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cba0:	4770      	bx	lr

0001cba2 <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
   1cba2:	b580      	push	{r7, lr}
   1cba4:	b086      	sub	sp, #24
   1cba6:	af00      	add	r7, sp, #0
   1cba8:	60f8      	str	r0, [r7, #12]
   1cbaa:	60b9      	str	r1, [r7, #8]
   1cbac:	607a      	str	r2, [r7, #4]
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1cbae:	68ba      	ldr	r2, [r7, #8]
   1cbb0:	68fb      	ldr	r3, [r7, #12]
   1cbb2:	429a      	cmp	r2, r3
   1cbb4:	d220      	bcs.n	1cbf8 <memmove+0x56>
   1cbb6:	68ba      	ldr	r2, [r7, #8]
   1cbb8:	687b      	ldr	r3, [r7, #4]
   1cbba:	441a      	add	r2, r3
   1cbbc:	68fb      	ldr	r3, [r7, #12]
   1cbbe:	429a      	cmp	r2, r3
   1cbc0:	d91a      	bls.n	1cbf8 <memmove+0x56>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1cbc2:	687b      	ldr	r3, [r7, #4]
   1cbc4:	3b01      	subs	r3, #1
   1cbc6:	68fa      	ldr	r2, [r7, #12]
   1cbc8:	4413      	add	r3, r2
   1cbca:	617b      	str	r3, [r7, #20]
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1cbcc:	687b      	ldr	r3, [r7, #4]
   1cbce:	3b01      	subs	r3, #1
   1cbd0:	68ba      	ldr	r2, [r7, #8]
   1cbd2:	4413      	add	r3, r2
   1cbd4:	613b      	str	r3, [r7, #16]
        for (; n > 0; n--) {
   1cbd6:	e00a      	b.n	1cbee <memmove+0x4c>
            *d-- = *s--;
   1cbd8:	697b      	ldr	r3, [r7, #20]
   1cbda:	1e5a      	subs	r2, r3, #1
   1cbdc:	617a      	str	r2, [r7, #20]
   1cbde:	693a      	ldr	r2, [r7, #16]
   1cbe0:	1e51      	subs	r1, r2, #1
   1cbe2:	6139      	str	r1, [r7, #16]
   1cbe4:	7812      	ldrb	r2, [r2, #0]
   1cbe6:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1cbe8:	687b      	ldr	r3, [r7, #4]
   1cbea:	3b01      	subs	r3, #1
   1cbec:	607b      	str	r3, [r7, #4]
   1cbee:	687b      	ldr	r3, [r7, #4]
   1cbf0:	2b00      	cmp	r3, #0
   1cbf2:	d1f1      	bne.n	1cbd8 <memmove+0x36>
        }
        return dest;
   1cbf4:	68fb      	ldr	r3, [r7, #12]
   1cbf6:	e005      	b.n	1cc04 <memmove+0x62>
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
   1cbf8:	687a      	ldr	r2, [r7, #4]
   1cbfa:	68b9      	ldr	r1, [r7, #8]
   1cbfc:	68f8      	ldr	r0, [r7, #12]
   1cbfe:	f7ff ff6b 	bl	1cad8 <memcpy>
   1cc02:	4603      	mov	r3, r0
    }
}
   1cc04:	4618      	mov	r0, r3
   1cc06:	3718      	adds	r7, #24
   1cc08:	46bd      	mov	sp, r7
   1cc0a:	bd80      	pop	{r7, pc}

0001cc0c <memset>:

void *memset(void *s, int c, size_t n) {
   1cc0c:	b480      	push	{r7}
   1cc0e:	b089      	sub	sp, #36	; 0x24
   1cc10:	af00      	add	r7, sp, #0
   1cc12:	60f8      	str	r0, [r7, #12]
   1cc14:	60b9      	str	r1, [r7, #8]
   1cc16:	607a      	str	r2, [r7, #4]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1cc18:	68bb      	ldr	r3, [r7, #8]
   1cc1a:	2b00      	cmp	r3, #0
   1cc1c:	d129      	bne.n	1cc72 <memset+0x66>
   1cc1e:	68fb      	ldr	r3, [r7, #12]
   1cc20:	f003 0303 	and.w	r3, r3, #3
   1cc24:	2b00      	cmp	r3, #0
   1cc26:	d124      	bne.n	1cc72 <memset+0x66>
        // aligned store of 0
        uint32_t *s32 = s;
   1cc28:	68fb      	ldr	r3, [r7, #12]
   1cc2a:	61fb      	str	r3, [r7, #28]
        for (size_t i = n >> 2; i > 0; i--) {
   1cc2c:	687b      	ldr	r3, [r7, #4]
   1cc2e:	089b      	lsrs	r3, r3, #2
   1cc30:	61bb      	str	r3, [r7, #24]
   1cc32:	e007      	b.n	1cc44 <memset+0x38>
            *s32++ = 0;
   1cc34:	69fb      	ldr	r3, [r7, #28]
   1cc36:	1d1a      	adds	r2, r3, #4
   1cc38:	61fa      	str	r2, [r7, #28]
   1cc3a:	2200      	movs	r2, #0
   1cc3c:	601a      	str	r2, [r3, #0]
        for (size_t i = n >> 2; i > 0; i--) {
   1cc3e:	69bb      	ldr	r3, [r7, #24]
   1cc40:	3b01      	subs	r3, #1
   1cc42:	61bb      	str	r3, [r7, #24]
   1cc44:	69bb      	ldr	r3, [r7, #24]
   1cc46:	2b00      	cmp	r3, #0
   1cc48:	d1f4      	bne.n	1cc34 <memset+0x28>
        }
        if (n & 2) {
   1cc4a:	687b      	ldr	r3, [r7, #4]
   1cc4c:	f003 0302 	and.w	r3, r3, #2
   1cc50:	2b00      	cmp	r3, #0
   1cc52:	d005      	beq.n	1cc60 <memset+0x54>
            *((uint16_t*)s32) = 0;
   1cc54:	69fb      	ldr	r3, [r7, #28]
   1cc56:	2200      	movs	r2, #0
   1cc58:	801a      	strh	r2, [r3, #0]
            s32 = (uint32_t*)((uint16_t*)s32 + 1);
   1cc5a:	69fb      	ldr	r3, [r7, #28]
   1cc5c:	3302      	adds	r3, #2
   1cc5e:	61fb      	str	r3, [r7, #28]
        }
        if (n & 1) {
   1cc60:	687b      	ldr	r3, [r7, #4]
   1cc62:	f003 0301 	and.w	r3, r3, #1
   1cc66:	2b00      	cmp	r3, #0
   1cc68:	d013      	beq.n	1cc92 <memset+0x86>
            *((uint8_t*)s32) = 0;
   1cc6a:	69fb      	ldr	r3, [r7, #28]
   1cc6c:	2200      	movs	r2, #0
   1cc6e:	701a      	strb	r2, [r3, #0]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1cc70:	e00f      	b.n	1cc92 <memset+0x86>
        }
    } else {
        uint8_t *s2 = s;
   1cc72:	68fb      	ldr	r3, [r7, #12]
   1cc74:	617b      	str	r3, [r7, #20]
        for (; n > 0; n--) {
   1cc76:	e008      	b.n	1cc8a <memset+0x7e>
            *s2++ = c;
   1cc78:	697b      	ldr	r3, [r7, #20]
   1cc7a:	1c5a      	adds	r2, r3, #1
   1cc7c:	617a      	str	r2, [r7, #20]
   1cc7e:	68ba      	ldr	r2, [r7, #8]
   1cc80:	b2d2      	uxtb	r2, r2
   1cc82:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1cc84:	687b      	ldr	r3, [r7, #4]
   1cc86:	3b01      	subs	r3, #1
   1cc88:	607b      	str	r3, [r7, #4]
   1cc8a:	687b      	ldr	r3, [r7, #4]
   1cc8c:	2b00      	cmp	r3, #0
   1cc8e:	d1f3      	bne.n	1cc78 <memset+0x6c>
   1cc90:	e000      	b.n	1cc94 <memset+0x88>
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1cc92:	bf00      	nop
        }
    }
    return s;
   1cc94:	68fb      	ldr	r3, [r7, #12]
}
   1cc96:	4618      	mov	r0, r3
   1cc98:	3724      	adds	r7, #36	; 0x24
   1cc9a:	46bd      	mov	sp, r7
   1cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cca0:	4770      	bx	lr

0001cca2 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1cca2:	b480      	push	{r7}
   1cca4:	b089      	sub	sp, #36	; 0x24
   1cca6:	af00      	add	r7, sp, #0
   1cca8:	60f8      	str	r0, [r7, #12]
   1ccaa:	60b9      	str	r1, [r7, #8]
   1ccac:	607a      	str	r2, [r7, #4]
    const uint8_t *s1_8 = s1;
   1ccae:	68fb      	ldr	r3, [r7, #12]
   1ccb0:	61fb      	str	r3, [r7, #28]
    const uint8_t *s2_8 = s2;
   1ccb2:	68bb      	ldr	r3, [r7, #8]
   1ccb4:	61bb      	str	r3, [r7, #24]
    while (n--) {
   1ccb6:	e016      	b.n	1cce6 <memcmp+0x44>
        char c1 = *s1_8++;
   1ccb8:	69fb      	ldr	r3, [r7, #28]
   1ccba:	1c5a      	adds	r2, r3, #1
   1ccbc:	61fa      	str	r2, [r7, #28]
   1ccbe:	781b      	ldrb	r3, [r3, #0]
   1ccc0:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2_8++;
   1ccc2:	69bb      	ldr	r3, [r7, #24]
   1ccc4:	1c5a      	adds	r2, r3, #1
   1ccc6:	61ba      	str	r2, [r7, #24]
   1ccc8:	781b      	ldrb	r3, [r3, #0]
   1ccca:	75bb      	strb	r3, [r7, #22]
        if (c1 < c2) return -1;
   1cccc:	7dfa      	ldrb	r2, [r7, #23]
   1ccce:	7dbb      	ldrb	r3, [r7, #22]
   1ccd0:	429a      	cmp	r2, r3
   1ccd2:	d202      	bcs.n	1ccda <memcmp+0x38>
   1ccd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ccd8:	e00b      	b.n	1ccf2 <memcmp+0x50>
        else if (c1 > c2) return 1;
   1ccda:	7dfa      	ldrb	r2, [r7, #23]
   1ccdc:	7dbb      	ldrb	r3, [r7, #22]
   1ccde:	429a      	cmp	r2, r3
   1cce0:	d901      	bls.n	1cce6 <memcmp+0x44>
   1cce2:	2301      	movs	r3, #1
   1cce4:	e005      	b.n	1ccf2 <memcmp+0x50>
    while (n--) {
   1cce6:	687b      	ldr	r3, [r7, #4]
   1cce8:	1e5a      	subs	r2, r3, #1
   1ccea:	607a      	str	r2, [r7, #4]
   1ccec:	2b00      	cmp	r3, #0
   1ccee:	d1e3      	bne.n	1ccb8 <memcmp+0x16>
    }
    return 0;
   1ccf0:	2300      	movs	r3, #0
}
   1ccf2:	4618      	mov	r0, r3
   1ccf4:	3724      	adds	r7, #36	; 0x24
   1ccf6:	46bd      	mov	sp, r7
   1ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ccfc:	4770      	bx	lr

0001ccfe <memchr>:

void *memchr(const void *s, int c, size_t n) {
   1ccfe:	b480      	push	{r7}
   1cd00:	b087      	sub	sp, #28
   1cd02:	af00      	add	r7, sp, #0
   1cd04:	60f8      	str	r0, [r7, #12]
   1cd06:	60b9      	str	r1, [r7, #8]
   1cd08:	607a      	str	r2, [r7, #4]
    if (n != 0) {
   1cd0a:	687b      	ldr	r3, [r7, #4]
   1cd0c:	2b00      	cmp	r3, #0
   1cd0e:	d012      	beq.n	1cd36 <memchr+0x38>
        const unsigned char *p = s;
   1cd10:	68fb      	ldr	r3, [r7, #12]
   1cd12:	617b      	str	r3, [r7, #20]

        do {
            if (*p++ == c)
   1cd14:	697b      	ldr	r3, [r7, #20]
   1cd16:	1c5a      	adds	r2, r3, #1
   1cd18:	617a      	str	r2, [r7, #20]
   1cd1a:	781b      	ldrb	r3, [r3, #0]
   1cd1c:	461a      	mov	r2, r3
   1cd1e:	68bb      	ldr	r3, [r7, #8]
   1cd20:	429a      	cmp	r2, r3
   1cd22:	d102      	bne.n	1cd2a <memchr+0x2c>
                return ((void *)(p - 1));
   1cd24:	697b      	ldr	r3, [r7, #20]
   1cd26:	3b01      	subs	r3, #1
   1cd28:	e006      	b.n	1cd38 <memchr+0x3a>
        } while (--n != 0);
   1cd2a:	687b      	ldr	r3, [r7, #4]
   1cd2c:	3b01      	subs	r3, #1
   1cd2e:	607b      	str	r3, [r7, #4]
   1cd30:	687b      	ldr	r3, [r7, #4]
   1cd32:	2b00      	cmp	r3, #0
   1cd34:	d1ee      	bne.n	1cd14 <memchr+0x16>
    }
    return 0;
   1cd36:	2300      	movs	r3, #0
}
   1cd38:	4618      	mov	r0, r3
   1cd3a:	371c      	adds	r7, #28
   1cd3c:	46bd      	mov	sp, r7
   1cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cd42:	4770      	bx	lr

0001cd44 <strlen>:

size_t strlen(const char *str) {
   1cd44:	b480      	push	{r7}
   1cd46:	b085      	sub	sp, #20
   1cd48:	af00      	add	r7, sp, #0
   1cd4a:	6078      	str	r0, [r7, #4]
    int len = 0;
   1cd4c:	2300      	movs	r3, #0
   1cd4e:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1cd50:	687b      	ldr	r3, [r7, #4]
   1cd52:	60bb      	str	r3, [r7, #8]
   1cd54:	e005      	b.n	1cd62 <strlen+0x1e>
        len += 1;
   1cd56:	68fb      	ldr	r3, [r7, #12]
   1cd58:	3301      	adds	r3, #1
   1cd5a:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1cd5c:	68bb      	ldr	r3, [r7, #8]
   1cd5e:	3301      	adds	r3, #1
   1cd60:	60bb      	str	r3, [r7, #8]
   1cd62:	68bb      	ldr	r3, [r7, #8]
   1cd64:	781b      	ldrb	r3, [r3, #0]
   1cd66:	2b00      	cmp	r3, #0
   1cd68:	d1f5      	bne.n	1cd56 <strlen+0x12>
    }
    return len;
   1cd6a:	68fb      	ldr	r3, [r7, #12]
}
   1cd6c:	4618      	mov	r0, r3
   1cd6e:	3714      	adds	r7, #20
   1cd70:	46bd      	mov	sp, r7
   1cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cd76:	4770      	bx	lr

0001cd78 <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1cd78:	b480      	push	{r7}
   1cd7a:	b085      	sub	sp, #20
   1cd7c:	af00      	add	r7, sp, #0
   1cd7e:	6078      	str	r0, [r7, #4]
   1cd80:	6039      	str	r1, [r7, #0]
    while (*s1 && *s2) {
   1cd82:	e016      	b.n	1cdb2 <strcmp+0x3a>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1cd84:	687b      	ldr	r3, [r7, #4]
   1cd86:	1c5a      	adds	r2, r3, #1
   1cd88:	607a      	str	r2, [r7, #4]
   1cd8a:	781b      	ldrb	r3, [r3, #0]
   1cd8c:	73fb      	strb	r3, [r7, #15]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1cd8e:	683b      	ldr	r3, [r7, #0]
   1cd90:	1c5a      	adds	r2, r3, #1
   1cd92:	603a      	str	r2, [r7, #0]
   1cd94:	781b      	ldrb	r3, [r3, #0]
   1cd96:	73bb      	strb	r3, [r7, #14]
        if (c1 < c2) return -1;
   1cd98:	7bfa      	ldrb	r2, [r7, #15]
   1cd9a:	7bbb      	ldrb	r3, [r7, #14]
   1cd9c:	429a      	cmp	r2, r3
   1cd9e:	d202      	bcs.n	1cda6 <strcmp+0x2e>
   1cda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cda4:	e01b      	b.n	1cdde <strcmp+0x66>
        else if (c1 > c2) return 1;
   1cda6:	7bfa      	ldrb	r2, [r7, #15]
   1cda8:	7bbb      	ldrb	r3, [r7, #14]
   1cdaa:	429a      	cmp	r2, r3
   1cdac:	d901      	bls.n	1cdb2 <strcmp+0x3a>
   1cdae:	2301      	movs	r3, #1
   1cdb0:	e015      	b.n	1cdde <strcmp+0x66>
    while (*s1 && *s2) {
   1cdb2:	687b      	ldr	r3, [r7, #4]
   1cdb4:	781b      	ldrb	r3, [r3, #0]
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	d003      	beq.n	1cdc2 <strcmp+0x4a>
   1cdba:	683b      	ldr	r3, [r7, #0]
   1cdbc:	781b      	ldrb	r3, [r3, #0]
   1cdbe:	2b00      	cmp	r3, #0
   1cdc0:	d1e0      	bne.n	1cd84 <strcmp+0xc>
    }
    if (*s2) return -1;
   1cdc2:	683b      	ldr	r3, [r7, #0]
   1cdc4:	781b      	ldrb	r3, [r3, #0]
   1cdc6:	2b00      	cmp	r3, #0
   1cdc8:	d002      	beq.n	1cdd0 <strcmp+0x58>
   1cdca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cdce:	e006      	b.n	1cdde <strcmp+0x66>
    else if (*s1) return 1;
   1cdd0:	687b      	ldr	r3, [r7, #4]
   1cdd2:	781b      	ldrb	r3, [r3, #0]
   1cdd4:	2b00      	cmp	r3, #0
   1cdd6:	d001      	beq.n	1cddc <strcmp+0x64>
   1cdd8:	2301      	movs	r3, #1
   1cdda:	e000      	b.n	1cdde <strcmp+0x66>
    else return 0;
   1cddc:	2300      	movs	r3, #0
}
   1cdde:	4618      	mov	r0, r3
   1cde0:	3714      	adds	r7, #20
   1cde2:	46bd      	mov	sp, r7
   1cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cde8:	4770      	bx	lr

0001cdea <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1cdea:	b480      	push	{r7}
   1cdec:	b087      	sub	sp, #28
   1cdee:	af00      	add	r7, sp, #0
   1cdf0:	60f8      	str	r0, [r7, #12]
   1cdf2:	60b9      	str	r1, [r7, #8]
   1cdf4:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
   1cdf6:	e019      	b.n	1ce2c <strncmp+0x42>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1cdf8:	68fb      	ldr	r3, [r7, #12]
   1cdfa:	1c5a      	adds	r2, r3, #1
   1cdfc:	60fa      	str	r2, [r7, #12]
   1cdfe:	781b      	ldrb	r3, [r3, #0]
   1ce00:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1ce02:	68bb      	ldr	r3, [r7, #8]
   1ce04:	1c5a      	adds	r2, r3, #1
   1ce06:	60ba      	str	r2, [r7, #8]
   1ce08:	781b      	ldrb	r3, [r3, #0]
   1ce0a:	75bb      	strb	r3, [r7, #22]
        n--;
   1ce0c:	687b      	ldr	r3, [r7, #4]
   1ce0e:	3b01      	subs	r3, #1
   1ce10:	607b      	str	r3, [r7, #4]
        if (c1 < c2) return -1;
   1ce12:	7dfa      	ldrb	r2, [r7, #23]
   1ce14:	7dbb      	ldrb	r3, [r7, #22]
   1ce16:	429a      	cmp	r2, r3
   1ce18:	d202      	bcs.n	1ce20 <strncmp+0x36>
   1ce1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ce1e:	e023      	b.n	1ce68 <strncmp+0x7e>
        else if (c1 > c2) return 1;
   1ce20:	7dfa      	ldrb	r2, [r7, #23]
   1ce22:	7dbb      	ldrb	r3, [r7, #22]
   1ce24:	429a      	cmp	r2, r3
   1ce26:	d901      	bls.n	1ce2c <strncmp+0x42>
   1ce28:	2301      	movs	r3, #1
   1ce2a:	e01d      	b.n	1ce68 <strncmp+0x7e>
    while (*s1 && *s2 && n > 0) {
   1ce2c:	68fb      	ldr	r3, [r7, #12]
   1ce2e:	781b      	ldrb	r3, [r3, #0]
   1ce30:	2b00      	cmp	r3, #0
   1ce32:	d006      	beq.n	1ce42 <strncmp+0x58>
   1ce34:	68bb      	ldr	r3, [r7, #8]
   1ce36:	781b      	ldrb	r3, [r3, #0]
   1ce38:	2b00      	cmp	r3, #0
   1ce3a:	d002      	beq.n	1ce42 <strncmp+0x58>
   1ce3c:	687b      	ldr	r3, [r7, #4]
   1ce3e:	2b00      	cmp	r3, #0
   1ce40:	d1da      	bne.n	1cdf8 <strncmp+0xe>
    }
    if (n == 0) return 0;
   1ce42:	687b      	ldr	r3, [r7, #4]
   1ce44:	2b00      	cmp	r3, #0
   1ce46:	d101      	bne.n	1ce4c <strncmp+0x62>
   1ce48:	2300      	movs	r3, #0
   1ce4a:	e00d      	b.n	1ce68 <strncmp+0x7e>
    else if (*s2) return -1;
   1ce4c:	68bb      	ldr	r3, [r7, #8]
   1ce4e:	781b      	ldrb	r3, [r3, #0]
   1ce50:	2b00      	cmp	r3, #0
   1ce52:	d002      	beq.n	1ce5a <strncmp+0x70>
   1ce54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ce58:	e006      	b.n	1ce68 <strncmp+0x7e>
    else if (*s1) return 1;
   1ce5a:	68fb      	ldr	r3, [r7, #12]
   1ce5c:	781b      	ldrb	r3, [r3, #0]
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	d001      	beq.n	1ce66 <strncmp+0x7c>
   1ce62:	2301      	movs	r3, #1
   1ce64:	e000      	b.n	1ce68 <strncmp+0x7e>
    else return 0;
   1ce66:	2300      	movs	r3, #0
}
   1ce68:	4618      	mov	r0, r3
   1ce6a:	371c      	adds	r7, #28
   1ce6c:	46bd      	mov	sp, r7
   1ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ce72:	4770      	bx	lr

0001ce74 <strcpy>:

char *strcpy(char *dest, const char *src) {
   1ce74:	b480      	push	{r7}
   1ce76:	b085      	sub	sp, #20
   1ce78:	af00      	add	r7, sp, #0
   1ce7a:	6078      	str	r0, [r7, #4]
   1ce7c:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1ce7e:	687b      	ldr	r3, [r7, #4]
   1ce80:	60fb      	str	r3, [r7, #12]
    while (*src) {
   1ce82:	e007      	b.n	1ce94 <strcpy+0x20>
        *d++ = *src++;
   1ce84:	68fb      	ldr	r3, [r7, #12]
   1ce86:	1c5a      	adds	r2, r3, #1
   1ce88:	60fa      	str	r2, [r7, #12]
   1ce8a:	683a      	ldr	r2, [r7, #0]
   1ce8c:	1c51      	adds	r1, r2, #1
   1ce8e:	6039      	str	r1, [r7, #0]
   1ce90:	7812      	ldrb	r2, [r2, #0]
   1ce92:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1ce94:	683b      	ldr	r3, [r7, #0]
   1ce96:	781b      	ldrb	r3, [r3, #0]
   1ce98:	2b00      	cmp	r3, #0
   1ce9a:	d1f3      	bne.n	1ce84 <strcpy+0x10>
    }
    *d = '\0';
   1ce9c:	68fb      	ldr	r3, [r7, #12]
   1ce9e:	2200      	movs	r2, #0
   1cea0:	701a      	strb	r2, [r3, #0]
    return dest;
   1cea2:	687b      	ldr	r3, [r7, #4]
}
   1cea4:	4618      	mov	r0, r3
   1cea6:	3714      	adds	r7, #20
   1cea8:	46bd      	mov	sp, r7
   1ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ceae:	4770      	bx	lr

0001ceb0 <stpcpy>:

// needed because gcc optimises strcpy + strcat to this
char *stpcpy(char *dest, const char *src) {
   1ceb0:	b480      	push	{r7}
   1ceb2:	b083      	sub	sp, #12
   1ceb4:	af00      	add	r7, sp, #0
   1ceb6:	6078      	str	r0, [r7, #4]
   1ceb8:	6039      	str	r1, [r7, #0]
    while (*src) {
   1ceba:	e007      	b.n	1cecc <stpcpy+0x1c>
        *dest++ = *src++;
   1cebc:	687b      	ldr	r3, [r7, #4]
   1cebe:	1c5a      	adds	r2, r3, #1
   1cec0:	607a      	str	r2, [r7, #4]
   1cec2:	683a      	ldr	r2, [r7, #0]
   1cec4:	1c51      	adds	r1, r2, #1
   1cec6:	6039      	str	r1, [r7, #0]
   1cec8:	7812      	ldrb	r2, [r2, #0]
   1ceca:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1cecc:	683b      	ldr	r3, [r7, #0]
   1cece:	781b      	ldrb	r3, [r3, #0]
   1ced0:	2b00      	cmp	r3, #0
   1ced2:	d1f3      	bne.n	1cebc <stpcpy+0xc>
    }
    *dest = '\0';
   1ced4:	687b      	ldr	r3, [r7, #4]
   1ced6:	2200      	movs	r2, #0
   1ced8:	701a      	strb	r2, [r3, #0]
    return dest;
   1ceda:	687b      	ldr	r3, [r7, #4]
}
   1cedc:	4618      	mov	r0, r3
   1cede:	370c      	adds	r7, #12
   1cee0:	46bd      	mov	sp, r7
   1cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cee6:	4770      	bx	lr

0001cee8 <strcat>:

char *strcat(char *dest, const char *src) {
   1cee8:	b480      	push	{r7}
   1ceea:	b085      	sub	sp, #20
   1ceec:	af00      	add	r7, sp, #0
   1ceee:	6078      	str	r0, [r7, #4]
   1cef0:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1cef2:	687b      	ldr	r3, [r7, #4]
   1cef4:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1cef6:	e002      	b.n	1cefe <strcat+0x16>
        d++;
   1cef8:	68fb      	ldr	r3, [r7, #12]
   1cefa:	3301      	adds	r3, #1
   1cefc:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1cefe:	68fb      	ldr	r3, [r7, #12]
   1cf00:	781b      	ldrb	r3, [r3, #0]
   1cf02:	2b00      	cmp	r3, #0
   1cf04:	d1f8      	bne.n	1cef8 <strcat+0x10>
    }
    while (*src) {
   1cf06:	e007      	b.n	1cf18 <strcat+0x30>
        *d++ = *src++;
   1cf08:	68fb      	ldr	r3, [r7, #12]
   1cf0a:	1c5a      	adds	r2, r3, #1
   1cf0c:	60fa      	str	r2, [r7, #12]
   1cf0e:	683a      	ldr	r2, [r7, #0]
   1cf10:	1c51      	adds	r1, r2, #1
   1cf12:	6039      	str	r1, [r7, #0]
   1cf14:	7812      	ldrb	r2, [r2, #0]
   1cf16:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1cf18:	683b      	ldr	r3, [r7, #0]
   1cf1a:	781b      	ldrb	r3, [r3, #0]
   1cf1c:	2b00      	cmp	r3, #0
   1cf1e:	d1f3      	bne.n	1cf08 <strcat+0x20>
    }
    *d = '\0';
   1cf20:	68fb      	ldr	r3, [r7, #12]
   1cf22:	2200      	movs	r2, #0
   1cf24:	701a      	strb	r2, [r3, #0]
    return dest;
   1cf26:	687b      	ldr	r3, [r7, #4]
}
   1cf28:	4618      	mov	r0, r3
   1cf2a:	3714      	adds	r7, #20
   1cf2c:	46bd      	mov	sp, r7
   1cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf32:	4770      	bx	lr

0001cf34 <strchr>:

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1cf34:	b480      	push	{r7}
   1cf36:	b083      	sub	sp, #12
   1cf38:	af00      	add	r7, sp, #0
   1cf3a:	6078      	str	r0, [r7, #4]
   1cf3c:	6039      	str	r1, [r7, #0]
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1cf3e:	e002      	b.n	1cf46 <strchr+0x12>
        s++;
   1cf40:	687b      	ldr	r3, [r7, #4]
   1cf42:	3301      	adds	r3, #1
   1cf44:	607b      	str	r3, [r7, #4]
    while (*s != '\0' && *s != (char)c)
   1cf46:	687b      	ldr	r3, [r7, #4]
   1cf48:	781b      	ldrb	r3, [r3, #0]
   1cf4a:	2b00      	cmp	r3, #0
   1cf4c:	d005      	beq.n	1cf5a <strchr+0x26>
   1cf4e:	687b      	ldr	r3, [r7, #4]
   1cf50:	781a      	ldrb	r2, [r3, #0]
   1cf52:	683b      	ldr	r3, [r7, #0]
   1cf54:	b2db      	uxtb	r3, r3
   1cf56:	429a      	cmp	r2, r3
   1cf58:	d1f2      	bne.n	1cf40 <strchr+0xc>
    return ((*s == c) ? (char *) s : 0);
   1cf5a:	687b      	ldr	r3, [r7, #4]
   1cf5c:	781b      	ldrb	r3, [r3, #0]
   1cf5e:	461a      	mov	r2, r3
   1cf60:	683b      	ldr	r3, [r7, #0]
   1cf62:	429a      	cmp	r2, r3
   1cf64:	d101      	bne.n	1cf6a <strchr+0x36>
   1cf66:	687b      	ldr	r3, [r7, #4]
   1cf68:	e000      	b.n	1cf6c <strchr+0x38>
   1cf6a:	2300      	movs	r3, #0
}
   1cf6c:	4618      	mov	r0, r3
   1cf6e:	370c      	adds	r7, #12
   1cf70:	46bd      	mov	sp, r7
   1cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf76:	4770      	bx	lr

0001cf78 <strstr>:


// Public Domain implementation of strstr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strstr_function
char *strstr(const char *haystack, const char *needle)
{
   1cf78:	b580      	push	{r7, lr}
   1cf7a:	b084      	sub	sp, #16
   1cf7c:	af00      	add	r7, sp, #0
   1cf7e:	6078      	str	r0, [r7, #4]
   1cf80:	6039      	str	r1, [r7, #0]
    size_t needlelen;
    /* Check for the null needle case.  */
    if (*needle == '\0')
   1cf82:	683b      	ldr	r3, [r7, #0]
   1cf84:	781b      	ldrb	r3, [r3, #0]
   1cf86:	2b00      	cmp	r3, #0
   1cf88:	d101      	bne.n	1cf8e <strstr+0x16>
        return (char *) haystack;
   1cf8a:	687b      	ldr	r3, [r7, #4]
   1cf8c:	e01c      	b.n	1cfc8 <strstr+0x50>
    needlelen = strlen(needle);
   1cf8e:	6838      	ldr	r0, [r7, #0]
   1cf90:	f7ff fed8 	bl	1cd44 <strlen>
   1cf94:	60f8      	str	r0, [r7, #12]
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1cf96:	e00c      	b.n	1cfb2 <strstr+0x3a>
        if (strncmp(haystack, needle, needlelen) == 0)
   1cf98:	68fa      	ldr	r2, [r7, #12]
   1cf9a:	6839      	ldr	r1, [r7, #0]
   1cf9c:	6878      	ldr	r0, [r7, #4]
   1cf9e:	f7ff ff24 	bl	1cdea <strncmp>
   1cfa2:	4603      	mov	r3, r0
   1cfa4:	2b00      	cmp	r3, #0
   1cfa6:	d101      	bne.n	1cfac <strstr+0x34>
            return (char *) haystack;
   1cfa8:	687b      	ldr	r3, [r7, #4]
   1cfaa:	e00d      	b.n	1cfc8 <strstr+0x50>
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1cfac:	687b      	ldr	r3, [r7, #4]
   1cfae:	3301      	adds	r3, #1
   1cfb0:	607b      	str	r3, [r7, #4]
   1cfb2:	683b      	ldr	r3, [r7, #0]
   1cfb4:	781b      	ldrb	r3, [r3, #0]
   1cfb6:	4619      	mov	r1, r3
   1cfb8:	6878      	ldr	r0, [r7, #4]
   1cfba:	f7ff ffbb 	bl	1cf34 <strchr>
   1cfbe:	6078      	str	r0, [r7, #4]
   1cfc0:	687b      	ldr	r3, [r7, #4]
   1cfc2:	2b00      	cmp	r3, #0
   1cfc4:	d1e8      	bne.n	1cf98 <strstr+0x20>
    return 0;
   1cfc6:	2300      	movs	r3, #0
}
   1cfc8:	4618      	mov	r0, r3
   1cfca:	3710      	adds	r7, #16
   1cfcc:	46bd      	mov	sp, r7
   1cfce:	bd80      	pop	{r7, pc}

0001cfd0 <vstr_len>:
   1cfd0:	b480      	push	{r7}
   1cfd2:	b083      	sub	sp, #12
   1cfd4:	af00      	add	r7, sp, #0
   1cfd6:	6078      	str	r0, [r7, #4]
   1cfd8:	687b      	ldr	r3, [r7, #4]
   1cfda:	685b      	ldr	r3, [r3, #4]
   1cfdc:	4618      	mov	r0, r3
   1cfde:	370c      	adds	r7, #12
   1cfe0:	46bd      	mov	sp, r7
   1cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cfe6:	4770      	bx	lr

0001cfe8 <readline_init0>:

#define READLINE_HIST_SIZE (MP_ARRAY_SIZE(MP_STATE_PORT(readline_hist)))

enum { ESEQ_NONE, ESEQ_ESC, ESEQ_ESC_BRACKET, ESEQ_ESC_BRACKET_DIGIT, ESEQ_ESC_O };

void readline_init0(void) {
   1cfe8:	b580      	push	{r7, lr}
   1cfea:	af00      	add	r7, sp, #0
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1cfec:	2220      	movs	r2, #32
   1cfee:	2100      	movs	r1, #0
   1cff0:	4802      	ldr	r0, [pc, #8]	; (1cffc <readline_init0+0x14>)
   1cff2:	f7ff fe0b 	bl	1cc0c <memset>
}
   1cff6:	bf00      	nop
   1cff8:	bd80      	pop	{r7, pc}
   1cffa:	bf00      	nop
   1cffc:	20001358 	.word	0x20001358

0001d000 <str_dup_maybe>:

STATIC char *str_dup_maybe(const char *str) {
   1d000:	b580      	push	{r7, lr}
   1d002:	b084      	sub	sp, #16
   1d004:	af00      	add	r7, sp, #0
   1d006:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(str);
   1d008:	6878      	ldr	r0, [r7, #4]
   1d00a:	f7ff fe9b 	bl	1cd44 <strlen>
   1d00e:	60f8      	str	r0, [r7, #12]
    char *s2 = m_new_maybe(char, len + 1);
   1d010:	68fb      	ldr	r3, [r7, #12]
   1d012:	3301      	adds	r3, #1
   1d014:	4618      	mov	r0, r3
   1d016:	f7e3 f998 	bl	34a <m_malloc_maybe>
   1d01a:	60b8      	str	r0, [r7, #8]
    if (s2 == NULL) {
   1d01c:	68bb      	ldr	r3, [r7, #8]
   1d01e:	2b00      	cmp	r3, #0
   1d020:	d101      	bne.n	1d026 <str_dup_maybe+0x26>
        return NULL;
   1d022:	2300      	movs	r3, #0
   1d024:	e007      	b.n	1d036 <str_dup_maybe+0x36>
    }
    memcpy(s2, str, len + 1);
   1d026:	68fb      	ldr	r3, [r7, #12]
   1d028:	3301      	adds	r3, #1
   1d02a:	461a      	mov	r2, r3
   1d02c:	6879      	ldr	r1, [r7, #4]
   1d02e:	68b8      	ldr	r0, [r7, #8]
   1d030:	f7ff fd52 	bl	1cad8 <memcpy>
    return s2;
   1d034:	68bb      	ldr	r3, [r7, #8]
}
   1d036:	4618      	mov	r0, r3
   1d038:	3710      	adds	r7, #16
   1d03a:	46bd      	mov	sp, r7
   1d03c:	bd80      	pop	{r7, pc}

0001d03e <mp_hal_move_cursor_back>:
#define MICROPY_HAL_HAS_VT100 (1)
#endif

// ...and provide the implementation using them
#if MICROPY_HAL_HAS_VT100
STATIC void mp_hal_move_cursor_back(uint pos) {
   1d03e:	b580      	push	{r7, lr}
   1d040:	b086      	sub	sp, #24
   1d042:	af00      	add	r7, sp, #0
   1d044:	6078      	str	r0, [r7, #4]
    if (pos <= 4) {
   1d046:	687b      	ldr	r3, [r7, #4]
   1d048:	2b04      	cmp	r3, #4
   1d04a:	d804      	bhi.n	1d056 <mp_hal_move_cursor_back+0x18>
        // fast path for most common case of 1 step back
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1d04c:	6879      	ldr	r1, [r7, #4]
   1d04e:	4811      	ldr	r0, [pc, #68]	; (1d094 <mp_hal_move_cursor_back+0x56>)
   1d050:	f7fe fb3a 	bl	1b6c8 <mp_hal_stdout_tx_strn>
        if (n > 0) {
            vt100_command[n] = 'D'; // replace null char
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}
   1d054:	e019      	b.n	1d08a <mp_hal_move_cursor_back+0x4c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1d056:	f107 000c 	add.w	r0, r7, #12
   1d05a:	687b      	ldr	r3, [r7, #4]
   1d05c:	4a0e      	ldr	r2, [pc, #56]	; (1d098 <mp_hal_move_cursor_back+0x5a>)
   1d05e:	2106      	movs	r1, #6
   1d060:	f7fe f956 	bl	1b310 <snprintf>
   1d064:	6178      	str	r0, [r7, #20]
        if (n > 0) {
   1d066:	697b      	ldr	r3, [r7, #20]
   1d068:	2b00      	cmp	r3, #0
   1d06a:	dd0e      	ble.n	1d08a <mp_hal_move_cursor_back+0x4c>
            vt100_command[n] = 'D'; // replace null char
   1d06c:	f107 020c 	add.w	r2, r7, #12
   1d070:	697b      	ldr	r3, [r7, #20]
   1d072:	4413      	add	r3, r2
   1d074:	2244      	movs	r2, #68	; 0x44
   1d076:	701a      	strb	r2, [r3, #0]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1d078:	697b      	ldr	r3, [r7, #20]
   1d07a:	3301      	adds	r3, #1
   1d07c:	461a      	mov	r2, r3
   1d07e:	f107 030c 	add.w	r3, r7, #12
   1d082:	4611      	mov	r1, r2
   1d084:	4618      	mov	r0, r3
   1d086:	f7fe fb1f 	bl	1b6c8 <mp_hal_stdout_tx_strn>
}
   1d08a:	bf00      	nop
   1d08c:	3718      	adds	r7, #24
   1d08e:	46bd      	mov	sp, r7
   1d090:	bd80      	pop	{r7, pc}
   1d092:	bf00      	nop
   1d094:	000258f4 	.word	0x000258f4
   1d098:	000258fc 	.word	0x000258fc

0001d09c <mp_hal_erase_line_from_cursor>:

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1d09c:	b580      	push	{r7, lr}
   1d09e:	b082      	sub	sp, #8
   1d0a0:	af00      	add	r7, sp, #0
   1d0a2:	6078      	str	r0, [r7, #4]
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1d0a4:	2103      	movs	r1, #3
   1d0a6:	4803      	ldr	r0, [pc, #12]	; (1d0b4 <mp_hal_erase_line_from_cursor+0x18>)
   1d0a8:	f7fe fb0e 	bl	1b6c8 <mp_hal_stdout_tx_strn>
}
   1d0ac:	bf00      	nop
   1d0ae:	3708      	adds	r7, #8
   1d0b0:	46bd      	mov	sp, r7
   1d0b2:	bd80      	pop	{r7, pc}
   1d0b4:	00025904 	.word	0x00025904

0001d0b8 <readline_process_char>:
    const char *prompt;
} readline_t;

STATIC readline_t rl;

int readline_process_char(int c) {
   1d0b8:	b580      	push	{r7, lr}
   1d0ba:	b08c      	sub	sp, #48	; 0x30
   1d0bc:	af00      	add	r7, sp, #0
   1d0be:	6078      	str	r0, [r7, #4]
    size_t last_line_len = rl.line->len;
   1d0c0:	4b8c      	ldr	r3, [pc, #560]	; (1d2f4 <readline_process_char+0x23c>)
   1d0c2:	681b      	ldr	r3, [r3, #0]
   1d0c4:	685b      	ldr	r3, [r3, #4]
   1d0c6:	617b      	str	r3, [r7, #20]
    int redraw_step_back = 0;
   1d0c8:	2300      	movs	r3, #0
   1d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool redraw_from_cursor = false;
   1d0cc:	2300      	movs	r3, #0
   1d0ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    int redraw_step_forward = 0;
   1d0d2:	2300      	movs	r3, #0
   1d0d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (rl.escape_seq == ESEQ_NONE) {
   1d0d6:	4b87      	ldr	r3, [pc, #540]	; (1d2f4 <readline_process_char+0x23c>)
   1d0d8:	689b      	ldr	r3, [r3, #8]
   1d0da:	2b00      	cmp	r3, #0
   1d0dc:	f040 80e1 	bne.w	1d2a2 <readline_process_char+0x1ea>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1d0e0:	687b      	ldr	r3, [r7, #4]
   1d0e2:	2b00      	cmp	r3, #0
   1d0e4:	dd0e      	ble.n	1d104 <readline_process_char+0x4c>
   1d0e6:	687b      	ldr	r3, [r7, #4]
   1d0e8:	2b05      	cmp	r3, #5
   1d0ea:	dc0b      	bgt.n	1d104 <readline_process_char+0x4c>
   1d0ec:	4b81      	ldr	r3, [pc, #516]	; (1d2f4 <readline_process_char+0x23c>)
   1d0ee:	681b      	ldr	r3, [r3, #0]
   1d0f0:	4618      	mov	r0, r3
   1d0f2:	f7ff ff6d 	bl	1cfd0 <vstr_len>
   1d0f6:	4602      	mov	r2, r0
   1d0f8:	4b7e      	ldr	r3, [pc, #504]	; (1d2f4 <readline_process_char+0x23c>)
   1d0fa:	685b      	ldr	r3, [r3, #4]
   1d0fc:	429a      	cmp	r2, r3
   1d0fe:	d101      	bne.n	1d104 <readline_process_char+0x4c>
            // control character with empty line
            return c;
   1d100:	687b      	ldr	r3, [r7, #4]
   1d102:	e245      	b.n	1d590 <readline_process_char+0x4d8>
        } else if (c == CHAR_CTRL_A) {
   1d104:	687b      	ldr	r3, [r7, #4]
   1d106:	2b01      	cmp	r3, #1
   1d108:	f000 819e 	beq.w	1d448 <readline_process_char+0x390>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_B) {
            // CTRL-B with non-empty line is go-back-one-char
            goto left_arrow_key;
        #endif
        } else if (c == CHAR_CTRL_C) {
   1d10c:	687b      	ldr	r3, [r7, #4]
   1d10e:	2b03      	cmp	r3, #3
   1d110:	d101      	bne.n	1d116 <readline_process_char+0x5e>
            // CTRL-C with non-empty line is cancel
            return c;
   1d112:	687b      	ldr	r3, [r7, #4]
   1d114:	e23c      	b.n	1d590 <readline_process_char+0x4d8>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_D) {
            // CTRL-D with non-empty line is delete-at-cursor
            goto delete_key;
        #endif
        } else if (c == CHAR_CTRL_E) {
   1d116:	687b      	ldr	r3, [r7, #4]
   1d118:	2b05      	cmp	r3, #5
   1d11a:	f000 81aa 	beq.w	1d472 <readline_process_char+0x3ba>
            vstr_cut_out_bytes(rl.line, rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
            // set redraw parameters
            redraw_step_back = rl.cursor_pos - rl.orig_line_len;
            redraw_from_cursor = true;
        #endif
        } else if (c == '\r') {
   1d11e:	687b      	ldr	r3, [r7, #4]
   1d120:	2b0d      	cmp	r3, #13
   1d122:	d110      	bne.n	1d146 <readline_process_char+0x8e>
            // newline
            mp_hal_stdout_tx_str("\r\n");
   1d124:	4874      	ldr	r0, [pc, #464]	; (1d2f8 <readline_process_char+0x240>)
   1d126:	f7ff fa49 	bl	1c5bc <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1d12a:	4b72      	ldr	r3, [pc, #456]	; (1d2f4 <readline_process_char+0x23c>)
   1d12c:	681b      	ldr	r3, [r3, #0]
   1d12e:	4618      	mov	r0, r3
   1d130:	f7e4 fa47 	bl	15c2 <vstr_null_terminated_str>
   1d134:	4602      	mov	r2, r0
   1d136:	4b6f      	ldr	r3, [pc, #444]	; (1d2f4 <readline_process_char+0x23c>)
   1d138:	685b      	ldr	r3, [r3, #4]
   1d13a:	4413      	add	r3, r2
   1d13c:	4618      	mov	r0, r3
   1d13e:	f000 fb19 	bl	1d774 <readline_push_history>
            return 0;
   1d142:	2300      	movs	r3, #0
   1d144:	e224      	b.n	1d590 <readline_process_char+0x4d8>
        } else if (c == 27) {
   1d146:	687b      	ldr	r3, [r7, #4]
   1d148:	2b1b      	cmp	r3, #27
   1d14a:	d103      	bne.n	1d154 <readline_process_char+0x9c>
            // escape sequence
            rl.escape_seq = ESEQ_ESC;
   1d14c:	4b69      	ldr	r3, [pc, #420]	; (1d2f4 <readline_process_char+0x23c>)
   1d14e:	2201      	movs	r2, #1
   1d150:	609a      	str	r2, [r3, #8]
   1d152:	e1c3      	b.n	1d4dc <readline_process_char+0x424>
        } else if (c == 8 || c == 127) {
   1d154:	687b      	ldr	r3, [r7, #4]
   1d156:	2b08      	cmp	r3, #8
   1d158:	d002      	beq.n	1d160 <readline_process_char+0xa8>
   1d15a:	687b      	ldr	r3, [r7, #4]
   1d15c:	2b7f      	cmp	r3, #127	; 0x7f
   1d15e:	d13a      	bne.n	1d1d6 <readline_process_char+0x11e>
            // backspace/delete
            if (rl.cursor_pos > rl.orig_line_len) {
   1d160:	4b64      	ldr	r3, [pc, #400]	; (1d2f4 <readline_process_char+0x23c>)
   1d162:	691a      	ldr	r2, [r3, #16]
   1d164:	4b63      	ldr	r3, [pc, #396]	; (1d2f4 <readline_process_char+0x23c>)
   1d166:	685b      	ldr	r3, [r3, #4]
   1d168:	429a      	cmp	r2, r3
   1d16a:	f240 81b7 	bls.w	1d4dc <readline_process_char+0x424>
                // work out how many chars to backspace
                #if MICROPY_REPL_AUTO_INDENT
                int nspace = 0;
   1d16e:	2300      	movs	r3, #0
   1d170:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1d172:	4b60      	ldr	r3, [pc, #384]	; (1d2f4 <readline_process_char+0x23c>)
   1d174:	685b      	ldr	r3, [r3, #4]
   1d176:	61fb      	str	r3, [r7, #28]
   1d178:	e010      	b.n	1d19c <readline_process_char+0xe4>
                    if (rl.line->buf[i] != ' ') {
   1d17a:	4b5e      	ldr	r3, [pc, #376]	; (1d2f4 <readline_process_char+0x23c>)
   1d17c:	681b      	ldr	r3, [r3, #0]
   1d17e:	689a      	ldr	r2, [r3, #8]
   1d180:	69fb      	ldr	r3, [r7, #28]
   1d182:	4413      	add	r3, r2
   1d184:	781b      	ldrb	r3, [r3, #0]
   1d186:	2b20      	cmp	r3, #32
   1d188:	d002      	beq.n	1d190 <readline_process_char+0xd8>
                        nspace = 0;
   1d18a:	2300      	movs	r3, #0
   1d18c:	623b      	str	r3, [r7, #32]
                        break;
   1d18e:	e00a      	b.n	1d1a6 <readline_process_char+0xee>
                    }
                    nspace += 1;
   1d190:	6a3b      	ldr	r3, [r7, #32]
   1d192:	3301      	adds	r3, #1
   1d194:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1d196:	69fb      	ldr	r3, [r7, #28]
   1d198:	3301      	adds	r3, #1
   1d19a:	61fb      	str	r3, [r7, #28]
   1d19c:	4b55      	ldr	r3, [pc, #340]	; (1d2f4 <readline_process_char+0x23c>)
   1d19e:	691a      	ldr	r2, [r3, #16]
   1d1a0:	69fb      	ldr	r3, [r7, #28]
   1d1a2:	429a      	cmp	r2, r3
   1d1a4:	d8e9      	bhi.n	1d17a <readline_process_char+0xc2>
                }
                if (nspace < 4) {
   1d1a6:	6a3b      	ldr	r3, [r7, #32]
   1d1a8:	2b03      	cmp	r3, #3
   1d1aa:	dc02      	bgt.n	1d1b2 <readline_process_char+0xfa>
                    nspace = 1;
   1d1ac:	2301      	movs	r3, #1
   1d1ae:	623b      	str	r3, [r7, #32]
   1d1b0:	e001      	b.n	1d1b6 <readline_process_char+0xfe>
                } else {
                    nspace = 4;
   1d1b2:	2304      	movs	r3, #4
   1d1b4:	623b      	str	r3, [r7, #32]
                #else
                int nspace = 1;
                #endif

                // do the backspace
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1d1b6:	4b4f      	ldr	r3, [pc, #316]	; (1d2f4 <readline_process_char+0x23c>)
   1d1b8:	6818      	ldr	r0, [r3, #0]
   1d1ba:	4b4e      	ldr	r3, [pc, #312]	; (1d2f4 <readline_process_char+0x23c>)
   1d1bc:	691a      	ldr	r2, [r3, #16]
   1d1be:	6a3b      	ldr	r3, [r7, #32]
   1d1c0:	1ad3      	subs	r3, r2, r3
   1d1c2:	6a3a      	ldr	r2, [r7, #32]
   1d1c4:	4619      	mov	r1, r3
   1d1c6:	f7e4 faec 	bl	17a2 <vstr_cut_out_bytes>
                // set redraw parameters
                redraw_step_back = nspace;
   1d1ca:	6a3b      	ldr	r3, [r7, #32]
   1d1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                redraw_from_cursor = true;
   1d1ce:	2301      	movs	r3, #1
   1d1d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (rl.cursor_pos > rl.orig_line_len) {
   1d1d4:	e182      	b.n	1d4dc <readline_process_char+0x424>
            }
        #if MICROPY_HELPER_REPL
        } else if (c == 9) {
   1d1d6:	687b      	ldr	r3, [r7, #4]
   1d1d8:	2b09      	cmp	r3, #9
   1d1da:	d14c      	bne.n	1d276 <readline_process_char+0x1be>
            // tab magic
            const char *compl_str;
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1d1dc:	4b45      	ldr	r3, [pc, #276]	; (1d2f4 <readline_process_char+0x23c>)
   1d1de:	681b      	ldr	r3, [r3, #0]
   1d1e0:	689a      	ldr	r2, [r3, #8]
   1d1e2:	4b44      	ldr	r3, [pc, #272]	; (1d2f4 <readline_process_char+0x23c>)
   1d1e4:	685b      	ldr	r3, [r3, #4]
   1d1e6:	18d0      	adds	r0, r2, r3
   1d1e8:	4b42      	ldr	r3, [pc, #264]	; (1d2f4 <readline_process_char+0x23c>)
   1d1ea:	691a      	ldr	r2, [r3, #16]
   1d1ec:	4b41      	ldr	r3, [pc, #260]	; (1d2f4 <readline_process_char+0x23c>)
   1d1ee:	685b      	ldr	r3, [r3, #4]
   1d1f0:	1ad1      	subs	r1, r2, r3
   1d1f2:	f107 030c 	add.w	r3, r7, #12
   1d1f6:	4a41      	ldr	r2, [pc, #260]	; (1d2fc <readline_process_char+0x244>)
   1d1f8:	f7fd fd46 	bl	1ac88 <mp_repl_autocomplete>
   1d1fc:	6138      	str	r0, [r7, #16]
            if (compl_len == 0) {
   1d1fe:	693b      	ldr	r3, [r7, #16]
   1d200:	2b00      	cmp	r3, #0
   1d202:	f000 816b 	beq.w	1d4dc <readline_process_char+0x424>
                // no match
            } else if (compl_len == (size_t)(-1)) {
   1d206:	693b      	ldr	r3, [r7, #16]
   1d208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d20c:	d116      	bne.n	1d23c <readline_process_char+0x184>
                // many matches
                mp_hal_stdout_tx_str(rl.prompt);
   1d20e:	4b39      	ldr	r3, [pc, #228]	; (1d2f4 <readline_process_char+0x23c>)
   1d210:	699b      	ldr	r3, [r3, #24]
   1d212:	4618      	mov	r0, r3
   1d214:	f7ff f9d2 	bl	1c5bc <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1d218:	4b36      	ldr	r3, [pc, #216]	; (1d2f4 <readline_process_char+0x23c>)
   1d21a:	681b      	ldr	r3, [r3, #0]
   1d21c:	689a      	ldr	r2, [r3, #8]
   1d21e:	4b35      	ldr	r3, [pc, #212]	; (1d2f4 <readline_process_char+0x23c>)
   1d220:	685b      	ldr	r3, [r3, #4]
   1d222:	18d0      	adds	r0, r2, r3
   1d224:	4b33      	ldr	r3, [pc, #204]	; (1d2f4 <readline_process_char+0x23c>)
   1d226:	691a      	ldr	r2, [r3, #16]
   1d228:	4b32      	ldr	r3, [pc, #200]	; (1d2f4 <readline_process_char+0x23c>)
   1d22a:	685b      	ldr	r3, [r3, #4]
   1d22c:	1ad3      	subs	r3, r2, r3
   1d22e:	4619      	mov	r1, r3
   1d230:	f7fe fa4a 	bl	1b6c8 <mp_hal_stdout_tx_strn>
                redraw_from_cursor = true;
   1d234:	2301      	movs	r3, #1
   1d236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1d23a:	e14f      	b.n	1d4dc <readline_process_char+0x424>
            } else {
                // one match
                for (size_t i = 0; i < compl_len; ++i) {
   1d23c:	2300      	movs	r3, #0
   1d23e:	61bb      	str	r3, [r7, #24]
   1d240:	e00f      	b.n	1d262 <readline_process_char+0x1aa>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1d242:	4b2c      	ldr	r3, [pc, #176]	; (1d2f4 <readline_process_char+0x23c>)
   1d244:	6818      	ldr	r0, [r3, #0]
   1d246:	4b2b      	ldr	r3, [pc, #172]	; (1d2f4 <readline_process_char+0x23c>)
   1d248:	691a      	ldr	r2, [r3, #16]
   1d24a:	69bb      	ldr	r3, [r7, #24]
   1d24c:	18d1      	adds	r1, r2, r3
   1d24e:	68fb      	ldr	r3, [r7, #12]
   1d250:	1c5a      	adds	r2, r3, #1
   1d252:	60fa      	str	r2, [r7, #12]
   1d254:	781b      	ldrb	r3, [r3, #0]
   1d256:	461a      	mov	r2, r3
   1d258:	f7e4 fa53 	bl	1702 <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1d25c:	69bb      	ldr	r3, [r7, #24]
   1d25e:	3301      	adds	r3, #1
   1d260:	61bb      	str	r3, [r7, #24]
   1d262:	69ba      	ldr	r2, [r7, #24]
   1d264:	693b      	ldr	r3, [r7, #16]
   1d266:	429a      	cmp	r2, r3
   1d268:	d3eb      	bcc.n	1d242 <readline_process_char+0x18a>
                }
                // set redraw parameters
                redraw_from_cursor = true;
   1d26a:	2301      	movs	r3, #1
   1d26c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                redraw_step_forward = compl_len;
   1d270:	693b      	ldr	r3, [r7, #16]
   1d272:	627b      	str	r3, [r7, #36]	; 0x24
   1d274:	e132      	b.n	1d4dc <readline_process_char+0x424>
            }
        #endif
        } else if (32 <= c && c <= 126) {
   1d276:	687b      	ldr	r3, [r7, #4]
   1d278:	2b1f      	cmp	r3, #31
   1d27a:	f340 812f 	ble.w	1d4dc <readline_process_char+0x424>
   1d27e:	687b      	ldr	r3, [r7, #4]
   1d280:	2b7e      	cmp	r3, #126	; 0x7e
   1d282:	f300 812b 	bgt.w	1d4dc <readline_process_char+0x424>
            // printable character
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1d286:	4b1b      	ldr	r3, [pc, #108]	; (1d2f4 <readline_process_char+0x23c>)
   1d288:	6818      	ldr	r0, [r3, #0]
   1d28a:	4b1a      	ldr	r3, [pc, #104]	; (1d2f4 <readline_process_char+0x23c>)
   1d28c:	691b      	ldr	r3, [r3, #16]
   1d28e:	687a      	ldr	r2, [r7, #4]
   1d290:	4619      	mov	r1, r3
   1d292:	f7e4 fa4a 	bl	172a <vstr_ins_char>
            // set redraw parameters
            redraw_from_cursor = true;
   1d296:	2301      	movs	r3, #1
   1d298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            redraw_step_forward = 1;
   1d29c:	2301      	movs	r3, #1
   1d29e:	627b      	str	r3, [r7, #36]	; 0x24
   1d2a0:	e11c      	b.n	1d4dc <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC) {
   1d2a2:	4b14      	ldr	r3, [pc, #80]	; (1d2f4 <readline_process_char+0x23c>)
   1d2a4:	689b      	ldr	r3, [r3, #8]
   1d2a6:	2b01      	cmp	r3, #1
   1d2a8:	d110      	bne.n	1d2cc <readline_process_char+0x214>
        switch (c) {
   1d2aa:	687b      	ldr	r3, [r7, #4]
   1d2ac:	2b4f      	cmp	r3, #79	; 0x4f
   1d2ae:	d005      	beq.n	1d2bc <readline_process_char+0x204>
   1d2b0:	2b5b      	cmp	r3, #91	; 0x5b
   1d2b2:	d107      	bne.n	1d2c4 <readline_process_char+0x20c>
            case '[':
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1d2b4:	4b0f      	ldr	r3, [pc, #60]	; (1d2f4 <readline_process_char+0x23c>)
   1d2b6:	2202      	movs	r2, #2
   1d2b8:	609a      	str	r2, [r3, #8]
                break;
   1d2ba:	e10f      	b.n	1d4dc <readline_process_char+0x424>
            case 'O':
                rl.escape_seq = ESEQ_ESC_O;
   1d2bc:	4b0d      	ldr	r3, [pc, #52]	; (1d2f4 <readline_process_char+0x23c>)
   1d2be:	2204      	movs	r2, #4
   1d2c0:	609a      	str	r2, [r3, #8]
                break;
   1d2c2:	e10b      	b.n	1d4dc <readline_process_char+0x424>
            default:
                DEBUG_printf("(ESC %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1d2c4:	4b0b      	ldr	r3, [pc, #44]	; (1d2f4 <readline_process_char+0x23c>)
   1d2c6:	2200      	movs	r2, #0
   1d2c8:	609a      	str	r2, [r3, #8]
   1d2ca:	e107      	b.n	1d4dc <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1d2cc:	4b09      	ldr	r3, [pc, #36]	; (1d2f4 <readline_process_char+0x23c>)
   1d2ce:	689b      	ldr	r3, [r3, #8]
   1d2d0:	2b02      	cmp	r3, #2
   1d2d2:	f040 80a9 	bne.w	1d428 <readline_process_char+0x370>
        if ('0' <= c && c <= '9') {
   1d2d6:	687b      	ldr	r3, [r7, #4]
   1d2d8:	2b2f      	cmp	r3, #47	; 0x2f
   1d2da:	dd11      	ble.n	1d300 <readline_process_char+0x248>
   1d2dc:	687b      	ldr	r3, [r7, #4]
   1d2de:	2b39      	cmp	r3, #57	; 0x39
   1d2e0:	dc0e      	bgt.n	1d300 <readline_process_char+0x248>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1d2e2:	4b04      	ldr	r3, [pc, #16]	; (1d2f4 <readline_process_char+0x23c>)
   1d2e4:	2203      	movs	r2, #3
   1d2e6:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1d2e8:	687b      	ldr	r3, [r7, #4]
   1d2ea:	b2da      	uxtb	r2, r3
   1d2ec:	4b01      	ldr	r3, [pc, #4]	; (1d2f4 <readline_process_char+0x23c>)
   1d2ee:	751a      	strb	r2, [r3, #20]
   1d2f0:	e0f4      	b.n	1d4dc <readline_process_char+0x424>
   1d2f2:	bf00      	nop
   1d2f4:	200012d4 	.word	0x200012d4
   1d2f8:	00025908 	.word	0x00025908
   1d2fc:	0001f4ac 	.word	0x0001f4ac
        } else {
            rl.escape_seq = ESEQ_NONE;
   1d300:	4b96      	ldr	r3, [pc, #600]	; (1d55c <readline_process_char+0x4a4>)
   1d302:	2200      	movs	r2, #0
   1d304:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1d306:	687b      	ldr	r3, [r7, #4]
   1d308:	2b41      	cmp	r3, #65	; 0x41
   1d30a:	d135      	bne.n	1d378 <readline_process_char+0x2c0>
#if MICROPY_REPL_EMACS_KEYS
up_arrow_key:
#endif
                // up arrow
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1d30c:	4b93      	ldr	r3, [pc, #588]	; (1d55c <readline_process_char+0x4a4>)
   1d30e:	68db      	ldr	r3, [r3, #12]
   1d310:	3301      	adds	r3, #1
   1d312:	2b07      	cmp	r3, #7
   1d314:	f300 80e2 	bgt.w	1d4dc <readline_process_char+0x424>
   1d318:	4b90      	ldr	r3, [pc, #576]	; (1d55c <readline_process_char+0x4a4>)
   1d31a:	68db      	ldr	r3, [r3, #12]
   1d31c:	3301      	adds	r3, #1
   1d31e:	4a90      	ldr	r2, [pc, #576]	; (1d560 <readline_process_char+0x4a8>)
   1d320:	331a      	adds	r3, #26
   1d322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d326:	2b00      	cmp	r3, #0
   1d328:	f000 80d8 	beq.w	1d4dc <readline_process_char+0x424>
                    // increase hist num
                    rl.hist_cur += 1;
   1d32c:	4b8b      	ldr	r3, [pc, #556]	; (1d55c <readline_process_char+0x4a4>)
   1d32e:	68db      	ldr	r3, [r3, #12]
   1d330:	3301      	adds	r3, #1
   1d332:	4a8a      	ldr	r2, [pc, #552]	; (1d55c <readline_process_char+0x4a4>)
   1d334:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    rl.line->len = rl.orig_line_len;
   1d336:	4b89      	ldr	r3, [pc, #548]	; (1d55c <readline_process_char+0x4a4>)
   1d338:	681b      	ldr	r3, [r3, #0]
   1d33a:	4a88      	ldr	r2, [pc, #544]	; (1d55c <readline_process_char+0x4a4>)
   1d33c:	6852      	ldr	r2, [r2, #4]
   1d33e:	605a      	str	r2, [r3, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1d340:	4b86      	ldr	r3, [pc, #536]	; (1d55c <readline_process_char+0x4a4>)
   1d342:	6818      	ldr	r0, [r3, #0]
   1d344:	4b85      	ldr	r3, [pc, #532]	; (1d55c <readline_process_char+0x4a4>)
   1d346:	68db      	ldr	r3, [r3, #12]
   1d348:	4a85      	ldr	r2, [pc, #532]	; (1d560 <readline_process_char+0x4a8>)
   1d34a:	331a      	adds	r3, #26
   1d34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d350:	4619      	mov	r1, r3
   1d352:	f7e4 f972 	bl	163a <vstr_add_str>
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d356:	4b81      	ldr	r3, [pc, #516]	; (1d55c <readline_process_char+0x4a4>)
   1d358:	691a      	ldr	r2, [r3, #16]
   1d35a:	4b80      	ldr	r3, [pc, #512]	; (1d55c <readline_process_char+0x4a4>)
   1d35c:	685b      	ldr	r3, [r3, #4]
   1d35e:	1ad3      	subs	r3, r2, r3
   1d360:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1d362:	2301      	movs	r3, #1
   1d364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1d368:	4b7c      	ldr	r3, [pc, #496]	; (1d55c <readline_process_char+0x4a4>)
   1d36a:	681b      	ldr	r3, [r3, #0]
   1d36c:	685a      	ldr	r2, [r3, #4]
   1d36e:	4b7b      	ldr	r3, [pc, #492]	; (1d55c <readline_process_char+0x4a4>)
   1d370:	685b      	ldr	r3, [r3, #4]
   1d372:	1ad3      	subs	r3, r2, r3
   1d374:	627b      	str	r3, [r7, #36]	; 0x24
   1d376:	e0b1      	b.n	1d4dc <readline_process_char+0x424>
                }
            } else if (c == 'B') {
   1d378:	687b      	ldr	r3, [r7, #4]
   1d37a:	2b42      	cmp	r3, #66	; 0x42
   1d37c:	d134      	bne.n	1d3e8 <readline_process_char+0x330>
#if MICROPY_REPL_EMACS_KEYS
down_arrow_key:
#endif
                // down arrow
                if (rl.hist_cur >= 0) {
   1d37e:	4b77      	ldr	r3, [pc, #476]	; (1d55c <readline_process_char+0x4a4>)
   1d380:	68db      	ldr	r3, [r3, #12]
   1d382:	2b00      	cmp	r3, #0
   1d384:	f2c0 80aa 	blt.w	1d4dc <readline_process_char+0x424>
                    // decrease hist num
                    rl.hist_cur -= 1;
   1d388:	4b74      	ldr	r3, [pc, #464]	; (1d55c <readline_process_char+0x4a4>)
   1d38a:	68db      	ldr	r3, [r3, #12]
   1d38c:	3b01      	subs	r3, #1
   1d38e:	4a73      	ldr	r2, [pc, #460]	; (1d55c <readline_process_char+0x4a4>)
   1d390:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1d392:	4b72      	ldr	r3, [pc, #456]	; (1d55c <readline_process_char+0x4a4>)
   1d394:	6818      	ldr	r0, [r3, #0]
   1d396:	4b71      	ldr	r3, [pc, #452]	; (1d55c <readline_process_char+0x4a4>)
   1d398:	681b      	ldr	r3, [r3, #0]
   1d39a:	685a      	ldr	r2, [r3, #4]
   1d39c:	4b6f      	ldr	r3, [pc, #444]	; (1d55c <readline_process_char+0x4a4>)
   1d39e:	685b      	ldr	r3, [r3, #4]
   1d3a0:	1ad3      	subs	r3, r2, r3
   1d3a2:	4619      	mov	r1, r3
   1d3a4:	f7e4 f9e3 	bl	176e <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1d3a8:	4b6c      	ldr	r3, [pc, #432]	; (1d55c <readline_process_char+0x4a4>)
   1d3aa:	68db      	ldr	r3, [r3, #12]
   1d3ac:	2b00      	cmp	r3, #0
   1d3ae:	db0a      	blt.n	1d3c6 <readline_process_char+0x30e>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1d3b0:	4b6a      	ldr	r3, [pc, #424]	; (1d55c <readline_process_char+0x4a4>)
   1d3b2:	6818      	ldr	r0, [r3, #0]
   1d3b4:	4b69      	ldr	r3, [pc, #420]	; (1d55c <readline_process_char+0x4a4>)
   1d3b6:	68db      	ldr	r3, [r3, #12]
   1d3b8:	4a69      	ldr	r2, [pc, #420]	; (1d560 <readline_process_char+0x4a8>)
   1d3ba:	331a      	adds	r3, #26
   1d3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d3c0:	4619      	mov	r1, r3
   1d3c2:	f7e4 f93a 	bl	163a <vstr_add_str>
                    }
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d3c6:	4b65      	ldr	r3, [pc, #404]	; (1d55c <readline_process_char+0x4a4>)
   1d3c8:	691a      	ldr	r2, [r3, #16]
   1d3ca:	4b64      	ldr	r3, [pc, #400]	; (1d55c <readline_process_char+0x4a4>)
   1d3cc:	685b      	ldr	r3, [r3, #4]
   1d3ce:	1ad3      	subs	r3, r2, r3
   1d3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1d3d2:	2301      	movs	r3, #1
   1d3d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1d3d8:	4b60      	ldr	r3, [pc, #384]	; (1d55c <readline_process_char+0x4a4>)
   1d3da:	681b      	ldr	r3, [r3, #0]
   1d3dc:	685a      	ldr	r2, [r3, #4]
   1d3de:	4b5f      	ldr	r3, [pc, #380]	; (1d55c <readline_process_char+0x4a4>)
   1d3e0:	685b      	ldr	r3, [r3, #4]
   1d3e2:	1ad3      	subs	r3, r2, r3
   1d3e4:	627b      	str	r3, [r7, #36]	; 0x24
   1d3e6:	e079      	b.n	1d4dc <readline_process_char+0x424>
                }
            } else if (c == 'C') {
   1d3e8:	687b      	ldr	r3, [r7, #4]
   1d3ea:	2b43      	cmp	r3, #67	; 0x43
   1d3ec:	d109      	bne.n	1d402 <readline_process_char+0x34a>
#if MICROPY_REPL_EMACS_KEYS
right_arrow_key:
#endif
                // right arrow
                if (rl.cursor_pos < rl.line->len) {
   1d3ee:	4b5b      	ldr	r3, [pc, #364]	; (1d55c <readline_process_char+0x4a4>)
   1d3f0:	691a      	ldr	r2, [r3, #16]
   1d3f2:	4b5a      	ldr	r3, [pc, #360]	; (1d55c <readline_process_char+0x4a4>)
   1d3f4:	681b      	ldr	r3, [r3, #0]
   1d3f6:	685b      	ldr	r3, [r3, #4]
   1d3f8:	429a      	cmp	r2, r3
   1d3fa:	d26f      	bcs.n	1d4dc <readline_process_char+0x424>
                    redraw_step_forward = 1;
   1d3fc:	2301      	movs	r3, #1
   1d3fe:	627b      	str	r3, [r7, #36]	; 0x24
   1d400:	e06c      	b.n	1d4dc <readline_process_char+0x424>
                }
            } else if (c == 'D') {
   1d402:	687b      	ldr	r3, [r7, #4]
   1d404:	2b44      	cmp	r3, #68	; 0x44
   1d406:	d108      	bne.n	1d41a <readline_process_char+0x362>
#if MICROPY_REPL_EMACS_KEYS
left_arrow_key:
#endif
                // left arrow
                if (rl.cursor_pos > rl.orig_line_len) {
   1d408:	4b54      	ldr	r3, [pc, #336]	; (1d55c <readline_process_char+0x4a4>)
   1d40a:	691a      	ldr	r2, [r3, #16]
   1d40c:	4b53      	ldr	r3, [pc, #332]	; (1d55c <readline_process_char+0x4a4>)
   1d40e:	685b      	ldr	r3, [r3, #4]
   1d410:	429a      	cmp	r2, r3
   1d412:	d963      	bls.n	1d4dc <readline_process_char+0x424>
                    redraw_step_back = 1;
   1d414:	2301      	movs	r3, #1
   1d416:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d418:	e060      	b.n	1d4dc <readline_process_char+0x424>
                }
            } else if (c == 'H') {
   1d41a:	687b      	ldr	r3, [r7, #4]
   1d41c:	2b48      	cmp	r3, #72	; 0x48
   1d41e:	d015      	beq.n	1d44c <readline_process_char+0x394>
                // home
                goto home_key;
            } else if (c == 'F') {
   1d420:	687b      	ldr	r3, [r7, #4]
   1d422:	2b46      	cmp	r3, #70	; 0x46
   1d424:	d15a      	bne.n	1d4dc <readline_process_char+0x424>
                // end
                goto end_key;
   1d426:	e027      	b.n	1d478 <readline_process_char+0x3c0>
            } else {
                DEBUG_printf("(ESC [ %d)", c);
            }
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1d428:	4b4c      	ldr	r3, [pc, #304]	; (1d55c <readline_process_char+0x4a4>)
   1d42a:	689b      	ldr	r3, [r3, #8]
   1d42c:	2b03      	cmp	r3, #3
   1d42e:	d145      	bne.n	1d4bc <readline_process_char+0x404>
        if (c == '~') {
   1d430:	687b      	ldr	r3, [r7, #4]
   1d432:	2b7e      	cmp	r3, #126	; 0x7e
   1d434:	d13e      	bne.n	1d4b4 <readline_process_char+0x3fc>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1d436:	4b49      	ldr	r3, [pc, #292]	; (1d55c <readline_process_char+0x4a4>)
   1d438:	7d1b      	ldrb	r3, [r3, #20]
   1d43a:	2b31      	cmp	r3, #49	; 0x31
   1d43c:	d009      	beq.n	1d452 <readline_process_char+0x39a>
   1d43e:	4b47      	ldr	r3, [pc, #284]	; (1d55c <readline_process_char+0x4a4>)
   1d440:	7d1b      	ldrb	r3, [r3, #20]
   1d442:	2b37      	cmp	r3, #55	; 0x37
   1d444:	d10c      	bne.n	1d460 <readline_process_char+0x3a8>
   1d446:	e004      	b.n	1d452 <readline_process_char+0x39a>
            goto home_key;
   1d448:	bf00      	nop
   1d44a:	e002      	b.n	1d452 <readline_process_char+0x39a>
                goto home_key;
   1d44c:	bf00      	nop
   1d44e:	e000      	b.n	1d452 <readline_process_char+0x39a>
        }
        rl.escape_seq = ESEQ_NONE;
    } else if (rl.escape_seq == ESEQ_ESC_O) {
        switch (c) {
            case 'H':
                goto home_key;
   1d450:	bf00      	nop
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d452:	4b42      	ldr	r3, [pc, #264]	; (1d55c <readline_process_char+0x4a4>)
   1d454:	691a      	ldr	r2, [r3, #16]
   1d456:	4b41      	ldr	r3, [pc, #260]	; (1d55c <readline_process_char+0x4a4>)
   1d458:	685b      	ldr	r3, [r3, #4]
   1d45a:	1ad3      	subs	r3, r2, r3
   1d45c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d45e:	e029      	b.n	1d4b4 <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1d460:	4b3e      	ldr	r3, [pc, #248]	; (1d55c <readline_process_char+0x4a4>)
   1d462:	7d1b      	ldrb	r3, [r3, #20]
   1d464:	2b34      	cmp	r3, #52	; 0x34
   1d466:	d007      	beq.n	1d478 <readline_process_char+0x3c0>
   1d468:	4b3c      	ldr	r3, [pc, #240]	; (1d55c <readline_process_char+0x4a4>)
   1d46a:	7d1b      	ldrb	r3, [r3, #20]
   1d46c:	2b38      	cmp	r3, #56	; 0x38
   1d46e:	d10b      	bne.n	1d488 <readline_process_char+0x3d0>
   1d470:	e002      	b.n	1d478 <readline_process_char+0x3c0>
            goto end_key;
   1d472:	bf00      	nop
   1d474:	e000      	b.n	1d478 <readline_process_char+0x3c0>
            case 'F':
                goto end_key;
   1d476:	bf00      	nop
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1d478:	4b38      	ldr	r3, [pc, #224]	; (1d55c <readline_process_char+0x4a4>)
   1d47a:	681b      	ldr	r3, [r3, #0]
   1d47c:	685a      	ldr	r2, [r3, #4]
   1d47e:	4b37      	ldr	r3, [pc, #220]	; (1d55c <readline_process_char+0x4a4>)
   1d480:	691b      	ldr	r3, [r3, #16]
   1d482:	1ad3      	subs	r3, r2, r3
   1d484:	627b      	str	r3, [r7, #36]	; 0x24
   1d486:	e015      	b.n	1d4b4 <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '3') {
   1d488:	4b34      	ldr	r3, [pc, #208]	; (1d55c <readline_process_char+0x4a4>)
   1d48a:	7d1b      	ldrb	r3, [r3, #20]
   1d48c:	2b33      	cmp	r3, #51	; 0x33
   1d48e:	d111      	bne.n	1d4b4 <readline_process_char+0x3fc>
                if (rl.cursor_pos < rl.line->len) {
   1d490:	4b32      	ldr	r3, [pc, #200]	; (1d55c <readline_process_char+0x4a4>)
   1d492:	691a      	ldr	r2, [r3, #16]
   1d494:	4b31      	ldr	r3, [pc, #196]	; (1d55c <readline_process_char+0x4a4>)
   1d496:	681b      	ldr	r3, [r3, #0]
   1d498:	685b      	ldr	r3, [r3, #4]
   1d49a:	429a      	cmp	r2, r3
   1d49c:	d20a      	bcs.n	1d4b4 <readline_process_char+0x3fc>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1d49e:	4b2f      	ldr	r3, [pc, #188]	; (1d55c <readline_process_char+0x4a4>)
   1d4a0:	6818      	ldr	r0, [r3, #0]
   1d4a2:	4b2e      	ldr	r3, [pc, #184]	; (1d55c <readline_process_char+0x4a4>)
   1d4a4:	691b      	ldr	r3, [r3, #16]
   1d4a6:	2201      	movs	r2, #1
   1d4a8:	4619      	mov	r1, r3
   1d4aa:	f7e4 f97a 	bl	17a2 <vstr_cut_out_bytes>
                    redraw_from_cursor = true;
   1d4ae:	2301      	movs	r3, #1
   1d4b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        rl.escape_seq = ESEQ_NONE;
   1d4b4:	4b29      	ldr	r3, [pc, #164]	; (1d55c <readline_process_char+0x4a4>)
   1d4b6:	2200      	movs	r2, #0
   1d4b8:	609a      	str	r2, [r3, #8]
   1d4ba:	e00f      	b.n	1d4dc <readline_process_char+0x424>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1d4bc:	4b27      	ldr	r3, [pc, #156]	; (1d55c <readline_process_char+0x4a4>)
   1d4be:	689b      	ldr	r3, [r3, #8]
   1d4c0:	2b04      	cmp	r3, #4
   1d4c2:	d108      	bne.n	1d4d6 <readline_process_char+0x41e>
        switch (c) {
   1d4c4:	687b      	ldr	r3, [r7, #4]
   1d4c6:	2b46      	cmp	r3, #70	; 0x46
   1d4c8:	d0d5      	beq.n	1d476 <readline_process_char+0x3be>
   1d4ca:	2b48      	cmp	r3, #72	; 0x48
   1d4cc:	d0c0      	beq.n	1d450 <readline_process_char+0x398>
            default:
                DEBUG_printf("(ESC O %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1d4ce:	4b23      	ldr	r3, [pc, #140]	; (1d55c <readline_process_char+0x4a4>)
   1d4d0:	2200      	movs	r2, #0
   1d4d2:	609a      	str	r2, [r3, #8]
   1d4d4:	e002      	b.n	1d4dc <readline_process_char+0x424>
        }
    } else {
        rl.escape_seq = ESEQ_NONE;
   1d4d6:	4b21      	ldr	r3, [pc, #132]	; (1d55c <readline_process_char+0x4a4>)
   1d4d8:	2200      	movs	r2, #0
   1d4da:	609a      	str	r2, [r3, #8]
    }

    // redraw command prompt, efficiently
    if (redraw_step_back > 0) {
   1d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d4de:	2b00      	cmp	r3, #0
   1d4e0:	dd09      	ble.n	1d4f6 <readline_process_char+0x43e>
        mp_hal_move_cursor_back(redraw_step_back);
   1d4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d4e4:	4618      	mov	r0, r3
   1d4e6:	f7ff fdaa 	bl	1d03e <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1d4ea:	4b1c      	ldr	r3, [pc, #112]	; (1d55c <readline_process_char+0x4a4>)
   1d4ec:	691a      	ldr	r2, [r3, #16]
   1d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d4f0:	1ad3      	subs	r3, r2, r3
   1d4f2:	4a1a      	ldr	r2, [pc, #104]	; (1d55c <readline_process_char+0x4a4>)
   1d4f4:	6113      	str	r3, [r2, #16]
    }
    if (redraw_from_cursor) {
   1d4f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1d4fa:	2b00      	cmp	r3, #0
   1d4fc:	d032      	beq.n	1d564 <readline_process_char+0x4ac>
        if (rl.line->len < last_line_len) {
   1d4fe:	4b17      	ldr	r3, [pc, #92]	; (1d55c <readline_process_char+0x4a4>)
   1d500:	681b      	ldr	r3, [r3, #0]
   1d502:	685a      	ldr	r2, [r3, #4]
   1d504:	697b      	ldr	r3, [r7, #20]
   1d506:	429a      	cmp	r2, r3
   1d508:	d206      	bcs.n	1d518 <readline_process_char+0x460>
            // erase old chars
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1d50a:	4b14      	ldr	r3, [pc, #80]	; (1d55c <readline_process_char+0x4a4>)
   1d50c:	691b      	ldr	r3, [r3, #16]
   1d50e:	697a      	ldr	r2, [r7, #20]
   1d510:	1ad3      	subs	r3, r2, r3
   1d512:	4618      	mov	r0, r3
   1d514:	f7ff fdc2 	bl	1d09c <mp_hal_erase_line_from_cursor>
        }
        // draw new chars
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1d518:	4b10      	ldr	r3, [pc, #64]	; (1d55c <readline_process_char+0x4a4>)
   1d51a:	681b      	ldr	r3, [r3, #0]
   1d51c:	689a      	ldr	r2, [r3, #8]
   1d51e:	4b0f      	ldr	r3, [pc, #60]	; (1d55c <readline_process_char+0x4a4>)
   1d520:	691b      	ldr	r3, [r3, #16]
   1d522:	18d0      	adds	r0, r2, r3
   1d524:	4b0d      	ldr	r3, [pc, #52]	; (1d55c <readline_process_char+0x4a4>)
   1d526:	681b      	ldr	r3, [r3, #0]
   1d528:	685a      	ldr	r2, [r3, #4]
   1d52a:	4b0c      	ldr	r3, [pc, #48]	; (1d55c <readline_process_char+0x4a4>)
   1d52c:	691b      	ldr	r3, [r3, #16]
   1d52e:	1ad3      	subs	r3, r2, r3
   1d530:	4619      	mov	r1, r3
   1d532:	f7fe f8c9 	bl	1b6c8 <mp_hal_stdout_tx_strn>
        // move cursor forward if needed (already moved forward by length of line, so move it back)
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1d536:	4b09      	ldr	r3, [pc, #36]	; (1d55c <readline_process_char+0x4a4>)
   1d538:	681b      	ldr	r3, [r3, #0]
   1d53a:	685a      	ldr	r2, [r3, #4]
   1d53c:	4b07      	ldr	r3, [pc, #28]	; (1d55c <readline_process_char+0x4a4>)
   1d53e:	6919      	ldr	r1, [r3, #16]
   1d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d542:	440b      	add	r3, r1
   1d544:	1ad3      	subs	r3, r2, r3
   1d546:	4618      	mov	r0, r3
   1d548:	f7ff fd79 	bl	1d03e <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1d54c:	4b03      	ldr	r3, [pc, #12]	; (1d55c <readline_process_char+0x4a4>)
   1d54e:	691a      	ldr	r2, [r3, #16]
   1d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d552:	4413      	add	r3, r2
   1d554:	4a01      	ldr	r2, [pc, #4]	; (1d55c <readline_process_char+0x4a4>)
   1d556:	6113      	str	r3, [r2, #16]
   1d558:	e018      	b.n	1d58c <readline_process_char+0x4d4>
   1d55a:	bf00      	nop
   1d55c:	200012d4 	.word	0x200012d4
   1d560:	200012f0 	.word	0x200012f0
    } else if (redraw_step_forward > 0) {
   1d564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d566:	2b00      	cmp	r3, #0
   1d568:	dd10      	ble.n	1d58c <readline_process_char+0x4d4>
        // draw over old chars to move cursor forwards
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1d56a:	4b0b      	ldr	r3, [pc, #44]	; (1d598 <readline_process_char+0x4e0>)
   1d56c:	681b      	ldr	r3, [r3, #0]
   1d56e:	689a      	ldr	r2, [r3, #8]
   1d570:	4b09      	ldr	r3, [pc, #36]	; (1d598 <readline_process_char+0x4e0>)
   1d572:	691b      	ldr	r3, [r3, #16]
   1d574:	4413      	add	r3, r2
   1d576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d578:	4611      	mov	r1, r2
   1d57a:	4618      	mov	r0, r3
   1d57c:	f7fe f8a4 	bl	1b6c8 <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1d580:	4b05      	ldr	r3, [pc, #20]	; (1d598 <readline_process_char+0x4e0>)
   1d582:	691a      	ldr	r2, [r3, #16]
   1d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d586:	4413      	add	r3, r2
   1d588:	4a03      	ldr	r2, [pc, #12]	; (1d598 <readline_process_char+0x4e0>)
   1d58a:	6113      	str	r3, [r2, #16]
    }

    return -1;
   1d58c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1d590:	4618      	mov	r0, r3
   1d592:	3730      	adds	r7, #48	; 0x30
   1d594:	46bd      	mov	sp, r7
   1d596:	bd80      	pop	{r7, pc}
   1d598:	200012d4 	.word	0x200012d4

0001d59c <readline_auto_indent>:

#if MICROPY_REPL_AUTO_INDENT
STATIC void readline_auto_indent(void) {
   1d59c:	b580      	push	{r7, lr}
   1d59e:	b086      	sub	sp, #24
   1d5a0:	af00      	add	r7, sp, #0
    vstr_t *line = rl.line;
   1d5a2:	4b44      	ldr	r3, [pc, #272]	; (1d6b4 <readline_auto_indent+0x118>)
   1d5a4:	681b      	ldr	r3, [r3, #0]
   1d5a6:	607b      	str	r3, [r7, #4]
    if (line->len > 1 && line->buf[line->len - 1] == '\n') {
   1d5a8:	687b      	ldr	r3, [r7, #4]
   1d5aa:	685b      	ldr	r3, [r3, #4]
   1d5ac:	2b01      	cmp	r3, #1
   1d5ae:	d97d      	bls.n	1d6ac <readline_auto_indent+0x110>
   1d5b0:	687b      	ldr	r3, [r7, #4]
   1d5b2:	689a      	ldr	r2, [r3, #8]
   1d5b4:	687b      	ldr	r3, [r7, #4]
   1d5b6:	685b      	ldr	r3, [r3, #4]
   1d5b8:	3b01      	subs	r3, #1
   1d5ba:	4413      	add	r3, r2
   1d5bc:	781b      	ldrb	r3, [r3, #0]
   1d5be:	2b0a      	cmp	r3, #10
   1d5c0:	d174      	bne.n	1d6ac <readline_auto_indent+0x110>
        int i;
        for (i = line->len - 1; i > 0; i--) {
   1d5c2:	687b      	ldr	r3, [r7, #4]
   1d5c4:	685b      	ldr	r3, [r3, #4]
   1d5c6:	3b01      	subs	r3, #1
   1d5c8:	617b      	str	r3, [r7, #20]
   1d5ca:	e00a      	b.n	1d5e2 <readline_auto_indent+0x46>
            if (line->buf[i - 1] == '\n') {
   1d5cc:	687b      	ldr	r3, [r7, #4]
   1d5ce:	689a      	ldr	r2, [r3, #8]
   1d5d0:	697b      	ldr	r3, [r7, #20]
   1d5d2:	3b01      	subs	r3, #1
   1d5d4:	4413      	add	r3, r2
   1d5d6:	781b      	ldrb	r3, [r3, #0]
   1d5d8:	2b0a      	cmp	r3, #10
   1d5da:	d006      	beq.n	1d5ea <readline_auto_indent+0x4e>
        for (i = line->len - 1; i > 0; i--) {
   1d5dc:	697b      	ldr	r3, [r7, #20]
   1d5de:	3b01      	subs	r3, #1
   1d5e0:	617b      	str	r3, [r7, #20]
   1d5e2:	697b      	ldr	r3, [r7, #20]
   1d5e4:	2b00      	cmp	r3, #0
   1d5e6:	dcf1      	bgt.n	1d5cc <readline_auto_indent+0x30>
   1d5e8:	e000      	b.n	1d5ec <readline_auto_indent+0x50>
                break;
   1d5ea:	bf00      	nop
            }
        }
        size_t j;
        for (j = i; j < line->len; j++) {
   1d5ec:	697b      	ldr	r3, [r7, #20]
   1d5ee:	613b      	str	r3, [r7, #16]
   1d5f0:	e009      	b.n	1d606 <readline_auto_indent+0x6a>
            if (line->buf[j] != ' ') {
   1d5f2:	687b      	ldr	r3, [r7, #4]
   1d5f4:	689a      	ldr	r2, [r3, #8]
   1d5f6:	693b      	ldr	r3, [r7, #16]
   1d5f8:	4413      	add	r3, r2
   1d5fa:	781b      	ldrb	r3, [r3, #0]
   1d5fc:	2b20      	cmp	r3, #32
   1d5fe:	d108      	bne.n	1d612 <readline_auto_indent+0x76>
        for (j = i; j < line->len; j++) {
   1d600:	693b      	ldr	r3, [r7, #16]
   1d602:	3301      	adds	r3, #1
   1d604:	613b      	str	r3, [r7, #16]
   1d606:	687b      	ldr	r3, [r7, #4]
   1d608:	685a      	ldr	r2, [r3, #4]
   1d60a:	693b      	ldr	r3, [r7, #16]
   1d60c:	429a      	cmp	r2, r3
   1d60e:	d8f0      	bhi.n	1d5f2 <readline_auto_indent+0x56>
   1d610:	e000      	b.n	1d614 <readline_auto_indent+0x78>
                break;
   1d612:	bf00      	nop
            }
        }
        // i=start of line; j=first non-space
        if (i > 0 && j + 1 == line->len) {
   1d614:	697b      	ldr	r3, [r7, #20]
   1d616:	2b00      	cmp	r3, #0
   1d618:	dd21      	ble.n	1d65e <readline_auto_indent+0xc2>
   1d61a:	693b      	ldr	r3, [r7, #16]
   1d61c:	1c5a      	adds	r2, r3, #1
   1d61e:	687b      	ldr	r3, [r7, #4]
   1d620:	685b      	ldr	r3, [r3, #4]
   1d622:	429a      	cmp	r2, r3
   1d624:	d11b      	bne.n	1d65e <readline_auto_indent+0xc2>
            // previous line is not first line and is all spaces
            for (size_t k = i - 1; k > 0; --k) {
   1d626:	697b      	ldr	r3, [r7, #20]
   1d628:	3b01      	subs	r3, #1
   1d62a:	60fb      	str	r3, [r7, #12]
   1d62c:	e012      	b.n	1d654 <readline_auto_indent+0xb8>
                if (line->buf[k - 1] == '\n') {
   1d62e:	687b      	ldr	r3, [r7, #4]
   1d630:	689a      	ldr	r2, [r3, #8]
   1d632:	68fb      	ldr	r3, [r7, #12]
   1d634:	3b01      	subs	r3, #1
   1d636:	4413      	add	r3, r2
   1d638:	781b      	ldrb	r3, [r3, #0]
   1d63a:	2b0a      	cmp	r3, #10
   1d63c:	d035      	beq.n	1d6aa <readline_auto_indent+0x10e>
                    // don't auto-indent if last 2 lines are all spaces
                    return;
                } else if (line->buf[k - 1] != ' ') {
   1d63e:	687b      	ldr	r3, [r7, #4]
   1d640:	689a      	ldr	r2, [r3, #8]
   1d642:	68fb      	ldr	r3, [r7, #12]
   1d644:	3b01      	subs	r3, #1
   1d646:	4413      	add	r3, r2
   1d648:	781b      	ldrb	r3, [r3, #0]
   1d64a:	2b20      	cmp	r3, #32
   1d64c:	d106      	bne.n	1d65c <readline_auto_indent+0xc0>
            for (size_t k = i - 1; k > 0; --k) {
   1d64e:	68fb      	ldr	r3, [r7, #12]
   1d650:	3b01      	subs	r3, #1
   1d652:	60fb      	str	r3, [r7, #12]
   1d654:	68fb      	ldr	r3, [r7, #12]
   1d656:	2b00      	cmp	r3, #0
   1d658:	d1e9      	bne.n	1d62e <readline_auto_indent+0x92>
   1d65a:	e000      	b.n	1d65e <readline_auto_indent+0xc2>
                    // 2nd previous line is not all spaces
                    break;
   1d65c:	bf00      	nop
                }
            }
        }
        int n = (j - i) / 4;
   1d65e:	697b      	ldr	r3, [r7, #20]
   1d660:	693a      	ldr	r2, [r7, #16]
   1d662:	1ad3      	subs	r3, r2, r3
   1d664:	089b      	lsrs	r3, r3, #2
   1d666:	60bb      	str	r3, [r7, #8]
        if (line->buf[line->len - 2] == ':') {
   1d668:	687b      	ldr	r3, [r7, #4]
   1d66a:	689a      	ldr	r2, [r3, #8]
   1d66c:	687b      	ldr	r3, [r7, #4]
   1d66e:	685b      	ldr	r3, [r3, #4]
   1d670:	3b02      	subs	r3, #2
   1d672:	4413      	add	r3, r2
   1d674:	781b      	ldrb	r3, [r3, #0]
   1d676:	2b3a      	cmp	r3, #58	; 0x3a
   1d678:	d111      	bne.n	1d69e <readline_auto_indent+0x102>
            n += 1;
   1d67a:	68bb      	ldr	r3, [r7, #8]
   1d67c:	3301      	adds	r3, #1
   1d67e:	60bb      	str	r3, [r7, #8]
        }
        while (n-- > 0) {
   1d680:	e00d      	b.n	1d69e <readline_auto_indent+0x102>
            vstr_add_strn(line, "    ", 4);
   1d682:	2204      	movs	r2, #4
   1d684:	490c      	ldr	r1, [pc, #48]	; (1d6b8 <readline_auto_indent+0x11c>)
   1d686:	6878      	ldr	r0, [r7, #4]
   1d688:	f7e3 ffe9 	bl	165e <vstr_add_strn>
            mp_hal_stdout_tx_strn("    ", 4);
   1d68c:	2104      	movs	r1, #4
   1d68e:	480a      	ldr	r0, [pc, #40]	; (1d6b8 <readline_auto_indent+0x11c>)
   1d690:	f7fe f81a 	bl	1b6c8 <mp_hal_stdout_tx_strn>
            rl.cursor_pos += 4;
   1d694:	4b07      	ldr	r3, [pc, #28]	; (1d6b4 <readline_auto_indent+0x118>)
   1d696:	691b      	ldr	r3, [r3, #16]
   1d698:	3304      	adds	r3, #4
   1d69a:	4a06      	ldr	r2, [pc, #24]	; (1d6b4 <readline_auto_indent+0x118>)
   1d69c:	6113      	str	r3, [r2, #16]
        while (n-- > 0) {
   1d69e:	68bb      	ldr	r3, [r7, #8]
   1d6a0:	1e5a      	subs	r2, r3, #1
   1d6a2:	60ba      	str	r2, [r7, #8]
   1d6a4:	2b00      	cmp	r3, #0
   1d6a6:	dcec      	bgt.n	1d682 <readline_auto_indent+0xe6>
   1d6a8:	e000      	b.n	1d6ac <readline_auto_indent+0x110>
                    return;
   1d6aa:	bf00      	nop
        }
    }
}
   1d6ac:	3718      	adds	r7, #24
   1d6ae:	46bd      	mov	sp, r7
   1d6b0:	bd80      	pop	{r7, pc}
   1d6b2:	bf00      	nop
   1d6b4:	200012d4 	.word	0x200012d4
   1d6b8:	0002590c 	.word	0x0002590c

0001d6bc <readline_note_newline>:
#endif

void readline_note_newline(const char *prompt) {
   1d6bc:	b580      	push	{r7, lr}
   1d6be:	b082      	sub	sp, #8
   1d6c0:	af00      	add	r7, sp, #0
   1d6c2:	6078      	str	r0, [r7, #4]
    rl.orig_line_len = rl.line->len;
   1d6c4:	4b0a      	ldr	r3, [pc, #40]	; (1d6f0 <readline_note_newline+0x34>)
   1d6c6:	681b      	ldr	r3, [r3, #0]
   1d6c8:	685b      	ldr	r3, [r3, #4]
   1d6ca:	4a09      	ldr	r2, [pc, #36]	; (1d6f0 <readline_note_newline+0x34>)
   1d6cc:	6053      	str	r3, [r2, #4]
    rl.cursor_pos = rl.orig_line_len;
   1d6ce:	4b08      	ldr	r3, [pc, #32]	; (1d6f0 <readline_note_newline+0x34>)
   1d6d0:	685b      	ldr	r3, [r3, #4]
   1d6d2:	4a07      	ldr	r2, [pc, #28]	; (1d6f0 <readline_note_newline+0x34>)
   1d6d4:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1d6d6:	4a06      	ldr	r2, [pc, #24]	; (1d6f0 <readline_note_newline+0x34>)
   1d6d8:	687b      	ldr	r3, [r7, #4]
   1d6da:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1d6dc:	6878      	ldr	r0, [r7, #4]
   1d6de:	f7fe ff6d 	bl	1c5bc <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1d6e2:	f7ff ff5b 	bl	1d59c <readline_auto_indent>
    #endif
}
   1d6e6:	bf00      	nop
   1d6e8:	3708      	adds	r7, #8
   1d6ea:	46bd      	mov	sp, r7
   1d6ec:	bd80      	pop	{r7, pc}
   1d6ee:	bf00      	nop
   1d6f0:	200012d4 	.word	0x200012d4

0001d6f4 <readline_init>:

void readline_init(vstr_t *line, const char *prompt) {
   1d6f4:	b580      	push	{r7, lr}
   1d6f6:	b082      	sub	sp, #8
   1d6f8:	af00      	add	r7, sp, #0
   1d6fa:	6078      	str	r0, [r7, #4]
   1d6fc:	6039      	str	r1, [r7, #0]
    rl.line = line;
   1d6fe:	4a10      	ldr	r2, [pc, #64]	; (1d740 <readline_init+0x4c>)
   1d700:	687b      	ldr	r3, [r7, #4]
   1d702:	6013      	str	r3, [r2, #0]
    rl.orig_line_len = line->len;
   1d704:	687b      	ldr	r3, [r7, #4]
   1d706:	685b      	ldr	r3, [r3, #4]
   1d708:	4a0d      	ldr	r2, [pc, #52]	; (1d740 <readline_init+0x4c>)
   1d70a:	6053      	str	r3, [r2, #4]
    rl.escape_seq = ESEQ_NONE;
   1d70c:	4b0c      	ldr	r3, [pc, #48]	; (1d740 <readline_init+0x4c>)
   1d70e:	2200      	movs	r2, #0
   1d710:	609a      	str	r2, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1d712:	4b0b      	ldr	r3, [pc, #44]	; (1d740 <readline_init+0x4c>)
   1d714:	2200      	movs	r2, #0
   1d716:	751a      	strb	r2, [r3, #20]
    rl.hist_cur = -1;
   1d718:	4b09      	ldr	r3, [pc, #36]	; (1d740 <readline_init+0x4c>)
   1d71a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d71e:	60da      	str	r2, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1d720:	4b07      	ldr	r3, [pc, #28]	; (1d740 <readline_init+0x4c>)
   1d722:	685b      	ldr	r3, [r3, #4]
   1d724:	4a06      	ldr	r2, [pc, #24]	; (1d740 <readline_init+0x4c>)
   1d726:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1d728:	4a05      	ldr	r2, [pc, #20]	; (1d740 <readline_init+0x4c>)
   1d72a:	683b      	ldr	r3, [r7, #0]
   1d72c:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1d72e:	6838      	ldr	r0, [r7, #0]
   1d730:	f7fe ff44 	bl	1c5bc <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1d734:	f7ff ff32 	bl	1d59c <readline_auto_indent>
    #endif
}
   1d738:	bf00      	nop
   1d73a:	3708      	adds	r7, #8
   1d73c:	46bd      	mov	sp, r7
   1d73e:	bd80      	pop	{r7, pc}
   1d740:	200012d4 	.word	0x200012d4

0001d744 <readline>:

int readline(vstr_t *line, const char *prompt) {
   1d744:	b580      	push	{r7, lr}
   1d746:	b084      	sub	sp, #16
   1d748:	af00      	add	r7, sp, #0
   1d74a:	6078      	str	r0, [r7, #4]
   1d74c:	6039      	str	r1, [r7, #0]
    readline_init(line, prompt);
   1d74e:	6839      	ldr	r1, [r7, #0]
   1d750:	6878      	ldr	r0, [r7, #4]
   1d752:	f7ff ffcf 	bl	1d6f4 <readline_init>
    for (;;) {
        int c = mp_hal_stdin_rx_chr();
   1d756:	f7fd ff9f 	bl	1b698 <mp_hal_stdin_rx_chr>
   1d75a:	60f8      	str	r0, [r7, #12]
        int r = readline_process_char(c);
   1d75c:	68f8      	ldr	r0, [r7, #12]
   1d75e:	f7ff fcab 	bl	1d0b8 <readline_process_char>
   1d762:	60b8      	str	r0, [r7, #8]
        if (r >= 0) {
   1d764:	68bb      	ldr	r3, [r7, #8]
   1d766:	2b00      	cmp	r3, #0
   1d768:	dbf5      	blt.n	1d756 <readline+0x12>
            return r;
   1d76a:	68bb      	ldr	r3, [r7, #8]
        }
    }
}
   1d76c:	4618      	mov	r0, r3
   1d76e:	3710      	adds	r7, #16
   1d770:	46bd      	mov	sp, r7
   1d772:	bd80      	pop	{r7, pc}

0001d774 <readline_push_history>:

void readline_push_history(const char *line) {
   1d774:	b580      	push	{r7, lr}
   1d776:	b084      	sub	sp, #16
   1d778:	af00      	add	r7, sp, #0
   1d77a:	6078      	str	r0, [r7, #4]
    if (line[0] != '\0'
   1d77c:	687b      	ldr	r3, [r7, #4]
   1d77e:	781b      	ldrb	r3, [r3, #0]
   1d780:	2b00      	cmp	r3, #0
   1d782:	d02a      	beq.n	1d7da <readline_push_history+0x66>
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1d784:	4b17      	ldr	r3, [pc, #92]	; (1d7e4 <readline_push_history+0x70>)
   1d786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1d788:	2b00      	cmp	r3, #0
   1d78a:	d008      	beq.n	1d79e <readline_push_history+0x2a>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1d78c:	4b15      	ldr	r3, [pc, #84]	; (1d7e4 <readline_push_history+0x70>)
   1d78e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1d790:	6879      	ldr	r1, [r7, #4]
   1d792:	4618      	mov	r0, r3
   1d794:	f7ff faf0 	bl	1cd78 <strcmp>
   1d798:	4603      	mov	r3, r0
   1d79a:	2b00      	cmp	r3, #0
   1d79c:	d01d      	beq.n	1d7da <readline_push_history+0x66>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1d79e:	6878      	ldr	r0, [r7, #4]
   1d7a0:	f7ff fc2e 	bl	1d000 <str_dup_maybe>
   1d7a4:	60b8      	str	r0, [r7, #8]
        if (most_recent_hist != NULL) {
   1d7a6:	68bb      	ldr	r3, [r7, #8]
   1d7a8:	2b00      	cmp	r3, #0
   1d7aa:	d016      	beq.n	1d7da <readline_push_history+0x66>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1d7ac:	2307      	movs	r3, #7
   1d7ae:	60fb      	str	r3, [r7, #12]
   1d7b0:	e00d      	b.n	1d7ce <readline_push_history+0x5a>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1d7b2:	68fb      	ldr	r3, [r7, #12]
   1d7b4:	3b01      	subs	r3, #1
   1d7b6:	4a0b      	ldr	r2, [pc, #44]	; (1d7e4 <readline_push_history+0x70>)
   1d7b8:	331a      	adds	r3, #26
   1d7ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1d7be:	4909      	ldr	r1, [pc, #36]	; (1d7e4 <readline_push_history+0x70>)
   1d7c0:	68fb      	ldr	r3, [r7, #12]
   1d7c2:	331a      	adds	r3, #26
   1d7c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1d7c8:	68fb      	ldr	r3, [r7, #12]
   1d7ca:	3b01      	subs	r3, #1
   1d7cc:	60fb      	str	r3, [r7, #12]
   1d7ce:	68fb      	ldr	r3, [r7, #12]
   1d7d0:	2b00      	cmp	r3, #0
   1d7d2:	dcee      	bgt.n	1d7b2 <readline_push_history+0x3e>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1d7d4:	4a03      	ldr	r2, [pc, #12]	; (1d7e4 <readline_push_history+0x70>)
   1d7d6:	68bb      	ldr	r3, [r7, #8]
   1d7d8:	6693      	str	r3, [r2, #104]	; 0x68
        }
    }
}
   1d7da:	bf00      	nop
   1d7dc:	3710      	adds	r7, #16
   1d7de:	46bd      	mov	sp, r7
   1d7e0:	bd80      	pop	{r7, pc}
   1d7e2:	bf00      	nop
   1d7e4:	200012f0 	.word	0x200012f0

0001d7e8 <GPIODirModeSet>:
   1d7e8:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
   1d7ec:	f012 0f01 	tst.w	r2, #1
   1d7f0:	bf14      	ite	ne
   1d7f2:	430b      	orrne	r3, r1
   1d7f4:	438b      	biceq	r3, r1
   1d7f6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
   1d7fa:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
   1d7fe:	0792      	lsls	r2, r2, #30
   1d800:	bf4c      	ite	mi
   1d802:	4319      	orrmi	r1, r3
   1d804:	ea23 0101 	bicpl.w	r1, r3, r1
   1d808:	f8c0 1420 	str.w	r1, [r0, #1056]	; 0x420
   1d80c:	4770      	bx	lr

0001d80e <GPIODirModeGet>:
   1d80e:	2301      	movs	r3, #1
   1d810:	fa03 f101 	lsl.w	r1, r3, r1
   1d814:	b510      	push	{r4, lr}
   1d816:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
   1d81a:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
   1d81e:	b2c9      	uxtb	r1, r1
   1d820:	420c      	tst	r4, r1
   1d822:	bf08      	it	eq
   1d824:	2300      	moveq	r3, #0
   1d826:	420a      	tst	r2, r1
   1d828:	bf14      	ite	ne
   1d82a:	2002      	movne	r0, #2
   1d82c:	2000      	moveq	r0, #0
   1d82e:	4318      	orrs	r0, r3
   1d830:	bd10      	pop	{r4, pc}

0001d832 <GPIOPadConfigSet>:
   1d832:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d834:	f3c2 1741 	ubfx	r7, r2, #5, #2
   1d838:	2500      	movs	r5, #0
   1d83a:	f04f 0e03 	mov.w	lr, #3
   1d83e:	fa41 f405 	asr.w	r4, r1, r5
   1d842:	07e6      	lsls	r6, r4, #31
   1d844:	d50f      	bpl.n	1d866 <GPIOPadConfigSet+0x34>
   1d846:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1d84a:	006c      	lsls	r4, r5, #1
   1d84c:	fa0e fc04 	lsl.w	ip, lr, r4
   1d850:	ea26 060c 	bic.w	r6, r6, ip
   1d854:	f8c0 6fc4 	str.w	r6, [r0, #4036]	; 0xfc4
   1d858:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1d85c:	fa07 f404 	lsl.w	r4, r7, r4
   1d860:	4334      	orrs	r4, r6
   1d862:	f8c0 4fc4 	str.w	r4, [r0, #4036]	; 0xfc4
   1d866:	3501      	adds	r5, #1
   1d868:	2d08      	cmp	r5, #8
   1d86a:	d1e8      	bne.n	1d83e <GPIOPadConfigSet+0xc>
   1d86c:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
   1d870:	07d5      	lsls	r5, r2, #31
   1d872:	bf4c      	ite	mi
   1d874:	430c      	orrmi	r4, r1
   1d876:	438c      	bicpl	r4, r1
   1d878:	f8c0 4500 	str.w	r4, [r0, #1280]	; 0x500
   1d87c:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1d880:	0797      	lsls	r7, r2, #30
   1d882:	bf4c      	ite	mi
   1d884:	430c      	orrmi	r4, r1
   1d886:	438c      	bicpl	r4, r1
   1d888:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
   1d88c:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1d890:	0756      	lsls	r6, r2, #29
   1d892:	bf4c      	ite	mi
   1d894:	430c      	orrmi	r4, r1
   1d896:	438c      	bicpl	r4, r1
   1d898:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
   1d89c:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1d8a0:	0715      	lsls	r5, r2, #28
   1d8a2:	bf4c      	ite	mi
   1d8a4:	430c      	orrmi	r4, r1
   1d8a6:	438c      	bicpl	r4, r1
   1d8a8:	f8c0 4518 	str.w	r4, [r0, #1304]	; 0x518
   1d8ac:	f012 0f10 	tst.w	r2, #16
   1d8b0:	f8d0 253c 	ldr.w	r2, [r0, #1340]	; 0x53c
   1d8b4:	bf14      	ite	ne
   1d8b6:	430a      	orrne	r2, r1
   1d8b8:	438a      	biceq	r2, r1
   1d8ba:	f8c0 253c 	str.w	r2, [r0, #1340]	; 0x53c
   1d8be:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1d8c2:	07dc      	lsls	r4, r3, #31
   1d8c4:	bf4c      	ite	mi
   1d8c6:	430a      	orrmi	r2, r1
   1d8c8:	438a      	bicpl	r2, r1
   1d8ca:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
   1d8ce:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   1d8d2:	079f      	lsls	r7, r3, #30
   1d8d4:	bf4c      	ite	mi
   1d8d6:	430a      	orrmi	r2, r1
   1d8d8:	438a      	bicpl	r2, r1
   1d8da:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   1d8de:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1d8e2:	075e      	lsls	r6, r3, #29
   1d8e4:	bf4c      	ite	mi
   1d8e6:	430a      	orrmi	r2, r1
   1d8e8:	438a      	bicpl	r2, r1
   1d8ea:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
   1d8ee:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1d8f2:	071d      	lsls	r5, r3, #28
   1d8f4:	bf4c      	ite	mi
   1d8f6:	430a      	orrmi	r2, r1
   1d8f8:	438a      	bicpl	r2, r1
   1d8fa:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   1d8fe:	f8d0 2544 	ldr.w	r2, [r0, #1348]	; 0x544
   1d902:	059c      	lsls	r4, r3, #22
   1d904:	bf4c      	ite	mi
   1d906:	430a      	orrmi	r2, r1
   1d908:	438a      	bicpl	r2, r1
   1d90a:	f8c0 2544 	str.w	r2, [r0, #1348]	; 0x544
   1d90e:	f8d0 2540 	ldr.w	r2, [r0, #1344]	; 0x540
   1d912:	f413 7f40 	tst.w	r3, #768	; 0x300
   1d916:	bf14      	ite	ne
   1d918:	430a      	orrne	r2, r1
   1d91a:	438a      	biceq	r2, r1
   1d91c:	f8c0 2540 	str.w	r2, [r0, #1344]	; 0x540
   1d920:	b92b      	cbnz	r3, 1d92e <GPIOPadConfigSet+0xfc>
   1d922:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1d926:	4319      	orrs	r1, r3
   1d928:	f8c0 1528 	str.w	r1, [r0, #1320]	; 0x528
   1d92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d92e:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1d932:	ea23 0101 	bic.w	r1, r3, r1
   1d936:	e7f7      	b.n	1d928 <GPIOPadConfigSet+0xf6>

0001d938 <GPIOPadConfigGet>:
   1d938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d93c:	2401      	movs	r4, #1
   1d93e:	f8d0 5500 	ldr.w	r5, [r0, #1280]	; 0x500
   1d942:	fa04 f101 	lsl.w	r1, r4, r1
   1d946:	b2c9      	uxtb	r1, r1
   1d948:	420d      	tst	r5, r1
   1d94a:	bf18      	it	ne
   1d94c:	46a0      	movne	r8, r4
   1d94e:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1d952:	bf08      	it	eq
   1d954:	f04f 0800 	moveq.w	r8, #0
   1d958:	4221      	tst	r1, r4
   1d95a:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1d95e:	bf14      	ite	ne
   1d960:	f04f 0c02 	movne.w	ip, #2
   1d964:	f04f 0c00 	moveq.w	ip, #0
   1d968:	4221      	tst	r1, r4
   1d96a:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1d96e:	bf14      	ite	ne
   1d970:	f04f 0e04 	movne.w	lr, #4
   1d974:	f04f 0e00 	moveq.w	lr, #0
   1d978:	4221      	tst	r1, r4
   1d97a:	f8d0 453c 	ldr.w	r4, [r0, #1340]	; 0x53c
   1d97e:	f8d0 5fc4 	ldr.w	r5, [r0, #4036]	; 0xfc4
   1d982:	bf14      	ite	ne
   1d984:	2708      	movne	r7, #8
   1d986:	2700      	moveq	r7, #0
   1d988:	4221      	tst	r1, r4
   1d98a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1d98e:	fa25 f404 	lsr.w	r4, r5, r4
   1d992:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1d996:	f004 0460 	and.w	r4, r4, #96	; 0x60
   1d99a:	ea44 0408 	orr.w	r4, r4, r8
   1d99e:	ea44 040c 	orr.w	r4, r4, ip
   1d9a2:	ea44 040e 	orr.w	r4, r4, lr
   1d9a6:	bf14      	ite	ne
   1d9a8:	2610      	movne	r6, #16
   1d9aa:	2600      	moveq	r6, #0
   1d9ac:	433c      	orrs	r4, r7
   1d9ae:	4334      	orrs	r4, r6
   1d9b0:	6014      	str	r4, [r2, #0]
   1d9b2:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1d9b6:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
   1d9ba:	4211      	tst	r1, r2
   1d9bc:	bf14      	ite	ne
   1d9be:	2201      	movne	r2, #1
   1d9c0:	2200      	moveq	r2, #0
   1d9c2:	4221      	tst	r1, r4
   1d9c4:	bf14      	ite	ne
   1d9c6:	2402      	movne	r4, #2
   1d9c8:	2400      	moveq	r4, #0
   1d9ca:	4314      	orrs	r4, r2
   1d9cc:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1d9d0:	4211      	tst	r1, r2
   1d9d2:	bf14      	ite	ne
   1d9d4:	2204      	movne	r2, #4
   1d9d6:	2200      	moveq	r2, #0
   1d9d8:	4314      	orrs	r4, r2
   1d9da:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1d9de:	4211      	tst	r1, r2
   1d9e0:	bf14      	ite	ne
   1d9e2:	2208      	movne	r2, #8
   1d9e4:	2200      	moveq	r2, #0
   1d9e6:	4322      	orrs	r2, r4
   1d9e8:	f8d0 4540 	ldr.w	r4, [r0, #1344]	; 0x540
   1d9ec:	4221      	tst	r1, r4
   1d9ee:	d008      	beq.n	1da02 <GPIOPadConfigGet+0xca>
   1d9f0:	f8d0 0544 	ldr.w	r0, [r0, #1348]	; 0x544
   1d9f4:	4201      	tst	r1, r0
   1d9f6:	bf14      	ite	ne
   1d9f8:	f44f 7100 	movne.w	r1, #512	; 0x200
   1d9fc:	f44f 7180 	moveq.w	r1, #256	; 0x100
   1da00:	430a      	orrs	r2, r1
   1da02:	601a      	str	r2, [r3, #0]
   1da04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001da08 <GPIOPinRead>:
   1da08:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   1da0c:	4770      	bx	lr

0001da0e <GPIOPinWrite>:
   1da0e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   1da12:	4770      	bx	lr

0001da14 <GPIOPinTypeUSBDigital>:
   1da14:	b570      	push	{r4, r5, r6, lr}
   1da16:	2202      	movs	r2, #2
   1da18:	460d      	mov	r5, r1
   1da1a:	f7ff fee5 	bl	1d7e8 <GPIODirModeSet>
   1da1e:	4629      	mov	r1, r5
   1da20:	2308      	movs	r3, #8
   1da22:	2201      	movs	r2, #1
   1da24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1da28:	f7ff bf03 	b.w	1d832 <GPIOPadConfigSet>

0001da2c <GPIOPinTypeUART>:
   1da2c:	f7ff bff2 	b.w	1da14 <GPIOPinTypeUSBDigital>

0001da30 <GPIOPinConfigure>:
   1da30:	4a0e      	ldr	r2, [pc, #56]	; (1da6c <GPIOPinConfigure+0x3c>)
   1da32:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1da36:	6811      	ldr	r1, [r2, #0]
   1da38:	2201      	movs	r2, #1
   1da3a:	409a      	lsls	r2, r3
   1da3c:	420a      	tst	r2, r1
   1da3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1da42:	bf18      	it	ne
   1da44:	3301      	addne	r3, #1
   1da46:	4a0a      	ldr	r2, [pc, #40]	; (1da70 <GPIOPinConfigure+0x40>)
   1da48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1da4c:	b510      	push	{r4, lr}
   1da4e:	f8d2 352c 	ldr.w	r3, [r2, #1324]	; 0x52c
   1da52:	f3c0 2407 	ubfx	r4, r0, #8, #8
   1da56:	210f      	movs	r1, #15
   1da58:	40a1      	lsls	r1, r4
   1da5a:	f000 000f 	and.w	r0, r0, #15
   1da5e:	ea23 0301 	bic.w	r3, r3, r1
   1da62:	40a0      	lsls	r0, r4
   1da64:	4318      	orrs	r0, r3
   1da66:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
   1da6a:	bd10      	pop	{r4, pc}
   1da6c:	400fe06c 	.word	0x400fe06c
   1da70:	00025a60 	.word	0x00025a60

0001da74 <SysCtlPeripheralReady>:
   1da74:	4a08      	ldr	r2, [pc, #32]	; (1da98 <SysCtlPeripheralReady+0x24>)
   1da76:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1da7a:	441a      	add	r2, r3
   1da7c:	0080      	lsls	r0, r0, #2
   1da7e:	4b07      	ldr	r3, [pc, #28]	; (1da9c <SysCtlPeripheralReady+0x28>)
   1da80:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1da84:	ea03 1342 	and.w	r3, r3, r2, lsl #5
   1da88:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1da8c:	4318      	orrs	r0, r3
   1da8e:	6800      	ldr	r0, [r0, #0]
   1da90:	3000      	adds	r0, #0
   1da92:	bf18      	it	ne
   1da94:	2001      	movne	r0, #1
   1da96:	4770      	bx	lr
   1da98:	400fea00 	.word	0x400fea00
   1da9c:	01ffffe0 	.word	0x01ffffe0

0001daa0 <SysCtlPeripheralEnable>:
   1daa0:	4a07      	ldr	r2, [pc, #28]	; (1dac0 <SysCtlPeripheralEnable+0x20>)
   1daa2:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1daa6:	441a      	add	r2, r3
   1daa8:	0080      	lsls	r0, r0, #2
   1daaa:	4b06      	ldr	r3, [pc, #24]	; (1dac4 <SysCtlPeripheralEnable+0x24>)
   1daac:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1dab0:	ea03 1342 	and.w	r3, r3, r2, lsl #5
   1dab4:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1dab8:	4318      	orrs	r0, r3
   1daba:	2301      	movs	r3, #1
   1dabc:	6003      	str	r3, [r0, #0]
   1dabe:	4770      	bx	lr
   1dac0:	400fe600 	.word	0x400fe600
   1dac4:	01ffffe0 	.word	0x01ffffe0

0001dac8 <SysCtlReset>:
   1dac8:	4b01      	ldr	r3, [pc, #4]	; (1dad0 <SysCtlReset+0x8>)
   1daca:	4a02      	ldr	r2, [pc, #8]	; (1dad4 <SysCtlReset+0xc>)
   1dacc:	601a      	str	r2, [r3, #0]
   1dace:	e7fe      	b.n	1dace <SysCtlReset+0x6>
   1dad0:	e000ed0c 	.word	0xe000ed0c
   1dad4:	05fa0004 	.word	0x05fa0004

0001dad8 <SysCtlSleep>:
   1dad8:	f000 b8c6 	b.w	1dc68 <CPUwfi>

0001dadc <SysCtlDeepSleep>:
   1dadc:	b510      	push	{r4, lr}
   1dade:	4c06      	ldr	r4, [pc, #24]	; (1daf8 <SysCtlDeepSleep+0x1c>)
   1dae0:	6823      	ldr	r3, [r4, #0]
   1dae2:	f043 0304 	orr.w	r3, r3, #4
   1dae6:	6023      	str	r3, [r4, #0]
   1dae8:	f000 f8be 	bl	1dc68 <CPUwfi>
   1daec:	6823      	ldr	r3, [r4, #0]
   1daee:	f023 0304 	bic.w	r3, r3, #4
   1daf2:	6023      	str	r3, [r4, #0]
   1daf4:	bd10      	pop	{r4, pc}
   1daf6:	bf00      	nop
   1daf8:	e000ed10 	.word	0xe000ed10

0001dafc <SysCtlResetCauseGet>:
   1dafc:	4b01      	ldr	r3, [pc, #4]	; (1db04 <SysCtlResetCauseGet+0x8>)
   1dafe:	6818      	ldr	r0, [r3, #0]
   1db00:	4770      	bx	lr
   1db02:	bf00      	nop
   1db04:	400fe05c 	.word	0x400fe05c

0001db08 <SysCtlResetCauseClear>:
   1db08:	4a02      	ldr	r2, [pc, #8]	; (1db14 <SysCtlResetCauseClear+0xc>)
   1db0a:	6813      	ldr	r3, [r2, #0]
   1db0c:	ea23 0000 	bic.w	r0, r3, r0
   1db10:	6010      	str	r0, [r2, #0]
   1db12:	4770      	bx	lr
   1db14:	400fe05c 	.word	0x400fe05c

0001db18 <SysCtlClockGet>:
   1db18:	4b48      	ldr	r3, [pc, #288]	; (1dc3c <SysCtlClockGet+0x124>)
   1db1a:	b570      	push	{r4, r5, r6, lr}
   1db1c:	3310      	adds	r3, #16
   1db1e:	f853 4c10 	ldr.w	r4, [r3, #-16]
   1db22:	681b      	ldr	r3, [r3, #0]
   1db24:	2b00      	cmp	r3, #0
   1db26:	da3c      	bge.n	1dba2 <SysCtlClockGet+0x8a>
   1db28:	f003 0270 	and.w	r2, r3, #112	; 0x70
   1db2c:	2a20      	cmp	r2, #32
   1db2e:	d051      	beq.n	1dbd4 <SysCtlClockGet+0xbc>
   1db30:	d805      	bhi.n	1db3e <SysCtlClockGet+0x26>
   1db32:	2a00      	cmp	r2, #0
   1db34:	d044      	beq.n	1dbc0 <SysCtlClockGet+0xa8>
   1db36:	2a10      	cmp	r2, #16
   1db38:	d139      	bne.n	1dbae <SysCtlClockGet+0x96>
   1db3a:	4841      	ldr	r0, [pc, #260]	; (1dc40 <SysCtlClockGet+0x128>)
   1db3c:	e005      	b.n	1db4a <SysCtlClockGet+0x32>
   1db3e:	2a30      	cmp	r2, #48	; 0x30
   1db40:	d076      	beq.n	1dc30 <SysCtlClockGet+0x118>
   1db42:	2a70      	cmp	r2, #112	; 0x70
   1db44:	d133      	bne.n	1dbae <SysCtlClockGet+0x96>
   1db46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1db4a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1db4e:	d125      	bne.n	1db9c <SysCtlClockGet+0x84>
   1db50:	4a3c      	ldr	r2, [pc, #240]	; (1dc44 <SysCtlClockGet+0x12c>)
   1db52:	6815      	ldr	r5, [r2, #0]
   1db54:	3204      	adds	r2, #4
   1db56:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
   1db5a:	6812      	ldr	r2, [r2, #0]
   1db5c:	f3c2 2604 	ubfx	r6, r2, #8, #5
   1db60:	f002 021f 	and.w	r2, r2, #31
   1db64:	3201      	adds	r2, #1
   1db66:	0052      	lsls	r2, r2, #1
   1db68:	fb06 2202 	mla	r2, r6, r2, r2
   1db6c:	fbb0 f0f2 	udiv	r0, r0, r2
   1db70:	f3c5 0209 	ubfx	r2, r5, #0, #10
   1db74:	f3c5 2589 	ubfx	r5, r5, #10, #10
   1db78:	4345      	muls	r5, r0
   1db7a:	0aad      	lsrs	r5, r5, #10
   1db7c:	fb00 5002 	mla	r0, r0, r2, r5
   1db80:	4a31      	ldr	r2, [pc, #196]	; (1dc48 <SysCtlClockGet+0x130>)
   1db82:	6812      	ldr	r2, [r2, #0]
   1db84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1db88:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   1db8c:	d043      	beq.n	1dc16 <SysCtlClockGet+0xfe>
   1db8e:	d825      	bhi.n	1dbdc <SysCtlClockGet+0xc4>
   1db90:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1db94:	d02a      	beq.n	1dbec <SysCtlClockGet+0xd4>
   1db96:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
   1db9a:	d03a      	beq.n	1dc12 <SysCtlClockGet+0xfa>
   1db9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dba0:	e025      	b.n	1dbee <SysCtlClockGet+0xd6>
   1dba2:	f004 0230 	and.w	r2, r4, #48	; 0x30
   1dba6:	2a10      	cmp	r2, #16
   1dba8:	d016      	beq.n	1dbd8 <SysCtlClockGet+0xc0>
   1dbaa:	d802      	bhi.n	1dbb2 <SysCtlClockGet+0x9a>
   1dbac:	b142      	cbz	r2, 1dbc0 <SysCtlClockGet+0xa8>
   1dbae:	2000      	movs	r0, #0
   1dbb0:	bd70      	pop	{r4, r5, r6, pc}
   1dbb2:	2a20      	cmp	r2, #32
   1dbb4:	d03f      	beq.n	1dc36 <SysCtlClockGet+0x11e>
   1dbb6:	2a30      	cmp	r2, #48	; 0x30
   1dbb8:	d1f9      	bne.n	1dbae <SysCtlClockGet+0x96>
   1dbba:	f247 5030 	movw	r0, #30000	; 0x7530
   1dbbe:	e006      	b.n	1dbce <SysCtlClockGet+0xb6>
   1dbc0:	f3c4 1184 	ubfx	r1, r4, #6, #5
   1dbc4:	4a21      	ldr	r2, [pc, #132]	; (1dc4c <SysCtlClockGet+0x134>)
   1dbc6:	2b00      	cmp	r3, #0
   1dbc8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1dbcc:	dbbd      	blt.n	1db4a <SysCtlClockGet+0x32>
   1dbce:	f414 6f00 	tst.w	r4, #2048	; 0x800
   1dbd2:	e7bc      	b.n	1db4e <SysCtlClockGet+0x36>
   1dbd4:	481e      	ldr	r0, [pc, #120]	; (1dc50 <SysCtlClockGet+0x138>)
   1dbd6:	e7b8      	b.n	1db4a <SysCtlClockGet+0x32>
   1dbd8:	4819      	ldr	r0, [pc, #100]	; (1dc40 <SysCtlClockGet+0x128>)
   1dbda:	e7f8      	b.n	1dbce <SysCtlClockGet+0xb6>
   1dbdc:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
   1dbe0:	d01b      	beq.n	1dc1a <SysCtlClockGet+0x102>
   1dbe2:	f5b2 4f10 	cmp.w	r2, #36864	; 0x9000
   1dbe6:	d1d9      	bne.n	1db9c <SysCtlClockGet+0x84>
   1dbe8:	4a1a      	ldr	r2, [pc, #104]	; (1dc54 <SysCtlClockGet+0x13c>)
   1dbea:	e000      	b.n	1dbee <SysCtlClockGet+0xd6>
   1dbec:	4a1a      	ldr	r2, [pc, #104]	; (1dc58 <SysCtlClockGet+0x140>)
   1dbee:	0265      	lsls	r5, r4, #9
   1dbf0:	d50b      	bpl.n	1dc0a <SysCtlClockGet+0xf2>
   1dbf2:	2b00      	cmp	r3, #0
   1dbf4:	da16      	bge.n	1dc24 <SysCtlClockGet+0x10c>
   1dbf6:	005c      	lsls	r4, r3, #1
   1dbf8:	d511      	bpl.n	1dc1e <SysCtlClockGet+0x106>
   1dbfa:	0519      	lsls	r1, r3, #20
   1dbfc:	d40f      	bmi.n	1dc1e <SysCtlClockGet+0x106>
   1dbfe:	0040      	lsls	r0, r0, #1
   1dc00:	f3c3 5386 	ubfx	r3, r3, #22, #7
   1dc04:	3301      	adds	r3, #1
   1dc06:	fbb0 f0f3 	udiv	r0, r0, r3
   1dc0a:	4290      	cmp	r0, r2
   1dc0c:	bf28      	it	cs
   1dc0e:	4610      	movcs	r0, r2
   1dc10:	bd70      	pop	{r4, r5, r6, pc}
   1dc12:	4a12      	ldr	r2, [pc, #72]	; (1dc5c <SysCtlClockGet+0x144>)
   1dc14:	e7eb      	b.n	1dbee <SysCtlClockGet+0xd6>
   1dc16:	4a12      	ldr	r2, [pc, #72]	; (1dc60 <SysCtlClockGet+0x148>)
   1dc18:	e7e9      	b.n	1dbee <SysCtlClockGet+0xd6>
   1dc1a:	4a12      	ldr	r2, [pc, #72]	; (1dc64 <SysCtlClockGet+0x14c>)
   1dc1c:	e7e7      	b.n	1dbee <SysCtlClockGet+0xd6>
   1dc1e:	f3c3 53c5 	ubfx	r3, r3, #23, #6
   1dc22:	e7ef      	b.n	1dc04 <SysCtlClockGet+0xec>
   1dc24:	f3c4 54c3 	ubfx	r4, r4, #23, #4
   1dc28:	3401      	adds	r4, #1
   1dc2a:	fbb0 f0f4 	udiv	r0, r0, r4
   1dc2e:	e7ec      	b.n	1dc0a <SysCtlClockGet+0xf2>
   1dc30:	f247 5030 	movw	r0, #30000	; 0x7530
   1dc34:	e789      	b.n	1db4a <SysCtlClockGet+0x32>
   1dc36:	4806      	ldr	r0, [pc, #24]	; (1dc50 <SysCtlClockGet+0x138>)
   1dc38:	e7c9      	b.n	1dbce <SysCtlClockGet+0xb6>
   1dc3a:	bf00      	nop
   1dc3c:	400fe060 	.word	0x400fe060
   1dc40:	00f42400 	.word	0x00f42400
   1dc44:	400fe160 	.word	0x400fe160
   1dc48:	400fe010 	.word	0x400fe010
   1dc4c:	00025af0 	.word	0x00025af0
   1dc50:	003d0900 	.word	0x003d0900
   1dc54:	01312d00 	.word	0x01312d00
   1dc58:	04c4b400 	.word	0x04c4b400
   1dc5c:	02faf080 	.word	0x02faf080
   1dc60:	02625a00 	.word	0x02625a00
   1dc64:	017d7840 	.word	0x017d7840

0001dc68 <CPUwfi>:
   1dc68:	bf30      	wfi
   1dc6a:	4770      	bx	lr

0001dc6c <__func__.7882>:
   1dc6c:	6367 665f 6572 0065                         gc_free.

0001dc74 <__func__.7899>:
   1dc74:	6367 725f 6165 6c6c 636f 0000 4556 4952     gc_realloc..VERI
   1dc84:	5946 505f 5254 7028 7274 0029 2e2e 2e2f     FY_PTR(ptr).../.
   1dc94:	2f2e 7970 672f 2e63 0063 0000 5441 5f42     ./py/gc.c...ATB_
   1dca4:	4547 5f54 494b 444e 6228 6f6c 6b63 2029     GET_KIND(block) 
   1dcb4:	3d3d 4120 5f54 4548 4441 0000 5441 5f42     == AT_HEAD..ATB_
   1dcc4:	4547 5f54 494b 444e 6228 296c 3d20 203d     GET_KIND(bl) == 
   1dcd4:	5441 465f 4552 0045 4347 203a 6f74 6174     AT_FREE.GC: tota
   1dce4:	3a6c 2520 2c75 7520 6573 3a64 2520 2c75     l: %u, used: %u,
   1dcf4:	6620 6572 3a65 2520 0a75 0000 4e20 2e6f      free: %u... No.
   1dd04:	6f20 2066 2d31 6c62 636f 736b 203a 7525      of 1-blocks: %u
   1dd14:	202c 2d32 6c62 636f 736b 203a 7525 202c     , 2-blocks: %u, 
   1dd24:	616d 2078 6c62 206b 7a73 203a 7525 202c     max blk sz: %u, 
   1dd34:	616d 2078 7266 6565 7320 3a7a 2520 0a75     max free sz: %u.
   1dd44:	0000 0000 4347 6d20 6d65 726f 2079 616c     ....GC memory la
   1dd54:	6f79 7475 203b 7266 6d6f 2520 3a70 0000     yout; from %p:..
   1dd64:	000a 0000 200a 2020 2020 2020 2528 2075     .....       (%u 
   1dd74:	696c 656e 2073 6c61 206c 7266 6565 0029     lines all free).
   1dd84:	250a 3530 3a78 0020 6325 0000 0000 0000     .%05x: .%c......
   1dd94:	0005 0000 07c4 5f5f 6461 5f64 005f 0000     ......__add__...
   1dda4:	082b 5f5f 6f62 6c6f 5f5f 0000 0f42 5f5f     +.__bool__..B.__
   1ddb4:	7562 6c69 5f64 6c63 7361 5f73 005f 0000     build_class__...
   1ddc4:	08a7 5f5f 6163 6c6c 5f5f 0000 092b 5f5f     ..__call__..+.__
   1ddd4:	6c63 7361 5f73 005f 0cc6 5f5f 6f63 746e     class__...__cont
   1dde4:	6961 736e 5f5f 0000 0bfd 5f5f 6564 696c     ains__....__deli
   1ddf4:	6574 5f6d 005f 0000 096d 5f5f 6e65 6574     tem__...m.__ente
   1de04:	5f72 005f 0671 5f5f 7165 5f5f 0000 0000     r__.q.__eq__....
   1de14:	0845 5f5f 7865 7469 5f5f 0000 06a7 5f5f     E.__exit__....__
   1de24:	6567 5f5f 0000 0000 0b40 5f5f 6567 6174     ge__....@.__geta
   1de34:	7474 5f72 005f 0000 0b26 5f5f 6567 6974     ttr__...&.__geti
   1de44:	6574 5f6d 005f 0000 06b6 5f5f 7467 5f5f     tem__.....__gt__
   1de54:	0000 0000 08f7 5f5f 6168 6873 5f5f 0000     ......__hash__..
   1de64:	086d 5f5f 6169 6464 5f5f 0000 0a38 5f5f     m.__iadd__..8.__
   1de74:	6d69 6f70 7472 5f5f 0000 0000 085f 5f5f     import__...._.__
   1de84:	6e69 7469 5f5f 0000 0716 5f5f 6e69 5f74     init__....__int_
   1de94:	005f 0000 0808 5f5f 7369 6275 5f5f 0000     _.....__isub__..
   1dea4:	08cf 5f5f 7469 7265 5f5f 0000 06cc 5f5f     ..__iter__....__
   1deb4:	656c 5f5f 0000 0000 07e2 5f5f 656c 5f6e     le__......__len_
   1dec4:	005f 0000 065d 5f5f 746c 5f5f 0000 0000     _...].__lt__....
   1ded4:	088e 5f5f 616d 6e69 5f5f 0000 0aff 5f5f     ..__main__....__
   1dee4:	6f6d 7564 656c 5f5f 0000 0000 08e2 5f5f     module__......__
   1def4:	616e 656d 5f5f 0000 0779 5f5f 656e 5f77     name__..y.__new_
   1df04:	005f 0000 0802 5f5f 656e 7478 5f5f 0000     _.....__next__..
   1df14:	08c8 5f5f 6170 6874 5f5f 0000 0c6b 5f5f     ..__path__..k.__
   1df24:	7571 6c61 616e 656d 5f5f 0000 0e01 5f5f     qualname__....__
   1df34:	6572 6c70 705f 6972 746e 5f5f 0000 0000     repl_print__....
   1df44:	0810 5f5f 6572 7270 5f5f 0000 0b32 5f5f     ..__repr__..2.__
   1df54:	6573 6974 6574 5f6d 005f 0000 07d0 5f5f     setitem__.....__
   1df64:	7473 5f72 005f 0000 0721 5f5f 7573 5f62     str__...!.__sub_
   1df74:	005f 0000 0d4f 5f5f 7274 6361 6265 6361     _...O.__tracebac
   1df84:	5f6b 005f 018f 002a 01fa 005f 018a 002f     k__...*..._.../.
   1df94:	036c 2325 006f 0000 037b 2325 0078 0000     l.%#o...{.%#x...
   1dfa4:	0558 3a7b 6223 007d 0185 0020 01af 000a     X.{:#b}... .....
   1dfb4:	2073 616d 6978 756d 206d 6572 7563 7372     s maximum recurs
   1dfc4:	6f69 206e 6564 7470 2068 7865 6563 6465     ion depth exceed
   1dfd4:	6465 0000 08bd 6d3c 646f 6c75 3e65 0000     ed....<module>..
   1dfe4:	0880 6c3c 6d61 6462 3e61 0000 0ad4 6c3c     ..<lambda>....<l
   1dff4:	7369 6374 6d6f 3e70 0000 0000 0acc 643c     istcomp>......<d
   1e004:	6369 6374 6d6f 3e70 0000 0000 0954 733c     ictcomp>....T.<s
   1e014:	7465 6f63 706d 003e 0934 673c 6e65 7865     etcomp>.4.<genex
   1e024:	7270 003e 0852 733c 7274 6e69 3e67 0000     pr>.R.<string>..
   1e034:	07e3 733c 6474 6e69 003e 0000 05b7 7475     ..<stdin>.....ut
   1e044:	2d66 0038 061a 662f 616c 6873 0000 0000     f-8.../flash....
   1e054:	0a92 662f 616c 6873 6c2f 6269 0000 0000     ../flash/lib....
   1e064:	0364 4150 0030 0000 0365 4150 0031 0000     d.PA0...e.PA1...
   1e074:	0366 4150 0032 0000 0367 4150 0033 0000     f.PA2...g.PA3...
   1e084:	0360 4150 0034 0000 0361 4150 0035 0000     `.PA4...a.PA5...
   1e094:	0362 4150 0036 0000 0363 4150 0037 0000     b.PA6...c.PA7...
   1e0a4:	0387 4250 0030 0000 0386 4250 0031 0000     ..PB0.....PB1...
   1e0b4:	0385 4250 0032 0000 0384 4250 0033 0000     ..PB2.....PB3...
   1e0c4:	0383 4250 0034 0000 0382 4250 0035 0000     ..PB4.....PB5...
   1e0d4:	0381 4250 0036 0000 0380 4250 0037 0000     ..PB6.....PB7...
   1e0e4:	03a6 4350 0030 0000 03a7 4350 0031 0000     ..PC0.....PC1...
   1e0f4:	03a4 4350 0032 0000 03a5 4350 0033 0000     ..PC2.....PC3...
   1e104:	03a2 4350 0034 0000 03a3 4350 0035 0000     ..PC4.....PC5...
   1e114:	03a0 4350 0036 0000 03a1 4350 0037 0000     ..PC6.....PC7...
   1e124:	03c1 4450 0030 0000 03c0 4450 0031 0000     ..PD0.....PD1...
   1e134:	03c3 4450 0032 0000 03c2 4450 0033 0000     ..PD2.....PD3...
   1e144:	03c5 4450 0034 0000 03c4 4450 0035 0000     ..PD4.....PD5...
   1e154:	03c7 4450 0036 0000 03c6 4450 0037 0000     ..PD6.....PD7...
   1e164:	03e0 4550 0030 0000 03e1 4550 0031 0000     ..PE0.....PE1...
   1e174:	03e2 4550 0032 0000 03e3 4550 0033 0000     ..PE2.....PE3...
   1e184:	03e4 4550 0034 0000 03e5 4550 0035 0000     ..PE4.....PE5...
   1e194:	0303 4650 0030 0000 0302 4650 0031 0000     ..PF0.....PF1...
   1e1a4:	0301 4650 0032 0000 0301 4650 0033 0000     ..PF2.....PF3...
   1e1b4:	0307 4650 0034 0000 088a 4441 5f43 4941     ..PF4.....ADC_AI
   1e1c4:	304e 0000 088b 4441 5f43 4941 314e 0000     N0....ADC_AIN1..
   1e1d4:	09db 4441 5f43 4941 314e 0030 09da 4441     ..ADC_AIN10...AD
   1e1e4:	5f43 4941 314e 0031 0888 4441 5f43 4941     C_AIN11...ADC_AI
   1e1f4:	324e 0000 0889 4441 5f43 4941 334e 0000     N2....ADC_AIN3..
   1e204:	088e 4441 5f43 4941 344e 0000 088f 4441     ..ADC_AIN4....AD
   1e214:	5f43 4941 354e 0000 088c 4441 5f43 4941     C_AIN5....ADC_AI
   1e224:	364e 0000 088d 4441 5f43 4941 374e 0000     N6....ADC_AIN7..
   1e234:	0882 4441 5f43 4941 384e 0000 0883 4441     ..ADC_AIN8....AD
   1e244:	5f43 4941 394e 0000 080e 3249 3043 535f     C_AIN9....I2C0_S
   1e254:	4c43 0000 08e4 3249 3043 535f 4144 0000     CL....I2C0_SDA..
   1e264:	088f 3249 3143 535f 4c43 0000 08a5 3249     ..I2C1_SCL....I2
   1e274:	3143 535f 4144 0000 080c 3249 3243 535f     C1_SDA....I2C2_S
   1e284:	4c43 0000 088d 3249 3343 535f 4c43 0000     CL....I2C3_SCL..
   1e294:	0e21 544a 4741 545f 4b43 535f 4357 4b4c     !.JTAG_TCK_SWCLK
   1e2a4:	0000 0000 089b 544a 4741 545f 4944 0000     ......JTAG_TDI..
   1e2b4:	0c49 544a 4741 545f 4f44 535f 4f57 0000     I.JTAG_TDO_SWO..
   1e2c4:	0e11 544a 4741 545f 534d 535f 4457 4f49     ..JTAG_TMS_SWDIO
   1e2d4:	0000 0000 0c97 544d 4c52 5f30 4146 4c55     ......MTRL0_FAUL
   1e2e4:	3054 0000 0a97 544d 4c52 5f30 5750 304d     T0....MTRL0_PWM0
   1e2f4:	0000 0000 0a96 544d 4c52 5f30 5750 314d     ......MTRL0_PWM1
   1e304:	0000 0000 0a95 544d 4c52 5f30 5750 324d     ......MTRL0_PWM2
   1e314:	0000 0000 0a94 544d 4c52 5f30 5750 334d     ......MTRL0_PWM3
   1e324:	0000 0000 0a93 544d 4c52 5f30 5750 344d     ......MTRL0_PWM4
   1e334:	0000 0000 0a92 544d 4c52 5f30 5750 354d     ......MTRL0_PWM5
   1e344:	0000 0000 0a91 544d 4c52 5f30 5750 364d     ......MTRL0_PWM6
   1e354:	0000 0000 0a90 544d 4c52 5f30 5750 374d     ......MTRL0_PWM7
   1e364:	0000 0000 0c76 544d 4c52 5f31 4146 4c55     ....v.MTRL1_FAUL
   1e374:	3054 0000 0a36 544d 4c52 5f31 5750 304d     T0..6.MTRL1_PWM0
   1e384:	0000 0000 0a37 544d 4c52 5f31 5750 314d     ....7.MTRL1_PWM1
   1e394:	0000 0000 0a34 544d 4c52 5f31 5750 324d     ....4.MTRL1_PWM2
   1e3a4:	0000 0000 0a35 544d 4c52 5f31 5750 334d     ....5.MTRL1_PWM3
   1e3b4:	0000 0000 0a32 544d 4c52 5f31 5750 344d     ....2.MTRL1_PWM4
   1e3c4:	0000 0000 0a33 544d 4c52 5f31 5750 354d     ....3.MTRL1_PWM5
   1e3d4:	0000 0000 0a30 544d 4c52 5f31 5750 364d     ....0.MTRL1_PWM6
   1e3e4:	0000 0000 0a31 544d 4c52 5f31 5750 374d     ....1.MTRL1_PWM7
   1e3f4:	0000 0000 038f 4d4e 0049 0000 0802 4551     ......NMI.....QE
   1e404:	5f49 4449 3058 0000 0803 4551 5f49 4449     I_IDX0....QEI_ID
   1e414:	3158 0000 093a 4954 304d 435f 5043 0030     X1..:.TIM0_CCP0.
   1e424:	093b 4954 304d 435f 5043 0031 099b 4954     ;.TIM0_CCP1...TI
   1e434:	314d 435f 5043 0030 099a 4954 314d 435f     M1_CCP0...TIM1_C
   1e444:	5043 0031 09f8 4954 324d 435f 5043 0030     CP1...TIM2_CCP0.
   1e454:	09f9 4954 324d 435f 5043 0031 0959 4954     ..TIM2_CCP1.Y.TI
   1e464:	334d 435f 5043 0030 0958 4954 334d 435f     M3_CCP0.X.TIM3_C
   1e474:	5043 0031 09be 4954 344d 435f 5043 0030     CP1...TIM4_CCP0.
   1e484:	09bf 4954 344d 435f 5043 0031 091f 4954     ..TIM4_CCP1...TI
   1e494:	354d 435f 5043 0030 091e 4954 354d 435f     M5_CCP0...TIM5_C
   1e4a4:	5043 0031 0508 5254 445f 0030 0509 5254     CP1...TR_D0...TR
   1e4b4:	445f 0031 099d 4155 5452 5f31 5443 0053     _D1...UART1_CTS.
   1e4c4:	094c 4155 5452 5f31 5452 0053 07a7 5355     L.UART1_RTS...US
   1e4d4:	3042 445f 004d 0000 07ba 5355 3042 445f     B0_DM.....USB0_D
   1e4e4:	0050 0000 09f0 5355 3042 455f 4550 004e     P.....USB0_EPEN.
   1e4f4:	07c3 5355 3042 495f 0044 0000 09a0 5355     ..USB0_ID.....US
   1e504:	3042 505f 4c46 0054 091c 5355 3042 565f     B0_PFLT...USB0_V
   1e514:	5542 0053 0aed 5457 4d49 5f30 4343 3050     BUS...WTIM0_CCP0
   1e524:	0000 0000 0aec 5457 4d49 5f30 4343 3150     ......WTIM0_CCP1
   1e534:	0000 0000 0a0c 5457 4d49 5f31 4343 3050     ......WTIM1_CCP0
   1e544:	0000 0000 0a0d 5457 4d49 5f31 4343 3150     ......WTIM1_CCP1
   1e554:	0000 0000 0a2f 5457 4d49 5f32 4343 3050     ..../.WTIM2_CCP0
   1e564:	0000 0000 0a2e 5457 4d49 5f32 4343 3150     ......WTIM2_CCP1
   1e574:	0000 0000 0a4e 5457 4d49 5f33 4343 3050     ....N.WTIM3_CCP0
   1e584:	0000 0000 0a4f 5457 4d49 5f33 4343 3150     ....O.WTIM3_CCP1
   1e594:	0000 0000 0a69 5457 4d49 5f34 4343 3050     ....i.WTIM4_CCP0
   1e5a4:	0000 0000 0a68 5457 4d49 5f34 4343 3150     ....h.WTIM4_CCP1
   1e5b4:	0000 0000 0a88 5457 4d49 5f35 4343 3050     ......WTIM5_CCP0
   1e5c4:	0000 0000 0a89 5457 4d49 5f35 4343 3150     ......WTIM5_CCP1
   1e5d4:	0000 0000 037c 4c41 0054 0000 0ef8 4c41     ....|.ALT.....AL
   1e5e4:	5f54 504f 4e45 445f 4152 4e49 0000 0000     T_OPEN_DRAIN....
   1e5f4:	06af 4e41 4c41 474f 0000 0000 0f2d 7241     ..ANALOG....-.Ar
   1e604:	7469 6d68 7465 6369 7245 6f72 0072 0000     ithmeticError...
   1e614:	0e97 7341 6573 7472 6f69 456e 7272 726f     ..AssertionError
   1e624:	0000 0000 0e21 7441 7274 6269 7475 4565     ....!.AttributeE
   1e634:	7272 726f 0000 0000 0d07 6142 6573 7845     rror......BaseEx
   1e644:	6563 7470 6f69 006e 0f14 4544 5045 4c53     ception...DEEPSL
   1e654:	4545 5f50 4552 4553 0054 0000 0891 4f45     EEP_RESET.....EO
   1e664:	4546 7272 726f 0000 08f0 6c45 696c 7370     FError....Ellips
   1e674:	7369 0000 09f2 7845 6563 7470 6f69 006e     is....Exception.
   1e684:	0d16 6547 656e 6172 6f74 4572 6978 0074     ..GeneratorExit.
   1e694:	0ab0 4148 4452 525f 5345 5445 0000 0000     ..HARD_RESET....
   1e6a4:	08a4 4948 505f 574f 5245 0000 0222 4e49     ..HI_POWER..".IN
   1e6b4:	0000 0000 08c1 5249 5f51 4f42 4854 0000     ......IRQ_BOTH..
   1e6c4:	0b37 5249 5f51 4146 4c4c 4e49 0047 0000     7.IRQ_FALLING...
   1e6d4:	083e 5249 5f51 4948 4847 0000 07e4 5249     >.IRQ_HIGH....IR
   1e6e4:	5f51 4f4c 0057 0000 0a78 5249 5f51 4952     Q_LOW...x.IRQ_RI
   1e6f4:	4953 474e 0000 0000 0b20 6d49 6f70 7472     SING.... .Import
   1e704:	7245 6f72 0072 0000 105c 6e49 6564 746e     Error...\.Indent
   1e714:	7461 6f69 456e 7272 726f 0000 0a83 6e49     ationError....In
   1e724:	6564 4578 7272 726f 0000 0000 08ea 654b     dexError......Ke
   1e734:	4579 7272 726f 0000 11af 654b 6279 616f     yError....Keyboa
   1e744:	6472 6e49 6574 7272 7075 0074 09b1 4f4c     rdInterrupt...LO
   1e754:	5f57 4f50 4557 0052 0bff 6f4c 6b6f 7075     W_POWER...Lookup
   1e764:	7245 6f72 0072 0000 0969 454d 5f44 4f50     Error...i.MED_PO
   1e774:	4557 0052 0bdc 654d 6f6d 7972 7245 6f72     WER...MemoryErro
   1e784:	0072 0000 09ba 614e 656d 7245 6f72 0072     r.....NameError.
   1e794:	0817 6f4e 656e 7954 6570 0000 13c6 6f4e     ..NoneType....No
   1e7a4:	4974 706d 656c 656d 746e 6465 7245 6f72     tImplementedErro
   1e7b4:	0072 0000 0a5e 504f 4e45 445f 4152 4e49     r...^.OPEN_DRAIN
   1e7c4:	0000 0000 07a1 534f 7245 6f72 0072 0000     ......OSError...
   1e7d4:	030b 554f 0054 0000 0d81 764f 7265 6c66     ..OUT.....Overfl
   1e7e4:	776f 7245 6f72 0072 09ad 5550 4c4c 445f     owError...PULL_D
   1e7f4:	574f 004e 0955 5550 4c4c 4e5f 4e4f 0045     OWN.U.PULL_NONE.
   1e804:	07ba 5550 4c4c 555f 0050 0000 0bdb 5750     ..PULL_UP.....PW
   1e814:	4f52 5f4e 4552 4553 0054 0000 0312 6950     RON_RESET.....Pi
   1e824:	006e 0000 0c61 7552 746e 6d69 4565 7272     n...a.RuntimeErr
   1e834:	726f 0000 0a01 4f53 5446 525f 5345 5445     or....SOFT_RESET
   1e844:	0000 0000 0dea 7453 706f 7449 7265 7461     ......StopIterat
   1e854:	6f69 006e 0b94 7953 746e 7861 7245 6f72     ion...SyntaxErro
   1e864:	0072 0000 0a20 7953 7473 6d65 7845 7469     r... .SystemExit
   1e874:	0000 0000 0925 7954 6570 7245 6f72 0072     ....%.TypeError.
   1e884:	0a96 6156 756c 4565 7272 726f 0000 0000     ..ValueError....
   1e894:	0908 4457 5f54 4552 4553 0054 11b6 655a     ..WDT_RESET...Ze
   1e8a4:	6f72 6944 6976 6973 6e6f 7245 6f72 0072     roDivisionError.
   1e8b4:	0395 6261 0073 0000 0222 6661 0000 0000     ..abs...".af....
   1e8c4:	075f 6661 6c5f 7369 0074 0000 0344 6c61     _.af_list...D.al
   1e8d4:	006c 0000 035c 6c61 0074 0000 0313 6e61     l...\.alt.....an
   1e8e4:	0079 0000 066b 7061 6570 646e 0000 0000     y...k.append....
   1e8f4:	04c2 7261 7367 0000 03e0 6962 006e 0000     ..args....bin...
   1e904:	057f 6f62 7261 0064 04eb 6f62 6c6f 0000     ..board...bool..
   1e914:	0ae2 6f62 746f 6f6c 6461 7265 0000 0000     ..bootloader....
   1e924:	0c97 6f62 6e75 5f64 656d 6874 646f 0000     ..bound_method..
   1e934:	08f7 7562 6c69 6974 736e 0000 0822 7962     ..builtins..".by
   1e944:	6574 6f63 6564 0000 055c 7962 6574 0073     tecode..\.bytes.
   1e954:	080d 6163 6c6c 6261 656c 0000 03dc 6863     ..callable....ch
   1e964:	0072 0000 0bb4 6c63 7361 6d73 7465 6f68     r.....classmetho
   1e974:	0064 0000 057c 6c63 6165 0072 0533 6c63     d...|.clear.3.cl
   1e984:	736f 0065 0774 6c63 736f 7275 0065 0000     ose.t.closure...
   1e994:	05c0 6f63 736e 0074 04e0 6f63 7970 0000     ..const...copy..
   1e9a4:	05a6 6f63 6e75 0074 03c3 7063 0075 0000     ..count...cpu...
   1e9b4:	05d4 6564 7562 0067 043f 6964 7463 0000     ..debug.?.dict..
   1e9c4:	092d 6964 7463 765f 6569 0077 03fa 6964     -.dict_view...di
   1e9d4:	0072 0000 06b8 6964 6d76 646f 0000 0000     r.....divmod....
   1e9e4:	0549 7264 7669 0065 030a 6e65 0064 0000     I.drive...end...
   1e9f4:	081b 6e65 7364 6977 6874 0000 049b 7665     ..endswith....ev
   1ea04:	6c61 0000 041e 7865 6365 0000 0663 7865     al....exec..c.ex
   1ea14:	6574 646e 0000 0000 0401 6966 646e 0000     tend......find..
   1ea24:	0626 6f66 6d72 7461 0000 0000 04e5 7266     &.format......fr
   1ea34:	7165 0000 0a35 7266 6d6f 625f 7479 7365     eq..5.from_bytes
   1ea44:	0000 0000 0837 7266 6d6f 656b 7379 0000     ....7.fromkeys..
   1ea54:	0827 7566 636e 6974 6e6f 0000 0996 6567     '.function....ge
   1ea64:	656e 6172 6f74 0072 0333 6567 0074 0000     nerator.3.get...
   1ea74:	07c0 6567 6174 7474 0072 0000 079d 6c67     ..getattr.....gl
   1ea84:	626f 6c61 0073 0000 0454 7067 6f69 0000     obals...T.gpio..
   1ea94:	078c 6168 6173 7474 0072 0000 04b7 6168     ..hasattr.....ha
   1eaa4:	6873 0000 09ad 6568 7061 6c5f 636f 006b     sh....heap_lock.
   1eab4:	0b56 6568 7061 755f 6c6e 636f 006b 0000     V.heap_unlock...
   1eac4:	0370 6568 0078 0000 042b 6968 6867 0000     p.hex...+.high..
   1ead4:	0228 6469 0000 0000 057b 6e69 6564 0078     (.id....{.index.
   1eae4:	04eb 6e69 6f66 0000 041f 6e69 7469 0000     ..info....init..
   1eaf4:	0612 6e69 6573 7472 0000 0000 0316 6e69     ..insert......in
   1eb04:	0074 0000 038f 7269 0071 0000 07eb 7369     t.....irq.....is
   1eb14:	6c61 6870 0061 0000 07a8 7369 6964 6967     alpha.....isdigi
   1eb24:	0074 0000 0ab6 7369 6e69 7473 6e61 6563     t.....isinstance
   1eb34:	0000 0000 07fc 7369 6f6c 6577 0072 0000     ......islower...
   1eb44:	075b 7369 7073 6361 0065 0000 0ab5 7369     [.isspace.....is
   1eb54:	7573 6362 616c 7373 0000 0000 07dd 7369     subclass......is
   1eb64:	7075 6570 0072 0000 05e3 7469 6d65 0073     upper.....items.
   1eb74:	048f 7469 7265 0000 0847 7469 7265 7461     ..iter..G.iterat
   1eb84:	726f 0000 04a7 6f6a 6e69 0000 0332 656b     or....join..2.ke
   1eb94:	0079 0000 0401 656b 7379 0000 0362 656c     y.....keys..b.le
   1eba4:	006e 0000 0427 696c 7473 0000 0689 696c     n...'.list....li
   1ebb4:	7474 656c 0000 0000 063b 6f6c 6163 736c     ttle....;.locals
   1ebc4:	0000 0000 0331 6f6c 0077 0000 05c6 6f6c     ....1.low.....lo
   1ebd4:	6577 0072 06e5 736c 7274 7069 0000 0000     wer...lstrip....
   1ebe4:	03b9 616d 0070 0000 065e 616d 7070 7265     ..map...^.mapper
   1ebf4:	0000 0000 0b0b 696d 7263 706f 7479 6f68     ......micropytho
   1ec04:	006e 0000 0426 6f6d 6564 0000 06bf 6f6d     n...&.mode....mo
   1ec14:	7564 656c 0000 0000 04a2 616e 656d 0000     dule......name..
   1ec24:	0591 616e 656d 0073 0442 656e 7478 0000     ..names.B.next..
   1ec34:	0690 626f 656a 7463 0000 0000 03fd 636f     ..object......oc
   1ec44:	0074 0000 038a 666f 0066 0000 0264 6e6f     t.....off...d.on
   1ec54:	0000 0000 0987 706f 5f74 656c 6576 006c     ......opt_level.
   1ec64:	031c 726f 0064 0000 0af3 6570 646e 745f     ..ord.....pend_t
   1ec74:	7268 776f 0000 0000 03f2 6970 006e 0000     hrow......pin...
   1ec84:	032a 6f70 0070 0000 07bf 6f70 6970 6574     *.pop.....popite
   1ec94:	006d 0000 045c 6f70 7472 0000 032d 6f70     m...\.port..-.po
   1eca4:	0077 0000 0554 7270 6e69 0074 0480 7570     w...T.print...pu
   1ecb4:	6c6c 0000 051a 6172 676e 0065 0663 6572     ll....range.c.re
   1ecc4:	6f6d 6576 0000 0000 0749 6572 6c70 6361     move....I.replac
   1ecd4:	0065 0000 04d0 6572 7270 0000 0510 6572     e.....repr....re
   1ece4:	6573 0074 0bce 6572 6573 5f74 6163 7375     set...reset_caus
   1ecf4:	0065 0000 0725 6572 6576 7372 0065 0000     e...%.reverse...
   1ed04:	05d2 6672 6e69 0064 06e9 6972 646e 7865     ..rfind...rindex
   1ed14:	0000 0000 05e7 6f72 6e75 0064 06a5 7372     ......round...rs
   1ed24:	6c70 7469 0000 0000 063b 7372 7274 7069     plit....;.rstrip
   1ed34:	0000 0000 04b9 6573 646e 0000 0323 6573     ......send..#.se
   1ed44:	0070 0000 07d4 6573 6174 7474 0072 0000     p.....setattr...
   1ed54:	0a6c 6573 6474 6665 7561 746c 0000 0000     l.setdefault....
   1ed64:	0ae1 6f73 7466 725f 7365 7465 0000 0000     ..soft_reset....
   1ed74:	04bf 6f73 7472 0000 065e 6f73 7472 6465     ..sort..^.sorted
   1ed84:	0000 0000 05b7 7073 696c 0074 0585 7473     ......split...st
   1ed94:	7261 0074 0a74 7473 7261 7374 6977 6874     art.t.startswith
   1eda4:	0000 0000 0c62 7473 7461 6369 656d 6874     ....b.staticmeth
   1edb4:	646f 0000 0457 7473 7065 0000 049d 7473     od..W.step....st
   1edc4:	706f 0000 0350 7473 0072 0000 0529 7473     op..P.str...).st
   1edd4:	6972 0070 032e 7573 006d 0000 05c4 7573     rip...sum.....su
   1ede4:	6570 0072 05b3 6874 6f72 0077 08d8 6f74     per...throw...to
   1edf4:	625f 7479 7365 0000 05fd 7574 6c70 0065     _bytes....tuple.
   1ee04:	049d 7974 6570 0000 0895 6d75 6361 6968     ..type....umachi
   1ee14:	656e 0000 0904 6e75 7169 6575 695f 0064     ne....unique_id.
   1ee24:	06b4 7075 6164 6574 0000 0000 0527 7075     ..update....'.up
   1ee34:	6570 0072 054e 6176 756c 0065 067d 6176     per.N.value.}.va
   1ee44:	756c 7365 0000 0000 03e6 697a 0070 0000     lues......zip...

0001ee54 <mp_qstr_const_pool>:
	...
   1ee5c:	000a 0000 0174 0000 dd90 0001 dd94 0001     ....t...........
   1ee6c:	dd98 0001 dda4 0001 ddb0 0001 ddc4 0001     ................
   1ee7c:	ddd0 0001 dddc 0001 ddec 0001 ddfc 0001     ................
   1ee8c:	de08 0001 de14 0001 de20 0001 de2c 0001     ........ ...,...
   1ee9c:	de3c 0001 de4c 0001 de58 0001 de64 0001     <...L...X...d...
   1eeac:	de70 0001 de80 0001 de8c 0001 de98 0001     p...............
   1eebc:	dea4 0001 deb0 0001 debc 0001 dec8 0001     ................
   1eecc:	ded4 0001 dee0 0001 def0 0001 defc 0001     ................
   1eedc:	df08 0001 df14 0001 df20 0001 df30 0001     ........ ...0...
   1eeec:	df44 0001 df50 0001 df60 0001 df6c 0001     D...P...`...l...
   1eefc:	df78 0001 df88 0001 df8c 0001 df90 0001     x...............
   1ef0c:	df94 0001 df9c 0001 dfa4 0001 dfac 0001     ................
   1ef1c:	dfb0 0001 dfb4 0001 dfd8 0001 dfe4 0001     ................
   1ef2c:	dff0 0001 e000 0001 e010 0001 e01c 0001     ................
   1ef3c:	e028 0001 e034 0001 e040 0001 e048 0001     (...4...@...H...
   1ef4c:	e054 0001 e064 0001 e06c 0001 e074 0001     T...d...l...t...
   1ef5c:	e07c 0001 e084 0001 e08c 0001 e094 0001     |...............
   1ef6c:	e09c 0001 e0a4 0001 e0ac 0001 e0b4 0001     ................
   1ef7c:	e0bc 0001 e0c4 0001 e0cc 0001 e0d4 0001     ................
   1ef8c:	e0dc 0001 e0e4 0001 e0ec 0001 e0f4 0001     ................
   1ef9c:	e0fc 0001 e104 0001 e10c 0001 e114 0001     ................
   1efac:	e11c 0001 e124 0001 e12c 0001 e134 0001     ....$...,...4...
   1efbc:	e13c 0001 e144 0001 e14c 0001 e154 0001     <...D...L...T...
   1efcc:	e15c 0001 e164 0001 e16c 0001 e174 0001     \...d...l...t...
   1efdc:	e17c 0001 e184 0001 e18c 0001 e194 0001     |...............
   1efec:	e19c 0001 e1a4 0001 e1ac 0001 e1b4 0001     ................
   1effc:	e1bc 0001 e1c8 0001 e1d4 0001 e1e0 0001     ................
   1f00c:	e1ec 0001 e1f8 0001 e204 0001 e210 0001     ................
   1f01c:	e21c 0001 e228 0001 e234 0001 e240 0001     ....(...4...@...
   1f02c:	e24c 0001 e258 0001 e264 0001 e270 0001     L...X...d...p...
   1f03c:	e27c 0001 e288 0001 e294 0001 e2a8 0001     |...............
   1f04c:	e2b4 0001 e2c4 0001 e2d8 0001 e2e8 0001     ................
   1f05c:	e2f8 0001 e308 0001 e318 0001 e328 0001     ............(...
   1f06c:	e338 0001 e348 0001 e358 0001 e368 0001     8...H...X...h...
   1f07c:	e378 0001 e388 0001 e398 0001 e3a8 0001     x...............
   1f08c:	e3b8 0001 e3c8 0001 e3d8 0001 e3e8 0001     ................
   1f09c:	e3f8 0001 e400 0001 e40c 0001 e418 0001     ................
   1f0ac:	e424 0001 e430 0001 e43c 0001 e448 0001     $...0...<...H...
   1f0bc:	e454 0001 e460 0001 e46c 0001 e478 0001     T...`...l...x...
   1f0cc:	e484 0001 e490 0001 e49c 0001 e4a8 0001     ................
   1f0dc:	e4b0 0001 e4b8 0001 e4c4 0001 e4d0 0001     ................
   1f0ec:	e4dc 0001 e4e8 0001 e4f4 0001 e500 0001     ................
   1f0fc:	e50c 0001 e518 0001 e528 0001 e538 0001     ........(...8...
   1f10c:	e548 0001 e558 0001 e568 0001 e578 0001     H...X...h...x...
   1f11c:	e588 0001 e598 0001 e5a8 0001 e5b8 0001     ................
   1f12c:	e5c8 0001 e5d8 0001 e5e0 0001 e5f4 0001     ................
   1f13c:	e600 0001 e614 0001 e628 0001 e63c 0001     ........(...<...
   1f14c:	e64c 0001 e660 0001 e66c 0001 e678 0001     L...`...l...x...
   1f15c:	e684 0001 e694 0001 e6a4 0001 e6b0 0001     ................
   1f16c:	e6b8 0001 e6c4 0001 e6d4 0001 e6e0 0001     ................
   1f17c:	e6ec 0001 e6fc 0001 e70c 0001 e720 0001     ............ ...
   1f18c:	e730 0001 e73c 0001 e750 0001 e75c 0001     0...<...P...\...
   1f19c:	e76c 0001 e778 0001 e788 0001 e794 0001     l...x...........
   1f1ac:	e7a0 0001 e7b8 0001 e7c8 0001 e7d4 0001     ................
   1f1bc:	e7dc 0001 e7ec 0001 e7f8 0001 e804 0001     ................
   1f1cc:	e810 0001 e820 0001 e828 0001 e838 0001     .... ...(...8...
   1f1dc:	e848 0001 e858 0001 e868 0001 e878 0001     H...X...h...x...
   1f1ec:	e884 0001 e894 0001 e8a0 0001 e8b4 0001     ................
   1f1fc:	e8bc 0001 e8c4 0001 e8d0 0001 e8d8 0001     ................
   1f20c:	e8e0 0001 e8e8 0001 e8f4 0001 e8fc 0001     ................
   1f21c:	e904 0001 e90c 0001 e914 0001 e924 0001     ............$...
   1f22c:	e934 0001 e940 0001 e94c 0001 e954 0001     4...@...L...T...
   1f23c:	e960 0001 e968 0001 e978 0001 e980 0001     `...h...x.......
   1f24c:	e988 0001 e994 0001 e99c 0001 e9a4 0001     ................
   1f25c:	e9ac 0001 e9b4 0001 e9bc 0001 e9c4 0001     ................
   1f26c:	e9d0 0001 e9d8 0001 e9e4 0001 e9ec 0001     ................
   1f27c:	e9f4 0001 ea00 0001 ea08 0001 ea10 0001     ................
   1f28c:	ea1c 0001 ea24 0001 ea30 0001 ea38 0001     ....$...0...8...
   1f29c:	ea48 0001 ea54 0001 ea60 0001 ea6c 0001     H...T...`...l...
   1f2ac:	ea74 0001 ea80 0001 ea8c 0001 ea94 0001     t...............
   1f2bc:	eaa0 0001 eaa8 0001 eab4 0001 eac4 0001     ................
   1f2cc:	eacc 0001 ead4 0001 eadc 0001 eae4 0001     ................
   1f2dc:	eaec 0001 eaf4 0001 eb00 0001 eb08 0001     ................
   1f2ec:	eb10 0001 eb1c 0001 eb28 0001 eb38 0001     ........(...8...
   1f2fc:	eb44 0001 eb50 0001 eb60 0001 eb6c 0001     D...P...`...l...
   1f30c:	eb74 0001 eb7c 0001 eb88 0001 eb90 0001     t...|...........
   1f31c:	eb98 0001 eba0 0001 eba8 0001 ebb0 0001     ................
   1f32c:	ebbc 0001 ebc8 0001 ebd0 0001 ebd8 0001     ................
   1f33c:	ebe4 0001 ebec 0001 ebf8 0001 ec08 0001     ................
   1f34c:	ec10 0001 ec1c 0001 ec24 0001 ec2c 0001     ........$...,...
   1f35c:	ec34 0001 ec40 0001 ec48 0001 ec50 0001     4...@...H...P...
   1f36c:	ec58 0001 ec64 0001 ec6c 0001 ec7c 0001     X...d...l...|...
   1f37c:	ec84 0001 ec8c 0001 ec98 0001 eca0 0001     ................
   1f38c:	eca8 0001 ecb0 0001 ecb8 0001 ecc0 0001     ................
   1f39c:	eccc 0001 ecd8 0001 ece0 0001 ece8 0001     ................
   1f3ac:	ecf8 0001 ed04 0001 ed0c 0001 ed18 0001     ................
   1f3bc:	ed20 0001 ed2c 0001 ed38 0001 ed40 0001      ...,...8...@...
   1f3cc:	ed48 0001 ed54 0001 ed64 0001 ed74 0001     H...T...d...t...
   1f3dc:	ed7c 0001 ed88 0001 ed90 0001 ed98 0001     |...............
   1f3ec:	eda8 0001 edb8 0001 edc0 0001 edc8 0001     ................
   1f3fc:	edd0 0001 edd8 0001 ede0 0001 ede8 0001     ................
   1f40c:	edf0 0001 edfc 0001 ee04 0001 ee0c 0001     ................
   1f41c:	ee18 0001 ee24 0001 ee30 0001 ee38 0001     ....$...0...8...
   1f42c:	ee40 0001 ee4c 0001 656c 206e 203c 3128     @...L...len < (1
   1f43c:	3c20 203c 3828 2a20 4d20 4349 4f52 5950      << (8 * MICROPY
   1f44c:	515f 5453 5f52 5942 4554 5f53 4e49 4c5f     _QSTR_BYTES_IN_L
   1f45c:	4e45 2929 0000 0000 2e2e 2e2f 2f2e 7970     EN))....../../py
   1f46c:	712f 7473 2e72 0063                         /qstr.c.

0001f474 <__func__.7559>:
   1f474:	7371 7274 665f 6f72 5f6d 7473 6e72 0000     qstr_from_strn..

0001f484 <pad_spaces>:
   1f484:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1f494:	0000 0000                                   ....

0001f498 <pad_zeroes>:
   1f498:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   1f4a8:	0000 0000                                   ....

0001f4ac <mp_plat_print>:
   1f4ac:	0000 0000 18a9 0000 6162 6573 3d20 203d     ........base == 
   1f4bc:	2032 7c7c 6220 7361 2065 3d3d 3820 7c20     2 || base == 8 |
   1f4cc:	207c 6162 6573 3d20 203d 3031 7c20 207c     | base == 10 || 
   1f4dc:	6162 6573 3d20 203d 3631 0000 2e2e 2e2f     base == 16..../.
   1f4ec:	2f2e 7970 6d2f 7070 6972 746e 632e 0000     ./py/mpprint.c..
   1f4fc:	0000 0000 7274 6575 0000 0000 6166 736c     ....true....fals
   1f50c:	0065 0000 6e28 6c75 296c 0000 662a 746d     e...(null)..*fmt
   1f51c:	3d20 203d 2527 2027 7c7c 2120 7522 736e      == '%' || !"uns
   1f52c:	7075 6f70 7472 6465 6620 746d 6320 6168     upported fmt cha
   1f53c:	2272 0000                                   r"..

0001f540 <__func__.8605>:
   1f540:	706d 705f 6972 746e 6d5f 5f70 6e69 0074     mp_print_mp_int.

0001f550 <__func__.8670>:
   1f550:	706d 765f 7270 6e69 6674 0000               mp_vprintf..

0001f55c <attr>:
	...
   1f564:	0300 0303 0303 0000 0000 0000 0000 0000     ................
	...
   1f57c:	0103 0101 0101 0101 0101 0101 0101 0101     ................
   1f58c:	4545 4545 4545 4545 4545 0101 0101 0101     EEEEEEEEEE......
   1f59c:	5901 5959 5959 1959 1919 1919 1919 1919     .YYYYYY.........
   1f5ac:	1919 1919 1919 1919 1919 0119 0101 0101     ................
   1f5bc:	6901 6969 6969 2969 2929 2929 2929 2929     .iiiiii)))))))))
   1f5cc:	2929 2929 2929 2929 2929 0129 0101 0001     ))))))))))).....
   1f5dc:	2928 5d5b 7d7b 3a2c 403b 3c7e 3d65 3c63     ()[]{},:;@~<e=c<
   1f5ec:	3d65 653e 633d 653e 2a3d 3d65 2a63 3d65     e=>e=c>e=*e=c*e=
   1f5fc:	652b 2d3d 3d65 3e65 6526 7c3d 3d65 652f     +e=-e=e>&e=|e=/e
   1f60c:	633d 652f 253d 3d65 655e 3d3d 3d65 2e21     =c/e=%e=^e==e=!.
   1f61c:	0000 0000                                   ....

0001f620 <tok_enc>:
   1f620:	f5dc 0001                                   ....

0001f624 <tok_enc_kind>:
   1f624:	4342 4544 4746 4948 4c4b 363d 373e 3858     BCDEFGHIKL=6>7X8
   1f634:	393f 3157 3250 2f59 304e 5a4f 543a 553b     ?9W1P2Y/N0OZ:T;U
   1f644:	5133 5234 5335 563c 404d 0000 6146 736c     3Q4R5S<VM@..Fals
   1f654:	0065 0000 6f4e 656e 0000 0000 7254 6575     e...None....True
   1f664:	0000 0000 5f5f 6564 7562 5f67 005f 0000     ....__debug__...
   1f674:	6e61 0064 7361 0000 7361 6573 7472 0000     and.as..assert..
   1f684:	7262 6165 006b 0000 6c63 7361 0073 0000     break...class...
   1f694:	6f63 746e 6e69 6575 0000 0000 6564 0066     continue....def.
   1f6a4:	6564 006c 6c65 6669 0000 0000 6c65 6573     del.elif....else
   1f6b4:	0000 0000 7865 6563 7470 0000 6966 616e     ....except..fina
   1f6c4:	6c6c 0079 6f66 0072 7266 6d6f 0000 0000     lly.for.from....
   1f6d4:	6c67 626f 6c61 0000 6669 0000 6d69 6f70     global..if..impo
   1f6e4:	7472 0000 6e69 0000 7369 0000 616c 626d     rt..in..is..lamb
   1f6f4:	6164 0000 6f6e 6c6e 636f 6c61 0000 0000     da..nonlocal....
   1f704:	6f6e 0074 726f 0000 6170 7373 0000 0000     not.or..pass....
   1f714:	6172 7369 0065 0000 6572 7574 6e72 0000     raise...return..
   1f724:	7274 0079 6877 6c69 0065 0000 6977 6874     try.while...with
   1f734:	0000 0000 6979 6c65 0064 0000               ....yield...

0001f740 <tok_kw>:
   1f740:	f650 0001 f658 0001 f660 0001 f668 0001     P...X...`...h...
   1f750:	f674 0001 f678 0001 f67c 0001 f684 0001     t...x...|.......
   1f760:	f68c 0001 f694 0001 f6a0 0001 f6a4 0001     ................
   1f770:	f6a8 0001 f6b0 0001 f6b8 0001 f6c0 0001     ................
   1f780:	f6c8 0001 f6cc 0001 f6d4 0001 f6dc 0001     ................
   1f790:	f6e0 0001 f6e8 0001 f6ec 0001 f6f0 0001     ................
   1f7a0:	f6f8 0001 f704 0001 f708 0001 f70c 0001     ................
   1f7b0:	f714 0001 f71c 0001 f724 0001 f728 0001     ........$...(...
   1f7c0:	f730 0001 f738 0001 6e75 6369 646f 2065     0...8...unicode 
   1f7d0:	616e 656d 6520 6373 7061 7365 0000 0000     name escapes....

0001f7e0 <rule_act_table>:
   1f7e0:	3261 a862 2233 2233 2121 2221 2221 2422     a2b.3"3"!!!"!""$
   1f7f0:	2222 2623 2725 2424 6232 a4a4 3131 3122     ""#&%'$$2b..11"1
   1f800:	3122 3131 3131 6231 6262 2323 2323 2223     "111111bbb#####"
   1f810:	3333 a523 0022 1213 2162 3224 6212 1333     33#."...b!$2.b3.
   1f820:	2263 6223 2262 1333 2262 6222 1261 1862     c"#bb"3.b""ba.b.
   1f830:	6212 6232 1212 151c 6262 1212 1362 3263     .b2b....bb..b.c2
   1f840:	2212 6262 3133 3131 1862 2432 6312 6224     ."bb3111b.2$.c$b
   1f850:	2332 3163 6262 6412 2412 1212 2219 2122     2#c1bb.d.$...""!
   1f860:	1212 1214 1113 6232 121c 1262 6212 1333     ......2b..b..b3.
   1f870:	1233 1262 3322 3363 2213 6222 6212 a512     3.b."3c3.""b.b..
   1f880:	1223 0022                                   #.".

0001f884 <rule_arg_combined_table>:
   1f884:	3001 2037 203b 203c 1017 1007 1042 303e     .07 ; < ....B.>0
   1f894:	1043 303d 1049 2076 204f 104b 2006 3050     C.=0I.v O K.. P0
   1f8a4:	2055 1048 1018 2090 1028 1014 1016 102a     U H.... (.....*.
   1f8b4:	3031 2034 1029 3058 1021 2065 101e 205b     104 ).X0!.e ..[ 
   1f8c4:	1021 205d 101f 2067 1025 2067 1013 2078     !.] ..g %.g ..x 
   1f8d4:	3068 1020 2078 1049 2076 306a 3072 102c     h0 .x I.v j0r0,.
   1f8e4:	2078 1049 2076 3072 101d 2090 1022 2031     x I.v r0... ".1 
   1f8f4:	1049 2076 3072 102b 1049 2076 206c 102d     I.v r0+.I.v l -.
   1f904:	2073 1049 2076 204d 201c 3079 1024 3046     s I.v M . y0$.F0
   1f914:	1049 2078 1024 3046 1049 207a 201d 1027     I.x $.F0I.z . '.
   1f924:	207b 1011 1026 207b 2021 207c 1031 2021     { ..&.{ ! | 1.! 
   1f934:	2022 103b 2023 103c 2024 103a 2025 2080     " ;.# <.$ :.% . 
   1f944:	2026 2081 2083 2082 2084 2083 2085 3087     & . . . . . . .0
   1f954:	2088 3086 1042 3089 1043 1044 308a 1045     . .0B..0C.D..0E.
   1f964:	1046 3092 1047 1042 3097 1043 1044 2030     F..0G.B..0C.D.0 
   1f974:	1045 104a 1007 2078 1048 2078 1048 2078     E.J...x H.x H.x 
   1f984:	1049 2078 1015 1007 3096 1049 2076 102e     I.x .....0I.v ..
   1f994:	30a1 1004 204e 2069 1004 204d 2031 3039     .0..N i ..M 1 90
   1f9a4:	1004 104c 2066 302d 1004 203a 2033 2003     ..L.f -0..: 3 . 
   1f9b4:	105a 2078 203f 1048 2040 2041 2042 1007     Z.x ? H.@ A B ..
   1f9c4:	3043 3044 1031 3045 1032 1007 3043 1049     C0D01.E02...C0I.
   1f9d4:	2078 104d 2078 1007 3043 2047 1048 2048     x M.x ..C0G H.H 
   1f9e4:	2049 204a 1007 304b 1031 304c 1032 1007     I J ..K01.L02...
   1f9f4:	104d 2078 1007 2069 204e 2004 1004 2007     M.x ..i N . ... 
   1fa04:	2008 2057 205a 2010 2011 2012 2005 2051     . W Z . . . . Q 
   1fa14:	2052 2056 2054 2053 104d 2054 2034 2006     R V T S M.T 4 . 
   1fa24:	2020 2078 104e 104f 1050 1051 1053 1054       x N.O.P.Q.S.T.
   1fa34:	1055 1056 1058 1057 1059 1052 2009 200a     U.V.X.W.Y.R.. . 
   1fa44:	200b 200d 200c 2078 3059 101e 2078 200e     . . . x Y0..x . 
   1fa54:	200f 2066 205c 205f 3066 1031 205e 2064     . f \ _ f01.^ d 
   1fa64:	1042 2064 1043 2060 104a 100c 1007 3063     B.d C.` J.....c0
   1fa74:	2066 3063 1012 1007 2061 1048 2062 1048     f c0....a H.b H.
   1fa84:	1007 104a 1007 1048 1048 2078 2013 2014     ..J...H.H.x . . 
   1fa94:	2015 2016 2017 2003 2033 2002 206b 1019     . . . . 3 . k ..
   1faa4:	2078 1049 2076 206d 2071 2070 3072 3071     x I.v m q p r0q0
   1fab4:	101b 306f 1049 2076 2078 3063 206e 101c     ..o0I.v x c0n ..
   1fac4:	1049 2076 101a 1049 2076 2074 1048 2078     I.v ..I.v t H.x 
   1fad4:	3075 1012 2021 2077 204e 1004 1005 2018     u0..! w N ..... 
   1fae4:	1006 201a 2019 1020 201c 101a 2078 201b     ... .  .. ..x . 
   1faf4:	201c 201e 201f 1036 1038 1040 103e 103f     . . . 6.8.@.>.?.
   1fb04:	1041 1022 207d 207e 1026 1022 1023 307f     A.".} ~ &.".#..0
   1fb14:	1026 1037 1039 102f 1030 1031 1033 1035     &.7.9./.0.1.3.5.
   1fb24:	1034 2027 2028 102f 1030 103d 2029 208f     4.' ( /.0.=.) . 
   1fb34:	1032 2083 1007 1008 1009 100a 100b 100c     2.. ............
   1fb44:	100e 100f 100d 202a 202b 202c 2034 208a     ......* + , 4 . 
   1fb54:	208b 308c 2020 2078 209f 208d 1048 308e     . .0  x . . H..0
   1fb64:	208b 1048 202d 202e 202f 2091 1048 2020     . H.- . / . H.  
   1fb74:	2021 2032 3093 209f 2094 1048 3095 2032     ! 2 .0. . H..02 
   1fb84:	1048 1042 3097 1043 2098 1048 2099 209a     H.B..0C.. H.. . 
   1fb94:	209b 1031 2078 1032 2078 2078 309c 209f     . 1.x 2.x x .0. 
   1fba4:	209d 104d 2078 209f 20a0 101d 2090 1022     . M.x . . ... ".
   1fbb4:	201c 309e 1020 207a 309e 20a2 2031 101e     . .0 .z .0. 1 ..
   1fbc4:	2078 0000                                   x ..

0001fbc8 <rule_arg_offset_table>:
   1fbc8:	0100 0402 0e0c 1210 1514 1716 1a19 1e1c     ................
   1fbd8:	2422 2926 342f 3f3b 4443 4a46 504e 5452     "$&)/4;?CDFJNPRT
   1fbe8:	5856 5c5a 605e 6462 6866 6d6a 7370 7976     VXZ\^`bdfhjmpsvy
   1fbf8:	7d7b 827f 0087 8c89 908e 9591 9896 9c9a     {}..............
   1fc08:	a29f a7a4 aba9 afad b4b2 b8b6 bbba bfbd     ................
   1fc18:	c9c7 cccb d0ce ded2 e5e3 e9e7 edeb f3f0     ................
   1fc28:	f6f4 faf8 fefc 0200 0604 0f0e 1513 1c18     ................
   1fc38:	1f1e 2522 2927 2d2b 3331 3937 443b 4846     .."%')+-1379;DFH
   1fc48:	4b49 514d 5653 5857 665a 6a68 6e6c 7270     IKMQSVWXZfhjlnpr
   1fc58:	7775 7b79 7f7d 8481 8986 8d8b 918f 9593     uwy{}...........
   1fc68:	9d9a 009f                                   ....

0001fc6c <FIRST_RULE_WITH_OFFSET_ABOVE_255>:
   1fc6c:	0066 0000 6128 6772 2620 5220 4c55 5f45     f...(arg & RULE_
   1fc7c:	5241 5f47 494b 444e 4d5f 5341 294b 3d20     ARG_KIND_MASK) =
   1fc8c:	203d 5552 454c 415f 4752 525f 4c55 2045     = RULE_ARG_RULE 
   1fc9c:	7c7c 2820 7261 2067 2026 5552 454c 415f     || (arg & RULE_A
   1fcac:	4752 4b5f 4e49 5f44 414d 4b53 2029 3d3d     RG_KIND_MASK) ==
   1fcbc:	5220 4c55 5f45 5241 5f47 504f 5f54 5552      RULE_ARG_OPT_RU
   1fccc:	454c 0000 2e2e 2e2f 2f2e 7970 702f 7261     LE..../../py/par
   1fcdc:	6573 632e 0000 0000 6170 7372 7265 3e2d     se.c....parser->
   1fcec:	6572 7573 746c 735f 6174 6b63 745f 706f     result_stack_top
   1fcfc:	3e20 3020 0000 0000 6170 7372 7265 3e2d      > 0....parser->
   1fd0c:	6572 7573 746c 735f 6174 6b63 745f 706f     result_stack_top
   1fd1c:	3e20 7020 736f 0000 6f74 206b 3d3d 4d20      > pos..tok == M
   1fd2c:	5f50 4f54 454b 5f4e 504f 545f 4c49 4544     P_TOKEN_OP_TILDE
   1fd3c:	0000 0000 696b 646e 3d20 203d 5552 454c     ....kind == RULE
   1fd4c:	415f 4752 525f 4c55 0045 0000 2069 203e     _ARG_RULE...i > 
   1fd5c:	0030 0000 2069 3d3d 6e20 0000 7228 6c75     0...i == n..(rul
   1fd6c:	5f65 6361 2074 2026 5552 454c 415f 5443     e_act & RULE_ACT
   1fd7c:	4b5f 4e49 5f44 414d 4b53 2029 3d3d 5220     _KIND_MASK) == R
   1fd8c:	4c55 5f45 4341 5f54 494c 5453 0000 0000     ULE_ACT_LIST....
   1fd9c:	6128 6772 2620 5220 4c55 5f45 5241 5f47     (arg & RULE_ARG_
   1fdac:	494b 444e 4d5f 5341 294b 3d20 203d 5552     KIND_MASK) == RU
   1fdbc:	454c 415f 4752 525f 4c55 0045 2069 3d3e     LE_ARG_RULE.i >=
   1fdcc:	3120 0000 6e75 7865 6570 7463 6465 6920      1..unexpected i
   1fddc:	646e 6e65 0074 0000 6e75 6e69 6564 746e     ndent...unindent
   1fdec:	6420 656f 6e73 7427 6d20 7461 6863 6120      doesn't match a
   1fdfc:	796e 6f20 7475 7265 6920 646e 6e65 2074     ny outer indent 
   1fe0c:	656c 6576 006c 0000 6e69 6176 696c 2064     level...invalid 
   1fe1c:	7973 746e 7861 0000 6170 7372 7265 722e     syntax..parser.r
   1fe2c:	7365 6c75 5f74 7473 6361 5f6b 6f74 2070     esult_stack_top 
   1fe3c:	3d3d 3120 0000 0000                         == 1....

0001fe44 <__func__.9099>:
   1fe44:	7570 6873 725f 6c75 5f65 7266 6d6f 615f     push_rule_from_a
   1fe54:	6772 0000                                   rg..

0001fe58 <__func__.9127>:
   1fe58:	6f70 5f70 6572 7573 746c 0000               pop_result..

0001fe64 <__func__.9132>:
   1fe64:	6570 6b65 725f 7365 6c75 0074               peek_result.

0001fe70 <token_to_op.9198>:
   1fe70:	1b1a ff1c 1dff ff1f ff18 0019               ............

0001fe7c <__func__.9207>:
   1fe7c:	6f66 646c 635f 6e6f 7473 6e61 7374 0000     fold_constants..

0001fe8c <__func__.9245>:
   1fe8c:	706d 705f 7261 6573 0000 0000               mp_parse....

0001fe98 <scope_simple_name_table>:
   1fe98:	0030 3231 3433 0035 504d 505f 5241 4553     0.12345.MP_PARSE
   1fea8:	4e5f 444f 5f45 5349 535f 5254 4355 2854     _NODE_IS_STRUCT(
   1feb8:	6e70 0029 2e2e 2e2f 2f2e 7970 732f 6f63     pn).../../py/sco
   1fec8:	6570 632e 0000 0000 6373 706f 2d65 703e     pe.c....scope->p
   1fed8:	7261 6e65 2074 3d21 4e20 4c55 004c 0000     arent != NULL...
   1fee8:	2d73 703e 7261 6e65 2074 3d21 4e20 4c55     s->parent != NUL
   1fef8:	004c 0000 6469 3e2d 696b 646e 3d20 203d     L...id->kind == 
   1ff08:	4449 495f 464e 5f4f 494b 444e 465f 4552     ID_INFO_KIND_FRE
   1ff18:	2045 7c7c 6920 2d64 6b3e 6e69 2064 3d3d     E || id->kind ==
   1ff28:	4920 5f44 4e49 4f46 4b5f 4e49 5f44 4543      ID_INFO_KIND_CE
   1ff38:	4c4c 0000                                   LL..

0001ff3c <__func__.6885>:
   1ff3c:	6373 706f 5f65 656e 0077 0000               scope_new...

0001ff48 <__func__.6914>:
   1ff48:	6373 706f 5f65 6c63 736f 5f65 766f 7265     scope_close_over
   1ff58:	695f 5f6e 6170 6572 746e 0073 6f63 706d     _in_parents.comp
   1ff68:	3e2d 7563 5f72 7865 6563 7470 6c5f 7665     ->cur_except_lev
   1ff78:	6c65 3e20 3020 0000 2e2e 2e2f 2f2e 7970     el > 0..../../py
   1ff88:	632f 6d6f 6970 656c 632e 0000 504d 505f     /compile.c..MP_P
   1ff98:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   1ffa8:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   1ffb8:	6564 5b73 5d30 202c 4e50 745f 7365 6c74     des[0], PN_testl
   1ffc8:	7369 5f74 6f63 706d 0029 0000 504d 505f     ist_comp)...MP_P
   1ffd8:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   1ffe8:	4355 2854 6e70 3173 3e2d 6f6e 6564 5b73     UCT(pns1->nodes[
   1fff8:	206e 202d 5d31 0029 504d 505f 5241 4553     n - 1]).MP_PARSE
   20008:	4e5f 444f 5f45 5349 495f 2844 6e70 3173     _NODE_IS_ID(pns1
   20018:	3e2d 6f6e 6564 5b73 5d30 0029 6163 276e     ->nodes[0]).can'
   20028:	2074 7361 6973 6e67 7420 206f 7865 7270     t assign to expr
   20038:	7365 6973 6e6f 0000 756d 746c 7069 656c     ession..multiple
   20048:	2a20 2078 6e69 6120 7373 6769 6d6e 6e65      *x in assignmen
   20058:	0074 0000 4d21 5f50 4150 5352 5f45 4f4e     t...!MP_PARSE_NO
   20068:	4544 495f 5f53 554e 4c4c 7028 296e 0000     DE_IS_NULL(pn)..
   20078:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20088:	4e5f 4c55 284c 6e70 3273 3e2d 6f6e 6564     _NULL(pns2->node
   20098:	5b73 5d30 0029 0000 5f6e 6f70 5f73 6564     s[0])...n_pos_de
   200a8:	6166 6c75 7374 3e20 203d 0030 5f6e 776b     faults >= 0.n_kw
   200b8:	645f 6665 7561 746c 2073 3d3e 3020 0000     _defaults >= 0..
   200c8:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   200d8:	535f 5254 4355 2854 6e70 0029 6e70 6b5f     _STRUCT(pn).pn_k
   200e8:	6e69 2064 3d3d 5020 5f4e 6176 6172 6772     ind == PN_vararg
   200f8:	6c73 7369 5f74 616e 656d 0000 6f6e 2d6e     slist_name..non-
   20108:	6564 6166 6c75 2074 7261 7567 656d 746e     default argument
   20118:	6620 6c6f 6f6c 7377 6420 6665 7561 746c      follows default
   20128:	6120 6772 6d75 6e65 0074 0000 6e69 6176      argument...inva
   20138:	696c 2064 696d 7263 706f 7479 6f68 206e     lid micropython 
   20148:	6564 6f63 6172 6f74 0072 0000 504d 505f     decorator...MP_P
   20158:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20168:	4355 5f54 494b 444e 6e28 646f 7365 695b     UCT_KIND(nodes[i
   20178:	2c5d 5020 5f4e 6564 6f63 6172 6f74 2972     ], PN_decorator)
   20188:	0000 0000 504d 505f 5241 4553 4e5f 444f     ....MP_PARSE_NOD
   20198:	5f45 5349 495f 2844 616e 656d 6e5f 646f     E_IS_ID(name_nod
   201a8:	7365 6a5b 295d 0000 504d 505f 5241 4553     es[j])..MP_PARSE
   201b8:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   201c8:	2844 6e70 5f73 6f62 7964 2029 3d3d 5020     D(pns_body) == P
   201d8:	5f4e 6c63 7361 6473 6665 0000 504d 505f     N_classdef..MP_P
   201e8:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   201f8:	4355 5f54 494b 444e 7028 2c6e 5020 5f4e     UCT_KIND(pn, PN_
   20208:	6574 7473 696c 7473 635f 6d6f 2970 0000     testlist_comp)..
   20218:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20228:	4e5f 4c55 284c 6e70 3173 3e2d 6f6e 6564     _NULL(pns1->node
   20238:	5b73 5d30 0029 0000 6163 276e 2074 6564     s[0])...can't de
   20248:	656c 6574 6520 7078 6572 7373 6f69 006e     lete expression.
   20258:	6227 6572 6b61 2027 756f 7374 6469 2065     'break' outside 
   20268:	6f6c 706f 0000 0000 6327 6e6f 6974 756e     loop....'continu
   20278:	2765 6f20 7475 6973 6564 6c20 6f6f 0070     e' outside loop.
   20288:	6f63 706d 3e2d 7563 5f72 7865 6563 7470     comp->cur_except
   20298:	6c5f 7665 6c65 3e20 203d 6f63 706d 3e2d     _level >= comp->
   202a8:	7262 6165 5f6b 6f63 746e 6e69 6575 655f     break_continue_e
   202b8:	6378 7065 5f74 656c 6576 006c 7227 7465     xcept_level.'ret
   202c8:	7275 276e 6f20 7475 6973 6564 6620 6e75     urn' outside fun
   202d8:	7463 6f69 006e 0000 504d 505f 5241 4553     ction...MP_PARSE
   202e8:	4e5f 444f 5f45 5349 535f 5254 4355 5f54     _NODE_IS_STRUCT_
   202f8:	494b 444e 7028 2c6e 5020 5f4e 6f64 7474     KIND(pn, PN_dott
   20308:	6465 6e5f 6d61 2965 0000 0000 4d21 5f50     ed_name)....!MP_
   20318:	4150 5352 5f45 4f4e 4544 495f 5f53 554e     PARSE_NODE_IS_NU
   20328:	4c4c 7028 5f6e 6d69 6f70 7472 735f 756f     LL(pn_import_sou
   20338:	6372 2965 0000 0000 504d 505f 5241 4553     rce)....MP_PARSE
   20348:	4e5f 444f 5f45 5349 535f 5254 4355 5f54     _NODE_IS_STRUCT_
   20358:	494b 444e 7028 5f6e 6f6e 6564 5b73 5d69     KIND(pn_nodes[i]
   20368:	202c 4e50 695f 706d 726f 5f74 7361 6e5f     , PN_import_as_n
   20378:	6d61 2965 0000 0000 6469 6e65 6974 6966     ame)....identifi
   20388:	7265 7220 6465 6665 6e69 6465 6120 2073     er redefined as 
   20398:	6c67 626f 6c61 0000 6f6e 6220 6e69 6964     global..no bindi
   203a8:	676e 6620 726f 6e20 6e6f 6f6c 6163 206c     ng for nonlocal 
   203b8:	6f66 6e75 0064 0000 6469 6e65 6974 6966     found...identifi
   203c8:	7265 7220 6465 6665 6e69 6465 6120 2073     er redefined as 
   203d8:	6f6e 6c6e 636f 6c61 0000 0000 6163 276e     nonlocal....can'
   203e8:	2074 6564 6c63 7261 2065 6f6e 6c6e 636f     t declare nonloc
   203f8:	6c61 6920 206e 756f 6574 2072 6f63 6564     al in outer code
   20408:	0000 0000 504d 505f 5241 4553 4e5f 444f     ....MP_PARSE_NOD
   20418:	5f45 5349 535f 5254 4355 5f54 494b 444e     E_IS_STRUCT_KIND
   20428:	7028 5f6e 6c65 6669 695b 2c5d 5020 5f4e     (pn_elif[i], PN_
   20438:	6669 735f 6d74 5f74 6c65 6669 0029 0000     if_stmt_elif)...
   20448:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20458:	535f 414d 4c4c 495f 544e 7028 5f6e 7473     _SMALL_INT(pn_st
   20468:	7065 0029 504d 505f 5241 4553 4e5f 444f     ep).MP_PARSE_NOD
   20478:	5f45 5349 535f 5254 4355 5f54 494b 444e     E_IS_STRUCT_KIND
   20488:	7028 5f6e 7865 6563 7470 5b73 5d69 202c     (pn_excepts[i], 
   20498:	4e50 745f 7972 735f 6d74 5f74 7865 6563     PN_try_stmt_exce
   204a8:	7470 0029 6564 6166 6c75 2074 6527 6378     pt).default 'exc
   204b8:	7065 2774 6d20 7375 2074 6562 6c20 7361     ept' must be las
   204c8:	0074 0000 504d 505f 5241 4553 4e5f 444f     t...MP_PARSE_NOD
   204d8:	5f45 5349 4e5f 4c55 284c 6e70 655f 736c     E_IS_NULL(pn_els
   204e8:	2965 0000 504d 505f 5241 4553 4e5f 444f     e)..MP_PARSE_NOD
   204f8:	5f45 5349 535f 5254 4355 2854 6e70 2d73     E_IS_STRUCT(pns-
   20508:	6e3e 646f 7365 315b 295d 0000 206e 203e     >nodes[1])..n > 
   20518:	0030 0000 504d 505f 5241 4553 4e5f 444f     0...MP_PARSE_NOD
   20528:	5f45 5349 545f 4b4f 4e45 7028 736e 2d31     E_IS_TOKEN(pns1-
   20538:	6e3e 646f 7365 305b 295d 0000 504d 505f     >nodes[0])..MP_P
   20548:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20558:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   20568:	6564 5b73 5d31 202c 4e50 745f 7365 5f74     des[1], PN_test_
   20578:	6669 655f 736c 2965 0000 0000 504d 505f     if_else)....MP_P
   20588:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20598:	4355 2854 6e70 2d73 6e3e 646f 7365 695b     UCT(pns->nodes[i
   205a8:	295d 0000 696b 646e 3d20 203d 4e50 635f     ])..kind == PN_c
   205b8:	6d6f 5f70 706f 695f 0073 0000 782a 6d20     omp_op_is...*x m
   205c8:	7375 2074 6562 6120 7373 6769 6d6e 6e65     ust be assignmen
   205d8:	2074 6174 6772 7465 0000 0000 6f74 206b     t target....tok 
   205e8:	3d3d 4d20 5f50 4f54 454b 5f4e 504f 445f     == MP_TOKEN_OP_D
   205f8:	4c42 4d5f 524f 0045 6f74 206b 3d3d 4d20     BL_MORE.tok == M
   20608:	5f50 4f54 454b 5f4e 504f 545f 4c49 4544     P_TOKEN_OP_TILDE
   20618:	0000 0000 7573 6570 2872 2029 6163 276e     ....super() can'
   20628:	2074 6966 646e 7320 6c65 0066 6163 276e     t find self.can'
   20638:	2074 6168 6576 6d20 6c75 6974 6c70 2065     t have multiple 
   20648:	782a 0000 6163 276e 2074 6168 6576 6d20     *x..can't have m
   20658:	6c75 6974 6c70 2065 2a2a 0078 484c 2053     ultiple **x.LHS 
   20668:	666f 6b20 7965 6f77 6472 6120 6772 6d20     of keyword arg m
   20678:	7375 2074 6562 6120 206e 6469 0000 0000     ust be an id....
   20688:	6f6e 2d6e 656b 7779 726f 2064 7261 2067     non-keyword arg 
   20698:	6661 6574 2072 2f2a 2a2a 0000 6f6e 2d6e     after */**..non-
   206a8:	656b 7779 726f 2064 7261 2067 6661 6574     keyword arg afte
   206b8:	2072 656b 7779 726f 2064 7261 0067 0000     r keyword arg...
   206c8:	504d 505f 5241 4553 4e5f 444f 5f45 5453     MP_PARSE_NODE_ST
   206d8:	5552 5443 4e5f 4d55 4e5f 444f 5345 7028     RUCT_NUM_NODES(p
   206e8:	736e 2029 3d3d 3220 0000 0000 504d 505f     ns) == 2....MP_P
   206f8:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20708:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   20718:	6564 5b73 5d31 202c 4e50 635f 6d6f 5f70     des[1], PN_comp_
   20728:	6f66 2972 0000 0000 4d21 5f50 4150 5352     for)....!MP_PARS
   20738:	5f45 4f4e 4544 495f 5f53 554e 4c4c 7028     E_NODE_IS_NULL(p
   20748:	736e 3e2d 6f6e 6564 5b73 5d31 0029 0000     ns->nodes[1])...
   20758:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20768:	4e5f 4c55 284c 6e70 3373 3e2d 6f6e 6564     _NULL(pns3->node
   20778:	5b73 5d30 0029 0000 6e69 6176 696c 2064     s[0])...invalid 
   20788:	7973 746e 7861 0000 504d 505f 5241 4553     syntax..MP_PARSE
   20798:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   207a8:	2844 6e70 3173 2029 3d3d 5020 5f4e 6f63     D(pns1) == PN_co
   207b8:	706d 665f 726f 0000 0030 0000 7927 6569     mp_for..0...'yie
   207c8:	646c 2027 756f 7374 6469 2065 7566 636e     ld' outside func
   207d8:	6974 6e6f 0000 0000                         tion....

000207e0 <compile_function>:
   207e0:	4f69 0000 4f69 0000 5ced 0000 5ea5 0000     iO..iO...\...^..
   207f0:	4f69 0000 7669 0000 50ef 0000 615d 0000     iO..iv...P..]a..
   20800:	4f69 0000 6181 0000 6181 0000 6211 0000     iO...a...a...b..
   20810:	6269 0000 6291 0000 654b 0000 6571 0000     ib...b..Ke..qe..
   20820:	68a5 0000 68a5 0000 6959 0000 69d9 0000     .h...h..Yi...i..
   20830:	6b91 0000 6e7d 0000 7439 0000 75e1 0000     .k..}n..9t...u..
   20840:	4f69 0000 78c1 0000 797d 0000 797d 0000     iO...x..}y..}y..
   20850:	79c3 0000 79c3 0000 7a3f 0000 7a69 0000     .y...y..?z..iz..
   20860:	7c91 0000 7cb5 0000 7cb5 0000 7cb5 0000     .|...|...|...|..
   20870:	7d17 0000 7d17 0000 7d17 0000 7e05 0000     .}...}...}...~..
   20880:	807d 0000 7e75 0000 8399 0000 84a5 0000     }...u~..........
   20890:	85e9 0000 87b5 0000 87d5 0000 87ff 0000     ................
   208a0:	50ef 0000 50ef 0000 8823 0000 884d 0000     .P...P..#...M...
   208b0:	8879 0000 893d 0000 504d 505f 5241 4553     y...=...MP_PARSE
   208c0:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   208d0:	2844 6e70 2973 3c20 203d 4e50 635f 6e6f     D(pns) <= PN_con
   208e0:	7473 6f5f 6a62 6365 0074 0000 504d 505f     st_object...MP_P
   208f0:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20900:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   20910:	6564 5b73 5d30 202c 4e50 745f 7066 6564     des[0], PN_tfpde
   20920:	2966 0000 504d 505f 5241 4553 4e5f 444f     f)..MP_PARSE_NOD
   20930:	5f45 5453 5552 5443 4b5f 4e49 2844 6e70     E_STRUCT_KIND(pn
   20940:	2973 3d20 203d 6e70 645f 6c62 735f 6174     s) == pn_dbl_sta
   20950:	0072 0000 7261 7567 656d 746e 6e20 6d61     r...argument nam
   20960:	2065 6572 7375 6465 0000 0000 504d 505f     e reused....MP_P
   20970:	5241 4553 4e5f 444f 5f45 5453 5552 5443     ARSE_NODE_STRUCT
   20980:	4b5f 4e49 2844 6d28 5f70 6170 7372 5f65     _KIND((mp_parse_
   20990:	6f6e 6564 735f 7274 6375 5f74 2a74 7029     node_struct_t*)p
   209a0:	5f6e 7469 7265 2029 3d3d 5020 5f4e 6f63     n_iter) == PN_co
   209b0:	706d 665f 726f 0000 6373 706f 2d65 6b3e     mp_for..scope->k
   209c0:	6e69 2064 3d3d 5320 4f43 4550 4d5f 444f     ind == SCOPE_MOD
   209d0:	4c55 0045 504d 505f 5241 4553 4e5f 444f     ULE.MP_PARSE_NOD
   209e0:	5f45 5349 535f 5254 4355 2854 6373 706f     E_IS_STRUCT(scop
   209f0:	2d65 703e 296e 0000 504d 505f 5241 4553     e->pn)..MP_PARSE
   20a00:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   20a10:	2844 6e70 2973 3d20 203d 4e50 665f 6e75     D(pns) == PN_fun
   20a20:	6463 6665 0000 0000 504d 505f 5241 4553     cdef....MP_PARSE
   20a30:	4e5f 444f 5f45 5453 5552 5443 4e5f 4d55     _NODE_STRUCT_NUM
   20a40:	4e5f 444f 5345 7028 736e 2029 3d3d 3320     _NODES(pns) == 3
   20a50:	0000 0000 6373 706f 2d65 6b3e 6e69 2064     ....scope->kind 
   20a60:	3d3d 5320 4f43 4550 435f 414c 5353 0000     == SCOPE_CLASS..
   20a70:	504d 505f 5241 4553 4e5f 444f 5f45 5453     MP_PARSE_NODE_ST
   20a80:	5552 5443 4b5f 4e49 2844 6e70 2973 3d20     RUCT_KIND(pns) =
   20a90:	203d 4e50 635f 616c 7373 6564 0066 0000     = PN_classdef...
   20aa0:	6469 2120 203d 554e 4c4c 0000 6f63 706d     id != NULL..comp
   20ab0:	3e2d 7563 5f72 7865 6563 7470 6c5f 7665     ->cur_except_lev
   20ac0:	6c65 3d20 203d 0030 2821 6469 2d32 663e     el == 0.!(id2->f
   20ad0:	616c 7367 2620 4920 5f44 4c46 4741 495f     lags & ID_FLAG_I
   20ae0:	5f53 4150 4152 294d 0000 0000               S_PARAM)....

00020aec <__func__.8746>:
   20aec:	6f63 706d 6c69 5f65 6564 7263 6165 6573     compile_decrease
   20afc:	655f 6378 7065 5f74 656c 6576 006c 0000     _except_level...

00020b0c <__func__.8828>:
   20b0c:	5f63 6669 635f 6e6f 0064 0000               c_if_cond...

00020b18 <__func__.8849>:
   20b18:	5f63 7361 6973 6e67 615f 6f74 5f6d 7865     c_assign_atom_ex
   20b28:	7270 0000                                   pr..

00020b2c <__func__.8871>:
   20b2c:	5f63 7361 6973 6e67 0000 0000               c_assign....

00020b38 <__func__.8897>:
   20b38:	6c63 736f 5f65 766f 7265 765f 7261 6169     close_over_varia
   20b48:	6c62 7365 655f 6374 0000 0000               bles_etc....

00020b54 <__func__.8914>:
   20b54:	6f63 706d 6c69 5f65 7566 636e 6564 5f66     compile_funcdef_
   20b64:	616c 626d 6564 5f66 6170 6172 006d 0000     lambdef_param...

00020b74 <__func__.8959>:
   20b74:	6f63 706d 6c69 5f65 6564 6f63 6172 6574     compile_decorate
   20b84:	0064 0000                                   d...

00020b88 <__func__.8992>:
   20b88:	5f63 6564 5f6c 7473 746d 0000               c_del_stmt..

00020b94 <__func__.9012>:
   20b94:	6f63 706d 6c69 5f65 7262 6165 5f6b 6f63     compile_break_co
   20ba4:	746e 735f 6d74 0074                         nt_stmt.

00020bac <__func__.9036>:
   20bac:	6f64 695f 706d 726f 5f74 616e 656d 0000     do_import_name..

00020bbc <__func__.9074>:
   20bbc:	6f63 706d 6c69 5f65 6d69 6f70 7472 665f     compile_import_f
   20bcc:	6f72 006d                                   rom.

00020bd0 <__func__.9136>:
   20bd0:	6f63 706d 6c69 5f65 6669 735f 6d74 0074     compile_if_stmt.

00020be0 <__func__.9169>:
   20be0:	6f63 706d 6c69 5f65 6f66 5f72 7473 746d     compile_for_stmt
   20bf0:	6f5f 7470 6d69 7369 6465 725f 6e61 6567     _optimised_range
   20c00:	0000 0000                                   ....

00020c04 <__func__.9202>:
   20c04:	6f63 706d 6c69 5f65 7274 5f79 7865 6563     compile_try_exce
   20c14:	7470 0000                                   pt..

00020c18 <__func__.9221>:
   20c18:	6f63 706d 6c69 5f65 7274 5f79 6966 616e     compile_try_fina
   20c28:	6c6c 0079                                   lly.

00020c2c <__func__.9226>:
   20c2c:	6f63 706d 6c69 5f65 7274 5f79 7473 746d     compile_try_stmt
   20c3c:	0000 0000                                   ....

00020c40 <__func__.9246>:
   20c40:	6f63 706d 6c69 5f65 6977 6874 735f 6d74     compile_with_stm
   20c50:	0074 0000                                   t...

00020c54 <__func__.9256>:
   20c54:	6f63 706d 6c69 5f65 7865 7270 735f 6d74     compile_expr_stm
   20c64:	0074 0000                                   t...

00020c68 <__func__.9282>:
   20c68:	6f63 706d 6c69 5f65 6574 7473 695f 5f66     compile_test_if_
   20c78:	7865 7270 0000 0000                         expr....

00020c80 <__func__.9325>:
   20c80:	6f63 706d 6c69 5f65 6f63 706d 7261 7369     compile_comparis
   20c90:	6e6f 0000                                   on..

00020c94 <__func__.9363>:
   20c94:	6f63 706d 6c69 5f65 6574 6d72 0000 0000     compile_term....

00020ca4 <__func__.9377>:
   20ca4:	6f63 706d 6c69 5f65 6166 7463 726f 325f     compile_factor_2
   20cb4:	0000 0000                                   ....

00020cb8 <__func__.9426>:
   20cb8:	6f63 706d 6c69 5f65 6f63 706d 6572 6568     compile_comprehe
   20cc8:	736e 6f69 006e 0000                         nsion...

00020cd0 <__func__.9434>:
   20cd0:	6f63 706d 6c69 5f65 7461 6d6f 705f 7261     compile_atom_par
   20ce0:	6e65 0000                                   en..

00020ce4 <__func__.9443>:
   20ce4:	6f63 706d 6c69 5f65 7461 6d6f 625f 6172     compile_atom_bra
   20cf4:	6b63 7465 0000 0000                         cket....

00020cfc <__func__.9450>:
   20cfc:	6f63 706d 6c69 5f65 7461 6d6f 625f 6172     compile_atom_bra
   20d0c:	6563 0000                                   ce..

00020d10 <__func__.9513>:
   20d10:	6f63 706d 6c69 5f65 6f6e 6564 0000 0000     compile_node....

00020d20 <__func__.9525>:
   20d20:	6f63 706d 6c69 5f65 6373 706f 5f65 7566     compile_scope_fu
   20d30:	636e 6c5f 6d61 6462 5f61 6170 6172 006d     nc_lambda_param.

00020d40 <__func__.9546>:
   20d40:	6f63 706d 6c69 5f65 6373 706f 5f65 6f63     compile_scope_co
   20d50:	706d 695f 6574 0072                         mp_iter.

00020d58 <__func__.9557>:
   20d58:	6f63 706d 6c69 5f65 6373 706f 0065 0000     compile_scope...

00020d68 <__func__.9592>:
   20d68:	6373 706f 5f65 6f63 706d 7475 5f65 6874     scope_compute_th
   20d78:	6e69 7367 0000 0000 6469 2120 203d 554e     ings....id != NU
   20d88:	4c4c 0000 2e2e 2e2f 2f2e 7970 652f 696d     LL..../../py/emi
   20d98:	6374 6d6f 6f6d 2e6e 0063 0000 6469 3e2d     tcommon.c...id->
   20da8:	696b 646e 3d20 203d 4449 495f 464e 5f4f     kind == ID_INFO_
   20db8:	494b 444e 435f 4c45 204c 7c7c 6920 2d64     KIND_CELL || id-
   20dc8:	6b3e 6e69 2064 3d3d 4920 5f44 4e49 4f46     >kind == ID_INFO
   20dd8:	4b5f 4e49 5f44 5246 4545 0000               _KIND_FREE..

00020de4 <__func__.7484>:
   20de4:	706d 655f 696d 5f74 6f63 6d6d 6e6f 695f     mp_emit_common_i
   20df4:	5f64 706f 0000 0000 6d65 7469 3e2d 6f63     d_op....emit->co
   20e04:	6564 695f 666e 5f6f 666f 7366 7465 2b20     de_info_offset +
   20e14:	6e20 6d75 625f 7479 7365 745f 5f6f 7277      num_bytes_to_wr
   20e24:	7469 2065 3d3c 6520 696d 2d74 633e 646f     ite <= emit->cod
   20e34:	5f65 6e69 6f66 735f 7a69 0065 2e2e 2e2f     e_info_size.../.
   20e44:	2f2e 7970 652f 696d 6274 2e63 0063 0000     ./py/emitbc.c...
   20e54:	7128 7473 3e20 203e 3631 2029 3d3d 3020     (qst >> 16) == 0
   20e64:	0000 0000 6d65 7469 3e2d 7962 6574 6f63     ....emit->byteco
   20e74:	6564 6f5f 6666 6573 2074 202b 756e 5f6d     de_offset + num_
   20e84:	7962 6574 5f73 6f74 775f 6972 6574 3c20     bytes_to_write <
   20e94:	203d 6d65 7469 3e2d 7962 6574 6f63 6564     = emit->bytecode
   20ea4:	735f 7a69 0065 0000 6469 3e2d 6f6c 6163     _size...id->loca
   20eb4:	5f6c 756e 206d 203c 3532 0035 6d65 7469     l_num < 255.emit
   20ec4:	3e2d 7473 6361 5f6b 6973 657a 3d20 203d     ->stack_size == 
   20ed4:	0030 0000 6d65 7469 3e2d 6170 7373 3c20     0...emit->pass <
   20ee4:	203d 504d 505f 5341 5f53 5453 4341 5f4b     = MP_PASS_STACK_
   20ef4:	4953 455a 7c20 207c 6528 696d 2d74 633e     SIZE || (emit->c
   20f04:	5f74 756e 5f6d 626f 206a 3d3d 6520 696d     t_num_obj == emi
   20f14:	2d74 633e 5f74 7563 5f72 626f 296a 0000     t->ct_cur_obj)..
   20f24:	6d28 5f70 6e69 5f74 2974 6d65 7469 3e2d     (mp_int_t)emit->
   20f34:	7473 6361 5f6b 6973 657a 2b20 6420 6c65     stack_size + del
   20f44:	6174 3e20 203d 0030 206c 203c 6d65 7469     ta >= 0.l < emit
   20f54:	3e2d 616d 5f78 756e 5f6d 616c 6562 736c     ->max_num_labels
   20f64:	0000 0000 6d65 7469 3e2d 616c 6562 5f6c     ....emit->label_
   20f74:	666f 7366 7465 5b73 5d6c 3d20 203d 6d28     offsets[l] == (m
   20f84:	5f70 6975 746e 745f 2d29 0031 6d65 7469     p_uint_t)-1.emit
   20f94:	3e2d 616c 6562 5f6c 666f 7366 7465 5b73     ->label_offsets[
   20fa4:	5d6c 3d20 203d 6d65 7469 3e2d 7962 6574     l] == emit->byte
   20fb4:	6f63 6564 6f5f 6666 6573 0074 6f74 206b     code_offset.tok 
   20fc4:	3d3d 4d20 5f50 4f54 454b 5f4e 4c45 494c     == MP_TOKEN_ELLI
   20fd4:	5350 5349 0000 0000 5f6e 6c63 736f 6465     PSIS....n_closed
   20fe4:	6f5f 6576 2072 3d3c 3220 3535 0000 0000     _over <= 255....
   20ff4:	5f6e 7261 7367 3c20 203d 0032               n_args <= 2.

00021000 <mp_emit_bc_method_table_load_id_ops>:
   21000:	a39d 0000 a3eb 0000                         ........

00021008 <mp_emit_bc_method_table_store_id_ops>:
   21008:	a519 0000 a569 0000                         ....i...

00021010 <mp_emit_bc_method_table_delete_id_ops>:
   21010:	a599 0000 a5c1 0000                         ........

00021018 <__func__.8278>:
   21018:	6d65 7469 675f 7465 635f 7275 745f 5f6f     emit_get_cur_to_
   21028:	7277 7469 5f65 6f63 6564 695f 666e 006f     write_code_info.

00021038 <__func__.8292>:
   21038:	6d65 7469 775f 6972 6574 635f 646f 5f65     emit_write_code_
   21048:	6e69 6f66 715f 7473 0072 0000               info_qstr...

00021054 <__func__.8298>:
   21054:	6d65 7469 675f 7465 635f 7275 745f 5f6f     emit_get_cur_to_
   21064:	7277 7469 5f65 7962 6574 6f63 6564 0000     write_bytecode..

00021074 <__func__.8340>:
   21074:	6d65 7469 775f 6972 6574 625f 7479 6365     emit_write_bytec
   21084:	646f 5f65 7962 6574 715f 7473 0072 0000     ode_byte_qstr...

00021094 <__func__.8374>:
   21094:	706d 655f 696d 5f74 6362 735f 6174 7472     mp_emit_bc_start
   210a4:	705f 7361 0073 0000                         _pass...

000210ac <__func__.8391>:
   210ac:	706d 655f 696d 5f74 6362 655f 646e 705f     mp_emit_bc_end_p
   210bc:	7361 0073                                   ass.

000210c0 <__func__.8399>:
   210c0:	706d 655f 696d 5f74 6362 615f 6a64 7375     mp_emit_bc_adjus
   210d0:	5f74 7473 6361 5f6b 6973 657a 0000 0000     t_stack_size....

000210e0 <__func__.8412>:
   210e0:	706d 655f 696d 5f74 6362 6c5f 6261 6c65     mp_emit_bc_label
   210f0:	615f 7373 6769 006e                         _assign.

000210f8 <__func__.8427>:
   210f8:	706d 655f 696d 5f74 6362 6c5f 616f 5f64     mp_emit_bc_load_
   21108:	6f63 736e 5f74 6f74 006b 0000               const_tok...

00021114 <__func__.8606>:
   21114:	706d 655f 696d 5f74 6362 6d5f 6b61 5f65     mp_emit_bc_make_
   21124:	6c63 736f 7275 0065                         closure.

0002112c <__func__.8634>:
   2112c:	706d 655f 696d 5f74 6362 725f 6961 6573     mp_emit_bc_raise
   2113c:	765f 7261 7261 7367 0000 0000 6e69 2874     _varargs....int(
   2114c:	2029 7261 2067 2032 756d 7473 6220 2065     ) arg 2 must be 
   2115c:	3d3e 3220 6120 646e 3c20 203d 3633 0000     >= 2 and <= 36..
   2116c:	6e69 6176 696c 2064 7973 746e 7861 6620     invalid syntax f
   2117c:	726f 6920 746e 6765 7265 0000 6564 6963     or integer..deci
   2118c:	616d 206c 756e 626d 7265 2073 6f6e 2074     mal numbers not 
   2119c:	7573 7070 726f 6574 0064 0000 6372 2120     supported...rc !
   211ac:	203d 554e 4c4c 0000 2e2e 2e2f 2f2e 7970     = NULL..../../py
   211bc:	652f 696d 6774 756c 2e65 0063 6564 5f66     /emitglue.c.def_
   211cc:	7261 7367 3d20 203d 504d 4f5f 4a42 4e5f     args == MP_OBJ_N
   211dc:	4c55 204c 7c7c 4d20 5f50 424f 5f4a 5349     ULL || MP_OBJ_IS
   211ec:	545f 5059 2845 6564 5f66 7261 7367 202c     _TYPE(def_args, 
   211fc:	6d26 5f70 7974 6570 745f 7075 656c 0029     &mp_type_tuple).
   2120c:	6564 5f66 776b 615f 6772 2073 3d3d 4d20     def_kw_args == M
   2121c:	5f50 424f 5f4a 554e 4c4c 7c20 207c 504d     P_OBJ_NULL || MP
   2122c:	4f5f 4a42 495f 5f53 5954 4550 6428 6665     _OBJ_IS_TYPE(def
   2123c:	6b5f 5f77 7261 7367 202c 6d26 5f70 7974     _kw_args, &mp_ty
   2124c:	6570 645f 6369 2974 0000 0000 6372 3e2d     pe_dict)....rc->
   2125c:	696b 646e 3d20 203d 504d 435f 444f 5f45     kind == MP_CODE_
   2126c:	5942 4554 4f43 4544 0000 0000               BYTECODE....

00021278 <__func__.7845>:
   21278:	706d 6d5f 6b61 5f65 7566 636e 6974 6e6f     mp_make_function
   21288:	665f 6f72 5f6d 6172 5f77 6f63 6564 0000     _from_raw_code..

00021298 <mp_module___main__>:
   21298:	2fe4 0002 1328 2000 616e 656d 6e20 746f     ./..(.. name not
   212a8:	6420 6665 6e69 6465 0000 0000 706f 3d20      defined....op =
   212b8:	203d 504d 555f 414e 5952 4f5f 5f50 4e49     = MP_UNARY_OP_IN
   212c8:	4556 5452 0000 0000 2e2e 2e2f 2f2e 7970     VERT....../../py
   212d8:	722f 6e75 6974 656d 632e 0000 6163 276e     /runtime.c..can'
   212e8:	2074 6f63 766e 7265 2074 6f74 6920 746e     t convert to int
   212f8:	0000 0000 6e75 7573 7070 726f 6574 2064     ....unsupported 
   21308:	7974 6570 6620 726f 6f20 6570 6172 6f74     type for operato
   21318:	0072 0000 656e 6167 6974 6576 7320 6968     r...negative shi
   21328:	7466 6320 756f 746e 0000 0000 656e 6167     ft count....nega
   21338:	6974 6576 7020 776f 7265 7720 7469 2068     tive power with 
   21348:	6f6e 6620 6f6c 7461 7320 7075 6f70 7472     no float support
   21358:	0000 0000 6964 6976 6564 6220 2079 657a     ....divide by ze
   21368:	6f72 0000 626f 656a 7463 6e20 746f 6320     ro..object not c
   21378:	6c61 616c 6c62 0065 7261 7367 5f32 656c     allable.args2_le
   21388:	206e 202b 2032 202a 616d 2d70 753e 6573     n + 2 * map->use
   21398:	2064 3d3c 6120 6772 3273 615f 6c6c 636f     d <= args2_alloc
   213a8:	0000 0000 7277 6e6f 2067 756e 626d 7265     ....wrong number
   213b8:	6f20 2066 6176 756c 7365 7420 206f 6e75      of values to un
   213c8:	6170 6b63 0000 0000 7974 6570 3e2d 6f6c     pack....type->lo
   213d8:	6163 736c 645f 6369 2d74 623e 7361 2e65     cals_dict->base.
   213e8:	7974 6570 3d20 203d 6d26 5f70 7974 6570     type == &mp_type
   213f8:	645f 6369 0074 0000 6f6e 7320 6375 2068     _dict...no such 
   21408:	7461 7274 6269 7475 0065 0000 5f6f 6e69     attribute...o_in
   21418:	0000 0000 626f 656a 7463 6e20 746f 6920     ....object not i
   21428:	6574 6172 6c62 0065 626f 656a 7463 6e20     terable.object n
   21438:	746f 6120 206e 7469 7265 7461 726f 0000     ot an iterator..
   21448:	7328 6e65 5f64 6176 756c 2065 3d21 4d20     (send_value != M
   21458:	5f50 424f 5f4a 554e 4c4c 2029 205e 7428     P_OBJ_NULL) ^ (t
   21468:	7268 776f 765f 6c61 6575 2120 203d 504d     hrow_value != MP
   21478:	4f5f 4a42 4e5f 4c55 294c 0000 6874 6f72     _OBJ_NULL)..thro
   21488:	5f77 6176 756c 2065 3d21 4d20 5f50 424f     w_value != MP_OB
   21498:	5f4a 554e 4c4c 0000 7865 6563 7470 6f69     J_NULL..exceptio
   214a8:	736e 6d20 7375 2074 6564 6972 6576 6620     ns must derive f
   214b8:	6f72 206d 6142 6573 7845 6563 7470 6f69     rom BaseExceptio
   214c8:	006e 0000 6163 6e6e 746f 6920 706d 726f     n...cannot impor
   214d8:	2074 616e 656d 2520 0071 0000 656d 6f6d     t name %q...memo
   214e8:	7972 6120 6c6c 636f 7461 6f69 206e 6166     ry allocation fa
   214f8:	6c69 6465 202c 6568 7061 6920 2073 6f6c     iled, heap is lo
   21508:	6b63 6465 0000 0000 656d 6f6d 7972 6120     cked....memory a
   21518:	6c6c 636f 7461 6f69 206e 6166 6c69 6465     llocation failed
   21528:	202c 6c61 6f6c 6163 6974 676e 2520 2075     , allocating %u 
   21538:	7962 6574 0073 0000                         bytes...

00021540 <__func__.8277>:
   21540:	706d 755f 616e 7972 6f5f 0070               mp_unary_op.

0002154c <__func__.8394>:
   2154c:	706d 635f 6c61 5f6c 7270 7065 7261 5f65     mp_call_prepare_
   2155c:	7261 7367 6e5f 6b5f 5f77 6176 0072 0000     args_n_kw_var...

0002156c <__func__.8482>:
   2156c:	706d 6c5f 616f 5f64 656d 6874 646f 6d5f     mp_load_method_m
   2157c:	7961 6562 0000 0000                         aybe....

00021584 <__func__.8508>:
   21584:	706d 675f 7465 7469 7265 0000               mp_getiter..

00021590 <__func__.8530>:
   21590:	706d 725f 7365 6d75 0065 0000 6128 6c6c     mp_resume...(all
   215a0:	776f 6465 695b 2e5d 6c66 6761 2073 2026     owed[i].flags & 
   215b0:	504d 415f 4752 4b5f 4e49 5f44 414d 4b53     MP_ARG_KIND_MASK
   215c0:	2029 3d3d 4d20 5f50 5241 5f47 424f 004a     ) == MP_ARG_OBJ.
   215d0:	2e2e 2e2f 2f2e 7970 612f 6772 6863 6365     ../../py/argchec
   215e0:	2e6b 0063 7261 7567 656d 746e 6e20 6d75     k.c.argument num
   215f0:	742f 7079 7365 6d20 7369 616d 6374 0068     /types mismatch.

00021600 <__func__.7392>:
   21600:	706d 615f 6772 705f 7261 6573 615f 6c6c     mp_arg_parse_all
   21610:	0000 0000                                   ....

00021614 <mp_const_empty_map>:
   21614:	0006 0000 0000 0000 0000 0000               ............

00021620 <hash_allocation_sizes>:
   21620:	0000 0002 0004 0006 0008 000a 000c 0011     ................
   21630:	0017 001d 0025 002f 003b 0049 0061 007f     ....%./.;.I.a...
   21640:	00a7 00df 0125 0185 0209 02b3 0397 04c7     ....%...........
   21650:	065b 0871 0c9d 12df 1c4b 2a6d 3f91 5f57     [.q.....K.m*.?W_
   21660:	8eff d67b 6d21 7061 3e2d 7369 665f 7869     ..{.!map->is_fix
   21670:	6465 7c20 207c 6f6c 6b6f 7075 6b5f 6e69     ed || lookup_kin
   21680:	2064 3d3d 4d20 5f50 414d 5f50 4f4c 4b4f     d == MP_MAP_LOOK
   21690:	5055 0000 2e2e 2e2f 2f2e 7970 6d2f 7061     UP..../../py/map
   216a0:	632e 0000                                   .c..

000216a4 <__func__.7496>:
   216a4:	706d 6d5f 7061 6c5f 6f6f 756b 0070 0000     mp_map_lookup...
   216b4:	6e28 6c69 0029 0000 253c 3e71 0000 0000     (nil)...<%q>....
   216c4:	206e 2025 2033 3d3d 3020 0000 2e2e 2e2f     n % 3 == 0..../.
   216d4:	2f2e 7970 6f2f 6a62 632e 0000 7254 6361     ./py/obj.c..Trac
   216e4:	6265 6361 206b 6d28 736f 2074 6572 6563     eback (most rece
   216f4:	746e 6320 6c61 206c 616c 7473 3a29 000a     nt call last):..
   21704:	2020 6946 656c 2220 7125 0022 000a 0000       File "%q".....
   21714:	202c 6e69 2520 0a71 0000 0000 7865 6570     , in %q.....expe
   21724:	7463 6465 7420 7075 656c 6c2f 7369 0074     cted tuple/list.
   21734:	7574 6c70 2f65 696c 7473 6820 7361 7720     tuple/list has w
   21744:	6f72 676e 6c20 6e65 7467 0068 6e69 6964     rong length.indi
   21754:	6563 2073 756d 7473 6220 2065 6e69 6574     ces must be inte
   21764:	6567 7372 0000 0000 6e69 6564 2078 756f     gers....index ou
   21774:	2074 666f 7220 6e61 6567 0000 626f 656a     t of range..obje
   21784:	7463 6820 7361 6e20 206f 656c 006e 0000     ct has no len...
   21794:	626f 656a 7463 6420 656f 6e73 7427 7320     object doesn't s
   217a4:	7075 6f70 7472 6920 6574 206d 6564 656c     upport item dele
   217b4:	6974 6e6f 0000 0000 626f 656a 7463 6920     tion....object i
   217c4:	6e73 7427 7320 6275 6373 6972 7470 6261     sn't subscriptab
   217d4:	656c 0000 626f 656a 7463 6420 656f 6e73     le..object doesn
   217e4:	7427 7320 7075 6f70 7472 6920 6574 206d     't support item 
   217f4:	7361 6973 6e67 656d 746e 0000               assignment..

00021800 <mp_identity_obj>:
   21800:	25ec 0002 de61 0000 626f 656a 7463 7720     .%..a...object w
   21810:	7469 2068 7562 6666 7265 7020 6f72 6f74     ith buffer proto
   21820:	6f63 206c 6572 7571 7269 6465 0000 0000     col required....

00021830 <__func__.8021>:
   21830:	706d 6f5f 6a62 705f 6972 746e 655f 6378     mp_obj_print_exc
   21840:	7065 6974 6e6f 0000 7254 6575 0000 0000     eption..True....
   21850:	6146 736c 0065 0000                         False...

00021858 <mp_type_bool>:
   21858:	3d18 0002 0000 00ef df8d 0000 dfc9 0000     .=..............
   21868:	0000 0000 e011 0000 e045 0000 0000 0000     ........E.......
	...

00021894 <mp_const_false_obj>:
   21894:	1858 0002 0000 0000                         X.......

0002189c <mp_const_true_obj>:
   2189c:	1858 0002 0001 0000                         X.......

000218a4 <mp_type_bound_meth>:
   218a4:	3d18 0002 0000 00f1 0000 0000 0000 0000     .=..............
   218b4:	e10b 0000 0000 0000 0000 0000 0000 0000     ................
	...

000218e0 <mp_type_cell>:
   218e0:	3d18 0002 0000 0001 0000 0000 0000 0000     .=..............
	...

0002191c <closure_type>:
   2191c:	3d18 0002 0000 00fa 0000 0000 0000 0000     .=..............
   2192c:	e1d5 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21958:	007b 0000 202c 0000 203a 0000 007d 0000     {..., ..: ..}...
   21968:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   21978:	6c65 5f66 6e69 2029 2626 2820 6d28 5f70     elf_in) && ((mp_
   21988:	626f 5f6a 6162 6573 745f 292a 2828 6f76     obj_base_t*)((vo
   21998:	6469 292a 6573 666c 695f 296e 2d29 743e     id*)self_in))->t
   219a8:	7079 2d65 6d3e 6b61 5f65 656e 2077 3d3d     ype->make_new ==
   219b8:	6420 6369 5f74 616d 656b 6e5f 7765 0029      dict_make_new).
   219c8:	2e2e 2e2f 2f2e 7970 6f2f 6a62 6964 7463     ../../py/objdict
   219d8:	632e 0000                                   .c..

000219dc <dict_clear_obj>:
   219dc:	25ec 0002 e729 0000                         .%..)...

000219e4 <dict_copy_obj>:
   219e4:	25ec 0002 e789 0000                         .%......

000219ec <dict_fromkeys_fun_obj>:
   219ec:	2734 0002 0006 0004 e845 0000               4'......E...

000219f8 <dict_fromkeys_obj>:
   219f8:	3f60 0002 19ec 0002 4d28 5f50 424f 5f4a     `?......(MP_OBJ_
   21a08:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   21a18:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   21a28:	745f 292a 2828 6f76 6469 292a 7261 7367     _t*)((void*)args
   21a38:	305b 295d 2d29 743e 7079 2d65 6d3e 6b61     [0]))->type->mak
   21a48:	5f65 656e 2077 3d3d 6420 6369 5f74 616d     e_new == dict_ma
   21a58:	656b 6e5f 7765 0029                         ke_new).

00021a60 <dict_get_obj>:
   21a60:	2734 0002 0006 0004 e9b1 0000               4'..........

00021a6c <dict_pop_obj>:
   21a6c:	2734 0002 0006 0004 e9cf 0000               4'..........

00021a78 <dict_setdefault_obj>:
   21a78:	2734 0002 0006 0004 e9ed 0000 6f70 6970     4'..........popi
   21a88:	6574 286d 3a29 6420 6369 6974 6e6f 7261     tem(): dictionar
   21a98:	2079 7369 6520 706d 7974 0000               y is empty..

00021aa4 <dict_popitem_obj>:
   21aa4:	25ec 0002 ea0b 0000 6964 7463 7520 6470     .%......dict upd
   21ab4:	7461 2065 6573 7571 6e65 6563 6820 7361     ate sequence has
   21ac4:	7720 6f72 676e 6c20 6e65 7467 0068 0000      wrong length...

00021ad4 <dict_update_obj>:
   21ad4:	2734 0002 ffff 0003 eac9 0000               4'..........

00021ae0 <dict_view_type>:
   21ae0:	3d18 0002 0000 0101 ed81 0000 0000 0000     .=..............
	...
   21af8:	ee4d 0000 0000 0000 0000 0000 ed11 0000     M...............
	...

00021b1c <dict_view_it_type>:
   21b1c:	3d18 0002 0000 012b 0000 0000 0000 0000     .=....+.........
	...
   21b40:	de77 0000 ec79 0000 0000 0000 0000 0000     w...y...........
	...
   21b58:	6964 7463 695f 6574 736d 0000 6964 7463     dict_items..dict
   21b68:	6b5f 7965 0073 0000 6964 7463 765f 6c61     _keys...dict_val
   21b78:	6575 0073                                   ues.

00021b7c <mp_dict_view_names>:
   21b7c:	1b58 0002 1b64 0002 1b70 0002 4d28 5f50     X...d...p...(MP_
   21b8c:	424f 5f4a 5349 4f5f 4a42 7328 6c65 5f66     OBJ_IS_OBJ(self_
   21b9c:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   21bac:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   21bbc:	7329 6c65 5f66 6e69 2929 3e2d 7974 6570     )self_in))->type
   21bcc:	3d20 203d 2628 6964 7463 765f 6569 5f77      == (&dict_view_
   21bdc:	7469 745f 7079 2965 2929 0000 4d28 5f50     it_type)))..(MP_
   21bec:	424f 5f4a 5349 4f5f 4a42 7628 6569 5f77     OBJ_IS_OBJ(view_
   21bfc:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   21c0c:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   21c1c:	7629 6569 5f77 6e69 2929 3e2d 7974 6570     )view_in))->type
   21c2c:	3d20 203d 2628 6964 7463 765f 6569 5f77      == (&dict_view_
   21c3c:	7974 6570 2929 0029 4d28 5f50 424f 5f4a     type))).(MP_OBJ_
   21c4c:	5349 4f5f 4a42 7328 6c65 5f66 6e69 2029     IS_OBJ(self_in) 
   21c5c:	2626 2820 2828 706d 6f5f 6a62 625f 7361     && (((mp_obj_bas
   21c6c:	5f65 2a74 2829 7628 696f 2a64 7329 6c65     e_t*)((void*)sel
   21c7c:	5f66 6e69 2929 3e2d 7974 6570 3d20 203d     f_in))->type == 
   21c8c:	2628 6964 7463 765f 6569 5f77 7974 6570     (&dict_view_type
   21c9c:	2929 0029 5b28 0000 295d 0000               ))).([..])..

00021ca8 <dict_items_obj>:
   21ca8:	25ec 0002 ef11 0000                         .%......

00021cb0 <dict_keys_obj>:
   21cb0:	25ec 0002 ef2b 0000                         .%..+...

00021cb8 <dict_values_obj>:
   21cb8:	25ec 0002 ef45 0000                         .%..E...

00021cc0 <dict_locals_dict_table>:
   21cc0:	03e2 0000 19dc 0002 03f2 0000 19e4 0002     ................
   21cd0:	043a 0000 19f8 0002 0446 0000 1a60 0002     :.......F...`...
   21ce0:	04a6 0000 1ca8 0002 04ba 0000 1cb0 0002     ................
   21cf0:	051a 0000 1a6c 0002 051e 0000 1aa4 0002     ....l...........
   21d00:	056e 0000 1a78 0002 05be 0000 1ad4 0002     n...x...........
   21d10:	05ca 0000 1cb8 0002 003a 0000 410c 0002     ........:....A..
   21d20:	008e 0000 4114 0002 0022 0000 411c 0002     .....A.."....A..

00021d30 <dict_locals_dict>:
   21d30:	1d40 0002 0077 0000 000e 0000 1cc0 0002     @...w...........

00021d40 <mp_type_dict>:
   21d40:	3d18 0002 0000 0100 e419 0000 e4b5 0000     .=..............
   21d50:	0000 0000 e51b 0000 e56b 0000 0000 0000     ........k.......
   21d60:	e695 0000 ef5f 0000 0000 0000 0000 0000     ...._...........
	...
   21d78:	1d30 0002                                   0...

00021d7c <__func__.7369>:
   21d7c:	6964 7463 635f 656c 7261 0000               dict_clear..

00021d88 <__func__.7375>:
   21d88:	6964 7463 635f 706f 0079 0000               dict_copy...

00021d94 <__func__.7400>:
   21d94:	6964 7463 675f 7465 685f 6c65 6570 0072     dict_get_helper.

00021da4 <__func__.7422>:
   21da4:	6964 7463 705f 706f 7469 6d65 0000 0000     dict_popitem....

00021db4 <__func__.7434>:
   21db4:	6964 7463 755f 6470 7461 0065               dict_update.

00021dc0 <__func__.7477>:
   21dc0:	6964 7463 765f 6569 5f77 7469 695f 6574     dict_view_it_ite
   21dd0:	6e72 7865 0074 0000                         rnext...

00021dd8 <__func__.7490>:
   21dd8:	6964 7463 765f 6569 5f77 6567 6974 6574     dict_view_getite
   21de8:	0072 0000                                   r...

00021dec <__func__.7498>:
   21dec:	6964 7463 765f 6569 5f77 7270 6e69 0074     dict_view_print.

00021dfc <__func__.7523>:
   21dfc:	6964 7463 765f 6569 0077 0000               dict_view...

00021e08 <__func__.7540>:
   21e08:	6964 7463 675f 7465 7469 7265 0000 0000     dict_getiter....

00021e18 <__func__.7562>:
   21e18:	706d 6f5f 6a62 645f 6369 5f74 7473 726f     mp_obj_dict_stor
   21e28:	0065 0000                                   e...

00021e2c <mp_const_GeneratorExit_obj>:
   21e2c:	1ef8 0002 0000 0000 0000 0000 3a5c 0002     ............\:..
   21e3c:	203a 0000 0000 0000                         : ......

00021e44 <mp_type_BaseException>:
   21e44:	3d18 0002 0000 00b9 f125 0000 f1e9 0000     .=......%.......
	...
   21e60:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...

00021e80 <mp_type_SystemExit>:
   21e80:	3d18 0002 0000 00e0 f125 0000 f1e9 0000     .=......%.......
	...
   21e9c:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21eb4:	1e44 0002 0000 0000                         D.......

00021ebc <mp_type_KeyboardInterrupt>:
   21ebc:	3d18 0002 0000 00cb f125 0000 f1e9 0000     .=......%.......
	...
   21ed8:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21ef0:	1e44 0002 0000 0000                         D.......

00021ef8 <mp_type_GeneratorExit>:
   21ef8:	3d18 0002 0000 00be f125 0000 f1e9 0000     .=......%.......
	...
   21f14:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21f2c:	1e44 0002 0000 0000                         D.......

00021f34 <mp_type_Exception>:
   21f34:	3d18 0002 0000 00bd f125 0000 f1e9 0000     .=......%.......
	...
   21f50:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21f68:	1e44 0002 0000 0000                         D.......

00021f70 <mp_type_StopIteration>:
   21f70:	3d18 0002 0000 00de f125 0000 f1e9 0000     .=......%.......
	...
   21f8c:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21fa4:	1f34 0002 0000 0000                         4.......

00021fac <mp_type_ArithmeticError>:
   21fac:	3d18 0002 0000 00b6 f125 0000 f1e9 0000     .=......%.......
	...
   21fc8:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21fe0:	1f34 0002 0000 0000                         4.......

00021fe8 <mp_type_OverflowError>:
   21fe8:	3d18 0002 0000 00d6 f125 0000 f1e9 0000     .=......%.......
	...
   22004:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   2201c:	1fac 0002 0000 0000                         ........

00022024 <mp_type_ZeroDivisionError>:
   22024:	3d18 0002 0000 00e4 f125 0000 f1e9 0000     .=......%.......
	...
   22040:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22058:	1fac 0002 0000 0000                         ........

00022060 <mp_type_AssertionError>:
   22060:	3d18 0002 0000 00b7 f125 0000 f1e9 0000     .=......%.......
	...
   2207c:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22094:	1f34 0002 0000 0000                         4.......

0002209c <mp_type_AttributeError>:
   2209c:	3d18 0002 0000 00b8 f125 0000 f1e9 0000     .=......%.......
	...
   220b8:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   220d0:	1f34 0002 0000 0000                         4.......

000220d8 <mp_type_EOFError>:
   220d8:	3d18 0002 0000 00bb f125 0000 f1e9 0000     .=......%.......
	...
   220f4:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   2210c:	1f34 0002 0000 0000                         4.......

00022114 <mp_type_ImportError>:
   22114:	3d18 0002 0000 00c7 f125 0000 f1e9 0000     .=......%.......
	...
   22130:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22148:	1f34 0002 0000 0000                         4.......

00022150 <mp_type_LookupError>:
   22150:	3d18 0002 0000 00cd f125 0000 f1e9 0000     .=......%.......
	...
   2216c:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22184:	1f34 0002 0000 0000                         4.......

0002218c <mp_type_IndexError>:
   2218c:	3d18 0002 0000 00c9 f125 0000 f1e9 0000     .=......%.......
	...
   221a8:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   221c0:	2150 0002 0000 0000                         P!......

000221c8 <mp_type_KeyError>:
   221c8:	3d18 0002 0000 00ca f125 0000 f1e9 0000     .=......%.......
	...
   221e4:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   221fc:	2150 0002 0000 0000                         P!......

00022204 <mp_type_MemoryError>:
   22204:	3d18 0002 0000 00cf f125 0000 f1e9 0000     .=......%.......
	...
   22220:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22238:	1f34 0002 0000 0000                         4.......

00022240 <mp_type_NameError>:
   22240:	3d18 0002 0000 00d0 f125 0000 f1e9 0000     .=......%.......
	...
   2225c:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22274:	1f34 0002 0000 0000                         4.......

0002227c <mp_type_OSError>:
   2227c:	3d18 0002 0000 00d4 f125 0000 f1e9 0000     .=......%.......
	...
   22298:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   222b0:	1f34 0002 0000 0000                         4.......

000222b8 <mp_type_RuntimeError>:
   222b8:	3d18 0002 0000 00dc f125 0000 f1e9 0000     .=......%.......
	...
   222d4:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   222ec:	1f34 0002 0000 0000                         4.......

000222f4 <mp_type_NotImplementedError>:
   222f4:	3d18 0002 0000 00d2 f125 0000 f1e9 0000     .=......%.......
	...
   22310:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22328:	22b8 0002 0000 0000                         ."......

00022330 <mp_type_SyntaxError>:
   22330:	3d18 0002 0000 00df f125 0000 f1e9 0000     .=......%.......
	...
   2234c:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22364:	1f34 0002 0000 0000                         4.......

0002236c <mp_type_IndentationError>:
   2236c:	3d18 0002 0000 00c8 f125 0000 f1e9 0000     .=......%.......
	...
   22388:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   223a0:	2330 0002 0000 0000                         0#......

000223a8 <mp_type_TypeError>:
   223a8:	3d18 0002 0000 00e1 f125 0000 f1e9 0000     .=......%.......
	...
   223c4:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   223dc:	1f34 0002 0000 0000                         4.......

000223e4 <mp_type_ValueError>:
   223e4:	3d18 0002 0000 00e2 f125 0000 f1e9 0000     .=......%.......
	...
   22400:	f2b9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22418:	1f34 0002 0000 0000 7865 5f63 7974 6570     4.......exc_type
   22428:	3e2d 616d 656b 6e5f 7765 3d20 203d 706d     ->make_new == mp
   22438:	6f5f 6a62 655f 6378 7065 6974 6e6f 6d5f     _obj_exception_m
   22448:	6b61 5f65 656e 0077 2e2e 2e2f 2f2e 7970     ake_new.../../py
   22458:	6f2f 6a62 7865 6563 7470 632e 0000 0000     /objexcept.c....
   22468:	6d66 2074 3d21 4e20 4c55 004c 706d 6f5f     fmt != NULL.mp_o
   22478:	6a62 695f 5f73 7865 6563 7470 6f69 5f6e     bj_is_exception_
   22488:	6e69 7473 6e61 6563 7328 6c65 5f66 6e69     instance(self_in
   22498:	0029 0000                                   )...

0002249c <__func__.7938>:
   2249c:	706d 6f5f 6a62 6e5f 7765 655f 6378 7065     mp_obj_new_excep
   224ac:	6974 6e6f 615f 6772 0073 0000               tion_args...

000224b8 <__func__.7960>:
   224b8:	706d 6f5f 6a62 6e5f 7765 655f 6378 7065     mp_obj_new_excep
   224c8:	6974 6e6f 6d5f 6773 765f 7261 0067 0000     tion_msg_varg...

000224d8 <__func__.7983>:
   224d8:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   224e8:	635f 656c 7261 745f 6172 6563 6162 6b63     _clear_traceback
   224f8:	0000 0000                                   ....

000224fc <__func__.7991>:
   224fc:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   2250c:	615f 6464 745f 6172 6563 6162 6b63 0000     _add_traceback..

0002251c <__func__.8000>:
   2251c:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   2252c:	675f 7465 745f 6172 6563 6162 6b63 0000     _get_traceback..
   2253c:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   2254c:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   2255c:	665f 6e75 625f 6975 746c 6e69 305f 0029     _fun_builtin_0).
   2256c:	2e2e 2e2f 2f2e 7970 6f2f 6a62 7566 2e6e     ../../py/objfun.
   2257c:	0063 0000                                   c...

00022580 <mp_type_fun_builtin_0>:
   22580:	3d18 0002 0000 010f 0000 0000 0000 0000     .=..............
   22590:	f8c5 0000 df05 0000 0000 0000 0000 0000     ................
	...
   225bc:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   225cc:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   225dc:	665f 6e75 625f 6975 746c 6e69 315f 0029     _fun_builtin_1).

000225ec <mp_type_fun_builtin_1>:
   225ec:	3d18 0002 0000 010f 0000 0000 0000 0000     .=..............
   225fc:	f929 0000 df05 0000 0000 0000 0000 0000     )...............
	...
   22628:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22638:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   22648:	665f 6e75 625f 6975 746c 6e69 325f 0029     _fun_builtin_2).

00022658 <mp_type_fun_builtin_2>:
   22658:	3d18 0002 0000 010f 0000 0000 0000 0000     .=..............
   22668:	f995 0000 df05 0000 0000 0000 0000 0000     ................
	...
   22694:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   226a4:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   226b4:	665f 6e75 625f 6975 746c 6e69 335f 0029     _fun_builtin_3).

000226c4 <mp_type_fun_builtin_3>:
   226c4:	3d18 0002 0000 010f 0000 0000 0000 0000     .=..............
   226d4:	fa05 0000 df05 0000 0000 0000 0000 0000     ................
	...
   22700:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22710:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   22720:	665f 6e75 625f 6975 746c 6e69 765f 7261     _fun_builtin_var
   22730:	0029 0000                                   )...

00022734 <mp_type_fun_builtin_var>:
   22734:	3d18 0002 0000 010f 0000 0000 0000 0000     .=..............
   22744:	fa79 0000 df05 0000 0000 0000 0000 0000     y...............
	...
   22770:	6d76 725f 7465 7275 5f6e 696b 646e 3d20     vm_return_kind =
   22780:	203d 504d 565f 5f4d 4552 5554 4e52 455f     = MP_VM_RETURN_E
   22790:	4358 5045 4954 4e4f 0000 0000               XCEPTION....

0002279c <mp_type_fun_bc>:
   2279c:	3d18 0002 0000 010f 0000 0000 0000 0000     .=..............
   227ac:	fb83 0000 df05 0000 0000 0000 0000 0000     ................
	...
   227d8:	504d 4f5f 4a42 495f 5f53 5954 4550 6428     MP_OBJ_IS_TYPE(d
   227e8:	6665 615f 6772 5f73 6e69 202c 6d26 5f70     ef_args_in, &mp_
   227f8:	7974 6570 745f 7075 656c 0029               type_tuple).

00022804 <__func__.7248>:
   22804:	7566 5f6e 7562 6c69 6974 5f6e 5f30 6163     fun_builtin_0_ca
   22814:	6c6c 0000                                   ll..

00022818 <__func__.7257>:
   22818:	7566 5f6e 7562 6c69 6974 5f6e 5f31 6163     fun_builtin_1_ca
   22828:	6c6c 0000                                   ll..

0002282c <__func__.7266>:
   2282c:	7566 5f6e 7562 6c69 6974 5f6e 5f32 6163     fun_builtin_2_ca
   2283c:	6c6c 0000                                   ll..

00022840 <__func__.7275>:
   22840:	7566 5f6e 7562 6c69 6974 5f6e 5f33 6163     fun_builtin_3_ca
   22850:	6c6c 0000                                   ll..

00022854 <__func__.7284>:
   22854:	7566 5f6e 7562 6c69 6974 5f6e 6176 5f72     fun_builtin_var_
   22864:	6163 6c6c 0000 0000                         call....

0002286c <__func__.7309>:
   2286c:	7566 5f6e 6362 635f 6c61 006c               fun_bc_call.

00022878 <__func__.7320>:
   22878:	706d 6f5f 6a62 6e5f 7765 665f 6e75 625f     mp_obj_new_fun_b
   22888:	0063 0000                                   c...

0002288c <mp_type_gen_wrap>:
   2288c:	3d18 0002 0000 0110 0000 0000 0000 0000     .=..............
   2289c:	fdc9 0000 df05 0000 0000 0000 0000 0000     ................
	...
   228c8:	673c 6e65 7265 7461 726f 6f20 6a62 6365     <generator objec
   228d8:	2074 2527 2771 6120 2074 7025 003e 0000     t '%q' at %p>...
   228e8:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   228f8:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   22908:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   22918:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   22928:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   22938:	5f65 6567 5f6e 6e69 7473 6e61 6563 2929     e_gen_instance))
   22948:	0029 0000 2e2e 2e2f 2f2e 7970 6f2f 6a62     )...../../py/obj
   22958:	6567 656e 6172 6f74 2e72 0063 6163 276e     generator.c.can'
   22968:	2074 6573 646e 6e20 6e6f 4e2d 6e6f 2065     t send non-None 
   22978:	6176 756c 2065 6f74 6120 6a20 7375 2d74     value to a just-
   22988:	7473 7261 6574 2064 6567 656e 6172 6f74     started generato
   22998:	0072 0000 6567 656e 6172 6f74 2072 6c61     r...generator al
   229a8:	6572 6461 2079 7865 6365 7475 6e69 0067     ready executing.
   229b8:	6567 656e 6172 6f74 2072 6172 7369 6465     generator raised
   229c8:	5320 6f74 4970 6574 6172 6974 6e6f 0000      StopIteration..

000229d8 <gen_instance_send_obj>:
   229d8:	2658 0002 0075 0001                         X&..u...

000229e0 <gen_instance_throw_obj>:
   229e0:	2734 0002 0008 0004 00ad 0001 6567 656e     4'..........gene
   229f0:	6172 6f74 2072 6769 6f6e 6572 2064 6547     rator ignored Ge
   22a00:	656e 6172 6f74 4572 6978 0074               neratorExit.

00022a0c <gen_instance_close_obj>:
   22a0c:	25ec 0002 0101 0001 6163 276e 2074 6570     .%......can't pe
   22a1c:	646e 7420 7268 776f 7420 206f 756a 7473     nd throw to just
   22a2c:	732d 6174 7472 6465 6720 6e65 7265 7461     -started generat
   22a3c:	726f 0000                                   or..

00022a40 <gen_instance_pend_throw_obj>:
   22a40:	2658 0002 016d 0001                         X&..m...

00022a48 <gen_instance_locals_dict_table>:
   22a48:	03e6 0000 2a0c 0002 0562 0000 29d8 0002     .....*..b....)..
   22a58:	05a6 0000 29e0 0002 0512 0000 2a40 0002     .....)......@*..

00022a68 <gen_instance_locals_dict>:
   22a68:	1d40 0002 0027 0000 0004 0000 2a48 0002     @...'.......H*..

00022a78 <mp_type_gen_instance>:
   22a78:	3d18 0002 0000 0110 fe4d 0000 0000 0000     .=......M.......
   22a88:	0000 0000 df05 0000 0000 0000 0000 0000     ................
   22a98:	0000 0000 de77 0000 0055 0001 0000 0000     ....w...U.......
	...
   22ab0:	2a68 0002                                   h*..

00022ab4 <__func__.7462>:
   22ab4:	706d 6f5f 6a62 675f 6e65 725f 7365 6d75     mp_obj_gen_resum
   22ac4:	0065 0000                                   e...

00022ac8 <it_type>:
   22ac8:	3d18 0002 0000 012b 0000 0000 0000 0000     .=....+.........
	...
   22aec:	de77 0000 01ad 0001 0000 0000 0000 0000     w...............
	...

00022b04 <log_base2_floor>:
   22b04:	0100 0201 0202 0302 0303 0303 0303 0403     ................
   22b14:	2032 3d3c 6220 7361 2065 2626 6220 7361     2 <= base && bas
   22b24:	2065 3d3c 3120 0036 2e2e 2e2f 2f2e 7970     e <= 16.../../py
   22b34:	6f2f 6a62 6e69 2e74 0063 0000 6f6c 676e     /objint.c...long
   22b44:	6920 746e 6e20 746f 7320 7075 6f70 7472      int not support
   22b54:	6465 6920 206e 6874 7369 6220 6975 646c     ed in this build
   22b64:	0000 0000 6d73 6c61 206c 6e69 2074 766f     ....small int ov
   22b74:	7265 6c66 776f 0000                         erflow..

00022b7c <int_from_bytes_fun_obj>:
   22b7c:	2734 0002 0008 0006 0891 0001               4'..........

00022b88 <int_from_bytes_obj>:
   22b88:	3f60 0002 2b7c 0002                         `?..|+..

00022b90 <int_to_bytes_obj>:
   22b90:	2734 0002 0008 0006 090b 0001               4'..........

00022b9c <int_locals_dict_table>:
   22b9c:	0436 0000 2b88 0002 05aa 0000 2b90 0002     6....+.......+..

00022bac <int_locals_dict>:
   22bac:	1d40 0002 0017 0000 0002 0000 2b9c 0002     @............+..

00022bbc <mp_type_int>:
   22bbc:	3d18 0002 0000 0120 0409 0001 0309 0001     .=.... .........
   22bcc:	0000 0000 06a9 0001 06c1 0001 0000 0000     ................
	...
   22bf4:	2bac 0002                                   .+..

00022bf8 <__func__.7965>:
   22bf8:	706d 695f 746e 665f 726f 616d 5f74 6973     mp_int_format_si
   22c08:	657a 0000 005b 0000 202c 0000 005d 0000     ze..[..., ..]...
   22c18:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   22c28:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   22c38:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   22c48:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   22c58:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   22c68:	5f65 696c 7473 2929 0029 0000 2e2e 2e2f     e_list)))...../.
   22c78:	2f2e 7970 6f2f 6a62 696c 7473 632e 0000     ./py/objlist.c..
   22c88:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 6128     (MP_OBJ_IS_OBJ(a
   22c98:	6772 5b73 5d30 2029 2626 2820 2828 706d     rgs[0]) && (((mp
   22ca8:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   22cb8:	696f 2a64 6129 6772 5b73 5d30 2929 3e2d     oid*)args[0]))->
   22cc8:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   22cd8:	5f65 696c 7473 2929 0029 0000 6f70 2070     e_list)))...pop 
   22ce8:	7266 6d6f 6520 706d 7974 6c20 7369 0074     from empty list.
   22cf8:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7028     (MP_OBJ_IS_OBJ(p
   22d08:	736f 615f 6772 5b73 5d30 2029 2626 2820     os_args[0]) && (
   22d18:	2828 706d 6f5f 6a62 625f 7361 5f65 2a74     ((mp_obj_base_t*
   22d28:	2829 7628 696f 2a64 7029 736f 615f 6772     )((void*)pos_arg
   22d38:	5b73 5d30 2929 3e2d 7974 6570 3d20 203d     s[0]))->type == 
   22d48:	2628 706d 745f 7079 5f65 696c 7473 2929     (&mp_type_list))
   22d58:	0029 0000                                   )...

00022d5c <list_append_obj>:
   22d5c:	2658 0002 0dcb 0001                         X&......

00022d64 <list_extend_obj>:
   22d64:	2658 0002 0e85 0001                         X&......

00022d6c <list_clear_obj>:
   22d6c:	25ec 0002 128d 0001                         .%......

00022d74 <list_copy_obj>:
   22d74:	25ec 0002 130d 0001                         .%......

00022d7c <list_count_obj>:
   22d7c:	2658 0002 1369 0001                         X&..i...

00022d84 <list_index_obj>:
   22d84:	2734 0002 0008 0004 13c5 0001               4'..........

00022d90 <list_insert_obj>:
   22d90:	26c4 0002 1429 0001                         .&..)...

00022d98 <list_pop_obj>:
   22d98:	2734 0002 0004 0002 0f8d 0001               4'..........

00022da4 <list_remove_obj>:
   22da4:	2658 0002 14f9 0001                         X&......

00022dac <list_reverse_obj>:
   22dac:	25ec 0002 1569 0001                         .%..i...

00022db4 <list_sort_obj>:
   22db4:	2734 0002 ffff 0003 11cf 0001               4'..........

00022dc0 <list_locals_dict_table>:
   22dc0:	03ae 0000 2d5c 0002 03e2 0000 2d6c 0002     ....\-......l-..
   22dd0:	03f2 0000 2d74 0002 03f6 0000 2d7c 0002     ....t-......|-..
   22de0:	0426 0000 2d64 0002 0472 0000 2d84 0002     &...d-..r....-..
   22df0:	047e 0000 2d90 0002 051a 0000 2d98 0002     ~....-.......-..
   22e00:	0536 0000 2da4 0002 054a 0000 2dac 0002     6....-..J....-..
   22e10:	0576 0000 2db4 0002                         v....-..

00022e18 <list_locals_dict>:
   22e18:	1d40 0002 005f 0000 000b 0000 2dc0 0002     @..._........-..

00022e28 <mp_type_list>:
   22e28:	3d18 0002 0000 0130 0a35 0001 0adf 0001     .=....0.5.......
   22e38:	0000 0000 0b2f 0001 0b77 0001 0000 0000     ..../...w.......
   22e48:	0d41 0001 0dad 0001 0000 0000 0000 0000     A...............
	...
   22e60:	2e18 0002                                   ....

00022e64 <__func__.7274>:
   22e64:	706d 6f5f 6a62 6c5f 7369 5f74 7061 6570     mp_obj_list_appe
   22e74:	646e 0000                                   nd..

00022e78 <__func__.7280>:
   22e78:	696c 7473 655f 7478 6e65 0064               list_extend.

00022e84 <__func__.7287>:
   22e84:	696c 7473 705f 706f 0000 0000               list_pop....

00022e90 <allowed_args.7316>:
   22e90:	012d 0203 3108 0002 0152 0201 0000 0000     -....1..R.......

00022ea0 <__func__.7321>:
   22ea0:	706d 6f5f 6a62 6c5f 7369 5f74 6f73 7472     mp_obj_list_sort
   22eb0:	0000 0000                                   ....

00022eb4 <__func__.7326>:
   22eb4:	696c 7473 635f 656c 7261 0000               list_clear..

00022ec0 <__func__.7331>:
   22ec0:	696c 7473 635f 706f 0079 0000               list_copy...

00022ecc <__func__.7337>:
   22ecc:	696c 7473 635f 756f 746e 0000               list_count..

00022ed8 <__func__.7343>:
   22ed8:	696c 7473 695f 646e 7865 0000               list_index..

00022ee4 <__func__.7350>:
   22ee4:	696c 7473 695f 736e 7265 0074               list_insert.

00022ef0 <__func__.7361>:
   22ef0:	706d 6f5f 6a62 6c5f 7369 5f74 6572 6f6d     mp_obj_list_remo
   22f00:	6576 0000                                   ve..

00022f04 <__func__.7366>:
   22f04:	696c 7473 725f 7665 7265 6573 0000 0000     list_reverse....
   22f14:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   22f24:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   22f34:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   22f44:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   22f54:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   22f64:	5f65 616d 2970 2929 0000 0000 2e2e 2e2f     e_map)))....../.
   22f74:	2f2e 7970 6f2f 6a62 616d 2e70 0063 0000     ./py/objmap.c...

00022f84 <mp_type_map>:
   22f84:	3d18 0002 0000 0136 0000 0000 1859 0001     .=....6.....Y...
	...
   22fa8:	de77 0000 18df 0001 0000 0000 0000 0000     w...............
	...

00022fc0 <__func__.7389>:
   22fc0:	616d 5f70 7469 7265 656e 7478 0000 0000     map_iternext....
   22fd0:	0000 0000 6d3c 646f 6c75 2065 2527 2773     ....<module '%s'
   22fe0:	003e 0000                                   >...

00022fe4 <mp_type_module>:
   22fe4:	3d18 0002 0000 013a 19a3 0001 0000 0000     .=....:.........
	...
   23000:	19f5 0001 0000 0000 0000 0000 0000 0000     ................
	...

00023020 <mp_builtin_module_table>:
   23020:	006a 0000 1298 0002 03ca 0000 4628 0002     j...........(F..
   23030:	04e2 0000 46b0 0002 05b6 0000 4ed8 0002     .....F.......N..

00023040 <mp_builtin_module_map>:
   23040:	0027 0000 0004 0000 3020 0002               '....... 0..

0002304c <mp_type_object>:
   2304c:	3d18 0002 0000 013e 0000 0000 1bd1 0001     .=....>.........
	...

00023088 <mp_type_polymorph_iter>:
   23088:	3d18 0002 0000 012b 0000 0000 0000 0000     .=....+.........
	...
   230ac:	de77 0000 1c07 0001 0000 0000 0000 0000     w...............
	...
   230c4:	6f4e 656e 0000 0000                         None....

000230cc <mp_type_NoneType>:
   230cc:	3d18 0002 0000 00d1 1c25 0001 0000 0000     .=......%.......
   230dc:	0000 0000 df05 0000 0000 0000 0000 0000     ................
	...

00023108 <mp_const_none_obj>:
   23108:	30cc 0002                                   .0..

0002310c <range_it_type>:
   2310c:	3d18 0002 0000 012b 0000 0000 0000 0000     .=....+.........
	...
   23130:	de77 0000 1ca5 0001 0000 0000 0000 0000     w...............
	...
   23148:	6172 676e 2865 6425 202c 6425 0000 0000     range(%d, %d....
   23158:	0029 0000 202c 6425 0029 0000 657a 6f72     )..., %d)...zero
   23168:	7320 6574 0070 0000                          step...

00023170 <mp_type_range>:
   23170:	3d18 0002 0000 014c 1d41 0001 1d95 0001     .=....L.A.......
   23180:	0000 0000 1e91 0001 0000 0000 1f5b 0001     ............[...
   23190:	1edd 0001 1f31 0001 0000 0000 0000 0000     ....1...........
	...
   231ac:	7125 0000                                   %q..

000231b0 <mp_type_singleton>:
   231b0:	3d18 0002 0000 0001 1fcd 0001 0000 0000     .=..............
	...

000231ec <mp_const_ellipsis_obj>:
   231ec:	31b0 0002 00bc 0000 6325 0000 255c 0063     .1......%c..\%c.
   231fc:	5c5c 0000 6e5c 0000 725c 0000 745c 0000     \\..\n..\r..\t..
   2320c:	785c 3025 7832 0000 2e25 732a 0000 0000     \x%02x..%.*s....
   2321c:	0062 0000 7962 6574 2073 6176 756c 2065     b...bytes value 
   2322c:	756f 2074 666f 7220 6e61 6567 0000 0000     out of range....
   2323c:	7277 6e6f 2067 756e 626d 7265 6f20 2066     wrong number of 
   2324c:	7261 7567 656d 746e 0073 0000 4d28 5f50     arguments...(MP_
   2325c:	424f 5f4a 5349 515f 5453 2852 6573 666c     OBJ_IS_QSTR(self
   2326c:	695f 296e 7c20 207c 4d28 5f50 424f 5f4a     _in) || (MP_OBJ_
   2327c:	5349 4f5f 4a42 7328 6c65 5f66 6e69 2029     IS_OBJ(self_in) 
   2328c:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   2329c:	745f 292a 2828 6f76 6469 292a 6573 666c     _t*)((void*)self
   232ac:	695f 296e 2d29 743e 7079 2d65 623e 6e69     _in))->type->bin
   232bc:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   232cc:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   232dc:	0000 0000 2e2e 2e2f 2f2e 7970 6f2f 6a62     ....../../py/obj
   232ec:	7473 2e72 0063 0000 6f6a 6e69 6520 7078     str.c...join exp
   232fc:	6365 7374 6120 6c20 7369 2074 666f 7320     ects a list of s
   2330c:	7274 622f 7479 7365 6f20 6a62 6365 7374     tr/bytes objects
   2331c:	6320 6e6f 6973 7473 6e65 2074 6977 6874      consistent with
   2332c:	7320 6c65 2066 626f 656a 7463 0000 0000      self object....

0002333c <str_join_obj>:
   2333c:	2658 0002 2aa9 0001 6d65 7470 2079 6573     X&...*..empty se
   2334c:	6170 6172 6f74 0072                         parator.

00023354 <str_split_obj>:
   23354:	2734 0002 0006 0002 2cd1 0001 7372 6c70     4'.......,..rspl
   23364:	7469 4e28 6e6f 2c65 296e 0000               it(None,n)..

00023370 <str_rsplit_obj>:
   23370:	2734 0002 0006 0002 2ee5 0001 4d28 5f50     4'..........(MP_
   23380:	424f 5f4a 5349 515f 5453 2852 7261 7367     OBJ_IS_QSTR(args
   23390:	305b 295d 7c20 207c 4d28 5f50 424f 5f4a     [0]) || (MP_OBJ_
   233a0:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   233b0:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   233c0:	745f 292a 2828 6f76 6469 292a 7261 7367     _t*)((void*)args
   233d0:	305b 295d 2d29 743e 7079 2d65 623e 6e69     [0]))->type->bin
   233e0:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   233f0:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   23400:	0000 0000 7573 7362 7274 6e69 2067 6f6e     ....substring no
   23410:	2074 6f66 6e75 0064                         t found.

00023418 <str_find_obj>:
   23418:	2734 0002 0008 0004 3265 0001               4'......e2..

00023424 <str_rfind_obj>:
   23424:	2734 0002 0008 0004 3285 0001               4'.......2..

00023430 <str_index_obj>:
   23430:	2734 0002 0008 0004 32a7 0001               4'.......2..

0002343c <str_rindex_obj>:
   2343c:	2734 0002 0008 0004 32c7 0001               4'.......2..

00023448 <str_startswith_obj>:
   23448:	2734 0002 0006 0004 32e9 0001 7473 7261     4'.......2..star
   23458:	2f74 6e65 2064 6e69 6964 6563 0073 0000     t/end indices...

00023468 <str_endswith_obj>:
   23468:	2734 0002 0006 0004 33ad 0001 616c 7473     4'.......3..last
   23478:	675f 6f6f 5f64 6863 7261 705f 736f 3e20     _good_char_pos >
   23488:	203d 6966 7372 5f74 6f67 646f 635f 6168     = first_good_cha
   23498:	5f72 6f70 0073 0000 6966 7372 5f74 6f67     r_pos...first_go
   234a8:	646f 635f 6168 5f72 6f70 2073 3d3d 3020     od_char_pos == 0
   234b8:	0000 0000                                   ....

000234bc <str_strip_obj>:
   234bc:	2734 0002 0004 0002 3685 0001               4'.......6..

000234c8 <str_lstrip_obj>:
   234c8:	2734 0002 0004 0002 36a3 0001               4'.......6..

000234d4 <str_rstrip_obj>:
   234d4:	2734 0002 0004 0002 36c1 0001 3e3c 5e3d     4'.......6..<>=^
   234e4:	0000 0000 6362 6564 6645 6746 6e47 736f     ....bcdeEfFgGnos
   234f4:	5878 0025 6162 2064 6f66 6d72 7461 7320     xX%.bad format s
   23504:	7274 6e69 0067 0000 7574 6c70 2065 6e69     tring...tuple in
   23514:	6564 2078 756f 2074 666f 7220 6e61 6567     dex out of range
   23524:	0000 0000 7461 7274 6269 7475 7365 6e20     ....attributes n
   23534:	746f 7320 7075 6f70 7472 6465 7920 7465     ot supported yet
   23544:	0000 0000 6f63 766e 7265 6973 6e6f 3d20     ....conversion =
   23554:	203d 7227 0027 0000                         = 'r'...

0002355c <str_format_obj>:
   2355c:	2734 0002 ffff 0003 41bd 0001 4d28 5f50     4'.......A..(MP_
   2356c:	424f 5f4a 5349 515f 5453 2852 6170 7474     OBJ_IS_QSTR(patt
   2357c:	7265 296e 7c20 207c 4d28 5f50 424f 5f4a     ern) || (MP_OBJ_
   2358c:	5349 4f5f 4a42 7028 7461 6574 6e72 2029     IS_OBJ(pattern) 
   2359c:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   235ac:	745f 292a 2828 6f76 6469 292a 6170 7474     _t*)((void*)patt
   235bc:	7265 296e 2d29 743e 7079 2d65 623e 6e69     ern))->type->bin
   235cc:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   235dc:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   235ec:	0000 0000 6f66 6d72 7461 6e20 6565 7364     ....format needs
   235fc:	6120 6420 6369 0074 6f66 6d72 7461 7320      a dict.format s
   2360c:	7274 6e69 2067 656e 6465 2073 6f6d 6572     tring needs more
   2361c:	6120 6772 6d75 6e65 7374 0000 2525 2063      arguments..%%c 
   2362c:	656e 6465 2073 6e69 2074 726f 6320 6168     needs int or cha
   2363c:	0072 0000 6e69 6574 6567 2072 656e 6465     r...integer need
   2364c:	6465 0000 6f66 6d72 7461 7320 7274 6e69     ed..format strin
   2365c:	2067 6964 6e64 7427 6320 6e6f 6576 7472     g didn't convert
   2366c:	6120 6c6c 6120 6772 6d75 6e65 7374 0000      all arguments..
   2367c:	6164 6174 2120 203d 554e 4c4c 0000 0000     data != NULL....

0002368c <str_replace_obj>:
   2368c:	2734 0002 0008 0006 48dd 0001               4'.......H..

00023698 <str_count_obj>:
   23698:	2734 0002 0008 0004 4bb5 0001               4'.......K..

000236a4 <str_lower_obj>:
   236a4:	25ec 0002 4e17 0001                         .%...N..

000236ac <str_upper_obj>:
   236ac:	25ec 0002 4e35 0001                         .%..5N..

000236b4 <str_isspace_obj>:
   236b4:	25ec 0002 4f55 0001                         .%..UO..

000236bc <str_isalpha_obj>:
   236bc:	25ec 0002 4f75 0001                         .%..uO..

000236c4 <str_isdigit_obj>:
   236c4:	25ec 0002 4f95 0001                         .%...O..

000236cc <str_isupper_obj>:
   236cc:	25ec 0002 4fb5 0001                         .%...O..

000236d4 <str_islower_obj>:
   236d4:	25ec 0002 4fd5 0001                         .%...O..

000236dc <str8_locals_dict_table>:
   236dc:	042a 0000 3418 0002 054e 0000 3424 0002     *....4..N...$4..
   236ec:	0472 0000 3430 0002 0552 0000 343c 0002     r...04..R...<4..
   236fc:	04b2 0000 333c 0002 057e 0000 3354 0002     ....<3..~...T3..
   2370c:	055a 0000 3370 0002 0586 0000 3448 0002     Z...p3......H4..
   2371c:	041a 0000 3468 0002 059a 0000 34bc 0002     ....h4.......4..
   2372c:	04d6 0000 34c8 0002 055e 0000 34d4 0002     .....4..^....4..
   2373c:	042e 0000 355c 0002 053a 0000 368c 0002     ....\5..:....6..
   2374c:	03f6 0000 3698 0002 04d2 0000 36a4 0002     .....6.......6..
   2375c:	05c2 0000 36ac 0002 049a 0000 36b4 0002     .....6.......6..
   2376c:	048a 0000 36bc 0002 048e 0000 36c4 0002     .....6.......6..
   2377c:	04a2 0000 36cc 0002 0496 0000 36d4 0002     .....6.......6..

0002378c <str8_locals_dict>:
   2378c:	1d40 0002 00b7 0000 0016 0000 36dc 0002     @............6..

0002379c <mp_type_str>:
   2379c:	3d18 0002 0000 0165 226d 0001 2321 0001     .=....e.m"..!#..
	...
   237b4:	26f7 0001 0000 0000 2a1d 0001 5593 0001     .&.......*...U..
   237c4:	0000 0000 4ff5 0001 0000 0000 0000 0000     .....O..........
   237d4:	378c 0002                                   .7..

000237d8 <mp_type_bytes>:
   237d8:	3d18 0002 0000 00f4 226d 0001 2471 0001     .=......m"..q$..
	...
   237f0:	26f7 0001 0000 0000 2a1d 0001 5647 0001     .&.......*..GV..
   23800:	0000 0000 4ff5 0001 0000 0000 0000 0000     .....O..........
   23810:	378c 0002 0000 0000                         .7......

00023818 <mp_const_empty_bytes_obj>:
   23818:	37d8 0002 0000 0000 0000 0000 3814 0002     .7...........8..
   23828:	6163 276e 2074 6f63 766e 7265 2074 6f74     can't convert to
   23838:	7320 7274 6920 706d 696c 6963 6c74 0079      str implicitly.

00023848 <__func__.7408>:
   23848:	7473 5f72 6f6a 6e69 0000 0000               str_join....

00023854 <__func__.7490>:
   23854:	7473 5f72 6966 646e 7265 0000               str_finder..

00023860 <__func__.7548>:
   23860:	7473 5f72 6e75 5f69 7473 6972 0070 0000     str_uni_strip...

00023870 <whitespace.7552>:
   23870:	0920 0d0a 0c0b 0000                          .......

00023878 <__func__.7638>:
   23878:	706d 6f5f 6a62 735f 7274 665f 726f 616d     mp_obj_str_forma
   23888:	5f74 6568 706c 7265 0000 0000               t_helper....

00023894 <__func__.7687>:
   23894:	706d 6f5f 6a62 735f 7274 665f 726f 616d     mp_obj_str_forma
   238a4:	0074 0000                                   t...

000238a8 <__func__.7699>:
   238a8:	7473 5f72 6f6d 7564 6f6c 665f 726f 616d     str_modulo_forma
   238b8:	0074 0000                                   t...

000238bc <__func__.7750>:
   238bc:	7473 5f72 6572 6c70 6361 0065               str_replace.

000238c8 <__func__.7777>:
   238c8:	7473 5f72 6f63 6e75 0074 0000 0028 0000     str_count...(...
   238d8:	202c 0000 002c 0000 0029 0000 706d 6f5f     , ..,...)...mp_o
   238e8:	6a62 675f 7465 745f 7079 2865 6573 666c     bj_get_type(self
   238f8:	695f 296e 3e2d 6567 6974 6574 2072 3d3d     _in)->getiter ==
   23908:	6d20 5f70 626f 5f6a 7574 6c70 5f65 6567      mp_obj_tuple_ge
   23918:	6974 6574 0072 0000 2e2e 2e2f 2f2e 7970     titer...../../py
   23928:	6f2f 6a62 7574 6c70 2e65 0063 4d28 5f50     /objtuple.c.(MP_
   23938:	424f 5f4a 5349 4f5f 4a42 7328 6c65 5f66     OBJ_IS_OBJ(self_
   23948:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   23958:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   23968:	7329 6c65 5f66 6e69 2929 3e2d 7974 6570     )self_in))->type
   23978:	3d20 203d 2628 706d 745f 7079 5f65 7574      == (&mp_type_tu
   23988:	6c70 2965 2929 0000                         ple)))..

00023990 <tuple_count_obj>:
   23990:	2658 0002 5b53 0001 4d28 5f50 424f 5f4a     X&..S[..(MP_OBJ_
   239a0:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   239b0:	2626 2820 2828 706d 6f5f 6a62 625f 7361     && (((mp_obj_bas
   239c0:	5f65 2a74 2829 7628 696f 2a64 6129 6772     e_t*)((void*)arg
   239d0:	5b73 5d30 2929 3e2d 7974 6570 3d20 203d     s[0]))->type == 
   239e0:	2628 706d 745f 7079 5f65 7574 6c70 2965     (&mp_type_tuple)
   239f0:	2929 0000                                   ))..

000239f4 <tuple_index_obj>:
   239f4:	2734 0002 0008 0004 5bb1 0001               4'.......[..

00023a00 <tuple_locals_dict_table>:
   23a00:	03f6 0000 3990 0002 0472 0000 39f4 0002     .....9..r....9..

00023a10 <tuple_locals_dict>:
   23a10:	1d40 0002 0017 0000 0002 0000 3a00 0002     @............:..

00023a20 <mp_type_tuple>:
   23a20:	3d18 0002 0000 016b 5709 0001 578d 0001     .=....k..W...W..
   23a30:	0000 0000 5901 0001 5991 0001 0000 0000     .....Y...Y......
   23a40:	5b15 0001 5d77 0001 0000 0000 0000 0000     .[..w]..........
	...
   23a58:	3a10 0002                                   .:..

00023a5c <mp_const_empty_tuple_obj>:
   23a5c:	3a20 0002 0000 0000 504d 4f5f 4a42 495f      :......MP_OBJ_I
   23a6c:	5f53 5954 4550 7328 6c65 5f66 6e69 202c     S_TYPE(self_in, 
   23a7c:	6d26 5f70 7974 6570 745f 7075 656c 0029     &mp_type_tuple).

00023a8c <__func__.7215>:
   23a8c:	7574 6c70 5f65 6d63 5f70 6568 706c 7265     tuple_cmp_helper
   23a9c:	0000 0000                                   ....

00023aa0 <__func__.7264>:
   23aa0:	7574 6c70 5f65 6f63 6e75 0074               tuple_count.

00023aac <__func__.7271>:
   23aac:	7574 6c70 5f65 6e69 6564 0078               tuple_index.

00023ab8 <__func__.7292>:
   23ab8:	706d 6f5f 6a62 745f 7075 656c 675f 7465     mp_obj_tuple_get
   23ac8:	0000 0000                                   ....

00023acc <__func__.7297>:
   23acc:	706d 6f5f 6a62 745f 7075 656c 645f 6c65     mp_obj_tuple_del
   23adc:	0000 0000 504d 4f5f 4a42 495f 5f53 5954     ....MP_OBJ_IS_TY
   23aec:	4550 2a28 7469 6d65 202c 6d26 5f70 7974     PE(*item, &mp_ty
   23afc:	6570 745f 7079 2965 0000 0000 2e2e 2e2f     pe_type)....../.
   23b0c:	2f2e 7970 6f2f 6a62 7974 6570 632e 0000     ./py/objtype.c..

00023b1c <native_base_init_wrapper_obj>:
   23b1c:	2734 0002 fffe 0003 5f15 0001 756e 5f6d     4'......._..num_
   23b2c:	616e 6974 6576 625f 7361 7365 3c20 3220     native_bases < 2
   23b3c:	0000 0000 6f6c 6b6f 7075 3e2d 6564 7473     ....lookup->dest
   23b4c:	305b 205d 3d3d 4d20 5f50 424f 5f4a 554e     [0] == MP_OBJ_NU
   23b5c:	4c4c 0000 6f6c 6b6f 7075 3e2d 6564 7473     LL..lookup->dest
   23b6c:	315b 205d 3d3d 4d20 5f50 424f 5f4a 554e     [1] == MP_OBJ_NU
   23b7c:	4c4c 0000 7974 6570 3e2d 6f6c 6163 736c     LL..type->locals
   23b8c:	645f 6369 2d74 623e 7361 2e65 7974 6570     _dict->base.type
   23b9c:	3d20 203d 6d26 5f70 7974 6570 645f 6369      == &mp_type_dic
   23bac:	0074 0000 253c 2073 626f 656a 7463 6120     t...<%s object a
   23bbc:	2074 7025 003e 0000 706d 6f5f 6a62 695f     t %p>...mp_obj_i
   23bcc:	5f73 6e69 7473 6e61 6563 745f 7079 2865     s_instance_type(
   23bdc:	6573 666c 0029 0000 5f5f 6e69 7469 5f5f     self)...__init__
   23bec:	2928 7320 6f68 6c75 2064 6572 7574 6e72     () should return
   23bfc:	4e20 6e6f 0065 0000                          None...

00023c04 <mp_unary_op_method_name>:
   23c04:	0000 0000 1803 0010 0014 0000               ............

00023c10 <mp_binary_op_method_name>:
   23c10:	0f19 170a 000c 0000 0000 0000 0000 1511     ................
	...
   23c28:	0000 2502 0000 0000 0000 0007 706d 6f5f     ...%........mp_o
   23c38:	6a62 695f 5f73 6e69 7473 6e61 6563 745f     bj_is_instance_t
   23c48:	7079 2865 706d 6f5f 6a62 675f 7465 745f     ype(mp_obj_get_t
   23c58:	7079 2865 6573 666c 695f 296e 0029 0000     ype(self_in))...
   23c68:	626f 656a 7463 6e20 746f 6320 6c61 616c     object not calla
   23c78:	6c62 0065 633c 616c 7373 2720 7125 3e27     ble.<class '%q'>
   23c88:	0000 0000 7974 6570 7420 6b61 7365 3120     ....type takes 1
   23c98:	6f20 2072 2033 7261 7567 656d 746e 0073      or 3 arguments.
   23ca8:	6163 6e6e 746f 6320 6572 7461 2065 6e69     cannot create in
   23cb8:	7473 6e61 6563 0000 504d 4f5f 4a42 495f     stance..MP_OBJ_I
   23cc8:	5f53 5954 4550 7328 6c65 5f66 6e69 202c     S_TYPE(self_in, 
   23cd8:	6d26 5f70 7974 6570 745f 7079 2965 0000     &mp_type_type)..
   23ce8:	6573 666c 3e2d 6f6c 6163 736c 645f 6369     self->locals_dic
   23cf8:	2d74 623e 7361 2e65 7974 6570 3d20 203d     t->base.type == 
   23d08:	6d26 5f70 7974 6570 645f 6369 0074 0000     &mp_type_dict...

00023d18 <mp_type_type>:
   23d18:	3d18 0002 0000 016c 6ae5 0001 6b11 0001     .=....l..j...k..
   23d28:	6b7d 0001 df05 0000 0000 0000 6bbd 0001     }k...........k..
	...
   23d54:	7974 6570 6920 6e73 7427 6120 206e 6361     type isn't an ac
   23d64:	6563 7470 6261 656c 6220 7361 2065 7974     ceptable base ty
   23d74:	6570 0000 756d 746c 7069 656c 6220 7361     pe..multiple bas
   23d84:	7365 6820 7661 2065 6e69 7473 6e61 6563     es have instance
   23d94:	6c20 7961 6f2d 7475 6320 6e6f 6c66 6369      lay-out conflic
   23da4:	0074 0000 733c 7075 7265 203a 0000 0000     t...<super: ....
   23db4:	202c 0000 003e 0000 504d 4f5f 4a42 495f     , ..>...MP_OBJ_I
   23dc4:	5f53 5954 4550 7328 6c65 5f66 6e69 202c     S_TYPE(self_in, 
   23dd4:	6d26 5f70 7974 6570 735f 7075 7265 0029     &mp_type_super).
   23de4:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   23df4:	6c65 2d66 743e 7079 2c65 2620 706d 745f     elf->type, &mp_t
   23e04:	7079 5f65 7974 6570 0029 0000 504d 4f5f     ype_type)...MP_O
   23e14:	4a42 495f 5f53 5954 4550 6928 6574 736d     BJ_IS_TYPE(items
   23e24:	695b 2c5d 2620 706d 745f 7079 5f65 7974     [i], &mp_type_ty
   23e34:	6570 0029                                   pe).

00023e38 <mp_type_super>:
   23e38:	3d18 0002 0000 0168 6eb9 0001 6f11 0001     .=....h..n...o..
	...
   23e54:	6f85 0001 0000 0000 0000 0000 0000 0000     .o..............
	...
   23e74:	7369 7573 6362 616c 7373 2928 6120 6772     issubclass() arg
   23e84:	3220 6d20 7375 2074 6562 6120 6320 616c      2 must be a cla
   23e94:	7373 6f20 2072 2061 7574 6c70 2065 666f     ss or a tuple of
   23ea4:	6320 616c 7373 7365 0000 0000 7369 7573      classes....issu
   23eb4:	6362 616c 7373 2928 6120 6772 3120 6d20     bclass() arg 1 m
   23ec4:	7375 2074 6562 6120 6320 616c 7373 0000     ust be a class..

00023ed4 <mp_builtin_issubclass_obj>:
   23ed4:	2658 0002 72ed 0001                         X&...r..

00023edc <mp_builtin_isinstance_obj>:
   23edc:	2658 0002 7335 0001 6573 666c 3d20 203d     X&..5s..self == 
   23eec:	6d26 5f70 7974 6570 735f 6174 6974 6d63     &mp_type_staticm
   23efc:	7465 6f68 2064 7c7c 7320 6c65 2066 3d3d     ethod || self ==
   23f0c:	2620 706d 745f 7079 5f65 6c63 7361 6d73      &mp_type_classm
   23f1c:	7465 6f68 0064 0000                         ethod...

00023f24 <mp_type_staticmethod>:
   23f24:	3d18 0002 0000 0162 0000 0000 7393 0001     .=....b......s..
	...

00023f60 <mp_type_classmethod>:
   23f60:	3d18 0002 0000 00f7 0000 0000 7393 0001     .=...........s..
	...

00023f9c <__func__.7751>:
   23f9c:	6e69 7473 6e61 6563 635f 756f 746e 6e5f     instance_count_n
   23fac:	7461 7669 5f65 6162 6573 0073               ative_bases.

00023fb8 <__func__.7769>:
   23fb8:	706d 6f5f 6a62 6e5f 7765 695f 736e 6174     mp_obj_new_insta
   23fc8:	636e 0065                                   nce.

00023fcc <__func__.7781>:
   23fcc:	706d 6f5f 6a62 635f 616c 7373 6c5f 6f6f     mp_obj_class_loo
   23fdc:	756b 0070                                   kup.

00023fe0 <__func__.7812>:
   23fe0:	706d 6f5f 6a62 695f 736e 6174 636e 5f65     mp_obj_instance_
   23ff0:	616d 656b 6e5f 7765 0000 0000               make_new....

00023ffc <__func__.7853>:
   23ffc:	706d 6f5f 6a62 695f 736e 6174 636e 5f65     mp_obj_instance_
   2400c:	6f6c 6461 615f 7474 0072 0000               load_attr...

00024018 <__func__.7946>:
   24018:	7974 6570 615f 7474 0072 0000               type_attr...

00024024 <__func__.7995>:
   24024:	7573 6570 5f72 7461 7274 0000               super_attr..

00024030 <__func__.8057>:
   24030:	7473 7461 6369 635f 616c 7373 6d5f 7465     static_class_met
   24040:	6f68 5f64 616d 656b 6e5f 7765 0000 0000     hod_make_new....
   24050:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   24060:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   24070:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   24080:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   24090:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   240a0:	5f65 697a 2970 2929 0000 0000 2e2e 2e2f     e_zip)))....../.
   240b0:	2f2e 7970 6f2f 6a62 697a 2e70 0063 0000     ./py/objzip.c...

000240c0 <mp_type_zip>:
   240c0:	3d18 0002 0000 0173 0000 0000 7461 0001     .=....s.....at..
	...
   240e4:	de77 0000 74d7 0001 0000 0000 0000 0000     w....t..........
	...

000240fc <__func__.7388>:
   240fc:	697a 5f70 7469 7265 656e 7478 0000 0000     zip_iternext....

0002410c <mp_op_getitem_obj>:
   2410c:	2658 0002 757d 0001                         X&..}u..

00024114 <mp_op_setitem_obj>:
   24114:	26c4 0002 75a5 0001                         .&...u..

0002411c <mp_op_delitem_obj>:
   2411c:	2658 0002 75cf 0001                         X&...u..

00024124 <mp_op_contains_obj>:
   24124:	2658 0002 75f7 0001 626f 656a 7463 6e20     X&...u..object n
   24134:	746f 6920 206e 6573 7571 6e65 6563 0000     ot in sequence..
   24144:	6162 2064 7974 6570 6f63 6564 0000 0000     bad typecode....
   24154:	702e 0079 6874 7369 6e5f 6d61 5f65 2071     .py.this_name_q 
   24164:	3d21 4d20 5f50 424f 5f4a 554e 4c4c 0000     != MP_OBJ_NULL..
   24174:	2e2e 2e2f 2f2e 7970 622f 6975 746c 6e69     ../../py/builtin
   24184:	6d69 6f70 7472 632e 0000 0000 6163 6e6e     import.c....cann
   24194:	746f 7020 7265 6f66 6d72 7220 6c65 7461     ot perform relat
   241a4:	7669 2065 6d69 6f70 7472 0000 6f6d 7564     ive import..modu
   241b4:	656c 6e20 746f 6620 756f 646e 0000 0000     le not found....
   241c4:	5f5f 6e69 7469 5f5f 702e 0079               __init__.py.

000241d0 <mp_builtin___import___obj>:
   241d0:	2734 0002 000a 0002 866f 0001               4'......o...

000241dc <__func__.8167>:
   241dc:	706d 625f 6975 746c 6e69 5f5f 695f 706d     mp_builtin___imp
   241ec:	726f 5f74 005f 0000                         ort__...

000241f4 <mp_builtin_eval_obj>:
   241f4:	2734 0002 0006 0002 8c99 0001               4'..........

00024200 <mp_builtin_exec_obj>:
   24200:	2734 0002 0006 0002 8cb7 0001 2032 3d3c     4'..........2 <=
   24210:	6e20 615f 6772 0073 2e2e 2e2f 2f2e 7970      n_args.../../py
   24220:	6d2f 646f 7562 6c69 6974 736e 632e 0000     /modbuiltins.c..

00024230 <mp_builtin___build_class___obj>:
   24230:	2734 0002 fffe 0005 8dd9 0001               4'..........

0002423c <mp_builtin_abs_obj>:
   2423c:	25ec 0002 8e91 0001                         .%......

00024244 <mp_builtin_all_obj>:
   24244:	25ec 0002 8eab 0001                         .%......

0002424c <mp_builtin_any_obj>:
   2424c:	25ec 0002 8ef9 0001                         .%......

00024254 <mp_builtin_bin_obj>:
   24254:	25ec 0002 8f41 0001                         .%..A...

0002425c <mp_builtin_callable_obj>:
   2425c:	25ec 0002 8f69 0001 6863 2872 2029 7261     .%..i...chr() ar
   2426c:	2067 6f6e 2074 6e69 7220 6e61 6567 3228     g not in range(2
   2427c:	3635 0029                                   56).

00024280 <mp_builtin_chr_obj>:
   24280:	25ec 0002 8f95 0001                         .%......

00024288 <mp_builtin_dir_obj>:
   24288:	2734 0002 0002 0000 8fd9 0001               4'..........

00024294 <mp_builtin_divmod_obj>:
   24294:	2658 0002 9091 0001                         X&......

0002429c <mp_builtin_hash_obj>:
   2429c:	25ec 0002 90af 0001                         .%......

000242a4 <mp_builtin_hex_obj>:
   242a4:	25ec 0002 90c9 0001                         .%......

000242ac <mp_builtin_iter_obj>:
   242ac:	25ec 0002 90e5 0001                         .%......

000242b4 <mp_builtin_next_obj>:
   242b4:	25ec 0002 90ff 0001                         .%......

000242bc <mp_builtin_oct_obj>:
   242bc:	25ec 0002 9131 0001 726f 2064 7865 6570     .%..1...ord expe
   242cc:	7463 2073 2061 6863 7261 6361 6574 0072     cts a character.

000242dc <mp_builtin_ord_obj>:
   242dc:	25ec 0002 914d 0001 2d33 7261 2067 6f70     .%..M...3-arg po
   242ec:	2877 2029 6f6e 2074 7573 7070 726f 6574     w() not supporte
   242fc:	0064 0000                                   d...

00024300 <mp_builtin_pow_obj>:
   24300:	2734 0002 0006 0004 9189 0001               4'..........

0002430c <mp_builtin_print_obj>:
   2430c:	2734 0002 ffff 0001 91c9 0001 000a 0000     4'..............

0002431c <mp_builtin___repl_print___obj>:
   2431c:	25ec 0002 927d 0001                         .%..}...

00024324 <mp_builtin_repr_obj>:
   24324:	25ec 0002 92b5 0001                         .%......

0002432c <mp_builtin_round_obj>:
   2432c:	2734 0002 0004 0002 92f5 0001               4'..........

00024338 <mp_builtin_sum_obj>:
   24338:	2734 0002 0004 0002 9355 0001 756d 7473     4'......U...must
   24348:	7520 6573 6b20 7965 6f77 6472 6120 6772      use keyword arg
   24358:	6d75 6e65 2074 6f66 2072 656b 2079 7566     ument for key fu
   24368:	636e 6974 6e6f 0000                         nction..

00024370 <mp_builtin_sorted_obj>:
   24370:	2734 0002 ffff 0003 93ab 0001               4'..........

0002437c <mp_builtin_getattr_obj>:
   2437c:	2734 0002 0006 0004 9449 0001               4'......I...

00024388 <mp_builtin_setattr_obj>:
   24388:	26c4 0002 9489 0001                         .&......

00024390 <mp_builtin_hasattr_obj>:
   24390:	2658 0002 94b5 0001                         X&......

00024398 <mp_builtin_globals_obj>:
   24398:	2580 0002 94f1 0001                         .%......

000243a0 <mp_builtin_locals_obj>:
   243a0:	2580 0002 94ff 0001                         .%......

000243a8 <mp_builtin_id_obj>:
   243a8:	25ec 0002 dce9 0000                         .%......

000243b0 <mp_builtin_len_obj>:
   243b0:	25ec 0002 dd33 0000                         .%..3...

000243b8 <mp_module_builtins_globals_table>:
   243b8:	0072 0000 03ca 0000 0012 0000 4230 0002     r...........0B..
   243c8:	004a 0000 41d0 0002 0086 0000 431c 0002     J....A.......C..
   243d8:	03be 0000 1858 0002 03d2 0000 37d8 0002     ....X........7..
   243e8:	0402 0000 1d40 0002 0482 0000 2bbc 0002     ....@........+..
   243f8:	04c2 0000 2e28 0002 04da 0000 2f84 0002     ....(......../..
   24408:	04fa 0000 304c 0002 0532 0000 3170 0002     ....L0..2...p1..
   24418:	0596 0000 379c 0002 05a2 0000 3e38 0002     .....7......8>..
   24428:	05ae 0000 3a20 0002 05b2 0000 3d18 0002     .... :.......=..
   24438:	05ce 0000 40c0 0002 03de 0000 3f60 0002     .....@......`?..
   24448:	058a 0000 3f24 0002 02f2 0000 31ec 0002     ....$?.......1..
   24458:	0396 0000 423c 0002 03a2 0000 4244 0002     ....<B......DB..
   24468:	03aa 0000 424c 0002 03b6 0000 4254 0002     ....LB......TB..
   24478:	03d6 0000 425c 0002 03da 0000 4280 0002     ....\B.......B..
   24488:	040a 0000 4288 0002 040e 0000 4294 0002     .....B.......B..
   24498:	041e 0000 41f4 0002 0422 0000 4200 0002     .....A.."....B..
   244a8:	044a 0000 437c 0002 056a 0000 4388 0002     J...|C..j....C..
   244b8:	044e 0000 4398 0002 0456 0000 4390 0002     N....C..V....C..
   244c8:	045a 0000 429c 0002 0466 0000 42a4 0002     Z....B..f....B..
   244d8:	046e 0000 43a8 0002 0492 0000 3edc 0002     n....C.......>..
   244e8:	049e 0000 3ed4 0002 04aa 0000 42ac 0002     .....>.......B..
   244f8:	04be 0000 43b0 0002 04ca 0000 43a0 0002     .....C.......C..
   24508:	04f6 0000 42b4 0002 04fe 0000 42bc 0002     .....B.......B..
   24518:	050e 0000 42dc 0002 0526 0000 4300 0002     .....B..&....C..
   24528:	052a 0000 430c 0002 053e 0000 4324 0002     *....C..>...$C..
   24538:	0556 0000 432c 0002 057a 0000 4370 0002     V...,C..z...pC..
   24548:	059e 0000 4338 0002 02e6 0000 1e44 0002     ....8C......D...
   24558:	02da 0000 1fac 0002 02de 0000 2060 0002     ............` ..
   24568:	02e2 0000 209c 0002 02ee 0000 20d8 0002     ..... ....... ..
   24578:	02f6 0000 1f34 0002 02fa 0000 1ef8 0002     ....4...........
   24588:	031e 0000 2114 0002 0322 0000 236c 0002     .....!.."...l#..
   24598:	0326 0000 218c 0002 032e 0000 1ebc 0002     &....!..........
   245a8:	032a 0000 21c8 0002 0336 0000 2150 0002     *....!..6...P!..
   245b8:	033e 0000 2204 0002 0342 0000 2240 0002     >...."..B...@"..
   245c8:	034a 0000 22f4 0002 0352 0000 227c 0002     J...."..R...|"..
   245d8:	035a 0000 1fe8 0002 0372 0000 22b8 0002     Z.......r...."..
   245e8:	037a 0000 1f70 0002 037e 0000 2330 0002     z...p...~...0#..
   245f8:	0382 0000 1e80 0002 0386 0000 23a8 0002     .............#..
   24608:	038a 0000 23e4 0002 0392 0000 2024 0002     .....#......$ ..

00024618 <mp_module_builtins_globals>:
   24618:	1d40 0002 0267 0000 004c 0000 43b8 0002     @...g...L....C..

00024628 <mp_module_builtins>:
   24628:	2fe4 0002 4618 0002                         ./...F..

00024630 <__func__.8086>:
   24630:	706d 625f 6975 746c 6e69 5f5f 625f 6975     mp_builtin___bui
   24640:	646c 635f 616c 7373 5f5f 0000               ld_class__..

0002464c <allowed_args.8198>:
   2464c:	0159 0203 00b6 0000 0105 0203 00ba 0000     Y...............

0002465c <mp_micropython_opt_level_obj>:
   2465c:	2734 0002 0002 0000 950d 0001               4'..........

00024668 <mp_micropython_heap_lock_obj>:
   24668:	2580 0002 9551 0001                         .%..Q...

00024670 <mp_micropython_heap_unlock_obj>:
   24670:	2580 0002 9565 0001                         .%..e...

00024678 <mp_module_micropython_globals_table>:
   24678:	0072 0000 04e2 0000 03ee 0000 1800 0002     r...............
   24688:	050a 0000 465c 0002 045e 0000 4668 0002     ....\F..^...hF..
   24698:	0462 0000 4670 0002                         b...pF..

000246a0 <mp_module_micropython_globals>:
   246a0:	1d40 0002 002f 0000 0005 0000 4678 0002     @.../.......xF..

000246b0 <mp_module_micropython>:
   246b0:	2fe4 0002 46a0 0002                         ./...F..

000246b8 <__func__.7956>:
   246b8:	706d 655f 6578 7563 6574 625f 7479 6365     mp_execute_bytec
   246c8:	646f 0065 6f6c 6163 206c 6176 6972 6261     ode.local variab
   246d8:	656c 7220 6665 7265 6e65 6563 2064 6562     le referenced be
   246e8:	6f66 6572 6120 7373 6769 6d6e 6e65 0074     fore assignment.
   246f8:	706d 6f5f 6a62 695f 5f73 7865 6563 7470     mp_obj_is_except
   24708:	6f69 5f6e 6e69 7473 6e61 6563 5428 504f     ion_instance(TOP
   24718:	2928 0029 2e2e 2e2f 2f2e 7970 762f 2e6d     ()).../../py/vm.
   24728:	0063 0000 7865 5f63 7073 3e20 203d 7865     c...exc_sp >= ex
   24738:	5f63 7473 6361 006b 7563 7272 6e65 6c74     c_stack.currentl
   24748:	5f79 6e69 655f 6378 7065 5f74 6c62 636f     y_in_except_bloc
   24758:	006b 0000 7865 5f63 7073 3d20 203d 7865     k...exc_sp == ex
   24768:	5f63 7473 6361 206b 202d 0031 6572 5f74     c_stack - 1.ret_
   24778:	696b 646e 3d20 203d 504d 565f 5f4d 4552     kind == MP_VM_RE
   24788:	5554 4e52 455f 4358 5045 4954 4e4f 0000     TURN_EXCEPTION..
   24798:	7962 6574 6320 646f 2065 6f6e 2074 6d69     byte code not im
   247a8:	6c70 6d65 6e65 6574 0064 0000 6f6e 6120     plemented...no a
   247b8:	7463 7669 2065 7865 6563 7470 6f69 206e     ctive exception 
   247c8:	6f74 7220 7265 6961 6573 0000 7566 636e     to reraise..func
   247d8:	6974 6e6f 6720 746f 6d20 6c75 6974 6c70     tion got multipl
   247e8:	2065 6176 756c 7365 6620 726f 6120 6772     e values for arg
   247f8:	6d75 6e65 2074 2527 2771 0000 6e75 7865     ument '%q'..unex
   24808:	6570 7463 6465 6b20 7965 6f77 6472 6120     pected keyword a
   24818:	6772 6d75 6e65 0074 7566 636e 6974 6e6f     rgument.function
   24828:	6d20 7369 6973 676e 7220 7165 6975 6572      missing require
   24838:	2064 6f70 6973 6974 6e6f 6c61 6120 6772     d positional arg
   24848:	6d75 6e65 2074 2523 0064 0000 7566 636e     ument #%d...func
   24858:	6974 6e6f 6d20 7369 6973 676e 7220 7165     tion missing req
   24868:	6975 6572 2064 656b 7779 726f 2064 7261     uired keyword ar
   24878:	7567 656d 746e 2720 7125 0027 7566 636e     gument '%q'.func
   24888:	6974 6e6f 6d20 7369 6973 676e 6b20 7965     tion missing key
   24898:	6f77 6472 6f2d 6c6e 2079 7261 7567 656d     word-only argume
   248a8:	746e 0000 6669 0000 6877 6c69 0065 0000     nt..if..while...
   248b8:	6f66 0072 7274 0079 6977 6874 0000 0000     for.try.with....
   248c8:	6564 0066 6c63 7361 0073 0000 0020 0000     def.class... ...
   248d8:	250a 0073 000a 0000                         .%s.....

000248e0 <import_str.7333>:
   248e0:	6d69 6f70 7472 0020                         import .

000248e8 <mp_builtin_open_obj>:
   248e8:	2734 0002 ffff 0003 b44d 0001 7341 6573     4'......M...Asse
   248f8:	7472 6f69 206e 2527 2773 6620 6961 656c     rtion '%s' faile
   24908:	2c64 6120 2074 6966 656c 2520 3a73 6425     d, at file %s:%d
   24918:	000a 0000 7341 6573 7472 6f69 206e 6166     ....Assertion fa
   24928:	6c69 6465 0000 0000 6950 206e 616d 2070     iled....Pin map 
   24938:	6170 7373 6465 7020 6e69 0020 6950 2e6e     passed pin .Pin.
   24948:	616d 7070 7265 6420 6469 276e 2074 6572     mapper didn't re
   24958:	7574 6e72 6120 5020 6e69 6f20 6a62 6365     turn a Pin objec
   24968:	0074 0000 6950 2e6e 616d 7070 7265 6d20     t...Pin.mapper m
   24978:	7061 2073 0000 0000 7420 206f 0000 0000     aps .... to ....
   24988:	6950 2e6e 616d 5f70 6964 7463 6d20 7061     Pin.map_dict map
   24998:	2073 0000 6950 2e6e 6f62 7261 2064 616d     s ..Pin.board ma
   249a8:	7370 0020 6950 286e 7325 2029 6f64 7365     ps .Pin(%s) does
   249b8:	276e 2074 7865 7369 0074 0000 6950 286e     n't exist...Pin(
   249c8:	6950 2e6e 7063 2e75 7125 202c 6f6d 6564     Pin.cpu.%q, mode
   249d8:	503d 6e69 002e 0000 4e41 4c41 474f 0029     =Pin....ANALOG).
   249e8:	202c 7570 6c6c 503d 6e69 252e 0071 0000     , pull=Pin.%q...
   249f8:	202c 6661 253d 2964 0000 0000 202c 6661     , af=%d)...., af
   24a08:	503d 6e69 252e 2971 0000 0000 0029 0000     =Pin.%q)....)...

00024a18 <pin_mapper_fun_obj>:
   24a18:	2734 0002 0004 0002 bd15 0001               4'..........

00024a24 <pin_mapper_obj>:
   24a24:	3f60 0002 4a18 0002                         `?...J..

00024a2c <pin_map_dict_fun_obj>:
   24a2c:	2734 0002 0004 0002 bd4d 0001               4'......M...

00024a38 <pin_map_dict_obj>:
   24a38:	3f60 0002 4a2c 0002                         `?..,J..

00024a40 <pin_af_list_obj>:
   24a40:	25ec 0002 bd85 0001                         .%......

00024a48 <pin_debug_fun_obj>:
   24a48:	2734 0002 0004 0002 bdd3 0001               4'..........

00024a54 <pin_debug_obj>:
   24a54:	3f60 0002 4a48 0002 6e69 6176 696c 2064     `?..HJ..invalid 
   24a64:	6970 206e 6964 6572 7463 6f69 3a6e 2520     pin direction: %
   24a74:	0064 0000 6e69 6176 696c 2064 6970 206e     d...invalid pin 
   24a84:	7974 6570 203a 6425 0000 0000 6e69 6176     type: %d....inva
   24a94:	696c 2064 6970 206e 7264 7669 3a65 2520     lid pin drive: %
   24aa4:	0064 0000 6e69 6176 696c 2064 6970 206e     d...invalid pin 
   24ab4:	6661 203a 6425 0000                         af: %d..

00024abc <pin_init_obj>:
   24abc:	2734 0002 ffff 0003 bfb1 0001               4'..........

00024ac8 <pin_value_obj>:
   24ac8:	2734 0002 0004 0002 bfd9 0001               4'..........

00024ad4 <pin_off_obj>:
   24ad4:	25ec 0002 bfff 0001                         .%......

00024adc <pin_on_obj>:
   24adc:	25ec 0002 c02d 0001                         .%..-...

00024ae4 <pin_irq_obj>:
   24ae4:	2734 0002 ffff 0003 c05d 0001               4'......]...

00024af0 <pin_name_obj>:
   24af0:	25ec 0002 c07d 0001                         .%..}...

00024af8 <pin_names_obj>:
   24af8:	25ec 0002 c09f 0001                         .%......

00024b00 <pin_port_obj>:
   24b00:	25ec 0002 c119 0001                         .%......

00024b08 <pin_pin_obj>:
   24b08:	25ec 0002 c13b 0001                         .%..;...

00024b10 <pin_gpio_obj>:
   24b10:	25ec 0002 c15f 0001                         .%.._...

00024b18 <pin_dir_obj>:
   24b18:	25ec 0002 c181 0001                         .%......

00024b20 <pin_type_obj>:
   24b20:	25ec 0002 c1ab 0001                         .%......

00024b28 <pin_af_obj>:
   24b28:	25ec 0002 c1db 0001                         .%......

00024b30 <pin_locals_dict_table>:
   24b30:	047a 0000 4abc 0002 05c6 0000 4ac8 0002     z....J.......J..
   24b40:	0502 0000 4ad4 0002 0506 0000 4adc 0002     .....J.......J..
   24b50:	0486 0000 4ae4 0002 04ce 0000 4ad4 0002     .....J.......J..
   24b60:	046a 0000 4adc 0002 04ee 0000 4af0 0002     j....J.......J..
   24b70:	04f2 0000 4af8 0002 039e 0000 4a40 0002     .....J......@J..
   24b80:	0522 0000 4b00 0002 0516 0000 4b08 0002     "....K.......K..
   24b90:	0452 0000 4b10 0002 040a 0000 4b18 0002     R....K.......K..
   24ba0:	05b2 0000 4b20 0002 039a 0000 4b28 0002     .... K......(K..
   24bb0:	04de 0000 4a24 0002 0402 0000 4a38 0002     ....$J......8J..
   24bc0:	03fe 0000 4a54 0002 03ba 0000 4d14 0002     ....TJ.......M..
   24bd0:	0306 0000 0001 0000 0356 0000 0003 0000     ........V.......
   24be0:	034e 0000 0013 0000 02ce 0000 0005 0000     N...............
   24bf0:	02d6 0000 0001 0000 0366 0000 0015 0000     ........f.......
   24c00:	035e 0000 0019 0000 0362 0000 0011 0000     ^.......b.......
   24c10:	031a 0000 0009 0000 030e 0000 0001 0000     ................
   24c20:	030a 0000 0003 0000 0312 0000 000d 0000     ................
   24c30:	0316 0000 0005 0000 0332 0000 0003 0000     ........2.......
   24c40:	033a 0000 0005 0000 0302 0000 00cd 0000     :...............

00024c50 <pin_locals_dict>:
   24c50:	1d40 0002 0127 0000 0024 0000 4b30 0002     @...'...$...0K..

00024c60 <pin_mod>:
   24c60:	3d18 0002 0000 00db bad9 0001 bc2d 0001     .=..........-...
   24c70:	bc95 0001 0000 0000 0000 0000 0000 0000     ................
	...
   24c98:	4c50 0002                                   PL..

00024c9c <allowed_args.8431>:
   24c9c:	0139 0102 0000 0000 014b 0003 3108 0002     9.......K....1..
   24cac:	0104 0003 0000 0000 00e6 0002 ffff ffff     ................
   24cbc:	0171 0203 0000 0000 00e9 0202 ffff ffff     q...............
   24ccc:	503c 6e69 252e 3e71 0000 0000               <Pin.%q>....

00024cd8 <pin_cpu_pins_obj_type>:
   24cd8:	3d18 0002 0000 00fe c20d 0001 0000 0000     .=..............
	...
   24d10:	5790 0002                                   .W..

00024d14 <pin_board_pins_obj_type>:
   24d14:	3d18 0002 0000 00ee c20d 0001 0000 0000     .=..............
	...
   24d4c:	5628 0002 4449 203a 4c43 5341 3d53 3025     (V..ID: CLASS=%0
   24d5c:	7832 202c 2576 3230 2e75 3025 7532 0000     2x, v%02u.%02u..
   24d6c:	7525 4820 007a 0000 7371 7274 0a3a 2020     %u Hz...qstr:.  
   24d7c:	5f6e 6f70 6c6f 253d 0a75 2020 5f6e 7371     n_pool=%u.  n_qs
   24d8c:	7274 253d 0a75 2020 5f6e 7473 5f72 6164     tr=%u.  n_str_da
   24d9c:	6174 625f 7479 7365 253d 0a75 2020 5f6e     ta_bytes=%u.  n_
   24dac:	6f74 6174 5f6c 7962 6574 3d73 7525 000a     total_bytes=%u..
   24dbc:	4347 003a 2020 7525 7420 746f 6c61 000a     GC:.  %u total..
   24dcc:	2020 7525 3a20 2520 0a75 0000 2020 3d31       %u : %u...  1=
   24ddc:	7525 3220 253d 2075 3d6d 7525 000a 0000     %u 2=%u m=%u....

00024dec <machine_info_obj>:
   24dec:	2734 0002 0002 0000 c3cd 0001               4'..........

00024df8 <machine_unique_id_obj>:
   24df8:	2580 0002 c495 0001                         .%......

00024e00 <machine_reset_obj>:
   24e00:	2580 0002 c4b9 0001                         .%......

00024e08 <machine_soft_reset_obj>:
   24e08:	2580 0002 c4cd 0001                         .%......

00024e10 <machine_bootloader_obj>:
   24e10:	2580 0002 c4f1 0001 7266 7165 6320 6168     .%......freq cha
   24e20:	676e 2065 6f6e 2074 7573 7070 726f 6574     nge not supporte
   24e30:	0064 0000                                   d...

00024e34 <machine_freq_obj>:
   24e34:	2734 0002 0008 0000 c4f7 0001               4'..........

00024e40 <machine_sleep_obj>:
   24e40:	2580 0002 c539 0001                         .%..9...

00024e48 <machine_deepsleep_obj>:
   24e48:	2580 0002 c54d 0001                         .%..M...

00024e50 <machine_reset_cause_obj>:
   24e50:	2580 0002 c561 0001                         .%..a...

00024e58 <machine_module_globals_table>:
   24e58:	0072 0000 05b6 0000 0476 0000 4dec 0002     r.......v....M..
   24e68:	05ba 0000 4df8 0002 0542 0000 4e00 0002     .....M..B....N..
   24e78:	0572 0000 4e08 0002 03c2 0000 4e10 0002     r....N.......N..
   24e88:	0432 0000 4e34 0002 0546 0000 4e50 0002     2...4N..F...PN..
   24e98:	036e 0000 4c60 0002 036a 0000 0003 0000     n...`L..j.......
   24ea8:	02fe 0000 0005 0000 038e 0000 0007 0000     ................
   24eb8:	02ea 0000 0009 0000 0376 0000 0001 0000     ........v.......

00024ec8 <machine_module_globals>:
   24ec8:	1d40 0002 0077 0000 000e 0000 4e58 0002     @...w.......XN..

00024ed8 <machine_module>:
   24ed8:	2fe4 0002 4ec8 0002                         ./...N..

00024ee0 <pin_PB6_af>:
   24ee0:	007d 0000 0504 0000 0001 0000 1804 0001     }...............
   24ef0:	0091 0000 0707 0000 0000 0000 1807 0001     ................

00024f00 <pin_PB7_af>:
   24f00:	007e 0000 0504 0000 0002 0000 1c04 0001     ~...............
   24f10:	0092 0000 0707 0000 0001 0000 1c07 0001     ................

00024f20 <pin_PF4_af>:
   24f20:	0085 0000 0505 0001 0000 0000 1005 0005     ................
   24f30:	008f 0000 0406 00ff 0004 0000 1006 0005     ................
   24f40:	0095 0000 0707 0002 0000 0000 1007 0005     ................
   24f50:	00a3 0000 0b08 0000 0000 0000 1008 0005     ................

00024f60 <pin_PE3_af>:
   24f60:	0066 0000 0000 00ff 0000 0000 ffff ffff     f...............

00024f70 <pin_PE2_af>:
   24f70:	0067 0000 0000 00ff 0001 0000 ffff ffff     g...............

00024f80 <pin_PE1_af>:
   24f80:	006a 0000 0000 00ff 0002 0000 ffff ffff     j...............

00024f90 <pin_PE0_af>:
   24f90:	006b 0000 0000 00ff 0003 0000 ffff ffff     k...............

00024fa0 <pin_PD7_af>:
   24fa0:	00b2 0000 0607 0005 0001 0000 1c07 0003     ................
   24fb0:	008e 0000 0908 00ff 0000 0000 1c08 0003     ................

00024fc0 <pin_PC7_af>:
   24fc0:	00aa 0000 0607 0001 0001 0000 1c07 0002     ................
   24fd0:	00a5 0000 0b08 0000 0001 0000 1c08 0002     ................

00024fe0 <pin_PC6_af>:
   24fe0:	00a9 0000 0607 0001 0000 0000 1807 0002     ................
   24ff0:	00a3 0000 0b08 0000 0000 0000 1808 0002     ................

00025000 <pin_PC5_af>:
   25000:	0084 0000 0504 0000 0008 0000 1404 0002     ................
   25010:	00a8 0000 0607 0000 0001 0000 1407 0002     ................
   25020:	009f 0000 0108 0001 0003 0000 1408 0002     ................

00025030 <pin_PC4_af>:
   25030:	0083 0000 0504 0000 0007 0000 1004 0002     ................
   25040:	0090 0000 0406 00ff 0005 0000 1006 0002     ................
   25050:	00a7 0000 0607 0000 0000 0000 1007 0002     ................
   25060:	00a0 0000 0108 0001 0002 0000 1008 0002     ................

00025070 <pin_PA6_af>:
   25070:	0074 0000 0303 0001 0001 0000 1803 0000     t...............
   25080:	0088 0000 0505 0001 0003 0000 1805 0000     ................

00025090 <pin_PA7_af>:
   25090:	0075 0000 0303 0001 0000 0000 1c03 0000     u...............
   250a0:	0089 0000 0505 0001 0004 0000 1c05 0000     ................

000250b0 <pin_PF0_af>:
   250b0:	00a0 0000 0101 0001 0002 0000 0001 0005     ................
   250c0:	008a 0000 0505 0001 0005 0000 0005 0005     ................
   250d0:	0091 0000 0707 0000 0000 0000 0007 0005     ................
   250e0:	008e 0000 0908 00ff 0000 0000 0008 0005     ................

000250f0 <pin_PF1_af>:
   250f0:	009f 0000 0101 0001 0003 0000 0401 0005     ................
   25100:	008b 0000 0505 0001 0006 0000 0405 0005     ................
   25110:	0092 0000 0707 0000 0001 0000 0407 0005     ................
   25120:	009e 0000 0d0e 00ff 0002 0000 040e 0005     ................

00025130 <pin_PF2_af>:
   25130:	007c 0000 0504 0000 0000 0000 0804 0005     |...............
   25140:	008c 0000 0505 0001 0007 0000 0805 0005     ................
   25150:	0093 0000 0707 0001 0000 0000 0807 0005     ................
   25160:	009d 0000 0d0e 00ff 0001 0000 080e 0005     ................

00025170 <pin_PF3_af>:
   25170:	008d 0000 0505 0001 0008 0000 0c05 0005     ................
   25180:	0094 0000 0707 0001 0001 0000 0c07 0005     ................

00025190 <pin_PD4_af>:
   25190:	00a1 0000 0b00 0000 0002 0000 ffff ffff     ................
   251a0:	00af 0000 0607 0004 0000 0000 1007 0003     ................

000251b0 <pin_PD5_af>:
   251b0:	00a2 0000 0b00 0000 0003 0000 ffff ffff     ................
   251c0:	00b0 0000 0607 0004 0001 0000 1407 0003     ................

000251d0 <pin_PB0_af>:
   251d0:	00a4 0000 0b00 0000 0004 0000 ffff ffff     ................
   251e0:	0095 0000 0707 0002 0000 0000 0007 0001     ................

000251f0 <pin_PB1_af>:
   251f0:	00a6 0000 0b00 0000 0005 0000 ffff ffff     ................
   25200:	0096 0000 0707 0002 0001 0000 0407 0001     ................

00025210 <pin_PB2_af>:
   25210:	0072 0000 0303 0000 0001 0000 0803 0001     r...............
   25220:	0097 0000 0707 0003 0000 0000 0807 0001     ................

00025230 <pin_PB3_af>:
   25230:	0073 0000 0303 0000 0000 0000 0c03 0001     s...............
   25240:	0098 0000 0707 0003 0001 0000 0c07 0001     ................

00025250 <pin_PC3_af>:
   25250:	007a 0000 0801 00ff 0001 0000 0c01 0002     z...............
   25260:	009c 0000 0707 0005 0001 0000 0c07 0002     ................

00025270 <pin_PC2_af>:
   25270:	0079 0000 0801 00ff 0004 0000 0801 0002     y...............
   25280:	009b 0000 0707 0005 0000 0000 0807 0002     ................

00025290 <pin_PC1_af>:
   25290:	007b 0000 0801 00ff 0005 0000 0401 0002     {...............
   252a0:	009a 0000 0707 0004 0001 0000 0407 0002     ................

000252b0 <pin_PC0_af>:
   252b0:	0078 0000 0801 00ff 0003 0000 0001 0002     x...............
   252c0:	0099 0000 0707 0004 0000 0000 0007 0002     ................

000252d0 <pin_PD6_af>:
   252d0:	007c 0000 0504 0000 0000 0000 1804 0003     |...............
   252e0:	00b1 0000 0607 0005 0000 0000 1807 0003     ................

000252f0 <pin_PB5_af>:
   252f0:	0069 0000 0000 00ff 000b 0000 ffff ffff     i...............
   25300:	0080 0000 0504 0000 0004 0000 1404 0001     ................
   25310:	0094 0000 0707 0001 0001 0000 1407 0001     ................

00025320 <pin_PB4_af>:
   25320:	0068 0000 0000 00ff 000a 0000 ffff ffff     h...............
   25330:	007f 0000 0504 0000 0003 0000 1004 0001     ................
   25340:	0093 0000 0707 0001 0000 0000 1007 0001     ................

00025350 <pin_PE4_af>:
   25350:	0071 0000 0000 00ff 0009 0000 ffff ffff     q...............
   25360:	0076 0000 0303 0002 0001 0000 1003 0004     v...............
   25370:	0081 0000 0504 0000 0005 0000 1004 0004     ................
   25380:	0088 0000 0505 0001 0003 0000 1005 0004     ................

00025390 <pin_PE5_af>:
   25390:	0070 0000 0000 00ff 0008 0000 ffff ffff     p...............
   253a0:	0082 0000 0504 0000 0006 0000 1404 0004     ................
   253b0:	0089 0000 0505 0001 0004 0000 1405 0004     ................

000253c0 <pin_PD0_af>:
   253c0:	006f 0000 0000 00ff 0007 0000 ffff ffff     o...............
   253d0:	0077 0000 0303 0003 0001 0000 0003 0003     w...............
   253e0:	0083 0000 0504 0000 0007 0000 0004 0003     ................
   253f0:	0086 0000 0505 0001 0001 0000 0005 0003     ................
   25400:	00ab 0000 0607 0002 0000 0000 0007 0003     ................

00025410 <pin_PD1_af>:
   25410:	006e 0000 0000 00ff 0006 0000 ffff ffff     n...............
   25420:	0084 0000 0504 0000 0008 0000 0404 0003     ................
   25430:	0087 0000 0505 0001 0002 0000 0405 0003     ................
   25440:	00ac 0000 0607 0002 0001 0000 0407 0003     ................

00025450 <pin_PD2_af>:
   25450:	006d 0000 0000 00ff 0005 0000 ffff ffff     m...............
   25460:	007c 0000 0504 0000 0000 0000 0804 0003     |...............
   25470:	00ad 0000 0607 0003 0000 0000 0807 0003     ................
   25480:	00a3 0000 0b08 0000 0000 0000 0808 0003     ................

00025490 <pin_PD3_af>:
   25490:	006c 0000 0000 00ff 0004 0000 ffff ffff     l...............
   254a0:	008f 0000 0406 00ff 0004 0000 0c06 0003     ................
   254b0:	00ae 0000 0607 0003 0001 0000 0c07 0003     ................
   254c0:	00a5 0000 0b08 0000 0001 0000 0c08 0003     ................

000254d0 <pin_board_pins_locals_dict_table>:
   254d0:	0126 0000 0000 2000 012a 0000 0034 2000     &...... *...4.. 
   254e0:	0196 0000 0068 2000 017a 0000 009c 2000     ....h.. z...... 
   254f0:	0176 0000 00d0 2000 0172 0000 0104 2000     v...... r...... 
   25500:	016e 0000 0138 2000 016a 0000 016c 2000     n...8.. j...l.. 
   25510:	014a 0000 01a0 2000 0146 0000 01d4 2000     J...... F...... 
   25520:	0142 0000 0208 2000 013e 0000 023c 2000     B...... >...<.. 
   25530:	00ee 0000 0270 2000 00f2 0000 02a4 2000     ....p.. ....... 
   25540:	00f6 0000 02d8 2000 00fa 0000 030c 2000     ....... ....... 
   25550:	00fe 0000 0340 2000 0102 0000 0374 2000     ....@.. ....t.. 
   25560:	0106 0000 03a8 2000 010a 0000 03dc 2000     ....... ....... 
   25570:	0186 0000 0410 2000 018a 0000 0444 2000     ....... ....D.. 
   25580:	018e 0000 0478 2000 0192 0000 04ac 2000     ....x.. ....... 
   25590:	015e 0000 04e0 2000 0162 0000 0514 2000     ^...... b...... 
   255a0:	010e 0000 0548 2000 0112 0000 057c 2000     ....H.. ....|.. 
   255b0:	0116 0000 05b0 2000 011a 0000 05e4 2000     ....... ....... 
   255c0:	013a 0000 0618 2000 0136 0000 064c 2000     :...... 6...L.. 
   255d0:	0132 0000 0680 2000 012e 0000 06b4 2000     2...... ....... 
   255e0:	0166 0000 06e8 2000 0122 0000 071c 2000     f...... "...... 
   255f0:	011e 0000 0750 2000 017e 0000 0784 2000     ....P.. ~...... 
   25600:	0182 0000 07b8 2000 014e 0000 07ec 2000     ....... N...... 
   25610:	0152 0000 0820 2000 0156 0000 0854 2000     R... .. V...T.. 
   25620:	015a 0000 0888 2000                         Z...... 

00025628 <pin_board_pins_locals_dict>:
   25628:	1d40 0002 015f 0000 002b 0000 54d0 0002     @..._...+....T..

00025638 <pin_cpu_pins_locals_dict_table>:
   25638:	0126 0000 0000 2000 012a 0000 0034 2000     &...... *...4.. 
   25648:	0196 0000 0068 2000 017a 0000 009c 2000     ....h.. z...... 
   25658:	0176 0000 00d0 2000 0172 0000 0104 2000     v...... r...... 
   25668:	016e 0000 0138 2000 016a 0000 016c 2000     n...8.. j...l.. 
   25678:	014a 0000 01a0 2000 0146 0000 01d4 2000     J...... F...... 
   25688:	0142 0000 0208 2000 013e 0000 023c 2000     B...... >...<.. 
   25698:	00ee 0000 0270 2000 00f2 0000 02a4 2000     ....p.. ....... 
   256a8:	00f6 0000 02d8 2000 00fa 0000 030c 2000     ....... ....... 
   256b8:	00fe 0000 0340 2000 0102 0000 0374 2000     ....@.. ....t.. 
   256c8:	0106 0000 03a8 2000 010a 0000 03dc 2000     ....... ....... 
   256d8:	0186 0000 0410 2000 018a 0000 0444 2000     ....... ....D.. 
   256e8:	018e 0000 0478 2000 0192 0000 04ac 2000     ....x.. ....... 
   256f8:	015e 0000 04e0 2000 0162 0000 0514 2000     ^...... b...... 
   25708:	010e 0000 0548 2000 0112 0000 057c 2000     ....H.. ....|.. 
   25718:	0116 0000 05b0 2000 011a 0000 05e4 2000     ....... ....... 
   25728:	013a 0000 0618 2000 0136 0000 064c 2000     :...... 6...L.. 
   25738:	0132 0000 0680 2000 012e 0000 06b4 2000     2...... ....... 
   25748:	0166 0000 06e8 2000 0122 0000 071c 2000     f...... "...... 
   25758:	011e 0000 0750 2000 017e 0000 0784 2000     ....P.. ~...... 
   25768:	0182 0000 07b8 2000 014e 0000 07ec 2000     ....... N...... 
   25778:	0152 0000 0820 2000 0156 0000 0854 2000     R... .. V...T.. 
   25788:	015a 0000 0888 2000                         Z...... 

00025790 <pin_cpu_pins_locals_dict>:
   25790:	1d40 0002 015f 0000 002b 0000 5638 0002     @..._...+...8V..
   257a0:	000d 0000 0004 0000 6f74 6b6f 2520 2075     ........took %u 
   257b0:	736d 000a 7371 7274 0a3a 2020 5f6e 6f70     ms..qstr:.  n_po
   257c0:	6c6f 253d 0a75 2020 5f6e 7371 7274 253d     ol=%u.  n_qstr=%
   257d0:	0a75 2020 5f6e 7473 5f72 6164 6174 625f     u.  n_str_data_b
   257e0:	7479 7365 253d 0a75 2020 5f6e 6f74 6174     ytes=%u.  n_tota
   257f0:	5f6c 7962 6574 3d73 7525 000a 6172 2077     l_bytes=%u..raw 
   25800:	4552 4c50 203b 5443 4c52 422d 7420 206f     REPL; CTRL-B to 
   25810:	7865 7469 0a0d 0000 003e 0000 0a0d 0000     exit....>.......
   25820:	4b4f 0000 694d 7263 506f 7479 6f68 206e     OK..MicroPython 
   25830:	3176 392e 342e 372d 3739 672d 6361 3035     v1.9.4-797-gac50
   25840:	6336 3633 2d32 6964 7472 2079 6e6f 3220     6c362-dirty on 2
   25850:	3130 2d38 3231 312d 3b33 5420 7669 2061     018-12-13; Tiva 
   25860:	614c 6e75 6863 5020 6461 7720 7469 2068     Launch Pad with 
   25870:	4d54 4334 3231 4733 4836 4d50 0a0d 0000     TM4C123G6HPM....
   25880:	3e3e 203e 0000 0000 0a0d 6170 7473 2065     >>> ......paste 
   25890:	6f6d 6564 203b 7443 6c72 432d 7420 206f     mode; Ctrl-C to 
   258a0:	6163 636e 6c65 202c 7443 6c72 442d 7420     cancel, Ctrl-D t
   258b0:	206f 6966 696e 6873 0a0d 3d3d 203d 0000     o finish..=== ..
   258c0:	0a0d 3d3d 203d 0000 2e2e 202e 0000 0000     ..=== ..... ....
   258d0:	6f63 6c75 2064 6f6e 2074 6966 646e 6d20     could not find m
   258e0:	646f 6c75 2065 2527 2773 000a               odule '%s'..

000258ec <pyb_set_repl_info_obj>:
   258ec:	25ec 0002 caa9 0001 0808 0808 0000 0000     .%..............
   258fc:	5b1b 7525 0000 0000 5b1b 004b 0a0d 0000     .[%u.....[K.....
   2590c:	2020 2020 0000 0000 0dfe 7266 7a6f 6e65         ......frozen
   2591c:	6574 7473 702e 0079 03f9 5075 0079 0000     test.py...uPy...
   2592c:	01cc 0069                                   ..i.

00025930 <mp_qstr_frozen_const_pool>:
   25930:	ee54 0001 0174 0000 0003 0000 0003 0000     T...t...........
   25940:	5914 0002 5924 0002 592c 0002               .Y..$Y..,Y..

0002594c <bytecode_data_frozentest__lt_module_gt_>:
   2594c:	0003 0000 0000 300d 7400 2a01 2828 2b28     .......0.t.*(((+
   2595c:	0028 ff00 4a1b 1601 0175 0164 1b32 014a     (....J..u.d.2.J.
   2596c:	0017 0164 1b32 014a 0117 0164 1b32 014a     ..d.2.J...d.2.J.
   2597c:	0217 0164 1b32 014a ba14 9aef 6415 3201     ..d.2.J......d.2
   2598c:	3580 800f 2430 0176 4a1b 1b01 0176 0164     .5..0$v..J..v.d.
   2599c:	8132 30e5 d784 eb36 327f 5b11 2061 6f6c     2..0..6..2.[a lo
   259ac:	676e 7320 7274 6e69 2067 6874 7461 6920     ng string that i
   259bc:	2073 6f6e 2074 6e69 6574 6e72 6465 0000     s not interned..

000259cc <const_obj_frozentest__lt_module_gt__0>:
   259cc:	379c 0002 00f6 0000 0022 0000 59a8 0002     .7......"....Y..
   259dc:	2061 7473 6972 676e 7420 6168 2074 6168     a string that ha
   259ec:	2073 6e75 6369 646f 2065 b1ce b2ce b3ce     s unicode ......
   259fc:	6320 6168 7372 0000                          chars..

00025a04 <const_obj_frozentest__lt_module_gt__1>:
   25a04:	379c 0002 00c8 0000 0026 0000 59dc 0002     .7......&....Y..
   25a14:	7962 6574 2073 3231 3433 0001               bytes 1234..

00025a20 <const_obj_frozentest__lt_module_gt__2>:
   25a20:	37d8 0002 0039 0000 000b 0000 5a14 0002     .7..9........Z..

00025a30 <const_table_data_frozentest__lt_module_gt_>:
   25a30:	59cc 0002 5a04 0002 5a20 0002               .Y...Z.. Z..

00025a3c <raw_code_frozentest__lt_module_gt_>:
   25a3c:	0002 0000 594c 0002 5a30 0002 0000 0000     ....LY..0Z......

00025a4c <mp_frozen_mpy_names>:
   25a4c:	7266 7a6f 6e65 6574 7473 702e 0079 0000     frozentest.py...

00025a5c <mp_frozen_mpy_content>:
   25a5c:	5a3c 0002                                   <Z..

00025a60 <g_pui32GPIOBaseAddrs>:
   25a60:	4000 4000 8000 4005 5000 4000 9000 4005     .@.@...@.P.@...@
   25a70:	6000 4000 a000 4005 7000 4000 b000 4005     .`.@...@.p.@...@
   25a80:	4000 4002 c000 4005 5000 4002 d000 4005     .@.@...@.P.@...@
   25a90:	6000 4002 e000 4005 7000 4002 f000 4005     .`.@...@.p.@...@
   25aa0:	d000 4003 0000 4006 1000 4006 1000 4006     ...@...@...@...@
   25ab0:	2000 4006 2000 4006 3000 4006 3000 4006     . .@. .@.0.@.0.@
   25ac0:	4000 4006 4000 4006 5000 4006 5000 4006     .@.@.@.@.P.@.P.@
   25ad0:	6000 4006 6000 4006 7000 4006 7000 4006     .`.@.`.@.p.@.p.@
   25ae0:	8000 4006 8000 4006 9000 4006 9000 4006     ...@...@...@...@

00025af0 <g_pui32Xtals>:
   25af0:	4240 000f 2000 001c 8480 001e 8000 0025     @B... ........%.
   25b00:	9e99 0036 4000 0038 0900 003d 8000 003e     ..6..@8...=...>.
   25b10:	0000 004b 4b40 004c 2000 004e 8d80 005b     ..K.@KL.. N...[.
   25b20:	c000 005d 8000 0070 1200 007a 0000 007d     ..]...p...z...}.
   25b30:	9680 0098 1b00 00b7 8000 00bb e8c0 00ce     ................
   25b40:	7a64 00da 2400 00f4 0000 00fa a880 0112     dz...$..........
   25b50:	2d00 0131 3600 016e 7840 017d               .-1..6n.@x}.
